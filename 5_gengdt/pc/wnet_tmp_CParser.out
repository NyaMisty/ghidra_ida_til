
#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\pc\wnet.til.h"
/// #define GHIDRA ===DEFINED

/// #ifndef INCLUDE_GUARD_wnet_til ===true

/// #define INCLUDE_GUARD_wnet_til ===DEFINED


#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\5_gengdt\pc\.\..\..\..\..\IDAPlugins\idatil2c\common.h"


/// #define __int64  long long ===DEFINED
/// #define __int32  int ===DEFINED
/// #define __int16  short ===DEFINED
/// #define __int8  char ===DEFINED

/// #ifdef GHIDRA ===true

typedef struct {
    long long u1;
    long long u2;
} __int128;
typedef struct {
    unsigned long long u1;
    unsigned long long u2;
} __uint128;
/// #endif ===true


typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

/// #define _BYTE  uint8_t ===DEFINED
/// #define _WORD  uint16_t ===DEFINED
/// #define _QWORD  uint64_t ===DEFINED
/// #define _DWORD  uint32_t ===DEFINED



/// #ifndef HAVETYPE_bool ===true

/// #define bool  char ===DEFINED
/// #endif ===true


/// #ifndef HAVETYPE___u32 ===true

typedef uint32_t __u32;
/// #endif ===true

/// #ifndef HAVETYPE___u16 ===true

typedef uint16_t __u16;
/// #endif ===true

/// #ifndef HAVETYPE___u64 ===true

typedef uint64_t __u64;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_uid32_t ===true

typedef unsigned int __kernel_uid32_t;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_mqd_t ===true

typedef int __kernel_mqd_t;
/// #endif ===true

/// #ifndef HAVETYPE_DOT11_DIRECTION ===true

typedef int DOT11_DIRECTION; 
/// #endif ===true

/// #ifndef HAVETYPE__DEVICE_RELATION_TYPE ===true

enum _DEVICE_RELATION_TYPE {_DEVICE_RELATION_TYPE_UNDEFINED,};
/// #endif ===true



/// #define __fastcall ===DEFINED

/// #define __unaligned ===DEFINED

/// #define __stdcall ===DEFINED

/// #define __cppobj ===DEFINED

/// #define __declspec([x])   ===DEFINED
/// #define __hidden ===DEFINED

/// #define __cdecl ===DEFINED

/// #define __noreturn ===DEFINED

/// #define __pascal ===DEFINED

/// #define __near ===DEFINED

/// #define __high ===DEFINED


/// #define const ===DEFINED

/// #define this  _this ===DEFINED
/// #define near ===DEFINED


typedef char _Mbstatet;

typedef void **va_list;





























 
#line 4: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\pc\wnet.til.h"




struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2___9A3D5550B6DEF9CE405BB00483386E67;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2___DB4434C0CE3788EF589018B7D8F8E412;
struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___6B5846D67F7DD81E1807E9F45EE9219E;
struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___7C8E1366D020F294DF98B2AA96DD5064;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3;
struct _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764___F985BF779D0F5FE11994F28A81731018;
struct _HIDP_KEYBOARD_MODIFIER_STATE___09F65E3D8EC31FFE3E62B668D67CDD30___CCD288663407EB3BCE693252A6740B18;
struct _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912___558C11AAB270A8DE5636A48AC52A55A4;
struct _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4;
struct _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC___558C11AAB270A8DE5636A48AC52A55A4;
struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1;
struct _DEVICE_MEDIA_INFO_________4F7870307D68C2FCA7F129B9E5696535___445D6B15ACF5C822E8B4A555F1AF8785;
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___99025D9F8BC16C326FB237046D6F6F6F;
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___B2B02F0A7FAA2EF9E06FFE2893D08AB3;
struct _EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786___11F7F98663FFB665C68BB15C93C2F507;
struct _EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___3916B5A0A4660469331A3AB74E6C841E;
struct _EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___4632BB0954E310FA042A82D8AAC70C14;
struct _EVENT_INSTANCE_HEADER___CD063E6C818675C054F8A7A9A4738EC7___3A0264781BC9263812BBB95F70B75F25;
union _DEVICE_MEDIA_INFO______723F4108713078BC94E60AB72DA19CAC___4F7870307D68C2FCA7F129B9E5696535;
struct _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5;
struct _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835___A65BB09441F58C3866A236B20CDA4416;
struct _TRACE_LOGFILE_HEADER___2BC8F7E6FF87669E4A0C925407CB65FB___0637F23A6873A28AE6543F059E4656C5;
struct _TRACE_LOGFILE_HEADER___548299C9C2C0CFAB401D5C20E83DC5C0___8A1F015C44BA8AC17C85DC9BC7770995;
struct _DISK_DETECTION_INFO___2344D2D0A84D08BC25A5ABEA77F9F68C___C6895C4B5C301AAC9475EDA00CD39D51;
struct _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6___BE6FFFE6B14D10E80BF326EA5B53821A;
struct _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6___D881D5162AD89D33B7C29C1B01B58C16;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264;
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158;
struct _EVENT_TRACE_HEADER___1AD55EBA06F1C593881758F8895638BC___11F7F98663FFB665C68BB15C93C2F507;
struct _EVENT_TRACE_HEADER___542A7946210020DC939EF0A87B64A883___3916B5A0A4660469331A3AB74E6C841E;
struct _EVENT_TRACE_HEADER___542A7946210020DC939EF0A87B64A883___4632BB0954E310FA042A82D8AAC70C14;
struct _EVENT_TRACE_HEADER___9430D09E29912981CCDB72549C8FCA9E___3A0264781BC9263812BBB95F70B75F25;
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0;
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F;
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___723F4108713078BC94E60AB72DA19CAC;
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52;
struct _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9___558C11AAB270A8DE5636A48AC52A55A4;
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___04135898E560345A2F242A01D2B4E8C6;
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___B5DCF807C499FCDEE2A60940AC752147;
struct _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893___83D0A1D806B42BB3CFEB24AD25988CD4;
struct _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893___9A2DEDAE27CA526CD6B2E1277E119468;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46;
struct _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058___A887C3F43B2C266F56E28E9B472055DF;
struct _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058___AFC34197E5C51B956EFAB0EF06B6B136;
union tagPROPVARIANT______1A0FF913CB6A2700FBDFFDCC16233417___C55E7FD68DDBD4820BEEA04B5D0E46A7;
struct _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41___83D0A1D806B42BB3CFEB24AD25988CD4;
struct _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41___9A2DEDAE27CA526CD6B2E1277E119468;
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___5843F6C8FAC72B709E58873D9E66E99B;
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___A18A6C82CF5B218D68E8003A992A5456;
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___FE55FC766DFEC649A23F3D16D006B7DF;
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___1D4E303DADE57E5BB276842A2C49A9FB;
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___C57AEBFB9C28022BDEE1928105F7EF0C;
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B;
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC;
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A8262751543F154F80C41ED2519FD13B;
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A9226EEFE738F03A3F7D52221D0941CC;
struct tagVARIANT_________E09503A454170B491AC1C4312CE36FE6___0FDBD249F1AECD6A49409B6B82281578;
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___3558499B00780F336C093631BA5DA9A7;
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___6F55BDC2B20B661E3B87B545C6DF801F;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___1D5E47AA0A419EF9D9DA6D4AA01777EC;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___59AFAA6F9F17F2AA385AB5E28054F780;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___B971492F433B977CE6769B3AAD780315;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___C9F2A79EEE81C8CFC776F7DA83E58678;
struct tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E___1A0FF913CB6A2700FBDFFDCC16233417;
struct _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3___DE8E098676ACAC74F2956A2D7B83DF3B;
struct _WNODE_HEADER___FC8E5BF4FD761F48CA6E0E74FA8C78CE___0AFF34700F133A66677DA8590144B5D8;
union tagVARIANT______65D68C826D16CA47CF95571D7BFCD657___E09503A454170B491AC1C4312CE36FE6;
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9;
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___3558499B00780F336C093631BA5DA9A7;
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___6F55BDC2B20B661E3B87B545C6DF801F;
struct _devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___604F2BC6924E02F5722A52FC79BC44F9;
struct _devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___A4EE175A7532F35C00DA5CAD042934DF;
struct _devicemodeW___5A39A2C3BB0B1D2D5888DFEE2BA0B23C___604F2BC6924E02F5722A52FC79BC44F9;
struct _devicemodeW___5A39A2C3BB0B1D2D5888DFEE2BA0B23C___A4EE175A7532F35C00DA5CAD042934DF;
struct _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC___357EACEEC0937B9854AEEA856D78648F;
struct _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC___C14401A1E0730961694E5F3AC835B577;
struct _OVERLAPPED___742A73540840F318F86F9CEE3D494648___9BFE693EDA487769FDABADE5E43394F7;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692;
struct tagRAWMOUSE___BAD619BF849CA7670BF9DAFAE180B654___3E7396A53A7735AC40BFDACB443E8DAA;
struct _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902___40942CBCB8F0A1CDBC81269929B28324;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D;
struct tagVARIANT___E93DC971A089CC95F6C875332324C1E7___65D68C826D16CA47CF95571D7BFCD657;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5;
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B;
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56;
union _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8;
union _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO___76A3B0E8FFB5FF4FE868B027B0FA21D8;
union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2;
struct ____335ECC51A6B56A7597C0B2929815FEAA___2045542961514ACF8A05342E7D7A4BD3;
struct ____335ECC51A6B56A7597C0B2929815FEAA___557E0A75632B2AB77ABA22F73346E46E;
struct ____335ECC51A6B56A7597C0B2929815FEAA___77A8D5BA7911BAC3E5E8672810CEE79A;
struct ____F044539147C377D1A0F579F3A4EAC6A7___8DB12206A787E12F5CB68E9C5F8D04FA;
union _D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA___D502B0312B70DCF8ACF8FE55005DEB1B;
union __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005;
union _117E3A994AEBF040E18388CACE709509___F044539147C377D1A0F579F3A4EAC6A7;
union _16C1E3925C7C4AECC0ACCAA7BBC13164___335ECC51A6B56A7597C0B2929815FEAA;
union _48F34F6E58318E719B3C17D5DF8D3416___BF32DB6F8F7ADBF71F90C18AFCE2FD9C;
union _572C9F5A336F5256CCDD98B741672A4F___3D2B62F9915B44C4461260C3662DC358;
union _742D342C7048E2C3902DF7570B72F6FC___1E7C0E17512837337D4DA69F160D7B1A;
union _7DEDD44825251A4EAA915BE1158FDB4F___DA7EE1E32CD45FB8635BE676609FC669;
struct _87B5C366CEDD06D1A6AC557671C7F981___368524030E53626B9A6587120F737379;
struct _87B5C366CEDD06D1A6AC557671C7F981___EEA291B95E2758FCA85357F8BCFF0FA8;
struct _A4FB595EF421231CAF150DDD3288A6D5___33A5881EA3D20175AF6F6CBC82269B7B;
union _C6963F188D9781F9428F32FE3A3801AF___B3542C9802D50308928B7299817A649E;
struct _C9F2A16A1B5FC998B91DA494984E0FDB___0559678CAE7576A37561112FDF9C20E6;
struct _C9F2A16A1B5FC998B91DA494984E0FDB___F7C05C0C56E55CB044DFD46C70BB2992;
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F;
union _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8;
union _CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217;
union _CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29;
union _CMSG_KEY_AGREE_RECIPIENT_INFO___74691898E1CF581306BA249AD6F73FE1;
union _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764;
union _D3DNTHAL_DRAWPRIMITIVES2DATA___4A40E7D6792F856550440E087D486853;
union _D3DNTHAL_DRAWPRIMITIVES2DATA___DD26F1CDDCEF09909ADB7370566018B7;
union _DDRAWI_DDRAWSURFACE_GBL_MORE___69CDF4F9B83E08C1B922F58FDF1EFCB2;
union _HIDP_KEYBOARD_MODIFIER_STATE___09F65E3D8EC31FFE3E62B668D67CDD30;
union _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912;
union _SET_PARTITION_INFORMATION_EX___ECBF70424E32A71371BB3749E7C6F2EC;
union _CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1;
union _D3DHAL_DRAWONEPRIMITIVEDATA___D502B0312B70DCF8ACF8FE55005DEB1B;
union _DRIVE_LAYOUT_INFORMATION_EX___E2E3D8483D032B54611BEB6ADCC46344;
union _CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA;
union _D3DHAL_DRAWPRIMITIVES2DATA___9EC3BABFFB78E494A9811F3E77A2E483;
union _D3DHAL_DRAWPRIMITIVES2DATA___DD26F1CDDCEF09909ADB7370566018B7;
union _D3DHAL_SETRENDERTARGETDATA___AA7F4F4835B84F00D17421C4D2A8A049;
union _D3DHAL_SETRENDERTARGETDATA___F97B1EB6D3AC6DA1707638C5E5848180;
union _D3DNTHAL_CONTEXTCREATEDATA___7306C4885F53B6B53241EB9996CEFDB0;
union _D3DNTHAL_CONTEXTCREATEDATA___A8B4623C3229555B56CAEDFBFEF613EE;
union _D3DNTHAL_CONTEXTCREATEDATA___DDCF36927E9BFFDD33D690AC93DE791F;
union _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533;
union _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC;
union tagRPC_EXTENDED_ERROR_INFO___749E5BDCBED96F03DEF2385A3B61DB7C;
struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0;
union _D3DHAL_CONTEXTCREATEDATA___5B3AA550925D9E55122DB1650DBDB03D;
union _D3DHAL_CONTEXTCREATEDATA___7D939C7B4C349D82EC03AF3B9C890713;
union _D3DHAL_CONTEXTCREATEDATA___AA7F4F4835B84F00D17421C4D2A8A049;
union _D3DHAL_CONTEXTCREATEDATA___F97B1EB6D3AC6DA1707638C5E5848180;
union _DDHAL_GETDRIVERSTATEDATA___55B688470741D627FF8277FCA6824CAA;
union _PARTITION_INFORMATION_EX___41520227951B374488E85ABED149FDD2;
union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1;
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5;
union _CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC;
union _D3DNTHAL_DP2RENDERSTATE___933A9CF36F1631E8E6BBB7EC5EB7821A;
union _DDRAWI_DDRAWPALETTE_GBL___87CE64BF97EC25E039FC3DE56880F238;
union _DDRAWI_DDRAWSURFACE_GBL___067F989D0D1C114CD62AD2D89785FAE9;
union _DDRAWI_DDRAWSURFACE_GBL___091DBF7D405BE25E65B16620C008128B;
union _DDRAWI_DDRAWSURFACE_GBL___3E3480D0EE217BAF358C6F7F63164C60;
union _DDRAWI_DDRAWSURFACE_GBL___EC76CB933E4FE6CB0F7AEE5EDE5FE8FF;
union _DDRAWI_DDRAWSURFACE_LCL___6B043036C782DCB581418A8818C1EC9C;
union _DDRAWI_DDRAWSURFACE_LCL___91466F88B03FE00779D4AC4358EC9B5C;
union _HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86;
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38;
union _LSA_FOREST_TRUST_RECORD___C7B7650F067485BDF6AE9750858A9CDD;
union _PROPSHEETUI_INFO_HEADER___88E50736DABF366776B5B85D748FD16D;
union tagWNODE_EVENT_REFERENCE___35BDACE2D4BA78DD0D25FA8577D99EB2;
union _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D;
union _IMAGE_FUNCTION_ENTRY64___20B872DD2F1538A436CF92B8294FA12B;
union _SP_ALTPLATFORM_INFO_V2___93AF3E658AF10EA933E0A7726F592163;
union _D3DHAL_DP2RENDERSTATE___F3EDB45D1196EF7B88036FF534BB239B;
union _DD_GETDRIVERSTATEDATA___ABF7C201B03F35578F4E1B252F89AF54;
union _EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786;
union _EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830;
union _EVENT_INSTANCE_HEADER___CD063E6C818675C054F8A7A9A4738EC7;
union _NDR_USER_MARSHAL_INFO___2E50A3D60C3ABC8A29A927969B630A6D;
union _RPC_SECURITY_QOS_V2_A___21F5B817940D6D46E3F17BCDBFB4C1E3;
union _RPC_SECURITY_QOS_V2_W___29884D18EDD7E60328F7BC8BF7D34E2F;
union _RPC_SECURITY_QOS_V3_A___21F5B817940D6D46E3F17BCDBFB4C1E3;
union _RPC_SECURITY_QOS_V3_W___29884D18EDD7E60328F7BC8BF7D34E2F;
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003;
union _D3DNTHAL_DP2SETLIGHT___BAE4FD8B353780C236F6C67FD08E1F99;
union _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A;
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D;
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7;
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C;
union _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835;
union _TRACE_LOGFILE_HEADER___2BC8F7E6FF87669E4A0C925407CB65FB;
union _TRACE_LOGFILE_HEADER___548299C9C2C0CFAB401D5C20E83DC5C0;
union tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1;
union tagMIXERLINECONTROLSW___DC43C2837E8C20184C3137B308FBE3E1;
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0;
union _CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676;
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178;
union _CRYPT_PROVIDER_DATA___FE2B7DE956400363F942998E125D9843;
union _D3DNTHAL_DP2COMMAND___14A7885A2BAE378098B3BAEC00AA634B;
union _DISK_DETECTION_INFO___2344D2D0A84D08BC25A5ABEA77F9F68C;
union _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6;
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F;
union tagRPC_EE_INFO_PARAM___A3FD93C0502A9420CA2CBD32041223FD;
union _CMC_TAGGED_REQUEST___F9232B04B0227B82B480A0AF719B17A6;
union _EVENT_TRACE_HEADER___146F82FB58FCEC23F5D30A6BD72C4E4F;
union _EVENT_TRACE_HEADER___1AD55EBA06F1C593881758F8895638BC;
union _EVENT_TRACE_HEADER___542A7946210020DC939EF0A87B64A883;
union _EVENT_TRACE_HEADER___9430D09E29912981CCDB72549C8FCA9E;
union _IMAGE_THUNK_DATA32___A667AA66621C320A48F8EE5C4EA8143D;
union _IMAGE_THUNK_DATA64___F155400DC8E777EDFF51409B49416578;
union _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07;
union _D3DHAL_DP2COMMAND___14A7885A2BAE378098B3BAEC00AA634B;
union _DD_SURFACE_GLOBAL___091DBF7D405BE25E65B16620C008128B;
union _DD_SURFACE_GLOBAL___7A21B59C32CFF5CA15CB97B965C92E66;
union _DD_SURFACE_GLOBAL___CB1E62DE7444A801DA980E43BEA08FB3;
union _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983;
union _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9;
union _PROPSHEETPAGEA_V1___B64A5FEB82A45975B190BC8DCA872511;
union _PROPSHEETPAGEA_V1___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETPAGEA_V2___B64A5FEB82A45975B190BC8DCA872511;
union _PROPSHEETPAGEA_V2___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETPAGEW_V1___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETPAGEW_V1___26DC58415637CAEA1C2B7198DBAAFB8E;
union _PROPSHEETPAGEW_V2___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETPAGEW_V2___26DC58415637CAEA1C2B7198DBAAFB8E;
union _SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4;
union _SHELLEXECUTEINFOW___D915D6B2B775D926C11EEA321E8940B4;
union _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD;
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001;
union tagRID_DEVICE_INFO___5504F465AFF1BB2B3641E853B1A95DB8;
union tagTVINSERTSTRUCTA___2E49B666B82A4FD641FAFC76A3D29C8E;
union tagTVINSERTSTRUCTW___3D7B1E305294EDBA05E56815A0E14872;
union _DD_SURFACE_LOCAL___8CE80F6FCD2F01A44D21440F2D83D305;
union _DD_SURFACE_LOCAL___E7EC937F2BC99723904DDC13F7AE4E6E;
struct _FT_STRIPE_SET_WITH_PARITY_CONFIGURATION_INFORMATION;
union _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893;
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11;
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C;
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34;
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5;
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED;
union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC;
union _KSM_BDA_PIN_PAIR___54CD25B4E687557DB78A3697AAB04510;
union _KSM_BDA_PIN_PAIR___F2C15BE15B02E5D4E08CDF00E238673A;
union _PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C;
union _PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42;
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987;
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5;
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457;
union _PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779;
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710;
union _PROPSHEETHEADERW___C635E94935336589E496FC759198B86F;
union _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058;
union tagWNODE_ALL_DATA___2509F747D046B06D85040055D485D2C5;
union _CMC_STATUS_INFO___7102899B559A8354A70F3F8928772BC0;
union _CONTROL_SERVICE___3FB44F62F5D12D5D44B4562DCCF9333E;
union _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41;
union _MIB_OPAQUE_INFO___17F86C708787DF658C468325A0B0DE76;
struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B;
struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156;
struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250;
union _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3;
union _RSVP_FILTERSPEC___59F6C73F6B9BF6FF92B2606A8BB6C14F;
union _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191;
union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8;
union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E;
union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122;
union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E;
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50;
union _DDSURFACEDESC2___091DBF7D405BE25E65B16620C008128B;
union _DDSURFACEDESC2___5B12F1D1A21F9ED7C15CB39448B5A42D;
union _DDSURFACEDESC2___640C42AFF919FFD3058B9E962436B842;
union _DDSURFACEDESC2___E56E877DD0D4D3B03846BC7047D947ED;
union _DDSURFACEDESC2___F25F5019EA70F6B9B11866A0D418A260;
struct _DD_MORESURFACECAPS__tagNTExtendedHeapRestrictions;
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672;
union _PROPSHEETPAGEA___B64A5FEB82A45975B190BC8DCA872511;
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETPAGEW___26DC58415637CAEA1C2B7198DBAAFB8E;
union _SYM_DUMP_PARAM___0CD91D185F770C4760C3259863AFD91E;
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC;
union tagINPUTCONTEXT___072C26F05A152342D8ECB054BF7B2AA0;
union tagKS_VIDEOINFO___F8BBADE88DA80D04A6A2CB02740F1E2F;
struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
union _DDPIXELFORMAT___0E0BD8DB15B3F2A790C062F781315157;
union _DDPIXELFORMAT___10AA641B3215541DB69A48A361AE0013;
union _DDPIXELFORMAT___3ED4EC923A768B2489A9D1155BD11968;
union _DDPIXELFORMAT___4C5EBD389D88C4C046794501FFF390F4;
union _DDPIXELFORMAT___DB4BDA43012B420E1DC9AEEACAA267A5;
union _DDSURFACEDESC___091DBF7D405BE25E65B16620C008128B;
union _DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B;
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E;
union _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F;
union _WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB;
union _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655;
union tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E;
union _CPSUICBPARAM___7FE1AA947C56968AF3B960F56128DB37;
union _D3DMATERIAL7___0E29CCD1ABCFA56B0343B217BB93547E;
union _D3DMATERIAL7___48A7D73869B8DD97079A7DB0052C867A;
union _D3DMATERIAL7___4E89CE7B3871A99DAB3B73BC63770FCE;
union _D3DMATERIAL7___B545799AB1B094EA7448ADA6B118C0D5;
union _D3DMATERIAL7___F37024B6A2A7DA8F8161E452127F778F;
union _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3;
union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4;
struct _SLIST_HEADER___83AF6D9DC8E3B10431D79B304957BA23;
union _WNODE_HEADER___94883EDDB53D73798B50E968A69A9EBB;
union _WNODE_HEADER___FC8E5BF4FD761F48CA6E0E74FA8C78CE;
struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E;
struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA;
union _CREATE_DISK___E6D8F73FA11FE79B0BBE7B30BDE20C7B;
union _D3DMATERIAL___0E29CCD1ABCFA56B0343B217BB93547E;
union _D3DMATERIAL___48A7D73869B8DD97079A7DB0052C867A;
union _D3DMATERIAL___4E89CE7B3871A99DAB3B73BC63770FCE;
union _D3DMATERIAL___B545799AB1B094EA7448ADA6B118C0D5;
union _D3DMATERIAL___F37024B6A2A7DA8F8161E452127F778F;
union _D3DTLVERTEX___0F2CDCA047003D8EC75118693930E691;
union _D3DTLVERTEX___30594A6BB70EFF251680D22A869004B0;
union _D3DTLVERTEX___34D6BCDD47B44126D7A203197E7A8282;
union _D3DTLVERTEX___6CA934479C1F92723C45B62B9DC7F703;
union _D3DTLVERTEX___7013070F7992C3CB148910863AB1E659;
union _D3DTLVERTEX___BDFC1E337EC7BF58E4386644A37C7111;
union _D3DTLVERTEX___ED3D3C9797719C595EAD57A73B2054F3;
union _D3DTLVERTEX___F5EA273054A07BEACA92D8100BBF37A6;
union _D3DTRIANGLE___5E81141D7147E4DA50A203FBA8012470;
union _D3DTRIANGLE___B37211E5FB9C3E78EB744E72121563AA;
union _D3DTRIANGLE___C167AD525C2A16158535093655B0BE27;
struct _DDMORESURFACECAPS__tagExtendedHeapRestrictions;
union _DDOVERLAYFX___3639C047B3E88B857708792B1F3FEC83;
union _DDOVERLAYFX___C0828DA952883A43DEF8D462ACC90C87;
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4;
struct _IPX_PATTERN___BD8DCF4BCCBA406C79DE40E5D399A54E;
union _KSM_BDA_PIN___E33ABE1885360AB30BA4739A3C7D59A2;
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F;
union _VIDEOMEMORY___9185259A75FBB280E946CF1BC6C2CB4D;
union _VIDEOMEMORY___F643F706E5FAED7B713649E0BB2B511C;
union _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3;
union _devicemodeA___4FBEBCCE69364E072421C9DF045BB77C;
union _devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7;
union _devicemodeW___4FBEBCCE69364E072421C9DF045BB77C;
union _devicemodeW___5A39A2C3BB0B1D2D5888DFEE2BA0B23C;
union _wireVARIANT___BE66B252C7DCDEBB95D6D0C528AEDF22;
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB;
union _D3DHVERTEX___422DE5A9C9FEBBB756750EDCDEE4D165;
union _D3DHVERTEX___81DEDA9DF6ACB3C44C422FDD657F648D;
union _D3DHVERTEX___D02C4950DEF26FBAA94C7BFFD90117CD;
union _D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA;
union _D3DLVERTEX___30594A6BB70EFF251680D22A869004B0;
union _D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282;
union _D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21;
union _D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0;
union _D3DLVERTEX___7013070F7992C3CB148910863AB1E659;
union _D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6;
union _DS3DVECTOR___1C324E33BC6F74D1A02BB1B088C4590A;
union _DS3DVECTOR___4C8BE1C25D9187060DF6575EC0B5A14F;
union _DS3DVECTOR___C7D9B5A2358E86AF5EA4461ED5800501;
union _FIELD_INFO___510B7A64051C47DF2E916A87C3B03279;
union _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC;
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
union _OVERLAPPED___742A73540840F318F86F9CEE3D494648;
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D;
union tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D;
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2;
union tagRAWINPUT___B145025D4CA0B4EFAFBBD6E93F901CD9;
union tagRAWMOUSE___BAD619BF849CA7670BF9DAFAE180B654;
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897;
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
union _BIDI_DATA___576ECEF05A6845DB2A355826BB89294F;
union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC;
union _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902;
union _D3DVERTEX___2970DA2ECFB38188FCB670891BDDBDFA;
union _D3DVERTEX___3781A3F6A2280FF9BE972B852E87FD21;
union _D3DVERTEX___3782FED7D702BF3DE1FC57BD6CFA9C0A;
union _D3DVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0;
union _D3DVERTEX___7013070F7992C3CB148910863AB1E659;
union _D3DVERTEX___83AC1A1E23B9ECFE234B7286E62DB631;
union _D3DVERTEX___D6B931185C6B831ED9D2BDE28EC5A699;
union _D3DVERTEX___F5EA273054A07BEACA92D8100BBF37A6;
union _DDSCAPSEX___19AC68468C4510B3DC631A4E89752068;
union _HIDP_DATA___054E66EBAEB900A97FB470AAB272100E;
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097;
union _NDIS_GUID___AB53B9CEEC61ECDF1333D6EBB2604C4E;
union _TRANSDATA___171E29005E45E425E24743D2D879D2A6;
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514;
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B;
union tagVARIANT___E93DC971A089CC95F6C875332324C1E7;
union SPC_LINK____5823D59480DB17DC94F0503486FD38F0;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
union _D3DSTATE___6E126D7179C3BD6696EBA355AAC6A589;
union _D3DSTATE___FC92201DB4C9E6548D65A7EA5D174F48;
union _DDSCAPS2___19AC68468C4510B3DC631A4E89752068;
struct _FT_REDISTRIBUTION_CONFIGURATION_INFORMATION;
union _NT_TIB32___6105CEC04866A055CE5CBAD3B96FF6B2;
union _NT_TIB64___1E27901D73CC769BB707041ECE344787;
union _CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C;
union _D3DLINE___5E81141D7147E4DA50A203FBA8012470;
union _D3DLINE___C167AD525C2A16158535093655B0BE27;
union _DDBLTFX___3639C047B3E88B857708792B1F3FEC83;
union _DDBLTFX___4C109671A06E28B8127C40041AB5795C;
union _DDBLTFX___702C52B3655764E63C007A6B73D01C19;
union _DDBLTFX___C0828DA952883A43DEF8D462ACC90C87;
union _DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935;
union _DLGPAGE___81D8EEF2744445A9EE82E88354D6B45B;
union _EXTPUSH___7C7FF14AAA7F2F0CB53D652B0FC528B5;
union _EXTPUSH___81D8EEF2744445A9EE82E88354D6B45B;
union _OPTITEM___74C825475D62323C9F8B7568E9B8E215;
union _OPTITEM___DEC5B3968A449581A37FC9B786F6173F;
union in6_addr___6F0816B860EA11CA8E788AEE35731DB2;
union tagINPUT___72687D791E298366090936F57062F9D6;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA;
union _STRRET___CBA4CBE4EE73FCDBDFD08B2527F2F26D;
struct _VBICODECFILTERING_STATISTICS_TELETEXT_PIN;
union _VIDMEM___99A34FFB5DAE936C058DAB09DE9C6078;
union _VIDMEM___F643F706E5FAED7B713649E0BB2B511C;
union in_addr___C13EC994467D6E67044F092615EC7EA9;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
union _userHMETAFILEPICT____MIDL_IWinTypes_0005;
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34;
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301;
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
struct _FT_MIRROR_SET_CONFIGURATION_INFORMATION;
struct _FT_STRIPE_SET_CONFIGURATION_INFORMATION;
struct _VBICODECFILTERING_STATISTICS_COMMON_PIN;
union _userHENHMETAFILE____MIDL_IWinTypes_0006;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3;
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
struct _D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA;
struct _FT_PARTITION_CONFIGURATION_INFORMATION;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
struct _LSA_FOREST_TRUST_COLLISION_INFORMATION;
union _RemotableHandle____MIDL_IWinTypes_0009;
struct _VBICODECFILTERING_STATISTICS_NABTS_PIN;
struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
struct IDirectSoundCaptureFXNoiseSuppressVtbl;
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
struct _VBICODECFILTERING_STATISTICS_TELETEXT;
union _userCLIPFORMAT____MIDL_IWinTypes_0001;
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION;
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
struct _D3DHAL_VALIDATETEXTURESTAGESTATEDATA;
union _GDI_NONREMOTE____MIDL_IWinTypes_0002;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
struct _KERB_ADD_BINDING_CACHE_ENTRY_REQUEST;
struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
union _userHMETAFILE____MIDL_IWinTypes_0004;
struct IDirectMusicDownloadedInstrumentVtbl;
struct IWbemDecoupledBasicEventProviderVtbl;
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION;
struct _FT_MIRROR_AND_SWP_STATE_INFORMATION;
struct _FT_REDISTRIBUTION_STATE_INFORMATION;
union _GDI_OBJECT____MIDL_IAdviseSink_0002;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
struct _VBICODECFILTERING_STATISTICS_CC_PIN;
struct _VBICODECFILTERING_STATISTICS_COMMON;
struct __MIDL___MIDL_itf_shobjidl_0201_0002;
struct __MIDL___MIDL_itf_shobjidl_0202_0003;
struct __MIDL___MIDL_itf_shobjidl_0211_0003;
struct __MIDL___MIDL_itf_shobjidl_0230_0001;
union _userHPALETTE____MIDL_IWinTypes_0008;
struct NDIS_BPC_MEDIA_SPECIFIC_INFORMATION;
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
struct _ASSEMBLY_FILE_DETAILED_INFORMATION;
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
struct _D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO;
struct _VBICODECFILTERING_NABTS_SUBSTREAMS;
struct _VBICODECFILTERING_STATISTICS_NABTS;
struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
union _userHBITMAP____MIDL_IWinTypes_0007;
union _userHGLOBAL____MIDL_IWinTypes_0003;
struct IDirectSoundCaptureFXNoiseSuppress;
struct IInternetProtocolSinkStackableVtbl;
struct IWbemClientConnectionTransportVtbl;
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
struct _CERT_POLICY_QUALIFIER_USER_NOTICE;
struct _CHANGER_INITIALIZE_ELEMENT_STATUS;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
struct _D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE2;
struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION;
struct _LSA_FOREST_TRUST_COLLISION_RECORD;
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A;
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W;
struct __MIDL___MIDL_itf_wtypes_0003_0001;
struct tagKS_DATAFORMAT_VIDEOINFO_PALETTE;
struct _01091B9DEBEBC2354EBF1594EEF6BE89;
struct _01DCE0ED23F464638BF845FBE919C7FC;
struct _0302F8A06E19F526F6B7CE33122C2128;
struct _03532CD8BA12737E900F44108AB1BA2F;
struct _05B1F1BDA3A085B0ABA09A777878EB7C;
struct _0606DB5FE2099CCDC829F33B29607B55;
struct _060D6FD956D3EBF205D64C3CA4764571;
struct _060F75F85D33090A279ABE5EFCC5AB4A;
struct _068AF82868DFBF98C4A3A88443B401AE;
struct _078929F8CD96C82DFB2B0B82CFD86124;
struct _07B7FBDB71A394C363DCB969C30B9F57;
struct _097132A3DAC724C77C2462A4DC4AA652;
struct _0D4D90B30C078E58E26CBA964C3C5A4B;
struct _0E076CBD8F5A7ED08B697C5009EDFCFF;
struct _117E3A994AEBF040E18388CACE709509;
struct _12065485545C98CF3EA596DDCCDF0ED5;
struct _12220BD7577024BDCE09342FCD2824E0;
struct _12A419A691843E3FACBCDACF473D8E54;
struct _13B347001B2B96C65D01839EEA37C971;
struct _155DA1A439C400442DF8DC3CA0B009F1;
struct _16C1E3925C7C4AECC0ACCAA7BBC13164;
struct _1889F3BAB83DF1AC38A4E0627115688D;
struct _18FEA12C471CE0A4515515C42723EF45;
struct _190FAF90ED71AB17CA7DE27E94D1BCF3;
struct _195B5ED187AD0EF03C07D6DC4096CC78;
struct _1A75AE2BAA617C024EDEDCFC2DDC14A8;
struct _1C7B1951FFF3947E82177A9E3997A43B;
struct _1C8C43135D010607C9E39DAEFBEEA658;
struct _1C9ED8E2FE494C714F8336D090291E50;
struct _1CE0BD7852F87226759D0185D4AC1198;
struct _1D3D1B49856810D80BCDEEA6F14E981E;
struct _1DF2F441892C3D46584606B89F66007B;
struct _1F0027E2ABF976FB8AD72E88DC9BB28B;
struct _1F16BBD766B6BEFB723ABEAEF53457A3;
struct _1FC20381981E06D3B4F68D6006129906;
struct _204C6CB5B1CC0D35B371E5C594718A83;
struct _22BDD2D628B0B561C5A9CA42290FE551;
struct _23496AA6B538BC04EA278D40B88E7395;
struct _25388EDDA6F9AFF912B25CA06CA16E0D;
struct _25CE079B09F538272C66874FFD3C2C16;
struct _26873349DB0A36B1F3161FA857CA70AC;
struct _284877062F9D14F112F3A0D6BC9583DD;
struct _299134A1587F81C88B1AF91D3DBFCA39;
struct _2AA7958816AF26AF0A1E54EEE587A92C;
struct _2B6042393D1A02E0AE9B16B44F784AC7;
struct _2E2AA9F03C861A9A9D27DBF19670D54B;
struct _2E8FF8F0F30DAB89972BBD12E0BA3A8E;
struct _2FB1DA8EC643BE4B9CF4F2ACCAFA1124;
struct _2FCB7B16F35A994219C907239F9496DC;
struct _30C092ACFDACA2A085242C6994837CA9;
struct _30CDF2DE7DC7B55457111E3E79D8AE18;
struct _358B21B769DBB67C3050F61FED658732;
struct _37E4785F055768DB96FB0F6687850E13;
struct _38332C6D8513F636DCCBCCABE200BE7A;
struct _3878B18F15C290CF7BC80116234DE41C;
struct _3990AA19D6F3231E9709B3F98F437D89;
struct _39A7E4ECA0CDD25B70D9543F73C0D523;
struct _3A21E11B68C434F2F5E8C2B6B2DCB409;
struct _3A744348A6C9F73853F568E19FD6B4F7;
struct _3D26434F5A7D20980B51C6D4C88FA6DE;
struct _3E8BFD172CC0232DA5E7071EC2A0A89F;
struct _3EC5757393EE7828D79CED73ACE876F0;
struct _3FA64165D15A4602C29B2D9B0DA4A5E9;
struct _40B3E31023928B11E2A8685514812B52;
struct _41B57DF5617420B0F03CF260623C53E1;
struct _433BAB6AAAB02EEB6CF36ABDE1A4217C;
struct _436EEAB87169589F8FF54A3E6B966B58;
struct _43A66EA2444E935077C76570D355CBC3;
struct _441EBF211493C42D9642F77D873F68D1;
struct _4436E3E3B2A9BAC50D793DBB422657C7;
struct _455481A63A960E136730B1239333B9FD;
struct _46B8CD9DF897759D0306203A2121EA8B;
struct _478EBBB1B521D3328EC986A2D868B910;
struct _48207AC35C517F533F0BE91ADB0B9FCA;
struct _48F34F6E58318E719B3C17D5DF8D3416;
struct _49CD7323AA35D3C00204BB7AA8563FFA;
struct _4A6DF2B8DF82B84B316F580845E87DE1;
struct _4B26251D75C0D59F22113E7121B4AA5F;
struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38;
struct _4ECFA59CF9422A64A465D2E51971C347;
struct _50092E5B8D5585E25A36D2D7AA7D11CF;
struct _518AEB1FEE0990110D4FC7592EB5CC55;
struct _52AD6460DAD19A3D48443005CDCF2412;
struct _52BD71AC0F61B53F3E44045ED088295E;
struct _5687B37E6A0F56297A2BB22AF6770AC6;
struct _56FA1B9DDCE9D648FE900988960BAD6F;
struct _572C9F5A336F5256CCDD98B741672A4F;
struct _58C2C1BF6568EE28BD9B872E6BA03976;
struct _5B98A3A85E20DBA203FE93F0C6DC9B6B;
struct _5C0C72291B37B22FE700A61795928759;
struct _5C25098378D11CF2DF13A353B46EE415;
struct _5DBE423D59383EF3676E2D6AC9F8E7EA;
struct _61992E1E6DA7B91ECC7FA4A74B115A04;
struct _61B889227CECAFED4E8A477D21B34BC9;
struct _6283893B713888864804C588D87395BB;
struct _62EC1DAD6DB92F8723AD0A50B2259449;
struct _63C5725C5B677664277ACEA161B104D1;
struct _63C7C0E53552AFE1EE8EC0B0F6807449;
struct _66CF5E28886A6CE6C0E44A3DF6E2CD53;
struct _686FDF1C0C03C3D9039AD8B14FB9C99A;
struct _6957CE76948A33FD66E00469AB6817B0;
struct _69DAD432D0597BAB6A67398C913F94DB;
struct _6B8E9FF8FB4DE59DE7DA4092DA92354D;
struct _6D2254E53597AC8CE26BF57895A6DFF7;
struct _6D40E8E2125A3BBCEB5B162FD51EF33B;
struct _6D499679CD08099A5FDFDFD45568A323;
struct _6F08919EF02DAA05323F80511ECED656;
struct _71B09FCCFB7FB16B05205AE0543E85F3;
struct _73DB40CAD3136568FAD030BDAAB8FF71;
struct _742D342C7048E2C3902DF7570B72F6FC;
struct _7445C9FCFCC2899651BCA0E341BC0369;
struct _7545F1A067A9FBB43FDF50E78E6B08BD;
struct _756B7C543A2D8873FCA38AB7A21F7B82;
struct _75A13DFB4406EBA41013AD06E502A0EB;
struct _764676431BC78EE50306C71955FB365D;
struct _76E0DBF45CB9E280DCDAD06E7D8FE87F;
struct _782713D97F3B48E7FFD9354B90BFCE34;
struct _797ABA875A7F80AEFE23C6BF7D56B10A;
struct _7ADE47B00230EF5EBD78FEDFCEB95499;
struct _7C2EF957B9500F866DD2CA3770F79A02;
struct _7C92D00B816E38F8096F1C793288C884;
struct _7D6AD1D4C0599A70ED2A75DF53A62D54;
struct _7DB559BE1DE343E17A8A94B6F2E38031;
struct _7DEDD44825251A4EAA915BE1158FDB4F;
struct _7F42DEB2BB5D0DE64733A8884285C23D;
struct _7FAA4336E151361F9CD171DE989684F0;
struct _80E50DFA284ED4BC838B08AAD8EA99BA;
struct _816E3560EF21380C948191659F672DF0;
struct _8251F34BCF49AE1C266F7CD180791646;
struct _8276AF68B2084DDEC7235E96B5A3DDF6;
struct _8363E2736332812C7A22E557719FD114;
struct _83A144ADE81B1E4C267934DC64843ED5;
struct _84B866C76402598318C95E59033217C4;
struct _85CBE24E9ED55DBB779718CA5D73A273;
struct _8630A1F515F1D9088A894BA95A0F4D66;
struct _8765F39B1D4DEFD1F2F8643F85B5D457;
union _87B5C366CEDD06D1A6AC557671C7F981;
struct _87CE1B284ED7C4D9787DE2C17B5E3229;
struct _8B9777916333A4B8A3A60FA8F93F002E;
struct _8C7301159AF0C1BFC267CBF90877013D;
struct _8DF64ED1B184087013973064ABC778F1;
struct _8FE251E0C9BEAEF58C2D97D4F1899077;
struct _8FE9905039884FA12A33AF170E497D82;
struct _90E769FB438B6A83B49CA07EC4EB3EFA;
struct _91BD25BE856B91F4F94C146E39BAA29E;
struct _9223FF9C4398B5998F8B0B2319A44BF2;
struct _923DA7BE11DCB482D02B0566D8DB27AB;
struct _9283D0FA6633E8568FC062864CF70F24;
struct _939B1A1D3305CA6F2D0B71D8D29A6AEF;
struct _947C6FA139885FA2B0DE7F2A3FDD942C;
struct _976F82B52AD5D008419379398D47AE46;
struct _97739C7249C02ACEBAF17DFC34E3F72B;
struct _97BF4F75CC2B13E4CD29FCADBEF14990;
struct _97C70B764F4B63B047CCB37F16214516;
struct _98D21277AAAA3049664E864EBED0B60A;
struct _99C6912CDB5C12269FDD73BE73429D8B;
struct _99F880E2DB2F1E54A137D02CDE4F02E9;
struct _9A6BD7645A973A5ADF34F154404EC940;
struct _9ADD4811563784E97592213CBF8060F3;
struct _9B80566C9ECE6A73A5F898405A50FFFF;
struct _9CC657B7E0AE245246966219C61A944E;
struct _9D2EE2D5E082F56CCDE737471FBF8D82;
struct _9D580AF0AEFB1291AC1A38F1BACA0CDC;
struct _9E1ED747B9CD39E7270D6384935529E0;
struct _9FEC9D2A03C37051BDB5508CF5CADF1F;
struct _A0026B003AB75CC8BFC049DB25C2779D;
struct _A07373D2A5755254DCD028456AB4EC3B;
struct _A156F3783D3AF89709906294AAADEE96;
struct _A2D3C6DF54C31D821ABE78046EA78F8E;
struct _A2F74AF90EE3AACE3322F4FF0CBF4977;
struct _A35FF47659D3E73F219744D22283F451;
struct _A45289B030366F6A209F1D22B819A49A;
struct _A4A1DF623BA0FBABE6621202D771B918;
struct _A4B4B8B4CE90204588F5CA0CCC4989CD;
struct _A4CC0F087DE00420119DAAB092DFFA3E;
union _A4FB595EF421231CAF150DDD3288A6D5;
struct _A5A2C297D512B29747AD9A814A819610;
struct _A63D84EB732F4E602FF2E049D2D99B44;
struct _A97809CBA93BE73DFF75CDF56246D798;
struct _AA1FD51437B6FE081639C5575C92216B;
struct _AA58E045DEB5C5C814AE34C120D7C43C;
struct _AAD79452FC68247846A5E3B058A03BB4;
struct _AC9A5C69A2E8BFD7F981D24477498145;
struct _AD47B7B6770F26FF00FF8EF46A9765CE;
struct _B03639772012518ABC96BF05B41D5C12;
struct _B04A80E61A6C52E3FD4D22A5F125C77E;
struct _B0BC4AADD5C9FF12157D028DEF0CCD6A;
struct _B1AAA2E973C90C8AA1D1293855444268;
struct _B3292A763DBD4275988A0D01CB88CB44;
struct _B32EBC34E16EC960AF2175E3ACF4C5B6;
struct _B4A25942D193F2EAA86C395C02EC729E;
struct _B62AAB724E8D7D841EB663A6FEE96A5E;
struct _B62AAF3B70FEB5C8D5EF5D71926BC992;
struct _B80B7D01E79FADDB4AAC58DE22BC823F;
struct _B860A2A409E82E290A04B87FD69A6FE2;
struct _BA718A362089753A7EB60B21429558A7;
struct _BC7A094E99B893F962A170A802EFE988;
struct _BDE91A4D4766441856A2EB7036E539BD;
struct _BE0BDAB4463CDAC89A1FD071673BF7FC;
struct _BEA4C6939D98A17C28446F73864087A3;
struct _BF6BFD8678B7E7ABDC56122D693BAF10;
struct _BFD35443418CDCF1187E122E74A5B815;
struct _C18AA754B44D3B0CE088F6A6B0863744;
struct _C1C3EF408C46606406ABFE21B3E99DE8;
struct _C6832D807A2747A4D0CBF13E34E0B28B;
struct _C6963F188D9781F9428F32FE3A3801AF;
struct _C811A85A3CBAF233E045382DA27E29BF;
struct _C8A55C2939C105561C2DA558734F3C5E;
struct _C8E3A74D850A8EB44C7483CB257B5DD1;
struct _C9C4D03C150E869FFC5FB33A10EAB149;
union _C9F2A16A1B5FC998B91DA494984E0FDB;
struct _CA059CF4194B4A9D56D5FA32D4D81CE0;
struct _CA0DACF90AABDE33CADDF7416F0C17F2;
struct _CB16EFCEDA39FCD4D0BC1BDE67199271;
struct _CBE416C4EAAA19179E77E4054907ADFF;
struct _CC81E267BD8B32E89ADB7AE662C05BFA;
struct _CE02AD95896D5CE1FBC89EB4094A5E1C;
struct _CF7718BAF3C5EB1DFF93AAEE07D29F5C;
struct _CFDE79073F41BFFF7E06FED73F276E8B;
struct _D0C2582348DF16EE31650672742EA602;
struct _D26D25374C75FEF3AD181CCFA77BD37F;
struct _D2D205A4E5DA2498F5010F3E3EADEEBB;
struct _D59F8FB060D1A4257ECDF2860F49B6AF;
struct _D5B338A135013580D3FC38360357E666;
struct _D611436986C6FEF0F654B123D787805F;
struct _D63E714A239F9C0D1FE2D222C2E0E7D5;
struct _D6B325549B2987A65B0B27A42CFBEF5C;
struct _D86AEF8896DDE0BDF211E48E78F8BB6F;
struct _D8768C71F24D405D4B7DEC8016730D6C;
struct _D890D4C8B96B04D8C981ECF31CD55F01;
struct _DB6743270A05FF5B7AB17563AEBB3A96;
struct _DC731844EB8703AC39E0F1B64989CDCD;
struct _DC79A6464562D2DC48FEEE8D5793116D;
struct _DCA1691E12E502D611F5426518CFEFB5;
struct _DCCCDBDB2D2AC461237A75FB18C0449E;
struct _DCD76CF5A248684E95EEC87F56AA655C;
struct _DE2D2125000B90024B7DD637FE0DF34E;
struct _E031005FF5EB1AE848321EA608394D98;
struct _E054F7F0B81E76E3D6D098531C7E763C;
struct _E15D7B7CA61FF43DF93005DFD376A388;
struct _E1D601DFB9F50A58CFF7A79389CE7A63;
struct _E1FC672EFA0154DDDEED24E20FAA5FC7;
struct _E21F85AFDEE9EAF37885ADBF8938BB0C;
struct _E49E18AFB8FDA9EDC5FD9E2015544A93;
struct _E4A6BAB3223452EC45F6B117A37FFCF9;
struct _E4D39CEDA60A9A842177218EB3078B88;
struct _E4F7CAB5B6B7D45C514D7552CCE8FB09;
struct _E56F877AE116898CEBF188009740BA30;
struct _E5C551D5220B94E855DFD2A46F971A3B;
struct _E76253F876E841F225888AB457FD0286;
struct _E79116A6AA0CFF653592F57D81FA8A4C;
struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1;
struct _EA4AC72E281160164D445E15D4425ADE;
struct _EA4AF2A6DC8AE690E5FA5BC5736FE7C7;
struct _EA831C4C2E16EF6F2B7E490157D80D27;
struct _EAA2A559B48BCBAE81109D6C3EFDA87C;
struct _EAF9C7AE235510435B672EB36E720462;
struct _EC893833BD5056AD53916225206BDC9F;
struct _EC8EE2E9AF7D4EC32726A7FD632A186D;
struct _ECC65BA02B08F93DE1D3AD2A06446B79;
struct _ECD9D23603D8BADEE24156B8BE3276B4;
struct _EEDA301819F8EA8D15C0ADB3D7583498;
struct _EF98EE567420140E285BF0657F46953F;
struct _F03B70C123AB6920C4DDA521DD856E56;
struct _F0DE5EAC046D7D32AA534DC253D377C4;
struct _F1B55BC800274E3ABC9BA0A46288924E;
struct _F1FF9EB17A5B0DC512AB60E4FE6215DC;
struct _F2115D41876A8CDF2A6608801240E71C;
struct _F2AFD13852ACA75C0D1B7913E08A9A3F;
struct _F2BCB5D6531DBE53AEF2D3A6C84D3598;
struct _F8C02B799BC5153138A3AC7C0BDE9C8E;
struct _F9B51A3DB5554E7753FB9DD51D5E00E5;
struct _FB10B385A80E8C43E2FAF14F8CAB4B13;
struct _FB17C9225429EF808B128BCE70FFD0DB;
struct _FB8A4E21AD43EDA8BFCCEEFE99FC59C9;
struct _FBE7179BAB40555F1A13AD3C5BC3BB71;
struct _FC03820C0C9B455049C143518E71A23B;
struct _FDD48878D337B9676F07B6A46EC3FECC;
struct STORAGE_BREAK_RESERVATION_REQUEST;
struct _CERT_REGISTRY_STORE_ROAMING_PARA;
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION;
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
struct _D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE;
struct _D3DNTHAL_DP2INDEXEDTRIANGLELIST2;
struct _D3DNTHAL_DP2INDEXEDTRIANGLESTRIP;
struct _D3DNTHAL_DP2SETVERTEXSHADERCONST;
struct _ENCRYPTION_CERTIFICATE_HASH_LIST;
struct _KERB_QUERY_TKT_CACHE_EX_RESPONSE;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W;
struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR;
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
struct _TRUSTED_DOMAIN_FULL_INFORMATION2;
struct tagACTCTX_SECTION_KEYED_DATA_2600;
struct tagKS_DATAFORMAT_VIDEOINFOHEADER2;
struct IDirectMusicDownloadedInstrument;
struct IInternetHostSecurityManagerVtbl;
struct IWbemDecoupledBasicEventProvider;
struct IXMLDOMProcessingInstructionVtbl;
struct _CERT_KEY_USAGE_RESTRICTION_INFO;
struct _CERT_SYSTEM_STORE_RELOCATE_PARA;
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE2;
struct _D3DNTHAL_DP2INDEXEDTRIANGLELIST;
struct _D3DNTHAL_DP2SETPIXELSHADERCONST;
struct _DDHAL_DDMISCELLANEOUS2CALLBACKS;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_STRING;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _KERB_PURGE_TKT_CACHE_EX_REQUEST;
struct _TRUSTED_DOMAIN_AUTH_INFORMATION;
struct _TRUSTED_DOMAIN_FULL_INFORMATION;
struct _USERNAME_TARGET_CREDENTIAL_INFO;
struct _VBICODECFILTERING_CC_SUBSTREAMS;
struct _VBICODECFILTERING_STATISTICS_CC;
struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA;
struct _userSTGMEDIUM___STGMEDIUM_UNION;
struct tagKS_DATAFORMAT_VIDEOINFOHEADER;
struct tagMIXERCONTROLDETAILS_LISTTEXTA;
struct tagMIXERCONTROLDETAILS_LISTTEXTW;
struct IOleInPlaceObjectWindowlessVtbl;
struct IShellIconOverlayIdentifierVtbl;
struct IWbemEventProviderQuerySinkVtbl;
struct WbemDecoupledBasicEventProvider;
struct _ACTIVATION_CONTEXT_QUERY_INDEX;
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA;
struct _CERT_X942_DH_VALIDATION_PARAMS;
struct _CREDENTIAL_TARGET_INFORMATIONA;
struct _CREDENTIAL_TARGET_INFORMATIONW;
struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE;
struct _D3DHAL_DP2INDEXEDTRIANGLELIST2;
struct _D3DHAL_DP2INDEXEDTRIANGLESTRIP;
struct _D3DHAL_DP2SETVERTEXSHADERCONST;
struct _D3DNTHAL_CONTEXTDESTROYALLDATA;
struct _D3DNTHAL_DP2CREATEVERTEXSHADER;
struct _D3DNTHAL_DP2INDEXEDTRIANGLEFAN;
struct _DDHAL_DDMISCELLANEOUSCALLBACKS;
struct _DDHAL_GETAVAILDRIVERMEMORYDATA;
struct _DDHAL_GETVPORTOUTPUTFORMATDATA;
struct _DDHAL_WAITFORVERTICALBLANKDATA;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _MSV1_0_CHANGEPASSWORD_RESPONSE;
struct _MSV1_0_SUPPLEMENTAL_CREDENTIAL;
struct _NEGOTIATE_CALLER_NAME_RESPONSE;
struct _OFFLOAD_IPSEC_DELETE_UDPESP_SA;
struct _PAR_DEVICE_ID_SIZE_INFORMATION;
struct _TRUSTED_DOMAIN_INFORMATION_EX2;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE;
struct _VBICAP_PROPERTIES_PROTECTION_S;
struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY;
struct creative_fastspeech10format_tag;
struct IDirectDrawVideoPortNotifyVtbl;
struct IDirectSoundCaptureBuffer8Vtbl;
struct IInternetProtocolSinkStackable;
struct IWbemClientConnectionTransport;
struct IWbemEventConsumerProviderVtbl;
struct IWbemEventProviderSecurityVtbl;
struct _CMSG_KEY_AGREE_RECIPIENT_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_INFO;
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA;
struct _CRYPT_TIME_STAMP_REQUEST_INFO;
struct _D3DDEVICE_CREATION_PARAMETERS;
struct _D3DHAL_DP2INDEXEDTRIANGLELIST;
struct _D3DHAL_DP2SETPIXELSHADERCONST;
struct _D3DNTHAL_DP2CREATEPIXELSHADER;
struct _D3DNTHAL_DP2MULTIPLYTRANSFORM;
struct _D3DNTHAL_DP2SETSTREAMSOURCEUM;
struct _D3DNTHAL_DP2TEXTURESTAGESTATE;
struct _DDHAL_DDCOLORCONTROLCALLBACKS;
struct _DDHAL_GETVPORTINPUTFORMATDATA;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR;
struct _IP_ADAPTER_DNS_SERVER_ADDRESS;
struct _KERB_INTERACTIVE_UNLOCK_LOGON;
struct _KERB_QUERY_TKT_CACHE_RESPONSE;
struct _MSV1_0_CHANGEPASSWORD_REQUEST;
struct _NDIS_802_11_NETWORK_TYPE_LIST;
struct _NEGOTIATE_CALLER_NAME_REQUEST;
struct _PRINTER_EVENT_ATTRIBUTES_INFO;
struct _RTL_VERIFIER_THUNK_DESCRIPTOR;
struct _SP_DEVINFO_LIST_DETAIL_DATA_A;
struct _SP_DEVINFO_LIST_DETAIL_DATA_W;
struct _TRANSLATE_VIRTUAL_TO_PHYSICAL;
struct _TRUSTED_DOMAIN_INFORMATION_EX;
struct creative_fastspeech8format_tag;
struct mediaspace_adpcmwaveformat_tag;
struct tagI_RpcProxyCallbackInterface;
struct tagKS_DATAFORMAT_VBIINFOHEADER;
struct tagSOLE_AUTHENTICATION_SERVICE;
struct IConnectionPointContainerVtbl;
struct IDirectSoundCaptureBufferVtbl;
struct IDirectSoundFXI3DL2ReverbVtbl;
struct IDirectSoundFXWavesReverbVtbl;
struct IOleInPlaceSiteWindowlessVtbl;
struct IProvideMultipleClassInfoVtbl;
struct IWbemConstructClassObjectVtbl;
struct _CERT_BASIC_CONSTRAINTS2_INFO;
struct _CERT_POLICY_CONSTRAINTS_INFO;
struct _CMSG_SP3_COMPATIBLE_AUX_INFO;
struct _D3DHAL_CONTEXTDESTROYALLDATA;
struct _D3DHAL_DP2CREATEVERTEXSHADER;
struct _D3DHAL_DP2INDEXEDTRIANGLEFAN;
struct _D3DNTHAL_DP2INDEXEDLINESTRIP;
struct _D3DNTHAL_DRAWPRIMITIVES2DATA;
struct _D3DNTHAL_SETRENDERTARGETDATA;
struct _DDGETPREVIOUSAUTOFLIPOUTINFO;
struct _DDHAL_ADDATTACHEDSURFACEDATA;
struct _DDHAL_GETVPORTFLIPSTATUSDATA;
struct _DDHAL_SETOVERLAYPOSITIONDATA;
struct _DDHAL_UPDATENONLOCALHEAPDATA;
struct _DDNT_DEFERRED_AGP_AWARE_DATA;
struct _DDRAWI_DDRAWSURFACE_GBL_MORE;
struct _DRIVE_LAYOUT_INFORMATION_GPT;
struct _DRIVE_LAYOUT_INFORMATION_MBR;
struct _ENUM_SERVICE_STATUS_PROCESSA;
struct _ENUM_SERVICE_STATUS_PROCESSW;
struct _GENERIC_BINDING_ROUTINE_PAIR;
struct _HIDP_KEYBOARD_MODIFIER_STATE;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
struct _IP_ADAPTER_MULTICAST_ADDRESS;
struct _JOBOBJECT_JOBSET_INFORMATION;
struct _KERB_ADD_CREDENTIALS_REQUEST;
struct _KERB_PURGE_TKT_CACHE_REQUEST;
struct _KERB_QUERY_TKT_CACHE_REQUEST;
struct _KERB_SMART_CARD_UNLOCK_LOGON;
struct _LSA_FOREST_TRUST_BINARY_DATA;
struct _LSA_FOREST_TRUST_DOMAIN_INFO;
struct _LSA_FOREST_TRUST_INFORMATION;
struct _NDIS_802_11_CONFIGURATION_FH;
struct _NDIS_PM_WAKE_UP_CAPABILITIES;
struct _NDR_CS_SIZE_CONVERT_ROUTINES;
struct _NDR_USER_MARSHAL_INFO_LEVEL1;
struct _OFFLOAD_SECURITY_ASSOCIATION;
struct _POLICY_AUDIT_FULL_QUERY_INFO;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _SET_PARTITION_INFORMATION_EX;
struct _SP_POWERMESSAGEWAKE_PARAMS_A;
struct _SP_POWERMESSAGEWAKE_PARAMS_W;
struct creative_fastspeechformat_tag;
struct tMIXERCONTROLDETAILS_UNSIGNED;
struct tagEMRCREATEDIBPATTERNBRUSHPT;
struct tagKS_DATARANGE_BDA_TRANSPORT;
struct tagKS_DATARANGE_VIDEO_PALETTE;
struct ICurrentWorkingDirectoryVtbl;
struct IDirectDrawSurfaceKernelVtbl;
struct IDirectMusicPortDownloadVtbl;
struct IDirectSoundCaptureFXAecVtbl;
struct IDirectSoundFXCompressorVtbl;
struct IDirectSoundFXDistortionVtbl;
struct IInternetHostSecurityManager;
struct IInternetSecurityManagerVtbl;
struct IInternetSecurityMgrSiteVtbl;
struct IShellFavoritesNameSpaceVtbl;
struct IShellIconOverlayManagerVtbl;
struct IXMLDOMProcessingInstruction;
struct WbemUninitializedClassObject;
struct _ACCESS_ALLOWED_CALLBACK_ACE;
struct _CERT_AUTHORITY_KEY_ID2_INFO;
struct _CERT_BASIC_CONSTRAINTS_INFO;
struct _CERT_LDAP_STORE_OPENED_PARA;
struct _CHANGER_READ_ELEMENT_STATUS;
struct _CMSG_KEY_AGREE_ENCRYPT_INFO;
struct _CMSG_KEY_TRANS_ENCRYPT_INFO;
struct _CMSG_MAIL_LIST_ENCRYPT_INFO;
struct _CROSS_CERT_DIST_POINTS_INFO;
struct _CRYPT_KEY_SIGN_MESSAGE_PARA;
struct _CRYPT_PASSWORD_CREDENTIALSA;
struct _CRYPT_PASSWORD_CREDENTIALSW;
struct _D3DDRAWPRIMITIVESTRIDEDDATA;
struct _D3DHAL_DP2CREATEPIXELSHADER;
struct _D3DHAL_DP2MULTIPLYTRANSFORM;
struct _D3DHAL_DP2SETSTREAMSOURCEUM;
struct _D3DHAL_DP2TEXTURESTAGESTATE;
struct _D3DHAL_DRAWONEPRIMITIVEDATA;
struct _D3DNTHAL_CLIPPEDTRIANGLEFAN;
struct _D3DNTHAL_CONTEXTDESTROYDATA;
struct _D3DNTHAL_D3DDX6EXTENDEDCAPS;
struct _D3DNTHAL_DP2INDEXEDLINELIST;
struct _D3DNTHAL_DP2SETRENDERTARGET;
struct _D3DNTHAL_DP2SETSTREAMSOURCE;
struct _D3DNTHAL_DP2TRIANGLEFAN_IMM;
struct _D3DNTHAL_TEXTUREDESTROYDATA;
struct _D3DNTHAL_TEXTUREGETSURFDATA;
struct _DDGETCURRENTAUTOFLIPOUTINFO;
struct _DDGETPREVIOUSAUTOFLIPININFO;
struct _DDHAL_DDMOTIONCOMPCALLBACKS;
struct _DDHAL_GETINTERNALMOCOMPDATA;
struct _DDHAL_GETMOCOMPCOMPBUFFDATA;
struct _DDHAL_GETVPORTBANDWIDTHDATA;
struct _DDHAL_QUERYMOCOMPSTATUSDATA;
struct _DDNT_FREE_DEFERRED_AGP_DATA;
struct _DD_GETAVAILDRIVERMEMORYDATA;
struct _DD_GETVPORTOUTPUTFORMATDATA;
struct _DD_WAITFORVERTICALBLANKDATA;
struct _DOMAIN_PASSWORD_INFORMATION;
struct _DRIVE_LAYOUT_INFORMATION_EX;
struct _ENCRYPTION_CERTIFICATE_HASH;
struct _ENCRYPTION_CERTIFICATE_LIST;
struct _FILE_ALLOCATED_RANGE_BUFFER;
struct _GET_CURRENT_PROCESS_ADDRESS;
struct _IMAGE_ARCHIVE_MEMBER_HEADER;
struct _IMAGE_RESOURCE_DIR_STRING_U;
struct _IMAGE_SEPARATE_DEBUG_HEADER;
struct _KERB_CHANGEPASSWORD_REQUEST;
struct _KERB_REFRESH_SCCRED_REQUEST;
struct _KERB_SETPASSWORD_EX_REQUEST;
struct _KS_VIDEO_STREAM_CONFIG_CAPS;
struct _LSA_ENUMERATION_INFORMATION;
struct _MSV1_0_PASSTHROUGH_RESPONSE;
struct _OFFLOAD_IPSEC_ADD_UDPESP_SA;
struct _POLICY_LSA_SERVER_ROLE_INFO;
struct _PRINTER_NOTIFY_OPTIONS_TYPE;
struct _PROCESSOR_POWER_POLICY_INFO;
struct _RTL_VERIFIER_DLL_DESCRIPTOR;
struct _SECURITY_LOGON_SESSION_DATA;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SP_BACKUP_QUEUE_PARAMS_V1_A;
struct _SP_BACKUP_QUEUE_PARAMS_V1_W;
struct _SP_BACKUP_QUEUE_PARAMS_V2_A;
struct _SP_BACKUP_QUEUE_PARAMS_V2_W;
struct _SP_REGISTER_CONTROL_STATUSA;
struct _SP_REGISTER_CONTROL_STATUSW;
struct _TOKEN_GROUPS_AND_PRIVILEGES;
struct _VBICODECFILTERING_SCANLINES;
struct _WINDBG_OLDKD_EXTENSION_APIS;
struct audiofile_af10waveformat_tag;
struct audiofile_af36waveformat_tag;
struct creative_adpcmwaveformat_tag;
struct tMIXERCONTROLDETAILS_BOOLEAN;
struct tagACTCTX_SECTION_KEYED_DATA;
struct tagEMREXTCREATEFONTINDIRECTW;
struct tagRASCUSTOMSCRIPTEXTENSIONS;
struct IDirect3DVolumeTexture8Vtbl;
struct IDirectDrawColorControlVtbl;
struct IDirectDrawGammaControlVtbl;
struct IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceObjectWindowless;
struct IPassportClientServicesVtbl;
struct IShellIconOverlayIdentifier;
struct IUserEventTimerCallbackVtbl;
struct IWbemConfigureRefresherVtbl;
struct IWbemDecoupledRegistrarVtbl;
struct IWbemEventProviderQuerySink;
struct IWbemUnsecuredApartmentVtbl;
struct IXMLDOMDocumentFragmentVtbl;
struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct _ACCESS_DENIED_CALLBACK_ACE;
struct _ADMINISTRATOR_POWER_POLICY;
struct _BY_HANDLE_FILE_INFORMATION;
struct _CERT_AUTHORITY_INFO_ACCESS;
struct _CERT_AUTHORITY_KEY_ID_INFO;
struct _CERT_NAME_CONSTRAINTS_INFO;
struct _CERT_POLICY_QUALIFIER_INFO;
struct _CLASS_MEDIA_CHANGE_CONTEXT;
struct _CMSG_ENCRYPTED_ENCODE_INFO;
struct _CMSG_ENVELOPED_ENCODE_INFO;
struct _CMSG_RECIPIENT_ENCODE_INFO;
struct _CONSOLE_SCREEN_BUFFER_INFO;
struct _CRYPT_ALGORITHM_IDENTIFIER;
struct _CRYPT_ATTRIBUTE_TYPE_VALUE;
struct _CRYPT_DECRYPT_MESSAGE_PARA;
struct _CRYPT_ENCRYPT_MESSAGE_PARA;
struct _CRYPT_PROVIDER_REGDEFUSAGE;
struct _D3DHAL_DP2INDEXEDLINESTRIP;
struct _D3DHAL_DRAWPRIMITIVES2DATA;
struct _D3DHAL_RENDERPRIMITIVEDATA;
struct _D3DHAL_SETRENDERTARGETDATA;
struct _D3DNTHAL_CONTEXTCREATEDATA;
struct _D3DNTHAL_DP2DRAWPRIMITIVE2;
struct _D3DNTHAL_TEXTURECREATEDATA;
struct _DDGETCURRENTAUTOFLIPININFO;
struct _DDGETTRANSFERSTATUSOUTINFO;
struct _DDHAL_BEGINMOCOMPFRAMEDATA;
struct _DDHAL_CANCREATESURFACEDATA;
struct _DDHAL_DDVIDEOPORTCALLBACKS;
struct _DDHAL_FLIPTOGDISURFACEDATA;
struct _DDHAL_GETHEAPALIGNMENTDATA;
struct _DDHAL_GETMOCOMPFORMATSDATA;
struct _DDHAL_SETEXCLUSIVEMODEDATA;
struct _DDHAL_WAITFORVPORTSYNCDATA;
struct _DD_DEFERRED_AGP_AWARE_DATA;
struct _DD_GETVPORTINPUTFORMATDATA;
struct _DD_MISCELLANEOUS2CALLBACKS;
struct _FILE_ZERO_DATA_INFORMATION;
struct _FSCTL_QUERY_FAT_BPB_BUFFER;
struct _GET_CURRENT_THREAD_ADDRESS;
struct _IP_ADAPTER_ANYCAST_ADDRESS;
struct _IP_ADAPTER_UNICAST_ADDRESS;
struct _KERB_RETRIEVE_TKT_RESPONSE;
struct _LSA_REFERENCED_DOMAIN_LIST;
struct _MEMORY_BASIC_INFORMATION32;
struct _MEMORY_BASIC_INFORMATION64;
struct _MIB_IPMCAST_BOUNDARY_TABLE;
struct _MSV1_0_INTERACTIVE_PROFILE;
struct _MSV1_0_PASSTHROUGH_REQUEST;
struct _NEGOTIATE_PACKAGE_PREFIXES;
struct _POLICY_ACCOUNT_DOMAIN_INFO;
struct _POLICY_AUDIT_FULL_SET_INFO;
struct _POLICY_PRIMARY_DOMAIN_INFO;
struct _POLICY_REPLICA_SOURCE_INFO;
struct _QUERY_SERVICE_LOCK_STATUSA;
struct _QUERY_SERVICE_LOCK_STATUSW;
struct _REQUEST_RAW_ENCRYPTED_DATA;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _SHChangeProductKeyAsIDList;
struct _SP_TROUBLESHOOTER_PARAMS_A;
struct _SP_TROUBLESHOOTER_PARAMS_W;
struct _TOKEN_AUDIT_POLICY_ELEMENT;
struct contres_vqlpcwaveformat_tag;
struct nms_vbxadpcmmwaveformat_tag;
struct tMIXERCONTROLDETAILS_SIGNED;
struct tagKS_DATARANGE_ANALOGVIDEO;
struct tagKS_DATARANGE_BDA_ANTENNA;
struct tagKS_DATARANGE_MPEG1_VIDEO;
struct tagKS_DATARANGE_MPEG2_VIDEO;
struct tagRID_DEVICE_INFO_KEYBOARD;
struct tagRPC_CALL_ATTRIBUTES_V1_A;
struct tagRPC_CALL_ATTRIBUTES_V1_W;
struct tagSOLE_AUTHENTICATION_INFO;
struct tagSOLE_AUTHENTICATION_LIST;
struct DShellFolderViewEventsVtbl;
struct IAsyncRpcChannelBufferVtbl;
struct IDirect3DVertexBuffer8Vtbl;
struct IDirectDrawVideoPortNotify;
struct IDirectMusicCollectionVtbl;
struct IDirectMusicInstrumentVtbl;
struct IDirectSound3DListenerVtbl;
struct IDirectSoundCaptureBuffer8;
struct IDirectSoundFullDuplexVtbl;
struct IEncodingFilterFactoryVtbl;
struct IMAGE_AUX_SYMBOL_TOKEN_DEF;
struct IReleaseMarshalBuffersVtbl;
struct IWbemAddressResolutionVtbl;
struct IWbemEventConsumerProvider;
struct IWbemEventProviderSecurity;
struct IWbemUnboundObjectSinkVtbl;
struct IXMLDOMEntityReferenceVtbl;
struct NDIS_BPC_CONNECTION_ENABLE;
struct NDIS_BPC_CONNECTION_STATUS;
struct NDIS_BPC_STATUS_CONNECTION;
struct WbemUnauthenticatedLocator;
struct _ACCESS_ALLOWED_OBJECT_ACE;
struct _BDA_ETHERNET_ADDRESS_LIST;
struct _CERT_ISSUER_SERIAL_NUMBER;
struct _CERT_POLICY_MAPPINGS_INFO;
struct _CERT_PRIVATE_KEY_VALIDITY;
struct _CERT_STORE_PROV_FIND_INFO;
struct _CHANGER_ELEMENT_STATUS_EX;
struct _CMSG_CONTENT_ENCRYPT_INFO;
struct _CREATE_PROCESS_DEBUG_INFO;
struct _CRYPTPROTECT_PROMPTSTRUCT;
struct _CRYPT_PKCS8_EXPORT_PARAMS;
struct _CRYPT_PKCS8_IMPORT_PARAMS;
struct _CRYPT_VERIFY_MESSAGE_PARA;
struct _D3DHAL_CLIPPEDTRIANGLEFAN;
struct _D3DHAL_CONTEXTDESTROYDATA;
struct _D3DHAL_D3DDX6EXTENDEDCAPS;
struct _D3DHAL_DP2INDEXEDLINELIST;
struct _D3DHAL_DP2SETRENDERTARGET;
struct _D3DHAL_DP2SETSTREAMSOURCE;
struct _D3DHAL_DP2TRIANGLEFAN_IMM;
struct _D3DHAL_DRAWPRIMITIVESDATA;
struct _D3DHAL_TEXTUREDESTROYDATA;
struct _D3DHAL_TEXTUREGETSURFDATA;
struct _D3DNTHAL_DP2DRAWPRIMITIVE;
struct _D3DNTHAL_DP2DRAWRECTPATCH;
struct _D3DNTHAL_DP2TRIANGLESTRIP;
struct _D3DNTHAL_DP2UPDATEPALETTE;
struct _D3DNTHAL_GLOBALDRIVERDATA;
struct _D3DNTHAL_SCENECAPTUREDATA;
struct _DBGKD_DEBUG_DATA_HEADER32;
struct _DBGKD_DEBUG_DATA_HEADER64;
struct _DDHAL_CREATESURFACEEXDATA;
struct _DDHAL_GETVPORTCONNECTDATA;
struct _DD_ADDATTACHEDSURFACEDATA;
struct _DD_FREE_DEFERRED_AGP_DATA;
struct _DD_GETVPORTFLIPSTATUSDATA;
struct _DD_MISCELLANEOUSCALLBACKS;
struct _DD_SETOVERLAYPOSITIONDATA;
struct _DD_UPDATENONLOCALHEAPDATA;
struct _EVENTLOG_FULL_INFORMATION;
struct _FULL_PTR_TO_REFID_ELEMENT;
struct _HIDP_LINK_COLLECTION_NODE;
struct _IMAGE_BOUND_FORWARDER_REF;
struct _IMAGE_COFF_SYMBOLS_HEADER;
struct _IMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _KERB_RETRIEVE_TKT_REQUEST;
struct _KERB_TICKET_CACHE_INFO_EX;
struct _KS_DVDCOPY_SET_COPY_STATE;
struct _MSV1_0_LM20_LOGON_PROFILE;
struct _NDIS_802_11_CONFIGURATION;
struct _PARCLASS_NEGOTIATION_MASK;
struct _PARTITION_INFORMATION_GPT;
struct _PARTITION_INFORMATION_MBR;
struct _POLICY_DEFAULT_QUOTA_INFO;
struct _READ_ELEMENT_ADDRESS_INFO;
struct _SEC_WINNT_AUTH_IDENTITY_A;
struct _SEC_WINNT_AUTH_IDENTITY_W;
struct _SET_PARTITION_INFORMATION;
struct _SHChangeUpdateImageIDList;
struct _SPC_INDIRECT_DATA_CONTENT;
struct _STORAGE_BUS_RESET_REQUEST;
struct _SYSTEM_ALARM_CALLBACK_ACE;
struct _SYSTEM_AUDIT_CALLBACK_ACE;
struct _SearchAssistantEventsVtbl;
struct _TAPE_GET_DRIVE_PARAMETERS;
struct _TAPE_GET_MEDIA_PARAMETERS;
struct _TAPE_SET_DRIVE_PARAMETERS;
struct _TAPE_SET_MEDIA_PARAMETERS;
struct _TRUSTED_POSIX_OFFSET_INFO;
struct _WIN32_FILE_ATTRIBUTE_DATA;
struct _WINDBG_OLD_EXTENSION_APIS;
struct _WINDOW_BUFFER_SIZE_RECORD;
struct contres_cr10waveformat_tag;
struct fmtowns_snd_waveformat_tag;
struct sierra_adpcmwaveformat_tag;
struct tagEMRMODIFYWORLDTRANSFORM;
struct tagRPC_EXTENDED_ERROR_INFO;
struct tagWTSSESSION_NOTIFICATION;
struct yamaha_adpmcwaveformat_tag;
struct DShellNameSpaceEventsVtbl;
struct IActionProgressDialogVtbl;
struct IAddrExclusionControlVtbl;
struct IAutoCompleteDropDownVtbl;
struct IConnectionPointContainer;
struct IDDVideoPortContainerVtbl;
struct IDirect3DBaseTexture8Vtbl;
struct IDirect3DCubeTexture8Vtbl;
struct IDirect3DIndexBuffer8Vtbl;
struct IDirectSoundCaptureBuffer;
struct IDirectSoundFXFlangerVtbl;
struct IDirectSoundFXI3DL2Reverb;
struct IDirectSoundFXParamEqVtbl;
struct IDirectSoundFXWavesReverb;
struct IEnumConnectionPointsVtbl;
struct IEnumOleDocumentViewsVtbl;
struct IGlobalInterfaceTableVtbl;
struct IInternetProtocolInfoVtbl;
struct IInternetProtocolRootVtbl;
struct IInternetProtocolSinkVtbl;
struct IInternetThreadSwitchVtbl;
struct IOleInPlaceSiteWindowless;
struct IProvideMultipleClassInfo;
struct ISWbemRefreshableItemVtbl;
struct IShellFolderViewDual2Vtbl;
struct ISpecifyPropertyPagesVtbl;
struct ISynchronizeContainerVtbl;
struct ITimeAndNoticeControlVtbl;
struct IWbemConstructClassObject;
struct IWbemPropertyProviderVtbl;
struct IWbemProviderIdentityVtbl;
struct IWbemProviderInitSinkVtbl;
struct IXMLDOMImplementationVtbl;
struct IXMLElementCollectionVtbl;
struct RETRIEVAL_POINTERS_BUFFER;
struct WbemAdministrativeLocator;
struct _ACCESS_DENIED_OBJECT_ACE;
struct _ACL_REVISION_INFORMATION;
struct _CERT_CHAIN_ENGINE_CONFIG;
struct _CERT_CHAIN_POLICY_STATUS;
struct _CERT_CREATE_CONTEXT_PARA;
struct _CERT_KEYGEN_REQUEST_INFO;
struct _CERT_KEY_ATTRIBUTES_INFO;
struct _CERT_PHYSICAL_STORE_INFO;
struct _CERT_POLICY95_QUALIFIER1;
struct _CERT_REVOCATION_CRL_INFO;
struct _CERT_SIGNED_CONTENT_INFO;
struct _COINSTALLER_CONTEXT_DATA;
struct _CREATE_THREAD_DEBUG_INFO;
struct _CRL_FIND_ISSUED_FOR_PARA;
struct _CRYPT_PROVIDER_FUNCTIONS;
struct _CRYPT_RC2_CBC_PARAMETERS;
struct _CRYPT_SMIME_CAPABILITIES;
struct _D3DHAL_CONTEXTCREATEDATA;
struct _D3DHAL_DP2DRAWPRIMITIVE2;
struct _D3DHAL_TEXTURECREATEDATA;
struct _D3DNTHAL_D3DEXTENDEDCAPS;
struct _D3DNTHAL_DP2ADDDIRTYRECT;
struct _D3DNTHAL_DP2DRAWTRIPATCH;
struct _D3DNTHAL_DP2SETCLIPPLANE;
struct _D3DNTHAL_DP2SETTRANSFORM;
struct _D3DNTHAL_DP2TRIANGLELIST;
struct _D3DNTHAL_DP2VERTEXSHADER;
struct _D3DNTHAL_DP2VIEWPORTINFO;
struct _D3DNTHAL_TEXTURESWAPDATA;
struct _DDHAL_CANCREATEVPORTDATA;
struct _DDHAL_DDPALETTECALLBACKS;
struct _DDHAL_DDSURFACECALLBACKS;
struct _DDHAL_DESTROYDDLOCALDATA;
struct _DDHAL_DESTROYPALETTEDATA;
struct _DDHAL_DESTROYSURFACEDATA;
struct _DDHAL_DRVSETCOLORKEYDATA;
struct _DDHAL_ENDMOCOMPFRAMEDATA;
struct _DDHAL_GETDRIVERSTATEDATA;
struct _DDHAL_GETMOCOMPGUIDSDATA;
struct _DDHAL_GETVPORTSIGNALDATA;
struct _DDRAWI_DDRAWSURFACE_MORE;
struct _DD_COLORCONTROLCALLBACKS;
struct _DD_GETINTERNALMOCOMPDATA;
struct _DD_GETMOCOMPCOMPBUFFDATA;
struct _DD_GETVPORTBANDWIDTHDATA;
struct _DD_QUERYMOCOMPSTATUSDATA;
struct _DECRYPTION_STATUS_BUFFER;
struct _DMUS_WAVES_REVERB_PARAMS;
struct _DRIVE_LAYOUT_INFORMATION;
struct _HIDP_EXTENDED_ATTRIBUTES;
struct _IMAGE_RESOURCE_DIRECTORY;
struct _KERB_INTERACTIVE_PROFILE;
struct _KERB_SETPASSWORD_REQUEST;
struct _KERB_TICKET_UNLOCK_LOGON;
struct _MEMORY_BASIC_INFORMATION;
struct _MIB_IPMCAST_MFE_STATS_EX;
struct _MIDL_STUBLESS_PROXY_INFO;
struct _MSV1_0_INTERACTIVE_LOGON;
struct _NEGOTIATE_PACKAGE_PREFIX;
struct _OUTPUT_DEBUG_STRING_INFO;
struct _PARTITION_INFORMATION_EX;
struct _PERF_INSTANCE_DEFINITION;
struct _POLICY_AUDIT_EVENTS_INFO;
struct _POLICY_MODIFICATION_INFO;
struct _PRINTER_NOTIFY_INFO_DATA;
struct _PROPSHEETUI_GETICON_INFO;
struct _REPARSE_GUID_DATA_BUFFER;
struct _SERVICE_FAILURE_ACTIONSA;
struct _SERVICE_FAILURE_ACTIONSW;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SP_DEVICE_INTERFACE_DATA;
struct _SP_DRVINFO_DETAIL_DATA_A;
struct _SP_DRVINFO_DETAIL_DATA_W;
struct _SP_PROPSHEETPAGE_REQUEST;
struct _SP_SELECTDEVICE_PARAMS_A;
struct _SP_SELECTDEVICE_PARAMS_W;
struct _SP_UNREMOVEDEVICE_PARAMS;
struct _TC_SUPPORTED_INFO_BUFFER;
struct _TRUSTED_CONTROLLERS_INFO;
struct _TRUSTED_DOMAIN_NAME_INFO;
struct _WINDOWS_IRDA_DEVICE_INFO;
struct tagEMRCREATEBRUSHINDIRECT;
struct tagKS_DATARANGE_VIDEO_VBI;
struct tagKS_TVTUNER_CHANGE_INFO;
struct tagMCI_ANIM_WINDOW_PARMSA;
struct tagMCI_ANIM_WINDOW_PARMSW;
struct tagMCI_OVLY_WINDOW_PARMSA;
struct tagMCI_OVLY_WINDOW_PARMSW;
struct tagNMDATETIMEFORMATQUERYA;
struct tagNMDATETIMEFORMATQUERYW;
struct tagSHCSCHANGENOTIFYSTRUCT;
struct DSearchCommandEventsVtbl;
struct IAddrTrackingControlVtbl;
struct IBrowserFrameOptionsVtbl;
struct ICurrentWorkingDirectory;
struct IDirectDrawSurfaceKernel;
struct IDirectDrawVideoPortVtbl;
struct IDirectMusicDownloadVtbl;
struct IDirectMusicPortDownload;
struct IDirectSound3DBufferVtbl;
struct IDirectSoundCaptureFXAec;
struct IDirectSoundFXChorusVtbl;
struct IDirectSoundFXCompressor;
struct IDirectSoundFXDistortion;
struct IDirectSoundFXGargleVtbl;
struct IEnumShellImageStoreVtbl;
struct IEnumWbemClassObjectVtbl;
struct IInternetSecurityManager;
struct IInternetSecurityMgrSite;
struct IInternetZoneManagerVtbl;
struct IPerPropertyBrowsingVtbl;
struct IPersistPropertyBag2Vtbl;
struct IPrintDialogCallbackVtbl;
struct IPrintDialogServicesVtbl;
struct IQueryCancelAutoPlayVtbl;
struct IShellFavoritesNameSpace;
struct IShellFolderViewDualVtbl;
struct IShellIconOverlayManager;
struct IShellTaskScheduler2Vtbl;
struct IWbemBackupRestoreExVtbl;
struct IWbemClientTransportVtbl;
struct IXMLDOMCharacterDataVtbl;
struct NDIS_BPC_ADDRESS_COMPARE;
struct NDIS_BPC_DEVICE_SETTINGS;
struct WbemAuthenticatedLocator;
struct XMLDOMDocumentEventsVtbl;
struct _ADDRESS_LIST_DESCRIPTOR;
struct _ALLOCATOR_PROPERTIES_EX;
struct _BDA_TEMPLATE_CONNECTION;
struct _BIDI_RESPONSE_CONTAINER;
struct _CERT_ACCESS_DESCRIPTION;
struct _CERT_FORTEZZA_DATA_PROP;
struct _CERT_X942_DH_PARAMETERS;
struct _CHANGER_EXCHANGE_MEDIUM;
struct _CMC_ADD_ATTRIBUTES_INFO;
struct _CMC_ADD_EXTENSIONS_INFO;
struct _CMC_TAGGED_CERT_REQUEST;
struct _CMC_TAGGED_CONTENT_INFO;
struct _CMSG_CMS_RECIPIENT_INFO;
struct _CMSG_HASHED_ENCODE_INFO;
struct _CMSG_SIGNED_ENCODE_INFO;
struct _CMSG_SIGNER_ENCODE_INFO;
struct _CRYPT_HASH_MESSAGE_PARA;
struct _CRYPT_PROVIDER_DEFUSAGE;
struct _CRYPT_PROVIDER_PRIVDATA;
struct _CRYPT_REGISTER_ACTIONID;
struct _CRYPT_RETRIEVE_AUX_INFO;
struct _CRYPT_SIGN_MESSAGE_PARA;
struct _CTL_VERIFY_USAGE_STATUS;
struct _D3DHAL_DP2DRAWPRIMITIVE;
struct _D3DHAL_DP2DRAWRECTPATCH;
struct _D3DHAL_DP2TRIANGLESTRIP;
struct _D3DHAL_DP2UPDATEPALETTE;
struct _D3DHAL_GLOBALDRIVERDATA;
struct _D3DHAL_SCENECAPTUREDATA;
struct _D3DNTHAL_DP2ADDDIRTYBOX;
struct _D3DNTHAL_DP2CREATELIGHT;
struct _D3DNTHAL_DP2PIXELSHADER;
struct _D3DNTHAL_DP2RENDERSTATE;
struct _D3DNTHAL_DP2SETPRIORITY;
struct _D3DNTHAL_DP2STARTVERTEX;
struct _D3DNTHAL_DP2TRIANGLEFAN;
struct _DDHAL_CREATEPALETTEDATA;
struct _DDHAL_CREATESURFACEDATA;
struct _DDHAL_DDEXEBUFCALLBACKS;
struct _DDHAL_DDKERNELCALLBACKS;
struct _DDHAL_DESTROYDRIVERDATA;
struct _DDHAL_DESTROYMOCOMPDATA;
struct _DDHAL_GETDRIVERINFODATA;
struct _DDHAL_GETFLIPSTATUSDATA;
struct _DDHAL_GETVPORTFIELDDATA;
struct _DDHAL_SYNCVIDEOPORTDATA;
struct _DDHAL_UPDATEOVERLAYDATA;
struct _DDNT_GETDRIVERINFO2DATA;
struct _DDNT_GETFORMATCOUNTDATA;
struct _DDRAWI_DDMOTIONCOMP_INT;
struct _DDRAWI_DDMOTIONCOMP_LCL;
struct _DDRAWI_DDRAWCLIPPER_GBL;
struct _DDRAWI_DDRAWCLIPPER_INT;
struct _DDRAWI_DDRAWCLIPPER_LCL;
struct _DDRAWI_DDRAWPALETTE_GBL;
struct _DDRAWI_DDRAWPALETTE_INT;
struct _DDRAWI_DDRAWPALETTE_LCL;
struct _DDRAWI_DDRAWSURFACE_GBL;
struct _DDRAWI_DDRAWSURFACE_INT;
struct _DDRAWI_DDRAWSURFACE_LCL;
struct _DD_BEGINMOCOMPFRAMEDATA;
struct _DD_CANCREATESURFACEDATA;
struct _DD_FLIPTOGDISURFACEDATA;
struct _DD_FREEDRIVERMEMORYDATA;
struct _DD_GETHEAPALIGNMENTDATA;
struct _DD_GETMOCOMPFORMATSDATA;
struct _DD_SETEXCLUSIVEMODEDATA;
struct _DD_WAITFORVPORTSYNCDATA;
struct _EXIT_PROCESS_DEBUG_INFO;
struct _FILE_NOTIFY_INFORMATION;
struct _HTTPSPolicyCallbackData;
struct _IMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_OPTIONAL_HEADER64;
struct _ImageArchitectureHeader;
struct _KERB_SMART_CARD_PROFILE;
struct _LSA_FOREST_TRUST_RECORD;
struct _MSV1_0_SUBAUTH_RESPONSE;
struct _OFFLOAD_IPSEC_DELETE_SA;
struct _PERF_COUNTER_DEFINITION;
struct _POINTER_SEARCH_PHYSICAL;
struct _PROPSHEETUI_INFO_HEADER;
struct _QCMINFO_IDMAP_PLACEMENT;
struct _RSVP_FILTERSPEC_V6_FLOW;
struct _SERVICE_TYPE_VALUE_ABSA;
struct _SERVICE_TYPE_VALUE_ABSW;
struct _SP_NEWDEVICEWIZARD_DATA;
struct _SP_ORIGINAL_FILE_INFO_A;
struct _SP_ORIGINAL_FILE_INFO_W;
struct _STORAGE_PREDICT_FAILURE;
struct _SYSTEM_ALARM_OBJECT_ACE;
struct _SYSTEM_AUDIT_OBJECT_ACE;
struct _TRACE_GUID_REGISTRATION;
struct _TRANSPORT_HEADER_OFFSET;
struct _WINDBG_EXTENSION_APIS32;
struct _WINDBG_EXTENSION_APIS64;
struct csimaadpcmwaveformat_tag;
struct digiadpcmmwaveformat_tag;
struct g721_adpcmwaveformat_tag;
struct g723_adpcmwaveformat_tag;
struct mpeglayer3waveformat_tag;
struct tagCInterfaceProxyHeader;
struct tagEMRSCALEVIEWPORTEXTEX;
struct tagEMRSETCOLORADJUSTMENT;
struct tagMCI_ANIM_UPDATE_PARMS;
struct tagMCI_WAVE_DELETE_PARMS;
struct tagPIXELFORMATDESCRIPTOR;
struct tagRID_DEVICE_INFO_MOUSE;
struct tagRPC_ERROR_ENUM_HANDLE;
struct tagWNODE_EVENT_REFERENCE;
struct tagWNODE_SINGLE_INSTANCE;
struct truespeechwaveformat_tag;
struct AlphabeticalCategorizer;
struct DOMFreeThreadedDocument;
struct DShellWindowsEventsVtbl;
struct IBindStatusCallbackVtbl;
struct IDirect3DSwapChain8Vtbl;
struct IDirect3DVolumeTexture8;
struct IDirectDrawColorControl;
struct IDirectDrawGammaControl;
struct IDirectDrawSurface2Vtbl;
struct IDirectDrawSurface3Vtbl;
struct IDirectDrawSurface4Vtbl;
struct IDirectDrawSurface7Vtbl;
struct IDirectSoundBuffer8Vtbl;
struct IDirectSoundCaptureVtbl;
struct IDockingWindowFrameVtbl;
struct IDummyHICONIncluderVtbl;
struct IEnumSTATPROPSETSTGVtbl;
struct IExternalConnectionVtbl;
struct IFileSystemBindDataVtbl;
struct IForegroundTransferVtbl;
struct IKsAggregateControlVtbl;
struct IOleInPlaceActiveObject;
struct IOleInPlaceUIWindowVtbl;
struct IPassportClientServices;
struct IPersistPropertyBagVtbl;
struct IProcessInitControlVtbl;
struct IPropertyNotifySinkVtbl;
struct IPropertySetStorageVtbl;
struct IRpcSyntaxNegotiateVtbl;
struct IRunningObjectTableVtbl;
struct ISWbemNamedValueSetVtbl;
struct ISearchAssistantOC2Vtbl;
struct ISearchAssistantOC3Vtbl;
struct IShellTaskSchedulerVtbl;
struct IThumbnailExtractorVtbl;
struct IUnsecuredApartmentVtbl;
struct IUserEventTimerCallback;
struct IWbemConfigureRefresher;
struct IWbemConnectorLoginVtbl;
struct IWbemDecoupledRegistrar;
struct IWbemHiPerfProviderVtbl;
struct IWbemStatusCodeTextVtbl;
struct IWbemUnsecuredApartment;
struct IWebWizardExtensionVtbl;
struct IWindowForBindingUIVtbl;
struct IXMLDOMCDATASectionVtbl;
struct IXMLDOMDocumentFragment;
struct IXMLDOMDocumentTypeVtbl;
struct IXMLDOMNamedNodeMapVtbl;
struct NDR_POINTER_QUEUE_STATE;
struct SERVICE_STATUS_HANDLE__;
struct _BDA_TEMPLATE_PIN_JOINT;
struct _BIDI_REQUEST_CONTAINER;
struct _CERT_CHAIN_POLICY_PARA;
struct _CERT_REVOCATION_STATUS;
struct _CERT_SYSTEM_STORE_INFO;
struct _CHANGER_ELEMENT_STATUS;
struct _CMSG_CTRL_DECRYPT_PARA;
struct _CONSOLE_SELECTION_INFO;
struct _CRL_ISSUING_DIST_POINT;
struct _CRYPT_PRIVATE_KEY_INFO;
struct _CRYPT_SMIME_CAPABILITY;
struct _D3DADAPTER_IDENTIFIER8;
struct _D3DHAL_D3DEXTENDEDCAPS;
struct _D3DHAL_DP2ADDDIRTYRECT;
struct _D3DHAL_DP2DRAWTRIPATCH;
struct _D3DHAL_DP2SETCLIPPLANE;
struct _D3DHAL_DP2SETTRANSFORM;
struct _D3DHAL_DP2TRIANGLELIST;
struct _D3DHAL_DP2VERTEXSHADER;
struct _D3DHAL_DP2VIEWPORTINFO;
struct _D3DHAL_RENDERSTATEDATA;
struct _D3DHAL_TEXTURESWAPDATA;
struct _D3DNTHAL_DP2SETINDICES;
struct _D3DNTHAL_DP2SETPALETTE;
struct _D3DPRESENT_PARAMETERS_;
struct _DDHAL_COLORCONTROLDATA;
struct _DDHAL_CREATEMOCOMPDATA;
struct _DDHAL_DESTROYVPORTDATA;
struct _DDHAL_GETBLTSTATUSDATA;
struct _DDHAL_GETVPORTLINEDATA;
struct _DDHAL_RENDERMOCOMPDATA;
struct _DDRAWI_DDVIDEOPORT_INT;
struct _DDRAWI_DDVIDEOPORT_LCL;
struct _DD_CREATESURFACEEXDATA;
struct _DD_GETVPORTCONNECTDATA;
struct _DISK_CACHE_INFORMATION;
struct _DISK_CONTROLLER_NUMBER;
struct _DOCUMENTPROPERTYHEADER;
struct _ENCRYPTION_CERTIFICATE;
struct _EVENT_TRACE_PROPERTIES;
struct _EXIT_THREAD_DEBUG_INFO;
struct _FILEPATHS_SIGNERINFO_A;
struct _FILEPATHS_SIGNERINFO_W;
struct _FILE_IN_CABINET_INFO_A;
struct _FILE_IN_CABINET_INFO_W;
struct _FILE_SET_SPARSE_BUFFER;
struct _GET_CHANGER_PARAMETERS;
struct _GET_LENGTH_INFORMATION;
struct _IMAGE_EXPORT_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY64;
struct _ImageArchitectureEntry;
struct _KERB_INTERACTIVE_LOGON;
struct _KERB_TICKET_CACHE_INFO;
struct _MESSAGE_RESOURCE_BLOCK;
struct _MESSAGE_RESOURCE_ENTRY;
struct _MIB_MFE_STATS_TABLE_EX;
struct _MPEG2_TRANSPORT_STRIDE;
struct _MSV1_0_SUBAUTH_REQUEST;
struct _NDIS_802_11_BSSID_LIST;
struct _NDIS_802_11_STATISTICS;
struct _NDIS_PM_PACKET_PATTERN;
struct _NDIS_WAN_PROTOCOL_CAPS;
struct _PLEX_READ_DATA_REQUEST;
struct _POLICY_DNS_DOMAIN_INFO;
struct _POLICY_DOMAIN_EFS_INFO;
struct _POLICY_PD_ACCOUNT_INFO;
struct _PRINTER_NOTIFY_OPTIONS;
struct _PRINTPROCESSOROPENDATA;
struct _PRINTPROCESSOR_INFO_1A;
struct _PRINTPROCESSOR_INFO_1W;
struct _PROCESSOR_POWER_POLICY;
struct _REMSECURITY_ATTRIBUTES;
struct _RSVP_FILTERSPEC_V4_GPI;
struct _RSVP_FILTERSPEC_V6_GPI;
struct _SERVICE_STATUS_PROCESS;
struct _SERVICE_TYPE_INFO_ABSA;
struct _SERVICE_TYPE_INFO_ABSW;
struct _SE_IMPERSONATION_STATE;
struct _SPC_FINANCIAL_CRITERIA;
struct _SP_ALTPLATFORM_INFO_V1;
struct _SP_ALTPLATFORM_INFO_V2;
struct _SP_CLASSIMAGELIST_DATA;
struct _SP_CLASSINSTALL_HEADER;
struct _SP_DETECTDEVICE_PARAMS;
struct _SP_DEVINSTALL_PARAMS_A;
struct _SP_DEVINSTALL_PARAMS_W;
struct _SP_REMOVEDEVICE_PARAMS;
struct _WIN32_FIND_STREAM_DATA;
struct _WINBASE_DEFINED_STRUCT;
struct _WIN_TRUST_SUBJECT_FILE;
struct _XMIT_ROUTINE_QUINTUPLE;
struct dvi_adpcmwaveformat_tag;
struct ima_adpcmwaveformat_tag;
struct tagCInterfaceStubHeader;
struct tagEMRCREATECOLORSPACEW;
struct tagEMRSETDIBITSTODEVICE;
struct tagEMRSETPALETTEENTRIES;
struct tagEMRSETWORLDTRANSFORM;
struct tagINITCOMMONCONTROLSEX;
struct tagLAYERPLANEDESCRIPTOR;
struct tagMCI_ANIM_OPEN_PARMSA;
struct tagMCI_ANIM_OPEN_PARMSW;
struct tagMCI_GETDEVCAPS_PARMS;
struct tagMCI_OVLY_LOAD_PARMSA;
struct tagMCI_OVLY_LOAD_PARMSW;
struct tagMCI_OVLY_OPEN_PARMSA;
struct tagMCI_OVLY_OPEN_PARMSW;
struct tagMCI_OVLY_SAVE_PARMSA;
struct tagMCI_OVLY_SAVE_PARMSW;
struct tagMCI_VD_ESCAPE_PARMSA;
struct tagMCI_VD_ESCAPE_PARMSW;
struct tagMCI_WAVE_OPEN_PARMSA;
struct tagMCI_WAVE_OPEN_PARMSW;
struct tagNMDATETIMEWMKEYDOWNA;
struct tagNMDATETIMEWMKEYDOWNW;
struct DD_MOTIONCOMPCALLBACKS;
struct DD_NTPRIVATEDRIVERCAPS;
struct DShellFolderViewEvents;
struct DWebBrowserEvents2Vtbl;
struct DataSourceListenerVtbl;
struct IAccessibleHandlerVtbl;
struct IAsyncRpcChannelBuffer;
struct ICancelMethodCallsVtbl;
struct IDirect3DResource8Vtbl;
struct IDirect3DVertexBuffer8;
struct IDirectDrawClipperVtbl;
struct IDirectDrawPaletteVtbl;
struct IDirectDrawSurfaceVtbl;
struct IDirectMusicBufferVtbl;
struct IDirectMusicCollection;
struct IDirectMusicInstrument;
struct IDirectSound3DListener;
struct IDirectSoundBufferVtbl;
struct IDirectSoundFXEchoVtbl;
struct IDirectSoundFullDuplex;
struct IDirectSoundNotifyVtbl;
struct IDockingWindowSiteVtbl;
struct IEncodingFilterFactory;
struct IOleParentUndoUnitVtbl;
struct IPersistStreamInitVtbl;
struct IProvideClassInfo2Vtbl;
struct IQueryAssociationsVtbl;
struct IReleaseMarshalBuffers;
struct IRpcChannelBuffer2Vtbl;
struct IRpcChannelBuffer3Vtbl;
struct ISWbemPrivilegeSetVtbl;
struct ISWbemQualifierSetVtbl;
struct ISearchAssistantOCVtbl;
struct IShellChangeNotifyVtbl;
struct IShellExecuteHookAVtbl;
struct IShellExecuteHookWVtbl;
struct IShellFolderViewCBVtbl;
struct IShellLinkDataListVtbl;
struct IShellMenuCallbackVtbl;
struct IShellPropSheetExtVtbl;
struct ISynchronizeHandleVtbl;
struct IVariantChangeTypeVtbl;
struct IWbemAddressResolution;
struct IWbemBackupRestoreVtbl;
struct IWbemEventProviderVtbl;
struct IWbemObjectTextSrcVtbl;
struct IWbemUnboundObjectSink;
struct IWinInetFileStreamVtbl;
struct IXMLDOMEntityReference;
struct NDIS_BPC_FORCE_RECEIVE;
struct NDIS_BPC_PROGRAM_GUIDE;
struct NDIS_CO_DEVICE_PROFILE;
struct PassportClientServices;
struct UserEventTimerCallback;
struct WINTRUST_CATALOG_INFO_;
struct WbemDecoupledRegistrar;
struct _BDA_IPv4_ADDRESS_LIST;
struct _BDA_IPv6_ADDRESS_LIST;
struct _CERT_CRL_CONTEXT_PAIR;
struct _CMInvokeCommandInfoEx;
struct _CREDENTIAL_ATTRIBUTEA;
struct _CREDENTIAL_ATTRIBUTEW;
struct _CRYPT_SEQUENCE_OF_ANY;
struct _CRYPT_TRUST_REG_ENTRY;
struct _CRYPT_X942_OTHER_INFO;
struct _CTL_FIND_SUBJECT_PARA;
struct _CTL_VERIFY_USAGE_PARA;
struct _D3DHAL_DP2ADDDIRTYBOX;
struct _D3DHAL_DP2CREATELIGHT;
struct _D3DHAL_DP2PIXELSHADER;
struct _D3DHAL_DP2RENDERSTATE;
struct _D3DHAL_DP2SETPRIORITY;
struct _D3DHAL_DP2STARTVERTEX;
struct _D3DHAL_DP2TRIANGLEFAN;
struct _D3DHAL_DRAWPRIMCOUNTS;
struct _D3DNTHALDeviceDesc_V1;
struct _D3DNTHALDeviceDesc_V2;
struct _D3DNTHAL_DP2BUFFERBLT;
struct _D3DNTHAL_DP2LINESTRIP;
struct _D3DNTHAL_DP2SETTEXLOD;
struct _D3DNTHAL_DP2VOLUMEBLT;
struct _DDHAL_CREATEVPORTDATA;
struct _DDHAL_GETSCANLINEDATA;
struct _DDHAL_SETCLIPLISTDATA;
struct _DDHAL_SETCOLORKEYDATA;
struct _DDHAL_SYNCSURFACEDATA;
struct _DDHAL_UPDATEVPORTDATA;
struct _DDRAWI_DIRECTDRAW_GBL;
struct _DDRAWI_DIRECTDRAW_INT;
struct _DDRAWI_DIRECTDRAW_LCL;
struct _DD_CANCREATEVPORTDATA;
struct _DD_DESTROYDDLOCALDATA;
struct _DD_DESTROYPALETTEDATA;
struct _DD_DESTROYSURFACEDATA;
struct _DD_DRVSETCOLORKEYDATA;
struct _DD_ENDMOCOMPFRAMEDATA;
struct _DD_GETDRIVERINFO2DATA;
struct _DD_GETDRIVERSTATEDATA;
struct _DD_GETFORMATCOUNTDATA;
struct _DD_GETMOCOMPGUIDSDATA;
struct _DD_GETVPORTSIGNALDATA;
struct _DD_NONLOCALVIDMEMCAPS;
struct _DRIVER_UPGRADE_INFO_1;
struct _DRIVER_UPGRADE_INFO_2;
struct _EVENT_INSTANCE_HEADER;
struct _EnumImageStoreDATAtag;
struct _FIELD_INFO___BitField;
struct _FILESYSTEM_STATISTICS;
struct _IMAGE_BASE_RELOCATION;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_TLS_DIRECTORY32;
struct _IMAGE_TLS_DIRECTORY64;
struct _IP_MCAST_COUNTER_INFO;
struct _KERB_DECRYPT_RESPONSE;
struct _KERB_SMART_CARD_LOGON;
struct _LSA_OBJECT_ATTRIBUTES;
struct _LSA_TRUST_INFORMATION;
struct _MCDSTATE_SCISSOR_RECT;
struct _MCDTEXTUREENABLESTATE;
struct _MESSAGE_RESOURCE_DATA;
struct _MIB_IPMCAST_MFE_STATS;
struct _MIB_IPMCAST_OIF_STATS;
struct _MSV1_0_NTLM3_RESPONSE;
struct _NDIS_BPC_ADAPTER_CAPS;
struct _NDIS_IRDA_PACKET_INFO;
struct _NDIS_PNP_CAPABILITIES;
struct _NDIS_STATISTICS_VALUE;
struct _NDR_USER_MARSHAL_INFO;
struct _PARTITION_INFORMATION;
struct _PAR_QUERY_INFORMATION;
struct _POLICY_AUDIT_LOG_INFO;
struct _PREVENT_MEDIA_REMOVAL;
struct _PRINTPROCESSOR_CAPS_1;
struct _QUERY_SERVICE_CONFIGA;
struct _QUERY_SERVICE_CONFIGW;
struct _RPC_SECURITY_QOS_V2_A;
struct _RPC_SECURITY_QOS_V2_W;
struct _RPC_SECURITY_QOS_V3_A;
struct _RPC_SECURITY_QOS_V3_W;
struct _RPC_SYNTAX_IDENTIFIER;
struct _SHChangeDWORDAsIDList;
struct _SPC_SERIALIZED_OBJECT;
struct _SP_ENABLECLASS_PARAMS;
struct _SP_FILE_COPY_PARAMS_A;
struct _SP_FILE_COPY_PARAMS_W;
struct _SP_INSTALLWIZARD_DATA;
struct _STORAGE_DEVICE_NUMBER;
struct _SearchAssistantEvents;
struct _TAPE_CREATE_PARTITION;
struct _TIME_ZONE_INFORMATION;
struct _TRACE_GUID_PROPERTIES;
struct _TRANSMIT_FILE_BUFFERS;
struct _TRUSTED_PASSWORD_INFO;
struct _UNLOAD_DLL_DEBUG_INFO;
struct _WINDBG_EXTENSION_APIS;
struct __GENERIC_BINDING_INFO;
struct _tagPROTOCOLFILTERDATA;
struct digirealwaveformat_tag;
struct dolbyac2waveformat_tag;
struct ip_interface_name_info;
struct oliadpcmwaveformat_tag;
struct tagCInterfaceProxyVtbl;
struct tagCOLORCORRECTPALETTE;
struct tagCStdPSFactoryBuffer;
struct tagDDDEVICEIDENTIFIER2;
struct tagDDEML_MSG_HOOK_DATA;
struct tagEMRCREATECOLORSPACE;
struct tagEMREXTSELECTCLIPRGN;
struct tagEMRGLSBOUNDEDRECORD;
struct tagEMRSETVIEWPORTEXTEX;
struct tagEMRSETVIEWPORTORGEX;
struct tagKS_BITMAPINFOHEADER;
struct tagKS_DATARANGE_VIDEO2;
struct tagKS_VIDEOINFOHEADER2;
struct tagLVINSERTGROUPSORTED;
struct tagMCI_ANIM_PLAY_PARMS;
struct tagMCI_ANIM_RECT_PARMS;
struct tagMCI_ANIM_STEP_PARMS;
struct tagMCI_OVLY_RECT_PARMS;
struct tagRASEAPUSERIDENTITYA;
struct tagRASEAPUSERIDENTITYW;
struct tagRID_DEVICE_INFO_HID;
struct tcp_reserve_port_range;
struct AsyncIAdviseSink2Vtbl;
struct DD_VIDEOPORTCALLBACKS;
struct DShellNameSpaceEvents;
struct DWebBrowserEventsVtbl;
struct IActionProgressDialog;
struct IAddrExclusionControl;
struct IAutoCompleteDropDown;
struct ICategoryProviderVtbl;
struct IComThreadingInfoVtbl;
struct IContinueCallbackVtbl;
struct IDDVideoPortContainer;
struct IDataAdviseHolderVtbl;
struct IDirect3DBaseTexture8;
struct IDirect3DCubeTexture8;
struct IDirect3DIndexBuffer8;
struct IDirect3DSurface8Vtbl;
struct IDirect3DTexture8Vtbl;
struct IDirectDrawKernelVtbl;
struct IDirectSoundFXFlanger;
struct IDirectSoundFXParamEq;
struct IDirectWriterLockVtbl;
struct IDragSourceHelperVtbl;
struct IDropTargetHelperVtbl;
struct IEnumCATEGORYINFOVtbl;
struct IEnumConnectionPoints;
struct IEnumOleDocumentViews;
struct IEnumOleUndoUnitsVtbl;
struct IFolderFilterSiteVtbl;
struct IGlobalInterfaceTable;
struct IInitializeObjectVtbl;
struct IInternetBindInfoVtbl;
struct IInternetPriorityVtbl;
struct IInternetProtocolInfo;
struct IInternetProtocolRoot;
struct IInternetProtocolSink;
struct IInternetProtocolVtbl;
struct IInternetThreadSwitch;
struct INamedPropertyBagVtbl;
struct INewShortcutHookAVtbl;
struct INewShortcutHookWVtbl;
struct IOleCommandTargetVtbl;
struct IOleInPlaceObjectVtbl;
struct IOleInPlaceSiteExVtbl;
struct IOleItemContainerVtbl;
struct IParseDisplayNameVtbl;
struct IPrintOemDriverUIVtbl;
struct IPropertyPageSiteVtbl;
struct IProvideClassInfoVtbl;
struct IPublishingWizardVtbl;
struct IResolveShellLinkVtbl;
struct IRpcChannelBufferVtbl;
struct ISWbemEventSourceVtbl;
struct ISWbemPropertySetVtbl;
struct ISWbemRefreshableItem;
struct ISearchCommandExtVtbl;
struct ISequentialStreamVtbl;
struct IShellFolderViewDual2;
struct IShellIconOverlayVtbl;
struct ISpecifyPropertyPages;
struct ISupportErrorInfoVtbl;
struct ISurrogateServiceVtbl;
struct ISynchronizeContainer;
struct ISynchronizeEventVtbl;
struct ISynchronizeMutexVtbl;
struct IThumbnailCaptureVtbl;
struct ITimeAndNoticeControl;
struct ITypeChangeEventsVtbl;
struct IUserNotificationVtbl;
struct IWbemObjectAccessVtbl;
struct IWbemPropertyProvider;
struct IWbemProviderIdentity;
struct IWbemProviderInitSink;
struct IWbemProviderInitVtbl;
struct IWbemQualifierSetVtbl;
struct IXMLDOMImplementation;
struct IXMLDOMParseErrorVtbl;
struct IXMLElementCollection;
struct InternetPrintOrdering;
struct WebViewFolderContents;
struct _ACL_SIZE_INFORMATION;
struct _BDA_ETHERNET_ADDRESS;
struct _BDA_PROGRAM_PID_LIST;
struct _CERT_CREDENTIAL_INFO;
struct _CERT_GENERAL_SUBTREE;
struct _CERT_PUBLIC_KEY_INFO;
struct _CERT_REVOCATION_INFO;
struct _CERT_REVOCATION_PARA;
struct _CERT_STORE_PROV_INFO;
struct _CERT_TRUST_LIST_INFO;
struct _CHANGER_ELEMENT_LIST;
struct _CHANGER_PRODUCT_DATA;
struct _CHANGER_SET_POSITION;
struct _CMC_TAGGED_ATTRIBUTE;
struct _CMC_TAGGED_OTHER_MSG;
struct _CMSG_CMS_SIGNER_INFO;
struct _CRL_DIST_POINTS_INFO;
struct _CRYPT_KEY_PROV_PARAM;
struct _CRYPT_OID_FUNC_ENTRY;
struct _CTL_ANY_SUBJECT_INFO;
struct _D3DExecuteBufferDesc;
struct _D3DHAL_DP2SETINDICES;
struct _D3DHAL_DP2SETPALETTE;
struct _D3DNTHAL_DP2LINELIST;
struct _D3DNTHAL_DP2SETLIGHT;
struct _D3DNTHAL_DP2STATESET;
struct _D3DVERTEXBUFFER_DESC;
struct _DDGETPOLARITYOUTINFO;
struct _DDHAL_SETENTRIESDATA;
struct _DDHAL_SETPALETTEDATA;
struct _DDHAL_VPORTCOLORDATA;
struct _DDNONLOCALVIDMEMCAPS;
struct _DDVIDEOPORTBANDWIDTH;
struct _DD_CREATEPALETTEDATA;
struct _DD_CREATESURFACEDATA;
struct _DD_DESTROYMOCOMPDATA;
struct _DD_DIRECTDRAW_GLOBAL;
struct _DD_GETDRIVERINFODATA;
struct _DD_GETFLIPSTATUSDATA;
struct _DD_GETVPORTFIELDDATA;
struct _DD_SYNCVIDEOPORTDATA;
struct _DD_UPDATEOVERLAYDATA;
struct _DEVICEPROPERTYHEADER;
struct _DOCEVENT_CREATEDCPRE;
struct _ENUM_SERVICE_STATUSA;
struct _ENUM_SERVICE_STATUSW;
struct _EVENT_TRACE_LOGFILEA;
struct _EVENT_TRACE_LOGFILEW;
struct _EXCEPTION_DEBUG_INFO;
struct _FILEGROUPDESCRIPTORA;
struct _FILEGROUPDESCRIPTORW;
struct _FILE_OBJECTID_BUFFER;
union _FILE_SEGMENT_ELEMENT;
struct _FORMAT_EX_PARAMETERS;
struct _FULL_PTR_XLAT_TABLES;
struct _GEN_GET_NETCARD_TIME;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY;
struct _IMAGE_IMPORT_BY_NAME;
struct _IMAGE_SECTION_HEADER;
struct _IP_ADAPTER_ADDRESSES;
struct _IP_ADAPTER_INDEX_MAP;
struct _IP_ADAPTER_ORDER_MAP;
struct _KERB_DECRYPT_REQUEST;
struct _KERB_EXTERNAL_TICKET;
struct _LSA_AUTH_INFORMATION;
struct _MCDGLOBALDRIVERFUNCS;
struct _MIB_IPMCAST_BOUNDARY;
struct _MIB_IPMCAST_IF_ENTRY;
struct _MIB_IPMCAST_IF_TABLE;
struct _MSV1_0_SUBAUTH_LOGON;
struct _NETCONNECTINFOSTRUCT;
struct _NETWORK_ADDRESS_LIST;
struct _NON_PAGED_DEBUG_INFO;
struct _OFFLOAD_IPSEC_ADD_SA;
struct _PRINTER_ENUM_VALUESA;
struct _PRINTER_ENUM_VALUESW;
struct _RPC_CLIENT_INTERFACE;
struct _RPC_PROTSEQ_ENDPOINT;
struct _RPC_SERVER_INTERFACE;
struct _RTL_CRITICAL_SECTION;
struct _SERVICE_DESCRIPTIONA;
struct _SERVICE_DESCRIPTIONW;
struct _SERVICE_TABLE_ENTRYA;
struct _SERVICE_TABLE_ENTRYW;
struct _SHCREATEPROCESSINFOW;
struct _SP_DRVINFO_DATA_V1_A;
struct _SP_DRVINFO_DATA_V1_W;
struct _SP_DRVINFO_DATA_V2_A;
struct _SP_DRVINFO_DATA_V2_W;
struct _SP_DRVINSTALL_PARAMS;
struct _SP_INF_SIGNER_INFO_A;
struct _SP_INF_SIGNER_INFO_W;
struct _SP_PROPCHANGE_PARAMS;
struct _STORAGE_HOTPLUG_INFO;
struct _TCI_CLIENT_FUNC_LIST;
struct _TRACE_LOGFILE_HEADER;
struct _UNIVERSAL_NAME_INFOA;
struct _UNIVERSAL_NAME_INFOW;
struct _VK_TO_FUNCTION_TABLE;
struct _WCE_IRDA_DEVICE_INFO;
struct _WSAServiceClassInfoA;
struct _WSAServiceClassInfoW;
struct _wireSAFEARR_DISPATCH;
struct digifixwaveformat_tag;
struct digistdwaveformat_tag;
struct echosc1waveformat_tag;
struct ip_option_information;
struct olicelpwaveformat_tag;
struct tACMFILTERTAGDETAILSA;
struct tACMFILTERTAGDETAILSW;
struct tACMFORMATTAGDETAILSA;
struct tACMFORMATTAGDETAILSW;
struct tagBDA_TRANSPORT_INFO;
struct tagCInterfaceStubVtbl;
struct tagCLIENTCREATESTRUCT;
struct tagCOLORMATCHTOTARGET;
struct tagDDDEVICEIDENTIFIER;
struct tagEMRCREATEMONOBRUSH;
struct tagEMREXCLUDECLIPRECT;
struct tagEMRSETARCDIRECTION;
struct tagHARDWAREHOOKSTRUCT;
struct tagHH_GLOBAL_PROPERTY;
struct tagKS_AnalogVideoInfo;
struct tagKS_DATARANGE_VIDEO;
struct tagKS_VIDEOINFOHEADER;
struct tagMCI_SYSINFO_PARMSA;
struct tagMCI_SYSINFO_PARMSW;
struct tagMCI_WAVE_SET_PARMS;
struct tagMIXERLINECONTROLSA;
struct tagMIXERLINECONTROLSW;
struct tagNMHDFILTERBTNCLICK;
struct tagOleMenuGroupWidths;
struct tagRAWINPUTDEVICELIST;
struct tag_CompileStatusInfo;
struct wavefilter_volume_tag;
struct AsyncIAdviseSinkVtbl;
struct AsyncIPipeDoubleVtbl;
struct DSearchCommandEvents;
struct DriveSizeCategorizer;
struct DriveTypeCategorizer;
struct FreeSpaceCategorizer;
struct IAccPropServicesVtbl;
struct IAddrTrackingControl;
struct IBrowserFrameOptions;
struct ICatalogFileInfoVtbl;
struct ICommDlgBrowser2Vtbl;
struct IConnectionPointVtbl;
struct IContextMenuSiteVtbl;
struct ICreateErrorInfoVtbl;
struct ICreateTypeInfo2Vtbl;
struct IDirect3DDevice8Vtbl;
struct IDirect3DVolume8Vtbl;
struct IDirectDrawVideoPort;
struct IDirectMusicDownload;
struct IDirectMusicPortVtbl;
struct IDirectMusicThruVtbl;
struct IDirectSound3DBuffer;
struct IDirectSoundFXChorus;
struct IDirectSoundFXGargle;
struct IEnumConnectionsVtbl;
struct IEnumExtraSearchVtbl;
struct IEnumSTATPROPSTGVtbl;
struct IEnumShellImageStore;
struct IEnumWbemClassObject;
struct IImageRecompressVtbl;
struct IInputObjectSiteVtbl;
struct IInternalUnknownVtbl;
struct IInternetSessionVtbl;
struct IInternetZoneManager;
struct IMPORT_OBJECT_HEADER;
struct INamespaceWalkCBVtbl;
struct IOleAdviseHolderVtbl;
struct IOleCacheControlVtbl;
struct IOleDocumentSiteVtbl;
struct IOleDocumentViewVtbl;
struct IOleInPlaceFrameVtbl;
struct IPSFactoryBufferVtbl;
struct IPerPropertyBrowsing;
struct IPersistPropertyBag2;
struct IPointerInactiveVtbl;
struct IPrintDialogCallback;
struct IPrintDialogServices;
struct IPropertyStorageVtbl;
struct IQueryCancelAutoPlay;
struct ISWbemNamedValueVtbl;
struct ISWbemObjectPathVtbl;
struct ISWbemServicesExVtbl;
struct ISWbemSinkEventsVtbl;
struct IScriptErrorListVtbl;
struct IServiceProviderVtbl;
struct IShellFolderBandVtbl;
struct IShellFolderViewDual;
struct IShellImageStoreVtbl;
struct IShellTaskScheduler2;
struct ISimpleFrameSiteVtbl;
struct IWbemBackupRestoreEx;
struct IWbemClassObjectVtbl;
struct IWbemClientTransport;
struct IWbemLevel1LoginVtbl;
struct IWinInetHttpInfoVtbl;
struct IWizardExtensionVtbl;
struct IWrappedProtocolVtbl;
struct IXMLDOMAttributeVtbl;
struct IXMLDOMCharacterData;
struct NDIS_BPC_DEVICE_CAPS;
struct NDIS_BPC_POOL_RETURN;
struct SChannelHookCallInfo;
struct SWbemRefreshableItem;
struct XMLDOMDocumentEvents;
struct _CERT_ALT_NAME_ENTRY;
struct _CERT_DSS_PARAMETERS;
struct _CERT_POLICY_MAPPING;
struct _CHANGER_MOVE_MEDIUM;
struct _CMINVOKECOMMANDINFO;
struct _CONSOLE_CURSOR_INFO;
struct _CRL_DIST_POINT_NAME;
struct _CRL_REVOCATION_INFO;
struct _CRYPT_KEY_PROV_INFO;
struct _CRYPT_PROVIDER_CERT;
struct _CRYPT_PROVIDER_DATA;
struct _CRYPT_PROVIDER_SGNR;
struct _CTL_FIND_USAGE_PARA;
struct _D3DFINDDEVICERESULT;
struct _D3DFINDDEVICESEARCH;
struct _D3DHAL_DP2BUFFERBLT;
struct _D3DHAL_DP2LINESTRIP;
struct _D3DHAL_DP2SETTEXLOD;
struct _D3DHAL_DP2VOLUMEBLT;
struct _D3DHAL_GETSTATEDATA;
struct _D3DINDEXBUFFER_DESC;
struct _D3DNTHAL_CALLBACKS2;
struct _D3DNTHAL_CALLBACKS3;
struct _D3DNTHAL_CLEAR2DATA;
struct _D3DNTHAL_DP2COMMAND;
struct _D3DVERTEXBUFFERDESC;
struct _DBGKD_GET_VERSION32;
struct _DBGKD_GET_VERSION64;
struct _DDFLIPVIDEOPORTINFO;
struct _DDGETPOLARITYININFO;
struct _DDHAL_FLIPVPORTDATA;
struct _DDSKIPNEXTFIELDINFO;
struct _DD_COLORCONTROLDATA;
struct _DD_CREATEMOCOMPDATA;
struct _DD_DESTROYVPORTDATA;
struct _DD_DIRECTDRAW_LOCAL;
struct _DD_GETBLTSTATUSDATA;
struct _DD_GETVPORTLINEDATA;
struct _DD_MOTIONCOMP_LOCAL;
struct _DD_RENDERMOCOMPDATA;
struct _DISK_DETECTION_INFO;
struct _DISK_GROW_PARTITION;
struct _DISK_PARTITION_INFO;
struct _DMUS_EXTENSIONCHUNK;
struct _ENCRYPTED_DATA_INFO;
struct _IMAGELISTDRAWPARAMS;
struct _INSERTPSUIPAGE_INFO;
struct _IP_PER_ADAPTER_INFO;
struct _KERB_TICKET_PROFILE;
struct _KS_COPY_MACROVISION;
struct _KS_DVDCOPY_TITLEKEY;
struct _LOAD_DLL_DEBUG_INFO;
struct _LSA_TRANSLATED_NAME;
struct _LSA_TRANSLATED_SID2;
struct _LUID_AND_ATTRIBUTES;
struct _MCDSHADELMODELSTATE;
struct _MCDSTENCILTESTSTATE;
struct _MIB_IPFORWARDNUMBER;
struct _MIB_MFE_STATS_TABLE;
struct _NETWORK_ADDRESS_IPX;
struct _PAR_SET_INFORMATION;
struct _PHYSICAL_WITH_FLAGS;
struct _PRINTER_NOTIFY_INFO;
struct _PRINTER_NOTIFY_INIT;
struct _PROCESS_INFORMATION;
struct _PSFEATURE_CUSTPAPER;
struct _RPC_PROTSEQ_VECTORA;
struct _RPC_PROTSEQ_VECTORW;
struct _RPC_TRANSFER_SYNTAX;
struct _SECURITY_ATTRIBUTES;
struct _SECURITY_DESCRIPTOR;
struct _SFVM_HELPTOPIC_DATA;
struct _SHChangeNotifyEntry;
struct _SOCKET_ADDRESS_LIST;
struct _SYSTEM_POWER_POLICY;
struct _SYSTEM_POWER_STATUS;
struct _TAPE_GET_STATISTICS;
struct _TAPE_WMI_OPERATIONS;
struct _TOKEN_PRIMARY_GROUP;
struct _VOLUME_DISK_EXTENTS;
struct __MCDTEXTUREOBJSTATE;
struct _tagHIT_LOGGING_INFO;
struct _wireSAFEARRAY_UNION;
struct _wireSAFEARR_BRECORD;
struct _wireSAFEARR_HAVEIID;
struct _wireSAFEARR_UNKNOWN;
struct _wireSAFEARR_VARIANT;
struct adpcmewaveformat_tag;
struct gsm610waveformat_tag;
struct oligsmwaveformat_tag;
struct olioprwaveformat_tag;
struct olisbcwaveformat_tag;
struct sonarcwaveformat_tag;
struct tMIXERCONTROLDETAILS;
struct tagCBTACTIVATESTRUCT;
struct tagCLEANLOCALSTORAGE;
struct tagCOMPAREITEMSTRUCT;
struct tagCOMPOSITIONSTRING;
struct tagEMRPOLYPOLYLINE16;
struct tagEMRSELECTCLIPPATH;
struct tagEMRSETMAPPERFLAGS;
struct tagEMRTRANSPARENTBLT;
struct tagKS_BDA_FRAME_INFO;
struct tagKS_MPEG1VIDEOINFO;
struct tagKS_MPEGVIDEOINFO2;
struct tagKS_VBI_FRAME_INFO;
struct tagMCI_GENERIC_PARMS;
struct tagMCI_SEQ_SET_PARMS;
struct tagMCI_VD_PLAY_PARMS;
struct tagMCI_VD_STEP_PARMS;
struct tagMEASUREITEMSTRUCT;
struct tagMENUGETOBJECTINFO;
struct tagMOUSEHOOKSTRUCTEX;
struct tagNCCALCSIZE_PARAMS;
struct tagNMDATETIMEFORMATA;
struct tagNMDATETIMEFORMATW;
struct tagNMDATETIMESTRINGA;
struct tagNMDATETIMESTRINGW;
struct tagNMLVODSTATECHANGE;
struct tagNMTOOLTIPSCREATED;
struct tagNONCLIENTMETRICSA;
struct tagNONCLIENTMETRICSW;
struct tagRASAUTODIALENTRYA;
struct tagRASAUTODIALENTRYW;
struct tagRASDIALEXTENSIONS;
struct tagRPC_EE_INFO_PARAM;
struct tagWNODE_METHOD_ITEM;
struct tagWNODE_SINGLE_ITEM;
struct tag_KS_TRUECOLORINFO;
struct DD_PALETTECALLBACKS;
struct DD_SURFACECALLBACKS;
struct DShellWindowsEvents;
struct EVENT_INSTANCE_INFO;
struct FolderItemVerbsVtbl;
struct IActionProgressVtbl;
struct IAsyncOperationVtbl;
struct IBindStatusCallback;
struct ICatInformationVtbl;
struct IClassActivatorVtbl;
struct IClientSecurityVtbl;
struct IColumnProviderVtbl;
struct ICommDlgBrowserVtbl;
struct ICreateTypeInfoVtbl;
struct ICreateTypeLib2Vtbl;
struct IDelegateFolderVtbl;
struct IDirect3DSwapChain8;
struct IDirectDrawSurface2;
struct IDirectDrawSurface3;
struct IDirectDrawSurface4;
struct IDirectDrawSurface7;
struct IDirectSoundBuffer8;
struct IDirectSoundCapture;
struct IDockingWindowFrame;
struct IDummyHICONIncluder;
struct IEnumPrivacyRecords;
struct IEnumSTATPROPSETSTG;
struct IExternalConnection;
struct IFileSearchBandVtbl;
struct IFileSystemBindData;
struct IFileViewerSiteVtbl;
struct IFolderBandPrivVtbl;
struct IFolderViewHostVtbl;
struct IFontEventsDispVtbl;
struct IForegroundTransfer;
struct IHWEventHandlerVtbl;
struct IHttpNegotiate2Vtbl;
struct IItemNameLimitsVtbl;
struct IKsAggregateControl;
struct IObjectIdentityVtbl;
struct IObjectWithSiteVtbl;
struct IOleControlSiteVtbl;
struct IOleInPlaceSiteVtbl;
struct IOleInPlaceUIWindow;
struct IOleUndoManagerVtbl;
struct IPassportWizardVtbl;
struct IPersistFolder2Vtbl;
struct IPersistFolder3Vtbl;
struct IPersistMonikerVtbl;
struct IPersistPropertyBag;
struct IPersistStorageVtbl;
struct IPrintOemCommonVtbl;
struct IProcessInitControl;
struct IProfferServiceVtbl;
struct IProgressDialogVtbl;
struct IProgressNotifyVtbl;
struct IPropertyNotifySink;
struct IPropertySetStorage;
struct IReferenceClockVtbl;
struct IRemoteComputerVtbl;
struct IRpcProxyBufferVtbl;
struct IRpcSyntaxNegotiate;
struct IRunnableObjectVtbl;
struct IRunningObjectTable;
struct ISWbemLastErrorVtbl;
struct ISWbemMethodSetVtbl;
struct ISWbemNamedValueSet;
struct ISWbemObjectSetVtbl;
struct ISWbemPrivilegeVtbl;
struct ISWbemQualifierVtbl;
struct ISWbemRefresherVtbl;
struct ISearchAssistantOC2;
struct ISearchAssistantOC3;
struct IServerSecurityVtbl;
struct IShellDispatch2Vtbl;
struct IShellDispatch3Vtbl;
struct IShellDispatch4Vtbl;
struct IShellLinkDual2Vtbl;
struct IShellNameSpaceVtbl;
struct IShellTaskScheduler;
struct IStdMarshalInfoVtbl;
struct IThumbnailExtractor;
struct IURLSearchHook2Vtbl;
struct IUnsecuredApartment;
struct IUserEventTimerVtbl;
struct IWbemCallResultVtbl;
struct IWbemConnectorLogin;
struct IWbemHiPerfEnumVtbl;
struct IWbemHiPerfProvider;
struct IWbemObjectSinkVtbl;
struct IWbemStatusCodeText;
struct IWebWizardExtension;
struct IWindowForBindingUI;
struct IXMLDOMCDATASection;
struct IXMLDOMDocumentType;
struct IXMLDOMDocumentVtbl;
struct IXMLDOMNamedNodeMap;
struct IXMLDOMNodeListVtbl;
struct IXMLDOMNotationVtbl;
struct IXMLHttpRequestVtbl;
struct NDIS_BPC_DISCONNECT;
struct NDIS_BPC_LAST_ERROR;
struct QueryCancelAutoPlay;
struct ShellDispatchInproc;
struct TrayBandSiteService;
struct WINTRUST_BLOB_INFO_;
struct WINTRUST_CERT_INFO_;
struct WINTRUST_FILE_INFO_;
struct WINTRUST_SGNR_INFO_;
struct _ACCESS_ALLOWED_ACE;
struct _BDANODE_DESCRIPTOR;
struct _BIDI_RESPONSE_DATA;
struct _CERT_ALT_NAME_INFO;
struct _CERT_CHAIN_CONTEXT;
struct _CERT_CHAIN_ELEMENT;
struct _CERT_DH_PARAMETERS;
struct _CERT_POLICIES_INFO;
struct _CHANGER_SET_ACCESS;
union _CLIENT_CALL_RETURN;
struct _CMC_TAGGED_REQUEST;
struct _COMM_FAULT_OFFSETS;
struct _CONFIG_INFO_DATA_1;
struct _CRYPT_CONTENT_INFO;
struct _CRYPT_CSP_PROVIDER;
struct _CRYPT_PROVUI_FUNCS;
struct _D3DHAL_DP2LINELIST;
struct _D3DHAL_DP2SETLIGHT;
struct _D3DHAL_DP2STATESET;
struct _D3DLIGHTINGELEMENT;
struct _D3DNTDeviceDesc_V3;
struct _D3DNTHAL_CALLBACKS;
struct _D3DNTHAL_DP2POINTS;
struct _D3DNTHAL_DP2TEXBLT;
struct _D3DNTHAL_DP2ZRANGE;
struct _D3DPROCESSVERTICES;
struct _DDBOBNEXTFIELDINFO;
struct _DDMCCOMPBUFFERINFO;
struct _DDMOCOMPBUFFERINFO;
struct _DDNT_GETFORMATDATA;
struct _DDVIDEOPORTCONNECT;
struct _DD_CREATEVPORTDATA;
struct _DD_D3DBUFCALLBACKS;
struct _DD_GETSCANLINEDATA;
struct _DD_MORESURFACECAPS;
struct _DD_SETCLIPLISTDATA;
struct _DD_SETCOLORKEYDATA;
struct _DD_SYNCSURFACEDATA;
struct _DD_UPDATEVPORTDATA;
struct _DD_VIDEOPORT_LOCAL;
struct _DELETE_PORT_DATA_1;
struct _DEVQUERYPRINT_INFO;
struct _DISK_EX_INT13_INFO;
struct _DMUS_ARTICULATION2;
struct _DSCFXNoiseSuppress;
struct _ENUMERATION_BUFFER;
struct _EVENT_TRACE_HEADER;
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD32;
struct _EXCEPTION_RECORD64;
struct _FLOATING_SAVE_AREA;
struct _FOCUS_EVENT_RECORD;
struct _GETVERSIONINPARAMS;
struct _HIDD_CONFIGURATION;
struct _HIDP_UNKNOWN_TOKEN;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_THUNK_DATA32;
struct _IMAGE_THUNK_DATA64;
struct _KERB_EXTERNAL_NAME;
struct _KERB_NET_ADDRESSES;
struct _KS_DVDCOPY_CHLGKEY;
struct _KS_DVDCOPY_DISCKEY;
struct _LSA_TRANSLATED_SID;
struct _LSA_UNICODE_STRING;
struct _MALLOC_FREE_STRUCT;
struct _MCDLIGHTMODELSTATE;
struct _MIB_IPFORWARDTABLE;
struct _MIB_IPMCAST_GLOBAL;
struct _MIDL_FORMAT_STRING;
struct _MOUSE_EVENT_RECORD;
struct _NDIS_CO_LINK_SPEED;
struct _NDIS_VAR_DATA_DESC;
struct _NETWORK_ADDRESS_IP;
struct _OUTLINETEXTMETRICA;
struct _OUTLINETEXTMETRICW;
struct _PERF_COUNTER_BLOCK;
struct _PROCESS_HEAP_ENTRY;
struct _READCONTROLSPACE32;
struct _READCONTROLSPACE64;
struct _RPC_BINDING_VECTOR;
struct _RSVP_FILTERSPEC_V4;
struct _RSVP_FILTERSPEC_V6;
struct _SERVICE_ASYNC_INFO;
struct _SERVICE_TYPE_VALUE;
struct _SFVM_PROPPAGE_DATA;
struct _SID_AND_ATTRIBUTES;
struct _SPC_SP_AGENCY_INFO;
struct _SPC_STATEMENT_TYPE;
struct _SP_INF_INFORMATION;
struct _TOKEN_AUDIT_POLICY;
struct _TOKEN_DEFAULT_DACL;
struct _VERIFY_INFORMATION;
struct _WINDOWS_DEVICELIST;
struct _WSANAMESPACE_INFOA;
struct _WSANAMESPACE_INFOW;
struct _remoteMETAFILEPICT;
struct _userFLAG_STGMEDIUM;
struct adpcmwaveformat_tag;
struct midiproptimediv_tag;
struct midistrmbuffver_tag;
struct mpeg1waveformat_tag;
struct tagBITMAPCOREHEADER;
struct tagBITMAPFILEHEADER;
struct tagBITMAPINFOHEADER;
struct tagDELETEITEMSTRUCT;
struct tagEMRCREATEPALETTE;
struct tagEMROFFSETCLIPRGN;
struct tagEMRRESIZEPALETTE;
struct tagEMRSELECTPALETTE;
struct tagEMRSETCOLORSPACE;
struct tagEMRSETICMPROFILE;
struct tagEMRSETMITERLIMIT;
struct tagEMRSTRETCHDIBITS;
struct tagENUMLOGFONTEXDVA;
struct tagENUMLOGFONTEXDVW;
struct tagHW_PROFILE_INFOA;
struct tagHW_PROFILE_INFOW;
struct tagIMEMENUITEMINFOA;
struct tagIMEMENUITEMINFOW;
struct tagKS_VBIINFOHEADER;
struct tagMCI_RECORD_PARMS;
struct tagMCI_STATUS_PARMS;
struct tagMDICREATESTRUCTA;
struct tagMDICREATESTRUCTW;
struct tagMINIMIZEDMETRICS;
struct tagNEWTEXTMETRICEXA;
struct tagNEWTEXTMETRICEXW;
struct tagNMCUSTOMDRAWINFO;
struct tagNMDATETIMECHANGE;
struct tagNMREBARAUTOBREAK;
struct tagNMREBARCHILDSIZE;
struct tagOBJECTDESCRIPTOR;
struct tagRemHMETAFILEPICT;
struct tagVS_FIXEDFILEINFO;
struct tagWNODE_EVENT_ITEM;
struct tag_s_RIFFWAVE_INST;
struct tag_s_RIFFWAVE_inst;
struct wavefilter_echo_tag;
struct ANON_OBJECT_HEADER;
struct AsyncIPipeByteVtbl;
struct AsyncIPipeLongVtbl;
struct DD_KERNELCALLBACKS;
struct DWebBrowserEvents2;
struct DataSourceListener;
struct FolderItemVerbVtbl;
struct IAVIEditStreamVtbl;
struct IAccPropServerVtbl;
struct IAccessibleHandler;
struct IAutoComplete2Vtbl;
struct ICancelMethodCalls;
struct IClassFactory2Vtbl;
struct ICreateTypeLibVtbl;
struct IDefViewSafetyVtbl;
struct IDeskBarClientVtbl;
struct IDirect3DResource8;
struct IDirectDrawClipper;
struct IDirectDrawPalette;
struct IDirectDrawSurface;
struct IDirectMusicBuffer;
struct IDirectSoundBuffer;
struct IDirectSoundFXEcho;
struct IDirectSoundNotify;
struct IDockingWindowSite;
struct IDockingWindowVtbl;
struct IEnumFORMATETCVtbl;
struct IExtractImage2Vtbl;
struct IFillLockBytesVtbl;
struct IHttpNegotiateVtbl;
struct IInitializeSpyVtbl;
struct IKsPropertySetVtbl;
struct ILayoutStorageVtbl;
struct IMAGE_COR20_HEADER;
struct IMessageFilterVtbl;
struct INamespaceWalkVtbl;
struct IOleClientSiteVtbl;
struct IOleParentUndoUnit;
struct IOplockStorageVtbl;
struct IPersistFolderVtbl;
struct IPersistIDListVtbl;
struct IPersistMemoryVtbl;
struct IPersistStreamInit;
struct IPersistStreamVtbl;
struct IPropertyPage2Vtbl;
struct IProvideClassInfo2;
struct IQueryAssociations;
struct IQueryContinueVtbl;
struct IQuickActivateVtbl;
struct IRpcChannelBuffer2;
struct IRpcChannelBuffer3;
struct IRpcStubBufferVtbl;
struct ISWbemDateTimeVtbl;
struct ISWbemObjectExVtbl;
struct ISWbemPrivilegeSet;
struct ISWbemPropertyVtbl;
struct ISWbemQualifierSet;
struct ISWbemSecurityVtbl;
struct ISWbemServicesVtbl;
struct ISearchAssistantOC;
struct ISearchContextVtbl;
struct IShellChangeNotify;
struct IShellDispatchVtbl;
struct IShellExecuteHookA;
struct IShellExecuteHookW;
struct IShellFolderViewCB;
struct IShellLinkDataList;
struct IShellLinkDualVtbl;
struct IShellMenuCallback;
struct IShellPropSheetExt;
struct IShellUIHelperVtbl;
struct ISynchronizeHandle;
struct IURLSearchHookVtbl;
struct IVariantChangeType;
struct IWbemBackupRestore;
struct IWbemEventProvider;
struct IWbemEventSinkVtbl;
struct IWbemObjectTextSrc;
struct IWbemRefresherVtbl;
struct IWbemTransportVtbl;
struct IWebBrowserAppVtbl;
struct IWebWizardHostVtbl;
struct IWinInetFileStream;
struct IXMLDOMCommentVtbl;
struct IXMLDOMElementVtbl;
struct IXMLDSOControlVtbl;
struct SWbemNamedValueSet;
struct ShellBrowserWindow;
struct UnsecuredApartment;
struct WbemStatusCodeText;
struct _ACCESS_DENIED_ACE;
struct _AD_GENERAL_PARAMS;
struct _BDA_TABLE_SECTION;
struct _BIDI_REQUEST_DATA;
struct _CERT_REQUEST_INFO;
struct _CERT_SIMPLE_CHAIN;
struct _CERT_TEMPLATE_EXT;
struct _CERT_TRUST_STATUS;
struct _CMC_RESPONSE_INFO;
struct _CMSG_RC2_AUX_INFO;
struct _CMSG_RC4_AUX_INFO;
struct _CONNECTDLGSTRUCTA;
struct _CONNECTDLGSTRUCTW;
struct _CONSOLE_FONT_INFO;
struct _CRYPT_CREDENTIALS;
struct _CRYPT_DECODE_PARA;
struct _CRYPT_ENCODE_PARA;
struct _CRYPT_OBJID_TABLE;
struct _CRYPT_PROVUI_DATA;
struct _D3DHAL_CALLBACKS2;
struct _D3DHAL_CALLBACKS3;
struct _D3DHAL_CLEAR2DATA;
struct _D3DHAL_DP2COMMAND;
struct _D3DMATRIXMULTIPLY;
struct _D3DNTHAL_DP2CLEAR;
struct _D3DNTHAL_DP2WINFO;
struct _D3DRECTPATCH_INFO;
struct _DATATYPES_INFO_1A;
struct _DATATYPES_INFO_1W;
struct _DDFLIPOVERLAYINFO;
struct _DDHAL_DDCALLBACKS;
struct _DDHAL_SETMODEDATA;
struct _DDMORESURFACECAPS;
struct _DDSETSTATEOUTINFO;
struct _DDTRANSFEROUTINFO;
struct _DDVIDEOPORTNOTIFY;
struct _DDVIDEOPORTSTATUS;
struct _DD_CLIPPER_GLOBAL;
struct _DD_PALETTE_GLOBAL;
struct _DD_SETENTRIESDATA;
struct _DD_SETPALETTEDATA;
struct _DD_SURFACE_GLOBAL;
struct _DD_VPORTCOLORDATA;
struct _DEVICE_MEDIA_INFO;
struct _DMUS_ARTICULATION;
struct _DMUS_DOWNLOADINFO;
struct _DSBPOSITIONNOTIFY;
struct _ENCRYPTION_BUFFER;
struct _FLAGGED_BYTE_BLOB;
struct _FLAGGED_WORD_BLOB;
struct _FORMAT_PARAMETERS;
struct _GEN_GET_TIME_CAPS;
struct _GET_EXPRESSION_EX;
struct _GLYPHMETRICSFLOAT;
struct _GRADIENT_TRIANGLE;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_ROM_HEADERS;
struct _IP_ADAPTER_PREFIX;
struct _IP_INTERFACE_INFO;
struct _KDDEBUGGER_DATA32;
struct _KDDEBUGGER_DATA64;
struct _KERB_TICKET_LOGON;
struct _KS_DVDCOPY_BUSKEY;
struct _KS_DVDCOPY_REGION;
struct _MCDALPHATESTSTATE;
struct _MCDDEPTHTESTSTATE;
struct _MCDPOINTDRAWSTATE;
struct _MENU_EVENT_RECORD;
struct _MIB_IPMCAST_SCOPE;
struct _MIDL_SERVER_INFO_;
struct _MIDL_STUB_MESSAGE;
struct _MPR_IFTRANSPORT_0;
struct _MSV1_0_LM20_LOGON;
struct _NABTS_BUFFER_LINE;
struct _OEM_DMEXTRAHEADER;
struct _OFFLOAD_ALGO_INFO;
struct _PRINTER_DEFAULTSA;
struct _PRINTER_DEFAULTSW;
struct _PROPSHEETPAGEA_V1;
struct _PROPSHEETPAGEA_V2;
struct _PROPSHEETPAGEW_V1;
struct _PROPSHEETPAGEW_V2;
struct _QOS_DIFFSERV_RULE;
struct _QOS_FRIENDLY_NAME;
struct _QOS_TRAFFIC_CLASS;
struct _RASTERIZER_STATUS;
struct _REMOTE_NAME_INFOA;
struct _REMOTE_NAME_INFOW;
struct _RSVP_RESERVE_INFO;
struct _SERVICE_ADDRESSES;
struct _SERVICE_TYPE_INFO;
struct _SHELLEXECUTEINFOA;
struct _SHELLEXECUTEINFOW;
struct _SINGLE_LIST_ENTRY;
struct _SPC_PE_IMAGE_DATA;
struct _TAPE_GET_POSITION;
struct _TAPE_SET_POSITION;
struct _TC_IFC_DESCRIPTOR;
struct _UFF_FONTDIRECTORY;
struct _VK_FUNCTION_PARAM;
struct _VK_TO_WCHAR_TABLE;
struct _WINDOWS_IAS_QUERY;
struct _WSAPROTOCOL_INFOA;
struct _WSAPROTOCOL_INFOW;
struct _tagEDITBALLOONTIP;
struct _userHMETAFILEPICT;
struct aptxwaveformat_tag;
struct tACMDRIVERDETAILSA;
struct tACMDRIVERDETAILSW;
struct tACMFILTERDETAILSA;
struct tACMFILTERDETAILSW;
struct tACMFORMATDETAILSA;
struct tACMFORMATDETAILSW;
struct tagAASHELLMENUITEM;
struct tagCOLORADJUSTMENT;
struct tagCOMBOBOXEXITEMA;
struct tagCOMBOBOXEXITEMW;
struct tagCOMPOSITIONFORM;
struct tagDATABLOCKHEADER;
struct tagEMREXTCREATEPEN;
struct tagEMREXTFLOODFILL;
struct tagEMRGRADIENTFILL;
struct tagEMRPOLYPOLYLINE;
struct tagEMRPOLYTEXTOUTA;
struct tagEMRSELECTOBJECT;
struct tagEMRSETTEXTCOLOR;
struct tagENUMTEXTMETRICA;
struct tagENUMTEXTMETRICW;
struct tagHH_SET_INFOTYPE;
struct tagIMECHARPOSITION;
struct tagKBDLLHOOKSTRUCT;
struct tagKS_AMVPDATAINFO;
struct tagKS_MPEAUDIOINFO;
struct tagLOCALESIGNATURE;
struct tagMCI_BREAK_PARMS;
struct tagMCI_INFO_PARMSA;
struct tagMCI_INFO_PARMSW;
struct tagMCI_LOAD_PARMSA;
struct tagMCI_LOAD_PARMSW;
struct tagMCI_OPEN_PARMSA;
struct tagMCI_OPEN_PARMSW;
struct tagMCI_SAVE_PARMSA;
struct tagMCI_SAVE_PARMSW;
struct tagMOUSEHOOKSTRUCT;
struct tagNMLVGETINFOTIPA;
struct tagNMLVGETINFOTIPW;
struct tagNMTBGETINFOTIPA;
struct tagNMTBGETINFOTIPW;
struct tagNMTVGETINFOTIPA;
struct tagNMTVGETINFOTIPW;
struct tagRASCOMMSETTINGS;
struct tagRASCREDENTIALSA;
struct tagRASCREDENTIALSW;
struct tagRECONVERTSTRING;
struct tagRID_DEVICE_INFO;
struct tagRemHENHMETAFILE;
struct tagTRACKMOUSEEVENT;
struct tagTTPOLYGONHEADER;
struct tagTVINSERTSTRUCTA;
struct tagTVINSERTSTRUCTW;
struct tagUSEROBJECTFLAGS;
struct tagVersionedStream;
struct tagWINDOWPLACEMENT;
struct tagWNODE_TOO_SMALL;
struct AsyncIAdviseSink2;
struct AsyncIMultiQIVtbl;
struct AsyncIUnknownVtbl;
struct DWebBrowserEvents;
struct IAVIStreamingVtbl;
struct IAdviseSinkExVtbl;
struct IAsyncManagerVtbl;
struct IAuthenticateVtbl;
struct IAutoCompleteVtbl;
struct IBindProtocolVtbl;
struct IBlockingLockVtbl;
struct ICategoryProvider;
struct IClassFactoryVtbl;
struct IComThreadingInfo;
struct IContextMenu2Vtbl;
struct IContextMenu3Vtbl;
struct IContinueCallback;
struct IDataAdviseHolder;
struct IDefViewFrameVtbl;
struct IDirect3DSurface8;
struct IDirect3DTexture8;
struct IDirectDrawKernel;
struct IDirectMusic8Vtbl;
struct IDirectSound8Vtbl;
struct IDirectWriterLock;
struct IDragSourceHelper;
struct IDropTargetHelper;
struct IEnumACStringVtbl;
struct IEnumCATEGORYINFO;
struct IEnumContextProps;
struct IEnumOleUndoUnits;
struct IEnumSTATDATAVtbl;
struct IExtractIconAVtbl;
struct IExtractIconWVtbl;
struct IExtractImageVtbl;
struct IFolderFilterSite;
struct IFolderFilterVtbl;
struct IFolderViewOCVtbl;
struct IHttpSecurityVtbl;
struct IInitializeObject;
struct IInternetBindInfo;
struct IInternetPriority;
struct IInternetProtocol;
struct INamedPropertyBag;
struct INewShortcutHookA;
struct INewShortcutHookW;
struct IObjectSafetyVtbl;
struct IOleCommandTarget;
struct IOleContainerVtbl;
struct IOleInPlaceObject;
struct IOleInPlaceSiteEx;
struct IOleItemContainer;
struct IParseDisplayName;
struct IPrintCoreUI2Vtbl;
struct IPrintOemDriverUI;
struct IPropertyBag2Vtbl;
struct IPropertyPageSite;
struct IPropertyPageVtbl;
struct IProvideClassInfo;
struct IPublishingWizard;
struct IResolveShellLink;
struct IRpcChannelBuffer;
struct IRunnableTaskVtbl;
struct ISWbemEventSource;
struct ISWbemLocatorVtbl;
struct ISWbemPropertySet;
struct ISearchCommandExt;
struct ISequentialStream;
struct IShellBrowserVtbl;
struct IShellDetailsVtbl;
struct IShellExtInitVtbl;
struct IShellFolder2Vtbl;
struct IShellIconOverlay;
struct IShellWindowsVtbl;
struct ISupportErrorInfo;
struct ISurrogateService;
struct ISynchronizeEvent;
struct ISynchronizeMutex;
struct ITaskbarList2Vtbl;
struct IThumbnailCapture;
struct ITypeChangeEvents;
struct IUserNotification;
struct IViewObjectExVtbl;
struct IWaitMultipleVtbl;
struct IWbemObjectAccess;
struct IWbemProviderInit;
struct IWbemQualifierSet;
struct IWbemServicesVtbl;
struct IWbemShutdownVtbl;
struct IXMLAttributeVtbl;
struct IXMLDOMEntityVtbl;
struct IXMLDOMParseError;
struct IXMLDocument2Vtbl;
struct MergedCategorizer;
struct PublishDropTarget;
struct SWbemPrivilegeSet;
struct SWbemQualifierSet;
struct SearchAssistantOC;
struct ShellFolderViewOC;
struct WbemBackupRestore;
struct WbemDCOMTransport;
struct WbemObjectTextSrc;
struct _ATTRIBUTE_INFO_1;
struct _ATTRIBUTE_INFO_2;
struct _ATTRIBUTE_INFO_3;
struct _BDA_CA_MODULE_UI;
struct _BDA_IPv4_ADDRESS;
struct _BDA_IPv6_ADDRESS;
struct _BINARY_CONTAINER;
struct _CERTIFICATE_BLOB;
struct _CERT_KEY_CONTEXT;
struct _CERT_POLICY_INFO;
struct _CERT_USAGE_MATCH;
struct _CMSG_SIGNER_INFO;
struct _CMSG_STREAM_INFO;
struct _CRYPT_ATTRIBUTES;
struct _CRYPT_BLOB_ARRAY;
struct _D3DDeviceDesc_V1;
struct _D3DDeviceDesc_V2;
struct _D3DDeviceDesc_V3;
struct _D3DHAL_CALLBACKS;
struct _D3DHAL_CLEARDATA;
struct _D3DHAL_DP2POINTS;
struct _D3DHAL_DP2TEXBLT;
struct _D3DHAL_DP2ZRANGE;
struct _D3DRASTER_STATUS;
struct _D3DTRANSFORMCAPS;
struct _D3DTRANSFORMDATA;
struct _D3DTRIPATCH_INFO;
struct _DDCOMPBUFFERINFO;
struct _DDHAL_UNLOCKDATA;
struct _DDOPTSURFACEDESC;
struct _DDSETSTATEININFO;
struct _DDTRANSFERININFO;
struct _DD_CLIPPER_LOCAL;
struct _DD_FLIPVPORTDATA;
struct _DD_GETFORMATDATA;
struct _DD_MAPMEMORYDATA;
struct _DD_PALETTE_LOCAL;
struct _DD_SURFACE_LOCAL;
struct _DISK_GEOMETRY_EX;
struct _DISK_PERFORMANCE;
struct _DMUS_ARTICPARAMS;
struct _DMUS_EVENTHEADER;
struct _DMUS_OFFSETTABLE;
struct _DMUS_PORTPARAMS8;
struct _DMUS_SYNTHSTATS8;
struct _ENGSAFESEMAPHORE;
struct _EVENTSFORLOGFILE;
struct _EXCEPTION_RECORD;
struct _FD_DEVICEMETRICS;
struct _FIND_NAME_BUFFER;
struct _FIND_NAME_HEADER;
struct _HIDP_BUTTON_CAPS;
struct _HISTOGRAM_BUCKET;
union _IMAGE_AUX_SYMBOL;
struct _IMAGE_DEBUG_MISC;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_LINENUMBER;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_OS2_HEADER;
struct _IMAGE_RELOCATION;
struct _IMAGE_VXD_HEADER;
struct _KERB_NET_ADDRESS;
struct _KEY_EVENT_RECORD;
struct _KEY_TYPE_SUBTYPE;
struct _KSM_BDA_PIN_PAIR;
struct _KSPROPERTY_SPHLI;
struct _KSPROPERTY_SPPAL;
struct _KSP_BDA_NODE_PIN;
struct _MCDFRAMEBUFSTATE;
struct _MCDLINEDRAWSTATE;
struct _MCDPIXELTRANSFER;
struct _MCDPOLYDRAWSTATE;
struct _MIB_IPFORWARDROW;
struct _MIB_OPAQUE_QUERY;
struct _MIDL_SYNTAX_INFO;
struct _NDIS_802_11_SSID;
struct _NDIS_BPC_DEVICES;
struct _NDR_PROC_CONTEXT;
struct _NS_SERVICE_INFOA;
struct _NS_SERVICE_INFOW;
struct _OBJECT_TYPE_LIST;
struct _OEMFONTINSTPARAM;
struct _OSVERSIONINFOEXA;
struct _OSVERSIONINFOEXW;
struct _PERF_OBJECT_TYPE;
struct _PIPE_TERMINATION;
struct _PROPSHEETHEADERA;
struct _PROPSHEETHEADERW;
struct _PROPSHEETUI_INFO;
struct _PROVIDOR_INFO_1A;
struct _PROVIDOR_INFO_1W;
struct _PROVIDOR_INFO_2A;
struct _PROVIDOR_INFO_2W;
struct _PROV_ENUMALGS_EX;
struct _PSFEATURE_OUTPUT;
struct _QOS_SHAPING_RATE;
struct _QualityOfService;
struct _RAS_CONNECTION_0;
struct _RAS_CONNECTION_1;
struct _READCONTROLSPACE;
struct _RPC_SECURITY_QOS;
struct _RSVP_POLICY_INFO;
struct _RSVP_STATUS_INFO;
struct _SCARD_IO_REQUEST;
struct _SENDCMDOUTPARAMS;
struct _SPC_SP_OPUS_INFO;
struct _SPLCLIENT_INFO_1;
struct _SPLCLIENT_INFO_2;
struct _SURFACEALIGNMENT;
struct _SYSTEM_ALARM_ACE;
struct _SYSTEM_AUDIT_ACE;
struct _TAPE_WRITE_MARKS;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_STATISTICS;
struct _UNI_CODEPAGEINFO;
struct _UNI_GLYPHSETDATA;
struct _WIN32_FIND_DATAA;
struct _WIN32_FIND_DATAW;
struct _WSANETWORKEVENTS;
struct _WSAPROTOCOLCHAIN;
struct __MCDTEXTURESTATE;
struct _userHENHMETAFILE;
struct _wireSAFEARR_BSTR;
struct drmwaveformat_tag;
struct midiproptempo_tag;
struct pcmwaveformat_tag;
struct tACMFILTERCHOOSEA;
struct tACMFILTERCHOOSEW;
struct tACMFORMATCHOOSEA;
struct tACMFORMATCHOOSEW;
struct tagAAMENUFILENAME;
struct tagBITMAPCOREINFO;
struct tagCBT_CREATEWNDA;
struct tagCBT_CREATEWNDW;
struct tagCOPYDATASTRUCT;
struct tagCStdStubBuffer;
struct tagDELEGATEITEMID;
struct tagDRAWITEMSTRUCT;
struct tagDRAWTEXTPARAMS;
struct tagDVTARGETDEVICE;
struct tagEMREXTTEXTOUTA;
struct tagEMRNAMEDESCAPE;
struct tagEMRPIXELFORMAT;
struct tagENUMLOGFONTEXA;
struct tagENUMLOGFONTEXW;
struct tagEXBMINFOHEADER;
struct tagFLOATOBJ_XFORM;
struct tagJPEGINFOHEADER;
struct tagKBDTABLE_MULTI;
struct tagKS_AMVPDIMINFO;
struct tagLOGCOLORSPACEA;
struct tagLOGCOLORSPACEW;
struct tagLVGROUPMETRICS;
struct tagLVTILEVIEWINFO;
struct tagMCI_PLAY_PARMS;
struct tagMCI_SEEK_PARMS;
struct tagMONITORINFOEXA;
struct tagMONITORINFOEXW;
struct tagMOUSEMOVEPOINT;
struct tagMSLLHOOKSTRUCT;
struct tagNEWTEXTMETRICA;
struct tagNEWTEXTMETRICW;
struct tagNMITEMACTIVATE;
struct tagNMLVCUSTOMDRAW;
struct tagNMOBJECTNOTIFY;
struct tagNMREBARCHEVRON;
struct tagNMTTCUSTOMDRAW;
struct tagNMTVCUSTOMDRAW;
struct tagPRINTPAGERANGE;
struct tagRASCONNSTATUSA;
struct tagRASCONNSTATUSW;
struct tagRASDIALPARAMSA;
struct tagRASDIALPARAMSW;
struct tagRAWINPUTDEVICE;
struct tagRAWINPUTHEADER;
struct tagREBARBANDINFOA;
struct tagREBARBANDINFOW;
struct tagSAFEARRAYBOUND;
struct tagSTATPROPSETSTG;
struct tagWNODE_ALL_DATA;
struct AsyncIAdviseSink;
struct AsyncIPipeDouble;
struct CAccPropServices;
struct CScriptErrorList;
struct DFConstraintVtbl;
struct FolderItems2Vtbl;
struct FolderItems3Vtbl;
struct IAccIdentityVtbl;
struct IAccPropServices;
struct IAdviseSink2Vtbl;
struct IBanneredBarVtbl;
struct ICallFactoryVtbl;
struct ICatRegisterVtbl;
struct ICatalogFileInfo;
struct ICategorizerVtbl;
struct IChannelHookVtbl;
struct ICodeInstallVtbl;
struct ICommDlgBrowser2;
struct IConnectionPoint;
struct IContextMenuSite;
struct IContextMenuVtbl;
struct ICreateErrorInfo;
struct ICreateTypeInfo2;
struct IDirect3DDevice8;
struct IDirect3DVolume8;
struct IDirectDraw2Vtbl;
struct IDirectDraw4Vtbl;
struct IDirectDraw7Vtbl;
struct IDirectMusicPort;
struct IDirectMusicThru;
struct IDirectMusicVtbl;
struct IDirectSoundVtbl;
struct IDocViewSiteVtbl;
struct IEnumConnections;
struct IEnumExtraSearch;
struct IEnumMonikerVtbl;
struct IEnumOLEVERBVtbl;
struct IEnumSTATPROPSTG;
struct IEnumSTATSTGVtbl;
struct IEnumUnknownVtbl;
struct IEnumVARIANTVtbl;
struct IFileViewerAVtbl;
struct IFileViewerWVtbl;
struct IImageRecompress;
struct IInputObjectSite;
struct IInputObjectVtbl;
struct IInternalUnknown;
struct IInternetSession;
struct IModalWindowVtbl;
struct IMofCompilerVtbl;
struct IMonikerPropVtbl;
struct INamespaceWalkCB;
struct INewWDEventsVtbl;
struct IOleAdviseHolder;
struct IOleCacheControl;
struct IOleDocumentSite;
struct IOleDocumentView;
struct IOleDocumentVtbl;
struct IOleInPlaceFrame;
struct IOleUndoUnitVtbl;
struct IPSFactoryBuffer;
struct IPersistFileVtbl;
struct IPictureDispVtbl;
struct IPointerInactive;
struct IPrintOemUI2Vtbl;
struct IProcessLockVtbl;
struct IPropertyBagVtbl;
struct IPropertyStorage;
struct IRegTreeItemVtbl;
struct IRootStorageVtbl;
struct ISWbemMethodVtbl;
struct ISWbemNamedValue;
struct ISWbemObjectPath;
struct ISWbemObjectVtbl;
struct ISWbemServicesEx;
struct ISWbemSinkEvents;
struct IScriptErrorList;
struct IServiceProvider;
struct IShellFolderBand;
struct IShellFolderVtbl;
struct IShellImageStore;
struct ISimpleFrameSite;
struct ISoftDistExtVtbl;
struct ISynchronizeVtbl;
struct ITaskbarListVtbl;
struct ITypeFactoryVtbl;
struct ITypeMarshalVtbl;
struct IViewObject2Vtbl;
struct IWbemClassObject;
struct IWbemContextVtbl;
struct IWbemLevel1Login;
struct IWbemLocatorVtbl;
struct IWebBrowser2Vtbl;
struct IWinInetHttpInfo;
struct IWinInetInfoVtbl;
struct IWizardExtension;
struct IWrappedProtocol;
struct IXMLDOMAttribute;
struct IXMLDocumentVtbl;
struct IXMLElement2Vtbl;
struct InternetExplorer;
struct NDIS_BPC_CONNECT;
struct PublishingWizard;
struct SWbemEventSource;
struct SWbemPropertySet;
struct UserNotification;
struct WbemLocalAddrRes;
struct _CERT_CHAIN_PARA;
struct _CERT_EXTENSIONS;
struct _CERT_NAME_VALUE;
struct _CERT_OTHER_NAME;
struct _CHANGER_ELEMENT;
struct _CMC_STATUS_INFO;
struct _CMS_DH_KEY_INFO;
struct _CONTROL_SERVICE;
struct _CREATE_DISK_GPT;
struct _CREATE_DISK_MBR;
struct _CRYPT_ATTRIBUTE;
struct _CRYPT_HASH_INFO;
struct _CRYPT_URL_ARRAY;
struct _CTL_USAGE_MATCH;
struct _CUSTOMSIZEPARAM;
struct _D3DDP_PTRSTRIDE;
struct _D3DHAL_DP2CLEAR;
struct _D3DHAL_DP2WINFO;
struct _D3DLIGHTINGCAPS;
struct _D3DNTHAL_DP2EXT;
struct _D3DSURFACE_DESC;
struct _DDENABLEIRQINFO;
struct _DDHAL_CALLBACKS;
struct _DDVIDEOPORTCAPS;
struct _DDVIDEOPORTDESC;
struct _DDVIDEOPORTINFO;
struct _DD_SURFACE_MORE;
struct _DISK_INT13_INFO;
struct _DISPLAY_DEVICEA;
struct _DISPLAY_DEVICEW;
struct _DLLVERSIONINFO2;
struct _DMUS_BUFFERDESC;
struct _DMUS_CLOCKINFO7;
struct _DMUS_CLOCKINFO8;
struct _DMUS_INSTRUMENT;
struct _DMUS_PORTPARAMS;
struct _DMUS_SYNTHSTATS;
struct _DOCEVENT_ESCAPE;
struct _DOCEVENT_FILTER;
struct _DSFXI3DL2Reverb;
struct _DSFXWavesReverb;
struct _DSKTLSYSTEMTIME;
struct _DXAPI_INTERFACE;
struct _ENG_TIME_FIELDS;
struct _EXTSTACKTRACE32;
struct _EXTSTACKTRACE64;
struct _FILEDESCRIPTORA;
struct _FILEDESCRIPTORW;
struct _GENERIC_MAPPING;
struct _GET_MEDIA_TYPES;
struct _GET_PEB_ADDRESS;
struct _GET_SET_SYMPATH;
struct _GET_TEB_ADDRESS;
struct _HIDD_ATTRIBUTES;
struct _HIDP_VALUE_CAPS;
struct _IP_ADAPTER_INFO;
struct _MCDLOGICOPSTATE;
struct _MCDSTATE_PREFIX;
struct _MCDSTATE_RENDER;
struct _MCDSTATE_TEXENV;
struct _MIBICMPSTATS_EX;
struct _MIB_IPADDRTABLE;
struct _MIB_IPDESTTABLE;
struct _MIB_IPMCAST_MFE;
struct _MIB_IPMCAST_OIF;
struct _MIB_OPAQUE_INFO;
struct _MONITOR_INFO_1A;
struct _MONITOR_INFO_1W;
struct _MONITOR_INFO_2A;
struct _MONITOR_INFO_2W;
struct _MPR_INTERFACE_0;
struct _MPR_TRANSPORT_0;
struct _NABTSFEC_BUFFER;
struct _NDIS_802_11_WEP;
struct _NDIS_WLAN_BSSID;
struct _NDR_CS_ROUTINES;
struct _NETWORK_ADDRESS;
struct _NOTIFYICONDATAA;
struct _NOTIFYICONDATAW;
struct _NTFS_STATISTICS;
struct _PACKEDEVENTINFO;
struct _PATHNAME_BUFFER;
struct _PERF_DATA_BLOCK;
struct _PIPE_DIMENSIONS;
struct _PRINTER_INFO_1A;
struct _PRINTER_INFO_1W;
struct _PRINTER_INFO_2A;
struct _PRINTER_INFO_2W;
struct _PRINTER_INFO_4A;
struct _PRINTER_INFO_4W;
struct _PRINTER_INFO_5A;
struct _PRINTER_INFO_5W;
struct _PRINTER_INFO_7A;
struct _PRINTER_INFO_7W;
struct _PRINTER_INFO_8A;
struct _PRINTER_INFO_8W;
struct _PRINTER_INFO_9A;
struct _PRINTER_INFO_9W;
struct _QOS_TCP_TRAFFIC;
struct _QUOTA_LIMITS_EX;
struct _REASSIGN_BLOCKS;
struct _RPC_ASYNC_STATE;
struct _RSVP_FILTERSPEC;
struct _RemotableHandle;
struct _SENDCMDINPARAMS;
struct _SERVICE_ADDRESS;
struct _SHDESCRIPTIONID;
struct _SHFILEOPSTRUCTA;
struct _SHFILEOPSTRUCTW;
struct _SIMULATE_CAPS_1;
struct _SP_DEVINFO_DATA;
struct _TAPE_STATISTICS;
struct _TT_HITTESTINFOA;
struct _TT_HITTESTINFOW;
struct _USER_MARSHAL_CB;
struct _VIDEOMEMORYINFO;
struct _VIDEOPARAMETERS;
struct _WIN32_STREAM_ID;
struct _WINDOWS_IAS_SET;
struct _WIN_CERTIFICATE;
struct _WSANSClassInfoA;
struct _WSANSClassInfoW;
struct _WST_BUFFER_LINE;
struct __MCDMIPMAPLEVEL;
struct __MCDTEXTUREDATA;
struct _tagCODEBASEHOLD;
struct _tagPROTOCOLDATA;
struct _tagSOFTDISTINFO;
struct channel_caps_tag;
struct sockaddr_storage;
struct tACMSTREAMHEADER;
struct tagACCESSTIMEOUT;
struct tagANIMATIONINFO;
struct tagCANDIDATEFORM;
struct tagCANDIDATEINFO;
struct tagCANDIDATELIST;
struct tagCAPROPVARIANT;
struct tagCREATESTRUCTA;
struct tagCREATESTRUCTW;
struct tagCapDriverCaps;
struct tagDEBUGHOOKINFO;
struct tagDRVCONFIGINFO;
struct tagDRVENABLEDATA;
struct tagEMRALPHABLEND;
struct tagEMRGDICOMMENT;
struct tagEMRPOLYDRAW16;
struct tagEMRPOLYLINE16;
struct tagEMRSTRETCHBLT;
struct tagENHMETAHEADER;
struct tagENHMETARECORD;
struct tagFONTSIGNATURE;
struct tagGUITHREADINFO;
struct tagHARDWAREINPUT;
struct tagHIGHCONTRASTA;
struct tagHIGHCONTRASTW;
struct tagINTERFACEDATA;
struct tagINTERFACEINFO;
struct tagKBDTABLE_DESC;
struct tagKBD_TYPE_INFO;
struct tagKS_FRAME_INFO;
struct tagLASTINPUTINFO;
struct tagLVHITTESTINFO;
struct tagMCI_SET_PARMS;
struct tagMENUITEMINFOA;
struct tagMENUITEMINFOW;
struct tagMIDIOUTCAPS2A;
struct tagMIDIOUTCAPS2W;
struct tagMIXERCONTROLA;
struct tagMIXERCONTROLW;
struct tagMONCONVSTRUCT;
struct tagMONHSZSTRUCTA;
struct tagMONHSZSTRUCTW;
struct tagMONLINKSTRUCT;
struct tagMSGBOXPARAMSA;
struct tagMSGBOXPARAMSW;
struct tagMULTIKEYHELPA;
struct tagMULTIKEYHELPW;
struct tagNMHDDISPINFOA;
struct tagNMHDDISPINFOW;
struct tagNMLVCACHEHINT;
struct tagNMLVFINDITEMA;
struct tagNMLVFINDITEMW;
struct tagNMTTDISPINFOA;
struct tagNMTTDISPINFOW;
struct tagProxyFileInfo;
struct tagRASENTRYNAMEA;
struct tagRASENTRYNAMEW;
struct tagREGISTERWORDA;
struct tagREGISTERWORDW;
struct tagRPCOLEMESSAGE;
struct tagSCROLLBARINFO;
struct tagStorageLayout;
struct tagTBSAVEPARAMSA;
struct tagTBSAVEPARAMSW;
struct tagTCHITTESTINFO;
struct tagTCITEMHEADERA;
struct tagTCITEMHEADERW;
struct tagTVHITTESTINFO;
struct tagWAVEOUTCAPS2A;
struct tagWAVEOUTCAPS2W;
struct CM_Power_Data_s;
struct DDVIDEOPORTDATA;
struct DRVCONFIGINFOEX;
struct EXT_API_VERSION;
struct FolderItem2Vtbl;
struct FolderItemVerbs;
struct FolderItemsVtbl;
struct HWINEVENTHOOK__;
struct IAccessibleVtbl;
struct IActionProgress;
struct IAdviseSinkVtbl;
struct IAsyncOperation;
struct ICatInformation;
struct IClassActivator;
struct IClientSecurity;
struct IColumnProvider;
struct ICommDlgBrowser;
struct ICreateTypeInfo;
struct ICreateTypeLib2;
struct IDataFilterVtbl;
struct IDataObjectVtbl;
struct IDelegateFolder;
struct IDirectDrawVtbl;
struct IDispatchExVtbl;
struct IDropSourceVtbl;
struct IDropTargetVtbl;
struct IEnumIDListVtbl;
struct IEnumStringVtbl;
struct IFileSearchBand;
struct IFileViewerSite;
struct IFolderBandPriv;
struct IFolderViewHost;
struct IFolderViewVtbl;
struct IFontEventsDisp;
struct IHWEventHandler;
struct IHttpNegotiate2;
struct IInsertItemVtbl;
struct IItemNameLimits;
struct IKsTopologyVtbl;
struct INetCrawlerVtbl;
struct IObjectIdentity;
struct IObjectWithSite;
struct IOleControlSite;
struct IOleControlVtbl;
struct IOleInPlaceSite;
struct IOleUndoManager;
struct IPassportWizard;
struct IPersistFolder2;
struct IPersistFolder3;
struct IPersistMoniker;
struct IPersistStorage;
struct IPipeDoubleVtbl;
struct IPrintOemCommon;
struct IPrintOemUIVtbl;
struct IProfferService;
struct IProgressDialog;
struct IProgressNotify;
struct IPropertyUIVtbl;
struct IRecordInfoVtbl;
struct IReferenceClock;
struct IRemoteComputer;
struct IRpcOptionsVtbl;
struct IRpcProxyBuffer;
struct IRunnableObject;
struct ISWbemLastError;
struct ISWbemMethodSet;
struct ISWbemObjectSet;
struct ISWbemPrivilege;
struct ISWbemQualifier;
struct ISWbemRefresher;
struct IServerSecurity;
struct IShellDispatch2;
struct IShellDispatch3;
struct IShellDispatch4;
struct IShellLinkAVtbl;
struct IShellLinkDual2;
struct IShellLinkWVtbl;
struct IShellNameSpace;
struct IShellView2Vtbl;
struct IStdMarshalInfo;
struct IURLSearchHook2;
struct IUserEventTimer;
struct IViewObjectVtbl;
struct IWbemCallResult;
struct IWbemHiPerfEnum;
struct IWbemObjectSink;
struct IWebBrowserVtbl;
struct IWizardSiteVtbl;
struct IXMLDOMDocument;
struct IXMLDOMNodeList;
struct IXMLDOMNodeVtbl;
struct IXMLDOMNotation;
struct IXMLDOMTextVtbl;
struct IXMLElementVtbl;
struct IXMLHttpRequest;
struct IXTLRuntimeVtbl;
struct ImageProperties;
struct ImageRecompress;
struct KERB_CRYPTO_KEY;
struct NDIS_BPC_COMMIT;
struct NDIS_BPC_STATUS;
struct NamespaceWalker;
struct SWbemNamedValue;
struct SWbemObjectPath;
struct SWbemServicesEx;
struct ShellFolderItem;
struct ShellFolderView;
struct ShellLinkObject;
struct SizeCategorizer;
struct TimeCategorizer;
struct WbemClassObject;
struct WbemLevel1Login;
struct _ACCESSRECTLIST;
struct _ADAPTER_STATUS;
struct _ADDJOB_INFO_1A;
struct _ADDJOB_INFO_1W;
struct _AVISTREAMINFOA;
struct _AVISTREAMINFOW;
struct _CABINET_INFO_A;
struct _CABINET_INFO_W;
struct _CAT_MEMBERINFO;
struct _CERT_EXTENSION;
struct _CERT_NAME_INFO;
struct _CERT_POLICY_ID;
struct _COAUTHIDENTITY;
struct _COMPROPSHEETUI;
struct _CONNECTIONLIST;
struct _CPSUIDATABLOCK;
struct _CRL_DIST_POINT;
struct _CRYPTOAPI_BLOB;
struct _CRYPT_BIT_BLOB;
struct _CRYPT_OID_INFO;
struct _CRYPT_URL_INFO;
struct _D3DCLIPSTATUS8;
struct _D3DDISPLAYMODE;
struct _D3DDeviceDesc7;
struct _D3DEXECUTEDATA;
struct _D3DINSTRUCTION;
struct _D3DLINEPATTERN;
struct _D3DLOCKED_RECT;
struct _D3DTEXTURELOAD;
struct _D3DVOLUME_DESC;
struct _DCICREATEINPUT;
struct _DCISURFACEINFO;
struct _DDCOLORCONTROL;
struct _DDHAL_FLIPDATA;
struct _DDHAL_LOCKDATA;
struct _DDMCBUFFERINFO;
struct _DDNT_DXVERSION;
struct _DDSURFACEDESC2;
struct _DD_NTCALLBACKS;
struct _DD_SURFACE_INT;
struct _DISCDLGSTRUCTA;
struct _DISCDLGSTRUCTW;
struct _DISK_HISTOGRAM;
struct _DLLVERSIONINFO;
struct _DMUS_COPYRIGHT;
struct _DMUS_LFOPARAMS;
struct _DMUS_MSCPARAMS;
struct _DMUS_NOTERANGE;
struct _DMUS_PEGPARAMS;
struct _DMUS_VEGPARAMS;
struct _DMUS_WAVEARTDL;
struct _DRIVER_INFO_1A;
struct _DRIVER_INFO_1W;
struct _DRIVER_INFO_2A;
struct _DRIVER_INFO_2W;
struct _DRIVER_INFO_3A;
struct _DRIVER_INFO_3W;
struct _DRIVER_INFO_4A;
struct _DRIVER_INFO_4W;
struct _DRIVER_INFO_5A;
struct _DRIVER_INFO_5W;
struct _DRIVER_INFO_6A;
struct _DRIVER_INFO_6W;
struct _DSCBUFFERDESC1;
struct _DSFXCompressor;
struct _DSFXDistortion;
struct _EVENTLOGRECORD;
struct _FAT_STATISTICS;
struct _FD_KERNINGPAIR;
struct _FLAG_STGMEDIUM;
struct _FLOWDESCRIPTOR;
struct _GET_INPUT_LINE;
struct _HD_HITTESTINFO;
struct _HD_TEXTFILTERA;
struct _HD_TEXTFILTERW;
struct _HYPER_SIZEDARR;
struct _IP_ADDR_STRING;
struct _KERB_AUTH_DATA;
struct _KERB_S4U_LOGON;
struct _KSGOP_USERDATA;
struct _KSMPEGVID_RECT;
struct _MCDENABLESTATE;
struct _MCDPIXELFORMAT;
struct _MCDPIXELUNPACK;
struct _MCDRENDERSTATE;
struct _MCDSTATE_PIXEL;
struct _MCDTEXENVSTATE;
struct _MEMORYSTATUSEX;
struct _MIB_IPNETTABLE;
struct _MIB_ROUTESTATE;
struct _MIDL_STUB_DESC;
struct _MSV1_0_AV_PAIR;
struct _NMTBCUSTOMDRAW;
struct _OSVERSIONINFOA;
struct _OSVERSIONINFOW;
struct _PPP_IPXCP_INFO;
struct _PPP_NBFCP_INFO;
struct _PRINTER_INFO_3;
struct _PRINTER_INFO_6;
struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
struct _PROTOCOL_INFOA;
struct _PROTOCOL_INFOW;
struct _PUBLICKEYSTRUC;
struct _RB_HITTESTINFO;
struct _READ_WRITE_MSR;
struct _SCONTEXT_QUEUE;
struct _SERVICE_STATUS;
struct _SESSION_BUFFER;
struct _SESSION_HEADER;
struct _SETRESULT_INFO;
struct _SFV_SETITEMPOS;
struct _SHNAMEMAPPINGA;
struct _SHNAMEMAPPINGW;
struct _SHORT_SIZEDARR;
struct _SOCKET_ADDRESS;
struct _SOURCE_MEDIA_A;
struct _SOURCE_MEDIA_W;
struct _SV2CVW2_PARAMS;
struct _SYM_DUMP_PARAM;
struct _UFF_FILEHEADER;
union _ULARGE_INTEGER;
struct _USAGE_AND_PAGE;
struct _VK_TO_WCHARS10;
struct _WCE_DEVICELIST;
struct _WSPUPCALLTABLE;
struct _ZONEATTRIBUTES;
struct _nlsversioninfo;
struct _tagRemBINDINFO;
struct _userCLIPFORMAT;
struct icmp_echo_reply;
struct tagBANDSITEINFO;
struct tagCATEGORYINFO;
struct tagCHOOSECOLORA;
struct tagCHOOSECOLORW;
struct tagCOMBOBOXINFO;
struct tagCUSTDATAITEM;
struct tagCWPRETSTRUCT;
struct tagCapInfoChunk;
struct tagCaptureParms;
struct tagDESIGNVECTOR;
struct tagDRAGLISTINFO;
struct tagEMRCREATEPEN;
struct tagEMREXTESCAPE;
struct tagEMRGLSRECORD;
struct tagEMRINVERTRGN;
struct tagEMRRESTOREDC;
struct tagEMRROUNDRECT;
struct tagEMRSETPIXELV;
struct tagENUMLOGFONTA;
struct tagENUMLOGFONTW;
struct tagFINDREPLACEA;
struct tagFINDREPLACEW;
struct tagGCP_RESULTSA;
struct tagGCP_RESULTSW;
struct tagHELPWININFOA;
struct tagHELPWININFOW;
struct tagHH_FTS_QUERY;
struct tagICEXYZTRIPLE;
struct tagICONMETRICSA;
struct tagICONMETRICSW;
struct tagINPUTCONTEXT;
struct tagKS_VIDEOINFO;
struct tagLHITTESTINFO;
struct tagLVSETINFOTIP;
struct tagMETAFILEPICT;
struct tagMIDIINCAPS2A;
struct tagMIDIINCAPS2W;
struct tagMIDIOUTCAPSA;
struct tagMIDIOUTCAPSW;
struct tagMONERRSTRUCT;
struct tagMONMSGSTRUCT;
struct tagMSAAMENUINFO;
struct tagNMRBAUTOSIZE;
struct tagPALETTEENTRY;
struct tagPROPPAGEINFO;
struct tagQUERYCONTEXT;
struct tagRASSUBENTRYA;
struct tagRASSUBENTRYW;
struct tagRemFORMATETC;
struct tagRemSTGMEDIUM;
struct tagSOUNDSENTRYA;
struct tagSOUNDSENTRYW;
struct tagTITLEBARINFO;
struct tagTRANSMSGLIST;
struct tagWAVEINCAPS2A;
struct tagWAVEINCAPS2W;
struct tagWAVEOUTCAPSA;
struct tagWAVEOUTCAPSW;
struct AsyncIPipeByte;
struct AsyncIPipeLong;
struct DataSourceVtbl;
struct FileSearchBand;
struct FolderItemVerb;
struct FolderItemVtbl;
struct FolderViewHost;
struct HACMDRIVERID__;
struct HENHMETAFILE__;
struct IAVIEditStream;
struct IAVIStreamVtbl;
struct IAccPropServer;
struct IAutoComplete2;
struct ICDBurnExtVtbl;
struct IClassFactory2;
struct ICopyHookAVtbl;
struct ICopyHookWVtbl;
struct ICreateTypeLib;
struct IDVGetEnumVtbl;
struct IDefViewSafety;
struct IDeskBarClient;
struct IDirect3D8Vtbl;
struct IDispErrorVtbl;
struct IDockingWindow;
struct IEnumFORMATETC;
struct IErrorInfoVtbl;
struct IExtractImage2;
struct IFillLockBytes;
struct IHttpNegotiate;
struct IInitializeSpy;
struct IKsAllocatorEx;
struct IKsControlVtbl;
struct IKsPropertySet;
struct ILayoutStorage;
struct ILockBytesVtbl;
struct IMallocSpyVtbl;
struct IMenuPopupVtbl;
struct IMessageFilter;
struct INamespaceWalk;
struct IOleCache2Vtbl;
struct IOleClientSite;
struct IOleObjectVtbl;
struct IOleWindowVtbl;
struct IOplockStorage;
struct IPersistFolder;
struct IPersistIDList;
struct IPersistMemory;
struct IPersistStream;
struct IPropertyPage2;
struct IQueryContinue;
struct IQueryInfoVtbl;
struct IQuickActivate;
struct IRpcHelperVtbl;
struct IRpcStubBuffer;
struct ISWbemDateTime;
struct ISWbemObjectEx;
struct ISWbemProperty;
struct ISWbemSecurity;
struct ISWbemServices;
struct ISWbemSinkVtbl;
struct ISearchContext;
struct IShellDispatch;
struct IShellIconVtbl;
struct IShellItemVtbl;
struct IShellLinkDual;
struct IShellMenuVtbl;
struct IShellUIHelper;
struct IShellViewVtbl;
struct ISurrogateVtbl;
struct ITypeInfo2Vtbl;
struct IURLSearchHook;
struct IWbemEventSink;
struct IWbemRefresher;
struct IWbemTransport;
struct IWebBrowserApp;
struct IWebWizardHost;
struct IXMLDOMComment;
struct IXMLDOMElement;
struct IXMLDSOControl;
struct PassportWizard;
struct SWbemLastError;
struct SWbemMethodSet;
struct SWbemObjectSet;
struct SWbemPrivilege;
struct SWbemQualifier;
struct SWbemRefresher;
struct ShellNameSpace;
struct UserEventTimer;
struct XMLHTTPRequest;
struct _ACTION_HEADER;
struct _AD_GUARANTEED;
struct _BDA_PID_UNMAP;
struct _BLENDFUNCTION;
struct _BYTE_SIZEDARR;
struct _CAT_NAMEVALUE;
struct _CERT_RDN_ATTR;
struct _CMC_DATA_INFO;
struct _CMC_PEND_INFO;
struct _D3DCLIPSTATUS;
struct _D3DCOLORVALUE;
struct _D3DDeviceDesc;
struct _D3DHAL_DP2EXT;
struct _D3DLOCKED_BOX;
struct _D3DMATRIXLOAD;
struct _D3DPICKRECORD;
struct _DDHALMODEINFO;
struct _DDHAL_BLTDATA;
struct _DDLOCKOUTINFO;
struct _DDMONITORINFO;
struct _DDPIXELFORMAT;
struct _DDSURFACEDATA;
struct _DDSURFACEDESC;
struct _DD_ATTACHLIST;
struct _DD_HALINFO_V4;
struct _DD_STEREOMODE;
struct _DD_UNLOCKDATA;
struct _DISK_GEOMETRY;
struct _DMUS_PORTCAPS;
struct _DMUS_WAVEDATA;
struct _DSBUFFERDESC1;
struct _DSCBUFFERDESC;
struct _DSCEFFECTDESC;
struct _EFS_HASH_BLOB;
struct _EXTSTACKTRACE;
struct _EXTTEXTMETRIC;
struct _FILE_PREFETCH;
struct _GDI_NONREMOTE;
struct _GETSETBUSDATA;
struct _GRADIENT_RECT;
struct _HEAPALIASINFO;
struct _HEAPALIGNMENT;
struct _IUNKNOWN_LIST;
struct _JOB_SET_ARRAY;
union _LARGE_INTEGER;
struct _LONG_SIZEDARR;
struct _MCDBLENDSTATE;
struct _MCDLAYERPLANE;
struct _MCDPIXELSTATE;
struct _MIB_IPADDRROW;
struct _MIB_IPDESTROW;
struct _MIB_MFE_TABLE;
struct _MODEMSETTINGS;
struct _NETINFOSTRUCT;
struct _NETRESOURCE2A;
struct _NETRESOURCE2W;
struct _OLESTREAMVTBL;
struct _PORT_INFO_FFA;
struct _PORT_INFO_FFW;
struct _PPP_ATCP_INFO;
struct _PPP_IPCP_INFO;
struct _PRINTPROVIDOR;
struct _PRIVILEGE_SET;
struct _PROCESSORINFO;
struct _PROV_ENUMALGS;
struct _PUBLISHERINFO;
struct _QCMINFO_IDMAP;
struct _RGNDATAHEADER;
struct _SCARD_ATRMASK;
struct _SERVICE_INFOA;
struct _SERVICE_INFOW;
struct _SHQUERYRBINFO;
struct _SOCKADDR_IRDA;
struct _TC_GEN_FILTER;
struct _TOKEN_CONTROL;
struct _VK_TO_WCHARS1;
struct _VK_TO_WCHARS2;
struct _VK_TO_WCHARS3;
struct _VK_TO_WCHARS4;
struct _VK_TO_WCHARS5;
struct _VK_TO_WCHARS6;
struct _VK_TO_WCHARS7;
struct _VK_TO_WCHARS8;
struct _VK_TO_WCHARS9;
struct _WCE_IAS_QUERY;
struct _WINTRUST_DATA;
struct _WSACOMPLETION;
struct _WSPPROC_TABLE;
struct _tagOLECMDTEXT;
struct _tagStartParam;
struct _userHMETAFILE;
struct _userSTGMEDIUM;
struct _wireSAFEARRAY;
struct arp_send_reply;
struct tagBinaryParam;
struct tagCHARSETINFO;
struct tagCHOOSEFONTA;
struct tagCHOOSEFONTW;
struct tagCOLORSCHEME;
struct tagCONNECTDATA;
struct tagCONTROLINFO;
struct tagCONVCONTEXT;
struct tagCURSORSHAPE;
struct tagEMRANGLEARC;
struct tagEMRFILLPATH;
struct tagEMRFRAMERGN;
struct tagEMRPOLYDRAW;
struct tagEMRPOLYLINE;
struct tagEXTLOGFONTA;
struct tagEXTLOGFONTW;
struct tagEXTRASEARCH;
struct tagHANDLETABLE;
struct tagHH_ENUM_CAT;
struct tagKERNINGPAIR;
struct tagKS_AMVPSIZE;
struct tagKbdNlsLayer;
struct tagLVDISPINFOW;
struct tagLVFINDINFOA;
struct tagLVFINDINFOW;
struct tagMDINEXTMENU;
struct tagMENUBARINFO;
struct tagMIDIINCAPSA;
struct tagMIDIINCAPSW;
struct tagMIXERCAPS2A;
struct tagMIXERCAPS2W;
struct tagMONCBSTRUCT;
struct tagMONITORINFO;
struct tagNMBCHOTITEM;
struct tagNMIPADDRESS;
struct tagNMPGHOTITEM;
struct tagNMSELCHANGE;
struct tagNMTBHOTITEM;
struct tagNMTBRESTORE;
struct tagNMTREEVIEWA;
struct tagNMTREEVIEWW;
struct tagOCPFIPARAMS;
struct tagPAINTSTRUCT;
struct tagPARAMDESCEX;
struct tagPROPVARIANT;
struct tagQACONTAINER;
struct tagRASADPARAMS;
struct tagRASDEVINFOA;
struct tagRASDEVINFOW;
struct tagRAWKEYBOARD;
struct tagRemHPALETTE;
struct tagSERIALKEYSA;
struct tagSERIALKEYSW;
struct tagSOFTKBDDATA;
struct tagSTATPROPSTG;
struct tagSTYLESTRUCT;
struct tagTBADDBITMAP;
struct tagTEXTMETRICA;
struct tagTEXTMETRICW;
struct tagTTPOLYCURVE;
struct tagTVDISPINFOA;
struct tagTVDISPINFOW;
struct tagWAVEINCAPSA;
struct tagWAVEINCAPSW;
struct tagWNDCLASSEXA;
struct tagWNDCLASSEXW;
struct wavefilter_tag;
struct waveformat_tag;
struct AsyncIMultiQI;
struct AsyncIUnknown;
struct CONFIRMSAFETY;
struct HCOLORSPACE__;
struct IAVIStreaming;
struct IAdviseSinkEx;
struct IAsyncManager;
struct IAuthenticate;
struct IAutoComplete;
struct IBandSiteVtbl;
struct IBindHostVtbl;
struct IBindProtocol;
struct IBlockingLock;
struct IClassFactory;
struct IContextMenu2;
struct IContextMenu3;
struct IContinueVtbl;
struct IDefViewFrame;
struct IDeskBandVtbl;
struct IDirectMusic8;
struct IDirectSound8;
struct IDispatchVtbl;
struct IEnumACString;
struct IEnumGUIDVtbl;
struct IEnumSTATDATA;
struct IErrorLogVtbl;
struct IExtractIconA;
struct IExtractIconW;
struct IExtractImage;
struct IFolderFilter;
struct IFolderViewOC;
struct IFontDispVtbl;
struct IGetFrameVtbl;
struct IHttpSecurity;
struct IInternetVtbl;
struct IMarshal2Vtbl;
struct IMenuBandVtbl;
struct IObjectSafety;
struct IOleCacheVtbl;
struct IOleContainer;
struct IPipeByteVtbl;
struct IPipeLongVtbl;
struct IPrintCoreUI2;
struct IPropertyBag2;
struct IPropertyPage;
struct IRunnableTask;
struct ISWbemLocator;
struct ISearchesVtbl;
struct IShellBrowser;
struct IShellDetails;
struct IShellExtInit;
struct IShellFolder2;
struct IShellWindows;
struct ITaskbarList2;
struct ITypeCompVtbl;
struct ITypeInfoVtbl;
struct ITypeLib2Vtbl;
struct IViewObjectEx;
struct IWaitMultiple;
struct IWbemServices;
struct IWbemShutdown;
struct IWiaVideoVtbl;
struct IXMLAttribute;
struct IXMLDOMEntity;
struct IXMLDocument2;
struct IXMLErrorVtbl;
struct NDIS_BPC_POOL;
struct SWbemDateTime;
struct SWbemObjectEx;
struct SWbemProperty;
struct SWbemSecurity;
struct SWbemServices;
struct SearchCommand;
struct ShellUIHelper;
struct WbemRefresher;
struct WebBrowser_V1;
struct WebWizardHost;
struct XMLDSOControl;
struct _AVIFILEINFOA;
struct _AVIFILEINFOW;
struct _BPC_FILETIME;
struct _CC_BYTE_PAIR;
struct _CERT_CONTEXT;
struct _CMS_KEY_INFO;
struct _COMMTIMEOUTS;
struct _COSERVERINFO;
struct _CPSUICBPARAM;
struct _CREDUI_INFOA;
struct _CREDUI_INFOW;
struct _D3DGAMMARAMP;
struct _D3DLIGHTDATA;
struct _D3DMATERIAL7;
struct _D3DMATERIAL8;
struct _D3DVIEWPORT2;
struct _D3DVIEWPORT7;
struct _D3DVIEWPORT8;
struct _DCIENUMINPUT;
struct _DCIOFFSCREEN;
struct _DDGETIRQINFO;
struct _DDKERNELCAPS;
struct _DDLOCKININFO;
struct _DDNTCORECAPS;
struct _DDSTEREOMODE;
struct _DD_DXVERSION;
struct _DEVHTADJDATA;
struct _DISK_LOGGING;
struct _DRIVERSTATUS;
struct _DS3DLISTENER;
struct _DSBUFFERDESC;
struct _DSEFFECTDESC;
struct _EFS_KEY_INFO;
struct _EFS_RPC_BLOB;
struct _FD_GLYPHATTR;
struct _FORM_INFO_1A;
struct _FORM_INFO_1W;
struct _GLYPHMETRICS;
struct _IMAGE_SYMBOL;
struct _INPUT_RECORD;
union _IN_ADDR_IPV4;
struct _IN_ADDR_IPV6;
struct _IOSPACE_EX32;
struct _IOSPACE_EX64;
struct _KS_DVD_YCrCb;
struct _MCDCLIPSTATE;
struct _MCDHINTSTATE;
struct _MCDPIXELPACK;
struct _MCDRIVERINFO;
struct _MEMORYSTATUS;
struct _MIBICMPSTATS;
struct _MIB_IFNUMBER;
struct _MIB_IFSTATUS;
struct _MIB_IPNETROW;
struct _MIB_PROXYARP;
struct _MIB_TCPSTATS;
struct _MIB_TCPTABLE;
struct _MIB_UDPSTATS;
struct _MIB_UDPTABLE;
struct _MODEMDEVCAPS;
struct _MPR_SERVER_0;
struct _NABTS_BUFFER;
struct _NETRESOURCEA;
struct _NETRESOURCEW;
struct _OEMCUIPPARAM;
struct _OEMUIPSPARAM;
struct _PARAM_BUFFER;
struct _PORT_INFO_1A;
struct _PORT_INFO_1W;
struct _PORT_INFO_2A;
struct _PORT_INFO_2W;
struct _PORT_INFO_3A;
struct _PORT_INFO_3W;
struct _PROCESS_LIST;
struct _PROVDATA_SIP;
struct _PSINJECTDATA;
struct _QOS_DESTADDR;
struct _QOS_DIFFSERV;
struct _QOS_DS_CLASS;
struct _QUOTA_LIMITS;
struct _SCHANNEL_ALG;
struct _SEARCHMEMORY;
struct _SHELLDETAILS;
union _SLIST_HEADER;
struct _STARTUPINFOA;
struct _STARTUPINFOW;
struct _TAPE_PREPARE;
struct _TOKEN_GROUPS;
struct _TOKEN_ORIGIN;
struct _TOKEN_SOURCE;
struct _WNODE_HEADER;
struct _WSAQuerySetA;
struct _WSAQuerySetW;
struct _currencyfmtA;
struct _currencyfmtW;
struct _userHPALETTE;
struct adpcmcoef_tag;
struct joyinfoex_tag;
struct midievent_tag;
struct provider_info;
struct tWAVEFORMATEX;
struct tagALTTABINFO;
struct tagAspectInfo;
struct tagBIND_OPTS2;
struct tagBITMAPINFO;
struct tagCABSTRBLOB;
struct tagCACLIPDATA;
struct tagCAFILETIME;
struct tagCALPOLESTR;
struct tagCSPLATFORM;
struct tagCURSORINFO;
struct tagDIBSECTION;
struct tagDISPPARAMS;
struct tagDROPSTRUCT;
struct tagEMRELLIPSE;
struct tagEMRFILLRGN;
struct tagEMRMASKBLT;
struct tagExtentInfo;
struct tagFILTERKEYS;
struct tagHHN_NOTIFY;
struct tagHH_ENUM_IT;
struct tagHH_WINTYPE;
struct tagKEYBDINPUT;
struct tagKS_RGBQUAD;
struct tagLOGBRUSH32;
struct tagLOGPALETTE;
struct tagLVBKIMAGEA;
struct tagLVBKIMAGEW;
struct tagLVDISPINFO;
struct tagLVTILEINFO;
struct tagMETAHEADER;
struct tagMETARECORD;
struct tagMETHODDATA;
struct tagMINMAXINFO;
struct tagMIXERCAPSA;
struct tagMIXERCAPSW;
struct tagMIXERLINEA;
struct tagMIXERLINEW;
struct tagMOUSEINPUT;
struct tagNMDAYSTATE;
struct tagNMLISTVIEW;
struct tagNMLVSCROLL;
struct tagNMTOOLBARA;
struct tagNMTOOLBARW;
struct tagRASEAPINFO;
struct tagRASPPPIPXA;
struct tagRASPPPLCPA;
struct tagRASPPPLCPW;
struct tagRASPPPNBFA;
struct tagRASPPPNBFW;
struct tagRemHBITMAP;
struct tagRemHGLOBAL;
struct tagSCROLLINFO;
struct tagSTGOPTIONS;
struct tagSTICKYKEYS;
struct tagTOGGLEKEYS;
struct tagWINDOWINFO;
struct DD_CALLBACKS;
struct DFConstraint;
struct FolderItems2;
struct FolderItems3;
struct HACMDRIVER__;
struct HACMSTREAM__;
struct HSEMAPHORE__;
struct IACList2Vtbl;
struct IAVIFileVtbl;
struct IAccIdentity;
struct IAdviseSink2;
struct IBanneredBar;
struct IBindCtxVtbl;
struct IBindingVtbl;
struct ICallFactory;
struct ICatRegister;
struct ICategorizer;
struct IChannelHook;
struct ICodeInstall;
struct IContextMenu;
struct IDeskBarVtbl;
struct IDirectDraw2;
struct IDirectDraw4;
struct IDirectDraw7;
struct IDirectMusic;
struct IDirectSound;
struct IDocViewSite;
struct IEnumMoniker;
struct IEnumOLEVERB;
struct IEnumSTATSTG;
struct IEnumUnknown;
struct IEnumVARIANT;
struct IFileViewerA;
struct IFileViewerW;
struct IInputObject;
struct IKsAllocator;
struct IMarshalVtbl;
struct IModalWindow;
struct IMofCompiler;
struct IMonikerProp;
struct IMonikerVtbl;
struct IMultiQIVtbl;
struct INewWDEvents;
struct IOleDocument;
struct IOleLinkVtbl;
struct IOleUndoUnit;
struct IPersistFile;
struct IPersistVtbl;
struct IPictureDisp;
struct IPictureVtbl;
struct IPrintOemUI2;
struct IProcessLock;
struct IPropertyBag;
struct IROTDataVtbl;
struct IRegTreeItem;
struct IRootStorage;
struct ISWbemMethod;
struct ISWbemObject;
struct IShellFolder;
struct ISoftDistExt;
struct IStorageVtbl;
struct ISynchronize;
struct ITaskbarList;
struct ITypeFactory;
struct ITypeLibVtbl;
struct ITypeMarshal;
struct IUnknownVtbl;
struct IViewObject2;
struct IWbemContext;
struct IWbemLocator;
struct IWebBrowser2;
struct IWinInetInfo;
struct IXMLDocument;
struct IXMLElement2;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct PropertiesUI;
struct SPC_SIGINFO_;
struct SWbemLocator;
struct ShellWindows;
struct _AFPROTOCOLS;
struct _BDA_PID_MAP;
struct _BIN_RESULTS;
struct _CC_HW_FIELD;
struct _CREATE_DISK;
struct _CREDENTIALA;
struct _CREDENTIALW;
struct _CRL_CONTEXT;
struct _CSADDR_INFO;
struct _CTL_CONTEXT;
struct _D3DMATERIAL;
struct _D3DPrimCaps;
struct _D3DTLVERTEX;
struct _D3DTRIANGLE;
struct _D3DVIEWPORT;
struct _DATA_HEADER;
struct _DDGAMMARAMP;
struct _DDOVERLAYFX;
struct _DD_FLIPDATA;
struct _DD_LOCKDATA;
struct _DD_MORECAPS;
struct _DEBUG_EVENT;
struct _DETAILSINFO;
struct _DISK_EXTENT;
struct _DISK_RECORD;
struct _DMUS_REGION;
struct _DMUS_WAVEDL;
struct _DOC_INFO_1A;
struct _DOC_INFO_1W;
struct _DOC_INFO_2A;
struct _DOC_INFO_2W;
struct _DOC_INFO_3A;
struct _DOC_INFO_3W;
struct _DRAWPATRECT;
struct _DSFXFlanger;
struct _DSFXParamEq;
struct _EVENT_TRACE;
struct _FD_GLYPHSET;
struct _FD_LIGATURE;
struct _FILEPATHS_A;
struct _FILEPATHS_W;
struct _IO_COUNTERS;
struct _IPX_PATTERN;
struct _JOB_INFO_1A;
struct _JOB_INFO_1W;
struct _JOB_INFO_2A;
struct _JOB_INFO_2W;
struct _KSM_BDA_PIN;
struct _MCDFOGSTATE;
struct _MCDVIEWPORT;
struct _MIBICMPINFO;
struct _MIB_BEST_IF;
struct _MIB_ICMP_EX;
struct _MIB_IFTABLE;
struct _MIB_IPSTATS;
struct _MONITORINIT;
struct _NAME_BUFFER;
struct _NSP_ROUTINE;
struct _OFNOTIFYEXA;
struct _OFNOTIFYEXW;
struct _PERBANDINFO;
struct _PORT_DATA_1;
struct _PRIVKEYVER3;
struct _QOS_SD_MODE;
struct _RPC_MESSAGE;
struct _RPC_VERSION;
struct _RSVP_ADSPEC;
struct _RSVP_POLICY;
struct _SHFILEINFOA;
struct _SHFILEINFOW;
struct _SI_COPYFILE;
struct _SYSTEM_INFO;
struct _TC_GEN_FLOW;
struct _TOKEN_OWNER;
struct _UUID_VECTOR;
struct _VIDEOMEMORY;
struct _WCE_IAS_SET;
struct _WSATHREADID;
struct _browseinfoA;
struct _browseinfoW;
struct _devicemodeA;
struct _devicemodeW;
struct _tagBINDINFO;
struct _tagDATAINFO;
struct _tagDATETIME;
struct _userHBITMAP;
struct _userHGLOBAL;
struct _wireBRECORD;
struct _wireVARIANT;
struct tagABORTPATH;
struct tagARRAYDESC;
struct tagAUXCAPS2A;
struct tagAUXCAPS2W;
struct tagAXESLISTA;
struct tagAXESLISTW;
struct tagAXISINFOA;
struct tagAXISINFOW;
struct tagBIND_OPTS;
struct tagCWPSTRUCT;
struct tagCapStatus;
struct tagEMRBITBLT;
struct tagEMRFORMAT;
struct tagEMRLINETO;
struct tagEMRPLGBLT;
struct tagEXCEPINFO;
struct tagEXTLOGPEN;
struct tagFORMATETC;
struct tagGUIDELINE;
struct tagHH_AKLINK;
struct tagJOYCAPS2A;
struct tagJOYCAPS2W;
struct tagLVCOLUMNA;
struct tagLVCOLUMNW;
struct tagLVKEYDOWN;
struct tagMOUSEKEYS;
struct tagNMHEADERA;
struct tagNMHEADERW;
struct tagPAGERANGE;
struct tagPARAMDATA;
struct tagPARAMDESC;
struct tagPOLYTEXTA;
struct tagPOLYTEXTW;
struct tagQACONTROL;
struct tagRASENTRYA;
struct tagRASENTRYW;
struct tagRASPPPCCP;
struct tagRASPPPIPA;
struct tagRASPPPIPW;
struct tagREBARINFO;
struct tagRGBTRIPLE;
struct tagSAFEARRAY;
struct tagSTGMEDIUM;
struct tagSTYLEBUFA;
struct tagSTYLEBUFW;
struct tagTCKEYDOWN;
struct tagTOOLINFOA;
struct tagTOOLINFOW;
struct tagTPMPARAMS;
struct tagTVITEMEXA;
struct tagTVITEMEXW;
struct tagTVKEYDOWN;
struct tagWINDOWPOS;
struct tagWNDCLASSA;
struct tagWNDCLASSW;
struct timecaps_tag;
struct videohdr_tag;
struct DOMDocument;
struct FARPROC16__;
struct Folder2Vtbl;
struct Folder3Vtbl;
struct FolderItem2;
struct FolderItems;
struct HCONVLIST__;
struct HINSTANCE__;
struct HMETAFILE__;
struct HMIDISTRM__;
struct HMIXEROBJ__;
struct HRAWINPUT__;
struct IACListVtbl;
struct IAccessible;
struct IAdviseSink;
struct ICDBurnVtbl;
struct IDataFilter;
struct IDataObject;
struct IDirectDraw;
struct IDispatchEx;
struct IDropSource;
struct IDropTarget;
struct IEnumIDList;
struct IEnumString;
struct IFolderView;
struct IInsertItem;
struct IKsTopology;
struct IMallocVtbl;
struct INetCrawler;
struct IObjContext;
struct IObjMgrVtbl;
struct IOleControl;
struct IPipeDouble;
struct IPrintOemUI;
struct IPropertyUI;
struct IRecordInfo;
struct IRpcOptions;
struct ISearchVtbl;
struct IShellLinkA;
struct IShellLinkW;
struct IShellView2;
struct IStreamVtbl;
struct IUrlMonVtbl;
struct IViewObject;
struct IWebBrowser;
struct IWizardSite;
struct IXMLDOMNode;
struct IXMLDOMText;
struct IXMLElement;
struct IXTLRuntime;
struct MofCompiler;
struct RASCTRYINFO;
struct SC_HANDLE__;
struct SWbemMethod;
struct SWbemObject;
struct TaskbarList;
struct WbemContext;
struct WbemLocator;
struct XMLDocument;
struct _ACE_HEADER;
struct _ATTACHLIST;
struct _AppBarData;
struct _CERT_CHAIN;
struct _COAUTHINFO;
struct _COMMCONFIG;
struct _CONNECTION;
struct _D3DHVERTEX;
struct _D3DLVERTEX;
struct _DCIOVERLAY;
struct _DDBLTBATCH;
struct _DDCAPS_DX1;
struct _DDCAPS_DX3;
struct _DDCAPS_DX5;
struct _DDCAPS_DX6;
struct _DDCAPS_DX7;
struct _DDCOLORKEY;
struct _DDCORECAPS;
struct _DD_BLTDATA;
struct _DD_HALINFO;
struct _DLSVERSION;
struct _DS3DBUFFER;
struct _DS3DVECTOR;
struct _DSFXChorus;
struct _DSFXGargle;
struct _DWORD_BLOB;
struct _DX_IRQDATA;
struct _FIELD_INFO;
union _FLOAT_LONG;
struct _GDI_OBJECT;
struct _IFIMETRICS;
struct _INFCONTEXT;
struct _INSTHEADER;
struct _IOSPACE_EX;
struct _IP_PATTERN;
struct _ITEMIDLIST;
struct _JOB_INFO_3;
struct _KS_DVD_YUV;
struct _LIST_ENTRY;
struct _LSA_STRING;
struct _MCDBUFFERS;
struct _MCDCOMMAND;
struct _MCDSURFACE;
struct _MCDTEXTURE;
struct _MIB_TCPROW;
struct _MIB_UDPROW;
struct _MIDILOCALE;
struct _MONITORREG;
struct _OEMDMPARAM;
struct _OEMUIPROCS;
struct _OVERLAPPED;
struct _POINTFLOAT;
struct _PUBKEYVER3;
struct _RAS_PORT_0;
struct _RAS_PORT_1;
struct _RAS_USER_0;
struct _RPC_POLICY;
struct _SFV_CREATE;
struct _SMALL_RECT;
struct _SYSTEMTIME;
struct _TAPE_ERASE;
struct _TOKEN_USER;
struct _TTGETTITLE;
struct _TYPE1_FONT;
struct _UNIDRVINFO;
struct _VIDMEMINFO;
struct _WIDTHTABLE;
struct _WSAVersion;
struct _WST_BUFFER;
struct _numberfmtA;
struct _numberfmtW;
struct _tagIMEPROA;
struct _tagIMEPROW;
struct _userBITMAP;
struct joyinfo_tag;
struct midihdr_tag;
struct sockaddr_in;
struct tagAUXCAPSA;
struct tagAUXCAPSW;
struct tagBSTRBLOB;
struct tagCALPWSTR;
struct tagCLIPDATA;
struct tagCONVINFO;
struct tagCUSTDATA;
struct tagDEVNAMES;
struct tagELEMDESC;
struct tagEVENTMSG;
struct tagFONTDESC;
struct tagFUNCDESC;
struct tagGLYPHSET;
struct tagHELPINFO;
struct tagHHNTRACK;
struct tagHH_POPUP;
struct tagJOYCAPSA;
struct tagJOYCAPSW;
struct tagKbdLayer;
struct tagLOGBRUSH;
struct tagLOGFONTA;
struct tagLOGFONTW;
struct tagMENUINFO;
struct tagMULTI_QI;
struct tagNMTBSAVE;
struct tagOFN_NT4A;
struct tagOFN_NT4W;
struct tagPELARRAY;
struct tagPICTDESC;
struct tagPROPBAG2;
struct tagPROPSPEC;
struct tagRASCONNA;
struct tagRASCONNW;
struct tagRASSLIPA;
struct tagRASSLIPW;
struct tagRAWINPUT;
struct tagRAWMOUSE;
struct tagRemBRUSH;
struct tagSTATDATA;
struct tagTLIBATTR;
struct tagTRANSMSG;
struct tagTVSORTCB;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct val_context;
struct wavehdr_tag;
struct DataSource;
struct FolderItem;
struct FolderVtbl;
struct HDDEDATA__;
struct HMIDIOUT__;
struct HMONITOR__;
struct HPALETTE__;
struct HRASCONN__;
struct HWAVEOUT__;
struct IAVIStream;
struct ICDBurnExt;
struct ICopyHookA;
struct ICopyHookW;
struct IDVGetEnum;
struct IDirect3D8;
struct IDispError;
struct IErrorInfo;
struct IKsControl;
struct ILockBytes;
struct IMallocSpy;
struct IMenuPopup;
struct IOleCache2;
struct IOleObject;
struct IOleWindow;
struct IPrintVtbl;
struct IQueryInfo;
struct IRpcHelper;
struct ISWbemSink;
struct IShellIcon;
struct IShellItem;
struct IShellMenu;
struct IShellView;
struct ISurrogate;
struct ITypeInfo2;
struct NetCrawler;
struct WebBrowser;
struct _BIDI_DATA;
struct _BIN_COUNT;
struct _BIN_RANGE;
struct _BYTE_BLOB;
struct _CERT_INFO;
struct _CERT_PAIR;
struct _CHAR_INFO;
struct _CIECHROMA;
struct _COLORINFO;
struct _CRL_ENTRY;
struct _CTL_ENTRY;
struct _CTL_USAGE;
struct _D3DBRANCH;
struct _D3DLIGHT2;
struct _D3DLIGHT7;
struct _D3DLIGHT8;
struct _D3DMATRIX;
struct _D3DSTATUS;
struct _D3DVECTOR;
struct _D3DVERTEX;
struct _DDHALINFO;
struct _DDSCAPSEX;
struct _DEVHTINFO;
struct _DLSHEADER;
struct _DMUS_WAVE;
struct _DRAGINFOA;
struct _DRAGINFOW;
struct _DRIVEROBJ;
struct _DROPFILES;
struct _ENUMRECTS;
struct _EXTCHKBOX;
struct _GAMMARAMP;
struct _GLYPHBITS;
struct _GLYPHDATA;
struct _HD_LAYOUT;
struct _HEAPALIAS;
struct _HIDP_CAPS;
struct _HIDP_DATA;
struct _HMAC_Info;
struct _IMAGEINFO;
struct _IMAGELIST;
struct _IOSPACE32;
struct _IOSPACE64;
struct _KS_COLCON;
struct _LANA_ENUM;
struct _LDT_ENTRY;
struct _LIGATURE1;
struct _LIGATURE2;
struct _LIGATURE3;
struct _LIGATURE4;
struct _LIGATURE5;
struct _LINEATTRS;
struct _MCDDRIVER;
struct _MCDVERTEX;
struct _MCDWINDOW;
struct _MIB_IFROW;
struct _MOF_FIELD;
struct _MONITOREX;
struct _MONITORUI;
struct _NDIS_GUID;
struct _NM_UPDOWN;
struct _NRESARRAY;
struct _OFNOTIFYA;
struct _OFNOTIFYW;
struct _OLESTREAM;
struct _POOLTABLE;
struct _PSHNOTIFY;
struct _RAS_STATS;
struct _RGNHEADER;
struct _RPC_IF_ID;
struct _RSAPUBKEY;
struct _SC_ACTION;
struct _SPC_IMAGE;
struct _SecHandle;
struct _TRANSDATA;
struct _TRIVERTEX;
struct _UNIFM_HDR;
struct _WORD_BLOB;
struct _cpinfoexA;
struct _cpinfoexW;
struct _tagOLECMD;
struct _xml_error;
struct mmtime_tag;
struct tagACTCTXA;
struct tagACTCTXW;
union tagBINDPTR;
struct tagCACLSID;
struct tagCADWORD;
struct tagCALPSTR;
struct tagCASCODE;
struct tagDEVINFO;
struct tagEMRTEXT;
struct tagHSZPAIR;
struct tagIDLDESC;
struct tagIMEINFO;
struct tagLICINFO;
struct tagLVGROUP;
struct tagLVITEMA;
struct tagLVITEMW;
struct tagNMMOUSE;
struct tagNMREBAR;
struct tagOLEVERB;
struct tagPAGESET;
struct tagPOINTFX;
struct tagRASAMBA;
struct tagRASAMBW;
struct tagRASIPXW;
struct tagRGBQUAD;
struct tagSTATSTG;
struct tagTCITEMA;
struct tagTCITEMW;
struct tagTVITEMA;
struct tagTVITEMW;
struct tagVARDESC;
struct tagVARIANT;
struct tagWCRANGE;
struct value_entA;
struct value_entW;
struct HACMOBJ__;
struct HBITMAP__;
struct HDRVOBJ__;
struct HMIDIIN__;
struct HWAVEIN__;
struct HWINSTA__;
struct IBandSite;
struct IBindHost;
struct IContinue;
struct IDeskBand;
struct IDispatch;
struct IEnumGUID;
struct IErrorLog;
struct IFontDisp;
struct IFontVtbl;
struct IGetFrame;
struct IInternet;
struct IMarshal2;
struct IMenuBand;
struct IOleCache;
struct IPipeByte;
struct IPipeLong;
struct ISearches;
struct ITypeComp;
struct ITypeInfo;
struct ITypeLib2;
struct IWiaVideo;
struct IXMLError;
struct RASIPADDR;
struct SPC_LINK_;
struct SWbemSink;
struct _ABCFLOAT;
struct _BLENDOBJ;
struct _BRUSHOBJ;
struct _CERT_RDN;
struct _CLIPLINE;
struct _COLORMAP;
struct _COMMPROP;
struct _CPS_URLS;
struct _CRL_INFO;
struct _CTL_INFO;
struct _D3DCAPS8;
struct _D3DLIGHT;
struct _D3DPOINT;
struct _D3DRANGE;
struct _D3DSTATE;
struct _D3DSTATS;
struct _DDOSCAPS;
struct _DDSCAPS2;
struct _DOCINFOA;
struct _DOCINFOW;
struct _DSCBCAPS;
struct _DSCFXAec;
struct _DSFXEcho;
struct _FD_XFORM;
struct _FILETIME;
struct _FLOAT128;
struct _FLOATOBJ;
struct _FONTDIFF;
struct _FONTINFO;
struct _FPO_DATA;
union _GLYPHDEF;
struct _GLYPHPOS;
struct _GLYPHRUN;
struct _HD_ITEMA;
struct _HD_ITEMW;
struct _ICONINFO;
struct _IFIEXTRA;
struct _KERNDATA;
struct _LIGATURE;
struct _MAPTABLE;
struct _MCDCOLOR;
struct _MCDCOORD;
struct _MCDSTATE;
struct _MCRCINFO;
struct _MIB_ICMP;
struct _MMCKINFO;
struct _MMIOINFO;
struct _MONITOR2;
struct _NS_INFOA;
struct _NS_INFOW;
struct _NT_TIB32;
struct _NT_TIB64;
struct _OBJECTID;
struct _OEMUIOBJ;
struct _OFSTRUCT;
struct _OPTPARAM;
struct _PATHDATA;
struct _PERF_BIN;
struct _PHYSICAL;
struct _POINTFIX;
struct _PPP_INFO;
struct _RGNRANGE;
struct _RIP_INFO;
struct _SHITEMID;
struct _TBBUTTON;
struct _USERDATA;
struct _VMEMHEAP;
struct _WAVELINK;
struct _WIDTHRUN;
struct _XFORMOBJ;
struct _XLATEOBJ;
struct _flowspec;
struct sockproto;
struct tagBITMAP;
struct tagCABOOL;
struct tagCABSTR;
struct tagCADATE;
struct tagCAUUID;
struct tagCIEXYZ;
struct tagEMRARC;
struct tagEMREOF;
struct tagLOGPEN;
struct tagNMCHAR;
struct tagNMLINK;
struct tagPANOSE;
struct tagPOINTF;
struct tagPOINTS;
struct tagRAWHID;
struct tagRemSNB;
struct tagSMDATA;
struct tagSMINFO;
struct DHPDEV__;
struct DHSURF__;
struct HACCEL__;
struct HBRUSH__;
struct HMIXER__;
struct HVIDEO__;
struct IACList2;
struct IAVIFile;
struct IBindCtx;
struct IBinding;
struct IContext;
struct IDeskBar;
struct IMarshal;
struct IMoniker;
struct IMultiQI;
struct IOleLink;
struct IPersist;
struct IPicture;
struct IROTData;
struct IStorage;
struct ITypeLib;
struct IUnknown;
struct WiaVideo;
struct _CERT_ID;
struct _CLIPOBJ;
struct _COMSTAT;
struct _CONTEXT;
struct _D3DLINE;
struct _D3DRECT;
struct _D3DSPAN;
struct _DBLNODE;
struct _DDBLTFX;
struct _DDSCAPS;
struct _DLGPAGE;
struct _DSBCAPS;
struct _DSCCAPS;
struct _DSSSEED;
struct _EXTPUSH;
struct _FONTOBJ;
struct _FONTSIM;
struct _GDIINFO;
struct _IDEREGS;
struct _IOSPACE;
struct _MCDSPAN;
struct _MONITOR;
struct _OPTITEM;
struct _OPTTYPE;
struct _PATHOBJ;
struct _POINTQF;
struct _POOLCUE;
struct _PSPINFO;
struct _QCMINFO;
struct _RGNDATA;
struct _SURFOBJ;
struct _UDACCEL;
struct _WGLSWAP;
struct in6_addr;
struct protoent;
struct sockaddr;
struct tagACCEL;
struct tagCADBL;
struct tagCAFLT;
struct tagINPUT;
struct tagLITEM;
struct tagNMHDR;
struct tagNMKEY;
struct tagPDEXA;
struct tagPDEXW;
struct tagPOINT;
struct tagXFORM;
struct Folder2;
struct Folder3;
struct HCONV__;
struct HDESK__;
struct HDROP__;
struct HDRVR__;
struct HFONT__;
struct HGLRC__;
struct HHOOK__;
struct HICON__;
struct HIMCC__;
struct HMENU__;
struct HMIDI__;
struct HMMIO__;
struct HPSXA__;
struct HRSRC__;
struct HSURF__;
struct HTASK__;
struct HUMPD__;
struct HWAVE__;
struct IACList;
struct ICDBurn;
struct IMalloc;
struct IObjMgr;
struct ISearch;
struct IStream;
struct IUrlMon;
struct PROPPRG;
struct WSAData;
struct WSPData;
struct _D3DBOX;
struct _DCICMD;
struct _DDARGB;
struct _DDRGBA;
struct _DSCAPS;
struct _MCDBUF;
struct _MCDMEM;
struct _NT_TIB;
struct _PALOBJ;
struct _POINTE;
struct _POINTL;
struct _PUBKEY;
struct _RECTFX;
struct _STROBJ;
struct _STRRET;
struct _TBINFO;
struct _VIDMEM;
struct _VK_VSC;
struct _VSC_VK;
struct _WNDOBJ;
struct _WSABUF;
struct _XFORML;
struct _cpinfo;
struct _ldiv_t;
struct hostent;
struct in_addr;
struct ip_mreq;
struct pvalueA;
struct pvalueW;
struct servent;
struct tagBLOB;
struct tagCACY;
struct tagCAUB;
struct tagCAUH;
struct tagCAUI;
struct tagCAUL;
struct tagCRGB;
struct tagOFNA;
struct tagOFNW;
struct tagOIFI;
struct tagPSDA;
struct tagPSDW;
struct tagRECT;
struct tagSIZE;
struct timeval;
struct CDBurn;
struct Folder;
struct HDEV__;
struct HIMC__;
struct HKEY__;
struct HPEN__;
struct HRGN__;
struct HSTR__;
struct HWND__;
struct IKsPin;
struct IPrint;
struct _COORD;
struct _DLSID;
struct _DRVFN;
struct _FIXED;
struct _INVOC;
struct _MCDRC;
struct _OIEXT;
struct _RECTL;
struct _VMEML;
struct _VMEMR;
struct _WCRUN;
struct _div_t;
struct _iobuf;
struct _rloop;
struct _rwsmp;
struct fd_set;
struct linger;
struct netent;
struct tagCAC;
struct tagCAH;
struct tagCAI;
struct tagCAL;
struct tagDEC;
struct tagEMR;
struct tagMSG;
struct tagPDA;
struct tagPDW;
struct HBM__;
struct HDC__;
struct HIC__;
struct HKL__;
struct HSZ__;
struct IFont;
struct Shell;
struct _CSFV;
struct _GUID;
struct _LUID;
struct _MAT2;
union tagCY;
struct IPin;
struct _ABC;
struct _ACL;
struct _DCB;
struct _IDA;
struct _MDL;
struct _NCB;
struct _PSP;
struct _RUN;
struct _SID;
struct tm;

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A {unsigned int NameOffset : 31;unsigned int NameIsString : 1;};
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 {unsigned int OffsetToDirectory : 31;unsigned int DataIsDirectory : 1;};
struct _HIDP_KEYBOARD_MODIFIER_STATE___09F65E3D8EC31FFE3E62B668D67CDD30___CCD288663407EB3BCE693252A6740B18 {unsigned int LeftControl : 1;unsigned int LeftShift : 1;unsigned int LeftAlt : 1;unsigned int LeftGUI : 1;unsigned int RightControl : 1;unsigned int RightShift : 1;unsigned int RightAlt : 1;unsigned int RigthGUI : 1;unsigned int CapsLock : 1;unsigned int ScollLock : 1;unsigned int NumLock : 1;unsigned int Reserved : 21;};
struct _devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___A4EE175A7532F35C00DA5CAD042934DF {short dmOrientation;short dmPaperSize;short dmPaperLength;short dmPaperWidth;short dmScale;short dmCopies;short dmDefaultSource;short dmPrintQuality;};
struct _devicemodeW___5A39A2C3BB0B1D2D5888DFEE2BA0B23C___A4EE175A7532F35C00DA5CAD042934DF {short dmOrientation;short dmPaperSize;short dmPaperLength;short dmPaperWidth;short dmScale;short dmCopies;short dmDefaultSource;short dmPrintQuality;};
struct _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902___40942CBCB8F0A1CDBC81269929B28324 {float _11;float _12;float _13;float _14;float _21;float _22;float _23;float _24;float _31;float _32;float _33;float _34;float _41;float _42;float _43;float _44;};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E {unsigned int BaseMid : 8;unsigned int Type : 5;unsigned int Dpl : 2;unsigned int Pres : 1;unsigned int LimitHi : 4;unsigned int Sys : 1;unsigned int Reserved_0 : 1;unsigned int Default_Big : 1;unsigned int Granularity : 1;unsigned int BaseHi : 8;};
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 {void **XlatTable;unsigned char *StateTable;unsigned int NumberOfEntries;};
union _CRYPT_PROVIDER_DATA___FE2B7DE956400363F942998E125D9843 {struct _PROVDATA_SIP *pPDSip;};
typedef struct _1F16BBD766B6BEFB723ABEAEF53457A3 *PKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S;
typedef struct _1F16BBD766B6BEFB723ABEAEF53457A3 KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S;
typedef struct _FT_STRIPE_SET_WITH_PARITY_CONFIGURATION_INFORMATION *PFT_STRIPE_SET_WITH_PARITY_CONFIGURATION_INFORMATION;
typedef struct _E4A6BAB3223452EC45F6B117A37FFCF9 *PKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S;
typedef struct _FT_STRIPE_SET_WITH_PARITY_CONFIGURATION_INFORMATION FT_STRIPE_SET_WITH_PARITY_CONFIGURATION_INFORMATION;
typedef struct _E4A6BAB3223452EC45F6B117A37FFCF9 KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S;
typedef  struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef struct _2AA7958816AF26AF0A1E54EEE587A92C *PKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S;
typedef struct _2AA7958816AF26AF0A1E54EEE587A92C KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S;
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef struct _1CE0BD7852F87226759D0185D4AC1198 *PKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S;
typedef struct _07B7FBDB71A394C363DCB969C30B9F57 *PKSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S;
union _WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB {struct WINTRUST_FILE_INFO_ *pFile;struct WINTRUST_CATALOG_INFO_ *pCatalog;struct WINTRUST_BLOB_INFO_ *pBlob;struct WINTRUST_SGNR_INFO_ *pSgnr;struct WINTRUST_CERT_INFO_ *pCert;};
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef struct _1CE0BD7852F87226759D0185D4AC1198 KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S;
typedef struct _07B7FBDB71A394C363DCB969C30B9F57 KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S;
typedef struct _DB6743270A05FF5B7AB17563AEBB3A96 *PKSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S;
typedef struct _190FAF90ED71AB17CA7DE27E94D1BCF3 *PKSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S;
typedef struct _DB6743270A05FF5B7AB17563AEBB3A96 KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S;
typedef struct _190FAF90ED71AB17CA7DE27E94D1BCF3 KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S;
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _E5C551D5220B94E855DFD2A46F971A3B *PKSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S;
typedef struct _FB8A4E21AD43EDA8BFCCEEFE99FC59C9 *PKSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _E5C551D5220B94E855DFD2A46F971A3B KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S;
typedef struct _FB8A4E21AD43EDA8BFCCEEFE99FC59C9 KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S;
typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _FT_REDISTRIBUTION_CONFIGURATION_INFORMATION *PFT_REDISTRIBUTION_CONFIGURATION_INFORMATION;
typedef struct _9283D0FA6633E8568FC062864CF70F24 *PKSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S;
typedef struct _B4A25942D193F2EAA86C395C02EC729E *PKSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S;
typedef struct _C1C3EF408C46606406ABFE21B3E99DE8 *PKSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S;
typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _FT_REDISTRIBUTION_CONFIGURATION_INFORMATION FT_REDISTRIBUTION_CONFIGURATION_INFORMATION;
typedef struct _9283D0FA6633E8568FC062864CF70F24 KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S;
typedef struct _B4A25942D193F2EAA86C395C02EC729E KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S;
typedef struct _C1C3EF408C46606406ABFE21B3E99DE8 KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _VBICODECFILTERING_STATISTICS_TELETEXT_PIN *PVBICODECFILTERING_STATISTICS_TELETEXT_PIN;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
enum MACRO_D3DRENDERSTATE_EVICTMANAGEDTEXTURES {D3DRENDERSTATE_EVICTMANAGEDTEXTURES = 61,D3DRENDERSTATE_SCENECAPTURE = 62,};
typedef  struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _8630A1F515F1D9088A894BA95A0F4D66 *PKSPROPERTY_VBICODECFILTERING_SCANLINES_S;
typedef struct _VBICODECFILTERING_STATISTICS_TELETEXT_PIN VBICODECFILTERING_STATISTICS_TELETEXT_PIN;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _8630A1F515F1D9088A894BA95A0F4D66 KSPROPERTY_VBICODECFILTERING_SCANLINES_S;
typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT *LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef struct _FT_MIRROR_SET_CONFIGURATION_INFORMATION *PFT_MIRROR_SET_CONFIGURATION_INFORMATION;
typedef struct _FT_STRIPE_SET_CONFIGURATION_INFORMATION *PFT_STRIPE_SET_CONFIGURATION_INFORMATION;
typedef struct _VBICODECFILTERING_STATISTICS_COMMON_PIN *PVBICODECFILTERING_STATISTICS_COMMON_PIN;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3 {unsigned int Lo;int Hi;};
typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION ACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef struct _FT_MIRROR_SET_CONFIGURATION_INFORMATION FT_MIRROR_SET_CONFIGURATION_INFORMATION;
typedef struct _FT_STRIPE_SET_CONFIGURATION_INFORMATION FT_STRIPE_SET_CONFIGURATION_INFORMATION;
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _FT_PARTITION_CONFIGURATION_INFORMATION *PFT_PARTITION_CONFIGURATION_INFORMATION;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _LSA_FOREST_TRUST_COLLISION_INFORMATION *PLSA_FOREST_TRUST_COLLISION_INFORMATION;
typedef struct _VBICODECFILTERING_STATISTICS_NABTS_PIN *PVBICODECFILTERING_STATISTICS_NABTS_PIN;
typedef struct _VBICODECFILTERING_STATISTICS_COMMON_PIN VBICODECFILTERING_STATISTICS_COMMON_PIN;
union _RemotableHandle____MIDL_IWinTypes_0009 {int hInproc;int hRemote;};
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA;
typedef struct _FT_PARTITION_CONFIGURATION_INFORMATION FT_PARTITION_CONFIGURATION_INFORMATION;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _LSA_FOREST_TRUST_COLLISION_INFORMATION LSA_FOREST_TRUST_COLLISION_INFORMATION;
typedef  struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _441EBF211493C42D9642F77D873F68D1 *PKSPROPERTY_VIDEOCOMPRESSION_GETINFO_S;
typedef struct _D2D205A4E5DA2498F5010F3E3EADEEBB *PKSPROPERTY_VIDEOCONTROL_FRAME_RATES_S;
typedef struct _VBICODECFILTERING_STATISTICS_TELETEXT *PVBICODECFILTERING_STATISTICS_TELETEXT;
typedef struct _VBICODECFILTERING_STATISTICS_NABTS_PIN VBICODECFILTERING_STATISTICS_NABTS_PIN;
typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
enum _POLICY_NOTIFICATION_INFORMATION_CLASS {PolicyNotifyAuditEventsInformation = 0x1,PolicyNotifyAccountDomainInformation = 0x2,PolicyNotifyServerRoleInformation = 0x3,PolicyNotifyDnsDomainInformation = 0x4,PolicyNotifyDomainEfsInformation = 0x5,PolicyNotifyDomainKerberosTicketInformation = 0x6,PolicyNotifyMachineAccountPasswordInformation = 0x7,};
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _441EBF211493C42D9642F77D873F68D1 KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S;
typedef struct _D2D205A4E5DA2498F5010F3E3EADEEBB KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S;
typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _KERB_ADD_BINDING_CACHE_ENTRY_REQUEST *PKERB_ADD_BINDING_CACHE_ENTRY_REQUEST;
typedef struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY *POFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef struct _VBICODECFILTERING_STATISTICS_TELETEXT VBICODECFILTERING_STATISTICS_TELETEXT;
typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION ACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
typedef struct _D3DHAL_VALIDATETEXTURESTAGESTATEDATA D3DHAL_VALIDATETEXTURESTAGESTATEDATA;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION JOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _KERB_ADD_BINDING_CACHE_ENTRY_REQUEST KERB_ADD_BINDING_CACHE_ENTRY_REQUEST;
typedef struct IDirectSoundCaptureFXNoiseSuppress *LPDIRECTSOUNDCAPTUREFXNOISESUPPRESS8;
typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY *LPWIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
enum MACRO_EVENT_EventlogAbnormalShutdown {EVENT_EventlogAbnormalShutdown = 0x80001778,EVENT_EventLogProductInfo = 0x80001779,EVENT_ServiceNoEventLog = 0xC000177A,EVENT_ComputerNameChange = 0xC000177B,EVENT_DNSDomainNameChange = 0xC000177C,EVENT_EventlogUptime = 0xC000177D,EVENT_LOG_BAD_CUSTOM_SD = 0xC000177F,EVENT_UP_DRIVER_ON_MP = 0xC00017D4,EVENT_SERVICE_START_FAILED = 0xC0001B58,EVENT_SERVICE_START_FAILED_II = 0xC0001B59,EVENT_SERVICE_START_FAILED_GROUP = 0xC0001B5A,EVENT_SERVICE_START_FAILED_NONE = 0xC0001B5B,EVENT_CALL_TO_FUNCTION_FAILED = 0xC0001B5D,EVENT_CALL_TO_FUNCTION_FAILED_II = 0xC0001B5E,EVENT_REVERTED_TO_LASTKNOWNGOOD = 0xC0001B5F,EVENT_BAD_ACCOUNT_NAME = 0xC0001B60,EVENT_CONNECTION_TIMEOUT = 0xC0001B61,EVENT_READFILE_TIMEOUT = 0xC0001B62,EVENT_TRANSACT_TIMEOUT = 0xC0001B63,EVENT_TRANSACT_INVALID = 0xC0001B64,EVENT_FIRST_LOGON_FAILED = 0xC0001B65,EVENT_SECOND_LOGON_FAILED = 0xC0001B66,EVENT_INVALID_DRIVER_DEPENDENCY = 0xC0001B67,EVENT_BAD_SERVICE_STATE = 0xC0001B68,EVENT_CIRCULAR_DEPENDENCY_DEMAND = 0xC0001B69,EVENT_CIRCULAR_DEPENDENCY_AUTO = 0xC0001B6A,EVENT_DEPEND_ON_LATER_SERVICE = 0xC0001B6B,EVENT_DEPEND_ON_LATER_GROUP = 0xC0001B6C,EVENT_SEVERE_SERVICE_FAILED = 0xC0001B6D,EVENT_SERVICE_START_HUNG = 0xC0001B6E,EVENT_SERVICE_EXIT_FAILED = 0xC0001B6F,EVENT_SERVICE_EXIT_FAILED_SPECIFIC = 0xC0001B70,EVENT_SERVICE_START_AT_BOOT_FAILED = 0xC0001B71,EVENT_BOOT_SYSTEM_DRIVERS_FAILED = 0xC0001B72,EVENT_RUNNING_LASTKNOWNGOOD = 0xC0001B73,EVENT_TAKE_OWNERSHIP = 0xC0001B74,};
enum MACRO_FE_FONTSMOOTHINGORIENTATIONBGR {FE_FONTSMOOTHINGORIENTATIONBGR = 0x0,FE_FONTSMOOTHINGORIENTATIONRGB = 0x1,};
typedef struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY;
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION *PCHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _FT_MIRROR_AND_SWP_STATE_INFORMATION *PFT_MIRROR_AND_SWP_STATE_INFORMATION;
typedef struct _FT_REDISTRIBUTION_STATE_INFORMATION *PFT_REDISTRIBUTION_STATE_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _782713D97F3B48E7FFD9354B90BFCE34 *PLOOPEDSTREAMING_POSITION_EVENT_DATA;
typedef struct NDIS_BPC_MEDIA_SPECIFIC_INFORMATION *PNDIS_BPC_MEDIA_SPECIFIC_INFORMATION;
typedef struct _VBICODECFILTERING_STATISTICS_CC_PIN *PVBICODECFILTERING_STATISTICS_CC_PIN;
typedef struct _VBICODECFILTERING_STATISTICS_COMMON *PVBICODECFILTERING_STATISTICS_COMMON;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
enum __MIDL_IInternetSecurityManager_0001 {PUAF_DEFAULT = 0x0,PUAF_NOUI = 0x1,PUAF_ISFILE = 0x2,PUAF_WARN_IF_DENIED = 0x4,PUAF_FORCEUI_FOREGROUND = 0x8,PUAF_CHECK_TIFS = 0x10,PUAF_DONTCHECKBOXINDIALOG = 0x20,PUAF_TRUSTED = 0x40,PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,PUAF_ENFORCERESTRICTED = 0x100,};
enum __MIDL_IInternetSecurityManager_0002 {SZM_CREATE = 0x0,SZM_DELETE = 0x1,};
enum __MIDL___MIDL_itf_shobjidl_0201_0001 {SHCOLSTATE_TYPE_STR = 0x1,SHCOLSTATE_TYPE_INT = 0x2,SHCOLSTATE_TYPE_DATE = 0x3,SHCOLSTATE_TYPEMASK = 0xF,SHCOLSTATE_ONBYDEFAULT = 0x10,SHCOLSTATE_SLOW = 0x20,SHCOLSTATE_EXTENDED = 0x40,SHCOLSTATE_SECONDARYUI = 0x80,SHCOLSTATE_HIDDEN = 0x100,SHCOLSTATE_PREFER_VARCMP = 0x200,};
enum __MIDL___MIDL_itf_shobjidl_0202_0001 {FWF_AUTOARRANGE = 0x1,FWF_ABBREVIATEDNAMES = 0x2,FWF_SNAPTOGRID = 0x4,FWF_OWNERDATA = 0x8,FWF_BESTFITWINDOW = 0x10,FWF_DESKTOP = 0x20,FWF_SINGLESEL = 0x40,FWF_NOSUBFOLDERS = 0x80,FWF_TRANSPARENT = 0x100,FWF_NOCLIENTEDGE = 0x200,FWF_NOSCROLL = 0x400,FWF_ALIGNLEFT = 0x800,FWF_NOICONS = 0x1000,FWF_SHOWSELALWAYS = 0x2000,FWF_NOVISIBLE = 0x4000,FWF_SINGLECLICKACTIVATE = 0x8000,FWF_NOWEBVIEW = 0x10000,FWF_HIDEFILENAMES = 0x20000,FWF_CHECKSELECT = 0x40000,};
enum __MIDL___MIDL_itf_shobjidl_0202_0002 {FVM_FIRST = 0x1,FVM_ICON = 0x1,FVM_SMALLICON = 0x2,FVM_LIST = 0x3,FVM_DETAILS = 0x4,FVM_THUMBNAIL = 0x5,FVM_TILE = 0x6,FVM_THUMBSTRIP = 0x7,FVM_LAST = 0x7,};
enum __MIDL___MIDL_itf_shobjidl_0202_0004 {SVGIO_BACKGROUND = 0x0,SVGIO_SELECTION = 0x1,SVGIO_ALLVIEW = 0x2,SVGIO_CHECKED = 0x3,SVGIO_TYPE_MASK = 0xF,SVGIO_FLAG_VIEWORDER = 0x80000000,};
enum __MIDL___MIDL_itf_shobjidl_0202_0005 {SVUIA_DEACTIVATE = 0x0,SVUIA_ACTIVATE_NOFOCUS = 0x1,SVUIA_ACTIVATE_FOCUS = 0x2,SVUIA_INPLACEACTIVATE = 0x3,};
enum __MIDL___MIDL_itf_shobjidl_0209_0001 {PUIFNF_DEFAULT = 0x0,PUIFNF_MNEMONIC = 0x1,};
enum __MIDL___MIDL_itf_shobjidl_0209_0002 {PUIF_DEFAULT = 0x0,PUIF_RIGHTALIGN = 0x1,PUIF_NOLABELININFOTIP = 0x2,};
enum __MIDL___MIDL_itf_shobjidl_0209_0003 {PUIFFDF_DEFAULT = 0x0,PUIFFDF_RIGHTTOLEFT = 0x1,PUIFFDF_SHORTFORMAT = 0x2,PUIFFDF_NOTIME = 0x4,PUIFFDF_FRIENDLYDATE = 0x8,PUIFFDF_NOUNITS = 0x10,};
enum __MIDL___MIDL_itf_shobjidl_0211_0001 {CATINFO_NORMAL = 0x0,CATINFO_COLLAPSED = 0x1,CATINFO_HIDDEN = 0x2,};
enum __MIDL___MIDL_itf_shobjidl_0211_0002 {CATSORT_DEFAULT = 0x0,CATSORT_NAME = 0x1,};
enum __MIDL___MIDL_itf_shobjidl_0212_0001 {SLR_NO_UI = 0x1,SLR_ANY_MATCH = 0x2,SLR_UPDATE = 0x4,SLR_NOUPDATE = 0x8,SLR_NOSEARCH = 0x10,SLR_NOTRACK = 0x20,SLR_NOLINKINFO = 0x40,SLR_INVOKE_MSI = 0x80,SLR_NO_UI_WITH_MSG_PUMP = 0x101,};
enum __MIDL___MIDL_itf_shobjidl_0212_0002 {SLGP_SHORTPATH = 0x1,SLGP_UNCPRIORITY = 0x2,SLGP_RAWPATH = 0x4,};
enum __MIDL___MIDL_itf_shobjidl_0230_0002 {DBID_BANDINFOCHANGED = 0x0,DBID_SHOWONLY = 0x1,DBID_MAXIMIZEBAND = 0x2,DBID_PUSHCHEVRON = 0x3,DBID_DELAYINIT = 0x4,DBID_FINISHINIT = 0x5,DBID_SETWINDOWTHEME = 0x6,DBID_PERMITAUTOHIDE = 0x7,};
enum __MIDL___MIDL_itf_shobjidl_0241_0001 {CDBE_RET_DEFAULT = 0x0,CDBE_RET_DONTRUNOTHEREXTS = 0x1,CDBE_RET_STOPWIZARD = 0x2,};
enum __MIDL___MIDL_itf_shobjidl_0247_0001 {BSID_BANDADDED = 0x0,BSID_BANDREMOVED = 0x1,};
enum __MIDL___MIDL_itf_shobjidl_0251_0001 {MPOS_EXECUTE = 0x0,MPOS_FULLCANCEL = 0x1,MPOS_CANCELLEVEL = 0x2,MPOS_SELECTLEFT = 0x3,MPOS_SELECTRIGHT = 0x4,MPOS_CHILDTRACKING = 0x5,};
enum __MIDL___MIDL_itf_shobjidl_0251_0002 {MPPF_SETFOCUS = 0x1,MPPF_INITIALSELECT = 0x2,MPPF_NOANIMATE = 0x4,MPPF_KEYBOARD = 0x10,MPPF_REPOSITION = 0x20,MPPF_FORCEZORDER = 0x40,MPPF_FINALSELECT = 0x80,MPPF_TOP = 0x20000000,MPPF_LEFT = 0x40000000,MPPF_RIGHT = 0x60000000,MPPF_BOTTOM = 0x80000000,MPPF_POS_MASK = 0xE0000000,};
enum __MIDL___MIDL_itf_shobjidl_0259_0001 {SMIM_TYPE = 0x1,SMIM_FLAGS = 0x2,SMIM_ICON = 0x4,};
enum __MIDL___MIDL_itf_shobjidl_0259_0002 {SMIT_SEPARATOR = 0x1,SMIT_STRING = 0x2,};
enum __MIDL___MIDL_itf_shobjidl_0259_0003 {SMIF_ICON = 0x1,SMIF_ACCELERATOR = 0x2,SMIF_DROPTARGET = 0x4,SMIF_SUBMENU = 0x8,SMIF_CHECKED = 0x20,SMIF_DROPCASCADE = 0x40,SMIF_HIDDEN = 0x80,SMIF_DISABLED = 0x100,SMIF_TRACKPOPUP = 0x200,SMIF_DEMOTED = 0x400,SMIF_ALTSTATE = 0x800,SMIF_DRAGNDROP = 0x1000,SMIF_NEW = 0x2000,};
enum __MIDL___MIDL_itf_wiavideo_0000_0001 {WIAVIDEO_NO_VIDEO = 0x1,WIAVIDEO_CREATING_VIDEO = 0x2,WIAVIDEO_VIDEO_CREATED = 0x3,WIAVIDEO_VIDEO_PLAYING = 0x4,WIAVIDEO_VIDEO_PAUSED = 0x5,WIAVIDEO_DESTROYING_VIDEO = 0x6,};
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION CHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _FT_MIRROR_AND_SWP_STATE_INFORMATION FT_MIRROR_AND_SWP_STATE_INFORMATION;
typedef struct _FT_REDISTRIBUTION_STATE_INFORMATION FT_REDISTRIBUTION_STATE_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _782713D97F3B48E7FFD9354B90BFCE34 LOOPEDSTREAMING_POSITION_EVENT_DATA;
typedef struct IDirectSoundCaptureFXNoiseSuppress *LPDIRECTSOUNDCAPTUREFXNOISESUPPRESS;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _1F0027E2ABF976FB8AD72E88DC9BB28B *PKSPROPERTY_DROPPEDFRAMES_CURRENT_S;
typedef struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO *PPOLICY_DOMAIN_KERBEROS_TICKET_INFO;
typedef struct _VBICODECFILTERING_NABTS_SUBSTREAMS *PVBICODECFILTERING_NABTS_SUBSTREAMS;
typedef struct _VBICODECFILTERING_STATISTICS_NABTS *PVBICODECFILTERING_STATISTICS_NABTS;
typedef struct _VBICODECFILTERING_STATISTICS_CC_PIN VBICODECFILTERING_STATISTICS_CC_PIN;
typedef struct _VBICODECFILTERING_STATISTICS_COMMON VBICODECFILTERING_STATISTICS_COMMON;
enum _NDIS_802_11_NETWORK_INFRASTRUCTURE {Ndis802_11IBSS = 0x0,Ndis802_11Infrastructure = 0x1,Ndis802_11AutoUnknown = 0x2,Ndis802_11InfrastructureMax = 0x3,};
enum tagEOLE_AUTHENTICATION_CAPABILITIES {EOAC_NONE = 0x0,EOAC_MUTUAL_AUTH = 0x1,EOAC_STATIC_CLOAKING = 0x20,EOAC_DYNAMIC_CLOAKING = 0x40,EOAC_ANY_AUTHORITY = 0x80,EOAC_MAKE_FULLSIC = 0x100,EOAC_DEFAULT = 0x800,EOAC_SECURE_REFS = 0x2,EOAC_ACCESS_CONTROL = 0x4,EOAC_APPID = 0x8,EOAC_DYNAMIC = 0x10,EOAC_REQUIRE_FULLSIC = 0x200,EOAC_AUTO_IMPERSONATE = 0x400,EOAC_NO_CUSTOM_MARSHAL = 0x2000,EOAC_DISABLE_AAA = 0x1000,};
enum tag_WBEM_PROVIDER_REQUIREMENTS_TYPE {WBEM_REQUIREMENTS_START_POSTFILTER = 0x0,WBEM_REQUIREMENTS_STOP_POSTFILTER = 0x1,WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS = 0x2,};
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION ASSEMBLY_FILE_DETAILED_INFORMATION;
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA;
typedef struct IDirectDrawVideoPortNotifyVtbl DIRECTDRAWVIDEOPORTNOTIFYCALLBACKS;
struct IDirectSoundCaptureFXNoiseSuppress {struct IDirectSoundCaptureFXNoiseSuppressVtbl *lpVtbl;};
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _1F0027E2ABF976FB8AD72E88DC9BB28B KSPROPERTY_DROPPEDFRAMES_CURRENT_S;
typedef struct _D3DNTHAL_DP2INDEXEDTRIANGLELIST2 *LPD3DNTHAL_DP2INDEXEDTRIANGLELIST2;
enum MACRO_D3DPTEXTURECAPS_TRANSPARENCY {D3DPTEXTURECAPS_TRANSPARENCY = 0x8,D3DPTEXTURECAPS_BORDER = 0x10,D3DPTEXTURECAPS_COLORKEYBLEND = 0x1000,};
enum MACRO_EEInfoPreviousRecordsMissing {EEInfoPreviousRecordsMissing = 1,EEInfoNextRecordsMissing = 2,EEInfoUseFileTime = 4,EEInfoGCCOM = 11,};
enum MACRO_SPI_GETFONTSMOOTHINGCONTRAST {SPI_GETFONTSMOOTHINGCONTRAST = 0x200C,SPI_SETFONTSMOOTHINGCONTRAST = 0x200D,SPI_GETFOCUSBORDERWIDTH = 0x200E,SPI_SETFOCUSBORDERWIDTH = 0x200F,SPI_GETFOCUSBORDERHEIGHT = 0x2010,SPI_SETFOCUSBORDERHEIGHT = 0x2011,SPI_GETFONTSMOOTHINGORIENTATION = 0x2012,SPI_SETFONTSMOOTHINGORIENTATION = 0x2013,};
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE *PCERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS *PCHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS *PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _7445C9FCFCC2899651BCA0E341BC0369 *PKSNODEPROPERTY_AUDIO_DEV_SPECIFIC;
typedef struct _LSA_FOREST_TRUST_COLLISION_RECORD *PLSA_FOREST_TRUST_COLLISION_RECORD;
typedef struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO POLICY_DOMAIN_KERBEROS_TICKET_INFO;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A *PSP_DEVICE_INTERFACE_DETAIL_DATA_A;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *PSP_DEVICE_INTERFACE_DETAIL_DATA_W;
typedef struct STORAGE_BREAK_RESERVATION_REQUEST *PSTORAGE_BREAK_RESERVATION_REQUEST;
typedef unsigned char *( *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned int *, unsigned char *, void *);
typedef struct _VBICODECFILTERING_NABTS_SUBSTREAMS VBICODECFILTERING_NABTS_SUBSTREAMS;
typedef struct _VBICODECFILTERING_STATISTICS_NABTS VBICODECFILTERING_STATISTICS_NABTS;
typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY WIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
enum _D3DSHADER_INSTRUCTION_OPCODE_TYPE {D3DSIO_NOP = 0x0,D3DSIO_MOV = 0x1,D3DSIO_ADD = 0x2,D3DSIO_SUB = 0x3,D3DSIO_MAD = 0x4,D3DSIO_MUL = 0x5,D3DSIO_RCP = 0x6,D3DSIO_RSQ = 0x7,D3DSIO_DP3 = 0x8,D3DSIO_DP4 = 0x9,D3DSIO_MIN = 0xA,D3DSIO_MAX = 0xB,D3DSIO_SLT = 0xC,D3DSIO_SGE = 0xD,D3DSIO_EXP = 0xE,D3DSIO_LOG = 0xF,D3DSIO_LIT = 0x10,D3DSIO_DST = 0x11,D3DSIO_LRP = 0x12,D3DSIO_FRC = 0x13,D3DSIO_M4x4 = 0x14,D3DSIO_M4x3 = 0x15,D3DSIO_M3x4 = 0x16,D3DSIO_M3x3 = 0x17,D3DSIO_M3x2 = 0x18,D3DSIO_TEXCOORD = 0x40,D3DSIO_TEXKILL = 0x41,D3DSIO_TEX = 0x42,D3DSIO_TEXBEM = 0x43,D3DSIO_TEXBEML = 0x44,D3DSIO_TEXREG2AR = 0x45,D3DSIO_TEXREG2GB = 0x46,D3DSIO_TEXM3x2PAD = 0x47,D3DSIO_TEXM3x2TEX = 0x48,D3DSIO_TEXM3x3PAD = 0x49,D3DSIO_TEXM3x3TEX = 0x4A,D3DSIO_TEXM3x3DIFF = 0x4B,D3DSIO_TEXM3x3SPEC = 0x4C,D3DSIO_TEXM3x3VSPEC = 0x4D,D3DSIO_EXPP = 0x4E,D3DSIO_LOGP = 0x4F,D3DSIO_CND = 0x50,D3DSIO_DEF = 0x51,D3DSIO_TEXREG2RGB = 0x52,D3DSIO_TEXDP3TEX = 0x53,D3DSIO_TEXM3x2DEPTH = 0x54,D3DSIO_TEXDP3 = 0x55,D3DSIO_TEXM3x3 = 0x56,D3DSIO_TEXDEPTH = 0x57,D3DSIO_CMP = 0x58,D3DSIO_BEM = 0x59,D3DSIO_PHASE = 0xFFFD,D3DSIO_COMMENT = 0xFFFE,D3DSIO_END = 0xFFFF,D3DSIO_FORCE_DWORD = 0x7FFFFFFF,};
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {LowMemoryResourceNotification = 0x0,HighMemoryResourceNotification = 0x1,};
enum __MIDL___MIDL_itf_objidl_0055_0001 {COMBND_RPCTIMEOUT = 0x1,COMBND_SERVER_LOCALITY = 0x2,};
enum __MIDL___MIDL_itf_objidl_0055_0002 {SERVER_LOCALITY_PROCESS_LOCAL = 0x0,SERVER_LOCALITY_MACHINE_LOCAL = 0x1,SERVER_LOCALITY_REMOTE = 0x2,};
enum _023C071F6B2DC664943C68B81541179C {KSPROPERTY_STREAM_ALLOCATOR = 0x0,KSPROPERTY_STREAM_QUALITY = 0x1,KSPROPERTY_STREAM_DEGRADATION = 0x2,KSPROPERTY_STREAM_MASTERCLOCK = 0x3,KSPROPERTY_STREAM_TIMEFORMAT = 0x4,KSPROPERTY_STREAM_PRESENTATIONTIME = 0x5,KSPROPERTY_STREAM_PRESENTATIONEXTENT = 0x6,KSPROPERTY_STREAM_FRAMETIME = 0x7,KSPROPERTY_STREAM_RATECAPABILITY = 0x8,KSPROPERTY_STREAM_RATE = 0x9,KSPROPERTY_STREAM_PIPE_ID = 0xA,};
enum _02FAD7642A42DC49E4482F6F328202A2 {KSMETHOD_BDA_CREATE_PIN_FACTORY = 0x0,KSMETHOD_BDA_DELETE_PIN_FACTORY = 0x1,KSMETHOD_BDA_CREATE_TOPOLOGY = 0x2,};
enum _05DAA4B528850479245A9C123C494191 {KSPROPERTY_DVDSUBPIC_PALETTE = 0x0,KSPROPERTY_DVDSUBPIC_HLI = 0x1,KSPROPERTY_DVDSUBPIC_COMPOSIT_ON = 0x2,};
enum _09A34D7915C9A95B91A5C3C199852FD2 {KSPROPERTY_CROSSBAR_CAPS = 0x0,KSPROPERTY_CROSSBAR_PININFO = 0x1,KSPROPERTY_CROSSBAR_CAN_ROUTE = 0x2,KSPROPERTY_CROSSBAR_ROUTE = 0x3,};
enum _0A77555B03865B677ABEDAD45C36FB86 {KSPROPERTY_MEDIASEEKING_CAPABILITIES = 0x0,KSPROPERTY_MEDIASEEKING_FORMATS = 0x1,KSPROPERTY_MEDIASEEKING_TIMEFORMAT = 0x2,KSPROPERTY_MEDIASEEKING_POSITION = 0x3,KSPROPERTY_MEDIASEEKING_STOPPOSITION = 0x4,KSPROPERTY_MEDIASEEKING_POSITIONS = 0x5,KSPROPERTY_MEDIASEEKING_DURATION = 0x6,KSPROPERTY_MEDIASEEKING_AVAILABLE = 0x7,KSPROPERTY_MEDIASEEKING_PREROLL = 0x8,KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT = 0x9,};
enum _0AEECC1A63E1B2F73D11FBA74082B60B {PROXY_CALCSIZE = 0x0,PROXY_GETBUFFER = 0x1,PROXY_MARSHAL = 0x2,PROXY_SENDRECEIVE = 0x3,PROXY_UNMARSHAL = 0x4,};
enum _0B04060F21BCD959670CDC2C41862B4B {KSPROPERTY_TUNER_MODE_TV = 0x1,KSPROPERTY_TUNER_MODE_FM_RADIO = 0x2,KSPROPERTY_TUNER_MODE_AM_RADIO = 0x4,KSPROPERTY_TUNER_MODE_DSS = 0x8,KSPROPERTY_TUNER_MODE_ATSC = 0x10,};
enum _0B804802F465170881F43A3A4D8457F6 {KSPROPERTY_BDA_PIDFILTER_MAP_PIDS = 0x0,KSPROPERTY_BDA_PIDFILTER_UNMAP_PIDS = 0x1,KSPROPERTY_BDA_PIDFILTER_LIST_PIDS = 0x2,};
enum _0BB80D20224D17CF959CD73271A83581 {IpSuffixOriginOther = 0x0,IpSuffixOriginManual = 0x1,IpSuffixOriginWellKnown = 0x2,IpSuffixOriginDhcp = 0x3,IpSuffixOriginLinkLayerAddress = 0x4,IpSuffixOriginRandom = 0x5,};
enum _0C48B1A02A365DA9EEBAB619832376BC {KS_AMVP_DO_NOT_CARE = 0x0,KS_AMVP_BEST_BANDWIDTH = 0x1,KS_AMVP_INPUT_SAME_AS_OUTPUT = 0x2,};
enum _0CCF2589EBE4C99CC2ECB8B07AE7CB21 {KS_MPEG2Profile_Simple = 0x0,KS_MPEG2Profile_Main = 0x1,KS_MPEG2Profile_SNRScalable = 0x2,KS_MPEG2Profile_SpatiallyScalable = 0x3,KS_MPEG2Profile_High = 0x4,};
enum _0CEF0E5B2940D691FFAB7BACF5F589FA {ISHCUTCMDID_DOWNLOADICON = 0x0,ISHCUTCMDID_INTSHORTCUTCREATE = 0x1,};
enum _0FC989869F227A36D749990E523E5F04 {PowerActionNone = 0x0,PowerActionReserved = 0x1,PowerActionSleep = 0x2,PowerActionHibernate = 0x3,PowerActionShutdown = 0x4,PowerActionShutdownReset = 0x5,PowerActionShutdownOff = 0x6,PowerActionWarmEject = 0x7,};
enum _10A2290A9151EB22E54343EBB643574E {SystemPowerPolicyAc = 0x0,SystemPowerPolicyDc = 0x1,VerifySystemPolicyAc = 0x2,VerifySystemPolicyDc = 0x3,SystemPowerCapabilities = 0x4,SystemBatteryState = 0x5,SystemPowerStateHandler = 0x6,ProcessorStateHandler = 0x7,SystemPowerPolicyCurrent = 0x8,AdministratorPowerPolicy = 0x9,SystemReserveHiberFile = 0xA,ProcessorInformation = 0xB,SystemPowerInformation = 0xC,ProcessorStateHandler2 = 0xD,LastWakeTime = 0xE,LastSleepTime = 0xF,SystemExecutionState = 0x10,SystemPowerStateNotifyHandler = 0x11,ProcessorPowerPolicyAc = 0x12,ProcessorPowerPolicyDc = 0x13,VerifyProcessorPowerPolicyAc = 0x14,VerifyProcessorPowerPolicyDc = 0x15,ProcessorPowerPolicyCurrent = 0x16,SystemPowerStateLogging = 0x17,SystemPowerLoggingEntry = 0x18,};
enum _13CC20D9AD0BBA5D63681FE6203B0C08 {BIDI_NULL = 0x0,BIDI_INT = 0x1,BIDI_FLOAT = 0x2,BIDI_BOOL = 0x3,BIDI_STRING = 0x4,BIDI_TEXT = 0x5,BIDI_ENUM = 0x6,BIDI_BLOB = 0x7,};
enum _15BE81F150E916D067B91AF6607573F2 {HHWIN_NAVTYPE_TOC = 0x0,HHWIN_NAVTYPE_INDEX = 0x1,HHWIN_NAVTYPE_SEARCH = 0x2,HHWIN_NAVTYPE_FAVORITES = 0x3,HHWIN_NAVTYPE_HISTORY = 0x4,HHWIN_NAVTYPE_AUTHOR = 0x5,HHWIN_NAVTYPE_CUSTOM_FIRST = 0xB,};
enum _15EAB5DB270905D3ADC7E2FB667B7EB6 {KSPROPERTY_BDA_PIN_ID = 0x0,KSPROPERTY_BDA_PIN_TYPE = 0x1,};
enum _1737843133A6E4DC3631406BF92A2320 {KSPROPERTY_BDA_TABLE_SECTION = 0x0,};
enum _179945923F574A37108B154726F97D56 {KSPROPERTY_VIDEOCOMPRESSION_GETINFO = 0x0,KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE = 0x1,KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME = 0x2,KSPROPERTY_VIDEOCOMPRESSION_QUALITY = 0x3,KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME = 0x4,KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE = 0x5,KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE = 0x6,};
struct _18FEA12C471CE0A4515515C42723EF45 {int iLow;int iHigh;};
enum _1D78DD8871C05E6FD7D3820402F49BC1 {IfOperStatusUp = 0x1,IfOperStatusDown = 0x2,IfOperStatusTesting = 0x3,IfOperStatusUnknown = 0x4,IfOperStatusDormant = 0x5,IfOperStatusNotPresent = 0x6,IfOperStatusLowerLayerDown = 0x7,};
enum _1FFC3954F3EEED4BA40483519ADC2C52 {KSPROPERTY_BDA_ECM_MAP_STATUS = 0x0,KSPROPERTY_BDA_CA_MODULE_STATUS = 0x1,KSPROPERTY_BDA_CA_SMART_CARD_STATUS = 0x2,KSPROPERTY_BDA_CA_MODULE_UI = 0x3,KSPROPERTY_BDA_CA_SET_PROGRAM_PIDS = 0x4,KSPROPERTY_BDA_CA_REMOVE_PROGRAM = 0x5,};
enum _204D9DB0479990E1799BA37F02894952 {URL_SCHEME_INVALID = 0xFFFFFFFF,URL_SCHEME_UNKNOWN = 0x0,URL_SCHEME_FTP = 0x1,URL_SCHEME_HTTP = 0x2,URL_SCHEME_GOPHER = 0x3,URL_SCHEME_MAILTO = 0x4,URL_SCHEME_NEWS = 0x5,URL_SCHEME_NNTP = 0x6,URL_SCHEME_TELNET = 0x7,URL_SCHEME_WAIS = 0x8,URL_SCHEME_FILE = 0x9,URL_SCHEME_MK = 0xA,URL_SCHEME_HTTPS = 0xB,URL_SCHEME_SHELL = 0xC,URL_SCHEME_SNEWS = 0xD,URL_SCHEME_LOCAL = 0xE,URL_SCHEME_JAVASCRIPT = 0xF,URL_SCHEME_VBSCRIPT = 0x10,URL_SCHEME_ABOUT = 0x11,URL_SCHEME_RES = 0x12,URL_SCHEME_MSSHELLROOTED = 0x13,URL_SCHEME_MSSHELLIDLIST = 0x14,URL_SCHEME_MSHELP = 0x15,URL_SCHEME_MAXVALUE = 0x16,};
enum _214B3FAB360CFC0FA4B19913ED3BE09A {KSMETHOD_STREAMIO_READ = 0x0,KSMETHOD_STREAMIO_WRITE = 0x1,};
enum _219D11F677061808D19E166038DCDF6D {KS_TUNER_TUNING_EXACT = 0x1,KS_TUNER_TUNING_FINE = 0x2,KS_TUNER_TUNING_COARSE = 0x3,};
enum _222C5FE2FBB310101DEF802D75341780 {KSPROPERTY_HRTF3D_PARAMS = 0x0,KSPROPERTY_HRTF3D_INITIALIZE = 0x1,KSPROPERTY_HRTF3D_FILTER_FORMAT = 0x2,};
enum _2388D0CB73CB11DFDEA2035054DDD33D {KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS = 0x0,KSPROPERTY_VIDEOPROCAMP_CONTRAST = 0x1,KSPROPERTY_VIDEOPROCAMP_HUE = 0x2,KSPROPERTY_VIDEOPROCAMP_SATURATION = 0x3,KSPROPERTY_VIDEOPROCAMP_SHARPNESS = 0x4,KSPROPERTY_VIDEOPROCAMP_GAMMA = 0x5,KSPROPERTY_VIDEOPROCAMP_COLORENABLE = 0x6,KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE = 0x7,KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION = 0x8,KSPROPERTY_VIDEOPROCAMP_GAIN = 0x9,};
enum _248C98C84AD026B4080DDE86FD8C0CD8 {FD_CLSID = 0x1,FD_SIZEPOINT = 0x2,FD_ATTRIBUTES = 0x4,FD_CREATETIME = 0x8,FD_ACCESSTIME = 0x10,FD_WRITESTIME = 0x20,FD_FILESIZE = 0x40,FD_PROGRESSUI = 0x4000,FD_LINKUI = 0x8000,};
enum _24B7ECD4AC03C444748AD3E8BD37C202 {ASSOCDATA_MSIDESCRIPTOR = 0x1,ASSOCDATA_NOACTIVATEHANDLER = 0x2,ASSOCDATA_QUERYCLASSSTORE = 0x3,ASSOCDATA_HASPERUSERASSOC = 0x4,ASSOCDATA_EDITFLAGS = 0x5,ASSOCDATA_VALUE = 0x6,ASSOCDATA_MAX = 0x7,};
struct _25CE079B09F538272C66874FFD3C2C16 {unsigned int WireCodeset;unsigned int DesiredReceivingCodeset;void *CSArrayInfo;};
enum _2670392E564180BCAB600D3A48500581 {KSPROPERTY_BDA_MODULATION_TYPE = 0x0,KSPROPERTY_BDA_INNER_FEC_TYPE = 0x1,KSPROPERTY_BDA_INNER_FEC_RATE = 0x2,KSPROPERTY_BDA_OUTER_FEC_TYPE = 0x3,KSPROPERTY_BDA_OUTER_FEC_RATE = 0x4,KSPROPERTY_BDA_SYMBOL_RATE = 0x5,KSPROPERTY_BDA_SPECTRAL_INVERSION = 0x6,KSPROPERTY_BDA_GUARD_INTERVAL = 0x7,KSPROPERTY_BDA_TRANSMISSION_MODE = 0x8,};
enum _270C55D2D3E5E2B5C5E1C425B61D62C1 {KSPROPERTY_VPCONFIG_NUMCONNECTINFO = 0x0,KSPROPERTY_VPCONFIG_GETCONNECTINFO = 0x1,KSPROPERTY_VPCONFIG_SETCONNECTINFO = 0x2,KSPROPERTY_VPCONFIG_VPDATAINFO = 0x3,KSPROPERTY_VPCONFIG_MAXPIXELRATE = 0x4,KSPROPERTY_VPCONFIG_INFORMVPINPUT = 0x5,KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT = 0x6,KSPROPERTY_VPCONFIG_GETVIDEOFORMAT = 0x7,KSPROPERTY_VPCONFIG_SETVIDEOFORMAT = 0x8,KSPROPERTY_VPCONFIG_INVERTPOLARITY = 0x9,KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY = 0xA,KSPROPERTY_VPCONFIG_SCALEFACTOR = 0xB,KSPROPERTY_VPCONFIG_DDRAWHANDLE = 0xC,KSPROPERTY_VPCONFIG_VIDEOPORTID = 0xD,KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE = 0xE,KSPROPERTY_VPCONFIG_SURFACEPARAMS = 0xF,};
enum _27AD37380C8900BF8828E9942DAD6F74 {KS_PixAspectRatio_NTSC4x3 = 0x0,KS_PixAspectRatio_NTSC16x9 = 0x1,KS_PixAspectRatio_PAL4x3 = 0x2,KS_PixAspectRatio_PAL16x9 = 0x3,};
enum _27EA88566304FD4A859B4EB0EE874253 {KSPROPERTY_GENERAL_COMPONENTID = 0x0,};
enum _2811190B5E8A43AD046E3AEC6C4B4077 {KSPROPERTY_AC3_ERROR_CONCEALMENT = 0x1,KSPROPERTY_AC3_ALTERNATE_AUDIO = 0x2,KSPROPERTY_AC3_DOWNMIX = 0x3,KSPROPERTY_AC3_BIT_STREAM_MODE = 0x4,KSPROPERTY_AC3_DIALOGUE_LEVEL = 0x5,KSPROPERTY_AC3_LANGUAGE_CODE = 0x6,KSPROPERTY_AC3_ROOM_TYPE = 0x7,};
enum _2A6324B8E10DEE2666A6A5498DFC667B {XLAT_SERVER = 0x1,XLAT_CLIENT = 0x2,};
enum _2CD358AE72CA35E88B6E5377F4286C0E {KSMETHOD_WAVETABLE_WAVE_ALLOC = 0x0,KSMETHOD_WAVETABLE_WAVE_FREE = 0x1,KSMETHOD_WAVETABLE_WAVE_FIND = 0x2,KSMETHOD_WAVETABLE_WAVE_WRITE = 0x3,};
enum _2CD99A42A273050CD294312F877025C7 {URL_PART_NONE = 0x0,URL_PART_SCHEME = 0x1,URL_PART_HOSTNAME = 0x2,URL_PART_USERNAME = 0x3,URL_PART_PASSWORD = 0x4,URL_PART_PORT = 0x5,URL_PART_QUERY = 0x6,};
enum _2D06E770D8F86C31A6EBC72A59D3B380 {KSPROPERTY_MPEG2VID_MODES = 0x0,KSPROPERTY_MPEG2VID_CUR_MODE = 0x1,KSPROPERTY_MPEG2VID_4_3_RECT = 0x2,KSPROPERTY_MPEG2VID_16_9_RECT = 0x3,KSPROPERTY_MPEG2VID_16_9_PANSCAN = 0x4,};
enum _2DEFE1B87100719F80278A026CBFF4D7 {KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT = 0x0,KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE = 0x1,KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS = 0x2,KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE = 0x3,};
enum _2E38A7C1F534E42343A61A8545C8A30E {KSPROPERTY_QUALITY_REPORT = 0x0,KSPROPERTY_QUALITY_ERROR = 0x1,};
enum _2E80CEBFECBA0EBADF6AA183D61A87F6 {KSEVENT_CYCLIC_TIME_INTERVAL = 0x0,};
enum _31EF7763C4AEC8DD07C218DFAFDEDAB8 {ICMP4_ECHO_REPLY = 0x0,ICMP4_DST_UNREACH = 0x3,ICMP4_SOURCE_QUENCH = 0x4,ICMP4_REDIRECT = 0x5,ICMP4_ECHO_REQUEST = 0x8,ICMP4_ROUTER_ADVERT = 0x9,ICMP4_ROUTER_SOLICIT = 0xA,ICMP4_TIME_EXCEEDED = 0xB,ICMP4_PARAM_PROB = 0xC,ICMP4_TIMESTAMP_REQUEST = 0xD,ICMP4_TIMESTAMP_REPLY = 0xE,ICMP4_MASK_REQUEST = 0x11,ICMP4_MASK_REPLY = 0x12,};
enum _323950C9678C627AEFAD637828B7290C {BDA_PROMISCUOUS_MULTICAST = 0x0,BDA_FILTERED_MULTICAST = 0x1,BDA_NO_MULTICAST = 0x2,};
enum _32421077C2010E274338AC2C523E1512 {KS_SEEKING_CanSeekAbsolute = 0x1,KS_SEEKING_CanSeekForwards = 0x2,KS_SEEKING_CanSeekBackwards = 0x4,KS_SEEKING_CanGetCurrentPos = 0x8,KS_SEEKING_CanGetStopPos = 0x10,KS_SEEKING_CanGetDuration = 0x20,KS_SEEKING_CanPlayBackwards = 0x40,};
enum _34531D842D203BC4328A5673C26F0BE0 {WMI_GET_ALL_DATA = 0x0,WMI_GET_SINGLE_INSTANCE = 0x1,WMI_SET_SINGLE_INSTANCE = 0x2,WMI_SET_SINGLE_ITEM = 0x3,WMI_ENABLE_EVENTS = 0x4,WMI_DISABLE_EVENTS = 0x5,WMI_ENABLE_COLLECTION = 0x6,WMI_DISABLE_COLLECTION = 0x7,WMI_REGINFO = 0x8,WMI_EXECUTE_METHOD = 0x9,};
enum _38DCB8AC08778B6D83885D33F45337CD {KSPROPERTY_DIRECTSOUND3DLISTENER_ALL = 0x0,KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION = 0x1,KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY = 0x2,KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION = 0x3,KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR = 0x4,KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR = 0x5,KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR = 0x6,KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH = 0x7,KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION = 0x8,};
enum _3A65399903FADBC05E4C10BA9E609C32 {KSINTERFACE_MEDIA_MUSIC = 0x0,KSINTERFACE_MEDIA_WAVE_BUFFERED = 0x1,KSINTERFACE_MEDIA_WAVE_QUEUED = 0x2,};
enum _3A6E283929B5F392AC4E4FEBB8743BCE {IpDadStateInvalid = 0x0,IpDadStateTentative = 0x1,IpDadStateDuplicate = 0x2,IpDadStateDeprecated = 0x3,IpDadStatePreferred = 0x4,};
enum _3A98730CE8FA5C41DCBE091A69EDD8A4 {KSEVENT_VPVBINOTIFY_FORMATCHANGE = 0x0,};
enum _3B2A1EAD1C50A2BC68F8CFAB6412CACA {URLIS_URL = 0x0,URLIS_OPAQUE = 0x1,URLIS_NOHISTORY = 0x2,URLIS_FILEURL = 0x3,URLIS_APPLIABLE = 0x4,URLIS_DIRECTORY = 0x5,URLIS_HASQUERY = 0x6,};
enum _3EA7B843474756A7097D14E94E071D01 {SLDF_HAS_ID_LIST = 0x1,SLDF_HAS_LINK_INFO = 0x2,SLDF_HAS_NAME = 0x4,SLDF_HAS_RELPATH = 0x8,SLDF_HAS_WORKINGDIR = 0x10,SLDF_HAS_ARGS = 0x20,SLDF_HAS_ICONLOCATION = 0x40,SLDF_UNICODE = 0x80,SLDF_FORCE_NO_LINKINFO = 0x100,SLDF_HAS_EXP_SZ = 0x200,SLDF_RUN_IN_SEPARATE = 0x400,SLDF_HAS_LOGO3ID = 0x800,SLDF_HAS_DARWINID = 0x1000,SLDF_RUNAS_USER = 0x2000,SLDF_HAS_EXP_ICON_SZ = 0x4000,SLDF_NO_PIDL_ALIAS = 0x8000,SLDF_FORCE_UNCNAME = 0x10000,SLDF_RUN_WITH_SHIMLAYER = 0x20000,SLDF_RESERVED = 0x80000000,};
enum _3EB7CD5A2478AE20126886459846210D {KSPROPERTY_BDA_AUTODEMODULATE_START = 0x0,KSPROPERTY_BDA_AUTODEMODULATE_STOP = 0x1,};
enum _3F0E1F32807E838958D0814D130CFE59 {KS_AM_RATE_SimpleRateChange = 0x1,KS_AM_RATE_ExactRateChange = 0x2,KS_AM_RATE_MaxFullDataRate = 0x3,KS_AM_RATE_Step = 0x4,};
struct _3FA64165D15A4602C29B2D9B0DA4A5E9 {void *pad[2];void *userContext;};
enum _40D556E8D55E8D9923794DF551BBBC44 {SFBID_PIDLCHANGED = 0x0,};
enum _4218CD2CD980A290FF820393F4F33E3B {SHREGENUM_DEFAULT = 0x0,SHREGENUM_HKCU = 0x1,SHREGENUM_HKLM = 0x10,SHREGENUM_BOTH = 0x11,};
enum _4359A6DF66D6C0A2E03091CE4CF62226 {KSDEGRADE_STANDARD_SAMPLE = 0x0,KSDEGRADE_STANDARD_QUALITY = 0x1,KSDEGRADE_STANDARD_COMPUTATION = 0x2,KSDEGRADE_STANDARD_SKIP = 0x3,};
enum _4470FE8B63079359E3D9034B5AD4F260 {DSFXR_PRESENT = 0x0,DSFXR_LOCHARDWARE = 0x1,DSFXR_LOCSOFTWARE = 0x2,DSFXR_UNALLOCATED = 0x3,DSFXR_FAILED = 0x4,DSFXR_UNKNOWN = 0x5,DSFXR_SENDLOOP = 0x6,};
enum _46FFE91252AC4BB1103ECF2E486A148F {KS_CompressionCaps_CanQuality = 0x1,KS_CompressionCaps_CanCrunch = 0x2,KS_CompressionCaps_CanKeyFrame = 0x4,KS_CompressionCaps_CanBFrame = 0x8,KS_CompressionCaps_CanWindow = 0x10,};
enum _49B4DF22A98C0153E90C1246F17F787B {KSPROPERTY_VIDEOENCODER_CAPS = 0x0,KSPROPERTY_VIDEOENCODER_STANDARD = 0x1,KSPROPERTY_VIDEOENCODER_COPYPROTECTION = 0x2,KSPROPERTY_VIDEOENCODER_CC_ENABLE = 0x3,};
enum _4B933B38561F3202E8B681F2D4CA4B1B {KS_MPEG2Level_Low = 0x0,KS_MPEG2Level_Main = 0x1,KS_MPEG2Level_High1440 = 0x2,KS_MPEG2Level_High = 0x3,};
enum _4FF2CEF7F943208657A69CE25EA0FE31 {BDA_CHANGES_COMPLETE = 0x0,BDA_CHANGES_PENDING = 0x1,};
enum _54AE5E5F19366D8071D858EB4F56617A {KSPROPERTY_AEC_NOISE_FILL_ENABLE = 0x0,KSPROPERTY_AEC_STATUS = 0x1,KSPROPERTY_AEC_MODE = 0x2,};
enum _54D1217281E665BD6612625E66C9E748 {LM_HB_Extension = 0x80,LM_HB1_PnP = 0x1,LM_HB1_PDA_Palmtop = 0x2,LM_HB1_Computer = 0x4,LM_HB1_Printer = 0x8,LM_HB1_Modem = 0x10,LM_HB1_Fax = 0x20,LM_HB1_LANAccess = 0x40,LM_HB2_Telephony = 0x1,LM_HB2_FileServer = 0x2,};
struct _5687B37E6A0F56297A2BB22AF6770AC6 {int fShowAllObjects : 1;int fShowExtensions : 1;int fNoConfirmRecycle : 1;int fShowSysFiles : 1;int fShowCompColor : 1;int fDoubleClickInWebView : 1;int fDesktopHTML : 1;int fWin95Classic : 1;int fDontPrettyPath : 1;int fShowAttribCol : 1;int fMapNetDrvBtn : 1;int fShowInfoTip : 1;int fHideIcons : 1;unsigned int fRestFlags : 3;};
enum _59F47961FEC953F20A64EC788B1D06EA {KSPROPERTY_TVAUDIO_CAPS = 0x0,KSPROPERTY_TVAUDIO_MODE = 0x1,KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES = 0x2,};
enum _5BA8699F8741A720A1AB2749ED431340 {SetupFileLogSourceFilename = 0x0,SetupFileLogChecksum = 0x1,SetupFileLogDiskTagfile = 0x2,SetupFileLogDiskDescription = 0x3,SetupFileLogOtherInfo = 0x4,SetupFileLogMax = 0x5,};
enum _5DA232089AAC7698584D5CE3C3A8D71B {KSPROPERTY_CAMERACONTROL_PAN = 0x0,KSPROPERTY_CAMERACONTROL_TILT = 0x1,KSPROPERTY_CAMERACONTROL_ROLL = 0x2,KSPROPERTY_CAMERACONTROL_ZOOM = 0x3,KSPROPERTY_CAMERACONTROL_EXPOSURE = 0x4,KSPROPERTY_CAMERACONTROL_IRIS = 0x5,KSPROPERTY_CAMERACONTROL_FOCUS = 0x6,};
enum _5F4F90A626A6FDB67639732D9E3389D6 {KSPROPERTY_CONNECTION_STATE = 0x0,KSPROPERTY_CONNECTION_PRIORITY = 0x1,KSPROPERTY_CONNECTION_DATAFORMAT = 0x2,KSPROPERTY_CONNECTION_ALLOCATORFRAMING = 0x3,KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT = 0x4,KSPROPERTY_CONNECTION_ACQUIREORDERING = 0x5,KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX = 0x6,KSPROPERTY_CONNECTION_STARTAT = 0x7,};
enum _5FB78AF4F827B2D68807439224CA6C47 {OLECMDIDF_REFRESH_NORMAL = 0x0,OLECMDIDF_REFRESH_IFEXPIRED = 0x1,OLECMDIDF_REFRESH_CONTINUE = 0x2,OLECMDIDF_REFRESH_COMPLETELY = 0x3,OLECMDIDF_REFRESH_NO_CACHE = 0x4,OLECMDIDF_REFRESH_RELOAD = 0x5,OLECMDIDF_REFRESH_LEVELMASK = 0xFF,OLECMDIDF_REFRESH_CLEARUSERINPUT = 0x1000,OLECMDIDF_REFRESH_PROMPTIFOFFLINE = 0x2000,OLECMDIDF_REFRESH_THROUGHSCRIPT = 0x4000,};
struct _61B889227CECAFED4E8A477D21B34BC9 {unsigned short reserved : 14;unsigned short fDeferUpd : 1;unsigned short fAckReq : 1;short cfFormat;};
enum _620C11CCC0A17037E071B448C5F5E084 {DBGKD_SIMULATION_NONE = 0x0,DBGKD_SIMULATION_EXDI = 0x1,};
enum _62B5AE3153486754BCDD385B0C5A91E9 {IT_INCLUSIVE = 0x0,IT_EXCLUSIVE = 0x1,IT_HIDDEN = 0x2,};
enum _62D95A1861CF901152B53DFA047F6B81 {KSINTERFACE_FILEIO_STREAMING = 0x0,};
struct _62EC1DAD6DB92F8723AD0A50B2259449 {unsigned char *UserName;unsigned char *ComputerName;unsigned short Privilege;unsigned int AuthFlags;};
enum _632B66A9D7130349A03EF30A1CC9533A {FILTERSPECV4 = 0x1,FILTERSPECV6 = 0x2,FILTERSPECV6_FLOW = 0x3,FILTERSPECV4_GPI = 0x4,FILTERSPECV6_GPI = 0x5,FILTERSPEC_END = 0x6,};
enum _658345D4A0AC297778ED4BE2EFA31AA1 {KS_AnalogVideo_None = 0x0,KS_AnalogVideo_NTSC_M = 0x1,KS_AnalogVideo_NTSC_M_J = 0x2,KS_AnalogVideo_NTSC_433 = 0x4,KS_AnalogVideo_PAL_B = 0x10,KS_AnalogVideo_PAL_D = 0x20,KS_AnalogVideo_PAL_G = 0x40,KS_AnalogVideo_PAL_H = 0x80,KS_AnalogVideo_PAL_I = 0x100,KS_AnalogVideo_PAL_M = 0x200,KS_AnalogVideo_PAL_N = 0x400,KS_AnalogVideo_PAL_60 = 0x800,KS_AnalogVideo_SECAM_B = 0x1000,KS_AnalogVideo_SECAM_D = 0x2000,KS_AnalogVideo_SECAM_G = 0x4000,KS_AnalogVideo_SECAM_H = 0x8000,KS_AnalogVideo_SECAM_K = 0x10000,KS_AnalogVideo_SECAM_K1 = 0x20000,KS_AnalogVideo_SECAM_L = 0x40000,KS_AnalogVideo_SECAM_L1 = 0x80000,KS_AnalogVideo_PAL_N_COMBO = 0x100000,};
enum _67063D379273ADCD5D91019DFED2E95F {KSEVENT_VIDEODECODER_CHANGED = 0x0,};
enum _682EAAD0F97AB0EDCAD8B026B6112555 {ICMP6_DST_UNREACH = 0x1,ICMP6_PACKET_TOO_BIG = 0x2,ICMP6_TIME_EXCEEDED = 0x3,ICMP6_PARAM_PROB = 0x4,ICMP6_ECHO_REQUEST = 0x80,ICMP6_ECHO_REPLY = 0x81,ICMP6_MEMBERSHIP_QUERY = 0x82,ICMP6_MEMBERSHIP_REPORT = 0x83,ICMP6_MEMBERSHIP_REDUCTION = 0x84,ND_ROUTER_SOLICIT = 0x85,ND_ROUTER_ADVERT = 0x86,ND_NEIGHBOR_SOLICIT = 0x87,ND_NEIGHBOR_ADVERT = 0x88,ND_REDIRECT = 0x89,};
enum _685D0097497CB64E18A21F243FD25622 {KSPROPERTY_ITD3D_PARAMS = 0x0,};
enum _6A1D6C7F5A20D066AEDEECAB36006C72 {KSPROPERTY_BDA_RF_TUNER_FREQUENCY = 0x0,KSPROPERTY_BDA_RF_TUNER_POLARITY = 0x1,KSPROPERTY_BDA_RF_TUNER_RANGE = 0x2,KSPROPERTY_BDA_RF_TUNER_TRANSPONDER = 0x3,KSPROPERTY_BDA_RF_TUNER_BANDWIDTH = 0x4,KSPROPERTY_BDA_RF_TUNER_FREQUENCY_MULTIPLIER = 0x5,};
enum _6A58EEAD8E4C7DF4F80FA7C6A74A3704 {KSPROPERTY_PIN_CINSTANCES = 0x0,KSPROPERTY_PIN_CTYPES = 0x1,KSPROPERTY_PIN_DATAFLOW = 0x2,KSPROPERTY_PIN_DATARANGES = 0x3,KSPROPERTY_PIN_DATAINTERSECTION = 0x4,KSPROPERTY_PIN_INTERFACES = 0x5,KSPROPERTY_PIN_MEDIUMS = 0x6,KSPROPERTY_PIN_COMMUNICATION = 0x7,KSPROPERTY_PIN_GLOBALCINSTANCES = 0x8,KSPROPERTY_PIN_NECESSARYINSTANCES = 0x9,KSPROPERTY_PIN_PHYSICALCONNECTION = 0xA,KSPROPERTY_PIN_CATEGORY = 0xB,KSPROPERTY_PIN_NAME = 0xC,KSPROPERTY_PIN_CONSTRAINEDDATARANGES = 0xD,KSPROPERTY_PIN_PROPOSEDATAFORMAT = 0xE,};
enum _6B2401DF69FC0CC161171E2CBCDDC1C6 {KSEVENT_LOOPEDSTREAMING_POSITION = 0x0,};
enum _6B870DC24D0C8AC4BA7D2C047999A6A3 {KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST_SIZE = 0x0,KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_LIST = 0x1,KSPROPERTY_BDA_ETHERNET_FILTER_MULTICAST_MODE = 0x2,};
enum _6C28A36E3B687017C39113137644E2AF {KSPROPERTY_SYSAUDIO_NORMAL_DEFAULT = 0x0,KSPROPERTY_SYSAUDIO_PLAYBACK_DEFAULT = 0x1,KSPROPERTY_SYSAUDIO_RECORD_DEFAULT = 0x2,KSPROPERTY_SYSAUDIO_MIDI_DEFAULT = 0x3,KSPROPERTY_SYSAUDIO_MIXER_DEFAULT = 0x4,};
enum _6D08AF020E88675B59174822EC55B914 {KSEVENT_CLOCK_INTERVAL_MARK = 0x0,KSEVENT_CLOCK_POSITION_MARK = 0x1,};
enum _6DAD80B3977302E5EA3CDCFB6538A59F {KSMETHOD_STREAMALLOCATOR_ALLOC = 0x0,KSMETHOD_STREAMALLOCATOR_FREE = 0x1,};
enum _6F5958920F6A8F401B50E2A1B2D54572 {KSPROPERTY_BDA_LNB_LOF_LOW_BAND = 0x0,KSPROPERTY_BDA_LNB_LOF_HIGH_BAND = 0x1,KSPROPERTY_BDA_LNB_SWITCH_FREQUENCY = 0x2,};
enum _6F6C2F72068A7A854C30F881415EDCB8 {KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST_SIZE = 0x0,KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_LIST = 0x1,KSPROPERTY_BDA_IPv6_FILTER_MULTICAST_MODE = 0x2,};
enum _6F9F41060DD80647953DB726CA7F25E7 {KS_SEEKING_NoPositioning = 0x0,KS_SEEKING_AbsolutePositioning = 0x1,KS_SEEKING_RelativePositioning = 0x2,KS_SEEKING_IncrementalPositioning = 0x3,KS_SEEKING_PositioningBitsMask = 0x3,KS_SEEKING_SeekToKeyFrame = 0x4,KS_SEEKING_ReturnTime = 0x8,};
enum _6FB945646DCDC979B45A0864DF90F90A {SHREGDEL_DEFAULT = 0x0,SHREGDEL_HKCU = 0x1,SHREGDEL_HKLM = 0x10,SHREGDEL_BOTH = 0x11,};
enum _702932362B8608D728382EB01F6EA68B {KSPROPERTY_BDA_NULL_TRANSFORM_START = 0x0,KSPROPERTY_BDA_NULL_TRANSFORM_STOP = 0x1,};
enum _704B423838D35B9B541E315C75B8E394 {Pipe_Allocator_None = 0x0,Pipe_Allocator_FirstPin = 0x1,Pipe_Allocator_LastPin = 0x2,Pipe_Allocator_MiddlePin = 0x3,};
enum _714E217E1FF07AEF9AC8D62CE7BB20D6 {KSPROPERTY_BDA_VOID_TRANSFORM_START = 0x0,KSPROPERTY_BDA_VOID_TRANSFORM_STOP = 0x1,};
enum _72442BC1633A72B4A848039868482DB7 {triUnchecked = 0x0,triChecked = 0x1,triGray = 0x2,};
enum _729DCE355D7523E6CA017E6077BAB356 {KSPROPERTY_TOPOLOGY_CATEGORIES = 0x0,KSPROPERTY_TOPOLOGY_NODES = 0x1,KSPROPERTY_TOPOLOGY_CONNECTIONS = 0x2,KSPROPERTY_TOPOLOGY_NAME = 0x3,};
enum _7621D6AB91F9DA61D087C9DD9E0E63C9 {PipeState_DontCare = 0x0,PipeState_RangeNotFixed = 0x1,PipeState_RangeFixed = 0x2,PipeState_CompressionUnknown = 0x3,PipeState_Finalized = 0x4,};
enum _7772B546DBDF650B52C572BF7BB5BA92 {KSPROPERTY_AUDDECOUT_MODES = 0x0,KSPROPERTY_AUDDECOUT_CUR_MODE = 0x1,};
enum _7A8E7332A2E71E967EDB7B241741D182 {KSPROPERTY_SYSAUDIO_DEVICE_COUNT = 0x1,KSPROPERTY_SYSAUDIO_DEVICE_FRIENDLY_NAME = 0x2,KSPROPERTY_SYSAUDIO_DEVICE_INSTANCE = 0x3,KSPROPERTY_SYSAUDIO_DEVICE_INTERFACE_NAME = 0x4,KSPROPERTY_SYSAUDIO_SELECT_GRAPH = 0x5,KSPROPERTY_SYSAUDIO_CREATE_VIRTUAL_SOURCE = 0x6,KSPROPERTY_SYSAUDIO_DEVICE_DEFAULT = 0x7,KSPROPERTY_SYSAUDIO_INSTANCE_INFO = 0xE,KSPROPERTY_SYSAUDIO_COMPONENT_ID = 0x10,};
enum _7AD07776184EAD704335BF70D8156030 {ForestTrustTopLevelName = 0x0,ForestTrustTopLevelNameEx = 0x1,ForestTrustDomainInfo = 0x2,ForestTrustRecordTypeLast = 0x2,};
struct _7ADE47B00230EF5EBD78FEDFCEB95499 {unsigned short unused : 13;unsigned short fRelease : 1;unsigned short fDeferUpd : 1;unsigned short fAckReq : 1;short cfFormat;};
enum _7CE1FE37114556B00E2D910941BCF644 {BDA_SIGNAL_UNAVAILABLE = 0x0,BDA_SIGNAL_INACTIVE = 0x1,BDA_SIGNAL_ACTIVE = 0x2,};
enum _7F6CA30E03330926888009F40C858932 {BMICON_LARGE = 0x0,BMICON_SMALL = 0x1,};
enum _8362DFB38AAC5C7129C2EC5BB1B5AC2E {CollisionTdo = 0x0,CollisionXref = 0x1,CollisionOther = 0x2,};
enum _84B3C5477E189348A14D3C2A7517CC31 {KSPROPERTY_SYSAUDIO_ATTACH_VIRTUAL_SOURCE = 0x1,};
enum _858DEE99A53335AECCB47369A882FB45 {WinNullSid = 0x0,WinWorldSid = 0x1,WinLocalSid = 0x2,WinCreatorOwnerSid = 0x3,WinCreatorGroupSid = 0x4,WinCreatorOwnerServerSid = 0x5,WinCreatorGroupServerSid = 0x6,WinNtAuthoritySid = 0x7,WinDialupSid = 0x8,WinNetworkSid = 0x9,WinBatchSid = 0xA,WinInteractiveSid = 0xB,WinServiceSid = 0xC,WinAnonymousSid = 0xD,WinProxySid = 0xE,WinEnterpriseControllersSid = 0xF,WinSelfSid = 0x10,WinAuthenticatedUserSid = 0x11,WinRestrictedCodeSid = 0x12,WinTerminalServerSid = 0x13,WinRemoteLogonIdSid = 0x14,WinLogonIdsSid = 0x15,WinLocalSystemSid = 0x16,WinLocalServiceSid = 0x17,WinNetworkServiceSid = 0x18,WinBuiltinDomainSid = 0x19,WinBuiltinAdministratorsSid = 0x1A,WinBuiltinUsersSid = 0x1B,WinBuiltinGuestsSid = 0x1C,WinBuiltinPowerUsersSid = 0x1D,WinBuiltinAccountOperatorsSid = 0x1E,WinBuiltinSystemOperatorsSid = 0x1F,WinBuiltinPrintOperatorsSid = 0x20,WinBuiltinBackupOperatorsSid = 0x21,WinBuiltinReplicatorSid = 0x22,WinBuiltinPreWindows2000CompatibleAccessSid = 0x23,WinBuiltinRemoteDesktopUsersSid = 0x24,WinBuiltinNetworkConfigurationOperatorsSid = 0x25,WinAccountAdministratorSid = 0x26,WinAccountGuestSid = 0x27,WinAccountKrbtgtSid = 0x28,WinAccountDomainAdminsSid = 0x29,WinAccountDomainUsersSid = 0x2A,WinAccountDomainGuestsSid = 0x2B,WinAccountComputersSid = 0x2C,WinAccountControllersSid = 0x2D,WinAccountCertAdminsSid = 0x2E,WinAccountSchemaAdminsSid = 0x2F,WinAccountEnterpriseAdminsSid = 0x30,WinAccountPolicyAdminsSid = 0x31,WinAccountRasAndIasServersSid = 0x32,WinNTLMAuthenticationSid = 0x33,WinDigestAuthenticationSid = 0x34,WinSChannelAuthenticationSid = 0x35,WinThisOrganizationSid = 0x36,WinOtherOrganizationSid = 0x37,WinBuiltinIncomingForestTrustBuildersSid = 0x38,WinBuiltinPerfMonitoringUsersSid = 0x39,WinBuiltinPerfLoggingUsersSid = 0x3A,WinBuiltinAuthorizationAccessSid = 0x3B,WinBuiltinTerminalServerLicenseServersSid = 0x3C,};
enum _85B8D048AA221EC9AB61032617833AB7 {FLOAT_COEFF = 0x0,SHORT_COEFF = 0x1,KSDS3D_COEFF_COUNT = 0x2,};
enum _861DD39FC4CEDEF9FD3B0ECFEB4EA61F {KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME = 0x0,KSEVENT_STREAMALLOCATOR_FREEFRAME = 0x1,};
enum _8704B174BAB6852299F1B66FD71C21B2 {DMUS_CLOCK_SYSTEM = 0x0,DMUS_CLOCK_WAVE = 0x1,};
enum _87F25CE704E45E1C4AD5F80E170A75FF {KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT = 0x1,KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = 0x2,KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = 0x4,};
enum _88B706C139ABA6F86ADC31E6AAF44FB3 {KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION = 0x0,};
enum _8DE99528E372621AB370A19368014C30 {KSMETHOD_BDA_START_CHANGES = 0x0,KSMETHOD_BDA_CHECK_CHANGES = 0x1,KSMETHOD_BDA_COMMIT_CHANGES = 0x2,KSMETHOD_BDA_GET_CHANGE_STATE = 0x3,};
enum _8E304CD910907B07F66BA6A3540081CA {KS_PhysConn_Video_Tuner = 0x1,KS_PhysConn_Video_Composite = 0x2,KS_PhysConn_Video_SVideo = 0x3,KS_PhysConn_Video_RGB = 0x4,KS_PhysConn_Video_YRYBY = 0x5,KS_PhysConn_Video_SerialDigital = 0x6,KS_PhysConn_Video_ParallelDigital = 0x7,KS_PhysConn_Video_SCSI = 0x8,KS_PhysConn_Video_AUX = 0x9,KS_PhysConn_Video_1394 = 0xA,KS_PhysConn_Video_USB = 0xB,KS_PhysConn_Video_VideoDecoder = 0xC,KS_PhysConn_Video_VideoEncoder = 0xD,KS_PhysConn_Video_SCART = 0xE,KS_PhysConn_Audio_Tuner = 0x1000,KS_PhysConn_Audio_Line = 0x1001,KS_PhysConn_Audio_Mic = 0x1002,KS_PhysConn_Audio_AESDigital = 0x1003,KS_PhysConn_Audio_SPDIFDigital = 0x1004,KS_PhysConn_Audio_SCSI = 0x1005,KS_PhysConn_Audio_AUX = 0x1006,KS_PhysConn_Audio_1394 = 0x1007,KS_PhysConn_Audio_USB = 0x1008,KS_PhysConn_Audio_AudioDecoder = 0x1009,};
enum _8EE7F9EA7D1453B89425165DC84C8DAD {KSEVENT_CONTROL_CHANGE = 0x0,};
struct _923DA7BE11DCB482D02B0566D8DB27AB {unsigned short bAppReturnCode : 8;unsigned short reserved : 6;unsigned short fBusy : 1;unsigned short fAck : 1;};
enum _936EE475885E5E1972395CF18A9E441C {DIRECT_FORM = 0x0,CASCADE_FORM = 0x1,KSDS3D_FILTER_METHOD_COUNT = 0x2,};
enum _938A3B861D25DE16265A89B1C43AD81C {BDA_EVENT_SIGNAL_LOSS = 0x0,BDA_EVENT_SIGNAL_LOCK = 0x1,BDA_EVENT_DATA_START = 0x2,BDA_EVENT_DATA_STOP = 0x3,BDA_EVENT_CHANNEL_ACQUIRED = 0x4,BDA_EVENT_CHANNEL_LOST = 0x5,BDA_EVENT_CHANNEL_SOURCE_CHANGED = 0x6,BDA_EVENT_CHANNEL_ACTIVATED = 0x7,BDA_EVENT_CHANNEL_DEACTIVATED = 0x8,BDA_EVENT_SUBCHANNEL_ACQUIRED = 0x9,BDA_EVENT_SUBCHANNEL_LOST = 0xA,BDA_EVENT_SUBCHANNEL_SOURCE_CHANGED = 0xB,BDA_EVENT_SUBCHANNEL_ACTIVATED = 0xC,BDA_EVENT_SUBCHANNEL_DEACTIVATED = 0xD,BDA_EVENT_ACCESS_GRANTED = 0xE,BDA_EVENT_ACCESS_DENIED = 0xF,BDA_EVENT_OFFER_EXTENDED = 0x10,BDA_EVENT_PURCHASE_COMPLETED = 0x11,BDA_EVENT_SMART_CARD_INSERTED = 0x12,BDA_EVENT_SMART_CARD_REMOVED = 0x13,};
enum _96F6A40AF266BA3D986193CAEF201799 {MsvAvEOL = 0x0,MsvAvNbComputerName = 0x1,MsvAvNbDomainName = 0x2,MsvAvDnsComputerName = 0x3,MsvAvDnsDomainName = 0x4,MsvAvDnsTreeName = 0x5,MsvAvFlags = 0x6,};
enum _984DD30B3DA0FC7F55BB22873AC26968 {KSPROPERTY_VIDEOCONTROL_CAPS = 0x0,KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE = 0x1,KSPROPERTY_VIDEOCONTROL_FRAME_RATES = 0x2,KSPROPERTY_VIDEOCONTROL_MODE = 0x3,};
enum _98FA3A45888AB38274FC20DD306BA119 {KSEVENT_TUNER_CHANGED = 0x0,};
enum _99797C396B1D447BBE63E5346EF4FE3A {KSPIN_COMMUNICATION_NONE = 0x0,KSPIN_COMMUNICATION_SINK = 0x1,KSPIN_COMMUNICATION_SOURCE = 0x2,KSPIN_COMMUNICATION_BOTH = 0x3,KSPIN_COMMUNICATION_BRIDGE = 0x4,};
enum _9D9FB30271C58D4C0035E931B55503FE {KSEVENT_VIDCAPTOSTI_EXT_TRIGGER = 0x0,};
enum _9E0565FF8CB6288B094DEDB695088DFB {KSPROPERTY_DROPPEDFRAMES_CURRENT = 0x0,};
enum _9F5DEC71A9715652613D7AC79A3DFB57 {ASSOCENUM_NONE = 0x0,};
enum _A1E89C657E90049EA789DE2B75FA4D0B {KS_TUNER_STRATEGY_PLL = 0x1,KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 0x2,KS_TUNER_STRATEGY_DRIVER_TUNES = 0x4,};
enum _A246B606C2B7904A094CADA05BFF43C3 {KS_MemoryTypeDontCare = 0x0,KS_MemoryTypeKernelPaged = 0x1,KS_MemoryTypeKernelNonPaged = 0x2,KS_MemoryTypeDeviceHostMapped = 0x3,KS_MemoryTypeDeviceSpecific = 0x4,KS_MemoryTypeUser = 0x5,KS_MemoryTypeAnyHost = 0x6,};
enum _A2D51A8FAB7AC563CC6DB2B9AADBE187 {KSPROPERTY_TUNER_CAPS = 0x0,KSPROPERTY_TUNER_MODE_CAPS = 0x1,KSPROPERTY_TUNER_MODE = 0x2,KSPROPERTY_TUNER_STANDARD = 0x3,KSPROPERTY_TUNER_FREQUENCY = 0x4,KSPROPERTY_TUNER_INPUT = 0x5,KSPROPERTY_TUNER_STATUS = 0x6,KSPROPERTY_TUNER_IF_MEDIUM = 0x7,};
enum _A5B4E8FAC21A27E9D836EC72E0E2550F {KSPROPERTY_DIRECTSOUND3DBUFFER_ALL = 0x0,KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION = 0x1,KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY = 0x2,KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES = 0x3,KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION = 0x4,KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME = 0x5,KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE = 0x6,KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE = 0x7,KSPROPERTY_DIRECTSOUND3DBUFFER_MODE = 0x8,};
enum _A5D41151699DCC90B5EEB53A3A6D67E0 {Framing_Cache_Update = 0x0,Framing_Cache_ReadLast = 0x1,Framing_Cache_ReadOrig = 0x2,Framing_Cache_Write = 0x3,};
enum _A6BC26748E56DACD668315459CCF5D3F {KSPROPERTY_DRMAUDIOSTREAM_CONTENTID = 0x0,};
enum _A82677F2D780EECC07262E494F367D1E {KS_DVDCOPYSTATE_INITIALIZE = 0x0,KS_DVDCOPYSTATE_INITIALIZE_TITLE = 0x1,KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 0x2,KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 0x3,KS_DVDCOPYSTATE_DONE = 0x4,};
enum _A98B79572840FDA381AA9CDCE69D1BC8 {EqualPriority = 0x0,KeepPrefetchedData = 0x1,KeepReadData = 0x2,};
enum _AA1B996CE4852CFEBE5661E65097C982 {HHWIN_NAVTAB_TOP = 0x0,HHWIN_NAVTAB_LEFT = 0x1,HHWIN_NAVTAB_BOTTOM = 0x2,};
enum _AB84C8955069406F80CB719201B159DD {KS_MACROVISION_DISABLED = 0x0,KS_MACROVISION_LEVEL1 = 0x1,KS_MACROVISION_LEVEL2 = 0x2,KS_MACROVISION_LEVEL3 = 0x3,};
enum _ACDD7173F686B0B8EEB5D0397954DC28 {ConstantBitRate = 0x0,VariableBitRateAverage = 0x1,VariableBitRatePeak = 0x2,};
enum _AD2684E740CA89CFFCE63237D53FEB0F {KSEVENT_VPNOTIFY_FORMATCHANGE = 0x0,};
struct _AD47B7B6770F26FF00FF8EF46A9765CE {unsigned int Count;unsigned int Stats[1];};
enum _ADC633718E981BBAA2F59FA41E3EE0B2 {KSINTERFACE_STANDARD_STREAMING = 0x0,KSINTERFACE_STANDARD_LOOPED_STREAMING = 0x1,KSINTERFACE_STANDARD_CONTROL = 0x2,};
enum _B2CD58BB5E151C37D855099D3E2FDD5A {STUB_UNMARSHAL = 0x0,STUB_CALL_SERVER = 0x1,STUB_MARSHAL = 0x2,STUB_CALL_SERVER_NO_HRESULT = 0x3,};
enum _B33290831EF5326ACCD42FC6C51DFBE8 {HH_TAB_CONTENTS = 0x0,HH_TAB_INDEX = 0x1,HH_TAB_SEARCH = 0x2,HH_TAB_FAVORITES = 0x3,HH_TAB_HISTORY = 0x4,HH_TAB_AUTHOR = 0x5,HH_TAB_CUSTOM_FIRST = 0xB,HH_TAB_CUSTOM_LAST = 0x13,};
enum _B3A84405D78147E904BCCE08E14749CA {KSPROPERTY_TOPOLOGYNODE_ENABLE = 0x1,KSPROPERTY_TOPOLOGYNODE_RESET = 0x2,};
enum _B4C4FC6252558A234733AE07E885CE6F {KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES = 0x0,KSPROPERTY_WAVE_INPUT_CAPABILITIES = 0x1,KSPROPERTY_WAVE_OUTPUT_CAPABILITIES = 0x2,KSPROPERTY_WAVE_BUFFER = 0x3,KSPROPERTY_WAVE_FREQUENCY = 0x4,KSPROPERTY_WAVE_VOLUME = 0x5,KSPROPERTY_WAVE_PAN = 0x6,};
enum _B4EFCEC8C68CF8B596CEF68A8AD15C1A {KSSTATE_STOP = 0x0,KSSTATE_ACQUIRE = 0x1,KSSTATE_PAUSE = 0x2,KSSTATE_RUN = 0x3,};
enum _B6084D6A0EEB0FD386ED58F84822BF64 {SE_TECH_NONE = 0x0,SE_TECH_ANALOG_DEVICES_PHAT = 0x1,SE_TECH_CREATIVE = 0x2,SE_TECH_NATIONAL_SEMI = 0x3,SE_TECH_YAMAHA_YMERSION = 0x4,SE_TECH_BBE = 0x5,SE_TECH_CRYSTAL_SEMI = 0x6,SE_TECH_QSOUND_QXPANDER = 0x7,SE_TECH_SPATIALIZER = 0x8,SE_TECH_SRS = 0x9,SE_TECH_PLATFORM_TECH = 0xA,SE_TECH_AKM = 0xB,SE_TECH_AUREAL = 0xC,SE_TECH_AZTECH = 0xD,SE_TECH_BINAURA = 0xE,SE_TECH_ESS_TECH = 0xF,SE_TECH_HARMAN_VMAX = 0x10,SE_TECH_NVIDEA = 0x11,SE_TECH_PHILIPS_INCREDIBLE = 0x12,SE_TECH_TEXAS_INST = 0x13,SE_TECH_VLSI_TECH = 0x14,};
enum _B8842F298E38803458C077776FB4B251 {KS_AMVP_MODE_WEAVE = 0x0,KS_AMVP_MODE_BOBINTERLEAVED = 0x1,KS_AMVP_MODE_BOBNONINTERLEAVED = 0x2,KS_AMVP_MODE_SKIPEVEN = 0x3,KS_AMVP_MODE_SKIPODD = 0x4,};
enum _BA5933F1975D916FB246D1EEDB0FAC50 {ASSOCKEY_SHELLEXECCLASS = 0x1,ASSOCKEY_APP = 0x2,ASSOCKEY_CLASS = 0x3,ASSOCKEY_BASECLASS = 0x4,ASSOCKEY_MAX = 0x5,};
enum _BBECFD7EEFB9354C969D1C42B172D4E0 {BDA_UNDEFINED_CHANNEL = 0xFFFFFFFF,};
enum _C06925BC9DA0F969A0E4486B73371866 {KSPROPERTY_VIDEODECODER_CAPS = 0x0,KSPROPERTY_VIDEODECODER_STANDARD = 0x1,KSPROPERTY_VIDEODECODER_STATUS = 0x2,KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE = 0x3,KSPROPERTY_VIDEODECODER_VCR_TIMING = 0x4,};
enum _C43D2A6EFFDC6958F872464784E778EF {KSEVENT_TVAUDIO_CHANGED = 0x0,};
enum _C84AAC0EFB97B6FA6320B166810390ED {KSPROPERTY_AUDIOGFX_RENDERTARGETDEVICEID = 0x0,KSPROPERTY_AUDIOGFX_CAPTURETARGETDEVICEID = 0x1,};
enum _C9C41CE7F7AB140BE1C872069B92FC11 {LT_DONT_CARE = 0x0,LT_LOWEST_LATENCY = 0x1,};
enum _CAE561814972B63FC408CA74931D2863 {KSEVENT_CROSSBAR_CHANGED = 0x0,};
enum _CB3435FABEA0A3C4DEC3DC8A5EBD37B4 {KSEVENT_CONNECTION_POSITIONUPDATE = 0x0,KSEVENT_CONNECTION_DATADISCONTINUITY = 0x1,KSEVENT_CONNECTION_TIMEDISCONTINUITY = 0x2,KSEVENT_CONNECTION_PRIORITY = 0x3,KSEVENT_CONNECTION_ENDOFSTREAM = 0x4,};
struct _CC81E267BD8B32E89ADB7AE662C05BFA {int Dimension;unsigned int *BufferConformanceMark;unsigned int *BufferVarianceMark;unsigned int *MaxCountArray;unsigned int *OffsetArray;unsigned int *ActualCountArray;};
enum _CD1B745820A9D90889EBAB7E9D163FB3 {KSPROPERTY_BDA_SIGNAL_STRENGTH = 0x0,KSPROPERTY_BDA_SIGNAL_QUALITY = 0x1,KSPROPERTY_BDA_SIGNAL_PRESENT = 0x2,KSPROPERTY_BDA_SIGNAL_LOCKED = 0x3,KSPROPERTY_BDA_SAMPLE_TIME = 0x4,};
enum _CDF15D895FCCE1726F8D6F94CFB8A0EF {IpPrefixOriginOther = 0x0,IpPrefixOriginManual = 0x1,IpPrefixOriginWellKnown = 0x2,IpPrefixOriginDhcp = 0x3,IpPrefixOriginRouterAdvertisement = 0x4,};
enum _CFCB2E1C2645813857E415DB4A5CF091 {KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY = 0x1,KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY = 0x2,KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY = 0x3,KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY = 0x4,KSPROPERTY_VBICODECFILTERING_STATISTICS = 0x5,};
enum _CFDA6B458BFD5441F09F532A42BB2B66 {KSPROPERTY_DVDCOPY_CHLG_KEY = 0x1,KSPROPERTY_DVDCOPY_DVD_KEY1 = 0x2,KSPROPERTY_DVDCOPY_DEC_KEY2 = 0x3,KSPROPERTY_DVDCOPY_TITLE_KEY = 0x4,KSPROPERTY_COPY_MACROVISION = 0x5,KSPROPERTY_DVDCOPY_REGION = 0x6,KSPROPERTY_DVDCOPY_SET_COPY_STATE = 0x7,KSPROPERTY_DVDCOPY_DISC_KEY = 0x80,};
enum _D02A68EF54712B1F200C52B69E1D9509 {SHGFP_TYPE_CURRENT = 0x0,SHGFP_TYPE_DEFAULT = 0x1,};
enum _D399BD8DDA7D494A1E217AB8186E520D {FramingProp_Uninitialized = 0x0,FramingProp_None = 0x1,FramingProp_Old = 0x2,FramingProp_Ex = 0x3,};
enum _D5A9BE53F5312CC59A8B037E92CC2DF0 {KSPROPERTY_CLOCK_TIME = 0x0,KSPROPERTY_CLOCK_PHYSICALTIME = 0x1,KSPROPERTY_CLOCK_CORRELATEDTIME = 0x2,KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME = 0x3,KSPROPERTY_CLOCK_RESOLUTION = 0x4,KSPROPERTY_CLOCK_STATE = 0x5,};
enum _D5CA3A18CB786C06D1FE5E26C4BBD8C9 {KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST_SIZE = 0x0,KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_LIST = 0x1,KSPROPERTY_BDA_IPv4_FILTER_MULTICAST_MODE = 0x2,};
enum _D62050DCDBDF6C35CAC61CEAA5D0241B {MEDIA_TRANSPORT_PACKET = 0x0,MEDIA_ELEMENTARY_STREAM = 0x1,MEDIA_MPEG2_PSI = 0x2,MEDIA_TRANSPORT_PAYLOAD = 0x3,};
enum _D64CEF8F52066C406CD4BA6573420261 {KSRESET_BEGIN = 0x0,KSRESET_END = 0x1,};
enum _DAFE30771B95F95613600355B79694C1 {KS_VideoControlFlag_FlipHorizontal = 0x1,KS_VideoControlFlag_FlipVertical = 0x2,KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = 0x10,KS_Obsolete_VideoControlFlag_Trigger = 0x20,KS_VideoControlFlag_ExternalTriggerEnable = 0x4,KS_VideoControlFlag_Trigger = 0x8,};
enum _DD5FC77EC1374A734666B81823C28AFB {FULL_FILTER = 0x0,LIGHT_FILTER = 0x1,KSDS3D_FILTER_QUALITY_COUNT = 0x2,};
enum _DE308DA4ABB68A11D1125697034C3BA2 {HHACT_TAB_CONTENTS = 0x0,HHACT_TAB_INDEX = 0x1,HHACT_TAB_SEARCH = 0x2,HHACT_TAB_HISTORY = 0x3,HHACT_TAB_FAVORITES = 0x4,HHACT_EXPAND = 0x5,HHACT_CONTRACT = 0x6,HHACT_BACK = 0x7,HHACT_FORWARD = 0x8,HHACT_STOP = 0x9,HHACT_REFRESH = 0xA,HHACT_HOME = 0xB,HHACT_SYNC = 0xC,HHACT_OPTIONS = 0xD,HHACT_PRINT = 0xE,HHACT_HIGHLIGHT = 0xF,HHACT_CUSTOMIZE = 0x10,HHACT_JUMP1 = 0x11,HHACT_JUMP2 = 0x12,HHACT_ZOOM = 0x13,HHACT_TOC_NEXT = 0x14,HHACT_TOC_PREV = 0x15,HHACT_NOTES = 0x16,HHACT_LAST_ENUM = 0x17,};
enum _DF42200E5C7644BA9EFD9248E6DB20BA {KSEVENT_BDA_PIN_CONNECTED = 0x0,KSEVENT_BDA_PIN_DISCONNECTED = 0x1,};
enum _E429D5BCA10BC7F1E46CF67F9B793820 {KSPROPERTY_STREAMINTERFACE_HEADERSIZE = 0x0,};
enum _E4F601CF8334073149F423AA599EAEAE {KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = 0x1,};
enum _E5E05FC88E8385A5216FCD37A95BAA87 {KSPIN_DATAFLOW_IN = 0x1,KSPIN_DATAFLOW_OUT = 0x2,};
enum _E668158CB00FF6C266ACA08E9099CDD5 {ASSOCF_INIT_NOREMAPCLSID = 0x1,ASSOCF_INIT_BYEXENAME = 0x2,ASSOCF_OPEN_BYEXENAME = 0x2,ASSOCF_INIT_DEFAULTTOSTAR = 0x4,ASSOCF_INIT_DEFAULTTOFOLDER = 0x8,ASSOCF_NOUSERSETTINGS = 0x10,ASSOCF_NOTRUNCATE = 0x20,ASSOCF_VERIFY = 0x40,ASSOCF_REMAPRUNDLL = 0x80,ASSOCF_NOFIXUPS = 0x100,ASSOCF_IGNOREBASECLASS = 0x200,};
enum _EAACB91A6EC543964C9E2DF086A673AD {ScopeLevelInterface = 0x1,ScopeLevelLink = 0x2,ScopeLevelSubnet = 0x3,ScopeLevelAdmin = 0x4,ScopeLevelSite = 0x5,ScopeLevelOrganization = 0x8,ScopeLevelGlobal = 0xE,};
enum _ECF871C3E688457C715D15BCCDDCF8A2 {DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW = 0x0,DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW = 0x1,DSFX_I3DL2_MATERIAL_PRESET_THINDOOR = 0x2,DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR = 0x3,DSFX_I3DL2_MATERIAL_PRESET_WOODWALL = 0x4,DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL = 0x5,DSFX_I3DL2_MATERIAL_PRESET_STONEWALL = 0x6,DSFX_I3DL2_MATERIAL_PRESET_CURTAIN = 0x7,};
struct _F03B70C123AB6920C4DDA521DD856E56 {char String[16];};
enum _F258A75C985B6E15DF6E997DEEA0897F {ASSOCSTR_COMMAND = 0x1,ASSOCSTR_EXECUTABLE = 0x2,ASSOCSTR_FRIENDLYDOCNAME = 0x3,ASSOCSTR_FRIENDLYAPPNAME = 0x4,ASSOCSTR_NOOPEN = 0x5,ASSOCSTR_SHELLNEWVALUE = 0x6,ASSOCSTR_DDECOMMAND = 0x7,ASSOCSTR_DDEIFEXEC = 0x8,ASSOCSTR_DDEAPPLICATION = 0x9,ASSOCSTR_DDETOPIC = 0xA,ASSOCSTR_INFOTIP = 0xB,ASSOCSTR_QUICKTIP = 0xC,ASSOCSTR_TILEINFO = 0xD,ASSOCSTR_CONTENTTYPE = 0xE,ASSOCSTR_DEFAULTICON = 0xF,ASSOCSTR_SHELLEXTENSION = 0x10,ASSOCSTR_MAX = 0x11,};
enum _F4C51389081D07451B87CD636D9D5F89 {DBCID_EMPTY = 0x0,DBCID_ONDRAG = 0x1,DBCID_CLSIDOFBAR = 0x2,DBCID_RESIZE = 0x3,DBCID_GETBAR = 0x4,};
enum _F5E9AD53D969E47E21B14A1F6622DC98 {KSPROPERTY_OVERLAYUPDATE_INTERESTS = 0x0,KSPROPERTY_OVERLAYUPDATE_CLIPLIST = 0x1,KSPROPERTY_OVERLAYUPDATE_PALETTE = 0x2,KSPROPERTY_OVERLAYUPDATE_COLORKEY = 0x4,KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = 0x8,KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = 0x10,KSPROPERTY_OVERLAYUPDATE_COLORREF = 0x10000000,};
enum _F750B0D5AE4952E6A2E06632A571D241 {KSPROPERTY_AUDIO_LATENCY = 0x1,KSPROPERTY_AUDIO_COPY_PROTECTION = 0x2,KSPROPERTY_AUDIO_CHANNEL_CONFIG = 0x3,KSPROPERTY_AUDIO_VOLUMELEVEL = 0x4,KSPROPERTY_AUDIO_POSITION = 0x5,KSPROPERTY_AUDIO_DYNAMIC_RANGE = 0x6,KSPROPERTY_AUDIO_QUALITY = 0x7,KSPROPERTY_AUDIO_SAMPLING_RATE = 0x8,KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE = 0x9,KSPROPERTY_AUDIO_MIX_LEVEL_TABLE = 0xA,KSPROPERTY_AUDIO_MIX_LEVEL_CAPS = 0xB,KSPROPERTY_AUDIO_MUX_SOURCE = 0xC,KSPROPERTY_AUDIO_MUTE = 0xD,KSPROPERTY_AUDIO_BASS = 0xE,KSPROPERTY_AUDIO_MID = 0xF,KSPROPERTY_AUDIO_TREBLE = 0x10,KSPROPERTY_AUDIO_BASS_BOOST = 0x11,KSPROPERTY_AUDIO_EQ_LEVEL = 0x12,KSPROPERTY_AUDIO_NUM_EQ_BANDS = 0x13,KSPROPERTY_AUDIO_EQ_BANDS = 0x14,KSPROPERTY_AUDIO_AGC = 0x15,KSPROPERTY_AUDIO_DELAY = 0x16,KSPROPERTY_AUDIO_LOUDNESS = 0x17,KSPROPERTY_AUDIO_WIDE_MODE = 0x18,KSPROPERTY_AUDIO_WIDENESS = 0x19,KSPROPERTY_AUDIO_REVERB_LEVEL = 0x1A,KSPROPERTY_AUDIO_CHORUS_LEVEL = 0x1B,KSPROPERTY_AUDIO_DEV_SPECIFIC = 0x1C,KSPROPERTY_AUDIO_DEMUX_DEST = 0x1D,KSPROPERTY_AUDIO_STEREO_ENHANCE = 0x1E,KSPROPERTY_AUDIO_MANUFACTURE_GUID = 0x1F,KSPROPERTY_AUDIO_PRODUCT_GUID = 0x20,KSPROPERTY_AUDIO_CPU_RESOURCES = 0x21,KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY = 0x22,KSPROPERTY_AUDIO_SURROUND_ENCODE = 0x23,KSPROPERTY_AUDIO_3D_INTERFACE = 0x24,KSPROPERTY_AUDIO_PEAKMETER = 0x25,KSPROPERTY_AUDIO_ALGORITHM_INSTANCE = 0x26,KSPROPERTY_AUDIO_FILTER_STATE = 0x27,KSPROPERTY_AUDIO_PREFERRED_STATUS = 0x28,};
enum _F83EBA9D0BD861E54A6698205AB72334 {KSPROPERTY_BIBLIOGRAPHIC_LEADER = 0x52444C20,KSPROPERTY_BIBLIOGRAPHIC_LCCN = 0x30313020,KSPROPERTY_BIBLIOGRAPHIC_ISBN = 0x30323020,KSPROPERTY_BIBLIOGRAPHIC_ISSN = 0x32323020,KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE = 0x30343020,KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME = 0x30303120,KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY = 0x30313120,KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME = 0x31313120,KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE = 0x30333120,KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE = 0x30343220,KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT = 0x35343220,KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE = 0x36343220,KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION = 0x30363220,KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION = 0x30303320,KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE = 0x30343420,KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT = 0x30393420,KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE = 0x30303520,KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE = 0x34303520,KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE = 0x35303520,KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT = 0x38303520,KSPROPERTY_BIBLIOGRAPHIC_CITATION = 0x30313520,KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT = 0x31313520,KSPROPERTY_BIBLIOGRAPHIC_SUMMARY = 0x30323520,KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE = 0x31323520,KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE = 0x30333520,KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS = 0x38333520,KSPROPERTY_BIBLIOGRAPHIC_AWARDS = 0x36383520,KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME = 0x30303620,KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM = 0x30353620,KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC = 0x31353620,KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE = 0x35353620,KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM = 0x38353620,KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE = 0x30333720,KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED = 0x30343720,KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = 0x30303820,KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = 0x30333820,};
enum _FA11D0DE19A9089B50BC241520DAD748 {KSEVENT_BDA_PROGRAM_FLOW_STATUS_CHANGED = 0x0,KSEVENT_BDA_CA_MODULE_STATUS_CHANGED = 0x1,KSEVENT_BDA_CA_SMART_CARD_STATUS_CHANGED = 0x2,KSEVENT_BDA_CA_MODULE_UI_REQUESTED = 0x3,};
enum _FBABD51C57810C7C5F45B793B996DA98 {kMessageBox = 0x0,};
enum _FC23A50C1CCE287E75E010175501A7BF {KSPROPERTY_BDA_NODE_TYPES = 0x0,KSPROPERTY_BDA_PIN_TYPES = 0x1,KSPROPERTY_BDA_TEMPLATE_CONNECTIONS = 0x2,KSPROPERTY_BDA_NODE_METHODS = 0x3,KSPROPERTY_BDA_NODE_PROPERTIES = 0x4,KSPROPERTY_BDA_NODE_EVENTS = 0x5,KSPROPERTY_BDA_CONTROLLING_PIN_ID = 0x6,KSPROPERTY_BDA_NODE_DESCRIPTORS = 0x7,};
enum _FDE649CC57CE41CE85FECAF000FEEDF5 {DS3D_HRTF_VERSION_1 = 0x0,};
enum _FE372930C93AFDFEFF622B08CA7B41DD {DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = 0x0,DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = 0x1,DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = 0x2,DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = 0x3,DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = 0x4,DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = 0x5,DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = 0x6,DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = 0x7,DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = 0x8,DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = 0x9,DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = 0xA,DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = 0xB,DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = 0xC,DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = 0xD,DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = 0xE,DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = 0xF,DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = 0x10,DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = 0x11,DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = 0x12,DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = 0x13,DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = 0x14,DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = 0x15,DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = 0x16,DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = 0x17,DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = 0x18,DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = 0x19,DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = 0x1A,DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = 0x1B,DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = 0x1C,DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = 0x1D,};
enum _FFAEC6EEC56F40EA545825A5F63342E7 {KsAllocatorMode_User = 0x0,KsAllocatorMode_Kernel = 0x1,};
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE ACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE CERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS CHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE2 D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE2;
typedef IDirectMusicDownloadedInstrument IDirectMusicDownloadedInstrument8;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS IP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION JOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _7445C9FCFCC2899651BCA0E341BC0369 KSNODEPROPERTY_AUDIO_DEV_SPECIFIC;
typedef struct _DDHAL_DDMISCELLANEOUS2CALLBACKS *LPDDHAL_DDMISCELLANEOUS2CALLBACKS;
typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA *LPWIN_SPUB_TRUSTED_PUBLISHER_DATA;
typedef struct _LSA_FOREST_TRUST_COLLISION_RECORD LSA_FOREST_TRUST_COLLISION_RECORD;
enum MACRO_D3DPSHADECAPS_COLORFLATMONO {D3DPSHADECAPS_COLORFLATMONO = 0x1,D3DPSHADECAPS_COLORFLATRGB = 0x2,D3DPSHADECAPS_COLORGOURAUDMONO = 0x4,D3DPSHADECAPS_COLORPHONGMONO = 0x10,D3DPSHADECAPS_COLORPHONGRGB = 0x20,D3DPSHADECAPS_SPECULARFLATMONO = 0x40,D3DPSHADECAPS_SPECULARFLATRGB = 0x80,D3DPSHADECAPS_SPECULARGOURAUDMONO = 0x100,D3DPSHADECAPS_SPECULARPHONGMONO = 0x400,D3DPSHADECAPS_SPECULARPHONGRGB = 0x800,D3DPSHADECAPS_ALPHAFLATBLEND = 0x1000,D3DPSHADECAPS_ALPHAFLATSTIPPLED = 0x2000,D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED = 0x8000,D3DPSHADECAPS_ALPHAPHONGBLEND = 0x10000,D3DPSHADECAPS_ALPHAPHONGSTIPPLED = 0x20000,D3DPSHADECAPS_FOGFLAT = 0x40000,D3DPSHADECAPS_FOGPHONG = 0x100000,};
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA *PCERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST *PENCRYPTION_CERTIFICATE_HASH_LIST;
typedef struct _KERB_QUERY_TKT_CACHE_EX_RESPONSE *PKERB_QUERY_TKT_CACHE_EX_RESPONSE;
typedef struct _6B8E9FF8FB4DE59DE7DA4092DA92354D *PKSNODEPROPERTY_AUDIO_3D_LISTENER;
typedef struct _D86AEF8896DDE0BDF211E48E78F8BB6F *PKSPROPERTY_VIDEODECODER_STATUS_S;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;
typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR *PRTL_VERIFIER_PROVIDER_DESCRIPTOR;
typedef struct _HTTPSPolicyCallbackData *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION2 *PTRUSTED_DOMAIN_FULL_INFORMATION2;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_DEVICE_INTERFACE_DETAIL_DATA_A;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W SP_DEVICE_INTERFACE_DETAIL_DATA_W;
enum __MIDL_IActionProgressDialog_0001 {SPINITF_NORMAL = 0x0,SPINITF_MODAL = 0x1,SPINITF_NOMINIMIZE = 0x8,};
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA CERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION CRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE;
typedef struct _D3DNTHAL_DP2INDEXEDTRIANGLELIST2 D3DNTHAL_DP2INDEXEDTRIANGLELIST2;
typedef struct _D3DNTHAL_DP2INDEXEDTRIANGLESTRIP D3DNTHAL_DP2INDEXEDTRIANGLESTRIP;
typedef struct _D3DNTHAL_DP2SETVERTEXSHADERCONST D3DNTHAL_DP2SETVERTEXSHADERCONST;
typedef struct IDirectDrawSurfaceKernelVtbl DIRECTDRAWSURFACEKERNELCALLBACKS;
typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST ENCRYPTION_CERTIFICATE_HASH_LIST;
struct IDirectMusicDownloadedInstrument {struct IDirectMusicDownloadedInstrumentVtbl *lpVtbl;};
struct IWbemDecoupledBasicEventProvider {struct IWbemDecoupledBasicEventProviderVtbl *lpVtbl;};
typedef struct _KERB_QUERY_TKT_CACHE_EX_RESPONSE KERB_QUERY_TKT_CACHE_EX_RESPONSE;
typedef struct _6B8E9FF8FB4DE59DE7DA4092DA92354D KSNODEPROPERTY_AUDIO_3D_LISTENER;
typedef struct _D86AEF8896DDE0BDF211E48E78F8BB6F KSPROPERTY_VIDEODECODER_STATUS_S;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLELIST2 *LPD3DHAL_DP2INDEXEDTRIANGLELIST2;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLESTRIP *LPD3DHAL_DP2INDEXEDTRIANGLESTRIP;
typedef struct _DDHAL_DDMISCELLANEOUSCALLBACKS *LPDDHAL_DDMISCELLANEOUSCALLBACKS;
typedef struct _DDHAL_GETAVAILDRIVERMEMORYDATA *LPDDHAL_GETAVAILDRIVERMEMORYDATA;
typedef struct _DDHAL_GETVPORTOUTPUTFORMATDATA *LPDDHAL_GETVPORTOUTPUTFORMATDATA;
typedef struct _DDHAL_WAITFORVERTICALBLANKDATA *LPDDHAL_WAITFORVERTICALBLANKDATA;
typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;
typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY;
typedef  struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA *PCERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _KERB_PURGE_TKT_CACHE_EX_REQUEST *PKERB_PURGE_TKT_CACHE_EX_REQUEST;
typedef struct tagKS_DATAFORMAT_VIDEOINFO_PALETTE *PKS_DATAFORMAT_VIDEOINFO_PALETTE;
typedef struct _TRUSTED_DOMAIN_AUTH_INFORMATION *PTRUSTED_DOMAIN_AUTH_INFORMATION;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION *PTRUSTED_DOMAIN_FULL_INFORMATION;
typedef struct _USERNAME_TARGET_CREDENTIAL_INFO *PUSERNAME_TARGET_CREDENTIAL_INFO;
typedef struct _VBICODECFILTERING_CC_SUBSTREAMS *PVBICODECFILTERING_CC_SUBSTREAMS;
typedef struct _VBICODECFILTERING_STATISTICS_CC *PVBICODECFILTERING_STATISTICS_CC;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A RPC_HTTP_TRANSPORT_CREDENTIALS_A;
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W RPC_HTTP_TRANSPORT_CREDENTIALS_W;
typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR RTL_VERIFIER_PROVIDER_DESCRIPTOR;
typedef struct _HTTPSPolicyCallbackData SSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION2 TRUSTED_DOMAIN_FULL_INFORMATION2;
typedef unsigned char *( *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned int *, unsigned char *, void *);
enum _NDIS_802_11_AUTHENTICATION_MODE {Ndis802_11AuthModeOpen = 0x0,Ndis802_11AuthModeShared = 0x1,Ndis802_11AuthModeAutoSwitch = 0x2,Ndis802_11AuthModeMax = 0x3,};
enum _POLICY_DOMAIN_INFORMATION_CLASS {PolicyDomainEfsInformation = 0x2,PolicyDomainKerberosTicketInformation = 0x3,};
enum __MIDL_IBrowserFrameOptions_0001 {BFO_NONE = 0x0,BFO_BROWSER_PERSIST_SETTINGS = 0x1,BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = 0x2,BFO_BOTH_OPTIONS = 0x4,BIF_PREFER_INTERNET_SHORTCUT = 0x8,BFO_BROWSE_NO_IN_NEW_PROCESS = 0x10,BFO_ENABLE_HYPERLINK_TRACKING = 0x20,BFO_USE_IE_OFFLINE_SUPPORT = 0x40,BFO_SUBSTITUE_INTERNET_START_PAGE = 0x80,BFO_USE_IE_LOGOBANDING = 0x100,BFO_ADD_IE_TOCAPTIONBAR = 0x200,BFO_USE_DIALUP_REF = 0x400,BFO_USE_IE_TOOLBAR = 0x800,BFO_NO_PARENT_FOLDER_SUPPORT = 0x1000,BFO_NO_REOPEN_NEXT_RESTART = 0x2000,BFO_GO_HOME_PAGE = 0x4000,BFO_PREFER_IEPROCESS = 0x8000,BFO_SHOW_NAVIGATION_CANCELLED = 0x10000,BFO_QUERY_ALL = 0xFFFFFFFF,};
enum __MIDL_IInternetZoneManager_0001 {MAX_ZONE_PATH = 0x104,MAX_ZONE_DESCRIPTION = 0xC8,};
enum __MIDL_IInternetZoneManager_0002 {ZAFLAGS_CUSTOM_EDIT = 0x1,ZAFLAGS_ADD_SITES = 0x2,ZAFLAGS_REQUIRE_VERIFICATION = 0x4,ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,ZAFLAGS_NO_UI = 0x20,ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,ZAFLAGS_UNC_AS_INTRANET = 0x80,};
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO CERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA CERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE2 D3DHAL_DP2DRAWINDEXEDPRIMITIVE2;
typedef struct _D3DNTHAL_DP2INDEXEDTRIANGLELIST D3DNTHAL_DP2INDEXEDTRIANGLELIST;
typedef struct _D3DNTHAL_DP2SETPIXELSHADERCONST D3DNTHAL_DP2SETPIXELSHADERCONST;
typedef struct _DDHAL_DDMISCELLANEOUS2CALLBACKS DDHAL_DDMISCELLANEOUS2CALLBACKS;
typedef struct IDirectDrawColorControlVtbl DIRECTDRAWCOLORCONTROLCALLBACKS;
typedef struct IDirectDrawGammaControlVtbl DIRECTDRAWGAMMACONTROLCALLBACKS;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING IMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST JOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS JOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _KERB_PURGE_TKT_CACHE_EX_REQUEST KERB_PURGE_TKT_CACHE_EX_REQUEST;
typedef struct tagKS_DATAFORMAT_VIDEOINFO_PALETTE KS_DATAFORMAT_VIDEOINFO_PALETTE;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLELIST *LPD3DHAL_DP2INDEXEDTRIANGLELIST;
typedef struct _DDHAL_GETVPORTINPUTFORMATDATA *LPDDHAL_GETVPORTINPUTFORMATDATA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW *LPMIXERCONTROLDETAILS_LISTTEXTW;
enum MACRO_D3DDEVCAPS_HWVERTEXBUFFER {D3DDEVCAPS_HWVERTEXBUFFER = 0x2000000,D3DDEVCAPS_HWINDEXBUFFER = 0x4000000,D3DDEVCAPS_SUBVOLUMELOCK = 0x8000000,};
enum MACRO_DRIVER_VERIFIER_IOMANAGER {DRIVER_VERIFIER_IOMANAGER_VIOLATION = 0xC9,};
enum MACRO_SESSION_HAS_VALID_SPECIAL {SESSION_HAS_VALID_SPECIAL_POOL_ON_EXIT = 0xEC,};
typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 *PACTCTX_SECTION_KEYED_DATA_2600;
typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX *PACTIVATION_CONTEXT_QUERY_INDEX;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS *PCERT_X942_DH_VALIDATION_PARAMS;
typedef struct _CREDENTIAL_TARGET_INFORMATIONA *PCREDENTIAL_TARGET_INFORMATIONA;
typedef struct _CREDENTIAL_TARGET_INFORMATIONW *PCREDENTIAL_TARGET_INFORMATIONW;
typedef struct _DD_GETVPORTAUTOFLIPSURFACEDATA *PDD_GETVPORTAUTOFLIPSURFACEDATA;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _B04A80E61A6C52E3FD4D22A5F125C77E *PKSPROPERTY_VIDEOCONTROL_CAPS_S;
typedef struct _CB16EFCEDA39FCD4D0BC1BDE67199271 *PKSPROPERTY_VIDEOCONTROL_MODE_S;
typedef struct _56FA1B9DDCE9D648FE900988960BAD6F *PKSPROPERTY_VIDEODECODER_CAPS_S;
typedef struct tagKS_DATAFORMAT_VIDEOINFOHEADER2 *PKS_DATAFORMAT_VIDEOINFOHEADER2;
typedef struct _MSV1_0_CHANGEPASSWORD_RESPONSE *PMSV1_0_CHANGEPASSWORD_RESPONSE;
typedef struct _MSV1_0_SUPPLEMENTAL_CREDENTIAL *PMSV1_0_SUPPLEMENTAL_CREDENTIAL;
typedef struct _NEGOTIATE_CALLER_NAME_RESPONSE *PNEGOTIATE_CALLER_NAME_RESPONSE;
typedef struct _A45289B030366F6A209F1D22B819A49A *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef struct _OFFLOAD_IPSEC_DELETE_UDPESP_SA *POFFLOAD_IPSEC_DELETE_UDPESP_SA;
typedef struct _PAR_DEVICE_ID_SIZE_INFORMATION *PPAR_DEVICE_ID_SIZE_INFORMATION;
typedef struct _1A75AE2BAA617C024EDEDCFC2DDC14A8 *PSYSAUDIO_ATTACH_VIRTUAL_SOURCE;
typedef struct _F2115D41876A8CDF2A6608801240E71C *PSYSAUDIO_CREATE_VIRTUAL_SOURCE;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX2 *PTRUSTED_DOMAIN_INFORMATION_EX2;
typedef struct _VBICAP_PROPERTIES_PROTECTION_S *PVBICAP_PROPERTIES_PROTECTION_S;
typedef struct _TRUSTED_DOMAIN_AUTH_INFORMATION TRUSTED_DOMAIN_AUTH_INFORMATION;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION TRUSTED_DOMAIN_FULL_INFORMATION;
typedef struct _USERNAME_TARGET_CREDENTIAL_INFO USERNAME_TARGET_CREDENTIAL_INFO;
typedef struct _VBICODECFILTERING_CC_SUBSTREAMS VBICODECFILTERING_CC_SUBSTREAMS;
typedef struct _VBICODECFILTERING_STATISTICS_CC VBICODECFILTERING_STATISTICS_CC;
typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA WIN_SPUB_TRUSTED_PUBLISHER_DATA;
struct WbemDecoupledBasicEventProvider;
enum _LOGICAL_PROCESSOR_RELATIONSHIP {RelationProcessorCore = 0x0,RelationNumaNode = 0x1,};
enum __MIDL_IBindStatusCallback_0001 {BINDVERB_GET = 0x0,BINDVERB_POST = 0x1,BINDVERB_PUT = 0x2,BINDVERB_CUSTOM = 0x3,};
enum __MIDL_IBindStatusCallback_0002 {BINDINFOF_URLENCODESTGMEDDATA = 0x1,BINDINFOF_URLENCODEDEXTRAINFO = 0x2,};
enum __MIDL_IBindStatusCallback_0003 {BINDF_ASYNCHRONOUS = 0x1,BINDF_ASYNCSTORAGE = 0x2,BINDF_NOPROGRESSIVERENDERING = 0x4,BINDF_OFFLINEOPERATION = 0x8,BINDF_GETNEWESTVERSION = 0x10,BINDF_NOWRITECACHE = 0x20,BINDF_NEEDFILE = 0x40,BINDF_PULLDATA = 0x80,BINDF_IGNORESECURITYPROBLEM = 0x100,BINDF_RESYNCHRONIZE = 0x200,BINDF_HYPERLINK = 0x400,BINDF_NO_UI = 0x800,BINDF_SILENTOPERATION = 0x1000,BINDF_PRAGMA_NO_CACHE = 0x2000,BINDF_GETCLASSOBJECT = 0x4000,BINDF_RESERVED_1 = 0x8000,BINDF_FREE_THREADED = 0x10000,BINDF_DIRECT_READ = 0x20000,BINDF_FORMS_SUBMIT = 0x40000,BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,BINDF_FROMURLMON = 0x100000,BINDF_FWD_BACK = 0x200000,BINDF_PREFERDEFAULTHANDLER = 0x400000,BINDF_ENFORCERESTRICTED = 0x800000,};
enum __MIDL_IBindStatusCallback_0004 {URL_ENCODING_NONE = 0x0,URL_ENCODING_ENABLE_UTF8 = 0x10000000,URL_ENCODING_DISABLE_UTF8 = 0x20000000,};
enum __MIDL_IBindStatusCallback_0005 {BINDINFO_OPTIONS_WININETFLAG = 0x10000,BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,};
enum __MIDL_IBindStatusCallback_0006 {BSCF_FIRSTDATANOTIFICATION = 0x1,BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,BSCF_LASTDATANOTIFICATION = 0x4,BSCF_DATAFULLYAVAILABLE = 0x8,BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,};
typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 ACTCTX_SECTION_KEYED_DATA_2600;
typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX ACTIVATION_CONTEXT_QUERY_INDEX;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS CERT_X942_DH_VALIDATION_PARAMS;
typedef struct creative_fastspeech10format_tag CREATIVEFASTSPEECH10WAVEFORMAT;
typedef struct _CREDENTIAL_TARGET_INFORMATIONA CREDENTIAL_TARGET_INFORMATIONA;
typedef struct _CREDENTIAL_TARGET_INFORMATIONW CREDENTIAL_TARGET_INFORMATIONW;
typedef struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE D3DHAL_DP2DRAWINDEXEDPRIMITIVE;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLELIST2 D3DHAL_DP2INDEXEDTRIANGLELIST2;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLESTRIP D3DHAL_DP2INDEXEDTRIANGLESTRIP;
typedef struct _D3DHAL_DP2SETVERTEXSHADERCONST D3DHAL_DP2SETVERTEXSHADERCONST;
typedef struct _D3DNTHAL_CONTEXTDESTROYALLDATA D3DNTHAL_CONTEXTDESTROYALLDATA;
typedef struct _D3DNTHAL_DP2CREATEVERTEXSHADER D3DNTHAL_DP2CREATEVERTEXSHADER;
typedef struct _D3DNTHAL_DP2INDEXEDTRIANGLEFAN D3DNTHAL_DP2INDEXEDTRIANGLEFAN;
typedef struct _DDHAL_DDMISCELLANEOUSCALLBACKS DDHAL_DDMISCELLANEOUSCALLBACKS;
typedef struct _DDHAL_GETAVAILDRIVERMEMORYDATA DDHAL_GETAVAILDRIVERMEMORYDATA;
typedef struct _DDHAL_GETVPORTOUTPUTFORMATDATA DDHAL_GETVPORTOUTPUTFORMATDATA;
typedef struct _DDHAL_WAITFORVERTICALBLANKDATA DDHAL_WAITFORVERTICALBLANKDATA;
struct IInternetProtocolSinkStackable {struct IInternetProtocolSinkStackableVtbl *lpVtbl;};
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY;
struct IWbemClientConnectionTransport {struct IWbemClientConnectionTransportVtbl *lpVtbl;};
typedef struct _B04A80E61A6C52E3FD4D22A5F125C77E KSPROPERTY_VIDEOCONTROL_CAPS_S;
typedef struct _CB16EFCEDA39FCD4D0BC1BDE67199271 KSPROPERTY_VIDEOCONTROL_MODE_S;
typedef struct _56FA1B9DDCE9D648FE900988960BAD6F KSPROPERTY_VIDEODECODER_CAPS_S;
typedef struct tagKS_DATAFORMAT_VIDEOINFOHEADER2 KS_DATAFORMAT_VIDEOINFOHEADER2;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLEFAN *LPD3DHAL_DP2INDEXEDTRIANGLEFAN;
typedef struct _DDHAL_ADDATTACHEDSURFACEDATA *LPDDHAL_ADDATTACHEDSURFACEDATA;
typedef struct _DDHAL_GETVPORTFLIPSTATUSDATA *LPDDHAL_GETVPORTFLIPSTATUSDATA;
typedef struct _DDHAL_SETOVERLAYPOSITIONDATA *LPDDHAL_SETOVERLAYPOSITIONDATA;
typedef struct _DDHAL_UPDATENONLOCALHEAPDATA *LPDDHAL_UPDATENONLOCALHEAPDATA;
typedef struct _DDRAWI_DDRAWSURFACE_GBL_MORE *LPDDRAWI_DDRAWSURFACE_GBL_MORE;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW *LPENUM_SERVICE_STATUS_PROCESSW;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;
enum MACRO_ACTIVATION_CONTEXT_BASIC {ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1,};
enum MACRO_CO_E_FAILEDTOIMPERSONATE {CO_E_FAILEDTOIMPERSONATE = 0x80010123,CO_E_FAILEDTOGETSECCTX = 0x80010124,CO_E_FAILEDTOOPENTHREADTOKEN = 0x80010125,CO_E_FAILEDTOGETTOKENINFO = 0x80010126,CO_E_TRUSTEEDOESNTMATCHCLIENT = 0x80010127,CO_E_FAILEDTOQUERYCLIENTBLANKET = 0x80010128,CO_E_FAILEDTOSETDACL = 0x80010129,CO_E_ACCESSCHECKFAILED = 0x8001012A,CO_E_NETACCESSAPIFAILED = 0x8001012B,CO_E_WRONGTRUSTEENAMESYNTAX = 0x8001012C,CO_E_INVALIDSID = 0x8001012D,CO_E_CONVERSIONFAILED = 0x8001012E,CO_E_NOMATCHINGSIDFOUND = 0x8001012F,CO_E_LOOKUPACCSIDFAILED = 0x80010130,CO_E_NOMATCHINGNAMEFOUND = 0x80010131,CO_E_LOOKUPACCNAMEFAILED = 0x80010132,CO_E_SETSERLHNDLFAILED = 0x80010133,CO_E_FAILEDTOGETWINDIR = 0x80010134,CO_E_PATHTOOLONG = 0x80010135,CO_E_FAILEDTOGENUUID = 0x80010136,CO_E_FAILEDTOCREATEFILE = 0x80010137,CO_E_FAILEDTOCLOSEHANDLE = 0x80010138,CO_E_EXCEEDSYSACLLIMIT = 0x80010139,CO_E_ACESINWRONGORDER = 0x8001013A,CO_E_INCOMPATIBLESTREAMVERSION = 0x8001013B,CO_E_FAILEDTOOPENPROCESSTOKEN = 0x8001013C,CO_E_DECODEFAILED = 0x8001013D,CO_E_ACNOTINITIALIZED = 0x8001013F,CO_E_CANCEL_DISABLED = 0x80010140,};
enum MACRO_D3DDEVCAPS_FLOATTLVERTEX {D3DDEVCAPS_FLOATTLVERTEX = 0x1,D3DDEVCAPS_SORTINCREASINGZ = 0x2,D3DDEVCAPS_SORTDECREASINGZ = 0x4,D3DDEVCAPS_SORTEXACT = 0x8,};
enum MACRO_DRIVER_CORRUPTED_SYSPTES {DRIVER_CORRUPTED_SYSPTES = 0xDB,DRIVER_INVALID_STACK_ACCESS = 0xDC,};
enum MACRO_EXCEPTION_NONCONTINUABLE {EXCEPTION_NONCONTINUABLE = 0x1,EXCEPTION_MAXIMUM_PARAMETERS = 0xF,};
enum MACRO_MIXERCONTROL_CONTROLTYPE {MIXERCONTROL_CONTROLTYPE_SRS_MTS = 536936454,MIXERCONTROL_CONTROLTYPE_SRS_ONOFF = 536936455,MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT = 536936456,};
typedef struct _MSV1_0_CHANGEPASSWORD_RESPONSE MSV1_0_CHANGEPASSWORD_RESPONSE;
typedef struct _MSV1_0_SUPPLEMENTAL_CREDENTIAL MSV1_0_SUPPLEMENTAL_CREDENTIAL;
typedef struct _NEGOTIATE_CALLER_NAME_RESPONSE NEGOTIATE_CALLER_NAME_RESPONSE;
typedef struct _A45289B030366F6A209F1D22B819A49A NTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef struct _OFFLOAD_IPSEC_DELETE_UDPESP_SA OFFLOAD_IPSEC_DELETE_UDPESP_SA;
typedef struct _PAR_DEVICE_ID_SIZE_INFORMATION PAR_DEVICE_ID_SIZE_INFORMATION;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO *PCMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO *PCMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO *PCMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _E49E18AFB8FDA9EDC5FD9E2015544A93 *PIMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct _7C2EF957B9500F866DD2CA3770F79A02 *PIMAGE_LOAD_CONFIG_DIRECTORY64;
typedef struct _IP_ADAPTER_DNS_SERVER_ADDRESS *PIP_ADAPTER_DNS_SERVER_ADDRESS;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct _KERB_INTERACTIVE_UNLOCK_LOGON *PKERB_INTERACTIVE_UNLOCK_LOGON;
typedef struct _KERB_QUERY_TKT_CACHE_RESPONSE *PKERB_QUERY_TKT_CACHE_RESPONSE;
typedef struct _433BAB6AAAB02EEB6CF36ABDE1A4217C *PKSDS3D_HRTF_FILTER_FORMAT_MSG;
typedef struct _4436E3E3B2A9BAC50D793DBB422657C7 *PKSNODEPROPERTY_AUDIO_PROPERTY;
typedef struct _05B1F1BDA3A085B0ABA09A777878EB7C *PKSPROPERTY_CROSSBAR_PININFO_S;
typedef struct _6957CE76948A33FD66E00469AB6817B0 *PKSPROPERTY_VIDEOCOMPRESSION_S;
typedef struct tagKS_DATAFORMAT_VIDEOINFOHEADER *PKS_DATAFORMAT_VIDEOINFOHEADER;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW *PMIXERCONTROLDETAILS_LISTTEXTW;
typedef struct _MSV1_0_CHANGEPASSWORD_REQUEST *PMSV1_0_CHANGEPASSWORD_REQUEST;
typedef struct _NDIS_802_11_NETWORK_TYPE_LIST *PNDIS_802_11_NETWORK_TYPE_LIST;
typedef struct _NEGOTIATE_CALLER_NAME_REQUEST *PNEGOTIATE_CALLER_NAME_REQUEST;
typedef struct _50092E5B8D5585E25A36D2D7AA7D11CF *PNTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct _PRINTER_EVENT_ATTRIBUTES_INFO *PPRINTER_EVENT_ATTRIBUTES_INFO;
typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR *PRTL_VERIFIER_THUNK_DESCRIPTOR;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_A *PSP_DEVINFO_LIST_DETAIL_DATA_A;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_W *PSP_DEVINFO_LIST_DETAIL_DATA_W;
typedef struct _TRANSLATE_VIRTUAL_TO_PHYSICAL *PTRANSLATE_VIRTUAL_TO_PHYSICAL;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX *PTRUSTED_DOMAIN_INFORMATION_EX;
typedef struct _1A75AE2BAA617C024EDEDCFC2DDC14A8 SYSAUDIO_ATTACH_VIRTUAL_SOURCE;
typedef struct _F2115D41876A8CDF2A6608801240E71C SYSAUDIO_CREATE_VIRTUAL_SOURCE;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX2 TRUSTED_DOMAIN_INFORMATION_EX2;
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE USER_MARSHAL_ROUTINE_QUADRUPLE;
typedef struct _VBICAP_PROPERTIES_PROTECTION_S VBICAP_PROPERTIES_PROTECTION_S;
typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY WIN_TRUST_ACTDATA_SUBJECT_ONLY;
enum _ACTIVATION_CONTEXT_INFO_CLASS {ActivationContextBasicInformation = 0x1,ActivationContextDetailedInformation = 0x2,AssemblyDetailedInformationInActivationContext = 0x3,FileInformationInAssemblyOfAssemblyInActivationContext = 0x4,MaxActivationContextInfoClass = 0x5,AssemblyDetailedInformationInActivationContxt = 0x3,FileInformationInAssemblyOfAssemblyInActivationContxt = 0x4,};
enum _D3DSHADER_PARAM_REGISTER_TYPE {D3DSPR_TEMP = 0x0,D3DSPR_INPUT = 0x10000000,D3DSPR_CONST = 0x20000000,D3DSPR_ADDR = 0x30000000,D3DSPR_TEXTURE = 0x30000000,D3DSPR_RASTOUT = 0x40000000,D3DSPR_ATTROUT = 0x50000000,D3DSPR_TEXCRDOUT = 0x60000000,D3DSPR_FORCE_DWORD = 0x7FFFFFFF,};
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY *_PIMAGE_RUNTIME_FUNCTION_ENTRY;
enum __MIDL_IShellPropSheetExt_0001 {EXPPS_FILETYPES = 0x1,};
enum tag_WBEM_INFORMATION_FLAG_TYPE {WBEM_FLAG_SHORT_NAME = 0x1,WBEM_FLAG_LONG_NAME = 0x2,};
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO CMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO CMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO CMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct creative_fastspeech8format_tag CREATIVEFASTSPEECH8WAVEFORMAT;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA CRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO CRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _D3DDEVICE_CREATION_PARAMETERS D3DDEVICE_CREATION_PARAMETERS;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLELIST D3DHAL_DP2INDEXEDTRIANGLELIST;
typedef struct _D3DHAL_DP2SETPIXELSHADERCONST D3DHAL_DP2SETPIXELSHADERCONST;
typedef struct _D3DNTHAL_DP2CREATEPIXELSHADER D3DNTHAL_DP2CREATEPIXELSHADER;
typedef struct _D3DNTHAL_DP2MULTIPLYTRANSFORM D3DNTHAL_DP2MULTIPLYTRANSFORM;
typedef struct _D3DNTHAL_DP2SETSTREAMSOURCEUM D3DNTHAL_DP2SETSTREAMSOURCEUM;
typedef struct _D3DNTHAL_DP2TEXTURESTAGESTATE D3DNTHAL_DP2TEXTURESTAGESTATE;
typedef struct _DDHAL_DDCOLORCONTROLCALLBACKS DDHAL_DDCOLORCONTROLCALLBACKS;
typedef struct _DDHAL_GETVPORTINPUTFORMATDATA DDHAL_GETVPORTINPUTFORMATDATA;
typedef struct IDDVideoPortContainerVtbl DDVIDEOPORTCONTAINERCALLBACKS;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR IMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _E49E18AFB8FDA9EDC5FD9E2015544A93 IMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct _7C2EF957B9500F866DD2CA3770F79A02 IMAGE_LOAD_CONFIG_DIRECTORY64;
typedef struct _IP_ADAPTER_DNS_SERVER_ADDRESS IP_ADAPTER_DNS_SERVER_ADDRESS;
typedef struct _KERB_INTERACTIVE_UNLOCK_LOGON KERB_INTERACTIVE_UNLOCK_LOGON;
typedef struct _KERB_QUERY_TKT_CACHE_RESPONSE KERB_QUERY_TKT_CACHE_RESPONSE;
typedef struct _433BAB6AAAB02EEB6CF36ABDE1A4217C KSDS3D_HRTF_FILTER_FORMAT_MSG;
typedef struct _4436E3E3B2A9BAC50D793DBB422657C7 KSNODEPROPERTY_AUDIO_PROPERTY;
typedef struct _05B1F1BDA3A085B0ABA09A777878EB7C KSPROPERTY_CROSSBAR_PININFO_S;
typedef struct _6957CE76948A33FD66E00469AB6817B0 KSPROPERTY_VIDEOCOMPRESSION_S;
typedef struct tagKS_DATAFORMAT_VIDEOINFOHEADER KS_DATAFORMAT_VIDEOINFOHEADER;
typedef struct _D3DDRAWPRIMITIVESTRIDEDDATA *LPD3DDRAWPRIMITIVESTRIDEDDATA;
typedef struct _D3DNTHAL_DP2TRIANGLEFAN_IMM *LPD3DNTHAL_DP2TRIANGLEFAN_IMM;
typedef struct _DDHAL_GETINTERNALMOCOMPDATA *LPDDHAL_GETINTERNALMOCOMPDATA;
typedef struct _DDHAL_GETMOCOMPCOMPBUFFDATA *LPDDHAL_GETMOCOMPCOMPBUFFDATA;
typedef struct _DDHAL_GETVPORTBANDWIDTHDATA *LPDDHAL_GETVPORTBANDWIDTHDATA;
typedef struct _DDHAL_QUERYMOCOMPSTATUSDATA *LPDDHAL_QUERYMOCOMPSTATUSDATA;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE *LPPRINTER_NOTIFY_OPTIONS_TYPE;
enum MACRO_D3DPMISCCAPS_MASKPLANES {D3DPMISCCAPS_MASKPLANES = 0x1,D3DPMISCCAPS_CONFORMANT = 0x8,};
enum MACRO_D3DPTFILTERCAPS_NEAREST {D3DPTFILTERCAPS_NEAREST = 0x1,D3DPTFILTERCAPS_LINEAR = 0x2,D3DPTFILTERCAPS_MIPNEAREST = 0x4,D3DPTFILTERCAPS_MIPLINEAR = 0x8,D3DPTFILTERCAPS_LINEARMIPNEAREST = 0x10,D3DPTFILTERCAPS_LINEARMIPLINEAR = 0x20,};
enum MACRO_DCICREATEOVERLAYSURFACE {DCICREATEOVERLAYSURFACE = 3,DCIENUMSURFACE = 4,};
enum MACRO_DCICREATEPRIMARYSURFACE {DCICREATEPRIMARYSURFACE = 1,DCICREATEOFFSCREENSURFACE = 2,};
enum MACRO_IDD_DYNAWIZ_RESOURCE_ID {MIN_IDD_DYNAWIZ_RESOURCE_ID = 10000,MAX_IDD_DYNAWIZ_RESOURCE_ID = 11000,};
enum MACRO_IMAGE_SIZEOF_LINENUMBER {IMAGE_SIZEOF_LINENUMBER = 6,IMAGE_SIZEOF_BASE_RELOCATION = 8,IMAGE_REL_BASED_ABSOLUTE = 0,IMAGE_REL_BASED_HIGH = 1,IMAGE_REL_BASED_LOW = 2,IMAGE_REL_BASED_HIGHLOW = 3,IMAGE_REL_BASED_HIGHADJ = 4,IMAGE_REL_BASED_MIPS_JMPADDR = 5,IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,IMAGE_REL_BASED_IA64_IMM64 = 9,IMAGE_REL_BASED_DIR64 = 10,IMAGE_ARCHIVE_START_SIZE = 8,IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60,IMAGE_ORDINAL_FLAG64 = -9223372036854775808,IMAGE_ORDINAL_FLAG32 = -2147483648,IMAGE_ORDINAL_FLAG = -2147483648,IMAGE_RESOURCE_NAME_IS_STRING = -2147483648,IMAGE_RESOURCE_DATA_IS_DIRECTORY = -2147483648,IMAGE_DEBUG_TYPE_UNKNOWN = 0,IMAGE_DEBUG_TYPE_COFF = 1,IMAGE_DEBUG_TYPE_CODEVIEW = 2,IMAGE_DEBUG_TYPE_FPO = 3,IMAGE_DEBUG_TYPE_MISC = 4,IMAGE_DEBUG_TYPE_EXCEPTION = 5,IMAGE_DEBUG_TYPE_FIXUP = 6,IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7,IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8,IMAGE_DEBUG_TYPE_BORLAND = 9,IMAGE_DEBUG_TYPE_RESERVED10 = 10,IMAGE_DEBUG_TYPE_CLSID = 11,};
enum MACRO_KSPROPERTY_VIDEOPROCAMP {KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO = 0x1,KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL = 0x2,KSPROPERTY_CAMERACONTROL_FLAGS_AUTO = 0x1,KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL = 0x2,KSPROPERTY_CAMERACONTROL_FLAGS_ABSOLUTE = 0x0,KSPROPERTY_CAMERACONTROL_FLAGS_RELATIVE = 0x10,};
enum MACRO_MAX_ADAPTER_DESCRIPTION {MAX_ADAPTER_DESCRIPTION_LENGTH = 128,MAX_ADAPTER_NAME_LENGTH = 256,MAX_ADAPTER_ADDRESS_LENGTH = 8,};
enum MACRO_MaxNumberOfEEInfoParams {MaxNumberOfEEInfoParams = 4,};
enum MACRO_TIME_NOMINUTESORSECONDS {TIME_NOMINUTESORSECONDS = 0x1,TIME_NOSECONDS = 0x2,TIME_NOTIMEMARKER = 0x4,TIME_FORCE24HOURFORMAT = 0x8,};
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW MIXERCONTROLDETAILS_LISTTEXTW;
typedef struct _MSV1_0_CHANGEPASSWORD_REQUEST MSV1_0_CHANGEPASSWORD_REQUEST;
typedef struct _NDIS_802_11_NETWORK_TYPE_LIST NDIS_802_11_NETWORK_TYPE_LIST;
typedef struct _NEGOTIATE_CALLER_NAME_REQUEST NEGOTIATE_CALLER_NAME_REQUEST;
typedef struct _50092E5B8D5585E25A36D2D7AA7D11CF NTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_CONSTRAINTS_INFO *PCERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO *PCMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _DDGETPREVIOUSAUTOFLIPOUTINFO *PDDGETPREVIOUSAUTOFLIPOUTINFO;
typedef struct _DRIVE_LAYOUT_INFORMATION_GPT *PDRIVE_LAYOUT_INFORMATION_GPT;
typedef struct _DRIVE_LAYOUT_INFORMATION_MBR *PDRIVE_LAYOUT_INFORMATION_MBR;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct _HIDP_KEYBOARD_MODIFIER_STATE *PHIDP_KEYBOARD_MODIFIER_STATE;
typedef struct _IP_ADAPTER_MULTICAST_ADDRESS *PIP_ADAPTER_MULTICAST_ADDRESS;
typedef struct _JOBOBJECT_JOBSET_INFORMATION *PJOBOBJECT_JOBSET_INFORMATION;
typedef struct _KERB_ADD_CREDENTIALS_REQUEST *PKERB_ADD_CREDENTIALS_REQUEST;
typedef struct _KERB_PURGE_TKT_CACHE_REQUEST *PKERB_PURGE_TKT_CACHE_REQUEST;
typedef struct _KERB_QUERY_TKT_CACHE_REQUEST *PKERB_QUERY_TKT_CACHE_REQUEST;
typedef struct _KERB_SMART_CARD_UNLOCK_LOGON *PKERB_SMART_CARD_UNLOCK_LOGON;
typedef struct _8251F34BCF49AE1C266F7CD180791646 *PKSNODEPROPERTY_AUDIO_CHANNEL;
typedef struct _39A7E4ECA0CDD25B70D9543F73C0D523 *PKSPROPERTY_STEPPING_LONGLONG;
typedef struct _B62AAF3B70FEB5C8D5EF5D71926BC992 *PKSPROPERTY_TUNER_FREQUENCY_S;
typedef struct _23496AA6B538BC04EA278D40B88E7395 *PKSPROPERTY_TUNER_IF_MEDIUM_S;
typedef struct _358B21B769DBB67C3050F61FED658732 *PKSPROPERTY_TUNER_MODE_CAPS_S;
typedef struct _LSA_FOREST_TRUST_BINARY_DATA *PLSA_FOREST_TRUST_BINARY_DATA;
typedef struct _LSA_FOREST_TRUST_DOMAIN_INFO *PLSA_FOREST_TRUST_DOMAIN_INFO;
typedef struct _LSA_FOREST_TRUST_INFORMATION *PLSA_FOREST_TRUST_INFORMATION;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;
typedef struct _NDIS_802_11_CONFIGURATION_FH *PNDIS_802_11_CONFIGURATION_FH;
typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES *PNDIS_PM_WAKE_UP_CAPABILITIES;
typedef struct _OFFLOAD_SECURITY_ASSOCIATION *POFFLOAD_SECURITY_ASSOCIATION;
typedef struct _POLICY_AUDIT_FULL_QUERY_INFO *PPOLICY_AUDIT_FULL_QUERY_INFO;
typedef struct _PRINTER_EVENT_ATTRIBUTES_INFO PRINTER_EVENT_ATTRIBUTES_INFO;
typedef struct _SET_PARTITION_INFORMATION_EX *PSET_PARTITION_INFORMATION_EX;
typedef struct _SP_POWERMESSAGEWAKE_PARAMS_A *PSP_POWERMESSAGEWAKE_PARAMS_A;
typedef struct _SP_POWERMESSAGEWAKE_PARAMS_W *PSP_POWERMESSAGEWAKE_PARAMS_W;
typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR RTL_VERIFIER_THUNK_DESCRIPTOR;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_A SP_DEVINFO_LIST_DETAIL_DATA_A;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_W SP_DEVINFO_LIST_DETAIL_DATA_W;
typedef struct _TRANSLATE_VIRTUAL_TO_PHYSICAL TRANSLATE_VIRTUAL_TO_PHYSICAL;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX TRUSTED_DOMAIN_INFORMATION_EX;
enum _MSV1_0_PROTOCOL_MESSAGE_TYPE {MsV1_0Lm20ChallengeRequest = 0x0,MsV1_0Lm20GetChallengeResponse = 0x1,MsV1_0EnumerateUsers = 0x2,MsV1_0GetUserInfo = 0x3,MsV1_0ReLogonUsers = 0x4,MsV1_0ChangePassword = 0x5,MsV1_0ChangeCachedPassword = 0x6,MsV1_0GenericPassthrough = 0x7,MsV1_0CacheLogon = 0x8,MsV1_0SubAuth = 0x9,MsV1_0DeriveCredential = 0xA,MsV1_0CacheLookup = 0xB,MsV1_0SetProcessOption = 0xC,};
enum _SECURITY_IMPERSONATION_LEVEL {SecurityAnonymous = 0x0,SecurityIdentification = 0x1,SecurityImpersonation = 0x2,SecurityDelegation = 0x3,};
enum __MIDL_ISearchCommandExt_0001 {SCE_SEARCHFORFILES = 0x0,SCE_SEARCHFORCOMPUTERS = 0x1,};
enum tag_WBEM_BACKUP_RESTORE_FLAGS {WBEM_FLAG_BACKUP_RESTORE_DEFAULT = 0x0,WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN = 0x1,};
enum tag_WBEM_LIMITATION_FLAG_TYPE {WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS = 0x10,WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS = 0x20,};
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO CERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_CONSTRAINTS_INFO CERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO CMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _D3DHAL_CONTEXTDESTROYALLDATA D3DHAL_CONTEXTDESTROYALLDATA;
typedef struct _D3DHAL_DP2CREATEVERTEXSHADER D3DHAL_DP2CREATEVERTEXSHADER;
typedef struct _D3DHAL_DP2INDEXEDTRIANGLEFAN D3DHAL_DP2INDEXEDTRIANGLEFAN;
typedef struct _D3DNTHAL_DP2INDEXEDLINESTRIP D3DNTHAL_DP2INDEXEDLINESTRIP;
typedef struct _D3DNTHAL_DRAWPRIMITIVES2DATA D3DNTHAL_DRAWPRIMITIVES2DATA;
typedef struct _D3DNTHAL_SETRENDERTARGETDATA D3DNTHAL_SETRENDERTARGETDATA;
typedef struct _DDGETPREVIOUSAUTOFLIPOUTINFO DDGETPREVIOUSAUTOFLIPOUTINFO;
typedef struct _DDHAL_ADDATTACHEDSURFACEDATA DDHAL_ADDATTACHEDSURFACEDATA;
typedef struct _DDHAL_GETVPORTFLIPSTATUSDATA DDHAL_GETVPORTFLIPSTATUSDATA;
typedef struct _DDHAL_SETOVERLAYPOSITIONDATA DDHAL_SETOVERLAYPOSITIONDATA;
typedef struct _DDHAL_UPDATENONLOCALHEAPDATA DDHAL_UPDATENONLOCALHEAPDATA;
typedef struct _DDNT_DEFERRED_AGP_AWARE_DATA DDNT_DEFERRED_AGP_AWARE_DATA;
typedef struct _DDRAWI_DDRAWSURFACE_GBL_MORE DDRAWI_DDRAWSURFACE_GBL_MORE;
typedef struct IDirectDrawVideoPortVtbl DIRECTDRAWVIDEOPORTCALLBACKS;
typedef struct _DRIVE_LAYOUT_INFORMATION_GPT DRIVE_LAYOUT_INFORMATION_GPT;
typedef struct _DRIVE_LAYOUT_INFORMATION_MBR DRIVE_LAYOUT_INFORMATION_MBR;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESSW;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR GENERIC_BINDING_ROUTINE_PAIR;
typedef struct _HIDP_KEYBOARD_MODIFIER_STATE HIDP_KEYBOARD_MODIFIER_STATE;
struct IInternetHostSecurityManager {struct IInternetHostSecurityManagerVtbl *lpVtbl;};
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IP_ADAPTER_MULTICAST_ADDRESS IP_ADAPTER_MULTICAST_ADDRESS;
struct IXMLDOMProcessingInstruction {struct IXMLDOMProcessingInstructionVtbl *lpVtbl;};
typedef struct _JOBOBJECT_JOBSET_INFORMATION JOBOBJECT_JOBSET_INFORMATION;
typedef struct _KERB_ADD_CREDENTIALS_REQUEST KERB_ADD_CREDENTIALS_REQUEST;
typedef struct _KERB_PURGE_TKT_CACHE_REQUEST KERB_PURGE_TKT_CACHE_REQUEST;
typedef struct _KERB_QUERY_TKT_CACHE_REQUEST KERB_QUERY_TKT_CACHE_REQUEST;
typedef struct _KERB_SMART_CARD_UNLOCK_LOGON KERB_SMART_CARD_UNLOCK_LOGON;
typedef struct _8251F34BCF49AE1C266F7CD180791646 KSNODEPROPERTY_AUDIO_CHANNEL;
typedef struct _39A7E4ECA0CDD25B70D9543F73C0D523 KSPROPERTY_STEPPING_LONGLONG;
typedef struct _B62AAF3B70FEB5C8D5EF5D71926BC992 KSPROPERTY_TUNER_FREQUENCY_S;
typedef struct _23496AA6B538BC04EA278D40B88E7395 KSPROPERTY_TUNER_IF_MEDIUM_S;
typedef struct _358B21B769DBB67C3050F61FED658732 KSPROPERTY_TUNER_MODE_CAPS_S;
typedef struct _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;
typedef struct _D3DHAL_DP2INDEXEDLINESTRIP *LPD3DHAL_DP2INDEXEDLINESTRIP;
typedef struct _DDHAL_BEGINMOCOMPFRAMEDATA *LPDDHAL_BEGINMOCOMPFRAMEDATA;
typedef struct _DDHAL_CANCREATESURFACEDATA *LPDDHAL_CANCREATESURFACEDATA;
typedef struct _DDHAL_FLIPTOGDISURFACEDATA *LPDDHAL_FLIPTOGDISURFACEDATA;
typedef struct _DDHAL_GETHEAPALIGNMENTDATA *LPDDHAL_GETHEAPALIGNMENTDATA;
typedef struct _DDHAL_GETMOCOMPFORMATSDATA *LPDDHAL_GETMOCOMPFORMATSDATA;
typedef struct _DDHAL_SETEXCLUSIVEMODEDATA *LPDDHAL_SETEXCLUSIVEMODEDATA;
typedef struct _DDHAL_WAITFORVPORTSYNCDATA *LPDDHAL_WAITFORVPORTSYNCDATA;
typedef struct tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;
typedef IOleInPlaceObjectWindowless *LPOLEINPLACEOBJECTWINDOWLESS;
typedef struct _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW;
typedef struct _SHChangeProductKeyAsIDList *LPSHChangeProductKeyAsIDList;
typedef struct _LSA_FOREST_TRUST_BINARY_DATA LSA_FOREST_TRUST_BINARY_DATA;
typedef struct _LSA_FOREST_TRUST_DOMAIN_INFO LSA_FOREST_TRUST_DOMAIN_INFO;
typedef struct _LSA_FOREST_TRUST_INFORMATION LSA_FOREST_TRUST_INFORMATION;
enum MACRO_MAX_JOYSTICKOEMVXDNAME {MAX_JOYSTICKOEMVXDNAME = 260,};
enum MACRO_MIXER_GETLINECONTROLSF {MIXER_GETLINECONTROLSF_ALL = 0x0,MIXER_GETLINECONTROLSF_ONEBYID = 0x1,MIXER_GETLINECONTROLSF_ONEBYTYPE = 0x2,MIXER_GETLINECONTROLSF_QUERYMASK = 0xF,MIXER_GETCONTROLDETAILSF_VALUE = 0x0,MIXER_GETCONTROLDETAILSF_LISTTEXT = 0x1,MIXER_GETCONTROLDETAILSF_QUERYMASK = 0xF,MIXER_SETCONTROLDETAILSF_VALUE = 0x0,MIXER_SETCONTROLDETAILSF_CUSTOM = 0x1,MIXER_SETCONTROLDETAILSF_QUERYMASK = 0xF,};
enum MACRO_POSTSCRIPT_PASSTHROUGH {POSTSCRIPT_PASSTHROUGH = 4115,};
enum MACRO_PRINTER_NOTIFY_OPTIONS {PRINTER_NOTIFY_OPTIONS_REFRESH = 0x1,PRINTER_NOTIFY_INFO_DISCARDED = 0x1,};
enum MACRO_URLACTION_AUTHENTICATE {URLACTION_AUTHENTICATE_CLIENT = 0x1A01,};
enum MACRO_URLPOLICY_AUTHENTICATE {URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0x0,URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 0x10000,URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 0x30000,};
typedef struct tMIXERCONTROLDETAILS_UNSIGNED MIXERCONTROLDETAILS_UNSIGNED;
typedef struct _NDIS_802_11_CONFIGURATION_FH NDIS_802_11_CONFIGURATION_FH;
typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES NDIS_PM_WAKE_UP_CAPABILITIES;
typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES NDR_CS_SIZE_CONVERT_ROUTINES;
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1 NDR_USER_MARSHAL_INFO_LEVEL1;
typedef struct _OFFLOAD_SECURITY_ASSOCIATION OFFLOAD_SECURITY_ASSOCIATION;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_ISSUER_PARA;
typedef struct _CERT_LDAP_STORE_OPENED_PARA *PCERT_LDAP_STORE_OPENED_PARA;
typedef struct _CHANGER_READ_ELEMENT_STATUS *PCHANGER_READ_ELEMENT_STATUS;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO *PCMSG_KEY_AGREE_ENCRYPT_INFO;
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO *PCMSG_KEY_TRANS_ENCRYPT_INFO;
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO *PCMSG_MAIL_LIST_ENCRYPT_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO *PCROSS_CERT_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW *PCRYPT_PASSWORD_CREDENTIALSW;
typedef struct _DDGETCURRENTAUTOFLIPOUTINFO *PDDGETCURRENTAUTOFLIPOUTINFO;
typedef struct _DDGETPREVIOUSAUTOFLIPININFO *PDDGETPREVIOUSAUTOFLIPININFO;
typedef struct _DD_GETAVAILDRIVERMEMORYDATA *PDD_GETAVAILDRIVERMEMORYDATA;
typedef struct _DD_GETVPORTOUTPUTFORMATDATA *PDD_GETVPORTOUTPUTFORMATDATA;
typedef struct _DD_WAITFORVERTICALBLANKDATA *PDD_WAITFORVERTICALBLANKDATA;
typedef struct _DOMAIN_PASSWORD_INFORMATION *PDOMAIN_PASSWORD_INFORMATION;
typedef struct _DRIVE_LAYOUT_INFORMATION_EX *PDRIVE_LAYOUT_INFORMATION_EX;
typedef struct _ENCRYPTION_CERTIFICATE_HASH *PENCRYPTION_CERTIFICATE_HASH;
typedef struct _ENCRYPTION_CERTIFICATE_LIST *PENCRYPTION_CERTIFICATE_LIST;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER *PFILE_ALLOCATED_RANGE_BUFFER;
typedef struct _GET_CURRENT_PROCESS_ADDRESS *PGET_CURRENT_PROCESS_ADDRESS;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _KERB_CHANGEPASSWORD_REQUEST *PKERB_CHANGEPASSWORD_REQUEST;
typedef struct _KERB_REFRESH_SCCRED_REQUEST *PKERB_REFRESH_SCCRED_REQUEST;
typedef struct _KERB_SETPASSWORD_EX_REQUEST *PKERB_SETPASSWORD_EX_REQUEST;
typedef struct _6D40E8E2125A3BBCEB5B162FD51EF33B *PKSDS3D_LISTENER_ORIENTATION;
typedef struct _ECD9D23603D8BADEE24156B8BE3276B4 *PKSPROPERTY_CROSSBAR_ROUTE_S;
typedef struct _060F75F85D33090A279ABE5EFCC5AB4A *PKSPROPERTY_TUNER_STANDARD_S;
typedef struct _B03639772012518ABC96BF05B41D5C12 *PKSSTREAMALLOCATOR_STATUS_EX;
typedef struct tagKS_DATAFORMAT_VBIINFOHEADER *PKS_DATAFORMAT_VBIINFOHEADER;
typedef struct _KS_VIDEO_STREAM_CONFIG_CAPS *PKS_VIDEO_STREAM_CONFIG_CAPS;
typedef struct _LSA_ENUMERATION_INFORMATION *PLSA_ENUMERATION_INFORMATION;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;
typedef struct _MSV1_0_PASSTHROUGH_RESPONSE *PMSV1_0_PASSTHROUGH_RESPONSE;
typedef struct _OFFLOAD_IPSEC_ADD_UDPESP_SA *POFFLOAD_IPSEC_ADD_UDPESP_SA;
typedef struct _A97809CBA93BE73DFF75CDF56246D798 *POFFSETINSTANCEDATAANDLENGTH;
typedef struct _POLICY_AUDIT_FULL_QUERY_INFO POLICY_AUDIT_FULL_QUERY_INFO;
typedef struct _POLICY_LSA_SERVER_ROLE_INFO *PPOLICY_LSA_SERVER_ROLE_INFO;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE *PPRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _PROCESSOR_POWER_POLICY_INFO *PPROCESSOR_POWER_POLICY_INFO;
typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR *PRTL_VERIFIER_DLL_DESCRIPTOR;
typedef struct _SECURITY_LOGON_SESSION_DATA *PSECURITY_LOGON_SESSION_DATA;
typedef struct _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V1_A *PSP_BACKUP_QUEUE_PARAMS_V1_A;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V1_W *PSP_BACKUP_QUEUE_PARAMS_V1_W;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V2_A *PSP_BACKUP_QUEUE_PARAMS_V2_A;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V2_W *PSP_BACKUP_QUEUE_PARAMS_V2_W;
typedef struct _SP_REGISTER_CONTROL_STATUSA *PSP_REGISTER_CONTROL_STATUSA;
typedef struct _SP_REGISTER_CONTROL_STATUSW *PSP_REGISTER_CONTROL_STATUSW;
typedef struct _TOKEN_GROUPS_AND_PRIVILEGES *PTOKEN_GROUPS_AND_PRIVILEGES;
typedef struct _VBICODECFILTERING_SCANLINES *PVBICODECFILTERING_SCANLINES;
typedef struct _WINDBG_OLDKD_EXTENSION_APIS *PWINDBG_OLDKD_EXTENSION_APIS;
enum ReplacesCorHdrNumericDefines {COMIMAGE_FLAGS_ILONLY = 0x1,COMIMAGE_FLAGS_32BITREQUIRED = 0x2,COMIMAGE_FLAGS_IL_LIBRARY = 0x4,COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x8,COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,COR_VERSION_MAJOR_V2 = 0x2,COR_VERSION_MAJOR = 0x2,COR_VERSION_MINOR = 0x0,COR_DELETED_NAME_LENGTH = 0x8,COR_VTABLEGAP_NAME_LENGTH = 0x8,NATIVE_TYPE_MAX_CB = 0x1,COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,IMAGE_COR_MIH_METHODRVA = 0x1,IMAGE_COR_MIH_EHRVA = 0x2,IMAGE_COR_MIH_BASICBLOCK = 0x8,COR_VTABLE_32BIT = 0x1,COR_VTABLE_64BIT = 0x2,COR_VTABLE_FROM_UNMANAGED = 0x4,COR_VTABLE_CALL_MOST_DERIVED = 0x10,IMAGE_COR_EATJ_THUNK_SIZE = 0x20,MAX_CLASS_NAME = 0x400,MAX_PACKAGE_NAME = 0x400,};
typedef struct _SECURITY_DESCRIPTOR_RELATIVE SECURITY_DESCRIPTOR_RELATIVE;
typedef struct _SET_PARTITION_INFORMATION_EX SET_PARTITION_INFORMATION_EX;
typedef struct _SP_POWERMESSAGEWAKE_PARAMS_A SP_POWERMESSAGEWAKE_PARAMS_A;
typedef struct _SP_POWERMESSAGEWAKE_PARAMS_W SP_POWERMESSAGEWAKE_PARAMS_W;
enum ShellWindowFindWindowOptions {SWFO_NEEDDISPATCH = 0x1,SWFO_INCLUDEPENDING = 0x2,SWFO_COOKIEPASSED = 0x4,};
typedef void ( *USER_MARSHAL_FREEING_ROUTINE)(unsigned int *, void *);
struct WbemUninitializedClassObject;
enum _CHANGER_DEVICE_PROBLEM_TYPE {DeviceProblemNone = 0x0,DeviceProblemHardware = 0x1,DeviceProblemCHMError = 0x2,DeviceProblemDoorOpen = 0x3,DeviceProblemCalibrationError = 0x4,DeviceProblemTargetFailure = 0x5,DeviceProblemCHMMoveError = 0x6,DeviceProblemCHMZeroError = 0x7,DeviceProblemCartridgeInsertError = 0x8,DeviceProblemPositionError = 0x9,DeviceProblemSensorError = 0xA,DeviceProblemCartridgeEjectError = 0xB,DeviceProblemGripperError = 0xC,DeviceProblemDriveError = 0xD,};
enum _D3DSHADER_PARAM_DSTMOD_TYPE {D3DSPDM_NONE = 0x0,D3DSPDM_SATURATE = 0x100000,D3DSPDM_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSHADER_PARAM_SRCMOD_TYPE {D3DSPSM_NONE = 0x0,D3DSPSM_NEG = 0x1000000,D3DSPSM_BIAS = 0x2000000,D3DSPSM_BIASNEG = 0x3000000,D3DSPSM_SIGN = 0x4000000,D3DSPSM_SIGNNEG = 0x5000000,D3DSPSM_COMP = 0x6000000,D3DSPSM_X2 = 0x7000000,D3DSPSM_X2NEG = 0x8000000,D3DSPSM_DZ = 0x9000000,D3DSPSM_DW = 0xA000000,D3DSPSM_FORCE_DWORD = 0x7FFFFFFF,};
enum _NDIS_802_11_RELOAD_DEFAULTS {Ndis802_11ReloadWEPKeys = 0x0,};
enum _NDIS_FDDI_LCONNECTION_STATE {NdisFddiStateOff = 0x1,NdisFddiStateBreak = 0x2,NdisFddiStateTrace = 0x3,NdisFddiStateConnect = 0x4,NdisFddiStateNext = 0x5,NdisFddiStateSignal = 0x6,NdisFddiStateJoin = 0x7,NdisFddiStateVerify = 0x8,NdisFddiStateActive = 0x9,NdisFddiStateMaintenance = 0xA,};
enum tag_WBEM_CONDITION_FLAG_TYPE {WBEM_FLAG_ALWAYS = 0x0,WBEM_FLAG_ONLY_IF_TRUE = 0x1,WBEM_FLAG_ONLY_IF_FALSE = 0x2,WBEM_FLAG_ONLY_IF_IDENTICAL = 0x3,WBEM_MASK_PRIMARY_CONDITION = 0x3,WBEM_FLAG_KEYS_ONLY = 0x4,WBEM_FLAG_REFS_ONLY = 0x8,WBEM_FLAG_LOCAL_ONLY = 0x10,WBEM_FLAG_PROPAGATED_ONLY = 0x20,WBEM_FLAG_SYSTEM_ONLY = 0x30,WBEM_FLAG_NONSYSTEM_ONLY = 0x40,WBEM_MASK_CONDITION_ORIGIN = 0x70,WBEM_FLAG_CLASS_OVERRIDES_ONLY = 0x100,WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES = 0x200,WBEM_MASK_CLASS_CONDITION = 0x300,};
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE ACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO CERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO CERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_ISSUER_PARA;
typedef struct _CERT_LDAP_STORE_OPENED_PARA CERT_LDAP_STORE_OPENED_PARA;
typedef struct _CHANGER_READ_ELEMENT_STATUS CHANGER_READ_ELEMENT_STATUS;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO CMSG_KEY_AGREE_ENCRYPT_INFO;
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO CMSG_KEY_TRANS_ENCRYPT_INFO;
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO CMSG_MAIL_LIST_ENCRYPT_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO CROSS_CERT_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA CRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW CRYPT_PASSWORD_CREDENTIALSW;
enum CommandStateChangeConstants {CSC_UPDATECOMMANDS = 0xFFFFFFFF,CSC_NAVIGATEFORWARD = 0x1,CSC_NAVIGATEBACK = 0x2,};
typedef struct _D3DDRAWPRIMITIVESTRIDEDDATA D3DDRAWPRIMITIVESTRIDEDDATA;
typedef struct _D3DHAL_DP2CREATEPIXELSHADER D3DHAL_DP2CREATEPIXELSHADER;
typedef struct _D3DHAL_DP2MULTIPLYTRANSFORM D3DHAL_DP2MULTIPLYTRANSFORM;
typedef struct _D3DHAL_DP2SETSTREAMSOURCEUM D3DHAL_DP2SETSTREAMSOURCEUM;
typedef struct _D3DHAL_DP2TEXTURESTAGESTATE D3DHAL_DP2TEXTURESTAGESTATE;
typedef struct _D3DHAL_DRAWONEPRIMITIVEDATA D3DHAL_DRAWONEPRIMITIVEDATA;
typedef struct _D3DNTHAL_CLIPPEDTRIANGLEFAN D3DNTHAL_CLIPPEDTRIANGLEFAN;
typedef struct _D3DNTHAL_CONTEXTDESTROYDATA D3DNTHAL_CONTEXTDESTROYDATA;
typedef struct _D3DNTHAL_D3DDX6EXTENDEDCAPS D3DNTHAL_D3DDX6EXTENDEDCAPS;
typedef struct _D3DNTHAL_DP2INDEXEDLINELIST D3DNTHAL_DP2INDEXEDLINELIST;
typedef struct _D3DNTHAL_DP2SETRENDERTARGET D3DNTHAL_DP2SETRENDERTARGET;
typedef struct _D3DNTHAL_DP2SETSTREAMSOURCE D3DNTHAL_DP2SETSTREAMSOURCE;
typedef struct _D3DNTHAL_DP2TRIANGLEFAN_IMM D3DNTHAL_DP2TRIANGLEFAN_IMM;
typedef struct _D3DNTHAL_TEXTUREDESTROYDATA D3DNTHAL_TEXTUREDESTROYDATA;
typedef struct _D3DNTHAL_TEXTUREGETSURFDATA D3DNTHAL_TEXTUREGETSURFDATA;
typedef struct _DDGETCURRENTAUTOFLIPOUTINFO DDGETCURRENTAUTOFLIPOUTINFO;
typedef struct _DDGETPREVIOUSAUTOFLIPININFO DDGETPREVIOUSAUTOFLIPININFO;
typedef struct _DDHAL_DDMOTIONCOMPCALLBACKS DDHAL_DDMOTIONCOMPCALLBACKS;
typedef struct _DDHAL_GETINTERNALMOCOMPDATA DDHAL_GETINTERNALMOCOMPDATA;
typedef struct _DDHAL_GETMOCOMPCOMPBUFFDATA DDHAL_GETMOCOMPCOMPBUFFDATA;
typedef struct _DDHAL_GETVPORTBANDWIDTHDATA DDHAL_GETVPORTBANDWIDTHDATA;
typedef struct _DDHAL_QUERYMOCOMPSTATUSDATA DDHAL_QUERYMOCOMPSTATUSDATA;
typedef struct _DDNT_FREE_DEFERRED_AGP_DATA DDNT_FREE_DEFERRED_AGP_DATA;
typedef struct _DD_GETAVAILDRIVERMEMORYDATA DD_GETAVAILDRIVERMEMORYDATA;
typedef struct _DD_GETVPORTOUTPUTFORMATDATA DD_GETVPORTOUTPUTFORMATDATA;
typedef struct _DD_WAITFORVERTICALBLANKDATA DD_WAITFORVERTICALBLANKDATA;
typedef struct IDirectDrawSurface2Vtbl DIRECTDRAWSURFACE2CALLBACKS;
typedef struct IDirectDrawSurface3Vtbl DIRECTDRAWSURFACE3CALLBACKS;
typedef struct IDirectDrawSurface4Vtbl DIRECTDRAWSURFACE4CALLBACKS;
typedef struct IDirectDrawSurface7Vtbl DIRECTDRAWSURFACE7CALLBACKS;
typedef struct _DOMAIN_PASSWORD_INFORMATION DOMAIN_PASSWORD_INFORMATION;
typedef struct _DRIVE_LAYOUT_INFORMATION_EX DRIVE_LAYOUT_INFORMATION_EX;
typedef struct _ENCRYPTION_CERTIFICATE_HASH ENCRYPTION_CERTIFICATE_HASH;
typedef struct _ENCRYPTION_CERTIFICATE_LIST ENCRYPTION_CERTIFICATE_LIST;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER FILE_ALLOCATED_RANGE_BUFFER;
typedef struct _GET_CURRENT_PROCESS_ADDRESS GET_CURRENT_PROCESS_ADDRESS;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER IMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U IMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER IMAGE_SEPARATE_DEBUG_HEADER;
struct IOleInPlaceObjectWindowless {struct IOleInPlaceObjectWindowlessVtbl *lpVtbl;};
struct IShellIconOverlayIdentifier {struct IShellIconOverlayIdentifierVtbl *lpVtbl;};
struct IWbemEventProviderQuerySink {struct IWbemEventProviderQuerySinkVtbl *lpVtbl;};
typedef struct tagI_RpcProxyCallbackInterface I_RpcProxyCallbackInterface;
typedef struct _KERB_CHANGEPASSWORD_REQUEST KERB_CHANGEPASSWORD_REQUEST;
typedef struct _KERB_REFRESH_SCCRED_REQUEST KERB_REFRESH_SCCRED_REQUEST;
typedef struct _KERB_SETPASSWORD_EX_REQUEST KERB_SETPASSWORD_EX_REQUEST;
typedef struct _6D40E8E2125A3BBCEB5B162FD51EF33B KSDS3D_LISTENER_ORIENTATION;
typedef struct _ECD9D23603D8BADEE24156B8BE3276B4 KSPROPERTY_CROSSBAR_ROUTE_S;
typedef struct _060F75F85D33090A279ABE5EFCC5AB4A KSPROPERTY_TUNER_STANDARD_S;
typedef struct _B03639772012518ABC96BF05B41D5C12 KSSTREAMALLOCATOR_STATUS_EX;
typedef struct tagKS_DATAFORMAT_VBIINFOHEADER KS_DATAFORMAT_VBIINFOHEADER;
typedef struct _KS_VIDEO_STREAM_CONFIG_CAPS KS_VIDEO_STREAM_CONFIG_CAPS;
typedef struct _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _D3DHAL_DP2INDEXEDLINELIST *LPD3DHAL_DP2INDEXEDLINELIST;
typedef struct _DDHAL_CREATESURFACEEXDATA *LPDDHAL_CREATESURFACEEXDATA;
typedef struct _DDHAL_GETVPORTCONNECTDATA *LPDDHAL_GETVPORTCONNECTDATA;
typedef struct IDirectDrawVideoPortNotify *LPDIRECTDRAWVIDEOPORTNOTIFY;
typedef struct IDirectSoundCaptureBuffer8 *LPDIRECTSOUNDCAPTUREBUFFER8;
typedef struct IDirectSoundFXI3DL2Reverb *LPDIRECTSOUNDFXI3DL2REVERB8;
typedef struct IDirectSoundFXWavesReverb *LPDIRECTSOUNDFXWAVESREVERB8;
typedef struct _EVENTLOG_FULL_INFORMATION *LPEVENTLOG_FULL_INFORMATION;
typedef struct _1DF2F441892C3D46584606B89F66007B *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct _4B26251D75C0D59F22113E7121B4AA5F *LPOPENCARD_SEARCH_CRITERIAW;
typedef struct _SHChangeUpdateImageIDList *LPSHChangeUpdateImageIDList;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;
typedef struct _LSA_ENUMERATION_INFORMATION LSA_ENUMERATION_INFORMATION;
enum MACRO_ACM_FILTERTAGDETAILSF {ACM_FILTERTAGDETAILSF_INDEX = 0x0,ACM_FILTERTAGDETAILSF_FILTERTAG = 0x1,ACM_FILTERTAGDETAILSF_LARGESTSIZE = 0x2,ACM_FILTERTAGDETAILSF_QUERYMASK = 0xF,};
enum MACRO_ACM_FORMATTAGDETAILSF {ACM_FORMATTAGDETAILSF_INDEX = 0x0,ACM_FORMATTAGDETAILSF_FORMATTAG = 0x1,ACM_FORMATTAGDETAILSF_LARGESTSIZE = 0x2,ACM_FORMATTAGDETAILSF_QUERYMASK = 0xF,};
enum MACRO_BPCCapBusMasteredData {BPCCapBusMasteredData = 0x1,BPCCapIndependentTuner = 0x2,BPCCapExternalDataBus = 0x4,BPCCapLowSpeedData = 0x10,BPCCapHighSpeedData = 0x20,};
enum MACRO_CERT_CHAIN_REVOCATION {CERT_CHAIN_REVOCATION_CHECK_END_CERT = 0x10000000,CERT_CHAIN_REVOCATION_CHECK_CHAIN = 0x20000000,CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0x40000000,CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 0x80000000,CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 0x8000000,CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 0x40,CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 0x80,CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 0x100,CERT_CHAIN_TIMESTAMP_TIME = 0x200,};
enum MACRO_CO_E_ACTIVATIONFAILED {CO_E_ACTIVATIONFAILED = 0x8004E021,CO_E_ACTIVATIONFAILED_EVENTLOGGED = 0x8004E022,CO_E_ACTIVATIONFAILED_CATALOGERROR = 0x8004E023,CO_E_ACTIVATIONFAILED_TIMEOUT = 0x8004E024,CO_E_INITIALIZATIONFAILED = 0x8004E025,};
enum MACRO_D3DCLEAR_COMPUTERECTS {D3DCLEAR_COMPUTERECTS = 0x8,};
enum MACRO_D3DFVF_TEXTUREFORMAT2 {D3DFVF_TEXTUREFORMAT2 = 0,D3DFVF_TEXTUREFORMAT1 = 3,D3DFVF_TEXTUREFORMAT3 = 1,D3DFVF_TEXTUREFORMAT4 = 2,};
enum MACRO_D3DPMISCCAPS_FOGINFVF {D3DPMISCCAPS_FOGINFVF = 0x2000,};
enum MACRO_D3DVTXPCAPS_VERTEXFOG {D3DVTXPCAPS_VERTEXFOG = 0x4,};
enum MACRO_DDSCAPS2_VERTEXBUFFER {DDSCAPS2_VERTEXBUFFER = 32,DDSCAPS2_COMMANDBUFFER = 64,DDSCAPS2_INDEXBUFFER = 67108864,};
enum MACRO_DDSCAPS_COMMANDBUFFER {DDSCAPS_COMMANDBUFFER = 1024,};
enum MACRO_DDSCAPS_EXECUTEBUFFER {DDSCAPS_EXECUTEBUFFER = 8388608,};
enum MACRO_IMC_SETCONVERSIONMODE {IMC_SETCONVERSIONMODE = 0x2,IMC_SETSENTENCEMODE = 0x4,IMC_SETOPENSTATUS = 0x6,IMC_GETSOFTKBDFONT = 0x11,IMC_SETSOFTKBDFONT = 0x12,IMC_GETSOFTKBDPOS = 0x13,IMC_SETSOFTKBDPOS = 0x14,IMC_GETSOFTKBDSUBTYPE = 0x15,IMC_SETSOFTKBDSUBTYPE = 0x16,IMC_SETSOFTKBDDATA = 0x18,};
enum MACRO_INITIALIZATION_FAILED {PHASE0_INITIALIZATION_FAILED = 0x31,PHASE1_INITIALIZATION_FAILED = 0x32,};
enum MACRO_LOCALE_NOUSEROVERRIDE {LOCALE_NOUSEROVERRIDE = 0x80000000,LOCALE_USE_CP_ACP = 0x40000000,LOCALE_RETURN_NUMBER = 0x20000000,LOCALE_ILANGUAGE = 0x1,LOCALE_SLANGUAGE = 0x2,LOCALE_SENGLANGUAGE = 0x1001,LOCALE_SABBREVLANGNAME = 0x3,LOCALE_SNATIVELANGNAME = 0x4,LOCALE_ICOUNTRY = 0x5,LOCALE_SCOUNTRY = 0x6,LOCALE_SENGCOUNTRY = 0x1002,LOCALE_SABBREVCTRYNAME = 0x7,LOCALE_SNATIVECTRYNAME = 0x8,LOCALE_IDEFAULTLANGUAGE = 0x9,LOCALE_IDEFAULTCOUNTRY = 0xA,LOCALE_IDEFAULTCODEPAGE = 0xB,LOCALE_IDEFAULTANSICODEPAGE = 0x1004,LOCALE_IDEFAULTMACCODEPAGE = 0x1011,LOCALE_SLIST = 0xC,LOCALE_IMEASURE = 0xD,LOCALE_SDECIMAL = 0xE,LOCALE_STHOUSAND = 0xF,LOCALE_SGROUPING = 0x10,LOCALE_IDIGITS = 0x11,LOCALE_ILZERO = 0x12,LOCALE_INEGNUMBER = 0x1010,LOCALE_SNATIVEDIGITS = 0x13,LOCALE_SCURRENCY = 0x14,LOCALE_SINTLSYMBOL = 0x15,LOCALE_SMONDECIMALSEP = 0x16,LOCALE_SMONTHOUSANDSEP = 0x17,LOCALE_SMONGROUPING = 0x18,LOCALE_ICURRDIGITS = 0x19,LOCALE_IINTLCURRDIGITS = 0x1A,LOCALE_ICURRENCY = 0x1B,LOCALE_INEGCURR = 0x1C,LOCALE_SDATE = 0x1D,LOCALE_STIME = 0x1E,LOCALE_SSHORTDATE = 0x1F,LOCALE_SLONGDATE = 0x20,LOCALE_STIMEFORMAT = 0x1003,LOCALE_IDATE = 0x21,LOCALE_ILDATE = 0x22,LOCALE_ITIME = 0x23,LOCALE_ITIMEMARKPOSN = 0x1005,LOCALE_ICENTURY = 0x24,LOCALE_ITLZERO = 0x25,LOCALE_IDAYLZERO = 0x26,LOCALE_IMONLZERO = 0x27,LOCALE_S1159 = 0x28,LOCALE_S2359 = 0x29,LOCALE_ICALENDARTYPE = 0x1009,LOCALE_IOPTIONALCALENDAR = 0x100B,LOCALE_IFIRSTDAYOFWEEK = 0x100C,LOCALE_IFIRSTWEEKOFYEAR = 0x100D,LOCALE_SDAYNAME1 = 0x2A,LOCALE_SDAYNAME2 = 0x2B,LOCALE_SDAYNAME3 = 0x2C,LOCALE_SDAYNAME4 = 0x2D,LOCALE_SDAYNAME5 = 0x2E,LOCALE_SDAYNAME6 = 0x2F,LOCALE_SDAYNAME7 = 0x30,LOCALE_SABBREVDAYNAME1 = 0x31,LOCALE_SABBREVDAYNAME2 = 0x32,LOCALE_SABBREVDAYNAME3 = 0x33,LOCALE_SABBREVDAYNAME4 = 0x34,LOCALE_SABBREVDAYNAME5 = 0x35,LOCALE_SABBREVDAYNAME6 = 0x36,LOCALE_SABBREVDAYNAME7 = 0x37,LOCALE_SMONTHNAME1 = 0x38,LOCALE_SMONTHNAME2 = 0x39,LOCALE_SMONTHNAME3 = 0x3A,LOCALE_SMONTHNAME4 = 0x3B,LOCALE_SMONTHNAME5 = 0x3C,LOCALE_SMONTHNAME6 = 0x3D,LOCALE_SMONTHNAME7 = 0x3E,LOCALE_SMONTHNAME8 = 0x3F,LOCALE_SMONTHNAME9 = 0x40,LOCALE_SMONTHNAME10 = 0x41,LOCALE_SMONTHNAME11 = 0x42,LOCALE_SMONTHNAME12 = 0x43,LOCALE_SMONTHNAME13 = 0x100E,LOCALE_SABBREVMONTHNAME1 = 0x44,LOCALE_SABBREVMONTHNAME2 = 0x45,LOCALE_SABBREVMONTHNAME3 = 0x46,LOCALE_SABBREVMONTHNAME4 = 0x47,LOCALE_SABBREVMONTHNAME5 = 0x48,LOCALE_SABBREVMONTHNAME6 = 0x49,LOCALE_SABBREVMONTHNAME7 = 0x4A,LOCALE_SABBREVMONTHNAME8 = 0x4B,LOCALE_SABBREVMONTHNAME9 = 0x4C,LOCALE_SABBREVMONTHNAME10 = 0x4D,LOCALE_SABBREVMONTHNAME11 = 0x4E,LOCALE_SABBREVMONTHNAME12 = 0x4F,LOCALE_SABBREVMONTHNAME13 = 0x100F,LOCALE_SPOSITIVESIGN = 0x50,LOCALE_SNEGATIVESIGN = 0x51,LOCALE_IPOSSIGNPOSN = 0x52,LOCALE_INEGSIGNPOSN = 0x53,LOCALE_IPOSSYMPRECEDES = 0x54,LOCALE_IPOSSEPBYSPACE = 0x55,LOCALE_INEGSYMPRECEDES = 0x56,LOCALE_INEGSEPBYSPACE = 0x57,LOCALE_FONTSIGNATURE = 0x58,LOCALE_SISO639LANGNAME = 0x59,LOCALE_SISO3166CTRYNAME = 0x5A,LOCALE_IDEFAULTEBCDICCODEPAGE = 0x1012,LOCALE_IPAPERSIZE = 0x100A,LOCALE_SENGCURRNAME = 0x1007,LOCALE_SNATIVECURRNAME = 0x1008,LOCALE_SYEARMONTH = 0x1006,LOCALE_SSORTNAME = 0x1013,LOCALE_IDIGITSUBSTITUTION = 0x1014,};
enum MACRO_MAXLOGICALLOGNAMESIZE {MAXLOGICALLOGNAMESIZE = 256,};
enum MACRO_MCM_SETFIRSTDAYOFWEEK {MCM_SETFIRSTDAYOFWEEK = 4111,MCM_GETFIRSTDAYOFWEEK = 4112,MCM_GETRANGE = 4113,MCM_SETRANGE = 4114,MCM_GETMONTHDELTA = 4115,MCM_SETMONTHDELTA = 4116,MCM_GETMAXTODAYWIDTH = 4117,MCM_SETUNICODEFORMAT = 8197,MCM_GETUNICODEFORMAT = 8198,};
enum MACRO_NORMAL_PRIORITY_CLASS {BELOW_NORMAL_PRIORITY_CLASS = 0x4000,ABOVE_NORMAL_PRIORITY_CLASS = 0x8000,};
enum MACRO_PRINTER_NOTIFY_STATUS {PRINTER_NOTIFY_STATUS_ENDPOINT = 1,PRINTER_NOTIFY_STATUS_POLL = 2,PRINTER_NOTIFY_STATUS_INFO = 4,};
enum MACRO_SYSTEM_AUDIT_CALLBACK {SYSTEM_AUDIT_CALLBACK_ACE_TYPE = 0xD,SYSTEM_ALARM_CALLBACK_ACE_TYPE = 0xE,SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = 0xF,SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = 0x10,};
enum MACRO_UNKNOWN_LOGON_SESSION {DEREF_UNKNOWN_LOGON_SESSION = 0x46,REF_UNKNOWN_LOGON_SESSION = 0x47,};
enum MACRO_URLPOLICY_CREDENTIALS {URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0x0,URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 0x10000,URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 0x20000,URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 0x30000,};
enum MACRO_ckidSTREAMHANDLERDATA {ckidSTREAMHANDLERDATA = 1685222515,};
enum MACRO_fdexNameCaseSensitive {fdexNameCaseSensitive = 0x1,fdexNameEnsure = 0x2,fdexNameImplicit = 0x4,fdexNameCaseInsensitive = 0x8,fdexNameInternal = 0x10,fdexNameNoDynamicProperties = 0x20,};
typedef struct tMIXERCONTROLDETAILS_BOOLEAN MIXERCONTROLDETAILS_BOOLEAN;
typedef struct _MSV1_0_PASSTHROUGH_RESPONSE MSV1_0_PASSTHROUGH_RESPONSE;
struct NDR_ALLOC_ALL_NODES_CONTEXT;
typedef struct _OFFLOAD_IPSEC_ADD_UDPESP_SA OFFLOAD_IPSEC_ADD_UDPESP_SA;
typedef struct _A97809CBA93BE73DFF75CDF56246D798 OFFSETINSTANCEDATAANDLENGTH;
typedef struct _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE;
typedef struct _ADMINISTRATOR_POWER_POLICY *PADMINISTRATOR_POWER_POLICY;
typedef struct _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS *PCERT_AUTHORITY_INFO_ACCESS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_NAME_CONSTRAINTS_INFO *PCERT_NAME_CONSTRAINTS_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO;
typedef struct _CLASS_MEDIA_CHANGE_CONTEXT *PCLASS_MEDIA_CHANGE_CONTEXT;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO *PCMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_REGDEFUSAGE *PCRYPT_PROVIDER_REGDEFUSAGE;
typedef struct _DDGETCURRENTAUTOFLIPININFO *PDDGETCURRENTAUTOFLIPININFO;
typedef struct _DD_GETVPORTINPUTFORMATDATA *PDD_GETVPORTINPUTFORMATDATA;
typedef struct _DD_MISCELLANEOUS2CALLBACKS *PDD_MISCELLANEOUS2CALLBACKS;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct _FILE_ZERO_DATA_INFORMATION *PFILE_ZERO_DATA_INFORMATION;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER *PFSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct _GET_CURRENT_THREAD_ADDRESS *PGET_CURRENT_THREAD_ADDRESS;
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
typedef struct _IP_ADAPTER_ANYCAST_ADDRESS *PIP_ADAPTER_ANYCAST_ADDRESS;
typedef struct _IP_ADAPTER_UNICAST_ADDRESS *PIP_ADAPTER_UNICAST_ADDRESS;
typedef struct _KERB_RETRIEVE_TKT_RESPONSE *PKERB_RETRIEVE_TKT_RESPONSE;
typedef union _87B5C366CEDD06D1A6AC557671C7F981 *PKSPROPERTY_BOUNDS_LONGLONG;
typedef struct _9A6BD7645A973A5ADF34F154404EC940 *PKSPROPERTY_CAMERACONTROL_S;
typedef struct _6F08919EF02DAA05323F80511ECED656 *PKSPROPERTY_CROSSBAR_CAPS_S;
typedef struct _E79116A6AA0CFF653592F57D81FA8A4C *PKSWAVE_OUTPUT_CAPABILITIES;
typedef struct tagKS_DATARANGE_BDA_TRANSPORT *PKS_DATARANGE_BDA_TRANSPORT;
typedef struct tagKS_DATARANGE_VIDEO_PALETTE *PKS_DATARANGE_VIDEO_PALETTE;
typedef struct _LSA_REFERENCED_DOMAIN_LIST *PLSA_REFERENCED_DOMAIN_LIST;
typedef struct _MEMORY_BASIC_INFORMATION32 *PMEMORY_BASIC_INFORMATION32;
typedef struct _MEMORY_BASIC_INFORMATION64 *PMEMORY_BASIC_INFORMATION64;
typedef struct _MIB_IPMCAST_BOUNDARY_TABLE *PMIB_IPMCAST_BOUNDARY_TABLE;
typedef struct tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;
typedef struct _MSV1_0_INTERACTIVE_PROFILE *PMSV1_0_INTERACTIVE_PROFILE;
typedef struct _MSV1_0_PASSTHROUGH_REQUEST *PMSV1_0_PASSTHROUGH_REQUEST;
typedef struct NDIS_BPC_CONNECTION_ENABLE *PNDIS_BPC_CONNECTION_ENABLE;
typedef struct NDIS_BPC_CONNECTION_STATUS *PNDIS_BPC_CONNECTION_STATUS;
typedef struct _NEGOTIATE_PACKAGE_PREFIXES *PNEGOTIATE_PACKAGE_PREFIXES;
typedef struct _POLICY_LSA_SERVER_ROLE_INFO POLICY_LSA_SERVER_ROLE_INFO;
typedef struct _POLICY_ACCOUNT_DOMAIN_INFO *PPOLICY_ACCOUNT_DOMAIN_INFO;
typedef struct _POLICY_AUDIT_FULL_SET_INFO *PPOLICY_AUDIT_FULL_SET_INFO;
typedef struct _POLICY_PRIMARY_DOMAIN_INFO *PPOLICY_PRIMARY_DOMAIN_INFO;
typedef struct _POLICY_REPLICA_SOURCE_INFO *PPOLICY_REPLICA_SOURCE_INFO;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA *PREQUEST_RAW_ENCRYPTED_DATA;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE PRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _PROCESSOR_POWER_POLICY_INFO PROCESSOR_POWER_POLICY_INFO;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _SP_TROUBLESHOOTER_PARAMS_A *PSP_TROUBLESHOOTER_PARAMS_A;
typedef struct _SP_TROUBLESHOOTER_PARAMS_W *PSP_TROUBLESHOOTER_PARAMS_W;
typedef struct _TOKEN_AUDIT_POLICY_ELEMENT *PTOKEN_AUDIT_POLICY_ELEMENT;
typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR RTL_VERIFIER_DLL_DESCRIPTOR;
typedef struct _SECURITY_LOGON_SESSION_DATA SECURITY_LOGON_SESSION_DATA;
typedef struct _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;
typedef struct tagSOLE_AUTHENTICATION_SERVICE SOLE_AUTHENTICATION_SERVICE;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V1_A SP_BACKUP_QUEUE_PARAMS_V1_A;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V1_W SP_BACKUP_QUEUE_PARAMS_V1_W;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V2_A SP_BACKUP_QUEUE_PARAMS_V2_A;
typedef struct _SP_BACKUP_QUEUE_PARAMS_V2_W SP_BACKUP_QUEUE_PARAMS_V2_W;
typedef struct _SP_REGISTER_CONTROL_STATUSA SP_REGISTER_CONTROL_STATUSA;
typedef struct _SP_REGISTER_CONTROL_STATUSW SP_REGISTER_CONTROL_STATUSW;
enum ShellSpecialFolderConstants {ssfDESKTOP = 0x0,ssfPROGRAMS = 0x2,ssfCONTROLS = 0x3,ssfPRINTERS = 0x4,ssfPERSONAL = 0x5,ssfFAVORITES = 0x6,ssfSTARTUP = 0x7,ssfRECENT = 0x8,ssfSENDTO = 0x9,ssfBITBUCKET = 0xA,ssfSTARTMENU = 0xB,ssfDESKTOPDIRECTORY = 0x10,ssfDRIVES = 0x11,ssfNETWORK = 0x12,ssfNETHOOD = 0x13,ssfFONTS = 0x14,ssfTEMPLATES = 0x15,ssfCOMMONSTARTMENU = 0x16,ssfCOMMONPROGRAMS = 0x17,ssfCOMMONSTARTUP = 0x18,ssfCOMMONDESKTOPDIR = 0x19,ssfAPPDATA = 0x1A,ssfPRINTHOOD = 0x1B,ssfLOCALAPPDATA = 0x1C,ssfALTSTARTUP = 0x1D,ssfCOMMONALTSTARTUP = 0x1E,ssfCOMMONFAVORITES = 0x1F,ssfINTERNETCACHE = 0x20,ssfCOOKIES = 0x21,ssfHISTORY = 0x22,ssfCOMMONAPPDATA = 0x23,ssfWINDOWS = 0x24,ssfSYSTEM = 0x25,ssfPROGRAMFILES = 0x26,ssfMYPICTURES = 0x27,ssfPROFILE = 0x28,ssfSYSTEMx86 = 0x29,ssfPROGRAMFILESx86 = 0x30,};
typedef struct _TOKEN_GROUPS_AND_PRIVILEGES TOKEN_GROUPS_AND_PRIVILEGES;
typedef unsigned int ( *USER_MARSHAL_SIZING_ROUTINE)(unsigned int *, unsigned int, void *);
typedef struct _VBICODECFILTERING_SCANLINES VBICODECFILTERING_SCANLINES;
typedef struct _WINDBG_OLDKD_EXTENSION_APIS WINDBG_OLDKD_EXTENSION_APIS;
enum WbemAuthenticationLevelEnum {wbemAuthenticationLevelDefault = 0x0,wbemAuthenticationLevelNone = 0x1,wbemAuthenticationLevelConnect = 0x2,wbemAuthenticationLevelCall = 0x3,wbemAuthenticationLevelPkt = 0x4,wbemAuthenticationLevelPktIntegrity = 0x5,wbemAuthenticationLevelPktPrivacy = 0x6,};
enum _KERB_PROTOCOL_MESSAGE_TYPE {KerbDebugRequestMessage = 0x0,KerbQueryTicketCacheMessage = 0x1,KerbChangeMachinePasswordMessage = 0x2,KerbVerifyPacMessage = 0x3,KerbRetrieveTicketMessage = 0x4,KerbUpdateAddressesMessage = 0x5,KerbPurgeTicketCacheMessage = 0x6,KerbChangePasswordMessage = 0x7,KerbRetrieveEncodedTicketMessage = 0x8,KerbDecryptDataMessage = 0x9,KerbAddBindingCacheEntryMessage = 0xA,KerbSetPasswordMessage = 0xB,KerbSetPasswordExMessage = 0xC,KerbVerifyCredentialsMessage = 0xD,KerbQueryTicketCacheExMessage = 0xE,KerbPurgeTicketCacheExMessage = 0xF,KerbRefreshSmartcardCredentialsMessage = 0x10,KerbAddExtraCredentialsMessage = 0x11,KerbQuerySupplementalCredentialsMessage = 0x12,};
enum _MSV1_0_PROFILE_BUFFER_TYPE {MsV1_0InteractiveProfile = 0x2,MsV1_0Lm20LogonProfile = 0x3,MsV1_0SmartCardProfile = 0x4,};
enum _NDIS_802_11_PRIVACY_FILTER {Ndis802_11PrivFilterAcceptAll = 0x0,Ndis802_11PrivFilter8021xWEP = 0x1,};
enum __MIDL_IActionProgress_0001 {SPBEGINF_NORMAL = 0x0,SPBEGINF_AUTOTIME = 0x2,SPBEGINF_NOPROGRESSBAR = 0x10,SPBEGINF_MARQUEEPROGRESS = 0x20,};
enum _tagAUTOCOMPLETELISTOPTIONS {ACLO_NONE = 0x0,ACLO_CURRENTDIR = 0x1,ACLO_MYCOMPUTER = 0x2,ACLO_DESKTOP = 0x4,ACLO_FAVORITES = 0x8,ACLO_FILESYSONLY = 0x10,ACLO_FILESYSDIRS = 0x20,};
enum tag_WBEM_EXTRA_RETURN_CODES {WBEM_S_INITIALIZED = 0x0,WBEM_S_LIMITED_SERVICE = 0x43001,WBEM_S_INDIRECTLY_UPDATED = 0x43002,WBEM_S_SUBJECT_TO_SDS = 0x43003,WBEM_E_RETRY_LATER = 0x80043001,WBEM_E_RESOURCE_CONTENTION = 0x80043002,};
enum tag_WBEM_UNSECAPP_FLAG_TYPE {WBEM_FLAG_UNSECAPP_DEFAULT_CHECK_ACCESS = 0x0,WBEM_FLAG_UNSECAPP_CHECK_ACCESS = 0x1,WBEM_FLAG_UNSECAPP_DONT_CHECK_ACCESS = 0x2,};
typedef struct _ACCESS_DENIED_CALLBACK_ACE ACCESS_DENIED_CALLBACK_ACE;
typedef struct _ADMINISTRATOR_POWER_POLICY ADMINISTRATOR_POWER_POLICY;
typedef struct _BY_HANDLE_FILE_INFORMATION BY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS CERT_AUTHORITY_INFO_ACCESS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO CERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_NAME_CONSTRAINTS_INFO CERT_NAME_CONSTRAINTS_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO CERT_POLICY_QUALIFIER_INFO;
typedef struct _CLASS_MEDIA_CHANGE_CONTEXT CLASS_MEDIA_CHANGE_CONTEXT;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO CMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO CMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER CRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE CRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA CRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA CRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_REGDEFUSAGE CRYPT_PROVIDER_REGDEFUSAGE;
typedef struct _D3DHAL_DP2INDEXEDLINESTRIP D3DHAL_DP2INDEXEDLINESTRIP;
typedef struct _D3DHAL_DRAWPRIMITIVES2DATA D3DHAL_DRAWPRIMITIVES2DATA;
typedef struct _D3DHAL_RENDERPRIMITIVEDATA D3DHAL_RENDERPRIMITIVEDATA;
typedef struct _D3DHAL_SETRENDERTARGETDATA D3DHAL_SETRENDERTARGETDATA;
typedef struct _D3DNTHAL_CONTEXTCREATEDATA D3DNTHAL_CONTEXTCREATEDATA;
typedef struct _D3DNTHAL_DP2DRAWPRIMITIVE2 D3DNTHAL_DP2DRAWPRIMITIVE2;
typedef struct _D3DNTHAL_TEXTURECREATEDATA D3DNTHAL_TEXTURECREATEDATA;
typedef struct _DDGETCURRENTAUTOFLIPININFO DDGETCURRENTAUTOFLIPININFO;
typedef struct _DDGETTRANSFERSTATUSOUTINFO DDGETTRANSFERSTATUSOUTINFO;
typedef struct _DDHAL_BEGINMOCOMPFRAMEDATA DDHAL_BEGINMOCOMPFRAMEDATA;
typedef struct _DDHAL_CANCREATESURFACEDATA DDHAL_CANCREATESURFACEDATA;
typedef struct _DDHAL_DDVIDEOPORTCALLBACKS DDHAL_DDVIDEOPORTCALLBACKS;
typedef struct _DDHAL_FLIPTOGDISURFACEDATA DDHAL_FLIPTOGDISURFACEDATA;
typedef struct _DDHAL_GETHEAPALIGNMENTDATA DDHAL_GETHEAPALIGNMENTDATA;
typedef struct _DDHAL_GETMOCOMPFORMATSDATA DDHAL_GETMOCOMPFORMATSDATA;
typedef struct _DDHAL_SETEXCLUSIVEMODEDATA DDHAL_SETEXCLUSIVEMODEDATA;
typedef struct _DDHAL_WAITFORVPORTSYNCDATA DDHAL_WAITFORVPORTSYNCDATA;
typedef struct _DD_DEFERRED_AGP_AWARE_DATA DD_DEFERRED_AGP_AWARE_DATA;
typedef struct _DD_GETVPORTINPUTFORMATDATA DD_GETVPORTINPUTFORMATDATA;
typedef struct _DD_MISCELLANEOUS2CALLBACKS DD_MISCELLANEOUS2CALLBACKS;
typedef struct creative_fastspeechformat_tag DIALOGICOKIADPCMWAVEFORMAT;
typedef struct IDirectDrawClipperVtbl DIRECTDRAWCLIPPERCALLBACKS;
typedef struct IDirectDrawPaletteVtbl DIRECTDRAWPALETTECALLBACKS;
typedef struct IDirectDrawSurfaceVtbl DIRECTDRAWSURFACECALLBACKS;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT EMRCREATEDIBPATTERNBRUSHPT;
typedef struct _FILE_ZERO_DATA_INFORMATION FILE_ZERO_DATA_INFORMATION;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER FSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct _GET_CURRENT_THREAD_ADDRESS GET_CURRENT_THREAD_ADDRESS;
struct IDirectDrawVideoPortNotify {struct IDirectDrawVideoPortNotifyVtbl *lpVtbl;};
struct IDirectSoundCaptureBuffer8 {struct IDirectSoundCaptureBuffer8Vtbl *lpVtbl;};
typedef struct _IP_ADAPTER_ANYCAST_ADDRESS IP_ADAPTER_ANYCAST_ADDRESS;
typedef struct _IP_ADAPTER_UNICAST_ADDRESS IP_ADAPTER_UNICAST_ADDRESS;
struct IWbemEventConsumerProvider {struct IWbemEventConsumerProviderVtbl *lpVtbl;};
struct IWbemEventProviderSecurity {struct IWbemEventProviderSecurityVtbl *lpVtbl;};
typedef struct _KERB_RETRIEVE_TKT_RESPONSE KERB_RETRIEVE_TKT_RESPONSE;
typedef union _87B5C366CEDD06D1A6AC557671C7F981 KSPROPERTY_BOUNDS_LONGLONG;
typedef struct _9A6BD7645A973A5ADF34F154404EC940 KSPROPERTY_CAMERACONTROL_S;
typedef struct _6F08919EF02DAA05323F80511ECED656 KSPROPERTY_CROSSBAR_CAPS_S;
typedef struct _E79116A6AA0CFF653592F57D81FA8A4C KSWAVE_OUTPUT_CAPABILITIES;
typedef struct tagKS_DATARANGE_BDA_TRANSPORT KS_DATARANGE_BDA_TRANSPORT;
typedef struct tagKS_DATARANGE_VIDEO_PALETTE KS_DATARANGE_VIDEO_PALETTE;
typedef IConnectionPointContainer *LPCONNECTIONPOINTCONTAINER;
typedef struct _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;
typedef struct _DDHAL_CANCREATEVPORTDATA *LPDDHAL_CANCREATEVPORTDATA;
typedef struct _DDHAL_DESTROYDDLOCALDATA *LPDDHAL_DESTROYDDLOCALDATA;
typedef struct _DDHAL_DESTROYPALETTEDATA *LPDDHAL_DESTROYPALETTEDATA;
typedef struct _DDHAL_DESTROYSURFACEDATA *LPDDHAL_DESTROYSURFACEDATA;
typedef struct _DDHAL_DRVSETCOLORKEYDATA *LPDDHAL_DRVSETCOLORKEYDATA;
typedef struct _DDHAL_ENDMOCOMPFRAMEDATA *LPDDHAL_ENDMOCOMPFRAMEDATA;
typedef struct _DDHAL_GETDRIVERSTATEDATA *LPDDHAL_GETDRIVERSTATEDATA;
typedef struct _DDHAL_GETMOCOMPGUIDSDATA *LPDDHAL_GETMOCOMPGUIDSDATA;
typedef struct _DDHAL_GETVPORTSIGNALDATA *LPDDHAL_GETVPORTSIGNALDATA;
typedef struct _DDRAWI_DDRAWSURFACE_MORE *LPDDRAWI_DDRAWSURFACE_MORE;
typedef struct IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;
typedef struct IDirectSoundCaptureFXAec *LPDIRECTSOUNDCAPTUREFXAEC8;
typedef struct IDirectSoundFXCompressor *LPDIRECTSOUNDFXCOMPRESSOR8;
typedef struct IDirectSoundFXDistortion *LPDIRECTSOUNDFXDISTORTION8;
typedef struct IDirectSoundFXI3DL2Reverb *LPDIRECTSOUNDFXI3DL2REVERB;
typedef struct IDirectSoundFXWavesReverb *LPDIRECTSOUNDFXWAVESREVERB;
typedef IOleInPlaceSiteWindowless *LPOLEINPLACESITEWINDOWLESS;
typedef struct _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _PRINTER_NOTIFY_INFO_DATA *LPPRINTER_NOTIFY_INFO_DATA;
typedef IProvideMultipleClassInfo *LPPROVIDEMULTIPLECLASSINFO;
typedef struct _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW;
typedef struct _WINDOWS_IRDA_DEVICE_INFO *LPWINDOWS_IRDA_DEVICE_INFO;
typedef struct _LSA_REFERENCED_DOMAIN_LIST LSA_REFERENCED_DOMAIN_LIST;
enum MACRO_APPLICATION_VERIFIER {APPLICATION_VERIFIER_INTERNAL_ERROR = 0x80000000,APPLICATION_VERIFIER_INTERNAL_WARNING = 0x40000000,APPLICATION_VERIFIER_NO_BREAK = 0x20000000,APPLICATION_VERIFIER_CONTINUABLE_BREAK = 0x10000000,APPLICATION_VERIFIER_UNKNOWN_ERROR = 0x1,APPLICATION_VERIFIER_ACCESS_VIOLATION = 0x2,APPLICATION_VERIFIER_UNSYNCHRONIZED_ACCESS = 0x3,APPLICATION_VERIFIER_EXTREME_SIZE_REQUEST = 0x4,APPLICATION_VERIFIER_BAD_HEAP_HANDLE = 0x5,APPLICATION_VERIFIER_SWITCHED_HEAP_HANDLE = 0x6,APPLICATION_VERIFIER_DOUBLE_FREE = 0x7,APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK = 0x8,APPLICATION_VERIFIER_DESTROY_PROCESS_HEAP = 0x9,APPLICATION_VERIFIER_UNEXPECTED_EXCEPTION = 0xA,APPLICATION_VERIFIER_STACK_OVERFLOW = 0xB,APPLICATION_VERIFIER_TERMINATE_THREAD_CALL = 0x100,APPLICATION_VERIFIER_INVALID_EXIT_PROCESS_CALL = 0x101,APPLICATION_VERIFIER_EXIT_THREAD_OWNS_LOCK = 0x200,APPLICATION_VERIFIER_LOCK_IN_UNLOADED_DLL = 0x201,APPLICATION_VERIFIER_LOCK_IN_FREED_HEAP = 0x202,APPLICATION_VERIFIER_LOCK_DOUBLE_INITIALIZE = 0x203,APPLICATION_VERIFIER_LOCK_IN_FREED_MEMORY = 0x204,APPLICATION_VERIFIER_LOCK_CORRUPTED = 0x205,APPLICATION_VERIFIER_LOCK_INVALID_OWNER = 0x206,APPLICATION_VERIFIER_LOCK_INVALID_RECURSION_COUNT = 0x207,APPLICATION_VERIFIER_LOCK_INVALID_LOCK_COUNT = 0x208,APPLICATION_VERIFIER_LOCK_OVER_RELEASED = 0x209,APPLICATION_VERIFIER_LOCK_NOT_INITIALIZED = 0x210,APPLICATION_VERIFIER_LOCK_ALREADY_INITIALIZED = 0x211,APPLICATION_VERIFIER_INVALID_HANDLE = 0x300,APPLICATION_VERIFIER_INVALID_TLS_VALUE = 0x301,APPLICATION_VERIFIER_INCORRECT_WAIT_CALL = 0x302,APPLICATION_VERIFIER_NULL_HANDLE = 0x303,APPLICATION_VERIFIER_WAIT_IN_DLLMAIN = 0x304,APPLICATION_VERIFIER_COM_ERROR = 0x400,APPLICATION_VERIFIER_COM_API_IN_DLLMAIN = 0x401,APPLICATION_VERIFIER_COM_UNHANDLED_EXCEPTION = 0x402,APPLICATION_VERIFIER_COM_UNBALANCED_COINIT = 0x403,APPLICATION_VERIFIER_COM_UNBALANCED_OLEINIT = 0x404,APPLICATION_VERIFIER_COM_UNBALANCED_SWC = 0x405,APPLICATION_VERIFIER_COM_NULL_DACL = 0x406,APPLICATION_VERIFIER_COM_UNSAFE_IMPERSONATION = 0x407,APPLICATION_VERIFIER_COM_SMUGGLED_WRAPPER = 0x408,APPLICATION_VERIFIER_COM_SMUGGLED_PROXY = 0x409,APPLICATION_VERIFIER_COM_CF_SUCCESS_WITH_NULL = 0x40A,APPLICATION_VERIFIER_COM_GCO_SUCCESS_WITH_NULL = 0x40B,APPLICATION_VERIFIER_COM_OBJECT_IN_FREED_MEMORY = 0x40C,APPLICATION_VERIFIER_COM_OBJECT_IN_UNLOADED_DLL = 0x40D,APPLICATION_VERIFIER_COM_VTBL_IN_FREED_MEMORY = 0x40E,APPLICATION_VERIFIER_COM_VTBL_IN_UNLOADED_DLL = 0x40F,APPLICATION_VERIFIER_COM_HOLDING_LOCKS_ON_CALL = 0x410,APPLICATION_VERIFIER_RPC_ERROR = 0x500,APPLICATION_VERIFIER_INVALID_FREEMEM = 0x600,APPLICATION_VERIFIER_INVALID_ALLOCMEM = 0x601,APPLICATION_VERIFIER_INVALID_MAPVIEW = 0x602,APPLICATION_VERIFIER_PROBE_INVALID_ADDRESS = 0x603,APPLICATION_VERIFIER_PROBE_FREE_MEM = 0x604,APPLICATION_VERIFIER_PROBE_GUARD_PAGE = 0x605,APPLICATION_VERIFIER_PROBE_NULL = 0x606,APPLICATION_VERIFIER_PROBE_INVALID_START_OR_SIZE = 0x607,};
enum MACRO_BIF_RETURNONLYFSDIRS {BIF_RETURNONLYFSDIRS = 0x1,BIF_DONTGOBELOWDOMAIN = 0x2,BIF_STATUSTEXT = 0x4,BIF_RETURNFSANCESTORS = 0x8,BIF_EDITBOX = 0x10,BIF_VALIDATE = 0x20,BIF_NEWDIALOGSTYLE = 0x40,BIF_USENEWUI = 0x50,BIF_BROWSEINCLUDEURLS = 0x80,BIF_UAHINT = 0x100,BIF_NONEWFOLDERBUTTON = 0x200,BIF_NOTRANSLATETARGETS = 0x400,BIF_BROWSEFORCOMPUTER = 0x1000,BIF_BROWSEFORPRINTER = 0x2000,BIF_BROWSEINCLUDEFILES = 0x4000,BIF_SHAREABLE = 0x8000,};
enum MACRO_D3DHAL_STATESETBEGIN {D3DHAL_STATESETBEGIN = 0,D3DHAL_STATESETEND = 1,D3DHAL_STATESETDELETE = 2,D3DHAL_STATESETEXECUTE = 3,D3DHAL_STATESETCAPTURE = 4,D3DHAL_STATESETCREATE = 5,D3DHAL_SETLIGHT_ENABLE = 0,D3DHAL_SETLIGHT_DISABLE = 1,D3DHAL_SETLIGHT_DATA = 2,};
enum MACRO_D3DMAXUSERCLIPPLANES {D3DMAXUSERCLIPPLANES = 32,};
enum MACRO_DDCREATEDRIVEROBJECT {DDCREATEDRIVEROBJECT = 10,};
enum MACRO_DDGET32BITDRIVERNAME {DDGET32BITDRIVERNAME = 11,};
enum MACRO_DDHAL_ALIGNVALIDCAPS {DDHAL_ALIGNVALIDCAPS = 8523986,};
enum MACRO_DFS_REFERRAL_SUCCESS {DFS_REFERRAL_SUCCESS = 0x40003844,DFS_MAX_DNR_ATTEMPTS = 0x40003845,DFS_SPECIAL_REFERRAL_FAILURE = 0x40003846,DFS_OPEN_FAILURE = 0x40003847,};
enum MACRO_ENABLERELATIVEWIDTHS {ENABLERELATIVEWIDTHS = 768,};
enum MACRO_FACILITY_DIRECTMUSIC {FACILITY_DIRECTMUSIC = 0x878,};
enum MACRO_IMN_SOFTKBDDESTROYED {IMN_SOFTKBDDESTROYED = 0x11,};
enum MACRO_MANIFEST_RESOURCE_ID {CREATEPROCESS_MANIFEST_RESOURCE_ID = 1,ISOLATIONAWARE_MANIFEST_RESOURCE_ID = 2,ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID = 3,MINIMUM_RESERVED_MANIFEST_RESOURCE_ID = 1,MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID = 16,};
enum MACRO_PAGESETUPDLGORDMOTIF {PAGESETUPDLGORDMOTIF = 1550,};
enum MACRO_SBN_SIMPLEMODECHANGE {SBN_SIMPLEMODECHANGE = -880,};
enum MACRO_SECURITY_INFORMATION {OWNER_SECURITY_INFORMATION = 0x1,GROUP_SECURITY_INFORMATION = 0x2,DACL_SECURITY_INFORMATION = 0x4,SACL_SECURITY_INFORMATION = 0x8,PROTECTED_DACL_SECURITY_INFORMATION = 0x80000000,PROTECTED_SACL_SECURITY_INFORMATION = 0x40000000,UNPROTECTED_DACL_SECURITY_INFORMATION = 0x20000000,UNPROTECTED_SACL_SECURITY_INFORMATION = 0x10000000,};
enum MACRO_SYMMETRICWRAPKEYBLOB {SYMMETRICWRAPKEYBLOB = 0xB,};
enum MACRO_infotypeDIGITIZATION {infotypeDIGITIZATION_TIME = 1414087753,infotypeSMPTE_TIME = 1347244873,};
enum MACRO_listtypeSTREAMHEADER {listtypeSTREAMHEADER = 1819440243,};
typedef struct _MEMORY_BASIC_INFORMATION32 MEMORY_BASIC_INFORMATION32;
typedef struct _MEMORY_BASIC_INFORMATION64 MEMORY_BASIC_INFORMATION64;
typedef struct _MIB_IPMCAST_BOUNDARY_TABLE MIB_IPMCAST_BOUNDARY_TABLE;
typedef struct tMIXERCONTROLDETAILS_SIGNED MIXERCONTROLDETAILS_SIGNED;
typedef struct _MSV1_0_INTERACTIVE_PROFILE MSV1_0_INTERACTIVE_PROFILE;
typedef struct _MSV1_0_PASSTHROUGH_REQUEST MSV1_0_PASSTHROUGH_REQUEST;
typedef struct _NEGOTIATE_PACKAGE_PREFIXES NEGOTIATE_PACKAGE_PREFIXES;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct tagACTCTX_SECTION_KEYED_DATA *PACTCTX_SECTION_KEYED_DATA;
typedef struct _BDA_ETHERNET_ADDRESS_LIST *PBDA_ETHERNET_ADDRESS_LIST;
typedef struct _CERT_ISSUER_SERIAL_NUMBER *PCERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_POLICY_MAPPINGS_INFO *PCERT_POLICY_MAPPINGS_INFO;
typedef struct _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_STORE_PROV_FIND_INFO *PCERT_STORE_PROV_FIND_INFO;
typedef struct _CHANGER_ELEMENT_STATUS_EX *PCHANGER_ELEMENT_STATUS_EX;
typedef struct _CMSG_CONTENT_ENCRYPT_INFO *PCMSG_CONTENT_ENCRYPT_INFO;
typedef struct _CRYPTPROTECT_PROMPTSTRUCT *PCRYPTPROTECT_PROMPTSTRUCT;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS *PCRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PKCS8_IMPORT_PARAMS;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct _DBGKD_DEBUG_DATA_HEADER32 *PDBGKD_DEBUG_DATA_HEADER32;
typedef struct _DBGKD_DEBUG_DATA_HEADER64 *PDBGKD_DEBUG_DATA_HEADER64;
typedef struct _DD_ADDATTACHEDSURFACEDATA *PDD_ADDATTACHEDSURFACEDATA;
typedef struct _DD_GETVPORTFLIPSTATUSDATA *PDD_GETVPORTFLIPSTATUSDATA;
typedef struct _DD_MISCELLANEOUSCALLBACKS *PDD_MISCELLANEOUSCALLBACKS;
typedef struct _DD_SETOVERLAYPOSITIONDATA *PDD_SETOVERLAYPOSITIONDATA;
typedef struct _DD_UPDATENONLOCALHEAPDATA *PDD_UPDATENONLOCALHEAPDATA;
typedef struct tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW;
typedef struct _CA059CF4194B4A9D56D5FA32D4D81CE0 PERSIST_FOLDER_TARGET_INFO;
typedef struct _FULL_PTR_TO_REFID_ELEMENT *PFULL_PTR_TO_REFID_ELEMENT;
typedef struct _HIDP_LINK_COLLECTION_NODE *PHIDP_LINK_COLLECTION_NODE;
typedef struct _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _KERB_RETRIEVE_TKT_REQUEST *PKERB_RETRIEVE_TKT_REQUEST;
typedef struct _KERB_TICKET_CACHE_INFO_EX *PKERB_TICKET_CACHE_INFO_EX;
typedef struct _097132A3DAC724C77C2462A4DC4AA652 *PKSDATAFORMAT_WAVEFORMATEX;
typedef struct _8FE9905039884FA12A33AF170E497D82 *PKSDS3D_BUFFER_CONE_ANGLES;
typedef struct _61992E1E6DA7B91ECC7FA4A74B115A04 *PKSPROPERTY_MEDIAAVAILABLE;
typedef struct _E15D7B7CA61FF43DF93005DFD376A388 *PKSPROPERTY_TUNER_STATUS_S;
typedef struct _AAD79452FC68247846A5E3B058A03BB4 *PKSPROPERTY_TVAUDIO_CAPS_S;
typedef struct _764676431BC78EE50306C71955FB365D *PKSPROPERTY_VIDEODECODER_S;
typedef struct _9A6BD7645A973A5ADF34F154404EC940 *PKSPROPERTY_VIDEOENCODER_S;
typedef struct _9A6BD7645A973A5ADF34F154404EC940 *PKSPROPERTY_VIDEOPROCAMP_S;
typedef struct _816E3560EF21380C948191659F672DF0 *PKSWAVE_INPUT_CAPABILITIES;
typedef struct _KS_DVDCOPY_SET_COPY_STATE *PKS_DVDCOPY_SET_COPY_STATE;
typedef struct _98D21277AAAA3049664E864EBED0B60A *PKS_FRAMING_RANGE_WEIGHTED;
typedef struct _MSV1_0_LM20_LOGON_PROFILE *PMSV1_0_LM20_LOGON_PROFILE;
typedef struct _NDIS_802_11_CONFIGURATION *PNDIS_802_11_CONFIGURATION;
typedef struct NDIS_BPC_STATUS_CONNECTION *PNDIS_BPC_STATUS_CONNECTED;
typedef struct _7FAA4336E151361F9CD171DE989684F0 *PNTFS_EXTENDED_VOLUME_DATA;
typedef struct _POLICY_ACCOUNT_DOMAIN_INFO POLICY_ACCOUNT_DOMAIN_INFO;
typedef struct _POLICY_AUDIT_FULL_SET_INFO POLICY_AUDIT_FULL_SET_INFO;
typedef struct _POLICY_PRIMARY_DOMAIN_INFO POLICY_PRIMARY_DOMAIN_INFO;
typedef struct _POLICY_REPLICA_SOURCE_INFO POLICY_REPLICA_SOURCE_INFO;
typedef struct _1DF2F441892C3D46584606B89F66007B *POPENCARD_SEARCH_CRITERIAA;
typedef struct _4B26251D75C0D59F22113E7121B4AA5F *POPENCARD_SEARCH_CRITERIAW;
typedef struct _PARCLASS_NEGOTIATION_MASK *PPARCLASS_NEGOTIATION_MASK;
typedef struct _PARTITION_INFORMATION_GPT *PPARTITION_INFORMATION_GPT;
typedef struct _PARTITION_INFORMATION_MBR *PPARTITION_INFORMATION_MBR;
typedef struct _POLICY_DEFAULT_QUOTA_INFO *PPOLICY_DEFAULT_QUOTA_INFO;
typedef struct _READ_ELEMENT_ADDRESS_INFO *PREAD_ELEMENT_ADDRESS_INFO;
typedef struct RETRIEVAL_POINTERS_BUFFER *PRETRIEVAL_POINTERS_BUFFER;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SET_PARTITION_INFORMATION *PSET_PARTITION_INFORMATION;
typedef struct _SPC_INDIRECT_DATA_CONTENT *PSPC_INDIRECT_DATA_CONTENT;
typedef struct _060D6FD956D3EBF205D64C3CA4764571 *PSTARTING_LCN_INPUT_BUFFER;
typedef struct _80E50DFA284ED4BC838B08AAD8EA99BA *PSTARTING_VCN_INPUT_BUFFER;
typedef struct _STORAGE_BUS_RESET_REQUEST *PSTORAGE_BUS_RESET_REQUEST;
typedef struct _SYSTEM_ALARM_CALLBACK_ACE *PSYSTEM_ALARM_CALLBACK_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _75A13DFB4406EBA41013AD06E502A0EB *PSYSTEM_POWER_CAPABILITIES;
typedef struct _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;
typedef struct _TRUSTED_POSIX_OFFSET_INFO *PTRUSTED_POSIX_OFFSET_INFO;
typedef struct _WINDBG_OLD_EXTENSION_APIS *PWINDBG_OLD_EXTENSION_APIS;
typedef struct _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD;
typedef struct _QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUSW;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA REQUEST_RAW_ENCRYPTED_DATA;
typedef void ( *RPC_HTTP_PROXY_FREE_STRING)(unsigned short *ServerName);
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_CRITICAL_SECTION_DEBUG;
typedef struct _SHChangeProductKeyAsIDList SHChangeProductKeyAsIDList;
typedef struct _SP_TROUBLESHOOTER_PARAMS_A SP_TROUBLESHOOTER_PARAMS_A;
typedef struct _SP_TROUBLESHOOTER_PARAMS_W SP_TROUBLESHOOTER_PARAMS_W;
enum SearchCommandExecuteErrors {SCEE_PATHNOTFOUND = 0x1,SCEE_MAXFILESFOUND = 0x2,SCEE_INDEXSEARCH = 0x3,SCEE_CONSTRAINT = 0x4,SCEE_SCOPEMISMATCH = 0x5,SCEE_CASESENINDEX = 0x6,SCEE_INDEXNOTCOMPLETE = 0x7,};
typedef struct _TOKEN_AUDIT_POLICY_ELEMENT TOKEN_AUDIT_POLICY_ELEMENT;
enum WbemImpersonationLevelEnum {wbemImpersonationLevelAnonymous = 0x1,wbemImpersonationLevelIdentify = 0x2,wbemImpersonationLevelImpersonate = 0x3,wbemImpersonationLevelDelegate = 0x4,};
struct WbemUnauthenticatedLocator;
struct _FULL_PTR_TO_REFID_ELEMENT {struct _FULL_PTR_TO_REFID_ELEMENT *Next;void *Pointer;unsigned int RefId;unsigned char State;};
enum _NDIS_FDDI_ATTACHMENT_TYPE {NdisFddiTypeIsolated = 0x1,NdisFddiTypeLocalA = 0x2,NdisFddiTypeLocalB = 0x3,NdisFddiTypeLocalAB = 0x4,NdisFddiTypeLocalS = 0x5,NdisFddiTypeWrapA = 0x6,NdisFddiTypeWrapB = 0x7,NdisFddiTypeWrapAB = 0x8,NdisFddiTypeWrapS = 0x9,NdisFddiTypeCWrapA = 0xA,NdisFddiTypeCWrapB = 0xB,NdisFddiTypeCWrapS = 0xC,NdisFddiTypeThrough = 0xD,};
struct _SEC_WINNT_AUTH_IDENTITY_A {unsigned char *User;unsigned int UserLength;unsigned char *Domain;unsigned int DomainLength;unsigned char *Password;unsigned int PasswordLength;unsigned int Flags;};
struct _SEC_WINNT_AUTH_IDENTITY_W {unsigned short *User;unsigned int UserLength;unsigned short *Domain;unsigned int DomainLength;unsigned short *Password;unsigned int PasswordLength;unsigned int Flags;};
enum _TRUSTED_INFORMATION_CLASS {TrustedDomainNameInformation = 0x1,TrustedControllersInformation = 0x2,TrustedPosixOffsetInformation = 0x3,TrustedPasswordInformation = 0x4,TrustedDomainInformationBasic = 0x5,TrustedDomainInformationEx = 0x6,TrustedDomainAuthInformation = 0x7,TrustedDomainFullInformation = 0x8,TrustedDomainAuthInformationInternal = 0x9,TrustedDomainFullInformationInternal = 0xA,TrustedDomainInformationEx2Internal = 0xB,TrustedDomainFullInformation2Internal = 0xC,};
enum __MIDL_INamespaceWalk_0001 {NSWF_NONE_IMPLIES_ALL = 0x1,NSWF_ONE_IMPLIES_ALL = 0x2,NSWF_DONT_TRAVERSE_LINKS = 0x4,NSWF_DONT_ACCUMULATE_RESULT = 0x8,NSWF_TRAVERSE_STREAM_JUNCTIONS = 0x10,NSWF_FILESYSTEM_ONLY = 0x20,NSWF_SHOW_PROGRESS = 0x40,NSWF_FLAG_VIEWORDER = 0x80,NSWF_IGNORE_AUTOPLAY_HIDA = 0x100,};
enum tagExtendedErrorParamTypes {eeptAnsiString = 0x1,eeptUnicodeString = 0x2,eeptLongVal = 0x3,eeptShortVal = 0x4,eeptPointerVal = 0x5,eeptNone = 0x6,eeptBinary = 0x7,};
enum tag_WBEM_GENERIC_FLAG_TYPE {WBEM_FLAG_RETURN_IMMEDIATELY = 0x10,WBEM_FLAG_RETURN_WBEM_COMPLETE = 0x0,WBEM_FLAG_BIDIRECTIONAL = 0x0,WBEM_FLAG_FORWARD_ONLY = 0x20,WBEM_FLAG_NO_ERROR_OBJECT = 0x40,WBEM_FLAG_RETURN_ERROR_OBJECT = 0x0,WBEM_FLAG_SEND_STATUS = 0x80,WBEM_FLAG_DONT_SEND_STATUS = 0x0,WBEM_FLAG_ENSURE_LOCATABLE = 0x100,WBEM_FLAG_DIRECT_READ = 0x200,WBEM_FLAG_SEND_ONLY_SELECTED = 0x0,WBEM_RETURN_WHEN_COMPLETE = 0x0,WBEM_RETURN_IMMEDIATELY = 0x10,WBEM_MASK_RESERVED_FLAGS = 0x1F000,WBEM_FLAG_USE_AMENDED_QUALIFIERS = 0x20000,WBEM_FLAG_STRONG_VALIDATION = 0x100000,};
typedef struct _ACCESS_ALLOWED_OBJECT_ACE ACCESS_ALLOWED_OBJECT_ACE;
typedef struct tagACTCTX_SECTION_KEYED_DATA ACTCTX_SECTION_KEYED_DATA;
typedef struct _BDA_ETHERNET_ADDRESS_LIST BDA_ETHERNET_ADDRESS_LIST;
enum BinaryConvolutionCodeRate {BDA_BCC_RATE_NOT_SET = 0xFFFFFFFF,BDA_BCC_RATE_NOT_DEFINED = 0x0,BDA_BCC_RATE_1_2 = 0x1,BDA_BCC_RATE_2_3 = 0x2,BDA_BCC_RATE_3_4 = 0x3,BDA_BCC_RATE_3_5 = 0x4,BDA_BCC_RATE_4_5 = 0x5,BDA_BCC_RATE_5_6 = 0x6,BDA_BCC_RATE_5_11 = 0x7,BDA_BCC_RATE_7_8 = 0x8,BDA_BCC_RATE_MAX = 0x9,};
typedef struct _CERT_ISSUER_SERIAL_NUMBER CERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_POLICY_MAPPINGS_INFO CERT_POLICY_MAPPINGS_INFO;
typedef struct _CERT_PRIVATE_KEY_VALIDITY CERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_STORE_PROV_FIND_INFO CERT_STORE_PROV_FIND_INFO;
typedef struct _CHANGER_ELEMENT_STATUS_EX CHANGER_ELEMENT_STATUS_EX;
typedef struct _CMSG_CONTENT_ENCRYPT_INFO CMSG_CONTENT_ENCRYPT_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO CREATE_PROCESS_DEBUG_INFO;
typedef struct _CRYPTPROTECT_PROMPTSTRUCT CRYPTPROTECT_PROMPTSTRUCT;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS CRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PKCS8_IMPORT_PARAMS;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA CRYPT_VERIFY_MESSAGE_PARA;
typedef struct _D3DHAL_CLIPPEDTRIANGLEFAN D3DHAL_CLIPPEDTRIANGLEFAN;
typedef struct _D3DHAL_CONTEXTDESTROYDATA D3DHAL_CONTEXTDESTROYDATA;
typedef struct _D3DHAL_D3DDX6EXTENDEDCAPS D3DHAL_D3DDX6EXTENDEDCAPS;
typedef struct _D3DHAL_DP2INDEXEDLINELIST D3DHAL_DP2INDEXEDLINELIST;
typedef struct _D3DHAL_DP2SETRENDERTARGET D3DHAL_DP2SETRENDERTARGET;
typedef struct _D3DHAL_DP2SETSTREAMSOURCE D3DHAL_DP2SETSTREAMSOURCE;
typedef struct _D3DHAL_DP2TRIANGLEFAN_IMM D3DHAL_DP2TRIANGLEFAN_IMM;
typedef struct _D3DHAL_DRAWPRIMITIVESDATA D3DHAL_DRAWPRIMITIVESDATA;
typedef struct _D3DHAL_TEXTUREDESTROYDATA D3DHAL_TEXTUREDESTROYDATA;
typedef struct _D3DHAL_TEXTUREGETSURFDATA D3DHAL_TEXTUREGETSURFDATA;
typedef struct _D3DNTHAL_DP2DRAWPRIMITIVE D3DNTHAL_DP2DRAWPRIMITIVE;
typedef struct _D3DNTHAL_DP2DRAWRECTPATCH D3DNTHAL_DP2DRAWRECTPATCH;
typedef struct _D3DNTHAL_DP2TRIANGLESTRIP D3DNTHAL_DP2TRIANGLESTRIP;
typedef struct _D3DNTHAL_DP2UPDATEPALETTE D3DNTHAL_DP2UPDATEPALETTE;
typedef struct _D3DNTHAL_GLOBALDRIVERDATA D3DNTHAL_GLOBALDRIVERDATA;
typedef struct _D3DNTHAL_SCENECAPTUREDATA D3DNTHAL_SCENECAPTUREDATA;
typedef struct _DBGKD_DEBUG_DATA_HEADER32 DBGKD_DEBUG_DATA_HEADER32;
typedef struct _DBGKD_DEBUG_DATA_HEADER64 DBGKD_DEBUG_DATA_HEADER64;
typedef struct _DDHAL_CREATESURFACEEXDATA DDHAL_CREATESURFACEEXDATA;
typedef struct _DDHAL_GETVPORTCONNECTDATA DDHAL_GETVPORTCONNECTDATA;
typedef struct _DD_ADDATTACHEDSURFACEDATA DD_ADDATTACHEDSURFACEDATA;
typedef struct _DD_FREE_DEFERRED_AGP_DATA DD_FREE_DEFERRED_AGP_DATA;
typedef struct _DD_GETVPORTFLIPSTATUSDATA DD_GETVPORTFLIPSTATUSDATA;
typedef struct _DD_MISCELLANEOUSCALLBACKS DD_MISCELLANEOUSCALLBACKS;
typedef struct _DD_SETOVERLAYPOSITIONDATA DD_SETOVERLAYPOSITIONDATA;
typedef struct _DD_UPDATENONLOCALHEAPDATA DD_UPDATENONLOCALHEAPDATA;
typedef struct IDirectDrawKernelVtbl DIRECTDRAWKERNELCALLBACKS;
typedef struct tagEMREXTCREATEFONTINDIRECTW EMREXTCREATEFONTINDIRECTW;
typedef struct _EVENTLOG_FULL_INFORMATION EVENTLOG_FULL_INFORMATION;
typedef struct _FULL_PTR_TO_REFID_ELEMENT FULL_PTR_TO_REFID_ELEMENT;
typedef struct _HIDP_LINK_COLLECTION_NODE HIDP_LINK_COLLECTION_NODE;
struct IConnectionPointContainer {struct IConnectionPointContainerVtbl *lpVtbl;};
typedef IDirectMusicPortDownload IDirectMusicPortDownload8;
struct IDirectSoundCaptureBuffer {struct IDirectSoundCaptureBufferVtbl *lpVtbl;};
struct IDirectSoundFXI3DL2Reverb {struct IDirectSoundFXI3DL2ReverbVtbl *lpVtbl;};
struct IDirectSoundFXWavesReverb {struct IDirectSoundFXWavesReverbVtbl *lpVtbl;};
typedef struct _ImageArchitectureHeader IMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF IMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER IMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER IMAGE_ROM_OPTIONAL_HEADER;
struct IOleInPlaceSiteWindowless {struct IOleInPlaceSiteWindowlessVtbl *lpVtbl;};
struct IProvideMultipleClassInfo {struct IProvideMultipleClassInfoVtbl *lpVtbl;};
struct IWbemConstructClassObject {struct IWbemConstructClassObjectVtbl *lpVtbl;};
typedef struct _KERB_RETRIEVE_TKT_REQUEST KERB_RETRIEVE_TKT_REQUEST;
typedef struct _KERB_TICKET_CACHE_INFO_EX KERB_TICKET_CACHE_INFO_EX;
typedef struct _097132A3DAC724C77C2462A4DC4AA652 KSDATAFORMAT_WAVEFORMATEX;
typedef struct _8FE9905039884FA12A33AF170E497D82 KSDS3D_BUFFER_CONE_ANGLES;
typedef struct _61992E1E6DA7B91ECC7FA4A74B115A04 KSPROPERTY_MEDIAAVAILABLE;
typedef struct _E15D7B7CA61FF43DF93005DFD376A388 KSPROPERTY_TUNER_STATUS_S;
typedef struct _AAD79452FC68247846A5E3B058A03BB4 KSPROPERTY_TVAUDIO_CAPS_S;
typedef struct _764676431BC78EE50306C71955FB365D KSPROPERTY_VIDEODECODER_S;
typedef struct _9A6BD7645A973A5ADF34F154404EC940 KSPROPERTY_VIDEOENCODER_S;
typedef struct _9A6BD7645A973A5ADF34F154404EC940 KSPROPERTY_VIDEOPROCAMP_S;
typedef struct _816E3560EF21380C948191659F672DF0 KSWAVE_INPUT_CAPABILITIES;
typedef struct _KS_DVDCOPY_SET_COPY_STATE KS_DVDCOPY_SET_COPY_STATE;
typedef struct _98D21277AAAA3049664E864EBED0B60A KS_FRAMING_RANGE_WEIGHTED;
typedef struct _BIDI_RESPONSE_CONTAINER *LPBIDI_RESPONSE_CONTAINER;
typedef struct _D3DHAL_DP2TRIANGLESTRIP *LPD3DHAL_DP2TRIANGLESTRIP;
typedef struct _D3DNTHAL_DP2STARTVERTEX *LPD3DNTHAL_DP2STARTVERTEX;
typedef struct _DDHAL_CREATEPALETTEDATA *LPDDHAL_CREATEPALETTEDATA;
typedef struct _DDHAL_CREATESURFACEDATA *LPDDHAL_CREATESURFACEDATA;
typedef struct _DDHAL_DDKERNELCALLBACKS *LPDDHAL_DDKERNELCALLBACKS;
typedef struct _DDHAL_DESTROYDRIVERDATA *LPDDHAL_DESTROYDRIVERDATA;
typedef struct _DDHAL_DESTROYMOCOMPDATA *LPDDHAL_DESTROYMOCOMPDATA;
typedef struct _DDHAL_GETDRIVERINFODATA *LPDDHAL_GETDRIVERINFODATA;
typedef struct _DDHAL_GETFLIPSTATUSDATA *LPDDHAL_GETFLIPSTATUSDATA;
typedef struct _DDHAL_GETVPORTFIELDDATA *LPDDHAL_GETVPORTFIELDDATA;
typedef struct _DDHAL_SYNCVIDEOPORTDATA *LPDDHAL_SYNCVIDEOPORTDATA;
typedef struct _DDHAL_UPDATEOVERLAYDATA *LPDDHAL_UPDATEOVERLAYDATA;
typedef struct _DDRAWI_DDMOTIONCOMP_INT *LPDDRAWI_DDMOTIONCOMP_INT;
typedef struct _DDRAWI_DDMOTIONCOMP_LCL *LPDDRAWI_DDMOTIONCOMP_LCL;
typedef struct _DDRAWI_DDRAWCLIPPER_GBL *LPDDRAWI_DDRAWCLIPPER_GBL;
typedef struct _DDRAWI_DDRAWCLIPPER_INT *LPDDRAWI_DDRAWCLIPPER_INT;
typedef struct _DDRAWI_DDRAWCLIPPER_LCL *LPDDRAWI_DDRAWCLIPPER_LCL;
typedef struct _DDRAWI_DDRAWPALETTE_GBL *LPDDRAWI_DDRAWPALETTE_GBL;
typedef struct _DDRAWI_DDRAWPALETTE_INT *LPDDRAWI_DDRAWPALETTE_INT;
typedef struct _DDRAWI_DDRAWPALETTE_LCL *LPDDRAWI_DDRAWPALETTE_LCL;
typedef struct _DDRAWI_DDRAWSURFACE_GBL *LPDDRAWI_DDRAWSURFACE_GBL;
typedef struct _DDRAWI_DDRAWSURFACE_INT *LPDDRAWI_DDRAWSURFACE_INT;
typedef struct _DDRAWI_DDRAWSURFACE_LCL *LPDDRAWI_DDRAWSURFACE_LCL;
typedef struct IDirectDrawSurfaceKernel *LPDIRECTDRAWSURFACEKERNEL;
typedef struct IDirectSoundCaptureFXAec *LPDIRECTSOUNDCAPTUREFXAEC;
typedef struct IDirectSoundFXCompressor *LPDIRECTSOUNDFXCOMPRESSOR;
typedef struct IDirectSoundFXDistortion *LPDIRECTSOUNDFXDISTORTION;
typedef struct _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _RSVP_FILTERSPEC_V6_FLOW *LPRSVP_FILTERSPEC_V6_FLOW;
typedef struct _SERVICE_TYPE_VALUE_ABSA *LPSERVICE_TYPE_VALUE_ABSA;
typedef struct _SERVICE_TYPE_VALUE_ABSW *LPSERVICE_TYPE_VALUE_ABSW;
typedef struct _D5B338A135013580D3FC38360357E666 *LPSHFOLDERCUSTOMSETTINGSA;
typedef struct _EC893833BD5056AD53916225206BDC9F *LPSHFOLDERCUSTOMSETTINGSW;
enum MACRO_ACMFILTERTAGDETAILS {ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48,};
enum MACRO_ACMFORMATTAGDETAILS {ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48,};
enum MACRO_ACM_DRIVERPRIORITYF {ACM_DRIVERPRIORITYF_ENABLE = 0x1,ACM_DRIVERPRIORITYF_DISABLE = 0x2,ACM_DRIVERPRIORITYF_ABLEMASK = 0x3,ACM_DRIVERPRIORITYF_BEGIN = 0x10000,ACM_DRIVERPRIORITYF_END = 0x20000,ACM_DRIVERPRIORITYF_DEFERMASK = 0x30000,};
enum MACRO_BUGCODE_PSS_MESSAGE {BUGCODE_PSS_MESSAGE_SIGNATURE = 0xC3,};
enum MACRO_COHERENCY_EXCEPTION {DATA_COHERENCY_EXCEPTION = 0x55,INSTRUCTION_COHERENCY_EXCEPTION = 0x56,};
enum MACRO_CONFIRMSAFETYACTION {CONFIRMSAFETYACTION_LOADOBJECT = 0x1,};
enum MACRO_CO_E_THREADINGMODEL {CO_E_THREADINGMODEL_CHANGED = 0x8004E028,CO_E_NOIISINTRINSICS = 0x8004E029,CO_E_NOCOOKIES = 0x8004E02A,CO_E_DBERROR = 0x8004E02B,CO_E_NOTPOOLED = 0x8004E02C,CO_E_NOTCONSTRUCTED = 0x8004E02D,CO_E_NOSYNCHRONIZATION = 0x8004E02E,CO_E_ISOLEVELMISMATCH = 0x8004E02F,};
enum MACRO_CRYPT_VERIFYCONTEXT {CRYPT_VERIFYCONTEXT = 0xF0000000,CRYPT_NEWKEYSET = 0x8,CRYPT_DELETEKEYSET = 0x10,CRYPT_MACHINE_KEYSET = 0x20,CRYPT_SILENT = 0x40,CRYPT_EXPORTABLE = 0x1,CRYPT_USER_PROTECTED = 0x2,CRYPT_CREATE_SALT = 0x4,CRYPT_UPDATE_KEY = 0x8,CRYPT_NO_SALT = 0x10,CRYPT_PREGEN = 0x40,CRYPT_RECIPIENT = 0x10,CRYPT_INITIATOR = 0x40,CRYPT_ONLINE = 0x80,CRYPT_SF = 0x100,CRYPT_CREATE_IV = 0x200,CRYPT_KEK = 0x400,CRYPT_DATA_KEY = 0x800,CRYPT_VOLATILE = 0x1000,CRYPT_SGCKEY = 0x2000,CRYPT_ARCHIVABLE = 0x4000,};
enum MACRO_D3DCOLORWRITEENABLE {D3DCOLORWRITEENABLE_RED = 1,D3DCOLORWRITEENABLE_GREEN = 2,D3DCOLORWRITEENABLE_BLUE = 4,D3DCOLORWRITEENABLE_ALPHA = 8,};
enum MACRO_D3DPRASTERCAPS_ROP2 {D3DPRASTERCAPS_ROP2 = 0x2,D3DPRASTERCAPS_XOR = 0x4,D3DPRASTERCAPS_SUBPIXEL = 0x20,D3DPRASTERCAPS_SUBPIXELX = 0x40,D3DPRASTERCAPS_STIPPLE = 0x200,D3DPRASTERCAPS_ANTIALIASSORTDEPENDENT = 0x400,D3DPRASTERCAPS_ANTIALIASSORTINDEPENDENT = 0x800,D3DPRASTERCAPS_TRANSLUCENTSORTINDEPENDENT = 0x80000,};
enum MACRO_D3DPRESENT_INTERVAL {D3DPRESENT_INTERVAL_DEFAULT = 0x0,D3DPRESENT_INTERVAL_ONE = 0x1,D3DPRESENT_INTERVAL_TWO = 0x2,D3DPRESENT_INTERVAL_THREE = 0x4,D3DPRESENT_INTERVAL_FOUR = 0x8,D3DPRESENT_INTERVAL_IMMEDIATE = 0x80000000,};
enum MACRO_DRIVER_VERIFIER_DMA {DRIVER_VERIFIER_DMA_VIOLATION = 0xE6,};
enum MACRO_ENABLE_DISABLE_AUTO {ENABLE_DISABLE_AUTO_OFFLINE = 0xDB,};
enum MACRO_KERNEL_STACK_LOCKED {KERNEL_STACK_LOCKED_AT_EXIT = 0x94,};
enum MACRO_LVM_SETGROUPMETRICS {LVM_SETGROUPMETRICS = 4251,LVM_GETGROUPMETRICS = 4252,LVM_ENABLEGROUPVIEW = 4253,LVM_SORTGROUPS = 4254,LVM_INSERTGROUPSORTED = 4255,LVM_REMOVEALLGROUPS = 4256,LVM_HASGROUP = 4257,};
enum MACRO_LVM_SETTILEVIEWINFO {LVM_SETTILEVIEWINFO = 4258,LVM_GETTILEVIEWINFO = 4259,LVM_SETTILEINFO = 4260,LVM_GETTILEINFO = 4261,};
enum MACRO_MM_ACM_FILTERCHOOSE {MM_ACM_FILTERCHOOSE = 0x8000,};
enum MACRO_MM_ACM_FORMATCHOOSE {MM_ACM_FORMATCHOOSE = 0x8000,};
enum MACRO_OLEIVERB_PROPERTIES {OLEIVERB_PROPERTIES = -7,};
enum MACRO_PAGE_FAULT_IN_FREED {PAGE_FAULT_IN_FREED_SPECIAL_POOL = 0xCC,PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 0xCD,};
enum MACRO_POSTSCRIPT_IDENTIFY {POSTSCRIPT_IDENTIFY = 4117,POSTSCRIPT_INJECTION = 4118,};
enum MACRO_PRINTER_NOTIFY_INFO {PRINTER_NOTIFY_INFO_DATA_COMPACT = 1,};
enum MACRO_RESOURCEDISPLAYTYPE {RESOURCEDISPLAYTYPE_GENERIC = 0x0,RESOURCEDISPLAYTYPE_DOMAIN = 0x1,RESOURCEDISPLAYTYPE_SERVER = 0x2,RESOURCEDISPLAYTYPE_SHARE = 0x3,RESOURCEDISPLAYTYPE_FILE = 0x4,RESOURCEDISPLAYTYPE_GROUP = 0x5,RESOURCEDISPLAYTYPE_NETWORK = 0x6,RESOURCEDISPLAYTYPE_ROOT = 0x7,RESOURCEDISPLAYTYPE_SHAREADMIN = 0x8,RESOURCEDISPLAYTYPE_DIRECTORY = 0x9,RESOURCEDISPLAYTYPE_TREE = 0xA,RESOURCEDISPLAYTYPE_NDSCONTAINER = 0xB,};
enum MACRO_SECURITY_DESCRIPTOR {SECURITY_DESCRIPTOR_REVISION = 1,SECURITY_DESCRIPTOR_REVISION1 = 1,};
enum MACRO_SO_EXCLUSIVEADDRUSE {SO_EXCLUSIVEADDRUSE = -5,SO_GROUP_ID = 8193,SO_GROUP_PRIORITY = 8194,SO_MAX_MSG_SIZE = 8195,SO_PROTOCOL_INFOA = 8196,SO_PROTOCOL_INFOW = 8197,SO_PROTOCOL_INFO = 8196,};
enum MACRO_TRUST_E_NOSIGNATURE {TRUST_E_NOSIGNATURE = 0x800B0100,};
enum MACRO_TVM_CREATEDRAGIMAGE {TVM_CREATEDRAGIMAGE = 4370,TVM_SORTCHILDREN = 4371,TVM_ENSUREVISIBLE = 4372,TVM_SORTCHILDRENCB = 4373,TVM_ENDEDITLABELNOW = 4374,TVM_GETISEARCHSTRINGA = 4375,TVM_GETISEARCHSTRINGW = 4416,TVM_GETISEARCHSTRING = 4375,TVM_SETTOOLTIPS = 4376,TVM_GETTOOLTIPS = 4377,TVM_SETINSERTMARK = 4378,TVM_SETUNICODEFORMAT = 8197,TVM_GETUNICODEFORMAT = 8198,TVM_SETITEMHEIGHT = 4379,TVM_GETITEMHEIGHT = 4380,TVM_SETBKCOLOR = 4381,TVM_SETTEXTCOLOR = 4382,TVM_GETBKCOLOR = 4383,TVM_GETTEXTCOLOR = 4384,TVM_SETSCROLLTIME = 4385,TVM_GETSCROLLTIME = 4386,TVM_SETINSERTMARKCOLOR = 4389,TVM_GETINSERTMARKCOLOR = 4390,TVM_GETITEMSTATE = 4391,TVM_SETLINECOLOR = 4392,TVM_GETLINECOLOR = 4393,TVM_MAPACCIDTOHTREEITEM = 4394,TVM_MAPHTREEITEMTOACCID = 4395,};
enum MACRO_VARIANT_NOVALUEPROP {VARIANT_NOVALUEPROP = 0x1,VARIANT_ALPHABOOL = 0x2,VARIANT_NOUSEROVERRIDE = 0x4,VARIANT_CALENDAR_HIJRI = 0x8,VARIANT_LOCALBOOL = 0x10,VARIANT_CALENDAR_THAI = 0x20,VARIANT_CALENDAR_GREGORIAN = 0x40,VARIANT_USE_NLS = 0x80,};
enum MACRO_WAVE_FORMAT_UNKNOWN {WAVE_FORMAT_UNKNOWN = 0x0,WAVE_FORMAT_ADPCM = 0x2,WAVE_FORMAT_IEEE_FLOAT = 0x3,WAVE_FORMAT_VSELP = 0x4,WAVE_FORMAT_IBM_CVSD = 0x5,WAVE_FORMAT_ALAW = 0x6,WAVE_FORMAT_MULAW = 0x7,WAVE_FORMAT_DTS = 0x8,WAVE_FORMAT_DRM = 0x9,WAVE_FORMAT_OKI_ADPCM = 0x10,WAVE_FORMAT_DVI_ADPCM = 0x11,WAVE_FORMAT_IMA_ADPCM = 0x11,WAVE_FORMAT_MEDIASPACE_ADPCM = 0x12,WAVE_FORMAT_SIERRA_ADPCM = 0x13,WAVE_FORMAT_G723_ADPCM = 0x14,WAVE_FORMAT_DIGISTD = 0x15,WAVE_FORMAT_DIGIFIX = 0x16,WAVE_FORMAT_DIALOGIC_OKI_ADPCM = 0x17,WAVE_FORMAT_MEDIAVISION_ADPCM = 0x18,WAVE_FORMAT_CU_CODEC = 0x19,WAVE_FORMAT_YAMAHA_ADPCM = 0x20,WAVE_FORMAT_SONARC = 0x21,WAVE_FORMAT_DSPGROUP_TRUESPEECH = 0x22,WAVE_FORMAT_ECHOSC1 = 0x23,WAVE_FORMAT_AUDIOFILE_AF36 = 0x24,WAVE_FORMAT_APTX = 0x25,WAVE_FORMAT_AUDIOFILE_AF10 = 0x26,WAVE_FORMAT_PROSODY_1612 = 0x27,WAVE_FORMAT_LRC = 0x28,WAVE_FORMAT_DOLBY_AC2 = 0x30,WAVE_FORMAT_GSM610 = 0x31,WAVE_FORMAT_MSNAUDIO = 0x32,WAVE_FORMAT_ANTEX_ADPCME = 0x33,WAVE_FORMAT_CONTROL_RES_VQLPC = 0x34,WAVE_FORMAT_DIGIREAL = 0x35,WAVE_FORMAT_DIGIADPCM = 0x36,WAVE_FORMAT_CONTROL_RES_CR10 = 0x37,WAVE_FORMAT_NMS_VBXADPCM = 0x38,WAVE_FORMAT_CS_IMAADPCM = 0x39,WAVE_FORMAT_ECHOSC3 = 0x3A,WAVE_FORMAT_ROCKWELL_ADPCM = 0x3B,WAVE_FORMAT_ROCKWELL_DIGITALK = 0x3C,WAVE_FORMAT_XEBEC = 0x3D,WAVE_FORMAT_G721_ADPCM = 0x40,WAVE_FORMAT_G728_CELP = 0x41,WAVE_FORMAT_MSG723 = 0x42,WAVE_FORMAT_MPEG = 0x50,WAVE_FORMAT_RT24 = 0x52,WAVE_FORMAT_PAC = 0x53,WAVE_FORMAT_MPEGLAYER3 = 0x55,WAVE_FORMAT_LUCENT_G723 = 0x59,WAVE_FORMAT_CIRRUS = 0x60,WAVE_FORMAT_ESPCM = 0x61,WAVE_FORMAT_VOXWARE = 0x62,WAVE_FORMAT_CANOPUS_ATRAC = 0x63,WAVE_FORMAT_G726_ADPCM = 0x64,WAVE_FORMAT_G722_ADPCM = 0x65,WAVE_FORMAT_DSAT_DISPLAY = 0x67,WAVE_FORMAT_VOXWARE_BYTE_ALIGNED = 0x69,WAVE_FORMAT_VOXWARE_AC8 = 0x70,WAVE_FORMAT_VOXWARE_AC10 = 0x71,WAVE_FORMAT_VOXWARE_AC16 = 0x72,WAVE_FORMAT_VOXWARE_AC20 = 0x73,WAVE_FORMAT_VOXWARE_RT24 = 0x74,WAVE_FORMAT_VOXWARE_RT29 = 0x75,WAVE_FORMAT_VOXWARE_RT29HW = 0x76,WAVE_FORMAT_VOXWARE_VR12 = 0x77,WAVE_FORMAT_VOXWARE_VR18 = 0x78,WAVE_FORMAT_VOXWARE_TQ40 = 0x79,WAVE_FORMAT_SOFTSOUND = 0x80,WAVE_FORMAT_VOXWARE_TQ60 = 0x81,WAVE_FORMAT_MSRT24 = 0x82,WAVE_FORMAT_G729A = 0x83,WAVE_FORMAT_MVI_MVI2 = 0x84,WAVE_FORMAT_DF_G726 = 0x85,WAVE_FORMAT_DF_GSM610 = 0x86,WAVE_FORMAT_ISIAUDIO = 0x88,WAVE_FORMAT_ONLIVE = 0x89,WAVE_FORMAT_SBC24 = 0x91,WAVE_FORMAT_DOLBY_AC3_SPDIF = 0x92,WAVE_FORMAT_MEDIASONIC_G723 = 0x93,WAVE_FORMAT_PROSODY_8KBPS = 0x94,WAVE_FORMAT_ZYXEL_ADPCM = 0x97,WAVE_FORMAT_PHILIPS_LPCBB = 0x98,WAVE_FORMAT_PACKED = 0x99,WAVE_FORMAT_MALDEN_PHONYTALK = 0xA0,WAVE_FORMAT_RHETOREX_ADPCM = 0x100,WAVE_FORMAT_IRAT = 0x101,WAVE_FORMAT_VIVO_G723 = 0x111,WAVE_FORMAT_VIVO_SIREN = 0x112,WAVE_FORMAT_DIGITAL_G723 = 0x123,WAVE_FORMAT_SANYO_LD_ADPCM = 0x125,WAVE_FORMAT_SIPROLAB_ACEPLNET = 0x130,WAVE_FORMAT_SIPROLAB_ACELP4800 = 0x131,WAVE_FORMAT_SIPROLAB_ACELP8V3 = 0x132,WAVE_FORMAT_SIPROLAB_G729 = 0x133,WAVE_FORMAT_SIPROLAB_G729A = 0x134,WAVE_FORMAT_SIPROLAB_KELVIN = 0x135,WAVE_FORMAT_G726ADPCM = 0x140,WAVE_FORMAT_QUALCOMM_PUREVOICE = 0x150,WAVE_FORMAT_QUALCOMM_HALFRATE = 0x151,WAVE_FORMAT_TUBGSM = 0x155,WAVE_FORMAT_MSAUDIO1 = 0x160,WAVE_FORMAT_UNISYS_NAP_ADPCM = 0x170,WAVE_FORMAT_UNISYS_NAP_ULAW = 0x171,WAVE_FORMAT_UNISYS_NAP_ALAW = 0x172,WAVE_FORMAT_UNISYS_NAP_16K = 0x173,WAVE_FORMAT_CREATIVE_ADPCM = 0x200,WAVE_FORMAT_CREATIVE_FASTSPEECH8 = 0x202,WAVE_FORMAT_CREATIVE_FASTSPEECH10 = 0x203,WAVE_FORMAT_UHER_ADPCM = 0x210,WAVE_FORMAT_QUARTERDECK = 0x220,WAVE_FORMAT_ILINK_VC = 0x230,WAVE_FORMAT_RAW_SPORT = 0x240,WAVE_FORMAT_ESST_AC3 = 0x241,WAVE_FORMAT_IPI_HSX = 0x250,WAVE_FORMAT_IPI_RPELP = 0x251,WAVE_FORMAT_CS2 = 0x260,WAVE_FORMAT_SONY_SCX = 0x270,WAVE_FORMAT_FM_TOWNS_SND = 0x300,WAVE_FORMAT_BTV_DIGITAL = 0x400,WAVE_FORMAT_QDESIGN_MUSIC = 0x450,WAVE_FORMAT_VME_VMPCM = 0x680,WAVE_FORMAT_TPC = 0x681,WAVE_FORMAT_OLIGSM = 0x1000,WAVE_FORMAT_OLIADPCM = 0x1001,WAVE_FORMAT_OLICELP = 0x1002,WAVE_FORMAT_OLISBC = 0x1003,WAVE_FORMAT_OLIOPR = 0x1004,WAVE_FORMAT_LH_CODEC = 0x1100,WAVE_FORMAT_NORRIS = 0x1400,WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS = 0x1500,WAVE_FORMAT_DVM = 0x2000,WAVE_FORMAT_DEVELOPMENT = 0xFFFF,};
enum MACRO_cktypeDIBcompressed {cktypeDIBcompressed = 25444,};
typedef struct mediaspace_adpcmwaveformat_tag MEDIASPACEADPCMWAVEFORMAT;
typedef struct _MSV1_0_LM20_LOGON_PROFILE MSV1_0_LM20_LOGON_PROFILE;
typedef struct _NDIS_802_11_CONFIGURATION NDIS_802_11_CONFIGURATION;
typedef struct NDIS_BPC_STATUS_CONNECTION NDIS_BPC_STATUS_CONNECTED;
typedef struct _7FAA4336E151361F9CD171DE989684F0 NTFS_EXTENDED_VOLUME_DATA;
typedef struct _1DF2F441892C3D46584606B89F66007B OPENCARD_SEARCH_CRITERIAA;
typedef struct _4B26251D75C0D59F22113E7121B4AA5F OPENCARD_SEARCH_CRITERIAW;
typedef struct _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;
typedef struct _PARCLASS_NEGOTIATION_MASK PARCLASS_NEGOTIATION_MASK;
typedef struct _PARTITION_INFORMATION_GPT PARTITION_INFORMATION_GPT;
typedef struct _PARTITION_INFORMATION_MBR PARTITION_INFORMATION_MBR;
typedef struct _CERT_CHAIN_ENGINE_CONFIG *PCERT_CHAIN_ENGINE_CONFIG;
typedef struct _CERT_CHAIN_POLICY_STATUS *PCERT_CHAIN_POLICY_STATUS;
typedef struct _CERT_CREATE_CONTEXT_PARA *PCERT_CREATE_CONTEXT_PARA;
typedef struct _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO *PCERT_PHYSICAL_STORE_INFO;
typedef struct _CERT_POLICY95_QUALIFIER1 *PCERT_POLICY95_QUALIFIER1;
typedef struct _CERT_REVOCATION_CRL_INFO *PCERT_REVOCATION_CRL_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO;
typedef struct _COINSTALLER_CONTEXT_DATA *PCOINSTALLER_CONTEXT_DATA;
typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER;
typedef struct _CRL_FIND_ISSUED_FOR_PARA *PCRL_FIND_ISSUED_FOR_PARA;
typedef struct _CRYPT_PROVIDER_FUNCTIONS *PCRYPT_PROVIDER_FUNCTIONS;
typedef struct _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES;
typedef struct _DD_GETINTERNALMOCOMPDATA *PDD_GETINTERNALMOCOMPDATA;
typedef struct _DD_GETMOCOMPCOMPBUFFDATA *PDD_GETMOCOMPCOMPBUFFDATA;
typedef struct _DD_GETVPORTBANDWIDTHDATA *PDD_GETVPORTBANDWIDTHDATA;
typedef struct _DD_QUERYMOCOMPSTATUSDATA *PDD_QUERYMOCOMPSTATUSDATA;
typedef struct _DECRYPTION_STATUS_BUFFER *PDECRYPTION_STATUS_BUFFER;
typedef struct _DRIVE_LAYOUT_INFORMATION *PDRIVE_LAYOUT_INFORMATION;
typedef struct _HIDP_EXTENDED_ATTRIBUTES *PHIDP_EXTENDED_ATTRIBUTES;
typedef struct _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;
typedef struct _KERB_INTERACTIVE_PROFILE *PKERB_INTERACTIVE_PROFILE;
typedef struct _KERB_SETPASSWORD_REQUEST *PKERB_SETPASSWORD_REQUEST;
typedef struct _KERB_TICKET_UNLOCK_LOGON *PKERB_TICKET_UNLOCK_LOGON;
typedef struct _C9C4D03C150E869FFC5FB33A10EAB149 *PKSAUDIO_PREFERRED_STATUS;
typedef struct _1889F3BAB83DF1AC38A4E0627115688D *PKSPIN_PHYSICALCONNECTION;
typedef struct _BC7A094E99B893F962A170A802EFE988 *PKSPROPERTY_MEMBERSHEADER;
typedef struct _BA718A362089753A7EB60B21429558A7 *PKSPROPERTY_STEPPING_LONG;
typedef struct _E4D39CEDA60A9A842177218EB3078B88 *PKSPROPERTY_TUNER_INPUT_S;
typedef struct _E21F85AFDEE9EAF37885ADBF8938BB0C *PKSSTREAMALLOCATOR_STATUS;
typedef struct tagKS_DATARANGE_ANALOGVIDEO *PKS_DATARANGE_ANALOGVIDEO;
typedef struct tagKS_DATARANGE_BDA_ANTENNA *PKS_DATARANGE_BDA_ANTENNA;
typedef struct tagKS_DATARANGE_MPEG1_VIDEO *PKS_DATARANGE_MPEG1_VIDEO;
typedef struct tagKS_DATARANGE_MPEG2_VIDEO *PKS_DATARANGE_MPEG2_VIDEO;
typedef struct _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;
typedef struct _MIB_IPMCAST_MFE_STATS_EX *PMIB_IPMCAST_MFE_STATS_EX;
typedef struct _MSV1_0_INTERACTIVE_LOGON *PMSV1_0_INTERACTIVE_LOGON;
typedef struct NDIS_BPC_ADDRESS_COMPARE *PNDIS_BPC_ADDRESS_COMPARE;
typedef struct NDIS_BPC_DEVICE_SETTINGS *PNDIS_BPC_DEVICE_SETTINGS;
typedef struct _NEGOTIATE_PACKAGE_PREFIX *PNEGOTIATE_PACKAGE_PREFIX;
typedef struct _POLICY_DEFAULT_QUOTA_INFO POLICY_DEFAULT_QUOTA_INFO;
typedef struct _PARTITION_INFORMATION_EX *PPARTITION_INFORMATION_EX;
typedef struct _PERF_INSTANCE_DEFINITION *PPERF_INSTANCE_DEFINITION;
typedef struct _POLICY_AUDIT_EVENTS_INFO *PPOLICY_AUDIT_EVENTS_INFO;
typedef struct _POLICY_MODIFICATION_INFO *PPOLICY_MODIFICATION_INFO;
typedef struct _PRINTER_NOTIFY_INFO_DATA *PPRINTER_NOTIFY_INFO_DATA;
typedef struct _PROPSHEETUI_GETICON_INFO *PPROPSHEETUI_GETICON_INFO;
typedef struct _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;
typedef struct tagRID_DEVICE_INFO_KEYBOARD *PRID_DEVICE_INFO_KEYBOARD;
typedef struct _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;
typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;
typedef struct _SP_DEVICE_INTERFACE_DATA *PSP_DEVICE_INTERFACE_DATA;
typedef struct _SP_DRVINFO_DETAIL_DATA_A *PSP_DRVINFO_DETAIL_DATA_A;
typedef struct _SP_DRVINFO_DETAIL_DATA_W *PSP_DRVINFO_DETAIL_DATA_W;
typedef struct _SP_PROPSHEETPAGE_REQUEST *PSP_PROPSHEETPAGE_REQUEST;
typedef struct _SP_SELECTDEVICE_PARAMS_A *PSP_SELECTDEVICE_PARAMS_A;
typedef struct _SP_SELECTDEVICE_PARAMS_W *PSP_SELECTDEVICE_PARAMS_W;
typedef struct _SP_UNREMOVEDEVICE_PARAMS *PSP_UNREMOVEDEVICE_PARAMS;
typedef struct _TC_SUPPORTED_INFO_BUFFER *PTC_SUPPORTED_INFO_BUFFER;
typedef struct _TRUSTED_CONTROLLERS_INFO *PTRUSTED_CONTROLLERS_INFO;
typedef struct _TRUSTED_DOMAIN_NAME_INFO *PTRUSTED_DOMAIN_NAME_INFO;
typedef struct _WINDOWS_IRDA_DEVICE_INFO *PWINDOWS_IRDA_DEVICE_INFO;
typedef struct _READ_ELEMENT_ADDRESS_INFO READ_ELEMENT_ADDRESS_INFO;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A SEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W SEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION;
typedef struct _SHChangeUpdateImageIDList SHChangeUpdateImageIDList;
typedef struct _SPC_INDIRECT_DATA_CONTENT SPC_INDIRECT_DATA_CONTENT;
typedef struct _060D6FD956D3EBF205D64C3CA4764571 STARTING_LCN_INPUT_BUFFER;
typedef struct _80E50DFA284ED4BC838B08AAD8EA99BA STARTING_VCN_INPUT_BUFFER;
typedef struct _STORAGE_BUS_RESET_REQUEST STORAGE_BUS_RESET_REQUEST;
typedef struct _SYSTEM_ALARM_CALLBACK_ACE SYSTEM_ALARM_CALLBACK_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE SYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _75A13DFB4406EBA41013AD06E502A0EB SYSTEM_POWER_CAPABILITIES;
typedef struct _TAPE_GET_DRIVE_PARAMETERS TAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS TAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS TAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS TAPE_SET_MEDIA_PARAMETERS;
typedef struct _TRUSTED_POSIX_OFFSET_INFO TRUSTED_POSIX_OFFSET_INFO;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA WIN32_FILE_ATTRIBUTE_DATA;
typedef struct _WINDBG_OLD_EXTENSION_APIS WINDBG_OLD_EXTENSION_APIS;
typedef struct _WINDOW_BUFFER_SIZE_RECORD WINDOW_BUFFER_SIZE_RECORD;
struct WbemAdministrativeLocator;
enum _D3DTEXTURESTAGESTATETYPE {D3DTSS_COLOROP = 0x1,D3DTSS_COLORARG1 = 0x2,D3DTSS_COLORARG2 = 0x3,D3DTSS_ALPHAOP = 0x4,D3DTSS_ALPHAARG1 = 0x5,D3DTSS_ALPHAARG2 = 0x6,D3DTSS_BUMPENVMAT00 = 0x7,D3DTSS_BUMPENVMAT01 = 0x8,D3DTSS_BUMPENVMAT10 = 0x9,D3DTSS_BUMPENVMAT11 = 0xA,D3DTSS_TEXCOORDINDEX = 0xB,D3DTSS_ADDRESSU = 0xD,D3DTSS_ADDRESSV = 0xE,D3DTSS_BORDERCOLOR = 0xF,D3DTSS_MAGFILTER = 0x10,D3DTSS_MINFILTER = 0x11,D3DTSS_MIPFILTER = 0x12,D3DTSS_MIPMAPLODBIAS = 0x13,D3DTSS_MAXMIPLEVEL = 0x14,D3DTSS_MAXANISOTROPY = 0x15,D3DTSS_BUMPENVLSCALE = 0x16,D3DTSS_BUMPENVLOFFSET = 0x17,D3DTSS_TEXTURETRANSFORMFLAGS = 0x18,D3DTSS_ADDRESSW = 0x19,D3DTSS_COLORARG0 = 0x1A,D3DTSS_ALPHAARG0 = 0x1B,D3DTSS_RESULTARG = 0x1C,D3DTSS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTURETRANSFORMFLAGS {D3DTTFF_DISABLE = 0x0,D3DTTFF_COUNT1 = 0x1,D3DTTFF_COUNT2 = 0x2,D3DTTFF_COUNT3 = 0x3,D3DTTFF_COUNT4 = 0x4,D3DTTFF_PROJECTED = 0x100,D3DTTFF_FORCE_DWORD = 0x7FFFFFFF,};
struct _DMUS_WAVES_REVERB_PARAMS {float fInGain;float fReverbMix;float fReverbTime;float fHighFreqRTRatio;};
enum _KERB_PROFILE_BUFFER_TYPE {KerbInteractiveProfile = 0x2,KerbSmartCardProfile = 0x4,KerbTicketProfile = 0x6,};
enum _MSV1_0_LOGON_SUBMIT_TYPE {MsV1_0InteractiveLogon = 0x2,MsV1_0Lm20Logon = 0x3,MsV1_0NetworkLogon = 0x4,MsV1_0SubAuthLogon = 0x5,MsV1_0WorkstationUnlockLogon = 0x7,};
enum _NDIS_802_11_NETWORK_TYPE {Ndis802_11FH = 0x0,Ndis802_11DS = 0x1,Ndis802_11NetworkTypeMax = 0x2,};
enum _NDIS_BPC_INDICATE_REASON {bpcBufferFull = 0x0,bpcBufferForced = 0x1,bpcBufferTimeOut = 0x2,bpcBufferDiscontinuity = 0x3,bpcBufferOverflow = 0x4,bpcBufferStatusEvent = 0x5,};
enum _NDIS_FDDI_RING_MGT_STATE {NdisFddiRingIsolated = 0x1,NdisFddiRingNonOperational = 0x2,NdisFddiRingOperational = 0x3,NdisFddiRingDetect = 0x4,NdisFddiRingNonOperationalDup = 0x5,NdisFddiRingOperationalDup = 0x6,NdisFddiRingDirected = 0x7,NdisFddiRingTrace = 0x8,};
enum _POLICY_INFORMATION_CLASS {PolicyAuditLogInformation = 0x1,PolicyAuditEventsInformation = 0x2,PolicyPrimaryDomainInformation = 0x3,PolicyPdAccountInformation = 0x4,PolicyAccountDomainInformation = 0x5,PolicyLsaServerRoleInformation = 0x6,PolicyReplicaSourceInformation = 0x7,PolicyDefaultQuotaInformation = 0x8,PolicyModificationInformation = 0x9,PolicyAuditFullSetInformation = 0xA,PolicyAuditFullQueryInformation = 0xB,PolicyDnsDomainInformation = 0xC,PolicyDnsDomainInformationInt = 0xD,};
enum tag_WBEM_CHANGE_FLAG_TYPE {WBEM_FLAG_CREATE_OR_UPDATE = 0x0,WBEM_FLAG_UPDATE_ONLY = 0x1,WBEM_FLAG_CREATE_ONLY = 0x2,WBEM_FLAG_UPDATE_COMPATIBLE = 0x0,WBEM_FLAG_UPDATE_SAFE_MODE = 0x20,WBEM_FLAG_UPDATE_FORCE_MODE = 0x40,WBEM_MASK_UPDATE_MODE = 0x60,WBEM_FLAG_ADVISORY = 0x10000,};
enum tag_WBEM_COMPILER_OPTIONS {WBEM_FLAG_CHECK_ONLY = 0x1,WBEM_FLAG_AUTORECOVER = 0x2,WBEM_FLAG_WMI_CHECK = 0x4,WBEM_FLAG_CONSOLE_PRINT = 0x8,WBEM_FLAG_DONT_ADD_TO_LIST = 0x10,WBEM_FLAG_SPLIT_FILES = 0x20,WBEM_FLAG_STORE_FILE = 0x100,};
typedef struct _ACCESS_DENIED_OBJECT_ACE ACCESS_DENIED_OBJECT_ACE;
typedef struct _ACL_REVISION_INFORMATION ACL_REVISION_INFORMATION;
typedef struct audiofile_af10waveformat_tag AUDIOFILE_AF10WAVEFORMAT;
typedef struct audiofile_af36waveformat_tag AUDIOFILE_AF36WAVEFORMAT;
typedef struct _CERT_CHAIN_ENGINE_CONFIG CERT_CHAIN_ENGINE_CONFIG;
typedef struct _CERT_CHAIN_POLICY_STATUS CERT_CHAIN_POLICY_STATUS;
typedef struct _CERT_CREATE_CONTEXT_PARA CERT_CREATE_CONTEXT_PARA;
typedef struct _CERT_KEYGEN_REQUEST_INFO CERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO CERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO CERT_PHYSICAL_STORE_INFO;
typedef struct _CERT_POLICY95_QUALIFIER1 CERT_POLICY95_QUALIFIER1;
typedef struct _CERT_REVOCATION_CRL_INFO CERT_REVOCATION_CRL_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO CERT_SIGNED_CONTENT_INFO;
typedef struct _COINSTALLER_CONTEXT_DATA COINSTALLER_CONTEXT_DATA;
typedef struct _CREATE_THREAD_DEBUG_INFO CREATE_THREAD_DEBUG_INFO;
typedef struct _CRL_FIND_ISSUED_FOR_PARA CRL_FIND_ISSUED_FOR_PARA;
typedef struct _CRYPT_PROVIDER_FUNCTIONS CRYPT_PROVIDER_FUNCTIONS;
typedef struct _CRYPT_RC2_CBC_PARAMETERS CRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES CRYPT_SMIME_CAPABILITIES;
typedef struct _D3DHAL_CONTEXTCREATEDATA D3DHAL_CONTEXTCREATEDATA;
typedef struct _D3DHAL_DP2DRAWPRIMITIVE2 D3DHAL_DP2DRAWPRIMITIVE2;
typedef struct _D3DHAL_TEXTURECREATEDATA D3DHAL_TEXTURECREATEDATA;
typedef struct _D3DNTHAL_D3DEXTENDEDCAPS D3DNTHAL_D3DEXTENDEDCAPS;
typedef struct _D3DNTHAL_DP2ADDDIRTYRECT D3DNTHAL_DP2ADDDIRTYRECT;
typedef struct _D3DNTHAL_DP2DRAWTRIPATCH D3DNTHAL_DP2DRAWTRIPATCH;
typedef struct _D3DNTHAL_DP2SETCLIPPLANE D3DNTHAL_DP2SETCLIPPLANE;
typedef struct _D3DNTHAL_DP2SETTRANSFORM D3DNTHAL_DP2SETTRANSFORM;
typedef struct _D3DNTHAL_DP2TRIANGLELIST D3DNTHAL_DP2TRIANGLELIST;
typedef struct _D3DNTHAL_DP2VERTEXSHADER D3DNTHAL_DP2VERTEXSHADER;
typedef struct _D3DNTHAL_DP2VIEWPORTINFO D3DNTHAL_DP2VIEWPORTINFO;
typedef struct _D3DNTHAL_TEXTURESWAPDATA D3DNTHAL_TEXTURESWAPDATA;
typedef struct _DDHAL_CANCREATEVPORTDATA DDHAL_CANCREATEVPORTDATA;
typedef struct _DDHAL_DDPALETTECALLBACKS DDHAL_DDPALETTECALLBACKS;
typedef struct _DDHAL_DDSURFACECALLBACKS DDHAL_DDSURFACECALLBACKS;
typedef struct _DDHAL_DESTROYDDLOCALDATA DDHAL_DESTROYDDLOCALDATA;
typedef struct _DDHAL_DESTROYPALETTEDATA DDHAL_DESTROYPALETTEDATA;
typedef struct _DDHAL_DESTROYSURFACEDATA DDHAL_DESTROYSURFACEDATA;
typedef struct _DDHAL_DRVSETCOLORKEYDATA DDHAL_DRVSETCOLORKEYDATA;
typedef struct _DDHAL_ENDMOCOMPFRAMEDATA DDHAL_ENDMOCOMPFRAMEDATA;
typedef struct _DDHAL_GETDRIVERSTATEDATA DDHAL_GETDRIVERSTATEDATA;
typedef struct _DDHAL_GETMOCOMPGUIDSDATA DDHAL_GETMOCOMPGUIDSDATA;
typedef struct _DDHAL_GETVPORTSIGNALDATA DDHAL_GETVPORTSIGNALDATA;
typedef struct _DDRAWI_DDRAWSURFACE_MORE DDRAWI_DDRAWSURFACE_MORE;
typedef struct _DD_COLORCONTROLCALLBACKS DD_COLORCONTROLCALLBACKS;
typedef struct _DD_GETINTERNALMOCOMPDATA DD_GETINTERNALMOCOMPDATA;
typedef struct _DD_GETMOCOMPCOMPBUFFDATA DD_GETMOCOMPCOMPBUFFDATA;
typedef struct _DD_GETVPORTBANDWIDTHDATA DD_GETVPORTBANDWIDTHDATA;
typedef struct _DD_QUERYMOCOMPSTATUSDATA DD_QUERYMOCOMPSTATUSDATA;
typedef struct _DECRYPTION_STATUS_BUFFER DECRYPTION_STATUS_BUFFER;
typedef struct _DMUS_WAVES_REVERB_PARAMS DMUS_WAVES_REVERB_PARAMS;
typedef struct _DRIVE_LAYOUT_INFORMATION DRIVE_LAYOUT_INFORMATION;
typedef struct _HIDP_EXTENDED_ATTRIBUTES HIDP_EXTENDED_ATTRIBUTES;
struct ICurrentWorkingDirectory {struct ICurrentWorkingDirectoryVtbl *lpVtbl;};
struct IDirectDrawSurfaceKernel {struct IDirectDrawSurfaceKernelVtbl *lpVtbl;};
struct IDirectMusicPortDownload {struct IDirectMusicPortDownloadVtbl *lpVtbl;};
struct IDirectSoundCaptureFXAec {struct IDirectSoundCaptureFXAecVtbl *lpVtbl;};
struct IDirectSoundFXCompressor {struct IDirectSoundFXCompressorVtbl *lpVtbl;};
struct IDirectSoundFXDistortion {struct IDirectSoundFXDistortionVtbl *lpVtbl;};
struct IInternetSecurityManager {struct IInternetSecurityManagerVtbl *lpVtbl;};
struct IInternetSecurityMgrSite {struct IInternetSecurityMgrSiteVtbl *lpVtbl;};
typedef struct _ImageArchitectureEntry IMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY;
struct IShellFavoritesNameSpace {struct IShellFavoritesNameSpaceVtbl *lpVtbl;};
struct IShellIconOverlayManager {struct IShellIconOverlayManagerVtbl *lpVtbl;};
typedef struct _KERB_INTERACTIVE_PROFILE KERB_INTERACTIVE_PROFILE;
typedef struct _KERB_SETPASSWORD_REQUEST KERB_SETPASSWORD_REQUEST;
typedef struct _KERB_TICKET_UNLOCK_LOGON KERB_TICKET_UNLOCK_LOGON;
typedef struct _C9C4D03C150E869FFC5FB33A10EAB149 KSAUDIO_PREFERRED_STATUS;
typedef struct _1889F3BAB83DF1AC38A4E0627115688D KSPIN_PHYSICALCONNECTION;
typedef struct _BC7A094E99B893F962A170A802EFE988 KSPROPERTY_MEMBERSHEADER;
typedef struct _BA718A362089753A7EB60B21429558A7 KSPROPERTY_STEPPING_LONG;
typedef struct _E4D39CEDA60A9A842177218EB3078B88 KSPROPERTY_TUNER_INPUT_S;
typedef struct _E21F85AFDEE9EAF37885ADBF8938BB0C KSSTREAMALLOCATOR_STATUS;
typedef struct tagKS_DATARANGE_ANALOGVIDEO KS_DATARANGE_ANALOGVIDEO;
typedef struct tagKS_DATARANGE_BDA_ANTENNA KS_DATARANGE_BDA_ANTENNA;
typedef struct tagKS_DATARANGE_MPEG1_VIDEO KS_DATARANGE_MPEG1_VIDEO;
typedef struct tagKS_DATARANGE_MPEG2_VIDEO KS_DATARANGE_MPEG2_VIDEO;
typedef struct _BIDI_REQUEST_CONTAINER *LPBIDI_REQUEST_CONTAINER;
typedef struct _D3DHAL_DP2TRIANGLELIST *LPD3DHAL_DP2TRIANGLELIST;
typedef struct _DDHAL_COLORCONTROLDATA *LPDDHAL_COLORCONTROLDATA;
typedef struct _DDHAL_CREATEMOCOMPDATA *LPDDHAL_CREATEMOCOMPDATA;
typedef struct _DDHAL_DESTROYVPORTDATA *LPDDHAL_DESTROYVPORTDATA;
typedef struct _DDHAL_GETBLTSTATUSDATA *LPDDHAL_GETBLTSTATUSDATA;
typedef struct _DDHAL_GETVPORTLINEDATA *LPDDHAL_GETVPORTLINEDATA;
typedef struct _DDHAL_RENDERMOCOMPDATA *LPDDHAL_RENDERMOCOMPDATA;
typedef struct _DDRAWI_DDVIDEOPORT_INT *LPDDRAWI_DDVIDEOPORT_INT;
typedef struct _DDRAWI_DDVIDEOPORT_LCL *LPDDRAWI_DDVIDEOPORT_LCL;
typedef struct IDirect3DVolumeTexture8 *LPDIRECT3DVOLUMETEXTURE8;
typedef struct IDirectDrawColorControl *LPDIRECTDRAWCOLORCONTROL;
typedef struct IDirectDrawGammaControl *LPDIRECTDRAWGAMMACONTROL;
typedef struct IDirectSound3DListener *LPDIRECTSOUND3DLISTENER8;
typedef struct IDirectSoundFullDuplex *LPDIRECTSOUNDFULLDUPLEX8;
typedef struct _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;
typedef struct tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW *LPMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW *LPMCI_OVLY_WINDOW_PARMSW;
typedef struct tagNMDATETIMEFORMATQUERYA *LPNMDATETIMEFORMATQUERYA;
typedef struct tagNMDATETIMEFORMATQUERYW *LPNMDATETIMEFORMATQUERYW;
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
typedef struct _PRINTER_NOTIFY_OPTIONS *LPPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOROPENDATA *LPPRINTPROCESSOROPENDATA;
typedef struct _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W *LPPRINTPROCESSOR_INFO_1W;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
typedef struct _RSVP_FILTERSPEC_V4_GPI *LPRSVP_FILTERSPEC_V4_GPI;
typedef struct _RSVP_FILTERSPEC_V6_GPI *LPRSVP_FILTERSPEC_V6_GPI;
typedef struct _SERVICE_STATUS_PROCESS *LPSERVICE_STATUS_PROCESS;
typedef struct _SERVICE_TYPE_INFO_ABSA *LPSERVICE_TYPE_INFO_ABSA;
typedef struct _SERVICE_TYPE_INFO_ABSW *LPSERVICE_TYPE_INFO_ABSW;
typedef struct _WIN_TRUST_SUBJECT_FILE *LPWIN_TRUST_SUBJECT_FILE;
enum MACRO_ACM_FILTERDETAILSF {ACM_FILTERDETAILSF_INDEX = 0x0,ACM_FILTERDETAILSF_FILTER = 0x1,ACM_FILTERDETAILSF_QUERYMASK = 0xF,ACM_FILTERENUMF_DWFILTERTAG = 0x10000,};
enum MACRO_ACM_FORMATDETAILSF {ACM_FORMATDETAILSF_INDEX = 0x0,ACM_FORMATDETAILSF_FORMAT = 0x1,ACM_FORMATDETAILSF_QUERYMASK = 0xF,ACM_FORMATENUMF_WFORMATTAG = 0x10000,ACM_FORMATENUMF_NCHANNELS = 0x20000,ACM_FORMATENUMF_NSAMPLESPERSEC = 0x40000,ACM_FORMATENUMF_WBITSPERSAMPLE = 0x80000,ACM_FORMATENUMF_CONVERT = 0x100000,ACM_FORMATENUMF_SUGGEST = 0x200000,ACM_FORMATENUMF_HARDWARE = 0x400000,ACM_FORMATENUMF_INPUT = 0x800000,ACM_FORMATENUMF_OUTPUT = 0x1000000,ACM_FORMATSUGGESTF_WFORMATTAG = 0x10000,ACM_FORMATSUGGESTF_NCHANNELS = 0x20000,ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 0x40000,ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 0x80000,ACM_FORMATSUGGESTF_TYPEMASK = 0xFF0000,};
enum MACRO_ACTIVATION_CONTEXT {ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1,ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2,ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3,ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4,ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5,ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6,ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7,ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8,ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9,};
enum MACRO_CERT_E_UNTRUSTEDCA {CERT_E_UNTRUSTEDCA = 0x800B0112,CERT_E_INVALID_POLICY = 0x800B0113,CERT_E_INVALID_NAME = 0x800B0114,};
enum MACRO_COMPRESSION_FORMAT {COMPRESSION_FORMAT_SPARSE = 0x4000,};
enum MACRO_CREATE_NEW_PROCESS {CREATE_NEW_PROCESS_GROUP = 0x200,CREATE_UNICODE_ENVIRONMENT = 0x400,CREATE_SEPARATE_WOW_VDM = 0x800,CREATE_SHARED_WOW_VDM = 0x1000,CREATE_FORCEDOS = 0x2000,};
enum MACRO_CRYPTPROTECTMEMORY {CRYPTPROTECTMEMORY_BLOCK_SIZE = 16,CRYPTPROTECTMEMORY_SAME_PROCESS = 0,CRYPTPROTECTMEMORY_CROSS_PROCESS = 1,CRYPTPROTECTMEMORY_SAME_LOGON = 2,};
enum MACRO_D3DPROCESSVERTICES {D3DPROCESSVERTICES_TRANSFORMLIGHT = 0x0,D3DPROCESSVERTICES_TRANSFORM = 0x1,D3DPROCESSVERTICES_COPY = 0x2,D3DPROCESSVERTICES_OPMASK = 0x7,D3DPROCESSVERTICES_UPDATEEXTENTS = 0x8,D3DPROCESSVERTICES_NOCOLOR = 0x10,};
enum MACRO_DISPATCH_CONSTRUCT {DISPATCH_CONSTRUCT = 0x4000,};
enum MACRO_DTN_DATETIMECHANGE {DTN_DATETIMECHANGE = -759,DTN_USERSTRINGA = -758,DTN_USERSTRINGW = -745,DTN_USERSTRING = -758,DTN_WMKEYDOWNA = -757,DTN_WMKEYDOWNW = -744,DTN_WMKEYDOWN = -757,DTN_FORMATA = -756,DTN_FORMATW = -743,DTN_FORMAT = -756,DTN_FORMATQUERYA = -755,DTN_FORMATQUERYW = -742,DTN_FORMATQUERY = -755,DTN_DROPDOWN = -754,DTN_CLOSEUP = -753,};
enum MACRO_ENCODING_TYPE_MASK {CERT_ENCODING_TYPE_MASK = 0xFFFF,CMSG_ENCODING_TYPE_MASK = 0xFFFF0000,};
enum MACRO_GDICOMMENT_UNICODE {GDICOMMENT_UNICODE_STRING = 0x40,GDICOMMENT_UNICODE_END = 0x80,};
enum MACRO_GETSETPAPERMETRICS {GETSETPAPERMETRICS = 35,};
enum MACRO_GETSETSCREENPARAMS {GETSETSCREENPARAMS = 3072,};
enum MACRO_GETVECTORBRUSHSIZE {GETVECTORBRUSHSIZE = 27,};
enum MACRO_HARDWARE_INTERRUPT {HARDWARE_INTERRUPT_STORM = 0xF2,};
enum MACRO_INSUFFICIENT_SPACE {INSUFFICIENT_SPACE_TO_COPY = 0xA,};
enum MACRO_INVALID_HIBERNATED {INVALID_HIBERNATED_STATE = 0xBD,};
enum MACRO_I_CHILDRENCALLBACK {I_CHILDRENCALLBACK = -1,};
enum MACRO_KSPROPERTY_SUPPORT {KSPROPERTY_SUPPORT_GET = 1,KSPROPERTY_SUPPORT_SET = 2,};
enum MACRO_LVM_GETSUBITEMRECT {LVM_GETSUBITEMRECT = 4152,LVM_SUBITEMHITTEST = 4153,LVM_SETCOLUMNORDERARRAY = 4154,LVM_GETCOLUMNORDERARRAY = 4155,LVM_SETHOTITEM = 4156,LVM_GETHOTITEM = 4157,LVM_SETHOTCURSOR = 4158,LVM_GETHOTCURSOR = 4159,LVM_APPROXIMATEVIEWRECT = 4160,};
enum MACRO_LVM_SETCOLUMNWIDTH {LVM_SETCOLUMNWIDTH = 4126,LVM_GETHEADER = 4127,LVM_CREATEDRAGIMAGE = 4129,LVM_GETVIEWRECT = 4130,LVM_GETTEXTCOLOR = 4131,LVM_SETTEXTCOLOR = 4132,LVM_GETTEXTBKCOLOR = 4133,LVM_SETTEXTBKCOLOR = 4134,LVM_GETTOPINDEX = 4135,LVM_GETCOUNTPERPAGE = 4136,LVM_GETORIGIN = 4137,LVM_UPDATE = 4138,LVM_SETITEMSTATE = 4139,LVM_GETITEMSTATE = 4140,LVM_GETITEMTEXTA = 4141,LVM_GETITEMTEXTW = 4211,LVM_GETITEMTEXT = 4141,LVM_SETITEMTEXTA = 4142,LVM_SETITEMTEXTW = 4212,LVM_SETITEMTEXT = 4142,};
enum MACRO_MANUALLY_INITIATED {MANUALLY_INITIATED_CRASH1 = 0xDEADDEAD,};
enum MACRO_MAXIMUM_ENCRYPTION {MAXIMUM_ENCRYPTION_VALUE = 0x4,};
enum MACRO_MAXIMUM_PROCESSORS {MAXIMUM_PROCESSORS = 32,};
enum MACRO_MAX_PSUIPAGEINSERT {MAX_PSUIPAGEINSERT_INDEX = 5,};
enum MACRO_MIXER_GETLINEINFOF {MIXER_GETLINEINFOF_DESTINATION = 0x0,MIXER_GETLINEINFOF_SOURCE = 0x1,MIXER_GETLINEINFOF_LINEID = 0x2,MIXER_GETLINEINFOF_COMPONENTTYPE = 0x3,MIXER_GETLINEINFOF_TARGETTYPE = 0x4,MIXER_GETLINEINFOF_QUERYMASK = 0xF,};
enum MACRO_MMIO_DEFAULTBUFFER {MMIO_DEFAULTBUFFER = 8192,};
enum MACRO_MS_NOTSYSTEMMEMORY {MS_NOTSYSTEMMEMORY = 0x1,MS_SHAREDACCESS = 0x2,};
enum MACRO_SERVICE_BESTEFFORT {SERVICE_BESTEFFORT = 0x80010000,SERVICE_CONTROLLEDLOAD = 0x80020000,SERVICE_GUARANTEED = 0x80040000,SERVICE_QUALITATIVE = 0x80200000,SERVICE_NO_TRAFFIC_CONTROL = 0x81000000,SERVICE_NO_QOS_SIGNALING = 0x40000000,};
enum MACRO_SSF_SHOWALLOBJECTS {SSF_SHOWALLOBJECTS = 0x1,SSF_SHOWEXTENSIONS = 0x2,SSF_HIDDENFILEEXTS = 0x4,SSF_SERVERADMINUI = 0x4,SSF_SHOWCOMPCOLOR = 0x8,SSF_SORTCOLUMNS = 0x10,SSF_SHOWSYSFILES = 0x20,SSF_DOUBLECLICKINWEBVIEW = 0x80,SSF_SHOWATTRIBCOL = 0x100,SSF_DESKTOPHTML = 0x200,SSF_WIN95CLASSIC = 0x400,SSF_DONTPRETTYPATH = 0x800,SSF_SHOWINFOTIP = 0x2000,SSF_MAPNETDRVBUTTON = 0x1000,SSF_NOCONFIRMRECYCLE = 0x8000,SSF_HIDEICONS = 0x4000,SSF_FILTER = 0x10000,SSF_WEBVIEW = 0x20000,SSF_SHOWSUPERHIDDEN = 0x40000,SSF_SEPPROCESS = 0x80000,SSF_NONETCRAWLING = 0x100000,SSF_STARTPANELON = 0x200000,SSF_SHOWSTARTPAGE = 0x400000,};
enum MACRO_TBN_GETBUTTONINFOA {TBN_GETBUTTONINFOA = -700,TBN_BEGINDRAG = -701,TBN_ENDDRAG = -702,TBN_BEGINADJUST = -703,TBN_ENDADJUST = -704,TBN_RESET = -705,TBN_QUERYINSERT = -706,TBN_QUERYDELETE = -707,TBN_TOOLBARCHANGE = -708,TBN_CUSTHELP = -709,TBN_DROPDOWN = -710,TBN_GETOBJECT = -712,};
enum MACRO_TVN_ITEMEXPANDINGA {TVN_ITEMEXPANDINGA = -405,TVN_ITEMEXPANDINGW = -454,TVN_ITEMEXPANDEDA = -406,TVN_ITEMEXPANDEDW = -455,TVN_BEGINDRAGA = -407,TVN_BEGINDRAGW = -456,TVN_BEGINRDRAGA = -408,TVN_BEGINRDRAGW = -457,TVN_DELETEITEMA = -409,TVN_DELETEITEMW = -458,TVN_BEGINLABELEDITA = -410,TVN_BEGINLABELEDITW = -459,TVN_ENDLABELEDITA = -411,TVN_ENDLABELEDITW = -460,TVN_KEYDOWN = -412,TVN_GETINFOTIPA = -413,TVN_GETINFOTIPW = -414,TVN_SINGLEEXPAND = -415,};
enum MACRO_WAVE_INVALIDFORMAT {WAVE_INVALIDFORMAT = 0x0,WAVE_FORMAT_1M08 = 0x1,WAVE_FORMAT_1S08 = 0x2,WAVE_FORMAT_1M16 = 0x4,WAVE_FORMAT_1S16 = 0x8,WAVE_FORMAT_2M08 = 0x10,WAVE_FORMAT_2S08 = 0x20,WAVE_FORMAT_2M16 = 0x40,WAVE_FORMAT_2S16 = 0x80,WAVE_FORMAT_4M08 = 0x100,WAVE_FORMAT_4S08 = 0x200,WAVE_FORMAT_4M16 = 0x400,WAVE_FORMAT_4S16 = 0x800,WAVE_FORMAT_44M08 = 0x100,WAVE_FORMAT_44S08 = 0x200,WAVE_FORMAT_44M16 = 0x400,WAVE_FORMAT_44S16 = 0x800,WAVE_FORMAT_48M08 = 0x1000,WAVE_FORMAT_48S08 = 0x2000,WAVE_FORMAT_48M16 = 0x4000,WAVE_FORMAT_48S16 = 0x8000,WAVE_FORMAT_96M08 = 0x10000,WAVE_FORMAT_96S08 = 0x20000,WAVE_FORMAT_96M16 = 0x40000,WAVE_FORMAT_96S16 = 0x80000,WAVE_FORMAT_PCM = 0x1,};
enum MACRO_grfdexPropExtraAll {grfdexPropExtraAll = 192,};
typedef struct _MEMORY_BASIC_INFORMATION MEMORY_BASIC_INFORMATION;
typedef struct _MIB_IPMCAST_MFE_STATS_EX MIB_IPMCAST_MFE_STATS_EX;
typedef struct _MIDL_STUBLESS_PROXY_INFO MIDL_STUBLESS_PROXY_INFO;
typedef struct _MSV1_0_INTERACTIVE_LOGON MSV1_0_INTERACTIVE_LOGON;
typedef struct _NEGOTIATE_PACKAGE_PREFIX NEGOTIATE_PACKAGE_PREFIX;
typedef struct _OUTPUT_DEBUG_STRING_INFO OUTPUT_DEBUG_STRING_INFO;
typedef struct _ADDRESS_LIST_DESCRIPTOR *PADDRESS_LIST_DESCRIPTOR;
typedef struct _PARTITION_INFORMATION_EX PARTITION_INFORMATION_EX;
typedef struct _E031005FF5EB1AE848321EA608394D98 *PBATTERY_REPORTING_SCALE;
typedef struct _BDA_TEMPLATE_CONNECTION *PBDA_TEMPLATE_CONNECTION;
typedef struct _BIDI_RESPONSE_CONTAINER *PBIDI_RESPONSE_CONTAINER;
typedef struct _5C0C72291B37B22FE700A61795928759 *PBULK_SECURITY_TEST_DATA;
typedef struct _CERT_ACCESS_DESCRIPTION *PCERT_ACCESS_DESCRIPTION;
typedef struct _CERT_X942_DH_PARAMETERS *PCERT_X942_DH_PARAMETERS;
typedef struct _CHANGER_EXCHANGE_MEDIUM *PCHANGER_EXCHANGE_MEDIUM;
typedef struct tagCInterfaceProxyVtbl *PCInterfaceProxyVtblList;
typedef struct _CMC_ADD_ATTRIBUTES_INFO *PCMC_ADD_ATTRIBUTES_INFO;
typedef struct _CMC_ADD_EXTENSIONS_INFO *PCMC_ADD_EXTENSIONS_INFO;
typedef struct _CMC_TAGGED_CERT_REQUEST *PCMC_TAGGED_CERT_REQUEST;
typedef struct _CMC_TAGGED_CONTENT_INFO *PCMC_TAGGED_CONTENT_INFO;
typedef struct _CMSG_CMS_RECIPIENT_INFO *PCMSG_CMS_RECIPIENT_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO;
typedef struct _284877062F9D14F112F3A0D6BC9583DD *PCREATE_USN_JOURNAL_DATA;
typedef struct _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_DEFUSAGE *PCRYPT_PROVIDER_DEFUSAGE;
typedef struct _CRYPT_PROVIDER_PRIVDATA *PCRYPT_PROVIDER_PRIVDATA;
typedef struct _CRYPT_REGISTER_ACTIONID *PCRYPT_REGISTER_ACTIONID;
typedef struct _CRYPT_RETRIEVE_AUX_INFO *PCRYPT_RETRIEVE_AUX_INFO;
typedef struct _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS;
typedef struct _DD_BEGINMOCOMPFRAMEDATA *PDD_BEGINMOCOMPFRAMEDATA;
typedef struct _DD_CANCREATESURFACEDATA *PDD_CANCREATESURFACEDATA;
typedef struct _DD_FLIPTOGDISURFACEDATA *PDD_FLIPTOGDISURFACEDATA;
typedef struct _DD_FREEDRIVERMEMORYDATA *PDD_FREEDRIVERMEMORYDATA;
typedef struct _DD_GETHEAPALIGNMENTDATA *PDD_GETHEAPALIGNMENTDATA;
typedef struct _DD_GETMOCOMPFORMATSDATA *PDD_GETMOCOMPFORMATSDATA;
typedef struct _DD_SETEXCLUSIVEMODEDATA *PDD_SETEXCLUSIVEMODEDATA;
typedef struct _DD_WAITFORVPORTSYNCDATA *PDD_WAITFORVPORTSYNCDATA;
typedef struct _9FEC9D2A03C37051BDB5508CF5CADF1F *PDELETE_USN_JOURNAL_DATA;
typedef struct tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM;
typedef struct _EnumImageStoreDATAtag *PENUMSHELLIMAGESTOREDATA;
typedef struct _PERF_INSTANCE_DEFINITION PERF_INSTANCE_DEFINITION;
typedef struct _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;
typedef struct _HTTPSPolicyCallbackData *PHTTPSPolicyCallbackData;
typedef struct _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;
typedef struct _KERB_SMART_CARD_PROFILE *PKERB_SMART_CARD_PROFILE;
typedef struct _2FCB7B16F35A994219C907239F9496DC *PKSAC3_ERROR_CONCEALMENT;
typedef struct _66CF5E28886A6CE6C0E44A3DF6E2CD53 *PKSAUDIO_COPY_PROTECTION;
typedef struct _48207AC35C517F533F0BE91ADB0B9FCA *PKSPROPERTY_TUNER_CAPS_S;
typedef struct _85CBE24E9ED55DBB779718CA5D73A273 *PKSPROPERTY_TUNER_MODE_S;
typedef struct _LSA_FOREST_TRUST_RECORD *PLSA_FOREST_TRUST_RECORD;
typedef struct _MSV1_0_SUBAUTH_RESPONSE *PMSV1_0_SUBAUTH_RESPONSE;
typedef struct _DCD76CF5A248684E95EEC87F56AA655C *PNTFS_VOLUME_DATA_BUFFER;
typedef struct _OFFLOAD_IPSEC_DELETE_SA *POFFLOAD_IPSEC_DELETE_SA;
typedef struct _POLICY_AUDIT_EVENTS_INFO POLICY_AUDIT_EVENTS_INFO;
typedef struct _POLICY_MODIFICATION_INFO POLICY_MODIFICATION_INFO;
typedef struct _PERF_COUNTER_DEFINITION *PPERF_COUNTER_DEFINITION;
typedef struct _POINTER_SEARCH_PHYSICAL *PPOINTER_SEARCH_PHYSICAL;
typedef struct _PROPSHEETUI_INFO_HEADER *PPROPSHEETUI_INFO_HEADER;
typedef struct _PRINTER_NOTIFY_INFO_DATA PRINTER_NOTIFY_INFO_DATA;
typedef struct _PROPSHEETUI_GETICON_INFO PROPSHEETUI_GETICON_INFO;
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 *PRPC_CLIENT_INFORMATION1;
typedef struct _SERVICE_TYPE_VALUE_ABSA *PSERVICE_TYPE_VALUE_ABSA;
typedef struct _SERVICE_TYPE_VALUE_ABSW *PSERVICE_TYPE_VALUE_ABSW;
typedef struct tagSHCSCHANGENOTIFYSTRUCT *PSMCSHCHANGENOTIFYSTRUCT;
typedef struct _SP_NEWDEVICEWIZARD_DATA *PSP_NEWDEVICEWIZARD_DATA;
typedef struct _SP_ORIGINAL_FILE_INFO_A *PSP_ORIGINAL_FILE_INFO_A;
typedef struct _SP_ORIGINAL_FILE_INFO_W *PSP_ORIGINAL_FILE_INFO_W;
typedef struct _STORAGE_PREDICT_FAILURE *PSTORAGE_PREDICT_FAILURE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _TRACE_GUID_REGISTRATION *PTRACE_GUID_REGISTRATION;
typedef struct _TRANSPORT_HEADER_OFFSET *PTRANSPORT_HEADER_OFFSET;
typedef struct _WINDBG_EXTENSION_APIS32 *PWINDBG_EXTENSION_APIS32;
typedef struct _WINDBG_EXTENSION_APIS64 *PWINDBG_EXTENSION_APIS64;
typedef struct tagWTSSESSION_NOTIFICATION *PWTSSESSION_NOTIFICATION;
typedef struct _REPARSE_GUID_DATA_BUFFER REPARSE_GUID_DATA_BUFFER;
typedef struct tagRID_DEVICE_INFO_KEYBOARD RID_DEVICE_INFO_KEYBOARD;
typedef void *RPC_AUTH_IDENTITY_HANDLE;
typedef struct tagRPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES_V1_A;
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W RPC_CALL_ATTRIBUTES_V1_W;
typedef void  RPC_SECURITY_CALLBACK_FN(void *Context);
typedef struct _SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONSW;
typedef struct _SID_IDENTIFIER_AUTHORITY SID_IDENTIFIER_AUTHORITY;
typedef struct tagSOLE_AUTHENTICATION_INFO SOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_LIST SOLE_AUTHENTICATION_LIST;
typedef struct _SP_DEVICE_INTERFACE_DATA SP_DEVICE_INTERFACE_DATA;
typedef struct _SP_DRVINFO_DETAIL_DATA_A SP_DRVINFO_DETAIL_DATA_A;
typedef struct _SP_DRVINFO_DETAIL_DATA_W SP_DRVINFO_DETAIL_DATA_W;
typedef struct _SP_PROPSHEETPAGE_REQUEST SP_PROPSHEETPAGE_REQUEST;
typedef struct _SP_SELECTDEVICE_PARAMS_A SP_SELECTDEVICE_PARAMS_A;
typedef struct _SP_SELECTDEVICE_PARAMS_W SP_SELECTDEVICE_PARAMS_W;
typedef struct _SP_UNREMOVEDEVICE_PARAMS SP_UNREMOVEDEVICE_PARAMS;
enum ShellWindowTypeConstants {SWC_EXPLORER = 0x0,SWC_BROWSER = 0x1,SWC_3RDPARTY = 0x2,SWC_CALLBACK = 0x4,};
typedef struct _TC_SUPPORTED_INFO_BUFFER TC_SUPPORTED_INFO_BUFFER;
typedef struct _TRUSTED_CONTROLLERS_INFO TRUSTED_CONTROLLERS_INFO;
typedef struct _TRUSTED_DOMAIN_NAME_INFO TRUSTED_DOMAIN_NAME_INFO;
typedef struct tag_CompileStatusInfo WBEM_COMPILE_STATUS_INFO;
typedef struct _WINDOWS_IRDA_DEVICE_INFO WINDOWS_IRDA_DEVICE_INFO;
struct WbemAuthenticatedLocator;
enum WbemObjectTextFormatEnum {wbemObjectTextFormatCIMDTD20 = 0x1,wbemObjectTextFormatWMIDTD20 = 0x2,};
struct _CERT_FORTEZZA_DATA_PROP {unsigned char SerialNumber[8];int CertIndex;unsigned char CertLabel[36];};
enum _HIDP_KEYBOARD_DIRECTION {HidP_Keyboard_Break = 0x0,HidP_Keyboard_Make = 0x1,};
struct _ImageArchitectureHeader {unsigned int AmaskValue : 1;int : 7;unsigned int AmaskShift : 8;int : 16;unsigned int FirstEntryRVA;};
enum _NDIS_DEVICE_POWER_STATE {NdisDeviceStateUnspecified = 0x0,NdisDeviceStateD0 = 0x1,NdisDeviceStateD1 = 0x2,NdisDeviceStateD2 = 0x3,NdisDeviceStateD3 = 0x4,NdisDeviceStateMaximum = 0x5,};
enum _NDIS_WAN_MEDIUM_SUBTYPE {NdisWanMediumHub = 0x0,NdisWanMediumX_25 = 0x1,NdisWanMediumIsdn = 0x2,NdisWanMediumSerial = 0x3,NdisWanMediumFrameRelay = 0x4,NdisWanMediumAtm = 0x5,NdisWanMediumSonet = 0x6,NdisWanMediumSW56K = 0x7,NdisWanMediumPPTP = 0x8,NdisWanMediumL2TP = 0x9,NdisWanMediumIrda = 0xA,NdisWanMediumParallel = 0xB,NdisWanMediumPppoe = 0xC,};
enum _POLICY_AUDIT_EVENT_TYPE {AuditCategorySystem = 0x0,AuditCategoryLogon = 0x1,AuditCategoryObjectAccess = 0x2,AuditCategoryPrivilegeUse = 0x3,AuditCategoryDetailedTracking = 0x4,AuditCategoryPolicyChange = 0x5,AuditCategoryAccountManagement = 0x6,AuditCategoryDirectoryServiceAccess = 0x7,AuditCategoryAccountLogon = 0x8,};
enum _ROUTER_CONNECTION_STATE {ROUTER_IF_STATE_UNREACHABLE = 0x0,ROUTER_IF_STATE_DISCONNECTED = 0x1,ROUTER_IF_STATE_CONNECTING = 0x2,ROUTER_IF_STATE_CONNECTED = 0x3,};
enum _TAPE_DRIVE_PROBLEM_TYPE {TapeDriveProblemNone = 0x0,TapeDriveReadWriteWarning = 0x1,TapeDriveReadWriteError = 0x2,TapeDriveReadWarning = 0x3,TapeDriveWriteWarning = 0x4,TapeDriveReadError = 0x5,TapeDriveWriteError = 0x6,TapeDriveHardwareError = 0x7,TapeDriveUnsupportedMedia = 0x8,TapeDriveScsiConnectionError = 0x9,TapeDriveTimetoClean = 0xA,TapeDriveCleanDriveNow = 0xB,TapeDriveMediaLifeExpired = 0xC,TapeDriveSnappedTape = 0xD,};
enum _TOKEN_INFORMATION_CLASS {TokenUser = 0x1,TokenGroups = 0x2,TokenPrivileges = 0x3,TokenOwner = 0x4,TokenPrimaryGroup = 0x5,TokenDefaultDacl = 0x6,TokenSource = 0x7,TokenType = 0x8,TokenImpersonationLevel = 0x9,TokenStatistics = 0xA,TokenRestrictedSids = 0xB,TokenSessionId = 0xC,TokenGroupsAndPrivileges = 0xD,TokenSessionReference = 0xE,TokenSandBoxInert = 0xF,TokenAuditPolicy = 0x10,TokenOrigin = 0x11,MaxTokenInfoClass = 0x12,};
enum __MIDL_ICodeInstall_0001 {CIP_DISK_FULL = 0x0,CIP_ACCESS_DENIED = 0x1,CIP_NEWER_VERSION_EXISTS = 0x2,CIP_OLDER_VERSION_EXISTS = 0x3,CIP_NAME_CONFLICT = 0x4,CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,CIP_UNSAFE_TO_ABORT = 0x7,CIP_NEED_REBOOT = 0x8,};
enum __MIDL_IMonikerProp_0001 {MIMETYPEPROP = 0x0,USE_SRC_URL = 0x1,};
enum __MIDL_IOleDocument_0001 {DOCMISC_CANCREATEMULTIPLEVIEWS = 0x1,DOCMISC_SUPPORTCOMPLEXRECTANGLES = 0x2,DOCMISC_CANTOPENEDIT = 0x4,DOCMISC_NOFILESUPPORT = 0x8,};
enum tag_WBEM_COMPARISON_FLAG {WBEM_COMPARISON_INCLUDE_ALL = 0x0,WBEM_FLAG_IGNORE_QUALIFIERS = 0x1,WBEM_FLAG_IGNORE_OBJECT_SOURCE = 0x2,WBEM_FLAG_IGNORE_DEFAULT_VALUES = 0x4,WBEM_FLAG_IGNORE_CLASS = 0x8,WBEM_FLAG_IGNORE_CASE = 0x10,WBEM_FLAG_IGNORE_FLAVOR = 0x20,};
enum tag_WBEM_CONNECT_OPTIONS {WBEM_FLAG_CONNECT_REPOSITORY_ONLY = 0x40,WBEM_FLAG_CONNECT_USE_MAX_WAIT = 0x80,WBEM_FLAG_CONNECT_PROVIDERS = 0x100,};
enum tag_WBEM_QUERY_FLAG_TYPE {WBEM_FLAG_DEEP = 0x0,WBEM_FLAG_SHALLOW = 0x1,WBEM_FLAG_PROTOTYPE = 0x2,};
enum tag_WBEM_REFRESHER_FLAGS {WBEM_FLAG_REFRESH_AUTO_RECONNECT = 0x0,WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT = 0x1,};
typedef struct _ADDRESS_LIST_DESCRIPTOR ADDRESS_LIST_DESCRIPTOR;
typedef struct _ALLOCATOR_PROPERTIES_EX ALLOCATOR_PROPERTIES_EX;
struct AlphabeticalCategorizer;
typedef struct _E031005FF5EB1AE848321EA608394D98 BATTERY_REPORTING_SCALE;
typedef struct _BDA_TEMPLATE_CONNECTION BDA_TEMPLATE_CONNECTION;
typedef struct _BIDI_RESPONSE_CONTAINER BIDI_RESPONSE_CONTAINER;
typedef struct _5C0C72291B37B22FE700A61795928759 BULK_SECURITY_TEST_DATA;
typedef struct _CERT_ACCESS_DESCRIPTION CERT_ACCESS_DESCRIPTION;
typedef struct _CERT_FORTEZZA_DATA_PROP CERT_FORTEZZA_DATA_PROP;
typedef struct _CERT_X942_DH_PARAMETERS CERT_X942_DH_PARAMETERS;
typedef struct _CHANGER_EXCHANGE_MEDIUM CHANGER_EXCHANGE_MEDIUM;
typedef struct _CMC_ADD_ATTRIBUTES_INFO CMC_ADD_ATTRIBUTES_INFO;
typedef struct _CMC_ADD_EXTENSIONS_INFO CMC_ADD_EXTENSIONS_INFO;
typedef struct _CMC_TAGGED_CERT_REQUEST CMC_TAGGED_CERT_REQUEST;
typedef struct _CMC_TAGGED_CONTENT_INFO CMC_TAGGED_CONTENT_INFO;
typedef struct _CMSG_CMS_RECIPIENT_INFO CMSG_CMS_RECIPIENT_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO CMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO CMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO CMSG_SIGNER_ENCODE_INFO;
typedef struct _284877062F9D14F112F3A0D6BC9583DD CREATE_USN_JOURNAL_DATA;
typedef struct creative_adpcmwaveformat_tag CREATIVEADPCMWAVEFORMAT;
typedef struct _CRYPT_HASH_MESSAGE_PARA CRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_DEFUSAGE CRYPT_PROVIDER_DEFUSAGE;
typedef struct _CRYPT_PROVIDER_PRIVDATA CRYPT_PROVIDER_PRIVDATA;
typedef struct _CRYPT_REGISTER_ACTIONID CRYPT_REGISTER_ACTIONID;
typedef struct _CRYPT_RETRIEVE_AUX_INFO CRYPT_RETRIEVE_AUX_INFO;
typedef struct _CRYPT_SIGN_MESSAGE_PARA CRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS CTL_VERIFY_USAGE_STATUS;
typedef struct _D3DHAL_DP2DRAWPRIMITIVE D3DHAL_DP2DRAWPRIMITIVE;
typedef struct _D3DHAL_DP2DRAWRECTPATCH D3DHAL_DP2DRAWRECTPATCH;
typedef struct _D3DHAL_DP2TRIANGLESTRIP D3DHAL_DP2TRIANGLESTRIP;
typedef struct _D3DHAL_DP2UPDATEPALETTE D3DHAL_DP2UPDATEPALETTE;
typedef struct _D3DHAL_GLOBALDRIVERDATA D3DHAL_GLOBALDRIVERDATA;
typedef struct _D3DHAL_SCENECAPTUREDATA D3DHAL_SCENECAPTUREDATA;
typedef struct _D3DNTHAL_DP2ADDDIRTYBOX D3DNTHAL_DP2ADDDIRTYBOX;
typedef struct _D3DNTHAL_DP2CREATELIGHT D3DNTHAL_DP2CREATELIGHT;
typedef struct _D3DNTHAL_DP2PIXELSHADER D3DNTHAL_DP2PIXELSHADER;
typedef struct _D3DNTHAL_DP2RENDERSTATE D3DNTHAL_DP2RENDERSTATE;
typedef struct _D3DNTHAL_DP2SETPRIORITY D3DNTHAL_DP2SETPRIORITY;
typedef struct _D3DNTHAL_DP2STARTVERTEX D3DNTHAL_DP2STARTVERTEX;
typedef struct _D3DNTHAL_DP2TRIANGLEFAN D3DNTHAL_DP2TRIANGLEFAN;
typedef struct _DDHAL_CREATEPALETTEDATA DDHAL_CREATEPALETTEDATA;
typedef struct _DDHAL_CREATESURFACEDATA DDHAL_CREATESURFACEDATA;
typedef struct _DDHAL_DDEXEBUFCALLBACKS DDHAL_DDEXEBUFCALLBACKS;
typedef struct _DDHAL_DDKERNELCALLBACKS DDHAL_DDKERNELCALLBACKS;
typedef struct _DDHAL_DESTROYDRIVERDATA DDHAL_DESTROYDRIVERDATA;
typedef struct _DDHAL_DESTROYMOCOMPDATA DDHAL_DESTROYMOCOMPDATA;
typedef struct _DDHAL_GETDRIVERINFODATA DDHAL_GETDRIVERINFODATA;
typedef struct _DDHAL_GETFLIPSTATUSDATA DDHAL_GETFLIPSTATUSDATA;
typedef struct _DDHAL_GETVPORTFIELDDATA DDHAL_GETVPORTFIELDDATA;
typedef struct _DDHAL_SYNCVIDEOPORTDATA DDHAL_SYNCVIDEOPORTDATA;
typedef struct _DDHAL_UPDATEOVERLAYDATA DDHAL_UPDATEOVERLAYDATA;
typedef struct _DDNT_GETDRIVERINFO2DATA DDNT_GETDRIVERINFO2DATA;
typedef struct _DDNT_GETFORMATCOUNTDATA DDNT_GETFORMATCOUNTDATA;
typedef struct _DDRAWI_DDMOTIONCOMP_INT DDRAWI_DDMOTIONCOMP_INT;
typedef struct _DDRAWI_DDMOTIONCOMP_LCL DDRAWI_DDMOTIONCOMP_LCL;
typedef struct _DDRAWI_DDRAWCLIPPER_GBL DDRAWI_DDRAWCLIPPER_GBL;
typedef struct _DDRAWI_DDRAWCLIPPER_INT DDRAWI_DDRAWCLIPPER_INT;
typedef struct _DDRAWI_DDRAWCLIPPER_LCL DDRAWI_DDRAWCLIPPER_LCL;
typedef struct _DDRAWI_DDRAWPALETTE_GBL DDRAWI_DDRAWPALETTE_GBL;
typedef struct _DDRAWI_DDRAWPALETTE_INT DDRAWI_DDRAWPALETTE_INT;
typedef struct _DDRAWI_DDRAWPALETTE_LCL DDRAWI_DDRAWPALETTE_LCL;
typedef struct _DDRAWI_DDRAWSURFACE_GBL DDRAWI_DDRAWSURFACE_GBL;
typedef struct _DDRAWI_DDRAWSURFACE_INT DDRAWI_DDRAWSURFACE_INT;
typedef struct _DDRAWI_DDRAWSURFACE_LCL DDRAWI_DDRAWSURFACE_LCL;
typedef struct _DD_BEGINMOCOMPFRAMEDATA DD_BEGINMOCOMPFRAMEDATA;
typedef struct _DD_CANCREATESURFACEDATA DD_CANCREATESURFACEDATA;
typedef struct _DD_FLIPTOGDISURFACEDATA DD_FLIPTOGDISURFACEDATA;
typedef struct _DD_FREEDRIVERMEMORYDATA DD_FREEDRIVERMEMORYDATA;
typedef struct _DD_GETHEAPALIGNMENTDATA DD_GETHEAPALIGNMENTDATA;
typedef struct _DD_GETMOCOMPFORMATSDATA DD_GETMOCOMPFORMATSDATA;
typedef struct _DD_SETEXCLUSIVEMODEDATA DD_SETEXCLUSIVEMODEDATA;
typedef struct _DD_WAITFORVPORTSYNCDATA DD_WAITFORVPORTSYNCDATA;
typedef struct _9FEC9D2A03C37051BDB5508CF5CADF1F DELETE_USN_JOURNAL_DATA;
struct DOMFreeThreadedDocument;
typedef struct tagEMRMODIFYWORLDTRANSFORM EMRMODIFYWORLDTRANSFORM;
typedef struct _EnumImageStoreDATAtag ENUMSHELLIMAGESTOREDATA;
typedef struct _EXIT_PROCESS_DEBUG_INFO EXIT_PROCESS_DEBUG_INFO;
typedef struct _FILE_NOTIFY_INFORMATION FILE_NOTIFY_INFORMATION;
typedef void *( *GENERIC_BINDING_ROUTINE)(void *);
typedef struct _HTTPSPolicyCallbackData HTTPSPolicyCallbackData;
struct IDirect3DVolumeTexture8 {struct IDirect3DVolumeTexture8Vtbl *lpVtbl;};
struct IDirectDrawColorControl {struct IDirectDrawColorControlVtbl *lpVtbl;};
struct IDirectDrawGammaControl {struct IDirectDrawGammaControlVtbl *lpVtbl;};
typedef IDirectMusicCollection IDirectMusicCollection8;
typedef IDirectMusicInstrument IDirectMusicInstrument8;
typedef struct _IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_OPTIONAL_HEADER IMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64;
enum IMPORT_OBJECT_NAME_TYPE {IMPORT_OBJECT_ORDINAL = 0x0,IMPORT_OBJECT_NAME = 0x1,IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,IMPORT_OBJECT_NAME_UNDECORATE = 0x3,};
struct IOleInPlaceActiveObject {struct IOleInPlaceActiveObjectVtbl *lpVtbl;};
struct IPassportClientServices {struct IPassportClientServicesVtbl *lpVtbl;};
struct IUserEventTimerCallback {struct IUserEventTimerCallbackVtbl *lpVtbl;};
struct IWbemConfigureRefresher {struct IWbemConfigureRefresherVtbl *lpVtbl;};
struct IWbemDecoupledRegistrar {struct IWbemDecoupledRegistrarVtbl *lpVtbl;};
struct IWbemUnsecuredApartment {struct IWbemUnsecuredApartmentVtbl *lpVtbl;};
struct IXMLDOMDocumentFragment {struct IXMLDOMDocumentFragmentVtbl *lpVtbl;};
typedef struct _KERB_SMART_CARD_PROFILE KERB_SMART_CARD_PROFILE;
typedef struct _2FCB7B16F35A994219C907239F9496DC KSAC3_ERROR_CONCEALMENT;
typedef struct _66CF5E28886A6CE6C0E44A3DF6E2CD53 KSAUDIO_COPY_PROTECTION;
typedef struct _48207AC35C517F533F0BE91ADB0B9FCA KSPROPERTY_TUNER_CAPS_S;
typedef struct _85CBE24E9ED55DBB779718CA5D73A273 KSPROPERTY_TUNER_MODE_S;
typedef struct _CMInvokeCommandInfoEx *LPCMINVOKECOMMANDINFOEX;
typedef struct _D3DHAL_DP2STARTVERTEX *LPD3DHAL_DP2STARTVERTEX;
typedef struct _D3DHAL_DP2TRIANGLEFAN *LPD3DHAL_DP2TRIANGLEFAN;
typedef struct _D3DHAL_DRAWPRIMCOUNTS *LPD3DHAL_DRAWPRIMCOUNTS;
typedef struct _D3DNTHALDeviceDesc_V1 *LPD3DNTHALDEVICEDESC_V1;
typedef struct _D3DNTHALDeviceDesc_V2 *LPD3DNTHALDEVICEDESC_V2;
typedef struct _DDHAL_CREATEVPORTDATA *LPDDHAL_CREATEVPORTDATA;
typedef struct _DDHAL_GETSCANLINEDATA *LPDDHAL_GETSCANLINEDATA;
typedef struct _DDHAL_SETCLIPLISTDATA *LPDDHAL_SETCLIPLISTDATA;
typedef struct _DDHAL_SETCOLORKEYDATA *LPDDHAL_SETCOLORKEYDATA;
typedef struct _DDHAL_SYNCSURFACEDATA *LPDDHAL_SYNCSURFACEDATA;
typedef struct _DDHAL_UPDATEVPORTDATA *LPDDHAL_UPDATEVPORTDATA;
typedef struct _DDRAWI_DIRECTDRAW_GBL *LPDDRAWI_DIRECTDRAW_GBL;
typedef struct _DDRAWI_DIRECTDRAW_INT *LPDDRAWI_DIRECTDRAW_INT;
typedef struct _DDRAWI_DIRECTDRAW_LCL *LPDDRAWI_DIRECTDRAW_LCL;
typedef struct IDirect3DVertexBuffer8 *LPDIRECT3DVERTEXBUFFER8;
typedef struct IDirectSound3DListener *LPDIRECTSOUND3DLISTENER;
typedef struct IDirectSoundFullDuplex *LPDIRECTSOUNDFULLDUPLEX;
typedef struct IDirectSoundFXFlanger *LPDIRECTSOUNDFXFLANGER8;
typedef struct IDirectSoundFXParamEq *LPDIRECTSOUNDFXPARAMEQ8;
typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;
typedef struct tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS;
typedef struct tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR;
typedef struct _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW;
typedef struct _SHChangeDWORDAsIDList *LPSHChangeDWORDAsIDList;
typedef struct _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;
typedef struct _TRANSMIT_FILE_BUFFERS *LPTRANSMIT_FILE_BUFFERS;
typedef struct _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;
typedef struct _LSA_FOREST_TRUST_RECORD LSA_FOREST_TRUST_RECORD;
enum MACRO_ACCESS_STICKYKEYS {ACCESS_STICKYKEYS = 0x1,ACCESS_FILTERKEYS = 0x2,ACCESS_MOUSEKEYS = 0x3,};
enum MACRO_ATTEMPTED_EXECUTE {ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY = 0xFC,};
enum MACRO_AllocatorStrategy {AllocatorStrategy_DontCare = 0,AllocatorStrategy_MinimizeNumberOfFrames = 1,AllocatorStrategy_MinimizeFrameSize = 2,AllocatorStrategy_MinimizeNumberOfAllocators = 4,AllocatorStrategy_MaximizeSpeed = 8,};
enum MACRO_BCN_HOTITEMCHANGE {BCN_HOTITEMCHANGE = 0xFFFFFB1F,};
enum MACRO_BUGCODE_PSS_CRASH {BUGCODE_PSS_CRASH_INIT = 0x4000008B,BUGCODE_PSS_CRASH_PROGRESS = 0x4000008C,BUGCODE_PSS_CRASH_DONE = 0x4000008D,};
enum MACRO_CALLBACK_TYPEMASK {CALLBACK_TYPEMASK = 0x70000,CALLBACK_NULL = 0x0,CALLBACK_WINDOW = 0x10000,CALLBACK_TASK = 0x20000,CALLBACK_FUNCTION = 0x30000,CALLBACK_THREAD = 0x20000,CALLBACK_EVENT = 0x50000,};
enum MACRO_CBEN_GETDISPINFOA {CBEN_GETDISPINFOA = -800,CBEN_INSERTITEM = -801,CBEN_DELETEITEM = -802,CBEN_BEGINEDIT = -804,CBEN_ENDEDITA = -805,CBEN_ENDEDITW = -806,CBEN_GETDISPINFOW = -807,CBEN_DRAGBEGINA = -808,CBEN_DRAGBEGINW = -809,CBEN_DRAGBEGIN = -808,CBEN_ENDEDIT = -805,};
enum MACRO_D3DSI_COMMENTSIZE {D3DSI_COMMENTSIZE_SHIFT = 16,D3DSI_COMMENTSIZE_MASK = 2147418112,};
enum MACRO_D3DTRANSFORMSTATE {D3DTRANSFORMSTATE_WORLD_DX7 = 1,D3DTRANSFORMSTATE_WORLD1_DX7 = 4,D3DTRANSFORMSTATE_WORLD2_DX7 = 5,D3DTRANSFORMSTATE_WORLD3_DX7 = 6,};
enum MACRO_D3DTSS_TEXTUREMAP {D3DTSS_TEXTUREMAP = 0,};
enum MACRO_DDHAL_PLEASEALLOC {DDHAL_PLEASEALLOC_USERMEM = 0x4,DDHAL_CB32_MAPMEMORY = 0x80000000,DDHAL_MISC2CB32_ALPHABLT = 0x1,DDHAL_CREATESURFACEEX_SWAPHANDLES = 0x1,DDHAL_NTCB32_FREEDRIVERMEMORY = 0x1,DDHAL_NTCB32_SETEXCLUSIVEMODE = 0x2,DDHAL_NTCB32_FLIPTOGDISURFACE = 0x4,DDHAL_VPORT32_GETAUTOFLIPSURF = 0x40,DDHAL_D3DBUFCB32_CANCREATED3DBUF = 0x1,DDHAL_D3DBUFCB32_CREATED3DBUF = 0x2,DDHAL_D3DBUFCB32_DESTROYD3DBUF = 0x4,DDHAL_D3DBUFCB32_LOCKD3DBUF = 0x8,DDHAL_D3DBUFCB32_UNLOCKD3DBUF = 0x10,DDHAL_PRIVATECAP_ATOMICSURFACECREATION = 0x1,DDHAL_PRIVATECAP_NOTIFYPRIMARYCREATION = 0x2,DDHAL_PRIVATECAP_RESERVED1 = 0x4,};
enum MACRO_DDRAWI_VPORTSTART {DDRAWI_VPORTSTART = 0x1,DDRAWI_VPORTSTOP = 0x2,DDRAWI_VPORTUPDATE = 0x3,DDRAWI_VPORTGETCOLOR = 0x1,DDRAWI_VPORTSETCOLOR = 0x2,DDRAWI_GETCOLOR = 0x1,DDRAWI_SETCOLOR = 0x2,};
enum MACRO_DDUNSUPPORTEDMODE {DDUNSUPPORTEDMODE = 4294967295,};
enum MACRO_DRIVER_HARDWAREID {DRIVER_HARDWAREID_RANK = 0xFFF,DRIVER_COMPATID_RANK = 0x3FFF,DRIVER_UNTRUSTED_RANK = 0x8000,DRIVER_UNTRUSTED_HARDWAREID_RANK = 0x8FFF,DRIVER_UNTRUSTED_COMPATID_RANK = 0xBFFF,DRIVER_W9X_SUSPECT_RANK = 0xC000,DRIVER_W9X_SUSPECT_HARDWAREID_RANK = 0xCFFF,DRIVER_W9X_SUSPECT_COMPATID_RANK = 0xFFFF,};
enum MACRO_ENABLEPAIRKERNING {ENABLEPAIRKERNING = 769,};
enum MACRO_GETPRINTINGOFFSET {GETPRINTINGOFFSET = 13,};
enum MACRO_GETSETPRINTORIENT {GETSETPRINTORIENT = 30,};
enum MACRO_GETTRACKKERNTABLE {GETTRACKKERNTABLE = 259,EXTTEXTOUT = 512,};
enum MACRO_HDN_ITEMCHANGINGA {HDN_ITEMCHANGINGA = -300,HDN_ITEMCHANGINGW = -320,HDN_ITEMCHANGEDA = -301,HDN_ITEMCHANGEDW = -321,HDN_ITEMCLICKA = -302,HDN_ITEMCLICKW = -322,HDN_ITEMDBLCLICKA = -303,HDN_ITEMDBLCLICKW = -323,HDN_DIVIDERDBLCLICKA = -305,HDN_DIVIDERDBLCLICKW = -325,HDN_BEGINTRACKA = -306,HDN_BEGINTRACKW = -326,HDN_ENDTRACKA = -307,HDN_ENDTRACKW = -327,HDN_TRACKA = -308,HDN_TRACKW = -328,HDN_GETDISPINFOA = -309,HDN_GETDISPINFOW = -329,HDN_BEGINDRAG = -310,HDN_ENDDRAG = -311,HDN_FILTERCHANGE = -312,HDN_FILTERBTNCLICK = -313,HDN_ITEMCHANGING = -300,HDN_ITEMCHANGED = -301,HDN_ITEMCLICK = -302,HDN_ITEMDBLCLICK = -303,HDN_DIVIDERDBLCLICK = -305,HDN_BEGINTRACK = -306,HDN_ENDTRACK = -307,HDN_TRACK = -308,HDN_GETDISPINFO = -309,};
enum MACRO_IDI_RESOURCEFIRST {IDI_RESOURCEFIRST = 159,IDI_RESOURCE = 159,IDI_RESOURCELAST = 161,IDI_RESOURCEOVERLAYFIRST = 161,IDI_RESOURCEOVERLAYLAST = 161,IDI_CONFLICT = 161,IDI_CLASSICON_OVERLAYFIRST = 500,IDI_CLASSICON_OVERLAYLAST = 502,IDI_PROBLEM_OVL = 500,IDI_DISABLED_OVL = 501,IDI_FORCED_OVL = 502,};
enum MACRO_IOCTL_DISK_DELETE {IOCTL_DISK_DELETE_DRIVE_LAYOUT = 0x7C100,IOCTL_DISK_UPDATE_PROPERTIES = 0x70140,IOCTL_DISK_FORMAT_DRIVE = 0x7C3CC,IOCTL_DISK_SENSE_DEVICE = 0x703E0,IOCTL_DISK_CHECK_VERIFY = 0x74800,IOCTL_DISK_MEDIA_REMOVAL = 0x74804,IOCTL_DISK_EJECT_MEDIA = 0x74808,IOCTL_DISK_LOAD_MEDIA = 0x7480C,IOCTL_DISK_RESERVE = 0x74810,IOCTL_DISK_RELEASE = 0x74814,IOCTL_DISK_FIND_NEW_DEVICES = 0x74818,IOCTL_DISK_GET_MEDIA_TYPES = 0x70C00,};
enum MACRO_LM20_MAXCOMMENTSZ {LM20_MAXCOMMENTSZ = 48,};
enum MACRO_LVM_SETINSERTMARK {LVM_SETINSERTMARK = 4262,LVM_GETINSERTMARK = 4263,LVM_INSERTMARKHITTEST = 4264,LVM_GETINSERTMARKRECT = 4265,LVM_SETINSERTMARKCOLOR = 4266,LVM_GETINSERTMARKCOLOR = 4267,LVM_SETINFOTIP = 4269,LVM_GETSELECTEDCOLUMN = 4270,LVM_ISGROUPVIEWENABLED = 4271,LVM_GETOUTLINECOLOR = 4272,LVM_SETOUTLINECOLOR = 4273,LVM_CANCELEDITLABEL = 4275,LVM_MAPINDEXTOID = 4276,LVM_MAPIDTOINDEX = 4277,LVM_SETBKIMAGE = 4164,LVM_GETBKIMAGE = 4165,};
enum MACRO_LogSevInformation {LogSevInformation = 0x0,LogSevWarning = 0x1,LogSevError = 0x2,};
enum MACRO_MAXIMUM_SUPPORTED {MAXIMUM_SUPPORTED_EXTENSION = 512,};
enum MACRO_MAXSTRETCHBLTMODE {MAXSTRETCHBLTMODE = 4,};
enum MACRO_MAX_INSTALLWIZARD {MAX_INSTALLWIZARD_DYNAPAGES = 20,};
enum MACRO_MEMORY_MANAGEMENT {MEMORY_MANAGEMENT = 0x1A,};
enum MACRO_NI_CONTEXTUPDATED {NI_CONTEXTUPDATED = 0x3,};
enum MACRO_PBT_APMBATTERYLOW {PBT_APMBATTERYLOW = 0x9,PBT_APMPOWERSTATUSCHANGE = 0xA,PBT_APMOEMEVENT = 0xB,PBT_APMRESUMEAUTOMATIC = 0x12,};
enum MACRO_PGN_HOTITEMCHANGE {PGN_HOTITEMCHANGE = -903,};
enum MACRO_RAS_MaxDeviceType {RAS_MaxDeviceType = 16,RAS_MaxPhoneNumber = 128,RAS_MaxIpAddress = 15,RAS_MaxIpxAddress = 21,RAS_MaxEntryName = 256,RAS_MaxDeviceName = 128,RAS_MaxCallbackNumber = 128,RAS_MaxAreaCode = 10,RAS_MaxPadType = 32,RAS_MaxX25Address = 200,RAS_MaxFacilities = 200,RAS_MaxUserData = 200,RAS_MaxReplyMessage = 1024,RAS_MaxDnsSuffix = 256,};
enum MACRO_SECURITY_PROTOCOL {SECURITY_PROTOCOL_NONE = 0x0,};
enum MACRO_SELECTPAPERSOURCE {SELECTPAPERSOURCE = 18,};
enum MACRO_SESSION_HAS_VALID {SESSION_HAS_VALID_VIEWS_ON_EXIT = 0xBA,};
enum MACRO_SHELLSTATEVERSION {SHELLSTATEVERSION_IE4 = 9,SHELLSTATEVERSION_WIN2K = 10,};
enum MACRO_SW_SCROLLCHILDREN {SW_SCROLLCHILDREN = 0x1,SW_INVALIDATE = 0x2,SW_ERASE = 0x4,SW_SMOOTHSCROLL = 0x10,};
enum MACRO_TBN_GETBUTTONINFO {TBN_GETBUTTONINFO = -700,};
enum MACRO_TBN_HOTITEMCHANGE {TBN_HOTITEMCHANGE = -713,TBN_DRAGOUT = -714,TBN_DELETINGBUTTON = -715,TBN_GETDISPINFOA = -716,TBN_GETDISPINFOW = -717,TBN_GETINFOTIPA = -718,TBN_GETINFOTIPW = -719,TBN_GETBUTTONINFOW = -720,TBN_RESTORE = -721,TBN_SAVE = -722,TBN_INITCUSTOMIZE = -723,};
enum MACRO_TB_GETBITMAPFLAGS {TB_GETBITMAPFLAGS = 1065,};
enum MACRO_TB_GETBUTTONINFOW {TB_GETBUTTONINFOW = 1087,TB_SETBUTTONINFOW = 1088,TB_GETBUTTONINFOA = 1089,TB_SETBUTTONINFOA = 1090,TB_GETBUTTONINFO = 1089,TB_SETBUTTONINFO = 1090,TB_INSERTBUTTONW = 1091,TB_ADDBUTTONSW = 1092,TB_HITTEST = 1093,TB_INSERTBUTTON = 1045,TB_ADDBUTTONS = 1044,TB_SETDRAWTEXTFLAGS = 1094,TB_GETSTRINGW = 1115,TB_GETSTRINGA = 1116,TB_GETSTRING = 1116,};
enum MACRO_UNEXPECTED_KERNEL {UNEXPECTED_KERNEL_MODE_TRAP = 0x7F,UNEXPECTED_KERNEL_MODE_TRAP_M = 0x1000007F,};
enum MACRO_URLACTION_ACTIVEX {URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 0x1201,URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 0x1202,URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 0x1203,URLACTION_SCRIPT_OVERRIDE_SAFETY = 0x1401,URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 0x1204,URLACTION_ACTIVEX_TREATASUNTRUSTED = 0x1205,URLACTION_ACTIVEX_NO_WEBOC_SCRIPT = 0x1206,URLACTION_ACTIVEX_CURR_MAX = 0x1206,URLACTION_ACTIVEX_MAX = 0x13FF,URLACTION_SCRIPT_MIN = 0x1400,URLACTION_SCRIPT_RUN = 0x1400,URLACTION_SCRIPT_JAVA_USE = 0x1402,URLACTION_SCRIPT_SAFE_ACTIVEX = 0x1405,URLACTION_CROSS_DOMAIN_DATA = 0x1406,URLACTION_SCRIPT_PASTE = 0x1407,URLACTION_SCRIPT_CURR_MAX = 0x1407,URLACTION_SCRIPT_MAX = 0x15FF,URLACTION_HTML_MIN = 0x1600,URLACTION_HTML_SUBMIT_FORMS = 0x1601,URLACTION_HTML_SUBMIT_FORMS_FROM = 0x1602,URLACTION_HTML_SUBMIT_FORMS_TO = 0x1603,URLACTION_HTML_FONT_DOWNLOAD = 0x1604,URLACTION_HTML_JAVA_RUN = 0x1605,URLACTION_HTML_USERDATA_SAVE = 0x1606,URLACTION_HTML_SUBFRAME_NAVIGATE = 0x1607,URLACTION_HTML_META_REFRESH = 0x1608,URLACTION_HTML_MIXED_CONTENT = 0x1609,URLACTION_HTML_MAX = 0x17FF,URLACTION_SHELL_MIN = 0x1800,URLACTION_SHELL_INSTALL_DTITEMS = 0x1800,URLACTION_SHELL_MOVE_OR_COPY = 0x1802,URLACTION_SHELL_FILE_DOWNLOAD = 0x1803,URLACTION_SHELL_VERB = 0x1804,URLACTION_SHELL_WEBVIEW_VERB = 0x1805,URLACTION_SHELL_SHELLEXECUTE = 0x1806,URLACTION_SHELL_CURR_MAX = 0x1806,URLACTION_SHELL_MAX = 0x19FF,URLACTION_NETWORK_MIN = 0x1A00,URLACTION_CREDENTIALS_USE = 0x1A00,};
enum MACRO_URLACTION_CHANNEL {URLACTION_CHANNEL_SOFTDIST_MAX = 0x1EFF,};
enum MACRO_URLACTION_COOKIES {URLACTION_COOKIES = 0x1A02,URLACTION_COOKIES_SESSION = 0x1A03,URLACTION_CLIENT_CERT_PROMPT = 0x1A04,URLACTION_COOKIES_THIRD_PARTY = 0x1A05,URLACTION_COOKIES_SESSION_THIRD_PARTY = 0x1A06,URLACTION_COOKIES_ENABLED = 0x1A10,URLACTION_NETWORK_CURR_MAX = 0x1A10,URLACTION_NETWORK_MAX = 0x1BFF,URLACTION_JAVA_MIN = 0x1C00,URLACTION_JAVA_PERMISSIONS = 0x1C00,};
enum MACRO_URLPOLICY_CHANNEL {URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 0x10000,URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 0x20000,URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 0x30000,};
enum MACRO_WC_COMPOSITECHECK {WC_COMPOSITECHECK = 0x200,WC_DISCARDNS = 0x10,WC_SEPCHARS = 0x20,WC_DEFAULTCHAR = 0x40,WC_NO_BEST_FIT_CHARS = 0x400,};
enum MACRO_WM_CTLCOLORMSGBOX {WM_CTLCOLORMSGBOX = 0x132,WM_CTLCOLOREDIT = 0x133,WM_CTLCOLORLISTBOX = 0x134,WM_CTLCOLORBTN = 0x135,WM_CTLCOLORDLG = 0x136,WM_CTLCOLORSCROLLBAR = 0x137,WM_CTLCOLORSTATIC = 0x138,};
enum MACRO_X509_UNICODE_NAME {X509_UNICODE_NAME_VALUE = 24,X509_ANY_STRING = 6,X509_UNICODE_ANY_STRING = 24,X509_OCTET_STRING = 25,X509_BITS = 26,X509_INTEGER = 27,X509_MULTI_BYTE_INTEGER = 28,X509_ENUMERATED = 29,X509_CHOICE_OF_TIME = 30,X509_AUTHORITY_KEY_ID2 = 31,X509_AUTHORITY_INFO_ACCESS = 32,X509_CRL_REASON_CODE = 29,};
enum MACRO_listtypeAVIHEADER {listtypeAVIHEADER = 1819436136,};
enum MACRO_listtypeAVIRECORD {listtypeAVIRECORD = 543384946,};
typedef struct _MSV1_0_SUBAUTH_RESPONSE MSV1_0_SUBAUTH_RESPONSE;
struct NDR_POINTER_QUEUE_STATE;
typedef struct _DCD76CF5A248684E95EEC87F56AA655C NTFS_VOLUME_DATA_BUFFER;
typedef struct _OFFLOAD_IPSEC_DELETE_SA OFFLOAD_IPSEC_DELETE_SA;
typedef struct _BDA_TEMPLATE_PIN_JOINT *PBDA_TEMPLATE_PIN_JOINT;
typedef struct _BIDI_REQUEST_CONTAINER *PBIDI_REQUEST_CONTAINER;
typedef struct _CERT_CHAIN_POLICY_PARA *PCERT_CHAIN_POLICY_PARA;
typedef struct _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS;
typedef struct _CERT_SYSTEM_STORE_INFO *PCERT_SYSTEM_STORE_INFO;
typedef struct _CHANGER_ELEMENT_STATUS *PCHANGER_ELEMENT_STATUS;
typedef struct tagCInterfaceStubVtbl *PCInterfaceStubVtblList;
typedef struct _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CONSOLE_SELECTION_INFO *PCONSOLE_SELECTION_INFO;
typedef struct _CRL_ISSUING_DIST_POINT *PCRL_ISSUING_DIST_POINT;
typedef struct _CRYPT_PRIVATE_KEY_INFO *PCRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY;
typedef struct _DD_CREATESURFACEEXDATA *PDD_CREATESURFACEEXDATA;
typedef struct _DD_GETVPORTCONNECTDATA *PDD_GETVPORTCONNECTDATA;
typedef DD_MOTIONCOMPCALLBACKS *PDD_MOTIONCOMPCALLBACKS;
typedef struct IDirect3DVolumeTexture8 *PDIRECT3DVOLUMETEXTURE8;
typedef struct _DISK_CACHE_INFORMATION *PDISK_CACHE_INFORMATION;
typedef struct _DISK_CONTROLLER_NUMBER *PDISK_CONTROLLER_NUMBER;
typedef struct _DOCUMENTPROPERTYHEADER *PDOCUMENTPROPERTYHEADER;
typedef struct tagCOLORCORRECTPALETTE *PEMRCOLORCORRECTPALETTE;
typedef struct tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT;
typedef struct _ENCRYPTION_CERTIFICATE *PENCRYPTION_CERTIFICATE;
typedef struct _PERF_COUNTER_DEFINITION PERF_COUNTER_DEFINITION;
typedef struct _EVENT_TRACE_PROPERTIES *PEVENT_TRACE_PROPERTIES;
typedef struct _FILEPATHS_SIGNERINFO_A *PFILEPATHS_SIGNERINFO_A;
typedef struct _FILEPATHS_SIGNERINFO_W *PFILEPATHS_SIGNERINFO_W;
typedef struct _FILE_IN_CABINET_INFO_A *PFILE_IN_CABINET_INFO_A;
typedef struct _FILE_IN_CABINET_INFO_W *PFILE_IN_CABINET_INFO_W;
typedef struct _FILE_SET_SPARSE_BUFFER *PFILE_SET_SPARSE_BUFFER;
typedef struct _GET_CHANGER_PARAMETERS *PGET_CHANGER_PARAMETERS;
typedef struct _GET_LENGTH_INFORMATION *PGET_LENGTH_INFORMATION;
typedef struct _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;
typedef struct ip_interface_name_info *PIP_INTERFACE_NAME_INFO;
typedef struct _KERB_INTERACTIVE_LOGON *PKERB_INTERACTIVE_LOGON;
typedef struct _KERB_TICKET_CACHE_INFO *PKERB_TICKET_CACHE_INFO;
typedef struct _E1D601DFB9F50A58CFF7A79389CE7A63 *PKSALLOCATOR_FRAMING_EX;
typedef struct _97BF4F75CC2B13E4CD29FCADBEF14990 *PKSAUDIO_CHANNEL_CONFIG;
typedef struct _FDD48878D337B9676F07B6A46EC3FECC *PKSAUDIO_STEREO_ENHANCE;
typedef struct _FB17C9225429EF808B128BCE70FFD0DB *PKSDS3D_HRTF_PARAMS_MSG;
typedef union _C9F2A16A1B5FC998B91DA494984E0FDB *PKSPROPERTY_BOUNDS_LONG;
typedef struct _155DA1A439C400442DF8DC3CA0B009F1 *PKSPROPERTY_DESCRIPTION;
typedef struct _3A744348A6C9F73853F568E19FD6B4F7 *PKS_AM_SimpleRateChange;
typedef struct tagKS_DATARANGE_VIDEO_VBI *PKS_DATARANGE_VIDEO_VBI;
typedef struct tagKS_TVTUNER_CHANGE_INFO *PKS_TVTUNER_CHANGE_INFO;
typedef struct tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW *PMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW *PMCI_OVLY_WINDOW_PARMSW;
typedef struct _E1FC672EFA0154DDDEED24E20FAA5FC7 *PMENUITEMTEMPLATEHEADER;
typedef struct _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;
typedef struct _MIB_MFE_STATS_TABLE_EX *PMIB_MFE_STATS_TABLE_EX;
typedef struct _MPEG2_TRANSPORT_STRIDE *PMPEG2_TRANSPORT_STRIDE;
typedef struct _MSV1_0_SUBAUTH_REQUEST *PMSV1_0_SUBAUTH_REQUEST;
typedef struct _NDIS_802_11_BSSID_LIST *PNDIS_802_11_BSSID_LIST;
typedef struct _NDIS_802_11_STATISTICS *PNDIS_802_11_STATISTICS;
typedef struct NDIS_BPC_FORCE_RECEIVE *PNDIS_BPC_FORCE_RECEIVE;
typedef struct NDIS_BPC_PROGRAM_GUIDE *PNDIS_BPC_PROGRAM_GUIDE;
typedef struct NDIS_CO_DEVICE_PROFILE *PNDIS_CO_DEVICE_PROFILE;
typedef struct _NDIS_PM_PACKET_PATTERN *PNDIS_PM_PACKET_PATTERN;
typedef struct _NDIS_WAN_PROTOCOL_CAPS *PNDIS_WAN_PROTOCOL_CAPS;
typedef struct _POINTER_SEARCH_PHYSICAL POINTER_SEARCH_PHYSICAL;
typedef struct _PLEX_READ_DATA_REQUEST *PPLEX_READ_DATA_REQUEST;
typedef struct _POLICY_DNS_DOMAIN_INFO *PPOLICY_DNS_DOMAIN_INFO;
typedef struct _POLICY_DOMAIN_EFS_INFO *PPOLICY_DOMAIN_EFS_INFO;
typedef struct _POLICY_PD_ACCOUNT_INFO *PPOLICY_PD_ACCOUNT_INFO;
typedef struct _PRINTER_NOTIFY_OPTIONS *PPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOROPENDATA *PPRINTPROCESSOROPENDATA;
typedef struct _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W *PPRINTPROCESSOR_INFO_1W;
typedef struct _PROCESSOR_POWER_POLICY *PPROCESSOR_POWER_POLICY;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _PROPSHEETUI_INFO_HEADER PROPSHEETUI_INFO_HEADER;
typedef struct _SERVICE_TYPE_INFO_ABSA *PSERVICE_TYPE_INFO_ABSA;
typedef struct _SERVICE_TYPE_INFO_ABSW *PSERVICE_TYPE_INFO_ABSW;
typedef struct _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;
typedef struct _SPC_FINANCIAL_CRITERIA *PSPC_FINANCIAL_CRITERIA;
typedef struct _SP_ALTPLATFORM_INFO_V1 *PSP_ALTPLATFORM_INFO_V1;
typedef struct _SP_ALTPLATFORM_INFO_V2 *PSP_ALTPLATFORM_INFO_V2;
typedef struct _SP_CLASSIMAGELIST_DATA *PSP_CLASSIMAGELIST_DATA;
typedef struct _SP_CLASSINSTALL_HEADER *PSP_CLASSINSTALL_HEADER;
typedef struct _SP_DETECTDEVICE_PARAMS *PSP_DETECTDEVICE_PARAMS;
typedef struct _SP_DEVINSTALL_PARAMS_A *PSP_DEVINSTALL_PARAMS_A;
typedef struct _SP_DEVINSTALL_PARAMS_W *PSP_DEVINSTALL_PARAMS_W;
typedef struct _SP_REMOVEDEVICE_PARAMS *PSP_REMOVEDEVICE_PARAMS;
typedef struct _A35FF47659D3E73F219744D22283F451 *PSYSAUDIO_INSTANCE_INFO;
typedef struct tcp_reserve_port_range *PTCP_RESERVE_PORT_RANGE;
typedef struct _WIN32_FIND_STREAM_DATA *PWIN32_FIND_STREAM_DATA;
typedef struct _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE;
typedef struct _QCMINFO_IDMAP_PLACEMENT QCMINFO_IDMAP_PLACEMENT;
enum RPC_ADDRESS_CHANGE_TYPE {PROTOCOL_NOT_LOADED = 0x1,PROTOCOL_LOADED = 0x2,PROTOCOL_ADDRESS_CHANGE = 0x3,};
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 RPC_CLIENT_INFORMATION1;
typedef struct tagRPC_EXTENDED_ERROR_INFO RPC_EXTENDED_ERROR_INFO;
typedef struct _RSVP_FILTERSPEC_V6_FLOW RSVP_FILTERSPEC_V6_FLOW;
struct SERVICE_STATUS_HANDLE__ {int unused;};
typedef struct _SERVICE_TYPE_VALUE_ABSA SERVICE_TYPE_VALUE_ABSA;
typedef struct _SERVICE_TYPE_VALUE_ABSW SERVICE_TYPE_VALUE_ABSW;
typedef struct _D5B338A135013580D3FC38360357E666 SHFOLDERCUSTOMSETTINGSA;
typedef struct _EC893833BD5056AD53916225206BDC9F SHFOLDERCUSTOMSETTINGSW;
typedef struct tagSHCSCHANGENOTIFYSTRUCT SMCSHCHANGENOTIFYSTRUCT;
typedef struct _SP_NEWDEVICEWIZARD_DATA SP_NEWDEVICEWIZARD_DATA;
typedef struct _SP_ORIGINAL_FILE_INFO_A SP_ORIGINAL_FILE_INFO_A;
typedef struct _SP_ORIGINAL_FILE_INFO_W SP_ORIGINAL_FILE_INFO_W;
typedef struct _STORAGE_PREDICT_FAILURE STORAGE_PREDICT_FAILURE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE SYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE SYSTEM_AUDIT_OBJECT_ACE;
enum SecureLockIconConstants {secureLockIconUnsecure = 0x0,secureLockIconMixed = 0x1,secureLockIconSecureUnknownBits = 0x2,secureLockIconSecure40Bit = 0x3,secureLockIconSecure56Bit = 0x4,secureLockIconSecureFortezza = 0x5,secureLockIconSecure128Bit = 0x6,};
typedef struct _TRACE_GUID_REGISTRATION TRACE_GUID_REGISTRATION;
typedef struct _TRANSPORT_HEADER_OFFSET TRANSPORT_HEADER_OFFSET;
typedef struct _WINDBG_EXTENSION_APIS32 WINDBG_EXTENSION_APIS32;
typedef struct _WINDBG_EXTENSION_APIS64 WINDBG_EXTENSION_APIS64;
typedef struct tagWTSSESSION_NOTIFICATION WTSSESSION_NOTIFICATION;
enum _D3DMATERIALCOLORSOURCE {D3DMCS_MATERIAL = 0x0,D3DMCS_COLOR1 = 0x1,D3DMCS_COLOR2 = 0x2,D3DMCS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVS_ADDRESSMODE_TYPE {D3DVS_ADDRMODE_ABSOLUTE = 0x0,D3DVS_ADDRMODE_RELATIVE = 0x2000,D3DVS_ADDRMODE_FORCE_DWORD = 0x7FFFFFFF,};
enum _GET_FILEEX_INFO_LEVELS {GetFileExInfoStandard = 0x0,GetFileExMaxInfoLevel = 0x1,};
enum _HEAP_INFORMATION_CLASS {HeapCompatibilityInformation = 0x0,};
enum _KERB_LOGON_SUBMIT_TYPE {KerbInteractiveLogon = 0x2,KerbSmartCardLogon = 0x6,KerbWorkstationUnlockLogon = 0x7,KerbSmartCardUnlockLogon = 0x8,KerbProxyLogon = 0x9,KerbTicketLogon = 0xA,KerbTicketUnlockLogon = 0xB,KerbS4ULogon = 0xC,};
enum _NDIS_802_11_POWER_MODE {Ndis802_11PowerModeCAM = 0x0,Ndis802_11PowerModeMAX_PSP = 0x1,Ndis802_11PowerModeFast_PSP = 0x2,Ndis802_11PowerModeMax = 0x3,};
enum _NDIS_802_11_WEP_STATUS {Ndis802_11WEPEnabled = 0x0,Ndis802_11WEPDisabled = 0x1,Ndis802_11WEPKeyAbsent = 0x2,Ndis802_11WEPNotSupported = 0x3,};
enum _NDIS_WAN_HEADER_FORMAT {NdisWanHeaderNative = 0x0,NdisWanHeaderEthernet = 0x1,};
enum _OFFLOAD_INTEGRITY_ALGO {OFFLOAD_IPSEC_INTEGRITY_NONE = 0x0,OFFLOAD_IPSEC_INTEGRITY_MD5 = 0x1,OFFLOAD_IPSEC_INTEGRITY_SHA = 0x2,OFFLOAD_IPSEC_INTEGRITY_MAX = 0x3,};
enum _POLICY_LSA_SERVER_ROLE {PolicyServerRoleBackup = 0x2,PolicyServerRolePrimary = 0x3,};
enum _RAS_HARDWARE_CONDITION {RAS_HARDWARE_OPERATIONAL = 0x0,RAS_HARDWARE_FAILURE = 0x1,};
enum _RPC_NOTIFICATION_TYPES {RpcNotificationTypeNone = 0x0,RpcNotificationTypeEvent = 0x1,RpcNotificationTypeApc = 0x2,RpcNotificationTypeIoc = 0x3,RpcNotificationTypeHwnd = 0x4,RpcNotificationTypeCallback = 0x5,};
struct _WINBASE_DEFINED_STRUCT {int dummy;};
enum _tagAUTOCOMPLETEOPTIONS {ACO_NONE = 0x0,ACO_AUTOSUGGEST = 0x1,ACO_AUTOAPPEND = 0x2,ACO_SEARCH = 0x4,ACO_FILTERPREFIXES = 0x8,ACO_USETAB = 0x10,ACO_UPDOWNKEYDROPSLIST = 0x20,ACO_RTLREADING = 0x40,};
enum tag_CIMTYPE_ENUMERATION {CIM_ILLEGAL = 0xFFF,CIM_EMPTY = 0x0,CIM_SINT8 = 0x10,CIM_UINT8 = 0x11,CIM_SINT16 = 0x2,CIM_UINT16 = 0x12,CIM_SINT32 = 0x3,CIM_UINT32 = 0x13,CIM_SINT64 = 0x14,CIM_UINT64 = 0x15,CIM_REAL32 = 0x4,CIM_REAL64 = 0x5,CIM_BOOLEAN = 0xB,CIM_STRING = 0x8,CIM_DATETIME = 0x65,CIM_REFERENCE = 0x66,CIM_CHAR16 = 0x67,CIM_OBJECT = 0xD,CIM_FLAG_ARRAY = 0x2000,};
enum tag_WBEM_PROVIDER_FLAGS {WBEM_FLAG_OWNER_UPDATE = 0x10000,};
enum tag_WBEM_SECURITY_FLAGS {WBEM_ENABLE = 0x1,WBEM_METHOD_EXECUTE = 0x2,WBEM_FULL_WRITE_REP = 0x4,WBEM_PARTIAL_WRITE_REP = 0x8,WBEM_WRITE_PROVIDER = 0x10,WBEM_REMOTE_ACCESS = 0x20,WBEM_RIGHT_SUBSCRIBE = 0x40,WBEM_RIGHT_PUBLISH = 0x80,};
enum tag_WBEM_SHUTDOWN_FLAGS {WBEM_SHUTDOWN_UNLOAD_COMPONENT = 0x1,WBEM_SHUTDOWN_WMI = 0x2,WBEM_SHUTDOWN_OS = 0x3,};
enum tag_WBEM_TEXT_FLAG_TYPE {WBEM_FLAG_NO_FLAVORS = 0x1,};
enum ATSCComponentTypeFlags {ATSCCT_AC3 = 0x1,};
typedef struct _BDA_TEMPLATE_PIN_JOINT BDA_TEMPLATE_PIN_JOINT;
typedef struct _BIDI_REQUEST_CONTAINER BIDI_REQUEST_CONTAINER;
typedef struct _CERT_CHAIN_POLICY_PARA CERT_CHAIN_POLICY_PARA;
typedef struct _CERT_REVOCATION_STATUS CERT_REVOCATION_STATUS;
typedef struct _CERT_SYSTEM_STORE_INFO CERT_SYSTEM_STORE_INFO;
typedef struct _CHANGER_ELEMENT_STATUS CHANGER_ELEMENT_STATUS;
typedef struct _CMSG_CTRL_DECRYPT_PARA CMSG_CTRL_DECRYPT_PARA;
typedef struct _CONSOLE_SELECTION_INFO CONSOLE_SELECTION_INFO;
typedef struct contres_vqlpcwaveformat_tag CONTRESVQLPCWAVEFORMAT;
typedef struct _CRL_ISSUING_DIST_POINT CRL_ISSUING_DIST_POINT;
typedef struct _CRYPT_PRIVATE_KEY_INFO CRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_SMIME_CAPABILITY CRYPT_SMIME_CAPABILITY;
typedef struct _D3DADAPTER_IDENTIFIER8 D3DADAPTER_IDENTIFIER8;
typedef struct _D3DHAL_D3DEXTENDEDCAPS D3DHAL_D3DEXTENDEDCAPS;
typedef struct _D3DHAL_DP2ADDDIRTYRECT D3DHAL_DP2ADDDIRTYRECT;
typedef struct _D3DHAL_DP2DRAWTRIPATCH D3DHAL_DP2DRAWTRIPATCH;
typedef struct _D3DHAL_DP2SETCLIPPLANE D3DHAL_DP2SETCLIPPLANE;
typedef struct _D3DHAL_DP2SETTRANSFORM D3DHAL_DP2SETTRANSFORM;
typedef struct _D3DHAL_DP2TRIANGLELIST D3DHAL_DP2TRIANGLELIST;
typedef struct _D3DHAL_DP2VERTEXSHADER D3DHAL_DP2VERTEXSHADER;
typedef struct _D3DHAL_DP2VIEWPORTINFO D3DHAL_DP2VIEWPORTINFO;
typedef struct _D3DHAL_RENDERSTATEDATA D3DHAL_RENDERSTATEDATA;
typedef struct _D3DHAL_TEXTURESWAPDATA D3DHAL_TEXTURESWAPDATA;
typedef struct _D3DNTHAL_DP2SETINDICES D3DNTHAL_DP2SETINDICES;
typedef struct _D3DNTHAL_DP2SETPALETTE D3DNTHAL_DP2SETPALETTE;
typedef struct _DDHAL_COLORCONTROLDATA DDHAL_COLORCONTROLDATA;
typedef struct _DDHAL_CREATEMOCOMPDATA DDHAL_CREATEMOCOMPDATA;
typedef struct _DDHAL_DESTROYVPORTDATA DDHAL_DESTROYVPORTDATA;
typedef struct _DDHAL_GETBLTSTATUSDATA DDHAL_GETBLTSTATUSDATA;
typedef struct _DDHAL_GETVPORTLINEDATA DDHAL_GETVPORTLINEDATA;
typedef struct _DDHAL_RENDERMOCOMPDATA DDHAL_RENDERMOCOMPDATA;
typedef struct _DDRAWI_DDVIDEOPORT_INT DDRAWI_DDVIDEOPORT_INT;
typedef struct _DDRAWI_DDVIDEOPORT_LCL DDRAWI_DDVIDEOPORT_LCL;
typedef struct _DD_CREATESURFACEEXDATA DD_CREATESURFACEEXDATA;
typedef struct _DD_GETVPORTCONNECTDATA DD_GETVPORTCONNECTDATA;
typedef struct _DISK_CACHE_INFORMATION DISK_CACHE_INFORMATION;
typedef struct _DISK_CONTROLLER_NUMBER DISK_CONTROLLER_NUMBER;
typedef struct _DOCUMENTPROPERTYHEADER DOCUMENTPROPERTYHEADER;
struct DShellFolderViewEvents {struct DShellFolderViewEventsVtbl *lpVtbl;};
typedef struct tagCOLORCORRECTPALETTE EMRCOLORCORRECTPALETTE;
typedef struct tagEMRCREATEBRUSHINDIRECT EMRCREATEBRUSHINDIRECT;
typedef struct _ENCRYPTION_CERTIFICATE ENCRYPTION_CERTIFICATE;
typedef struct _EVENT_TRACE_PROPERTIES EVENT_TRACE_PROPERTIES;
typedef struct _EXIT_THREAD_DEBUG_INFO EXIT_THREAD_DEBUG_INFO;
typedef struct _FILEPATHS_SIGNERINFO_A FILEPATHS_SIGNERINFO_A;
typedef struct _FILEPATHS_SIGNERINFO_W FILEPATHS_SIGNERINFO_W;
typedef struct _FILE_IN_CABINET_INFO_A FILE_IN_CABINET_INFO_A;
typedef struct _FILE_IN_CABINET_INFO_W FILE_IN_CABINET_INFO_W;
typedef struct _FILE_SET_SPARSE_BUFFER FILE_SET_SPARSE_BUFFER;
typedef struct fmtowns_snd_waveformat_tag FMTOWNS_SND_WAVEFORMAT;
typedef void ( *GENERIC_UNBIND_ROUTINE)(void *, unsigned char *);
typedef struct _GET_CHANGER_PARAMETERS GET_CHANGER_PARAMETERS;
typedef struct _GET_LENGTH_INFORMATION GET_LENGTH_INFORMATION;
struct IAsyncRpcChannelBuffer {struct IAsyncRpcChannelBufferVtbl *lpVtbl;};
struct IDirect3DVertexBuffer8 {struct IDirect3DVertexBuffer8Vtbl *lpVtbl;};
struct IDirectMusicCollection {struct IDirectMusicCollectionVtbl *lpVtbl;};
struct IDirectMusicInstrument {struct IDirectMusicInstrumentVtbl *lpVtbl;};
struct IDirectSound3DListener {struct IDirectSound3DListenerVtbl *lpVtbl;};
struct IDirectSoundFullDuplex {struct IDirectSoundFullDuplexVtbl *lpVtbl;};
struct IEncodingFilterFactory {struct IEncodingFilterFactoryVtbl *lpVtbl;};
typedef struct _IMAGE_EXPORT_DIRECTORY IMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 IMAGE_FUNCTION_ENTRY64;
typedef struct ip_interface_name_info IP_INTERFACE_NAME_INFO;
struct IReleaseMarshalBuffers {struct IReleaseMarshalBuffersVtbl *lpVtbl;};
struct IWbemAddressResolution {struct IWbemAddressResolutionVtbl *lpVtbl;};
struct IWbemUnboundObjectSink {struct IWbemUnboundObjectSinkVtbl *lpVtbl;};
struct IXMLDOMEntityReference {struct IXMLDOMEntityReferenceVtbl *lpVtbl;};
typedef struct _KERB_INTERACTIVE_LOGON KERB_INTERACTIVE_LOGON;
typedef struct _KERB_TICKET_CACHE_INFO KERB_TICKET_CACHE_INFO;
typedef struct _E1D601DFB9F50A58CFF7A79389CE7A63 KSALLOCATOR_FRAMING_EX;
typedef struct _97BF4F75CC2B13E4CD29FCADBEF14990 KSAUDIO_CHANNEL_CONFIG;
typedef struct _FDD48878D337B9676F07B6A46EC3FECC KSAUDIO_STEREO_ENHANCE;
typedef struct _FB17C9225429EF808B128BCE70FFD0DB KSDS3D_HRTF_PARAMS_MSG;
typedef union _C9F2A16A1B5FC998B91DA494984E0FDB KSPROPERTY_BOUNDS_LONG;
typedef struct _155DA1A439C400442DF8DC3CA0B009F1 KSPROPERTY_DESCRIPTION;
typedef struct _3A744348A6C9F73853F568E19FD6B4F7 KS_AM_SimpleRateChange;
typedef struct tagKS_DATARANGE_VIDEO_VBI KS_DATARANGE_VIDEO_VBI;
typedef struct tagKS_TVTUNER_CHANGE_INFO KS_TVTUNER_CHANGE_INFO;
typedef struct tACMFILTERTAGDETAILSA *LPACMFILTERTAGDETAILSA;
typedef struct tACMFILTERTAGDETAILSW *LPACMFILTERTAGDETAILSW;
typedef struct tACMFORMATTAGDETAILSA *LPACMFORMATTAGDETAILSA;
typedef struct tACMFORMATTAGDETAILSW *LPACMFORMATTAGDETAILSW;
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
typedef struct _D3DExecuteBufferDesc *LPD3DEXECUTEBUFFERDESC;
typedef struct _DDHAL_SETENTRIESDATA *LPDDHAL_SETENTRIESDATA;
typedef struct _DDHAL_SETPALETTEDATA *LPDDHAL_SETPALETTEDATA;
typedef struct _DDHAL_VPORTCOLORDATA *LPDDHAL_VPORTCOLORDATA;
typedef struct _DDNONLOCALVIDMEMCAPS *LPDDNONLOCALVIDMEMCAPS;
typedef struct _DDVIDEOPORTBANDWIDTH *LPDDVIDEOPORTBANDWIDTH;
typedef struct IDDVideoPortContainer *LPDDVIDEOPORTCONTAINER;
typedef struct IDirect3DBaseTexture8 *LPDIRECT3DBASETEXTURE8;
typedef struct IDirect3DCubeTexture8 *LPDIRECT3DCUBETEXTURE8;
typedef struct IDirect3DIndexBuffer8 *LPDIRECT3DINDEXBUFFER8;
typedef struct IDirectSound3DBuffer *LPDIRECTSOUND3DBUFFER8;
typedef struct IDirectSoundFXChorus *LPDIRECTSOUNDFXCHORUS8;
typedef struct IDirectSoundFXFlanger *LPDIRECTSOUNDFXFLANGER;
typedef struct IDirectSoundFXGargle *LPDIRECTSOUNDFXGARGLE8;
typedef struct IDirectSoundFXParamEq *LPDIRECTSOUNDFXPARAMEQ;
typedef IEnumConnectionPoints *LPENUMCONNECTIONPOINTS;
typedef IEnumOleDocumentViews *LPENUMOLEDOCUMENTVIEWS;
typedef struct _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW;
typedef struct _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;
typedef struct _FILEGROUPDESCRIPTORA *LPFILEGROUPDESCRIPTORA;
typedef struct _FILEGROUPDESCRIPTORW *LPFILEGROUPDESCRIPTORW;
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
typedef struct tagINITCOMMONCONTROLSEX *LPINITCOMMONCONTROLSEX;
typedef struct tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR;
typedef struct tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW *LPMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW *LPMCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW *LPMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW *LPMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW *LPMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW *LPMCI_WAVE_OPEN_PARMSW;
typedef struct _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT;
typedef struct tagNMDATETIMEWMKEYDOWNA *LPNMDATETIMEWMKEYDOWNA;
typedef struct tagNMDATETIMEWMKEYDOWNW *LPNMDATETIMEWMKEYDOWNW;
typedef struct _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW *LPPRINTER_ENUM_VALUESW;
typedef struct _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW;
typedef struct _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW;
typedef ISpecifyPropertyPages *LPSPECIFYPROPERTYPAGES;
typedef struct _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;
typedef struct _WSAServiceClassInfoA *LPWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *LPWSASERVICECLASSINFOW;
enum MACRO_ACCESS_MAX_MS_V5 {ACCESS_MAX_MS_V5_ACE_TYPE = 0x10,};
enum MACRO_ACMDRIVERDETAILS {ACMDRIVERDETAILS_SHORTNAME_CHARS = 32,ACMDRIVERDETAILS_LONGNAME_CHARS = 128,ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80,ACMDRIVERDETAILS_LICENSING_CHARS = 128,ACMDRIVERDETAILS_FEATURES_CHARS = 512,ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC = 1667528033,ACMDRIVERDETAILS_FCCCOMP_UNDEFINED = 0,ACMDRIVERDETAILS_SUPPORTF_CODEC = 1,ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2,ACMDRIVERDETAILS_SUPPORTF_FILTER = 4,ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8,ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16,ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824,ACMDRIVERDETAILS_SUPPORTF_DISABLED = -2147483648,};
enum MACRO_ACMFILTERDETAILS {ACMFILTERDETAILS_FILTER_CHARS = 128,};
enum MACRO_ACMFORMATDETAILS {ACMFORMATDETAILS_FORMAT_CHARS = 128,};
enum MACRO_APPCLASS_MONITOR {APPCLASS_MONITOR = 0x1,XTYP_MONITOR = 0x80F2,};
enum MACRO_CB_SETMINVISIBLE {CB_SETMINVISIBLE = 5889,CB_GETMINVISIBLE = 5890,};
enum MACRO_CERT_CHAIN_CACHE {CERT_CHAIN_CACHE_END_CERT = 0x1,CERT_CHAIN_THREAD_STORE_SYNC = 0x2,CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 0x4,CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 0x8,CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 0x10,CERT_CHAIN_ENABLE_SHARE_STORE = 0x20,CERT_TRUST_NO_ERROR = 0x0,CERT_TRUST_IS_NOT_TIME_VALID = 0x1,CERT_TRUST_IS_NOT_TIME_NESTED = 0x2,CERT_TRUST_IS_REVOKED = 0x4,CERT_TRUST_IS_NOT_SIGNATURE_VALID = 0x8,CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 0x10,CERT_TRUST_IS_UNTRUSTED_ROOT = 0x20,CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 0x40,CERT_TRUST_IS_CYCLIC = 0x80,CERT_TRUST_INVALID_EXTENSION = 0x100,CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 0x200,CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 0x400,CERT_TRUST_INVALID_NAME_CONSTRAINTS = 0x800,CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 0x1000,CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 0x2000,CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 0x4000,CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 0x8000,CERT_TRUST_IS_OFFLINE_REVOCATION = 0x1000000,CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 0x2000000,CERT_TRUST_IS_PARTIAL_CHAIN = 0x10000,CERT_TRUST_CTL_IS_NOT_TIME_VALID = 0x20000,CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 0x40000,CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 0x80000,CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 0x1,CERT_TRUST_HAS_KEY_MATCH_ISSUER = 0x2,CERT_TRUST_HAS_NAME_MATCH_ISSUER = 0x4,CERT_TRUST_IS_SELF_SIGNED = 0x8,CERT_TRUST_HAS_PREFERRED_ISSUER = 0x100,CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 0x200,CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 0x400,CERT_TRUST_IS_COMPLEX_CHAIN = 0x10000,};
enum MACRO_CONSOLE_TEXTMODE {CONSOLE_TEXTMODE_BUFFER = 1,CONSOLE_FULLSCREEN = 1,CONSOLE_FULLSCREEN_HARDWARE = 2,};
enum MACRO_CREATE_BREAKAWAY {CREATE_BREAKAWAY_FROM_JOB = 0x1000000,CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x2000000,CREATE_DEFAULT_ERROR_MODE = 0x4000000,CREATE_NO_WINDOW = 0x8000000,};
enum MACRO_CREATE_SUSPENDED {CREATE_SUSPENDED = 0x4,};
enum MACRO_D3DFVF_RESERVED1 {D3DFVF_RESERVED1 = 0x20,D3DFVF_VERTEX = 0x112,D3DFVF_LVERTEX = 0x1E2,D3DFVF_TLVERTEX = 0x1C4,};
enum MACRO_D3DLIGHTINGMODEL {D3DLIGHTINGMODEL_RGB = 0x1,D3DLIGHTINGMODEL_MONO = 0x2,};
enum MACRO_D3DPTADDRESSCAPS {D3DPTADDRESSCAPS_WRAP = 0x1,D3DPTADDRESSCAPS_MIRROR = 0x2,D3DPTADDRESSCAPS_CLAMP = 0x4,D3DPTADDRESSCAPS_BORDER = 0x8,D3DPTADDRESSCAPS_INDEPENDENTUV = 0x10,D3DPTADDRESSCAPS_MIRRORONCE = 0x20,};
enum MACRO_D3DTRANSFORMCAPS {D3DTRANSFORMCAPS_CLIP = 0x1,};
enum MACRO_DDNEWCALLBACKFNS {DDNEWCALLBACKFNS = 12,};
enum MACRO_DDPF_ALPHAPIXELS {DDPF_ALPHAPIXELS = 0x1,DDPF_ALPHA = 0x2,DDPF_PALETTEINDEXED4 = 0x8,DDPF_PALETTEINDEXEDTO8 = 0x10,DDPF_PALETTEINDEXED8 = 0x20,DDPF_RGB = 0x40,DDPF_COMPRESSED = 0x80,DDPF_RGBTOYUV = 0x100,DDPF_YUV = 0x200,DDPF_ZBUFFER = 0x400,DDPF_PALETTEINDEXED1 = 0x800,DDPF_PALETTEINDEXED2 = 0x1000,DDPF_ZPIXELS = 0x2000,DDPF_STENCILBUFFER = 0x4000,DDPF_ALPHAPREMULT = 0x8000,DDPF_LUMINANCE = 0x20000,DDPF_BUMPLUMINANCE = 0x40000,DDPF_BUMPDUDV = 0x80000,};
enum MACRO_DEVICE_REFERENCE {DEVICE_REFERENCE_COUNT_NOT_ZERO = 0x36,};
enum MACRO_DISPID_STARTENUM {DISPID_STARTENUM = -1,};
enum MACRO_DRIVER_CORRUPTED {DRIVER_CORRUPTED_MMPOOL = 0xD0,DRIVER_IRQL_NOT_LESS_OR_EQUAL = 0xD1,DRIVER_PORTION_MUST_BE_NONPAGED = 0xD3,};
enum MACRO_DSFX_I3DL2REVERB {DSFX_I3DL2REVERB_ROOM_MIN = -10000,DSFX_I3DL2REVERB_ROOM_MAX = 0,DSFX_I3DL2REVERB_ROOM_DEFAULT = -1000,DSFX_I3DL2REVERB_ROOMHF_MIN = -10000,DSFX_I3DL2REVERB_ROOMHF_MAX = 0,DSFX_I3DL2REVERB_ROOMHF_DEFAULT = -100,DSFX_I3DL2REVERB_REFLECTIONS_MIN = -10000,DSFX_I3DL2REVERB_REFLECTIONS_MAX = 1000,DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = -2602,DSFX_I3DL2REVERB_REVERB_MIN = -10000,DSFX_I3DL2REVERB_REVERB_MAX = 2000,DSFX_I3DL2REVERB_REVERB_DEFAULT = 200,DSFX_I3DL2REVERB_QUALITY_MIN = 0,DSFX_I3DL2REVERB_QUALITY_MAX = 3,DSFX_I3DL2REVERB_QUALITY_DEFAULT = 2,};
enum MACRO_ENUMPAPERMETRICS {ENUMPAPERMETRICS = 34,};
enum MACRO_EVENT_TRACE_TYPE {EVENT_TRACE_TYPE_LOAD = 0xA,EVENT_TRACE_TYPE_IO_READ = 0xA,EVENT_TRACE_TYPE_IO_WRITE = 0xB,EVENT_TRACE_TYPE_MM_TF = 0xA,EVENT_TRACE_TYPE_MM_DZF = 0xB,EVENT_TRACE_TYPE_MM_COW = 0xC,EVENT_TRACE_TYPE_MM_GPF = 0xD,EVENT_TRACE_TYPE_MM_HPF = 0xE,EVENT_TRACE_TYPE_SEND = 0xA,EVENT_TRACE_TYPE_RECEIVE = 0xB,EVENT_TRACE_TYPE_CONNECT = 0xC,EVENT_TRACE_TYPE_DISCONNECT = 0xD,EVENT_TRACE_TYPE_RETRANSMIT = 0xE,EVENT_TRACE_TYPE_ACCEPT = 0xF,EVENT_TRACE_TYPE_RECONNECT = 0x10,EVENT_TRACE_TYPE_GUIDMAP = 0xA,EVENT_TRACE_TYPE_CONFIG = 0xB,EVENT_TRACE_TYPE_SIDINFO = 0xC,EVENT_TRACE_TYPE_SECURITY = 0xD,EVENT_TRACE_TYPE_REGCREATE = 0xA,EVENT_TRACE_TYPE_REGOPEN = 0xB,EVENT_TRACE_TYPE_REGDELETE = 0xC,EVENT_TRACE_TYPE_REGQUERY = 0xD,EVENT_TRACE_TYPE_REGSETVALUE = 0xE,EVENT_TRACE_TYPE_REGDELETEVALUE = 0xF,EVENT_TRACE_TYPE_REGQUERYVALUE = 0x10,EVENT_TRACE_TYPE_REGENUMERATEKEY = 0x11,EVENT_TRACE_TYPE_REGENUMERATEVALUEKEY = 0x12,EVENT_TRACE_TYPE_REGQUERYMULTIPLEVALUE = 0x13,EVENT_TRACE_TYPE_REGSETINFORMATION = 0x14,EVENT_TRACE_TYPE_REGFLUSH = 0x15,EVENT_TRACE_TYPE_REGKCBDMP = 0x16,EVENT_TRACE_TYPE_CONFIG_CPU = 0xA,EVENT_TRACE_TYPE_CONFIG_PHYSICALDISK = 0xB,EVENT_TRACE_TYPE_CONFIG_LOGICALDISK = 0xC,EVENT_TRACE_TYPE_CONFIG_NIC = 0xD,EVENT_TRACE_TYPE_CONFIG_VIDEO = 0xE,EVENT_TRACE_TYPE_CONFIG_SERVICES = 0xF,EVENT_TRACE_TYPE_CONFIG_POWER = 0x10,EVENT_TRACE_FLAG_PROCESS = 0x1,EVENT_TRACE_FLAG_THREAD = 0x2,EVENT_TRACE_FLAG_IMAGE_LOAD = 0x4,EVENT_TRACE_FLAG_DISK_IO = 0x100,EVENT_TRACE_FLAG_DISK_FILE_IO = 0x200,EVENT_TRACE_FLAG_MEMORY_PAGE_FAULTS = 0x1000,EVENT_TRACE_FLAG_MEMORY_HARD_FAULTS = 0x2000,EVENT_TRACE_FLAG_NETWORK_TCPIP = 0x10000,EVENT_TRACE_FLAG_REGISTRY = 0x20000,EVENT_TRACE_FLAG_DBGPRINT = 0x40000,EVENT_TRACE_FLAG_EXTENSION = 0x80000000,EVENT_TRACE_FLAG_FORWARD_WMI = 0x40000000,EVENT_TRACE_FLAG_ENABLE_RESERVE = 0x20000000,EVENT_TRACE_FILE_MODE_NONE = 0x0,EVENT_TRACE_FILE_MODE_SEQUENTIAL = 0x1,EVENT_TRACE_FILE_MODE_CIRCULAR = 0x2,EVENT_TRACE_FILE_MODE_APPEND = 0x4,EVENT_TRACE_FILE_MODE_NEWFILE = 0x8,EVENT_TRACE_FILE_MODE_PREALLOCATE = 0x20,EVENT_TRACE_REAL_TIME_MODE = 0x100,EVENT_TRACE_DELAY_OPEN_FILE_MODE = 0x200,EVENT_TRACE_BUFFERING_MODE = 0x400,EVENT_TRACE_PRIVATE_LOGGER_MODE = 0x800,EVENT_TRACE_ADD_HEADER_MODE = 0x1000,EVENT_TRACE_USE_GLOBAL_SEQUENCE = 0x4000,EVENT_TRACE_USE_LOCAL_SEQUENCE = 0x8000,EVENT_TRACE_RELOG_MODE = 0x10000,EVENT_TRACE_USE_PAGED_MEMORY = 0x1000000,EVENT_TRACE_CONTROL_QUERY = 0x0,EVENT_TRACE_CONTROL_STOP = 0x1,EVENT_TRACE_CONTROL_UPDATE = 0x2,EVENT_TRACE_CONTROL_FLUSH = 0x3,};
enum MACRO_EXCEPTION_ACCESS {EXCEPTION_ACCESS_VIOLATION = 3221225477,EXCEPTION_DATATYPE_MISALIGNMENT = 2147483650,EXCEPTION_BREAKPOINT = 2147483651,EXCEPTION_SINGLE_STEP = 2147483652,EXCEPTION_ARRAY_BOUNDS_EXCEEDED = 3221225612,EXCEPTION_FLT_DENORMAL_OPERAND = 3221225613,EXCEPTION_FLT_DIVIDE_BY_ZERO = 3221225614,EXCEPTION_FLT_INEXACT_RESULT = 3221225615,EXCEPTION_FLT_INVALID_OPERATION = 3221225616,EXCEPTION_FLT_OVERFLOW = 3221225617,EXCEPTION_FLT_STACK_CHECK = 3221225618,EXCEPTION_FLT_UNDERFLOW = 3221225619,EXCEPTION_INT_DIVIDE_BY_ZERO = 3221225620,EXCEPTION_INT_OVERFLOW = 3221225621,EXCEPTION_PRIV_INSTRUCTION = 3221225622,EXCEPTION_IN_PAGE_ERROR = 3221225478,EXCEPTION_ILLEGAL_INSTRUCTION = 3221225501,EXCEPTION_NONCONTINUABLE_EXCEPTION = 3221225509,EXCEPTION_STACK_OVERFLOW = 3221225725,EXCEPTION_INVALID_DISPOSITION = 3221225510,EXCEPTION_GUARD_PAGE = 2147483649,EXCEPTION_INVALID_HANDLE = 3221225480,};
enum MACRO_FILE_COMPRESSION {FILE_COMPRESSION_NONE = 0,FILE_COMPRESSION_WINLZA = 1,FILE_COMPRESSION_MSZIP = 2,FILE_COMPRESSION_NTCAB = 3,};
enum MACRO_FILE_ENCRYPTABLE {FILE_ENCRYPTABLE = 0,FILE_IS_ENCRYPTED = 1,FILE_SYSTEM_ATTR = 2,FILE_ROOT_DIR = 3,FILE_SYSTEM_DIR = 4,FILE_UNKNOWN = 5,FILE_SYSTEM_NOT_SUPPORT = 6,FILE_USER_DISALLOWED = 7,FILE_READ_ONLY = 8,FILE_DIR_DISALLOWED = 9,};
enum MACRO_GETPAIRKERNTABLE {GETPAIRKERNTABLE = 258,};
enum MACRO_GETSCALINGFACTOR {GETSCALINGFACTOR = 14,};
enum MACRO_GETVECTORPENSIZE {GETVECTORPENSIZE = 26,};
enum MACRO_ICCOMPRESSFRAMES {ICCOMPRESSFRAMES_PADDING = 0x1,};
enum MACRO_INVALID_AFFINITY {INVALID_AFFINITY_SET = 0x3,INVALID_DATA_ACCESS_TRAP = 0x4,INVALID_PROCESS_ATTACH_ATTEMPT = 0x5,INVALID_PROCESS_DETACH_ATTEMPT = 0x6,INVALID_SOFTWARE_INTERRUPT = 0x7,};
enum MACRO_INVALID_FLOATING {INVALID_FLOATING_POINT_STATE = 0xE7,INVALID_CANCEL_OF_FILE_OPEN = 0xE8,};
enum MACRO_IPN_FIELDCHANGED {IPN_FIELDCHANGED = -860,};
enum MACRO_LVM_SETIMAGELIST {LVM_SETIMAGELIST = 4099,LVM_GETITEMCOUNT = 4100,};
enum MACRO_LVM_SETITEMCOUNT {LVM_SETITEMCOUNT = 4143,LVM_SORTITEMS = 4144,LVM_SETITEMPOSITION32 = 4145,LVM_GETSELECTEDCOUNT = 4146,LVM_GETITEMSPACING = 4147,LVM_GETISEARCHSTRINGA = 4148,LVM_GETISEARCHSTRINGW = 4213,LVM_GETISEARCHSTRING = 4148,LVM_SETICONSPACING = 4149,LVM_SETEXTENDEDLISTVIEWSTYLE = 4150,LVM_GETEXTENDEDLISTVIEWSTYLE = 4151,};
enum MACRO_LVM_SETWORKAREAS {LVM_SETWORKAREAS = 4161,LVM_GETWORKAREAS = 4166,LVM_GETNUMBEROFWORKAREAS = 4169,LVM_GETSELECTIONMARK = 4162,LVM_SETSELECTIONMARK = 4163,LVM_SETHOVERTIME = 4167,LVM_GETHOVERTIME = 4168,LVM_SETTOOLTIPS = 4170,LVM_GETTOOLTIPS = 4174,LVM_SORTITEMSEX = 4177,};
enum MACRO_LVN_ITEMCHANGING {LVN_ITEMCHANGING = -100,LVN_ITEMCHANGED = -101,LVN_INSERTITEM = -102,LVN_DELETEITEM = -103,LVN_DELETEALLITEMS = -104,LVN_BEGINLABELEDITA = -105,LVN_BEGINLABELEDITW = -175,LVN_ENDLABELEDITA = -106,LVN_ENDLABELEDITW = -176,LVN_COLUMNCLICK = -108,LVN_BEGINDRAG = -109,LVN_BEGINRDRAG = -111,LVN_ODCACHEHINT = -113,LVN_ODFINDITEMA = -152,LVN_ODFINDITEMW = -179,LVN_ITEMACTIVATE = -114,LVN_ODSTATECHANGED = -115,LVN_ODFINDITEM = -152,LVN_HOTTRACK = -121,LVN_GETDISPINFOA = -150,LVN_GETDISPINFOW = -177,LVN_SETDISPINFOA = -151,LVN_SETDISPINFOW = -178,LVN_BEGINLABELEDIT = -105,LVN_ENDLABELEDIT = -106,LVN_GETDISPINFO = -150,LVN_SETDISPINFO = -151,};
enum MACRO_LmCharSetUNICODE {LmCharSetUNICODE = 0xFF,};
enum MACRO_LogSevFatalError {LogSevFatalError = 0x3,LogSevMaximum = 0x4,};
enum MACRO_MACHINE_UNJOINED {MACHINE_UNJOINED = 0xC00037ED,};
enum MACRO_MARSHALINTERFACE {MARSHALINTERFACE_MIN = 500,};
enum MACRO_MAXGETHOSTSTRUCT {MAXGETHOSTSTRUCT = 1024,};
enum MACRO_MAX_COMPUTERNAME {MAX_COMPUTERNAME_LENGTH = 15,};
enum MACRO_MULTIFILEOPENORD {MULTIFILEOPENORD = 1537,};
enum MACRO_NEWFILEOPENV2ORD {NEWFILEOPENV2ORD = 1552,};
enum MACRO_PID_CONTROLPANEL {PID_CONTROLPANEL_CATEGORY = 2,PID_VOLUME_FREE = 2,PID_VOLUME_CAPACITY = 3,PID_VOLUME_FILESYSTEM = 4,PID_SHARE_CSC_STATUS = 2,PID_LINK_TARGET = 2,PID_QUERY_RANK = 2,};
enum MACRO_PRF_VERIFYEXISTS {PRF_VERIFYEXISTS = 0x1,PRF_TRYPROGRAMEXTENSIONS = 0x3,PRF_FIRSTDIRDEF = 0x4,PRF_DONTFINDLNK = 0x8,};
enum MACRO_PROPSHEETUI_INFO {PROPSHEETUI_INFO_VERSION = 0x100,};
enum MACRO_RBN_HEIGHTCHANGE {RBN_HEIGHTCHANGE = -831,RBN_GETOBJECT = -832,RBN_LAYOUTCHANGED = -833,RBN_AUTOSIZE = -834,RBN_BEGINDRAG = -835,RBN_ENDDRAG = -836,RBN_DELETINGBAND = -837,RBN_DELETEDBAND = -838,RBN_CHILDSIZE = -839,RBN_CHEVRONPUSHED = -841,RBN_MINMAX = -852,RBN_AUTOBREAK = -853,};
enum MACRO_SECURITY_CONTEXT {SECURITY_CONTEXT_TRACKING = 0x40000,SECURITY_EFFECTIVE_ONLY = 0x80000,SECURITY_SQOS_PRESENT = 0x100000,SECURITY_VALID_SQOS_FLAGS = 0x1F0000,};
enum MACRO_SECURITY_DYNAMIC {SECURITY_DYNAMIC_TRACKING = 1,SECURITY_STATIC_TRACKING = 0,};
enum MACRO_SERVICE_MULTIPLE {SERVICE_MULTIPLE = 0x1,};
enum MACRO_SERVICE_RESOURCE {SERVICE_RESOURCE = 0x1,SERVICE_SERVICE = 0x2,SERVICE_LOCAL = 0x4,SERVICE_REGISTER = 0x1,SERVICE_DEREGISTER = 0x2,SERVICE_FLUSH = 0x3,SERVICE_ADD_TYPE = 0x4,SERVICE_DELETE_TYPE = 0x5,SERVICE_FLAG_DEFER = 0x1,SERVICE_FLAG_HARD = 0x2,};
enum MACRO_SETALLJUSTVALUES {SETALLJUSTVALUES = 771,};
enum MACRO_SPCLPASSTHROUGH2 {SPCLPASSTHROUGH2 = 4568,};
enum MACRO_SW_PARENTCLOSING {SW_PARENTCLOSING = 1,SW_OTHERZOOM = 2,SW_PARENTOPENING = 3,SW_OTHERUNZOOM = 4,};
enum MACRO_TB_GETINSERTMARK {TB_GETINSERTMARK = 1103,TB_SETINSERTMARK = 1104,TB_INSERTMARKHITTEST = 1105,TB_MOVEBUTTON = 1106,TB_GETMAXSIZE = 1107,TB_SETEXTENDEDSTYLE = 1108,TB_GETEXTENDEDSTYLE = 1109,TB_GETPADDING = 1110,TB_SETPADDING = 1111,TB_SETINSERTMARKCOLOR = 1112,TB_GETINSERTMARKCOLOR = 1113,TB_SETCOLORSCHEME = 8194,TB_GETCOLORSCHEME = 8195,TB_SETUNICODEFORMAT = 8197,TB_GETUNICODEFORMAT = 8198,TB_MAPACCELERATORW = 1114,TB_MAPACCELERATOR = 1102,};
enum MACRO_THREAD_TERMINATE {THREAD_TERMINATE_HELD_MUTEX = 0x4000008A,};
enum MACRO_TRUST_E_EXPLICIT {TRUST_E_EXPLICIT_DISTRUST = 0x800B0111,};
enum MACRO_TTN_GETDISPINFOA {TTN_GETDISPINFOA = -520,TTN_GETDISPINFOW = -530,TTN_SHOW = -521,TTN_POP = -522,TTN_LINKCLICK = -523,TTN_GETDISPINFO = -520,TTN_NEEDTEXT = -520,TTN_NEEDTEXTA = -520,TTN_NEEDTEXTW = -530,};
enum MACRO_TVM_SETIMAGELIST {TVM_SETIMAGELIST = 4361,TVM_GETNEXTITEM = 4362,};
enum MACRO_TVN_GETDISPINFOA {TVN_GETDISPINFOA = -403,TVN_GETDISPINFOW = -452,TVN_SETDISPINFOA = -404,TVN_SETDISPINFOW = -453,};
enum MACRO_TVN_SELCHANGINGA {TVN_SELCHANGINGA = -401,TVN_SELCHANGINGW = -450,TVN_SELCHANGEDA = -402,TVN_SELCHANGEDW = -451,};
enum MACRO_VER_PRODUCTBUILD {VER_PRODUCTBUILD = 3790,VER_PRODUCTBUILD_QFE = 0,VER_PRODUCTMAJORVERSION = 5,VER_PRODUCTMINORVERSION = 2,VER_PRODUCTVERSION_DW = 84020942,VER_DEBUG = 0,VER_PRERELEASE = 0,VER_PRIVATE = 8,VER_FILEFLAGSMASK = 63,VER_FILEOS = 262148,VER_FILEFLAGS = 8,};
enum MACRO_VIDEO_EXTERNALIN {VIDEO_EXTERNALIN = 0x1,VIDEO_EXTERNALOUT = 0x2,VIDEO_IN = 0x4,VIDEO_OUT = 0x8,VIDEO_DLG_QUERY = 0x10,VIDEO_CONFIGURE_QUERY = 0x8000,VIDEO_CONFIGURE_SET = 0x1000,VIDEO_CONFIGURE_GET = 0x2000,VIDEO_CONFIGURE_QUERYSIZE = 0x1,VIDEO_CONFIGURE_CURRENT = 0x10,VIDEO_CONFIGURE_NOMINAL = 0x20,VIDEO_CONFIGURE_MIN = 0x40,VIDEO_CONFIGURE_MAX = 0x80,};
enum MACRO_WS_ACTIVECAPTION {WS_ACTIVECAPTION = 0x1,};
enum MACRO_X509_CERTIFICATE {X509_CERTIFICATE_TEMPLATE = 64,};
enum MACRO_ckidSTREAMFORMAT {ckidSTREAMFORMAT = 1718776947,};
enum MACRO_ckidSTREAMHEADER {ckidSTREAMHEADER = 1752331379,};
enum MACRO_grfdexPropCanAll {grfdexPropCanAll = 5397,grfdexPropCannotAll = 10794,};
enum MACRO_listtypeAVIMOVIE {listtypeAVIMOVIE = 1769369453,};
typedef struct tagMCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW MCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW MCI_OVLY_WINDOW_PARMSW;
typedef struct _E1FC672EFA0154DDDEED24E20FAA5FC7 MENUITEMTEMPLATEHEADER;
typedef struct _MESSAGE_RESOURCE_BLOCK MESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY MESSAGE_RESOURCE_ENTRY;
typedef struct _MIB_MFE_STATS_TABLE_EX MIB_MFE_STATS_TABLE_EX;
typedef struct _MPEG2_TRANSPORT_STRIDE MPEG2_TRANSPORT_STRIDE;
typedef struct _MSV1_0_SUBAUTH_REQUEST MSV1_0_SUBAUTH_REQUEST;
typedef struct _NDIS_802_11_BSSID_LIST NDIS_802_11_BSSID_LIST;
typedef struct _NDIS_802_11_STATISTICS NDIS_802_11_STATISTICS;
typedef struct _NDIS_PM_PACKET_PATTERN NDIS_PM_PACKET_PATTERN;
typedef struct _NDIS_WAN_PROTOCOL_CAPS NDIS_WAN_PROTOCOL_CAPS;
typedef struct tagNMDATETIMEFORMATQUERYA NMDATETIMEFORMATQUERYA;
typedef struct tagNMDATETIMEFORMATQUERYW NMDATETIMEFORMATQUERYW;
typedef struct nms_vbxadpcmmwaveformat_tag NMS_VBXADPCMWAVEFORMAT;
typedef struct _BDA_IPv4_ADDRESS_LIST *PBDA_IPv4_ADDRESS_LIST;
typedef struct _BDA_IPv6_ADDRESS_LIST *PBDA_IPv6_ADDRESS_LIST;
typedef struct _CERT_CRL_CONTEXT_PAIR *PCERT_CRL_CONTEXT_PAIR;
typedef struct _CREDENTIAL_ATTRIBUTEA *PCREDENTIAL_ATTRIBUTEA;
typedef struct _CREDENTIAL_ATTRIBUTEW *PCREDENTIAL_ATTRIBUTEW;
typedef struct _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_TRUST_REG_ENTRY *PCRYPT_TRUST_REG_ENTRY;
typedef struct _CRYPT_X942_OTHER_INFO *PCRYPT_X942_OTHER_INFO;
typedef struct _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA;
typedef struct _DD_CANCREATEVPORTDATA *PDD_CANCREATEVPORTDATA;
typedef struct _DD_DESTROYDDLOCALDATA *PDD_DESTROYDDLOCALDATA;
typedef struct _DD_DESTROYPALETTEDATA *PDD_DESTROYPALETTEDATA;
typedef struct _DD_DESTROYSURFACEDATA *PDD_DESTROYSURFACEDATA;
typedef struct _DD_DRVSETCOLORKEYDATA *PDD_DRVSETCOLORKEYDATA;
typedef struct _DD_ENDMOCOMPFRAMEDATA *PDD_ENDMOCOMPFRAMEDATA;
typedef struct _DD_GETDRIVERSTATEDATA *PDD_GETDRIVERSTATEDATA;
typedef struct _DD_GETMOCOMPGUIDSDATA *PDD_GETMOCOMPGUIDSDATA;
typedef struct _DD_GETVPORTSIGNALDATA *PDD_GETVPORTSIGNALDATA;
typedef struct _DD_NONLOCALVIDMEMCAPS *PDD_NONLOCALVIDMEMCAPS;
typedef DD_VIDEOPORTCALLBACKS *PDD_VIDEOPORTCALLBACKS;
typedef struct IDirect3DVertexBuffer8 *PDIRECT3DVERTEXBUFFER8;
typedef struct _DRIVER_UPGRADE_INFO_1 *PDRIVER_UPGRADE_INFO_1;
typedef struct _DRIVER_UPGRADE_INFO_2 *PDRIVER_UPGRADE_INFO_2;
typedef struct tagCOLORMATCHTOTARGET *PEMRCOLORMATCHTOTARGET;
typedef struct tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT;
typedef struct _EVENT_INSTANCE_HEADER *PEVENT_INSTANCE_HEADER;
typedef struct _FILESYSTEM_STATISTICS *PFILESYSTEM_STATISTICS;
typedef struct _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;
typedef struct _IP_MCAST_COUNTER_INFO *PIP_MCAST_COUNTER_INFO;
typedef struct ip_option_information *PIP_OPTION_INFORMATION;
typedef struct _KERB_DECRYPT_RESPONSE *PKERB_DECRYPT_RESPONSE;
typedef struct _KERB_SMART_CARD_LOGON *PKERB_SMART_CARD_LOGON;
typedef struct _FBE7179BAB40555F1A13AD3C5BC3BB71 *PKSAC3_ALTERNATE_AUDIO;
typedef struct _9ADD4811563784E97592213CBF8060F3 *PKSAC3_BIT_STREAM_MODE;
typedef struct _52AD6460DAD19A3D48443005CDCF2412 *PKSAUDIO_DYNAMIC_RANGE;
typedef struct _ECC65BA02B08F93DE1D3AD2A06446B79 *PKSDS3D_ITD_PARAMS_MSG;
typedef struct _BDE91A4D4766441856A2EB7036E539BD *PKSEVENT_TIME_INTERVAL;
typedef struct _B0BC4AADD5C9FF12157D028DEF0CCD6A *PKSTOPOLOGY_CONNECTION;
typedef struct _0606DB5FE2099CCDC829F33B29607B55 *PKSWAVETABLE_WAVE_DESC;
typedef struct _D63E714A239F9C0D1FE2D222C2E0E7D5 *PKS_AM_ExactRateChange;
typedef struct _PLEX_READ_DATA_REQUEST PLEX_READ_DATA_REQUEST;
typedef struct _LSA_OBJECT_ATTRIBUTES *PLSA_OBJECT_ATTRIBUTES;
typedef struct _LSA_TRUST_INFORMATION *PLSA_TRUST_INFORMATION;
typedef struct tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS;
typedef struct _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;
typedef struct _MIB_IPMCAST_MFE_STATS *PMIB_IPMCAST_MFE_STATS;
typedef struct _MIB_IPMCAST_OIF_STATS *PMIB_IPMCAST_OIF_STATS;
typedef struct _MSV1_0_NTLM3_RESPONSE *PMSV1_0_NTLM3_RESPONSE;
typedef struct _NDIS_BPC_ADAPTER_CAPS *PNDIS_BPC_ADAPTER_CAPS;
typedef struct _NDIS_IRDA_PACKET_INFO *PNDIS_IRDA_PACKET_INFO;
typedef struct _NDIS_PNP_CAPABILITIES *PNDIS_PNP_CAPABILITIES;
typedef struct _NDIS_STATISTICS_VALUE *PNDIS_STATISTICS_VALUE;
typedef struct _POLICY_DNS_DOMAIN_INFO POLICY_DNS_DOMAIN_INFO;
typedef struct _POLICY_DOMAIN_EFS_INFO POLICY_DOMAIN_EFS_INFO;
typedef struct _POLICY_PD_ACCOUNT_INFO POLICY_PD_ACCOUNT_INFO;
typedef struct _PARTITION_INFORMATION *PPARTITION_INFORMATION;
typedef struct _PAR_QUERY_INFORMATION *PPAR_QUERY_INFORMATION;
typedef struct tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR;
typedef struct _POLICY_AUDIT_LOG_INFO *PPOLICY_AUDIT_LOG_INFO;
typedef struct _PREVENT_MEDIA_REMOVAL *PPREVENT_MEDIA_REMOVAL;
typedef struct _PRINTPROCESSOR_CAPS_1 *PPRINTPROCESSOR_CAPS_1;
typedef struct _CBE416C4EAAA19179E77E4054907ADFF *PREAD_USN_JOURNAL_DATA;
typedef struct tagRID_DEVICE_INFO_MOUSE *PRID_DEVICE_INFO_MOUSE;
typedef struct _PRINTER_NOTIFY_OPTIONS PRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOROPENDATA PRINTPROCESSOROPENDATA;
typedef struct _PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W PRINTPROCESSOR_INFO_1W;
typedef struct _PROCESSOR_POWER_POLICY PROCESSOR_POWER_POLICY;
typedef struct _RPC_SECURITY_QOS_V2_A *PRPC_SECURITY_QOS_V2_A;
typedef struct _RPC_SECURITY_QOS_V2_W *PRPC_SECURITY_QOS_V2_W;
typedef struct _RPC_SECURITY_QOS_V3_A *PRPC_SECURITY_QOS_V3_A;
typedef struct _RPC_SECURITY_QOS_V3_W *PRPC_SECURITY_QOS_V3_W;
typedef struct _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;
typedef struct _SPC_SERIALIZED_OBJECT *PSPC_SERIALIZED_OBJECT;
typedef struct _SP_ENABLECLASS_PARAMS *PSP_ENABLECLASS_PARAMS;
typedef struct _SP_FILE_COPY_PARAMS_A *PSP_FILE_COPY_PARAMS_A;
typedef struct _SP_FILE_COPY_PARAMS_W *PSP_FILE_COPY_PARAMS_W;
typedef struct _SP_INSTALLWIZARD_DATA *PSP_INSTALLWIZARD_DATA;
typedef struct _STORAGE_DEVICE_NUMBER *PSTORAGE_DEVICE_NUMBER;
typedef struct _C8A55C2939C105561C2DA558734F3C5E *PSYSAUDIO_SELECT_GRAPH;
typedef struct _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;
typedef struct _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;
typedef struct _TRACE_GUID_PROPERTIES *PTRACE_GUID_PROPERTIES;
typedef struct _TRANSMIT_FILE_BUFFERS *PTRANSMIT_FILE_BUFFERS;
typedef struct _TRUSTED_PASSWORD_INFO *PTRUSTED_PASSWORD_INFO;
typedef struct _WINDBG_EXTENSION_APIS *PWINDBG_EXTENSION_APIS;
typedef struct WINTRUST_CATALOG_INFO_ *PWINTRUST_CATALOG_INFO;
typedef struct tagWNODE_EVENT_REFERENCE *PWNODE_EVENT_REFERENCE;
typedef struct tagWNODE_SINGLE_INSTANCE *PWNODE_SINGLE_INSTANCE;
struct PassportClientServices;
typedef struct _REMSECURITY_ATTRIBUTES REMSECURITY_ATTRIBUTES;
typedef struct _RSVP_FILTERSPEC_V4_GPI RSVP_FILTERSPEC_V4_GPI;
typedef struct _RSVP_FILTERSPEC_V6_GPI RSVP_FILTERSPEC_V6_GPI;
typedef struct _SERVICE_STATUS_PROCESS SERVICE_STATUS_PROCESS;
typedef struct _SERVICE_TYPE_INFO_ABSA SERVICE_TYPE_INFO_ABSA;
typedef struct _SERVICE_TYPE_INFO_ABSW SERVICE_TYPE_INFO_ABSW;
typedef struct _SE_IMPERSONATION_STATE SE_IMPERSONATION_STATE;
typedef struct _SPC_FINANCIAL_CRITERIA SPC_FINANCIAL_CRITERIA;
typedef struct _SP_ALTPLATFORM_INFO_V1 SP_ALTPLATFORM_INFO_V1;
typedef struct _SP_ALTPLATFORM_INFO_V2 SP_ALTPLATFORM_INFO_V2;
typedef struct _SP_CLASSIMAGELIST_DATA SP_CLASSIMAGELIST_DATA;
typedef struct _SP_CLASSINSTALL_HEADER SP_CLASSINSTALL_HEADER;
typedef struct _SP_DETECTDEVICE_PARAMS SP_DETECTDEVICE_PARAMS;
typedef struct _SP_DEVINSTALL_PARAMS_A SP_DEVINSTALL_PARAMS_A;
typedef struct _SP_DEVINSTALL_PARAMS_W SP_DEVINSTALL_PARAMS_W;
typedef struct _SP_REMOVEDEVICE_PARAMS SP_REMOVEDEVICE_PARAMS;
typedef struct _A35FF47659D3E73F219744D22283F451 SYSAUDIO_INSTANCE_INFO;
enum ShellFolderViewOptions {SFVVO_SHOWALLOBJECTS = 0x1,SFVVO_SHOWEXTENSIONS = 0x2,SFVVO_SHOWCOMPCOLOR = 0x8,SFVVO_SHOWSYSFILES = 0x20,SFVVO_WIN95CLASSIC = 0x40,SFVVO_DOUBLECLICKINWEBVIEW = 0x80,SFVVO_DESKTOPHTML = 0x200,};
typedef struct tcp_reserve_port_range TCP_RESERVE_PORT_RANGE;
struct UserEventTimerCallback;
typedef struct _WIN32_FIND_STREAM_DATA WIN32_FIND_STREAM_DATA;
typedef struct _WINBASE_DEFINED_STRUCT WINBASE_DEFINED_STRUCT;
typedef struct _WIN_TRUST_SUBJECT_FILE WIN_TRUST_SUBJECT_FILE;
enum WbemComparisonFlagEnum {wbemComparisonFlagIncludeAll = 0x0,wbemComparisonFlagIgnoreQualifiers = 0x1,wbemComparisonFlagIgnoreObjectSource = 0x2,wbemComparisonFlagIgnoreDefaultValues = 0x4,wbemComparisonFlagIgnoreClass = 0x8,wbemComparisonFlagIgnoreCase = 0x10,wbemComparisonFlagIgnoreFlavor = 0x20,};
enum WbemConnectOptionsEnum {wbemConnectFlagUseMaxWait = 0x80,};
struct WbemDecoupledRegistrar;
typedef struct _XMIT_ROUTINE_QUINTUPLE XMIT_ROUTINE_QUINTUPLE;
typedef struct yamaha_adpmcwaveformat_tag YAMAHA_ADPCMWAVEFORMAT;
enum _ACL_INFORMATION_CLASS {AclRevisionInformation = 0x1,AclSizeInformation = 0x2,};
enum _CM_ERROR_CONTROL_TYPE {IgnoreError = 0x0,NormalError = 0x1,SevereError = 0x2,CriticalError = 0x3,};
enum _D3DDEBUGMONITORTOKENS {D3DDMT_ENABLE = 0x0,D3DDMT_DISABLE = 0x1,D3DDMT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DNTHAL_DP2OPERATION {D3DNTDP2OP_POINTS = 0x1,D3DNTDP2OP_INDEXEDLINELIST = 0x2,D3DNTDP2OP_INDEXEDTRIANGLELIST = 0x3,D3DNTDP2OP_RESERVED0 = 0x4,D3DNTDP2OP_RENDERSTATE = 0x8,D3DNTDP2OP_LINELIST = 0xF,D3DNTDP2OP_LINESTRIP = 0x10,D3DNTDP2OP_INDEXEDLINESTRIP = 0x11,D3DNTDP2OP_TRIANGLELIST = 0x12,D3DNTDP2OP_TRIANGLESTRIP = 0x13,D3DNTDP2OP_INDEXEDTRIANGLESTRIP = 0x14,D3DNTDP2OP_TRIANGLEFAN = 0x15,D3DNTDP2OP_INDEXEDTRIANGLEFAN = 0x16,D3DNTDP2OP_TRIANGLEFAN_IMM = 0x17,D3DNTDP2OP_LINELIST_IMM = 0x18,D3DNTDP2OP_TEXTURESTAGESTATE = 0x19,D3DNTDP2OP_INDEXEDTRIANGLELIST2 = 0x1A,D3DNTDP2OP_INDEXEDLINELIST2 = 0x1B,D3DNTDP2OP_VIEWPORTINFO = 0x1C,D3DNTDP2OP_WINFO = 0x1D,D3DNTDP2OP_SETPALETTE = 0x1E,D3DNTDP2OP_UPDATEPALETTE = 0x1F,D3DNTDP2OP_ZRANGE = 0x20,D3DNTDP2OP_SETMATERIAL = 0x21,D3DNTDP2OP_SETLIGHT = 0x22,D3DNTDP2OP_CREATELIGHT = 0x23,D3DNTDP2OP_SETTRANSFORM = 0x24,D3DNTDP2OP_EXT = 0x25,D3DNTDP2OP_TEXBLT = 0x26,D3DNTDP2OP_STATESET = 0x27,D3DNTDP2OP_SETPRIORITY = 0x28,D3DNTDP2OP_SETRENDERTARGET = 0x29,D3DNTDP2OP_CLEAR = 0x2A,D3DNTDP2OP_SETTEXLOD = 0x2B,D3DNTDP2OP_SETCLIPPLANE = 0x2C,D3DNTDP2OP_CREATEVERTEXSHADER = 0x2D,D3DNTDP2OP_DELETEVERTEXSHADER = 0x2E,D3DNTDP2OP_SETVERTEXSHADER = 0x2F,D3DNTDP2OP_SETVERTEXSHADERCONST = 0x30,D3DNTDP2OP_SETSTREAMSOURCE = 0x31,D3DNTDP2OP_SETSTREAMSOURCEUM = 0x32,D3DNTDP2OP_SETINDICES = 0x33,D3DNTDP2OP_DRAWPRIMITIVE = 0x34,D3DNTDP2OP_DRAWINDEXEDPRIMITIVE = 0x35,D3DNTDP2OP_CREATEPIXELSHADER = 0x36,D3DNTDP2OP_DELETEPIXELSHADER = 0x37,D3DNTDP2OP_SETPIXELSHADER = 0x38,D3DNTDP2OP_SETPIXELSHADERCONST = 0x39,D3DNTDP2OP_CLIPPEDTRIANGLEFAN = 0x3A,D3DNTDP2OP_DRAWPRIMITIVE2 = 0x3B,D3DNTDP2OP_DRAWINDEXEDPRIMITIVE2 = 0x3C,D3DNTDP2OP_DRAWRECTPATCH = 0x3D,D3DNTDP2OP_DRAWTRIPATCH = 0x3E,D3DNTDP2OP_VOLUMEBLT = 0x3F,D3DNTDP2OP_BUFFERBLT = 0x40,D3DNTDP2OP_MULTIPLYTRANSFORM = 0x41,D3DNTDP2OP_ADDDIRTYRECT = 0x42,D3DNTDP2OP_ADDDIRTYBOX = 0x43,};
enum _D3DTRANSFORMSTATETYPE {D3DTS_VIEW = 0x2,D3DTS_PROJECTION = 0x3,D3DTS_TEXTURE0 = 0x10,D3DTS_TEXTURE1 = 0x11,D3DTS_TEXTURE2 = 0x12,D3DTS_TEXTURE3 = 0x13,D3DTS_TEXTURE4 = 0x14,D3DTS_TEXTURE5 = 0x15,D3DTS_TEXTURE6 = 0x16,D3DTS_TEXTURE7 = 0x17,D3DTS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVS_RASTOUT_OFFSETS {D3DSRO_POSITION = 0x0,D3DSRO_FOG = 0x1,D3DSRO_POINT_SIZE = 0x2,D3DSRO_FORCE_DWORD = 0x7FFFFFFF,};
enum _EXCEPTION_DISPOSITION {ExceptionContinueExecution = 0x0,ExceptionContinueSearch = 0x1,ExceptionNestedException = 0x2,ExceptionCollidedUnwind = 0x3,};
enum _NDIS_802_5_RING_STATE {NdisRingStateOpened = 0x1,NdisRingStateClosed = 0x2,NdisRingStateOpening = 0x3,NdisRingStateClosing = 0x4,NdisRingStateOpenFailure = 0x5,NdisRingStateRingFailure = 0x6,};
enum _ROUTER_INTERFACE_TYPE {ROUTER_IF_TYPE_CLIENT = 0x0,ROUTER_IF_TYPE_HOME_ROUTER = 0x1,ROUTER_IF_TYPE_FULL_ROUTER = 0x2,ROUTER_IF_TYPE_DEDICATED = 0x3,ROUTER_IF_TYPE_INTERNAL = 0x4,ROUTER_IF_TYPE_LOOPBACK = 0x5,};
struct _SearchAssistantEvents {struct _SearchAssistantEventsVtbl *lpVtbl;};
enum __MIDL_ICDBurnExt_0002 {CDBE_TYPE_MUSIC = 0x1,CDBE_TYPE_DATA = 0x2,CDBE_TYPE_ALL = 0xFFFFFFFF,};
enum __MIDL_IShellItem_0001 {SIGDN_NORMALDISPLAY = 0x0,SIGDN_PARENTRELATIVEPARSING = 0x80018001,SIGDN_PARENTRELATIVEFORADDRESSBAR = 0x8001C001,SIGDN_DESKTOPABSOLUTEPARSING = 0x80028000,SIGDN_PARENTRELATIVEEDITING = 0x80031001,SIGDN_DESKTOPABSOLUTEEDITING = 0x8004C000,SIGDN_FILESYSPATH = 0x80058000,SIGDN_URL = 0x80068000,};
enum __MIDL_IShellItem_0002 {SICHINT_DISPLAY = 0x0,SICHINT_ALLFIELDS = 0x80000000,SICHINT_CANONICAL = 0x10000000,};
typedef struct _BDA_IPv4_ADDRESS_LIST BDA_IPv4_ADDRESS_LIST;
typedef struct _BDA_IPv6_ADDRESS_LIST BDA_IPv6_ADDRESS_LIST;
typedef struct _CERT_CRL_CONTEXT_PAIR CERT_CRL_CONTEXT_PAIR;
typedef struct tagCInterfaceProxyHeader CInterfaceProxyHeader;
typedef struct _CMInvokeCommandInfoEx CMINVOKECOMMANDINFOEX;
typedef struct contres_cr10waveformat_tag CONTRESCR10WAVEFORMAT;
typedef struct _CREDENTIAL_ATTRIBUTEA CREDENTIAL_ATTRIBUTEA;
typedef struct _CREDENTIAL_ATTRIBUTEW CREDENTIAL_ATTRIBUTEW;
typedef struct _CRYPT_SEQUENCE_OF_ANY CRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_TRUST_REG_ENTRY CRYPT_TRUST_REG_ENTRY;
typedef struct _CRYPT_X942_OTHER_INFO CRYPT_X942_OTHER_INFO;
typedef struct _CTL_FIND_SUBJECT_PARA CTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA CTL_VERIFY_USAGE_PARA;
typedef struct _D3DHAL_DP2ADDDIRTYBOX D3DHAL_DP2ADDDIRTYBOX;
typedef struct _D3DHAL_DP2CREATELIGHT D3DHAL_DP2CREATELIGHT;
typedef struct _D3DHAL_DP2PIXELSHADER D3DHAL_DP2PIXELSHADER;
typedef struct _D3DHAL_DP2RENDERSTATE D3DHAL_DP2RENDERSTATE;
typedef struct _D3DHAL_DP2SETPRIORITY D3DHAL_DP2SETPRIORITY;
typedef struct _D3DHAL_DP2STARTVERTEX D3DHAL_DP2STARTVERTEX;
typedef struct _D3DHAL_DP2TRIANGLEFAN D3DHAL_DP2TRIANGLEFAN;
typedef struct _D3DHAL_DRAWPRIMCOUNTS D3DHAL_DRAWPRIMCOUNTS;
typedef struct _D3DNTHALDeviceDesc_V1 D3DNTHALDEVICEDESC_V1;
typedef struct _D3DNTHALDeviceDesc_V2 D3DNTHALDEVICEDESC_V2;
typedef struct _D3DNTHAL_DP2BUFFERBLT D3DNTHAL_DP2BUFFERBLT;
typedef struct _D3DNTHAL_DP2LINESTRIP D3DNTHAL_DP2LINESTRIP;
typedef struct _D3DNTHAL_DP2SETTEXLOD D3DNTHAL_DP2SETTEXLOD;
typedef struct _D3DNTHAL_DP2VOLUMEBLT D3DNTHAL_DP2VOLUMEBLT;
typedef struct _D3DPRESENT_PARAMETERS_ D3DPRESENT_PARAMETERS;
typedef struct _DDHAL_CREATEVPORTDATA DDHAL_CREATEVPORTDATA;
typedef struct _DDHAL_GETSCANLINEDATA DDHAL_GETSCANLINEDATA;
typedef struct _DDHAL_SETCLIPLISTDATA DDHAL_SETCLIPLISTDATA;
typedef struct _DDHAL_SETCOLORKEYDATA DDHAL_SETCOLORKEYDATA;
typedef struct _DDHAL_SYNCSURFACEDATA DDHAL_SYNCSURFACEDATA;
typedef struct _DDHAL_UPDATEVPORTDATA DDHAL_UPDATEVPORTDATA;
typedef struct _DDRAWI_DIRECTDRAW_GBL DDRAWI_DIRECTDRAW_GBL;
typedef struct _DDRAWI_DIRECTDRAW_INT DDRAWI_DIRECTDRAW_INT;
typedef struct _DDRAWI_DIRECTDRAW_LCL DDRAWI_DIRECTDRAW_LCL;
typedef struct _DD_CANCREATEVPORTDATA DD_CANCREATEVPORTDATA;
typedef struct _DD_DESTROYDDLOCALDATA DD_DESTROYDDLOCALDATA;
typedef struct _DD_DESTROYPALETTEDATA DD_DESTROYPALETTEDATA;
typedef struct _DD_DESTROYSURFACEDATA DD_DESTROYSURFACEDATA;
typedef struct _DD_DRVSETCOLORKEYDATA DD_DRVSETCOLORKEYDATA;
typedef struct _DD_ENDMOCOMPFRAMEDATA DD_ENDMOCOMPFRAMEDATA;
typedef struct _DD_GETDRIVERINFO2DATA DD_GETDRIVERINFO2DATA;
typedef struct _DD_GETDRIVERSTATEDATA DD_GETDRIVERSTATEDATA;
typedef struct _DD_GETFORMATCOUNTDATA DD_GETFORMATCOUNTDATA;
typedef struct _DD_GETMOCOMPGUIDSDATA DD_GETMOCOMPGUIDSDATA;
typedef struct _DD_GETVPORTSIGNALDATA DD_GETVPORTSIGNALDATA;
typedef struct _DD_NONLOCALVIDMEMCAPS DD_NONLOCALVIDMEMCAPS;
typedef struct _DRIVER_UPGRADE_INFO_1 DRIVER_UPGRADE_INFO_1;
typedef struct _DRIVER_UPGRADE_INFO_2 DRIVER_UPGRADE_INFO_2;
struct DShellNameSpaceEvents {struct DShellNameSpaceEventsVtbl *lpVtbl;};
typedef struct tagCOLORMATCHTOTARGET EMRCOLORMATCHTOTARGET;
typedef struct tagEMRSCALEVIEWPORTEXTEX EMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSETCOLORADJUSTMENT EMRSETCOLORADJUSTMENT;
typedef struct _EVENT_INSTANCE_HEADER EVENT_INSTANCE_HEADER;
typedef struct _FILESYSTEM_STATISTICS FILESYSTEM_STATISTICS;
struct IActionProgressDialog {struct IActionProgressDialogVtbl *lpVtbl;};
struct IAddrExclusionControl {struct IAddrExclusionControlVtbl *lpVtbl;};
struct IAutoCompleteDropDown {struct IAutoCompleteDropDownVtbl *lpVtbl;};
struct IDDVideoPortContainer {struct IDDVideoPortContainerVtbl *lpVtbl;};
struct IDirect3DBaseTexture8 {struct IDirect3DBaseTexture8Vtbl *lpVtbl;};
struct IDirect3DCubeTexture8 {struct IDirect3DCubeTexture8Vtbl *lpVtbl;};
struct IDirect3DIndexBuffer8 {struct IDirect3DIndexBuffer8Vtbl *lpVtbl;};
typedef IDirectMusicDownload IDirectMusicDownload8;
struct IDirectSoundFXFlanger {struct IDirectSoundFXFlangerVtbl *lpVtbl;};
struct IDirectSoundFXParamEq {struct IDirectSoundFXParamEqVtbl *lpVtbl;};
struct IEnumConnectionPoints {struct IEnumConnectionPointsVtbl *lpVtbl;};
struct IEnumOleDocumentViews {struct IEnumOleDocumentViewsVtbl *lpVtbl;};
struct IGlobalInterfaceTable {struct IGlobalInterfaceTableVtbl *lpVtbl;};
struct IInternetProtocolInfo {struct IInternetProtocolInfoVtbl *lpVtbl;};
struct IInternetProtocolRoot {struct IInternetProtocolRootVtbl *lpVtbl;};
struct IInternetProtocolSink {struct IInternetProtocolSinkVtbl *lpVtbl;};
struct IInternetThreadSwitch {struct IInternetThreadSwitchVtbl *lpVtbl;};
enum IMAGE_AUX_SYMBOL_TYPE {IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 0x1,};
typedef struct _IMAGE_BASE_RELOCATION IMAGE_BASE_RELOCATION;
typedef struct _IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY32;
typedef struct _IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY64;
typedef struct _IP_MCAST_COUNTER_INFO IP_MCAST_COUNTER_INFO;
typedef struct ip_option_information IP_OPTION_INFORMATION;
struct ISWbemRefreshableItem {struct ISWbemRefreshableItemVtbl *lpVtbl;};
struct IShellFolderViewDual2 {struct IShellFolderViewDual2Vtbl *lpVtbl;};
struct ISpecifyPropertyPages {struct ISpecifyPropertyPagesVtbl *lpVtbl;};
struct ISynchronizeContainer {struct ISynchronizeContainerVtbl *lpVtbl;};
struct ITimeAndNoticeControl {struct ITimeAndNoticeControlVtbl *lpVtbl;};
struct IWbemPropertyProvider {struct IWbemPropertyProviderVtbl *lpVtbl;};
struct IWbemProviderIdentity {struct IWbemProviderIdentityVtbl *lpVtbl;};
struct IWbemProviderInitSink {struct IWbemProviderInitSinkVtbl *lpVtbl;};
struct IXMLDOMImplementation {struct IXMLDOMImplementationVtbl *lpVtbl;};
struct IXMLElementCollection {struct IXMLElementCollectionVtbl *lpVtbl;};
struct InternetPrintOrdering;
typedef struct _KERB_DECRYPT_RESPONSE KERB_DECRYPT_RESPONSE;
typedef struct _KERB_SMART_CARD_LOGON KERB_SMART_CARD_LOGON;
typedef struct _FBE7179BAB40555F1A13AD3C5BC3BB71 KSAC3_ALTERNATE_AUDIO;
typedef struct _9ADD4811563784E97592213CBF8060F3 KSAC3_BIT_STREAM_MODE;
typedef struct _52AD6460DAD19A3D48443005CDCF2412 KSAUDIO_DYNAMIC_RANGE;
typedef struct _ECC65BA02B08F93DE1D3AD2A06446B79 KSDS3D_ITD_PARAMS_MSG;
typedef struct _BDE91A4D4766441856A2EB7036E539BD KSEVENT_TIME_INTERVAL;
typedef struct _B0BC4AADD5C9FF12157D028DEF0CCD6A KSTOPOLOGY_CONNECTION;
typedef struct _0606DB5FE2099CCDC829F33B29607B55 KSWAVETABLE_WAVE_DESC;
typedef struct _D63E714A239F9C0D1FE2D222C2E0E7D5 KS_AM_ExactRateChange;
typedef struct tagAAMENUFILENAME *LPAASHELLMENUFILENAME;
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;
typedef IBrowserFrameOptions *LPBROWSERFRAMEOPTIONS;
typedef struct _CMINVOKECOMMANDINFO *LPCMINVOKECOMMANDINFO;
typedef struct _D3DFINDDEVICERESULT *LPD3DFINDDEVICERESULT;
typedef struct _D3DFINDDEVICESEARCH *LPD3DFINDDEVICESEARCH;
typedef struct _D3DHAL_DP2LINESTRIP *LPD3DHAL_DP2LINESTRIP;
typedef struct _D3DVERTEXBUFFERDESC *LPD3DVERTEXBUFFERDESC;
typedef struct tagDDDEVICEIDENTIFIER2 *LPDDDEVICEIDENTIFIER2;
typedef struct _DDHAL_FLIPVPORTDATA *LPDDHAL_FLIPVPORTDATA;
typedef struct IDirectDrawVideoPort *LPDIRECTDRAWVIDEOPORT;
typedef struct IDirectSound3DBuffer *LPDIRECTSOUND3DBUFFER;
typedef struct IDirectSoundCapture *LPDIRECTSOUNDCAPTURE8;
typedef struct IDirectSoundFXChorus *LPDIRECTSOUNDFXCHORUS;
typedef struct IDirectSoundFXGargle *LPDIRECTSOUNDFXGARGLE;
typedef struct _D3DNTHAL_DP2COMMAND *LPDNT3DHAL_DP2COMMAND;
typedef IEnumShellImageStore *LPENUMSHELLIMAGESTORE;
typedef struct _IMAGELISTDRAWPARAMS *LPIMAGELISTDRAWPARAMS;
typedef struct _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;
typedef struct tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS;
typedef struct tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;
typedef struct _8FE251E0C9BEAEF58C2D97D4F1899077 *LPNT_FE_CONSOLE_PROPS;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;
typedef IPerPropertyBrowsing *LPPERPROPERTYBROWSING;
typedef IPersistPropertyBag2 *LPPERSISTPROPERTYBAG2;
typedef struct _PRINTER_NOTIFY_INFO *LPPRINTER_NOTIFY_INFO;
typedef struct _PRINTER_NOTIFY_INIT *LPPRINTER_NOTIFY_INIT;
typedef struct _PROCESS_INFORMATION *LPPROCESS_INFORMATION;
typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;
typedef struct _SOCKET_ADDRESS_LIST *LPSOCKET_ADDRESS_LIST;
typedef struct _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS;
typedef struct _LSA_OBJECT_ATTRIBUTES LSA_OBJECT_ATTRIBUTES;
typedef struct _LSA_TRUST_INFORMATION LSA_TRUST_INFORMATION;
enum MACRO_ACCESS_ACE_FLAG {SUCCESSFUL_ACCESS_ACE_FLAG = 0x40,FAILED_ACCESS_ACE_FLAG = 0x80,};
enum MACRO_ACMFILTERCHOOSE {ACMFILTERCHOOSE_STYLEF_SHOWHELP = 0x4,ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 0x8,ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 0x10,ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 0x20,ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 0x40,ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 0x80,};
enum MACRO_ACMFORMATCHOOSE {ACMFORMATCHOOSE_STYLEF_SHOWHELP = 0x4,ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 0x8,ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 0x10,ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 0x20,ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 0x40,ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 0x80,};
enum MACRO_ACMSTREAMHEADER {ACMSTREAMHEADER_STATUSF_DONE = 0x10000,ACMSTREAMHEADER_STATUSF_PREPARED = 0x20000,ACMSTREAMHEADER_STATUSF_INQUEUE = 0x100000,};
enum MACRO_ACM_STREAMOPENF {ACM_STREAMOPENF_QUERY = 0x1,ACM_STREAMOPENF_ASYNC = 0x2,ACM_STREAMOPENF_NONREALTIME = 0x4,ACM_STREAMSIZEF_SOURCE = 0x0,ACM_STREAMSIZEF_DESTINATION = 0x1,ACM_STREAMSIZEF_QUERYMASK = 0xF,ACM_STREAMCONVERTF_BLOCKALIGN = 0x4,ACM_STREAMCONVERTF_START = 0x10,ACM_STREAMCONVERTF_END = 0x20,};
enum MACRO_ACPI_BIOS_FATAL {ACPI_BIOS_FATAL_ERROR = 0xE0,};
enum MACRO_ANCESTORDEFAULT {ANCESTORDEFAULT = 4294967295,};
enum MACRO_ATTEMPTED_WRITE {ATTEMPTED_WRITE_TO_READONLY_MEMORY = 0xBE,};
enum MACRO_AVIIF_FIRSTPART {AVIIF_FIRSTPART = 0x20,AVIIF_LASTPART = 0x40,AVIIF_MIDPART = 0x60,AVIIF_NOTIME = 0x100,AVIIF_COMPUSE = 0xFFF0000,};
enum MACRO_CANNOT_ALLOCATE {CANNOT_ALLOCATE_MEMORY = 0x9,};
enum MACRO_CCHILDREN_FRAME {CCHILDREN_FRAME = 7,};
enum MACRO_CERT_CHAIN_FIND {CERT_CHAIN_FIND_BY_ISSUER = 1,CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1,CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2,CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4,CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8,CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384,CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768,CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1,CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2,CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4,CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8,CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7,CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16,CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32,CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64,CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128,CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256,CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512,CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024,CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048,CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840,CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768,CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384,CERT_CHAIN_POLICY_BASE = 1,CERT_CHAIN_POLICY_AUTHENTICODE = 2,CERT_CHAIN_POLICY_AUTHENTICODE_TS = 3,CERT_CHAIN_POLICY_SSL = 4,CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 5,CERT_CHAIN_POLICY_NT_AUTH = 6,CERT_CHAIN_POLICY_MICROSOFT_ROOT = 7,};
enum MACRO_CERT_CONFIDENCE {CERT_CONFIDENCE_SIG = 0x10000000,CERT_CONFIDENCE_TIME = 0x1000000,CERT_CONFIDENCE_TIMENEST = 0x100000,CERT_CONFIDENCE_AUTHIDEXT = 0x10000,CERT_CONFIDENCE_HYGIENE = 0x1000,CERT_CONFIDENCE_HIGHEST = 0x11111000,};
enum MACRO_CERT_STORE_CTRL {CERT_STORE_CTRL_RESYNC = 1,CERT_STORE_CTRL_NOTIFY_CHANGE = 2,CERT_STORE_CTRL_COMMIT = 3,CERT_STORE_CTRL_AUTO_RESYNC = 4,CERT_STORE_CTRL_CANCEL_NOTIFY = 5,CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1,CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1,CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2,CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1,CERT_CREATE_CONTEXT_SORTED_FLAG = 2,CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4,CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8,CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1,CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2,CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4,CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8,CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1,};
enum MACRO_CHECKJPEGFORMAT {CHECKJPEGFORMAT = 4119,};
enum MACRO_COLORMGMTDLGORD {COLORMGMTDLGORD = 1551,};
enum MACRO_COLOR_SCROLLBAR {COLOR_SCROLLBAR = 0,COLOR_BACKGROUND = 1,COLOR_ACTIVECAPTION = 2,COLOR_INACTIVECAPTION = 3,COLOR_MENU = 4,COLOR_WINDOW = 5,COLOR_WINDOWFRAME = 6,COLOR_MENUTEXT = 7,COLOR_WINDOWTEXT = 8,COLOR_CAPTIONTEXT = 9,COLOR_ACTIVEBORDER = 10,COLOR_INACTIVEBORDER = 11,COLOR_APPWORKSPACE = 12,COLOR_HIGHLIGHT = 13,COLOR_HIGHLIGHTTEXT = 14,COLOR_BTNFACE = 15,COLOR_BTNSHADOW = 16,COLOR_GRAYTEXT = 17,COLOR_BTNTEXT = 18,COLOR_INACTIVECAPTIONTEXT = 19,COLOR_BTNHIGHLIGHT = 20,COLOR_3DDKSHADOW = 21,COLOR_3DLIGHT = 22,COLOR_INFOTEXT = 23,COLOR_INFOBK = 24,COLOR_HOTLIGHT = 26,COLOR_GRADIENTACTIVECAPTION = 27,COLOR_GRADIENTINACTIVECAPTION = 28,COLOR_MENUHILIGHT = 29,COLOR_MENUBAR = 30,COLOR_DESKTOP = 1,COLOR_3DFACE = 15,COLOR_3DSHADOW = 16,COLOR_3DHIGHLIGHT = 20,COLOR_3DHILIGHT = 20,COLOR_BTNHILIGHT = 20,};
enum MACRO_CONTEXT_E_NOJIT {CONTEXT_E_NOJIT = 0x8004E026,CONTEXT_E_NOTRANSACTION = 0x8004E027,};
enum MACRO_CONTROLCALLBACK {CONTROLCALLBACK_PREROLL = 1,CONTROLCALLBACK_CAPTURING = 2,};
enum MACRO_CRITICAL_OBJECT {CRITICAL_OBJECT_TERMINATION = 0xF4,};
enum MACRO_D3DPRESENT_BACK {D3DPRESENT_BACK_BUFFERS_MAX = 3,};
enum MACRO_D3DPTEXTURECAPS {D3DPTEXTURECAPS_PERSPECTIVE = 0x1,D3DPTEXTURECAPS_POW2 = 0x2,D3DPTEXTURECAPS_ALPHA = 0x4,D3DPTEXTURECAPS_SQUAREONLY = 0x20,D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE = 0x40,D3DPTEXTURECAPS_ALPHAPALETTE = 0x80,D3DPTEXTURECAPS_NONPOW2CONDITIONAL = 0x100,D3DPTEXTURECAPS_PROJECTED = 0x400,D3DPTEXTURECAPS_CUBEMAP = 0x800,D3DPTEXTURECAPS_VOLUMEMAP = 0x2000,D3DPTEXTURECAPS_MIPMAP = 0x4000,D3DPTEXTURECAPS_MIPVOLUMEMAP = 0x8000,D3DPTEXTURECAPS_MIPCUBEMAP = 0x10000,D3DPTEXTURECAPS_CUBEMAP_POW2 = 0x20000,D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 0x40000,};
enum MACRO_D3DPTFILTERCAPS {D3DPTFILTERCAPS_MINFPOINT = 0x100,D3DPTFILTERCAPS_MINFLINEAR = 0x200,D3DPTFILTERCAPS_MINFANISOTROPIC = 0x400,D3DPTFILTERCAPS_MIPFPOINT = 0x10000,D3DPTFILTERCAPS_MIPFLINEAR = 0x20000,D3DPTFILTERCAPS_MAGFPOINT = 0x1000000,D3DPTFILTERCAPS_MAGFLINEAR = 0x2000000,D3DPTFILTERCAPS_MAGFANISOTROPIC = 0x4000000,D3DPTFILTERCAPS_MAGFAFLATCUBIC = 0x8000000,D3DPTFILTERCAPS_MAGFGAUSSIANCUBIC = 0x10000000,};
enum MACRO_DDIRQ_BUSMASTER {DDIRQ_BUSMASTER = 0x2,};
enum MACRO_DEFAULT_MINIMUM {DEFAULT_MINIMUM_ENTITIES = 32,};
enum MACRO_DELAY_SENSITIVE {MODERATELY_DELAY_SENSITIVE = 0xFFFFFFFD,HIGHLY_DELAY_SENSITIVE = 0xFFFFFFFE,};
enum MACRO_DICUSTOMDEVPROP {DICUSTOMDEVPROP_MERGE_MULTISZ = 0x1,};
enum MACRO_DISPID_AUTOSIZE {DISPID_AUTOSIZE = -500,DISPID_BACKCOLOR = -501,DISPID_BACKSTYLE = -502,DISPID_BORDERCOLOR = -503,DISPID_BORDERSTYLE = -504,DISPID_BORDERWIDTH = -505,DISPID_DRAWMODE = -507,DISPID_DRAWSTYLE = -508,DISPID_DRAWWIDTH = -509,DISPID_FILLCOLOR = -510,DISPID_FILLSTYLE = -511,DISPID_FONT = -512,DISPID_FORECOLOR = -513,DISPID_ENABLED = -514,DISPID_HWND = -515,DISPID_TABSTOP = -516,DISPID_TEXT = -517,DISPID_CAPTION = -518,DISPID_BORDERVISIBLE = -519,DISPID_APPEARANCE = -520,DISPID_MOUSEPOINTER = -521,DISPID_MOUSEICON = -522,DISPID_PICTURE = -523,DISPID_VALID = -524,DISPID_READYSTATE = -525,DISPID_LISTINDEX = -526,DISPID_SELECTED = -527,DISPID_LIST = -528,DISPID_COLUMN = -529,DISPID_LISTCOUNT = -531,DISPID_MULTISELECT = -532,DISPID_MAXLENGTH = -533,DISPID_PASSWORDCHAR = -534,DISPID_SCROLLBARS = -535,DISPID_WORDWRAP = -536,DISPID_MULTILINE = -537,DISPID_NUMBEROFROWS = -538,DISPID_NUMBEROFCOLUMNS = -539,DISPID_DISPLAYSTYLE = -540,DISPID_GROUPNAME = -541,DISPID_IMEMODE = -542,DISPID_ACCELERATOR = -543,DISPID_ENTERKEYBEHAVIOR = -544,DISPID_TABKEYBEHAVIOR = -545,DISPID_SELTEXT = -546,DISPID_SELSTART = -547,DISPID_SELLENGTH = -548,DISPID_REFRESH = -550,DISPID_DOCLICK = -551,DISPID_ABOUTBOX = -552,DISPID_ADDITEM = -553,DISPID_CLEAR = -554,DISPID_REMOVEITEM = -555,DISPID_CLICK = -600,DISPID_DBLCLICK = -601,DISPID_KEYDOWN = -602,DISPID_KEYPRESS = -603,DISPID_KEYUP = -604,DISPID_MOUSEDOWN = -605,DISPID_MOUSEMOVE = -606,DISPID_MOUSEUP = -607,DISPID_ERROREVENT = -608,DISPID_READYSTATECHANGE = -609,DISPID_CLICK_VALUE = -610,DISPID_RIGHTTOLEFT = -611,DISPID_TOPTOBOTTOM = -612,DISPID_THIS = -613,DISPID_AMBIENT_BACKCOLOR = -701,DISPID_AMBIENT_DISPLAYNAME = -702,DISPID_AMBIENT_FONT = -703,DISPID_AMBIENT_FORECOLOR = -704,DISPID_AMBIENT_LOCALEID = -705,DISPID_AMBIENT_MESSAGEREFLECT = -706,DISPID_AMBIENT_SCALEUNITS = -707,DISPID_AMBIENT_TEXTALIGN = -708,DISPID_AMBIENT_USERMODE = -709,DISPID_AMBIENT_UIDEAD = -710,DISPID_AMBIENT_SHOWGRABHANDLES = -711,DISPID_AMBIENT_SHOWHATCHING = -712,DISPID_AMBIENT_DISPLAYASDEFAULT = -713,DISPID_AMBIENT_SUPPORTSMNEMONICS = -714,DISPID_AMBIENT_AUTOCLIP = -715,DISPID_AMBIENT_APPEARANCE = -716,DISPID_AMBIENT_CODEPAGE = -725,DISPID_AMBIENT_PALETTE = -726,DISPID_AMBIENT_CHARSET = -727,DISPID_AMBIENT_TRANSFERPRIORITY = -728,DISPID_AMBIENT_RIGHTTOLEFT = -732,DISPID_AMBIENT_TOPTOBOTTOM = -733,DISPID_Name = -800,DISPID_Delete = -801,DISPID_Object = -802,DISPID_Parent = -803,DISPID_FONT_NAME = 0,DISPID_FONT_SIZE = 2,DISPID_FONT_BOLD = 3,DISPID_FONT_ITALIC = 4,DISPID_FONT_UNDER = 5,DISPID_FONT_STRIKE = 6,DISPID_FONT_WEIGHT = 7,DISPID_FONT_CHARSET = 8,DISPID_FONT_CHANGED = 9,DISPID_PICT_HANDLE = 0,DISPID_PICT_HPAL = 2,DISPID_PICT_TYPE = 3,DISPID_PICT_WIDTH = 4,DISPID_PICT_HEIGHT = 5,DISPID_PICT_RENDER = 6,};
enum MACRO_DI_REMOVEDEVICE {DI_REMOVEDEVICE_GLOBAL = 0x1,DI_REMOVEDEVICE_CONFIGSPECIFIC = 0x2,DI_UNREMOVEDEVICE_CONFIGSPECIFIC = 0x2,};
enum MACRO_DN_ACCELERATION {DN_ACCELERATION_LEVEL = 1,DN_DEVICE_ORIGIN = 2,DN_SLEEP_MODE = 3,DN_DRAWING_BEGIN = 4,};
enum MACRO_DOMAIN_PASSWORD {DOMAIN_PASSWORD_COMPLEX = 0x1,DOMAIN_PASSWORD_NO_ANON_CHANGE = 0x2,DOMAIN_PASSWORD_NO_CLEAR_CHANGE = 0x4,DOMAIN_LOCKOUT_ADMINS = 0x8,DOMAIN_PASSWORD_STORE_CLEARTEXT = 0x10,DOMAIN_REFUSE_PASSWORD_CHANGE = 0x20,};
enum MACRO_DRAWPATTERNRECT {DRAWPATTERNRECT = 25,};
enum MACRO_DRIVER_INTERNAL {PORT_DRIVER_INTERNAL = 0x2C,SCSI_DISK_DRIVER_INTERNAL = 0x2D,};
enum MACRO_DRIVER_RETURNED {DRIVER_RETURNED_STATUS_REPARSE_FOR_VOLUME_OPEN = 0xF9,};
enum MACRO_DRIVER_UNLOADED {DRIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS = 0xCE,};
enum MACRO_DRIVER_VERIFIER {DRIVER_VERIFIER_DETECTED_VIOLATION = 0xC4,DRIVER_CORRUPTED_EXPOOL = 0xC5,DRIVER_CAUGHT_MODIFYING_FREED_POOL = 0xC6,};
enum MACRO_DUPLICATE_DEREG {DUPLICATE_DEREG = 0x7,};
enum MACRO_EM_SETCUEBANNER {EM_SETCUEBANNER = 5377,EM_GETCUEBANNER = 5378,EM_SHOWBALLOONTIP = 5379,EM_HIDEBALLOONTIP = 5380,};
enum MACRO_EVENT_TRACE_USE {EVENT_TRACE_USE_PROCTIME = 0x1,EVENT_TRACE_USE_NOCPUTIME = 0x2,};
enum MACRO_EVENT_TRANSPORT {EVENT_TRANSPORT_RESOURCE_POOL = 0x80002329,EVENT_TRANSPORT_RESOURCE_LIMIT = 0x8000232A,EVENT_TRANSPORT_RESOURCE_SPECIFIC = 0x8000232B,EVENT_TRANSPORT_REGISTER_FAILED = 0xC000232C,EVENT_TRANSPORT_BINDING_FAILED = 0xC000232D,EVENT_TRANSPORT_ADAPTER_NOT_FOUND = 0xC000232E,EVENT_TRANSPORT_SET_OID_FAILED = 0xC000232F,EVENT_TRANSPORT_QUERY_OID_FAILED = 0xC0002330,EVENT_TRANSPORT_TRANSFER_DATA = 0x40002331,EVENT_TRANSPORT_TOO_MANY_LINKS = 0x40002332,EVENT_TRANSPORT_BAD_PROTOCOL = 0x40002333,EVENT_IPX_NEW_DEFAULT_TYPE = 0x4000251D,EVENT_IPX_SAP_ANNOUNCE = 0x8000251E,EVENT_IPX_ILLEGAL_CONFIG = 0x8000251F,EVENT_IPX_INTERNAL_NET_INVALID = 0xC0002520,EVENT_IPX_NO_FRAME_TYPES = 0xC0002521,EVENT_IPX_CREATE_DEVICE = 0xC0002522,EVENT_IPX_NO_ADAPTERS = 0xC0002523,EVENT_RPCSS_CREATEPROCESS_FAILURE = 0xC0002710,EVENT_RPCSS_RUNAS_CREATEPROCESS_FAILURE = 0xC0002711,EVENT_RPCSS_LAUNCH_ACCESS_DENIED = 0xC0002712,EVENT_RPCSS_DEFAULT_LAUNCH_ACCESS_DENIED = 0xC0002713,EVENT_RPCSS_RUNAS_CANT_LOGIN = 0xC0002714,EVENT_RPCSS_START_SERVICE_FAILURE = 0xC0002715,EVENT_RPCSS_REMOTE_SIDE_ERROR = 0xC0002716,EVENT_RPCSS_ACTIVATION_ERROR = 0xC0002717,EVENT_RPCSS_REMOTE_SIDE_ERROR_WITH_FILE = 0xC0002718,EVENT_RPCSS_REMOTE_SIDE_UNAVAILABLE = 0xC0002719,EVENT_RPCSS_SERVER_START_TIMEOUT = 0xC000271A,EVENT_RPCSS_SERVER_NOT_RESPONDING = 0xC000271B,EVENT_DCOM_ASSERTION_FAILURE = 0xC000271C,EVENT_DCOM_INVALID_ENDPOINT_DATA = 0xC000271D,EVENT_DCOM_COMPLUS_DISABLED = 0xC000271E,EVENT_DNS_CACHE_START_FAILURE_NO_DLL = 0xC0002AF8,EVENT_DNS_CACHE_START_FAILURE_NO_ENTRY = 0xC0002AF9,EVENT_DNS_CACHE_START_FAILURE_NO_CONTROL = 0xC0002AFA,EVENT_DNS_CACHE_START_FAILURE_NO_DONE_EVENT = 0xC0002AFB,EVENT_DNS_CACHE_START_FAILURE_NO_RPC = 0xC0002AFC,EVENT_DNS_CACHE_START_FAILURE_NO_SHUTDOWN_NOTIFY = 0xC0002AFD,EVENT_DNS_CACHE_START_FAILURE_NO_UPDATE = 0xC0002AFE,EVENT_DNS_CACHE_START_FAILURE_LOW_MEMORY = 0xC0002AFF,EVENT_DNS_CACHE_NETWORK_PERF_WARNING = 0x80002B2A,EVENT_DNS_CACHE_UNABLE_TO_REACH_SERVER_WARNING = 0x80002B2B,EVENT_DNSAPI_REGISTRATION_FAILED_TIMEOUT = 0x80002B8E,EVENT_DNSAPI_REGISTRATION_FAILED_SERVERFAIL = 0x80002B8F,EVENT_DNSAPI_REGISTRATION_FAILED_NOTSUPP = 0x80002B90,EVENT_DNSAPI_REGISTRATION_FAILED_REFUSED = 0x80002B91,EVENT_DNSAPI_REGISTRATION_FAILED_SECURITY = 0x80002B92,EVENT_DNSAPI_REGISTRATION_FAILED_OTHER = 0x80002B93,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_TIMEOUT = 0x80002B94,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_SERVERFAIL = 0x80002B95,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_NOTSUPP = 0x80002B96,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_REFUSED = 0x80002B97,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_SECURITY = 0x80002B98,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_OTHER = 0x80002B99,EVENT_DNSAPI_REGISTRATION_FAILED_TIMEOUT_PRIMARY_DN = 0x80002B9A,EVENT_DNSAPI_REGISTRATION_FAILED_SERVERFAIL_PRIMARY_DN = 0x80002B9B,EVENT_DNSAPI_REGISTRATION_FAILED_NOTSUPP_PRIMARY_DN = 0x80002B9C,EVENT_DNSAPI_REGISTRATION_FAILED_REFUSED_PRIMARY_DN = 0x80002B9D,EVENT_DNSAPI_REGISTRATION_FAILED_SECURITY_PRIMARY_DN = 0x80002B9E,EVENT_DNSAPI_REGISTRATION_FAILED_OTHER_PRIMARY_DN = 0x80002B9F,EVENT_DNSAPI_DEREGISTRATION_FAILED_TIMEOUT = 0x80002BAC,EVENT_DNSAPI_DEREGISTRATION_FAILED_SERVERFAIL = 0x80002BAD,EVENT_DNSAPI_DEREGISTRATION_FAILED_NOTSUPP = 0x80002BAE,EVENT_DNSAPI_DEREGISTRATION_FAILED_REFUSED = 0x80002BAF,EVENT_DNSAPI_DEREGISTRATION_FAILED_SECURITY = 0x80002BB0,EVENT_DNSAPI_DEREGISTRATION_FAILED_OTHER = 0x80002BB1,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_TIMEOUT = 0x80002BB2,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_SERVERFAIL = 0x80002BB3,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_NOTSUPP = 0x80002BB4,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_REFUSED = 0x80002BB5,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_SECURITY = 0x80002BB6,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_OTHER = 0x80002BB7,EVENT_DNSAPI_DEREGISTRATION_FAILED_TIMEOUT_PRIMARY_DN = 0x80002BB8,EVENT_DNSAPI_DEREGISTRATION_FAILED_SERVERFAIL_PRIMARY_DN = 0x80002BB9,EVENT_DNSAPI_DEREGISTRATION_FAILED_NOTSUPP_PRIMARY_DN = 0x80002BBA,EVENT_DNSAPI_DEREGISTRATION_FAILED_REFUSED_PRIMARY_DN = 0x80002BBB,EVENT_DNSAPI_DEREGISTRATION_FAILED_SECURITY_PRIMARY_DN = 0x80002BBC,EVENT_DNSAPI_DEREGISTRATION_FAILED_OTHER_PRIMARY_DN = 0x80002BBD,EVENT_DNSAPI_REGISTERED_ADAPTER = 0x40002BC0,EVENT_DNSAPI_REGISTERED_PTR = 0x40002BC1,EVENT_DNSAPI_REGISTERED_ADAPTER_PRIMARY_DN = 0x40002BC2,EVENT_WMI_CANT_OPEN_DEVICE = 0xC0002EE0,EVENT_WMI_INVALID_MOF = 0x80002F44,EVENT_WMI_MOF_LOAD_FAILURE = 0x80002F45,EVENT_WMI_INVALID_REGINFO = 0x80002F46,EVENT_WMI_INVALID_REGPATH = 0x80002F47,EVENT_WMI_CANT_RESOLVE_INSTANCE = 0x80002F48,EVENT_WMI_CANT_GET_EVENT_DATA = 0x80002F49,EVENT_TRK_INTERNAL_ERROR = 0xC00030D4,EVENT_TRK_SERVICE_START_SUCCESS = 0x400030D5,EVENT_TRK_SERVICE_START_FAILURE = 0xC00030D6,EVENT_TRK_SERVICE_CORRUPT_LOG = 0xC00030D7,EVENT_TRK_SERVICE_VOL_QUOTA_EXCEEDED = 0x800030D8,EVENT_TRK_SERVICE_VOLUME_CREATE = 0x400030D9,EVENT_TRK_SERVICE_VOLUME_CLAIM = 0x400030DA,EVENT_TRK_SERVICE_DUPLICATE_VOLIDS = 0x400030DB,EVENT_TRK_SERVICE_MOVE_QUOTA_EXCEEDED = 0x800030DC,EVENT_ATMLANE_CFGREQ_FAIL_VERSNOSUPP = 0xC000332C,EVENT_ATMLANE_JOINREQ_FAIL_VERSNOSUPP = 0xC000332D,EVENT_ATMLANE_CFGREQ_FAIL_REQPARMINVAL = 0xC000332E,EVENT_ATMLANE_JOINREQ_FAIL_REQPARMINVAL = 0xC000332F,EVENT_ATMLANE_JOINREQ_FAIL_DUPLANDEST = 0xC0003330,EVENT_ATMLANE_JOINREQ_FAIL_DUPATMADDR = 0xC0003331,EVENT_ATMLANE_CFGREQ_FAIL_INSUFFRES = 0xC0003332,EVENT_ATMLANE_JOINREQ_FAIL_INSUFFRES = 0xC0003333,EVENT_ATMLANE_CFGREQ_FAIL_NOACCESS = 0xC0003334,EVENT_ATMLANE_JOINREQ_FAIL_NOACCESS = 0xC0003335,EVENT_ATMLANE_CFGREQ_FAIL_REQIDINVAL = 0xC0003336,EVENT_ATMLANE_JOINREQ_FAIL_REQIDINVAL = 0xC0003337,EVENT_ATMLANE_CFGREQ_FAIL_LANDESTINVAL = 0xC0003338,EVENT_ATMLANE_JOINREQ_FAIL_LANDESTINVAL = 0xC0003339,EVENT_ATMLANE_CFGREQ_FAIL_ATMADDRINVAL = 0xC000333A,EVENT_ATMLANE_JOINREQ_FAIL_ATMADDRINVAL = 0xC000333B,EVENT_ATMLANE_CFGREQ_FAIL_NOCONF = 0xC000333C,EVENT_ATMLANE_CFGREQ_FAIL_CONFERROR = 0xC000333D,EVENT_ATMLANE_CFGREQ_FAIL_INSUFFINFO = 0xC000333E,EVENT_ATMARPS_ADDRESS_ALREADY_EXISTS = 0xC0003390,EVENT_FRS_ERROR = 0xC00034BC,EVENT_FRS_STARTING = 0x400034BD,EVENT_FRS_STOPPING = 0x400034BE,EVENT_FRS_STOPPED = 0x400034BF,EVENT_FRS_STOPPED_FORCE = 0xC00034C0,EVENT_FRS_STOPPED_ASSERT = 0xC00034C1,EVENT_FRS_ASSERT = 0xC00034C2,EVENT_FRS_VOLUME_NOT_SUPPORTED = 0xC00034C3,EVENT_FRS_LONG_JOIN = 0x800034C4,EVENT_FRS_LONG_JOIN_DONE = 0x800034C5,EVENT_FRS_CANNOT_COMMUNICATE = 0xC00034C6,EVENT_FRS_DATABASE_SPACE = 0xC00034C7,EVENT_FRS_DISK_WRITE_CACHE_ENABLED = 0x800034C8,EVENT_FRS_JET_1414 = 0xC00034C9,EVENT_FRS_SYSVOL_NOT_READY = 0x800034CA,EVENT_FRS_SYSVOL_NOT_READY_PRIMARY = 0x800034CB,EVENT_FRS_SYSVOL_READY = 0x400034CC,EVENT_FRS_ACCESS_CHECKS_DISABLED = 0x800034CD,EVENT_FRS_ACCESS_CHECKS_FAILED_USER = 0x800034CE,EVENT_FRS_ACCESS_CHECKS_FAILED_UNKNOWN = 0xC00034CF,EVENT_FRS_MOVED_PREEXISTING = 0x800034D0,EVENT_FRS_CANNOT_START_BACKUP_RESTORE_IN_PROGRESS = 0xC00034D1,EVENT_FRS_STAGING_AREA_FULL = 0x800034D2,EVENT_FRS_HUGE_FILE = 0x800034D3,EVENT_FRS_CANNOT_CREATE_UUID = 0xC00034D4,EVENT_FRS_NO_DNS_ATTRIBUTE = 0x800034D5,EVENT_FRS_NO_SID = 0xC00034D6,};
enum MACRO_EXCEPTION_SPAPI {EXCEPTION_SPAPI_UNRECOVERABLE_STACK_OVERFLOW = -536870144,};
enum MACRO_FLOODFILLBORDER {FLOODFILLBORDER = 0,FLOODFILLSURFACE = 1,CCHDEVICENAME = 32,};
enum MACRO_GETPHYSPAGESIZE {GETPHYSPAGESIZE = 12,};
enum MACRO_GETSETPAPERBINS {GETSETPAPERBINS = 29,};
enum MACRO_INPUTLANGCHANGE {INPUTLANGCHANGE_SYSCHARSET = 0x1,INPUTLANGCHANGE_FORWARD = 0x2,INPUTLANGCHANGE_BACKWARD = 0x4,};
enum MACRO_IOCTL_SMARTCARD {IOCTL_SMARTCARD_POWER = 3211268,IOCTL_SMARTCARD_GET_ATTRIBUTE = 3211272,IOCTL_SMARTCARD_SET_ATTRIBUTE = 3211276,IOCTL_SMARTCARD_CONFISCATE = 3211280,IOCTL_SMARTCARD_TRANSMIT = 3211284,IOCTL_SMARTCARD_EJECT = 3211288,IOCTL_SMARTCARD_SWALLOW = 3211292,IOCTL_SMARTCARD_IS_PRESENT = 3211304,IOCTL_SMARTCARD_IS_ABSENT = 3211308,IOCTL_SMARTCARD_SET_PROTOCOL = 3211312,IOCTL_SMARTCARD_GET_STATE = 3211320,IOCTL_SMARTCARD_GET_LAST_ERROR = 3211324,IOCTL_SMARTCARD_GET_PERF_CNTR = 3211328,};
enum MACRO_IPPROTO_HOPOPTS {IPPROTO_HOPOPTS = 0,IPPROTO_IPV4 = 4,IPPROTO_IPV6 = 41,IPPROTO_ROUTING = 43,IPPROTO_FRAGMENT = 44,IPPROTO_ESP = 50,IPPROTO_AH = 51,IPPROTO_ICMPV6 = 58,IPPROTO_NONE = 59,IPPROTO_DSTOPTS = 60,IPPROTO_ICLFXBM = 78,};
enum MACRO_IRQL_UNEXPECTED {IRQL_UNEXPECTED_VALUE = 0xC8,};
enum MACRO_I_IMAGECALLBACK {I_IMAGECALLBACK = -1,I_IMAGENONE = -2,I_COLUMNSCALLBACK = 4294967295,};
enum MACRO_KSAUDDECOUTMODE {KSAUDDECOUTMODE_STEREO_ANALOG = 0x1,KSAUDDECOUTMODE_PCM_51 = 0x2,KSAUDDECOUTMODE_SPDIFF = 0x4,};
enum MACRO_KSAUDIO_QUALITY {KSAUDIO_QUALITY_WORST = 0x0,KSAUDIO_QUALITY_PC = 0x1,KSAUDIO_QUALITY_BASIC = 0x2,KSAUDIO_QUALITY_ADVANCED = 0x3,KSAUDIO_CPU_RESOURCES_NOT_HOST_CPU = 0x0,KSAUDIO_CPU_RESOURCES_HOST_CPU = 0x7FFFFFFF,};
enum MACRO_KSAUDIO_SPEAKER {KSAUDIO_SPEAKER_DIRECTOUT = 0,KSAUDIO_SPEAKER_MONO = 4,KSAUDIO_SPEAKER_STEREO = 3,KSAUDIO_SPEAKER_QUAD = 51,KSAUDIO_SPEAKER_SURROUND = 263,KSAUDIO_SPEAKER_5POINT1 = 63,KSAUDIO_SPEAKER_7POINT1 = 255,KSAUDIO_SPEAKER_GROUND_FRONT_LEFT = 1,KSAUDIO_SPEAKER_GROUND_FRONT_CENTER = 4,KSAUDIO_SPEAKER_GROUND_FRONT_RIGHT = 2,KSAUDIO_SPEAKER_GROUND_REAR_LEFT = 16,KSAUDIO_SPEAKER_GROUND_REAR_RIGHT = 32,KSAUDIO_SPEAKER_TOP_MIDDLE = 2048,KSAUDIO_SPEAKER_SUPER_WOOFER = 8,};
enum MACRO_KSRELATIVEEVENT {KSRELATIVEEVENT_FLAG_HANDLE = 0x1,KSRELATIVEEVENT_FLAG_POINTER = 0x2,};
enum MACRO_LVM_GETITEMRECT {LVM_GETITEMRECT = 4110,LVM_SETITEMPOSITION = 4111,LVM_GETITEMPOSITION = 4112,LVM_GETSTRINGWIDTHA = 4113,LVM_GETSTRINGWIDTHW = 4183,LVM_GETSTRINGWIDTH = 4113,};
enum MACRO_LVM_GETNEXTITEM {LVM_GETNEXTITEM = 4108,};
enum MACRO_LVM_INSERTGROUP {LVM_INSERTGROUP = 4241,LVM_SETGROUPINFO = 4243,LVM_GETGROUPINFO = 4245,LVM_REMOVEGROUP = 4246,LVM_MOVEGROUP = 4247,LVM_MOVEITEMTOGROUP = 4250,};
enum MACRO_LVM_SETBKIMAGEA {LVM_SETBKIMAGEA = 4164,LVM_SETBKIMAGEW = 4234,LVM_GETBKIMAGEA = 4165,LVM_GETBKIMAGEW = 4235,LVM_SETSELECTEDCOLUMN = 4236,LVM_SETTILEWIDTH = 4237,};
enum MACRO_LVN_GETINFOTIPA {LVN_GETINFOTIPA = -157,LVN_GETINFOTIPW = -158,LVN_GETINFOTIP = -157,LVN_BEGINSCROLL = -180,LVN_ENDSCROLL = -181,};
enum MACRO_MAXIMUM_ALLOWED {MAXIMUM_ALLOWED = 0x2000000,};
enum MACRO_MAXIMUM_REPARSE {MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384,};
enum MACRO_MAX_PROPSHEETUI {MAX_PROPSHEETUI_REASON_INDEX = 4,};
enum MACRO_MM_ADDSEPARATOR {MM_ADDSEPARATOR = 0x1,MM_SUBMENUSHAVEIDS = 0x2,MM_DONTREMOVESEPS = 0x4,};
enum MACRO_NAME_INFO_LEVEL {UNIVERSAL_NAME_INFO_LEVEL = 0x1,REMOTE_NAME_INFO_LEVEL = 0x2,};
enum MACRO_PAGESETUPDLGORD {PAGESETUPDLGORD = 1546,};
enum MACRO_PD_BEGINSUBPATH {PD_BEGINSUBPATH = 0x1,PD_ENDSUBPATH = 0x2,PD_RESETSTYLE = 0x4,PD_CLOSEFIGURE = 0x8,PD_BEZIERS = 0x10,PD_ALL = 0x1F,};
enum MACRO_PHYSICALOFFSETX {PHYSICALOFFSETX = 112,};
enum MACRO_PHYSICALOFFSETY {PHYSICALOFFSETY = 113,};
enum MACRO_PIFSTARTLOCSIZE {PIFSTARTLOCSIZE = 63,PIFDEFPATHSIZE = 64,};
enum MACRO_PKCS_ATTRIBUTES {PKCS_ATTRIBUTES = 48,PKCS_SORTED_CTL = 49,};
enum MACRO_PRINTER_OEMINTF {PRINTER_OEMINTF_VERSION = 0x10000,};
enum MACRO_PROTOCOL_RAWTCP {PROTOCOL_RAWTCP_TYPE = 1,};
enum MACRO_PSM_PRESSBUTTON {PSM_PRESSBUTTON = 1137,};
enum MACRO_PSM_SETCURSELID {PSM_SETCURSELID = 1138,PSM_SETFINISHTEXTA = 1139,PSM_SETFINISHTEXTW = 1145,PSM_SETFINISHTEXT = 1139,PSM_GETTABCONTROL = 1140,PSM_ISDIALOGMESSAGE = 1141,PSM_GETCURRENTPAGEHWND = 1142,PSM_INSERTPAGE = 1143,PSM_SETHEADERTITLEA = 1149,PSM_SETHEADERTITLEW = 1150,PSM_SETHEADERTITLE = 1149,PSM_SETHEADERSUBTITLEA = 1151,PSM_SETHEADERSUBTITLEW = 1152,PSM_SETHEADERSUBTITLE = 1151,PSM_HWNDTOINDEX = 1153,PSM_INDEXTOHWND = 1154,PSM_PAGETOINDEX = 1155,PSM_INDEXTOPAGE = 1156,PSM_IDTOINDEX = 1157,PSM_INDEXTOID = 1158,PSM_GETRESULT = 1159,PSM_RECALCPAGESIZES = 1160,};
enum MACRO_PUBLICKEYBLOBEX {PUBLICKEYBLOBEX = 0xA,};
enum MACRO_QUERYDIBSUPPORT {QUERYDIBSUPPORT = 3073,};
enum MACRO_QUOTA_UNDERFLOW {QUOTA_UNDERFLOW = 0x21,};
enum MACRO_READ_ATTRIBUTES {READ_ATTRIBUTES = 0xD0,READ_THRESHOLDS = 0xD1,};
enum MACRO_SECURITY_SYSTEM {SECURITY_SYSTEM = 0x29,};
enum MACRO_SERVICE_ADDRESS {SERVICE_ADDRESS_FLAG_RPC_CN = 0x1,SERVICE_ADDRESS_FLAG_RPC_DG = 0x2,SERVICE_ADDRESS_FLAG_RPC_NB = 0x4,};
enum MACRO_SESSION_ABORTED {SESSION_ABORTED = 0x6,};
enum MACRO_SORT_STRINGSORT {SORT_STRINGSORT = 0x1000,};
enum MACRO_STATUS_SEVERITY {STATUS_SEVERITY_WARNING = 0x2,STATUS_SEVERITY_SUCCESS = 0x0,STATUS_SEVERITY_INFORMATIONAL = 0x1,STATUS_SEVERITY_ERROR = 0x3,};
enum MACRO_TBN_GETDISPINFO {TBN_GETDISPINFO = -716,};
enum MACRO_THREAD_PRIORITY {THREAD_PRIORITY_LOWEST = -2,THREAD_PRIORITY_BELOW_NORMAL = -1,THREAD_PRIORITY_NORMAL = 0,THREAD_PRIORITY_HIGHEST = 2,THREAD_PRIORITY_ABOVE_NORMAL = 1,THREAD_PRIORITY_ERROR_RETURN = 2147483647,THREAD_PRIORITY_TIME_CRITICAL = 15,THREAD_PRIORITY_IDLE = -15,};
enum MACRO_TRUST_DIRECTION {TRUST_DIRECTION_DISABLED = 0x0,TRUST_DIRECTION_INBOUND = 0x1,TRUST_DIRECTION_OUTBOUND = 0x2,TRUST_DIRECTION_BIDIRECTIONAL = 0x3,TRUST_TYPE_DOWNLEVEL = 0x1,TRUST_TYPE_UPLEVEL = 0x2,TRUST_TYPE_MIT = 0x3,TRUST_ATTRIBUTE_NON_TRANSITIVE = 0x1,TRUST_ATTRIBUTE_UPLEVEL_ONLY = 0x2,TRUST_ATTRIBUTE_QUARANTINED_DOMAIN = 0x4,TRUST_ATTRIBUTE_FOREST_TRANSITIVE = 0x8,TRUST_ATTRIBUTE_CROSS_ORGANIZATION = 0x10,TRUST_ATTRIBUTE_WITHIN_FOREST = 0x20,TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL = 0x40,TRUST_ATTRIBUTES_VALID = 0xFF03FFFF,TRUST_ATTRIBUTES_USER = 0xFF000000,TRUST_AUTH_TYPE_NONE = 0x0,TRUST_AUTH_TYPE_NT4OWF = 0x1,TRUST_AUTH_TYPE_CLEAR = 0x2,TRUST_AUTH_TYPE_VERSION = 0x3,};
enum MACRO_TVM_GETITEMRECT {TVM_GETITEMRECT = 4356,TVM_GETCOUNT = 4357,TVM_GETINDENT = 4358,TVM_SETINDENT = 4359,TVM_GETIMAGELIST = 4360,};
enum MACRO_TVN_SELCHANGING {TVN_SELCHANGING = -401,TVN_SELCHANGED = -402,TVN_GETDISPINFO = -403,TVN_SETDISPINFO = -404,TVN_ITEMEXPANDING = -405,TVN_ITEMEXPANDED = -406,TVN_BEGINDRAG = -407,TVN_BEGINRDRAG = -408,TVN_DELETEITEM = -409,TVN_BEGINLABELEDIT = -410,TVN_ENDLABELEDIT = -411,TVN_GETINFOTIP = -413,};
enum MACRO_URLPOLICY_ALLOW {URLPOLICY_ALLOW = 0x0,URLPOLICY_QUERY = 0x1,URLPOLICY_DISALLOW = 0x3,URLPOLICY_NOTIFY_ON_ALLOW = 0x10,URLPOLICY_NOTIFY_ON_DISALLOW = 0x20,URLPOLICY_LOG_ON_ALLOW = 0x40,URLPOLICY_LOG_ON_DISALLOW = 0x80,URLPOLICY_MASK_PERMISSIONS = 0xF,URLPOLICY_DONTCHECKDLGBOX = 0x100,};
enum MACRO_VIEW_LARGEICONS {VIEW_LARGEICONS = 0,VIEW_SMALLICONS = 1,VIEW_LIST = 2,VIEW_DETAILS = 3,VIEW_SORTNAME = 4,VIEW_SORTSIZE = 5,VIEW_SORTDATE = 6,VIEW_SORTTYPE = 7,VIEW_PARENTFOLDER = 8,VIEW_NETCONNECT = 9,VIEW_NETDISCONNECT = 10,VIEW_NEWFOLDER = 11,VIEW_VIEWMENU = 12,};
enum MACRO_WINDOWS_NT_INFO {WINDOWS_NT_INFO_STRING_PLURAL = 0x4000009D,WINDOWS_NT_RC_STRING = 0x4000009E,};
enum MACRO_WM_DEVICECHANGE {WM_DEVICECHANGE = 0x219,WM_MDICREATE = 0x220,WM_MDIDESTROY = 0x221,WM_MDIACTIVATE = 0x222,WM_MDIRESTORE = 0x223,WM_MDINEXT = 0x224,WM_MDIMAXIMIZE = 0x225,WM_MDITILE = 0x226,WM_MDICASCADE = 0x227,WM_MDIICONARRANGE = 0x228,WM_MDIGETACTIVE = 0x229,WM_MDISETMENU = 0x230,WM_ENTERSIZEMOVE = 0x231,WM_EXITSIZEMOVE = 0x232,WM_DROPFILES = 0x233,WM_MDIREFRESHMENU = 0x234,WM_IME_SETCONTEXT = 0x281,WM_IME_NOTIFY = 0x282,WM_IME_CONTROL = 0x283,WM_IME_COMPOSITIONFULL = 0x284,WM_IME_SELECT = 0x285,WM_IME_CHAR = 0x286,WM_IME_REQUEST = 0x288,WM_IME_KEYDOWN = 0x290,WM_IME_KEYUP = 0x291,WM_MOUSEHOVER = 0x2A1,WM_MOUSELEAVE = 0x2A3,WM_NCMOUSEHOVER = 0x2A0,WM_NCMOUSELEAVE = 0x2A2,WM_WTSSESSION_CHANGE = 0x2B1,WM_TABLET_FIRST = 0x2C0,WM_TABLET_LAST = 0x2DF,WM_CUT = 0x300,WM_COPY = 0x301,WM_PASTE = 0x302,WM_CLEAR = 0x303,WM_UNDO = 0x304,WM_RENDERFORMAT = 0x305,WM_RENDERALLFORMATS = 0x306,WM_DESTROYCLIPBOARD = 0x307,WM_DRAWCLIPBOARD = 0x308,WM_PAINTCLIPBOARD = 0x309,WM_VSCROLLCLIPBOARD = 0x30A,WM_SIZECLIPBOARD = 0x30B,WM_ASKCBFORMATNAME = 0x30C,WM_CHANGECBCHAIN = 0x30D,WM_HSCROLLCLIPBOARD = 0x30E,WM_QUERYNEWPALETTE = 0x30F,WM_PALETTEISCHANGING = 0x310,WM_PALETTECHANGED = 0x311,WM_HOTKEY = 0x312,WM_PRINT = 0x317,WM_PRINTCLIENT = 0x318,WM_APPCOMMAND = 0x319,WM_THEMECHANGED = 0x31A,WM_HANDHELDFIRST = 0x358,WM_HANDHELDLAST = 0x35F,WM_AFXFIRST = 0x360,WM_AFXLAST = 0x37F,WM_PENWINFIRST = 0x380,WM_PENWINLAST = 0x38F,WM_APP = 0x8000,WM_USER = 0x400,};
enum MACRO_WM_PARENTNOTIFY {WM_PARENTNOTIFY = 0x210,WM_ENTERMENULOOP = 0x211,WM_EXITMENULOOP = 0x212,WM_NEXTMENU = 0x213,WM_SIZING = 0x214,WM_CAPTURECHANGED = 0x215,WM_MOVING = 0x216,WM_POWERBROADCAST = 0x218,};
enum MACRO_WM_RASDIALEVENT {WM_RASDIALEVENT = 0xCCCD,};
enum MACRO_ckidAVINEWINDEX {ckidAVINEWINDEX = 829973609,};
enum MACRO_cktypePALchange {cktypePALchange = 25456,};
enum MACRO_cktypeWAVEbytes {cktypeWAVEbytes = 25207,};
enum MACRO_fdexEnumDefault {fdexEnumDefault = 0x1,fdexEnumAll = 0x2,};
enum MACRO_streamtypeAUDIO {streamtypeAUDIO = 1935963489,};
enum MACRO_streamtypeVIDEO {streamtypeVIDEO = 1935960438,};
typedef struct _MCDSTATE_SCISSOR_RECT MCDSTATE_SCISSOR_RECT;
typedef struct _MCDTEXTUREENABLESTATE MCDTEXTUREENABLESTATE;
typedef struct tagMCI_ANIM_UPDATE_PARMS MCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS MCI_WAVE_DELETE_PARMS;
typedef struct _MESSAGE_RESOURCE_DATA MESSAGE_RESOURCE_DATA;
typedef struct _MIB_IPMCAST_MFE_STATS MIB_IPMCAST_MFE_STATS;
typedef struct _MIB_IPMCAST_OIF_STATS MIB_IPMCAST_OIF_STATS;
typedef struct _MSV1_0_NTLM3_RESPONSE MSV1_0_NTLM3_RESPONSE;
typedef struct _NDIS_BPC_ADAPTER_CAPS NDIS_BPC_ADAPTER_CAPS;
typedef struct _NDIS_IRDA_PACKET_INFO NDIS_IRDA_PACKET_INFO;
typedef struct _NDIS_PNP_CAPABILITIES NDIS_PNP_CAPABILITIES;
typedef struct _NDIS_STATISTICS_VALUE NDIS_STATISTICS_VALUE;
typedef struct _NDR_USER_MARSHAL_INFO NDR_USER_MARSHAL_INFO;
typedef struct _D6B325549B2987A65B0B27A42CFBEF5C OPTIMAL_WEIGHT_TOTALS;
typedef struct tACMFILTERTAGDETAILSA *PACMFILTERTAGDETAILSA;
typedef struct tACMFILTERTAGDETAILSW *PACMFILTERTAGDETAILSW;
typedef struct tACMFORMATTAGDETAILSA *PACMFORMATTAGDETAILSA;
typedef struct tACMFORMATTAGDETAILSW *PACMFORMATTAGDETAILSW;
typedef struct _PARTITION_INFORMATION PARTITION_INFORMATION;
typedef struct _PAR_QUERY_INFORMATION PAR_QUERY_INFORMATION;
typedef struct _BDA_ETHERNET_ADDRESS *PBDA_ETHERNET_ADDRESS;
typedef struct _BDA_PROGRAM_PID_LIST *PBDA_PROGRAM_PID_LIST;
typedef struct _CERT_CREDENTIAL_INFO *PCERT_CREDENTIAL_INFO;
typedef struct _CERT_GENERAL_SUBTREE *PCERT_GENERAL_SUBTREE;
typedef struct _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_INFO *PCERT_REVOCATION_INFO;
typedef struct _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO;
typedef struct _CERT_TRUST_LIST_INFO *PCERT_TRUST_LIST_INFO;
typedef struct _CHANGER_ELEMENT_LIST *PCHANGER_ELEMENT_LIST;
typedef struct _CHANGER_PRODUCT_DATA *PCHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_POSITION *PCHANGER_SET_POSITION;
typedef struct _CMC_TAGGED_ATTRIBUTE *PCMC_TAGGED_ATTRIBUTE;
typedef struct _CMC_TAGGED_OTHER_MSG *PCMC_TAGGED_OTHER_MSG;
typedef struct _CMSG_CMS_SIGNER_INFO *PCMSG_CMS_SIGNER_INFO;
typedef struct _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY;
typedef struct _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO;
typedef struct _DDGETPOLARITYOUTINFO *PDDGETPOLARITYOUTINFO;
typedef struct _DDGETTRANSFERSTATUSOUTINFO *PDDGETTRANSFEROUTINFO;
typedef struct _DD_CREATEPALETTEDATA *PDD_CREATEPALETTEDATA;
typedef struct _DD_CREATESURFACEDATA *PDD_CREATESURFACEDATA;
typedef struct _DD_DESTROYDRIVERDATA *PDD_DESTROYDRIVERDATA;
typedef struct _DD_DESTROYMOCOMPDATA *PDD_DESTROYMOCOMPDATA;
typedef struct _DD_DIRECTDRAW_GLOBAL *PDD_DIRECTDRAW_GLOBAL;
typedef struct _DD_GETDRIVERINFODATA *PDD_GETDRIVERINFODATA;
typedef struct _DD_GETFLIPSTATUSDATA *PDD_GETFLIPSTATUSDATA;
typedef struct _DD_GETVPORTFIELDDATA *PDD_GETVPORTFIELDDATA;
typedef struct _DD_SYNCVIDEOPORTDATA *PDD_SYNCVIDEOPORTDATA;
typedef struct _DD_UPDATEOVERLAYDATA *PDD_UPDATEOVERLAYDATA;
typedef struct _DEVICEPROPERTYHEADER *PDEVICEPROPERTYHEADER;
typedef struct IDirect3DBaseTexture8 *PDIRECT3DBASETEXTURE8;
typedef struct IDirect3DCubeTexture8 *PDIRECT3DCUBETEXTURE8;
typedef struct IDirect3DIndexBuffer8 *PDIRECT3DINDEXBUFFER8;
typedef struct _CERTIFICATE_BLOB *PEFS_CERTIFICATE_BLOB;
typedef struct tagEMRCREATECOLORSPACEW *PEMRCREATECOLORSPACEW;
typedef struct tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;
typedef struct tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;
typedef struct tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM;
typedef struct tagEMRFILLPATH *PEMRSTROKEANDFILLPATH;
typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS;
typedef struct _EVENT_TRACE_LOGFILEA *PEVENT_TRACE_LOGFILEA;
typedef struct _EVENT_TRACE_LOGFILEW *PEVENT_TRACE_LOGFILEW;
typedef struct _FILE_OBJECTID_BUFFER *PFILE_OBJECTID_BUFFER;
typedef union _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;
typedef struct _FORMAT_EX_PARAMETERS *PFORMAT_EX_PARAMETERS;
typedef struct _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES;
typedef struct __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;
typedef struct _GEN_GET_NETCARD_TIME *PGEN_GET_NETCARD_TIME;
typedef struct _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;
typedef struct _IP_ADAPTER_ADDRESSES *PIP_ADAPTER_ADDRESSES;
typedef struct _IP_ADAPTER_INDEX_MAP *PIP_ADAPTER_INDEX_MAP;
typedef struct _IP_ADAPTER_ORDER_MAP *PIP_ADAPTER_ORDER_MAP;
typedef struct _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;
typedef struct tagPIXELFORMATDESCRIPTOR PIXELFORMATDESCRIPTOR;
typedef struct _KERB_DECRYPT_REQUEST *PKERB_DECRYPT_REQUEST;
typedef struct _KERB_EXTERNAL_TICKET *PKERB_EXTERNAL_TICKET;
typedef struct _299134A1587F81C88B1AF91D3DBFCA39 *PKSAC3_DIALOGUE_LEVEL;
typedef struct _BF6BFD8678B7E7ABDC56122D693BAF10 *PKSAUDIO_MIXCAP_TABLE;
typedef struct _38332C6D8513F636DCCBCCABE200BE7A *PKSDS3D_HRTF_INIT_MSG;
typedef struct _97739C7249C02ACEBAF17DFC34E3F72B *PKSMULTIPLE_DATA_PROP;
typedef struct _7D6AD1D4C0599A70ED2A75DF53A62D54 *PKSPROPERTY_POSITIONS;
typedef struct _F1FF9EB17A5B0DC512AB60E4FE6215DC *PKSPROPERTY_SERIALHDR;
typedef struct _85CBE24E9ED55DBB779718CA5D73A273 *PKSPROPERTY_TVAUDIO_S;
typedef struct tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR;
typedef struct _LSA_AUTH_INFORMATION *PLSA_AUTH_INFORMATION;
typedef struct tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW *PMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW *PMCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW *PMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW *PMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW *PMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW *PMCI_WAVE_OPEN_PARMSW;
typedef struct _MIB_IPMCAST_BOUNDARY *PMIB_IPMCAST_BOUNDARY;
typedef struct _MIB_IPMCAST_IF_ENTRY *PMIB_IPMCAST_IF_ENTRY;
typedef struct _MIB_IPMCAST_IF_TABLE *PMIB_IPMCAST_IF_TABLE;
typedef struct _MSV1_0_SUBAUTH_LOGON *PMSV1_0_SUBAUTH_LOGON;
typedef struct NDIS_BPC_DEVICE_CAPS *PNDIS_BPC_DEVICE_CAPS;
typedef struct NDIS_BPC_POOL_RETURN *PNDIS_BPC_POOL_RETURN;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;
typedef struct _NETWORK_ADDRESS_LIST *PNETWORK_ADDRESS_LIST;
typedef struct _NON_PAGED_DEBUG_INFO *PNON_PAGED_DEBUG_INFO;
typedef struct _OFFLOAD_IPSEC_ADD_SA *POFFLOAD_IPSEC_ADD_SA;
typedef struct _POLICY_AUDIT_LOG_INFO POLICY_AUDIT_LOG_INFO;
typedef struct _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW *PPRINTER_ENUM_VALUESW;
typedef struct _PREVENT_MEDIA_REMOVAL PREVENT_MEDIA_REMOVAL;
typedef struct _PRINTPROCESSOR_CAPS_1 PRINTPROCESSOR_CAPS_1;
typedef struct _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D *PRPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE;
typedef struct _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;
typedef struct _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW;
typedef struct _SHCREATEPROCESSINFOW *PSHCREATEPROCESSINFOW;
typedef struct _SP_DRVINFO_DATA_V1_A *PSP_DRVINFO_DATA_V1_A;
typedef struct _SP_DRVINFO_DATA_V1_W *PSP_DRVINFO_DATA_V1_W;
typedef struct _SP_DRVINFO_DATA_V2_A *PSP_DRVINFO_DATA_V2_A;
typedef struct _SP_DRVINFO_DATA_V2_W *PSP_DRVINFO_DATA_V2_W;
typedef struct _SP_DRVINSTALL_PARAMS *PSP_DRVINSTALL_PARAMS;
typedef struct _SP_INF_SIGNER_INFO_A *PSP_INF_SIGNER_INFO_A;
typedef struct _SP_INF_SIGNER_INFO_W *PSP_INF_SIGNER_INFO_W;
typedef struct _SP_PROPCHANGE_PARAMS *PSP_PROPCHANGE_PARAMS;
typedef struct _STORAGE_HOTPLUG_INFO *PSTORAGE_HOTPLUG_INFO;
typedef struct _03532CD8BA12737E900F44108AB1BA2F *PSYSTEM_BATTERY_STATE;
typedef struct _TCI_CLIENT_FUNC_LIST *PTCI_CLIENT_FUNC_LIST;
typedef struct _TRACE_LOGFILE_HEADER *PTRACE_LOGFILE_HEADER;
typedef struct _D890D4C8B96B04D8C981ECF31CD55F01 *PVOLUME_BITMAP_BUFFER;
typedef struct _48F34F6E58318E719B3C17D5DF8D3416 *PWAVEFORMATEXTENSIBLE;
typedef struct _WCE_IRDA_DEVICE_INFO *PWCE_IRDA_DEVICE_INFO;
typedef struct _WSAServiceClassInfoA *PWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *PWSASERVICECLASSINFOW;
typedef struct _QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIGW;
typedef struct _CBE416C4EAAA19179E77E4054907ADFF READ_USN_JOURNAL_DATA;
typedef struct tagRID_DEVICE_INFO_MOUSE RID_DEVICE_INFO_MOUSE;
typedef void ( *RPCLT_PDU_FILTER_FUNC)(void *Buffer, unsigned int BufferLength, int fDatagram);
typedef void  RPC_ADDRESS_CHANGE_FN(void *arg);
typedef struct tagRPC_ERROR_ENUM_HANDLE RPC_ERROR_ENUM_HANDLE;
typedef struct _RPC_SECURITY_QOS_V2_A RPC_SECURITY_QOS_V2_A;
typedef struct _RPC_SECURITY_QOS_V2_W RPC_SECURITY_QOS_V2_W;
typedef struct _RPC_SECURITY_QOS_V3_A RPC_SECURITY_QOS_V3_A;
typedef struct _RPC_SECURITY_QOS_V3_W RPC_SECURITY_QOS_V3_W;
typedef struct _RPC_SYNTAX_IDENTIFIER RPC_SYNTAX_IDENTIFIER;
typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;
typedef struct _SHChangeDWORDAsIDList SHChangeDWORDAsIDList;
typedef struct sierra_adpcmwaveformat_tag SIERRAADPCMWAVEFORMAT;
typedef struct _SPC_SERIALIZED_OBJECT SPC_SERIALIZED_OBJECT;
typedef struct _SP_ENABLECLASS_PARAMS SP_ENABLECLASS_PARAMS;
typedef struct _SP_FILE_COPY_PARAMS_A SP_FILE_COPY_PARAMS_A;
typedef struct _SP_FILE_COPY_PARAMS_W SP_FILE_COPY_PARAMS_W;
typedef struct _SP_INSTALLWIZARD_DATA SP_INSTALLWIZARD_DATA;
typedef struct _STORAGE_DEVICE_NUMBER STORAGE_DEVICE_NUMBER;
typedef struct _C8A55C2939C105561C2DA558734F3C5E SYSAUDIO_SELECT_GRAPH;
typedef struct _TAPE_CREATE_PARTITION TAPE_CREATE_PARTITION;
typedef struct _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;
typedef struct _TRACE_GUID_PROPERTIES TRACE_GUID_PROPERTIES;
typedef struct _TRANSMIT_FILE_BUFFERS TRANSMIT_FILE_BUFFERS;
typedef struct _TRUSTED_PASSWORD_INFO TRUSTED_PASSWORD_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO UNLOAD_DLL_DEBUG_INFO;
typedef struct _WINDBG_EXTENSION_APIS WINDBG_EXTENSION_APIS;
typedef struct WINTRUST_CATALOG_INFO_ WINTRUST_CATALOG_INFO;
typedef struct tagWNODE_EVENT_REFERENCE WNODE_EVENT_REFERENCE;
typedef struct tagWNODE_SINGLE_INSTANCE WNODE_SINGLE_INSTANCE;
struct WebViewFolderContents;
enum _CM_SERVICE_LOAD_TYPE {BootLoad = 0x0,SystemLoad = 0x1,AutoLoad = 0x2,DemandLoad = 0x3,DisableLoad = 0x4,};
enum _CM_SERVICE_NODE_TYPE {DriverType = 0x1,FileSystemType = 0x2,Win32ServiceOwnProcess = 0x10,Win32ServiceShareProcess = 0x20,AdapterType = 0x4,RecognizerType = 0x8,};
enum _COMPUTER_NAME_FORMAT {ComputerNameNetBIOS = 0x0,ComputerNameDnsHostname = 0x1,ComputerNameDnsDomain = 0x2,ComputerNameDnsFullyQualified = 0x3,ComputerNamePhysicalNetBIOS = 0x4,ComputerNamePhysicalDnsHostname = 0x5,ComputerNamePhysicalDnsDomain = 0x6,ComputerNamePhysicalDnsFullyQualified = 0x7,ComputerNameMax = 0x8,};
enum _D3DTEXTUREFILTERTYPE {D3DTEXF_NONE = 0x0,D3DTEXF_POINT = 0x1,D3DTEXF_LINEAR = 0x2,D3DTEXF_ANISOTROPIC = 0x3,D3DTEXF_FLATCUBIC = 0x4,D3DTEXF_GAUSSIANCUBIC = 0x5,D3DTEXF_FORCE_DWORD = 0x7FFFFFFF,};
enum _ENG_DEVICE_ATTRIBUTE {QDA_RESERVED = 0x0,QDA_ACCELERATION_LEVEL = 0x1,};
enum _ENG_SYSTEM_ATTRIBUTE {EngProcessorFeature = 0x1,EngNumberOfProcessors = 0x2,EngOptimumAvailableUserMemory = 0x3,EngOptimumAvailableSystemMemory = 0x4,};
enum _FT_LOGICAL_DISK_TYPE {FtPartition = 0x0,FtVolumeSet = 0x1,FtStripeSet = 0x2,FtMirrorSet = 0x3,FtStripeSetWithParity = 0x4,FtRedistribution = 0x5,};
enum _NDIS_HARDWARE_STATUS {NdisHardwareStatusReady = 0x0,NdisHardwareStatusInitializing = 0x1,NdisHardwareStatusReset = 0x2,NdisHardwareStatusClosing = 0x3,NdisHardwareStatusNotReady = 0x4,};
enum _NDIS_PHYSICAL_MEDIUM {NdisPhysicalMediumUnspecified = 0x0,NdisPhysicalMediumWirelessLan = 0x1,NdisPhysicalMediumCableModem = 0x2,NdisPhysicalMediumPhoneLine = 0x3,NdisPhysicalMediumPowerLine = 0x4,NdisPhysicalMediumDSL = 0x5,NdisPhysicalMediumFibreChannel = 0x6,NdisPhysicalMedium1394 = 0x7,NdisPhysicalMediumWirelessWan = 0x8,NdisPhysicalMediumMax = 0x9,};
struct _RPC_PROTSEQ_ENDPOINT {unsigned char *RpcProtocolSequence;unsigned char *Endpoint;};
enum _USER_MARSHAL_CB_TYPE {USER_MARSHAL_CB_BUFFER_SIZE = 0x0,USER_MARSHAL_CB_MARSHALL = 0x1,USER_MARSHAL_CB_UNMARSHALL = 0x2,USER_MARSHAL_CB_FREE = 0x3,};
enum __MIDL_IMenuBand_0001 {MBHANDCID_PIDLSELECT = 0x0,};
enum tag_WBEMSTATUS_FORMAT {WBEMSTATUS_FORMAT_NEWLINE = 0x0,WBEMSTATUS_FORMAT_NO_NEWLINE = 0x1,};
enum tag_WBEM_TIMEOUT_TYPE {WBEM_NO_WAIT = 0x0,WBEM_INFINITE = 0xFFFFFFFF,};
typedef struct _ACL_SIZE_INFORMATION ACL_SIZE_INFORMATION;
typedef struct tACMFILTERTAGDETAILSA ACMFILTERTAGDETAILSA;
typedef struct tACMFILTERTAGDETAILSW ACMFILTERTAGDETAILSW;
typedef struct tACMFORMATTAGDETAILSA ACMFORMATTAGDETAILSA;
typedef struct tACMFORMATTAGDETAILSW ACMFORMATTAGDETAILSW;
typedef struct _BDA_ETHERNET_ADDRESS BDA_ETHERNET_ADDRESS;
typedef struct _BDA_PROGRAM_PID_LIST BDA_PROGRAM_PID_LIST;
typedef struct _CERT_CREDENTIAL_INFO CERT_CREDENTIAL_INFO;
typedef struct _CERT_GENERAL_SUBTREE CERT_GENERAL_SUBTREE;
typedef struct _CERT_PUBLIC_KEY_INFO CERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_INFO CERT_REVOCATION_INFO;
typedef struct _CERT_REVOCATION_PARA CERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO CERT_STORE_PROV_INFO;
typedef struct _CERT_TRUST_LIST_INFO CERT_TRUST_LIST_INFO;
typedef struct _CHANGER_ELEMENT_LIST CHANGER_ELEMENT_LIST;
typedef struct _CHANGER_PRODUCT_DATA CHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_POSITION CHANGER_SET_POSITION;
typedef struct tagCInterfaceStubHeader CInterfaceStubHeader;
typedef struct _CMC_TAGGED_ATTRIBUTE CMC_TAGGED_ATTRIBUTE;
typedef struct _CMC_TAGGED_OTHER_MSG CMC_TAGGED_OTHER_MSG;
typedef struct _CMSG_CMS_SIGNER_INFO CMSG_CMS_SIGNER_INFO;
typedef struct _CRL_DIST_POINTS_INFO CRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM CRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY CRYPT_OID_FUNC_ENTRY;
typedef struct csimaadpcmwaveformat_tag CSIMAADPCMWAVEFORMAT;
typedef struct _CTL_ANY_SUBJECT_INFO CTL_ANY_SUBJECT_INFO;
typedef struct _D3DExecuteBufferDesc D3DEXECUTEBUFFERDESC;
typedef struct _D3DHAL_DP2SETINDICES D3DHAL_DP2SETINDICES;
typedef struct _D3DHAL_DP2SETPALETTE D3DHAL_DP2SETPALETTE;
typedef struct _D3DNTHAL_DP2LINELIST D3DNTHAL_DP2LINELIST;
typedef struct _D3DNTHAL_DP2SETLIGHT D3DNTHAL_DP2SETLIGHT;
typedef struct _D3DNTHAL_DP2STATESET D3DNTHAL_DP2STATESET;
typedef struct _D3DVERTEXBUFFER_DESC D3DVERTEXBUFFER_DESC;
typedef struct _DDGETPOLARITYOUTINFO DDGETPOLARITYOUTINFO;
typedef struct _DDHAL_SETENTRIESDATA DDHAL_SETENTRIESDATA;
typedef struct _DDHAL_SETPALETTEDATA DDHAL_SETPALETTEDATA;
typedef struct _DDHAL_VPORTCOLORDATA DDHAL_VPORTCOLORDATA;
typedef struct _DDNONLOCALVIDMEMCAPS DDNONLOCALVIDMEMCAPS;
typedef struct _DDVIDEOPORTBANDWIDTH DDVIDEOPORTBANDWIDTH;
typedef struct _DD_CREATEPALETTEDATA DD_CREATEPALETTEDATA;
typedef struct _DD_CREATESURFACEDATA DD_CREATESURFACEDATA;
typedef struct _DD_DESTROYMOCOMPDATA DD_DESTROYMOCOMPDATA;
typedef struct _DD_DIRECTDRAW_GLOBAL DD_DIRECTDRAW_GLOBAL;
typedef struct _DD_GETDRIVERINFODATA DD_GETDRIVERINFODATA;
typedef struct _DD_GETFLIPSTATUSDATA DD_GETFLIPSTATUSDATA;
typedef struct _DD_GETVPORTFIELDDATA DD_GETVPORTFIELDDATA;
typedef struct _DD_SYNCVIDEOPORTDATA DD_SYNCVIDEOPORTDATA;
typedef struct _DD_UPDATEOVERLAYDATA DD_UPDATEOVERLAYDATA;
typedef struct _DEVICEPROPERTYHEADER DEVICEPROPERTYHEADER;
typedef struct IDirectDraw2Vtbl DIRECTDRAW2CALLBACKS;
typedef struct IDirectDraw4Vtbl DIRECTDRAW4CALLBACKS;
typedef struct IDirectDraw7Vtbl DIRECTDRAW7CALLBACKS;
typedef struct _DOCEVENT_CREATEDCPRE DOCEVENT_CREATEDCPRE;
struct DSearchCommandEvents {struct DSearchCommandEventsVtbl *lpVtbl;};
struct DriveSizeCategorizer;
struct DriveTypeCategorizer;
typedef struct _CERTIFICATE_BLOB EFS_CERTIFICATE_BLOB;
typedef struct tagEMRCREATECOLORSPACEW EMRCREATECOLORSPACEW;
typedef struct tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
typedef struct tagEMRSETDIBITSTODEVICE EMRSETDIBITSTODEVICE;
typedef struct tagEMRSETPALETTEENTRIES EMRSETPALETTEENTRIES;
typedef struct tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
typedef struct tagEMRSETWORLDTRANSFORM EMRSETWORLDTRANSFORM;
typedef struct tagEMRFILLPATH EMRSTROKEANDFILLPATH;
typedef struct _ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUSW;
typedef struct _EVENT_TRACE_LOGFILEA EVENT_TRACE_LOGFILEA;
typedef struct _EVENT_TRACE_LOGFILEW EVENT_TRACE_LOGFILEW;
typedef struct _EXCEPTION_DEBUG_INFO EXCEPTION_DEBUG_INFO;
typedef struct _FILEGROUPDESCRIPTORA FILEGROUPDESCRIPTORA;
typedef struct _FILEGROUPDESCRIPTORW FILEGROUPDESCRIPTORW;
typedef struct _FILE_OBJECTID_BUFFER FILE_OBJECTID_BUFFER;
typedef union _FILE_SEGMENT_ELEMENT FILE_SEGMENT_ELEMENT;
typedef struct _FORMAT_EX_PARAMETERS FORMAT_EX_PARAMETERS;
typedef struct _FULL_PTR_XLAT_TABLES FULL_PTR_XLAT_TABLES;
struct FreeSpaceCategorizer;
typedef struct g721_adpcmwaveformat_tag G721_ADPCMWAVEFORMAT;
typedef struct g723_adpcmwaveformat_tag G723_ADPCMWAVEFORMAT;
typedef struct __GENERIC_BINDING_INFO GENERIC_BINDING_INFO;
typedef struct _GEN_GET_NETCARD_TIME GEN_GET_NETCARD_TIME;
typedef void *HCRYPTDEFAULTCONTEXT;
struct IAddrTrackingControl {struct IAddrTrackingControlVtbl *lpVtbl;};
struct IBrowserFrameOptions {struct IBrowserFrameOptionsVtbl *lpVtbl;};
struct IDirectDrawVideoPort {struct IDirectDrawVideoPortVtbl *lpVtbl;};
struct IDirectMusicDownload {struct IDirectMusicDownloadVtbl *lpVtbl;};
struct IDirectSound3DBuffer {struct IDirectSound3DBufferVtbl *lpVtbl;};
struct IDirectSoundFXChorus {struct IDirectSoundFXChorusVtbl *lpVtbl;};
struct IDirectSoundFXGargle {struct IDirectSoundFXGargleVtbl *lpVtbl;};
struct IEnumShellImageStore {struct IEnumShellImageStoreVtbl *lpVtbl;};
struct IEnumWbemClassObject {struct IEnumWbemClassObjectVtbl *lpVtbl;};
struct IInternetZoneManager {struct IInternetZoneManagerVtbl *lpVtbl;};
typedef struct _IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY IMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME IMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER;
typedef struct tagINITCOMMONCONTROLSEX INITCOMMONCONTROLSEX;
typedef struct _IP_ADAPTER_ADDRESSES IP_ADAPTER_ADDRESSES;
typedef struct _IP_ADAPTER_INDEX_MAP IP_ADAPTER_INDEX_MAP;
typedef struct _IP_ADAPTER_ORDER_MAP IP_ADAPTER_ORDER_MAP;
struct IPerPropertyBrowsing {struct IPerPropertyBrowsingVtbl *lpVtbl;};
struct IPersistPropertyBag2 {struct IPersistPropertyBag2Vtbl *lpVtbl;};
struct IPrintDialogCallback {struct IPrintDialogCallbackVtbl *lpVtbl;};
struct IPrintDialogServices {struct IPrintDialogServicesVtbl *lpVtbl;};
struct IQueryCancelAutoPlay {struct IQueryCancelAutoPlayVtbl *lpVtbl;};
struct IShellFolderViewDual {struct IShellFolderViewDualVtbl *lpVtbl;};
struct IShellTaskScheduler2 {struct IShellTaskScheduler2Vtbl *lpVtbl;};
struct IWbemBackupRestoreEx {struct IWbemBackupRestoreExVtbl *lpVtbl;};
struct IWbemClientTransport {struct IWbemClientTransportVtbl *lpVtbl;};
struct IXMLDOMCharacterData {struct IXMLDOMCharacterDataVtbl *lpVtbl;};
typedef struct _KERB_DECRYPT_REQUEST KERB_DECRYPT_REQUEST;
typedef struct _KERB_EXTERNAL_TICKET KERB_EXTERNAL_TICKET;
typedef struct _299134A1587F81C88B1AF91D3DBFCA39 KSAC3_DIALOGUE_LEVEL;
typedef struct _BF6BFD8678B7E7ABDC56122D693BAF10 KSAUDIO_MIXCAP_TABLE;
typedef struct _38332C6D8513F636DCCBCCABE200BE7A KSDS3D_HRTF_INIT_MSG;
typedef struct _97739C7249C02ACEBAF17DFC34E3F72B KSMULTIPLE_DATA_PROP;
typedef struct _7D6AD1D4C0599A70ED2A75DF53A62D54 KSPROPERTY_POSITIONS;
typedef struct _F1FF9EB17A5B0DC512AB60E4FE6215DC KSPROPERTY_SERIALHDR;
typedef struct _85CBE24E9ED55DBB779718CA5D73A273 KSPROPERTY_TVAUDIO_S;
typedef struct tagLAYERPLANEDESCRIPTOR LAYERPLANEDESCRIPTOR;
typedef struct _455481A63A960E136730B1239333B9FD *LPAVICOMPRESSOPTIONS;
typedef struct _BIDI_RESPONSE_DATA *LPBIDI_RESPONSE_DATA;
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;
typedef struct tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;
typedef struct _D3DHAL_DP2LINELIST *LPD3DHAL_DP2LINELIST;
typedef struct _D3DLIGHTINGELEMENT *LPD3DLIGHTINGELEMENT;
typedef struct _D3DNTDeviceDesc_V3 *LPD3DNTDEVICEDESC_V3;
typedef struct _D3DPROCESSVERTICES *LPD3DPROCESSVERTICES;
typedef struct tagDDDEVICEIDENTIFIER *LPDDDEVICEIDENTIFIER;
typedef struct _DDMCCOMPBUFFERINFO *LPDDMCCOMPBUFFERINFO;
typedef struct _DDMOCOMPBUFFERINFO *LPDDMOCOMPBUFFERINFO;
typedef struct _DDVIDEOPORTCONNECT *LPDDVIDEOPORTCONNECT;
typedef struct IDirect3DSwapChain8 *LPDIRECT3DSWAPCHAIN8;
typedef struct IDirectDrawSurface2 *LPDIRECTDRAWSURFACE2;
typedef struct IDirectDrawSurface3 *LPDIRECTDRAWSURFACE3;
typedef struct IDirectDrawSurface4 *LPDIRECTDRAWSURFACE4;
typedef struct IDirectDrawSurface7 *LPDIRECTDRAWSURFACE7;
typedef struct IDirectSoundBuffer8 *LPDIRECTSOUNDBUFFER8;
typedef struct IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;
typedef struct IDirectSoundFXEcho *LPDIRECTSOUNDFXECHO8;
typedef struct IDirectSoundNotify *LPDIRECTSOUNDNOTIFY8;
typedef struct _DSCFXNoiseSuppress *LPDSCFXNoiseSuppress;
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
typedef struct _25388EDDA6F9AFF912B25CA06CA16E0D *LPEXP_SPECIAL_FOLDER;
typedef IExternalConnection *LPEXTERNALCONNECTION;
typedef struct _GETVERSIONINPARAMS *LPGETVERSIONINPARAMS;
typedef struct tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT;
typedef struct tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW *LPMCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS;
typedef struct tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW *LPMIXERLINECONTROLSW;
typedef struct tagNMHDFILTERBTNCLICK *LPNMHDFILTERBTNCLICK;
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
typedef struct _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW;
typedef IPersistPropertyBag *LPPERSISTPROPERTYBAG;
typedef struct _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;
typedef IPropertyNotifySink *LPPROPERTYNOTIFYSINK;
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;
typedef struct _RSVP_FILTERSPEC_V4 *LPRSVP_FILTERSPEC_V4;
typedef struct _RSVP_FILTERSPEC_V6 *LPRSVP_FILTERSPEC_V6;
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D *LPSCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F *LPSCARD_READERSTATEW;
typedef struct _SERVICE_ASYNC_INFO *LPSERVICE_ASYNC_INFO;
typedef struct _SERVICE_TYPE_VALUE *LPSERVICE_TYPE_VALUE;
typedef IShellTaskScheduler *LPSHELLTASKSCHEDULER;
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;
typedef struct _WINDOWS_DEVICELIST *LPWINDOWS_DEVICELIST;
typedef struct _WSANAMESPACE_INFOA *LPWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *LPWSANAMESPACE_INFOW;
typedef struct _LSA_AUTH_INFORMATION LSA_AUTH_INFORMATION;
enum MACRO_APMMENUSUSPEND {APMMENUSUSPEND_DISABLED = 0,APMMENUSUSPEND_ENABLED = 1,APMMENUSUSPEND_UNDOCKED = 2,APMMENUSUSPEND_NOCHANGE = 128,};
enum MACRO_AVIFILEHANDLER {AVIFILEHANDLER_CANREAD = 0x1,AVIFILEHANDLER_CANWRITE = 0x2,AVIFILEHANDLER_CANACCEPTNONRGB = 0x4,};
enum MACRO_AVSTREAMMASTER {AVSTREAMMASTER_AUDIO = 0,AVSTREAMMASTER_NONE = 1,};
enum MACRO_BUTTON_PRESSED {FROM_LEFT_1ST_BUTTON_PRESSED = 0x1,RIGHTMOST_BUTTON_PRESSED = 0x2,FROM_LEFT_2ND_BUTTON_PRESSED = 0x4,FROM_LEFT_3RD_BUTTON_PRESSED = 0x8,FROM_LEFT_4TH_BUTTON_PRESSED = 0x10,};
enum MACRO_CCM_SETVERSION {CCM_SETVERSION = 0x2007,CCM_GETVERSION = 0x2008,CCM_SETNOTIFYWINDOW = 0x2009,CCM_SETWINDOWTHEME = 0x200B,CCM_DPISCALE = 0x200C,};
enum MACRO_CF_SCREENFONTS {CF_SCREENFONTS = 0x1,CF_PRINTERFONTS = 0x2,CF_BOTH = 0x3,CF_SHOWHELP = 0x4,CF_ENABLEHOOK = 0x8,CF_ENABLETEMPLATE = 0x10,CF_ENABLETEMPLATEHANDLE = 0x20,CF_INITTOLOGFONTSTRUCT = 0x40,CF_USESTYLE = 0x80,CF_EFFECTS = 0x100,CF_APPLY = 0x200,CF_ANSIONLY = 0x400,CF_SCRIPTSONLY = 0x400,CF_NOVECTORFONTS = 0x800,CF_NOOEMFONTS = 0x800,CF_NOSIMULATIONS = 0x1000,CF_LIMITSIZE = 0x2000,CF_FIXEDPITCHONLY = 0x4000,CF_WYSIWYG = 0x8000,CF_FORCEFONTEXIST = 0x10000,CF_SCALABLEONLY = 0x20000,CF_TTONLY = 0x40000,CF_NOFACESEL = 0x80000,CF_NOSTYLESEL = 0x100000,CF_NOSIZESEL = 0x200000,CF_SELECTSCRIPT = 0x400000,CF_NOSCRIPTSEL = 0x800000,CF_NOVERTFONTS = 0x1000000,};
enum MACRO_CHECKPNGFORMAT {CHECKPNGFORMAT = 4120,};
enum MACRO_COPYFILE_EVENT {COPYFILE_EVENT_SET_PRINTER_DATAEX = 1,COPYFILE_EVENT_DELETE_PRINTER = 2,COPYFILE_EVENT_ADD_PRINTER_CONNECTION = 3,COPYFILE_EVENT_DELETE_PRINTER_CONNECTION = 4,COPYFILE_EVENT_FILES_CHANGED = 5,COPYFILE_FLAG_CLIENT_SPOOLER = 1,COPYFILE_FLAG_SERVER_SPOOLER = 2,};
enum MACRO_CRYPT_MODE_CBC {CRYPT_MODE_CBC = 1,CRYPT_MODE_ECB = 2,CRYPT_MODE_OFB = 3,CRYPT_MODE_CFB = 4,CRYPT_MODE_CTS = 5,CRYPT_ENCRYPT = 1,CRYPT_DECRYPT = 2,CRYPT_EXPORT = 4,CRYPT_READ = 8,CRYPT_WRITE = 16,CRYPT_MAC = 32,CRYPT_EXPORT_KEY = 64,CRYPT_IMPORT_KEY = 128,CRYPT_ARCHIVE = 256,};
enum MACRO_CRYPT_RETRIEVE {CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 0x1,CRYPT_CACHE_ONLY_RETRIEVAL = 0x2,CRYPT_WIRE_ONLY_RETRIEVAL = 0x4,CRYPT_DONT_CACHE_RESULT = 0x8,CRYPT_ASYNC_RETRIEVAL = 0x10,CRYPT_STICKY_CACHE_RETRIEVAL = 0x1000,CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 0x2000,CRYPT_OFFLINE_CHECK_RETRIEVAL = 0x4000,CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 0x8000,CRYPT_LDAP_SIGN_RETRIEVAL = 0x10000,CRYPT_NO_AUTH_RETRIEVAL = 0x20000,CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 0x40000,CRYPT_AIA_RETRIEVAL = 0x80000,CRYPT_VERIFY_CONTEXT_SIGNATURE = 0x20,CRYPT_VERIFY_DATA_HASH = 0x40,CRYPT_KEEP_TIME_VALID = 0x80,CRYPT_DONT_VERIFY_SIGNATURE = 0x100,CRYPT_DONT_CHECK_TIME_VALIDITY = 0x200,CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 0x400,CRYPT_ACCUMULATIVE_TIMEOUT = 0x800,CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION = 0x1,CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL = 0x2,CRYPT_GET_URL_FROM_PROPERTY = 0x1,CRYPT_GET_URL_FROM_EXTENSION = 0x2,CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 0x4,CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 0x8,};
enum MACRO_CRYPT_USERDATA {CRYPT_USERDATA = 1,};
enum MACRO_CWCSTORAGENAME {CWCSTORAGENAME = 32,};
enum MACRO_D3DERR_COMMAND {D3DERR_COMMAND_UNPARSED = -2005529672,};
enum MACRO_D3DHAL_CONTEXT {D3DHAL_CONTEXT_BAD = 0x200,D3DHAL_OUTOFCONTEXTS = 0x201,D3DHAL_EXECUTE_ABORT = 0x210,D3DHAL_EXECUTE_UNHANDLED = 0x211,};
enum MACRO_D3DPRASTERCAPS {D3DPRASTERCAPS_DITHER = 0x1,D3DPRASTERCAPS_PAT = 0x8,D3DPRASTERCAPS_ZTEST = 0x10,D3DPRASTERCAPS_FOGVERTEX = 0x80,D3DPRASTERCAPS_FOGTABLE = 0x100,D3DPRASTERCAPS_ANTIALIASEDGES = 0x1000,D3DPRASTERCAPS_MIPMAPLODBIAS = 0x2000,D3DPRASTERCAPS_ZBIAS = 0x4000,D3DPRASTERCAPS_ZBUFFERLESSHSR = 0x8000,D3DPRASTERCAPS_FOGRANGE = 0x10000,D3DPRASTERCAPS_ANISOTROPY = 0x20000,D3DPRASTERCAPS_WBUFFER = 0x40000,D3DPRASTERCAPS_WFOG = 0x100000,D3DPRASTERCAPS_ZFOG = 0x200000,D3DPRASTERCAPS_COLORPERSPECTIVE = 0x400000,D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE = 0x800000,};
enum MACRO_D3DPRESENTFLAG {D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 0x1,};
enum MACRO_D3DPTBLENDCAPS {D3DPTBLENDCAPS_DECAL = 0x1,D3DPTBLENDCAPS_MODULATE = 0x2,D3DPTBLENDCAPS_DECALALPHA = 0x4,D3DPTBLENDCAPS_MODULATEALPHA = 0x8,D3DPTBLENDCAPS_DECALMASK = 0x10,D3DPTBLENDCAPS_MODULATEMASK = 0x20,D3DPTBLENDCAPS_COPY = 0x40,D3DPTBLENDCAPS_ADD = 0x80,};
enum MACRO_D3DRENDERSTATE {D3DRENDERSTATE_WRAPBIAS = 128,};
enum MACRO_D3DSTENCILCAPS {D3DSTENCILCAPS_KEEP = 0x1,D3DSTENCILCAPS_ZERO = 0x2,D3DSTENCILCAPS_REPLACE = 0x4,D3DSTENCILCAPS_INCRSAT = 0x8,D3DSTENCILCAPS_DECRSAT = 0x10,D3DSTENCILCAPS_INVERT = 0x20,D3DSTENCILCAPS_INCR = 0x40,D3DSTENCILCAPS_DECR = 0x80,};
enum MACRO_D3DVS_INPUTREG {D3DVS_INPUTREG_MAX_V1_1 = 16,D3DVS_TEMPREG_MAX_V1_1 = 12,D3DVS_CONSTREG_MAX_V1_1 = 96,D3DVS_TCRDOUTREG_MAX_V1_1 = 8,D3DVS_ADDRREG_MAX_V1_1 = 1,D3DVS_ATTROUTREG_MAX_V1_1 = 2,D3DVS_MAXINSTRUCTIONCOUNT_V1_1 = 128,};
enum MACRO_DDENUMOVERLAYZ {DDENUMOVERLAYZ_BACKTOFRONT = 0x0,DDENUMOVERLAYZ_FRONTTOBACK = 0x1,};
enum MACRO_DDENUMSURFACES {DDENUMSURFACES_ALL = 0x1,DDENUMSURFACES_MATCH = 0x2,DDENUMSURFACES_NOMATCH = 0x4,DDENUMSURFACES_CANBECREATED = 0x8,DDENUMSURFACES_DOESEXIST = 0x10,};
enum MACRO_DESKTOPHORZRES {DESKTOPHORZRES = 118,};
enum MACRO_DESKTOPVERTRES {DESKTOPVERTRES = 117,};
enum MACRO_DIARESIS_TONOS {DIARESIS_TONOS = 0x385,};
enum MACRO_DLGWINDOWEXTRA {DLGWINDOWEXTRA = 30,};
enum MACRO_DMDISPLAYFLAGS {DMDISPLAYFLAGS_TEXTMODE = 0x4,};
enum MACRO_DM_SPECVERSION {DM_SPECVERSION = 0x401,DM_ORIENTATION = 0x1,DM_PAPERSIZE = 0x2,DM_PAPERLENGTH = 0x4,DM_PAPERWIDTH = 0x8,DM_SCALE = 0x10,DM_POSITION = 0x20,DM_NUP = 0x40,DM_DISPLAYORIENTATION = 0x80,DM_COPIES = 0x100,DM_DEFAULTSOURCE = 0x200,DM_PRINTQUALITY = 0x400,DM_COLOR = 0x800,DM_DUPLEX = 0x1000,DM_YRESOLUTION = 0x2000,DM_TTOPTION = 0x4000,DM_COLLATE = 0x8000,DM_FORMNAME = 0x10000,DM_LOGPIXELS = 0x20000,DM_BITSPERPEL = 0x40000,DM_PELSWIDTH = 0x80000,DM_PELSHEIGHT = 0x100000,DM_DISPLAYFLAGS = 0x200000,DM_DISPLAYFREQUENCY = 0x400000,DM_ICMMETHOD = 0x800000,DM_ICMINTENT = 0x1000000,DM_MEDIATYPE = 0x2000000,DM_DITHERTYPE = 0x4000000,DM_PANNINGWIDTH = 0x8000000,DM_PANNINGHEIGHT = 0x10000000,DM_DISPLAYFIXEDOUTPUT = 0x20000000,};
enum MACRO_DOWNLOADHEADER {DOWNLOADHEADER = 4111,};
enum MACRO_DRIVER_OVERRAN {DRIVER_OVERRAN_STACK_BUFFER = 0xF7,};
enum MACRO_ENABLE_DISABLE {ENABLE_DISABLE_AUTOSAVE = 0xD2,};
enum MACRO_ERROR_AUDITING {ERROR_AUDITING_DISABLED = 0xC0090001,ERROR_ALL_SIDS_FILTERED = 0xC0090002,};
enum MACRO_ERROR_EXPECTED {ERROR_EXPECTED_SECTION_NAME = -536870912,ERROR_BAD_SECTION_NAME_LINE = -536870911,ERROR_SECTION_NAME_TOO_LONG = -536870910,ERROR_GENERAL_SYNTAX = -536870909,ERROR_WRONG_INF_STYLE = -536870656,ERROR_SECTION_NOT_FOUND = -536870655,ERROR_LINE_NOT_FOUND = -536870654,ERROR_NO_BACKUP = -536870653,ERROR_NO_ASSOCIATED_CLASS = -536870400,ERROR_CLASS_MISMATCH = -536870399,ERROR_DUPLICATE_FOUND = -536870398,ERROR_NO_DRIVER_SELECTED = -536870397,ERROR_KEY_DOES_NOT_EXIST = -536870396,ERROR_INVALID_DEVINST_NAME = -536870395,ERROR_INVALID_CLASS = -536870394,ERROR_DEVINST_ALREADY_EXISTS = -536870393,ERROR_DEVINFO_NOT_REGISTERED = -536870392,ERROR_INVALID_REG_PROPERTY = -536870391,ERROR_NO_INF = -536870390,ERROR_NO_SUCH_DEVINST = -536870389,ERROR_CANT_LOAD_CLASS_ICON = -536870388,ERROR_INVALID_CLASS_INSTALLER = -536870387,ERROR_DI_DO_DEFAULT = -536870386,ERROR_DI_NOFILECOPY = -536870385,ERROR_INVALID_HWPROFILE = -536870384,ERROR_NO_DEVICE_SELECTED = -536870383,ERROR_DEVINFO_LIST_LOCKED = -536870382,ERROR_DEVINFO_DATA_LOCKED = -536870381,ERROR_DI_BAD_PATH = -536870380,ERROR_NO_CLASSINSTALL_PARAMS = -536870379,ERROR_FILEQUEUE_LOCKED = -536870378,ERROR_BAD_SERVICE_INSTALLSECT = -536870377,ERROR_NO_CLASS_DRIVER_LIST = -536870376,ERROR_NO_ASSOCIATED_SERVICE = -536870375,ERROR_NO_DEFAULT_DEVICE_INTERFACE = -536870374,ERROR_DEVICE_INTERFACE_ACTIVE = -536870373,ERROR_DEVICE_INTERFACE_REMOVED = -536870372,ERROR_BAD_INTERFACE_INSTALLSECT = -536870371,ERROR_NO_SUCH_INTERFACE_CLASS = -536870370,ERROR_INVALID_REFERENCE_STRING = -536870369,ERROR_INVALID_MACHINENAME = -536870368,ERROR_REMOTE_COMM_FAILURE = -536870367,ERROR_MACHINE_UNAVAILABLE = -536870366,ERROR_NO_CONFIGMGR_SERVICES = -536870365,ERROR_INVALID_PROPPAGE_PROVIDER = -536870364,ERROR_NO_SUCH_DEVICE_INTERFACE = -536870363,ERROR_DI_POSTPROCESSING_REQUIRED = -536870362,ERROR_INVALID_COINSTALLER = -536870361,ERROR_NO_COMPAT_DRIVERS = -536870360,ERROR_NO_DEVICE_ICON = -536870359,ERROR_INVALID_INF_LOGCONFIG = -536870358,ERROR_DI_DONT_INSTALL = -536870357,ERROR_INVALID_FILTER_DRIVER = -536870356,ERROR_NON_WINDOWS_NT_DRIVER = -536870355,ERROR_NON_WINDOWS_DRIVER = -536870354,ERROR_NO_CATALOG_FOR_OEM_INF = -536870353,ERROR_DEVINSTALL_QUEUE_NONNATIVE = -536870352,ERROR_NOT_DISABLEABLE = -536870351,ERROR_CANT_REMOVE_DEVINST = -536870350,ERROR_INVALID_TARGET = -536870349,ERROR_DRIVER_NONNATIVE = -536870348,ERROR_IN_WOW64 = -536870347,ERROR_SET_SYSTEM_RESTORE_POINT = -536870346,ERROR_INCORRECTLY_COPIED_INF = -536870345,ERROR_SCE_DISABLED = -536870344,ERROR_UNKNOWN_EXCEPTION = -536870343,ERROR_PNP_REGISTRY_ERROR = -536870342,ERROR_REMOTE_REQUEST_UNSUPPORTED = -536870341,ERROR_NOT_AN_INSTALLED_OEM_INF = -536870340,ERROR_INF_IN_USE_BY_DEVICES = -536870339,ERROR_DI_FUNCTION_OBSOLETE = -536870338,ERROR_NO_AUTHENTICODE_CATALOG = -536870337,ERROR_AUTHENTICODE_DISALLOWED = -536870336,ERROR_AUTHENTICODE_TRUSTED_PUBLISHER = -536870335,ERROR_AUTHENTICODE_TRUST_NOT_ESTABLISHED = -536870334,ERROR_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = -536870333,ERROR_SIGNATURE_OSATTRIBUTE_MISMATCH = -536870332,ERROR_ONLY_VALIDATE_VIA_AUTHENTICODE = -536870331,ERROR_UNRECOVERABLE_STACK_OVERFLOW = -536870144,};
enum MACRO_FEATURESETTING {FEATURESETTING_NUP = 0,FEATURESETTING_OUTPUT = 1,FEATURESETTING_PSLEVEL = 2,FEATURESETTING_CUSTPAPER = 3,FEATURESETTING_MIRROR = 4,FEATURESETTING_NEGATIVE = 5,FEATURESETTING_PROTOCOL = 6,FEATURESETTING_PRIVATE_BEGIN = 4096,FEATURESETTING_PRIVATE_END = 8191,};
enum MACRO_FORMATDLGORD30 {FORMATDLGORD30 = 1544,};
enum MACRO_FORMATDLGORD31 {FORMATDLGORD31 = 1543,};
enum MACRO_GCL_CONVERSION {GCL_CONVERSION = 0x1,GCL_REVERSECONVERSION = 0x2,GCL_REVERSE_LENGTH = 0x3,};
enum MACRO_GETDEVICEUNITS {GETDEVICEUNITS = 42,GETEXTENDEDTEXTMETRICS = 256,};
enum MACRO_GETEXTENTTABLE {GETEXTENTTABLE = 257,};
enum MACRO_GMEM_DISCARDED {GMEM_DISCARDED = 0x4000,GMEM_LOCKCOUNT = 0xFF,};
enum MACRO_ID_DEFAULTINST {ID_DEFAULTINST = -2,};
enum MACRO_IMAGE_SEPARATE {IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 0x8000,IMAGE_SEPARATE_DEBUG_MISMATCH = 0x8000,};
enum MACRO_INTERNAL_ERROR {XNS_INTERNAL_ERROR = 0x57,FTDISK_INTERNAL_ERROR = 0x58,};
enum MACRO_INVALID_KERNEL {INVALID_KERNEL_HANDLE = 0x93,};
enum MACRO_INVALID_REGION {INVALID_REGION_OR_SEGMENT = 0x99,};
enum MACRO_INVALID_SOCKET {INVALID_SOCKET = 4294967295,};
enum MACRO_IOCTL_DISK_GET {IOCTL_DISK_GET_PARTITION_INFO_EX = 0x70048,IOCTL_DISK_SET_PARTITION_INFO_EX = 0x7C04C,IOCTL_DISK_GET_DRIVE_LAYOUT_EX = 0x70050,IOCTL_DISK_SET_DRIVE_LAYOUT_EX = 0x7C054,IOCTL_DISK_CREATE_DISK = 0x7C058,IOCTL_DISK_GET_LENGTH_INFO = 0x7405C,IOCTL_DISK_GET_DRIVE_GEOMETRY_EX = 0x700A0,IOCTL_DISK_UPDATE_DRIVE_SIZE = 0x7C0C8,IOCTL_DISK_GROW_PARTITION = 0x7C0D0,IOCTL_DISK_GET_CACHE_INFORMATION = 0x740D4,IOCTL_DISK_SET_CACHE_INFORMATION = 0x7C0D8,};
enum MACRO_LGRPID_WESTERN {LGRPID_WESTERN_EUROPE = 0x1,LGRPID_CENTRAL_EUROPE = 0x2,LGRPID_BALTIC = 0x3,LGRPID_GREEK = 0x4,LGRPID_CYRILLIC = 0x5,LGRPID_TURKISH = 0x6,LGRPID_JAPANESE = 0x7,LGRPID_KOREAN = 0x8,LGRPID_TRADITIONAL_CHINESE = 0x9,LGRPID_SIMPLIFIED_CHINESE = 0xA,LGRPID_THAI = 0xB,LGRPID_HEBREW = 0xC,LGRPID_ARABIC = 0xD,LGRPID_VIETNAMESE = 0xE,LGRPID_INDIC = 0xF,LGRPID_GEORGIAN = 0x10,LGRPID_ARMENIAN = 0x11,};
enum MACRO_LMEM_DISCARDED {LMEM_DISCARDED = 0x4000,LMEM_LOCKCOUNT = 0xFF,};
enum MACRO_LVM_GETCOLUMNA {LVM_GETCOLUMNA = 4121,LVM_GETCOLUMNW = 4191,LVM_GETCOLUMN = 4121,LVM_SETCOLUMNA = 4122,LVM_SETCOLUMNW = 4192,LVM_SETCOLUMN = 4122,LVM_INSERTCOLUMNA = 4123,LVM_INSERTCOLUMNW = 4193,LVM_INSERTCOLUMN = 4123,LVM_DELETECOLUMN = 4124,LVM_GETCOLUMNWIDTH = 4125,};
enum MACRO_LmCharSetASCII {LmCharSetASCII = 0,};
enum MACRO_MAX_DDDEVICEID {MAX_DDDEVICEID_STRING = 512,};
enum MACRO_MB_PRECOMPOSED {MB_PRECOMPOSED = 0x1,MB_COMPOSITE = 0x2,MB_USEGLYPHCHARS = 0x4,MB_ERR_INVALID_CHARS = 0x8,};
enum MACRO_MCAST_BOUNDARY {MCAST_BOUNDARY = 26,MCAST_SCOPE = 27,};
enum MACRO_MOM_POSITIONCB {MOM_POSITIONCB = 970,};
enum MACRO_MULTICLASSINFO {MULTICLASSINFO_GETTYPEINFO = 0x1,MULTICLASSINFO_GETNUMRESERVEDDISPIDS = 0x2,MULTICLASSINFO_GETIIDPRIMARY = 0x4,MULTICLASSINFO_GETIIDSOURCE = 0x8,};
enum MACRO_MULTIPROCESSOR {MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED = 0x3E,};
enum MACRO_NCBCHAINSENDNA {NCBCHAINSENDNA = 0x72,};
enum MACRO_NEWFILEOPENORD {NEWFILEOPENORD = 1547,};
enum MACRO_NEWTRANSPARENT {NEWTRANSPARENT = 3,QUERYROPSUPPORT = 40,};
enum MACRO_NO_MORE_SYSTEM {NO_MORE_SYSTEM_PTES = 0x3F,};
enum MACRO_OUT_OF_INDEXES {FLS_OUT_OF_INDEXES = 0xFFFFFFFF,TLS_OUT_OF_INDEXES = 0xFFFFFFFF,};
enum MACRO_PBM_SETMARQUEE {PBM_SETMARQUEE = 1034,};
enum MACRO_PHYSICALHEIGHT {PHYSICALHEIGHT = 111,};
enum MACRO_PIFDEFFILESIZE {PIFDEFFILESIZE = 80,PIFMAXFILEPATH = 260,};
enum MACRO_PKCS_ATTRIBUTE {PKCS_ATTRIBUTE = 22,PKCS_CONTENT_INFO_SEQUENCE_OF_ANY = 23,};
enum MACRO_PRINTER_ACCESS {PRINTER_ACCESS_ADMINISTER = 0x4,PRINTER_ACCESS_USE = 0x8,};
enum MACRO_PRINTER_CHANGE {PRINTER_CHANGE_ADD_PRINTER = 0x1,PRINTER_CHANGE_SET_PRINTER = 0x2,PRINTER_CHANGE_DELETE_PRINTER = 0x4,PRINTER_CHANGE_FAILED_CONNECTION_PRINTER = 0x8,PRINTER_CHANGE_PRINTER = 0xFF,PRINTER_CHANGE_ADD_JOB = 0x100,PRINTER_CHANGE_SET_JOB = 0x200,PRINTER_CHANGE_DELETE_JOB = 0x400,PRINTER_CHANGE_WRITE_JOB = 0x800,PRINTER_CHANGE_JOB = 0xFF00,PRINTER_CHANGE_ADD_FORM = 0x10000,PRINTER_CHANGE_SET_FORM = 0x20000,PRINTER_CHANGE_DELETE_FORM = 0x40000,PRINTER_CHANGE_FORM = 0x70000,PRINTER_CHANGE_ADD_PORT = 0x100000,PRINTER_CHANGE_CONFIGURE_PORT = 0x200000,PRINTER_CHANGE_DELETE_PORT = 0x400000,PRINTER_CHANGE_PORT = 0x700000,PRINTER_CHANGE_ADD_PRINT_PROCESSOR = 0x1000000,PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = 0x4000000,PRINTER_CHANGE_PRINT_PROCESSOR = 0x7000000,PRINTER_CHANGE_ADD_PRINTER_DRIVER = 0x10000000,PRINTER_CHANGE_SET_PRINTER_DRIVER = 0x20000000,PRINTER_CHANGE_DELETE_PRINTER_DRIVER = 0x40000000,PRINTER_CHANGE_PRINTER_DRIVER = 0x70000000,PRINTER_CHANGE_TIMEOUT = 0x80000000,PRINTER_CHANGE_ALL = 0x7777FFFF,PRINTER_ERROR_INFORMATION = 0x80000000,PRINTER_ERROR_WARNING = 0x40000000,PRINTER_ERROR_SEVERE = 0x20000000,PRINTER_ERROR_OUTOFPAPER = 0x1,PRINTER_ERROR_JAM = 0x2,PRINTER_ERROR_OUTOFTONER = 0x4,};
enum MACRO_PRINTER_NOTIFY {PRINTER_NOTIFY_FIELD_SERVER_NAME = 0x0,PRINTER_NOTIFY_FIELD_PRINTER_NAME = 0x1,PRINTER_NOTIFY_FIELD_SHARE_NAME = 0x2,PRINTER_NOTIFY_FIELD_PORT_NAME = 0x3,PRINTER_NOTIFY_FIELD_DRIVER_NAME = 0x4,PRINTER_NOTIFY_FIELD_COMMENT = 0x5,PRINTER_NOTIFY_FIELD_LOCATION = 0x6,PRINTER_NOTIFY_FIELD_DEVMODE = 0x7,PRINTER_NOTIFY_FIELD_SEPFILE = 0x8,PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = 0x9,PRINTER_NOTIFY_FIELD_PARAMETERS = 0xA,PRINTER_NOTIFY_FIELD_DATATYPE = 0xB,PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0xC,PRINTER_NOTIFY_FIELD_ATTRIBUTES = 0xD,PRINTER_NOTIFY_FIELD_PRIORITY = 0xE,PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = 0xF,PRINTER_NOTIFY_FIELD_START_TIME = 0x10,PRINTER_NOTIFY_FIELD_UNTIL_TIME = 0x11,PRINTER_NOTIFY_FIELD_STATUS = 0x12,PRINTER_NOTIFY_FIELD_STATUS_STRING = 0x13,PRINTER_NOTIFY_FIELD_CJOBS = 0x14,PRINTER_NOTIFY_FIELD_AVERAGE_PPM = 0x15,PRINTER_NOTIFY_FIELD_TOTAL_PAGES = 0x16,PRINTER_NOTIFY_FIELD_PAGES_PRINTED = 0x17,PRINTER_NOTIFY_FIELD_TOTAL_BYTES = 0x18,PRINTER_NOTIFY_FIELD_BYTES_PRINTED = 0x19,PRINTER_NOTIFY_FIELD_OBJECT_GUID = 0x1A,};
enum MACRO_PRIORITY_CLASS {NORMAL_PRIORITY_CLASS = 0x20,IDLE_PRIORITY_CLASS = 0x40,HIGH_PRIORITY_CLASS = 0x80,REALTIME_PRIORITY_CLASS = 0x100,};
enum MACRO_PRIVATEKEYBLOB {PRIVATEKEYBLOB = 0x7,PLAINTEXTKEYBLOB = 0x8,};
enum MACRO_PRNSETUPDLGORD {PRNSETUPDLGORD = 1539,};
enum MACRO_PROFILE_LINKED {PROFILE_LINKED = 1279872587,PROFILE_EMBEDDED = 1296188740,};
enum MACRO_PSUIPAGEINSERT {PSUIPAGEINSERT_GROUP_PARENT = 0,PSUIPAGEINSERT_PCOMPROPSHEETUI = 1,PSUIPAGEINSERT_PFNPROPSHEETUI = 2,PSUIPAGEINSERT_PROPSHEETPAGE = 3,PSUIPAGEINSERT_HPROPSHEETPAGE = 4,PSUIPAGEINSERT_DLL = 5,};
enum MACRO_RB_DITHERCOLOR {RB_DITHERCOLOR = 0x80000000,};
enum MACRO_RPC_C_SECURITY {RPC_C_SECURITY_QOS_VERSION_2 = 2,RPC_C_AUTHN_INFO_TYPE_HTTP = 1,RPC_C_HTTP_AUTHN_TARGET_SERVER = 1,RPC_C_HTTP_AUTHN_TARGET_PROXY = 2,RPC_C_HTTP_AUTHN_SCHEME_BASIC = 1,RPC_C_HTTP_AUTHN_SCHEME_NTLM = 2,RPC_C_HTTP_AUTHN_SCHEME_PASSPORT = 4,RPC_C_HTTP_AUTHN_SCHEME_DIGEST = 8,RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE = 16,RPC_C_HTTP_FLAG_USE_SSL = 1,RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME = 2,RPC_C_SECURITY_QOS_VERSION_3 = 3,RPC_C_AUTHZ_NONE = 0,RPC_C_AUTHZ_NAME = 1,RPC_C_AUTHZ_DCE = 2,RPC_C_AUTHZ_DEFAULT = -1,};
enum MACRO_SCALINGFACTORX {SCALINGFACTORX = 114,};
enum MACRO_SCALINGFACTORY {SCALINGFACTORY = 115,};
enum MACRO_SEARCH_NEAREST {SEARCH_NEAREST = 4,SEARCH_BACKWARD = 4,SEARCH_FORWARD = 1,SEARCH_KEY = 16,SEARCH_ANY = 32,};
enum MACRO_SFVM_REARRANGE {SFVM_REARRANGE = 0x1,SFVM_ADDOBJECT = 0x3,SFVM_REMOVEOBJECT = 0x6,SFVM_UPDATEOBJECT = 0x7,SFVM_GETSELECTEDOBJECTS = 0x9,SFVM_SETITEMPOS = 0xE,SFVM_SETCLIPBOARD = 0x10,SFVM_SETPOINTS = 0x17,};
enum MACRO_SHADEBLENDCAPS {SHADEBLENDCAPS = 120,};
enum MACRO_SO_CONDITIONAL {SO_CONDITIONAL_ACCEPT = 0x3002,};
enum MACRO_SP_NOTREPORTED {SP_NOTREPORTED = 0x4000,SP_ERROR = 0xFFFFFFFF,SP_APPABORT = 0xFFFFFFFE,SP_USERABORT = 0xFFFFFFFD,SP_OUTOFDISK = 0xFFFFFFFC,SP_OUTOFMEMORY = 0xFFFFFFFB,};
enum MACRO_STATUS_SEGMENT {STATUS_SEGMENT_NOTIFICATION = 0x40000005,};
enum MACRO_SYSTEM_LICENSE {SYSTEM_LICENSE_VIOLATION = 0x9A,};
enum MACRO_TBN_GETINFOTIP {TBN_GETINFOTIP = -718,};
enum MACRO_TB_ADDBUTTONSA {TB_ADDBUTTONSA = 1044,TB_INSERTBUTTONA = 1045,TB_DELETEBUTTON = 1046,TB_GETBUTTON = 1047,TB_BUTTONCOUNT = 1048,TB_COMMANDTOINDEX = 1049,TB_SAVERESTOREA = 1050,TB_SAVERESTOREW = 1100,TB_CUSTOMIZE = 1051,TB_ADDSTRINGA = 1052,TB_ADDSTRINGW = 1101,TB_GETITEMRECT = 1053,TB_BUTTONSTRUCTSIZE = 1054,TB_SETBUTTONSIZE = 1055,TB_SETBITMAPSIZE = 1056,TB_AUTOSIZE = 1057,TB_GETTOOLTIPS = 1059,TB_SETTOOLTIPS = 1060,TB_SETPARENT = 1061,TB_SETROWS = 1063,TB_GETROWS = 1064,TB_SETCMDID = 1066,TB_CHANGEBITMAP = 1067,TB_GETBITMAP = 1068,TB_GETBUTTONTEXTA = 1069,TB_GETBUTTONTEXTW = 1099,TB_REPLACEBITMAP = 1070,TB_SETINDENT = 1071,TB_SETIMAGELIST = 1072,TB_GETIMAGELIST = 1073,TB_LOADIMAGES = 1074,TB_GETRECT = 1075,TB_SETHOTIMAGELIST = 1076,TB_GETHOTIMAGELIST = 1077,TB_SETDISABLEDIMAGELIST = 1078,TB_GETDISABLEDIMAGELIST = 1079,TB_SETSTYLE = 1080,TB_GETSTYLE = 1081,TB_GETBUTTONSIZE = 1082,TB_SETBUTTONWIDTH = 1083,TB_SETMAXTEXTROWS = 1084,TB_GETTEXTROWS = 1085,TB_GETBUTTONTEXT = 1069,TB_SAVERESTORE = 1050,TB_ADDSTRING = 1052,TB_GETOBJECT = 1086,TB_GETHOTITEM = 1095,TB_SETHOTITEM = 1096,TB_SETANCHORHIGHLIGHT = 1097,TB_GETANCHORHIGHLIGHT = 1098,TB_MAPACCELERATORA = 1102,};
enum MACRO_TVM_SELECTITEM {TVM_SELECTITEM = 4363,TVM_GETITEMA = 4364,TVM_GETITEMW = 4414,TVM_GETITEM = 4364,TVM_SETITEMA = 4365,TVM_SETITEMW = 4415,TVM_SETITEM = 4365,TVM_EDITLABELA = 4366,TVM_EDITLABELW = 4417,TVM_EDITLABEL = 4366,TVM_GETEDITCONTROL = 4367,TVM_GETVISIBLECOUNT = 4368,TVM_HITTEST = 4369,};
enum MACRO_UNICODE_NOCHAR {UNICODE_NOCHAR = 0xFFFF,};
enum MACRO_URLACTION_JAVA {URLACTION_JAVA_CURR_MAX = 0x1C00,URLACTION_JAVA_MAX = 0x1CFF,URLACTION_INFODELIVERY_MIN = 0x1D00,URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 0x1D00,URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 0x1D01,URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 0x1D02,URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 0x1D03,URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 0x1D04,URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 0x1D05,URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 0x1D06,URLACTION_INFODELIVERY_CURR_MAX = 0x1D06,URLACTION_INFODELIVERY_MAX = 0x1DFF,URLACTION_CHANNEL_SOFTDIST_MIN = 0x1E00,URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 0x1E05,};
enum MACRO_URLPOLICY_JAVA {URLPOLICY_JAVA_PROHIBIT = 0x0,URLPOLICY_JAVA_HIGH = 0x10000,URLPOLICY_JAVA_MEDIUM = 0x20000,URLPOLICY_JAVA_LOW = 0x30000,URLPOLICY_JAVA_CUSTOM = 0x800000,};
enum MACRO_WINDOWS_NT_CSD {WINDOWS_NT_CSD_STRING = 0x40000087,WINDOWS_NT_INFO_STRING = 0x40000088,WINDOWS_NT_MP_STRING = 0x40000089,};
enum MACRO_WM_CONTEXTMENU {WM_CONTEXTMENU = 0x7B,WM_STYLECHANGING = 0x7C,WM_STYLECHANGED = 0x7D,WM_DISPLAYCHANGE = 0x7E,WM_GETICON = 0x7F,WM_SETICON = 0x80,WM_NCCREATE = 0x81,WM_NCDESTROY = 0x82,WM_NCCALCSIZE = 0x83,WM_NCHITTEST = 0x84,WM_NCPAINT = 0x85,WM_NCACTIVATE = 0x86,WM_GETDLGCODE = 0x87,WM_SYNCPAINT = 0x88,WM_NCMOUSEMOVE = 0xA0,WM_NCLBUTTONDOWN = 0xA1,WM_NCLBUTTONUP = 0xA2,WM_NCLBUTTONDBLCLK = 0xA3,WM_NCRBUTTONDOWN = 0xA4,WM_NCRBUTTONUP = 0xA5,WM_NCRBUTTONDBLCLK = 0xA6,WM_NCMBUTTONDOWN = 0xA7,WM_NCMBUTTONUP = 0xA8,WM_NCMBUTTONDBLCLK = 0xA9,WM_NCXBUTTONDOWN = 0xAB,WM_NCXBUTTONUP = 0xAC,WM_NCXBUTTONDBLCLK = 0xAD,WM_INPUT = 0xFF,WM_KEYFIRST = 0x100,WM_KEYDOWN = 0x100,WM_KEYUP = 0x101,WM_CHAR = 0x102,WM_DEADCHAR = 0x103,WM_SYSKEYDOWN = 0x104,WM_SYSKEYUP = 0x105,WM_SYSCHAR = 0x106,WM_SYSDEADCHAR = 0x107,WM_UNICHAR = 0x109,WM_KEYLAST = 0x109,};
enum MACRO_WORKER_INVALID {WORKER_INVALID = 0xE4,};
enum MACRO_WSPDESCRIPTION {WSPDESCRIPTION_LEN = 255,};
enum MACRO_WS_TILEDWINDOW {WS_TILEDWINDOW = 13565952,};
enum MACRO_X509_CERT_PAIR {X509_CERT_PAIR = 53,X509_ISSUING_DIST_POINT = 54,X509_NAME_CONSTRAINTS = 55,X509_POLICY_MAPPINGS = 56,X509_POLICY_CONSTRAINTS = 57,X509_CROSS_CERT_DIST_POINTS = 58,};
enum MACRO__SW_UNEMULATED {_SW_UNEMULATED = 0x40,_SW_SQRTNEG = 0x80,_SW_STACKOVERFLOW = 0x200,_SW_STACKUNDERFLOW = 0x400,};
enum MACRO__WIN32_WINDOWS {_WIN32_WINDOWS = 0x410,};
enum MACRO_ckidAVIMAINHDR {ckidAVIMAINHDR = 1751742049,};
enum MACRO_ckidAVIPADDING {ckidAVIPADDING = 1263424842,};
enum MACRO_ckidSTREAMNAME {ckidSTREAMNAME = 1852994675,};
enum MACRO_fdexPropCanGet {fdexPropCanGet = 0x1,fdexPropCannotGet = 0x2,fdexPropCanPut = 0x4,fdexPropCannotPut = 0x8,fdexPropCanPutRef = 0x10,fdexPropCannotPutRef = 0x20,fdexPropNoSideEffects = 0x40,fdexPropDynamicType = 0x80,fdexPropCanCall = 0x100,fdexPropCannotCall = 0x200,fdexPropCanConstruct = 0x400,fdexPropCannotConstruct = 0x800,fdexPropCanSourceEvents = 0x1000,fdexPropCannotSourceEvents = 0x2000,};
enum MACRO_streamtypeMIDI {streamtypeMIDI = 1935960429,};
enum MACRO_streamtypeTEXT {streamtypeTEXT = 1937012852,};
typedef struct _MCDGLOBALDRIVERFUNCS MCDGLOBALDRIVERFUNCS;
typedef struct tagMCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW MCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS MCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW MCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW MCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW MCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW MCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW MCI_WAVE_OPEN_PARMSW;
typedef struct _MIB_IPMCAST_BOUNDARY MIB_IPMCAST_BOUNDARY;
typedef struct _MIB_IPMCAST_IF_ENTRY MIB_IPMCAST_IF_ENTRY;
typedef struct _MIB_IPMCAST_IF_TABLE MIB_IPMCAST_IF_TABLE;
typedef struct mpeglayer3waveformat_tag MPEGLAYER3WAVEFORMAT;
typedef struct _MSV1_0_SUBAUTH_LOGON MSV1_0_SUBAUTH_LOGON;
typedef struct _NETCONNECTINFOSTRUCT NETCONNECTINFOSTRUCT;
typedef struct _NETWORK_ADDRESS_LIST NETWORK_ADDRESS_LIST;
typedef struct tagNMDATETIMEWMKEYDOWNA NMDATETIMEWMKEYDOWNA;
typedef struct tagNMDATETIMEWMKEYDOWNW NMDATETIMEWMKEYDOWNW;
typedef struct _NON_PAGED_DEBUG_INFO NON_PAGED_DEBUG_INFO;
typedef struct _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW;
typedef struct _OFFLOAD_IPSEC_ADD_SA OFFLOAD_IPSEC_ADD_SA;
typedef struct _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS;
typedef struct _CERT_POLICY_MAPPING *PCERT_POLICY_MAPPING;
typedef struct _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB;
typedef struct _CHANGER_MOVE_MEDIUM *PCHANGER_MOVE_MEDIUM;
typedef struct _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO;
typedef struct _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME;
typedef struct _CRL_REVOCATION_INFO *PCRL_REVOCATION_INFO;
typedef struct _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO;
typedef struct _CRYPT_PROVIDER_CERT *PCRYPT_PROVIDER_CERT;
typedef struct _CRYPT_PROVIDER_DATA *PCRYPT_PROVIDER_DATA;
typedef struct _CRYPT_PROVIDER_SGNR *PCRYPT_PROVIDER_SGNR;
typedef struct _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA;
typedef struct _DBGKD_GET_VERSION32 *PDBGKD_GET_VERSION32;
typedef struct _DBGKD_GET_VERSION64 *PDBGKD_GET_VERSION64;
typedef struct _DOCEVENT_CREATEDCPRE *PDCEVENT_CREATEDCPRE;
typedef struct tagDDEML_MSG_HOOK_DATA *PDDEML_MSG_HOOK_DATA;
typedef struct _DDFLIPVIDEOPORTINFO *PDDFLIPVIDEOPORTINFO;
typedef struct _DDGETPOLARITYININFO *PDDGETPOLARITYININFO;
typedef struct _DDSKIPNEXTFIELDINFO *PDDSKIPNEXTFIELDINFO;
typedef struct _DD_COLORCONTROLDATA *PDD_COLORCONTROLDATA;
typedef struct _DD_CREATEMOCOMPDATA *PDD_CREATEMOCOMPDATA;
typedef struct _DD_DESTROYVPORTDATA *PDD_DESTROYVPORTDATA;
typedef struct _DD_DIRECTDRAW_LOCAL *PDD_DIRECTDRAW_LOCAL;
typedef struct _DD_GETBLTSTATUSDATA *PDD_GETBLTSTATUSDATA;
typedef struct _DD_GETVPORTLINEDATA *PDD_GETVPORTLINEDATA;
typedef struct _DD_MOTIONCOMP_LOCAL *PDD_MOTIONCOMP_LOCAL;
typedef DD_PALETTECALLBACKS *PDD_PALETTECALLBACKS;
typedef struct _DD_RENDERMOCOMPDATA *PDD_RENDERMOCOMPDATA;
typedef DD_SURFACECALLBACKS *PDD_SURFACECALLBACKS;
typedef struct _DISK_DETECTION_INFO *PDISK_DETECTION_INFO;
typedef struct _DISK_GROW_PARTITION *PDISK_GROW_PARTITION;
typedef struct _DISK_PARTITION_INFO *PDISK_PARTITION_INFO;
typedef struct tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE *PEMRDELETECOLORSPACE;
typedef struct tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN;
typedef struct tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD;
typedef struct tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETCOLORSPACE *PEMRSELECTCOLORSPACE;
typedef struct tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX;
typedef struct EVENT_INSTANCE_INFO *PEVENT_INSTANCE_INFO;
typedef void ( *PFN_DrvDisableDriver)();
typedef struct _HIDP_PREPARSED_DATA *PHIDP_PREPARSED_DATA;
typedef struct _INSERTPSUIPAGE_INFO *PINSERTPSUIPAGE_INFO;
typedef struct _IP_PER_ADAPTER_INFO *PIP_PER_ADAPTER_INFO;
typedef struct _KERB_TICKET_PROFILE *PKERB_TICKET_PROFILE;
typedef struct _7DEDD44825251A4EAA915BE1158FDB4F *PKSALLOCATOR_FRAMING;
typedef struct _40B3E31023928B11E2A8685514812B52 *PKSDATAFORMAT_DSOUND;
typedef struct _518AEB1FEE0990110D4FC7592EB5CC55 *PKSDS3D_LISTENER_ALL;
typedef struct _8765F39B1D4DEFD1F2F8643F85B5D457 *PKSDSOUND_BUFFERDESC;
typedef struct tagKS_BITMAPINFOHEADER *PKS_BITMAPINFOHEADER;
typedef struct _KS_COPY_MACROVISION *PKS_COPY_MACROVISION;
typedef struct tagKS_DATARANGE_VIDEO2 *PKS_DATARANGE_VIDEO2;
typedef struct _KS_DVDCOPY_TITLEKEY *PKS_DVDCOPY_TITLEKEY;
typedef struct tagKS_VIDEOINFOHEADER2 *PKS_VIDEOINFOHEADER2;
typedef struct _LSA_TRANSLATED_NAME *PLSA_TRANSLATED_NAME;
typedef struct _LSA_TRANSLATED_SID2 *PLSA_TRANSLATED_SID2;
typedef struct _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;
typedef struct tagLVINSERTGROUPSORTED *PLVINSERTGROUPSORTED;
typedef struct tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS;
typedef struct _MIB_IPFORWARDNUMBER *PMIB_IPFORWARDNUMBER;
typedef struct _B1AAA2E973C90C8AA1D1293855444268 *PMIB_MCAST_LIMIT_ROW;
typedef struct _MIB_MFE_STATS_TABLE *PMIB_MFE_STATS_TABLE;
typedef struct tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;
typedef struct NDIS_BPC_DISCONNECT *PNDIS_BPC_DISCONNECT;
typedef struct NDIS_BPC_LAST_ERROR *PNDIS_BPC_LAST_ERROR;
typedef struct _NETWORK_ADDRESS_IPX *PNETWORK_ADDRESS_IPX;
typedef struct _PAR_SET_INFORMATION *PPAR_SET_INFORMATION;
typedef struct _PHYSICAL_WITH_FLAGS *PPHYSICAL_WITH_FLAGS;
typedef struct _F9B51A3DB5554E7753FB9DD51D5E00E5 *PPOWER_ACTION_POLICY;
typedef struct _PRINTER_NOTIFY_INFO *PPRINTER_NOTIFY_INFO;
typedef struct _PRINTER_NOTIFY_INIT *PPRINTER_NOTIFY_INIT;
typedef struct _PROCESS_INFORMATION *PPROCESS_INFORMATION;
typedef struct _PSFEATURE_CUSTPAPER *PPSFEATURE_CUSTPAPER;
typedef struct tagRID_DEVICE_INFO_HID *PRID_DEVICE_INFO_HID;
typedef struct _PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW PRINTER_ENUM_VALUESW;
typedef struct _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;
typedef struct _SYSTEM_POWER_POLICY *PSYSTEM_POWER_POLICY;
typedef struct _TAPE_GET_STATISTICS *PTAPE_GET_STATISTICS;
typedef struct _TAPE_WMI_OPERATIONS *PTAPE_WMI_OPERATIONS;
typedef struct _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;
typedef struct _VOLUME_DISK_EXTENTS *PVOLUME_DISK_EXTENTS;
typedef struct _RPC_CLIENT_INTERFACE RPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D RPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT RPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE RPC_SERVER_INTERFACE;
typedef void *RPC_SS_THREAD_HANDLE;
typedef struct _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;
typedef struct _OSVERSIONINFOEXW RTL_OSVERSIONINFOEXW;
typedef struct _SERVICE_DESCRIPTIONA SERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW SERVICE_DESCRIPTIONW;
typedef struct _SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRYW;
typedef struct _SHCREATEPROCESSINFOW SHCREATEPROCESSINFOW;
typedef struct _SP_DRVINFO_DATA_V1_A SP_DRVINFO_DATA_V1_A;
typedef struct _SP_DRVINFO_DATA_V1_W SP_DRVINFO_DATA_V1_W;
typedef struct _SP_DRVINFO_DATA_V2_A SP_DRVINFO_DATA_V2_A;
typedef struct _SP_DRVINFO_DATA_V2_W SP_DRVINFO_DATA_V2_W;
typedef struct _SP_DRVINSTALL_PARAMS SP_DRVINSTALL_PARAMS;
typedef struct _SP_INF_SIGNER_INFO_A SP_INF_SIGNER_INFO_A;
typedef struct _SP_INF_SIGNER_INFO_W SP_INF_SIGNER_INFO_W;
typedef struct _SP_PROPCHANGE_PARAMS SP_PROPCHANGE_PARAMS;
typedef struct _STORAGE_HOTPLUG_INFO STORAGE_HOTPLUG_INFO;
struct SWbemRefreshableItem;
typedef struct _03532CD8BA12737E900F44108AB1BA2F SYSTEM_BATTERY_STATE;
typedef struct _TCI_CLIENT_FUNC_LIST TCI_CLIENT_FUNC_LIST;
typedef struct _TRACE_LOGFILE_HEADER TRACE_LOGFILE_HEADER;
typedef struct truespeechwaveformat_tag TRUESPEECHWAVEFORMAT;
typedef struct _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFOW;
typedef struct _D890D4C8B96B04D8C981ECF31CD55F01 VOLUME_BITMAP_BUFFER;
typedef struct _48F34F6E58318E719B3C17D5DF8D3416 WAVEFORMATEXTENSIBLE;
typedef struct _WCE_IRDA_DEVICE_INFO WCE_IRDA_DEVICE_INFO;
typedef struct _WSAServiceClassInfoA WSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW WSASERVICECLASSINFOW;
struct XMLDOMDocumentEvents {struct XMLDOMDocumentEventsVtbl *lpVtbl;};
enum _D3DHAL_DP2OPERATION {D3DDP2OP_POINTS = 0x1,D3DDP2OP_INDEXEDLINELIST = 0x2,D3DDP2OP_INDEXEDTRIANGLELIST = 0x3,D3DDP2OP_RESERVED0 = 0x4,D3DDP2OP_RENDERSTATE = 0x8,D3DDP2OP_LINELIST = 0xF,D3DDP2OP_LINESTRIP = 0x10,D3DDP2OP_INDEXEDLINESTRIP = 0x11,D3DDP2OP_TRIANGLELIST = 0x12,D3DDP2OP_TRIANGLESTRIP = 0x13,D3DDP2OP_INDEXEDTRIANGLESTRIP = 0x14,D3DDP2OP_TRIANGLEFAN = 0x15,D3DDP2OP_INDEXEDTRIANGLEFAN = 0x16,D3DDP2OP_TRIANGLEFAN_IMM = 0x17,D3DDP2OP_LINELIST_IMM = 0x18,D3DDP2OP_TEXTURESTAGESTATE = 0x19,D3DDP2OP_INDEXEDTRIANGLELIST2 = 0x1A,D3DDP2OP_INDEXEDLINELIST2 = 0x1B,D3DDP2OP_VIEWPORTINFO = 0x1C,D3DDP2OP_WINFO = 0x1D,D3DDP2OP_SETPALETTE = 0x1E,D3DDP2OP_UPDATEPALETTE = 0x1F,D3DDP2OP_ZRANGE = 0x20,D3DDP2OP_SETMATERIAL = 0x21,D3DDP2OP_SETLIGHT = 0x22,D3DDP2OP_CREATELIGHT = 0x23,D3DDP2OP_SETTRANSFORM = 0x24,D3DDP2OP_EXT = 0x25,D3DDP2OP_TEXBLT = 0x26,D3DDP2OP_STATESET = 0x27,D3DDP2OP_SETPRIORITY = 0x28,D3DDP2OP_SETRENDERTARGET = 0x29,D3DDP2OP_CLEAR = 0x2A,D3DDP2OP_SETTEXLOD = 0x2B,D3DDP2OP_SETCLIPPLANE = 0x2C,D3DDP2OP_CREATEVERTEXSHADER = 0x2D,D3DDP2OP_DELETEVERTEXSHADER = 0x2E,D3DDP2OP_SETVERTEXSHADER = 0x2F,D3DDP2OP_SETVERTEXSHADERCONST = 0x30,D3DDP2OP_SETSTREAMSOURCE = 0x31,D3DDP2OP_SETSTREAMSOURCEUM = 0x32,D3DDP2OP_SETINDICES = 0x33,D3DDP2OP_DRAWPRIMITIVE = 0x34,D3DDP2OP_DRAWINDEXEDPRIMITIVE = 0x35,D3DDP2OP_CREATEPIXELSHADER = 0x36,D3DDP2OP_DELETEPIXELSHADER = 0x37,D3DDP2OP_SETPIXELSHADER = 0x38,D3DDP2OP_SETPIXELSHADERCONST = 0x39,D3DDP2OP_CLIPPEDTRIANGLEFAN = 0x3A,D3DDP2OP_DRAWPRIMITIVE2 = 0x3B,D3DDP2OP_DRAWINDEXEDPRIMITIVE2 = 0x3C,D3DDP2OP_DRAWRECTPATCH = 0x3D,D3DDP2OP_DRAWTRIPATCH = 0x3E,D3DDP2OP_VOLUMEBLT = 0x3F,D3DDP2OP_BUFFERBLT = 0x40,D3DDP2OP_MULTIPLYTRANSFORM = 0x41,D3DDP2OP_ADDDIRTYRECT = 0x42,D3DDP2OP_ADDDIRTYBOX = 0x43,};
enum _D3DMULTISAMPLE_TYPE {D3DMULTISAMPLE_NONE = 0x0,D3DMULTISAMPLE_2_SAMPLES = 0x2,D3DMULTISAMPLE_3_SAMPLES = 0x3,D3DMULTISAMPLE_4_SAMPLES = 0x4,D3DMULTISAMPLE_5_SAMPLES = 0x5,D3DMULTISAMPLE_6_SAMPLES = 0x6,D3DMULTISAMPLE_7_SAMPLES = 0x7,D3DMULTISAMPLE_8_SAMPLES = 0x8,D3DMULTISAMPLE_9_SAMPLES = 0x9,D3DMULTISAMPLE_10_SAMPLES = 0xA,D3DMULTISAMPLE_11_SAMPLES = 0xB,D3DMULTISAMPLE_12_SAMPLES = 0xC,D3DMULTISAMPLE_13_SAMPLES = 0xD,D3DMULTISAMPLE_14_SAMPLES = 0xE,D3DMULTISAMPLE_15_SAMPLES = 0xF,D3DMULTISAMPLE_16_SAMPLES = 0x10,D3DMULTISAMPLE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREMAGFILTER {D3DTFG_POINT = 0x1,D3DTFG_LINEAR = 0x2,D3DTFG_FLATCUBIC = 0x3,D3DTFG_GAUSSIANCUBIC = 0x4,D3DTFG_ANISOTROPIC = 0x5,D3DTFG_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREMINFILTER {D3DTFN_POINT = 0x1,D3DTFN_LINEAR = 0x2,D3DTFN_ANISOTROPIC = 0x3,D3DTFN_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREMIPFILTER {D3DTFP_NONE = 0x1,D3DTFP_POINT = 0x2,D3DTFP_LINEAR = 0x3,D3DTFP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVERTEXBLENDFLAGS {D3DVBF_DISABLE = 0x0,D3DVBF_1WEIGHTS = 0x1,D3DVBF_2WEIGHTS = 0x2,D3DVBF_3WEIGHTS = 0x3,D3DVBF_TWEENING = 0xFF,D3DVBF_0WEIGHTS = 0x100,D3DVBF_FORCE_DWORD = 0x7FFFFFFF,};
enum _EATTRIBUTE_DATATYPE {kADT_UNKNOWN = 0x0,kADT_BOOL = 0x1,kADT_INT = 0x2,kADT_LONG = 0x3,kADT_DWORD = 0x4,kADT_ASCII = 0x5,kADT_UNICODE = 0x6,kADT_BINARY = 0x7,kADT_SIZE = 0x8,kADT_RECT = 0x9,kADT_CUSTOMSIZEPARAMS = 0xA,};
enum _OFFLOAD_OPERATION_E {AUTHENTICATE = 0x1,ENCRYPT = 0x2,};
struct _RPC_PROTSEQ_VECTORA {unsigned int Count;unsigned char *Protseq[1];};
struct _RPC_PROTSEQ_VECTORW {unsigned int Count;unsigned short *Protseq[1];};
enum _SECURITY_LOGON_TYPE {Interactive = 0x2,Network = 0x3,Batch = 0x4,Service = 0x5,Proxy = 0x6,Unlock = 0x7,NetworkCleartext = 0x8,NewCredentials = 0x9,RemoteInteractive = 0xA,CachedInteractive = 0xB,CachedRemoteInteractive = 0xC,CachedUnlock = 0xD,};
enum tagPictureAttributes {PICTURE_SCALABLE = 0x1,PICTURE_TRANSPARENT = 0x2,};
enum tag_WBEM_FLAVOR_TYPE {WBEM_FLAVOR_DONT_PROPAGATE = 0x0,WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE = 0x1,WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS = 0x2,WBEM_FLAVOR_MASK_PROPAGATION = 0xF,WBEM_FLAVOR_OVERRIDABLE = 0x0,WBEM_FLAVOR_NOT_OVERRIDABLE = 0x10,WBEM_FLAVOR_MASK_PERMISSIONS = 0x10,WBEM_FLAVOR_ORIGIN_LOCAL = 0x0,WBEM_FLAVOR_ORIGIN_PROPAGATED = 0x20,WBEM_FLAVOR_ORIGIN_SYSTEM = 0x40,WBEM_FLAVOR_MASK_ORIGIN = 0x60,WBEM_FLAVOR_NOT_AMENDED = 0x0,WBEM_FLAVOR_AMENDED = 0x80,WBEM_FLAVOR_MASK_AMENDED = 0x80,};
enum tag_WBEM_STATUS_TYPE {WBEM_STATUS_COMPLETE = 0x0,WBEM_STATUS_REQUIREMENTS = 0x1,WBEM_STATUS_PROGRESS = 0x2,};
typedef struct tagAAMENUFILENAME AASHELLMENUFILENAME;
enum BrowserNavConstants {navOpenInNewWindow = 0x1,navNoHistory = 0x2,navNoReadFromCache = 0x4,navNoWriteToCache = 0x8,navAllowAutosearch = 0x10,navBrowserBar = 0x20,navHyperlink = 0x40,navEnforceRestricted = 0x80,};
typedef struct _CERT_ALT_NAME_ENTRY CERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS CERT_DSS_PARAMETERS;
typedef struct _CERT_POLICY_MAPPING CERT_POLICY_MAPPING;
typedef struct _CRYPTOAPI_BLOB CERT_RDN_VALUE_BLOB;
typedef struct _CHANGER_MOVE_MEDIUM CHANGER_MOVE_MEDIUM;
typedef struct tagCInterfaceProxyVtbl CInterfaceProxyVtbl;
typedef struct _CMINVOKECOMMANDINFO CMINVOKECOMMANDINFO;
typedef struct _CONSOLE_CURSOR_INFO CONSOLE_CURSOR_INFO;
typedef struct _CRL_DIST_POINT_NAME CRL_DIST_POINT_NAME;
typedef struct _CRL_REVOCATION_INFO CRL_REVOCATION_INFO;
typedef struct _CRYPT_KEY_PROV_INFO CRYPT_KEY_PROV_INFO;
typedef struct _CRYPT_PROVIDER_CERT CRYPT_PROVIDER_CERT;
typedef struct _CRYPT_PROVIDER_DATA CRYPT_PROVIDER_DATA;
typedef struct _CRYPT_PROVIDER_SGNR CRYPT_PROVIDER_SGNR;
typedef struct tagCStdPSFactoryBuffer CStdPSFactoryBuffer;
typedef struct _CTL_FIND_USAGE_PARA CTL_FIND_USAGE_PARA;
typedef struct _D3DFINDDEVICERESULT D3DFINDDEVICERESULT;
typedef struct _D3DFINDDEVICESEARCH D3DFINDDEVICESEARCH;
typedef struct _D3DHAL_DP2BUFFERBLT D3DHAL_DP2BUFFERBLT;
typedef struct _D3DHAL_DP2LINESTRIP D3DHAL_DP2LINESTRIP;
typedef struct _D3DHAL_DP2SETTEXLOD D3DHAL_DP2SETTEXLOD;
typedef struct _D3DHAL_DP2VOLUMEBLT D3DHAL_DP2VOLUMEBLT;
typedef struct _D3DHAL_GETSTATEDATA D3DHAL_GETSTATEDATA;
typedef struct _D3DINDEXBUFFER_DESC D3DINDEXBUFFER_DESC;
typedef struct _D3DNTHAL_CALLBACKS2 D3DNTHAL_CALLBACKS2;
typedef struct _D3DNTHAL_CALLBACKS3 D3DNTHAL_CALLBACKS3;
typedef struct _D3DNTHAL_CLEAR2DATA D3DNTHAL_CLEAR2DATA;
typedef struct _D3DNTHAL_DP2COMMAND D3DNTHAL_DP2COMMAND;
typedef struct _D3DVERTEXBUFFERDESC D3DVERTEXBUFFERDESC;
typedef struct _DBGKD_GET_VERSION32 DBGKD_GET_VERSION32;
typedef struct _DBGKD_GET_VERSION64 DBGKD_GET_VERSION64;
typedef struct tagDDDEVICEIDENTIFIER2 DDDEVICEIDENTIFIER2;
typedef struct tagDDEML_MSG_HOOK_DATA DDEML_MSG_HOOK_DATA;
typedef struct _DDFLIPVIDEOPORTINFO DDFLIPVIDEOPORTINFO;
typedef struct _DDGETPOLARITYININFO DDGETPOLARITYININFO;
typedef struct _DDHAL_FLIPVPORTDATA DDHAL_FLIPVPORTDATA;
typedef struct _DDSKIPNEXTFIELDINFO DDSKIPNEXTFIELDINFO;
typedef struct _DD_COLORCONTROLDATA DD_COLORCONTROLDATA;
typedef struct _DD_CREATEMOCOMPDATA DD_CREATEMOCOMPDATA;
typedef struct _DD_DESTROYVPORTDATA DD_DESTROYVPORTDATA;
typedef struct _DD_DIRECTDRAW_LOCAL DD_DIRECTDRAW_LOCAL;
typedef struct _DD_GETBLTSTATUSDATA DD_GETBLTSTATUSDATA;
typedef struct _DD_GETVPORTLINEDATA DD_GETVPORTLINEDATA;
typedef struct _DD_MOTIONCOMP_LOCAL DD_MOTIONCOMP_LOCAL;
typedef struct _DD_RENDERMOCOMPDATA DD_RENDERMOCOMPDATA;
typedef struct digiadpcmmwaveformat_tag DIGIADPCMWAVEFORMAT;
typedef struct IDirectDrawVtbl DIRECTDRAWCALLBACKS;
typedef struct _DISK_DETECTION_INFO DISK_DETECTION_INFO;
typedef struct _DISK_GROW_PARTITION DISK_GROW_PARTITION;
typedef struct _DISK_PARTITION_INFO DISK_PARTITION_INFO;
typedef struct _DMUS_EXTENSIONCHUNK DMUS_EXTENSIONCHUNK;
struct DShellWindowsEvents {struct DShellWindowsEventsVtbl *lpVtbl;};
typedef struct tagEMRCREATECOLORSPACE EMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE EMRDELETECOLORSPACE;
typedef struct tagEMREXTSELECTCLIPRGN EMREXTSELECTCLIPRGN;
typedef struct tagEMRGLSBOUNDEDRECORD EMRGLSBOUNDEDRECORD;
typedef struct tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETCOLORSPACE EMRSELECTCOLORSPACE;
typedef struct tagEMRSETVIEWPORTEXTEX EMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETVIEWPORTORGEX;
typedef struct _ENCRYPTED_DATA_INFO ENCRYPTED_DATA_INFO;
struct IBindStatusCallback {struct IBindStatusCallbackVtbl *lpVtbl;};
struct IDirect3DSwapChain8 {struct IDirect3DSwapChain8Vtbl *lpVtbl;};
struct IDirectDrawSurface2 {struct IDirectDrawSurface2Vtbl *lpVtbl;};
struct IDirectDrawSurface3 {struct IDirectDrawSurface3Vtbl *lpVtbl;};
struct IDirectDrawSurface4 {struct IDirectDrawSurface4Vtbl *lpVtbl;};
struct IDirectDrawSurface7 {struct IDirectDrawSurface7Vtbl *lpVtbl;};
typedef IDirectMusicBuffer IDirectMusicBuffer8;
struct IDirectSoundBuffer8 {struct IDirectSoundBuffer8Vtbl *lpVtbl;};
struct IDirectSoundCapture {struct IDirectSoundCaptureVtbl *lpVtbl;};
struct IDockingWindowFrame {struct IDockingWindowFrameVtbl *lpVtbl;};
struct IDummyHICONIncluder {struct IDummyHICONIncluderVtbl *lpVtbl;};
struct IEnumPrivacyRecords;
struct IEnumSTATPROPSETSTG {struct IEnumSTATPROPSETSTGVtbl *lpVtbl;};
struct IExternalConnection {struct IExternalConnectionVtbl *lpVtbl;};
struct IFileSystemBindData {struct IFileSystemBindDataVtbl *lpVtbl;};
struct IForegroundTransfer {struct IForegroundTransferVtbl *lpVtbl;};
struct IKsAggregateControl {struct IKsAggregateControlVtbl *lpVtbl;};
typedef struct _IMAGELISTDRAWPARAMS IMAGELISTDRAWPARAMS;
typedef struct _INSERTPSUIPAGE_INFO INSERTPSUIPAGE_INFO;
struct IOleInPlaceUIWindow {struct IOleInPlaceUIWindowVtbl *lpVtbl;};
typedef struct _IP_PER_ADAPTER_INFO IP_PER_ADAPTER_INFO;
struct IPersistPropertyBag {struct IPersistPropertyBagVtbl *lpVtbl;};
struct IProcessInitControl {struct IProcessInitControlVtbl *lpVtbl;};
struct IPropertyNotifySink {struct IPropertyNotifySinkVtbl *lpVtbl;};
struct IPropertySetStorage {struct IPropertySetStorageVtbl *lpVtbl;};
struct IRpcSyntaxNegotiate {struct IRpcSyntaxNegotiateVtbl *lpVtbl;};
struct IRunningObjectTable {struct IRunningObjectTableVtbl *lpVtbl;};
struct ISWbemNamedValueSet {struct ISWbemNamedValueSetVtbl *lpVtbl;};
struct ISearchAssistantOC2 {struct ISearchAssistantOC2Vtbl *lpVtbl;};
struct ISearchAssistantOC3 {struct ISearchAssistantOC3Vtbl *lpVtbl;};
struct IShellTaskScheduler {struct IShellTaskSchedulerVtbl *lpVtbl;};
struct IThumbnailExtractor {struct IThumbnailExtractorVtbl *lpVtbl;};
struct IUnsecuredApartment {struct IUnsecuredApartmentVtbl *lpVtbl;};
struct IWbemConnectorLogin {struct IWbemConnectorLoginVtbl *lpVtbl;};
struct IWbemHiPerfProvider {struct IWbemHiPerfProviderVtbl *lpVtbl;};
struct IWbemStatusCodeText {struct IWbemStatusCodeTextVtbl *lpVtbl;};
struct IWebWizardExtension {struct IWebWizardExtensionVtbl *lpVtbl;};
struct IWindowForBindingUI {struct IWindowForBindingUIVtbl *lpVtbl;};
struct IXMLDOMCDATASection {struct IXMLDOMCDATASectionVtbl *lpVtbl;};
struct IXMLDOMDocumentType {struct IXMLDOMDocumentTypeVtbl *lpVtbl;};
struct IXMLDOMNamedNodeMap {struct IXMLDOMNamedNodeMapVtbl *lpVtbl;};
typedef struct _KERB_TICKET_PROFILE KERB_TICKET_PROFILE;
typedef struct _7DEDD44825251A4EAA915BE1158FDB4F KSALLOCATOR_FRAMING;
typedef struct _40B3E31023928B11E2A8685514812B52 KSDATAFORMAT_DSOUND;
typedef struct _518AEB1FEE0990110D4FC7592EB5CC55 KSDS3D_LISTENER_ALL;
typedef struct _8765F39B1D4DEFD1F2F8643F85B5D457 KSDSOUND_BUFFERDESC;
typedef struct tagKS_BITMAPINFOHEADER KS_BITMAPINFOHEADER;
typedef struct _KS_COPY_MACROVISION KS_COPY_MACROVISION;
typedef struct tagKS_DATARANGE_VIDEO2 KS_DATARANGE_VIDEO2;
typedef struct _KS_DVDCOPY_TITLEKEY KS_DVDCOPY_TITLEKEY;
typedef struct tagKS_VIDEOINFOHEADER2 KS_VIDEOINFOHEADER2;
typedef struct _LOAD_DLL_DEBUG_INFO LOAD_DLL_DEBUG_INFO;
typedef IAccessibleHandler *LPACCESSIBLEHANDLER;
typedef struct tACMDRIVERDETAILSA *LPACMDRIVERDETAILSA;
typedef struct tACMDRIVERDETAILSW *LPACMDRIVERDETAILSW;
typedef struct tACMFILTERDETAILSA *LPACMFILTERDETAILSA;
typedef struct tACMFILTERDETAILSW *LPACMFILTERDETAILSW;
typedef struct tACMFORMATDETAILSA *LPACMFORMATDETAILSA;
typedef struct tACMFORMATDETAILSW *LPACMFORMATDETAILSW;
typedef struct _AD_GENERAL_PARAMS *LPAD_GENERAL_PARAMS;
typedef struct _BIDI_REQUEST_DATA *LPBIDI_REQUEST_DATA;
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;
typedef struct tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT;
typedef struct tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;
typedef struct tagCOMPOSITIONSTRING *LPCOMPOSITIONSTRING;
typedef struct _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;
typedef struct _D3DHAL_CALLBACKS2 *LPD3DHAL_CALLBACKS2;
typedef struct _D3DHAL_CALLBACKS3 *LPD3DHAL_CALLBACKS3;
typedef struct _D3DHAL_DP2COMMAND *LPD3DHAL_DP2COMMAND;
typedef struct _D3DMATRIXMULTIPLY *LPD3DMATRIXMULTIPLY;
typedef struct _DATATYPES_INFO_1A *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W *LPDATATYPES_INFO_1W;
typedef struct _CF7718BAF3C5EB1DFF93AAEE07D29F5C *LPDD32BITDRIVERDATA;
typedef struct _DDHAL_SETMODEDATA *LPDDHAL_SETMODEDATA;
typedef struct _DDMORESURFACECAPS *LPDDMORESURFACECAPS;
typedef struct _DDVIDEOPORTNOTIFY *LPDDVIDEOPORTNOTIFY;
typedef struct _DDVIDEOPORTSTATUS *LPDDVIDEOPORTSTATUS;
typedef struct IDirect3DResource8 *LPDIRECT3DRESOURCE8;
typedef struct IDirectDrawClipper *LPDIRECTDRAWCLIPPER;
typedef struct IDirectDrawPalette *LPDIRECTDRAWPALETTE;
typedef struct IDirectDrawSurface *LPDIRECTDRAWSURFACE;
typedef IDirectMusicBuffer *LPDIRECTMUSICBUFFER;
typedef struct IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;
typedef struct IDirectSoundFXEcho *LPDIRECTSOUNDFXECHO;
typedef struct IDirectSoundNotify *LPDIRECTSOUNDNOTIFY;
typedef struct _DSBPOSITIONNOTIFY *LPDSBPOSITIONNOTIFY;
typedef struct _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT;
typedef struct _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;
typedef IInternetBindInfo *LPIINTERNETBINDINFO;
typedef IInternetPriority *LPIINTERNETPRIORITY;
typedef IInternetProtocol *LPIINTERNETPROTOCOL;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
typedef struct tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;
typedef struct tagMOUSEHOOKSTRUCTEX *LPMOUSEHOOKSTRUCTEX;
typedef struct tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;
typedef struct tagNMDATETIMEFORMATA *LPNMDATETIMEFORMATA;
typedef struct tagNMDATETIMEFORMATW *LPNMDATETIMEFORMATW;
typedef struct tagNMDATETIMESTRINGA *LPNMDATETIMESTRINGA;
typedef struct tagNMDATETIMESTRINGW *LPNMDATETIMESTRINGW;
typedef struct tagNMLVODSTATECHANGE *LPNMLVODSTATECHANGE;
typedef struct tagNMTOOLTIPSCREATED *LPNMTOOLTIPSCREATED;
typedef struct tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW;
typedef IOleParentUndoUnit *LPOLEPARENTUNDOUNIT;
typedef struct tagOFN_NT4A *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W *LPOPENFILENAME_NT4W;
typedef IPersistStreamInit *LPPERSISTSTREAMINIT;
typedef struct _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW;
typedef struct _PROPSHEETPAGEA_V1 *LPPROPSHEETPAGEA_V1;
typedef struct _PROPSHEETPAGEA_V2 *LPPROPSHEETPAGEA_V2;
typedef struct _PROPSHEETPAGEA *LPPROPSHEETPAGEA_V3;
typedef struct _PROPSHEETPAGEW_V1 *LPPROPSHEETPAGEW_V1;
typedef struct _PROPSHEETPAGEW_V2 *LPPROPSHEETPAGEW_V2;
typedef struct _PROPSHEETPAGEW *LPPROPSHEETPAGEW_V3;
typedef IProvideClassInfo2 *LPPROVIDECLASSINFO2;
typedef struct _QOS_DIFFSERV_RULE *LPQOS_DIFFSERV_RULE;
typedef struct _QOS_FRIENDLY_NAME *LPQOS_FRIENDLY_NAME;
typedef struct _QOS_TRAFFIC_CLASS *LPQOS_TRAFFIC_CLASS;
typedef struct _RASTERIZER_STATUS *LPRASTERIZER_STATUS;
typedef struct _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;
typedef struct _RSVP_RESERVE_INFO *LPRSVP_RESERVE_INFO;
typedef struct _SERVICE_ADDRESSES *LPSERVICE_ADDRESSES;
typedef struct _SERVICE_TYPE_INFO *LPSERVICE_TYPE_INFO;
typedef struct _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW *LPSHELLEXECUTEINFOW;
typedef IShellPropSheetExt *LPSHELLPROPSHEETEXT;
typedef struct _WINDOWS_IAS_QUERY *LPWINDOWS_IAS_QUERY;
typedef IWinInetFileStream *LPWININETFILESTREAM;
typedef struct _WSAPROTOCOL_INFOA *LPWSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW *LPWSAPROTOCOL_INFOW;
typedef struct _LSA_TRANSLATED_NAME LSA_TRANSLATED_NAME;
typedef struct _LSA_TRANSLATED_SID2 LSA_TRANSLATED_SID2;
typedef struct _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES;
typedef struct tagLVINSERTGROUPSORTED LVINSERTGROUPSORTED;
enum MACRO_ACCESS_MAX_MS {ACCESS_MAX_MS_OBJECT_ACE_TYPE = 0x8,ACCESS_MAX_MS_V4_ACE_TYPE = 0x8,ACCESS_MAX_MS_ACE_TYPE = 0x8,ACCESS_ALLOWED_CALLBACK_ACE_TYPE = 0x9,ACCESS_DENIED_CALLBACK_ACE_TYPE = 0xA,ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = 0xB,ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = 0xC,};
enum MACRO_ACCESS_OBJECT {ACCESS_OBJECT_GUID = 0,ACCESS_PROPERTY_SET_GUID = 1,ACCESS_PROPERTY_GUID = 2,ACCESS_MAX_LEVEL = 4,};
enum MACRO_AVISTREAMINFO {AVISTREAMINFO_DISABLED = 0x1,AVISTREAMINFO_FORMATCHANGES = 0x10000,};
enum MACRO_AVISTREAMREAD {AVISTREAMREAD_CONVENIENT = -1,};
enum MACRO_BS_PUSHBUTTON {BS_PUSHBUTTON = 0x0,BS_DEFPUSHBUTTON = 0x1,BS_CHECKBOX = 0x2,BS_AUTOCHECKBOX = 0x3,BS_RADIOBUTTON = 0x4,BS_3STATE = 0x5,BS_AUTO3STATE = 0x6,BS_GROUPBOX = 0x7,BS_USERBUTTON = 0x8,BS_AUTORADIOBUTTON = 0x9,BS_PUSHBOX = 0xA,BS_OWNERDRAW = 0xB,BS_TYPEMASK = 0xF,BS_LEFTTEXT = 0x20,BS_TEXT = 0x0,BS_ICON = 0x40,BS_BITMAP = 0x80,BS_LEFT = 0x100,BS_RIGHT = 0x200,BS_CENTER = 0x300,BS_TOP = 0x400,BS_BOTTOM = 0x800,BS_VCENTER = 0xC00,BS_PUSHLIKE = 0x1000,BS_MULTILINE = 0x2000,BS_NOTIFY = 0x4000,BS_FLAT = 0x8000,BS_RIGHTBUTTON = 0x20,};
enum MACRO_BUGCHECK_TECH {BUGCHECK_TECH_INFO = 0x40000083,};
enum MACRO_CACHE_MANAGER {CACHE_MANAGER = 0x34,};
enum MACRO_CAL_GREGORIAN {CAL_GREGORIAN = 1,CAL_GREGORIAN_US = 2,CAL_JAPAN = 3,CAL_TAIWAN = 4,CAL_KOREA = 5,CAL_HIJRI = 6,CAL_THAI = 7,CAL_HEBREW = 8,CAL_GREGORIAN_ME_FRENCH = 9,CAL_GREGORIAN_ARABIC = 10,CAL_GREGORIAN_XLIT_ENGLISH = 11,CAL_GREGORIAN_XLIT_FRENCH = 12,};
enum MACRO_CAT_NAMEVALUE {CAT_NAMEVALUE_STRUCT = 2221,CAT_MEMBERINFO_STRUCT = 2222,};
enum MACRO_CB_GETEDITSEL {CB_GETEDITSEL = 0x140,CB_LIMITTEXT = 0x141,CB_SETEDITSEL = 0x142,CB_ADDSTRING = 0x143,CB_DELETESTRING = 0x144,CB_DIR = 0x145,CB_GETCOUNT = 0x146,CB_GETCURSEL = 0x147,CB_GETLBTEXT = 0x148,CB_GETLBTEXTLEN = 0x149,CB_INSERTSTRING = 0x14A,CB_RESETCONTENT = 0x14B,CB_FINDSTRING = 0x14C,CB_SELECTSTRING = 0x14D,CB_SETCURSEL = 0x14E,CB_SHOWDROPDOWN = 0x14F,CB_GETITEMDATA = 0x150,CB_SETITEMDATA = 0x151,CB_GETDROPPEDCONTROLRECT = 0x152,CB_SETITEMHEIGHT = 0x153,CB_GETITEMHEIGHT = 0x154,CB_SETEXTENDEDUI = 0x155,CB_GETEXTENDEDUI = 0x156,CB_GETDROPPEDSTATE = 0x157,CB_FINDSTRINGEXACT = 0x158,CB_SETLOCALE = 0x159,CB_GETLOCALE = 0x15A,CB_GETTOPINDEX = 0x15B,CB_SETTOPINDEX = 0x15C,CB_GETHORIZONTALEXTENT = 0x15D,CB_SETHORIZONTALEXTENT = 0x15E,CB_GETDROPPEDWIDTH = 0x15F,CB_SETDROPPEDWIDTH = 0x160,CB_INITSTORAGE = 0x161,CB_GETCOMBOBOXINFO = 0x164,CB_MSGMAX = 0x165,};
enum MACRO_CERT_EXCLUDED {CERT_EXCLUDED_SUBTREE_BIT = 0x80000000,};
enum MACRO_COLORMGMTCAPS {COLORMGMTCAPS = 121,};
enum MACRO_COMPLEXREGION {COMPLEXREGION = 3,};
enum MACRO_CREATE_DELETE {CREATE_DELETE_LOCK_NOT_LOCKED = 0x14,};
enum MACRO_CREATE_IGNORE {CREATE_IGNORE_SYSTEM_DEFAULT = 0x80000000,};
enum MACRO_CRED_PRESERVE {CRED_PRESERVE_CREDENTIAL_BLOB = 0x1,CRED_CACHE_TARGET_INFORMATION = 0x1,CRED_ALLOW_NAME_RESOLUTION = 0x1,};
enum MACRO_CRYPT_INSTALL {CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1,CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1,CRYPT_REGISTER_FIRST_INDEX = 0,CRYPT_REGISTER_LAST_INDEX = -1,CRYPT_MATCH_ANY_ENCODING_TYPE = -1,CRYPT_HASH_ALG_OID_GROUP_ID = 1,CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2,CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3,CRYPT_SIGN_ALG_OID_GROUP_ID = 4,CRYPT_RDN_ATTR_OID_GROUP_ID = 5,CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6,CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7,CRYPT_POLICY_OID_GROUP_ID = 8,CRYPT_TEMPLATE_OID_GROUP_ID = 9,CRYPT_LAST_OID_GROUP_ID = 9,CRYPT_FIRST_ALG_OID_GROUP_ID = 1,CRYPT_LAST_ALG_OID_GROUP_ID = 4,CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1,CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2,CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4,CRYPT_OID_INFO_OID_KEY = 1,CRYPT_OID_INFO_NAME_KEY = 2,CRYPT_OID_INFO_ALGID_KEY = 3,CRYPT_OID_INFO_SIGN_KEY = 4,CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1,CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0,};
enum MACRO_CRYPT_MESSAGE {CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 0x1,CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 0x2,CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 0x4,CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 0x40,CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 0x4,};
enum MACRO_CS_INSERTCHAR {CS_INSERTCHAR = 0x2000,CS_NOMOVECARET = 0x4000,};
enum MACRO_CT_RECTANGLES {CT_RECTANGLES = 0,};
enum MACRO_D3DCLIPPLANE0 {D3DCLIPPLANE0 = 1,D3DCLIPPLANE1 = 2,D3DCLIPPLANE2 = 4,D3DCLIPPLANE3 = 8,D3DCLIPPLANE4 = 16,D3DCLIPPLANE5 = 32,};
enum MACRO_D3DCLIPSTATUS {D3DCLIPSTATUS_STATUS = 0x1,D3DCLIPSTATUS_EXTENTS2 = 0x2,D3DCLIPSTATUS_EXTENTS3 = 0x4,};
enum MACRO_D3DCURSORCAPS {D3DCURSORCAPS_COLOR = 0x1,D3DCURSORCAPS_LOWRES = 0x2,};
enum MACRO_D3DPBLENDCAPS {D3DPBLENDCAPS_ZERO = 0x1,D3DPBLENDCAPS_ONE = 0x2,D3DPBLENDCAPS_SRCCOLOR = 0x4,D3DPBLENDCAPS_INVSRCCOLOR = 0x8,D3DPBLENDCAPS_SRCALPHA = 0x10,D3DPBLENDCAPS_INVSRCALPHA = 0x20,D3DPBLENDCAPS_DESTALPHA = 0x40,D3DPBLENDCAPS_INVDESTALPHA = 0x80,D3DPBLENDCAPS_DESTCOLOR = 0x100,D3DPBLENDCAPS_INVDESTCOLOR = 0x200,D3DPBLENDCAPS_SRCALPHASAT = 0x400,D3DPBLENDCAPS_BOTHSRCALPHA = 0x800,D3DPBLENDCAPS_BOTHINVSRCALPHA = 0x1000,};
enum MACRO_D3DPSHADECAPS {D3DPSHADECAPS_COLORGOURAUDRGB = 0x8,D3DPSHADECAPS_SPECULARGOURAUDRGB = 0x200,D3DPSHADECAPS_ALPHAGOURAUDBLEND = 0x4000,D3DPSHADECAPS_FOGGOURAUD = 0x80000,};
enum MACRO_D3DSP_SWIZZLE {D3DSP_SWIZZLE_SHIFT = 16,D3DSP_SWIZZLE_MASK = 16711680,D3DSP_NOSWIZZLE = 14942208,D3DSP_REPLICATERED = 0,D3DSP_REPLICATEGREEN = 5570560,D3DSP_REPLICATEBLUE = 11141120,D3DSP_REPLICATEALPHA = 16711680,D3DSP_SRCMOD_SHIFT = 24,D3DSP_SRCMOD_MASK = 251658240,};
enum MACRO_DBG_EXCEPTION {DBG_EXCEPTION_NOT_HANDLED = 0x80010001,};
enum MACRO_DBG_TERMINATE {DBG_TERMINATE_THREAD = 0x40010003,DBG_TERMINATE_PROCESS = 0x40010004,DBG_CONTROL_C = 0x40010005,DBG_CONTROL_BREAK = 0x40010008,DBG_COMMAND_EXCEPTION = 0x40010009,};
enum MACRO_DC_PRINTERMEM {DC_PRINTERMEM = 28,DC_MEDIAREADY = 29,DC_STAPLE = 30,DC_PRINTRATEPPM = 31,DC_COLORDEVICE = 32,DC_NUP = 33,DC_MEDIATYPENAMES = 34,DC_MEDIATYPES = 35,};
enum MACRO_DDFXALPHACAPS {DDFXALPHACAPS_BLTALPHAEDGEBLEND = 0x1,DDFXALPHACAPS_BLTALPHAPIXELS = 0x2,DDFXALPHACAPS_BLTALPHAPIXELSNEG = 0x4,DDFXALPHACAPS_BLTALPHASURFACES = 0x8,DDFXALPHACAPS_BLTALPHASURFACESNEG = 0x10,DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND = 0x20,DDFXALPHACAPS_OVERLAYALPHAPIXELS = 0x40,DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG = 0x80,DDFXALPHACAPS_OVERLAYALPHASURFACES = 0x100,DDFXALPHACAPS_OVERLAYALPHASURFACESNEG = 0x200,};
enum MACRO_DDRAWISURFGBL {DDRAWISURFGBL_MEMFREE = 0x1,DDRAWISURFGBL_SYSMEMREQUESTED = 0x2,DDRAWISURFGBL_ISGDISURFACE = 0x4,DDRAWISURFGBL_SOFTWAREAUTOFLIP = 0x8,DDRAWISURFGBL_LOCKNOTHOLDINGWIN16LOCK = 0x10,DDRAWISURFGBL_LOCKVRAMSTYLE = 0x20,DDRAWISURFGBL_LOCKBROKEN = 0x40,DDRAWISURFGBL_IMPLICITHANDLE = 0x80,DDRAWISURFGBL_ISCLIENTMEM = 0x100,DDRAWISURFGBL_HARDWAREOPSOURCE = 0x200,DDRAWISURFGBL_HARDWAREOPDEST = 0x400,DDRAWISURFGBL_HARDWAREOPSTARTED = 0x600,DDRAWISURFGBL_VPORTINTERLEAVED = 0x800,DDRAWISURFGBL_VPORTDATA = 0x1000,DDRAWISURFGBL_LATEALLOCATELINEAR = 0x2000,DDRAWISURFGBL_SYSMEMEXECUTEBUFFER = 0x4000,DDRAWISURFGBL_FASTLOCKHELD = 0x8000,DDRAWISURFGBL_READONLYLOCKHELD = 0x10000,DDRAWISURFGBL_DX8SURFACE = 0x80000,DDRAWISURFGBL_DDHELDONTFREE = 0x100000,DDRAWISURFGBL_NOTIFYWHENUNLOCKED = 0x200000,DDRAWISURFGBL_RESERVED0 = 0x80000000,};
enum MACRO_DDVERSIONINFO {DDVERSIONINFO = 13,};
enum MACRO_DIRTY_NOWRITE {DIRTY_NOWRITE_PAGES_CONGESTION = 0xFD,};
enum MACRO_DOCUMENTEVENT {DOCUMENTEVENT_FIRST = 1,DOCUMENTEVENT_CREATEDCPRE = 1,DOCUMENTEVENT_CREATEDCPOST = 2,DOCUMENTEVENT_RESETDCPRE = 3,DOCUMENTEVENT_RESETDCPOST = 4,DOCUMENTEVENT_STARTDOC = 5,DOCUMENTEVENT_STARTDOCPRE = 5,DOCUMENTEVENT_STARTPAGE = 6,DOCUMENTEVENT_ENDPAGE = 7,DOCUMENTEVENT_ENDDOC = 8,DOCUMENTEVENT_ENDDOCPRE = 8,DOCUMENTEVENT_ABORTDOC = 9,DOCUMENTEVENT_DELETEDC = 10,DOCUMENTEVENT_ESCAPE = 11,DOCUMENTEVENT_ENDDOCPOST = 12,DOCUMENTEVENT_STARTDOCPOST = 13,DOCUMENTEVENT_QUERYFILTER = 14,DOCUMENTEVENT_LAST = 15,DOCUMENTEVENT_SPOOLED = 65536,DOCUMENTEVENT_SUCCESS = 1,DOCUMENTEVENT_UNSUPPORTED = 0,DOCUMENTEVENT_FAILURE = -1,};
enum MACRO_DRIVERVERSION {DRIVERVERSION = 0,TECHNOLOGY = 2,HORZSIZE = 4,};
enum MACRO_ENUMPAPERBINS {ENUMPAPERBINS = 31,SETDIBSCALING = 32,};
enum MACRO_EVENTLOG_FULL {EVENTLOG_FULL_INFO = 0,};
enum MACRO_EVENT_SERVICE {EVENT_SERVICE_NOT_INTERACTIVE = 0xC0001B76,EVENT_SERVICE_CRASH = 0xC0001B77,EVENT_SERVICE_RECOVERY_FAILED = 0xC0001B78,EVENT_SERVICE_SCESRV_FAILED = 0xC0001B79,EVENT_SERVICE_CRASH_NO_ACTION = 0xC0001B7A,EVENT_SERVICE_CONTROL_SUCCESS = 0x40001B7B,EVENT_SERVICE_STATUS_SUCCESS = 0x40001B7C,EVENT_SERVICE_CONFIG_BACKOUT_FAILED = 0xC0001B7D,EVENT_FIRST_LOGON_FAILED_II = 0xC0001B7E,EVENT_SERVICE_DIFFERENT_PID_CONNECTED = 0x80001B7F,EVENT_COMMAND_NOT_INTERACTIVE = 0xC0001EDC,EVENT_COMMAND_START_FAILED = 0xC0001EDD,EVENT_BOWSER_OTHER_MASTER_ON_NET = 0xC0001F43,EVENT_BOWSER_PROMOTED_WHILE_ALREADY_MASTER = 0x80001F44,EVENT_BOWSER_NON_MASTER_MASTER_ANNOUNCE = 0x80001F45,EVENT_BOWSER_ILLEGAL_DATAGRAM = 0x80001F46,EVENT_BROWSER_STATUS_BITS_UPDATE_FAILED = 0xC0001F47,EVENT_BROWSER_ROLE_CHANGE_FAILED = 0xC0001F48,EVENT_BROWSER_MASTER_PROMOTION_FAILED = 0xC0001F49,EVENT_BOWSER_NAME_CONVERSION_FAILED = 0xC0001F4A,EVENT_BROWSER_OTHERDOMAIN_ADD_FAILED = 0xC0001F4B,EVENT_BOWSER_ELECTION_RECEIVED = 0x1F4C,EVENT_BOWSER_ELECTION_SENT_GETBLIST_FAILED = 0x40001F4D,EVENT_BOWSER_ELECTION_SENT_FIND_MASTER_FAILED = 0x40001F4E,EVENT_BROWSER_ELECTION_SENT_LANMAN_NT_STARTED = 0x40001F4F,EVENT_BOWSER_ILLEGAL_DATAGRAM_THRESHOLD = 0xC0001F50,EVENT_BROWSER_DEPENDANT_SERVICE_FAILED = 0xC0001F51,EVENT_BROWSER_MASTER_PROMOTION_FAILED_STOPPING = 0xC0001F53,EVENT_BROWSER_MASTER_PROMOTION_FAILED_NO_MASTER = 0xC0001F54,EVENT_BROWSER_SERVER_LIST_FAILED = 0x80001F55,EVENT_BROWSER_DOMAIN_LIST_FAILED = 0x80001F56,EVENT_BROWSER_ILLEGAL_CONFIG = 0x80001F57,EVENT_BOWSER_OLD_BACKUP_FOUND = 0x40001F58,EVENT_BROWSER_SERVER_LIST_RETRIEVED = 0x1F59,EVENT_BROWSER_DOMAIN_LIST_RETRIEVED = 0x1F5A,EVENT_BOWSER_PDC_LOST_ELECTION = 0x40001F5B,EVENT_BOWSER_NON_PDC_WON_ELECTION = 0x40001F5C,EVENT_BOWSER_CANT_READ_REGISTRY = 0x40001F5D,EVENT_BOWSER_MAILSLOT_DATAGRAM_THRESHOLD_EXCEEDED = 0x40001F5E,EVENT_BOWSER_GETBROWSERLIST_THRESHOLD_EXCEEDED = 0x40001F5F,EVENT_BROWSER_BACKUP_STOPPED = 0xC0001F60,EVENT_BROWSER_ELECTION_SENT_LANMAN_NT_STOPPED = 0x40001F61,EVENT_BROWSER_GETBLIST_RECEIVED_NOT_MASTER = 0xC0001F62,EVENT_BROWSER_ELECTION_SENT_ROLE_CHANGED = 0x40001F63,EVENT_BROWSER_NOT_STARTED_IPX_CONFIG_MISMATCH = 0xC0001F64,};
enum MACRO_FILE_PREFETCH {FILE_PREFETCH_TYPE_FOR_CREATE = 0x1,};
enum MACRO_GETCOLORTABLE {GETCOLORTABLE = 5,};
enum MACRO_GETTECHNOLOGY {GETTECHNOLOGY = 20,};
enum MACRO_HEAPALIASINFO {HEAPALIASINFO_MAPPEDREAL = 0x1,HEAPALIASINFO_MAPPEDDUMMY = 0x2,};
enum MACRO_HTBOTTOMRIGHT {HTBOTTOMRIGHT = 17,};
enum MACRO_HTTRANSPARENT {HTTRANSPARENT = -1,};
enum MACRO_IMPERSONATING {IMPERSONATING_WORKER_THREAD = 0xDF,};
enum MACRO_INTERFACESAFE {INTERFACESAFE_FOR_UNTRUSTED_CALLER = 0x1,INTERFACESAFE_FOR_UNTRUSTED_DATA = 0x2,};
enum MACRO_INTERNATIONAL {INTERNATIONAL_USAGE = 0x1,};
enum MACRO_IOCTL_CHANGER {IOCTL_CHANGER_BASE = 48,IOCTL_CHANGER_GET_PARAMETERS = 3162112,IOCTL_CHANGER_GET_STATUS = 3162116,IOCTL_CHANGER_GET_PRODUCT_DATA = 3162120,IOCTL_CHANGER_SET_ACCESS = 3194896,IOCTL_CHANGER_GET_ELEMENT_STATUS = 3194900,IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS = 3162136,IOCTL_CHANGER_SET_POSITION = 3162140,IOCTL_CHANGER_EXCHANGE_MEDIUM = 3162144,IOCTL_CHANGER_MOVE_MEDIUM = 3162148,IOCTL_CHANGER_REINITIALIZE_TRANSPORT = 3162152,IOCTL_CHANGER_QUERY_VOLUME_TAGS = 3194924,};
enum MACRO_IO_ERR_THREAD {IO_ERR_THREAD_STUCK_IN_DEVICE_DRIVER = 0xC004006C,};
enum MACRO_IPXADDRESSLEN {IPXADDRESSLEN = 22,ATADDRESSLEN = 32,};
enum MACRO_ITSSFLAG_TASK {ITSSFLAG_TASK_PLACEINFRONT = 0x1,ITSSFLAG_TASK_PLACEINBACK = 0x2,};
enum MACRO_KEYBOARD_TYPE {KEYBOARD_TYPE_GENERIC_101 = 4,KEYBOARD_TYPE_JAPAN = 7,KEYBOARD_TYPE_KOREA = 8,KEYBOARD_TYPE_UNKNOWN = 81,};
enum MACRO_KSMPEGVIDMODE {KSMPEGVIDMODE_PANSCAN = 0x1,KSMPEGVIDMODE_LTRBOX = 0x2,KSMPEGVIDMODE_SCALE = 0x4,};
enum MACRO_LVM_FINDITEMA {LVM_FINDITEMA = 4109,LVM_FINDITEMW = 4179,LVM_FINDITEM = 4109,};
enum MACRO_MAILSLOT_FILE {MAILSLOT_FILE_SYSTEM = 0x52,};
enum MACRO_MAX_INTERFACE {MAX_INTERFACE_NAME_LEN = 256,MAX_TRANSPORT_NAME_LEN = 40,MAX_MEDIA_NAME = 16,MAX_PORT_NAME = 16,MAX_DEVICE_NAME = 128,MAX_PHONE_NUMBER_LEN = 128,MAX_DEVICETYPE_NAME = 16,};
enum MACRO_MAX_LEADBYTES {MAX_LEADBYTES = 12,MAX_DEFAULTCHAR = 2,};
enum MACRO_MAX_PREFERRED {MAX_PREFERRED_LENGTH = 4294967295,};
enum MACRO_MCN_SELCHANGE {MCN_SELCHANGE = -749,MCN_GETDAYSTATE = -747,MCN_SELECT = -746,};
enum MACRO_MICROSOFT_KBD {MICROSOFT_KBD_101_TYPE = 0,MICROSOFT_KBD_AX_TYPE = 1,MICROSOFT_KBD_106_TYPE = 2,MICROSOFT_KBD_002_TYPE = 3,MICROSOFT_KBD_001_TYPE = 4,MICROSOFT_KBD_FUNC = 12,};
enum MACRO_MIDIPATCHSIZE {MIDIPATCHSIZE = 128,};
enum MACRO_MINSYSCOMMAND {MINSYSCOMMAND = 61440,};
enum MACRO_MIXER_OBJECTF {MIXER_OBJECTF_HANDLE = 0x80000000,MIXER_OBJECTF_MIXER = 0x0,MIXER_OBJECTF_HMIXER = 0x80000000,MIXER_OBJECTF_WAVEOUT = 0x10000000,MIXER_OBJECTF_HWAVEOUT = 0x90000000,MIXER_OBJECTF_WAVEIN = 0x20000000,MIXER_OBJECTF_HWAVEIN = 0xA0000000,MIXER_OBJECTF_MIDIOUT = 0x30000000,MIXER_OBJECTF_HMIDIOUT = 0xB0000000,MIXER_OBJECTF_MIDIIN = 0x40000000,MIXER_OBJECTF_HMIDIIN = 0xC0000000,MIXER_OBJECTF_AUX = 0x50000000,};
enum MACRO_MOUSE_WHEELED {MOUSE_WHEELED = 0x4,};
enum MACRO_MSGF_COMMCTRL {MSGF_COMMCTRL_BEGINDRAG = 0x4200,MSGF_COMMCTRL_SIZEHEADER = 0x4201,MSGF_COMMCTRL_DRAGSELECT = 0x4202,MSGF_COMMCTRL_TOOLBARCUST = 0x4203,};
enum MACRO_MSG_INTERRUPT {MSG_INTERRUPT = 0x10,};
enum MACRO_MUTEX_ALREADY {MUTEX_ALREADY_OWNED = 0xBF,};
enum MACRO_NCBLANSTALERT {NCBLANSTALERT = 0x73,};
enum MACRO_NDIS_MINIPORT {NDIS_MINIPORT_BUS_MASTER = 0x1,NDIS_MINIPORT_WDM_DRIVER = 0x2,NDIS_MINIPORT_SG_LIST = 0x4,NDIS_MINIPORT_SUPPORTS_MEDIA_QUERY = 0x8,NDIS_MINIPORT_INDICATES_PACKETS = 0x10,NDIS_MINIPORT_IGNORE_PACKET_QUEUE = 0x20,NDIS_MINIPORT_IGNORE_REQUEST_QUEUE = 0x40,NDIS_MINIPORT_IGNORE_TOKEN_RING_ERRORS = 0x80,NDIS_MINIPORT_INTERMEDIATE_DRIVER = 0x100,NDIS_MINIPORT_IS_NDIS_5 = 0x200,NDIS_MINIPORT_IS_CO = 0x400,NDIS_MINIPORT_DESERIALIZE = 0x800,NDIS_MINIPORT_REQUIRES_MEDIA_POLLING = 0x1000,NDIS_MINIPORT_SUPPORTS_MEDIA_SENSE = 0x2000,NDIS_MINIPORT_NETBOOT_CARD = 0x4000,NDIS_MINIPORT_PM_SUPPORTED = 0x8000,NDIS_MINIPORT_SUPPORTS_MAC_ADDRESS_OVERWRITE = 0x10000,NDIS_MINIPORT_USES_SAFE_BUFFER_APIS = 0x20000,NDIS_MINIPORT_HIDDEN = 0x40000,NDIS_MINIPORT_SWENUM = 0x80000,NDIS_MINIPORT_SURPRISE_REMOVE_OK = 0x100000,NDIS_MINIPORT_NO_HALT_ON_SUSPEND = 0x200000,NDIS_MINIPORT_HARDWARE_DEVICE = 0x400000,NDIS_MINIPORT_SUPPORTS_CANCEL_SEND_PACKETS = 0x800000,NDIS_MINIPORT_64BITS_DMA = 0x1000000,NDIS_MINIPORT_USE_NEW_BITS = 0x2000000,NDIS_MINIPORT_EXCLUSIVE_INTERRUPT = 0x4000000,NDIS_MINIPORT_SENDS_PACKET_ARRAY = 0x8000000,NDIS_MINIPORT_FILTER_IM = 0x10000000,};
enum MACRO_NDIS_PROTOCOL {NDIS_PROTOCOL_ID_DEFAULT = 0x0,NDIS_PROTOCOL_ID_TCP_IP = 0x2,NDIS_PROTOCOL_ID_IPX = 0x6,NDIS_PROTOCOL_ID_NBF = 0x7,NDIS_PROTOCOL_ID_MAX = 0xF,NDIS_PROTOCOL_ID_MASK = 0xF,};
enum MACRO_OBJECT_ISROOT {OBJECT_ISROOT = 0x80000000,};
enum MACRO_OBSOLETE_DISK {OBSOLETE_DISK_GET_WRITE_CACHE_STATE = 0x740DC,};
enum MACRO_OPAQUEKEYBLOB {OPAQUEKEYBLOB = 0x9,};
enum MACRO_PAGE_FAULT_IN {PAGE_FAULT_IN_NONPAGED_AREA = 0x50,};
enum MACRO_PGF_CALCWIDTH {PGF_CALCWIDTH = 1,PGF_CALCHEIGHT = 2,};
enum MACRO_PHYSICALWIDTH {PHYSICALWIDTH = 110,};
enum MACRO_PIFPARAMSSIZE {PIFPARAMSSIZE = 64,};
enum MACRO_PIFSHDATASIZE {PIFSHDATASIZE = 64,};
enum MACRO_PIFSHPROGSIZE {PIFSHPROGSIZE = 64,};
enum MACRO_PKCS12_EXPORT {PKCS12_EXPORT_RESERVED_MASK = 0xFFFF0000,};
enum MACRO_POWER_FAILURE {POWER_FAILURE_SIMULATE = 0xE5,};
enum MACRO_PRINTDLGEXORD {PRINTDLGEXORD = 1549,};
enum MACRO_PRINTER_EVENT {PRINTER_EVENT_CONFIGURATION_CHANGE = 0,PRINTER_EVENT_ADD_CONNECTION = 1,PRINTER_EVENT_DELETE_CONNECTION = 2,PRINTER_EVENT_INITIALIZE = 3,PRINTER_EVENT_DELETE = 4,PRINTER_EVENT_CACHE_REFRESH = 5,PRINTER_EVENT_CACHE_DELETE = 6,PRINTER_EVENT_ATTRIBUTES_CHANGED = 7,PRINTER_EVENT_FLAG_NO_UI = 1,};
enum MACRO_PRINTRATEUNIT {PRINTRATEUNIT_PPM = 1,PRINTRATEUNIT_CPS = 2,PRINTRATEUNIT_LPM = 3,PRINTRATEUNIT_IPM = 4,};
enum MACRO_RB_SIZETORECT {RB_SIZETORECT = 1047,RB_SETCOLORSCHEME = 8194,RB_GETCOLORSCHEME = 8195,RB_INSERTBAND = 1025,RB_SETBANDINFO = 1030,RB_BEGINDRAG = 1048,RB_ENDDRAG = 1049,RB_DRAGMOVE = 1050,RB_GETBARHEIGHT = 1051,RB_GETBANDINFOW = 1052,RB_GETBANDINFOA = 1053,RB_GETBANDINFO = 1053,RB_MINIMIZEBAND = 1054,RB_MAXIMIZEBAND = 1055,RB_GETDROPTARGET = 8196,RB_GETBANDBORDERS = 1058,RB_SHOWBAND = 1059,RB_SETPALETTE = 1061,RB_GETPALETTE = 1062,RB_MOVEBAND = 1063,RB_SETUNICODEFORMAT = 8197,RB_GETUNICODEFORMAT = 8198,RB_GETBANDMARGINS = 1064,RB_SETWINDOWTHEME = 8203,RB_PUSHCHEVRON = 1067,};
enum MACRO_REPLACEDLGORD {REPLACEDLGORD = 1541,};
enum MACRO_RESOURCEUSAGE {RESOURCEUSAGE_CONNECTABLE = 0x1,RESOURCEUSAGE_CONTAINER = 0x2,RESOURCEUSAGE_NOLOCALDEVICE = 0x4,RESOURCEUSAGE_SIBLING = 0x8,RESOURCEUSAGE_ATTACHED = 0x10,RESOURCEUSAGE_ALL = 0x13,RESOURCEUSAGE_RESERVED = 0x80000000,};
enum MACRO_RIFFCPPO_objr {RIFFCPPO_objr = 1919574639,RIFFCPPO_obji = 1768579695,RIFFCPPO_clsr = 1920167011,RIFFCPPO_clsi = 1769172067,RIFFCPPO_mbr = 544367213,RIFFCPPO_char = 1918986339,RIFFCPPO_byte = 1702132066,RIFFCPPO_int = 544501353,RIFFCPPO_word = 1685221239,RIFFCPPO_long = 1735290732,RIFFCPPO_dwrd = 1685223268,RIFFCPPO_flt = 544500838,RIFFCPPO_dbl = 543973988,RIFFCPPO_str = 544371827,};
enum MACRO_RPC_INTERFACE {RPC_INTERFACE_HAS_PIPES = 0x1,};
enum MACRO_SBT_OWNERDRAW {SBT_OWNERDRAW = 0x1000,SBT_NOBORDERS = 0x100,SBT_POPOUT = 0x200,SBT_RTLREADING = 0x400,SBT_NOTABPARSING = 0x800,};
enum MACRO_SB_SETBKCOLOR {SB_SETBKCOLOR = 8193,};
enum MACRO_SERIAL_DRIVER {SERIAL_DRIVER_INTERNAL = 0x38,};
enum MACRO_SERVICE_QUERY {SERVICE_QUERY_CONFIG = 0x1,SERVICE_CHANGE_CONFIG = 0x2,SERVICE_QUERY_STATUS = 0x4,SERVICE_ENUMERATE_DEPENDENTS = 0x8,SERVICE_START = 0x10,SERVICE_STOP = 0x20,SERVICE_PAUSE_CONTINUE = 0x40,SERVICE_INTERROGATE = 0x80,SERVICE_USER_DEFINED_CONTROL = 0x100,SERVICE_ALL_ACCESS = 0xF01FF,SERVICE_RUNS_IN_SYSTEM_PROCESS = 0x1,SERVICE_CONFIG_DESCRIPTION = 0x1,SERVICE_CONFIG_FAILURE_ACTIONS = 0x2,};
enum MACRO_SESSION_CRYPT {SESSION_CRYPT_KLEN = 21,};
enum MACRO_SETMITERLIMIT {SETMITERLIMIT = 23,};
enum MACRO_SHIMSTCAPFLAG {SHIMSTCAPFLAG_LOCKABLE = 0x1,SHIMSTCAPFLAG_PURGEABLE = 0x2,};
enum MACRO_SHUTDOWN_TYPE {SHUTDOWN_TYPE_LEN = 32,};
enum MACRO_SIZE_RESTORED {SIZE_RESTORED = 0,SIZE_MINIMIZED = 1,SIZE_MAXIMIZED = 2,SIZE_MAXSHOW = 3,SIZE_MAXHIDE = 4,};
enum MACRO_STATUS_ACCESS {STATUS_ACCESS_VIOLATION = 0xC0000005,STATUS_IN_PAGE_ERROR = 0xC0000006,STATUS_INVALID_HANDLE = 0xC0000008,STATUS_NO_MEMORY = 0xC0000017,STATUS_ILLEGAL_INSTRUCTION = 0xC000001D,STATUS_NONCONTINUABLE_EXCEPTION = 0xC0000025,STATUS_INVALID_DISPOSITION = 0xC0000026,STATUS_ARRAY_BOUNDS_EXCEEDED = 0xC000008C,STATUS_FLOAT_DENORMAL_OPERAND = 0xC000008D,STATUS_FLOAT_DIVIDE_BY_ZERO = 0xC000008E,STATUS_FLOAT_INEXACT_RESULT = 0xC000008F,STATUS_FLOAT_INVALID_OPERATION = 0xC0000090,STATUS_FLOAT_OVERFLOW = 0xC0000091,STATUS_FLOAT_STACK_CHECK = 0xC0000092,STATUS_FLOAT_UNDERFLOW = 0xC0000093,STATUS_INTEGER_DIVIDE_BY_ZERO = 0xC0000094,STATUS_INTEGER_OVERFLOW = 0xC0000095,STATUS_PRIVILEGED_INSTRUCTION = 0xC0000096,STATUS_STACK_OVERFLOW = 0xC00000FD,STATUS_CONTROL_C_EXIT = 0xC000013A,STATUS_FLOAT_MULTIPLE_FAULTS = 0xC00002B4,STATUS_FLOAT_MULTIPLE_TRAPS = 0xC00002B5,STATUS_REG_NAT_CONSUMPTION = 0xC00002C9,STATUS_SXS_EARLY_DEACTIVATION = 0xC015000F,STATUS_SXS_INVALID_DEACTIVATION = 0xC0150010,};
enum MACRO_SYSTEM_THREAD {SYSTEM_THREAD_EXCEPTION_NOT_HANDLED = 0x7E,SYSTEM_THREAD_EXCEPTION_NOT_HANDLED_M = 0x1000007E,};
enum MACRO_TB_GETMETRICS {TB_GETMETRICS = 1125,TB_SETMETRICS = 1126,TB_SETWINDOWTHEME = 8203,};
enum MACRO_TC_RECTANGLES {TC_RECTANGLES = 0,TC_PATHOBJ = 2,};
enum MACRO_TRACE_MESSAGE {TRACE_MESSAGE_SEQUENCE = 1,TRACE_MESSAGE_GUID = 2,TRACE_MESSAGE_COMPONENTID = 4,TRACE_MESSAGE_TIMESTAMP = 8,TRACE_MESSAGE_PERFORMANCE_TIMESTAMP = 16,TRACE_MESSAGE_SYSTEMINFO = 32,TRACE_MESSAGE_FLAG_MASK = 65535,TRACE_MESSAGE_MAXIMUM_SIZE = 8192,};
enum MACRO_WM_CHOOSEFONT {WM_CHOOSEFONT_GETLOGFONT = 1025,WM_CHOOSEFONT_SETLOGFONT = 1125,WM_CHOOSEFONT_SETFLAGS = 1126,};
enum MACRO_WM_MOUSEFIRST {WM_MOUSEFIRST = 0x200,WM_MOUSEMOVE = 0x200,WM_LBUTTONDOWN = 0x201,WM_LBUTTONUP = 0x202,WM_LBUTTONDBLCLK = 0x203,WM_RBUTTONDOWN = 0x204,WM_RBUTTONUP = 0x205,WM_RBUTTONDBLCLK = 0x206,WM_MBUTTONDOWN = 0x207,WM_MBUTTONUP = 0x208,WM_MBUTTONDBLCLK = 0x209,WM_MOUSEWHEEL = 0x20A,WM_XBUTTONDOWN = 0x20B,WM_XBUTTONUP = 0x20C,WM_XBUTTONDBLCLK = 0x20D,WM_MOUSELAST = 0x20D,};
enum MACRO_X509_SEQUENCE {X509_SEQUENCE_OF_ANY = 34,X509_CRL_DIST_POINTS = 35,X509_ENHANCED_KEY_USAGE = 36,};
enum MACRO_cktypeDIBbits {cktypeDIBbits = 25188,};
enum MACRO_grfdexPropAll {grfdexPropAll = 16383,};
typedef struct _MCDSTENCILTESTSTATE MCDSTENCILTESTSTATE;
typedef struct tagMCI_ANIM_PLAY_PARMS MCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS MCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS MCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS MCI_OVLY_RECT_PARMS;
typedef struct _MIB_IPFORWARDNUMBER MIB_IPFORWARDNUMBER;
typedef struct _B1AAA2E973C90C8AA1D1293855444268 MIB_MCAST_LIMIT_ROW;
typedef struct _MIB_MFE_STATS_TABLE MIB_MFE_STATS_TABLE;
typedef struct tMIXERCONTROLDETAILS MIXERCONTROLDETAILS;
typedef struct _NETWORK_ADDRESS_IPX NETWORK_ADDRESS_IPX;
typedef struct tagCOMPOSITIONSTRING *NPCOMPOSITIONSTRING;
typedef struct _8FE251E0C9BEAEF58C2D97D4F1899077 NT_FE_CONSOLE_PROPS;
typedef struct tagOIFI OLEINPLACEFRAMEINFO;
typedef float OLE_XSIZE_CONTAINER;
typedef float OLE_YSIZE_CONTAINER;
enum OfflineFolderStatus {OFS_INACTIVE = 0xFFFFFFFF,OFS_ONLINE = 0x0,OFS_OFFLINE = 0x1,OFS_SERVERBACK = 0x2,OFS_DIRTYCACHE = 0x3,};
typedef struct _PAR_SET_INFORMATION PAR_SET_INFORMATION;
typedef struct _BDANODE_DESCRIPTOR *PBDANODE_DESCRIPTOR;
typedef struct tagBDA_TRANSPORT_INFO *PBDA_TRANSPORT_INFO;
typedef struct _BIDI_RESPONSE_DATA *PBIDI_RESPONSE_DATA;
typedef struct _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO;
typedef struct _CERT_CHAIN_CONTEXT *PCERT_CHAIN_CONTEXT;
typedef struct _CERT_CHAIN_ELEMENT *PCERT_CHAIN_ELEMENT;
typedef struct _CERT_DH_PARAMETERS *PCERT_DH_PARAMETERS;
typedef struct _CERT_POLICIES_INFO *PCERT_POLICIES_INFO;
typedef struct _CHANGER_SET_ACCESS *PCHANGER_SET_ACCESS;
typedef struct _CMC_TAGGED_REQUEST *PCMC_TAGGED_REQUEST;
typedef struct _CONFIG_INFO_DATA_1 *PCONFIG_INFO_DATA_1;
typedef struct _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO;
typedef struct _CRYPT_CSP_PROVIDER *PCRYPT_CSP_PROVIDER;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB;
typedef struct _CRYPT_PROVUI_FUNCS *PCRYPT_PROVUI_FUNCS;
typedef struct _DDBOBNEXTFIELDINFO *PDDBOBNEXTFIELDINFO;
typedef struct _DD_CREATEVPORTDATA *PDD_CREATEVPORTDATA;
typedef struct _DD_D3DBUFCALLBACKS *PDD_D3DBUFCALLBACKS;
typedef struct _DD_GETSCANLINEDATA *PDD_GETSCANLINEDATA;
typedef struct DD_KERNELCALLBACKS *PDD_KERNELCALLBACKS;
typedef struct _DD_MORESURFACECAPS *PDD_MORESURFACECAPS;
typedef struct _DD_SETCLIPLISTDATA *PDD_SETCLIPLISTDATA;
typedef struct _DD_SETCOLORKEYDATA *PDD_SETCOLORKEYDATA;
typedef struct _DD_SYNCSURFACEDATA *PDD_SYNCSURFACEDATA;
typedef struct _DD_UPDATEVPORTDATA *PDD_UPDATEVPORTDATA;
typedef struct _DD_VIDEOPORT_LOCAL *PDD_VIDEOPORT_LOCAL;
typedef struct _DELETE_PORT_DATA_1 *PDELETE_PORT_DATA_1;
typedef struct _DEVQUERYPRINT_INFO *PDEVQUERYPRINT_INFO;
typedef struct IDirect3DSwapChain8 *PDIRECT3DSWAPCHAIN8;
typedef struct _DISK_EX_INT13_INFO *PDISK_EX_INT13_INFO;
typedef struct tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH;
typedef struct tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT;
typedef struct tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE;
typedef struct _ENUMERATION_BUFFER *PENUMERATION_BUFFER;
typedef struct _EVENT_TRACE_HEADER *PEVENT_TRACE_HEADER;
typedef struct _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;
typedef struct _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64;
typedef struct _EA4AF2A6DC8AE690E5FA5BC5736FE7C7 *PFIND_BY_SID_OUTPUT;
typedef struct _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD;
typedef struct _GETVERSIONINPARAMS *PGETVERSIONINPARAMS;
typedef struct tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT;
typedef struct _HIDD_CONFIGURATION *PHIDD_CONFIGURATION;
typedef struct _HIDP_UNKNOWN_TOKEN *PHIDP_UNKNOWN_TOKEN;
typedef struct _PHYSICAL_WITH_FLAGS PHYSICAL_WITH_FLAGS;
enum PIDMSI_STATUS_VALUE {PIDMSI_STATUS_NORMAL = 0x0,PIDMSI_STATUS_NEW = 0x1,PIDMSI_STATUS_PRELIM = 0x2,PIDMSI_STATUS_DRAFT = 0x3,PIDMSI_STATUS_INPROGRESS = 0x4,PIDMSI_STATUS_EDIT = 0x5,PIDMSI_STATUS_REVIEW = 0x6,PIDMSI_STATUS_PROOF = 0x7,PIDMSI_STATUS_FINAL = 0x8,PIDMSI_STATUS_OTHER = 0x7FFF,};
typedef struct IMAGE_COR20_HEADER *PIMAGE_COR20_HEADER;
typedef struct _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;
typedef struct _KERB_EXTERNAL_NAME *PKERB_EXTERNAL_NAME;
typedef struct _KERB_NET_ADDRESSES *PKERB_NET_ADDRESSES;
typedef struct tagKS_AnalogVideoInfo *PKS_ANALOGVIDEOINFO;
typedef struct tagKS_DATARANGE_VIDEO *PKS_DATARANGE_VIDEO;
typedef struct _KS_DVDCOPY_CHLGKEY *PKS_DVDCOPY_CHLGKEY;
typedef struct _KS_DVDCOPY_DISCKEY *PKS_DVDCOPY_DISCKEY;
typedef struct tagKS_VIDEOINFOHEADER *PKS_VIDEOINFOHEADER;
typedef struct _LSA_TRANSLATED_SID *PLSA_TRANSLATED_SID;
typedef struct _LSA_UNICODE_STRING *PLSA_UNICODE_STRING;
typedef struct tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW *PMCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS;
typedef struct _MIB_IPFORWARDTABLE *PMIB_IPFORWARDTABLE;
typedef struct _MIB_IPMCAST_GLOBAL *PMIB_IPMCAST_GLOBAL;
typedef struct tagMIXERLINECONTROLSA *PMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW *PMIXERLINECONTROLSW;
typedef struct _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD;
typedef struct _NDIS_CO_LINK_SPEED *PNDIS_CO_LINK_SPEED;
typedef struct _NDIS_VAR_DATA_DESC *PNDIS_VAR_DATA_DESC;
typedef struct _NETWORK_ADDRESS_IP *PNETWORK_ADDRESS_IP;
typedef struct _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW;
typedef struct _F9B51A3DB5554E7753FB9DD51D5E00E5 POWER_ACTION_POLICY;
typedef struct _PERF_COUNTER_BLOCK *PPERF_COUNTER_BLOCK;
typedef struct _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;
typedef struct tagRAWINPUTDEVICELIST *PRAWINPUTDEVICELIST;
typedef struct _READCONTROLSPACE32 *PREADCONTROLSPACE32;
typedef struct _READCONTROLSPACE64 *PREADCONTROLSPACE64;
typedef struct _PRINTER_NOTIFY_INFO PRINTER_NOTIFY_INFO;
typedef struct _PRINTER_NOTIFY_INIT PRINTER_NOTIFY_INIT;
typedef struct _PROCESS_INFORMATION PROCESS_INFORMATION;
typedef struct _A0026B003AB75CC8BFC049DB25C2779D *PRPC_DISPATCH_TABLE;
typedef struct _OSVERSIONINFOW *PRTL_OSVERSIONINFOW;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D *PSCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F *PSCARD_READERSTATEW;
typedef struct _SERVICE_ASYNC_INFO *PSERVICE_ASYNC_INFO;
typedef struct _SERVICE_TYPE_VALUE *PSERVICE_TYPE_VALUE;
typedef struct _PSFEATURE_CUSTPAPER PSFEATURE_CUSTPAPER;
typedef struct _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;
typedef struct _SPC_SP_AGENCY_INFO *PSPC_SP_AGENCY_INFO;
typedef struct _SPC_STATEMENT_TYPE *PSPC_STATEMENT_TYPE;
typedef struct _SP_INF_INFORMATION *PSP_INF_INFORMATION;
typedef struct _A4B4B8B4CE90204588F5CA0CCC4989CD *PSYSTEM_POWER_LEVEL;
typedef struct _TOKEN_AUDIT_POLICY *PTOKEN_AUDIT_POLICY;
typedef struct _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;
typedef struct _VERIFY_INFORMATION *PVERIFY_INFORMATION;
typedef struct _WINDOWS_DEVICELIST *PWINDOWS_DEVICELIST;
typedef struct WINTRUST_BLOB_INFO_ *PWINTRUST_BLOB_INFO;
typedef struct WINTRUST_CERT_INFO_ *PWINTRUST_CERT_INFO;
typedef struct WINTRUST_FILE_INFO_ *PWINTRUST_FILE_INFO;
typedef struct WINTRUST_SGNR_INFO_ *PWINTRUST_SGNR_INFO;
typedef struct _WSANAMESPACE_INFOA *PWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *PWSANAMESPACE_INFOW;
struct QueryCancelAutoPlay;
typedef struct tagRID_DEVICE_INFO_HID RID_DEVICE_INFO_HID;
typedef struct _RPC_PROTSEQ_VECTORA RPC_PROTSEQ_VECTORA;
typedef struct _RPC_PROTSEQ_VECTORW RPC_PROTSEQ_VECTORW;
typedef struct _RPC_TRANSFER_SYNTAX RPC_TRANSFER_SYNTAX;
typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;
typedef struct _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;
typedef struct _SFVM_HELPTOPIC_DATA SFVM_HELPTOPIC_DATA;
typedef struct _SHChangeNotifyEntry SHChangeNotifyEntry;
typedef struct _SOCKET_ADDRESS_LIST SOCKET_ADDRESS_LIST;
typedef struct _SYSTEM_POWER_POLICY SYSTEM_POWER_POLICY;
typedef struct _SYSTEM_POWER_STATUS SYSTEM_POWER_STATUS;
struct ShellDispatchInproc;
typedef struct _TAPE_GET_STATISTICS TAPE_GET_STATISTICS;
typedef struct _TAPE_WMI_OPERATIONS TAPE_WMI_OPERATIONS;
typedef struct _TOKEN_PRIMARY_GROUP TOKEN_PRIMARY_GROUP;
struct TrayBandSiteService;
typedef struct _VOLUME_DISK_EXTENTS VOLUME_DISK_EXTENTS;
struct _COMM_FAULT_OFFSETS {short CommOffset;short FaultOffset;};
enum _D3DBACKBUFFER_TYPE {D3DBACKBUFFER_TYPE_MONO = 0x0,D3DBACKBUFFER_TYPE_LEFT = 0x1,D3DBACKBUFFER_TYPE_RIGHT = 0x2,D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DRENDERSTATETYPE {D3DRS_ZENABLE = 0x7,D3DRS_FILLMODE = 0x8,D3DRS_SHADEMODE = 0x9,D3DRS_LINEPATTERN = 0xA,D3DRS_ZWRITEENABLE = 0xE,D3DRS_ALPHATESTENABLE = 0xF,D3DRS_LASTPIXEL = 0x10,D3DRS_SRCBLEND = 0x13,D3DRS_DESTBLEND = 0x14,D3DRS_CULLMODE = 0x16,D3DRS_ZFUNC = 0x17,D3DRS_ALPHAREF = 0x18,D3DRS_ALPHAFUNC = 0x19,D3DRS_DITHERENABLE = 0x1A,D3DRS_ALPHABLENDENABLE = 0x1B,D3DRS_FOGENABLE = 0x1C,D3DRS_SPECULARENABLE = 0x1D,D3DRS_ZVISIBLE = 0x1E,D3DRS_FOGCOLOR = 0x22,D3DRS_FOGTABLEMODE = 0x23,D3DRS_FOGSTART = 0x24,D3DRS_FOGEND = 0x25,D3DRS_FOGDENSITY = 0x26,D3DRS_EDGEANTIALIAS = 0x28,D3DRS_ZBIAS = 0x2F,D3DRS_RANGEFOGENABLE = 0x30,D3DRS_STENCILENABLE = 0x34,D3DRS_STENCILFAIL = 0x35,D3DRS_STENCILZFAIL = 0x36,D3DRS_STENCILPASS = 0x37,D3DRS_STENCILFUNC = 0x38,D3DRS_STENCILREF = 0x39,D3DRS_STENCILMASK = 0x3A,D3DRS_STENCILWRITEMASK = 0x3B,D3DRS_TEXTUREFACTOR = 0x3C,D3DRS_WRAP0 = 0x80,D3DRS_WRAP1 = 0x81,D3DRS_WRAP2 = 0x82,D3DRS_WRAP3 = 0x83,D3DRS_WRAP4 = 0x84,D3DRS_WRAP5 = 0x85,D3DRS_WRAP6 = 0x86,D3DRS_WRAP7 = 0x87,D3DRS_CLIPPING = 0x88,D3DRS_LIGHTING = 0x89,D3DRS_AMBIENT = 0x8B,D3DRS_FOGVERTEXMODE = 0x8C,D3DRS_COLORVERTEX = 0x8D,D3DRS_LOCALVIEWER = 0x8E,D3DRS_NORMALIZENORMALS = 0x8F,D3DRS_DIFFUSEMATERIALSOURCE = 0x91,D3DRS_SPECULARMATERIALSOURCE = 0x92,D3DRS_AMBIENTMATERIALSOURCE = 0x93,D3DRS_EMISSIVEMATERIALSOURCE = 0x94,D3DRS_VERTEXBLEND = 0x97,D3DRS_CLIPPLANEENABLE = 0x98,D3DRS_SOFTWAREVERTEXPROCESSING = 0x99,D3DRS_POINTSIZE = 0x9A,D3DRS_POINTSIZE_MIN = 0x9B,D3DRS_POINTSPRITEENABLE = 0x9C,D3DRS_POINTSCALEENABLE = 0x9D,D3DRS_POINTSCALE_A = 0x9E,D3DRS_POINTSCALE_B = 0x9F,D3DRS_POINTSCALE_C = 0xA0,D3DRS_MULTISAMPLEANTIALIAS = 0xA1,D3DRS_MULTISAMPLEMASK = 0xA2,D3DRS_PATCHEDGESTYLE = 0xA3,D3DRS_PATCHSEGMENTS = 0xA4,D3DRS_DEBUGMONITORTOKEN = 0xA5,D3DRS_POINTSIZE_MAX = 0xA6,D3DRS_INDEXEDVERTEXBLENDENABLE = 0xA7,D3DRS_COLORWRITEENABLE = 0xA8,D3DRS_TWEENFACTOR = 0xAA,D3DRS_BLENDOP = 0xAB,D3DRS_POSITIONORDER = 0xAC,D3DRS_NORMALORDER = 0xAD,D3DRS_FORCE_DWORD = 0x7FFFFFFF,};
enum _DEVICE_POWER_STATE {PowerDeviceUnspecified = 0x0,PowerDeviceD0 = 0x1,PowerDeviceD1 = 0x2,PowerDeviceD2 = 0x3,PowerDeviceD3 = 0x4,PowerDeviceMaximum = 0x5,};
enum _FINDEX_INFO_LEVELS {FindExInfoStandard = 0x0,FindExInfoMaxInfoLevel = 0x1,};
enum _JOBOBJECTINFOCLASS {JobObjectBasicAccountingInformation = 0x1,JobObjectBasicLimitInformation = 0x2,JobObjectBasicProcessIdList = 0x3,JobObjectBasicUIRestrictions = 0x4,JobObjectSecurityLimitInformation = 0x5,JobObjectEndOfJobTimeInformation = 0x6,JobObjectAssociateCompletionPortInformation = 0x7,JobObjectBasicAndIoAccountingInformation = 0x8,JobObjectExtendedLimitInformation = 0x9,JobObjectJobSetInformation = 0xA,MaxJobObjectInfoClass = 0xB,};
struct _MIDL_FORMAT_STRING {short Pad;unsigned char Format[];};
enum _RAS_PORT_CONDITION {RAS_PORT_NON_OPERATIONAL = 0x0,RAS_PORT_DISCONNECTED = 0x1,RAS_PORT_CALLING_BACK = 0x2,RAS_PORT_LISTENING = 0x3,RAS_PORT_AUTHENTICATING = 0x4,RAS_PORT_AUTHENTICATED = 0x5,RAS_PORT_INITIALIZING = 0x6,};
enum _STORAGE_MEDIA_TYPE {DDS_4mm = 0x20,MiniQic = 0x21,Travan = 0x22,QIC = 0x23,MP_8mm = 0x24,AME_8mm = 0x25,AIT1_8mm = 0x26,DLT = 0x27,NCTP = 0x28,IBM_3480 = 0x29,IBM_3490E = 0x2A,IBM_Magstar_3590 = 0x2B,IBM_Magstar_MP = 0x2C,STK_DATA_D3 = 0x2D,SONY_DTF = 0x2E,DV_6mm = 0x2F,DMI = 0x30,SONY_D2 = 0x31,CLEANER_CARTRIDGE = 0x32,CD_ROM = 0x33,CD_R = 0x34,CD_RW = 0x35,DVD_ROM = 0x36,DVD_R = 0x37,DVD_RW = 0x38,MO_3_RW = 0x39,MO_5_WO = 0x3A,MO_5_RW = 0x3B,MO_5_LIMDOW = 0x3C,PC_5_WO = 0x3D,PC_5_RW = 0x3E,PD_5_RW = 0x3F,ABL_5_WO = 0x40,PINNACLE_APEX_5_RW = 0x41,SONY_12_WO = 0x42,PHILIPS_12_WO = 0x43,HITACHI_12_WO = 0x44,CYGNET_12_WO = 0x45,KODAK_14_WO = 0x46,MO_NFR_525 = 0x47,NIKON_12_RW = 0x48,IOMEGA_ZIP = 0x49,IOMEGA_JAZ = 0x4A,SYQUEST_EZ135 = 0x4B,SYQUEST_EZFLYER = 0x4C,SYQUEST_SYJET = 0x4D,AVATAR_F2 = 0x4E,MP2_8mm = 0x4F,DST_S = 0x50,DST_M = 0x51,DST_L = 0x52,VXATape_1 = 0x53,VXATape_2 = 0x54,STK_9840 = 0x55,LTO_Ultrium = 0x56,LTO_Accelis = 0x57,DVD_RAM = 0x58,AIT_8mm = 0x59,ADR_1 = 0x5A,ADR_2 = 0x5B,STK_9940 = 0x5C,};
enum _STREAM_INFO_LEVELS {FindStreamInfoStandard = 0x0,FindStreamInfoMaxInfoLevel = 0x1,};
enum _SYSTEM_POWER_STATE {PowerSystemUnspecified = 0x0,PowerSystemWorking = 0x1,PowerSystemSleeping1 = 0x2,PowerSystemSleeping2 = 0x3,PowerSystemSleeping3 = 0x4,PowerSystemHibernate = 0x5,PowerSystemShutdown = 0x6,PowerSystemMaximum = 0x7,};
enum tagQACONTAINERFLAGS {QACONTAINER_SHOWHATCHING = 0x1,QACONTAINER_SHOWGRABHANDLES = 0x2,QACONTAINER_USERMODE = 0x4,QACONTAINER_DISPLAYASDEFAULT = 0x8,QACONTAINER_UIDEAD = 0x10,QACONTAINER_AUTOCLIP = 0x20,QACONTAINER_MESSAGEREFLECT = 0x40,QACONTAINER_SUPPORTSMNEMONICS = 0x80,};
enum tag_WBEM_BATCH_TYPE {WBEM_FLAG_BATCH_IF_NEEDED = 0x0,WBEM_FLAG_MUST_BATCH = 0x1,WBEM_FLAG_MUST_NOT_BATCH = 0x2,};
enum tag_WBEM_GENUS_TYPE {WBEM_GENUS_CLASS = 0x1,WBEM_GENUS_INSTANCE = 0x2,};
enum tag_WBEM_LOGIN_TYPE {WBEM_FLAG_INPROC_LOGIN = 0x0,WBEM_FLAG_LOCAL_LOGIN = 0x1,WBEM_FLAG_REMOTE_LOGIN = 0x2,WBEM_AUTHENTICATION_METHOD_MASK = 0xF,WBEM_FLAG_USE_MULTIPLE_CHALLENGES = 0x10,};
struct tag_s_RIFFWAVE_INST;
typedef struct _ACCESS_ALLOWED_ACE ACCESS_ALLOWED_ACE;
typedef struct _455481A63A960E136730B1239333B9FD AVICOMPRESSOPTIONS;
typedef struct _BDANODE_DESCRIPTOR BDANODE_DESCRIPTOR;
typedef struct tagBDA_TRANSPORT_INFO BDA_TRANSPORT_INFO;
typedef struct _BIDI_RESPONSE_DATA BIDI_RESPONSE_DATA;
typedef struct _CERT_ALT_NAME_INFO CERT_ALT_NAME_INFO;
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT;
typedef struct _CERT_CHAIN_ELEMENT CERT_CHAIN_ELEMENT;
typedef struct _CERT_DH_PARAMETERS CERT_DH_PARAMETERS;
typedef struct _CERT_POLICIES_INFO CERT_POLICIES_INFO;
typedef struct _CHANGER_SET_ACCESS CHANGER_SET_ACCESS;
typedef struct tagCInterfaceStubVtbl CInterfaceStubVtbl;
typedef struct tagCLIENTCREATESTRUCT CLIENTCREATESTRUCT;
typedef union _CLIENT_CALL_RETURN CLIENT_CALL_RETURN;
typedef struct _CMC_TAGGED_REQUEST CMC_TAGGED_REQUEST;
typedef struct _COMM_FAULT_OFFSETS COMM_FAULT_OFFSETS;
typedef struct _CONFIG_INFO_DATA_1 CONFIG_INFO_DATA_1;
typedef struct _CRYPT_CONTENT_INFO CRYPT_CONTENT_INFO;
typedef struct _CRYPT_CSP_PROVIDER CRYPT_CSP_PROVIDER;
typedef struct _CRYPTOAPI_BLOB CRYPT_INTEGER_BLOB;
typedef struct _CRYPT_PROVUI_FUNCS CRYPT_PROVUI_FUNCS;
typedef struct _D3DHAL_DP2LINELIST D3DHAL_DP2LINELIST;
typedef struct _D3DHAL_DP2SETLIGHT D3DHAL_DP2SETLIGHT;
typedef struct _D3DHAL_DP2STATESET D3DHAL_DP2STATESET;
typedef struct _D3DLIGHTINGELEMENT D3DLIGHTINGELEMENT;
typedef struct _D3DNTDeviceDesc_V3 D3DNTDEVICEDESC_V3;
typedef struct _D3DNTHAL_CALLBACKS D3DNTHAL_CALLBACKS;
typedef struct _D3DNTHAL_DP2POINTS D3DNTHAL_DP2POINTS;
typedef struct _D3DNTHAL_DP2TEXBLT D3DNTHAL_DP2TEXBLT;
typedef struct _D3DNTHAL_DP2ZRANGE D3DNTHAL_DP2ZRANGE;
typedef struct _D3DPROCESSVERTICES D3DPROCESSVERTICES;
typedef struct _DDBOBNEXTFIELDINFO DDBOBNEXTFIELDINFO;
typedef struct tagDDDEVICEIDENTIFIER DDDEVICEIDENTIFIER;
typedef struct _DDMCCOMPBUFFERINFO DDMCCOMPBUFFERINFO;
typedef struct _DDMOCOMPBUFFERINFO DDMOCOMPBUFFERINFO;
typedef struct _DDNT_GETFORMATDATA DDNT_GETFORMATDATA;
typedef struct _DDVIDEOPORTCONNECT DDVIDEOPORTCONNECT;
typedef struct _DD_CREATEVPORTDATA DD_CREATEVPORTDATA;
typedef struct _DD_D3DBUFCALLBACKS DD_D3DBUFCALLBACKS;
typedef struct _DD_GETSCANLINEDATA DD_GETSCANLINEDATA;
typedef struct _DD_MORESURFACECAPS DD_MORESURFACECAPS;
typedef struct _DD_SETCLIPLISTDATA DD_SETCLIPLISTDATA;
typedef struct _DD_SETCOLORKEYDATA DD_SETCOLORKEYDATA;
typedef struct _DD_SYNCSURFACEDATA DD_SYNCSURFACEDATA;
typedef struct _DD_UPDATEVPORTDATA DD_UPDATEVPORTDATA;
typedef struct _DD_VIDEOPORT_LOCAL DD_VIDEOPORT_LOCAL;
typedef struct _DELETE_PORT_DATA_1 DELETE_PORT_DATA_1;
typedef struct _DEVQUERYPRINT_INFO DEVQUERYPRINT_INFO;
typedef struct digirealwaveformat_tag DIGIREALWAVEFORMAT;
typedef struct _DISK_EX_INT13_INFO DISK_EX_INT13_INFO;
typedef struct _DMUS_ARTICULATION2 DMUS_ARTICULATION2;
typedef struct dolbyac2waveformat_tag DOLBYAC2WAVEFORMAT;
typedef struct _DSCFXNoiseSuppress DSCFXNoiseSuppress;
typedef struct dvi_adpcmwaveformat_tag DVIADPCMWAVEFORMAT;
struct DWebBrowserEvents2 {struct DWebBrowserEvents2Vtbl *lpVtbl;};
struct DataSourceListener {struct DataSourceListenerVtbl *lpVtbl;};
typedef struct tagEMRCREATEMONOBRUSH EMRCREATEMONOBRUSH;
typedef struct tagEMREXCLUDECLIPRECT EMREXCLUDECLIPRECT;
typedef struct tagEMRSETARCDIRECTION EMRSETARCDIRECTION;
typedef struct tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
typedef struct _ENUMERATION_BUFFER ENUMERATION_BUFFER;
typedef struct _EVENT_TRACE_HEADER EVENT_TRACE_HEADER;
typedef struct _EXCEPTION_POINTERS EXCEPTION_POINTERS;
typedef struct _EXCEPTION_RECORD32 EXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 EXCEPTION_RECORD64;
typedef struct _25388EDDA6F9AFF912B25CA06CA16E0D EXP_SPECIAL_FOLDER;
typedef struct _EA4AF2A6DC8AE690E5FA5BC5736FE7C7 FIND_BY_SID_OUTPUT;
typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;
typedef struct _FOCUS_EVENT_RECORD FOCUS_EVENT_RECORD;
typedef struct _GETVERSIONINPARAMS GETVERSIONINPARAMS;
typedef struct tagHARDWAREHOOKSTRUCT HARDWAREHOOKSTRUCT;
typedef struct tagHH_GLOBAL_PROPERTY HH_GLOBAL_PROPERTY;
typedef struct _HIDD_CONFIGURATION HIDD_CONFIGURATION;
typedef struct _HIDP_UNKNOWN_TOKEN HIDP_UNKNOWN_TOKEN;
struct IAccessibleHandler {struct IAccessibleHandlerVtbl *lpVtbl;};
struct ICancelMethodCalls {struct ICancelMethodCallsVtbl *lpVtbl;};
struct IDirect3DResource8 {struct IDirect3DResource8Vtbl *lpVtbl;};
struct IDirectDrawClipper {struct IDirectDrawClipperVtbl *lpVtbl;};
struct IDirectDrawPalette {struct IDirectDrawPaletteVtbl *lpVtbl;};
struct IDirectDrawSurface {struct IDirectDrawSurfaceVtbl *lpVtbl;};
struct IDirectMusicBuffer {struct IDirectMusicBufferVtbl *lpVtbl;};
struct IDirectSoundBuffer {struct IDirectSoundBufferVtbl *lpVtbl;};
struct IDirectSoundFXEcho {struct IDirectSoundFXEchoVtbl *lpVtbl;};
struct IDirectSoundNotify {struct IDirectSoundNotifyVtbl *lpVtbl;};
struct IDockingWindowSite {struct IDockingWindowSiteVtbl *lpVtbl;};
typedef struct ima_adpcmwaveformat_tag IMAADPCMWAVEFORMAT;
typedef struct _IMAGE_NT_HEADERS IMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64;
typedef struct _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
typedef struct _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
enum IMPORT_OBJECT_TYPE {IMPORT_OBJECT_CODE = 0x0,IMPORT_OBJECT_DATA = 0x1,IMPORT_OBJECT_CONST = 0x2,};
struct IOleParentUndoUnit {struct IOleParentUndoUnitVtbl *lpVtbl;};
struct IPersistStreamInit {struct IPersistStreamInitVtbl *lpVtbl;};
struct IProvideClassInfo2 {struct IProvideClassInfo2Vtbl *lpVtbl;};
struct IQueryAssociations {struct IQueryAssociationsVtbl *lpVtbl;};
struct IRpcChannelBuffer2 {struct IRpcChannelBuffer2Vtbl *lpVtbl;};
struct IRpcChannelBuffer3 {struct IRpcChannelBuffer3Vtbl *lpVtbl;};
struct ISWbemPrivilegeSet {struct ISWbemPrivilegeSetVtbl *lpVtbl;};
struct ISWbemQualifierSet {struct ISWbemQualifierSetVtbl *lpVtbl;};
struct ISearchAssistantOC {struct ISearchAssistantOCVtbl *lpVtbl;};
struct IShellChangeNotify {struct IShellChangeNotifyVtbl *lpVtbl;};
struct IShellExecuteHookA {struct IShellExecuteHookAVtbl *lpVtbl;};
struct IShellExecuteHookW {struct IShellExecuteHookWVtbl *lpVtbl;};
struct IShellFolderViewCB {struct IShellFolderViewCBVtbl *lpVtbl;};
struct IShellLinkDataList {struct IShellLinkDataListVtbl *lpVtbl;};
struct IShellMenuCallback {struct IShellMenuCallbackVtbl *lpVtbl;};
struct IShellPropSheetExt {struct IShellPropSheetExtVtbl *lpVtbl;};
struct ISynchronizeHandle {struct ISynchronizeHandleVtbl *lpVtbl;};
struct IVariantChangeType {struct IVariantChangeTypeVtbl *lpVtbl;};
struct IWbemBackupRestore {struct IWbemBackupRestoreVtbl *lpVtbl;};
struct IWbemEventProvider {struct IWbemEventProviderVtbl *lpVtbl;};
struct IWbemObjectTextSrc {struct IWbemObjectTextSrcVtbl *lpVtbl;};
struct IWinInetFileStream {struct IWinInetFileStreamVtbl *lpVtbl;};
typedef struct _KERB_EXTERNAL_NAME KERB_EXTERNAL_NAME;
typedef struct _KERB_NET_ADDRESSES KERB_NET_ADDRESSES;
typedef struct tagKS_AnalogVideoInfo KS_ANALOGVIDEOINFO;
typedef struct tagKS_DATARANGE_VIDEO KS_DATARANGE_VIDEO;
typedef struct _KS_DVDCOPY_CHLGKEY KS_DVDCOPY_CHLGKEY;
typedef struct _KS_DVDCOPY_DISCKEY KS_DVDCOPY_DISCKEY;
typedef struct tagKS_VIDEOINFOHEADER KS_VIDEOINFOHEADER;
typedef struct tACMFILTERCHOOSEA *LPACMFILTERCHOOSEA;
typedef struct tACMFILTERCHOOSEW *LPACMFILTERCHOOSEW;
typedef struct tACMFORMATCHOOSEA *LPACMFORMATCHOOSEA;
typedef struct tACMFORMATCHOOSEW *LPACMFORMATCHOOSEW;
typedef struct tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;
typedef IContinueCallback *LPCONTINUECALLBACK;
typedef struct _D3DDeviceDesc_V1 *LPD3DDEVICEDESC_V1;
typedef struct _D3DDeviceDesc_V2 *LPD3DDEVICEDESC_V2;
typedef struct _D3DDeviceDesc_V3 *LPD3DDEVICEDESC_V3;
typedef struct _D3DHAL_CALLBACKS *LPD3DHAL_CALLBACKS;
typedef struct _D3DHAL_DP2POINTS *LPD3DHAL_DP2POINTS;
typedef struct _D3DTRANSFORMCAPS *LPD3DTRANSFORMCAPS;
typedef struct _D3DTRANSFORMDATA *LPD3DTRANSFORMDATA;
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
typedef struct tagDATABLOCKHEADER *LPDATABLOCK_HEADER;
typedef struct _DDCOMPBUFFERINFO *LPDDCOMPBUFFERINFO;
typedef struct _DDHAL_UNLOCKDATA *LPDDHAL_UNLOCKDATA;
typedef struct tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT;
typedef struct IDirect3DSurface8 *LPDIRECT3DSURFACE8;
typedef struct IDirect3DTexture8 *LPDIRECT3DTEXTURE8;
typedef struct IDirectDrawKernel *LPDIRECTDRAWKERNEL;
typedef struct _DMUS_EVENTHEADER *LPDMUS_EVENTHEADER;
typedef struct _DMUS_SYNTHSTATS8 *LPDMUS_SYNTHSTATS8;
typedef IEnumCATEGORYINFO *LPENUMCATEGORYINFO;
typedef struct tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW;
typedef IEnumOleUndoUnits *LPENUMOLEUNDOUNITS;
typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;
typedef struct tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW;
typedef IInternetSession *LPIINTERNETSESSION;
typedef struct tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;
typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;
typedef struct tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS;
typedef struct tagMDICREATESTRUCTA *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW *LPMDICREATESTRUCTW;
typedef struct tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS;
typedef struct tagNMDATETIMECHANGE *LPNMDATETIMECHANGE;
typedef struct tagNMREBARAUTOBREAK *LPNMREBARAUTOBREAK;
typedef struct tagNMREBARCHILDSIZE *LPNMREBARCHILDSIZE;
typedef struct _NS_SERVICE_INFOA *LPNS_SERVICE_INFOA;
typedef struct _NS_SERVICE_INFOW *LPNS_SERVICE_INFOW;
typedef struct _A5A2C297D512B29747AD9A814A819610 *LPNT_CONSOLE_PROPS;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef IOleCommandTarget *LPOLECOMMANDTARGET;
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
typedef IOleInPlaceSiteEx *LPOLEINPLACESITEEX;
typedef IOleItemContainer *LPOLEITEMCONTAINER;
typedef struct _9B80566C9ECE6A73A5F898405A50FFFF *LPOPENCARDNAME_EXA;
typedef struct _A63D84EB732F4E602FF2E049D2D99B44 *LPOPENCARDNAME_EXW;
typedef struct _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;
typedef IParseDisplayName *LPPARSEDISPLAYNAME;
typedef IPropertyPageSite *LPPROPERTYPAGESITE;
typedef struct _PROPSHEETHEADERA *LPPROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW *LPPROPSHEETHEADERW;
typedef IProvideClassInfo *LPPROVIDECLASSINFO;
typedef struct _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W *LPPROVIDOR_INFO_1W;
typedef struct _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W *LPPROVIDOR_INFO_2W;
typedef struct _QOS_SHAPING_RATE *LPQOS_SHAPING_RATE;
typedef struct _RSVP_POLICY_INFO *LPRSVP_POLICY_INFO;
typedef struct _RSVP_STATUS_INFO *LPRSVP_STATUS_INFO;
typedef struct _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 *LPSCARD_T0_COMMAND;
typedef struct _SENDCMDOUTPARAMS *LPSENDCMDOUTPARAMS;
typedef struct sockaddr_storage *LPSOCKADDR_STORAGE;
typedef struct _SPLCLIENT_INFO_1 *LPSPLCLIENT_INFO_1;
typedef struct _SPLCLIENT_INFO_2 *LPSPLCLIENT_INFO_2;
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
typedef struct _SURFACEALIGNMENT *LPSURFACEALIGNMENT;
typedef IThumbnailCapture *LPTHUMBNAILCAPTURE;
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;
typedef struct _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;
typedef struct _WSANETWORKEVENTS *LPWSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN *LPWSAPROTOCOLCHAIN;
typedef struct _LSA_TRANSLATED_SID LSA_TRANSLATED_SID;
typedef struct _LSA_UNICODE_STRING LSA_UNICODE_STRING;
enum MACRO_ACTIVEOBJECT {ACTIVEOBJECT_STRONG = 0x0,ACTIVEOBJECT_WEAK = 0x1,};
enum MACRO_ASYNCHRONOUS {MK_S_ASYNCHRONOUS = 0x401E8,S_ASYNCHRONOUS = 0x401E8,};
enum MACRO_AVICOMPRESSF {AVICOMPRESSF_INTERLEAVE = 0x1,AVICOMPRESSF_DATARATE = 0x2,AVICOMPRESSF_KEYFRAMES = 0x4,AVICOMPRESSF_VALID = 0x8,};
enum MACRO_AVIGETFRAMEF {AVIGETFRAMEF_BESTDISPLAYFMT = 1,};
enum MACRO_BAD_EXHANDLE {BAD_EXHANDLE = 0xA7,};
enum MACRO_BLACKONWHITE {BLACKONWHITE = 1,WHITEONBLACK = 2,};
enum MACRO_BLTALIGNMENT {BLTALIGNMENT = 119,};
enum MACRO_BORDER_PRINT {BORDER_PRINT = 0x0,NO_BORDER_PRINT = 0x1,BOOKLET_PRINT = 0x2,};
enum MACRO_BUGCODE_NDIS {BUGCODE_NDIS_DRIVER = 0x7C,};
enum MACRO_CABINETSTATE {CABINETSTATE_VERSION = 2,};
enum MACRO_CBEMAXSTRLEN {CBEMAXSTRLEN = 260,};
enum MACRO_CD_RIGHTDOWN {CD_RIGHTDOWN = 0,CD_LEFTDOWN = 1,CD_RIGHTUP = 2,CD_LEFTUP = 3,CD_ANY = 4,CD_LEFTWARDS = 1,CD_UPWARDS = 2,};
enum MACRO_CERT_REQUEST {CERT_REQUEST_V1 = 0,CERT_KEYGEN_REQUEST_V1 = 0,};
enum MACRO_CERT_UNICODE {CERT_UNICODE_RDN_ERR_INDEX_MASK = 0x3FF,CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 0x16,CERT_UNICODE_ATTR_ERR_INDEX_MASK = 0x3F,CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 0x10,CERT_UNICODE_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_DIGITAL_SIGNATURE_KEY_USAGE = 0x80,CERT_NON_REPUDIATION_KEY_USAGE = 0x40,CERT_KEY_ENCIPHERMENT_KEY_USAGE = 0x20,CERT_DATA_ENCIPHERMENT_KEY_USAGE = 0x10,CERT_KEY_AGREEMENT_KEY_USAGE = 0x8,CERT_KEY_CERT_SIGN_KEY_USAGE = 0x4,CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 0x2,CERT_CRL_SIGN_KEY_USAGE = 0x2,CERT_ENCIPHER_ONLY_KEY_USAGE = 0x1,CERT_DECIPHER_ONLY_KEY_USAGE = 0x80,CERT_ALT_NAME_OTHER_NAME = 0x1,CERT_ALT_NAME_RFC822_NAME = 0x2,CERT_ALT_NAME_DNS_NAME = 0x3,CERT_ALT_NAME_X400_ADDRESS = 0x4,CERT_ALT_NAME_DIRECTORY_NAME = 0x5,CERT_ALT_NAME_EDI_PARTY_NAME = 0x6,CERT_ALT_NAME_URL = 0x7,CERT_ALT_NAME_IP_ADDRESS = 0x8,CERT_ALT_NAME_REGISTERED_ID = 0x9,CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 0xFF,CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 0x10,CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_CA_SUBJECT_FLAG = 0x80,CERT_END_ENTITY_SUBJECT_FLAG = 0x40,};
enum MACRO_CLASSFACTORY {CLASSFACTORY_E_FIRST = 0x80040110,CLASSFACTORY_E_LAST = 0x8004011F,CLASSFACTORY_S_FIRST = 0x40110,CLASSFACTORY_S_LAST = 0x4011F,};
enum MACRO_CLOSECHANNEL {CLOSECHANNEL = 4112,};
enum MACRO_CMSG_TRUSTED {CMSG_TRUSTED_SIGNER_FLAG = 0x1,CMSG_SIGNER_ONLY_FLAG = 0x2,CMSG_USE_SIGNER_INDEX_FLAG = 0x4,CMSG_CMS_ENCAPSULATED_CTL_FLAG = 0x8000,CMSG_ENCODE_SORTED_CTL_FLAG = 0x1,CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 0x2,};
enum MACRO_COLORONCOLOR {COLORONCOLOR = 3,HALFTONE = 4,};
enum MACRO_CPSUI_CANCEL {CPSUI_CANCEL = 0,CPSUI_OK = 1,CPSUI_RESTARTWINDOWS = 2,CPSUI_REBOOTSYSTEM = 3,};
enum MACRO_CP_INSTALLED {CP_INSTALLED = 0x1,CP_SUPPORTED = 0x2,};
enum MACRO_CRYPTPROTECT {CRYPTPROTECT_PROMPT_ON_UNPROTECT = 0x1,CRYPTPROTECT_PROMPT_ON_PROTECT = 0x2,CRYPTPROTECT_PROMPT_RESERVED = 0x4,CRYPTPROTECT_PROMPT_STRONG = 0x8,CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 0x10,CRYPTPROTECT_UI_FORBIDDEN = 0x1,CRYPTPROTECT_LOCAL_MACHINE = 0x4,CRYPTPROTECT_CRED_SYNC = 0x8,CRYPTPROTECT_AUDIT = 0x10,CRYPTPROTECT_NO_RECOVERY = 0x20,CRYPTPROTECT_VERIFY_PROTECTION = 0x40,CRYPTPROTECT_CRED_REGENERATE = 0x80,CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 0xFFFFFFF,CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 0xFFFFFFFF,};
enum MACRO_CRYPT_FAILED {CRYPT_FAILED = 0,CRYPT_SUCCEED = 1,};
enum MACRO_CRYPT_FORMAT {CRYPT_FORMAT_STR_MULTI_LINE = 0x1,CRYPT_FORMAT_STR_NO_HEX = 0x10,CRYPT_FORMAT_SIMPLE = 0x1,CRYPT_FORMAT_X509 = 0x2,CRYPT_FORMAT_OID = 0x4,CRYPT_FORMAT_RDN_SEMICOLON = 0x100,CRYPT_FORMAT_RDN_CRLF = 0x200,CRYPT_FORMAT_RDN_UNQUOTE = 0x400,CRYPT_FORMAT_RDN_REVERSE = 0x800,CRYPT_FORMAT_COMMA = 0x1000,CRYPT_FORMAT_SEMICOLON = 0x100,CRYPT_FORMAT_CRLF = 0x200,CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 0x8,CRYPT_ENCODE_ALLOC_FLAG = 0x8000,CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 0x80000000,CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 0x20000000,CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 0x40000000,CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 0x10000,CRYPT_DECODE_NOCOPY_FLAG = 0x1,CRYPT_DECODE_TO_BE_SIGNED_FLAG = 0x2,CRYPT_DECODE_SHARE_OID_STRING_FLAG = 0x4,CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 0x8,CRYPT_DECODE_ALLOC_FLAG = 0x8000,CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 0x1000000,CRYPT_ENCODE_DECODE_NONE = 0x0,};
enum MACRO_CRYPT_SERVER {CRYPT_SERVER = 0x400,};
enum MACRO_CRYPT_STRING {CRYPT_STRING_BASE64HEADER = 0x0,CRYPT_STRING_BASE64 = 0x1,CRYPT_STRING_BINARY = 0x2,CRYPT_STRING_BASE64REQUESTHEADER = 0x3,CRYPT_STRING_HEX = 0x4,CRYPT_STRING_HEXASCII = 0x5,CRYPT_STRING_BASE64_ANY = 0x6,CRYPT_STRING_ANY = 0x7,CRYPT_STRING_HEX_ANY = 0x8,CRYPT_STRING_BASE64X509CRLHEADER = 0x9,CRYPT_STRING_HEXADDR = 0xA,CRYPT_STRING_HEXASCIIADDR = 0xB,CRYPT_STRING_NOCR = 0x80000000,CRYPT_USER_KEYSET = 0x1000,};
enum MACRO_CRYPT_VERIFY {CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1,CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2,CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3,CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1,CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2,CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3,CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4,CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1,CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2,CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1,CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2,CRYPT_ACQUIRE_CACHE_FLAG = 1,CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2,CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4,CRYPT_ACQUIRE_SILENT_FLAG = 64,CRYPT_FIND_USER_KEYSET_FLAG = 1,CRYPT_FIND_MACHINE_KEYSET_FLAG = 2,CRYPT_FIND_SILENT_KEYSET_FLAG = 64,CRYPT_DELETE_KEYSET = 1,};
enum MACRO_CSCONFIGFLAG {CSCONFIGFLAG_BITS = 0x7,CSCONFIGFLAG_DISABLED = 0x1,CSCONFIGFLAG_DO_NOT_CREATE = 0x2,CSCONFIGFLAG_DO_NOT_START = 0x4,};
enum MACRO_D3DHAL_SCENE {D3DHAL_SCENE_CAPTURE_START = 0x0,D3DHAL_SCENE_CAPTURE_END = 0x1,D3DHAL_EXECUTE_NORMAL = 0x0,D3DHAL_EXECUTE_OVERRIDE = 0x1,};
enum MACRO_D3DLIGHTCAPS {D3DLIGHTCAPS_POINT = 0x1,D3DLIGHTCAPS_SPOT = 0x2,D3DLIGHTCAPS_DIRECTIONAL = 0x4,};
enum MACRO_D3DNTHAL_TSS {D3DNTHAL_TSS_RENDERSTATEBASE = 256,D3DNTHAL_TSS_MAXSTAGES = 8,D3DNTHAL_TSS_STATESPERSTAGE = 64,D3DNTHAL_STATESETCREATE = 5,};
enum MACRO_D3DPMISCCAPS {D3DPMISCCAPS_MASKZ = 0x2,D3DPMISCCAPS_LINEPATTERNREP = 0x4,D3DPMISCCAPS_CULLNONE = 0x10,D3DPMISCCAPS_CULLCW = 0x20,D3DPMISCCAPS_CULLCCW = 0x40,D3DPMISCCAPS_COLORWRITEENABLE = 0x80,D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 0x100,D3DPMISCCAPS_CLIPTLVERTS = 0x200,D3DPMISCCAPS_TSSARGTEMP = 0x400,D3DPMISCCAPS_BLENDOP = 0x800,D3DPMISCCAPS_NULLREFERENCE = 0x1000,};
enum MACRO_D3DSETSTATUS {D3DSETSTATUS_STATUS = 0x1,D3DSETSTATUS_EXTENTS = 0x2,D3DSETSTATUS_ALL = 0x3,};
enum MACRO_D3DTEXOPCAPS {D3DTEXOPCAPS_DISABLE = 0x1,D3DTEXOPCAPS_SELECTARG1 = 0x2,D3DTEXOPCAPS_SELECTARG2 = 0x4,D3DTEXOPCAPS_MODULATE = 0x8,D3DTEXOPCAPS_MODULATE2X = 0x10,D3DTEXOPCAPS_MODULATE4X = 0x20,D3DTEXOPCAPS_ADD = 0x40,D3DTEXOPCAPS_ADDSIGNED = 0x80,D3DTEXOPCAPS_ADDSIGNED2X = 0x100,D3DTEXOPCAPS_SUBTRACT = 0x200,D3DTEXOPCAPS_ADDSMOOTH = 0x400,D3DTEXOPCAPS_BLENDDIFFUSEALPHA = 0x800,D3DTEXOPCAPS_BLENDTEXTUREALPHA = 0x1000,D3DTEXOPCAPS_BLENDFACTORALPHA = 0x2000,D3DTEXOPCAPS_BLENDTEXTUREALPHAPM = 0x4000,D3DTEXOPCAPS_BLENDCURRENTALPHA = 0x8000,D3DTEXOPCAPS_PREMODULATE = 0x10000,D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR = 0x20000,D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA = 0x40000,D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR = 0x80000,D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA = 0x100000,D3DTEXOPCAPS_BUMPENVMAP = 0x200000,D3DTEXOPCAPS_BUMPENVMAPLUMINANCE = 0x400000,D3DTEXOPCAPS_DOTPRODUCT3 = 0x800000,D3DTEXOPCAPS_MULTIPLYADD = 0x1000000,D3DTEXOPCAPS_LERP = 0x2000000,};
enum MACRO_D3DTRANSFORM {D3DTRANSFORM_CLIPPED = 0x1,D3DTRANSFORM_UNCLIPPED = 0x2,};
enum MACRO_D3DWRAPCOORD {D3DWRAPCOORD_0 = 0x1,D3DWRAPCOORD_1 = 0x2,D3DWRAPCOORD_2 = 0x4,D3DWRAPCOORD_3 = 0x8,};
enum MACRO_DC_BINADJUST {DC_BINADJUST = 19,DC_EMF_COMPLIANT = 20,DC_DATATYPE_PRODUCED = 21,DC_COLLATE = 22,DC_MANUFACTURER = 23,DC_MODEL = 24,DC_PERSONALITY = 25,DC_PRINTRATE = 26,DC_PRINTRATEUNIT = 27,};
enum MACRO_DDBLT_AFLAGS {DDBLT_AFLAGS = 0x80000000,};
enum MACRO_DDKERNELCAPS {DDKERNELCAPS_SKIPFIELDS = 0x1,DDKERNELCAPS_AUTOFLIP = 0x2,DDKERNELCAPS_SETSTATE = 0x4,DDKERNELCAPS_LOCK = 0x8,DDKERNELCAPS_FLIPVIDEOPORT = 0x10,DDKERNELCAPS_FLIPOVERLAY = 0x20,DDKERNELCAPS_CAPTURE_SYSMEM = 0x40,DDKERNELCAPS_CAPTURE_NONLOCALVIDMEM = 0x80,DDKERNELCAPS_FIELDPOLARITY = 0x100,DDKERNELCAPS_CAPTURE_INVERTED = 0x200,};
enum MACRO_DEREGISTERED {DEREGISTERED = 0x5,};
enum MACRO_DEVICE_QUEUE {DEVICE_QUEUE_NOT_BUSY = 0x2,};
enum MACRO_DFS_REFERRAL {DFS_REFERRAL_REQUEST = 0x400037EE,};
enum MACRO_DMUS_ERRBASE {DMUS_ERRBASE = 0x1000,DMUS_S_PARTIALLOAD = 0x8781091,DMUS_S_PARTIALDOWNLOAD = 0x8781092,DMUS_S_REQUEUE = 0x8781200,DMUS_S_FREE = 0x8781201,DMUS_S_END = 0x8781202,DMUS_S_STRING_TRUNCATED = 0x8781210,DMUS_S_LAST_TOOL = 0x8781211,DMUS_S_OVER_CHORD = 0x8781212,DMUS_S_UP_OCTAVE = 0x8781213,DMUS_S_DOWN_OCTAVE = 0x8781214,DMUS_S_NOBUFFERCONTROL = 0x8781215,DMUS_S_GARBAGE_COLLECTED = 0x8781216,DMUS_E_DRIVER_FAILED = 0x88781101,DMUS_E_PORTS_OPEN = 0x88781102,DMUS_E_DEVICE_IN_USE = 0x88781103,DMUS_E_INSUFFICIENTBUFFER = 0x88781104,DMUS_E_BUFFERNOTSET = 0x88781105,DMUS_E_BUFFERNOTAVAILABLE = 0x88781106,DMUS_E_NOTADLSCOL = 0x88781108,DMUS_E_INVALIDOFFSET = 0x88781109,DMUS_E_ALREADY_LOADED = 0x88781111,DMUS_E_INVALIDPOS = 0x88781113,DMUS_E_INVALIDPATCH = 0x88781114,DMUS_E_CANNOTSEEK = 0x88781115,DMUS_E_CANNOTWRITE = 0x88781116,DMUS_E_CHUNKNOTFOUND = 0x88781117,DMUS_E_INVALID_DOWNLOADID = 0x88781119,DMUS_E_NOT_DOWNLOADED_TO_PORT = 0x88781120,DMUS_E_ALREADY_DOWNLOADED = 0x88781121,DMUS_E_UNKNOWN_PROPERTY = 0x88781122,DMUS_E_SET_UNSUPPORTED = 0x88781123,DMUS_E_GET_UNSUPPORTED = 0x88781124,DMUS_E_NOTMONO = 0x88781125,DMUS_E_BADARTICULATION = 0x88781126,DMUS_E_BADINSTRUMENT = 0x88781127,DMUS_E_BADWAVELINK = 0x88781128,DMUS_E_NOARTICULATION = 0x88781129,DMUS_E_NOTPCM = 0x8878112A,DMUS_E_BADWAVE = 0x8878112B,DMUS_E_BADOFFSETTABLE = 0x8878112C,DMUS_E_UNKNOWNDOWNLOAD = 0x8878112D,DMUS_E_NOSYNTHSINK = 0x8878112E,DMUS_E_ALREADYOPEN = 0x8878112F,DMUS_E_ALREADYCLOSED = 0x88781130,DMUS_E_SYNTHNOTCONFIGURED = 0x88781131,DMUS_E_SYNTHACTIVE = 0x88781132,DMUS_E_CANNOTREAD = 0x88781133,DMUS_E_DMUSIC_RELEASED = 0x88781134,DMUS_E_BUFFER_EMPTY = 0x88781135,DMUS_E_BUFFER_FULL = 0x88781136,DMUS_E_PORT_NOT_CAPTURE = 0x88781137,DMUS_E_PORT_NOT_RENDER = 0x88781138,DMUS_E_DSOUND_NOT_SET = 0x88781139,DMUS_E_ALREADY_ACTIVATED = 0x8878113A,DMUS_E_INVALIDBUFFER = 0x8878113B,DMUS_E_WAVEFORMATNOTSUPPORTED = 0x8878113C,DMUS_E_SYNTHINACTIVE = 0x8878113D,DMUS_E_DSOUND_ALREADY_SET = 0x8878113E,DMUS_E_INVALID_EVENT = 0x8878113F,DMUS_E_UNSUPPORTED_STREAM = 0x88781150,DMUS_E_ALREADY_INITED = 0x88781151,DMUS_E_INVALID_BAND = 0x88781152,DMUS_E_TRACK_HDR_NOT_FIRST_CK = 0x88781155,DMUS_E_TOOL_HDR_NOT_FIRST_CK = 0x88781156,DMUS_E_INVALID_TRACK_HDR = 0x88781157,DMUS_E_INVALID_TOOL_HDR = 0x88781158,DMUS_E_ALL_TOOLS_FAILED = 0x88781159,DMUS_E_ALL_TRACKS_FAILED = 0x88781160,DMUS_E_NOT_FOUND = 0x88781161,DMUS_E_NOT_INIT = 0x88781162,DMUS_E_TYPE_DISABLED = 0x88781163,DMUS_E_TYPE_UNSUPPORTED = 0x88781164,DMUS_E_TIME_PAST = 0x88781165,DMUS_E_TRACK_NOT_FOUND = 0x88781166,DMUS_E_TRACK_NO_CLOCKTIME_SUPPORT = 0x88781167,DMUS_E_NO_MASTER_CLOCK = 0x88781170,DMUS_E_LOADER_NOCLASSID = 0x88781180,DMUS_E_LOADER_BADPATH = 0x88781181,DMUS_E_LOADER_FAILEDOPEN = 0x88781182,DMUS_E_LOADER_FORMATNOTSUPPORTED = 0x88781183,DMUS_E_LOADER_FAILEDCREATE = 0x88781184,DMUS_E_LOADER_OBJECTNOTFOUND = 0x88781185,DMUS_E_LOADER_NOFILENAME = 0x88781186,DMUS_E_INVALIDFILE = 0x88781200,DMUS_E_ALREADY_EXISTS = 0x88781201,DMUS_E_OUT_OF_RANGE = 0x88781202,DMUS_E_SEGMENT_INIT_FAILED = 0x88781203,DMUS_E_ALREADY_SENT = 0x88781204,DMUS_E_CANNOT_FREE = 0x88781205,DMUS_E_CANNOT_OPEN_PORT = 0x88781206,DMUS_E_CANNOT_CONVERT = 0x88781207,DMUS_E_CONNOT_CONVERT = 0x88781207,DMUS_E_DESCEND_CHUNK_FAIL = 0x88781210,DMUS_E_NOT_LOADED = 0x88781211,DMUS_E_SCRIPT_LANGUAGE_INCOMPATIBLE = 0x88781213,DMUS_E_SCRIPT_UNSUPPORTED_VARTYPE = 0x88781214,DMUS_E_SCRIPT_ERROR_IN_SCRIPT = 0x88781215,DMUS_E_SCRIPT_CANTLOAD_OLEAUT32 = 0x88781216,DMUS_E_SCRIPT_LOADSCRIPT_ERROR = 0x88781217,DMUS_E_SCRIPT_INVALID_FILE = 0x88781218,DMUS_E_INVALID_SCRIPTTRACK = 0x88781219,DMUS_E_SCRIPT_VARIABLE_NOT_FOUND = 0x8878121A,DMUS_E_SCRIPT_ROUTINE_NOT_FOUND = 0x8878121B,DMUS_E_SCRIPT_CONTENT_READONLY = 0x8878121C,DMUS_E_SCRIPT_NOT_A_REFERENCE = 0x8878121D,DMUS_E_SCRIPT_VALUE_NOT_SUPPORTED = 0x8878121E,DMUS_E_INVALID_SEGMENTTRIGGERTRACK = 0x88781220,DMUS_E_INVALID_LYRICSTRACK = 0x88781221,DMUS_E_INVALID_PARAMCONTROLTRACK = 0x88781222,DMUS_E_AUDIOVBSCRIPT_SYNTAXERROR = 0x88781223,DMUS_E_AUDIOVBSCRIPT_RUNTIMEERROR = 0x88781224,DMUS_E_AUDIOVBSCRIPT_OPERATIONFAILURE = 0x88781225,DMUS_E_AUDIOPATHS_NOT_VALID = 0x88781226,DMUS_E_AUDIOPATHS_IN_USE = 0x88781227,DMUS_E_NO_AUDIOPATH_CONFIG = 0x88781228,DMUS_E_AUDIOPATH_INACTIVE = 0x88781229,DMUS_E_AUDIOPATH_NOBUFFER = 0x8878122A,DMUS_E_AUDIOPATH_NOPORT = 0x8878122B,DMUS_E_NO_AUDIOPATH = 0x8878122C,DMUS_E_INVALIDCHUNK = 0x8878122D,DMUS_E_AUDIOPATH_NOGLOBALFXBUFFER = 0x8878122E,DMUS_E_INVALID_CONTAINER_OBJECT = 0x8878122F,DMUS_DOWNLOADINFO_INSTRUMENT = 0x1,DMUS_DOWNLOADINFO_WAVE = 0x2,DMUS_DOWNLOADINFO_INSTRUMENT2 = 0x3,DMUS_DOWNLOADINFO_WAVEARTICULATION = 0x4,DMUS_DOWNLOADINFO_STREAMINGWAVE = 0x5,DMUS_DOWNLOADINFO_ONESHOTWAVE = 0x6,DMUS_DEFAULT_SIZE_OFFSETTABLE = 0x1,DMUS_INSTRUMENT_GM_INSTRUMENT = 0x1,DMUS_MIN_DATA_SIZE = 0x4,};
enum MACRO_DOUBLE_ACUTE {DOUBLE_ACUTE = 0x30B,};
enum MACRO_DOWNLOADFACE {DOWNLOADFACE = 514,};
enum MACRO_DRIVER_EVENT {DRIVER_EVENT_INITIALIZE = 0x1,DRIVER_EVENT_DELETE = 0x2,};
enum MACRO_DRIVER_POWER {DRIVER_POWER_STATE_FAILURE = 0x9F,};
enum MACRO_DSBFREQUENCY {DSBFREQUENCY_MIN = 100,DSBFREQUENCY_MAX = 100000,DSBFREQUENCY_ORIGINAL = 0,};
enum MACRO_DS_CERTIFIED {DS_CERTIFIED = 0x0,DS_UNCERTIFIED = 0x1,};
enum MACRO_DTRESULTPART {DTRESULTPART = 3,};
enum MACRO_EC_ENABLEALL {EC_ENABLEALL = 0,EC_ENABLEONE = 128,EC_DISABLE = 8,EC_QUERYWAITING = 2,};
enum MACRO_ENABLEDUPLEX {ENABLEDUPLEX = 28,};
enum MACRO_ENABLE_SMART {ENABLE_SMART = 0xD8,DISABLE_SMART = 0xD9,};
enum MACRO_ENCAPSULATED {ENCAPSULATED_POSTSCRIPT = 4116,};
enum MACRO_ENUM_CURRENT {ENUM_CURRENT_SETTINGS = 4294967295,ENUM_REGISTRY_SETTINGS = 4294967294,};
enum MACRO_EVENT_BRIDGE {EVENT_BRIDGE_PROTOCOL_REGISTER_FAILED = 0xC0003908,EVENT_BRIDGE_MINIPROT_DEVNAME_MISSING = 0xC0003909,EVENT_BRIDGE_MINIPORT_REGISTER_FAILED = 0xC000390A,EVENT_BRIDGE_DEVICE_CREATION_FAILED = 0xC000390B,EVENT_BRIDGE_NO_BRIDGE_MAC_ADDR = 0xC000390C,EVENT_BRIDGE_MINIPORT_INIT_FAILED = 0xC000390D,EVENT_BRIDGE_ETHERNET_NOT_OFFERED = 0xC000390E,EVENT_BRIDGE_THREAD_CREATION_FAILED = 0xC000390F,EVENT_BRIDGE_THREAD_REF_FAILED = 0xC0003910,EVENT_BRIDGE_PACKET_POOL_CREATION_FAILED = 0xC0003911,EVENT_BRIDGE_BUFFER_POOL_CREATION_FAILED = 0xC0003912,EVENT_BRIDGE_INIT_MALLOC_FAILED = 0xC0003913,EVENT_BRIDGE_ADAPTER_LINK_SPEED_QUERY_FAILED = 0xC000396C,EVENT_BRIDGE_ADAPTER_MAC_ADDR_QUERY_FAILED = 0xC000396D,EVENT_BRIDGE_ADAPTER_FILTER_FAILED = 0xC000396E,EVENT_BRIDGE_ADAPTER_NAME_QUERY_FAILED = 0xC000396F,EVENT_BRIDGE_ADAPTER_BIND_FAILED = 0xC0003970,EVENT_DAV_REDIR_DELAYED_WRITE_FAILED = 0x800039D0,EVENT_WEBCLIENT_CLOSE_PUT_FAILED = 0x80003A35,EVENT_WEBCLIENT_CLOSE_DELETE_FAILED = 0x80003A36,EVENT_WEBCLIENT_CLOSE_PROPPATCH_FAILED = 0x80003A37,EVENT_WEBCLIENT_SETINFO_PROPPATCH_FAILED = 0x80003A38,EVENT_HTTP_LOGGING_CREATE_FILE_FAILED = 0xC0003A98,EVENT_HTTP_LOGGING_CREATE_FILE_FAILED_FOR_SITE = 0xC0003A99,EVENT_HTTP_LOGGING_FILE_WRITE_FAILED = 0xC0003A9A,EVENT_HTTP_LOGGING_CREATE_BINARY_FILE_FAILED = 0xC0003A9B,EVENT_HTTP_LOGGING_BINARY_FILE_WRITE_FAILED = 0xC0003A9C,EVENT_HTTP_CREATE_ENDPOINT_FAILED = 0xC0003A9D,EVENT_HTTP_LOGGING_INVALID_FILE_OWNER = 0xC0003A9E,EVENT_HTTP_NAMESPACE_RESERVED = 0x40003A9F,EVENT_HTTP_NAMESPACE_DERESERVED = 0x40003AA0,EVENT_HTTP_NAMESPACE_INIT_FAILED = 0xC0003AA1,EVENT_HTTP_NAMESPACE_INIT2_FAILED = 0xC0003AA2,EVENT_HTTP_LOGGING_CREATE_ERROR_FILE_FAILED = 0xC0003AA3,EVENT_HTTP_LOGGING_ERROR_FILE_WRITE_FAILED = 0xC0003AA4,EVENT_HTTP_LOGGING_ERROR_FILE_CONFIG_FAILED = 0xC0003AA5,EVENT_HTTP_LISTEN_ONLY_CONVERT_FAILED = 0xC0003AA6,EVENT_HTTP_LISTEN_ONLY_ALL_CONVERT_FAILED = 0x40003AA7,};
enum MACRO_EVENT_OBJECT {EVENT_OBJECT_CREATE = 0x8000,EVENT_OBJECT_DESTROY = 0x8001,EVENT_OBJECT_SHOW = 0x8002,EVENT_OBJECT_HIDE = 0x8003,EVENT_OBJECT_REORDER = 0x8004,EVENT_OBJECT_FOCUS = 0x8005,EVENT_OBJECT_SELECTION = 0x8006,EVENT_OBJECT_SELECTIONADD = 0x8007,EVENT_OBJECT_SELECTIONREMOVE = 0x8008,EVENT_OBJECT_SELECTIONWITHIN = 0x8009,EVENT_OBJECT_STATECHANGE = 0x800A,EVENT_OBJECT_LOCATIONCHANGE = 0x800B,EVENT_OBJECT_NAMECHANGE = 0x800C,EVENT_OBJECT_DESCRIPTIONCHANGE = 0x800D,EVENT_OBJECT_VALUECHANGE = 0x800E,EVENT_OBJECT_PARENTCHANGE = 0x800F,EVENT_OBJECT_HELPCHANGE = 0x8010,EVENT_OBJECT_DEFACTIONCHANGE = 0x8011,EVENT_OBJECT_ACCELERATORCHANGE = 0x8012,};
enum MACRO_EXTRA_VOLUME {EXTRA_VOLUME_DELETED = 0xC00037E6,EXTRA_VOLUME_NOT_DELETED = 0xC00037E7,};
enum MACRO_FACILITY_HID {FACILITY_HID_ERROR_CODE = 0x11,};
enum MACRO_FACILITY_RPC {FACILITY_RPC_STUBS = 0x3,FACILITY_RPC_RUNTIME = 0x2,FACILITY_MCA_ERROR_CODE = 0x5,FACILITY_IO_ERROR_CODE = 0x4,};
enum MACRO_FF_SIGNATURE {FF_SIGNATURE_VERIFIED = 0x1,FF_IGNORED_SIGNATURE = 0x2,};
enum MACRO_FILTERCHOOSE {FILTERCHOOSE_MESSAGE = 0,FILTERCHOOSE_FILTERTAG_VERIFY = 0,FILTERCHOOSE_FILTER_VERIFY = 1,FILTERCHOOSE_CUSTOM_VERIFY = 2,};
enum MACRO_FORMATCHOOSE {FORMATCHOOSE_MESSAGE = 0,FORMATCHOOSE_FORMATTAG_VERIFY = 0,FORMATCHOOSE_FORMAT_VERIFY = 1,FORMATCHOOSE_CUSTOM_VERIFY = 2,};
enum MACRO_GETTECHNOLGY {GETTECHNOLGY = 20,};
enum MACRO_HINSPSUIPAGE {HINSPSUIPAGE_FIRST = 0xFFFFFFFE,HINSPSUIPAGE_LAST = 0xFFFFFFFF,};
enum MACRO_HWND_DESKTOP {HWND_DESKTOP = 0,};
enum MACRO_ICDECOMPRESS {ICDECOMPRESS_HURRYUP = 0x80000000,ICDECOMPRESS_UPDATE = 0x40000000,ICDECOMPRESS_PREROLL = 0x20000000,ICDECOMPRESS_NULLFRAME = 0x10000000,ICDECOMPRESS_NOTKEYFRAME = 0x8000000,};
enum MACRO_IMAGE_BITMAP {IMAGE_BITMAP = 0,IMAGE_ICON = 1,IMAGE_CURSOR = 2,IMAGE_ENHMETAFILE = 3,};
enum MACRO_IMAGE_SIZEOF {IMAGE_SIZEOF_AUX_SYMBOL = 18,IMAGE_COMDAT_SELECT_NODUPLICATES = 1,IMAGE_COMDAT_SELECT_ANY = 2,IMAGE_COMDAT_SELECT_SAME_SIZE = 3,IMAGE_COMDAT_SELECT_EXACT_MATCH = 4,IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5,IMAGE_COMDAT_SELECT_LARGEST = 6,IMAGE_COMDAT_SELECT_NEWEST = 7,IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2,IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3,IMAGE_SIZEOF_RELOCATION = 10,IMAGE_REL_I386_ABSOLUTE = 0,IMAGE_REL_I386_DIR16 = 1,IMAGE_REL_I386_REL16 = 2,IMAGE_REL_I386_DIR32 = 6,IMAGE_REL_I386_DIR32NB = 7,IMAGE_REL_I386_SEG12 = 9,IMAGE_REL_I386_SECTION = 10,IMAGE_REL_I386_SECREL = 11,IMAGE_REL_I386_TOKEN = 12,IMAGE_REL_I386_SECREL7 = 13,IMAGE_REL_I386_REL32 = 20,IMAGE_REL_MIPS_ABSOLUTE = 0,IMAGE_REL_MIPS_REFHALF = 1,IMAGE_REL_MIPS_REFWORD = 2,IMAGE_REL_MIPS_JMPADDR = 3,IMAGE_REL_MIPS_REFHI = 4,IMAGE_REL_MIPS_REFLO = 5,IMAGE_REL_MIPS_GPREL = 6,IMAGE_REL_MIPS_LITERAL = 7,IMAGE_REL_MIPS_SECTION = 10,IMAGE_REL_MIPS_SECREL = 11,IMAGE_REL_MIPS_SECRELLO = 12,IMAGE_REL_MIPS_SECRELHI = 13,IMAGE_REL_MIPS_TOKEN = 14,IMAGE_REL_MIPS_JMPADDR16 = 16,IMAGE_REL_MIPS_REFWORDNB = 34,IMAGE_REL_MIPS_PAIR = 37,IMAGE_REL_ALPHA_ABSOLUTE = 0,IMAGE_REL_ALPHA_REFLONG = 1,IMAGE_REL_ALPHA_REFQUAD = 2,IMAGE_REL_ALPHA_GPREL32 = 3,IMAGE_REL_ALPHA_LITERAL = 4,IMAGE_REL_ALPHA_LITUSE = 5,IMAGE_REL_ALPHA_GPDISP = 6,IMAGE_REL_ALPHA_BRADDR = 7,IMAGE_REL_ALPHA_HINT = 8,IMAGE_REL_ALPHA_INLINE_REFLONG = 9,IMAGE_REL_ALPHA_REFHI = 10,IMAGE_REL_ALPHA_REFLO = 11,IMAGE_REL_ALPHA_PAIR = 12,IMAGE_REL_ALPHA_MATCH = 13,IMAGE_REL_ALPHA_SECTION = 14,IMAGE_REL_ALPHA_SECREL = 15,IMAGE_REL_ALPHA_REFLONGNB = 16,IMAGE_REL_ALPHA_SECRELLO = 17,IMAGE_REL_ALPHA_SECRELHI = 18,IMAGE_REL_ALPHA_REFQ3 = 19,IMAGE_REL_ALPHA_REFQ2 = 20,IMAGE_REL_ALPHA_REFQ1 = 21,IMAGE_REL_ALPHA_GPRELLO = 22,IMAGE_REL_ALPHA_GPRELHI = 23,IMAGE_REL_PPC_ABSOLUTE = 0,IMAGE_REL_PPC_ADDR64 = 1,IMAGE_REL_PPC_ADDR32 = 2,IMAGE_REL_PPC_ADDR24 = 3,IMAGE_REL_PPC_ADDR16 = 4,IMAGE_REL_PPC_ADDR14 = 5,IMAGE_REL_PPC_REL24 = 6,IMAGE_REL_PPC_REL14 = 7,IMAGE_REL_PPC_TOCREL16 = 8,IMAGE_REL_PPC_TOCREL14 = 9,IMAGE_REL_PPC_ADDR32NB = 10,IMAGE_REL_PPC_SECREL = 11,IMAGE_REL_PPC_SECTION = 12,IMAGE_REL_PPC_IFGLUE = 13,IMAGE_REL_PPC_IMGLUE = 14,IMAGE_REL_PPC_SECREL16 = 15,IMAGE_REL_PPC_REFHI = 16,IMAGE_REL_PPC_REFLO = 17,IMAGE_REL_PPC_PAIR = 18,IMAGE_REL_PPC_SECRELLO = 19,IMAGE_REL_PPC_SECRELHI = 20,IMAGE_REL_PPC_GPREL = 21,IMAGE_REL_PPC_TOKEN = 22,IMAGE_REL_PPC_TYPEMASK = 255,IMAGE_REL_PPC_NEG = 256,IMAGE_REL_PPC_BRTAKEN = 512,IMAGE_REL_PPC_BRNTAKEN = 1024,IMAGE_REL_PPC_TOCDEFN = 2048,IMAGE_REL_SH3_ABSOLUTE = 0,IMAGE_REL_SH3_DIRECT16 = 1,IMAGE_REL_SH3_DIRECT32 = 2,IMAGE_REL_SH3_DIRECT8 = 3,IMAGE_REL_SH3_DIRECT8_WORD = 4,IMAGE_REL_SH3_DIRECT8_LONG = 5,IMAGE_REL_SH3_DIRECT4 = 6,IMAGE_REL_SH3_DIRECT4_WORD = 7,IMAGE_REL_SH3_DIRECT4_LONG = 8,IMAGE_REL_SH3_PCREL8_WORD = 9,IMAGE_REL_SH3_PCREL8_LONG = 10,IMAGE_REL_SH3_PCREL12_WORD = 11,IMAGE_REL_SH3_STARTOF_SECTION = 12,IMAGE_REL_SH3_SIZEOF_SECTION = 13,IMAGE_REL_SH3_SECTION = 14,IMAGE_REL_SH3_SECREL = 15,IMAGE_REL_SH3_DIRECT32_NB = 16,IMAGE_REL_SH3_GPREL4_LONG = 17,IMAGE_REL_SH3_TOKEN = 18,IMAGE_REL_ARM_ABSOLUTE = 0,IMAGE_REL_ARM_ADDR32 = 1,IMAGE_REL_ARM_ADDR32NB = 2,IMAGE_REL_ARM_BRANCH24 = 3,IMAGE_REL_ARM_BRANCH11 = 4,IMAGE_REL_ARM_TOKEN = 5,IMAGE_REL_ARM_GPREL12 = 6,IMAGE_REL_ARM_GPREL7 = 7,IMAGE_REL_ARM_BLX24 = 8,IMAGE_REL_ARM_BLX11 = 9,IMAGE_REL_ARM_SECTION = 14,IMAGE_REL_ARM_SECREL = 15,IMAGE_REL_AM_ABSOLUTE = 0,IMAGE_REL_AM_ADDR32 = 1,IMAGE_REL_AM_ADDR32NB = 2,IMAGE_REL_AM_CALL32 = 3,IMAGE_REL_AM_FUNCINFO = 4,IMAGE_REL_AM_REL32_1 = 5,IMAGE_REL_AM_REL32_2 = 6,IMAGE_REL_AM_SECREL = 7,IMAGE_REL_AM_SECTION = 8,IMAGE_REL_AM_TOKEN = 9,IMAGE_REL_AMD64_ABSOLUTE = 0,IMAGE_REL_AMD64_ADDR64 = 1,IMAGE_REL_AMD64_ADDR32 = 2,IMAGE_REL_AMD64_ADDR32NB = 3,IMAGE_REL_AMD64_REL32 = 4,IMAGE_REL_AMD64_REL32_1 = 5,IMAGE_REL_AMD64_REL32_2 = 6,IMAGE_REL_AMD64_REL32_3 = 7,IMAGE_REL_AMD64_REL32_4 = 8,IMAGE_REL_AMD64_REL32_5 = 9,IMAGE_REL_AMD64_SECTION = 10,IMAGE_REL_AMD64_SECREL = 11,IMAGE_REL_AMD64_SECREL7 = 12,IMAGE_REL_AMD64_TOKEN = 13,IMAGE_REL_AMD64_SREL32 = 14,IMAGE_REL_AMD64_PAIR = 15,IMAGE_REL_AMD64_SSPAN32 = 16,IMAGE_REL_IA64_ABSOLUTE = 0,IMAGE_REL_IA64_IMM14 = 1,IMAGE_REL_IA64_IMM22 = 2,IMAGE_REL_IA64_IMM64 = 3,IMAGE_REL_IA64_DIR32 = 4,IMAGE_REL_IA64_DIR64 = 5,IMAGE_REL_IA64_PCREL21B = 6,IMAGE_REL_IA64_PCREL21M = 7,IMAGE_REL_IA64_PCREL21F = 8,IMAGE_REL_IA64_GPREL22 = 9,IMAGE_REL_IA64_LTOFF22 = 10,IMAGE_REL_IA64_SECTION = 11,IMAGE_REL_IA64_SECREL22 = 12,IMAGE_REL_IA64_SECREL64I = 13,IMAGE_REL_IA64_SECREL32 = 14,IMAGE_REL_IA64_DIR32NB = 16,IMAGE_REL_IA64_SREL14 = 17,IMAGE_REL_IA64_SREL22 = 18,IMAGE_REL_IA64_SREL32 = 19,IMAGE_REL_IA64_UREL32 = 20,IMAGE_REL_IA64_PCREL60X = 21,IMAGE_REL_IA64_PCREL60B = 22,IMAGE_REL_IA64_PCREL60F = 23,IMAGE_REL_IA64_PCREL60I = 24,IMAGE_REL_IA64_PCREL60M = 25,IMAGE_REL_IA64_IMMGPREL64 = 26,IMAGE_REL_IA64_TOKEN = 27,IMAGE_REL_IA64_GPREL32 = 28,IMAGE_REL_IA64_ADDEND = 31,IMAGE_REL_CEF_ABSOLUTE = 0,IMAGE_REL_CEF_ADDR32 = 1,IMAGE_REL_CEF_ADDR64 = 2,IMAGE_REL_CEF_ADDR32NB = 3,IMAGE_REL_CEF_SECTION = 4,IMAGE_REL_CEF_SECREL = 5,IMAGE_REL_CEF_TOKEN = 6,IMAGE_REL_CEE_ABSOLUTE = 0,IMAGE_REL_CEE_ADDR32 = 1,IMAGE_REL_CEE_ADDR64 = 2,IMAGE_REL_CEE_ADDR32NB = 3,IMAGE_REL_CEE_SECTION = 4,IMAGE_REL_CEE_SECREL = 5,IMAGE_REL_CEE_TOKEN = 6,IMAGE_REL_M32R_ABSOLUTE = 0,IMAGE_REL_M32R_ADDR32 = 1,IMAGE_REL_M32R_ADDR32NB = 2,IMAGE_REL_M32R_ADDR24 = 3,IMAGE_REL_M32R_GPREL16 = 4,IMAGE_REL_M32R_PCREL24 = 5,IMAGE_REL_M32R_PCREL16 = 6,IMAGE_REL_M32R_PCREL8 = 7,IMAGE_REL_M32R_REFHALF = 8,IMAGE_REL_M32R_REFHI = 9,IMAGE_REL_M32R_REFLO = 10,IMAGE_REL_M32R_PAIR = 11,IMAGE_REL_M32R_SECTION = 12,IMAGE_REL_M32R_SECREL32 = 13,IMAGE_REL_M32R_TOKEN = 14,};
enum MACRO_IME_PROP_END {IME_PROP_END_UNLOAD = 0x1,IME_PROP_KBD_CHAR_FIRST = 0x2,IME_PROP_IGNORE_UPKEYS = 0x4,IME_PROP_NEED_ALTKEY = 0x8,IME_PROP_NO_KEYS_ON_CLOSE = 0x10,IME_PROP_ACCEPT_WIDE_VKEY = 0x20,};
enum MACRO_IMPLTYPEFLAG {IMPLTYPEFLAG_FDEFAULT = 0x1,IMPLTYPEFLAG_FSOURCE = 0x2,IMPLTYPEFLAG_FRESTRICTED = 0x4,IMPLTYPEFLAG_FDEFAULTVTABLE = 0x8,};
enum MACRO_INACCESSIBLE {INACCESSIBLE_BOOT_DEVICE = 0x7B,};
enum MACRO_INCONSISTENT {INCONSISTENT_IRP = 0x2A,};
enum MACRO_INSUFFICIENT {INSUFFICIENT_SYSTEM_MAP_REGS = 0x45,};
enum MACRO_INVALID_ATOM {INVALID_ATOM = 0,};
enum MACRO_INVALID_LINK {INVALID_LINK_INDEX = -1,};
enum MACRO_INVALID_WORK {INVALID_WORK_QUEUE_ITEM = 0x96,};
enum MACRO_IOCTL_SERIAL {IOCTL_SERIAL_LSRMST_INSERT = 1769596,IOCTL_SERENUM_EXPOSE_HARDWARE = 3604992,IOCTL_SERENUM_REMOVE_HARDWARE = 3604996,IOCTL_SERENUM_PORT_DESC = 3605000,IOCTL_SERENUM_GET_PORT_NAME = 3605004,};
enum MACRO_IOCTL_VOLUME {IOCTL_VOLUME_BASE = 86,IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS = 5636096,IOCTL_VOLUME_IS_CLUSTERED = 5636144,};
enum MACRO_IPADDRESSLEN {IPADDRESSLEN = 15,};
enum MACRO_ISFBVIEWMODE {ISFBVIEWMODE_SMALLICONS = 0x1,ISFBVIEWMODE_LARGEICONS = 0x2,ISFBVIEWMODE_LOGOS = 0x3,};
enum MACRO_JPEG_PROCESS {JPEG_PROCESS_BASELINE = 0,};
enum MACRO_KERB_SETPASS {KERB_SETPASS_USE_LOGONID = 1,KERB_SETPASS_USE_CREDHANDLE = 2,KERB_DECRYPT_FLAG_DEFAULT_KEY = 1,KERB_REFRESH_SCCRED_RELEASE = 0,KERB_REFRESH_SCCRED_GETTGT = 1,KERB_REQUEST_ADD_CREDENTIAL = 1,KERB_REQUEST_REPLACE_CREDENTIAL = 2,KERB_REQUEST_REMOVE_CREDENTIAL = 4,};
enum MACRO_KERNEL_STACK {KERNEL_STACK_INPAGE_ERROR = 0x77,};
enum MACRO_KSDATAFORMAT {KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION = 0,KSDATAFORMAT_TEMPORAL_COMPRESSION = 1,KSDATAFORMAT_BIT_ATTRIBUTES = 1,KSDATAFORMAT_ATTRIBUTES = 2,};
enum MACRO_LB_ADDSTRING {LB_ADDSTRING = 0x180,LB_INSERTSTRING = 0x181,LB_DELETESTRING = 0x182,LB_SELITEMRANGEEX = 0x183,LB_RESETCONTENT = 0x184,LB_SETSEL = 0x185,LB_SETCURSEL = 0x186,LB_GETSEL = 0x187,LB_GETCURSEL = 0x188,LB_GETTEXT = 0x189,LB_GETTEXTLEN = 0x18A,LB_GETCOUNT = 0x18B,LB_SELECTSTRING = 0x18C,LB_DIR = 0x18D,LB_GETTOPINDEX = 0x18E,LB_FINDSTRING = 0x18F,LB_GETSELCOUNT = 0x190,LB_GETSELITEMS = 0x191,LB_SETTABSTOPS = 0x192,LB_GETHORIZONTALEXTENT = 0x193,LB_SETHORIZONTALEXTENT = 0x194,LB_SETCOLUMNWIDTH = 0x195,LB_ADDFILE = 0x196,LB_SETTOPINDEX = 0x197,LB_GETITEMRECT = 0x198,LB_GETITEMDATA = 0x199,LB_SETITEMDATA = 0x19A,LB_SELITEMRANGE = 0x19B,LB_SETANCHORINDEX = 0x19C,LB_GETANCHORINDEX = 0x19D,LB_SETCARETINDEX = 0x19E,LB_GETCARETINDEX = 0x19F,LB_SETITEMHEIGHT = 0x1A0,LB_GETITEMHEIGHT = 0x1A1,LB_FINDSTRINGEXACT = 0x1A2,LB_SETLOCALE = 0x1A5,LB_GETLOCALE = 0x1A6,LB_SETCOUNT = 0x1A7,LB_INITSTORAGE = 0x1A8,LB_ITEMFROMPOINT = 0x1A9,LB_GETLISTBOXINFO = 0x1B2,LB_MSGMAX = 0x1B3,};
enum MACRO_LM20_PATHLEN {LM20_PATHLEN = 256,};
enum MACRO_LM20_STXTLEN {LM20_STXTLEN = 63,};
enum MACRO_LSA_FTRECORD {LSA_FTRECORD_DISABLED_REASONS = 0xFFFF,LSA_TLN_DISABLED_NEW = 0x1,LSA_TLN_DISABLED_ADMIN = 0x2,LSA_TLN_DISABLED_CONFLICT = 0x4,LSA_SID_DISABLED_ADMIN = 0x1,LSA_SID_DISABLED_CONFLICT = 0x2,LSA_NB_DISABLED_ADMIN = 0x4,LSA_NB_DISABLED_CONFLICT = 0x8,};
enum MACRO_LVM_GETITEMA {LVM_GETITEMA = 4101,LVM_GETITEMW = 4171,LVM_GETITEM = 4101,LVM_SETITEMA = 4102,LVM_SETITEMW = 4172,LVM_SETITEM = 4102,LVM_INSERTITEMA = 4103,LVM_INSERTITEMW = 4173,LVM_INSERTITEM = 4103,LVM_DELETEITEM = 4104,LVM_DELETEALLITEMS = 4105,LVM_GETCALLBACKMASK = 4106,LVM_SETCALLBACKMASK = 4107,};
enum MACRO_LmCharSetISO {LmCharSetISO_8859_1 = 1,LmCharSetISO_8859_2 = 2,LmCharSetISO_8859_3 = 3,LmCharSetISO_8859_4 = 4,LmCharSetISO_8859_5 = 5,LmCharSetISO_8859_6 = 6,LmCharSetISO_8859_7 = 7,LmCharSetISO_8859_8 = 8,LmCharSetISO_8859_9 = 9,};
enum MACRO_MAXCOMMENTSZ {MAXCOMMENTSZ = 256,};
enum MACRO_MAXIMUM_ATTR {MAXIMUM_ATTR_STRING_LENGTH = 32,MAXIMUM_SMARTCARD_READERS = 10,};
enum MACRO_MAXIMUM_WAIT {MAXIMUM_WAIT_OBJECTS_EXCEEDED = 0xC,};
enum MACRO_MAXPROPPAGES {MAXPROPPAGES = 100,};
enum MACRO_MAX_HOSTNAME {MAX_HOSTNAME_LEN = 128,MAX_DOMAIN_NAME_LEN = 128,MAX_SCOPE_ID_LEN = 256,};
enum MACRO_MAX_MONITORS {MAX_MONITORS = 4,};
enum MACRO_MAX_PORTNAME {MAX_PORTNAME_LEN = 64,MAX_NETWORKNAME_LEN = 49,MAX_SNMP_COMMUNITY_STR_LEN = 33,MAX_QUEUENAME_LEN = 33,MAX_IPADDR_STR_LEN = 16,MAX_ADDRESS_STR_LEN = 13,MAX_DEVICEDESCRIPTION_STR_LEN = 257,};
enum MACRO_MAX_PROTOCOL {MAX_PROTOCOL_CHAIN = 7,};
enum MACRO_MAX_SHUTDOWN {MAX_SHUTDOWN_TIMEOUT = 315360000,};
enum MACRO_MCM_SETTODAY {MCM_SETTODAY = 4108,MCM_GETTODAY = 4109,MCM_HITTEST = 4110,};
enum MACRO_MEMORY_IMAGE {MEMORY_IMAGE_CORRUPT = 0xA2,};
enum MACRO_MIM_MOREDATA {MIM_MOREDATA = 972,};
enum MACRO_MISSING_EXIT {MISSING_EXIT_POINT_CREATED = 0xC00037E2,MISSING_EXIT_POINT_NOT_CREATED = 0xC00037E3,MISSING_VOLUME_CREATED = 0xC00037E4,MISSING_VOLUME_NOT_CREATED = 0xC00037E5,};
enum MACRO_MIXERCONTROL {MIXERCONTROL_CONTROLF_UNIFORM = 0x1,MIXERCONTROL_CONTROLF_MULTIPLE = 0x2,MIXERCONTROL_CONTROLF_DISABLED = 0x80000000,MIXERCONTROL_CT_CLASS_MASK = 0xF0000000,MIXERCONTROL_CT_CLASS_CUSTOM = 0x0,MIXERCONTROL_CT_CLASS_METER = 0x10000000,MIXERCONTROL_CT_CLASS_SWITCH = 0x20000000,MIXERCONTROL_CT_CLASS_NUMBER = 0x30000000,MIXERCONTROL_CT_CLASS_SLIDER = 0x40000000,MIXERCONTROL_CT_CLASS_FADER = 0x50000000,MIXERCONTROL_CT_CLASS_TIME = 0x60000000,MIXERCONTROL_CT_CLASS_LIST = 0x70000000,MIXERCONTROL_CT_SUBCLASS_MASK = 0xF000000,MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0x0,MIXERCONTROL_CT_SC_SWITCH_BUTTON = 0x1000000,MIXERCONTROL_CT_SC_METER_POLLED = 0x0,MIXERCONTROL_CT_SC_TIME_MICROSECS = 0x0,MIXERCONTROL_CT_SC_TIME_MILLISECS = 0x1000000,MIXERCONTROL_CT_SC_LIST_SINGLE = 0x0,MIXERCONTROL_CT_SC_LIST_MULTIPLE = 0x1000000,MIXERCONTROL_CT_UNITS_MASK = 0xFF0000,MIXERCONTROL_CT_UNITS_CUSTOM = 0x0,MIXERCONTROL_CT_UNITS_BOOLEAN = 0x10000,MIXERCONTROL_CT_UNITS_SIGNED = 0x20000,MIXERCONTROL_CT_UNITS_UNSIGNED = 0x30000,MIXERCONTROL_CT_UNITS_DECIBELS = 0x40000,MIXERCONTROL_CT_UNITS_PERCENT = 0x50000,MIXERCONTROL_CONTROLTYPE_CUSTOM = 0x0,MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 0x10010000,MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 0x10020000,MIXERCONTROL_CONTROLTYPE_PEAKMETER = 0x10020001,MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 0x10030000,MIXERCONTROL_CONTROLTYPE_BOOLEAN = 0x20010000,MIXERCONTROL_CONTROLTYPE_ONOFF = 0x20010001,MIXERCONTROL_CONTROLTYPE_MUTE = 0x20010002,MIXERCONTROL_CONTROLTYPE_MONO = 0x20010003,MIXERCONTROL_CONTROLTYPE_LOUDNESS = 0x20010004,MIXERCONTROL_CONTROLTYPE_STEREOENH = 0x20010005,MIXERCONTROL_CONTROLTYPE_BASS_BOOST = 0x20012277,MIXERCONTROL_CONTROLTYPE_BUTTON = 0x21010000,MIXERCONTROL_CONTROLTYPE_DECIBELS = 0x30040000,MIXERCONTROL_CONTROLTYPE_SIGNED = 0x30020000,MIXERCONTROL_CONTROLTYPE_UNSIGNED = 0x30030000,MIXERCONTROL_CONTROLTYPE_PERCENT = 0x30050000,MIXERCONTROL_CONTROLTYPE_SLIDER = 0x40020000,MIXERCONTROL_CONTROLTYPE_PAN = 0x40020001,MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 0x40020002,MIXERCONTROL_CONTROLTYPE_FADER = 0x50030000,MIXERCONTROL_CONTROLTYPE_VOLUME = 0x50030001,MIXERCONTROL_CONTROLTYPE_BASS = 0x50030002,MIXERCONTROL_CONTROLTYPE_TREBLE = 0x50030003,MIXERCONTROL_CONTROLTYPE_EQUALIZER = 0x50030004,MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 0x70010000,MIXERCONTROL_CONTROLTYPE_MUX = 0x70010001,MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 0x71010000,MIXERCONTROL_CONTROLTYPE_MIXER = 0x71010001,MIXERCONTROL_CONTROLTYPE_MICROTIME = 0x60030000,MIXERCONTROL_CONTROLTYPE_MILLITIME = 0x61030000,};
enum MACRO_MM_CHROMATIC {MM_CHROMATIC_M1 = 0x1,MM_CHROMATIC_M1_WAVEIN = 0x2,MM_CHROMATIC_M1_WAVEOUT = 0x3,MM_CHROMATIC_M1_FMSYNTH = 0x4,MM_CHROMATIC_M1_MIXER = 0x5,MM_CHROMATIC_M1_AUX = 0x6,MM_CHROMATIC_M1_AUX_CD = 0x7,MM_CHROMATIC_M1_MIDIIN = 0x8,MM_CHROMATIC_M1_MIDIOUT = 0x9,MM_CHROMATIC_M1_WTSYNTH = 0x10,MM_CHROMATIC_M1_MPEGWAVEIN = 0x11,MM_CHROMATIC_M1_MPEGWAVEOUT = 0x12,MM_CHROMATIC_M2 = 0x13,MM_CHROMATIC_M2_WAVEIN = 0x14,MM_CHROMATIC_M2_WAVEOUT = 0x15,MM_CHROMATIC_M2_FMSYNTH = 0x16,MM_CHROMATIC_M2_MIXER = 0x17,MM_CHROMATIC_M2_AUX = 0x18,MM_CHROMATIC_M2_AUX_CD = 0x19,MM_CHROMATIC_M2_MIDIIN = 0x20,MM_CHROMATIC_M2_MIDIOUT = 0x21,MM_CHROMATIC_M2_WTSYNTH = 0x22,MM_CHROMATIC_M2_MPEGWAVEIN = 0x23,MM_CHROMATIC_M2_MPEGWAVEOUT = 0x24,MM_VIENNASYS_TSP_WAVE_DRIVER = 0x1,MM_CONNECTIX_VIDEC_CODEC = 0x1,MM_GADGETLABS_WAVE44_WAVEIN = 0x1,MM_GADGETLABS_WAVE44_WAVEOUT = 0x2,MM_GADGETLABS_WAVE42_WAVEIN = 0x3,MM_GADGETLABS_WAVE42_WAVEOUT = 0x4,MM_GADGETLABS_WAVE4_MIDIIN = 0x5,MM_GADGETLABS_WAVE4_MIDIOUT = 0x6,MM_FRONTIER_WAVECENTER_MIDIIN = 0x1,MM_FRONTIER_WAVECENTER_MIDIOUT = 0x2,MM_FRONTIER_WAVECENTER_WAVEIN = 0x3,MM_FRONTIER_WAVECENTER_WAVEOUT = 0x4,MM_VIONA_QVINPCI_MIXER = 0x1,MM_VIONA_QVINPCI_WAVEIN = 0x2,MM_VIONAQVINPCI_WAVEOUT = 0x3,MM_VIONA_BUSTER_MIXER = 0x4,MM_VIONA_CINEMASTER_MIXER = 0x5,MM_VIONA_CONCERTO_MIXER = 0x6,MM_CASIO_WP150_MIDIOUT = 0x1,MM_CASIO_WP150_MIDIIN = 0x2,MM_CASIO_LSG_MIDIOUT = 0x3,MM_DIMD_PLATFORM = 0x0,MM_DIMD_DIRSOUND = 0x1,MM_DIMD_VIRTMPU = 0x2,MM_DIMD_VIRTSB = 0x3,MM_DIMD_VIRTJOY = 0x4,MM_DIMD_WAVEIN = 0x5,MM_DIMD_WAVEOUT = 0x6,MM_DIMD_MIDIIN = 0x7,MM_DIMD_MIDIOUT = 0x8,MM_DIMD_AUX_LINE = 0x9,MM_DIMD_MIXER = 0xA,MM_DIMD_WSS_WAVEIN = 0xE,MM_DIMD_WSS_WAVEOUT = 0xF,MM_DIMD_WSS_MIXER = 0x11,MM_DIMD_WSS_AUX = 0x15,MM_DIMD_WSS_SYNTH = 0x4C,MM_S3_WAVEOUT = 0x1,MM_S3_WAVEIN = 0x2,MM_S3_MIDIOUT = 0x3,MM_S3_MIDIIN = 0x4,MM_S3_FMSYNTH = 0x5,MM_S3_MIXER = 0x6,MM_S3_AUX = 0x7,MM_VKC_MPU401_MIDIIN = 0x100,MM_VKC_SERIAL_MIDIIN = 0x101,MM_VKC_MPU401_MIDIOUT = 0x200,MM_VKC_SERIAL_MIDIOUT = 0x201,MM_ZEFIRO_ZA2 = 0x2,MM_FHGIIS_MPEGLAYER3 = 0xA,MM_QUICKNET_PJWAVEIN = 0x1,MM_QUICKNET_PJWAVEOUT = 0x2,MM_SICRESOURCE_SSO3D = 0x2,MM_SICRESOURCE_SSOW3DI = 0x3,MM_NEOMAGIC_SYNTH = 0x1,MM_NEOMAGIC_WAVEOUT = 0x2,MM_NEOMAGIC_WAVEIN = 0x3,MM_NEOMAGIC_MIDIOUT = 0x4,MM_NEOMAGIC_MIDIIN = 0x5,MM_NEOMAGIC_AUX = 0x6,MM_NEOMAGIC_MW3DX_WAVEOUT = 0xA,MM_NEOMAGIC_MW3DX_WAVEIN = 0xB,MM_NEOMAGIC_MW3DX_MIDIOUT = 0xC,MM_NEOMAGIC_MW3DX_MIDIIN = 0xD,MM_NEOMAGIC_MW3DX_FMSYNTH = 0xE,MM_NEOMAGIC_MW3DX_GMSYNTH = 0xF,MM_NEOMAGIC_MW3DX_MIXER = 0x10,MM_NEOMAGIC_MW3DX_AUX = 0x11,MM_NEOMAGIC_MWAVE_WAVEOUT = 0x14,MM_NEOMAGIC_MWAVE_WAVEIN = 0x15,MM_NEOMAGIC_MWAVE_MIDIOUT = 0x16,MM_NEOMAGIC_MWAVE_MIDIIN = 0x17,MM_NEOMAGIC_MWAVE_MIXER = 0x18,MM_NEOMAGIC_MWAVE_AUX = 0x19,MM_MERGING_MPEGL3 = 0x1,MM_XIRLINK_VISIONLINK = 0x1,MM_OTI_611WAVEIN = 0x5,MM_OTI_611WAVEOUT = 0x6,MM_OTI_611MIXER = 0x7,MM_OTI_611MIDIN = 0x12,MM_OTI_611MIDIOUT = 0x13,MM_AUREAL_AU8820 = 0x10,MM_AU8820_SYNTH = 0x11,MM_AU8820_WAVEOUT = 0x12,MM_AU8820_WAVEIN = 0x13,MM_AU8820_MIXER = 0x14,MM_AU8820_AUX = 0x15,MM_AU8820_MIDIOUT = 0x16,MM_AU8820_MIDIIN = 0x17,MM_AUREAL_AU8830 = 0x20,MM_AU8830_SYNTH = 0x21,MM_AU8830_WAVEOUT = 0x22,MM_AU8830_WAVEIN = 0x23,MM_AU8830_MIXER = 0x24,MM_AU8830_AUX = 0x25,MM_AU8830_MIDIOUT = 0x26,MM_AU8830_MIDIIN = 0x27,MM_VIVO_AUDIO_CODEC = 0x1,MM_SHARP_MDC_MIDI_SYNTH = 0x1,MM_SHARP_MDC_MIDI_IN = 0x2,MM_SHARP_MDC_MIDI_OUT = 0x3,MM_SHARP_MDC_WAVE_IN = 0x4,MM_SHARP_MDC_WAVE_OUT = 0x5,MM_SHARP_MDC_AUX = 0x6,MM_SHARP_MDC_MIXER = 0xA,MM_SHARP_MDC_AUX_MASTER = 0x64,MM_SHARP_MDC_AUX_BASS = 0x65,MM_SHARP_MDC_AUX_TREBLE = 0x66,MM_SHARP_MDC_AUX_MIDI_VOL = 0x67,MM_SHARP_MDC_AUX_WAVE_VOL = 0x68,MM_SHARP_MDC_AUX_WAVE_RVB = 0x69,MM_SHARP_MDC_AUX_WAVE_CHR = 0x6A,MM_SHARP_MDC_AUX_VOL = 0x6B,MM_SHARP_MDC_AUX_RVB = 0x6C,MM_SHARP_MDC_AUX_CHR = 0x6D,MM_LUCENT_ACM_G723 = 0x0,MM_ATT_G729A = 0x1,MM_MARIAN_ARC44WAVEIN = 0x1,MM_MARIAN_ARC44WAVEOUT = 0x2,MM_MARIAN_PRODIF24WAVEIN = 0x3,MM_MARIAN_PRODIF24WAVEOUT = 0x4,MM_MARIAN_ARC88WAVEIN = 0x5,MM_MARIAN_ARC88WAVEOUT = 0x6,MM_BCB_NETBOARD_10 = 0x1,MM_BCB_TT75_10 = 0x2,MM_MOTIONPIXELS_MVI2 = 0x1,MM_QDESIGN_ACM_MPEG = 0x1,MM_QDESIGN_ACM_QDESIGN_MUSIC = 0x2,MM_NMP_CCP_WAVEIN = 0x1,MM_NMP_CCP_WAVEOUT = 0x2,MM_NMP_ACM_AMR = 0xA,MM_DF_ACM_G726 = 0x1,MM_DF_ACM_GSM610 = 0x2,MM_BERCOS_WAVEIN = 0x1,MM_BERCOS_MIXER = 0x2,MM_BERCOS_WAVEOUT = 0x3,MM_ONLIVE_MPCODEC = 0x1,MM_PHONET_PP_WAVEOUT = 0x1,MM_PHONET_PP_WAVEIN = 0x2,MM_PHONET_PP_MIXER = 0x3,MM_FTR_ENCODER_WAVEIN = 0x1,MM_FTR_ACM = 0x2,MM_ENET_T2000_LINEIN = 0x1,MM_ENET_T2000_LINEOUT = 0x2,MM_ENET_T2000_HANDSETIN = 0x3,MM_ENET_T2000_HANDSETOUT = 0x4,MM_EMAGIC_UNITOR8 = 0x1,MM_SIPROLAB_ACELPNET = 0x1,MM_DICTAPHONE_G726 = 0x1,MM_RZS_ACM_TUBGSM = 0x1,MM_EES_PCMIDI14 = 0x1,MM_EES_PCMIDI14_IN = 0x2,MM_EES_PCMIDI14_OUT1 = 0x3,MM_EES_PCMIDI14_OUT2 = 0x4,MM_EES_PCMIDI14_OUT3 = 0x5,MM_EES_PCMIDI14_OUT4 = 0x6,MM_HAFTMANN_LPTDAC2 = 0x1,MM_LUCID_PCI24WAVEIN = 0x1,MM_LUCID_PCI24WAVEOUT = 0x2,MM_HEADSPACE_HAESYNTH = 0x1,MM_HEADSPACE_HAEWAVEOUT = 0x2,MM_HEADSPACE_HAEWAVEIN = 0x3,MM_HEADSPACE_HAEMIXER = 0x4,MM_UNISYS_ACM_NAP = 0x1,MM_LUMINOSITI_SCWAVEIN = 0x1,MM_LUMINOSITI_SCWAVEOUT = 0x2,MM_LUMINOSITI_SCWAVEMIX = 0x3,MM_ACTIVEVOICE_ACM_VOXADPCM = 0x1,MM_DTS_DS = 0x1,MM_SOFTLAB_NSK_FRW_WAVEIN = 0x1,MM_SOFTLAB_NSK_FRW_WAVEOUT = 0x2,MM_SOFTLAB_NSK_FRW_MIXER = 0x3,MM_SOFTLAB_NSK_FRW_AUX = 0x4,MM_FORTEMEDIA_WAVEIN = 0x1,MM_FORTEMEDIA_WAVEOUT = 0x2,MM_FORTEMEDIA_FMSYNC = 0x3,MM_FORTEMEDIA_MIXER = 0x4,MM_FORTEMEDIA_AUX = 0x5,MM_SONORUS_STUDIO = 0x1,MM_I_LINK_VOICE_CODER = 0x1,MM_SELSIUS_SYSTEMS_RTPWAVEOUT = 0x1,MM_SELSIUS_SYSTEMS_RTPWAVEIN = 0x2,MM_ADMOS_FM_SYNTH = 0x1,MM_ADMOS_QS3AMIDIOUT = 0x2,MM_ADMOS_QS3AMIDIIN = 0x3,MM_ADMOS_QS3AWAVEOUT = 0x4,MM_ADMOS_QS3AWAVEIN = 0x5,MM_LEXICON_STUDIO_WAVE_OUT = 0x1,MM_LEXICON_STUDIO_WAVE_IN = 0x2,MM_SGI_320_WAVEIN = 0x1,MM_SGI_320_WAVEOUT = 0x2,MM_SGI_320_MIXER = 0x3,MM_SGI_540_WAVEIN = 0x4,MM_SGI_540_WAVEOUT = 0x5,MM_SGI_540_MIXER = 0x6,MM_SGI_RAD_ADATMONO1_WAVEIN = 0x7,MM_SGI_RAD_ADATMONO2_WAVEIN = 0x8,MM_SGI_RAD_ADATMONO3_WAVEIN = 0x9,MM_SGI_RAD_ADATMONO4_WAVEIN = 0xA,MM_SGI_RAD_ADATMONO5_WAVEIN = 0xB,MM_SGI_RAD_ADATMONO6_WAVEIN = 0xC,MM_SGI_RAD_ADATMONO7_WAVEIN = 0xD,MM_SGI_RAD_ADATMONO8_WAVEIN = 0xE,MM_SGI_RAD_ADATSTEREO12_WAVEIN = 0xF,MM_SGI_RAD_ADATSTEREO34_WAVEIN = 0x10,MM_SGI_RAD_ADATSTEREO56_WAVEIN = 0x11,MM_SGI_RAD_ADATSTEREO78_WAVEIN = 0x12,MM_SGI_RAD_ADAT8CHAN_WAVEIN = 0x13,MM_SGI_RAD_ADATMONO1_WAVEOUT = 0x14,MM_SGI_RAD_ADATMONO2_WAVEOUT = 0x15,MM_SGI_RAD_ADATMONO3_WAVEOUT = 0x16,MM_SGI_RAD_ADATMONO4_WAVEOUT = 0x17,MM_SGI_RAD_ADATMONO5_WAVEOUT = 0x18,MM_SGI_RAD_ADATMONO6_WAVEOUT = 0x19,MM_SGI_RAD_ADATMONO7_WAVEOUT = 0x1A,MM_SGI_RAD_ADATMONO8_WAVEOUT = 0x1B,MM_SGI_RAD_ADATSTEREO12_WAVEOUT = 0x1C,MM_SGI_RAD_ADATSTEREO32_WAVEOUT = 0x1D,MM_SGI_RAD_ADATSTEREO56_WAVEOUT = 0x1E,MM_SGI_RAD_ADATSTEREO78_WAVEOUT = 0x1F,MM_SGI_RAD_ADAT8CHAN_WAVEOUT = 0x20,MM_SGI_RAD_AESMONO1_WAVEIN = 0x21,MM_SGI_RAD_AESMONO2_WAVEIN = 0x22,MM_SGI_RAD_AESSTEREO_WAVEIN = 0x23,MM_SGI_RAD_AESMONO1_WAVEOUT = 0x24,MM_SGI_RAD_AESMONO2_WAVEOUT = 0x25,MM_SGI_RAD_AESSTEREO_WAVEOUT = 0x26,MM_IPI_ACM_HSX = 0x1,MM_IPI_ACM_RPELP = 0x2,MM_IPI_WF_ASSS = 0x3,MM_IPI_AT_WAVEOUT = 0x4,MM_IPI_AT_WAVEIN = 0x5,MM_IPI_AT_MIXER = 0x6,MM_ICE_WAVEOUT = 0x1,MM_ICE_WAVEIN = 0x2,MM_ICE_MTWAVEOUT = 0x3,MM_ICE_MTWAVEIN = 0x4,MM_ICE_MIDIOUT1 = 0x5,MM_ICE_MIDIIN1 = 0x6,MM_ICE_MIDIOUT2 = 0x7,MM_ICE_MIDIIN2 = 0x8,MM_ICE_SYNTH = 0x9,MM_ICE_MIXER = 0xA,MM_ICE_AUX = 0xB,MM_VQST_VQC1 = 0x1,MM_VQST_VQC2 = 0x2,MM_ETEK_KWIKMIDI_MIDIIN = 0x1,MM_ETEK_KWIKMIDI_MIDIOUT = 0x2,MM_INTERNET_SSW_MIDIOUT = 0xA,MM_INTERNET_SSW_MIDIIN = 0xB,MM_INTERNET_SSW_WAVEOUT = 0xC,MM_INTERNET_SSW_WAVEIN = 0xD,MM_SONY_ACM_SCX = 0x1,MM_UH_ACM_ADPCM = 0x1,MM_SYDEC_NV_WAVEIN = 0x1,MM_SYDEC_NV_WAVEOUT = 0x2,MM_FLEXION_X300_WAVEIN = 0x1,MM_FLEXION_X300_WAVEOUT = 0x2,MM_VIA_WAVEOUT = 0x1,MM_VIA_WAVEIN = 0x2,MM_VIA_MIXER = 0x3,MM_VIA_AUX = 0x4,MM_VIA_MPU401_MIDIOUT = 0x5,MM_VIA_MPU401_MIDIIN = 0x6,MM_VIA_SWFM_SYNTH = 0x7,MM_VIA_WDM_WAVEOUT = 0x8,MM_VIA_WDM_WAVEIN = 0x9,MM_VIA_WDM_MIXER = 0xA,MM_VIA_WDM_MPU401_MIDIOUT = 0xB,MM_VIA_WDM_MPU401_MIDIIN = 0xC,MM_MICRONAS_SC4 = 0x1,MM_MICRONAS_CLP833 = 0x2,MM_HP_WAVEOUT = 0x1,MM_HP_WAVEIN = 0x2,MM_QUICKAUDIO_MINIMIDI = 0x1,MM_QUICKAUDIO_MAXIMIDI = 0x2,MM_ICCC_UNA3_WAVEIN = 0x1,MM_ICCC_UNA3_WAVEOUT = 0x2,MM_ICCC_UNA3_AUX = 0x3,MM_ICCC_UNA3_MIXER = 0x4,MM_3COM_CB_MIXER = 0x1,MM_3COM_CB_WAVEIN = 0x2,MM_3COM_CB_WAVEOUT = 0x3,MM_MINDMAKER_GC_WAVEIN = 0x1,MM_MINDMAKER_GC_WAVEOUT = 0x2,MM_MINDMAKER_GC_MIXER = 0x3,MM_TELEKOL_WAVEOUT = 0x1,MM_TELEKOL_WAVEIN = 0x2,MM_ALGOVISION_VB80WAVEOUT = 0x1,MM_ALGOVISION_VB80WAVEIN = 0x2,MM_ALGOVISION_VB80MIXER = 0x3,MM_ALGOVISION_VB80AUX = 0x4,MM_ALGOVISION_VB80AUX2 = 0x5,};
enum MACRO_MM_MICROSOFT {MM_MICROSOFT = 1,MM_CREATIVE = 2,MM_MEDIAVISION = 3,MM_FUJITSU = 4,MM_PRAGMATRAX = 5,MM_CYRIX = 6,MM_PHILIPS_SPEECH_PROCESSING = 7,MM_NETXL = 8,MM_ZYXEL = 9,MM_BECUBED = 10,MM_AARDVARK = 11,MM_BINTEC = 12,MM_HEWLETT_PACKARD = 13,MM_ACULAB = 14,MM_FAITH = 15,MM_MITEL = 16,MM_QUANTUM3D = 17,MM_SNI = 18,MM_EMU = 19,MM_ARTISOFT = 20,MM_TURTLE_BEACH = 21,MM_IBM = 22,MM_VOCALTEC = 23,MM_ROLAND = 24,MM_DSP_SOLUTIONS = 25,MM_NEC = 26,MM_ATI = 27,MM_WANGLABS = 28,MM_TANDY = 29,MM_VOYETRA = 30,MM_ANTEX = 31,MM_ICL_PS = 32,MM_INTEL = 33,MM_GRAVIS = 34,MM_VAL = 35,MM_INTERACTIVE = 36,MM_YAMAHA = 37,MM_EVEREX = 38,MM_ECHO = 39,MM_SIERRA = 40,MM_CAT = 41,MM_APPS = 42,MM_DSP_GROUP = 43,MM_MELABS = 44,MM_COMPUTER_FRIENDS = 45,MM_ESS = 46,MM_AUDIOFILE = 47,MM_MOTOROLA = 48,MM_CANOPUS = 49,MM_EPSON = 50,MM_TRUEVISION = 51,MM_AZTECH = 52,MM_VIDEOLOGIC = 53,MM_SCALACS = 54,MM_KORG = 55,MM_APT = 56,MM_ICS = 57,MM_ITERATEDSYS = 58,MM_METHEUS = 59,MM_LOGITECH = 60,MM_WINNOV = 61,MM_NCR = 62,MM_EXAN = 63,MM_AST = 64,MM_WILLOWPOND = 65,MM_SONICFOUNDRY = 66,MM_VITEC = 67,MM_MOSCOM = 68,MM_SILICONSOFT = 69,MM_TERRATEC = 70,MM_MEDIASONIC = 71,MM_SANYO = 72,MM_SUPERMAC = 73,MM_AUDIOPT = 74,MM_NOGATECH = 75,MM_SPEECHCOMP = 76,MM_AHEAD = 77,MM_DOLBY = 78,MM_OKI = 79,MM_AURAVISION = 80,MM_OLIVETTI = 81,MM_IOMAGIC = 82,MM_MATSUSHITA = 83,MM_CONTROLRES = 84,MM_XEBEC = 85,MM_NEWMEDIA = 86,MM_NMS = 87,MM_LYRRUS = 88,MM_COMPUSIC = 89,MM_OPTI = 90,MM_ADLACC = 91,MM_COMPAQ = 92,MM_DIALOGIC = 93,MM_INSOFT = 94,MM_MPTUS = 95,MM_WEITEK = 96,MM_LERNOUT_AND_HAUSPIE = 97,MM_QCIAR = 98,MM_APPLE = 99,MM_DIGITAL = 100,MM_MOTU = 101,MM_WORKBIT = 102,MM_OSITECH = 103,MM_MIRO = 104,MM_CIRRUSLOGIC = 105,MM_ISOLUTION = 106,MM_HORIZONS = 107,MM_CONCEPTS = 108,MM_VTG = 109,MM_RADIUS = 110,MM_ROCKWELL = 111,MM_XYZ = 112,MM_OPCODE = 113,MM_VOXWARE = 114,MM_NORTHERN_TELECOM = 115,MM_APICOM = 116,MM_GRANDE = 117,MM_ADDX = 118,MM_WILDCAT = 119,MM_RHETOREX = 120,MM_BROOKTREE = 121,MM_ENSONIQ = 125,MM_FAST = 126,MM_NVIDIA = 127,MM_OKSORI = 128,MM_DIACOUSTICS = 129,MM_GULBRANSEN = 130,MM_KAY_ELEMETRICS = 131,MM_CRYSTAL = 132,MM_SPLASH_STUDIOS = 133,MM_QUARTERDECK = 134,MM_TDK = 135,MM_DIGITAL_AUDIO_LABS = 136,MM_SEERSYS = 137,MM_PICTURETEL = 138,MM_ATT_MICROELECTRONICS = 139,MM_OSPREY = 140,MM_MEDIATRIX = 141,MM_SOUNDESIGNS = 142,MM_ALDIGITAL = 143,MM_SPECTRUM_SIGNAL_PROCESSING = 144,MM_ECS = 145,MM_AMD = 146,MM_COREDYNAMICS = 147,MM_CANAM = 148,MM_SOFTSOUND = 149,MM_NORRIS = 150,MM_DDD = 151,MM_EUPHONICS = 152,MM_PRECEPT = 153,MM_CRYSTAL_NET = 154,MM_CHROMATIC = 155,MM_VOICEINFO = 156,MM_VIENNASYS = 157,MM_CONNECTIX = 158,MM_GADGETLABS = 159,MM_FRONTIER = 160,MM_VIONA = 161,MM_CASIO = 162,MM_DIAMONDMM = 163,MM_S3 = 164,MM_DVISION = 165,MM_NETSCAPE = 166,MM_SOUNDSPACE = 167,MM_VANKOEVERING = 168,MM_QTEAM = 169,MM_ZEFIRO = 170,MM_STUDER = 171,MM_FRAUNHOFER_IIS = 172,MM_QUICKNET = 173,MM_ALARIS = 174,MM_SICRESOURCE = 175,MM_NEOMAGIC = 176,MM_MERGING_TECHNOLOGIES = 177,MM_XIRLINK = 178,MM_COLORGRAPH = 179,MM_OTI = 180,MM_AUREAL = 181,MM_VIVO = 182,MM_SHARP = 183,MM_LUCENT = 184,MM_ATT = 185,MM_SUNCOM = 186,MM_SORVIS = 187,MM_INVISION = 188,MM_BERKOM = 189,MM_MARIAN = 190,MM_DPSINC = 191,MM_BCB = 192,MM_MOTIONPIXELS = 193,MM_QDESIGN = 194,MM_NMP = 195,MM_DATAFUSION = 196,MM_DUCK = 197,MM_FTR = 198,MM_BERCOS = 199,MM_ONLIVE = 200,MM_SIEMENS_SBC = 201,MM_TERALOGIC = 202,MM_PHONET = 203,MM_WINBOND = 204,MM_VIRTUALMUSIC = 205,MM_ENET = 206,MM_GUILLEMOT = 207,MM_EMAGIC = 208,MM_MWM = 209,MM_PACIFICRESEARCH = 210,MM_SIPROLAB = 211,MM_LYNX = 212,MM_SPECTRUM_PRODUCTIONS = 213,MM_DICTAPHONE = 214,MM_QUALCOMM = 215,MM_RZS = 216,MM_AUDIOSCIENCE = 217,MM_PINNACLE = 218,MM_EES = 219,MM_HAFTMANN = 220,MM_LUCID = 221,MM_HEADSPACE = 222,MM_UNISYS = 223,MM_LUMINOSITI = 224,MM_ACTIVEVOICE = 225,MM_DTS = 226,MM_DIGIGRAM = 227,MM_SOFTLAB_NSK = 228,MM_FORTEMEDIA = 229,MM_SONORUS = 230,MM_ARRAY = 231,MM_DATARAN = 232,MM_I_LINK = 233,MM_SELSIUS_SYSTEMS = 234,MM_ADMOS = 235,MM_LEXICON = 236,MM_SGI = 237,MM_IPI = 238,MM_ICE = 239,MM_VQST = 240,MM_ETEK = 241,MM_CS = 242,MM_ALESIS = 243,MM_INTERNET = 244,MM_SONY = 245,MM_HYPERACTIVE = 246,MM_UHER_INFORMATIC = 247,MM_SYDEC_NV = 248,MM_FLEXION = 249,MM_VIA = 250,MM_MICRONAS = 251,MM_ANALOGDEVICES = 252,MM_HP = 253,MM_MATROX_DIV = 254,MM_QUICKAUDIO = 255,MM_YOUCOM = 256,MM_RICHMOND = 257,MM_IODD = 258,MM_ICCC = 259,MM_3COM = 260,MM_MALDEN = 261,MM_3DFX = 262,MM_MINDMAKER = 263,MM_TELEKOL = 264,MM_ST_MICROELECTRONICS = 265,MM_ALGOVISION = 266,MM_UNMAPPED = 65535,MM_PID_UNMAPPED = 65535,MM_MIDI_MAPPER = 1,MM_WAVE_MAPPER = 2,MM_SNDBLST_MIDIOUT = 3,MM_SNDBLST_MIDIIN = 4,MM_SNDBLST_SYNTH = 5,MM_SNDBLST_WAVEOUT = 6,MM_SNDBLST_WAVEIN = 7,MM_ADLIB = 9,MM_MPU401_MIDIOUT = 10,MM_MPU401_MIDIIN = 11,MM_PC_JOYSTICK = 12,MM_PCSPEAKER_WAVEOUT = 13,MM_MSFT_WSS_WAVEIN = 14,MM_MSFT_WSS_WAVEOUT = 15,MM_MSFT_WSS_FMSYNTH_STEREO = 16,MM_MSFT_WSS_MIXER = 17,MM_MSFT_WSS_OEM_WAVEIN = 18,MM_MSFT_WSS_OEM_WAVEOUT = 19,MM_MSFT_WSS_OEM_FMSYNTH_STEREO = 20,MM_MSFT_WSS_AUX = 21,MM_MSFT_WSS_OEM_AUX = 22,MM_MSFT_GENERIC_WAVEIN = 23,MM_MSFT_GENERIC_WAVEOUT = 24,MM_MSFT_GENERIC_MIDIIN = 25,MM_MSFT_GENERIC_MIDIOUT = 26,MM_MSFT_GENERIC_MIDISYNTH = 27,MM_MSFT_GENERIC_AUX_LINE = 28,MM_MSFT_GENERIC_AUX_MIC = 29,MM_MSFT_GENERIC_AUX_CD = 30,MM_MSFT_WSS_OEM_MIXER = 31,MM_MSFT_MSACM = 32,MM_MSFT_ACM_MSADPCM = 33,MM_MSFT_ACM_IMAADPCM = 34,MM_MSFT_ACM_MSFILTER = 35,MM_MSFT_ACM_GSM610 = 36,MM_MSFT_ACM_G711 = 37,MM_MSFT_ACM_PCM = 38,MM_WSS_SB16_WAVEIN = 39,MM_WSS_SB16_WAVEOUT = 40,MM_WSS_SB16_MIDIIN = 41,MM_WSS_SB16_MIDIOUT = 42,MM_WSS_SB16_SYNTH = 43,MM_WSS_SB16_AUX_LINE = 44,MM_WSS_SB16_AUX_CD = 45,MM_WSS_SB16_MIXER = 46,MM_WSS_SBPRO_WAVEIN = 47,MM_WSS_SBPRO_WAVEOUT = 48,MM_WSS_SBPRO_MIDIIN = 49,MM_WSS_SBPRO_MIDIOUT = 50,MM_WSS_SBPRO_SYNTH = 51,MM_WSS_SBPRO_AUX_LINE = 52,MM_WSS_SBPRO_AUX_CD = 53,MM_WSS_SBPRO_MIXER = 54,MM_MSFT_WSS_NT_WAVEIN = 55,MM_MSFT_WSS_NT_WAVEOUT = 56,MM_MSFT_WSS_NT_FMSYNTH_STEREO = 57,MM_MSFT_WSS_NT_MIXER = 58,MM_MSFT_WSS_NT_AUX = 59,MM_MSFT_SB16_WAVEIN = 60,MM_MSFT_SB16_WAVEOUT = 61,MM_MSFT_SB16_MIDIIN = 62,MM_MSFT_SB16_MIDIOUT = 63,MM_MSFT_SB16_SYNTH = 64,MM_MSFT_SB16_AUX_LINE = 65,MM_MSFT_SB16_AUX_CD = 66,MM_MSFT_SB16_MIXER = 67,MM_MSFT_SBPRO_WAVEIN = 68,MM_MSFT_SBPRO_WAVEOUT = 69,MM_MSFT_SBPRO_MIDIIN = 70,MM_MSFT_SBPRO_MIDIOUT = 71,MM_MSFT_SBPRO_SYNTH = 72,MM_MSFT_SBPRO_AUX_LINE = 73,MM_MSFT_SBPRO_AUX_CD = 74,MM_MSFT_SBPRO_MIXER = 75,MM_MSFT_MSOPL_SYNTH = 76,MM_MSFT_VMDMS_LINE_WAVEIN = 80,MM_MSFT_VMDMS_LINE_WAVEOUT = 81,MM_MSFT_VMDMS_HANDSET_WAVEIN = 82,MM_MSFT_VMDMS_HANDSET_WAVEOUT = 83,MM_MSFT_VMDMW_LINE_WAVEIN = 84,MM_MSFT_VMDMW_LINE_WAVEOUT = 85,MM_MSFT_VMDMW_HANDSET_WAVEIN = 86,MM_MSFT_VMDMW_HANDSET_WAVEOUT = 87,MM_MSFT_VMDMW_MIXER = 88,MM_MSFT_VMDM_GAME_WAVEOUT = 89,MM_MSFT_VMDM_GAME_WAVEIN = 90,MM_MSFT_ACM_MSNAUDIO = 91,MM_MSFT_ACM_MSG723 = 92,MM_MSFT_ACM_MSRT24 = 93,MM_MSFT_WDMAUDIO_WAVEOUT = 100,MM_MSFT_WDMAUDIO_WAVEIN = 101,MM_MSFT_WDMAUDIO_MIDIOUT = 102,MM_MSFT_WDMAUDIO_MIDIIN = 103,MM_MSFT_WDMAUDIO_MIXER = 104,MM_MSFT_WDMAUDIO_AUX = 105,MM_CREATIVE_SB15_WAVEIN = 1,MM_CREATIVE_SB20_WAVEIN = 2,MM_CREATIVE_SBPRO_WAVEIN = 3,MM_CREATIVE_SBP16_WAVEIN = 4,MM_CREATIVE_PHNBLST_WAVEIN = 5,MM_CREATIVE_SB15_WAVEOUT = 101,MM_CREATIVE_SB20_WAVEOUT = 102,MM_CREATIVE_SBPRO_WAVEOUT = 103,MM_CREATIVE_SBP16_WAVEOUT = 104,MM_CREATIVE_PHNBLST_WAVEOUT = 105,MM_CREATIVE_MIDIOUT = 201,MM_CREATIVE_MIDIIN = 202,MM_CREATIVE_FMSYNTH_MONO = 301,MM_CREATIVE_FMSYNTH_STEREO = 302,MM_CREATIVE_MIDI_AWE32 = 303,MM_CREATIVE_AUX_CD = 401,MM_CREATIVE_AUX_LINE = 402,MM_CREATIVE_AUX_MIC = 403,MM_CREATIVE_AUX_MASTER = 404,MM_CREATIVE_AUX_PCSPK = 405,MM_CREATIVE_AUX_WAVE = 406,MM_CREATIVE_AUX_MIDI = 407,MM_CREATIVE_SBPRO_MIXER = 408,MM_CREATIVE_SB16_MIXER = 409,MM_MEDIAVISION_PROAUDIO = 16,MM_PROAUD_MIDIOUT = 17,MM_PROAUD_MIDIIN = 18,MM_PROAUD_SYNTH = 19,MM_PROAUD_WAVEOUT = 20,MM_PROAUD_WAVEIN = 21,MM_PROAUD_MIXER = 22,MM_PROAUD_AUX = 23,MM_MEDIAVISION_THUNDER = 32,MM_THUNDER_SYNTH = 35,MM_THUNDER_WAVEOUT = 36,MM_THUNDER_WAVEIN = 37,MM_THUNDER_AUX = 39,MM_MEDIAVISION_TPORT = 64,MM_TPORT_WAVEOUT = 65,MM_TPORT_WAVEIN = 66,MM_TPORT_SYNTH = 67,MM_MEDIAVISION_PROAUDIO_PLUS = 80,MM_PROAUD_PLUS_MIDIOUT = 81,MM_PROAUD_PLUS_MIDIIN = 82,MM_PROAUD_PLUS_SYNTH = 83,MM_PROAUD_PLUS_WAVEOUT = 84,MM_PROAUD_PLUS_WAVEIN = 85,MM_PROAUD_PLUS_MIXER = 86,MM_PROAUD_PLUS_AUX = 87,MM_MEDIAVISION_PROAUDIO_16 = 96,MM_PROAUD_16_MIDIOUT = 97,MM_PROAUD_16_MIDIIN = 98,MM_PROAUD_16_SYNTH = 99,MM_PROAUD_16_WAVEOUT = 100,MM_PROAUD_16_WAVEIN = 101,MM_PROAUD_16_MIXER = 102,MM_PROAUD_16_AUX = 103,MM_MEDIAVISION_PROSTUDIO_16 = 96,MM_STUDIO_16_MIDIOUT = 97,MM_STUDIO_16_MIDIIN = 98,MM_STUDIO_16_SYNTH = 99,MM_STUDIO_16_WAVEOUT = 100,MM_STUDIO_16_WAVEIN = 101,MM_STUDIO_16_MIXER = 102,MM_STUDIO_16_AUX = 103,MM_MEDIAVISION_CDPC = 112,MM_CDPC_MIDIOUT = 113,MM_CDPC_MIDIIN = 114,MM_CDPC_SYNTH = 115,MM_CDPC_WAVEOUT = 116,MM_CDPC_WAVEIN = 117,MM_CDPC_MIXER = 118,MM_CDPC_AUX = 119,MM_MEDIAVISION_OPUS1208 = 128,MM_OPUS401_MIDIOUT = 129,MM_OPUS401_MIDIIN = 130,MM_OPUS1208_SYNTH = 131,MM_OPUS1208_WAVEOUT = 132,MM_OPUS1208_WAVEIN = 133,MM_OPUS1208_MIXER = 134,MM_OPUS1208_AUX = 135,MM_MEDIAVISION_OPUS1216 = 144,MM_OPUS1216_MIDIOUT = 145,MM_OPUS1216_MIDIIN = 146,MM_OPUS1216_SYNTH = 147,MM_OPUS1216_WAVEOUT = 148,MM_OPUS1216_WAVEIN = 149,MM_OPUS1216_MIXER = 150,MM_OPUS1216_AUX = 151,MM_CYRIX_XASYNTH = 1,MM_CYRIX_XAMIDIIN = 2,MM_CYRIX_XAMIDIOUT = 3,MM_CYRIX_XAWAVEIN = 4,MM_CYRIX_XAWAVEOUT = 5,MM_CYRIX_XAAUX = 6,MM_CYRIX_XAMIXER = 7,MM_PHILIPS_ACM_LPCBB = 1,MM_NETXL_XLVIDEO = 1,MM_ZYXEL_ACM_ADPCM = 1,MM_AARDVARK_STUDIO12_WAVEOUT = 1,MM_AARDVARK_STUDIO12_WAVEIN = 2,MM_AARDVARK_STUDIO88_WAVEOUT = 3,MM_AARDVARK_STUDIO88_WAVEIN = 4,MM_BINTEC_TAPI_WAVE = 1,MM_HEWLETT_PACKARD_CU_CODEC = 1,MM_MITEL_TALKTO_LINE_WAVEOUT = 100,MM_MITEL_TALKTO_LINE_WAVEIN = 101,MM_MITEL_TALKTO_HANDSET_WAVEOUT = 102,MM_MITEL_TALKTO_HANDSET_WAVEIN = 103,MM_MITEL_TALKTO_BRIDGED_WAVEOUT = 104,MM_MITEL_TALKTO_BRIDGED_WAVEIN = 105,MM_MITEL_MPA_HANDSET_WAVEOUT = 200,MM_MITEL_MPA_HANDSET_WAVEIN = 201,MM_MITEL_MPA_HANDSFREE_WAVEOUT = 202,MM_MITEL_MPA_HANDSFREE_WAVEIN = 203,MM_MITEL_MPA_LINE1_WAVEOUT = 204,MM_MITEL_MPA_LINE1_WAVEIN = 205,MM_MITEL_MPA_LINE2_WAVEOUT = 206,MM_MITEL_MPA_LINE2_WAVEIN = 207,MM_MITEL_MEDIAPATH_WAVEOUT = 300,MM_MITEL_MEDIAPATH_WAVEIN = 301,MM_SNI_ACM_G721 = 1,MM_EMU_APSSYNTH = 1,MM_EMU_APSMIDIIN = 2,MM_EMU_APSMIDIOUT = 3,MM_EMU_APSWAVEIN = 4,MM_EMU_APSWAVEOUT = 5,MM_ARTISOFT_SBWAVEIN = 1,MM_ARTISOFT_SBWAVEOUT = 2,MM_TBS_TROPEZ_WAVEIN = 37,MM_TBS_TROPEZ_WAVEOUT = 38,MM_TBS_TROPEZ_AUX1 = 39,MM_TBS_TROPEZ_AUX2 = 40,MM_TBS_TROPEZ_LINE = 41,MM_MMOTION_WAVEAUX = 1,MM_MMOTION_WAVEOUT = 2,MM_MMOTION_WAVEIN = 3,MM_IBM_PCMCIA_WAVEIN = 11,MM_IBM_PCMCIA_WAVEOUT = 12,MM_IBM_PCMCIA_SYNTH = 13,MM_IBM_PCMCIA_MIDIIN = 14,MM_IBM_PCMCIA_MIDIOUT = 15,MM_IBM_PCMCIA_AUX = 16,MM_IBM_THINKPAD200 = 17,MM_IBM_MWAVE_WAVEIN = 18,MM_IBM_MWAVE_WAVEOUT = 19,MM_IBM_MWAVE_MIXER = 20,MM_IBM_MWAVE_MIDIIN = 21,MM_IBM_MWAVE_MIDIOUT = 22,MM_IBM_MWAVE_AUX = 23,MM_IBM_WC_MIDIOUT = 30,MM_IBM_WC_WAVEOUT = 31,MM_IBM_WC_MIXEROUT = 33,MM_VOCALTEC_WAVEOUT = 1,MM_VOCALTEC_WAVEIN = 2,MM_ROLAND_RAP10_MIDIOUT = 10,MM_ROLAND_RAP10_MIDIIN = 11,MM_ROLAND_RAP10_SYNTH = 12,MM_ROLAND_RAP10_WAVEOUT = 13,MM_ROLAND_RAP10_WAVEIN = 14,MM_ROLAND_MPU401_MIDIOUT = 15,MM_ROLAND_MPU401_MIDIIN = 16,MM_ROLAND_SMPU_MIDIOUTA = 17,MM_ROLAND_SMPU_MIDIOUTB = 18,MM_ROLAND_SMPU_MIDIINA = 19,MM_ROLAND_SMPU_MIDIINB = 20,MM_ROLAND_SC7_MIDIOUT = 21,MM_ROLAND_SC7_MIDIIN = 22,MM_ROLAND_SERIAL_MIDIOUT = 23,MM_ROLAND_SERIAL_MIDIIN = 24,MM_ROLAND_SCP_MIDIOUT = 38,MM_ROLAND_SCP_MIDIIN = 39,MM_ROLAND_SCP_WAVEOUT = 40,MM_ROLAND_SCP_WAVEIN = 41,MM_ROLAND_SCP_MIXER = 42,MM_ROLAND_SCP_AUX = 48,MM_DSP_SOLUTIONS_WAVEOUT = 1,MM_DSP_SOLUTIONS_WAVEIN = 2,MM_DSP_SOLUTIONS_SYNTH = 3,MM_DSP_SOLUTIONS_AUX = 4,MM_NEC_73_86_SYNTH = 5,MM_NEC_73_86_WAVEOUT = 6,MM_NEC_73_86_WAVEIN = 7,MM_NEC_26_SYNTH = 9,MM_NEC_MPU401_MIDIOUT = 10,MM_NEC_MPU401_MIDIIN = 11,MM_NEC_JOYSTICK = 12,MM_WANGLABS_WAVEIN1 = 1,MM_WANGLABS_WAVEOUT1 = 2,MM_TANDY_VISWAVEIN = 1,MM_TANDY_VISWAVEOUT = 2,MM_TANDY_VISBIOSSYNTH = 3,MM_TANDY_SENS_MMAWAVEIN = 4,MM_TANDY_SENS_MMAWAVEOUT = 5,MM_TANDY_SENS_MMAMIDIIN = 6,MM_TANDY_SENS_MMAMIDIOUT = 7,MM_TANDY_SENS_VISWAVEOUT = 8,MM_TANDY_PSSJWAVEIN = 9,MM_TANDY_PSSJWAVEOUT = 10,MM_ANTEX_SX12_WAVEIN = 1,MM_ANTEX_SX12_WAVEOUT = 2,MM_ANTEX_SX15_WAVEIN = 3,MM_ANTEX_SX15_WAVEOUT = 4,MM_ANTEX_VP625_WAVEIN = 5,MM_ANTEX_VP625_WAVEOUT = 6,MM_ANTEX_AUDIOPORT22_WAVEIN = 7,MM_ANTEX_AUDIOPORT22_WAVEOUT = 8,MM_ANTEX_AUDIOPORT22_FEEDTHRU = 9,MM_INTELOPD_WAVEIN = 1,MM_INTELOPD_WAVEOUT = 101,MM_INTELOPD_AUX = 401,MM_INTEL_NSPMODEMLINEIN = 501,MM_INTEL_NSPMODEMLINEOUT = 502,MM_VAL_MICROKEY_AP_WAVEIN = 1,MM_VAL_MICROKEY_AP_WAVEOUT = 2,MM_INTERACTIVE_WAVEIN = 69,MM_INTERACTIVE_WAVEOUT = 69,MM_YAMAHA_GSS_SYNTH = 1,MM_YAMAHA_GSS_WAVEOUT = 2,MM_YAMAHA_GSS_WAVEIN = 3,MM_YAMAHA_GSS_MIDIOUT = 4,MM_YAMAHA_GSS_MIDIIN = 5,MM_YAMAHA_GSS_AUX = 6,MM_YAMAHA_SERIAL_MIDIOUT = 7,MM_YAMAHA_SERIAL_MIDIIN = 8,MM_YAMAHA_OPL3SA_WAVEOUT = 16,MM_YAMAHA_OPL3SA_WAVEIN = 17,MM_YAMAHA_OPL3SA_FMSYNTH = 18,MM_YAMAHA_OPL3SA_YSYNTH = 19,MM_YAMAHA_OPL3SA_MIDIOUT = 20,MM_YAMAHA_OPL3SA_MIDIIN = 21,MM_YAMAHA_OPL3SA_MIXER = 23,MM_YAMAHA_OPL3SA_JOYSTICK = 24,MM_YAMAHA_YMF724LEG_MIDIOUT = 25,MM_YAMAHA_YMF724LEG_MIDIIN = 26,MM_YAMAHA_YMF724_WAVEOUT = 27,MM_YAMAHA_YMF724_WAVEIN = 28,MM_YAMAHA_YMF724_MIDIOUT = 29,MM_YAMAHA_YMF724_AUX = 30,MM_YAMAHA_YMF724_MIXER = 31,MM_YAMAHA_YMF724LEG_FMSYNTH = 32,MM_YAMAHA_YMF724LEG_MIXER = 33,MM_YAMAHA_SXG_MIDIOUT = 34,MM_YAMAHA_SXG_WAVEOUT = 35,MM_YAMAHA_SXG_MIXER = 36,MM_YAMAHA_ACXG_WAVEIN = 37,MM_YAMAHA_ACXG_WAVEOUT = 38,MM_YAMAHA_ACXG_MIDIOUT = 39,MM_YAMAHA_ACXG_MIXER = 40,MM_YAMAHA_ACXG_AUX = 41,MM_EVEREX_CARRIER = 1,MM_ECHO_SYNTH = 1,MM_ECHO_WAVEOUT = 2,MM_ECHO_WAVEIN = 3,MM_ECHO_MIDIOUT = 4,MM_ECHO_MIDIIN = 5,MM_ECHO_AUX = 6,MM_SIERRA_ARIA_MIDIOUT = 20,MM_SIERRA_ARIA_MIDIIN = 21,MM_SIERRA_ARIA_SYNTH = 22,MM_SIERRA_ARIA_WAVEOUT = 23,MM_SIERRA_ARIA_WAVEIN = 24,MM_SIERRA_ARIA_AUX = 25,MM_SIERRA_ARIA_AUX2 = 32,MM_SIERRA_QUARTET_WAVEIN = 80,MM_SIERRA_QUARTET_WAVEOUT = 81,MM_SIERRA_QUARTET_MIDIIN = 82,MM_SIERRA_QUARTET_MIDIOUT = 83,MM_SIERRA_QUARTET_SYNTH = 84,MM_SIERRA_QUARTET_AUX_CD = 85,MM_SIERRA_QUARTET_AUX_LINE = 86,MM_SIERRA_QUARTET_AUX_MODEM = 87,MM_SIERRA_QUARTET_MIXER = 88,MM_CAT_WAVEOUT = 1,MM_DSP_GROUP_TRUESPEECH = 1,MM_MELABS_MIDI2GO = 1,MM_ESS_AMWAVEOUT = 1,MM_ESS_AMWAVEIN = 2,MM_ESS_AMAUX = 3,MM_ESS_AMSYNTH = 4,MM_ESS_AMMIDIOUT = 5,MM_ESS_AMMIDIIN = 6,MM_ESS_MIXER = 7,MM_ESS_AUX_CD = 8,MM_ESS_MPU401_MIDIOUT = 9,MM_ESS_MPU401_MIDIIN = 10,MM_ESS_ES488_WAVEOUT = 16,MM_ESS_ES488_WAVEIN = 17,MM_ESS_ES488_MIXER = 18,MM_ESS_ES688_WAVEOUT = 19,MM_ESS_ES688_WAVEIN = 20,MM_ESS_ES688_MIXER = 21,MM_ESS_ES1488_WAVEOUT = 22,MM_ESS_ES1488_WAVEIN = 23,MM_ESS_ES1488_MIXER = 24,MM_ESS_ES1688_WAVEOUT = 25,MM_ESS_ES1688_WAVEIN = 26,MM_ESS_ES1688_MIXER = 27,MM_ESS_ES1788_WAVEOUT = 28,MM_ESS_ES1788_WAVEIN = 29,MM_ESS_ES1788_MIXER = 30,MM_ESS_ES1888_WAVEOUT = 31,MM_ESS_ES1888_WAVEIN = 32,MM_ESS_ES1888_MIXER = 33,MM_ESS_ES1868_WAVEOUT = 34,MM_ESS_ES1868_WAVEIN = 35,MM_ESS_ES1868_MIXER = 36,MM_ESS_ES1878_WAVEOUT = 37,MM_ESS_ES1878_WAVEIN = 38,MM_ESS_ES1878_MIXER = 39,MM_CANOPUS_ACM_DVREX = 1,MM_EPS_FMSND = 1,MM_TRUEVISION_WAVEIN1 = 1,MM_TRUEVISION_WAVEOUT1 = 2,MM_AZTECH_MIDIOUT = 3,MM_AZTECH_MIDIIN = 4,MM_AZTECH_WAVEIN = 17,MM_AZTECH_WAVEOUT = 18,MM_AZTECH_FMSYNTH = 20,MM_AZTECH_MIXER = 21,MM_AZTECH_PRO16_WAVEIN = 33,MM_AZTECH_PRO16_WAVEOUT = 34,MM_AZTECH_PRO16_FMSYNTH = 38,MM_AZTECH_DSP16_WAVEIN = 65,MM_AZTECH_DSP16_WAVEOUT = 66,MM_AZTECH_DSP16_FMSYNTH = 68,MM_AZTECH_DSP16_WAVESYNTH = 70,MM_AZTECH_NOVA16_WAVEIN = 71,MM_AZTECH_NOVA16_WAVEOUT = 72,MM_AZTECH_NOVA16_MIXER = 73,MM_AZTECH_WASH16_WAVEIN = 74,MM_AZTECH_WASH16_WAVEOUT = 75,MM_AZTECH_WASH16_MIXER = 76,MM_AZTECH_AUX_CD = 401,MM_AZTECH_AUX_LINE = 402,MM_AZTECH_AUX_MIC = 403,MM_AZTECH_AUX = 404,MM_VIDEOLOGIC_MSWAVEIN = 1,MM_VIDEOLOGIC_MSWAVEOUT = 2,MM_KORG_PCIF_MIDIOUT = 1,MM_KORG_PCIF_MIDIIN = 2,MM_KORG_1212IO_MSWAVEIN = 3,MM_KORG_1212IO_MSWAVEOUT = 4,MM_APT_ACE100CD = 1,MM_ICS_WAVEDECK_WAVEOUT = 1,MM_ICS_WAVEDECK_WAVEIN = 2,MM_ICS_WAVEDECK_MIXER = 3,MM_ICS_WAVEDECK_AUX = 4,MM_ICS_WAVEDECK_SYNTH = 5,MM_ICS_WAVEDEC_SB_WAVEOUT = 6,MM_ICS_WAVEDEC_SB_WAVEIN = 7,MM_ICS_WAVEDEC_SB_FM_MIDIOUT = 8,MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT = 9,MM_ICS_WAVEDEC_SB_MPU401_MIDIIN = 10,MM_ICS_WAVEDEC_SB_MIXER = 11,MM_ICS_WAVEDEC_SB_AUX = 12,MM_ICS_2115_LITE_MIDIOUT = 13,MM_ICS_2120_LITE_MIDIOUT = 14,MM_ITERATEDSYS_FUFCODEC = 1,MM_METHEUS_ZIPPER = 1,MM_WINNOV_CAVIAR_WAVEIN = 1,MM_WINNOV_CAVIAR_WAVEOUT = 2,MM_WINNOV_CAVIAR_VIDC = 3,MM_WINNOV_CAVIAR_CHAMPAGNE = 4,MM_WINNOV_CAVIAR_YUV8 = 5,MM_NCR_BA_WAVEIN = 1,MM_NCR_BA_WAVEOUT = 2,MM_NCR_BA_SYNTH = 3,MM_NCR_BA_AUX = 4,MM_NCR_BA_MIXER = 5,MM_AST_MODEMWAVE_WAVEIN = 13,MM_AST_MODEMWAVE_WAVEOUT = 14,MM_WILLOWPOND_FMSYNTH_STEREO = 20,MM_WILLOWPOND_MPU401 = 21,MM_WILLOWPOND_SNDPORT_WAVEIN = 100,MM_WILLOWPOND_SNDPORT_WAVEOUT = 101,MM_WILLOWPOND_SNDPORT_MIXER = 102,MM_WILLOWPOND_SNDPORT_AUX = 103,MM_WILLOWPOND_PH_WAVEIN = 104,MM_WILLOWPOND_PH_WAVEOUT = 105,MM_WILLOWPOND_PH_MIXER = 106,MM_WILLOWPOND_PH_AUX = 107,MM_WILLOPOND_SNDCOMM_WAVEIN = 108,MM_WILLOWPOND_SNDCOMM_WAVEOUT = 109,MM_WILLOWPOND_SNDCOMM_MIXER = 110,MM_WILLOWPOND_SNDCOMM_AUX = 111,MM_WILLOWPOND_GENERIC_WAVEIN = 112,MM_WILLOWPOND_GENERIC_WAVEOUT = 113,MM_WILLOWPOND_GENERIC_MIXER = 114,MM_WILLOWPOND_GENERIC_AUX = 115,MM_VITEC_VMAKER = 1,MM_VITEC_VMPRO = 2,MM_MOSCOM_VPC2400_IN = 1,MM_MOSCOM_VPC2400_OUT = 2,MM_SILICONSOFT_SC1_WAVEIN = 1,MM_SILICONSOFT_SC1_WAVEOUT = 2,MM_SILICONSOFT_SC2_WAVEIN = 3,MM_SILICONSOFT_SC2_WAVEOUT = 4,MM_SILICONSOFT_SOUNDJR2_WAVEOUT = 5,MM_SILICONSOFT_SOUNDJR2PR_WAVEIN = 6,MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT = 7,MM_SILICONSOFT_SOUNDJR3_WAVEOUT = 8,MM_TTEWS_WAVEIN = 1,MM_TTEWS_WAVEOUT = 2,MM_TTEWS_MIDIIN = 3,MM_TTEWS_MIDIOUT = 4,MM_TTEWS_MIDISYNTH = 5,MM_TTEWS_MIDIMONITOR = 6,MM_TTEWS_VMIDIIN = 7,MM_TTEWS_VMIDIOUT = 8,MM_TTEWS_AUX = 9,MM_TTEWS_MIXER = 10,MM_MEDIASONIC_ACM_G723 = 1,MM_MEDIASONIC_ICOM = 2,MM_ICOM_WAVEIN = 3,MM_ICOM_WAVEOUT = 4,MM_ICOM_MIXER = 5,MM_ICOM_AUX = 6,MM_ICOM_LINE = 7,MM_SANYO_ACM_LD_ADPCM = 1,MM_AHEAD_MULTISOUND = 1,MM_AHEAD_SOUNDBLASTER = 2,MM_AHEAD_PROAUDIO = 3,MM_AHEAD_GENERIC = 4,MM_OLIVETTI_WAVEIN = 1,MM_OLIVETTI_WAVEOUT = 2,MM_OLIVETTI_MIXER = 3,MM_OLIVETTI_AUX = 4,MM_OLIVETTI_MIDIIN = 5,MM_OLIVETTI_MIDIOUT = 6,MM_OLIVETTI_SYNTH = 7,MM_OLIVETTI_JOYSTICK = 8,MM_OLIVETTI_ACM_GSM = 9,MM_OLIVETTI_ACM_ADPCM = 10,MM_OLIVETTI_ACM_CELP = 11,MM_OLIVETTI_ACM_SBC = 12,MM_OLIVETTI_ACM_OPR = 13,MM_IOMAGIC_TEMPO_WAVEOUT = 1,MM_IOMAGIC_TEMPO_WAVEIN = 2,MM_IOMAGIC_TEMPO_SYNTH = 3,MM_IOMAGIC_TEMPO_MIDIOUT = 4,MM_IOMAGIC_TEMPO_MXDOUT = 5,MM_IOMAGIC_TEMPO_AUXOUT = 6,MM_MATSUSHITA_WAVEIN = 1,MM_MATSUSHITA_WAVEOUT = 2,MM_MATSUSHITA_FMSYNTH_STEREO = 3,MM_MATSUSHITA_MIXER = 4,MM_MATSUSHITA_AUX = 5,MM_NEWMEDIA_WAVJAMMER = 1,MM_LYRRUS_BRIDGE_GUITAR = 1,MM_OPTI_M16_FMSYNTH_STEREO = 1,MM_OPTI_M16_MIDIIN = 2,MM_OPTI_M16_MIDIOUT = 3,MM_OPTI_M16_WAVEIN = 4,MM_OPTI_M16_WAVEOUT = 5,MM_OPTI_M16_MIXER = 6,MM_OPTI_M16_AUX = 7,MM_OPTI_P16_FMSYNTH_STEREO = 16,MM_OPTI_P16_MIDIIN = 17,MM_OPTI_P16_MIDIOUT = 18,MM_OPTI_P16_WAVEIN = 19,MM_OPTI_P16_WAVEOUT = 20,MM_OPTI_P16_MIXER = 21,MM_OPTI_P16_AUX = 22,MM_OPTI_M32_WAVEIN = 32,MM_OPTI_M32_WAVEOUT = 33,MM_OPTI_M32_MIDIIN = 34,MM_OPTI_M32_MIDIOUT = 35,MM_OPTI_M32_SYNTH_STEREO = 36,MM_OPTI_M32_MIXER = 37,MM_OPTI_M32_AUX = 38,MM_COMPAQ_BB_WAVEIN = 1,MM_COMPAQ_BB_WAVEOUT = 2,MM_COMPAQ_BB_WAVEAUX = 3,MM_MPTUS_SPWAVEOUT = 1,MM_LERNOUT_ANDHAUSPIE_LHCODECACM = 1,MM_DIGITAL_AV320_WAVEIN = 1,MM_DIGITAL_AV320_WAVEOUT = 2,MM_DIGITAL_ACM_G723 = 3,MM_DIGITAL_ICM_H263 = 4,MM_DIGITAL_ICM_H261 = 5,MM_MOTU_MTP_MIDIOUT_ALL = 100,MM_MOTU_MTP_MIDIIN_1 = 101,MM_MOTU_MTP_MIDIOUT_1 = 101,MM_MOTU_MTP_MIDIIN_2 = 102,MM_MOTU_MTP_MIDIOUT_2 = 102,MM_MOTU_MTP_MIDIIN_3 = 103,MM_MOTU_MTP_MIDIOUT_3 = 103,MM_MOTU_MTP_MIDIIN_4 = 104,MM_MOTU_MTP_MIDIOUT_4 = 104,MM_MOTU_MTP_MIDIIN_5 = 105,MM_MOTU_MTP_MIDIOUT_5 = 105,MM_MOTU_MTP_MIDIIN_6 = 106,MM_MOTU_MTP_MIDIOUT_6 = 106,MM_MOTU_MTP_MIDIIN_7 = 107,MM_MOTU_MTP_MIDIOUT_7 = 107,MM_MOTU_MTP_MIDIIN_8 = 108,MM_MOTU_MTP_MIDIOUT_8 = 108,MM_MOTU_MTPII_MIDIOUT_ALL = 200,MM_MOTU_MTPII_MIDIIN_SYNC = 200,MM_MOTU_MTPII_MIDIIN_1 = 201,MM_MOTU_MTPII_MIDIOUT_1 = 201,MM_MOTU_MTPII_MIDIIN_2 = 202,MM_MOTU_MTPII_MIDIOUT_2 = 202,MM_MOTU_MTPII_MIDIIN_3 = 203,MM_MOTU_MTPII_MIDIOUT_3 = 203,MM_MOTU_MTPII_MIDIIN_4 = 204,MM_MOTU_MTPII_MIDIOUT_4 = 204,MM_MOTU_MTPII_MIDIIN_5 = 205,MM_MOTU_MTPII_MIDIOUT_5 = 205,MM_MOTU_MTPII_MIDIIN_6 = 206,MM_MOTU_MTPII_MIDIOUT_6 = 206,MM_MOTU_MTPII_MIDIIN_7 = 207,MM_MOTU_MTPII_MIDIOUT_7 = 207,MM_MOTU_MTPII_MIDIIN_8 = 208,MM_MOTU_MTPII_MIDIOUT_8 = 208,MM_MOTU_MTPII_NET_MIDIIN_1 = 209,MM_MOTU_MTPII_NET_MIDIOUT_1 = 209,MM_MOTU_MTPII_NET_MIDIIN_2 = 210,MM_MOTU_MTPII_NET_MIDIOUT_2 = 210,MM_MOTU_MTPII_NET_MIDIIN_3 = 211,MM_MOTU_MTPII_NET_MIDIOUT_3 = 211,MM_MOTU_MTPII_NET_MIDIIN_4 = 212,MM_MOTU_MTPII_NET_MIDIOUT_4 = 212,MM_MOTU_MTPII_NET_MIDIIN_5 = 213,MM_MOTU_MTPII_NET_MIDIOUT_5 = 213,MM_MOTU_MTPII_NET_MIDIIN_6 = 214,MM_MOTU_MTPII_NET_MIDIOUT_6 = 214,MM_MOTU_MTPII_NET_MIDIIN_7 = 215,MM_MOTU_MTPII_NET_MIDIOUT_7 = 215,MM_MOTU_MTPII_NET_MIDIIN_8 = 216,MM_MOTU_MTPII_NET_MIDIOUT_8 = 216,MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL = 300,MM_MOTU_MXP_MIDIIN_SYNC = 300,MM_MOTU_MXP_MIDIIN_MIDIIN_1 = 301,MM_MOTU_MXP_MIDIIN_MIDIOUT_1 = 301,MM_MOTU_MXP_MIDIIN_MIDIIN_2 = 302,MM_MOTU_MXP_MIDIIN_MIDIOUT_2 = 302,MM_MOTU_MXP_MIDIIN_MIDIIN_3 = 303,MM_MOTU_MXP_MIDIIN_MIDIOUT_3 = 303,MM_MOTU_MXP_MIDIIN_MIDIIN_4 = 304,MM_MOTU_MXP_MIDIIN_MIDIOUT_4 = 304,MM_MOTU_MXP_MIDIIN_MIDIIN_5 = 305,MM_MOTU_MXP_MIDIIN_MIDIOUT_5 = 305,MM_MOTU_MXP_MIDIIN_MIDIIN_6 = 306,MM_MOTU_MXP_MIDIIN_MIDIOUT_6 = 306,MM_MOTU_MXPMPU_MIDIOUT_ALL = 400,MM_MOTU_MXPMPU_MIDIIN_SYNC = 400,MM_MOTU_MXPMPU_MIDIIN_1 = 401,MM_MOTU_MXPMPU_MIDIOUT_1 = 401,MM_MOTU_MXPMPU_MIDIIN_2 = 402,MM_MOTU_MXPMPU_MIDIOUT_2 = 402,MM_MOTU_MXPMPU_MIDIIN_3 = 403,MM_MOTU_MXPMPU_MIDIOUT_3 = 403,MM_MOTU_MXPMPU_MIDIIN_4 = 404,MM_MOTU_MXPMPU_MIDIOUT_4 = 404,MM_MOTU_MXPMPU_MIDIIN_5 = 405,MM_MOTU_MXPMPU_MIDIOUT_5 = 405,MM_MOTU_MXPMPU_MIDIIN_6 = 406,MM_MOTU_MXPMPU_MIDIOUT_6 = 406,MM_MOTU_MXN_MIDIOUT_ALL = 500,MM_MOTU_MXN_MIDIIN_SYNC = 500,MM_MOTU_MXN_MIDIIN_1 = 501,MM_MOTU_MXN_MIDIOUT_1 = 501,MM_MOTU_MXN_MIDIIN_2 = 502,MM_MOTU_MXN_MIDIOUT_2 = 502,MM_MOTU_MXN_MIDIIN_3 = 503,MM_MOTU_MXN_MIDIOUT_3 = 503,MM_MOTU_MXN_MIDIIN_4 = 504,MM_MOTU_MXN_MIDIOUT_4 = 504,MM_MOTU_FLYER_MIDI_IN_SYNC = 600,MM_MOTU_FLYER_MIDI_IN_A = 601,MM_MOTU_FLYER_MIDI_OUT_A = 601,MM_MOTU_FLYER_MIDI_IN_B = 602,MM_MOTU_FLYER_MIDI_OUT_B = 602,MM_MOTU_PKX_MIDI_IN_SYNC = 700,MM_MOTU_PKX_MIDI_IN_A = 701,MM_MOTU_PKX_MIDI_OUT_A = 701,MM_MOTU_PKX_MIDI_IN_B = 702,MM_MOTU_PKX_MIDI_OUT_B = 702,MM_MOTU_DTX_MIDI_IN_SYNC = 800,MM_MOTU_DTX_MIDI_IN_A = 801,MM_MOTU_DTX_MIDI_OUT_A = 801,MM_MOTU_DTX_MIDI_IN_B = 802,MM_MOTU_DTX_MIDI_OUT_B = 802,MM_MOTU_MTPAV_MIDIOUT_ALL = 900,MM_MOTU_MTPAV_MIDIIN_SYNC = 900,MM_MOTU_MTPAV_MIDIIN_1 = 901,MM_MOTU_MTPAV_MIDIOUT_1 = 901,MM_MOTU_MTPAV_MIDIIN_2 = 902,MM_MOTU_MTPAV_MIDIOUT_2 = 902,MM_MOTU_MTPAV_MIDIIN_3 = 903,MM_MOTU_MTPAV_MIDIOUT_3 = 903,MM_MOTU_MTPAV_MIDIIN_4 = 904,MM_MOTU_MTPAV_MIDIOUT_4 = 904,MM_MOTU_MTPAV_MIDIIN_5 = 905,MM_MOTU_MTPAV_MIDIOUT_5 = 905,MM_MOTU_MTPAV_MIDIIN_6 = 906,MM_MOTU_MTPAV_MIDIOUT_6 = 906,MM_MOTU_MTPAV_MIDIIN_7 = 907,MM_MOTU_MTPAV_MIDIOUT_7 = 907,MM_MOTU_MTPAV_MIDIIN_8 = 908,MM_MOTU_MTPAV_MIDIOUT_8 = 908,MM_MOTU_MTPAV_NET_MIDIIN_1 = 909,MM_MOTU_MTPAV_NET_MIDIOUT_1 = 909,MM_MOTU_MTPAV_NET_MIDIIN_2 = 910,MM_MOTU_MTPAV_NET_MIDIOUT_2 = 910,MM_MOTU_MTPAV_NET_MIDIIN_3 = 911,MM_MOTU_MTPAV_NET_MIDIOUT_3 = 911,MM_MOTU_MTPAV_NET_MIDIIN_4 = 912,MM_MOTU_MTPAV_NET_MIDIOUT_4 = 912,MM_MOTU_MTPAV_NET_MIDIIN_5 = 913,MM_MOTU_MTPAV_NET_MIDIOUT_5 = 913,MM_MOTU_MTPAV_NET_MIDIIN_6 = 914,MM_MOTU_MTPAV_NET_MIDIOUT_6 = 914,MM_MOTU_MTPAV_NET_MIDIIN_7 = 915,MM_MOTU_MTPAV_NET_MIDIOUT_7 = 915,MM_MOTU_MTPAV_NET_MIDIIN_8 = 916,MM_MOTU_MTPAV_NET_MIDIOUT_8 = 916,MM_MOTU_MTPAV_MIDIIN_ADAT = 917,MM_MOTU_MTPAV_MIDIOUT_ADAT = 917,MM_MOTU_MXPXT_MIDIIN_SYNC = 1000,MM_MOTU_MXPXT_MIDIOUT_ALL = 1000,MM_MOTU_MXPXT_MIDIIN_1 = 1001,MM_MOTU_MXPXT_MIDIOUT_1 = 1001,MM_MOTU_MXPXT_MIDIOUT_2 = 1002,MM_MOTU_MXPXT_MIDIIN_2 = 1002,MM_MOTU_MXPXT_MIDIIN_3 = 1003,MM_MOTU_MXPXT_MIDIOUT_3 = 1003,MM_MOTU_MXPXT_MIDIIN_4 = 1004,MM_MOTU_MXPXT_MIDIOUT_4 = 1004,MM_MOTU_MXPXT_MIDIIN_5 = 1005,MM_MOTU_MXPXT_MIDIOUT_5 = 1005,MM_MOTU_MXPXT_MIDIOUT_6 = 1006,MM_MOTU_MXPXT_MIDIIN_6 = 1006,MM_MOTU_MXPXT_MIDIOUT_7 = 1007,MM_MOTU_MXPXT_MIDIIN_7 = 1007,MM_MOTU_MXPXT_MIDIOUT_8 = 1008,MM_MOTU_MXPXT_MIDIIN_8 = 1008,MM_WORKBIT_MIXER = 1,MM_WORKBIT_WAVEOUT = 2,MM_WORKBIT_WAVEIN = 3,MM_WORKBIT_MIDIIN = 4,MM_WORKBIT_MIDIOUT = 5,MM_WORKBIT_FMSYNTH = 6,MM_WORKBIT_AUX = 7,MM_WORKBIT_JOYSTICK = 8,MM_OSITECH_TRUMPCARD = 1,MM_MIRO_MOVIEPRO = 1,MM_MIRO_VIDEOD1 = 2,MM_MIRO_VIDEODC1TV = 3,MM_MIRO_VIDEOTD = 4,MM_MIRO_DC30_WAVEOUT = 5,MM_MIRO_DC30_WAVEIN = 6,MM_MIRO_DC30_MIX = 7,MM_ISOLUTION_PASCAL = 1,MM_VOICEMIXER = 1,};
enum MACRO_MOD_MIDIPORT {MOD_MIDIPORT = 1,MOD_SYNTH = 2,MOD_SQSYNTH = 3,MOD_FMSYNTH = 4,MOD_MAPPER = 5,MOD_WAVETABLE = 6,MOD_SWSYNTH = 7,};
enum MACRO_MONITORINFOF {MONITORINFOF_PRIMARY = 0x1,};
enum MACRO_NABTS_BUFFER {NABTS_BUFFER_PICTURENUMBER_SUPPORT = 1,};
enum MACRO_NCBADDGRNAME {NCBADDGRNAME = 0x36,};
enum MACRO_NCBCHAINSEND {NCBCHAINSEND = 0x17,NCBDGSEND = 0x20,};
enum MACRO_NLS_DBCSCHAR {NLS_DBCSCHAR = 0x10000,NLS_ALPHANUMERIC = 0x0,NLS_KATAKANA = 0x20000,NLS_HIRAGANA = 0x40000,NLS_ROMAN = 0x400000,NLS_IME_CONVERSION = 0x800000,NLS_IME_DISABLE = 0x20000000,};
enum MACRO_NO_EXCEPTION {NO_EXCEPTION_HANDLING_SUPPORT = 0xB,};
enum MACRO_NUM_RESOURCE {NUM_RESOURCE_MAP = 256,};
enum MACRO_OPTIMIZATION {NO_COLOR_OPTIMIZATION = 0x0,COLOR_OPTIMIZATION = 0x1,};
enum MACRO_PARMNUM_BASE {PARMNUM_BASE_INFOLEVEL = 1000,};
enum MACRO_PCI_VERIFIER {PCI_VERIFIER_DETECTED_VIOLATION = 0xF6,};
enum MACRO_PGF_SCROLLUP {PGF_SCROLLUP = 1,PGF_SCROLLDOWN = 2,PGF_SCROLLLEFT = 4,PGF_SCROLLRIGHT = 8,};
enum MACRO_PGN_CALCSIZE {PGN_CALCSIZE = -902,};
enum MACRO_PIDSI_ARTIST {PIDSI_ARTIST = 2,PIDSI_SONGTITLE = 3,PIDSI_ALBUM = 4,PIDSI_YEAR = 5,PIDSI_COMMENT = 6,PIDSI_TRACK = 7,PIDSI_GENRE = 11,PIDSI_LYRICS = 12,};
enum MACRO_PID_FINDDATA {PID_FINDDATA = 0,PID_NETRESOURCE = 1,PID_DESCRIPTIONID = 2,PID_WHICHFOLDER = 3,PID_NETWORKLOCATION = 4,PID_COMPUTERNAME = 5,PID_DISPLACED_FROM = 2,PID_DISPLACED_DATE = 3,PID_SYNC_COPY_IN = 2,PID_MISC_STATUS = 2,PID_MISC_ACCESSCOUNT = 3,PID_MISC_OWNER = 4,PID_HTMLINFOTIPFILE = 5,PID_MISC_PICS = 6,PID_DISPLAY_PROPERTIES = 0,PID_INTROTEXT = 1,};
enum MACRO_PKCS_CONTENT {PKCS_CONTENT_INFO = 33,};
enum MACRO_PNP_DETECTED {PNP_DETECTED_FATAL_ERROR = 0xCA,};
enum MACRO_POLICY_AUDIT {POLICY_AUDIT_EVENT_UNCHANGED = 0x0,POLICY_AUDIT_EVENT_SUCCESS = 0x1,POLICY_AUDIT_EVENT_FAILURE = 0x2,POLICY_AUDIT_EVENT_NONE = 0x4,POLICY_AUDIT_EVENT_MASK = 0x7,POLICY_VIEW_LOCAL_INFORMATION = 0x1,POLICY_VIEW_AUDIT_INFORMATION = 0x2,POLICY_GET_PRIVATE_INFORMATION = 0x4,POLICY_TRUST_ADMIN = 0x8,POLICY_CREATE_ACCOUNT = 0x10,POLICY_CREATE_SECRET = 0x20,POLICY_CREATE_PRIVILEGE = 0x40,POLICY_SET_DEFAULT_QUOTA_LIMITS = 0x80,POLICY_SET_AUDIT_REQUIREMENTS = 0x100,POLICY_AUDIT_LOG_ADMIN = 0x200,POLICY_SERVER_ADMIN = 0x400,POLICY_LOOKUP_NAMES = 0x800,POLICY_NOTIFICATION = 0x1000,POLICY_ALL_ACCESS = 0xF0FFF,POLICY_READ = 0x20006,POLICY_WRITE = 0x207F8,POLICY_EXECUTE = 0x20801,POLICY_KERBEROS_VALIDATE_CLIENT = 0x80,};
enum MACRO_POWER_ACTION {POWER_ACTION_QUERY_ALLOWED = 0x1,POWER_ACTION_UI_ALLOWED = 0x2,POWER_ACTION_OVERRIDE_APPS = 0x4,POWER_ACTION_LIGHTEST_FIRST = 0x10000000,POWER_ACTION_LOCK_CONSOLE = 0x20000000,POWER_ACTION_DISABLE_WAKES = 0x40000000,POWER_ACTION_CRITICAL = 0x80000000,POWER_LEVEL_USER_NOTIFY_TEXT = 0x1,POWER_LEVEL_USER_NOTIFY_SOUND = 0x2,POWER_LEVEL_USER_NOTIFY_EXEC = 0x4,POWER_USER_NOTIFY_BUTTON = 0x8,POWER_USER_NOTIFY_SHUTDOWN = 0x10,POWER_FORCE_TRIGGER_RESET = 0x80000000,};
enum MACRO_PRINTER_ENUM {PRINTER_ENUM_DEFAULT = 0x1,PRINTER_ENUM_LOCAL = 0x2,PRINTER_ENUM_CONNECTIONS = 0x4,PRINTER_ENUM_FAVORITE = 0x4,PRINTER_ENUM_NAME = 0x8,PRINTER_ENUM_REMOTE = 0x10,PRINTER_ENUM_SHARED = 0x20,PRINTER_ENUM_NETWORK = 0x40,PRINTER_ENUM_EXPAND = 0x4000,PRINTER_ENUM_CONTAINER = 0x8000,PRINTER_ENUM_ICONMASK = 0xFF0000,PRINTER_ENUM_ICON1 = 0x10000,PRINTER_ENUM_ICON2 = 0x20000,PRINTER_ENUM_ICON3 = 0x40000,PRINTER_ENUM_ICON4 = 0x80000,PRINTER_ENUM_ICON5 = 0x100000,PRINTER_ENUM_ICON6 = 0x200000,PRINTER_ENUM_ICON7 = 0x400000,PRINTER_ENUM_ICON8 = 0x800000,PRINTER_ENUM_HIDE = 0x1000000,};
enum MACRO_PROCESS_HEAP {PROCESS_HEAP_REGION = 0x1,PROCESS_HEAP_UNCOMMITTED_RANGE = 0x2,PROCESS_HEAP_ENTRY_BUSY = 0x4,PROCESS_HEAP_ENTRY_MOVEABLE = 0x10,PROCESS_HEAP_ENTRY_DDESHARE = 0x20,};
enum MACRO_PROP_COMMENT {PROP_COMMENT = 0x1,PROP_LOCALE = 0x2,PROP_DISPLAY_HINT = 0x4,PROP_VERSION = 0x8,PROP_START_TIME = 0x10,PROP_MACHINE = 0x20,PROP_ADDRESSES = 0x100,PROP_SD = 0x200,PROP_ALL = 0x80000000,};
enum MACRO_PROTOCOLFLAG {PROTOCOLFLAG_NO_PICS_CHECK = 0x1,};
enum MACRO_PROTOCOL_LPR {PROTOCOL_LPR_TYPE = 2,};
enum MACRO_REFERENCE_BY {REFERENCE_BY_POINTER = 0x18,};
enum MACRO_RESOURCETYPE {RESOURCETYPE_ANY = 0x0,RESOURCETYPE_DISK = 0x1,RESOURCETYPE_PRINT = 0x2,RESOURCETYPE_RESERVED = 0x8,RESOURCETYPE_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_RESOURCE_NOT {RESOURCE_NOT_OWNED = 0xE3,};
enum MACRO_SETABORTPROC {SETABORTPROC = 9,};
enum MACRO_SETCOPYCOUNT {SETCOPYCOUNT = 17,};
enum MACRO_SETKERNTRACK {SETKERNTRACK = 770,};
enum MACRO_SETWALLPAPER {SETWALLPAPER_DEFAULT = -1,};
enum MACRO_SE_PRIVILEGE {SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1,SE_PRIVILEGE_ENABLED = 0x2,SE_PRIVILEGE_REMOVED = 0x4,SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000,};
enum MACRO_SIZEZOOMSHOW {SIZEZOOMSHOW = 3,SIZEZOOMHIDE = 4,};
enum MACRO_SOFTKEYBOARD {SOFTKEYBOARD_TYPE_T1 = 0x1,SOFTKEYBOARD_TYPE_C1 = 0x2,};
enum MACRO_SPFILENOTIFY {SPFILENOTIFY_STARTQUEUE = 0x1,SPFILENOTIFY_ENDQUEUE = 0x2,SPFILENOTIFY_STARTSUBQUEUE = 0x3,SPFILENOTIFY_ENDSUBQUEUE = 0x4,SPFILENOTIFY_STARTDELETE = 0x5,SPFILENOTIFY_ENDDELETE = 0x6,SPFILENOTIFY_DELETEERROR = 0x7,SPFILENOTIFY_STARTRENAME = 0x8,SPFILENOTIFY_ENDRENAME = 0x9,SPFILENOTIFY_RENAMEERROR = 0xA,SPFILENOTIFY_STARTCOPY = 0xB,SPFILENOTIFY_ENDCOPY = 0xC,SPFILENOTIFY_COPYERROR = 0xD,SPFILENOTIFY_NEEDMEDIA = 0xE,SPFILENOTIFY_QUEUESCAN = 0xF,SPFILENOTIFY_CABINETINFO = 0x10,SPFILENOTIFY_FILEINCABINET = 0x11,SPFILENOTIFY_NEEDNEWCABINET = 0x12,SPFILENOTIFY_FILEEXTRACTED = 0x13,SPFILENOTIFY_FILEOPDELAYED = 0x14,SPFILENOTIFY_STARTBACKUP = 0x15,SPFILENOTIFY_BACKUPERROR = 0x16,SPFILENOTIFY_ENDBACKUP = 0x17,SPFILENOTIFY_QUEUESCAN_EX = 0x18,SPFILENOTIFY_STARTREGISTRATION = 0x19,SPFILENOTIFY_ENDREGISTRATION = 0x20,SPFILENOTIFY_QUEUESCAN_SIGNERINFO = 0x40,SPFILENOTIFY_LANGMISMATCH = 0x10000,SPFILENOTIFY_TARGETEXISTS = 0x20000,SPFILENOTIFY_TARGETNEWER = 0x40000,};
enum MACRO_STATE_SYSTEM {STATE_SYSTEM_HASPOPUP = 0x40000000,};
enum MACRO_STATUS_GUARD {STATUS_GUARD_PAGE_VIOLATION = 0x80000001,STATUS_DATATYPE_MISALIGNMENT = 0x80000002,STATUS_BREAKPOINT = 0x80000003,STATUS_SINGLE_STEP = 0x80000004,};
enum MACRO_STATUS_LOGON {STATUS_LOGON_FAILURE = 0xC000006D,STATUS_WRONG_PASSWORD = 0xC000006A,STATUS_PASSWORD_EXPIRED = 0xC0000071,STATUS_PASSWORD_MUST_CHANGE = 0xC0000224,STATUS_ACCESS_DENIED = 0xC0000022,STATUS_DOWNGRADE_DETECTED = 0xC0000388,STATUS_AUTHENTICATION_FIREWALL_FAILED = 0xC0000413,STATUS_ACCOUNT_DISABLED = 0xC0000072,STATUS_ACCOUNT_RESTRICTION = 0xC000006E,STATUS_ACCOUNT_LOCKED_OUT = 0xC0000234,STATUS_ACCOUNT_EXPIRED = 0xC0000193,STATUS_LOGON_TYPE_NOT_GRANTED = 0xC000015B,};
enum MACRO_SURFACEALIGN {SURFACEALIGN_DISCARDABLE = 0x1,};
enum MACRO_SYSTEM_AUDIT {SYSTEM_AUDIT_OBJECT_ACE_TYPE = 0x7,SYSTEM_ALARM_OBJECT_ACE_TYPE = 0x8,};
enum MACRO_SYSTEM_FIXED {SYSTEM_FIXED_FONT = 16,DEFAULT_GUI_FONT = 17,};
enum MACRO_TBM_SETBUDDY {TBM_SETBUDDY = 1056,TBM_GETBUDDY = 1057,TBM_SETUNICODEFORMAT = 8197,TBM_GETUNICODEFORMAT = 8198,};
enum MACRO_TCM_GETITEMA {TCM_GETITEMA = 4869,TCM_GETITEMW = 4924,TCM_GETITEM = 4869,TCM_SETITEMA = 4870,TCM_SETITEMW = 4925,TCM_SETITEM = 4870,TCM_INSERTITEMA = 4871,TCM_INSERTITEMW = 4926,TCM_INSERTITEM = 4871,TCM_DELETEITEM = 4872,TCM_DELETEALLITEMS = 4873,TCM_GETITEMRECT = 4874,TCM_GETCURSEL = 4875,TCM_SETCURSEL = 4876,};
enum MACRO_THREAD_STUCK {THREAD_STUCK_IN_DEVICE_DRIVER = 0xEA,THREAD_STUCK_IN_DEVICE_DRIVER_M = 0x100000EA,};
enum MACRO_TIME_ONESHOT {TIME_ONESHOT = 0x0,TIME_PERIODIC = 0x1,TIME_CALLBACK_FUNCTION = 0x0,TIME_CALLBACK_EVENT_SET = 0x10,TIME_CALLBACK_EVENT_PULSE = 0x20,TIME_KILL_SYNCHRONOUS = 0x100,};
enum MACRO_TOKEN_SOURCE {TOKEN_SOURCE_LENGTH = 8,};
enum MACRO_TRUST_E_FAIL {TRUST_E_FAIL = 0x800B010B,};
enum MACRO_TT_AVAILABLE {TT_AVAILABLE = 0x1,TT_ENABLED = 0x2,};
enum MACRO_UDN_DELTAPOS {UDN_DELTAPOS = -722,};
enum MACRO_URL_UNESCAPE {URL_UNESCAPE = 0x10000000,URL_ESCAPE_UNSAFE = 0x20000000,URL_PLUGGABLE_PROTOCOL = 0x40000000,URL_WININET_COMPATIBILITY = 0x80000000,URL_DONT_ESCAPE_EXTRA_INFO = 0x2000000,URL_DONT_UNESCAPE_EXTRA_INFO = 0x2000000,URL_BROWSER_MODE = 0x2000000,URL_ESCAPE_SPACES_ONLY = 0x4000000,URL_DONT_SIMPLIFY = 0x8000000,URL_NO_META = 0x8000000,URL_UNESCAPE_INPLACE = 0x100000,URL_CONVERT_IF_DOSPATH = 0x200000,URL_UNESCAPE_HIGH_ANSI_ONLY = 0x400000,URL_INTERNAL_PATH = 0x800000,URL_FILE_USE_PATHURL = 0x10000,URL_ESCAPE_PERCENT = 0x1000,URL_ESCAPE_SEGMENT_ONLY = 0x2000,URL_PARTFLAG_KEEPSCHEME = 0x1,URL_APPLY_DEFAULT = 0x1,URL_APPLY_GUESSSCHEME = 0x2,URL_APPLY_GUESSFILE = 0x4,URL_APPLY_FORCEAPPLY = 0x8,};
enum MACRO_VAR_CALENDAR {VAR_CALENDAR_THAI = 0x80,VAR_CALENDAR_GREGORIAN = 0x100,};
enum MACRO_VER_FILETYPE {VER_FILETYPE = 3,VER_FILESUBTYPE = 12,};
enum MACRO_WRITES_VALID {RECOVERED_WRITES_VALID = 0x1,UNRECOVERED_WRITES_VALID = 0x2,RECOVERED_READS_VALID = 0x4,UNRECOVERED_READS_VALID = 0x8,WRITE_COMPRESSION_INFO_VALID = 0x10,READ_COMPRESSION_INFO_VALID = 0x20,};
enum MACRO_X509_UNICODE {X509_UNICODE_NAME = 20,X509_KEYGEN_REQUEST_TO_BE_SIGNED = 21,};
enum MACRO__DRVRESERVED {_DRVRESERVED = 10,};
enum MACRO__NLSCMPERROR {_NLSCMPERROR = 2147483647,};
enum MACRO_cbNDRContext {cbNDRContext = 20,};
typedef struct _MALLOC_FREE_STRUCT MALLOC_FREE_STRUCT;
typedef struct _MCDLIGHTMODELSTATE MCDLIGHTMODELSTATE;
typedef struct _MCDSHADELMODELSTATE MCDSHADEMODELSTATE;
typedef struct __MCDTEXTUREOBJSTATE MCDTEXTUREOBJSTATE;
typedef struct tagMCI_SYSINFO_PARMSA MCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW MCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS MCI_WAVE_SET_PARMS;
typedef struct _MIB_IPFORWARDTABLE MIB_IPFORWARDTABLE;
typedef struct _MIB_IPMCAST_GLOBAL MIB_IPMCAST_GLOBAL;
typedef struct _MIDL_FORMAT_STRING MIDL_FORMAT_STRING;
typedef struct tagMIXERLINECONTROLSA MIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW MIXERLINECONTROLSW;
typedef struct _MOUSE_EVENT_RECORD MOUSE_EVENT_RECORD;
typedef struct _NDIS_CO_LINK_SPEED NDIS_CO_LINK_SPEED;
typedef struct _NDIS_VAR_DATA_DESC NDIS_VAR_DATA_DESC;
typedef void ( *NDR_NOTIFY_ROUTINE)();
enum NEGOTIATE_MESSAGES {NegEnumPackagePrefixes = 0x0,NegGetCallerName = 0x1,NegCallPackageMax = 0x2,};
typedef struct _NETWORK_ADDRESS_IP NETWORK_ADDRESS_IP;
typedef struct tagNMHDFILTERBTNCLICK NMHDFILTERBTNCLICK;
typedef struct tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;
typedef struct tagOleMenuGroupWidths OLEMENUGROUPWIDTHS;
typedef float OLE_XPOS_CONTAINER;
typedef float OLE_YPOS_CONTAINER;
typedef struct oliadpcmwaveformat_tag OLIADPCMWAVEFORMAT;
typedef struct _OUTLINETEXTMETRICA OUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW OUTLINETEXTMETRICW;
typedef struct tACMDRIVERDETAILSA *PACMDRIVERDETAILSA;
typedef struct tACMDRIVERDETAILSW *PACMDRIVERDETAILSW;
typedef struct tACMFILTERDETAILSA *PACMFILTERDETAILSA;
typedef struct tACMFILTERDETAILSW *PACMFILTERDETAILSW;
typedef struct tACMFORMATDETAILSA *PACMFORMATDETAILSA;
typedef struct tACMFORMATDETAILSW *PACMFORMATDETAILSW;
typedef struct _BDA_TABLE_SECTION *PBDA_TABLE_SECTION;
typedef struct _BIDI_REQUEST_DATA *PBIDI_REQUEST_DATA;
typedef struct _CTL_USAGE *PCERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO *PCERT_REQUEST_INFO;
typedef struct _CERT_SIMPLE_CHAIN *PCERT_SIMPLE_CHAIN;
typedef struct _CERT_TEMPLATE_EXT *PCERT_TEMPLATE_EXT;
typedef struct _CERT_TRUST_STATUS *PCERT_TRUST_STATUS;
typedef struct _CMC_RESPONSE_INFO *PCMC_RESPONSE_INFO;
typedef struct _CMSG_RC2_AUX_INFO *PCMSG_RC2_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO *PCMSG_RC4_AUX_INFO;
typedef struct tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;
typedef struct tagCOMPOSITIONSTRING *PCOMPOSITIONSTRING;
typedef struct _CONSOLE_FONT_INFO *PCONSOLE_FONT_INFO;
typedef struct _CRYPT_CREDENTIALS *PCRYPT_CREDENTIALS;
typedef struct _CRYPT_DECODE_PARA *PCRYPT_DECODE_PARA;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB;
typedef struct _CRYPT_ENCODE_PARA *PCRYPT_ENCODE_PARA;
typedef struct _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE;
typedef struct _CRYPT_PROVUI_DATA *PCRYPT_PROVUI_DATA;
typedef struct _DATATYPES_INFO_1A *PDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W *PDATATYPES_INFO_1W;
typedef struct _DDFLIPOVERLAYINFO *PDDFLIPOVERLAYINFO;
typedef struct _DDSETSTATEOUTINFO *PDDSETSTATEOUTINFO;
typedef struct _DDTRANSFEROUTINFO *PDDTRANSFEROUTINFO;
typedef struct _DD_CLIPPER_GLOBAL *PDD_CLIPPER_GLOBAL;
typedef struct _DD_PALETTE_GLOBAL *PDD_PALETTE_GLOBAL;
typedef struct _DD_SETENTRIESDATA *PDD_SETENTRIESDATA;
typedef struct _DD_SETPALETTEDATA *PDD_SETPALETTEDATA;
typedef struct _DD_SURFACE_GLOBAL *PDD_SURFACE_GLOBAL;
typedef struct _DD_VPORTCOLORDATA *PDD_VPORTCOLORDATA;
typedef struct _DEVICE_MEDIA_INFO *PDEVICE_MEDIA_INFO;
typedef struct IDirect3DResource8 *PDIRECT3DRESOURCE8;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16;
typedef struct tagABORTPATH *PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH;
typedef struct tagEMRSETICMPROFILE *PEMRSETICMPROFILEA;
typedef struct tagEMRSETICMPROFILE *PEMRSETICMPROFILEW;
typedef struct tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;
typedef struct tagEMRTRANSPARENTBLT *PEMRTRANSPARENTBLT;
typedef struct _ENCRYPTION_BUFFER *PENCRYPTION_BUFFER;
typedef struct _PERF_COUNTER_BLOCK PERF_COUNTER_BLOCK;
typedef int ( *PFNDPAENUMCALLBACK)(void *p, void *pData);
typedef int ( *PFNDSAENUMCALLBACK)(void *p, void *pData);
typedef struct _FORMAT_PARAMETERS *PFORMAT_PARAMETERS;
typedef struct _GEN_GET_TIME_CAPS *PGEN_GET_TIME_CAPS;
typedef struct _GET_EXPRESSION_EX *PGET_EXPRESSION_EX;
typedef struct _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT;
typedef struct _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;
typedef struct _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;
typedef struct _IP_ADAPTER_PREFIX *PIP_ADAPTER_PREFIX;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 *PIP_ADDRESS_STRING;
typedef struct _IP_INTERFACE_INFO *PIP_INTERFACE_INFO;
typedef struct _KDDEBUGGER_DATA32 *PKDDEBUGGER_DATA32;
typedef struct _KDDEBUGGER_DATA64 *PKDDEBUGGER_DATA64;
typedef struct _KERB_TICKET_LOGON *PKERB_TICKET_LOGON;
typedef struct _DCCCDBDB2D2AC461237A75FB18C0449E *PKSCORRELATED_TIME;
typedef struct _A156F3783D3AF89709906294AAADEE96 *PKSDATARANGE_AUDIO;
typedef struct _DCA1691E12E502D611F5426518CFEFB5 *PKSDATARANGE_MUSIC;
typedef struct _9E1ED747B9CD39E7270D6384935529E0 *PKSDS3D_BUFFER_ALL;
typedef struct _AC9A5C69A2E8BFD7F981D24477498145 *PKSDS3D_ITD_PARAMS;
typedef struct _A07373D2A5755254DCD028456AB4EC3B *PKSEVENT_TIME_MARK;
typedef struct _0E076CBD8F5A7ED08B697C5009EDFCFF *PKSPROPERTY_SERIAL;
typedef struct _3878B18F15C290CF7BC80116234DE41C *PKSQUALITY_MANAGER;
typedef struct _26873349DB0A36B1F3161FA857CA70AC *PKSRATE_CAPABILITY;
typedef struct _BFD35443418CDCF1187E122E74A5B815 *PKSVPSURFACEPARAMS;
typedef struct _F0DE5EAC046D7D32AA534DC253D377C4 *PKSWAVE_COMPATCAPS;
typedef struct tagKS_BDA_FRAME_INFO *PKS_BDA_FRAME_INFO;
typedef struct _KS_DVDCOPY_BUSKEY *PKS_DVDCOPY_BUSKEY;
typedef struct _KS_DVDCOPY_REGION *PKS_DVDCOPY_REGION;
typedef struct tagKS_MPEG1VIDEOINFO *PKS_MPEG1VIDEOINFO;
typedef struct tagKS_MPEGVIDEOINFO2 *PKS_MPEGVIDEOINFO2;
typedef struct tagKS_VBI_FRAME_INFO *PKS_VBI_FRAME_INFO;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;
typedef struct tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO;
typedef struct _MENU_EVENT_RECORD *PMENU_EVENT_RECORD;
typedef struct _939B1A1D3305CA6F2D0B71D8D29A6AEF *PMESSAGEBOX_PARAMS;
typedef struct _MIB_IPMCAST_SCOPE *PMIB_IPMCAST_SCOPE;
typedef struct _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;
typedef struct tagMOUSEHOOKSTRUCTEX *PMOUSEHOOKSTRUCTEX;
typedef struct _MPR_IFTRANSPORT_0 *PMPR_IFTRANSPORT_0;
typedef struct _MSV1_0_LM20_LOGON *PMSV1_0_LM20_LOGON;
typedef struct _NABTS_BUFFER_LINE *PNABTS_BUFFER_LINE;
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
typedef struct tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW;
typedef struct _OEM_DMEXTRAHEADER *POEM_DMEXTRAHEADER;
typedef struct _OFFLOAD_ALGO_INFO *POFFLOAD_ALGO_INFO;
typedef unsigned short *PPARAM_OFFSETTABLE;
typedef struct _PRINTER_DEFAULTSA *PPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW *PPRINTER_DEFAULTSW;
typedef struct _PROCESS_HEAP_ENTRY PROCESS_HEAP_ENTRY;
typedef struct _tagPROTOCOLFILTERDATA PROTOCOLFILTERDATA;
typedef struct _SERVICE_ADDRESSES *PSERVICE_ADDRESSES;
typedef struct _SERVICE_TYPE_INFO *PSERVICE_TYPE_INFO;
typedef struct _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;
typedef struct _SPC_PE_IMAGE_DATA *PSPC_PE_IMAGE_DATA;
typedef struct _TAPE_GET_POSITION *PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION *PTAPE_SET_POSITION;
typedef struct _TC_IFC_DESCRIPTOR *PTC_IFC_DESCRIPTOR;
typedef struct _UFF_FONTDIRECTORY *PUFF_FONTDIRECTORY;
typedef struct _VK_TO_WCHAR_TABLE *PVK_TO_WCHAR_TABLE;
typedef struct _WINDOWS_IAS_QUERY *PWINDOWS_IAS_QUERY;
typedef struct tagWNODE_METHOD_ITEM *PWNODE_METHOD_ITEM;
typedef struct tagWNODE_SINGLE_ITEM *PWNODE_SINGLE_ITEM;
typedef struct tagRAWINPUTDEVICELIST RAWINPUTDEVICELIST;
typedef struct _READCONTROLSPACE32 READCONTROLSPACE32;
typedef struct _READCONTROLSPACE64 READCONTROLSPACE64;
typedef struct _RPC_BINDING_VECTOR RPC_BINDING_VECTOR;
typedef struct _A0026B003AB75CC8BFC049DB25C2779D RPC_DISPATCH_TABLE;
typedef struct _RSVP_FILTERSPEC_V4 RSVP_FILTERSPEC_V4;
typedef struct _RSVP_FILTERSPEC_V6 RSVP_FILTERSPEC_V6;
typedef struct _OSVERSIONINFOW RTL_OSVERSIONINFOW;
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_RESOURCE_DEBUG;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D SCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F SCARD_READERSTATEW;
typedef struct _SERVICE_ASYNC_INFO SERVICE_ASYNC_INFO;
typedef struct _SERVICE_TYPE_VALUE SERVICE_TYPE_VALUE;
typedef struct _SFVM_PROPPAGE_DATA SFVM_PROPPAGE_DATA;
typedef struct _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES;
typedef struct _SPC_SP_AGENCY_INFO SPC_SP_AGENCY_INFO;
typedef struct _SPC_STATEMENT_TYPE SPC_STATEMENT_TYPE;
typedef struct _SP_INF_INFORMATION SP_INF_INFORMATION;
struct SWbemNamedValueSet;
typedef struct _A4B4B8B4CE90204588F5CA0CCC4989CD SYSTEM_POWER_LEVEL;
struct ShellBrowserWindow;
typedef struct _TOKEN_AUDIT_POLICY TOKEN_AUDIT_POLICY;
typedef struct _TOKEN_DEFAULT_DACL TOKEN_DEFAULT_DACL;
struct UnsecuredApartment;
typedef struct _VERIFY_INFORMATION VERIFY_INFORMATION;
typedef struct _WINDOWS_DEVICELIST WINDOWS_DEVICELIST;
typedef struct WINTRUST_BLOB_INFO_ WINTRUST_BLOB_INFO;
typedef struct WINTRUST_CERT_INFO_ WINTRUST_CERT_INFO;
typedef struct WINTRUST_FILE_INFO_ WINTRUST_FILE_INFO;
typedef struct WINTRUST_SGNR_INFO_ WINTRUST_SGNR_INFO;
typedef struct _WSANAMESPACE_INFOA WSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW WSANAMESPACE_INFOW;
enum WbemChangeFlagEnum {wbemChangeFlagCreateOrUpdate = 0x0,wbemChangeFlagUpdateOnly = 0x1,wbemChangeFlagCreateOnly = 0x2,wbemChangeFlagUpdateCompatible = 0x0,wbemChangeFlagUpdateSafeMode = 0x20,wbemChangeFlagUpdateForceMode = 0x40,wbemChangeFlagStrongValidation = 0x80,wbemChangeFlagAdvisory = 0x10000,};
struct WbemStatusCodeText;
enum _CRED_MARSHAL_TYPE {CertCredential = 0x1,UsernameTargetCredential = 0x2,};
enum _D3DLIGHTSTATETYPE {D3DLIGHTSTATE_MATERIAL = 0x1,D3DLIGHTSTATE_AMBIENT = 0x2,D3DLIGHTSTATE_COLORMODEL = 0x3,D3DLIGHTSTATE_FOGMODE = 0x4,D3DLIGHTSTATE_FOGSTART = 0x5,D3DLIGHTSTATE_FOGEND = 0x6,D3DLIGHTSTATE_FOGDENSITY = 0x7,D3DLIGHTSTATE_COLORVERTEX = 0x8,D3DLIGHTSTATE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DPATCHEDGESTYLE {D3DPATCHEDGE_DISCRETE = 0x0,D3DPATCHEDGE_CONTINUOUS = 0x1,D3DPATCHEDGE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSTATEBLOCKTYPE {D3DSBT_ALL = 0x1,D3DSBT_PIXELSTATE = 0x2,D3DSBT_VERTEXSTATE = 0x3,D3DSBT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREADDRESS {D3DTADDRESS_WRAP = 0x1,D3DTADDRESS_MIRROR = 0x2,D3DTADDRESS_CLAMP = 0x3,D3DTADDRESS_BORDER = 0x4,D3DTADDRESS_MIRRORONCE = 0x5,D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF,};
enum _DBGKD_MAJOR_TYPES {DBGKD_MAJOR_NT = 0x0,DBGKD_MAJOR_XBOX = 0x1,DBGKD_MAJOR_BIG = 0x2,DBGKD_MAJOR_EXDI = 0x3,DBGKD_MAJOR_NTBD = 0x4,DBGKD_MAJOR_EFI = 0x5,DBGKD_MAJOR_TNT = 0x6,DBGKD_MAJOR_COUNT = 0x7,};
enum _FINDEX_SEARCH_OPS {FindExSearchNameMatch = 0x0,FindExSearchLimitToDirectories = 0x1,FindExSearchLimitToDevices = 0x2,FindExSearchMaxSearchOp = 0x3,};
struct _FLAGGED_WORD_BLOB {unsigned int fFlags;unsigned int clSize;unsigned short asData[1];};
enum _OFFLOAD_CONF_ALGO {OFFLOAD_IPSEC_CONF_NONE = 0x0,OFFLOAD_IPSEC_CONF_DES = 0x1,OFFLOAD_IPSEC_CONF_RESERVED = 0x2,OFFLOAD_IPSEC_CONF_3_DES = 0x3,OFFLOAD_IPSEC_CONF_MAX = 0x4,};
struct _RASTERIZER_STATUS {short nSize;short wFlags;short nLanguageID;};
struct _SINGLE_LIST_ENTRY {struct _SINGLE_LIST_ENTRY *Next;};
enum _WSACOMPLETIONTYPE {NSP_NOTIFY_IMMEDIATELY = 0x0,NSP_NOTIFY_HWND = 0x1,NSP_NOTIFY_EVENT = 0x2,NSP_NOTIFY_PORT = 0x3,NSP_NOTIFY_APC = 0x4,};
enum __MIDL_IPrint_0001 {PRINTFLAG_MAYBOTHERUSER = 0x1,PRINTFLAG_PROMPTUSER = 0x2,PRINTFLAG_USERMAYCHANGEPRINTER = 0x4,PRINTFLAG_RECOMPOSETODEVICE = 0x8,PRINTFLAG_DONTACTUALLYPRINT = 0x10,PRINTFLAG_FORCEPROPERTIES = 0x20,PRINTFLAG_PRINTTOFILE = 0x40,};
typedef struct _remoteMETAFILEPICT remoteMETAFILEPICT;
enum tagApplicationType {ServerApplication = 0x0,LibraryApplication = 0x1,};
enum tagDCOM_CALL_STATE {DCOM_NONE = 0x0,DCOM_CALL_COMPLETE = 0x1,DCOM_CALL_CANCELED = 0x2,};
enum tagPOINTERINACTIVE {POINTERINACTIVE_ACTIVATEONENTRY = 0x1,POINTERINACTIVE_DEACTIVATEONLEAVE = 0x2,POINTERINACTIVE_ACTIVATEONDRAG = 0x4,};
typedef struct _userFLAG_STGMEDIUM userFLAG_STGMEDIUM;
typedef struct _ACCESS_DENIED_ACE ACCESS_DENIED_ACE;
typedef struct tACMDRIVERDETAILSA ACMDRIVERDETAILSA;
typedef struct tACMDRIVERDETAILSW ACMDRIVERDETAILSW;
typedef struct tACMFILTERDETAILSA ACMFILTERDETAILSA;
typedef struct tACMFILTERDETAILSW ACMFILTERDETAILSW;
typedef struct tACMFORMATDETAILSA ACMFORMATDETAILSA;
typedef struct tACMFORMATDETAILSW ACMFORMATDETAILSW;
typedef struct _AD_GENERAL_PARAMS AD_GENERAL_PARAMS;
struct AsyncIAdviseSink2 {struct AsyncIAdviseSink2Vtbl *lpVtbl;};
typedef struct _BDA_TABLE_SECTION BDA_TABLE_SECTION;
typedef struct _BIDI_REQUEST_DATA BIDI_REQUEST_DATA;
typedef struct tagCBTACTIVATESTRUCT CBTACTIVATESTRUCT;
typedef struct _CTL_USAGE CERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO CERT_REQUEST_INFO;
typedef struct _CERT_SIMPLE_CHAIN CERT_SIMPLE_CHAIN;
typedef struct _CERT_TEMPLATE_EXT CERT_TEMPLATE_EXT;
typedef struct _CERT_TRUST_STATUS CERT_TRUST_STATUS;
typedef struct tagCLEANLOCALSTORAGE CLEANLOCALSTORAGE;
typedef struct _CMC_RESPONSE_INFO CMC_RESPONSE_INFO;
typedef struct _CMSG_RC2_AUX_INFO CMSG_RC2_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO CMSG_RC4_AUX_INFO;
typedef struct tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
typedef struct tagCOMPOSITIONSTRING COMPOSITIONSTRING;
typedef struct _CONNECTDLGSTRUCTA CONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW CONNECTDLGSTRUCTW;
typedef struct _CONSOLE_FONT_INFO CONSOLE_FONT_INFO;
typedef struct _CRYPT_CREDENTIALS CRYPT_CREDENTIALS;
typedef struct _CRYPT_DECODE_PARA CRYPT_DECODE_PARA;
typedef struct _CRYPTOAPI_BLOB CRYPT_DIGEST_BLOB;
typedef struct _CRYPT_ENCODE_PARA CRYPT_ENCODE_PARA;
typedef struct _CRYPT_OBJID_TABLE CRYPT_OBJID_TABLE;
typedef struct _CRYPT_PROVUI_DATA CRYPT_PROVUI_DATA;
enum ComponentCategory {CategoryNotSet = 0xFFFFFFFF,CategoryOther = 0x0,CategoryVideo = 0x1,CategoryAudio = 0x2,CategoryText = 0x3,CategoryData = 0x4,};
typedef struct _D3DHAL_CALLBACKS2 D3DHAL_CALLBACKS2;
typedef struct _D3DHAL_CALLBACKS3 D3DHAL_CALLBACKS3;
typedef struct _D3DHAL_CLEAR2DATA D3DHAL_CLEAR2DATA;
typedef struct _D3DHAL_DP2COMMAND D3DHAL_DP2COMMAND;
typedef struct _D3DMATRIXMULTIPLY D3DMATRIXMULTIPLY;
typedef struct _D3DNTHAL_DP2CLEAR D3DNTHAL_DP2CLEAR;
typedef struct _D3DNTHAL_DP2WINFO D3DNTHAL_DP2WINFO;
typedef struct _D3DRECTPATCH_INFO D3DRECTPATCH_INFO;
typedef struct _DATATYPES_INFO_1A DATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W DATATYPES_INFO_1W;
typedef struct _CF7718BAF3C5EB1DFF93AAEE07D29F5C DD32BITDRIVERDATA;
typedef struct _DDFLIPOVERLAYINFO DDFLIPOVERLAYINFO;
typedef struct _DDHAL_DDCALLBACKS DDHAL_DDCALLBACKS;
typedef struct _DDHAL_SETMODEDATA DDHAL_SETMODEDATA;
typedef struct _DDMORESURFACECAPS DDMORESURFACECAPS;
typedef struct _DDSETSTATEOUTINFO DDSETSTATEOUTINFO;
typedef struct _DDTRANSFEROUTINFO DDTRANSFEROUTINFO;
typedef struct _DDVIDEOPORTNOTIFY DDVIDEOPORTNOTIFY;
typedef struct _DDVIDEOPORTSTATUS DDVIDEOPORTSTATUS;
typedef struct _DD_CLIPPER_GLOBAL DD_CLIPPER_GLOBAL;
typedef struct _DD_PALETTE_GLOBAL DD_PALETTE_GLOBAL;
typedef struct _DD_SETENTRIESDATA DD_SETENTRIESDATA;
typedef struct _DD_SETPALETTEDATA DD_SETPALETTEDATA;
typedef struct _DD_SURFACE_GLOBAL DD_SURFACE_GLOBAL;
typedef struct _DD_VPORTCOLORDATA DD_VPORTCOLORDATA;
typedef struct _DEVICE_MEDIA_INFO DEVICE_MEDIA_INFO;
typedef struct digifixwaveformat_tag DIGIFIXWAVEFORMAT;
typedef struct digistdwaveformat_tag DIGISTDWAVEFORMAT;
typedef struct _DMUS_ARTICULATION DMUS_ARTICULATION;
typedef struct _DMUS_DOWNLOADINFO DMUS_DOWNLOADINFO;
typedef struct _DSBPOSITIONNOTIFY DSBPOSITIONNOTIFY;
struct DWebBrowserEvents {struct DWebBrowserEventsVtbl *lpVtbl;};
typedef struct echosc1waveformat_tag ECHOSC1WAVEFORMAT;
typedef struct tagEMRPOLYLINE16 EMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYPOLYLINE16 EMRPOLYPOLYLINE16;
typedef struct tagABORTPATH EMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH EMRSELECTCLIPPATH;
typedef struct tagEMRSETICMPROFILE EMRSETICMPROFILEA;
typedef struct tagEMRSETICMPROFILE EMRSETICMPROFILEW;
typedef struct tagEMRSETMAPPERFLAGS EMRSETMAPPERFLAGS;
typedef struct tagEMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
typedef struct tagEMRTRANSPARENTBLT EMRTRANSPARENTBLT;
typedef struct _ENCRYPTION_BUFFER ENCRYPTION_BUFFER;
typedef struct _FLAGGED_BYTE_BLOB FLAGGED_BYTE_BLOB;
typedef struct _FLAGGED_WORD_BLOB FLAGGED_WORD_BLOB;
typedef struct _FORMAT_PARAMETERS FORMAT_PARAMETERS;
typedef struct _GEN_GET_TIME_CAPS GEN_GET_TIME_CAPS;
typedef struct _GET_EXPRESSION_EX GET_EXPRESSION_EX;
typedef struct _GLYPHMETRICSFLOAT GLYPHMETRICSFLOAT;
typedef struct _GRADIENT_TRIANGLE GRADIENT_TRIANGLE;
typedef void *HCRYPTOIDFUNCADDR;
struct ICategoryProvider {struct ICategoryProviderVtbl *lpVtbl;};
struct IComThreadingInfo {struct IComThreadingInfoVtbl *lpVtbl;};
struct IContinueCallback {struct IContinueCallbackVtbl *lpVtbl;};
struct IDataAdviseHolder {struct IDataAdviseHolderVtbl *lpVtbl;};
struct IDirect3DSurface8 {struct IDirect3DSurface8Vtbl *lpVtbl;};
struct IDirect3DTexture8 {struct IDirect3DTexture8Vtbl *lpVtbl;};
struct IDirectDrawKernel {struct IDirectDrawKernelVtbl *lpVtbl;};
typedef IDirectMusicPort IDirectMusicPort8;
typedef IDirectMusicThru IDirectMusicThru8;
struct IDirectWriterLock {struct IDirectWriterLockVtbl *lpVtbl;};
struct IDragSourceHelper {struct IDragSourceHelperVtbl *lpVtbl;};
struct IDropTargetHelper {struct IDropTargetHelperVtbl *lpVtbl;};
struct IEnumCATEGORYINFO {struct IEnumCATEGORYINFOVtbl *lpVtbl;};
struct IEnumContextProps;
struct IEnumOleUndoUnits {struct IEnumOleUndoUnitsVtbl *lpVtbl;};
struct IFolderFilterSite {struct IFolderFilterSiteVtbl *lpVtbl;};
struct IInitializeObject {struct IInitializeObjectVtbl *lpVtbl;};
struct IInternetBindInfo {struct IInternetBindInfoVtbl *lpVtbl;};
struct IInternetPriority {struct IInternetPriorityVtbl *lpVtbl;};
struct IInternetProtocol {struct IInternetProtocolVtbl *lpVtbl;};
typedef struct _IMAGE_FILE_HEADER IMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS IMAGE_ROM_HEADERS;
struct INamedPropertyBag {struct INamedPropertyBagVtbl *lpVtbl;};
struct INewShortcutHookA {struct INewShortcutHookAVtbl *lpVtbl;};
struct INewShortcutHookW {struct INewShortcutHookWVtbl *lpVtbl;};
struct IOleCommandTarget {struct IOleCommandTargetVtbl *lpVtbl;};
struct IOleInPlaceObject {struct IOleInPlaceObjectVtbl *lpVtbl;};
struct IOleInPlaceSiteEx {struct IOleInPlaceSiteExVtbl *lpVtbl;};
struct IOleItemContainer {struct IOleItemContainerVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_PREFIX IP_ADAPTER_PREFIX;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 IP_ADDRESS_STRING;
typedef struct _IP_INTERFACE_INFO IP_INTERFACE_INFO;
struct IParseDisplayName {struct IParseDisplayNameVtbl *lpVtbl;};
struct IPrintOemDriverUI {struct IPrintOemDriverUIVtbl *lpVtbl;};
struct IPropertyPageSite {struct IPropertyPageSiteVtbl *lpVtbl;};
struct IProvideClassInfo {struct IProvideClassInfoVtbl *lpVtbl;};
struct IPublishingWizard {struct IPublishingWizardVtbl *lpVtbl;};
struct IResolveShellLink {struct IResolveShellLinkVtbl *lpVtbl;};
struct IRpcChannelBuffer {struct IRpcChannelBufferVtbl *lpVtbl;};
struct ISWbemEventSource {struct ISWbemEventSourceVtbl *lpVtbl;};
struct ISWbemPropertySet {struct ISWbemPropertySetVtbl *lpVtbl;};
struct ISearchCommandExt {struct ISearchCommandExtVtbl *lpVtbl;};
struct ISequentialStream {struct ISequentialStreamVtbl *lpVtbl;};
struct IShellIconOverlay {struct IShellIconOverlayVtbl *lpVtbl;};
struct ISupportErrorInfo {struct ISupportErrorInfoVtbl *lpVtbl;};
struct ISurrogateService {struct ISurrogateServiceVtbl *lpVtbl;};
struct ISynchronizeEvent {struct ISynchronizeEventVtbl *lpVtbl;};
struct ISynchronizeMutex {struct ISynchronizeMutexVtbl *lpVtbl;};
struct IThumbnailCapture {struct IThumbnailCaptureVtbl *lpVtbl;};
struct ITypeChangeEvents {struct ITypeChangeEventsVtbl *lpVtbl;};
struct IUserNotification {struct IUserNotificationVtbl *lpVtbl;};
struct IWbemObjectAccess {struct IWbemObjectAccessVtbl *lpVtbl;};
struct IWbemProviderInit {struct IWbemProviderInitVtbl *lpVtbl;};
struct IWbemQualifierSet {struct IWbemQualifierSetVtbl *lpVtbl;};
struct IXMLDOMParseError {struct IXMLDOMParseErrorVtbl *lpVtbl;};
typedef struct _KDDEBUGGER_DATA32 KDDEBUGGER_DATA32;
typedef struct _KDDEBUGGER_DATA64 KDDEBUGGER_DATA64;
typedef struct _KERB_TICKET_LOGON KERB_TICKET_LOGON;
typedef struct _DCCCDBDB2D2AC461237A75FB18C0449E KSCORRELATED_TIME;
typedef struct _A156F3783D3AF89709906294AAADEE96 KSDATARANGE_AUDIO;
typedef struct _DCA1691E12E502D611F5426518CFEFB5 KSDATARANGE_MUSIC;
typedef struct _9E1ED747B9CD39E7270D6384935529E0 KSDS3D_BUFFER_ALL;
typedef struct _AC9A5C69A2E8BFD7F981D24477498145 KSDS3D_ITD_PARAMS;
typedef struct _A07373D2A5755254DCD028456AB4EC3B KSEVENT_TIME_MARK;
typedef struct _0E076CBD8F5A7ED08B697C5009EDFCFF KSPROPERTY_SERIAL;
typedef struct _3878B18F15C290CF7BC80116234DE41C KSQUALITY_MANAGER;
typedef struct _26873349DB0A36B1F3161FA857CA70AC KSRATE_CAPABILITY;
typedef struct _BFD35443418CDCF1187E122E74A5B815 KSVPSURFACEPARAMS;
typedef struct _F0DE5EAC046D7D32AA534DC253D377C4 KSWAVE_COMPATCAPS;
typedef struct tagKS_BDA_FRAME_INFO KS_BDA_FRAME_INFO;
typedef struct _KS_DVDCOPY_BUSKEY KS_DVDCOPY_BUSKEY;
typedef struct _KS_DVDCOPY_REGION KS_DVDCOPY_REGION;
typedef struct tagKS_MPEG1VIDEOINFO KS_MPEG1VIDEOINFO;
typedef struct tagKS_MPEGVIDEOINFO2 KS_MPEGVIDEOINFO2;
typedef struct tagKS_VBI_FRAME_INFO KS_VBI_FRAME_INFO;
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct tagAASHELLMENUITEM *LPAASHELLMENUITEM;
typedef struct tACMSTREAMHEADER *LPACMSTREAMHEADER;
typedef ICatalogFileInfo *LPCATALOGFILEINFO;
typedef struct tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;
typedef ICommDlgBrowser2 *LPCOMMDLGBROWSER2;
typedef struct tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;
typedef IConnectionPoint *LPCONNECTIONPOINT;
typedef struct _CONTROL_SERVICE *LPCONTROL_SERVICE;
typedef ICreateErrorInfo *LPCREATEERRORINFO;
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;
typedef struct _D3DLIGHTINGCAPS *LPD3DLIGHTINGCAPS;
typedef struct _DDHAL_CALLBACKS *LPDDHAL_CALLBACKS;
typedef struct _DDVIDEOPORTCAPS *LPDDVIDEOPORTCAPS;
typedef struct DDVIDEOPORTDATA *LPDDVIDEOPORTDATA;
typedef struct _DDVIDEOPORTDESC *LPDDVIDEOPORTDESC;
typedef struct _DDVIDEOPORTINFO *LPDDVIDEOPORTINFO;
typedef struct IDirect3DDevice8 *LPDIRECT3DDEVICE8;
typedef struct IDirect3DVolume8 *LPDIRECT3DVOLUME8;
typedef IDirectMusicPort *LPDIRECTMUSICPORT;
typedef struct _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW;
typedef struct _DMUS_BUFFERDESC *LPDMUS_BUFFERDESC;
typedef struct _DMUS_CLOCKINFO7 *LPDMUS_CLOCKINFO7;
typedef struct _DMUS_CLOCKINFO8 *LPDMUS_CLOCKINFO8;
typedef struct _DMUS_SYNTHSTATS *LPDMUS_SYNTHSTATS;
typedef struct DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;
typedef struct _DSFXI3DL2Reverb *LPDSFXI3DL2Reverb;
typedef struct _DSFXWavesReverb *LPDSFXWavesReverb;
typedef struct _DSKTLSYSTEMTIME *LPDSKTLSYSTEMTIME;
typedef IEnumConnections *LPENUMCONNECTIONS;
typedef struct IEnumExtraSearch *LPENUMEXTRASEARCH;
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
typedef struct tagENUMTEXTMETRICA *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW *LPENUMTEXTMETRICW;
typedef struct _C6832D807A2747A4D0CBF13E34E0B28B *LPEXP_DARWIN_LINK;
typedef struct EXT_API_VERSION *LPEXT_API_VERSION;
typedef struct _FILEDESCRIPTORA *LPFILEDESCRIPTORA;
typedef struct _FILEDESCRIPTORW *LPFILEDESCRIPTORW;
typedef struct tagIMECHARPOSITION *LPIMECHARPOSITION;
typedef struct tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT;
typedef struct tagLOCALESIGNATURE *LPLOCALESIGNATURE;
typedef struct tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS;
typedef struct tagMCI_INFO_PARMSA *LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW *LPMCI_INFO_PARMSW;
typedef struct tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW *LPMCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW *LPMCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW *LPMCI_SAVE_PARMSW;
typedef struct midiproptimediv_tag *LPMIDIPROPTIMEDIV;
typedef struct _MONITOR_INFO_1A *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W *LPMONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W *LPMONITOR_INFO_2W;
typedef struct tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;
typedef struct _EAF9C7AE235510435B672EB36E720462 *LPNMCBEDRAGBEGINA;
typedef struct _8C7301159AF0C1BFC267CBF90877013D *LPNMCBEDRAGBEGINW;
typedef struct tagNMLVGETINFOTIPA *LPNMLVGETINFOTIPA;
typedef struct tagNMLVGETINFOTIPW *LPNMLVGETINFOTIPW;
typedef struct tagNMTBGETINFOTIPA *LPNMTBGETINFOTIPA;
typedef struct tagNMTBGETINFOTIPW *LPNMTBGETINFOTIPW;
typedef struct tagNMTVGETINFOTIPA *LPNMTVGETINFOTIPA;
typedef struct tagNMTVGETINFOTIPW *LPNMTVGETINFOTIPW;
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
typedef IOleCacheControl *LPOLECACHECONTROL;
typedef IOleDocumentSite *LPOLEDOCUMENTSITE;
typedef IOleDocumentView *LPOLEDOCUMENTVIEW;
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef IPointerInactive *LPPOINTERINACTIVE;
typedef struct _PRINTER_INFO_1A *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W *LPPRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W *LPPRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W *LPPRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W *LPPRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W *LPPRINTER_INFO_7W;
typedef struct _PRINTER_INFO_8A *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W *LPPRINTER_INFO_8W;
typedef struct _PRINTER_INFO_9A *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W *LPPRINTER_INFO_9W;
typedef IPropertyStorage *LPPROPERTYSTORAGE;
typedef struct _QOS_TCP_TRAFFIC *LPQOS_TCP_TRAFFIC;
typedef struct tagRECONVERTSTRING *LPRECONVERTSTRING;
typedef struct tagRID_DEVICE_INFO *LPRID_DEVICE_INFO;
typedef struct _RSVP_FILTERSPEC *LPRSVP_FILTERSPEC;
typedef struct _SENDCMDINPARAMS *LPSENDCMDINPARAMS;
typedef IServiceProvider *LPSERVICEPROVIDER;
typedef struct _SERVICE_ADDRESS *LPSERVICE_ADDRESS;
typedef struct _SHDESCRIPTIONID *LPSHDESCRIPTIONID;
typedef IShellImageStore *LPSHELLIMAGESTORE;
typedef struct _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW;
typedef ISimpleFrameSite *LPSIMPLEFRAMESITE;
typedef struct _B32EBC34E16EC960AF2175E3ACF4C5B6 *LPTBREPLACEBITMAP;
typedef struct tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT;
typedef struct tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;
typedef struct tagTVINSERTSTRUCTA *LPTVINSERTSTRUCTA;
typedef struct tagTVINSERTSTRUCTW *LPTVINSERTSTRUCTW;
typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
typedef struct _VIDEOPARAMETERS *LPVIDEOPARAMETERS;
typedef struct _WIN32_STREAM_ID *LPWIN32_STREAM_ID;
typedef struct _WINDOWS_IAS_SET *LPWINDOWS_IAS_SET;
typedef IWinInetHttpInfo *LPWININETHTTPINFO;
typedef struct _WIN_CERTIFICATE *LPWIN_CERTIFICATE;
typedef struct _WSANSClassInfoA *LPWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *LPWSANSCLASSINFOW;
enum MACRO_APPLICATION {APPLICATION_ERROR_MASK = 0x20000000,};
enum MACRO_AVIFILECAPS {AVIFILECAPS_CANREAD = 0x1,AVIFILECAPS_CANWRITE = 0x2,AVIFILECAPS_ALLKEYFRAMES = 0x10,AVIFILECAPS_NOCOMPRESSION = 0x20,};
enum MACRO_AVIFILEINFO {AVIFILEINFO_HASINDEX = 0x10,AVIFILEINFO_MUSTUSEINDEX = 0x20,AVIFILEINFO_ISINTERLEAVED = 0x100,AVIFILEINFO_WASCAPTUREFILE = 0x10000,AVIFILEINFO_COPYRIGHTED = 0x20000,};
enum MACRO_BPC_CONNECT {BPC_CONNECT_STATE_UNCOMMITTED = 0,BPC_CONNECT_STATE_QUEUED = 1,BPC_CONNECT_STATE_ACTIVE = 2,BPC_CONNECT_STATE_DISCONNECTING = 3,BPC_GUIDE_GENERIC_MIN = 16777216,BPC_GUIDE_GENERIC_MAX = 33554431,BPC_GUIDE_PROVIDER_MIN = 33554432,BPC_GUIDE_PROVIDER_MAX = 50331647,BPC_GUIDE_ADAPTER_MIN = 50331648,BPC_GUIDE_ADAPTER_MAX = 67108863,BPC_CATEGORY_BPC = 16777216,BPC_CATEGORY_PROVIDER = 33554432,BPC_CATEGORY_ADAPTER = 50331648,BPC_STATUS_CONNECTED = 1,BPC_STATUS_QUEUED = 2,BPC_STATUS_ACTIVE = 3,BPC_STATUS_DISCONNECTED = 4,BPC_STATUS_OVERFLOW = 5,BPC_STATUS_DATA_STOP = 6,BPC_STATUS_DATA_START = 7,BPC_STATUS_DATA_ERROR = 8,};
enum MACRO_BUFFER_SIZE {READ_ATTRIBUTE_BUFFER_SIZE = 512,IDENTIFY_BUFFER_SIZE = 512,READ_THRESHOLD_BUFFER_SIZE = 512,SMART_LOG_SECTOR_SIZE = 512,};
enum MACRO_BUGCODE_PSS {BUGCODE_PSS_MESSAGE = 0x40000082,};
enum MACRO_BUGCODE_USB {BUGCODE_USB_DRIVER = 0xFE,};
enum MACRO_CCHFORMNAME {CCHFORMNAME = 32,};
enum MACRO_CC_NOPRECNV {CC_NOPRECNV = 0xFFFF,CC_DEFAULT = 0x0,CC_CP437 = 0xFFFFFFFF,CC_CP850 = 0xFFFFFFFE,CC_CP863 = 0xFFFFFFFD,CC_BIG5 = 0xFFFFFFF6,CC_ISC = 0xFFFFFFF5,CC_JIS = 0xFFFFFFF4,CC_JIS_ANK = 0xFFFFFFF3,CC_NS86 = 0xFFFFFFF2,CC_TCA = 0xFFFFFFF1,CC_GB2312 = 0xFFFFFFF0,CC_SJIS = 0xFFFFFFEF,CC_WANSUNG = 0xFFFFFFEE,};
enum MACRO_CDM_CONVERT {CDM_CONVERT = 0x1,CDM_CONVERT351 = 0x2,CDM_DRIVER_DEFAULT = 0x4,};
enum MACRO_CERT_CREATE {CERT_CREATE_SELFSIGN_NO_SIGN = 1,CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2,};
enum MACRO_CERT_SIMPLE {CERT_SIMPLE_NAME_STR = 1,CERT_OID_NAME_STR = 2,CERT_X500_NAME_STR = 3,CERT_NAME_STR_SEMICOLON_FLAG = 1073741824,CERT_NAME_STR_NO_PLUS_FLAG = 536870912,CERT_NAME_STR_NO_QUOTING_FLAG = 268435456,CERT_NAME_STR_CRLF_FLAG = 134217728,CERT_NAME_STR_COMMA_FLAG = 67108864,CERT_NAME_STR_REVERSE_FLAG = 33554432,CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,CERT_NAME_EMAIL_TYPE = 1,CERT_NAME_RDN_TYPE = 2,CERT_NAME_ATTR_TYPE = 3,CERT_NAME_SIMPLE_DISPLAY_TYPE = 4,CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5,CERT_NAME_DNS_TYPE = 6,CERT_NAME_URL_TYPE = 7,CERT_NAME_UPN_TYPE = 8,CERT_NAME_ISSUER_FLAG = 1,CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536,};
enum MACRO_CERT_VERIFY {CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 0x1,CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 0x2,CERT_VERIFY_NO_TIME_CHECK_FLAG = 0x4,CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 0x8,CERT_VERIFY_UPDATED_CTL_FLAG = 0x1,CERT_CONTEXT_REVOCATION_TYPE = 0x1,CERT_VERIFY_REV_CHAIN_FLAG = 0x1,CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 0x2,CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 0x4,CERT_UNICODE_IS_RDN_ATTRS_FLAG = 0x1,CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 0x2,};
enum MACRO_CLR_HILIGHT {CLR_HILIGHT = -16777216,};
enum MACRO_COMPRESSION {COMPRESSION_FORMAT_NONE = 0x0,COMPRESSION_FORMAT_DEFAULT = 0x1,COMPRESSION_FORMAT_LZNT1 = 0x2,COMPRESSION_ENGINE_STANDARD = 0x0,COMPRESSION_ENGINE_MAXIMUM = 0x100,COMPRESSION_ENGINE_HIBER = 0x200,};
enum MACRO_CONTEXT_OID {CONTEXT_OID_CERTIFICATE = 1,CONTEXT_OID_CRL = 2,CONTEXT_OID_CTL = 3,CONTEXT_OID_PKCS7 = 4,CONTEXT_OID_CAPI2_ANY = 5,};
enum MACRO_CONVERT10_S {CONVERT10_S_NO_PRESENTATION = 0x401C0,};
enum MACRO_CO_E_SERVER {CO_E_SERVER_STOPPING = 0x80080008,};
enum MACRO_CPSFUNC_ADD {CPSFUNC_ADD_PCOMPROPSHEETUI = 2,CPSFUNC_ADD_PFNPROPSHEETUI = 4,CPSFUNC_LOAD_CPSUI_STRING = 11,CPSFUNC_ADD_PROPSHEETPAGE = 15,CPSFUNC_INSERT_PSUIPAGE = 16,CPSFUNC_SET_PSUIPAGE_TITLE = 18,};
enum MACRO_CRYPT_FIRST {CRYPT_FIRST = 1,CRYPT_NEXT = 2,CRYPT_SGC_ENUM = 4,CRYPT_IMPL_HARDWARE = 1,CRYPT_IMPL_SOFTWARE = 2,CRYPT_IMPL_MIXED = 3,CRYPT_IMPL_UNKNOWN = 4,CRYPT_IMPL_REMOVABLE = 8,CRYPT_SEC_DESCR = 1,CRYPT_PSTORE = 2,CRYPT_UI_PROMPT = 4,CRYPT_FLAG_PCT1 = 1,CRYPT_FLAG_SSL2 = 2,CRYPT_FLAG_SSL3 = 4,CRYPT_FLAG_TLS1 = 8,CRYPT_FLAG_IPSEC = 16,CRYPT_FLAG_SIGNING = 32,CRYPT_SGC = 1,CRYPT_FASTSGC = 2,};
enum MACRO_CRYPT_KEYID {CRYPT_KEYID_MACHINE_FLAG = 0x20,CRYPT_KEYID_ALLOC_FLAG = 0x8000,CRYPT_KEYID_DELETE_FLAG = 0x10,CRYPT_KEYID_SET_NEW_FLAG = 0x2000,};
enum MACRO_CUSTOMPARAM {CUSTOMPARAM_WIDTH = 0,CUSTOMPARAM_HEIGHT = 1,CUSTOMPARAM_WIDTHOFFSET = 2,CUSTOMPARAM_HEIGHTOFFSET = 3,CUSTOMPARAM_ORIENTATION = 4,CUSTOMPARAM_MAX = 5,};
enum MACRO_D3DHALSTATE {D3DHALSTATE_GET_TRANSFORM = 0x1,D3DHALSTATE_GET_LIGHT = 0x2,D3DHALSTATE_GET_RENDER = 0x4,};
enum MACRO_D3DLINECAPS {D3DLINECAPS_TEXTURE = 0x1,D3DLINECAPS_ZTEST = 0x2,D3DLINECAPS_BLEND = 0x4,D3DLINECAPS_ALPHACMP = 0x8,D3DLINECAPS_FOG = 0x10,};
enum MACRO_D3DNTHALDP2 {D3DNTHALDP2_USERMEMVERTICES = 0x1,D3DNTHALDP2_EXECUTEBUFFER = 0x2,D3DNTHALDP2_SWAPVERTEXBUFFER = 0x4,D3DNTHALDP2_SWAPCOMMANDBUFFER = 0x8,D3DNTHALDP2_REQVERTEXBUFSIZE = 0x10,D3DNTHALDP2_REQCOMMANDBUFSIZE = 0x20,D3DNTHALDP2_VIDMEMVERTEXBUF = 0x40,D3DNTHALDP2_VIDMEMCOMMANDBUF = 0x80,};
enum MACRO_D3DPCMPCAPS {D3DPCMPCAPS_NEVER = 0x1,D3DPCMPCAPS_LESS = 0x2,D3DPCMPCAPS_EQUAL = 0x4,D3DPCMPCAPS_LESSEQUAL = 0x8,D3DPCMPCAPS_GREATER = 0x10,D3DPCMPCAPS_NOTEQUAL = 0x20,D3DPCMPCAPS_GREATEREQUAL = 0x40,D3DPCMPCAPS_ALWAYS = 0x80,};
enum MACRO_D3DVTXPCAPS {D3DVTXPCAPS_TEXGEN = 0x1,D3DVTXPCAPS_MATERIALSOURCE7 = 0x2,D3DVTXPCAPS_DIRECTIONALLIGHTS = 0x8,D3DVTXPCAPS_POSITIONALLIGHTS = 0x10,D3DVTXPCAPS_LOCALVIEWER = 0x20,D3DVTXPCAPS_TWEENING = 0x40,D3DVTXPCAPS_NO_VSDT_UBYTE4 = 0x80,};
enum MACRO_DBG_VERBOSE {DBG_VERBOSE = 1,DBG_TERSE = 2,DBG_WARNING = 3,DBG_ERROR = 4,DBG_RIP = 5,};
enum MACRO_DC_HASDEFID {DC_HASDEFID = 0x534B,};
enum MACRO_DDRAWIVPORT {DDRAWIVPORT_ON = 0x1,DDRAWIVPORT_SOFTWARE_AUTOFLIP = 0x2,DDRAWIVPORT_COLORKEYANDINTERP = 0x4,DDRAWIVPORT_NOKERNELHANDLES = 0x8,DDRAWIVPORT_SOFTWARE_BOB = 0x10,DDRAWIVPORT_VBION = 0x20,DDRAWIVPORT_VIDEOON = 0x40,};
enum MACRO_DDVPCONNECT {DDVPCONNECT_DOUBLECLOCK = 0x1,DDVPCONNECT_VACT = 0x2,DDVPCONNECT_INVERTPOLARITY = 0x4,DDVPCONNECT_DISCARDSVREFDATA = 0x8,DDVPCONNECT_HALFLINE = 0x10,DDVPCONNECT_INTERLACED = 0x20,DDVPCONNECT_SHAREEVEN = 0x40,DDVPCONNECT_SHAREODD = 0x80,};
enum MACRO_DEBUG_EVENT {EXCEPTION_DEBUG_EVENT = 1,CREATE_THREAD_DEBUG_EVENT = 2,CREATE_PROCESS_DEBUG_EVENT = 3,EXIT_THREAD_DEBUG_EVENT = 4,EXIT_PROCESS_DEBUG_EVENT = 5,LOAD_DLL_DEBUG_EVENT = 6,UNLOAD_DLL_DEBUG_EVENT = 7,OUTPUT_DEBUG_STRING_EVENT = 8,RIP_EVENT = 9,};
enum MACRO_DIRECTSOUND {DIRECTSOUND_VERSION = 0x800,};
enum MACRO_DISPID_XOBJ {DISPID_XOBJ_MIN = 0x10000,DISPID_XOBJ_MAX = 0x1FFFF,DISPID_XOBJ_BASE = 0x10000,DISPID_XMLELEMENTCOLLECTION = 0x10000,DISPID_XMLELEMENTCOLLECTION_LENGTH = 0x10001,DISPID_XMLELEMENTCOLLECTION_NEWENUM = 0xFFFFFFFC,DISPID_XMLELEMENTCOLLECTION_ITEM = 0x10003,DISPID_XMLDOCUMENT = 0x10064,DISPID_XMLDOCUMENT_ROOT = 0x10065,DISPID_XMLDOCUMENT_FILESIZE = 0x10066,DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = 0x10067,DISPID_XMLDOCUMENT_FILEUPDATEDDATE = 0x10068,DISPID_XMLDOCUMENT_URL = 0x10069,DISPID_XMLDOCUMENT_MIMETYPE = 0x1006A,DISPID_XMLDOCUMENT_READYSTATE = 0x1006B,DISPID_XMLDOCUMENT_CREATEELEMENT = 0x1006C,DISPID_XMLDOCUMENT_CHARSET = 0x1006D,DISPID_XMLDOCUMENT_VERSION = 0x1006E,DISPID_XMLDOCUMENT_DOCTYPE = 0x1006F,DISPID_XMLDOCUMENT_DTDURL = 0x10070,DISPID_XMLDOCUMENT_ASYNC = 0x10071,DISPID_XMLDOCUMENT_CASEINSENSITIVE = 0x10072,DISPID_XMLELEMENT = 0x100C8,DISPID_XMLELEMENT_TAGNAME = 0x100C9,DISPID_XMLELEMENT_PARENT = 0x100CA,DISPID_XMLELEMENT_SETATTRIBUTE = 0x100CB,DISPID_XMLELEMENT_GETATTRIBUTE = 0x100CC,DISPID_XMLELEMENT_REMOVEATTRIBUTE = 0x100CD,DISPID_XMLELEMENT_CHILDREN = 0x100CE,DISPID_XMLELEMENT_TYPE = 0x100CF,DISPID_XMLELEMENT_TEXT = 0x100D0,DISPID_XMLELEMENT_ADDCHILD = 0x100D1,DISPID_XMLELEMENT_REMOVECHILD = 0x100D2,DISPID_XMLELEMENT_ATTRIBUTES = 0x100D3,DISPID_XMLNOTIFSINK = 0x1012C,DISPID_XMLNOTIFSINK_CHILDADDED = 0x1012D,DISPID_XMLATTRIBUTE = 0x10190,DISPID_XMLATTRIBUTE_NAME = 0x10191,DISPID_XMLATTRIBUTE_VALUE = 0x10192,};
enum MACRO_DISP_CHANGE {DISP_CHANGE_SUCCESSFUL = 0,DISP_CHANGE_RESTART = 1,DISP_CHANGE_FAILED = -1,DISP_CHANGE_BADMODE = -2,DISP_CHANGE_NOTUPDATED = -3,DISP_CHANGE_BADFLAGS = -4,DISP_CHANGE_BADPARAM = -5,DISP_CHANGE_BADDUALVIEW = -6,};
enum MACRO_DMICMMETHOD {DMICMMETHOD_NONE = 1,DMICMMETHOD_SYSTEM = 2,DMICMMETHOD_DRIVER = 3,DMICMMETHOD_DEVICE = 4,DMICMMETHOD_USER = 256,};
enum MACRO_DMSTATEFLAG {DMSTATEFLAG_APPLYTOALL = 0x1,};
enum MACRO_DMUS_VOLUME {DMUS_VOLUME_MAX = 2000,DMUS_VOLUME_MIN = -20000,};
enum MACRO_DM_ADVANCED {DM_ADVANCED = 0x10,DM_NOPERMISSION = 0x20,DM_USER_DEFAULT = 0x40,};
enum MACRO_DM_GETDEFID {DM_GETDEFID = 1024,DM_SETDEFID = 1025,DM_REPOSITION = 1026,};
enum MACRO_DRIVER_LEFT {DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS = 0xCB,};
enum MACRO_DRIVER_PAGE {DRIVER_PAGE_FAULT_IN_FREED_SPECIAL_POOL = 0xD5,DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 0xD6,DRIVER_UNMAPPING_INVALID_VIEW = 0xD7,DRIVER_USED_EXCESSIVE_PTES = 0xD8,};
enum MACRO_DSFXFLANGER {DSFXFLANGER_WAVE_TRIANGLE = 0,DSFXFLANGER_WAVE_SIN = 1,DSFXFLANGER_PHASE_MIN = 0,DSFXFLANGER_PHASE_MAX = 4,DSFXFLANGER_PHASE_NEG_180 = 0,DSFXFLANGER_PHASE_NEG_90 = 1,DSFXFLANGER_PHASE_ZERO = 2,DSFXFLANGER_PHASE_90 = 3,DSFXFLANGER_PHASE_180 = 4,};
enum MACRO_DUPLICATE_0 {DUPLICATE = 0x6,};
enum MACRO_EEInfoGCFRS {EEInfoGCFRS = 12,};
enum MACRO_ENABLECLASS {ENABLECLASS_QUERY = 0,ENABLECLASS_SUCCESS = 1,ENABLECLASS_FAILURE = 2,};
enum MACRO_EPSPRINTING {EPSPRINTING = 33,};
enum MACRO_ERROR_LABEL {ERROR_LABEL_UNREADABLE = 0x1,ERROR_LABEL_QUESTIONABLE = 0x2,ERROR_SLOT_NOT_PRESENT = 0x4,ERROR_DRIVE_NOT_INSTALLED = 0x8,ERROR_TRAY_MALFUNCTION = 0x10,ERROR_INIT_STATUS_NEEDED = 0x11,ERROR_UNHANDLED_ERROR = 0xFFFFFFFF,};
enum MACRO_EVENT_TRACE {EVENT_TRACE_TYPE_INFO = 0x0,EVENT_TRACE_TYPE_START = 0x1,EVENT_TRACE_TYPE_END = 0x2,EVENT_TRACE_TYPE_DC_START = 0x3,EVENT_TRACE_TYPE_DC_END = 0x4,EVENT_TRACE_TYPE_EXTENSION = 0x5,EVENT_TRACE_TYPE_REPLY = 0x6,EVENT_TRACE_TYPE_DEQUEUE = 0x7,EVENT_TRACE_TYPE_CHECKPOINT = 0x8,EVENT_TRACE_TYPE_RESERVED9 = 0x9,};
enum MACRO_FACILITY_NT {FACILITY_NT_BIT = 0x10000000,};
enum MACRO_FAPPCOMMAND {FAPPCOMMAND_MOUSE = 0x8000,FAPPCOMMAND_KEY = 0x0,FAPPCOMMAND_OEM = 0x1000,FAPPCOMMAND_MASK = 0xF000,};
enum MACRO_FD_NEGATIVE {FD_NEGATIVE_FONT = 1,FO_DEVICE_FONT = 1,};
enum MACRO_FD_READ_BIT {FD_READ_BIT = 0,FD_WRITE_BIT = 1,FD_OOB_BIT = 2,FD_ACCEPT_BIT = 3,FD_CONNECT_BIT = 4,FD_CLOSE_BIT = 5,FD_QOS_BIT = 6,FD_QOS = 64,FD_GROUP_QOS_BIT = 7,FD_GROUP_QOS = 128,FD_ROUTING_INTERFACE_CHANGE_BIT = 8,FD_ROUTING_INTERFACE_CHANGE = 256,FD_ADDRESS_LIST_CHANGE_BIT = 9,FD_ADDRESS_LIST_CHANGE = 512,FD_MAX_EVENTS = 10,FD_ALL_EVENTS = 1023,};
enum MACRO_FILEOPENORD {FILEOPENORD = 1536,};
enum MACRO_FILE_DEVICE {FILE_DEVICE_BEEP = 0x1,FILE_DEVICE_CD_ROM = 0x2,FILE_DEVICE_CD_ROM_FILE_SYSTEM = 0x3,FILE_DEVICE_CONTROLLER = 0x4,FILE_DEVICE_DATALINK = 0x5,FILE_DEVICE_DFS = 0x6,FILE_DEVICE_DISK = 0x7,FILE_DEVICE_DISK_FILE_SYSTEM = 0x8,FILE_DEVICE_FILE_SYSTEM = 0x9,FILE_DEVICE_INPORT_PORT = 0xA,FILE_DEVICE_KEYBOARD = 0xB,FILE_DEVICE_MAILSLOT = 0xC,FILE_DEVICE_MIDI_IN = 0xD,FILE_DEVICE_MIDI_OUT = 0xE,FILE_DEVICE_MOUSE = 0xF,FILE_DEVICE_MULTI_UNC_PROVIDER = 0x10,FILE_DEVICE_NAMED_PIPE = 0x11,FILE_DEVICE_NETWORK = 0x12,FILE_DEVICE_NETWORK_BROWSER = 0x13,FILE_DEVICE_NETWORK_FILE_SYSTEM = 0x14,FILE_DEVICE_NULL = 0x15,FILE_DEVICE_PARALLEL_PORT = 0x16,FILE_DEVICE_PHYSICAL_NETCARD = 0x17,FILE_DEVICE_PRINTER = 0x18,FILE_DEVICE_SCANNER = 0x19,FILE_DEVICE_SERIAL_MOUSE_PORT = 0x1A,FILE_DEVICE_SERIAL_PORT = 0x1B,FILE_DEVICE_SCREEN = 0x1C,FILE_DEVICE_SOUND = 0x1D,FILE_DEVICE_STREAMS = 0x1E,FILE_DEVICE_TAPE = 0x1F,FILE_DEVICE_TAPE_FILE_SYSTEM = 0x20,FILE_DEVICE_TRANSPORT = 0x21,FILE_DEVICE_UNKNOWN = 0x22,FILE_DEVICE_VIDEO = 0x23,FILE_DEVICE_VIRTUAL_DISK = 0x24,FILE_DEVICE_WAVE_IN = 0x25,FILE_DEVICE_WAVE_OUT = 0x26,FILE_DEVICE_8042_PORT = 0x27,FILE_DEVICE_NETWORK_REDIRECTOR = 0x28,FILE_DEVICE_BATTERY = 0x29,FILE_DEVICE_BUS_EXTENDER = 0x2A,FILE_DEVICE_MODEM = 0x2B,FILE_DEVICE_VDM = 0x2C,FILE_DEVICE_MASS_STORAGE = 0x2D,FILE_DEVICE_SMB = 0x2E,FILE_DEVICE_KS = 0x2F,FILE_DEVICE_CHANGER = 0x30,FILE_DEVICE_SMARTCARD = 0x31,FILE_DEVICE_ACPI = 0x32,FILE_DEVICE_DVD = 0x33,FILE_DEVICE_FULLSCREEN_VIDEO = 0x34,FILE_DEVICE_DFS_FILE_SYSTEM = 0x35,FILE_DEVICE_DFS_VOLUME = 0x36,FILE_DEVICE_SERENUM = 0x37,FILE_DEVICE_TERMSRV = 0x38,FILE_DEVICE_KSEC = 0x39,FILE_DEVICE_FIPS = 0x3A,FILE_DEVICE_INFINIBAND = 0x3B,};
enum MACRO_FILE_SYSTEM {FILE_SYSTEM = 0x22,FAT_FILE_SYSTEM = 0x23,NTFS_FILE_SYSTEM = 0x24,NPFS_FILE_SYSTEM = 0x25,CDFS_FILE_SYSTEM = 0x26,RDR_FILE_SYSTEM = 0x27,};
enum MACRO_FIND_ACTCTX {FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = 0x1,FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = 0x2,FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = 0x4,};
enum MACRO_FLUSHOUTPUT {FLUSHOUTPUT = 6,};
enum MACRO_FOURCC_RDSP {FOURCC_RDSP = 1347634258,};
enum MACRO_GCL_HICONSM {GCL_HICONSM = -34,};
enum MACRO_GCP_CLASSIN {GCP_CLASSIN = 0x80000,GCP_MAXEXTENT = 0x100000,GCP_JUSTIFYIN = 0x200000,GCP_DISPLAYZWG = 0x400000,GCP_SYMSWAPOFF = 0x800000,GCP_NUMERICOVERRIDE = 0x1000000,GCP_NEUTRALOVERRIDE = 0x2000000,GCP_NUMERICSLATIN = 0x4000000,GCP_NUMERICSLOCAL = 0x8000000,};
enum MACRO_GCP_JUSTIFY {GCP_JUSTIFY = 0x10000,};
enum MACRO_GETFACENAME {GETFACENAME = 513,};
enum MACRO_HDM_HITTEST {HDM_HITTEST = 4614,HDM_GETITEMRECT = 4615,HDM_SETIMAGELIST = 4616,HDM_GETIMAGELIST = 4617,HDM_ORDERTOINDEX = 4623,HDM_CREATEDRAGIMAGE = 4624,HDM_GETORDERARRAY = 4625,HDM_SETORDERARRAY = 4626,HDM_SETHOTDIVIDER = 4627,HDM_SETBITMAPMARGIN = 4628,HDM_GETBITMAPMARGIN = 4629,HDM_SETUNICODEFORMAT = 8197,HDM_GETUNICODEFORMAT = 8198,HDM_SETFILTERCHANGETIMEOUT = 4630,HDM_EDITFILTER = 4631,HDM_CLEARFILTER = 4632,};
enum MACRO_HIDP_STATUS {HIDP_STATUS_SUCCESS = 0x110000,HIDP_STATUS_NULL = 0x80110001,HIDP_STATUS_INVALID_PREPARSED_DATA = 0xC0110001,HIDP_STATUS_INVALID_REPORT_TYPE = 0xC0110002,HIDP_STATUS_INVALID_REPORT_LENGTH = 0xC0110003,HIDP_STATUS_USAGE_NOT_FOUND = 0xC0110004,HIDP_STATUS_VALUE_OUT_OF_RANGE = 0xC0110005,HIDP_STATUS_BAD_LOG_PHY_VALUES = 0xC0110006,HIDP_STATUS_BUFFER_TOO_SMALL = 0xC0110007,HIDP_STATUS_INTERNAL_ERROR = 0xC0110008,HIDP_STATUS_I8042_TRANS_UNKNOWN = 0xC0110009,HIDP_STATUS_INCOMPATIBLE_REPORT_ID = 0xC011000A,HIDP_STATUS_NOT_VALUE_ARRAY = 0xC011000B,HIDP_STATUS_IS_VALUE_ARRAY = 0xC011000C,HIDP_STATUS_DATA_INDEX_NOT_FOUND = 0xC011000D,HIDP_STATUS_DATA_INDEX_OUT_OF_RANGE = 0xC011000E,HIDP_STATUS_BUTTON_NOT_PRESSED = 0xC011000F,HIDP_STATUS_REPORT_DOES_NOT_EXIST = 0xC0110010,HIDP_STATUS_NOT_IMPLEMENTED = 0xC0110020,HIDP_STATUS_I8242_TRANS_UNKNOWN = 0xC0110009,};
enum MACRO_HOOK_BITBLT {HOOK_BITBLT = 0x1,HOOK_STRETCHBLT = 0x2,HOOK_PLGBLT = 0x4,HOOK_TEXTOUT = 0x8,HOOK_PAINT = 0x10,HOOK_STROKEPATH = 0x20,HOOK_FILLPATH = 0x40,HOOK_STROKEANDFILLPATH = 0x80,HOOK_LINETO = 0x100,HOOK_COPYBITS = 0x400,HOOK_MOVEPANNING = 0x800,HOOK_SYNCHRONIZE = 0x1000,HOOK_STRETCHBLTROP = 0x2000,HOOK_SYNCHRONIZEACCESS = 0x4000,HOOK_TRANSPARENTBLT = 0x8000,HOOK_ALPHABLEND = 0x10000,HOOK_GRADIENTFILL = 0x20000,HOOK_FLAGS = 0x3B5FF,};
enum MACRO_HTMAXBUTTON {HTMAXBUTTON = 9,};
enum MACRO_HTSIZEFIRST {HTSIZEFIRST = 10,HTSIZELAST = 17,};
enum MACRO_IDC_OFFLINE {IDC_OFFLINE_HAND = 103,};
enum MACRO_IDD_WIZEXTN {IDD_WIZEXTN_FIRST = 0x5000,IDD_WIZEXTN_LAST = 0x5100,};
enum MACRO_IMAGE_DEBUG {IMAGE_DEBUG_MISC_EXENAME = 1,IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756,};
enum MACRO_IME_SYSINFO {IME_SYSINFO_WINLOGON = 0x1,IME_SYSINFO_WOW16 = 0x2,};
enum MACRO_INFOTIPSIZE {INFOTIPSIZE = 1024,};
enum MACRO_INSPSUIPAGE {INSPSUIPAGE_MODE_BEFORE = 0,INSPSUIPAGE_MODE_AFTER = 1,INSPSUIPAGE_MODE_FIRST_CHILD = 2,INSPSUIPAGE_MODE_LAST_CHILD = 3,INSPSUIPAGE_MODE_INDEX = 4,};
enum MACRO_IO_ERR_PORT {IO_ERR_PORT_TIMEOUT = 0xC0040075,IO_WARNING_BUS_RESET = 0x80040076,IO_INFO_THROTTLE_COMPLETE = 0x40040077,};
enum MACRO_JOB_CONTROL {JOB_CONTROL_PAUSE = 1,JOB_CONTROL_RESUME = 2,JOB_CONTROL_CANCEL = 3,JOB_CONTROL_RESTART = 4,JOB_CONTROL_DELETE = 5,JOB_CONTROL_SENT_TO_PRINTER = 6,JOB_CONTROL_LAST_PAGE_EJECTED = 7,JOB_STATUS_PAUSED = 1,JOB_STATUS_ERROR = 2,JOB_STATUS_DELETING = 4,JOB_STATUS_SPOOLING = 8,JOB_STATUS_PRINTING = 16,JOB_STATUS_OFFLINE = 32,JOB_STATUS_PAPEROUT = 64,JOB_STATUS_PRINTED = 128,JOB_STATUS_DELETED = 256,JOB_STATUS_BLOCKED_DEVQ = 512,JOB_STATUS_USER_INTERVENTION = 1024,JOB_STATUS_RESTART = 2048,JOB_STATUS_COMPLETE = 4096,JOB_POSITION_UNSPECIFIED = 0,};
enum MACRO_JOYSTICKID1 {JOYSTICKID1 = 0,JOYSTICKID2 = 1,};
enum MACRO_KERB_TICKET {KERB_TICKET_FLAGS_reserved = 0x80000000,KERB_TICKET_FLAGS_forwardable = 0x40000000,KERB_TICKET_FLAGS_forwarded = 0x20000000,KERB_TICKET_FLAGS_proxiable = 0x10000000,KERB_TICKET_FLAGS_proxy = 0x8000000,KERB_TICKET_FLAGS_may_postdate = 0x4000000,KERB_TICKET_FLAGS_postdated = 0x2000000,KERB_TICKET_FLAGS_invalid = 0x1000000,KERB_TICKET_FLAGS_renewable = 0x800000,KERB_TICKET_FLAGS_initial = 0x400000,KERB_TICKET_FLAGS_pre_authent = 0x200000,KERB_TICKET_FLAGS_hw_authent = 0x100000,KERB_TICKET_FLAGS_ok_as_delegate = 0x40000,KERB_TICKET_FLAGS_name_canonicalize = 0x10000,KERB_TICKET_FLAGS_reserved1 = 0x1,};
enum MACRO_KERNEL_DATA {KERNEL_DATA_INPAGE_ERROR = 0x7A,};
enum MACRO_KERNEL_MODE {KERNEL_MODE_EXCEPTION_NOT_HANDLED = 0x8E,KERNEL_MODE_EXCEPTION_NOT_HANDLED_M = 0x1000008E,};
enum MACRO_KSALLOCATOR {KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER = 0x1,KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY = 0x2,KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY = 0x4,KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE = 0x8,KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY = 0x80000000,KSALLOCATOR_OPTIONF_COMPATIBLE = 0x1,KSALLOCATOR_OPTIONF_SYSTEM_MEMORY = 0x2,KSALLOCATOR_OPTIONF_VALID = 0x3,KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT = 0x10,KSALLOCATOR_FLAG_DEVICE_SPECIFIC = 0x20,KSALLOCATOR_FLAG_CAN_ALLOCATE = 0x40,KSALLOCATOR_FLAG_INSIST_ON_FRAMESIZE_RATIO = 0x80,KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY = 0x100,KSALLOCATOR_FLAG_MULTIPLE_OUTPUT = 0x200,KSALLOCATOR_FLAG_CYCLE = 0x400,KSALLOCATOR_FLAG_ALLOCATOR_EXISTS = 0x800,KSALLOCATOR_FLAG_INDEPENDENT_RANGES = 0x1000,KSALLOCATOR_FLAG_ATTENTION_STEPPING = 0x2000,};
enum MACRO_KSATTRIBUTE {KSATTRIBUTE_REQUIRED = 0x1,};
enum MACRO_KSDATARANGE {KSDATARANGE_BIT_ATTRIBUTES = 1,KSDATARANGE_ATTRIBUTES = 2,KSDATARANGE_BIT_REQUIRED_ATTRIBUTES = 2,KSDATARANGE_REQUIRED_ATTRIBUTES = 4,};
enum MACRO_KSDSOUND_3D {KSDSOUND_3D_MODE_NORMAL = 0x0,KSDSOUND_3D_MODE_HEADRELATIVE = 0x1,KSDSOUND_3D_MODE_DISABLE = 0x2,KSDSOUND_BUFFER_CTRL_HRTF_3D = 0x40000000,};
enum MACRO_KSFRAMETIME {KSFRAMETIME_VARIABLESIZE = 0x1,};
enum MACRO_LANG_SYSTEM {LANG_SYSTEM_DEFAULT = 2048,LANG_USER_DEFAULT = 1024,};
enum MACRO_LM20_DEVLEN {LM20_DEVLEN = 8,};
enum MACRO_LM20_UNCLEN {LM20_UNCLEN = 17,};
enum MACRO_LOGON_GRACE {LOGON_GRACE_LOGON = 0x1000000,};
enum MACRO_LOGON_GUEST {LOGON_GUEST = 0x1,LOGON_NOENCRYPTION = 0x2,LOGON_CACHED_ACCOUNT = 0x4,LOGON_USED_LM_PASSWORD = 0x8,LOGON_EXTRA_SIDS = 0x20,LOGON_SUBAUTH_SESSION_KEY = 0x40,LOGON_SERVER_TRUST_ACCOUNT = 0x80,LOGON_NTLMV2_ENABLED = 0x100,LOGON_RESOURCE_GROUPS = 0x200,LOGON_PROFILE_PATH_RETURNED = 0x400,};
enum MACRO_LVM_ARRANGE {LVM_ARRANGE = 4118,LVM_EDITLABELA = 4119,LVM_EDITLABELW = 4214,LVM_EDITLABEL = 4119,LVM_GETEDITCONTROL = 4120,};
enum MACRO_LVM_HITTEST {LVM_HITTEST = 4114,LVM_ENSUREVISIBLE = 4115,LVM_SCROLL = 4116,LVM_REDRAWITEMS = 4117,};
enum MACRO_LVM_SETVIEW {LVM_SETVIEW = 4238,LVM_GETVIEW = 4239,};
enum MACRO_LVN_KEYDOWN {LVN_KEYDOWN = -155,LVN_MARQUEEBEGIN = -156,};
enum MACRO_MAXCHARSETS {MAXCHARSETS = 16,};
enum MACRO_MAXLONGLONG {MAXLONGLONG = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_MAXPNAMELEN {MAXPNAMELEN = 32,MAXERRORLENGTH = 256,};
enum MACRO_MAX_ADAPTER {MAX_ADAPTER_NAME = 128,};
enum MACRO_MAX_CPSFUNC {MAX_CPSFUNC_INDEX = 26,};
enum MACRO_MAX_DLGPAGE {MAX_DLGPAGE_COUNT = 64,};
enum MACRO_MAX_PROFILE {MAX_PROFILE_LEN = 80,};
enum MACRO_MCA_WARNING {MCA_WARNING_CMC_THRESHOLD_EXCEEDED = 0x8005006D,MCA_WARNING_CPE_THRESHOLD_EXCEEDED = 0x8005006E,MCA_WARNING_CPU_THERMAL_THROTTLED = 0x8005006F,MCA_INFO_CPU_THERMAL_THROTTLING_REMOVED = 0x40050070,MCA_WARNING_CPU = 0x80050071,MCA_ERROR_CPU = 0xC0050072,MCA_INFO_NO_MORE_CORRECTED_ERROR_LOGS = 0x40050073,MCA_INFO_MEMORY_PAGE_MARKED_BAD = 0x40050074,};
enum MACRO_MCIWNDOPENF {MCIWNDOPENF_NEW = 0x1,};
enum MACRO_MDMSPKRFLAG {MDMSPKRFLAG_OFF = 0x1,MDMSPKRFLAG_DIAL = 0x2,MDMSPKRFLAG_ON = 0x4,MDMSPKRFLAG_CALLSETUP = 0x8,};
enum MACRO_MEMORY_READ {MEMORY_READ_ERROR = 0x1,};
enum MACRO_MM_JOY1MOVE {MM_JOY1MOVE = 0x3A0,MM_JOY2MOVE = 0x3A1,MM_JOY1ZMOVE = 0x3A2,MM_JOY2ZMOVE = 0x3A3,MM_JOY1BUTTONDOWN = 0x3B5,MM_JOY2BUTTONDOWN = 0x3B6,MM_JOY1BUTTONUP = 0x3B7,MM_JOY2BUTTONUP = 0x3B8,MM_MCINOTIFY = 0x3B9,MM_WOM_OPEN = 0x3BB,MM_WOM_CLOSE = 0x3BC,MM_WOM_DONE = 0x3BD,MM_WIM_OPEN = 0x3BE,MM_WIM_CLOSE = 0x3BF,MM_WIM_DATA = 0x3C0,MM_MIM_OPEN = 0x3C1,MM_MIM_CLOSE = 0x3C2,MM_MIM_DATA = 0x3C3,MM_MIM_LONGDATA = 0x3C4,MM_MIM_ERROR = 0x3C5,MM_MIM_LONGERROR = 0x3C6,MM_MOM_OPEN = 0x3C7,MM_MOM_CLOSE = 0x3C8,MM_MOM_DONE = 0x3C9,MM_DRVM_OPEN = 0x3D0,MM_DRVM_CLOSE = 0x3D1,MM_DRVM_DATA = 0x3D2,MM_DRVM_ERROR = 0x3D3,MM_STREAM_OPEN = 0x3D4,MM_STREAM_CLOSE = 0x3D5,MM_STREAM_DONE = 0x3D6,MM_STREAM_ERROR = 0x3D7,MM_MOM_POSITIONCB = 0x3CA,MM_MCISIGNAL = 0x3CB,MM_MIM_MOREDATA = 0x3CC,MM_MIXM_LINE_CHANGE = 0x3D0,MM_MIXM_CONTROL_CHANGE = 0x3D1,};
enum MACRO_MM_MAX_AXES {MM_MAX_AXES_NAMELEN = 16,};
enum MACRO_MOUSEEVENTF {MOUSEEVENTF_MOVE = 0x1,MOUSEEVENTF_LEFTDOWN = 0x2,MOUSEEVENTF_LEFTUP = 0x4,MOUSEEVENTF_RIGHTDOWN = 0x8,MOUSEEVENTF_RIGHTUP = 0x10,MOUSEEVENTF_MIDDLEDOWN = 0x20,MOUSEEVENTF_MIDDLEUP = 0x40,MOUSEEVENTF_XDOWN = 0x80,MOUSEEVENTF_XUP = 0x100,MOUSEEVENTF_WHEEL = 0x800,MOUSEEVENTF_VIRTUALDESK = 0x4000,MOUSEEVENTF_ABSOLUTE = 0x8000,};
enum MACRO_MOUSETRAILS {MOUSETRAILS = 39,};
enum MACRO_MOUSE_MOVED {MOUSE_MOVED = 0x1,};
enum MACRO_MSGF_DDEMGR {MSGF_DDEMGR = 0x8001,};
enum MACRO_MUTEX_LEVEL {MUTEX_LEVEL_NUMBER_VIOLATION = 0xD,};
enum MACRO_NANOSECONDS {NANOSECONDS = 10000000,};
enum MACRO_NCBDGRECVBC {NCBDGRECVBC = 0x23,};
enum MACRO_NCBDGSENDBC {NCBDGSENDBC = 0x22,};
enum MACRO_NCBFINDNAME {NCBFINDNAME = 0x78,};
enum MACRO_NDIS_DEVICE {NDIS_DEVICE_WAKE_UP_ENABLE = 0x1,NDIS_DEVICE_WAKE_ON_PATTERN_MATCH_ENABLE = 0x2,NDIS_DEVICE_WAKE_ON_MAGIC_PACKET_ENABLE = 0x4,};
enum MACRO_NDIS_PACKET {NDIS_PACKET_TYPE_DIRECTED = 0x1,NDIS_PACKET_TYPE_MULTICAST = 0x2,NDIS_PACKET_TYPE_ALL_MULTICAST = 0x4,NDIS_PACKET_TYPE_BROADCAST = 0x8,NDIS_PACKET_TYPE_SOURCE_ROUTING = 0x10,NDIS_PACKET_TYPE_PROMISCUOUS = 0x20,NDIS_PACKET_TYPE_SMT = 0x40,NDIS_PACKET_TYPE_ALL_LOCAL = 0x80,NDIS_PACKET_TYPE_GROUP = 0x1000,NDIS_PACKET_TYPE_ALL_FUNCTIONAL = 0x2000,NDIS_PACKET_TYPE_FUNCTIONAL = 0x4000,NDIS_PACKET_TYPE_MAC_FRAME = 0x8000,NDIS_RING_SIGNAL_LOSS = 0x8000,NDIS_RING_HARD_ERROR = 0x4000,NDIS_RING_SOFT_ERROR = 0x2000,NDIS_RING_TRANSMIT_BEACON = 0x1000,NDIS_RING_LOBE_WIRE_FAULT = 0x800,NDIS_RING_AUTO_REMOVAL_ERROR = 0x400,NDIS_RING_REMOVE_RECEIVED = 0x200,NDIS_RING_COUNTER_OVERFLOW = 0x100,NDIS_RING_SINGLE_STATION = 0x80,NDIS_RING_RING_RECOVERY = 0x40,NDIS_PROT_OPTION_ESTIMATED_LENGTH = 0x1,NDIS_PROT_OPTION_NO_LOOPBACK = 0x2,NDIS_PROT_OPTION_NO_RSVD_ON_RCVPKT = 0x4,NDIS_PROT_OPTION_SEND_RESTRICTED = 0x8,NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA = 0x1,NDIS_MAC_OPTION_RECEIVE_SERIALIZED = 0x2,NDIS_MAC_OPTION_TRANSFERS_NOT_PEND = 0x4,NDIS_MAC_OPTION_NO_LOOPBACK = 0x8,NDIS_MAC_OPTION_FULL_DUPLEX = 0x10,NDIS_MAC_OPTION_EOTX_INDICATION = 0x20,NDIS_MAC_OPTION_8021P_PRIORITY = 0x40,NDIS_MAC_OPTION_SUPPORTS_MAC_ADDRESS_OVERWRITE = 0x80,NDIS_MAC_OPTION_RECEIVE_AT_DPC = 0x100,NDIS_MAC_OPTION_8021Q_VLAN = 0x200,NDIS_MAC_OPTION_RESERVED = 0x80000000,NDIS_MEDIA_CAP_TRANSMIT = 0x1,NDIS_MEDIA_CAP_RECEIVE = 0x2,NDIS_CO_MAC_OPTION_DYNAMIC_LINK_SPEED = 0x1,};
enum MACRO_NETPROPERTY {NETPROPERTY_PERSISTENT = 1,};
enum MACRO_NLSKBD_INFO {NLSKBD_INFO_SEND_IME_NOTIFICATION = 0x1,NLSKBD_INFO_ACCESSIBILITY_KEYMAP = 0x2,NLSKBD_INFO_EMURATE_101_KEYBOARD = 0x10,NLSKBD_INFO_EMURATE_106_KEYBOARD = 0x20,};
enum MACRO_NONZEROLHND {NONZEROLHND = 2,};
enum MACRO_NONZEROLPTR {NONZEROLPTR = 0,};
enum MACRO_NOTIFY_TYPE {PRINTER_NOTIFY_TYPE = 0x0,JOB_NOTIFY_TYPE = 0x1,};
enum MACRO_NOTSRCERASE {NOTSRCERASE = 0x1100A6,};
enum MACRO_NUMRESERVED {NUMRESERVED = 106,};
enum MACRO_OPENCHANNEL {OPENCHANNEL = 4110,};
enum MACRO_PASSTHROUGH {PASSTHROUGH = 19,};
enum MACRO_PBS_MARQUEE {PBS_MARQUEE = 0x8,};
enum MACRO_PCI_OPTIONS {PCI_OPTIONS_USE_BIOS = 0x1,PCI_OPTIONS_USE_IRQ_STEERING = 0x2,};
enum MACRO_PDEVICESIZE {PDEVICESIZE = 26,};
enum MACRO_PIFNAMESIZE {PIFNAMESIZE = 30,};
enum MACRO_PP_ENUMALGS {PP_ENUMALGS = 1,PP_ENUMCONTAINERS = 2,PP_IMPTYPE = 3,PP_NAME = 4,PP_VERSION = 5,PP_CONTAINER = 6,PP_CHANGE_PASSWORD = 7,PP_KEYSET_SEC_DESCR = 8,PP_CERTCHAIN = 9,PP_KEY_TYPE_SUBTYPE = 10,PP_PROVTYPE = 16,PP_KEYSTORAGE = 17,PP_APPLI_CERT = 18,PP_SYM_KEYSIZE = 19,PP_SESSION_KEYSIZE = 20,PP_UI_PROMPT = 21,PP_ENUMALGS_EX = 22,PP_ENUMMANDROOTS = 25,PP_ENUMELECTROOTS = 26,PP_KEYSET_TYPE = 27,PP_ADMIN_PIN = 31,PP_KEYEXCHANGE_PIN = 32,PP_SIGNATURE_PIN = 33,PP_SIG_KEYSIZE_INC = 34,PP_KEYX_KEYSIZE_INC = 35,PP_UNIQUE_CONTAINER = 36,PP_SGC_INFO = 37,PP_USE_HARDWARE_RNG = 38,PP_KEYSPEC = 39,PP_ENUMEX_SIGNING_PROT = 40,PP_CRYPT_COUNT_KEY_USE = 41,};
enum MACRO_PRINTACTION {PRINTACTION_OPEN = 0,PRINTACTION_PROPERTIES = 1,PRINTACTION_NETINSTALL = 2,PRINTACTION_NETINSTALLLINK = 3,PRINTACTION_TESTPAGE = 4,PRINTACTION_OPENNETPRN = 5,};
enum MACRO_PRINTDLGORD {PRINTDLGORD = 1538,};
enum MACRO_PRINTER_ALL {PRINTER_ALL_ACCESS = 983052,PRINTER_READ = 131080,PRINTER_WRITE = 131080,PRINTER_EXECUTE = 131080,};
enum MACRO_PROCESS_HAS {PROCESS_HAS_LOCKED_PAGES = 0x76,};
enum MACRO_PROPSETFLAG {PROPSETFLAG_DEFAULT = 0,PROPSETFLAG_NONSIMPLE = 1,PROPSETFLAG_ANSI = 2,PROPSETFLAG_UNBUFFERED = 4,PROPSETFLAG_CASE_SENSITIVE = 8,};
enum MACRO_PROPSHEETUI {PROPSHEETUI_REASON_INIT = 0,PROPSHEETUI_REASON_GET_INFO_HEADER = 1,PROPSHEETUI_REASON_DESTROY = 2,PROPSHEETUI_REASON_SET_RESULT = 3,PROPSHEETUI_REASON_GET_ICON = 4,};
enum MACRO_QOS_GENERAL {QOS_GENERAL_ID_BASE = 2000,QOS_OBJECT_END_OF_LIST = 2001,QOS_OBJECT_SD_MODE = 2002,QOS_OBJECT_SHAPING_RATE = 2003,QOS_OBJECT_DESTADDR = 2004,};
enum MACRO_QOS_TRAFFIC {QOS_TRAFFIC_GENERAL_ID_BASE = 4000,QOS_OBJECT_DS_CLASS = 4001,QOS_OBJECT_TRAFFIC_CLASS = 4002,QOS_OBJECT_DIFFSERV = 4003,QOS_OBJECT_TCP_TRAFFIC = 4004,QOS_OBJECT_FRIENDLY_NAME = 4005,};
enum MACRO_REGISTERING {REGISTERING = 0x0,REGISTERED = 0x4,};
enum MACRO_REPLACEFILE {REPLACEFILE_WRITE_THROUGH = 0x1,REPLACEFILE_IGNORE_MERGE_ERRORS = 0x2,};
enum MACRO_RTL_ENCRYPT {RTL_ENCRYPT_MEMORY_SIZE = 8,RTL_ENCRYPT_OPTION_CROSS_PROCESS = 1,RTL_ENCRYPT_OPTION_SAME_LOGON = 2,};
enum MACRO_RTPATCHFLAG {RTPATCHFLAG_HASSEGS = 0x1,RTPATCHFLAG_HASINFO = 0x2,};
enum MACRO_SB_SETTEXTA {SB_SETTEXTA = 1025,SB_SETTEXTW = 1035,SB_GETTEXTA = 1026,SB_GETTEXTW = 1037,SB_GETTEXTLENGTHA = 1027,SB_GETTEXTLENGTHW = 1036,SB_GETTEXT = 1026,SB_SETTEXT = 1025,SB_GETTEXTLENGTH = 1027,SB_SETPARTS = 1028,SB_GETPARTS = 1030,SB_GETBORDERS = 1031,SB_SETMINHEIGHT = 1032,SB_SIMPLE = 1033,SB_GETRECT = 1034,SB_ISSIMPLE = 1038,SB_SETICON = 1039,SB_SETTIPTEXTA = 1040,SB_SETTIPTEXTW = 1041,SB_GETTIPTEXTA = 1042,SB_GETTIPTEXTW = 1043,SB_GETICON = 1044,SB_SETUNICODEFORMAT = 8197,SB_GETUNICODEFORMAT = 8198,};
enum MACRO_SB_SIMPLEID {SB_SIMPLEID = 0xFF,};
enum MACRO_SCARD_CLASS {SCARD_CLASS_VENDOR_INFO = 1,SCARD_CLASS_COMMUNICATIONS = 2,SCARD_CLASS_PROTOCOL = 3,SCARD_CLASS_POWER_MGMT = 4,SCARD_CLASS_SECURITY = 5,SCARD_CLASS_MECHANICAL = 6,SCARD_CLASS_VENDOR_DEFINED = 7,SCARD_CLASS_IFD_PROTOCOL = 8,SCARD_CLASS_ICC_STATE = 9,SCARD_CLASS_PERF = 32766,SCARD_CLASS_SYSTEM = 32767,SCARD_ATTR_VENDOR_NAME = 65792,SCARD_ATTR_VENDOR_IFD_TYPE = 65793,SCARD_ATTR_VENDOR_IFD_VERSION = 65794,SCARD_ATTR_VENDOR_IFD_SERIAL_NO = 65795,SCARD_ATTR_CHANNEL_ID = 131344,SCARD_ATTR_PROTOCOL_TYPES = 196896,SCARD_ATTR_DEFAULT_CLK = 196897,SCARD_ATTR_MAX_CLK = 196898,SCARD_ATTR_DEFAULT_DATA_RATE = 196899,SCARD_ATTR_MAX_DATA_RATE = 196900,SCARD_ATTR_MAX_IFSD = 196901,SCARD_ATTR_POWER_MGMT_SUPPORT = 262449,SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE = 328000,SCARD_ATTR_USER_AUTH_INPUT_DEVICE = 328002,SCARD_ATTR_CHARACTERISTICS = 393552,SCARD_ATTR_CURRENT_PROTOCOL_TYPE = 524801,SCARD_ATTR_CURRENT_CLK = 524802,SCARD_ATTR_CURRENT_F = 524803,SCARD_ATTR_CURRENT_D = 524804,SCARD_ATTR_CURRENT_N = 524805,SCARD_ATTR_CURRENT_W = 524806,SCARD_ATTR_CURRENT_IFSC = 524807,SCARD_ATTR_CURRENT_IFSD = 524808,SCARD_ATTR_CURRENT_BWT = 524809,SCARD_ATTR_CURRENT_CWT = 524810,SCARD_ATTR_CURRENT_EBC_ENCODING = 524811,SCARD_ATTR_EXTENDED_BWT = 524812,SCARD_ATTR_ICC_PRESENCE = 590592,SCARD_ATTR_ICC_INTERFACE_STATUS = 590593,SCARD_ATTR_CURRENT_IO_STATE = 590594,SCARD_ATTR_ATR_STRING = 590595,SCARD_ATTR_ICC_TYPE_PER_ATR = 590596,SCARD_ATTR_ESC_RESET = 499712,SCARD_ATTR_ESC_CANCEL = 499715,SCARD_ATTR_ESC_AUTHREQUEST = 499717,SCARD_ATTR_MAXINPUT = 499719,SCARD_ATTR_DEVICE_UNIT = 2147418113,SCARD_ATTR_DEVICE_IN_USE = 2147418114,SCARD_ATTR_DEVICE_FRIENDLY_NAME_A = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME_A = 2147418116,SCARD_ATTR_DEVICE_FRIENDLY_NAME_W = 2147418117,SCARD_ATTR_DEVICE_SYSTEM_NAME_W = 2147418118,SCARD_ATTR_SUPRESS_T1_IFS_REQUEST = 2147418119,SCARD_PERF_NUM_TRANSMISSIONS = 2147352577,SCARD_PERF_BYTES_TRANSMITTED = 2147352578,SCARD_PERF_TRANSMISSION_TIME = 2147352579,SCARD_ATTR_DEVICE_FRIENDLY_NAME = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME = 2147418116,SCARD_T0_HEADER_LENGTH = 7,SCARD_T0_CMD_LENGTH = 5,SCARD_T1_PROLOGUE_LENGTH = 3,SCARD_T1_EPILOGUE_LENGTH = 2,SCARD_T1_MAX_IFS = 254,SCARD_UNKNOWN = 0,SCARD_ABSENT = 1,SCARD_PRESENT = 2,SCARD_SWALLOWED = 3,SCARD_POWERED = 4,SCARD_NEGOTIABLE = 5,SCARD_SPECIFIC = 6,SCARD_READER_SWALLOWS = 1,SCARD_READER_EJECTS = 2,SCARD_READER_CONFISCATES = 4,SCARD_READER_TYPE_SERIAL = 1,SCARD_READER_TYPE_PARALELL = 2,SCARD_READER_TYPE_KEYBOARD = 4,SCARD_READER_TYPE_SCSI = 8,SCARD_READER_TYPE_IDE = 16,SCARD_READER_TYPE_USB = 32,SCARD_READER_TYPE_PCMCIA = 64,SCARD_READER_TYPE_VENDOR = 240,SCARD_AUTOALLOCATE = 4294967295,SCARD_SCOPE_USER = 0,SCARD_SCOPE_TERMINAL = 1,SCARD_SCOPE_SYSTEM = 2,SCARD_PROVIDER_PRIMARY = 1,SCARD_PROVIDER_CSP = 2,SCARD_STATE_UNAWARE = 0,SCARD_STATE_IGNORE = 1,SCARD_STATE_CHANGED = 2,SCARD_STATE_UNKNOWN = 4,SCARD_STATE_UNAVAILABLE = 8,SCARD_STATE_EMPTY = 16,SCARD_STATE_PRESENT = 32,SCARD_STATE_ATRMATCH = 64,SCARD_STATE_EXCLUSIVE = 128,SCARD_STATE_INUSE = 256,SCARD_STATE_MUTE = 512,SCARD_STATE_UNPOWERED = 1024,SCARD_SHARE_EXCLUSIVE = 1,SCARD_SHARE_SHARED = 2,SCARD_SHARE_DIRECT = 3,SCARD_LEAVE_CARD = 0,SCARD_RESET_CARD = 1,SCARD_UNPOWER_CARD = 2,SCARD_EJECT_CARD = 3,};
enum MACRO_SERVICETYPE {SERVICETYPE_NOTRAFFIC = 0x0,SERVICETYPE_BESTEFFORT = 0x1,SERVICETYPE_CONTROLLEDLOAD = 0x2,SERVICETYPE_GUARANTEED = 0x3,SERVICETYPE_NETWORK_UNAVAILABLE = 0x4,SERVICETYPE_GENERAL_INFORMATION = 0x5,SERVICETYPE_NOCHANGE = 0x6,SERVICETYPE_NONCONFORMING = 0x9,SERVICETYPE_NETWORK_CONTROL = 0xA,SERVICETYPE_QUALITATIVE = 0xD,};
enum MACRO_SESSION_HAS {SESSION_HAS_VALID_POOL_ON_EXIT = 0xAB,};
enum MACRO_SETLINEJOIN {SETLINEJOIN = 22,};
enum MACRO_SET_SERVICE {SET_SERVICE_PARTIAL_SUCCESS = 0x1,};
enum MACRO_SIGNER_INFO {PKCS7_SIGNER_INFO = 500,CMS_SIGNER_INFO = 501,};
enum MACRO_SIZEPALETTE {SIZEPALETTE = 104,};
enum MACRO_SYNCHRONIZE {SYNCHRONIZE = 0x100000,};
enum MACRO_SYSTEM_EXIT {SYSTEM_EXIT_OWNED_MUTEX = 0x39,SYSTEM_UNWIND_PREVIOUS_USER = 0x3A,SYSTEM_SERVICE_EXCEPTION = 0x3B,};
enum MACRO_SYSTEM_SCAN {SYSTEM_SCAN_AT_RAISED_IRQL_CAUGHT_IMPROPER_DRIVER_UNLOAD = 0xD4,};
enum MACRO_TAPE_RETURN {TAPE_RETURN_STATISTICS = 0,TAPE_RETURN_ENV_INFO = 1,TAPE_RESET_STATISTICS = 2,};
enum MACRO_TBIF_APPEND {TBIF_APPEND = 0,TBIF_PREPEND = 1,TBIF_REPLACE = 2,TBIF_DEFAULT = 0,TBIF_INTERNETBAR = 65536,TBIF_STANDARDTOOLBAR = 131072,TBIF_NOTOOLBAR = 196608,};
enum MACRO_TCM_HITTEST {TCM_HITTEST = 4877,TCM_SETITEMEXTRA = 4878,TCM_ADJUSTRECT = 4904,TCM_SETITEMSIZE = 4905,TCM_REMOVEIMAGE = 4906,TCM_SETPADDING = 4907,TCM_GETROWCOUNT = 4908,TCM_GETTOOLTIPS = 4909,TCM_SETTOOLTIPS = 4910,TCM_GETCURFOCUS = 4911,TCM_SETCURFOCUS = 4912,TCM_SETMINTABWIDTH = 4913,TCM_DESELECTALL = 4914,TCM_HIGHLIGHTITEM = 4915,TCM_SETEXTENDEDSTYLE = 4916,TCM_GETEXTENDEDSTYLE = 4917,TCM_SETUNICODEFORMAT = 8197,TCM_GETUNICODEFORMAT = 8198,};
enum MACRO_TCN_KEYDOWN {TCN_KEYDOWN = -550,TCN_SELCHANGE = -551,TCN_SELCHANGING = -552,TCN_GETOBJECT = -553,TCN_FOCUSCHANGE = -554,};
enum MACRO_THREAD_BASE {THREAD_BASE_PRIORITY_LOWRT = 15,THREAD_BASE_PRIORITY_MAX = 2,THREAD_BASE_PRIORITY_MIN = -2,THREAD_BASE_PRIORITY_IDLE = -15,};
enum MACRO_TRANSPARENT {TRANSPARENT = 1,OPAQUE = 2,};
enum MACRO_UNMOUNTABLE {UNMOUNTABLE_BOOT_VOLUME = 0xED,};
enum MACRO_UNSUPPORTED {UNSUPPORTED_PROCESSOR = 0x5D,};
enum MACRO_VALIDATEUNC {VALIDATEUNC_NOUI = 0x2,VALIDATEUNC_CONNECT = 0x1,VALIDATEUNC_PRINT = 0x4,VALIDATEUNC_VALID = 0x7,};
enum MACRO_VALID_AUDIT {VALID_AUDIT_POLICY_BITS = 15,};
enum MACRO_WAVE_FILTER {WAVE_FILTER_UNKNOWN = 0x0,WAVE_FILTER_DEVELOPMENT = 0xFFFF,WAVE_FILTER_VOLUME = 0x1,WAVE_FILTER_ECHO = 0x2,};
enum MACRO_WAVE_FORMAT {WAVE_FORMAT_EXTENSIBLE = 0xFFFE,};
enum MACRO_WININETINFO {WININETINFO_OPTION_LOCK_HANDLE = 65534,};
enum MACRO_WMIGUID_ALL {WMIGUID_ALL_ACCESS = 1183743,};
enum MACRO_WM_COPYDATA {WM_COPYDATA = 0x4A,WM_CANCELJOURNAL = 0x4B,WM_NOTIFY = 0x4E,WM_INPUTLANGCHANGEREQUEST = 0x50,WM_INPUTLANGCHANGE = 0x51,WM_TCARD = 0x52,WM_HELP = 0x53,WM_USERCHANGED = 0x54,WM_NOTIFYFORMAT = 0x55,};
enum MACRO_WM_CTLCOLOR {WM_CTLCOLOR = 0x19,};
enum MACRO_WM_SETFOCUS {WM_SETFOCUS = 0x7,WM_KILLFOCUS = 0x8,WM_ENABLE = 0xA,WM_SETREDRAW = 0xB,WM_SETTEXT = 0xC,WM_GETTEXT = 0xD,WM_GETTEXTLENGTH = 0xE,WM_PAINT = 0xF,WM_CLOSE = 0x10,WM_QUERYENDSESSION = 0x11,WM_QUERYOPEN = 0x13,WM_ENDSESSION = 0x16,WM_QUIT = 0x12,WM_ERASEBKGND = 0x14,WM_SYSCOLORCHANGE = 0x15,WM_SHOWWINDOW = 0x18,WM_WININICHANGE = 0x1A,WM_SETTINGCHANGE = 0x1A,WM_DEVMODECHANGE = 0x1B,WM_ACTIVATEAPP = 0x1C,WM_FONTCHANGE = 0x1D,WM_TIMECHANGE = 0x1E,WM_CANCELMODE = 0x1F,WM_SETCURSOR = 0x20,WM_MOUSEACTIVATE = 0x21,WM_CHILDACTIVATE = 0x22,WM_QUEUESYNC = 0x23,WM_GETMINMAXINFO = 0x24,WM_PAINTICON = 0x26,WM_ICONERASEBKGND = 0x27,WM_NEXTDLGCTL = 0x28,WM_SPOOLERSTATUS = 0x2A,WM_DRAWITEM = 0x2B,WM_MEASUREITEM = 0x2C,WM_DELETEITEM = 0x2D,WM_VKEYTOITEM = 0x2E,WM_CHARTOITEM = 0x2F,WM_SETFONT = 0x30,WM_GETFONT = 0x31,WM_SETHOTKEY = 0x32,WM_GETHOTKEY = 0x33,WM_QUERYDRAGICON = 0x37,WM_COMPAREITEM = 0x39,WM_GETOBJECT = 0x3D,WM_COMPACTING = 0x41,WM_COMMNOTIFY = 0x44,WM_WINDOWPOSCHANGING = 0x46,WM_WINDOWPOSCHANGED = 0x47,WM_POWER = 0x48,};
enum MACRO_WRITE_WATCH {WRITE_WATCH_FLAG_RESET = 0x1,};
enum MACRO_WSAPROTOCOL {WSAPROTOCOL_LEN = 255,};
enum MACRO_comptypeDIB {comptypeDIB = 541215044,};
enum MACRO_formtypeAVI {formtypeAVI = 541677121,};
typedef struct _MCDALPHATESTSTATE MCDALPHATESTSTATE;
typedef struct _MCDDEPTHTESTSTATE MCDDEPTHTESTSTATE;
typedef struct _MCDPOINTDRAWSTATE MCDPOINTDRAWSTATE;
typedef struct tagMCI_GENERIC_PARMS MCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS MCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS MCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS MCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
typedef struct tagMENUGETOBJECTINFO MENUGETOBJECTINFO;
typedef struct _MENU_EVENT_RECORD MENU_EVENT_RECORD;
typedef struct _939B1A1D3305CA6F2D0B71D8D29A6AEF MESSAGEBOX_PARAMS;
typedef struct _MIB_IPMCAST_SCOPE MIB_IPMCAST_SCOPE;
typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE;
typedef struct tagMOUSEHOOKSTRUCTEX MOUSEHOOKSTRUCTEX;
typedef struct _MPR_IFTRANSPORT_0 MPR_IFTRANSPORT_0;
typedef struct _MSV1_0_LM20_LOGON MSV1_0_LM20_LOGON;
struct MergedCategorizer;
typedef struct _NABTS_BUFFER_LINE NABTS_BUFFER_LINE;
typedef struct tagNCCALCSIZE_PARAMS NCCALCSIZE_PARAMS;
typedef struct tagNMDATETIMEFORMATA NMDATETIMEFORMATA;
typedef struct tagNMDATETIMEFORMATW NMDATETIMEFORMATW;
typedef struct tagNMDATETIMESTRINGA NMDATETIMESTRINGA;
typedef struct tagNMDATETIMESTRINGW NMDATETIMESTRINGW;
typedef struct tagNMLVODSTATECHANGE NMLVODSTATECHANGE;
typedef struct tagNMTOOLTIPSCREATED NMTOOLTIPSCREATED;
typedef struct tagNONCLIENTMETRICSA NONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW NONCLIENTMETRICSW;
typedef struct tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;
typedef struct DRVCONFIGINFOEX *NPDRVCONFIGINFOEX;
typedef struct tagIMECHARPOSITION *NPIMECHARPOSITION;
typedef struct tagRECONVERTSTRING *NPRECONVERTSTRING;
typedef struct _OEM_DMEXTRAHEADER OEM_DMEXTRAHEADER;
typedef struct _OFFLOAD_ALGO_INFO OFFLOAD_ALGO_INFO;
typedef struct olicelpwaveformat_tag OLICELPWAVEFORMAT;
typedef struct tagOFN_NT4A OPENFILENAME_NT4A;
typedef struct tagOFN_NT4W OPENFILENAME_NT4W;
typedef struct tACMFILTERCHOOSEA *PACMFILTERCHOOSEA;
typedef struct tACMFILTERCHOOSEW *PACMFILTERCHOOSEW;
typedef struct tACMFORMATCHOOSEA *PACMFORMATCHOOSEA;
typedef struct tACMFORMATCHOOSEW *PACMFORMATCHOOSEW;
typedef unsigned short *PARAM_OFFSETTABLE;
typedef struct _ATTRIBUTE_INFO_1 *PATTRIBUTE_INFO_1;
typedef struct _ATTRIBUTE_INFO_2 *PATTRIBUTE_INFO_2;
typedef struct _ATTRIBUTE_INFO_3 *PATTRIBUTE_INFO_3;
typedef struct _BDA_CA_MODULE_UI *PBDA_CA_MODULE_UI;
typedef struct _BDA_IPv4_ADDRESS *PBDA_IPv4_ADDRESS;
typedef struct _BDA_IPv6_ADDRESS *PBDA_IPv6_ADDRESS;
typedef struct _BINARY_CONTAINER *PBINARY_CONTAINER;
typedef struct tagBITMAPCOREHEADER *PBITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER *PBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *PBITMAPINFOHEADER;
typedef struct _71B09FCCFB7FB16B05205AE0543E85F3 *PBUTTON_IMAGELIST;
typedef struct _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO *PCERT_POLICY_INFO;
typedef struct _CERT_USAGE_MATCH *PCERT_USAGE_MATCH;
typedef struct _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO *PCMSG_STREAM_INFO;
typedef struct _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES;
typedef struct _CRYPT_BLOB_ARRAY *PCRYPT_BLOB_ARRAY;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB;
typedef struct _DDSETSTATEININFO *PDDSETSTATEININFO;
typedef struct _DDTRANSFERININFO *PDDTRANSFERININFO;
typedef struct _DD_CLIPPER_LOCAL *PDD_CLIPPER_LOCAL;
typedef struct _DD_FLIPVPORTDATA *PDD_FLIPVPORTDATA;
typedef struct _DD_MAPMEMORYDATA *PDD_MAPMEMORYDATA;
typedef struct _DD_PALETTE_LOCAL *PDD_PALETTE_LOCAL;
typedef struct _DD_SURFACE_LOCAL *PDD_SURFACE_LOCAL;
typedef struct tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT;
typedef struct IDirect3DSurface8 *PDIRECT3DSURFACE8;
typedef struct IDirect3DTexture8 *PDIRECT3DTEXTURE8;
typedef struct _DISK_GEOMETRY_EX *PDISK_GEOMETRY_EX;
typedef struct _DISK_PERFORMANCE *PDISK_PERFORMANCE;
typedef struct tagEMRCREATEPALETTE *PEMRCREATEPALETTE;
typedef struct tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN;
typedef struct tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16;
typedef struct tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE;
typedef struct tagEMRSELECTPALETTE *PEMRSELECTPALETTE;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;
typedef struct tagEMRSETCOLORSPACE *PEMRSETCOLORSPACE;
typedef struct tagEMRSETICMPROFILE *PEMRSETICMPROFILE;
typedef struct tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT;
typedef struct tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS;
typedef struct tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;
typedef struct _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;
typedef struct _FD_DEVICEMETRICS *PFD_DEVICEMETRICS;
typedef struct _EA831C4C2E16EF6F2B7E490157D80D27 *PFIND_BY_SID_DATA;
typedef struct _FIND_NAME_BUFFER *PFIND_NAME_BUFFER;
typedef struct _FIND_NAME_HEADER *PFIND_NAME_HEADER;
typedef int ( *PFNLVGROUPCOMPARE)(int, int, void *);
typedef struct _HIDP_BUTTON_CAPS *PHIDP_BUTTON_CAPS;
typedef struct _HISTOGRAM_BUCKET *PHISTOGRAM_BUCKET;
typedef struct _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;
typedef struct _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;
typedef struct tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;
typedef struct _KERB_NET_ADDRESS *PKERB_NET_ADDRESS;
typedef struct _KEY_EVENT_RECORD *PKEY_EVENT_RECORD;
typedef struct _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE;
typedef struct _12A419A691843E3FACBCDACF473D8E54 *PKSAUDIO_MIXLEVEL;
typedef struct _1D3D1B49856810D80BCDEEA6F14E981E *PKSAUDIO_MIX_CAPS;
typedef struct _97C70B764F4B63B047CCB37F16214516 *PKSAUDIO_POSITION;
typedef struct _KSM_BDA_PIN_PAIR *PKSM_BDA_PIN_PAIR;
typedef struct _01091B9DEBEBC2354EBF1594EEF6BE89 *PKSPIN_CINSTANCES;
typedef struct _KSPROPERTY_SPHLI *PKSPROPERTY_SPHLI;
typedef struct _KSPROPERTY_SPPAL *PKSPROPERTY_SPPAL;
typedef struct _KSP_BDA_NODE_PIN *PKSP_BDA_NODE_PIN;
typedef struct _EA4AC72E281160164D445E15D4425ADE *PKSVPMAXPIXELRATE;
typedef struct _B62AAB724E8D7D841EB663A6FEE96A5E *PKS_FRAMING_RANGE;
typedef struct tagKS_MPEAUDIOINFO *PKS_MPEGAUDIOINFO;
typedef struct tag_KS_TRUECOLORINFO *PKS_TRUECOLORINFO;
typedef struct tagKS_VBIINFOHEADER *PKS_VBIINFOHEADER;
typedef struct _976F82B52AD5D008419379398D47AE46 *PMARK_HANDLE_INFO;
typedef struct tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS;
typedef struct _46B8CD9DF897759D0306203A2121EA8B *PMENUITEMTEMPLATE;
typedef struct _MIB_IPFORWARDROW *PMIB_IPFORWARDROW;
typedef struct _MIB_OPAQUE_QUERY *PMIB_OPAQUE_QUERY;
typedef struct _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO;
typedef struct _MIDL_SYNTAX_INFO *PMIDL_SYNTAX_INFO;
typedef struct tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS;
typedef struct _NDIS_802_11_SSID *PNDIS_802_11_SSID;
typedef struct NDIS_BPC_CONNECT *PNDIS_BPC_CONNECT;
typedef struct _NDIS_BPC_DEVICES *PNDIS_BPC_DEVICES;
typedef struct _NS_SERVICE_INFOA *PNS_SERVICE_INFOA;
typedef struct _NS_SERVICE_INFOW *PNS_SERVICE_INFOW;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;
typedef struct _OEMFONTINSTPARAM *POEMFONTINSTPARAM;
typedef struct _9B80566C9ECE6A73A5F898405A50FFFF *POPENCARDNAME_EXA;
typedef struct _A63D84EB732F4E602FF2E049D2D99B44 *POPENCARDNAME_EXW;
typedef struct _OSVERSIONINFOEXA *POSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW *POSVERSIONINFOEXW;
typedef struct _PERF_OBJECT_TYPE *PPERF_OBJECT_TYPE;
typedef struct _PROPSHEETUI_INFO *PPROPSHEETUI_INFO;
typedef struct _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W *PPROVIDOR_INFO_1W;
typedef struct _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W *PPROVIDOR_INFO_2W;
typedef struct _PSFEATURE_OUTPUT *PPSFEATURE_OUTPUT;
typedef struct _RAS_CONNECTION_0 *PRAS_CONNECTION_0;
typedef struct _RAS_CONNECTION_1 *PRAS_CONNECTION_1;
typedef struct _READCONTROLSPACE *PREADCONTROLSPACE;
typedef struct _PRINTER_DEFAULTSA PRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW PRINTER_DEFAULTSW;
typedef struct _PROPSHEETPAGEA_V1 PROPSHEETPAGEA_V1;
typedef struct _PROPSHEETPAGEA_V2 PROPSHEETPAGEA_V2;
typedef struct _PROPSHEETPAGEA PROPSHEETPAGEA_V3;
typedef struct _PROPSHEETPAGEW_V1 PROPSHEETPAGEW_V1;
typedef struct _PROPSHEETPAGEW_V2 PROPSHEETPAGEW_V2;
typedef struct _PROPSHEETPAGEW PROPSHEETPAGEW_V3;
typedef struct _RPC_SECURITY_QOS *PRPC_SECURITY_QOS;
typedef struct _SCARD_IO_REQUEST *PSCARD_IO_REQUEST;
typedef struct _SENDCMDOUTPARAMS *PSENDCMDOUTPARAMS;
typedef struct sockaddr_storage *PSOCKADDR_STORAGE;
typedef struct _SPC_SP_OPUS_INFO *PSPC_SP_OPUS_INFO;
typedef struct _SPLCLIENT_INFO_1 *PSPLCLIENT_INFO_1;
typedef struct _SPLCLIENT_INFO_2 *PSPLCLIENT_INFO_2;
typedef struct _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;
typedef struct _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS *PTOKEN_STATISTICS;
typedef struct _UNI_CODEPAGEINFO *PUNI_CODEPAGEINFO;
typedef struct _UNI_GLYPHSETDATA *PUNI_GLYPHSETDATA;
typedef struct _8363E2736332812C7A22E557719FD114 *PUSN_JOURNAL_DATA;
typedef struct _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;
typedef struct tagWNODE_EVENT_ITEM *PWNODE_EVENT_ITEM;
struct PublishDropTarget;
typedef struct _QOS_DIFFSERV_RULE QOS_DIFFSERV_RULE;
typedef struct _QOS_FRIENDLY_NAME QOS_FRIENDLY_NAME;
typedef struct _QOS_TRAFFIC_CLASS QOS_TRAFFIC_CLASS;
typedef struct _RASTERIZER_STATUS RASTERIZER_STATUS;
typedef struct _REMOTE_NAME_INFOA REMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW REMOTE_NAME_INFOW;
typedef struct tagRPC_EE_INFO_PARAM RPC_EE_INFO_PARAM;
typedef struct _RSVP_RESERVE_INFO RSVP_RESERVE_INFO;
typedef struct _SERVICE_ADDRESSES SERVICE_ADDRESSES;
typedef struct _SERVICE_TYPE_INFO SERVICE_TYPE_INFO;
typedef struct _SHELLEXECUTEINFOA SHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW SHELLEXECUTEINFOW;
typedef struct _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;
typedef struct _SPC_PE_IMAGE_DATA SPC_PE_IMAGE_DATA;
struct SWbemPrivilegeSet;
struct SWbemQualifierSet;
struct SearchAssistantOC;
struct ShellFolderViewOC;
enum SpectralInversion {BDA_SPECTRAL_INVERSION_NOT_SET = 0xFFFFFFFF,BDA_SPECTRAL_INVERSION_NOT_DEFINED = 0x0,BDA_SPECTRAL_INVERSION_AUTOMATIC = 0x1,BDA_SPECTRAL_INVERSION_NORMAL = 0x2,BDA_SPECTRAL_INVERSION_INVERTED = 0x3,BDA_SPECTRAL_INVERSION_MAX = 0x4,};
typedef struct _TAPE_GET_POSITION TAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION TAPE_SET_POSITION;
typedef struct _TC_IFC_DESCRIPTOR TC_IFC_DESCRIPTOR;
typedef struct _UFF_FONTDIRECTORY UFF_FONTDIRECTORY;
typedef struct _VK_TO_WCHAR_TABLE VK_TO_WCHAR_TABLE;
typedef struct _WINDOWS_IAS_QUERY WINDOWS_IAS_QUERY;
typedef struct tagWNODE_METHOD_ITEM WNODE_METHOD_ITEM;
typedef struct tagWNODE_SINGLE_ITEM WNODE_SINGLE_ITEM;
typedef struct _WSAPROTOCOL_INFOA WSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW WSAPROTOCOL_INFOW;
struct WbemBackupRestore;
struct WbemDCOMTransport;
struct WbemObjectTextSrc;
enum WbemPrivilegeEnum {wbemPrivilegeCreateToken = 0x1,wbemPrivilegePrimaryToken = 0x2,wbemPrivilegeLockMemory = 0x3,wbemPrivilegeIncreaseQuota = 0x4,wbemPrivilegeMachineAccount = 0x5,wbemPrivilegeTcb = 0x6,wbemPrivilegeSecurity = 0x7,wbemPrivilegeTakeOwnership = 0x8,wbemPrivilegeLoadDriver = 0x9,wbemPrivilegeSystemProfile = 0xA,wbemPrivilegeSystemtime = 0xB,wbemPrivilegeProfileSingleProcess = 0xC,wbemPrivilegeIncreaseBasePriority = 0xD,wbemPrivilegeCreatePagefile = 0xE,wbemPrivilegeCreatePermanent = 0xF,wbemPrivilegeBackup = 0x10,wbemPrivilegeRestore = 0x11,wbemPrivilegeShutdown = 0x12,wbemPrivilegeDebug = 0x13,wbemPrivilegeAudit = 0x14,wbemPrivilegeSystemEnvironment = 0x15,wbemPrivilegeChangeNotify = 0x16,wbemPrivilegeRemoteShutdown = 0x17,wbemPrivilegeUndock = 0x18,wbemPrivilegeSyncAgent = 0x19,wbemPrivilegeEnableDelegation = 0x1A,wbemPrivilegeManageVolume = 0x1B,};
enum WbemQueryFlagEnum {wbemQueryFlagDeep = 0x0,wbemQueryFlagShallow = 0x1,wbemQueryFlagPrototype = 0x2,};
enum _AUDIT_EVENT_TYPE {AuditEventObjectAccess = 0x0,AuditEventDirectoryServiceAccess = 0x1,};
enum _D3DANTIALIASMODE {D3DANTIALIAS_NONE = 0x0,D3DANTIALIAS_SORTDEPENDENT = 0x1,D3DANTIALIAS_SORTINDEPENDENT = 0x2,D3DANTIALIAS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DCUBEMAP_FACES {D3DCUBEMAP_FACE_POSITIVE_X = 0x0,D3DCUBEMAP_FACE_NEGATIVE_X = 0x1,D3DCUBEMAP_FACE_POSITIVE_Y = 0x2,D3DCUBEMAP_FACE_NEGATIVE_Y = 0x3,D3DCUBEMAP_FACE_POSITIVE_Z = 0x4,D3DCUBEMAP_FACE_NEGATIVE_Z = 0x5,D3DCUBEMAP_FACE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DPRIMITIVETYPE {D3DPT_POINTLIST = 0x1,D3DPT_LINELIST = 0x2,D3DPT_LINESTRIP = 0x3,D3DPT_TRIANGLELIST = 0x4,D3DPT_TRIANGLESTRIP = 0x5,D3DPT_TRIANGLEFAN = 0x6,D3DPT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREFILTER {D3DFILTER_NEAREST = 0x1,D3DFILTER_LINEAR = 0x2,D3DFILTER_MIPNEAREST = 0x3,D3DFILTER_MIPLINEAR = 0x4,D3DFILTER_LINEARMIPNEAREST = 0x5,D3DFILTER_LINEARMIPLINEAR = 0x6,D3DFILTER_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVSD_TOKENTYPE {D3DVSD_TOKEN_NOP = 0x0,D3DVSD_TOKEN_STREAM = 0x1,D3DVSD_TOKEN_STREAMDATA = 0x2,D3DVSD_TOKEN_TESSELLATOR = 0x3,D3DVSD_TOKEN_CONSTMEM = 0x4,D3DVSD_TOKEN_EXT = 0x5,D3DVSD_TOKEN_END = 0x7,D3DVSD_FORCE_DWORD = 0x7FFFFFFF,};
enum _HIDP_REPORT_TYPE {HidP_Input = 0x0,HidP_Output = 0x1,HidP_Feature = 0x2,};
enum _NDIS_MEDIA_STATE {NdisMediaStateConnected = 0x0,NdisMediaStateDisconnected = 0x1,};
enum _NDIS_WAN_QUALITY {NdisWanRaw = 0x0,NdisWanErrorControl = 0x1,NdisWanReliable = 0x2,};
struct _NDR_PROC_CONTEXT;
struct _RPC_SECURITY_QOS {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;};
enum _STORAGE_BUS_TYPE {BusTypeUnknown = 0x0,BusTypeScsi = 0x1,BusTypeAtapi = 0x2,BusTypeAta = 0x3,BusType1394 = 0x4,BusTypeSsa = 0x5,BusTypeFibre = 0x6,BusTypeUsb = 0x7,BusTypeRAID = 0x8,BusTypeMaxReserved = 0x7F,};
enum _WSAESETSERVICEOP {RNRSERVICE_REGISTER = 0x0,RNRSERVICE_DEREGISTER = 0x1,RNRSERVICE_DELETE = 0x2,};
struct _WSANETWORKEVENTS {int lNetworkEvents;int iErrorCode[10];};
enum tagAspectInfoFlag {DVASPECTINFOFLAG_CANOPTIMIZE = 0x1,};
enum tagPROPPAGESTATUS {PROPPAGESTATUS_DIRTY = 0x1,PROPPAGESTATUS_VALIDATE = 0x2,PROPPAGESTATUS_CLEAN = 0x4,};
typedef struct _userHMETAFILEPICT userHMETAFILEPICT;
typedef struct tACMFILTERCHOOSEA ACMFILTERCHOOSEA;
typedef struct tACMFILTERCHOOSEW ACMFILTERCHOOSEW;
typedef struct tACMFORMATCHOOSEA ACMFORMATCHOOSEA;
typedef struct tACMFORMATCHOOSEW ACMFORMATCHOOSEW;
typedef struct adpcmewaveformat_tag ADPCMEWAVEFORMAT;
typedef struct _ATTRIBUTE_INFO_1 ATTRIBUTE_INFO_1;
typedef struct _ATTRIBUTE_INFO_2 ATTRIBUTE_INFO_2;
typedef struct _ATTRIBUTE_INFO_3 ATTRIBUTE_INFO_3;
typedef struct _4A6DF2B8DF82B84B316F580845E87DE1 AUTO_SCROLL_DATA;
struct AsyncIAdviseSink {struct AsyncIAdviseSinkVtbl *lpVtbl;};
struct AsyncIPipeDouble {struct AsyncIPipeDoubleVtbl *lpVtbl;};
typedef struct _BDA_CA_MODULE_UI BDA_CA_MODULE_UI;
typedef struct _BDA_IPv4_ADDRESS BDA_IPv4_ADDRESS;
typedef struct _BDA_IPv6_ADDRESS BDA_IPv6_ADDRESS;
typedef struct _BINARY_CONTAINER BINARY_CONTAINER;
typedef struct tagBITMAPCOREHEADER BITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER BITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;
typedef struct _71B09FCCFB7FB16B05205AE0543E85F3 BUTTON_IMAGELIST;
struct CAccPropServices;
typedef struct _CERT_KEY_CONTEXT CERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO CERT_POLICY_INFO;
typedef struct _CERT_USAGE_MATCH CERT_USAGE_MATCH;
typedef struct _CMSG_SIGNER_INFO CMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO CMSG_STREAM_INFO;
typedef struct _CRYPT_ATTRIBUTES CRYPT_ATTRIBUTES;
typedef struct _CRYPT_BLOB_ARRAY CRYPT_BLOB_ARRAY;
typedef struct _CRYPTOAPI_BLOB CRYPT_OBJID_BLOB;
struct CScriptErrorList;
typedef struct _D3DDeviceDesc_V1 D3DDEVICEDESC_V1;
typedef struct _D3DDeviceDesc_V2 D3DDEVICEDESC_V2;
typedef struct _D3DDeviceDesc_V3 D3DDEVICEDESC_V3;
typedef struct _D3DHAL_CALLBACKS D3DHAL_CALLBACKS;
typedef struct _D3DHAL_CLEARDATA D3DHAL_CLEARDATA;
typedef struct _D3DHAL_DP2POINTS D3DHAL_DP2POINTS;
typedef struct _D3DHAL_DP2TEXBLT D3DHAL_DP2TEXBLT;
typedef struct _D3DHAL_DP2ZRANGE D3DHAL_DP2ZRANGE;
typedef struct _D3DRASTER_STATUS D3DRASTER_STATUS;
typedef struct _D3DTRANSFORMCAPS D3DTRANSFORMCAPS;
typedef struct _D3DTRANSFORMDATA D3DTRANSFORMDATA;
typedef struct _D3DTRIPATCH_INFO D3DTRIPATCH_INFO;
typedef struct tagDATABLOCKHEADER DATABLOCK_HEADER;
typedef struct _DDCOMPBUFFERINFO DDCOMPBUFFERINFO;
typedef struct _DDHAL_UNLOCKDATA DDHAL_UNLOCKDATA;
typedef struct _DDOPTSURFACEDESC DDOPTSURFACEDESC;
typedef struct _DDSETSTATEININFO DDSETSTATEININFO;
typedef struct _DDTRANSFERININFO DDTRANSFERININFO;
typedef struct _DD_CLIPPER_LOCAL DD_CLIPPER_LOCAL;
typedef struct _DD_FLIPVPORTDATA DD_FLIPVPORTDATA;
typedef struct _DD_GETFORMATDATA DD_GETFORMATDATA;
typedef struct _DD_MAPMEMORYDATA DD_MAPMEMORYDATA;
typedef struct _DD_PALETTE_LOCAL DD_PALETTE_LOCAL;
typedef struct _DD_SURFACE_LOCAL DD_SURFACE_LOCAL;
typedef struct tagDELETEITEMSTRUCT DELETEITEMSTRUCT;
typedef struct _DISK_GEOMETRY_EX DISK_GEOMETRY_EX;
typedef struct _DISK_PERFORMANCE DISK_PERFORMANCE;
typedef struct _DMUS_ARTICPARAMS DMUS_ARTICPARAMS;
typedef struct _DMUS_EVENTHEADER DMUS_EVENTHEADER;
typedef struct _DMUS_OFFSETTABLE DMUS_OFFSETTABLE;
typedef struct _DMUS_PORTPARAMS DMUS_PORTPARAMS7;
typedef struct _DMUS_PORTPARAMS8 DMUS_PORTPARAMS8;
typedef struct _DMUS_SYNTHSTATS8 DMUS_SYNTHSTATS8;
typedef struct tagEMRCREATEPALETTE EMRCREATEPALETTE;
typedef struct tagEMROFFSETCLIPRGN EMROFFSETCLIPRGN;
typedef struct tagEMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
typedef struct tagEMRRESIZEPALETTE EMRRESIZEPALETTE;
typedef struct tagEMRSELECTPALETTE EMRSELECTPALETTE;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
typedef struct tagEMRSETCOLORSPACE EMRSETCOLORSPACE;
typedef struct tagEMRSETICMPROFILE EMRSETICMPROFILE;
typedef struct tagEMRSETMITERLIMIT EMRSETMITERLIMIT;
typedef struct tagEMRSTRETCHDIBITS EMRSTRETCHDIBITS;
typedef struct _ENGSAFESEMAPHORE ENGSAFESEMAPHORE;
typedef struct tagENUMLOGFONTEXDVA ENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW ENUMLOGFONTEXDVW;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE;
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;
typedef struct _FD_DEVICEMETRICS FD_DEVICEMETRICS;
typedef struct _EA831C4C2E16EF6F2B7E490157D80D27 FIND_BY_SID_DATA;
typedef struct _FIND_NAME_BUFFER FIND_NAME_BUFFER;
typedef struct _FIND_NAME_HEADER FIND_NAME_HEADER;
typedef struct gsm610waveformat_tag GSM610WAVEFORMAT;
typedef void *HCRYPTOIDFUNCSET;
typedef struct _HIDP_BUTTON_CAPS HIDP_BUTTON_CAPS;
typedef struct _HISTOGRAM_BUCKET HISTOGRAM_BUCKET;
typedef struct _tagHIT_LOGGING_INFO HIT_LOGGING_INFO;
typedef struct tagHW_PROFILE_INFOA HW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW HW_PROFILE_INFOW;
struct IAccPropServices {struct IAccPropServicesVtbl *lpVtbl;};
typedef struct _6283893B713888864804C588D87395BB ICCOMPRESSFRAMES;
struct ICatalogFileInfo {struct ICatalogFileInfoVtbl *lpVtbl;};
struct ICommDlgBrowser2 {struct ICommDlgBrowser2Vtbl *lpVtbl;};
struct IConnectionPoint {struct IConnectionPointVtbl *lpVtbl;};
struct IContextMenuSite {struct IContextMenuSiteVtbl *lpVtbl;};
struct ICreateErrorInfo {struct ICreateErrorInfoVtbl *lpVtbl;};
struct ICreateTypeInfo2 {struct ICreateTypeInfo2Vtbl *lpVtbl;};
struct IDirect3DDevice8 {struct IDirect3DDevice8Vtbl *lpVtbl;};
struct IDirect3DVolume8 {struct IDirect3DVolume8Vtbl *lpVtbl;};
struct IDirectMusicPort {struct IDirectMusicPortVtbl *lpVtbl;};
struct IDirectMusicThru {struct IDirectMusicThruVtbl *lpVtbl;};
struct IEnumConnections {struct IEnumConnectionsVtbl *lpVtbl;};
struct IEnumExtraSearch {struct IEnumExtraSearchVtbl *lpVtbl;};
struct IEnumSTATPROPSTG {struct IEnumSTATPROPSTGVtbl *lpVtbl;};
struct IImageRecompress {struct IImageRecompressVtbl *lpVtbl;};
struct IInputObjectSite {struct IInputObjectSiteVtbl *lpVtbl;};
struct IInternalUnknown {struct IInternalUnknownVtbl *lpVtbl;};
struct IInternetSession {struct IInternetSessionVtbl *lpVtbl;};
typedef union _IMAGE_AUX_SYMBOL IMAGE_AUX_SYMBOL;
typedef struct _IMAGE_DEBUG_MISC IMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER IMAGE_DOS_HEADER;
typedef struct _IMAGE_LINENUMBER IMAGE_LINENUMBER;
typedef struct _IMAGE_OS2_HEADER IMAGE_OS2_HEADER;
typedef struct _IMAGE_RELOCATION IMAGE_RELOCATION;
typedef struct _IMAGE_VXD_HEADER IMAGE_VXD_HEADER;
typedef struct tagIMEMENUITEMINFOA IMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW IMEMENUITEMINFOW;
struct INamespaceWalkCB {struct INamespaceWalkCBVtbl *lpVtbl;};
struct IOleAdviseHolder {struct IOleAdviseHolderVtbl *lpVtbl;};
struct IOleCacheControl {struct IOleCacheControlVtbl *lpVtbl;};
struct IOleDocumentSite {struct IOleDocumentSiteVtbl *lpVtbl;};
struct IOleDocumentView {struct IOleDocumentViewVtbl *lpVtbl;};
struct IOleInPlaceFrame {struct IOleInPlaceFrameVtbl *lpVtbl;};
struct IPSFactoryBuffer {struct IPSFactoryBufferVtbl *lpVtbl;};
struct IPointerInactive {struct IPointerInactiveVtbl *lpVtbl;};
struct IPropertyStorage {struct IPropertyStorageVtbl *lpVtbl;};
struct ISWbemNamedValue {struct ISWbemNamedValueVtbl *lpVtbl;};
struct ISWbemObjectPath {struct ISWbemObjectPathVtbl *lpVtbl;};
struct ISWbemServicesEx {struct ISWbemServicesExVtbl *lpVtbl;};
struct ISWbemSinkEvents {struct ISWbemSinkEventsVtbl *lpVtbl;};
struct IScriptErrorList {struct IScriptErrorListVtbl *lpVtbl;};
struct IServiceProvider {struct IServiceProviderVtbl *lpVtbl;};
struct IShellFolderBand {struct IShellFolderBandVtbl *lpVtbl;};
struct IShellImageStore {struct IShellImageStoreVtbl *lpVtbl;};
struct ISimpleFrameSite {struct ISimpleFrameSiteVtbl *lpVtbl;};
struct IWbemClassObject {struct IWbemClassObjectVtbl *lpVtbl;};
struct IWbemLevel1Login {struct IWbemLevel1LoginVtbl *lpVtbl;};
struct IWinInetHttpInfo {struct IWinInetHttpInfoVtbl *lpVtbl;};
struct IWizardExtension {struct IWizardExtensionVtbl *lpVtbl;};
struct IWrappedProtocol {struct IWrappedProtocolVtbl *lpVtbl;};
struct IXMLDOMAttribute {struct IXMLDOMAttributeVtbl *lpVtbl;};
struct InternetExplorer;
typedef struct _KERB_NET_ADDRESS KERB_NET_ADDRESS;
typedef struct _KEY_EVENT_RECORD KEY_EVENT_RECORD;
typedef struct _KEY_TYPE_SUBTYPE KEY_TYPE_SUBTYPE;
typedef struct _12A419A691843E3FACBCDACF473D8E54 KSAUDIO_MIXLEVEL;
typedef struct _1D3D1B49856810D80BCDEEA6F14E981E KSAUDIO_MIX_CAPS;
typedef struct _97C70B764F4B63B047CCB37F16214516 KSAUDIO_POSITION;
typedef struct _KSM_BDA_PIN_PAIR KSM_BDA_PIN_PAIR;
typedef struct _01091B9DEBEBC2354EBF1594EEF6BE89 KSPIN_CINSTANCES;
typedef struct _KSPROPERTY_SPHLI KSPROPERTY_SPHLI;
typedef struct _KSPROPERTY_SPPAL KSPROPERTY_SPPAL;
typedef struct _KSP_BDA_NODE_PIN KSP_BDA_NODE_PIN;
typedef struct _EA4AC72E281160164D445E15D4425ADE KSVPMAXPIXELRATE;
typedef struct _B62AAB724E8D7D841EB663A6FEE96A5E KS_FRAMING_RANGE;
typedef struct tagKS_MPEAUDIOINFO KS_MPEGAUDIOINFO;
typedef struct tag_KS_TRUECOLORINFO KS_TRUECOLORINFO;
typedef struct tagKS_VBIINFOHEADER KS_VBIINFOHEADER;
typedef struct _ADDJOB_INFO_1A *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W *LPADDJOB_INFO_1W;
typedef IAsyncOperation *LPASYNCOPERATION;
typedef IAuthenticate *LPAUTHENTICATION;
typedef struct _AVISTREAMINFOA *LPAVISTREAMINFOA;
typedef struct _AVISTREAMINFOW *LPAVISTREAMINFOW;
typedef struct tagBITMAPCOREINFO *LPBITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 *LPBITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 *LPBITMAPV5HEADER;
typedef ICatInformation *LPCATINFORMATION;
typedef struct tagCBT_CREATEWNDA *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW *LPCBT_CREATEWNDW;
typedef ICommDlgBrowser *LPCOMMDLGBROWSER;
typedef struct _CONNECTIONLIST *LPCONNECTIONLIST;
typedef ICreateTypeInfo *LPCREATETYPEINFO;
typedef ICreateTypeLib2 *LPCREATETYPELIB2;
typedef struct _D3DDeviceDesc7 *LPD3DDEVICEDESC7;
typedef struct _D3DEXECUTEDATA *LPD3DEXECUTEDATA;
typedef struct _D3DINSTRUCTION *LPD3DINSTRUCTION;
typedef struct _D3DTEXTURELOAD *LPD3DTEXTURELOAD;
typedef struct _DCICREATEINPUT *LPDCICREATEINPUT;
typedef struct _DCISURFACEINFO *LPDCISURFACEINFO;
typedef struct _DDCOLORCONTROL *LPDDCOLORCONTROL;
typedef struct _DDHAL_FLIPDATA *LPDDHAL_FLIPDATA;
typedef struct _DDHAL_LOCKDATA *LPDDHAL_LOCKDATA;
typedef struct _DDMCBUFFERINFO *LPDDMCBUFFERINFO;
typedef struct _DDSURFACEDESC2 *LPDDSURFACEDESC2;
typedef struct _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;
typedef struct _DMUS_NOTERANGE *LPDMUS_NOTERANGE;
typedef struct _DMUS_WAVEARTDL *LPDMUS_WAVEARTDL;
typedef struct tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;
typedef struct tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;
typedef struct _DRIVER_INFO_1A *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W *LPDRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W *LPDRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W *LPDRIVER_INFO_3W;
typedef struct _DRIVER_INFO_4A *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W *LPDRIVER_INFO_4W;
typedef struct _DRIVER_INFO_5A *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W *LPDRIVER_INFO_5W;
typedef struct _DRIVER_INFO_6A *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W *LPDRIVER_INFO_6W;
typedef struct _DSCBUFFERDESC1 *LPDSCBUFFERDESC1;
typedef struct _DSFXCompressor *LPDSFXCompressor;
typedef struct _DSFXDistortion *LPDSFXDistortion;
typedef struct tagENUMLOGFONTEXA *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW *LPENUMLOGFONTEXW;
typedef IFileViewerSite *LPFILEVIEWERSITE;
typedef struct tagFLOATOBJ_XFORM *LPFLOATOBJ_XFORM;
typedef struct _FLOWDESCRIPTOR *LPFLOWDESCRIPTOR;
typedef struct _HD_TEXTFILTERA *LPHD_TEXTFILTERA;
typedef struct _HD_TEXTFILTERW *LPHD_TEXTFILTERW;
typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;
typedef struct tagLOGCOLORSPACEA *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW *LPLOGCOLORSPACEW;
typedef struct tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS;
typedef struct _MEMORYSTATUSEX *LPMEMORYSTATUSEX;
typedef struct tagMONITORINFOEXA *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW *LPMONITORINFOEXW;
typedef struct tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT;
typedef struct tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT;
typedef struct tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;
typedef struct _nlsversioninfo *LPNLSVERSIONINFO;
typedef struct tagNMITEMACTIVATE *LPNMITEMACTIVATE;
typedef struct tagNMLVCUSTOMDRAW *LPNMLVCUSTOMDRAW;
typedef struct tagNMOBJECTNOTIFY *LPNMOBJECTNOTIFY;
typedef struct tagNMREBARCHEVRON *LPNMREBARCHEVRON;
typedef struct _NMTBCUSTOMDRAW *LPNMTBCUSTOMDRAW;
typedef struct tagNMTTCUSTOMDRAW *LPNMTTCUSTOMDRAW;
typedef struct tagNMTVCUSTOMDRAW *LPNMTVCUSTOMDRAW;
typedef IObjectWithSite *LPOBJECTWITHSITE;
typedef IOleControlSite *LPOLECONTROLSITE;
typedef IOleInPlaceSite *LPOLEINPLACESITE;
typedef IOleUndoManager *LPOLEUNDOMANAGER;
typedef struct _OSVERSIONINFOA *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *LPOSVERSIONINFOW;
typedef IPersistFolder2 *LPPERSISTFOLDER2;
typedef IPersistMoniker *LPPERSISTMONIKER;
typedef IPersistStorage *LPPERSISTSTORAGE;
typedef struct _PRINTER_INFO_3 *LPPRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 *LPPRINTER_INFO_6;
typedef struct tagPRINTPAGERANGE *LPPRINTPAGERANGE;
typedef struct _PROTOCOL_INFOA *LPPROTOCOL_INFOA;
typedef struct _PROTOCOL_INFOW *LPPROTOCOL_INFOW;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D *LPQOS_OBJECT_HDR;
typedef struct tagRAWINPUTDEVICE *LPRAWINPUTDEVICE;
typedef struct tagRAWINPUTHEADER *LPRAWINPUTHEADER;
typedef struct tagREBARBANDINFOA *LPREBARBANDINFOA;
typedef struct tagREBARBANDINFOW *LPREBARBANDINFOW;
typedef IRunnableObject *LPRUNNABLEOBJECT;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef struct _SERVICE_STATUS *LPSERVICE_STATUS;
typedef struct _SFV_SETITEMPOS *LPSFV_SETITEMPOS;
typedef struct _5687B37E6A0F56297A2BB22AF6770AC6 *LPSHELLFLAGSTATE;
typedef struct _SHNAMEMAPPINGA *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW *LPSHNAMEMAPPINGW;
typedef struct _SOCKET_ADDRESS *LPSOCKET_ADDRESS;
typedef IStdMarshalInfo *LPSTDMARSHALINFO;
typedef struct _SV2CVW2_PARAMS *LPSV2CVW2_PARAMS;
typedef struct _TT_HITTESTINFOA *LPTTHITTESTINFOA;
typedef struct _TT_HITTESTINFOW *LPTTHITTESTINFOW;
typedef IInternetZoneManager *LPURLZONEMANAGER;
typedef struct _WSPUPCALLTABLE *LPWSPUPCALLTABLE;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
enum MACRO_ACCESSRECT {ACCESSRECT_VRAMSTYLE = 0x1,ACCESSRECT_NOTHOLDINGWIN16LOCK = 0x2,ACCESSRECT_BROKEN = 0x4,};
enum MACRO_ACCESS_MAX {ACCESS_MAX_MS_V2_ACE_TYPE = 0x3,ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 0x4,ACCESS_MAX_MS_V3_ACE_TYPE = 0x4,ACCESS_MIN_MS_OBJECT_ACE_TYPE = 0x5,ACCESS_ALLOWED_OBJECT_ACE_TYPE = 0x5,ACCESS_DENIED_OBJECT_ACE_TYPE = 0x6,};
enum MACRO_ACCESS_MIN {ACCESS_MIN_MS_ACE_TYPE = 0x0,ACCESS_ALLOWED_ACE_TYPE = 0x0,ACCESS_DENIED_ACE_TYPE = 0x1,};
enum MACRO_ACE_OBJECT {ACE_OBJECT_TYPE_PRESENT = 0x1,ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x2,};
enum MACRO_ACM_METRIC {ACM_METRIC_COUNT_DRIVERS = 1,ACM_METRIC_COUNT_CODECS = 2,ACM_METRIC_COUNT_CONVERTERS = 3,ACM_METRIC_COUNT_FILTERS = 4,ACM_METRIC_COUNT_DISABLED = 5,ACM_METRIC_COUNT_HARDWARE = 6,ACM_METRIC_COUNT_LOCAL_DRIVERS = 20,ACM_METRIC_COUNT_LOCAL_CODECS = 21,ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22,ACM_METRIC_COUNT_LOCAL_FILTERS = 23,ACM_METRIC_COUNT_LOCAL_DISABLED = 24,ACM_METRIC_HARDWARE_WAVE_INPUT = 30,ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31,ACM_METRIC_MAX_SIZE_FORMAT = 50,ACM_METRIC_MAX_SIZE_FILTER = 51,ACM_METRIC_DRIVER_SUPPORT = 100,ACM_METRIC_DRIVER_PRIORITY = 101,ACM_DRIVERENUMF_NOLOCAL = 1073741824,ACM_DRIVERENUMF_DISABLED = -2147483648,ACM_DRIVERADDF_NAME = 1,ACM_DRIVERADDF_FUNCTION = 3,ACM_DRIVERADDF_NOTIFYHWND = 4,ACM_DRIVERADDF_TYPEMASK = 7,ACM_DRIVERADDF_LOCAL = 0,ACM_DRIVERADDF_GLOBAL = 8,};
enum MACRO_ACTIVATION {ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1,ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2,ACTIVATION_CONTEXT_PATH_TYPE_URL = 3,ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4,};
enum MACRO_APPCOMMAND {APPCOMMAND_BROWSER_BACKWARD = 1,APPCOMMAND_BROWSER_FORWARD = 2,APPCOMMAND_BROWSER_REFRESH = 3,APPCOMMAND_BROWSER_STOP = 4,APPCOMMAND_BROWSER_SEARCH = 5,APPCOMMAND_BROWSER_FAVORITES = 6,APPCOMMAND_BROWSER_HOME = 7,APPCOMMAND_VOLUME_MUTE = 8,APPCOMMAND_VOLUME_DOWN = 9,APPCOMMAND_VOLUME_UP = 10,APPCOMMAND_MEDIA_NEXTTRACK = 11,APPCOMMAND_MEDIA_PREVIOUSTRACK = 12,APPCOMMAND_MEDIA_STOP = 13,APPCOMMAND_MEDIA_PLAY_PAUSE = 14,APPCOMMAND_LAUNCH_MAIL = 15,APPCOMMAND_LAUNCH_MEDIA_SELECT = 16,APPCOMMAND_LAUNCH_APP1 = 17,APPCOMMAND_LAUNCH_APP2 = 18,APPCOMMAND_BASS_DOWN = 19,APPCOMMAND_BASS_BOOST = 20,APPCOMMAND_BASS_UP = 21,APPCOMMAND_TREBLE_DOWN = 22,APPCOMMAND_TREBLE_UP = 23,APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24,APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25,APPCOMMAND_MICROPHONE_VOLUME_UP = 26,APPCOMMAND_HELP = 27,APPCOMMAND_FIND = 28,APPCOMMAND_NEW = 29,APPCOMMAND_OPEN = 30,APPCOMMAND_CLOSE = 31,APPCOMMAND_SAVE = 32,APPCOMMAND_PRINT = 33,APPCOMMAND_UNDO = 34,APPCOMMAND_REDO = 35,APPCOMMAND_COPY = 36,APPCOMMAND_CUT = 37,APPCOMMAND_PASTE = 38,APPCOMMAND_REPLY_TO_MAIL = 39,APPCOMMAND_FORWARD_MAIL = 40,APPCOMMAND_SEND_MAIL = 41,APPCOMMAND_SPELL_CHECK = 42,APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43,APPCOMMAND_MIC_ON_OFF_TOGGLE = 44,APPCOMMAND_CORRECTION_LIST = 45,APPCOMMAND_MEDIA_PLAY = 46,APPCOMMAND_MEDIA_PAUSE = 47,APPCOMMAND_MEDIA_RECORD = 48,APPCOMMAND_MEDIA_FAST_FORWARD = 49,APPCOMMAND_MEDIA_REWIND = 50,APPCOMMAND_MEDIA_CHANNEL_UP = 51,APPCOMMAND_MEDIA_CHANNEL_DOWN = 52,};
enum MACRO_APPLYCPSUI {APPLYCPSUI_NO_NEWDEF = 0x1,APPLYCPSUI_OK_CANCEL_BUTTON = 0x2,};
enum MACRO_AVIIF_LIST {AVIIF_LIST = 0x1,AVIIF_TWOCC = 0x2,AVIIF_KEYFRAME = 0x10,};
enum MACRO_BACKGROUND {BACKGROUND_BLUE = 0x10,BACKGROUND_GREEN = 0x20,BACKGROUND_RED = 0x40,BACKGROUND_INTENSITY = 0x80,};
enum MACRO_BAD_SYSTEM {BAD_SYSTEM_CONFIG_INFO = 0x74,};
enum MACRO_CAPTUREBLT {CAPTUREBLT = 0x40000000,};
enum MACRO_CC_RGBINIT {CC_RGBINIT = 0x1,CC_FULLOPEN = 0x2,CC_PREVENTFULLOPEN = 0x4,CC_SHOWHELP = 0x8,CC_ENABLEHOOK = 0x10,CC_ENABLETEMPLATE = 0x20,CC_ENABLETEMPLATEHANDLE = 0x40,CC_SOLIDCOLOR = 0x80,CC_ANYCOLOR = 0x100,};
enum MACRO_CERT_CHAIN {CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5,CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 10,CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000,CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10,};
enum MACRO_CERT_QUERY {CERT_QUERY_OBJECT_FILE = 0x1,CERT_QUERY_OBJECT_BLOB = 0x2,CERT_QUERY_CONTENT_CERT = 0x1,CERT_QUERY_CONTENT_CTL = 0x2,CERT_QUERY_CONTENT_CRL = 0x3,CERT_QUERY_CONTENT_SERIALIZED_STORE = 0x4,CERT_QUERY_CONTENT_SERIALIZED_CERT = 0x5,CERT_QUERY_CONTENT_SERIALIZED_CTL = 0x6,CERT_QUERY_CONTENT_SERIALIZED_CRL = 0x7,CERT_QUERY_CONTENT_PKCS7_SIGNED = 0x8,CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 0x9,CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 0xA,CERT_QUERY_CONTENT_PKCS10 = 0xB,CERT_QUERY_CONTENT_PFX = 0xC,CERT_QUERY_CONTENT_CERT_PAIR = 0xD,CERT_QUERY_CONTENT_FLAG_CERT = 0x2,CERT_QUERY_CONTENT_FLAG_CTL = 0x4,CERT_QUERY_CONTENT_FLAG_CRL = 0x8,CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 0x10,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 0x20,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 0x40,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 0x80,CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 0x100,CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 0x200,CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 0x400,CERT_QUERY_CONTENT_FLAG_PKCS10 = 0x800,CERT_QUERY_CONTENT_FLAG_PFX = 0x1000,CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 0x2000,CERT_QUERY_CONTENT_FLAG_ALL = 0x3FFE,CERT_QUERY_FORMAT_BINARY = 0x1,CERT_QUERY_FORMAT_BASE64_ENCODED = 0x2,CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 0x3,CERT_QUERY_FORMAT_FLAG_BINARY = 0x2,CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 0x4,CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 0x8,CERT_QUERY_FORMAT_FLAG_ALL = 0xE,};
enum MACRO_CERT_STORE {CERT_STORE_ADD_NEW = 1,CERT_STORE_ADD_USE_EXISTING = 2,CERT_STORE_ADD_REPLACE_EXISTING = 3,CERT_STORE_ADD_ALWAYS = 4,CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5,CERT_STORE_ADD_NEWER = 6,CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7,CERT_STORE_CERTIFICATE_CONTEXT = 1,CERT_STORE_CRL_CONTEXT = 2,CERT_STORE_CTL_CONTEXT = 3,CERT_STORE_ALL_CONTEXT_FLAG = -1,CERT_STORE_CERTIFICATE_CONTEXT_FLAG = 2,CERT_STORE_CRL_CONTEXT_FLAG = 4,CERT_STORE_CTL_CONTEXT_FLAG = 8,};
enum MACRO_CIRCUMFLEX {CIRCUMFLEX = 0x302,};
enum MACRO_CLIENTSITE {CLIENTSITE_E_FIRST = 0x80040190,CLIENTSITE_E_LAST = 0x8004019F,CLIENTSITE_S_FIRST = 0x40190,CLIENTSITE_S_LAST = 0x4019F,};
enum MACRO_CLOSEPROPS {CLOSEPROPS_DISCARD = 0x1,};
enum MACRO_CMC_TAGGED {CMC_TAGGED_CERT_REQUEST_CHOICE = 1,CMC_OTHER_INFO_NO_CHOICE = 0,CMC_OTHER_INFO_FAIL_CHOICE = 1,CMC_OTHER_INFO_PEND_CHOICE = 2,CMC_STATUS_SUCCESS = 0,CMC_STATUS_FAILED = 2,CMC_STATUS_PENDING = 3,CMC_STATUS_NO_SUPPORT = 4,CMC_STATUS_CONFIRM_REQUIRED = 5,CMC_FAIL_BAD_ALG = 0,CMC_FAIL_BAD_MESSAGE_CHECK = 1,CMC_FAIL_BAD_REQUEST = 2,CMC_FAIL_BAD_TIME = 3,CMC_FAIL_BAD_CERT_ID = 4,CMC_FAIL_UNSUPORTED_EXT = 5,CMC_FAIL_MUST_ARCHIVE_KEYS = 6,CMC_FAIL_BAD_IDENTITY = 7,CMC_FAIL_POP_REQUIRED = 8,CMC_FAIL_POP_FAILED = 9,CMC_FAIL_NO_KEY_REUSE = 10,CMC_FAIL_INTERNAL_CA_ERROR = 11,CMC_FAIL_TRY_LATER = 12,};
enum MACRO_COMADMIN_E {COMADMIN_E_OBJECT_PARENT_MISSING = 0x80110808,COMADMIN_E_OBJECT_DOES_NOT_EXIST = 0x80110809,COMADMIN_E_APP_NOT_RUNNING = 0x8011080A,COMADMIN_E_INVALID_PARTITION = 0x8011080B,COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = 0x8011080D,COMADMIN_E_USER_IN_SET = 0x8011080E,COMADMIN_E_CANTRECYCLELIBRARYAPPS = 0x8011080F,COMADMIN_E_CANTRECYCLESERVICEAPPS = 0x80110811,COMADMIN_E_PROCESSALREADYRECYCLED = 0x80110812,COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = 0x80110813,COMADMIN_E_CANTMAKEINPROCSERVICE = 0x80110814,COMADMIN_E_PROGIDINUSEBYCLSID = 0x80110815,COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = 0x80110816,COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = 0x80110817,COMADMIN_E_PARTITION_ACCESSDENIED = 0x80110818,COMADMIN_E_PARTITION_MSI_ONLY = 0x80110819,COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = 0x8011081A,COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS = 0x8011081B,COMADMIN_E_COMP_MOVE_SOURCE = 0x8011081C,COMADMIN_E_COMP_MOVE_DEST = 0x8011081D,COMADMIN_E_COMP_MOVE_PRIVATE = 0x8011081E,COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = 0x8011081F,COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = 0x80110820,COMADMIN_E_PRIVATE_ACCESSDENIED = 0x80110821,COMADMIN_E_SAFERINVALID = 0x80110822,COMADMIN_E_REGISTRY_ACCESSDENIED = 0x80110823,COMADMIN_E_PARTITIONS_DISABLED = 0x80110824,};
enum MACRO_CONFIGFLAG {CONFIGFLAG_REMOVED = 0x2,CONFIGFLAG_MANUAL_INSTALL = 0x4,CONFIGFLAG_IGNORE_BOOT_LC = 0x8,CONFIGFLAG_NET_BOOT = 0x10,CONFIGFLAG_REINSTALL = 0x20,CONFIGFLAG_FAILEDINSTALL = 0x40,CONFIGFLAG_CANTSTOPACHILD = 0x80,CONFIGFLAG_OKREMOVEROM = 0x100,CONFIGFLAG_NOREMOVEEXIT = 0x200,CONFIGFLAG_FINISH_INSTALL = 0x400,CONFIGFLAG_NEEDS_FORCED_CONFIG = 0x800,CONFIGFLAG_PARTIAL_LOG_CONF = 0x2000,CONFIGFLAG_SUPPRESS_SURPRISE = 0x4000,CONFIGFLAG_VERIFY_HARDWARE = 0x8000,};
enum MACRO_CONSOLE_NO {CONSOLE_NO_SELECTION = 0x0,CONSOLE_SELECTION_IN_PROGRESS = 0x1,CONSOLE_SELECTION_NOT_EMPTY = 0x2,CONSOLE_MOUSE_SELECTION = 0x4,CONSOLE_MOUSE_DOWN = 0x8,};
enum MACRO_CO_E_CLASS {CO_E_CLASS_CREATE_FAILED = 0x80080001,CO_E_SCM_ERROR = 0x80080002,CO_E_SCM_RPC_FAILURE = 0x80080003,CO_E_BAD_PATH = 0x80080004,CO_E_SERVER_EXEC_FAILURE = 0x80080005,CO_E_OBJSRV_RPC_FAILURE = 0x80080006,};
enum MACRO_CP_WINANSI {CP_WINANSI = 1004,CP_WINUNICODE = 1200,CP_WINNEUTRAL = 1004,};
enum MACRO_CREATE_FOR {CREATE_FOR_IMPORT = 1,CREATE_FOR_DIR = 2,};
enum MACRO_CREATE_NEW {CREATE_NEW_CONSOLE = 0x10,};
enum MACRO_CREDENTIAL {CREDENTIAL_OID_PASSWORD_CREDENTIALS_A = 1,CREDENTIAL_OID_PASSWORD_CREDENTIALS_W = 2,CREDENTIAL_OID_PASSWORD_CREDENTIALS = 1,};
enum MACRO_CRL_REASON {CRL_REASON_UNSPECIFIED = 0,CRL_REASON_KEY_COMPROMISE = 1,CRL_REASON_CA_COMPROMISE = 2,CRL_REASON_AFFILIATION_CHANGED = 3,CRL_REASON_SUPERSEDED = 4,CRL_REASON_CESSATION_OF_OPERATION = 5,CRL_REASON_CERTIFICATE_HOLD = 6,CRL_REASON_REMOVE_FROM_CRL = 8,CRL_DIST_POINT_NO_NAME = 0,CRL_DIST_POINT_FULL_NAME = 1,CRL_DIST_POINT_ISSUER_RDN_NAME = 2,CRL_REASON_UNUSED_FLAG = 128,CRL_REASON_KEY_COMPROMISE_FLAG = 64,CRL_REASON_CA_COMPROMISE_FLAG = 32,CRL_REASON_AFFILIATION_CHANGED_FLAG = 16,CRL_REASON_SUPERSEDED_FLAG = 8,CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4,CRL_REASON_CERTIFICATE_HOLD_FLAG = 2,CRL_DIST_POINT_ERR_INDEX_MASK = 127,CRL_DIST_POINT_ERR_INDEX_SHIFT = 24,CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648,};
enum MACRO_CRYPT_MODE {CRYPT_MODE_CBCI = 6,CRYPT_MODE_CFBP = 7,CRYPT_MODE_OFBP = 8,CRYPT_MODE_CBCOFM = 9,CRYPT_MODE_CBCOFMI = 10,};
enum MACRO_CRYPT_X942 {CRYPT_X942_COUNTER_BYTE_LENGTH = 4,CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4,CRYPT_X942_PUB_INFO_BYTE_LENGTH = 64,CRYPT_RC2_40BIT_VERSION = 160,CRYPT_RC2_56BIT_VERSION = 52,CRYPT_RC2_64BIT_VERSION = 120,CRYPT_RC2_128BIT_VERSION = 58,};
enum MACRO_CS_VREDRAW {CS_VREDRAW = 0x1,CS_HREDRAW = 0x2,CS_DBLCLKS = 0x8,CS_OWNDC = 0x20,CS_CLASSDC = 0x40,CS_PARENTDC = 0x80,CS_NOCLOSE = 0x200,CS_SAVEBITS = 0x800,CS_BYTEALIGNCLIENT = 0x1000,CS_BYTEALIGNWINDOW = 0x2000,CS_GLOBALCLASS = 0x4000,CS_IME = 0x10000,CS_DROPSHADOW = 0x20000,};
enum MACRO_CW_DEFAULT {CW_DEFAULT = 589855,};
enum MACRO_D3DADAPTER {D3DADAPTER_DEFAULT = 0,};
enum MACRO_D3DCURRENT {D3DCURRENT_DISPLAY_MODE = 0xEFFFFF,};
enum MACRO_D3DDEBCAPS {D3DDEBCAPS_SYSTEMMEMORY = 0x1,D3DDEBCAPS_VIDEOMEMORY = 0x2,D3DDEBCAPS_MEM = 0x3,};
enum MACRO_D3DDEVCAPS {D3DDEVCAPS_EXECUTESYSTEMMEMORY = 0x10,D3DDEVCAPS_EXECUTEVIDEOMEMORY = 0x20,D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = 0x40,D3DDEVCAPS_TLVERTEXVIDEOMEMORY = 0x80,D3DDEVCAPS_TEXTURESYSTEMMEMORY = 0x100,D3DDEVCAPS_TEXTUREVIDEOMEMORY = 0x200,D3DDEVCAPS_DRAWPRIMTLVERTEX = 0x400,D3DDEVCAPS_CANRENDERAFTERFLIP = 0x800,D3DDEVCAPS_TEXTURENONLOCALVIDMEM = 0x1000,D3DDEVCAPS_DRAWPRIMITIVES2 = 0x2000,D3DDEVCAPS_SEPARATETEXTUREMEMORIES = 0x4000,D3DDEVCAPS_DRAWPRIMITIVES2EX = 0x8000,D3DDEVCAPS_HWTRANSFORMANDLIGHT = 0x10000,D3DDEVCAPS_CANBLTSYSTONONLOCAL = 0x20000,D3DDEVCAPS_HWRASTERIZATION = 0x80000,D3DDEVCAPS_PUREDEVICE = 0x100000,D3DDEVCAPS_QUINTICRTPATCHES = 0x200000,D3DDEVCAPS_RTPATCHES = 0x400000,D3DDEVCAPS_RTPATCHHANDLEZERO = 0x800000,D3DDEVCAPS_NPATCHES = 0x1000000,};
enum MACRO_D3DENUMRET {D3DENUMRET_CANCEL = 0,D3DENUMRET_OK = 1,};
enum MACRO_D3DEXECUTE {D3DEXECUTE_CLIPPED = 0x1,D3DEXECUTE_UNCLIPPED = 0x2,};
enum MACRO_D3DFVFCAPS {D3DFVFCAPS_TEXCOORDCOUNTMASK = 0xFFFF,D3DFVFCAPS_DONOTSTRIPELEMENTS = 0x80000,D3DFVFCAPS_PSIZE = 0x100000,};
enum MACRO_D3DFVF_FOG {D3DFVF_FOG = 0x2000,};
enum MACRO_D3DHAL_MAX {D3DHAL_MAX_RSTATES = 256,D3DHAL_MAX_TEXTURESTATES = 13,D3DHAL_TEXTURESTATEBUF_SIZE = 14,};
enum MACRO_D3DHAL_TSS {D3DHAL_TSS_RENDERSTATEBASE = 256,D3DHAL_TSS_MAXSTAGES = 8,D3DHAL_TSS_STATESPERSTAGE = 64,};
enum MACRO_D3DNTCLEAR {D3DNTCLEAR_COMPUTERECTS = 0x8,};
enum MACRO_D3DPRESENT {D3DPRESENT_RATE_DEFAULT = 0x0,D3DPRESENT_RATE_UNLIMITED = 0x7FFFFFFF,};
enum MACRO_D3DTRIFLAG {D3DTRIFLAG_START = 0x0,D3DTRIFLAG_ODD = 0x1E,D3DTRIFLAG_EVEN = 0x1F,D3DTRIFLAG_EDGEENABLE1 = 0x100,D3DTRIFLAG_EDGEENABLE2 = 0x200,D3DTRIFLAG_EDGEENABLE3 = 0x400,D3DTRIFLAG_EDGEENABLETRIANGLE = 0x700,};
enum MACRO_DCICOMMAND {DCICOMMAND = 3075,};
enum MACRO_DC_TRIVIAL {DC_TRIVIAL = 0,DC_RECT = 1,DC_COMPLEX = 3,};
enum MACRO_DDCKEYCAPS {DDCKEYCAPS_DESTBLT = 0x1,DDCKEYCAPS_DESTBLTCLRSPACE = 0x2,DDCKEYCAPS_DESTBLTCLRSPACEYUV = 0x4,DDCKEYCAPS_DESTBLTYUV = 0x8,DDCKEYCAPS_DESTOVERLAY = 0x10,DDCKEYCAPS_DESTOVERLAYCLRSPACE = 0x20,DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = 0x40,DDCKEYCAPS_DESTOVERLAYONEACTIVE = 0x80,DDCKEYCAPS_DESTOVERLAYYUV = 0x100,DDCKEYCAPS_SRCBLT = 0x200,DDCKEYCAPS_SRCBLTCLRSPACE = 0x400,DDCKEYCAPS_SRCBLTCLRSPACEYUV = 0x800,DDCKEYCAPS_SRCBLTYUV = 0x1000,DDCKEYCAPS_SRCOVERLAY = 0x2000,DDCKEYCAPS_SRCOVERLAYCLRSPACE = 0x4000,DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = 0x8000,DDCKEYCAPS_SRCOVERLAYONEACTIVE = 0x10000,DDCKEYCAPS_SRCOVERLAYYUV = 0x20000,DDCKEYCAPS_NOCOSTOVERLAY = 0x40000,};
enum MACRO_DDHAL_CB32 {DDHAL_CB32_DESTROYDRIVER = 0x1,DDHAL_CB32_CREATESURFACE = 0x2,DDHAL_CB32_SETCOLORKEY = 0x4,DDHAL_CB32_SETMODE = 0x8,DDHAL_CB32_WAITFORVERTICALBLANK = 0x10,DDHAL_CB32_CANCREATESURFACE = 0x20,DDHAL_CB32_CREATEPALETTE = 0x40,DDHAL_CB32_GETSCANLINE = 0x80,DDHAL_CB32_SETEXCLUSIVEMODE = 0x100,DDHAL_CB32_FLIPTOGDISURFACE = 0x200,DDHAL_PALCB32_DESTROYPALETTE = 0x1,DDHAL_PALCB32_SETENTRIES = 0x2,DDHAL_SURFCB32_DESTROYSURFACE = 0x1,DDHAL_SURFCB32_FLIP = 0x2,DDHAL_SURFCB32_SETCLIPLIST = 0x4,DDHAL_SURFCB32_LOCK = 0x8,DDHAL_SURFCB32_UNLOCK = 0x10,DDHAL_SURFCB32_BLT = 0x20,DDHAL_SURFCB32_SETCOLORKEY = 0x40,DDHAL_SURFCB32_ADDATTACHEDSURFACE = 0x80,DDHAL_SURFCB32_GETBLTSTATUS = 0x100,DDHAL_SURFCB32_GETFLIPSTATUS = 0x200,DDHAL_SURFCB32_UPDATEOVERLAY = 0x400,DDHAL_SURFCB32_SETOVERLAYPOSITION = 0x800,DDHAL_SURFCB32_RESERVED4 = 0x1000,DDHAL_SURFCB32_SETPALETTE = 0x2000,DDHAL_MISCCB32_GETAVAILDRIVERMEMORY = 0x1,DDHAL_MISCCB32_UPDATENONLOCALHEAP = 0x2,DDHAL_MISCCB32_GETHEAPALIGNMENT = 0x4,DDHAL_MISCCB32_GETSYSMEMBLTSTATUS = 0x8,DDHAL_MISC2CB32_CREATESURFACEEX = 0x2,DDHAL_MISC2CB32_GETDRIVERSTATE = 0x4,DDHAL_MISC2CB32_DESTROYDDLOCAL = 0x8,DDHAL_EXEBUFCB32_CANCREATEEXEBUF = 0x1,DDHAL_EXEBUFCB32_CREATEEXEBUF = 0x2,DDHAL_EXEBUFCB32_DESTROYEXEBUF = 0x4,DDHAL_EXEBUFCB32_LOCKEXEBUF = 0x8,DDHAL_EXEBUFCB32_UNLOCKEXEBUF = 0x10,DDHAL_VPORT32_CANCREATEVIDEOPORT = 0x1,DDHAL_VPORT32_CREATEVIDEOPORT = 0x2,DDHAL_VPORT32_FLIP = 0x4,DDHAL_VPORT32_GETBANDWIDTH = 0x8,DDHAL_VPORT32_GETINPUTFORMATS = 0x10,DDHAL_VPORT32_GETOUTPUTFORMATS = 0x20,DDHAL_VPORT32_GETFIELD = 0x80,DDHAL_VPORT32_GETLINE = 0x100,DDHAL_VPORT32_GETCONNECT = 0x200,DDHAL_VPORT32_DESTROY = 0x400,DDHAL_VPORT32_GETFLIPSTATUS = 0x800,DDHAL_VPORT32_UPDATE = 0x1000,DDHAL_VPORT32_WAITFORSYNC = 0x2000,DDHAL_VPORT32_GETSIGNALSTATUS = 0x4000,DDHAL_VPORT32_COLORCONTROL = 0x8000,DDHAL_COLOR_COLORCONTROL = 0x1,DDHAL_KERNEL_SYNCSURFACEDATA = 0x1,DDHAL_KERNEL_SYNCVIDEOPORTDATA = 0x2,DDHAL_MOCOMP32_GETGUIDS = 0x1,DDHAL_MOCOMP32_GETFORMATS = 0x2,DDHAL_MOCOMP32_CREATE = 0x4,DDHAL_MOCOMP32_GETCOMPBUFFINFO = 0x8,DDHAL_MOCOMP32_GETINTERNALINFO = 0x10,DDHAL_MOCOMP32_BEGINFRAME = 0x20,DDHAL_MOCOMP32_ENDFRAME = 0x40,DDHAL_MOCOMP32_RENDER = 0x80,DDHAL_MOCOMP32_QUERYSTATUS = 0x100,DDHAL_MOCOMP32_DESTROY = 0x200,DDHAL_DRIVER_NOTHANDLED = 0x0,DDHAL_DRIVER_HANDLED = 0x1,DDHAL_DRIVER_NOCKEYHW = 0x2,};
enum MACRO_DDMODEINFO {DDMODEINFO_PALETTIZED = 0x1,DDMODEINFO_MODEX = 0x2,DDMODEINFO_UNSUPPORTED = 0x4,DDMODEINFO_STANDARDVGA = 0x8,DDMODEINFO_MAXREFRESH = 0x10,DDMODEINFO_STEREO = 0x20,};
enum MACRO_DDPF_NOVEL {DDPF_NOVEL_TEXTURE_FORMAT = 0x100000,DDPF_D3DFORMAT = 0x200000,};
enum MACRO_DDRAWICLIP {DDRAWICLIP_WATCHWINDOW = 0x1,DDRAWICLIP_ISINITIALIZED = 0x2,DDRAWICLIP_INMASTERSPRITELIST = 0x4,};
enum MACRO_DDRAWISURF {DDRAWISURF_ATTACHED = 0x1,DDRAWISURF_IMPLICITCREATE = 0x2,DDRAWISURF_ISFREE = 0x4,DDRAWISURF_ATTACHED_FROM = 0x8,DDRAWISURF_IMPLICITROOT = 0x10,DDRAWISURF_PARTOFPRIMARYCHAIN = 0x20,DDRAWISURF_DATAISALIASED = 0x40,DDRAWISURF_HASDC = 0x80,DDRAWISURF_HASCKEYDESTOVERLAY = 0x100,DDRAWISURF_HASCKEYDESTBLT = 0x200,DDRAWISURF_HASCKEYSRCOVERLAY = 0x400,DDRAWISURF_HASCKEYSRCBLT = 0x800,DDRAWISURF_LOCKEXCLUDEDCURSOR = 0x1000,DDRAWISURF_HASPIXELFORMAT = 0x2000,DDRAWISURF_HASOVERLAYDATA = 0x4000,DDRAWISURF_SETGAMMA = 0x8000,DDRAWISURF_SW_CKEYDESTOVERLAY = 0x10000,DDRAWISURF_SW_CKEYDESTBLT = 0x20000,DDRAWISURF_SW_CKEYSRCOVERLAY = 0x40000,DDRAWISURF_SW_CKEYSRCBLT = 0x80000,DDRAWISURF_HW_CKEYDESTOVERLAY = 0x100000,DDRAWISURF_HW_CKEYDESTBLT = 0x200000,DDRAWISURF_HW_CKEYSRCOVERLAY = 0x400000,DDRAWISURF_HW_CKEYSRCBLT = 0x800000,DDRAWISURF_INMASTERSPRITELIST = 0x1000000,DDRAWISURF_HELCB = 0x2000000,DDRAWISURF_FRONTBUFFER = 0x4000000,DDRAWISURF_BACKBUFFER = 0x8000000,DDRAWISURF_INVALID = 0x10000000,DDRAWISURF_DCIBUSY = 0x20000000,DDRAWISURF_GETDCNULL = 0x40000000,DDRAWISURF_STEREOSURFACELEFT = 0x20000000,DDRAWISURF_DRIVERMANAGED = 0x40000000,DDRAWISURF_DCILOCK = 0x80000000,};
enum MACRO_DDTRANSFER {DDTRANSFER_SYSTEMMEMORY = 0x1,DDTRANSFER_NONLOCALVIDMEM = 0x2,DDTRANSFER_INVERT = 0x4,DDTRANSFER_CANCEL = 0x80,DDTRANSFER_HALFLINES = 0x100,};
enum MACRO_DDVPCREATE {DDVPCREATE_VBIONLY = 0x1,DDVPCREATE_VIDEOONLY = 0x2,};
enum MACRO_DDVPFORMAT {DDVPFORMAT_VIDEO = 0x1,DDVPFORMAT_VBI = 0x2,};
enum MACRO_DDVPSTATUS {DDVPSTATUS_VBIONLY = 0x1,DDVPSTATUS_VIDEOONLY = 0x2,};
enum MACRO_DDVPTARGET {DDVPTARGET_VIDEO = 0x1,DDVPTARGET_VBI = 0x2,};
enum MACRO_DDWAITVB_I {DDWAITVB_I_TESTVB = 0x80000006,};
enum MACRO_DD_VERSION {DD_VERSION = 0x200,DD_RUNTIME_VERSION = 0x802,DD_HAL_VERSION = 0x100,};
enum MACRO_DEACTIVATE {DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = 0x1,};
enum MACRO_DEVICEDATA {DEVICEDATA = 19,};
enum MACRO_DIALOPTION {DIALOPTION_BILLING = 0x40,DIALOPTION_QUIET = 0x80,DIALOPTION_DIALTONE = 0x100,};
enum MACRO_DIFFERENCE {DIFFERENCE = 11,};
enum MACRO_DIRECTDRAW {DIRECTDRAW_VERSION = 0x700,};
enum MACRO_DISORDERLY {DISORDERLY_SHUTDOWN = 0xF3,};
enum MACRO_DISPID_ACC {DISPID_ACC_PARENT = -5000,DISPID_ACC_CHILDCOUNT = -5001,DISPID_ACC_CHILD = -5002,DISPID_ACC_NAME = -5003,DISPID_ACC_VALUE = -5004,DISPID_ACC_DESCRIPTION = -5005,DISPID_ACC_ROLE = -5006,DISPID_ACC_STATE = -5007,DISPID_ACC_HELP = -5008,DISPID_ACC_HELPTOPIC = -5009,DISPID_ACC_KEYBOARDSHORTCUT = -5010,DISPID_ACC_FOCUS = -5011,DISPID_ACC_SELECTION = -5012,DISPID_ACC_DEFAULTACTION = -5013,DISPID_ACC_SELECT = -5014,DISPID_ACC_LOCATION = -5015,DISPID_ACC_NAVIGATE = -5016,DISPID_ACC_HITTEST = -5017,DISPID_ACC_DODEFAULTACTION = -5018,};
enum MACRO_DISPID_DOM {DISPID_DOM_BASE = 0x1,DISPID_DOM_COLLECTION_BASE = 0xF4240,DISPID_DOM_COLLECTION_MAX = 0x2DC6BF,DISPID_DOM_NODE = 0x1,DISPID_DOM_NODE_NODENAME = 0x2,DISPID_DOM_NODE_NODEVALUE = 0x3,DISPID_DOM_NODE_NODETYPE = 0x4,DISPID_DOM_NODE_NODETYPEENUM = 0x5,DISPID_DOM_NODE_PARENTNODE = 0x6,DISPID_DOM_NODE_CHILDNODES = 0x7,DISPID_DOM_NODE_FIRSTCHILD = 0x8,DISPID_DOM_NODE_LASTCHILD = 0x9,DISPID_DOM_NODE_PREVIOUSSIBLING = 0xA,DISPID_DOM_NODE_NEXTSIBLING = 0xB,DISPID_DOM_NODE_ATTRIBUTES = 0xC,DISPID_DOM_NODE_INSERTBEFORE = 0xD,DISPID_DOM_NODE_REPLACECHILD = 0xE,DISPID_DOM_NODE_REMOVECHILD = 0xF,DISPID_DOM_NODE_APPENDCHILD = 0x10,DISPID_DOM_NODE_HASCHILDNODES = 0x11,DISPID_DOM_NODE_OWNERDOC = 0x12,DISPID_DOM_NODE_CLONENODE = 0x13,DISPID_XMLDOM_NODE = 0x14,DISPID_XMLDOM_NODE_STRINGTYPE = 0x15,DISPID_XMLDOM_NODE_SPECIFIED = 0x16,DISPID_XMLDOM_NODE_DEFINITION = 0x17,DISPID_XMLDOM_NODE_TEXT = 0x18,DISPID_XMLDOM_NODE_NODETYPEDVALUE = 0x19,DISPID_XMLDOM_NODE_DATATYPE = 0x1A,DISPID_XMLDOM_NODE_XML = 0x1B,DISPID_XMLDOM_NODE_TRANSFORMNODE = 0x1C,DISPID_XMLDOM_NODE_SELECTNODES = 0x1D,DISPID_XMLDOM_NODE_SELECTSINGLENODE = 0x1E,DISPID_XMLDOM_NODE_PARSED = 0x1F,DISPID_XMLDOM_NODE_NAMESPACE = 0x20,DISPID_XMLDOM_NODE_PREFIX = 0x21,DISPID_XMLDOM_NODE_BASENAME = 0x22,DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT = 0x23,DISPID_XMLDOM_NODE__TOP = 0x24,DISPID_DOM_DOCUMENT = 0x25,DISPID_DOM_DOCUMENT_DOCTYPE = 0x26,DISPID_DOM_DOCUMENT_IMPLEMENTATION = 0x27,DISPID_DOM_DOCUMENT_DOCUMENTELEMENT = 0x28,DISPID_DOM_DOCUMENT_CREATEELEMENT = 0x29,DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT = 0x2A,DISPID_DOM_DOCUMENT_CREATETEXTNODE = 0x2B,DISPID_DOM_DOCUMENT_CREATECOMMENT = 0x2C,DISPID_DOM_DOCUMENT_CREATECDATASECTION = 0x2D,DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION = 0x2E,DISPID_DOM_DOCUMENT_CREATEATTRIBUTE = 0x2F,DISPID_DOM_DOCUMENT_CREATEENTITY = 0x30,DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE = 0x31,DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME = 0x32,DISPID_DOM_DOCUMENT_TOP = 0x33,DISPID_XMLDOM_DOCUMENT = 0x34,DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE = 0x35,DISPID_XMLDOM_DOCUMENT_CREATENODE = 0x36,DISPID_XMLDOM_DOCUMENT_CREATENODEEX = 0x37,DISPID_XMLDOM_DOCUMENT_NODEFROMID = 0x38,DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES = 0x39,DISPID_XMLDOM_DOCUMENT_LOAD = 0x3A,DISPID_XMLDOM_DOCUMENT_PARSEERROR = 0x3B,DISPID_XMLDOM_DOCUMENT_URL = 0x3C,DISPID_XMLDOM_DOCUMENT_ASYNC = 0x3D,DISPID_XMLDOM_DOCUMENT_ABORT = 0x3E,DISPID_XMLDOM_DOCUMENT_LOADXML = 0x3F,DISPID_XMLDOM_DOCUMENT_SAVE = 0x40,DISPID_XMLDOM_DOCUMENT_VALIDATE = 0x41,DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE = 0x42,DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE = 0x43,DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE = 0x44,DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE = 0x45,DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE = 0x46,DISPID_XMLDOM_DOCUMENT__TOP = 0x47,DISPID_DOM_NODELIST = 0x48,DISPID_DOM_NODELIST_ITEM = 0x49,DISPID_DOM_NODELIST_LENGTH = 0x4A,DISPID_XMLDOM_NODELIST = 0x4B,DISPID_XMLDOM_NODELIST_NEXTNODE = 0x4C,DISPID_XMLDOM_NODELIST_RESET = 0x4D,DISPID_XMLDOM_NODELIST_NEWENUM = 0x4E,DISPID_XMLDOM_NODELIST__TOP = 0x4F,DISPID_DOM_NAMEDNODEMAP = 0x50,DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM = 0x53,DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM = 0x54,DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM = 0x55,DISPID_XMLDOM_NAMEDNODEMAP = 0x56,DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM = 0x57,DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM = 0x58,DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE = 0x59,DISPID_XMLDOM_NAMEDNODEMAP_RESET = 0x5A,DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM = 0x5B,DISPID_XMLDOM_NAMEDNODEMAP__TOP = 0x5C,DISPID_DOM_W3CWRAPPERS = 0x5D,DISPID_DOM_DOCUMENTFRAGMENT = 0x5E,DISPID_DOM_DOCUMENTFRAGMENT__TOP = 0x5F,DISPID_DOM_ELEMENT = 0x60,DISPID_DOM_ELEMENT_GETTAGNAME = 0x61,DISPID_DOM_ELEMENT_GETATTRIBUTES = 0x62,DISPID_DOM_ELEMENT_GETATTRIBUTE = 0x63,DISPID_DOM_ELEMENT_SETATTRIBUTE = 0x64,DISPID_DOM_ELEMENT_REMOVEATTRIBUTE = 0x65,DISPID_DOM_ELEMENT_GETATTRIBUTENODE = 0x66,DISPID_DOM_ELEMENT_SETATTRIBUTENODE = 0x67,DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE = 0x68,DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME = 0x69,DISPID_DOM_ELEMENT_NORMALIZE = 0x6A,DISPID_DOM_ELEMENT__TOP = 0x6B,DISPID_DOM_DATA = 0x6C,DISPID_DOM_DATA_DATA = 0x6D,DISPID_DOM_DATA_LENGTH = 0x6E,DISPID_DOM_DATA_SUBSTRING = 0x6F,DISPID_DOM_DATA_APPEND = 0x70,DISPID_DOM_DATA_INSERT = 0x71,DISPID_DOM_DATA_DELETE = 0x72,DISPID_DOM_DATA_REPLACE = 0x73,DISPID_DOM_DATA__TOP = 0x74,DISPID_DOM_ATTRIBUTE = 0x75,DISPID_DOM_ATTRIBUTE_GETNAME = 0x76,DISPID_DOM_ATTRIBUTE_SPECIFIED = 0x77,DISPID_DOM_ATTRIBUTE_VALUE = 0x78,DISPID_DOM_ATTRIBUTE__TOP = 0x79,DISPID_DOM_TEXT = 0x7A,DISPID_DOM_TEXT_SPLITTEXT = 0x7B,DISPID_DOM_TEXT_JOINTEXT = 0x7C,DISPID_DOM_TEXT__TOP = 0x7D,DISPID_DOM_PI = 0x7E,DISPID_DOM_PI_TARGET = 0x7F,DISPID_DOM_PI_DATA = 0x80,DISPID_DOM_PI__TOP = 0x81,DISPID_DOM_DOCUMENTTYPE = 0x82,DISPID_DOM_DOCUMENTTYPE_NAME = 0x83,DISPID_DOM_DOCUMENTTYPE_ENTITIES = 0x84,DISPID_DOM_DOCUMENTTYPE_NOTATIONS = 0x85,DISPID_DOM_DOCUMENTTYPE__TOP = 0x86,DISPID_DOM_NOTATION = 0x87,DISPID_DOM_NOTATION_PUBLICID = 0x88,DISPID_DOM_NOTATION_SYSTEMID = 0x89,DISPID_DOM_NOTATION__TOP = 0x8A,DISPID_DOM_ENTITY = 0x8B,DISPID_DOM_ENTITY_PUBLICID = 0x8C,DISPID_DOM_ENTITY_SYSTEMID = 0x8D,DISPID_DOM_ENTITY_NOTATIONNAME = 0x8E,DISPID_DOM_ENTITY__TOP = 0x8F,DISPID_DOM_W3CWRAPPERS_TOP = 0x8F,DISPID_DOM_IMPLEMENTATION = 0x90,DISPID_DOM_IMPLEMENTATION_HASFEATURE = 0x91,DISPID_DOM_IMPLEMENTATION__TOP = 0x92,DISPID_DOM__TOP = 0xB0,DISPID_DOM_ERROR = 0xB1,DISPID_DOM_ERROR_ERRORCODE = 0xB2,DISPID_DOM_ERROR_URL = 0xB3,DISPID_DOM_ERROR_REASON = 0xB4,DISPID_DOM_ERROR_SRCTEXT = 0xB5,DISPID_DOM_ERROR_LINE = 0xB6,DISPID_DOM_ERROR_LINEPOS = 0xB7,DISPID_DOM_ERROR_FILEPOS = 0xB8,DISPID_DOM_ERROR__TOP = 0xB9,DISPID_XTLRUNTIME = 0xBA,DISPID_XTLRUNTIME_UNIQUEID = 0xBB,DISPID_XTLRUNTIME_DEPTH = 0xBC,DISPID_XTLRUNTIME_CHILDNUMBER = 0xBD,DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER = 0xBE,DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER = 0xBF,DISPID_XTLRUNTIME_FORMATINDEX = 0xC0,DISPID_XTLRUNTIME_FORMATNUMBER = 0xC1,DISPID_XTLRUNTIME_FORMATDATE = 0xC2,DISPID_XTLRUNTIME_FORMATTIME = 0xC3,DISPID_XTLRUNTIME__TOP = 0xC4,DISPID_XMLDOMEVENT = 0xC5,DISPID_XMLDOMEVENT_ONREADYSTATECHANGE = 0xFFFFFD9F,DISPID_XMLDOMEVENT_ONDATAAVAILABLE = 0xC6,DISPID_XMLDOMEVENT__TOP = 0xC7,DISPID_XMLDSO = 0x10000,DISPID_XMLDSO_DOCUMENT = 0x10001,DISPID_XMLDSO_JAVADSOCOMPATIBLE = 0x10002,};
enum MACRO_DI_CHANNEL {DI_CHANNEL = 1,DI_READ_SPOOL_JOB = 3,DI_MEMORYMAP_WRITE = 1,};
enum MACRO_DI_SHOWOEM {DI_SHOWOEM = 0x1,DI_SHOWCOMPAT = 0x2,DI_SHOWCLASS = 0x4,DI_SHOWALL = 0x7,DI_NOVCP = 0x8,DI_DIDCOMPAT = 0x10,DI_DIDCLASS = 0x20,DI_AUTOASSIGNRES = 0x40,DI_NEEDRESTART = 0x80,DI_NEEDREBOOT = 0x100,DI_NOBROWSE = 0x200,DI_MULTMFGS = 0x400,DI_DISABLED = 0x800,DI_GENERALPAGE_ADDED = 0x1000,DI_RESOURCEPAGE_ADDED = 0x2000,DI_PROPERTIES_CHANGE = 0x4000,DI_INF_IS_SORTED = 0x8000,DI_ENUMSINGLEINF = 0x10000,DI_DONOTCALLCONFIGMG = 0x20000,DI_INSTALLDISABLED = 0x40000,DI_COMPAT_FROM_CLASS = 0x80000,DI_CLASSINSTALLPARAMS = 0x100000,DI_NODI_DEFAULTACTION = 0x200000,DI_QUIETINSTALL = 0x800000,DI_NOFILECOPY = 0x1000000,DI_FORCECOPY = 0x2000000,DI_DRIVERPAGE_ADDED = 0x4000000,DI_USECI_SELECTSTRINGS = 0x8000000,DI_OVERRIDE_INFFLAGS = 0x10000000,DI_PROPS_NOCHANGEUSAGE = 0x20000000,DI_NOSELECTICONS = 0x40000000,DI_NOWRITE_IDS = 0x80000000,DI_FLAGSEX_USEOLDINFSEARCH = 0x1,DI_FLAGSEX_RESERVED2 = 0x2,DI_FLAGSEX_CI_FAILED = 0x4,DI_FLAGSEX_DIDINFOLIST = 0x10,DI_FLAGSEX_DIDCOMPATINFO = 0x20,DI_FLAGSEX_FILTERCLASSES = 0x40,DI_FLAGSEX_SETFAILEDINSTALL = 0x80,DI_FLAGSEX_DEVICECHANGE = 0x100,DI_FLAGSEX_ALWAYSWRITEIDS = 0x200,DI_FLAGSEX_PROPCHANGE_PENDING = 0x400,DI_FLAGSEX_ALLOWEXCLUDEDDRVS = 0x800,DI_FLAGSEX_NOUIONQUERYREMOVE = 0x1000,DI_FLAGSEX_USECLASSFORCOMPAT = 0x2000,DI_FLAGSEX_RESERVED3 = 0x4000,DI_FLAGSEX_NO_DRVREG_MODIFY = 0x8000,DI_FLAGSEX_IN_SYSTEM_SETUP = 0x10000,DI_FLAGSEX_INET_DRIVER = 0x20000,DI_FLAGSEX_APPENDDRIVERLIST = 0x40000,DI_FLAGSEX_PREINSTALLBACKUP = 0x80000,DI_FLAGSEX_BACKUPONREPLACE = 0x100000,DI_FLAGSEX_DRIVERLIST_FROM_URL = 0x200000,DI_FLAGSEX_RESERVED1 = 0x400000,DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS = 0x800000,DI_FLAGSEX_POWERPAGE_ADDED = 0x1000000,DI_FLAGSEX_FILTERSIMILARDRIVERS = 0x2000000,DI_FLAGSEX_INSTALLEDDRIVER = 0x4000000,DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE = 0x8000000,DI_FLAGSEX_ALTPLATFORM_DRVSEARCH = 0x10000000,DI_FLAGSEX_RESTART_DEVICE_ONLY = 0x20000000,};
enum MACRO_DM_DEFAULT {DM_DEFAULT = 0x1,DM_MONOCHROME = 0x2,};
enum MACRO_DRAGDROP_S {DRAGDROP_S_DROP = 0x40100,DRAGDROP_S_CANCEL = 0x40101,DRAGDROP_S_USEDEFAULTCURSORS = 0x40102,};
enum MACRO_DRIVERSIGN {DRIVERSIGN_NONE = 0x0,DRIVERSIGN_WARNING = 0x1,DRIVERSIGN_BLOCKING = 0x2,};
enum MACRO_DROPEFFECT {DROPEFFECT_NONE = 0,DROPEFFECT_COPY = 1,DROPEFFECT_MOVE = 2,DROPEFFECT_LINK = 4,DROPEFFECT_SCROLL = -2147483648,};
enum MACRO_DRV_CANCEL {DRV_CANCEL = 0,DRV_OK = 1,DRV_RESTART = 2,DRV_MCI_FIRST = 2048,DRV_MCI_LAST = 6143,};
enum MACRO_DRV_MAPPER {DRV_MAPPER_PREFERRED_INPUT_GET = 16384,DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386,};
enum MACRO_DSCBSTATUS {DSCBSTATUS_CAPTURING = 0x1,DSCBSTATUS_LOOPING = 0x2,};
enum MACRO_DSFXCHORUS {DSFXCHORUS_WAVE_TRIANGLE = 0,DSFXCHORUS_WAVE_SIN = 1,DSFXCHORUS_PHASE_MIN = 0,DSFXCHORUS_PHASE_MAX = 4,DSFXCHORUS_PHASE_NEG_180 = 0,DSFXCHORUS_PHASE_NEG_90 = 1,DSFXCHORUS_PHASE_ZERO = 2,DSFXCHORUS_PHASE_90 = 3,DSFXCHORUS_PHASE_180 = 4,};
enum MACRO_DSFXGARGLE {DSFXGARGLE_WAVE_TRIANGLE = 0,DSFXGARGLE_WAVE_SQUARE = 1,DSFXGARGLE_RATEHZ_MIN = 1,DSFXGARGLE_RATEHZ_MAX = 1000,};
enum MACRO_DS_UNKNOWN {DS_UNKNOWN_ADDRESS_TYPE = 0,};
enum MACRO_DTRESULTOK {DTRESULTOK = 0,DTRESULTFIX = 1,DTRESULTPROB = 2,};
enum MACRO_EM_INVALID {EM_INVALID = 16,EM_DENORMAL = 524288,EM_ZERODIVIDE = 8,EM_OVERFLOW = 4,EM_UNDERFLOW = 2,EM_INEXACT = 1,};
enum MACRO_ENCRYPTION {ENCRYPTION_FORMAT_DEFAULT = 0x1,};
enum MACRO_ERROR_BIDI {ERROR_BIDI_STATUS_OK = 0,ERROR_BIDI_NOT_SUPPORTED = 50,ERROR_BIDI_ERROR_BASE = 13000,ERROR_BIDI_STATUS_WARNING = 13001,ERROR_BIDI_SCHEMA_READ_ONLY = 13002,ERROR_BIDI_SERVER_OFFLINE = 13003,ERROR_BIDI_DEVICE_OFFLINE = 13004,ERROR_BIDI_SCHEMA_NOT_SUPPORTED = 13005,};
enum MACRO_EXIT_POINT {EXTRA_EXIT_POINT = 0xC00037DC,MISSING_EXIT_POINT = 0xC00037DD,};
enum MACRO_FILESYSTEM {FILESYSTEM_STATISTICS_TYPE_NTFS = 1,FILESYSTEM_STATISTICS_TYPE_FAT = 2,};
enum MACRO_FILE_BEGIN {FILE_BEGIN = 0,FILE_CURRENT = 1,FILE_END = 2,};
enum MACRO_FINDDLGORD {FINDDLGORD = 1540,};
enum MACRO_FLI_GLYPHS {FLI_GLYPHS = 0x40000,};
enum MACRO_FONTDLGORD {FONTDLGORD = 1542,};
enum MACRO_FONTMAPPER {FONTMAPPER_MAX = 10,};
enum MACRO_FOREGROUND {FOREGROUND_BLUE = 0x1,FOREGROUND_GREEN = 0x2,FOREGROUND_RED = 0x4,FOREGROUND_INTENSITY = 0x8,};
enum MACRO_FOURCC_DLS {FOURCC_DLS = 542329924,FOURCC_DLID = 1684630628,FOURCC_COLH = 1751936867,FOURCC_WVPL = 1819309687,FOURCC_PTBL = 1818391664,FOURCC_PATH = 1752457584,FOURCC_wave = 1702257015,FOURCC_LINS = 1936615788,FOURCC_INS = 544435817,FOURCC_INSH = 1752395369,FOURCC_LRGN = 1852273260,FOURCC_RGN = 544106354,FOURCC_RGNH = 1752065906,FOURCC_LART = 1953653100,FOURCC_ART1 = 829715041,FOURCC_WLNK = 1802398839,FOURCC_WSMP = 1886221175,FOURCC_VERS = 1936876918,};
enum MACRO_FO_HGLYPHS {FO_HGLYPHS = 0,FO_GLYPHBITS = 1,FO_PATHOBJ = 2,};
enum MACRO_FO_OUTLINE {FO_OUTLINE_CAPABLE = 2,};
enum MACRO_F_WAVELINK {F_WAVELINK_PHASE_MASTER = 0x1,};
enum MACRO_GDICOMMENT {GDICOMMENT_IDENTIFIER = 0x43494447,GDICOMMENT_WINDOWS_METAFILE = 0x80000001,GDICOMMENT_BEGINGROUP = 0x2,GDICOMMENT_ENDGROUP = 0x3,GDICOMMENT_MULTIFORMATS = 0x40000004,};
enum MACRO_GDI_DRIVER {GDI_DRIVER_VERSION = 0x4000,};
enum MACRO_GET_MODULE {GET_MODULE_HANDLE_EX_FLAG_PIN = 0x1,GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = 0x2,GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = 0x4,};
enum MACRO_GS_UNICODE {GS_UNICODE_HANDLES = 0x1,GS_8BIT_HANDLES = 0x2,GS_16BIT_HANDLES = 0x4,};
enum MACRO_HTTOPRIGHT {HTTOPRIGHT = 14,};
enum MACRO_ICCOMPRESS {ICCOMPRESS_KEYFRAME = 0x1,};
enum MACRO_IDCONTINUE {IDCONTINUE = 11,IDTIMEOUT = 32000,};
enum MACRO_IDTRYAGAIN {IDTRYAGAIN = 10,};
enum MACRO_ILLUMINANT {ILLUMINANT_DEVICE_DEFAULT = 0,ILLUMINANT_A = 1,ILLUMINANT_B = 2,ILLUMINANT_C = 3,ILLUMINANT_D50 = 4,ILLUMINANT_D55 = 5,ILLUMINANT_D65 = 6,ILLUMINANT_D75 = 7,ILLUMINANT_F2 = 8,ILLUMINANT_MAX_INDEX = 8,ILLUMINANT_TUNGSTEN = 1,ILLUMINANT_DAYLIGHT = 3,ILLUMINANT_FLUORESCENT = 8,ILLUMINANT_NTSC = 3,};
enum MACRO_IME_CONFIG {IME_CONFIG_GENERAL = 1,IME_CONFIG_REGISTERWORD = 2,IME_CONFIG_SELECTDICTIONARY = 3,IME_ESC_QUERY_SUPPORT = 3,IME_ESC_RESERVED_FIRST = 4,IME_ESC_RESERVED_LAST = 2047,IME_ESC_PRIVATE_FIRST = 2048,IME_ESC_PRIVATE_LAST = 4095,IME_ESC_SEQUENCE_TO_INTERNAL = 4097,IME_ESC_GET_EUDC_DICTIONARY = 4099,IME_ESC_SET_EUDC_DICTIONARY = 4100,IME_ESC_MAX_KEY = 4101,IME_ESC_IME_NAME = 4102,IME_ESC_SYNC_HOTKEY = 4103,IME_ESC_HANJA_MODE = 4104,IME_ESC_AUTOMATA = 4105,IME_ESC_PRIVATE_HOTKEY = 4106,IME_ESC_GETHELPFILENAME = 4107,IME_REGWORD_STYLE_EUDC = 1,IME_REGWORD_STYLE_USER_FIRST = -2147483648,IME_REGWORD_STYLE_USER_LAST = -1,};
enum MACRO_IOCTL_DISK {IOCTL_DISK_BASE = 7,IOCTL_DISK_GET_DRIVE_GEOMETRY = 458752,IOCTL_DISK_GET_PARTITION_INFO = 475140,IOCTL_DISK_SET_PARTITION_INFO = 507912,IOCTL_DISK_GET_DRIVE_LAYOUT = 475148,IOCTL_DISK_SET_DRIVE_LAYOUT = 507920,IOCTL_DISK_VERIFY = 458772,IOCTL_DISK_FORMAT_TRACKS = 507928,IOCTL_DISK_REASSIGN_BLOCKS = 507932,IOCTL_DISK_PERFORMANCE = 458784,IOCTL_DISK_IS_WRITABLE = 458788,IOCTL_DISK_LOGGING = 458792,IOCTL_DISK_FORMAT_TRACKS_EX = 507948,IOCTL_DISK_HISTOGRAM_STRUCTURE = 458800,IOCTL_DISK_HISTOGRAM_DATA = 458804,IOCTL_DISK_HISTOGRAM_RESET = 458808,IOCTL_DISK_REQUEST_STRUCTURE = 458812,IOCTL_DISK_REQUEST_DATA = 458816,IOCTL_DISK_PERFORMANCE_OFF = 458848,IOCTL_DISK_CONTROLLER_NUMBER = 458820,};
enum MACRO_IOCTL_NDIS {IOCTL_NDIS_QUERY_GLOBAL_STATS = 1507330,IOCTL_NDIS_QUERY_ALL_STATS = 1507334,IOCTL_NDIS_DO_PNP_OPERATION = 1507336,IOCTL_NDIS_QUERY_SELECTED_STATS = 1507342,IOCTL_NDIS_ENUMERATE_INTERFACES = 1507344,IOCTL_NDIS_ADD_TDI_DEVICE = 1507348,IOCTL_NDIS_GET_LOG_DATA = 1507358,IOCTL_NDIS_GET_VERSION = 1507360,};
enum MACRO_IP_ADAPTER {IP_ADAPTER_ADDRESS_DNS_ELIGIBLE = 0x1,IP_ADAPTER_ADDRESS_TRANSIENT = 0x2,IP_ADAPTER_DDNS_ENABLED = 0x1,IP_ADAPTER_REGISTER_ADAPTER_SUFFIX = 0x2,IP_ADAPTER_DHCP_ENABLED = 0x4,IP_ADAPTER_RECEIVE_ONLY = 0x8,IP_ADAPTER_NO_MULTICAST = 0x10,IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG = 0x20,};
enum MACRO_IP_PENDING {IP_PENDING = 11255,IP_FLAG_DF = 2,IP_OPT_EOL = 0,IP_OPT_NOP = 1,IP_OPT_SECURITY = 130,IP_OPT_LSRR = 131,IP_OPT_SSRR = 137,IP_OPT_RR = 7,IP_OPT_TS = 68,IP_OPT_SID = 136,IP_OPT_ROUTER_ALERT = 148,};
enum MACRO_JOB_ACCESS {JOB_ACCESS_ADMINISTER = 0x10,JOB_ACCESS_READ = 0x20,};
enum MACRO_JOB_NOTIFY {JOB_NOTIFY_FIELD_PRINTER_NAME = 0x0,JOB_NOTIFY_FIELD_MACHINE_NAME = 0x1,JOB_NOTIFY_FIELD_PORT_NAME = 0x2,JOB_NOTIFY_FIELD_USER_NAME = 0x3,JOB_NOTIFY_FIELD_NOTIFY_NAME = 0x4,JOB_NOTIFY_FIELD_DATATYPE = 0x5,JOB_NOTIFY_FIELD_PRINT_PROCESSOR = 0x6,JOB_NOTIFY_FIELD_PARAMETERS = 0x7,JOB_NOTIFY_FIELD_DRIVER_NAME = 0x8,JOB_NOTIFY_FIELD_DEVMODE = 0x9,JOB_NOTIFY_FIELD_STATUS = 0xA,JOB_NOTIFY_FIELD_STATUS_STRING = 0xB,JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0xC,JOB_NOTIFY_FIELD_DOCUMENT = 0xD,JOB_NOTIFY_FIELD_PRIORITY = 0xE,JOB_NOTIFY_FIELD_POSITION = 0xF,JOB_NOTIFY_FIELD_SUBMITTED = 0x10,JOB_NOTIFY_FIELD_START_TIME = 0x11,JOB_NOTIFY_FIELD_UNTIL_TIME = 0x12,JOB_NOTIFY_FIELD_TIME = 0x13,JOB_NOTIFY_FIELD_TOTAL_PAGES = 0x14,JOB_NOTIFY_FIELD_PAGES_PRINTED = 0x15,JOB_NOTIFY_FIELD_TOTAL_BYTES = 0x16,JOB_NOTIFY_FIELD_BYTES_PRINTED = 0x17,};
enum MACRO_JOB_OBJECT {JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0,JOB_OBJECT_POST_AT_END_OF_JOB = 1,JOB_OBJECT_MSG_END_OF_JOB_TIME = 1,JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2,JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3,JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4,JOB_OBJECT_MSG_NEW_PROCESS = 6,JOB_OBJECT_MSG_EXIT_PROCESS = 7,JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8,JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9,JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10,JOB_OBJECT_LIMIT_WORKINGSET = 1,JOB_OBJECT_LIMIT_PROCESS_TIME = 2,JOB_OBJECT_LIMIT_JOB_TIME = 4,JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8,JOB_OBJECT_LIMIT_AFFINITY = 16,JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32,JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64,JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128,JOB_OBJECT_LIMIT_PROCESS_MEMORY = 256,JOB_OBJECT_LIMIT_JOB_MEMORY = 512,JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 1024,JOB_OBJECT_LIMIT_BREAKAWAY_OK = 2048,JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 4096,JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = 8192,JOB_OBJECT_LIMIT_RESERVED2 = 16384,JOB_OBJECT_LIMIT_RESERVED3 = 32768,JOB_OBJECT_LIMIT_RESERVED4 = 65536,JOB_OBJECT_LIMIT_RESERVED5 = 131072,JOB_OBJECT_LIMIT_RESERVED6 = 262144,JOB_OBJECT_LIMIT_VALID_FLAGS = 524287,JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 255,JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 16383,JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS = 524287,JOB_OBJECT_UILIMIT_NONE = 0,JOB_OBJECT_UILIMIT_HANDLES = 1,JOB_OBJECT_UILIMIT_READCLIPBOARD = 2,JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4,JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8,JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16,JOB_OBJECT_UILIMIT_GLOBALATOMS = 32,JOB_OBJECT_UILIMIT_DESKTOP = 64,JOB_OBJECT_UILIMIT_EXITWINDOWS = 128,JOB_OBJECT_UILIMIT_ALL = 255,JOB_OBJECT_UI_VALID_FLAGS = 255,JOB_OBJECT_SECURITY_NO_ADMIN = 1,JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2,JOB_OBJECT_SECURITY_ONLY_TOKEN = 4,JOB_OBJECT_SECURITY_FILTER_TOKENS = 8,JOB_OBJECT_SECURITY_VALID_FLAGS = 15,};
enum MACRO_KEY_LENGTH {KEY_LENGTH_MASK = 0xFFFF0000,};
enum MACRO_KSINSTANCE {KSINSTANCE_INDETERMINATE = 4294967295,};
enum MACRO_KSPRIORITY {KSPRIORITY_LOW = 0x1,KSPRIORITY_NORMAL = 0x40000000,KSPRIORITY_HIGH = 0x80000000,KSPRIORITY_EXCLUSIVE = 0xFFFFFFFF,};
enum MACRO_KSPROPERTY {KSPROPERTY_TYPE_GET = 0x1,KSPROPERTY_TYPE_SET = 0x2,KSPROPERTY_TYPE_SETSUPPORT = 0x100,KSPROPERTY_TYPE_BASICSUPPORT = 0x200,KSPROPERTY_TYPE_RELATIONS = 0x400,KSPROPERTY_TYPE_SERIALIZESET = 0x800,KSPROPERTY_TYPE_UNSERIALIZESET = 0x1000,KSPROPERTY_TYPE_SERIALIZERAW = 0x2000,KSPROPERTY_TYPE_UNSERIALIZERAW = 0x4000,KSPROPERTY_TYPE_SERIALIZESIZE = 0x8000,KSPROPERTY_TYPE_DEFAULTVALUES = 0x10000,KSPROPERTY_TYPE_TOPOLOGY = 0x10000000,KSPROPERTY_MEMBER_RANGES = 0x1,KSPROPERTY_MEMBER_STEPPEDRANGES = 0x2,KSPROPERTY_MEMBER_VALUES = 0x3,KSPROPERTY_MEMBER_FLAG_DEFAULT = 0x1,KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_MULTICHANNEL = 0x2,KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_UNIFORM = 0x4,};
enum MACRO_KS_TVAUDIO {KS_TVAUDIO_MODE_MONO = 0x1,KS_TVAUDIO_MODE_STEREO = 0x2,KS_TVAUDIO_MODE_LANG_A = 0x10,KS_TVAUDIO_MODE_LANG_B = 0x20,KS_TVAUDIO_MODE_LANG_C = 0x40,};
enum MACRO_LDBL_RADIX {LDBL_RADIX = 2,LDBL_ROUNDS = 1,};
enum MACRO_LM20_DNLEN {LM20_DNLEN = 15,};
enum MACRO_LM20_GNLEN {LM20_GNLEN = 20,};
enum MACRO_LM20_NNLEN {LM20_NNLEN = 12,};
enum MACRO_LM20_PWLEN {LM20_PWLEN = 14,};
enum MACRO_LM20_QNLEN {LM20_QNLEN = 12,};
enum MACRO_LM20_RMLEN {LM20_RMLEN = 30,};
enum MACRO_LM20_SNLEN {LM20_SNLEN = 15,};
enum MACRO_LM20_UNLEN {LM20_UNLEN = 20,};
enum MACRO_LM_HITTEST {LM_HITTEST = 0x700,LM_GETIDEALHEIGHT = 0x701,LM_SETITEM = 0x702,LM_GETITEM = 0x703,};
enum MACRO_LOCALE_USE {LOCALE_USE_NLS = 0x10000000,};
enum MACRO_LOGPIXELSX {LOGPIXELSX = 88,};
enum MACRO_LOGPIXELSY {LOGPIXELSY = 90,};
enum MACRO_MARKPARITY {MARKPARITY = 3,SPACEPARITY = 4,};
enum MACRO_MAXINTATOM {MAXINTATOM = 0xC000,};
enum MACRO_MAX_COLUMN {MAX_COLUMN_NAME_LEN = 80,MAX_COLUMN_DESC_LEN = 128,};
enum MACRO_MAX_DEVICE {MAX_DEVICE_IDENTIFIER_STRING = 512,};
enum MACRO_MAX_DRIVER {MAX_DRIVER_NAME = 32,MAX_PALETTE_SIZE = 256,MAX_AUTOFLIP_BUFFERS = 10,};
enum MACRO_MAX_FOREST {MAX_FOREST_TRUST_BINARY_DATA_SIZE = 131072,MAX_RECORDS_IN_FOREST_TRUST_INFO = 4000,};
enum MACRO_MAX_LANMAN {MAX_LANMAN_MESSAGE_ID = 5899,};
enum MACRO_MAX_LINKID {MAX_LINKID_TEXT = 48,};
enum MACRO_MAX_REASON {MAX_REASON_NAME_LEN = 64,MAX_REASON_DESC_LEN = 256,MAX_REASON_BUGID_LEN = 32,MAX_REASON_COMMENT_LEN = 512,};
enum MACRO_MAX_STRING {MAX_STRING_LENGTH = 256,};
enum MACRO_MAX_VOLUME {MAX_VOLUME_ID_SIZE = 36,MAX_VOLUME_TEMPLATE_SIZE = 40,};
enum MACRO_MCDCOMMAND {MCDCOMMAND_RESET_STIPPLE = 0x4000,MCDCOMMAND_RENDER_PRIMITIVE = 0x8000,MCDCOMMAND_SAME_COLOR = 0x40000,};
enum MACRO_MCDCONTEXT {MCDCONTEXT_SWAPSYNC = 0x1,MCDCONTEXT_IO_PRIORITY = 0x2,};
enum MACRO_MCDSURFACE {MCDSURFACE_HWND = 0x1,};
enum MACRO_MCD_RENDER {MCD_RENDER_STATE = 0,MCD_PIXEL_STATE = 1,MCD_SCISSOR_RECT_STATE = 2,MCD_TEXENV_STATE = 3,MCD_ENABLE_STATE = 4,MCD_TEXTURE_ENABLE_STATE = 5,MCD_FOG_STATE = 6,MCD_SHADEMODEL_STATE = 7,MCD_POINTDRAW_STATE = 8,MCD_LINEDRAW_STATE = 9,MCD_POLYDRAW_STATE = 10,MCD_ALPHATEST_STATE = 11,MCD_DEPTHTEST_STATE = 12,MCD_BLEND_STATE = 13,MCD_LOGICOP_STATE = 14,MCD_FRAMEBUF_STATE = 15,MCD_LIGHT_MODEL_STATE = 16,MCD_HINT_STATE = 17,MCD_CLIP_STATE = 18,MCD_STENCILTEST_STATE = 19,MCD_ALPHA_TEST_ENABLE = 1,MCD_BLEND_ENABLE = 2,MCD_INDEX_LOGIC_OP_ENABLE = 4,MCD_DITHER_ENABLE = 8,MCD_DEPTH_TEST_ENABLE = 16,MCD_FOG_ENABLE = 32,MCD_LIGHTING_ENABLE = 64,MCD_COLOR_MATERIAL_ENABLE = 128,MCD_LINE_STIPPLE_ENABLE = 256,MCD_LINE_SMOOTH_ENABLE = 512,MCD_POINT_SMOOTH_ENABLE = 1024,MCD_POLYGON_SMOOTH_ENABLE = 2048,MCD_CULL_FACE_ENABLE = 4096,MCD_POLYGON_STIPPLE_ENABLE = 8192,MCD_SCISSOR_TEST_ENABLE = 16384,MCD_STENCIL_TEST_ENABLE = 32768,MCD_TEXTURE_1D_ENABLE = 65536,MCD_TEXTURE_2D_ENABLE = 131072,MCD_TEXTURE_GEN_S_ENABLE = 262144,MCD_TEXTURE_GEN_T_ENABLE = 524288,MCD_TEXTURE_GEN_R_ENABLE = 1048576,MCD_TEXTURE_GEN_Q_ENABLE = 2097152,MCD_NORMALIZE_ENABLE = 4194304,MCD_AUTO_NORMAL_ENABLE = 8388608,MCD_POLYGON_OFFSET_POINT_ENABLE = 16777216,MCD_POLYGON_OFFSET_LINE_ENABLE = 33554432,MCD_POLYGON_OFFSET_FILL_ENABLE = 67108864,MCD_COLOR_LOGIC_OP_ENABLE = 134217728,MCD_SPECULAR_FOG_ENABLE = 536870912,};
enum MACRO_MDMVOLFLAG {MDMVOLFLAG_LOW = 0x1,MDMVOLFLAG_MEDIUM = 0x2,MDMVOLFLAG_HIGH = 0x4,};
enum MACRO_MERGEPAINT {MERGEPAINT = 0xBB0226,};
enum MACRO_MIDIMAPPER {MIDIMAPPER = 4294967295,};
enum MACRO_MISMATCHED {MISMATCHED_HAL = 0x79,};
enum MACRO_MK_LBUTTON {MK_LBUTTON = 0x1,MK_RBUTTON = 0x2,MK_SHIFT = 0x4,MK_CONTROL = 0x8,MK_MBUTTON = 0x10,MK_XBUTTON1 = 0x20,MK_XBUTTON2 = 0x40,};
enum MACRO_MM_VOXWARE {MM_VOXWARE_CODEC = 1,MM_NORTEL_MPXAC_WAVEIN = 1,MM_NORTEL_MPXAC_WAVEOUT = 2,MM_ADDX_PCTV_DIGITALMIX = 1,MM_ADDX_PCTV_WAVEIN = 2,MM_ADDX_PCTV_WAVEOUT = 3,MM_ADDX_PCTV_MIXER = 4,MM_ADDX_PCTV_AUX_CD = 5,MM_ADDX_PCTV_AUX_LINE = 6,MM_WILDCAT_AUTOSCOREMIDIIN = 1,MM_RHETOREX_WAVEIN = 1,MM_RHETOREX_WAVEOUT = 2,MM_BTV_WAVEIN = 1,MM_BTV_WAVEOUT = 2,MM_BTV_MIDIIN = 3,MM_BTV_MIDIOUT = 4,MM_BTV_MIDISYNTH = 5,MM_BTV_AUX_LINE = 6,MM_BTV_AUX_MIC = 7,MM_BTV_AUX_CD = 8,MM_BTV_DIGITALIN = 9,MM_BTV_DIGITALOUT = 10,MM_BTV_MIDIWAVESTREAM = 11,MM_BTV_MIXER = 12,MM_ENSONIQ_SOUNDSCAPE = 16,MM_SOUNDSCAPE_WAVEOUT = 17,MM_SOUNDSCAPE_WAVEOUT_AUX = 18,MM_SOUNDSCAPE_WAVEIN = 19,MM_SOUNDSCAPE_MIDIOUT = 20,MM_SOUNDSCAPE_MIDIIN = 21,MM_SOUNDSCAPE_SYNTH = 22,MM_SOUNDSCAPE_MIXER = 23,MM_SOUNDSCAPE_AUX = 24,MM_NVIDIA_WAVEOUT = 1,MM_NVIDIA_WAVEIN = 2,MM_NVIDIA_MIDIOUT = 3,MM_NVIDIA_MIDIIN = 4,MM_NVIDIA_GAMEPORT = 5,MM_NVIDIA_MIXER = 6,MM_NVIDIA_AUX = 7,MM_OKSORI_BASE = 0,MM_OKSORI_OSR8_WAVEOUT = 1,MM_OKSORI_OSR8_WAVEIN = 2,MM_OKSORI_OSR16_WAVEOUT = 3,MM_OKSORI_OSR16_WAVEIN = 4,MM_OKSORI_FM_OPL4 = 5,MM_OKSORI_MIX_MASTER = 6,MM_OKSORI_MIX_WAVE = 7,MM_OKSORI_MIX_FM = 8,MM_OKSORI_MIX_LINE = 9,MM_OKSORI_MIX_CD = 10,MM_OKSORI_MIX_MIC = 11,MM_OKSORI_MIX_ECHO = 12,MM_OKSORI_MIX_AUX1 = 13,MM_OKSORI_MIX_LINE1 = 14,MM_OKSORI_EXT_MIC1 = 15,MM_OKSORI_EXT_MIC2 = 16,MM_OKSORI_MIDIOUT = 17,MM_OKSORI_MIDIIN = 18,MM_OKSORI_MPEG_CDVISION = 19,MM_DIACOUSTICS_DRUM_ACTION = 1,MM_KAY_ELEMETRICS_CSL = 17152,MM_KAY_ELEMETRICS_CSL_DAT = 17160,MM_KAY_ELEMETRICS_CSL_4CHANNEL = 17161,MM_CRYSTAL_CS4232_WAVEIN = 1,MM_CRYSTAL_CS4232_WAVEOUT = 2,MM_CRYSTAL_CS4232_WAVEMIXER = 3,MM_CRYSTAL_CS4232_WAVEAUX_AUX1 = 4,MM_CRYSTAL_CS4232_WAVEAUX_AUX2 = 5,MM_CRYSTAL_CS4232_WAVEAUX_LINE = 6,MM_CRYSTAL_CS4232_WAVEAUX_MONO = 7,MM_CRYSTAL_CS4232_WAVEAUX_MASTER = 8,MM_CRYSTAL_CS4232_MIDIIN = 9,MM_CRYSTAL_CS4232_MIDIOUT = 10,MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 = 13,MM_CRYSTAL_CS4232_INPUTGAIN_LOOP = 14,MM_CRYSTAL_SOUND_FUSION_WAVEIN = 21,MM_CRYSTAL_SOUND_FUSION_WAVEOUT = 22,MM_CRYSTAL_SOUND_FUSION_MIXER = 23,MM_CRYSTAL_SOUND_FUSION_MIDIIN = 24,MM_CRYSTAL_SOUND_FUSION_MIDIOUT = 25,MM_CRYSTAL_SOUND_FUSION_JOYSTICK = 26,MM_QUARTERDECK_LHWAVEIN = 0,MM_QUARTERDECK_LHWAVEOUT = 1,MM_TDK_MW_MIDI_SYNTH = 1,MM_TDK_MW_MIDI_IN = 2,MM_TDK_MW_MIDI_OUT = 3,MM_TDK_MW_WAVE_IN = 4,MM_TDK_MW_WAVE_OUT = 5,MM_TDK_MW_AUX = 6,MM_TDK_MW_MIXER = 10,MM_TDK_MW_AUX_MASTER = 100,MM_TDK_MW_AUX_BASS = 101,MM_TDK_MW_AUX_TREBLE = 102,MM_TDK_MW_AUX_MIDI_VOL = 103,MM_TDK_MW_AUX_WAVE_VOL = 104,MM_TDK_MW_AUX_WAVE_RVB = 105,MM_TDK_MW_AUX_WAVE_CHR = 106,MM_TDK_MW_AUX_VOL = 107,MM_TDK_MW_AUX_RVB = 108,MM_TDK_MW_AUX_CHR = 109,MM_DIGITAL_AUDIO_LABS_TC = 1,MM_DIGITAL_AUDIO_LABS_DOC = 2,MM_DIGITAL_AUDIO_LABS_V8 = 16,MM_DIGITAL_AUDIO_LABS_CPRO = 17,MM_DIGITAL_AUDIO_LABS_VP = 18,MM_DIGITAL_AUDIO_LABS_CDLX = 19,MM_DIGITAL_AUDIO_LABS_CTDIF = 20,MM_SEERSYS_SEERSYNTH = 1,MM_SEERSYS_SEERWAVE = 2,MM_SEERSYS_SEERMIX = 3,MM_SEERSYS_WAVESYNTH = 4,MM_SEERSYS_WAVESYNTH_WG = 5,MM_SEERSYS_REALITY = 6,MM_OSPREY_1000WAVEIN = 1,MM_OSPREY_1000WAVEOUT = 2,MM_SOUNDESIGNS_WAVEIN = 1,MM_SOUNDESIGNS_WAVEOUT = 2,MM_SSP_SNDFESWAVEIN = 1,MM_SSP_SNDFESWAVEOUT = 2,MM_SSP_SNDFESMIDIIN = 3,MM_SSP_SNDFESMIDIOUT = 4,MM_SSP_SNDFESSYNTH = 5,MM_SSP_SNDFESMIX = 6,MM_SSP_SNDFESAUX = 7,MM_ECS_AADF_MIDI_IN = 10,MM_ECS_AADF_MIDI_OUT = 11,MM_ECS_AADF_WAVE2MIDI_IN = 12,MM_AMD_INTERWAVE_WAVEIN = 1,MM_AMD_INTERWAVE_WAVEOUT = 2,MM_AMD_INTERWAVE_SYNTH = 3,MM_AMD_INTERWAVE_MIXER1 = 4,MM_AMD_INTERWAVE_MIXER2 = 5,MM_AMD_INTERWAVE_JOYSTICK = 6,MM_AMD_INTERWAVE_EX_CD = 7,MM_AMD_INTERWAVE_MIDIIN = 8,MM_AMD_INTERWAVE_MIDIOUT = 9,MM_AMD_INTERWAVE_AUX1 = 10,MM_AMD_INTERWAVE_AUX2 = 11,MM_AMD_INTERWAVE_AUX_MIC = 12,MM_AMD_INTERWAVE_AUX_CD = 13,MM_AMD_INTERWAVE_MONO_IN = 14,MM_AMD_INTERWAVE_MONO_OUT = 15,MM_AMD_INTERWAVE_EX_TELEPHONY = 16,MM_AMD_INTERWAVE_WAVEOUT_BASE = 17,MM_AMD_INTERWAVE_WAVEOUT_TREBLE = 18,MM_AMD_INTERWAVE_STEREO_ENHANCED = 19,MM_COREDYNAMICS_DYNAMIXHR = 1,MM_COREDYNAMICS_DYNASONIX_SYNTH = 2,MM_COREDYNAMICS_DYNASONIX_MIDI_IN = 3,MM_COREDYNAMICS_DYNASONIX_MIDI_OUT = 4,MM_COREDYNAMICS_DYNASONIX_WAVE_IN = 5,MM_COREDYNAMICS_DYNASONIX_WAVE_OUT = 6,MM_COREDYNAMICS_DYNASONIX_AUDIO_IN = 7,MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT = 8,MM_COREDYNAMICS_DYNAGRAFX_VGA = 9,MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN = 10,MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT = 11,MM_CANAM_CBXWAVEOUT = 1,MM_CANAM_CBXWAVEIN = 2,MM_SOFTSOUND_CODEC = 1,MM_NORRIS_VOICELINK = 1,MM_DDD_MIDILINK_MIDIIN = 1,MM_DDD_MIDILINK_MIDIOUT = 2,MM_EUPHONICS_AUX_CD = 1,MM_EUPHONICS_AUX_LINE = 2,MM_EUPHONICS_AUX_MASTER = 3,MM_EUPHONICS_AUX_MIC = 4,MM_EUPHONICS_AUX_MIDI = 5,MM_EUPHONICS_AUX_WAVE = 6,MM_EUPHONICS_FMSYNTH_MONO = 7,MM_EUPHONICS_FMSYNTH_STEREO = 8,MM_EUPHONICS_MIDIIN = 9,MM_EUPHONICS_MIDIOUT = 10,MM_EUPHONICS_MIXER = 11,MM_EUPHONICS_WAVEIN = 12,MM_EUPHONICS_WAVEOUT = 13,MM_EUPHONICS_EUSYNTH = 14,};
enum MACRO_MPEGLAYER3 {MPEGLAYER3_WFX_EXTRA_BYTES = 12,MPEGLAYER3_ID_UNKNOWN = 0,MPEGLAYER3_ID_MPEG = 1,MPEGLAYER3_ID_CONSTANTFRAMESIZE = 2,MPEGLAYER3_FLAG_PADDING_ISO = 0,MPEGLAYER3_FLAG_PADDING_ON = 1,MPEGLAYER3_FLAG_PADDING_OFF = 2,};
enum MACRO_MSV1_0_OWF {MSV1_0_OWF_PASSWORD_LENGTH = 16,MSV1_0_CRED_LM_PRESENT = 1,MSV1_0_CRED_NT_PRESENT = 2,MSV1_0_CRED_VERSION = 0,MSV1_0_NTLM3_RESPONSE_LENGTH = 16,MSV1_0_NTLM3_OWF_LENGTH = 16,MSV1_0_MAX_NTLM3_LIFE = 129600,MSV1_0_MAX_AVL_SIZE = 64000,MSV1_0_AV_FLAG_FORCE_GUEST = 1,};
enum MACRO_NCBADDNAME {NCBADDNAME = 0x30,};
enum MACRO_NCBDELNAME {NCBDELNAME = 0x31,};
enum MACRO_NCBRECVANY {NCBRECVANY = 0x16,};
enum MACRO_NOTSRCCOPY {NOTSRCCOPY = 0x330008,};
enum MACRO_NS_DEFAULT {NS_DEFAULT = 0,NS_VNS = 50,};
enum MACRO_NUMMARKERS {NUMMARKERS = 20,};
enum MACRO_NUM_POINTS {NUM_POINTS = 3,};
enum MACRO_ODT_HEADER {ODT_HEADER = 100,ODT_TAB = 101,ODT_LISTVIEW = 102,};
enum MACRO_ONESTOPBIT {ONESTOPBIT = 0,ONE5STOPBITS = 1,TWOSTOPBITS = 2,};
enum MACRO_PAGE_FAULT {PAGE_FAULT_WITH_INTERRUPTS_OFF = 0x49,};
enum MACRO_PCI_CONFIG {PCI_CONFIG_SPACE_ACCESS_FAILURE = 0xC0,};
enum MACRO_PGN_SCROLL {PGN_SCROLL = -901,};
enum MACRO_POSTSCRIPT {POSTSCRIPT_DATA = 37,POSTSCRIPT_IGNORE = 38,};
enum MACRO_PO_BEZIERS {PO_BEZIERS = 0x1,PO_ELLIPSE = 0x2,PO_ALL_INTEGERS = 0x4,PO_ENUM_AS_INTEGERS = 0x8,};
enum MACRO_PROPSETHDR {PROPSETHDR_OSVERSION_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_PSPROTOCOL {PSPROTOCOL_ASCII = 0,PSPROTOCOL_BCP = 1,PSPROTOCOL_TBCP = 2,PSPROTOCOL_BINARY = 3,};
enum MACRO_PTR_SEARCH {PTR_SEARCH_PHYS_ALL_HITS = 0x1,PTR_SEARCH_PHYS_PTE = 0x2,PTR_SEARCH_NO_SYMBOL_CHECK = 0x80000000,};
enum MACRO_PUSHBUTTON {PUSHBUTTON_TYPE_DLGPROC = 0,PUSHBUTTON_TYPE_CALLBACK = 1,PUSHBUTTON_TYPE_HTCLRADJ = 2,PUSHBUTTON_TYPE_HTSETUP = 3,};
enum MACRO_PipeFactor {PipeFactor_None = 0,PipeFactor_UserModeUpstream = 1,PipeFactor_UserModeDownstream = 2,PipeFactor_MemoryTypes = 4,PipeFactor_Flags = 8,PipeFactor_PhysicalRanges = 16,PipeFactor_OptimalRanges = 32,PipeFactor_FixedCompression = 64,PipeFactor_UnknownCompression = 128,PipeFactor_Buffers = 256,PipeFactor_Align = 512,PipeFactor_PhysicalEnd = 1024,PipeFactor_LogicalEnd = 2048,};
enum MACRO_RASTERCAPS {RASTERCAPS = 38,};
enum MACRO_REGSTR_VAL {REGSTR_VAL_MAX_HCID_LEN = 1024,};
enum MACRO_RES_UNUSED {RES_UNUSED_1 = 0x1,RES_FLUSH_CACHE = 0x2,RES_SERVICE = 0x4,};
enum MACRO_REVOCATION {REVOCATION_OID_CRL_REVOCATION = 1,};
enum MACRO_RPC_EEINFO {RPC_EEINFO_VERSION = 1,};
enum MACRO_RSA1024BIT {RSA1024BIT_KEY = 0x4000000,};
enum MACRO_RT_VERSION {RT_VERSION = 16,RT_DLGINCLUDE = 17,RT_PLUGPLAY = 19,RT_VXD = 20,RT_ANICURSOR = 21,RT_ANIICON = 22,RT_HTML = 23,RT_MANIFEST = 24,};
enum MACRO_SCS_SETSTR {SCS_SETSTR = 9,SCS_CHANGEATTR = 18,SCS_CHANGECLAUSE = 36,SCS_SETRECONVERTSTRING = 65536,SCS_QUERYRECONVERTSTRING = 131072,};
enum MACRO_SC_MANAGER {SC_MANAGER_CONNECT = 0x1,SC_MANAGER_CREATE_SERVICE = 0x2,SC_MANAGER_ENUMERATE_SERVICE = 0x4,SC_MANAGER_LOCK = 0x8,SC_MANAGER_QUERY_LOCK_STATUS = 0x10,SC_MANAGER_MODIFY_BOOT_CONFIG = 0x20,SC_MANAGER_ALL_ACCESS = 0xF003F,};
enum MACRO_SERVER_ALL {SERVER_ALL_ACCESS = 983043,SERVER_READ = 131074,SERVER_WRITE = 131075,SERVER_EXECUTE = 131074,};
enum MACRO_SERVICE_NO {SERVICE_NO_CHANGE = 0xFFFFFFFF,SERVICE_ACTIVE = 0x1,SERVICE_INACTIVE = 0x2,SERVICE_STATE_ALL = 0x3,SERVICE_CONTROL_STOP = 0x1,SERVICE_CONTROL_PAUSE = 0x2,SERVICE_CONTROL_CONTINUE = 0x3,SERVICE_CONTROL_INTERROGATE = 0x4,SERVICE_CONTROL_SHUTDOWN = 0x5,SERVICE_CONTROL_PARAMCHANGE = 0x6,SERVICE_CONTROL_NETBINDADD = 0x7,SERVICE_CONTROL_NETBINDREMOVE = 0x8,SERVICE_CONTROL_NETBINDENABLE = 0x9,SERVICE_CONTROL_NETBINDDISABLE = 0xA,SERVICE_CONTROL_DEVICEEVENT = 0xB,SERVICE_CONTROL_HARDWAREPROFILECHANGE = 0xC,SERVICE_CONTROL_POWEREVENT = 0xD,SERVICE_CONTROL_SESSIONCHANGE = 0xE,SERVICE_STOPPED = 0x1,SERVICE_START_PENDING = 0x2,SERVICE_STOP_PENDING = 0x3,SERVICE_RUNNING = 0x4,SERVICE_CONTINUE_PENDING = 0x5,SERVICE_PAUSE_PENDING = 0x6,SERVICE_PAUSED = 0x7,SERVICE_ACCEPT_STOP = 0x1,SERVICE_ACCEPT_PAUSE_CONTINUE = 0x2,SERVICE_ACCEPT_SHUTDOWN = 0x4,SERVICE_ACCEPT_PARAMCHANGE = 0x8,SERVICE_ACCEPT_NETBINDCHANGE = 0x10,SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 0x20,SERVICE_ACCEPT_POWEREVENT = 0x40,SERVICE_ACCEPT_SESSIONCHANGE = 0x80,};
enum MACRO_SETCHARSET {SETCHARSET = 772,STRETCHBLT = 2048,};
enum MACRO_SETLINECAP {SETLINECAP = 21,};
enum MACRO_SETOPTIONS {SETOPTIONS_FLAG_RESOLVE_CONFLICT = 0x1,SETOPTIONS_FLAG_KEEP_CONFLICT = 0x2,SETOPTIONS_RESULT_NO_CONFLICT = 0x0,SETOPTIONS_RESULT_CONFLICT_RESOLVED = 0x1,SETOPTIONS_RESULT_CONFLICT_REMAINED = 0x2,};
enum MACRO_SIMPLEBLOB {SIMPLEBLOB = 0x1,PUBLICKEYBLOB = 0x6,};
enum MACRO_SIZENORMAL {SIZENORMAL = 0,SIZEICONIC = 1,SIZEFULLSCREEN = 2,};
enum MACRO_SMART_READ {SMART_READ_LOG = 0xD5,SMART_WRITE_LOG = 0xD6,};
enum MACRO_STGOPTIONS {STGOPTIONS_VERSION = 2,};
enum MACRO_STM_MSGMAX {STM_MSGMAX = 0x174,};
enum MACRO_STREAM_SET {STREAM_SET_ENCRYPTION = 0x3,STREAM_CLEAR_ENCRYPTION = 0x4,};
enum MACRO_SW_INVALID {SW_INVALID = 16,SW_DENORMAL = 524288,SW_ZERODIVIDE = 8,SW_OVERFLOW = 4,SW_UNDERFLOW = 2,SW_INEXACT = 1,SW_UNEMULATED = 64,SW_SQRTNEG = 128,SW_STACKOVERFLOW = 512,SW_STACKUNDERFLOW = 1024,};
enum MACRO_SYSTEM_PTE {SYSTEM_PTE_MISUSE = 0xDA,};
enum MACRO_TARGET_MDL {TARGET_MDL_TOO_SMALL = 0x40,};
enum MACRO_TBSTYLE_EX {TBSTYLE_EX_MIXEDBUTTONS = 0x8,TBSTYLE_EX_HIDECLIPPEDBUTTONS = 0x10,TBSTYLE_EX_DOUBLEBUFFER = 0x80,};
enum MACRO_TC_NONCONF {TC_NONCONF_BORROW = 0,TC_NONCONF_SHAPE = 1,TC_NONCONF_DISCARD = 2,TC_NONCONF_BORROW_PLUS = 3,};
enum MACRO_THREAD_NOT {THREAD_NOT_MUTEX_OWNER = 0x11,};
enum MACRO_TIME_VALID {TIME_VALID_OID_GET_CTL = 1,TIME_VALID_OID_GET_CRL = 2,TIME_VALID_OID_GET_CRL_FROM_CERT = 3,TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT = 4,TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL = 5,TIME_VALID_OID_FLUSH_CTL = 1,TIME_VALID_OID_FLUSH_CRL = 2,TIME_VALID_OID_FLUSH_CRL_FROM_CERT = 3,TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT = 4,TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL = 5,};
enum MACRO_TRUSTERROR {TRUSTERROR_STEP_WVTPARAMS = 0,TRUSTERROR_STEP_FILEIO = 2,TRUSTERROR_STEP_SIP = 3,TRUSTERROR_STEP_SIPSUBJINFO = 5,TRUSTERROR_STEP_CATALOGFILE = 6,TRUSTERROR_STEP_CERTSTORE = 7,TRUSTERROR_STEP_MESSAGE = 8,TRUSTERROR_STEP_MSG_SIGNERCOUNT = 9,TRUSTERROR_STEP_MSG_INNERCNTTYPE = 10,TRUSTERROR_STEP_MSG_INNERCNT = 11,TRUSTERROR_STEP_MSG_STORE = 12,TRUSTERROR_STEP_MSG_SIGNERINFO = 13,TRUSTERROR_STEP_MSG_SIGNERCERT = 14,TRUSTERROR_STEP_MSG_CERTCHAIN = 15,TRUSTERROR_STEP_MSG_COUNTERSIGINFO = 16,TRUSTERROR_STEP_MSG_COUNTERSIGCERT = 17,TRUSTERROR_STEP_VERIFY_MSGHASH = 18,TRUSTERROR_STEP_VERIFY_MSGINDIRECTDATA = 19,TRUSTERROR_STEP_FINAL_WVTINIT = 30,TRUSTERROR_STEP_FINAL_INITPROV = 31,TRUSTERROR_STEP_FINAL_OBJPROV = 32,TRUSTERROR_STEP_FINAL_SIGPROV = 33,TRUSTERROR_STEP_FINAL_CERTPROV = 34,TRUSTERROR_STEP_FINAL_CERTCHKPROV = 35,TRUSTERROR_STEP_FINAL_POLICYPROV = 36,TRUSTERROR_STEP_FINAL_UIPROV = 37,TRUSTERROR_MAX_STEPS = 38,};
enum MACRO_UNEXPECTED {UNEXPECTED_INITIALIZATION_CALL = 0x33,};
enum MACRO_VS_Default {VS_Default = 0,VS_PptpOnly = 1,VS_PptpFirst = 2,VS_L2tpOnly = 3,VS_L2tpFirst = 4,};
enum MACRO_WINDOWS_NT {WINDOWS_NT_BANNER = 0x4000007E,};
enum MACRO_WMI_GLOBAL {WMI_GLOBAL_LOGGER_ID = 0x1,};
enum MACRO_WT_CURRENT {WT_CURRENT_VERSION = 0x200,WT_ADD_ACTION_ID_RET_RESULT_FLAG = 0x1,};
enum MACRO_X509_MULTI {X509_MULTI_BYTE_UINT = 38,X509_DSS_PUBLICKEY = 38,X509_DSS_PARAMETERS = 39,X509_DSS_SIGNATURE = 40,};
enum MACRO_X942_OTHER {X942_OTHER_INFO = 52,};
enum MACRO___REQUIRED {__REQUIRED_RPCNDR_H_VERSION__ = 475,};
enum MACRO___RPCPROXY {__RPCPROXY_H_VERSION__ = 475,};
typedef struct _976F82B52AD5D008419379398D47AE46 MARK_HANDLE_INFO;
typedef struct _MCDFRAMEBUFSTATE MCDFRAMEBUFSTATE;
typedef struct _MCDLINEDRAWSTATE MCDLINEDRAWSTATE;
typedef struct _MCDPIXELTRANSFER MCDPIXELTRANSFER;
typedef struct _MCDPOLYDRAWSTATE MCDPOLYDRAWSTATE;
typedef struct tagMCI_RECORD_PARMS MCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS MCI_STATUS_PARMS;
typedef struct tagMDICREATESTRUCTA MDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW MDICREATESTRUCTW;
typedef struct _46B8CD9DF897759D0306203A2121EA8B MENUITEMTEMPLATE;
typedef struct _MIB_IPFORWARDROW MIB_IPFORWARDROW;
typedef struct _MIB_OPAQUE_QUERY MIB_OPAQUE_QUERY;
typedef struct _MIDL_SERVER_INFO_ MIDL_SERVER_INFO;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO;
typedef struct tagMINIMIZEDMETRICS MINIMIZEDMETRICS;
typedef struct _NDIS_802_11_SSID NDIS_802_11_SSID;
typedef struct _NDIS_BPC_DEVICES NDIS_BPC_DEVICES;
typedef struct tagNEWTEXTMETRICEXA NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW NEWTEXTMETRICEXW;
typedef struct tagNMDATETIMECHANGE NMDATETIMECHANGE;
typedef struct tagNMREBARAUTOBREAK NMREBARAUTOBREAK;
typedef struct tagNMREBARCHILDSIZE NMREBARCHILDSIZE;
typedef struct tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;
typedef struct _NS_SERVICE_INFOA NS_SERVICE_INFOA;
typedef struct _NS_SERVICE_INFOW NS_SERVICE_INFOW;
typedef struct _A5A2C297D512B29747AD9A814A819610 NT_CONSOLE_PROPS;
typedef struct tagOBJECTDESCRIPTOR OBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST OBJECT_TYPE_LIST;
typedef struct _OEMFONTINSTPARAM OEMFONTINSTPARAM;
typedef int OLE_XSIZE_PIXELS;
typedef int OLE_YSIZE_PIXELS;
typedef struct oligsmwaveformat_tag OLIGSMWAVEFORMAT;
typedef struct olioprwaveformat_tag OLIOPRWAVEFORMAT;
typedef struct olisbcwaveformat_tag OLISBCWAVEFORMAT;
typedef struct _9B80566C9ECE6A73A5F898405A50FFFF OPENCARDNAME_EXA;
typedef struct _A63D84EB732F4E602FF2E049D2D99B44 OPENCARDNAME_EXW;
typedef struct _OSVERSIONINFOEXA OSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW OSVERSIONINFOEXW;
typedef struct tACMSTREAMHEADER *PACMSTREAMHEADER;
typedef struct _CERT_CHAIN_PARA *PCERT_CHAIN_PARA;
typedef struct _CERT_EXTENSIONS *PCERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE *PCERT_NAME_VALUE;
typedef struct _CERT_OTHER_NAME *PCERT_OTHER_NAME;
typedef struct _CHANGER_ELEMENT *PCHANGER_ELEMENT;
typedef struct _CMC_STATUS_INFO *PCMC_STATUS_INFO;
typedef struct _CMS_DH_KEY_INFO *PCMS_DH_KEY_INFO;
typedef struct tagCOLORADJUSTMENT *PCOLORADJUSTMENT;
typedef struct tagCOMBOBOXEXITEMA *PCOMBOBOXEXITEMA;
typedef struct tagCOMBOBOXEXITEMW *PCOMBOBOXEXITEMW;
typedef struct tagCOMPOSITIONFORM *PCOMPOSITIONFORM;
typedef IConnectionPoint *PCONNECTIONPOINT;
typedef struct _CREATE_DISK_GPT *PCREATE_DISK_GPT;
typedef struct _CREATE_DISK_MBR *PCREATE_DISK_MBR;
typedef struct _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO *PCRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB;
typedef struct _CRYPT_URL_ARRAY *PCRYPT_URL_ARRAY;
typedef struct _CTL_USAGE_MATCH *PCTL_USAGE_MATCH;
typedef struct _CUSTOMSIZEPARAM *PCUSTOMSIZEPARAM;
typedef struct _DDENABLEIRQINFO *PDDENABLEIRQINFO;
typedef struct _DD_SURFACE_MORE *PDD_SURFACE_MORE;
typedef struct IDirect3DDevice8 *PDIRECT3DDEVICE8;
typedef struct IDirect3DVolume8 *PDIRECT3DVOLUME8;
typedef struct _DISK_INT13_INFO *PDISK_INT13_INFO;
typedef struct _DISPLAY_DEVICEA *PDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW *PDISPLAY_DEVICEW;
typedef struct _DOCEVENT_ESCAPE *PDOCEVENT_ESCAPE;
typedef struct _DOCEVENT_FILTER *PDOCEVENT_FILTER;
typedef struct DRVCONFIGINFOEX *PDRVCONFIGINFOEX;
typedef struct _DSKTLSYSTEMTIME *PDSKTLSYSTEMTIME;
typedef struct _DXAPI_INTERFACE *PDXAPI_INTERFACE;
typedef struct tagEMRSELECTOBJECT *PEMRDELETEOBJECT;
typedef struct tagEMREXTCREATEPEN *PEMREXTCREATEPEN;
typedef struct tagEMREXTFLOODFILL *PEMREXTFLOODFILL;
typedef struct tagEMRGRADIENTFILL *PEMRGRADIENTFILL;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE *PEMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYLINETO16;
typedef struct tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE;
typedef struct tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW;
typedef struct tagEMRSELECTOBJECT *PEMRSELECTOBJECT;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN;
typedef struct tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR;
typedef struct _ENG_TIME_FIELDS *PENG_TIME_FIELDS;
typedef IEnumConnections *PENUMCONNECTIONS;
typedef struct tagENUMTEXTMETRICA *PENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW *PENUMTEXTMETRICW;
typedef struct _PERF_OBJECT_TYPE PERF_OBJECT_TYPE;
typedef struct _EXTSTACKTRACE32 *PEXTSTACKTRACE32;
typedef struct _EXTSTACKTRACE64 *PEXTSTACKTRACE64;
typedef void ( *PFN_CPD_MEM_FREE)(void *pvMem2Free);
typedef struct _GET_MEDIA_TYPES *PGET_MEDIA_TYPES;
typedef struct _GET_PEB_ADDRESS *PGET_PEB_ADDRESS;
typedef struct _GET_SET_SYMPATH *PGET_SET_SYMPATH;
typedef struct _GET_TEB_ADDRESS *PGET_TEB_ADDRESS;
typedef struct tagHH_SET_INFOTYPE *PHH_SET_INFOTYPE;
typedef struct _HIDD_ATTRIBUTES *PHIDD_ATTRIBUTES;
typedef struct _HIDP_VALUE_CAPS *PHIDP_VALUE_CAPS;
typedef struct icmp_echo_reply *PICMP_ECHO_REPLY;
typedef struct tagIMECHARPOSITION *PIMECHARPOSITION;
typedef struct _PIPE_TERMINATION PIPE_TERMINATION;
typedef struct _IP_ADAPTER_INFO *PIP_ADAPTER_INFO;
typedef struct tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT;
typedef struct KERB_CRYPTO_KEY *PKERB_CRYPTO_KEY;
typedef struct _12065485545C98CF3EA596DDCCDF0ED5 *PKSAC3_ROOM_TYPE;
typedef struct _C18AA754B44D3B0CE088F6A6B0863744 *PKSDISPLAYCHANGE;
typedef struct _D0C2582348DF16EE31650672742EA602 *PKSMULTIPLE_ITEM;
typedef struct _87CE1B284ED7C4D9787DE2C17B5E3229 *PKSSTREAM_HEADER;
typedef struct tagKS_AMVPDATAINFO *PKS_AMVPDATAINFO;
typedef struct _EEDA301819F8EA8D15C0ADB3D7583498 *PKS_FRAMING_ITEM;
typedef struct tagLOCALESIGNATURE *PLOCALESIGNATURE;
typedef struct tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS;
typedef struct tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW *PMCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW *PMCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW *PMCI_SAVE_PARMSW;
typedef struct _MIBICMPSTATS_EX *PMIBICMPSTATS_EX;
typedef struct _A2D3C6DF54C31D821ABE78046EA78F8E *PMIB_BOUNDARYROW;
typedef struct _MIB_IPADDRTABLE *PMIB_IPADDRTABLE;
typedef struct _MIB_IPDESTTABLE *PMIB_IPDESTTABLE;
typedef struct _MIB_IPMCAST_MFE *PMIB_IPMCAST_MFE;
typedef struct _MIB_IPMCAST_OIF *PMIB_IPMCAST_OIF;
typedef struct _MIB_OPAQUE_INFO *PMIB_OPAQUE_INFO;
typedef struct _MONITOR_INFO_1A *PMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W *PMONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A *PMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W *PMONITOR_INFO_2W;
typedef struct tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT;
typedef struct _MPR_INTERFACE_0 *PMPR_INTERFACE_0;
typedef struct _MPR_TRANSPORT_0 *PMPR_TRANSPORT_0;
typedef struct _NABTSFEC_BUFFER *PNABTSFEC_BUFFER;
typedef struct _NDIS_802_11_WEP *PNDIS_802_11_WEP;
typedef struct NDIS_BPC_COMMIT *PNDIS_BPC_COMMIT;
typedef struct NDIS_BPC_STATUS *PNDIS_BPC_STATUS;
typedef struct _NDIS_WLAN_BSSID *PNDIS_WLAN_BSSID;
typedef struct _NETWORK_ADDRESS *PNETWORK_ADDRESS;
typedef struct _EAF9C7AE235510435B672EB36E720462 *PNMCBEDRAGBEGINA;
typedef struct _8C7301159AF0C1BFC267CBF90877013D *PNMCBEDRAGBEGINW;
typedef struct _NOTIFYICONDATAA *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW *PNOTIFYICONDATAW;
typedef struct _NTFS_STATISTICS *PNTFS_STATISTICS;
typedef struct _PACKEDEVENTINFO *PPACKEDEVENTINFO;
typedef struct _PATHNAME_BUFFER *PPATHNAME_BUFFER;
typedef struct _PERF_DATA_BLOCK *PPERF_DATA_BLOCK;
typedef struct _PIPE_DIMENSIONS *PPIPE_DIMENSIONS;
typedef struct _PRINTER_INFO_1A *PPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W *PPRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A *PPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W *PPRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A *PPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W *PPRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A *PPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W *PPRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A *PPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W *PPRINTER_INFO_7W;
typedef struct _PRINTER_INFO_8A *PPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W *PPRINTER_INFO_8W;
typedef struct _PRINTER_INFO_9A *PPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W *PPRINTER_INFO_9W;
typedef struct _QUOTA_LIMITS_EX *PQUOTA_LIMITS_EX;
typedef struct _REASSIGN_BLOCKS *PREASSIGN_BLOCKS;
typedef struct tagRECONVERTSTRING *PRECONVERTSTRING;
typedef struct tagRID_DEVICE_INFO *PRID_DEVICE_INFO;
typedef struct _PROPSHEETHEADERA PROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW PROPSHEETHEADERW;
typedef struct _PROPSHEETUI_INFO PROPSHEETUI_INFO;
typedef struct _PROVIDOR_INFO_1A PROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W PROVIDOR_INFO_1W;
typedef struct _PROVIDOR_INFO_2A PROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W PROVIDOR_INFO_2W;
typedef struct _PROV_ENUMALGS_EX PROV_ENUMALGS_EX;
typedef struct _RPC_ASYNC_STATE *PRPC_ASYNC_STATE;
typedef struct _SENDCMDINPARAMS *PSENDCMDINPARAMS;
typedef struct _SERVICE_ADDRESS *PSERVICE_ADDRESS;
typedef struct _PSFEATURE_OUTPUT PSFEATURE_OUTPUT;
typedef struct _SIMULATE_CAPS_1 *PSIMULATE_CAPS_1;
typedef struct _SP_DEVINFO_DATA *PSP_DEVINFO_DATA;
typedef struct _TAPE_STATISTICS *PTAPE_STATISTICS;
typedef struct tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS;
typedef struct _VIDEOPARAMETERS *PVIDEOPARAMETERS;
typedef struct _WINDOWS_IAS_SET *PWINDOWS_IAS_SET;
typedef struct tagWNODE_TOO_SMALL *PWNODE_TOO_SMALL;
typedef struct _WSANSClassInfoA *PWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *PWSANSCLASSINFOW;
typedef struct _WST_BUFFER_LINE *PWST_BUFFER_LINE;
struct PublishingWizard;
typedef struct _QOS_SHAPING_RATE QOS_SHAPING_RATE;
typedef struct _RAS_CONNECTION_0 RAS_CONNECTION_0;
typedef struct _RAS_CONNECTION_1 RAS_CONNECTION_1;
typedef struct _READCONTROLSPACE READCONTROLSPACE;
typedef void *RPC_AUTHZ_HANDLE;
typedef struct _3EC5757393EE7828D79CED73ACE876F0 RPC_IF_ID_VECTOR;
typedef struct _RPC_SECURITY_QOS RPC_SECURITY_QOS;
typedef struct _AD47B7B6770F26FF00FF8EF46A9765CE RPC_STATS_VECTOR;
typedef struct _RSVP_POLICY_INFO RSVP_POLICY_INFO;
typedef struct _RSVP_STATUS_INFO RSVP_STATUS_INFO;
enum RefreshConstants {REFRESH_NORMAL = 0x0,REFRESH_IFEXPIRED = 0x1,REFRESH_COMPLETELY = 0x3,};
typedef struct tagRemHMETAFILEPICT RemHMETAFILEPICT;
typedef struct _wireSAFEARR_DISPATCH SAFEARR_DISPATCH;
typedef struct _SCARD_IO_REQUEST SCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 SCARD_T0_COMMAND;
typedef struct _D26D25374C75FEF3AD181CCFA77BD37F SCARD_T0_REQUEST;
typedef struct _8B9777916333A4B8A3A60FA8F93F002E SCARD_T1_REQUEST;
typedef struct _SENDCMDOUTPARAMS SENDCMDOUTPARAMS;
typedef struct sockaddr_storage SOCKADDR_STORAGE;
typedef struct sonarcwaveformat_tag SONARCWAVEFORMAT;
typedef struct _SPC_SP_OPUS_INFO SPC_SP_OPUS_INFO;
typedef struct _SPLCLIENT_INFO_1 SPLCLIENT_INFO_1;
typedef struct _SPLCLIENT_INFO_2 SPLCLIENT_INFO_2;
typedef struct _SURFACEALIGNMENT SURFACEALIGNMENT;
struct SWbemEventSource;
struct SWbemPropertySet;
typedef struct _SYSTEM_ALARM_ACE SYSTEM_ALARM_ACE;
typedef struct _SYSTEM_AUDIT_ACE SYSTEM_AUDIT_ACE;
typedef struct _TAPE_WRITE_MARKS TAPE_WRITE_MARKS;
typedef struct _TOKEN_PRIVILEGES TOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS TOKEN_STATISTICS;
enum TransmissionMode {BDA_XMIT_MODE_NOT_SET = 0xFFFFFFFF,BDA_XMIT_MODE_NOT_DEFINED = 0x0,BDA_XMIT_MODE_2K = 0x1,BDA_XMIT_MODE_8K = 0x2,BDA_XMIT_MODE_MAX = 0x3,};
typedef struct _UNI_CODEPAGEINFO UNI_CODEPAGEINFO;
typedef struct _UNI_GLYPHSETDATA UNI_GLYPHSETDATA;
typedef struct _8363E2736332812C7A22E557719FD114 USN_JOURNAL_DATA;
struct UserNotification;
typedef struct wavefilter_volume_tag VOLUMEWAVEFILTER;
typedef struct tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
typedef struct _WIN32_FIND_DATAA WIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW WIN32_FIND_DATAW;
typedef struct tagWNODE_EVENT_ITEM WNODE_EVENT_ITEM;
typedef struct _WSANETWORKEVENTS WSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN WSAPROTOCOLCHAIN;
struct WbemLocalAddrRes;
enum WbemTextFlagEnum {wbemTextFlagNoFlavors = 0x1,};
enum _D3DRESOURCETYPE {D3DRTYPE_SURFACE = 0x1,D3DRTYPE_VOLUME = 0x2,D3DRTYPE_TEXTURE = 0x3,D3DRTYPE_VOLUMETEXTURE = 0x4,D3DRTYPE_CUBETEXTURE = 0x5,D3DRTYPE_VERTEXBUFFER = 0x6,D3DRTYPE_INDEXBUFFER = 0x7,D3DRTYPE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREBLEND {D3DTBLEND_DECAL = 0x1,D3DTBLEND_MODULATE = 0x2,D3DTBLEND_DECALALPHA = 0x3,D3DTBLEND_MODULATEALPHA = 0x4,D3DTBLEND_DECALMASK = 0x5,D3DTBLEND_MODULATEMASK = 0x6,D3DTBLEND_COPY = 0x7,D3DTBLEND_ADD = 0x8,D3DTBLEND_FORCE_DWORD = 0x7FFFFFFF,};
enum _FT_MEMBER_STATE {FtMemberHealthy = 0x0,FtMemberRegenerating = 0x1,FtMemberOrphaned = 0x2,};
enum _PARTITION_STYLE {PARTITION_STYLE_MBR = 0x0,PARTITION_STYLE_GPT = 0x1,PARTITION_STYLE_RAW = 0x2,};
enum _RPC_ASYNC_EVENT {RpcCallComplete = 0x0,RpcSendComplete = 0x1,RpcReceiveComplete = 0x2,};
enum _tagACENUMOPTION {ACEO_NONE = 0x0,ACEO_MOSTRECENTFIRST = 0x1,ACEO_FIRSTUNUSED = 0x10000,};
struct sockaddr_storage {short ss_family;char __ss_pad1[6];long long __ss_align;char __ss_pad2[112];};
enum tagACTIVATEFLAGS {ACTIVATE_WINDOWLESS = 0x1,};
enum tagOLEGETMONIKER {OLEGETMONIKER_ONLYIFTHERE = 0x1,OLEGETMONIKER_FORCEASSIGN = 0x2,OLEGETMONIKER_UNASSIGN = 0x3,OLEGETMONIKER_TEMPFORUSER = 0x4,};
enum tagOLEVERBATTRIB {OLEVERBATTRIB_NEVERDIRTIES = 0x1,OLEVERBATTRIB_ONCONTAINERMENU = 0x2,};
enum tagPROPBAG2_TYPE {PROPBAG2_TYPE_UNDEFINED = 0x0,PROPBAG2_TYPE_DATA = 0x1,PROPBAG2_TYPE_URL = 0x2,PROPBAG2_TYPE_OBJECT = 0x3,PROPBAG2_TYPE_STREAM = 0x4,PROPBAG2_TYPE_STORAGE = 0x5,PROPBAG2_TYPE_MONIKER = 0x6,};
enum tagRASPROJECTION {RASP_Amb = 0x10000,RASP_PppNbf = 0x803F,RASP_PppIpx = 0x802B,RASP_PppIp = 0x8021,RASP_PppCcp = 0x80FD,RASP_PppLcp = 0xC021,RASP_Slip = 0x20000,};
enum tagUSERCLASSTYPE {USERCLASSTYPE_FULL = 0x1,USERCLASSTYPE_SHORT = 0x2,USERCLASSTYPE_APPNAME = 0x3,};
enum tag_WBEM_LOCKING {WBEM_FLAG_ALLOW_READ = 0x1,};
enum tag_WMI_OBJ_TEXT {WMI_OBJ_TEXT_CIM_DTD_2_0 = 0x1,WMI_OBJ_TEXT_WMI_DTD_2_0 = 0x2,WMI_OBJ_TEXT_WMI_EXT1 = 0x3,WMI_OBJ_TEXT_WMI_EXT2 = 0x4,WMI_OBJ_TEXT_WMI_EXT3 = 0x5,WMI_OBJ_TEXT_WMI_EXT4 = 0x6,WMI_OBJ_TEXT_WMI_EXT5 = 0x7,WMI_OBJ_TEXT_WMI_EXT6 = 0x8,WMI_OBJ_TEXT_WMI_EXT7 = 0x9,WMI_OBJ_TEXT_WMI_EXT8 = 0xA,WMI_OBJ_TEXT_WMI_EXT9 = 0xB,WMI_OBJ_TEXT_WMI_EXT10 = 0xC,WMI_OBJ_TEXT_LAST = 0xD,};
typedef struct _userHENHMETAFILE userHENHMETAFILE;
typedef struct tagAASHELLMENUITEM AASHELLMENUITEM;
typedef struct tACMSTREAMHEADER ACMSTREAMHEADER;
typedef struct adpcmwaveformat_tag ADPCMWAVEFORMAT;
typedef struct _FB10B385A80E8C43E2FAF14F8CAB4B13 AVIStreamHeader;
typedef struct _CERT_CHAIN_PARA CERT_CHAIN_PARA;
typedef struct _CERT_EXTENSIONS CERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE CERT_NAME_VALUE;
typedef struct _CERT_OTHER_NAME CERT_OTHER_NAME;
typedef struct _CHANGER_ELEMENT CHANGER_ELEMENT;
typedef struct _CMC_STATUS_INFO CMC_STATUS_INFO;
typedef struct _CMS_DH_KEY_INFO CMS_DH_KEY_INFO;
typedef struct tagCOLORADJUSTMENT COLORADJUSTMENT;
typedef struct tagCOMBOBOXEXITEMA COMBOBOXEXITEMA;
typedef struct tagCOMBOBOXEXITEMW COMBOBOXEXITEMW;
typedef struct tagCOMPOSITIONFORM COMPOSITIONFORM;
typedef struct _CONTROL_SERVICE CONTROL_SERVICE;
typedef struct _CREATE_DISK_GPT CREATE_DISK_GPT;
typedef struct _CREATE_DISK_MBR CREATE_DISK_MBR;
typedef struct _CRYPT_ATTRIBUTE CRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB CRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO CRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB CRYPT_UINT_BLOB;
typedef struct _CRYPT_URL_ARRAY CRYPT_URL_ARRAY;
typedef struct _CTL_USAGE_MATCH CTL_USAGE_MATCH;
typedef struct _CUSTOMSIZEPARAM CUSTOMSIZEPARAM;
enum ComponentStatus {StatusActive = 0x0,StatusInactive = 0x1,StatusUnavailable = 0x2,};
typedef struct _D3DDP_PTRSTRIDE D3DDP_PTRSTRIDE;
typedef struct _D3DHAL_DP2CLEAR D3DHAL_DP2CLEAR;
typedef struct _D3DHAL_DP2WINFO D3DHAL_DP2WINFO;
typedef struct _D3DLIGHTINGCAPS D3DLIGHTINGCAPS;
typedef struct _D3DNTHAL_DP2EXT D3DNTHAL_DP2EXT;
typedef struct _D3DSURFACE_DESC D3DSURFACE_DESC;
typedef struct _DDENABLEIRQINFO DDENABLEIRQINFO;
typedef struct _DDHAL_CALLBACKS DDHAL_CALLBACKS;
typedef struct _DDVIDEOPORTCAPS DDVIDEOPORTCAPS;
typedef struct _DDVIDEOPORTDESC DDVIDEOPORTDESC;
typedef struct _DDVIDEOPORTINFO DDVIDEOPORTINFO;
typedef struct _DD_SURFACE_MORE DD_SURFACE_MORE;
typedef struct _DISK_INT13_INFO DISK_INT13_INFO;
typedef struct _DISPLAY_DEVICEA DISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW DISPLAY_DEVICEW;
typedef struct _947C6FA139885FA2B0DE7F2A3FDD942C DLGITEMTEMPLATE;
typedef struct _DLLVERSIONINFO2 DLLVERSIONINFO2;
typedef struct _DMUS_BUFFERDESC DMUS_BUFFERDESC;
typedef struct _DMUS_CLOCKINFO7 DMUS_CLOCKINFO7;
typedef struct _DMUS_CLOCKINFO8 DMUS_CLOCKINFO8;
typedef struct _DMUS_INSTRUMENT DMUS_INSTRUMENT;
typedef struct _DMUS_SYNTHSTATS DMUS_SYNTHSTATS;
typedef struct _DOCEVENT_ESCAPE DOCEVENT_ESCAPE;
typedef struct _DOCEVENT_FILTER DOCEVENT_FILTER;
typedef struct _DSFXI3DL2Reverb DSFXI3DL2Reverb;
typedef struct _DSFXWavesReverb DSFXWavesReverb;
typedef struct _DSKTLSYSTEMTIME DSKTLSYSTEMTIME;
typedef struct _PRIVKEYVER3 DSSPRIVKEY_VER3;
typedef struct _DXAPI_INTERFACE DXAPI_INTERFACE;
typedef struct tagEMRSELECTOBJECT EMRDELETEOBJECT;
typedef struct tagEMREXTCREATEPEN EMREXTCREATEPEN;
typedef struct tagEMREXTFLOODFILL EMREXTFLOODFILL;
typedef struct tagEMRGRADIENTFILL EMRGRADIENTFILL;
typedef struct tagEMRPOLYLINE16 EMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE EMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE16 EMRPOLYLINETO16;
typedef struct tagEMRPOLYPOLYLINE EMRPOLYPOLYLINE;
typedef struct tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
typedef struct tagEMRSELECTOBJECT EMRSELECTOBJECT;
typedef struct tagEMRSELECTCLIPPATH EMRSETTEXTALIGN;
typedef struct tagEMRSETTEXTCOLOR EMRSETTEXTCOLOR;
typedef struct _ENG_TIME_FIELDS ENG_TIME_FIELDS;
typedef struct tagENUMTEXTMETRICA ENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW ENUMTEXTMETRICW;
typedef struct _C6832D807A2747A4D0CBF13E34E0B28B EXP_DARWIN_LINK;
typedef struct _EXTSTACKTRACE32 EXTSTACKTRACE32;
typedef struct _EXTSTACKTRACE64 EXTSTACKTRACE64;
typedef struct _FILEDESCRIPTORA FILEDESCRIPTORA;
typedef struct _FILEDESCRIPTORW FILEDESCRIPTORW;
struct FolderItemVerbs {struct FolderItemVerbsVtbl *lpVtbl;};
typedef struct _GENERIC_MAPPING GENERIC_MAPPING;
typedef struct _GET_MEDIA_TYPES GET_MEDIA_TYPES;
typedef struct _GET_PEB_ADDRESS GET_PEB_ADDRESS;
typedef struct _GET_SET_SYMPATH GET_SET_SYMPATH;
typedef struct _GET_TEB_ADDRESS GET_TEB_ADDRESS;
typedef struct tagHH_SET_INFOTYPE HH_SET_INFOTYPE;
typedef struct _HIDD_ATTRIBUTES HIDD_ATTRIBUTES;
typedef struct _HIDP_VALUE_CAPS HIDP_VALUE_CAPS;
struct HWINEVENTHOOK__ {int unused;};
struct IActionProgress {struct IActionProgressVtbl *lpVtbl;};
struct IAsyncOperation {struct IAsyncOperationVtbl *lpVtbl;};
typedef struct icmp_echo_reply ICMP_ECHO_REPLY;
typedef struct _195B5ED187AD0EF03C07D6DC4096CC78 ICSETSTATUSPROC;
struct ICatInformation {struct ICatInformationVtbl *lpVtbl;};
struct IClassActivator {struct IClassActivatorVtbl *lpVtbl;};
struct IClientSecurity {struct IClientSecurityVtbl *lpVtbl;};
struct IColumnProvider {struct IColumnProviderVtbl *lpVtbl;};
struct ICommDlgBrowser {struct ICommDlgBrowserVtbl *lpVtbl;};
struct ICreateTypeInfo {struct ICreateTypeInfoVtbl *lpVtbl;};
struct ICreateTypeLib2 {struct ICreateTypeLib2Vtbl *lpVtbl;};
struct IDelegateFolder {struct IDelegateFolderVtbl *lpVtbl;};
struct IFileSearchBand {struct IFileSearchBandVtbl *lpVtbl;};
struct IFileViewerSite {struct IFileViewerSiteVtbl *lpVtbl;};
struct IFolderBandPriv {struct IFolderBandPrivVtbl *lpVtbl;};
struct IFolderViewHost {struct IFolderViewHostVtbl *lpVtbl;};
struct IFontEventsDisp {struct IFontEventsDispVtbl *lpVtbl;};
struct IHWEventHandler {struct IHWEventHandlerVtbl *lpVtbl;};
struct IHttpNegotiate2 {struct IHttpNegotiate2Vtbl *lpVtbl;};
struct IItemNameLimits {struct IItemNameLimitsVtbl *lpVtbl;};
typedef struct tagIMECHARPOSITION IMECHARPOSITION;
struct IObjectIdentity {struct IObjectIdentityVtbl *lpVtbl;};
struct IObjectWithSite {struct IObjectWithSiteVtbl *lpVtbl;};
struct IOleControlSite {struct IOleControlSiteVtbl *lpVtbl;};
struct IOleInPlaceSite {struct IOleInPlaceSiteVtbl *lpVtbl;};
struct IOleUndoManager {struct IOleUndoManagerVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_INFO IP_ADAPTER_INFO;
struct IPassportWizard {struct IPassportWizardVtbl *lpVtbl;};
struct IPersistFolder2 {struct IPersistFolder2Vtbl *lpVtbl;};
struct IPersistFolder3 {struct IPersistFolder3Vtbl *lpVtbl;};
struct IPersistMoniker {struct IPersistMonikerVtbl *lpVtbl;};
struct IPersistStorage {struct IPersistStorageVtbl *lpVtbl;};
struct IPrintOemCommon {struct IPrintOemCommonVtbl *lpVtbl;};
struct IProfferService {struct IProfferServiceVtbl *lpVtbl;};
struct IProgressDialog {struct IProgressDialogVtbl *lpVtbl;};
struct IProgressNotify {struct IProgressNotifyVtbl *lpVtbl;};
struct IReferenceClock {struct IReferenceClockVtbl *lpVtbl;};
struct IRemoteComputer {struct IRemoteComputerVtbl *lpVtbl;};
struct IRpcProxyBuffer {struct IRpcProxyBufferVtbl *lpVtbl;};
struct IRunnableObject {struct IRunnableObjectVtbl *lpVtbl;};
struct ISWbemLastError {struct ISWbemLastErrorVtbl *lpVtbl;};
struct ISWbemMethodSet {struct ISWbemMethodSetVtbl *lpVtbl;};
struct ISWbemObjectSet {struct ISWbemObjectSetVtbl *lpVtbl;};
struct ISWbemPrivilege {struct ISWbemPrivilegeVtbl *lpVtbl;};
struct ISWbemQualifier {struct ISWbemQualifierVtbl *lpVtbl;};
struct ISWbemRefresher {struct ISWbemRefresherVtbl *lpVtbl;};
struct IServerSecurity {struct IServerSecurityVtbl *lpVtbl;};
struct IShellDispatch2 {struct IShellDispatch2Vtbl *lpVtbl;};
struct IShellDispatch3 {struct IShellDispatch3Vtbl *lpVtbl;};
struct IShellDispatch4 {struct IShellDispatch4Vtbl *lpVtbl;};
struct IShellLinkDual2 {struct IShellLinkDual2Vtbl *lpVtbl;};
struct IShellNameSpace {struct IShellNameSpaceVtbl *lpVtbl;};
struct IStdMarshalInfo {struct IStdMarshalInfoVtbl *lpVtbl;};
struct IURLSearchHook2 {struct IURLSearchHook2Vtbl *lpVtbl;};
struct IUserEventTimer {struct IUserEventTimerVtbl *lpVtbl;};
struct IWbemCallResult {struct IWbemCallResultVtbl *lpVtbl;};
struct IWbemHiPerfEnum {struct IWbemHiPerfEnumVtbl *lpVtbl;};
struct IWbemObjectSink {struct IWbemObjectSinkVtbl *lpVtbl;};
struct IXMLDOMDocument {struct IXMLDOMDocumentVtbl *lpVtbl;};
struct IXMLDOMNodeList {struct IXMLDOMNodeListVtbl *lpVtbl;};
struct IXMLDOMNotation {struct IXMLDOMNotationVtbl *lpVtbl;};
struct IXMLHttpRequest {struct IXMLHttpRequestVtbl *lpVtbl;};
struct ImageProperties;
struct ImageRecompress;
typedef struct tagKBDLLHOOKSTRUCT KBDLLHOOKSTRUCT;
typedef struct _12065485545C98CF3EA596DDCCDF0ED5 KSAC3_ROOM_TYPE;
typedef struct _C18AA754B44D3B0CE088F6A6B0863744 KSDISPLAYCHANGE;
typedef struct _D0C2582348DF16EE31650672742EA602 KSMULTIPLE_ITEM;
typedef struct _742D342C7048E2C3902DF7570B72F6FC KSRELATIVEEVENT;
typedef struct _87CE1B284ED7C4D9787DE2C17B5E3229 KSSTREAM_HEADER;
typedef struct tagKS_AMVPDATAINFO KS_AMVPDATAINFO;
typedef struct _EEDA301819F8EA8D15C0ADB3D7583498 KS_FRAMING_ITEM;
typedef struct tagLOCALESIGNATURE LOCALESIGNATURE;
typedef struct tagACCESSTIMEOUT *LPACCESSTIMEOUT;
typedef struct _AD_GUARANTEED *LPAD_GUARANTEED;
typedef struct tagANIMATIONINFO *LPANIMATIONINFO;
typedef IAutoComplete2 *LPAUTOCOMPLETE2;
typedef struct tagCANDIDATEFORM *LPCANDIDATEFORM;
typedef struct tagCANDIDATEINFO *LPCANDIDATEINFO;
typedef struct tagCANDIDATELIST *LPCANDIDATELIST;
typedef struct tagCapDriverCaps *LPCAPDRIVERCAPS;
typedef IClassFactory2 *LPCLASSFACTORY2;
typedef struct tagCREATESTRUCTA *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW *LPCREATESTRUCTW;
typedef ICreateTypeLib *LPCREATETYPELIB;
typedef struct _D3DCLIPSTATUS *LPD3DCLIPSTATUS;
typedef struct _D3DCOLORVALUE *LPD3DCOLORVALUE;
typedef struct _D3DDeviceDesc *LPD3DDEVICEDESC;
typedef struct _D3DMATRIXLOAD *LPD3DMATRIXLOAD;
typedef struct _D3DPICKRECORD *LPD3DPICKRECORD;
typedef struct _DDHAL_BLTDATA *LPDDHAL_BLTDATA;
typedef struct _DDMONITORINFO *LPDDMONITORINFO;
typedef struct _DDPIXELFORMAT *LPDDPIXELFORMAT;
typedef struct _DDSURFACEDATA *LPDDSURFACEDATA;
typedef struct _DDSURFACEDESC *LPDDSURFACEDESC;
typedef struct _AA58E045DEB5C5C814AE34C120D7C43C *LPDDVERSIONDATA;
typedef struct tagDEBUGHOOKINFO *LPDEBUGHOOKINFO;
typedef struct tagDRVCONFIGINFO *LPDRVCONFIGINFO;
typedef struct _DSBUFFERDESC1 *LPDSBUFFERDESC1;
typedef struct _DSCBUFFERDESC *LPDSCBUFFERDESC;
typedef struct _DSCEFFECTDESC *LPDSCEFFECTDESC;
typedef struct tagENHMETAHEADER *LPENHMETAHEADER;
typedef struct tagENHMETARECORD *LPENHMETARECORD;
typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef IExtractImage2 *LPEXTRACTIMAGE2;
typedef struct tagFONTSIGNATURE *LPFONTSIGNATURE;
typedef struct _GRADIENT_RECT *LPGRADIENT_RECT;
typedef struct tagGUITHREADINFO *LPGUITHREADINFO;
typedef struct tagHARDWAREINPUT *LPHARDWAREINPUT;
typedef struct _HD_HITTESTINFO *LPHDHITTESTINFO;
typedef struct _HEAPALIGNMENT *LPHEAPALIGNMENT;
typedef struct tagHIGHCONTRASTA *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW *LPHIGHCONTRASTW;
typedef IHttpNegotiate *LPHTTPNEGOTIATE;
typedef IInitializeSpy *LPINITIALIZESPY;
typedef struct tagINTERFACEDATA *LPINTERFACEDATA;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
typedef struct tagLVHITTESTINFO *LPLVHITTESTINFO;
typedef struct tagMCI_SET_PARMS *LPMCI_SET_PARMS;
typedef struct tagMENUITEMINFOA *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW *LPMENUITEMINFOW;
typedef IMessageFilter *LPMESSAGEFILTER;
typedef struct tagMIDIOUTCAPS2A *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W *LPMIDIOUTCAPS2W;
typedef struct midiproptempo_tag *LPMIDIPROPTEMPO;
typedef struct tagMIXERCONTROLA *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW *LPMIXERCONTROLW;
typedef struct _MODEMSETTINGS *LPMODEMSETTINGS;
typedef struct tagMSGBOXPARAMSA *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW *LPMSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW *LPMULTIKEYHELPW;
typedef struct _NETINFOSTRUCT *LPNETINFOSTRUCT;
typedef struct _NETRESOURCE2A *LPNETRESOURCE2A;
typedef struct _NETRESOURCE2W *LPNETRESOURCE2W;
typedef struct _BEA4C6939D98A17C28446F73864087A3 *LPNMCBEENDEDITA;
typedef struct _2E2AA9F03C861A9A9D27DBF19670D54B *LPNMCBEENDEDITW;
typedef struct tagNMHDDISPINFOA *LPNMHDDISPINFOA;
typedef struct tagNMHDDISPINFOW *LPNMHDDISPINFOW;
typedef struct tagNMLVCACHEHINT *LPNMLVCACHEHINT;
typedef struct tagLVDISPINFO *LPNMLVDISPINFOA;
typedef struct tagLVDISPINFOW *LPNMLVDISPINFOW;
typedef struct tagNMLVFINDITEMA *LPNMLVFINDITEMA;
typedef struct tagNMLVFINDITEMW *LPNMLVFINDITEMW;
typedef struct _9D580AF0AEFB1291AC1A38F1BACA0CDC *LPNMTBDISPINFOA;
typedef struct _1C7B1951FFF3947E82177A9E3997A43B *LPNMTBDISPINFOW;
typedef struct tagNMTTDISPINFOA *LPNMTTDISPINFOA;
typedef struct tagNMTTDISPINFOW *LPNMTTDISPINFOW;
typedef struct tagTVDISPINFOA *LPNMTVDISPINFOA;
typedef struct tagTVDISPINFOW *LPNMTVDISPINFOW;
typedef IOleClientSite *LPOLECLIENTSITE;
typedef struct _FC03820C0C9B455049C143518E71A23B *LPOPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 *LPOPENCARDNAMEW;
typedef struct tagOFNA *LPOPENFILENAMEA;
typedef struct tagOFNW *LPOPENFILENAMEW;
typedef struct tagPSDA *LPPAGESETUPDLGA;
typedef struct tagPSDW *LPPAGESETUPDLGW;
typedef struct pcmwaveformat_tag *LPPCMWAVEFORMAT;
typedef IPersistFolder *LPPERSISTFOLDER;
typedef IPersistMemory *LPPERSISTMEMORY;
typedef IPersistStream *LPPERSISTSTREAM;
typedef struct _PORT_INFO_FFA *LPPORT_INFO_FFA;
typedef struct _PORT_INFO_FFW *LPPORT_INFO_FFW;
typedef struct _PRINTPROVIDOR *LPPRINTPROVIDOR;
typedef IPropertyPage2 *LPPROPERTYPAGE2;
typedef IQuickActivate *LPQUICKACTIVATE;
typedef struct _RB_HITTESTINFO *LPRBHITTESTINFO;
typedef struct tagREGISTERWORDA *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW *LPREGISTERWORDW;
typedef struct _SCARD_ATRMASK *LPSCARD_ATRMASK;
typedef struct tagSCROLLBARINFO *LPSCROLLBARINFO;
typedef struct _SERVICE_INFOA *LPSERVICE_INFOA;
typedef struct _SERVICE_INFOW *LPSERVICE_INFOW;
typedef struct _63C7C0E53552AFE1EE8EC0B0F6807449 *LPSHELLHOOKINFO;
typedef struct _SHQUERYRBINFO *LPSHQUERYRBINFO;
typedef struct _SOCKADDR_IRDA *LPSOCKADDR_IRDA;
typedef struct _C8E3A74D850A8EB44C7483CB257B5DD1 *LPTBBUTTONINFOA;
typedef struct _AA1FD51437B6FE081639C5575C92216B *LPTBBUTTONINFOW;
typedef struct tagTBSAVEPARAMSA *LPTBSAVEPARAMSA;
typedef struct tagTCHITTESTINFO *LPTCHITTESTINFO;
typedef struct tagTCITEMHEADERA *LPTCITEMHEADERA;
typedef struct tagTCITEMHEADERW *LPTCITEMHEADERW;
typedef struct tagTVHITTESTINFO *LPTVHITTESTINFO;
typedef struct tagWAVEOUTCAPS2A *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W *LPWAVEOUTCAPS2W;
typedef struct _WSACOMPLETION *LPWSACOMPLETION;
typedef struct _OVERLAPPED *LPWSAOVERLAPPED;
typedef struct _WSPPROC_TABLE *LPWSPPROC_TABLE;
enum MACRO_ACM_OPENA {ACM_OPENA = 1124,ACM_OPENW = 1127,ACM_OPEN = 1124,ACM_PLAY = 1125,ACM_STOP = 1126,};
enum MACRO_ACPI_BIOS {ACPI_BIOS_ERROR = 0xA5,FP_EMULATION_ERROR = 0xA6,};
enum MACRO_ALTERNATE {ALTERNATE = 1,WINDING = 2,};
enum MACRO_ALTNUMPAD {ALTNUMPAD_BIT = 0x4000000,};
enum MACRO_ARCONTENT {ARCONTENT_AUTORUNINF = 0x2,ARCONTENT_AUDIOCD = 0x4,ARCONTENT_DVDMOVIE = 0x8,ARCONTENT_BLANKCD = 0x10,ARCONTENT_BLANKDVD = 0x20,ARCONTENT_UNKNOWNCONTENT = 0x40,ARCONTENT_AUTOPLAYPIX = 0x80,ARCONTENT_AUTOPLAYMUSIC = 0x100,ARCONTENT_AUTOPLAYVIDEO = 0x200,};
enum MACRO_ATTEMPTED {ATTEMPTED_SWITCH_FROM_DPC = 0xB8,};
enum MACRO_AVAILABLE {FLS_MAXIMUM_AVAILABLE = 128,TLS_MINIMUM_AVAILABLE = 64,};
enum MACRO_BIGENDIAN {BIGENDIAN = 0x0,LITTLEENDIAN = 0x1,};
enum MACRO_BITSPIXEL {BITSPIXEL = 12,};
enum MACRO_BLACKNESS {BLACKNESS = 0x42,};
enum MACRO_BROADCAST {BROADCAST_QUERY_DENY = 0x424D5144,};
enum MACRO_BUS_ERROR {DATA_BUS_ERROR = 0x2E,INSTRUCTION_BUS_ERROR = 0x2F,};
enum MACRO_CBR_BLOCK {CBR_BLOCK = -1,};
enum MACRO_CCHILDREN {CCHILDREN_TITLEBAR = 5,CCHILDREN_SCROLLBAR = 5,};
enum MACRO_CERT_HASH {CERT_HASH_LENGTH = 20,CREDUI_MAX_MESSAGE_LENGTH = 32767,CREDUI_MAX_CAPTION_LENGTH = 128,CREDUI_MAX_GENERIC_TARGET_LENGTH = 32767,CREDUI_MAX_DOMAIN_TARGET_LENGTH = 337,CREDUI_MAX_USERNAME_LENGTH = 513,CREDUI_MAX_PASSWORD_LENGTH = 256,};
enum MACRO_CFSEPCHAR {CFSEPCHAR = 43,};
enum MACRO_CF_ACCEPT {CF_ACCEPT = 0x0,CF_REJECT = 0x1,CF_DEFER = 0x2,};
enum MACRO_CONNECT_E {CONNECT_E_FIRST = 0x80040200,CONNECT_E_LAST = 0x8004020F,CONNECT_S_FIRST = 0x40200,CONNECT_S_LAST = 0x4020F,CONNECT_E_NOCONNECTION = 0x80040200,CONNECT_E_ADVISELIMIT = 0x80040201,CONNECT_E_CANNOTCONNECT = 0x80040202,CONNECT_E_OVERRIDDEN = 0x80040203,};
enum MACRO_CONTEXT_E {CONTEXT_E_FIRST = 0x8004E000,CONTEXT_E_LAST = 0x8004E02F,CONTEXT_S_FIRST = 0x4E000,CONTEXT_S_LAST = 0x4E02F,CONTEXT_E_ABORTED = 0x8004E002,CONTEXT_E_ABORTING = 0x8004E003,CONTEXT_E_NOCONTEXT = 0x8004E004,CONTEXT_E_WOULD_DEADLOCK = 0x8004E005,CONTEXT_E_SYNCH_TIMEOUT = 0x8004E006,CONTEXT_E_OLDREF = 0x8004E007,CONTEXT_E_ROLENOTFOUND = 0x8004E00C,CONTEXT_E_TMNOTAVAILABLE = 0x8004E00F,};
enum MACRO_CONVERT10 {CONVERT10_E_FIRST = 0x800401C0,CONVERT10_E_LAST = 0x800401CF,CONVERT10_S_FIRST = 0x401C0,CONVERT10_S_LAST = 0x401CF,CONVERT10_E_OLESTREAM_GET = 0x800401C0,CONVERT10_E_OLESTREAM_PUT = 0x800401C1,CONVERT10_E_OLESTREAM_FMT = 0x800401C2,CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = 0x800401C3,CONVERT10_E_STG_FMT = 0x800401C4,CONVERT10_E_STG_NO_STD_STREAM = 0x800401C5,CONVERT10_E_STG_DIB_TO_BITMAP = 0x800401C6,};
enum MACRO_CRYPT_ASN {CRYPT_ASN_ENCODING = 0x1,CRYPT_NDR_ENCODING = 0x2,};
enum MACRO_CRYPT_KEY {CRYPT_KEY_LEN = 7,CRYPT_TXT_LEN = 8,};
enum MACRO_CS_ENABLE {CS_ENABLE = 0x1,CS_DISABLE = 0x2,CS_DELETE_TRANSFORM = 0x3,};
enum MACRO_CTL_ENTRY {CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 0x1,};
enum MACRO_CURVECAPS {CURVECAPS = 28,};
enum MACRO_D3DCREATE {D3DCREATE_FPU_PRESERVE = 0x2,D3DCREATE_MULTITHREADED = 0x4,D3DCREATE_PUREDEVICE = 0x10,D3DCREATE_SOFTWARE_VERTEXPROCESSING = 0x20,D3DCREATE_HARDWARE_VERTEXPROCESSING = 0x40,D3DCREATE_MIXED_VERTEXPROCESSING = 0x80,D3DCREATE_DISABLE_DRIVER_MANAGEMENT = 0x100,};
enum MACRO_D3DCURSOR {D3DCURSOR_IMMEDIATE_UPDATE = 0x1,};
enum MACRO_D3DFORMAT {D3DFORMAT_OP_TEXTURE = 0x1,D3DFORMAT_OP_VOLUMETEXTURE = 0x2,D3DFORMAT_OP_CUBETEXTURE = 0x4,D3DFORMAT_OP_OFFSCREEN_RENDERTARGET = 0x8,D3DFORMAT_OP_SAME_FORMAT_RENDERTARGET = 0x10,D3DFORMAT_OP_ZSTENCIL = 0x40,D3DFORMAT_OP_ZSTENCIL_WITH_ARBITRARY_COLOR_DEPTH = 0x80,D3DFORMAT_OP_SAME_FORMAT_UP_TO_ALPHA_RENDERTARGET = 0x100,D3DFORMAT_OP_DISPLAYMODE = 0x400,D3DFORMAT_OP_3DACCELERATION = 0x800,D3DFORMAT_OP_PIXELSIZE = 0x1000,};
enum MACRO_D3DHALDP2 {D3DHALDP2_USERMEMVERTICES = 0x1,D3DHALDP2_EXECUTEBUFFER = 0x2,D3DHALDP2_SWAPVERTEXBUFFER = 0x4,D3DHALDP2_SWAPCOMMANDBUFFER = 0x8,D3DHALDP2_REQVERTEXBUFSIZE = 0x10,D3DHALDP2_REQCOMMANDBUFSIZE = 0x20,D3DHALDP2_VIDMEMVERTEXBUF = 0x40,D3DHALDP2_VIDMEMCOMMANDBUF = 0x80,};
enum MACRO_D3DNTHAL2 {D3DNTHAL2_CB32_SETRENDERTARGET = 0x1,};
enum MACRO_D3DNTHAL3 {D3DNTHAL3_CB32_CLEAR2 = 0x1,D3DNTHAL3_CB32_RESERVED = 0x2,D3DNTHAL3_CB32_VALIDATETEXTURESTAGESTATE = 0x4,D3DNTHAL3_CB32_DRAWPRIMITIVES2 = 0x8,};
enum MACRO_D3DSTATUS {D3DSTATUS_CLIPUNIONLEFT = 1,D3DSTATUS_CLIPUNIONRIGHT = 2,D3DSTATUS_CLIPUNIONTOP = 4,D3DSTATUS_CLIPUNIONBOTTOM = 8,D3DSTATUS_CLIPUNIONFRONT = 16,D3DSTATUS_CLIPUNIONBACK = 32,D3DSTATUS_CLIPUNIONGEN0 = 64,D3DSTATUS_CLIPUNIONGEN1 = 128,D3DSTATUS_CLIPUNIONGEN2 = 256,D3DSTATUS_CLIPUNIONGEN3 = 512,D3DSTATUS_CLIPUNIONGEN4 = 1024,D3DSTATUS_CLIPUNIONGEN5 = 2048,D3DSTATUS_CLIPINTERSECTIONLEFT = 4096,D3DSTATUS_CLIPINTERSECTIONRIGHT = 8192,D3DSTATUS_CLIPINTERSECTIONTOP = 16384,D3DSTATUS_CLIPINTERSECTIONBOTTOM = 32768,D3DSTATUS_CLIPINTERSECTIONFRONT = 65536,D3DSTATUS_CLIPINTERSECTIONBACK = 131072,D3DSTATUS_CLIPINTERSECTIONGEN0 = 262144,D3DSTATUS_CLIPINTERSECTIONGEN1 = 524288,D3DSTATUS_CLIPINTERSECTIONGEN2 = 1048576,D3DSTATUS_CLIPINTERSECTIONGEN3 = 2097152,D3DSTATUS_CLIPINTERSECTIONGEN4 = 4194304,D3DSTATUS_CLIPINTERSECTIONGEN5 = 8388608,D3DSTATUS_ZNOTVISIBLE = 16777216,D3DSTATUS_CLIPUNIONALL = 4095,D3DSTATUS_CLIPINTERSECTIONALL = 16773120,D3DSTATUS_DEFAULT = 33550336,};
enum MACRO_D3DVBCAPS {D3DVBCAPS_SYSTEMMEMORY = 0x800,D3DVBCAPS_WRITEONLY = 0x10000,D3DVBCAPS_OPTIMIZED = 0x80000000,D3DVBCAPS_DONOTCLIP = 0x1,};
enum MACRO_DBL_RADIX {DBL_RADIX = 2,DBL_ROUNDS = 1,};
enum MACRO_DCIESCAPE {DCIESCAPE = 5,};
enum MACRO_DC_ACTIVE {DC_ACTIVE = 0x1,DC_SMALLCAP = 0x2,DC_ICON = 0x4,DC_TEXT = 0x8,DC_INBUTTON = 0x10,DC_GRADIENT = 0x20,DC_BUTTONS = 0x1000,};
enum MACRO_DDBLTFAST {DDBLTFAST_NOCOLORKEY = 0x0,DDBLTFAST_SRCCOLORKEY = 0x1,DDBLTFAST_DESTCOLORKEY = 0x2,DDBLTFAST_WAIT = 0x10,DDBLTFAST_DONOTWAIT = 0x20,};
enum MACRO_DDENUMRET {DDENUMRET_CANCEL = 0,DDENUMRET_OK = 1,};
enum MACRO_DDHALINFO {DDHALINFO_ISPRIMARYDISPLAY = 0x1,DDHALINFO_MODEXILLEGAL = 0x2,DDHALINFO_GETDRIVERINFOSET = 0x4,DDHALINFO_GETDRIVERINFO2 = 0x8,};
enum MACRO_DDMCQUERY {DDMCQUERY_READ = 0x1,};
enum MACRO_DDOSDCAPS {DDOSDCAPS_OPTCOMPRESSED = 0x1,DDOSDCAPS_OPTREORDERED = 0x2,DDOSDCAPS_MONOLITHICMIPMAP = 0x4,DDOSDCAPS_VALIDSCAPS = 0x30004800,DDOSDCAPS_VALIDOSCAPS = 0x7,};
enum MACRO_DDRAWILCL {DDRAWILCL_HASEXCLUSIVEMODE = 0x1,DDRAWILCL_ISFULLSCREEN = 0x2,DDRAWILCL_SETCOOPCALLED = 0x4,DDRAWILCL_ACTIVEYES = 0x8,DDRAWILCL_ACTIVENO = 0x10,DDRAWILCL_HOOKEDHWND = 0x20,DDRAWILCL_ALLOWMODEX = 0x40,DDRAWILCL_V1SCLBEHAVIOUR = 0x80,DDRAWILCL_MODEHASBEENCHANGED = 0x100,DDRAWILCL_CREATEDWINDOW = 0x200,DDRAWILCL_DIRTYDC = 0x400,DDRAWILCL_DISABLEINACTIVATE = 0x800,DDRAWILCL_CURSORCLIPPED = 0x1000,DDRAWILCL_EXPLICITMONITOR = 0x2000,DDRAWILCL_MULTITHREADED = 0x4000,DDRAWILCL_FPUSETUP = 0x8000,DDRAWILCL_POWEREDDOWN = 0x10000,DDRAWILCL_DIRECTDRAW7 = 0x20000,DDRAWILCL_ATTEMPTEDD3DCONTEXT = 0x40000,DDRAWILCL_FPUPRESERVE = 0x80000,DDRAWILCL_DX8DRIVER = 0x100000,DDRAWILCL_DIRECTDRAW8 = 0x200000,};
enum MACRO_DDRAWIPAL {DDRAWIPAL_256 = 0x1,DDRAWIPAL_16 = 0x2,DDRAWIPAL_GDI = 0x4,DDRAWIPAL_STORED_8 = 0x8,DDRAWIPAL_STORED_16 = 0x10,DDRAWIPAL_STORED_24 = 0x20,DDRAWIPAL_EXCLUSIVE = 0x40,DDRAWIPAL_INHEL = 0x80,DDRAWIPAL_DIRTY = 0x100,DDRAWIPAL_ALLOW256 = 0x200,DDRAWIPAL_4 = 0x400,DDRAWIPAL_2 = 0x800,DDRAWIPAL_STORED_8INDEX = 0x1000,DDRAWIPAL_ALPHA = 0x2000,};
enum MACRO_DDVPBCAPS {DDVPBCAPS_SOURCE = 0x1,DDVPBCAPS_DESTINATION = 0x2,};
enum MACRO_DEVHTADJF {DEVHTADJF_COLOR_DEVICE = 0x1,DEVHTADJF_ADDITIVE_DEVICE = 0x2,};
enum MACRO_DFS_ERROR {DFS_ERROR_CREATE_DIRECTORY_FAILURE = 0xC00038A6,DFS_ERROR_CREATE_REPARSEPOINT_FAILURE = 0xC00038A7,DFS_ERROR_UNSUPPORTED_FILESYSTEM = 0xC00038A8,DFS_ERROR_OVERLAPPING_DIRECTORIES = 0xC00038A9,DFS_ERROR_AD_WRITE_ERROR = 0xC00038AA,DFS_ERROR_AD_READ_ERROR = 0xC00038AB,DFS_INFO_ACTIVEDIRECTORY_ONLINE = 0x400038AC,DFS_ERROR_TOO_MANY_ERRORS = 0xC00038AD,DFS_ERROR_WINSOCKINIT_FAILED = 0xC00038AE,DFS_ERROR_SECURITYINIT_FAILED = 0xC00038AF,DFS_ERROR_THREADINIT_FAILED = 0xC00038B0,DFS_ERROR_SITECACHEINIT_FAILED = 0xC00038B1,DFS_ERROR_ROOTSYNCINIT_FAILED = 0xC00038B2,DFS_ERROR_CREATEEVENT_FAILED = 0xC00038B3,DFS_ERROR_COMPUTERINFO_FAILED = 0xC00038B4,DFS_ERROR_CLUSTERINFO_FAILED = 0xC00038B5,DFS_ERROR_DCINFO_FAILED = 0xC00038B6,DFS_ERROR_PREFIXTABLE_FAILED = 0xC00038B7,DFS_ERROR_HANDLENAMESPACE_FAILED = 0xC00038B8,DFS_ERROR_REGISTERSTORE_FAILED = 0xC00038B9,DFS_ERROR_REFLECTIONENGINE_FAILED = 0xC00038BA,DFS_ERROR_ACTIVEDIRECTORY_OFFLINE = 0xC00038BB,DFS_ERROR_SITESUPPOR_FAILED = 0xC00038BC,DFS_ERROR_DSINITIALCONNECT_FAILED = 0xC00038BD,DFS_ERROR_DSCONNECT_FAILED = 0x800038BE,DFS_ERROR_ROOT_TURNED_OFF = 0xC00038BF,DFS_INFO_ROOT_TURNED_ON = 0x400038C0,DFS_INFO_DS_RECONNECTED = 0x400038C1,DFS_ERROR_NO_DFS_DATA = 0xC00038C2,DFS_INFO_FINISH_INIT = 0x400038C3,DFS_INFO_RECONNECT_DATA = 0x400038C4,DFS_INFO_FINISH_BUILDING_NAMESPACE = 0x400038C5,DFS_ERROR_ON_ROOT = 0x800038C6,DFS_ERROR_MUTLIPLE_ROOTS_NOT_SUPPORTED = 0xC00038C7,DFS_WARN_DOMAIN_REFERRAL_OVERFLOW = 0x800038C8,DFS_INFO_DOMAIN_REFERRAL_MIN_OVERFLOW = 0x400038C9,};
enum MACRO_DISCHARGE {DISCHARGE_POLICY_CRITICAL = 0,DISCHARGE_POLICY_LOW = 1,};
enum MACRO_DMCOLLATE {DMCOLLATE_FALSE = 0,DMCOLLATE_TRUE = 1,};
enum MACRO_DRAFTMODE {DRAFTMODE = 7,QUERYESCSUPPORT = 8,};
enum MACRO_DSBSTATUS {DSBSTATUS_PLAYING = 0x1,DSBSTATUS_BUFFERLOST = 0x2,DSBSTATUS_LOOPING = 0x4,DSBSTATUS_LOCHARDWARE = 0x8,DSBSTATUS_LOCSOFTWARE = 0x10,DSBSTATUS_TERMINATED = 0x20,};
enum MACRO_DSBVOLUME {DSBVOLUME_MIN = -10000,DSBVOLUME_MAX = 0,};
enum MACRO_DSCBSTART {DSCBSTART_LOOPING = 0x1,};
enum MACRO_DSCFX_AEC {DSCFX_AEC_MODE_PASS_THROUGH = 0x0,DSCFX_AEC_MODE_HALF_DUPLEX = 0x1,DSCFX_AEC_MODE_FULL_DUPLEX = 0x2,DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED = 0x0,DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED = 0x1,DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED = 0x2,DSCFX_AEC_STATUS_CURRENTLY_CONVERGED = 0x8,};
enum MACRO_DSSPEAKER {DSSPEAKER_DIRECTOUT = 0x0,DSSPEAKER_HEADPHONE = 0x1,DSSPEAKER_MONO = 0x2,DSSPEAKER_QUAD = 0x3,DSSPEAKER_STEREO = 0x4,DSSPEAKER_SURROUND = 0x5,DSSPEAKER_5POINT1 = 0x6,DSSPEAKER_7POINT1 = 0x7,DSSPEAKER_GEOMETRY_MIN = 0x5,DSSPEAKER_GEOMETRY_NARROW = 0xA,DSSPEAKER_GEOMETRY_WIDE = 0x14,DSSPEAKER_GEOMETRY_MAX = 0xB4,};
enum MACRO_DSS_TIMER {DSS_TIMER_EVENT = 0x1,DSS_FLUSH_EVENT = 0x2,};
enum MACRO_DSTINVERT {DSTINVERT = 0x550009,};
enum MACRO_DUPLICATE {DUPLICATE_CLOSE_SOURCE = 0x1,DUPLICATE_SAME_ACCESS = 0x2,};
enum MACRO_ENCRYPTED {ENCRYPTED_PWLEN = 16,SESSION_PWLEN = 24,};
enum MACRO_EVENT_FRS {EVENT_FRS_ROOT_NOT_VALID = 0xC00034E3,EVENT_FRS_STAGE_NOT_VALID = 0xC00034E4,EVENT_FRS_OVERLAPS_LOGGING = 0xC00034E5,EVENT_FRS_OVERLAPS_WORKING = 0xC00034E6,EVENT_FRS_OVERLAPS_STAGE = 0xC00034E7,EVENT_FRS_OVERLAPS_ROOT = 0xC00034E8,EVENT_FRS_OVERLAPS_OTHER_STAGE = 0xC00034E9,EVENT_FRS_PREPARE_ROOT_FAILED = 0xC00034EA,EVENT_FRS_BAD_REG_DATA = 0x800034EB,EVENT_FRS_JOIN_FAIL_TIME_SKEW = 0xC00034EC,EVENT_FRS_RMTCO_TIME_SKEW = 0xC00034ED,EVENT_FRS_CANT_OPEN_STAGE = 0xC00034EE,EVENT_FRS_CANT_OPEN_PREINSTALL = 0xC00034EF,EVENT_FRS_REPLICA_SET_CREATE_FAIL = 0xC00034F0,EVENT_FRS_REPLICA_SET_CREATE_OK = 0x400034F1,EVENT_FRS_REPLICA_SET_CXTIONS = 0x400034F2,EVENT_FRS_IN_ERROR_STATE = 0xC00034F3,EVENT_FRS_REPLICA_NO_ROOT_CHANGE = 0xC00034F4,EVENT_FRS_DUPLICATE_IN_CXTION_SYSVOL = 0xC00034F5,EVENT_FRS_DUPLICATE_IN_CXTION = 0xC00034F6,EVENT_FRS_ROOT_HAS_MOVED = 0xC00034F7,EVENT_FRS_ERROR_REPLICA_SET_DELETED = 0x800034F8,EVENT_FRS_REPLICA_IN_JRNL_WRAP_ERROR = 0xC00034F9,EVENT_FRS_DS_POLL_ERROR_SUMMARY = 0x800034FA,EVENT_PS_GPC_REGISTER_FAILED = 0xC00036B0,EVENT_PS_NO_RESOURCES_FOR_INIT = 0xC00036B1,EVENT_PS_REGISTER_PROTOCOL_FAILED = 0xC00036B2,EVENT_PS_REGISTER_MINIPORT_FAILED = 0xC00036B3,EVENT_PS_BAD_BESTEFFORT_LIMIT = 0x80003714,EVENT_PS_QUERY_OID_GEN_MAXIMUM_FRAME_SIZE = 0xC0003715,EVENT_PS_QUERY_OID_GEN_MAXIMUM_TOTAL_SIZE = 0xC0003716,EVENT_PS_QUERY_OID_GEN_LINK_SPEED = 0xC0003717,EVENT_PS_BINDING_FAILED = 0xC0003718,EVENT_PS_MISSING_ADAPTER_REGISTRY_DATA = 0xC0003719,EVENT_PS_REGISTER_ADDRESS_FAMILY_FAILED = 0xC000371A,EVENT_PS_INIT_DEVICE_FAILED = 0xC000371B,EVENT_PS_WMI_INSTANCE_NAME_FAILED = 0xC000371C,EVENT_PS_WAN_LIMITED_BESTEFFORT = 0x8000371D,EVENT_PS_RESOURCE_POOL = 0xC000371E,EVENT_PS_ADMISSIONCONTROL_OVERFLOW = 0x8000371F,EVENT_PS_NETWORK_ADDRESS_FAIL = 0xC0003720,};
enum MACRO_EVENT_MIN {EVENT_MIN = 0x1,EVENT_MAX = 0x7FFFFFFF,EVENT_SYSTEM_SOUND = 0x1,EVENT_SYSTEM_ALERT = 0x2,EVENT_SYSTEM_FOREGROUND = 0x3,EVENT_SYSTEM_MENUSTART = 0x4,EVENT_SYSTEM_MENUEND = 0x5,EVENT_SYSTEM_MENUPOPUPSTART = 0x6,EVENT_SYSTEM_MENUPOPUPEND = 0x7,EVENT_SYSTEM_CAPTURESTART = 0x8,EVENT_SYSTEM_CAPTUREEND = 0x9,EVENT_SYSTEM_MOVESIZESTART = 0xA,EVENT_SYSTEM_MOVESIZEEND = 0xB,EVENT_SYSTEM_CONTEXTHELPSTART = 0xC,EVENT_SYSTEM_CONTEXTHELPEND = 0xD,EVENT_SYSTEM_DRAGDROPSTART = 0xE,EVENT_SYSTEM_DRAGDROPEND = 0xF,EVENT_SYSTEM_DIALOGSTART = 0x10,EVENT_SYSTEM_DIALOGEND = 0x11,EVENT_SYSTEM_SCROLLINGSTART = 0x12,EVENT_SYSTEM_SCROLLINGEND = 0x13,EVENT_SYSTEM_SWITCHSTART = 0x14,EVENT_SYSTEM_SWITCHEND = 0x15,EVENT_SYSTEM_MINIMIZESTART = 0x16,EVENT_SYSTEM_MINIMIZEEND = 0x17,EVENT_CONSOLE_CARET = 0x4001,EVENT_CONSOLE_UPDATE_REGION = 0x4002,EVENT_CONSOLE_UPDATE_SIMPLE = 0x4003,EVENT_CONSOLE_UPDATE_SCROLL = 0x4004,EVENT_CONSOLE_LAYOUT = 0x4005,EVENT_CONSOLE_START_APPLICATION = 0x4006,EVENT_CONSOLE_END_APPLICATION = 0x4007,};
enum MACRO_EVENT_SRV {EVENT_SRV_SERVICE_FAILED = 0xC00007D0,EVENT_SRV_RESOURCE_SHORTAGE = 0xC00007D1,EVENT_SRV_CANT_CREATE_DEVICE = 0xC00007D2,EVENT_SRV_CANT_CREATE_PROCESS = 0xC00007D3,EVENT_SRV_CANT_CREATE_THREAD = 0xC00007D4,EVENT_SRV_UNEXPECTED_DISC = 0xC00007D5,EVENT_SRV_INVALID_REQUEST = 0xC00007D6,EVENT_SRV_CANT_OPEN_NPFS = 0xC00007D7,EVENT_SRV_CANT_GROW_TABLE = 0x800007D9,EVENT_SRV_CANT_START_SCAVENGER = 0xC00007DA,EVENT_SRV_IRP_STACK_SIZE = 0xC00007DB,EVENT_SRV_NETWORK_ERROR = 0x800007DC,EVENT_SRV_DISK_FULL = 0x800007DD,EVENT_SRV_NO_VIRTUAL_MEMORY = 0xC00007E0,EVENT_SRV_NONPAGED_POOL_LIMIT = 0xC00007E1,EVENT_SRV_PAGED_POOL_LIMIT = 0xC00007E2,EVENT_SRV_NO_NONPAGED_POOL = 0xC00007E3,EVENT_SRV_NO_PAGED_POOL = 0xC00007E4,EVENT_SRV_NO_WORK_ITEM = 0x800007E5,EVENT_SRV_NO_FREE_CONNECTIONS = 0x800007E6,EVENT_SRV_NO_FREE_RAW_WORK_ITEM = 0x800007E7,EVENT_SRV_NO_BLOCKING_IO = 0x800007E8,EVENT_SRV_DOS_ATTACK_DETECTED = 0x800007E9,EVENT_SRV_TOO_MANY_DOS = 0x800007EA,EVENT_SRV_OUT_OF_WORK_ITEM_DOS = 0x800007EB,EVENT_SRV_KEY_NOT_FOUND = 0xC00009C5,EVENT_SRV_KEY_NOT_CREATED = 0xC00009C6,EVENT_SRV_NO_TRANSPORTS_BOUND = 0xC00009C7,EVENT_SRV_CANT_BIND_TO_TRANSPORT = 0x800009C8,EVENT_SRV_CANT_BIND_DUP_NAME = 0xC00009C9,EVENT_SRV_INVALID_REGISTRY_VALUE = 0x800009CA,EVENT_SRV_INVALID_SD = 0x800009CB,EVENT_SRV_CANT_LOAD_DRIVER = 0x800009CC,EVENT_SRV_CANT_UNLOAD_DRIVER = 0x800009CD,EVENT_SRV_CANT_MAP_ERROR = 0x800009CE,EVENT_SRV_CANT_RECREATE_SHARE = 0x800009CF,EVENT_SRV_CANT_CHANGE_DOMAIN_NAME = 0x800009D0,EVENT_RDR_RESOURCE_SHORTAGE = 0x80000BB9,EVENT_RDR_CANT_CREATE_DEVICE = 0x80000BBA,EVENT_RDR_CANT_CREATE_THREAD = 0x80000BBB,EVENT_RDR_CANT_SET_THREAD = 0x80000BBC,EVENT_RDR_INVALID_REPLY = 0x80000BBD,EVENT_RDR_INVALID_SMB = 0x80000BBE,EVENT_RDR_INVALID_LOCK_REPLY = 0x80000BBF,EVENT_RDR_FAILED_UNLOCK = 0x80000BC1,EVENT_RDR_CLOSE_BEHIND = 0x80000BC3,EVENT_RDR_UNEXPECTED_ERROR = 0x80000BC4,EVENT_RDR_TIMEOUT = 0x80000BC5,EVENT_RDR_INVALID_OPLOCK = 0x80000BC6,EVENT_RDR_CONNECTION_REFERENCE = 0x80000BC7,EVENT_RDR_SERVER_REFERENCE = 0x80000BC8,EVENT_RDR_SMB_REFERENCE = 0x80000BC9,EVENT_RDR_ENCRYPT = 0x80000BCA,EVENT_RDR_CONNECTION = 0x80000BCB,EVENT_RDR_MAXCMDS = 0x80000BCD,EVENT_RDR_OPLOCK_SMB = 0x80000BCE,EVENT_RDR_DISPOSITION = 0x80000BCF,EVENT_RDR_CONTEXTS = 0x80000BD0,EVENT_RDR_WRITE_BEHIND_FLUSH_FAILED = 0x80000BD1,EVENT_RDR_AT_THREAD_MAX = 0x80000BD2,EVENT_RDR_CANT_READ_REGISTRY = 0x80000BD3,EVENT_RDR_TIMEZONE_BIAS_TOO_LARGE = 0x80000BD4,EVENT_RDR_PRIMARY_TRANSPORT_CONNECT_FAILED = 0x80000BD5,EVENT_RDR_DELAYED_SET_ATTRIBUTES_FAILED = 0x80000BD6,EVENT_RDR_DELETEONCLOSE_FAILED = 0x80000BD7,EVENT_RDR_CANT_BIND_TRANSPORT = 0x80000BD8,EVENT_RDR_CANT_REGISTER_ADDRESS = 0x80000BD9,EVENT_RDR_CANT_GET_SECURITY_CONTEXT = 0x80000BDA,EVENT_RDR_CANT_BUILD_SMB_HEADER = 0x80000BDB,EVENT_RDR_SECURITY_SIGNATURE_MISMATCH = 0x80000BDC,EVENT_TCPIP6_STARTED = 0x40000C1C,EVENT_STREAMS_STRLOG = 0xC0000FA0,EVENT_STREAMS_ALLOCB_FAILURE = 0x80000FA1,EVENT_STREAMS_ALLOCB_FAILURE_CNT = 0x80000FA2,EVENT_STREAMS_ESBALLOC_FAILURE = 0x80000FA3,EVENT_STREAMS_ESBALLOC_FAILURE_CNT = 0x80000FA4,EVENT_TCPIP_CREATE_DEVICE_FAILED = 0xC0001004,EVENT_TCPIP_NO_RESOURCES_FOR_INIT = 0xC0001005,EVENT_TCPIP_TOO_MANY_NETS = 0xC0001059,EVENT_TCPIP_NO_MASK = 0xC000105A,EVENT_TCPIP_INVALID_ADDRESS = 0xC000105B,EVENT_TCPIP_INVALID_MASK = 0xC000105C,EVENT_TCPIP_NO_ADAPTER_RESOURCES = 0xC000105D,EVENT_TCPIP_DHCP_INIT_FAILED = 0x8000105E,EVENT_TCPIP_ADAPTER_REG_FAILURE = 0xC000105F,EVENT_TCPIP_INVALID_DEFAULT_GATEWAY = 0x80001060,EVENT_TCPIP_NO_ADDRESS_LIST = 0xC0001061,EVENT_TCPIP_NO_MASK_LIST = 0xC0001062,EVENT_TCPIP_NO_BINDINGS = 0xC0001063,EVENT_TCPIP_IP_INIT_FAILED = 0xC0001064,EVENT_TCPIP_TOO_MANY_GATEWAYS = 0x80001065,EVENT_TCPIP_ADDRESS_CONFLICT1 = 0xC0001066,EVENT_TCPIP_ADDRESS_CONFLICT2 = 0xC0001067,EVENT_TCPIP_NTE_CONTEXT_LIST_FAILURE = 0xC0001068,EVENT_TCPIP_MEDIA_CONNECT = 0x40001069,EVENT_TCPIP_MEDIA_DISCONNECT = 0x4000106A,EVENT_TCPIP_TCP_INIT_FAILED = 0xC0001081,EVENT_TCPIP_UDP_LIMIT_REACHED = 0x800010A9,EVENT_IPSEC_NO_RESOURCES_FOR_INIT = 0xC00010B9,EVENT_IPSEC_CREATE_DEVICE_FAILED = 0xC00010BA,EVENT_IPSEC_BAD_SPI_RECEIVED = 0xC00010BB,EVENT_IPSEC_UNEXPECTED_CLEARTEXT = 0xC00010BC,EVENT_IPSEC_AUTH_FAILURE = 0xC00010BD,EVENT_IPSEC_BAD_PACKET_SYNTAX = 0xC00010BE,EVENT_IPSEC_BAD_PROTOCOL_RECEIVED = 0xC00010BF,EVENT_IPSEC_GENERIC_FAILURE = 0xC00010C0,EVENT_IPSEC_NEG_FAILURE = 0xC00010C1,EVENT_IPSEC_DROP_PACKET_INBOUND = 0x400010C2,EVENT_IPSEC_DROP_PACKET_OUTBOUND = 0x400010C3,EVENT_IPSEC_SET_BLOCK_MODE = 0xC00010C4,EVENT_IPSEC_SET_BYPASS_MODE = 0x400010C5,EVENT_IPSEC_SET_SECURE_MODE = 0x400010C6,EVENT_IPSEC_BOOT_BYPASS_MODE = 0x400010C7,EVENT_IPSEC_BOOT_BLOCK_MODE = 0x400010C8,EVENT_IPSEC_BOOT_STATEFUL_MODE = 0x400010C9,EVENT_NBT_CREATE_DRIVER = 0xC00010CC,EVENT_NBT_OPEN_REG_PARAMS = 0xC00010CD,EVENT_NBT_NO_BACKUP_WINS = 0x800010CE,EVENT_NBT_NO_WINS = 0x800010CF,EVENT_NBT_BAD_BACKUP_WINS_ADDR = 0x800010D0,EVENT_NBT_BAD_PRIMARY_WINS_ADDR = 0x800010D1,EVENT_NBT_NAME_SERVER_ADDRS = 0xC00010D2,EVENT_NBT_CREATE_ADDRESS = 0xC00010D3,EVENT_NBT_CREATE_CONNECTION = 0xC00010D4,EVENT_NBT_NON_OS_INIT = 0xC00010D5,EVENT_NBT_TIMERS = 0xC00010D6,EVENT_NBT_CREATE_DEVICE = 0xC00010D7,EVENT_NBT_NO_DEVICES = 0x800010D8,EVENT_NBT_OPEN_REG_LINKAGE = 0xC00010D9,EVENT_NBT_READ_BIND = 0xC00010DA,EVENT_NBT_READ_EXPORT = 0xC00010DB,EVENT_NBT_OPEN_REG_NAMESERVER = 0x800010DC,EVENT_SCOPE_LABEL_TOO_LONG = 0x800010DD,EVENT_SCOPE_TOO_LONG = 0x800010DE,EVENT_NBT_DUPLICATE_NAME = 0xC00010DF,EVENT_NBT_NAME_RELEASE = 0xC00010E0,EVENT_NBT_DUPLICATE_NAME_ERROR = 0xC00010E1,EVENT_NBT_NO_RESOURCES = 0xC00010E2,EVENT_NDIS_RESOURCE_CONFLICT = 0xC0001388,EVENT_NDIS_OUT_OF_RESOURCE = 0xC0001389,EVENT_NDIS_HARDWARE_FAILURE = 0xC000138A,EVENT_NDIS_ADAPTER_NOT_FOUND = 0xC000138B,EVENT_NDIS_INTERRUPT_CONNECT = 0xC000138C,EVENT_NDIS_DRIVER_FAILURE = 0xC000138D,EVENT_NDIS_BAD_VERSION = 0xC000138E,EVENT_NDIS_TIMEOUT = 0x8000138F,EVENT_NDIS_NETWORK_ADDRESS = 0xC0001390,EVENT_NDIS_UNSUPPORTED_CONFIGURATION = 0xC0001391,EVENT_NDIS_INVALID_VALUE_FROM_ADAPTER = 0xC0001392,EVENT_NDIS_MISSING_CONFIGURATION_PARAMETER = 0xC0001393,EVENT_NDIS_BAD_IO_BASE_ADDRESS = 0xC0001394,EVENT_NDIS_RECEIVE_SPACE_SMALL = 0x40001395,EVENT_NDIS_ADAPTER_DISABLED = 0x80001396,EVENT_NDIS_IO_PORT_CONFLICT = 0x80001397,EVENT_NDIS_PORT_OR_DMA_CONFLICT = 0x80001398,EVENT_NDIS_MEMORY_CONFLICT = 0x80001399,EVENT_NDIS_INTERRUPT_CONFLICT = 0x8000139A,EVENT_NDIS_DMA_CONFLICT = 0x8000139B,EVENT_NDIS_INVALID_DOWNLOAD_FILE_ERROR = 0xC000139C,EVENT_NDIS_MAXRECEIVES_ERROR = 0x8000139D,EVENT_NDIS_MAXTRANSMITS_ERROR = 0x8000139E,EVENT_NDIS_MAXFRAMESIZE_ERROR = 0x8000139F,EVENT_NDIS_MAXINTERNALBUFS_ERROR = 0x800013A0,EVENT_NDIS_MAXMULTICAST_ERROR = 0x800013A1,EVENT_NDIS_PRODUCTID_ERROR = 0x800013A2,EVENT_NDIS_LOBE_FAILUE_ERROR = 0x800013A3,EVENT_NDIS_SIGNAL_LOSS_ERROR = 0x800013A4,EVENT_NDIS_REMOVE_RECEIVED_ERROR = 0x800013A5,EVENT_NDIS_TOKEN_RING_CORRECTION = 0x400013A6,EVENT_NDIS_ADAPTER_CHECK_ERROR = 0xC00013A7,EVENT_NDIS_RESET_FAILURE_ERROR = 0x800013A8,EVENT_NDIS_CABLE_DISCONNECTED_ERROR = 0x800013A9,EVENT_NDIS_RESET_FAILURE_CORRECTION = 0x800013AA,EVENT_LOG_FULL = 0x80001770,EVENT_LogFileNotOpened = 0x80001771,EVENT_LogFileCorrupt = 0x80001772,EVENT_DefaultLogCorrupt = 0x80001773,EVENT_BadDriverPacket = 0x80001774,EVENT_EventlogStarted = 0x80001775,EVENT_EventlogStopped = 0x80001776,};
enum MACRO_EXCEPTION {EXCEPTION_EXECUTE_HANDLER = 1,EXCEPTION_CONTINUE_SEARCH = 0,EXCEPTION_CONTINUE_EXECUTION = -1,};
enum MACRO_FILE_CASE {FILE_CASE_SENSITIVE_SEARCH = 0x1,FILE_CASE_PRESERVED_NAMES = 0x2,FILE_UNICODE_ON_DISK = 0x4,FILE_PERSISTENT_ACLS = 0x8,FILE_FILE_COMPRESSION = 0x10,FILE_VOLUME_QUOTAS = 0x20,FILE_SUPPORTS_SPARSE_FILES = 0x40,FILE_SUPPORTS_REPARSE_POINTS = 0x80,FILE_SUPPORTS_REMOTE_STORAGE = 0x100,FILE_VOLUME_IS_COMPRESSED = 0x8000,FILE_SUPPORTS_OBJECT_IDS = 0x10000,FILE_SUPPORTS_ENCRYPTION = 0x20000,FILE_NAMED_STREAMS = 0x40000,FILE_READ_ONLY_VOLUME = 0x80000,};
enum MACRO_FILE_FLAG {FILE_FLAG_WRITE_THROUGH = 0x80000000,FILE_FLAG_OVERLAPPED = 0x40000000,FILE_FLAG_NO_BUFFERING = 0x20000000,FILE_FLAG_RANDOM_ACCESS = 0x10000000,FILE_FLAG_SEQUENTIAL_SCAN = 0x8000000,FILE_FLAG_DELETE_ON_CLOSE = 0x4000000,FILE_FLAG_BACKUP_SEMANTICS = 0x2000000,FILE_FLAG_POSIX_SEMANTICS = 0x1000000,FILE_FLAG_OPEN_REPARSE_POINT = 0x200000,FILE_FLAG_OPEN_NO_RECALL = 0x100000,FILE_FLAG_FIRST_PIPE_INSTANCE = 0x80000,};
enum MACRO_FILE_TYPE {FILE_TYPE_UNKNOWN = 0x0,FILE_TYPE_DISK = 0x1,FILE_TYPE_CHAR = 0x2,FILE_TYPE_PIPE = 0x3,FILE_TYPE_REMOTE = 0x8000,};
enum MACRO_FM_PANOSE {FM_PANOSE_CULTURE_LATIN = 0x0,FM_SEL_ITALIC = 0x1,FM_SEL_UNDERSCORE = 0x2,FM_SEL_NEGATIVE = 0x4,FM_SEL_OUTLINED = 0x8,FM_SEL_STRIKEOUT = 0x10,FM_SEL_BOLD = 0x20,FM_SEL_REGULAR = 0x40,};
enum MACRO_FS_LATIN1 {FS_LATIN1 = 0x1,FS_LATIN2 = 0x2,FS_CYRILLIC = 0x4,FS_GREEK = 0x8,FS_TURKISH = 0x10,FS_HEBREW = 0x20,FS_ARABIC = 0x40,FS_BALTIC = 0x80,FS_VIETNAMESE = 0x100,FS_THAI = 0x10000,FS_JISJAPAN = 0x20000,FS_CHINESESIMP = 0x40000,FS_WANSUNG = 0x80000,FS_CHINESETRAD = 0x100000,FS_JOHAB = 0x200000,FS_SYMBOL = 0x80000000,};
enum MACRO_GCS_VERBA {GCS_VERBA = 0x0,GCS_HELPTEXTA = 0x1,GCS_VALIDATEA = 0x2,GCS_VERBW = 0x4,GCS_HELPTEXTW = 0x5,GCS_VALIDATEW = 0x6,GCS_UNICODE = 0x4,GCS_VERB = 0x0,GCS_HELPTEXT = 0x1,GCS_VALIDATE = 0x2,};
enum MACRO_HINSTANCE {HINSTANCE_ERROR = 32,};
enum MACRO_HIST_BACK {HIST_BACK = 0,HIST_FORWARD = 1,HIST_FAVORITES = 2,HIST_ADDTOFAVORITES = 3,HIST_VIEWTREE = 4,};
enum MACRO_HTHSCROLL {HTHSCROLL = 6,};
enum MACRO_HTNOWHERE {HTNOWHERE = 0,HTCLIENT = 1,HTCAPTION = 2,};
enum MACRO_HTSYSMENU {HTSYSMENU = 3,HTGROWBOX = 4,};
enum MACRO_HTTOPLEFT {HTTOPLEFT = 13,};
enum MACRO_HTVSCROLL {HTVSCROLL = 7,HTMINBUTTON = 8,};
enum MACRO_ICINSTALL {ICINSTALL_UNICODE = 0x8000,ICINSTALL_FUNCTION = 0x1,ICINSTALL_DRIVER = 0x2,ICINSTALL_HDRV = 0x4,ICINSTALL_DRIVERW = 0x8002,};
enum MACRO_ICQUALITY {ICQUALITY_LOW = 0,ICQUALITY_HIGH = 10000,ICQUALITY_DEFAULT = -1,};
enum MACRO_ICVERSION {ICVERSION = 0x104,};
enum MACRO_IDI_CPSUI {IDI_CPSUI_ICONID_FIRST = 64000,IDI_CPSUI_EMPTY = 64000,IDI_CPSUI_SEL_NONE = 64001,IDI_CPSUI_WARNING = 64002,IDI_CPSUI_NO = 64003,IDI_CPSUI_YES = 64004,IDI_CPSUI_FALSE = 64005,IDI_CPSUI_TRUE = 64006,IDI_CPSUI_OFF = 64007,IDI_CPSUI_ON = 64008,IDI_CPSUI_PAPER_OUTPUT = 64009,IDI_CPSUI_ENVELOPE = 64010,IDI_CPSUI_MEM = 64011,IDI_CPSUI_FONTCARTHDR = 64012,IDI_CPSUI_FONTCART = 64013,IDI_CPSUI_STAPLER_ON = 64014,IDI_CPSUI_STAPLER_OFF = 64015,IDI_CPSUI_HT_HOST = 64016,IDI_CPSUI_HT_DEVICE = 64017,IDI_CPSUI_TT_PRINTASGRAPHIC = 64018,IDI_CPSUI_TT_DOWNLOADSOFT = 64019,IDI_CPSUI_TT_DOWNLOADVECT = 64020,IDI_CPSUI_TT_SUBDEV = 64021,IDI_CPSUI_PORTRAIT = 64022,IDI_CPSUI_LANDSCAPE = 64023,IDI_CPSUI_ROT_LAND = 64024,IDI_CPSUI_AUTOSEL = 64025,IDI_CPSUI_PAPER_TRAY = 64026,IDI_CPSUI_PAPER_TRAY2 = 64027,IDI_CPSUI_PAPER_TRAY3 = 64028,IDI_CPSUI_TRANSPARENT = 64029,IDI_CPSUI_COLLATE = 64030,IDI_CPSUI_DUPLEX_NONE = 64031,IDI_CPSUI_DUPLEX_HORZ = 64032,IDI_CPSUI_DUPLEX_VERT = 64033,IDI_CPSUI_RES_DRAFT = 64034,IDI_CPSUI_RES_LOW = 64035,IDI_CPSUI_RES_MEDIUM = 64036,IDI_CPSUI_RES_HIGH = 64037,IDI_CPSUI_RES_PRESENTATION = 64038,IDI_CPSUI_MONO = 64039,IDI_CPSUI_COLOR = 64040,IDI_CPSUI_DITHER_NONE = 64041,IDI_CPSUI_DITHER_COARSE = 64042,IDI_CPSUI_DITHER_FINE = 64043,IDI_CPSUI_DITHER_LINEART = 64044,IDI_CPSUI_SCALING = 64045,IDI_CPSUI_COPY = 64046,IDI_CPSUI_HTCLRADJ = 64047,IDI_CPSUI_HALFTONE_SETUP = 64048,IDI_CPSUI_WATERMARK = 64049,IDI_CPSUI_ERROR = 64050,IDI_CPSUI_ICM_OPTION = 64051,IDI_CPSUI_ICM_METHOD = 64052,IDI_CPSUI_ICM_INTENT = 64053,IDI_CPSUI_STD_FORM = 64054,IDI_CPSUI_OUTBIN = 64055,IDI_CPSUI_OUTPUT = 64056,IDI_CPSUI_GRAPHIC = 64057,IDI_CPSUI_ADVANCE = 64058,IDI_CPSUI_DOCUMENT = 64059,IDI_CPSUI_DEVICE = 64060,IDI_CPSUI_DEVICE2 = 64061,IDI_CPSUI_PRINTER = 64062,IDI_CPSUI_PRINTER2 = 64063,IDI_CPSUI_PRINTER3 = 64064,IDI_CPSUI_PRINTER4 = 64065,IDI_CPSUI_OPTION = 64066,IDI_CPSUI_OPTION2 = 64067,IDI_CPSUI_STOP = 64068,IDI_CPSUI_NOTINSTALLED = 64069,IDI_CPSUI_WARNING_OVERLAY = 64070,IDI_CPSUI_STOP_WARNING_OVERLAY = 64071,IDI_CPSUI_GENERIC_OPTION = 64072,IDI_CPSUI_GENERIC_ITEM = 64073,IDI_CPSUI_RUN_DIALOG = 64074,IDI_CPSUI_QUESTION = 64075,IDI_CPSUI_FORMTRAYASSIGN = 64076,IDI_CPSUI_PRINTER_FOLDER = 64077,IDI_CPSUI_INSTALLABLE_OPTION = 64078,IDI_CPSUI_PRINTER_FEATURE = 64079,IDI_CPSUI_DEVICE_FEATURE = 64080,IDI_CPSUI_FONTSUB = 64081,IDI_CPSUI_POSTSCRIPT = 64082,IDI_CPSUI_TELEPHONE = 64083,IDI_CPSUI_DUPLEX_NONE_L = 64084,IDI_CPSUI_DUPLEX_HORZ_L = 64085,IDI_CPSUI_DUPLEX_VERT_L = 64086,IDI_CPSUI_LF_PEN_PLOTTER = 64087,IDI_CPSUI_SF_PEN_PLOTTER = 64088,IDI_CPSUI_LF_RASTER_PLOTTER = 64089,IDI_CPSUI_SF_RASTER_PLOTTER = 64090,IDI_CPSUI_ROLL_PAPER = 64091,IDI_CPSUI_PEN_CARROUSEL = 64092,IDI_CPSUI_PLOTTER_PEN = 64093,IDI_CPSUI_MANUAL_FEED = 64094,IDI_CPSUI_FAX = 64095,IDI_CPSUI_PAGE_PROTECT = 64096,IDI_CPSUI_ENVELOPE_FEED = 64097,IDI_CPSUI_FONTCART_SLOT = 64098,IDI_CPSUI_LAYOUT_BMP_PORTRAIT = 64099,IDI_CPSUI_LAYOUT_BMP_ARROWL = 64100,IDI_CPSUI_LAYOUT_BMP_ARROWS = 64101,IDI_CPSUI_LAYOUT_BMP_BOOKLETL = 64102,IDI_CPSUI_LAYOUT_BMP_BOOKLETP = 64103,IDI_CPSUI_ICONID_LAST = 64103,};
enum MACRO_IF_ACCESS {IF_ACCESS_LOOPBACK = 1,IF_ACCESS_BROADCAST = 2,IF_ACCESS_POINTTOPOINT = 3,IF_ACCESS_POINTTOMULTIPOINT = 4,IF_CHECK_NONE = 0,IF_CHECK_MCAST = 1,IF_CHECK_SEND = 2,IF_CONNECTION_DEDICATED = 1,IF_CONNECTION_PASSIVE = 2,IF_CONNECTION_DEMAND = 3,IF_ADMIN_STATUS_UP = 1,IF_ADMIN_STATUS_DOWN = 2,IF_ADMIN_STATUS_TESTING = 3,IF_OPER_STATUS_NON_OPERATIONAL = 0,IF_OPER_STATUS_UNREACHABLE = 1,IF_OPER_STATUS_DISCONNECTED = 2,IF_OPER_STATUS_CONNECTING = 3,IF_OPER_STATUS_CONNECTED = 4,IF_OPER_STATUS_OPERATIONAL = 5,};
enum MACRO_IF_NUMBER {IF_NUMBER = 0,IF_TABLE = 1,IF_ROW = 2,};
enum MACRO_IF_STATUS {IF_STATUS = 25,};
enum MACRO_IME_CMODE {IME_CMODE_ALPHANUMERIC = 0x0,IME_CMODE_NATIVE = 0x1,IME_CMODE_CHINESE = 0x1,IME_CMODE_HANGEUL = 0x1,IME_CMODE_HANGUL = 0x1,IME_CMODE_JAPANESE = 0x1,IME_CMODE_KATAKANA = 0x2,IME_CMODE_LANGUAGE = 0x3,IME_CMODE_FULLSHAPE = 0x8,IME_CMODE_ROMAN = 0x10,IME_CMODE_CHARCODE = 0x20,IME_CMODE_HANJACONVERT = 0x40,IME_CMODE_SOFTKBD = 0x80,IME_CMODE_NOCONVERSION = 0x100,IME_CMODE_EUDC = 0x200,IME_CMODE_SYMBOL = 0x400,IME_CMODE_FIXED = 0x800,IME_CMODE_RESERVED = 0xF0000000,IME_SMODE_NONE = 0x0,IME_SMODE_PLAURALCLAUSE = 0x1,IME_SMODE_SINGLECONVERT = 0x2,IME_SMODE_AUTOMATIC = 0x4,IME_SMODE_PHRASEPREDICT = 0x8,IME_SMODE_CONVERSATION = 0x10,IME_SMODE_RESERVED = 0xF000,IME_CAND_UNKNOWN = 0x0,IME_CAND_READ = 0x1,IME_CAND_CODE = 0x2,IME_CAND_MEANING = 0x3,IME_CAND_RADICAL = 0x4,IME_CAND_STROKE = 0x5,};
enum MACRO_INCORRECT {INCORRECT_VERSION_INFO = 0x7,};
enum MACRO_INPLACE_S {INPLACE_S_TRUNCATED = 0x401A0,};
enum MACRO_INTERFACE {INTERFACE_USES_DISPEX = 0x4,INTERFACE_USES_SECURITY_MANAGER = 0x8,};
enum MACRO_INTERRUPT {INTERRUPT_UNWIND_ATTEMPTED = 0x3C,INTERRUPT_EXCEPTION_NOT_HANDLED = 0x3D,};
enum MACRO_INVALID_P {INVALID_P_ROOT_SECURITY_ID = 4294967295,};
enum MACRO_IN_CLASSD {IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IOCTL_PAR {IOCTL_PAR_BASE = 22,IOCTL_PAR_QUERY_INFORMATION = 1441796,IOCTL_PAR_SET_INFORMATION = 1441800,IOCTL_PAR_QUERY_DEVICE_ID = 1441804,IOCTL_PAR_QUERY_DEVICE_ID_SIZE = 1441808,IOCTL_IEEE1284_GET_MODE = 1441812,IOCTL_IEEE1284_NEGOTIATE = 1441816,IOCTL_PAR_SET_WRITE_ADDRESS = 1441820,IOCTL_PAR_SET_READ_ADDRESS = 1441824,IOCTL_PAR_GET_DEVICE_CAPS = 1441828,IOCTL_PAR_GET_DEFAULT_MODES = 1441832,IOCTL_PAR_PING = 1441836,IOCTL_PAR_QUERY_RAW_DEVICE_ID = 1441840,IOCTL_PAR_ECP_HOST_RECOVERY = 1441844,IOCTL_PAR_GET_READ_ADDRESS = 1441848,IOCTL_PAR_GET_WRITE_ADDRESS = 1441852,IOCTL_PAR_TEST = 1441872,IOCTL_PAR_IS_PORT_FREE = 1441876,IOCTL_PAR_QUERY_LOCATION = 1441880,};
enum MACRO_IP_EXPORT {IP_EXPORT_INCLUDED = 1,};
enum MACRO_IP_STATUS {IP_STATUS_BASE = 11000,IP_SUCCESS = 0,IP_BUF_TOO_SMALL = 11001,IP_DEST_NET_UNREACHABLE = 11002,IP_DEST_HOST_UNREACHABLE = 11003,IP_DEST_PROT_UNREACHABLE = 11004,IP_DEST_PORT_UNREACHABLE = 11005,IP_NO_RESOURCES = 11006,IP_BAD_OPTION = 11007,IP_HW_ERROR = 11008,IP_PACKET_TOO_BIG = 11009,IP_REQ_TIMED_OUT = 11010,IP_BAD_REQ = 11011,IP_BAD_ROUTE = 11012,IP_TTL_EXPIRED_TRANSIT = 11013,IP_TTL_EXPIRED_REASSEM = 11014,IP_PARAM_PROBLEM = 11015,IP_SOURCE_QUENCH = 11016,IP_OPTION_TOO_BIG = 11017,IP_BAD_DESTINATION = 11018,IP_DEST_NO_ROUTE = 11002,IP_DEST_ADDR_UNREACHABLE = 11003,IP_DEST_PROHIBITED = 11004,IP_HOP_LIMIT_EXCEEDED = 11013,IP_REASSEMBLY_TIME_EXCEEDED = 11014,IP_PARAMETER_PROBLEM = 11015,IP_DEST_UNREACHABLE = 11040,IP_TIME_EXCEEDED = 11041,IP_BAD_HEADER = 11042,IP_UNRECOGNIZED_NEXT_HEADER = 11043,IP_ICMP_ERROR = 11044,IP_DEST_SCOPE_MISMATCH = 11045,IP_ADDR_DELETED = 11019,IP_SPEC_MTU_CHANGE = 11020,IP_MTU_CHANGE = 11021,IP_UNLOAD = 11022,IP_ADDR_ADDED = 11023,IP_MEDIA_CONNECT = 11024,IP_MEDIA_DISCONNECT = 11025,IP_BIND_ADAPTER = 11026,IP_UNBIND_ADAPTER = 11027,IP_DEVICE_DOES_NOT_EXIST = 11028,IP_DUPLICATE_ADDRESS = 11029,IP_INTERFACE_METRIC_CHANGE = 11030,IP_RECONFIG_SECFLTR = 11031,IP_NEGOTIATING_IPSEC = 11032,IP_INTERFACE_WOL_CAPABILITY_CHANGE = 11033,IP_DUPLICATE_IPADD = 11034,IP_GENERAL_FAILURE = 11050,};
enum MACRO_KERB_WRAP {KERB_WRAP_NO_ENCRYPT = 0x80000001,KERB_LOGON_FLAG_ALLOW_EXPIRED_TICKET = 0x1,KERB_USE_DEFAULT_TICKET_FLAGS = 0x0,KERB_RETRIEVE_TICKET_DEFAULT = 0x0,KERB_RETRIEVE_TICKET_DONT_USE_CACHE = 0x1,KERB_RETRIEVE_TICKET_USE_CACHE_ONLY = 0x2,KERB_RETRIEVE_TICKET_USE_CREDHANDLE = 0x4,KERB_RETRIEVE_TICKET_AS_KERB_CRED = 0x8,KERB_RETRIEVE_TICKET_WITH_SEC_CRED = 0x10,KERB_ETYPE_DEFAULT = 0x0,KERB_PURGE_ALL_TICKETS = 0x1,};
enum MACRO_KEYEVENTF {KEYEVENTF_EXTENDEDKEY = 0x1,KEYEVENTF_KEYUP = 0x2,KEYEVENTF_UNICODE = 0x4,KEYEVENTF_SCANCODE = 0x8,};
enum MACRO_KEY_EVENT {KEY_EVENT = 0x1,MOUSE_EVENT = 0x2,WINDOW_BUFFER_SIZE_EVENT = 0x4,MENU_EVENT = 0x8,FOCUS_EVENT = 0x10,};
enum MACRO_KNOWLEDGE {KNOWLEDGE_INCONSISTENCY_DETECTED = 0xC00037E9,};
enum MACRO_KSNODEPIN {KSNODEPIN_STANDARD_IN = 1,KSNODEPIN_STANDARD_OUT = 0,KSNODEPIN_SUM_MUX_IN = 1,KSNODEPIN_SUM_MUX_OUT = 0,KSNODEPIN_DEMUX_IN = 0,KSNODEPIN_DEMUX_OUT = 1,KSNODEPIN_AEC_RENDER_IN = 1,KSNODEPIN_AEC_RENDER_OUT = 0,KSNODEPIN_AEC_CAPTURE_IN = 2,KSNODEPIN_AEC_CAPTURE_OUT = 3,};
enum MACRO_LM_SERVER {LM_SERVER_INTERNAL_ERROR = 0x54,};
enum MACRO_MAXUIDLEN {MAXUIDLEN = 64,};
enum MACRO_MAX_NABTS {MAX_NABTS_VBI_LINES_PER_FIELD = 11,};
enum MACRO_MAX_SCOPE {MAX_SCOPE_NAME_LEN = 255,MAX_MIB_OFFSET = 8,};
enum MACRO_MCAST_MFE {MCAST_MFE_STATS_EX = 35,};
enum MACRO_MCDRCINFO {MCDRCINFO_NOVIEWPORTADJUST = 0x1,MCDRCINFO_Y_LOWER_LEFT = 0x2,MCDRCINFO_DEVCOLORSCALE = 0x4,MCDRCINFO_DEVZSCALE = 0x8,MCDRCINFO_FINE_GRAINED_STATE = 0x10,};
enum MACRO_MCDRV_MEM {MCDRV_MEM_DMA = 0x1,MCDRV_TEXTURE_RESIDENT = 0x1,};
enum MACRO_MCDVERTEX {MCDVERTEX_EDGEFLAG = 0x1,MCDVERTEX_FRONTFACE = 0x0,MCDVERTEX_BACKFACE = 0x1,};
enum MACRO_MCI_FIRST {MCI_FIRST = 2048,MCI_OPEN = 2051,MCI_CLOSE = 2052,MCI_ESCAPE = 2053,MCI_PLAY = 2054,MCI_SEEK = 2055,MCI_STOP = 2056,MCI_PAUSE = 2057,MCI_INFO = 2058,MCI_GETDEVCAPS = 2059,MCI_SPIN = 2060,MCI_SET = 2061,MCI_STEP = 2062,MCI_RECORD = 2063,MCI_SYSINFO = 2064,MCI_BREAK = 2065,MCI_SAVE = 2067,MCI_STATUS = 2068,MCI_CUE = 2096,MCI_REALIZE = 2112,MCI_WINDOW = 2113,MCI_PUT = 2114,MCI_WHERE = 2115,MCI_FREEZE = 2116,MCI_UNFREEZE = 2117,MCI_LOAD = 2128,MCI_CUT = 2129,MCI_COPY = 2130,MCI_PASTE = 2131,MCI_UPDATE = 2132,MCI_RESUME = 2133,MCI_DELETE = 2134,MCI_USER_MESSAGES = 3072,MCI_LAST = 4095,MCI_ALL_DEVICE_ID = 4294967295,MCI_DEVTYPE_VCR = 513,MCI_DEVTYPE_VIDEODISC = 514,MCI_DEVTYPE_OVERLAY = 515,MCI_DEVTYPE_CD_AUDIO = 516,MCI_DEVTYPE_DAT = 517,MCI_DEVTYPE_SCANNER = 518,MCI_DEVTYPE_ANIMATION = 519,MCI_DEVTYPE_DIGITAL_VIDEO = 520,MCI_DEVTYPE_OTHER = 521,MCI_DEVTYPE_WAVEFORM_AUDIO = 522,MCI_DEVTYPE_SEQUENCER = 523,MCI_DEVTYPE_FIRST = 513,MCI_DEVTYPE_LAST = 523,MCI_DEVTYPE_FIRST_USER = 4096,MCI_MODE_NOT_READY = 524,MCI_MODE_STOP = 525,MCI_MODE_PLAY = 526,MCI_MODE_RECORD = 527,MCI_MODE_SEEK = 528,MCI_MODE_PAUSE = 529,MCI_MODE_OPEN = 530,MCI_FORMAT_MILLISECONDS = 0,MCI_FORMAT_HMS = 1,MCI_FORMAT_MSF = 2,MCI_FORMAT_FRAMES = 3,MCI_FORMAT_SMPTE_24 = 4,MCI_FORMAT_SMPTE_25 = 5,MCI_FORMAT_SMPTE_30 = 6,MCI_FORMAT_SMPTE_30DROP = 7,MCI_FORMAT_BYTES = 8,MCI_FORMAT_SAMPLES = 9,MCI_FORMAT_TMSF = 10,MCI_NOTIFY_SUCCESSFUL = 1,MCI_NOTIFY_SUPERSEDED = 2,MCI_NOTIFY_ABORTED = 4,MCI_NOTIFY_FAILURE = 8,MCI_NOTIFY = 1,MCI_WAIT = 2,MCI_FROM = 4,MCI_TO = 8,MCI_TRACK = 16,MCI_OPEN_SHAREABLE = 256,MCI_OPEN_ELEMENT = 512,MCI_OPEN_ALIAS = 1024,MCI_OPEN_ELEMENT_ID = 2048,MCI_OPEN_TYPE_ID = 4096,MCI_OPEN_TYPE = 8192,MCI_SEEK_TO_START = 256,MCI_SEEK_TO_END = 512,MCI_STATUS_ITEM = 256,MCI_STATUS_START = 512,MCI_STATUS_LENGTH = 1,MCI_STATUS_POSITION = 2,MCI_STATUS_NUMBER_OF_TRACKS = 3,MCI_STATUS_MODE = 4,MCI_STATUS_MEDIA_PRESENT = 5,MCI_STATUS_TIME_FORMAT = 6,MCI_STATUS_READY = 7,MCI_STATUS_CURRENT_TRACK = 8,MCI_INFO_PRODUCT = 256,MCI_INFO_FILE = 512,MCI_INFO_MEDIA_UPC = 1024,MCI_INFO_MEDIA_IDENTITY = 2048,MCI_INFO_NAME = 4096,MCI_INFO_COPYRIGHT = 8192,MCI_GETDEVCAPS_ITEM = 256,MCI_GETDEVCAPS_CAN_RECORD = 1,MCI_GETDEVCAPS_HAS_AUDIO = 2,MCI_GETDEVCAPS_HAS_VIDEO = 3,MCI_GETDEVCAPS_DEVICE_TYPE = 4,MCI_GETDEVCAPS_USES_FILES = 5,MCI_GETDEVCAPS_COMPOUND_DEVICE = 6,MCI_GETDEVCAPS_CAN_EJECT = 7,MCI_GETDEVCAPS_CAN_PLAY = 8,MCI_GETDEVCAPS_CAN_SAVE = 9,MCI_SYSINFO_QUANTITY = 256,MCI_SYSINFO_OPEN = 512,MCI_SYSINFO_NAME = 1024,MCI_SYSINFO_INSTALLNAME = 2048,MCI_SET_DOOR_OPEN = 256,MCI_SET_DOOR_CLOSED = 512,MCI_SET_TIME_FORMAT = 1024,MCI_SET_AUDIO = 2048,MCI_SET_VIDEO = 4096,MCI_SET_ON = 8192,MCI_SET_OFF = 16384,MCI_SET_AUDIO_ALL = 0,MCI_SET_AUDIO_LEFT = 1,MCI_SET_AUDIO_RIGHT = 2,MCI_BREAK_KEY = 256,MCI_BREAK_HWND = 512,MCI_BREAK_OFF = 1024,MCI_RECORD_INSERT = 256,MCI_RECORD_OVERWRITE = 512,MCI_SAVE_FILE = 256,MCI_LOAD_FILE = 256,MCI_VD_MODE_PARK = 1025,MCI_VD_MEDIA_CLV = 1026,MCI_VD_MEDIA_CAV = 1027,MCI_VD_MEDIA_OTHER = 1028,MCI_VD_FORMAT_TRACK = 16385,MCI_VD_PLAY_REVERSE = 65536,MCI_VD_PLAY_FAST = 131072,MCI_VD_PLAY_SPEED = 262144,MCI_VD_PLAY_SCAN = 524288,MCI_VD_PLAY_SLOW = 1048576,MCI_VD_SEEK_REVERSE = 65536,MCI_VD_STATUS_SPEED = 16386,MCI_VD_STATUS_FORWARD = 16387,MCI_VD_STATUS_MEDIA_TYPE = 16388,MCI_VD_STATUS_SIDE = 16389,MCI_VD_STATUS_DISC_SIZE = 16390,MCI_VD_GETDEVCAPS_CLV = 65536,MCI_VD_GETDEVCAPS_CAV = 131072,MCI_VD_SPIN_UP = 65536,MCI_VD_SPIN_DOWN = 131072,MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386,MCI_VD_GETDEVCAPS_FAST_RATE = 16387,MCI_VD_GETDEVCAPS_SLOW_RATE = 16388,MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389,MCI_VD_STEP_FRAMES = 65536,MCI_VD_STEP_REVERSE = 131072,MCI_VD_ESCAPE_STRING = 256,MCI_CDA_STATUS_TYPE_TRACK = 16385,MCI_CDA_TRACK_AUDIO = 1088,MCI_CDA_TRACK_OTHER = 1089,MCI_WAVE_PCM = 1152,MCI_WAVE_MAPPER = 1153,MCI_WAVE_OPEN_BUFFER = 65536,MCI_WAVE_SET_FORMATTAG = 65536,MCI_WAVE_SET_CHANNELS = 131072,MCI_WAVE_SET_SAMPLESPERSEC = 262144,MCI_WAVE_SET_AVGBYTESPERSEC = 524288,MCI_WAVE_SET_BLOCKALIGN = 1048576,MCI_WAVE_SET_BITSPERSAMPLE = 2097152,MCI_WAVE_INPUT = 4194304,MCI_WAVE_OUTPUT = 8388608,MCI_WAVE_STATUS_FORMATTAG = 16385,MCI_WAVE_STATUS_CHANNELS = 16386,MCI_WAVE_STATUS_SAMPLESPERSEC = 16387,MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388,MCI_WAVE_STATUS_BLOCKALIGN = 16389,MCI_WAVE_STATUS_BITSPERSAMPLE = 16390,MCI_WAVE_STATUS_LEVEL = 16391,MCI_WAVE_SET_ANYINPUT = 67108864,MCI_WAVE_SET_ANYOUTPUT = 134217728,MCI_WAVE_GETDEVCAPS_INPUTS = 16385,MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386,MCI_SEQ_DIV_PPQN = 1216,MCI_SEQ_DIV_SMPTE_24 = 1217,MCI_SEQ_DIV_SMPTE_25 = 1218,MCI_SEQ_DIV_SMPTE_30DROP = 1219,MCI_SEQ_DIV_SMPTE_30 = 1220,MCI_SEQ_FORMAT_SONGPTR = 16385,MCI_SEQ_FILE = 16386,MCI_SEQ_MIDI = 16387,MCI_SEQ_SMPTE = 16388,MCI_SEQ_NONE = 65533,MCI_SEQ_MAPPER = 65535,MCI_SEQ_STATUS_TEMPO = 16386,MCI_SEQ_STATUS_PORT = 16387,MCI_SEQ_STATUS_SLAVE = 16391,MCI_SEQ_STATUS_MASTER = 16392,MCI_SEQ_STATUS_OFFSET = 16393,MCI_SEQ_STATUS_DIVTYPE = 16394,MCI_SEQ_STATUS_NAME = 16395,MCI_SEQ_STATUS_COPYRIGHT = 16396,MCI_SEQ_SET_TEMPO = 65536,MCI_SEQ_SET_PORT = 131072,MCI_SEQ_SET_SLAVE = 262144,MCI_SEQ_SET_MASTER = 524288,MCI_SEQ_SET_OFFSET = 16777216,MCI_ANIM_OPEN_WS = 65536,MCI_ANIM_OPEN_PARENT = 131072,MCI_ANIM_OPEN_NOSTATIC = 262144,MCI_ANIM_PLAY_SPEED = 65536,MCI_ANIM_PLAY_REVERSE = 131072,MCI_ANIM_PLAY_FAST = 262144,MCI_ANIM_PLAY_SLOW = 524288,MCI_ANIM_PLAY_SCAN = 1048576,MCI_ANIM_STEP_REVERSE = 65536,MCI_ANIM_STEP_FRAMES = 131072,MCI_ANIM_STATUS_SPEED = 16385,MCI_ANIM_STATUS_FORWARD = 16386,MCI_ANIM_STATUS_HWND = 16387,MCI_ANIM_STATUS_HPAL = 16388,MCI_ANIM_STATUS_STRETCH = 16389,MCI_ANIM_INFO_TEXT = 65536,MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385,MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386,MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387,MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388,MCI_ANIM_GETDEVCAPS_PALETTES = 16390,MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391,MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392,MCI_ANIM_REALIZE_NORM = 65536,MCI_ANIM_REALIZE_BKGD = 131072,MCI_ANIM_WINDOW_HWND = 65536,MCI_ANIM_WINDOW_STATE = 262144,MCI_ANIM_WINDOW_TEXT = 524288,MCI_ANIM_WINDOW_ENABLE_STRETCH = 1048576,MCI_ANIM_WINDOW_DISABLE_STRETCH = 2097152,MCI_ANIM_WINDOW_DEFAULT = 0,MCI_ANIM_RECT = 65536,MCI_ANIM_PUT_SOURCE = 131072,MCI_ANIM_PUT_DESTINATION = 262144,MCI_ANIM_WHERE_SOURCE = 131072,MCI_ANIM_WHERE_DESTINATION = 262144,MCI_ANIM_UPDATE_HDC = 131072,MCI_OVLY_OPEN_WS = 65536,MCI_OVLY_OPEN_PARENT = 131072,MCI_OVLY_STATUS_HWND = 16385,MCI_OVLY_STATUS_STRETCH = 16386,MCI_OVLY_INFO_TEXT = 65536,MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385,MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386,MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387,MCI_OVLY_WINDOW_HWND = 65536,MCI_OVLY_WINDOW_STATE = 262144,MCI_OVLY_WINDOW_TEXT = 524288,MCI_OVLY_WINDOW_ENABLE_STRETCH = 1048576,MCI_OVLY_WINDOW_DISABLE_STRETCH = 2097152,MCI_OVLY_WINDOW_DEFAULT = 0,MCI_OVLY_RECT = 65536,MCI_OVLY_PUT_SOURCE = 131072,MCI_OVLY_PUT_DESTINATION = 262144,MCI_OVLY_PUT_FRAME = 524288,MCI_OVLY_PUT_VIDEO = 1048576,MCI_OVLY_WHERE_SOURCE = 131072,MCI_OVLY_WHERE_DESTINATION = 262144,MCI_OVLY_WHERE_FRAME = 524288,MCI_OVLY_WHERE_VIDEO = 1048576,};
enum MACRO_MEM_IMAGE {MEM_IMAGE = 16777216,};
enum MACRO_MERGECOPY {MERGECOPY = 0xC000CA,};
enum MACRO_MFCOMMENT {MFCOMMENT = 15,GETPENWIDTH = 16,};
enum MACRO_MICROSOFT {MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 0x10000,};
enum MACRO_MIXERLINE {MIXERLINE_LINEF_ACTIVE = 0x1,MIXERLINE_LINEF_DISCONNECTED = 0x8000,MIXERLINE_LINEF_SOURCE = 0x80000000,MIXERLINE_COMPONENTTYPE_DST_FIRST = 0x0,MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0x0,MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 0x1,MIXERLINE_COMPONENTTYPE_DST_LINE = 0x2,MIXERLINE_COMPONENTTYPE_DST_MONITOR = 0x3,MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 0x4,MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 0x5,MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 0x6,MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 0x7,MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 0x8,MIXERLINE_COMPONENTTYPE_DST_LAST = 0x8,MIXERLINE_COMPONENTTYPE_SRC_FIRST = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 0x1001,MIXERLINE_COMPONENTTYPE_SRC_LINE = 0x1002,MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 0x1003,MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 0x1004,MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 0x1005,MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 0x1006,MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 0x1007,MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 0x1008,MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 0x1009,MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 0x100A,MIXERLINE_COMPONENTTYPE_SRC_LAST = 0x100A,MIXERLINE_TARGETTYPE_UNDEFINED = 0x0,MIXERLINE_TARGETTYPE_WAVEOUT = 0x1,MIXERLINE_TARGETTYPE_WAVEIN = 0x2,MIXERLINE_TARGETTYPE_MIDIOUT = 0x3,MIXERLINE_TARGETTYPE_MIDIIN = 0x4,MIXERLINE_TARGETTYPE_AUX = 0x5,};
enum MACRO_MSOCMDERR {MSOCMDERR_E_FIRST = -2147221248,MSOCMDERR_E_NOTSUPPORTED = -2147221248,MSOCMDERR_E_DISABLED = -2147221247,MSOCMDERR_E_NOHELP = -2147221246,MSOCMDERR_E_CANCELED = -2147221245,MSOCMDERR_E_UNKNOWNGROUP = -2147221244,};
enum MACRO_NCBACTION {NCBACTION = 0x77,};
enum MACRO_NCBCANCEL {NCBCANCEL = 0x35,};
enum MACRO_NCBDGRECV {NCBDGRECV = 0x21,};
enum MACRO_NCBHANGUP {NCBHANGUP = 0x12,};
enum MACRO_NCBLISTEN {NCBLISTEN = 0x11,};
enum MACRO_NCBSENDNA {NCBSENDNA = 0x71,};
enum MACRO_NCBUNLINK {NCBUNLINK = 0x70,};
enum MACRO_NEGOTIATE {NEGOTIATE_MAX_PREFIX = 32,};
enum MACRO_NUMCOLORS {NUMCOLORS = 24,};
enum MACRO_OLECMDERR {OLECMDERR_E_FIRST = -2147221248,OLECMDERR_E_NOTSUPPORTED = -2147221248,OLECMDERR_E_DISABLED = -2147221247,OLECMDERR_E_NOHELP = -2147221246,OLECMDERR_E_CANCELED = -2147221245,OLECMDERR_E_UNKNOWNGROUP = -2147221244,};
enum MACRO_OLECREATE {OLECREATE_LEAVERUNNING = 0x1,};
enum MACRO_OPENPROPS {OPENPROPS_NONE = 0x0,OPENPROPS_INHIBITPIF = 0x8000,};
enum MACRO_OVERSCORE {OVERSCORE = 0x305,};
enum MACRO_OVERWRITE {OVERWRITE_HIDDEN = 4,};
enum MACRO_PARAMFLAG {PARAMFLAG_NONE = 0,PARAMFLAG_FIN = 1,PARAMFLAG_FOUT = 2,PARAMFLAG_FLCID = 4,PARAMFLAG_FRETVAL = 8,PARAMFLAG_FOPT = 16,PARAMFLAG_FHASDEFAULT = 32,PARAMFLAG_FHASCUSTDATA = 64,};
enum MACRO_PARTITION {PARTITION_ENTRY_UNUSED = 0x0,PARTITION_FAT_12 = 0x1,PARTITION_XENIX_1 = 0x2,PARTITION_XENIX_2 = 0x3,PARTITION_FAT_16 = 0x4,PARTITION_EXTENDED = 0x5,PARTITION_HUGE = 0x6,PARTITION_IFS = 0x7,PARTITION_OS2BOOTMGR = 0xA,PARTITION_FAT32 = 0xB,PARTITION_FAT32_XINT13 = 0xC,PARTITION_XINT13 = 0xE,PARTITION_XINT13_EXTENDED = 0xF,PARTITION_PREP = 0x41,PARTITION_LDM = 0x42,PARTITION_UNIX = 0x63,};
enum MACRO_PATINVERT {PATINVERT = 0x5A0049,};
enum MACRO_PD_RESULT {PD_RESULT_CANCEL = 0,PD_RESULT_PRINT = 1,PD_RESULT_APPLY = 2,};
enum MACRO_PF_UNSPEC {PF_UNSPEC = 0,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_IPX = 6,PF_ISO = 7,PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_VOICEVIEW = 18,PF_FIREFOX = 19,PF_UNKNOWN1 = 20,PF_BAN = 21,PF_MAX = 32,};
enum MACRO_PO_DELETE {PO_DELETE = 0x13,PO_RENAME = 0x14,PO_PORTCHANGE = 0x20,PO_REN_PORT = 0x34,};
enum MACRO_PP_CLIENT {PP_CLIENT_HWND = 1,PP_CONTEXT_INFO = 11,PP_KEYEXCHANGE_KEYSIZE = 12,PP_SIGNATURE_KEYSIZE = 13,PP_KEYEXCHANGE_ALG = 14,PP_SIGNATURE_ALG = 15,PP_DELETEKEY = 24,};
enum MACRO_PRIVILEGE {PRIVILEGE_SET_ALL_NECESSARY = 1,};
enum MACRO_PROCESSOR {PROCESSOR_INTEL_386 = 386,PROCESSOR_INTEL_486 = 486,PROCESSOR_INTEL_PENTIUM = 586,PROCESSOR_INTEL_IA64 = 2200,PROCESSOR_AMD_X8664 = 8664,PROCESSOR_MIPS_R4000 = 4000,PROCESSOR_ALPHA_21064 = 21064,PROCESSOR_PPC_601 = 601,PROCESSOR_PPC_603 = 603,PROCESSOR_PPC_604 = 604,PROCESSOR_PPC_620 = 620,PROCESSOR_HITACHI_SH3 = 10003,PROCESSOR_HITACHI_SH3E = 10004,PROCESSOR_HITACHI_SH4 = 10005,PROCESSOR_MOTOROLA_821 = 821,PROCESSOR_SHx_SH3 = 103,PROCESSOR_SHx_SH4 = 104,PROCESSOR_STRONGARM = 2577,PROCESSOR_ARM720 = 1824,PROCESSOR_ARM820 = 2080,PROCESSOR_ARM920 = 2336,PROCESSOR_ARM_7TDMI = 70001,PROCESSOR_OPTIL = 18767,PROCESSOR_ARCHITECTURE_INTEL = 0,PROCESSOR_ARCHITECTURE_MIPS = 1,PROCESSOR_ARCHITECTURE_ALPHA = 2,PROCESSOR_ARCHITECTURE_PPC = 3,PROCESSOR_ARCHITECTURE_SHX = 4,PROCESSOR_ARCHITECTURE_ARM = 5,PROCESSOR_ARCHITECTURE_IA64 = 6,PROCESSOR_ARCHITECTURE_ALPHA64 = 7,PROCESSOR_ARCHITECTURE_MSIL = 8,PROCESSOR_ARCHITECTURE_AMD64 = 9,PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10,PROCESSOR_ARCHITECTURE_UNKNOWN = 65535,};
enum MACRO_QOSSPBASE {QOSSPBASE = 50000,};
enum MACRO_RC_TABLES {RC_TABLES = 257,RC_FONT = 258,RC_TRANSTAB = 259,RC_UFM = 260,RC_GTT = 261,RC_HTPATTERN = 264,RC_FD_GLYPHSET = 262,};
enum MACRO_RECURSIVE {RECURSIVE_MACHINE_CHECK = 0xFB,};
enum MACRO_REFERENCE {REFERENCE_WHITE_MIN = 6000,REFERENCE_WHITE_MAX = 10000,REFERENCE_BLACK_MIN = 0,REFERENCE_BLACK_MAX = 4000,};
enum MACRO_RPC_FLAGS {RPC_FLAGS_VALID_BIT = 0x8000,};
enum MACRO_RUNDLGORD {RUNDLGORD = 1545,};
enum MACRO_SCARD_ATR {SCARD_ATR_LENGTH = 33,SCARD_PROTOCOL_UNDEFINED = 0,SCARD_PROTOCOL_T0 = 1,SCARD_PROTOCOL_T1 = 2,SCARD_PROTOCOL_RAW = 65536,SCARD_PROTOCOL_Tx = 3,SCARD_PROTOCOL_DEFAULT = -2147483648,SCARD_PROTOCOL_OPTIMAL = 0,SCARD_POWER_DOWN = 0,SCARD_COLD_RESET = 1,SCARD_WARM_RESET = 2,};
enum MACRO_SEC_WINNT {SEC_WINNT_AUTH_IDENTITY_ANSI = 0x1,SEC_WINNT_AUTH_IDENTITY_UNICODE = 0x2,};
enum MACRO_SELECTDIB {SELECTDIB = 41,};
enum MACRO_SEMAPHORE {SEMAPHORE_MODIFY_STATE = 0x2,SEMAPHORE_ALL_ACCESS = 0x1F0003,};
enum MACRO_SIMULATED {SIMULATED_FONTTYPE = 0x8000,PRINTER_FONTTYPE = 0x4000,SCREEN_FONTTYPE = 0x2000,BOLD_FONTTYPE = 0x100,ITALIC_FONTTYPE = 0x200,REGULAR_FONTTYPE = 0x400,};
enum MACRO_SMART_CYL {SMART_CYL_LOW = 0x4F,SMART_CYL_HI = 0xC2,SMART_NO_ERROR = 0x0,SMART_IDE_ERROR = 0x1,SMART_INVALID_FLAG = 0x2,SMART_INVALID_COMMAND = 0x3,SMART_INVALID_BUFFER = 0x4,SMART_INVALID_DRIVE = 0x5,SMART_INVALID_IOCTL = 0x6,SMART_ERROR_NO_MEM = 0x7,SMART_INVALID_REGISTER = 0x8,SMART_NOT_SUPPORTED = 0x9,SMART_NO_IDE_DEVICE = 0xA,SMART_OFFLINE_ROUTINE_OFFLINE = 0x0,SMART_SHORT_SELFTEST_OFFLINE = 0x1,SMART_EXTENDED_SELFTEST_OFFLINE = 0x2,SMART_ABORT_OFFLINE_SELFTEST = 0x7F,SMART_SHORT_SELFTEST_CAPTIVE = 0x81,SMART_EXTENDED_SELFTEST_CAPTIVE = 0x82,};
enum MACRO_SOL_IRLMP {SOL_IRLMP = 0xFF,};
enum MACRO_SOMAXCONN {SOMAXCONN = 0x7FFFFFFF,};
enum MACRO_SPFILELOG {SPFILELOG_SYSTEMLOG = 0x1,SPFILELOG_FORCENEW = 0x2,SPFILELOG_QUERYONLY = 0x4,SPFILELOG_OEMFILE = 0x1,};
enum MACRO_SPSVCINST {SPSVCINST_TAGTOFRONT = 0x1,SPSVCINST_ASSOCSERVICE = 0x2,SPSVCINST_DELETEEVENTLOGENTRY = 0x4,SPSVCINST_NOCLOBBER_DISPLAYNAME = 0x8,SPSVCINST_NOCLOBBER_STARTTYPE = 0x10,SPSVCINST_NOCLOBBER_ERRORCONTROL = 0x20,SPSVCINST_NOCLOBBER_LOADORDERGROUP = 0x40,SPSVCINST_NOCLOBBER_DEPENDENCIES = 0x80,SPSVCINST_NOCLOBBER_DESCRIPTION = 0x100,SPSVCINST_STOPSERVICE = 0x200,SPSVCINST_CLOBBER_SECURITY = 0x400,};
enum MACRO_SP_PARITY {SP_PARITY = 0x1,SP_BAUD = 0x2,SP_DATABITS = 0x4,SP_STOPBITS = 0x8,SP_HANDSHAKING = 0x10,SP_PARITY_CHECK = 0x20,SP_RLSD = 0x40,};
enum MACRO_SRCINVERT {SRCINVERT = 0x660046,};
enum MACRO_STG_TOEND {STG_TOEND = 0xFFFFFFFF,STG_LAYOUT_SEQUENTIAL = 0x0,STG_LAYOUT_INTERLEAVED = 0x1,};
enum MACRO_TB_LINEUP {TB_LINEUP = 0,TB_LINEDOWN = 1,TB_PAGEUP = 2,TB_PAGEDOWN = 3,TB_THUMBPOSITION = 4,TB_THUMBTRACK = 5,TB_TOP = 6,TB_BOTTOM = 7,TB_ENDTRACK = 8,};
enum MACRO_TCP_TABLE {TCP_TABLE = 13,TCP_ROW = 14,};
enum MACRO_TC_NOTIFY {TC_NOTIFY_IFC_UP = 1,TC_NOTIFY_IFC_CLOSE = 2,TC_NOTIFY_IFC_CHANGE = 3,TC_NOTIFY_PARAM_CHANGED = 4,TC_NOTIFY_FLOW_CLOSE = 5,TC_INVALID_HANDLE = 0,};
enum MACRO_TIME_ZONE {TIME_ZONE_ID_INVALID = 0xFFFFFFFF,};
enum MACRO_TRANSFORM {TRANSFORM_CTM = 4107,};
enum MACRO_TRANSPORT {TRANSPORT_TYPE_CN = 0x1,TRANSPORT_TYPE_DG = 0x2,TRANSPORT_TYPE_LPC = 0x4,TRANSPORT_TYPE_WMSG = 0x8,};
enum MACRO_UPDFCACHE {UPDFCACHE_NODATACACHE = 0x1,UPDFCACHE_ONSAVECACHE = 0x2,UPDFCACHE_ONSTOPCACHE = 0x4,UPDFCACHE_NORMALCACHE = 0x8,UPDFCACHE_IFBLANK = 0x10,UPDFCACHE_ONLYIFBLANK = 0x80000000,UPDFCACHE_IFBLANKORONSAVECACHE = 0x12,UPDFCACHE_ALL = 0x7FFFFFFF,UPDFCACHE_ALLBUTNODATACACHE = 0x7FFFFFFE,};
enum MACRO_URLACTION {URLACTION_MIN = 0x1000,URLACTION_DOWNLOAD_MIN = 0x1000,URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 0x1001,URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 0x1004,URLACTION_DOWNLOAD_CURR_MAX = 0x1004,URLACTION_DOWNLOAD_MAX = 0x11FF,URLACTION_ACTIVEX_MIN = 0x1200,URLACTION_ACTIVEX_RUN = 0x1200,};
enum MACRO_URLPOLICY {URLPOLICY_ACTIVEX_CHECK_LIST = 0x10000,};
enum MACRO_USER_MODE {USER_MODE_HEALTH_MONITOR = 0x9E,};
enum MACRO_VER_EQUAL {VER_EQUAL = 1,VER_GREATER = 2,VER_GREATER_EQUAL = 3,VER_LESS = 4,VER_LESS_EQUAL = 5,VER_AND = 6,VER_OR = 7,VER_CONDITION_MASK = 7,VER_NUM_BITS_PER_CONDITION_MASK = 3,VER_MINORVERSION = 1,VER_MAJORVERSION = 2,VER_BUILDNUMBER = 4,VER_PLATFORMID = 8,VER_SERVICEPACKMINOR = 16,VER_SERVICEPACKMAJOR = 32,VER_SUITENAME = 64,VER_PRODUCT_TYPE = 128,VER_NT_WORKSTATION = 1,VER_NT_DOMAIN_CONTROLLER = 2,VER_NT_SERVER = 3,VER_PLATFORM_WIN32s = 0,VER_PLATFORM_WIN32_WINDOWS = 1,VER_PLATFORM_WIN32_NT = 2,};
enum MACRO_VER_MAJOR {VER_MAJOR_PRODUCTVER = 6,VER_MINOR_PRODUCTVER = 0,};
enum MACRO_VTDATEGRE {VTDATEGRE_MAX = 2958465,VTDATEGRE_MIN = -657434,};
enum MACRO_WHITENESS {WHITENESS = 0xFF0062,NOMIRRORBITMAP = 0x80000000,};
enum MACRO_WST_BYTES {WST_BYTES_PER_LINE = 42,};
enum MACRO_X509_BITS {X509_BITS_WITHOUT_TRAILING_ZEROES = 51,};
enum MACRO_X509_CERT {X509_CERT = 1,X509_CERT_TO_BE_SIGNED = 2,X509_CERT_CRL_TO_BE_SIGNED = 3,X509_CERT_REQUEST_TO_BE_SIGNED = 4,X509_EXTENSIONS = 5,X509_NAME_VALUE = 6,X509_NAME = 7,X509_PUBLIC_KEY_INFO = 8,X509_AUTHORITY_KEY_ID = 9,X509_KEY_ATTRIBUTES = 10,X509_KEY_USAGE_RESTRICTION = 11,X509_ALTERNATE_NAME = 12,X509_BASIC_CONSTRAINTS = 13,X509_KEY_USAGE = 14,X509_BASIC_CONSTRAINTS2 = 15,X509_CERT_POLICIES = 16,};
enum MACRO_X509_PKIX {X509_PKIX_POLICY_QUALIFIER_USERNOTICE = 46,X509_DH_PUBLICKEY = 38,X509_DH_PARAMETERS = 47,};
enum MACRO__BDATYPES {_BDATYPES_ = 1,};
enum MACRO__SETUPAPI {_SETUPAPI_VER = 1281,};
typedef struct _MCDLOGICOPSTATE MCDLOGICOPSTATE;
typedef struct _MCDSTATE_PREFIX MCDSTATE_PREFIX;
typedef struct _MCDSTATE_RENDER MCDSTATE_RENDER;
typedef struct _MCDSTATE_TEXENV MCDSTATE_TEXENV;
typedef struct __MCDTEXTURESTATE MCDTEXTURESTATE;
typedef struct tagMCI_BREAK_PARMS MCI_BREAK_PARMS;
typedef struct tagMCI_INFO_PARMSA MCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW MCI_INFO_PARMSW;
typedef struct tagMCI_LOAD_PARMSA MCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW MCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA MCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW MCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA MCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW MCI_SAVE_PARMSW;
typedef struct _MIBICMPSTATS_EX MIBICMPSTATS_EX;
typedef struct _A2D3C6DF54C31D821ABE78046EA78F8E MIB_BOUNDARYROW;
typedef struct _MIB_IPADDRTABLE MIB_IPADDRTABLE;
typedef struct _MIB_IPDESTTABLE MIB_IPDESTTABLE;
typedef struct _MIB_IPMCAST_MFE MIB_IPMCAST_MFE;
typedef struct _MIB_IPMCAST_OIF MIB_IPMCAST_OIF;
typedef struct _MIB_OPAQUE_INFO MIB_OPAQUE_INFO;
typedef struct midiproptimediv_tag MIDIPROPTIMEDIV;
typedef struct midistrmbuffver_tag MIDISTRMBUFFVER;
typedef struct _MONITOR_INFO_1A MONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W MONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A MONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W MONITOR_INFO_2W;
typedef struct tagMOUSEHOOKSTRUCT MOUSEHOOKSTRUCT;
typedef struct mpeg1waveformat_tag MPEG1WAVEFORMAT;
enum MPEG2StreamType {BDA_UNITIALIZED_MPEG2STREAMTYPE = 0xFFFFFFFF,Reserved1 = 0x0,ISO_IEC_11172_2_VIDEO = 0x1,ISO_IEC_13818_2_VIDEO = 0x2,ISO_IEC_11172_3_AUDIO = 0x3,ISO_IEC_13818_3_AUDIO = 0x4,ISO_IEC_13818_1_PRIVATE_SECTION = 0x5,ISO_IEC_13818_1_PES = 0x6,ISO_IEC_13522_MHEG = 0x7,ANNEX_A_DSM_CC = 0x8,ITU_T_REC_H_222_1 = 0x9,ISO_IEC_13818_6_TYPE_A = 0xA,ISO_IEC_13818_6_TYPE_B = 0xB,ISO_IEC_13818_6_TYPE_C = 0xC,ISO_IEC_13818_6_TYPE_D = 0xD,ISO_IEC_13818_1_AUXILIARY = 0xE,ISO_IEC_13818_1_RESERVED = 0xF,USER_PRIVATE = 0x10,};
typedef struct _MPR_INTERFACE_0 MPR_INTERFACE_0;
typedef struct _MPR_TRANSPORT_0 MPR_TRANSPORT_0;
typedef struct _NABTSFEC_BUFFER NABTSFEC_BUFFER;
typedef struct _NDIS_802_11_WEP NDIS_802_11_WEP;
typedef struct _NDIS_WLAN_BSSID NDIS_WLAN_BSSID;
typedef struct _NDR_CS_ROUTINES NDR_CS_ROUTINES;
typedef struct _NETWORK_ADDRESS NETWORK_ADDRESS;
typedef struct _EAF9C7AE235510435B672EB36E720462 NMCBEDRAGBEGINA;
typedef struct _8C7301159AF0C1BFC267CBF90877013D NMCBEDRAGBEGINW;
typedef struct tagNMLVGETINFOTIPA NMLVGETINFOTIPA;
typedef struct tagNMLVGETINFOTIPW NMLVGETINFOTIPW;
typedef struct tagNMTBGETINFOTIPA NMTBGETINFOTIPA;
typedef struct tagNMTBGETINFOTIPW NMTBGETINFOTIPW;
typedef struct tagNMTVGETINFOTIPA NMTVGETINFOTIPA;
typedef struct tagNMTVGETINFOTIPW NMTVGETINFOTIPW;
typedef struct _NOTIFYICONDATAA NOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW NOTIFYICONDATAW;
typedef struct tagCANDIDATEFORM *NPCANDIDATEFORM;
typedef struct tagCANDIDATEINFO *NPCANDIDATEINFO;
typedef struct tagCANDIDATELIST *NPCANDIDATELIST;
typedef struct tagDEBUGHOOKINFO *NPDEBUGHOOKINFO;
typedef struct tagDRVCONFIGINFO *NPDRVCONFIGINFO;
typedef struct tagMIDIOUTCAPS2A *NPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W *NPMIDIOUTCAPS2W;
typedef struct pcmwaveformat_tag *NPPCMWAVEFORMAT;
typedef struct tagREGISTERWORDA *NPREGISTERWORDA;
typedef struct tagREGISTERWORDW *NPREGISTERWORDW;
typedef struct tagWAVEOUTCAPS2A *NPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W *NPWAVEOUTCAPS2W;
typedef struct _NTFS_STATISTICS NTFS_STATISTICS;
struct NamespaceWalker;
typedef int OLE_XPOS_PIXELS;
typedef int OLE_YPOS_PIXELS;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO;
typedef struct _ADAPTER_STATUS *PADAPTER_STATUS;
typedef struct _ADDJOB_INFO_1A *PADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W *PADDJOB_INFO_1W;
typedef struct arp_send_reply *PARP_SEND_REPLY;
typedef struct _PATHNAME_BUFFER PATHNAME_BUFFER;
typedef struct tagBITMAPCOREINFO *PBITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 *PBITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 *PBITMAPV5HEADER;
typedef struct _CABINET_INFO_A *PCABINET_INFO_A;
typedef struct _CABINET_INFO_W *PCABINET_INFO_W;
typedef struct _CAT_MEMBERINFO *PCAT_MEMBERINFO;
typedef struct _CERT_EXTENSION *PCERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB *PCERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO *PCERT_NAME_INFO;
typedef struct _CERT_POLICY_ID *PCERT_POLICY_ID;
typedef  char *PCInterfaceName;
typedef struct _COMPROPSHEETUI *PCOMPROPSHEETUI;
typedef struct tagCOPYDATASTRUCT *PCOPYDATASTRUCT;
typedef struct _CPSUIDATABLOCK *PCPSUIDATABLOCK;
typedef struct _CRL_DIST_POINT *PCRL_DIST_POINT;
typedef struct _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO *PCRYPT_OID_INFO;
typedef struct _CRYPT_URL_INFO *PCRYPT_URL_INFO;
typedef struct _DD_NTCALLBACKS *PDD_NTCALLBACKS;
typedef struct _DD_SETMODEDATA *PDD_SETMODEDATA;
typedef struct _DD_SURFACE_INT *PDD_SURFACE_INT;
typedef struct _DISK_HISTOGRAM *PDISK_HISTOGRAM;
typedef struct tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;
typedef struct _DRIVER_INFO_1A *PDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W *PDRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A *PDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W *PDRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A *PDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W *PDRIVER_INFO_3W;
typedef struct _DRIVER_INFO_4A *PDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W *PDRIVER_INFO_4W;
typedef struct _DRIVER_INFO_5A *PDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W *PDRIVER_INFO_5W;
typedef struct _DRIVER_INFO_6A *PDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W *PDRIVER_INFO_6W;
typedef struct _tagEDITBALLOONTIP *PEDITBALLOONTIP;
typedef struct tagABORTPATH *PEMRCLOSEFIGURE;
typedef struct tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW;
typedef struct tagABORTPATH *PEMRFLATTENPATH;
typedef struct tagEMRNAMEDESCAPE *PEMRNAMEDESCAPE;
typedef struct tagEMRPIXELFORMAT *PEMRPIXELFORMAT;
typedef struct tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON;
typedef struct _PERF_DATA_BLOCK PERF_DATA_BLOCK;
typedef struct _EVENTLOGRECORD *PEVENTLOGRECORD;
typedef struct _FAT_STATISTICS *PFAT_STATISTICS;
typedef struct tagFLOATOBJ_XFORM *PFLOATOBJ_XFORM;
typedef struct _GET_INPUT_LINE *PGET_INPUT_LINE;
typedef struct _PIPE_DIMENSIONS PIPE_DIMENSIONS;
typedef struct _IP_ADDR_STRING *PIP_ADDR_STRING;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 *PIP_MASK_STRING;
typedef struct tagKBDTABLE_MULTI *PKBDTABLE_MULTI;
typedef struct _KERB_AUTH_DATA *PKERB_AUTH_DATA;
typedef struct _KERB_S4U_LOGON *PKERB_S4U_LOGON;
typedef struct _9CC657B7E0AE245246966219C61A944E *PKSCLOCK_CREATE;
typedef struct _KSGOP_USERDATA *PKSGOP_USERDATA;
typedef struct _KSMPEGVID_RECT *PKSMPEGVID_RECT;
typedef struct _A4CC0F087DE00420119DAAB092DFFA3E *PKSNODEPROPERTY;
typedef struct _01DCE0ED23F464638BF845FBE919C7FC *PKSP_NODE_ESPID;
typedef struct _EF98EE567420140E285BF0657F46953F *PKSP_TIMEFORMAT;
typedef struct tagKS_AMVPDIMINFO *PKS_AMVPDIMINFO;
typedef struct _3990AA19D6F3231E9709B3F98F437D89 *PKS_COMPRESSION;
typedef struct tagLVGROUPMETRICS *PLVGROUPMETRICS;
typedef struct tagLVTILEVIEWINFO *PLVTILEVIEWINFO;
typedef struct tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS;
typedef struct _MIB_IPNETTABLE *PMIB_IPNETTABLE;
typedef struct _MIB_ROUTESTATE *PMIB_ROUTESTATE;
typedef void *PMIDL_XMIT_TYPE;
typedef struct tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT;
typedef struct _49CD7323AA35D3C00204BB7AA8563FFA *PMOVE_FILE_DATA;
typedef struct tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT;
typedef struct _MSV1_0_AV_PAIR *PMSV1_0_AV_PAIR;
typedef struct tagNEWTEXTMETRICA *PNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *PNEWTEXTMETRICW;
typedef struct _OSVERSIONINFOA *POSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *POSVERSIONINFOW;
typedef struct _PRINTER_INFO_3 *PPRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 *PPRINTER_INFO_6;
typedef struct _PROTOCOL_INFOA *PPROTOCOL_INFOA;
typedef struct _PROTOCOL_INFOW *PPROTOCOL_INFOW;
typedef struct tagRAWINPUTDEVICE *PRAWINPUTDEVICE;
typedef struct tagRAWINPUTHEADER *PRAWINPUTHEADER;
typedef struct _READ_WRITE_MSR *PREAD_WRITE_MSR;
typedef struct _PRINTER_INFO_1A PRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W PRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A PRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W PRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A PRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W PRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A PRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W PRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A PRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W PRINTER_INFO_7W;
typedef struct _PRINTER_INFO_8A PRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W PRINTER_INFO_8W;
typedef struct _PRINTER_INFO_9A PRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W PRINTER_INFO_9W;
typedef struct _SCONTEXT_QUEUE *PSCONTEXT_QUEUE;
typedef struct _SESSION_BUFFER *PSESSION_BUFFER;
typedef struct _SESSION_HEADER *PSESSION_HEADER;
typedef struct _SETRESULT_INFO *PSETRESULT_INFO;
typedef struct _SOCKET_ADDRESS *PSOCKET_ADDRESS;
typedef struct _SOURCE_MEDIA_A *PSOURCE_MEDIA_A;
typedef struct _SOURCE_MEDIA_W *PSOURCE_MEDIA_W;
typedef struct _SYM_DUMP_PARAM *PSYM_DUMP_PARAM;
typedef struct _UFF_FILEHEADER *PUFF_FILEHEADER;
typedef struct _USAGE_AND_PAGE *PUSAGE_AND_PAGE;
typedef struct _VK_TO_WCHARS10 *PVK_TO_WCHARS10;
typedef struct _WCE_DEVICELIST *PWCE_DEVICELIST;
typedef struct tagWNODE_ALL_DATA *PWNODE_ALL_DATA;
typedef struct _QOS_TCP_TRAFFIC QOS_TCP_TRAFFIC;
typedef struct _QUOTA_LIMITS_EX QUOTA_LIMITS_EX;
typedef struct _REASSIGN_BLOCKS REASSIGN_BLOCKS;
typedef struct tagRECONVERTSTRING RECONVERTSTRING;
typedef struct tagRID_DEVICE_INFO RID_DEVICE_INFO;
typedef struct _RPC_ASYNC_STATE RPC_ASYNC_STATE;
typedef void  RPC_CLIENT_FREE(void *Ptr);
typedef struct _RSVP_FILTERSPEC RSVP_FILTERSPEC;
typedef struct tagRemHENHMETAFILE RemHENHMETAFILE;
typedef struct _RemotableHandle RemotableHandle;
typedef struct _wireSAFEARR_BRECORD SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID SAFEARR_HAVEIID;
typedef struct _wireSAFEARR_UNKNOWN SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_VARIANT SAFEARR_VARIANT;
typedef struct _SENDCMDINPARAMS SENDCMDINPARAMS;
typedef struct _SERVICE_ADDRESS SERVICE_ADDRESS;
typedef struct _SHDESCRIPTIONID SHDESCRIPTIONID;
typedef struct _SHFILEOPSTRUCTA SHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW SHFILEOPSTRUCTW;
typedef struct _SIMULATE_CAPS_1 SIMULATE_CAPS_1;
typedef struct _SP_DEVINFO_DATA SP_DEVINFO_DATA;
struct SWbemNamedValue;
struct SWbemObjectPath;
struct SWbemServicesEx;
enum SYSNLS_FUNCTION {COMPARE_STRING = 0x1,};
struct ShellFolderItem;
struct ShellFolderView;
struct ShellLinkObject;
struct SizeCategorizer;
typedef struct _TAPE_STATISTICS TAPE_STATISTICS;
typedef struct _B32EBC34E16EC960AF2175E3ACF4C5B6 TBREPLACEBITMAP;
typedef struct tagTRACKMOUSEEVENT TRACKMOUSEEVENT;
typedef struct tagTTPOLYGONHEADER TTPOLYGONHEADER;
typedef struct tagTVINSERTSTRUCTA TVINSERTSTRUCTA;
typedef struct tagTVINSERTSTRUCTW TVINSERTSTRUCTW;
struct TimeCategorizer;
typedef struct tagUSEROBJECTFLAGS USEROBJECTFLAGS;
typedef struct _USER_MARSHAL_CB USER_MARSHAL_CB;
typedef struct tagVersionedStream VERSIONEDSTREAM;
typedef struct _VIDEOMEMORYINFO VIDEOMEMORYINFO;
typedef struct _VIDEOPARAMETERS VIDEOPARAMETERS;
typedef struct _WIN32_STREAM_ID WIN32_STREAM_ID;
typedef struct tagWINDOWPLACEMENT WINDOWPLACEMENT;
typedef struct _WINDOWS_IAS_SET WINDOWS_IAS_SET;
typedef struct _WIN_CERTIFICATE WIN_CERTIFICATE;
typedef struct tagWNODE_TOO_SMALL WNODE_TOO_SMALL;
typedef struct _WSANSClassInfoA WSANSCLASSINFOA;
typedef struct _WSANSClassInfoW WSANSCLASSINFOW;
typedef struct _WST_BUFFER_LINE WST_BUFFER_LINE;
enum WbemCimtypeEnum {wbemCimtypeSint8 = 0x10,wbemCimtypeUint8 = 0x11,wbemCimtypeSint16 = 0x2,wbemCimtypeUint16 = 0x12,wbemCimtypeSint32 = 0x3,wbemCimtypeUint32 = 0x13,wbemCimtypeSint64 = 0x14,wbemCimtypeUint64 = 0x15,wbemCimtypeReal32 = 0x4,wbemCimtypeReal64 = 0x5,wbemCimtypeBoolean = 0xB,wbemCimtypeString = 0x8,wbemCimtypeDatetime = 0x65,wbemCimtypeReference = 0x66,wbemCimtypeChar16 = 0x67,wbemCimtypeObject = 0xD,};
struct WbemClassObject;
struct WbemLevel1Login;
enum _D3DZBUFFERTYPE {D3DZB_FALSE = 0x0,D3DZB_TRUE = 0x1,D3DZB_USEW = 0x2,D3DZB_FORCE_DWORD = 0x7FFFFFFF,};
enum _DETECTION_TYPE {DetectNone = 0x0,DetectInt13 = 0x1,DetectExInt13 = 0x2,};
struct _HYPER_SIZEDARR {unsigned int clSize;long long *pData;};
enum _IDL_CS_CONVERT {IDL_CS_NO_CONVERT = 0x0,IDL_CS_IN_PLACE_CONVERT = 0x1,IDL_CS_NEW_BUFFER_CONVERT = 0x2,};
enum _NDIS_BPC_ERROR {bpcErrorUnknownFailure = 0xC0FF0000,bpcErrorHardwareFailure = 0xC0FF0001,bpcErrorProviderFailure = 0xC0FF0002,bpcErrorNoDataDevice = 0xC0FF0003,bpcErrorNoTuningDevice = 0xC0FF0004,bpcErrorDeviceNotCapable = 0xC0FF0005,bpcErrorConflictingDevice = 0xC0FF0006,bpcErrorConflictingCapability = 0xC0FF0007,bpcErrorNoBufferMemory = 0xC0FF0008,bpcErrorNoResources = 0xC0FF0009,bpcErrorAdapterClosing = 0xC0FF000A,bpcErrorConnectionClosing = 0xC0FF000B,bpcErrorTooComplex = 0xC0FF000C,bpcErrorProviderNotSupported = 0xC0FF000D,bpcErrorUnknownProviderStructure = 0xC0FF000E,bpcErrorAddressNotSupported = 0xC0FF000F,bpcErrorInvalidAddress = 0xC0FF0010,bpcErrorUnknownAdapterStructure = 0xC0FF0011,};
enum _SC_ACTION_TYPE {SC_ACTION_NONE = 0x0,SC_ACTION_RESTART = 0x1,SC_ACTION_REBOOT = 0x2,SC_ACTION_RUN_COMMAND = 0x3,};
enum _SC_STATUS_TYPE {SC_STATUS_PROCESS_INFO = 0x0,};
struct _SHORT_SIZEDARR {unsigned int clSize;unsigned short *pData;};
enum _UDP_ENCAP_TYPE {OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = 0x0,OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = 0x1,};
enum _WSAEcomparator {COMP_EQUAL = 0x0,COMP_NOTLESS = 0x1,};
enum _tagOIBDG_FLAGS {OIBDG_APARTMENTTHREADED = 0x100,OIBDG_DATAONLY = 0x1000,};
enum _tagPARSEACTION {PARSE_CANONICALIZE = 0x1,PARSE_FRIENDLY = 0x2,PARSE_SECURITY_URL = 0x3,PARSE_ROOTDOCUMENT = 0x4,PARSE_DOCUMENT = 0x5,PARSE_ANCHOR = 0x6,PARSE_ENCODE = 0x7,PARSE_DECODE = 0x8,PARSE_PATH_FROM_URL = 0x9,PARSE_URL_FROM_PATH = 0xA,PARSE_MIME = 0xB,PARSE_SERVER = 0xC,PARSE_SCHEMA = 0xD,PARSE_SITE = 0xE,PARSE_DOMAIN = 0xF,PARSE_LOCATION = 0x10,PARSE_SECURITY_DOMAIN = 0x11,PARSE_ESCAPE = 0x12,PARSE_UNESCAPE = 0x13,};
enum _tagQUERYOPTION {QUERY_EXPIRATION_DATE = 0x1,QUERY_TIME_OF_LAST_CHANGE = 0x2,QUERY_CONTENT_ENCODING = 0x3,QUERY_CONTENT_TYPE = 0x4,QUERY_REFRESH = 0x5,QUERY_RECOMBINE = 0x6,QUERY_CAN_NAVIGATE = 0x7,QUERY_USES_NETWORK = 0x8,QUERY_IS_CACHED = 0x9,QUERY_IS_INSTALLEDENTRY = 0xA,QUERY_IS_CACHED_OR_MAPPED = 0xB,QUERY_USES_CACHE = 0xC,QUERY_IS_SECURE = 0xD,QUERY_IS_SAFE = 0xE,};
typedef struct tag_s_RIFFWAVE_INST s_RIFFWAVE_inst;
enum tagCOWAIT_FLAGS {COWAIT_WAITALL = 0x1,COWAIT_ALERTABLE = 0x2,COWAIT_INPUTAVAILABLE = 0x4,};
enum tagDISCARDCACHE {DISCARDCACHE_SAVEIFDIRTY = 0x0,DISCARDCACHE_NOSAVE = 0x1,};
enum tagRASCONNSTATE {RASCS_OpenPort = 0x0,RASCS_PortOpened = 0x1,RASCS_ConnectDevice = 0x2,RASCS_DeviceConnected = 0x3,RASCS_AllDevicesConnected = 0x4,RASCS_Authenticate = 0x5,RASCS_AuthNotify = 0x6,RASCS_AuthRetry = 0x7,RASCS_AuthCallback = 0x8,RASCS_AuthChangePassword = 0x9,RASCS_AuthProject = 0xA,RASCS_AuthLinkSpeed = 0xB,RASCS_AuthAck = 0xC,RASCS_ReAuthenticate = 0xD,RASCS_Authenticated = 0xE,RASCS_PrepareForCallback = 0xF,RASCS_WaitForModemReset = 0x10,RASCS_WaitForCallback = 0x11,RASCS_Projected = 0x12,RASCS_StartAuthentication = 0x13,RASCS_CallbackComplete = 0x14,RASCS_LogonNetwork = 0x15,RASCS_SubEntryConnected = 0x16,RASCS_SubEntryDisconnected = 0x17,RASCS_Interactive = 0x1000,RASCS_RetryAuthentication = 0x1001,RASCS_CallbackSetByCaller = 0x1002,RASCS_PasswordExpired = 0x1003,RASCS_InvokeEapUI = 0x1004,RASCS_Connected = 0x2000,RASCS_Disconnected = 0x2001,};
enum tagSTDMSHLFLAGS {SMEXF_SERVER = 0x1,SMEXF_HANDLER = 0x2,};
enum tagShutdownType {IdleShutdown = 0x0,ForcedShutdown = 0x1,};
enum tagXMLEMEM_TYPE {XMLELEMTYPE_ELEMENT = 0x0,XMLELEMTYPE_TEXT = 0x1,XMLELEMTYPE_COMMENT = 0x2,XMLELEMTYPE_DOCUMENT = 0x3,XMLELEMTYPE_DTD = 0x4,XMLELEMTYPE_PI = 0x5,XMLELEMTYPE_OTHER = 0x6,};
enum tag_WBEM_LIMITS {WBEM_MAX_IDENTIFIER = 0x1000,WBEM_MAX_QUERY = 0x4000,WBEM_MAX_PATH = 0x2000,WBEM_MAX_OBJECT_NESTING = 0x40,WBEM_MAX_USER_PROPERTIES = 0x400,};
typedef struct _ACCESSRECTLIST ACCESSRECTLIST;
typedef struct _ADAPTER_STATUS ADAPTER_STATUS;
typedef struct _ADDJOB_INFO_1A ADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W ADDJOB_INFO_1W;
typedef struct aptxwaveformat_tag APTXWAVEFORMAT;
typedef struct arp_send_reply ARP_SEND_REPLY;
typedef struct _AVISTREAMINFOA AVISTREAMINFOA;
typedef struct _AVISTREAMINFOW AVISTREAMINFOW;
struct AsyncIPipeByte {struct AsyncIPipeByteVtbl *lpVtbl;};
struct AsyncIPipeLong {struct AsyncIPipeLongVtbl *lpVtbl;};
typedef struct tagBITMAPCOREINFO BITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 BITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 BITMAPV5HEADER;
typedef struct _CABINET_INFO_A CABINET_INFO_A;
typedef struct _CABINET_INFO_W CABINET_INFO_W;
typedef struct _CAT_MEMBERINFO CAT_MEMBERINFO;
typedef struct tagCBT_CREATEWNDA CBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW CBT_CREATEWNDW;
typedef struct _CERT_EXTENSION CERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB CERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO CERT_NAME_INFO;
typedef struct _CERT_POLICY_ID CERT_POLICY_ID;
typedef struct _COAUTHIDENTITY COAUTHIDENTITY;
typedef struct _COMPROPSHEETUI COMPROPSHEETUI;
typedef struct _CONNECTIONLIST CONNECTIONLIST;
typedef struct tagCOPYDATASTRUCT COPYDATASTRUCT;
typedef struct _CPSUIDATABLOCK CPSUIDATABLOCK;
typedef struct _CRL_DIST_POINT CRL_DIST_POINT;
typedef struct _CRYPT_BIT_BLOB CRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO CRYPT_OID_INFO;
typedef struct _CRYPT_URL_INFO CRYPT_URL_INFO;
typedef struct tagCStdStubBuffer CStdStubBuffer;
typedef struct _D3DCLIPSTATUS8 D3DCLIPSTATUS8;
typedef struct _D3DDeviceDesc7 D3DDEVICEDESC7;
typedef struct _D3DDISPLAYMODE D3DDISPLAYMODE;
typedef struct _D3DEXECUTEDATA D3DEXECUTEDATA;
typedef struct _D3DINSTRUCTION D3DINSTRUCTION;
typedef struct _D3DLINEPATTERN D3DLINEPATTERN;
typedef struct _D3DLOCKED_RECT D3DLOCKED_RECT;
typedef struct _D3DTEXTURELOAD D3DTEXTURELOAD;
typedef struct _D3DVOLUME_DESC D3DVOLUME_DESC;
typedef struct _DCICREATEINPUT DCICREATEINPUT;
typedef struct _DCISURFACEINFO DCISURFACEINFO;
typedef struct _DDCOLORCONTROL DDCOLORCONTROL;
typedef struct _DDHAL_FLIPDATA DDHAL_FLIPDATA;
typedef struct _DDHAL_LOCKDATA DDHAL_LOCKDATA;
typedef struct _DDMCBUFFERINFO DDMCBUFFERINFO;
typedef struct _DDNT_DXVERSION DDNT_DXVERSION;
typedef struct _DDSURFACEDESC2 DDSURFACEDESC2;
typedef struct _DD_NTCALLBACKS DD_NTCALLBACKS;
typedef struct _DD_SURFACE_INT DD_SURFACE_INT;
typedef struct tagDELEGATEITEMID DELEGATEITEMID;
typedef struct _PRIVKEYVER3 DHPRIVKEY_VER3;
typedef struct _DISCDLGSTRUCTA DISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW DISCDLGSTRUCTW;
typedef struct _DISK_HISTOGRAM DISK_HISTOGRAM;
typedef struct _DLLVERSIONINFO DLLVERSIONINFO;
typedef struct _DMUS_COPYRIGHT DMUS_COPYRIGHT;
typedef struct _DMUS_LFOPARAMS DMUS_LFOPARAMS;
typedef struct _DMUS_MSCPARAMS DMUS_MSCPARAMS;
typedef struct _DMUS_NOTERANGE DMUS_NOTERANGE;
typedef struct _DMUS_PEGPARAMS DMUS_PEGPARAMS;
typedef struct _DMUS_VEGPARAMS DMUS_VEGPARAMS;
typedef struct _DMUS_WAVEARTDL DMUS_WAVEARTDL;
typedef struct tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
typedef struct tagDRAWTEXTPARAMS DRAWTEXTPARAMS;
typedef struct _DRIVER_INFO_1A DRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W DRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A DRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W DRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A DRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W DRIVER_INFO_3W;
typedef struct _DRIVER_INFO_4A DRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W DRIVER_INFO_4W;
typedef struct _DRIVER_INFO_5A DRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W DRIVER_INFO_5W;
typedef struct _DRIVER_INFO_6A DRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W DRIVER_INFO_6W;
typedef struct _DSCBUFFERDESC1 DSCBUFFERDESC1;
typedef struct _DSFXCompressor DSFXCompressor;
typedef struct _DSFXDistortion DSFXDistortion;
typedef struct _PUBKEYVER3 DSSPUBKEY_VER3;
typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;
typedef struct _LONG_SIZEDARR DWORD_SIZEDARR;
typedef struct wavefilter_echo_tag ECHOWAVEFILTER;
typedef struct _tagEDITBALLOONTIP EDITBALLOONTIP;
typedef struct tagABORTPATH EMRCLOSEFIGURE;
typedef struct tagEMREXTTEXTOUTA EMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA EMREXTTEXTOUTW;
typedef struct tagABORTPATH EMRFLATTENPATH;
typedef struct tagEMRNAMEDESCAPE EMRNAMEDESCAPE;
typedef struct tagEMRPIXELFORMAT EMRPIXELFORMAT;
typedef struct tagEMRPOLYPOLYLINE EMRPOLYPOLYGON;
typedef struct tagENUMLOGFONTEXA ENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW ENUMLOGFONTEXW;
typedef struct _EVENTLOGRECORD EVENTLOGRECORD;
typedef struct tagEXBMINFOHEADER EXBMINFOHEADER;
typedef struct _FAT_STATISTICS FAT_STATISTICS;
typedef struct _FD_KERNINGPAIR FD_KERNINGPAIR;
typedef struct _FLAG_STGMEDIUM FLAG_STGMEDIUM;
typedef struct tagFLOATOBJ_XFORM FLOATOBJ_XFORM;
typedef struct _FLOWDESCRIPTOR FLOWDESCRIPTOR;
typedef struct __MIDL___MIDL_itf_shobjidl_0202_0003 FOLDERSETTINGS;
struct FileSearchBand;
struct FolderItemVerb {struct FolderItemVerbVtbl *lpVtbl;};
struct FolderViewHost;
typedef struct _GET_INPUT_LINE GET_INPUT_LINE;
struct HACMDRIVERID__ {int unused;};
typedef void *HCERTSTOREPROV;
typedef struct _HD_TEXTFILTERA HD_TEXTFILTERA;
typedef struct _HD_TEXTFILTERW HD_TEXTFILTERW;
struct HENHMETAFILE__ {int unused;};
typedef struct _PSP *HPROPSHEETPAGE;
typedef struct _HYPER_SIZEDARR HYPER_SIZEDARR;
enum HierarchyAlpha {BDA_HALPHA_NOT_SET = 0xFFFFFFFF,BDA_HALPHA_NOT_DEFINED = 0x0,BDA_HALPHA_1 = 0x1,BDA_HALPHA_2 = 0x2,BDA_HALPHA_4 = 0x3,BDA_HALPHA_MAX = 0x4,};
struct IAVIEditStream {struct IAVIEditStreamVtbl *lpVtbl;};
struct IAccPropServer {struct IAccPropServerVtbl *lpVtbl;};
struct IAutoComplete2 {struct IAutoComplete2Vtbl *lpVtbl;};
typedef struct _797ABA875A7F80AEFE23C6BF7D56B10A ICDECOMPRESSEX;
struct IClassFactory2 {struct IClassFactory2Vtbl *lpVtbl;};
struct ICreateTypeLib {struct ICreateTypeLibVtbl *lpVtbl;};
struct IDefViewSafety {struct IDefViewSafetyVtbl *lpVtbl;};
struct IDeskBarClient {struct IDeskBarClientVtbl *lpVtbl;};
struct IDockingWindow {struct IDockingWindowVtbl *lpVtbl;};
struct IEnumFORMATETC {struct IEnumFORMATETCVtbl *lpVtbl;};
struct IExtractImage2 {struct IExtractImage2Vtbl *lpVtbl;};
struct IFillLockBytes {struct IFillLockBytesVtbl *lpVtbl;};
struct IHttpNegotiate {struct IHttpNegotiateVtbl *lpVtbl;};
struct IInitializeSpy {struct IInitializeSpyVtbl *lpVtbl;};
struct IKsAllocatorEx;
struct IKsPropertySet {struct IKsPropertySetVtbl *lpVtbl;};
struct ILayoutStorage {struct ILayoutStorageVtbl *lpVtbl;};
struct IMessageFilter {struct IMessageFilterVtbl *lpVtbl;};
struct INamespaceWalk {struct INamespaceWalkVtbl *lpVtbl;};
struct IOleClientSite {struct IOleClientSiteVtbl *lpVtbl;};
struct IOplockStorage {struct IOplockStorageVtbl *lpVtbl;};
typedef struct _IP_ADDR_STRING IP_ADDR_STRING;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 IP_MASK_STRING;
struct IPersistFolder {struct IPersistFolderVtbl *lpVtbl;};
struct IPersistIDList {struct IPersistIDListVtbl *lpVtbl;};
struct IPersistMemory {struct IPersistMemoryVtbl *lpVtbl;};
struct IPersistStream {struct IPersistStreamVtbl *lpVtbl;};
struct IPropertyPage2 {struct IPropertyPage2Vtbl *lpVtbl;};
struct IQueryContinue {struct IQueryContinueVtbl *lpVtbl;};
struct IQuickActivate {struct IQuickActivateVtbl *lpVtbl;};
struct IRpcStubBuffer {struct IRpcStubBufferVtbl *lpVtbl;};
struct ISWbemDateTime {struct ISWbemDateTimeVtbl *lpVtbl;};
struct ISWbemObjectEx {struct ISWbemObjectExVtbl *lpVtbl;};
struct ISWbemProperty {struct ISWbemPropertyVtbl *lpVtbl;};
struct ISWbemSecurity {struct ISWbemSecurityVtbl *lpVtbl;};
struct ISWbemServices {struct ISWbemServicesVtbl *lpVtbl;};
struct ISearchContext {struct ISearchContextVtbl *lpVtbl;};
struct IShellDispatch {struct IShellDispatchVtbl *lpVtbl;};
struct IShellLinkDual {struct IShellLinkDualVtbl *lpVtbl;};
struct IShellUIHelper {struct IShellUIHelperVtbl *lpVtbl;};
struct IURLSearchHook {struct IURLSearchHookVtbl *lpVtbl;};
struct IWbemEventSink {struct IWbemEventSinkVtbl *lpVtbl;};
struct IWbemRefresher {struct IWbemRefresherVtbl *lpVtbl;};
struct IWbemTransport {struct IWbemTransportVtbl *lpVtbl;};
struct IWebBrowserApp {struct IWebBrowserAppVtbl *lpVtbl;};
struct IWebWizardHost {struct IWebWizardHostVtbl *lpVtbl;};
struct IXMLDOMComment {struct IXMLDOMCommentVtbl *lpVtbl;};
struct IXMLDOMElement {struct IXMLDOMElementVtbl *lpVtbl;};
struct IXMLDSOControl {struct IXMLDSOControlVtbl *lpVtbl;};
typedef struct tagJPEGINFOHEADER JPEGINFOHEADER;
typedef struct tagKBDTABLE_MULTI KBDTABLE_MULTI;
typedef struct _KERB_AUTH_DATA KERB_AUTH_DATA;
typedef struct _KERB_S4U_LOGON KERB_S4U_LOGON;
typedef struct _9CC657B7E0AE245246966219C61A944E KSCLOCK_CREATE;
typedef struct _KSGOP_USERDATA KSGOP_USERDATA;
typedef struct _KSMPEGVID_RECT KSMPEGVID_RECT;
typedef struct _A4CC0F087DE00420119DAAB092DFFA3E KSNODEPROPERTY;
typedef struct _01DCE0ED23F464638BF845FBE919C7FC KSP_NODE_ESPID;
typedef struct _EF98EE567420140E285BF0657F46953F KSP_TIMEFORMAT;
typedef struct tagKS_AMVPDIMINFO KS_AMVPDIMINFO;
typedef struct _3990AA19D6F3231E9709B3F98F437D89 KS_COMPRESSION;
typedef struct tagLOGCOLORSPACEA LOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW LOGCOLORSPACEW;
typedef IAdviseSinkEx *LPADVISESINKEX;
typedef IAutoComplete *LPAUTOCOMPLETE;
typedef struct _AVIFILEINFOA *LPAVIFILEINFOA;
typedef struct _AVIFILEINFOW *LPAVIFILEINFOW;
typedef IBindProtocol *LPBINDPROTOCOL;
typedef struct _2FB1DA8EC643BE4B9CF4F2ACCAFA1124 *LPCABINETSTATE;
typedef struct tagCapInfoChunk *LPCAPINFOCHUNK;
typedef struct tagCaptureParms *LPCAPTUREPARMS;
typedef struct tagCATEGORYINFO *LPCATEGORYINFO;
typedef struct channel_caps_tag *LPCHANNEL_CAPS;
typedef struct tagCHOOSECOLORA *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW *LPCHOOSECOLORW;
typedef IClassFactory *LPCLASSFACTORY;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;
typedef struct tagCOMBOBOXINFO *LPCOMBOBOXINFO;
typedef struct _COMMTIMEOUTS *LPCOMMTIMEOUTS;
typedef IContextMenu2 *LPCONTEXTMENU2;
typedef IContextMenu3 *LPCONTEXTMENU3;
typedef struct _currencyfmtA *LPCURRENCYFMTA;
typedef struct _currencyfmtW *LPCURRENCYFMTW;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
typedef struct tagCWPRETSTRUCT *LPCWPRETSTRUCT;
typedef struct _D3DLIGHTDATA *LPD3DLIGHTDATA;
typedef struct _D3DMATERIAL7 *LPD3DMATERIAL7;
typedef struct _D3DVIEWPORT2 *LPD3DVIEWPORT2;
typedef struct _D3DVIEWPORT7 *LPD3DVIEWPORT7;
typedef struct _DCIENUMINPUT *LPDCIENUMINPUT;
typedef struct _DCIOFFSCREEN *LPDCIOFFSCREEN;
typedef struct _DDKERNELCAPS *LPDDKERNELCAPS;
typedef struct _DDSTEREOMODE *LPDDSTEREOMODE;
typedef struct tagDESIGNVECTOR *LPDESIGNVECTOR;
typedef IDirectMusic8 *LPDIRECTMUSIC8;
typedef struct IDirectSound8 *LPDIRECTSOUND8;
typedef struct tagDRAGLISTINFO *LPDRAGLISTINFO;
typedef struct _DRIVERSTATUS *LPDRIVERSTATUS;
typedef struct _DS3DLISTENER *LPDS3DLISTENER;
typedef struct _DSBUFFERDESC *LPDSBUFFERDESC;
typedef struct _DSEFFECTDESC *LPDSEFFECTDESC;
typedef IEnumACString *LPENUMACSTRING;
typedef struct tagENUMLOGFONTA *LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW *LPENUMLOGFONTW;
typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef IExtractIconA *LPEXTRACTICONA;
typedef IExtractIconW *LPEXTRACTICONW;
typedef IExtractImage *LPEXTRACTIMAGE;
typedef struct tagFINDREPLACEA *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW *LPFINDREPLACEW;
typedef struct _FORM_INFO_1A *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W *LPFORM_INFO_1W;
typedef struct tagGCP_RESULTSA *LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW *LPGCP_RESULTSW;
typedef struct _GLYPHMETRICS *LPGLYPHMETRICS;
typedef struct tagHELPWININFOA *LPHELPWININFOA;
typedef struct tagHELPWININFOW *LPHELPWININFOW;
typedef IHttpSecurity *LPHTTPSECURITY;
typedef struct tagICONMETRICSA *LPICONMETRICSA;
typedef struct tagICONMETRICSW *LPICONMETRICSW;
typedef struct tagINPUTCONTEXT *LPINPUTCONTEXT;
typedef union _IN_ADDR_IPV4 *LPIN_ADDR_IPV4;
typedef struct _IN_ADDR_IPV6 *LPIN_ADDR_IPV6;
typedef struct _99F880E2DB2F1E54A137D02CDE4F02E9 *LPLVINSERTMARK;
typedef struct _MEMORYSTATUS *LPMEMORYSTATUS;
typedef struct tagMETAFILEPICT *LPMETAFILEPICT;
typedef struct tagMIDIINCAPS2A *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W *LPMIDIINCAPS2W;
typedef struct tagMIDIOUTCAPSA *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *LPMIDIOUTCAPSW;
typedef struct _MODEMDEVCAPS *LPMODEMDEVCAPS;
typedef struct tagMSAAMENUINFO *LPMSAAMENUINFO;
typedef struct _NETRESOURCEA *LPNETRESOURCEA;
typedef struct _NETRESOURCEW *LPNETRESOURCEW;
typedef struct tagNMCUSTOMDRAWINFO *LPNMCUSTOMDRAW;
typedef struct _756B7C543A2D8873FCA38AB7A21F7B82 *LPNMPGCALCSIZE;
typedef struct tagNMRBAUTOSIZE *LPNMRBAUTOSIZE;
typedef IObjectSafety *LPOBJECTSAFETY;
typedef IOleContainer *LPOLECONTAINER;
typedef struct tagPALETTEENTRY *LPPALETTEENTRY;
typedef struct _PARAM_BUFFER *LPPARAM_BUFFER;
typedef struct _PORT_INFO_1A *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W *LPPORT_INFO_1W;
typedef struct _PORT_INFO_2A *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W *LPPORT_INFO_2W;
typedef struct _PORT_INFO_3A *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W *LPPORT_INFO_3W;
typedef IPropertyBag2 *LPPROPERTYBAG2;
typedef IPropertyPage *LPPROPERTYPAGE;
typedef struct tagPROPPAGEINFO *LPPROPPAGEINFO;
typedef struct _QOS_DESTADDR *LPQOS_DESTADDR;
typedef struct _QOS_DIFFSERV *LPQOS_DIFFSERV;
typedef struct _QOS_DS_CLASS *LPQOS_DS_CLASS;
typedef struct tagRemFORMATETC *LPREMFORMATETC;
typedef IRunnableTask *LPRUNNABLETASK;
typedef struct _B3292A763DBD4275988A0D01CB88CB44 *LPSHCOLUMNDATA;
typedef struct _63C5725C5B677664277ACEA161B104D1 *LPSHCOLUMNINFO;
typedef struct _CE02AD95896D5CE1FBC89EB4094A5E1C *LPSHCOLUMNINIT;
typedef IShellBrowser *LPSHELLBROWSER;
typedef struct _SHELLDETAILS *LPSHELLDETAILS;
typedef IShellExtInit *LPSHELLEXTINIT;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;
typedef struct tagSOUNDSENTRYA *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW *LPSOUNDSENTRYW;
typedef struct _STARTUPINFOA *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW *LPSTARTUPINFOW;
typedef struct _37E4785F055768DB96FB0F6687850E13 *LPTBINSERTMARK;
typedef struct tagTBSAVEPARAMSW *LPTBSAVEPARAMW;
typedef struct tagTITLEBARINFO *LPTITLEBARINFO;
typedef struct tagTRANSMSGLIST *LPTRANSMSGLIST;
typedef IViewObjectEx *LPVIEWOBJECTEX;
typedef char *LPVIEWSETTINGS;
typedef struct tWAVEFORMATEX *LPWAVEFORMATEX;
typedef struct tagWAVEINCAPS2A *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W *LPWAVEINCAPS2W;
typedef struct tagWAVEOUTCAPSA *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *LPWAVEOUTCAPSW;
typedef struct _WSAQuerySetA *LPWSAQUERYSETA;
typedef struct _WSAQuerySetW *LPWSAQUERYSETW;
typedef struct tagLVGROUPMETRICS LVGROUPMETRICS;
typedef struct tagLVTILEVIEWINFO LVTILEVIEWINFO;
enum MACRO_ABSOLUTE {ABSOLUTE = 1,RELATIVE = 2,};
enum MACRO_ANYALPHA {DDBLT_ANYALPHA = 363,DDOVER_ANYALPHA = 363,};
enum MACRO_ANY_DEST {ANY_DEST_ADDR = 0xFFFFFFFF,};
enum MACRO_APPCLASS {APPCLASS_STANDARD = 0x0,APPCLASS_MASK = 0xF,};
enum MACRO_ASPECTXY {ASPECTXY = 44,};
enum MACRO_AUTHTYPE {AUTHTYPE_CLIENT = 1,AUTHTYPE_SERVER = 2,};
enum MACRO_BAD_POOL {BAD_POOL_CALLER = 0xC2,};
enum MACRO_BANDINFO {BANDINFO = 24,};
enum MACRO_BUGCHECK {BUGCHECK_MESSAGE_INTRO = 0x4000007F,};
enum MACRO_CALLBACK {CALLBACK_CHUNK_FINISHED = 0x0,CALLBACK_STREAM_SWITCH = 0x1,};
enum MACRO_CERT_DSS {CERT_DSS_R_LEN = 20,CERT_DSS_S_LEN = 20,CERT_DSS_SIGNATURE_LEN = 40,CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN = 48,};
enum MACRO_CERT_KEY {CERT_KEY_PROV_HANDLE_PROP_ID = 1,CERT_KEY_PROV_INFO_PROP_ID = 2,CERT_SHA1_HASH_PROP_ID = 3,CERT_MD5_HASH_PROP_ID = 4,CERT_HASH_PROP_ID = 3,CERT_KEY_CONTEXT_PROP_ID = 5,CERT_KEY_SPEC_PROP_ID = 6,CERT_IE30_RESERVED_PROP_ID = 7,CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,CERT_ENHKEY_USAGE_PROP_ID = 9,CERT_CTL_USAGE_PROP_ID = 9,CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,CERT_FRIENDLY_NAME_PROP_ID = 11,CERT_PVK_FILE_PROP_ID = 12,CERT_DESCRIPTION_PROP_ID = 13,CERT_ACCESS_STATE_PROP_ID = 14,CERT_SIGNATURE_HASH_PROP_ID = 15,CERT_SMART_CARD_DATA_PROP_ID = 16,CERT_EFS_PROP_ID = 17,CERT_FORTEZZA_DATA_PROP_ID = 18,CERT_ARCHIVED_PROP_ID = 19,CERT_KEY_IDENTIFIER_PROP_ID = 20,CERT_AUTO_ENROLL_PROP_ID = 21,CERT_PUBKEY_ALG_PARA_PROP_ID = 22,CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23,CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24,CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25,CERT_ENROLLMENT_PROP_ID = 26,CERT_DATE_STAMP_PROP_ID = 27,CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28,CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29,CERT_EXTENDED_ERROR_INFO_PROP_ID = 30,CERT_RENEWAL_PROP_ID = 64,CERT_ARCHIVED_KEY_HASH_PROP_ID = 65,CERT_AUTO_ENROLL_RETRY_PROP_ID = 66,CERT_AIA_URL_RETRIEVED_PROP_ID = 67,CERT_FIRST_RESERVED_PROP_ID = 68,CERT_LAST_RESERVED_PROP_ID = 32767,CERT_FIRST_USER_PROP_ID = 32768,CERT_LAST_USER_PROP_ID = 65535,CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1,CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2,CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4,CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1,CERT_SET_KEY_CONTEXT_PROP_ID = 1,CERT_STORE_PROV_MSG = 1,CERT_STORE_PROV_MEMORY = 2,CERT_STORE_PROV_FILE = 3,CERT_STORE_PROV_REG = 4,CERT_STORE_PROV_PKCS7 = 5,CERT_STORE_PROV_SERIALIZED = 6,CERT_STORE_PROV_FILENAME_A = 7,CERT_STORE_PROV_FILENAME_W = 8,CERT_STORE_PROV_FILENAME = 8,CERT_STORE_PROV_SYSTEM_A = 9,CERT_STORE_PROV_SYSTEM_W = 10,CERT_STORE_PROV_SYSTEM = 10,CERT_STORE_PROV_COLLECTION = 11,CERT_STORE_PROV_SYSTEM_REGISTRY_A = 12,CERT_STORE_PROV_SYSTEM_REGISTRY_W = 13,CERT_STORE_PROV_SYSTEM_REGISTRY = 13,CERT_STORE_PROV_PHYSICAL_W = 14,CERT_STORE_PROV_PHYSICAL = 14,CERT_STORE_PROV_SMART_CARD_W = 15,CERT_STORE_PROV_SMART_CARD = 15,CERT_STORE_PROV_LDAP_W = 16,CERT_STORE_PROV_LDAP = 16,CERT_STORE_SIGNATURE_FLAG = 1,CERT_STORE_TIME_VALIDITY_FLAG = 2,CERT_STORE_REVOCATION_FLAG = 4,CERT_STORE_NO_CRL_FLAG = 65536,CERT_STORE_NO_ISSUER_FLAG = 131072,CERT_STORE_BASE_CRL_FLAG = 256,CERT_STORE_DELTA_CRL_FLAG = 512,CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1,CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2,CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4,CERT_STORE_DELETE_FLAG = 16,CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32,CERT_STORE_SHARE_STORE_FLAG = 64,CERT_STORE_SHARE_CONTEXT_FLAG = 128,CERT_STORE_MANIFOLD_FLAG = 256,CERT_STORE_ENUM_ARCHIVED_FLAG = 512,CERT_STORE_UPDATE_KEYID_FLAG = 1024,CERT_STORE_BACKUP_RESTORE_FLAG = 2048,CERT_STORE_READONLY_FLAG = 32768,CERT_STORE_OPEN_EXISTING_FLAG = 16384,CERT_STORE_CREATE_NEW_FLAG = 8192,CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096,CERT_SYSTEM_STORE_MASK = -65536,CERT_SYSTEM_STORE_RELOCATE_FLAG = -2147483648,CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824,CERT_SYSTEM_STORE_LOCATION_MASK = 16711680,CERT_SYSTEM_STORE_LOCATION_SHIFT = 16,CERT_SYSTEM_STORE_CURRENT_USER_ID = 1,CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2,CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4,CERT_SYSTEM_STORE_SERVICES_ID = 5,CERT_SYSTEM_STORE_USERS_ID = 6,CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7,CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8,CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9,CERT_SYSTEM_STORE_CURRENT_USER = 65536,CERT_SYSTEM_STORE_LOCAL_MACHINE = 131072,CERT_SYSTEM_STORE_CURRENT_SERVICE = 262144,CERT_SYSTEM_STORE_SERVICES = 327680,CERT_SYSTEM_STORE_USERS = 393216,CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY = 458752,CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY = 524288,CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE = 589824,CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1,CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2,CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4,CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8,CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8,CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16,CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32,CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3,CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0,CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1,CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2,CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256,CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512,CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1,CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2,CERT_REGISTRY_STORE_REMOTE_FLAG = 65536,CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072,CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = -2147483648,CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216,CERT_REGISTRY_STORE_ROAMING_FLAG = 262144,CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288,CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536,CERT_LDAP_STORE_SIGN_FLAG = 65536,CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072,CERT_LDAP_STORE_OPENED_FLAG = 262144,CERT_LDAP_STORE_UNBIND_FLAG = 524288,CERT_STORE_PROV_EXTERNAL_FLAG = 1,CERT_STORE_PROV_DELETED_FLAG = 2,CERT_STORE_PROV_NO_PERSIST_FLAG = 4,CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8,CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16,CERT_STORE_PROV_CLOSE_FUNC = 0,CERT_STORE_PROV_READ_CERT_FUNC = 1,CERT_STORE_PROV_WRITE_CERT_FUNC = 2,CERT_STORE_PROV_DELETE_CERT_FUNC = 3,CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4,CERT_STORE_PROV_READ_CRL_FUNC = 5,CERT_STORE_PROV_WRITE_CRL_FUNC = 6,CERT_STORE_PROV_DELETE_CRL_FUNC = 7,CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8,CERT_STORE_PROV_READ_CTL_FUNC = 9,CERT_STORE_PROV_WRITE_CTL_FUNC = 10,CERT_STORE_PROV_DELETE_CTL_FUNC = 11,CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12,CERT_STORE_PROV_CONTROL_FUNC = 13,CERT_STORE_PROV_FIND_CERT_FUNC = 14,CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15,CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16,CERT_STORE_PROV_FIND_CRL_FUNC = 17,CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18,CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19,CERT_STORE_PROV_FIND_CTL_FUNC = 20,CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21,CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22,CERT_STORE_PROV_WRITE_ADD_FLAG = 1,CERT_STORE_SAVE_AS_STORE = 1,CERT_STORE_SAVE_AS_PKCS7 = 2,CERT_STORE_SAVE_TO_FILE = 1,CERT_STORE_SAVE_TO_MEMORY = 2,CERT_STORE_SAVE_TO_FILENAME_A = 3,CERT_STORE_SAVE_TO_FILENAME_W = 4,CERT_STORE_SAVE_TO_FILENAME = 4,CERT_CLOSE_STORE_FORCE_FLAG = 1,CERT_CLOSE_STORE_CHECK_FLAG = 2,CERT_COMPARE_MASK = 65535,CERT_COMPARE_SHIFT = 16,CERT_COMPARE_ANY = 0,CERT_COMPARE_SHA1_HASH = 1,CERT_COMPARE_NAME = 2,CERT_COMPARE_ATTR = 3,CERT_COMPARE_MD5_HASH = 4,CERT_COMPARE_PROPERTY = 5,CERT_COMPARE_PUBLIC_KEY = 6,CERT_COMPARE_HASH = 1,CERT_COMPARE_NAME_STR_A = 7,CERT_COMPARE_NAME_STR_W = 8,CERT_COMPARE_KEY_SPEC = 9,CERT_COMPARE_ENHKEY_USAGE = 10,CERT_COMPARE_CTL_USAGE = 10,CERT_COMPARE_SUBJECT_CERT = 11,CERT_COMPARE_ISSUER_OF = 12,CERT_COMPARE_EXISTING = 13,CERT_COMPARE_SIGNATURE_HASH = 14,CERT_COMPARE_KEY_IDENTIFIER = 15,CERT_COMPARE_CERT_ID = 16,CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17,CERT_COMPARE_PUBKEY_MD5_HASH = 18,CERT_FIND_ANY = 0,CERT_FIND_SHA1_HASH = 65536,CERT_FIND_MD5_HASH = 262144,CERT_FIND_SIGNATURE_HASH = 917504,CERT_FIND_KEY_IDENTIFIER = 983040,CERT_FIND_HASH = 65536,CERT_FIND_PROPERTY = 327680,CERT_FIND_PUBLIC_KEY = 393216,CERT_FIND_SUBJECT_NAME = 131079,CERT_FIND_SUBJECT_ATTR = 196615,CERT_FIND_ISSUER_NAME = 131076,CERT_FIND_ISSUER_ATTR = 196612,CERT_FIND_SUBJECT_STR_A = 458759,CERT_FIND_SUBJECT_STR_W = 524295,CERT_FIND_SUBJECT_STR = 524295,CERT_FIND_ISSUER_STR_A = 458756,CERT_FIND_ISSUER_STR_W = 524292,CERT_FIND_ISSUER_STR = 524292,CERT_FIND_KEY_SPEC = 589824,CERT_FIND_ENHKEY_USAGE = 655360,CERT_FIND_CTL_USAGE = 655360,CERT_FIND_SUBJECT_CERT = 720896,CERT_FIND_ISSUER_OF = 786432,CERT_FIND_EXISTING = 851968,CERT_FIND_CERT_ID = 1048576,CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112,CERT_FIND_PUBKEY_MD5_HASH = 1179648,CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4,CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8,CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16,CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32,CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4,CERT_FIND_NO_CTL_USAGE_FLAG = 8,CERT_FIND_OR_CTL_USAGE_FLAG = 16,CERT_FIND_VALID_CTL_USAGE_FLAG = 32,CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = -2147483648,CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824,};
enum MACRO_CERT_RDN {CERT_RDN_ANY_TYPE = 0,CERT_RDN_ENCODED_BLOB = 1,CERT_RDN_OCTET_STRING = 2,CERT_RDN_NUMERIC_STRING = 3,CERT_RDN_PRINTABLE_STRING = 4,CERT_RDN_TELETEX_STRING = 5,CERT_RDN_T61_STRING = 5,CERT_RDN_VIDEOTEX_STRING = 6,CERT_RDN_IA5_STRING = 7,CERT_RDN_GRAPHIC_STRING = 8,CERT_RDN_VISIBLE_STRING = 9,CERT_RDN_ISO646_STRING = 9,CERT_RDN_GENERAL_STRING = 10,CERT_RDN_UNIVERSAL_STRING = 11,CERT_RDN_INT4_STRING = 11,CERT_RDN_BMP_STRING = 12,CERT_RDN_UNICODE_STRING = 12,CERT_RDN_UTF8_STRING = 13,CERT_RDN_TYPE_MASK = 255,CERT_RDN_FLAGS_MASK = -16777216,CERT_RDN_ENABLE_T61_UNICODE_FLAG = -2147483648,CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912,CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824,CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216,CERT_V1 = 0,CERT_V2 = 1,CERT_V3 = 2,CERT_INFO_VERSION_FLAG = 1,CERT_INFO_SERIAL_NUMBER_FLAG = 2,CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3,CERT_INFO_ISSUER_FLAG = 4,CERT_INFO_NOT_BEFORE_FLAG = 5,CERT_INFO_NOT_AFTER_FLAG = 6,CERT_INFO_SUBJECT_FLAG = 7,CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8,CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9,CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10,CERT_INFO_EXTENSION_FLAG = 11,};
enum MACRO_CLIPCAPS {CLIPCAPS = 36,};
enum MACRO_CLRBREAK {CLRBREAK = 9,};
enum MACRO_CLR_NONE {CLR_NONE = 0xFFFFFFFF,CLR_DEFAULT = 0xFF000000,};
enum MACRO_CMSG_KEY {CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1,CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2,CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1,CMSG_KEY_TRANS_RECIPIENT = 1,CMSG_KEY_AGREE_RECIPIENT = 2,CMSG_MAIL_LIST_RECIPIENT = 3,CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = -2147483648,CMSG_RC4_NO_SALT_FLAG = 1073741824,CMSG_INDEFINITE_LENGTH = -1,CMSG_BARE_CONTENT_FLAG = 1,CMSG_LENGTH_ONLY_FLAG = 2,CMSG_DETACHED_FLAG = 4,CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8,CMSG_CONTENTS_OCTETS_FLAG = 16,CMSG_MAX_LENGTH_FLAG = 32,CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64,CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768,CMSG_TYPE_PARAM = 1,CMSG_CONTENT_PARAM = 2,CMSG_BARE_CONTENT_PARAM = 3,CMSG_INNER_CONTENT_TYPE_PARAM = 4,CMSG_SIGNER_COUNT_PARAM = 5,CMSG_SIGNER_INFO_PARAM = 6,CMSG_SIGNER_CERT_INFO_PARAM = 7,CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8,CMSG_SIGNER_AUTH_ATTR_PARAM = 9,CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10,CMSG_CERT_COUNT_PARAM = 11,CMSG_CERT_PARAM = 12,CMSG_CRL_COUNT_PARAM = 13,CMSG_CRL_PARAM = 14,CMSG_ENVELOPE_ALGORITHM_PARAM = 15,CMSG_RECIPIENT_COUNT_PARAM = 17,CMSG_RECIPIENT_INDEX_PARAM = 18,CMSG_RECIPIENT_INFO_PARAM = 19,CMSG_HASH_ALGORITHM_PARAM = 20,CMSG_HASH_DATA_PARAM = 21,CMSG_COMPUTED_HASH_PARAM = 22,CMSG_ENCRYPT_PARAM = 26,CMSG_ENCRYPTED_DIGEST = 27,CMSG_ENCODED_SIGNER = 28,CMSG_ENCODED_MESSAGE = 29,CMSG_VERSION_PARAM = 30,CMSG_ATTR_CERT_COUNT_PARAM = 31,CMSG_ATTR_CERT_PARAM = 32,CMSG_CMS_RECIPIENT_COUNT_PARAM = 33,CMSG_CMS_RECIPIENT_INDEX_PARAM = 34,CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35,CMSG_CMS_RECIPIENT_INFO_PARAM = 36,CMSG_UNPROTECTED_ATTR_PARAM = 37,CMSG_SIGNER_CERT_ID_PARAM = 38,CMSG_CMS_SIGNER_INFO_PARAM = 39,CMSG_SIGNED_DATA_V1 = 1,CMSG_SIGNED_DATA_V3 = 3,CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1,CMSG_SIGNED_DATA_CMS_VERSION = 3,CMSG_SIGNER_INFO_V1 = 1,CMSG_SIGNER_INFO_V3 = 3,CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1,CMSG_SIGNER_INFO_CMS_VERSION = 3,CMSG_HASHED_DATA_V0 = 0,CMSG_HASHED_DATA_V2 = 2,CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0,CMSG_HASHED_DATA_CMS_VERSION = 2,CMSG_ENVELOPED_DATA_V0 = 0,CMSG_ENVELOPED_DATA_V2 = 2,CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0,CMSG_ENVELOPED_DATA_CMS_VERSION = 2,CMSG_KEY_AGREE_ORIGINATOR_CERT = 1,CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2,CMSG_ENVELOPED_RECIPIENT_V0 = 0,CMSG_ENVELOPED_RECIPIENT_V2 = 2,CMSG_ENVELOPED_RECIPIENT_V3 = 3,CMSG_ENVELOPED_RECIPIENT_V4 = 4,CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0,CMSG_KEY_TRANS_CMS_VERSION = 2,CMSG_KEY_AGREE_VERSION = 3,CMSG_MAIL_LIST_VERSION = 4,CMSG_CTRL_VERIFY_SIGNATURE = 1,CMSG_CTRL_DECRYPT = 2,CMSG_CTRL_VERIFY_HASH = 5,CMSG_CTRL_ADD_SIGNER = 6,CMSG_CTRL_DEL_SIGNER = 7,CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8,CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9,CMSG_CTRL_ADD_CERT = 10,CMSG_CTRL_DEL_CERT = 11,CMSG_CTRL_ADD_CRL = 12,CMSG_CTRL_DEL_CRL = 13,CMSG_CTRL_ADD_ATTR_CERT = 14,CMSG_CTRL_DEL_ATTR_CERT = 15,CMSG_CTRL_KEY_TRANS_DECRYPT = 16,CMSG_CTRL_KEY_AGREE_DECRYPT = 17,CMSG_CTRL_MAIL_LIST_DECRYPT = 18,CMSG_CTRL_VERIFY_SIGNATURE_EX = 19,CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20,CMSG_VERIFY_SIGNER_PUBKEY = 1,CMSG_VERIFY_SIGNER_CERT = 2,CMSG_VERIFY_SIGNER_CHAIN = 3,CMSG_VERIFY_SIGNER_NULL = 4,CMSG_DEFAULT_INSTALLABLE_FUNC_OID = 1,CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1,CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768,CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16,CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1,};
enum MACRO_COLORRES {COLORRES = 108,};
enum MACRO_COMADMIN {COMADMIN_E_OBJECTERRORS = 0x80110401,COMADMIN_E_OBJECTINVALID = 0x80110402,COMADMIN_E_KEYMISSING = 0x80110403,COMADMIN_E_ALREADYINSTALLED = 0x80110404,COMADMIN_E_APP_FILE_WRITEFAIL = 0x80110407,COMADMIN_E_APP_FILE_READFAIL = 0x80110408,COMADMIN_E_APP_FILE_VERSION = 0x80110409,COMADMIN_E_BADPATH = 0x8011040A,COMADMIN_E_APPLICATIONEXISTS = 0x8011040B,COMADMIN_E_ROLEEXISTS = 0x8011040C,COMADMIN_E_CANTCOPYFILE = 0x8011040D,COMADMIN_E_NOUSER = 0x8011040F,COMADMIN_E_INVALIDUSERIDS = 0x80110410,COMADMIN_E_NOREGISTRYCLSID = 0x80110411,COMADMIN_E_BADREGISTRYPROGID = 0x80110412,COMADMIN_E_AUTHENTICATIONLEVEL = 0x80110413,COMADMIN_E_USERPASSWDNOTVALID = 0x80110414,COMADMIN_E_CLSIDORIIDMISMATCH = 0x80110418,COMADMIN_E_REMOTEINTERFACE = 0x80110419,COMADMIN_E_DLLREGISTERSERVER = 0x8011041A,COMADMIN_E_NOSERVERSHARE = 0x8011041B,COMADMIN_E_DLLLOADFAILED = 0x8011041D,COMADMIN_E_BADREGISTRYLIBID = 0x8011041E,COMADMIN_E_APPDIRNOTFOUND = 0x8011041F,COMADMIN_E_REGISTRARFAILED = 0x80110423,COMADMIN_E_COMPFILE_DOESNOTEXIST = 0x80110424,COMADMIN_E_COMPFILE_LOADDLLFAIL = 0x80110425,COMADMIN_E_COMPFILE_GETCLASSOBJ = 0x80110426,COMADMIN_E_COMPFILE_CLASSNOTAVAIL = 0x80110427,COMADMIN_E_COMPFILE_BADTLB = 0x80110428,COMADMIN_E_COMPFILE_NOTINSTALLABLE = 0x80110429,COMADMIN_E_NOTCHANGEABLE = 0x8011042A,COMADMIN_E_NOTDELETEABLE = 0x8011042B,COMADMIN_E_SESSION = 0x8011042C,COMADMIN_E_COMP_MOVE_LOCKED = 0x8011042D,COMADMIN_E_COMP_MOVE_BAD_DEST = 0x8011042E,COMADMIN_E_REGISTERTLB = 0x80110430,COMADMIN_E_SYSTEMAPP = 0x80110433,COMADMIN_E_COMPFILE_NOREGISTRAR = 0x80110434,COMADMIN_E_COREQCOMPINSTALLED = 0x80110435,COMADMIN_E_SERVICENOTINSTALLED = 0x80110436,COMADMIN_E_PROPERTYSAVEFAILED = 0x80110437,COMADMIN_E_OBJECTEXISTS = 0x80110438,COMADMIN_E_COMPONENTEXISTS = 0x80110439,COMADMIN_E_REGFILE_CORRUPT = 0x8011043B,COMADMIN_E_PROPERTY_OVERFLOW = 0x8011043C,COMADMIN_E_NOTINREGISTRY = 0x8011043E,COMADMIN_E_OBJECTNOTPOOLABLE = 0x8011043F,COMADMIN_E_APPLID_MATCHES_CLSID = 0x80110446,COMADMIN_E_ROLE_DOES_NOT_EXIST = 0x80110447,COMADMIN_E_START_APP_NEEDS_COMPONENTS = 0x80110448,COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = 0x80110449,COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = 0x8011044A,COMADMIN_E_CAN_NOT_START_APP = 0x8011044B,COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = 0x8011044C,COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = 0x8011044D,COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = 0x8011044E,COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = 0x8011044F,COMADMIN_E_BASE_PARTITION_ONLY = 0x80110450,COMADMIN_E_START_APP_DISABLED = 0x80110451,COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = 0x80110457,COMADMIN_E_CAT_INVALID_PARTITION_NAME = 0x80110458,COMADMIN_E_CAT_PARTITION_IN_USE = 0x80110459,COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = 0x8011045A,COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = 0x8011045B,COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = 0x8011045C,COMADMIN_E_AMBIGUOUS_PARTITION_NAME = 0x8011045D,COMADMIN_E_REGDB_NOTINITIALIZED = 0x80110472,COMADMIN_E_REGDB_NOTOPEN = 0x80110473,COMADMIN_E_REGDB_SYSTEMERR = 0x80110474,COMADMIN_E_REGDB_ALREADYRUNNING = 0x80110475,COMADMIN_E_MIG_VERSIONNOTSUPPORTED = 0x80110480,COMADMIN_E_MIG_SCHEMANOTFOUND = 0x80110481,COMADMIN_E_CAT_BITNESSMISMATCH = 0x80110482,COMADMIN_E_CAT_UNACCEPTABLEBITNESS = 0x80110483,COMADMIN_E_CAT_WRONGAPPBITNESS = 0x80110484,COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = 0x80110485,COMADMIN_E_CAT_SERVERFAULT = 0x80110486,};
enum MACRO_COMCTL32 {COMCTL32_VERSION = 6,};
enum MACRO_COMMPROP {COMMPROP_INITIALIZED = 0xE73CF52E,};
enum MACRO_COPYFILE {COPYFILE_SIS_LINK = 0x1,COPYFILE_SIS_REPLACE = 0x2,COPYFILE_SIS_FLAGS = 0x3,};
enum MACRO_CRITICAL {CRITICAL_PROCESS_DIED = 0xEF,};
enum MACRO_CRL_FIND {CRL_FIND_ANY = 0,CRL_FIND_ISSUED_BY = 1,CRL_FIND_EXISTING = 2,CRL_FIND_ISSUED_FOR = 3,CRL_FIND_ISSUED_BY_AKI_FLAG = 1,CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2,CRL_FIND_ISSUED_BY_DELTA_FLAG = 4,CRL_FIND_ISSUED_BY_BASE_FLAG = 8,};
enum MACRO_CTLCOLOR {CTLCOLOR_MSGBOX = 0,CTLCOLOR_EDIT = 1,CTLCOLOR_LISTBOX = 2,CTLCOLOR_BTN = 3,CTLCOLOR_DLG = 4,CTLCOLOR_SCROLLBAR = 5,CTLCOLOR_STATIC = 6,CTLCOLOR_MAX = 7,};
enum MACRO_D3DCAPS2 {D3DCAPS2_NO2DDURING3DSCENE = 0x2,D3DCAPS2_FULLSCREENGAMMA = 0x20000,D3DCAPS2_CANRENDERWINDOWED = 0x80000,D3DCAPS2_CANCALIBRATEGAMMA = 0x100000,D3DCAPS2_RESERVED = 0x2000000,D3DCAPS2_CANMANAGERESOURCE = 0x10000000,D3DCAPS2_DYNAMICTEXTURES = 0x20000000,};
enum MACRO_D3DCAPS3 {D3DCAPS3_RESERVED = 0x8000001F,D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD = 0x20,};
enum MACRO_D3DCLEAR {D3DCLEAR_TARGET = 0x1,D3DCLEAR_ZBUFFER = 0x2,D3DCLEAR_STENCIL = 0x4,};
enum MACRO_D3DCOLOR {D3DCOLOR_MONO = 1,D3DCOLOR_RGB = 2,};
enum MACRO_D3DLIGHT {D3DLIGHT_ACTIVE = 0x1,D3DLIGHT_NO_SPECULAR = 0x2,D3DLIGHT_ALL = 0x3,};
enum MACRO_D3DNTERR {D3DNTERR_COMMAND_UNPARSED = -2005529672,};
enum MACRO_D3DNTHAL {D3DNTHAL_NUMCLIPVERTICES = 20,D3DNTHAL_SCENE_CAPTURE_START = 0,D3DNTHAL_SCENE_CAPTURE_END = 1,D3DNTHAL_CONTEXT_BAD = 512,D3DNTHAL_OUTOFCONTEXTS = 513,};
enum MACRO_D3DSTATE {D3DSTATE_OVERRIDE_BIAS = 256,};
enum MACRO_D3DUSAGE {D3DUSAGE_RENDERTARGET = 0x1,D3DUSAGE_DEPTHSTENCIL = 0x2,D3DUSAGE_WRITEONLY = 0x8,D3DUSAGE_SOFTWAREPROCESSING = 0x10,D3DUSAGE_DONOTCLIP = 0x20,D3DUSAGE_POINTS = 0x40,D3DUSAGE_RTPATCHES = 0x80,D3DUSAGE_NPATCHES = 0x100,D3DUSAGE_DYNAMIC = 0x200,};
enum MACRO_DATABITS {DATABITS_5 = 0x1,DATABITS_6 = 0x2,DATABITS_7 = 0x4,DATABITS_8 = 0x8,DATABITS_16 = 0x10,DATABITS_16X = 0x20,};
enum MACRO_DATA_UFM {DATA_UFM_SIG = 1296454980,DATA_IFI_SIG = 1229343044,DATA_GTT_SIG = 1414809412,DATA_CTT_SIG = 1414808388,DATA_VAR_SIG = 1380013636,};
enum MACRO_DBG_DUMP {DBG_DUMP_NO_INDENT = 0x1,DBG_DUMP_NO_OFFSET = 0x2,DBG_DUMP_VERBOSE = 0x4,DBG_DUMP_CALL_FOR_EACH = 0x8,DBG_DUMP_LIST = 0x20,DBG_DUMP_NO_PRINT = 0x40,DBG_DUMP_GET_SIZE_ONLY = 0x80,DBG_DUMP_COMPACT_OUT = 0x2000,DBG_DUMP_ARRAY = 0x8000,DBG_DUMP_ADDRESS_OF_FIELD = 0x10000,DBG_DUMP_ADDRESS_AT_END = 0x20000,DBG_DUMP_COPY_TYPE_DATA = 0x40000,DBG_DUMP_READ_PHYSICAL = 0x80000,DBG_DUMP_FUNCTION_FORMAT = 0x100000,DBG_DUMP_BLOCK_RECURSE = 0x200000,DBG_RETURN_TYPE = 0x0,DBG_RETURN_SUBTYPES = 0x0,DBG_RETURN_TYPE_VALUES = 0x0,DBG_DUMP_FIELD_CALL_BEFORE_PRINT = 0x1,DBG_DUMP_FIELD_NO_CALLBACK_REQ = 0x2,DBG_DUMP_FIELD_RECUR_ON_THIS = 0x4,DBG_DUMP_FIELD_FULL_NAME = 0x8,DBG_DUMP_FIELD_ARRAY = 0x10,DBG_DUMP_FIELD_COPY_FIELD_DATA = 0x20,DBG_DUMP_FIELD_RETURN_ADDRESS = 0x1000,DBG_DUMP_FIELD_SIZE_IN_BITS = 0x2000,DBG_DUMP_FIELD_NO_PRINT = 0x4000,DBG_DUMP_FIELD_DEFAULT_STRING = 0x10000,DBG_DUMP_FIELD_WCHAR_STRING = 0x20000,DBG_DUMP_FIELD_MULTI_STRING = 0x40000,DBG_DUMP_FIELD_GUID_STRING = 0x80000,};
enum MACRO_DC_BRUSH {DC_BRUSH = 18,DC_PEN = 19,};
enum MACRO_DDCREATE {DDCREATE_HARDWAREONLY = 0x1,DDCREATE_EMULATIONONLY = 0x2,};
enum MACRO_DDFXCAPS {DDFXCAPS_BLTARITHSTRETCHY = 0x20,DDFXCAPS_BLTARITHSTRETCHYN = 0x10,DDFXCAPS_BLTMIRRORLEFTRIGHT = 0x40,DDFXCAPS_BLTMIRRORUPDOWN = 0x80,DDFXCAPS_BLTROTATION = 0x100,DDFXCAPS_BLTROTATION90 = 0x200,DDFXCAPS_BLTSHRINKX = 0x400,DDFXCAPS_BLTSHRINKXN = 0x800,DDFXCAPS_BLTSHRINKY = 0x1000,DDFXCAPS_BLTSHRINKYN = 0x2000,DDFXCAPS_BLTSTRETCHX = 0x4000,DDFXCAPS_BLTSTRETCHXN = 0x8000,DDFXCAPS_BLTSTRETCHY = 0x10000,DDFXCAPS_BLTSTRETCHYN = 0x20000,DDFXCAPS_OVERLAYARITHSTRETCHY = 0x40000,DDFXCAPS_OVERLAYARITHSTRETCHYN = 0x8,DDFXCAPS_OVERLAYSHRINKX = 0x80000,DDFXCAPS_OVERLAYSHRINKXN = 0x100000,DDFXCAPS_OVERLAYSHRINKY = 0x200000,DDFXCAPS_OVERLAYSHRINKYN = 0x400000,DDFXCAPS_OVERLAYSTRETCHX = 0x800000,DDFXCAPS_OVERLAYSTRETCHXN = 0x1000000,DDFXCAPS_OVERLAYSTRETCHY = 0x2000000,DDFXCAPS_OVERLAYSTRETCHYN = 0x4000000,DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = 0x8000000,DDFXCAPS_OVERLAYMIRRORUPDOWN = 0x10000000,DDFXCAPS_OVERLAYDEINTERLACE = 0x20000000,DDFXCAPS_BLTALPHA = 0x1,DDFXCAPS_BLTFILTER = 0x20,DDFXCAPS_OVERLAYALPHA = 0x4,DDFXCAPS_OVERLAYFILTER = 0x40000,};
enum MACRO_DDOVERFX {DDOVERFX_ARITHSTRETCHY = 0x1,DDOVERFX_MIRRORLEFTRIGHT = 0x2,DDOVERFX_MIRRORUPDOWN = 0x4,DDOVERFX_DEINTERLACE = 0x8,};
enum MACRO_DDSCAPS2 {DDSCAPS2_RESERVED4 = 0x2,DDSCAPS2_HARDWAREDEINTERLACE = 0x0,DDSCAPS2_HINTDYNAMIC = 0x4,DDSCAPS2_HINTSTATIC = 0x8,DDSCAPS2_TEXTUREMANAGE = 0x10,DDSCAPS2_RESERVED1 = 0x20,DDSCAPS2_RESERVED2 = 0x40,DDSCAPS2_OPAQUE = 0x80,DDSCAPS2_HINTANTIALIASING = 0x100,DDSCAPS2_CUBEMAP = 0x200,DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,DDSCAPS2_CUBEMAP_ALLFACES = 0xFC00,DDSCAPS2_MIPMAPSUBLEVEL = 0x10000,DDSCAPS2_D3DTEXTUREMANAGE = 0x20000,DDSCAPS2_DONOTPERSIST = 0x40000,DDSCAPS2_STEREOSURFACELEFT = 0x80000,DDSCAPS2_VOLUME = 0x200000,DDSCAPS2_NOTUSERLOCKABLE = 0x400000,DDSCAPS2_POINTS = 0x800000,DDSCAPS2_RTPATCHES = 0x1000000,DDSCAPS2_NPATCHES = 0x2000000,DDSCAPS2_RESERVED3 = 0x4000000,DDSCAPS2_DISCARDBACKBUFFER = 0x10000000,DDSCAPS2_ENABLEALPHACHANNEL = 0x20000000,};
enum MACRO_DDSCAPS3 {DDSCAPS3_MULTISAMPLE_MASK = 0x1F,};
enum MACRO_DDSVCAPS {DDSVCAPS_RESERVED1 = 0x1,DDSVCAPS_RESERVED2 = 0x2,DDSVCAPS_RESERVED3 = 0x4,DDSVCAPS_RESERVED4 = 0x8,DDSVCAPS_STEREOSEQUENTIAL = 0x10,};
enum MACRO_DDVPCAPS {DDVPCAPS_AUTOFLIP = 0x1,DDVPCAPS_INTERLACED = 0x2,DDVPCAPS_NONINTERLACED = 0x4,DDVPCAPS_READBACKFIELD = 0x8,DDVPCAPS_READBACKLINE = 0x10,DDVPCAPS_SHAREABLE = 0x20,DDVPCAPS_SKIPEVENFIELDS = 0x40,DDVPCAPS_SKIPODDFIELDS = 0x80,DDVPCAPS_SYNCMASTER = 0x100,DDVPCAPS_VBISURFACE = 0x200,DDVPCAPS_COLORCONTROL = 0x400,DDVPCAPS_OVERSAMPLEDVBI = 0x800,DDVPCAPS_SYSTEMMEMORY = 0x1000,DDVPCAPS_VBIANDVIDEOINDEPENDENT = 0x2000,DDVPCAPS_HARDWAREDEINTERLACE = 0x4000,};
enum MACRO_DDVPFLIP {DDVPFLIP_VIDEO = 0x1,DDVPFLIP_VBI = 0x2,};
enum MACRO_DDVPWAIT {DDVPWAIT_BEGIN = 0x1,DDVPWAIT_END = 0x2,DDVPWAIT_LINE = 0x3,};
enum MACRO_DDWAITVB {DDWAITVB_BLOCKBEGIN = 0x1,DDWAITVB_BLOCKBEGINEVENT = 0x2,DDWAITVB_BLOCKEND = 0x4,};
enum MACRO_DENORMAL {_EM_DENORMAL = 0x80000,_SW_DENORMAL = 0x80000,};
enum MACRO_DETACHED {DETACHED_PROCESS = 0x8,};
enum MACRO_DIARESIS {DIARESIS = 776,};
enum MACRO_DISABLED {APMTIMEOUT_DISABLED = 0,CONFIGFLAG_DISABLED = 1,};
enum MACRO_DISPATCH {DISPATCH_METHOD = 0x1,DISPATCH_PROPERTYGET = 0x2,DISPATCH_PROPERTYPUT = 0x4,DISPATCH_PROPERTYPUTREF = 0x8,};
enum MACRO_DMDITHER {DMDITHER_NONE = 1,DMDITHER_COARSE = 2,DMDITHER_FINE = 3,DMDITHER_LINEART = 4,DMDITHER_ERRORDIFFUSION = 5,DMDITHER_RESERVED6 = 6,DMDITHER_RESERVED7 = 7,DMDITHER_RESERVED8 = 8,DMDITHER_RESERVED9 = 9,DMDITHER_GRAYSCALE = 10,DMDITHER_USER = 256,};
enum MACRO_DMORIENT {DMORIENT_PORTRAIT = 1,DMORIENT_LANDSCAPE = 2,};
enum MACRO_DMUS_MAX {DMUS_MAX_DESCRIPTION = 128,DMUS_MAX_DRIVER = 128,DMUS_EFFECT_NONE = 0,DMUS_EFFECT_REVERB = 1,DMUS_EFFECT_CHORUS = 2,DMUS_EFFECT_DELAY = 4,DMUS_PC_INPUTCLASS = 0,DMUS_PC_OUTPUTCLASS = 1,DMUS_PC_DLS = 1,DMUS_PC_EXTERNAL = 2,DMUS_PC_SOFTWARESYNTH = 4,DMUS_PC_MEMORYSIZEFIXED = 8,DMUS_PC_GMINHARDWARE = 16,DMUS_PC_GSINHARDWARE = 32,DMUS_PC_XGINHARDWARE = 64,DMUS_PC_DIRECTSOUND = 128,DMUS_PC_SHAREABLE = 256,DMUS_PC_DLS2 = 512,DMUS_PC_AUDIOPATH = 1024,DMUS_PC_WAVE = 2048,DMUS_PC_SYSTEMMEMORY = 2147483647,DMUS_PORT_WINMM_DRIVER = 0,DMUS_PORT_USER_MODE_SYNTH = 1,DMUS_PORT_KERNEL_MODE = 2,DMUS_PORTPARAMS_VOICES = 1,DMUS_PORTPARAMS_CHANNELGROUPS = 2,DMUS_PORTPARAMS_AUDIOCHANNELS = 4,DMUS_PORTPARAMS_SAMPLERATE = 8,DMUS_PORTPARAMS_EFFECTS = 32,DMUS_PORTPARAMS_SHARE = 64,DMUS_PORTPARAMS_FEATURES = 128,DMUS_PORT_FEATURE_AUDIOPATH = 1,DMUS_PORT_FEATURE_STREAMING = 2,DMUS_SYNTHSTATS_VOICES = 1,DMUS_SYNTHSTATS_TOTAL_CPU = 2,DMUS_SYNTHSTATS_CPU_PER_VOICE = 4,DMUS_SYNTHSTATS_LOST_NOTES = 8,DMUS_SYNTHSTATS_PEAK_VOLUME = 16,DMUS_SYNTHSTATS_FREE_MEMORY = 32,DMUS_SYNTHSTATS_SYSTEMMEMORY = 2147483647,DMUS_CLOCKF_GLOBAL = 1,};
enum MACRO_DOCKINFO {DOCKINFO_UNDOCKED = 0x1,DOCKINFO_DOCKED = 0x2,DOCKINFO_USER_SUPPLIED = 0x4,DOCKINFO_USER_UNDOCKED = 0x5,DOCKINFO_USER_DOCKED = 0x6,};
enum MACRO_DOSOPTGF {DOSOPTGF_DEFCLEAN = 0x1,};
enum MACRO_DRAGDROP {DRAGDROP_E_FIRST = 0x80040100,DRAGDROP_E_LAST = 0x8004010F,DRAGDROP_S_FIRST = 0x40100,DRAGDROP_S_LAST = 0x4010F,DRAGDROP_E_NOTREGISTERED = 0x80040100,DRAGDROP_E_ALREADYREGISTERED = 0x80040101,DRAGDROP_E_INVALIDHWND = 0x80040102,};
enum MACRO_DRVQUERY {DRVQUERY_USERMODE = 1,};
enum MACRO_DS3DMODE {DS3DMODE_NORMAL = 0x0,DS3DMODE_HEADRELATIVE = 0x1,DS3DMODE_DISABLE = 0x2,};
enum MACRO_DSCBCAPS {DSCBCAPS_WAVEMAPPED = 0x80000000,DSCBCAPS_CTRLFX = 0x200,};
enum MACRO_DSCBLOCK {DSCBLOCK_ENTIREBUFFER = 0x1,};
enum MACRO_DSFXECHO {DSFXECHO_PANDELAY_MIN = 0,DSFXECHO_PANDELAY_MAX = 1,};
enum MACRO_DVASPECT {DVASPECT_SHORTNAME = 2,DVASPECT_COPY = 3,DVASPECT_LINK = 4,};
enum MACRO_DWACTION {DWACTION_ALLOCANDFILL = 1,DWACTION_FREE = 2,};
enum MACRO_EISAFLAG {EISAFLAG_NO_IO_MERGE = 0x1,EISAFLAG_SLOT_IO_FIRST = 0x2,};
enum MACRO_ENHANCED {ENHANCED_KEY = 0x100,};
enum MACRO_ENUM_ALL {ENUM_ALL_CALENDARS = 0xFFFFFFFF,};
enum MACRO_ERROR_NO {ERROR_NO_DEFAULT_INTERFACE_DEVICE = -536870374,ERROR_INTERFACE_DEVICE_ACTIVE = -536870373,ERROR_INTERFACE_DEVICE_REMOVED = -536870372,ERROR_NO_SUCH_INTERFACE_DEVICE = -536870363,ERROR_NOT_INSTALLED = -536866816,};
enum MACRO_EVENTLOG {EVENTLOG_SEQUENTIAL_READ = 0x1,EVENTLOG_SEEK_READ = 0x2,EVENTLOG_FORWARDS_READ = 0x4,EVENTLOG_BACKWARDS_READ = 0x8,EVENTLOG_SUCCESS = 0x0,EVENTLOG_ERROR_TYPE = 0x1,EVENTLOG_WARNING_TYPE = 0x2,EVENTLOG_INFORMATION_TYPE = 0x4,EVENTLOG_AUDIT_SUCCESS = 0x8,EVENTLOG_AUDIT_FAILURE = 0x10,EVENTLOG_START_PAIRED_EVENT = 0x1,EVENTLOG_END_PAIRED_EVENT = 0x2,EVENTLOG_END_ALL_PAIRED_EVENTS = 0x4,EVENTLOG_PAIRED_EVENT_ACTIVE = 0x8,EVENTLOG_PAIRED_EVENT_INACTIVE = 0x10,};
enum MACRO_FACILITY {FACILITY_WINDOWS_CE = 24,FACILITY_WINDOWS = 8,FACILITY_URT = 19,FACILITY_UMI = 22,FACILITY_SXS = 23,FACILITY_STORAGE = 3,FACILITY_STATE_MANAGEMENT = 34,FACILITY_SSPI = 9,FACILITY_SCARD = 16,FACILITY_SETUPAPI = 15,FACILITY_SECURITY = 9,FACILITY_RPC = 1,FACILITY_WIN32 = 7,FACILITY_CONTROL = 10,FACILITY_NULL = 0,FACILITY_METADIRECTORY = 35,FACILITY_MSMQ = 14,FACILITY_MEDIASERVER = 13,FACILITY_INTERNET = 12,FACILITY_ITF = 4,FACILITY_HTTP = 25,FACILITY_DPLAY = 21,FACILITY_DISPATCH = 2,FACILITY_CONFIGURATION = 33,FACILITY_COMPLUS = 17,FACILITY_CERT = 11,FACILITY_BACKGROUNDCOPY = 32,FACILITY_ACS = 20,FACILITY_AAF = 18,};
enum MACRO_FD_ERROR {FD_ERROR = 0xFFFFFFFF,DDI_ERROR = 0xFFFFFFFF,};
enum MACRO_FILENAME {FILENAME_MAX = 260,FOPEN_MAX = 20,};
enum MACRO_FILE_ANY {FILE_ANY_ACCESS = 0,FILE_SPECIAL_ACCESS = 0,FILE_READ_ACCESS = 1,FILE_WRITE_ACCESS = 2,};
enum MACRO_FILE_MAP {FILE_MAP_COPY = 1,FILE_MAP_WRITE = 2,FILE_MAP_READ = 4,FILE_MAP_ALL_ACCESS = 983071,};
enum MACRO_FILE_SET {FILE_SET_ENCRYPTION = 0x1,FILE_CLEAR_ENCRYPTION = 0x2,};
enum MACRO_FIND_DIR {FIND_DIR = 0xF,FIND_NEXT = 0x1,FIND_PREV = 0x4,FIND_FROM_START = 0x8,FIND_TYPE = 0xF0,FIND_KEY = 0x10,FIND_ANY = 0x20,FIND_FORMAT = 0x40,FIND_RET = 0xF000,FIND_POS = 0x0,FIND_LENGTH = 0x1000,FIND_OFFSET = 0x2000,FIND_SIZE = 0x3000,FIND_INDEX = 0x4000,};
enum MACRO_FONTTYPE {RASTER_FONTTYPE = 0x1,DEVICE_FONTTYPE = 0x2,TRUETYPE_FONTTYPE = 0x4,};
enum MACRO_FONT_DIR {FONT_DIR_SORTED = 0x1,FONT_REC_SIG = 0x43455246,};
enum MACRO_FVIRTKEY {FVIRTKEY = 1,FNOINVERT = 2,FSHIFT = 4,FCONTROL = 8,FALT = 16,};
enum MACRO_GCPCLASS {GCPCLASS_LATIN = 1,GCPCLASS_HEBREW = 2,GCPCLASS_ARABIC = 2,GCPCLASS_NEUTRAL = 3,GCPCLASS_LOCALNUMBER = 4,GCPCLASS_LATINNUMBER = 5,GCPCLASS_LATINNUMERICTERMINATOR = 6,GCPCLASS_LATINNUMERICSEPARATOR = 7,GCPCLASS_NUMERICSEPARATOR = 8,GCPCLASS_PREBOUNDLTR = 128,GCPCLASS_PREBOUNDRTL = 64,GCPCLASS_POSTBOUNDLTR = 32,GCPCLASS_POSTBOUNDRTL = 16,};
enum MACRO_GCPGLYPH {GCPGLYPH_LINKBEFORE = 0x8000,GCPGLYPH_LINKAFTER = 0x4000,};
enum MACRO_GCS_COMP {GCS_COMP = 56,GCS_COMPREAD = 7,GCS_RESULT = 6144,GCS_RESULTREAD = 1536,};
enum MACRO_GETPROPS {GETPROPS_NONE = 0x0,SETPROPS_NONE = 0x0,CLOSEPROPS_NONE = 0x0,};
enum MACRO_GRADIENT {GRADIENT_FILL_RECT_H = 0x0,GRADIENT_FILL_RECT_V = 0x1,GRADIENT_FILL_TRIANGLE = 0x2,GRADIENT_FILL_OP_FLAG = 0xFF,};
enum MACRO_HARDWARE {HARDWARE_PROFILE_UNDOCKED_STRING = 0x40010001,HARDWARE_PROFILE_DOCKED_STRING = 0x40010002,HARDWARE_PROFILE_UNKNOWN_STRING = 0x40010003,};
enum MACRO_HELPINFO {HELPINFO_WINDOW = 0x1,HELPINFO_MENUITEM = 0x2,};
enum MACRO_HTBORDER {HTBORDER = 18,};
enum MACRO_HTBOTTOM {HTBOTTOM = 15,HTBOTTOMLEFT = 16,};
enum MACRO_HTOBJECT {HTOBJECT = 19,};
enum MACRO_HTREDUCE {HTREDUCE = 8,};
enum MACRO_HWND_TOP {HWND_TOP = 0,HWND_BOTTOM = 1,HWND_TOPMOST = -1,HWND_NOTOPMOST = -2,};
enum MACRO_ICM_USER {ICM_USER = 0x4000,ICM_RESERVED_LOW = 0x5000,ICM_RESERVED_HIGH = 0x6000,ICM_GETSTATE = 0x5000,ICM_SETSTATE = 0x5001,ICM_GETINFO = 0x5002,ICM_CONFIGURE = 0x500A,ICM_ABOUT = 0x500B,ICM_GETERRORTEXT = 0x500C,ICM_GETFORMATNAME = 0x5014,ICM_ENUMFORMATS = 0x5015,ICM_GETDEFAULTQUALITY = 0x501E,ICM_GETQUALITY = 0x501F,ICM_SETQUALITY = 0x5020,ICM_SET = 0x5028,ICM_GET = 0x5029,ICM_FRAMERATE = 0x526D7246,ICM_KEYFRAMERATE = 0x5279654B,ICM_COMPRESS_GET_FORMAT = 0x4004,ICM_COMPRESS_GET_SIZE = 0x4005,ICM_COMPRESS_QUERY = 0x4006,ICM_COMPRESS_BEGIN = 0x4007,ICM_COMPRESS = 0x4008,ICM_COMPRESS_END = 0x4009,ICM_DECOMPRESS_GET_FORMAT = 0x400A,ICM_DECOMPRESS_QUERY = 0x400B,ICM_DECOMPRESS_BEGIN = 0x400C,ICM_DECOMPRESS = 0x400D,ICM_DECOMPRESS_END = 0x400E,ICM_DECOMPRESS_SET_PALETTE = 0x401D,ICM_DECOMPRESS_GET_PALETTE = 0x401E,ICM_DRAW_QUERY = 0x401F,ICM_DRAW_BEGIN = 0x400F,ICM_DRAW_GET_PALETTE = 0x4010,ICM_DRAW_UPDATE = 0x4011,ICM_DRAW_START = 0x4012,ICM_DRAW_STOP = 0x4013,ICM_DRAW_BITS = 0x4014,ICM_DRAW_END = 0x4015,ICM_DRAW_GETTIME = 0x4020,ICM_DRAW = 0x4021,ICM_DRAW_WINDOW = 0x4022,ICM_DRAW_SETTIME = 0x4023,ICM_DRAW_REALIZE = 0x4024,ICM_DRAW_FLUSH = 0x4025,ICM_DRAW_RENDERBUFFER = 0x4026,ICM_DRAW_START_PLAY = 0x4027,ICM_DRAW_STOP_PLAY = 0x4028,ICM_DRAW_SUGGESTFORMAT = 0x4032,ICM_DRAW_CHANGEPALETTE = 0x4033,ICM_DRAW_IDLE = 0x4034,ICM_GETBUFFERSWANTED = 0x4029,ICM_GETDEFAULTKEYFRAMERATE = 0x402A,ICM_DECOMPRESSEX_BEGIN = 0x403C,ICM_DECOMPRESSEX_QUERY = 0x403D,ICM_DECOMPRESSEX = 0x403E,ICM_DECOMPRESSEX_END = 0x403F,ICM_COMPRESS_FRAMES_INFO = 0x4046,ICM_COMPRESS_FRAMES = 0x4047,ICM_SET_STATUS_PROC = 0x4048,};
enum MACRO_ICSTATUS {ICSTATUS_START = 0,ICSTATUS_STATUS = 1,ICSTATUS_END = 2,ICSTATUS_ERROR = 3,ICSTATUS_YIELD = 4,};
enum MACRO_IDIGNORE {IDIGNORE = 5,};
enum MACRO_IME_PROP {IME_PROP_AT_CARET = 0x10000,IME_PROP_SPECIAL_UI = 0x20000,IME_PROP_CANDLIST_START_FROM_1 = 0x40000,IME_PROP_UNICODE = 0x80000,IME_PROP_COMPLETE_ON_UNSELECT = 0x100000,};
enum MACRO_INTERNAL {INTERNAL_POWER_ERROR = 0xA0,};
enum MACRO_IOCTL_KS {IOCTL_KS_PROPERTY = 0x2F0003,IOCTL_KS_ENABLE_EVENT = 0x2F0007,IOCTL_KS_DISABLE_EVENT = 0x2F000B,IOCTL_KS_METHOD = 0x2F000F,IOCTL_KS_WRITE_STREAM = 0x2F8013,IOCTL_KS_READ_STREAM = 0x2F4017,IOCTL_KS_RESET_STATE = 0x2F001B,};
enum MACRO_IOC_UNIX {IOC_UNIX = 0x0,IOC_WS2 = 0x8000000,IOC_PROTOCOL = 0x10000000,IOC_VENDOR = 0x18000000,};
enum MACRO_IPRTRMGR {IPRTRMGR_PID = 10000,};
enum MACRO_IP_STATS {IP_STATS = 3,IP_ADDRTABLE = 4,IP_ADDRROW = 5,IP_FORWARDNUMBER = 6,IP_FORWARDTABLE = 7,IP_FORWARDROW = 8,IP_NETTABLE = 9,IP_NETROW = 10,};
enum MACRO_ITSSFLAG {ITSSFLAG_COMPLETE_ON_DESTROY = 0x0,ITSSFLAG_KILL_ON_DESTROY = 0x1,ITSSFLAG_SUPPORTS_TERMINATE = 0x2,ITSSFLAG_FLAGS_MASK = 0x3,ITSSFLAG_THREAD_TERMINATE_TIMEOUT = 0x10,ITSSFLAG_THREAD_POOL_TIMEOUT = 0x20,};
enum MACRO_KBDTABLE {KBDTABLE_MULTI_MAX = 8,};
enum MACRO_KBD_TYPE {KBD_TYPE = 4,};
enum MACRO_KERBEROS {KERBEROS_VERSION = 5,KERBEROS_REVISION = 6,};
enum MACRO_KEYBOARD {KEYBOARD_OVERRUN_MAKE_CODE = 0xFF,};
enum MACRO_KSDSOUND {KSDSOUND_BUFFER_PRIMARY = 0x1,KSDSOUND_BUFFER_STATIC = 0x2,KSDSOUND_BUFFER_LOCHARDWARE = 0x4,KSDSOUND_BUFFER_LOCSOFTWARE = 0x8,KSDSOUND_BUFFER_CTRL_3D = 0x1,KSDSOUND_BUFFER_CTRL_FREQUENCY = 0x2,KSDSOUND_BUFFER_CTRL_PAN = 0x4,KSDSOUND_BUFFER_CTRL_VOLUME = 0x8,KSDSOUND_BUFFER_CTRL_POSITIONNOTIFY = 0x10,};
enum MACRO_KSEVENTF {KSEVENTF_EVENT_HANDLE = 0x1,KSEVENTF_SEMAPHORE_HANDLE = 0x2,};
enum MACRO_KSFILTER {KSFILTER_NODE = 4294967295,};
enum MACRO_KSMEDIUM {KSMEDIUM_TYPE_ANYINSTANCE = 0,KSMEDIUM_STANDARD_DEVIO = 0,};
enum MACRO_KSMETHOD {KSMETHOD_TYPE_NONE = 0x0,KSMETHOD_TYPE_READ = 0x1,KSMETHOD_TYPE_WRITE = 0x2,KSMETHOD_TYPE_MODIFY = 0x3,KSMETHOD_TYPE_SOURCE = 0x4,KSMETHOD_TYPE_SEND = 0x1,KSMETHOD_TYPE_SETSUPPORT = 0x100,KSMETHOD_TYPE_BASICSUPPORT = 0x200,KSMETHOD_TYPE_TOPOLOGY = 0x10000000,};
enum MACRO_KSSTREAM {KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT = 0x1,KSSTREAM_HEADER_OPTIONSF_PREROLL = 0x2,KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY = 0x4,KSSTREAM_HEADER_OPTIONSF_TYPECHANGED = 0x8,KSSTREAM_HEADER_OPTIONSF_TIMEVALID = 0x10,KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY = 0x40,KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE = 0x80,KSSTREAM_HEADER_OPTIONSF_DURATIONVALID = 0x100,KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM = 0x200,KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA = 0x80000000,};
enum MACRO_KS_VIDEO {KS_VIDEO_FLAG_FRAME = 0x0,KS_VIDEO_FLAG_FIELD1 = 0x1,KS_VIDEO_FLAG_FIELD2 = 0x2,KS_VIDEO_FLAG_I_FRAME = 0x0,KS_VIDEO_FLAG_P_FRAME = 0x10,KS_VIDEO_FLAG_B_FRAME = 0x20,KS_VBI_FLAG_FIELD1 = 0x1,KS_VBI_FLAG_FIELD2 = 0x2,KS_VBI_FLAG_MV_PRESENT = 0x100,KS_VBI_FLAG_MV_HARDWARE = 0x200,KS_VBI_FLAG_MV_DETECTED = 0x400,KS_VBI_FLAG_TVTUNER_CHANGE = 0x10,KS_VBI_FLAG_VBIINFOHEADER_CHANGE = 0x20,KS_AnalogVideo_NTSC_Mask = 0x7,KS_AnalogVideo_PAL_Mask = 0x100FF0,KS_AnalogVideo_SECAM_Mask = 0xFF000,};
enum MACRO_LASTGOOD {LASTGOOD_OPERATION = 0xFF,LASTGOOD_OPERATION_NOPOSTPROC = 0x0,LASTGOOD_OPERATION_DELETE = 0x1,};
enum MACRO_LINECAPS {LINECAPS = 30,POLYGONALCAPS = 32,};
enum MACRO_LINE_LEN {LINE_LEN = 256,};
enum MACRO_LM_REDIR {LM_REDIR_FAILURE = 0x40003841,DFS_CONNECTION_FAILURE = 0x40003842,DFS_REFERRAL_FAILURE = 0x40003843,};
enum MACRO_LOAD_TLB {LOAD_TLB_AS_32BIT = 0x20,LOAD_TLB_AS_64BIT = 0x40,};
enum MACRO_LOCKFILE {LOCKFILE_FAIL_IMMEDIATELY = 0x1,LOCKFILE_EXCLUSIVE_LOCK = 0x2,};
enum MACRO_MAILSLOT {MAILSLOT_NO_MESSAGE = 4294967295,MAILSLOT_WAIT_FOREVER = 4294967295,};
enum MACRO_MANUALLY {MANUALLY_INITIATED_CRASH = 0xE2,};
enum MACRO_MAXDWORD {MAXDWORD = 0xFFFFFFFF,};
enum MACRO_MAXSHORT {MAXSHORT = 0x7FFF,MINLONG = 0x80000000,};
enum MACRO_MAX_LANA {MAX_LANA = 254,};
enum MACRO_MAX_NERR {MAX_NERR = 2999,};
enum MACRO_MAX_PERF {MAX_PERF_OBJECTS_IN_QUERY_FUNCTION = 64,};
enum MACRO_MAX_SIZE {MAX_SIZE_SECURITY_ID = 512,};
enum MACRO_MCAST_IF {MCAST_IF_ENTRY = 23,MCAST_GLOBAL = 24,};
enum MACRO_MCDFUNCS {MCDFUNCS = 3076,};
enum MACRO_MCD_CLIP {MCD_CLIP_LEFT = 0x1,MCD_CLIP_RIGHT = 0x2,MCD_CLIP_BOTTOM = 0x4,MCD_CLIP_TOP = 0x8,MCD_CLIP_NEAR = 0x10,MCD_CLIP_FAR = 0x20,MCD_CLIP_MASK = 0x3F,};
enum MACRO_MEMBERID {MEMBERID_NIL = -1,};
enum MACRO_METAFILE {METAFILE_DRIVER = 2049,};
enum MACRO_MF_FLAGS {MF_FLAGS_EVEN_IF_NO_RESOURCE = 0x1,MF_FLAGS_NO_CREATE_IF_NO_RESOURCE = 0x2,MF_FLAGS_FILL_IN_UNKNOWN_RESOURCE = 0x4,MF_FLAGS_CREATE_BUT_NO_SHOW_DISABLED = 0x8,};
enum MACRO_MIDICAPS {MIDICAPS_VOLUME = 0x1,MIDICAPS_LRVOLUME = 0x2,MIDICAPS_CACHE = 0x4,MIDICAPS_STREAM = 0x8,};
enum MACRO_MIDIPROP {MIDIPROP_SET = 0x80000000,MIDIPROP_GET = 0x40000000,MIDIPROP_TIMEDIV = 0x1,MIDIPROP_TEMPO = 0x2,};
enum MACRO_MIDISTRM {MIDISTRM_ERROR = -2,};
enum MACRO_MIM_OPEN {MIM_OPEN = 961,MIM_CLOSE = 962,MIM_DATA = 963,MIM_LONGDATA = 964,MIM_ERROR = 965,MIM_LONGERROR = 966,};
enum MACRO_MMSYSERR {MMSYSERR_NOERROR = 0,MMSYSERR_ERROR = 1,MMSYSERR_BADDEVICEID = 2,MMSYSERR_NOTENABLED = 3,MMSYSERR_ALLOCATED = 4,MMSYSERR_INVALHANDLE = 5,MMSYSERR_NODRIVER = 6,MMSYSERR_NOMEM = 7,MMSYSERR_NOTSUPPORTED = 8,MMSYSERR_BADERRNUM = 9,MMSYSERR_INVALFLAG = 10,MMSYSERR_INVALPARAM = 11,MMSYSERR_HANDLEBUSY = 12,MMSYSERR_INVALIDALIAS = 13,MMSYSERR_BADDB = 14,MMSYSERR_KEYNOTFOUND = 15,MMSYSERR_READERROR = 16,MMSYSERR_WRITEERROR = 17,MMSYSERR_DELETEERROR = 18,MMSYSERR_VALNOTFOUND = 19,MMSYSERR_NODRIVERCB = 20,MMSYSERR_MOREDATA = 21,MMSYSERR_LASTERROR = 21,};
enum MACRO_MOD_LEFT {MOD_LEFT = 0x8000,MOD_RIGHT = 0x4000,MOD_ON_KEYUP = 0x800,MOD_IGNORE_ALL_MODIFIER = 0x400,};
enum MACRO_MOVEFILE {MOVEFILE_REPLACE_EXISTING = 0x1,MOVEFILE_COPY_ALLOWED = 0x2,MOVEFILE_DELAY_UNTIL_REBOOT = 0x4,MOVEFILE_WRITE_THROUGH = 0x8,MOVEFILE_CREATE_HARDLINK = 0x10,MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x20,};
enum MACRO_MSSIPOTF {MSSIPOTF_E_OUTOFMEMRANGE = 0x80097001,MSSIPOTF_E_CANTGETOBJECT = 0x80097002,MSSIPOTF_E_NOHEADTABLE = 0x80097003,MSSIPOTF_E_BAD_MAGICNUMBER = 0x80097004,MSSIPOTF_E_BAD_OFFSET_TABLE = 0x80097005,MSSIPOTF_E_TABLE_TAGORDER = 0x80097006,MSSIPOTF_E_TABLE_LONGWORD = 0x80097007,MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = 0x80097008,MSSIPOTF_E_TABLES_OVERLAP = 0x80097009,MSSIPOTF_E_TABLE_PADBYTES = 0x8009700A,MSSIPOTF_E_FILETOOSMALL = 0x8009700B,MSSIPOTF_E_TABLE_CHECKSUM = 0x8009700C,MSSIPOTF_E_FILE_CHECKSUM = 0x8009700D,MSSIPOTF_E_FAILED_POLICY = 0x80097010,MSSIPOTF_E_FAILED_HINTS_CHECK = 0x80097011,MSSIPOTF_E_NOT_OPENTYPE = 0x80097012,MSSIPOTF_E_FILE = 0x80097013,MSSIPOTF_E_CRYPT = 0x80097014,MSSIPOTF_E_BADVERSION = 0x80097015,MSSIPOTF_E_DSIG_STRUCTURE = 0x80097016,MSSIPOTF_E_PCONST_CHECK = 0x80097017,MSSIPOTF_E_STRUCTURE = 0x80097018,};
enum MACRO_MULTIPLE {MULTIPLE_IRP_COMPLETE_REQUESTS = 0x44,};
enum MACRO_NCBASTAT {NCBASTAT = 0x33,};
enum MACRO_NCBNAMSZ {NCBNAMSZ = 16,};
enum MACRO_NCBRESET {NCBRESET = 0x32,};
enum MACRO_NCBSSTAT {NCBSSTAT = 0x34,};
enum MACRO_NCBTRACE {NCBTRACE = 0x79,ASYNCH = 0x80,};
enum MACRO_NDIS_802 {NDIS_802_3_MAC_OPTION_PRIORITY = 0x1,};
enum MACRO_NDIS_PNP {NDIS_PNP_WAKE_UP_MAGIC_PACKET = 0x1,NDIS_PNP_WAKE_UP_PATTERN_MATCH = 0x2,NDIS_PNP_WAKE_UP_LINK_CHANGE = 0x4,};
enum MACRO_NETSCAPE {NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 0x80,NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 0x40,NETSCAPE_SMIME_CERT_TYPE = 0x20,NETSCAPE_SIGN_CERT_TYPE = 0x10,NETSCAPE_SSL_CA_CERT_TYPE = 0x4,NETSCAPE_SMIME_CA_CERT_TYPE = 0x2,NETSCAPE_SIGN_CA_CERT_TYPE = 0x1,};
enum MACRO_NEWFRAME {NEWFRAME = 1,ABORTDOC = 2,};
enum MACRO_NEXTBAND {NEXTBAND = 3,SETCOLORTABLE = 4,};
enum MACRO_NODETYPE {BROADCAST_NODETYPE = 1,PEER_TO_PEER_NODETYPE = 2,MIXED_NODETYPE = 4,HYBRID_NODETYPE = 8,};
enum MACRO_NOPARITY {NOPARITY = 0,ODDPARITY = 1,EVENPARITY = 2,};
enum MACRO_NO_PAGES {NO_PAGES_AVAILABLE = 0x4D,};
enum MACRO_NTFRSPRF {NTFRSPRF_OPEN_RPC_BINDING_ERROR_SET = 0xC00034D7,NTFRSPRF_OPEN_RPC_BINDING_ERROR_CONN = 0xC00034D8,NTFRSPRF_OPEN_RPC_CALL_ERROR_SET = 0xC00034D9,NTFRSPRF_OPEN_RPC_CALL_ERROR_CONN = 0xC00034DA,NTFRSPRF_COLLECT_RPC_BINDING_ERROR_SET = 0xC00034DB,NTFRSPRF_COLLECT_RPC_BINDING_ERROR_CONN = 0xC00034DC,NTFRSPRF_COLLECT_RPC_CALL_ERROR_SET = 0xC00034DD,NTFRSPRF_COLLECT_RPC_CALL_ERROR_CONN = 0xC00034DE,NTFRSPRF_VIRTUALALLOC_ERROR_SET = 0xC00034DF,NTFRSPRF_VIRTUALALLOC_ERROR_CONN = 0xC00034E0,NTFRSPRF_REGISTRY_ERROR_SET = 0xC00034E1,NTFRSPRF_REGISTRY_ERROR_CONN = 0xC00034E2,};
enum MACRO_NULL_SYM {NULL_SYM_DUMP_PARAM = 0x5,NULL_FIELD_NAME = 0x6,};
enum MACRO_NUMFONTS {NUMFONTS = 22,};
enum MACRO_NUM_EISA {NUM_EISA_RANGES = 4,};
enum MACRO_OBSOLETE {OBSOLETE_IOCTL_STORAGE_RESET_BUS = 0x2DD000,OBSOLETE_IOCTL_STORAGE_RESET_DEVICE = 0x2DD004,};
enum MACRO_OLEIVERB {OLEIVERB_PRIMARY = 0,OLEIVERB_SHOW = -1,OLEIVERB_OPEN = -2,OLEIVERB_HIDE = -3,OLEIVERB_UIACTIVATE = -4,OLEIVERB_INPLACEACTIVATE = -5,OLEIVERB_DISCARDUNDOSTATE = -6,};
enum MACRO_OLEOBJ_S {OLEOBJ_S_INVALIDVERB = 0x40180,OLEOBJ_S_CANNOT_DOVERB_NOW = 0x40181,OLEOBJ_S_INVALIDHWND = 0x40182,};
enum MACRO_PARALLEL {PARALLEL_INIT = 0x1,PARALLEL_AUTOFEED = 0x2,PARALLEL_PAPER_EMPTY = 0x4,PARALLEL_OFF_LINE = 0x8,PARALLEL_POWER_OFF = 0x10,PARALLEL_NOT_CONNECTED = 0x20,PARALLEL_BUSY = 0x40,PARALLEL_SELECTED = 0x80,};
enum MACRO_PATPAINT {PATPAINT = 0xFB0A09,};
enum MACRO_PCLEANUI {PCLEANUI = -2080374784,};
enum MACRO_PFN_LIST {PFN_LIST_CORRUPT = 0x4E,};
enum MACRO_PKCS_CTL {PKCS_CTL = 37,};
enum MACRO_PKCS_RC2 {PKCS_RC2_CBC_PARAMETERS = 41,PKCS_SMIME_CAPABILITIES = 42,PKCS_RSA_PRIVATE_KEY = 43,PKCS_PRIVATE_KEY_INFO = 44,PKCS_ENCRYPTED_PRIVATE_KEY_INFO = 45,};
enum MACRO_PKCS_UTC {PKCS_UTC_TIME = 17,PKCS_TIME_REQUEST = 18,};
enum MACRO_PLATFORM {PLATFORM_ID_DOS = 300,PLATFORM_ID_OS2 = 400,PLATFORM_ID_NT = 500,PLATFORM_ID_OSF = 600,PLATFORM_ID_VMS = 700,};
enum MACRO_POLYFILL {POLYFILL_LAST = 2,};
enum MACRO_POOL_CUE {POOL_CUE_NULL = 0xFFFFFFFF,};
enum MACRO_POSITIVE {POSITIVE_INFINITY_RATE = 0xFFFFFFFE,};
enum MACRO_PRIORITY {NO_PRIORITY = 0,MAX_PRIORITY = 99,MIN_PRIORITY = 1,DEF_PRIORITY = 1,};
enum MACRO_PROGRESS {PROGRESS_CONTINUE = 0,PROGRESS_CANCEL = 1,PROGRESS_STOP = 2,PROGRESS_QUIET = 3,};
enum MACRO_PROTOCOL {BASE_PROTOCOL = 1,LAYERED_PROTOCOL = 0,};
enum MACRO_PROVIDER {PROVIDER_KEEPS_VALUE_LENGTH = 0x1,};
enum MACRO_PSINJECT {PSINJECT_BEGINSTREAM = 1,PSINJECT_PSADOBE = 2,PSINJECT_PAGESATEND = 3,PSINJECT_PAGES = 4,PSINJECT_DOCNEEDEDRES = 5,PSINJECT_DOCSUPPLIEDRES = 6,PSINJECT_PAGEORDER = 7,PSINJECT_ORIENTATION = 8,PSINJECT_BOUNDINGBOX = 9,PSINJECT_DOCUMENTPROCESSCOLORS = 10,PSINJECT_COMMENTS = 11,PSINJECT_BEGINDEFAULTS = 12,PSINJECT_ENDDEFAULTS = 13,PSINJECT_BEGINPROLOG = 14,PSINJECT_ENDPROLOG = 15,PSINJECT_BEGINSETUP = 16,PSINJECT_ENDSETUP = 17,PSINJECT_TRAILER = 18,PSINJECT_EOF = 19,PSINJECT_ENDSTREAM = 20,PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21,PSINJECT_PAGENUMBER = 100,PSINJECT_BEGINPAGESETUP = 101,PSINJECT_ENDPAGESETUP = 102,PSINJECT_PAGETRAILER = 103,PSINJECT_PLATECOLOR = 104,PSINJECT_SHOWPAGE = 105,PSINJECT_PAGEBBOX = 106,PSINJECT_ENDPAGECOMMENTS = 107,PSINJECT_VMSAVE = 200,PSINJECT_VMRESTORE = 201,};
enum MACRO_PSUIHDRF {PSUIHDRF_OBSOLETE = 0x1,PSUIHDRF_NOAPPLYNOW = 0x2,PSUIHDRF_PROPTITLE = 0x4,PSUIHDRF_USEHICON = 0x8,PSUIHDRF_DEFTITLE = 0x10,PSUIHDRF_EXACT_PTITLE = 0x20,};
enum MACRO_PSUIINFO {PSUIINFO_UNICODE = 0x1,};
enum MACRO_RASADFLG {RASADFLG_PositionDlg = 0x1,};
enum MACRO_RASCCPCA {RASCCPCA_MPPC = 0x6,RASCCPCA_STAC = 0x5,};
enum MACRO_RASLCPAD {RASLCPAD_CHAP_MD5 = 0x5,RASLCPAD_CHAP_MS = 0x80,RASLCPAD_CHAP_MSV2 = 0x81,};
enum MACRO_RASLCPAP {RASLCPAP_PAP = 0xC023,RASLCPAP_SPAP = 0xC027,RASLCPAP_CHAP = 0xC223,RASLCPAP_EAP = 0xC227,};
enum MACRO_READABLE {READABLE_LOCAL_CLOCK = 0x1,};
enum MACRO_REGISTRY {REGISTRY_ERROR = 0x51,};
enum MACRO_RESETDEV {RESETDEV = 7,SETBREAK = 8,};
enum MACRO_RESOURCE {RESOURCE_CONNECTED = 0x1,RESOURCE_GLOBALNET = 0x2,RESOURCE_REMEMBERED = 0x3,RESOURCE_RECENT = 0x4,RESOURCE_CONTEXT = 0x5,};
enum MACRO_RES_SOFT {RES_SOFT_SEARCH = 0x1,RES_FIND_MULTIPLE = 0x2,};
enum MACRO_RIFFCPPO {RIFFCPPO = 1330663491,};
enum MACRO_RIFFINFO {RIFFINFO_IARL = 1280459081,RIFFINFO_IART = 1414676809,RIFFINFO_ICMS = 1397572425,RIFFINFO_ICMT = 1414349641,RIFFINFO_ICOP = 1347371849,RIFFINFO_ICRD = 1146241865,RIFFINFO_ICRP = 1347568457,RIFFINFO_IDIM = 1296647241,RIFFINFO_IDPI = 1229997129,RIFFINFO_IENG = 1196311881,RIFFINFO_IGNR = 1380861769,RIFFINFO_IKEY = 1497713481,RIFFINFO_ILGT = 1413958729,RIFFINFO_IMED = 1145392457,RIFFINFO_INAM = 1296125513,RIFFINFO_IPLT = 1414287433,RIFFINFO_IPRD = 1146245193,RIFFINFO_ISBJ = 1245860681,RIFFINFO_ISFT = 1413894985,RIFFINFO_ISHP = 1346917193,RIFFINFO_ISRC = 1129468745,RIFFINFO_ISRF = 1179800393,RIFFINFO_ITCH = 1212372041,RIFFINFO_ISMP = 1347244873,RIFFINFO_IDIT = 1414087753,};
enum MACRO_RIFFWAVE {RIFFWAVE_inst = 1953721961,};
enum MACRO_ROCKWELL {ROCKWELL_WA1_WAVEIN = 100,ROCKWELL_WA1_WAVEOUT = 101,ROCKWELL_WA1_SYNTH = 102,ROCKWELL_WA1_MIXER = 103,ROCKWELL_WA1_MPU401_IN = 104,ROCKWELL_WA1_MPU401_OUT = 105,ROCKWELL_WA2_WAVEIN = 200,ROCKWELL_WA2_WAVEOUT = 201,ROCKWELL_WA2_SYNTH = 202,ROCKWELL_WA2_MIXER = 203,ROCKWELL_WA2_MPU401_IN = 204,ROCKWELL_WA2_MPU401_OUT = 205,};
enum MACRO_ROTFLAGS {ROTFLAGS_REGISTRATIONKEEPSALIVE = 0x1,ROTFLAGS_ALLOWANYCLIENT = 0x2,};
enum MACRO_RPC_CALL {RPC_CALL_ATTRIBUTES_VERSION = 1,RPC_QUERY_SERVER_PRINCIPAL_NAME = 2,RPC_QUERY_CLIENT_PRINCIPAL_NAME = 4,};
enum MACRO_RPC_C_EP {RPC_C_EP_ALL_ELTS = 0,RPC_C_EP_MATCH_BY_IF = 1,RPC_C_EP_MATCH_BY_OBJ = 2,RPC_C_EP_MATCH_BY_BOTH = 3,RPC_C_VERS_ALL = 1,RPC_C_VERS_COMPATIBLE = 2,RPC_C_VERS_EXACT = 3,RPC_C_VERS_MAJOR_ONLY = 4,RPC_C_VERS_UPTO = 5,RPC_C_MGMT_INQ_IF_IDS = 0,RPC_C_MGMT_INQ_PRINC_NAME = 1,RPC_C_MGMT_INQ_STATS = 2,RPC_C_MGMT_IS_SERVER_LISTEN = 3,RPC_C_MGMT_STOP_SERVER_LISTEN = 4,RPC_C_PARM_MAX_PACKET_LENGTH = 1,RPC_C_PARM_BUFFER_LENGTH = 2,RPC_IF_AUTOLISTEN = 1,RPC_IF_OLE = 2,RPC_IF_ALLOW_UNKNOWN_AUTHORITY = 4,RPC_IF_ALLOW_SECURE_ONLY = 8,RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH = 16,RPC_CONTEXT_HANDLE_DEFAULT_GUARD = -4083,RPC_CONTEXT_HANDLE_DEFAULT_FLAGS = 0,RPC_CONTEXT_HANDLE_FLAGS = 805306368,RPC_CONTEXT_HANDLE_SERIALIZE = 268435456,RPC_CONTEXT_HANDLE_DONT_SERIALIZE = 536870912,RPC_NCA_FLAGS_DEFAULT = 0,RPC_NCA_FLAGS_IDEMPOTENT = 1,RPC_NCA_FLAGS_BROADCAST = 2,RPC_NCA_FLAGS_MAYBE = 4,RPC_BUFFER_COMPLETE = 4096,RPC_BUFFER_PARTIAL = 8192,RPC_BUFFER_EXTRA = 16384,RPC_BUFFER_ASYNC = 32768,RPC_BUFFER_NONOTIFY = 65536,};
enum MACRO_SCANCODE {SCANCODE_LSHIFT = 0x2A,SCANCODE_RSHIFT = 0x36,SCANCODE_CTRL = 0x1D,SCANCODE_ALT = 0x38,SCANCODE_SIMULATED = 0x200,SCANCODE_NUMPAD_FIRST = 0x47,SCANCODE_NUMPAD_LAST = 0x52,SCANCODE_LWIN = 0x5B,SCANCODE_RWIN = 0x5C,SCANCODE_THAI_LAYOUT_TOGGLE = 0x29,};
enum MACRO_SCHANNEL {SCHANNEL_MAC_KEY = 0x0,SCHANNEL_ENC_KEY = 0x1,};
enum MACRO_SC_GROUP {SC_GROUP_IDENTIFIERW = 43,SC_GROUP_IDENTIFIERA = 43,SC_GROUP_IDENTIFIER = 43,};
enum MACRO_SECURITY {SECURITY_NULL_RID = 0x0,SECURITY_WORLD_RID = 0x0,SECURITY_LOCAL_RID = 0x0,SECURITY_CREATOR_OWNER_RID = 0x0,SECURITY_CREATOR_GROUP_RID = 0x1,SECURITY_CREATOR_OWNER_SERVER_RID = 0x2,SECURITY_CREATOR_GROUP_SERVER_RID = 0x3,SECURITY_DIALUP_RID = 0x1,SECURITY_NETWORK_RID = 0x2,SECURITY_BATCH_RID = 0x3,SECURITY_INTERACTIVE_RID = 0x4,SECURITY_LOGON_IDS_RID = 0x5,SECURITY_LOGON_IDS_RID_COUNT = 0x3,SECURITY_SERVICE_RID = 0x6,SECURITY_ANONYMOUS_LOGON_RID = 0x7,SECURITY_PROXY_RID = 0x8,SECURITY_ENTERPRISE_CONTROLLERS_RID = 0x9,SECURITY_SERVER_LOGON_RID = 0x9,SECURITY_PRINCIPAL_SELF_RID = 0xA,SECURITY_AUTHENTICATED_USER_RID = 0xB,SECURITY_RESTRICTED_CODE_RID = 0xC,SECURITY_TERMINAL_SERVER_RID = 0xD,SECURITY_REMOTE_LOGON_RID = 0xE,SECURITY_THIS_ORGANIZATION_RID = 0xF,SECURITY_LOCAL_SYSTEM_RID = 0x12,SECURITY_LOCAL_SERVICE_RID = 0x13,SECURITY_NETWORK_SERVICE_RID = 0x14,SECURITY_NT_NON_UNIQUE = 0x15,SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 0x3,SECURITY_BUILTIN_DOMAIN_RID = 0x20,SECURITY_PACKAGE_BASE_RID = 0x40,SECURITY_PACKAGE_RID_COUNT = 0x2,SECURITY_PACKAGE_NTLM_RID = 0xA,SECURITY_PACKAGE_SCHANNEL_RID = 0xE,SECURITY_PACKAGE_DIGEST_RID = 0x15,SECURITY_MAX_ALWAYS_FILTERED = 0x3E7,SECURITY_MIN_NEVER_FILTERED = 0x3E8,SECURITY_OTHER_ORGANIZATION_RID = 0x3E8,};
enum MACRO_SETDIRID {SETDIRID_NOT_FULL_PATH = 0x1,SRCINFO_PATH = 0x1,};
enum MACRO_SET_CLIP {SET_CLIP_BOX = 4108,SET_BOUNDS = 4109,SET_MIRROR_MODE = 4110,};
enum MACRO_SEVERITY {SEVERITY_SUCCESS = 0,SEVERITY_ERROR = 1,};
enum MACRO_SE_OWNER {SE_OWNER_DEFAULTED = 0x1,SE_GROUP_DEFAULTED = 0x2,SE_DACL_PRESENT = 0x4,SE_DACL_DEFAULTED = 0x8,SE_SACL_PRESENT = 0x10,SE_SACL_DEFAULTED = 0x20,SE_DACL_AUTO_INHERIT_REQ = 0x100,SE_SACL_AUTO_INHERIT_REQ = 0x200,SE_DACL_AUTO_INHERITED = 0x400,SE_SACL_AUTO_INHERITED = 0x800,SE_DACL_PROTECTED = 0x1000,SE_SACL_PROTECTED = 0x2000,SE_RM_CONTROL_VALID = 0x4000,SE_SELF_RELATIVE = 0x8000,};
enum MACRO_SHREGSET {SHREGSET_HKCU = 0x1,SHREGSET_FORCE_HKCU = 0x2,SHREGSET_HKLM = 0x4,SHREGSET_FORCE_HKLM = 0x8,SHREGSET_DEFAULT = 0x6,};
enum MACRO_SHUTDOWN {SHUTDOWN_NORETRY = 0x1,};
enum MACRO_SNAPSHOT {SNAPSHOT_POLICY_NEVER = 0,SNAPSHOT_POLICY_ALWAYS = 1,SNAPSHOT_POLICY_UNPLANNED = 2,};
enum MACRO_SOFTDIST {SOFTDIST_FLAG_USAGE_EMAIL = 0x1,SOFTDIST_FLAG_USAGE_PRECACHE = 0x2,SOFTDIST_FLAG_USAGE_AUTOINSTALL = 0x4,SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 0x8,SOFTDIST_ADSTATE_NONE = 0x0,SOFTDIST_ADSTATE_AVAILABLE = 0x1,SOFTDIST_ADSTATE_DOWNLOADED = 0x2,SOFTDIST_ADSTATE_INSTALLED = 0x3,};
enum MACRO_SPC_UUID {SPC_UUID_LENGTH = 16,SPC_URL_LINK_CHOICE = 1,SPC_MONIKER_LINK_CHOICE = 2,SPC_FILE_LINK_CHOICE = 3,};
enum MACRO_SPECIFIC {SPECIFIC_RIGHTS_ALL = 0xFFFF,};
enum MACRO_SRCERASE {SRCERASE = 0x440328,};
enum MACRO_SRCPAINT {SRCPAINT = 0xEE0086,};
enum MACRO_STANDARD {STANDARD_RIGHTS_REQUIRED = 0xF0000,STANDARD_RIGHTS_READ = 0x20000,STANDARD_RIGHTS_WRITE = 0x20000,STANDARD_RIGHTS_EXECUTE = 0x20000,STANDARD_RIGHTS_ALL = 0x1F0000,};
enum MACRO_STARTDOC {STARTDOC = 10,};
enum MACRO_STOPBITS {STOPBITS_10 = 0x1,STOPBITS_15 = 0x2,STOPBITS_20 = 0x4,};
enum MACRO_SYSAUDIO {SYSAUDIO_FLAGS_DONT_COMBINE_PINS = 0x1,};
enum MACRO_TERMINAL {TERMINAL_SERVER_DRIVER_MADE_INCORRECT_MEMORY_REFERENCE = 0xCF,};
enum MACRO_TEXTCAPS {TEXTCAPS = 34,};
enum MACRO_TIMER_OR {TIMER_OR_DPC_INVALID = 0xC7,};
enum MACRO_TITLE_SC {TITLE_SC_MESSAGE_BOX = 0xC0001B75,};
enum MACRO_TRACELOG {TRACELOG_CREATE_REALTIME = 0x20,TRACELOG_CREATE_ONDISK = 0x40,TRACELOG_GUID_ENABLE = 0x80,TRACELOG_ACCESS_KERNEL_LOGGER = 0x100,TRACELOG_CREATE_INPROC = 0x200,TRACELOG_ACCESS_REALTIME = 0x400,TRACELOG_REGISTER_GUIDS = 0x800,};
enum MACRO_TRUNCATE {TRUNCATE_EXISTING = 5,};
enum MACRO_UCLEANUI {UCLEANUI = 67108864,PDIRTYUI = -2013265920,};
enum MACRO_UDIRTYUI {UDIRTYUI = 134217728,};
enum MACRO_UNDEFINE {UNDEFINE_PRIMARY = 0xC,UNDEFINE_ALTERNATE = 0xD,};
enum MACRO_URLOSTRM {URLOSTRM_USECACHEDCOPY_ONLY = 0x1,URLOSTRM_USECACHEDCOPY = 0x2,URLOSTRM_GETNEWESTVERSION = 0x3,};
enum MACRO_VERTSIZE {VERTSIZE = 6,HORZRES = 8,};
enum MACRO_VMEMHEAP {VMEMHEAP_LINEAR = 0x1,VMEMHEAP_RECTANGULAR = 0x2,VMEMHEAP_ALIGNMENT = 0x4,};
enum MACRO_VREFRESH {VREFRESH = 116,};
enum MACRO_WAVECAPS {WAVECAPS_PITCH = 0x1,WAVECAPS_PLAYBACKRATE = 0x2,WAVECAPS_VOLUME = 0x4,WAVECAPS_LRVOLUME = 0x8,WAVECAPS_SYNC = 0x10,WAVECAPS_SAMPLEACCURATE = 0x20,};
enum MACRO_WAVELINK {WAVELINK_CHANNEL_LEFT = 0x1,WAVELINK_CHANNEL_RIGHT = 0x2,};
enum MACRO_WGL_SWAP {WGL_SWAP_MAIN_PLANE = 0x1,WGL_SWAP_OVERLAY1 = 0x2,WGL_SWAP_OVERLAY2 = 0x4,WGL_SWAP_OVERLAY3 = 0x8,WGL_SWAP_OVERLAY4 = 0x10,WGL_SWAP_OVERLAY5 = 0x20,WGL_SWAP_OVERLAY6 = 0x40,WGL_SWAP_OVERLAY7 = 0x80,WGL_SWAP_OVERLAY8 = 0x100,WGL_SWAP_OVERLAY9 = 0x200,WGL_SWAP_OVERLAY10 = 0x400,WGL_SWAP_OVERLAY11 = 0x800,WGL_SWAP_OVERLAY12 = 0x1000,WGL_SWAP_OVERLAY13 = 0x2000,WGL_SWAP_OVERLAY14 = 0x4000,WGL_SWAP_OVERLAY15 = 0x8000,WGL_SWAP_UNDERLAY1 = 0x10000,WGL_SWAP_UNDERLAY2 = 0x20000,WGL_SWAP_UNDERLAY3 = 0x40000,WGL_SWAP_UNDERLAY4 = 0x80000,WGL_SWAP_UNDERLAY5 = 0x100000,WGL_SWAP_UNDERLAY6 = 0x200000,WGL_SWAP_UNDERLAY7 = 0x400000,WGL_SWAP_UNDERLAY8 = 0x800000,WGL_SWAP_UNDERLAY9 = 0x1000000,WGL_SWAP_UNDERLAY10 = 0x2000000,WGL_SWAP_UNDERLAY11 = 0x4000000,WGL_SWAP_UNDERLAY12 = 0x8000000,WGL_SWAP_UNDERLAY13 = 0x10000000,WGL_SWAP_UNDERLAY14 = 0x20000000,WGL_SWAP_UNDERLAY15 = 0x40000000,WGL_SWAPMULTIPLE_MAX = 0x10,};
enum MACRO_WINEVENT {WINEVENT_OUTOFCONTEXT = 0x0,WINEVENT_SKIPOWNTHREAD = 0x1,WINEVENT_SKIPOWNPROCESS = 0x2,WINEVENT_INCONTEXT = 0x4,};
enum MACRO_WINLOGON {WINLOGON_FATAL_ERROR = 0xC000021A,};
enum MACRO_WSA_FLAG {WSA_FLAG_OVERLAPPED = 0x1,WSA_FLAG_MULTIPOINT_C_ROOT = 0x2,WSA_FLAG_MULTIPOINT_C_LEAF = 0x4,WSA_FLAG_MULTIPOINT_D_ROOT = 0x8,WSA_FLAG_MULTIPOINT_D_LEAF = 0x10,};
enum MACRO_XBUTTON1 {XBUTTON1 = 0x1,XBUTTON2 = 0x2,};
enum MACRO__FPCLASS {_FPCLASS_SNAN = 0x1,_FPCLASS_QNAN = 0x2,_FPCLASS_NINF = 0x4,_FPCLASS_NN = 0x8,_FPCLASS_ND = 0x10,_FPCLASS_NZ = 0x20,_FPCLASS_PZ = 0x40,_FPCLASS_PD = 0x80,_FPCLASS_PN = 0x100,_FPCLASS_PINF = 0x200,};
enum MACRO__NSTREAM {_NSTREAM_ = 512,};
enum MACRO___RPCNDR {__RPCNDR_H_VERSION__ = 475,};
enum MACRO_ctlFirst {ctlFirst = 0x400,};
enum MACRO_mCOMPANY {mCOMPANY = 0x18000000,};
typedef struct _MCDENABLESTATE MCDENABLESTATE;
typedef struct __MCDMIPMAPLEVEL MCDMIPMAPLEVEL;
typedef struct _MCDPIXELFORMAT MCDPIXELFORMAT;
typedef struct _MCDPIXELUNPACK MCDPIXELUNPACK;
typedef struct _MCDRENDERSTATE MCDRENDERSTATE;
typedef struct _MCDSTATE_PIXEL MCDSTATE_PIXEL;
typedef struct _MCDTEXENVSTATE MCDTEXENVSTATE;
typedef struct __MCDTEXTUREDATA MCDTEXTUREDATA;
typedef struct tagMCI_PLAY_PARMS MCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS MCI_SEEK_PARMS;
typedef struct _MEMORYSTATUSEX MEMORYSTATUSEX;
typedef struct _MIB_IPNETTABLE MIB_IPNETTABLE;
typedef struct _MIB_ROUTESTATE MIB_ROUTESTATE;
typedef struct _MIDL_STUB_DESC MIDL_STUB_DESC;
typedef struct tagMONITORINFOEXA MONITORINFOEXA;
typedef struct tagMONITORINFOEXW MONITORINFOEXW;
typedef struct tagMOUSEMOVEPOINT MOUSEMOVEPOINT;
typedef struct _49CD7323AA35D3C00204BB7AA8563FFA MOVE_FILE_DATA;
typedef struct tagMSLLHOOKSTRUCT MSLLHOOKSTRUCT;
typedef struct _MSV1_0_AV_PAIR MSV1_0_AV_PAIR;
enum ModulationType {BDA_MOD_NOT_SET = 0xFFFFFFFF,BDA_MOD_NOT_DEFINED = 0x0,BDA_MOD_16QAM = 0x1,BDA_MOD_32QAM = 0x2,BDA_MOD_64QAM = 0x3,BDA_MOD_80QAM = 0x4,BDA_MOD_96QAM = 0x5,BDA_MOD_112QAM = 0x6,BDA_MOD_128QAM = 0x7,BDA_MOD_160QAM = 0x8,BDA_MOD_192QAM = 0x9,BDA_MOD_224QAM = 0xA,BDA_MOD_256QAM = 0xB,BDA_MOD_320QAM = 0xC,BDA_MOD_384QAM = 0xD,BDA_MOD_448QAM = 0xE,BDA_MOD_512QAM = 0xF,BDA_MOD_640QAM = 0x10,BDA_MOD_768QAM = 0x11,BDA_MOD_896QAM = 0x12,BDA_MOD_1024QAM = 0x13,BDA_MOD_QPSK = 0x14,BDA_MOD_BPSK = 0x15,BDA_MOD_OQPSK = 0x16,BDA_MOD_8VSB = 0x17,BDA_MOD_16VSB = 0x18,BDA_MOD_ANALOG_AMPLITUDE = 0x19,BDA_MOD_ANALOG_FREQUENCY = 0x1A,BDA_MOD_MAX = 0x1B,};
typedef struct tagNEWTEXTMETRICA NEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW NEWTEXTMETRICW;
typedef struct _nlsversioninfo NLSVERSIONINFO;
typedef struct tagNMITEMACTIVATE NMITEMACTIVATE;
typedef struct tagNMLVCUSTOMDRAW NMLVCUSTOMDRAW;
typedef struct tagNMOBJECTNOTIFY NMOBJECTNOTIFY;
typedef struct tagNMREBARCHEVRON NMREBARCHEVRON;
typedef struct _NMTBCUSTOMDRAW NMTBCUSTOMDRAW;
typedef struct tagNMTTCUSTOMDRAW NMTTCUSTOMDRAW;
typedef struct tagNMTVCUSTOMDRAW NMTVCUSTOMDRAW;
typedef struct tagCWPRETSTRUCT *NPCWPRETSTRUCT;
typedef struct tagINPUTCONTEXT *NPINPUTCONTEXT;
typedef struct tagMIDIINCAPS2A *NPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W *NPMIDIINCAPS2W;
typedef struct tagMIDIOUTCAPSA *NPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *NPMIDIOUTCAPSW;
typedef struct tagTRANSMSGLIST *NPTRANSMSGLIST;
typedef struct tWAVEFORMATEX *NPWAVEFORMATEX;
typedef struct tagWAVEINCAPS2A *NPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W *NPWAVEINCAPS2W;
typedef struct tagWAVEOUTCAPSA *NPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *NPWAVEOUTCAPSW;
typedef struct _OSVERSIONINFOA OSVERSIONINFOA;
typedef struct _OSVERSIONINFOW OSVERSIONINFOW;
typedef struct _ACTION_HEADER *PACTION_HEADER;
typedef IAVIEditStream *PAVIEDITSTREAM;
typedef struct _BDA_PID_UNMAP *PBDA_PID_UNMAP;
typedef struct _BLENDFUNCTION *PBLENDFUNCTION;
typedef struct tagCANDIDATEFORM *PCANDIDATEFORM;
typedef struct tagCANDIDATEINFO *PCANDIDATEINFO;
typedef struct tagCANDIDATELIST *PCANDIDATELIST;
typedef struct tagCapDriverCaps *PCAPDRIVERCAPS;
typedef struct _CAT_NAMEVALUE *PCAT_NAMEVALUE;
typedef struct _CERT_RDN_ATTR *PCERT_RDN_ATTR;
typedef struct _CMC_DATA_INFO *PCMC_DATA_INFO;
typedef struct _CMC_PEND_INFO *PCMC_PEND_INFO;
typedef struct CM_Power_Data_s *PCM_POWER_DATA;
typedef struct _DDLOCKOUTINFO *PDDLOCKOUTINFO;
typedef struct _DD_ATTACHLIST *PDD_ATTACHLIST;
typedef struct _DD_HALINFO_V4 *PDD_HALINFO_V4;
typedef struct _DD_STEREOMODE *PDD_STEREOMODE;
typedef struct _DD_UNLOCKDATA *PDD_UNLOCKDATA;
typedef struct tagDEBUGHOOKINFO *PDEBUGHOOKINFO;
typedef struct _DISK_GEOMETRY *PDISK_GEOMETRY;
typedef struct tagDRVCONFIGINFO *PDRVCONFIGINFO;
typedef struct tagDRVENABLEDATA *PDRVENABLEDATA;
typedef struct _EFS_HASH_BLOB *PEFS_HASH_BLOB;
typedef struct tagEMRALPHABLEND *PEMRALPHABLEND;
typedef struct tagEMREXTESCAPE *PEMRDRAWESCAPE;
typedef struct tagEMRGDICOMMENT *PEMRGDICOMMENT;
typedef struct tagEMRPOLYLINE *PEMRPOLYBEZIER;
typedef struct tagEMRPOLYDRAW16 *PEMRPOLYDRAW16;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYLINE16;
typedef struct tagEMRPOLYLINE *PEMRPOLYLINETO;
typedef struct tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETICMMODE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETMAPMODE;
typedef struct tagABORTPATH *PEMRSETMETARGN;
typedef struct tagEMRSTRETCHBLT *PEMRSTRETCHBLT;
typedef struct tagEMRFILLPATH *PEMRSTROKEPATH;
typedef struct tagENHMETAHEADER *PENHMETAHEADER;
typedef struct tagENHMETARECORD *PENHMETARECORD;
typedef struct _EXTSTACKTRACE *PEXTSTACKTRACE;
typedef struct _EXTTEXTMETRIC *PEXTTEXTMETRIC;
typedef struct _FILE_PREFETCH *PFILE_PREFETCH;
typedef struct tagFONTSIGNATURE *PFONTSIGNATURE;
typedef  unsigned char *PFORMAT_STRING;
typedef struct _GRADIENT_RECT *PGRADIENT_RECT;
typedef struct tagGUITHREADINFO *PGUITHREADINFO;
typedef struct tagHARDWAREINPUT *PHARDWAREINPUT;
typedef struct _JOB_SET_ARRAY *PJOB_SET_ARRAY;
typedef struct tagKBDTABLE_DESC *PKBDTABLE_DESC;
typedef struct tagKBD_TYPE_INFO *PKBD_TYPE_INFO;
typedef struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 *PKSAC3_DOWNMIX;
typedef struct _91BD25BE856B91F4F94C146E39BAA29E *PKSCOMPONENTID;
typedef struct _DE2D2125000B90024B7DD637FE0DF34E *PKSMUSICFORMAT;
typedef struct _3E8BFD172CC0232DA5E7071EC2A0A89F *PKSNODE_CREATE;
typedef struct _58C2C1BF6568EE28BD9B872E6BA03976 *PKSPIN_CONNECT;
typedef struct _9D2EE2D5E082F56CCDE737471FBF8D82 *PKSQUERYBUFFER;
typedef struct _5B98A3A85E20DBA203FE93F0C6DC9B6B *PKSVPSIZE_PROP;
typedef struct _2E8FF8F0F30DAB89972BBD12E0BA3A8E *PKSWAVE_BUFFER;
typedef struct _436EEAB87169589F8FF54A3E6B966B58 *PKSWAVE_VOLUME;
typedef struct tagKS_FRAME_INFO *PKS_FRAME_INFO;
typedef struct tagLASTINPUTINFO *PLASTINPUTINFO;
typedef struct _30C092ACFDACA2A085242C6994837CA9 *PMCHITTESTINFO;
typedef struct tagMCI_SET_PARMS *PMCI_SET_PARMS;
typedef struct _3D26434F5A7D20980B51C6D4C88FA6DE *PMFT_ENUM_DATA;
typedef struct _MIB_IPADDRROW *PMIB_IPADDRROW;
typedef struct _MIB_IPDESTROW *PMIB_IPDESTROW;
typedef struct _MIB_MFE_TABLE *PMIB_MFE_TABLE;
typedef struct tagMIDIOUTCAPS2A *PMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W *PMIDIOUTCAPS2W;
typedef struct tagMIXERCONTROLA *PMIXERCONTROLA;
typedef struct tagMIXERCONTROLW *PMIXERCONTROLW;
typedef struct _MODEMSETTINGS *PMODEMSETTINGS;
typedef struct tagMONCONVSTRUCT *PMONCONVSTRUCT;
typedef struct tagMONHSZSTRUCTA *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW *PMONHSZSTRUCTW;
typedef struct tagMONLINKSTRUCT *PMONLINKSTRUCT;
typedef struct tagMSGBOXPARAMSA *PMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW *PMSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA *PMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW *PMULTIKEYHELPW;
typedef struct NDIS_BPC_POOL *PNDIS_BPC_POOL;
typedef struct _NETRESOURCE2A *PNETRESOURCE2A;
typedef struct _NETRESOURCE2W *PNETRESOURCE2W;
typedef struct _BEA4C6939D98A17C28446F73864087A3 *PNMCBEENDEDITA;
typedef struct _2E2AA9F03C861A9A9D27DBF19670D54B *PNMCBEENDEDITW;
typedef struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38 *PNMCOMBOBOXEXA;
typedef struct _E76253F876E841F225888AB457FD0286 *PNMCOMBOBOXEXW;
typedef unsigned int POINTER_64_INT;
typedef struct _FC03820C0C9B455049C143518E71A23B *POPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 *POPENCARDNAMEW;
typedef struct pcmwaveformat_tag *PPCMWAVEFORMAT;
typedef struct _PORT_INFO_FFA *PPORT_INFO_FFA;
typedef struct _PORT_INFO_FFW *PPORT_INFO_FFW;
typedef struct _PPP_IPXCP_INFO PPP_IPXCP_INFO;
typedef struct _PPP_NBFCP_INFO PPP_NBFCP_INFO;
typedef struct _PRIVILEGE_SET *PPRIVILEGE_SET;
typedef struct _PROCESSORINFO *PPROCESSORINFO;
typedef struct _PUBLISHERINFO *PPUBLISHERINFO;
typedef struct tagREGISTERWORDA *PREGISTERWORDA;
typedef struct tagREGISTERWORDW *PREGISTERWORDW;
typedef struct _RGNDATAHEADER *PRGNDATAHEADER;
typedef struct _PRINTER_INFO_3 PRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 PRINTER_INFO_6;
typedef struct tagPRINTPAGERANGE PRINTPAGERANGE;
typedef struct _PROTOCOL_INFOA PROTOCOL_INFOA;
typedef struct _PROTOCOL_INFOW PROTOCOL_INFOW;
typedef struct _SCARD_ATRMASK *PSCARD_ATRMASK;
typedef struct tagSCROLLBARINFO *PSCROLLBARINFO;
typedef struct _SERVICE_INFOA *PSERVICE_INFOA;
typedef struct _SERVICE_INFOW *PSERVICE_INFOW;
typedef struct _SOCKADDR_IRDA *PSOCKADDR_IRDA;
typedef struct _TC_GEN_FILTER *PTC_GEN_FILTER;
typedef struct _TOKEN_CONTROL *PTOKEN_CONTROL;
typedef struct _PUBLICKEYSTRUC PUBLICKEYSTRUC;
typedef struct _VK_TO_WCHARS1 *PVK_TO_WCHARS1;
typedef struct _VK_TO_WCHARS2 *PVK_TO_WCHARS2;
typedef struct _VK_TO_WCHARS3 *PVK_TO_WCHARS3;
typedef struct _VK_TO_WCHARS4 *PVK_TO_WCHARS4;
typedef struct _VK_TO_WCHARS5 *PVK_TO_WCHARS5;
typedef struct _VK_TO_WCHARS6 *PVK_TO_WCHARS6;
typedef struct _VK_TO_WCHARS7 *PVK_TO_WCHARS7;
typedef struct _VK_TO_WCHARS8 *PVK_TO_WCHARS8;
typedef struct _VK_TO_WCHARS9 *PVK_TO_WCHARS9;
typedef struct tagWAVEOUTCAPS2A *PWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W *PWAVEOUTCAPS2W;
typedef struct _WCE_IAS_QUERY *PWCE_IAS_QUERY;
typedef struct _WINTRUST_DATA *PWINTRUST_DATA;
typedef struct _WSACOMPLETION *PWSACOMPLETION;
struct PassportWizard;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D QOS_OBJECT_HDR;
typedef struct tagRAWINPUTDEVICE RAWINPUTDEVICE;
typedef struct tagRAWINPUTHEADER RAWINPUTHEADER;
typedef struct _READ_WRITE_MSR READ_WRITE_MSR;
typedef struct tagREBARBANDINFOA REBARBANDINFOA;
typedef struct tagREBARBANDINFOW REBARBANDINFOW;
typedef struct tagSAFEARRAYBOUND SAFEARRAYBOUND;
typedef struct _wireSAFEARRAY_UNION SAFEARRAYUNION;
typedef struct _SCONTEXT_QUEUE SCONTEXT_QUEUE;
typedef int ( *SERVER_ROUTINE)();
typedef struct _SERVICE_STATUS SERVICE_STATUS;
typedef struct _SESSION_BUFFER SESSION_BUFFER;
typedef struct _SESSION_HEADER SESSION_HEADER;
typedef struct _SETRESULT_INFO SETRESULT_INFO;
typedef struct _SFV_SETITEMPOS SFV_SETITEMPOS;
typedef struct _5687B37E6A0F56297A2BB22AF6770AC6 SHELLFLAGSTATE;
typedef struct _SHNAMEMAPPINGA SHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW SHNAMEMAPPINGW;
typedef struct _SOCKET_ADDRESS SOCKET_ADDRESS;
typedef struct _SOURCE_MEDIA_A SOURCE_MEDIA_A;
typedef struct _SOURCE_MEDIA_W SOURCE_MEDIA_W;
typedef struct tagSTATPROPSETSTG STATPROPSETSTG;
typedef struct _SV2CVW2_PARAMS SV2CVW2_PARAMS;
struct SWbemLastError;
struct SWbemMethodSet;
struct SWbemObjectSet;
struct SWbemPrivilege;
struct SWbemQualifier;
struct SWbemRefresher;
typedef struct _SYM_DUMP_PARAM SYM_DUMP_PARAM;
struct ShellNameSpace;
typedef struct _TT_HITTESTINFOA TTHITTESTINFOA;
typedef struct _TT_HITTESTINFOW TTHITTESTINFOW;
typedef struct _UFF_FILEHEADER UFF_FILEHEADER;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef struct _USAGE_AND_PAGE USAGE_AND_PAGE;
struct UserEventTimer;
typedef struct _VK_TO_WCHARS10 VK_TO_WCHARS10;
typedef struct _WCE_DEVICELIST WCE_DEVICELIST;
typedef struct tagWNODE_ALL_DATA WNODE_ALL_DATA;
typedef struct _WSPUPCALLTABLE WSPUPCALLTABLE;
struct XMLHTTPRequest;
typedef struct _ZONEATTRIBUTES ZONEATTRIBUTES;
struct _D3DCOLORVALUE {float r;float g;float b;float a;};
enum _D3DSWAPEFFECT {D3DSWAPEFFECT_DISCARD = 0x1,D3DSWAPEFFECT_FLIP = 0x2,D3DSWAPEFFECT_COPY = 0x3,D3DSWAPEFFECT_COPY_VSYNC = 0x4,D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVERTEXTYPE {D3DVT_VERTEX = 0x1,D3DVT_LVERTEX = 0x2,D3DVT_TLVERTEX = 0x3,D3DVT_FORCE_DWORD = 0x7FFFFFFF,};
struct _LONG_SIZEDARR {unsigned int clSize;unsigned int *pData;};
struct _userSTGMEDIUM {IUnknown *pUnkForRelease;};
typedef unsigned int error_status_t;
struct tagBinaryParam {void *Buffer;short Size;};
enum tagDOMNodeType {NODE_INVALID = 0x0,NODE_ELEMENT = 0x1,NODE_ATTRIBUTE = 0x2,NODE_TEXT = 0x3,NODE_CDATA_SECTION = 0x4,NODE_ENTITY_REFERENCE = 0x5,NODE_ENTITY = 0x6,NODE_PROCESSING_INSTRUCTION = 0x7,NODE_COMMENT = 0x8,NODE_DOCUMENT = 0x9,NODE_DOCUMENT_TYPE = 0xA,NODE_DOCUMENT_FRAGMENT = 0xB,NODE_NOTATION = 0xC,};
enum tagOLELINKBIND {OLELINKBIND_EVENIFCLASSDIFF = 0x1,};
enum tagPENDINGTYPE {PENDINGTYPE_TOPLEVEL = 0x1,PENDINGTYPE_NESTED = 0x2,};
enum tagSTREAM_SEEK {STREAM_SEEK_SET = 0x0,STREAM_SEEK_CUR = 0x1,STREAM_SEEK_END = 0x2,};
enum tagSTRRET_TYPE {STRRET_WSTR = 0x0,STRRET_OFFSET = 0x1,STRRET_CSTR = 0x2,};
enum tagURLTEMPLATE {URLTEMPLATE_CUSTOM = 0x0,URLTEMPLATE_PREDEFINED_MIN = 0x10000,URLTEMPLATE_LOW = 0x10000,URLTEMPLATE_MEDLOW = 0x10500,URLTEMPLATE_MEDIUM = 0x11000,URLTEMPLATE_HIGH = 0x12000,URLTEMPLATE_PREDEFINED_MAX = 0x20000,};
enum tagXFORMCOORDS {XFORMCOORDS_POSITION = 0x1,XFORMCOORDS_SIZE = 0x2,XFORMCOORDS_HIMETRICTOCONTAINER = 0x4,XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8,XFORMCOORDS_EVENTCOMPAT = 0x10,};
enum tag_WBEMSTATUS {WBEM_NO_ERROR = 0x0,WBEM_S_NO_ERROR = 0x0,WBEM_S_SAME = 0x0,WBEM_S_FALSE = 0x1,WBEM_S_ALREADY_EXISTS = 0x40001,WBEM_S_RESET_TO_DEFAULT = 0x40002,WBEM_S_DIFFERENT = 0x40003,WBEM_S_TIMEDOUT = 0x40004,WBEM_S_NO_MORE_DATA = 0x40005,WBEM_S_OPERATION_CANCELLED = 0x40006,WBEM_S_PENDING = 0x40007,WBEM_S_DUPLICATE_OBJECTS = 0x40008,WBEM_S_ACCESS_DENIED = 0x40009,WBEM_S_PARTIAL_RESULTS = 0x40010,WBEM_S_SOURCE_NOT_AVAILABLE = 0x40017,WBEM_E_FAILED = 0x80041001,WBEM_E_NOT_FOUND = 0x80041002,WBEM_E_ACCESS_DENIED = 0x80041003,WBEM_E_PROVIDER_FAILURE = 0x80041004,WBEM_E_TYPE_MISMATCH = 0x80041005,WBEM_E_OUT_OF_MEMORY = 0x80041006,WBEM_E_INVALID_CONTEXT = 0x80041007,WBEM_E_INVALID_PARAMETER = 0x80041008,WBEM_E_NOT_AVAILABLE = 0x80041009,WBEM_E_CRITICAL_ERROR = 0x8004100A,WBEM_E_INVALID_STREAM = 0x8004100B,WBEM_E_NOT_SUPPORTED = 0x8004100C,WBEM_E_INVALID_SUPERCLASS = 0x8004100D,WBEM_E_INVALID_NAMESPACE = 0x8004100E,WBEM_E_INVALID_OBJECT = 0x8004100F,WBEM_E_INVALID_CLASS = 0x80041010,WBEM_E_PROVIDER_NOT_FOUND = 0x80041011,WBEM_E_INVALID_PROVIDER_REGISTRATION = 0x80041012,WBEM_E_PROVIDER_LOAD_FAILURE = 0x80041013,WBEM_E_INITIALIZATION_FAILURE = 0x80041014,WBEM_E_TRANSPORT_FAILURE = 0x80041015,WBEM_E_INVALID_OPERATION = 0x80041016,WBEM_E_INVALID_QUERY = 0x80041017,WBEM_E_INVALID_QUERY_TYPE = 0x80041018,WBEM_E_ALREADY_EXISTS = 0x80041019,WBEM_E_OVERRIDE_NOT_ALLOWED = 0x8004101A,WBEM_E_PROPAGATED_QUALIFIER = 0x8004101B,WBEM_E_PROPAGATED_PROPERTY = 0x8004101C,WBEM_E_UNEXPECTED = 0x8004101D,WBEM_E_ILLEGAL_OPERATION = 0x8004101E,WBEM_E_CANNOT_BE_KEY = 0x8004101F,WBEM_E_INCOMPLETE_CLASS = 0x80041020,WBEM_E_INVALID_SYNTAX = 0x80041021,WBEM_E_NONDECORATED_OBJECT = 0x80041022,WBEM_E_READ_ONLY = 0x80041023,WBEM_E_PROVIDER_NOT_CAPABLE = 0x80041024,WBEM_E_CLASS_HAS_CHILDREN = 0x80041025,WBEM_E_CLASS_HAS_INSTANCES = 0x80041026,WBEM_E_QUERY_NOT_IMPLEMENTED = 0x80041027,WBEM_E_ILLEGAL_NULL = 0x80041028,WBEM_E_INVALID_QUALIFIER_TYPE = 0x80041029,WBEM_E_INVALID_PROPERTY_TYPE = 0x8004102A,WBEM_E_VALUE_OUT_OF_RANGE = 0x8004102B,WBEM_E_CANNOT_BE_SINGLETON = 0x8004102C,WBEM_E_INVALID_CIM_TYPE = 0x8004102D,WBEM_E_INVALID_METHOD = 0x8004102E,WBEM_E_INVALID_METHOD_PARAMETERS = 0x8004102F,WBEM_E_SYSTEM_PROPERTY = 0x80041030,WBEM_E_INVALID_PROPERTY = 0x80041031,WBEM_E_CALL_CANCELLED = 0x80041032,WBEM_E_SHUTTING_DOWN = 0x80041033,WBEM_E_PROPAGATED_METHOD = 0x80041034,WBEM_E_UNSUPPORTED_PARAMETER = 0x80041035,WBEM_E_MISSING_PARAMETER_ID = 0x80041036,WBEM_E_INVALID_PARAMETER_ID = 0x80041037,WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = 0x80041038,WBEM_E_PARAMETER_ID_ON_RETVAL = 0x80041039,WBEM_E_INVALID_OBJECT_PATH = 0x8004103A,WBEM_E_OUT_OF_DISK_SPACE = 0x8004103B,WBEM_E_BUFFER_TOO_SMALL = 0x8004103C,WBEM_E_UNSUPPORTED_PUT_EXTENSION = 0x8004103D,WBEM_E_UNKNOWN_OBJECT_TYPE = 0x8004103E,WBEM_E_UNKNOWN_PACKET_TYPE = 0x8004103F,WBEM_E_MARSHAL_VERSION_MISMATCH = 0x80041040,WBEM_E_MARSHAL_INVALID_SIGNATURE = 0x80041041,WBEM_E_INVALID_QUALIFIER = 0x80041042,WBEM_E_INVALID_DUPLICATE_PARAMETER = 0x80041043,WBEM_E_TOO_MUCH_DATA = 0x80041044,WBEM_E_SERVER_TOO_BUSY = 0x80041045,WBEM_E_INVALID_FLAVOR = 0x80041046,WBEM_E_CIRCULAR_REFERENCE = 0x80041047,WBEM_E_UNSUPPORTED_CLASS_UPDATE = 0x80041048,WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = 0x80041049,WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = 0x80041050,WBEM_E_TOO_MANY_PROPERTIES = 0x80041051,WBEM_E_UPDATE_TYPE_MISMATCH = 0x80041052,WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = 0x80041053,WBEM_E_UPDATE_PROPAGATED_METHOD = 0x80041054,WBEM_E_METHOD_NOT_IMPLEMENTED = 0x80041055,WBEM_E_METHOD_DISABLED = 0x80041056,WBEM_E_REFRESHER_BUSY = 0x80041057,WBEM_E_UNPARSABLE_QUERY = 0x80041058,WBEM_E_NOT_EVENT_CLASS = 0x80041059,WBEM_E_MISSING_GROUP_WITHIN = 0x8004105A,WBEM_E_MISSING_AGGREGATION_LIST = 0x8004105B,WBEM_E_PROPERTY_NOT_AN_OBJECT = 0x8004105C,WBEM_E_AGGREGATING_BY_OBJECT = 0x8004105D,WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = 0x8004105F,WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = 0x80041060,WBEM_E_QUEUE_OVERFLOW = 0x80041061,WBEM_E_PRIVILEGE_NOT_HELD = 0x80041062,WBEM_E_INVALID_OPERATOR = 0x80041063,WBEM_E_LOCAL_CREDENTIALS = 0x80041064,WBEM_E_CANNOT_BE_ABSTRACT = 0x80041065,WBEM_E_AMENDED_OBJECT = 0x80041066,WBEM_E_CLIENT_TOO_SLOW = 0x80041067,WBEM_E_NULL_SECURITY_DESCRIPTOR = 0x80041068,WBEM_E_TIMED_OUT = 0x80041069,WBEM_E_INVALID_ASSOCIATION = 0x8004106A,WBEM_E_AMBIGUOUS_OPERATION = 0x8004106B,WBEM_E_QUOTA_VIOLATION = 0x8004106C,WBEM_E_RESERVED_001 = 0x8004106D,WBEM_E_RESERVED_002 = 0x8004106E,WBEM_E_UNSUPPORTED_LOCALE = 0x8004106F,WBEM_E_HANDLE_OUT_OF_DATE = 0x80041070,WBEM_E_CONNECTION_FAILED = 0x80041071,WBEM_E_INVALID_HANDLE_REQUEST = 0x80041072,WBEM_E_PROPERTY_NAME_TOO_WIDE = 0x80041073,WBEM_E_CLASS_NAME_TOO_WIDE = 0x80041074,WBEM_E_METHOD_NAME_TOO_WIDE = 0x80041075,WBEM_E_QUALIFIER_NAME_TOO_WIDE = 0x80041076,WBEM_E_RERUN_COMMAND = 0x80041077,WBEM_E_DATABASE_VER_MISMATCH = 0x80041078,WBEM_E_VETO_DELETE = 0x80041079,WBEM_E_VETO_PUT = 0x8004107A,WBEM_E_INVALID_LOCALE = 0x80041080,WBEM_E_PROVIDER_SUSPENDED = 0x80041081,WBEM_E_SYNCHRONIZATION_REQUIRED = 0x80041082,WBEM_E_NO_SCHEMA = 0x80041083,WBEM_E_PROVIDER_ALREADY_REGISTERED = 0x80041084,WBEM_E_PROVIDER_NOT_REGISTERED = 0x80041085,WBEM_E_FATAL_TRANSPORT_ERROR = 0x80041086,WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = 0x80041087,WBEM_E_PROVIDER_TIMED_OUT = 0x80041088,WBEM_E_NO_KEY = 0x80041089,WBEM_E_PROVIDER_DISABLED = 0x8004108A,WBEMESS_E_REGISTRATION_TOO_BROAD = 0x80042001,WBEMESS_E_REGISTRATION_TOO_PRECISE = 0x80042002,WBEMESS_E_AUTHZ_NOT_PRIVILEGED = 0x80042003,WBEMMOF_E_EXPECTED_QUALIFIER_NAME = 0x80044001,WBEMMOF_E_EXPECTED_SEMI = 0x80044002,WBEMMOF_E_EXPECTED_OPEN_BRACE = 0x80044003,WBEMMOF_E_EXPECTED_CLOSE_BRACE = 0x80044004,WBEMMOF_E_EXPECTED_CLOSE_BRACKET = 0x80044005,WBEMMOF_E_EXPECTED_CLOSE_PAREN = 0x80044006,WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = 0x80044007,WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = 0x80044008,WBEMMOF_E_EXPECTED_OPEN_PAREN = 0x80044009,WBEMMOF_E_UNRECOGNIZED_TOKEN = 0x8004400A,WBEMMOF_E_UNRECOGNIZED_TYPE = 0x8004400B,WBEMMOF_E_EXPECTED_PROPERTY_NAME = 0x8004400C,WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = 0x8004400D,WBEMMOF_E_UNEXPECTED_ALIAS = 0x8004400E,WBEMMOF_E_UNEXPECTED_ARRAY_INIT = 0x8004400F,WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = 0x80044010,WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = 0x80044011,WBEMMOF_E_INVALID_PRAGMA = 0x80044012,WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = 0x80044013,WBEMMOF_E_EXPECTED_CLASS_NAME = 0x80044014,WBEMMOF_E_TYPE_MISMATCH = 0x80044015,WBEMMOF_E_EXPECTED_ALIAS_NAME = 0x80044016,WBEMMOF_E_INVALID_CLASS_DECLARATION = 0x80044017,WBEMMOF_E_INVALID_INSTANCE_DECLARATION = 0x80044018,WBEMMOF_E_EXPECTED_DOLLAR = 0x80044019,WBEMMOF_E_CIMTYPE_QUALIFIER = 0x8004401A,WBEMMOF_E_DUPLICATE_PROPERTY = 0x8004401B,WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = 0x8004401C,WBEMMOF_E_OUT_OF_RANGE = 0x8004401D,WBEMMOF_E_INVALID_FILE = 0x8004401E,WBEMMOF_E_ALIASES_IN_EMBEDDED = 0x8004401F,WBEMMOF_E_NULL_ARRAY_ELEM = 0x80044020,WBEMMOF_E_DUPLICATE_QUALIFIER = 0x80044021,WBEMMOF_E_EXPECTED_FLAVOR_TYPE = 0x80044022,WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = 0x80044023,WBEMMOF_E_MULTIPLE_ALIASES = 0x80044024,WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = 0x80044025,WBEMMOF_E_NO_ARRAYS_RETURNED = 0x80044026,WBEMMOF_E_MUST_BE_IN_OR_OUT = 0x80044027,WBEMMOF_E_INVALID_FLAGS_SYNTAX = 0x80044028,WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = 0x80044029,WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = 0x8004402A,WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = 0x8004402B,WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = 0x8004402C,WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = 0x8004402D,WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = 0x8004402E,WBEMMOF_E_ERROR_CREATING_TEMP_FILE = 0x8004402F,WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = 0x80044030,WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = 0x80044031,};
typedef struct _userCLIPFORMAT userCLIPFORMAT;
typedef struct tagACCESSTIMEOUT ACCESSTIMEOUT;
typedef struct _ACTION_HEADER ACTION_HEADER;
typedef struct _AD_GUARANTEED AD_GUARANTEED;
typedef struct tagANIMATIONINFO ANIMATIONINFO;
typedef struct _90E769FB438B6A83B49CA07EC4EB3EFA AVIINDEXENTRY;
struct AsyncIMultiQI {struct AsyncIMultiQIVtbl *lpVtbl;};
struct AsyncIUnknown {struct AsyncIUnknownVtbl *lpVtbl;};
typedef struct _BDA_PID_UNMAP BDA_PID_UNMAP;
typedef struct _BLENDFUNCTION BLENDFUNCTION;
typedef struct _BYTE_SIZEDARR BYTE_SIZEDARR;
typedef struct tagCANDIDATEFORM CANDIDATEFORM;
typedef struct tagCANDIDATEINFO CANDIDATEINFO;
typedef struct tagCANDIDATELIST CANDIDATELIST;
typedef struct tagCapDriverCaps CAPDRIVERCAPS;
typedef struct tagCAPROPVARIANT CAPROPVARIANT;
typedef struct __MIDL___MIDL_itf_shobjidl_0211_0003 CATEGORY_INFO;
typedef struct _CAT_NAMEVALUE CAT_NAMEVALUE;
typedef struct _CERT_RDN_ATTR CERT_RDN_ATTR;
typedef struct _CMC_DATA_INFO CMC_DATA_INFO;
typedef struct _CMC_PEND_INFO CMC_PEND_INFO;
typedef struct CM_Power_Data_s CM_POWER_DATA;
typedef struct tagCREATESTRUCTA CREATESTRUCTA;
typedef struct tagCREATESTRUCTW CREATESTRUCTW;
typedef struct _D3DCLIPSTATUS D3DCLIPSTATUS;
typedef struct _D3DCOLORVALUE D3DCOLORVALUE;
typedef struct _D3DDeviceDesc D3DDEVICEDESC;
typedef struct _D3DHAL_DP2EXT D3DHAL_DP2EXT;
typedef struct _D3DLOCKED_BOX D3DLOCKED_BOX;
typedef struct _D3DMATRIXLOAD D3DMATRIXLOAD;
typedef struct _D3DPICKRECORD D3DPICKRECORD;
typedef struct _41B57DF5617420B0F03CF260623C53E1 DDHALDDRAWFNS;
typedef struct _DDHALMODEINFO DDHALMODEINFO;
typedef struct _DDHAL_BLTDATA DDHAL_BLTDATA;
typedef struct _DDLOCKOUTINFO DDLOCKOUTINFO;
typedef struct _DDMONITORINFO DDMONITORINFO;
typedef struct _DDPIXELFORMAT DDPIXELFORMAT;
typedef struct _DDSURFACEDATA DDSURFACEDATA;
typedef struct _DDSURFACEDESC DDSURFACEDESC;
typedef struct _AA58E045DEB5C5C814AE34C120D7C43C DDVERSIONDATA;
typedef struct _DD_ATTACHLIST DD_ATTACHLIST;
typedef struct _DD_HALINFO_V4 DD_HALINFO_V4;
typedef struct _DD_STEREOMODE DD_STEREOMODE;
typedef struct _DD_UNLOCKDATA DD_UNLOCKDATA;
typedef struct tagDEBUGHOOKINFO DEBUGHOOKINFO;
typedef struct _PUBKEYVER3 DHPUBKEY_VER3;
typedef struct _DISK_GEOMETRY DISK_GEOMETRY;
typedef struct _DMUS_PORTCAPS DMUS_PORTCAPS;
typedef struct _DMUS_WAVEDATA DMUS_WAVEDATA;
typedef struct drmwaveformat_tag DRMWAVEFORMAT;
typedef struct tagDRVCONFIGINFO DRVCONFIGINFO;
typedef struct tagDRVENABLEDATA DRVENABLEDATA;
typedef struct _DSBUFFERDESC1 DSBUFFERDESC1;
typedef struct _DSCBUFFERDESC DSCBUFFERDESC;
typedef struct _DSCEFFECTDESC DSCEFFECTDESC;
enum DVBSystemType {DVB_Cable = 0x0,DVB_Terrestrial = 0x1,DVB_Satellite = 0x2,};
typedef struct _EFS_HASH_BLOB EFS_HASH_BLOB;
typedef struct tagEMRALPHABLEND EMRALPHABLEND;
typedef struct tagEMREXTESCAPE EMRDRAWESCAPE;
typedef struct tagEMRGDICOMMENT EMRGDICOMMENT;
typedef struct tagEMRPOLYLINE EMRPOLYBEZIER;
typedef struct tagEMRPOLYDRAW16 EMRPOLYDRAW16;
typedef struct tagEMRPOLYLINE16 EMRPOLYLINE16;
typedef struct tagEMRPOLYLINE EMRPOLYLINETO;
typedef struct tagEMRSETTEXTCOLOR EMRSETBKCOLOR;
typedef struct tagEMRSELECTCLIPPATH EMRSETICMMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETMAPMODE;
typedef struct tagABORTPATH EMRSETMETARGN;
typedef struct tagEMRSTRETCHBLT EMRSTRETCHBLT;
typedef struct tagEMRFILLPATH EMRSTROKEPATH;
typedef struct tagENHMETAHEADER ENHMETAHEADER;
typedef struct tagENHMETARECORD ENHMETARECORD;
typedef struct _EXTSTACKTRACE EXTSTACKTRACE;
typedef struct _EXTTEXTMETRIC EXTTEXTMETRIC;
typedef struct _FILE_PREFETCH FILE_PREFETCH;
typedef struct tagFONTSIGNATURE FONTSIGNATURE;
typedef struct _GDI_NONREMOTE GDI_NONREMOTE;
typedef struct _GRADIENT_RECT GRADIENT_RECT;
typedef struct tagGUITHREADINFO GUITHREADINFO;
enum GuardInterval {BDA_GUARD_NOT_SET = 0xFFFFFFFF,BDA_GUARD_NOT_DEFINED = 0x0,BDA_GUARD_1_32 = 0x1,BDA_GUARD_1_16 = 0x2,BDA_GUARD_1_8 = 0x3,BDA_GUARD_1_4 = 0x4,BDA_GUARD_MAX = 0x5,};
typedef struct tagHARDWAREINPUT HARDWAREINPUT;
struct HCOLORSPACE__ {int unused;};
typedef struct _HD_HITTESTINFO HDHITTESTINFO;
typedef struct _HEAPALIASINFO HEAPALIASINFO;
typedef struct _HEAPALIGNMENT HEAPALIGNMENT;
typedef struct tagHIGHCONTRASTA HIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW HIGHCONTRASTW;
typedef void *HMETAFILEPICT;
typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct IAVIStreaming {struct IAVIStreamingVtbl *lpVtbl;};
struct IAdviseSinkEx {struct IAdviseSinkExVtbl *lpVtbl;};
struct IAsyncManager {struct IAsyncManagerVtbl *lpVtbl;};
struct IAuthenticate {struct IAuthenticateVtbl *lpVtbl;};
struct IAutoComplete {struct IAutoCompleteVtbl *lpVtbl;};
struct IBindProtocol {struct IBindProtocolVtbl *lpVtbl;};
struct IBlockingLock {struct IBlockingLockVtbl *lpVtbl;};
typedef struct _76E0DBF45CB9E280DCDAD06E7D8FE87F ICDRAWSUGGEST;
struct IClassFactory {struct IClassFactoryVtbl *lpVtbl;};
struct IContextMenu2 {struct IContextMenu2Vtbl *lpVtbl;};
struct IContextMenu3 {struct IContextMenu3Vtbl *lpVtbl;};
struct IDefViewFrame {struct IDefViewFrameVtbl *lpVtbl;};
struct IDirectMusic8 {struct IDirectMusic8Vtbl *lpVtbl;};
struct IDirectSound8 {struct IDirectSound8Vtbl *lpVtbl;};
struct IEnumACString {struct IEnumACStringVtbl *lpVtbl;};
struct IEnumSTATDATA {struct IEnumSTATDATAVtbl *lpVtbl;};
struct IExtractIconA {struct IExtractIconAVtbl *lpVtbl;};
struct IExtractIconW {struct IExtractIconWVtbl *lpVtbl;};
struct IExtractImage {struct IExtractImageVtbl *lpVtbl;};
struct IFolderFilter {struct IFolderFilterVtbl *lpVtbl;};
struct IFolderViewOC {struct IFolderViewOCVtbl *lpVtbl;};
struct IHttpSecurity {struct IHttpSecurityVtbl *lpVtbl;};
typedef struct tagINTERFACEDATA INTERFACEDATA;
typedef struct tagINTERFACEINFO INTERFACEINFO;
struct IObjectSafety {struct IObjectSafetyVtbl *lpVtbl;};
struct IOleContainer {struct IOleContainerVtbl *lpVtbl;};
struct IPrintCoreUI2 {struct IPrintCoreUI2Vtbl *lpVtbl;};
struct IPropertyBag2 {struct IPropertyBag2Vtbl *lpVtbl;};
struct IPropertyPage {struct IPropertyPageVtbl *lpVtbl;};
struct IRunnableTask {struct IRunnableTaskVtbl *lpVtbl;};
struct ISWbemLocator {struct ISWbemLocatorVtbl *lpVtbl;};
struct IShellBrowser {struct IShellBrowserVtbl *lpVtbl;};
struct IShellDetails {struct IShellDetailsVtbl *lpVtbl;};
struct IShellExtInit {struct IShellExtInitVtbl *lpVtbl;};
struct IShellFolder2 {struct IShellFolder2Vtbl *lpVtbl;};
struct IShellWindows {struct IShellWindowsVtbl *lpVtbl;};
struct ITaskbarList2 {struct ITaskbarList2Vtbl *lpVtbl;};
typedef struct _IUNKNOWN_LIST IUNKNOWN_LIST;
struct IViewObjectEx {struct IViewObjectExVtbl *lpVtbl;};
struct IWaitMultiple {struct IWaitMultipleVtbl *lpVtbl;};
struct IWbemServices {struct IWbemServicesVtbl *lpVtbl;};
struct IWbemShutdown {struct IWbemShutdownVtbl *lpVtbl;};
struct IXMLAttribute {struct IXMLAttributeVtbl *lpVtbl;};
struct IXMLDOMEntity {struct IXMLDOMEntityVtbl *lpVtbl;};
struct IXMLDocument2 {struct IXMLDocument2Vtbl *lpVtbl;};
typedef struct _JOB_SET_ARRAY JOB_SET_ARRAY;
typedef struct tagKBDTABLE_DESC KBDTABLE_DESC;
typedef struct tagKBD_TYPE_INFO KBD_TYPE_INFO;
typedef struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 KSAC3_DOWNMIX;
typedef struct _91BD25BE856B91F4F94C146E39BAA29E KSCOMPONENTID;
typedef struct _DE2D2125000B90024B7DD637FE0DF34E KSMUSICFORMAT;
typedef struct _3E8BFD172CC0232DA5E7071EC2A0A89F KSNODE_CREATE;
typedef struct _58C2C1BF6568EE28BD9B872E6BA03976 KSPIN_CONNECT;
typedef struct _9D2EE2D5E082F56CCDE737471FBF8D82 KSQUERYBUFFER;
typedef struct _5B98A3A85E20DBA203FE93F0C6DC9B6B KSVPSIZE_PROP;
typedef struct _2E8FF8F0F30DAB89972BBD12E0BA3A8E KSWAVE_BUFFER;
typedef struct _436EEAB87169589F8FF54A3E6B966B58 KSWAVE_VOLUME;
typedef struct tagKS_FRAME_INFO KS_FRAME_INFO;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef struct tagLASTINPUTINFO LASTINPUTINFO;
typedef IAdviseSink2 *LPADVISESINK2;
typedef struct _AFPROTOCOLS *LPAFPROTOCOLS;
typedef struct _browseinfoA *LPBROWSEINFOA;
typedef struct _browseinfoW *LPBROWSEINFOW;
typedef ICatRegister *LPCATREGISTER;
typedef struct tagCHARSETINFO *LPCHARSETINFO;
typedef struct tagCHOOSEFONTA *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW *LPCHOOSEFONTW;
typedef ICodeInstall *LPCODEINSTALL;
typedef struct tagCOLORSCHEME *LPCOLORSCHEME;
typedef struct tagCONNECTDATA *LPCONNECTDATA;
typedef IContextMenu *LPCONTEXTMENU;
typedef struct tagCONTROLINFO *LPCONTROLINFO;
typedef struct _CSADDR_INFO *LPCSADDR_INFO;
typedef struct tagCURSORSHAPE *LPCURSORSHAPE;
typedef struct _D3DMATERIAL *LPD3DMATERIAL;
typedef struct _D3DPrimCaps *LPD3DPRIMCAPS;
typedef struct _D3DTLVERTEX *LPD3DTLVERTEX;
typedef struct _D3DTRIANGLE *LPD3DTRIANGLE;
typedef struct _D3DVIEWPORT *LPD3DVIEWPORT;
typedef struct _DEBUG_EVENT *LPDEBUG_EVENT;
typedef struct IDirectDraw2 *LPDIRECTDRAW2;
typedef struct IDirectDraw4 *LPDIRECTDRAW4;
typedef struct IDirectDraw7 *LPDIRECTDRAW7;
typedef IDirectMusic *LPDIRECTMUSIC;
typedef struct IDirectSound *LPDIRECTSOUND;
typedef struct _DMUS_WAVEDL *LPDMUS_WAVEDL;
typedef struct _DOC_INFO_1A *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W *LPDOC_INFO_1W;
typedef struct _DOC_INFO_2A *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W *LPDOC_INFO_2W;
typedef struct _DOC_INFO_3A *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W *LPDOC_INFO_3W;
typedef struct _CFDE79073F41BFFF7E06FED73F276E8B *LPDRAWDIBTIME;
typedef struct _DSFXFlanger *LPDSFXFlanger;
typedef struct _DSFXParamEq *LPDSFXParamEq;
typedef IEnumMoniker *LPENUMMONIKER;
typedef IEnumOLEVERB *LPENUMOLEVERB;
typedef IEnumSTATSTG *LPENUMSTATSTG;
typedef IEnumUnknown *LPENUMUNKNOWN;
typedef IEnumVARIANT *LPENUMVARIANT;
typedef struct tagEVENTMSG *LPEVENTMSGMSG;
typedef struct _078929F8CD96C82DFB2B0B82CFD86124 *LPEXP_SZ_LINK;
typedef struct tagEXTLOGFONTA *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *LPEXTLOGFONTW;
typedef struct tagEXTRASEARCH *LPEXTRASEARCH;
typedef IFileViewerA *LPFILEVIEWERA;
typedef IFileViewerW *LPFILEVIEWERW;
typedef int *LPFXPT16DOT16;
typedef struct tagHANDLETABLE *LPHANDLETABLE;
typedef struct _JOB_INFO_1A *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W *LPJOB_INFO_1W;
typedef struct _JOB_INFO_2A *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W *LPJOB_INFO_2W;
typedef struct tagKERNINGPAIR *LPKERNINGPAIR;
typedef struct tagMDINEXTMENU *LPMDINEXTMENU;
typedef struct tagMENUBARINFO *LPMENUBARINFO;
typedef struct tagMIDIINCAPSA *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *LPMIDIINCAPSW;
typedef struct tagMIXERCAPS2A *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W *LPMIXERCAPS2W;
typedef IMonikerProp *LPMONIKERPROP;
typedef struct tagMONITORINFO *LPMONITORINFO;
typedef struct tagNMBCHOTITEM *LPNMBCHOTITEM;
typedef struct tagNMIPADDRESS *LPNMIPADDRESS;
typedef struct tagLVKEYDOWN *LPNMLVKEYDOWN;
typedef struct tagNMPGHOTITEM *LPNMPGHOTITEM;
typedef struct tagNMSELCHANGE *LPNMSELCHANGE;
typedef struct tagNMTBHOTITEM *LPNMTBHOTITEM;
typedef struct tagNMTBRESTORE *LPNMTBRESTORE;
typedef struct tagNMTREEVIEWA *LPNMTREEVIEWA;
typedef struct tagNMTREEVIEWW *LPNMTREEVIEWW;
typedef struct tagTVKEYDOWN *LPNMTVKEYDOWN;
typedef struct _NSP_ROUTINE *LPNSP_ROUTINE;
typedef struct tagOCPFIPARAMS *LPOCPFIPARAMS;
typedef struct _OFNOTIFYEXA *LPOFNOTIFYEXA;
typedef struct _OFNOTIFYEXW *LPOFNOTIFYEXW;
typedef IOleDocument *LPOLEDOCUMENT;
typedef IOleUndoUnit *LPOLEUNDOUNIT;
typedef struct tagPAINTSTRUCT *LPPAINTSTRUCT;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
typedef IPersistFile *LPPERSISTFILE;
typedef IPictureDisp *LPPICTUREDISP;
typedef struct tagPDEXA *LPPRINTDLGEXA;
typedef struct tagPDEXW *LPPRINTDLGEXW;
typedef IPropertyBag *LPPROPERTYBAG;
typedef struct tagPROPVARIANT *LPPROPVARIANT;
typedef struct _QOS_SD_MODE *LPQOS_SD_MODE;
typedef struct tagRAWKEYBOARD *LPRAWKEYBOARD;
typedef IRootStorage *LPROOTSTORAGE;
typedef struct _RSVP_ADSPEC *LPRSVP_ADSPEC;
typedef struct _RSVP_POLICY *LPRSVP_POLICY;
typedef struct tagSERIALKEYSA *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW *LPSERIALKEYSW;
typedef struct _BE0BDAB4463CDAC89A1FD071673BF7FC *LPSHDRAGIMAGE;
typedef IShellFolder *LPSHELLFOLDER;
typedef struct _B860A2A409E82E290A04B87FD69A6FE2 *LPSHELLSTATEA;
typedef struct _B860A2A409E82E290A04B87FD69A6FE2 *LPSHELLSTATEW;
typedef struct sockaddr_in *LPSOCKADDR_IN;
typedef struct tagSOFTKBDDATA *LPSOFTKBDDATA;
typedef struct tagSTYLESTRUCT *LPSTYLESTRUCT;
typedef struct _SYSTEM_INFO *LPSYSTEM_INFO;
typedef struct tagTBADDBITMAP *LPTBADDBITMAP;
typedef struct tagTEXTMETRICA *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW *LPTEXTMETRICW;
typedef struct tagTTPOLYCURVE *LPTTPOLYCURVE;
typedef struct tagTOOLINFOA *LPTTTOOLINFOA;
typedef struct tagTOOLINFOW *LPTTTOOLINFOW;
typedef IViewObject2 *LPVIEWOBJECT2;
typedef struct tagWAVEINCAPSA *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *LPWAVEINCAPSW;
typedef IWinInetInfo *LPWININETINFO;
typedef struct tagWNDCLASSEXA *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *LPWNDCLASSEXW;
typedef struct _WSATHREADID *LPWSATHREADID;
typedef struct tagLVHITTESTINFO LVHITTESTINFO;
enum MACRO_ADDRESS {ADDRESS_TAG_BIT = 0x80000000,};
enum MACRO_AD_FLAG {AD_FLAG_BREAK_BIT = 0x1,};
enum MACRO_ALERTSZ {ALERTSZ = 128,};
enum MACRO_ALG_SID {ALG_SID_RC2 = 2,ALG_SID_RC4 = 1,ALG_SID_SEAL = 2,ALG_SID_DH_SANDF = 1,ALG_SID_DH_EPHEM = 2,ALG_SID_AGREED_KEY_ANY = 3,ALG_SID_KEA = 4,ALG_SID_MD2 = 1,ALG_SID_MD4 = 2,ALG_SID_MD5 = 3,ALG_SID_SHA = 4,ALG_SID_SHA1 = 4,ALG_SID_MAC = 5,ALG_SID_RIPEMD = 6,ALG_SID_RIPEMD160 = 7,ALG_SID_SSL3SHAMD5 = 8,ALG_SID_HMAC = 9,ALG_SID_TLS1PRF = 10,ALG_SID_HASH_REPLACE_OWF = 11,ALG_SID_SHA_256 = 12,ALG_SID_SHA_384 = 13,ALG_SID_SHA_512 = 14,ALG_SID_SSL3_MASTER = 1,ALG_SID_SCHANNEL_MASTER_HASH = 2,ALG_SID_SCHANNEL_MAC_KEY = 3,ALG_SID_PCT1_MASTER = 4,ALG_SID_SSL2_MASTER = 5,ALG_SID_TLS1_MASTER = 6,ALG_SID_SCHANNEL_ENC_KEY = 7,ALG_SID_EXAMPLE = 80,};
enum MACRO_ALLOWED {ALLOWED_TO_SEND_DATA = 50001,};
enum MACRO_ANYSIZE {ANYSIZE_ARRAY = 1,};
enum MACRO_ASPECTX {ASPECTX = 40,};
enum MACRO_ASPECTY {ASPECTY = 42,};
enum MACRO_AUXCAPS {AUXCAPS_CDAUDIO = 1,AUXCAPS_AUXIN = 2,AUXCAPS_VOLUME = 1,AUXCAPS_LRVOLUME = 2,};
enum MACRO_BATTERY {BATTERY_FLAG_HIGH = 0x1,BATTERY_FLAG_LOW = 0x2,BATTERY_FLAG_CRITICAL = 0x4,BATTERY_FLAG_CHARGING = 0x8,BATTERY_FLAG_NO_BATTERY = 0x80,BATTERY_FLAG_UNKNOWN = 0xFF,BATTERY_PERCENTAGE_UNKNOWN = 0xFF,BATTERY_LIFE_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_BI_1632 {BI_1632 = 0x32333631,};
enum MACRO_BOOTING {BOOTING_IN_SAFEMODE_MINIMAL = 0xA8,BOOTING_IN_SAFEMODE_NETWORK = 0xA9,BOOTING_IN_SAFEMODE_DSREPAIR = 0xAA,};
enum MACRO_BOOTLOG {BOOTLOG_LOADED = 0xB5,BOOTLOG_NOT_LOADED = 0xB6,BOOTLOG_ENABLED = 0xB7,};
enum MACRO_BOUNDED {BOUNDED_ECP = 0x80,};
enum MACRO_BST_HOT {BST_HOT = 0x200,};
enum MACRO_BUGCODE {BUGCODE_ID_DRIVER = 0x40000080,};
enum MACRO_CACHE_S {CACHE_S_FORMATETC_NOTSUPPORTED = 0x40170,CACHE_S_SAMECACHE = 0x40171,CACHE_S_SOMECACHES_NOTUPDATED = 0x40172,};
enum MACRO_CAPABLE {RECEIVE_TIME_INDICATION_CAPABLE = 0x8,TIMED_SEND_CAPABLE = 0x10,TIME_STAMP_CAPABLE = 0x20,};
enum MACRO_CDB2GVF {CDB2GVF_SHOWALLFILES = 0x1,};
enum MACRO_CEDILLA {CEDILLA = 0x327,};
enum MACRO_CERTSRV {CERTSRV_E_BAD_REQUESTSUBJECT = 0x80094001,CERTSRV_E_NO_REQUEST = 0x80094002,CERTSRV_E_BAD_REQUESTSTATUS = 0x80094003,CERTSRV_E_PROPERTY_EMPTY = 0x80094004,CERTSRV_E_INVALID_CA_CERTIFICATE = 0x80094005,CERTSRV_E_SERVER_SUSPENDED = 0x80094006,CERTSRV_E_ENCODING_LENGTH = 0x80094007,CERTSRV_E_ROLECONFLICT = 0x80094008,CERTSRV_E_RESTRICTEDOFFICER = 0x80094009,CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = 0x8009400A,CERTSRV_E_NO_VALID_KRA = 0x8009400B,CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = 0x8009400C,CERTSRV_E_NO_CAADMIN_DEFINED = 0x8009400D,CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = 0x8009400E,CERTSRV_E_NO_DB_SESSIONS = 0x8009400F,CERTSRV_E_ALIGNMENT_FAULT = 0x80094010,CERTSRV_E_ENROLL_DENIED = 0x80094011,CERTSRV_E_TEMPLATE_DENIED = 0x80094012,CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE = 0x80094013,CERTSRV_E_UNSUPPORTED_CERT_TYPE = 0x80094800,CERTSRV_E_NO_CERT_TYPE = 0x80094801,CERTSRV_E_TEMPLATE_CONFLICT = 0x80094802,CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = 0x80094803,CERTSRV_E_ARCHIVED_KEY_REQUIRED = 0x80094804,CERTSRV_E_SMIME_REQUIRED = 0x80094805,CERTSRV_E_BAD_RENEWAL_SUBJECT = 0x80094806,CERTSRV_E_BAD_TEMPLATE_VERSION = 0x80094807,CERTSRV_E_TEMPLATE_POLICY_REQUIRED = 0x80094808,CERTSRV_E_SIGNATURE_POLICY_REQUIRED = 0x80094809,CERTSRV_E_SIGNATURE_COUNT = 0x8009480A,CERTSRV_E_SIGNATURE_REJECTED = 0x8009480B,CERTSRV_E_ISSUANCE_POLICY_REQUIRED = 0x8009480C,CERTSRV_E_SUBJECT_UPN_REQUIRED = 0x8009480D,CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = 0x8009480E,CERTSRV_E_SUBJECT_DNS_REQUIRED = 0x8009480F,CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = 0x80094810,CERTSRV_E_KEY_LENGTH = 0x80094811,CERTSRV_E_SUBJECT_EMAIL_REQUIRED = 0x80094812,CERTSRV_E_UNKNOWN_CERT_TYPE = 0x80094813,CERTSRV_E_CERT_TYPE_OVERLAP = 0x80094814,};
enum MACRO_CERT_ID {CERT_ID_ISSUER_SERIAL_NUMBER = 1,CERT_ID_KEY_IDENTIFIER = 2,CERT_ID_SHA1_HASH = 3,};
enum MACRO_CF_NULL {CF_NULL = 0,CFSTR_MIME_NULL = 0,};
enum MACRO_CHANGER {CHANGER_BAR_CODE_SCANNER_INSTALLED = 0x1,CHANGER_INIT_ELEM_STAT_WITH_RANGE = 0x2,CHANGER_CLOSE_IEPORT = 0x4,CHANGER_OPEN_IEPORT = 0x8,CHANGER_STATUS_NON_VOLATILE = 0x10,CHANGER_EXCHANGE_MEDIA = 0x20,CHANGER_CLEANER_SLOT = 0x40,CHANGER_LOCK_UNLOCK = 0x80,CHANGER_CARTRIDGE_MAGAZINE = 0x100,CHANGER_MEDIUM_FLIP = 0x200,CHANGER_POSITION_TO_ELEMENT = 0x400,CHANGER_REPORT_IEPORT_STATE = 0x800,CHANGER_STORAGE_DRIVE = 0x1000,CHANGER_STORAGE_IEPORT = 0x2000,CHANGER_STORAGE_SLOT = 0x4000,CHANGER_STORAGE_TRANSPORT = 0x8000,CHANGER_DRIVE_CLEANING_REQUIRED = 0x10000,CHANGER_PREDISMOUNT_EJECT_REQUIRED = 0x20000,CHANGER_CLEANER_ACCESS_NOT_VALID = 0x40000,CHANGER_PREMOUNT_EJECT_REQUIRED = 0x80000,CHANGER_VOLUME_IDENTIFICATION = 0x100000,CHANGER_VOLUME_SEARCH = 0x200000,CHANGER_VOLUME_ASSERT = 0x400000,CHANGER_VOLUME_REPLACE = 0x800000,CHANGER_VOLUME_UNDEFINE = 0x1000000,CHANGER_SERIAL_NUMBER_VALID = 0x4000000,CHANGER_DEVICE_REINITIALIZE_CAPABLE = 0x8000000,CHANGER_KEYPAD_ENABLE_DISABLE = 0x10000000,CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS = 0x20000000,CHANGER_RESERVED_BIT = 0x80000000,CHANGER_PREDISMOUNT_ALIGN_TO_SLOT = 0x80000001,CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE = 0x80000002,CHANGER_CLEANER_AUTODISMOUNT = 0x80000004,CHANGER_TRUE_EXCHANGE_CAPABLE = 0x80000008,CHANGER_SLOTS_USE_TRAYS = 0x80000010,CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR = 0x80000020,CHANGER_CLEANER_OPS_NOT_SUPPORTED = 0x80000040,CHANGER_IEPORT_USER_CONTROL_OPEN = 0x80000080,CHANGER_IEPORT_USER_CONTROL_CLOSE = 0x80000100,CHANGER_MOVE_EXTENDS_IEPORT = 0x80000200,CHANGER_MOVE_RETRACTS_IEPORT = 0x80000400,CHANGER_TO_TRANSPORT = 0x1,CHANGER_TO_SLOT = 0x2,CHANGER_TO_IEPORT = 0x4,CHANGER_TO_DRIVE = 0x8,};
enum MACRO_CHANNEL {CHANNEL_NIBBLE = 0x8,};
enum MACRO_CHARSET {ANSI_CHARSET = 0,DEFAULT_CHARSET = 1,SYMBOL_CHARSET = 2,SHIFTJIS_CHARSET = 128,HANGEUL_CHARSET = 129,HANGUL_CHARSET = 129,GB2312_CHARSET = 134,CHINESEBIG5_CHARSET = 136,OEM_CHARSET = 255,JOHAB_CHARSET = 130,HEBREW_CHARSET = 177,ARABIC_CHARSET = 178,GREEK_CHARSET = 161,TURKISH_CHARSET = 162,VIETNAMESE_CHARSET = 163,THAI_CHARSET = 222,EASTEUROPE_CHARSET = 238,RUSSIAN_CHARSET = 204,MAC_CHARSET = 77,BALTIC_CHARSET = 186,};
enum MACRO_CHILDID {CHILDID_SELF = 0,};
enum MACRO_CHIPSET {CHIPSET_DETECTED_ERROR = 0xB9,};
enum MACRO_CHKBOXS {CHKBOXS_FALSE_TRUE = 0,CHKBOXS_NO_YES = 1,CHKBOXS_OFF_ON = 2,CHKBOXS_FALSE_PDATA = 3,CHKBOXS_NO_PDATA = 4,CHKBOXS_OFF_PDATA = 5,CHKBOXS_NONE_PDATA = 6,};
enum MACRO_CLIPBRD {CLIPBRD_E_FIRST = 0x800401D0,CLIPBRD_E_LAST = 0x800401DF,CLIPBRD_S_FIRST = 0x401D0,CLIPBRD_S_LAST = 0x401DF,CLIPBRD_E_CANT_OPEN = 0x800401D0,CLIPBRD_E_CANT_EMPTY = 0x800401D1,CLIPBRD_E_CANT_SET = 0x800401D2,CLIPBRD_E_BAD_DATA = 0x800401D3,CLIPBRD_E_CANT_CLOSE = 0x800401D4,};
enum MACRO_CM_NONE {CM_NONE = 0x0,CM_DEVICE_ICM = 0x1,CM_GAMMA_RAMP = 0x2,CM_CMYK_COLOR = 0x4,};
enum MACRO_CONNDLG {CONNDLG_RO_PATH = 0x1,CONNDLG_CONN_POINT = 0x2,CONNDLG_USE_MRU = 0x4,CONNDLG_HIDE_BOX = 0x8,CONNDLG_PERSIST = 0x10,CONNDLG_NOT_PERSIST = 0x20,};
enum MACRO_CONNECT {CONNECT_UPDATE_PROFILE = 0x1,CONNECT_UPDATE_RECENT = 0x2,CONNECT_TEMPORARY = 0x4,CONNECT_INTERACTIVE = 0x8,CONNECT_PROMPT = 0x10,CONNECT_NEED_DRIVE = 0x20,CONNECT_REFCOUNT = 0x40,CONNECT_REDIRECT = 0x80,CONNECT_LOCALDRIVE = 0x100,CONNECT_CURRENT_MEDIA = 0x200,CONNECT_DEFERRED = 0x400,CONNECT_RESERVED = 0xFF000000,CONNECT_COMMANDLINE = 0x800,CONNECT_CMD_SAVECRED = 0x1000,};
enum MACRO_CONSOLE {CONSOLE_APPLICATION_16BIT = 0x1,CONSOLE_CARET_SELECTION = 0x1,CONSOLE_CARET_VISIBLE = 0x2,};
enum MACRO_CONTEXT {CONTEXT_i386 = 0x10000,CONTEXT_i486 = 0x10000,CONTEXT_CONTROL = 0x10001,CONTEXT_INTEGER = 0x10002,CONTEXT_SEGMENTS = 0x10004,CONTEXT_FLOATING_POINT = 0x10008,CONTEXT_DEBUG_REGISTERS = 0x10010,CONTEXT_EXTENDED_REGISTERS = 0x10020,CONTEXT_FULL = 0x10007,CONTEXT_ALL = 0x1003F,};
enum MACRO_CONTROL {CONTROL_C_EXIT = 3221225786,};
enum MACRO_COPYFLG {COPYFLG_WARN_IF_SKIP = 0x1,COPYFLG_NOSKIP = 0x2,COPYFLG_NOVERSIONCHECK = 0x4,COPYFLG_FORCE_FILE_IN_USE = 0x8,COPYFLG_NO_OVERWRITE = 0x10,COPYFLG_NO_VERSION_DIALOG = 0x20,COPYFLG_OVERWRITE_OLDER_ONLY = 0x40,COPYFLG_REPLACEONLY = 0x400,COPYFLG_NODECOMP = 0x800,COPYFLG_REPLACE_BOOT_FILE = 0x1000,COPYFLG_NOPRUNE = 0x2000,};
enum MACRO_CORRUPT {CORRUPT_ACCESS_TOKEN = 0x28,};
enum MACRO_CPSFUNC {CPSFUNC_ADD_HPROPSHEETPAGE = 0,CPSFUNC_ADD_PROPSHEETPAGEW = 1,CPSFUNC_ADD_PCOMPROPSHEETUIA = 2,CPSFUNC_ADD_PCOMPROPSHEETUIW = 3,CPSFUNC_ADD_PFNPROPSHEETUIA = 4,CPSFUNC_ADD_PFNPROPSHEETUIW = 5,CPSFUNC_DELETE_HCOMPROPSHEET = 6,CPSFUNC_SET_HSTARTPAGE = 7,CPSFUNC_GET_PAGECOUNT = 8,CPSFUNC_SET_RESULT = 9,CPSFUNC_GET_HPSUIPAGES = 10,CPSFUNC_LOAD_CPSUI_STRINGA = 11,CPSFUNC_LOAD_CPSUI_STRINGW = 12,CPSFUNC_LOAD_CPSUI_ICON = 13,CPSFUNC_GET_PFNPROPSHEETUI_ICON = 14,CPSFUNC_ADD_PROPSHEETPAGEA = 15,CPSFUNC_INSERT_PSUIPAGEA = 16,CPSFUNC_INSERT_PSUIPAGEW = 17,CPSFUNC_SET_PSUIPAGE_TITLEA = 18,CPSFUNC_SET_PSUIPAGE_TITLEW = 19,CPSFUNC_SET_PSUIPAGE_ICON = 20,CPSFUNC_SET_DATABLOCK = 21,CPSFUNC_QUERY_DATABLOCK = 22,CPSFUNC_SET_DMPUB_HIDEBITS = 23,CPSFUNC_IGNORE_CPSUI_PSN_APPLY = 24,CPSFUNC_DO_APPLY_CPSUI = 25,CPSFUNC_SET_FUSION_CONTEXT = 26,};
enum MACRO_CPSUICB {CPSUICB_REASON_SEL_CHANGED = 0,CPSUICB_REASON_PUSHBUTTON = 1,CPSUICB_REASON_ECB_CHANGED = 2,CPSUICB_REASON_DLGPROC = 3,CPSUICB_REASON_UNDO_CHANGES = 4,CPSUICB_REASON_EXTPUSH = 5,CPSUICB_REASON_APPLYNOW = 6,CPSUICB_REASON_OPTITEM_SETFOCUS = 7,CPSUICB_REASON_ITEMS_REVERTED = 8,CPSUICB_REASON_ABOUT = 9,CPSUICB_REASON_SETACTIVE = 10,CPSUICB_REASON_KILLACTIVE = 11,CPSUICB_ACTION_NONE = 0,CPSUICB_ACTION_OPTIF_CHANGED = 1,CPSUICB_ACTION_REINIT_ITEMS = 2,CPSUICB_ACTION_NO_APPLY_EXIT = 3,CPSUICB_ACTION_ITEMS_APPLIED = 4,};
enum MACRO_CRYPT_E {CRYPT_E_ASN1_ERROR = 0x80093100,CRYPT_E_ASN1_INTERNAL = 0x80093101,CRYPT_E_ASN1_EOD = 0x80093102,CRYPT_E_ASN1_CORRUPT = 0x80093103,CRYPT_E_ASN1_LARGE = 0x80093104,CRYPT_E_ASN1_CONSTRAINT = 0x80093105,CRYPT_E_ASN1_MEMORY = 0x80093106,CRYPT_E_ASN1_OVERFLOW = 0x80093107,CRYPT_E_ASN1_BADPDU = 0x80093108,CRYPT_E_ASN1_BADARGS = 0x80093109,CRYPT_E_ASN1_BADREAL = 0x8009310A,CRYPT_E_ASN1_BADTAG = 0x8009310B,CRYPT_E_ASN1_CHOICE = 0x8009310C,CRYPT_E_ASN1_RULE = 0x8009310D,CRYPT_E_ASN1_UTF8 = 0x8009310E,CRYPT_E_ASN1_PDU_TYPE = 0x80093133,CRYPT_E_ASN1_NYI = 0x80093134,CRYPT_E_ASN1_EXTENDED = 0x80093201,CRYPT_E_ASN1_NOEOD = 0x80093202,};
enum MACRO_CRYPT_Y {CRYPT_Y_ONLY = 0x1,CRYPT_SSL2_FALLBACK = 0x2,CRYPT_DESTROYKEY = 0x4,CRYPT_OAEP = 0x40,CRYPT_BLOB_VER3 = 0x80,CRYPT_IPSEC_HMAC_KEY = 0x100,CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 0x20,CRYPT_SECRETDIGEST = 0x1,CRYPT_OWF_REPL_LM_HASH = 0x1,CRYPT_LITTLE_ENDIAN = 0x1,CRYPT_NOHASHOID = 0x1,CRYPT_TYPE2_FORMAT = 0x2,CRYPT_X931_FORMAT = 0x4,CRYPT_MACHINE_DEFAULT = 0x1,CRYPT_USER_DEFAULT = 0x2,CRYPT_DELETE_DEFAULT = 0x4,};
enum MACRO_CRYSTAL {CRYSTAL_NET_SFM_CODEC = 1,};
enum MACRO_CTL_ANY {CTL_ANY_SUBJECT_TYPE = 1,CTL_CERT_SUBJECT_TYPE = 2,CTL_FIND_ANY = 0,CTL_FIND_SHA1_HASH = 1,CTL_FIND_MD5_HASH = 2,CTL_FIND_USAGE = 3,CTL_FIND_SUBJECT = 4,CTL_FIND_EXISTING = 5,CTL_FIND_NO_LIST_ID_CBDATA = -1,CTL_FIND_NO_SIGNER_PTR = -1,CTL_FIND_SAME_USAGE_FLAG = 1,};
enum MACRO_CURRENT {CURRENT_TCI_VERSION = 0x2,};
enum MACRO_D3DCAPS {D3DCAPS_READ_SCANLINE = 0x20000,};
enum MACRO_D3DCLIP {D3DCLIP_LEFT = 0x1,D3DCLIP_RIGHT = 0x2,D3DCLIP_TOP = 0x4,D3DCLIP_BOTTOM = 0x8,D3DCLIP_FRONT = 0x10,D3DCLIP_BACK = 0x20,D3DCLIP_GEN0 = 0x40,D3DCLIP_GEN1 = 0x80,D3DCLIP_GEN2 = 0x100,D3DCLIP_GEN3 = 0x200,D3DCLIP_GEN4 = 0x400,D3DCLIP_GEN5 = 0x800,};
enum MACRO_D3DENUM {D3DENUM_NO_WHQL_LEVEL = 0x2,};
enum MACRO_D3DGDI2 {D3DGDI2_MAGIC = 0xFFFFFFFF,D3DGDI2_TYPE_GETD3DCAPS8 = 0x1,D3DGDI2_TYPE_GETFORMATCOUNT = 0x2,D3DGDI2_TYPE_GETFORMAT = 0x3,D3DGDI2_TYPE_DXVERSION = 0x4,D3DGDI2_TYPE_DEFERRED_AGP_AWARE = 0x18,D3DGDI2_TYPE_FREE_DEFERRED_AGP = 0x19,D3DGDI2_TYPE_DEFER_AGP_FREES = 0x20,};
enum MACRO_D3DHAL2 {D3DHAL2_CB32_SETRENDERTARGET = 0x1,D3DHAL2_CB32_CLEAR = 0x2,D3DHAL2_CB32_DRAWONEPRIMITIVE = 0x4,D3DHAL2_CB32_DRAWONEINDEXEDPRIMITIVE = 0x8,D3DHAL2_CB32_DRAWPRIMITIVES = 0x10,};
enum MACRO_D3DHAL3 {D3DHAL3_CB32_CLEAR2 = 0x1,D3DHAL3_CB32_RESERVED = 0x2,D3DHAL3_CB32_VALIDATETEXTURESTAGESTATE = 0x4,D3DHAL3_CB32_DRAWPRIMITIVES2 = 0x8,};
enum MACRO_D3DLOCK {D3DLOCK_READONLY = 0x10,D3DLOCK_DISCARD = 0x2000,D3DLOCK_NOOVERWRITE = 0x1000,D3DLOCK_NOSYSLOCK = 0x800,D3DLOCK_NO_DIRTY_UPDATE = 0x8000,};
enum MACRO_D3DVSDE {D3DVSDE_POSITION = 0,D3DVSDE_BLENDWEIGHT = 1,D3DVSDE_BLENDINDICES = 2,D3DVSDE_NORMAL = 3,D3DVSDE_PSIZE = 4,D3DVSDE_DIFFUSE = 5,D3DVSDE_SPECULAR = 6,D3DVSDE_TEXCOORD0 = 7,D3DVSDE_TEXCOORD1 = 8,D3DVSDE_TEXCOORD2 = 9,D3DVSDE_TEXCOORD3 = 10,D3DVSDE_TEXCOORD4 = 11,D3DVSDE_TEXCOORD5 = 12,D3DVSDE_TEXCOORD6 = 13,D3DVSDE_TEXCOORD7 = 14,D3DVSDE_POSITION2 = 15,D3DVSDE_NORMAL2 = 16,};
enum MACRO_D3DVSDT {D3DVSDT_FLOAT1 = 0x0,D3DVSDT_FLOAT2 = 0x1,D3DVSDT_FLOAT3 = 0x2,D3DVSDT_FLOAT4 = 0x3,D3DVSDT_D3DCOLOR = 0x4,D3DVSDT_UBYTE4 = 0x5,D3DVSDT_SHORT2 = 0x6,D3DVSDT_SHORT4 = 0x7,};
enum MACRO_D3DWRAP {D3DWRAP_U = 0x1,D3DWRAP_V = 0x2,D3DWRAP_W = 0x4,};
enum MACRO_DDBLTFX {DDBLTFX_ARITHSTRETCHY = 0x1,DDBLTFX_MIRRORLEFTRIGHT = 0x2,DDBLTFX_MIRRORUPDOWN = 0x4,DDBLTFX_NOTEARING = 0x8,DDBLTFX_ROTATE180 = 0x10,DDBLTFX_ROTATE270 = 0x20,DDBLTFX_ROTATE90 = 0x40,DDBLTFX_ZBUFFERRANGE = 0x80,DDBLTFX_ZBUFFERBASEDEST = 0x100,};
enum MACRO_DDCAPS2 {DDCAPS2_CERTIFIED = 0x1,DDCAPS2_NO2DDURING3DSCENE = 0x2,DDCAPS2_VIDEOPORT = 0x4,DDCAPS2_AUTOFLIPOVERLAY = 0x8,DDCAPS2_CANBOBINTERLEAVED = 0x10,DDCAPS2_CANBOBNONINTERLEAVED = 0x20,DDCAPS2_COLORCONTROLOVERLAY = 0x40,DDCAPS2_COLORCONTROLPRIMARY = 0x80,DDCAPS2_CANDROPZ16BIT = 0x100,DDCAPS2_NONLOCALVIDMEM = 0x200,DDCAPS2_NONLOCALVIDMEMCAPS = 0x400,DDCAPS2_NOPAGELOCKREQUIRED = 0x800,DDCAPS2_WIDESURFACES = 0x1000,DDCAPS2_CANFLIPODDEVEN = 0x2000,DDCAPS2_CANBOBHARDWARE = 0x4000,DDCAPS2_COPYFOURCC = 0x8000,DDCAPS2_PRIMARYGAMMA = 0x20000,DDCAPS2_CANRENDERWINDOWED = 0x80000,DDCAPS2_CANCALIBRATEGAMMA = 0x100000,DDCAPS2_FLIPINTERVAL = 0x200000,DDCAPS2_FLIPNOVSYNC = 0x400000,DDCAPS2_CANMANAGETEXTURE = 0x800000,DDCAPS2_TEXMANINNONLOCALVIDMEM = 0x1000000,DDCAPS2_STEREO = 0x2000000,DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL = 0x4000000,DDCAPS2_RESERVED1 = 0x8000000,DDCAPS2_CANMANAGERESOURCE = 0x10000000,DDCAPS2_DYNAMICTEXTURES = 0x20000000,};
enum MACRO_DDCOLOR {DDCOLOR_BRIGHTNESS = 0x1,DDCOLOR_CONTRAST = 0x2,DDCOLOR_HUE = 0x4,DDCOLOR_SATURATION = 0x8,DDCOLOR_SHARPNESS = 0x10,DDCOLOR_GAMMA = 0x20,DDCOLOR_COLORENABLE = 0x40,};
enum MACRO_DDOVERZ {DDOVERZ_SENDTOFRONT = 0x0,DDOVERZ_SENDTOBACK = 0x1,DDOVERZ_MOVEFORWARD = 0x2,DDOVERZ_MOVEBACKWARD = 0x3,DDOVERZ_INSERTINFRONTOF = 0x4,DDOVERZ_INSERTINBACKOF = 0x5,};
enum MACRO_DDPCAPS {DDPCAPS_4BIT = 0x1,DDPCAPS_8BITENTRIES = 0x2,DDPCAPS_8BIT = 0x4,DDPCAPS_INITIALIZE = 0x0,DDPCAPS_PRIMARYSURFACE = 0x10,DDPCAPS_PRIMARYSURFACELEFT = 0x20,DDPCAPS_ALLOW256 = 0x40,DDPCAPS_VSYNC = 0x80,DDPCAPS_1BIT = 0x100,DDPCAPS_2BIT = 0x200,DDPCAPS_ALPHA = 0x400,};
enum MACRO_DDSCAPS {DDSCAPS_RESERVED1 = 0x1,DDSCAPS_ALPHA = 0x2,DDSCAPS_BACKBUFFER = 0x4,DDSCAPS_COMPLEX = 0x8,DDSCAPS_FLIP = 0x10,DDSCAPS_FRONTBUFFER = 0x20,DDSCAPS_OFFSCREENPLAIN = 0x40,DDSCAPS_OVERLAY = 0x80,DDSCAPS_PALETTE = 0x100,DDSCAPS_PRIMARYSURFACE = 0x200,DDSCAPS_RESERVED3 = 0x400,DDSCAPS_PRIMARYSURFACELEFT = 0x0,DDSCAPS_SYSTEMMEMORY = 0x800,DDSCAPS_TEXTURE = 0x1000,DDSCAPS_3DDEVICE = 0x2000,DDSCAPS_VIDEOMEMORY = 0x4000,DDSCAPS_VISIBLE = 0x8000,DDSCAPS_WRITEONLY = 0x10000,DDSCAPS_ZBUFFER = 0x20000,DDSCAPS_OWNDC = 0x40000,DDSCAPS_LIVEVIDEO = 0x80000,DDSCAPS_HWCODEC = 0x100000,DDSCAPS_MODEX = 0x200000,DDSCAPS_MIPMAP = 0x400000,DDSCAPS_RESERVED2 = 0x800000,DDSCAPS_ALLOCONLOAD = 0x4000000,DDSCAPS_VIDEOPORT = 0x8000000,DDSCAPS_LOCALVIDMEM = 0x10000000,DDSCAPS_NONLOCALVIDMEM = 0x20000000,DDSCAPS_STANDARDVGAMODE = 0x40000000,DDSCAPS_OPTIMIZED = 0x80000000,};
enum MACRO_DECIMAL {DECIMAL_NEG = 0x80,};
enum MACRO_DEFAULT {DEFAULT_PALETTE = 15,};
enum MACRO_DELETED {DELETED_OK = 0,DELETED_LASTONE = 1,DELETED_NOTFOUND = 2,};
enum MACRO_DESKTOP {DESKTOP_READOBJECTS = 0x1,DESKTOP_CREATEWINDOW = 0x2,DESKTOP_CREATEMENU = 0x4,DESKTOP_HOOKCONTROL = 0x8,DESKTOP_JOURNALRECORD = 0x10,DESKTOP_JOURNALPLAYBACK = 0x20,DESKTOP_ENUMERATE = 0x40,DESKTOP_WRITEOBJECTS = 0x80,DESKTOP_SWITCHDESKTOP = 0x100,};
enum MACRO_DF_TYPE {DF_TYPE_HPINTELLIFONT = 0,DF_TYPE_TRUETYPE = 1,DF_TYPE_PST1 = 2,DF_TYPE_CAPSL = 3,DF_TYPE_OEM1 = 4,DF_TYPE_OEM2 = 5,DF_NOITALIC = 1,DF_NOUNDER = 2,DF_XM_CR = 4,DF_NO_BOLD = 8,DF_NO_DOUBLE_UNDERLINE = 16,DF_NO_STRIKETHRU = 32,DF_BKSP_OK = 64,};
enum MACRO_DISABLE {DISABLE_MAX_PRIVILEGE = 0x1,};
enum MACRO_DISPLAY {DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x1,DISPLAY_DEVICE_MULTI_DRIVER = 0x2,DISPLAY_DEVICE_PRIMARY_DEVICE = 0x4,DISPLAY_DEVICE_MIRRORING_DRIVER = 0x8,DISPLAY_DEVICE_VGA_COMPATIBLE = 0x10,DISPLAY_DEVICE_REMOVABLE = 0x20,DISPLAY_DEVICE_MODESPRUNED = 0x8000000,DISPLAY_DEVICE_REMOTE = 0x4000000,DISPLAY_DEVICE_DISCONNECT = 0x2000000,DISPLAY_DEVICE_ACTIVE = 0x1,DISPLAY_DEVICE_ATTACHED = 0x2,};
enum MACRO_DI_MASK {DI_MASK = 0x1,DI_IMAGE = 0x2,DI_NORMAL = 0x3,DI_COMPAT = 0x4,DI_DEFAULTSIZE = 0x8,DI_NOMIRROR = 0x10,};
enum MACRO_DMCOLOR {DMCOLOR_MONOCHROME = 1,DMCOLOR_COLOR = 2,};
enum MACRO_DMMEDIA {DMMEDIA_STANDARD = 1,DMMEDIA_TRANSPARENCY = 2,DMMEDIA_GLOSSY = 3,DMMEDIA_USER = 256,};
enum MACRO_DMPAPER {DMPAPER_LETTER = 1,DMPAPER_LETTERSMALL = 2,DMPAPER_TABLOID = 3,DMPAPER_LEDGER = 4,DMPAPER_LEGAL = 5,DMPAPER_STATEMENT = 6,DMPAPER_EXECUTIVE = 7,DMPAPER_A3 = 8,DMPAPER_A4 = 9,DMPAPER_A4SMALL = 10,DMPAPER_A5 = 11,DMPAPER_B4 = 12,DMPAPER_B5 = 13,DMPAPER_FOLIO = 14,DMPAPER_QUARTO = 15,DMPAPER_10X14 = 16,DMPAPER_11X17 = 17,DMPAPER_NOTE = 18,DMPAPER_ENV_9 = 19,DMPAPER_ENV_10 = 20,DMPAPER_ENV_11 = 21,DMPAPER_ENV_12 = 22,DMPAPER_ENV_14 = 23,DMPAPER_CSHEET = 24,DMPAPER_DSHEET = 25,DMPAPER_ESHEET = 26,DMPAPER_ENV_DL = 27,DMPAPER_ENV_C5 = 28,DMPAPER_ENV_C3 = 29,DMPAPER_ENV_C4 = 30,DMPAPER_ENV_C6 = 31,DMPAPER_ENV_C65 = 32,DMPAPER_ENV_B4 = 33,DMPAPER_ENV_B5 = 34,DMPAPER_ENV_B6 = 35,DMPAPER_ENV_ITALY = 36,DMPAPER_ENV_MONARCH = 37,DMPAPER_ENV_PERSONAL = 38,DMPAPER_FANFOLD_US = 39,DMPAPER_FANFOLD_STD_GERMAN = 40,DMPAPER_FANFOLD_LGL_GERMAN = 41,DMPAPER_ISO_B4 = 42,DMPAPER_JAPANESE_POSTCARD = 43,DMPAPER_9X11 = 44,DMPAPER_10X11 = 45,DMPAPER_15X11 = 46,DMPAPER_ENV_INVITE = 47,DMPAPER_RESERVED_48 = 48,DMPAPER_RESERVED_49 = 49,DMPAPER_LETTER_EXTRA = 50,DMPAPER_LEGAL_EXTRA = 51,DMPAPER_TABLOID_EXTRA = 52,DMPAPER_A4_EXTRA = 53,DMPAPER_LETTER_TRANSVERSE = 54,DMPAPER_A4_TRANSVERSE = 55,DMPAPER_LETTER_EXTRA_TRANSVERSE = 56,DMPAPER_A_PLUS = 57,DMPAPER_B_PLUS = 58,DMPAPER_LETTER_PLUS = 59,DMPAPER_A4_PLUS = 60,DMPAPER_A5_TRANSVERSE = 61,DMPAPER_B5_TRANSVERSE = 62,DMPAPER_A3_EXTRA = 63,DMPAPER_A5_EXTRA = 64,DMPAPER_B5_EXTRA = 65,DMPAPER_A2 = 66,DMPAPER_A3_TRANSVERSE = 67,DMPAPER_A3_EXTRA_TRANSVERSE = 68,DMPAPER_DBL_JAPANESE_POSTCARD = 69,DMPAPER_A6 = 70,DMPAPER_JENV_KAKU2 = 71,DMPAPER_JENV_KAKU3 = 72,DMPAPER_JENV_CHOU3 = 73,DMPAPER_JENV_CHOU4 = 74,DMPAPER_LETTER_ROTATED = 75,DMPAPER_A3_ROTATED = 76,DMPAPER_A4_ROTATED = 77,DMPAPER_A5_ROTATED = 78,DMPAPER_B4_JIS_ROTATED = 79,DMPAPER_B5_JIS_ROTATED = 80,DMPAPER_JAPANESE_POSTCARD_ROTATED = 81,DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82,DMPAPER_A6_ROTATED = 83,DMPAPER_JENV_KAKU2_ROTATED = 84,DMPAPER_JENV_KAKU3_ROTATED = 85,DMPAPER_JENV_CHOU3_ROTATED = 86,DMPAPER_JENV_CHOU4_ROTATED = 87,DMPAPER_B6_JIS = 88,DMPAPER_B6_JIS_ROTATED = 89,DMPAPER_12X11 = 90,DMPAPER_JENV_YOU4 = 91,DMPAPER_JENV_YOU4_ROTATED = 92,DMPAPER_P16K = 93,DMPAPER_P32K = 94,DMPAPER_P32KBIG = 95,DMPAPER_PENV_1 = 96,DMPAPER_PENV_2 = 97,DMPAPER_PENV_3 = 98,DMPAPER_PENV_4 = 99,DMPAPER_PENV_5 = 100,DMPAPER_PENV_6 = 101,DMPAPER_PENV_7 = 102,DMPAPER_PENV_8 = 103,DMPAPER_PENV_9 = 104,DMPAPER_PENV_10 = 105,DMPAPER_P16K_ROTATED = 106,DMPAPER_P32K_ROTATED = 107,DMPAPER_P32KBIG_ROTATED = 108,DMPAPER_PENV_1_ROTATED = 109,DMPAPER_PENV_2_ROTATED = 110,DMPAPER_PENV_3_ROTATED = 111,DMPAPER_PENV_4_ROTATED = 112,DMPAPER_PENV_5_ROTATED = 113,DMPAPER_PENV_6_ROTATED = 114,DMPAPER_PENV_7_ROTATED = 115,DMPAPER_PENV_8_ROTATED = 116,DMPAPER_PENV_9_ROTATED = 117,DMPAPER_PENV_10_ROTATED = 118,DMPAPER_LAST = 118,DMPAPER_USER = 256,};
enum MACRO_DOSOPTF {DOSOPTF_DEFAULT = 0x1,DOSOPTF_SUPPORTED = 0x2,DOSOPTF_ALWAYSUSE = 0x4,DOSOPTF_USESPMODE = 0x8,DOSOPTF_PROVIDESUMB = 0x10,DOSOPTF_NEEDSETUP = 0x20,DOSOPTF_INDOSSTART = 0x40,DOSOPTF_MULTIPLE = 0x80,};
enum MACRO_DPROMPT {DPROMPT_SUCCESS = 0,DPROMPT_CANCEL = 1,DPROMPT_SKIPFILE = 2,DPROMPT_BUFFERTOOSMALL = 3,DPROMPT_OUTOFMEMORY = 4,};
enum MACRO_DSBCAPS {DSBCAPS_PRIMARYBUFFER = 0x1,DSBCAPS_STATIC = 0x2,DSBCAPS_LOCHARDWARE = 0x4,DSBCAPS_LOCSOFTWARE = 0x8,DSBCAPS_CTRL3D = 0x10,DSBCAPS_CTRLFREQUENCY = 0x20,DSBCAPS_CTRLPAN = 0x40,DSBCAPS_CTRLVOLUME = 0x80,DSBCAPS_CTRLPOSITIONNOTIFY = 0x100,DSBCAPS_CTRLFX = 0x200,DSBCAPS_STICKYFOCUS = 0x4000,DSBCAPS_GLOBALFOCUS = 0x8000,DSBCAPS_GETCURRENTPOSITION2 = 0x10000,DSBCAPS_MUTE3DATMAXDISTANCE = 0x20000,DSBCAPS_LOCDEFER = 0x40000,};
enum MACRO_DSBLOCK {DSBLOCK_FROMWRITECURSOR = 0x1,DSBLOCK_ENTIREBUFFER = 0x2,};
enum MACRO_DSBPLAY {DSBPLAY_LOOPING = 0x1,DSBPLAY_LOCHARDWARE = 0x2,DSBPLAY_LOCSOFTWARE = 0x4,DSBPLAY_TERMINATEBY_TIME = 0x8,DSBPLAY_TERMINATEBY_DISTANCE = 0x10,DSBPLAY_TERMINATEBY_PRIORITY = 0x20,};
enum MACRO_DSBSIZE {DSBSIZE_MIN = 4,DSBSIZE_MAX = 268435455,DSBSIZE_FX_MIN = 150,};
enum MACRO_DSBUSID {DSBUSID_FIRST_SPKR_LOC = 0,DSBUSID_FRONT_LEFT = 0,DSBUSID_LEFT = 0,DSBUSID_FRONT_RIGHT = 1,DSBUSID_RIGHT = 1,DSBUSID_FRONT_CENTER = 2,DSBUSID_LOW_FREQUENCY = 3,DSBUSID_BACK_LEFT = 4,DSBUSID_BACK_RIGHT = 5,DSBUSID_FRONT_LEFT_OF_CENTER = 6,DSBUSID_FRONT_RIGHT_OF_CENTER = 7,DSBUSID_BACK_CENTER = 8,DSBUSID_SIDE_LEFT = 9,DSBUSID_SIDE_RIGHT = 10,DSBUSID_TOP_CENTER = 11,DSBUSID_TOP_FRONT_LEFT = 12,DSBUSID_TOP_FRONT_CENTER = 13,DSBUSID_TOP_FRONT_RIGHT = 14,DSBUSID_TOP_BACK_LEFT = 15,DSBUSID_TOP_BACK_CENTER = 16,DSBUSID_TOP_BACK_RIGHT = 17,DSBUSID_LAST_SPKR_LOC = 17,DSBUSID_REVERB_SEND = 64,DSBUSID_CHORUS_SEND = 65,DSBUSID_DYNAMIC_0 = 512,DSBUSID_NULL = -1,};
enum MACRO_DSCCAPS {DSCCAPS_EMULDRIVER = 32,DSCCAPS_CERTIFIED = 64,};
enum MACRO_DSPRINT {DSPRINT_PUBLISH = 0x1,DSPRINT_UPDATE = 0x2,DSPRINT_UNPUBLISH = 0x4,DSPRINT_REPUBLISH = 0x8,DSPRINT_PENDING = 0x80000000,};
enum MACRO_DYNAWIZ {DYNAWIZ_FLAG_PAGESADDED = 0x1,DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT = 0x8,DYNAWIZ_FLAG_INSTALLDET_NEXT = 0x2,DYNAWIZ_FLAG_INSTALLDET_PREV = 0x4,};
enum MACRO_ELEMENT {ELEMENT_STATUS_FULL = 0x1,ELEMENT_STATUS_IMPEXP = 0x2,ELEMENT_STATUS_EXCEPT = 0x4,ELEMENT_STATUS_ACCESS = 0x8,ELEMENT_STATUS_EXENAB = 0x10,ELEMENT_STATUS_INENAB = 0x20,ELEMENT_STATUS_PRODUCT_DATA = 0x40,ELEMENT_STATUS_LUN_VALID = 0x1000,ELEMENT_STATUS_ID_VALID = 0x2000,ELEMENT_STATUS_NOT_BUS = 0x8000,ELEMENT_STATUS_INVERT = 0x400000,ELEMENT_STATUS_SVALID = 0x800000,ELEMENT_STATUS_PVOLTAG = 0x10000000,ELEMENT_STATUS_AVOLTAG = 0x20000000,};
enum MACRO_EMBDHLP {EMBDHLP_INPROC_HANDLER = 0x0,EMBDHLP_INPROC_SERVER = 0x1,EMBDHLP_CREATENOW = 0x0,EMBDHLP_DELAYCREATE = 0x10000,};
enum MACRO_EMBEDED {SETICMPROFILE_EMBEDED = 0x1,CREATECOLORSPACE_EMBEDED = 0x1,COLORMATCHTOTARGET_EMBEDED = 0x1,};
enum MACRO_ENHMETA {ENHMETA_SIGNATURE = 0x464D4520,ENHMETA_STOCK_OBJECT = 0x80000000,};
enum MACRO_ERROR_0 {ERROR = 0,NULLREGION = 1,SIMPLEREGION = 2,};
enum MACRO_ES_LEFT {ES_LEFT = 0x0,ES_CENTER = 0x1,ES_RIGHT = 0x2,ES_MULTILINE = 0x4,ES_UPPERCASE = 0x8,ES_LOWERCASE = 0x10,ES_PASSWORD = 0x20,ES_AUTOVSCROLL = 0x40,ES_AUTOHSCROLL = 0x80,ES_NOHIDESEL = 0x100,ES_OEMCONVERT = 0x400,ES_READONLY = 0x800,ES_WANTRETURN = 0x1000,ES_NUMBER = 0x2000,};
enum MACRO_EVENT_E {EVENT_E_FIRST = 0x80040200,EVENT_E_LAST = 0x8004021F,EVENT_S_FIRST = 0x40200,EVENT_S_LAST = 0x4021F,EVENT_S_SOME_SUBSCRIBERS_FAILED = 0x40200,EVENT_E_ALL_SUBSCRIBERS_FAILED = 0x80040201,EVENT_S_NOSUBSCRIBERS = 0x40202,EVENT_E_QUERYSYNTAX = 0x80040203,EVENT_E_QUERYFIELD = 0x80040204,EVENT_E_INTERNALEXCEPTION = 0x80040205,EVENT_E_INTERNALERROR = 0x80040206,EVENT_E_INVALID_PER_USER_SID = 0x80040207,EVENT_E_USER_EXCEPTION = 0x80040208,EVENT_E_TOO_MANY_METHODS = 0x80040209,EVENT_E_MISSING_EVENTCLASS = 0x8004020A,EVENT_E_NOT_ALL_REMOVED = 0x8004020B,EVENT_E_COMPLUS_NOT_INSTALLED = 0x8004020C,EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = 0x8004020D,EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = 0x8004020E,EVENT_E_INVALID_EVENT_CLASS_PARTITION = 0x8004020F,EVENT_E_PER_USER_SID_NOT_LOGGED_ON = 0x80040210,};
enum MACRO_EXECUTE {EXECUTE_OFFLINE_DIAGS = 0xD4,};
enum MACRO_EXIT_ON {EXIT_ON_CONTROLC = 0x8,};
enum MACRO_EXT_API {EXT_API_VERSION_NUMBER = 5,EXT_API_VERSION_NUMBER32 = 5,EXT_API_VERSION_NUMBER64 = 6,};
enum MACRO_FAILURE {NMI_HARDWARE_FAILURE = 0x80,SPIN_LOCK_INIT_FAILURE = 0x81,};
enum MACRO_FD_READ {FD_READ = 0x1,FD_WRITE = 0x2,FD_OOB = 0x4,FD_ACCEPT = 0x8,FD_CONNECT = 0x10,FD_CLOSE = 0x20,};
enum MACRO_FONT_FL {FONT_FL_UFM = 0x1,FONT_FL_IFI = 0x2,FONT_FL_SOFTFONT = 0x4,FONT_FL_PERMANENT_SF = 0x8,FONT_FL_DEVICEFONT = 0x10,FONT_FL_GLYPHSET_GTT = 0x20,FONT_FL_GLYPHSET_RLE = 0x40,FONT_FL_RESERVED = 0x8000,};
enum MACRO_FO_ATTR {FO_ATTR_MODE_ROTATE = 1,};
enum MACRO_FO_TYPE {FO_TYPE_RASTER = 1,FO_TYPE_DEVICE = 2,FO_TYPE_TRUETYPE = 4,FO_SIM_BOLD = 8192,FO_SIM_ITALIC = 16384,FO_EM_HEIGHT = 32768,FO_GRAY16 = 65536,FO_NOGRAY16 = 131072,FO_NOHINTS = 262144,FO_NO_CHOICE = 524288,FO_CFF = 1048576,FO_POSTSCRIPT = 2097152,FO_MULTIPLEMASTER = 4194304,FO_VERT_FACE = 8388608,FO_DBCS_FONT = 16777216,FO_NOCLEARTYPE = 33554432,FO_CLEARTYPE_X = 268435456,FO_CLEARTYPE_Y = 536870912,FO_CLEARTYPENATURAL_X = 1073741824,};
enum MACRO_FR_DOWN {FR_DOWN = 0x1,FR_WHOLEWORD = 0x2,FR_MATCHCASE = 0x4,FR_FINDNEXT = 0x8,FR_REPLACE = 0x10,FR_REPLACEALL = 0x20,FR_DIALOGTERM = 0x40,FR_SHOWHELP = 0x80,FR_ENABLEHOOK = 0x100,FR_ENABLETEMPLATE = 0x200,FR_NOUPDOWN = 0x400,FR_NOMATCHCASE = 0x800,FR_NOWHOLEWORD = 0x1000,FR_ENABLETEMPLATEHANDLE = 0x2000,FR_HIDEUPDOWN = 0x4000,FR_HIDEMATCHCASE = 0x8000,FR_HIDEWHOLEWORD = 0x10000,FR_RAW = 0x20000,FR_MATCHDIAC = 0x20000000,FR_MATCHKASHIDA = 0x40000000,FR_MATCHALEFHAMZA = 0x80000000,};
enum MACRO_GENERIC {GENERIC_READ = 0x80000000,GENERIC_WRITE = 0x40000000,GENERIC_EXECUTE = 0x20000000,GENERIC_ALL = 0x10000000,};
enum MACRO_HBMMENU {HBMMENU_CALLBACK = -1,HBMMENU_SYSTEM = 1,HBMMENU_MBAR_RESTORE = 2,HBMMENU_MBAR_MINIMIZE = 3,HBMMENU_MBAR_CLOSE = 5,HBMMENU_MBAR_CLOSE_D = 6,HBMMENU_MBAR_MINIMIZE_D = 7,HBMMENU_POPUP_CLOSE = 8,HBMMENU_POPUP_RESTORE = 9,HBMMENU_POPUP_MAXIMIZE = 10,HBMMENU_POPUP_MINIMIZE = 11,};
enum MACRO_HOTKEYF {HOTKEYF_SHIFT = 0x1,HOTKEYF_CONTROL = 0x2,HOTKEYF_ALT = 0x4,HOTKEYF_EXT = 0x8,};
enum MACRO_HTCLOSE {HTCLOSE = 20,};
enum MACRO_HTERROR {HTERROR = -2,};
enum MACRO_HTRIGHT {HTRIGHT = 11,};
enum MACRO_ICM_OFF {ICM_OFF = 1,ICM_ON = 2,ICM_QUERY = 3,ICM_DONE_OUTSIDEDC = 4,};
enum MACRO_IDABORT {IDABORT = 3,IDRETRY = 4,};
enum MACRO_IDLFLAG {IDLFLAG_NONE = 0,IDLFLAG_FIN = 1,IDLFLAG_FOUT = 2,IDLFLAG_FLCID = 4,IDLFLAG_FRETVAL = 8,};
enum MACRO_IDS_CAP {IDS_CAP_BEGIN = 300,IDS_CAP_END = 301,IDS_CAP_INFO = 401,IDS_CAP_OUTOFMEM = 402,IDS_CAP_FILEEXISTS = 403,IDS_CAP_ERRORPALOPEN = 404,IDS_CAP_ERRORPALSAVE = 405,IDS_CAP_ERRORDIBSAVE = 406,IDS_CAP_DEFAVIEXT = 407,IDS_CAP_DEFPALEXT = 408,IDS_CAP_CANTOPEN = 409,IDS_CAP_SEQ_MSGSTART = 410,IDS_CAP_SEQ_MSGSTOP = 411,IDS_CAP_VIDEDITERR = 412,IDS_CAP_READONLYFILE = 413,IDS_CAP_WRITEERROR = 414,IDS_CAP_NODISKSPACE = 415,IDS_CAP_SETFILESIZE = 416,IDS_CAP_SAVEASPERCENT = 417,IDS_CAP_DRIVER_ERROR = 418,IDS_CAP_WAVE_OPEN_ERROR = 419,IDS_CAP_WAVE_ALLOC_ERROR = 420,IDS_CAP_WAVE_PREPARE_ERROR = 421,IDS_CAP_WAVE_ADD_ERROR = 422,IDS_CAP_WAVE_SIZE_ERROR = 423,IDS_CAP_VIDEO_OPEN_ERROR = 424,IDS_CAP_VIDEO_ALLOC_ERROR = 425,IDS_CAP_VIDEO_PREPARE_ERROR = 426,IDS_CAP_VIDEO_ADD_ERROR = 427,IDS_CAP_VIDEO_SIZE_ERROR = 428,IDS_CAP_FILE_OPEN_ERROR = 429,IDS_CAP_FILE_WRITE_ERROR = 430,IDS_CAP_RECORDING_ERROR = 431,IDS_CAP_RECORDING_ERROR2 = 432,IDS_CAP_AVI_INIT_ERROR = 433,IDS_CAP_NO_FRAME_CAP_ERROR = 434,IDS_CAP_NO_PALETTE_WARN = 435,IDS_CAP_MCI_CONTROL_ERROR = 436,IDS_CAP_MCI_CANT_STEP_ERROR = 437,IDS_CAP_NO_AUDIO_CAP_ERROR = 438,IDS_CAP_AVI_DRAWDIB_ERROR = 439,IDS_CAP_COMPRESSOR_ERROR = 440,IDS_CAP_AUDIO_DROP_ERROR = 441,IDS_CAP_AUDIO_DROP_COMPERROR = 442,IDS_CAP_STAT_LIVE_MODE = 500,IDS_CAP_STAT_OVERLAY_MODE = 501,IDS_CAP_STAT_CAP_INIT = 502,IDS_CAP_STAT_CAP_FINI = 503,IDS_CAP_STAT_PALETTE_BUILD = 504,IDS_CAP_STAT_OPTPAL_BUILD = 505,IDS_CAP_STAT_I_FRAMES = 506,IDS_CAP_STAT_L_FRAMES = 507,IDS_CAP_STAT_CAP_L_FRAMES = 508,IDS_CAP_STAT_CAP_AUDIO = 509,IDS_CAP_STAT_VIDEOCURRENT = 510,IDS_CAP_STAT_VIDEOAUDIO = 511,IDS_CAP_STAT_VIDEOONLY = 512,IDS_CAP_STAT_FRAMESDROPPED = 513,};
enum MACRO_IEIFLAG {IEIFLAG_ASYNC = 0x1,IEIFLAG_CACHE = 0x2,IEIFLAG_ASPECT = 0x4,IEIFLAG_OFFLINE = 0x8,IEIFLAG_GLEAM = 0x10,IEIFLAG_SCREEN = 0x20,IEIFLAG_ORIGSIZE = 0x40,IEIFLAG_NOSTAMP = 0x80,IEIFLAG_NOBORDER = 0x100,IEIFLAG_QUALITY = 0x200,IEIFLAG_REFRESH = 0x400,};
enum MACRO_IMPLINK {IMPLINK_IP = 155,IMPLINK_LOWEXPER = 156,IMPLINK_HIGHEXPER = 158,};
enum MACRO_INDEXID {INDEXID_OBJECT = 0,INDEXID_CONTAINER = 0,};
enum MACRO_INFINFO {INFINFO_INF_SPEC_IS_HINF = 1,INFINFO_INF_NAME_IS_ABSOLUTE = 2,INFINFO_DEFAULT_SEARCH = 3,INFINFO_REVERSE_DEFAULT_SEARCH = 4,INFINFO_INF_PATH_LIST_SEARCH = 5,};
enum MACRO_INPLACE {INPLACE_E_NOTUNDOABLE = 0x800401A0,INPLACE_E_NOTOOLSPACE = 0x800401A1,INPLACE_E_FIRST = 0x800401A0,INPLACE_E_LAST = 0x800401AF,INPLACE_S_FIRST = 0x401A0,INPLACE_S_LAST = 0x401AF,};
enum MACRO_INSTALL {INSTALL_MORE_MEMORY = 0x7D,};
enum MACRO_INVALID {INVALID_HANDLE_VALUE = -1,INVALID_FILE_SIZE = 4294967295,INVALID_SET_FILE_POINTER = 4294967295,INVALID_FILE_ATTRIBUTES = 4294967295,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x7F,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_TCP = 6,IPPROTO_PUP = 12,IPPROTO_UDP = 17,IPPROTO_IDP = 22,IPPROTO_ND = 77,IPPROTO_RAW = 255,IPPROTO_MAX = 256,};
enum MACRO_IRQINFO {IRQINFO_HANDLED = 0x1,IRQINFO_NOTHANDLED = 0x2,};
enum MACRO_IRQL_GT {IRQL_GT_ZERO_AT_SYSTEM_SERVICE = 0x4A,};
enum MACRO_JOB_ALL {JOB_ALL_ACCESS = 983088,JOB_READ = 131104,JOB_WRITE = 131088,JOB_EXECUTE = 131088,};
enum MACRO_JOYCAPS {JOYCAPS_HASZ = 0x1,JOYCAPS_HASR = 0x2,JOYCAPS_HASU = 0x4,JOYCAPS_HASV = 0x8,JOYCAPS_HASPOV = 0x10,JOYCAPS_POV4DIR = 0x20,JOYCAPS_POVCTS = 0x40,};
enum MACRO_KBDBASE {KBDBASE = 0,KBDSHIFT = 1,KBDCTRL = 2,KBDALT = 4,KBDKANA = 8,KBDROYA = 16,KBDLOYA = 32,KBDGRPSELTAP = 128,GRAVE = 768,};
enum MACRO_KSAUDIO {KSAUDIO_STEREO_SPEAKER_GEOMETRY_HEADPHONE = -1,KSAUDIO_STEREO_SPEAKER_GEOMETRY_MIN = 5,KSAUDIO_STEREO_SPEAKER_GEOMETRY_NARROW = 10,KSAUDIO_STEREO_SPEAKER_GEOMETRY_WIDE = 20,KSAUDIO_STEREO_SPEAKER_GEOMETRY_MAX = 180,};
enum MACRO_KSEVENT {KSEVENT_TYPE_ENABLE = 0x1,KSEVENT_TYPE_ONESHOT = 0x2,KSEVENT_TYPE_ENABLEBUFFERED = 0x4,KSEVENT_TYPE_SETSUPPORT = 0x100,KSEVENT_TYPE_BASICSUPPORT = 0x200,KSEVENT_TYPE_QUERYBUFFER = 0x400,KSEVENT_TYPE_TOPOLOGY = 0x10000000,};
enum MACRO_LOGON32 {LOGON32_LOGON_INTERACTIVE = 2,LOGON32_LOGON_NETWORK = 3,LOGON32_LOGON_BATCH = 4,LOGON32_LOGON_SERVICE = 5,LOGON32_LOGON_UNLOCK = 7,LOGON32_LOGON_NETWORK_CLEARTEXT = 8,LOGON32_LOGON_NEW_CREDENTIALS = 9,LOGON32_PROVIDER_DEFAULT = 0,LOGON32_PROVIDER_WINNT35 = 1,LOGON32_PROVIDER_WINNT40 = 2,LOGON32_PROVIDER_WINNT50 = 3,};
enum MACRO_LVIF_DI {LVIF_DI_SETITEM = 0x1000,};
enum MACRO_LV_VIEW {LV_VIEW_ICON = 0x0,LV_VIEW_DETAILS = 0x1,LV_VIEW_SMALLICON = 0x2,LV_VIEW_LIST = 0x3,LV_VIEW_TILE = 0x4,LV_VIEW_MAX = 0x4,};
enum MACRO_LZERROR {LZERROR_BADINHANDLE = -1,LZERROR_BADOUTHANDLE = -2,LZERROR_READ = -3,LZERROR_WRITE = -4,LZERROR_GLOBALLOC = -5,LZERROR_GLOBLOCK = -6,LZERROR_BADVALUE = -7,LZERROR_UNKNOWNALG = -8,};
enum MACRO_MACHINE {MACHINE_CHECK_EXCEPTION = 0x9C,};
enum MACRO_MARSHAL {MARSHAL_E_FIRST = 0x80040120,MARSHAL_E_LAST = 0x8004012F,MARSHAL_S_FIRST = 0x40120,MARSHAL_S_LAST = 0x4012F,};
enum MACRO_MAXBYTE {MAXBYTE = 0xFF,};
enum MACRO_MAXCHAR {MAXCHAR = 0x7F,MINSHORT = 0x8000,};
enum MACRO_MAXIMUM {MAXIMUM_WAIT_OBJECTS = 64,MAXIMUM_SUSPEND_COUNT = 127,};
enum MACRO_MAXLONG {MAXLONG = 0x7FFFFFFF,};
enum MACRO_MAXWORD {MAXWORD = 0xFFFF,};
enum MACRO_MAX_ACL {MAX_ACL_REVISION = 4,};
enum MACRO_MAX_INF {MAX_INF_STRING_LENGTH = 4096,MAX_INF_SECTION_NAME_LENGTH = 255,MAX_TITLE_LEN = 60,MAX_INSTRUCTION_LEN = 256,MAX_LABEL_LEN = 30,MAX_SERVICE_NAME_LEN = 256,MAX_SUBTITLE_LEN = 256,};
enum MACRO_MAX_MOF {MAX_MOF_FIELDS = 16,};
enum MACRO_MAX_NUM {MAX_NUM_REASONS = 256,};
enum MACRO_MAX_OPT {MAX_OPT_SIZE = 40,};
enum MACRO_MAX_RES {MAX_RES_STR_CHARS = 160,};
enum MACRO_MAX_SID {MAX_SID_SIZE = 256,};
enum MACRO_MAX_WST {MAX_WST_VBI_LINES_PER_FIELD = 17,};
enum MACRO_MCDSPAN {MCDSPAN_FRONT = 1,MCDSPAN_BACK = 2,MCDSPAN_DEPTH = 3,};
enum MACRO_MCDSWAP {MCDSWAP_MAIN_PLANE = 0x1,MCDSWAP_OVERLAY1 = 0x2,MCDSWAP_OVERLAY2 = 0x4,MCDSWAP_OVERLAY3 = 0x8,MCDSWAP_OVERLAY4 = 0x10,MCDSWAP_OVERLAY5 = 0x20,MCDSWAP_OVERLAY6 = 0x40,MCDSWAP_OVERLAY7 = 0x80,MCDSWAP_OVERLAY8 = 0x100,MCDSWAP_OVERLAY9 = 0x200,MCDSWAP_OVERLAY10 = 0x400,MCDSWAP_OVERLAY11 = 0x800,MCDSWAP_OVERLAY12 = 0x1000,MCDSWAP_OVERLAY13 = 0x2000,MCDSWAP_OVERLAY14 = 0x4000,MCDSWAP_OVERLAY15 = 0x8000,MCDSWAP_UNDERLAY1 = 0x10000,MCDSWAP_UNDERLAY2 = 0x20000,MCDSWAP_UNDERLAY3 = 0x40000,MCDSWAP_UNDERLAY4 = 0x80000,MCDSWAP_UNDERLAY5 = 0x100000,MCDSWAP_UNDERLAY6 = 0x200000,MCDSWAP_UNDERLAY7 = 0x400000,MCDSWAP_UNDERLAY8 = 0x800000,MCDSWAP_UNDERLAY9 = 0x1000000,MCDSWAP_UNDERLAY10 = 0x2000000,MCDSWAP_UNDERLAY11 = 0x4000000,MCDSWAP_UNDERLAY12 = 0x8000000,MCDSWAP_UNDERLAY13 = 0x10000000,MCDSWAP_UNDERLAY14 = 0x20000000,MCDSWAP_UNDERLAY15 = 0x40000000,};
enum MACRO_MCIWNDF {MCIWNDF_NOAUTOSIZEWINDOW = 0x1,MCIWNDF_NOPLAYBAR = 0x2,MCIWNDF_NOAUTOSIZEMOVIE = 0x4,MCIWNDF_NOMENU = 0x8,MCIWNDF_SHOWNAME = 0x10,MCIWNDF_SHOWPOS = 0x20,MCIWNDF_SHOWMODE = 0x40,MCIWNDF_SHOWALL = 0x70,MCIWNDF_NOTIFYMODE = 0x100,MCIWNDF_NOTIFYPOS = 0x200,MCIWNDF_NOTIFYSIZE = 0x400,MCIWNDF_NOTIFYERROR = 0x1000,MCIWNDF_NOTIFYALL = 0x1F00,MCIWNDF_NOTIFYANSI = 0x80,MCIWNDF_NOTIFYMEDIAA = 0x880,MCIWNDF_NOTIFYMEDIAW = 0x800,MCIWNDF_NOTIFYMEDIA = 0x880,MCIWNDF_RECORD = 0x2000,MCIWNDF_NOERRORDLG = 0x4000,MCIWNDF_NOOPEN = 0x8000,};
enum MACRO_MCIWNDM {MCIWNDM_GETDEVICEID = 1124,MCIWNDM_GETSTART = 1127,MCIWNDM_GETLENGTH = 1128,MCIWNDM_GETEND = 1129,MCIWNDM_EJECT = 1131,MCIWNDM_SETZOOM = 1132,MCIWNDM_GETZOOM = 1133,MCIWNDM_SETVOLUME = 1134,MCIWNDM_GETVOLUME = 1135,MCIWNDM_SETSPEED = 1136,MCIWNDM_GETSPEED = 1137,MCIWNDM_SETREPEAT = 1138,MCIWNDM_GETREPEAT = 1139,MCIWNDM_REALIZE = 1142,MCIWNDM_VALIDATEMEDIA = 1145,MCIWNDM_PLAYFROM = 1146,MCIWNDM_PLAYTO = 1147,MCIWNDM_GETPALETTE = 1150,MCIWNDM_SETPALETTE = 1151,MCIWNDM_SETTIMERS = 1153,MCIWNDM_SETACTIVETIMER = 1154,MCIWNDM_SETINACTIVETIMER = 1155,MCIWNDM_GETACTIVETIMER = 1156,MCIWNDM_GETINACTIVETIMER = 1157,MCIWNDM_CHANGESTYLES = 1159,MCIWNDM_GETSTYLES = 1160,MCIWNDM_GETALIAS = 1161,MCIWNDM_PLAYREVERSE = 1163,MCIWNDM_GET_SOURCE = 1164,MCIWNDM_PUT_SOURCE = 1165,MCIWNDM_GET_DEST = 1166,MCIWNDM_PUT_DEST = 1167,MCIWNDM_CAN_PLAY = 1168,MCIWNDM_CAN_WINDOW = 1169,MCIWNDM_CAN_RECORD = 1170,MCIWNDM_CAN_SAVE = 1171,MCIWNDM_CAN_EJECT = 1172,MCIWNDM_CAN_CONFIG = 1173,MCIWNDM_PALETTEKICK = 1174,MCIWNDM_OPENINTERFACE = 1175,MCIWNDM_SETOWNER = 1176,MCIWNDM_SENDSTRINGA = 1125,MCIWNDM_GETPOSITIONA = 1126,MCIWNDM_GETMODEA = 1130,MCIWNDM_SETTIMEFORMATA = 1143,MCIWNDM_GETTIMEFORMATA = 1144,MCIWNDM_GETFILENAMEA = 1148,MCIWNDM_GETDEVICEA = 1149,MCIWNDM_GETERRORA = 1152,MCIWNDM_NEWA = 1158,MCIWNDM_RETURNSTRINGA = 1162,MCIWNDM_OPENA = 1177,MCIWNDM_SENDSTRINGW = 1225,MCIWNDM_GETPOSITIONW = 1226,MCIWNDM_GETMODEW = 1230,MCIWNDM_SETTIMEFORMATW = 1243,MCIWNDM_GETTIMEFORMATW = 1244,MCIWNDM_GETFILENAMEW = 1248,MCIWNDM_GETDEVICEW = 1249,MCIWNDM_GETERRORW = 1252,MCIWNDM_NEWW = 1258,MCIWNDM_RETURNSTRINGW = 1262,MCIWNDM_OPENW = 1276,MCIWNDM_SENDSTRING = 1125,MCIWNDM_GETPOSITION = 1126,MCIWNDM_GETMODE = 1130,MCIWNDM_SETTIMEFORMAT = 1143,MCIWNDM_GETTIMEFORMAT = 1144,MCIWNDM_GETFILENAME = 1148,MCIWNDM_GETDEVICE = 1149,MCIWNDM_GETERROR = 1152,MCIWNDM_NEW = 1158,MCIWNDM_RETURNSTRING = 1162,MCIWNDM_OPEN = 1177,MCIWNDM_NOTIFYMODE = 1224,MCIWNDM_NOTIFYPOS = 1225,MCIWNDM_NOTIFYSIZE = 1226,MCIWNDM_NOTIFYMEDIA = 1227,MCIWNDM_NOTIFYERROR = 1229,};
enum MACRO_MDITILE {MDITILE_VERTICAL = 0x0,MDITILE_HORIZONTAL = 0x1,MDITILE_SKIPDISABLED = 0x2,MDITILE_ZORDER = 0x4,};
enum MACRO_MDMSPKR {MDMSPKR_OFF = 0x0,MDMSPKR_DIAL = 0x1,MDMSPKR_ON = 0x2,MDMSPKR_CALLSETUP = 0x3,};
enum MACRO_MESSAGE {MESSAGE_RESOURCE_UNICODE = 0x1,};
enum MACRO_METRICS {METRICS_USEDEFAULT = -1,};
enum MACRO_MIB_TCP {MIB_TCP_RTO_OTHER = 1,MIB_TCP_RTO_CONSTANT = 2,MIB_TCP_RTO_RSRE = 3,MIB_TCP_RTO_VANJ = 4,MIB_TCP_MAXCONN_DYNAMIC = 4294967295,MIB_TCP_STATE_CLOSED = 1,MIB_TCP_STATE_LISTEN = 2,MIB_TCP_STATE_SYN_SENT = 3,MIB_TCP_STATE_SYN_RCVD = 4,MIB_TCP_STATE_ESTAB = 5,MIB_TCP_STATE_FIN_WAIT1 = 6,MIB_TCP_STATE_FIN_WAIT2 = 7,MIB_TCP_STATE_CLOSE_WAIT = 8,MIB_TCP_STATE_CLOSING = 9,MIB_TCP_STATE_LAST_ACK = 10,MIB_TCP_STATE_TIME_WAIT = 11,MIB_TCP_STATE_DELETE_TCB = 12,MIB_USE_CURRENT_TTL = 4294967295,MIB_USE_CURRENT_FORWARDING = 4294967295,MIB_IP_FORWARDING = 1,MIB_IP_NOT_FORWARDING = 2,MIB_IPADDR_PRIMARY = 1,MIB_IPADDR_DYNAMIC = 4,MIB_IPADDR_DISCONNECTED = 8,MIB_IPADDR_DELETED = 64,MIB_IPADDR_TRANSIENT = 128,MIB_IPROUTE_TYPE_OTHER = 1,MIB_IPROUTE_TYPE_INVALID = 2,MIB_IPROUTE_TYPE_DIRECT = 3,MIB_IPROUTE_TYPE_INDIRECT = 4,MIB_IPROUTE_METRIC_UNUSED = 4294967295,MIB_IPPROTO_OTHER = 1,MIB_IPPROTO_LOCAL = 2,MIB_IPPROTO_NETMGMT = 3,MIB_IPPROTO_ICMP = 4,MIB_IPPROTO_EGP = 5,MIB_IPPROTO_GGP = 6,MIB_IPPROTO_HELLO = 7,MIB_IPPROTO_RIP = 8,MIB_IPPROTO_IS_IS = 9,MIB_IPPROTO_ES_IS = 10,MIB_IPPROTO_CISCO = 11,MIB_IPPROTO_BBN = 12,MIB_IPPROTO_OSPF = 13,MIB_IPPROTO_BGP = 14,MIB_IPPROTO_NT_AUTOSTATIC = 10002,MIB_IPPROTO_NT_STATIC = 10006,MIB_IPPROTO_NT_STATIC_NON_DOD = 10007,MIB_IPNET_TYPE_OTHER = 1,MIB_IPNET_TYPE_INVALID = 2,MIB_IPNET_TYPE_DYNAMIC = 3,MIB_IPNET_TYPE_STATIC = 4,};
enum MACRO_MIDIERR {MIDIERR_UNPREPARED = 64,MIDIERR_STILLPLAYING = 65,MIDIERR_NOMAP = 66,MIDIERR_NOTREADY = 67,MIDIERR_NODEVICE = 68,MIDIERR_INVALIDSETUP = 69,MIDIERR_BADOPENMODE = 70,MIDIERR_DONT_CONTINUE = 71,MIDIERR_LASTERROR = 71,};
enum MACRO_MINCHAR {MINCHAR = 0x80,};
enum MACRO_MISSING {MISSING_VOLUME = 0xC00037DE,EXTRA_VOLUME = 0xC00037DF,};
enum MACRO_MMIOERR {MMIOERR_BASE = 256,MMIOERR_FILENOTFOUND = 257,MMIOERR_OUTOFMEMORY = 258,MMIOERR_CANNOTOPEN = 259,MMIOERR_CANNOTCLOSE = 260,MMIOERR_CANNOTREAD = 261,MMIOERR_CANNOTWRITE = 262,MMIOERR_CANNOTSEEK = 263,MMIOERR_CANNOTEXPAND = 264,MMIOERR_CHUNKNOTFOUND = 265,MMIOERR_UNBUFFERED = 266,MMIOERR_PATHNOTFOUND = 267,MMIOERR_ACCESSDENIED = 268,MMIOERR_SHARINGVIOLATION = 269,MMIOERR_NETWORKERROR = 270,MMIOERR_TOOMANYOPENFILES = 271,MMIOERR_INVALIDFILE = 272,};
enum MACRO_MONITOR {MONITOR_DEFAULTTONULL = 0x0,MONITOR_DEFAULTTOPRIMARY = 0x1,MONITOR_DEFAULTTONEAREST = 0x2,};
enum MACRO_NCBCALL {NCBCALL = 0x10,};
enum MACRO_NCBENUM {NCBENUM = 0x37,};
enum MACRO_NCBRECV {NCBRECV = 0x15,};
enum MACRO_NCBSEND {NCBSEND = 0x14,};
enum MACRO_NETBIOS {NETBIOS_NAME_LEN = 16,};
enum MACRO_NETINFO {NETINFO_DLL16 = 0x1,NETINFO_DISKRED = 0x4,NETINFO_PRINTERRED = 0x8,};
enum MACRO_NETWORK {NETWORK_BOOT_INITIALIZATION_FAILED = 0xBB,NETWORK_BOOT_DUPLICATE_ADDRESS = 0xBC,};
enum MACRO_NMPWAIT {NMPWAIT_WAIT_FOREVER = 0xFFFFFFFF,NMPWAIT_NOWAIT = 0x1,NMPWAIT_USE_DEFAULT_WAIT = 0x0,};
enum MACRO_NOERROR {NOERROR = 0,};
enum MACRO_NO_BOOT {NO_BOOT_DEVICE = 0x53,};
enum MACRO_NO_MORE {NO_MORE_IRP_STACK_LOCATIONS = 0x35,};
enum MACRO_NO_SPIN {NO_SPIN_LOCK_AVAILABLE = 0x1D,};
enum MACRO_NO_SUCH {NO_SUCH_PARTITION = 0x43,};
enum MACRO_NO_USER {NO_USER_MODE_CONTEXT = 0xE,};
enum MACRO_NUMPENS {NUMPENS = 18,};
enum MACRO_OEMCUIP {OEMCUIP_DOCPROP = 1,OEMCUIP_PRNPROP = 2,};
enum MACRO_OFFLINE {OFFLINE_STATUS_LOCAL = 0x1,OFFLINE_STATUS_REMOTE = 0x2,OFFLINE_STATUS_INCOMPLETE = 0x4,};
enum MACRO_OFFLOAD {OFFLOAD_MAX_SAS = 3,OFFLOAD_INBOUND_SA = 1,OFFLOAD_OUTBOUND_SA = 2,};
enum MACRO_OID_802 {OID_802_3_RCV_ERROR_ALIGNMENT = 0x1020101,OID_802_3_XMIT_ONE_COLLISION = 0x1020102,OID_802_3_XMIT_MORE_COLLISIONS = 0x1020103,OID_802_3_XMIT_DEFERRED = 0x1020201,OID_802_3_XMIT_MAX_COLLISIONS = 0x1020202,OID_802_3_RCV_OVERRUN = 0x1020203,OID_802_3_XMIT_UNDERRUN = 0x1020204,OID_802_3_XMIT_HEARTBEAT_FAILURE = 0x1020205,OID_802_3_XMIT_TIMES_CRS_LOST = 0x1020206,OID_802_3_XMIT_LATE_COLLISIONS = 0x1020207,OID_802_5_PERMANENT_ADDRESS = 0x2010101,OID_802_5_CURRENT_ADDRESS = 0x2010102,OID_802_5_CURRENT_FUNCTIONAL = 0x2010103,OID_802_5_CURRENT_GROUP = 0x2010104,OID_802_5_LAST_OPEN_STATUS = 0x2010105,OID_802_5_CURRENT_RING_STATUS = 0x2010106,OID_802_5_CURRENT_RING_STATE = 0x2010107,OID_802_5_LINE_ERRORS = 0x2020101,OID_802_5_LOST_FRAMES = 0x2020102,OID_802_5_BURST_ERRORS = 0x2020201,OID_802_5_AC_ERRORS = 0x2020202,OID_802_5_ABORT_DELIMETERS = 0x2020203,OID_802_5_FRAME_COPIED_ERRORS = 0x2020204,OID_802_5_FREQUENCY_ERRORS = 0x2020205,OID_802_5_TOKEN_ERRORS = 0x2020206,OID_802_5_INTERNAL_ERRORS = 0x2020207,OID_FDDI_LONG_PERMANENT_ADDR = 0x3010101,OID_FDDI_LONG_CURRENT_ADDR = 0x3010102,OID_FDDI_LONG_MULTICAST_LIST = 0x3010103,OID_FDDI_LONG_MAX_LIST_SIZE = 0x3010104,OID_FDDI_SHORT_PERMANENT_ADDR = 0x3010105,OID_FDDI_SHORT_CURRENT_ADDR = 0x3010106,OID_FDDI_SHORT_MULTICAST_LIST = 0x3010107,OID_FDDI_SHORT_MAX_LIST_SIZE = 0x3010108,OID_FDDI_ATTACHMENT_TYPE = 0x3020101,OID_FDDI_UPSTREAM_NODE_LONG = 0x3020102,OID_FDDI_DOWNSTREAM_NODE_LONG = 0x3020103,OID_FDDI_FRAME_ERRORS = 0x3020104,OID_FDDI_FRAMES_LOST = 0x3020105,OID_FDDI_RING_MGT_STATE = 0x3020106,OID_FDDI_LCT_FAILURES = 0x3020107,OID_FDDI_LEM_REJECTS = 0x3020108,OID_FDDI_LCONNECTION_STATE = 0x3020109,OID_FDDI_SMT_STATION_ID = 0x3030201,OID_FDDI_SMT_OP_VERSION_ID = 0x3030202,OID_FDDI_SMT_HI_VERSION_ID = 0x3030203,OID_FDDI_SMT_LO_VERSION_ID = 0x3030204,OID_FDDI_SMT_MANUFACTURER_DATA = 0x3030205,OID_FDDI_SMT_USER_DATA = 0x3030206,OID_FDDI_SMT_MIB_VERSION_ID = 0x3030207,OID_FDDI_SMT_MAC_CT = 0x3030208,OID_FDDI_SMT_NON_MASTER_CT = 0x3030209,OID_FDDI_SMT_MASTER_CT = 0x303020A,OID_FDDI_SMT_AVAILABLE_PATHS = 0x303020B,OID_FDDI_SMT_CONFIG_CAPABILITIES = 0x303020C,OID_FDDI_SMT_CONFIG_POLICY = 0x303020D,OID_FDDI_SMT_CONNECTION_POLICY = 0x303020E,OID_FDDI_SMT_T_NOTIFY = 0x303020F,OID_FDDI_SMT_STAT_RPT_POLICY = 0x3030210,OID_FDDI_SMT_TRACE_MAX_EXPIRATION = 0x3030211,OID_FDDI_SMT_PORT_INDEXES = 0x3030212,OID_FDDI_SMT_MAC_INDEXES = 0x3030213,OID_FDDI_SMT_BYPASS_PRESENT = 0x3030214,OID_FDDI_SMT_ECM_STATE = 0x3030215,OID_FDDI_SMT_CF_STATE = 0x3030216,OID_FDDI_SMT_HOLD_STATE = 0x3030217,OID_FDDI_SMT_REMOTE_DISCONNECT_FLAG = 0x3030218,OID_FDDI_SMT_STATION_STATUS = 0x3030219,OID_FDDI_SMT_PEER_WRAP_FLAG = 0x303021A,OID_FDDI_SMT_MSG_TIME_STAMP = 0x303021B,OID_FDDI_SMT_TRANSITION_TIME_STAMP = 0x303021C,OID_FDDI_SMT_SET_COUNT = 0x303021D,OID_FDDI_SMT_LAST_SET_STATION_ID = 0x303021E,OID_FDDI_MAC_FRAME_STATUS_FUNCTIONS = 0x303021F,OID_FDDI_MAC_BRIDGE_FUNCTIONS = 0x3030220,OID_FDDI_MAC_T_MAX_CAPABILITY = 0x3030221,OID_FDDI_MAC_TVX_CAPABILITY = 0x3030222,OID_FDDI_MAC_AVAILABLE_PATHS = 0x3030223,OID_FDDI_MAC_CURRENT_PATH = 0x3030224,OID_FDDI_MAC_UPSTREAM_NBR = 0x3030225,OID_FDDI_MAC_DOWNSTREAM_NBR = 0x3030226,OID_FDDI_MAC_OLD_UPSTREAM_NBR = 0x3030227,OID_FDDI_MAC_OLD_DOWNSTREAM_NBR = 0x3030228,OID_FDDI_MAC_DUP_ADDRESS_TEST = 0x3030229,OID_FDDI_MAC_REQUESTED_PATHS = 0x303022A,OID_FDDI_MAC_DOWNSTREAM_PORT_TYPE = 0x303022B,OID_FDDI_MAC_INDEX = 0x303022C,OID_FDDI_MAC_SMT_ADDRESS = 0x303022D,OID_FDDI_MAC_LONG_GRP_ADDRESS = 0x303022E,OID_FDDI_MAC_SHORT_GRP_ADDRESS = 0x303022F,OID_FDDI_MAC_T_REQ = 0x3030230,OID_FDDI_MAC_T_NEG = 0x3030231,OID_FDDI_MAC_T_MAX = 0x3030232,OID_FDDI_MAC_TVX_VALUE = 0x3030233,OID_FDDI_MAC_T_PRI0 = 0x3030234,OID_FDDI_MAC_T_PRI1 = 0x3030235,OID_FDDI_MAC_T_PRI2 = 0x3030236,OID_FDDI_MAC_T_PRI3 = 0x3030237,OID_FDDI_MAC_T_PRI4 = 0x3030238,OID_FDDI_MAC_T_PRI5 = 0x3030239,OID_FDDI_MAC_T_PRI6 = 0x303023A,OID_FDDI_MAC_FRAME_CT = 0x303023B,OID_FDDI_MAC_COPIED_CT = 0x303023C,OID_FDDI_MAC_TRANSMIT_CT = 0x303023D,OID_FDDI_MAC_TOKEN_CT = 0x303023E,OID_FDDI_MAC_ERROR_CT = 0x303023F,OID_FDDI_MAC_LOST_CT = 0x3030240,OID_FDDI_MAC_TVX_EXPIRED_CT = 0x3030241,OID_FDDI_MAC_NOT_COPIED_CT = 0x3030242,OID_FDDI_MAC_LATE_CT = 0x3030243,OID_FDDI_MAC_RING_OP_CT = 0x3030244,OID_FDDI_MAC_FRAME_ERROR_THRESHOLD = 0x3030245,OID_FDDI_MAC_FRAME_ERROR_RATIO = 0x3030246,OID_FDDI_MAC_NOT_COPIED_THRESHOLD = 0x3030247,OID_FDDI_MAC_NOT_COPIED_RATIO = 0x3030248,OID_FDDI_MAC_RMT_STATE = 0x3030249,OID_FDDI_MAC_DA_FLAG = 0x303024A,OID_FDDI_MAC_UNDA_FLAG = 0x303024B,OID_FDDI_MAC_FRAME_ERROR_FLAG = 0x303024C,OID_FDDI_MAC_NOT_COPIED_FLAG = 0x303024D,OID_FDDI_MAC_MA_UNITDATA_AVAILABLE = 0x303024E,OID_FDDI_MAC_HARDWARE_PRESENT = 0x303024F,OID_FDDI_MAC_MA_UNITDATA_ENABLE = 0x3030250,OID_FDDI_PATH_INDEX = 0x3030251,OID_FDDI_PATH_RING_LATENCY = 0x3030252,OID_FDDI_PATH_TRACE_STATUS = 0x3030253,OID_FDDI_PATH_SBA_PAYLOAD = 0x3030254,OID_FDDI_PATH_SBA_OVERHEAD = 0x3030255,OID_FDDI_PATH_CONFIGURATION = 0x3030256,OID_FDDI_PATH_T_R_MODE = 0x3030257,OID_FDDI_PATH_SBA_AVAILABLE = 0x3030258,OID_FDDI_PATH_TVX_LOWER_BOUND = 0x3030259,OID_FDDI_PATH_T_MAX_LOWER_BOUND = 0x303025A,OID_FDDI_PATH_MAX_T_REQ = 0x303025B,OID_FDDI_PORT_MY_TYPE = 0x303025C,OID_FDDI_PORT_NEIGHBOR_TYPE = 0x303025D,OID_FDDI_PORT_CONNECTION_POLICIES = 0x303025E,OID_FDDI_PORT_MAC_INDICATED = 0x303025F,OID_FDDI_PORT_CURRENT_PATH = 0x3030260,OID_FDDI_PORT_REQUESTED_PATHS = 0x3030261,OID_FDDI_PORT_MAC_PLACEMENT = 0x3030262,OID_FDDI_PORT_AVAILABLE_PATHS = 0x3030263,OID_FDDI_PORT_MAC_LOOP_TIME = 0x3030264,OID_FDDI_PORT_PMD_CLASS = 0x3030265,OID_FDDI_PORT_CONNECTION_CAPABILITIES = 0x3030266,OID_FDDI_PORT_INDEX = 0x3030267,OID_FDDI_PORT_MAINT_LS = 0x3030268,OID_FDDI_PORT_BS_FLAG = 0x3030269,OID_FDDI_PORT_PC_LS = 0x303026A,OID_FDDI_PORT_EB_ERROR_CT = 0x303026B,OID_FDDI_PORT_LCT_FAIL_CT = 0x303026C,OID_FDDI_PORT_LER_ESTIMATE = 0x303026D,OID_FDDI_PORT_LEM_REJECT_CT = 0x303026E,OID_FDDI_PORT_LEM_CT = 0x303026F,OID_FDDI_PORT_LER_CUTOFF = 0x3030270,OID_FDDI_PORT_LER_ALARM = 0x3030271,OID_FDDI_PORT_CONNNECT_STATE = 0x3030272,OID_FDDI_PORT_PCM_STATE = 0x3030273,OID_FDDI_PORT_PC_WITHHOLD = 0x3030274,OID_FDDI_PORT_LER_FLAG = 0x3030275,OID_FDDI_PORT_HARDWARE_PRESENT = 0x3030276,OID_FDDI_SMT_STATION_ACTION = 0x3030277,OID_FDDI_PORT_ACTION = 0x3030278,OID_FDDI_IF_DESCR = 0x3030279,OID_FDDI_IF_TYPE = 0x303027A,OID_FDDI_IF_MTU = 0x303027B,OID_FDDI_IF_SPEED = 0x303027C,OID_FDDI_IF_PHYS_ADDRESS = 0x303027D,OID_FDDI_IF_ADMIN_STATUS = 0x303027E,OID_FDDI_IF_OPER_STATUS = 0x303027F,OID_FDDI_IF_LAST_CHANGE = 0x3030280,OID_FDDI_IF_IN_OCTETS = 0x3030281,OID_FDDI_IF_IN_UCAST_PKTS = 0x3030282,OID_FDDI_IF_IN_NUCAST_PKTS = 0x3030283,OID_FDDI_IF_IN_DISCARDS = 0x3030284,OID_FDDI_IF_IN_ERRORS = 0x3030285,OID_FDDI_IF_IN_UNKNOWN_PROTOS = 0x3030286,OID_FDDI_IF_OUT_OCTETS = 0x3030287,OID_FDDI_IF_OUT_UCAST_PKTS = 0x3030288,OID_FDDI_IF_OUT_NUCAST_PKTS = 0x3030289,OID_FDDI_IF_OUT_DISCARDS = 0x303028A,OID_FDDI_IF_OUT_ERRORS = 0x303028B,OID_FDDI_IF_OUT_QLEN = 0x303028C,OID_FDDI_IF_SPECIFIC = 0x303028D,OID_WAN_PERMANENT_ADDRESS = 0x4010101,OID_WAN_CURRENT_ADDRESS = 0x4010102,OID_WAN_QUALITY_OF_SERVICE = 0x4010103,OID_WAN_PROTOCOL_TYPE = 0x4010104,OID_WAN_MEDIUM_SUBTYPE = 0x4010105,OID_WAN_HEADER_FORMAT = 0x4010106,OID_WAN_GET_INFO = 0x4010107,OID_WAN_SET_LINK_INFO = 0x4010108,OID_WAN_GET_LINK_INFO = 0x4010109,OID_WAN_LINE_COUNT = 0x401010A,OID_WAN_PROTOCOL_CAPS = 0x401010B,OID_WAN_GET_BRIDGE_INFO = 0x401020A,OID_WAN_SET_BRIDGE_INFO = 0x401020B,OID_WAN_GET_COMP_INFO = 0x401020C,OID_WAN_SET_COMP_INFO = 0x401020D,OID_WAN_GET_STATS_INFO = 0x401020E,OID_WAN_CO_GET_INFO = 0x4010180,OID_WAN_CO_SET_LINK_INFO = 0x4010181,OID_WAN_CO_GET_LINK_INFO = 0x4010182,OID_WAN_CO_GET_COMP_INFO = 0x4010280,OID_WAN_CO_SET_COMP_INFO = 0x4010281,OID_WAN_CO_GET_STATS_INFO = 0x4010282,OID_LTALK_CURRENT_NODE_ID = 0x5010102,OID_LTALK_IN_BROADCASTS = 0x5020101,OID_LTALK_IN_LENGTH_ERRORS = 0x5020102,OID_LTALK_OUT_NO_HANDLERS = 0x5020201,OID_LTALK_COLLISIONS = 0x5020202,OID_LTALK_DEFERS = 0x5020203,OID_LTALK_NO_DATA_ERRORS = 0x5020204,OID_LTALK_RANDOM_CTS_ERRORS = 0x5020205,OID_LTALK_FCS_ERRORS = 0x5020206,OID_ARCNET_PERMANENT_ADDRESS = 0x6010101,OID_ARCNET_CURRENT_ADDRESS = 0x6010102,OID_ARCNET_RECONFIGURATIONS = 0x6020201,OID_TAPI_ACCEPT = 0x7030101,OID_TAPI_ANSWER = 0x7030102,OID_TAPI_CLOSE = 0x7030103,OID_TAPI_CLOSE_CALL = 0x7030104,OID_TAPI_CONDITIONAL_MEDIA_DETECTION = 0x7030105,OID_TAPI_CONFIG_DIALOG = 0x7030106,OID_TAPI_DEV_SPECIFIC = 0x7030107,OID_TAPI_DIAL = 0x7030108,OID_TAPI_DROP = 0x7030109,OID_TAPI_GET_ADDRESS_CAPS = 0x703010A,OID_TAPI_GET_ADDRESS_ID = 0x703010B,OID_TAPI_GET_ADDRESS_STATUS = 0x703010C,OID_TAPI_GET_CALL_ADDRESS_ID = 0x703010D,OID_TAPI_GET_CALL_INFO = 0x703010E,OID_TAPI_GET_CALL_STATUS = 0x703010F,OID_TAPI_GET_DEV_CAPS = 0x7030110,OID_TAPI_GET_DEV_CONFIG = 0x7030111,OID_TAPI_GET_EXTENSION_ID = 0x7030112,OID_TAPI_GET_ID = 0x7030113,OID_TAPI_GET_LINE_DEV_STATUS = 0x7030114,OID_TAPI_MAKE_CALL = 0x7030115,OID_TAPI_NEGOTIATE_EXT_VERSION = 0x7030116,OID_TAPI_OPEN = 0x7030117,OID_TAPI_PROVIDER_INITIALIZE = 0x7030118,OID_TAPI_PROVIDER_SHUTDOWN = 0x7030119,OID_TAPI_SECURE_CALL = 0x703011A,OID_TAPI_SELECT_EXT_VERSION = 0x703011B,OID_TAPI_SEND_USER_USER_INFO = 0x703011C,OID_TAPI_SET_APP_SPECIFIC = 0x703011D,OID_TAPI_SET_CALL_PARAMS = 0x703011E,OID_TAPI_SET_DEFAULT_MEDIA_DETECTION = 0x703011F,OID_TAPI_SET_DEV_CONFIG = 0x7030120,OID_TAPI_SET_MEDIA_MODE = 0x7030121,OID_TAPI_SET_STATUS_MESSAGES = 0x7030122,OID_TAPI_GATHER_DIGITS = 0x7030123,OID_TAPI_MONITOR_DIGITS = 0x7030124,OID_ATM_SUPPORTED_VC_RATES = 0x8010101,OID_ATM_SUPPORTED_SERVICE_CATEGORY = 0x8010102,OID_ATM_SUPPORTED_AAL_TYPES = 0x8010103,OID_ATM_HW_CURRENT_ADDRESS = 0x8010104,OID_ATM_MAX_ACTIVE_VCS = 0x8010105,OID_ATM_MAX_ACTIVE_VCI_BITS = 0x8010106,OID_ATM_MAX_ACTIVE_VPI_BITS = 0x8010107,OID_ATM_MAX_AAL0_PACKET_SIZE = 0x8010108,OID_ATM_MAX_AAL1_PACKET_SIZE = 0x8010109,OID_ATM_MAX_AAL34_PACKET_SIZE = 0x801010A,OID_ATM_MAX_AAL5_PACKET_SIZE = 0x801010B,OID_ATM_SIGNALING_VPIVCI = 0x8010201,OID_ATM_ASSIGNED_VPI = 0x8010202,OID_ATM_ACQUIRE_ACCESS_NET_RESOURCES = 0x8010203,OID_ATM_RELEASE_ACCESS_NET_RESOURCES = 0x8010204,OID_ATM_ILMI_VPIVCI = 0x8010205,OID_ATM_DIGITAL_BROADCAST_VPIVCI = 0x8010206,OID_ATM_GET_NEAREST_FLOW = 0x8010207,OID_ATM_ALIGNMENT_REQUIRED = 0x8010208,OID_ATM_LECS_ADDRESS = 0x8010209,OID_ATM_SERVICE_ADDRESS = 0x801020A,OID_ATM_CALL_PROCEEDING = 0x801020B,OID_ATM_CALL_ALERTING = 0x801020C,OID_ATM_PARTY_ALERTING = 0x801020D,OID_ATM_CALL_NOTIFY = 0x801020E,OID_ATM_MY_IP_NM_ADDRESS = 0x801020F,OID_ATM_RCV_CELLS_OK = 0x8020101,OID_ATM_XMIT_CELLS_OK = 0x8020102,OID_ATM_RCV_CELLS_DROPPED = 0x8020103,OID_ATM_RCV_INVALID_VPI_VCI = 0x8020201,OID_ATM_CELLS_HEC_ERROR = 0x8020202,OID_ATM_RCV_REASSEMBLY_ERROR = 0x8020203,OID_WW_GEN_NETWORK_TYPES_SUPPORTED = 0x9010101,OID_WW_GEN_NETWORK_TYPE_IN_USE = 0x9010102,OID_WW_GEN_HEADER_FORMATS_SUPPORTED = 0x9010103,OID_WW_GEN_HEADER_FORMAT_IN_USE = 0x9010104,OID_WW_GEN_INDICATION_REQUEST = 0x9010105,OID_WW_GEN_DEVICE_INFO = 0x9010106,OID_WW_GEN_OPERATION_MODE = 0x9010107,OID_WW_GEN_LOCK_STATUS = 0x9010108,OID_WW_GEN_DISABLE_TRANSMITTER = 0x9010109,OID_WW_GEN_NETWORK_ID = 0x901010A,OID_WW_GEN_PERMANENT_ADDRESS = 0x901010B,OID_WW_GEN_CURRENT_ADDRESS = 0x901010C,OID_WW_GEN_SUSPEND_DRIVER = 0x901010D,OID_WW_GEN_BASESTATION_ID = 0x901010E,OID_WW_GEN_CHANNEL_ID = 0x901010F,OID_WW_GEN_ENCRYPTION_SUPPORTED = 0x9010110,OID_WW_GEN_ENCRYPTION_IN_USE = 0x9010111,OID_WW_GEN_ENCRYPTION_STATE = 0x9010112,OID_WW_GEN_CHANNEL_QUALITY = 0x9010113,OID_WW_GEN_REGISTRATION_STATUS = 0x9010114,OID_WW_GEN_RADIO_LINK_SPEED = 0x9010115,OID_WW_GEN_LATENCY = 0x9010116,OID_WW_GEN_BATTERY_LEVEL = 0x9010117,OID_WW_GEN_EXTERNAL_POWER = 0x9010118,OID_WW_GEN_PING_ADDRESS = 0x9010201,OID_WW_GEN_RSSI = 0x9010202,OID_WW_GEN_SIM_STATUS = 0x9010203,OID_WW_GEN_ENABLE_SIM_PIN = 0x9010204,OID_WW_GEN_CHANGE_SIM_PIN = 0x9010205,OID_WW_GEN_SIM_PUK = 0x9010206,OID_WW_GEN_SIM_EXCEPTION = 0x9010207,OID_WW_MBX_SUBADDR = 0x9050101,OID_WW_MBX_FLEXLIST = 0x9050103,OID_WW_MBX_GROUPLIST = 0x9050104,OID_WW_MBX_TRAFFIC_AREA = 0x9050105,OID_WW_MBX_LIVE_DIE = 0x9050106,OID_WW_MBX_TEMP_DEFAULTLIST = 0x9050107,OID_WW_PIN_LOC_AUTHORIZE = 0x9090101,OID_WW_PIN_LAST_LOCATION = 0x9090102,OID_WW_PIN_LOC_FIX = 0x9090103,OID_WW_CDPD_SPNI = 0x90D0101,OID_WW_CDPD_WASI = 0x90D0102,OID_WW_CDPD_AREA_COLOR = 0x90D0103,OID_WW_CDPD_TX_POWER_LEVEL = 0x90D0104,OID_WW_CDPD_EID = 0x90D0105,OID_WW_CDPD_HEADER_COMPRESSION = 0x90D0106,OID_WW_CDPD_DATA_COMPRESSION = 0x90D0107,OID_WW_CDPD_CHANNEL_SELECT = 0x90D0108,OID_WW_CDPD_CHANNEL_STATE = 0x90D0109,OID_WW_CDPD_NEI = 0x90D010A,OID_WW_CDPD_NEI_STATE = 0x90D010B,OID_WW_CDPD_SERVICE_PROVIDER_IDENTIFIER = 0x90D010C,OID_WW_CDPD_SLEEP_MODE = 0x90D010D,OID_WW_CDPD_CIRCUIT_SWITCHED = 0x90D010E,OID_WW_CDPD_TEI = 0x90D010F,OID_WW_CDPD_RSSI = 0x90D0110,OID_WW_CDPD_CS_SERVICE_PREFERENCE = 0x90D0111,OID_WW_CDPD_CS_SERVICE_STATUS = 0x90D0112,OID_WW_CDPD_CS_INFO = 0x90D0113,OID_WW_CDPD_CS_SUSPEND = 0x90D0114,OID_WW_CDPD_CS_DEFAULT_DIAL_CODE = 0x90D0115,OID_WW_CDPD_CS_CALLBACK = 0x90D0116,OID_WW_CDPD_CS_SID_LIST = 0x90D0117,OID_WW_CDPD_CS_CONFIGURATION = 0x90D0118,OID_WW_ARD_SNDCP = 0x9110101,OID_WW_ARD_TMLY_MSG = 0x9110102,OID_WW_ARD_DATAGRAM = 0x9110103,OID_WW_TAC_COMPRESSION = 0x9150101,OID_WW_TAC_SET_CONFIG = 0x9150102,OID_WW_TAC_GET_STATUS = 0x9150103,OID_WW_TAC_USER_HEADER = 0x9150104,OID_WW_TAC_UNIQUE_SDU_TAG = 0x9150105,OID_WW_TAC_SEND_COMMAND = 0x9150106,OID_WW_TAC_GET_RESPONSE = 0x9150107,OID_WW_TAC_DISABLE_RECEIVER = 0x9150108,OID_WW_TAC_ANTENNA_MODE = 0x9150109,OID_WW_TAC_FLUSH_DATA = 0x915010A,OID_WW_TAC_SHUTDOWN_DEVICE = 0x915010B,OID_WW_TAC_DEVICE_EXCEPTION = 0x915010C,OID_WW_TAC_RECEIVE_EXCEPTION = 0x915010D,OID_WW_TAC_BUFFER_EXCEPTION = 0x915010E,OID_WW_TAC_BATTERY_EXCEPTION = 0x915010F,OID_WW_TAC_TRANSMITTER_KEYED = 0x9150110,OID_WW_TAC_SYSTEM_TABLE = 0x9150111,OID_WW_TAC_CHANNEL_TABLE = 0x9150112,OID_WW_TAC_DCHANNEL_TABLE = 0x9150113,OID_WW_TAC_RECEIVE_QUEUE_COUNT = 0x9150114,OID_WW_TAC_STATISTICS = 0x9160101,OID_WW_MET_FUNCTION = 0x9190101,OID_802_11_BSSID = 0xD010101,OID_802_11_SSID = 0xD010102,OID_802_11_NETWORK_TYPES_SUPPORTED = 0xD010203,OID_802_11_NETWORK_TYPE_IN_USE = 0xD010204,OID_802_11_TX_POWER_LEVEL = 0xD010205,OID_802_11_RSSI = 0xD010206,OID_802_11_RSSI_TRIGGER = 0xD010207,OID_802_11_INFRASTRUCTURE_MODE = 0xD010108,OID_802_11_FRAGMENTATION_THRESHOLD = 0xD010209,OID_802_11_RTS_THRESHOLD = 0xD01020A,OID_802_11_NUMBER_OF_ANTENNAS = 0xD01020B,OID_802_11_RX_ANTENNA_SELECTED = 0xD01020C,OID_802_11_TX_ANTENNA_SELECTED = 0xD01020D,OID_802_11_SUPPORTED_RATES = 0xD01020E,OID_802_11_DESIRED_RATES = 0xD010210,OID_802_11_CONFIGURATION = 0xD010211,OID_802_11_STATISTICS = 0xD020212,OID_802_11_ADD_WEP = 0xD010113,OID_802_11_REMOVE_WEP = 0xD010114,OID_802_11_DISASSOCIATE = 0xD010115,OID_802_11_POWER_MODE = 0xD010216,OID_802_11_BSSID_LIST = 0xD010217,OID_802_11_AUTHENTICATION_MODE = 0xD010118,OID_802_11_PRIVACY_FILTER = 0xD010119,OID_802_11_BSSID_LIST_SCAN = 0xD01011A,OID_802_11_WEP_STATUS = 0xD01011B,OID_802_11_RELOAD_DEFAULTS = 0xD01011C,OID_IRDA_RECEIVING = 0xA010100,OID_IRDA_TURNAROUND_TIME = 0xA010101,OID_IRDA_SUPPORTED_SPEEDS = 0xA010102,OID_IRDA_LINK_SPEED = 0xA010103,OID_IRDA_MEDIA_BUSY = 0xA010104,OID_IRDA_EXTRA_RCV_BOFS = 0xA010200,OID_IRDA_RATE_SNIFF = 0xA010201,OID_IRDA_UNICAST_LIST = 0xA010202,OID_IRDA_MAX_UNICAST_LIST_SIZE = 0xA010203,OID_IRDA_MAX_RECEIVE_WINDOW_SIZE = 0xA010204,OID_IRDA_MAX_SEND_WINDOW_SIZE = 0xA010205,OID_IRDA_RESERVED1 = 0xA01020A,OID_IRDA_RESERVED2 = 0xA01020F,OID_BPC_ADAPTER_CAPS = 0xB010100,OID_BPC_DEVICES = 0xB010101,OID_BPC_DEVICE_CAPS = 0xB010102,OID_BPC_DEVICE_SETTINGS = 0xB010103,OID_BPC_CONNECTION_STATUS = 0xB010104,OID_BPC_ADDRESS_COMPARE = 0xB010105,OID_BPC_PROGRAM_GUIDE = 0xB010106,OID_BPC_LAST_ERROR = 0xB020107,OID_BPC_POOL = 0xB010108,OID_BPC_PROVIDER_SPECIFIC = 0xB020109,OID_BPC_ADAPTER_SPECIFIC = 0xB02010A,OID_BPC_CONNECT = 0xB01010B,OID_BPC_COMMIT = 0xB01010C,OID_BPC_DISCONNECT = 0xB01010D,OID_BPC_CONNECTION_ENABLE = 0xB01010E,OID_BPC_POOL_RESERVE = 0xB01010F,OID_BPC_POOL_RETURN = 0xB010110,OID_BPC_FORCE_RECEIVE = 0xB010111,OID_BPC_LAST = 0xB020112,OID_1394_LOCAL_NODE_INFO = 0xC010101,OID_1394_VC_INFO = 0xC010102,OID_CO_ADD_PVC = 0xFE000001,OID_CO_DELETE_PVC = 0xFE000002,OID_CO_GET_CALL_INFORMATION = 0xFE000003,OID_CO_ADD_ADDRESS = 0xFE000004,OID_CO_DELETE_ADDRESS = 0xFE000005,OID_CO_GET_ADDRESSES = 0xFE000006,OID_CO_ADDRESS_CHANGE = 0xFE000007,OID_CO_SIGNALING_ENABLED = 0xFE000008,OID_CO_SIGNALING_DISABLED = 0xFE000009,OID_CO_AF_CLOSE = 0xFE00000A,OID_CO_TAPI_CM_CAPS = 0xFE001001,OID_CO_TAPI_LINE_CAPS = 0xFE001002,OID_CO_TAPI_ADDRESS_CAPS = 0xFE001003,OID_CO_TAPI_TRANSLATE_TAPI_CALLPARAMS = 0xFE001004,OID_CO_TAPI_TRANSLATE_NDIS_CALLPARAMS = 0xFE001005,OID_CO_TAPI_TRANSLATE_TAPI_SAP = 0xFE001006,OID_CO_TAPI_GET_CALL_DIAGNOSTICS = 0xFE001007,OID_CO_TAPI_REPORT_DIGITS = 0xFE001008,OID_CO_TAPI_DONT_REPORT_DIGITS = 0xFE001009,OID_PNP_CAPABILITIES = 0xFD010100,OID_PNP_SET_POWER = 0xFD010101,OID_PNP_QUERY_POWER = 0xFD010102,OID_PNP_ADD_WAKE_UP_PATTERN = 0xFD010103,OID_PNP_REMOVE_WAKE_UP_PATTERN = 0xFD010104,OID_PNP_WAKE_UP_PATTERN_LIST = 0xFD010105,OID_PNP_ENABLE_WAKE_UP = 0xFD010106,OID_PNP_WAKE_UP_OK = 0xFD020200,OID_PNP_WAKE_UP_ERROR = 0xFD020201,};
enum MACRO_OID_TCP {OID_TCP_TASK_OFFLOAD = 0xFC010201,OID_TCP_TASK_IPSEC_ADD_SA = 0xFC010202,OID_TCP_TASK_IPSEC_DELETE_SA = 0xFC010203,OID_TCP_SAN_SUPPORT = 0xFC010204,OID_TCP_TASK_IPSEC_ADD_UDPESP_SA = 0xFC010205,OID_TCP_TASK_IPSEC_DELETE_UDPESP_SA = 0xFC010206,OID_FFP_SUPPORT = 0xFC010210,OID_FFP_FLUSH = 0xFC010211,OID_FFP_CONTROL = 0xFC010212,OID_FFP_PARAMS = 0xFC010213,OID_FFP_DATA = 0xFC010214,OID_FFP_DRIVER_STATS = 0xFC020210,OID_FFP_ADAPTER_STATS = 0xFC020211,OID_QOS_TC_SUPPORTED = 0xFB010100,OID_QOS_REMAINING_BANDWIDTH = 0xFB010101,OID_QOS_ISSLOW_FLOW = 0xFB010102,OID_QOS_BESTEFFORT_BANDWIDTH = 0xFB010103,OID_QOS_LATENCY = 0xFB010104,OID_QOS_FLOW_IP_CONFORMING = 0xFB010105,OID_QOS_FLOW_COUNT = 0xFB010106,OID_QOS_NON_BESTEFFORT_LIMIT = 0xFB010107,OID_QOS_SCHEDULING_PROFILES_SUPPORTED = 0xFB010108,OID_QOS_CURRENT_SCHEDULING_PROFILE = 0xFB010109,OID_QOS_TIMER_RESOLUTION = 0xFB01010A,OID_QOS_STATISTICS_BUFFER = 0xFB01010B,OID_QOS_HIERARCHY_CLASS = 0xFB01010C,OID_QOS_FLOW_MODE = 0xFB01010D,OID_QOS_ISSLOW_FRAGMENT_SIZE = 0xFB01010E,OID_QOS_FLOW_IP_NONCONFORMING = 0xFB01010F,OID_QOS_FLOW_8021P_CONFORMING = 0xFB010110,OID_QOS_FLOW_8021P_NONCONFORMING = 0xFB010111,OID_QOS_ENABLE_AVG_STATS = 0xFB010112,OID_QOS_ENABLE_WINDOW_ADJUSTMENT = 0xFB010113,};
enum MACRO_PADDING {PKCS5_PADDING = 1,RANDOM_PADDING = 2,ZERO_PADDING = 3,};
enum MACRO_PAGESET {PAGESET_TOLASTPAGE = 65535,};
enum MACRO_PARMNUM {PARMNUM_ALL = 0,};
enum MACRO_PATCOPY {PATCOPY = 0xF00021,};
enum MACRO_PATHLEN {PATHLEN = 256,};
enum MACRO_PC_NONE {PC_NONE = 0,PC_POLYGON = 1,PC_RECTANGLE = 2,PC_WINDPOLYGON = 4,PC_TRAPEZOID = 4,PC_SCANLINE = 8,PC_WIDE = 16,PC_STYLED = 32,PC_WIDESTYLED = 64,PC_INTERIORS = 128,PC_POLYPOLYGON = 256,PC_PATHS = 512,};
enum MACRO_PDTIMER {PDTIMER_RESET = 0x1,};
enum MACRO_PERPROP {PERPROP_E_FIRST = 0x80040200,PERPROP_E_LAST = 0x8004020F,PERPROP_S_FIRST = 0x40200,PERPROP_S_LAST = 0x4020F,PERPROP_E_NOPAGEAVAILABLE = 0x80040200,};
enum MACRO_PERSIST {PERSIST_E_SIZEDEFINITE = 0x800B0009,PERSIST_E_SIZEINDEFINITE = 0x800B000A,PERSIST_E_NOTSELFSIZING = 0x800B000B,};
enum MACRO_PFINDEX {PFINDEX_UNINITIALIZED = 0,PFINDEX_UNSUPPORTED = -1,};
enum MACRO_PF_IRDA {PF_IRDA = 26,};
enum MACRO_PICTYPE {PICTYPE_UNINITIALIZED = -1,PICTYPE_NONE = 0,PICTYPE_BITMAP = 1,PICTYPE_METAFILE = 2,PICTYPE_ICON = 3,PICTYPE_ENHMETAFILE = 4,};
enum MACRO_PIDDRSI {PIDDRSI_PROTECTED = 2,PIDDRSI_DESCRIPTION = 3,PIDDRSI_PLAYCOUNT = 4,PIDDRSI_PLAYSTARTS = 5,PIDDRSI_PLAYEXPIRES = 6,};
enum MACRO_PID_IPX {PID_IPX = 0x2B,PID_IP = 0x21,PID_NBF = 0x3F,};
enum MACRO_PINBALL {PINBALL_FILE_SYSTEM = 0x59,};
enum MACRO_PRESSED {RIGHT_ALT_PRESSED = 0x1,LEFT_ALT_PRESSED = 0x2,RIGHT_CTRL_PRESSED = 0x4,LEFT_CTRL_PRESSED = 0x8,SHIFT_PRESSED = 0x10,};
enum MACRO_PRIMARY {PRIMARY_ORDER_ABC = 0,PRIMARY_ORDER_ACB = 1,PRIMARY_ORDER_BAC = 2,PRIMARY_ORDER_BCA = 3,PRIMARY_ORDER_CBA = 4,PRIMARY_ORDER_CAB = 5,};
enum MACRO_PRINTER {PRINTER_CONTROL_PAUSE = 1,PRINTER_CONTROL_RESUME = 2,PRINTER_CONTROL_PURGE = 3,PRINTER_CONTROL_SET_STATUS = 4,PRINTER_STATUS_PAUSED = 1,PRINTER_STATUS_ERROR = 2,PRINTER_STATUS_PENDING_DELETION = 4,PRINTER_STATUS_PAPER_JAM = 8,PRINTER_STATUS_PAPER_OUT = 16,PRINTER_STATUS_MANUAL_FEED = 32,PRINTER_STATUS_PAPER_PROBLEM = 64,PRINTER_STATUS_OFFLINE = 128,PRINTER_STATUS_IO_ACTIVE = 256,PRINTER_STATUS_BUSY = 512,PRINTER_STATUS_PRINTING = 1024,PRINTER_STATUS_OUTPUT_BIN_FULL = 2048,PRINTER_STATUS_NOT_AVAILABLE = 4096,PRINTER_STATUS_WAITING = 8192,PRINTER_STATUS_PROCESSING = 16384,PRINTER_STATUS_INITIALIZING = 32768,PRINTER_STATUS_WARMING_UP = 65536,PRINTER_STATUS_TONER_LOW = 131072,PRINTER_STATUS_NO_TONER = 262144,PRINTER_STATUS_PAGE_PUNT = 524288,PRINTER_STATUS_USER_INTERVENTION = 1048576,PRINTER_STATUS_OUT_OF_MEMORY = 2097152,PRINTER_STATUS_DOOR_OPEN = 4194304,PRINTER_STATUS_SERVER_UNKNOWN = 8388608,PRINTER_STATUS_POWER_SAVE = 16777216,PRINTER_ATTRIBUTE_QUEUED = 1,PRINTER_ATTRIBUTE_DIRECT = 2,PRINTER_ATTRIBUTE_DEFAULT = 4,PRINTER_ATTRIBUTE_SHARED = 8,PRINTER_ATTRIBUTE_NETWORK = 16,PRINTER_ATTRIBUTE_HIDDEN = 32,PRINTER_ATTRIBUTE_LOCAL = 64,PRINTER_ATTRIBUTE_ENABLE_DEVQ = 128,PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = 256,PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = 512,PRINTER_ATTRIBUTE_WORK_OFFLINE = 1024,PRINTER_ATTRIBUTE_ENABLE_BIDI = 2048,PRINTER_ATTRIBUTE_RAW_ONLY = 4096,PRINTER_ATTRIBUTE_PUBLISHED = 8192,PRINTER_ATTRIBUTE_FAX = 16384,PRINTER_ATTRIBUTE_TS = 32768,};
enum MACRO_PROCESS {PROCESS_TERMINATE = 0x1,PROCESS_CREATE_THREAD = 0x2,PROCESS_SET_SESSIONID = 0x4,PROCESS_VM_OPERATION = 0x8,PROCESS_VM_READ = 0x10,PROCESS_VM_WRITE = 0x20,PROCESS_DUP_HANDLE = 0x40,PROCESS_CREATE_PROCESS = 0x80,PROCESS_SET_QUOTA = 0x100,PROCESS_SET_INFORMATION = 0x200,PROCESS_QUERY_INFORMATION = 0x400,PROCESS_SUSPEND_RESUME = 0x800,PROCESS_ALL_ACCESS = 0x1F0FFF,};
enum MACRO_PROFILE {PROFILE_USER = 0x10000000,PROFILE_KERNEL = 0x20000000,PROFILE_SERVER = 0x40000000,};
enum MACRO_PROGDLG {PROGDLG_NORMAL = 0x0,PROGDLG_MODAL = 0x1,PROGDLG_AUTOTIME = 0x2,PROGDLG_NOTIME = 0x4,PROGDLG_NOMINIMIZE = 0x8,PROGDLG_NOPROGRESSBAR = 0x10,};
enum MACRO_PROPSET {PROPSET_BEHAVIOR_CASE_SENSITIVE = 1,};
enum MACRO_PSIDENT {PSIDENT_GDICENTRIC = 0,PSIDENT_PSCENTRIC = 1,};
enum MACRO_QCMINFO {QCMINFO_PLACE_BEFORE = 0,QCMINFO_PLACE_AFTER = 1,};
enum MACRO_QUALITY {DEFAULT_QUALITY = 0,DRAFT_QUALITY = 1,PROOF_QUALITY = 2,NONANTIALIASED_QUALITY = 3,ANTIALIASED_QUALITY = 4,CLEARTYPE_QUALITY = 5,CLEARTYPE_NATURAL_QUALITY = 6,};
enum MACRO_RAMDISK {RAMDISK_BOOT_INITIALIZATION_FAILED = 0xF8,};
enum MACRO_RASCCPO {RASCCPO_Compression = 0x1,RASCCPO_HistoryLess = 0x2,RASCCPO_Encryption56bit = 0x10,RASCCPO_Encryption40bit = 0x20,RASCCPO_Encryption128bit = 0x40,};
enum MACRO_RASEAPF {RASEAPF_NonInteractive = 0x2,RASEAPF_Logon = 0x4,RASEAPF_Preview = 0x8,};
enum MACRO_RASLCPO {RASLCPO_PFC = 0x1,RASLCPO_ACFC = 0x2,RASLCPO_SSHF = 0x4,RASLCPO_DES_56 = 0x8,RASLCPO_3_DES = 0x10,};
enum MACRO_RASPRIV {RASPRIV_NoCallback = 0x1,RASPRIV_AdminSetCallback = 0x2,RASPRIV_CallerSetCallback = 0x4,RASPRIV_DialinPrivilege = 0x8,RASPRIV_CallbackType = 0x7,};
enum MACRO_RC_CHOP {RC_CHOP = 768,RC_UP = 512,RC_DOWN = 256,RC_NEAR = 0,};
enum MACRO_REPLACE {REPLACE_PRIMARY = 0xA,REPLACE_ALTERNATE = 0xB,};
enum MACRO_SANDBOX {SANDBOX_INERT = 0x2,};
enum MACRO_SB_HORZ {SB_HORZ = 0,SB_VERT = 1,SB_CTL = 2,SB_BOTH = 3,SB_LINEUP = 0,SB_LINELEFT = 0,SB_LINEDOWN = 1,SB_LINERIGHT = 1,SB_PAGEUP = 2,SB_PAGELEFT = 2,SB_PAGEDOWN = 3,SB_PAGERIGHT = 3,SB_THUMBPOSITION = 4,SB_THUMBTRACK = 5,SB_TOP = 6,SB_LEFT = 6,SB_BOTTOM = 7,SB_RIGHT = 7,SB_ENDSCROLL = 8,};
enum MACRO_SCS_CAP {SCS_CAP_COMPSTR = 0x1,SCS_CAP_MAKEREAD = 0x2,SCS_CAP_SETRECONVERTSTRING = 0x4,};
enum MACRO_SECTION {SECTION_QUERY = 0x1,SECTION_MAP_WRITE = 0x2,SECTION_MAP_READ = 0x4,SECTION_MAP_EXECUTE = 0x8,SECTION_EXTEND_SIZE = 0x10,SECTION_ALL_ACCESS = 0xF001F,};
enum MACRO_SELFLAG {SELFLAG_NONE = 0,SELFLAG_TAKEFOCUS = 1,SELFLAG_TAKESELECTION = 2,SELFLAG_EXTENDSELECTION = 4,SELFLAG_ADDSELECTION = 8,SELFLAG_REMOVESELECTION = 16,SELFLAG_VALID = 31,};
enum MACRO_SELFREG {SELFREG_E_FIRST = 0x80040200,SELFREG_E_LAST = 0x8004020F,SELFREG_S_FIRST = 0x40200,SELFREG_S_LAST = 0x4020F,SELFREG_E_TYPELIB = 0x80040200,SELFREG_E_CLASS = 0x80040201,};
enum MACRO_SERVICE {SERVICE_KERNEL_DRIVER = 0x1,SERVICE_FILE_SYSTEM_DRIVER = 0x2,SERVICE_ADAPTER = 0x4,SERVICE_RECOGNIZER_DRIVER = 0x8,SERVICE_DRIVER = 0xB,SERVICE_WIN32_OWN_PROCESS = 0x10,SERVICE_WIN32_SHARE_PROCESS = 0x20,SERVICE_WIN32 = 0x30,SERVICE_INTERACTIVE_PROCESS = 0x100,SERVICE_TYPE_ALL = 0x13F,SERVICE_BOOT_START = 0x0,SERVICE_SYSTEM_START = 0x1,SERVICE_AUTO_START = 0x2,SERVICE_DEMAND_START = 0x3,SERVICE_DISABLED = 0x4,SERVICE_ERROR_IGNORE = 0x0,SERVICE_ERROR_NORMAL = 0x1,SERVICE_ERROR_SEVERE = 0x2,SERVICE_ERROR_CRITICAL = 0x3,};
enum MACRO_SESSION {SESSION_ESTABLISHED = 0x3,};
enum MACRO_SETXOFF {SETXOFF = 1,SETXON = 2,};
enum MACRO_SET_ARC {SET_ARC_DIRECTION = 4102,SET_BACKGROUND_COLOR = 4103,SET_POLY_MODE = 4104,SET_SCREEN_ANGLE = 4105,SET_SPREAD = 4106,};
enum MACRO_SHGDFIL {SHGDFIL_FINDDATA = 1,SHGDFIL_NETRESOURCE = 2,SHGDFIL_DESCRIPTIONID = 3,};
enum MACRO_SHGVSPB {SHGVSPB_PERUSER = 0x1,SHGVSPB_ALLUSERS = 0x2,SHGVSPB_PERFOLDER = 0x4,SHGVSPB_ALLFOLDERS = 0x8,SHGVSPB_INHERIT = 0x10,SHGVSPB_ROAM = 0x20,SHGVSPB_NOAUTODEFAULTS = 0x80000000,SHGVSPB_FOLDER = 0x5,SHGVSPB_FOLDERNODEFAULTS = 0x80000005,SHGVSPB_USERDEFAULTS = 0x9,SHGVSPB_GLOBALDEAFAULTS = 0xA,};
enum MACRO_SHPWLEN {SHPWLEN = 8,};
enum MACRO_SIO_CHK {SIO_CHK_QOS = -603979775,};
enum MACRO_SO_FLAG {SO_FLAG_DEFAULT_PLACEMENT = 0x1,SO_HORIZONTAL = 0x2,SO_VERTICAL = 0x4,SO_REVERSED = 0x8,SO_ZERO_BEARINGS = 0x10,SO_CHAR_INC_EQUAL_BM_BASE = 0x20,SO_MAXEXT_EQUAL_BM_SIDE = 0x40,SO_DO_NOT_SUBSTITUTE_DEVICE_FONT = 0x80,SO_GLYPHINDEX_TEXTOUT = 0x100,SO_ESC_NOT_ORIENT = 0x200,SO_DXDY = 0x400,SO_CHARACTER_EXTRA = 0x800,SO_BREAK_EXTRA = 0x1000,};
enum MACRO_SPEAKER {SPEAKER_FRONT_LEFT = 0x1,SPEAKER_FRONT_RIGHT = 0x2,SPEAKER_FRONT_CENTER = 0x4,SPEAKER_LOW_FREQUENCY = 0x8,SPEAKER_BACK_LEFT = 0x10,SPEAKER_BACK_RIGHT = 0x20,SPEAKER_FRONT_LEFT_OF_CENTER = 0x40,SPEAKER_FRONT_RIGHT_OF_CENTER = 0x80,SPEAKER_BACK_CENTER = 0x100,SPEAKER_SIDE_LEFT = 0x200,SPEAKER_SIDE_RIGHT = 0x400,SPEAKER_TOP_CENTER = 0x800,SPEAKER_TOP_FRONT_LEFT = 0x1000,SPEAKER_TOP_FRONT_CENTER = 0x2000,SPEAKER_TOP_FRONT_RIGHT = 0x4000,SPEAKER_TOP_BACK_LEFT = 0x8000,SPEAKER_TOP_BACK_CENTER = 0x10000,SPEAKER_TOP_BACK_RIGHT = 0x20000,SPEAKER_RESERVED = 0x7FFC0000,SPEAKER_ALL = 0x80000000,};
enum MACRO_SPECIAL {SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION = 0xC1,};
enum MACRO_SPFILEQ {SPFILEQ_FILE_IN_USE = 0x1,SPFILEQ_REBOOT_RECOMMENDED = 0x2,SPFILEQ_REBOOT_IN_PROGRESS = 0x4,};
enum MACRO_SP_COPY {SP_COPY_DELETESOURCE = 0x1,SP_COPY_REPLACEONLY = 0x2,SP_COPY_NEWER = 0x4,SP_COPY_NEWER_OR_SAME = 0x4,SP_COPY_NOOVERWRITE = 0x8,SP_COPY_NODECOMP = 0x10,SP_COPY_LANGUAGEAWARE = 0x20,SP_COPY_SOURCE_ABSOLUTE = 0x40,SP_COPY_SOURCEPATH_ABSOLUTE = 0x80,SP_COPY_IN_USE_NEEDS_REBOOT = 0x100,SP_COPY_FORCE_IN_USE = 0x200,SP_COPY_NOSKIP = 0x400,SP_FLAG_CABINETCONTINUATION = 0x800,SP_COPY_FORCE_NOOVERWRITE = 0x1000,SP_COPY_FORCE_NEWER = 0x2000,SP_COPY_WARNIFSKIP = 0x4000,SP_COPY_NOBROWSE = 0x8000,SP_COPY_NEWER_ONLY = 0x10000,SP_COPY_SOURCE_SIS_MASTER = 0x20000,SP_COPY_OEMINF_CATALOG_ONLY = 0x40000,SP_COPY_REPLACE_BOOT_FILE = 0x80000,SP_COPY_NOPRUNE = 0x100000,SP_COPY_OEM_F6_INF = 0x200000,SP_BACKUP_BACKUPPASS = 0x1,SP_BACKUP_DEMANDPASS = 0x2,SP_BACKUP_SPECIAL = 0x4,SP_BACKUP_BOOTFILE = 0x8,};
enum MACRO_SRCCOPY {SRCCOPY = 0xCC0020,};
enum MACRO_SRCINFO {SRCINFO_TAGFILE = 2,SRCINFO_DESCRIPTION = 3,SRCINFO_FLAGS = 4,SRCINFO_TAGFILE2 = 5,};
enum MACRO_SRCLIST {SRCLIST_TEMPORARY = 0x1,SRCLIST_NOBROWSE = 0x2,SRCLIST_SYSTEM = 0x10,SRCLIST_USER = 0x20,SRCLIST_SYSIFADMIN = 0x40,SRCLIST_SUBDIRS = 0x100,SRCLIST_APPEND = 0x200,SRCLIST_NOSTRIPPLATFORM = 0x400,};
enum MACRO_SS_SAVE {SS_SAVE = 0,SS_RESTORE = 1,SS_FREE = 2,};
enum MACRO_STDOLE2 {STDOLE2_MAJORVERNUM = 0x2,STDOLE2_MINORVERNUM = 0x0,STDOLE2_LCID = 0x0,};
enum MACRO_STD_CUT {STD_CUT = 0,STD_COPY = 1,STD_PASTE = 2,STD_UNDO = 3,STD_REDOW = 4,STD_DELETE = 5,STD_FILENEW = 6,STD_FILEOPEN = 7,STD_FILESAVE = 8,STD_PRINTPRE = 9,STD_PROPERTIES = 10,STD_HELP = 11,STD_FIND = 12,STD_REPLACE = 13,STD_PRINT = 14,};
enum MACRO_STREAMS {STREAMS_INTERNAL_ERROR = 0x4B,FATAL_UNHANDLED_HARD_ERROR = 0x4C,};
enum MACRO_STRETCH {STRETCH_ANDSCANS = 1,STRETCH_ORSCANS = 2,STRETCH_DELETESCANS = 3,STRETCH_HALFTONE = 4,};
enum MACRO_STXTLEN {STXTLEN = 256,};
enum MACRO_SUBLANG {SUBLANG_NEUTRAL = 0x0,SUBLANG_DEFAULT = 0x1,SUBLANG_SYS_DEFAULT = 0x2,SUBLANG_ARABIC_SAUDI_ARABIA = 0x1,SUBLANG_ARABIC_IRAQ = 0x2,SUBLANG_ARABIC_EGYPT = 0x3,SUBLANG_ARABIC_LIBYA = 0x4,SUBLANG_ARABIC_ALGERIA = 0x5,SUBLANG_ARABIC_MOROCCO = 0x6,SUBLANG_ARABIC_TUNISIA = 0x7,SUBLANG_ARABIC_OMAN = 0x8,SUBLANG_ARABIC_YEMEN = 0x9,SUBLANG_ARABIC_SYRIA = 0xA,SUBLANG_ARABIC_JORDAN = 0xB,SUBLANG_ARABIC_LEBANON = 0xC,SUBLANG_ARABIC_KUWAIT = 0xD,SUBLANG_ARABIC_UAE = 0xE,SUBLANG_ARABIC_BAHRAIN = 0xF,SUBLANG_ARABIC_QATAR = 0x10,SUBLANG_AZERI_LATIN = 0x1,SUBLANG_AZERI_CYRILLIC = 0x2,SUBLANG_CHINESE_TRADITIONAL = 0x1,SUBLANG_CHINESE_SIMPLIFIED = 0x2,SUBLANG_CHINESE_HONGKONG = 0x3,SUBLANG_CHINESE_SINGAPORE = 0x4,SUBLANG_CHINESE_MACAU = 0x5,SUBLANG_DUTCH = 0x1,SUBLANG_DUTCH_BELGIAN = 0x2,SUBLANG_ENGLISH_US = 0x1,SUBLANG_ENGLISH_UK = 0x2,SUBLANG_ENGLISH_AUS = 0x3,SUBLANG_ENGLISH_CAN = 0x4,SUBLANG_ENGLISH_NZ = 0x5,SUBLANG_ENGLISH_EIRE = 0x6,SUBLANG_ENGLISH_SOUTH_AFRICA = 0x7,SUBLANG_ENGLISH_JAMAICA = 0x8,SUBLANG_ENGLISH_CARIBBEAN = 0x9,SUBLANG_ENGLISH_BELIZE = 0xA,SUBLANG_ENGLISH_TRINIDAD = 0xB,SUBLANG_ENGLISH_ZIMBABWE = 0xC,SUBLANG_ENGLISH_PHILIPPINES = 0xD,SUBLANG_FRENCH = 0x1,SUBLANG_FRENCH_BELGIAN = 0x2,SUBLANG_FRENCH_CANADIAN = 0x3,SUBLANG_FRENCH_SWISS = 0x4,SUBLANG_FRENCH_LUXEMBOURG = 0x5,SUBLANG_FRENCH_MONACO = 0x6,SUBLANG_GERMAN = 0x1,SUBLANG_GERMAN_SWISS = 0x2,SUBLANG_GERMAN_AUSTRIAN = 0x3,SUBLANG_GERMAN_LUXEMBOURG = 0x4,SUBLANG_GERMAN_LIECHTENSTEIN = 0x5,SUBLANG_ITALIAN = 0x1,SUBLANG_ITALIAN_SWISS = 0x2,SUBLANG_KASHMIRI_SASIA = 0x2,SUBLANG_KASHMIRI_INDIA = 0x2,SUBLANG_KOREAN = 0x1,SUBLANG_LITHUANIAN = 0x1,SUBLANG_MALAY_MALAYSIA = 0x1,SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x2,SUBLANG_NEPALI_INDIA = 0x2,SUBLANG_NORWEGIAN_BOKMAL = 0x1,SUBLANG_NORWEGIAN_NYNORSK = 0x2,SUBLANG_PORTUGUESE = 0x2,SUBLANG_PORTUGUESE_BRAZILIAN = 0x1,SUBLANG_SERBIAN_LATIN = 0x2,SUBLANG_SERBIAN_CYRILLIC = 0x3,SUBLANG_SPANISH = 0x1,SUBLANG_SPANISH_MEXICAN = 0x2,SUBLANG_SPANISH_MODERN = 0x3,SUBLANG_SPANISH_GUATEMALA = 0x4,SUBLANG_SPANISH_COSTA_RICA = 0x5,SUBLANG_SPANISH_PANAMA = 0x6,SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x7,SUBLANG_SPANISH_VENEZUELA = 0x8,SUBLANG_SPANISH_COLOMBIA = 0x9,SUBLANG_SPANISH_PERU = 0xA,SUBLANG_SPANISH_ARGENTINA = 0xB,SUBLANG_SPANISH_ECUADOR = 0xC,SUBLANG_SPANISH_CHILE = 0xD,SUBLANG_SPANISH_URUGUAY = 0xE,SUBLANG_SPANISH_PARAGUAY = 0xF,SUBLANG_SPANISH_BOLIVIA = 0x10,SUBLANG_SPANISH_EL_SALVADOR = 0x11,SUBLANG_SPANISH_HONDURAS = 0x12,SUBLANG_SPANISH_NICARAGUA = 0x13,SUBLANG_SPANISH_PUERTO_RICO = 0x14,SUBLANG_SWEDISH = 0x1,SUBLANG_SWEDISH_FINLAND = 0x2,SUBLANG_URDU_PAKISTAN = 0x1,SUBLANG_URDU_INDIA = 0x2,SUBLANG_UZBEK_LATIN = 0x1,SUBLANG_UZBEK_CYRILLIC = 0x2,};
enum MACRO_TBDDRET {TBDDRET_DEFAULT = 0,TBDDRET_NODEFAULT = 1,TBDDRET_TREATPRESSED = 2,};
enum MACRO_TBSTATE {TBSTATE_CHECKED = 0x1,TBSTATE_PRESSED = 0x2,TBSTATE_ENABLED = 0x4,TBSTATE_HIDDEN = 0x8,TBSTATE_INDETERMINATE = 0x10,TBSTATE_WRAP = 0x20,TBSTATE_ELLIPSES = 0x40,TBSTATE_MARKED = 0x80,};
enum MACRO_TBSTYLE {TBSTYLE_BUTTON = 0x0,TBSTYLE_SEP = 0x1,TBSTYLE_CHECK = 0x2,TBSTYLE_GROUP = 0x4,TBSTYLE_CHECKGROUP = 0x6,TBSTYLE_DROPDOWN = 0x8,TBSTYLE_AUTOSIZE = 0x10,TBSTYLE_NOPREFIX = 0x20,TBSTYLE_TOOLTIPS = 0x100,TBSTYLE_WRAPABLE = 0x200,TBSTYLE_ALTDRAG = 0x400,TBSTYLE_FLAT = 0x800,TBSTYLE_LIST = 0x1000,TBSTYLE_CUSTOMERASE = 0x2000,TBSTYLE_REGISTERDROP = 0x4000,TBSTYLE_TRANSPARENT = 0x8000,TBSTYLE_EX_DRAWDDARROWS = 0x1,};
enum MACRO_TIFLAGS {TIFLAGS_EXTENDDISPATCHONLY = 0x1,};
enum MACRO_TIMEOUT {TIMEOUT_ASYNC = 0xFFFFFFFF,};
enum MACRO_TIME_MS {TIME_MS = 0x1,TIME_SAMPLES = 0x2,TIME_BYTES = 0x4,TIME_SMPTE = 0x8,TIME_MIDI = 0x10,TIME_TICKS = 0x20,};
enum MACRO_TRUST_E {TRUST_E_PROVIDER_UNKNOWN = 0x800B0001,TRUST_E_ACTION_UNKNOWN = 0x800B0002,TRUST_E_SUBJECT_FORM_UNKNOWN = 0x800B0003,TRUST_E_SUBJECT_NOT_TRUSTED = 0x800B0004,};
enum MACRO_TVIF_DI {TVIF_DI_SETITEM = 0x1000,};
enum MACRO_UNICODE {UNICODE_STRING_MAX_BYTES = 65534,UNICODE_STRING_MAX_CHARS = 32767,};
enum MACRO_URLZONE {URLZONE_ESC_FLAG = 0x100,};
enum MACRO_VARIANT {VARIANT_TRUE = -1,VARIANT_FALSE = 0,};
enum MACRO_VERSION {DIRECT3D_VERSION = 0x800,D3D_SDK_VERSION = 0xDC,};
enum MACRO_VERTRES {VERTRES = 10,};
enum MACRO_WAVEOUT {WAVEOUT_MAPPER_STATUS_DEVICE = 0,WAVEOUT_MAPPER_STATUS_MAPPED = 1,WAVEOUT_MAPPER_STATUS_FORMAT = 2,};
enum MACRO_WINDOWS {WINDOWS_AF_IRDA = 26,WINDOWS_PF_IRDA = 26,};
enum MACRO_WINPERF {WINPERF_LOG_NONE = 0,WINPERF_LOG_USER = 1,WINPERF_LOG_DEBUG = 2,WINPERF_LOG_VERBOSE = 3,};
enum MACRO_WINSOCK {WINSOCK_VERSION = 514,};
enum MACRO_WMIGUID {WMIGUID_QUERY = 0x1,WMIGUID_SET = 0x2,WMIGUID_NOTIFICATION = 0x4,WMIGUID_READ_DESCRIPTION = 0x8,WMIGUID_EXECUTE = 0x10,};
enum MACRO_XENROLL {XENROLL_E_KEY_NOT_EXPORTABLE = 0x80095000,XENROLL_E_CANNOT_ADD_ROOT_CERT = 0x80095001,XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = 0x80095002,XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = 0x80095003,XENROLL_E_RESPONSE_KA_HASH_MISMATCH = 0x80095004,XENROLL_E_KEYSPEC_SMIME_MISMATCH = 0x80095005,};
enum MACRO__FACD3D {_FACD3D = 0x876,};
enum MACRO__IOREAD {_IOREAD = 0x1,_IOWRT = 0x2,};
enum MACRO__MCW_DN {_MCW_DN = 0x3000000,};
enum MACRO__MCW_IC {_MCW_IC = 0x40000,};
enum MACRO__MCW_PC {_MCW_PC = 0x30000,};
enum MACRO__MCW_RC {_MCW_RC = 0x300,};
enum MACRO__REPORT {_REPORT_ERRMODE = 3,};
enum MACRO_ctlLast {ctlLast = 0x4FF,};
enum MACRO_dwFORCE {dwFORCE_KEY_PROTECTION_DISABLED = 0x0,dwFORCE_KEY_PROTECTION_USER_SELECT = 0x1,dwFORCE_KEY_PROTECTION_HIGH = 0x2,};
enum MACRO_pshHelp {pshHelp = 1038,};
typedef struct _MCDBLENDSTATE MCDBLENDSTATE;
typedef struct _MCDRIVERINFO MCDDRIVERINFO;
typedef struct _MCDLAYERPLANE MCDLAYERPLANE;
typedef struct _MCDPIXELSTATE MCDPIXELSTATE;
typedef struct _30C092ACFDACA2A085242C6994837CA9 MCHITTESTINFO;
typedef struct tagMCI_SET_PARMS MCI_SET_PARMS;
typedef struct tagMENUITEMINFOA MENUITEMINFOA;
typedef struct tagMENUITEMINFOW MENUITEMINFOW;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;
typedef struct _3D26434F5A7D20980B51C6D4C88FA6DE MFT_ENUM_DATA;
typedef struct _MIB_IPADDRROW MIB_IPADDRROW;
typedef struct _MIB_IPDESTROW MIB_IPDESTROW;
typedef struct _MIB_MFE_TABLE MIB_MFE_TABLE;
typedef struct tagMIDIOUTCAPS2A MIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W MIDIOUTCAPS2W;
typedef struct midiproptempo_tag MIDIPROPTEMPO;
typedef struct tagMIXERCONTROLA MIXERCONTROLA;
typedef struct tagMIXERCONTROLW MIXERCONTROLW;
typedef struct _MODEMSETTINGS MODEMSETTINGS;
typedef struct tagMONCONVSTRUCT MONCONVSTRUCT;
typedef struct tagMONHSZSTRUCTA MONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW MONHSZSTRUCTW;
typedef struct tagMONLINKSTRUCT MONLINKSTRUCT;
typedef struct tagMSGBOXPARAMSA MSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW MSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA MULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW MULTIKEYHELPW;
typedef struct _5DBE423D59383EF3676E2D6AC9F8E7EA MainAVIHeader;
typedef struct _NETINFOSTRUCT NETINFOSTRUCT;
typedef struct _NETRESOURCE2A NETRESOURCE2A;
typedef struct _NETRESOURCE2W NETRESOURCE2W;
typedef struct _BEA4C6939D98A17C28446F73864087A3 NMCBEENDEDITA;
typedef struct _2E2AA9F03C861A9A9D27DBF19670D54B NMCBEENDEDITW;
typedef struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38 NMCOMBOBOXEXA;
typedef struct _E76253F876E841F225888AB457FD0286 NMCOMBOBOXEXW;
typedef struct tagNMHDDISPINFOA NMHDDISPINFOA;
typedef struct tagNMHDDISPINFOW NMHDDISPINFOW;
typedef struct tagNMLVCACHEHINT NMLVCACHEHINT;
typedef struct tagLVDISPINFO NMLVDISPINFOA;
typedef struct tagLVDISPINFOW NMLVDISPINFOW;
typedef struct tagNMLVFINDITEMA NMLVFINDITEMA;
typedef struct tagNMLVFINDITEMW NMLVFINDITEMW;
typedef struct _9D580AF0AEFB1291AC1A38F1BACA0CDC NMTBDISPINFOA;
typedef struct _1C7B1951FFF3947E82177A9E3997A43B NMTBDISPINFOW;
typedef struct tagNMTTDISPINFOA NMTTDISPINFOA;
typedef struct tagNMTTDISPINFOW NMTTDISPINFOW;
typedef struct tagTVDISPINFOA NMTVDISPINFOA;
typedef struct tagTVDISPINFOW NMTVDISPINFOW;
typedef struct tagCHARSETINFO *NPCHARSETINFO;
typedef struct tagEVENTMSG *NPEVENTMSGMSG;
typedef struct tagEXTLOGFONTA *NPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *NPEXTLOGFONTW;
typedef struct tagMIDIINCAPSA *NPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *NPMIDIINCAPSW;
typedef struct tagPAINTSTRUCT *NPPAINTSTRUCT;
typedef struct tagSOFTKBDDATA *NPSOFTKBDDATA;
typedef struct tagTEXTMETRICA *NPTEXTMETRICA;
typedef struct tagTEXTMETRICW *NPTEXTMETRICW;
typedef struct tagWAVEINCAPSA *NPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *NPWAVEINCAPSW;
typedef struct tagWNDCLASSEXA *NPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *NPWNDCLASSEXW;
enum OLECMDEXECOPT {OLECMDEXECOPT_DODEFAULT = 0x0,OLECMDEXECOPT_PROMPTUSER = 0x1,OLECMDEXECOPT_DONTPROMPTUSER = 0x2,OLECMDEXECOPT_SHOWHELP = 0x3,};
typedef struct _OLESTREAMVTBL OLESTREAMVTBL;
typedef struct _FC03820C0C9B455049C143518E71A23B OPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 OPENCARDNAMEW;
typedef struct tagOFNA OPENFILENAMEA;
typedef struct tagOFNW OPENFILENAMEW;
typedef struct tagPSDA PAGESETUPDLGA;
typedef struct tagPSDW PAGESETUPDLGW;
typedef IAVIStreaming *PAVISTREAMING;
typedef struct _BPC_FILETIME *PBPC_FILETIME;
typedef struct tagCapInfoChunk *PCAPINFOCHUNK;
typedef struct tagCaptureParms *PCAPTUREPARMS;
typedef struct _CC_BYTE_PAIR *PCC_BYTE_PAIR;
typedef struct _CERT_CONTEXT *PCERT_CONTEXT;
typedef struct channel_caps_tag *PCHANNEL_CAPS;
typedef struct _CMS_KEY_INFO *PCMS_KEY_INFO;
typedef struct pcmwaveformat_tag PCMWAVEFORMAT;
typedef struct tagCOMBOBOXINFO *PCOMBOBOXINFO;
typedef struct _CPSUICBPARAM *PCPSUICBPARAM;
typedef struct _CREDUI_INFOA *PCREDUI_INFOA;
typedef struct _CREDUI_INFOW *PCREDUI_INFOW;
typedef struct tagCWPRETSTRUCT *PCWPRETSTRUCT;
typedef struct _DDGETIRQINFO *PDDGETIRQINFO;
typedef struct _DDLOCKININFO *PDDLOCKININFO;
typedef struct _DDNTCORECAPS *PDDNTCORECAPS;
typedef DD_CALLBACKS *PDD_CALLBACKS;
typedef struct tagDESIGNVECTOR *PDESIGNVECTOR;
typedef struct _DEVHTADJDATA *PDEVHTADJDATA;
typedef struct _DISK_LOGGING *PDISK_LOGGING;
typedef struct _DRIVERSTATUS *PDRIVERSTATUS;
typedef struct _EFS_KEY_INFO *PEFS_KEY_INFO;
typedef struct _EFS_RPC_BLOB *PEFS_RPC_BLOB;
typedef struct tagABORTPATH *PEMRABORTPATH;
typedef struct tagABORTPATH *PEMRBEGINPATH;
typedef struct tagEMRCREATEPEN *PEMRCREATEPEN;
typedef struct tagEMREXTESCAPE *PEMREXTESCAPE;
typedef struct tagEMRGLSRECORD *PEMRGLSRECORD;
typedef struct tagEMRINVERTRGN *PEMRINVERTRGN;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYGON16;
typedef struct tagEMRELLIPSE *PEMRRECTANGLE;
typedef struct tagEMRRESTOREDC *PEMRRESTOREDC;
typedef struct tagEMRROUNDRECT *PEMRROUNDRECT;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETBKMODE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETLAYOUT;
typedef struct tagEMRSETPIXELV *PEMRSETPIXELV;
typedef struct tagABORTPATH *PEMRWIDENPATH;
typedef IEnumACString *PENUMACSTRING;
typedef struct _FD_GLYPHATTR *PFD_GLYPHATTR;
typedef void ( *PFN_CMSG_FREE)(void *pv);
typedef struct _FORM_INFO_1A *PFORM_INFO_1A;
typedef struct _FORM_INFO_1W *PFORM_INFO_1W;
typedef struct tagHELPWININFOA *PHELPWININFOA;
typedef struct tagHELPWININFOW *PHELPWININFOW;
typedef struct tagICONMETRICSA *PICONMETRICSA;
typedef struct tagICONMETRICSW *PICONMETRICSW;
typedef struct tagINPUTCONTEXT *PINPUTCONTEXT;
typedef struct _INPUT_RECORD *PINPUT_RECORD;
typedef struct _IOSPACE_EX32 *PIOSPACE_EX32;
typedef struct _IOSPACE_EX64 *PIOSPACE_EX64;
typedef struct tagKbdNlsLayer *PKBDNLSTABLES;
typedef union _A4FB595EF421231CAF150DDD3288A6D5 *PKSDATAFORMAT;
typedef struct _117E3A994AEBF040E18388CACE709509 *PKSIDENTIFIER;
typedef struct _204C6CB5B1CC0D35B371E5C594718A83 *PKSRESOLUTION;
typedef struct _KS_DVD_YCrCb *PKS_DVD_YCrCb;
typedef struct tagKS_VIDEOINFO *PKS_VIDEOINFO;
typedef struct tagLHITTESTINFO *PLHITTESTINFO;
typedef LIST_ENTRY32 *PLIST_ENTRY32;
typedef LIST_ENTRY64 *PLIST_ENTRY64;
typedef struct tagLVSETINFOTIP *PLVSETINFOTIP;
typedef struct _MIBICMPSTATS *PMIBICMPSTATS;
typedef struct _MIB_IFNUMBER *PMIB_IFNUMBER;
typedef struct _MIB_IFSTATUS *PMIB_IFSTATUS;
typedef struct _MIB_IPNETROW *PMIB_IPNETROW;
typedef struct _MIB_PROXYARP *PMIB_PROXYARP;
typedef struct _MIB_TCPSTATS *PMIB_TCPSTATS;
typedef struct _MIB_TCPTABLE *PMIB_TCPTABLE;
typedef struct _MIB_UDPSTATS *PMIB_UDPSTATS;
typedef struct _MIB_UDPTABLE *PMIB_UDPTABLE;
typedef struct tagMIDIINCAPS2A *PMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W *PMIDIINCAPS2W;
typedef struct tagMIDIOUTCAPSA *PMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *PMIDIOUTCAPSW;
typedef struct _MODEMDEVCAPS *PMODEMDEVCAPS;
typedef struct tagMONERRSTRUCT *PMONERRSTRUCT;
typedef struct tagMONMSGSTRUCT *PMONMSGSTRUCT;
typedef struct _MPR_SERVER_0 *PMPR_SERVER_0;
typedef struct _NABTS_BUFFER *PNABTS_BUFFER;
typedef struct _OEMCUIPPARAM *POEMCUIPPARAM;
typedef struct _OEMUIPSPARAM *POEMUIPSPARAM;
typedef struct _PORT_INFO_FFA PORT_INFO_FFA;
typedef struct _PORT_INFO_FFW PORT_INFO_FFW;
typedef struct tagPALETTEENTRY *PPALETTEENTRY;
typedef struct _PORT_INFO_1A *PPORT_INFO_1A;
typedef struct _PORT_INFO_1W *PPORT_INFO_1W;
typedef struct _PORT_INFO_2A *PPORT_INFO_2A;
typedef struct _PORT_INFO_2W *PPORT_INFO_2W;
typedef struct _PORT_INFO_3A *PPORT_INFO_3A;
typedef struct _PORT_INFO_3W *PPORT_INFO_3W;
typedef struct _PPP_ATCP_INFO PPP_ATCP_INFO;
typedef struct _PPP_IPCP_INFO PPP_IPCP_INFO;
typedef struct _PROVDATA_SIP *PPROVDATA_SIP;
typedef struct _PSINJECTDATA *PPSINJECTDATA;
typedef struct _QUOTA_LIMITS *PQUOTA_LIMITS;
typedef struct _PRINTPROVIDOR PRINTPROVIDOR;
typedef struct _PRIVILEGE_SET PRIVILEGE_SET;
typedef struct _PROCESSORINFO PROCESSORINFO;
typedef struct _PROV_ENUMALGS PROV_ENUMALGS;
typedef struct _SCHANNEL_ALG *PSCHANNEL_ALG;
typedef struct _SEARCHMEMORY *PSEARCHMEMORY;
typedef struct _C6963F188D9781F9428F32FE3A3801AF *PSHOWUIPARAMS;
typedef union _SLIST_HEADER *PSLIST_HEADER;
typedef struct _TAPE_PREPARE *PTAPE_PREPARE;
typedef struct tagTITLEBARINFO *PTITLEBARINFO;
typedef struct _TOKEN_GROUPS *PTOKEN_GROUPS;
typedef struct _TOKEN_ORIGIN *PTOKEN_ORIGIN;
typedef struct _TOKEN_SOURCE *PTOKEN_SOURCE;
typedef struct tagTRANSMSGLIST *PTRANSMSGLIST;
typedef struct _PUBLISHERINFO PUBLISHERINFO;
typedef struct tWAVEFORMATEX *PWAVEFORMATEX;
typedef struct tagWAVEINCAPS2A *PWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W *PWAVEINCAPS2W;
typedef struct tagWAVEOUTCAPSA *PWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *PWAVEOUTCAPSW;
typedef struct _WNODE_HEADER *PWNODE_HEADER;
typedef struct _WSAQuerySetA *PWSAQUERYSETA;
typedef struct _WSAQuerySetW *PWSAQUERYSETW;
typedef struct tagProxyFileInfo ProxyFileInfo;
typedef struct _QCMINFO_IDMAP QCMINFO_IDMAP;
typedef struct _RB_HITTESTINFO RBHITTESTINFO;
typedef struct tagREGISTERWORDA REGISTERWORDA;
typedef struct tagREGISTERWORDW REGISTERWORDW;
typedef struct _RGNDATAHEADER RGNDATAHEADER;
typedef unsigned int RPCOLEDATAREP;
typedef struct tagRPCOLEMESSAGE RPCOLEMESSAGE;
typedef void *RPC_IF_HANDLE;
typedef void *RPC_NS_HANDLE;
typedef struct _SCARD_ATRMASK SCARD_ATRMASK;
typedef struct tagSCROLLBARINFO SCROLLBARINFO;
typedef struct _SERVICE_INFOA SERVICE_INFOA;
typedef struct _SERVICE_INFOW SERVICE_INFOW;
typedef struct _63C7C0E53552AFE1EE8EC0B0F6807449 SHELLHOOKINFO;
typedef struct _SHQUERYRBINFO SHQUERYRBINFO;
typedef struct _SOCKADDR_IRDA SOCKADDR_IRDA;
struct SWbemDateTime;
struct SWbemObjectEx;
struct SWbemProperty;
struct SWbemSecurity;
struct SWbemServices;
struct SearchCommand;
struct ShellUIHelper;
typedef struct tagStorageLayout StorageLayout;
typedef struct _C8E3A74D850A8EB44C7483CB257B5DD1 TBBUTTONINFOA;
typedef struct _AA1FD51437B6FE081639C5575C92216B TBBUTTONINFOW;
typedef struct tagTBSAVEPARAMSA TBSAVEPARAMSA;
typedef struct tagTBSAVEPARAMSW TBSAVEPARAMSW;
typedef struct tagTCHITTESTINFO TCHITTESTINFO;
typedef struct tagTCITEMHEADERA TCITEMHEADERA;
typedef struct tagTCITEMHEADERW TCITEMHEADERW;
typedef struct _TC_GEN_FILTER TC_GEN_FILTER;
typedef struct _TOKEN_CONTROL TOKEN_CONTROL;
typedef struct tagTVHITTESTINFO TVHITTESTINFO;
typedef struct _VK_TO_WCHARS1 VK_TO_WCHARS1;
typedef struct _VK_TO_WCHARS2 VK_TO_WCHARS2;
typedef struct _VK_TO_WCHARS3 VK_TO_WCHARS3;
typedef struct _VK_TO_WCHARS4 VK_TO_WCHARS4;
typedef struct _VK_TO_WCHARS5 VK_TO_WCHARS5;
typedef struct _VK_TO_WCHARS6 VK_TO_WCHARS6;
typedef struct _VK_TO_WCHARS7 VK_TO_WCHARS7;
typedef struct _VK_TO_WCHARS8 VK_TO_WCHARS8;
typedef struct _VK_TO_WCHARS9 VK_TO_WCHARS9;
typedef struct tagWAVEOUTCAPS2A WAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W WAVEOUTCAPS2W;
typedef struct _WCE_IAS_QUERY WCE_IAS_QUERY;
typedef struct _WINTRUST_DATA WINTRUST_DATA;
typedef struct _SHORT_SIZEDARR WORD_SIZEDARR;
typedef struct _WSACOMPLETION WSACOMPLETION;
typedef struct _WSPPROC_TABLE WSPPROC_TABLE;
enum WbemErrorEnum {wbemNoErr = 0x0,wbemErrFailed = 0x80041001,wbemErrNotFound = 0x80041002,wbemErrAccessDenied = 0x80041003,wbemErrProviderFailure = 0x80041004,wbemErrTypeMismatch = 0x80041005,wbemErrOutOfMemory = 0x80041006,wbemErrInvalidContext = 0x80041007,wbemErrInvalidParameter = 0x80041008,wbemErrNotAvailable = 0x80041009,wbemErrCriticalError = 0x8004100A,wbemErrInvalidStream = 0x8004100B,wbemErrNotSupported = 0x8004100C,wbemErrInvalidSuperclass = 0x8004100D,wbemErrInvalidNamespace = 0x8004100E,wbemErrInvalidObject = 0x8004100F,wbemErrInvalidClass = 0x80041010,wbemErrProviderNotFound = 0x80041011,wbemErrInvalidProviderRegistration = 0x80041012,wbemErrProviderLoadFailure = 0x80041013,wbemErrInitializationFailure = 0x80041014,wbemErrTransportFailure = 0x80041015,wbemErrInvalidOperation = 0x80041016,wbemErrInvalidQuery = 0x80041017,wbemErrInvalidQueryType = 0x80041018,wbemErrAlreadyExists = 0x80041019,wbemErrOverrideNotAllowed = 0x8004101A,wbemErrPropagatedQualifier = 0x8004101B,wbemErrPropagatedProperty = 0x8004101C,wbemErrUnexpected = 0x8004101D,wbemErrIllegalOperation = 0x8004101E,wbemErrCannotBeKey = 0x8004101F,wbemErrIncompleteClass = 0x80041020,wbemErrInvalidSyntax = 0x80041021,wbemErrNondecoratedObject = 0x80041022,wbemErrReadOnly = 0x80041023,wbemErrProviderNotCapable = 0x80041024,wbemErrClassHasChildren = 0x80041025,wbemErrClassHasInstances = 0x80041026,wbemErrQueryNotImplemented = 0x80041027,wbemErrIllegalNull = 0x80041028,wbemErrInvalidQualifierType = 0x80041029,wbemErrInvalidPropertyType = 0x8004102A,wbemErrValueOutOfRange = 0x8004102B,wbemErrCannotBeSingleton = 0x8004102C,wbemErrInvalidCimType = 0x8004102D,wbemErrInvalidMethod = 0x8004102E,wbemErrInvalidMethodParameters = 0x8004102F,wbemErrSystemProperty = 0x80041030,wbemErrInvalidProperty = 0x80041031,wbemErrCallCancelled = 0x80041032,wbemErrShuttingDown = 0x80041033,wbemErrPropagatedMethod = 0x80041034,wbemErrUnsupportedParameter = 0x80041035,wbemErrMissingParameter = 0x80041036,wbemErrInvalidParameterId = 0x80041037,wbemErrNonConsecutiveParameterIds = 0x80041038,wbemErrParameterIdOnRetval = 0x80041039,wbemErrInvalidObjectPath = 0x8004103A,wbemErrOutOfDiskSpace = 0x8004103B,wbemErrBufferTooSmall = 0x8004103C,wbemErrUnsupportedPutExtension = 0x8004103D,wbemErrUnknownObjectType = 0x8004103E,wbemErrUnknownPacketType = 0x8004103F,wbemErrMarshalVersionMismatch = 0x80041040,wbemErrMarshalInvalidSignature = 0x80041041,wbemErrInvalidQualifier = 0x80041042,wbemErrInvalidDuplicateParameter = 0x80041043,wbemErrTooMuchData = 0x80041044,wbemErrServerTooBusy = 0x80041045,wbemErrInvalidFlavor = 0x80041046,wbemErrCircularReference = 0x80041047,wbemErrUnsupportedClassUpdate = 0x80041048,wbemErrCannotChangeKeyInheritance = 0x80041049,wbemErrCannotChangeIndexInheritance = 0x80041050,wbemErrTooManyProperties = 0x80041051,wbemErrUpdateTypeMismatch = 0x80041052,wbemErrUpdateOverrideNotAllowed = 0x80041053,wbemErrUpdatePropagatedMethod = 0x80041054,wbemErrMethodNotImplemented = 0x80041055,wbemErrMethodDisabled = 0x80041056,wbemErrRefresherBusy = 0x80041057,wbemErrUnparsableQuery = 0x80041058,wbemErrNotEventClass = 0x80041059,wbemErrMissingGroupWithin = 0x8004105A,wbemErrMissingAggregationList = 0x8004105B,wbemErrPropertyNotAnObject = 0x8004105C,wbemErrAggregatingByObject = 0x8004105D,wbemErrUninterpretableProviderQuery = 0x8004105F,wbemErrBackupRestoreWinmgmtRunning = 0x80041060,wbemErrQueueOverflow = 0x80041061,wbemErrPrivilegeNotHeld = 0x80041062,wbemErrInvalidOperator = 0x80041063,wbemErrLocalCredentials = 0x80041064,wbemErrCannotBeAbstract = 0x80041065,wbemErrAmendedObject = 0x80041066,wbemErrClientTooSlow = 0x80041067,wbemErrNullSecurityDescriptor = 0x80041068,wbemErrTimeout = 0x80041069,wbemErrInvalidAssociation = 0x8004106A,wbemErrAmbiguousOperation = 0x8004106B,wbemErrQuotaViolation = 0x8004106C,wbemErrTransactionConflict = 0x8004106D,wbemErrForcedRollback = 0x8004106E,wbemErrUnsupportedLocale = 0x8004106F,wbemErrHandleOutOfDate = 0x80041070,wbemErrConnectionFailed = 0x80041071,wbemErrInvalidHandleRequest = 0x80041072,wbemErrPropertyNameTooWide = 0x80041073,wbemErrClassNameTooWide = 0x80041074,wbemErrMethodNameTooWide = 0x80041075,wbemErrQualifierNameTooWide = 0x80041076,wbemErrRerunCommand = 0x80041077,wbemErrDatabaseVerMismatch = 0x80041078,wbemErrVetoPut = 0x80041079,wbemErrVetoDelete = 0x8004107A,wbemErrInvalidLocale = 0x80041080,wbemErrProviderSuspended = 0x80041081,wbemErrSynchronizationRequired = 0x80041082,wbemErrNoSchema = 0x80041083,wbemErrProviderAlreadyRegistered = 0x80041084,wbemErrProviderNotRegistered = 0x80041085,wbemErrFatalTransportError = 0x80041086,wbemErrEncryptedConnectionRequired = 0x80041087,wbemErrRegistrationTooBroad = 0x80042001,wbemErrRegistrationTooPrecise = 0x80042002,wbemErrTimedout = 0x80043001,wbemErrResetToDefault = 0x80043002,};
struct WbemRefresher;
struct WebBrowser_V1;
struct WebWizardHost;
struct XMLDSOControl;
enum _D3DBASISTYPE {D3DBASIS_BEZIER = 0x0,D3DBASIS_BSPLINE = 0x1,D3DBASIS_INTERPOLATE = 0x2,D3DBASIS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DLIGHTTYPE {D3DLIGHT_POINT = 0x1,D3DLIGHT_SPOT = 0x2,D3DLIGHT_DIRECTIONAL = 0x3,D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DORDERTYPE {D3DORDER_LINEAR = 0x1,D3DORDER_QUADRATIC = 0x2,D3DORDER_CUBIC = 0x3,D3DORDER_QUINTIC = 0x5,D3DORDER_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSHADEMODE {D3DSHADE_FLAT = 0x1,D3DSHADE_GOURAUD = 0x2,D3DSHADE_PHONG = 0x3,D3DSHADE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSTENCILOP {D3DSTENCILOP_KEEP = 0x1,D3DSTENCILOP_ZERO = 0x2,D3DSTENCILOP_REPLACE = 0x3,D3DSTENCILOP_INCRSAT = 0x4,D3DSTENCILOP_DECRSAT = 0x5,D3DSTENCILOP_INVERT = 0x6,D3DSTENCILOP_INCR = 0x7,D3DSTENCILOP_DECR = 0x8,D3DSTENCILOP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREOP {D3DTOP_DISABLE = 0x1,D3DTOP_SELECTARG1 = 0x2,D3DTOP_SELECTARG2 = 0x3,D3DTOP_MODULATE = 0x4,D3DTOP_MODULATE2X = 0x5,D3DTOP_MODULATE4X = 0x6,D3DTOP_ADD = 0x7,D3DTOP_ADDSIGNED = 0x8,D3DTOP_ADDSIGNED2X = 0x9,D3DTOP_SUBTRACT = 0xA,D3DTOP_ADDSMOOTH = 0xB,D3DTOP_BLENDDIFFUSEALPHA = 0xC,D3DTOP_BLENDTEXTUREALPHA = 0xD,D3DTOP_BLENDFACTORALPHA = 0xE,D3DTOP_BLENDTEXTUREALPHAPM = 0xF,D3DTOP_BLENDCURRENTALPHA = 0x10,D3DTOP_PREMODULATE = 0x11,D3DTOP_MODULATEALPHA_ADDCOLOR = 0x12,D3DTOP_MODULATECOLOR_ADDALPHA = 0x13,D3DTOP_MODULATEINVALPHA_ADDCOLOR = 0x14,D3DTOP_MODULATEINVCOLOR_ADDALPHA = 0x15,D3DTOP_BUMPENVMAP = 0x16,D3DTOP_BUMPENVMAPLUMINANCE = 0x17,D3DTOP_DOTPRODUCT3 = 0x18,D3DTOP_MULTIPLYADD = 0x19,D3DTOP_LERP = 0x1A,D3DTOP_FORCE_DWORD = 0x7FFFFFFF,};
enum _ELEMENT_TYPE {AllElements = 0x0,ChangerTransport = 0x1,ChangerSlot = 0x2,ChangerIEPort = 0x3,ChangerDrive = 0x4,ChangerDoor = 0x5,ChangerKeypad = 0x6,ChangerMaxElement = 0x7,};
enum _SC_ENUM_TYPE {SC_ENUM_PROCESS_INFO = 0x0,};
enum _SID_NAME_USE {SidTypeUser = 0x1,SidTypeGroup = 0x2,SidTypeDomain = 0x3,SidTypeAlias = 0x4,SidTypeWellKnownGroup = 0x5,SidTypeDeletedAccount = 0x6,SidTypeInvalid = 0x7,SidTypeUnknown = 0x8,SidTypeComputer = 0x9,};
enum _tagPSUACTION {PSU_DEFAULT = 0x1,PSU_SECURITY_URL_ONLY = 0x2,};
struct adpcmcoef_tag {short iCoef1;short iCoef2;};
enum tagBINDSTATUS {BINDSTATUS_FINDINGRESOURCE = 0x1,BINDSTATUS_CONNECTING = 0x2,BINDSTATUS_REDIRECTING = 0x3,BINDSTATUS_BEGINDOWNLOADDATA = 0x4,BINDSTATUS_DOWNLOADINGDATA = 0x5,BINDSTATUS_ENDDOWNLOADDATA = 0x6,BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,BINDSTATUS_USINGCACHEDCOPY = 0xA,BINDSTATUS_SENDINGREQUEST = 0xB,BINDSTATUS_CLASSIDAVAILABLE = 0xC,BINDSTATUS_MIMETYPEAVAILABLE = 0xD,BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xE,BINDSTATUS_BEGINSYNCOPERATION = 0xF,BINDSTATUS_ENDSYNCOPERATION = 0x10,BINDSTATUS_BEGINUPLOADDATA = 0x11,BINDSTATUS_UPLOADINGDATA = 0x12,BINDSTATUS_ENDUPLOADDATA = 0x13,BINDSTATUS_PROTOCOLCLASSID = 0x14,BINDSTATUS_ENCODING = 0x15,BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,BINDSTATUS_CLASSINSTALLLOCATION = 0x17,BINDSTATUS_DECODING = 0x18,BINDSTATUS_LOADINGMIMEHANDLER = 0x19,BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1A,BINDSTATUS_FILTERREPORTMIMETYPE = 0x1B,BINDSTATUS_CLSIDCANINSTANTIATE = 0x1C,BINDSTATUS_IUNKNOWNAVAILABLE = 0x1D,BINDSTATUS_DIRECTBIND = 0x1E,BINDSTATUS_RAWMIMETYPE = 0x1F,BINDSTATUS_PROXYDETECTING = 0x20,BINDSTATUS_ACCEPTRANGES = 0x21,BINDSTATUS_COOKIE_SENT = 0x22,BINDSTATUS_COMPACT_POLICY_RECEIVED = 0x23,BINDSTATUS_COOKIE_SUPPRESSED = 0x24,BINDSTATUS_COOKIE_STATE_UNKNOWN = 0x25,BINDSTATUS_COOKIE_STATE_ACCEPT = 0x26,BINDSTATUS_COOKIE_STATE_REJECT = 0x27,BINDSTATUS_COOKIE_STATE_PROMPT = 0x28,BINDSTATUS_COOKIE_STATE_LEASH = 0x29,BINDSTATUS_COOKIE_STATE_DOWNGRADE = 0x2A,BINDSTATUS_POLICY_HREF = 0x2B,BINDSTATUS_P3P_HEADER = 0x2C,BINDSTATUS_SESSION_COOKIE_RECEIVED = 0x2D,BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x2E,BINDSTATUS_SESSION_COOKIES_ALLOWED = 0x2F,BINDSTATUS_CACHECONTROL = 0x30,};
enum tagBINDSTRING {BINDSTRING_HEADERS = 0x1,BINDSTRING_ACCEPT_MIMES = 0x2,BINDSTRING_EXTRA_URL = 0x3,BINDSTRING_LANGUAGE = 0x4,BINDSTRING_USERNAME = 0x5,BINDSTRING_PASSWORD = 0x6,BINDSTRING_UA_PIXELS = 0x7,BINDSTRING_UA_COLOR = 0x8,BINDSTRING_OS = 0x9,BINDSTRING_USER_AGENT = 0xA,BINDSTRING_ACCEPT_ENCODINGS = 0xB,BINDSTRING_POST_COOKIE = 0xC,BINDSTRING_POST_DATA_MIME = 0xD,BINDSTRING_URL = 0xE,BINDSTRING_IID = 0xF,BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,BINDSTRING_PTR_BIND_CONTEXT = 0x11,};
enum tagBIND_FLAGS {BIND_MAYBOTHERUSER = 0x1,BIND_JUSTTESTEXISTENCE = 0x2,};
enum tagCHANGEKIND {CHANGEKIND_ADDMEMBER = 0x0,CHANGEKIND_DELETEMEMBER = 0x1,CHANGEKIND_SETNAMES = 0x2,CHANGEKIND_SETDOCUMENTATION = 0x3,CHANGEKIND_GENERAL = 0x4,CHANGEKIND_INVALIDATE = 0x5,CHANGEKIND_CHANGEFAILED = 0x6,CHANGEKIND_MAX = 0x7,};
enum tagExtentMode {DVEXTENT_CONTENT = 0x0,DVEXTENT_INTEGRAL = 0x1,};
enum tagHH_GPROPID {HH_GPROPID_SINGLETHREAD = 0x1,HH_GPROPID_TOOLBAR_MARGIN = 0x2,HH_GPROPID_UI_LANGUAGE = 0x3,HH_GPROPID_CURRENT_SUBSET = 0x4,HH_GPROPID_CONTENT_LANGUAGE = 0x5,};
enum tagINVOKEKIND {INVOKE_FUNC = 0x1,INVOKE_PROPERTYGET = 0x2,INVOKE_PROPERTYPUT = 0x4,INVOKE_PROPERTYPUTREF = 0x8,};
enum tagOLEDCFLAGS {OLEDC_NODRAW = 0x1,OLEDC_PAINTBKGND = 0x2,OLEDC_OFFSCREEN = 0x4,};
enum tagOLEWHICHMK {OLEWHICHMK_CONTAINER = 0x1,OLEWHICHMK_OBJREL = 0x2,OLEWHICHMK_OBJFULL = 0x3,};
enum tagPENDINGMSG {PENDINGMSG_CANCELCALL = 0x0,PENDINGMSG_WAITNOPROCESS = 0x1,PENDINGMSG_WAITDEFPROCESS = 0x2,};
enum tagREADYSTATE {READYSTATE_UNINITIALIZED = 0x0,READYSTATE_LOADING = 0x1,READYSTATE_LOADED = 0x2,READYSTATE_INTERACTIVE = 0x3,READYSTATE_COMPLETE = 0x4,};
enum tagSERVERCALL {SERVERCALL_ISHANDLED = 0x0,SERVERCALL_REJECTED = 0x1,SERVERCALL_RETRYLATER = 0x2,};
enum tagVIEWSTATUS {VIEWSTATUS_OPAQUE = 0x1,VIEWSTATUS_SOLIDBKGND = 0x2,VIEWSTATUS_DVASPECTOPAQUE = 0x4,VIEWSTATUS_DVASPECTTRANSPARENT = 0x8,VIEWSTATUS_SURFACE = 0x10,VIEWSTATUS_3DSURFACE = 0x20,};
typedef struct _userHMETAFILE userHMETAFILE;
typedef struct _userSTGMEDIUM userSTGMEDIUM;
typedef struct _wireSAFEARRAY *wireSAFEARRAY;
typedef struct adpcmcoef_tag ADPCMCOEFSET;
typedef struct _AVIFILEINFOA AVIFILEINFOA;
typedef struct _AVIFILEINFOW AVIFILEINFOW;
typedef struct _0302F8A06E19F526F6B7CE33122C2128 AVIPALCHANGE;
typedef struct tagBANDSITEINFO BANDSITEINFO;
typedef struct _BPC_FILETIME BPC_FILETIME;
typedef struct _2FB1DA8EC643BE4B9CF4F2ACCAFA1124 CABINETSTATE;
typedef struct tagCapInfoChunk CAPINFOCHUNK;
typedef struct tagCaptureParms CAPTUREPARMS;
typedef struct tagCATEGORYINFO CATEGORYINFO;
typedef struct _CC_BYTE_PAIR CC_BYTE_PAIR;
typedef struct _CERT_CONTEXT CERT_CONTEXT;
typedef struct channel_caps_tag CHANNEL_CAPS;
typedef struct tagCHOOSECOLORA CHOOSECOLORA;
typedef struct tagCHOOSECOLORW CHOOSECOLORW;
typedef struct tagICEXYZTRIPLE CIEXYZTRIPLE;
typedef struct _CMS_KEY_INFO CMS_KEY_INFO;
typedef struct _tagCODEBASEHOLD CODEBASEHOLD;
typedef struct tagCOMBOBOXINFO COMBOBOXINFO;
typedef struct _COMMTIMEOUTS COMMTIMEOUTS;
typedef struct _COSERVERINFO COSERVERINFO;
typedef struct _CPSUICBPARAM CPSUICBPARAM;
typedef struct _CREDUI_INFOA CREDUI_INFOA;
typedef struct _CREDUI_INFOW CREDUI_INFOW;
typedef struct _25CE079B09F538272C66874FFD3C2C16 CS_STUB_INFO;
typedef struct _currencyfmtA CURRENCYFMTA;
typedef struct _currencyfmtW CURRENCYFMTW;
typedef struct tagCUSTDATAITEM CUSTDATAITEM;
typedef struct tagCWPRETSTRUCT CWPRETSTRUCT;
typedef struct _D3DGAMMARAMP D3DGAMMARAMP;
typedef struct _D3DLIGHTDATA D3DLIGHTDATA;
typedef struct _D3DMATERIAL7 D3DMATERIAL7;
typedef struct _D3DMATERIAL8 D3DMATERIAL8;
typedef struct _D3DVIEWPORT2 D3DVIEWPORT2;
typedef struct _D3DVIEWPORT7 D3DVIEWPORT7;
typedef struct _D3DVIEWPORT8 D3DVIEWPORT8;
typedef struct _DCIENUMINPUT DCIENUMINPUT;
typedef struct _DCIOFFSCREEN DCIOFFSCREEN;
typedef struct _DDGETIRQINFO DDGETIRQINFO;
typedef struct _DDKERNELCAPS DDKERNELCAPS;
typedef struct _DDLOCKININFO DDLOCKININFO;
typedef struct _DDNTCORECAPS DDNTCORECAPS;
typedef struct _DDSTEREOMODE DDSTEREOMODE;
typedef struct _DD_DXVERSION DD_DXVERSION;
typedef struct tagDESIGNVECTOR DESIGNVECTOR;
typedef struct __MIDL___MIDL_itf_shobjidl_0230_0001 DESKBANDINFO;
typedef struct _DEVHTADJDATA DEVHTADJDATA;
struct DFConstraint {struct DFConstraintVtbl *lpVtbl;};
typedef struct _DISK_LOGGING DISK_LOGGING;
typedef struct tagDRAGLISTINFO DRAGLISTINFO;
typedef struct _DRIVERSTATUS DRIVERSTATUS;
typedef struct _DS3DLISTENER DS3DLISTENER;
typedef struct _DSBUFFERDESC DSBUFFERDESC;
typedef struct _DSEFFECTDESC DSEFFECTDESC;
typedef struct tagAspectInfo DVASPECTINFO;
typedef struct tagExtentInfo DVEXTENTINFO;
typedef struct _EFS_KEY_INFO EFS_KEY_INFO;
typedef struct _EFS_RPC_BLOB EFS_RPC_BLOB;
typedef struct tagABORTPATH EMRABORTPATH;
typedef struct tagABORTPATH EMRBEGINPATH;
typedef struct tagEMRCREATEPEN EMRCREATEPEN;
typedef struct tagEMREXTESCAPE EMREXTESCAPE;
typedef struct tagEMRGLSRECORD EMRGLSRECORD;
typedef struct tagEMRINVERTRGN EMRINVERTRGN;
typedef struct tagEMRPOLYLINE16 EMRPOLYGON16;
typedef struct tagEMRELLIPSE EMRRECTANGLE;
typedef struct tagEMRRESTOREDC EMRRESTOREDC;
typedef struct tagEMRROUNDRECT EMRROUNDRECT;
typedef struct tagEMRSELECTCLIPPATH EMRSETBKMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETLAYOUT;
typedef struct tagEMRSETPIXELV EMRSETPIXELV;
typedef struct tagABORTPATH EMRWIDENPATH;
typedef struct tagENUMLOGFONTA ENUMLOGFONTA;
typedef struct tagENUMLOGFONTW ENUMLOGFONTW;
typedef struct _FD_GLYPHATTR FD_GLYPHATTR;
typedef struct tagFINDREPLACEA FINDREPLACEA;
typedef struct tagFINDREPLACEW FINDREPLACEW;
typedef struct _FORM_INFO_1A FORM_INFO_1A;
typedef struct _FORM_INFO_1W FORM_INFO_1W;
struct FolderItems2 {struct FolderItems2Vtbl *lpVtbl;};
struct FolderItems3 {struct FolderItems3Vtbl *lpVtbl;};
typedef struct tagGCP_RESULTSA GCP_RESULTSA;
typedef struct tagGCP_RESULTSW GCP_RESULTSW;
typedef struct _GLYPHMETRICS GLYPHMETRICS;
typedef struct HACMDRIVERID__ *HACMDRIVERID;
struct HACMDRIVER__ {int unused;};
struct HACMSTREAM__ {int unused;};
typedef struct tagHELPWININFOA HELPWININFOA;
typedef struct tagHELPWININFOW HELPWININFOW;
typedef struct HENHMETAFILE__ *HENHMETAFILE;
typedef struct tagHH_FTS_QUERY HH_FTS_QUERY;
struct HSEMAPHORE__ {int unused;};
struct IAccIdentity {struct IAccIdentityVtbl *lpVtbl;};
struct IAdviseSink2 {struct IAdviseSink2Vtbl *lpVtbl;};
struct IBanneredBar {struct IBanneredBarVtbl *lpVtbl;};
typedef struct _6D499679CD08099A5FDFDFD45568A323 ICDECOMPRESS;
typedef struct tagICONMETRICSA ICONMETRICSA;
typedef struct tagICONMETRICSW ICONMETRICSW;
struct ICallFactory {struct ICallFactoryVtbl *lpVtbl;};
struct ICatRegister {struct ICatRegisterVtbl *lpVtbl;};
struct ICategorizer {struct ICategorizerVtbl *lpVtbl;};
struct IChannelHook {struct IChannelHookVtbl *lpVtbl;};
struct ICodeInstall {struct ICodeInstallVtbl *lpVtbl;};
struct IContextMenu {struct IContextMenuVtbl *lpVtbl;};
struct IDirectDraw2 {struct IDirectDraw2Vtbl *lpVtbl;};
struct IDirectDraw4 {struct IDirectDraw4Vtbl *lpVtbl;};
struct IDirectDraw7 {struct IDirectDraw7Vtbl *lpVtbl;};
struct IDirectMusic {struct IDirectMusicVtbl *lpVtbl;};
struct IDirectSound {struct IDirectSoundVtbl *lpVtbl;};
struct IDocViewSite {struct IDocViewSiteVtbl *lpVtbl;};
struct IEnumMoniker {struct IEnumMonikerVtbl *lpVtbl;};
struct IEnumOLEVERB {struct IEnumOLEVERBVtbl *lpVtbl;};
struct IEnumSTATSTG {struct IEnumSTATSTGVtbl *lpVtbl;};
struct IEnumUnknown {struct IEnumUnknownVtbl *lpVtbl;};
struct IEnumVARIANT {struct IEnumVARIANTVtbl *lpVtbl;};
struct IFileViewerA {struct IFileViewerAVtbl *lpVtbl;};
struct IFileViewerW {struct IFileViewerWVtbl *lpVtbl;};
struct IInputObject {struct IInputObjectVtbl *lpVtbl;};
struct IKsAllocator;
typedef struct _IMAGE_SYMBOL IMAGE_SYMBOL;
struct IModalWindow {struct IModalWindowVtbl *lpVtbl;};
struct IMofCompiler {struct IMofCompilerVtbl *lpVtbl;};
struct IMonikerProp {struct IMonikerPropVtbl *lpVtbl;};
typedef struct tagINPUTCONTEXT INPUTCONTEXT;
typedef struct _INPUT_RECORD INPUT_RECORD;
typedef union _IN_ADDR_IPV4 IN_ADDR_IPV4;
typedef struct _IN_ADDR_IPV6 IN_ADDR_IPV6;
struct INewWDEvents {struct INewWDEventsVtbl *lpVtbl;};
typedef struct _IOSPACE_EX32 IOSPACE_EX32;
typedef struct _IOSPACE_EX64 IOSPACE_EX64;
struct IOleDocument {struct IOleDocumentVtbl *lpVtbl;};
struct IOleUndoUnit {struct IOleUndoUnitVtbl *lpVtbl;};
struct IPersistFile {struct IPersistFileVtbl *lpVtbl;};
struct IPictureDisp {struct IPictureDispVtbl *lpVtbl;};
struct IPrintOemUI2 {struct IPrintOemUI2Vtbl *lpVtbl;};
struct IProcessLock {struct IProcessLockVtbl *lpVtbl;};
struct IPropertyBag {struct IPropertyBagVtbl *lpVtbl;};
struct IRegTreeItem {struct IRegTreeItemVtbl *lpVtbl;};
struct IRootStorage {struct IRootStorageVtbl *lpVtbl;};
struct ISWbemMethod {struct ISWbemMethodVtbl *lpVtbl;};
struct ISWbemObject {struct ISWbemObjectVtbl *lpVtbl;};
struct IShellFolder {struct IShellFolderVtbl *lpVtbl;};
struct ISoftDistExt {struct ISoftDistExtVtbl *lpVtbl;};
struct ISynchronize {struct ISynchronizeVtbl *lpVtbl;};
struct ITaskbarList {struct ITaskbarListVtbl *lpVtbl;};
struct ITypeFactory {struct ITypeFactoryVtbl *lpVtbl;};
struct ITypeMarshal {struct ITypeMarshalVtbl *lpVtbl;};
struct IViewObject2 {struct IViewObject2Vtbl *lpVtbl;};
struct IWbemContext {struct IWbemContextVtbl *lpVtbl;};
struct IWbemLocator {struct IWbemLocatorVtbl *lpVtbl;};
struct IWebBrowser2 {struct IWebBrowser2Vtbl *lpVtbl;};
struct IWinInetInfo {struct IWinInetInfoVtbl *lpVtbl;};
struct IXMLDocument {struct IXMLDocumentVtbl *lpVtbl;};
struct IXMLElement2 {struct IXMLElement2Vtbl *lpVtbl;};
typedef void *I_RPC_HANDLE;
typedef struct tagKbdNlsLayer KBDNLSTABLES;
typedef union _A4FB595EF421231CAF150DDD3288A6D5 KSDATAFORMAT;
typedef struct _117E3A994AEBF040E18388CACE709509 KSIDENTIFIER;
typedef struct _204C6CB5B1CC0D35B371E5C594718A83 KSRESOLUTION;
typedef struct _KS_DVD_YCrCb KS_DVD_YCrCb;
typedef struct tagKS_VIDEOINFO KS_VIDEOINFO;
typedef struct tagLHITTESTINFO LHITTESTINFO;
typedef IAccessible *LPACCESSIBLE;
typedef IAdviseSink *LPADVISESINK;
typedef struct tagALTTABINFO *LPALTTABINFO;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
typedef struct tagBITMAPINFO *LPBITMAPINFO;
typedef struct tagCALPOLESTR *LPCALPOLESTR;
typedef struct _COMMCONFIG *LPCOMMCONFIG;
typedef struct _CONNECTION *LPCONNECTION;
typedef struct tagCURSORINFO *LPCURSORINFO;
typedef struct _D3DHVERTEX *LPD3DHVERTEX;
typedef struct _D3DLVERTEX *LPD3DLVERTEX;
typedef IDataFilter *LPDATAFILTER;
typedef IDataObject *LPDATAOBJECT;
typedef struct _DCIOVERLAY *LPDCIOVERLAY;
typedef struct tagDIBSECTION *LPDIBSECTION;
typedef struct IDirectDraw *LPDIRECTDRAW;
typedef struct _DLSVERSION *LPDLSVERSION;
typedef IDropSource *LPDROPSOURCE;
typedef struct tagDROPSTRUCT *LPDROPSTRUCT;
typedef IDropTarget *LPDROPTARGET;
typedef struct _DS3DBUFFER *LPDS3DBUFFER;
typedef struct _DSFXChorus *LPDSFXChorus;
typedef struct _DSFXGargle *LPDSFXGargle;
typedef IEnumIDList *LPENUMIDLIST;
typedef IEnumString *LPENUMSTRING;
typedef struct tagFILTERKEYS *LPFILTERKEYS;
typedef FolderItem *LPFOLDERITEM;
typedef IFontEventsDisp *LPFONTEVENTS;
typedef struct _068AF82868DFBF98C4A3A88443B401AE *LPFVSHOWINFO;
typedef int *LPFXPT2DOT30;
typedef struct _INSTHEADER *LPINSTHEADER;
typedef struct _JOB_INFO_3 *LPJOB_INFO_3;
typedef struct tagKEYBDINPUT *LPKEYBDINPUT;
typedef struct tagLOGBRUSH32 *LPLOGBRUSH32;
typedef struct tagLOGPALETTE *LPLOGPALETTE;
typedef struct tagLVBKIMAGEA *LPLVBKIMAGEA;
typedef struct tagLVBKIMAGEW *LPLVBKIMAGEW;
typedef struct tagMETAHEADER *LPMETAHEADER;
typedef struct tagMETARECORD *LPMETARECORD;
typedef struct tagMETHODDATA *LPMETHODDATA;
typedef struct _MIDILOCALE *LPMIDILOCALE;
typedef struct tagMINMAXINFO *LPMINMAXINFO;
typedef struct tagMIXERCAPSA *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW *LPMIXERCAPSW;
typedef struct tagMIXERLINEA *LPMIXERLINEA;
typedef struct tagMIXERLINEW *LPMIXERLINEW;
typedef struct tagMOUSEINPUT *LPMOUSEINPUT;
typedef struct tagNMDAYSTATE *LPNMDAYSTATE;
typedef struct tagNMLISTVIEW *LPNMLISTVIEW;
typedef struct tagNMLVSCROLL *LPNMLVSCROLL;
typedef struct _EAA2A559B48BCBAE81109D6C3EFDA87C *LPNMPGSCROLL;
typedef struct tagNMTOOLBARA *LPNMTOOLBARA;
typedef struct tagNMTOOLBARW *LPNMTOOLBARW;
typedef struct _numberfmtA *LPNUMBERFMTA;
typedef struct _numberfmtW *LPNUMBERFMTW;
typedef IOleControl *LPOLECONTROL;
typedef struct _OVERLAPPED *LPOVERLAPPED;
typedef IRecordInfo *LPRECORDINFO;
typedef struct tagSCROLLINFO *LPSCROLLINFO;
typedef struct __MIDL___MIDL_itf_shobjidl_0201_0002 *LPSHCOLUMNID;
typedef struct tagSTICKYKEYS *LPSTICKYKEYS;
typedef struct _SYSTEMTIME *LPSYSTEMTIME;
typedef struct tagTOGGLEKEYS *LPTOGGLEKEYS;
typedef IViewObject *LPVIEWOBJECT;
typedef struct waveformat_tag *LPWAVEFORMAT;
typedef struct tagWINDOWINFO *LPWINDOWINFO;
typedef struct _WSAVersion *LPWSAVERSION;
typedef struct _99F880E2DB2F1E54A137D02CDE4F02E9 LVINSERTMARK;
typedef struct tagLVSETINFOTIP LVSETINFOTIP;
enum MACRO_ACCESS {ACCESS_SYSTEM_SECURITY = 0x1000000,};
enum MACRO_ACMERR {ACMERR_BASE = 512,ACMERR_NOTPOSSIBLE = 512,ACMERR_BUSY = 513,ACMERR_UNPREPARED = 514,ACMERR_CANCELED = 515,};
enum MACRO_ACTCTX {ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = 0x1,ACTCTX_FLAG_LANGID_VALID = 0x2,ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 0x4,ACTCTX_FLAG_RESOURCE_NAME_VALID = 0x8,ACTCTX_FLAG_SET_PROCESS_DEFAULT = 0x10,ACTCTX_FLAG_APPLICATION_NAME_VALID = 0x20,ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = 0x40,ACTCTX_FLAG_HMODULE_VALID = 0x80,};
enum MACRO_ACTIVE {ACTIVE_EX_WORKER_THREAD_TERMINATION = 0xE9,};
enum MACRO_AC_SRC {AC_SRC_OVER = 0x0,AC_SRC_ALPHA = 0x1,};
enum MACRO_AF_ATM {AF_ATM = 22,AF_INET6 = 23,AF_CLUSTER = 24,AF_12844 = 25,AF_IRDA = 26,AF_NETDES = 28,AF_TCNPROCESS = 29,AF_TCNMESSAGE = 30,AF_ICLFXBM = 31,};
enum MACRO_APPCMD {APPCMD_CLIENTONLY = 0x10,APPCMD_FILTERINITS = 0x20,APPCMD_MASK = 0xFF0,};
enum MACRO_ASPECT {ASPECT_FILTERING = 0x1,};
enum MACRO_ASSERT {ASSERT_PRIMARY = 0x8,ASSERT_ALTERNATE = 0x9,};
enum MACRO_ATDISK {ATDISK_DRIVER_INTERNAL = 0x42,};
enum MACRO_ATTACH {ATTACH_PARENT_PROCESS = 4294967295,};
enum MACRO_AVIERR {AVIERR_OK = 0,AVIERR_UNSUPPORTED = -2147205019,AVIERR_BADFORMAT = -2147205018,AVIERR_MEMORY = -2147205017,AVIERR_INTERNAL = -2147205016,AVIERR_BADFLAGS = -2147205015,AVIERR_BADPARAM = -2147205014,AVIERR_BADSIZE = -2147205013,AVIERR_BADHANDLE = -2147205012,AVIERR_FILEREAD = -2147205011,AVIERR_FILEWRITE = -2147205010,AVIERR_FILEOPEN = -2147205009,AVIERR_COMPRESSOR = -2147205008,AVIERR_NOCOMPRESSOR = -2147205007,AVIERR_READONLY = -2147205006,AVIERR_NODATA = -2147205005,AVIERR_BUFFERTOOSMALL = -2147205004,AVIERR_CANTCOMPRESS = -2147205003,AVIERR_USERABORT = -2147204922,AVIERR_ERROR = -2147204921,};
enum MACRO_BACKUP {BACKUP_INVALID = 0x0,BACKUP_DATA = 0x1,BACKUP_EA_DATA = 0x2,BACKUP_SECURITY_DATA = 0x3,BACKUP_ALTERNATE_DATA = 0x4,BACKUP_LINK = 0x5,BACKUP_PROPERTY_DATA = 0x6,BACKUP_OBJECT_ID = 0x7,BACKUP_REPARSE_DATA = 0x8,BACKUP_SPARSE_BLOCK = 0x9,};
enum MACRO_BICOMP {BICOMP_IBMULTIMOTION = 1230261333,BICOMP_IBMPHOTOMOTION = 1330464848,BICOMP_CREATIVEYUV = 1987410275,};
enum MACRO_BKMODE {BKMODE_LAST = 2,};
enum MACRO_BUFSIZ {BUFSIZ = 512,};
enum MACRO_BUTTON {BUTTON_IMAGELIST_ALIGN_LEFT = 0,BUTTON_IMAGELIST_ALIGN_RIGHT = 1,BUTTON_IMAGELIST_ALIGN_TOP = 2,BUTTON_IMAGELIST_ALIGN_BOTTOM = 3,BUTTON_IMAGELIST_ALIGN_CENTER = 4,};
enum MACRO_CALERT {CALERT_SYSTEM = 6,};
enum MACRO_CANCEL {CANCEL_STATE_IN_COMPLETED_IRP = 0x48,};
enum MACRO_CANNOT {CANNOT_WRITE_CONFIGURATION = 0x75,};
enum MACRO_CAPLOK {CAPLOK = 0x1,SGCAPS = 0x2,CAPLOKALTGR = 0x4,KANALOK = 0x8,GRPSELTAP = 0x80,};
enum MACRO_CC_MAX {CC_MAX_HW_DECODE_LINES = 12,};
enum MACRO_CDBOSC {CDBOSC_SETFOCUS = 0x0,CDBOSC_KILLFOCUS = 0x1,CDBOSC_SELCHANGE = 0x2,CDBOSC_RENAME = 0x3,CDBOSC_STATECHANGE = 0x4,};
enum MACRO_CERT_E {CERT_E_REVOKED = 0x800B010C,CERT_E_UNTRUSTEDTESTROOT = 0x800B010D,CERT_E_REVOCATION_FAILURE = 0x800B010E,CERT_E_CN_NO_MATCH = 0x800B010F,CERT_E_WRONG_USAGE = 0x800B0110,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000,};
enum MACRO_CLRDTR {CLRDTR = 6,};
enum MACRO_CLTYPE {CLTYPE_LEN = 12,};
enum MACRO_COMMON {COMMON_LVB_LEADING_BYTE = 0x100,COMMON_LVB_TRAILING_BYTE = 0x200,COMMON_LVB_GRID_HORIZONTAL = 0x400,COMMON_LVB_GRID_LVERTICAL = 0x800,COMMON_LVB_GRID_RVERTICAL = 0x1000,COMMON_LVB_REVERSE_VIDEO = 0x4000,COMMON_LVB_UNDERSCORE = 0x8000,COMMON_LVB_SBCSDBCS = 0x300,};
enum MACRO_CPSUIF {CPSUIF_UPDATE_PERMISSION = 0x1,CPSUIF_ICONID_AS_HICON = 0x2,CPSUIF_ABOUT_CALLBACK = 0x4,};
enum MACRO_CP_ACP {CP_ACP = 0,CP_OEMCP = 1,CP_MACCP = 2,CP_THREAD_ACP = 3,CP_SYMBOL = 42,CP_UTF7 = 65000,CP_UTF8 = 65001,};
enum MACRO_CREATE {CREATE_NEW = 1,CREATE_ALWAYS = 2,};
enum MACRO_CREDUI {CREDUI_FLAGS_INCORRECT_PASSWORD = 0x1,CREDUI_FLAGS_DO_NOT_PERSIST = 0x2,CREDUI_FLAGS_REQUEST_ADMINISTRATOR = 0x4,CREDUI_FLAGS_EXCLUDE_CERTIFICATES = 0x8,CREDUI_FLAGS_REQUIRE_CERTIFICATE = 0x10,CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = 0x40,CREDUI_FLAGS_ALWAYS_SHOW_UI = 0x80,CREDUI_FLAGS_REQUIRE_SMARTCARD = 0x100,CREDUI_FLAGS_PASSWORD_ONLY_OK = 0x200,CREDUI_FLAGS_VALIDATE_USERNAME = 0x400,CREDUI_FLAGS_COMPLETE_USERNAME = 0x800,CREDUI_FLAGS_PERSIST = 0x1000,CREDUI_FLAGS_SERVER_CREDENTIAL = 0x4000,CREDUI_FLAGS_EXPECT_CONFIRMATION = 0x20000,CREDUI_FLAGS_GENERIC_CREDENTIALS = 0x40000,CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = 0x80000,CREDUI_FLAGS_KEEP_USERNAME = 0x100000,CREDUI_FLAGS_PROMPT_VALID = 0x1E5FDF,};
enum MACRO_CSOUND {CSOUND_SYSTEM = 16,};
enum MACRO_CURSOR {CURSOR_SHOWING = 0x1,};
enum MACRO_D3DDEB {D3DDEB_BUFSIZE = 0x1,D3DDEB_CAPS = 0x2,D3DDEB_LPDATA = 0x4,};
enum MACRO_D3DERR {D3DERR_WRONGTEXTUREFORMAT = -2005530600,D3DERR_UNSUPPORTEDCOLOROPERATION = -2005530599,D3DERR_UNSUPPORTEDCOLORARG = -2005530598,D3DERR_UNSUPPORTEDALPHAOPERATION = -2005530597,D3DERR_UNSUPPORTEDALPHAARG = -2005530596,D3DERR_TOOMANYOPERATIONS = -2005530595,D3DERR_CONFLICTINGTEXTUREFILTER = -2005530594,D3DERR_UNSUPPORTEDFACTORVALUE = -2005530593,D3DERR_CONFLICTINGRENDERSTATE = -2005530591,D3DERR_UNSUPPORTEDTEXTUREFILTER = -2005530590,D3DERR_CONFLICTINGTEXTUREPALETTE = -2005530586,D3DERR_DRIVERINTERNALERROR = -2005530585,D3DERR_NOTFOUND = -2005530522,D3DERR_MOREDATA = -2005530521,D3DERR_DEVICELOST = -2005530520,D3DERR_DEVICENOTRESET = -2005530519,D3DERR_NOTAVAILABLE = -2005530518,D3DERR_OUTOFVIDEOMEMORY = -2005532292,D3DERR_INVALIDDEVICE = -2005530517,D3DERR_INVALIDCALL = -2005530516,D3DERR_DRIVERINVALIDCALL = -2005530515,};
enum MACRO_D3DFDS {D3DFDS_COLORMODEL = 0x1,D3DFDS_GUID = 0x2,D3DFDS_HARDWARE = 0x4,D3DFDS_TRIANGLES = 0x8,D3DFDS_LINES = 0x10,D3DFDS_MISCCAPS = 0x20,D3DFDS_RASTERCAPS = 0x40,D3DFDS_ZCMPCAPS = 0x80,D3DFDS_ALPHACMPCAPS = 0x100,D3DFDS_SRCBLENDCAPS = 0x200,D3DFDS_DSTBLENDCAPS = 0x400,D3DFDS_SHADECAPS = 0x800,D3DFDS_TEXTURECAPS = 0x1000,D3DFDS_TEXTUREFILTERCAPS = 0x2000,D3DFDS_TEXTUREBLENDCAPS = 0x4000,D3DFDS_TEXTUREADDRESSCAPS = 0x8000,};
enum MACRO_D3DFMT {D3DFMT_INTERNAL_D32 = 71,D3DFMT_INTERNAL_S1D15 = 72,D3DFMT_INTERNAL_D15S1 = 73,D3DFMT_INTERNAL_S8D24 = 74,D3DFMT_INTERNAL_D24S8 = 75,D3DFMT_INTERNAL_X8D24 = 76,D3DFMT_INTERNAL_D24X8 = 77,};
enum MACRO_D3DFVF {D3DFVF_RESERVED0 = 0x1,D3DFVF_POSITION_MASK = 0xE,D3DFVF_XYZ = 0x2,D3DFVF_XYZRHW = 0x4,D3DFVF_XYZB1 = 0x6,D3DFVF_XYZB2 = 0x8,D3DFVF_XYZB3 = 0xA,D3DFVF_XYZB4 = 0xC,D3DFVF_XYZB5 = 0xE,D3DFVF_NORMAL = 0x10,D3DFVF_PSIZE = 0x20,D3DFVF_DIFFUSE = 0x40,D3DFVF_SPECULAR = 0x80,D3DFVF_TEXCOUNT_MASK = 0xF00,D3DFVF_TEXCOUNT_SHIFT = 0x8,D3DFVF_TEX0 = 0x0,D3DFVF_TEX1 = 0x100,D3DFVF_TEX2 = 0x200,D3DFVF_TEX3 = 0x300,D3DFVF_TEX4 = 0x400,D3DFVF_TEX5 = 0x500,D3DFVF_TEX6 = 0x600,D3DFVF_TEX7 = 0x700,D3DFVF_TEX8 = 0x800,D3DFVF_LASTBETA_UBYTE4 = 0x1000,D3DFVF_RESERVED2 = 0xE000,};
enum MACRO_D3DHAL {D3DHAL_NUMCLIPVERTICES = 20,};
enum MACRO_D3DPAL {D3DPAL_FREE = 0x0,D3DPAL_READONLY = 0x40,D3DPAL_RESERVED = 0x80,};
enum MACRO_D3DSGR {D3DSGR_NO_CALIBRATION = 0x0,D3DSGR_CALIBRATE = 0x1,};
enum MACRO_D3DSPD {D3DSPD_IUNKNOWN = 0x1,};
enum MACRO_D3DTSS {D3DTSS_TCI_PASSTHRU = 0x0,D3DTSS_TCI_CAMERASPACENORMAL = 0x10000,D3DTSS_TCI_CAMERASPACEPOSITION = 0x20000,D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR = 0x30000,};
enum MACRO_D3DVIS {D3DVIS_INSIDE_FRUSTUM = 0,D3DVIS_INTERSECT_FRUSTUM = 1,D3DVIS_OUTSIDE_FRUSTUM = 2,D3DVIS_INSIDE_LEFT = 0,D3DVIS_INTERSECT_LEFT = 4,D3DVIS_OUTSIDE_LEFT = 8,D3DVIS_INSIDE_RIGHT = 0,D3DVIS_INTERSECT_RIGHT = 16,D3DVIS_OUTSIDE_RIGHT = 32,D3DVIS_INSIDE_TOP = 0,D3DVIS_INTERSECT_TOP = 64,D3DVIS_OUTSIDE_TOP = 128,D3DVIS_INSIDE_BOTTOM = 0,D3DVIS_INTERSECT_BOTTOM = 256,D3DVIS_OUTSIDE_BOTTOM = 512,D3DVIS_INSIDE_NEAR = 0,D3DVIS_INTERSECT_NEAR = 1024,D3DVIS_OUTSIDE_NEAR = 2048,D3DVIS_INSIDE_FAR = 0,D3DVIS_INTERSECT_FAR = 4096,D3DVIS_OUTSIDE_FAR = 8192,D3DVIS_MASK_FRUSTUM = 3,D3DVIS_MASK_LEFT = 12,D3DVIS_MASK_RIGHT = 48,D3DVIS_MASK_TOP = 192,D3DVIS_MASK_BOTTOM = 768,D3DVIS_MASK_NEAR = 3072,D3DVIS_MASK_FAR = 12288,};
enum MACRO_D3DVOP {D3DVOP_LIGHT = 1024,D3DVOP_TRANSFORM = 1,D3DVOP_CLIP = 4,D3DVOP_EXTENTS = 8,};
enum MACRO_D3DVSD {D3DVSD_TOKENTYPESHIFT = 29,D3DVSD_TOKENTYPEMASK = 3758096384,D3DVSD_STREAMNUMBERSHIFT = 0,D3DVSD_STREAMNUMBERMASK = 15,D3DVSD_DATALOADTYPESHIFT = 28,D3DVSD_DATALOADTYPEMASK = 268435456,D3DVSD_DATATYPESHIFT = 16,D3DVSD_DATATYPEMASK = 983040,D3DVSD_SKIPCOUNTSHIFT = 16,D3DVSD_SKIPCOUNTMASK = 983040,D3DVSD_VERTEXREGSHIFT = 0,D3DVSD_VERTEXREGMASK = 31,D3DVSD_VERTEXREGINSHIFT = 20,D3DVSD_VERTEXREGINMASK = 15728640,D3DVSD_CONSTCOUNTSHIFT = 25,D3DVSD_CONSTCOUNTMASK = 503316480,D3DVSD_CONSTADDRESSSHIFT = 0,D3DVSD_CONSTADDRESSMASK = 127,D3DVSD_CONSTRSSHIFT = 16,D3DVSD_CONSTRSMASK = 536805376,D3DVSD_EXTCOUNTSHIFT = 24,D3DVSD_EXTCOUNTMASK = 520093696,D3DVSD_EXTINFOSHIFT = 0,D3DVSD_EXTINFOMASK = 16777215,D3DVSD_STREAMTESSSHIFT = 28,D3DVSD_STREAMTESSMASK = 268435456,};
enum MACRO_DATA_E {DATA_E_FORMATETC = -2147221404,};
enum MACRO_DATA_S {DATA_S_SAMEFORMATETC = 0x40130,};
enum MACRO_DCI_OK {DCI_OK = 0,DCI_FAIL_GENERIC = -1,DCI_FAIL_UNSUPPORTEDVERSION = -2,DCI_FAIL_INVALIDSURFACE = -3,DCI_FAIL_UNSUPPORTED = -4,DCI_ERR_CURRENTLYNOTAVAIL = -5,DCI_ERR_INVALIDRECT = -6,DCI_ERR_UNSUPPORTEDFORMAT = -7,DCI_ERR_UNSUPPORTEDMASK = -8,DCI_ERR_TOOBIGHEIGHT = -9,DCI_ERR_TOOBIGWIDTH = -10,DCI_ERR_TOOBIGSIZE = -11,DCI_ERR_OUTOFMEMORY = -12,DCI_ERR_INVALIDPOSITION = -13,DCI_ERR_INVALIDSTRETCH = -14,DCI_ERR_INVALIDCLIPLIST = -15,DCI_ERR_SURFACEISOBSCURED = -16,DCI_ERR_XALIGN = -17,DCI_ERR_YALIGN = -18,DCI_ERR_XYALIGN = -19,DCI_ERR_WIDTHALIGN = -20,DCI_ERR_HEIGHTALIGN = -21,DCI_STATUS_POINTERCHANGED = 1,DCI_STATUS_STRIDECHANGED = 2,DCI_STATUS_FORMATCHANGED = 4,DCI_STATUS_SURFACEINFOCHANGED = 8,DCI_STATUS_CHROMAKEYCHANGED = 16,DCI_STATUS_WASSTILLDRAWING = 32,DCI_SURFACE_TYPE = 15,DCI_PRIMARY = 0,DCI_OFFSCREEN = 1,DCI_OVERLAY = 2,DCI_VISIBLE = 16,DCI_CHROMAKEY = 32,DCI_1632_ACCESS = 64,DCI_DWORDSIZE = 128,DCI_DWORDALIGN = 256,DCI_WRITEONLY = 512,DCI_ASYNC = 1024,DCI_CAN_STRETCHX = 4096,DCI_CAN_STRETCHY = 8192,DCI_CAN_STRETCHXY = 12288,DCI_CAN_STRETCHXN = 16384,DCI_CAN_STRETCHYN = 32768,DCI_CAN_STRETCHXYN = 49152,DCI_CANOVERLAY = 65536,};
enum MACRO_DDABLT {DDABLT_SRCOVERDEST = 0x1,};
enum MACRO_DDCAPS {DDCAPS_3D = 0x1,DDCAPS_ALIGNBOUNDARYDEST = 0x2,DDCAPS_ALIGNSIZEDEST = 0x4,DDCAPS_ALIGNBOUNDARYSRC = 0x8,DDCAPS_ALIGNSIZESRC = 0x10,DDCAPS_ALIGNSTRIDE = 0x20,DDCAPS_BLT = 0x40,DDCAPS_BLTQUEUE = 0x80,DDCAPS_BLTFOURCC = 0x100,DDCAPS_BLTSTRETCH = 0x200,DDCAPS_GDI = 0x400,DDCAPS_OVERLAY = 0x800,DDCAPS_OVERLAYCANTCLIP = 0x1000,DDCAPS_OVERLAYFOURCC = 0x2000,DDCAPS_OVERLAYSTRETCH = 0x4000,DDCAPS_PALETTE = 0x8000,DDCAPS_PALETTEVSYNC = 0x10000,DDCAPS_READSCANLINE = 0x20000,DDCAPS_RESERVED1 = 0x40000,DDCAPS_VBI = 0x80000,DDCAPS_ZBLTS = 0x100000,DDCAPS_ZOVERLAYS = 0x200000,DDCAPS_COLORKEY = 0x400000,DDCAPS_ALPHA = 0x800000,DDCAPS_COLORKEYHWASSIST = 0x1000000,DDCAPS_NOHARDWARE = 0x2000000,DDCAPS_BLTCOLORFILL = 0x4000000,DDCAPS_BANKSWITCHED = 0x8000000,DDCAPS_BLTDEPTHFILL = 0x10000000,DDCAPS_CANCLIP = 0x20000000,DDCAPS_CANCLIPSTRETCHED = 0x40000000,DDCAPS_CANBLTSYSMEM = 0x80000000,};
enum MACRO_DDCKEY {DDCKEY_COLORSPACE = 0x1,DDCKEY_DESTBLT = 0x2,DDCKEY_DESTOVERLAY = 0x4,DDCKEY_SRCBLT = 0x8,DDCKEY_SRCOVERLAY = 0x10,};
enum MACRO_DDENUM {DDENUM_ATTACHEDSECONDARYDEVICES = 0x1,DDENUM_DETACHEDSECONDARYDEVICES = 0x2,DDENUM_NONDISPLAYDEVICES = 0x4,};
enum MACRO_DDFLIP {DDFLIP_WAIT = 0x1,DDFLIP_EVEN = 0x2,DDFLIP_ODD = 0x4,DDFLIP_NOVSYNC = 0x8,DDFLIP_INTERVAL2 = 0x2000000,DDFLIP_INTERVAL3 = 0x3000000,DDFLIP_INTERVAL4 = 0x4000000,DDFLIP_STEREO = 0x10,DDFLIP_DONOTWAIT = 0x20,};
enum MACRO_DDLOCK {DDLOCK_SURFACEMEMORYPTR = 0x0,DDLOCK_WAIT = 0x1,DDLOCK_EVENT = 0x2,DDLOCK_READONLY = 0x10,DDLOCK_WRITEONLY = 0x20,DDLOCK_NOSYSLOCK = 0x800,DDLOCK_NOOVERWRITE = 0x1000,DDLOCK_DISCARDCONTENTS = 0x2000,DDLOCK_OKTOSWAP = 0x2000,DDLOCK_DONOTWAIT = 0x4000,DDLOCK_HASVOLUMETEXTUREBOXRECT = 0x8000,DDLOCK_NODIRTYUPDATE = 0x10000,};
enum MACRO_DDOVER {DDOVER_ALPHADEST = 0x1,DDOVER_ALPHADESTCONSTOVERRIDE = 0x2,DDOVER_ALPHADESTNEG = 0x4,DDOVER_ALPHADESTSURFACEOVERRIDE = 0x8,DDOVER_ALPHAEDGEBLEND = 0x10,DDOVER_ALPHASRC = 0x20,DDOVER_ALPHASRCCONSTOVERRIDE = 0x40,DDOVER_ALPHASRCNEG = 0x80,DDOVER_ALPHASRCSURFACEOVERRIDE = 0x100,DDOVER_HIDE = 0x200,DDOVER_KEYDEST = 0x400,DDOVER_KEYDESTOVERRIDE = 0x800,DDOVER_KEYSRC = 0x1000,DDOVER_KEYSRCOVERRIDE = 0x2000,DDOVER_SHOW = 0x4000,DDOVER_ADDDIRTYRECT = 0x8000,DDOVER_REFRESHDIRTYRECTS = 0x10000,DDOVER_REFRESHALL = 0x20000,DDOVER_DDFX = 0x80000,DDOVER_AUTOFLIP = 0x100000,DDOVER_BOB = 0x200000,DDOVER_OVERRIDEBOBWEAVE = 0x400000,DDOVER_INTERLEAVED = 0x800000,DDOVER_BOBHARDWARE = 0x1000000,DDOVER_ARGBSCALEFACTORS = 0x2000000,DDOVER_DEGRADEARGBSCALING = 0x4000000,};
enum MACRO_DDRAWI {DDRAWI_xxxxxxxxx1 = 0x1,DDRAWI_xxxxxxxxx2 = 0x2,DDRAWI_VIRTUALDESKTOP = 0x8,DDRAWI_MODEX = 0x10,DDRAWI_DISPLAYDRV = 0x20,DDRAWI_FULLSCREEN = 0x40,DDRAWI_MODECHANGED = 0x80,DDRAWI_NOHARDWARE = 0x100,DDRAWI_PALETTEINIT = 0x200,DDRAWI_NOEMULATION = 0x400,DDRAWI_HASCKEYDESTOVERLAY = 0x800,DDRAWI_HASCKEYSRCOVERLAY = 0x1000,DDRAWI_HASGDIPALETTE = 0x2000,DDRAWI_EMULATIONINITIALIZED = 0x4000,DDRAWI_HASGDIPALETTE_EXCLUSIVE = 0x8000,DDRAWI_MODEXILLEGAL = 0x10000,DDRAWI_FLIPPEDTOGDI = 0x20000,DDRAWI_NEEDSWIN16FORVRAMLOCK = 0x40000,DDRAWI_PDEVICEVRAMBITCLEARED = 0x80000,DDRAWI_STANDARDVGA = 0x100000,DDRAWI_EXTENDEDALIGNMENT = 0x200000,DDRAWI_CHANGINGMODE = 0x400000,DDRAWI_GDIDRV = 0x800000,DDRAWI_ATTACHEDTODESKTOP = 0x1000000,DDRAWI_UMODELOADED = 0x2000000,DDRAWI_DDRAWDATANOTFETCHED = 0x4000000,DDRAWI_SECONDARYDRIVERLOADED = 0x8000000,DDRAWI_TESTINGMODES = 0x10000000,DDRAWI_DRIVERINFO2 = 0x20000000,};
enum MACRO_DDSKIP {DDSKIP_SKIPNEXT = 1,DDSKIP_ENABLENEXT = 2,};
enum MACRO_DDVPFX {DDVPFX_CROPTOPDATA = 0x1,DDVPFX_CROPX = 0x2,DDVPFX_CROPY = 0x4,DDVPFX_INTERLEAVE = 0x8,DDVPFX_MIRRORLEFTRIGHT = 0x10,DDVPFX_MIRRORUPDOWN = 0x20,DDVPFX_PRESHRINKX = 0x40,DDVPFX_PRESHRINKY = 0x80,DDVPFX_PRESHRINKXB = 0x100,DDVPFX_PRESHRINKYB = 0x200,DDVPFX_PRESHRINKXS = 0x400,DDVPFX_PRESHRINKYS = 0x800,DDVPFX_PRESTRETCHX = 0x1000,DDVPFX_PRESTRETCHY = 0x2000,DDVPFX_PRESTRETCHXN = 0x4000,DDVPFX_PRESTRETCHYN = 0x8000,DDVPFX_VBICONVERT = 0x10000,DDVPFX_VBINOSCALE = 0x20000,DDVPFX_IGNOREVBIXCROP = 0x40000,DDVPFX_VBINOINTERLEAVE = 0x80000,};
enum MACRO_DDVPSQ {DDVPSQ_NOSIGNAL = 0x1,DDVPSQ_SIGNALOK = 0x2,};
enum MACRO_DD_ROP {DD_ROP_SPACE = 8,};
enum MACRO_DELETE {DELETE = 0x10000,};
enum MACRO_DELFLG {DELFLG_IN_USE = 0x1,DELFLG_IN_USE1 = 0x10000,};
enum MACRO_DEVICE {DEVICE_NOTIFY_WINDOW_HANDLE = 0x0,DEVICE_NOTIFY_SERVICE_HANDLE = 0x1,DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 0x4,};
enum MACRO_DEVLEN {DEVLEN = 80,};
enum MACRO_DIGCDP {DIGCDP_FLAG_BASIC = 0x1,DIGCDP_FLAG_ADVANCED = 0x2,DIGCDP_FLAG_REMOTE_BASIC = 0x3,DIGCDP_FLAG_REMOTE_ADVANCED = 0x4,};
enum MACRO_DIGSIG {DIGSIG_E_ENCODE = 0x800B0005,DIGSIG_E_DECODE = 0x800B0006,DIGSIG_E_EXTENSIBILITY = 0x800B0007,DIGSIG_E_CRYPTO = 0x800B0008,};
enum MACRO_DISPID {DISPID_UNKNOWN = -1,DISPID_VALUE = 0,DISPID_PROPERTYPUT = -3,DISPID_NEWENUM = -4,DISPID_EVALUATE = -5,DISPID_CONSTRUCTOR = -6,DISPID_DESTRUCTOR = -7,DISPID_COLLECT = -8,};
enum MACRO_DLLVER {DLLVER_PLATFORM_WINDOWS = 0x1,DLLVER_PLATFORM_NT = 0x2,DLLVER_MAJOR_MASK = 0xFFFF000000000000,DLLVER_MINOR_MASK = 0xFFFF00000000,DLLVER_BUILD_MASK = 0xFFFFFFFFFFFF0000,DLLVER_QFE_MASK = 0xFFFF,};
enum MACRO_DMLERR {DMLERR_NO_ERROR = 0,DMLERR_FIRST = 16384,DMLERR_ADVACKTIMEOUT = 16384,DMLERR_BUSY = 16385,DMLERR_DATAACKTIMEOUT = 16386,DMLERR_DLL_NOT_INITIALIZED = 16387,DMLERR_DLL_USAGE = 16388,DMLERR_EXECACKTIMEOUT = 16389,DMLERR_INVALIDPARAMETER = 16390,DMLERR_LOW_MEMORY = 16391,DMLERR_MEMORY_ERROR = 16392,DMLERR_NOTPROCESSED = 16393,DMLERR_NO_CONV_ESTABLISHED = 16394,DMLERR_POKEACKTIMEOUT = 16395,DMLERR_POSTMSG_FAILED = 16396,DMLERR_REENTRANCY = 16397,DMLERR_SERVER_DIED = 16398,DMLERR_SYS_ERROR = 16399,DMLERR_UNADVACKTIMEOUT = 16400,DMLERR_UNFOUND_QUEUE_ID = 16401,DMLERR_LAST = 16401,};
enum MACRO_DOMAIN {DOMAIN_USER_RID_ADMIN = 0x1F4,DOMAIN_USER_RID_GUEST = 0x1F5,DOMAIN_USER_RID_KRBTGT = 0x1F6,DOMAIN_USER_RID_MAX = 0x3E7,DOMAIN_GROUP_RID_ADMINS = 0x200,DOMAIN_GROUP_RID_USERS = 0x201,DOMAIN_GROUP_RID_GUESTS = 0x202,DOMAIN_GROUP_RID_COMPUTERS = 0x203,DOMAIN_GROUP_RID_CONTROLLERS = 0x204,DOMAIN_GROUP_RID_CERT_ADMINS = 0x205,DOMAIN_GROUP_RID_SCHEMA_ADMINS = 0x206,DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 0x207,DOMAIN_GROUP_RID_POLICY_ADMINS = 0x208,DOMAIN_ALIAS_RID_ADMINS = 0x220,DOMAIN_ALIAS_RID_USERS = 0x221,DOMAIN_ALIAS_RID_GUESTS = 0x222,DOMAIN_ALIAS_RID_POWER_USERS = 0x223,DOMAIN_ALIAS_RID_ACCOUNT_OPS = 0x224,DOMAIN_ALIAS_RID_SYSTEM_OPS = 0x225,DOMAIN_ALIAS_RID_PRINT_OPS = 0x226,DOMAIN_ALIAS_RID_BACKUP_OPS = 0x227,DOMAIN_ALIAS_RID_REPLICATOR = 0x228,DOMAIN_ALIAS_RID_RAS_SERVERS = 0x229,DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = 0x22A,DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = 0x22B,DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = 0x22C,DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = 0x22D,DOMAIN_ALIAS_RID_MONITORING_USERS = 0x22E,DOMAIN_ALIAS_RID_LOGGING_USERS = 0x22F,DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = 0x230,DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = 0x231,};
enum MACRO_DOUBLE {DOUBLE_CLICK = 0x2,};
enum MACRO_DRIVER {DRIVER_KERNELMODE = 0x1,DRIVER_USERMODE = 0x2,};
enum MACRO_DRVCNF {DRVCNF_CANCEL = 0x0,DRVCNF_OK = 0x1,DRVCNF_RESTART = 0x2,};
enum MACRO_DSBPAN {DSBPAN_LEFT = -10000,DSBPAN_CENTER = 0,DSBPAN_RIGHT = 10000,};
enum MACRO_DSCAPS {DSCAPS_PRIMARYMONO = 0x1,DSCAPS_PRIMARYSTEREO = 0x2,DSCAPS_PRIMARY8BIT = 0x4,DSCAPS_PRIMARY16BIT = 0x8,DSCAPS_CONTINUOUSRATE = 0x10,DSCAPS_EMULDRIVER = 0x20,DSCAPS_CERTIFIED = 0x40,DSCAPS_SECONDARYMONO = 0x100,DSCAPS_SECONDARYSTEREO = 0x200,DSCAPS_SECONDARY8BIT = 0x400,DSCAPS_SECONDARY16BIT = 0x800,};
enum MACRO_DSCFXR {DSCFXR_LOCHARDWARE = 0x10,DSCFXR_LOCSOFTWARE = 0x20,};
enum MACRO_DT_TOP {DT_TOP = 0x0,DT_LEFT = 0x0,DT_CENTER = 0x1,DT_RIGHT = 0x2,DT_VCENTER = 0x4,DT_BOTTOM = 0x8,DT_WORDBREAK = 0x10,DT_SINGLELINE = 0x20,DT_EXPANDTABS = 0x40,DT_TABSTOP = 0x80,DT_NOCLIP = 0x100,DT_EXTERNALLEADING = 0x200,DT_CALCRECT = 0x400,DT_NOPREFIX = 0x800,DT_INTERNAL = 0x1000,DT_EDITCONTROL = 0x2000,DT_PATH_ELLIPSIS = 0x4000,DT_END_ELLIPSIS = 0x8000,DT_MODIFYSTRING = 0x10000,DT_RTLREADING = 0x20000,DT_WORD_ELLIPSIS = 0x40000,DT_NOFULLWIDTHCHARBREAK = 0x80000,DT_HIDEPREFIX = 0x100000,DT_PREFIXONLY = 0x200000,};
enum MACRO_DV_ERR {DV_ERR_OK = 0,DV_ERR_BASE = 1,DV_ERR_NONSPECIFIC = 1,DV_ERR_BADFORMAT = 2,DV_ERR_STILLPLAYING = 3,DV_ERR_UNPREPARED = 4,DV_ERR_SYNC = 5,DV_ERR_TOOMANYCHANNELS = 6,DV_ERR_NOTDETECTED = 7,DV_ERR_BADINSTALL = 8,DV_ERR_CREATEPALETTE = 9,DV_ERR_SIZEFIELD = 10,DV_ERR_PARAM1 = 11,DV_ERR_PARAM2 = 12,DV_ERR_CONFIG1 = 13,DV_ERR_CONFIG2 = 14,DV_ERR_FLAGS = 15,DV_ERR_13 = 16,DV_ERR_NOTSUPPORTED = 17,DV_ERR_NOMEM = 18,DV_ERR_ALLOCATED = 19,DV_ERR_BADDEVICEID = 20,DV_ERR_INVALHANDLE = 21,DV_ERR_BADERRNUM = 22,DV_ERR_NO_BUFFERS = 23,DV_ERR_MEM_CONFLICT = 24,DV_ERR_IO_CONFLICT = 25,DV_ERR_DMA_CONFLICT = 26,DV_ERR_INT_CONFLICT = 27,DV_ERR_PROTECT_ONLY = 28,DV_ERR_LASTERROR = 28,DV_ERR_USER_MSG = 1001,DV_VM_OPEN = 976,DV_VM_CLOSE = 977,DV_VM_DATA = 978,DV_VM_ERROR = 979,};
enum MACRO_EMARCH {EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3,EMARCH_ENC_I17_IMM7B_SIZE_X = 7,EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4,EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0,EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3,EMARCH_ENC_I17_IMM9D_SIZE_X = 9,EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18,EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7,EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3,EMARCH_ENC_I17_IMM5C_SIZE_X = 5,EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13,EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16,EMARCH_ENC_I17_IC_INST_WORD_X = 3,EMARCH_ENC_I17_IC_SIZE_X = 1,EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12,EMARCH_ENC_I17_IC_VAL_POS_X = 21,EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1,EMARCH_ENC_I17_IMM41a_SIZE_X = 10,EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14,EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22,EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1,EMARCH_ENC_I17_IMM41b_SIZE_X = 8,EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24,EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32,EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2,EMARCH_ENC_I17_IMM41c_SIZE_X = 23,EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0,EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40,EMARCH_ENC_I17_SIGN_INST_WORD_X = 3,EMARCH_ENC_I17_SIGN_SIZE_X = 1,EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27,EMARCH_ENC_I17_SIGN_VAL_POS_X = 63,};
enum MACRO_ENABLE {ENABLE_PROCESSED_INPUT = 0x1,ENABLE_LINE_INPUT = 0x2,ENABLE_ECHO_INPUT = 0x4,ENABLE_WINDOW_INPUT = 0x8,ENABLE_MOUSE_INPUT = 0x10,ENABLE_PROCESSED_OUTPUT = 0x1,ENABLE_WRAP_AT_EOL_OUTPUT = 0x2,};
enum MACRO_ENDCAP {ENDCAP_ROUND = 0,ENDCAP_SQUARE = 1,ENDCAP_BUTT = 2,};
enum MACRO_ENDDOC {ENDDOC = 11,};
enum MACRO_END_TO {END_TO_END_QOSABILITY = 50006,};
enum MACRO_EXPORT {EXPORT_PRIVATE_KEYS = 0x4,};
enum MACRO_E_DRAW {E_DRAW = -2147221184,};
enum MACRO_FAILED {CRITICAL_SERVICE_FAILED = 0x5A,SET_ENV_VAR_FAILED = 0x5B,HAL_INITIALIZATION_FAILED = 0x5C,};
enum MACRO_FIELDS {FIELDS_DID_NOT_MATCH = 0x4,};
enum MACRO_FILEOP {FILEOP_COPY = 0,FILEOP_RENAME = 1,FILEOP_DELETE = 2,FILEOP_BACKUP = 3,FILEOP_ABORT = 0,FILEOP_DOIT = 1,FILEOP_SKIP = 2,FILEOP_RETRY = 1,FILEOP_NEWPATH = 4,};
enum MACRO_FLASHW {FLASHW_STOP = 0,FLASHW_CAPTION = 1,FLASHW_TRAY = 2,FLASHW_ALL = 3,FLASHW_TIMER = 4,FLASHW_TIMERNOFG = 12,};
enum MACRO_FLOPPY {FLOPPY_INTERNAL_ERROR = 0x37,};
enum MACRO_FLTMGR {FLTMGR_FILE_SYSTEM = 0xF5,};
enum MACRO_FOREST {FOREST_USER_RID_MAX = 0x1F3,};
enum MACRO_FORMAT {FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x100,FORMAT_MESSAGE_IGNORE_INSERTS = 0x200,FORMAT_MESSAGE_FROM_STRING = 0x400,FORMAT_MESSAGE_FROM_HMODULE = 0x800,FORMAT_MESSAGE_FROM_SYSTEM = 0x1000,FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x2000,FORMAT_MESSAGE_MAX_WIDTH_MASK = 0xFF,};
enum MACRO_FOURCC {FOURCC_DXT1 = 827611204,FOURCC_DXT2 = 844388420,FOURCC_DXT3 = 861165636,FOURCC_DXT4 = 877942852,FOURCC_DXT5 = 894720068,};
enum MACRO_F_WSMP {F_WSMP_NO_TRUNCATION = 0x1,F_WSMP_NO_COMPRESSION = 0x2,};
enum MACRO_GCAPS2 {GCAPS2_JPEGSRC = 0x1,GCAPS2_xxxx = 0x2,GCAPS2_PNGSRC = 0x8,GCAPS2_CHANGEGAMMARAMP = 0x10,GCAPS2_ALPHACURSOR = 0x20,GCAPS2_SYNCFLUSH = 0x40,GCAPS2_SYNCTIMER = 0x80,GCAPS2_ICD_MULTIMON = 0x100,GCAPS2_MOUSETRAILS = 0x200,GCAPS2_RESERVED1 = 0x400,};
enum MACRO_GET_PS {GET_PS_FEATURESETTING = 4121,};
enum MACRO_HANDLE {HANDLE_FLAG_INHERIT = 0x1,HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x2,};
enum MACRO_HANGUP {HANGUP_PENDING = 0x4,HANGUP_COMPLETE = 0x5,};
enum MACRO_HGLYPH {HGLYPH_INVALID = 4294967295,HFF_INVALID = 0,HFC_INVALID = 0,};
enum MACRO_HH_MAX {HH_MAX_TABS = 19,HH_FTS_DEFAULT_PROXIMITY = -1,};
enum MACRO_HKCOMB {HKCOMB_NONE = 0x1,HKCOMB_S = 0x2,HKCOMB_C = 0x4,HKCOMB_A = 0x8,HKCOMB_SC = 0x10,HKCOMB_SA = 0x20,HKCOMB_CA = 0x40,HKCOMB_SCA = 0x80,};
enum MACRO_HSHELL {HSHELL_WINDOWCREATED = 1,HSHELL_WINDOWDESTROYED = 2,HSHELL_ACTIVATESHELLWINDOW = 3,HSHELL_WINDOWACTIVATED = 4,HSHELL_GETMINRECT = 5,HSHELL_REDRAW = 6,HSHELL_TASKMAN = 7,HSHELL_LANGUAGE = 8,HSHELL_SYSMENU = 9,HSHELL_ENDTASK = 10,HSHELL_ACCESSIBILITYSTATE = 11,HSHELL_APPCOMMAND = 12,HSHELL_WINDOWREPLACED = 13,HSHELL_WINDOWREPLACING = 14,HSHELL_HIGHBIT = 32768,HSHELL_FLASH = 32774,HSHELL_RUDEAPPACTIVATED = 32772,};
enum MACRO_HS_DDI {HS_DDI_MAX = 6,};
enum MACRO_HTHELP {HTHELP = 21,};
enum MACRO_HTLEFT {HTLEFT = 10,};
enum MACRO_HTMENU {HTMENU = 5,};
enum MACRO_HTSIZE {HTSIZE = 4,};
enum MACRO_HTZOOM {HTZOOM = 9,};
enum MACRO_ICDRAW {ICDRAW_QUERY = 0x1,ICDRAW_FULLSCREEN = 0x2,ICDRAW_HDC = 0x4,ICDRAW_ANIMATE = 0x8,ICDRAW_CONTINUE = 0x10,ICDRAW_MEMORYDC = 0x20,ICDRAW_UPDATING = 0x40,ICDRAW_RENDER = 0x80,ICDRAW_BUFFER = 0x100,ICDRAW_HURRYUP = 0x80000000,ICDRAW_UPDATE = 0x40000000,ICDRAW_PREROLL = 0x20000000,ICDRAW_NULLFRAME = 0x10000000,ICDRAW_NOTKEYFRAME = 0x8000000,};
enum MACRO_ICMODE {ICMODE_COMPRESS = 1,ICMODE_DECOMPRESS = 2,ICMODE_FASTDECOMPRESS = 3,ICMODE_QUERY = 4,ICMODE_FASTCOMPRESS = 5,ICMODE_DRAW = 8,};
enum MACRO_ICTYPE {ICTYPE_VIDEO = 1667524982,ICTYPE_AUDIO = 1667528033,};
enum MACRO_IDHELP {IDHELP = 9,};
enum MACRO_IEPORT {EXTEND_IEPORT = 2,RETRACT_IEPORT = 3,};
enum MACRO_IGIMIF {IGIMIF_RIGHTMENU = 0x1,};
enum MACRO_IGIMII {IGIMII_CMODE = 0x1,IGIMII_SMODE = 0x2,IGIMII_CONFIGURE = 0x4,IGIMII_TOOLS = 0x8,IGIMII_HELP = 0x10,IGIMII_OTHER = 0x20,IGIMII_INPUTTOOLS = 0x40,};
enum MACRO_IGNORE {IGNORE = 0,INFINITE = -1,};
enum MACRO_IMEVER {IMEVER_0310 = 0x3000A,IMEVER_0400 = 0x40000,};
enum MACRO_IMMGWL {IMMGWL_IMC = 0,IMMGWLP_IMC = 0,};
enum MACRO_IMPORT {IMPORT_OBJECT_HDR_SIG2 = 0xFFFF,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_LOOPBACK = 0x7F000001,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_NONE = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_INET_E {INET_E_USE_DEFAULT_PROTOCOLHANDLER = 0x800C0011,INET_E_USE_DEFAULT_SETTING = 0x800C0012,INET_E_DEFAULT_ACTION = 0x800C0011,INET_E_QUERYOPTION_UNKNOWN = 0x800C0013,INET_E_REDIRECTING = 0x800C0014,};
enum MACRO_IO_ERR {IO_ERR_RETRY_SUCCEEDED = 0x40001,IO_ERR_INSUFFICIENT_RESOURCES = 0xC0040002,IO_ERR_CONFIGURATION_ERROR = 0xC0040003,IO_ERR_DRIVER_ERROR = 0xC0040004,IO_ERR_PARITY = 0xC0040005,IO_ERR_SEEK_ERROR = 0xC0040006,IO_ERR_BAD_BLOCK = 0xC0040007,IO_ERR_OVERRUN_ERROR = 0xC0040008,IO_ERR_TIMEOUT = 0xC0040009,IO_ERR_SEQUENCE = 0xC004000A,IO_ERR_CONTROLLER_ERROR = 0xC004000B,IO_ERR_INTERNAL_ERROR = 0xC004000C,IO_ERR_INCORRECT_IRQL = 0xC004000D,IO_ERR_INVALID_IOBASE = 0xC004000E,IO_ERR_NOT_READY = 0xC004000F,IO_ERR_INVALID_REQUEST = 0xC0040010,IO_ERR_VERSION = 0xC0040011,IO_ERR_LAYERED_FAILURE = 0xC0040012,IO_ERR_RESET = 0xC0040013,IO_ERR_PROTOCOL = 0xC0040014,IO_ERR_MEMORY_CONFLICT_DETECTED = 0xC0040015,IO_ERR_PORT_CONFLICT_DETECTED = 0xC0040016,IO_ERR_DMA_CONFLICT_DETECTED = 0xC0040017,IO_ERR_IRQ_CONFLICT_DETECTED = 0xC0040018,IO_ERR_BAD_FIRMWARE = 0xC0040019,IO_WRN_BAD_FIRMWARE = 0x8004001A,IO_ERR_DMA_RESOURCE_CONFLICT = 0xC004001B,IO_ERR_INTERRUPT_RESOURCE_CONFLICT = 0xC004001C,IO_ERR_MEMORY_RESOURCE_CONFLICT = 0xC004001D,IO_ERR_PORT_RESOURCE_CONFLICT = 0xC004001E,IO_BAD_BLOCK_WITH_NAME = 0xC004001F,IO_WRITE_CACHE_ENABLED = 0x80040020,IO_RECOVERED_VIA_ECC = 0x80040021,IO_WRITE_CACHE_DISABLED = 0x80040022,IO_FILE_QUOTA_THRESHOLD = 0x40040024,IO_FILE_QUOTA_LIMIT = 0x40040025,IO_FILE_QUOTA_STARTED = 0x40040026,IO_FILE_QUOTA_SUCCEEDED = 0x40040027,IO_FILE_QUOTA_FAILED = 0x80040028,IO_FILE_SYSTEM_CORRUPT = 0xC0040029,IO_FILE_QUOTA_CORRUPT = 0xC004002A,IO_SYSTEM_SLEEP_FAILED = 0xC004002B,IO_DUMP_POINTER_FAILURE = 0xC004002C,IO_DUMP_DRIVER_LOAD_FAILURE = 0xC004002D,IO_DUMP_INITIALIZATION_FAILURE = 0xC004002E,IO_DUMP_DUMPFILE_CONFLICT = 0xC004002F,IO_DUMP_DIRECT_CONFIG_FAILED = 0xC0040030,IO_DUMP_PAGE_CONFIG_FAILED = 0xC0040031,IO_LOST_DELAYED_WRITE = 0x80040032,IO_WARNING_PAGING_FAILURE = 0x80040033,IO_WRN_FAILURE_PREDICTED = 0x80040034,IO_WARNING_INTERRUPT_STILL_PENDING = 0x80040035,IO_DRIVER_CANCEL_TIMEOUT = 0x80040036,IO_FILE_SYSTEM_CORRUPT_WITH_NAME = 0xC0040037,IO_WARNING_ALLOCATION_FAILED = 0x80040038,IO_WARNING_LOG_FLUSH_FAILED = 0x80040039,IO_WARNING_DUPLICATE_SIGNATURE = 0x8004003A,IO_WARNING_DUPLICATE_PATH = 0x8004003B,};
enum MACRO_IPPORT {IPPORT_ECHO = 7,IPPORT_DISCARD = 9,IPPORT_SYSTAT = 11,IPPORT_DAYTIME = 13,IPPORT_NETSTAT = 15,IPPORT_FTP = 21,IPPORT_TELNET = 23,IPPORT_SMTP = 25,IPPORT_TIMESERVER = 37,IPPORT_NAMESERVER = 42,IPPORT_WHOIS = 43,IPPORT_MTP = 57,IPPORT_TFTP = 69,IPPORT_RJE = 77,IPPORT_FINGER = 79,IPPORT_TTYLINK = 87,IPPORT_SUPDUP = 95,IPPORT_EXECSERVER = 512,IPPORT_LOGINSERVER = 513,IPPORT_CMDSERVER = 514,IPPORT_EFSSERVER = 520,IPPORT_BIFFUDP = 512,IPPORT_WHOSERVER = 513,IPPORT_ROUTESERVER = 520,IPPORT_RESERVED = 1024,};
enum MACRO_JOYERR {JOYERR_NOERROR = 0,JOYERR_PARMS = 165,JOYERR_NOCANDO = 166,JOYERR_UNPLUGGED = 167,};
enum MACRO_JPEG_Y {JPEG_Y = 1,JPEG_YCbCr = 2,JPEG_RGB = 3,};
enum MACRO_KBDEXT {KBDEXT = 0x100,KBDMULTIVK = 0x200,KBDSPECIAL = 0x400,KBDNUMPAD = 0x800,KBDUNICODE = 0x1000,KBDINJECTEDVK = 0x2000,KBDMAPPEDVK = 0x4000,KBDBREAK = 0x8000,};
enum MACRO_KBDNLS {KBDNLS_TYPE_NULL = 0,KBDNLS_TYPE_NORMAL = 1,KBDNLS_TYPE_TOGGLE = 2,KBDNLS_INDEX_NORMAL = 1,KBDNLS_INDEX_ALT = 2,KBDNLS_NULL = 0,KBDNLS_NOEVENT = 1,KBDNLS_SEND_BASE_VK = 2,KBDNLS_SEND_PARAM_VK = 3,KBDNLS_KANALOCK = 4,KBDNLS_ALPHANUM = 5,KBDNLS_HIRAGANA = 6,KBDNLS_KATAKANA = 7,KBDNLS_SBCSDBCS = 8,KBDNLS_ROMAN = 9,KBDNLS_CODEINPUT = 10,KBDNLS_HELP_OR_END = 11,KBDNLS_HOME_OR_CLEAR = 12,KBDNLS_NUMPAD = 13,KBDNLS_KANAEVENT = 14,KBDNLS_CONV_OR_NONCONV = 15,};
enum MACRO_KERNEL {KERNEL_APC_PENDING_DURING_EXIT = 0x20,};
enum MACRO_KSRATE {KSRATE_NOPRESENTATIONSTART = 0x1,KSRATE_NOPRESENTATIONDURATION = 0x2,};
enum MACRO_KSWAVE {KSWAVE_COMPATCAPS_INPUT = 0x0,KSWAVE_COMPATCAPS_OUTPUT = 0x1,KSWAVE_BUFFER_ATTRIBUTEF_LOOPING = 0x1,KSWAVE_BUFFER_ATTRIBUTEF_STATIC = 0x2,};
enum MACRO_LAYOUT {LAYOUT_RTL = 0x1,LAYOUT_BTT = 0x2,LAYOUT_VBH = 0x4,LAYOUT_ORIENTATIONMASK = 0x7,LAYOUT_BITMAPORIENTATIONPRESERVED = 0x8,};
enum MACRO_LENGTH {VENDOR_ID_LENGTH = 8,PRODUCT_ID_LENGTH = 16,REVISION_LENGTH = 4,SERIAL_NUMBER_LENGTH = 32,};
enum MACRO_LGRPID {LGRPID_INSTALLED = 0x1,LGRPID_SUPPORTED = 0x2,};
enum MACRO_LISTEN {LISTEN_OUTSTANDING = 0x1,};
enum MACRO_LOCALE {LOCALE_SYSTEM_DEFAULT = 2048,LOCALE_USER_DEFAULT = 1024,LOCALE_NEUTRAL = 0,LOCALE_INVARIANT = 127,};
enum MACRO_LOCKED {LOCKED_PAGES_TRACKER_CORRUPTION = 0xD9,};
enum MACRO_LOGOFF {ENDSESSION_LOGOFF = 0x80000000,EWX_LOGOFF = 0x0,};
enum MACRO_LVBKIF {LVBKIF_SOURCE_NONE = 0x0,LVBKIF_SOURCE_HBITMAP = 0x1,LVBKIF_SOURCE_URL = 0x2,LVBKIF_SOURCE_MASK = 0x3,LVBKIF_STYLE_NORMAL = 0x0,LVBKIF_STYLE_TILE = 0x10,LVBKIF_STYLE_MASK = 0x10,LVBKIF_FLAG_TILEOFFSET = 0x100,LVBKIF_TYPE_WATERMARK = 0x10000000,};
enum MACRO_LVCDRF {LVCDRF_NOSELECT = 0x10000,LVCDRF_NOGROUPFRAME = 0x20000,};
enum MACRO_LVCFMT {LVCFMT_LEFT = 0x0,LVCFMT_RIGHT = 0x1,LVCFMT_CENTER = 0x2,LVCFMT_JUSTIFYMASK = 0x3,LVCFMT_IMAGE = 0x800,LVCFMT_BITMAP_ON_RIGHT = 0x1000,LVCFMT_COL_HAS_IMAGES = 0x8000,};
enum MACRO_LVSICF {LVSICF_NOINVALIDATEALL = 0x1,LVSICF_NOSCROLL = 0x2,};
enum MACRO_LVS_EX {LVS_EX_GRIDLINES = 0x1,LVS_EX_SUBITEMIMAGES = 0x2,LVS_EX_CHECKBOXES = 0x4,LVS_EX_TRACKSELECT = 0x8,LVS_EX_HEADERDRAGDROP = 0x10,LVS_EX_FULLROWSELECT = 0x20,LVS_EX_ONECLICKACTIVATE = 0x40,LVS_EX_TWOCLICKACTIVATE = 0x80,LVS_EX_FLATSB = 0x100,LVS_EX_REGIONAL = 0x200,LVS_EX_INFOTIP = 0x400,LVS_EX_UNDERLINEHOT = 0x800,LVS_EX_UNDERLINECOLD = 0x1000,LVS_EX_MULTIWORKAREAS = 0x2000,LVS_EX_LABELTIP = 0x4000,LVS_EX_BORDERSELECT = 0x8000,LVS_EX_DOUBLEBUFFER = 0x10000,LVS_EX_HIDELABELS = 0x20000,LVS_EX_SINGLEROW = 0x40000,LVS_EX_SNAPTOGRID = 0x80000,LVS_EX_SIMPLESELECT = 0x100000,};
enum MACRO_LVTVIF {LVTVIF_AUTOSIZE = 0x0,LVTVIF_FIXEDWIDTH = 0x1,LVTVIF_FIXEDHEIGHT = 0x2,LVTVIF_FIXEDSIZE = 0x3,};
enum MACRO_LVTVIM {LVTVIM_TILESIZE = 0x1,LVTVIM_COLUMNS = 0x2,LVTVIM_LABELMARGIN = 0x4,};
enum MACRO_MACRON {MACRON = 0x304,};
enum MACRO_MAXLEN {MAXLEN_IFDESCR = 256,MAXLEN_PHYSADDR = 8,};
enum MACRO_MAX_IF {MAX_IF_TYPE = 145,};
enum MACRO_MAX_IP {MAX_IP_STATUS = 11050,};
enum MACRO_MCDBUF {MCDBUF_ENABLED = 0x1,MCDBUF_NOCLIP = 0x2,};
enum MACRO_MCIERR {MCIERR_INVALID_DEVICE_ID = 257,MCIERR_UNRECOGNIZED_KEYWORD = 259,MCIERR_UNRECOGNIZED_COMMAND = 261,MCIERR_HARDWARE = 262,MCIERR_INVALID_DEVICE_NAME = 263,MCIERR_OUT_OF_MEMORY = 264,MCIERR_DEVICE_OPEN = 265,MCIERR_CANNOT_LOAD_DRIVER = 266,MCIERR_MISSING_COMMAND_STRING = 267,MCIERR_PARAM_OVERFLOW = 268,MCIERR_MISSING_STRING_ARGUMENT = 269,MCIERR_BAD_INTEGER = 270,MCIERR_PARSER_INTERNAL = 271,MCIERR_DRIVER_INTERNAL = 272,MCIERR_MISSING_PARAMETER = 273,MCIERR_UNSUPPORTED_FUNCTION = 274,MCIERR_FILE_NOT_FOUND = 275,MCIERR_DEVICE_NOT_READY = 276,MCIERR_INTERNAL = 277,MCIERR_DRIVER = 278,MCIERR_CANNOT_USE_ALL = 279,MCIERR_MULTIPLE = 280,MCIERR_EXTENSION_NOT_FOUND = 281,MCIERR_OUTOFRANGE = 282,MCIERR_FLAGS_NOT_COMPATIBLE = 284,MCIERR_FILE_NOT_SAVED = 286,MCIERR_DEVICE_TYPE_REQUIRED = 287,MCIERR_DEVICE_LOCKED = 288,MCIERR_DUPLICATE_ALIAS = 289,MCIERR_BAD_CONSTANT = 290,MCIERR_MUST_USE_SHAREABLE = 291,MCIERR_MISSING_DEVICE_NAME = 292,MCIERR_BAD_TIME_FORMAT = 293,MCIERR_NO_CLOSING_QUOTE = 294,MCIERR_DUPLICATE_FLAGS = 295,MCIERR_INVALID_FILE = 296,MCIERR_NULL_PARAMETER_BLOCK = 297,MCIERR_UNNAMED_RESOURCE = 298,MCIERR_NEW_REQUIRES_ALIAS = 299,MCIERR_NOTIFY_ON_AUTO_OPEN = 300,MCIERR_NO_ELEMENT_ALLOWED = 301,MCIERR_NONAPPLICABLE_FUNCTION = 302,MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303,MCIERR_FILENAME_REQUIRED = 304,MCIERR_EXTRA_CHARACTERS = 305,MCIERR_DEVICE_NOT_INSTALLED = 306,MCIERR_GET_CD = 307,MCIERR_SET_CD = 308,MCIERR_SET_DRIVE = 309,MCIERR_DEVICE_LENGTH = 310,MCIERR_DEVICE_ORD_LENGTH = 311,MCIERR_NO_INTEGER = 312,MCIERR_WAVE_OUTPUTSINUSE = 320,MCIERR_WAVE_SETOUTPUTINUSE = 321,MCIERR_WAVE_INPUTSINUSE = 322,MCIERR_WAVE_SETINPUTINUSE = 323,MCIERR_WAVE_OUTPUTUNSPECIFIED = 324,MCIERR_WAVE_INPUTUNSPECIFIED = 325,MCIERR_WAVE_OUTPUTSUNSUITABLE = 326,MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327,MCIERR_WAVE_INPUTSUNSUITABLE = 328,MCIERR_WAVE_SETINPUTUNSUITABLE = 329,MCIERR_SEQ_DIV_INCOMPATIBLE = 336,MCIERR_SEQ_PORT_INUSE = 337,MCIERR_SEQ_PORT_NONEXISTENT = 338,MCIERR_SEQ_PORT_MAPNODEVICE = 339,MCIERR_SEQ_PORT_MISCERROR = 340,MCIERR_SEQ_TIMER = 341,MCIERR_SEQ_PORTUNSPECIFIED = 342,MCIERR_SEQ_NOMIDIPRESENT = 343,MCIERR_NO_WINDOW = 346,MCIERR_CREATEWINDOW = 347,MCIERR_FILE_READ = 348,MCIERR_FILE_WRITE = 349,MCIERR_NO_IDENTITY = 350,MCIERR_CUSTOM_DRIVER_BASE = 512,};
enum MACRO_MCIWND {MCIWND_START = -1,MCIWND_END = -2,};
enum MACRO_MCW_IC {MCW_IC = 262144,};
enum MACRO_MCW_PC {MCW_PC = 196608,};
enum MACRO_MCW_RC {MCW_RC = 768,};
enum MACRO_MDMVOL {MDMVOL_LOW = 0x0,MDMVOL_MEDIUM = 0x1,MDMVOL_HIGH = 0x2,};
enum MACRO_MEMORY {MEMORY_ALLOCATION_ALIGNMENT = 8,};
enum MACRO_METHOD {METHOD_BUFFERED = 0,METHOD_IN_DIRECT = 1,METHOD_OUT_DIRECT = 2,METHOD_NEITHER = 3,METHOD_DIRECT_TO_HARDWARE = 1,METHOD_DIRECT_FROM_HARDWARE = 2,};
enum MACRO_MF_HSZ {MF_HSZ_INFO = 0x1000000,MF_SENDMSGS = 0x2000000,MF_POSTMSGS = 0x4000000,MF_CALLBACKS = 0x8000000,MF_ERRORS = 0x10000000,MF_LINKS = 0x20000000,MF_CONV = 0x40000000,MF_MASK = 0xFF000000,};
enum MACRO_MIN_IF {MIN_IF_TYPE = 1,};
enum MACRO_MIXERR {MIXERR_INVALLINE = 1024,MIXERR_INVALCONTROL = 1025,MIXERR_INVALVALUE = 1026,MIXERR_LASTERROR = 1026,};
enum MACRO_MK_ALT {MK_ALT = 0x20,};
enum MACRO_MM_ACM {MM_ACM_OPEN = 980,MM_ACM_CLOSE = 981,MM_ACM_DONE = 982,};
enum MACRO_MM_MAX {MM_MAX_NUMAXES = 16,};
enum MACRO_MSV1_0 {MSV1_0_SUBAUTHENTICATION_FLAGS = 0xFF000000,};
enum MACRO_MUTANT {MUTANT_QUERY_STATE = 0x1,MUTANT_ALL_ACCESS = 0x1F0001,};
enum MACRO_NAVDIR {NAVDIR_MIN = 0,NAVDIR_UP = 1,NAVDIR_DOWN = 2,NAVDIR_LEFT = 3,NAVDIR_RIGHT = 4,NAVDIR_NEXT = 5,NAVDIR_PREVIOUS = 6,NAVDIR_FIRSTCHILD = 7,NAVDIR_LASTCHILD = 8,NAVDIR_MAX = 9,};
enum MACRO_NIBBLE {NIBBLE = 0x4,};
enum MACRO_NLSKBD {NLSKBD_OEM_MICROSOFT = 0x0,NLSKBD_OEM_AX = 0x1,NLSKBD_OEM_EPSON = 0x4,NLSKBD_OEM_FUJITSU = 0x5,NLSKBD_OEM_IBM = 0x7,NLSKBD_OEM_MATSUSHITA = 0xA,NLSKBD_OEM_NEC = 0xD,NLSKBD_OEM_TOSHIBA = 0x12,NLSKBD_OEM_DEC = 0x18,};
enum MACRO_NSTYPE {NSTYPE_HIERARCHICAL = 0x1,NSTYPE_DYNAMIC = 0x2,NSTYPE_ENUMERABLE = 0x4,NSTYPE_WORKGROUP = 0x8,};
enum MACRO_NTE_OP {NTE_OP_OK = 0,};
enum MACRO_NUMBER {NUMBER_OF_EXPORTED_VARIABLES = 39,};
enum MACRO_NUMPRS {NUMPRS_LEADING_WHITE = 0x1,NUMPRS_TRAILING_WHITE = 0x2,NUMPRS_LEADING_PLUS = 0x4,NUMPRS_TRAILING_PLUS = 0x8,NUMPRS_LEADING_MINUS = 0x10,NUMPRS_TRAILING_MINUS = 0x20,NUMPRS_HEX_OCT = 0x40,NUMPRS_PARENS = 0x80,NUMPRS_DECIMAL = 0x100,NUMPRS_THOUSANDS = 0x200,NUMPRS_CURRENCY = 0x400,NUMPRS_EXPONENT = 0x800,NUMPRS_USE_ALL = 0x1000,NUMPRS_STD = 0x1FFF,NUMPRS_NEG = 0x10000,NUMPRS_INEXACT = 0x20000,};
enum MACRO_OBJECT {OBJECT_INITIALIZATION_FAILED = 0x5E,SECURITY_INITIALIZATION_FAILED = 0x5F,PROCESS_INITIALIZATION_FAILED = 0x60,HAL1_INITIALIZATION_FAILED = 0x61,OBJECT1_INITIALIZATION_FAILED = 0x62,SECURITY1_INITIALIZATION_FAILED = 0x63,SYMBOLIC_INITIALIZATION_FAILED = 0x64,MEMORY1_INITIALIZATION_FAILED = 0x65,CACHE_INITIALIZATION_FAILED = 0x66,CONFIG_INITIALIZATION_FAILED = 0x67,FILE_INITIALIZATION_FAILED = 0x68,IO1_INITIALIZATION_FAILED = 0x69,LPC_INITIALIZATION_FAILED = 0x6A,PROCESS1_INITIALIZATION_FAILED = 0x6B,REFMON_INITIALIZATION_FAILED = 0x6C,SESSION1_INITIALIZATION_FAILED = 0x6D,SESSION2_INITIALIZATION_FAILED = 0x6E,SESSION3_INITIALIZATION_FAILED = 0x6F,SESSION4_INITIALIZATION_FAILED = 0x70,SESSION5_INITIALIZATION_FAILED = 0x71,ASSIGN_DRIVE_LETTERS_FAILED = 0x72,CONFIG_LIST_FAILED = 0x73,};
enum MACRO_OEMGDS {OEMGDS_MIN_DOCSTICKY = 1,OEMGDS_PSDM_FLAGS = 1,OEMGDS_PSDM_DIALECT = 2,OEMGDS_PSDM_TTDLFMT = 3,OEMGDS_PSDM_NUP = 4,OEMGDS_PSDM_PSLEVEL = 5,OEMGDS_PSDM_CUSTOMSIZE = 6,OEMGDS_UNIDM_GPDVER = 16384,OEMGDS_UNIDM_FLAGS = 16385,OEMGDS_MIN_PRINTERSTICKY = 32768,OEMGDS_PRINTFLAGS = 32768,OEMGDS_FREEMEM = 32769,OEMGDS_JOBTIMEOUT = 32770,OEMGDS_WAITTIMEOUT = 32771,OEMGDS_PROTOCOL = 32772,OEMGDS_MINOUTLINE = 32773,OEMGDS_MAXBITMAP = 32774,OEMGDS_MAX = 65536,};
enum MACRO_OGONEK {OGONEK = 0x328,};
enum MACRO_OIEXTF {OIEXTF_ANSI_STRING = 0x1,};
enum MACRO_OLEOBJ {OLEOBJ_E_FIRST = 0x80040180,OLEOBJ_E_LAST = 0x8004018F,OLEOBJ_S_FIRST = 0x40180,OLEOBJ_S_LAST = 0x4018F,OLEOBJ_E_NOVERBS = 0x80040180,OLEOBJ_E_INVALIDVERB = 0x80040181,};
enum MACRO_OPENGL {OPENGL_CMD = 4352,OPENGL_GETINFO = 4353,};
enum MACRO_PANOSE {PANOSE_COUNT = 10,};
enum MACRO_PARITY {PARITY_NONE = 0x100,PARITY_ODD = 0x200,PARITY_EVEN = 0x400,PARITY_MARK = 0x800,PARITY_SPACE = 0x1000,};
enum MACRO_PCMCIA {PCMCIA_OPT_HAVE_SOCKET = 0x1,PCMCIA_OPT_AUTOMEM = 0x4,PCMCIA_OPT_NO_SOUND = 0x8,PCMCIA_OPT_NO_AUDIO = 0x10,PCMCIA_OPT_NO_APMREMOVE = 0x20,PCMCIA_DEF_MEMBEGIN = 0xC0000,PCMCIA_DEF_MEMEND = 0xFFFFFF,PCMCIA_DEF_MEMLEN = 0x1000,PCMCIA_DEF_MIN_REGION = 0x10000,};
enum MACRO_PD_CAN {PD_CAN_DRAW_DIB = 0x1,PD_CAN_STRETCHDIB = 0x2,PD_STRETCHDIB_1_1_OK = 0x4,PD_STRETCHDIB_1_2_OK = 0x8,PD_STRETCHDIB_1_N_OK = 0x10,};
enum MACRO_PF_ATM {PF_ATM = 22,PF_INET6 = 23,};
enum MACRO_PHASE0 {PHASE0_EXCEPTION = 0x78,};
enum MACRO_PIDASI {PIDASI_FORMAT = 0x2,PIDASI_TIMELENGTH = 0x3,PIDASI_AVG_DATA_RATE = 0x4,PIDASI_SAMPLE_RATE = 0x5,PIDASI_SAMPLE_SIZE = 0x6,PIDASI_CHANNEL_COUNT = 0x7,PIDASI_STREAM_NUMBER = 0x8,PIDASI_STREAM_NAME = 0x9,PIDASI_COMPRESSION = 0xA,};
enum MACRO_PIDDSI {PIDDSI_CATEGORY = 0x2,PIDDSI_PRESFORMAT = 0x3,PIDDSI_BYTECOUNT = 0x4,PIDDSI_LINECOUNT = 0x5,PIDDSI_PARCOUNT = 0x6,PIDDSI_SLIDECOUNT = 0x7,PIDDSI_NOTECOUNT = 0x8,PIDDSI_HIDDENCOUNT = 0x9,PIDDSI_MMCLIPCOUNT = 0xA,PIDDSI_SCALE = 0xB,PIDDSI_HEADINGPAIR = 0xC,PIDDSI_DOCPARTS = 0xD,PIDDSI_MANAGER = 0xE,PIDDSI_COMPANY = 0xF,PIDDSI_LINKSDIRTY = 0x10,};
enum MACRO_PIDISF {PIDISF_RECENTLYCHANGED = 0x1,PIDISF_CACHEDSTICKY = 0x2,PIDISF_CACHEIMAGES = 0x10,PIDISF_FOLLOWALLLINKS = 0x20,};
enum MACRO_PIDISM {PIDISM_GLOBAL = 0,PIDISM_WATCH = 1,PIDISM_DONTWATCH = 2,};
enum MACRO_PIDMSI {PIDMSI_EDITOR = 0x2,PIDMSI_SUPPLIER = 0x3,PIDMSI_SOURCE = 0x4,PIDMSI_SEQUENCE_NO = 0x5,PIDMSI_PROJECT = 0x6,PIDMSI_STATUS = 0x7,PIDMSI_OWNER = 0x8,PIDMSI_RATING = 0x9,PIDMSI_PRODUCTION = 0xA,PIDMSI_COPYRIGHT = 0xB,};
enum MACRO_PIDVSI {PIDVSI_STREAM_NAME = 0x2,PIDVSI_FRAME_WIDTH = 0x3,PIDVSI_FRAME_HEIGHT = 0x4,PIDVSI_TIMELENGTH = 0x7,PIDVSI_FRAME_COUNT = 0x5,PIDVSI_FRAME_RATE = 0x6,PIDVSI_DATA_RATE = 0x8,PIDVSI_SAMPLE_SIZE = 0x9,PIDVSI_COMPRESSION = 0xA,PIDVSI_STREAM_NUMBER = 0xB,};
enum MACRO_PID_IS {PID_IS_URL = 2,PID_IS_NAME = 4,PID_IS_WORKINGDIR = 5,PID_IS_HOTKEY = 6,PID_IS_SHOWCMD = 7,PID_IS_ICONINDEX = 8,PID_IS_ICONFILE = 9,PID_IS_WHATSNEW = 10,PID_IS_AUTHOR = 11,PID_IS_DESCRIPTION = 12,PID_IS_COMMENT = 13,PID_INTSITE_WHATSNEW = 2,PID_INTSITE_AUTHOR = 3,PID_INTSITE_LASTVISIT = 4,PID_INTSITE_LASTMOD = 5,PID_INTSITE_VISITCOUNT = 6,PID_INTSITE_DESCRIPTION = 7,PID_INTSITE_COMMENT = 8,PID_INTSITE_FLAGS = 9,PID_INTSITE_CONTENTLEN = 10,PID_INTSITE_CONTENTCODE = 11,PID_INTSITE_RECURSE = 12,PID_INTSITE_WATCH = 13,PID_INTSITE_SUBSCRIPTION = 14,PID_INTSITE_URL = 15,PID_INTSITE_TITLE = 16,PID_INTSITE_CODEPAGE = 18,PID_INTSITE_TRACKING = 19,PID_INTSITE_ICONINDEX = 20,PID_INTSITE_ICONFILE = 21,};
enum MACRO_PKCS12 {PKCS12_IMPORT_RESERVED_MASK = 0xFFFF0000,};
enum MACRO_PLANES {PLANES = 14,NUMBRUSHES = 16,};
enum MACRO_POLICY {POLICY_SHOWREASONUI_NEVER = 0,POLICY_SHOWREASONUI_ALWAYS = 1,POLICY_SHOWREASONUI_WORKSTATIONONLY = 2,POLICY_SHOWREASONUI_SERVERONLY = 3,};
enum MACRO_PRAGMA {PRAGMA_DEPRECATED_DDK = 0,};
enum MACRO_PREFIX {PREFIX_MISMATCH = 0xC00037EA,PREFIX_MISMATCH_FIXED = 0xC00037EB,PREFIX_MISMATCH_NOT_FIXED = 0xC00037EC,};
enum MACRO_PRSPEC {PRSPEC_INVALID = 0xFFFFFFFF,PRSPEC_LPWSTR = 0x0,PRSPEC_PROPID = 0x1,};
enum MACRO_PSNRET {PSNRET_NOERROR = 0,PSNRET_INVALID = 1,PSNRET_INVALID_NOCHANGEPAGE = 2,PSNRET_MESSAGEHANDLED = 3,};
enum MACRO_PSWIZB {PSWIZB_BACK = 0x1,PSWIZB_NEXT = 0x2,PSWIZB_FINISH = 0x4,PSWIZB_DISABLEDFINISH = 0x8,};
enum MACRO_QITIPF {QITIPF_DEFAULT = 0x0,QITIPF_USENAME = 0x1,QITIPF_LINKNOTARGET = 0x2,QITIPF_LINKUSETARGET = 0x4,QITIPF_USESLOWTIP = 0x8,};
enum MACRO_RASADP {RASADP_DisableConnectionQuery = 0,RASADP_LoginSessionDisable = 1,RASADP_SavedAddressesLimit = 2,RASADP_FailedConnectionTimeout = 3,RASADP_ConnectionQueryTimeout = 4,};
enum MACRO_RASEDM {RASEDM_DialAll = 1,RASEDM_DialAsNeeded = 2,};
enum MACRO_RASEO2 {RASEO2_SecureFileAndPrint = 0x1,RASEO2_SecureClientForMSNet = 0x2,RASEO2_DontNegotiateMultilink = 0x4,RASEO2_DontUseRasCredentials = 0x8,RASEO2_UsePreSharedKey = 0x10,RASEO2_Internet = 0x20,RASEO2_DisableNbtOverIP = 0x40,RASEO2_UseGlobalDeviceSettings = 0x80,RASEO2_ReconnectIfDropped = 0x100,RASEO2_SharePhoneNumbers = 0x200,};
enum MACRO_RASIDS {RASIDS_Disabled = 0xFFFFFFFF,RASIDS_UseGlobalValue = 0x0,};
enum MACRO_RASIPO {RASIPO_VJ = 0x1,};
enum MACRO_RAWTCP {RAWTCP = 1,};
enum MACRO_RDEOPT {RDEOPT_UsePrefixSuffix = 0x1,RDEOPT_PausedStates = 0x2,RDEOPT_IgnoreModemSpeaker = 0x4,RDEOPT_SetModemSpeaker = 0x8,RDEOPT_IgnoreSoftwareCompression = 0x10,RDEOPT_SetSoftwareCompression = 0x20,RDEOPT_DisableConnectedUI = 0x40,RDEOPT_DisableReconnectUI = 0x80,RDEOPT_DisableReconnect = 0x100,RDEOPT_NoUser = 0x200,RDEOPT_PauseOnScript = 0x400,RDEOPT_Router = 0x800,RDEOPT_CustomDial = 0x1000,RDEOPT_UseCustomScripting = 0x2000,};
enum MACRO_REASON {REASON_SWINSTALL = 196610,REASON_HWINSTALL = 65538,REASON_SERVICEHANG = 196613,REASON_UNSTABLE = 327686,REASON_SWHWRECONF = 196612,REASON_OTHER = 0,REASON_UNKNOWN = 255,REASON_LEGACY_API = -2147024896,REASON_PLANNED_FLAG = -2147483648,};
enum MACRO_REGSTR {REGSTR_MAX_VALUE_LENGTH = 256,};
enum MACRO_REPORT {REPORT_NO_PRIVATE_KEY = 0x1,REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 0x2,};
enum MACRO_RESULT {RESULT_IS_ALIAS = 0x1,RESULT_IS_ADDED = 0x10,RESULT_IS_CHANGED = 0x20,RESULT_IS_DELETED = 0x40,};
enum MACRO_RETURN {RETURN_SMART_STATUS = 0xDA,};
enum MACRO_RI_KEY {RI_KEY_MAKE = 0,RI_KEY_BREAK = 1,RI_KEY_E0 = 2,RI_KEY_E1 = 4,RI_KEY_TERMSRV_SET_LED = 8,RI_KEY_TERMSRV_SHADOW = 16,};
enum MACRO_ROUTER {ROUTER_UNKNOWN = 0,ROUTER_SUCCESS = 1,ROUTER_STOP_ROUTING = 2,};
enum MACRO_RPCFLG {RPCFLG_MESSAGE = 0x1000000,RPCFLG_AUTO_COMPLETE = 0x8000000,RPCFLG_LOCAL_CALL = 0x10000000,RPCFLG_INPUT_SYNCHRONOUS = 0x20000000,RPCFLG_ASYNCHRONOUS = 0x40000000,RPCFLG_NON_NDR = 0x80000000,RPCFLG_HAS_MULTI_SYNTAXES = 0x2000000,RPCFLG_HAS_CALLBACK = 0x4000000,};
enum MACRO_SC_DLG {SC_DLG_MINIMAL_UI = 0x1,SC_DLG_NO_UI = 0x2,SC_DLG_FORCE_UI = 0x4,};
enum MACRO_SEARCH {SEARCH_ALL = 0x0,SEARCH_PRIMARY = 0x1,SEARCH_ALTERNATE = 0x2,SEARCH_ALL_NO_SEQ = 0x4,SEARCH_PRI_NO_SEQ = 0x5,SEARCH_ALT_NO_SEQ = 0x6,};
enum MACRO_SELECT {SELECT_CAP_CONVERSION = 0x1,SELECT_CAP_SENTENCE = 0x2,};
enum MACRO_SERIAL {SERIAL_LSRMST_ESCAPE = 0x0,SERIAL_LSRMST_LSR_DATA = 0x1,SERIAL_LSRMST_LSR_NODATA = 0x2,SERIAL_LSRMST_MST = 0x3,SERIAL_IOC_FCR_FIFO_ENABLE = 0x1,SERIAL_IOC_FCR_RCVR_RESET = 0x2,SERIAL_IOC_FCR_XMIT_RESET = 0x4,SERIAL_IOC_FCR_DMA_MODE = 0x8,SERIAL_IOC_FCR_RES1 = 0x10,SERIAL_IOC_FCR_RES2 = 0x20,SERIAL_IOC_FCR_RCVR_TRIGGER_LSB = 0x40,SERIAL_IOC_FCR_RCVR_TRIGGER_MSB = 0x80,SERIAL_IOC_MCR_DTR = 0x1,SERIAL_IOC_MCR_RTS = 0x2,SERIAL_IOC_MCR_OUT1 = 0x4,SERIAL_IOC_MCR_OUT2 = 0x8,SERIAL_IOC_MCR_LOOP = 0x10,};
enum MACRO_SERVER {SERVER_ACCESS_ADMINISTER = 0x1,SERVER_ACCESS_ENUMERATE = 0x2,};
enum MACRO_SETDTR {SETDTR = 5,};
enum MACRO_SETRTS {SETRTS = 3,CLRRTS = 4,};
enum MACRO_SET_OF {SET_OF_INVALID_CONTEXT = 0x30,};
enum MACRO_SE_ERR {SE_ERR_FNF = 2,SE_ERR_PNF = 3,SE_ERR_ACCESSDENIED = 5,SE_ERR_OOM = 8,SE_ERR_DLLNOTFOUND = 32,SE_ERR_SHARE = 26,SE_ERR_ASSOCINCOMPLETE = 27,SE_ERR_DDETIMEOUT = 28,SE_ERR_DDEFAIL = 29,SE_ERR_DDEBUSY = 30,SE_ERR_NOASSOC = 31,};
enum MACRO_SHARED {SHARED_RESOURCE_CONV_ERROR = 0x1F,};
enum MACRO_SHCIDS {SHCIDS_ALLFIELDS = 0x80000000,SHCIDS_CANONICALONLY = 0x10000000,SHCIDS_BITMASK = 0xFFFF0000,SHCIDS_COLUMNMASK = 0xFFFF,};
enum MACRO_SHCNEE {SHCNEE_ORDERCHANGED = 2,SHCNEE_MSI_CHANGE = 4,SHCNEE_MSI_UNINSTALL = 5,};
enum MACRO_SHGNLI {SHGNLI_PIDL = 0x1,SHGNLI_PREFIXNAME = 0x2,SHGNLI_NOUNIQUE = 0x4,};
enum MACRO_SHPPFW {SHPPFW_NONE = 0x0,SHPPFW_DIRCREATE = 0x1,SHPPFW_ASKDIRCREATE = 0x2,SHPPFW_IGNOREFILENAME = 0x4,SHPPFW_NOWRITECHECK = 0x8,SHPPFW_MEDIACHECKONLY = 0x10,};
enum MACRO_SHPWHF {SHPWHF_NORECOMPRESS = 0x1,SHPWHF_NONETPLACECREATE = 0x2,SHPWHF_NOFILESELECTOR = 0x4,SHPWHF_VALIDATEVIAWEBFOLDERS = 0x10000,};
enum MACRO_SIZEOF {SIZEOF_RFPO_DATA = 16,};
enum MACRO_SMINIT {SMINIT_DEFAULT = 0x0,SMINIT_RESTRICT_DRAGDROP = 0x2,SMINIT_TOPLEVEL = 0x4,SMINIT_CACHED = 0x10,SMINIT_VERTICAL = 0x10000000,SMINIT_HORIZONTAL = 0x20000000,};
enum MACRO_SOCKET {SOCKET_ERROR = -1,};
enum MACRO_SORTED {SORTED_CTL_EXT_FLAGS_OFFSET = 0,SORTED_CTL_EXT_COUNT_OFFSET = 4,SORTED_CTL_EXT_MAX_COLLISION_OFFSET = 8,SORTED_CTL_EXT_HASH_BUCKET_OFFSET = 12,SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1,};
enum MACRO_SPINST {SPINST_LOGCONFIG = 0x1,SPINST_INIFILES = 0x2,SPINST_REGISTRY = 0x4,SPINST_INI2REG = 0x8,SPINST_FILES = 0x10,SPINST_BITREG = 0x20,SPINST_REGSVR = 0x40,SPINST_UNREGSVR = 0x80,SPINST_PROFILEITEMS = 0x100,SPINST_COPYINF = 0x200,SPINST_ALL = 0x3FF,SPINST_SINGLESECTION = 0x10000,SPINST_LOGCONFIG_IS_FORCED = 0x20000,SPINST_LOGCONFIGS_ARE_OVERRIDES = 0x40000,SPINST_REGISTERCALLBACKAWARE = 0x80000,};
enum MACRO_SP_MAX {SP_MAX_MACHINENAME_LENGTH = 263,SP_ALTPLATFORM_FLAGS_VERSION_RANGE = 1,};
enum MACRO_SRCAND {SRCAND = 0x8800C6,};
enum MACRO_STARTF {STARTF_USESHOWWINDOW = 0x1,STARTF_USESIZE = 0x2,STARTF_USEPOSITION = 0x4,STARTF_USECOUNTCHARS = 0x8,STARTF_USEFILLATTRIBUTE = 0x10,STARTF_RUNFULLSCREEN = 0x20,STARTF_FORCEONFEEDBACK = 0x40,STARTF_FORCEOFFFEEDBACK = 0x80,STARTF_USESTDHANDLES = 0x100,STARTF_USEHOTKEY = 0x200,};
enum MACRO_STATUS {STATUS_WAIT_0 = 0x0,STATUS_ABANDONED_WAIT_0 = 0x80,STATUS_USER_APC = 0xC0,STATUS_TIMEOUT = 0x102,STATUS_PENDING = 0x103,};
enum MACRO_STDOLE {STDOLE_MAJORVERNUM = 0x1,STDOLE_MINORVERNUM = 0x0,STDOLE_LCID = 0x0,};
enum MACRO_STGFMT {STGFMT_STORAGE = 0,STGFMT_NATIVE = 1,STGFMT_FILE = 3,STGFMT_ANY = 4,STGFMT_DOCFILE = 5,STGFMT_DOCUMENT = 0,};
enum MACRO_STREAM {STREAM_NORMAL_ATTRIBUTE = 0x0,STREAM_MODIFIED_WHEN_READ = 0x1,STREAM_CONTAINS_SECURITY = 0x2,STREAM_CONTAINS_PROPERTIES = 0x4,STREAM_SPARSE_ATTRIBUTE = 0x8,};
enum MACRO_STRICT {STRICT = 1,};
enum MACRO_SYMBOL {SYMBOL_TYPE_INDEX_NOT_FOUND = 0x2,SYMBOL_TYPE_INFO_NOT_FOUND = 0x3,};
enum MACRO_SYSPAL {SYSPAL_ERROR = 0,SYSPAL_STATIC = 1,SYSPAL_NOSTATIC = 2,SYSPAL_NOSTATIC256 = 3,};
enum MACRO_SYSRGN {SYSRGN = 4,};
enum MACRO_SYSTEM {SYSTEM_AUDIT_ACE_TYPE = 0x2,SYSTEM_ALARM_ACE_TYPE = 0x3,};
enum MACRO_TARGET {TARGET_IS_NT51_OR_LATER = 1,TARGET_IS_NT50_OR_LATER = 1,TARGET_IS_NT40_OR_LATER = 1,TARGET_IS_NT351_OR_WIN95_OR_LATER = 1,};
enum MACRO_TBCDRF {TBCDRF_NOEDGES = 0x10000,TBCDRF_HILITEHOTTRACK = 0x20000,TBCDRF_NOOFFSET = 0x40000,TBCDRF_NOMARK = 0x80000,TBCDRF_NOETCHEDEFFECT = 0x100000,TBCDRF_BLENDICON = 0x200000,TBCDRF_NOBACKGROUND = 0x400000,};
enum MACRO_TBIMHT {TBIMHT_AFTER = 0x1,TBIMHT_BACKGROUND = 0x2,};
enum MACRO_THREAD {THREAD_TERMINATE = 0x1,THREAD_SUSPEND_RESUME = 0x2,THREAD_GET_CONTEXT = 0x8,THREAD_SET_CONTEXT = 0x10,THREAD_SET_INFORMATION = 0x20,THREAD_QUERY_INFORMATION = 0x40,THREAD_SET_THREAD_TOKEN = 0x80,THREAD_IMPERSONATE = 0x100,THREAD_DIRECT_IMPERSONATION = 0x200,THREAD_ALL_ACCESS = 0x1F03FF,};
enum MACRO_TIMERR {TIMERR_NOERROR = 0,TIMERR_NOCANDO = 97,TIMERR_STRUCT = 129,};
enum MACRO_TVCDRF {TVCDRF_NOIMAGES = 0x10000,};
enum MACRO_TVNRET {TVNRET_DEFAULT = 0,TVNRET_SKIPOLD = 1,TVNRET_SKIPNEW = 2,};
enum MACRO_UI_CAP {UI_CAP_SOFTKBD = 0x10000,};
enum MACRO_UMLAUT {UMLAUT = 0x308,};
enum MACRO_UNCLEN {UNCLEN = 17,};
enum MACRO_UNLOCK {UNLOCK_ELEMENT = 1,};
enum MACRO_URLMON {URLMON_OPTION_USERAGENT = 0x10000001,URLMON_OPTION_USERAGENT_REFRESH = 0x10000002,URLMON_OPTION_URL_ENCODING = 0x10000004,};
enum MACRO_URL_MK {URL_MK_LEGACY = 0,URL_MK_UNIFORM = 1,URL_MK_NO_CANONICALIZE = 2,};
enum MACRO_VARCMP {VARCMP_LT = 0,VARCMP_EQ = 1,VARCMP_GT = 2,VARCMP_NULL = 3,};
enum MACRO_VIDMEM {VIDMEM_ISLINEAR = 0x1,VIDMEM_ISRECTANGULAR = 0x2,VIDMEM_ISHEAP = 0x4,VIDMEM_ISNONLOCAL = 0x8,VIDMEM_ISWC = 0x10,VIDMEM_HEAPDISABLED = 0x20,};
enum MACRO_VIEW_S {VIEW_S_ALREADY_FROZEN = 0x40140,};
enum MACRO_VK_DBE {VK_DBE_ALPHANUMERIC = 0xF0,VK_DBE_KATAKANA = 0xF1,VK_DBE_HIRAGANA = 0xF2,VK_DBE_SBCSCHAR = 0xF3,VK_DBE_DBCSCHAR = 0xF4,VK_DBE_ROMAN = 0xF5,VK_DBE_NOROMAN = 0xF6,VK_DBE_ENTERWORDREGISTERMODE = 0xF7,VK_DBE_ENTERIMECONFIGMODE = 0xF8,VK_DBE_FLUSHSTRING = 0xF9,VK_DBE_CODEINPUT = 0xFA,VK_DBE_NOCODEINPUT = 0xFB,VK_DBE_DETERMINESTRING = 0xFC,VK_DBE_ENTERDLGCONVERSIONMODE = 0xFD,};
enum MACRO_VOLUME {VOLUME_IS_DIRTY = 0x1,VOLUME_UPGRADE_SCHEDULED = 0x2,};
enum MACRO_WAVEIN {WAVEIN_MAPPER_STATUS_DEVICE = 0,WAVEIN_MAPPER_STATUS_MAPPED = 1,WAVEIN_MAPPER_STATUS_FORMAT = 2,};
enum MACRO_WAVERR {WAVERR_BADFORMAT = 32,WAVERR_STILLPLAYING = 33,WAVERR_UNPREPARED = 34,WAVERR_SYNC = 35,WAVERR_LASTERROR = 35,};
enum MACRO_WIN32K {WIN32K_INIT_OR_RIT_FAILURE = 0x91,};
enum MACRO_WINSTA {WINSTA_ENUMDESKTOPS = 0x1,WINSTA_READATTRIBUTES = 0x2,WINSTA_ACCESSCLIPBOARD = 0x4,WINSTA_CREATEDESKTOP = 0x8,WINSTA_WRITEATTRIBUTES = 0x10,WINSTA_ACCESSGLOBALATOMS = 0x20,WINSTA_EXITWINDOWS = 0x40,WINSTA_ENUMERATE = 0x100,WINSTA_READSCREEN = 0x200,WINSTA_ALL_ACCESS = 0x37F,};
enum MACRO_WINVER {WINVER = 0x501,};
enum MACRO_WMIREG {WMIREG_FLAG_EXPENSIVE = 0x1,WMIREG_FLAG_INSTANCE_LIST = 0x4,WMIREG_FLAG_INSTANCE_BASENAME = 0x8,WMIREG_FLAG_INSTANCE_PDO = 0x20,WMIREG_FLAG_REMOVE_GUID = 0x10000,WMIREG_FLAG_RESERVED1 = 0x20000,WMIREG_FLAG_RESERVED2 = 0x40000,WMIREG_FLAG_TRACED_GUID = 0x80000,WMIREG_FLAG_TRACE_CONTROL_GUID = 0x1000,WMIREG_FLAG_EVENT_ONLY_GUID = 0x40,};
enum MACRO_WM_CAP {WM_CAP_START = 1024,WM_CAP_UNICODE_START = 1124,WM_CAP_GET_CAPSTREAMPTR = 1025,WM_CAP_SET_CALLBACK_ERRORW = 1126,WM_CAP_SET_CALLBACK_STATUSW = 1127,WM_CAP_SET_CALLBACK_ERRORA = 1026,WM_CAP_SET_CALLBACK_STATUSA = 1027,WM_CAP_SET_CALLBACK_ERROR = 1026,WM_CAP_SET_CALLBACK_STATUS = 1027,WM_CAP_SET_CALLBACK_YIELD = 1028,WM_CAP_SET_CALLBACK_FRAME = 1029,WM_CAP_SET_CALLBACK_VIDEOSTREAM = 1030,WM_CAP_SET_CALLBACK_WAVESTREAM = 1031,WM_CAP_GET_USER_DATA = 1032,WM_CAP_SET_USER_DATA = 1033,WM_CAP_DRIVER_CONNECT = 1034,WM_CAP_DRIVER_DISCONNECT = 1035,WM_CAP_DRIVER_GET_NAMEA = 1036,WM_CAP_DRIVER_GET_VERSIONA = 1037,WM_CAP_DRIVER_GET_NAMEW = 1136,WM_CAP_DRIVER_GET_VERSIONW = 1137,WM_CAP_DRIVER_GET_NAME = 1036,WM_CAP_DRIVER_GET_VERSION = 1037,WM_CAP_DRIVER_GET_CAPS = 1038,WM_CAP_FILE_SET_CAPTURE_FILEA = 1044,WM_CAP_FILE_GET_CAPTURE_FILEA = 1045,WM_CAP_FILE_SAVEASA = 1047,WM_CAP_FILE_SAVEDIBA = 1049,WM_CAP_FILE_SET_CAPTURE_FILEW = 1144,WM_CAP_FILE_GET_CAPTURE_FILEW = 1145,WM_CAP_FILE_SAVEASW = 1147,WM_CAP_FILE_SAVEDIBW = 1149,WM_CAP_FILE_SET_CAPTURE_FILE = 1044,WM_CAP_FILE_GET_CAPTURE_FILE = 1045,WM_CAP_FILE_SAVEAS = 1047,WM_CAP_FILE_SAVEDIB = 1049,WM_CAP_FILE_ALLOCATE = 1046,WM_CAP_FILE_SET_INFOCHUNK = 1048,WM_CAP_EDIT_COPY = 1054,WM_CAP_SET_AUDIOFORMAT = 1059,WM_CAP_GET_AUDIOFORMAT = 1060,WM_CAP_DLG_VIDEOFORMAT = 1065,WM_CAP_DLG_VIDEOSOURCE = 1066,WM_CAP_DLG_VIDEODISPLAY = 1067,WM_CAP_GET_VIDEOFORMAT = 1068,WM_CAP_SET_VIDEOFORMAT = 1069,WM_CAP_DLG_VIDEOCOMPRESSION = 1070,WM_CAP_SET_PREVIEW = 1074,WM_CAP_SET_OVERLAY = 1075,WM_CAP_SET_PREVIEWRATE = 1076,WM_CAP_SET_SCALE = 1077,WM_CAP_GET_STATUS = 1078,WM_CAP_SET_SCROLL = 1079,WM_CAP_GRAB_FRAME = 1084,WM_CAP_GRAB_FRAME_NOSTOP = 1085,WM_CAP_SEQUENCE = 1086,WM_CAP_SEQUENCE_NOFILE = 1087,WM_CAP_SET_SEQUENCE_SETUP = 1088,WM_CAP_GET_SEQUENCE_SETUP = 1089,WM_CAP_SET_MCI_DEVICEA = 1090,WM_CAP_GET_MCI_DEVICEA = 1091,WM_CAP_SET_MCI_DEVICEW = 1190,WM_CAP_GET_MCI_DEVICEW = 1191,WM_CAP_SET_MCI_DEVICE = 1090,WM_CAP_GET_MCI_DEVICE = 1091,WM_CAP_STOP = 1092,WM_CAP_ABORT = 1093,WM_CAP_SINGLE_FRAME_OPEN = 1094,WM_CAP_SINGLE_FRAME_CLOSE = 1095,WM_CAP_SINGLE_FRAME = 1096,WM_CAP_PAL_OPENA = 1104,WM_CAP_PAL_SAVEA = 1105,WM_CAP_PAL_OPENW = 1204,WM_CAP_PAL_SAVEW = 1205,WM_CAP_PAL_OPEN = 1104,WM_CAP_PAL_SAVE = 1105,WM_CAP_PAL_PASTE = 1106,WM_CAP_PAL_AUTOCREATE = 1107,WM_CAP_PAL_MANUALCREATE = 1108,WM_CAP_SET_CALLBACK_CAPCONTROL = 1109,WM_CAP_UNICODE_END = 1205,WM_CAP_END = 1205,};
enum MACRO_WM_DDE {WM_DDE_FIRST = 0x3E0,WM_DDE_INITIATE = 0x3E0,WM_DDE_TERMINATE = 0x3E1,WM_DDE_ADVISE = 0x3E2,WM_DDE_UNADVISE = 0x3E3,WM_DDE_ACK = 0x3E4,WM_DDE_DATA = 0x3E5,WM_DDE_REQUEST = 0x3E6,WM_DDE_POKE = 0x3E7,WM_DDE_EXECUTE = 0x3E8,WM_DDE_LAST = 0x3E8,};
enum MACRO_WM_IME {WM_IME_STARTCOMPOSITION = 0x10D,WM_IME_ENDCOMPOSITION = 0x10E,WM_IME_COMPOSITION = 0x10F,WM_IME_KEYLAST = 0x10F,WM_INITDIALOG = 0x110,WM_COMMAND = 0x111,WM_SYSCOMMAND = 0x112,WM_TIMER = 0x113,WM_HSCROLL = 0x114,WM_VSCROLL = 0x115,WM_INITMENU = 0x116,WM_INITMENUPOPUP = 0x117,WM_MENUSELECT = 0x11F,WM_MENUCHAR = 0x120,WM_ENTERIDLE = 0x121,WM_MENURBUTTONUP = 0x122,WM_MENUDRAG = 0x123,WM_MENUGETOBJECT = 0x124,WM_UNINITMENUPOPUP = 0x125,WM_MENUCOMMAND = 0x126,WM_CHANGEUISTATE = 0x127,WM_UPDATEUISTATE = 0x128,WM_QUERYUISTATE = 0x129,};
enum MACRO_WM_PSD {WM_PSD_PAGESETUPDLG = 1024,WM_PSD_FULLPAGERECT = 1025,WM_PSD_MINMARGINRECT = 1026,WM_PSD_MARGINRECT = 1027,WM_PSD_GREEKTEXTRECT = 1028,WM_PSD_ENVSTAMPRECT = 1029,WM_PSD_YAFULLPAGERECT = 1030,};
enum MACRO_WNDOBJ {WNDOBJ_SETUP = 4354,};
enum MACRO_WORKER {WORKER_THREAD_RETURNED_AT_BAD_IRQL = 0xE1,};
enum MACRO_XCLASS {XCLASS_MASK = 0xFC00,XCLASS_BOOL = 0x1000,XCLASS_DATA = 0x2000,XCLASS_FLAGS = 0x4000,XCLASS_NOTIFICATION = 0x8000,};
enum MACRO__ALPHA {_ALPHA = 0x103,};
enum MACRO__FACDD {_FACDD = 0x876,};
enum MACRO__FACDS {_FACDS = 0x878,};
enum MACRO__IOFBF {_IOFBF = 0x0,_IOLBF = 0x40,};
enum MACRO__IONBF {_IONBF = 0x4,_IOMYBUF = 0x8,_IOEOF = 0x10,_IOERR = 0x20,_IOSTRG = 0x40,_IORW = 0x80,};
enum MACRO__UPPER {_UPPER = 0x1,_LOWER = 0x2,_DIGIT = 0x4,_SPACE = 0x8,_PUNCT = 0x10,_CONTROL = 0x20,_BLANK = 0x40,_HEX = 0x80,_LEADBYTE = 0x8000,};
enum MACRO__WIN32 {_WIN32_IE = 0x501,};
typedef struct _MCDCLIPSTATE MCDCLIPSTATE;
typedef struct _MCDHINTSTATE MCDHINTSTATE;
typedef struct _MCDPIXELPACK MCDPIXELPACK;
typedef struct _MEMORYSTATUS MEMORYSTATUS;
typedef struct tagMETAFILEPICT METAFILEPICT;
typedef struct _MIBICMPSTATS MIBICMPSTATS;
typedef struct _MIB_IFNUMBER MIB_IFNUMBER;
typedef struct _MIB_IFSTATUS MIB_IFSTATUS;
typedef struct _MIB_IPNETROW MIB_IPNETROW;
typedef struct _MIB_PROXYARP MIB_PROXYARP;
typedef struct _MIB_TCPSTATS MIB_TCPSTATS;
typedef struct _MIB_TCPTABLE MIB_TCPTABLE;
typedef struct _MIB_UDPSTATS MIB_UDPSTATS;
typedef struct _MIB_UDPTABLE MIB_UDPTABLE;
typedef struct tagMIDIINCAPS2A MIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W MIDIINCAPS2W;
typedef struct tagMIDIOUTCAPSA MIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW MIDIOUTCAPSW;
typedef struct _MODEMDEVCAPS MODEMDEVCAPS;
typedef struct tagMONERRSTRUCT MONERRSTRUCT;
typedef struct tagMONMSGSTRUCT MONMSGSTRUCT;
typedef struct _MPR_SERVER_0 MPR_SERVER_0;
typedef struct tagMSAAMENUINFO MSAAMENUINFO;
typedef struct _NABTS_BUFFER NABTS_BUFFER;
typedef void *NDR_CCONTEXT;
typedef struct _3FA64165D15A4602C29B2D9B0DA4A5E9 *NDR_SCONTEXT;
typedef struct _NETRESOURCEA NETRESOURCEA;
typedef struct _NETRESOURCEW NETRESOURCEW;
typedef struct tagNMCUSTOMDRAWINFO NMCUSTOMDRAW;
typedef struct _756B7C543A2D8873FCA38AB7A21F7B82 NMPGCALCSIZE;
typedef struct tagNMRBAUTOSIZE NMRBAUTOSIZE;
typedef struct tagLOGBRUSH32 *NPLOGBRUSH32;
typedef struct tagLOGPALETTE *NPLOGPALETTE;
typedef struct waveformat_tag *NPWAVEFORMAT;
typedef struct _OEMCUIPPARAM OEMCUIPPARAM;
typedef struct _OEMUIPSPARAM OEMUIPSPARAM;
typedef struct _AFPROTOCOLS *PAFPROTOCOLS;
typedef struct tagPALETTEENTRY PALETTEENTRY;
typedef struct _PARAM_BUFFER PARAM_BUFFER;
typedef struct _84B866C76402598318C95E59033217C4 *PBANDINFOSFB;
typedef struct _BDA_PID_MAP *PBDA_PID_MAP;
typedef struct _BIN_RESULTS *PBIN_RESULTS;
typedef struct _browseinfoA *PBROWSEINFOA;
typedef struct _browseinfoW *PBROWSEINFOW;
typedef struct _CC_HW_FIELD *PCC_HW_FIELD;
typedef struct tagCHARSETINFO *PCHARSETINFO;
typedef struct tagCONNECTDATA *PCONNECTDATA;
typedef struct _CREATE_DISK *PCREATE_DISK;
typedef struct _CREDENTIALA *PCREDENTIALA;
typedef struct _CREDENTIALW *PCREDENTIALW;
typedef struct _CRL_CONTEXT *PCRL_CONTEXT;
typedef struct _CSADDR_INFO *PCSADDR_INFO;
typedef struct _CTL_CONTEXT *PCTL_CONTEXT;
typedef struct _DATA_HEADER *PDATA_HEADER;
typedef struct _DD_FLIPDATA *PDD_FLIPDATA;
typedef struct _DD_LOCKDATA *PDD_LOCKDATA;
typedef struct _DISK_EXTENT *PDISK_EXTENT;
typedef struct _DISK_RECORD *PDISK_RECORD;
typedef struct _DOC_INFO_1A *PDOC_INFO_1A;
typedef struct _DOC_INFO_1W *PDOC_INFO_1W;
typedef struct _DOC_INFO_2A *PDOC_INFO_2A;
typedef struct _DOC_INFO_2W *PDOC_INFO_2W;
typedef struct _DOC_INFO_3A *PDOC_INFO_3A;
typedef struct _DOC_INFO_3W *PDOC_INFO_3W;
typedef struct _DRAWPATRECT *PDRAWPATRECT;
typedef struct tagEMRANGLEARC *PEMRANGLEARC;
typedef struct tagEMRFILLPATH *PEMRFILLPATH;
typedef struct tagEMRFRAMERGN *PEMRFRAMERGN;
typedef struct tagEMRLINETO *PEMRMOVETOEX;
typedef struct tagEMRINVERTRGN *PEMRPAINTRGN;
typedef struct tagEMRPOLYDRAW *PEMRPOLYDRAW;
typedef struct tagEMRPOLYLINE *PEMRPOLYLINE;
typedef struct tagEVENTMSG *PEVENTMSGMSG;
typedef struct _EVENT_TRACE *PEVENT_TRACE;
typedef struct tagEXTLOGFONTA *PEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *PEXTLOGFONTW;
typedef struct _FD_GLYPHSET *PFD_GLYPHSET;
typedef struct _FILEPATHS_A *PFILEPATHS_A;
typedef struct _FILEPATHS_W *PFILEPATHS_W;
typedef struct tagHANDLETABLE *PHANDLETABLE;
typedef struct tagHH_ENUM_CAT *PHH_ENUM_CAT;
typedef struct _IPX_PATTERN *PIPX_PATTERN;
typedef struct _JOB_INFO_1A *PJOB_INFO_1A;
typedef struct _JOB_INFO_1W *PJOB_INFO_1W;
typedef struct _JOB_INFO_2A *PJOB_INFO_2A;
typedef struct _JOB_INFO_2W *PJOB_INFO_2W;
typedef struct _8276AF68B2084DDEC7235E96B5A3DDF6 *PKSATTRIBUTE;
typedef union _A4FB595EF421231CAF150DDD3288A6D5 *PKSDATARANGE;
typedef struct _16C1E3925C7C4AECC0ACCAA7BBC13164 *PKSEVENTDATA;
typedef struct _52BD71AC0F61B53F3E44045ED088295E *PKSFRAMETIME;
typedef struct _KSM_BDA_PIN *PKSM_BDA_PIN;
typedef struct tagKS_AMVPSIZE *PKS_AMVPSIZE;
typedef struct tagMDINEXTMENU *PMDINEXTMENU;
typedef struct tagMENUBARINFO *PMENUBARINFO;
typedef struct _MIB_BEST_IF *PMIB_BEST_IF;
typedef struct _MIB_ICMP_EX *PMIB_ICMP_EX;
typedef struct _MIB_IFTABLE *PMIB_IFTABLE;
typedef struct _MIB_IPSTATS *PMIB_IPSTATS;
typedef struct tagMIDIINCAPSA *PMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *PMIDIINCAPSW;
typedef struct tagMIXERCAPS2A *PMIXERCAPS2A;
typedef struct tagMIXERCAPS2W *PMIXERCAPS2W;
typedef struct tagMONCBSTRUCT *PMONCBSTRUCT;
typedef struct _MONITORINIT *PMONITORINIT;
typedef struct _NAME_BUFFER *PNAME_BUFFER;
typedef int *PNDIS_STATUS;
typedef struct _PORT_INFO_1A PORT_INFO_1A;
typedef struct _PORT_INFO_1W PORT_INFO_1W;
typedef struct _PORT_INFO_2A PORT_INFO_2A;
typedef struct _PORT_INFO_2W PORT_INFO_2W;
typedef struct _PORT_INFO_3A PORT_INFO_3A;
typedef struct _PORT_INFO_3W PORT_INFO_3W;
typedef struct tagPAINTSTRUCT *PPAINTSTRUCT;
typedef struct _PERBANDINFO *PPERBANDINFO;
typedef struct _PORT_DATA_1 *PPORT_DATA_1;
typedef struct tagRAWKEYBOARD *PRAWKEYBOARD;
typedef struct _LIST_ENTRY *PRLIST_ENTRY;
typedef struct _PROCESS_LIST PROCESS_LIST;
typedef struct tagPROPPAGEINFO PROPPAGEINFO;
typedef struct _tagPROTOCOLDATA PROTOCOLDATA;
typedef struct _PROVDATA_SIP PROVDATA_SIP;
typedef struct _RPC_MESSAGE *PRPC_MESSAGE;
typedef void ( *PRPC_RUNDOWN)(void *AssociationContext);
typedef struct _PSINJECTDATA PSINJECTDATA;
typedef struct _SI_COPYFILE *PSI_COPYFILE;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct tagSOFTKBDDATA *PSOFTKBDDATA;
typedef struct SPC_SIGINFO_ *PSPC_SIGINFO;
typedef struct _TC_GEN_FLOW *PTC_GEN_FLOW;
typedef struct tagTEXTMETRICA *PTEXTMETRICA;
typedef struct tagTEXTMETRICW *PTEXTMETRICW;
typedef struct _TOKEN_OWNER *PTOKEN_OWNER;
typedef struct tagWAVEINCAPSA *PWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *PWAVEINCAPSW;
typedef struct _WCE_IAS_SET *PWCE_IAS_SET;
typedef struct _572C9F5A336F5256CCDD98B741672A4F *PWMIREGGUIDW;
typedef struct _E054F7F0B81E76E3D6D098531C7E763C *PWMIREGINFOW;
typedef struct tagWNDCLASSEXA *PWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *PWNDCLASSEXW;
enum Polarisation {BDA_POLARISATION_NOT_SET = 0xFFFFFFFF,BDA_POLARISATION_NOT_DEFINED = 0x0,BDA_POLARISATION_LINEAR_H = 0x1,BDA_POLARISATION_LINEAR_V = 0x2,BDA_POLARISATION_CIRCULAR_L = 0x3,BDA_POLARISATION_CIRCULAR_R = 0x4,BDA_POLARISATION_MAX = 0x5,};
struct PropertiesUI;
typedef struct _QOS_DESTADDR QOS_DESTADDR;
typedef struct _QOS_DIFFSERV QOS_DIFFSERV;
typedef struct _QOS_DS_CLASS QOS_DS_CLASS;
typedef struct tagQUERYCONTEXT QUERYCONTEXT;
typedef struct _QUOTA_LIMITS QUOTA_LIMITS;
typedef struct provider_info REG_PROVIDER;
enum RESTRICTIONS {REST_NONE = 0x0,REST_NORUN = 0x1,REST_NOCLOSE = 0x2,REST_NOSAVESET = 0x4,REST_NOFILEMENU = 0x8,REST_NOSETFOLDERS = 0x10,REST_NOSETTASKBAR = 0x20,REST_NODESKTOP = 0x40,REST_NOFIND = 0x80,REST_NODRIVES = 0x100,REST_NODRIVEAUTORUN = 0x200,REST_NODRIVETYPEAUTORUN = 0x400,REST_NONETHOOD = 0x800,REST_STARTBANNER = 0x1000,REST_RESTRICTRUN = 0x2000,REST_NOPRINTERTABS = 0x4000,REST_NOPRINTERDELETE = 0x8000,REST_NOPRINTERADD = 0x10000,REST_NOSTARTMENUSUBFOLDERS = 0x20000,REST_MYDOCSONNET = 0x40000,REST_NOEXITTODOS = 0x80000,REST_ENFORCESHELLEXTSECURITY = 0x100000,REST_LINKRESOLVEIGNORELINKINFO = 0x200000,REST_NOCOMMONGROUPS = 0x400000,REST_SEPARATEDESKTOPPROCESS = 0x800000,REST_NOWEB = 0x1000000,REST_NOTRAYCONTEXTMENU = 0x2000000,REST_NOVIEWCONTEXTMENU = 0x4000000,REST_NONETCONNECTDISCONNECT = 0x8000000,REST_STARTMENULOGOFF = 0x10000000,REST_NOSETTINGSASSIST = 0x20000000,REST_NOINTERNETICON = 0x40000001,REST_NORECENTDOCSHISTORY = 0x40000002,REST_NORECENTDOCSMENU = 0x40000003,REST_NOACTIVEDESKTOP = 0x40000004,REST_NOACTIVEDESKTOPCHANGES = 0x40000005,REST_NOFAVORITESMENU = 0x40000006,REST_CLEARRECENTDOCSONEXIT = 0x40000007,REST_CLASSICSHELL = 0x40000008,REST_NOCUSTOMIZEWEBVIEW = 0x40000009,REST_NOHTMLWALLPAPER = 0x40000010,REST_NOCHANGINGWALLPAPER = 0x40000011,REST_NODESKCOMP = 0x40000012,REST_NOADDDESKCOMP = 0x40000013,REST_NODELDESKCOMP = 0x40000014,REST_NOCLOSEDESKCOMP = 0x40000015,REST_NOCLOSE_DRAGDROPBAND = 0x40000016,REST_NOMOVINGBAND = 0x40000017,REST_NOEDITDESKCOMP = 0x40000018,REST_NORESOLVESEARCH = 0x40000019,REST_NORESOLVETRACK = 0x4000001A,REST_FORCECOPYACLWITHFILE = 0x4000001B,REST_NOLOGO3CHANNELNOTIFY = 0x4000001C,REST_NOFORGETSOFTWAREUPDATE = 0x4000001D,REST_NOSETACTIVEDESKTOP = 0x4000001E,REST_NOUPDATEWINDOWS = 0x4000001F,REST_NOCHANGESTARMENU = 0x40000020,REST_NOFOLDEROPTIONS = 0x40000021,REST_HASFINDCOMPUTERS = 0x40000022,REST_INTELLIMENUS = 0x40000023,REST_RUNDLGMEMCHECKBOX = 0x40000024,REST_ARP_ShowPostSetup = 0x40000025,REST_NOCSC = 0x40000026,REST_NOCONTROLPANEL = 0x40000027,REST_ENUMWORKGROUP = 0x40000028,REST_ARP_NOARP = 0x40000029,REST_ARP_NOREMOVEPAGE = 0x4000002A,REST_ARP_NOADDPAGE = 0x4000002B,REST_ARP_NOWINSETUPPAGE = 0x4000002C,REST_GREYMSIADS = 0x4000002D,REST_NOCHANGEMAPPEDDRIVELABEL = 0x4000002E,REST_NOCHANGEMAPPEDDRIVECOMMENT = 0x4000002F,REST_MaxRecentDocs = 0x40000030,REST_NONETWORKCONNECTIONS = 0x40000031,REST_FORCESTARTMENULOGOFF = 0x40000032,REST_NOWEBVIEW = 0x40000033,REST_NOCUSTOMIZETHISFOLDER = 0x40000034,REST_NOENCRYPTION = 0x40000035,REST_DONTSHOWSUPERHIDDEN = 0x40000037,REST_NOSHELLSEARCHBUTTON = 0x40000038,REST_NOHARDWARETAB = 0x40000039,REST_NORUNASINSTALLPROMPT = 0x4000003A,REST_PROMPTRUNASINSTALLNETPATH = 0x4000003B,REST_NOMANAGEMYCOMPUTERVERB = 0x4000003C,REST_NORECENTDOCSNETHOOD = 0x4000003D,REST_DISALLOWRUN = 0x4000003E,REST_NOWELCOMESCREEN = 0x4000003F,REST_RESTRICTCPL = 0x40000040,REST_DISALLOWCPL = 0x40000041,REST_NOSMBALLOONTIP = 0x40000042,REST_NOSMHELP = 0x40000043,REST_NOWINKEYS = 0x40000044,REST_NOENCRYPTONMOVE = 0x40000045,REST_NOLOCALMACHINERUN = 0x40000046,REST_NOCURRENTUSERRUN = 0x40000047,REST_NOLOCALMACHINERUNONCE = 0x40000048,REST_NOCURRENTUSERRUNONCE = 0x40000049,REST_FORCEACTIVEDESKTOPON = 0x4000004A,REST_NOCOMPUTERSNEARME = 0x4000004B,REST_NOVIEWONDRIVE = 0x4000004C,REST_NONETCRAWL = 0x4000004D,REST_NOSHAREDDOCUMENTS = 0x4000004E,REST_NOSMMYDOCS = 0x4000004F,REST_NOSMMYPICS = 0x40000050,REST_ALLOWBITBUCKDRIVES = 0x40000051,REST_NONLEGACYSHELLMODE = 0x40000052,REST_NOCONTROLPANELBARRICADE = 0x40000053,REST_NOSTARTPAGE = 0x40000054,REST_NOAUTOTRAYNOTIFY = 0x40000055,REST_NOTASKGROUPING = 0x40000056,REST_NOCDBURNING = 0x40000057,REST_MYCOMPNOPROP = 0x40000058,REST_MYDOCSNOPROP = 0x40000059,REST_NOSTARTPANEL = 0x4000005A,REST_NODISPLAYAPPEARANCEPAGE = 0x4000005B,REST_NOTHEMESTAB = 0x4000005C,REST_NOVISUALSTYLECHOICE = 0x4000005D,REST_NOSIZECHOICE = 0x4000005E,REST_NOCOLORCHOICE = 0x4000005F,REST_SETVISUALSTYLE = 0x40000060,REST_STARTRUNNOHOMEPATH = 0x40000061,REST_NOUSERNAMEINSTARTPANEL = 0x40000062,REST_NOMYCOMPUTERICON = 0x40000063,REST_NOSMNETWORKPLACES = 0x40000064,REST_NOSMPINNEDLIST = 0x40000065,REST_NOSMMYMUSIC = 0x40000066,REST_NOSMEJECTPC = 0x40000067,REST_NOSMMOREPROGRAMS = 0x40000068,REST_NOSMMFUPROGRAMS = 0x40000069,REST_NOTRAYITEMSDISPLAY = 0x4000006A,REST_NOTOOLBARSONTASKBAR = 0x4000006B,REST_NOSMCONFIGUREPROGRAMS = 0x4000006F,REST_HIDECLOCK = 0x40000070,REST_NOLOWDISKSPACECHECKS = 0x40000071,REST_NOENTIRENETWORK = 0x40000072,REST_NODESKTOPCLEANUP = 0x40000073,REST_BITBUCKNUKEONDELETE = 0x40000074,REST_BITBUCKCONFIRMDELETE = 0x40000075,REST_BITBUCKNOPROP = 0x40000076,REST_NODISPBACKGROUND = 0x40000077,REST_NODISPSCREENSAVEPG = 0x40000078,REST_NODISPSETTINGSPG = 0x40000079,REST_NODISPSCREENSAVEPREVIEW = 0x4000007A,REST_NODISPLAYCPL = 0x4000007B,REST_HIDERUNASVERB = 0x4000007C,REST_NOTHUMBNAILCACHE = 0x4000007D,REST_NOSTRCMPLOGICAL = 0x4000007E,REST_NOPUBLISHWIZARD = 0x4000007F,REST_NOONLINEPRINTSWIZARD = 0x40000080,REST_NOWEBSERVICES = 0x40000081,REST_ALLOWUNHASHEDWEBVIEW = 0x40000082,REST_ALLOWLEGACYWEBVIEW = 0x40000083,REST_REVERTWEBVIEWSECURITY = 0x40000084,REST_INHERITCONSOLEHANDLES = 0x40000086,REST_NODISCONNECT = 0x41000001,REST_NOSECURITY = 0x41000002,REST_NOFILEASSOCIATE = 0x41000003,};
typedef struct tagRemFORMATETC RemFORMATETC;
typedef struct tagRemSTGMEDIUM RemSTGMEDIUM;
typedef struct _wireSAFEARR_BSTR SAFEARR_BSTR;
typedef struct _SCHANNEL_ALG SCHANNEL_ALG;
typedef struct _SEARCHMEMORY SEARCHMEMORY;
typedef struct _B3292A763DBD4275988A0D01CB88CB44 SHCOLUMNDATA;
typedef struct _63C5725C5B677664277ACEA161B104D1 SHCOLUMNINFO;
typedef struct _CE02AD95896D5CE1FBC89EB4094A5E1C SHCOLUMNINIT;
typedef struct _SHELLDETAILS SHELLDETAILS;
typedef struct _C6963F188D9781F9428F32FE3A3801AF SHOWUIPARAMS;
typedef union _SLIST_HEADER SLIST_HEADER;
typedef struct _tagSOFTDISTINFO SOFTDISTINFO;
typedef struct tagSOUNDSENTRYA SOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW SOUNDSENTRYW;
typedef struct _STARTUPINFOA STARTUPINFOA;
typedef struct _STARTUPINFOW STARTUPINFOW;
struct SWbemLocator;
struct ShellWindows;
typedef struct _TAPE_PREPARE TAPE_PREPARE;
typedef struct _37E4785F055768DB96FB0F6687850E13 TBINSERTMARK;
typedef struct tagTITLEBARINFO TITLEBARINFO;
typedef struct _TOKEN_GROUPS TOKEN_GROUPS;
typedef struct _TOKEN_ORIGIN TOKEN_ORIGIN;
typedef struct _TOKEN_SOURCE TOKEN_SOURCE;
typedef struct tagTRANSMSGLIST TRANSMSGLIST;
typedef short VARIANT_BOOL;
typedef struct tWAVEFORMATEX WAVEFORMATEX;
typedef struct tagWAVEINCAPS2A WAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W WAVEINCAPS2W;
typedef struct tagWAVEOUTCAPSA WAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW WAVEOUTCAPSW;
typedef struct _WNODE_HEADER WNODE_HEADER;
typedef struct _WSAQuerySetA WSAQUERYSETA;
typedef struct _WSAQuerySetW WSAQUERYSETW;
enum WbemFlagEnum {wbemFlagReturnImmediately = 0x10,wbemFlagReturnWhenComplete = 0x0,wbemFlagBidirectional = 0x0,wbemFlagForwardOnly = 0x20,wbemFlagNoErrorObject = 0x40,wbemFlagReturnErrorObject = 0x0,wbemFlagSendStatus = 0x80,wbemFlagDontSendStatus = 0x0,wbemFlagEnsureLocatable = 0x100,wbemFlagDirectRead = 0x200,wbemFlagSendOnlySelected = 0x0,wbemFlagUseAmendedQualifiers = 0x20000,wbemFlagGetDefault = 0x0,wbemFlagSpawnInstance = 0x1,wbemFlagUseCurrentTime = 0x1,};
enum _D3DFILLMODE {D3DFILL_POINT = 0x1,D3DFILL_WIREFRAME = 0x2,D3DFILL_SOLID = 0x3,D3DFILL_FORCE_DWORD = 0x7FFFFFFF,};
enum _NDIS_MEDIUM {NdisMedium802_3 = 0x0,NdisMedium802_5 = 0x1,NdisMediumFddi = 0x2,NdisMediumWan = 0x3,NdisMediumLocalTalk = 0x4,NdisMediumDix = 0x5,NdisMediumArcnetRaw = 0x6,NdisMediumArcnet878_2 = 0x7,NdisMediumAtm = 0x8,NdisMediumWirelessWan = 0x9,NdisMediumIrda = 0xA,NdisMediumBpc = 0xB,NdisMediumCoWan = 0xC,NdisMedium1394 = 0xD,NdisMediumInfiniBand = 0xE,NdisMediumMax = 0xF,};
struct _RPC_VERSION {unsigned short MajorVersion;unsigned short MinorVersion;};
enum _tagPI_FLAGS {PI_PARSE_URL = 0x1,PI_FILTER_MODE = 0x2,PI_FORCE_ASYNC = 0x4,PI_USE_WORKERTHREAD = 0x8,PI_MIMEVERIFICATION = 0x10,PI_CLSIDLOOKUP = 0x20,PI_DATAPROGRESS = 0x40,PI_SYNCHRONOUS = 0x80,PI_APARTMENTTHREADED = 0x100,PI_CLASSINSTALL = 0x200,PI_PASSONBINDCTX = 0x2000,PI_NOMIMEHANDLER = 0x8000,PI_LOADAPPDIRECT = 0x4000,PD_FORCE_SWITCH = 0x10000,PI_PREFERDEFAULTHANDLER = 0x20000,};
enum tagBINDSPEED {BINDSPEED_INDEFINITE = 0x1,BINDSPEED_MODERATE = 0x2,BINDSPEED_IMMEDIATE = 0x3,};
enum tagDVASPECT2 {DVASPECT_OPAQUE = 0x10,DVASPECT_TRANSPARENT = 0x20,};
enum tagFUNCFLAGS {FUNCFLAG_FRESTRICTED = 0x1,FUNCFLAG_FSOURCE = 0x2,FUNCFLAG_FBINDABLE = 0x4,FUNCFLAG_FREQUESTEDIT = 0x8,FUNCFLAG_FDISPLAYBIND = 0x10,FUNCFLAG_FDEFAULTBIND = 0x20,FUNCFLAG_FHIDDEN = 0x40,FUNCFLAG_FUSESGETLASTERROR = 0x80,FUNCFLAG_FDEFAULTCOLLELEM = 0x100,FUNCFLAG_FUIDEFAULT = 0x200,FUNCFLAG_FNONBROWSABLE = 0x400,FUNCFLAG_FREPLACEABLE = 0x800,FUNCFLAG_FIMMEDIATEBIND = 0x1000,};
enum tagHITRESULT {HITRESULT_OUTSIDE = 0x0,HITRESULT_TRANSPARENT = 0x1,HITRESULT_CLOSE = 0x2,HITRESULT_HIT = 0x3,};
enum tagMSHLFLAGS {MSHLFLAGS_NORMAL = 0x0,MSHLFLAGS_TABLESTRONG = 0x1,MSHLFLAGS_TABLEWEAK = 0x2,MSHLFLAGS_NOPING = 0x4,MSHLFLAGS_RESERVED1 = 0x8,MSHLFLAGS_RESERVED2 = 0x10,MSHLFLAGS_RESERVED3 = 0x20,MSHLFLAGS_RESERVED4 = 0x40,};
enum tagOLERENDER {OLERENDER_NONE = 0x0,OLERENDER_DRAW = 0x1,OLERENDER_FORMAT = 0x2,OLERENDER_ASIS = 0x3,};
enum tagOLEUPDATE {OLEUPDATE_ALWAYS = 0x1,OLEUPDATE_ONCALL = 0x3,};
enum tagTYPEFLAGS {TYPEFLAG_FAPPOBJECT = 0x1,TYPEFLAG_FCANCREATE = 0x2,TYPEFLAG_FLICENSED = 0x4,TYPEFLAG_FPREDECLID = 0x8,TYPEFLAG_FHIDDEN = 0x10,TYPEFLAG_FCONTROL = 0x20,TYPEFLAG_FDUAL = 0x40,TYPEFLAG_FNONEXTENSIBLE = 0x80,TYPEFLAG_FOLEAUTOMATION = 0x100,TYPEFLAG_FRESTRICTED = 0x200,TYPEFLAG_FAGGREGATABLE = 0x400,TYPEFLAG_FREPLACEABLE = 0x800,TYPEFLAG_FDISPATCHABLE = 0x1000,TYPEFLAG_FREVERSEBIND = 0x2000,TYPEFLAG_FPROXY = 0x4000,};
typedef struct _userHPALETTE userHPALETTE;
typedef struct _AFPROTOCOLS AFPROTOCOLS;
typedef struct _84B866C76402598318C95E59033217C4 BANDINFOSFB;
typedef struct _BDA_PID_MAP BDA_PID_MAP;
typedef struct _BIN_RESULTS BIN_RESULTS;
typedef struct _browseinfoA BROWSEINFOA;
typedef struct _browseinfoW BROWSEINFOW;
typedef struct tagBinaryParam BinaryParam;
typedef struct _CC_HW_FIELD CC_HW_FIELD;
typedef struct tagCHARSETINFO CHARSETINFO;
typedef struct tagCHOOSEFONTA CHOOSEFONTA;
typedef struct tagCHOOSEFONTW CHOOSEFONTW;
typedef struct tagCOLORSCHEME COLORSCHEME;
typedef struct tagCONNECTDATA CONNECTDATA;
typedef struct tagCONTROLINFO CONTROLINFO;
typedef struct tagCONVCONTEXT CONVCONTEXT;
typedef struct _CREATE_DISK CREATE_DISK;
typedef struct _CREDENTIALA CREDENTIALA;
typedef struct _CREDENTIALW CREDENTIALW;
typedef struct _CRL_CONTEXT CRL_CONTEXT;
typedef struct _CSADDR_INFO CSADDR_INFO;
typedef struct _CTL_CONTEXT CTL_CONTEXT;
typedef struct tagCURSORSHAPE CURSORSHAPE;
typedef struct _D3DMATERIAL D3DMATERIAL;
typedef struct _D3DPrimCaps D3DPRIMCAPS;
typedef struct _D3DTLVERTEX D3DTLVERTEX;
typedef struct _D3DTRIANGLE D3DTRIANGLE;
typedef struct _D3DVIEWPORT D3DVIEWPORT;
typedef struct _DATA_HEADER DATA_HEADER;
typedef struct _DDGAMMARAMP DDGAMMARAMP;
typedef struct _DDOVERLAYFX DDOVERLAYFX;
typedef struct _DD_FLIPDATA DD_FLIPDATA;
typedef struct _DD_LOCKDATA DD_LOCKDATA;
typedef struct _DD_MORECAPS DD_MORECAPS;
typedef struct _DEBUG_EVENT DEBUG_EVENT;
typedef struct _DETAILSINFO DETAILSINFO;
typedef struct _DISK_EXTENT DISK_EXTENT;
typedef struct _DISK_RECORD DISK_RECORD;
typedef struct _1C9ED8E2FE494C714F8336D090291E50 DLGTEMPLATE;
typedef struct _DMUS_REGION DMUS_REGION;
typedef struct _DMUS_WAVEDL DMUS_WAVEDL;
typedef struct _DOC_INFO_1A DOC_INFO_1A;
typedef struct _DOC_INFO_1W DOC_INFO_1W;
typedef struct _DOC_INFO_2A DOC_INFO_2A;
typedef struct _DOC_INFO_2W DOC_INFO_2W;
typedef struct _DOC_INFO_3A DOC_INFO_3A;
typedef struct _DOC_INFO_3W DOC_INFO_3W;
struct DOMDocument;
typedef struct _CFDE79073F41BFFF7E06FED73F276E8B DRAWDIBTIME;
typedef struct _DRAWPATRECT DRAWPATRECT;
typedef struct _DSFXFlanger DSFXFlanger;
typedef struct _DSFXParamEq DSFXParamEq;
typedef struct tagEMRANGLEARC EMRANGLEARC;
typedef struct tagEMRFILLPATH EMRFILLPATH;
typedef struct tagEMRFRAMERGN EMRFRAMERGN;
typedef struct tagEMRLINETO EMRMOVETOEX;
typedef struct tagEMRINVERTRGN EMRPAINTRGN;
typedef struct tagEMRPOLYDRAW EMRPOLYDRAW;
typedef struct tagEMRPOLYLINE EMRPOLYLINE;
typedef struct _EVENT_TRACE EVENT_TRACE;
typedef struct _078929F8CD96C82DFB2B0B82CFD86124 EXP_SZ_LINK;
typedef struct tagEXTLOGFONTA EXTLOGFONTA;
typedef struct tagEXTLOGFONTW EXTLOGFONTW;
typedef struct tagEXTRASEARCH EXTRASEARCH;
struct FARPROC16__ {int unused;};
typedef struct _FD_GLYPHSET FD_GLYPHSET;
typedef struct _FD_LIGATURE FD_LIGATURE;
typedef struct _FILEPATHS_A FILEPATHS_A;
typedef struct _FILEPATHS_W FILEPATHS_W;
typedef int FXPT16DOT16;
struct FolderItem2 {struct FolderItem2Vtbl *lpVtbl;};
struct FolderItems {struct FolderItemsVtbl *lpVtbl;};
typedef struct tagHANDLETABLE HANDLETABLE;
typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HCONVLIST__ {int unused;};
typedef struct tagHH_ENUM_CAT HH_ENUM_CAT;
struct HINSTANCE__ {int unused;};
struct HMETAFILE__ {int unused;};
struct HMIDISTRM__ {int unused;};
struct HMIXEROBJ__ {int unused;};
struct HRAWINPUT__ {int unused;};
struct IAccessible {struct IAccessibleVtbl *lpVtbl;};
struct IAdviseSink {struct IAdviseSinkVtbl *lpVtbl;};
typedef struct _5C25098378D11CF2DF13A353B46EE415 ICDRAWBEGIN;
struct IDataFilter {struct IDataFilterVtbl *lpVtbl;};
struct IDataObject {struct IDataObjectVtbl *lpVtbl;};
struct IDirectDraw {struct IDirectDrawVtbl *lpVtbl;};
struct IDispatchEx {struct IDispatchExVtbl *lpVtbl;};
struct IDropSource {struct IDropSourceVtbl *lpVtbl;};
struct IDropTarget {struct IDropTargetVtbl *lpVtbl;};
struct IEnumIDList {struct IEnumIDListVtbl *lpVtbl;};
struct IEnumString {struct IEnumStringVtbl *lpVtbl;};
struct IFolderView {struct IFolderViewVtbl *lpVtbl;};
struct IInsertItem {struct IInsertItemVtbl *lpVtbl;};
struct IKsTopology {struct IKsTopologyVtbl *lpVtbl;};
struct INetCrawler {struct INetCrawlerVtbl *lpVtbl;};
typedef struct _IO_COUNTERS IO_COUNTERS;
struct IObjContext;
struct IOleControl {struct IOleControlVtbl *lpVtbl;};
typedef struct _IPX_PATTERN IPX_PATTERN;
struct IPipeDouble {struct IPipeDoubleVtbl *lpVtbl;};
struct IPrintOemUI {struct IPrintOemUIVtbl *lpVtbl;};
struct IPropertyUI {struct IPropertyUIVtbl *lpVtbl;};
struct IRecordInfo {struct IRecordInfoVtbl *lpVtbl;};
struct IRpcOptions {struct IRpcOptionsVtbl *lpVtbl;};
struct IShellLinkA {struct IShellLinkAVtbl *lpVtbl;};
struct IShellLinkW {struct IShellLinkWVtbl *lpVtbl;};
struct IShellView2 {struct IShellView2Vtbl *lpVtbl;};
struct IViewObject {struct IViewObjectVtbl *lpVtbl;};
struct IWebBrowser {struct IWebBrowserVtbl *lpVtbl;};
struct IWizardSite {struct IWizardSiteVtbl *lpVtbl;};
struct IXMLDOMNode {struct IXMLDOMNodeVtbl *lpVtbl;};
struct IXMLDOMText {struct IXMLDOMTextVtbl *lpVtbl;};
struct IXMLElement {struct IXMLElementVtbl *lpVtbl;};
struct IXTLRuntime {struct IXTLRuntimeVtbl *lpVtbl;};
typedef void *I_RPC_MUTEX;
typedef struct _JOB_INFO_1A JOB_INFO_1A;
typedef struct _JOB_INFO_1W JOB_INFO_1W;
typedef struct _JOB_INFO_2A JOB_INFO_2A;
typedef struct _JOB_INFO_2W JOB_INFO_2W;
typedef struct tagKERNINGPAIR KERNINGPAIR;
typedef struct _8276AF68B2084DDEC7235E96B5A3DDF6 KSATTRIBUTE;
typedef union _A4FB595EF421231CAF150DDD3288A6D5 KSDATARANGE;
typedef struct _16C1E3925C7C4AECC0ACCAA7BBC13164 KSEVENTDATA;
typedef struct _52BD71AC0F61B53F3E44045ED088295E KSFRAMETIME;
typedef struct _KSM_BDA_PIN KSM_BDA_PIN;
typedef struct tagKS_AMVPSIZE KS_AMVPSIZE;
typedef struct tagAUXCAPS2A *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W *LPAUXCAPS2W;
typedef struct tagAXESLISTA *LPAXESLISTA;
typedef struct tagAXESLISTW *LPAXESLISTW;
typedef struct tagAXISINFOA *LPAXISINFOA;
typedef struct tagAXISINFOW *LPAXISINFOW;
typedef struct _BIDI_DATA *LPBIDI_DATA;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct tagCapStatus *LPCAPSTATUS;
typedef ICopyHookA *LPCOPYHOOKA;
typedef ICopyHookW *LPCOPYHOOKW;
typedef struct _cpinfoexA *LPCPINFOEXA;
typedef struct _cpinfoexW *LPCPINFOEXW;
typedef struct tagCWPSTRUCT *LPCWPSTRUCT;
typedef struct _D3DBRANCH *LPD3DBRANCH;
typedef struct _D3DLIGHT2 *LPD3DLIGHT2;
typedef struct _D3DLIGHT7 *LPD3DLIGHT7;
typedef struct _D3DMATRIX *LPD3DMATRIX;
typedef struct _D3DSTATUS *LPD3DSTATUS;
typedef struct _D3DVERTEX *LPD3DVERTEX;
typedef struct _DDSCAPSEX *LPDDSCAPSEX;
typedef struct IDirect3D8 *LPDIRECT3D8;
typedef struct _DLSHEADER *LPDLSHEADER;
typedef struct _DRAGINFOA *LPDRAGINFOA;
typedef struct _DRAGINFOW *LPDRAGINFOW;
typedef struct _DROPFILES *LPDROPFILES;
typedef IErrorInfo *LPERRORINFO;
typedef struct tagEXCEPINFO *LPEXCEPINFO;
typedef struct tagEXTLOGPEN *LPEXTLOGPEN;
typedef struct tagLVFINDINFOA *LPFINDINFOA;
typedef struct tagLVFINDINFOW *LPFINDINFOW;
typedef struct tagFORMATETC *LPFORMATETC;
typedef struct tagGUIDELINE *LPGUIDELINE;
typedef IInternet *LPIINTERNET;
typedef struct _IMAGEINFO *LPIMAGEINFO;
typedef struct tagJOYCAPS2A *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W *LPJOYCAPS2W;
typedef struct joyinfoex_tag *LPJOYINFOEX;
typedef ILockBytes *LPLOCKBYTES;
typedef struct tagLVCOLUMNA *LPLVCOLUMNA;
typedef struct tagLVCOLUMNW *LPLVCOLUMNW;
typedef IMallocSpy *LPMALLOCSPY;
typedef struct _MONITOREX *LPMONITOREX;
typedef struct tagMOUSEKEYS *LPMOUSEKEYS;
typedef struct tagNMHEADERA *LPNMHEADERA;
typedef struct tagNMHEADERW *LPNMHEADERW;
typedef struct _NRESARRAY *LPNRESARRAY;
typedef struct _OFNOTIFYA *LPOFNOTIFYA;
typedef struct _OFNOTIFYW *LPOFNOTIFYW;
typedef IOleCache2 *LPOLECACHE2;
typedef IOleObject *LPOLEOBJECT;
typedef struct _OLESTREAM *LPOLESTREAM;
typedef IOleWindow *LPOLEWINDOW;
typedef struct tagPARAMDATA *LPPARAMDATA;
typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct tagPOLYTEXTA *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW *LPPOLYTEXTW;
typedef struct _POOLTABLE *LPPOOLTABLE;
typedef struct tagPDA *LPPRINTDLGA;
typedef struct tagPDW *LPPRINTDLGW;
typedef struct _PSHNOTIFY *LPPSHNOTIFY;
typedef struct tagREBARINFO *LPREBARINFO;
typedef struct _RGNHEADER *LPRGNHEADER;
typedef struct _SC_ACTION *LPSC_ACTION;
typedef IShellIcon *LPSHELLICON;
typedef IShellView *LPSHELLVIEW;
typedef struct tagSTYLEBUFA *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW *LPSTYLEBUFW;
typedef ISurrogate *LPSURROGATE;
typedef struct _7C92D00B816E38F8096F1C793288C884 *LPTBMETRICS;
typedef struct _TRIVERTEX *LPTRIVERTEX;
typedef struct tagTVITEMEXA *LPTVITEMEXA;
typedef struct tagTVITEMEXW *LPTVITEMEXW;
typedef ITypeInfo2 *LPTYPEINFO2;
typedef struct tagWINDOWPOS *LPWINDOWPOS;
typedef struct tagWNDCLASSA *LPWNDCLASSA;
typedef struct tagWNDCLASSW *LPWNDCLASSW;
typedef struct tagLVFINDINFOA LVFINDINFOA;
typedef struct tagLVFINDINFOW LVFINDINFOW;
enum MACRO_ACMDM {ACMDM_USER = 0x4000,ACMDM_RESERVED_LOW = 0x6000,ACMDM_RESERVED_HIGH = 0x6FFF,ACMDM_BASE = 0x6000,ACMDM_DRIVER_ABOUT = 0x600B,};
enum MACRO_ACUTE {ACUTE = 0x301,};
enum MACRO_ALERT {ALERT_SYSTEM_INFORMATIONAL = 1,ALERT_SYSTEM_WARNING = 2,ALERT_SYSTEM_ERROR = 3,ALERT_SYSTEM_QUERY = 4,ALERT_SYSTEM_CRITICAL = 5,};
enum MACRO_ASYNC {ASYNC_MODE_COMPATIBILITY = 0x1,ASYNC_MODE_DEFAULT = 0x0,};
enum MACRO_AUDIT {AUDIT_ALLOW_NO_PRIVILEGE = 0x1,};
enum MACRO_AVIIF {AVIIF_CONTROLFRAME = 0x200,};
enum MACRO_AVISF {AVISF_DISABLED = 0x1,AVISF_VIDEO_PALCHANGES = 0x10000,};
enum MACRO_BASIC {BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 0x80000000,BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 0x40000000,};
enum MACRO_BOUND {BOUND_IMAGE_UNSUPPORTED = 0x97,};
enum MACRO_BREVE {BREVE = 0x306,};
enum MACRO_BRUSH {WHITE_BRUSH = 0,LTGRAY_BRUSH = 1,GRAY_BRUSH = 2,DKGRAY_BRUSH = 3,BLACK_BRUSH = 4,NULL_BRUSH = 5,HOLLOW_BRUSH = 5,};
enum MACRO_CACHE {CACHE_E_FIRST = 0x80040170,CACHE_E_LAST = 0x8004017F,CACHE_S_FIRST = 0x40170,CACHE_S_LAST = 0x4017F,CACHE_E_NOCACHE_UPDATED = 0x80040170,};
enum MACRO_CBEIF {CBEIF_TEXT = 0x1,CBEIF_IMAGE = 0x2,CBEIF_SELECTEDIMAGE = 0x4,CBEIF_OVERLAY = 0x8,CBEIF_INDENT = 0x10,CBEIF_LPARAM = 0x20,CBEIF_DI_SETITEM = 0x10000000,};
enum MACRO_CBENF {CBENF_KILLFOCUS = 1,CBENF_RETURN = 2,CBENF_ESCAPE = 3,CBENF_DROPDOWN = 4,};
enum MACRO_CCERR {CCERR_CHOOSECOLORCODES = 0x5000,};
enum MACRO_CDB2N {CDB2N_CONTEXTMENU_DONE = 0x1,CDB2N_CONTEXTMENU_START = 0x2,};
enum MACRO_CDERR {CDERR_DIALOGFAILURE = 0xFFFF,CDERR_GENERALCODES = 0x0,CDERR_STRUCTSIZE = 0x1,CDERR_INITIALIZATION = 0x2,CDERR_NOTEMPLATE = 0x3,CDERR_NOHINSTANCE = 0x4,CDERR_LOADSTRFAILURE = 0x5,CDERR_FINDRESFAILURE = 0x6,CDERR_LOADRESFAILURE = 0x7,CDERR_LOCKRESFAILURE = 0x8,CDERR_MEMALLOCFAILURE = 0x9,CDERR_MEMLOCKFAILURE = 0xA,CDERR_NOHOOK = 0xB,CDERR_REGISTERMSGFAIL = 0xC,};
enum MACRO_CFERR {CFERR_CHOOSEFONTCODES = 0x2000,CFERR_NOFONTS = 0x2001,CFERR_MAXLESSTHANMIN = 0x2002,};
enum MACRO_CLASS {CLASS_E_NOAGGREGATION = 0x80040110,CLASS_E_CLASSNOTAVAILABLE = 0x80040111,CLASS_E_NOTLICENSED = 0x80040112,};
enum MACRO_CLOCK {CLOCK_NETWORK_DERIVED = 0x2,CLOCK_PRECISION = 0x4,};
enum MACRO_CNLEN {CNLEN = 15,};
enum MACRO_COLOR {COLOR_ADJ_MIN = -100,COLOR_ADJ_MAX = 100,};
enum MACRO_COMQC {COMQC_E_APPLICATION_NOT_QUEUED = 0x80110600,COMQC_E_NO_QUEUEABLE_INTERFACES = 0x80110601,COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = 0x80110602,COMQC_E_NO_IPERSISTSTREAM = 0x80110603,COMQC_E_BAD_MESSAGE = 0x80110604,COMQC_E_UNAUTHENTICATED = 0x80110605,COMQC_E_UNTRUSTED_ENQUEUER = 0x80110606,};
enum MACRO_COULD {COULD_NOT_VERIFY_VOLUMES = 0xC00037E8,};
enum MACRO_CPSUI {CPSUI_PDLGPAGE_DOCPROP = 1,CPSUI_PDLGPAGE_ADVDOCPROP = 2,CPSUI_PDLGPAGE_PRINTERPROP = 3,CPSUI_PDLGPAGE_TREEVIEWONLY = 4,CPSUI_PDLGPAGE_TREEVIWONLY = 4,};
enum MACRO_CROSS {CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 0xFF,CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 0x18,};
enum MACRO_CRYPT {CRYPT_E_MSG_ERROR = 0x80091001,CRYPT_E_UNKNOWN_ALGO = 0x80091002,CRYPT_E_OID_FORMAT = 0x80091003,CRYPT_E_INVALID_MSG_TYPE = 0x80091004,CRYPT_E_UNEXPECTED_ENCODING = 0x80091005,CRYPT_E_AUTH_ATTR_MISSING = 0x80091006,CRYPT_E_HASH_VALUE = 0x80091007,CRYPT_E_INVALID_INDEX = 0x80091008,CRYPT_E_ALREADY_DECRYPTED = 0x80091009,CRYPT_E_NOT_DECRYPTED = 0x8009100A,CRYPT_E_RECIPIENT_NOT_FOUND = 0x8009100B,CRYPT_E_CONTROL_TYPE = 0x8009100C,CRYPT_E_ISSUER_SERIALNUMBER = 0x8009100D,CRYPT_E_SIGNER_NOT_FOUND = 0x8009100E,CRYPT_E_ATTRIBUTES_MISSING = 0x8009100F,CRYPT_E_STREAM_MSG_NOT_READY = 0x80091010,CRYPT_E_STREAM_INSUFFICIENT_DATA = 0x80091011,CRYPT_I_NEW_PROTECTION_REQUIRED = 0x91012,CRYPT_E_BAD_LEN = 0x80092001,CRYPT_E_BAD_ENCODE = 0x80092002,CRYPT_E_FILE_ERROR = 0x80092003,CRYPT_E_NOT_FOUND = 0x80092004,CRYPT_E_EXISTS = 0x80092005,CRYPT_E_NO_PROVIDER = 0x80092006,CRYPT_E_SELF_SIGNED = 0x80092007,CRYPT_E_DELETED_PREV = 0x80092008,CRYPT_E_NO_MATCH = 0x80092009,CRYPT_E_UNEXPECTED_MSG_TYPE = 0x8009200A,CRYPT_E_NO_KEY_PROPERTY = 0x8009200B,CRYPT_E_NO_DECRYPT_CERT = 0x8009200C,CRYPT_E_BAD_MSG = 0x8009200D,CRYPT_E_NO_SIGNER = 0x8009200E,CRYPT_E_PENDING_CLOSE = 0x8009200F,CRYPT_E_REVOKED = 0x80092010,CRYPT_E_NO_REVOCATION_DLL = 0x80092011,CRYPT_E_NO_REVOCATION_CHECK = 0x80092012,CRYPT_E_REVOCATION_OFFLINE = 0x80092013,CRYPT_E_NOT_IN_REVOCATION_DATABASE = 0x80092014,CRYPT_E_INVALID_NUMERIC_STRING = 0x80092020,CRYPT_E_INVALID_PRINTABLE_STRING = 0x80092021,CRYPT_E_INVALID_IA5_STRING = 0x80092022,CRYPT_E_INVALID_X500_STRING = 0x80092023,CRYPT_E_NOT_CHAR_STRING = 0x80092024,CRYPT_E_FILERESIZED = 0x80092025,CRYPT_E_SECURITY_SETTINGS = 0x80092026,CRYPT_E_NO_VERIFY_USAGE_DLL = 0x80092027,CRYPT_E_NO_VERIFY_USAGE_CHECK = 0x80092028,CRYPT_E_VERIFY_USAGE_OFFLINE = 0x80092029,CRYPT_E_NOT_IN_CTL = 0x8009202A,CRYPT_E_NO_TRUSTED_SIGNER = 0x8009202B,CRYPT_E_MISSING_PUBKEY_PARA = 0x8009202C,CRYPT_E_OSS_ERROR = 0x80093000,};
enum MACRO_CSIDL {CSIDL_DESKTOP = 0x0,CSIDL_INTERNET = 0x1,CSIDL_PROGRAMS = 0x2,CSIDL_CONTROLS = 0x3,CSIDL_PRINTERS = 0x4,CSIDL_PERSONAL = 0x5,CSIDL_FAVORITES = 0x6,CSIDL_STARTUP = 0x7,CSIDL_RECENT = 0x8,CSIDL_SENDTO = 0x9,CSIDL_BITBUCKET = 0xA,CSIDL_STARTMENU = 0xB,CSIDL_MYDOCUMENTS = 0xC,CSIDL_MYMUSIC = 0xD,CSIDL_MYVIDEO = 0xE,CSIDL_DESKTOPDIRECTORY = 0x10,CSIDL_DRIVES = 0x11,CSIDL_NETWORK = 0x12,CSIDL_NETHOOD = 0x13,CSIDL_FONTS = 0x14,CSIDL_TEMPLATES = 0x15,CSIDL_COMMON_STARTMENU = 0x16,CSIDL_COMMON_PROGRAMS = 0x17,CSIDL_COMMON_STARTUP = 0x18,CSIDL_COMMON_DESKTOPDIRECTORY = 0x19,CSIDL_APPDATA = 0x1A,CSIDL_PRINTHOOD = 0x1B,CSIDL_LOCAL_APPDATA = 0x1C,CSIDL_ALTSTARTUP = 0x1D,CSIDL_COMMON_ALTSTARTUP = 0x1E,CSIDL_COMMON_FAVORITES = 0x1F,CSIDL_INTERNET_CACHE = 0x20,CSIDL_COOKIES = 0x21,CSIDL_HISTORY = 0x22,CSIDL_COMMON_APPDATA = 0x23,CSIDL_WINDOWS = 0x24,CSIDL_SYSTEM = 0x25,CSIDL_PROGRAM_FILES = 0x26,CSIDL_MYPICTURES = 0x27,CSIDL_PROFILE = 0x28,CSIDL_SYSTEMX86 = 0x29,CSIDL_PROGRAM_FILESX86 = 0x2A,CSIDL_PROGRAM_FILES_COMMON = 0x2B,CSIDL_PROGRAM_FILES_COMMONX86 = 0x2C,CSIDL_COMMON_TEMPLATES = 0x2D,CSIDL_COMMON_DOCUMENTS = 0x2E,CSIDL_COMMON_ADMINTOOLS = 0x2F,CSIDL_ADMINTOOLS = 0x30,CSIDL_CONNECTIONS = 0x31,CSIDL_COMMON_MUSIC = 0x35,CSIDL_COMMON_PICTURES = 0x36,CSIDL_COMMON_VIDEO = 0x37,CSIDL_RESOURCES = 0x38,CSIDL_RESOURCES_LOCALIZED = 0x39,CSIDL_COMMON_OEM_LINKS = 0x3A,CSIDL_CDBURN_AREA = 0x3B,CSIDL_COMPUTERSNEARME = 0x3D,CSIDL_FLAG_CREATE = 0x8000,CSIDL_FLAG_DONT_VERIFY = 0x4000,CSIDL_FLAG_NO_ALIAS = 0x1000,CSIDL_FLAG_PER_USER_INIT = 0x800,CSIDL_FLAG_MASK = 0xFF00,};
enum MACRO_CTL_E {CTL_E_ILLEGALFUNCTIONCALL = -2146828283,CTL_E_OVERFLOW = -2146828282,CTL_E_OUTOFMEMORY = -2146828281,CTL_E_DIVISIONBYZERO = -2146828277,CTL_E_OUTOFSTRINGSPACE = -2146828274,CTL_E_OUTOFSTACKSPACE = -2146828260,CTL_E_BADFILENAMEORNUMBER = -2146828236,CTL_E_FILENOTFOUND = -2146828235,CTL_E_BADFILEMODE = -2146828234,CTL_E_FILEALREADYOPEN = -2146828233,CTL_E_DEVICEIOERROR = -2146828231,CTL_E_FILEALREADYEXISTS = -2146828230,CTL_E_BADRECORDLENGTH = -2146828229,CTL_E_DISKFULL = -2146828227,CTL_E_BADRECORDNUMBER = -2146828225,CTL_E_BADFILENAME = -2146828224,CTL_E_TOOMANYFILES = -2146828221,CTL_E_DEVICEUNAVAILABLE = -2146828220,CTL_E_PERMISSIONDENIED = -2146828218,CTL_E_DISKNOTREADY = -2146828217,CTL_E_PATHFILEACCESSERROR = -2146828213,CTL_E_PATHNOTFOUND = -2146828212,CTL_E_INVALIDPATTERNSTRING = -2146828195,CTL_E_INVALIDUSEOFNULL = -2146828194,CTL_E_INVALIDFILEFORMAT = -2146827967,CTL_E_INVALIDPROPERTYVALUE = -2146827908,CTL_E_INVALIDPROPERTYARRAYINDEX = -2146827907,CTL_E_SETNOTSUPPORTEDATRUNTIME = -2146827906,CTL_E_SETNOTSUPPORTED = -2146827905,CTL_E_NEEDPROPERTYARRAYINDEX = -2146827903,CTL_E_SETNOTPERMITTED = -2146827901,CTL_E_GETNOTSUPPORTEDATRUNTIME = -2146827895,CTL_E_GETNOTSUPPORTED = -2146827894,CTL_E_PROPERTYNOTFOUND = -2146827866,CTL_E_INVALIDCLIPBOARDFORMAT = -2146827828,CTL_E_INVALIDPICTURE = -2146827807,CTL_E_PRINTERERROR = -2146827806,CTL_E_CANTSAVEFILETOTEMP = -2146827553,CTL_E_SEARCHTEXTNOTFOUND = -2146827544,CTL_E_REPLACEMENTSTOOLONG = -2146827542,CTL_E_CUSTOM_FIRST = -2146827688,};
enum MACRO_D3DCS {D3DCS_LEFT = 0x1,D3DCS_RIGHT = 0x2,D3DCS_TOP = 0x4,D3DCS_BOTTOM = 0x8,D3DCS_FRONT = 0x10,D3DCS_BACK = 0x20,D3DCS_PLANE0 = 0x40,D3DCS_PLANE1 = 0x80,D3DCS_PLANE2 = 0x100,D3DCS_PLANE3 = 0x200,D3DCS_PLANE4 = 0x400,D3DCS_PLANE5 = 0x800,D3DCS_ALL = 0xFFF,};
enum MACRO_D3DDD {D3DDD_COLORMODEL = 0x1,D3DDD_DEVCAPS = 0x2,D3DDD_TRANSFORMCAPS = 0x4,D3DDD_LIGHTINGCAPS = 0x8,D3DDD_BCLIPPING = 0x10,D3DDD_LINECAPS = 0x20,D3DDD_TRICAPS = 0x40,D3DDD_DEVICERENDERBITDEPTH = 0x80,D3DDD_DEVICEZBUFFERBITDEPTH = 0x100,D3DDD_MAXBUFFERSIZE = 0x200,D3DDD_MAXVERTEXCOUNT = 0x400,};
enum MACRO_D3DDP {D3DDP_MAXTEXCOORD = 8,};
enum MACRO_D3DPS {D3DPS_INPUTREG_MAX_DX8 = 8,D3DPS_TEMPREG_MAX_DX8 = 8,D3DPS_CONSTREG_MAX_DX8 = 16,D3DPS_TEXTUREREG_MAX_DX8 = 8,};
enum MACRO_D3DPV {D3DPV_DONOTCOPYDATA = 1,};
enum MACRO_D3DRS {D3DRS_DELETERTPATCH = 169,};
enum MACRO_D3DSI {D3DSI_OPCODE_MASK = 0xFFFF,D3DSI_COISSUE = 0x40000000,};
enum MACRO_D3DSP {D3DSP_REGNUM_MASK = 0x1FFF,D3DSP_WRITEMASK_0 = 0x10000,D3DSP_WRITEMASK_1 = 0x20000,D3DSP_WRITEMASK_2 = 0x40000,D3DSP_WRITEMASK_3 = 0x80000,D3DSP_WRITEMASK_ALL = 0xF0000,D3DSP_DSTMOD_SHIFT = 0x14,D3DSP_DSTMOD_MASK = 0xF00000,D3DSP_DSTSHIFT_SHIFT = 0x18,D3DSP_DSTSHIFT_MASK = 0xF000000,D3DSP_REGTYPE_SHIFT = 0x1C,D3DSP_REGTYPE_MASK = 0x70000000,};
enum MACRO_D3DTA {D3DTA_SELECTMASK = 0xF,D3DTA_DIFFUSE = 0x0,D3DTA_CURRENT = 0x1,D3DTA_TEXTURE = 0x2,D3DTA_TFACTOR = 0x3,D3DTA_SPECULAR = 0x4,D3DTA_TEMP = 0x5,D3DTA_COMPLEMENT = 0x10,D3DTA_ALPHAREPLICATE = 0x20,};
enum MACRO_D3DVS {D3DVS_ADDRESSMODE_SHIFT = 13,D3DVS_ADDRESSMODE_MASK = 8192,D3DVS_SWIZZLE_SHIFT = 16,D3DVS_SWIZZLE_MASK = 16711680,D3DVS_X_X = 0,D3DVS_X_Y = 65536,D3DVS_X_Z = 131072,D3DVS_X_W = 196608,D3DVS_Y_X = 0,D3DVS_Y_Y = 262144,D3DVS_Y_Z = 524288,D3DVS_Y_W = 786432,D3DVS_Z_X = 0,D3DVS_Z_Y = 1048576,D3DVS_Z_Z = 2097152,D3DVS_Z_W = 3145728,D3DVS_W_X = 0,D3DVS_W_Y = 4194304,D3DVS_W_Z = 8388608,D3DVS_W_W = 12582912,D3DVS_NOSWIZZLE = 14942208,};
enum MACRO_DBGKD {DBGKD_VERS_FLAG_MP = 0x1,DBGKD_VERS_FLAG_DATA = 0x2,DBGKD_VERS_FLAG_PTR64 = 0x4,DBGKD_VERS_FLAG_NOMM = 0x8,DBGKD_VERS_FLAG_HSS = 0x10,DBGKD_VERS_FLAG_PARTITIONS = 0x20,};
enum MACRO_DBIMF {DBIMF_NORMAL = 0x0,DBIMF_FIXED = 0x1,DBIMF_FIXEDBMP = 0x4,DBIMF_VARIABLEHEIGHT = 0x8,DBIMF_UNDELETEABLE = 0x10,DBIMF_DEBOSSED = 0x20,DBIMF_BKCOLOR = 0x40,DBIMF_USECHEVRON = 0x80,DBIMF_BREAK = 0x100,DBIMF_ADDTOFRONT = 0x200,DBIMF_TOPALIGN = 0x400,};
enum MACRO_DDBLT {DDBLT_ALPHADEST = 0x1,DDBLT_ALPHADESTCONSTOVERRIDE = 0x2,DDBLT_ALPHADESTNEG = 0x4,DDBLT_ALPHADESTSURFACEOVERRIDE = 0x8,DDBLT_ALPHAEDGEBLEND = 0x10,DDBLT_ALPHASRC = 0x20,DDBLT_ALPHASRCCONSTOVERRIDE = 0x40,DDBLT_ALPHASRCNEG = 0x80,DDBLT_ALPHASRCSURFACEOVERRIDE = 0x100,DDBLT_ASYNC = 0x200,DDBLT_COLORFILL = 0x400,DDBLT_DDFX = 0x800,DDBLT_DDROPS = 0x1000,DDBLT_KEYDEST = 0x2000,DDBLT_KEYDESTOVERRIDE = 0x4000,DDBLT_KEYSRC = 0x8000,DDBLT_KEYSRCOVERRIDE = 0x10000,DDBLT_ROP = 0x20000,DDBLT_ROTATIONANGLE = 0x40000,DDBLT_ZBUFFER = 0x80000,DDBLT_ZBUFFERDESTCONSTOVERRIDE = 0x100000,DDBLT_ZBUFFERDESTOVERRIDE = 0x200000,DDBLT_ZBUFFERSRCCONSTOVERRIDE = 0x400000,DDBLT_ZBUFFERSRCOVERRIDE = 0x800000,DDBLT_WAIT = 0x1000000,DDBLT_DEPTHFILL = 0x2000000,DDBLT_DONOTWAIT = 0x8000000,DDBLT_PRESENTATION = 0x10000000,DDBLT_LAST_PRESENTATION = 0x20000000,};
enum MACRO_DDEDM {DDEDM_REFRESHRATES = 0x1,DDEDM_STANDARDVGAMODES = 0x2,};
enum MACRO_DDERR {DDERR_ALREADYINITIALIZED = -2005532667,DDERR_CANNOTATTACHSURFACE = -2005532662,DDERR_CANNOTDETACHSURFACE = -2005532652,DDERR_CURRENTLYNOTAVAIL = -2005532632,DDERR_EXCEPTION = -2005532617,DDERR_GENERIC = -2147467259,DDERR_HEIGHTALIGN = -2005532582,DDERR_INCOMPATIBLEPRIMARY = -2005532577,DDERR_INVALIDCAPS = -2005532572,DDERR_INVALIDCLIPLIST = -2005532562,DDERR_INVALIDMODE = -2005532552,DDERR_INVALIDOBJECT = -2005532542,DDERR_INVALIDPARAMS = -2147024809,DDERR_INVALIDPIXELFORMAT = -2005532527,DDERR_INVALIDRECT = -2005532522,DDERR_LOCKEDSURFACES = -2005532512,DDERR_NO3D = -2005532502,DDERR_NOALPHAHW = -2005532492,DDERR_NOSTEREOHARDWARE = -2005532491,DDERR_NOSURFACELEFT = -2005532490,DDERR_NOCLIPLIST = -2005532467,DDERR_NOCOLORCONVHW = -2005532462,DDERR_NOCOOPERATIVELEVELSET = -2005532460,DDERR_NOCOLORKEY = -2005532457,DDERR_NOCOLORKEYHW = -2005532452,DDERR_NODIRECTDRAWSUPPORT = -2005532450,DDERR_NOEXCLUSIVEMODE = -2005532447,DDERR_NOFLIPHW = -2005532442,DDERR_NOGDI = -2005532432,DDERR_NOMIRRORHW = -2005532422,DDERR_NOTFOUND = -2005532417,DDERR_NOOVERLAYHW = -2005532412,DDERR_OVERLAPPINGRECTS = -2005532402,DDERR_NORASTEROPHW = -2005532392,DDERR_NOROTATIONHW = -2005532382,DDERR_NOSTRETCHHW = -2005532362,DDERR_NOT4BITCOLOR = -2005532356,DDERR_NOT4BITCOLORINDEX = -2005532355,DDERR_NOT8BITCOLOR = -2005532352,DDERR_NOTEXTUREHW = -2005532342,DDERR_NOVSYNCHW = -2005532337,DDERR_NOZBUFFERHW = -2005532332,DDERR_NOZOVERLAYHW = -2005532322,DDERR_OUTOFCAPS = -2005532312,DDERR_OUTOFMEMORY = -2147024882,DDERR_OUTOFVIDEOMEMORY = -2005532292,DDERR_OVERLAYCANTCLIP = -2005532290,DDERR_OVERLAYCOLORKEYONLYONEACTIVE = -2005532288,DDERR_PALETTEBUSY = -2005532285,DDERR_COLORKEYNOTSET = -2005532272,DDERR_SURFACEALREADYATTACHED = -2005532262,DDERR_SURFACEALREADYDEPENDENT = -2005532252,DDERR_SURFACEBUSY = -2005532242,DDERR_CANTLOCKSURFACE = -2005532237,DDERR_SURFACEISOBSCURED = -2005532232,DDERR_SURFACELOST = -2005532222,DDERR_SURFACENOTATTACHED = -2005532212,DDERR_TOOBIGHEIGHT = -2005532202,DDERR_TOOBIGSIZE = -2005532192,DDERR_TOOBIGWIDTH = -2005532182,DDERR_UNSUPPORTED = -2147467263,DDERR_UNSUPPORTEDFORMAT = -2005532162,DDERR_UNSUPPORTEDMASK = -2005532152,DDERR_INVALIDSTREAM = -2005532151,DDERR_VERTICALBLANKINPROGRESS = -2005532135,DDERR_WASSTILLDRAWING = -2005532132,DDERR_DDSCAPSCOMPLEXREQUIRED = -2005532130,DDERR_XALIGN = -2005532112,DDERR_INVALIDDIRECTDRAWGUID = -2005532111,DDERR_DIRECTDRAWALREADYCREATED = -2005532110,DDERR_NODIRECTDRAWHW = -2005532109,DDERR_PRIMARYSURFACEALREADYEXISTS = -2005532108,DDERR_NOEMULATION = -2005532107,DDERR_REGIONTOOSMALL = -2005532106,DDERR_CLIPPERISUSINGHWND = -2005532105,DDERR_NOCLIPPERATTACHED = -2005532104,DDERR_NOHWND = -2005532103,DDERR_HWNDSUBCLASSED = -2005532102,DDERR_HWNDALREADYSET = -2005532101,DDERR_NOPALETTEATTACHED = -2005532100,DDERR_NOPALETTEHW = -2005532099,DDERR_BLTFASTCANTCLIP = -2005532098,DDERR_NOBLTHW = -2005532097,DDERR_NODDROPSHW = -2005532096,DDERR_OVERLAYNOTVISIBLE = -2005532095,DDERR_NOOVERLAYDEST = -2005532094,DDERR_INVALIDPOSITION = -2005532093,DDERR_NOTAOVERLAYSURFACE = -2005532092,DDERR_EXCLUSIVEMODEALREADYSET = -2005532091,DDERR_NOTFLIPPABLE = -2005532090,DDERR_CANTDUPLICATE = -2005532089,DDERR_NOTLOCKED = -2005532088,DDERR_CANTCREATEDC = -2005532087,DDERR_NODC = -2005532086,DDERR_WRONGMODE = -2005532085,DDERR_IMPLICITLYCREATED = -2005532084,DDERR_NOTPALETTIZED = -2005532083,DDERR_UNSUPPORTEDMODE = -2005532082,DDERR_NOMIPMAPHW = -2005532081,DDERR_INVALIDSURFACETYPE = -2005532080,DDERR_NOOPTIMIZEHW = -2005532072,DDERR_NOTLOADED = -2005532071,DDERR_NOFOCUSWINDOW = -2005532070,DDERR_NOTONMIPMAPSUBLEVEL = -2005532069,DDERR_DCALREADYCREATED = -2005532052,DDERR_NONONLOCALVIDMEM = -2005532042,DDERR_CANTPAGELOCK = -2005532032,DDERR_CANTPAGEUNLOCK = -2005532012,DDERR_NOTPAGELOCKED = -2005531992,DDERR_MOREDATA = -2005531982,DDERR_EXPIRED = -2005531981,DDERR_TESTFINISHED = -2005531980,DDERR_NEWMODE = -2005531979,DDERR_D3DNOTINITIALIZED = -2005531978,DDERR_VIDEONOTACTIVE = -2005531977,DDERR_NOMONITORINFORMATION = -2005531976,DDERR_NODRIVERSUPPORT = -2005531975,DDERR_DEVICEDOESNTOWNSURFACE = -2005531973,DDERR_NOTINITIALIZED = -2147221008,};
enum MACRO_DDGBS {DDGBS_CANBLT = 0x1,DDGBS_ISBLTDONE = 0x2,};
enum MACRO_DDGDI {DDGDI_GETHOSTIDENTIFIER = 0x1,};
enum MACRO_DDGFS {DDGFS_CANFLIP = 0x1,DDGFS_ISFLIPDONE = 0x2,};
enum MACRO_DDHAL {DDHAL_PLEASEALLOC_BLOCKSIZE = 0x2,DDHAL_PLEASEALLOC_LINEARSIZE = 0x3,};
enum MACRO_DDIRQ {DDIRQ_DISPLAY_VSYNC = 0x1,DDIRQ_RESERVED1 = 0x2,DDIRQ_VPORT0_VSYNC = 0x4,DDIRQ_VPORT0_LINE = 0x8,DDIRQ_VPORT1_VSYNC = 0x10,DDIRQ_VPORT1_LINE = 0x20,DDIRQ_VPORT2_VSYNC = 0x40,DDIRQ_VPORT2_LINE = 0x80,DDIRQ_VPORT3_VSYNC = 0x100,DDIRQ_VPORT3_LINE = 0x200,DDIRQ_VPORT4_VSYNC = 0x400,DDIRQ_VPORT4_LINE = 0x800,DDIRQ_VPORT5_VSYNC = 0x1000,DDIRQ_VPORT5_LINE = 0x2000,DDIRQ_VPORT6_VSYNC = 0x4000,DDIRQ_VPORT6_LINE = 0x8000,DDIRQ_VPORT7_VSYNC = 0x10000,DDIRQ_VPORT7_LINE = 0x20000,DDIRQ_VPORT8_VSYNC = 0x40000,DDIRQ_VPORT8_LINE = 0x80000,DDIRQ_VPORT9_VSYNC = 0x10000,DDIRQ_VPORT9_LINE = 0x20000,};
enum MACRO_DDOSD {DDOSD_GUID = 0x1,DDOSD_COMPRESSION_RATIO = 0x2,DDOSD_SCAPS = 0x4,DDOSD_OSCAPS = 0x8,DDOSD_ALL = 0xF,};
enum MACRO_DDRAW {DDRAW_DLL_UNLOADED = 1,};
enum MACRO_DDSCL {DDSCL_FULLSCREEN = 0x1,DDSCL_ALLOWREBOOT = 0x2,DDSCL_NOWINDOWCHANGES = 0x4,DDSCL_NORMAL = 0x8,DDSCL_EXCLUSIVE = 0x10,DDSCL_ALLOWMODEX = 0x40,DDSCL_SETFOCUSWINDOW = 0x80,DDSCL_SETDEVICEWINDOW = 0x100,DDSCL_CREATEDEVICEWINDOW = 0x200,DDSCL_MULTITHREADED = 0x400,DDSCL_FPUSETUP = 0x800,DDSCL_FPUPRESERVE = 0x1000,};
enum MACRO_DDSDM {DDSDM_STANDARDVGAMODE = 0x1,};
enum MACRO_DDSGR {DDSGR_CALIBRATE = 0x1,};
enum MACRO_DDSMT {DDSMT_ISTESTREQUIRED = 0x1,};
enum MACRO_DDSPD {DDSPD_IUNKNOWNPOINTER = 0x1,DDSPD_VOLATILE = 0x2,};
enum MACRO_DDVPB {DDVPB_VIDEOPORT = 0x1,DDVPB_OVERLAY = 0x2,DDVPB_TYPE = 0x4,};
enum MACRO_DDVPD {DDVPD_WIDTH = 0x1,DDVPD_HEIGHT = 0x2,DDVPD_ID = 0x4,DDVPD_CAPS = 0x8,DDVPD_FX = 0x10,DDVPD_AUTOFLIP = 0x20,DDVPD_ALIGN = 0x40,DDVPD_PREFERREDAUTOFLIP = 0x80,DDVPD_FILTERQUALITY = 0x100,};
enum MACRO_DD_OK {DD_OK = 0,DD_FALSE = 1,};
enum MACRO_DEBUG {DEBUG_PROCESS = 0x1,DEBUG_ONLY_THIS_PROCESS = 0x2,};
enum MACRO_DIBCI {DIBCI_NOINSTALLCLASS = 0x1,DIBCI_NODISPLAYCLASS = 0x2,};
enum MACRO_DIGCF {DIGCF_DEFAULT = 0x1,DIGCF_PRESENT = 0x2,DIGCF_ALLCLASSES = 0x4,DIGCF_PROFILE = 0x8,DIGCF_DEVICEINTERFACE = 0x10,DIGCF_INTERFACEDEVICE = 0x10,};
enum MACRO_DIOCR {DIOCR_INSTALLER = 0x1,DIOCR_INTERFACE = 0x2,};
enum MACRO_DIODI {DIODI_NO_ADD = 0x1,};
enum MACRO_DIREG {DIREG_DEV = 0x1,DIREG_DRV = 0x2,DIREG_BOTH = 0x4,};
enum MACRO_DIRID {DIRID_ABSOLUTE = -1,DIRID_ABSOLUTE_16BIT = 65535,DIRID_NULL = 0,DIRID_SRCPATH = 1,DIRID_WINDOWS = 10,DIRID_SYSTEM = 11,DIRID_DRIVERS = 12,DIRID_IOSUBSYS = 12,DIRID_INF = 17,DIRID_HELP = 18,DIRID_FONTS = 20,DIRID_VIEWERS = 21,DIRID_COLOR = 23,DIRID_APPS = 24,DIRID_SHARED = 25,DIRID_BOOT = 30,DIRID_SYSTEM16 = 50,DIRID_SPOOL = 51,DIRID_SPOOLDRIVERS = 52,DIRID_USERPROFILE = 53,DIRID_LOADER = 54,DIRID_PRINTPROCESSOR = 55,DIRID_DEFAULT = 11,DIRID_COMMON_STARTMENU = 16406,DIRID_COMMON_PROGRAMS = 16407,DIRID_COMMON_STARTUP = 16408,DIRID_COMMON_DESKTOPDIRECTORY = 16409,DIRID_COMMON_FAVORITES = 16415,DIRID_COMMON_APPDATA = 16419,DIRID_PROGRAM_FILES = 16422,DIRID_SYSTEM_X86 = 16425,DIRID_PROGRAM_FILES_X86 = 16426,DIRID_PROGRAM_FILES_COMMON = 16427,DIRID_PROGRAM_FILES_COMMONX86 = 16428,DIRID_COMMON_TEMPLATES = 16429,DIRID_COMMON_DOCUMENTS = 16430,DIRID_USER = 32768,};
enum MACRO_DIRTY {DIRTY_MAPPED_PAGES_CONGESTION = 0xEB,};
enum MACRO_DMBIN {DMBIN_UPPER = 1,DMBIN_ONLYONE = 1,DMBIN_LOWER = 2,DMBIN_MIDDLE = 3,DMBIN_MANUAL = 4,DMBIN_ENVELOPE = 5,DMBIN_ENVMANUAL = 6,DMBIN_AUTO = 7,DMBIN_TRACTOR = 8,DMBIN_SMALLFMT = 9,DMBIN_LARGEFMT = 10,DMBIN_LARGECAPACITY = 11,DMBIN_CASSETTE = 14,DMBIN_FORMSOURCE = 15,DMBIN_LAST = 15,DMBIN_USER = 256,};
enum MACRO_DMDFO {DMDFO_DEFAULT = 0,DMDFO_STRETCH = 1,DMDFO_CENTER = 2,};
enum MACRO_DMDUP {DMDUP_SIMPLEX = 1,DMDUP_VERTICAL = 2,DMDUP_HORIZONTAL = 3,};
enum MACRO_DMICM {DMICM_SATURATE = 1,DMICM_CONTRAST = 2,DMICM_COLORIMETRIC = 3,DMICM_ABS_COLORIMETRIC = 4,DMICM_USER = 256,};
enum MACRO_DMNUP {DMNUP_SYSTEM = 1,DMNUP_ONEUP = 2,};
enum MACRO_DMPUB {DMPUB_NONE = 0,DMPUB_FIRST = 1,DMPUB_ORIENTATION = 1,DMPUB_SCALE = 2,DMPUB_COPIES_COLLATE = 3,DMPUB_DEFSOURCE = 4,DMPUB_PRINTQUALITY = 5,DMPUB_COLOR = 6,DMPUB_DUPLEX = 7,DMPUB_TTOPTION = 8,DMPUB_FORMNAME = 9,DMPUB_ICMMETHOD = 10,DMPUB_ICMINTENT = 11,DMPUB_MEDIATYPE = 12,DMPUB_DITHERTYPE = 13,DMPUB_OUTPUTBIN = 14,DMPUB_QUALITY = 15,DMPUB_NUP = 16,DMPUB_PAGEORDER = 17,DMPUB_LAST = 17,DMPUB_OEM_PAPER_ITEM = 97,DMPUB_OEM_GRAPHIC_ITEM = 98,DMPUB_OEM_ROOT_ITEM = 99,DMPUB_USER = 100,};
enum MACRO_DMRES {DMRES_DRAFT = -1,DMRES_LOW = -2,DMRES_MEDIUM = -3,DMRES_HIGH = -4,};
enum MACRO_DNLEN {DNLEN = 15,};
enum MACRO_DRIVE {DRIVE_UNKNOWN = 0,DRIVE_NO_ROOT_DIR = 1,DRIVE_REMOVABLE = 2,DRIVE_FIXED = 3,DRIVE_REMOTE = 4,DRIVE_CDROM = 5,DRIVE_RAMDISK = 6,};
enum MACRO_DSBPN {DSBPN_OFFSETSTOP = 0xFFFFFFFF,};
enum MACRO_DSCFX {DSCFX_LOCHARDWARE = 0x1,DSCFX_LOCSOFTWARE = 0x2,};
enum MACRO_DSERR {DSERR_ALLOCATED = -2005401590,DSERR_CONTROLUNAVAIL = -2005401570,DSERR_INVALIDPARAM = -2147024809,DSERR_INVALIDCALL = -2005401550,DSERR_GENERIC = -2147467259,DSERR_PRIOLEVELNEEDED = -2005401530,DSERR_OUTOFMEMORY = -2147024882,DSERR_BADFORMAT = -2005401500,DSERR_UNSUPPORTED = -2147467263,DSERR_NODRIVER = -2005401480,DSERR_ALREADYINITIALIZED = -2005401470,DSERR_NOAGGREGATION = -2147221232,DSERR_BUFFERLOST = -2005401450,DSERR_OTHERAPPHASPRIO = -2005401440,DSERR_UNINITIALIZED = -2005401430,DSERR_NOINTERFACE = -2147467262,DSERR_ACCESSDENIED = -2147024891,DSERR_BUFFERTOOSMALL = -2005401420,DSERR_DS8_REQUIRED = -2005401410,DSERR_SENDLOOP = -2005401400,DSERR_BADSENDBUFFERGUID = -2005401390,DSERR_OBJECTNOTFOUND = -2005397151,DSERR_FXUNAVAILABLE = -2005401380,};
enum MACRO_DSSCL {DSSCL_NORMAL = 0x1,DSSCL_PRIORITY = 0x2,DSSCL_EXCLUSIVE = 0x3,DSSCL_WRITEPRIMARY = 0x4,};
enum MACRO_DS_OK {DS_OK = 0,DS_NO_VIRTUALIZATION = 142082058,DS_INCOMPLETE = 142082068,};
enum MACRO_DWFAF {DWFAF_HIDDEN = 0x1,};
enum MACRO_DWFRF {DWFRF_NORMAL = 0x0,DWFRF_DELETECONFIGDATA = 0x1,};
enum MACRO_DXAPI {DXAPI_HALVERSION = 0x1,};
enum MACRO_DXERR {DXERR_UNSUPPORTED = 0x80004001,DXERR_GENERIC = 0x80004005,DXERR_OUTOFCAPS = 0x88760168,};
enum MACRO_EIMES {EIMES_GETCOMPSTRATONCE = 0x1,EIMES_CANCELCOMPSTRINFOCUS = 0x2,EIMES_COMPLETECOMPSTRKILLFOCUS = 0x4,};
enum MACRO_EMPTY {EMPTY_THREAD_REAPER_LIST = 0x13,};
enum MACRO_EMSIS {EMSIS_COMPOSITIONSTRING = 0x1,};
enum MACRO_ERROR {ERROR_SEVERITY_SUCCESS = 0x0,ERROR_SEVERITY_INFORMATIONAL = 0x40000000,ERROR_SEVERITY_WARNING = 0x80000000,ERROR_SEVERITY_ERROR = 0xC0000000,ERROR_SUCCESS = 0x0,NO_ERROR = 0x0,SEC_E_OK = 0x0,ERROR_INVALID_FUNCTION = 0x1,ERROR_FILE_NOT_FOUND = 0x2,ERROR_PATH_NOT_FOUND = 0x3,ERROR_TOO_MANY_OPEN_FILES = 0x4,ERROR_ACCESS_DENIED = 0x5,ERROR_INVALID_HANDLE = 0x6,ERROR_ARENA_TRASHED = 0x7,ERROR_NOT_ENOUGH_MEMORY = 0x8,ERROR_INVALID_BLOCK = 0x9,ERROR_BAD_ENVIRONMENT = 0xA,ERROR_BAD_FORMAT = 0xB,ERROR_INVALID_ACCESS = 0xC,ERROR_INVALID_DATA = 0xD,ERROR_OUTOFMEMORY = 0xE,ERROR_INVALID_DRIVE = 0xF,ERROR_CURRENT_DIRECTORY = 0x10,ERROR_NOT_SAME_DEVICE = 0x11,ERROR_NO_MORE_FILES = 0x12,ERROR_WRITE_PROTECT = 0x13,ERROR_BAD_UNIT = 0x14,ERROR_NOT_READY = 0x15,ERROR_BAD_COMMAND = 0x16,ERROR_CRC = 0x17,ERROR_BAD_LENGTH = 0x18,ERROR_SEEK = 0x19,ERROR_NOT_DOS_DISK = 0x1A,ERROR_SECTOR_NOT_FOUND = 0x1B,ERROR_OUT_OF_PAPER = 0x1C,ERROR_WRITE_FAULT = 0x1D,ERROR_READ_FAULT = 0x1E,ERROR_GEN_FAILURE = 0x1F,ERROR_SHARING_VIOLATION = 0x20,ERROR_LOCK_VIOLATION = 0x21,ERROR_WRONG_DISK = 0x22,ERROR_SHARING_BUFFER_EXCEEDED = 0x24,ERROR_HANDLE_EOF = 0x26,ERROR_HANDLE_DISK_FULL = 0x27,ERROR_NOT_SUPPORTED = 0x32,ERROR_REM_NOT_LIST = 0x33,ERROR_DUP_NAME = 0x34,ERROR_BAD_NETPATH = 0x35,ERROR_NETWORK_BUSY = 0x36,ERROR_DEV_NOT_EXIST = 0x37,ERROR_TOO_MANY_CMDS = 0x38,ERROR_ADAP_HDW_ERR = 0x39,ERROR_BAD_NET_RESP = 0x3A,ERROR_UNEXP_NET_ERR = 0x3B,ERROR_BAD_REM_ADAP = 0x3C,ERROR_PRINTQ_FULL = 0x3D,ERROR_NO_SPOOL_SPACE = 0x3E,ERROR_PRINT_CANCELLED = 0x3F,ERROR_NETNAME_DELETED = 0x40,ERROR_NETWORK_ACCESS_DENIED = 0x41,ERROR_BAD_DEV_TYPE = 0x42,ERROR_BAD_NET_NAME = 0x43,ERROR_TOO_MANY_NAMES = 0x44,ERROR_TOO_MANY_SESS = 0x45,ERROR_SHARING_PAUSED = 0x46,ERROR_REQ_NOT_ACCEP = 0x47,ERROR_REDIR_PAUSED = 0x48,ERROR_FILE_EXISTS = 0x50,ERROR_CANNOT_MAKE = 0x52,ERROR_FAIL_I24 = 0x53,ERROR_OUT_OF_STRUCTURES = 0x54,ERROR_ALREADY_ASSIGNED = 0x55,ERROR_INVALID_PASSWORD = 0x56,ERROR_INVALID_PARAMETER = 0x57,ERROR_NET_WRITE_FAULT = 0x58,ERROR_NO_PROC_SLOTS = 0x59,ERROR_TOO_MANY_SEMAPHORES = 0x64,ERROR_EXCL_SEM_ALREADY_OWNED = 0x65,ERROR_SEM_IS_SET = 0x66,ERROR_TOO_MANY_SEM_REQUESTS = 0x67,ERROR_INVALID_AT_INTERRUPT_TIME = 0x68,ERROR_SEM_OWNER_DIED = 0x69,ERROR_SEM_USER_LIMIT = 0x6A,ERROR_DISK_CHANGE = 0x6B,ERROR_DRIVE_LOCKED = 0x6C,ERROR_BROKEN_PIPE = 0x6D,ERROR_OPEN_FAILED = 0x6E,ERROR_BUFFER_OVERFLOW = 0x6F,ERROR_DISK_FULL = 0x70,ERROR_NO_MORE_SEARCH_HANDLES = 0x71,ERROR_INVALID_TARGET_HANDLE = 0x72,ERROR_INVALID_CATEGORY = 0x75,ERROR_INVALID_VERIFY_SWITCH = 0x76,ERROR_BAD_DRIVER_LEVEL = 0x77,ERROR_CALL_NOT_IMPLEMENTED = 0x78,ERROR_SEM_TIMEOUT = 0x79,ERROR_INSUFFICIENT_BUFFER = 0x7A,ERROR_INVALID_NAME = 0x7B,ERROR_INVALID_LEVEL = 0x7C,ERROR_NO_VOLUME_LABEL = 0x7D,ERROR_MOD_NOT_FOUND = 0x7E,ERROR_PROC_NOT_FOUND = 0x7F,ERROR_WAIT_NO_CHILDREN = 0x80,ERROR_CHILD_NOT_COMPLETE = 0x81,ERROR_DIRECT_ACCESS_HANDLE = 0x82,ERROR_NEGATIVE_SEEK = 0x83,ERROR_SEEK_ON_DEVICE = 0x84,ERROR_IS_JOIN_TARGET = 0x85,ERROR_IS_JOINED = 0x86,ERROR_IS_SUBSTED = 0x87,ERROR_NOT_JOINED = 0x88,ERROR_NOT_SUBSTED = 0x89,ERROR_JOIN_TO_JOIN = 0x8A,ERROR_SUBST_TO_SUBST = 0x8B,ERROR_JOIN_TO_SUBST = 0x8C,ERROR_SUBST_TO_JOIN = 0x8D,ERROR_BUSY_DRIVE = 0x8E,ERROR_SAME_DRIVE = 0x8F,ERROR_DIR_NOT_ROOT = 0x90,ERROR_DIR_NOT_EMPTY = 0x91,ERROR_IS_SUBST_PATH = 0x92,ERROR_IS_JOIN_PATH = 0x93,ERROR_PATH_BUSY = 0x94,ERROR_IS_SUBST_TARGET = 0x95,ERROR_SYSTEM_TRACE = 0x96,ERROR_INVALID_EVENT_COUNT = 0x97,ERROR_TOO_MANY_MUXWAITERS = 0x98,ERROR_INVALID_LIST_FORMAT = 0x99,ERROR_LABEL_TOO_LONG = 0x9A,ERROR_TOO_MANY_TCBS = 0x9B,ERROR_SIGNAL_REFUSED = 0x9C,ERROR_DISCARDED = 0x9D,ERROR_NOT_LOCKED = 0x9E,ERROR_BAD_THREADID_ADDR = 0x9F,ERROR_BAD_ARGUMENTS = 0xA0,ERROR_BAD_PATHNAME = 0xA1,ERROR_SIGNAL_PENDING = 0xA2,ERROR_MAX_THRDS_REACHED = 0xA4,ERROR_LOCK_FAILED = 0xA7,ERROR_BUSY = 0xAA,ERROR_CANCEL_VIOLATION = 0xAD,ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 0xAE,ERROR_INVALID_SEGMENT_NUMBER = 0xB4,ERROR_INVALID_ORDINAL = 0xB6,ERROR_ALREADY_EXISTS = 0xB7,ERROR_INVALID_FLAG_NUMBER = 0xBA,ERROR_SEM_NOT_FOUND = 0xBB,ERROR_INVALID_STARTING_CODESEG = 0xBC,ERROR_INVALID_STACKSEG = 0xBD,ERROR_INVALID_MODULETYPE = 0xBE,ERROR_INVALID_EXE_SIGNATURE = 0xBF,ERROR_EXE_MARKED_INVALID = 0xC0,ERROR_BAD_EXE_FORMAT = 0xC1,ERROR_ITERATED_DATA_EXCEEDS_64k = 0xC2,ERROR_INVALID_MINALLOCSIZE = 0xC3,ERROR_DYNLINK_FROM_INVALID_RING = 0xC4,ERROR_IOPL_NOT_ENABLED = 0xC5,ERROR_INVALID_SEGDPL = 0xC6,ERROR_AUTODATASEG_EXCEEDS_64k = 0xC7,ERROR_RING2SEG_MUST_BE_MOVABLE = 0xC8,ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 0xC9,ERROR_INFLOOP_IN_RELOC_CHAIN = 0xCA,ERROR_ENVVAR_NOT_FOUND = 0xCB,ERROR_NO_SIGNAL_SENT = 0xCD,ERROR_FILENAME_EXCED_RANGE = 0xCE,ERROR_RING2_STACK_IN_USE = 0xCF,ERROR_META_EXPANSION_TOO_LONG = 0xD0,ERROR_INVALID_SIGNAL_NUMBER = 0xD1,ERROR_THREAD_1_INACTIVE = 0xD2,ERROR_LOCKED = 0xD4,ERROR_TOO_MANY_MODULES = 0xD6,ERROR_NESTING_NOT_ALLOWED = 0xD7,ERROR_EXE_MACHINE_TYPE_MISMATCH = 0xD8,ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 0xD9,ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 0xDA,ERROR_BAD_PIPE = 0xE6,ERROR_PIPE_BUSY = 0xE7,ERROR_NO_DATA = 0xE8,ERROR_PIPE_NOT_CONNECTED = 0xE9,ERROR_MORE_DATA = 0xEA,ERROR_VC_DISCONNECTED = 0xF0,ERROR_INVALID_EA_NAME = 0xFE,ERROR_EA_LIST_INCONSISTENT = 0xFF,WAIT_TIMEOUT = 0x102,ERROR_NO_MORE_ITEMS = 0x103,ERROR_CANNOT_COPY = 0x10A,ERROR_DIRECTORY = 0x10B,ERROR_EAS_DIDNT_FIT = 0x113,ERROR_EA_FILE_CORRUPT = 0x114,ERROR_EA_TABLE_FULL = 0x115,ERROR_INVALID_EA_HANDLE = 0x116,ERROR_EAS_NOT_SUPPORTED = 0x11A,ERROR_NOT_OWNER = 0x120,ERROR_TOO_MANY_POSTS = 0x12A,ERROR_PARTIAL_COPY = 0x12B,ERROR_OPLOCK_NOT_GRANTED = 0x12C,ERROR_INVALID_OPLOCK_PROTOCOL = 0x12D,ERROR_DISK_TOO_FRAGMENTED = 0x12E,ERROR_DELETE_PENDING = 0x12F,ERROR_MR_MID_NOT_FOUND = 0x13D,ERROR_SCOPE_NOT_FOUND = 0x13E,ERROR_INVALID_ADDRESS = 0x1E7,ERROR_ARITHMETIC_OVERFLOW = 0x216,ERROR_PIPE_CONNECTED = 0x217,ERROR_PIPE_LISTENING = 0x218,ERROR_EA_ACCESS_DENIED = 0x3E2,ERROR_OPERATION_ABORTED = 0x3E3,ERROR_IO_INCOMPLETE = 0x3E4,ERROR_IO_PENDING = 0x3E5,ERROR_NOACCESS = 0x3E6,ERROR_SWAPERROR = 0x3E7,ERROR_STACK_OVERFLOW = 0x3E9,ERROR_INVALID_MESSAGE = 0x3EA,ERROR_CAN_NOT_COMPLETE = 0x3EB,ERROR_INVALID_FLAGS = 0x3EC,ERROR_UNRECOGNIZED_VOLUME = 0x3ED,ERROR_FILE_INVALID = 0x3EE,ERROR_FULLSCREEN_MODE = 0x3EF,ERROR_NO_TOKEN = 0x3F0,ERROR_BADDB = 0x3F1,ERROR_BADKEY = 0x3F2,ERROR_CANTOPEN = 0x3F3,ERROR_CANTREAD = 0x3F4,ERROR_CANTWRITE = 0x3F5,ERROR_REGISTRY_RECOVERED = 0x3F6,ERROR_REGISTRY_CORRUPT = 0x3F7,ERROR_REGISTRY_IO_FAILED = 0x3F8,ERROR_NOT_REGISTRY_FILE = 0x3F9,ERROR_KEY_DELETED = 0x3FA,ERROR_NO_LOG_SPACE = 0x3FB,ERROR_KEY_HAS_CHILDREN = 0x3FC,ERROR_CHILD_MUST_BE_VOLATILE = 0x3FD,ERROR_NOTIFY_ENUM_DIR = 0x3FE,ERROR_DEPENDENT_SERVICES_RUNNING = 0x41B,ERROR_INVALID_SERVICE_CONTROL = 0x41C,ERROR_SERVICE_REQUEST_TIMEOUT = 0x41D,ERROR_SERVICE_NO_THREAD = 0x41E,ERROR_SERVICE_DATABASE_LOCKED = 0x41F,ERROR_SERVICE_ALREADY_RUNNING = 0x420,ERROR_INVALID_SERVICE_ACCOUNT = 0x421,ERROR_SERVICE_DISABLED = 0x422,ERROR_CIRCULAR_DEPENDENCY = 0x423,ERROR_SERVICE_DOES_NOT_EXIST = 0x424,ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 0x425,ERROR_SERVICE_NOT_ACTIVE = 0x426,ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 0x427,ERROR_EXCEPTION_IN_SERVICE = 0x428,ERROR_DATABASE_DOES_NOT_EXIST = 0x429,ERROR_SERVICE_SPECIFIC_ERROR = 0x42A,ERROR_PROCESS_ABORTED = 0x42B,ERROR_SERVICE_DEPENDENCY_FAIL = 0x42C,ERROR_SERVICE_LOGON_FAILED = 0x42D,ERROR_SERVICE_START_HANG = 0x42E,ERROR_INVALID_SERVICE_LOCK = 0x42F,ERROR_SERVICE_MARKED_FOR_DELETE = 0x430,ERROR_SERVICE_EXISTS = 0x431,ERROR_ALREADY_RUNNING_LKG = 0x432,ERROR_SERVICE_DEPENDENCY_DELETED = 0x433,ERROR_BOOT_ALREADY_ACCEPTED = 0x434,ERROR_SERVICE_NEVER_STARTED = 0x435,ERROR_DUPLICATE_SERVICE_NAME = 0x436,ERROR_DIFFERENT_SERVICE_ACCOUNT = 0x437,ERROR_CANNOT_DETECT_DRIVER_FAILURE = 0x438,ERROR_CANNOT_DETECT_PROCESS_ABORT = 0x439,ERROR_NO_RECOVERY_PROGRAM = 0x43A,ERROR_SERVICE_NOT_IN_EXE = 0x43B,ERROR_NOT_SAFEBOOT_SERVICE = 0x43C,ERROR_END_OF_MEDIA = 0x44C,ERROR_FILEMARK_DETECTED = 0x44D,ERROR_BEGINNING_OF_MEDIA = 0x44E,ERROR_SETMARK_DETECTED = 0x44F,ERROR_NO_DATA_DETECTED = 0x450,ERROR_PARTITION_FAILURE = 0x451,ERROR_INVALID_BLOCK_LENGTH = 0x452,ERROR_DEVICE_NOT_PARTITIONED = 0x453,ERROR_UNABLE_TO_LOCK_MEDIA = 0x454,ERROR_UNABLE_TO_UNLOAD_MEDIA = 0x455,ERROR_MEDIA_CHANGED = 0x456,ERROR_BUS_RESET = 0x457,ERROR_NO_MEDIA_IN_DRIVE = 0x458,ERROR_NO_UNICODE_TRANSLATION = 0x459,ERROR_DLL_INIT_FAILED = 0x45A,ERROR_SHUTDOWN_IN_PROGRESS = 0x45B,ERROR_NO_SHUTDOWN_IN_PROGRESS = 0x45C,ERROR_IO_DEVICE = 0x45D,ERROR_SERIAL_NO_DEVICE = 0x45E,ERROR_IRQ_BUSY = 0x45F,ERROR_MORE_WRITES = 0x460,ERROR_COUNTER_TIMEOUT = 0x461,ERROR_FLOPPY_ID_MARK_NOT_FOUND = 0x462,ERROR_FLOPPY_WRONG_CYLINDER = 0x463,ERROR_FLOPPY_UNKNOWN_ERROR = 0x464,ERROR_FLOPPY_BAD_REGISTERS = 0x465,ERROR_DISK_RECALIBRATE_FAILED = 0x466,ERROR_DISK_OPERATION_FAILED = 0x467,ERROR_DISK_RESET_FAILED = 0x468,ERROR_EOM_OVERFLOW = 0x469,ERROR_NOT_ENOUGH_SERVER_MEMORY = 0x46A,ERROR_POSSIBLE_DEADLOCK = 0x46B,ERROR_MAPPED_ALIGNMENT = 0x46C,ERROR_SET_POWER_STATE_VETOED = 0x474,ERROR_SET_POWER_STATE_FAILED = 0x475,ERROR_TOO_MANY_LINKS = 0x476,ERROR_OLD_WIN_VERSION = 0x47E,ERROR_APP_WRONG_OS = 0x47F,ERROR_SINGLE_INSTANCE_APP = 0x480,ERROR_RMODE_APP = 0x481,ERROR_INVALID_DLL = 0x482,ERROR_NO_ASSOCIATION = 0x483,ERROR_DDE_FAIL = 0x484,ERROR_DLL_NOT_FOUND = 0x485,ERROR_NO_MORE_USER_HANDLES = 0x486,ERROR_MESSAGE_SYNC_ONLY = 0x487,ERROR_SOURCE_ELEMENT_EMPTY = 0x488,ERROR_DESTINATION_ELEMENT_FULL = 0x489,ERROR_ILLEGAL_ELEMENT_ADDRESS = 0x48A,ERROR_MAGAZINE_NOT_PRESENT = 0x48B,ERROR_DEVICE_REINITIALIZATION_NEEDED = 0x48C,ERROR_DEVICE_REQUIRES_CLEANING = 0x48D,ERROR_DEVICE_DOOR_OPEN = 0x48E,ERROR_DEVICE_NOT_CONNECTED = 0x48F,ERROR_NOT_FOUND = 0x490,ERROR_NO_MATCH = 0x491,ERROR_SET_NOT_FOUND = 0x492,ERROR_POINT_NOT_FOUND = 0x493,ERROR_NO_TRACKING_SERVICE = 0x494,ERROR_NO_VOLUME_ID = 0x495,ERROR_UNABLE_TO_REMOVE_REPLACED = 0x497,ERROR_UNABLE_TO_MOVE_REPLACEMENT = 0x498,ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 0x499,ERROR_JOURNAL_DELETE_IN_PROGRESS = 0x49A,ERROR_JOURNAL_NOT_ACTIVE = 0x49B,ERROR_POTENTIAL_FILE_FOUND = 0x49C,ERROR_JOURNAL_ENTRY_DELETED = 0x49D,ERROR_BAD_DEVICE = 0x4B0,ERROR_CONNECTION_UNAVAIL = 0x4B1,ERROR_DEVICE_ALREADY_REMEMBERED = 0x4B2,ERROR_NO_NET_OR_BAD_PATH = 0x4B3,ERROR_BAD_PROVIDER = 0x4B4,ERROR_CANNOT_OPEN_PROFILE = 0x4B5,ERROR_BAD_PROFILE = 0x4B6,ERROR_NOT_CONTAINER = 0x4B7,ERROR_EXTENDED_ERROR = 0x4B8,ERROR_INVALID_GROUPNAME = 0x4B9,ERROR_INVALID_COMPUTERNAME = 0x4BA,ERROR_INVALID_EVENTNAME = 0x4BB,ERROR_INVALID_DOMAINNAME = 0x4BC,ERROR_INVALID_SERVICENAME = 0x4BD,ERROR_INVALID_NETNAME = 0x4BE,ERROR_INVALID_SHARENAME = 0x4BF,ERROR_INVALID_PASSWORDNAME = 0x4C0,ERROR_INVALID_MESSAGENAME = 0x4C1,ERROR_INVALID_MESSAGEDEST = 0x4C2,ERROR_SESSION_CREDENTIAL_CONFLICT = 0x4C3,ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 0x4C4,ERROR_DUP_DOMAINNAME = 0x4C5,ERROR_NO_NETWORK = 0x4C6,ERROR_CANCELLED = 0x4C7,ERROR_USER_MAPPED_FILE = 0x4C8,ERROR_CONNECTION_REFUSED = 0x4C9,ERROR_GRACEFUL_DISCONNECT = 0x4CA,ERROR_ADDRESS_ALREADY_ASSOCIATED = 0x4CB,ERROR_ADDRESS_NOT_ASSOCIATED = 0x4CC,ERROR_CONNECTION_INVALID = 0x4CD,ERROR_CONNECTION_ACTIVE = 0x4CE,ERROR_NETWORK_UNREACHABLE = 0x4CF,ERROR_HOST_UNREACHABLE = 0x4D0,ERROR_PROTOCOL_UNREACHABLE = 0x4D1,ERROR_PORT_UNREACHABLE = 0x4D2,ERROR_REQUEST_ABORTED = 0x4D3,ERROR_CONNECTION_ABORTED = 0x4D4,ERROR_RETRY = 0x4D5,ERROR_CONNECTION_COUNT_LIMIT = 0x4D6,ERROR_LOGIN_TIME_RESTRICTION = 0x4D7,ERROR_LOGIN_WKSTA_RESTRICTION = 0x4D8,ERROR_INCORRECT_ADDRESS = 0x4D9,ERROR_ALREADY_REGISTERED = 0x4DA,ERROR_SERVICE_NOT_FOUND = 0x4DB,ERROR_NOT_AUTHENTICATED = 0x4DC,ERROR_NOT_LOGGED_ON = 0x4DD,ERROR_CONTINUE = 0x4DE,ERROR_ALREADY_INITIALIZED = 0x4DF,ERROR_NO_MORE_DEVICES = 0x4E0,ERROR_NO_SUCH_SITE = 0x4E1,ERROR_DOMAIN_CONTROLLER_EXISTS = 0x4E2,ERROR_ONLY_IF_CONNECTED = 0x4E3,ERROR_OVERRIDE_NOCHANGES = 0x4E4,ERROR_BAD_USER_PROFILE = 0x4E5,ERROR_NOT_SUPPORTED_ON_SBS = 0x4E6,ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 0x4E7,ERROR_HOST_DOWN = 0x4E8,ERROR_NON_ACCOUNT_SID = 0x4E9,ERROR_NON_DOMAIN_SID = 0x4EA,ERROR_APPHELP_BLOCK = 0x4EB,ERROR_ACCESS_DISABLED_BY_POLICY = 0x4EC,ERROR_REG_NAT_CONSUMPTION = 0x4ED,ERROR_CSCSHARE_OFFLINE = 0x4EE,ERROR_PKINIT_FAILURE = 0x4EF,ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 0x4F0,ERROR_DOWNGRADE_DETECTED = 0x4F1,ERROR_MACHINE_LOCKED = 0x4F7,ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 0x4F9,ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 0x4FA,ERROR_DRIVER_BLOCKED = 0x4FB,ERROR_INVALID_IMPORT_OF_NON_DLL = 0x4FC,ERROR_ACCESS_DISABLED_WEBBLADE = 0x4FD,ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 0x4FE,ERROR_RECOVERY_FAILURE = 0x4FF,ERROR_ALREADY_FIBER = 0x500,ERROR_ALREADY_THREAD = 0x501,ERROR_STACK_BUFFER_OVERRUN = 0x502,ERROR_PARAMETER_QUOTA_EXCEEDED = 0x503,ERROR_DEBUGGER_INACTIVE = 0x504,ERROR_DELAY_LOAD_FAILED = 0x505,ERROR_VDM_DISALLOWED = 0x506,ERROR_UNIDENTIFIED_ERROR = 0x507,ERROR_NOT_ALL_ASSIGNED = 0x514,ERROR_SOME_NOT_MAPPED = 0x515,ERROR_NO_QUOTAS_FOR_ACCOUNT = 0x516,ERROR_LOCAL_USER_SESSION_KEY = 0x517,ERROR_NULL_LM_PASSWORD = 0x518,ERROR_UNKNOWN_REVISION = 0x519,ERROR_REVISION_MISMATCH = 0x51A,ERROR_INVALID_OWNER = 0x51B,ERROR_INVALID_PRIMARY_GROUP = 0x51C,ERROR_NO_IMPERSONATION_TOKEN = 0x51D,ERROR_CANT_DISABLE_MANDATORY = 0x51E,ERROR_NO_LOGON_SERVERS = 0x51F,ERROR_NO_SUCH_LOGON_SESSION = 0x520,ERROR_NO_SUCH_PRIVILEGE = 0x521,ERROR_PRIVILEGE_NOT_HELD = 0x522,ERROR_INVALID_ACCOUNT_NAME = 0x523,ERROR_USER_EXISTS = 0x524,ERROR_NO_SUCH_USER = 0x525,ERROR_GROUP_EXISTS = 0x526,ERROR_NO_SUCH_GROUP = 0x527,ERROR_MEMBER_IN_GROUP = 0x528,ERROR_MEMBER_NOT_IN_GROUP = 0x529,ERROR_LAST_ADMIN = 0x52A,ERROR_WRONG_PASSWORD = 0x52B,ERROR_ILL_FORMED_PASSWORD = 0x52C,ERROR_PASSWORD_RESTRICTION = 0x52D,ERROR_LOGON_FAILURE = 0x52E,ERROR_ACCOUNT_RESTRICTION = 0x52F,ERROR_INVALID_LOGON_HOURS = 0x530,ERROR_INVALID_WORKSTATION = 0x531,ERROR_PASSWORD_EXPIRED = 0x532,ERROR_ACCOUNT_DISABLED = 0x533,ERROR_NONE_MAPPED = 0x534,ERROR_TOO_MANY_LUIDS_REQUESTED = 0x535,ERROR_LUIDS_EXHAUSTED = 0x536,ERROR_INVALID_SUB_AUTHORITY = 0x537,ERROR_INVALID_ACL = 0x538,ERROR_INVALID_SID = 0x539,ERROR_INVALID_SECURITY_DESCR = 0x53A,ERROR_BAD_INHERITANCE_ACL = 0x53C,ERROR_SERVER_DISABLED = 0x53D,ERROR_SERVER_NOT_DISABLED = 0x53E,ERROR_INVALID_ID_AUTHORITY = 0x53F,ERROR_ALLOTTED_SPACE_EXCEEDED = 0x540,ERROR_INVALID_GROUP_ATTRIBUTES = 0x541,ERROR_BAD_IMPERSONATION_LEVEL = 0x542,ERROR_CANT_OPEN_ANONYMOUS = 0x543,ERROR_BAD_VALIDATION_CLASS = 0x544,ERROR_BAD_TOKEN_TYPE = 0x545,ERROR_NO_SECURITY_ON_OBJECT = 0x546,ERROR_CANT_ACCESS_DOMAIN_INFO = 0x547,ERROR_INVALID_SERVER_STATE = 0x548,ERROR_INVALID_DOMAIN_STATE = 0x549,ERROR_INVALID_DOMAIN_ROLE = 0x54A,ERROR_NO_SUCH_DOMAIN = 0x54B,ERROR_DOMAIN_EXISTS = 0x54C,ERROR_DOMAIN_LIMIT_EXCEEDED = 0x54D,ERROR_INTERNAL_DB_CORRUPTION = 0x54E,ERROR_INTERNAL_ERROR = 0x54F,ERROR_GENERIC_NOT_MAPPED = 0x550,ERROR_BAD_DESCRIPTOR_FORMAT = 0x551,ERROR_NOT_LOGON_PROCESS = 0x552,ERROR_LOGON_SESSION_EXISTS = 0x553,ERROR_NO_SUCH_PACKAGE = 0x554,ERROR_BAD_LOGON_SESSION_STATE = 0x555,ERROR_LOGON_SESSION_COLLISION = 0x556,ERROR_INVALID_LOGON_TYPE = 0x557,ERROR_CANNOT_IMPERSONATE = 0x558,ERROR_RXACT_INVALID_STATE = 0x559,ERROR_RXACT_COMMIT_FAILURE = 0x55A,ERROR_SPECIAL_ACCOUNT = 0x55B,ERROR_SPECIAL_GROUP = 0x55C,ERROR_SPECIAL_USER = 0x55D,ERROR_MEMBERS_PRIMARY_GROUP = 0x55E,ERROR_TOKEN_ALREADY_IN_USE = 0x55F,ERROR_NO_SUCH_ALIAS = 0x560,ERROR_MEMBER_NOT_IN_ALIAS = 0x561,ERROR_MEMBER_IN_ALIAS = 0x562,ERROR_ALIAS_EXISTS = 0x563,ERROR_LOGON_NOT_GRANTED = 0x564,ERROR_TOO_MANY_SECRETS = 0x565,ERROR_SECRET_TOO_LONG = 0x566,ERROR_INTERNAL_DB_ERROR = 0x567,ERROR_TOO_MANY_CONTEXT_IDS = 0x568,ERROR_LOGON_TYPE_NOT_GRANTED = 0x569,ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 0x56A,ERROR_NO_SUCH_MEMBER = 0x56B,ERROR_INVALID_MEMBER = 0x56C,ERROR_TOO_MANY_SIDS = 0x56D,ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 0x56E,ERROR_NO_INHERITANCE = 0x56F,ERROR_FILE_CORRUPT = 0x570,ERROR_DISK_CORRUPT = 0x571,ERROR_NO_USER_SESSION_KEY = 0x572,ERROR_LICENSE_QUOTA_EXCEEDED = 0x573,ERROR_WRONG_TARGET_NAME = 0x574,ERROR_MUTUAL_AUTH_FAILED = 0x575,ERROR_TIME_SKEW = 0x576,ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 0x577,ERROR_INVALID_WINDOW_HANDLE = 0x578,ERROR_INVALID_MENU_HANDLE = 0x579,ERROR_INVALID_CURSOR_HANDLE = 0x57A,ERROR_INVALID_ACCEL_HANDLE = 0x57B,ERROR_INVALID_HOOK_HANDLE = 0x57C,ERROR_INVALID_DWP_HANDLE = 0x57D,ERROR_TLW_WITH_WSCHILD = 0x57E,ERROR_CANNOT_FIND_WND_CLASS = 0x57F,ERROR_WINDOW_OF_OTHER_THREAD = 0x580,ERROR_HOTKEY_ALREADY_REGISTERED = 0x581,ERROR_CLASS_ALREADY_EXISTS = 0x582,ERROR_CLASS_DOES_NOT_EXIST = 0x583,ERROR_CLASS_HAS_WINDOWS = 0x584,ERROR_INVALID_INDEX = 0x585,ERROR_INVALID_ICON_HANDLE = 0x586,ERROR_PRIVATE_DIALOG_INDEX = 0x587,ERROR_LISTBOX_ID_NOT_FOUND = 0x588,ERROR_NO_WILDCARD_CHARACTERS = 0x589,ERROR_CLIPBOARD_NOT_OPEN = 0x58A,ERROR_HOTKEY_NOT_REGISTERED = 0x58B,ERROR_WINDOW_NOT_DIALOG = 0x58C,ERROR_CONTROL_ID_NOT_FOUND = 0x58D,ERROR_INVALID_COMBOBOX_MESSAGE = 0x58E,ERROR_WINDOW_NOT_COMBOBOX = 0x58F,ERROR_INVALID_EDIT_HEIGHT = 0x590,ERROR_DC_NOT_FOUND = 0x591,ERROR_INVALID_HOOK_FILTER = 0x592,ERROR_INVALID_FILTER_PROC = 0x593,ERROR_HOOK_NEEDS_HMOD = 0x594,ERROR_GLOBAL_ONLY_HOOK = 0x595,ERROR_JOURNAL_HOOK_SET = 0x596,ERROR_HOOK_NOT_INSTALLED = 0x597,ERROR_INVALID_LB_MESSAGE = 0x598,ERROR_SETCOUNT_ON_BAD_LB = 0x599,ERROR_LB_WITHOUT_TABSTOPS = 0x59A,ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 0x59B,ERROR_CHILD_WINDOW_MENU = 0x59C,ERROR_NO_SYSTEM_MENU = 0x59D,ERROR_INVALID_MSGBOX_STYLE = 0x59E,ERROR_INVALID_SPI_VALUE = 0x59F,ERROR_SCREEN_ALREADY_LOCKED = 0x5A0,ERROR_HWNDS_HAVE_DIFF_PARENT = 0x5A1,ERROR_NOT_CHILD_WINDOW = 0x5A2,ERROR_INVALID_GW_COMMAND = 0x5A3,ERROR_INVALID_THREAD_ID = 0x5A4,ERROR_NON_MDICHILD_WINDOW = 0x5A5,ERROR_POPUP_ALREADY_ACTIVE = 0x5A6,ERROR_NO_SCROLLBARS = 0x5A7,ERROR_INVALID_SCROLLBAR_RANGE = 0x5A8,ERROR_INVALID_SHOWWIN_COMMAND = 0x5A9,ERROR_NO_SYSTEM_RESOURCES = 0x5AA,ERROR_NONPAGED_SYSTEM_RESOURCES = 0x5AB,ERROR_PAGED_SYSTEM_RESOURCES = 0x5AC,ERROR_WORKING_SET_QUOTA = 0x5AD,ERROR_PAGEFILE_QUOTA = 0x5AE,ERROR_COMMITMENT_LIMIT = 0x5AF,ERROR_MENU_ITEM_NOT_FOUND = 0x5B0,ERROR_INVALID_KEYBOARD_HANDLE = 0x5B1,ERROR_HOOK_TYPE_NOT_ALLOWED = 0x5B2,ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 0x5B3,ERROR_TIMEOUT = 0x5B4,ERROR_INVALID_MONITOR_HANDLE = 0x5B5,ERROR_EVENTLOG_FILE_CORRUPT = 0x5DC,ERROR_EVENTLOG_CANT_START = 0x5DD,ERROR_LOG_FILE_FULL = 0x5DE,ERROR_EVENTLOG_FILE_CHANGED = 0x5DF,ERROR_INSTALL_SERVICE_FAILURE = 0x641,ERROR_INSTALL_USEREXIT = 0x642,ERROR_INSTALL_FAILURE = 0x643,ERROR_INSTALL_SUSPEND = 0x644,ERROR_UNKNOWN_PRODUCT = 0x645,ERROR_UNKNOWN_FEATURE = 0x646,ERROR_UNKNOWN_COMPONENT = 0x647,ERROR_UNKNOWN_PROPERTY = 0x648,ERROR_INVALID_HANDLE_STATE = 0x649,ERROR_BAD_CONFIGURATION = 0x64A,ERROR_INDEX_ABSENT = 0x64B,ERROR_INSTALL_SOURCE_ABSENT = 0x64C,ERROR_INSTALL_PACKAGE_VERSION = 0x64D,ERROR_PRODUCT_UNINSTALLED = 0x64E,ERROR_BAD_QUERY_SYNTAX = 0x64F,ERROR_INVALID_FIELD = 0x650,ERROR_DEVICE_REMOVED = 0x651,ERROR_INSTALL_ALREADY_RUNNING = 0x652,ERROR_INSTALL_PACKAGE_OPEN_FAILED = 0x653,ERROR_INSTALL_PACKAGE_INVALID = 0x654,ERROR_INSTALL_UI_FAILURE = 0x655,ERROR_INSTALL_LOG_FAILURE = 0x656,ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 0x657,ERROR_INSTALL_TRANSFORM_FAILURE = 0x658,ERROR_INSTALL_PACKAGE_REJECTED = 0x659,ERROR_FUNCTION_NOT_CALLED = 0x65A,ERROR_FUNCTION_FAILED = 0x65B,ERROR_INVALID_TABLE = 0x65C,ERROR_DATATYPE_MISMATCH = 0x65D,ERROR_UNSUPPORTED_TYPE = 0x65E,ERROR_CREATE_FAILED = 0x65F,ERROR_INSTALL_TEMP_UNWRITABLE = 0x660,ERROR_INSTALL_PLATFORM_UNSUPPORTED = 0x661,ERROR_INSTALL_NOTUSED = 0x662,ERROR_PATCH_PACKAGE_OPEN_FAILED = 0x663,ERROR_PATCH_PACKAGE_INVALID = 0x664,ERROR_PATCH_PACKAGE_UNSUPPORTED = 0x665,ERROR_PRODUCT_VERSION = 0x666,ERROR_INVALID_COMMAND_LINE = 0x667,ERROR_INSTALL_REMOTE_DISALLOWED = 0x668,ERROR_SUCCESS_REBOOT_INITIATED = 0x669,ERROR_PATCH_TARGET_NOT_FOUND = 0x66A,ERROR_PATCH_PACKAGE_REJECTED = 0x66B,ERROR_INSTALL_TRANSFORM_REJECTED = 0x66C,ERROR_INSTALL_REMOTE_PROHIBITED = 0x66D,RPC_S_INVALID_STRING_BINDING = 0x6A4,RPC_S_WRONG_KIND_OF_BINDING = 0x6A5,RPC_S_INVALID_BINDING = 0x6A6,RPC_S_PROTSEQ_NOT_SUPPORTED = 0x6A7,RPC_S_INVALID_RPC_PROTSEQ = 0x6A8,RPC_S_INVALID_STRING_UUID = 0x6A9,RPC_S_INVALID_ENDPOINT_FORMAT = 0x6AA,RPC_S_INVALID_NET_ADDR = 0x6AB,RPC_S_NO_ENDPOINT_FOUND = 0x6AC,RPC_S_INVALID_TIMEOUT = 0x6AD,RPC_S_OBJECT_NOT_FOUND = 0x6AE,RPC_S_ALREADY_REGISTERED = 0x6AF,RPC_S_TYPE_ALREADY_REGISTERED = 0x6B0,RPC_S_ALREADY_LISTENING = 0x6B1,RPC_S_NO_PROTSEQS_REGISTERED = 0x6B2,RPC_S_NOT_LISTENING = 0x6B3,RPC_S_UNKNOWN_MGR_TYPE = 0x6B4,RPC_S_UNKNOWN_IF = 0x6B5,RPC_S_NO_BINDINGS = 0x6B6,RPC_S_NO_PROTSEQS = 0x6B7,RPC_S_CANT_CREATE_ENDPOINT = 0x6B8,RPC_S_OUT_OF_RESOURCES = 0x6B9,RPC_S_SERVER_UNAVAILABLE = 0x6BA,RPC_S_SERVER_TOO_BUSY = 0x6BB,RPC_S_INVALID_NETWORK_OPTIONS = 0x6BC,RPC_S_NO_CALL_ACTIVE = 0x6BD,RPC_S_CALL_FAILED = 0x6BE,RPC_S_CALL_FAILED_DNE = 0x6BF,RPC_S_PROTOCOL_ERROR = 0x6C0,RPC_S_UNSUPPORTED_TRANS_SYN = 0x6C2,RPC_S_UNSUPPORTED_TYPE = 0x6C4,RPC_S_INVALID_TAG = 0x6C5,RPC_S_INVALID_BOUND = 0x6C6,RPC_S_NO_ENTRY_NAME = 0x6C7,RPC_S_INVALID_NAME_SYNTAX = 0x6C8,RPC_S_UNSUPPORTED_NAME_SYNTAX = 0x6C9,RPC_S_UUID_NO_ADDRESS = 0x6CB,RPC_S_DUPLICATE_ENDPOINT = 0x6CC,RPC_S_UNKNOWN_AUTHN_TYPE = 0x6CD,RPC_S_MAX_CALLS_TOO_SMALL = 0x6CE,RPC_S_STRING_TOO_LONG = 0x6CF,RPC_S_PROTSEQ_NOT_FOUND = 0x6D0,RPC_S_PROCNUM_OUT_OF_RANGE = 0x6D1,RPC_S_BINDING_HAS_NO_AUTH = 0x6D2,RPC_S_UNKNOWN_AUTHN_SERVICE = 0x6D3,RPC_S_UNKNOWN_AUTHN_LEVEL = 0x6D4,RPC_S_INVALID_AUTH_IDENTITY = 0x6D5,RPC_S_UNKNOWN_AUTHZ_SERVICE = 0x6D6,EPT_S_INVALID_ENTRY = 0x6D7,EPT_S_CANT_PERFORM_OP = 0x6D8,EPT_S_NOT_REGISTERED = 0x6D9,RPC_S_NOTHING_TO_EXPORT = 0x6DA,RPC_S_INCOMPLETE_NAME = 0x6DB,RPC_S_INVALID_VERS_OPTION = 0x6DC,RPC_S_NO_MORE_MEMBERS = 0x6DD,RPC_S_NOT_ALL_OBJS_UNEXPORTED = 0x6DE,RPC_S_INTERFACE_NOT_FOUND = 0x6DF,RPC_S_ENTRY_ALREADY_EXISTS = 0x6E0,RPC_S_ENTRY_NOT_FOUND = 0x6E1,RPC_S_NAME_SERVICE_UNAVAILABLE = 0x6E2,RPC_S_INVALID_NAF_ID = 0x6E3,RPC_S_CANNOT_SUPPORT = 0x6E4,RPC_S_NO_CONTEXT_AVAILABLE = 0x6E5,RPC_S_INTERNAL_ERROR = 0x6E6,RPC_S_ZERO_DIVIDE = 0x6E7,RPC_S_ADDRESS_ERROR = 0x6E8,RPC_S_FP_DIV_ZERO = 0x6E9,RPC_S_FP_UNDERFLOW = 0x6EA,RPC_S_FP_OVERFLOW = 0x6EB,RPC_X_NO_MORE_ENTRIES = 0x6EC,RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 0x6ED,RPC_X_SS_CHAR_TRANS_SHORT_FILE = 0x6EE,RPC_X_SS_IN_NULL_CONTEXT = 0x6EF,RPC_X_SS_CONTEXT_DAMAGED = 0x6F1,RPC_X_SS_HANDLES_MISMATCH = 0x6F2,RPC_X_SS_CANNOT_GET_CALL_HANDLE = 0x6F3,RPC_X_NULL_REF_POINTER = 0x6F4,RPC_X_ENUM_VALUE_OUT_OF_RANGE = 0x6F5,RPC_X_BYTE_COUNT_TOO_SMALL = 0x6F6,RPC_X_BAD_STUB_DATA = 0x6F7,ERROR_INVALID_USER_BUFFER = 0x6F8,ERROR_UNRECOGNIZED_MEDIA = 0x6F9,ERROR_NO_TRUST_LSA_SECRET = 0x6FA,ERROR_NO_TRUST_SAM_ACCOUNT = 0x6FB,ERROR_TRUSTED_DOMAIN_FAILURE = 0x6FC,ERROR_TRUSTED_RELATIONSHIP_FAILURE = 0x6FD,ERROR_TRUST_FAILURE = 0x6FE,RPC_S_CALL_IN_PROGRESS = 0x6FF,ERROR_NETLOGON_NOT_STARTED = 0x700,ERROR_ACCOUNT_EXPIRED = 0x701,ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 0x702,ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 0x703,ERROR_UNKNOWN_PORT = 0x704,ERROR_UNKNOWN_PRINTER_DRIVER = 0x705,ERROR_UNKNOWN_PRINTPROCESSOR = 0x706,ERROR_INVALID_SEPARATOR_FILE = 0x707,ERROR_INVALID_PRIORITY = 0x708,ERROR_INVALID_PRINTER_NAME = 0x709,ERROR_PRINTER_ALREADY_EXISTS = 0x70A,ERROR_INVALID_PRINTER_COMMAND = 0x70B,ERROR_INVALID_DATATYPE = 0x70C,ERROR_INVALID_ENVIRONMENT = 0x70D,RPC_S_NO_MORE_BINDINGS = 0x70E,ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 0x70F,ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 0x710,ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 0x711,ERROR_DOMAIN_TRUST_INCONSISTENT = 0x712,ERROR_SERVER_HAS_OPEN_HANDLES = 0x713,ERROR_RESOURCE_DATA_NOT_FOUND = 0x714,ERROR_RESOURCE_TYPE_NOT_FOUND = 0x715,ERROR_RESOURCE_NAME_NOT_FOUND = 0x716,ERROR_RESOURCE_LANG_NOT_FOUND = 0x717,ERROR_NOT_ENOUGH_QUOTA = 0x718,RPC_S_NO_INTERFACES = 0x719,RPC_S_CALL_CANCELLED = 0x71A,RPC_S_BINDING_INCOMPLETE = 0x71B,RPC_S_COMM_FAILURE = 0x71C,RPC_S_UNSUPPORTED_AUTHN_LEVEL = 0x71D,RPC_S_NO_PRINC_NAME = 0x71E,RPC_S_NOT_RPC_ERROR = 0x71F,RPC_S_UUID_LOCAL_ONLY = 0x720,RPC_S_SEC_PKG_ERROR = 0x721,RPC_S_NOT_CANCELLED = 0x722,RPC_X_INVALID_ES_ACTION = 0x723,RPC_X_WRONG_ES_VERSION = 0x724,RPC_X_WRONG_STUB_VERSION = 0x725,RPC_X_INVALID_PIPE_OBJECT = 0x726,RPC_X_WRONG_PIPE_ORDER = 0x727,RPC_X_WRONG_PIPE_VERSION = 0x728,RPC_S_GROUP_MEMBER_NOT_FOUND = 0x76A,EPT_S_CANT_CREATE = 0x76B,RPC_S_INVALID_OBJECT = 0x76C,ERROR_INVALID_TIME = 0x76D,ERROR_INVALID_FORM_NAME = 0x76E,ERROR_INVALID_FORM_SIZE = 0x76F,ERROR_ALREADY_WAITING = 0x770,ERROR_PRINTER_DELETED = 0x771,ERROR_INVALID_PRINTER_STATE = 0x772,ERROR_PASSWORD_MUST_CHANGE = 0x773,ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 0x774,ERROR_ACCOUNT_LOCKED_OUT = 0x775,OR_INVALID_OXID = 0x776,OR_INVALID_OID = 0x777,OR_INVALID_SET = 0x778,RPC_S_SEND_INCOMPLETE = 0x779,RPC_S_INVALID_ASYNC_HANDLE = 0x77A,RPC_S_INVALID_ASYNC_CALL = 0x77B,RPC_X_PIPE_CLOSED = 0x77C,RPC_X_PIPE_DISCIPLINE_ERROR = 0x77D,RPC_X_PIPE_EMPTY = 0x77E,ERROR_NO_SITENAME = 0x77F,ERROR_CANT_ACCESS_FILE = 0x780,ERROR_CANT_RESOLVE_FILENAME = 0x781,RPC_S_ENTRY_TYPE_MISMATCH = 0x782,RPC_S_NOT_ALL_OBJS_EXPORTED = 0x783,RPC_S_INTERFACE_NOT_EXPORTED = 0x784,RPC_S_PROFILE_NOT_ADDED = 0x785,RPC_S_PRF_ELT_NOT_ADDED = 0x786,RPC_S_PRF_ELT_NOT_REMOVED = 0x787,RPC_S_GRP_ELT_NOT_ADDED = 0x788,RPC_S_GRP_ELT_NOT_REMOVED = 0x789,ERROR_KM_DRIVER_BLOCKED = 0x78A,ERROR_CONTEXT_EXPIRED = 0x78B,ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 0x78C,ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 0x78D,ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 0x78E,ERROR_AUTHENTICATION_FIREWALL_FAILED = 0x78F,ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 0x790,ERROR_INVALID_PIXEL_FORMAT = 0x7D0,ERROR_BAD_DRIVER = 0x7D1,ERROR_INVALID_WINDOW_STYLE = 0x7D2,ERROR_METAFILE_NOT_SUPPORTED = 0x7D3,ERROR_TRANSFORM_NOT_SUPPORTED = 0x7D4,ERROR_CLIPPING_NOT_SUPPORTED = 0x7D5,ERROR_INVALID_CMM = 0x7DA,ERROR_INVALID_PROFILE = 0x7DB,ERROR_TAG_NOT_FOUND = 0x7DC,ERROR_TAG_NOT_PRESENT = 0x7DD,ERROR_DUPLICATE_TAG = 0x7DE,ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 0x7DF,ERROR_PROFILE_NOT_FOUND = 0x7E0,ERROR_INVALID_COLORSPACE = 0x7E1,ERROR_ICM_NOT_ENABLED = 0x7E2,ERROR_DELETING_ICM_XFORM = 0x7E3,ERROR_INVALID_TRANSFORM = 0x7E4,ERROR_COLORSPACE_MISMATCH = 0x7E5,ERROR_INVALID_COLORINDEX = 0x7E6,ERROR_CONNECTED_OTHER_PASSWORD = 0x83C,ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 0x83D,ERROR_BAD_USERNAME = 0x89A,ERROR_NOT_CONNECTED = 0x8CA,ERROR_OPEN_FILES = 0x961,ERROR_ACTIVE_CONNECTIONS = 0x962,ERROR_DEVICE_IN_USE = 0x964,ERROR_UNKNOWN_PRINT_MONITOR = 0xBB8,ERROR_PRINTER_DRIVER_IN_USE = 0xBB9,ERROR_SPOOL_FILE_NOT_FOUND = 0xBBA,ERROR_SPL_NO_STARTDOC = 0xBBB,ERROR_SPL_NO_ADDJOB = 0xBBC,ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 0xBBD,ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 0xBBE,ERROR_INVALID_PRINT_MONITOR = 0xBBF,ERROR_PRINT_MONITOR_IN_USE = 0xBC0,ERROR_PRINTER_HAS_JOBS_QUEUED = 0xBC1,ERROR_SUCCESS_REBOOT_REQUIRED = 0xBC2,ERROR_SUCCESS_RESTART_REQUIRED = 0xBC3,ERROR_PRINTER_NOT_FOUND = 0xBC4,ERROR_PRINTER_DRIVER_WARNED = 0xBC5,ERROR_PRINTER_DRIVER_BLOCKED = 0xBC6,ERROR_WINS_INTERNAL = 0xFA0,ERROR_CAN_NOT_DEL_LOCAL_WINS = 0xFA1,ERROR_STATIC_INIT = 0xFA2,ERROR_INC_BACKUP = 0xFA3,ERROR_FULL_BACKUP = 0xFA4,ERROR_REC_NON_EXISTENT = 0xFA5,ERROR_RPL_NOT_ALLOWED = 0xFA6,ERROR_DHCP_ADDRESS_CONFLICT = 0x1004,ERROR_WMI_GUID_NOT_FOUND = 0x1068,ERROR_WMI_INSTANCE_NOT_FOUND = 0x1069,ERROR_WMI_ITEMID_NOT_FOUND = 0x106A,ERROR_WMI_TRY_AGAIN = 0x106B,ERROR_WMI_DP_NOT_FOUND = 0x106C,ERROR_WMI_UNRESOLVED_INSTANCE_REF = 0x106D,ERROR_WMI_ALREADY_ENABLED = 0x106E,ERROR_WMI_GUID_DISCONNECTED = 0x106F,ERROR_WMI_SERVER_UNAVAILABLE = 0x1070,ERROR_WMI_DP_FAILED = 0x1071,ERROR_WMI_INVALID_MOF = 0x1072,ERROR_WMI_INVALID_REGINFO = 0x1073,ERROR_WMI_ALREADY_DISABLED = 0x1074,ERROR_WMI_READ_ONLY = 0x1075,ERROR_WMI_SET_FAILURE = 0x1076,ERROR_INVALID_MEDIA = 0x10CC,ERROR_INVALID_LIBRARY = 0x10CD,ERROR_INVALID_MEDIA_POOL = 0x10CE,ERROR_DRIVE_MEDIA_MISMATCH = 0x10CF,ERROR_MEDIA_OFFLINE = 0x10D0,ERROR_LIBRARY_OFFLINE = 0x10D1,ERROR_EMPTY = 0x10D2,ERROR_NOT_EMPTY = 0x10D3,ERROR_MEDIA_UNAVAILABLE = 0x10D4,ERROR_RESOURCE_DISABLED = 0x10D5,ERROR_INVALID_CLEANER = 0x10D6,ERROR_UNABLE_TO_CLEAN = 0x10D7,ERROR_OBJECT_NOT_FOUND = 0x10D8,ERROR_DATABASE_FAILURE = 0x10D9,ERROR_DATABASE_FULL = 0x10DA,ERROR_MEDIA_INCOMPATIBLE = 0x10DB,ERROR_RESOURCE_NOT_PRESENT = 0x10DC,ERROR_INVALID_OPERATION = 0x10DD,ERROR_MEDIA_NOT_AVAILABLE = 0x10DE,ERROR_DEVICE_NOT_AVAILABLE = 0x10DF,ERROR_REQUEST_REFUSED = 0x10E0,ERROR_INVALID_DRIVE_OBJECT = 0x10E1,ERROR_LIBRARY_FULL = 0x10E2,ERROR_MEDIUM_NOT_ACCESSIBLE = 0x10E3,ERROR_UNABLE_TO_LOAD_MEDIUM = 0x10E4,ERROR_UNABLE_TO_INVENTORY_DRIVE = 0x10E5,ERROR_UNABLE_TO_INVENTORY_SLOT = 0x10E6,ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 0x10E7,ERROR_TRANSPORT_FULL = 0x10E8,ERROR_CONTROLLING_IEPORT = 0x10E9,ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 0x10EA,ERROR_CLEANER_SLOT_SET = 0x10EB,ERROR_CLEANER_SLOT_NOT_SET = 0x10EC,ERROR_CLEANER_CARTRIDGE_SPENT = 0x10ED,ERROR_UNEXPECTED_OMID = 0x10EE,ERROR_CANT_DELETE_LAST_ITEM = 0x10EF,ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 0x10F0,ERROR_VOLUME_CONTAINS_SYS_FILES = 0x10F1,ERROR_INDIGENOUS_TYPE = 0x10F2,ERROR_NO_SUPPORTING_DRIVES = 0x10F3,ERROR_CLEANER_CARTRIDGE_INSTALLED = 0x10F4,ERROR_IEPORT_FULL = 0x10F5,ERROR_FILE_OFFLINE = 0x10FE,ERROR_REMOTE_STORAGE_NOT_ACTIVE = 0x10FF,ERROR_REMOTE_STORAGE_MEDIA_ERROR = 0x1100,ERROR_NOT_A_REPARSE_POINT = 0x1126,ERROR_REPARSE_ATTRIBUTE_CONFLICT = 0x1127,ERROR_INVALID_REPARSE_DATA = 0x1128,ERROR_REPARSE_TAG_INVALID = 0x1129,ERROR_REPARSE_TAG_MISMATCH = 0x112A,ERROR_VOLUME_NOT_SIS_ENABLED = 0x1194,ERROR_DEPENDENT_RESOURCE_EXISTS = 0x1389,ERROR_DEPENDENCY_NOT_FOUND = 0x138A,ERROR_DEPENDENCY_ALREADY_EXISTS = 0x138B,ERROR_RESOURCE_NOT_ONLINE = 0x138C,ERROR_HOST_NODE_NOT_AVAILABLE = 0x138D,ERROR_RESOURCE_NOT_AVAILABLE = 0x138E,ERROR_RESOURCE_NOT_FOUND = 0x138F,ERROR_SHUTDOWN_CLUSTER = 0x1390,ERROR_CANT_EVICT_ACTIVE_NODE = 0x1391,ERROR_OBJECT_ALREADY_EXISTS = 0x1392,ERROR_OBJECT_IN_LIST = 0x1393,ERROR_GROUP_NOT_AVAILABLE = 0x1394,ERROR_GROUP_NOT_FOUND = 0x1395,ERROR_GROUP_NOT_ONLINE = 0x1396,ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 0x1397,ERROR_HOST_NODE_NOT_GROUP_OWNER = 0x1398,ERROR_RESMON_CREATE_FAILED = 0x1399,ERROR_RESMON_ONLINE_FAILED = 0x139A,ERROR_RESOURCE_ONLINE = 0x139B,ERROR_QUORUM_RESOURCE = 0x139C,ERROR_NOT_QUORUM_CAPABLE = 0x139D,ERROR_CLUSTER_SHUTTING_DOWN = 0x139E,ERROR_INVALID_STATE = 0x139F,ERROR_RESOURCE_PROPERTIES_STORED = 0x13A0,ERROR_NOT_QUORUM_CLASS = 0x13A1,ERROR_CORE_RESOURCE = 0x13A2,ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 0x13A3,ERROR_QUORUMLOG_OPEN_FAILED = 0x13A4,ERROR_CLUSTERLOG_CORRUPT = 0x13A5,ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 0x13A6,ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 0x13A7,ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 0x13A8,ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 0x13A9,ERROR_QUORUM_OWNER_ALIVE = 0x13AA,ERROR_NETWORK_NOT_AVAILABLE = 0x13AB,ERROR_NODE_NOT_AVAILABLE = 0x13AC,ERROR_ALL_NODES_NOT_AVAILABLE = 0x13AD,ERROR_RESOURCE_FAILED = 0x13AE,ERROR_CLUSTER_INVALID_NODE = 0x13AF,ERROR_CLUSTER_NODE_EXISTS = 0x13B0,ERROR_CLUSTER_JOIN_IN_PROGRESS = 0x13B1,ERROR_CLUSTER_NODE_NOT_FOUND = 0x13B2,ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 0x13B3,ERROR_CLUSTER_NETWORK_EXISTS = 0x13B4,ERROR_CLUSTER_NETWORK_NOT_FOUND = 0x13B5,ERROR_CLUSTER_NETINTERFACE_EXISTS = 0x13B6,ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 0x13B7,ERROR_CLUSTER_INVALID_REQUEST = 0x13B8,ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 0x13B9,ERROR_CLUSTER_NODE_DOWN = 0x13BA,ERROR_CLUSTER_NODE_UNREACHABLE = 0x13BB,ERROR_CLUSTER_NODE_NOT_MEMBER = 0x13BC,ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 0x13BD,ERROR_CLUSTER_INVALID_NETWORK = 0x13BE,ERROR_CLUSTER_NODE_UP = 0x13C0,ERROR_CLUSTER_IPADDR_IN_USE = 0x13C1,ERROR_CLUSTER_NODE_NOT_PAUSED = 0x13C2,ERROR_CLUSTER_NO_SECURITY_CONTEXT = 0x13C3,ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 0x13C4,ERROR_CLUSTER_NODE_ALREADY_UP = 0x13C5,ERROR_CLUSTER_NODE_ALREADY_DOWN = 0x13C6,ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 0x13C7,ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 0x13C8,ERROR_CLUSTER_NODE_ALREADY_MEMBER = 0x13C9,ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 0x13CA,ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 0x13CB,ERROR_INVALID_OPERATION_ON_QUORUM = 0x13CC,ERROR_DEPENDENCY_NOT_ALLOWED = 0x13CD,ERROR_CLUSTER_NODE_PAUSED = 0x13CE,ERROR_NODE_CANT_HOST_RESOURCE = 0x13CF,ERROR_CLUSTER_NODE_NOT_READY = 0x13D0,ERROR_CLUSTER_NODE_SHUTTING_DOWN = 0x13D1,ERROR_CLUSTER_JOIN_ABORTED = 0x13D2,ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 0x13D3,ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 0x13D4,ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 0x13D5,ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 0x13D6,ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 0x13D7,ERROR_CLUSTER_RESNAME_NOT_FOUND = 0x13D8,ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 0x13D9,ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 0x13DA,ERROR_CLUSTER_DATABASE_SEQMISMATCH = 0x13DB,ERROR_RESMON_INVALID_STATE = 0x13DC,ERROR_CLUSTER_GUM_NOT_LOCKER = 0x13DD,ERROR_QUORUM_DISK_NOT_FOUND = 0x13DE,ERROR_DATABASE_BACKUP_CORRUPT = 0x13DF,ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 0x13E0,ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 0x13E1,ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 0x1702,ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 0x1703,ERROR_CLUSTER_MEMBERSHIP_HALT = 0x1704,ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 0x1705,ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 0x1706,ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 0x1707,ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 0x1708,ERROR_CLUSTER_PARAMETER_MISMATCH = 0x1709,ERROR_NODE_CANNOT_BE_CLUSTERED = 0x170A,ERROR_CLUSTER_WRONG_OS_VERSION = 0x170B,ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 0x170C,ERROR_CLUSCFG_ALREADY_COMMITTED = 0x170D,ERROR_CLUSCFG_ROLLBACK_FAILED = 0x170E,ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 0x170F,ERROR_CLUSTER_OLD_VERSION = 0x1710,ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 0x1711,ERROR_ENCRYPTION_FAILED = 0x1770,ERROR_DECRYPTION_FAILED = 0x1771,ERROR_FILE_ENCRYPTED = 0x1772,ERROR_NO_RECOVERY_POLICY = 0x1773,ERROR_NO_EFS = 0x1774,ERROR_WRONG_EFS = 0x1775,ERROR_NO_USER_KEYS = 0x1776,ERROR_FILE_NOT_ENCRYPTED = 0x1777,ERROR_NOT_EXPORT_FORMAT = 0x1778,ERROR_FILE_READ_ONLY = 0x1779,ERROR_DIR_EFS_DISALLOWED = 0x177A,ERROR_EFS_SERVER_NOT_TRUSTED = 0x177B,ERROR_BAD_RECOVERY_POLICY = 0x177C,ERROR_EFS_ALG_BLOB_TOO_BIG = 0x177D,ERROR_VOLUME_NOT_SUPPORT_EFS = 0x177E,ERROR_EFS_DISABLED = 0x177F,ERROR_EFS_VERSION_NOT_SUPPORT = 0x1780,ERROR_NO_BROWSER_SERVERS_FOUND = 0x17E6,SCHED_E_SERVICE_NOT_LOCALSYSTEM = 0x1838,ERROR_CTX_WINSTATION_NAME_INVALID = 0x1B59,ERROR_CTX_INVALID_PD = 0x1B5A,ERROR_CTX_PD_NOT_FOUND = 0x1B5B,ERROR_CTX_WD_NOT_FOUND = 0x1B5C,ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 0x1B5D,ERROR_CTX_SERVICE_NAME_COLLISION = 0x1B5E,ERROR_CTX_CLOSE_PENDING = 0x1B5F,ERROR_CTX_NO_OUTBUF = 0x1B60,ERROR_CTX_MODEM_INF_NOT_FOUND = 0x1B61,ERROR_CTX_INVALID_MODEMNAME = 0x1B62,ERROR_CTX_MODEM_RESPONSE_ERROR = 0x1B63,ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 0x1B64,ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 0x1B65,ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 0x1B66,ERROR_CTX_MODEM_RESPONSE_BUSY = 0x1B67,ERROR_CTX_MODEM_RESPONSE_VOICE = 0x1B68,ERROR_CTX_TD_ERROR = 0x1B69,ERROR_CTX_WINSTATION_NOT_FOUND = 0x1B6E,ERROR_CTX_WINSTATION_ALREADY_EXISTS = 0x1B6F,ERROR_CTX_WINSTATION_BUSY = 0x1B70,ERROR_CTX_BAD_VIDEO_MODE = 0x1B71,ERROR_CTX_GRAPHICS_INVALID = 0x1B7B,ERROR_CTX_LOGON_DISABLED = 0x1B7D,ERROR_CTX_NOT_CONSOLE = 0x1B7E,ERROR_CTX_CLIENT_QUERY_TIMEOUT = 0x1B80,ERROR_CTX_CONSOLE_DISCONNECT = 0x1B81,ERROR_CTX_CONSOLE_CONNECT = 0x1B82,ERROR_CTX_SHADOW_DENIED = 0x1B84,ERROR_CTX_WINSTATION_ACCESS_DENIED = 0x1B85,ERROR_CTX_INVALID_WD = 0x1B89,ERROR_CTX_SHADOW_INVALID = 0x1B8A,ERROR_CTX_SHADOW_DISABLED = 0x1B8B,ERROR_CTX_CLIENT_LICENSE_IN_USE = 0x1B8C,ERROR_CTX_CLIENT_LICENSE_NOT_SET = 0x1B8D,ERROR_CTX_LICENSE_NOT_AVAILABLE = 0x1B8E,ERROR_CTX_LICENSE_CLIENT_INVALID = 0x1B8F,ERROR_CTX_LICENSE_EXPIRED = 0x1B90,ERROR_CTX_SHADOW_NOT_RUNNING = 0x1B91,ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 0x1B92,ERROR_ACTIVATION_COUNT_EXCEEDED = 0x1B93,FRS_ERR_INVALID_API_SEQUENCE = 0x1F41,FRS_ERR_STARTING_SERVICE = 0x1F42,FRS_ERR_STOPPING_SERVICE = 0x1F43,FRS_ERR_INTERNAL_API = 0x1F44,FRS_ERR_INTERNAL = 0x1F45,FRS_ERR_SERVICE_COMM = 0x1F46,FRS_ERR_INSUFFICIENT_PRIV = 0x1F47,FRS_ERR_AUTHENTICATION = 0x1F48,FRS_ERR_PARENT_INSUFFICIENT_PRIV = 0x1F49,FRS_ERR_PARENT_AUTHENTICATION = 0x1F4A,FRS_ERR_CHILD_TO_PARENT_COMM = 0x1F4B,FRS_ERR_PARENT_TO_CHILD_COMM = 0x1F4C,FRS_ERR_SYSVOL_POPULATE = 0x1F4D,FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 0x1F4E,FRS_ERR_SYSVOL_IS_BUSY = 0x1F4F,FRS_ERR_SYSVOL_DEMOTE = 0x1F50,FRS_ERR_INVALID_SERVICE_PARAMETER = 0x1F51,DS_S_SUCCESS = 0x0,ERROR_DS_NOT_INSTALLED = 0x2008,ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 0x2009,ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 0x200A,ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 0x200B,ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 0x200C,ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 0x200D,ERROR_DS_BUSY = 0x200E,ERROR_DS_UNAVAILABLE = 0x200F,ERROR_DS_NO_RIDS_ALLOCATED = 0x2010,ERROR_DS_NO_MORE_RIDS = 0x2011,ERROR_DS_INCORRECT_ROLE_OWNER = 0x2012,ERROR_DS_RIDMGR_INIT_ERROR = 0x2013,ERROR_DS_OBJ_CLASS_VIOLATION = 0x2014,ERROR_DS_CANT_ON_NON_LEAF = 0x2015,ERROR_DS_CANT_ON_RDN = 0x2016,ERROR_DS_CANT_MOD_OBJ_CLASS = 0x2017,ERROR_DS_CROSS_DOM_MOVE_ERROR = 0x2018,ERROR_DS_GC_NOT_AVAILABLE = 0x2019,ERROR_SHARED_POLICY = 0x201A,ERROR_POLICY_OBJECT_NOT_FOUND = 0x201B,ERROR_POLICY_ONLY_IN_DS = 0x201C,ERROR_PROMOTION_ACTIVE = 0x201D,ERROR_NO_PROMOTION_ACTIVE = 0x201E,ERROR_DS_OPERATIONS_ERROR = 0x2020,ERROR_DS_PROTOCOL_ERROR = 0x2021,ERROR_DS_TIMELIMIT_EXCEEDED = 0x2022,ERROR_DS_SIZELIMIT_EXCEEDED = 0x2023,ERROR_DS_ADMIN_LIMIT_EXCEEDED = 0x2024,ERROR_DS_COMPARE_FALSE = 0x2025,ERROR_DS_COMPARE_TRUE = 0x2026,ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 0x2027,ERROR_DS_STRONG_AUTH_REQUIRED = 0x2028,ERROR_DS_INAPPROPRIATE_AUTH = 0x2029,ERROR_DS_AUTH_UNKNOWN = 0x202A,ERROR_DS_REFERRAL = 0x202B,ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 0x202C,ERROR_DS_CONFIDENTIALITY_REQUIRED = 0x202D,ERROR_DS_INAPPROPRIATE_MATCHING = 0x202E,ERROR_DS_CONSTRAINT_VIOLATION = 0x202F,ERROR_DS_NO_SUCH_OBJECT = 0x2030,ERROR_DS_ALIAS_PROBLEM = 0x2031,ERROR_DS_INVALID_DN_SYNTAX = 0x2032,ERROR_DS_IS_LEAF = 0x2033,ERROR_DS_ALIAS_DEREF_PROBLEM = 0x2034,ERROR_DS_UNWILLING_TO_PERFORM = 0x2035,ERROR_DS_LOOP_DETECT = 0x2036,ERROR_DS_NAMING_VIOLATION = 0x2037,ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 0x2038,ERROR_DS_AFFECTS_MULTIPLE_DSAS = 0x2039,ERROR_DS_SERVER_DOWN = 0x203A,ERROR_DS_LOCAL_ERROR = 0x203B,ERROR_DS_ENCODING_ERROR = 0x203C,ERROR_DS_DECODING_ERROR = 0x203D,ERROR_DS_FILTER_UNKNOWN = 0x203E,ERROR_DS_PARAM_ERROR = 0x203F,ERROR_DS_NOT_SUPPORTED = 0x2040,ERROR_DS_NO_RESULTS_RETURNED = 0x2041,ERROR_DS_CONTROL_NOT_FOUND = 0x2042,ERROR_DS_CLIENT_LOOP = 0x2043,ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 0x2044,ERROR_DS_SORT_CONTROL_MISSING = 0x2045,ERROR_DS_OFFSET_RANGE_ERROR = 0x2046,ERROR_DS_ROOT_MUST_BE_NC = 0x206D,ERROR_DS_ADD_REPLICA_INHIBITED = 0x206E,ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 0x206F,ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 0x2070,ERROR_DS_OBJ_STRING_NAME_EXISTS = 0x2071,ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 0x2072,ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 0x2073,ERROR_DS_NO_REQUESTED_ATTS_FOUND = 0x2074,ERROR_DS_USER_BUFFER_TO_SMALL = 0x2075,ERROR_DS_ATT_IS_NOT_ON_OBJ = 0x2076,ERROR_DS_ILLEGAL_MOD_OPERATION = 0x2077,ERROR_DS_OBJ_TOO_LARGE = 0x2078,ERROR_DS_BAD_INSTANCE_TYPE = 0x2079,ERROR_DS_MASTERDSA_REQUIRED = 0x207A,ERROR_DS_OBJECT_CLASS_REQUIRED = 0x207B,ERROR_DS_MISSING_REQUIRED_ATT = 0x207C,ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 0x207D,ERROR_DS_ATT_ALREADY_EXISTS = 0x207E,ERROR_DS_CANT_ADD_ATT_VALUES = 0x2080,ERROR_DS_SINGLE_VALUE_CONSTRAINT = 0x2081,ERROR_DS_RANGE_CONSTRAINT = 0x2082,ERROR_DS_ATT_VAL_ALREADY_EXISTS = 0x2083,ERROR_DS_CANT_REM_MISSING_ATT = 0x2084,ERROR_DS_CANT_REM_MISSING_ATT_VAL = 0x2085,ERROR_DS_ROOT_CANT_BE_SUBREF = 0x2086,ERROR_DS_NO_CHAINING = 0x2087,ERROR_DS_NO_CHAINED_EVAL = 0x2088,ERROR_DS_NO_PARENT_OBJECT = 0x2089,ERROR_DS_PARENT_IS_AN_ALIAS = 0x208A,ERROR_DS_CANT_MIX_MASTER_AND_REPS = 0x208B,ERROR_DS_CHILDREN_EXIST = 0x208C,ERROR_DS_OBJ_NOT_FOUND = 0x208D,ERROR_DS_ALIASED_OBJ_MISSING = 0x208E,ERROR_DS_BAD_NAME_SYNTAX = 0x208F,ERROR_DS_ALIAS_POINTS_TO_ALIAS = 0x2090,ERROR_DS_CANT_DEREF_ALIAS = 0x2091,ERROR_DS_OUT_OF_SCOPE = 0x2092,ERROR_DS_OBJECT_BEING_REMOVED = 0x2093,ERROR_DS_CANT_DELETE_DSA_OBJ = 0x2094,ERROR_DS_GENERIC_ERROR = 0x2095,ERROR_DS_DSA_MUST_BE_INT_MASTER = 0x2096,ERROR_DS_CLASS_NOT_DSA = 0x2097,ERROR_DS_INSUFF_ACCESS_RIGHTS = 0x2098,ERROR_DS_ILLEGAL_SUPERIOR = 0x2099,ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 0x209A,ERROR_DS_NAME_TOO_MANY_PARTS = 0x209B,ERROR_DS_NAME_TOO_LONG = 0x209C,ERROR_DS_NAME_VALUE_TOO_LONG = 0x209D,ERROR_DS_NAME_UNPARSEABLE = 0x209E,ERROR_DS_NAME_TYPE_UNKNOWN = 0x209F,ERROR_DS_NOT_AN_OBJECT = 0x20A0,ERROR_DS_SEC_DESC_TOO_SHORT = 0x20A1,ERROR_DS_SEC_DESC_INVALID = 0x20A2,ERROR_DS_NO_DELETED_NAME = 0x20A3,ERROR_DS_SUBREF_MUST_HAVE_PARENT = 0x20A4,ERROR_DS_NCNAME_MUST_BE_NC = 0x20A5,ERROR_DS_CANT_ADD_SYSTEM_ONLY = 0x20A6,ERROR_DS_CLASS_MUST_BE_CONCRETE = 0x20A7,ERROR_DS_INVALID_DMD = 0x20A8,ERROR_DS_OBJ_GUID_EXISTS = 0x20A9,ERROR_DS_NOT_ON_BACKLINK = 0x20AA,ERROR_DS_NO_CROSSREF_FOR_NC = 0x20AB,ERROR_DS_SHUTTING_DOWN = 0x20AC,ERROR_DS_UNKNOWN_OPERATION = 0x20AD,ERROR_DS_INVALID_ROLE_OWNER = 0x20AE,ERROR_DS_COULDNT_CONTACT_FSMO = 0x20AF,ERROR_DS_CROSS_NC_DN_RENAME = 0x20B0,ERROR_DS_CANT_MOD_SYSTEM_ONLY = 0x20B1,ERROR_DS_REPLICATOR_ONLY = 0x20B2,ERROR_DS_OBJ_CLASS_NOT_DEFINED = 0x20B3,ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 0x20B4,ERROR_DS_NAME_REFERENCE_INVALID = 0x20B5,ERROR_DS_CROSS_REF_EXISTS = 0x20B6,ERROR_DS_CANT_DEL_MASTER_CROSSREF = 0x20B7,ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 0x20B8,ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 0x20B9,ERROR_DS_DUP_RDN = 0x20BA,ERROR_DS_DUP_OID = 0x20BB,ERROR_DS_DUP_MAPI_ID = 0x20BC,ERROR_DS_DUP_SCHEMA_ID_GUID = 0x20BD,ERROR_DS_DUP_LDAP_DISPLAY_NAME = 0x20BE,ERROR_DS_SEMANTIC_ATT_TEST = 0x20BF,ERROR_DS_SYNTAX_MISMATCH = 0x20C0,ERROR_DS_EXISTS_IN_MUST_HAVE = 0x20C1,ERROR_DS_EXISTS_IN_MAY_HAVE = 0x20C2,ERROR_DS_NONEXISTENT_MAY_HAVE = 0x20C3,ERROR_DS_NONEXISTENT_MUST_HAVE = 0x20C4,ERROR_DS_AUX_CLS_TEST_FAIL = 0x20C5,ERROR_DS_NONEXISTENT_POSS_SUP = 0x20C6,ERROR_DS_SUB_CLS_TEST_FAIL = 0x20C7,ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 0x20C8,ERROR_DS_EXISTS_IN_AUX_CLS = 0x20C9,ERROR_DS_EXISTS_IN_SUB_CLS = 0x20CA,ERROR_DS_EXISTS_IN_POSS_SUP = 0x20CB,ERROR_DS_RECALCSCHEMA_FAILED = 0x20CC,ERROR_DS_TREE_DELETE_NOT_FINISHED = 0x20CD,ERROR_DS_CANT_DELETE = 0x20CE,ERROR_DS_ATT_SCHEMA_REQ_ID = 0x20CF,ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 0x20D0,ERROR_DS_CANT_CACHE_ATT = 0x20D1,ERROR_DS_CANT_CACHE_CLASS = 0x20D2,ERROR_DS_CANT_REMOVE_ATT_CACHE = 0x20D3,ERROR_DS_CANT_REMOVE_CLASS_CACHE = 0x20D4,ERROR_DS_CANT_RETRIEVE_DN = 0x20D5,ERROR_DS_MISSING_SUPREF = 0x20D6,ERROR_DS_CANT_RETRIEVE_INSTANCE = 0x20D7,ERROR_DS_CODE_INCONSISTENCY = 0x20D8,ERROR_DS_DATABASE_ERROR = 0x20D9,ERROR_DS_GOVERNSID_MISSING = 0x20DA,ERROR_DS_MISSING_EXPECTED_ATT = 0x20DB,ERROR_DS_NCNAME_MISSING_CR_REF = 0x20DC,ERROR_DS_SECURITY_CHECKING_ERROR = 0x20DD,ERROR_DS_SCHEMA_NOT_LOADED = 0x20DE,ERROR_DS_SCHEMA_ALLOC_FAILED = 0x20DF,ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 0x20E0,ERROR_DS_GCVERIFY_ERROR = 0x20E1,ERROR_DS_DRA_SCHEMA_MISMATCH = 0x20E2,ERROR_DS_CANT_FIND_DSA_OBJ = 0x20E3,ERROR_DS_CANT_FIND_EXPECTED_NC = 0x20E4,ERROR_DS_CANT_FIND_NC_IN_CACHE = 0x20E5,ERROR_DS_CANT_RETRIEVE_CHILD = 0x20E6,ERROR_DS_SECURITY_ILLEGAL_MODIFY = 0x20E7,ERROR_DS_CANT_REPLACE_HIDDEN_REC = 0x20E8,ERROR_DS_BAD_HIERARCHY_FILE = 0x20E9,ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 0x20EA,ERROR_DS_CONFIG_PARAM_MISSING = 0x20EB,ERROR_DS_COUNTING_AB_INDICES_FAILED = 0x20EC,ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 0x20ED,ERROR_DS_INTERNAL_FAILURE = 0x20EE,ERROR_DS_UNKNOWN_ERROR = 0x20EF,ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 0x20F0,ERROR_DS_REFUSING_FSMO_ROLES = 0x20F1,ERROR_DS_MISSING_FSMO_SETTINGS = 0x20F2,ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 0x20F3,ERROR_DS_DRA_GENERIC = 0x20F4,ERROR_DS_DRA_INVALID_PARAMETER = 0x20F5,ERROR_DS_DRA_BUSY = 0x20F6,ERROR_DS_DRA_BAD_DN = 0x20F7,ERROR_DS_DRA_BAD_NC = 0x20F8,ERROR_DS_DRA_DN_EXISTS = 0x20F9,ERROR_DS_DRA_INTERNAL_ERROR = 0x20FA,ERROR_DS_DRA_INCONSISTENT_DIT = 0x20FB,ERROR_DS_DRA_CONNECTION_FAILED = 0x20FC,ERROR_DS_DRA_BAD_INSTANCE_TYPE = 0x20FD,ERROR_DS_DRA_OUT_OF_MEM = 0x20FE,ERROR_DS_DRA_MAIL_PROBLEM = 0x20FF,ERROR_DS_DRA_REF_ALREADY_EXISTS = 0x2100,ERROR_DS_DRA_REF_NOT_FOUND = 0x2101,ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 0x2102,ERROR_DS_DRA_DB_ERROR = 0x2103,ERROR_DS_DRA_NO_REPLICA = 0x2104,ERROR_DS_DRA_ACCESS_DENIED = 0x2105,ERROR_DS_DRA_NOT_SUPPORTED = 0x2106,ERROR_DS_DRA_RPC_CANCELLED = 0x2107,ERROR_DS_DRA_SOURCE_DISABLED = 0x2108,ERROR_DS_DRA_SINK_DISABLED = 0x2109,ERROR_DS_DRA_NAME_COLLISION = 0x210A,ERROR_DS_DRA_SOURCE_REINSTALLED = 0x210B,ERROR_DS_DRA_MISSING_PARENT = 0x210C,ERROR_DS_DRA_PREEMPTED = 0x210D,ERROR_DS_DRA_ABANDON_SYNC = 0x210E,ERROR_DS_DRA_SHUTDOWN = 0x210F,ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 0x2110,ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 0x2111,ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 0x2112,ERROR_DS_INSTALL_SCHEMA_MISMATCH = 0x2113,ERROR_DS_DUP_LINK_ID = 0x2114,ERROR_DS_NAME_ERROR_RESOLVING = 0x2115,ERROR_DS_NAME_ERROR_NOT_FOUND = 0x2116,ERROR_DS_NAME_ERROR_NOT_UNIQUE = 0x2117,ERROR_DS_NAME_ERROR_NO_MAPPING = 0x2118,ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 0x2119,ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 0x211A,ERROR_DS_CONSTRUCTED_ATT_MOD = 0x211B,ERROR_DS_WRONG_OM_OBJ_CLASS = 0x211C,ERROR_DS_DRA_REPL_PENDING = 0x211D,ERROR_DS_DS_REQUIRED = 0x211E,ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 0x211F,ERROR_DS_NON_BASE_SEARCH = 0x2120,ERROR_DS_CANT_RETRIEVE_ATTS = 0x2121,ERROR_DS_BACKLINK_WITHOUT_LINK = 0x2122,ERROR_DS_EPOCH_MISMATCH = 0x2123,ERROR_DS_SRC_NAME_MISMATCH = 0x2124,ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 0x2125,ERROR_DS_DST_NC_MISMATCH = 0x2126,ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 0x2127,ERROR_DS_SRC_GUID_MISMATCH = 0x2128,ERROR_DS_CANT_MOVE_DELETED_OBJECT = 0x2129,ERROR_DS_PDC_OPERATION_IN_PROGRESS = 0x212A,ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 0x212B,ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 0x212C,ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 0x212D,ERROR_DS_NC_MUST_HAVE_NC_PARENT = 0x212E,ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 0x212F,ERROR_DS_DST_DOMAIN_NOT_NATIVE = 0x2130,ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 0x2131,ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 0x2132,ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 0x2133,ERROR_DS_INVALID_SEARCH_FLAG = 0x2134,ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 0x2135,ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 0x2136,ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 0x2137,ERROR_DS_SAM_INIT_FAILURE = 0x2138,ERROR_DS_SENSITIVE_GROUP_VIOLATION = 0x2139,ERROR_DS_CANT_MOD_PRIMARYGROUPID = 0x213A,ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 0x213B,ERROR_DS_NONSAFE_SCHEMA_CHANGE = 0x213C,ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 0x213D,ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 0x213E,ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 0x213F,ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 0x2140,ERROR_DS_INVALID_GROUP_TYPE = 0x2141,ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 0x2142,ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 0x2143,ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 0x2144,ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 0x2145,ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 0x2146,ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 0x2147,ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 0x2148,ERROR_DS_HAVE_PRIMARY_MEMBERS = 0x2149,ERROR_DS_STRING_SD_CONVERSION_FAILED = 0x214A,ERROR_DS_NAMING_MASTER_GC = 0x214B,ERROR_DS_DNS_LOOKUP_FAILURE = 0x214C,ERROR_DS_COULDNT_UPDATE_SPNS = 0x214D,ERROR_DS_CANT_RETRIEVE_SD = 0x214E,ERROR_DS_KEY_NOT_UNIQUE = 0x214F,ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 0x2150,ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 0x2151,ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 0x2152,ERROR_DS_CANT_START = 0x2153,ERROR_DS_INIT_FAILURE = 0x2154,ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 0x2155,ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 0x2156,ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 0x2157,ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 0x2158,ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 0x2159,ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 0x215A,ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 0x215B,ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 0x215C,ERROR_SAM_INIT_FAILURE = 0x215D,ERROR_DS_DRA_SCHEMA_INFO_SHIP = 0x215E,ERROR_DS_DRA_SCHEMA_CONFLICT = 0x215F,ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 0x2160,ERROR_DS_DRA_OBJ_NC_MISMATCH = 0x2161,ERROR_DS_NC_STILL_HAS_DSAS = 0x2162,ERROR_DS_GC_REQUIRED = 0x2163,ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 0x2164,ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 0x2165,ERROR_DS_CANT_ADD_TO_GC = 0x2166,ERROR_DS_NO_CHECKPOINT_WITH_PDC = 0x2167,ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 0x2168,ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 0x2169,ERROR_DS_INVALID_NAME_FOR_SPN = 0x216A,ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 0x216B,ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 0x216C,ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 0x216D,ERROR_DS_MUST_BE_RUN_ON_DST_DC = 0x216E,ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 0x216F,ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 0x2170,ERROR_DS_INIT_FAILURE_CONSOLE = 0x2171,ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 0x2172,ERROR_DS_FOREST_VERSION_TOO_HIGH = 0x2173,ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 0x2174,ERROR_DS_FOREST_VERSION_TOO_LOW = 0x2175,ERROR_DS_DOMAIN_VERSION_TOO_LOW = 0x2176,ERROR_DS_INCOMPATIBLE_VERSION = 0x2177,ERROR_DS_LOW_DSA_VERSION = 0x2178,ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 0x2179,ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 0x217A,ERROR_DS_NAME_NOT_UNIQUE = 0x217B,ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 0x217C,ERROR_DS_OUT_OF_VERSION_STORE = 0x217D,ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 0x217E,ERROR_DS_NO_REF_DOMAIN = 0x217F,ERROR_DS_RESERVED_LINK_ID = 0x2180,ERROR_DS_LINK_ID_NOT_AVAILABLE = 0x2181,ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 0x2182,ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 0x2183,ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 0x2184,ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 0x2185,ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 0x2186,ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 0x2187,ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 0x2188,ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 0x2189,ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 0x218A,ERROR_DS_THREAD_LIMIT_EXCEEDED = 0x218B,ERROR_DS_NOT_CLOSEST = 0x218C,ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 0x218D,ERROR_DS_SINGLE_USER_MODE_FAILED = 0x218E,ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 0x218F,ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 0x2190,ERROR_DS_DIFFERENT_REPL_EPOCHS = 0x2191,ERROR_DS_DRS_EXTENSIONS_CHANGED = 0x2192,ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 0x2193,ERROR_DS_NO_MSDS_INTID = 0x2194,ERROR_DS_DUP_MSDS_INTID = 0x2195,ERROR_DS_EXISTS_IN_RDNATTID = 0x2196,ERROR_DS_AUTHORIZATION_FAILED = 0x2197,ERROR_DS_INVALID_SCRIPT = 0x2198,ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 0x2199,ERROR_DS_CROSS_REF_BUSY = 0x219A,ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 0x219B,ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 0x219C,ERROR_DS_DUPLICATE_ID_FOUND = 0x219D,ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 0x219E,ERROR_DS_GROUP_CONVERSION_ERROR = 0x219F,ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 0x21A0,ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 0x21A1,ERROR_DS_ROLE_NOT_VERIFIED = 0x21A2,ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 0x21A3,ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 0x21A4,ERROR_DS_EXISTING_AD_CHILD_NC = 0x21A5,ERROR_DS_REPL_LIFETIME_EXCEEDED = 0x21A6,ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 0x21A7,ERROR_DS_LDAP_SEND_QUEUE_FULL = 0x21A8,ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 0x21A9,DNS_ERROR_RESPONSE_CODES_BASE = 0x2328,DNS_ERROR_RCODE_NO_ERROR = 0x0,DNS_ERROR_MASK = 0x2328,DNS_ERROR_RCODE_FORMAT_ERROR = 0x2329,DNS_ERROR_RCODE_SERVER_FAILURE = 0x232A,DNS_ERROR_RCODE_NAME_ERROR = 0x232B,DNS_ERROR_RCODE_NOT_IMPLEMENTED = 0x232C,DNS_ERROR_RCODE_REFUSED = 0x232D,DNS_ERROR_RCODE_YXDOMAIN = 0x232E,DNS_ERROR_RCODE_YXRRSET = 0x232F,DNS_ERROR_RCODE_NXRRSET = 0x2330,DNS_ERROR_RCODE_NOTAUTH = 0x2331,DNS_ERROR_RCODE_NOTZONE = 0x2332,DNS_ERROR_RCODE_BADSIG = 0x2338,DNS_ERROR_RCODE_BADKEY = 0x2339,DNS_ERROR_RCODE_BADTIME = 0x233A,DNS_ERROR_RCODE_LAST = 0x233A,DNS_ERROR_PACKET_FMT_BASE = 0x251C,DNS_INFO_NO_RECORDS = 0x251D,DNS_ERROR_BAD_PACKET = 0x251E,DNS_ERROR_NO_PACKET = 0x251F,DNS_ERROR_RCODE = 0x2520,DNS_ERROR_UNSECURE_PACKET = 0x2521,DNS_STATUS_PACKET_UNSECURE = 0x2521,DNS_ERROR_NO_MEMORY = 0xE,DNS_ERROR_INVALID_NAME = 0x7B,DNS_ERROR_INVALID_DATA = 0xD,DNS_ERROR_GENERAL_API_BASE = 0x254E,DNS_ERROR_INVALID_TYPE = 0x254F,DNS_ERROR_INVALID_IP_ADDRESS = 0x2550,DNS_ERROR_INVALID_PROPERTY = 0x2551,DNS_ERROR_TRY_AGAIN_LATER = 0x2552,DNS_ERROR_NOT_UNIQUE = 0x2553,DNS_ERROR_NON_RFC_NAME = 0x2554,DNS_STATUS_FQDN = 0x2555,DNS_STATUS_DOTTED_NAME = 0x2556,DNS_STATUS_SINGLE_PART_NAME = 0x2557,DNS_ERROR_INVALID_NAME_CHAR = 0x2558,DNS_ERROR_NUMERIC_NAME = 0x2559,DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 0x255A,DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 0x255B,DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 0x255C,DNS_ERROR_INCONSISTENT_ROOT_HINTS = 0x255D,DNS_ERROR_ZONE_BASE = 0x2580,DNS_ERROR_ZONE_DOES_NOT_EXIST = 0x2581,DNS_ERROR_NO_ZONE_INFO = 0x2582,DNS_ERROR_INVALID_ZONE_OPERATION = 0x2583,DNS_ERROR_ZONE_CONFIGURATION_ERROR = 0x2584,DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 0x2585,DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 0x2586,DNS_ERROR_ZONE_LOCKED = 0x2587,DNS_ERROR_ZONE_CREATION_FAILED = 0x2588,DNS_ERROR_ZONE_ALREADY_EXISTS = 0x2589,DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 0x258A,DNS_ERROR_INVALID_ZONE_TYPE = 0x258B,DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 0x258C,DNS_ERROR_ZONE_NOT_SECONDARY = 0x258D,DNS_ERROR_NEED_SECONDARY_ADDRESSES = 0x258E,DNS_ERROR_WINS_INIT_FAILED = 0x258F,DNS_ERROR_NEED_WINS_SERVERS = 0x2590,DNS_ERROR_NBSTAT_INIT_FAILED = 0x2591,DNS_ERROR_SOA_DELETE_INVALID = 0x2592,DNS_ERROR_FORWARDER_ALREADY_EXISTS = 0x2593,DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 0x2594,DNS_ERROR_ZONE_IS_SHUTDOWN = 0x2595,DNS_ERROR_DATAFILE_BASE = 0x25B2,DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 0x25B3,DNS_ERROR_INVALID_DATAFILE_NAME = 0x25B4,DNS_ERROR_DATAFILE_OPEN_FAILURE = 0x25B5,DNS_ERROR_FILE_WRITEBACK_FAILED = 0x25B6,DNS_ERROR_DATAFILE_PARSING = 0x25B7,DNS_ERROR_DATABASE_BASE = 0x25E4,DNS_ERROR_RECORD_DOES_NOT_EXIST = 0x25E5,DNS_ERROR_RECORD_FORMAT = 0x25E6,DNS_ERROR_NODE_CREATION_FAILED = 0x25E7,DNS_ERROR_UNKNOWN_RECORD_TYPE = 0x25E8,DNS_ERROR_RECORD_TIMED_OUT = 0x25E9,DNS_ERROR_NAME_NOT_IN_ZONE = 0x25EA,DNS_ERROR_CNAME_LOOP = 0x25EB,DNS_ERROR_NODE_IS_CNAME = 0x25EC,DNS_ERROR_CNAME_COLLISION = 0x25ED,DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 0x25EE,DNS_ERROR_RECORD_ALREADY_EXISTS = 0x25EF,DNS_ERROR_SECONDARY_DATA = 0x25F0,DNS_ERROR_NO_CREATE_CACHE_DATA = 0x25F1,DNS_ERROR_NAME_DOES_NOT_EXIST = 0x25F2,DNS_WARNING_PTR_CREATE_FAILED = 0x25F3,DNS_WARNING_DOMAIN_UNDELETED = 0x25F4,DNS_ERROR_DS_UNAVAILABLE = 0x25F5,DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 0x25F6,DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 0x25F7,DNS_ERROR_OPERATION_BASE = 0x2616,DNS_INFO_AXFR_COMPLETE = 0x2617,DNS_ERROR_AXFR = 0x2618,DNS_INFO_ADDED_LOCAL_WINS = 0x2619,DNS_ERROR_SECURE_BASE = 0x2648,DNS_STATUS_CONTINUE_NEEDED = 0x2649,DNS_ERROR_SETUP_BASE = 0x267A,DNS_ERROR_NO_TCPIP = 0x267B,DNS_ERROR_NO_DNS_SERVERS = 0x267C,DNS_ERROR_DP_BASE = 0x26AC,DNS_ERROR_DP_DOES_NOT_EXIST = 0x26AD,DNS_ERROR_DP_ALREADY_EXISTS = 0x26AE,DNS_ERROR_DP_NOT_ENLISTED = 0x26AF,DNS_ERROR_DP_ALREADY_ENLISTED = 0x26B0,DNS_ERROR_DP_NOT_AVAILABLE = 0x26B1,DNS_ERROR_DP_FSMO_ERROR = 0x26B2,WSABASEERR = 0x2710,WSAEINTR = 0x2714,WSAEBADF = 0x2719,WSAEACCES = 0x271D,WSAEFAULT = 0x271E,WSAEINVAL = 0x2726,WSAEMFILE = 0x2728,WSAEWOULDBLOCK = 0x2733,WSAEINPROGRESS = 0x2734,WSAEALREADY = 0x2735,WSAENOTSOCK = 0x2736,WSAEDESTADDRREQ = 0x2737,WSAEMSGSIZE = 0x2738,WSAEPROTOTYPE = 0x2739,WSAENOPROTOOPT = 0x273A,WSAEPROTONOSUPPORT = 0x273B,WSAESOCKTNOSUPPORT = 0x273C,WSAEOPNOTSUPP = 0x273D,WSAEPFNOSUPPORT = 0x273E,WSAEAFNOSUPPORT = 0x273F,WSAEADDRINUSE = 0x2740,WSAEADDRNOTAVAIL = 0x2741,WSAENETDOWN = 0x2742,WSAENETUNREACH = 0x2743,WSAENETRESET = 0x2744,WSAECONNABORTED = 0x2745,WSAECONNRESET = 0x2746,WSAENOBUFS = 0x2747,WSAEISCONN = 0x2748,WSAENOTCONN = 0x2749,WSAESHUTDOWN = 0x274A,WSAETOOMANYREFS = 0x274B,WSAETIMEDOUT = 0x274C,WSAECONNREFUSED = 0x274D,WSAELOOP = 0x274E,WSAENAMETOOLONG = 0x274F,WSAEHOSTDOWN = 0x2750,WSAEHOSTUNREACH = 0x2751,WSAENOTEMPTY = 0x2752,WSAEPROCLIM = 0x2753,WSAEUSERS = 0x2754,WSAEDQUOT = 0x2755,WSAESTALE = 0x2756,WSAEREMOTE = 0x2757,WSASYSNOTREADY = 0x276B,WSAVERNOTSUPPORTED = 0x276C,WSANOTINITIALISED = 0x276D,WSAEDISCON = 0x2775,WSAENOMORE = 0x2776,WSAECANCELLED = 0x2777,WSAEINVALIDPROCTABLE = 0x2778,WSAEINVALIDPROVIDER = 0x2779,WSAEPROVIDERFAILEDINIT = 0x277A,WSASYSCALLFAILURE = 0x277B,WSASERVICE_NOT_FOUND = 0x277C,WSATYPE_NOT_FOUND = 0x277D,WSA_E_NO_MORE = 0x277E,WSA_E_CANCELLED = 0x277F,WSAEREFUSED = 0x2780,WSAHOST_NOT_FOUND = 0x2AF9,WSATRY_AGAIN = 0x2AFA,WSANO_RECOVERY = 0x2AFB,WSANO_DATA = 0x2AFC,WSA_QOS_RECEIVERS = 0x2AFD,WSA_QOS_SENDERS = 0x2AFE,WSA_QOS_NO_SENDERS = 0x2AFF,WSA_QOS_NO_RECEIVERS = 0x2B00,WSA_QOS_REQUEST_CONFIRMED = 0x2B01,WSA_QOS_ADMISSION_FAILURE = 0x2B02,WSA_QOS_POLICY_FAILURE = 0x2B03,WSA_QOS_BAD_STYLE = 0x2B04,WSA_QOS_BAD_OBJECT = 0x2B05,WSA_QOS_TRAFFIC_CTRL_ERROR = 0x2B06,WSA_QOS_GENERIC_ERROR = 0x2B07,WSA_QOS_ESERVICETYPE = 0x2B08,WSA_QOS_EFLOWSPEC = 0x2B09,WSA_QOS_EPROVSPECBUF = 0x2B0A,WSA_QOS_EFILTERSTYLE = 0x2B0B,WSA_QOS_EFILTERTYPE = 0x2B0C,WSA_QOS_EFILTERCOUNT = 0x2B0D,WSA_QOS_EOBJLENGTH = 0x2B0E,WSA_QOS_EFLOWCOUNT = 0x2B0F,WSA_QOS_EUNKOWNPSOBJ = 0x2B10,WSA_QOS_EPOLICYOBJ = 0x2B11,WSA_QOS_EFLOWDESC = 0x2B12,WSA_QOS_EPSFLOWSPEC = 0x2B13,WSA_QOS_EPSFILTERSPEC = 0x2B14,WSA_QOS_ESDMODEOBJ = 0x2B15,WSA_QOS_ESHAPERATEOBJ = 0x2B16,WSA_QOS_RESERVED_PETYPE = 0x2B17,ERROR_SXS_SECTION_NOT_FOUND = 0x36B0,ERROR_SXS_CANT_GEN_ACTCTX = 0x36B1,ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 0x36B2,ERROR_SXS_ASSEMBLY_NOT_FOUND = 0x36B3,ERROR_SXS_MANIFEST_FORMAT_ERROR = 0x36B4,ERROR_SXS_MANIFEST_PARSE_ERROR = 0x36B5,ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 0x36B6,ERROR_SXS_KEY_NOT_FOUND = 0x36B7,ERROR_SXS_VERSION_CONFLICT = 0x36B8,ERROR_SXS_WRONG_SECTION_TYPE = 0x36B9,ERROR_SXS_THREAD_QUERIES_DISABLED = 0x36BA,ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 0x36BB,ERROR_SXS_UNKNOWN_ENCODING_GROUP = 0x36BC,ERROR_SXS_UNKNOWN_ENCODING = 0x36BD,ERROR_SXS_INVALID_XML_NAMESPACE_URI = 0x36BE,ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 0x36BF,ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 0x36C0,ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 0x36C1,ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 0x36C2,ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 0x36C3,ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 0x36C4,ERROR_SXS_DUPLICATE_DLL_NAME = 0x36C5,ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 0x36C6,ERROR_SXS_DUPLICATE_CLSID = 0x36C7,ERROR_SXS_DUPLICATE_IID = 0x36C8,ERROR_SXS_DUPLICATE_TLBID = 0x36C9,ERROR_SXS_DUPLICATE_PROGID = 0x36CA,ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 0x36CB,ERROR_SXS_FILE_HASH_MISMATCH = 0x36CC,ERROR_SXS_POLICY_PARSE_ERROR = 0x36CD,ERROR_SXS_XML_E_MISSINGQUOTE = 0x36CE,ERROR_SXS_XML_E_COMMENTSYNTAX = 0x36CF,ERROR_SXS_XML_E_BADSTARTNAMECHAR = 0x36D0,ERROR_SXS_XML_E_BADNAMECHAR = 0x36D1,ERROR_SXS_XML_E_BADCHARINSTRING = 0x36D2,ERROR_SXS_XML_E_XMLDECLSYNTAX = 0x36D3,ERROR_SXS_XML_E_BADCHARDATA = 0x36D4,ERROR_SXS_XML_E_MISSINGWHITESPACE = 0x36D5,ERROR_SXS_XML_E_EXPECTINGTAGEND = 0x36D6,ERROR_SXS_XML_E_MISSINGSEMICOLON = 0x36D7,ERROR_SXS_XML_E_UNBALANCEDPAREN = 0x36D8,ERROR_SXS_XML_E_INTERNALERROR = 0x36D9,ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 0x36DA,ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 0x36DB,ERROR_SXS_XML_E_MISSING_PAREN = 0x36DC,ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 0x36DD,ERROR_SXS_XML_E_MULTIPLE_COLONS = 0x36DE,ERROR_SXS_XML_E_INVALID_DECIMAL = 0x36DF,ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 0x36E0,ERROR_SXS_XML_E_INVALID_UNICODE = 0x36E1,ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 0x36E2,ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 0x36E3,ERROR_SXS_XML_E_UNCLOSEDTAG = 0x36E4,ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 0x36E5,ERROR_SXS_XML_E_MULTIPLEROOTS = 0x36E6,ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 0x36E7,ERROR_SXS_XML_E_BADXMLDECL = 0x36E8,ERROR_SXS_XML_E_MISSINGROOT = 0x36E9,ERROR_SXS_XML_E_UNEXPECTEDEOF = 0x36EA,ERROR_SXS_XML_E_BADPEREFINSUBSET = 0x36EB,ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 0x36EC,ERROR_SXS_XML_E_UNCLOSEDENDTAG = 0x36ED,ERROR_SXS_XML_E_UNCLOSEDSTRING = 0x36EE,ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 0x36EF,ERROR_SXS_XML_E_UNCLOSEDDECL = 0x36F0,ERROR_SXS_XML_E_UNCLOSEDCDATA = 0x36F1,ERROR_SXS_XML_E_RESERVEDNAMESPACE = 0x36F2,ERROR_SXS_XML_E_INVALIDENCODING = 0x36F3,ERROR_SXS_XML_E_INVALIDSWITCH = 0x36F4,ERROR_SXS_XML_E_BADXMLCASE = 0x36F5,ERROR_SXS_XML_E_INVALID_STANDALONE = 0x36F6,ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 0x36F7,ERROR_SXS_XML_E_INVALID_VERSION = 0x36F8,ERROR_SXS_XML_E_MISSINGEQUALS = 0x36F9,ERROR_SXS_PROTECTION_RECOVERY_FAILED = 0x36FA,ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 0x36FB,ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 0x36FC,ERROR_SXS_UNTRANSLATABLE_HRESULT = 0x36FD,ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 0x36FE,ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 0x36FF,ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 0x3700,ERROR_IPSEC_QM_POLICY_EXISTS = 0x32C8,ERROR_IPSEC_QM_POLICY_NOT_FOUND = 0x32C9,ERROR_IPSEC_QM_POLICY_IN_USE = 0x32CA,ERROR_IPSEC_MM_POLICY_EXISTS = 0x32CB,ERROR_IPSEC_MM_POLICY_NOT_FOUND = 0x32CC,ERROR_IPSEC_MM_POLICY_IN_USE = 0x32CD,ERROR_IPSEC_MM_FILTER_EXISTS = 0x32CE,ERROR_IPSEC_MM_FILTER_NOT_FOUND = 0x32CF,ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 0x32D0,ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 0x32D1,ERROR_IPSEC_MM_AUTH_EXISTS = 0x32D2,ERROR_IPSEC_MM_AUTH_NOT_FOUND = 0x32D3,ERROR_IPSEC_MM_AUTH_IN_USE = 0x32D4,ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 0x32D5,ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 0x32D6,ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 0x32D7,ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 0x32D8,ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 0x32D9,ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 0x32DA,ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 0x32DB,ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 0x32DC,ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 0x32DD,ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 0x32DE,ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 0x32DF,WARNING_IPSEC_MM_POLICY_PRUNED = 0x32E0,WARNING_IPSEC_QM_POLICY_PRUNED = 0x32E1,ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 0x35E8,ERROR_IPSEC_IKE_AUTH_FAIL = 0x35E9,ERROR_IPSEC_IKE_ATTRIB_FAIL = 0x35EA,ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 0x35EB,ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 0x35EC,ERROR_IPSEC_IKE_TIMED_OUT = 0x35ED,ERROR_IPSEC_IKE_NO_CERT = 0x35EE,ERROR_IPSEC_IKE_SA_DELETED = 0x35EF,ERROR_IPSEC_IKE_SA_REAPED = 0x35F0,ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 0x35F1,ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 0x35F2,ERROR_IPSEC_IKE_QUEUE_DROP_MM = 0x35F3,ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 0x35F4,ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 0x35F5,ERROR_IPSEC_IKE_MM_DELAY_DROP = 0x35F6,ERROR_IPSEC_IKE_QM_DELAY_DROP = 0x35F7,ERROR_IPSEC_IKE_ERROR = 0x35F8,ERROR_IPSEC_IKE_CRL_FAILED = 0x35F9,ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 0x35FA,ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 0x35FB,ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 0x35FC,ERROR_IPSEC_IKE_DH_FAIL = 0x35FE,ERROR_IPSEC_IKE_INVALID_HEADER = 0x3600,ERROR_IPSEC_IKE_NO_POLICY = 0x3601,ERROR_IPSEC_IKE_INVALID_SIGNATURE = 0x3602,ERROR_IPSEC_IKE_KERBEROS_ERROR = 0x3603,ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 0x3604,ERROR_IPSEC_IKE_PROCESS_ERR = 0x3605,ERROR_IPSEC_IKE_PROCESS_ERR_SA = 0x3606,ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 0x3607,ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 0x3608,ERROR_IPSEC_IKE_PROCESS_ERR_KE = 0x3609,ERROR_IPSEC_IKE_PROCESS_ERR_ID = 0x360A,ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 0x360B,ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 0x360C,ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 0x360D,ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 0x360E,ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 0x360F,ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 0x3610,ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 0x3611,ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 0x3612,ERROR_IPSEC_IKE_INVALID_PAYLOAD = 0x3613,ERROR_IPSEC_IKE_LOAD_SOFT_SA = 0x3614,ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 0x3615,ERROR_IPSEC_IKE_INVALID_COOKIE = 0x3616,ERROR_IPSEC_IKE_NO_PEER_CERT = 0x3617,ERROR_IPSEC_IKE_PEER_CRL_FAILED = 0x3618,ERROR_IPSEC_IKE_POLICY_CHANGE = 0x3619,ERROR_IPSEC_IKE_NO_MM_POLICY = 0x361A,ERROR_IPSEC_IKE_NOTCBPRIV = 0x361B,ERROR_IPSEC_IKE_SECLOADFAIL = 0x361C,ERROR_IPSEC_IKE_FAILSSPINIT = 0x361D,ERROR_IPSEC_IKE_FAILQUERYSSP = 0x361E,ERROR_IPSEC_IKE_SRVACQFAIL = 0x361F,ERROR_IPSEC_IKE_SRVQUERYCRED = 0x3620,ERROR_IPSEC_IKE_GETSPIFAIL = 0x3621,ERROR_IPSEC_IKE_INVALID_FILTER = 0x3622,ERROR_IPSEC_IKE_OUT_OF_MEMORY = 0x3623,ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 0x3624,ERROR_IPSEC_IKE_INVALID_POLICY = 0x3625,ERROR_IPSEC_IKE_UNKNOWN_DOI = 0x3626,ERROR_IPSEC_IKE_INVALID_SITUATION = 0x3627,ERROR_IPSEC_IKE_DH_FAILURE = 0x3628,ERROR_IPSEC_IKE_INVALID_GROUP = 0x3629,ERROR_IPSEC_IKE_ENCRYPT = 0x362A,ERROR_IPSEC_IKE_DECRYPT = 0x362B,ERROR_IPSEC_IKE_POLICY_MATCH = 0x362C,ERROR_IPSEC_IKE_UNSUPPORTED_ID = 0x362D,ERROR_IPSEC_IKE_INVALID_HASH = 0x362E,ERROR_IPSEC_IKE_INVALID_HASH_ALG = 0x362F,ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 0x3630,ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 0x3631,ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 0x3632,ERROR_IPSEC_IKE_INVALID_SIG = 0x3633,ERROR_IPSEC_IKE_LOAD_FAILED = 0x3634,ERROR_IPSEC_IKE_RPC_DELETE = 0x3635,ERROR_IPSEC_IKE_BENIGN_REINIT = 0x3636,ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 0x3637,ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 0x3639,ERROR_IPSEC_IKE_MM_LIMIT = 0x363A,ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 0x363B,ERROR_IPSEC_IKE_NEG_STATUS_END = 0x363C,};
enum MACRO_EVENT {EVENT_MODIFY_STATE = 0x2,EVENT_ALL_ACCESS = 0x1F0003,};
enum MACRO_EVLEN {EVLEN = 16,UNLEN = 256,};
enum MACRO_EXTRA {EXTRA_EXIT_POINT_DELETED = 0xC00037E0,EXTRA_EXIT_POINT_NOT_DELETED = 0xC00037E1,};
enum MACRO_FCIDM {FCIDM_SHVIEWFIRST = 0x0,FCIDM_SHVIEWLAST = 0x7FFF,FCIDM_BROWSERFIRST = 0xA000,FCIDM_BROWSERLAST = 0xBF00,FCIDM_GLOBALFIRST = 0x8000,FCIDM_GLOBALLAST = 0x9FFF,FCIDM_MENU_FILE = 0x8000,FCIDM_MENU_EDIT = 0x8040,FCIDM_MENU_VIEW = 0x8080,FCIDM_MENU_VIEW_SEP_OPTIONS = 0x8081,FCIDM_MENU_TOOLS = 0x80C0,FCIDM_MENU_TOOLS_SEP_GOTO = 0x80C1,FCIDM_MENU_HELP = 0x8100,FCIDM_MENU_FIND = 0x8140,FCIDM_MENU_EXPLORE = 0x8150,FCIDM_MENU_FAVORITES = 0x8170,FCIDM_TOOLBAR = 0xA000,FCIDM_STATUS = 0xA001,};
enum MACRO_FIBER {FIBER_FLAG_FLOAT_SWITCH = 0x1,};
enum MACRO_FIRST {LVM_FIRST = 0x1000,TV_FIRST = 0x1100,HDM_FIRST = 0x1200,TCM_FIRST = 0x1300,PGM_FIRST = 0x1400,ECM_FIRST = 0x1500,BCM_FIRST = 0x1600,CBM_FIRST = 0x1700,CCM_FIRST = 0x2000,};
enum MACRO_FNERR {FNERR_FILENAMECODES = 0x3000,FNERR_SUBCLASSFAILURE = 0x3001,FNERR_INVALIDFILENAME = 0x3002,FNERR_BUFFERTOOSMALL = 0x3003,};
enum MACRO_FRAME {FRAME_FPO = 0,FRAME_TRAP = 1,FRAME_TSS = 2,FRAME_NONFPO = 3,};
enum MACRO_FRERR {FRERR_FINDREPLACECODES = 0x4000,FRERR_BUFFERLENGTHZERO = 0x4001,};
enum MACRO_FSCTL {FSCTL_REQUEST_OPLOCK_LEVEL_1 = 589824,FSCTL_REQUEST_OPLOCK_LEVEL_2 = 589828,FSCTL_REQUEST_BATCH_OPLOCK = 589832,FSCTL_OPLOCK_BREAK_ACKNOWLEDGE = 589836,FSCTL_OPBATCH_ACK_CLOSE_PENDING = 589840,FSCTL_OPLOCK_BREAK_NOTIFY = 589844,FSCTL_LOCK_VOLUME = 589848,FSCTL_UNLOCK_VOLUME = 589852,FSCTL_DISMOUNT_VOLUME = 589856,FSCTL_IS_VOLUME_MOUNTED = 589864,FSCTL_IS_PATHNAME_VALID = 589868,FSCTL_MARK_VOLUME_DIRTY = 589872,FSCTL_QUERY_RETRIEVAL_POINTERS = 589883,FSCTL_GET_COMPRESSION = 589884,FSCTL_SET_COMPRESSION = 639040,FSCTL_MARK_AS_SYSTEM_HIVE = 589903,FSCTL_OPLOCK_BREAK_ACK_NO_2 = 589904,FSCTL_INVALIDATE_VOLUMES = 589908,FSCTL_QUERY_FAT_BPB = 589912,FSCTL_REQUEST_FILTER_OPLOCK = 589916,FSCTL_FILESYSTEM_GET_STATISTICS = 589920,FSCTL_GET_NTFS_VOLUME_DATA = 589924,FSCTL_GET_NTFS_FILE_RECORD = 589928,FSCTL_GET_VOLUME_BITMAP = 589935,FSCTL_GET_RETRIEVAL_POINTERS = 589939,FSCTL_MOVE_FILE = 589940,FSCTL_IS_VOLUME_DIRTY = 589944,FSCTL_ALLOW_EXTENDED_DASD_IO = 589955,FSCTL_FIND_FILES_BY_SID = 589967,FSCTL_SET_OBJECT_ID = 589976,FSCTL_GET_OBJECT_ID = 589980,FSCTL_DELETE_OBJECT_ID = 589984,FSCTL_SET_REPARSE_POINT = 589988,FSCTL_GET_REPARSE_POINT = 589992,FSCTL_DELETE_REPARSE_POINT = 589996,FSCTL_ENUM_USN_DATA = 590003,FSCTL_SECURITY_ID_CHECK = 606391,FSCTL_READ_USN_JOURNAL = 590011,FSCTL_SET_OBJECT_ID_EXTENDED = 590012,FSCTL_CREATE_OR_GET_OBJECT_ID = 590016,FSCTL_SET_SPARSE = 590020,FSCTL_SET_ZERO_DATA = 622792,FSCTL_QUERY_ALLOCATED_RANGES = 606415,FSCTL_SET_ENCRYPTION = 590039,FSCTL_ENCRYPTION_FSCTL_IO = 590043,FSCTL_WRITE_RAW_ENCRYPTED = 590047,FSCTL_READ_RAW_ENCRYPTED = 590051,FSCTL_CREATE_USN_JOURNAL = 590055,FSCTL_READ_FILE_USN_DATA = 590059,FSCTL_WRITE_USN_CLOSE_RECORD = 590063,FSCTL_EXTEND_VOLUME = 590064,FSCTL_QUERY_USN_JOURNAL = 590068,FSCTL_DELETE_USN_JOURNAL = 590072,FSCTL_MARK_HANDLE = 590076,FSCTL_SIS_COPYFILE = 590080,FSCTL_SIS_LINK_FILES = 639236,FSCTL_HSM_MSG = 639240,FSCTL_HSM_DATA = 639251,FSCTL_RECALL_FILE = 590103,FSCTL_READ_FROM_PLEX = 606494,FSCTL_FILE_PREFETCH = 590112,};
enum MACRO_FVSIF {FVSIF_RECT = 0x1,FVSIF_PINNED = 0x2,FVSIF_NEWFAILED = 0x8000000,FVSIF_NEWFILE = 0x80000000,FVSIF_CANVIEWIT = 0x40000000,};
enum MACRO_GCAPS {GCAPS_BEZIERS = 0x1,GCAPS_GEOMETRICWIDE = 0x2,GCAPS_ALTERNATEFILL = 0x4,GCAPS_WINDINGFILL = 0x8,GCAPS_HALFTONE = 0x10,GCAPS_COLOR_DITHER = 0x20,GCAPS_HORIZSTRIKE = 0x40,GCAPS_VERTSTRIKE = 0x80,GCAPS_OPAQUERECT = 0x100,GCAPS_VECTORFONT = 0x200,GCAPS_MONO_DITHER = 0x400,GCAPS_ASYNCCHANGE = 0x800,GCAPS_ASYNCMOVE = 0x1000,GCAPS_DONTJOURNAL = 0x2000,GCAPS_DIRECTDRAW = 0x4000,GCAPS_ARBRUSHOPAQUE = 0x8000,GCAPS_PANNING = 0x10000,GCAPS_HIGHRESTEXT = 0x40000,GCAPS_PALMANAGED = 0x80000,GCAPS_DITHERONREALIZE = 0x200000,GCAPS_NO64BITMEMACCESS = 0x400000,GCAPS_FORCEDITHER = 0x800000,GCAPS_GRAY16 = 0x1000000,GCAPS_ICM = 0x2000000,GCAPS_CMYKCOLOR = 0x4000000,GCAPS_LAYERED = 0x8000000,GCAPS_ARBRUSHTEXT = 0x10000000,GCAPS_SCREENPRECISION = 0x20000000,GCAPS_FONT_RASTERIZER = 0x40000000,GCAPS_NUP = 0x80000000,};
enum MACRO_GEOID {GEOID_NOT_AVAILABLE = -1,};
enum MACRO_GNLEN {GNLEN = 256,};
enum MACRO_GROUP {GROUP_NAME = 0x80,UNIQUE_NAME = 0x0,};
enum MACRO_HACEK {HACEK = 0x30C,};
enum MACRO_HDATA {HDATA_APPOWNED = 0x1,};
enum MACRO_HFILE {HFILE_ERROR = -1,};
enum MACRO_HHWIN {HHWIN_PROP_TAB_AUTOHIDESHOW = 1,HHWIN_PROP_ONTOP = 2,HHWIN_PROP_NOTITLEBAR = 4,HHWIN_PROP_NODEF_STYLES = 8,HHWIN_PROP_NODEF_EXSTYLES = 16,HHWIN_PROP_TRI_PANE = 32,HHWIN_PROP_NOTB_TEXT = 64,HHWIN_PROP_POST_QUIT = 128,HHWIN_PROP_AUTO_SYNC = 256,HHWIN_PROP_TRACKING = 512,HHWIN_PROP_TAB_SEARCH = 1024,HHWIN_PROP_TAB_HISTORY = 2048,HHWIN_PROP_TAB_FAVORITES = 4096,HHWIN_PROP_CHANGE_TITLE = 8192,HHWIN_PROP_NAV_ONLY_WIN = 16384,HHWIN_PROP_NO_TOOLBAR = 32768,HHWIN_PROP_MENU = 65536,HHWIN_PROP_TAB_ADVSEARCH = 131072,HHWIN_PROP_USER_POS = 262144,HHWIN_PROP_TAB_CUSTOM1 = 524288,HHWIN_PROP_TAB_CUSTOM2 = 1048576,HHWIN_PROP_TAB_CUSTOM3 = 2097152,HHWIN_PROP_TAB_CUSTOM4 = 4194304,HHWIN_PROP_TAB_CUSTOM5 = 8388608,HHWIN_PROP_TAB_CUSTOM6 = 16777216,HHWIN_PROP_TAB_CUSTOM7 = 33554432,HHWIN_PROP_TAB_CUSTOM8 = 67108864,HHWIN_PROP_TAB_CUSTOM9 = 134217728,HHWIN_TB_MARGIN = 268435456,HHWIN_PARAM_PROPERTIES = 2,HHWIN_PARAM_STYLES = 4,HHWIN_PARAM_EXSTYLES = 8,HHWIN_PARAM_RECT = 16,HHWIN_PARAM_NAV_WIDTH = 32,HHWIN_PARAM_SHOWSTATE = 64,HHWIN_PARAM_INFOTYPES = 128,HHWIN_PARAM_TB_FLAGS = 256,HHWIN_PARAM_EXPANSION = 512,HHWIN_PARAM_TABPOS = 1024,HHWIN_PARAM_TABORDER = 2048,HHWIN_PARAM_HISTORY_COUNT = 4096,HHWIN_PARAM_CUR_TAB = 8192,HHWIN_BUTTON_EXPAND = 2,HHWIN_BUTTON_BACK = 4,HHWIN_BUTTON_FORWARD = 8,HHWIN_BUTTON_STOP = 16,HHWIN_BUTTON_REFRESH = 32,HHWIN_BUTTON_HOME = 64,HHWIN_BUTTON_BROWSE_FWD = 128,HHWIN_BUTTON_BROWSE_BCK = 256,HHWIN_BUTTON_NOTES = 512,HHWIN_BUTTON_CONTENTS = 1024,HHWIN_BUTTON_SYNC = 2048,HHWIN_BUTTON_OPTIONS = 4096,HHWIN_BUTTON_PRINT = 8192,HHWIN_BUTTON_INDEX = 16384,HHWIN_BUTTON_SEARCH = 32768,HHWIN_BUTTON_HISTORY = 65536,HHWIN_BUTTON_FAVORITES = 131072,HHWIN_BUTTON_JUMP1 = 262144,HHWIN_BUTTON_JUMP2 = 524288,HHWIN_BUTTON_ZOOM = 1048576,HHWIN_BUTTON_TOC_NEXT = 2097152,HHWIN_BUTTON_TOC_PREV = 4194304,HHWIN_DEF_BUTTONS = 12294,};
enum MACRO_HINST {HINST_COMMCTRL = -1,};
enum MACRO_HOVER {HOVER_DEFAULT = 0xFFFFFFFF,};
enum MACRO_HTTOP {HTTOP = 12,};
enum MACRO_ICERR {ICERR_OK = 0,ICERR_DONTDRAW = 1,ICERR_NEWPALETTE = 2,ICERR_GOTOKEYFRAME = 3,ICERR_STOPDRAWING = 4,ICERR_UNSUPPORTED = -1,ICERR_BADFORMAT = -2,ICERR_MEMORY = -3,ICERR_INTERNAL = -4,ICERR_BADFLAGS = -5,ICERR_BADPARAM = -6,ICERR_BADSIZE = -7,ICERR_BADHANDLE = -8,ICERR_CANTUPDATE = -9,ICERR_ABORT = -10,ICERR_ERROR = -100,ICERR_BADBITDEPTH = -200,ICERR_BADIMAGESIZE = -201,ICERR_CUSTOM = -400,};
enum MACRO_IDANI {IDANI_OPEN = 1,IDANI_CAPTION = 3,};
enum MACRO_IDHOT {IDHOT_SNAPWINDOW = -1,IDHOT_SNAPDESKTOP = -2,};
enum MACRO_IDYES {IDYES = 6,};
enum MACRO_IMAGE {IMAGE_DOS_SIGNATURE = 0x5A4D,IMAGE_OS2_SIGNATURE = 0x454E,IMAGE_OS2_SIGNATURE_LE = 0x454C,IMAGE_VXD_SIGNATURE = 0x454C,IMAGE_NT_SIGNATURE = 0x4550,IMAGE_SIZEOF_FILE_HEADER = 0x14,IMAGE_FILE_RELOCS_STRIPPED = 0x1,IMAGE_FILE_EXECUTABLE_IMAGE = 0x2,IMAGE_FILE_LINE_NUMS_STRIPPED = 0x4,IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x8,IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x10,IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x20,IMAGE_FILE_BYTES_REVERSED_LO = 0x80,IMAGE_FILE_32BIT_MACHINE = 0x100,IMAGE_FILE_DEBUG_STRIPPED = 0x200,IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x400,IMAGE_FILE_NET_RUN_FROM_SWAP = 0x800,IMAGE_FILE_SYSTEM = 0x1000,IMAGE_FILE_DLL = 0x2000,IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000,IMAGE_FILE_BYTES_REVERSED_HI = 0x8000,IMAGE_FILE_MACHINE_UNKNOWN = 0x0,IMAGE_FILE_MACHINE_I386 = 0x14C,IMAGE_FILE_MACHINE_R3000 = 0x162,IMAGE_FILE_MACHINE_R4000 = 0x166,IMAGE_FILE_MACHINE_R10000 = 0x168,IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169,IMAGE_FILE_MACHINE_ALPHA = 0x184,IMAGE_FILE_MACHINE_SH3 = 0x1A2,IMAGE_FILE_MACHINE_SH3DSP = 0x1A3,IMAGE_FILE_MACHINE_SH3E = 0x1A4,IMAGE_FILE_MACHINE_SH4 = 0x1A6,IMAGE_FILE_MACHINE_SH5 = 0x1A8,IMAGE_FILE_MACHINE_ARM = 0x1C0,IMAGE_FILE_MACHINE_THUMB = 0x1C2,IMAGE_FILE_MACHINE_AM33 = 0x1D3,IMAGE_FILE_MACHINE_POWERPC = 0x1F0,IMAGE_FILE_MACHINE_POWERPCFP = 0x1F1,IMAGE_FILE_MACHINE_IA64 = 0x200,IMAGE_FILE_MACHINE_MIPS16 = 0x266,IMAGE_FILE_MACHINE_ALPHA64 = 0x284,IMAGE_FILE_MACHINE_MIPSFPU = 0x366,IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466,IMAGE_FILE_MACHINE_AXP64 = 0x284,IMAGE_FILE_MACHINE_TRICORE = 0x520,IMAGE_FILE_MACHINE_CEF = 0xCEF,IMAGE_FILE_MACHINE_EBC = 0xEBC,IMAGE_FILE_MACHINE_AMD64 = 0x8664,IMAGE_FILE_MACHINE_M32R = 0x9041,IMAGE_FILE_MACHINE_CEE = 0xC0EE,IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 0x10,IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 0x38,IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 0x1C,IMAGE_SIZEOF_NT_OPTIONAL32_HEADER = 0xE0,IMAGE_SIZEOF_NT_OPTIONAL64_HEADER = 0xF0,IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10B,IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20B,IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107,IMAGE_SIZEOF_NT_OPTIONAL_HEADER = 0xE0,IMAGE_NT_OPTIONAL_HDR_MAGIC = 0x10B,IMAGE_SUBSYSTEM_UNKNOWN = 0x0,IMAGE_SUBSYSTEM_NATIVE = 0x1,IMAGE_SUBSYSTEM_WINDOWS_GUI = 0x2,IMAGE_SUBSYSTEM_WINDOWS_CUI = 0x3,IMAGE_SUBSYSTEM_OS2_CUI = 0x5,IMAGE_SUBSYSTEM_POSIX_CUI = 0x7,IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 0x8,IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 0x9,IMAGE_SUBSYSTEM_EFI_APPLICATION = 0xA,IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 0xB,IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 0xC,IMAGE_SUBSYSTEM_EFI_ROM = 0xD,IMAGE_SUBSYSTEM_XBOX = 0xE,IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 0x200,IMAGE_DLLCHARACTERISTICS_NO_SEH = 0x400,IMAGE_DLLCHARACTERISTICS_NO_BIND = 0x800,IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 0x2000,IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000,IMAGE_DIRECTORY_ENTRY_EXPORT = 0x0,IMAGE_DIRECTORY_ENTRY_IMPORT = 0x1,IMAGE_DIRECTORY_ENTRY_RESOURCE = 0x2,IMAGE_DIRECTORY_ENTRY_EXCEPTION = 0x3,IMAGE_DIRECTORY_ENTRY_SECURITY = 0x4,IMAGE_DIRECTORY_ENTRY_BASERELOC = 0x5,IMAGE_DIRECTORY_ENTRY_DEBUG = 0x6,IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 0x7,IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 0x8,IMAGE_DIRECTORY_ENTRY_TLS = 0x9,IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 0xA,IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 0xB,IMAGE_DIRECTORY_ENTRY_IAT = 0xC,IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 0xD,IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 0xE,IMAGE_SIZEOF_SHORT_NAME = 0x8,IMAGE_SIZEOF_SECTION_HEADER = 0x28,IMAGE_SCN_TYPE_NO_PAD = 0x8,IMAGE_SCN_CNT_CODE = 0x20,IMAGE_SCN_CNT_INITIALIZED_DATA = 0x40,IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x80,IMAGE_SCN_LNK_OTHER = 0x100,IMAGE_SCN_LNK_INFO = 0x200,IMAGE_SCN_LNK_REMOVE = 0x800,IMAGE_SCN_LNK_COMDAT = 0x1000,IMAGE_SCN_NO_DEFER_SPEC_EXC = 0x4000,IMAGE_SCN_GPREL = 0x8000,IMAGE_SCN_MEM_FARDATA = 0x8000,IMAGE_SCN_MEM_PURGEABLE = 0x20000,IMAGE_SCN_MEM_16BIT = 0x20000,IMAGE_SCN_MEM_LOCKED = 0x40000,IMAGE_SCN_MEM_PRELOAD = 0x80000,IMAGE_SCN_ALIGN_1BYTES = 0x100000,IMAGE_SCN_ALIGN_2BYTES = 0x200000,IMAGE_SCN_ALIGN_4BYTES = 0x300000,IMAGE_SCN_ALIGN_8BYTES = 0x400000,IMAGE_SCN_ALIGN_16BYTES = 0x500000,IMAGE_SCN_ALIGN_32BYTES = 0x600000,IMAGE_SCN_ALIGN_64BYTES = 0x700000,IMAGE_SCN_ALIGN_128BYTES = 0x800000,IMAGE_SCN_ALIGN_256BYTES = 0x900000,IMAGE_SCN_ALIGN_512BYTES = 0xA00000,IMAGE_SCN_ALIGN_1024BYTES = 0xB00000,IMAGE_SCN_ALIGN_2048BYTES = 0xC00000,IMAGE_SCN_ALIGN_4096BYTES = 0xD00000,IMAGE_SCN_ALIGN_8192BYTES = 0xE00000,IMAGE_SCN_ALIGN_MASK = 0xF00000,IMAGE_SCN_LNK_NRELOC_OVFL = 0x1000000,IMAGE_SCN_MEM_DISCARDABLE = 0x2000000,IMAGE_SCN_MEM_NOT_CACHED = 0x4000000,IMAGE_SCN_MEM_NOT_PAGED = 0x8000000,IMAGE_SCN_MEM_SHARED = 0x10000000,IMAGE_SCN_MEM_EXECUTE = 0x20000000,IMAGE_SCN_MEM_READ = 0x40000000,IMAGE_SCN_MEM_WRITE = 0x80000000,IMAGE_SCN_SCALE_INDEX = 0x1,IMAGE_SIZEOF_SYMBOL = 0x12,IMAGE_SYM_UNDEFINED = 0x0,IMAGE_SYM_ABSOLUTE = 0xFFFFFFFF,IMAGE_SYM_DEBUG = 0xFFFFFFFE,IMAGE_SYM_SECTION_MAX = 0xFEFF,IMAGE_SYM_TYPE_NULL = 0x0,IMAGE_SYM_TYPE_VOID = 0x1,IMAGE_SYM_TYPE_CHAR = 0x2,IMAGE_SYM_TYPE_SHORT = 0x3,IMAGE_SYM_TYPE_INT = 0x4,IMAGE_SYM_TYPE_LONG = 0x5,IMAGE_SYM_TYPE_FLOAT = 0x6,IMAGE_SYM_TYPE_DOUBLE = 0x7,IMAGE_SYM_TYPE_STRUCT = 0x8,IMAGE_SYM_TYPE_UNION = 0x9,IMAGE_SYM_TYPE_ENUM = 0xA,IMAGE_SYM_TYPE_MOE = 0xB,IMAGE_SYM_TYPE_BYTE = 0xC,IMAGE_SYM_TYPE_WORD = 0xD,IMAGE_SYM_TYPE_UINT = 0xE,IMAGE_SYM_TYPE_DWORD = 0xF,IMAGE_SYM_TYPE_PCODE = 0x8000,IMAGE_SYM_DTYPE_NULL = 0x0,IMAGE_SYM_DTYPE_POINTER = 0x1,IMAGE_SYM_DTYPE_FUNCTION = 0x2,IMAGE_SYM_DTYPE_ARRAY = 0x3,IMAGE_SYM_CLASS_END_OF_FUNCTION = 0xFF,IMAGE_SYM_CLASS_NULL = 0x0,IMAGE_SYM_CLASS_AUTOMATIC = 0x1,IMAGE_SYM_CLASS_EXTERNAL = 0x2,IMAGE_SYM_CLASS_STATIC = 0x3,IMAGE_SYM_CLASS_REGISTER = 0x4,IMAGE_SYM_CLASS_EXTERNAL_DEF = 0x5,IMAGE_SYM_CLASS_LABEL = 0x6,IMAGE_SYM_CLASS_UNDEFINED_LABEL = 0x7,IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 0x8,IMAGE_SYM_CLASS_ARGUMENT = 0x9,IMAGE_SYM_CLASS_STRUCT_TAG = 0xA,IMAGE_SYM_CLASS_MEMBER_OF_UNION = 0xB,IMAGE_SYM_CLASS_UNION_TAG = 0xC,IMAGE_SYM_CLASS_TYPE_DEFINITION = 0xD,IMAGE_SYM_CLASS_UNDEFINED_STATIC = 0xE,IMAGE_SYM_CLASS_ENUM_TAG = 0xF,IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 0x10,IMAGE_SYM_CLASS_REGISTER_PARAM = 0x11,IMAGE_SYM_CLASS_BIT_FIELD = 0x12,IMAGE_SYM_CLASS_FAR_EXTERNAL = 0x44,IMAGE_SYM_CLASS_BLOCK = 0x64,IMAGE_SYM_CLASS_FUNCTION = 0x65,IMAGE_SYM_CLASS_END_OF_STRUCT = 0x66,IMAGE_SYM_CLASS_FILE = 0x67,IMAGE_SYM_CLASS_SECTION = 0x68,IMAGE_SYM_CLASS_WEAK_EXTERNAL = 0x69,IMAGE_SYM_CLASS_CLR_TOKEN = 0x6B,};
enum MACRO_INDEX {INDEX_DrvEnablePDEV = 0,INDEX_DrvCompletePDEV = 1,INDEX_DrvDisablePDEV = 2,INDEX_DrvEnableSurface = 3,INDEX_DrvDisableSurface = 4,INDEX_DrvAssertMode = 5,INDEX_DrvOffset = 6,INDEX_DrvResetPDEV = 7,INDEX_DrvDisableDriver = 8,INDEX_DrvCreateDeviceBitmap = 10,INDEX_DrvDeleteDeviceBitmap = 11,INDEX_DrvRealizeBrush = 12,INDEX_DrvDitherColor = 13,INDEX_DrvStrokePath = 14,INDEX_DrvFillPath = 15,INDEX_DrvStrokeAndFillPath = 16,INDEX_DrvPaint = 17,INDEX_DrvBitBlt = 18,INDEX_DrvCopyBits = 19,INDEX_DrvStretchBlt = 20,INDEX_DrvSetPalette = 22,INDEX_DrvTextOut = 23,INDEX_DrvEscape = 24,INDEX_DrvDrawEscape = 25,INDEX_DrvQueryFont = 26,INDEX_DrvQueryFontTree = 27,INDEX_DrvQueryFontData = 28,INDEX_DrvSetPointerShape = 29,INDEX_DrvMovePointer = 30,INDEX_DrvLineTo = 31,INDEX_DrvSendPage = 32,INDEX_DrvStartPage = 33,INDEX_DrvEndDoc = 34,INDEX_DrvStartDoc = 35,INDEX_DrvGetGlyphMode = 37,INDEX_DrvSynchronize = 38,INDEX_DrvSaveScreenBits = 40,INDEX_DrvGetModes = 41,INDEX_DrvFree = 42,INDEX_DrvDestroyFont = 43,INDEX_DrvQueryFontCaps = 44,INDEX_DrvLoadFontFile = 45,INDEX_DrvUnloadFontFile = 46,INDEX_DrvFontManagement = 47,INDEX_DrvQueryTrueTypeTable = 48,INDEX_DrvQueryTrueTypeOutline = 49,INDEX_DrvGetTrueTypeFile = 50,INDEX_DrvQueryFontFile = 51,INDEX_DrvMovePanning = 52,INDEX_DrvQueryAdvanceWidths = 53,INDEX_DrvSetPixelFormat = 54,INDEX_DrvDescribePixelFormat = 55,INDEX_DrvSwapBuffers = 56,INDEX_DrvStartBanding = 57,INDEX_DrvNextBand = 58,INDEX_DrvGetDirectDrawInfo = 59,INDEX_DrvEnableDirectDraw = 60,INDEX_DrvDisableDirectDraw = 61,INDEX_DrvQuerySpoolType = 62,INDEX_DrvIcmCreateColorTransform = 64,INDEX_DrvIcmDeleteColorTransform = 65,INDEX_DrvIcmCheckBitmapBits = 66,INDEX_DrvIcmSetDeviceGammaRamp = 67,INDEX_DrvGradientFill = 68,INDEX_DrvStretchBltROP = 69,INDEX_DrvPlgBlt = 70,INDEX_DrvAlphaBlend = 71,INDEX_DrvSynthesizeFont = 72,INDEX_DrvGetSynthesizedFontFiles = 73,INDEX_DrvTransparentBlt = 74,INDEX_DrvQueryPerBandInfo = 75,INDEX_DrvQueryDeviceSupport = 76,INDEX_DrvReserved1 = 77,INDEX_DrvReserved2 = 78,INDEX_DrvReserved3 = 79,INDEX_DrvReserved4 = 80,INDEX_DrvReserved5 = 81,INDEX_DrvReserved6 = 82,INDEX_DrvReserved7 = 83,INDEX_DrvReserved8 = 84,INDEX_DrvDeriveSurface = 85,INDEX_DrvQueryGlyphAttrs = 86,INDEX_DrvNotify = 87,INDEX_DrvSynchronizeSurface = 88,INDEX_DrvResetDevice = 89,INDEX_DrvReserved9 = 90,INDEX_DrvReserved10 = 91,INDEX_DrvReserved11 = 92,INDEX_LAST = 93,};
enum MACRO_INPUT {INPUT_MOUSE = 0,INPUT_KEYBOARD = 1,INPUT_HARDWARE = 2,};
enum MACRO_IOCTL {IOCTL_STORAGE_BASE = 45,IOCTL_STORAGE_CHECK_VERIFY = 2967552,IOCTL_STORAGE_CHECK_VERIFY2 = 2951168,IOCTL_STORAGE_MEDIA_REMOVAL = 2967556,IOCTL_STORAGE_EJECT_MEDIA = 2967560,IOCTL_STORAGE_LOAD_MEDIA = 2967564,IOCTL_STORAGE_LOAD_MEDIA2 = 2951180,IOCTL_STORAGE_RESERVE = 2967568,IOCTL_STORAGE_RELEASE = 2967572,IOCTL_STORAGE_FIND_NEW_DEVICES = 2967576,IOCTL_STORAGE_EJECTION_CONTROL = 2951488,IOCTL_STORAGE_MCN_CONTROL = 2951492,IOCTL_STORAGE_GET_MEDIA_TYPES = 2952192,IOCTL_STORAGE_GET_MEDIA_TYPES_EX = 2952196,IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER = 2952208,IOCTL_STORAGE_GET_HOTPLUG_INFO = 2952212,IOCTL_STORAGE_SET_HOTPLUG_INFO = 3001368,IOCTL_STORAGE_RESET_BUS = 2969600,IOCTL_STORAGE_RESET_DEVICE = 2969604,IOCTL_STORAGE_BREAK_RESERVATION = 2969620,IOCTL_STORAGE_GET_DEVICE_NUMBER = 2953344,IOCTL_STORAGE_PREDICT_FAILURE = 2953472,};
enum MACRO_IRLMP {IRLMP_ENUMDEVICES = 0x10,IRLMP_IAS_SET = 0x11,IRLMP_IAS_QUERY = 0x12,IRLMP_SEND_PDU_LEN = 0x13,IRLMP_EXCLUSIVE_MODE = 0x14,IRLMP_IRLPT_MODE = 0x15,IRLMP_9WIRE_MODE = 0x16,IRLMP_TINYTP_MODE = 0x17,IRLMP_PARAMETERS = 0x18,IRLMP_DISCOVERY_MODE = 0x19,IRLMP_SHARP_MODE = 0x20,};
enum MACRO_IRTIR {IRTIR_TASK_NOT_RUNNING = 0,IRTIR_TASK_RUNNING = 1,IRTIR_TASK_SUSPENDED = 2,IRTIR_TASK_PENDING = 3,IRTIR_TASK_FINISHED = 4,};
enum MACRO_ISIOI {ISIOI_ICONFILE = 0x1,ISIOI_ICONINDEX = 0x2,};
enum MACRO_ISMEX {ISMEX_NOSEND = 0x0,ISMEX_SEND = 0x1,ISMEX_NOTIFY = 0x2,ISMEX_CALLBACK = 0x4,ISMEX_REPLIED = 0x8,};
enum MACRO_ITSAT {ITSAT_DEFAULT_LPARAM = 0xFFFFFFFF,ITSAT_DEFAULT_PRIORITY = 0x10000000,ITSAT_MAX_PRIORITY = 0x7FFFFFFF,ITSAT_MIN_PRIORITY = 0x0,};
enum MACRO_JIFMK {JIFMK_SOF0 = 0xFFC0,JIFMK_SOF1 = 0xFFC1,JIFMK_SOF2 = 0xFFC2,JIFMK_SOF3 = 0xFFC3,JIFMK_SOF5 = 0xFFC5,JIFMK_SOF6 = 0xFFC6,JIFMK_SOF7 = 0xFFC7,JIFMK_JPG = 0xFFC8,JIFMK_SOF9 = 0xFFC9,JIFMK_SOF10 = 0xFFCA,JIFMK_SOF11 = 0xFFCB,JIFMK_SOF13 = 0xFFCD,JIFMK_SOF14 = 0xFFCE,JIFMK_SOF15 = 0xFFCF,JIFMK_DHT = 0xFFC4,JIFMK_DAC = 0xFFCC,JIFMK_RST0 = 0xFFD0,JIFMK_RST1 = 0xFFD1,JIFMK_RST2 = 0xFFD2,JIFMK_RST3 = 0xFFD3,JIFMK_RST4 = 0xFFD4,JIFMK_RST5 = 0xFFD5,JIFMK_RST6 = 0xFFD6,JIFMK_RST7 = 0xFFD7,JIFMK_SOI = 0xFFD8,JIFMK_EOI = 0xFFD9,JIFMK_SOS = 0xFFDA,JIFMK_DQT = 0xFFDB,JIFMK_DNL = 0xFFDC,JIFMK_DRI = 0xFFDD,JIFMK_DHP = 0xFFDE,JIFMK_EXP = 0xFFDF,JIFMK_APP0 = 0xFFE0,JIFMK_APP1 = 0xFFE1,JIFMK_APP2 = 0xFFE2,JIFMK_APP3 = 0xFFE3,JIFMK_APP4 = 0xFFE4,JIFMK_APP5 = 0xFFE5,JIFMK_APP6 = 0xFFE6,JIFMK_APP7 = 0xFFE7,JIFMK_JPG0 = 0xFFF0,JIFMK_JPG1 = 0xFFF1,JIFMK_JPG2 = 0xFFF2,JIFMK_JPG3 = 0xFFF3,JIFMK_JPG4 = 0xFFF4,JIFMK_JPG5 = 0xFFF5,JIFMK_JPG6 = 0xFFF6,JIFMK_JPG7 = 0xFFF7,JIFMK_JPG8 = 0xFFF8,JIFMK_JPG9 = 0xFFF9,JIFMK_JPG10 = 0xFFFA,JIFMK_JPG11 = 0xFFFB,JIFMK_JPG12 = 0xFFFC,JIFMK_JPG13 = 0xFFFD,JIFMK_COM = 0xFFFE,JIFMK_TEM = 0xFF01,JIFMK_RES = 0xFF02,JIFMK_00 = 0xFF00,JIFMK_FF = 0xFFFF,};
enum MACRO_KMODE {KMODE_EXCEPTION_NOT_HANDLED = 0x1E,};
enum MACRO_KSAC3 {KSAC3_ALTERNATE_AUDIO_1 = 1,KSAC3_ALTERNATE_AUDIO_2 = 2,KSAC3_ALTERNATE_AUDIO_BOTH = 3,KSAC3_SERVICE_MAIN_AUDIO = 0,KSAC3_SERVICE_NO_DIALOG = 1,KSAC3_SERVICE_VISUALLY_IMPAIRED = 2,KSAC3_SERVICE_HEARING_IMPAIRED = 3,KSAC3_SERVICE_DIALOG_ONLY = 4,KSAC3_SERVICE_COMMENTARY = 5,KSAC3_SERVICE_EMERGENCY_FLASH = 6,KSAC3_SERVICE_VOICE_OVER = 7,};
enum MACRO_KSALL {KSALL_NODES = 4294967295,};
enum MACRO_KS_AM {KS_AM_UseNewCSSKey = 0x1,};
enum MACRO_KS_CC {KS_CC_SUBSTREAM_ODD = 0x1,KS_CC_SUBSTREAM_EVEN = 0x2,KS_CC_SUBSTREAM_FIELD1_MASK = 0xF0,KS_CC_SUBSTREAM_SERVICE_CC1 = 0x10,KS_CC_SUBSTREAM_SERVICE_CC2 = 0x20,KS_CC_SUBSTREAM_SERVICE_T1 = 0x40,KS_CC_SUBSTREAM_SERVICE_T2 = 0x80,KS_CC_SUBSTREAM_FIELD2_MASK = 0x1F00,KS_CC_SUBSTREAM_SERVICE_CC3 = 0x100,KS_CC_SUBSTREAM_SERVICE_CC4 = 0x200,KS_CC_SUBSTREAM_SERVICE_T3 = 0x400,KS_CC_SUBSTREAM_SERVICE_T4 = 0x800,KS_CC_SUBSTREAM_SERVICE_XDS = 0x1000,};
enum MACRO_LCMAP {LCMAP_LOWERCASE = 0x100,LCMAP_UPPERCASE = 0x200,LCMAP_SORTKEY = 0x400,LCMAP_BYTEREV = 0x800,LCMAP_HIRAGANA = 0x100000,LCMAP_KATAKANA = 0x200000,LCMAP_HALFWIDTH = 0x400000,LCMAP_FULLWIDTH = 0x800000,LCMAP_LINGUISTIC_CASING = 0x1000000,LCMAP_SIMPLIFIED_CHINESE = 0x2000000,LCMAP_TRADITIONAL_CHINESE = 0x4000000,};
enum MACRO_LLKHF {LLKHF_EXTENDED = 1,LLKHF_INJECTED = 16,LLKHF_ALTDOWN = 32,LLKHF_UP = 128,};
enum MACRO_LLMHF {LLMHF_INJECTED = 0x1,};
enum MACRO_LOCAL {LOCAL_TRAFFIC_CONTROL = 50004,LOCAL_QOSABILITY = 50005,};
enum MACRO_LOGON {LOGON_WITH_PROFILE = 0x1,LOGON_NETCREDENTIALS_ONLY = 0x2,LOGON_ZERO_PASSWORD_BUFFER = 0x80000000,};
enum MACRO_LPSTR {LPSTR_TEXTCALLBACKW = -1,LPSTR_TEXTCALLBACKA = -1,LPSTR_TEXTCALLBACK = -1,};
enum MACRO_LVCDI {LVCDI_ITEM = 0x0,LVCDI_GROUP = 0x1,};
enum MACRO_LVGIT {LVGIT_UNFOLDED = 0x1,};
enum MACRO_LVGMF {LVGMF_NONE = 0x0,LVGMF_BORDERSIZE = 0x1,LVGMF_BORDERCOLOR = 0x2,LVGMF_TEXTCOLOR = 0x4,};
enum MACRO_LVSCW {LVSCW_AUTOSIZE = -1,LVSCW_AUTOSIZE_USEHEADER = -2,};
enum MACRO_LVSIL {LVSIL_NORMAL = 0,LVSIL_SMALL = 1,LVSIL_STATE = 2,};
enum MACRO_MCAST {MCAST_MFE = 18,MCAST_MFE_STATS = 19,};
enum MACRO_MCDRV {MCDRV_MEM_BUSY = 1,MCDRV_MEM_NOT_BUSY = 2,};
enum MACRO_MEDIA {MEDIA_ERASEABLE = 0x1,MEDIA_WRITE_ONCE = 0x2,MEDIA_READ_ONLY = 0x4,MEDIA_READ_WRITE = 0x8,MEDIA_WRITE_PROTECTED = 0x100,MEDIA_CURRENTLY_MOUNTED = 0x80000000,};
enum MACRO_MEM_E {MEM_E_INVALID_ROOT = 0x80080009,MEM_E_INVALID_LINK = 0x80080010,MEM_E_INVALID_SIZE = 0x80080011,};
enum MACRO_MIXER {MIXER_SHORT_NAME_CHARS = 16,MIXER_LONG_NAME_CHARS = 64,};
enum MACRO_MKSYS {MKSYS_URLMONIKER = 6,};
enum MACRO_MMIOM {MMIOM_READ = 0,MMIOM_WRITE = 1,MMIOM_SEEK = 2,MMIOM_OPEN = 3,MMIOM_CLOSE = 4,MMIOM_WRITEFLUSH = 5,MMIOM_RENAME = 6,MMIOM_USER = 32768,};
enum MACRO_MNGOF {MNGOF_TOPGAP = 0x1,MNGOF_BOTTOMGAP = 0x2,};
enum MACRO_MOUSE {MOUSE_MOVE_RELATIVE = 0,MOUSE_MOVE_ABSOLUTE = 1,MOUSE_VIRTUAL_DESKTOP = 2,MOUSE_ATTRIBUTES_CHANGED = 4,};
enum MACRO_MSDTC {MSDTC_E_DUPLICATE_RESOURCE = 0x80110701,};
enum MACRO_MTYPE {MTYPE_FORMAT_MASK = 0x7,MTYPE_COMPOSE = 0x1,MTYPE_DIRECT = 0x2,MTYPE_PAIRED = 0x4,MTYPE_DOUBLEBYTECHAR_MASK = 0x18,MTYPE_SINGLE = 0x8,MTYPE_DOUBLE = 0x10,MTYPE_PREDEFIN_MASK = 0xE0,MTYPE_REPLACE = 0x20,MTYPE_ADD = 0x40,MTYPE_DISABLE = 0x80,};
enum MACRO_MUTEX {MUTEX_MODIFY_STATE = 1,MUTEX_ALL_ACCESS = 2031617,};
enum MACRO_NABTS {NABTS_LINES_PER_BUNDLE = 16,NABTS_PAYLOAD_PER_LINE = 28,NABTS_BYTES_PER_LINE = 36,};
enum MACRO_NNLEN {NNLEN = 80,};
enum MACRO_NT351 {NT351_INTERFACE_SIZE = 0x40,};
enum MACRO_NWSAP {NWSAP_EVENT_KEY_NOT_FOUND = 0xC0002134,NWSAP_EVENT_WSASTARTUP_FAILED = 0xC0002135,NWSAP_EVENT_SOCKET_FAILED = 0xC0002136,NWSAP_EVENT_SETOPTBCAST_FAILED = 0xC0002137,NWSAP_EVENT_BIND_FAILED = 0xC0002138,NWSAP_EVENT_GETSOCKNAME_FAILED = 0xC0002139,NWSAP_EVENT_OPTEXTENDEDADDR_FAILED = 0xC000213A,NWSAP_EVENT_OPTBCASTINADDR_FAILED = 0xC000213B,NWSAP_EVENT_CARDMALLOC_FAILED = 0xC000213C,NWSAP_EVENT_NOCARDS = 0xC000213D,NWSAP_EVENT_THREADEVENT_FAIL = 0xC000213E,NWSAP_EVENT_RECVSEM_FAIL = 0xC000213F,NWSAP_EVENT_SENDEVENT_FAIL = 0xC0002140,NWSAP_EVENT_STARTRECEIVE_ERROR = 0xC0002141,NWSAP_EVENT_STARTWORKER_ERROR = 0xC0002142,NWSAP_EVENT_TABLE_MALLOC_FAILED = 0xC0002143,NWSAP_EVENT_HASHTABLE_MALLOC_FAILED = 0xC0002144,NWSAP_EVENT_STARTLPCWORKER_ERROR = 0xC0002145,NWSAP_EVENT_CREATELPCPORT_ERROR = 0xC0002146,NWSAP_EVENT_CREATELPCEVENT_ERROR = 0xC0002147,NWSAP_EVENT_LPCLISTENMEMORY_ERROR = 0xC0002148,NWSAP_EVENT_LPCHANDLEMEMORY_ERROR = 0xC0002149,NWSAP_EVENT_BADWANFILTER_VALUE = 0xC000214A,NWSAP_EVENT_CARDLISTEVENT_FAIL = 0xC000214B,NWSAP_EVENT_SDMDEVENT_FAIL = 0xC000214C,NWSAP_EVENT_INVALID_FILTERNAME = 0x8000214D,NWSAP_EVENT_WANSEM_FAIL = 0xC000214E,NWSAP_EVENT_WANSOCKET_FAILED = 0xC000214F,NWSAP_EVENT_WANBIND_FAILED = 0xC0002150,NWSAP_EVENT_STARTWANWORKER_ERROR = 0xC0002151,NWSAP_EVENT_STARTWANCHECK_ERROR = 0xC0002152,NWSAP_EVENT_OPTMAXADAPTERNUM_ERROR = 0xC0002153,NWSAP_EVENT_WANHANDLEMEMORY_ERROR = 0xC0002154,NWSAP_EVENT_WANEVENT_ERROR = 0xC0002155,};
enum MACRO_OBJID {OBJID_WINDOW = 0x0,OBJID_SYSMENU = 0xFFFFFFFF,OBJID_TITLEBAR = 0xFFFFFFFE,OBJID_MENU = 0xFFFFFFFD,OBJID_CLIENT = 0xFFFFFFFC,OBJID_VSCROLL = 0xFFFFFFFB,OBJID_HSCROLL = 0xFFFFFFFA,OBJID_SIZEGRIP = 0xFFFFFFF9,OBJID_CARET = 0xFFFFFFF8,OBJID_CURSOR = 0xFFFFFFF7,OBJID_ALERT = 0xFFFFFFF6,OBJID_SOUND = 0xFFFFFFF5,OBJID_QUERYCLASSNAMEIDX = 0xFFFFFFF4,OBJID_NATIVEOM = 0xFFFFFFF0,};
enum MACRO_OEMDM {OEMDM_SIZE = 1,OEMDM_DEFAULT = 2,OEMDM_CONVERT = 3,OEMDM_MERGE = 4,};
enum MACRO_OEMGI {OEMGI_GETSIGNATURE = 1,OEMGI_GETINTERFACEVERSION = 2,OEMGI_GETVERSION = 3,OEMGI_GETPUBLISHERINFO = 4,};
enum MACRO_OLE_S {OLE_S_USEREG = 0x40000,OLE_S_STATIC = 0x40001,OLE_S_MAC_CLIPFORMAT = 0x40002,};
enum MACRO_OPTIF {OPTIF_COLLAPSE = 0x1,OPTIF_HIDE = 0x2,OPTIF_CALLBACK = 0x4,OPTIF_CHANGED = 0x8,OPTIF_CHANGEONCE = 0x10,OPTIF_DISABLED = 0x20,OPTIF_ECB_CHECKED = 0x40,OPTIF_EXT_HIDE = 0x80,OPTIF_EXT_DISABLED = 0x100,OPTIF_SEL_AS_HICON = 0x200,OPTIF_EXT_IS_EXTPUSH = 0x400,OPTIF_NO_GROUPBOX_NAME = 0x800,OPTIF_OVERLAY_WARNING_ICON = 0x1000,OPTIF_OVERLAY_STOP_ICON = 0x2000,OPTIF_OVERLAY_NO_ICON = 0x4000,OPTIF_INITIAL_TVITEM = 0x8000,OPTIF_HAS_POIEXT = 0x10000,OPTIF_MASK = 0x1FFFF,};
enum MACRO_OPTPF {OPTPF_HIDE = 0x1,OPTPF_DISABLED = 0x2,OPTPF_ICONID_AS_HICON = 0x4,OPTPF_OVERLAY_WARNING_ICON = 0x8,OPTPF_OVERLAY_STOP_ICON = 0x10,OPTPF_OVERLAY_NO_ICON = 0x20,OPTPF_USE_HDLGTEMPLATE = 0x40,};
enum MACRO_OPTTF {OPTTF_TYPE_DISABLED = 0x1,OPTTF_NOSPACE_BEFORE_POSTFIX = 0x2,};
enum MACRO_PANIC {PANIC_STACK_SWITCH = 0x2B,};
enum MACRO_PC_24 {PC_24 = 131072,PC_53 = 65536,PC_64 = 0,};
enum MACRO_PDCAP {PDCAP_D0_SUPPORTED = 0x1,PDCAP_D1_SUPPORTED = 0x2,PDCAP_D2_SUPPORTED = 0x4,PDCAP_D3_SUPPORTED = 0x8,PDCAP_WAKE_FROM_D0_SUPPORTED = 0x10,PDCAP_WAKE_FROM_D1_SUPPORTED = 0x20,PDCAP_WAKE_FROM_D2_SUPPORTED = 0x40,PDCAP_WAKE_FROM_D3_SUPPORTED = 0x80,PDCAP_WARM_EJECT_SUPPORTED = 0x100,};
enum MACRO_PDERR {PDERR_PRINTERCODES = 0x1000,PDERR_SETUPFAILURE = 0x1001,PDERR_PARSEFAILURE = 0x1002,PDERR_RETDEFFAILURE = 0x1003,PDERR_LOADDRVFAILURE = 0x1004,PDERR_GETDEVMODEFAIL = 0x1005,PDERR_INITFAILURE = 0x1006,PDERR_NODEVICES = 0x1007,PDERR_NODEFAULTPRN = 0x1008,PDERR_DNDMMISMATCH = 0x1009,PDERR_CREATEICFAILURE = 0x100A,PDERR_PRINTERNOTFOUND = 0x100B,PDERR_DEFAULTDIFFERENT = 0x100C,};
enum MACRO_PIDDI {PIDDI_THUMBNAIL = 0x2,};
enum MACRO_PIDSI {PIDSI_TITLE = 0x2,PIDSI_SUBJECT = 0x3,PIDSI_AUTHOR = 0x4,PIDSI_KEYWORDS = 0x5,PIDSI_COMMENTS = 0x6,PIDSI_TEMPLATE = 0x7,PIDSI_LASTAUTHOR = 0x8,PIDSI_REVNUMBER = 0x9,PIDSI_EDITTIME = 0xA,PIDSI_LASTPRINTED = 0xB,PIDSI_CREATE_DTM = 0xC,PIDSI_LASTSAVE_DTM = 0xD,PIDSI_PAGECOUNT = 0xE,PIDSI_WORDCOUNT = 0xF,PIDSI_CHARCOUNT = 0x10,PIDSI_THUMBNAIL = 0x11,PIDSI_APPNAME = 0x12,PIDSI_DOC_SECURITY = 0x13,};
enum MACRO_PITCH {DEFAULT_PITCH = 0,FIXED_PITCH = 1,VARIABLE_PITCH = 2,};
enum MACRO_POWER {POWER_SYSTEM_MAXIMUM = 7,};
enum MACRO_PRINT {NORMAL_PRINT = 0x0,REVERSE_PRINT = 0x1,};
enum MACRO_PROXY {PROXY_ARP = 22,};
enum MACRO_PSBTN {PSBTN_BACK = 0,PSBTN_NEXT = 1,PSBTN_FINISH = 2,PSBTN_OK = 3,PSBTN_APPLYNOW = 4,PSBTN_CANCEL = 5,PSBTN_HELP = 6,PSBTN_MAX = 6,};
enum MACRO_PSPCB {PSPCB_ADDREF = 0,PSPCB_RELEASE = 1,PSPCB_CREATE = 2,};
enum MACRO_PURGE {PURGE_TXABORT = 0x1,PURGE_RXABORT = 0x2,PURGE_TXCLEAR = 0x4,PURGE_RXCLEAR = 0x8,};
enum MACRO_PWLEN {PWLEN = 256,};
enum MACRO_QNLEN {QNLEN = 80,};
enum MACRO_QOSSP {QOSSP_ERR_BASE = 56000,};
enum MACRO_QUERY {QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = 0x4,QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = 0x8,QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = 0x10,QUERY_ACTCTX_FLAG_NO_ADDREF = 0x80000000,};
enum MACRO_QUOTA {QUOTA_LIMITS_HARDWS_MIN_ENABLE = 0x1,QUOTA_LIMITS_HARDWS_MIN_DISABLE = 0x2,QUOTA_LIMITS_HARDWS_MAX_ENABLE = 0x4,QUOTA_LIMITS_HARDWS_MAX_DISABLE = 0x8,};
enum MACRO_RASCF {RASCF_AllUsers = 0x1,RASCF_GlobalCreds = 0x2,};
enum MACRO_RASCM {RASCM_UserName = 0x1,RASCM_Password = 0x2,RASCM_Domain = 0x4,RASCM_DefaultCreds = 0x8,RASCM_PreSharedKey = 0x10,RASCM_ServerPreSharedKey = 0x20,RASCM_DDMPreSharedKey = 0x40,};
enum MACRO_RASCN {RASCN_Connection = 0x1,RASCN_Disconnection = 0x2,RASCN_BandwidthAdded = 0x4,RASCN_BandwidthRemoved = 0x8,};
enum MACRO_RASCS {RASCS_PAUSED = 0x1000,RASCS_DONE = 0x2000,};
enum MACRO_RASEO {RASEO_UseCountryAndAreaCodes = 0x1,RASEO_SpecificIpAddr = 0x2,RASEO_SpecificNameServers = 0x4,RASEO_IpHeaderCompression = 0x8,RASEO_RemoteDefaultGateway = 0x10,RASEO_DisableLcpExtensions = 0x20,RASEO_TerminalBeforeDial = 0x40,RASEO_TerminalAfterDial = 0x80,RASEO_ModemLights = 0x100,RASEO_SwCompression = 0x200,RASEO_RequireEncryptedPw = 0x400,RASEO_RequireMsEncryptedPw = 0x800,RASEO_RequireDataEncryption = 0x1000,RASEO_NetworkLogon = 0x2000,RASEO_UseLogonCredentials = 0x4000,RASEO_PromoteAlternates = 0x8000,RASEO_SecureLocalFiles = 0x10000,RASEO_RequireEAP = 0x20000,RASEO_RequirePAP = 0x40000,RASEO_RequireSPAP = 0x80000,RASEO_Custom = 0x100000,RASEO_PreviewPhoneNumber = 0x200000,RASEO_SharedPhoneNumbers = 0x800000,RASEO_PreviewUserPw = 0x1000000,RASEO_PreviewDomain = 0x2000000,RASEO_ShowDialingProgress = 0x4000000,RASEO_RequireCHAP = 0x8000000,RASEO_RequireMsCHAP = 0x10000000,RASEO_RequireMsCHAP2 = 0x20000000,RASEO_RequireW95MSCHAP = 0x40000000,RASEO_CustomScript = 0x80000000,};
enum MACRO_RASET {RASET_Phone = 1,RASET_Vpn = 2,RASET_Direct = 3,RASET_Internet = 4,RASET_Broadband = 5,};
enum MACRO_RASFP {RASFP_Ppp = 0x1,RASFP_Slip = 0x2,RASFP_Ras = 0x4,};
enum MACRO_RASNP {RASNP_NetBEUI = 0x1,RASNP_Ipx = 0x2,RASNP_Ip = 0x4,};
enum MACRO_RBBIM {RBBIM_STYLE = 0x1,RBBIM_COLORS = 0x2,RBBIM_TEXT = 0x4,RBBIM_IMAGE = 0x8,RBBIM_CHILD = 0x10,RBBIM_CHILDSIZE = 0x20,RBBIM_SIZE = 0x40,RBBIM_BACKGROUND = 0x80,RBBIM_ID = 0x100,RBBIM_IDEALSIZE = 0x200,RBBIM_LPARAM = 0x400,RBBIM_HEADERSIZE = 0x800,};
enum MACRO_RBSTR {RBSTR_CHANGERECT = 0x1,};
enum MACRO_RECOM {RECOM_DRIVER = 0x84,};
enum MACRO_REGDB {REGDB_E_FIRST = 0x80040150,REGDB_E_LAST = 0x8004015F,REGDB_S_FIRST = 0x40150,REGDB_S_LAST = 0x4015F,REGDB_E_READREGDB = 0x80040150,REGDB_E_WRITEREGDB = 0x80040151,REGDB_E_KEYMISSING = 0x80040152,REGDB_E_INVALIDVALUE = 0x80040153,REGDB_E_CLASSNOTREG = 0x80040154,REGDB_E_IIDNOTREG = 0x80040155,REGDB_E_BADTHREADINGMODEL = 0x80040156,};
enum MACRO_REGDF {REGDF_NOTDETIO = 0x1,REGDF_NOTDETMEM = 0x2,REGDF_NOTDETIRQ = 0x4,REGDF_NOTDETDMA = 0x8,REGDF_NOTDETALL = 0xF,REGDF_NEEDFULLCONFIG = 0x10,REGDF_GENFORCEDCONFIG = 0x20,REGDF_NODETCONFIG = 0x8000,REGDF_CONFLICTIO = 0x10000,REGDF_CONFLICTMEM = 0x20000,REGDF_CONFLICTIRQ = 0x40000,REGDF_CONFLICTDMA = 0x80000,REGDF_CONFLICTALL = 0xF0000,REGDF_MAPIRQ2TO9 = 0x100000,REGDF_NOTVERIFIED = 0x80000000,};
enum MACRO_RIDEV {RIDEV_REMOVE = 0x1,RIDEV_EXCLUDE = 0x10,RIDEV_PAGEONLY = 0x20,RIDEV_NOLEGACY = 0x30,RIDEV_INPUTSINK = 0x100,RIDEV_CAPTUREMOUSE = 0x200,RIDEV_NOHOTKEYS = 0x200,RIDEV_APPKEYS = 0x400,RIDEV_EXMODEMASK = 0xF0,};
enum MACRO_RMLEN {RMLEN = 98,};
enum MACRO_ROUTE {ROUTE_MATCHING = 31,ROUTE_LONGER = 32,ROUTE_SHORTER = 33,ROUTE_STATE = 34,};
enum MACRO_RPC_C {RPC_C_BINDING_INFINITE_TIMEOUT = 10,RPC_C_BINDING_MIN_TIMEOUT = 0,RPC_C_BINDING_DEFAULT_TIMEOUT = 5,RPC_C_BINDING_MAX_TIMEOUT = 9,RPC_C_CANCEL_INFINITE_TIMEOUT = -1,RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234,RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10,RPC_C_BIND_TO_ALL_NICS = 1,RPC_C_USE_INTERNET_PORT = 1,RPC_C_USE_INTRANET_PORT = 2,RPC_C_DONT_FAIL = 4,RPC_C_MQ_TEMPORARY = 0,RPC_C_MQ_PERMANENT = 1,RPC_C_MQ_CLEAR_ON_OPEN = 2,RPC_C_MQ_USE_EXISTING_SECURITY = 4,RPC_C_MQ_AUTHN_LEVEL_NONE = 0,RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY = 8,RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY = 16,RPC_C_OPT_MQ_DELIVERY = 1,RPC_C_OPT_MQ_PRIORITY = 2,RPC_C_OPT_MQ_JOURNAL = 3,RPC_C_OPT_MQ_ACKNOWLEDGE = 4,RPC_C_OPT_MQ_AUTHN_SERVICE = 5,RPC_C_OPT_MQ_AUTHN_LEVEL = 6,RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE = 7,RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED = 8,RPC_C_OPT_BINDING_NONCAUSAL = 9,RPC_C_OPT_SECURITY_CALLBACK = 10,RPC_C_OPT_UNIQUE_BINDING = 11,RPC_C_OPT_CALL_TIMEOUT = 12,RPC_C_OPT_DONT_LINGER = 13,RPC_C_OPT_MAX_OPTIONS = 14,RPC_C_MQ_EXPRESS = 0,RPC_C_MQ_RECOVERABLE = 1,RPC_C_MQ_JOURNAL_NONE = 0,RPC_C_MQ_JOURNAL_DEADLETTER = 1,RPC_C_MQ_JOURNAL_ALWAYS = 2,RPC_C_FULL_CERT_CHAIN = 1,RPC_C_STATS_CALLS_IN = 0,RPC_C_STATS_CALLS_OUT = 1,RPC_C_STATS_PKTS_IN = 2,RPC_C_STATS_PKTS_OUT = 3,RPC_C_AUTHN_LEVEL_DEFAULT = 0,RPC_C_AUTHN_LEVEL_NONE = 1,RPC_C_AUTHN_LEVEL_CONNECT = 2,RPC_C_AUTHN_LEVEL_CALL = 3,RPC_C_AUTHN_LEVEL_PKT = 4,RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5,RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6,RPC_C_IMP_LEVEL_DEFAULT = 0,RPC_C_IMP_LEVEL_ANONYMOUS = 1,RPC_C_IMP_LEVEL_IDENTIFY = 2,RPC_C_IMP_LEVEL_IMPERSONATE = 3,RPC_C_IMP_LEVEL_DELEGATE = 4,RPC_C_QOS_IDENTITY_STATIC = 0,RPC_C_QOS_IDENTITY_DYNAMIC = 1,RPC_C_QOS_CAPABILITIES_DEFAULT = 0,RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 1,RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC = 2,RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY = 4,RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE = 8,RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT = 16,RPC_C_PROTECT_LEVEL_DEFAULT = 0,RPC_C_PROTECT_LEVEL_NONE = 1,RPC_C_PROTECT_LEVEL_CONNECT = 2,RPC_C_PROTECT_LEVEL_CALL = 3,RPC_C_PROTECT_LEVEL_PKT = 4,RPC_C_PROTECT_LEVEL_PKT_INTEGRITY = 5,RPC_C_PROTECT_LEVEL_PKT_PRIVACY = 6,RPC_C_AUTHN_NONE = 0,RPC_C_AUTHN_DCE_PRIVATE = 1,RPC_C_AUTHN_DCE_PUBLIC = 2,RPC_C_AUTHN_DEC_PUBLIC = 4,RPC_C_AUTHN_GSS_NEGOTIATE = 9,RPC_C_AUTHN_WINNT = 10,RPC_C_AUTHN_GSS_SCHANNEL = 14,RPC_C_AUTHN_GSS_KERBEROS = 16,RPC_C_AUTHN_DPA = 17,RPC_C_AUTHN_MSN = 18,RPC_C_AUTHN_DIGEST = 21,RPC_C_AUTHN_MQ = 100,RPC_C_AUTHN_DEFAULT = -1,RPC_C_NO_CREDENTIALS = -1,RPC_C_SECURITY_QOS_VERSION = 1,RPC_C_SECURITY_QOS_VERSION_1 = 1,};
enum MACRO_RPC_E {RPC_E_UNEXPECTED = 0x8001FFFF,};
enum MACRO_RPC_P {RPC_P_ADDR_FORMAT_TCP_IPV4 = 1,RPC_P_ADDR_FORMAT_TCP_IPV6 = 2,RPC_PROXY_CONNECTION_TYPE_IN_PROXY = 0,RPC_PROXY_CONNECTION_TYPE_OUT_PROXY = 1,RPC_C_NS_SYNTAX_DEFAULT = 0,RPC_C_NS_SYNTAX_DCE = 3,RPC_C_PROFILE_DEFAULT_ELT = 0,RPC_C_PROFILE_ALL_ELT = 1,RPC_C_PROFILE_ALL_ELTS = 1,RPC_C_PROFILE_MATCH_BY_IF = 2,RPC_C_PROFILE_MATCH_BY_MBR = 3,RPC_C_PROFILE_MATCH_BY_BOTH = 4,RPC_C_NS_DEFAULT_EXP_AGE = -1,RPC_S_OK = 0,RPC_S_INVALID_ARG = 87,RPC_S_OUT_OF_MEMORY = 14,RPC_S_OUT_OF_THREADS = 164,RPC_S_INVALID_LEVEL = 87,RPC_S_BUFFER_TOO_SMALL = 122,RPC_S_INVALID_SECURITY_DESC = 1338,RPC_S_ACCESS_DENIED = 5,RPC_S_SERVER_OUT_OF_MEMORY = 1130,RPC_S_ASYNC_CALL_PENDING = 997,RPC_S_UNKNOWN_PRINCIPAL = 1332,RPC_S_TIMEOUT = 1460,RPC_X_NO_MEMORY = 14,RPC_X_INVALID_BOUND = 1734,RPC_X_INVALID_TAG = 1733,RPC_X_ENUM_VALUE_TOO_LARGE = 1781,RPC_X_SS_CONTEXT_MISMATCH = 6,RPC_X_INVALID_BUFFER = 1784,RPC_X_PIPE_APP_MEMORY = 14,RPC_X_INVALID_PIPE_OPERATION = 1831,RPC_C_NOTIFY_ON_SEND_COMPLETE = 1,RPC_C_INFINITE_TIMEOUT = -1,};
enum MACRO_SBARS {SBARS_SIZEGRIP = 0x100,SBARS_TOOLTIPS = 0x800,};
enum MACRO_SCARD {SCARD_S_SUCCESS = 0,SCARD_F_INTERNAL_ERROR = -2146435071,SCARD_E_CANCELLED = -2146435070,SCARD_E_INVALID_HANDLE = -2146435069,SCARD_E_INVALID_PARAMETER = -2146435068,SCARD_E_INVALID_TARGET = -2146435067,SCARD_E_NO_MEMORY = -2146435066,SCARD_F_WAITED_TOO_LONG = -2146435065,SCARD_E_INSUFFICIENT_BUFFER = -2146435064,SCARD_E_UNKNOWN_READER = -2146435063,SCARD_E_TIMEOUT = -2146435062,SCARD_E_SHARING_VIOLATION = -2146435061,SCARD_E_NO_SMARTCARD = -2146435060,SCARD_E_UNKNOWN_CARD = -2146435059,SCARD_E_CANT_DISPOSE = -2146435058,SCARD_E_PROTO_MISMATCH = -2146435057,SCARD_E_NOT_READY = -2146435056,SCARD_E_INVALID_VALUE = -2146435055,SCARD_E_SYSTEM_CANCELLED = -2146435054,SCARD_F_COMM_ERROR = -2146435053,SCARD_F_UNKNOWN_ERROR = -2146435052,SCARD_E_INVALID_ATR = -2146435051,SCARD_E_NOT_TRANSACTED = -2146435050,SCARD_E_READER_UNAVAILABLE = -2146435049,SCARD_P_SHUTDOWN = -2146435048,SCARD_E_PCI_TOO_SMALL = -2146435047,SCARD_E_READER_UNSUPPORTED = -2146435046,SCARD_E_DUPLICATE_READER = -2146435045,SCARD_E_CARD_UNSUPPORTED = -2146435044,SCARD_E_NO_SERVICE = -2146435043,SCARD_E_SERVICE_STOPPED = -2146435042,SCARD_E_UNEXPECTED = -2146435041,SCARD_E_ICC_INSTALLATION = -2146435040,SCARD_E_ICC_CREATEORDER = -2146435039,SCARD_E_UNSUPPORTED_FEATURE = -2146435038,SCARD_E_DIR_NOT_FOUND = -2146435037,SCARD_E_FILE_NOT_FOUND = -2146435036,SCARD_E_NO_DIR = -2146435035,SCARD_E_NO_FILE = -2146435034,SCARD_E_NO_ACCESS = -2146435033,SCARD_E_WRITE_TOO_MANY = -2146435032,SCARD_E_BAD_SEEK = -2146435031,SCARD_E_INVALID_CHV = -2146435030,SCARD_E_UNKNOWN_RES_MNG = -2146435029,SCARD_E_NO_SUCH_CERTIFICATE = -2146435028,SCARD_E_CERTIFICATE_UNAVAILABLE = -2146435027,SCARD_E_NO_READERS_AVAILABLE = -2146435026,SCARD_E_COMM_DATA_LOST = -2146435025,SCARD_E_NO_KEY_CONTAINER = -2146435024,SCARD_E_SERVER_TOO_BUSY = -2146435023,SCARD_W_UNSUPPORTED_CARD = -2146434971,SCARD_W_UNRESPONSIVE_CARD = -2146434970,SCARD_W_UNPOWERED_CARD = -2146434969,SCARD_W_RESET_CARD = -2146434968,SCARD_W_REMOVED_CARD = -2146434967,SCARD_W_SECURITY_VIOLATION = -2146434966,SCARD_W_WRONG_CHV = -2146434965,SCARD_W_CHV_BLOCKED = -2146434964,SCARD_W_EOF = -2146434963,SCARD_W_CANCELLED_BY_USER = -2146434962,SCARD_W_CARD_NOT_AUTHENTICATED = -2146434961,};
enum MACRO_SCERR {SCERR_NOCARDNAME = 0x4000,SCERR_NOGUIDS = 0x8000,};
enum MACRO_SCHED {SCHED_S_TASK_READY = 0x41300,SCHED_S_TASK_RUNNING = 0x41301,SCHED_S_TASK_DISABLED = 0x41302,SCHED_S_TASK_HAS_NOT_RUN = 0x41303,SCHED_S_TASK_NO_MORE_RUNS = 0x41304,SCHED_S_TASK_NOT_SCHEDULED = 0x41305,SCHED_S_TASK_TERMINATED = 0x41306,SCHED_S_TASK_NO_VALID_TRIGGERS = 0x41307,SCHED_S_EVENT_TRIGGER = 0x41308,SCHED_E_TRIGGER_NOT_FOUND = 0x80041309,SCHED_E_TASK_NOT_READY = 0x8004130A,SCHED_E_TASK_NOT_RUNNING = 0x8004130B,SCHED_E_SERVICE_NOT_INSTALLED = 0x8004130C,SCHED_E_CANNOT_OPEN_TASK = 0x8004130D,SCHED_E_INVALID_TASK = 0x8004130E,SCHED_E_ACCOUNT_INFORMATION_NOT_SET = 0x8004130F,SCHED_E_ACCOUNT_NAME_NOT_FOUND = 0x80041310,SCHED_E_ACCOUNT_DBASE_CORRUPT = 0x80041311,SCHED_E_NO_SECURITY_SERVICES = 0x80041312,SCHED_E_UNKNOWN_OBJECT_VERSION = 0x80041313,SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = 0x80041314,SCHED_E_SERVICE_NOT_RUNNING = 0x80041315,};
enum MACRO_SEC_E {SEC_E_INSUFFICIENT_MEMORY = 0x80090300,SEC_E_INVALID_HANDLE = 0x80090301,SEC_E_UNSUPPORTED_FUNCTION = 0x80090302,SEC_E_TARGET_UNKNOWN = 0x80090303,SEC_E_INTERNAL_ERROR = 0x80090304,SEC_E_SECPKG_NOT_FOUND = 0x80090305,SEC_E_NOT_OWNER = 0x80090306,SEC_E_CANNOT_INSTALL = 0x80090307,SEC_E_INVALID_TOKEN = 0x80090308,SEC_E_CANNOT_PACK = 0x80090309,SEC_E_QOP_NOT_SUPPORTED = 0x8009030A,SEC_E_NO_IMPERSONATION = 0x8009030B,SEC_E_LOGON_DENIED = 0x8009030C,SEC_E_UNKNOWN_CREDENTIALS = 0x8009030D,SEC_E_NO_CREDENTIALS = 0x8009030E,SEC_E_MESSAGE_ALTERED = 0x8009030F,SEC_E_OUT_OF_SEQUENCE = 0x80090310,SEC_E_NO_AUTHENTICATING_AUTHORITY = 0x80090311,SEC_I_CONTINUE_NEEDED = 0x90312,SEC_I_COMPLETE_NEEDED = 0x90313,SEC_I_COMPLETE_AND_CONTINUE = 0x90314,SEC_I_LOCAL_LOGON = 0x90315,SEC_E_BAD_PKGID = 0x80090316,SEC_E_CONTEXT_EXPIRED = 0x80090317,SEC_I_CONTEXT_EXPIRED = 0x90317,SEC_E_INCOMPLETE_MESSAGE = 0x80090318,SEC_E_INCOMPLETE_CREDENTIALS = 0x80090320,SEC_E_BUFFER_TOO_SMALL = 0x80090321,SEC_I_INCOMPLETE_CREDENTIALS = 0x90320,SEC_I_RENEGOTIATE = 0x90321,SEC_E_WRONG_PRINCIPAL = 0x80090322,SEC_I_NO_LSA_CONTEXT = 0x90323,SEC_E_TIME_SKEW = 0x80090324,SEC_E_UNTRUSTED_ROOT = 0x80090325,SEC_E_ILLEGAL_MESSAGE = 0x80090326,SEC_E_CERT_UNKNOWN = 0x80090327,SEC_E_CERT_EXPIRED = 0x80090328,SEC_E_ENCRYPT_FAILURE = 0x80090329,SEC_E_DECRYPT_FAILURE = 0x80090330,SEC_E_ALGORITHM_MISMATCH = 0x80090331,SEC_E_SECURITY_QOS_FAILED = 0x80090332,SEC_E_UNFINISHED_CONTEXT_DELETED = 0x80090333,SEC_E_NO_TGT_REPLY = 0x80090334,SEC_E_NO_IP_ADDRESSES = 0x80090335,SEC_E_WRONG_CREDENTIAL_HANDLE = 0x80090336,SEC_E_CRYPTO_SYSTEM_INVALID = 0x80090337,SEC_E_MAX_REFERRALS_EXCEEDED = 0x80090338,SEC_E_MUST_BE_KDC = 0x80090339,SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = 0x8009033A,SEC_E_TOO_MANY_PRINCIPALS = 0x8009033B,SEC_E_NO_PA_DATA = 0x8009033C,SEC_E_PKINIT_NAME_MISMATCH = 0x8009033D,SEC_E_SMARTCARD_LOGON_REQUIRED = 0x8009033E,SEC_E_SHUTDOWN_IN_PROGRESS = 0x8009033F,SEC_E_KDC_INVALID_REQUEST = 0x80090340,SEC_E_KDC_UNABLE_TO_REFER = 0x80090341,SEC_E_KDC_UNKNOWN_ETYPE = 0x80090342,SEC_E_UNSUPPORTED_PREAUTH = 0x80090343,SEC_E_DELEGATION_REQUIRED = 0x80090345,SEC_E_BAD_BINDINGS = 0x80090346,SEC_E_MULTIPLE_ACCOUNTS = 0x80090347,SEC_E_NO_KERB_KEY = 0x80090348,SEC_E_CERT_WRONG_USAGE = 0x80090349,SEC_E_DOWNGRADE_DETECTED = 0x80090350,SEC_E_SMARTCARD_CERT_REVOKED = 0x80090351,SEC_E_ISSUING_CA_UNTRUSTED = 0x80090352,SEC_E_REVOCATION_OFFLINE_C = 0x80090353,SEC_E_PKINIT_CLIENT_FAILURE = 0x80090354,SEC_E_SMARTCARD_CERT_EXPIRED = 0x80090355,SEC_E_NO_S4U_PROT_SUPPORT = 0x80090356,SEC_E_CROSSREALM_DELEGATION_FAILURE = 0x80090357,SEC_E_REVOCATION_OFFLINE_KDC = 0x80090358,SEC_E_ISSUING_CA_UNTRUSTED_KDC = 0x80090359,SEC_E_KDC_CERT_EXPIRED = 0x8009035A,SEC_E_KDC_CERT_REVOKED = 0x8009035B,SEC_E_NO_SPM = 0x80090304,SEC_E_NOT_SUPPORTED = 0x80090302,};
enum MACRO_SERKF {SERKF_SERIALKEYSON = 0x1,SERKF_AVAILABLE = 0x2,SERKF_INDICATOR = 0x4,};
enum MACRO_SETUP {SETUP_FAILURE = 0x85,AUDIT_FAILURE = 0x86,};
enum MACRO_SFGAO {SFGAO_CANCOPY = 1,SFGAO_CANMOVE = 2,SFGAO_CANLINK = 4,SFGAO_STORAGE = 8,SFGAO_CANRENAME = 16,SFGAO_CANDELETE = 32,SFGAO_HASPROPSHEET = 64,SFGAO_DROPTARGET = 256,SFGAO_CAPABILITYMASK = 375,SFGAO_ENCRYPTED = 8192,SFGAO_ISSLOW = 16384,SFGAO_GHOSTED = 32768,SFGAO_LINK = 65536,SFGAO_SHARE = 131072,SFGAO_READONLY = 262144,SFGAO_HIDDEN = 524288,SFGAO_DISPLAYATTRMASK = 1032192,SFGAO_FILESYSANCESTOR = 268435456,SFGAO_FOLDER = 536870912,SFGAO_FILESYSTEM = 1073741824,SFGAO_HASSUBFOLDER = -2147483648,SFGAO_CONTENTSMASK = -2147483648,SFGAO_VALIDATE = 16777216,SFGAO_REMOVABLE = 33554432,SFGAO_COMPRESSED = 67108864,SFGAO_BROWSABLE = 134217728,SFGAO_NONENUMERATED = 1048576,SFGAO_NEWCONTENT = 2097152,SFGAO_CANMONIKER = 4194304,SFGAO_HASSTORAGE = 4194304,SFGAO_STREAM = 4194304,SFGAO_STORAGEANCESTOR = 8388608,SFGAO_STORAGECAPMASK = 1891958792,};
enum MACRO_SHACF {SHACF_DEFAULT = 0x0,SHACF_FILESYSTEM = 0x1,SHACF_URLHISTORY = 0x2,SHACF_URLMRU = 0x4,SHACF_USETAB = 0x8,SHACF_FILESYS_ONLY = 0x10,SHACF_AUTOSUGGEST_FORCE_ON = 0x10000000,SHACF_AUTOSUGGEST_FORCE_OFF = 0x20000000,SHACF_AUTOAPPEND_FORCE_ON = 0x40000000,SHACF_AUTOAPPEND_FORCE_OFF = 0x80000000,};
enum MACRO_SHARD {SHARD_PIDL = 0x1,SHARD_PATHA = 0x2,SHARD_PATHW = 0x3,SHARD_PATH = 0x2,};
enum MACRO_SHCDF {SHCDF_UPDATEITEM = 0x1,};
enum MACRO_SHCNE {SHCNE_RENAMEITEM = 0x1,SHCNE_CREATE = 0x2,SHCNE_DELETE = 0x4,SHCNE_MKDIR = 0x8,SHCNE_RMDIR = 0x10,SHCNE_MEDIAINSERTED = 0x20,SHCNE_MEDIAREMOVED = 0x40,SHCNE_DRIVEREMOVED = 0x80,SHCNE_DRIVEADD = 0x100,SHCNE_NETSHARE = 0x200,SHCNE_NETUNSHARE = 0x400,SHCNE_ATTRIBUTES = 0x800,SHCNE_UPDATEDIR = 0x1000,SHCNE_UPDATEITEM = 0x2000,SHCNE_SERVERDISCONNECT = 0x4000,SHCNE_UPDATEIMAGE = 0x8000,SHCNE_DRIVEADDGUI = 0x10000,SHCNE_RENAMEFOLDER = 0x20000,SHCNE_FREESPACE = 0x40000,SHCNE_EXTENDED_EVENT = 0x4000000,SHCNE_ASSOCCHANGED = 0x8000000,SHCNE_DISKEVENTS = 0x2381F,SHCNE_GLOBALEVENTS = 0xC0581E0,SHCNE_ALLEVENTS = 0x7FFFFFFF,SHCNE_INTERRUPT = 0x80000000,};
enum MACRO_SHCNF {SHCNF_IDLIST = 0x0,SHCNF_PATHA = 0x1,SHCNF_PRINTERA = 0x2,SHCNF_DWORD = 0x3,SHCNF_PATHW = 0x5,SHCNF_PRINTERW = 0x6,SHCNF_TYPE = 0xFF,SHCNF_FLUSH = 0x1000,SHCNF_FLUSHNOWAIT = 0x2000,SHCNF_PATH = 0x1,SHCNF_PRINTER = 0x2,};
enum MACRO_SHDID {SHDID_ROOT_REGITEM = 1,SHDID_FS_FILE = 2,SHDID_FS_DIRECTORY = 3,SHDID_FS_OTHER = 4,SHDID_COMPUTER_DRIVE35 = 5,SHDID_COMPUTER_DRIVE525 = 6,SHDID_COMPUTER_REMOVABLE = 7,SHDID_COMPUTER_FIXED = 8,SHDID_COMPUTER_NETDRIVE = 9,SHDID_COMPUTER_CDROM = 10,SHDID_COMPUTER_RAMDISK = 11,SHDID_COMPUTER_OTHER = 12,SHDID_NET_DOMAIN = 13,SHDID_NET_SERVER = 14,SHDID_NET_SHARE = 15,SHDID_NET_RESTOFNET = 16,SHDID_NET_OTHER = 17,SHDID_COMPUTER_IMAGING = 18,SHDID_COMPUTER_AUDIO = 19,SHDID_COMPUTER_SHAREDDOCS = 20,};
enum MACRO_SHERB {SHERB_NOCONFIRMATION = 0x1,SHERB_NOPROGRESSUI = 0x2,SHERB_NOSOUND = 0x4,};
enum MACRO_SHFMT {SHFMT_ID_DEFAULT = 0xFFFF,SHFMT_OPT_FULL = 0x1,SHFMT_OPT_SYSONLY = 0x2,SHFMT_ERROR = 0xFFFFFFFF,SHFMT_CANCEL = 0xFFFFFFFE,SHFMT_NOFORMAT = 0xFFFFFFFD,};
enum MACRO_SHGFI {SHGFI_ICON = 0x100,SHGFI_DISPLAYNAME = 0x200,SHGFI_TYPENAME = 0x400,SHGFI_ATTRIBUTES = 0x800,SHGFI_ICONLOCATION = 0x1000,SHGFI_EXETYPE = 0x2000,SHGFI_SYSICONINDEX = 0x4000,SHGFI_LINKOVERLAY = 0x8000,SHGFI_SELECTED = 0x10000,SHGFI_ATTR_SPECIFIED = 0x20000,SHGFI_LARGEICON = 0x0,SHGFI_SMALLICON = 0x1,SHGFI_OPENICON = 0x2,SHGFI_SHELLICONSIZE = 0x4,SHGFI_PIDL = 0x8,SHGFI_USEFILEATTRIBUTES = 0x10,};
enum MACRO_SHTDN {SHTDN_REASON_FLAG_COMMENT_REQUIRED = 0x1000000,SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 0x2000000,SHTDN_REASON_FLAG_CLEAN_UI = 0x4000000,SHTDN_REASON_FLAG_DIRTY_UI = 0x8000000,SHTDN_REASON_FLAG_USER_DEFINED = 0x40000000,SHTDN_REASON_FLAG_PLANNED = 0x80000000,SHTDN_REASON_MAJOR_OTHER = 0x0,SHTDN_REASON_MAJOR_NONE = 0x0,SHTDN_REASON_MAJOR_HARDWARE = 0x10000,SHTDN_REASON_MAJOR_OPERATINGSYSTEM = 0x20000,SHTDN_REASON_MAJOR_SOFTWARE = 0x30000,SHTDN_REASON_MAJOR_APPLICATION = 0x40000,SHTDN_REASON_MAJOR_SYSTEM = 0x50000,SHTDN_REASON_MAJOR_POWER = 0x60000,SHTDN_REASON_MAJOR_LEGACY_API = 0x70000,SHTDN_REASON_MINOR_OTHER = 0x0,SHTDN_REASON_MINOR_NONE = 0xFF,SHTDN_REASON_MINOR_MAINTENANCE = 0x1,SHTDN_REASON_MINOR_INSTALLATION = 0x2,SHTDN_REASON_MINOR_UPGRADE = 0x3,SHTDN_REASON_MINOR_RECONFIG = 0x4,SHTDN_REASON_MINOR_HUNG = 0x5,SHTDN_REASON_MINOR_UNSTABLE = 0x6,SHTDN_REASON_MINOR_DISK = 0x7,SHTDN_REASON_MINOR_PROCESSOR = 0x8,SHTDN_REASON_MINOR_NETWORKCARD = 0x9,SHTDN_REASON_MINOR_POWER_SUPPLY = 0xA,SHTDN_REASON_MINOR_CORDUNPLUGGED = 0xB,SHTDN_REASON_MINOR_ENVIRONMENT = 0xC,SHTDN_REASON_MINOR_HARDWARE_DRIVER = 0xD,SHTDN_REASON_MINOR_OTHERDRIVER = 0xE,SHTDN_REASON_MINOR_BLUESCREEN = 0xF,SHTDN_REASON_MINOR_SERVICEPACK = 0x10,SHTDN_REASON_MINOR_HOTFIX = 0x11,SHTDN_REASON_MINOR_SECURITYFIX = 0x12,SHTDN_REASON_MINOR_SECURITY = 0x13,SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = 0x14,SHTDN_REASON_MINOR_WMI = 0x15,SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = 0x16,SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = 0x17,SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = 0x18,SHTDN_REASON_MINOR_MMC = 0x19,SHTDN_REASON_MINOR_TERMSRV = 0x20,SHTDN_REASON_MINOR_DC_PROMOTION = 0x21,SHTDN_REASON_MINOR_DC_DEMOTION = 0x22,SHTDN_REASON_UNKNOWN = 0xFF,SHTDN_REASON_LEGACY_API = 0x80070000,SHTDN_REASON_VALID_BIT_MASK = 0xC0FFFFFF,};
enum MACRO_SMART {SMART_GET_VERSION = 0x74080,SMART_SEND_DRIVE_COMMAND = 0x7C084,SMART_RCV_DRIVE_DATA = 0x7C088,};
enum MACRO_SMINV {SMINV_REFRESH = 0x1,SMINV_ID = 0x8,};
enum MACRO_SMSET {SMSET_TOP = 0x10000000,SMSET_BOTTOM = 0x20000000,SMSET_DONTOWN = 0x1,};
enum MACRO_SNLEN {SNLEN = 80,};
enum MACRO_SOUND {SOUND_SYSTEM_STARTUP = 1,SOUND_SYSTEM_SHUTDOWN = 2,SOUND_SYSTEM_BEEP = 3,SOUND_SYSTEM_ERROR = 4,SOUND_SYSTEM_QUESTION = 5,SOUND_SYSTEM_WARNING = 6,SOUND_SYSTEM_INFORMATION = 7,SOUND_SYSTEM_MAXIMIZE = 8,SOUND_SYSTEM_MINIMIZE = 9,SOUND_SYSTEM_RESTOREUP = 10,SOUND_SYSTEM_RESTOREDOWN = 11,SOUND_SYSTEM_APPSTART = 12,SOUND_SYSTEM_FAULT = 13,SOUND_SYSTEM_APPEND = 14,SOUND_SYSTEM_MENUCOMMAND = 15,SOUND_SYSTEM_MENUPOPUP = 16,};
enum MACRO_SPAPI {SPAPI_E_EXPECTED_SECTION_NAME = 0x800F0000,SPAPI_E_BAD_SECTION_NAME_LINE = 0x800F0001,SPAPI_E_SECTION_NAME_TOO_LONG = 0x800F0002,SPAPI_E_GENERAL_SYNTAX = 0x800F0003,SPAPI_E_WRONG_INF_STYLE = 0x800F0100,SPAPI_E_SECTION_NOT_FOUND = 0x800F0101,SPAPI_E_LINE_NOT_FOUND = 0x800F0102,SPAPI_E_NO_BACKUP = 0x800F0103,SPAPI_E_NO_ASSOCIATED_CLASS = 0x800F0200,SPAPI_E_CLASS_MISMATCH = 0x800F0201,SPAPI_E_DUPLICATE_FOUND = 0x800F0202,SPAPI_E_NO_DRIVER_SELECTED = 0x800F0203,SPAPI_E_KEY_DOES_NOT_EXIST = 0x800F0204,SPAPI_E_INVALID_DEVINST_NAME = 0x800F0205,SPAPI_E_INVALID_CLASS = 0x800F0206,SPAPI_E_DEVINST_ALREADY_EXISTS = 0x800F0207,SPAPI_E_DEVINFO_NOT_REGISTERED = 0x800F0208,SPAPI_E_INVALID_REG_PROPERTY = 0x800F0209,SPAPI_E_NO_INF = 0x800F020A,SPAPI_E_NO_SUCH_DEVINST = 0x800F020B,SPAPI_E_CANT_LOAD_CLASS_ICON = 0x800F020C,SPAPI_E_INVALID_CLASS_INSTALLER = 0x800F020D,SPAPI_E_DI_DO_DEFAULT = 0x800F020E,SPAPI_E_DI_NOFILECOPY = 0x800F020F,SPAPI_E_INVALID_HWPROFILE = 0x800F0210,SPAPI_E_NO_DEVICE_SELECTED = 0x800F0211,SPAPI_E_DEVINFO_LIST_LOCKED = 0x800F0212,SPAPI_E_DEVINFO_DATA_LOCKED = 0x800F0213,SPAPI_E_DI_BAD_PATH = 0x800F0214,SPAPI_E_NO_CLASSINSTALL_PARAMS = 0x800F0215,SPAPI_E_FILEQUEUE_LOCKED = 0x800F0216,SPAPI_E_BAD_SERVICE_INSTALLSECT = 0x800F0217,SPAPI_E_NO_CLASS_DRIVER_LIST = 0x800F0218,SPAPI_E_NO_ASSOCIATED_SERVICE = 0x800F0219,SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = 0x800F021A,SPAPI_E_DEVICE_INTERFACE_ACTIVE = 0x800F021B,SPAPI_E_DEVICE_INTERFACE_REMOVED = 0x800F021C,SPAPI_E_BAD_INTERFACE_INSTALLSECT = 0x800F021D,SPAPI_E_NO_SUCH_INTERFACE_CLASS = 0x800F021E,SPAPI_E_INVALID_REFERENCE_STRING = 0x800F021F,SPAPI_E_INVALID_MACHINENAME = 0x800F0220,SPAPI_E_REMOTE_COMM_FAILURE = 0x800F0221,SPAPI_E_MACHINE_UNAVAILABLE = 0x800F0222,SPAPI_E_NO_CONFIGMGR_SERVICES = 0x800F0223,SPAPI_E_INVALID_PROPPAGE_PROVIDER = 0x800F0224,SPAPI_E_NO_SUCH_DEVICE_INTERFACE = 0x800F0225,SPAPI_E_DI_POSTPROCESSING_REQUIRED = 0x800F0226,SPAPI_E_INVALID_COINSTALLER = 0x800F0227,SPAPI_E_NO_COMPAT_DRIVERS = 0x800F0228,SPAPI_E_NO_DEVICE_ICON = 0x800F0229,SPAPI_E_INVALID_INF_LOGCONFIG = 0x800F022A,SPAPI_E_DI_DONT_INSTALL = 0x800F022B,SPAPI_E_INVALID_FILTER_DRIVER = 0x800F022C,SPAPI_E_NON_WINDOWS_NT_DRIVER = 0x800F022D,SPAPI_E_NON_WINDOWS_DRIVER = 0x800F022E,SPAPI_E_NO_CATALOG_FOR_OEM_INF = 0x800F022F,SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = 0x800F0230,SPAPI_E_NOT_DISABLEABLE = 0x800F0231,SPAPI_E_CANT_REMOVE_DEVINST = 0x800F0232,SPAPI_E_INVALID_TARGET = 0x800F0233,SPAPI_E_DRIVER_NONNATIVE = 0x800F0234,SPAPI_E_IN_WOW64 = 0x800F0235,SPAPI_E_SET_SYSTEM_RESTORE_POINT = 0x800F0236,SPAPI_E_INCORRECTLY_COPIED_INF = 0x800F0237,SPAPI_E_SCE_DISABLED = 0x800F0238,SPAPI_E_UNKNOWN_EXCEPTION = 0x800F0239,SPAPI_E_PNP_REGISTRY_ERROR = 0x800F023A,SPAPI_E_REMOTE_REQUEST_UNSUPPORTED = 0x800F023B,SPAPI_E_NOT_AN_INSTALLED_OEM_INF = 0x800F023C,SPAPI_E_INF_IN_USE_BY_DEVICES = 0x800F023D,SPAPI_E_DI_FUNCTION_OBSOLETE = 0x800F023E,SPAPI_E_NO_AUTHENTICODE_CATALOG = 0x800F023F,SPAPI_E_AUTHENTICODE_DISALLOWED = 0x800F0240,SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER = 0x800F0241,SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED = 0x800F0242,SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = 0x800F0243,SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH = 0x800F0244,SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE = 0x800F0245,SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW = 0x800F0300,SPAPI_E_ERROR_NOT_INSTALLED = 0x800F1000,};
enum MACRO_SPCRP {SPCRP_SECURITY = 0x17,SPCRP_SECURITY_SDS = 0x18,SPCRP_DEVTYPE = 0x19,SPCRP_EXCLUSIVE = 0x1A,SPCRP_CHARACTERISTICS = 0x1B,SPCRP_MAXIMUM_PROPERTY = 0x1C,};
enum MACRO_SPDIT {SPDIT_NODRIVER = 0x0,SPDIT_CLASSDRIVER = 0x1,SPDIT_COMPATDRIVER = 0x2,};
enum MACRO_SPDRP {SPDRP_DEVICEDESC = 0x0,SPDRP_HARDWAREID = 0x1,SPDRP_COMPATIBLEIDS = 0x2,SPDRP_UNUSED0 = 0x3,SPDRP_SERVICE = 0x4,SPDRP_UNUSED1 = 0x5,SPDRP_UNUSED2 = 0x6,SPDRP_CLASS = 0x7,SPDRP_CLASSGUID = 0x8,SPDRP_DRIVER = 0x9,SPDRP_CONFIGFLAGS = 0xA,SPDRP_MFG = 0xB,SPDRP_FRIENDLYNAME = 0xC,SPDRP_LOCATION_INFORMATION = 0xD,SPDRP_PHYSICAL_DEVICE_OBJECT_NAME = 0xE,SPDRP_CAPABILITIES = 0xF,SPDRP_UI_NUMBER = 0x10,SPDRP_UPPERFILTERS = 0x11,SPDRP_LOWERFILTERS = 0x12,SPDRP_BUSTYPEGUID = 0x13,SPDRP_LEGACYBUSTYPE = 0x14,SPDRP_BUSNUMBER = 0x15,SPDRP_ENUMERATOR_NAME = 0x16,SPDRP_SECURITY = 0x17,SPDRP_SECURITY_SDS = 0x18,SPDRP_DEVTYPE = 0x19,SPDRP_EXCLUSIVE = 0x1A,SPDRP_CHARACTERISTICS = 0x1B,SPDRP_ADDRESS = 0x1C,SPDRP_UI_NUMBER_DESC_FORMAT = 0x1D,SPDRP_DEVICE_POWER_DATA = 0x1E,SPDRP_REMOVAL_POLICY = 0x1F,SPDRP_REMOVAL_POLICY_HW_DEFAULT = 0x20,SPDRP_REMOVAL_POLICY_OVERRIDE = 0x21,SPDRP_INSTALL_STATE = 0x22,SPDRP_LOCATION_PATHS = 0x23,SPDRP_MAXIMUM_PROPERTY = 0x24,};
enum MACRO_SPDSL {SPDSL_IGNORE_DISK = 0x1,SPDSL_DISALLOW_NEGATIVE_ADJUST = 0x2,};
enum MACRO_SPINT {SPINT_ACTIVE = 0x1,SPINT_DEFAULT = 0x2,SPINT_REMOVED = 0x4,};
enum MACRO_SPOOL {SPOOL_FILE_PERSISTENT = 0x1,SPOOL_FILE_TEMPORARY = 0x2,};
enum MACRO_SPOST {SPOST_NONE = 0,SPOST_PATH = 1,SPOST_URL = 2,SPOST_MAX = 3,};
enum MACRO_SPPSR {SPPSR_SELECT_DEVICE_RESOURCES = 1,SPPSR_ENUM_BASIC_DEVICE_PROPERTIES = 2,SPPSR_ENUM_ADV_DEVICE_PROPERTIES = 3,};
enum MACRO_SPRDI {SPRDI_FIND_DUPS = 0x1,};
enum MACRO_SPREG {SPREG_SUCCESS = 0x0,SPREG_LOADLIBRARY = 0x1,SPREG_GETPROCADDR = 0x2,SPREG_REGSVR = 0x3,SPREG_DLLINSTALL = 0x4,SPREG_TIMEOUT = 0x5,SPREG_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_SPWPT {SPWPT_SELECTDEVICE = 0x1,};
enum MACRO_STACK {STACK_SIZE_PARAM_IS_A_RESERVATION = 0x10000,};
enum MACRO_STAMP {STAMP_DESIGNVECTOR = 0x8007664,STAMP_AXESLIST = 0x8006C61,};
enum MACRO_START {START_PAGE_GENERAL = 0xFFFFFFFF,};
enum MACRO_STATE {STATE_SYSTEM_UNAVAILABLE = 0x1,STATE_SYSTEM_SELECTED = 0x2,STATE_SYSTEM_FOCUSED = 0x4,STATE_SYSTEM_PRESSED = 0x8,STATE_SYSTEM_CHECKED = 0x10,STATE_SYSTEM_MIXED = 0x20,STATE_SYSTEM_INDETERMINATE = 0x20,STATE_SYSTEM_READONLY = 0x40,STATE_SYSTEM_HOTTRACKED = 0x80,STATE_SYSTEM_DEFAULT = 0x100,STATE_SYSTEM_EXPANDED = 0x200,STATE_SYSTEM_COLLAPSED = 0x400,STATE_SYSTEM_BUSY = 0x800,STATE_SYSTEM_FLOATING = 0x1000,STATE_SYSTEM_MARQUEED = 0x2000,STATE_SYSTEM_ANIMATED = 0x4000,STATE_SYSTEM_INVISIBLE = 0x8000,STATE_SYSTEM_OFFSCREEN = 0x10000,STATE_SYSTEM_SIZEABLE = 0x20000,STATE_SYSTEM_MOVEABLE = 0x40000,STATE_SYSTEM_SELFVOICING = 0x80000,STATE_SYSTEM_FOCUSABLE = 0x100000,STATE_SYSTEM_SELECTABLE = 0x200000,STATE_SYSTEM_LINKED = 0x400000,STATE_SYSTEM_TRAVERSED = 0x800000,STATE_SYSTEM_MULTISELECTABLE = 0x1000000,STATE_SYSTEM_EXTSELECTABLE = 0x2000000,STATE_SYSTEM_ALERT_LOW = 0x4000000,STATE_SYSTEM_ALERT_MEDIUM = 0x8000000,STATE_SYSTEM_ALERT_HIGH = 0x10000000,STATE_SYSTEM_PROTECTED = 0x20000000,STATE_SYSTEM_VALID = 0x3FFFFFFF,};
enum MACRO_STATS {ICMP_STATS = 11,TCP_STATS = 12,};
enum MACRO_STGTY {STGTY_REPEAT = 0x100,};
enum MACRO_STILL {STILL_ACTIVE = 259,};
enum MACRO_STOCK {STOCK_LAST = 19,};
enum MACRO_STYLE {STYLE_DESCRIPTION_SIZE = 32,IMEMENUITEM_STRING_SIZE = 80,};
enum MACRO_STYPE {STYPE_BITMAP = 0,STYPE_DEVICE = 1,STYPE_DEVBITMAP = 3,};
enum MACRO_SV2GV {SV2GV_CURRENTVIEW = 4294967295,SV2GV_DEFAULTVIEW = 4294967294,};
enum MACRO_TBNRF {TBNRF_HIDEHELP = 0x1,TBNRF_ENDCUSTOMIZE = 0x2,};
enum MACRO_TC_OP {TC_OP_CHARACTER = 0x1,TC_OP_STROKE = 0x2,TC_CP_STROKE = 0x4,TC_CR_90 = 0x8,TC_CR_ANY = 0x10,TC_SF_X_YINDEP = 0x20,TC_SA_DOUBLE = 0x40,TC_SA_INTEGER = 0x80,TC_SA_CONTIN = 0x100,TC_EA_DOUBLE = 0x200,TC_IA_ABLE = 0x400,TC_UA_ABLE = 0x800,TC_SO_ABLE = 0x1000,TC_RA_ABLE = 0x2000,TC_VA_ABLE = 0x4000,TC_RESERVED = 0x8000,TC_SCROLLBLT = 0x10000,};
enum MACRO_TILDE {TILDE = 0x303,};
enum MACRO_TIMER {TIMER_QUERY_STATE = 0x1,TIMER_MODIFY_STATE = 0x2,TIMER_ALL_ACCESS = 0x1F0003,};
enum MACRO_TITLE {TITLE_EventlogMessageBox = 0x80001777,};
enum MACRO_TOKEN {TOKEN_ASSIGN_PRIMARY = 0x1,TOKEN_DUPLICATE = 0x2,TOKEN_IMPERSONATE = 0x4,TOKEN_QUERY = 0x8,TOKEN_QUERY_SOURCE = 0x10,TOKEN_ADJUST_PRIVILEGES = 0x20,TOKEN_ADJUST_GROUPS = 0x40,TOKEN_ADJUST_DEFAULT = 0x80,TOKEN_ADJUST_SESSIONID = 0x100,TOKEN_ALL_ACCESS_P = 0xF00FF,TOKEN_ALL_ACCESS = 0xF01FF,TOKEN_READ = 0x20008,TOKEN_WRITE = 0x200E0,TOKEN_EXECUTE = 0x20000,TOKEN_AUDIT_SUCCESS_INCLUDE = 0x1,TOKEN_AUDIT_SUCCESS_EXCLUDE = 0x2,TOKEN_AUDIT_FAILURE_INCLUDE = 0x4,TOKEN_AUDIT_FAILURE_EXCLUDE = 0x8,};
enum MACRO_TONOS {TONOS = 0x384,};
enum MACRO_TRACE {TRACE_LEVEL_NONE = 0,TRACE_LEVEL_FATAL = 1,TRACE_LEVEL_ERROR = 2,TRACE_LEVEL_WARNING = 3,TRACE_LEVEL_INFORMATION = 4,TRACE_LEVEL_VERBOSE = 5,TRACE_LEVEL_RESERVED6 = 6,TRACE_LEVEL_RESERVED7 = 7,TRACE_LEVEL_RESERVED8 = 8,TRACE_LEVEL_RESERVED9 = 9,};
enum MACRO_TRUST {TRUST_E_SYSTEM_ERROR = 0x80096001,TRUST_E_NO_SIGNER_CERT = 0x80096002,TRUST_E_COUNTER_SIGNER = 0x80096003,TRUST_E_CERT_SIGNATURE = 0x80096004,TRUST_E_TIME_STAMP = 0x80096005,TRUST_E_BAD_DIGEST = 0x80096010,TRUST_E_BASIC_CONSTRAINTS = 0x80096019,TRUST_E_FINANCIAL_CRITERIA = 0x8009601E,};
enum MACRO_TVSIL {TVSIL_NORMAL = 0,TVSIL_STATE = 2,};
enum MACRO_UNIFM {UNIFM_VERSION_1_0 = 0x10000,};
enum MACRO_USAGE {USAGE_MATCH_TYPE_AND = 0x0,USAGE_MATCH_TYPE_OR = 0x1,};
enum MACRO_VALID {VALID_INHERIT_FLAGS = 0x1F,};
enum MACRO_VCAPS {VCAPS_OVERLAY = 0x1,VCAPS_SRC_CAN_CLIP = 0x2,VCAPS_DST_CAN_CLIP = 0x4,VCAPS_CAN_SCALE = 0x8,};
enum MACRO_VIDCF {VIDCF_QUALITY = 0x1,VIDCF_CRUNCH = 0x2,VIDCF_TEMPORAL = 0x4,VIDCF_COMPRESSFRAMES = 0x8,VIDCF_DRAW = 0x10,VIDCF_FASTTEMPORALC = 0x20,VIDCF_FASTTEMPORALD = 0x80,};
enum MACRO_VIDEO {VIDEO_DRIVER_INIT_FAILURE = 0xB4,};
enum MACRO_WBEMS {WBEMS_DISPID_DERIVATION = 23,WBEMS_DISPID_OBJECT_READY = 1,WBEMS_DISPID_COMPLETED = 2,WBEMS_DISPID_PROGRESS = 3,WBEMS_DISPID_OBJECT_PUT = 4,WBEMS_DISPID_CONNECTION_READY = 5,};
enum MACRO_WHEEL {WHEEL_DELTA = 120,};
enum MACRO_WIN31 {WIN31_CLASS = 0,};
enum MACRO_WIN32 {WIN32 = 100,};
enum MACRO_WINNT {WINNT_INSTALLER_SIG = 1229345870,};
enum MACRO_WLOOP {WLOOP_TYPE_FORWARD = 0,};
enum MACRO_WM_FI {WM_FI_FILENAME = 900,};
enum MACRO_WNCON {WNCON_FORNETCARD = 0x1,WNCON_NOTROUTED = 0x2,WNCON_SLOWLINK = 0x4,WNCON_DYNAMIC = 0x8,};
enum MACRO_WNFMT {WNFMT_MULTILINE = 0x1,WNFMT_ABBREVIATED = 0x2,WNFMT_INENUM = 0x10,WNFMT_CONNECTION = 0x20,};
enum MACRO_WNODE {WNODE_FLAG_ALL_DATA = 0x1,WNODE_FLAG_SINGLE_INSTANCE = 0x2,WNODE_FLAG_SINGLE_ITEM = 0x4,WNODE_FLAG_EVENT_ITEM = 0x8,WNODE_FLAG_FIXED_INSTANCE_SIZE = 0x10,WNODE_FLAG_TOO_SMALL = 0x20,WNODE_FLAG_INSTANCES_SAME = 0x40,WNODE_FLAG_STATIC_INSTANCE_NAMES = 0x80,WNODE_FLAG_INTERNAL = 0x100,WNODE_FLAG_USE_TIMESTAMP = 0x200,WNODE_FLAG_PERSIST_EVENT = 0x400,WNODE_FLAG_EVENT_REFERENCE = 0x2000,WNODE_FLAG_ANSI_INSTANCENAMES = 0x4000,WNODE_FLAG_METHOD_ITEM = 0x8000,WNODE_FLAG_PDO_INSTANCE_NAMES = 0x10000,WNODE_FLAG_TRACED_GUID = 0x20000,WNODE_FLAG_LOG_WNODE = 0x40000,WNODE_FLAG_USE_GUID_PTR = 0x80000,WNODE_FLAG_USE_MOF_PTR = 0x100000,WNODE_FLAG_NO_HEADER = 0x200000,WNODE_FLAG_SEVERITY_MASK = 0xFF000000,};
enum MACRO_WRITE {WRITE_DAC = 0x40000,WRITE_OWNER = 0x80000,};
enum MACRO_WSANO {WSANO_ADDRESS = 11004,NO_ADDRESS = 11004,};
enum MACRO_XTYPF {XTYPF_NOBLOCK = 0x2,XTYPF_NODATA = 0x4,XTYPF_ACKREQ = 0x8,};
enum MACRO_chx10 {chx10 = 0x419,};
enum MACRO_chx11 {chx11 = 0x41A,};
enum MACRO_chx12 {chx12 = 0x41B,};
enum MACRO_chx13 {chx13 = 0x41C,};
enum MACRO_chx14 {chx14 = 0x41D,};
enum MACRO_chx15 {chx15 = 0x41E,};
enum MACRO_chx16 {chx16 = 0x41F,};
enum MACRO_cmb10 {cmb10 = 0x479,};
enum MACRO_cmb11 {cmb11 = 0x47A,};
enum MACRO_cmb12 {cmb12 = 0x47B,};
enum MACRO_cmb13 {cmb13 = 0x47C,};
enum MACRO_cmb14 {cmb14 = 0x47D,};
enum MACRO_cmb15 {cmb15 = 0x47E,};
enum MACRO_cmb16 {cmb16 = 0x47F,};
enum MACRO_edt10 {edt10 = 0x489,};
enum MACRO_edt11 {edt11 = 0x48A,};
enum MACRO_edt12 {edt12 = 0x48B,};
enum MACRO_edt13 {edt13 = 0x48C,};
enum MACRO_edt14 {edt14 = 0x48D,};
enum MACRO_edt15 {edt15 = 0x48E,};
enum MACRO_edt16 {edt16 = 0x48F,};
enum MACRO_fNDIS {fNDIS_GUID_TO_OID = 0x1,fNDIS_GUID_TO_STATUS = 0x2,fNDIS_GUID_ANSI_STRING = 0x4,fNDIS_GUID_UNICODE_STRING = 0x8,fNDIS_GUID_ARRAY = 0x10,fNDIS_GUID_ALLOW_READ = 0x20,fNDIS_GUID_ALLOW_WRITE = 0x40,};
enum MACRO_ioctl {ioctl_code = 0x1,};
enum MACRO_lst10 {lst10 = 0x469,};
enum MACRO_lst11 {lst11 = 0x46A,};
enum MACRO_lst12 {lst12 = 0x46B,};
enum MACRO_lst13 {lst13 = 0x46C,};
enum MACRO_lst14 {lst14 = 0x46D,};
enum MACRO_lst15 {lst15 = 0x46E,};
enum MACRO_lst16 {lst16 = 0x46F,};
enum MACRO_psh10 {psh10 = 0x409,};
enum MACRO_psh11 {psh11 = 0x40A,};
enum MACRO_psh12 {psh12 = 0x40B,};
enum MACRO_psh13 {psh13 = 0x40C,};
enum MACRO_psh14 {psh14 = 0x40D,};
enum MACRO_psh15 {psh15 = 0x40E,};
enum MACRO_psh16 {psh16 = 0x40F,};
enum MACRO_rad10 {rad10 = 0x429,};
enum MACRO_rad11 {rad11 = 0x42A,};
enum MACRO_rad12 {rad12 = 0x42B,};
enum MACRO_rad13 {rad13 = 0x42C,};
enum MACRO_rad14 {rad14 = 0x42D,};
enum MACRO_rad15 {rad15 = 0x42E,};
enum MACRO_rad16 {rad16 = 0x42F,};
enum MACRO_stc10 {stc10 = 0x449,};
enum MACRO_stc11 {stc11 = 0x44A,};
enum MACRO_stc12 {stc12 = 0x44B,};
enum MACRO_stc13 {stc13 = 0x44C,};
enum MACRO_stc14 {stc14 = 0x44D,};
enum MACRO_stc15 {stc15 = 0x44E,};
enum MACRO_stc16 {stc16 = 0x44F,};
enum MACRO_stc17 {stc17 = 0x450,};
enum MACRO_stc18 {stc18 = 0x451,};
enum MACRO_stc19 {stc19 = 0x452,};
enum MACRO_stc20 {stc20 = 0x453,};
enum MACRO_stc21 {stc21 = 0x454,};
enum MACRO_stc22 {stc22 = 0x455,};
enum MACRO_stc23 {stc23 = 0x456,};
enum MACRO_stc24 {stc24 = 0x457,};
enum MACRO_stc25 {stc25 = 0x458,};
enum MACRO_stc26 {stc26 = 0x459,};
enum MACRO_stc27 {stc27 = 0x45A,};
enum MACRO_stc28 {stc28 = 0x45B,};
enum MACRO_stc29 {stc29 = 0x45C,};
enum MACRO_stc30 {stc30 = 0x45D,};
enum MACRO_stc31 {stc31 = 0x45E,};
enum MACRO_stc32 {stc32 = 0x45F,};
typedef struct _MCDFOGSTATE MCDFOGSTATE;
typedef struct _MCDVIEWPORT MCDVIEWPORT;
typedef struct tagMDINEXTMENU MDINEXTMENU;
typedef struct tagMENUBARINFO MENUBARINFO;
typedef struct _MIBICMPINFO MIBICMPINFO;
typedef struct _MIB_BEST_IF MIB_BEST_IF;
typedef struct _MIB_ICMP_EX MIB_ICMP_EX;
typedef struct _MIB_IFTABLE MIB_IFTABLE;
typedef struct _MIB_IPSTATS MIB_IPSTATS;
typedef struct tagMIDIINCAPSA MIDIINCAPSA;
typedef struct tagMIDIINCAPSW MIDIINCAPSW;
typedef struct tagMIXERCAPS2A MIXERCAPS2A;
typedef struct tagMIXERCAPS2W MIXERCAPS2W;
typedef struct tagMONCBSTRUCT MONCBSTRUCT;
typedef struct tagMONITORINFO MONITORINFO;
typedef struct _MONITORINIT MONITORINIT;
struct MofCompiler;
typedef struct _NAME_BUFFER NAME_BUFFER;
typedef int NDIS_STATUS;
typedef void ( *NDR_RUNDOWN)(void *context);
typedef struct tagNMBCHOTITEM NMBCHOTITEM;
typedef struct tagNMIPADDRESS NMIPADDRESS;
typedef struct tagLVKEYDOWN NMLVKEYDOWN;
typedef struct tagNMPGHOTITEM NMPGHOTITEM;
typedef struct tagNMSELCHANGE NMSELCHANGE;
typedef struct tagNMTBHOTITEM NMTBHOTITEM;
typedef struct tagNMTBRESTORE NMTBRESTORE;
typedef struct tagTCKEYDOWN NMTCKEYDOWN;
typedef struct tagNMTREEVIEWA NMTREEVIEWA;
typedef struct tagNMTREEVIEWW NMTREEVIEWW;
typedef struct tagTVKEYDOWN NMTVKEYDOWN;
typedef struct tagAUXCAPS2A *NPAUXCAPS2A;
typedef struct tagAUXCAPS2W *NPAUXCAPS2W;
typedef struct tagCWPSTRUCT *NPCWPSTRUCT;
typedef struct tagEXTLOGPEN *NPEXTLOGPEN;
typedef struct tagGUIDELINE *NPGUIDELINE;
typedef struct tagJOYCAPS2A *NPJOYCAPS2A;
typedef struct tagJOYCAPS2W *NPJOYCAPS2W;
typedef struct joyinfoex_tag *NPJOYINFOEX;
typedef struct tagPOLYTEXTA *NPPOLYTEXTA;
typedef struct tagPOLYTEXTW *NPPOLYTEXTW;
typedef struct tagSTYLEBUFA *NPSTYLEBUFA;
typedef struct tagSTYLEBUFW *NPSTYLEBUFW;
typedef struct tagWNDCLASSA *NPWNDCLASSA;
typedef struct tagWNDCLASSW *NPWNDCLASSW;
typedef struct _NSP_ROUTINE NSP_ROUTINE;
typedef struct tagOCPFIPARAMS OCPFIPARAMS;
typedef struct _OFNOTIFYEXA OFNOTIFYEXA;
typedef struct _OFNOTIFYEXW OFNOTIFYEXW;
enum OLECMDTEXTF {OLECMDTEXTF_NONE = 0x0,OLECMDTEXTF_NAME = 0x1,OLECMDTEXTF_STATUS = 0x2,};
typedef struct tagPAINTSTRUCT PAINTSTRUCT;
typedef struct tagALTTABINFO *PALTTABINFO;
typedef struct _AppBarData *PAPPBARDATA;
typedef struct tagPARAMDESCEX PARAMDESCEX;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA *PARRAY_INFO;
typedef struct tagBITMAPINFO *PBITMAPINFO;
typedef struct _CERT_CHAIN *PCERT_CHAIN;
typedef struct tagCURSORINFO *PCURSORINFO;
typedef struct _DD_BLTDATA *PDD_BLTDATA;
typedef struct _DD_HALINFO *PDD_HALINFO;
typedef struct tagDIBSECTION *PDIBSECTION;
typedef struct tagDROPSTRUCT *PDROPSTRUCT;
typedef struct _DS3DVECTOR *PDS3DVECTOR;
typedef struct _DX_IRQDATA *PDX_IRQDATA;
typedef struct tagEMRELLIPSE *PEMRELLIPSE;
typedef struct tagABORTPATH *PEMRENDPATH;
typedef struct tagEMRFILLRGN *PEMRFILLRGN;
typedef struct tagEMRMASKBLT *PEMRMASKBLT;
typedef struct tagEMRPOLYLINE *PEMRPOLYGON;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETROP2;
typedef struct _PERBANDINFO PERBANDINFO;
typedef struct _FIELD_INFO *PFIELD_INFO;
typedef struct _73DB40CAD3136568FAD030BDAAB8FF71 *PFIXED_INFO;
typedef struct _C811A85A3CBAF233E045382DA27E29BF *PFLASHWINFO;
typedef union _FLOAT_LONG *PFLOAT_LONG;
typedef struct tagHH_ENUM_IT *PHH_ENUM_IT;
typedef struct tagHH_WINTYPE *PHH_WINTYPE;
typedef struct _IFIMETRICS *PIFIMETRICS;
typedef struct _INFCONTEXT *PINFCONTEXT;
typedef struct _IOSPACE_EX *PIOSPACE_EX;
typedef struct _IP_PATTERN *PIP_PATTERN;
typedef struct _JOB_INFO_3 *PJOB_INFO_3;
typedef struct tagKEYBDINPUT *PKEYBDINPUT;
typedef struct _CA0DACF90AABDE33CADDF7416F0C17F2 *PKSINTERVAL;
typedef struct _D611436986C6FEF0F654B123D787805F *PKSPRIORITY;
typedef struct _D8768C71F24D405D4B7DEC8016730D6C *PKSTOPOLOGY;
typedef struct _KS_DVD_YUV *PKS_DVD_YUV;
typedef struct tagKS_RGBQUAD *PKS_RGBQUAD;
typedef struct _LIST_ENTRY *PLIST_ENTRY;
typedef struct _D59F8FB060D1A4257ECDF2860F49B6AF *PLM_IRPARMS;
typedef struct tagLOGBRUSH32 *PLOGBRUSH32;
typedef struct tagLOGPALETTE *PLOGPALETTE;
typedef struct _LSA_STRING *PLSA_STRING;
typedef struct tagLVTILEINFO *PLVTILEINFO;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETARECORD *PMETARECORD;
typedef struct _MIB_TCPROW *PMIB_TCPROW;
typedef struct _MIB_UDPROW *PMIB_UDPROW;
typedef struct tagMINMAXINFO *PMINMAXINFO;
typedef struct tagMIXERCAPSA *PMIXERCAPSA;
typedef struct tagMIXERCAPSW *PMIXERCAPSW;
typedef struct tagMIXERLINEA *PMIXERLINEA;
typedef struct tagMIXERLINEW *PMIXERLINEW;
typedef struct _MONITORREG *PMONITORREG;
typedef struct tagMOUSEINPUT *PMOUSEINPUT;
typedef struct _OEMDMPARAM *POEMDMPARAM;
typedef struct _OEMUIPROCS *POEMUIPROCS;
typedef struct _PORT_DATA_1 PORT_DATA_1;
typedef struct _POINTFLOAT *PPOINTFLOAT;
typedef struct _RAS_PORT_0 *PRAS_PORT_0;
typedef struct _RAS_PORT_1 *PRAS_PORT_1;
typedef struct _RAS_USER_0 *PRAS_USER_0;
typedef struct tagPDEXA PRINTDLGEXA;
typedef struct tagPDEXW PRINTDLGEXW;
typedef struct tagPROPVARIANT PROPVARIANT;
typedef struct _RPC_POLICY *PRPC_POLICY;
typedef struct _SMALL_RECT *PSMALL_RECT;
typedef struct _SYSTEMTIME *PSYSTEMTIME;
typedef struct _TAPE_ERASE *PTAPE_ERASE;
typedef struct _TOKEN_USER *PTOKEN_USER;
typedef struct _TTGETTITLE *PTTGETTITLE;
typedef struct _UNIDRVINFO *PUNIDRVINFO;
typedef struct _F1B55BC800274E3ABC9BA0A46288924E *PUSN_RECORD;
typedef struct val_context *PVALCONTEXT;
typedef struct _8DF64ED1B184087013973064ABC778F1 *PVSC_LPWSTR;
typedef struct waveformat_tag *PWAVEFORMAT;
typedef struct _WIDTHTABLE *PWIDTHTABLE;
typedef struct tagWINDOWINFO *PWINDOWINFO;
typedef struct _WSAVersion *PWSAVERSION;
typedef struct _WST_BUFFER *PWST_BUFFER;
typedef struct tagQACONTAINER QACONTAINER;
typedef struct _QOS_SD_MODE QOS_SD_MODE;
typedef struct tagRAWKEYBOARD RAWKEYBOARD;
typedef struct _RPC_MESSAGE RPC_MESSAGE;
typedef struct _RPC_VERSION RPC_VERSION;
typedef struct _RSVP_ADSPEC RSVP_ADSPEC;
typedef struct _RSVP_POLICY RSVP_POLICY;
typedef struct _tagRemBINDINFO RemBINDINFO;
typedef struct tagRemHPALETTE RemHPALETTE;
struct SC_HANDLE__ {int unused;};
typedef struct tagSERIALKEYSA SERIALKEYSA;
typedef struct tagSERIALKEYSW SERIALKEYSW;
typedef int SHANDLE_PTR;
typedef struct _BE0BDAB4463CDAC89A1FD071673BF7FC SHDRAGIMAGE;
typedef struct _B860A2A409E82E290A04B87FD69A6FE2 SHELLSTATEA;
typedef struct _B860A2A409E82E290A04B87FD69A6FE2 SHELLSTATEW;
typedef struct _SHFILEINFOA SHFILEINFOA;
typedef struct _SHFILEINFOW SHFILEINFOW;
typedef struct _SI_COPYFILE SI_COPYFILE;
typedef struct sockaddr_in SOCKADDR_IN;
typedef struct tagSOFTKBDDATA SOFTKBDDATA;
typedef struct SPC_SIGINFO_ SPC_SIGINFO;
typedef struct tagSTATPROPSTG STATPROPSTG;
typedef struct tagSTYLESTRUCT STYLESTRUCT;
struct SWbemMethod;
struct SWbemObject;
enum SYSGEOCLASS {GEOCLASS_NATION = 0x10,GEOCLASS_REGION = 0xE,};
typedef struct _SYSTEM_INFO SYSTEM_INFO;
typedef struct tagTBADDBITMAP TBADDBITMAP;
typedef struct _TC_GEN_FLOW TC_GEN_FLOW;
typedef struct tagTEXTMETRICA TEXTMETRICA;
typedef struct tagTEXTMETRICW TEXTMETRICW;
typedef struct _TOKEN_OWNER TOKEN_OWNER;
typedef struct tagTTPOLYCURVE TTPOLYCURVE;
typedef struct tagTOOLINFOA TTTOOLINFOA;
typedef struct tagTOOLINFOW TTTOOLINFOW;
struct TaskbarList;
typedef struct _UUID_VECTOR UUID_VECTOR;
typedef struct _VIDEOMEMORY VIDEOMEMORY;
typedef struct tagWAVEINCAPSA WAVEINCAPSA;
typedef struct tagWAVEINCAPSW WAVEINCAPSW;
typedef struct _WCE_IAS_SET WCE_IAS_SET;
typedef struct _572C9F5A336F5256CCDD98B741672A4F WMIREGGUIDW;
typedef struct _E054F7F0B81E76E3D6D098531C7E763C WMIREGINFOW;
typedef struct tagWNDCLASSEXA WNDCLASSEXA;
typedef struct tagWNDCLASSEXW WNDCLASSEXW;
typedef struct _WSATHREADID WSATHREADID;
struct WbemContext;
struct WbemLocator;
enum WbemTimeout {wbemTimeoutInfinite = 0xFFFFFFFF,};
struct XMLDocument;
enum _D3DBLENDOP {D3DBLENDOP_ADD = 0x1,D3DBLENDOP_SUBTRACT = 0x2,D3DBLENDOP_REVSUBTRACT = 0x3,D3DBLENDOP_MIN = 0x4,D3DBLENDOP_MAX = 0x5,D3DBLENDOP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DCMPFUNC {D3DCMP_NEVER = 0x1,D3DCMP_LESS = 0x2,D3DCMP_EQUAL = 0x3,D3DCMP_LESSEQUAL = 0x4,D3DCMP_GREATER = 0x5,D3DCMP_NOTEQUAL = 0x6,D3DCMP_GREATEREQUAL = 0x7,D3DCMP_ALWAYS = 0x8,D3DCMP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DDEVTYPE {D3DDEVTYPE_HAL = 0x1,D3DDEVTYPE_REF = 0x2,D3DDEVTYPE_SW = 0x3,D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DFOGMODE {D3DFOG_NONE = 0x0,D3DFOG_EXP = 0x1,D3DFOG_EXP2 = 0x2,D3DFOG_LINEAR = 0x3,D3DFOG_FORCE_DWORD = 0x7FFFFFFF,};
struct _DWORD_BLOB {unsigned int clSize;unsigned int alData[1];};
struct _LIST_ENTRY {struct _LIST_ENTRY *Flink;struct _LIST_ENTRY *Blink;};
enum _MEDIA_TYPE {Unknown = 0x0,F5_1Pt2_512 = 0x1,F3_1Pt44_512 = 0x2,F3_2Pt88_512 = 0x3,F3_20Pt8_512 = 0x4,F3_720_512 = 0x5,F5_360_512 = 0x6,F5_320_512 = 0x7,F5_320_1024 = 0x8,F5_180_512 = 0x9,F5_160_512 = 0xA,RemovableMedia = 0xB,FixedMedia = 0xC,F3_120M_512 = 0xD,F3_640_512 = 0xE,F5_640_512 = 0xF,F5_720_512 = 0x10,F3_1Pt2_512 = 0x11,F3_1Pt23_1024 = 0x12,F5_1Pt23_1024 = 0x13,F3_128Mb_512 = 0x14,F3_230Mb_512 = 0x15,F8_256_128 = 0x16,F3_200Mb_512 = 0x17,F3_240M_512 = 0x18,F3_32M_512 = 0x19,};
struct _RPC_POLICY {unsigned int Length;unsigned int EndpointFlags;unsigned int NICFlags;};
enum _TOKEN_TYPE {TokenPrimary = 0x1,TokenImpersonation = 0x2,};
enum _URLZONEREG {URLZONEREG_DEFAULT = 0x0,URLZONEREG_HKLM = 0x1,URLZONEREG_HKCU = 0x2,};
enum tagCALLCONV {CC_FASTCALL = 0x0,CC_CDECL = 0x1,CC_MSCPASCAL = 0x2,CC_PASCAL = 0x2,CC_MACPASCAL = 0x3,CC_STDCALL = 0x4,CC_FPFASTCALL = 0x5,CC_SYSCALL = 0x6,CC_MPWCDECL = 0x7,CC_MPWPASCAL = 0x8,CC_MAX = 0x9,};
enum tagCALLTYPE {CALLTYPE_TOPLEVEL = 0x1,CALLTYPE_NESTED = 0x2,CALLTYPE_ASYNC = 0x3,CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,CALLTYPE_ASYNC_CALLPENDING = 0x5,};
enum tagCTRLINFO {CTRLINFO_EATS_RETURN = 0x1,CTRLINFO_EATS_ESCAPE = 0x2,};
enum tagDESCKIND {DESCKIND_NONE = 0x0,DESCKIND_FUNCDESC = 0x1,DESCKIND_VARDESC = 0x2,DESCKIND_TYPECOMP = 0x3,DESCKIND_IMPLICITAPPOBJ = 0x4,DESCKIND_MAX = 0x5,};
enum tagDVASPECT {DVASPECT_CONTENT = 0x1,DVASPECT_THUMBNAIL = 0x2,DVASPECT_ICON = 0x4,DVASPECT_DOCPRINT = 0x8,};
enum tagFUNCKIND {FUNC_VIRTUAL = 0x0,FUNC_PUREVIRTUAL = 0x1,FUNC_NONVIRTUAL = 0x2,FUNC_STATIC = 0x3,FUNC_DISPATCH = 0x4,};
enum tagGUIDKIND {GUIDKIND_DEFAULT_SOURCE_DISP_IID = 0x1,};
enum tagLIBFLAGS {LIBFLAG_FRESTRICTED = 0x1,LIBFLAG_FCONTROL = 0x2,LIBFLAG_FHIDDEN = 0x4,LIBFLAG_FHASDISKIMAGE = 0x8,};
enum tagLOCKTYPE {LOCK_WRITE = 0x1,LOCK_EXCLUSIVE = 0x2,LOCK_ONLYONCE = 0x4,};
enum tagMKREDUCE {MKRREDUCE_ONE = 0x30000,MKRREDUCE_TOUSER = 0x20000,MKRREDUCE_THROUGHUSER = 0x10000,MKRREDUCE_ALL = 0x0,};
enum tagOLECLOSE {OLECLOSE_SAVEIFDIRTY = 0x0,OLECLOSE_NOSAVE = 0x1,OLECLOSE_PROMPTSAVE = 0x2,};
enum tagOLECONTF {OLECONTF_EMBEDDINGS = 0x1,OLECONTF_LINKS = 0x2,OLECONTF_OTHERS = 0x4,OLECONTF_ONLYUSER = 0x8,OLECONTF_ONLYIFRUNNING = 0x10,};
enum tagSTATFLAG {STATFLAG_DEFAULT = 0x0,STATFLAG_NONAME = 0x1,STATFLAG_NOOPEN = 0x2,};
enum tagTYPEKIND {TKIND_ENUM = 0x0,TKIND_RECORD = 0x1,TKIND_MODULE = 0x2,TKIND_INTERFACE = 0x3,TKIND_DISPATCH = 0x4,TKIND_COCLASS = 0x5,TKIND_ALIAS = 0x6,TKIND_UNION = 0x7,TKIND_MAX = 0x8,};
enum tagUASFLAGS {UAS_NORMAL = 0x0,UAS_BLOCKED = 0x1,UAS_NOPARENTENABLE = 0x2,UAS_MASK = 0x3,};
enum tagVARFLAGS {VARFLAG_FREADONLY = 0x1,VARFLAG_FSOURCE = 0x2,VARFLAG_FBINDABLE = 0x4,VARFLAG_FREQUESTEDIT = 0x8,VARFLAG_FDISPLAYBIND = 0x10,VARFLAG_FDEFAULTBIND = 0x20,VARFLAG_FHIDDEN = 0x40,VARFLAG_FRESTRICTED = 0x80,VARFLAG_FDEFAULTCOLLELEM = 0x100,VARFLAG_FUIDEFAULT = 0x200,VARFLAG_FNONBROWSABLE = 0x400,VARFLAG_FREPLACEABLE = 0x800,VARFLAG_FIMMEDIATEBIND = 0x1000,};
typedef struct _userHBITMAP userHBITMAP;
typedef struct _userHGLOBAL userHGLOBAL;
typedef struct _wireBRECORD *wireBRECORD;
typedef struct _wireVARIANT *wireVARIANT;
typedef struct _ACE_HEADER ACE_HEADER;
typedef struct tagALTTABINFO ALTTABINFO;
typedef struct _AppBarData APPBARDATA;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA ARRAY_INFO;
typedef struct _ATTACHLIST ATTACHLIST;
typedef struct tagBIND_OPTS2 BIND_OPTS2;
typedef struct tagBITMAPINFO BITMAPINFO;
typedef struct _PUBLICKEYSTRUC BLOBHEADER;
typedef struct tagCABSTRBLOB CABSTRBLOB;
typedef struct tagCACLIPDATA CACLIPDATA;
typedef struct tagCAFILETIME CAFILETIME;
typedef struct tagCALPOLESTR CALPOLESTR;
typedef struct _CERT_CHAIN CERT_CHAIN;
typedef struct _COAUTHINFO COAUTHINFO;
typedef struct _COMMCONFIG COMMCONFIG;
typedef struct _CONNECTION CONNECTION;
typedef struct tagCSPLATFORM CSPLATFORM;
typedef struct tagCURSORINFO CURSORINFO;
typedef struct _D3DHVERTEX D3DHVERTEX;
typedef struct _D3DLVERTEX D3DLVERTEX;
typedef struct _DCIOVERLAY DCIOVERLAY;
typedef struct _DDBLTBATCH DDBLTBATCH;
typedef struct _DDCAPS_DX1 DDCAPS_DX1;
typedef struct _DDCAPS_DX3 DDCAPS_DX3;
typedef struct _DDCAPS_DX5 DDCAPS_DX5;
typedef struct _DDCAPS_DX6 DDCAPS_DX6;
typedef struct _DDCAPS_DX7 DDCAPS_DX7;
typedef struct _DDCOLORKEY DDCOLORKEY;
typedef struct _DDCORECAPS DDCORECAPS;
typedef struct _DD_BLTDATA DD_BLTDATA;
typedef struct _DD_HALINFO DD_HALINFO;
typedef struct tagDIBSECTION DIBSECTION;
typedef struct tagDISPPARAMS DISPPARAMS;
typedef struct _DLSVERSION DLSVERSION;
typedef struct tagDROPSTRUCT DROPSTRUCT;
typedef struct _DS3DBUFFER DS3DBUFFER;
typedef struct _DS3DVECTOR DS3DVECTOR;
typedef struct _DSFXChorus DSFXChorus;
typedef struct _DSFXGargle DSFXGargle;
typedef struct _DWORD_BLOB DWORD_BLOB;
typedef struct _DX_IRQDATA DX_IRQDATA;
struct DataSource {struct DataSourceVtbl *lpVtbl;};
typedef struct tagEMRELLIPSE EMRELLIPSE;
typedef struct tagABORTPATH EMRENDPATH;
typedef struct tagEMRFILLRGN EMRFILLRGN;
typedef struct tagEMRMASKBLT EMRMASKBLT;
typedef struct tagEMRPOLYLINE EMRPOLYGON;
typedef struct tagEMRSELECTCLIPPATH EMRSETROP2;
typedef struct _FIELD_INFO FIELD_INFO;
typedef struct tagFILTERKEYS FILTERKEYS;
typedef struct _73DB40CAD3136568FAD030BDAAB8FF71 FIXED_INFO;
typedef struct _C811A85A3CBAF233E045382DA27E29BF FLASHWINFO;
typedef union _FLOAT_LONG FLOAT_LONG;
typedef struct _068AF82868DFBF98C4A3A88443B401AE FVSHOWINFO;
typedef int FXPT2DOT30;
struct FolderItem {struct FolderItemVtbl *lpVtbl;};
typedef struct _GDI_OBJECT GDI_OBJECT;
typedef struct HACMDRIVER__ *HACMDRIVER;
typedef struct HACMSTREAM__ *HACMSTREAM;
typedef unsigned int HANDLE_PTR;
typedef void *HCERTSTORE;
struct HDDEDATA__ {int unused;};
typedef struct tagHHN_NOTIFY HHN_NOTIFY;
typedef struct tagHH_ENUM_IT HH_ENUM_IT;
typedef struct tagHH_WINTYPE HH_WINTYPE;
typedef struct _IMAGELIST *HIMAGELIST;
struct HMIDIOUT__ {int unused;};
struct HMONITOR__ {int unused;};
struct HPALETTE__ {int unused;};
struct HRASCONN__ {int unused;};
typedef struct HSEMAPHORE__ *HSEMAPHORE;
struct HWAVEOUT__ {int unused;};
struct IAVIStream {struct IAVIStreamVtbl *lpVtbl;};
typedef struct _9223FF9C4398B5998F8B0B2319A44BF2 ICCOMPRESS;
struct ICDBurnExt {struct ICDBurnExtVtbl *lpVtbl;};
struct ICopyHookA {struct ICopyHookAVtbl *lpVtbl;};
struct ICopyHookW {struct ICopyHookWVtbl *lpVtbl;};
struct IDVGetEnum {struct IDVGetEnumVtbl *lpVtbl;};
struct IDirect3D8 {struct IDirect3D8Vtbl *lpVtbl;};
struct IDispError {struct IDispErrorVtbl *lpVtbl;};
struct IErrorInfo {struct IErrorInfoVtbl *lpVtbl;};
typedef struct _IFIMETRICS IFIMETRICS;
struct IKsControl {struct IKsControlVtbl *lpVtbl;};
struct ILockBytes {struct ILockBytesVtbl *lpVtbl;};
struct IMallocSpy {struct IMallocSpyVtbl *lpVtbl;};
struct IMenuPopup {struct IMenuPopupVtbl *lpVtbl;};
typedef struct _INFCONTEXT INFCONTEXT;
typedef struct _INSTHEADER INSTHEADER;
typedef struct _IOSPACE_EX IOSPACE_EX;
struct IOleCache2 {struct IOleCache2Vtbl *lpVtbl;};
struct IOleObject {struct IOleObjectVtbl *lpVtbl;};
struct IOleWindow {struct IOleWindowVtbl *lpVtbl;};
typedef struct _IP_PATTERN IP_PATTERN;
struct IQueryInfo {struct IQueryInfoVtbl *lpVtbl;};
struct IRpcHelper {struct IRpcHelperVtbl *lpVtbl;};
struct ISWbemSink {struct ISWbemSinkVtbl *lpVtbl;};
struct IShellIcon {struct IShellIconVtbl *lpVtbl;};
struct IShellItem {struct IShellItemVtbl *lpVtbl;};
struct IShellMenu {struct IShellMenuVtbl *lpVtbl;};
struct IShellView {struct IShellViewVtbl *lpVtbl;};
struct ISurrogate {struct ISurrogateVtbl *lpVtbl;};
typedef struct _ITEMIDLIST ITEMIDLIST;
struct ITypeInfo2 {struct ITypeInfo2Vtbl *lpVtbl;};
typedef struct _JOB_INFO_3 JOB_INFO_3;
typedef struct tagKEYBDINPUT KEYBDINPUT;
typedef struct _CA0DACF90AABDE33CADDF7416F0C17F2 KSINTERVAL;
typedef struct _D611436986C6FEF0F654B123D787805F KSPRIORITY;
typedef struct _D8768C71F24D405D4B7DEC8016730D6C KSTOPOLOGY;
typedef struct _KS_DVD_YUV KS_DVD_YUV;
typedef struct tagKS_RGBQUAD KS_RGBQUAD;
typedef struct _LIST_ENTRY LIST_ENTRY;
typedef struct _D59F8FB060D1A4257ECDF2860F49B6AF LM_IRPARMS;
typedef struct tagLOGBRUSH32 LOGBRUSH32;
typedef struct tagLOGPALETTE LOGPALETTE;
typedef struct _ABCFLOAT *LPABCFLOAT;
typedef struct tagAUXCAPSA *LPAUXCAPSA;
typedef struct tagAUXCAPSW *LPAUXCAPSW;
typedef IBindHost *LPBINDHOST;
typedef struct tagBSTRBLOB *LPBSTRBLOB;
typedef struct _COLORMAP *LPCOLORMAP;
typedef struct _COMMPROP *LPCOMMPROP;
typedef  PROPPRG *LPCPROPPRG;
typedef struct tagCUSTDATA *LPCUSTDATA;
typedef struct _D3DLIGHT *LPD3DLIGHT;
typedef struct _D3DPOINT *LPD3DPOINT;
typedef struct _D3DSTATE *LPD3DSTATE;
typedef struct _D3DSTATS *LPD3DSTATS;
typedef float *LPD3DVALUE;
typedef struct _devicemodeA *LPDEVMODEA;
typedef struct _devicemodeW *LPDEVMODEW;
typedef struct tagDEVNAMES *LPDEVNAMES;
typedef IDispatch *LPDISPATCH;
typedef struct _DOCINFOA *LPDOCINFOA;
typedef struct _DOCINFOW *LPDOCINFOW;
typedef struct _DSCBCAPS *LPDSCBCAPS;
typedef struct _DSCFXAec *LPDSCFXAec;
typedef struct _DSFXEcho *LPDSFXEcho;
typedef struct tagELEMDESC *LPELEMDESC;
typedef IEnumGUID *LPENUMGUID;
typedef IErrorLog *LPERRORLOG;
typedef struct tagEVENTMSG *LPEVENTMSG;
typedef struct _FILETIME *LPFILETIME;
typedef struct _flowspec *LPFLOWSPEC;
typedef struct tagFONTDESC *LPFONTDESC;
typedef IFontDisp *LPFONTDISP;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef struct tagGLYPHSET *LPGLYPHSET;
typedef struct _HD_LAYOUT *LPHDLAYOUT;
typedef struct tagHELPINFO *LPHELPINFO;
typedef struct tagJOYCAPSA *LPJOYCAPSA;
typedef struct tagJOYCAPSW *LPJOYCAPSW;
typedef struct tagLOGBRUSH *LPLOGBRUSH;
typedef struct tagLOGFONTA *LPLOGFONTA;
typedef struct tagLOGFONTW *LPLOGFONTW;
typedef IMarshal2 *LPMARSHAL2;
typedef struct tagMENUINFO *LPMENUINFO;
typedef struct _MMCKINFO *LPMMCKINFO;
typedef struct _MMIOINFO *LPMMIOINFO;
typedef struct _MONITOR2 *LPMONITOR2;
typedef struct tagNMTBSAVE *LPNMTBSAVE;
typedef struct _NM_UPDOWN *LPNMUPDOWN;
typedef struct _NS_INFOA *LPNS_INFOA;
typedef struct _NS_INFOW *LPNS_INFOW;
typedef struct _OFSTRUCT *LPOFSTRUCT;
typedef IOleCache *LPOLECACHE;
typedef struct tagPELARRAY *LPPELARRAY;
typedef struct tagPICTDESC *LPPICTDESC;
typedef struct protoent *LPPROTOENT;
typedef struct tagRAWINPUT *LPRAWINPUT;
typedef struct tagRAWMOUSE *LPRAWMOUSE;
typedef struct _RGNRANGE *LPRGNRANGE;
typedef struct _RIP_INFO *LPRIP_INFO;
typedef struct sockaddr *LPSOCKADDR;
typedef struct _TBBUTTON *LPTBBUTTON;
typedef struct timecaps_tag *LPTIMECAPS;
typedef struct tagTLIBATTR *LPTLIBATTR;
typedef struct tagTRANSMSG *LPTRANSMSG;
typedef struct tagTVSORTCB *LPTVSORTCB;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef ITypeComp *LPTYPECOMP;
typedef ITypeInfo *LPTYPEINFO;
typedef ITypeLib2 *LPTYPELIB2;
typedef struct videohdr_tag *LPVIDEOHDR;
typedef struct _WAVELINK *LPWAVELINK;
typedef struct _LSA_STRING LSA_STRING;
typedef struct tagLVBKIMAGEA LVBKIMAGEA;
typedef struct tagLVBKIMAGEW LVBKIMAGEW;
typedef struct tagLVTILEINFO LVTILEINFO;
enum MACRO_ABLE {ABLE_TO_RECV_RSVP = 50002,};
enum MACRO_ACDD {ACDD_VISIBLE = 0x1,};
enum MACRO_ACPI {ACPI_DRIVER_INTERNAL = 0xA3,};
enum MACRO_ADDR {ADDR_ANY = 0,};
enum MACRO_ANSI {ANSI_NULL = 0,UNICODE_NULL = 0,};
enum MACRO_ASFW {ASFW_ANY = 4294967295,};
enum MACRO_ATOM {ATOM_HTMLHELP_API_ANSI = 14,ATOM_HTMLHELP_API_UNICODE = 15,};
enum MACRO_ATTR {ATTR_INPUT = 0x0,ATTR_TARGET_CONVERTED = 0x1,ATTR_CONVERTED = 0x2,ATTR_TARGET_NOTCONVERTED = 0x3,ATTR_INPUT_ERROR = 0x4,ATTR_FIXEDCONVERTED = 0x5,};
enum MACRO_AUTH {AUTH_REQ_ALLOW_FORWARDABLE = 0x1,AUTH_REQ_ALLOW_PROXIABLE = 0x2,AUTH_REQ_ALLOW_POSTDATE = 0x4,AUTH_REQ_ALLOW_RENEWABLE = 0x8,AUTH_REQ_ALLOW_NOADDRESS = 0x10,AUTH_REQ_ALLOW_ENC_TKT_IN_SKEY = 0x20,AUTH_REQ_ALLOW_VALIDATE = 0x40,AUTH_REQ_VALIDATE_CLIENT = 0x80,AUTH_REQ_OK_AS_DELEGATE = 0x100,AUTH_REQ_PREAUTH_REQUIRED = 0x200,AUTH_REQ_TRANSITIVE_TRUST = 0x400,AUTH_REQ_ALLOW_S4U_DELEGATE = 0x800,AUTH_REQ_PER_USER_FLAGS = 0x4F,};
enum MACRO_AVIF {AVIF_HASINDEX = 0x10,AVIF_MUSTUSEINDEX = 0x20,AVIF_ISINTERLEAVED = 0x100,AVIF_WASCAPTUREFILE = 0x10000,AVIF_COPYRIGHTED = 0x20000,};
enum MACRO_BASE {MMSYSERR_BASE = 0,WAVERR_BASE = 32,MIDIERR_BASE = 64,TIMERR_BASE = 96,JOYERR_BASE = 160,MCIERR_BASE = 256,MIXERR_BASE = 1024,};
enum MACRO_BAUD {BAUD_075 = 0x1,BAUD_110 = 0x2,BAUD_134_5 = 0x4,BAUD_150 = 0x8,BAUD_300 = 0x10,BAUD_600 = 0x20,BAUD_1200 = 0x40,BAUD_1800 = 0x80,BAUD_2400 = 0x100,BAUD_4800 = 0x200,BAUD_7200 = 0x400,BAUD_9600 = 0x800,BAUD_14400 = 0x1000,BAUD_19200 = 0x2000,BAUD_38400 = 0x4000,BAUD_56K = 0x8000,BAUD_128K = 0x10000,BAUD_115200 = 0x20000,BAUD_57600 = 0x40000,BAUD_USER = 0x10000000,};
enum MACRO_BEST {BEST_IF = 20,BEST_ROUTE = 21,};
enum MACRO_BFFM {BFFM_INITIALIZED = 1,BFFM_SELCHANGED = 2,BFFM_VALIDATEFAILEDA = 3,BFFM_VALIDATEFAILEDW = 4,BFFM_IUNKNOWN = 5,BFFM_SETSTATUSTEXTA = 1124,BFFM_ENABLEOK = 1125,BFFM_SETSELECTIONA = 1126,BFFM_SETSELECTIONW = 1127,BFFM_SETSTATUSTEXTW = 1128,BFFM_SETOKTEXT = 1129,BFFM_SETEXPANDED = 1130,BFFM_SETSTATUSTEXT = 1124,BFFM_SETSELECTION = 1126,BFFM_VALIDATEFAILED = 3,};
enum MACRO_BIDI {BIDI_ACCESS_ADMINISTRATOR = 0x1,BIDI_ACCESS_USER = 0x2,};
enum MACRO_BOOL {FALSE = 0,TRUE = 1,};
enum MACRO_BSIM {BSIM_STATE = 0x1,BSIM_STYLE = 0x2,};
enum MACRO_BSIS {BSIS_AUTOGRIPPER = 0x0,BSIS_NOGRIPPER = 0x1,BSIS_ALWAYSGRIPPER = 0x2,BSIS_LEFTALIGN = 0x4,BSIS_SINGLECLICK = 0x8,BSIS_NOCONTEXTMENU = 0x10,BSIS_NODROPTARGET = 0x20,BSIS_NOCAPTION = 0x40,BSIS_PREFERNOLINEBREAK = 0x80,BSIS_LOCKED = 0x100,};
enum MACRO_BSSF {BSSF_VISIBLE = 0x1,BSSF_NOTITLE = 0x2,BSSF_UNDELETEABLE = 0x1000,};
enum MACRO_BTNS {BTNS_BUTTON = 0,BTNS_SEP = 1,BTNS_CHECK = 2,BTNS_GROUP = 4,BTNS_CHECKGROUP = 6,BTNS_DROPDOWN = 8,BTNS_AUTOSIZE = 16,BTNS_NOPREFIX = 32,BTNS_SHOWTEXT = 64,BTNS_WHOLEDROPDOWN = 128,};
enum MACRO_BYTE {BYTE_BIDIR = 0x10,};
enum MACRO_CADV {CADV_LATEACK = 0xFFFF,};
enum MACRO_CALG {CALG_MD2 = 32769,CALG_MD4 = 32770,CALG_MD5 = 32771,CALG_SHA = 32772,CALG_SHA1 = 32772,CALG_MAC = 32773,CALG_RSA_SIGN = 9216,CALG_DSS_SIGN = 8704,CALG_NO_SIGN = 8192,CALG_RSA_KEYX = 41984,CALG_DES = 26113,CALG_3DES_112 = 26121,CALG_3DES = 26115,CALG_DESX = 26116,CALG_RC2 = 26114,CALG_RC4 = 26625,CALG_SEAL = 26626,CALG_DH_SF = 43521,CALG_DH_EPHEM = 43522,CALG_AGREEDKEY_ANY = 43523,CALG_KEA_KEYX = 43524,CALG_HUGHES_MD5 = 40963,CALG_SKIPJACK = 26122,CALG_TEK = 26123,CALG_CYLINK_MEK = 26124,CALG_SSL3_SHAMD5 = 32776,CALG_SSL3_MASTER = 19457,CALG_SCHANNEL_MASTER_HASH = 19458,CALG_SCHANNEL_MAC_KEY = 19459,CALG_SCHANNEL_ENC_KEY = 19463,CALG_PCT1_MASTER = 19460,CALG_SSL2_MASTER = 19461,CALG_TLS1_MASTER = 19462,CALG_RC5 = 26125,CALG_HMAC = 32777,CALG_TLS1PRF = 32778,CALG_HASH_REPLACE_OWF = 32779,CALG_AES_128 = 26126,CALG_AES_192 = 26127,CALG_AES_256 = 26128,CALG_AES = 26129,CALG_SHA_256 = 32780,CALG_SHA_384 = 32781,CALG_SHA_512 = 32782,};
enum MACRO_CALL {CALL_PENDING = 0x2,};
enum MACRO_CBEM {CBEM_INSERTITEMA = 1025,CBEM_SETIMAGELIST = 1026,CBEM_GETIMAGELIST = 1027,CBEM_GETITEMA = 1028,CBEM_SETITEMA = 1029,CBEM_DELETEITEM = 324,CBEM_GETCOMBOCONTROL = 1030,CBEM_GETEDITCONTROL = 1031,CBEM_SETEXSTYLE = 1032,CBEM_SETEXTENDEDSTYLE = 1038,CBEM_GETEXSTYLE = 1033,CBEM_GETEXTENDEDSTYLE = 1033,CBEM_SETUNICODEFORMAT = 8197,CBEM_GETUNICODEFORMAT = 8198,CBEM_HASEDITCHANGED = 1034,CBEM_INSERTITEMW = 1035,CBEM_SETITEMW = 1036,CBEM_GETITEMW = 1037,CBEM_INSERTITEM = 1025,CBEM_SETITEM = 1029,CBEM_GETITEM = 1028,CBEM_SETWINDOWTHEME = 8203,};
enum MACRO_CBEN {CBEN_FIRST = -800,CBEN_LAST = -830,};
enum MACRO_CBES {CBES_EX_NOEDITIMAGE = 0x1,CBES_EX_NOEDITIMAGEINDENT = 0x2,CBES_EX_PATHWORDBREAKPROC = 0x4,CBES_EX_NOSIZELIMIT = 0x8,CBES_EX_CASESENSITIVE = 0x10,};
enum MACRO_CDDS {CDDS_PREPAINT = 0x1,CDDS_POSTPAINT = 0x2,CDDS_PREERASE = 0x3,CDDS_POSTERASE = 0x4,CDDS_ITEM = 0x10000,CDDS_ITEMPREPAINT = 0x10001,CDDS_ITEMPOSTPAINT = 0x10002,CDDS_ITEMPREERASE = 0x10003,CDDS_ITEMPOSTERASE = 0x10004,CDDS_SUBITEM = 0x20000,};
enum MACRO_CDIS {CDIS_SELECTED = 0x1,CDIS_GRAYED = 0x2,CDIS_DISABLED = 0x4,CDIS_CHECKED = 0x8,CDIS_FOCUS = 0x10,CDIS_DEFAULT = 0x20,CDIS_HOT = 0x40,CDIS_MARKED = 0x80,CDIS_INDETERMINATE = 0x100,CDIS_SHOWKEYBOARDCUES = 0x200,};
enum MACRO_CDRF {CDRF_DODEFAULT = 0x0,CDRF_NEWFONT = 0x2,CDRF_SKIPDEFAULT = 0x4,CDRF_NOTIFYPOSTPAINT = 0x10,CDRF_NOTIFYITEMDRAW = 0x20,CDRF_NOTIFYSUBITEMDRAW = 0x20,CDRF_NOTIFYPOSTERASE = 0x40,};
enum MACRO_CERT {CERT_E_EXPIRED = 0x800B0101,CERT_E_VALIDITYPERIODNESTING = 0x800B0102,CERT_E_ROLE = 0x800B0103,CERT_E_PATHLENCONST = 0x800B0104,CERT_E_CRITICAL = 0x800B0105,CERT_E_PURPOSE = 0x800B0106,CERT_E_ISSUERCHAINING = 0x800B0107,CERT_E_MALFORMED = 0x800B0108,CERT_E_UNTRUSTEDROOT = 0x800B0109,CERT_E_CHAINING = 0x800B010A,};
enum MACRO_CLIP {CLIP_DEFAULT_PRECIS = 0,CLIP_CHARACTER_PRECIS = 1,CLIP_STROKE_PRECIS = 2,CLIP_MASK = 15,CLIP_LH_ANGLES = 16,CLIP_TT_ALWAYS = 32,CLIP_DFA_DISABLE = 64,CLIP_EMBEDDED = 128,};
enum MACRO_CMIC {CMIC_MASK_HOTKEY = 32,CMIC_MASK_ICON = 16,CMIC_MASK_FLAG_NO_UI = 1024,CMIC_MASK_UNICODE = 16384,CMIC_MASK_NO_CONSOLE = 32768,CMIC_MASK_ASYNCOK = 1048576,CMIC_MASK_SHIFT_DOWN = 268435456,CMIC_MASK_CONTROL_DOWN = 1073741824,CMIC_MASK_PTINVOKE = 536870912,};
enum MACRO_CMSG {CMSG_DATA = 1,CMSG_SIGNED = 2,CMSG_ENVELOPED = 3,CMSG_SIGNED_AND_ENVELOPED = 4,CMSG_HASHED = 5,CMSG_ENCRYPTED = 6,CMSG_ALL_FLAGS = -1,CMSG_DATA_FLAG = 2,CMSG_SIGNED_FLAG = 4,CMSG_ENVELOPED_FLAG = 8,CMSG_SIGNED_AND_ENVELOPED_FLAG = 16,CMSG_HASHED_FLAG = 32,CMSG_ENCRYPTED_FLAG = 64,};
enum MACRO_CNSS {CNSS_FILE_SYSTEM_FILTER = 0xA4,};
enum MACRO_COLE {COLE_DEFAULT_PRINCIPAL = 4294967295,COLE_DEFAULT_AUTHINFO = -1,};
enum MACRO_CONN {CONN_SRC_NONE = 0x0,CONN_SRC_LFO = 0x1,CONN_SRC_KEYONVELOCITY = 0x2,CONN_SRC_KEYNUMBER = 0x3,CONN_SRC_EG1 = 0x4,CONN_SRC_EG2 = 0x5,CONN_SRC_PITCHWHEEL = 0x6,CONN_SRC_CC1 = 0x81,CONN_SRC_CC7 = 0x87,CONN_SRC_CC10 = 0x8A,CONN_SRC_CC11 = 0x8B,CONN_DST_NONE = 0x0,CONN_DST_ATTENUATION = 0x1,CONN_DST_PITCH = 0x3,CONN_DST_PAN = 0x4,CONN_DST_LFO_FREQUENCY = 0x104,CONN_DST_LFO_STARTDELAY = 0x105,CONN_DST_EG1_ATTACKTIME = 0x206,CONN_DST_EG1_DECAYTIME = 0x207,CONN_DST_EG1_RELEASETIME = 0x209,CONN_DST_EG1_SUSTAINLEVEL = 0x20A,CONN_DST_EG2_ATTACKTIME = 0x30A,CONN_DST_EG2_DECAYTIME = 0x30B,CONN_DST_EG2_RELEASETIME = 0x30D,CONN_DST_EG2_SUSTAINLEVEL = 0x30E,CONN_TRN_NONE = 0x0,CONN_TRN_CONCAVE = 0x1,};
enum MACRO_COPY {COPY_FILE_FAIL_IF_EXISTS = 0x1,COPY_FILE_RESTARTABLE = 0x2,COPY_FILE_OPEN_SOURCE_FOR_WRITE = 0x4,COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 0x8,};
enum MACRO_CO_E {CO_E_FIRST = 0x800401F0,CO_E_LAST = 0x800401FF,CO_S_FIRST = 0x401F0,CO_S_LAST = 0x401FF,CO_E_NOTINITIALIZED = 0x800401F0,CO_E_ALREADYINITIALIZED = 0x800401F1,CO_E_CANTDETERMINECLASS = 0x800401F2,CO_E_CLASSSTRING = 0x800401F3,CO_E_IIDSTRING = 0x800401F4,CO_E_APPNOTFOUND = 0x800401F5,CO_E_APPSINGLEUSE = 0x800401F6,CO_E_ERRORINAPP = 0x800401F7,CO_E_DLLNOTFOUND = 0x800401F8,CO_E_ERRORINDLL = 0x800401F9,CO_E_WRONGOSFORAPP = 0x800401FA,CO_E_OBJNOTREG = 0x800401FB,CO_E_OBJISREG = 0x800401FC,CO_E_OBJNOTCONNECTED = 0x800401FD,CO_E_APPDIDNTREG = 0x800401FE,CO_E_RELEASED = 0x800401FF,};
enum MACRO_CO_S {CO_S_NOTALLINTERFACES = 0x80012,CO_S_MACHINENAMENOTFOUND = 0x80013,};
enum MACRO_CRED {CRED_MAX_STRING_LENGTH = 256,CRED_MAX_USERNAME_LENGTH = 513,CRED_MAX_GENERIC_TARGET_NAME_LENGTH = 32767,CRED_MAX_DOMAIN_TARGET_NAME_LENGTH = 337,CRED_MAX_VALUE_SIZE = 256,CRED_MAX_ATTRIBUTES = 64,CRED_FLAGS_PASSWORD_FOR_CERT = 1,CRED_FLAGS_PROMPT_NOW = 2,CRED_FLAGS_USERNAME_TARGET = 4,CRED_FLAGS_OWF_CRED_BLOB = 8,CRED_FLAGS_VALID_FLAGS = 15,CRED_TYPE_GENERIC = 1,CRED_TYPE_DOMAIN_PASSWORD = 2,CRED_TYPE_DOMAIN_CERTIFICATE = 3,CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 4,CRED_TYPE_MAXIMUM = 5,CRED_TYPE_MAXIMUM_EX = 1005,CRED_MAX_CREDENTIAL_BLOB_SIZE = 512,CRED_PERSIST_NONE = 0,CRED_PERSIST_SESSION = 1,CRED_PERSIST_LOCAL_MACHINE = 2,CRED_PERSIST_ENTERPRISE = 3,CRED_TI_SERVER_FORMAT_UNKNOWN = 1,CRED_TI_DOMAIN_FORMAT_UNKNOWN = 2,CRED_TI_ONLY_PASSWORD_REQUIRED = 4,CRED_TI_USERNAME_TARGET = 8,CRED_TI_CREATE_EXPLICIT_CRED = 16,CRED_TI_WORKGROUP_MEMBER = 32,CRED_TI_VALID_FLAGS = 63,};
enum MACRO_CSTR {CSTR_LESS_THAN = 1,CSTR_EQUAL = 2,CSTR_GREATER_THAN = 3,};
enum MACRO_CTRL {CTRL_C_EVENT = 0,CTRL_BREAK_EVENT = 1,CTRL_CLOSE_EVENT = 2,CTRL_LOGOFF_EVENT = 5,CTRL_SHUTDOWN_EVENT = 6,};
enum MACRO_CTRY {CTRY_DEFAULT = 0,CTRY_ALBANIA = 355,CTRY_ALGERIA = 213,CTRY_ARGENTINA = 54,CTRY_ARMENIA = 374,CTRY_AUSTRALIA = 61,CTRY_AUSTRIA = 43,CTRY_AZERBAIJAN = 994,CTRY_BAHRAIN = 973,CTRY_BELARUS = 375,CTRY_BELGIUM = 32,CTRY_BELIZE = 501,CTRY_BOLIVIA = 591,CTRY_BRAZIL = 55,CTRY_BRUNEI_DARUSSALAM = 673,CTRY_BULGARIA = 359,CTRY_CANADA = 2,CTRY_CARIBBEAN = 1,CTRY_CHILE = 56,CTRY_COLOMBIA = 57,CTRY_COSTA_RICA = 506,CTRY_CROATIA = 385,CTRY_CZECH = 420,CTRY_DENMARK = 45,CTRY_DOMINICAN_REPUBLIC = 1,CTRY_ECUADOR = 593,CTRY_EGYPT = 20,CTRY_EL_SALVADOR = 503,CTRY_ESTONIA = 372,CTRY_FAEROE_ISLANDS = 298,CTRY_FINLAND = 358,CTRY_FRANCE = 33,CTRY_GEORGIA = 995,CTRY_GERMANY = 49,CTRY_GREECE = 30,CTRY_GUATEMALA = 502,CTRY_HONDURAS = 504,CTRY_HONG_KONG = 852,CTRY_HUNGARY = 36,CTRY_ICELAND = 354,CTRY_INDIA = 91,CTRY_INDONESIA = 62,CTRY_IRAN = 981,CTRY_IRAQ = 964,CTRY_IRELAND = 353,CTRY_ISRAEL = 972,CTRY_ITALY = 39,CTRY_JAMAICA = 1,CTRY_JAPAN = 81,CTRY_JORDAN = 962,CTRY_KAZAKSTAN = 7,CTRY_KENYA = 254,CTRY_KUWAIT = 965,CTRY_KYRGYZSTAN = 996,CTRY_LATVIA = 371,CTRY_LEBANON = 961,CTRY_LIBYA = 218,CTRY_LIECHTENSTEIN = 41,CTRY_LITHUANIA = 370,CTRY_LUXEMBOURG = 352,CTRY_MACAU = 853,CTRY_MACEDONIA = 389,CTRY_MALAYSIA = 60,CTRY_MALDIVES = 960,CTRY_MEXICO = 52,CTRY_MONACO = 33,CTRY_MONGOLIA = 976,CTRY_MOROCCO = 212,CTRY_NETHERLANDS = 31,CTRY_NEW_ZEALAND = 64,CTRY_NICARAGUA = 505,CTRY_NORWAY = 47,CTRY_OMAN = 968,CTRY_PAKISTAN = 92,CTRY_PANAMA = 507,CTRY_PARAGUAY = 595,CTRY_PERU = 51,CTRY_PHILIPPINES = 63,CTRY_POLAND = 48,CTRY_PORTUGAL = 351,CTRY_PRCHINA = 86,CTRY_PUERTO_RICO = 1,CTRY_QATAR = 974,CTRY_ROMANIA = 40,CTRY_RUSSIA = 7,CTRY_SAUDI_ARABIA = 966,CTRY_SERBIA = 381,CTRY_SINGAPORE = 65,CTRY_SLOVAK = 421,CTRY_SLOVENIA = 386,CTRY_SOUTH_AFRICA = 27,CTRY_SOUTH_KOREA = 82,CTRY_SPAIN = 34,CTRY_SWEDEN = 46,CTRY_SWITZERLAND = 41,CTRY_SYRIA = 963,CTRY_TAIWAN = 886,CTRY_TATARSTAN = 7,CTRY_THAILAND = 66,CTRY_TRINIDAD_Y_TOBAGO = 1,CTRY_TUNISIA = 216,CTRY_TURKEY = 90,CTRY_UAE = 971,CTRY_UKRAINE = 380,CTRY_UNITED_KINGDOM = 44,CTRY_UNITED_STATES = 1,CTRY_URUGUAY = 598,CTRY_UZBEKISTAN = 7,CTRY_VENEZUELA = 58,CTRY_VIET_NAM = 84,CTRY_YEMEN = 967,CTRY_ZIMBABWE = 263,};
enum MACRO_DATA {DATA_E_FIRST = 0x80040130,DATA_E_LAST = 0x8004013F,DATA_S_FIRST = 0x40130,DATA_S_LAST = 0x4013F,};
enum MACRO_DATE {DATE_SHORTDATE = 0x1,DATE_LONGDATE = 0x2,DATE_USE_ALT_CALENDAR = 0x4,DATE_YEARMONTH = 0x8,DATE_LTRREADING = 0x10,DATE_RTLREADING = 0x20,};
enum MACRO_DAUD {DAUD_CRITICAL_VOICE_PRIORITY = 0xF0000000,DAUD_HIGH_VOICE_PRIORITY = 0xC0000000,DAUD_STANDARD_VOICE_PRIORITY = 0x80000000,DAUD_LOW_VOICE_PRIORITY = 0x40000000,DAUD_PERSIST_VOICE_PRIORITY = 0x10000000,DAUD_CHAN1_VOICE_PRIORITY_OFFSET = 0xE,DAUD_CHAN2_VOICE_PRIORITY_OFFSET = 0xD,DAUD_CHAN3_VOICE_PRIORITY_OFFSET = 0xC,DAUD_CHAN4_VOICE_PRIORITY_OFFSET = 0xB,DAUD_CHAN5_VOICE_PRIORITY_OFFSET = 0xA,DAUD_CHAN6_VOICE_PRIORITY_OFFSET = 0x9,DAUD_CHAN7_VOICE_PRIORITY_OFFSET = 0x8,DAUD_CHAN8_VOICE_PRIORITY_OFFSET = 0x7,DAUD_CHAN9_VOICE_PRIORITY_OFFSET = 0x6,DAUD_CHAN10_VOICE_PRIORITY_OFFSET = 0xF,DAUD_CHAN11_VOICE_PRIORITY_OFFSET = 0x5,DAUD_CHAN12_VOICE_PRIORITY_OFFSET = 0x4,DAUD_CHAN13_VOICE_PRIORITY_OFFSET = 0x3,DAUD_CHAN14_VOICE_PRIORITY_OFFSET = 0x2,DAUD_CHAN15_VOICE_PRIORITY_OFFSET = 0x1,DAUD_CHAN16_VOICE_PRIORITY_OFFSET = 0x0,DAUD_CHAN1_DEF_VOICE_PRIORITY = 0x8000000E,DAUD_CHAN2_DEF_VOICE_PRIORITY = 0x8000000D,DAUD_CHAN3_DEF_VOICE_PRIORITY = 0x8000000C,DAUD_CHAN4_DEF_VOICE_PRIORITY = 0x8000000B,DAUD_CHAN5_DEF_VOICE_PRIORITY = 0x8000000A,DAUD_CHAN6_DEF_VOICE_PRIORITY = 0x80000009,DAUD_CHAN7_DEF_VOICE_PRIORITY = 0x80000008,DAUD_CHAN8_DEF_VOICE_PRIORITY = 0x80000007,DAUD_CHAN9_DEF_VOICE_PRIORITY = 0x80000006,DAUD_CHAN10_DEF_VOICE_PRIORITY = 0x8000000F,DAUD_CHAN11_DEF_VOICE_PRIORITY = 0x80000005,DAUD_CHAN12_DEF_VOICE_PRIORITY = 0x80000004,DAUD_CHAN13_DEF_VOICE_PRIORITY = 0x80000003,DAUD_CHAN14_DEF_VOICE_PRIORITY = 0x80000002,DAUD_CHAN15_DEF_VOICE_PRIORITY = 0x80000001,DAUD_CHAN16_DEF_VOICE_PRIORITY = 0x80000000,};
enum MACRO_DBIF {DBIF_VIEWMODE_NORMAL = 0x0,DBIF_VIEWMODE_VERTICAL = 0x1,DBIF_VIEWMODE_FLOATING = 0x2,DBIF_VIEWMODE_TRANSPARENT = 0x4,};
enum MACRO_DBIM {DBIM_MINSIZE = 0x1,DBIM_MAXSIZE = 0x2,DBIM_INTEGRAL = 0x4,DBIM_ACTUAL = 0x8,DBIM_TITLE = 0x10,DBIM_MODEFLAGS = 0x20,DBIM_BKCOLOR = 0x40,};
enum MACRO_DBPC {DBPC_SELECTFIRST = 4294967295,DBPC_SELECTLAST = 4294967294,};
enum MACRO_DCBA {DCBA_FACEUPNONE = 0x0,DCBA_FACEUPCENTER = 0x1,DCBA_FACEUPLEFT = 0x2,DCBA_FACEUPRIGHT = 0x3,DCBA_FACEDOWNNONE = 0x100,DCBA_FACEDOWNCENTER = 0x101,DCBA_FACEDOWNLEFT = 0x102,DCBA_FACEDOWNRIGHT = 0x103,};
enum MACRO_DCTT {DCTT_BITMAP = 0x1,DCTT_DOWNLOAD = 0x2,DCTT_SUBDEV = 0x4,DCTT_DOWNLOAD_OUTLINE = 0x8,};
enum MACRO_DDAL {DDAL_IMPLICIT = 0x1,};
enum MACRO_DDBD {DDBD_1 = 0x4000,DDBD_2 = 0x2000,DDBD_4 = 0x1000,DDBD_8 = 0x800,DDBD_16 = 0x400,DDBD_24 = 0x200,DDBD_32 = 0x100,};
enum MACRO_DDEM {DDEM_MODEPASSED = 0x1,DDEM_MODEFAILED = 0x2,};
enum MACRO_DDPF {DDPF_FOURCC = 0x4,};
enum MACRO_DDSD {DDSD_CAPS = 0x1,DDSD_HEIGHT = 0x2,DDSD_WIDTH = 0x4,DDSD_PITCH = 0x8,DDSD_BACKBUFFERCOUNT = 0x20,DDSD_ZBUFFERBITDEPTH = 0x40,DDSD_ALPHABITDEPTH = 0x80,DDSD_LPSURFACE = 0x800,DDSD_PIXELFORMAT = 0x1000,DDSD_CKDESTOVERLAY = 0x2000,DDSD_CKDESTBLT = 0x4000,DDSD_CKSRCOVERLAY = 0x8000,DDSD_CKSRCBLT = 0x10000,DDSD_MIPMAPCOUNT = 0x20000,DDSD_REFRESHRATE = 0x40000,DDSD_LINEARSIZE = 0x80000,DDSD_TEXTURESTAGE = 0x100000,DDSD_FVF = 0x200000,DDSD_SRCVBHANDLE = 0x400000,DDSD_DEPTH = 0x800000,DDSD_ALL = 0xFFF9EE,};
enum MACRO_DDVP {DDVP_AUTOFLIP = 0x1,DDVP_CONVERT = 0x2,DDVP_CROP = 0x4,DDVP_INTERLEAVE = 0x8,DDVP_MIRRORLEFTRIGHT = 0x10,DDVP_MIRRORUPDOWN = 0x20,DDVP_PRESCALE = 0x40,DDVP_SKIPEVENFIELDS = 0x80,DDVP_SKIPODDFIELDS = 0x100,DDVP_SYNCMASTER = 0x200,DDVP_VBICONVERT = 0x400,DDVP_VBINOSCALE = 0x800,DDVP_OVERRIDEBOBWEAVE = 0x1000,DDVP_IGNOREVBIXCROP = 0x2000,DDVP_VBINOINTERLEAVE = 0x4000,DDVP_HARDWAREDEINTERLACE = 0x8000,};
enum MACRO_DEST {DEST_MATCHING = 28,DEST_LONGER = 29,DEST_SHORTER = 30,};
enum MACRO_DFCS {DFCS_CAPTIONCLOSE = 0x0,DFCS_CAPTIONMIN = 0x1,DFCS_CAPTIONMAX = 0x2,DFCS_CAPTIONRESTORE = 0x3,DFCS_CAPTIONHELP = 0x4,DFCS_MENUARROW = 0x0,DFCS_MENUCHECK = 0x1,DFCS_MENUBULLET = 0x2,DFCS_MENUARROWRIGHT = 0x4,DFCS_SCROLLUP = 0x0,DFCS_SCROLLDOWN = 0x1,DFCS_SCROLLLEFT = 0x2,DFCS_SCROLLRIGHT = 0x3,DFCS_SCROLLCOMBOBOX = 0x5,DFCS_SCROLLSIZEGRIP = 0x8,DFCS_SCROLLSIZEGRIPRIGHT = 0x10,DFCS_BUTTONCHECK = 0x0,DFCS_BUTTONRADIOIMAGE = 0x1,DFCS_BUTTONRADIOMASK = 0x2,DFCS_BUTTONRADIO = 0x4,DFCS_BUTTON3STATE = 0x8,DFCS_BUTTONPUSH = 0x10,DFCS_INACTIVE = 0x100,DFCS_PUSHED = 0x200,DFCS_CHECKED = 0x400,DFCS_TRANSPARENT = 0x800,DFCS_HOT = 0x1000,DFCS_ADJUSTRECT = 0x2000,DFCS_FLAT = 0x4000,DFCS_MONO = 0x8000,};
enum MACRO_DICD {DICD_GENERATE_ID = 0x1,DICD_INHERIT_CLASSDRVS = 0x2,};
enum MACRO_DICS {DICS_ENABLE = 0x1,DICS_DISABLE = 0x2,DICS_PROPCHANGE = 0x3,DICS_START = 0x4,DICS_STOP = 0x5,DICS_FLAG_GLOBAL = 0x1,DICS_FLAG_CONFIGSPECIFIC = 0x2,DICS_FLAG_CONFIGGENERAL = 0x4,};
enum MACRO_DIOD {DIOD_INHERIT_CLASSDRVS = 0x2,DIOD_CANCEL_REMOVE = 0x4,};
enum MACRO_DISC {DISC_UPDATE_PROFILE = 0x1,DISC_NO_FORCE = 0x40,};
enum MACRO_DISK {DISK_LOGGING_START = 0,DISK_LOGGING_STOP = 1,DISK_LOGGING_DUMP = 2,DISK_BINNING = 3,};
enum MACRO_DISP {DISP_E_UNKNOWNINTERFACE = 0x80020001,DISP_E_MEMBERNOTFOUND = 0x80020003,DISP_E_PARAMNOTFOUND = 0x80020004,DISP_E_TYPEMISMATCH = 0x80020005,DISP_E_UNKNOWNNAME = 0x80020006,DISP_E_NONAMEDARGS = 0x80020007,DISP_E_BADVARTYPE = 0x80020008,DISP_E_EXCEPTION = 0x80020009,DISP_E_OVERFLOW = 0x8002000A,DISP_E_BADINDEX = 0x8002000B,DISP_E_UNKNOWNLCID = 0x8002000C,DISP_E_ARRAYISLOCKED = 0x8002000D,DISP_E_BADPARAMCOUNT = 0x8002000E,DISP_E_PARAMNOTOPTIONAL = 0x8002000F,DISP_E_BADCALLEE = 0x80020010,DISP_E_NOTACOLLECTION = 0x80020011,DISP_E_DIVBYZERO = 0x80020012,DISP_E_BUFFERTOOSMALL = 0x80020013,};
enum MACRO_DLGC {DLGC_WANTARROWS = 0x1,DLGC_WANTTAB = 0x2,DLGC_WANTALLKEYS = 0x4,DLGC_WANTMESSAGE = 0x4,DLGC_HASSETSEL = 0x8,DLGC_DEFPUSHBUTTON = 0x10,DLGC_UNDEFPUSHBUTTON = 0x20,DLGC_RADIOBUTTON = 0x40,DLGC_WANTCHARS = 0x80,DLGC_STATIC = 0x100,DLGC_BUTTON = 0x2000,};
enum MACRO_DMDO {DMDO_DEFAULT = 0,DMDO_90 = 1,DMDO_180 = 2,DMDO_270 = 3,};
enum MACRO_DMTT {DMTT_BITMAP = 1,DMTT_DOWNLOAD = 2,DMTT_SUBDEV = 3,DMTT_DOWNLOAD_OUTLINE = 4,};
enum MACRO_DMUS {DMUS_EVENT_STRUCTURED = 0x1,};
enum MACRO_DONT {DONT_RESOLVE_DLL_REFERENCES = 0x1,};
enum MACRO_DPAS {DPAS_SORTED = 0x1,DPAS_INSERTBEFORE = 0x2,DPAS_INSERTAFTER = 0x4,};
enum MACRO_DRVM {DRVM_MAPPER = 0x2000,DRVM_MAPPER_STATUS = 0x2000,};
enum MACRO_DS3D {DS3D_IMMEDIATE = 0x0,DS3D_DEFERRED = 0x1,DS3D_MINCONEANGLE = 0x0,DS3D_MAXCONEANGLE = 0x168,DS3D_DEFAULTCONEANGLE = 0x168,DS3D_DEFAULTCONEOUTSIDEVOLUME = 0x0,};
enum MACRO_DSFX {DSFX_LOCHARDWARE = 0x1,DSFX_LOCSOFTWARE = 0x2,};
enum MACRO_DWLP {DWLP_MSGRESULT = 0,};
enum MACRO_ECBF {ECBF_CHECKNAME_AT_FRONT = 0x1,ECBF_CHECKNAME_ONLY_ENABLED = 0x2,ECBF_ICONID_AS_HICON = 0x4,ECBF_OVERLAY_WARNING_ICON = 0x8,ECBF_OVERLAY_ECBICON_IF_CHECKED = 0x10,ECBF_OVERLAY_STOP_ICON = 0x20,ECBF_OVERLAY_NO_ICON = 0x40,ECBF_CHECKNAME_ONLY = 0x80,};
enum MACRO_EDGE {EDGE_RAISED = 5,EDGE_SUNKEN = 10,EDGE_ETCHED = 6,EDGE_BUMP = 9,};
enum MACRO_EISA {EISA_NO_MAX_FUNCTION = 0xFF,};
enum MACRO_ENUM {ENUM_E_FIRST = 0x800401B0,ENUM_E_LAST = 0x800401BF,ENUM_S_FIRST = 0x401B0,ENUM_S_LAST = 0x401BF,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 1,};
enum MACRO_FADF {FADF_AUTO = 0x1,FADF_STATIC = 0x2,FADF_EMBEDDED = 0x4,FADF_FIXEDSIZE = 0x10,FADF_RECORD = 0x20,FADF_HAVEIID = 0x40,FADF_HAVEVARTYPE = 0x80,FADF_BSTR = 0x100,FADF_UNKNOWN = 0x200,FADF_DISPATCH = 0x400,FADF_VARIANT = 0x800,FADF_RESERVED = 0xF008,};
enum MACRO_FAKE {FAKE_KEYSTROKE = 0x2000000,};
enum MACRO_FCSM {FCSM_VIEWID = 0x1,FCSM_WEBVIEWTEMPLATE = 0x2,FCSM_INFOTIP = 0x4,FCSM_CLSID = 0x8,FCSM_ICONFILE = 0x10,FCSM_LOGO = 0x20,FCSM_FLAGS = 0x40,};
enum MACRO_FIEF {FIEF_FLAG_FORCE_JITUI = 0x1,FIEF_FLAG_PEEK = 0x2,FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 0x4,};
enum MACRO_FILE {FILE_READ_DATA = 0x1,FILE_LIST_DIRECTORY = 0x1,FILE_WRITE_DATA = 0x2,FILE_ADD_FILE = 0x2,FILE_APPEND_DATA = 0x4,FILE_ADD_SUBDIRECTORY = 0x4,FILE_CREATE_PIPE_INSTANCE = 0x4,FILE_READ_EA = 0x8,FILE_WRITE_EA = 0x10,FILE_EXECUTE = 0x20,FILE_TRAVERSE = 0x20,FILE_DELETE_CHILD = 0x40,FILE_READ_ATTRIBUTES = 0x80,FILE_WRITE_ATTRIBUTES = 0x100,FILE_ALL_ACCESS = 0x1F01FF,FILE_GENERIC_READ = 0x120089,FILE_GENERIC_WRITE = 0x120116,FILE_GENERIC_EXECUTE = 0x1200A0,FILE_SHARE_READ = 0x1,FILE_SHARE_WRITE = 0x2,FILE_SHARE_DELETE = 0x4,FILE_ATTRIBUTE_READONLY = 0x1,FILE_ATTRIBUTE_HIDDEN = 0x2,FILE_ATTRIBUTE_SYSTEM = 0x4,FILE_ATTRIBUTE_DIRECTORY = 0x10,FILE_ATTRIBUTE_ARCHIVE = 0x20,FILE_ATTRIBUTE_DEVICE = 0x40,FILE_ATTRIBUTE_NORMAL = 0x80,FILE_ATTRIBUTE_TEMPORARY = 0x100,FILE_ATTRIBUTE_SPARSE_FILE = 0x200,FILE_ATTRIBUTE_REPARSE_POINT = 0x400,FILE_ATTRIBUTE_COMPRESSED = 0x800,FILE_ATTRIBUTE_OFFLINE = 0x1000,FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x2000,FILE_ATTRIBUTE_ENCRYPTED = 0x4000,FILE_NOTIFY_CHANGE_FILE_NAME = 0x1,FILE_NOTIFY_CHANGE_DIR_NAME = 0x2,FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x4,FILE_NOTIFY_CHANGE_SIZE = 0x8,FILE_NOTIFY_CHANGE_LAST_WRITE = 0x10,FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x20,FILE_NOTIFY_CHANGE_CREATION = 0x40,FILE_NOTIFY_CHANGE_SECURITY = 0x100,FILE_ACTION_ADDED = 0x1,FILE_ACTION_REMOVED = 0x2,FILE_ACTION_MODIFIED = 0x3,FILE_ACTION_RENAMED_OLD_NAME = 0x4,FILE_ACTION_RENAMED_NEW_NAME = 0x5,};
enum MACRO_FIND {FIND_FIRST_EX_CASE_SENSITIVE = 0x1,};
enum MACRO_FMFD {FMFD_DEFAULT = 0x0,FMFD_URLASFILENAME = 0x1,};
enum MACRO_FONT {OEM_FIXED_FONT = 10,ANSI_FIXED_FONT = 11,ANSI_VAR_FONT = 12,SYSTEM_FONT = 13,DEVICE_DEFAULT_FONT = 14,};
enum MACRO_FORM {FORM_USER = 0x0,FORM_BUILTIN = 0x1,FORM_PRINTER = 0x2,};
enum MACRO_FROM {FROM_PROTOCOL_INFO = -1,};
enum MACRO_GCLP {GCLP_MENUNAME = -8,GCLP_HBRBACKGROUND = -10,GCLP_HCURSOR = -12,GCLP_HICON = -14,GCLP_HMODULE = -16,GCLP_WNDPROC = -24,GCLP_HICONSM = -34,};
enum MACRO_GDTR {GDTR_MIN = 0x1,GDTR_MAX = 0x2,};
enum MACRO_GHND {GHND = 66,};
enum MACRO_GMDI {GMDI_USEDISABLED = 0x1,GMDI_GOINTOPOPUPS = 0x2,};
enum MACRO_GMEM {GMEM_FIXED = 0x0,GMEM_MOVEABLE = 0x2,GMEM_NOCOMPACT = 0x10,GMEM_NODISCARD = 0x20,GMEM_ZEROINIT = 0x40,GMEM_MODIFY = 0x80,GMEM_DISCARDABLE = 0x100,GMEM_NOT_BANKED = 0x1000,GMEM_SHARE = 0x2000,GMEM_DDESHARE = 0x2000,GMEM_NOTIFY = 0x4000,GMEM_LOWER = 0x1000,GMEM_VALID_FLAGS = 0x7F72,GMEM_INVALID_HANDLE = 0x8000,};
enum MACRO_GMMP {GMMP_USE_DISPLAY_POINTS = 1,GMMP_USE_HIGH_RESOLUTION_POINTS = 2,};
enum MACRO_GPTR {GPTR = 64,};
enum MACRO_GQOS {GQOS_NO_ERRORCODE = 0,GQOS_NO_ERRORVALUE = 0,GQOS_ERRORCODE_UNKNOWN = -1,GQOS_ERRORVALUE_UNKNOWN = -1,GQOS_NET_ADMISSION = 56100,GQOS_OTHER = 56101,GQOS_DELAYBND = 56102,GQOS_BANDWIDTH = 56103,GQOS_MTU = 56104,GQOS_FLOW_RATE = 56105,GQOS_PEAK_RATE = 56106,GQOS_AGG_PEAK_RATE = 56107,GQOS_NET_POLICY = 56200,GQOS_POLICY_ERROR_UNKNOWN = 56200,GQOS_POLICY_GLOBAL_DEF_FLOW_COUNT = 56201,GQOS_POLICY_GLOBAL_GRP_FLOW_COUNT = 56202,GQOS_POLICY_GLOBAL_USER_FLOW_COUNT = 56203,GQOS_POLICY_GLOBAL_UNK_USER_FLOW_COUNT = 56204,GQOS_POLICY_SUBNET_DEF_FLOW_COUNT = 56205,GQOS_POLICY_SUBNET_GRP_FLOW_COUNT = 56206,GQOS_POLICY_SUBNET_USER_FLOW_COUNT = 56207,GQOS_POLICY_SUBNET_UNK_USER_FLOW_COUNT = 56208,GQOS_POLICY_GLOBAL_DEF_FLOW_DURATION = 56209,GQOS_POLICY_GLOBAL_GRP_FLOW_DURATION = 56210,GQOS_POLICY_GLOBAL_USER_FLOW_DURATION = 56211,GQOS_POLICY_GLOBAL_UNK_USER_FLOW_DURATION = 56212,GQOS_POLICY_SUBNET_DEF_FLOW_DURATION = 56213,GQOS_POLICY_SUBNET_GRP_FLOW_DURATION = 56214,GQOS_POLICY_SUBNET_USER_FLOW_DURATION = 56215,GQOS_POLICY_SUBNET_UNK_USER_FLOW_DURATION = 56216,GQOS_POLICY_GLOBAL_DEF_FLOW_RATE = 56217,GQOS_POLICY_GLOBAL_GRP_FLOW_RATE = 56218,GQOS_POLICY_GLOBAL_USER_FLOW_RATE = 56219,GQOS_POLICY_GLOBAL_UNK_USER_FLOW_RATE = 56220,GQOS_POLICY_SUBNET_DEF_FLOW_RATE = 56221,GQOS_POLICY_SUBNET_GRP_FLOW_RATE = 56222,GQOS_POLICY_SUBNET_USER_FLOW_RATE = 56223,GQOS_POLICY_SUBNET_UNK_USER_FLOW_RATE = 56224,GQOS_POLICY_GLOBAL_DEF_PEAK_RATE = 56225,GQOS_POLICY_GLOBAL_GRP_PEAK_RATE = 56226,GQOS_POLICY_GLOBAL_USER_PEAK_RATE = 56227,GQOS_POLICY_GLOBAL_UNK_USER_PEAK_RATE = 56228,GQOS_POLICY_SUBNET_DEF_PEAK_RATE = 56229,GQOS_POLICY_SUBNET_GRP_PEAK_RATE = 56230,GQOS_POLICY_SUBNET_USER_PEAK_RATE = 56231,GQOS_POLICY_SUBNET_UNK_USER_PEAK_RATE = 56232,GQOS_POLICY_GLOBAL_DEF_SUM_FLOW_RATE = 56233,GQOS_POLICY_GLOBAL_GRP_SUM_FLOW_RATE = 56234,GQOS_POLICY_GLOBAL_USER_SUM_FLOW_RATE = 56235,GQOS_POLICY_GLOBAL_UNK_USER_SUM_FLOW_RATE = 56236,GQOS_POLICY_SUBNET_DEF_SUM_FLOW_RATE = 56237,GQOS_POLICY_SUBNET_GRP_SUM_FLOW_RATE = 56238,GQOS_POLICY_SUBNET_USER_SUM_FLOW_RATE = 56239,GQOS_POLICY_SUBNET_UNK_USER_SUM_FLOW_RATE = 56240,GQOS_POLICY_GLOBAL_DEF_SUM_PEAK_RATE = 56241,GQOS_POLICY_GLOBAL_GRP_SUM_PEAK_RATE = 56242,GQOS_POLICY_GLOBAL_USER_SUM_PEAK_RATE = 56243,GQOS_POLICY_GLOBAL_UNK_USER_SUM_PEAK_RATE = 56244,GQOS_POLICY_SUBNET_DEF_SUM_PEAK_RATE = 56245,GQOS_POLICY_SUBNET_GRP_SUM_PEAK_RATE = 56246,GQOS_POLICY_SUBNET_USER_SUM_PEAK_RATE = 56247,GQOS_POLICY_SUBNET_UNK_USER_SUM_PEAK_RATE = 56248,GQOS_POLICY_UNKNOWN_USER = 56249,GQOS_POLICY_NO_PRIVILEGES = 56250,GQOS_POLICY_EXPIRED_USER_TOKEN = 56251,GQOS_POLICY_NO_RESOURCES = 56252,GQOS_POLICY_PRE_EMPTED = 56253,GQOS_POLICY_USER_CHANGED = 56254,GQOS_POLICY_NO_ACCEPTS = 56255,GQOS_POLICY_NO_MEMORY = 56256,GQOS_POLICY_CRAZY_FLOWSPEC = 56257,GQOS_POLICY_NO_MORE_INFO = 56258,GQOS_POLICY_UNSUPPORTED_CREDENTIAL_TYPE = 56259,GQOS_POLICY_INSUFFICIENT_PRIVILEGES = 56260,GQOS_POLICY_EXPIRED_CREDENTIAL = 56261,GQOS_POLICY_IDENTITY_CHANGED = 56262,GQOS_POLICY_NO_QOS_PROVIDED = 56263,GQOS_POLICY_DO_NOT_SEND = 56264,GQOS_POLICY_ERROR_USERID = 56299,GQOS_RSVP = 56300,GQOS_NO_PATH = 56301,GQOS_NO_SENDER = 56302,GQOS_BAD_STYLE = 56303,GQOS_UNKNOWN_STYLE = 56304,GQOS_BAD_DSTPORT = 56305,GQOS_BAD_SNDPORT = 56306,GQOS_AMBIG_FILTER = 56307,GQOS_PREEMPTED = 56308,GQOS_UNKN_OBJ_CLASS = 56309,GQOS_UNKNOWN_CTYPE = 56310,GQOS_INVALID = 56311,GQOS_API = 56400,GQOS_API_BADSEND = 56401,GQOS_API_BADRECV = 56402,GQOS_API_BADSPORT = 56403,GQOS_KERNEL_TC_SYS = 56500,GQOS_TC_GENERIC = 56501,GQOS_TC_INVALID = 56502,GQOS_NO_MEMORY = 56503,GQOS_BAD_ADDRESSTYPE = 56504,GQOS_BAD_DUPLICATE = 56505,GQOS_CONFLICT = 56506,GQOS_NOTREADY = 56507,GQOS_WOULDBLOCK = 56508,GQOS_INCOMPATIBLE = 56509,GQOS_BAD_SDMODE = 56510,GQOS_BAD_QOSPRIORITY = 56511,GQOS_BAD_TRAFFICCLASS = 56512,GQOS_NO_SYS_RESOURCES = 56513,GQOS_RSVP_SYS = 56600,GQOS_OTHER_SYS = 56601,GQOS_MEMORY_SYS = 56602,GQOS_API_SYS = 56603,GQOS_SETQOS_NO_LOCAL_APPS = 56604,GQOS_KERNEL_TC = 56700,GQOS_CONFLICT_SERV = 56701,GQOS_NO_SERV = 56702,GQOS_BAD_FLOWSPEC = 56703,GQOS_BAD_TSPEC = 56704,GQOS_BAD_ADSPEC = 56705,GQOS_IOCTL_SYSTEMFAILURE = 56801,GQOS_IOCTL_NOBYTESRETURNED = 56802,GQOS_IOCTL_INVALIDSOCKET = 56803,GQOS_IOCTL_INV_FUNCPTR = 56804,GQOS_IOCTL_INV_OVERLAPPED = 56805,GQOS_SETQOS_BADINBUFFER = 56811,GQOS_SETQOS_BADFLOWSPEC = 56812,GQOS_SETQOS_COLLISION = 56813,GQOS_SETQOS_BADPROVSPECBUF = 56814,GQOS_SETQOS_ILLEGALOP = 56815,GQOS_SETQOS_INVALIDADDRESS = 56816,GQOS_SETQOS_OUTOFMEMORY = 56817,GQOS_SETQOS_EXCEPTION = 56818,GQOS_SETQOS_BADADDRLEN = 56819,GQOS_SETQOS_NOSOCKNAME = 56820,GQOS_SETQOS_IPTOSFAIL = 56821,GQOS_SETQOS_OPENSESSIONFAIL = 56822,GQOS_SETQOS_SENDFAIL = 56823,GQOS_SETQOS_RECVFAIL = 56824,GQOS_SETQOS_BADPOLICYOBJECT = 56825,GQOS_SETQOS_UNKNOWNFILTEROBJ = 56826,GQOS_SETQOS_BADFILTERTYPE = 56827,GQOS_SETQOS_BADFILTERCOUNT = 56828,GQOS_SETQOS_BADOBJLENGTH = 56829,GQOS_SETQOS_BADFLOWCOUNT = 56830,GQOS_SETQOS_UNKNOWNPSOBJ = 56831,GQOS_SETQOS_BADPOLICYOBJ = 56832,GQOS_SETQOS_BADFLOWDESC = 56833,GQOS_SETQOS_BADPROVSPECOBJ = 56834,GQOS_SETQOS_NOLOOPBACK = 56835,GQOS_SETQOS_MODENOTSUPPORTED = 56836,GQOS_SETQOS_MISSINGFLOWDESC = 56837,GQOS_GETQOS_BADOUTBUFFER = 56841,GQOS_GETQOS_SYSTEMFAILURE = 56842,GQOS_GETQOS_EXCEPTION = 56843,GQOS_GETQOS_INTERNALFAILURE = 56844,GQOS_CHKQOS_BADINBUFFER = 56851,GQOS_CHKQOS_BADOUTBUFFER = 56852,GQOS_CHKQOS_SYSTEMFAILURE = 56853,GQOS_CHKQOS_INTERNALFAILURE = 56854,GQOS_CHKQOS_BADPARAMETER = 56855,GQOS_CHKQOS_EXCEPTION = 56856,};
enum MACRO_GWLP {GWLP_WNDPROC = -4,GWLP_HINSTANCE = -6,GWLP_HWNDPARENT = -8,GWLP_USERDATA = -21,GWLP_ID = -12,};
enum MACRO_HCBT {HCBT_MOVESIZE = 0,HCBT_MINMAX = 1,HCBT_QS = 2,HCBT_CREATEWND = 3,HCBT_DESTROYWND = 4,HCBT_ACTIVATE = 5,HCBT_CLICKSKIPPED = 6,HCBT_KEYSKIPPED = 7,HCBT_SYSCOMMAND = 8,HCBT_SETFOCUS = 9,};
enum MACRO_HCCE {HCCE_CURRENT_USER = 0,HCCE_LOCAL_MACHINE = 1,};
enum MACRO_HDFT {HDFT_ISSTRING = 0x0,HDFT_ISNUMBER = 0x1,HDFT_HASNOVALUE = 0x8000,};
enum MACRO_HEAP {HEAP_NO_SERIALIZE = 0x1,HEAP_GROWABLE = 0x2,HEAP_GENERATE_EXCEPTIONS = 0x4,HEAP_ZERO_MEMORY = 0x8,HEAP_REALLOC_IN_PLACE_ONLY = 0x10,HEAP_TAIL_CHECKING_ENABLED = 0x20,HEAP_FREE_CHECKING_ENABLED = 0x40,HEAP_DISABLE_COALESCE_ON_FREE = 0x80,HEAP_CREATE_ALIGN_16 = 0x10000,HEAP_CREATE_ENABLE_TRACING = 0x20000,HEAP_MAXIMUM_TAG = 0xFFF,HEAP_PSEUDO_TAG_FLAG = 0x8000,HEAP_TAG_SHIFT = 0x12,};
enum MACRO_HELP {HELP_CONTEXT = 0x1,HELP_QUIT = 0x2,HELP_INDEX = 0x3,HELP_CONTENTS = 0x3,HELP_HELPONHELP = 0x4,HELP_SETINDEX = 0x5,HELP_SETCONTENTS = 0x5,HELP_CONTEXTPOPUP = 0x8,HELP_FORCEFILE = 0x9,HELP_KEY = 0x101,HELP_COMMAND = 0x102,HELP_PARTIALKEY = 0x105,HELP_MULTIKEY = 0x201,HELP_SETWINPOS = 0x203,HELP_CONTEXTMENU = 0xA,HELP_FINDER = 0xB,HELP_WM_HELP = 0xC,HELP_SETPOPUP_POS = 0xD,HELP_TCARD = 0x8000,HELP_TCARD_DATA = 0x10,HELP_TCARD_OTHER_CALLER = 0x11,};
enum MACRO_HICF {HICF_OTHER = 0x0,HICF_MOUSE = 0x1,HICF_ARROWKEYS = 0x2,HICF_ACCELERATOR = 0x4,HICF_DUPACCEL = 0x8,HICF_ENTERING = 0x10,HICF_LEAVING = 0x20,HICF_RESELECT = 0x40,HICF_LMOUSE = 0x80,HICF_TOGGLEDROPDOWN = 0x100,};
enum MACRO_HIDE {HIDE_WINDOW = 0,};
enum MACRO_HIDP {HIDP_LINK_COLLECTION_ROOT = 65535,HIDP_LINK_COLLECTION_UNSPECIFIED = 0,};
enum MACRO_HIST {HIST_NO_OF_BUCKETS = 24,};
enum MACRO_HKEY {HKEY_CLASSES_ROOT = 0x80000000,HKEY_CURRENT_USER = 0x80000001,HKEY_LOCAL_MACHINE = 0x80000002,HKEY_USERS = 0x80000003,HKEY_PERFORMANCE_DATA = 0x80000004,HKEY_PERFORMANCE_TEXT = 0x80000050,HKEY_PERFORMANCE_NLSTEXT = 0x80000060,HKEY_CURRENT_CONFIG = 0x80000005,HKEY_DYN_DATA = 0x80000006,};
enum MACRO_HOOK {HOOK_ABOVE = 0x309,};
enum MACRO_HOST {HOST_NOT_FOUND = 11001,};
enum MACRO_HTTP {HTTP_DRIVER_CORRUPTED = 0xFA,};
enum MACRO_HWND {HWND_BROADCAST = 0xFFFF,HWND_MESSAGE = 0xFFFFFFFD,};
enum MACRO_IACE {IACE_CHILDREN = 0x1,IACE_DEFAULT = 0x10,IACE_IGNORENOCONTEXT = 0x20,};
enum MACRO_ICMF {ICMF_CONFIGURE_QUERY = 0x1,ICMF_ABOUT_QUERY = 0x1,ICMF_COMPVARS_VALID = 0x1,ICMF_CHOOSE_KEYFRAME = 0x1,ICMF_CHOOSE_DATARATE = 0x2,ICMF_CHOOSE_PREVIEW = 0x4,ICMF_CHOOSE_ALLCOMPRESSORS = 0x8,};
enum MACRO_ICON {ICON_SMALL = 0,ICON_BIG = 1,ICON_SMALL2 = 2,};
enum MACRO_IDNO {IDNO = 7,IDCLOSE = 8,};
enum MACRO_IDOK {IDOK = 1,IDCANCEL = 2,};
enum MACRO_IDTB {IDTB_EXPAND = 200,IDTB_CONTRACT = 201,IDTB_STOP = 202,IDTB_REFRESH = 203,IDTB_BACK = 204,IDTB_HOME = 205,IDTB_SYNC = 206,IDTB_PRINT = 207,IDTB_OPTIONS = 208,IDTB_FORWARD = 209,IDTB_NOTES = 210,IDTB_BROWSE_FWD = 211,IDTB_BROWSE_BACK = 212,IDTB_CONTENTS = 213,IDTB_INDEX = 214,IDTB_SEARCH = 215,IDTB_HISTORY = 216,IDTB_FAVORITES = 217,IDTB_JUMP1 = 218,IDTB_JUMP2 = 219,IDTB_CUSTOMIZE = 221,IDTB_ZOOM = 222,IDTB_TOC_NEXT = 223,IDTB_TOC_PREV = 224,};
enum MACRO_IEEE {IEEE_COMPATIBILITY = 0x2,};
enum MACRO_IGRF {IGRF_RGB_256BYTES = 0,IGRF_RGB_256WORDS = 1,};
enum MACRO_ILCF {ILCF_MOVE = 0x0,ILCF_SWAP = 0x1,};
enum MACRO_IMFS {IMFS_GRAYED = 3,IMFS_DISABLED = 3,IMFS_CHECKED = 8,IMFS_HILITE = 128,IMFS_ENABLED = 0,IMFS_UNCHECKED = 0,IMFS_UNHILITE = 0,IMFS_DEFAULT = 4096,};
enum MACRO_IMFT {IMFT_RADIOCHECK = 0x1,IMFT_SEPARATOR = 0x2,IMFT_SUBMENU = 0x4,};
enum MACRO_INCL {INCL_WINSOCK_API_PROTOTYPES = 1,INCL_WINSOCK_API_TYPEDEFS = 0,};
enum MACRO_INET {INET_E_INVALID_URL = 0x800C0002,INET_E_NO_SESSION = 0x800C0003,INET_E_CANNOT_CONNECT = 0x800C0004,INET_E_RESOURCE_NOT_FOUND = 0x800C0005,INET_E_OBJECT_NOT_FOUND = 0x800C0006,INET_E_DATA_NOT_AVAILABLE = 0x800C0007,INET_E_DOWNLOAD_FAILURE = 0x800C0008,INET_E_AUTHENTICATION_REQUIRED = 0x800C0009,INET_E_NO_VALID_MEDIA = 0x800C000A,INET_E_CONNECTION_TIMEOUT = 0x800C000B,INET_E_INVALID_REQUEST = 0x800C000C,INET_E_UNKNOWN_PROTOCOL = 0x800C000D,INET_E_SECURITY_PROBLEM = 0x800C000E,INET_E_CANNOT_LOAD_DATA = 0x800C000F,INET_E_CANNOT_INSTANTIATE_OBJECT = 0x800C0010,INET_E_REDIRECT_FAILED = 0x800C0014,INET_E_REDIRECT_TO_DIR = 0x800C0015,INET_E_CANNOT_LOCK_REQUEST = 0x800C0016,INET_E_USE_EXTEND_BINDING = 0x800C0017,INET_E_TERMINATED_BIND = 0x800C0018,INET_E_ERROR_FIRST = 0x800C0002,INET_E_CODE_DOWNLOAD_DECLINED = 0x800C0100,INET_E_RESULT_DISPATCHED = 0x800C0200,INET_E_CANNOT_REPLACE_SFP_FILE = 0x800C0300,INET_E_ERROR_LAST = 0x800C0300,};
enum MACRO_INFO {INFO_NOT_AVAILABLE = 0xFFFFFFFF,};
enum MACRO_INIT {INIT_STATUSWNDPOS = 0x1,INIT_CONVERSION = 0x2,INIT_SENTENCE = 0x4,INIT_LOGFONT = 0x8,INIT_COMPFORM = 0x10,INIT_SOFTKBDPOS = 0x20,};
enum MACRO_IRDA {IRDA_PROTO_SOCK_STREAM = 1,};
enum MACRO_IRQL {IRQL_NOT_DISPATCH_LEVEL = 0x8,IRQL_NOT_GREATER_OR_EQUAL = 0x9,IRQL_NOT_LESS_OR_EQUAL = 0xA,};
enum MACRO_ISFB {ISFB_MASK_STATE = 0x1,ISFB_MASK_BKCOLOR = 0x2,ISFB_MASK_VIEWMODE = 0x4,ISFB_MASK_SHELLFOLDER = 0x8,ISFB_MASK_IDLIST = 0x10,ISFB_MASK_COLORS = 0x20,ISFB_STATE_DEFAULT = 0x0,ISFB_STATE_DEBOSSED = 0x1,ISFB_STATE_ALLOWRENAME = 0x2,ISFB_STATE_NOSHOWTEXT = 0x4,ISFB_STATE_CHANNELBAR = 0x10,ISFB_STATE_QLINKSMODE = 0x20,ISFB_STATE_FULLOPEN = 0x40,ISFB_STATE_NONAMESORT = 0x80,ISFB_STATE_BTNMINSIZE = 0x100,};
enum MACRO_ITSS {ITSS_THREAD_DESTROY_DEFAULT_TIMEOUT = 60000,ITSS_THREAD_TERMINATE_TIMEOUT = -1,ITSS_THREAD_TIMEOUT_NO_CHANGE = -2,};
enum MACRO_JOIN {JOIN_ROUND = 0,JOIN_BEVEL = 1,JOIN_MITER = 2,};
enum MACRO_JPEG {JPEG_DIB = 1195724874,MJPG_DIB = 1196444237,};
enum MACRO_KDBG {KDBG_TAG = 1195525195,};
enum MACRO_KERB {KERB_ETYPE_NULL = 0,KERB_ETYPE_DES_CBC_CRC = 1,KERB_ETYPE_DES_CBC_MD4 = 2,KERB_ETYPE_DES_CBC_MD5 = 3,KERB_ETYPE_RC4_MD4 = -128,KERB_ETYPE_RC4_PLAIN2 = -129,KERB_ETYPE_RC4_LM = -130,KERB_ETYPE_RC4_SHA = -131,KERB_ETYPE_DES_PLAIN = -132,KERB_ETYPE_RC4_HMAC_OLD = -133,KERB_ETYPE_RC4_PLAIN_OLD = -134,KERB_ETYPE_RC4_HMAC_OLD_EXP = -135,KERB_ETYPE_RC4_PLAIN_OLD_EXP = -136,KERB_ETYPE_RC4_PLAIN = -140,KERB_ETYPE_RC4_PLAIN_EXP = -141,KERB_ETYPE_DSA_SHA1_CMS = 9,KERB_ETYPE_RSA_MD5_CMS = 10,KERB_ETYPE_RSA_SHA1_CMS = 11,KERB_ETYPE_RC2_CBC_ENV = 12,KERB_ETYPE_RSA_ENV = 13,KERB_ETYPE_RSA_ES_OEAP_ENV = 14,KERB_ETYPE_DES_EDE3_CBC_ENV = 15,KERB_ETYPE_DSA_SIGN = 8,KERB_ETYPE_RSA_PRIV = 9,KERB_ETYPE_RSA_PUB = 10,KERB_ETYPE_RSA_PUB_MD5 = 11,KERB_ETYPE_RSA_PUB_SHA1 = 12,KERB_ETYPE_PKCS7_PUB = 13,KERB_ETYPE_DES3_CBC_MD5 = 5,KERB_ETYPE_DES3_CBC_SHA1 = 7,KERB_ETYPE_DES3_CBC_SHA1_KD = 16,KERB_ETYPE_DES_CBC_MD5_NT = 20,KERB_ETYPE_RC4_HMAC_NT = 23,KERB_ETYPE_RC4_HMAC_NT_EXP = 24,KERB_CHECKSUM_NONE = 0,KERB_CHECKSUM_CRC32 = 1,KERB_CHECKSUM_MD4 = 2,KERB_CHECKSUM_KRB_DES_MAC = 4,KERB_CHECKSUM_KRB_DES_MAC_K = 5,KERB_CHECKSUM_MD5 = 7,KERB_CHECKSUM_MD5_DES = 8,KERB_CHECKSUM_LM = -130,KERB_CHECKSUM_SHA1 = -131,KERB_CHECKSUM_REAL_CRC32 = -132,KERB_CHECKSUM_DES_MAC = -133,KERB_CHECKSUM_DES_MAC_MD5 = -134,KERB_CHECKSUM_MD25 = -135,KERB_CHECKSUM_RC4_MD5 = -136,KERB_CHECKSUM_MD5_HMAC = -137,KERB_CHECKSUM_HMAC_MD5 = -138,};
enum MACRO_KLLF {KLLF_ALTGR = 0x1,KLLF_SHIFTLOCK = 0x2,KLLF_LRM_RLM = 0x4,KLLF_LAYOUT_ATTRS = 0x7,KLLF_GLOBAL_ATTRS = 0x2,};
enum MACRO_LANG {LANG_NEUTRAL = 0x0,LANG_INVARIANT = 0x7F,LANG_AFRIKAANS = 0x36,LANG_ALBANIAN = 0x1C,LANG_ARABIC = 0x1,LANG_ARMENIAN = 0x2B,LANG_ASSAMESE = 0x4D,LANG_AZERI = 0x2C,LANG_BASQUE = 0x2D,LANG_BELARUSIAN = 0x23,LANG_BENGALI = 0x45,LANG_BULGARIAN = 0x2,LANG_CATALAN = 0x3,LANG_CHINESE = 0x4,LANG_CROATIAN = 0x1A,LANG_CZECH = 0x5,LANG_DANISH = 0x6,LANG_DIVEHI = 0x65,LANG_DUTCH = 0x13,LANG_ENGLISH = 0x9,LANG_ESTONIAN = 0x25,LANG_FAEROESE = 0x38,LANG_FARSI = 0x29,LANG_FINNISH = 0xB,LANG_FRENCH = 0xC,LANG_GALICIAN = 0x56,LANG_GEORGIAN = 0x37,LANG_GERMAN = 0x7,LANG_GREEK = 0x8,LANG_GUJARATI = 0x47,LANG_HEBREW = 0xD,LANG_HINDI = 0x39,LANG_HUNGARIAN = 0xE,LANG_ICELANDIC = 0xF,LANG_INDONESIAN = 0x21,LANG_ITALIAN = 0x10,LANG_JAPANESE = 0x11,LANG_KANNADA = 0x4B,LANG_KASHMIRI = 0x60,LANG_KAZAK = 0x3F,LANG_KONKANI = 0x57,LANG_KOREAN = 0x12,LANG_KYRGYZ = 0x40,LANG_LATVIAN = 0x26,LANG_LITHUANIAN = 0x27,LANG_MACEDONIAN = 0x2F,LANG_MALAY = 0x3E,LANG_MALAYALAM = 0x4C,LANG_MANIPURI = 0x58,LANG_MARATHI = 0x4E,LANG_MONGOLIAN = 0x50,LANG_NEPALI = 0x61,LANG_NORWEGIAN = 0x14,LANG_ORIYA = 0x48,LANG_POLISH = 0x15,LANG_PORTUGUESE = 0x16,LANG_PUNJABI = 0x46,LANG_ROMANIAN = 0x18,LANG_RUSSIAN = 0x19,LANG_SANSKRIT = 0x4F,LANG_SERBIAN = 0x1A,LANG_SINDHI = 0x59,LANG_SLOVAK = 0x1B,LANG_SLOVENIAN = 0x24,LANG_SPANISH = 0xA,LANG_SWAHILI = 0x41,LANG_SWEDISH = 0x1D,LANG_SYRIAC = 0x5A,LANG_TAMIL = 0x49,LANG_TATAR = 0x44,LANG_TELUGU = 0x4A,LANG_THAI = 0x1E,LANG_TURKISH = 0x1F,LANG_UKRAINIAN = 0x22,LANG_URDU = 0x20,LANG_UZBEK = 0x43,LANG_VIETNAMESE = 0x2A,};
enum MACRO_LAST {LAST_CHANCE_CALLED_FROM_KMODE = 0x15,};
enum MACRO_LCID {LCID_INSTALLED = 0x1,LCID_SUPPORTED = 0x2,LCID_ALTERNATE_SORTS = 0x4,};
enum MACRO_LDBL {LDBL_DIG = 15,LDBL_MANT_DIG = 53,LDBL_MAX_10_EXP = 308,LDBL_MAX_EXP = 1024,LDBL_MIN_10_EXP = -307,LDBL_MIN_EXP = -1021,};
enum MACRO_LHND {LHND = 66,};
enum MACRO_LINE {LINE_RATE = 50003,};
enum MACRO_LM20 {LM20_CNLEN = 15,};
enum MACRO_LMEM {LMEM_FIXED = 0x0,LMEM_MOVEABLE = 0x2,LMEM_NOCOMPACT = 0x10,LMEM_NODISCARD = 0x20,LMEM_ZEROINIT = 0x40,LMEM_MODIFY = 0x80,LMEM_DISCARDABLE = 0xF00,LMEM_VALID_FLAGS = 0xF72,LMEM_INVALID_HANDLE = 0x8000,};
enum MACRO_LOAD {LOAD_LIBRARY_AS_DATAFILE = 0x2,LOAD_WITH_ALTERED_SEARCH_PATH = 0x8,LOAD_IGNORE_CODE_AUTHZ_LEVEL = 0x10,};
enum MACRO_LOCK {LOCK_UNLOCK_IEPORT = 0x1,LOCK_UNLOCK_DOOR = 0x2,LOCK_UNLOCK_KEYPAD = 0x4,LOCK_ELEMENT = 0x0,};
enum MACRO_LPTR {LPTR = 64,};
enum MACRO_LPTx {LPTx = 0x80,};
enum MACRO_LSFW {LSFW_LOCK = 1,LSFW_UNLOCK = 2,};
enum MACRO_LVCF {LVCF_FMT = 0x1,LVCF_WIDTH = 0x2,LVCF_TEXT = 0x4,LVCF_SUBITEM = 0x8,LVCF_IMAGE = 0x10,LVCF_ORDER = 0x20,};
enum MACRO_LVFI {LVFI_PARAM = 0x1,LVFI_STRING = 0x2,LVFI_PARTIAL = 0x8,LVFI_WRAP = 0x20,LVFI_NEARESTXY = 0x40,};
enum MACRO_LVGA {LVGA_HEADER_LEFT = 0x1,LVGA_HEADER_CENTER = 0x2,LVGA_HEADER_RIGHT = 0x4,LVGA_FOOTER_LEFT = 0x8,LVGA_FOOTER_CENTER = 0x10,LVGA_FOOTER_RIGHT = 0x20,};
enum MACRO_LVGF {LVGF_NONE = 0x0,LVGF_HEADER = 0x1,LVGF_FOOTER = 0x2,LVGF_STATE = 0x4,LVGF_ALIGN = 0x8,LVGF_GROUPID = 0x10,};
enum MACRO_LVGS {LVGS_NORMAL = 0x0,LVGS_COLLAPSED = 0x1,LVGS_HIDDEN = 0x2,};
enum MACRO_LVHT {LVHT_NOWHERE = 0x1,LVHT_ONITEMICON = 0x2,LVHT_ONITEMLABEL = 0x4,LVHT_ONITEMSTATEICON = 0x8,LVHT_ONITEM = 0xE,LVHT_ABOVE = 0x8,LVHT_BELOW = 0x10,LVHT_TORIGHT = 0x20,LVHT_TOLEFT = 0x40,};
enum MACRO_LVIF {LVIF_TEXT = 0x1,LVIF_IMAGE = 0x2,LVIF_PARAM = 0x4,LVIF_STATE = 0x8,LVIF_INDENT = 0x10,LVIF_NORECOMPUTE = 0x800,LVIF_GROUPID = 0x100,LVIF_COLUMNS = 0x200,};
enum MACRO_LVIM {LVIM_AFTER = 0x1,};
enum MACRO_LVIR {LVIR_BOUNDS = 0,LVIR_ICON = 1,LVIR_LABEL = 2,LVIR_SELECTBOUNDS = 3,};
enum MACRO_LVIS {LVIS_FOCUSED = 0x1,LVIS_SELECTED = 0x2,LVIS_CUT = 0x4,LVIS_DROPHILITED = 0x8,LVIS_GLOW = 0x10,LVIS_ACTIVATING = 0x20,LVIS_OVERLAYMASK = 0xF00,LVIS_STATEIMAGEMASK = 0xF000,};
enum MACRO_LVKF {LVKF_ALT = 0x1,LVKF_CONTROL = 0x2,LVKF_SHIFT = 0x4,};
enum MACRO_LVNI {LVNI_ALL = 0x0,LVNI_FOCUSED = 0x1,LVNI_SELECTED = 0x2,LVNI_CUT = 0x4,LVNI_DROPHILITED = 0x8,LVNI_ABOVE = 0x100,LVNI_BELOW = 0x200,LVNI_TOLEFT = 0x400,LVNI_TORIGHT = 0x800,};
enum MACRO_MARK {MARK_HANDLE_PROTECT_CLUSTERS = 0x1,};
enum MACRO_MASK {MASK_TO_RESET_TLB_BITS = -97,};
enum MACRO_MCHT {MCHT_TITLE = 0x10000,MCHT_CALENDAR = 0x20000,MCHT_TODAYLINK = 0x30000,MCHT_NEXT = 0x1000000,MCHT_PREV = 0x2000000,MCHT_NOWHERE = 0x0,MCHT_TITLEBK = 0x10000,MCHT_TITLEMONTH = 0x10001,MCHT_TITLEYEAR = 0x10002,MCHT_TITLEBTNNEXT = 0x1010003,MCHT_TITLEBTNPREV = 0x2010003,MCHT_CALENDARBK = 0x20000,MCHT_CALENDARDATE = 0x20001,MCHT_CALENDARDATENEXT = 0x1020001,MCHT_CALENDARDATEPREV = 0x2020001,MCHT_CALENDARDAY = 0x20002,MCHT_CALENDARWEEKNUM = 0x20003,};
enum MACRO_MCSC {MCSC_BACKGROUND = 0,MCSC_TEXT = 1,MCSC_TITLEBK = 2,MCSC_TITLETEXT = 3,MCSC_MONTHBK = 4,MCSC_TRAILINGTEXT = 5,};
enum MACRO_MDIS {MDIS_ALLCHILDSTYLES = 0x1,};
enum MACRO_META {META_SETBKCOLOR = 0x201,META_SETBKMODE = 0x102,META_SETMAPMODE = 0x103,META_SETROP2 = 0x104,META_SETRELABS = 0x105,META_SETPOLYFILLMODE = 0x106,META_SETSTRETCHBLTMODE = 0x107,META_SETTEXTCHAREXTRA = 0x108,META_SETTEXTCOLOR = 0x209,META_SETTEXTJUSTIFICATION = 0x20A,META_SETWINDOWORG = 0x20B,META_SETWINDOWEXT = 0x20C,META_SETVIEWPORTORG = 0x20D,META_SETVIEWPORTEXT = 0x20E,META_OFFSETWINDOWORG = 0x20F,META_SCALEWINDOWEXT = 0x410,META_OFFSETVIEWPORTORG = 0x211,META_SCALEVIEWPORTEXT = 0x412,META_LINETO = 0x213,META_MOVETO = 0x214,META_EXCLUDECLIPRECT = 0x415,META_INTERSECTCLIPRECT = 0x416,META_ARC = 0x817,META_ELLIPSE = 0x418,META_FLOODFILL = 0x419,META_PIE = 0x81A,META_RECTANGLE = 0x41B,META_ROUNDRECT = 0x61C,META_PATBLT = 0x61D,META_SAVEDC = 0x1E,META_SETPIXEL = 0x41F,META_OFFSETCLIPRGN = 0x220,META_TEXTOUT = 0x521,META_BITBLT = 0x922,META_STRETCHBLT = 0xB23,META_POLYGON = 0x324,META_POLYLINE = 0x325,META_ESCAPE = 0x626,META_RESTOREDC = 0x127,META_FILLREGION = 0x228,META_FRAMEREGION = 0x429,META_INVERTREGION = 0x12A,META_PAINTREGION = 0x12B,META_SELECTCLIPREGION = 0x12C,META_SELECTOBJECT = 0x12D,META_SETTEXTALIGN = 0x12E,META_CHORD = 0x830,META_SETMAPPERFLAGS = 0x231,META_EXTTEXTOUT = 0xA32,META_SETDIBTODEV = 0xD33,META_SELECTPALETTE = 0x234,META_REALIZEPALETTE = 0x35,META_ANIMATEPALETTE = 0x436,META_SETPALENTRIES = 0x37,META_POLYPOLYGON = 0x538,META_RESIZEPALETTE = 0x139,META_DIBBITBLT = 0x940,META_DIBSTRETCHBLT = 0xB41,META_DIBCREATEPATTERNBRUSH = 0x142,META_STRETCHDIB = 0xF43,META_EXTFLOODFILL = 0x548,META_SETLAYOUT = 0x149,META_DELETEOBJECT = 0x1F0,META_CREATEPALETTE = 0xF7,META_CREATEPATTERNBRUSH = 0x1F9,META_CREATEPENINDIRECT = 0x2FA,META_CREATEFONTINDIRECT = 0x2FB,META_CREATEBRUSHINDIRECT = 0x2FC,META_CREATEREGION = 0x6FF,};
enum MACRO_MEVT {MEVT_F_SHORT = 0x0,MEVT_F_LONG = 0x80000000,MEVT_F_CALLBACK = 0x40000000,MEVT_SHORTMSG = 0x0,MEVT_TEMPO = 0x1,MEVT_NOP = 0x2,MEVT_LONGMSG = 0x80,MEVT_COMMENT = 0x82,MEVT_VERSION = 0x84,};
enum MACRO_MHDR {MHDR_DONE = 0x1,MHDR_PREPARED = 0x2,MHDR_INQUEUE = 0x4,MHDR_ISSTRM = 0x8,};
enum MACRO_MIDI {MIDI_MAPPER = 4294967295,MIDI_IO_STATUS = 32,MIDI_CACHE_ALL = 1,MIDI_CACHE_BESTFIT = 2,MIDI_CACHE_QUERY = 3,MIDI_UNCACHE = 4,};
enum MACRO_MIIM {MIIM_STATE = 0x1,MIIM_ID = 0x2,MIIM_SUBMENU = 0x4,MIIM_CHECKMARKS = 0x8,MIIM_TYPE = 0x10,MIIM_DATA = 0x20,MIIM_STRING = 0x40,MIIM_BITMAP = 0x80,MIIM_FTYPE = 0x100,};
enum MACRO_MK_E {MK_E_NO_NORMALIZED = 0x80080007,};
enum MACRO_MK_S {MK_S_REDUCED_TO_SELF = 0x401E2,MK_S_ME = 0x401E4,MK_S_HIM = 0x401E5,MK_S_US = 0x401E6,MK_S_MONIKERALREADYREGISTERED = 0x401E7,};
enum MACRO_MMIO {MMIO_RWMODE = 0x3,MMIO_SHAREMODE = 0x70,MMIO_CREATE = 0x1000,MMIO_PARSE = 0x100,MMIO_DELETE = 0x200,MMIO_EXIST = 0x4000,MMIO_ALLOCBUF = 0x10000,MMIO_GETTEMP = 0x20000,MMIO_DIRTY = 0x10000000,MMIO_READ = 0x0,MMIO_WRITE = 0x1,MMIO_READWRITE = 0x2,MMIO_COMPAT = 0x0,MMIO_EXCLUSIVE = 0x10,MMIO_DENYWRITE = 0x20,MMIO_DENYREAD = 0x30,MMIO_DENYNONE = 0x40,MMIO_FHOPEN = 0x10,MMIO_EMPTYBUF = 0x10,MMIO_TOUPPER = 0x10,MMIO_INSTALLPROC = 0x10000,MMIO_GLOBALPROC = 0x10000000,MMIO_REMOVEPROC = 0x20000,MMIO_UNICODEPROC = 0x1000000,MMIO_FINDPROC = 0x40000,MMIO_FINDCHUNK = 0x10,MMIO_FINDRIFF = 0x20,MMIO_FINDLIST = 0x40,MMIO_CREATERIFF = 0x20,MMIO_CREATELIST = 0x40,};
enum MACRO_MNGO {MNGO_NOINTERFACE = 0x0,MNGO_NOERROR = 0x1,};
enum MACRO_MONO {MONO_FONT = 8,};
enum MACRO_MSAA {MSAA_MENU_SIG = 0xAA0DF00D,};
enum MACRO_MSGF {MSGF_DIALOGBOX = 0,MSGF_MESSAGEBOX = 1,MSGF_MENU = 2,MSGF_SCROLLBAR = 5,MSGF_NEXTWINDOW = 6,MSGF_MAX = 8,MSGF_USER = 4096,};
enum MACRO_MSV1 {MSV1_0_CHALLENGE_LENGTH = 8,MSV1_0_USER_SESSION_KEY_LENGTH = 16,MSV1_0_LANMAN_SESSION_KEY_LENGTH = 8,MSV1_0_CLEARTEXT_PASSWORD_ALLOWED = 2,MSV1_0_UPDATE_LOGON_STATISTICS = 4,MSV1_0_RETURN_USER_PARAMETERS = 8,MSV1_0_DONT_TRY_GUEST_ACCOUNT = 16,MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT = 32,MSV1_0_RETURN_PASSWORD_EXPIRY = 64,MSV1_0_USE_CLIENT_CHALLENGE = 128,MSV1_0_TRY_GUEST_ACCOUNT_ONLY = 256,MSV1_0_RETURN_PROFILE_PATH = 512,MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY = 1024,MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT = 2048,MSV1_0_DISABLE_PERSONAL_FALLBACK = 4096,MSV1_0_ALLOW_FORCE_GUEST = 8192,MSV1_0_CLEARTEXT_PASSWORD_SUPPLIED = 16384,MSV1_0_USE_DOMAIN_FOR_ROUTING_ONLY = 32768,MSV1_0_SUBAUTHENTICATION_DLL_EX = 1048576,MSV1_0_SUBAUTHENTICATION_DLL = -16777216,MSV1_0_SUBAUTHENTICATION_DLL_SHIFT = 24,MSV1_0_MNS_LOGON = 16777216,MSV1_0_SUBAUTHENTICATION_DLL_RAS = 2,MSV1_0_SUBAUTHENTICATION_DLL_IIS = 132,};
enum MACRO_MUST {MUST_SUCCEED_POOL_EMPTY = 0x41,};
enum MACRO_MUTZ {MUTZ_NOSAVEDFILECHECK = 0x1,MUTZ_ENFORCERESTRICTED = 0x100,};
enum MACRO_MWMO {MWMO_WAITALL = 0x1,MWMO_ALERTABLE = 0x2,MWMO_INPUTAVAILABLE = 0x4,};
enum MACRO_NAME {NAME_FLAGS_MASK = 0x87,};
enum MACRO_NDIS {NDIS_INTERNAL_ERROR = 0x4F,};
enum MACRO_NERR {NERR_Success = 0,NERR_BASE = 2100,NERR_NetNotStarted = 2102,NERR_UnknownServer = 2103,NERR_ShareMem = 2104,NERR_NoNetworkResource = 2105,NERR_RemoteOnly = 2106,NERR_DevNotRedirected = 2107,NERR_ServerNotStarted = 2114,NERR_ItemNotFound = 2115,NERR_UnknownDevDir = 2116,NERR_RedirectedPath = 2117,NERR_DuplicateShare = 2118,NERR_NoRoom = 2119,NERR_TooManyItems = 2121,NERR_InvalidMaxUsers = 2122,NERR_BufTooSmall = 2123,NERR_RemoteErr = 2127,NERR_LanmanIniError = 2131,NERR_NetworkError = 2136,NERR_WkstaInconsistentState = 2137,NERR_WkstaNotStarted = 2138,NERR_BrowserNotStarted = 2139,NERR_InternalError = 2140,NERR_BadTransactConfig = 2141,NERR_InvalidAPI = 2142,NERR_BadEventName = 2143,NERR_DupNameReboot = 2144,NERR_CfgCompNotFound = 2146,NERR_CfgParamNotFound = 2147,NERR_LineTooLong = 2149,NERR_QNotFound = 2150,NERR_JobNotFound = 2151,NERR_DestNotFound = 2152,NERR_DestExists = 2153,NERR_QExists = 2154,NERR_QNoRoom = 2155,NERR_JobNoRoom = 2156,NERR_DestNoRoom = 2157,NERR_DestIdle = 2158,NERR_DestInvalidOp = 2159,NERR_ProcNoRespond = 2160,NERR_SpoolerNotLoaded = 2161,NERR_DestInvalidState = 2162,NERR_QInvalidState = 2163,NERR_JobInvalidState = 2164,NERR_SpoolNoMemory = 2165,NERR_DriverNotFound = 2166,NERR_DataTypeInvalid = 2167,NERR_ProcNotFound = 2168,NERR_ServiceTableLocked = 2180,NERR_ServiceTableFull = 2181,NERR_ServiceInstalled = 2182,NERR_ServiceEntryLocked = 2183,NERR_ServiceNotInstalled = 2184,NERR_BadServiceName = 2185,NERR_ServiceCtlTimeout = 2186,NERR_ServiceCtlBusy = 2187,NERR_BadServiceProgName = 2188,NERR_ServiceNotCtrl = 2189,NERR_ServiceKillProc = 2190,NERR_ServiceCtlNotValid = 2191,NERR_NotInDispatchTbl = 2192,NERR_BadControlRecv = 2193,NERR_ServiceNotStarting = 2194,NERR_AlreadyLoggedOn = 2200,NERR_NotLoggedOn = 2201,NERR_BadUsername = 2202,NERR_BadPassword = 2203,NERR_UnableToAddName_W = 2204,NERR_UnableToAddName_F = 2205,NERR_UnableToDelName_W = 2206,NERR_UnableToDelName_F = 2207,NERR_LogonsPaused = 2209,NERR_LogonServerConflict = 2210,NERR_LogonNoUserPath = 2211,NERR_LogonScriptError = 2212,NERR_StandaloneLogon = 2214,NERR_LogonServerNotFound = 2215,NERR_LogonDomainExists = 2216,NERR_NonValidatedLogon = 2217,NERR_ACFNotFound = 2219,NERR_GroupNotFound = 2220,NERR_UserNotFound = 2221,NERR_ResourceNotFound = 2222,NERR_GroupExists = 2223,NERR_UserExists = 2224,NERR_ResourceExists = 2225,NERR_NotPrimary = 2226,NERR_ACFNotLoaded = 2227,NERR_ACFNoRoom = 2228,NERR_ACFFileIOFail = 2229,NERR_ACFTooManyLists = 2230,NERR_UserLogon = 2231,NERR_ACFNoParent = 2232,NERR_CanNotGrowSegment = 2233,NERR_SpeGroupOp = 2234,NERR_NotInCache = 2235,NERR_UserInGroup = 2236,NERR_UserNotInGroup = 2237,NERR_AccountUndefined = 2238,NERR_AccountExpired = 2239,NERR_InvalidWorkstation = 2240,NERR_InvalidLogonHours = 2241,NERR_PasswordExpired = 2242,NERR_PasswordCantChange = 2243,NERR_PasswordHistConflict = 2244,NERR_PasswordTooShort = 2245,NERR_PasswordTooRecent = 2246,NERR_InvalidDatabase = 2247,NERR_DatabaseUpToDate = 2248,NERR_SyncRequired = 2249,NERR_UseNotFound = 2250,NERR_BadAsgType = 2251,NERR_DeviceIsShared = 2252,NERR_NoComputerName = 2270,NERR_MsgAlreadyStarted = 2271,NERR_MsgInitFailed = 2272,NERR_NameNotFound = 2273,NERR_AlreadyForwarded = 2274,NERR_AddForwarded = 2275,NERR_AlreadyExists = 2276,NERR_TooManyNames = 2277,NERR_DelComputerName = 2278,NERR_LocalForward = 2279,NERR_GrpMsgProcessor = 2280,NERR_PausedRemote = 2281,NERR_BadReceive = 2282,NERR_NameInUse = 2283,NERR_MsgNotStarted = 2284,NERR_NotLocalName = 2285,NERR_NoForwardName = 2286,NERR_RemoteFull = 2287,NERR_NameNotForwarded = 2288,NERR_TruncatedBroadcast = 2289,NERR_InvalidDevice = 2294,NERR_WriteFault = 2295,NERR_DuplicateName = 2297,NERR_DeleteLater = 2298,NERR_IncompleteDel = 2299,NERR_MultipleNets = 2300,NERR_NetNameNotFound = 2310,NERR_DeviceNotShared = 2311,NERR_ClientNameNotFound = 2312,NERR_FileIdNotFound = 2314,NERR_ExecFailure = 2315,NERR_TmpFile = 2316,NERR_TooMuchData = 2317,NERR_DeviceShareConflict = 2318,NERR_BrowserTableIncomplete = 2319,NERR_NotLocalDomain = 2320,NERR_IsDfsShare = 2321,NERR_DevInvalidOpCode = 2331,NERR_DevNotFound = 2332,NERR_DevNotOpen = 2333,NERR_BadQueueDevString = 2334,NERR_BadQueuePriority = 2335,NERR_NoCommDevs = 2337,NERR_QueueNotFound = 2338,NERR_BadDevString = 2340,NERR_BadDev = 2341,NERR_InUseBySpooler = 2342,NERR_CommDevInUse = 2343,NERR_InvalidComputer = 2351,NERR_MaxLenExceeded = 2354,NERR_BadComponent = 2356,NERR_CantType = 2357,NERR_TooManyEntries = 2362,NERR_ProfileFileTooBig = 2370,NERR_ProfileOffset = 2371,NERR_ProfileCleanup = 2372,NERR_ProfileUnknownCmd = 2373,NERR_ProfileLoadErr = 2374,NERR_ProfileSaveErr = 2375,NERR_LogOverflow = 2377,NERR_LogFileChanged = 2378,NERR_LogFileCorrupt = 2379,NERR_SourceIsDir = 2380,NERR_BadSource = 2381,NERR_BadDest = 2382,NERR_DifferentServers = 2383,NERR_RunSrvPaused = 2385,NERR_ErrCommRunSrv = 2389,NERR_ErrorExecingGhost = 2391,NERR_ShareNotFound = 2392,NERR_InvalidLana = 2400,NERR_OpenFiles = 2401,NERR_ActiveConns = 2402,NERR_BadPasswordCore = 2403,NERR_DevInUse = 2404,NERR_LocalDrive = 2405,NERR_AlertExists = 2430,NERR_TooManyAlerts = 2431,NERR_NoSuchAlert = 2432,NERR_BadRecipient = 2433,NERR_AcctLimitExceeded = 2434,NERR_InvalidLogSeek = 2440,NERR_BadUasConfig = 2450,NERR_InvalidUASOp = 2451,NERR_LastAdmin = 2452,NERR_DCNotFound = 2453,NERR_LogonTrackingError = 2454,NERR_NetlogonNotStarted = 2455,NERR_CanNotGrowUASFile = 2456,NERR_TimeDiffAtDC = 2457,NERR_PasswordMismatch = 2458,NERR_NoSuchServer = 2460,NERR_NoSuchSession = 2461,NERR_NoSuchConnection = 2462,NERR_TooManyServers = 2463,NERR_TooManySessions = 2464,NERR_TooManyConnections = 2465,NERR_TooManyFiles = 2466,NERR_NoAlternateServers = 2467,NERR_TryDownLevel = 2470,NERR_UPSDriverNotStarted = 2480,NERR_UPSInvalidConfig = 2481,NERR_UPSInvalidCommPort = 2482,NERR_UPSSignalAsserted = 2483,NERR_UPSShutdownFailed = 2484,NERR_BadDosRetCode = 2500,NERR_ProgNeedsExtraMem = 2501,NERR_BadDosFunction = 2502,NERR_RemoteBootFailed = 2503,NERR_BadFileCheckSum = 2504,NERR_NoRplBootSystem = 2505,NERR_RplLoadrNetBiosErr = 2506,NERR_RplLoadrDiskErr = 2507,NERR_ImageParamErr = 2508,NERR_TooManyImageParams = 2509,NERR_NonDosFloppyUsed = 2510,NERR_RplBootRestart = 2511,NERR_RplSrvrCallFailed = 2512,NERR_CantConnectRplSrvr = 2513,NERR_CantOpenImageFile = 2514,NERR_CallingRplSrvr = 2515,NERR_StartingRplBoot = 2516,NERR_RplBootServiceTerm = 2517,NERR_RplBootStartFailed = 2518,NERR_RPL_CONNECTED = 2519,NERR_BrowserConfiguredToNotRun = 2550,NERR_RplNoAdaptersStarted = 2610,NERR_RplBadRegistry = 2611,NERR_RplBadDatabase = 2612,NERR_RplRplfilesShare = 2613,NERR_RplNotRplServer = 2614,NERR_RplCannotEnum = 2615,NERR_RplWkstaInfoCorrupted = 2616,NERR_RplWkstaNotFound = 2617,NERR_RplWkstaNameUnavailable = 2618,NERR_RplProfileInfoCorrupted = 2619,NERR_RplProfileNotFound = 2620,NERR_RplProfileNameUnavailable = 2621,NERR_RplProfileNotEmpty = 2622,NERR_RplConfigInfoCorrupted = 2623,NERR_RplConfigNotFound = 2624,NERR_RplAdapterInfoCorrupted = 2625,NERR_RplInternal = 2626,NERR_RplVendorInfoCorrupted = 2627,NERR_RplBootInfoCorrupted = 2628,NERR_RplWkstaNeedsUserAcct = 2629,NERR_RplNeedsRPLUSERAcct = 2630,NERR_RplBootNotFound = 2631,NERR_RplIncompatibleProfile = 2632,NERR_RplAdapterNameUnavailable = 2633,NERR_RplConfigNotEmpty = 2634,NERR_RplBootInUse = 2635,NERR_RplBackupDatabase = 2636,NERR_RplAdapterNotFound = 2637,NERR_RplVendorNotFound = 2638,NERR_RplVendorNameUnavailable = 2639,NERR_RplBootNameUnavailable = 2640,NERR_RplConfigNameUnavailable = 2641,NERR_DfsInternalCorruption = 2660,NERR_DfsVolumeDataCorrupt = 2661,NERR_DfsNoSuchVolume = 2662,NERR_DfsVolumeAlreadyExists = 2663,NERR_DfsAlreadyShared = 2664,NERR_DfsNoSuchShare = 2665,NERR_DfsNotALeafVolume = 2666,NERR_DfsLeafVolume = 2667,NERR_DfsVolumeHasMultipleServers = 2668,NERR_DfsCantCreateJunctionPoint = 2669,NERR_DfsServerNotDfsAware = 2670,NERR_DfsBadRenamePath = 2671,NERR_DfsVolumeIsOffline = 2672,NERR_DfsNoSuchServer = 2673,NERR_DfsCyclicalName = 2674,NERR_DfsNotSupportedInServerDfs = 2675,NERR_DfsDuplicateService = 2676,NERR_DfsCantRemoveLastServerShare = 2677,NERR_DfsVolumeIsInterDfs = 2678,NERR_DfsInconsistent = 2679,NERR_DfsServerUpgraded = 2680,NERR_DfsDataIsIdentical = 2681,NERR_DfsCantRemoveDfsRoot = 2682,NERR_DfsChildOrParentInDfs = 2683,NERR_DfsInternalError = 2690,NERR_SetupAlreadyJoined = 2691,NERR_SetupNotJoined = 2692,NERR_SetupDomainController = 2693,NERR_DefaultJoinRequired = 2694,NERR_InvalidWorkgroupName = 2695,NERR_NameUsesIncompatibleCodePage = 2696,NERR_ComputerAccountNotFound = 2697,NERR_PersonalSku = 2698,NERR_PasswordMustChange = 2701,NERR_AccountLockedOut = 2702,NERR_PasswordTooLong = 2703,NERR_PasswordNotComplexEnough = 2704,NERR_PasswordFilterError = 2705,};
enum MACRO_NONE {NONE = 0x0,CENTRONICS = 0x1,};
enum MACRO_NORM {NORM_IGNORECASE = 0x1,NORM_IGNORENONSPACE = 0x2,NORM_IGNORESYMBOLS = 0x4,NORM_IGNOREKANATYPE = 0x10000,NORM_IGNOREWIDTH = 0x20000,};
enum MACRO_NTFT {VALID_NTFT = 0xC0,PARTITION_NTFT = 0x80,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_OPEN {OPEN_EXISTING = 3,OPEN_ALWAYS = 4,};
enum MACRO_PAGE {PAGE_NOACCESS = 0x1,PAGE_READONLY = 0x2,PAGE_READWRITE = 0x4,PAGE_WRITECOPY = 0x8,PAGE_EXECUTE = 0x10,PAGE_EXECUTE_READ = 0x20,PAGE_EXECUTE_READWRITE = 0x40,PAGE_EXECUTE_WRITECOPY = 0x80,PAGE_GUARD = 0x100,PAGE_NOCACHE = 0x200,PAGE_WRITECOMBINE = 0x400,};
enum MACRO_PANE {PANE_NONE = -1,PANE_ZONE = 1,PANE_OFFLINE = 2,PANE_PRINTER = 3,PANE_SSL = 4,PANE_NAVIGATION = 5,PANE_PROGRESS = 6,PANE_PRIVACY = 7,};
enum MACRO_PARM {PARM_ERROR_UNKNOWN = 4294967295,PARM_ERROR_NONE = 0,};
enum MACRO_PATH {BEGIN_PATH = 4096,CLIP_TO_PATH = 4097,END_PATH = 4098,};
enum MACRO_PBTF {PBTF_APMRESUMEFROMFAILURE = 0x1,};
enum MACRO_PCIC {PCIC_DEFAULT_IRQMASK = 0x4EB8,PCIC_DEFAULT_NUMSOCKETS = 0x0,};
enum MACRO_PERF {PERF_DATA_VERSION = 1,PERF_DATA_REVISION = 1,PERF_NO_INSTANCES = -1,PERF_SIZE_DWORD = 0,PERF_SIZE_LARGE = 256,PERF_SIZE_ZERO = 512,PERF_SIZE_VARIABLE_LEN = 768,PERF_TYPE_NUMBER = 0,PERF_TYPE_COUNTER = 1024,PERF_TYPE_TEXT = 2048,PERF_TYPE_ZERO = 3072,PERF_NUMBER_HEX = 0,PERF_NUMBER_DECIMAL = 65536,PERF_NUMBER_DEC_1000 = 131072,PERF_COUNTER_VALUE = 0,PERF_COUNTER_RATE = 65536,PERF_COUNTER_FRACTION = 131072,PERF_COUNTER_BASE = 196608,PERF_COUNTER_ELAPSED = 262144,PERF_COUNTER_QUEUELEN = 327680,PERF_COUNTER_HISTOGRAM = 393216,PERF_COUNTER_PRECISION = 458752,PERF_TEXT_UNICODE = 0,PERF_TEXT_ASCII = 65536,PERF_TIMER_TICK = 0,PERF_TIMER_100NS = 1048576,PERF_OBJECT_TIMER = 2097152,PERF_DELTA_COUNTER = 4194304,PERF_DELTA_BASE = 8388608,PERF_INVERSE_COUNTER = 16777216,PERF_MULTI_COUNTER = 33554432,PERF_DISPLAY_NO_SUFFIX = 0,PERF_DISPLAY_PER_SEC = 268435456,PERF_DISPLAY_PERCENT = 536870912,PERF_DISPLAY_SECONDS = 805306368,PERF_DISPLAY_NOSHOW = 1073741824,PERF_COUNTER_COUNTER = 272696320,PERF_COUNTER_TIMER = 541132032,PERF_COUNTER_QUEUELEN_TYPE = 4523008,PERF_COUNTER_LARGE_QUEUELEN_TYPE = 4523264,PERF_COUNTER_100NS_QUEUELEN_TYPE = 5571840,PERF_COUNTER_OBJ_TIME_QUEUELEN_TYPE = 6620416,PERF_COUNTER_BULK_COUNT = 272696576,PERF_COUNTER_TEXT = 2816,PERF_COUNTER_RAWCOUNT = 65536,PERF_COUNTER_LARGE_RAWCOUNT = 65792,PERF_COUNTER_RAWCOUNT_HEX = 0,PERF_COUNTER_LARGE_RAWCOUNT_HEX = 256,PERF_SAMPLE_FRACTION = 549585920,PERF_SAMPLE_COUNTER = 4260864,PERF_COUNTER_NODATA = 1073742336,PERF_COUNTER_TIMER_INV = 557909248,PERF_SAMPLE_BASE = 1073939457,PERF_AVERAGE_TIMER = 805438464,PERF_AVERAGE_BASE = 1073939458,PERF_AVERAGE_BULK = 1073874176,PERF_OBJ_TIME_TIMER = 543229184,PERF_100NSEC_TIMER = 542180608,PERF_100NSEC_TIMER_INV = 558957824,PERF_COUNTER_MULTI_TIMER = 574686464,PERF_COUNTER_MULTI_TIMER_INV = 591463680,PERF_COUNTER_MULTI_BASE = 1107494144,PERF_100NSEC_MULTI_TIMER = 575735040,PERF_100NSEC_MULTI_TIMER_INV = 592512256,PERF_RAW_FRACTION = 537003008,PERF_LARGE_RAW_FRACTION = 537003264,PERF_RAW_BASE = 1073939459,PERF_LARGE_RAW_BASE = 1073939712,PERF_ELAPSED_TIME = 807666944,PERF_COUNTER_HISTOGRAM_TYPE = -2147483648,PERF_COUNTER_DELTA = 4195328,PERF_COUNTER_LARGE_DELTA = 4195584,PERF_PRECISION_SYSTEM_TIMER = 541525248,PERF_PRECISION_100NS_TIMER = 542573824,PERF_PRECISION_OBJECT_TIMER = 543622400,PERF_PRECISION_TIMESTAMP = 1073939712,PERF_DETAIL_NOVICE = 100,PERF_DETAIL_ADVANCED = 200,PERF_DETAIL_EXPERT = 300,PERF_DETAIL_WIZARD = 400,PERF_NO_UNIQUE_ID = -1,PERF_QUERY_OBJECTS = -2147483648,PERF_QUERY_GLOBAL = -2147483647,PERF_QUERY_COSTLY = -2147483646,};
enum MACRO_PHYS {PHYS_FLAG_DEFAULT = 0,PHYS_FLAG_CACHED = 1,PHYS_FLAG_UNCACHED = 2,PHYS_FLAG_WRITE_COMBINED = 3,};
enum MACRO_PIPE {PIPE_ACCESS_INBOUND = 0x1,PIPE_ACCESS_OUTBOUND = 0x2,PIPE_ACCESS_DUPLEX = 0x3,PIPE_CLIENT_END = 0x0,PIPE_SERVER_END = 0x1,PIPE_WAIT = 0x0,PIPE_NOWAIT = 0x1,PIPE_READMODE_BYTE = 0x0,PIPE_READMODE_MESSAGE = 0x2,PIPE_TYPE_BYTE = 0x0,PIPE_TYPE_MESSAGE = 0x4,PIPE_UNLIMITED_INSTANCES = 0xFF,};
enum MACRO_PKCS {PKCS_7_ASN_ENCODING = 0x10000,PKCS_7_NDR_ENCODING = 0x20000,};
enum MACRO_POOL {POOL_CORRUPTION_IN_FILE_AREA = 0xDE,};
enum MACRO_PORT {PORT_TYPE_WRITE = 0x1,PORT_TYPE_READ = 0x2,PORT_TYPE_REDIRECTED = 0x4,PORT_TYPE_NET_ATTACHED = 0x8,PORT_STATUS_TYPE_ERROR = 0x1,PORT_STATUS_TYPE_WARNING = 0x2,PORT_STATUS_TYPE_INFO = 0x3,PORT_STATUS_OFFLINE = 0x1,PORT_STATUS_PAPER_JAM = 0x2,PORT_STATUS_PAPER_OUT = 0x3,PORT_STATUS_OUTPUT_BIN_FULL = 0x4,PORT_STATUS_PAPER_PROBLEM = 0x5,PORT_STATUS_NO_TONER = 0x6,PORT_STATUS_DOOR_OPEN = 0x7,PORT_STATUS_USER_INTERVENTION = 0x8,PORT_STATUS_OUT_OF_MEMORY = 0x9,PORT_STATUS_TONER_LOW = 0xA,PORT_STATUS_WARMING_UP = 0xB,PORT_STATUS_POWER_SAVE = 0xC,};
enum MACRO_PPCF {PPCF_ADDQUOTES = 0x1,PPCF_ADDARGUMENTS = 0x3,PPCF_NODIRECTORIES = 0x10,PPCF_FORCEQUALIFY = 0x40,PPCF_LONGESTPOSSIBLE = 0x80,};
enum MACRO_PROP {PROP_SM_CXDLG = 212,PROP_SM_CYDLG = 188,PROP_MED_CXDLG = 227,PROP_MED_CYDLG = 215,PROP_LG_CXDLG = 252,PROP_LG_CYDLG = 218,};
enum MACRO_PROV {PROV_RSA_FULL = 1,PROV_RSA_SIG = 2,PROV_DSS = 3,PROV_FORTEZZA = 4,PROV_MS_EXCHANGE = 5,PROV_SSL = 6,PROV_RSA_SCHANNEL = 12,PROV_DSS_DH = 13,PROV_EC_ECDSA_SIG = 14,PROV_EC_ECNRA_SIG = 15,PROV_EC_ECDSA_FULL = 16,PROV_EC_ECNRA_FULL = 17,PROV_DH_SCHANNEL = 18,PROV_SPYRUS_LYNKS = 20,PROV_RNG = 21,PROV_INTEL_SEC = 22,PROV_REPLACE_OWF = 23,PROV_RSA_AES = 24,};
enum MACRO_PSCB {PSCB_INITIALIZED = 1,PSCB_PRECREATE = 2,};
enum MACRO_RAND {RAND_MAX = 0x7FFF,};
enum MACRO_RBAB {RBAB_AUTOSIZE = 0x1,RBAB_ADDBAND = 0x2,};
enum MACRO_RBBS {RBBS_BREAK = 0x1,RBBS_FIXEDSIZE = 0x2,RBBS_CHILDEDGE = 0x4,RBBS_HIDDEN = 0x8,RBBS_NOVERT = 0x10,RBBS_FIXEDBMP = 0x20,RBBS_VARIABLEHEIGHT = 0x40,RBBS_GRIPPERALWAYS = 0x80,RBBS_NOGRIPPER = 0x100,RBBS_USECHEVRON = 0x200,RBBS_HIDETITLE = 0x400,RBBS_TOPALIGN = 0x800,};
enum MACRO_RBHT {RBHT_NOWHERE = 0x1,RBHT_CAPTION = 0x2,RBHT_CLIENT = 0x3,RBHT_GRABBER = 0x4,RBHT_CHEVRON = 0x8,};
enum MACRO_RBIM {RBIM_IMAGELIST = 0x1,};
enum MACRO_RBNM {RBNM_ID = 0x1,RBNM_STYLE = 0x2,RBNM_LPARAM = 0x4,};
enum MACRO_READ {READ_CONTROL = 0x20000,};
enum MACRO_RIDI {RIDI_PREPARSEDDATA = 0x20000005,RIDI_DEVICENAME = 0x20000007,RIDI_DEVICEINFO = 0x2000000B,};
enum MACRO_RING {RING = 0x30A,};
enum MACRO_ROLE {ROLE_SYSTEM_TITLEBAR = 0x1,ROLE_SYSTEM_MENUBAR = 0x2,ROLE_SYSTEM_SCROLLBAR = 0x3,ROLE_SYSTEM_GRIP = 0x4,ROLE_SYSTEM_SOUND = 0x5,ROLE_SYSTEM_CURSOR = 0x6,ROLE_SYSTEM_CARET = 0x7,ROLE_SYSTEM_ALERT = 0x8,ROLE_SYSTEM_WINDOW = 0x9,ROLE_SYSTEM_CLIENT = 0xA,ROLE_SYSTEM_MENUPOPUP = 0xB,ROLE_SYSTEM_MENUITEM = 0xC,ROLE_SYSTEM_TOOLTIP = 0xD,ROLE_SYSTEM_APPLICATION = 0xE,ROLE_SYSTEM_DOCUMENT = 0xF,ROLE_SYSTEM_PANE = 0x10,ROLE_SYSTEM_CHART = 0x11,ROLE_SYSTEM_DIALOG = 0x12,ROLE_SYSTEM_BORDER = 0x13,ROLE_SYSTEM_GROUPING = 0x14,ROLE_SYSTEM_SEPARATOR = 0x15,ROLE_SYSTEM_TOOLBAR = 0x16,ROLE_SYSTEM_STATUSBAR = 0x17,ROLE_SYSTEM_TABLE = 0x18,ROLE_SYSTEM_COLUMNHEADER = 0x19,ROLE_SYSTEM_ROWHEADER = 0x1A,ROLE_SYSTEM_COLUMN = 0x1B,ROLE_SYSTEM_ROW = 0x1C,ROLE_SYSTEM_CELL = 0x1D,ROLE_SYSTEM_LINK = 0x1E,ROLE_SYSTEM_HELPBALLOON = 0x1F,ROLE_SYSTEM_CHARACTER = 0x20,ROLE_SYSTEM_LIST = 0x21,ROLE_SYSTEM_LISTITEM = 0x22,ROLE_SYSTEM_OUTLINE = 0x23,ROLE_SYSTEM_OUTLINEITEM = 0x24,ROLE_SYSTEM_PAGETAB = 0x25,ROLE_SYSTEM_PROPERTYPAGE = 0x26,ROLE_SYSTEM_INDICATOR = 0x27,ROLE_SYSTEM_GRAPHIC = 0x28,ROLE_SYSTEM_STATICTEXT = 0x29,ROLE_SYSTEM_TEXT = 0x2A,ROLE_SYSTEM_PUSHBUTTON = 0x2B,ROLE_SYSTEM_CHECKBUTTON = 0x2C,ROLE_SYSTEM_RADIOBUTTON = 0x2D,ROLE_SYSTEM_COMBOBOX = 0x2E,ROLE_SYSTEM_DROPLIST = 0x2F,ROLE_SYSTEM_PROGRESSBAR = 0x30,ROLE_SYSTEM_DIAL = 0x31,ROLE_SYSTEM_HOTKEYFIELD = 0x32,ROLE_SYSTEM_SLIDER = 0x33,ROLE_SYSTEM_SPINBUTTON = 0x34,ROLE_SYSTEM_DIAGRAM = 0x35,ROLE_SYSTEM_ANIMATION = 0x36,ROLE_SYSTEM_EQUATION = 0x37,ROLE_SYSTEM_BUTTONDROPDOWN = 0x38,ROLE_SYSTEM_BUTTONMENU = 0x39,ROLE_SYSTEM_BUTTONDROPDOWNGRID = 0x3A,ROLE_SYSTEM_WHITESPACE = 0x3B,ROLE_SYSTEM_PAGETABLIST = 0x3C,ROLE_SYSTEM_CLOCK = 0x3D,ROLE_SYSTEM_SPLITBUTTON = 0x3E,ROLE_SYSTEM_IPADDRESS = 0x3F,ROLE_SYSTEM_OUTLINEBUTTON = 0x40,};
enum MACRO_RSVP {RSVP_OBJECT_ID_BASE = 1000,RSVP_OBJECT_STATUS_INFO = 1000,RSVP_OBJECT_RESERVE_INFO = 1001,RSVP_OBJECT_ADSPEC = 1002,RSVP_OBJECT_POLICY_INFO = 1003,RSVP_OBJECT_FILTERSPEC_LIST = 1004,RSVP_DEFAULT_STYLE = 0,RSVP_WILDCARD_STYLE = 1,RSVP_FIXED_FILTER_STYLE = 2,RSVP_SHARED_EXPLICIT_STYLE = 3,};
enum MACRO_SAVE {SAVE_ATTRIBUTE_VALUES = 0xD3,};
enum MACRO_SBSP {SBSP_DEFBROWSER = 0x0,SBSP_SAMEBROWSER = 0x1,SBSP_NEWBROWSER = 0x2,SBSP_DEFMODE = 0x0,SBSP_OPENMODE = 0x10,SBSP_EXPLOREMODE = 0x20,SBSP_HELPMODE = 0x40,SBSP_NOTRANSFERHIST = 0x80,SBSP_ABSOLUTE = 0x0,SBSP_RELATIVE = 0x1000,SBSP_PARENT = 0x2000,SBSP_NAVIGATEBACK = 0x4000,SBSP_NAVIGATEFORWARD = 0x8000,SBSP_ALLOW_AUTONAVIGATE = 0x10000,SBSP_NOAUTOSELECT = 0x4000000,SBSP_WRITENOHISTORY = 0x8000000,SBSP_REDIRECT = 0x40000000,SBSP_INITIATEDBYHLINKFRAME = 0x80000000,};
enum MACRO_SCSI {SCSI_VERIFIER_DETECTED_VIOLATION = 0xF1,};
enum MACRO_SDDL {SDDL_REVISION_1 = 1,SDDL_REVISION = 1,SDDL_ALIAS_SIZE = 2,SDDL_SEPERATORC = 59,SDDL_DELIMINATORC = 58,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SFVM {SFVM_MERGEMENU = 1,SFVM_INVOKECOMMAND = 2,SFVM_GETHELPTEXT = 3,SFVM_GETTOOLTIPTEXT = 4,SFVM_GETBUTTONINFO = 5,SFVM_GETBUTTONS = 6,SFVM_INITMENUPOPUP = 7,SFVM_FSNOTIFY = 14,SFVM_WINDOWCREATED = 15,SFVM_GETDETAILSOF = 23,SFVM_COLUMNCLICK = 24,SFVM_QUERYFSNOTIFY = 25,SFVM_DEFITEMCOUNT = 26,SFVM_DEFVIEWMODE = 27,SFVM_UNMERGEMENU = 28,SFVM_UPDATESTATUSBAR = 31,SFVM_BACKGROUNDENUM = 32,SFVM_DIDDRAGDROP = 36,SFVM_SETISFV = 39,SFVM_THISIDLIST = 41,SFVM_ADDPROPERTYPAGES = 47,SFVM_BACKGROUNDENUMDONE = 48,SFVM_GETNOTIFY = 49,SFVM_GETSORTDEFAULTS = 53,SFVM_SIZE = 57,SFVM_GETZONE = 58,SFVM_GETPANE = 59,SFVM_GETHELPTOPIC = 63,SFVM_GETANIMATION = 68,};
enum MACRO_SGNR {SGNR_TYPE_TIMESTAMP = 0x10,};
enum MACRO_SHFT {SHFT_INVALID = 0xF,};
enum MACRO_SHOP {SHOP_PRINTERNAME = 0x1,SHOP_FILEPATH = 0x2,SHOP_VOLUMEGUID = 0x4,};
enum MACRO_SHOW {SHOW_OPENWINDOW = 1,SHOW_ICONWINDOW = 2,SHOW_FULLSCREEN = 3,SHOW_OPENNOACTIVATE = 4,};
enum MACRO_SIOM {SIOM_OVERLAYINDEX = 1,SIOM_ICONINDEX = 2,SIOM_RESERVED_SHARED = 0,SIOM_RESERVED_LINK = 1,SIOM_RESERVED_SLOWFILE = 2,};
enum MACRO_SIZE {SIZE_OF_80387_REGISTERS = 80,};
enum MACRO_SMDM {SMDM_SHELLFOLDER = 0x1,SMDM_HMENU = 0x2,SMDM_TOOLBAR = 0x4,};
enum MACRO_SMTO {SMTO_NORMAL = 0x0,SMTO_BLOCK = 0x1,SMTO_ABORTIFHUNG = 0x2,SMTO_NOTIMEOUTIFNOTHUNG = 0x8,};
enum MACRO_SNCF {SNCF_REFRESHLIST = 0x1,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SORT {SORT_DEFAULT = 0x0,SORT_JAPANESE_XJIS = 0x0,SORT_JAPANESE_UNICODE = 0x1,SORT_CHINESE_BIG5 = 0x0,SORT_CHINESE_PRCP = 0x0,SORT_CHINESE_UNICODE = 0x1,SORT_CHINESE_PRC = 0x2,SORT_CHINESE_BOPOMOFO = 0x3,SORT_KOREAN_KSC = 0x0,SORT_KOREAN_UNICODE = 0x1,SORT_GERMAN_PHONE_BOOK = 0x1,SORT_HUNGARIAN_DEFAULT = 0x0,SORT_HUNGARIAN_TECHNICAL = 0x1,SORT_GEORGIAN_TRADITIONAL = 0x0,SORT_GEORGIAN_MODERN = 0x1,};
enum MACRO_SPID {SPID_ACTIVE = 1,SPID_DEFAULT = 2,SPID_REMOVED = 4,};
enum MACRO_SPIF {SPIF_UPDATEINIFILE = 0x1,SPIF_SENDWININICHANGE = 0x2,SPIF_SENDCHANGE = 0x2,};
enum MACRO_SPIN {SPIN_LOCK_ALREADY_OWNED = 0xF,SPIN_LOCK_NOT_OWNED = 0x10,};
enum MACRO_SPWP {SPWP_USE_DEVINFO_DATA = 0x1,};
enum MACRO_SRRF {SRRF_RT_REG_NONE = 0x1,SRRF_RT_REG_SZ = 0x2,SRRF_RT_REG_EXPAND_SZ = 0x4,SRRF_RT_REG_BINARY = 0x8,SRRF_RT_REG_DWORD = 0x10,SRRF_RT_REG_MULTI_SZ = 0x20,SRRF_RT_REG_QWORD = 0x40,SRRF_RT_DWORD = 0x18,SRRF_RT_QWORD = 0x48,SRRF_RT_ANY = 0xFFFF,SRRF_RM_ANY = 0x0,SRRF_RM_NORMAL = 0x10000,SRRF_RM_SAFE = 0x20000,SRRF_RM_SAFENETWORK = 0x40000,SRRF_NOEXPAND = 0x10000000,SRRF_ZEROONFAILURE = 0x20000000,};
enum MACRO_SSGF {SSGF_NONE = 0,SSGF_DISPLAY = 3,};
enum MACRO_SSTF {SSTF_NONE = 0,SSTF_CHARS = 1,SSTF_BORDER = 2,SSTF_DISPLAY = 3,};
enum MACRO_SSWF {SSWF_NONE = 0,SSWF_TITLE = 1,SSWF_WINDOW = 2,SSWF_DISPLAY = 3,SSWF_CUSTOM = 4,};
enum MACRO_STGM {STGM_DIRECT = 0x0,STGM_TRANSACTED = 0x10000,STGM_SIMPLE = 0x8000000,STGM_READ = 0x0,STGM_WRITE = 0x1,STGM_READWRITE = 0x2,STGM_SHARE_DENY_NONE = 0x40,STGM_SHARE_DENY_READ = 0x30,STGM_SHARE_DENY_WRITE = 0x20,STGM_SHARE_EXCLUSIVE = 0x10,STGM_PRIORITY = 0x40000,STGM_DELETEONRELEASE = 0x4000000,STGM_NOSCRATCH = 0x100000,STGM_CREATE = 0x1000,STGM_CONVERT = 0x20000,STGM_FAILIFTHERE = 0x0,STGM_NOSNAPSHOT = 0x200000,STGM_DIRECT_SWMR = 0x400000,};
enum MACRO_STIF {STIF_DEFAULT = 0x0,STIF_SUPPORT_HEX = 0x1,};
enum MACRO_SUOI {SUOI_FORCEDELETE = 0x1,};
enum MACRO_SVSI {SVSI_DESELECT = 0x0,SVSI_SELECT = 0x1,SVSI_EDIT = 0x3,SVSI_DESELECTOTHERS = 0x4,SVSI_ENSUREVISIBLE = 0x8,SVSI_FOCUSED = 0x10,SVSI_TRANSLATEPT = 0x20,SVSI_SELECTIONMARK = 0x40,SVSI_POSITIONITEM = 0x80,SVSI_CHECK = 0x100,SVSI_NOSTATECHANGE = 0x80000000,};
enum MACRO_S_OK {S_OK = 0x0,S_FALSE = 0x1,};
enum MACRO_TAPE {TAPE_ERASE_SHORT = 0,TAPE_ERASE_LONG = 1,TAPE_LOAD = 0,TAPE_UNLOAD = 1,TAPE_TENSION = 2,TAPE_LOCK = 3,TAPE_UNLOCK = 4,TAPE_FORMAT = 5,TAPE_SETMARKS = 0,TAPE_FILEMARKS = 1,TAPE_SHORT_FILEMARKS = 2,TAPE_LONG_FILEMARKS = 3,TAPE_ABSOLUTE_POSITION = 0,TAPE_LOGICAL_POSITION = 1,TAPE_PSEUDO_LOGICAL_POSITION = 2,TAPE_REWIND = 0,TAPE_ABSOLUTE_BLOCK = 1,TAPE_LOGICAL_BLOCK = 2,TAPE_PSEUDO_LOGICAL_BLOCK = 3,TAPE_SPACE_END_OF_DATA = 4,TAPE_SPACE_RELATIVE_BLOCKS = 5,TAPE_SPACE_FILEMARKS = 6,TAPE_SPACE_SEQUENTIAL_FMKS = 7,TAPE_SPACE_SETMARKS = 8,TAPE_SPACE_SEQUENTIAL_SMKS = 9,TAPE_DRIVE_FIXED = 1,TAPE_DRIVE_SELECT = 2,TAPE_DRIVE_INITIATOR = 4,TAPE_DRIVE_ERASE_SHORT = 16,TAPE_DRIVE_ERASE_LONG = 32,TAPE_DRIVE_ERASE_BOP_ONLY = 64,TAPE_DRIVE_ERASE_IMMEDIATE = 128,TAPE_DRIVE_TAPE_CAPACITY = 256,TAPE_DRIVE_TAPE_REMAINING = 512,TAPE_DRIVE_FIXED_BLOCK = 1024,TAPE_DRIVE_VARIABLE_BLOCK = 2048,TAPE_DRIVE_WRITE_PROTECT = 4096,TAPE_DRIVE_EOT_WZ_SIZE = 8192,TAPE_DRIVE_ECC = 65536,TAPE_DRIVE_COMPRESSION = 131072,TAPE_DRIVE_PADDING = 262144,TAPE_DRIVE_REPORT_SMKS = 524288,TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576,TAPE_DRIVE_GET_LOGICAL_BLK = 2097152,TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304,TAPE_DRIVE_EJECT_MEDIA = 16777216,TAPE_DRIVE_CLEAN_REQUESTS = 33554432,TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864,TAPE_DRIVE_RESERVED_BIT = -2147483648,TAPE_DRIVE_LOAD_UNLOAD = -2147483647,TAPE_DRIVE_TENSION = -2147483646,TAPE_DRIVE_LOCK_UNLOCK = -2147483644,TAPE_DRIVE_REWIND_IMMEDIATE = -2147483640,TAPE_DRIVE_SET_BLOCK_SIZE = -2147483632,TAPE_DRIVE_LOAD_UNLD_IMMED = -2147483616,TAPE_DRIVE_TENSION_IMMED = -2147483584,TAPE_DRIVE_LOCK_UNLK_IMMED = -2147483520,TAPE_DRIVE_SET_ECC = -2147483392,TAPE_DRIVE_SET_COMPRESSION = -2147483136,TAPE_DRIVE_SET_PADDING = -2147482624,TAPE_DRIVE_SET_REPORT_SMKS = -2147481600,TAPE_DRIVE_ABSOLUTE_BLK = -2147479552,TAPE_DRIVE_ABS_BLK_IMMED = -2147475456,TAPE_DRIVE_LOGICAL_BLK = -2147467264,TAPE_DRIVE_LOG_BLK_IMMED = -2147450880,TAPE_DRIVE_END_OF_DATA = -2147418112,TAPE_DRIVE_RELATIVE_BLKS = -2147352576,TAPE_DRIVE_FILEMARKS = -2147221504,TAPE_DRIVE_SEQUENTIAL_FMKS = -2146959360,TAPE_DRIVE_SETMARKS = -2146435072,TAPE_DRIVE_SEQUENTIAL_SMKS = -2145386496,TAPE_DRIVE_REVERSE_POSITION = -2143289344,TAPE_DRIVE_SPACE_IMMEDIATE = -2139095040,TAPE_DRIVE_WRITE_SETMARKS = -2130706432,TAPE_DRIVE_WRITE_FILEMARKS = -2113929216,TAPE_DRIVE_WRITE_SHORT_FMKS = -2080374784,TAPE_DRIVE_WRITE_LONG_FMKS = -2013265920,TAPE_DRIVE_WRITE_MARK_IMMED = -1879048192,TAPE_DRIVE_FORMAT = -1610612736,TAPE_DRIVE_FORMAT_IMMEDIATE = -1073741824,TAPE_DRIVE_HIGH_FEATURES = -2147483648,TAPE_FIXED_PARTITIONS = 0,TAPE_SELECT_PARTITIONS = 1,TAPE_INITIATOR_PARTITIONS = 2,TAPE_QUERY_DRIVE_PARAMETERS = 0,TAPE_QUERY_MEDIA_CAPACITY = 1,TAPE_CHECK_FOR_DRIVE_PROBLEM = 2,TAPE_QUERY_IO_ERROR_DATA = 3,TAPE_QUERY_DEVICE_ERROR_DATA = 4,};
enum MACRO_TBBF {TBBF_LARGE = 0x1,};
enum MACRO_TBCD {TBCD_TICS = 0x1,TBCD_THUMB = 0x2,TBCD_CHANNEL = 0x3,};
enum MACRO_TBIF {TBIF_IMAGE = 0x1,TBIF_TEXT = 0x2,TBIF_STATE = 0x4,TBIF_STYLE = 0x8,TBIF_LPARAM = 0x10,TBIF_COMMAND = 0x20,TBIF_SIZE = 0x40,TBIF_BYINDEX = 0x80000000,};
enum MACRO_TBMF {TBMF_PAD = 0x1,TBMF_BARPAD = 0x2,TBMF_BUTTONSPACING = 0x4,};
enum MACRO_TBNF {TBNF_IMAGE = 0x1,TBNF_TEXT = 0x2,TBNF_DI_SETITEM = 0x10000000,};
enum MACRO_TBTS {TBTS_TOP = 0,TBTS_LEFT = 1,TBTS_BOTTOM = 2,TBTS_RIGHT = 3,};
enum MACRO_TCHT {TCHT_NOWHERE = 0x1,TCHT_ONITEMICON = 0x2,TCHT_ONITEMLABEL = 0x4,TCHT_ONITEM = 0x6,};
enum MACRO_TCIF {TCIF_TEXT = 0x1,TCIF_IMAGE = 0x2,TCIF_RTLREADING = 0x4,TCIF_PARAM = 0x8,TCIF_STATE = 0x10,};
enum MACRO_TCIS {TCIS_BUTTONPRESSED = 0x1,TCIS_HIGHLIGHTED = 0x2,};
enum MACRO_TIME {TIME_ZONE_ID_UNKNOWN = 0,TIME_ZONE_ID_STANDARD = 1,TIME_ZONE_ID_DAYLIGHT = 2,};
enum MACRO_TMPF {TMPF_FIXED_PITCH = 0x1,TMPF_VECTOR = 0x2,TMPF_DEVICE = 0x8,TMPF_TRUETYPE = 0x4,};
enum MACRO_TRAP {TRAP_CAUSE_UNKNOWN = 0x12,};
enum MACRO_TTDT {TTDT_AUTOMATIC = 0,TTDT_RESHOW = 1,TTDT_AUTOPOP = 2,TTDT_INITIAL = 3,};
enum MACRO_TVGN {TVGN_ROOT = 0x0,TVGN_NEXT = 0x1,TVGN_PREVIOUS = 0x2,TVGN_PARENT = 0x3,TVGN_CHILD = 0x4,TVGN_FIRSTVISIBLE = 0x5,TVGN_NEXTVISIBLE = 0x6,TVGN_PREVIOUSVISIBLE = 0x7,TVGN_DROPHILITE = 0x8,TVGN_CARET = 0x9,TVGN_LASTVISIBLE = 0xA,};
enum MACRO_TVHT {TVHT_NOWHERE = 0x1,TVHT_ONITEMICON = 0x2,TVHT_ONITEMLABEL = 0x4,TVHT_ONITEMINDENT = 0x8,TVHT_ONITEMBUTTON = 0x10,TVHT_ONITEMRIGHT = 0x20,TVHT_ONITEMSTATEICON = 0x40,TVHT_ABOVE = 0x100,TVHT_BELOW = 0x200,TVHT_TORIGHT = 0x400,TVHT_TOLEFT = 0x800,};
enum MACRO_TVIF {TVIF_TEXT = 0x1,TVIF_IMAGE = 0x2,TVIF_PARAM = 0x4,TVIF_STATE = 0x8,TVIF_HANDLE = 0x10,TVIF_SELECTEDIMAGE = 0x20,TVIF_CHILDREN = 0x40,TVIF_INTEGRAL = 0x80,};
enum MACRO_TVIS {TVIS_SELECTED = 0x2,TVIS_CUT = 0x4,TVIS_DROPHILITED = 0x8,TVIS_BOLD = 0x10,TVIS_EXPANDED = 0x20,TVIS_EXPANDEDONCE = 0x40,TVIS_EXPANDPARTIAL = 0x80,TVIS_OVERLAYMASK = 0xF00,TVIS_STATEIMAGEMASK = 0xF000,TVIS_USERMASK = 0xF000,};
enum MACRO_TVOT {TVOT_2STATES = 0,TVOT_3STATES = 1,TVOT_UDARROW = 2,TVOT_TRACKBAR = 3,TVOT_SCROLLBAR = 4,TVOT_LISTBOX = 5,TVOT_COMBOBOX = 6,TVOT_EDITBOX = 7,TVOT_PUSHBUTTON = 8,TVOT_CHKBOX = 9,TVOT_LAST = 9,TVOT_NONE = 10,};
enum MACRO_TVSI {TVSI_NOSINGLEEXPAND = 0x8000,};
enum MACRO_TYPE {TYPE_E_BUFFERTOOSMALL = 0x80028016,TYPE_E_FIELDNOTFOUND = 0x80028017,TYPE_E_INVDATAREAD = 0x80028018,TYPE_E_UNSUPFORMAT = 0x80028019,TYPE_E_REGISTRYACCESS = 0x8002801C,TYPE_E_LIBNOTREGISTERED = 0x8002801D,TYPE_E_UNDEFINEDTYPE = 0x80028027,TYPE_E_QUALIFIEDNAMEDISALLOWED = 0x80028028,TYPE_E_INVALIDSTATE = 0x80028029,TYPE_E_WRONGTYPEKIND = 0x8002802A,TYPE_E_ELEMENTNOTFOUND = 0x8002802B,TYPE_E_AMBIGUOUSNAME = 0x8002802C,TYPE_E_NAMECONFLICT = 0x8002802D,TYPE_E_UNKNOWNLCID = 0x8002802E,TYPE_E_DLLFUNCTIONNOTFOUND = 0x8002802F,TYPE_E_BADMODULEKIND = 0x800288BD,TYPE_E_SIZETOOBIG = 0x800288C5,TYPE_E_DUPLICATEID = 0x800288C6,TYPE_E_INVALIDID = 0x800288CF,TYPE_E_TYPEMISMATCH = 0x80028CA0,TYPE_E_OUTOFBOUNDS = 0x80028CA1,TYPE_E_IOERROR = 0x80028CA2,TYPE_E_CANTCREATETMPFILE = 0x80028CA3,TYPE_E_CANTLOADLIBRARY = 0x80029C4A,TYPE_E_INCONSISTENTPROPFUNCS = 0x80029C83,TYPE_E_CIRCULARTYPE = 0x80029C84,};
enum MACRO_UDFS {UDFS_FILE_SYSTEM = 0x9B,};
enum MACRO_UISF {UISF_HIDEFOCUS = 0x1,UISF_HIDEACCEL = 0x2,UISF_ACTIVE = 0x4,};
enum MACRO_USER {USER_MARSHAL_CB_SIGNATURE = 1431523907,USER_CALL_IS_ASYNC = 256,USER_CALL_NEW_CORRELATION_DESC = 512,USER_MARSHAL_FC_BYTE = 1,USER_MARSHAL_FC_CHAR = 2,USER_MARSHAL_FC_SMALL = 3,USER_MARSHAL_FC_USMALL = 4,USER_MARSHAL_FC_WCHAR = 5,USER_MARSHAL_FC_SHORT = 6,USER_MARSHAL_FC_USHORT = 7,USER_MARSHAL_FC_LONG = 8,USER_MARSHAL_FC_ULONG = 9,USER_MARSHAL_FC_FLOAT = 10,USER_MARSHAL_FC_HYPER = 11,USER_MARSHAL_FC_DOUBLE = 12,};
enum MACRO_UYVY {UYVY = 1498831189,};
enum MACRO_VFFF {VFFF_ISSHAREDFILE = 0x1,};
enum MACRO_VFT2 {VFT2_UNKNOWN = 0x0,VFT2_DRV_PRINTER = 0x1,VFT2_DRV_KEYBOARD = 0x2,VFT2_DRV_LANGUAGE = 0x3,VFT2_DRV_DISPLAY = 0x4,VFT2_DRV_MOUSE = 0x5,VFT2_DRV_NETWORK = 0x6,VFT2_DRV_SYSTEM = 0x7,VFT2_DRV_INSTALLABLE = 0x8,VFT2_DRV_SOUND = 0x9,VFT2_DRV_COMM = 0xA,VFT2_DRV_INPUTMETHOD = 0xB,VFT2_DRV_VERSIONED_PRINTER = 0xC,VFT2_FONT_RASTER = 0x1,VFT2_FONT_VECTOR = 0x2,VFT2_FONT_TRUETYPE = 0x3,};
enum MACRO_VHDR {VHDR_DONE = 0x1,VHDR_PREPARED = 0x2,VHDR_INQUEUE = 0x4,VHDR_KEYFRAME = 0x8,VHDR_VALID = 0xF,};
enum MACRO_VIEW {VIEW_E_FIRST = 0x80040140,VIEW_E_LAST = 0x8004014F,VIEW_S_FIRST = 0x40140,VIEW_S_LAST = 0x4014F,VIEW_E_DRAW = 0x80040140,};
enum MACRO_VIFF {VIFF_FORCEINSTALL = 0x1,VIFF_DONTDELETEOLD = 0x2,};
enum MACRO_VPDF {VPDF_DISABLEPWRMGMT = 0x1,VPDF_FORCEAPM10MODE = 0x2,VPDF_SKIPINTELSLCHECK = 0x4,VPDF_DISABLEPWRSTATUSPOLL = 0x8,VPDF_DISABLERINGRESUME = 0x10,VPDF_SHOWMULTIBATT = 0x20,};
enum MACRO_WAIT {WAIT_FAILED = 0xFFFFFFFF,WAIT_OBJECT_0 = 0x0,WAIT_ABANDONED = 0x80,WAIT_ABANDONED_0 = 0x80,WAIT_IO_COMPLETION = 0xC0,};
enum MACRO_WAVE {WAVE_MAPPER = 4294967295,WAVE_FORMAT_QUERY = 1,WAVE_ALLOWSYNC = 2,WAVE_MAPPED = 4,WAVE_FORMAT_DIRECT = 8,WAVE_FORMAT_DIRECT_QUERY = 9,};
enum MACRO_WEOF {WEOF = 0xFFFF,};
enum MACRO_WHDR {WHDR_DONE = 0x1,WHDR_PREPARED = 0x2,WHDR_BEGINLOOP = 0x4,WHDR_ENDLOOP = 0x8,WHDR_INQUEUE = 0x10,};
enum MACRO_WIDM {WIDM_MAPPER_STATUS = 8192,};
enum MACRO_WMSZ {WMSZ_LEFT = 1,WMSZ_RIGHT = 2,WMSZ_TOP = 3,WMSZ_TOPLEFT = 4,WMSZ_TOPRIGHT = 5,WMSZ_BOTTOM = 6,WMSZ_BOTTOMLEFT = 7,WMSZ_BOTTOMRIGHT = 8,};
enum MACRO_WNNC {WNNC_NET_MSNET = 0x10000,WNNC_NET_LANMAN = 0x20000,WNNC_NET_NETWARE = 0x30000,WNNC_NET_VINES = 0x40000,WNNC_NET_10NET = 0x50000,WNNC_NET_LOCUS = 0x60000,WNNC_NET_SUN_PC_NFS = 0x70000,WNNC_NET_LANSTEP = 0x80000,WNNC_NET_9TILES = 0x90000,WNNC_NET_LANTASTIC = 0xA0000,WNNC_NET_AS400 = 0xB0000,WNNC_NET_FTP_NFS = 0xC0000,WNNC_NET_PATHWORKS = 0xD0000,WNNC_NET_LIFENET = 0xE0000,WNNC_NET_POWERLAN = 0xF0000,WNNC_NET_BWNFS = 0x100000,WNNC_NET_COGENT = 0x110000,WNNC_NET_FARALLON = 0x120000,WNNC_NET_APPLETALK = 0x130000,WNNC_NET_INTERGRAPH = 0x140000,WNNC_NET_SYMFONET = 0x150000,WNNC_NET_CLEARCASE = 0x160000,WNNC_NET_FRONTIER = 0x170000,WNNC_NET_BMC = 0x180000,WNNC_NET_DCE = 0x190000,WNNC_NET_AVID = 0x1A0000,WNNC_NET_DOCUSPACE = 0x1B0000,WNNC_NET_MANGOSOFT = 0x1C0000,WNNC_NET_SERNET = 0x1D0000,WNNC_NET_RIVERFRONT1 = 0x1E0000,WNNC_NET_RIVERFRONT2 = 0x1F0000,WNNC_NET_DECORB = 0x200000,WNNC_NET_PROTSTOR = 0x210000,WNNC_NET_FJ_REDIR = 0x220000,WNNC_NET_DISTINCT = 0x230000,WNNC_NET_TWINS = 0x240000,WNNC_NET_RDR2SAMPLE = 0x250000,WNNC_NET_CSC = 0x260000,WNNC_NET_3IN1 = 0x270000,WNNC_NET_EXTENDNET = 0x290000,WNNC_NET_STAC = 0x2A0000,WNNC_NET_FOXBAT = 0x2B0000,WNNC_NET_YAHOO = 0x2C0000,WNNC_NET_EXIFS = 0x2D0000,WNNC_NET_DAV = 0x2E0000,WNNC_NET_KNOWARE = 0x2F0000,WNNC_NET_OBJECT_DIRE = 0x300000,WNNC_NET_MASFAX = 0x310000,WNNC_NET_HOB_NFS = 0x320000,WNNC_NET_SHIVA = 0x330000,WNNC_NET_IBMAL = 0x340000,WNNC_NET_LOCK = 0x350000,WNNC_NET_TERMSRV = 0x360000,WNNC_NET_SRT = 0x370000,WNNC_NET_QUINCY = 0x380000,WNNC_CRED_MANAGER = 0xFFFF0000,};
enum MACRO_WODM {WODM_MAPPER_STATUS = 8192,};
enum MACRO_WTCI {WTCI_DONT_OPEN_STORES = 0x1,WTCI_OPEN_ONLY_ROOT = 0x2,};
enum MACRO_WTPF {WTPF_TRUSTTEST = 0x20,WTPF_TESTCANBEVALID = 0x80,WTPF_IGNOREEXPIRATION = 0x100,WTPF_IGNOREREVOKATION = 0x200,WTPF_OFFLINEOK_IND = 0x400,WTPF_OFFLINEOK_COM = 0x800,WTPF_OFFLINEOKNBU_IND = 0x1000,WTPF_OFFLINEOKNBU_COM = 0x2000,WTPF_VERIFY_V1_OFF = 0x10000,WTPF_IGNOREREVOCATIONONTS = 0x20000,WTPF_ALLOWONLYPERTRUST = 0x40000,};
enum MACRO_X509 {X509_ASN_ENCODING = 0x1,X509_NDR_ENCODING = 0x2,};
enum MACRO_X942 {X942_DH_PARAMETERS = 50,};
enum MACRO_XACT {XACT_E_FIRST = 0x8004D000,XACT_E_LAST = 0x8004D029,XACT_S_FIRST = 0x4D000,XACT_S_LAST = 0x4D010,XACT_E_ALREADYOTHERSINGLEPHASE = 0x8004D000,XACT_E_CANTRETAIN = 0x8004D001,XACT_E_COMMITFAILED = 0x8004D002,XACT_E_COMMITPREVENTED = 0x8004D003,XACT_E_HEURISTICABORT = 0x8004D004,XACT_E_HEURISTICCOMMIT = 0x8004D005,XACT_E_HEURISTICDAMAGE = 0x8004D006,XACT_E_HEURISTICDANGER = 0x8004D007,XACT_E_ISOLATIONLEVEL = 0x8004D008,XACT_E_NOASYNC = 0x8004D009,XACT_E_NOENLIST = 0x8004D00A,XACT_E_NOISORETAIN = 0x8004D00B,XACT_E_NORESOURCE = 0x8004D00C,XACT_E_NOTCURRENT = 0x8004D00D,XACT_E_NOTRANSACTION = 0x8004D00E,XACT_E_NOTSUPPORTED = 0x8004D00F,XACT_E_UNKNOWNRMGRID = 0x8004D010,XACT_E_WRONGSTATE = 0x8004D011,XACT_E_WRONGUOW = 0x8004D012,XACT_E_XTIONEXISTS = 0x8004D013,XACT_E_NOIMPORTOBJECT = 0x8004D014,XACT_E_INVALIDCOOKIE = 0x8004D015,XACT_E_INDOUBT = 0x8004D016,XACT_E_NOTIMEOUT = 0x8004D017,XACT_E_ALREADYINPROGRESS = 0x8004D018,XACT_E_ABORTED = 0x8004D019,XACT_E_LOGFULL = 0x8004D01A,XACT_E_TMNOTAVAILABLE = 0x8004D01B,XACT_E_CONNECTION_DOWN = 0x8004D01C,XACT_E_CONNECTION_DENIED = 0x8004D01D,XACT_E_REENLISTTIMEOUT = 0x8004D01E,XACT_E_TIP_CONNECT_FAILED = 0x8004D01F,XACT_E_TIP_PROTOCOL_ERROR = 0x8004D020,XACT_E_TIP_PULL_FAILED = 0x8004D021,XACT_E_DEST_TMNOTAVAILABLE = 0x8004D022,XACT_E_TIP_DISABLED = 0x8004D023,XACT_E_NETWORK_TX_DISABLED = 0x8004D024,XACT_E_PARTNER_NETWORK_TX_DISABLED = 0x8004D025,XACT_E_XA_TX_DISABLED = 0x8004D026,XACT_E_UNABLE_TO_READ_DTC_CONFIG = 0x8004D027,XACT_E_UNABLE_TO_LOAD_DTC_PROXY = 0x8004D028,XACT_E_ABORTING = 0x8004D029,XACT_E_CLERKNOTFOUND = 0x8004D080,XACT_E_CLERKEXISTS = 0x8004D081,XACT_E_RECOVERYINPROGRESS = 0x8004D082,XACT_E_TRANSACTIONCLOSED = 0x8004D083,XACT_E_INVALIDLSN = 0x8004D084,XACT_E_REPLAYREQUEST = 0x8004D085,XACT_S_ASYNC = 0x4D000,XACT_S_DEFECT = 0x4D001,XACT_S_READONLY = 0x4D002,XACT_S_SOMENORETAIN = 0x4D003,XACT_S_OKINFORM = 0x4D004,XACT_S_MADECHANGESCONTENT = 0x4D005,XACT_S_MADECHANGESINFORM = 0x4D006,XACT_S_ALLNORETAIN = 0x4D007,XACT_S_ABORTING = 0x4D008,XACT_S_SINGLEPHASE = 0x4D009,XACT_S_LOCALLY_OK = 0x4D00A,XACT_S_LASTRESOURCEMANAGER = 0x4D010,};
enum MACRO_XTYP {XTYP_ERROR = 0x8002,XTYP_ADVDATA = 0x4010,XTYP_ADVREQ = 0x2022,XTYP_ADVSTART = 0x1030,XTYP_ADVSTOP = 0x8040,XTYP_EXECUTE = 0x4050,XTYP_CONNECT = 0x1062,XTYP_CONNECT_CONFIRM = 0x8072,XTYP_XACT_COMPLETE = 0x8080,XTYP_POKE = 0x4090,XTYP_REGISTER = 0x80A2,XTYP_REQUEST = 0x20B0,XTYP_DISCONNECT = 0x80C2,XTYP_UNREGISTER = 0x80D2,XTYP_WILDCONNECT = 0x20E2,XTYP_MASK = 0xF0,XTYP_SHIFT = 0x4,};
enum MACRO_Y211 {Y211 = 825307737,};
enum MACRO_Y411 {Y411 = 825308249,};
enum MACRO_YUY2 {YUY2 = 844715353,};
enum MACRO_YVU9 {YVU9 = 961893977,};
enum MACRO_YVYU {YVYU = 1431918169,};
enum MACRO__DBL {_DBL_RADIX = 2,_DBL_ROUNDS = 1,};
enum MACRO__FPE {_FPE_INVALID = 0x81,_FPE_DENORMAL = 0x82,_FPE_ZERODIVIDE = 0x83,_FPE_OVERFLOW = 0x84,_FPE_UNDERFLOW = 0x85,_FPE_INEXACT = 0x86,_FPE_UNEMULATED = 0x87,_FPE_SQRTNEG = 0x88,_FPE_STACKOVERFLOW = 0x8A,_FPE_STACKUNDERFLOW = 0x8B,_FPE_EXPLICITGEN = 0x8C,};
enum MACRO__INC {_INC_MMREG = 158,};
enum MACRO__IOB {_IOB_ENTRIES = 20,};
enum MACRO__MAX {_MAX_PATH = 260,_MAX_DRIVE = 3,_MAX_DIR = 256,_MAX_FNAME = 256,_MAX_EXT = 256,};
enum MACRO__MCW {_MCW_EM = 0x8001F,};
enum MACRO__OUT {_OUT_TO_DEFAULT = 0,_OUT_TO_STDERR = 1,_OUT_TO_MSGBOX = 2,};
enum MACRO__SYS {_SYS_OPEN = 20,};
enum MACRO_chx1 {chx1 = 0x410,};
enum MACRO_chx2 {chx2 = 0x411,};
enum MACRO_chx3 {chx3 = 0x412,};
enum MACRO_chx4 {chx4 = 0x413,};
enum MACRO_chx5 {chx5 = 0x414,};
enum MACRO_chx6 {chx6 = 0x415,};
enum MACRO_chx7 {chx7 = 0x416,};
enum MACRO_chx8 {chx8 = 0x417,};
enum MACRO_chx9 {chx9 = 0x418,};
enum MACRO_cmb1 {cmb1 = 0x470,};
enum MACRO_cmb2 {cmb2 = 0x471,};
enum MACRO_cmb3 {cmb3 = 0x472,};
enum MACRO_cmb4 {cmb4 = 0x473,};
enum MACRO_cmb5 {cmb5 = 0x474,};
enum MACRO_cmb6 {cmb6 = 0x475,};
enum MACRO_cmb7 {cmb7 = 0x476,};
enum MACRO_cmb8 {cmb8 = 0x477,};
enum MACRO_cmb9 {cmb9 = 0x478,};
enum MACRO_ctl1 {ctl1 = 0x4A0,};
enum MACRO_edt1 {edt1 = 0x480,};
enum MACRO_edt2 {edt2 = 0x481,};
enum MACRO_edt3 {edt3 = 0x482,};
enum MACRO_edt4 {edt4 = 0x483,};
enum MACRO_edt5 {edt5 = 0x484,};
enum MACRO_edt6 {edt6 = 0x485,};
enum MACRO_edt7 {edt7 = 0x486,};
enum MACRO_edt8 {edt8 = 0x487,};
enum MACRO_edt9 {edt9 = 0x488,};
enum MACRO_frm1 {frm1 = 0x434,};
enum MACRO_frm2 {frm2 = 0x435,};
enum MACRO_frm3 {frm3 = 0x436,};
enum MACRO_frm4 {frm4 = 0x437,};
enum MACRO_grp1 {grp1 = 0x430,};
enum MACRO_grp2 {grp2 = 0x431,};
enum MACRO_grp3 {grp3 = 0x432,};
enum MACRO_grp4 {grp4 = 0x433,};
enum MACRO_ico1 {ico1 = 0x43C,};
enum MACRO_ico2 {ico2 = 0x43D,};
enum MACRO_ico3 {ico3 = 0x43E,};
enum MACRO_ico4 {ico4 = 0x43F,};
enum MACRO_lst1 {lst1 = 0x460,};
enum MACRO_lst2 {lst2 = 0x461,};
enum MACRO_lst3 {lst3 = 0x462,};
enum MACRO_lst4 {lst4 = 0x463,};
enum MACRO_lst5 {lst5 = 0x464,};
enum MACRO_lst6 {lst6 = 0x465,};
enum MACRO_lst7 {lst7 = 0x466,};
enum MACRO_lst8 {lst8 = 0x467,};
enum MACRO_lst9 {lst9 = 0x468,};
enum MACRO_mIOC {mIOC_IN = 0x80000000,mIOC_OUT = 0x40000000,mIOC_VENDOR = 0x4000000,};
enum MACRO_psh1 {psh1 = 0x400,};
enum MACRO_psh2 {psh2 = 0x401,};
enum MACRO_psh3 {psh3 = 0x402,};
enum MACRO_psh4 {psh4 = 0x403,};
enum MACRO_psh5 {psh5 = 0x404,};
enum MACRO_psh6 {psh6 = 0x405,};
enum MACRO_psh7 {psh7 = 0x406,};
enum MACRO_psh8 {psh8 = 0x407,};
enum MACRO_psh9 {psh9 = 0x408,};
enum MACRO_rad1 {rad1 = 0x420,};
enum MACRO_rad2 {rad2 = 0x421,};
enum MACRO_rad3 {rad3 = 0x422,};
enum MACRO_rad4 {rad4 = 0x423,};
enum MACRO_rad5 {rad5 = 0x424,};
enum MACRO_rad6 {rad6 = 0x425,};
enum MACRO_rad7 {rad7 = 0x426,};
enum MACRO_rad8 {rad8 = 0x427,};
enum MACRO_rad9 {rad9 = 0x428,};
enum MACRO_rct1 {rct1 = 0x438,};
enum MACRO_rct2 {rct2 = 0x439,};
enum MACRO_rct3 {rct3 = 0x43A,};
enum MACRO_rct4 {rct4 = 0x43B,};
enum MACRO_scr1 {scr1 = 0x490,};
enum MACRO_scr2 {scr2 = 0x491,};
enum MACRO_scr3 {scr3 = 0x492,};
enum MACRO_scr4 {scr4 = 0x493,};
enum MACRO_scr5 {scr5 = 0x494,};
enum MACRO_scr6 {scr6 = 0x495,};
enum MACRO_scr7 {scr7 = 0x496,};
enum MACRO_scr8 {scr8 = 0x497,};
enum MACRO_stc1 {stc1 = 0x440,};
enum MACRO_stc2 {stc2 = 0x441,};
enum MACRO_stc3 {stc3 = 0x442,};
enum MACRO_stc4 {stc4 = 0x443,};
enum MACRO_stc5 {stc5 = 0x444,};
enum MACRO_stc6 {stc6 = 0x445,};
enum MACRO_stc7 {stc7 = 0x446,};
enum MACRO_stc8 {stc8 = 0x447,};
enum MACRO_stc9 {stc9 = 0x448,};
typedef struct _MCDBUFFERS MCDBUFFERS;
typedef struct _MCDCOMMAND MCDCOMMAND;
typedef struct _MCDSURFACE MCDSURFACE;
typedef struct _MCDTEXTURE MCDTEXTURE;
typedef struct tagMETAHEADER METAHEADER;
typedef struct tagMETARECORD METARECORD;
typedef struct tagMETHODDATA METHODDATA;
typedef struct _MIB_TCPROW MIB_TCPROW;
typedef struct _MIB_UDPROW MIB_UDPROW;
typedef struct _MIDILOCALE MIDILOCALE;
typedef struct tagMINMAXINFO MINMAXINFO;
typedef struct tagMIXERCAPSA MIXERCAPSA;
typedef struct tagMIXERCAPSW MIXERCAPSW;
typedef struct tagMIXERLINEA MIXERLINEA;
typedef struct tagMIXERLINEW MIXERLINEW;
typedef struct _MONITORREG MONITORREG;
typedef struct tagMOUSEINPUT MOUSEINPUT;
typedef struct tagNMDAYSTATE NMDAYSTATE;
typedef struct tagNMLISTVIEW NMLISTVIEW;
typedef struct tagNMLVSCROLL NMLVSCROLL;
typedef struct _EAA2A559B48BCBAE81109D6C3EFDA87C NMPGSCROLL;
typedef struct tagNMTOOLBARA NMTOOLBARA;
typedef struct tagNMTOOLBARW NMTOOLBARW;
typedef struct _ABCFLOAT *NPABCFLOAT;
typedef struct tagAUXCAPSA *NPAUXCAPSA;
typedef struct tagAUXCAPSW *NPAUXCAPSW;
typedef struct _devicemodeA *NPDEVMODEA;
typedef struct _devicemodeW *NPDEVMODEW;
typedef struct tagEVENTMSG *NPEVENTMSG;
typedef struct tagJOYCAPSA *NPJOYCAPSA;
typedef struct tagJOYCAPSW *NPJOYCAPSW;
typedef struct tagLOGBRUSH *NPLOGBRUSH;
typedef struct tagLOGFONTA *NPLOGFONTA;
typedef struct tagLOGFONTW *NPLOGFONTW;
typedef struct _MMCKINFO *NPMMCKINFO;
typedef struct _MMIOINFO *NPMMIOINFO;
typedef struct tagPELARRAY *NPPELARRAY;
typedef struct timecaps_tag *NPTIMECAPS;
typedef struct tagTRANSMSG *NPTRANSMSG;
typedef struct _numberfmtA NUMBERFMTA;
typedef struct _numberfmtW NUMBERFMTW;
struct NetCrawler;
typedef struct _OEMDMPARAM OEMDMPARAM;
typedef struct _OEMUIPROCS OEMUIPROCS;
typedef struct _tagOLECMDTEXT OLECMDTEXT;
typedef struct _OVERLAPPED OVERLAPPED;
typedef struct tagAUXCAPS2A *PAUXCAPS2A;
typedef struct tagAUXCAPS2W *PAUXCAPS2W;
typedef IAVIStream *PAVISTREAM;
typedef struct tagAXESLISTA *PAXESLISTA;
typedef struct tagAXESLISTW *PAXESLISTW;
typedef struct tagAXISINFOA *PAXISINFOA;
typedef struct tagAXISINFOW *PAXISINFOW;
typedef struct _BIDI_DATA *PBIDI_DATA;
typedef struct _BIN_COUNT *PBIN_COUNT;
typedef struct _BIN_RANGE *PBIN_RANGE;
typedef struct tagCapStatus *PCAPSTATUS;
typedef struct _CRYPTOAPI_BLOB *PCERT_BLOB;
typedef struct _CERT_INFO *PCERT_INFO;
typedef struct _CERT_PAIR *PCERT_PAIR;
typedef struct _CHAR_INFO *PCHAR_INFO;
typedef struct _COLORINFO *PCOLORINFO;
typedef struct _CRL_ENTRY *PCRL_ENTRY;
typedef struct _CTL_ENTRY *PCTL_ENTRY;
typedef struct _CTL_USAGE *PCTL_USAGE;
typedef struct tagCWPSTRUCT *PCWPSTRUCT;
typedef struct _CRYPTOAPI_BLOB *PDATA_BLOB;
typedef struct _DEVHTINFO *PDEVHTINFO;
typedef struct IDirect3D8 *PDIRECT3D8;
typedef struct tagEMRBITBLT *PEMRBITBLT;
typedef struct tagEMRFORMAT *PEMRFORMAT;
typedef struct tagEMRLINETO *PEMRLINETO;
typedef struct tagEMRPLGBLT *PEMRPLGBLT;
typedef struct tagABORTPATH *PEMRSAVEDC;
typedef struct _EXTCHKBOX *PEXTCHKBOX;
typedef struct tagEXTLOGPEN *PEXTLOGPEN;
typedef struct _GAMMARAMP *PGAMMARAMP;
typedef struct tagGUIDELINE *PGUIDELINE;
typedef struct _HIDP_CAPS *PHIDP_CAPS;
typedef struct _HIDP_DATA *PHIDP_DATA;
typedef struct _HMAC_Info *PHMAC_INFO;
typedef struct _IOSPACE32 *PIOSPACE32;
typedef struct _IOSPACE64 *PIOSPACE64;
typedef struct tagJOYCAPS2A *PJOYCAPS2A;
typedef struct tagJOYCAPS2W *PJOYCAPS2W;
typedef struct joyinfoex_tag *PJOYINFOEX;
typedef struct tagKbdLayer *PKBDTABLES;
typedef struct _1C8C43135D010607C9E39DAEFBEEA658 *PKSQUALITY;
typedef struct _KS_COLCON *PKS_COLCON;
typedef struct _LANA_ENUM *PLANA_ENUM;
typedef struct _LDT_ENTRY *PLDT_ENTRY;
typedef struct _LIGATURE1 *PLIGATURE1;
typedef struct _LIGATURE2 *PLIGATURE2;
typedef struct _LIGATURE3 *PLIGATURE3;
typedef struct _LIGATURE4 *PLIGATURE4;
typedef struct _LIGATURE5 *PLIGATURE5;
typedef struct _LINEATTRS *PLINEATTRS;
typedef struct _MIB_IFROW *PMIB_IFROW;
typedef struct _4ECFA59CF9422A64A465D2E51971C347 *PMODIFIERS;
typedef struct _MOF_FIELD *PMOF_FIELD;
typedef struct _MONITORUI *PMONITORUI;
typedef struct _NDIS_GUID *PNDIS_GUID;
typedef struct _POINTFLOAT POINTFLOAT;
typedef struct tagPOLYTEXTA *PPOLYTEXTA;
typedef struct tagPOLYTEXTW *PPOLYTEXTW;
typedef struct _RAS_STATS *PRAS_STATS;
typedef struct _SPC_IMAGE *PSPC_IMAGE;
typedef struct tagSTYLEBUFA *PSTYLEBUFA;
typedef struct tagSTYLEBUFW *PSTYLEBUFW;
typedef struct _SecHandle *PSecHandle;
typedef struct tagTOOLINFOA *PTOOLINFOA;
typedef struct tagTOOLINFOW *PTOOLINFOW;
typedef struct _TRANSDATA *PTRANSDATA;
typedef struct _TRIVERTEX *PTRIVERTEX;
typedef unsigned short *PUHALF_PTR;
typedef unsigned int *PULONG_PTR;
typedef struct _UNIFM_HDR *PUNIFM_HDR;
typedef struct _VK_FUNCTION_PARAM *PVK_FPARAM;
typedef struct _F2BCB5D6531DBE53AEF2D3A6C84D3598 *PVK_TO_BIT;
typedef struct tagWINDOWPOS *PWINDOWPOS;
typedef struct tagWNDCLASSA *PWNDCLASSA;
typedef struct tagWNDCLASSW *PWNDCLASSW;
typedef struct _RAS_PORT_0 RAS_PORT_0;
typedef struct _RAS_PORT_1 RAS_PORT_1;
typedef struct _RAS_USER_0 RAS_USER_0;
typedef unsigned char *RPC_BUFPTR;
typedef unsigned int RPC_LENGTH;
typedef struct _RPC_POLICY RPC_POLICY;
typedef int RPC_STATUS;
typedef struct tagRemHBITMAP RemHBITMAP;
typedef struct tagRemHGLOBAL RemHGLOBAL;
typedef struct tagSCROLLINFO SCROLLINFO;
typedef struct _SFV_CREATE SFV_CREATE;
typedef struct __MIDL___MIDL_itf_shobjidl_0201_0002 SHCOLUMNID;
typedef struct _SMALL_RECT SMALL_RECT;
typedef struct tagSTGOPTIONS STGOPTIONS;
typedef struct tagSTICKYKEYS STICKYKEYS;
enum SYSGEOTYPE {GEO_NATION = 0x1,GEO_LATITUDE = 0x2,GEO_LONGITUDE = 0x3,GEO_ISO2 = 0x4,GEO_ISO3 = 0x5,GEO_RFC1766 = 0x6,GEO_LCID = 0x7,GEO_FRIENDLYNAME = 0x8,GEO_OFFICIALNAME = 0x9,GEO_TIMEZONES = 0xA,GEO_OFFICIALLANGUAGES = 0xB,};
typedef struct _SYSTEMTIME SYSTEMTIME;
typedef struct _tagStartParam StartParam;
typedef struct _TAPE_ERASE TAPE_ERASE;
typedef struct tagTOGGLEKEYS TOGGLEKEYS;
typedef struct _TOKEN_USER TOKEN_USER;
typedef struct _TTGETTITLE TTGETTITLE;
typedef struct _TYPE1_FONT TYPE1_FONT;
typedef struct _UNIDRVINFO UNIDRVINFO;
typedef struct _F1B55BC800274E3ABC9BA0A46288924E USN_RECORD;
typedef struct _VIDMEMINFO VIDMEMINFO;
typedef struct _8DF64ED1B184087013973064ABC778F1 VSC_LPWSTR;
typedef struct wavefilter_tag WAVEFILTER;
typedef struct waveformat_tag WAVEFORMAT;
typedef struct _WIDTHTABLE WIDTHTABLE;
typedef struct tagWINDOWINFO WINDOWINFO;
typedef struct _WSAVersion WSAVERSION;
typedef struct _WST_BUFFER WST_BUFFER;
struct WebBrowser;
enum _BIN_TYPES {RequestSize = 0x0,RequestLocation = 0x1,};
enum _D3DFORMAT {D3DFMT_UNKNOWN = 0x0,D3DFMT_R8G8B8 = 0x14,D3DFMT_A8R8G8B8 = 0x15,D3DFMT_X8R8G8B8 = 0x16,D3DFMT_R5G6B5 = 0x17,D3DFMT_X1R5G5B5 = 0x18,D3DFMT_A1R5G5B5 = 0x19,D3DFMT_A4R4G4B4 = 0x1A,D3DFMT_R3G3B2 = 0x1B,D3DFMT_A8 = 0x1C,D3DFMT_A8R3G3B2 = 0x1D,D3DFMT_X4R4G4B4 = 0x1E,D3DFMT_A2B10G10R10 = 0x1F,D3DFMT_G16R16 = 0x22,D3DFMT_A8P8 = 0x28,D3DFMT_P8 = 0x29,D3DFMT_L8 = 0x32,D3DFMT_A8L8 = 0x33,D3DFMT_A4L4 = 0x34,D3DFMT_V8U8 = 0x3C,D3DFMT_L6V5U5 = 0x3D,D3DFMT_X8L8V8U8 = 0x3E,D3DFMT_Q8W8V8U8 = 0x3F,D3DFMT_V16U16 = 0x40,D3DFMT_W11V11U10 = 0x41,D3DFMT_A2W10V10U10 = 0x43,D3DFMT_UYVY = 0x59565955,D3DFMT_YUY2 = 0x32595559,D3DFMT_DXT1 = 0x31545844,D3DFMT_DXT2 = 0x32545844,D3DFMT_DXT3 = 0x33545844,D3DFMT_DXT4 = 0x34545844,D3DFMT_DXT5 = 0x35545844,D3DFMT_D16_LOCKABLE = 0x46,D3DFMT_D32 = 0x47,D3DFMT_D15S1 = 0x49,D3DFMT_D24S8 = 0x4B,D3DFMT_D16 = 0x50,D3DFMT_D24X8 = 0x4D,D3DFMT_D24X4S4 = 0x4F,D3DFMT_VERTEXDATA = 0x64,D3DFMT_INDEX16 = 0x65,D3DFMT_INDEX32 = 0x66,D3DFMT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DOPCODE {D3DOP_POINT = 0x1,D3DOP_LINE = 0x2,D3DOP_TRIANGLE = 0x3,D3DOP_MATRIXLOAD = 0x4,D3DOP_MATRIXMULTIPLY = 0x5,D3DOP_STATETRANSFORM = 0x6,D3DOP_STATELIGHT = 0x7,D3DOP_STATERENDER = 0x8,D3DOP_PROCESSVERTICES = 0x9,D3DOP_TEXTURELOAD = 0xA,D3DOP_EXIT = 0xB,D3DOP_BRANCHFORWARD = 0xC,D3DOP_SPAN = 0xD,D3DOP_SETSTATUS = 0xE,D3DOP_FORCE_DWORD = 0x7FFFFFFF,};
struct _D3DVECTOR {float x;float y;float z;};
struct _IMAGELIST;
struct _KS_COLCON {unsigned char emph1col : 4;unsigned char emph2col : 4;unsigned char backcol : 4;unsigned char patcol : 4;unsigned char emph1con : 4;unsigned char emph2con : 4;unsigned char backcon : 4;unsigned char patcon : 4;};
struct _WORD_BLOB {unsigned int clSize;unsigned short asData[1];};
enum tagDATADIR {DATADIR_GET = 0x1,DATADIR_SET = 0x2,};
enum tagEXTCONN {EXTCONN_STRONG = 0x1,EXTCONN_WEAK = 0x2,EXTCONN_CALLABLE = 0x4,};
enum tagOLEMISC {OLEMISC_RECOMPOSEONRESIZE = 0x1,OLEMISC_ONLYICONIC = 0x2,OLEMISC_INSERTNOTREPLACE = 0x4,OLEMISC_STATIC = 0x8,OLEMISC_CANTLINKINSIDE = 0x10,OLEMISC_CANLINKBYOLE1 = 0x20,OLEMISC_ISLINKOBJECT = 0x40,OLEMISC_INSIDEOUT = 0x80,OLEMISC_ACTIVATEWHENVISIBLE = 0x100,OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,OLEMISC_INVISIBLEATRUNTIME = 0x400,OLEMISC_ALWAYSRUN = 0x800,OLEMISC_ACTSLIKEBUTTON = 0x1000,OLEMISC_ACTSLIKELABEL = 0x2000,OLEMISC_NOUIACTIVATE = 0x4000,OLEMISC_ALIGNABLE = 0x8000,OLEMISC_SIMPLEFRAME = 0x10000,OLEMISC_SETCLIENTSITEFIRST = 0x20000,OLEMISC_IMEMODE = 0x40000,OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,OLEMISC_WANTSTOMENUMERGE = 0x100000,OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000,};
enum tagREGKIND {REGKIND_DEFAULT = 0x0,REGKIND_REGISTER = 0x1,REGKIND_NONE = 0x2,};
enum tagSF_TYPE {SF_ERROR = 0xA,SF_I1 = 0x10,SF_I2 = 0x2,SF_I4 = 0x3,SF_I8 = 0x14,SF_BSTR = 0x8,SF_UNKNOWN = 0xD,SF_DISPATCH = 0x9,SF_VARIANT = 0xC,SF_RECORD = 0x24,SF_HAVEIID = 0x800D,};
enum tagSHCONTF {SHCONTF_FOLDERS = 0x20,SHCONTF_NONFOLDERS = 0x40,SHCONTF_INCLUDEHIDDEN = 0x80,SHCONTF_INIT_ON_FIRST_NEXT = 0x100,SHCONTF_NETPRINTERSRCH = 0x200,SHCONTF_SHAREABLE = 0x400,SHCONTF_STORAGE = 0x800,};
enum tagSTGMOVE {STGMOVE_MOVE = 0x0,STGMOVE_COPY = 0x1,STGMOVE_SHALLOWCOPY = 0x2,};
enum tagSYSKIND {SYS_WIN16 = 0x0,SYS_WIN32 = 0x1,SYS_MAC = 0x2,SYS_WIN64 = 0x3,};
enum tagURLZONE {URLZONE_PREDEFINED_MIN = 0x0,URLZONE_LOCAL_MACHINE = 0x0,URLZONE_INTRANET = 0x1,URLZONE_TRUSTED = 0x2,URLZONE_INTERNET = 0x3,URLZONE_UNTRUSTED = 0x4,URLZONE_PREDEFINED_MAX = 0x3E7,URLZONE_USER_MIN = 0x3E8,URLZONE_USER_MAX = 0x2710,};
enum tagVARKIND {VAR_PERINSTANCE = 0x0,VAR_STATIC = 0x1,VAR_CONST = 0x2,VAR_DISPATCH = 0x3,};
typedef struct tagSTGMEDIUM uSTGMEDIUM;
typedef struct _userBITMAP userBITMAP;
typedef struct tagARRAYDESC ARRAYDESC;
typedef struct tagAUXCAPS2A AUXCAPS2A;
typedef struct tagAUXCAPS2W AUXCAPS2W;
typedef struct tagAXESLISTA AXESLISTA;
typedef struct tagAXESLISTW AXESLISTW;
typedef struct tagAXISINFOA AXISINFOA;
typedef struct tagAXISINFOW AXISINFOW;
enum AnnoScope {ANNO_THIS = 0x0,ANNO_CONTAINER = 0x1,};
typedef struct _BIDI_DATA BIDI_DATA;
typedef struct tagBIND_OPTS BIND_OPTS;
typedef struct _BIN_COUNT BIN_COUNT;
typedef struct _BIN_RANGE BIN_RANGE;
typedef struct _BYTE_BLOB BYTE_BLOB;
typedef struct tagCapStatus CAPSTATUS;
typedef struct _CRYPTOAPI_BLOB CERT_BLOB;
typedef struct _CERT_INFO CERT_INFO;
typedef struct _CERT_PAIR CERT_PAIR;
typedef struct _CHAR_INFO CHAR_INFO;
typedef struct _CIECHROMA CIECHROMA;
typedef struct _COLORINFO COLORINFO;
typedef struct _cpinfoexA CPINFOEXA;
typedef struct _cpinfoexW CPINFOEXW;
typedef struct _CRL_ENTRY CRL_ENTRY;
typedef struct _CTL_ENTRY CTL_ENTRY;
typedef struct _CTL_USAGE CTL_USAGE;
typedef struct tagCWPSTRUCT CWPSTRUCT;
typedef struct _D3DBRANCH D3DBRANCH;
typedef struct _D3DLIGHT2 D3DLIGHT2;
typedef struct _D3DLIGHT7 D3DLIGHT7;
typedef struct _D3DLIGHT8 D3DLIGHT8;
typedef struct _D3DMATRIX D3DMATRIX;
typedef struct _D3DSTATUS D3DSTATUS;
typedef struct _D3DVECTOR D3DVECTOR;
typedef struct _D3DVERTEX D3DVERTEX;
typedef struct _CRYPTOAPI_BLOB DATA_BLOB;
typedef struct _61B889227CECAFED4E8A477D21B34BC9 DDEADVISE;
typedef struct _DDHALINFO DDHALINFO;
typedef struct _DDSCAPSEX DDSCAPSEX;
typedef struct _DEVHTINFO DEVHTINFO;
typedef struct _DLSHEADER DLSHEADER;
typedef struct _DMUS_WAVE DMUS_WAVE;
typedef struct _DRAGINFOA DRAGINFOA;
typedef struct _DRAGINFOW DRAGINFOW;
typedef struct _DRIVEROBJ DRIVEROBJ;
typedef struct _DROPFILES DROPFILES;
typedef struct _PUBKEY DSSPUBKEY;
typedef struct tagEMRBITBLT EMRBITBLT;
typedef struct tagEMRFORMAT EMRFORMAT;
typedef struct tagEMRLINETO EMRLINETO;
typedef struct tagEMRPLGBLT EMRPLGBLT;
typedef struct tagABORTPATH EMRSAVEDC;
typedef struct _ENUMRECTS ENUMRECTS;
typedef struct tagEXCEPINFO EXCEPINFO;
typedef void ( *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
typedef struct _EXTCHKBOX EXTCHKBOX;
typedef struct tagEXTLOGPEN EXTLOGPEN;
typedef struct FARPROC16__ *FARPROC16;
enum FECMethod {BDA_FEC_METHOD_NOT_SET = 0xFFFFFFFF,BDA_FEC_METHOD_NOT_DEFINED = 0x0,BDA_FEC_VITERBI = 0x1,BDA_FEC_RS_204_188 = 0x2,BDA_FEC_MAX = 0x3,};
typedef struct tagFORMATETC FORMATETC;
typedef struct _GAMMARAMP GAMMARAMP;
typedef struct _GLYPHBITS GLYPHBITS;
typedef struct _GLYPHDATA GLYPHDATA;
typedef struct tagGUIDELINE GUIDELINE;
struct HACMOBJ__ {int unused;};
struct HBITMAP__ {int unused;};
typedef struct HCONVLIST__ *HCONVLIST;
typedef void *HCRYPTMSG;
struct HDRVOBJ__ {int unused;};
typedef struct _HEAPALIAS HEAPALIAS;
typedef struct tagHH_AKLINK HH_AKLINK;
typedef struct _HIDP_CAPS HIDP_CAPS;
typedef struct _HIDP_DATA HIDP_DATA;
typedef struct HINSTANCE__ *HINSTANCE;
typedef struct _HMAC_Info HMAC_INFO;
typedef struct HMETAFILE__ *HMETAFILE;
struct HMIDIIN__ {int unused;};
typedef struct HMIDISTRM__ *HMIDISTRM;
typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef struct HRAWINPUT__ *HRAWINPUT;
typedef struct _TREEITEM *HTREEITEM;
struct HWAVEIN__ {int unused;};
struct HWINSTA__ {int unused;};
struct IBandSite {struct IBandSiteVtbl *lpVtbl;};
struct IBindHost {struct IBindHostVtbl *lpVtbl;};
typedef struct _83A144ADE81B1E4C267934DC64843ED5 ICPALETTE;
struct IContinue {struct IContinueVtbl *lpVtbl;};
struct IDeskBand {struct IDeskBandVtbl *lpVtbl;};
struct IDispatch {struct IDispatchVtbl *lpVtbl;};
struct IEnumGUID {struct IEnumGUIDVtbl *lpVtbl;};
struct IErrorLog {struct IErrorLogVtbl *lpVtbl;};
struct IFontDisp {struct IFontDispVtbl *lpVtbl;};
struct IGetFrame {struct IGetFrameVtbl *lpVtbl;};
struct IInternet {struct IInternetVtbl *lpVtbl;};
typedef struct _IMAGEINFO IMAGEINFO;
struct IMarshal2 {struct IMarshal2Vtbl *lpVtbl;};
struct IMenuBand {struct IMenuBandVtbl *lpVtbl;};
typedef struct _IOSPACE32 IOSPACE32;
typedef struct _IOSPACE64 IOSPACE64;
struct IOleCache {struct IOleCacheVtbl *lpVtbl;};
struct IPipeByte {struct IPipeByteVtbl *lpVtbl;};
struct IPipeLong {struct IPipeLongVtbl *lpVtbl;};
struct ISearches {struct ISearchesVtbl *lpVtbl;};
struct ITypeComp {struct ITypeCompVtbl *lpVtbl;};
struct ITypeInfo {struct ITypeInfoVtbl *lpVtbl;};
struct ITypeLib2 {struct ITypeLib2Vtbl *lpVtbl;};
struct IWiaVideo {struct IWiaVideoVtbl *lpVtbl;};
struct IXMLError {struct IXMLErrorVtbl *lpVtbl;};
typedef struct tagJOYCAPS2A JOYCAPS2A;
typedef struct tagJOYCAPS2W JOYCAPS2W;
typedef struct joyinfoex_tag JOYINFOEX;
typedef struct tagKbdLayer KBDTABLES;
typedef struct _PUBKEY KEAPUBKEY;
typedef struct _1C8C43135D010607C9E39DAEFBEEA658 KSQUALITY;
typedef struct _KS_COLCON KS_COLCON;
typedef struct _LANA_ENUM LANA_ENUM;
typedef struct _LDT_ENTRY LDT_ENTRY;
typedef struct _LIGATURE1 LIGATURE1;
typedef struct _LIGATURE2 LIGATURE2;
typedef struct _LIGATURE3 LIGATURE3;
typedef struct _LIGATURE4 LIGATURE4;
typedef struct _LIGATURE5 LIGATURE5;
typedef struct _LINEATTRS LINEATTRS;
typedef IBindCtx *LPBINDCTX;
typedef IBinding *LPBINDING;
typedef union tagBINDPTR *LPBINDPTR;
typedef struct tagCADWORD *LPCADWORD;
typedef struct _COMSTAT *LPCOMSTAT;
typedef struct _D3DLINE *LPD3DLINE;
typedef struct _D3DRECT *LPD3DRECT;
typedef struct _D3DSPAN *LPD3DSPAN;
typedef struct _DDFXROP *LPDDFXROP;
typedef struct _DSBCAPS *LPDSBCAPS;
typedef struct _DSCCAPS *LPDSCCAPS;
typedef struct _HD_ITEMA *LPHDITEMA;
typedef struct _HD_ITEMW *LPHDITEMW;
typedef struct hostent *LPHOSTENT;
typedef struct _IDEREGS *LPIDEREGS;
typedef struct tagIDLDESC *LPIDLDESC;
typedef struct tagIMEINFO *LPIMEINFO;
typedef struct _tagIMEPROA *LPIMEPROA;
typedef struct _tagIMEPROW *LPIMEPROW;
typedef struct in_addr *LPIN_ADDR;
typedef struct joyinfo_tag *LPJOYINFO;
typedef struct tagLICINFO *LPLICINFO;
typedef struct _VMEML **LPLPVMEML;
typedef struct _VMEMR **LPLPVMEMR;
typedef struct tagLVITEMA *LPLVITEMA;
typedef struct tagLVITEMW *LPLVITEMW;
typedef IMarshal *LPMARSHAL;
typedef struct midihdr_tag *LPMIDIHDR;
typedef IMoniker *LPMONIKER;
typedef struct _MONITOR *LPMONITOR;
typedef IMultiQI *LPMULTIQI;
typedef struct tagNMMOUSE *LPNMMOUSE;
typedef struct tagNMREBAR *LPNMREBAR;
typedef IOleLink *LPOLELINK;
typedef struct tagOLEVERB *LPOLEVERB;
typedef IPersist *LPPERSIST;
typedef IPicture *LPPICTURE;
typedef struct tagPOINTFX *LPPOINTFX;
typedef struct _POOLCUE *LPPOOLCUE;
typedef PROPPRG *LPPROPPRG;
typedef struct _RGNDATA *LPRGNDATA;
typedef struct servent *LPSERVENT;
typedef IStorage *LPSTORAGE;
typedef struct tagTCITEMA *LPTCITEMA;
typedef struct tagTCITEMW *LPTCITEMW;
typedef struct timeval *LPTIMEVAL;
typedef struct tagTVITEMA *LPTVITEMA;
typedef struct tagTVITEMW *LPTVITEMW;
typedef ITypeLib *LPTYPELIB;
typedef struct _UDACCEL *LPUDACCEL;
typedef IUnknown *LPUNKNOWN;
typedef struct tagVARDESC *LPVARDESC;
typedef struct wavehdr_tag *LPWAVEHDR;
typedef struct tagWCRANGE *LPWCRANGE;
typedef struct _WGLSWAP *LPWGLSWAP;
typedef struct WSPData *LPWSPDATA;
typedef struct tagLVCOLUMNA LVCOLUMNA;
typedef struct tagLVCOLUMNW LVCOLUMNW;
enum MACRO_ABE {ABE_LEFT = 0,ABE_TOP = 1,ABE_RIGHT = 2,ABE_BOTTOM = 3,};
enum MACRO_ABM {ABM_NEW = 0x0,ABM_REMOVE = 0x1,ABM_QUERYPOS = 0x2,ABM_SETPOS = 0x3,ABM_GETSTATE = 0x4,ABM_GETTASKBARPOS = 0x5,ABM_ACTIVATE = 0x6,ABM_GETAUTOHIDEBAR = 0x7,ABM_SETAUTOHIDEBAR = 0x8,ABM_WINDOWPOSCHANGED = 0x9,ABM_SETSTATE = 0xA,};
enum MACRO_ABN {ABN_STATECHANGE = 0x0,ABN_POSCHANGED = 0x1,ABN_FULLSCREENAPP = 0x2,ABN_WINDOWARRANGE = 0x3,};
enum MACRO_ABS {ABS_AUTOHIDE = 0x1,ABS_ALWAYSONTOP = 0x2,};
enum MACRO_ACE {OBJECT_INHERIT_ACE = 0x1,CONTAINER_INHERIT_ACE = 0x2,NO_PROPAGATE_INHERIT_ACE = 0x4,INHERIT_ONLY_ACE = 0x8,INHERITED_ACE = 0x10,};
enum MACRO_ACL {ACL_REVISION = 2,ACL_REVISION_DS = 4,ACL_REVISION1 = 1,ACL_REVISION2 = 2,ACL_REVISION3 = 3,ACL_REVISION4 = 4,};
enum MACRO_ACM {ACM_MPEG_LAYER1 = 0x1,ACM_MPEG_LAYER2 = 0x2,ACM_MPEG_LAYER3 = 0x4,ACM_MPEG_STEREO = 0x1,ACM_MPEG_JOINTSTEREO = 0x2,ACM_MPEG_DUALCHANNEL = 0x4,ACM_MPEG_SINGLECHANNEL = 0x8,ACM_MPEG_PRIVATEBIT = 0x1,ACM_MPEG_COPYRIGHT = 0x2,ACM_MPEG_ORIGINALHOME = 0x4,ACM_MPEG_PROTECTIONBIT = 0x8,ACM_MPEG_ID_MPEG1 = 0x10,};
enum MACRO_ACN {ACN_START = 1,ACN_STOP = 2,};
enum MACRO_ACS {ACS_CENTER = 0x1,ACS_TRANSPARENT = 0x2,ACS_AUTOPLAY = 0x4,ACS_TIMER = 0x8,};
enum MACRO_AEC {AEC_STATUS_FD_HISTORY_UNINITIALIZED = 0x0,AEC_STATUS_FD_HISTORY_CONTINUOUSLY_CONVERGED = 0x1,AEC_STATUS_FD_HISTORY_PREVIOUSLY_DIVERGED = 0x2,AEC_STATUS_FD_CURRENTLY_CONVERGED = 0x8,AEC_MODE_PASS_THROUGH = 0x0,AEC_MODE_HALF_DUPLEX = 0x1,AEC_MODE_FULL_DUPLEX = 0x2,};
enum MACRO_AGP {AGP_FLAG_NO_1X_RATE = 0x1,AGP_FLAG_NO_2X_RATE = 0x2,AGP_FLAG_NO_4X_RATE = 0x4,AGP_FLAG_NO_8X_RATE = 0x8,AGP_FLAG_REVERSE_INITIALIZATION = 0x80,AGP_FLAG_NO_SBA_ENABLE = 0x100,AGP_FLAG_SPECIAL_TARGET = 0xFFFFF,AGP_FLAG_SPECIAL_RESERVE = 0xF0000,};
enum MACRO_ALG {ALG_CLASS_ANY = 0,ALG_CLASS_SIGNATURE = 8192,ALG_CLASS_MSG_ENCRYPT = 16384,ALG_CLASS_DATA_ENCRYPT = 24576,ALG_CLASS_HASH = 32768,ALG_CLASS_KEY_EXCHANGE = 40960,ALG_CLASS_ALL = 57344,ALG_TYPE_ANY = 0,ALG_TYPE_DSS = 512,ALG_TYPE_RSA = 1024,ALG_TYPE_BLOCK = 1536,ALG_TYPE_STREAM = 2048,ALG_TYPE_DH = 2560,ALG_TYPE_SECURECHANNEL = 3072,ALG_SID_ANY = 0,ALG_SID_RSA_ANY = 0,ALG_SID_RSA_PKCS = 1,ALG_SID_RSA_MSATWORK = 2,ALG_SID_RSA_ENTRUST = 3,ALG_SID_RSA_PGP = 4,ALG_SID_DSS_ANY = 0,ALG_SID_DSS_PKCS = 1,ALG_SID_DSS_DMS = 2,ALG_SID_DES = 1,ALG_SID_3DES = 3,ALG_SID_DESX = 4,ALG_SID_IDEA = 5,ALG_SID_CAST = 6,ALG_SID_SAFERSK64 = 7,ALG_SID_SAFERSK128 = 8,ALG_SID_3DES_112 = 9,ALG_SID_CYLINK_MEK = 12,ALG_SID_RC5 = 13,ALG_SID_AES_128 = 14,ALG_SID_AES_192 = 15,ALG_SID_AES_256 = 16,ALG_SID_AES = 17,ALG_SID_SKIPJACK = 10,ALG_SID_TEK = 11,};
enum MACRO_ANY {ANY_SIZE = 1,};
enum MACRO_APC {APC_INDEX_MISMATCH = 0x1,};
enum MACRO_APD {APD_STRICT_UPGRADE = 0x1,APD_STRICT_DOWNGRADE = 0x2,APD_COPY_ALL_FILES = 0x4,APD_COPY_NEW_FILES = 0x8,APD_COPY_FROM_DIRECTORY = 0x10,};
enum MACRO_ARW {ARW_BOTTOMLEFT = 0x0,ARW_BOTTOMRIGHT = 0x1,ARW_TOPLEFT = 0x2,ARW_TOPRIGHT = 0x3,ARW_STARTMASK = 0x3,ARW_STARTRIGHT = 0x1,ARW_STARTTOP = 0x2,ARW_LEFT = 0x0,ARW_RIGHT = 0x0,ARW_UP = 0x4,ARW_DOWN = 0x4,ARW_HIDE = 0x8,};
enum MACRO_ATF {ATF_TIMEOUTON = 0x1,ATF_ONOFFFEEDBACK = 0x2,};
enum MACRO_AUX {AUX_MAPPER = 4294967295,};
enum MACRO_AVI {AVI_HEADERSIZE = 2048,};
enum MACRO_BAD {BAD_POOL_HEADER = 0x19,};
enum MACRO_BCM {BCM_GETIDEALSIZE = 0x1601,BCM_SETIMAGELIST = 0x1602,BCM_GETIMAGELIST = 0x1603,BCM_SETTEXTMARGIN = 0x1604,BCM_GETTEXTMARGIN = 0x1605,};
enum MACRO_BCN {BCN_FIRST = -1250,BCN_LAST = -1350,};
enum MACRO_BDA {BDA_FREQUENCY_NOT_SET = -1,BDA_FREQUENCY_NOT_DEFINED = 0,BDA_RANGE_NOT_SET = -1,BDA_RANGE_NOT_DEFINED = 0,BDA_CHAN_BANDWITH_NOT_SET = -1,BDA_CHAN_BANDWITH_NOT_DEFINED = 0,BDA_FREQUENCY_MULTIPLIER_NOT_SET = -1,BDA_FREQUENCY_MULTIPLIER_NOT_DEFINED = 0,};
enum MACRO_BDR {BDR_RAISEDOUTER = 0x1,BDR_SUNKENOUTER = 0x2,BDR_RAISEDINNER = 0x4,BDR_SUNKENINNER = 0x8,BDR_OUTER = 0x3,BDR_INNER = 0xC,BDR_RAISED = 0x5,BDR_SUNKEN = 0xA,};
enum MACRO_BIF {BIF_SHOWSIMILARDRIVERS = 0x1,BIF_RAWDEVICENEEDSDRIVER = 0x2,};
enum MACRO_BIT {EXTENDED_BIT = 0x1000000,DONTCARE_BIT = 0x2000000,};
enum MACRO_BMF {BMF_1BPP = 1,BMF_4BPP = 2,BMF_8BPP = 3,BMF_16BPP = 4,BMF_24BPP = 5,BMF_32BPP = 6,BMF_4RLE = 7,BMF_8RLE = 8,BMF_JPEG = 9,BMF_PNG = 10,BMF_TOPDOWN = 1,BMF_NOZEROINIT = 2,BMF_DONTCACHE = 4,BMF_USERMEM = 8,BMF_KMSECTION = 16,BMF_NOTSYSMEM = 32,BMF_WINDOW_BLT = 64,BMF_UMPDMEM = 128,BMF_RESERVED = 65280,};
enum MACRO_BPC {BPC_MIN_DIMENSION = 1,BPC_MAX_BUFFER_SIZE = 64,BPC_MIN_BUFFER_SIZE = 4,BPC_DEVICE_ANY = -1,BPC_STREAM_TYPE_GENERIC_MIN = 16777216,BPC_STREAM_TYPE_RAW = 16777216,BPC_STREAM_TYPE_MPT_128 = 16777217,BPC_STREAM_TYPE_MPT_128_CRC = 16777218,BPC_STREAM_TYPE_IP = 16777219,BPC_STREAM_TYPE_PROVIDER_MIN = 33554432,BPC_STREAM_TYPE_PROVIDER_MAX = 50331647,BPC_STREAM_TYPE_ADAPTER_MIN = 50331648,BPC_STREAM_TYPE_ADAPTER_MAX = 67108863,};
enum MACRO_BSF {BSF_QUERY = 0x1,BSF_IGNORECURRENTTASK = 0x2,BSF_FLUSHDISK = 0x4,BSF_NOHANG = 0x8,BSF_POSTMESSAGE = 0x10,BSF_FORCEIFHUNG = 0x20,BSF_NOTIMEOUTIFNOTHUNG = 0x40,BSF_ALLOWSFW = 0x80,BSF_SENDNOTIFYMESSAGE = 0x100,BSF_RETURNHDESK = 0x200,BSF_LUID = 0x400,};
enum MACRO_BSM {BSM_ALLCOMPONENTS = 0x0,BSM_VXDS = 0x1,BSM_NETDRIVER = 0x2,BSM_INSTALLABLEDRIVERS = 0x4,BSM_APPLICATIONS = 0x8,BSM_ALLDESKTOPS = 0x10,};
enum MACRO_BST {BST_UNCHECKED = 0x0,BST_CHECKED = 0x1,BST_INDETERMINATE = 0x2,BST_PUSHED = 0x4,BST_FOCUS = 0x8,};
enum MACRO_CAL {CAL_NOUSEROVERRIDE = -2147483648,CAL_USE_CP_ACP = 1073741824,CAL_RETURN_NUMBER = 536870912,CAL_ICALINTVALUE = 1,CAL_SCALNAME = 2,CAL_IYEAROFFSETRANGE = 3,CAL_SERASTRING = 4,CAL_SSHORTDATE = 5,CAL_SLONGDATE = 6,CAL_SDAYNAME1 = 7,CAL_SDAYNAME2 = 8,CAL_SDAYNAME3 = 9,CAL_SDAYNAME4 = 10,CAL_SDAYNAME5 = 11,CAL_SDAYNAME6 = 12,CAL_SDAYNAME7 = 13,CAL_SABBREVDAYNAME1 = 14,CAL_SABBREVDAYNAME2 = 15,CAL_SABBREVDAYNAME3 = 16,CAL_SABBREVDAYNAME4 = 17,CAL_SABBREVDAYNAME5 = 18,CAL_SABBREVDAYNAME6 = 19,CAL_SABBREVDAYNAME7 = 20,CAL_SMONTHNAME1 = 21,CAL_SMONTHNAME2 = 22,CAL_SMONTHNAME3 = 23,CAL_SMONTHNAME4 = 24,CAL_SMONTHNAME5 = 25,CAL_SMONTHNAME6 = 26,CAL_SMONTHNAME7 = 27,CAL_SMONTHNAME8 = 28,CAL_SMONTHNAME9 = 29,CAL_SMONTHNAME10 = 30,CAL_SMONTHNAME11 = 31,CAL_SMONTHNAME12 = 32,CAL_SMONTHNAME13 = 33,CAL_SABBREVMONTHNAME1 = 34,CAL_SABBREVMONTHNAME2 = 35,CAL_SABBREVMONTHNAME3 = 36,CAL_SABBREVMONTHNAME4 = 37,CAL_SABBREVMONTHNAME5 = 38,CAL_SABBREVMONTHNAME6 = 39,CAL_SABBREVMONTHNAME7 = 40,CAL_SABBREVMONTHNAME8 = 41,CAL_SABBREVMONTHNAME9 = 42,CAL_SABBREVMONTHNAME10 = 43,CAL_SABBREVMONTHNAME11 = 44,CAL_SABBREVMONTHNAME12 = 45,CAL_SABBREVMONTHNAME13 = 46,CAL_SYEARMONTH = 47,CAL_ITWODIGITYEARMAX = 48,};
enum MACRO_CAP {CAP_ATA_ID_CMD = 1,CAP_ATAPI_ID_CMD = 2,CAP_SMART_CMD = 4,};
enum MACRO_CAT {CAT_E_FIRST = 0x80040160,CAT_E_LAST = 0x80040161,CAT_E_CATIDNOEXIST = 0x80040160,CAT_E_NODESCRIPTION = 0x80040161,};
enum MACRO_CBF {CBF_FAIL_SELFCONNECTIONS = 0x1000,CBF_FAIL_CONNECTIONS = 0x2000,CBF_FAIL_ADVISES = 0x4000,CBF_FAIL_EXECUTES = 0x8000,CBF_FAIL_POKES = 0x10000,CBF_FAIL_REQUESTS = 0x20000,CBF_FAIL_ALLSVRXACTIONS = 0x3F000,CBF_SKIP_CONNECT_CONFIRMS = 0x40000,CBF_SKIP_REGISTRATIONS = 0x80000,CBF_SKIP_UNREGISTRATIONS = 0x100000,CBF_SKIP_DISCONNECTS = 0x200000,CBF_SKIP_ALLNOTIFICATIONS = 0x3C0000,};
enum MACRO_CBM {CBM_INIT = 0x4,};
enum MACRO_CBN {CBN_ERRSPACE = -1,CBN_SELCHANGE = 1,CBN_DBLCLK = 2,CBN_SETFOCUS = 3,CBN_KILLFOCUS = 4,CBN_EDITCHANGE = 5,CBN_EDITUPDATE = 6,CBN_DROPDOWN = 7,CBN_CLOSEUP = 8,CBN_SELENDOK = 9,CBN_SELENDCANCEL = 10,};
enum MACRO_CBR {CBR_110 = 110,CBR_300 = 300,CBR_600 = 600,CBR_1200 = 1200,CBR_2400 = 2400,CBR_4800 = 4800,CBR_9600 = 9600,CBR_14400 = 14400,CBR_19200 = 19200,CBR_38400 = 38400,CBR_56000 = 56000,CBR_57600 = 57600,CBR_115200 = 115200,CBR_128000 = 128000,CBR_256000 = 256000,};
enum MACRO_CBS {CBS_SIMPLE = 0x1,CBS_DROPDOWN = 0x2,CBS_DROPDOWNLIST = 0x3,CBS_OWNERDRAWFIXED = 0x10,CBS_OWNERDRAWVARIABLE = 0x20,CBS_AUTOHSCROLL = 0x40,CBS_OEMCONVERT = 0x80,CBS_SORT = 0x100,CBS_HASSTRINGS = 0x200,CBS_NOINTEGRALHEIGHT = 0x400,CBS_DISABLENOSCROLL = 0x800,CBS_UPPERCASE = 0x2000,CBS_LOWERCASE = 0x4000,};
enum MACRO_CCH {CCH_MAX_PROPSTG_NAME = 31,};
enum MACRO_CCM {CCM_LAST = 0x2200,CCM_SETBKCOLOR = 0x2001,CCM_SETCOLORSCHEME = 0x2002,CCM_GETCOLORSCHEME = 0x2003,CCM_GETDROPTARGET = 0x2004,CCM_SETUNICODEFORMAT = 0x2005,CCM_GETUNICODEFORMAT = 0x2006,};
enum MACRO_CCS {CCS_TOP = 0x1,CCS_NOMOVEY = 0x2,CCS_BOTTOM = 0x3,CCS_NORESIZE = 0x4,CCS_NOPARENTALIGN = 0x8,CCS_ADJUSTABLE = 0x20,CCS_NODIVIDER = 0x40,CCS_VERT = 0x80,CCS_LEFT = 0x81,CCS_RIGHT = 0x83,CCS_NOMOVEX = 0x82,};
enum MACRO_CDM {CDM_FIRST = 1124,CDM_LAST = 1224,CDM_GETSPEC = 1124,CDM_GETFILEPATH = 1125,CDM_GETFOLDERPATH = 1126,CDM_GETFOLDERIDLIST = 1127,CDM_SETCONTROLTEXT = 1128,CDM_HIDECONTROL = 1129,CDM_SETDEFEXT = 1130,};
enum MACRO_CDN {CDN_FIRST = -601,CDN_LAST = -699,CDN_INITDONE = -601,CDN_SELCHANGE = -602,CDN_FOLDERCHANGE = -603,CDN_SHAREVIOLATION = -604,CDN_HELP = -605,CDN_FILEOK = -606,CDN_TYPECHANGE = -607,CDN_INCLUDEITEM = -608,};
enum MACRO_CDS {CDS_UPDATEREGISTRY = 0x1,CDS_TEST = 0x2,CDS_FULLSCREEN = 0x4,CDS_GLOBAL = 0x8,CDS_SET_PRIMARY = 0x10,CDS_VIDEOPARAMETERS = 0x20,CDS_RESET = 0x40000000,CDS_NORESET = 0x10000000,};
enum MACRO_CFS {CFS_DEFAULT = 0x0,CFS_RECT = 0x1,CFS_POINT = 0x2,CFS_FORCE_POSITION = 0x20,CFS_CANDIDATEPOS = 0x40,CFS_EXCLUDE = 0x80,};
enum MACRO_CID {CID_HANDLE_CREATION = 0x16,CID_HANDLE_DELETION = 0x17,};
enum MACRO_CLK {CLK_TCK = 1000,};
enum MACRO_CLR {CLR_INVALID = 0xFFFFFFFF,};
enum MACRO_CMB {CMB_MASKED = 0x2,};
enum MACRO_CMC {CMC_DATA = 59,CMC_RESPONSE = 60,CMC_STATUS = 61,CMC_ADD_EXTENSIONS = 62,CMC_ADD_ATTRIBUTES = 63,};
enum MACRO_CMD {ATAPI_ID_CMD = 0xA1,ID_CMD = 0xEC,SMART_CMD = 0xB0,};
enum MACRO_CMF {CMF_NORMAL = 0x0,CMF_DEFAULTONLY = 0x1,CMF_VERBSONLY = 0x2,CMF_EXPLORE = 0x4,CMF_NOVERBS = 0x8,CMF_CANRENAME = 0x10,CMF_NODEFAULT = 0x20,CMF_INCLUDESTATIC = 0x40,CMF_EXTENDEDVERBS = 0x100,CMF_RESERVED = 0xFFFF0000,};
enum MACRO_COM {COM_RIGHTS_EXECUTE = 1,COM_RIGHTS_SAFE_FOR_SCRIPTING = 2,};
enum MACRO_CPD {CPD_CHOICE_SIP = 1,CPD_USE_NT5_CHAIN_FLAG = -2147483648,CPD_REVOCATION_CHECK_NONE = 65536,CPD_REVOCATION_CHECK_END_CERT = 131072,CPD_REVOCATION_CHECK_CHAIN = 262144,CPD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 524288,};
enum MACRO_CPS {CPS_COMPLETE = 0x1,CPS_CONVERT = 0x2,CPS_REVERT = 0x3,CPS_CANCEL = 0x4,};
enum MACRO_CRL {CRL_V1 = 0,CRL_V2 = 1,};
enum MACRO_CTF {CTF_INSIST = 0x1,CTF_THREAD_REF = 0x2,CTF_PROCESS_REF = 0x4,CTF_COINIT = 0x8,CTF_FREELIBANDEXIT = 0x10,CTF_REF_COUNTED = 0x20,CTF_WAIT_ALLOWCOM = 0x40,};
enum MACRO_CTL {CTL_V1 = 0,};
enum MACRO_CTM {RESTORE_CTM = 4100,SAVE_CTM = 4101,};
enum MACRO_CUR {CUR_BLOB_VERSION = 2,};
enum MACRO_CWF {CWF_CREATE_ONLY = 0x1,};
enum MACRO_CWP {CWP_ALL = 0x0,CWP_SKIPINVISIBLE = 0x1,CWP_SKIPDISABLED = 0x2,CWP_SKIPTRANSPARENT = 0x4,};
enum MACRO_D3D {D3D_OK = 0,};
enum MACRO_DBC {DBC_GS_IDEAL = 0,DBC_GS_SIZEDOWN = 1,DBC_HIDE = 0,DBC_SHOW = 1,DBC_SHOWOBSCURE = 2,};
enum MACRO_DBG {DBG_EXCEPTION_HANDLED = 0x10001,DBG_CONTINUE = 0x10002,};
enum MACRO_DBL {DBL_DIG = 15,DBL_MANT_DIG = 53,DBL_MAX_10_EXP = 308,DBL_MAX_EXP = 1024,DBL_MIN_10_EXP = -307,DBL_MIN_EXP = -1021,};
enum MACRO_DCB {DCB_RESET = 0x1,DCB_ACCUMULATE = 0x2,DCB_DIRTY = 0x2,DCB_SET = 0x3,DCB_ENABLE = 0x4,DCB_DISABLE = 0x8,};
enum MACRO_DCE {DCE_C_ERROR_STRING_LEN = 256,};
enum MACRO_DCI {DCI_VERSION = 0x100,};
enum MACRO_DCR {DCR_SOLID = 0,DCR_DRIVER = 1,DCR_HALFTONE = 2,};
enum MACRO_DCX {DCX_WINDOW = 0x1,DCX_CACHE = 0x2,DCX_NORESETATTRS = 0x4,DCX_CLIPCHILDREN = 0x8,DCX_CLIPSIBLINGS = 0x10,DCX_PARENTCLIP = 0x20,DCX_EXCLUDERGN = 0x40,DCX_INTERSECTRGN = 0x80,DCX_EXCLUDEUPDATE = 0x100,DCX_INTERSECTUPDATE = 0x200,DCX_LOCKWINDOWUPDATE = 0x400,DCX_VALIDATE = 0x200000,};
enum MACRO_DDD {DDD_RAW_TARGET_PATH = 0x1,DDD_REMOVE_DEFINITION = 0x2,DDD_EXACT_MATCH_ON_REMOVE = 0x4,DDD_NO_BROADCAST_SYSTEM = 0x8,DDD_LUID_BROADCAST_DRIVE = 0x10,};
enum MACRO_DDE {DDE_FACK = 0x8000,DDE_FBUSY = 0x4000,DDE_FDEFERUPD = 0x4000,DDE_FACKREQ = 0x8000,DDE_FRELEASE = 0x2000,DDE_FREQUESTED = 0x1000,DDE_FAPPSTATUS = 0xFF,DDE_FNOTPROCESSED = 0x0,DDE_FACKRESERVED = 0xFFFF3F00,DDE_FADVRESERVED = 0xFFFF3FFF,DDE_FDATRESERVED = 0xFFFF4FFF,DDE_FPOKRESERVED = 0xFFFFDFFF,};
enum MACRO_DDF {DDF_0001 = 0x1,DDF_UPDATE = 0x2,DDF_SAME_HDC = 0x4,DDF_SAME_DRAW = 0x8,DDF_DONTDRAW = 0x10,DDF_ANIMATE = 0x20,DDF_BUFFER = 0x40,DDF_JUSTDRAWIT = 0x80,DDF_FULLSCREEN = 0x100,DDF_BACKGROUNDPAL = 0x200,DDF_NOTKEYFRAME = 0x400,DDF_HURRYUP = 0x800,DDF_HALFTONE = 0x1000,DDF_2000 = 0x2000,DDF_PREROLL = 0x10,DDF_SAME_DIB = 0x8,DDF_SAME_SIZE = 0x8,};
enum MACRO_DDI {DDI_DRIVER_VERSION_NT4 = 0x20000,DDI_DRIVER_VERSION_SP3 = 0x20003,DDI_DRIVER_VERSION_NT5 = 0x30000,DDI_DRIVER_VERSION_NT5_01 = 0x30100,DDI_DRIVER_VERSION_NT5_01_SP1 = 0x30101,};
enum MACRO_DDL {DDL_READWRITE = 0x0,DDL_READONLY = 0x1,DDL_HIDDEN = 0x2,DDL_SYSTEM = 0x4,DDL_DIRECTORY = 0x10,DDL_ARCHIVE = 0x20,DDL_POSTMSGS = 0x2000,DDL_DRIVES = 0x4000,DDL_EXCLUSIVE = 0x8000,};
enum MACRO_DFC {DFC_CAPTION = 1,DFC_MENU = 2,DFC_SCROLL = 3,DFC_BUTTON = 4,DFC_POPUPMENU = 5,};
enum MACRO_DFM {DFM_MERGECONTEXTMENU = 1,DFM_INVOKECOMMAND = 2,DFM_GETDEFSTATICID = 14,DFM_CMD_PROPERTIES = 4294967291,};
enum MACRO_DFS {DFS_FILE_SYSTEM = 0x82,OFS_FILE_SYSTEM = 0x83,};
enum MACRO_DIB {DIB_RGB_COLORS = 0,DIB_PAL_COLORS = 1,};
enum MACRO_DIF {DIF_SELECTDEVICE = 0x1,DIF_INSTALLDEVICE = 0x2,DIF_ASSIGNRESOURCES = 0x3,DIF_PROPERTIES = 0x4,DIF_REMOVE = 0x5,DIF_FIRSTTIMESETUP = 0x6,DIF_FOUNDDEVICE = 0x7,DIF_SELECTCLASSDRIVERS = 0x8,DIF_VALIDATECLASSDRIVERS = 0x9,DIF_INSTALLCLASSDRIVERS = 0xA,DIF_CALCDISKSPACE = 0xB,DIF_DESTROYPRIVATEDATA = 0xC,DIF_VALIDATEDRIVER = 0xD,DIF_DETECT = 0xF,DIF_INSTALLWIZARD = 0x10,DIF_DESTROYWIZARDDATA = 0x11,DIF_PROPERTYCHANGE = 0x12,DIF_ENABLECLASS = 0x13,DIF_DETECTVERIFY = 0x14,DIF_INSTALLDEVICEFILES = 0x15,DIF_UNREMOVE = 0x16,DIF_SELECTBESTCOMPATDRV = 0x17,DIF_ALLOW_INSTALL = 0x18,DIF_REGISTERDEVICE = 0x19,DIF_NEWDEVICEWIZARD_PRESELECT = 0x1A,DIF_NEWDEVICEWIZARD_SELECT = 0x1B,DIF_NEWDEVICEWIZARD_PREANALYZE = 0x1C,DIF_NEWDEVICEWIZARD_POSTANALYZE = 0x1D,DIF_NEWDEVICEWIZARD_FINISHINSTALL = 0x1E,DIF_UNUSED1 = 0x1F,DIF_INSTALLINTERFACES = 0x20,DIF_DETECTCANCEL = 0x21,DIF_REGISTER_COINSTALLERS = 0x22,DIF_ADDPROPERTYPAGE_ADVANCED = 0x23,DIF_ADDPROPERTYPAGE_BASIC = 0x24,DIF_RESERVED1 = 0x25,DIF_TROUBLESHOOTER = 0x26,DIF_POWERMESSAGEWAKE = 0x27,DIF_ADDREMOTEPROPERTYPAGE_ADVANCED = 0x28,DIF_UPDATEDRIVER_UI = 0x29,DIF_RESERVED2 = 0x30,DIF_MOVEDEVICE = 0xE,};
enum MACRO_DKF {DKF_DEAD = 0x1,};
enum MACRO_DLL {DLL_PROCESS_ATTACH = 1,DLL_THREAD_ATTACH = 2,DLL_THREAD_DETACH = 3,DLL_PROCESS_DETACH = 0,DLL_PROCESS_VERIFIER = 4,};
enum MACRO_DMI {DMI_MASK = 0x1,DMI_BKCOLOR = 0x2,DMI_USERECT = 0x4,};
enum MACRO_DNF {DNF_DUPDESC = 0x1,DNF_OLDDRIVER = 0x2,DNF_EXCLUDEFROMLIST = 0x4,DNF_NODRIVER = 0x8,DNF_LEGACYINF = 0x10,DNF_CLASS_DRIVER = 0x20,DNF_COMPATIBLE_DRIVER = 0x40,DNF_INET_DRIVER = 0x80,DNF_UNUSED1 = 0x100,DNF_INDEXED_DRIVER = 0x200,DNF_OLD_INET_DRIVER = 0x400,DNF_BAD_DRIVER = 0x800,DNF_DUPPROVIDER = 0x1000,DNF_INF_IS_SIGNED = 0x2000,DNF_OEM_F6_INF = 0x4000,DNF_DUPDRIVERVER = 0x8000,DNF_BASIC_DRIVER = 0x10000,};
enum MACRO_DNS {DNS_REGISTER = 0x1,DNS_UNREGISTER = 0x2,DNS_FILTERON = 0x4,DNS_FILTEROFF = 0x8,};
enum MACRO_DOF {DOF_EXECUTABLE = 0x8001,DOF_DOCUMENT = 0x8002,DOF_DIRECTORY = 0x8003,DOF_MULTIPLE = 0x8004,DOF_PROGMAN = 0x1,DOF_SHELLDATA = 0x2,};
enum MACRO_DOT {DOT_ABOVE = 0x307,};
enum MACRO_DPA {DPA_APPEND = 0x7FFFFFFF,DPA_ERR = 0xFFFFFFFF,};
enum MACRO_DPD {DPD_DELETE_UNUSED_FILES = 0x1,DPD_DELETE_SPECIFIC_VERSION = 0x2,DPD_DELETE_ALL_FILES = 0x4,};
enum MACRO_DPF {DPF_ICONID_AS_HICON = 0x1,DPF_USE_HDLGTEMPLATE = 0x2,};
enum MACRO_DPS {DPS_NOPERMISSION = 0x1,};
enum MACRO_DRD {DRD_SUCCESS = 0,DRD_ERROR = 1,};
enum MACRO_DRV {DRV_LOAD = 0x1,DRV_ENABLE = 0x2,DRV_OPEN = 0x3,DRV_CLOSE = 0x4,DRV_DISABLE = 0x5,DRV_FREE = 0x6,DRV_CONFIGURE = 0x7,DRV_QUERYCONFIGURE = 0x8,DRV_INSTALL = 0x9,DRV_REMOVE = 0xA,DRV_EXITSESSION = 0xB,DRV_POWER = 0xF,DRV_RESERVED = 0x800,DRV_USER = 0x4000,};
enum MACRO_DSA {DSA_APPEND = 0x7FFFFFFF,DSA_ERR = 0xFFFFFFFF,};
enum MACRO_DSS {DSS_NORMAL = 0x0,DSS_UNION = 0x10,DSS_DISABLED = 0x20,DSS_MONO = 0x80,DSS_HIDEPREFIX = 0x200,DSS_PREFIXONLY = 0x400,DSS_RIGHT = 0x8000,};
enum MACRO_DST {DST_COMPLEX = 0x0,DST_TEXT = 0x1,DST_PREFIXTEXT = 0x2,DST_ICON = 0x3,DST_BITMAP = 0x4,};
enum MACRO_DTM {DTM_FIRST = 0x1000,DTM_GETSYSTEMTIME = 0x1001,DTM_SETSYSTEMTIME = 0x1002,DTM_GETRANGE = 0x1003,DTM_SETRANGE = 0x1004,DTM_SETFORMATA = 0x1005,DTM_SETFORMATW = 0x1032,DTM_SETFORMAT = 0x1005,DTM_SETMCCOLOR = 0x1006,DTM_GETMCCOLOR = 0x1007,DTM_GETMONTHCAL = 0x1008,DTM_SETMCFONT = 0x1009,DTM_GETMCFONT = 0x100A,};
enum MACRO_DTN {DTN_FIRST = -760,DTN_LAST = -799,};
enum MACRO_DTR {DTR_CONTROL_DISABLE = 0x0,DTR_CONTROL_ENABLE = 0x1,DTR_CONTROL_HANDSHAKE = 0x2,};
enum MACRO_DTS {DTS_UPDOWN = 0x1,DTS_SHOWNONE = 0x2,DTS_SHORTDATEFORMAT = 0x0,DTS_LONGDATEFORMAT = 0x4,DTS_SHORTDATECENTURYFORMAT = 0xC,DTS_TIMEFORMAT = 0x9,DTS_APPCANPARSE = 0x10,DTS_RIGHTALIGN = 0x20,};
enum MACRO_DVM {DVM_USER = 0x4000,DVM_CONFIGURE_START = 0x1000,DVM_CONFIGURE_END = 0x1FFF,DVM_PALETTE = 0x1001,DVM_FORMAT = 0x1002,DVM_PALETTERGB555 = 0x1003,DVM_SRC_RECT = 0x1004,DVM_DST_RECT = 0x1005,};
enum MACRO_DWL {DWL_MSGRESULT = 0,DWL_DLGPROC = 4,DWL_USER = 8,};
enum MACRO_ECP {ECP_HW_NOIRQ = 0x100,ECP_HW_IRQ = 0x200,ECP_SW = 0x400,ECP_ANY = 0x780,};
enum MACRO_ECS {ECS_TEARDOWN = 0x1,ECS_REDRAW = 0x2,};
enum MACRO_EDS {EDS_RAWMODE = 0x2,};
enum MACRO_EFS {EFS_USE_RECOVERY_KEYS = 0x1,};
enum MACRO_EHN {EHN_RESTORED = 0,EHN_ERROR = 1,};
enum MACRO_ELF {ELF_VENDOR_SIZE = 4,ELF_VERSION = 0,ELF_CULTURE_LATIN = 0,};
enum MACRO_EMF {EMF_PP_COLOR_OPTIMIZATION = 0x1,};
enum MACRO_EMR {EMR_HEADER = 1,EMR_POLYBEZIER = 2,EMR_POLYGON = 3,EMR_POLYLINE = 4,EMR_POLYBEZIERTO = 5,EMR_POLYLINETO = 6,EMR_POLYPOLYLINE = 7,EMR_POLYPOLYGON = 8,EMR_SETWINDOWEXTEX = 9,EMR_SETWINDOWORGEX = 10,EMR_SETVIEWPORTEXTEX = 11,EMR_SETVIEWPORTORGEX = 12,EMR_SETBRUSHORGEX = 13,EMR_EOF = 14,EMR_SETPIXELV = 15,EMR_SETMAPPERFLAGS = 16,EMR_SETMAPMODE = 17,EMR_SETBKMODE = 18,EMR_SETPOLYFILLMODE = 19,EMR_SETROP2 = 20,EMR_SETSTRETCHBLTMODE = 21,EMR_SETTEXTALIGN = 22,EMR_SETCOLORADJUSTMENT = 23,EMR_SETTEXTCOLOR = 24,EMR_SETBKCOLOR = 25,EMR_OFFSETCLIPRGN = 26,EMR_MOVETOEX = 27,EMR_SETMETARGN = 28,EMR_EXCLUDECLIPRECT = 29,EMR_INTERSECTCLIPRECT = 30,EMR_SCALEVIEWPORTEXTEX = 31,EMR_SCALEWINDOWEXTEX = 32,EMR_SAVEDC = 33,EMR_RESTOREDC = 34,EMR_SETWORLDTRANSFORM = 35,EMR_MODIFYWORLDTRANSFORM = 36,EMR_SELECTOBJECT = 37,EMR_CREATEPEN = 38,EMR_CREATEBRUSHINDIRECT = 39,EMR_DELETEOBJECT = 40,EMR_ANGLEARC = 41,EMR_ELLIPSE = 42,EMR_RECTANGLE = 43,EMR_ROUNDRECT = 44,EMR_ARC = 45,EMR_CHORD = 46,EMR_PIE = 47,EMR_SELECTPALETTE = 48,EMR_CREATEPALETTE = 49,EMR_SETPALETTEENTRIES = 50,EMR_RESIZEPALETTE = 51,EMR_REALIZEPALETTE = 52,EMR_EXTFLOODFILL = 53,EMR_LINETO = 54,EMR_ARCTO = 55,EMR_POLYDRAW = 56,EMR_SETARCDIRECTION = 57,EMR_SETMITERLIMIT = 58,EMR_BEGINPATH = 59,EMR_ENDPATH = 60,EMR_CLOSEFIGURE = 61,EMR_FILLPATH = 62,EMR_STROKEANDFILLPATH = 63,EMR_STROKEPATH = 64,EMR_FLATTENPATH = 65,EMR_WIDENPATH = 66,EMR_SELECTCLIPPATH = 67,EMR_ABORTPATH = 68,EMR_GDICOMMENT = 70,EMR_FILLRGN = 71,EMR_FRAMERGN = 72,EMR_INVERTRGN = 73,EMR_PAINTRGN = 74,EMR_EXTSELECTCLIPRGN = 75,EMR_BITBLT = 76,EMR_STRETCHBLT = 77,EMR_MASKBLT = 78,EMR_PLGBLT = 79,EMR_SETDIBITSTODEVICE = 80,EMR_STRETCHDIBITS = 81,EMR_EXTCREATEFONTINDIRECTW = 82,EMR_EXTTEXTOUTA = 83,EMR_EXTTEXTOUTW = 84,EMR_POLYBEZIER16 = 85,EMR_POLYGON16 = 86,EMR_POLYLINE16 = 87,EMR_POLYBEZIERTO16 = 88,EMR_POLYLINETO16 = 89,EMR_POLYPOLYLINE16 = 90,EMR_POLYPOLYGON16 = 91,EMR_POLYDRAW16 = 92,EMR_CREATEMONOBRUSH = 93,EMR_CREATEDIBPATTERNBRUSHPT = 94,EMR_EXTCREATEPEN = 95,EMR_POLYTEXTOUTA = 96,EMR_POLYTEXTOUTW = 97,EMR_SETICMMODE = 98,EMR_CREATECOLORSPACE = 99,EMR_SETCOLORSPACE = 100,EMR_DELETECOLORSPACE = 101,EMR_GLSRECORD = 102,EMR_GLSBOUNDEDRECORD = 103,EMR_PIXELFORMAT = 104,EMR_RESERVED_105 = 105,EMR_RESERVED_106 = 106,EMR_RESERVED_107 = 107,EMR_RESERVED_108 = 108,EMR_RESERVED_109 = 109,EMR_RESERVED_110 = 110,EMR_COLORCORRECTPALETTE = 111,EMR_SETICMPROFILEA = 112,EMR_SETICMPROFILEW = 113,EMR_ALPHABLEND = 114,EMR_SETLAYOUT = 115,EMR_TRANSPARENTBLT = 116,EMR_RESERVED_117 = 117,EMR_GRADIENTFILL = 118,EMR_RESERVED_119 = 119,EMR_RESERVED_120 = 120,EMR_COLORMATCHTOTARGETW = 121,EMR_CREATECOLORSPACEW = 122,EMR_MIN = 1,EMR_MAX = 122,};
enum MACRO_END {END_OF_NT_EVALUATION_PERIOD = 0x98,};
enum MACRO_ENG {ENG_FNT_CACHE_READ_FAULT = 0x1,ENG_FNT_CACHE_WRITE_FAULT = 0x2,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EPF {EPF_PUSH_TYPE_DLGPROC = 0x1,EPF_INCL_SETUP_TITLE = 0x2,EPF_NO_DOT_DOT_DOT = 0x4,EPF_ICONID_AS_HICON = 0x8,EPF_OVERLAY_WARNING_ICON = 0x10,EPF_OVERLAY_STOP_ICON = 0x20,EPF_OVERLAY_NO_ICON = 0x40,EPF_USE_HDLGTEMPLATE = 0x80,};
enum MACRO_EPP {EPP_HW = 0x20,EPP_SW = 0x40,EPP_ANY = 0x60,};
enum MACRO_EPS {EPS_SIGNATURE = 0x46535045,};
enum MACRO_ERR {ERR_CPSUI_GETLASTERROR = -1,ERR_CPSUI_ALLOCMEM_FAILED = -2,ERR_CPSUI_INVALID_PDATA = -3,ERR_CPSUI_INVALID_LPARAM = -4,ERR_CPSUI_NULL_HINST = -5,ERR_CPSUI_NULL_CALLERNAME = -6,ERR_CPSUI_NULL_OPTITEMNAME = -7,ERR_CPSUI_NO_PROPSHEETPAGE = -8,ERR_CPSUI_TOO_MANY_PROPSHEETPAGES = -9,ERR_CPSUI_CREATEPROPPAGE_FAILED = -10,ERR_CPSUI_MORE_THAN_ONE_TVPAGE = -11,ERR_CPSUI_MORE_THAN_ONE_STDPAGE = -12,ERR_CPSUI_INVALID_PDLGPAGE = -13,ERR_CPSUI_INVALID_DLGPAGE_CBSIZE = -14,ERR_CPSUI_TOO_MANY_DLGPAGES = -15,ERR_CPSUI_INVALID_DLGPAGEIDX = -16,ERR_CPSUI_SUBITEM_DIFF_DLGPAGEIDX = -17,ERR_CPSUI_NULL_POPTITEM = -18,ERR_CPSUI_INVALID_OPTITEM_CBSIZE = -19,ERR_CPSUI_INVALID_OPTTYPE_CBSIZE = -20,ERR_CPSUI_INVALID_OPTTYPE_COUNT = -21,ERR_CPSUI_NULL_POPTPARAM = -22,ERR_CPSUI_INVALID_OPTPARAM_CBSIZE = -23,ERR_CPSUI_INVALID_EDITBOX_PSEL = -24,ERR_CPSUI_INVALID_EDITBOX_BUF_SIZE = -25,ERR_CPSUI_INVALID_ECB_CBSIZE = -26,ERR_CPSUI_NULL_ECB_PTITLE = -27,ERR_CPSUI_NULL_ECB_PCHECKEDNAME = -28,ERR_CPSUI_INVALID_DMPUBID = -29,ERR_CPSUI_INVALID_DMPUB_TVOT = -30,ERR_CPSUI_CREATE_TRACKBAR_FAILED = -31,ERR_CPSUI_CREATE_UDARROW_FAILED = -32,ERR_CPSUI_CREATE_IMAGELIST_FAILED = -33,ERR_CPSUI_INVALID_TVOT_TYPE = -34,ERR_CPSUI_INVALID_LBCB_TYPE = -35,ERR_CPSUI_SUBITEM_DIFF_OPTIF_HIDE = -36,ERR_CPSUI_INVALID_PUSHBUTTON_TYPE = -38,ERR_CPSUI_INVALID_EXTPUSH_CBSIZE = -39,ERR_CPSUI_NULL_EXTPUSH_DLGPROC = -40,ERR_CPSUI_NO_EXTPUSH_DLGTEMPLATEID = -41,ERR_CPSUI_NULL_EXTPUSH_CALLBACK = -42,ERR_CPSUI_DMCOPIES_USE_EXTPUSH = -43,ERR_CPSUI_ZERO_OPTITEM = -44,ERR_CPSUI_FUNCTION_NOT_IMPLEMENTED = -9999,ERR_CPSUI_INTERNAL_ERROR = -10000,};
enum MACRO_ESB {ESB_ENABLE_BOTH = 0x0,ESB_DISABLE_BOTH = 0x3,ESB_DISABLE_LEFT = 0x1,ESB_DISABLE_RIGHT = 0x2,ESB_DISABLE_UP = 0x1,ESB_DISABLE_DOWN = 0x2,ESB_DISABLE_LTUP = 0x1,ESB_DISABLE_RTDN = 0x2,};
enum MACRO_ETO {ETO_OPAQUE = 0x2,ETO_CLIPPED = 0x4,ETO_GLYPH_INDEX = 0x10,ETO_RTLREADING = 0x80,ETO_NUMERICSLOCAL = 0x400,ETO_NUMERICSLATIN = 0x800,ETO_IGNORELANGUAGE = 0x1000,ETO_PDY = 0x2000,};
enum MACRO_EWX {EWX_SHUTDOWN = 0x1,EWX_REBOOT = 0x2,EWX_FORCE = 0x4,EWX_POWEROFF = 0x8,EWX_FORCEIFHUNG = 0x10,};
enum MACRO_EXP {EXP_DARWIN_ID_SIG = 0xA0000006,EXP_LOGO3_ID_SIG = 0xA0000007,EXP_SPECIAL_FOLDER_SIG = 0xA0000005,EXP_SZ_LINK_SIG = 0xA0000001,EXP_SZ_ICON_SIG = 0xA0000007,};
enum MACRO_EXT {EXT_DEVICE_CAPS = 4099,};
enum MACRO_FCS {FCS_READ = 0x1,FCS_FORCEWRITE = 0x2,FCS_WRITE = 0x3,FCS_FLAG_DRAGDROP = 0x2,};
enum MACRO_FCT {FCT_MERGE = 0x1,FCT_CONFIGABLE = 0x2,FCT_ADDTOEND = 0x4,};
enum MACRO_FCW {FCW_STATUS = 0x1,FCW_TOOLBAR = 0x2,FCW_TREE = 0x3,FCW_INTERNETBAR = 0x6,FCW_PROGRESS = 0x8,};
enum MACRO_FDM {FDM_TYPE_BM_SIDE_CONST = 0x1,FDM_TYPE_MAXEXT_EQUAL_BM_SIDE = 0x2,FDM_TYPE_CHAR_INC_EQUAL_BM_BASE = 0x4,FDM_TYPE_ZERO_BEARINGS = 0x8,FDM_TYPE_CONST_BEARINGS = 0x10,};
enum MACRO_FKF {FKF_FILTERKEYSON = 0x1,FKF_AVAILABLE = 0x2,FKF_HOTKEYACTIVE = 0x4,FKF_CONFIRMHOTKEY = 0x8,FKF_HOTKEYSOUND = 0x10,FKF_INDICATOR = 0x20,FKF_CLICKON = 0x40,};
enum MACRO_FLG {FLG_ADDREG_DELREG_BIT = 0x8000,FLG_ADDREG_BINVALUETYPE = 0x1,FLG_ADDREG_NOCLOBBER = 0x2,FLG_ADDREG_DELVAL = 0x4,FLG_ADDREG_APPEND = 0x8,FLG_ADDREG_KEYONLY = 0x10,FLG_ADDREG_OVERWRITEONLY = 0x20,FLG_ADDREG_64BITKEY = 0x1000,FLG_ADDREG_KEYONLY_COMMON = 0x2000,FLG_ADDREG_32BITKEY = 0x4000,FLG_ADDREG_TYPE_MASK = 0xFFFF0001,FLG_ADDREG_TYPE_SZ = 0x0,FLG_ADDREG_TYPE_MULTI_SZ = 0x10000,FLG_ADDREG_TYPE_EXPAND_SZ = 0x20000,FLG_ADDREG_TYPE_BINARY = 0x1,FLG_ADDREG_TYPE_DWORD = 0x10001,FLG_ADDREG_TYPE_NONE = 0x20001,FLG_DELREG_VALUE = 0x0,FLG_DELREG_TYPE_MASK = 0xFFFF0001,FLG_DELREG_TYPE_SZ = 0x0,FLG_DELREG_TYPE_MULTI_SZ = 0x10000,FLG_DELREG_TYPE_EXPAND_SZ = 0x20000,FLG_DELREG_TYPE_BINARY = 0x1,FLG_DELREG_TYPE_DWORD = 0x10001,FLG_DELREG_TYPE_NONE = 0x20001,FLG_DELREG_64BITKEY = 0x1000,FLG_DELREG_KEYONLY_COMMON = 0x2000,FLG_DELREG_32BITKEY = 0x4000,FLG_DELREG_OPERATION_MASK = 0xFE,FLG_DELREG_MULTI_SZ_DELSTRING = 0x18002,FLG_BITREG_CLEARBITS = 0x0,FLG_BITREG_SETBITS = 0x1,FLG_BITREG_64BITKEY = 0x1000,FLG_BITREG_32BITKEY = 0x4000,FLG_INI2REG_64BITKEY = 0x1000,FLG_INI2REG_32BITKEY = 0x4000,FLG_REGSVR_DLLREGISTER = 0x1,FLG_REGSVR_DLLINSTALL = 0x2,FLG_PROFITEM_CURRENTUSER = 0x1,FLG_PROFITEM_DELETE = 0x2,FLG_PROFITEM_GROUP = 0x4,FLG_PROFITEM_CSIDL = 0x8,};
enum MACRO_FLI {FLI_MASK = 0x103B,};
enum MACRO_FLT {FLT_DIG = 6,FLT_GUARD = 0,FLT_MANT_DIG = 24,FLT_MAX_10_EXP = 38,FLT_MAX_EXP = 128,FLT_MIN_10_EXP = -37,FLT_MIN_EXP = -125,FLT_NORMALIZE = 0,FLT_RADIX = 2,FLT_ROUNDS = 1,};
enum MACRO_FOF {FOF_MULTIDESTFILES = 0x1,FOF_CONFIRMMOUSE = 0x2,FOF_SILENT = 0x4,FOF_RENAMEONCOLLISION = 0x8,FOF_NOCONFIRMATION = 0x10,FOF_WANTMAPPINGHANDLE = 0x20,FOF_ALLOWUNDO = 0x40,FOF_FILESONLY = 0x80,FOF_SIMPLEPROGRESS = 0x100,FOF_NOCONFIRMMKDIR = 0x200,FOF_NOERRORUI = 0x400,FOF_NOCOPYSECURITYATTRIBS = 0x800,FOF_NORECURSION = 0x1000,FOF_NORECURSEREPARSE = 0x8000,};
enum MACRO_FPE {FPE_INVALID = 129,FPE_DENORMAL = 130,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_UNEMULATED = 135,FPE_SQRTNEG = 136,FPE_STACKOVERFLOW = 138,FPE_STACKUNDERFLOW = 139,FPE_EXPLICITGEN = 140,};
enum MACRO_FSB {FSB_FLAT_MODE = 2,FSB_ENCARTA_MODE = 1,FSB_REGULAR_MODE = 0,};
enum MACRO_GAA {GAA_FLAG_SKIP_UNICAST = 0x1,GAA_FLAG_SKIP_ANYCAST = 0x2,GAA_FLAG_SKIP_MULTICAST = 0x4,GAA_FLAG_SKIP_DNS_SERVER = 0x8,GAA_FLAG_INCLUDE_PREFIX = 0x10,GAA_FLAG_SKIP_FRIENDLY_NAME = 0x20,};
enum MACRO_GCL {GCL_MENUNAME = -8,GCL_HBRBACKGROUND = -10,GCL_HCURSOR = -12,GCL_HICON = -14,GCL_HMODULE = -16,GCL_CBWNDEXTRA = -18,GCL_CBCLSEXTRA = -20,GCL_WNDPROC = -24,GCL_STYLE = -26,};
enum MACRO_GCP {GCP_DBCS = 0x1,GCP_REORDER = 0x2,GCP_USEKERNING = 0x8,GCP_GLYPHSHAPE = 0x10,GCP_LIGATE = 0x20,GCP_DIACRITIC = 0x100,GCP_KASHIDA = 0x400,GCP_ERROR = 0x8000,};
enum MACRO_GCS {GCS_COMPREADSTR = 0x1,GCS_COMPREADATTR = 0x2,GCS_COMPREADCLAUSE = 0x4,GCS_COMPSTR = 0x8,GCS_COMPATTR = 0x10,GCS_COMPCLAUSE = 0x20,GCS_CURSORPOS = 0x80,GCS_DELTASTART = 0x100,GCS_RESULTREADSTR = 0x200,GCS_RESULTREADCLAUSE = 0x400,GCS_RESULTSTR = 0x800,GCS_RESULTCLAUSE = 0x1000,};
enum MACRO_GCT {GCT_INVALID = 0x0,GCT_LFNCHAR = 0x1,GCT_SHORTCHAR = 0x2,GCT_WILD = 0x4,GCT_SEPARATOR = 0x8,};
enum MACRO_GCW {GCW_ATOM = -32,};
enum MACRO_GDI {GDI_ERROR = 0xFFFFFFFF,HGDI_ERROR = 0xFFFFFFFF,};
enum MACRO_GDT {GDT_ERROR = -1,GDT_VALID = 0,GDT_NONE = 1,};
enum MACRO_GET {GET_TAPE_MEDIA_INFORMATION = 0,GET_TAPE_DRIVE_INFORMATION = 1,};
enum MACRO_GGI {GGI_MARK_NONEXISTING_GLYPHS = 0x1,};
enum MACRO_GGL {GGL_LEVEL = 0x1,GGL_INDEX = 0x2,GGL_STRING = 0x3,GGL_PRIVATE = 0x4,};
enum MACRO_GGO {GGO_METRICS = 0,GGO_BITMAP = 1,GGO_NATIVE = 2,GGO_BEZIER = 3,GGO_GRAY2_BITMAP = 4,GGO_GRAY4_BITMAP = 5,GGO_GRAY8_BITMAP = 6,GGO_GLYPH_INDEX = 128,GGO_UNHINTED = 256,};
enum MACRO_GIL {GIL_OPENICON = 0x1,GIL_FORSHELL = 0x2,GIL_ASYNC = 0x20,GIL_DEFAULTICON = 0x40,GIL_FORSHORTCUT = 0x80,GIL_SIMULATEDOC = 0x1,GIL_PERINSTANCE = 0x2,GIL_PERCLASS = 0x4,GIL_NOTFILENAME = 0x8,GIL_DONTCACHE = 0x10,};
enum MACRO_GMR {GMR_VISIBLE = 0,GMR_DAYSTATE = 1,};
enum MACRO_GPD {GPD_OEMCUSTOMDATA = 1,};
enum MACRO_GPT {GPT_ATTRIBUTE_PLATFORM_REQUIRED = 0x1,GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER = 0x8000000000000000,GPT_BASIC_DATA_ATTRIBUTE_HIDDEN = 0x4000000000000000,GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY = 0x1000000000000000,};
enum MACRO_GUI {GUI_CARETBLINKING = 0x1,GUI_INMOVESIZE = 0x2,GUI_INMENUMODE = 0x4,GUI_SYSTEMMENUMODE = 0x8,GUI_POPUPMENUMODE = 0x10,GUI_16BITTASK = 0x20,};
enum MACRO_GWL {GWL_WNDPROC = -4,GWL_HINSTANCE = -6,GWL_HWNDPARENT = -8,GWL_STYLE = -16,GWL_EXSTYLE = -20,GWL_USERDATA = -21,GWL_ID = -12,};
enum MACRO_HAL {HAL_MEMORY_ALLOCATION = 0xAC,};
enum MACRO_HCF {HCF_HIGHCONTRASTON = 0x1,HCF_AVAILABLE = 0x2,HCF_HOTKEYACTIVE = 0x4,HCF_CONFIRMHOTKEY = 0x8,HCF_HOTKEYSOUND = 0x10,HCF_INDICATOR = 0x20,HCF_HOTKEYAVAILABLE = 0x40,};
enum MACRO_HDF {HDF_LEFT = 0x0,HDF_RIGHT = 0x1,HDF_CENTER = 0x2,HDF_JUSTIFYMASK = 0x3,HDF_RTLREADING = 0x4,HDF_OWNERDRAW = 0x8000,HDF_STRING = 0x4000,HDF_BITMAP = 0x2000,HDF_BITMAP_ON_RIGHT = 0x1000,HDF_IMAGE = 0x800,HDF_SORTUP = 0x400,HDF_SORTDOWN = 0x200,};
enum MACRO_HDI {HDI_WIDTH = 0x1,HDI_HEIGHT = 0x1,HDI_TEXT = 0x2,HDI_FORMAT = 0x4,HDI_LPARAM = 0x8,HDI_BITMAP = 0x10,HDI_IMAGE = 0x20,HDI_DI_SETITEM = 0x40,HDI_ORDER = 0x80,HDI_FILTER = 0x100,};
enum MACRO_HDM {HDM_GETITEMCOUNT = 4608,HDM_INSERTITEMA = 4609,HDM_INSERTITEMW = 4618,HDM_INSERTITEM = 4609,HDM_DELETEITEM = 4610,HDM_GETITEMA = 4611,HDM_GETITEMW = 4619,HDM_GETITEM = 4611,HDM_SETITEMA = 4612,HDM_SETITEMW = 4620,HDM_SETITEM = 4612,HDM_LAYOUT = 4613,};
enum MACRO_HDN {HDN_FIRST = -300,HDN_LAST = -399,};
enum MACRO_HDS {HDS_HORZ = 0x0,HDS_BUTTONS = 0x2,HDS_HOTTRACK = 0x4,HDS_HIDDEN = 0x8,HDS_DRAGDROP = 0x40,HDS_FULLDRAG = 0x80,HDS_FILTERBAR = 0x100,HDS_FLAT = 0x200,};
enum MACRO_HHN {HHN_FIRST = -860,HHN_LAST = -879,HHN_NAVCOMPLETE = -860,HHN_TRACK = -861,HHN_WINDOW_CREATE = -862,};
enum MACRO_HHT {HHT_NOWHERE = 0x1,HHT_ONHEADER = 0x2,HHT_ONDIVIDER = 0x4,HHT_ONDIVOPEN = 0x8,HHT_ONFILTER = 0x10,HHT_ONFILTERBUTTON = 0x20,HHT_ABOVE = 0x100,HHT_BELOW = 0x200,HHT_TORIGHT = 0x400,HHT_TOLEFT = 0x800,};
enum MACRO_HID {HID_USAGE_PAGE_UNDEFINED = 0x0,HID_USAGE_PAGE_GENERIC = 0x1,HID_USAGE_PAGE_SIMULATION = 0x2,HID_USAGE_PAGE_VR = 0x3,HID_USAGE_PAGE_SPORT = 0x4,HID_USAGE_PAGE_GAME = 0x5,HID_USAGE_PAGE_KEYBOARD = 0x7,HID_USAGE_PAGE_LED = 0x8,HID_USAGE_PAGE_BUTTON = 0x9,HID_USAGE_PAGE_ORDINAL = 0xA,HID_USAGE_PAGE_TELEPHONY = 0xB,HID_USAGE_PAGE_CONSUMER = 0xC,HID_USAGE_PAGE_DIGITIZER = 0xD,HID_USAGE_PAGE_UNICODE = 0x10,HID_USAGE_PAGE_ALPHANUMERIC = 0x14,HID_USAGE_GENERIC_POINTER = 0x1,HID_USAGE_GENERIC_MOUSE = 0x2,HID_USAGE_GENERIC_JOYSTICK = 0x4,HID_USAGE_GENERIC_GAMEPAD = 0x5,HID_USAGE_GENERIC_KEYBOARD = 0x6,HID_USAGE_GENERIC_KEYPAD = 0x7,HID_USAGE_GENERIC_SYSTEM_CTL = 0x80,HID_USAGE_GENERIC_X = 0x30,HID_USAGE_GENERIC_Y = 0x31,HID_USAGE_GENERIC_Z = 0x32,HID_USAGE_GENERIC_RX = 0x33,HID_USAGE_GENERIC_RY = 0x34,HID_USAGE_GENERIC_RZ = 0x35,HID_USAGE_GENERIC_SLIDER = 0x36,HID_USAGE_GENERIC_DIAL = 0x37,HID_USAGE_GENERIC_WHEEL = 0x38,HID_USAGE_GENERIC_HATSWITCH = 0x39,HID_USAGE_GENERIC_COUNTED_BUFFER = 0x3A,HID_USAGE_GENERIC_BYTE_COUNT = 0x3B,HID_USAGE_GENERIC_MOTION_WAKEUP = 0x3C,HID_USAGE_GENERIC_VX = 0x40,HID_USAGE_GENERIC_VY = 0x41,HID_USAGE_GENERIC_VZ = 0x42,HID_USAGE_GENERIC_VBRX = 0x43,HID_USAGE_GENERIC_VBRY = 0x44,HID_USAGE_GENERIC_VBRZ = 0x45,HID_USAGE_GENERIC_VNO = 0x46,HID_USAGE_GENERIC_SYSCTL_POWER = 0x81,HID_USAGE_GENERIC_SYSCTL_SLEEP = 0x82,HID_USAGE_GENERIC_SYSCTL_WAKE = 0x83,HID_USAGE_GENERIC_SYSCTL_CONTEXT_MENU = 0x84,HID_USAGE_GENERIC_SYSCTL_MAIN_MENU = 0x85,HID_USAGE_GENERIC_SYSCTL_APP_MENU = 0x86,HID_USAGE_GENERIC_SYSCTL_HELP_MENU = 0x87,HID_USAGE_GENERIC_SYSCTL_MENU_EXIT = 0x88,HID_USAGE_GENERIC_SYSCTL_MENU_SELECT = 0x89,HID_USAGE_GENERIC_SYSCTL_MENU_RIGHT = 0x8A,HID_USAGE_GENERIC_SYSCTL_MENU_LEFT = 0x8B,HID_USAGE_GENERIC_SYSCTL_MENU_UP = 0x8C,HID_USAGE_GENERIC_SYSCTL_MENU_DOWN = 0x8D,HID_USAGE_SIMULATION_RUDDER = 0xBA,HID_USAGE_SIMULATION_THROTTLE = 0xBB,HID_USAGE_KEYBOARD_NOEVENT = 0x0,HID_USAGE_KEYBOARD_ROLLOVER = 0x1,HID_USAGE_KEYBOARD_POSTFAIL = 0x2,HID_USAGE_KEYBOARD_UNDEFINED = 0x3,HID_USAGE_KEYBOARD_aA = 0x4,HID_USAGE_KEYBOARD_zZ = 0x1D,HID_USAGE_KEYBOARD_ONE = 0x1E,HID_USAGE_KEYBOARD_ZERO = 0x27,HID_USAGE_KEYBOARD_LCTRL = 0xE0,HID_USAGE_KEYBOARD_LSHFT = 0xE1,HID_USAGE_KEYBOARD_LALT = 0xE2,HID_USAGE_KEYBOARD_LGUI = 0xE3,HID_USAGE_KEYBOARD_RCTRL = 0xE4,HID_USAGE_KEYBOARD_RSHFT = 0xE5,HID_USAGE_KEYBOARD_RALT = 0xE6,HID_USAGE_KEYBOARD_RGUI = 0xE7,HID_USAGE_KEYBOARD_SCROLL_LOCK = 0x47,HID_USAGE_KEYBOARD_NUM_LOCK = 0x53,HID_USAGE_KEYBOARD_CAPS_LOCK = 0x39,HID_USAGE_KEYBOARD_F1 = 0x3A,HID_USAGE_KEYBOARD_F12 = 0x45,HID_USAGE_KEYBOARD_RETURN = 0x28,HID_USAGE_KEYBOARD_ESCAPE = 0x29,HID_USAGE_KEYBOARD_DELETE = 0x2A,HID_USAGE_KEYBOARD_PRINT_SCREEN = 0x46,HID_USAGE_LED_NUM_LOCK = 0x1,HID_USAGE_LED_CAPS_LOCK = 0x2,HID_USAGE_LED_SCROLL_LOCK = 0x3,HID_USAGE_LED_COMPOSE = 0x4,HID_USAGE_LED_KANA = 0x5,HID_USAGE_LED_POWER = 0x6,HID_USAGE_LED_SHIFT = 0x7,HID_USAGE_LED_DO_NOT_DISTURB = 0x8,HID_USAGE_LED_MUTE = 0x9,HID_USAGE_LED_TONE_ENABLE = 0xA,HID_USAGE_LED_HIGH_CUT_FILTER = 0xB,HID_USAGE_LED_LOW_CUT_FILTER = 0xC,HID_USAGE_LED_EQUALIZER_ENABLE = 0xD,HID_USAGE_LED_SOUND_FIELD_ON = 0xE,HID_USAGE_LED_SURROUND_FIELD_ON = 0xF,HID_USAGE_LED_REPEAT = 0x10,HID_USAGE_LED_STEREO = 0x11,HID_USAGE_LED_SAMPLING_RATE_DETECT = 0x12,HID_USAGE_LED_SPINNING = 0x13,HID_USAGE_LED_CAV = 0x14,HID_USAGE_LED_CLV = 0x15,HID_USAGE_LED_RECORDING_FORMAT_DET = 0x16,HID_USAGE_LED_OFF_HOOK = 0x17,HID_USAGE_LED_RING = 0x18,HID_USAGE_LED_MESSAGE_WAITING = 0x19,HID_USAGE_LED_DATA_MODE = 0x1A,HID_USAGE_LED_BATTERY_OPERATION = 0x1B,HID_USAGE_LED_BATTERY_OK = 0x1C,HID_USAGE_LED_BATTERY_LOW = 0x1D,HID_USAGE_LED_SPEAKER = 0x1E,HID_USAGE_LED_HEAD_SET = 0x1F,HID_USAGE_LED_HOLD = 0x20,HID_USAGE_LED_MICROPHONE = 0x21,HID_USAGE_LED_COVERAGE = 0x22,HID_USAGE_LED_NIGHT_MODE = 0x23,HID_USAGE_LED_SEND_CALLS = 0x24,HID_USAGE_LED_CALL_PICKUP = 0x25,HID_USAGE_LED_CONFERENCE = 0x26,HID_USAGE_LED_STAND_BY = 0x27,HID_USAGE_LED_CAMERA_ON = 0x28,HID_USAGE_LED_CAMERA_OFF = 0x29,HID_USAGE_LED_ON_LINE = 0x2A,HID_USAGE_LED_OFF_LINE = 0x2B,HID_USAGE_LED_BUSY = 0x2C,HID_USAGE_LED_READY = 0x2D,HID_USAGE_LED_PAPER_OUT = 0x2E,HID_USAGE_LED_PAPER_JAM = 0x2F,HID_USAGE_LED_REMOTE = 0x30,HID_USAGE_LED_FORWARD = 0x31,HID_USAGE_LED_REVERSE = 0x32,HID_USAGE_LED_STOP = 0x33,HID_USAGE_LED_REWIND = 0x34,HID_USAGE_LED_FAST_FORWARD = 0x35,HID_USAGE_LED_PLAY = 0x36,HID_USAGE_LED_PAUSE = 0x37,HID_USAGE_LED_RECORD = 0x38,HID_USAGE_LED_ERROR = 0x39,HID_USAGE_LED_SELECTED_INDICATOR = 0x3A,HID_USAGE_LED_IN_USE_INDICATOR = 0x3B,HID_USAGE_LED_MULTI_MODE_INDICATOR = 0x3C,HID_USAGE_LED_INDICATOR_ON = 0x3D,HID_USAGE_LED_INDICATOR_FLASH = 0x3E,HID_USAGE_LED_INDICATOR_SLOW_BLINK = 0x3F,HID_USAGE_LED_INDICATOR_FAST_BLINK = 0x40,HID_USAGE_LED_INDICATOR_OFF = 0x41,HID_USAGE_LED_FLASH_ON_TIME = 0x42,HID_USAGE_LED_SLOW_BLINK_ON_TIME = 0x43,HID_USAGE_LED_SLOW_BLINK_OFF_TIME = 0x44,HID_USAGE_LED_FAST_BLINK_ON_TIME = 0x45,HID_USAGE_LED_FAST_BLINK_OFF_TIME = 0x46,HID_USAGE_LED_INDICATOR_COLOR = 0x47,HID_USAGE_LED_RED = 0x48,HID_USAGE_LED_GREEN = 0x49,HID_USAGE_LED_AMBER = 0x4A,HID_USAGE_LED_GENERIC_INDICATOR = 0x4B,HID_USAGE_TELEPHONY_PHONE = 0x1,HID_USAGE_TELEPHONY_ANSWERING_MACHINE = 0x2,HID_USAGE_TELEPHONY_MESSAGE_CONTROLS = 0x3,HID_USAGE_TELEPHONY_HANDSET = 0x4,HID_USAGE_TELEPHONY_HEADSET = 0x5,HID_USAGE_TELEPHONY_KEYPAD = 0x6,HID_USAGE_TELEPHONY_PROGRAMMABLE_BUTTON = 0x7,HID_USAGE_CONSUMERCTRL = 0x1,HID_USAGE_DIGITIZER_PEN = 0x2,HID_USAGE_DIGITIZER_IN_RANGE = 0x32,HID_USAGE_DIGITIZER_TIP_SWITCH = 0x42,HID_USAGE_DIGITIZER_BARREL_SWITCH = 0x44,};
enum MACRO_HKL {HKL_PREV = 0,HKL_NEXT = 1,};
enum MACRO_HKM {HKM_SETHOTKEY = 1025,HKM_GETHOTKEY = 1026,HKM_SETRULES = 1027,};
enum MACRO_IAS {IAS_ATTRIB_NO_CLASS = 0x10,IAS_ATTRIB_NO_ATTRIB = 0x0,IAS_ATTRIB_INT = 0x1,IAS_ATTRIB_OCTETSEQ = 0x2,IAS_ATTRIB_STR = 0x3,IAS_MAX_USER_STRING = 0x100,IAS_MAX_OCTET_STRING = 0x400,IAS_MAX_CLASSNAME = 0x40,IAS_MAX_ATTRIBNAME = 0x100,};
enum MACRO_ICC {ICC_LISTVIEW_CLASSES = 0x1,ICC_TREEVIEW_CLASSES = 0x2,ICC_BAR_CLASSES = 0x4,ICC_TAB_CLASSES = 0x8,ICC_UPDOWN_CLASS = 0x10,ICC_PROGRESS_CLASS = 0x20,ICC_HOTKEY_CLASS = 0x40,ICC_ANIMATE_CLASS = 0x80,ICC_WIN95_CLASSES = 0xFF,ICC_DATE_CLASSES = 0x100,ICC_USEREX_CLASSES = 0x200,ICC_COOL_CLASSES = 0x400,ICC_INTERNET_CLASSES = 0x800,ICC_PAGESCROLLER_CLASS = 0x1000,ICC_NATIVEFNTCTL_CLASS = 0x2000,ICC_STANDARD_CLASSES = 0x4000,ICC_LINK_CLASS = 0x8000,};
enum MACRO_ICM {ICM_ADDPROFILE = 1,ICM_DELETEPROFILE = 2,ICM_QUERYPROFILE = 3,ICM_SETDEFAULTPROFILE = 4,ICM_REGISTERICMATCHER = 5,ICM_UNREGISTERICMATCHER = 6,ICM_QUERYMATCH = 7,};
enum MACRO_IDB {IDB_STD_SMALL_COLOR = 0,IDB_STD_LARGE_COLOR = 1,IDB_VIEW_SMALL_COLOR = 4,IDB_VIEW_LARGE_COLOR = 5,IDB_HIST_SMALL_COLOR = 8,IDB_HIST_LARGE_COLOR = 9,};
enum MACRO_IDC {IDC_ARROW = 32512,IDC_IBEAM = 32513,IDC_WAIT = 32514,IDC_CROSS = 32515,IDC_UPARROW = 32516,IDC_SIZE = 32640,IDC_ICON = 32641,IDC_SIZENWSE = 32642,IDC_SIZENESW = 32643,IDC_SIZEWE = 32644,IDC_SIZENS = 32645,IDC_SIZEALL = 32646,IDC_NO = 32648,IDC_HAND = 32649,IDC_APPSTARTING = 32650,IDC_HELP = 32651,};
enum MACRO_IDD {IDD_DYNAWIZ_FIRSTPAGE = 10000,IDD_DYNAWIZ_SELECT_PREVPAGE = 10001,IDD_DYNAWIZ_SELECT_NEXTPAGE = 10002,IDD_DYNAWIZ_ANALYZE_PREVPAGE = 10003,IDD_DYNAWIZ_ANALYZE_NEXTPAGE = 10004,IDD_DYNAWIZ_SELECTDEV_PAGE = 10009,IDD_DYNAWIZ_ANALYZEDEV_PAGE = 10010,IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE = 10011,IDD_DYNAWIZ_SELECTCLASS_PAGE = 10012,IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE = 10006,IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE = 10007,IDD_DYNAWIZ_INSTALLDETECTED_NODEVS = 10008,};
enum MACRO_IDF {IDF_NOBROWSE = 0x1,IDF_NOSKIP = 0x2,IDF_NODETAILS = 0x4,IDF_NOCOMPRESSED = 0x8,IDF_CHECKFIRST = 0x100,IDF_NOBEEP = 0x200,IDF_NOFOREGROUND = 0x400,IDF_WARNIFSKIP = 0x800,IDF_NOREMOVABLEMEDIAPROMPT = 0x1000,IDF_USEDISKNAMEASPROMPT = 0x2000,IDF_OEMDISK = 0x80000000,};
enum MACRO_IDH {IDH_NO_HELP = 28440,IDH_MISSING_CONTEXT = 28441,IDH_GENERIC_HELP_BUTTON = 28442,IDH_OK = 28443,IDH_CANCEL = 28444,IDH_HELP = 28445,};
enum MACRO_IDI {IDI_APPLICATION = 32512,IDI_HAND = 32513,IDI_QUESTION = 32514,IDI_EXCLAMATION = 32515,IDI_ASTERISK = 32516,IDI_WINLOGO = 32517,IDI_WARNING = 32515,IDI_ERROR = 32513,IDI_INFORMATION = 32516,};
enum MACRO_IDO {IDO_SHGIOI_SHARE = 0xFFFFFFF,IDO_SHGIOI_LINK = 0xFFFFFFE,IDO_SHGIOI_SLOWFILE = 0xFFFFFFFD,};
enum MACRO_IDS {IDS_CPSUI_STRID_FIRST = 64700,IDS_CPSUI_SETUP = 64700,IDS_CPSUI_MORE = 64701,IDS_CPSUI_CHANGE = 64702,IDS_CPSUI_OPTION = 64703,IDS_CPSUI_OF = 64704,IDS_CPSUI_RANGE_FROM = 64705,IDS_CPSUI_TO = 64706,IDS_CPSUI_COLON_SEP = 64707,IDS_CPSUI_LEFT_ANGLE = 64708,IDS_CPSUI_RIGHT_ANGLE = 64709,IDS_CPSUI_SLASH_SEP = 64710,IDS_CPSUI_PERCENT = 64711,IDS_CPSUI_LBCB_NOSEL = 64712,IDS_CPSUI_PROPERTIES = 64713,IDS_CPSUI_DEFAULTDOCUMENT = 64714,IDS_CPSUI_DOCUMENT = 64715,IDS_CPSUI_ADVANCEDOCUMENT = 64716,IDS_CPSUI_PRINTER = 64717,IDS_CPSUI_AUTOSELECT = 64718,IDS_CPSUI_PAPER_OUTPUT = 64719,IDS_CPSUI_GRAPHIC = 64720,IDS_CPSUI_OPTIONS = 64721,IDS_CPSUI_ADVANCED = 64722,IDS_CPSUI_STDDOCPROPTAB = 64723,IDS_CPSUI_STDDOCPROPTVTAB = 64724,IDS_CPSUI_DEVICEOPTIONS = 64725,IDS_CPSUI_FALSE = 64726,IDS_CPSUI_TRUE = 64727,IDS_CPSUI_NO = 64728,IDS_CPSUI_YES = 64729,IDS_CPSUI_OFF = 64730,IDS_CPSUI_ON = 64731,IDS_CPSUI_DEFAULT = 64732,IDS_CPSUI_ERROR = 64733,IDS_CPSUI_NONE = 64734,IDS_CPSUI_NOT = 64735,IDS_CPSUI_EXIST = 64736,IDS_CPSUI_NOTINSTALLED = 64737,IDS_CPSUI_ORIENTATION = 64738,IDS_CPSUI_SCALING = 64739,IDS_CPSUI_NUM_OF_COPIES = 64740,IDS_CPSUI_SOURCE = 64741,IDS_CPSUI_PRINTQUALITY = 64742,IDS_CPSUI_RESOLUTION = 64743,IDS_CPSUI_COLOR_APPERANCE = 64744,IDS_CPSUI_DUPLEX = 64745,IDS_CPSUI_TTOPTION = 64746,IDS_CPSUI_FORMNAME = 64747,IDS_CPSUI_ICM = 64748,IDS_CPSUI_ICMMETHOD = 64749,IDS_CPSUI_ICMINTENT = 64750,IDS_CPSUI_MEDIA = 64751,IDS_CPSUI_DITHERING = 64752,IDS_CPSUI_PORTRAIT = 64753,IDS_CPSUI_LANDSCAPE = 64754,IDS_CPSUI_ROT_LAND = 64755,IDS_CPSUI_COLLATE = 64756,IDS_CPSUI_COLLATED = 64757,IDS_CPSUI_PRINTFLDSETTING = 64758,IDS_CPSUI_DRAFT = 64759,IDS_CPSUI_LOW = 64760,IDS_CPSUI_MEDIUM = 64761,IDS_CPSUI_HIGH = 64762,IDS_CPSUI_PRESENTATION = 64763,IDS_CPSUI_COLOR = 64764,IDS_CPSUI_GRAYSCALE = 64765,IDS_CPSUI_MONOCHROME = 64766,IDS_CPSUI_SIMPLEX = 64767,IDS_CPSUI_HORIZONTAL = 64768,IDS_CPSUI_VERTICAL = 64769,IDS_CPSUI_LONG_SIDE = 64770,IDS_CPSUI_SHORT_SIDE = 64771,IDS_CPSUI_TT_PRINTASGRAPHIC = 64772,IDS_CPSUI_TT_DOWNLOADSOFT = 64773,IDS_CPSUI_TT_DOWNLOADVECT = 64774,IDS_CPSUI_TT_SUBDEV = 64775,IDS_CPSUI_ICM_BLACKWHITE = 64776,IDS_CPSUI_ICM_NO = 64777,IDS_CPSUI_ICM_YES = 64778,IDS_CPSUI_ICM_SATURATION = 64779,IDS_CPSUI_ICM_CONTRAST = 64780,IDS_CPSUI_ICM_COLORMETRIC = 64781,IDS_CPSUI_STANDARD = 64782,IDS_CPSUI_GLOSSY = 64783,IDS_CPSUI_TRANSPARENCY = 64784,IDS_CPSUI_REGULAR = 64785,IDS_CPSUI_BOND = 64786,IDS_CPSUI_COARSE = 64787,IDS_CPSUI_FINE = 64788,IDS_CPSUI_LINEART = 64789,IDS_CPSUI_ERRDIFFUSE = 64790,IDS_CPSUI_HALFTONE = 64791,IDS_CPSUI_HTCLRADJ = 64792,IDS_CPSUI_USE_HOST_HT = 64793,IDS_CPSUI_USE_DEVICE_HT = 64794,IDS_CPSUI_USE_PRINTER_HT = 64795,IDS_CPSUI_OUTBINASSIGN = 64796,IDS_CPSUI_WATERMARK = 64797,IDS_CPSUI_FORMTRAYASSIGN = 64798,IDS_CPSUI_UPPER_TRAY = 64799,IDS_CPSUI_ONLYONE = 64800,IDS_CPSUI_LOWER_TRAY = 64801,IDS_CPSUI_MIDDLE_TRAY = 64802,IDS_CPSUI_MANUAL_TRAY = 64803,IDS_CPSUI_ENVELOPE_TRAY = 64804,IDS_CPSUI_ENVMANUAL_TRAY = 64805,IDS_CPSUI_TRACTOR_TRAY = 64806,IDS_CPSUI_SMALLFMT_TRAY = 64807,IDS_CPSUI_LARGEFMT_TRAY = 64808,IDS_CPSUI_LARGECAP_TRAY = 64809,IDS_CPSUI_CASSETTE_TRAY = 64810,IDS_CPSUI_DEFAULT_TRAY = 64811,IDS_CPSUI_FORMSOURCE = 64812,IDS_CPSUI_MANUALFEED = 64813,IDS_CPSUI_PRINTERMEM_KB = 64814,IDS_CPSUI_PRINTERMEM_MB = 64815,IDS_CPSUI_PAGEPROTECT = 64816,IDS_CPSUI_HALFTONE_SETUP = 64817,IDS_CPSUI_INSTFONTCART = 64818,IDS_CPSUI_SLOT1 = 64819,IDS_CPSUI_SLOT2 = 64820,IDS_CPSUI_SLOT3 = 64821,IDS_CPSUI_SLOT4 = 64822,IDS_CPSUI_LEFT_SLOT = 64823,IDS_CPSUI_RIGHT_SLOT = 64824,IDS_CPSUI_STAPLER = 64825,IDS_CPSUI_STAPLER_ON = 64826,IDS_CPSUI_STAPLER_OFF = 64827,IDS_CPSUI_STACKER = 64828,IDS_CPSUI_MAILBOX = 64829,IDS_CPSUI_COPY = 64830,IDS_CPSUI_COPIES = 64831,IDS_CPSUI_TOTAL = 64832,IDS_CPSUI_MAKE = 64833,IDS_CPSUI_PRINT = 64834,IDS_CPSUI_FAX = 64835,IDS_CPSUI_PLOT = 64836,IDS_CPSUI_SLOW = 64837,IDS_CPSUI_FAST = 64838,IDS_CPSUI_ROTATED = 64839,IDS_CPSUI_RESET = 64840,IDS_CPSUI_ALL = 64841,IDS_CPSUI_DEVICE = 64842,IDS_CPSUI_SETTINGS = 64843,IDS_CPSUI_REVERT = 64844,IDS_CPSUI_CHANGES = 64845,IDS_CPSUI_CHANGED = 64846,IDS_CPSUI_WARNING = 64847,IDS_CPSUI_ABOUT = 64848,IDS_CPSUI_VERSION = 64849,IDS_CPSUI_NO_NAME = 64850,IDS_CPSUI_SETTING = 64851,IDS_CPSUI_DEVICE_SETTINGS = 64852,IDS_CPSUI_STDDOCPROPTAB1 = 64853,IDS_CPSUI_STDDOCPROPTAB2 = 64854,IDS_CPSUI_PAGEORDER = 64855,IDS_CPSUI_FRONTTOBACK = 64856,IDS_CPSUI_BACKTOFRONT = 64857,IDS_CPSUI_QUALITY_SETTINGS = 64858,IDS_CPSUI_QUALITY_DRAFT = 64859,IDS_CPSUI_QUALITY_BETTER = 64860,IDS_CPSUI_QUALITY_BEST = 64861,IDS_CPSUI_QUALITY_CUSTOM = 64862,IDS_CPSUI_OUTPUTBIN = 64863,IDS_CPSUI_NUP = 64864,IDS_CPSUI_NUP_NORMAL = 64865,IDS_CPSUI_NUP_TWOUP = 64866,IDS_CPSUI_NUP_FOURUP = 64867,IDS_CPSUI_NUP_SIXUP = 64868,IDS_CPSUI_NUP_NINEUP = 64869,IDS_CPSUI_NUP_SIXTEENUP = 64870,IDS_CPSUI_SIDE1 = 64871,IDS_CPSUI_SIDE2 = 64872,IDS_CPSUI_BOOKLET = 64873,IDS_CPSUI_STRID_LAST = 64873,};
enum MACRO_IGP {IGP_GETIMEVERSION = 4294967292,IGP_PROPERTY = 4,IGP_CONVERSION = 8,IGP_SENTENCE = 12,IGP_UI = 16,IGP_SETCOMPSTR = 20,IGP_SELECT = 24,};
enum MACRO_ILC {ILC_MASK = 0x1,ILC_COLOR = 0x0,ILC_COLORDDB = 0xFE,ILC_COLOR4 = 0x4,ILC_COLOR8 = 0x8,ILC_COLOR16 = 0x10,ILC_COLOR24 = 0x18,ILC_COLOR32 = 0x20,ILC_PALETTE = 0x800,ILC_MIRROR = 0x2000,ILC_PERITEMMIRROR = 0x8000,};
enum MACRO_ILD {ILD_NORMAL = 0x0,ILD_TRANSPARENT = 0x1,ILD_MASK = 0x10,ILD_IMAGE = 0x20,ILD_ROP = 0x40,ILD_BLEND25 = 0x2,ILD_BLEND50 = 0x4,ILD_OVERLAYMASK = 0xF00,ILD_PRESERVEALPHA = 0x1000,ILD_SCALE = 0x2000,ILD_DPISCALE = 0x4000,ILD_SELECTED = 0x4,ILD_FOCUS = 0x2,ILD_BLEND = 0x4,};
enum MACRO_ILP {ILP_NORMAL = 0,ILP_DOWNLEVEL = 1,};
enum MACRO_ILS {ILS_NORMAL = 0x0,ILS_GLOW = 0x1,ILS_SHADOW = 0x2,ILS_SATURATE = 0x4,ILS_ALPHA = 0x8,};
enum MACRO_IMC {IMC_GETCANDIDATEPOS = 0x7,IMC_SETCANDIDATEPOS = 0x8,IMC_GETCOMPOSITIONFONT = 0x9,IMC_SETCOMPOSITIONFONT = 0xA,IMC_GETCOMPOSITIONWINDOW = 0xB,IMC_SETCOMPOSITIONWINDOW = 0xC,IMC_GETSTATUSWINDOWPOS = 0xF,IMC_SETSTATUSWINDOWPOS = 0x10,IMC_CLOSESTATUSWINDOW = 0x21,IMC_OPENSTATUSWINDOW = 0x22,};
enum MACRO_IME {IME_CHOTKEY_IME_NONIME_TOGGLE = 0x10,IME_CHOTKEY_SHAPE_TOGGLE = 0x11,IME_CHOTKEY_SYMBOL_TOGGLE = 0x12,IME_JHOTKEY_CLOSE_OPEN = 0x30,IME_KHOTKEY_SHAPE_TOGGLE = 0x50,IME_KHOTKEY_HANJACONVERT = 0x51,IME_KHOTKEY_ENGLISH = 0x52,IME_THOTKEY_IME_NONIME_TOGGLE = 0x70,IME_THOTKEY_SHAPE_TOGGLE = 0x71,IME_THOTKEY_SYMBOL_TOGGLE = 0x72,IME_HOTKEY_DSWITCH_FIRST = 0x100,IME_HOTKEY_DSWITCH_LAST = 0x11F,IME_HOTKEY_PRIVATE_FIRST = 0x200,IME_ITHOTKEY_RESEND_RESULTSTR = 0x200,IME_ITHOTKEY_PREVIOUS_COMPOSITION = 0x201,IME_ITHOTKEY_UISTYLE_TOGGLE = 0x202,IME_ITHOTKEY_RECONVERTSTRING = 0x203,IME_HOTKEY_PRIVATE_LAST = 0x21F,};
enum MACRO_IMM {IMM_ERROR_NODATA = -1,IMM_ERROR_GENERAL = -2,};
enum MACRO_IMN {IMN_CLOSESTATUSWINDOW = 0x1,IMN_OPENSTATUSWINDOW = 0x2,IMN_CHANGECANDIDATE = 0x3,IMN_CLOSECANDIDATE = 0x4,IMN_OPENCANDIDATE = 0x5,IMN_SETCONVERSIONMODE = 0x6,IMN_SETSENTENCEMODE = 0x7,IMN_SETOPENSTATUS = 0x8,IMN_SETCANDIDATEPOS = 0x9,IMN_SETCOMPOSITIONFONT = 0xA,IMN_SETCOMPOSITIONWINDOW = 0xB,IMN_SETSTATUSWINDOWPOS = 0xC,IMN_GUIDELINE = 0xD,IMN_PRIVATE = 0xE,};
enum MACRO_IMR {IMR_COMPOSITIONWINDOW = 0x1,IMR_CANDIDATEWINDOW = 0x2,IMR_COMPOSITIONFONT = 0x3,IMR_RECONVERTSTRING = 0x4,IMR_CONFIRMRECONVERTSTRING = 0x5,IMR_QUERYCHARPOSITION = 0x6,IMR_DOCUMENTFEED = 0x7,};
enum MACRO_INF {INF_STYLE_NONE = 0x0,INF_STYLE_OLDNT = 0x1,INF_STYLE_WIN4 = 0x2,INF_STYLE_CACHE_ENABLE = 0x10,INF_STYLE_CACHE_DISABLE = 0x20,};
enum MACRO_IOC {IOC_VOID = 0x20000000,IOC_OUT = 0x40000000,IOC_IN = 0x80000000,IOC_INOUT = 0xC0000000,};
enum MACRO_IP6 {IP6_STATS = 36,UDP6_STATS = 37,TCP6_STATS = 38,};
enum MACRO_IPM {IPM_CLEARADDRESS = 1124,IPM_SETADDRESS = 1125,IPM_GETADDRESS = 1126,IPM_SETRANGE = 1127,IPM_SETFOCUS = 1128,IPM_ISBLANK = 1129,};
enum MACRO_IPN {IPN_FIRST = -860,IPN_LAST = -879,};
enum MACRO_ISC {ISC_SHOWUICANDIDATEWINDOW = 0x1,ISC_SHOWUICOMPOSITIONWINDOW = 0x80000000,ISC_SHOWUIGUIDELINE = 0x40000000,ISC_SHOWUIALLCANDIDATEWINDOW = 0xF,ISC_SHOWUIALL = 0xC000000F,};
enum MACRO_JOB {JOB_OBJECT_ASSIGN_PROCESS = 0x1,JOB_OBJECT_SET_ATTRIBUTES = 0x2,JOB_OBJECT_QUERY = 0x4,JOB_OBJECT_TERMINATE = 0x8,JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 0x10,JOB_OBJECT_ALL_ACCESS = 0x1F001F,};
enum MACRO_JOY {JOY_BUTTON1 = 0x1,JOY_BUTTON2 = 0x2,JOY_BUTTON3 = 0x4,JOY_BUTTON4 = 0x8,JOY_BUTTON1CHG = 0x100,JOY_BUTTON2CHG = 0x200,JOY_BUTTON3CHG = 0x400,JOY_BUTTON4CHG = 0x800,JOY_BUTTON5 = 0x10,JOY_BUTTON6 = 0x20,JOY_BUTTON7 = 0x40,JOY_BUTTON8 = 0x80,JOY_BUTTON9 = 0x100,JOY_BUTTON10 = 0x200,JOY_BUTTON11 = 0x400,JOY_BUTTON12 = 0x800,JOY_BUTTON13 = 0x1000,JOY_BUTTON14 = 0x2000,JOY_BUTTON15 = 0x4000,JOY_BUTTON16 = 0x8000,JOY_BUTTON17 = 0x10000,JOY_BUTTON18 = 0x20000,JOY_BUTTON19 = 0x40000,JOY_BUTTON20 = 0x80000,JOY_BUTTON21 = 0x100000,JOY_BUTTON22 = 0x200000,JOY_BUTTON23 = 0x400000,JOY_BUTTON24 = 0x800000,JOY_BUTTON25 = 0x1000000,JOY_BUTTON26 = 0x2000000,JOY_BUTTON27 = 0x4000000,JOY_BUTTON28 = 0x8000000,JOY_BUTTON29 = 0x10000000,JOY_BUTTON30 = 0x20000000,JOY_BUTTON31 = 0x40000000,JOY_BUTTON32 = 0x80000000,JOY_POVCENTERED = 0xFFFF,JOY_POVFORWARD = 0x0,JOY_POVRIGHT = 0x2328,JOY_POVBACKWARD = 0x4650,JOY_POVLEFT = 0x6978,JOY_RETURNX = 0x1,JOY_RETURNY = 0x2,JOY_RETURNZ = 0x4,JOY_RETURNR = 0x8,JOY_RETURNU = 0x10,JOY_RETURNV = 0x20,JOY_RETURNPOV = 0x40,JOY_RETURNBUTTONS = 0x80,JOY_RETURNRAWDATA = 0x100,JOY_RETURNPOVCTS = 0x200,JOY_RETURNCENTERED = 0x400,JOY_USEDEADZONE = 0x800,JOY_RETURNALL = 0xFF,JOY_CAL_READALWAYS = 0x10000,JOY_CAL_READXYONLY = 0x20000,JOY_CAL_READ3 = 0x40000,JOY_CAL_READ4 = 0x80000,JOY_CAL_READXONLY = 0x100000,JOY_CAL_READYONLY = 0x200000,JOY_CAL_READ5 = 0x400000,JOY_CAL_READ6 = 0x800000,JOY_CAL_READZONLY = 0x1000000,JOY_CAL_READRONLY = 0x2000000,JOY_CAL_READUONLY = 0x4000000,JOY_CAL_READVONLY = 0x8000000,};
enum MACRO_KBD {KBD_VERSION = 1,};
enum MACRO_KEY {KEY_QUERY_VALUE = 0x1,KEY_SET_VALUE = 0x2,KEY_CREATE_SUB_KEY = 0x4,KEY_ENUMERATE_SUB_KEYS = 0x8,KEY_NOTIFY = 0x10,KEY_CREATE_LINK = 0x20,KEY_WOW64_32KEY = 0x200,KEY_WOW64_64KEY = 0x100,KEY_WOW64_RES = 0x300,KEY_READ = 0x20019,KEY_WRITE = 0x20006,KEY_EXECUTE = 0x20019,KEY_ALL_ACCESS = 0xF003F,};
enum MACRO_KLF {KLF_ACTIVATE = 0x1,KLF_SUBSTITUTE_OK = 0x2,KLF_REORDER = 0x8,KLF_REPLACELANG = 0x10,KLF_NOTELLSHELL = 0x80,KLF_SETFORPROCESS = 0x100,KLF_SHIFTLOCK = 0x10000,KLF_RESET = 0x40000000,};
enum MACRO_KRB {KRB_NT_UNKNOWN = 0,KRB_NT_PRINCIPAL = 1,KRB_NT_PRINCIPAL_AND_ID = -131,KRB_NT_SRV_INST = 2,KRB_NT_SRV_INST_AND_ID = -132,KRB_NT_SRV_HST = 3,KRB_NT_SRV_XHST = 4,KRB_NT_UID = 5,KRB_NT_ENTERPRISE_PRINCIPAL = 10,KRB_NT_ENT_PRINCIPAL_AND_ID = -130,KRB_NT_MS_PRINCIPAL = -128,KRB_NT_MS_PRINCIPAL_AND_ID = -129,};
enum MACRO_LBN {LBN_ERRSPACE = -2,LBN_SELCHANGE = 1,LBN_DBLCLK = 2,LBN_SELCANCEL = 3,LBN_SETFOCUS = 4,LBN_KILLFOCUS = 5,};
enum MACRO_LBS {LBS_NOTIFY = 0x1,LBS_SORT = 0x2,LBS_NOREDRAW = 0x4,LBS_MULTIPLESEL = 0x8,LBS_OWNERDRAWFIXED = 0x10,LBS_OWNERDRAWVARIABLE = 0x20,LBS_HASSTRINGS = 0x40,LBS_USETABSTOPS = 0x80,LBS_NOINTEGRALHEIGHT = 0x100,LBS_MULTICOLUMN = 0x200,LBS_WANTKEYBOARDINPUT = 0x400,LBS_EXTENDEDSEL = 0x800,LBS_DISABLENOSCROLL = 0x1000,LBS_NODATA = 0x2000,LBS_NOSEL = 0x4000,LBS_COMBOBOX = 0x8000,LBS_STANDARD = 0xA00003,};
enum MACRO_LCS {LCS_SIGNATURE = 1347637059,LCS_sRGB = 1934772034,LCS_WINDOWS_COLOR_SPACE = 1466527264,LCS_CALIBRATED_RGB = 0,LCS_GM_BUSINESS = 1,LCS_GM_GRAPHICS = 2,LCS_GM_IMAGES = 4,LCS_GM_ABS_COLORIMETRIC = 8,};
enum MACRO_LEN {WSADESCRIPTION_LEN = 256,WSASYS_STATUS_LEN = 128,};
enum MACRO_LIF {LIF_ITEMINDEX = 0x1,LIF_STATE = 0x2,LIF_ITEMID = 0x4,LIF_URL = 0x8,};
enum MACRO_LIS {LIS_FOCUSED = 0x1,LIS_ENABLED = 0x2,LIS_VISITED = 0x4,};
enum MACRO_LPD {LPD_DOUBLEBUFFER = 0x1,LPD_STEREO = 0x2,LPD_SUPPORT_GDI = 0x10,LPD_SUPPORT_OPENGL = 0x20,LPD_SHARE_DEPTH = 0x40,LPD_SHARE_STENCIL = 0x80,LPD_SHARE_ACCUM = 0x100,LPD_SWAP_EXCHANGE = 0x200,LPD_SWAP_COPY = 0x400,LPD_TRANSPARENT = 0x1000,LPD_TYPE_RGBA = 0x0,LPD_TYPE_COLORINDEX = 0x1,};
enum MACRO_LPR {LPR = 2,};
enum MACRO_LSA {LSA_MODE_PASSWORD_PROTECTED = 0x1,LSA_MODE_INDIVIDUAL_ACCOUNTS = 0x2,LSA_MODE_MANDATORY_ACCESS = 0x4,LSA_MODE_LOG_FULL = 0x8,};
enum MACRO_LTP {LTP_PC_SMT = 0x1,};
enum MACRO_LUP {LUP_DEEP = 0x1,LUP_CONTAINERS = 0x2,LUP_NOCONTAINERS = 0x4,LUP_NEAREST = 0x8,LUP_RETURN_NAME = 0x10,LUP_RETURN_TYPE = 0x20,LUP_RETURN_VERSION = 0x40,LUP_RETURN_COMMENT = 0x80,LUP_RETURN_ADDR = 0x100,LUP_RETURN_BLOB = 0x200,LUP_RETURN_ALIASES = 0x400,LUP_RETURN_QUERY_STRING = 0x800,LUP_RETURN_ALL = 0xFF0,LUP_RES_SERVICE = 0x8000,LUP_FLUSHCACHE = 0x1000,LUP_FLUSHPREVIOUS = 0x2000,};
enum MACRO_LVA {LVA_DEFAULT = 0x0,LVA_ALIGNLEFT = 0x1,LVA_ALIGNTOP = 0x2,LVA_SNAPTOGRID = 0x5,};
enum MACRO_LVM {LVM_SETUNICODEFORMAT = 8197,LVM_GETUNICODEFORMAT = 8198,LVM_GETBKCOLOR = 4096,LVM_SETBKCOLOR = 4097,LVM_GETIMAGELIST = 4098,};
enum MACRO_LVN {LVN_FIRST = -100,LVN_LAST = -199,};
enum MACRO_LVS {LVS_ICON = 0x0,LVS_REPORT = 0x1,LVS_SMALLICON = 0x2,LVS_LIST = 0x3,LVS_TYPEMASK = 0x3,LVS_SINGLESEL = 0x4,LVS_SHOWSELALWAYS = 0x8,LVS_SORTASCENDING = 0x10,LVS_SORTDESCENDING = 0x20,LVS_SHAREIMAGELISTS = 0x40,LVS_NOLABELWRAP = 0x80,LVS_AUTOARRANGE = 0x100,LVS_EDITLABELS = 0x200,LVS_OWNERDATA = 0x1000,LVS_NOSCROLL = 0x2000,LVS_TYPESTYLEMASK = 0xFC00,LVS_ALIGNTOP = 0x0,LVS_ALIGNLEFT = 0x800,LVS_ALIGNMASK = 0xC00,LVS_OWNERDRAWFIXED = 0x400,LVS_NOCOLUMNHEADER = 0x4000,LVS_NOSORTHEADER = 0x8000,};
enum MACRO_LWA {LWA_COLORKEY = 0x1,LWA_ALPHA = 0x2,};
enum MACRO_LWS {LWS_TRANSPARENT = 0x1,LWS_IGNORERETURN = 0x2,};
enum MACRO_MAP {MAP_FOLDCZONE = 0x10,MAP_PRECOMPOSED = 0x20,MAP_COMPOSITE = 0x40,MAP_FOLDDIGITS = 0x80,MAP_EXPAND_LIGATURES = 0x2000,};
enum MACRO_MAX {MAX_PATH = 260,};
enum MACRO_MBR {MBR_CHECKSUM_MISMATCH = 0x8B,};
enum MACRO_MCA {MCA_WARNING_CACHE = 0x8005003C,MCA_ERROR_CACHE = 0xC005003D,MCA_WARNING_TLB = 0x8005003E,MCA_ERROR_TLB = 0xC005003F,MCA_WARNING_CPU_BUS = 0x80050040,MCA_ERROR_CPU_BUS = 0xC0050041,MCA_WARNING_REGISTER_FILE = 0x80050042,MCA_ERROR_REGISTER_FILE = 0xC0050043,MCA_WARNING_MAS = 0x80050044,MCA_ERROR_MAS = 0xC0050045,MCA_WARNING_MEM_UNKNOWN = 0x80050046,MCA_ERROR_MEM_UNKNOWN = 0xC0050047,MCA_WARNING_MEM_1_2 = 0x80050048,MCA_ERROR_MEM_1_2 = 0xC0050049,MCA_WARNING_MEM_1_2_5 = 0x8005004A,MCA_ERROR_MEM_1_2_5 = 0xC005004B,MCA_WARNING_MEM_1_2_5_4 = 0x8005004C,MCA_ERROR_MEM_1_2_5_4 = 0xC005004D,MCA_WARNING_SYSTEM_EVENT = 0x8005004E,MCA_ERROR_SYSTEM_EVENT = 0xC005004F,MCA_WARNING_PCI_BUS_PARITY = 0x80050050,MCA_ERROR_PCI_BUS_PARITY = 0xC0050051,MCA_WARNING_PCI_BUS_PARITY_NO_INFO = 0x80050052,MCA_ERROR_PCI_BUS_PARITY_NO_INFO = 0xC0050053,MCA_WARNING_PCI_BUS_SERR = 0x80050054,MCA_ERROR_PCI_BUS_SERR = 0xC0050055,MCA_WARNING_PCI_BUS_SERR_NO_INFO = 0x80050056,MCA_ERROR_PCI_BUS_SERR_NO_INFO = 0xC0050057,MCA_WARNING_PCI_BUS_MASTER_ABORT = 0x80050058,MCA_ERROR_PCI_BUS_MASTER_ABORT = 0xC0050059,MCA_WARNING_PCI_BUS_MASTER_ABORT_NO_INFO = 0x8005005A,MCA_ERROR_PCI_BUS_MASTER_ABORT_NO_INFO = 0xC005005B,MCA_WARNING_PCI_BUS_TIMEOUT = 0x8005005C,MCA_ERROR_PCI_BUS_TIMEOUT = 0xC005005D,MCA_WARNING_PCI_BUS_TIMEOUT_NO_INFO = 0x8005005E,MCA_ERROR_PCI_BUS_TIMEOUT_NO_INFO = 0xC005005F,MCA_WARNING_PCI_BUS_UNKNOWN = 0x80050060,MCA_ERROR_PCI_BUS_UNKNOWN = 0xC0050061,MCA_WARNING_PCI_DEVICE = 0x80050062,MCA_ERROR_PCI_DEVICE = 0xC0050063,MCA_WARNING_SMBIOS = 0x80050064,MCA_ERROR_SMBIOS = 0xC0050065,MCA_WARNING_PLATFORM_SPECIFIC = 0x80050066,MCA_ERROR_PLATFORM_SPECIFIC = 0xC0050067,MCA_WARNING_UNKNOWN = 0x80050068,MCA_ERROR_UNKNOWN = 0xC0050069,MCA_WARNING_UNKNOWN_NO_CPU = 0x8005006A,MCA_ERROR_UNKNOWN_NO_CPU = 0xC005006B,};
enum MACRO_MCD {MCD_VER_MAJOR = 1,MCD_VER_MINOR = 0,MCD_MAX_USER_CLIP_PLANES = 6,};
enum MACRO_MCI {MCI_STRING_OFFSET = 512,MCI_VD_OFFSET = 1024,MCI_CD_OFFSET = 1088,MCI_WAVE_OFFSET = 1152,MCI_SEQ_OFFSET = 1216,};
enum MACRO_MCM {MCM_FIRST = 0x1000,MCM_GETCURSEL = 0x1001,MCM_SETCURSEL = 0x1002,MCM_GETMAXSELCOUNT = 0x1003,MCM_SETMAXSELCOUNT = 0x1004,MCM_GETSELRANGE = 0x1005,MCM_SETSELRANGE = 0x1006,MCM_GETMONTHRANGE = 0x1007,MCM_SETDAYSTATE = 0x1008,MCM_GETMINREQRECT = 0x1009,MCM_SETCOLOR = 0x100A,MCM_GETCOLOR = 0x100B,};
enum MACRO_MCN {MCN_FIRST = -750,MCN_LAST = -759,};
enum MACRO_MCS {MCS_DAYSTATE = 0x1,MCS_MULTISELECT = 0x2,MCS_WEEKNUMBERS = 0x4,MCS_NOTODAYCIRCLE = 0x8,MCS_NOTODAY = 0x10,};
enum MACRO_MCW {MCW_EM = 524319,};
enum MACRO_MDL {MDL_MAPPED_TO_SYSTEM_VA = 0x1,MDL_PAGES_LOCKED = 0x2,MDL_SOURCE_IS_NONPAGED_POOL = 0x4,MDL_ALLOCATED_FIXED_SIZE = 0x8,MDL_PARTIAL = 0x10,MDL_PARTIAL_HAS_BEEN_MAPPED = 0x20,MDL_IO_PAGE_READ = 0x40,MDL_WRITE_OPERATION = 0x80,MDL_PARENT_MAPPED_SYSTEM_VA = 0x100,MDL_LOCK_HELD = 0x200,MDL_SCATTER_GATHER_VA = 0x400,MDL_IO_SPACE = 0x800,MDL_NETWORK_HEADER = 0x1000,MDL_MAPPING_CAN_FAIL = 0x2000,MDL_ALLOCATED_MUST_SUCCEED = 0x4000,MDL_64_BIT_VA = 0x8000,};
enum MACRO_MDM {MDM_COMPRESSION = 0x1,MDM_ERROR_CONTROL = 0x2,MDM_FORCED_EC = 0x4,MDM_CELLULAR = 0x8,MDM_FLOWCONTROL_HARD = 0x10,MDM_FLOWCONTROL_SOFT = 0x20,MDM_CCITT_OVERRIDE = 0x40,MDM_SPEED_ADJUST = 0x80,MDM_TONE_DIAL = 0x100,MDM_BLIND_DIAL = 0x200,MDM_V23_OVERRIDE = 0x400,MDM_DIAGNOSTICS = 0x800,MDM_MASK_BEARERMODE = 0xF000,MDM_SHIFT_BEARERMODE = 0xC,MDM_MASK_PROTOCOLID = 0xF0000,MDM_SHIFT_PROTOCOLID = 0x10,MDM_MASK_PROTOCOLDATA = 0xFF00000,MDM_SHIFT_PROTOCOLDATA = 0x14,MDM_MASK_PROTOCOLINFO = 0xFFF0000,MDM_SHIFT_PROTOCOLINFO = 0x10,MDM_MASK_EXTENDEDINFO = 0xFFFF000,MDM_SHIFT_EXTENDEDINFO = 0xC,MDM_BEARERMODE_ANALOG = 0x0,MDM_BEARERMODE_ISDN = 0x1,MDM_BEARERMODE_GSM = 0x2,MDM_PROTOCOLID_DEFAULT = 0x0,MDM_PROTOCOLID_HDLCPPP = 0x1,MDM_PROTOCOLID_V128 = 0x2,MDM_PROTOCOLID_X75 = 0x3,MDM_PROTOCOLID_V110 = 0x4,MDM_PROTOCOLID_V120 = 0x5,MDM_PROTOCOLID_AUTO = 0x6,MDM_PROTOCOLID_ANALOG = 0x7,MDM_PROTOCOLID_GPRS = 0x8,MDM_PROTOCOLID_PIAFS = 0x9,MDM_SHIFT_HDLCPPP_SPEED = 0x0,MDM_MASK_HDLCPPP_SPEED = 0x7,MDM_HDLCPPP_SPEED_DEFAULT = 0x0,MDM_HDLCPPP_SPEED_64K = 0x1,MDM_HDLCPPP_SPEED_56K = 0x2,MDM_SHIFT_HDLCPPP_AUTH = 0x3,MDM_MASK_HDLCPPP_AUTH = 0x38,MDM_HDLCPPP_AUTH_DEFAULT = 0x0,MDM_HDLCPPP_AUTH_NONE = 0x1,MDM_HDLCPPP_AUTH_PAP = 0x2,MDM_HDLCPPP_AUTH_CHAP = 0x3,MDM_HDLCPPP_AUTH_MSCHAP = 0x4,MDM_SHIFT_HDLCPPP_ML = 0x6,MDM_MASK_HDLCPPP_ML = 0xC0,MDM_HDLCPPP_ML_DEFAULT = 0x0,MDM_HDLCPPP_ML_NONE = 0x1,MDM_HDLCPPP_ML_2 = 0x2,MDM_PROTOCOL_HDLCPPP_64K = 0x110000,MDM_PROTOCOL_HDLCPPP_56K = 0x210000,MDM_PROTOCOL_HDLCPPP_112K = 0x8210000,MDM_PROTOCOL_HDLCPPP_112K_PAP = 0x9210000,MDM_PROTOCOL_HDLCPPP_112K_CHAP = 0x9A10000,MDM_PROTOCOL_HDLCPPP_112K_MSCHAP = 0xA210000,MDM_PROTOCOL_HDLCPPP_128K = 0x8110000,MDM_PROTOCOL_HDLCPPP_128K_PAP = 0x9110000,MDM_PROTOCOL_HDLCPPP_128K_CHAP = 0x9910000,MDM_PROTOCOL_HDLCPPP_128K_MSCHAP = 0xA110000,MDM_SHIFT_V120_SPEED = 0x0,MDM_MASK_V120_SPEED = 0x7,MDM_V120_SPEED_DEFAULT = 0x0,MDM_V120_SPEED_64K = 0x1,MDM_V120_SPEED_56K = 0x2,MDM_SHIFT_V120_ML = 0x6,MDM_MASK_V120_ML = 0xC0,MDM_V120_ML_DEFAULT = 0x0,MDM_V120_ML_NONE = 0x1,MDM_V120_ML_2 = 0x2,MDM_PROTOCOL_V120_64K = 0x4150000,MDM_PROTOCOL_V120_56K = 0x4250000,MDM_PROTOCOL_V120_112K = 0x8250000,MDM_PROTOCOL_V120_128K = 0x8150000,MDM_SHIFT_X75_DATA = 0x0,MDM_MASK_X75_DATA = 0x7,MDM_X75_DATA_DEFAULT = 0x0,MDM_X75_DATA_64K = 0x1,MDM_X75_DATA_128K = 0x2,MDM_X75_DATA_T_70 = 0x3,MDM_X75_DATA_BTX = 0x4,MDM_PROTOCOL_X75_64K = 0x130000,MDM_PROTOCOL_X75_128K = 0x230000,MDM_PROTOCOL_X75_T_70 = 0x330000,MDM_PROTOCOL_X75_BTX = 0x430000,MDM_SHIFT_V110_SPEED = 0x0,MDM_MASK_V110_SPEED = 0xF,MDM_V110_SPEED_DEFAULT = 0x0,MDM_V110_SPEED_1DOT2K = 0x1,MDM_V110_SPEED_2DOT4K = 0x2,MDM_V110_SPEED_4DOT8K = 0x3,MDM_V110_SPEED_9DOT6K = 0x4,MDM_V110_SPEED_12DOT0K = 0x5,MDM_V110_SPEED_14DOT4K = 0x6,MDM_V110_SPEED_19DOT2K = 0x7,MDM_V110_SPEED_28DOT8K = 0x8,MDM_V110_SPEED_38DOT4K = 0x9,MDM_V110_SPEED_57DOT6K = 0xA,MDM_PROTOCOL_V110_1DOT2K = 0x140000,MDM_PROTOCOL_V110_2DOT4K = 0x240000,MDM_PROTOCOL_V110_4DOT8K = 0x340000,MDM_PROTOCOL_V110_9DOT6K = 0x440000,MDM_PROTOCOL_V110_12DOT0K = 0x540000,MDM_PROTOCOL_V110_14DOT4K = 0x640000,MDM_PROTOCOL_V110_19DOT2K = 0x740000,MDM_PROTOCOL_V110_28DOT8K = 0x840000,MDM_PROTOCOL_V110_38DOT4K = 0x940000,MDM_PROTOCOL_V110_57DOT6K = 0xA40000,MDM_SHIFT_AUTO_SPEED = 0x0,MDM_MASK_AUTO_SPEED = 0x7,MDM_AUTO_SPEED_DEFAULT = 0x0,MDM_SHIFT_AUTO_ML = 0x6,MDM_MASK_AUTO_ML = 0xC0,MDM_AUTO_ML_DEFAULT = 0x0,MDM_AUTO_ML_NONE = 0x1,MDM_AUTO_ML_2 = 0x2,MDM_PROTOCOL_AUTO_1CH = 0x4060000,MDM_PROTOCOL_AUTO_2CH = 0x8060000,MDM_ANALOG_RLP_ON = 0x0,MDM_ANALOG_RLP_OFF = 0x1,MDM_ANALOG_V34 = 0x2,MDM_PROTOCOL_ANALOG_RLP = 0x70000,MDM_PROTOCOL_ANALOG_NRLP = 0x170000,MDM_PROTOCOL_ANALOG_V34 = 0x270000,MDM_PROTOCOL_GPRS = 0x80000,MDM_PIAFS_INCOMING = 0x0,MDM_PIAFS_OUTGOING = 0x1,MDM_PROTOCOL_PIAFS_INCOMING = 0x90000,MDM_PROTOCOL_PIAFS_OUTGOING = 0x190000,};
enum MACRO_MEM {MEM_COMMIT = 0x1000,MEM_RESERVE = 0x2000,MEM_DECOMMIT = 0x4000,MEM_RELEASE = 0x8000,MEM_FREE = 0x10000,MEM_PRIVATE = 0x20000,MEM_MAPPED = 0x40000,MEM_RESET = 0x80000,MEM_TOP_DOWN = 0x100000,MEM_WRITE_WATCH = 0x200000,MEM_PHYSICAL = 0x400000,MEM_LARGE_PAGES = 0x20000000,MEM_4MB_PAGES = 0x80000000,};
enum MACRO_MFS {MFS_GRAYED = 0x3,MFS_DISABLED = 0x3,MFS_CHECKED = 0x8,MFS_HILITE = 0x80,MFS_ENABLED = 0x0,MFS_UNCHECKED = 0x0,MFS_UNHILITE = 0x0,MFS_DEFAULT = 0x1000,};
enum MACRO_MFT {MFT_STRING = 0,MFT_BITMAP = 4,MFT_MENUBARBREAK = 32,MFT_MENUBREAK = 64,MFT_OWNERDRAW = 256,MFT_RADIOCHECK = 512,MFT_SEPARATOR = 2048,MFT_RIGHTORDER = 8192,MFT_RIGHTJUSTIFY = 16384,};
enum MACRO_MIB {MIB_IF_TYPE_OTHER = 1,MIB_IF_TYPE_ETHERNET = 6,MIB_IF_TYPE_TOKENRING = 9,MIB_IF_TYPE_FDDI = 15,MIB_IF_TYPE_PPP = 23,MIB_IF_TYPE_LOOPBACK = 24,MIB_IF_TYPE_SLIP = 28,MIB_IF_ADMIN_STATUS_UP = 1,MIB_IF_ADMIN_STATUS_DOWN = 2,MIB_IF_ADMIN_STATUS_TESTING = 3,MIB_IF_OPER_STATUS_NON_OPERATIONAL = 0,MIB_IF_OPER_STATUS_UNREACHABLE = 1,MIB_IF_OPER_STATUS_DISCONNECTED = 2,MIB_IF_OPER_STATUS_CONNECTING = 3,MIB_IF_OPER_STATUS_CONNECTED = 4,MIB_IF_OPER_STATUS_OPERATIONAL = 5,};
enum MACRO_MIM {MIM_MAXHEIGHT = 0x1,MIM_BACKGROUND = 0x2,MIM_HELPID = 0x4,MIM_MENUDATA = 0x8,MIM_STYLE = 0x10,MIM_APPLYTOSUBMENUS = 0x80000000,};
enum MACRO_MIN {MIN_DIMENSION = 1,};
enum MACRO_MKF {MKF_MOUSEKEYSON = 0x1,MKF_AVAILABLE = 0x2,MKF_HOTKEYACTIVE = 0x4,MKF_CONFIRMHOTKEY = 0x8,MKF_HOTKEYSOUND = 0x10,MKF_INDICATOR = 0x20,MKF_MODIFIERS = 0x40,MKF_REPLACENUMBERS = 0x80,MKF_LEFTBUTTONSEL = 0x10000000,MKF_RIGHTBUTTONSEL = 0x20000000,MKF_LEFTBUTTONDOWN = 0x1000000,MKF_RIGHTBUTTONDOWN = 0x2000000,MKF_MOUSEMODE = 0x80000000,};
enum MACRO_MNC {MNC_IGNORE = 0,MNC_CLOSE = 1,MNC_EXECUTE = 2,MNC_SELECT = 3,};
enum MACRO_MND {MND_CONTINUE = 0,MND_ENDMENU = 1,};
enum MACRO_MNS {MNS_NOCHECK = 0x80000000,MNS_MODELESS = 0x40000000,MNS_DRAGDROP = 0x20000000,MNS_AUTODISMISS = 0x10000000,MNS_NOTIFYBYPOS = 0x8000000,MNS_CHECKORBMP = 0x4000000,};
enum MACRO_MOD {MOD_ALT = 0x1,MOD_CONTROL = 0x2,MOD_SHIFT = 0x4,MOD_WIN = 0x8,};
enum MACRO_MOM {MOM_OPEN = 967,MOM_CLOSE = 968,MOM_DONE = 969,};
enum MACRO_MPR {MPR_INTERFACE_OUT_OF_RESOURCES = 0x1,MPR_INTERFACE_ADMIN_DISABLED = 0x2,MPR_INTERFACE_CONNECTION_FAILURE = 0x4,MPR_INTERFACE_SERVICE_PAUSED = 0x8,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_MAXIOVLEN = 0x10,MSG_PARTIAL = 0x8000,};
enum MACRO_MWT {MWT_IDENTITY = 1,MWT_LEFTMULTIPLY = 2,MWT_RIGHTMULTIPLY = 3,MWT_MIN = 1,MWT_MAX = 3,};
enum MACRO_NDR {NDR_CHAR_REP_MASK = 0xF,NDR_INT_REP_MASK = 0xF0,NDR_FLOAT_REP_MASK = 0xFF00,NDR_LITTLE_ENDIAN = 0x10,NDR_BIG_ENDIAN = 0x0,NDR_IEEE_FLOAT = 0x0,NDR_VAX_FLOAT = 0x100,NDR_IBM_FLOAT = 0x300,NDR_ASCII_CHAR = 0x0,NDR_EBCDIC_CHAR = 0x1,NDR_LOCAL_DATA_REPRESENTATION = 0x10,NDR_LOCAL_ENDIAN = 0x10,};
enum MACRO_NDW {NDW_INSTALLFLAG_DIDFACTDEFS = 0x1,NDW_INSTALLFLAG_HARDWAREALLREADYIN = 0x2,NDW_INSTALLFLAG_NEEDRESTART = 0x80,NDW_INSTALLFLAG_NEEDREBOOT = 0x100,NDW_INSTALLFLAG_NEEDSHUTDOWN = 0x200,NDW_INSTALLFLAG_EXPRESSINTRO = 0x400,NDW_INSTALLFLAG_SKIPISDEVINSTALLED = 0x800,NDW_INSTALLFLAG_NODETECTEDDEVS = 0x1000,NDW_INSTALLFLAG_INSTALLSPECIFIC = 0x2000,NDW_INSTALLFLAG_SKIPCLASSLIST = 0x4000,NDW_INSTALLFLAG_CI_PICKED_OEM = 0x8000,NDW_INSTALLFLAG_PCMCIAMODE = 0x10000,NDW_INSTALLFLAG_PCMCIADEVICE = 0x20000,NDW_INSTALLFLAG_USERCANCEL = 0x40000,NDW_INSTALLFLAG_KNOWNCLASS = 0x80000,};
enum MACRO_NET {NET_DFS_ENUM = 0x400038A4,NET_DFS_ENUMEX = 0x400038A5,};
enum MACRO_NFR {NFR_ANSI = 1,NFR_UNICODE = 2,};
enum MACRO_NFS {NFS_EDIT = 0x1,NFS_STATIC = 0x2,NFS_LISTCOMBO = 0x4,NFS_BUTTON = 0x8,NFS_ALL = 0x10,NFS_USEFONTASSOC = 0x20,};
enum MACRO_NIF {NIF_MESSAGE = 0x1,NIF_ICON = 0x2,NIF_TIP = 0x4,};
enum MACRO_NIM {NIM_ADD = 0x0,NIM_MODIFY = 0x1,NIM_DELETE = 0x2,};
enum MACRO_NLS {NLS_VALID_LOCALE_MASK = 0xFFFFF,};
enum MACRO_NON {NON_PAGED_DEBUG_SIGNATURE = 0x494E,};
enum MACRO_NOT {NOT_A_DFS_PATH = 0x40003840,};
enum MACRO_NRC {NRC_GOODRET = 0x0,NRC_BUFLEN = 0x1,NRC_ILLCMD = 0x3,NRC_CMDTMO = 0x5,NRC_INCOMP = 0x6,NRC_BADDR = 0x7,NRC_SNUMOUT = 0x8,NRC_NORES = 0x9,NRC_SCLOSED = 0xA,NRC_CMDCAN = 0xB,NRC_DUPNAME = 0xD,NRC_NAMTFUL = 0xE,NRC_ACTSES = 0xF,NRC_LOCTFUL = 0x11,NRC_REMTFUL = 0x12,NRC_ILLNN = 0x13,NRC_NOCALL = 0x14,NRC_NOWILD = 0x15,NRC_INUSE = 0x16,NRC_NAMERR = 0x17,NRC_SABORT = 0x18,NRC_NAMCONF = 0x19,NRC_IFBUSY = 0x21,NRC_TOOMANY = 0x22,NRC_BRIDGE = 0x23,NRC_CANOCCR = 0x24,NRC_CANCEL = 0x26,NRC_DUPENV = 0x30,NRC_ENVNOTDEF = 0x34,NRC_OSRESNOTAV = 0x35,NRC_MAXAPPS = 0x36,NRC_NOSAPS = 0x37,NRC_NORESOURCES = 0x38,NRC_INVADDRESS = 0x39,NRC_INVDDID = 0x3B,NRC_LOCKFAIL = 0x3C,NRC_OPENERR = 0x3F,NRC_SYSTEM = 0x40,NRC_PENDING = 0xFF,};
enum MACRO_NTE {NTE_BAD_UID = 0x80090001,NTE_BAD_HASH = 0x80090002,NTE_BAD_KEY = 0x80090003,NTE_BAD_LEN = 0x80090004,NTE_BAD_DATA = 0x80090005,NTE_BAD_SIGNATURE = 0x80090006,NTE_BAD_VER = 0x80090007,NTE_BAD_ALGID = 0x80090008,NTE_BAD_FLAGS = 0x80090009,NTE_BAD_TYPE = 0x8009000A,NTE_BAD_KEY_STATE = 0x8009000B,NTE_BAD_HASH_STATE = 0x8009000C,NTE_NO_KEY = 0x8009000D,NTE_NO_MEMORY = 0x8009000E,NTE_EXISTS = 0x8009000F,NTE_PERM = 0x80090010,NTE_NOT_FOUND = 0x80090011,NTE_DOUBLE_ENCRYPT = 0x80090012,NTE_BAD_PROVIDER = 0x80090013,NTE_BAD_PROV_TYPE = 0x80090014,NTE_BAD_PUBLIC_KEY = 0x80090015,NTE_BAD_KEYSET = 0x80090016,NTE_PROV_TYPE_NOT_DEF = 0x80090017,NTE_PROV_TYPE_ENTRY_BAD = 0x80090018,NTE_KEYSET_NOT_DEF = 0x80090019,NTE_KEYSET_ENTRY_BAD = 0x8009001A,NTE_PROV_TYPE_NO_MATCH = 0x8009001B,NTE_SIGNATURE_FILE_BAD = 0x8009001C,NTE_PROVIDER_DLL_FAIL = 0x8009001D,NTE_PROV_DLL_NOT_FOUND = 0x8009001E,NTE_BAD_KEYSET_PARAM = 0x8009001F,NTE_FAIL = 0x80090020,NTE_SYS_ERR = 0x80090021,NTE_SILENT_CONTEXT = 0x80090022,NTE_TOKEN_KEYSET_STORAGE_FULL = 0x80090023,NTE_TEMPORARY_PROFILE = 0x80090024,NTE_FIXEDPARAMETER = 0x80090025,};
enum MACRO_NTM {NTM_REGULAR = 0x40,NTM_BOLD = 0x20,NTM_ITALIC = 0x1,NTM_NONNEGATIVE_AC = 0x10000,NTM_PS_OPENTYPE = 0x20000,NTM_TT_OPENTYPE = 0x40000,NTM_MULTIPLEMASTER = 0x80000,NTM_TYPE1 = 0x100000,NTM_DSIG = 0x200000,};
enum MACRO_NUM {NUM_DISCHARGE_POLICIES = 4,};
enum MACRO_OBJ {OBJ_PEN = 1,OBJ_BRUSH = 2,OBJ_DC = 3,OBJ_METADC = 4,OBJ_PAL = 5,OBJ_FONT = 6,OBJ_BITMAP = 7,OBJ_REGION = 8,OBJ_METAFILE = 9,OBJ_MEMDC = 10,OBJ_EXTPEN = 11,OBJ_ENHMETADC = 12,OBJ_ENHMETAFILE = 13,OBJ_COLORSPACE = 14,};
enum MACRO_OBM {OBM_CLOSE = 32754,OBM_UPARROW = 32753,OBM_DNARROW = 32752,OBM_RGARROW = 32751,OBM_LFARROW = 32750,OBM_REDUCE = 32749,OBM_ZOOM = 32748,OBM_RESTORE = 32747,OBM_REDUCED = 32746,OBM_ZOOMD = 32745,OBM_RESTORED = 32744,OBM_UPARROWD = 32743,OBM_DNARROWD = 32742,OBM_RGARROWD = 32741,OBM_LFARROWD = 32740,OBM_MNARROW = 32739,OBM_COMBO = 32738,OBM_UPARROWI = 32737,OBM_DNARROWI = 32736,OBM_RGARROWI = 32735,OBM_LFARROWI = 32734,OBM_OLD_CLOSE = 32767,OBM_SIZE = 32766,OBM_OLD_UPARROW = 32765,OBM_OLD_DNARROW = 32764,OBM_OLD_RGARROW = 32763,OBM_OLD_LFARROW = 32762,OBM_BTSIZE = 32761,OBM_CHECK = 32760,OBM_CHECKBOXES = 32759,OBM_BTNCORNERS = 32758,OBM_OLD_REDUCE = 32757,OBM_OLD_ZOOM = 32756,OBM_OLD_RESTORE = 32755,};
enum MACRO_OCM {OCM__BASE = 0x2000,OCM_COMMAND = 0x2111,OCM_CTLCOLORBTN = 0x2135,OCM_CTLCOLOREDIT = 0x2133,OCM_CTLCOLORDLG = 0x2136,OCM_CTLCOLORLISTBOX = 0x2134,OCM_CTLCOLORMSGBOX = 0x2132,OCM_CTLCOLORSCROLLBAR = 0x2137,OCM_CTLCOLORSTATIC = 0x2138,OCM_DRAWITEM = 0x202B,OCM_MEASUREITEM = 0x202C,OCM_DELETEITEM = 0x202D,OCM_VKEYTOITEM = 0x202E,OCM_CHARTOITEM = 0x202F,OCM_COMPAREITEM = 0x2039,OCM_HSCROLL = 0x2114,OCM_VSCROLL = 0x2115,OCM_PARENTNOTIFY = 0x2210,OCM_NOTIFY = 0x204E,};
enum MACRO_OCR {OCR_NORMAL = 32512,OCR_IBEAM = 32513,OCR_WAIT = 32514,OCR_CROSS = 32515,OCR_UP = 32516,OCR_SIZE = 32640,OCR_ICON = 32641,OCR_SIZENWSE = 32642,OCR_SIZENESW = 32643,OCR_SIZEWE = 32644,OCR_SIZENS = 32645,OCR_SIZEALL = 32646,OCR_ICOCUR = 32647,OCR_NO = 32648,OCR_HAND = 32649,OCR_APPSTARTING = 32650,};
enum MACRO_ODA {ODA_DRAWENTIRE = 0x1,ODA_SELECT = 0x2,ODA_FOCUS = 0x4,};
enum MACRO_ODS {ODS_SELECTED = 0x1,ODS_GRAYED = 0x2,ODS_DISABLED = 0x4,ODS_CHECKED = 0x8,ODS_FOCUS = 0x10,ODS_DEFAULT = 0x20,ODS_COMBOBOXEDIT = 0x1000,ODS_HOTLIGHT = 0x40,ODS_INACTIVE = 0x80,ODS_NOACCEL = 0x100,ODS_NOFOCUSRECT = 0x200,};
enum MACRO_ODT {ODT_MENU = 1,ODT_LISTBOX = 2,ODT_COMBOBOX = 3,ODT_BUTTON = 4,ODT_STATIC = 5,};
enum MACRO_OEM {OEM_MODE_PUBLISHER = 0x1,};
enum MACRO_OFN {OFN_READONLY = 0x1,OFN_OVERWRITEPROMPT = 0x2,OFN_HIDEREADONLY = 0x4,OFN_NOCHANGEDIR = 0x8,OFN_SHOWHELP = 0x10,OFN_ENABLEHOOK = 0x20,OFN_ENABLETEMPLATE = 0x40,OFN_ENABLETEMPLATEHANDLE = 0x80,OFN_NOVALIDATE = 0x100,OFN_ALLOWMULTISELECT = 0x200,OFN_EXTENSIONDIFFERENT = 0x400,OFN_PATHMUSTEXIST = 0x800,OFN_FILEMUSTEXIST = 0x1000,OFN_CREATEPROMPT = 0x2000,OFN_SHAREAWARE = 0x4000,OFN_NOREADONLYRETURN = 0x8000,OFN_NOTESTFILECREATE = 0x10000,OFN_NONETWORKBUTTON = 0x20000,OFN_NOLONGNAMES = 0x40000,OFN_EXPLORER = 0x80000,OFN_NODEREFERENCELINKS = 0x100000,OFN_LONGNAMES = 0x200000,OFN_ENABLEINCLUDENOTIFY = 0x400000,OFN_ENABLESIZING = 0x800000,OFN_DONTADDTORECENT = 0x2000000,OFN_FORCESHOWHIDDEN = 0x10000000,OFN_EX_NOPLACESBAR = 0x1,OFN_SHAREFALLTHROUGH = 0x2,OFN_SHARENOWARN = 0x1,OFN_SHAREWARN = 0x0,};
enum MACRO_OFS {OFS_MAXPATHNAME = 128,};
enum MACRO_OIC {OIC_SAMPLE = 32512,OIC_HAND = 32513,OIC_QUES = 32514,OIC_BANG = 32515,OIC_NOTE = 32516,OIC_WINLOGO = 32517,OIC_WARNING = 32515,OIC_ERROR = 32513,OIC_INFORMATION = 32516,};
enum MACRO_OID {OID_GEN_SUPPORTED_LIST = 0x10101,OID_GEN_HARDWARE_STATUS = 0x10102,OID_GEN_MEDIA_SUPPORTED = 0x10103,OID_GEN_MEDIA_IN_USE = 0x10104,OID_GEN_MAXIMUM_LOOKAHEAD = 0x10105,OID_GEN_MAXIMUM_FRAME_SIZE = 0x10106,OID_GEN_LINK_SPEED = 0x10107,OID_GEN_TRANSMIT_BUFFER_SPACE = 0x10108,OID_GEN_RECEIVE_BUFFER_SPACE = 0x10109,OID_GEN_TRANSMIT_BLOCK_SIZE = 0x1010A,OID_GEN_RECEIVE_BLOCK_SIZE = 0x1010B,OID_GEN_VENDOR_ID = 0x1010C,OID_GEN_VENDOR_DESCRIPTION = 0x1010D,OID_GEN_CURRENT_PACKET_FILTER = 0x1010E,OID_GEN_CURRENT_LOOKAHEAD = 0x1010F,OID_GEN_DRIVER_VERSION = 0x10110,OID_GEN_MAXIMUM_TOTAL_SIZE = 0x10111,OID_GEN_PROTOCOL_OPTIONS = 0x10112,OID_GEN_MAC_OPTIONS = 0x10113,OID_GEN_MEDIA_CONNECT_STATUS = 0x10114,OID_GEN_MAXIMUM_SEND_PACKETS = 0x10115,OID_GEN_VENDOR_DRIVER_VERSION = 0x10116,OID_GEN_SUPPORTED_GUIDS = 0x10117,OID_GEN_NETWORK_LAYER_ADDRESSES = 0x10118,OID_GEN_TRANSPORT_HEADER_OFFSET = 0x10119,OID_GEN_MACHINE_NAME = 0x1021A,OID_GEN_RNDIS_CONFIG_PARAMETER = 0x1021B,OID_GEN_VLAN_ID = 0x1021C,OID_GEN_MEDIA_CAPABILITIES = 0x10201,OID_GEN_PHYSICAL_MEDIUM = 0x10202,OID_GEN_XMIT_OK = 0x20101,OID_GEN_RCV_OK = 0x20102,OID_GEN_XMIT_ERROR = 0x20103,OID_GEN_RCV_ERROR = 0x20104,OID_GEN_RCV_NO_BUFFER = 0x20105,OID_GEN_DIRECTED_BYTES_XMIT = 0x20201,OID_GEN_DIRECTED_FRAMES_XMIT = 0x20202,OID_GEN_MULTICAST_BYTES_XMIT = 0x20203,OID_GEN_MULTICAST_FRAMES_XMIT = 0x20204,OID_GEN_BROADCAST_BYTES_XMIT = 0x20205,OID_GEN_BROADCAST_FRAMES_XMIT = 0x20206,OID_GEN_DIRECTED_BYTES_RCV = 0x20207,OID_GEN_DIRECTED_FRAMES_RCV = 0x20208,OID_GEN_MULTICAST_BYTES_RCV = 0x20209,OID_GEN_MULTICAST_FRAMES_RCV = 0x2020A,OID_GEN_BROADCAST_BYTES_RCV = 0x2020B,OID_GEN_BROADCAST_FRAMES_RCV = 0x2020C,OID_GEN_RCV_CRC_ERROR = 0x2020D,OID_GEN_TRANSMIT_QUEUE_LENGTH = 0x2020E,OID_GEN_GET_TIME_CAPS = 0x2020F,OID_GEN_GET_NETCARD_TIME = 0x20210,OID_GEN_NETCARD_LOAD = 0x20211,OID_GEN_DEVICE_PROFILE = 0x20212,OID_GEN_INIT_TIME_MS = 0x20213,OID_GEN_RESET_COUNTS = 0x20214,OID_GEN_MEDIA_SENSE_COUNTS = 0x20215,OID_GEN_FRIENDLY_NAME = 0x20216,OID_GEN_MINIPORT_INFO = 0x20217,OID_GEN_RESET_VERIFY_PARAMETERS = 0x20218,OID_GEN_CO_SUPPORTED_LIST = 0x10101,OID_GEN_CO_HARDWARE_STATUS = 0x10102,OID_GEN_CO_MEDIA_SUPPORTED = 0x10103,OID_GEN_CO_MEDIA_IN_USE = 0x10104,OID_GEN_CO_LINK_SPEED = 0x10107,OID_GEN_CO_VENDOR_ID = 0x1010C,OID_GEN_CO_VENDOR_DESCRIPTION = 0x1010D,OID_GEN_CO_DRIVER_VERSION = 0x10110,OID_GEN_CO_PROTOCOL_OPTIONS = 0x10112,OID_GEN_CO_MAC_OPTIONS = 0x10113,OID_GEN_CO_MEDIA_CONNECT_STATUS = 0x10114,OID_GEN_CO_VENDOR_DRIVER_VERSION = 0x10116,OID_GEN_CO_SUPPORTED_GUIDS = 0x10117,OID_GEN_CO_GET_TIME_CAPS = 0x2020F,OID_GEN_CO_GET_NETCARD_TIME = 0x20210,OID_GEN_CO_MINIMUM_LINK_SPEED = 0x20120,OID_GEN_CO_XMIT_PDUS_OK = 0x20101,OID_GEN_CO_RCV_PDUS_OK = 0x20102,OID_GEN_CO_XMIT_PDUS_ERROR = 0x20103,OID_GEN_CO_RCV_PDUS_ERROR = 0x20104,OID_GEN_CO_RCV_PDUS_NO_BUFFER = 0x20105,OID_GEN_CO_RCV_CRC_ERROR = 0x2020D,OID_GEN_CO_TRANSMIT_QUEUE_LENGTH = 0x2020E,OID_GEN_CO_BYTES_XMIT = 0x20201,OID_GEN_CO_BYTES_RCV = 0x20207,OID_GEN_CO_NETCARD_LOAD = 0x20211,OID_GEN_CO_DEVICE_PROFILE = 0x20212,OID_GEN_CO_BYTES_XMIT_OUTSTANDING = 0x20221,OID_802_3_PERMANENT_ADDRESS = 0x1010101,OID_802_3_CURRENT_ADDRESS = 0x1010102,OID_802_3_MULTICAST_LIST = 0x1010103,OID_802_3_MAXIMUM_LIST_SIZE = 0x1010104,OID_802_3_MAC_OPTIONS = 0x1010105,};
enum MACRO_OLE {OLE_E_FIRST = 0x80040000,OLE_E_LAST = 0x800400FF,OLE_S_FIRST = 0x40000,OLE_S_LAST = 0x400FF,OLE_E_OLEVERB = 0x80040000,OLE_E_ADVF = 0x80040001,OLE_E_ENUM_NOMORE = 0x80040002,OLE_E_ADVISENOTSUPPORTED = 0x80040003,OLE_E_NOCONNECTION = 0x80040004,OLE_E_NOTRUNNING = 0x80040005,OLE_E_NOCACHE = 0x80040006,OLE_E_BLANK = 0x80040007,OLE_E_CLASSDIFF = 0x80040008,OLE_E_CANT_GETMONIKER = 0x80040009,OLE_E_CANT_BINDTOSOURCE = 0x8004000A,OLE_E_STATIC = 0x8004000B,OLE_E_PROMPTSAVECANCELLED = 0x8004000C,OLE_E_INVALIDRECT = 0x8004000D,OLE_E_WRONGCOMPOBJ = 0x8004000E,OLE_E_INVALIDHWND = 0x8004000F,OLE_E_NOT_INPLACEACTIVE = 0x80040010,OLE_E_CANTCONVERT = 0x80040011,OLE_E_NOSTORAGE = 0x80040012,};
enum MACRO_ORD {ORD_LANGDRIVER = 1,};
enum MACRO_OSS {OSS_MORE_BUF = 0x80093001,OSS_NEGATIVE_UINTEGER = 0x80093002,OSS_PDU_RANGE = 0x80093003,OSS_MORE_INPUT = 0x80093004,OSS_DATA_ERROR = 0x80093005,OSS_BAD_ARG = 0x80093006,OSS_BAD_VERSION = 0x80093007,OSS_OUT_MEMORY = 0x80093008,OSS_PDU_MISMATCH = 0x80093009,OSS_LIMITED = 0x8009300A,OSS_BAD_PTR = 0x8009300B,OSS_BAD_TIME = 0x8009300C,OSS_INDEFINITE_NOT_SUPPORTED = 0x8009300D,OSS_MEM_ERROR = 0x8009300E,OSS_BAD_TABLE = 0x8009300F,OSS_TOO_LONG = 0x80093010,OSS_CONSTRAINT_VIOLATED = 0x80093011,OSS_FATAL_ERROR = 0x80093012,OSS_ACCESS_SERIALIZATION_ERROR = 0x80093013,OSS_NULL_TBL = 0x80093014,OSS_NULL_FCN = 0x80093015,OSS_BAD_ENCRULES = 0x80093016,OSS_UNAVAIL_ENCRULES = 0x80093017,OSS_CANT_OPEN_TRACE_WINDOW = 0x80093018,OSS_UNIMPLEMENTED = 0x80093019,OSS_OID_DLL_NOT_LINKED = 0x8009301A,OSS_CANT_OPEN_TRACE_FILE = 0x8009301B,OSS_TRACE_FILE_ALREADY_OPEN = 0x8009301C,OSS_TABLE_MISMATCH = 0x8009301D,OSS_TYPE_NOT_SUPPORTED = 0x8009301E,OSS_REAL_DLL_NOT_LINKED = 0x8009301F,OSS_REAL_CODE_NOT_LINKED = 0x80093020,OSS_OUT_OF_RANGE = 0x80093021,OSS_COPIER_DLL_NOT_LINKED = 0x80093022,OSS_CONSTRAINT_DLL_NOT_LINKED = 0x80093023,OSS_COMPARATOR_DLL_NOT_LINKED = 0x80093024,OSS_COMPARATOR_CODE_NOT_LINKED = 0x80093025,OSS_MEM_MGR_DLL_NOT_LINKED = 0x80093026,OSS_PDV_DLL_NOT_LINKED = 0x80093027,OSS_PDV_CODE_NOT_LINKED = 0x80093028,OSS_API_DLL_NOT_LINKED = 0x80093029,OSS_BERDER_DLL_NOT_LINKED = 0x8009302A,OSS_PER_DLL_NOT_LINKED = 0x8009302B,OSS_OPEN_TYPE_ERROR = 0x8009302C,OSS_MUTEX_NOT_CREATED = 0x8009302D,OSS_CANT_CLOSE_TRACE_FILE = 0x8009302E,};
enum MACRO_OTS {OTS_LBCB_SORT = 0x1,OTS_LBCB_PROPPAGE_LBUSECB = 0x2,OTS_LBCB_PROPPAGE_CBUSELB = 0x4,OTS_LBCB_INCL_ITEM_NONE = 0x8,OTS_LBCB_NO_ICON16_IN_ITEM = 0x10,OTS_PUSH_INCL_SETUP_TITLE = 0x20,OTS_PUSH_NO_DOT_DOT_DOT = 0x40,OTS_PUSH_ENABLE_ALWAYS = 0x80,};
enum MACRO_OUT {OUT_DEFAULT_PRECIS = 0,OUT_STRING_PRECIS = 1,OUT_CHARACTER_PRECIS = 2,OUT_STROKE_PRECIS = 3,OUT_TT_PRECIS = 4,OUT_DEVICE_PRECIS = 5,OUT_RASTER_PRECIS = 6,OUT_TT_ONLY_PRECIS = 7,OUT_OUTLINE_PRECIS = 8,OUT_SCREEN_OUTLINE_PRECIS = 9,OUT_PS_ONLY_PRECIS = 10,};
enum MACRO_PAL {PAL_INDEXED = 0x1,PAL_BITFIELDS = 0x2,PAL_RGB = 0x4,PAL_BGR = 0x8,PAL_CMYK = 0x10,};
enum MACRO_PAN {PAN_FAMILYTYPE_INDEX = 0,PAN_SERIFSTYLE_INDEX = 1,PAN_WEIGHT_INDEX = 2,PAN_PROPORTION_INDEX = 3,PAN_CONTRAST_INDEX = 4,PAN_STROKEVARIATION_INDEX = 5,PAN_ARMSTYLE_INDEX = 6,PAN_LETTERFORM_INDEX = 7,PAN_MIDLINE_INDEX = 8,PAN_XHEIGHT_INDEX = 9,PAN_CULTURE_LATIN = 0,PAN_ANY = 0,PAN_NO_FIT = 1,PAN_FAMILY_TEXT_DISPLAY = 2,PAN_FAMILY_SCRIPT = 3,PAN_FAMILY_DECORATIVE = 4,PAN_FAMILY_PICTORIAL = 5,PAN_SERIF_COVE = 2,PAN_SERIF_OBTUSE_COVE = 3,PAN_SERIF_SQUARE_COVE = 4,PAN_SERIF_OBTUSE_SQUARE_COVE = 5,PAN_SERIF_SQUARE = 6,PAN_SERIF_THIN = 7,PAN_SERIF_BONE = 8,PAN_SERIF_EXAGGERATED = 9,PAN_SERIF_TRIANGLE = 10,PAN_SERIF_NORMAL_SANS = 11,PAN_SERIF_OBTUSE_SANS = 12,PAN_SERIF_PERP_SANS = 13,PAN_SERIF_FLARED = 14,PAN_SERIF_ROUNDED = 15,PAN_WEIGHT_VERY_LIGHT = 2,PAN_WEIGHT_LIGHT = 3,PAN_WEIGHT_THIN = 4,PAN_WEIGHT_BOOK = 5,PAN_WEIGHT_MEDIUM = 6,PAN_WEIGHT_DEMI = 7,PAN_WEIGHT_BOLD = 8,PAN_WEIGHT_HEAVY = 9,PAN_WEIGHT_BLACK = 10,PAN_WEIGHT_NORD = 11,PAN_PROP_OLD_STYLE = 2,PAN_PROP_MODERN = 3,PAN_PROP_EVEN_WIDTH = 4,PAN_PROP_EXPANDED = 5,PAN_PROP_CONDENSED = 6,PAN_PROP_VERY_EXPANDED = 7,PAN_PROP_VERY_CONDENSED = 8,PAN_PROP_MONOSPACED = 9,PAN_CONTRAST_NONE = 2,PAN_CONTRAST_VERY_LOW = 3,PAN_CONTRAST_LOW = 4,PAN_CONTRAST_MEDIUM_LOW = 5,PAN_CONTRAST_MEDIUM = 6,PAN_CONTRAST_MEDIUM_HIGH = 7,PAN_CONTRAST_HIGH = 8,PAN_CONTRAST_VERY_HIGH = 9,PAN_STROKE_GRADUAL_DIAG = 2,PAN_STROKE_GRADUAL_TRAN = 3,PAN_STROKE_GRADUAL_VERT = 4,PAN_STROKE_GRADUAL_HORZ = 5,PAN_STROKE_RAPID_VERT = 6,PAN_STROKE_RAPID_HORZ = 7,PAN_STROKE_INSTANT_VERT = 8,PAN_STRAIGHT_ARMS_HORZ = 2,PAN_STRAIGHT_ARMS_WEDGE = 3,PAN_STRAIGHT_ARMS_VERT = 4,PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5,PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6,PAN_BENT_ARMS_HORZ = 7,PAN_BENT_ARMS_WEDGE = 8,PAN_BENT_ARMS_VERT = 9,PAN_BENT_ARMS_SINGLE_SERIF = 10,PAN_BENT_ARMS_DOUBLE_SERIF = 11,PAN_LETT_NORMAL_CONTACT = 2,PAN_LETT_NORMAL_WEIGHTED = 3,PAN_LETT_NORMAL_BOXED = 4,PAN_LETT_NORMAL_FLATTENED = 5,PAN_LETT_NORMAL_ROUNDED = 6,PAN_LETT_NORMAL_OFF_CENTER = 7,PAN_LETT_NORMAL_SQUARE = 8,PAN_LETT_OBLIQUE_CONTACT = 9,PAN_LETT_OBLIQUE_WEIGHTED = 10,PAN_LETT_OBLIQUE_BOXED = 11,PAN_LETT_OBLIQUE_FLATTENED = 12,PAN_LETT_OBLIQUE_ROUNDED = 13,PAN_LETT_OBLIQUE_OFF_CENTER = 14,PAN_LETT_OBLIQUE_SQUARE = 15,PAN_MIDLINE_STANDARD_TRIMMED = 2,PAN_MIDLINE_STANDARD_POINTED = 3,PAN_MIDLINE_STANDARD_SERIFED = 4,PAN_MIDLINE_HIGH_TRIMMED = 5,PAN_MIDLINE_HIGH_POINTED = 6,PAN_MIDLINE_HIGH_SERIFED = 7,PAN_MIDLINE_CONSTANT_TRIMMED = 8,PAN_MIDLINE_CONSTANT_POINTED = 9,PAN_MIDLINE_CONSTANT_SERIFED = 10,PAN_MIDLINE_LOW_TRIMMED = 11,PAN_MIDLINE_LOW_POINTED = 12,PAN_MIDLINE_LOW_SERIFED = 13,PAN_XHEIGHT_CONSTANT_SMALL = 2,PAN_XHEIGHT_CONSTANT_STD = 3,PAN_XHEIGHT_CONSTANT_LARGE = 4,PAN_XHEIGHT_DUCKING_SMALL = 5,PAN_XHEIGHT_DUCKING_STD = 6,PAN_XHEIGHT_DUCKING_LARGE = 7,};
enum MACRO_PBM {PBM_SETRANGE = 1025,PBM_SETPOS = 1026,PBM_DELTAPOS = 1027,PBM_SETSTEP = 1028,PBM_STEPIT = 1029,PBM_SETRANGE32 = 1030,PBM_GETRANGE = 1031,PBM_GETPOS = 1032,PBM_SETBARCOLOR = 1033,PBM_SETBKCOLOR = 8193,};
enum MACRO_PBS {PBS_SMOOTH = 0x1,PBS_VERTICAL = 0x4,};
enum MACRO_PBT {PBT_APMQUERYSUSPEND = 0x0,PBT_APMQUERYSTANDBY = 0x1,PBT_APMQUERYSUSPENDFAILED = 0x2,PBT_APMQUERYSTANDBYFAILED = 0x3,PBT_APMSUSPEND = 0x4,PBT_APMSTANDBY = 0x5,PBT_APMRESUMECRITICAL = 0x6,PBT_APMRESUMESUSPEND = 0x7,PBT_APMRESUMESTANDBY = 0x8,};
enum MACRO_PCF {PCF_DTRDSR = 0x1,PCF_RTSCTS = 0x2,PCF_RLSD = 0x4,PCF_PARITY_CHECK = 0x8,PCF_XONXOFF = 0x10,PCF_SETXCHAR = 0x20,PCF_TOTALTIMEOUTS = 0x40,PCF_INTTIMEOUTS = 0x80,PCF_SPECIALCHARS = 0x100,PCF_16BITMODE = 0x200,};
enum MACRO_PCI {PCI_BUS_DRIVER_INTERNAL = 0xA1,};
enum MACRO_PCS {PCS_FATAL = 0x80000000,PCS_REPLACEDCHAR = 0x1,PCS_REMOVEDCHAR = 0x2,PCS_TRUNCATED = 0x4,PCS_PATHTOOLONG = 0x8,};
enum MACRO_PEN {WHITE_PEN = 6,BLACK_PEN = 7,NULL_PEN = 8,};
enum MACRO_PFD {PFD_TYPE_RGBA = 0,PFD_TYPE_COLORINDEX = 1,PFD_MAIN_PLANE = 0,PFD_OVERLAY_PLANE = 1,PFD_UNDERLAY_PLANE = -1,PFD_DOUBLEBUFFER = 1,PFD_STEREO = 2,PFD_DRAW_TO_WINDOW = 4,PFD_DRAW_TO_BITMAP = 8,PFD_SUPPORT_GDI = 16,PFD_SUPPORT_OPENGL = 32,PFD_GENERIC_FORMAT = 64,PFD_NEED_PALETTE = 128,PFD_NEED_SYSTEM_PALETTE = 256,PFD_SWAP_EXCHANGE = 512,PFD_SWAP_COPY = 1024,PFD_SWAP_LAYER_BUFFERS = 2048,PFD_GENERIC_ACCELERATED = 4096,PFD_SUPPORT_DIRECTDRAW = 8192,PFD_DEPTH_DONTCARE = 536870912,PFD_DOUBLEBUFFER_DONTCARE = 1073741824,PFD_STEREO_DONTCARE = -2147483648,};
enum MACRO_PFL {PFL_MULTIPLE_PROTO_ENTRIES = 0x1,PFL_RECOMMENDED_PROTO_ENTRY = 0x2,PFL_HIDDEN = 0x4,PFL_MATCHES_PROTOCOL_ZERO = 0x8,};
enum MACRO_PFN {PFN_SHARE_COUNT = 0x1B,PFN_REFERENCE_COUNT = 0x1C,};
enum MACRO_PGB {PGB_TOPORLEFT = 0,PGB_BOTTOMORRIGHT = 1,};
enum MACRO_PGF {PGF_INVISIBLE = 0,PGF_NORMAL = 1,PGF_GRAYED = 2,PGF_DEPRESSED = 4,PGF_HOT = 8,};
enum MACRO_PGK {PGK_SHIFT = 1,PGK_CONTROL = 2,PGK_MENU = 4,};
enum MACRO_PGM {PGM_SETCHILD = 5121,PGM_RECALCSIZE = 5122,PGM_FORWARDMOUSE = 5123,PGM_SETBKCOLOR = 5124,PGM_GETBKCOLOR = 5125,PGM_SETBORDER = 5126,PGM_GETBORDER = 5127,PGM_SETPOS = 5128,PGM_GETPOS = 5129,PGM_SETBUTTONSIZE = 5130,PGM_GETBUTTONSIZE = 5131,PGM_GETBUTTONSTATE = 5132,PGM_GETDROPTARGET = 8196,};
enum MACRO_PGN {PGN_FIRST = -900,PGN_LAST = -950,};
enum MACRO_PGS {PGS_VERT = 0x0,PGS_HORZ = 0x1,PGS_AUTOSCROLL = 0x2,PGS_DRAGNDROP = 0x4,};
enum MACRO_PID {PID_DICTIONARY = 0,PID_CODEPAGE = 1,PID_FIRST_USABLE = 2,PID_FIRST_NAME_DEFAULT = 4095,PID_LOCALE = -2147483648,PID_MODIFY_TIME = -2147483647,PID_SECURITY = -2147483646,PID_BEHAVIOR = -2147483645,PID_ILLEGAL = -1,PID_MIN_READONLY = -2147483648,PID_MAX_READONLY = -1073741825,};
enum MACRO_PIR {PIR_OPTION_ENABLED = 0x1,PIR_OPTION_REGISTRY = 0x2,PIR_OPTION_MSSPEC = 0x4,PIR_OPTION_REALMODE = 0x8,PIR_OPTION_DEFAULT = 0xF,PIR_STATUS_ERROR = 0x0,PIR_STATUS_ENABLED = 0x1,PIR_STATUS_DISABLED = 0x2,PIR_STATUS_MAX = 0x3,PIR_STATUS_TABLE_REGISTRY = 0x0,PIR_STATUS_TABLE_MSSPEC = 0x1,PIR_STATUS_TABLE_REALMODE = 0x2,PIR_STATUS_TABLE_NONE = 0x3,PIR_STATUS_TABLE_ERROR = 0x4,PIR_STATUS_TABLE_BAD = 0x5,PIR_STATUS_TABLE_SUCCESS = 0x6,PIR_STATUS_TABLE_MAX = 0x7,PIR_STATUS_MINIPORT_NORMAL = 0x0,PIR_STATUS_MINIPORT_COMPATIBLE = 0x1,PIR_STATUS_MINIPORT_OVERRIDE = 0x2,PIR_STATUS_MINIPORT_NONE = 0x3,PIR_STATUS_MINIPORT_ERROR = 0x4,PIR_STATUS_MINIPORT_NOKEY = 0x5,PIR_STATUS_MINIPORT_SUCCESS = 0x6,PIR_STATUS_MINIPORT_INVALID = 0x7,PIR_STATUS_MINIPORT_MAX = 0x8,};
enum MACRO_PMB {PMB_ACTIVE = 0x1,};
enum MACRO_PNP {PNP_INTERNAL_ERROR = 0x95,};
enum MACRO_PP0 {PP0_INITIALIZATION_FAILED = 0x8F,PP1_INITIALIZATION_FAILED = 0x90,};
enum MACRO_PPC {PPC_DEFAULT = 0x0,PPC_UNDEFINED = 0x1,PPC_RGB_ORDER_VERTICAL_STRIPES = 0x2,PPC_BGR_ORDER_VERTICAL_STRIPES = 0x3,PPC_RGB_ORDER_HORIZONTAL_STRIPES = 0x4,PPC_BGR_ORDER_HORIZONTAL_STRIPES = 0x5,};
enum MACRO_PPG {PPG_DEFAULT = 0,PPG_SRGB = 1,};
enum MACRO_PPW {PPW_LAUNCHEDBYUSER = 0x1,};
enum MACRO_PRF {PRF_CHECKVISIBLE = 0x1,PRF_NONCLIENT = 0x2,PRF_CLIENT = 0x4,PRF_ERASEBKGND = 0x8,PRF_CHILDREN = 0x10,PRF_OWNED = 0x20,};
enum MACRO_PSD {PSD_DEFAULTMINMARGINS = 0x0,PSD_INWININIINTLMEASURE = 0x0,PSD_MINMARGINS = 0x1,PSD_MARGINS = 0x2,PSD_INTHOUSANDTHSOFINCHES = 0x4,PSD_INHUNDREDTHSOFMILLIMETERS = 0x8,PSD_DISABLEMARGINS = 0x10,PSD_DISABLEPRINTER = 0x20,PSD_NOWARNING = 0x80,PSD_DISABLEORIENTATION = 0x100,PSD_RETURNDEFAULT = 0x400,PSD_DISABLEPAPER = 0x200,PSD_SHOWHELP = 0x800,PSD_ENABLEPAGESETUPHOOK = 0x2000,PSD_ENABLEPAGESETUPTEMPLATE = 0x8000,PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 0x20000,PSD_ENABLEPAGEPAINTHOOK = 0x40000,PSD_DISABLEPAGEPAINTING = 0x80000,PSD_NONETWORKBUTTON = 0x200000,};
enum MACRO_PSH {PSH_DEFAULT = 0x0,PSH_PROPTITLE = 0x1,PSH_USEHICON = 0x2,PSH_USEICONID = 0x4,PSH_PROPSHEETPAGE = 0x8,PSH_WIZARDHASFINISH = 0x10,PSH_WIZARD = 0x20,PSH_USEPSTARTPAGE = 0x40,PSH_NOAPPLYNOW = 0x80,PSH_USECALLBACK = 0x100,PSH_HASHELP = 0x200,PSH_MODELESS = 0x400,PSH_RTLREADING = 0x800,PSH_WIZARDCONTEXTHELP = 0x1000,PSH_WIZARD97 = 0x1000000,PSH_WATERMARK = 0x8000,PSH_USEHBMWATERMARK = 0x10000,PSH_USEHPLWATERMARK = 0x20000,PSH_STRETCHWATERMARK = 0x40000,PSH_HEADER = 0x80000,PSH_USEHBMHEADER = 0x100000,PSH_USEPAGELANG = 0x200000,PSH_WIZARD_LITE = 0x400000,PSH_NOCONTEXTHELP = 0x2000000,};
enum MACRO_PSM {PSM_SETCURSEL = 1125,PSM_REMOVEPAGE = 1126,PSM_ADDPAGE = 1127,PSM_CHANGED = 1128,PSM_RESTARTWINDOWS = 1129,PSM_REBOOTSYSTEM = 1130,PSM_CANCELTOCLOSE = 1131,PSM_QUERYSIBLINGS = 1132,PSM_UNCHANGED = 1133,PSM_APPLY = 1134,PSM_SETTITLEA = 1135,PSM_SETTITLEW = 1144,PSM_SETTITLE = 1135,PSM_SETWIZBUTTONS = 1136,};
enum MACRO_PSN {PSN_FIRST = -200,PSN_LAST = -299,PSN_SETACTIVE = -200,PSN_KILLACTIVE = -201,PSN_APPLY = -202,PSN_RESET = -203,PSN_HELP = -205,PSN_WIZBACK = -206,PSN_WIZNEXT = -207,PSN_WIZFINISH = -208,PSN_QUERYCANCEL = -209,PSN_GETOBJECT = -210,PSN_TRANSLATEACCELERATOR = -212,PSN_QUERYINITIALFOCUS = -213,};
enum MACRO_PSP {PSP_DEFAULT = 0x0,PSP_DLGINDIRECT = 0x1,PSP_USEHICON = 0x2,PSP_USEICONID = 0x4,PSP_USETITLE = 0x8,PSP_RTLREADING = 0x10,PSP_HASHELP = 0x20,PSP_USEREFPARENT = 0x40,PSP_USECALLBACK = 0x80,PSP_PREMATURE = 0x400,PSP_HIDEHEADER = 0x800,PSP_USEHEADERTITLE = 0x1000,PSP_USEHEADERSUBTITLE = 0x2000,PSP_USEFUSIONCONTEXT = 0x4000,};
enum MACRO_PSS {PSS_MESSAGE_INTRO = 0x40000081,};
enum MACRO_PST {PST_UNSPECIFIED = 0x0,PST_RS232 = 0x1,PST_PARALLELPORT = 0x2,PST_RS422 = 0x3,PST_RS423 = 0x4,PST_RS449 = 0x5,PST_MODEM = 0x6,PST_FAX = 0x21,PST_SCANNER = 0x22,PST_NETWORK_BRIDGE = 0x100,PST_LAT = 0x101,PST_TCPIP_TELNET = 0x102,PST_X25 = 0x103,};
enum MACRO_PTR {MAXUINT_PTR = -1,MAXINT_PTR = -1,MININT_PTR = 0,MAXULONG_PTR = -1,MAXLONG_PTR = -1,MINLONG_PTR = 0,MAXUHALF_PTR = 65535,MAXHALF_PTR = 32767,MINHALF_PTR = -32768,};
enum MACRO_PVD {PVD_CONFIG = 0x3001,};
enum MACRO_PWR {PWR_OK = 1,PWR_FAIL = -1,PWR_SUSPENDREQUEST = 1,PWR_SUSPENDRESUME = 2,PWR_CRITICALRESUME = 3,};
enum MACRO_QAW {QAW_GETWIDTHS = 0,QAW_GETEASYWIDTHS = 1,};
enum MACRO_QCP {QCP_DEVICEPROFILE = 0x0,QCP_SOURCEPROFILE = 0x1,QCP_PROFILEMEMORY = 0x1,QCP_PROFILEDISK = 0x2,};
enum MACRO_QDI {QDI_SETDIBITS = 1,QDI_GETDIBITS = 2,QDI_DIBTOSCREEN = 4,QDI_STRETCHDIB = 8,};
enum MACRO_QDS {QDS_CHECKJPEGFORMAT = 0,QDS_CHECKPNGFORMAT = 1,};
enum MACRO_QFD {QFD_GLYPHANDBITMAP = 1,QFD_GLYPHANDOUTLINE = 2,QFD_MAXEXTENTS = 3,QFD_TT_GLYPHANDBITMAP = 4,QFD_TT_GRAY1_BITMAP = 5,QFD_TT_GRAY2_BITMAP = 6,QFD_TT_GRAY4_BITMAP = 8,QFD_TT_GRAY8_BITMAP = 9,QFD_TT_MONO_BITMAP = 5,};
enum MACRO_QFF {QFF_DESCRIPTION = 1,QFF_NUMFACES = 2,};
enum MACRO_QFT {QFT_LIGATURES = 1,QFT_KERNPAIRS = 2,QFT_GLYPHSET = 3,};
enum MACRO_QID {QID_SYNC = 0xFFFFFFFF,};
enum MACRO_QIF {QIF_CACHED = 0x1,QIF_DONTEXPANDFOLDER = 0x2,};
enum MACRO_QOS {QOS_NOT_SPECIFIED = 0xFFFFFFFF,};
enum MACRO_QSA {QSA_MMX = 0x100,QSA_SSE = 0x2000,QSA_3DNOW = 0x4000,};
enum MACRO_RAS {RAS_FLAGS_PPP_CONNECTION = 0x1,RAS_FLAGS_MESSENGER_PRESENT = 0x2,RAS_FLAGS_RAS_CONNECTION = 0x4,RAS_FLAGS_ARAP_CONNECTION = 0x8,};
enum MACRO_RBN {RBN_FIRST = -831,RBN_LAST = -859,};
enum MACRO_RBS {RBS_TOOLTIPS = 0x100,RBS_VARHEIGHT = 0x200,RBS_BANDBORDERS = 0x400,RBS_FIXEDORDER = 0x800,RBS_REGISTERDROP = 0x1000,RBS_AUTOSIZE = 0x2000,RBS_VERTICALGRIPPER = 0x4000,RBS_DBLCLKTOGGLE = 0x8000,};
enum MACRO_RCD {RCD_SingleUser = 0,RCD_AllUsers = 1,RCD_Eap = 2,RCD_Logon = 4,};
enum MACRO_RDH {RDH_RECTANGLES = 1,};
enum MACRO_RDW {RDW_INVALIDATE = 0x1,RDW_INTERNALPAINT = 0x2,RDW_ERASE = 0x4,RDW_VALIDATE = 0x8,RDW_NOINTERNALPAINT = 0x10,RDW_NOERASE = 0x20,RDW_NOCHILDREN = 0x40,RDW_ALLCHILDREN = 0x80,RDW_UPDATENOW = 0x100,RDW_ERASENOW = 0x200,RDW_FRAME = 0x400,RDW_NOFRAME = 0x800,};
enum MACRO_REG {REG_OPTION_RESERVED = 0x0,REG_OPTION_NON_VOLATILE = 0x0,REG_OPTION_VOLATILE = 0x1,REG_OPTION_CREATE_LINK = 0x2,REG_OPTION_BACKUP_RESTORE = 0x4,REG_OPTION_OPEN_LINK = 0x8,REG_LEGAL_OPTION = 0xF,REG_CREATED_NEW_KEY = 0x1,REG_OPENED_EXISTING_KEY = 0x2,REG_STANDARD_FORMAT = 0x1,REG_LATEST_FORMAT = 0x2,REG_NO_COMPRESSION = 0x4,REG_WHOLE_HIVE_VOLATILE = 0x1,REG_REFRESH_HIVE = 0x2,REG_NO_LAZY_FLUSH = 0x4,REG_FORCE_RESTORE = 0x8,REG_FORCE_UNLOAD = 0x1,REG_NOTIFY_CHANGE_NAME = 0x1,REG_NOTIFY_CHANGE_ATTRIBUTES = 0x2,REG_NOTIFY_CHANGE_LAST_SET = 0x4,REG_NOTIFY_CHANGE_SECURITY = 0x8,REG_LEGAL_CHANGE_FILTER = 0xF,REG_NONE = 0x0,REG_SZ = 0x1,REG_EXPAND_SZ = 0x2,REG_BINARY = 0x3,REG_DWORD = 0x4,REG_DWORD_LITTLE_ENDIAN = 0x4,REG_DWORD_BIG_ENDIAN = 0x5,REG_LINK = 0x6,REG_MULTI_SZ = 0x7,REG_RESOURCE_LIST = 0x8,REG_FULL_RESOURCE_DESCRIPTOR = 0x9,REG_RESOURCE_REQUIREMENTS_LIST = 0xA,REG_QWORD = 0xB,REG_QWORD_LITTLE_ENDIAN = 0xB,};
enum MACRO_REN {REN_User = 0x0,REN_AllUsers = 0x1,};
enum MACRO_RES {RES_ICON = 1,RES_CURSOR = 2,};
enum MACRO_RGB {RGB_GAMMA_MIN = 0x540,RGB_GAMMA_MAX = 0xFDE8,};
enum MACRO_RGN {RGN_ERROR = 0,RGN_AND = 1,RGN_OR = 2,RGN_XOR = 3,RGN_DIFF = 4,RGN_COPY = 5,RGN_MIN = 1,RGN_MAX = 5,};
enum MACRO_RID {RID_INPUT = 0x10000003,RID_HEADER = 0x10000005,};
enum MACRO_RIM {RIM_INPUT = 0,RIM_INPUTSINK = 1,RIM_TYPEMOUSE = 0,RIM_TYPEKEYBOARD = 1,RIM_TYPEHID = 2,};
enum MACRO_ROP {ROP_HAS_SOURCE = 0x1,ROP_HAS_PATTERN = 0x2,ROP_HAS_SOURCEPATTERN = 0x3,};
enum MACRO_ROT {ROT_COMPARE_MAX = 2048,};
enum MACRO_RPC {RPC_E_CALL_REJECTED = 0x80010001,RPC_E_CALL_CANCELED = 0x80010002,RPC_E_CANTPOST_INSENDCALL = 0x80010003,RPC_E_CANTCALLOUT_INASYNCCALL = 0x80010004,RPC_E_CANTCALLOUT_INEXTERNALCALL = 0x80010005,RPC_E_CONNECTION_TERMINATED = 0x80010006,RPC_E_SERVER_DIED = 0x80010007,RPC_E_CLIENT_DIED = 0x80010008,RPC_E_INVALID_DATAPACKET = 0x80010009,RPC_E_CANTTRANSMIT_CALL = 0x8001000A,RPC_E_CLIENT_CANTMARSHAL_DATA = 0x8001000B,RPC_E_CLIENT_CANTUNMARSHAL_DATA = 0x8001000C,RPC_E_SERVER_CANTMARSHAL_DATA = 0x8001000D,RPC_E_SERVER_CANTUNMARSHAL_DATA = 0x8001000E,RPC_E_INVALID_DATA = 0x8001000F,RPC_E_INVALID_PARAMETER = 0x80010010,RPC_E_CANTCALLOUT_AGAIN = 0x80010011,RPC_E_SERVER_DIED_DNE = 0x80010012,RPC_E_SYS_CALL_FAILED = 0x80010100,RPC_E_OUT_OF_RESOURCES = 0x80010101,RPC_E_ATTEMPTED_MULTITHREAD = 0x80010102,RPC_E_NOT_REGISTERED = 0x80010103,RPC_E_FAULT = 0x80010104,RPC_E_SERVERFAULT = 0x80010105,RPC_E_CHANGED_MODE = 0x80010106,RPC_E_INVALIDMETHOD = 0x80010107,RPC_E_DISCONNECTED = 0x80010108,RPC_E_RETRY = 0x80010109,RPC_E_SERVERCALL_RETRYLATER = 0x8001010A,RPC_E_SERVERCALL_REJECTED = 0x8001010B,RPC_E_INVALID_CALLDATA = 0x8001010C,RPC_E_CANTCALLOUT_ININPUTSYNCCALL = 0x8001010D,RPC_E_WRONG_THREAD = 0x8001010E,RPC_E_THREAD_NOT_INIT = 0x8001010F,RPC_E_VERSION_MISMATCH = 0x80010110,RPC_E_INVALID_HEADER = 0x80010111,RPC_E_INVALID_EXTENSION = 0x80010112,RPC_E_INVALID_IPID = 0x80010113,RPC_E_INVALID_OBJECT = 0x80010114,RPC_S_CALLPENDING = 0x80010115,RPC_S_WAITONTIMER = 0x80010116,RPC_E_CALL_COMPLETE = 0x80010117,RPC_E_UNSECURE_CALL = 0x80010118,RPC_E_TOO_LATE = 0x80010119,RPC_E_NO_GOOD_SECURITY_PACKAGES = 0x8001011A,RPC_E_ACCESS_DENIED = 0x8001011B,RPC_E_REMOTE_DISABLED = 0x8001011C,RPC_E_INVALID_OBJREF = 0x8001011D,RPC_E_NO_CONTEXT = 0x8001011E,RPC_E_TIMEOUT = 0x8001011F,RPC_E_NO_SYNC = 0x80010120,RPC_E_FULLSIC_REQUIRED = 0x80010121,RPC_E_INVALID_STD_NAME = 0x80010122,};
enum MACRO_RSA {RSA_CSP_PUBLICKEYBLOB = 19,};
enum MACRO_RTL {RTL_CRITSECT_TYPE = 0,RTL_RESOURCE_TYPE = 1,RTL_VRF_FLG_FULL_PAGE_HEAP = 1,RTL_VRF_FLG_RESERVED_DONOTUSE = 2,RTL_VRF_FLG_HANDLE_CHECKS = 4,RTL_VRF_FLG_STACK_CHECKS = 8,RTL_VRF_FLG_APPCOMPAT_CHECKS = 16,RTL_VRF_FLG_TLS_CHECKS = 32,RTL_VRF_FLG_DIRTY_STACKS = 64,RTL_VRF_FLG_RPC_CHECKS = 128,RTL_VRF_FLG_COM_CHECKS = 256,RTL_VRF_FLG_DANGEROUS_APIS = 512,RTL_VRF_FLG_RACE_CHECKS = 1024,RTL_VRF_FLG_DEADLOCK_CHECKS = 2048,RTL_VRF_FLG_FIRST_CHANCE_EXCEPTION_CHECKS = 4096,RTL_VRF_FLG_VIRTUAL_MEM_CHECKS = 8192,RTL_VRF_FLG_ENABLE_LOGGING = 16384,RTL_VRF_FLG_FAST_FILL_HEAP = 32768,RTL_VRF_FLG_VIRTUAL_SPACE_TRACKING = 65536,RTL_VRF_FLG_ENABLED_SYSTEM_WIDE = 131072,RTL_VRF_FLG_MISCELLANEOUS_CHECKS = 131072,RTL_VRF_FLG_LOCK_CHECKS = 262144,};
enum MACRO_RTS {RTS_CONTROL_DISABLE = 0x0,RTS_CONTROL_ENABLE = 0x1,RTS_CONTROL_HANDSHAKE = 0x2,RTS_CONTROL_TOGGLE = 0x3,};
enum MACRO_SBM {SBM_SETPOS = 0xE0,SBM_GETPOS = 0xE1,SBM_SETRANGE = 0xE2,SBM_SETRANGEREDRAW = 0xE6,SBM_GETRANGE = 0xE3,SBM_ENABLE_ARROWS = 0xE4,SBM_SETSCROLLINFO = 0xE9,SBM_GETSCROLLINFO = 0xEA,SBM_GETSCROLLBARINFO = 0xEB,};
enum MACRO_SBN {SBN_FIRST = -880,SBN_LAST = -899,};
enum MACRO_SBS {SBS_HORZ = 0x0,SBS_VERT = 0x1,SBS_TOPALIGN = 0x2,SBS_LEFTALIGN = 0x2,SBS_BOTTOMALIGN = 0x4,SBS_RIGHTALIGN = 0x4,SBS_SIZEBOXTOPLEFTALIGN = 0x2,SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x4,SBS_SIZEBOX = 0x8,SBS_SIZEGRIP = 0x10,};
enum MACRO_SBT {SBT_TOOLTIPS = 0x800,};
enum MACRO_SCS {SCS_32BIT_BINARY = 0,SCS_DOS_BINARY = 1,SCS_WOW_BINARY = 2,SCS_PIF_BINARY = 3,SCS_POSIX_BINARY = 4,SCS_OS216_BINARY = 5,SCS_64BIT_BINARY = 6,SCS_THIS_PLATFORM_BINARY = 0,};
enum MACRO_SEC {SEC_FILE = 0x800000,SEC_IMAGE = 0x1000000,SEC_RESERVE = 0x4000000,SEC_COMMIT = 0x8000000,SEC_NOCACHE = 0x10000000,};
enum MACRO_SEE {SEE_MASK_CLASSNAME = 0x1,SEE_MASK_CLASSKEY = 0x3,SEE_MASK_IDLIST = 0x4,SEE_MASK_INVOKEIDLIST = 0xC,SEE_MASK_ICON = 0x10,SEE_MASK_HOTKEY = 0x20,SEE_MASK_NOCLOSEPROCESS = 0x40,SEE_MASK_CONNECTNETDRV = 0x80,SEE_MASK_FLAG_DDEWAIT = 0x100,SEE_MASK_DOENVSUBST = 0x200,SEE_MASK_FLAG_NO_UI = 0x400,SEE_MASK_UNICODE = 0x4000,SEE_MASK_NO_CONSOLE = 0x8000,SEE_MASK_ASYNCOK = 0x100000,SEE_MASK_HMONITOR = 0x200000,};
enum MACRO_SEF {SEF_DACL_AUTO_INHERIT = 0x1,SEF_SACL_AUTO_INHERIT = 0x2,SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 0x4,SEF_AVOID_PRIVILEGE_CHECK = 0x8,SEF_AVOID_OWNER_CHECK = 0x10,SEF_DEFAULT_OWNER_FROM_PARENT = 0x20,SEF_DEFAULT_GROUP_FROM_PARENT = 0x40,};
enum MACRO_SEM {SEM_FAILCRITICALERRORS = 0x1,SEM_NOGPFAULTERRORBOX = 0x2,SEM_NOALIGNMENTFAULTEXCEPT = 0x4,SEM_NOOPENFILEERRORBOX = 0x8000,};
enum MACRO_SET {SET_TAPE_MEDIA_INFORMATION = 0,SET_TAPE_DRIVE_INFORMATION = 1,};
enum MACRO_SGI {SGI_EXTRASPACE = 0,};
enum MACRO_SID {SID_REVISION = 1,SID_MAX_SUB_AUTHORITIES = 15,SID_RECOMMENDED_SUB_AUTHORITIES = 1,};
enum MACRO_SIF {SIF_RANGE = 0x1,SIF_PAGE = 0x2,SIF_POS = 0x4,SIF_DISABLENOSCROLL = 0x8,SIF_TRACKPOS = 0x10,SIF_ALL = 0x17,};
enum MACRO_SIO {SIO_ASSOCIATE_HANDLE = -2013265919,SIO_ENABLE_CIRCULAR_QUEUEING = 671088642,SIO_FIND_ROUTE = 1207959555,SIO_FLUSH = 671088644,SIO_GET_BROADCAST_ADDRESS = 1207959557,SIO_GET_EXTENSION_FUNCTION_POINTER = -939524090,SIO_GET_QOS = -939524089,SIO_GET_GROUP_QOS = -939524088,SIO_MULTIPOINT_LOOPBACK = -2013265911,SIO_MULTICAST_SCOPE = -2013265910,SIO_SET_QOS = -2013265909,SIO_SET_GROUP_QOS = -2013265908,SIO_TRANSLATE_HANDLE = -939524083,SIO_ROUTING_INTERFACE_QUERY = -939524076,SIO_ROUTING_INTERFACE_CHANGE = -2013265899,SIO_ADDRESS_LIST_QUERY = 1207959574,SIO_ADDRESS_LIST_CHANGE = 671088663,SIO_QUERY_TARGET_PNP_HANDLE = 1207959576,SIO_ADDRESS_LIST_SORT = -939524071,SIO_NSP_NOTIFY_CHANGE = -2013265895,};
enum MACRO_SKF {SKF_STICKYKEYSON = 0x1,SKF_AVAILABLE = 0x2,SKF_HOTKEYACTIVE = 0x4,SKF_CONFIRMHOTKEY = 0x8,SKF_HOTKEYSOUND = 0x10,SKF_INDICATOR = 0x20,SKF_AUDIBLEFEEDBACK = 0x40,SKF_TRISTATE = 0x80,SKF_TWOKEYSOFF = 0x100,SKF_LALTLATCHED = 0x10000000,SKF_LCTLLATCHED = 0x4000000,SKF_LSHIFTLATCHED = 0x1000000,SKF_RALTLATCHED = 0x20000000,SKF_RCTLLATCHED = 0x8000000,SKF_RSHIFTLATCHED = 0x2000000,SKF_LWINLATCHED = 0x40000000,SKF_RWINLATCHED = 0x80000000,SKF_LALTLOCKED = 0x100000,SKF_LCTLLOCKED = 0x40000,SKF_LSHIFTLOCKED = 0x10000,SKF_RALTLOCKED = 0x200000,SKF_RCTLLOCKED = 0x80000,SKF_RSHIFTLOCKED = 0x20000,SKF_LWINLOCKED = 0x400000,SKF_RWINLOCKED = 0x800000,};
enum MACRO_SLE {SLE_ERROR = 0x1,SLE_MINORERROR = 0x2,SLE_WARNING = 0x3,};
enum MACRO_SMC {SMC_INITMENU = 0x1,SMC_CREATE = 0x2,SMC_EXITMENU = 0x3,SMC_GETINFO = 0x5,SMC_GETSFINFO = 0x6,SMC_GETOBJECT = 0x7,SMC_GETSFOBJECT = 0x8,SMC_SFEXEC = 0x9,SMC_SFSELECTITEM = 0xA,SMC_REFRESH = 0x10,SMC_DEMOTE = 0x11,SMC_PROMOTE = 0x12,SMC_DEFAULTICON = 0x16,SMC_NEWITEM = 0x17,SMC_CHEVRONEXPAND = 0x19,SMC_DISPLAYCHEVRONTIP = 0x2A,SMC_SETSFOBJECT = 0x2D,SMC_SHCHANGENOTIFY = 0x2E,SMC_CHEVRONGETTIP = 0x2F,SMC_SFDDRESTRICTED = 0x30,};
enum MACRO_SND {SND_SYNC = 0x0,SND_ASYNC = 0x1,SND_NODEFAULT = 0x2,SND_MEMORY = 0x4,SND_LOOP = 0x8,SND_NOSTOP = 0x10,SND_NOWAIT = 0x2000,SND_ALIAS = 0x10000,SND_ALIAS_ID = 0x110000,SND_FILENAME = 0x20000,SND_RESOURCE = 0x40004,SND_PURGE = 0x40,SND_APPLICATION = 0x80,SND_ALIAS_START = 0x0,SND_ALIAS_SYSTEMASTERISK = 0x2A53,SND_ALIAS_SYSTEMQUESTION = 0x3F53,SND_ALIAS_SYSTEMHAND = 0x4853,SND_ALIAS_SYSTEMEXIT = 0x4553,SND_ALIAS_SYSTEMSTART = 0x5353,SND_ALIAS_SYSTEMWELCOME = 0x5753,SND_ALIAS_SYSTEMEXCLAMATION = 0x2153,SND_ALIAS_SYSTEMDEFAULT = 0x4453,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SPC {SPC_SP_AGENCY_INFO_STRUCT = 2000,SPC_MINIMAL_CRITERIA_STRUCT = 2001,SPC_FINANCIAL_CRITERIA_STRUCT = 2002,SPC_INDIRECT_DATA_CONTENT_STRUCT = 2003,SPC_PE_IMAGE_DATA_STRUCT = 2004,SPC_LINK_STRUCT = 2005,SPC_STATEMENT_TYPE_STRUCT = 2006,SPC_SP_OPUS_INFO_STRUCT = 2007,SPC_CAB_DATA_STRUCT = 2008,SPC_JAVA_CLASS_DATA_STRUCT = 2009,SPC_SIGINFO_STRUCT = 2130,};
enum MACRO_SPI {SPI_GETBEEP = 0x1,SPI_SETBEEP = 0x2,SPI_GETMOUSE = 0x3,SPI_SETMOUSE = 0x4,SPI_GETBORDER = 0x5,SPI_SETBORDER = 0x6,SPI_GETKEYBOARDSPEED = 0xA,SPI_SETKEYBOARDSPEED = 0xB,SPI_LANGDRIVER = 0xC,SPI_ICONHORIZONTALSPACING = 0xD,SPI_GETSCREENSAVETIMEOUT = 0xE,SPI_SETSCREENSAVETIMEOUT = 0xF,SPI_GETSCREENSAVEACTIVE = 0x10,SPI_SETSCREENSAVEACTIVE = 0x11,SPI_GETGRIDGRANULARITY = 0x12,SPI_SETGRIDGRANULARITY = 0x13,SPI_SETDESKWALLPAPER = 0x14,SPI_SETDESKPATTERN = 0x15,SPI_GETKEYBOARDDELAY = 0x16,SPI_SETKEYBOARDDELAY = 0x17,SPI_ICONVERTICALSPACING = 0x18,SPI_GETICONTITLEWRAP = 0x19,SPI_SETICONTITLEWRAP = 0x1A,SPI_GETMENUDROPALIGNMENT = 0x1B,SPI_SETMENUDROPALIGNMENT = 0x1C,SPI_SETDOUBLECLKWIDTH = 0x1D,SPI_SETDOUBLECLKHEIGHT = 0x1E,SPI_GETICONTITLELOGFONT = 0x1F,SPI_SETDOUBLECLICKTIME = 0x20,SPI_SETMOUSEBUTTONSWAP = 0x21,SPI_SETICONTITLELOGFONT = 0x22,SPI_GETFASTTASKSWITCH = 0x23,SPI_SETFASTTASKSWITCH = 0x24,SPI_SETDRAGFULLWINDOWS = 0x25,SPI_GETDRAGFULLWINDOWS = 0x26,SPI_GETNONCLIENTMETRICS = 0x29,SPI_SETNONCLIENTMETRICS = 0x2A,SPI_GETMINIMIZEDMETRICS = 0x2B,SPI_SETMINIMIZEDMETRICS = 0x2C,SPI_GETICONMETRICS = 0x2D,SPI_SETICONMETRICS = 0x2E,SPI_SETWORKAREA = 0x2F,SPI_GETWORKAREA = 0x30,SPI_SETPENWINDOWS = 0x31,SPI_GETHIGHCONTRAST = 0x42,SPI_SETHIGHCONTRAST = 0x43,SPI_GETKEYBOARDPREF = 0x44,SPI_SETKEYBOARDPREF = 0x45,SPI_GETSCREENREADER = 0x46,SPI_SETSCREENREADER = 0x47,SPI_GETANIMATION = 0x48,SPI_SETANIMATION = 0x49,SPI_GETFONTSMOOTHING = 0x4A,SPI_SETFONTSMOOTHING = 0x4B,SPI_SETDRAGWIDTH = 0x4C,SPI_SETDRAGHEIGHT = 0x4D,SPI_SETHANDHELD = 0x4E,SPI_GETLOWPOWERTIMEOUT = 0x4F,SPI_GETPOWEROFFTIMEOUT = 0x50,SPI_SETLOWPOWERTIMEOUT = 0x51,SPI_SETPOWEROFFTIMEOUT = 0x52,SPI_GETLOWPOWERACTIVE = 0x53,SPI_GETPOWEROFFACTIVE = 0x54,SPI_SETLOWPOWERACTIVE = 0x55,SPI_SETPOWEROFFACTIVE = 0x56,SPI_SETCURSORS = 0x57,SPI_SETICONS = 0x58,SPI_GETDEFAULTINPUTLANG = 0x59,SPI_SETDEFAULTINPUTLANG = 0x5A,SPI_SETLANGTOGGLE = 0x5B,SPI_GETWINDOWSEXTENSION = 0x5C,SPI_SETMOUSETRAILS = 0x5D,SPI_GETMOUSETRAILS = 0x5E,SPI_SETSCREENSAVERRUNNING = 0x61,SPI_SCREENSAVERRUNNING = 0x61,SPI_GETFILTERKEYS = 0x32,SPI_SETFILTERKEYS = 0x33,SPI_GETTOGGLEKEYS = 0x34,SPI_SETTOGGLEKEYS = 0x35,SPI_GETMOUSEKEYS = 0x36,SPI_SETMOUSEKEYS = 0x37,SPI_GETSHOWSOUNDS = 0x38,SPI_SETSHOWSOUNDS = 0x39,SPI_GETSTICKYKEYS = 0x3A,SPI_SETSTICKYKEYS = 0x3B,SPI_GETACCESSTIMEOUT = 0x3C,SPI_SETACCESSTIMEOUT = 0x3D,SPI_GETSERIALKEYS = 0x3E,SPI_SETSERIALKEYS = 0x3F,SPI_GETSOUNDSENTRY = 0x40,SPI_SETSOUNDSENTRY = 0x41,SPI_GETSNAPTODEFBUTTON = 0x5F,SPI_SETSNAPTODEFBUTTON = 0x60,SPI_GETMOUSEHOVERWIDTH = 0x62,SPI_SETMOUSEHOVERWIDTH = 0x63,SPI_GETMOUSEHOVERHEIGHT = 0x64,SPI_SETMOUSEHOVERHEIGHT = 0x65,SPI_GETMOUSEHOVERTIME = 0x66,SPI_SETMOUSEHOVERTIME = 0x67,SPI_GETWHEELSCROLLLINES = 0x68,SPI_SETWHEELSCROLLLINES = 0x69,SPI_GETMENUSHOWDELAY = 0x6A,SPI_SETMENUSHOWDELAY = 0x6B,SPI_GETSHOWIMEUI = 0x6E,SPI_SETSHOWIMEUI = 0x6F,SPI_GETMOUSESPEED = 0x70,SPI_SETMOUSESPEED = 0x71,SPI_GETSCREENSAVERRUNNING = 0x72,SPI_GETDESKWALLPAPER = 0x73,SPI_GETACTIVEWINDOWTRACKING = 0x1000,SPI_SETACTIVEWINDOWTRACKING = 0x1001,SPI_GETMENUANIMATION = 0x1002,SPI_SETMENUANIMATION = 0x1003,SPI_GETCOMBOBOXANIMATION = 0x1004,SPI_SETCOMBOBOXANIMATION = 0x1005,SPI_GETLISTBOXSMOOTHSCROLLING = 0x1006,SPI_SETLISTBOXSMOOTHSCROLLING = 0x1007,SPI_GETGRADIENTCAPTIONS = 0x1008,SPI_SETGRADIENTCAPTIONS = 0x1009,SPI_GETKEYBOARDCUES = 0x100A,SPI_SETKEYBOARDCUES = 0x100B,SPI_GETMENUUNDERLINES = 0x100A,SPI_SETMENUUNDERLINES = 0x100B,SPI_GETACTIVEWNDTRKZORDER = 0x100C,SPI_SETACTIVEWNDTRKZORDER = 0x100D,SPI_GETHOTTRACKING = 0x100E,SPI_SETHOTTRACKING = 0x100F,SPI_GETMENUFADE = 0x1012,SPI_SETMENUFADE = 0x1013,SPI_GETSELECTIONFADE = 0x1014,SPI_SETSELECTIONFADE = 0x1015,SPI_GETTOOLTIPANIMATION = 0x1016,SPI_SETTOOLTIPANIMATION = 0x1017,SPI_GETTOOLTIPFADE = 0x1018,SPI_SETTOOLTIPFADE = 0x1019,SPI_GETCURSORSHADOW = 0x101A,SPI_SETCURSORSHADOW = 0x101B,SPI_GETMOUSESONAR = 0x101C,SPI_SETMOUSESONAR = 0x101D,SPI_GETMOUSECLICKLOCK = 0x101E,SPI_SETMOUSECLICKLOCK = 0x101F,SPI_GETMOUSEVANISH = 0x1020,SPI_SETMOUSEVANISH = 0x1021,SPI_GETFLATMENU = 0x1022,SPI_SETFLATMENU = 0x1023,SPI_GETDROPSHADOW = 0x1024,SPI_SETDROPSHADOW = 0x1025,SPI_GETBLOCKSENDINPUTRESETS = 0x1026,SPI_SETBLOCKSENDINPUTRESETS = 0x1027,SPI_GETUIEFFECTS = 0x103E,SPI_SETUIEFFECTS = 0x103F,SPI_GETFOREGROUNDLOCKTIMEOUT = 0x2000,SPI_SETFOREGROUNDLOCKTIMEOUT = 0x2001,SPI_GETACTIVEWNDTRKTIMEOUT = 0x2002,SPI_SETACTIVEWNDTRKTIMEOUT = 0x2003,SPI_GETFOREGROUNDFLASHCOUNT = 0x2004,SPI_SETFOREGROUNDFLASHCOUNT = 0x2005,SPI_GETCARETWIDTH = 0x2006,SPI_SETCARETWIDTH = 0x2007,SPI_GETMOUSECLICKLOCKTIME = 0x2008,SPI_SETMOUSECLICKLOCKTIME = 0x2009,SPI_GETFONTSMOOTHINGTYPE = 0x200A,SPI_SETFONTSMOOTHINGTYPE = 0x200B,};
enum MACRO_SPQ {SPQ_SCAN_FILE_PRESENCE = 0x1,SPQ_SCAN_FILE_VALIDITY = 0x2,SPQ_SCAN_USE_CALLBACK = 0x4,SPQ_SCAN_USE_CALLBACKEX = 0x8,SPQ_SCAN_INFORM_USER = 0x10,SPQ_SCAN_PRUNE_COPY_QUEUE = 0x20,SPQ_SCAN_USE_CALLBACK_SIGNERINFO = 0x40,SPQ_SCAN_PRUNE_DELREN = 0x80,SPQ_DELAYED_COPY = 0x1,SPQ_FLAG_BACKUP_AWARE = 0x1,SPQ_FLAG_ABORT_IF_UNSIGNED = 0x2,SPQ_FLAG_FILES_MODIFIED = 0x4,SPQ_FLAG_VALID = 0x7,};
enum MACRO_SPS {SPS_ERROR = 0,SPS_DECLINE = 1,SPS_ACCEPT_NOEXCLUDE = 2,SPS_ACCEPT_EXCLUDE = 3,SPS_ACCEPT_SYNCHRONOUS = 4,SPS_CHANGE = 1,SPS_ASYNCCHANGE = 2,SPS_ANIMATESTART = 4,SPS_ANIMATEUPDATE = 8,SPS_ALPHA = 16,SPS_LENGTHMASK = 3840,SPS_FREQMASK = 1044480,};
enum MACRO_SRC {SRC_FLAGS_CABFILE = 0x10,};
enum MACRO_SSF {SSF_SOUNDSENTRYON = 0x1,SSF_AVAILABLE = 0x2,SSF_INDICATOR = 0x4,};
enum MACRO_SSP {SSP_TVPAGE = 10000,SSP_STDPAGE1 = 10001,SSP_STDPAGE2 = 10002,};
enum MACRO_STD {STD_INPUT_HANDLE = 4294967286,STD_OUTPUT_HANDLE = 4294967285,STD_ERROR_HANDLE = 4294967284,};
enum MACRO_STG {STG_E_INVALIDFUNCTION = 0x80030001,STG_E_FILENOTFOUND = 0x80030002,STG_E_PATHNOTFOUND = 0x80030003,STG_E_TOOMANYOPENFILES = 0x80030004,STG_E_ACCESSDENIED = 0x80030005,STG_E_INVALIDHANDLE = 0x80030006,STG_E_INSUFFICIENTMEMORY = 0x80030008,STG_E_INVALIDPOINTER = 0x80030009,STG_E_NOMOREFILES = 0x80030012,STG_E_DISKISWRITEPROTECTED = 0x80030013,STG_E_SEEKERROR = 0x80030019,STG_E_WRITEFAULT = 0x8003001D,STG_E_READFAULT = 0x8003001E,STG_E_SHAREVIOLATION = 0x80030020,STG_E_LOCKVIOLATION = 0x80030021,STG_E_FILEALREADYEXISTS = 0x80030050,STG_E_INVALIDPARAMETER = 0x80030057,STG_E_MEDIUMFULL = 0x80030070,STG_E_PROPSETMISMATCHED = 0x800300F0,STG_E_ABNORMALAPIEXIT = 0x800300FA,STG_E_INVALIDHEADER = 0x800300FB,STG_E_INVALIDNAME = 0x800300FC,STG_E_UNKNOWN = 0x800300FD,STG_E_UNIMPLEMENTEDFUNCTION = 0x800300FE,STG_E_INVALIDFLAG = 0x800300FF,STG_E_INUSE = 0x80030100,STG_E_NOTCURRENT = 0x80030101,STG_E_REVERTED = 0x80030102,STG_E_CANTSAVE = 0x80030103,STG_E_OLDFORMAT = 0x80030104,STG_E_OLDDLL = 0x80030105,STG_E_SHAREREQUIRED = 0x80030106,STG_E_NOTFILEBASEDSTORAGE = 0x80030107,STG_E_EXTANTMARSHALLINGS = 0x80030108,STG_E_DOCFILECORRUPT = 0x80030109,STG_E_BADBASEADDRESS = 0x80030110,STG_E_DOCFILETOOLARGE = 0x80030111,STG_E_NOTSIMPLEFORMAT = 0x80030112,STG_E_INCOMPLETE = 0x80030201,STG_E_TERMINATED = 0x80030202,STG_S_CONVERTED = 0x30200,STG_S_BLOCK = 0x30201,STG_S_RETRYNOW = 0x30202,STG_S_MONITORING = 0x30203,STG_S_MULTIPLEOPENS = 0x30204,STG_S_CONSOLIDATIONFAILED = 0x30205,STG_S_CANNOTCONSOLIDATE = 0x30206,STG_E_STATUS_COPY_PROTECTION_FAILURE = 0x80030305,STG_E_CSS_AUTHENTICATION_FAILURE = 0x80030306,STG_E_CSS_KEY_NOT_PRESENT = 0x80030307,STG_E_CSS_KEY_NOT_ESTABLISHED = 0x80030308,STG_E_CSS_SCRAMBLED_SECTOR = 0x80030309,STG_E_CSS_REGION_MISMATCH = 0x8003030A,STG_E_RESETS_EXHAUSTED = 0x8003030B,};
enum MACRO_STM {STM_SETICON = 0x170,STM_GETICON = 0x171,STM_SETIMAGE = 0x172,STM_GETIMAGE = 0x173,};
enum MACRO_STN {STN_CLICKED = 0,STN_DBLCLK = 1,STN_ENABLE = 2,STN_DISABLE = 3,};
enum MACRO_SUF {SUF_FIRSTTIME = 0x1,SUF_EXPRESS = 0x2,SUF_BATCHINF = 0x4,SUF_CLEAN = 0x8,SUF_INSETUP = 0x10,SUF_NETSETUP = 0x20,SUF_NETHDBOOT = 0x40,SUF_NETRPLBOOT = 0x80,SUF_SBSCOPYOK = 0x100,};
enum MACRO_SWP {SWP_NOSIZE = 0x1,SWP_NOMOVE = 0x2,SWP_NOZORDER = 0x4,SWP_NOREDRAW = 0x8,SWP_NOACTIVATE = 0x10,SWP_FRAMECHANGED = 0x20,SWP_SHOWWINDOW = 0x40,SWP_HIDEWINDOW = 0x80,SWP_NOCOPYBITS = 0x100,SWP_NOOWNERZORDER = 0x200,SWP_NOSENDCHANGING = 0x400,SWP_DRAWFRAME = 0x20,SWP_NOREPOSITION = 0x200,SWP_DEFERERASE = 0x2000,SWP_ASYNCWINDOWPOS = 0x4000,};
enum MACRO_SYS {SYS_OPEN = 20,};
enum MACRO_TBM {TBM_GETPOS = 1024,TBM_GETRANGEMIN = 1025,TBM_GETRANGEMAX = 1026,TBM_GETTIC = 1027,TBM_SETTIC = 1028,TBM_SETPOS = 1029,TBM_SETRANGE = 1030,TBM_SETRANGEMIN = 1031,TBM_SETRANGEMAX = 1032,TBM_CLEARTICS = 1033,TBM_SETSEL = 1034,TBM_SETSELSTART = 1035,TBM_SETSELEND = 1036,TBM_GETPTICS = 1038,TBM_GETTICPOS = 1039,TBM_GETNUMTICS = 1040,TBM_GETSELSTART = 1041,TBM_GETSELEND = 1042,TBM_CLEARSEL = 1043,TBM_SETTICFREQ = 1044,TBM_SETPAGESIZE = 1045,TBM_GETPAGESIZE = 1046,TBM_SETLINESIZE = 1047,TBM_GETLINESIZE = 1048,TBM_GETTHUMBRECT = 1049,TBM_GETCHANNELRECT = 1050,TBM_SETTHUMBLENGTH = 1051,TBM_GETTHUMBLENGTH = 1052,TBM_SETTOOLTIPS = 1053,TBM_GETTOOLTIPS = 1054,TBM_SETTIPSIDE = 1055,};
enum MACRO_TBN {TBN_FIRST = -700,TBN_LAST = -720,};
enum MACRO_TBS {TBS_AUTOTICKS = 0x1,TBS_VERT = 0x2,TBS_HORZ = 0x0,TBS_TOP = 0x4,TBS_BOTTOM = 0x0,TBS_LEFT = 0x4,TBS_RIGHT = 0x0,TBS_BOTH = 0x8,TBS_NOTICKS = 0x10,TBS_ENABLESELRANGE = 0x20,TBS_FIXEDLENGTH = 0x40,TBS_NOTHUMB = 0x80,TBS_TOOLTIPS = 0x100,TBS_REVERSED = 0x200,TBS_DOWNISLEFT = 0x400,};
enum MACRO_TCI {TCI_SRCCHARSET = 1,TCI_SRCCODEPAGE = 2,TCI_SRCFONTSIG = 3,TCI_SRCLOCALE = 4096,};
enum MACRO_TCM {TCM_GETIMAGELIST = 4866,TCM_SETIMAGELIST = 4867,TCM_GETITEMCOUNT = 4868,};
enum MACRO_TCN {TCN_FIRST = -550,TCN_LAST = -580,};
enum MACRO_TCP {TCP_NODELAY = 0x1,TCP_BSDURGENT = 0x7000,};
enum MACRO_TCS {TCS_SCROLLOPPOSITE = 0x1,TCS_BOTTOM = 0x2,TCS_RIGHT = 0x2,TCS_MULTISELECT = 0x4,TCS_FLATBUTTONS = 0x8,TCS_FORCEICONLEFT = 0x10,TCS_FORCELABELLEFT = 0x20,TCS_HOTTRACK = 0x40,TCS_VERTICAL = 0x80,TCS_TABS = 0x0,TCS_BUTTONS = 0x100,TCS_SINGLELINE = 0x0,TCS_MULTILINE = 0x200,TCS_RIGHTJUSTIFY = 0x0,TCS_FIXEDWIDTH = 0x400,TCS_RAGGEDRIGHT = 0x800,TCS_FOCUSONBUTTONDOWN = 0x1000,TCS_OWNERDRAWFIXED = 0x2000,TCS_TOOLTIPS = 0x4000,TCS_FOCUSNEVER = 0x8000,TCS_EX_FLATSEPARATORS = 0x1,TCS_EX_REGISTERDROP = 0x2,};
enum MACRO_TKF {TKF_TOGGLEKEYSON = 0x1,TKF_AVAILABLE = 0x2,TKF_HOTKEYACTIVE = 0x4,TKF_CONFIRMHOTKEY = 0x8,TKF_HOTKEYSOUND = 0x10,TKF_INDICATOR = 0x20,};
enum MACRO_TME {TME_HOVER = 0x1,TME_LEAVE = 0x2,TME_NONCLIENT = 0x10,TME_QUERY = 0x40000000,TME_CANCEL = 0x80000000,};
enum MACRO_TMP {TMP_MAX = 32767,};
enum MACRO_TPM {TPM_LEFTBUTTON = 0x0,TPM_RIGHTBUTTON = 0x2,TPM_LEFTALIGN = 0x0,TPM_CENTERALIGN = 0x4,TPM_RIGHTALIGN = 0x8,TPM_TOPALIGN = 0x0,TPM_VCENTERALIGN = 0x10,TPM_BOTTOMALIGN = 0x20,TPM_HORIZONTAL = 0x0,TPM_VERTICAL = 0x40,TPM_NONOTIFY = 0x80,TPM_RETURNCMD = 0x100,TPM_RECURSE = 0x1,TPM_HORPOSANIMATION = 0x400,TPM_HORNEGANIMATION = 0x800,TPM_VERPOSANIMATION = 0x1000,TPM_VERNEGANIMATION = 0x2000,TPM_NOANIMATION = 0x4000,TPM_LAYOUTRTL = 0x8000,};
enum MACRO_TRY {TRY_AGAIN = 11002,};
enum MACRO_TTF {TTF_IDISHWND = 0x1,TTF_CENTERTIP = 0x2,TTF_RTLREADING = 0x4,TTF_SUBCLASS = 0x10,TTF_TRACK = 0x20,TTF_ABSOLUTE = 0x80,TTF_TRANSPARENT = 0x100,TTF_PARSELINKS = 0x1000,TTF_DI_SETITEM = 0x8000,};
enum MACRO_TTI {TTI_NONE = 0,TTI_INFO = 1,TTI_WARNING = 2,TTI_ERROR = 3,};
enum MACRO_TTM {TTM_ACTIVATE = 1025,TTM_SETDELAYTIME = 1027,TTM_ADDTOOLA = 1028,TTM_ADDTOOLW = 1074,TTM_DELTOOLA = 1029,TTM_DELTOOLW = 1075,TTM_NEWTOOLRECTA = 1030,TTM_NEWTOOLRECTW = 1076,TTM_RELAYEVENT = 1031,TTM_GETTOOLINFOA = 1032,TTM_GETTOOLINFOW = 1077,TTM_SETTOOLINFOA = 1033,TTM_SETTOOLINFOW = 1078,TTM_HITTESTA = 1034,TTM_HITTESTW = 1079,TTM_GETTEXTA = 1035,TTM_GETTEXTW = 1080,TTM_UPDATETIPTEXTA = 1036,TTM_UPDATETIPTEXTW = 1081,TTM_GETTOOLCOUNT = 1037,TTM_ENUMTOOLSA = 1038,TTM_ENUMTOOLSW = 1082,TTM_GETCURRENTTOOLA = 1039,TTM_GETCURRENTTOOLW = 1083,TTM_WINDOWFROMPOINT = 1040,TTM_TRACKACTIVATE = 1041,TTM_TRACKPOSITION = 1042,TTM_SETTIPBKCOLOR = 1043,TTM_SETTIPTEXTCOLOR = 1044,TTM_GETDELAYTIME = 1045,TTM_GETTIPBKCOLOR = 1046,TTM_GETTIPTEXTCOLOR = 1047,TTM_SETMAXTIPWIDTH = 1048,TTM_GETMAXTIPWIDTH = 1049,TTM_SETMARGIN = 1050,TTM_GETMARGIN = 1051,TTM_POP = 1052,TTM_UPDATE = 1053,TTM_GETBUBBLESIZE = 1054,TTM_ADJUSTRECT = 1055,TTM_SETTITLEA = 1056,TTM_SETTITLEW = 1057,TTM_POPUP = 1058,TTM_GETTITLE = 1059,TTM_ADDTOOL = 1028,TTM_DELTOOL = 1029,TTM_NEWTOOLRECT = 1030,TTM_GETTOOLINFO = 1032,TTM_SETTOOLINFO = 1033,TTM_HITTEST = 1034,TTM_GETTEXT = 1035,TTM_UPDATETIPTEXT = 1036,TTM_ENUMTOOLS = 1038,TTM_GETCURRENTTOOL = 1039,TTM_SETTITLE = 1056,TTM_SETWINDOWTHEME = 8203,};
enum MACRO_TTN {TTN_FIRST = -520,TTN_LAST = -549,};
enum MACRO_TTO {TTO_METRICS_ONLY = 1,TTO_QUBICS = 2,TTO_UNHINTED = 4,};
enum MACRO_TTS {TTS_ALWAYSTIP = 0x1,TTS_NOPREFIX = 0x2,TTS_NOANIMATE = 0x10,TTS_NOFADE = 0x20,TTS_BALLOON = 0x40,TTS_CLOSE = 0x80,};
enum MACRO_TVC {TVC_UNKNOWN = 0x0,TVC_BYMOUSE = 0x1,TVC_BYKEYBOARD = 0x2,};
enum MACRO_TVE {TVE_COLLAPSE = 0x1,TVE_EXPAND = 0x2,TVE_TOGGLE = 0x3,TVE_EXPANDPARTIAL = 0x4000,TVE_COLLAPSERESET = 0x8000,};
enum MACRO_TVI {TVI_ROOT = 0xFFFF0000,TVI_FIRST = 0xFFFF0001,TVI_LAST = 0xFFFF0002,TVI_SORT = 0xFFFF0003,};
enum MACRO_TVM {TVM_INSERTITEMA = 4352,TVM_INSERTITEMW = 4402,TVM_INSERTITEM = 4352,TVM_DELETEITEM = 4353,TVM_EXPAND = 4354,};
enum MACRO_TVN {TVN_FIRST = -400,TVN_LAST = -499,};
enum MACRO_TVS {TVS_HASBUTTONS = 0x1,TVS_HASLINES = 0x2,TVS_LINESATROOT = 0x4,TVS_EDITLABELS = 0x8,TVS_DISABLEDRAGDROP = 0x10,TVS_SHOWSELALWAYS = 0x20,TVS_RTLREADING = 0x40,TVS_NOTOOLTIPS = 0x80,TVS_CHECKBOXES = 0x100,TVS_TRACKSELECT = 0x200,TVS_SINGLEEXPAND = 0x400,TVS_INFOTIP = 0x800,TVS_FULLROWSELECT = 0x1000,TVS_NOSCROLL = 0x2000,TVS_NONEVENHEIGHT = 0x4000,TVS_NOHSCROLL = 0x8000,};
enum MACRO_UDM {UDM_SETRANGE = 1125,UDM_GETRANGE = 1126,UDM_SETPOS = 1127,UDM_GETPOS = 1128,UDM_SETBUDDY = 1129,UDM_GETBUDDY = 1130,UDM_SETACCEL = 1131,UDM_GETACCEL = 1132,UDM_SETBASE = 1133,UDM_GETBASE = 1134,UDM_SETRANGE32 = 1135,UDM_GETRANGE32 = 1136,UDM_SETUNICODEFORMAT = 8197,UDM_GETUNICODEFORMAT = 8198,UDM_SETPOS32 = 1137,UDM_GETPOS32 = 1138,};
enum MACRO_UDN {UDN_FIRST = -721,UDN_LAST = -740,};
enum MACRO_UDP {UDP_STATS = 15,UDP_TABLE = 16,UDP_ROW = 17,};
enum MACRO_UDS {UDS_WRAP = 0x1,UDS_SETBUDDYINT = 0x2,UDS_ALIGNRIGHT = 0x4,UDS_ALIGNLEFT = 0x8,UDS_AUTOBUDDY = 0x10,UDS_ARROWKEYS = 0x20,UDS_HORZ = 0x40,UDS_NOTHOUSANDS = 0x80,UDS_HOTTRACK = 0x100,};
enum MACRO_UFF {UFF_FILE_MAGIC = 826689109,UFF_VERSION_NUMBER = 65537,};
enum MACRO_UFM {UFM_SOFT = 0x1,UFM_CART = 0x2,UFM_SCALABLE = 0x4,};
enum MACRO_UIS {UIS_SET = 1,UIS_CLEAR = 2,UIS_INITIALIZE = 3,};
enum MACRO_ULW {ULW_COLORKEY = 0x1,ULW_ALPHA = 0x2,ULW_OPAQUE = 0x4,};
enum MACRO_UNI {UNI_GLYPHSETDATA_VERSION_1_0 = 0x10000,};
enum MACRO_UOI {UOI_FLAGS = 1,UOI_NAME = 2,UOI_TYPE = 3,UOI_USER_SID = 4,};
enum MACRO_URL {URL_OID_CERTIFICATE_ISSUER = 1,URL_OID_CERTIFICATE_CRL_DIST_POINT = 2,URL_OID_CTL_ISSUER = 3,URL_OID_CTL_NEXT_UPDATE = 4,URL_OID_CRL_ISSUER = 5,URL_OID_CERTIFICATE_FRESHEST_CRL = 6,URL_OID_CRL_FRESHEST_CRL = 7,URL_OID_CROSS_CERT_DIST_POINT = 8,};
enum MACRO_USN {USN_PAGE_SIZE = 0x1000,USN_REASON_DATA_OVERWRITE = 0x1,USN_REASON_DATA_EXTEND = 0x2,USN_REASON_DATA_TRUNCATION = 0x4,USN_REASON_NAMED_DATA_OVERWRITE = 0x10,USN_REASON_NAMED_DATA_EXTEND = 0x20,USN_REASON_NAMED_DATA_TRUNCATION = 0x40,USN_REASON_FILE_CREATE = 0x100,USN_REASON_FILE_DELETE = 0x200,USN_REASON_EA_CHANGE = 0x400,USN_REASON_SECURITY_CHANGE = 0x800,USN_REASON_RENAME_OLD_NAME = 0x1000,USN_REASON_RENAME_NEW_NAME = 0x2000,USN_REASON_INDEXABLE_CHANGE = 0x4000,USN_REASON_BASIC_INFO_CHANGE = 0x8000,USN_REASON_HARD_LINK_CHANGE = 0x10000,USN_REASON_COMPRESSION_CHANGE = 0x20000,USN_REASON_ENCRYPTION_CHANGE = 0x40000,USN_REASON_OBJECT_ID_CHANGE = 0x80000,USN_REASON_REPARSE_POINT_CHANGE = 0x100000,USN_REASON_STREAM_CHANGE = 0x200000,USN_REASON_CLOSE = 0x80000000,USN_DELETE_FLAG_DELETE = 0x1,USN_DELETE_FLAG_NOTIFY = 0x2,USN_DELETE_VALID_FLAGS = 0x3,USN_SOURCE_DATA_MANAGEMENT = 0x1,USN_SOURCE_AUXILIARY_DATA = 0x2,USN_SOURCE_REPLICATION_MANAGEMENT = 0x4,};
enum MACRO_VAR {VAR_TIMEVALUEONLY = 0x1,VAR_DATEVALUEONLY = 0x2,VAR_VALIDDATE = 0x4,VAR_CALENDAR_HIJRI = 0x8,VAR_LOCALBOOL = 0x10,VAR_FORMAT_NOSUBSTITUTE = 0x20,VAR_FOURDIGITYEARS = 0x40,};
enum MACRO_VER {VER_SERVER_NT = 0x80000000,VER_WORKSTATION_NT = 0x40000000,VER_SUITE_SMALLBUSINESS = 0x1,VER_SUITE_ENTERPRISE = 0x2,VER_SUITE_BACKOFFICE = 0x4,VER_SUITE_COMMUNICATIONS = 0x8,VER_SUITE_TERMINAL = 0x10,VER_SUITE_SMALLBUSINESS_RESTRICTED = 0x20,VER_SUITE_EMBEDDEDNT = 0x40,VER_SUITE_DATACENTER = 0x80,VER_SUITE_SINGLEUSERTS = 0x100,VER_SUITE_PERSONAL = 0x200,VER_SUITE_BLADE = 0x400,VER_SUITE_EMBEDDED_RESTRICTED = 0x800,VER_SUITE_SECURITY_APPLIANCE = 0x1000,};
enum MACRO_VFF {VFF_CURNEDEST = 0x1,VFF_FILEINUSE = 0x2,VFF_BUFFTOOSMALL = 0x4,};
enum MACRO_VFT {VFT_UNKNOWN = 0x0,VFT_APP = 0x1,VFT_DLL = 0x2,VFT_DRV = 0x3,VFT_FONT = 0x4,VFT_VXD = 0x5,VFT_STATIC_LIB = 0x7,};
enum MACRO_VIF {VIF_TEMPFILE = 0x1,VIF_MISMATCH = 0x2,VIF_SRCOLD = 0x4,VIF_DIFFLANG = 0x8,VIF_DIFFCODEPG = 0x10,VIF_DIFFTYPE = 0x20,VIF_WRITEPROT = 0x40,VIF_FILEINUSE = 0x80,VIF_OUTOFSPACE = 0x100,VIF_ACCESSVIOLATION = 0x200,VIF_SHARINGVIOLATION = 0x400,VIF_CANNOTCREATE = 0x800,VIF_CANNOTDELETE = 0x1000,VIF_CANNOTRENAME = 0x2000,VIF_CANNOTDELETECUR = 0x4000,VIF_OUTOFMEMORY = 0x8000,VIF_CANNOTREADSRC = 0x10000,VIF_CANNOTREADDST = 0x20000,VIF_BUFFTOOSMALL = 0x40000,VIF_CANNOTLOADLZ32 = 0x80000,VIF_CANNOTLOADCABINET = 0x100000,};
enum MACRO_VK_ {VK__none_ = 0xFF,VK_ABNT_C1 = 0xC1,VK_ABNT_C2 = 0xC2,};
enum MACRO_VOS {VOS_UNKNOWN = 0x0,VOS_DOS = 0x10000,VOS_OS216 = 0x20000,VOS_OS232 = 0x30000,VOS_NT = 0x40000,VOS_WINCE = 0x50000,VOS__BASE = 0x0,VOS__WINDOWS16 = 0x1,VOS__PM16 = 0x2,VOS__PM32 = 0x3,VOS__WINDOWS32 = 0x4,VOS_DOS_WINDOWS16 = 0x10001,VOS_DOS_WINDOWS32 = 0x10004,VOS_OS216_PM16 = 0x20002,VOS_OS232_PM32 = 0x30003,VOS_NT_WINDOWS32 = 0x40004,};
enum MACRO_VTA {VTA_BASELINE = 24,VTA_LEFT = 8,VTA_RIGHT = 0,VTA_CENTER = 6,VTA_BOTTOM = 2,VTA_TOP = 0,};
enum MACRO_WAN {WAN_PROTOCOL_KEEPS_STATS = 0x1,};
enum MACRO_WCE {WCE_AF_IRDA = 22,WCE_PF_IRDA = 22,};
enum MACRO_WCH {WCH_NONE = 0xF000,WCH_DEAD = 0xF001,WCH_LGTR = 0xF002,};
enum MACRO_WDT {WDT_INPROC_CALL = 0x48746457,WDT_REMOTE_CALL = 0x52746457,WDT_INPROC64_CALL = 0x50746457,};
enum MACRO_WGL {WGL_FONT_LINES = 0,WGL_FONT_POLYGONS = 1,};
enum MACRO_WIM {WIM_OPEN = 958,WIM_CLOSE = 959,WIM_DATA = 960,};
enum MACRO_WIN {WIN_CERT_REVISION_1_0 = 0x100,WIN_CERT_REVISION_2_0 = 0x200,WIN_CERT_TYPE_X509 = 0x1,WIN_CERT_TYPE_PKCS_SIGNED_DATA = 0x2,WIN_CERT_TYPE_RESERVED_1 = 0x3,WIN_CERT_TYPE_TS_STACK_SIGNED = 0x4,};
enum MACRO_WIZ {WIZ_CXDLG = 276,WIZ_CYDLG = 140,WIZ_CXBMP = 80,WIZ_BODYX = 92,WIZ_BODYCX = 184,};
enum MACRO_WMI {WMI_GUIDTYPE_TRACECONTROL = 0,WMI_GUIDTYPE_TRACE = 1,WMI_GUIDTYPE_DATA = 2,WMI_GUIDTYPE_EVENT = 3,};
enum MACRO_WMN {WMN_FIRST = -1000,WMN_LAST = -1200,};
enum MACRO_WOC {WOC_RGN_CLIENT_DELTA = 0x1,WOC_RGN_CLIENT = 0x2,WOC_RGN_SURFACE_DELTA = 0x4,WOC_RGN_SURFACE = 0x8,WOC_CHANGED = 0x10,WOC_DELETE = 0x20,WOC_DRAWN = 0x40,WOC_SPRITE_OVERLAP = 0x80,WOC_SPRITE_NO_OVERLAP = 0x100,};
enum MACRO_WOM {WOM_OPEN = 955,WOM_CLOSE = 956,WOM_DONE = 957,};
enum MACRO_WPF {WPF_SETMINPOSITION = 0x1,WPF_RESTORETOMAXIMIZED = 0x2,WPF_ASYNCWINDOWPLACEMENT = 0x4,};
enum MACRO_WSA {WSA_IO_PENDING = 997,WSA_IO_INCOMPLETE = 996,WSA_INVALID_HANDLE = 6,WSA_INVALID_PARAMETER = 87,WSA_NOT_ENOUGH_MEMORY = 8,WSA_OPERATION_ABORTED = 995,WSA_INVALID_EVENT = 0,WSA_MAXIMUM_WAIT_EVENTS = 64,WSA_WAIT_FAILED = 4294967295,WSA_WAIT_EVENT_0 = 0,WSA_WAIT_IO_COMPLETION = 192,WSA_WAIT_TIMEOUT = 258,WSA_INFINITE = -1,};
enum MACRO_WSB {WSB_PROP_CYVSCROLL = 0x1,WSB_PROP_CXHSCROLL = 0x2,WSB_PROP_CYHSCROLL = 0x4,WSB_PROP_CXVSCROLL = 0x8,WSB_PROP_CXHTHUMB = 0x10,WSB_PROP_CYVTHUMB = 0x20,WSB_PROP_VBKGCOLOR = 0x40,WSB_PROP_HBKGCOLOR = 0x80,WSB_PROP_VSTYLE = 0x100,WSB_PROP_HSTYLE = 0x200,WSB_PROP_WINSTYLE = 0x400,WSB_PROP_PALETTE = 0x800,WSB_PROP_MASK = 0xFFF,};
enum MACRO_WSF {WSF_VISIBLE = 0x1,};
enum MACRO_WSS {WSS_OPERATION_IN_PROGRESS = 0x103,};
enum MACRO_WST {WST_TVTUNER_CHANGE_BEGIN_TUNE = 0x1000,WST_TVTUNER_CHANGE_END_TUNE = 0x2000,};
enum MACRO_WTD {WTD_UI_ALL = 1,WTD_UI_NONE = 2,WTD_UI_NOBAD = 3,WTD_UI_NOGOOD = 4,WTD_REVOKE_NONE = 0,WTD_REVOKE_WHOLECHAIN = 1,WTD_CHOICE_FILE = 1,WTD_CHOICE_CATALOG = 2,WTD_CHOICE_BLOB = 3,WTD_CHOICE_SIGNER = 4,WTD_CHOICE_CERT = 5,WTD_STATEACTION_IGNORE = 0,WTD_STATEACTION_VERIFY = 1,WTD_STATEACTION_CLOSE = 2,WTD_STATEACTION_AUTO_CACHE = 3,WTD_STATEACTION_AUTO_CACHE_FLUSH = 4,WTD_PROV_FLAGS_MASK = 65535,WTD_USE_IE4_TRUST_FLAG = 1,WTD_NO_IE4_CHAIN_FLAG = 2,WTD_NO_POLICY_USAGE_FLAG = 4,WTD_REVOCATION_CHECK_NONE = 16,WTD_REVOCATION_CHECK_END_CERT = 32,WTD_REVOCATION_CHECK_CHAIN = 64,WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 128,WTD_SAFER_FLAG = 256,WTD_HASH_ONLY_FLAG = 512,WTD_USE_DEFAULT_OSVER_CHECK = 1024,WTD_LIFETIME_SIGNING_FLAG = 2048,WTD_CACHE_ONLY_URL_RETRIEVAL = 4096,};
enum MACRO_WTS {WTS_CONSOLE_CONNECT = 0x1,WTS_CONSOLE_DISCONNECT = 0x2,WTS_REMOTE_CONNECT = 0x3,WTS_REMOTE_DISCONNECT = 0x4,WTS_SESSION_LOGON = 0x5,WTS_SESSION_LOGOFF = 0x6,WTS_SESSION_LOCK = 0x7,WTS_SESSION_UNLOCK = 0x8,WTS_SESSION_REMOTE_CONTROL = 0x9,};
enum MACRO_WVR {WVR_ALIGNTOP = 0x10,WVR_ALIGNLEFT = 0x20,WVR_ALIGNBOTTOM = 0x40,WVR_ALIGNRIGHT = 0x80,WVR_HREDRAW = 0x100,WVR_VREDRAW = 0x200,WVR_REDRAW = 0x300,WVR_VALIDRECTS = 0x400,};
enum MACRO_XP1 {XP1_CONNECTIONLESS = 0x1,XP1_GUARANTEED_DELIVERY = 0x2,XP1_GUARANTEED_ORDER = 0x4,XP1_MESSAGE_ORIENTED = 0x8,XP1_PSEUDO_STREAM = 0x10,XP1_GRACEFUL_CLOSE = 0x20,XP1_EXPEDITED_DATA = 0x40,XP1_CONNECT_DATA = 0x80,XP1_DISCONNECT_DATA = 0x100,XP1_SUPPORT_BROADCAST = 0x200,XP1_SUPPORT_MULTIPOINT = 0x400,XP1_MULTIPOINT_CONTROL_PLANE = 0x800,XP1_MULTIPOINT_DATA_PLANE = 0x1000,XP1_QOS_SUPPORTED = 0x2000,XP1_INTERRUPT = 0x4000,XP1_UNI_SEND = 0x8000,XP1_UNI_RECV = 0x10000,XP1_IFS_HANDLES = 0x20000,XP1_PARTIAL_MESSAGE = 0x40000,};
enum MACRO_XST {XST_NULL = 0,XST_INCOMPLETE = 1,XST_CONNECTED = 2,XST_INIT1 = 3,XST_INIT2 = 4,XST_REQSENT = 5,XST_DATARCVD = 6,XST_POKESENT = 7,XST_POKEACKRCVD = 8,XST_EXECSENT = 9,XST_EXECACKRCVD = 10,XST_ADVSENT = 11,XST_UNADVSENT = 12,XST_ADVACKRCVD = 13,XST_UNADVACKRCVD = 14,XST_ADVDATASENT = 15,XST_ADVDATAACKRCVD = 16,};
enum MACRO__CW {_CW_DEFAULT = 589855,};
enum MACRO__DN {_DN_SAVE = 0x0,_DN_FLUSH = 0x1000000,_DN_FLUSH_OPERANDS_SAVE_RESULTS = 0x2000000,_DN_SAVE_OPERANDS_FLUSH_RESULTS = 0x3000000,};
enum MACRO__EM {_EM_INEXACT = 0x1,_EM_UNDERFLOW = 0x2,_EM_OVERFLOW = 0x4,_EM_ZERODIVIDE = 0x8,_EM_INVALID = 0x10,};
enum MACRO__FT {_FT_TYPES_DEFINITION_ = 1,};
enum MACRO__IC {_IC_AFFINE = 0x40000,_IC_PROJECTIVE = 0x0,};
enum MACRO__NT {_NT_RTPATCHFLAG_HASSEGS = 0x1,_NT_RTPATCHFLAG_HASINFO = 0x2,_NT_D3DRS_DELETERTPATCH = 0xA9,_NT_D3DGDI2_MAGIC = 0xFFFFFFFF,_NT_D3DGDI2_TYPE_GETD3DCAPS8 = 0x1,_NT_D3DGDI2_TYPE_GETFORMATCOUNT = 0x2,_NT_D3DGDI2_TYPE_GETFORMAT = 0x3,_NT_D3DGDI2_TYPE_DXVERSION = 0x4,_NT_D3DGDI2_TYPE_DEFERRED_AGP_AWARE = 0x18,_NT_D3DGDI2_TYPE_FREE_DEFERRED_AGP = 0x19,_NT_D3DGDI2_TYPE_DEFER_AGP_FREES = 0x20,_NT_D3DDEVCAPS_HWVERTEXBUFFER = 0x2000000,_NT_D3DDEVCAPS_HWINDEXBUFFER = 0x4000000,_NT_D3DDEVCAPS_SUBVOLUMELOCK = 0x8000000,_NT_D3DPMISCCAPS_FOGINFVF = 0x2000,_NT_D3DFVF_FOG = 0x2000,_NT_D3DVS_INPUTREG_MAX_V1_1 = 0x10,_NT_D3DVS_TEMPREG_MAX_V1_1 = 0xC,_NT_D3DVS_CONSTREG_MAX_V1_1 = 0x60,_NT_D3DVS_TCRDOUTREG_MAX_V1_1 = 0x8,_NT_D3DVS_ADDRREG_MAX_V1_1 = 0x1,_NT_D3DVS_ATTROUTREG_MAX_V1_1 = 0x2,_NT_D3DVS_MAXINSTRUCTIONCOUNT_V1_1 = 0x80,_NT_D3DPS_INPUTREG_MAX_DX8 = 0x8,_NT_D3DPS_TEMPREG_MAX_DX8 = 0x8,_NT_D3DPS_CONSTREG_MAX_DX8 = 0x8,_NT_D3DPS_TEXTUREREG_MAX_DX8 = 0x8,};
enum MACRO__PC {_PC_64 = 0x0,_PC_53 = 0x10000,_PC_24 = 0x20000,};
enum MACRO__RC {_RC_NEAR = 0x0,_RC_DOWN = 0x100,_RC_UP = 0x200,_RC_CHOP = 0x300,};
enum MACRO__SS {_SS_MAXSIZE = 128,};
enum MACRO__SW {_SW_INEXACT = 0x1,_SW_UNDERFLOW = 0x2,_SW_OVERFLOW = 0x4,_SW_ZERODIVIDE = 0x8,_SW_INVALID = 0x10,};
typedef double MCDDOUBLE;
typedef struct _MCDDRIVER MCDDRIVER;
typedef struct _MCRCINFO MCDRCINFO;
typedef struct _MCDVERTEX MCDVERTEX;
typedef struct _MCDWINDOW MCDWINDOW;
typedef struct _MIB_IFROW MIB_IFROW;
typedef struct midievent_tag MIDIEVENT;
typedef struct _4ECFA59CF9422A64A465D2E51971C347 MODIFIERS;
typedef struct _MOF_FIELD MOF_FIELD;
typedef struct _MONITOREX MONITOREX;
typedef struct _MONITORUI MONITORUI;
typedef struct tagMOUSEKEYS MOUSEKEYS;
typedef struct _NDIS_GUID NDIS_GUID;
typedef struct tagNMHEADERA NMHEADERA;
typedef struct tagNMHEADERW NMHEADERW;
typedef struct tagIMEINFO *NPIMEINFO;
typedef struct _tagIMEPROA *NPIMEPROA;
typedef struct _tagIMEPROW *NPIMEPROW;
typedef struct joyinfo_tag *NPJOYINFO;
typedef struct midihdr_tag *NPMIDIHDR;
typedef struct _RGNDATA *NPRGNDATA;
typedef struct wavehdr_tag *NPWAVEHDR;
typedef struct _NRESARRAY NRESARRAY;
typedef struct _OFNOTIFYA OFNOTIFYA;
typedef struct _OFNOTIFYW OFNOTIFYW;
typedef struct _OLESTREAM OLESTREAM;
typedef struct _ABCFLOAT *PABCFLOAT;
typedef struct tagPAGERANGE PAGERANGE;
typedef struct tagPARAMDATA PARAMDATA;
typedef struct tagPARAMDESC PARAMDESC;
typedef struct tagAUXCAPSA *PAUXCAPSA;
typedef struct tagAUXCAPSW *PAUXCAPSW;
typedef struct _BLENDOBJ *PBLENDOBJ;
typedef struct _CERT_RDN *PCERT_RDN;
typedef struct _CLIPLINE *PCLIPLINE;
typedef struct _F2AFD13852ACA75C0D1B7913E08A9A3F *PCOMPVARS;
typedef struct _CPS_URLS *PCPS_URLS;
typedef struct _CRYPTOAPI_BLOB *PCRL_BLOB;
typedef struct _CRL_INFO *PCRL_INFO;
typedef struct _CTL_INFO *PCTL_INFO;
typedef struct _devicemodeA *PDEVMODEA;
typedef struct _devicemodeW *PDEVMODEW;
typedef struct tagEMRARC *PEMRARCTO;
typedef struct tagEMRARC *PEMRCHORD;
typedef struct tagEVENTMSG *PEVENTMSG;
typedef struct _FD_XFORM *PFD_XFORM;
typedef struct _FILETIME *PFILETIME;
typedef struct _FLOATOBJ *PFLOATOBJ;
typedef struct _flowspec *PFLOWSPEC;
typedef struct _FONTINFO *PFONTINFO;
typedef struct _FPO_DATA *PFPO_DATA;
typedef IGetFrame *PGETFRAME;
typedef struct _GLYPHPOS *PGLYPHPOS;
typedef struct _GLYPHRUN *PGLYPHRUN;
typedef struct tagGLYPHSET *PGLYPHSET;
typedef short *PHALF_PTR;
typedef struct _IFIEXTRA *PIFIEXTRA;
typedef struct tagJOYCAPSA *PJOYCAPSA;
typedef struct tagJOYCAPSW *PJOYCAPSW;
typedef struct _KERNDATA *PKERNDATA;
typedef struct _0D4D90B30C078E58E26CBA964C3C5A4B *PKSE_NODE;
typedef struct _99C6912CDB5C12269FDD73BE73429D8B *PKSM_NODE;
typedef struct _A4CC0F087DE00420119DAAB092DFFA3E *PKSP_NODE;
typedef struct _LIGATURE *PLIGATURE;
typedef struct tagLOGBRUSH *PLOGBRUSH;
typedef struct tagLOGFONTA *PLOGFONTA;
typedef struct tagLOGFONTW *PLOGFONTW;
typedef int *PLONG_PTR;
typedef struct _MAPTABLE *PMAPTABLE;
typedef struct _MIB_ICMP *PMIB_ICMP;
typedef struct _MMCKINFO *PMMCKINFO;
typedef struct _MMIOINFO *PMMIOINFO;
typedef struct _MONITOR2 *PMONITOR2;
typedef struct _NS_INFOA *PNS_INFOA;
typedef struct _NS_INFOW *PNS_INFOW;
typedef struct _NT_TIB32 *PNT_TIB32;
typedef struct _NT_TIB64 *PNT_TIB64;
typedef struct _OEMUIOBJ *POEMUIOBJ;
typedef struct _OFSTRUCT *POFSTRUCT;
typedef struct tagPOLYTEXTA POLYTEXTA;
typedef struct tagPOLYTEXTW POLYTEXTW;
typedef struct _POOLTABLE POOLTABLE;
typedef struct _OPTPARAM *POPTPARAM;
typedef struct _PATHDATA *PPATHDATA;
typedef struct tagPELARRAY *PPELARRAY;
typedef struct _PERF_BIN *PPERF_BIN;
typedef struct _PHYSICAL *PPHYSICAL;
typedef struct _POINTFIX *PPOINTFIX;
typedef struct protoent *PPROTOENT;
typedef struct provider_info *PPROVIDER;
typedef struct tagRAWINPUT *PRAWINPUT;
typedef struct tagRAWMOUSE *PRAWMOUSE;
typedef struct tagPDA PRINTDLGA;
typedef struct tagPDW PRINTDLGW;
typedef struct _PSHNOTIFY PSHNOTIFY;
typedef struct sockaddr *PSOCKADDR;
typedef struct SPC_LINK_ *PSPC_LINK;
typedef struct _TBBUTTON *PTBBUTTON;
typedef struct timecaps_tag *PTIMECAPS;
typedef struct tagTRANSMSG *PTRANSMSG;
typedef unsigned int *PUINT_PTR;
typedef struct _USERDATA *PUSERDATA;
typedef struct videohdr_tag *PVIDEOHDR;
typedef struct _WIDTHRUN *PWIDTHRUN;
typedef struct tagQACONTROL QACONTROL;
typedef struct _RAS_STATS RAS_STATS;
typedef struct tagREBARINFO REBARINFO;
typedef struct tagRGBTRIPLE RGBTRIPLE;
typedef struct _RGNHEADER RGNHEADER;
typedef struct _RPC_IF_ID RPC_IF_ID;
typedef struct _RSAPUBKEY RSAPUBKEY;
typedef struct tagRemBRUSH RemHBRUSH;
typedef struct tagSAFEARRAY SAFEARRAY;
typedef struct _SC_ACTION SC_ACTION;
typedef struct SC_HANDLE__ *SC_HANDLE;
typedef struct _SPC_IMAGE SPC_IMAGE;
typedef struct tagSTYLEBUFA STYLEBUFA;
typedef struct tagSTYLEBUFW STYLEBUFW;
struct SWbemSink;
typedef struct _SecHandle SecHandle;
typedef struct _7C92D00B816E38F8096F1C793288C884 TBMETRICS;
typedef struct _PUBKEY TEKPUBKEY;
typedef struct tagTPMPARAMS TPMPARAMS;
typedef struct _TRANSDATA TRANSDATA;
typedef struct _TRIVERTEX TRIVERTEX;
typedef struct tagTVITEMEXA TVITEMEXA;
typedef struct tagTVITEMEXW TVITEMEXW;
typedef unsigned short UHALF_PTR;
typedef unsigned long long ULONGLONG;
typedef unsigned int ULONG_PTR;
typedef struct _UNIFM_HDR UNIFM_HDR;
typedef struct _VK_FUNCTION_PARAM VK_FPARAM;
typedef struct _F2BCB5D6531DBE53AEF2D3A6C84D3598 VK_TO_BIT;
typedef struct tagWINDOWPOS WINDOWPOS;
typedef struct tagWNDCLASSA WNDCLASSA;
typedef struct tagWNDCLASSW WNDCLASSW;
typedef struct _WORD_BLOB WORD_BLOB;
typedef struct _xml_error XML_ERROR;
enum _D3DBLEND {D3DBLEND_ZERO = 0x1,D3DBLEND_ONE = 0x2,D3DBLEND_SRCCOLOR = 0x3,D3DBLEND_INVSRCCOLOR = 0x4,D3DBLEND_SRCALPHA = 0x5,D3DBLEND_INVSRCALPHA = 0x6,D3DBLEND_DESTALPHA = 0x7,D3DBLEND_INVDESTALPHA = 0x8,D3DBLEND_DESTCOLOR = 0x9,D3DBLEND_INVDESTCOLOR = 0xA,D3DBLEND_SRCALPHASAT = 0xB,D3DBLEND_BOTHSRCALPHA = 0xC,D3DBLEND_BOTHINVSRCALPHA = 0xD,D3DBLEND_FORCE_DWORD = 0x7FFFFFFF,};
struct _FLOAT128 {long long LowPart;long long HighPart;};
enum _SPACTION {SPACTION_NONE = 0x0,SPACTION_MOVING = 0x1,SPACTION_COPYING = 0x2,SPACTION_RECYCLING = 0x3,SPACTION_APPLYINGATTRIBS = 0x4,SPACTION_DOWNLOADING = 0x5,SPACTION_SEARCHING_INTERNET = 0x6,SPACTION_CALCULATING = 0x7,SPACTION_UPLOADING = 0x8,SPACTION_SEARCHING_FILES = 0x9,};
typedef int (*_onexit_t)();
typedef int ptrdiff_t;
enum tagCLSCTX {CLSCTX_INPROC_SERVER = 0x1,CLSCTX_INPROC_HANDLER = 0x2,CLSCTX_LOCAL_SERVER = 0x4,CLSCTX_INPROC_SERVER16 = 0x8,CLSCTX_REMOTE_SERVER = 0x10,CLSCTX_INPROC_HANDLER16 = 0x20,CLSCTX_RESERVED1 = 0x40,CLSCTX_RESERVED2 = 0x80,CLSCTX_RESERVED3 = 0x100,CLSCTX_RESERVED4 = 0x200,CLSCTX_NO_CODE_DOWNLOAD = 0x400,CLSCTX_RESERVED5 = 0x800,CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,CLSCTX_NO_FAILURE_LOG = 0x4000,CLSCTX_DISABLE_AAA = 0x8000,CLSCTX_ENABLE_AAA = 0x10000,CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,};
enum tagCOINIT {COINIT_APARTMENTTHREADED = 0x2,COINIT_MULTITHREADED = 0x0,COINIT_DISABLE_OLE1DDE = 0x4,COINIT_SPEED_OVER_MEMORY = 0x8,};
enum tagMEMCTX {MEMCTX_TASK = 0x1,MEMCTX_SHARED = 0x2,MEMCTX_MACSYSTEM = 0x3,MEMCTX_UNKNOWN = 0xFFFFFFFF,MEMCTX_SAME = 0xFFFFFFFE,};
enum tagMSHCTX {MSHCTX_LOCAL = 0x0,MSHCTX_NOSHAREDMEM = 0x1,MSHCTX_DIFFERENTMACHINE = 0x2,MSHCTX_INPROC = 0x3,MSHCTX_CROSSCTX = 0x4,};
enum tagREGCLS {REGCLS_SINGLEUSE = 0x0,REGCLS_MULTIPLEUSE = 0x1,REGCLS_MULTI_SEPARATE = 0x2,REGCLS_SUSPENDED = 0x4,REGCLS_SURROGATE = 0x8,};
enum tagTYSPEC {TYSPEC_CLSID = 0x0,TYSPEC_FILEEXT = 0x1,TYSPEC_MIMETYPE = 0x2,TYSPEC_FILENAME = 0x3,TYSPEC_PROGID = 0x4,TYSPEC_PACKAGENAME = 0x5,TYSPEC_OBJECTID = 0x6,};
typedef struct _ABCFLOAT ABCFLOAT;
typedef struct tagAUXCAPSA AUXCAPSA;
typedef struct tagAUXCAPSW AUXCAPSW;
typedef struct _tagBINDINFO BINDINFO;
typedef struct _BLENDOBJ BLENDOBJ;
typedef struct _BRUSHOBJ BRUSHOBJ;
typedef struct tagBSTRBLOB BSTRBLOB;
typedef struct tagCALPWSTR CALPWSTR;
typedef struct _CERT_RDN CERT_RDN;
typedef struct tagCLIPDATA CLIPDATA;
typedef struct _CLIPLINE CLIPLINE;
typedef struct _COLORMAP COLORMAP;
typedef struct _COMMPROP COMMPROP;
typedef struct _F2AFD13852ACA75C0D1B7913E08A9A3F COMPVARS;
typedef struct tagCONVINFO CONVINFO;
typedef struct _CPS_URLS CPS_URLS;
typedef struct _CRYPTOAPI_BLOB CRL_BLOB;
typedef struct _CRL_INFO CRL_INFO;
typedef struct _CTL_INFO CTL_INFO;
typedef struct tagCUSTDATA CUSTDATA;
typedef struct _D3DCAPS8 D3DCAPS8;
typedef struct _D3DLIGHT D3DLIGHT;
typedef struct _D3DPOINT D3DPOINT;
typedef struct _D3DRANGE D3DRANGE;
typedef struct _D3DSTATE D3DSTATE;
typedef struct _D3DSTATS D3DSTATS;
typedef float D3DVALUE;
typedef struct _tagDATAINFO DATAINFO;
typedef struct _tagDATETIME DATETIME;
typedef struct _DDOSCAPS DDOSCAPS;
typedef struct _DDSCAPS2 DDSCAPS2;
typedef struct _devicemodeA DEVMODEA;
typedef struct _devicemodeW DEVMODEW;
typedef struct tagDEVNAMES DEVNAMES;
struct DHPDEV__ {int unused;};
typedef struct _PUBKEY DHPUBKEY;
struct DHSURF__ {int unused;};
typedef struct _DOCINFOA DOCINFOA;
typedef struct _DOCINFOW DOCINFOW;
typedef struct _DSCBCAPS DSCBCAPS;
typedef struct _DSCFXAec DSCFXAec;
typedef struct _DSFXEcho DSFXEcho;
typedef struct tagELEMDESC ELEMDESC;
typedef struct tagEMRARC EMRARCTO;
typedef struct tagEMRARC EMRCHORD;
typedef struct tagEVENTMSG EVENTMSG;
typedef struct _FD_XFORM FD_XFORM;
typedef struct _FILETIME FILETIME;
typedef struct _FLOAT128 FLOAT128;
typedef struct _FLOATOBJ FLOATOBJ;
typedef struct _flowspec FLOWSPEC;
typedef struct tagFONTDESC FONTDESC;
typedef struct _FONTDIFF FONTDIFF;
typedef struct _FONTINFO FONTINFO;
typedef struct _FPO_DATA FPO_DATA;
typedef struct tagFUNCDESC FUNCDESC;
typedef union _GLYPHDEF GLYPHDEF;
typedef struct _GLYPHPOS GLYPHPOS;
typedef struct _GLYPHRUN GLYPHRUN;
typedef struct tagGLYPHSET GLYPHSET;
struct HACCEL__ {int unused;};
typedef short HALF_PTR;
struct HBRUSH__ {int unused;};
typedef void *HCONTEXT;
typedef struct HDDEDATA__ *HDDEDATA;
typedef struct _HD_LAYOUT HDLAYOUT;
typedef struct tagHELPINFO HELPINFO;
typedef struct tagHHNTRACK HHNTRACK;
typedef struct tagHH_POPUP HH_POPUP;
typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIXER__ {int unused;};
typedef struct HMONITOR__ *HMONITOR;
typedef struct HPALETTE__ *HPALETTE;
typedef struct HRASCONN__ *HRASCONN;
struct HVIDEO__ {int unused;};
typedef struct HWAVEOUT__ *HWAVEOUT;
struct IACList2 {struct IACList2Vtbl *lpVtbl;};
struct IAVIFile {struct IAVIFileVtbl *lpVtbl;};
struct IBindCtx {struct IBindCtxVtbl *lpVtbl;};
struct IBinding {struct IBindingVtbl *lpVtbl;};
typedef struct _ICONINFO ICONINFO;
struct IContext;
struct IDeskBar {struct IDeskBarVtbl *lpVtbl;};
typedef struct _IFIEXTRA IFIEXTRA;
struct IMarshal {struct IMarshalVtbl *lpVtbl;};
struct IMoniker {struct IMonikerVtbl *lpVtbl;};
struct IMultiQI {struct IMultiQIVtbl *lpVtbl;};
typedef struct in6_addr IN6_ADDR;
struct IOleLink {struct IOleLinkVtbl *lpVtbl;};
struct IPersist {struct IPersistVtbl *lpVtbl;};
struct IPicture {struct IPictureVtbl *lpVtbl;};
typedef struct in6_addr IPv6Addr;
struct IROTData {struct IROTDataVtbl *lpVtbl;};
struct IStorage {struct IStorageVtbl *lpVtbl;};
struct ITypeLib {struct ITypeLibVtbl *lpVtbl;};
struct IUnknown {struct IUnknownVtbl *lpVtbl;};
typedef struct tagJOYCAPSA JOYCAPSA;
typedef struct tagJOYCAPSW JOYCAPSW;
typedef struct _KERNDATA KERNDATA;
typedef struct _0D4D90B30C078E58E26CBA964C3C5A4B KSE_NODE;
typedef struct _99C6912CDB5C12269FDD73BE73429D8B KSM_NODE;
typedef struct _A4CC0F087DE00420119DAAB092DFFA3E KSP_NODE;
typedef struct _LIGATURE LIGATURE;
typedef struct tagLOGBRUSH LOGBRUSH;
typedef struct tagLOGFONTA LOGFONTA;
typedef struct tagLOGFONTW LOGFONTW;
typedef long long LONGLONG;
typedef int LONG_PTR;
typedef struct tagBITMAP *LPBITMAP;
typedef struct tagCAUUID *LPCAUUID;
typedef struct _cpinfo *LPCPINFO;
typedef struct tagDATABLOCKHEADER *LPDBLIST;
typedef struct _DSCAPS *LPDSCAPS;
typedef struct fd_set *LPFD_SET;
typedef struct linger *LPLINGER;
typedef struct tagLOGPEN *LPLOGPEN;
typedef IMalloc *LPMALLOC;
typedef struct mmtime_tag *LPMMTIME;
typedef struct tagNMCHAR *LPNMCHAR;
typedef struct tagPANOSE *LPPANOSE;
typedef struct tagPOINTF *LPPOINTF;
typedef struct tagPOINTS *LPPOINTS;
typedef struct tagRAWHID *LPRAWHID;
typedef struct tagSMDATA *LPSMDATA;
typedef IStream *LPSTREAM;
typedef struct _VIDMEM *LPVIDMEM;
typedef struct _WSABUF *LPWSABUF;
enum MACRO_AC {AC_LINE_OFFLINE = 0x0,AC_LINE_ONLINE = 0x1,AC_LINE_BACKUP_POWER = 0x2,AC_LINE_UNKNOWN = 0xFF,};
enum MACRO_AD {AD_COUNTERCLOCKWISE = 1,AD_CLOCKWISE = 2,};
enum MACRO_AF {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_IPX = 6,AF_NS = 6,AF_ISO = 7,AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_NETBIOS = 17,AF_VOICEVIEW = 18,AF_FIREFOX = 19,AF_UNKNOWN1 = 20,AF_BAN = 21,AF_MAX = 32,};
enum MACRO_AT {AT_KEYEXCHANGE = 1,AT_SIGNATURE = 2,};
enum MACRO_AW {AW_HOR_POSITIVE = 0x1,AW_HOR_NEGATIVE = 0x2,AW_VER_POSITIVE = 0x4,AW_VER_NEGATIVE = 0x8,AW_CENTER = 0x10,AW_HIDE = 0x10000,AW_ACTIVATE = 0x20000,AW_SLIDE = 0x40000,AW_BLEND = 0x80000,};
enum MACRO_AX {AX_KBD_DESKTOP_TYPE = 1,FMR_KBD_JIS_TYPE = 0,FMR_KBD_OASYS_TYPE = 1,FMV_KBD_OASYS_TYPE = 2,NEC_KBD_NORMAL_TYPE = 1,NEC_KBD_N_MODE_TYPE = 2,NEC_KBD_H_MODE_TYPE = 3,NEC_KBD_LAPTOP_TYPE = 4,NEC_KBD_106_TYPE = 5,TOSHIBA_KBD_DESKTOP_TYPE = 13,TOSHIBA_KBD_LAPTOP_TYPE = 15,DEC_KBD_ANSI_LAYOUT_TYPE = 1,DEC_KBD_JIS_LAYOUT_TYPE = 2,MICROSOFT_KBD_101A_TYPE = 0,MICROSOFT_KBD_101B_TYPE = 4,MICROSOFT_KBD_101C_TYPE = 5,MICROSOFT_KBD_103_TYPE = 6,};
enum MACRO_BF {BF_LEFT = 0x1,BF_TOP = 0x2,BF_RIGHT = 0x4,BF_BOTTOM = 0x8,BF_TOPLEFT = 0x3,BF_TOPRIGHT = 0x6,BF_BOTTOMLEFT = 0x9,BF_BOTTOMRIGHT = 0xC,BF_RECT = 0xF,BF_DIAGONAL = 0x10,BF_DIAGONAL_ENDTOPRIGHT = 0x16,BF_DIAGONAL_ENDTOPLEFT = 0x13,BF_DIAGONAL_ENDBOTTOMLEFT = 0x19,BF_DIAGONAL_ENDBOTTOMRIGHT = 0x1C,BF_MIDDLE = 0x800,BF_SOFT = 0x1000,BF_ADJUST = 0x2000,BF_FLAT = 0x4000,BF_MONO = 0x8000,};
enum MACRO_BI {BI_RGB = 0,BI_RLE8 = 1,BI_RLE4 = 2,BI_BITFIELDS = 3,BI_JPEG = 4,BI_PNG = 5,};
enum MACRO_BM {BM_GETCHECK = 0xF0,BM_SETCHECK = 0xF1,BM_GETSTATE = 0xF2,BM_SETSTATE = 0xF3,BM_SETSTYLE = 0xF4,BM_CLICK = 0xF5,BM_GETIMAGE = 0xF6,BM_SETIMAGE = 0xF7,};
enum MACRO_BN {BN_CLICKED = 0,BN_PAINT = 1,BN_HILITE = 2,BN_UNHILITE = 3,BN_DISABLE = 4,BN_DOUBLECLICKED = 5,BN_PUSHED = 2,BN_UNPUSHED = 3,BN_DBLCLK = 5,BN_SETFOCUS = 6,BN_KILLFOCUS = 7,};
enum MACRO_BR {BR_DEVICE_ICM = 0x1,BR_HOST_ICM = 0x2,BR_CMYKCOLOR = 0x4,BR_ORIGCOLOR = 0x8,};
enum MACRO_BS {BS_SOLID = 0,BS_NULL = 1,BS_HOLLOW = 1,BS_HATCHED = 2,BS_PATTERN = 3,BS_INDEXED = 4,BS_DIBPATTERN = 5,BS_DIBPATTERNPT = 6,BS_PATTERN8X8 = 7,BS_DIBPATTERN8X8 = 8,BS_MONOPATTERN = 9,};
enum MACRO_C1 {C1_UPPER = 0x1,C1_LOWER = 0x2,C1_DIGIT = 0x4,C1_SPACE = 0x8,C1_PUNCT = 0x10,C1_CNTRL = 0x20,C1_BLANK = 0x40,C1_XDIGIT = 0x80,C1_ALPHA = 0x100,C1_DEFINED = 0x200,};
enum MACRO_C2 {C2_LEFTTORIGHT = 0x1,C2_RIGHTTOLEFT = 0x2,C2_EUROPENUMBER = 0x3,C2_EUROPESEPARATOR = 0x4,C2_EUROPETERMINATOR = 0x5,C2_ARABICNUMBER = 0x6,C2_COMMONSEPARATOR = 0x7,C2_BLOCKSEPARATOR = 0x8,C2_SEGMENTSEPARATOR = 0x9,C2_WHITESPACE = 0xA,C2_OTHERNEUTRAL = 0xB,C2_NOTAPPLICABLE = 0x0,};
enum MACRO_C3 {C3_NONSPACING = 0x1,C3_DIACRITIC = 0x2,C3_VOWELMARK = 0x4,C3_SYMBOL = 0x8,C3_KATAKANA = 0x10,C3_HIRAGANA = 0x20,C3_HALFWIDTH = 0x40,C3_FULLWIDTH = 0x80,C3_IDEOGRAPH = 0x100,C3_KASHIDA = 0x200,C3_LEXICAL = 0x400,C3_ALPHA = 0x8000,C3_NOTAPPLICABLE = 0x0,};
enum MACRO_CA {CA_NEGATIVE = 0x1,CA_LOG_FILTER = 0x2,};
enum MACRO_CB {CB_OKAY = 0,CB_ERR = -1,CB_ERRSPACE = -2,};
enum MACRO_CC {CC_NONE = 0,CC_CIRCLES = 1,CC_PIE = 2,CC_CHORD = 4,CC_ELLIPSES = 8,CC_WIDE = 16,CC_STYLED = 32,CC_WIDESTYLED = 64,CC_INTERIORS = 128,CC_ROUNDRECT = 256,};
enum MACRO_CD {CD_LBSELNOITEMS = -1,CD_LBSELCHANGE = 0,CD_LBSELSUB = 1,CD_LBSELADD = 2,};
enum MACRO_CE {CE_RXOVER = 0x1,CE_OVERRUN = 0x2,CE_RXPARITY = 0x4,CE_FRAME = 0x8,CE_BREAK = 0x10,CE_TXFULL = 0x100,CE_PTO = 0x200,CE_IOE = 0x400,CE_DNS = 0x800,CE_OOP = 0x1000,CE_MODE = 0x8000,};
enum MACRO_CF {CF_TEXT = 1,CF_BITMAP = 2,CF_METAFILEPICT = 3,CF_SYLK = 4,CF_DIF = 5,CF_TIFF = 6,CF_OEMTEXT = 7,CF_DIB = 8,CF_PALETTE = 9,CF_PENDATA = 10,CF_RIFF = 11,CF_WAVE = 12,CF_UNICODETEXT = 13,CF_ENHMETAFILE = 14,CF_HDROP = 15,CF_LOCALE = 16,CF_DIBV5 = 17,CF_MAX = 18,CF_OWNERDISPLAY = 128,CF_DSPTEXT = 129,CF_DSPBITMAP = 130,CF_DSPMETAFILEPICT = 131,CF_DSPENHMETAFILE = 142,CF_PRIVATEFIRST = 512,CF_PRIVATELAST = 767,CF_GDIOBJFIRST = 768,CF_GDIOBJLAST = 1023,};
enum MACRO_CM {CM_OUT_OF_GAMUT = 255,CM_IN_GAMUT = 0,};
enum MACRO_CO {CO_E_INIT_TLS = 0x80004006,CO_E_INIT_SHARED_ALLOCATOR = 0x80004007,CO_E_INIT_MEMORY_ALLOCATOR = 0x80004008,CO_E_INIT_CLASS_CACHE = 0x80004009,CO_E_INIT_RPC_CHANNEL = 0x8000400A,CO_E_INIT_TLS_SET_CHANNEL_CONTROL = 0x8000400B,CO_E_INIT_TLS_CHANNEL_CONTROL = 0x8000400C,CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = 0x8000400D,CO_E_INIT_SCM_MUTEX_EXISTS = 0x8000400E,CO_E_INIT_SCM_FILE_MAPPING_EXISTS = 0x8000400F,CO_E_INIT_SCM_MAP_VIEW_OF_FILE = 0x80004010,CO_E_INIT_SCM_EXEC_FAILURE = 0x80004011,CO_E_INIT_ONLY_SINGLE_THREADED = 0x80004012,CO_E_CANT_REMOTE = 0x80004013,CO_E_BAD_SERVER_NAME = 0x80004014,CO_E_WRONG_SERVER_IDENTITY = 0x80004015,CO_E_OLE1DDE_DISABLED = 0x80004016,CO_E_RUNAS_SYNTAX = 0x80004017,CO_E_CREATEPROCESS_FAILURE = 0x80004018,CO_E_RUNAS_CREATEPROCESS_FAILURE = 0x80004019,CO_E_RUNAS_LOGON_FAILURE = 0x8000401A,CO_E_LAUNCH_PERMSSION_DENIED = 0x8000401B,CO_E_START_SERVICE_FAILURE = 0x8000401C,CO_E_REMOTE_COMMUNICATION_FAILURE = 0x8000401D,CO_E_SERVER_START_TIMEOUT = 0x8000401E,CO_E_CLSREG_INCONSISTENT = 0x8000401F,CO_E_IIDREG_INCONSISTENT = 0x80004020,CO_E_NOT_SUPPORTED = 0x80004021,CO_E_RELOAD_DLL = 0x80004022,CO_E_MSI_ERROR = 0x80004023,CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = 0x80004024,CO_E_SERVER_PAUSED = 0x80004025,CO_E_SERVER_NOT_PAUSED = 0x80004026,CO_E_CLASS_DISABLED = 0x80004027,CO_E_CLRNOTAVAILABLE = 0x80004028,CO_E_ASYNC_WORK_REJECTED = 0x80004029,CO_E_SERVER_INIT_TIMEOUT = 0x8000402A,CO_E_NO_SECCTX_IN_ACTIVATE = 0x8000402B,CO_E_TRACKER_CONFIG = 0x80004030,CO_E_THREADPOOL_CONFIG = 0x80004031,CO_E_SXS_CONFIG = 0x80004032,CO_E_MALFORMED_SPN = 0x80004033,};
enum MACRO_CP {CP_NONE = 0,CP_RECTANGLE = 1,CP_REGION = 2,};
enum MACRO_CS {CS_E_FIRST = 0x80040164,CS_E_LAST = 0x8004016F,CS_E_PACKAGE_NOTFOUND = 0x80040164,CS_E_NOT_DELETABLE = 0x80040165,CS_E_CLASS_NOTFOUND = 0x80040166,CS_E_INVALID_VERSION = 0x80040167,CS_E_NO_CLASSSTORE = 0x80040168,CS_E_OBJECT_NOTFOUND = 0x80040169,CS_E_OBJECT_ALREADY_EXISTS = 0x8004016A,CS_E_INVALID_PATH = 0x8004016B,CS_E_NETWORK_ERROR = 0x8004016C,CS_E_ADMIN_LIMIT_EXCEEDED = 0x8004016D,CS_E_SCHEMA_MISMATCH = 0x8004016E,CS_E_INTERNAL_ERROR = 0x8004016F,};
enum MACRO_CT {CT_CTYPE1 = 0x1,CT_CTYPE2 = 0x2,CT_CTYPE3 = 0x4,};
enum MACRO_CW {CW_USEDEFAULT = 0x80000000,};
enum MACRO_DA {DA_LAST = 0x7FFFFFFF,};
enum MACRO_DC {DC_FIELDS = 1,DC_PAPERS = 2,DC_PAPERSIZE = 3,DC_MINEXTENT = 4,DC_MAXEXTENT = 5,DC_BINS = 6,DC_DUPLEX = 7,DC_SIZE = 8,DC_EXTRA = 9,DC_VERSION = 10,DC_DRIVER = 11,DC_BINNAMES = 12,DC_ENUMRESOLUTIONS = 13,DC_FILEDEPENDENCIES = 14,DC_TRUETYPE = 15,DC_PAPERNAMES = 16,DC_ORIENTATION = 17,DC_COPIES = 18,};
enum MACRO_DD {DD_DEFSCROLLINSET = 11,DD_DEFSCROLLDELAY = 50,DD_DEFSCROLLINTERVAL = 50,DD_DEFDRAGDELAY = 200,DD_DEFDRAGMINDIST = 2,};
enum MACRO_DF {DF_ALLOWOTHERACCOUNTHOOK = 0x1,};
enum MACRO_DI {DI_APPBANDING = 0x1,DI_ROPS_READ_DESTINATION = 0x2,};
enum MACRO_DL {DL_BEGINDRAG = 1157,DL_DRAGGING = 1158,DL_DROPPED = 1159,DL_CANCELDRAG = 1160,DL_CURSORSET = 0,DL_STOPCURSOR = 1,DL_COPYCURSOR = 2,DL_MOVECURSOR = 3,};
enum MACRO_DM {DM_UPDATE = 1,DM_COPY = 2,DM_PROMPT = 4,DM_MODIFY = 8,DM_IN_BUFFER = 8,DM_IN_PROMPT = 4,DM_OUT_BUFFER = 2,DM_OUT_DEFAULT = 1,};
enum MACRO_DN {DN_DEFAULTPRN = 0x1,};
enum MACRO_DO {DO_DROPFILE = 0x454C4946,DO_PRINTFILE = 0x544E5250,};
enum MACRO_DP {DP_STD_TREEVIEWPAGE = 0xFFFF,DP_STD_DOCPROPPAGE2 = 0xFFFE,DP_STD_DOCPROPPAGE1 = 0xFFFD,DP_STD_RESERVED_START = 0xFFF0,};
enum MACRO_DS {DS_ABSALIGN = 0x1,DS_SYSMODAL = 0x2,DS_LOCALEDIT = 0x20,DS_SETFONT = 0x40,DS_MODALFRAME = 0x80,DS_NOIDLEMSG = 0x100,DS_SETFOREGROUND = 0x200,DS_3DLOOK = 0x4,DS_FIXEDSYS = 0x8,DS_NOFAILCREATE = 0x10,DS_CONTROL = 0x400,DS_CENTER = 0x800,DS_CENTERMOUSE = 0x1000,DS_CONTEXTHELP = 0x2000,DS_SHELLFONT = 0x48,};
enum MACRO_DT {DT_PLOTTER = 0,DT_RASDISPLAY = 1,DT_RASPRINTER = 2,DT_RASCAMERA = 3,DT_CHARSTREAM = 4,DT_METAFILE = 5,DT_DISPFILE = 6,};
enum MACRO_DV {DV_E_FORMATETC = 0x80040064,DV_E_DVTARGETDEVICE = 0x80040065,DV_E_STGMEDIUM = 0x80040066,DV_E_STATDATA = 0x80040067,DV_E_LINDEX = 0x80040068,DV_E_TYMED = 0x80040069,DV_E_CLIPFORMAT = 0x8004006A,DV_E_DVASPECT = 0x8004006B,DV_E_DVTARGETDEVICE_SIZE = 0x8004006C,DV_E_NOIVIEWOBJECT = 0x8004006D,};
enum MACRO_DX {DX_OK = 0x0,};
enum MACRO_EC {EC_LEFTMARGIN = 0x1,EC_RIGHTMARGIN = 0x2,EC_USEFONTINFO = 0xFFFF,};
enum MACRO_ED {ED_ABORTDOC = 1,};
enum MACRO_EM {EM_GETSEL = 0xB0,EM_SETSEL = 0xB1,EM_GETRECT = 0xB2,EM_SETRECT = 0xB3,EM_SETRECTNP = 0xB4,EM_SCROLL = 0xB5,EM_LINESCROLL = 0xB6,EM_SCROLLCARET = 0xB7,EM_GETMODIFY = 0xB8,EM_SETMODIFY = 0xB9,EM_GETLINECOUNT = 0xBA,EM_LINEINDEX = 0xBB,EM_SETHANDLE = 0xBC,EM_GETHANDLE = 0xBD,EM_GETTHUMB = 0xBE,EM_LINELENGTH = 0xC1,EM_REPLACESEL = 0xC2,EM_GETLINE = 0xC4,EM_LIMITTEXT = 0xC5,EM_CANUNDO = 0xC6,EM_UNDO = 0xC7,EM_FMTLINES = 0xC8,EM_LINEFROMCHAR = 0xC9,EM_SETTABSTOPS = 0xCB,EM_SETPASSWORDCHAR = 0xCC,EM_EMPTYUNDOBUFFER = 0xCD,EM_GETFIRSTVISIBLELINE = 0xCE,EM_SETREADONLY = 0xCF,EM_SETWORDBREAKPROC = 0xD0,EM_GETWORDBREAKPROC = 0xD1,EM_GETPASSWORDCHAR = 0xD2,EM_SETMARGINS = 0xD3,EM_GETMARGINS = 0xD4,EM_SETLIMITTEXT = 0xC5,EM_GETLIMITTEXT = 0xD5,EM_POSFROMCHAR = 0xD6,EM_CHARFROMPOS = 0xD7,EM_SETIMESTATUS = 0xD8,EM_GETIMESTATUS = 0xD9,};
enum MACRO_EN {EN_SETFOCUS = 0x100,EN_KILLFOCUS = 0x200,EN_CHANGE = 0x300,EN_UPDATE = 0x400,EN_ERRSPACE = 0x500,EN_MAXTEXT = 0x501,EN_HSCROLL = 0x601,EN_VSCROLL = 0x602,EN_ALIGN_LTR_EC = 0x700,EN_ALIGN_RTL_EC = 0x701,};
enum MACRO_ES {ES_SYSTEM_REQUIRED = 0x1,ES_DISPLAY_REQUIRED = 0x2,ES_USER_PRESENT = 0x4,ES_CONTINUOUS = 0x80000000,};
enum MACRO_ET {ET_None = 0,ET_Require = 1,ET_RequireMax = 2,ET_Optional = 3,};
enum MACRO_EV {EV_RXCHAR = 0x1,EV_RXFLAG = 0x2,EV_TXEMPTY = 0x4,EV_CTS = 0x8,EV_DSR = 0x10,EV_RLSD = 0x20,EV_BREAK = 0x40,EV_ERR = 0x80,EV_RING = 0x100,EV_PERR = 0x200,EV_RX80FULL = 0x400,EV_EVENT1 = 0x800,EV_EVENT2 = 0x1000,};
enum MACRO_FC {FC_RECT = 1,FC_RECT4 = 2,FC_COMPLEX = 3,};
enum MACRO_FD {FD_SETSIZE = 64,};
enum MACRO_FE {FE_FONTSMOOTHINGSTANDARD = 0x1,FE_FONTSMOOTHINGCLEARTYPE = 0x2,FE_FONTSMOOTHINGDOCKING = 0x8000,};
enum MACRO_FF {FF_DONTCARE = 0,FF_ROMAN = 16,FF_SWISS = 32,FF_MODERN = 48,FF_SCRIPT = 64,FF_DECORATIVE = 80,};
enum MACRO_FG {FG_CANCHANGE = 0x80,};
enum MACRO_FL {FL_ZERO_MEMORY = 0x1,FL_NONPAGED_MEMORY = 0x2,};
enum MACRO_FM {FM_VERSION_NUMBER = 0x0,FM_TYPE_LICENSED = 0x2,FM_READONLY_EMBED = 0x4,FM_EDITABLE_EMBED = 0x8,FM_NO_EMBEDDING = 0x2,FM_INFO_TECH_TRUETYPE = 0x1,FM_INFO_TECH_BITMAP = 0x2,FM_INFO_TECH_STROKE = 0x4,FM_INFO_TECH_OUTLINE_NOT_TRUETYPE = 0x8,FM_INFO_ARB_XFORMS = 0x10,FM_INFO_1BPP = 0x20,FM_INFO_4BPP = 0x40,FM_INFO_8BPP = 0x80,FM_INFO_16BPP = 0x100,FM_INFO_24BPP = 0x200,FM_INFO_32BPP = 0x400,FM_INFO_INTEGER_WIDTH = 0x800,FM_INFO_CONSTANT_WIDTH = 0x1000,FM_INFO_NOT_CONTIGUOUS = 0x2000,FM_INFO_TECH_MM = 0x4000,FM_INFO_RETURNS_OUTLINES = 0x8000,FM_INFO_RETURNS_STROKES = 0x10000,FM_INFO_RETURNS_BITMAPS = 0x20000,FM_INFO_DSIG = 0x40000,FM_INFO_RIGHT_HANDED = 0x80000,FM_INFO_INTEGRAL_SCALING = 0x100000,FM_INFO_90DEGREE_ROTATIONS = 0x200000,FM_INFO_OPTICALLY_FIXED_PITCH = 0x400000,FM_INFO_DO_NOT_ENUMERATE = 0x800000,FM_INFO_ISOTROPIC_SCALING_ONLY = 0x1000000,FM_INFO_ANISOTROPIC_SCALING_ONLY = 0x2000000,FM_INFO_TECH_CFF = 0x4000000,FM_INFO_FAMILY_EQUIV = 0x8000000,FM_INFO_DBCS_FIXED_PITCH = 0x10000000,FM_INFO_NONNEGATIVE_AC = 0x20000000,FM_INFO_IGNORE_TC_RA_ABLE = 0x40000000,FM_INFO_TECH_TYPE1 = 0x80000000,};
enum MACRO_FO {FO_MOVE = 0x1,FO_COPY = 0x2,FO_DELETE = 0x3,FO_RENAME = 0x4,};
enum MACRO_FP {FP_ALTERNATEMODE = 1,FP_WINDINGMODE = 2,};
enum MACRO_FR {FR_PRIVATE = 0x10,FR_NOT_ENUM = 0x20,};
enum MACRO_FS {FS_CASE_IS_PRESERVED = 2,FS_CASE_SENSITIVE = 1,FS_UNICODE_STORED_ON_DISK = 4,FS_PERSISTENT_ACLS = 8,FS_VOL_IS_COMPRESSED = 32768,FS_FILE_COMPRESSION = 16,FS_FILE_ENCRYPTION = 131072,};
enum MACRO_FW {FW_DONTCARE = 0,FW_THIN = 100,FW_EXTRALIGHT = 200,FW_LIGHT = 300,FW_NORMAL = 400,FW_MEDIUM = 500,FW_SEMIBOLD = 600,FW_BOLD = 700,FW_EXTRABOLD = 800,FW_HEAVY = 900,FW_ULTRALIGHT = 200,FW_REGULAR = 400,FW_DEMIBOLD = 600,FW_ULTRABOLD = 800,FW_BLACK = 900,};
enum MACRO_GA {GA_PARENT = 1,GA_ROOT = 2,GA_ROOTOWNER = 3,};
enum MACRO_GL {GL_LEVEL_NOGUIDELINE = 0x0,GL_LEVEL_FATAL = 0x1,GL_LEVEL_ERROR = 0x2,GL_LEVEL_WARNING = 0x3,GL_LEVEL_INFORMATION = 0x4,GL_ID_UNKNOWN = 0x0,GL_ID_NOMODULE = 0x1,GL_ID_NODICTIONARY = 0x10,GL_ID_CANNOTSAVE = 0x11,GL_ID_NOCONVERT = 0x20,GL_ID_TYPINGERROR = 0x21,GL_ID_TOOMANYSTROKE = 0x22,GL_ID_READINGCONFLICT = 0x23,GL_ID_INPUTREADING = 0x24,GL_ID_INPUTRADICAL = 0x25,GL_ID_INPUTCODE = 0x26,GL_ID_INPUTSYMBOL = 0x27,GL_ID_CHOOSECANDIDATE = 0x28,GL_ID_REVERSECONVERSION = 0x29,GL_ID_PRIVATE_FIRST = 0x8000,GL_ID_PRIVATE_LAST = 0xFFFF,};
enum MACRO_GM {GM_COMPATIBLE = 1,GM_ADVANCED = 2,GM_LAST = 2,};
enum MACRO_GR {GR_GDIOBJECTS = 0,GR_USEROBJECTS = 1,};
enum MACRO_GS {GS_8BIT_INDICES = 0x1,};
enum MACRO_GW {GW_HWNDFIRST = 0,GW_HWNDLAST = 1,GW_HWNDNEXT = 2,GW_HWNDPREV = 3,GW_OWNER = 4,GW_CHILD = 5,GW_ENABLEDPOPUP = 6,GW_MAX = 6,};
enum MACRO_GX {GX_IDENTITY = 0,GX_OFFSET = 1,GX_SCALE = 2,GX_GENERAL = 3,};
enum MACRO_HC {HC_ACTION = 0,HC_GETNEXT = 1,HC_SKIP = 2,HC_NOREMOVE = 3,HC_NOREM = 3,HC_SYSMODALON = 4,HC_SYSMODALOFF = 5,};
enum MACRO_HH {HH_DISPLAY_TOPIC = 0x0,HH_HELP_FINDER = 0x0,HH_DISPLAY_TOC = 0x1,HH_DISPLAY_INDEX = 0x2,HH_DISPLAY_SEARCH = 0x3,HH_SET_WIN_TYPE = 0x4,HH_GET_WIN_TYPE = 0x5,HH_GET_WIN_HANDLE = 0x6,HH_ENUM_INFO_TYPE = 0x7,HH_SET_INFO_TYPE = 0x8,HH_SYNC = 0x9,HH_RESERVED1 = 0xA,HH_RESERVED2 = 0xB,HH_RESERVED3 = 0xC,HH_KEYWORD_LOOKUP = 0xD,HH_DISPLAY_TEXT_POPUP = 0xE,HH_HELP_CONTEXT = 0xF,HH_TP_HELP_CONTEXTMENU = 0x10,HH_TP_HELP_WM_HELP = 0x11,HH_CLOSE_ALL = 0x12,HH_ALINK_LOOKUP = 0x13,HH_GET_LAST_ERROR = 0x14,HH_ENUM_CATEGORY = 0x15,HH_ENUM_CATEGORY_IT = 0x16,HH_RESET_IT_FILTER = 0x17,HH_SET_INCLUSIVE_FILTER = 0x18,HH_SET_EXCLUSIVE_FILTER = 0x19,HH_INITIALIZE = 0x1C,HH_UNINITIALIZE = 0x1D,HH_SET_QUERYSERVICE = 0x1E,HH_PRETRANSLATEMESSAGE = 0xFD,HH_SET_GLOBAL_PROPERTY = 0xFC,};
enum MACRO_HP {HP_ALGID = 0x1,HP_HASHVAL = 0x2,HP_HASHSIZE = 0x4,HP_HMAC_INFO = 0x5,HP_TLS1PRF_LABEL = 0x6,HP_TLS1PRF_SEED = 0x7,};
enum MACRO_HS {HS_HORIZONTAL = 0,HS_VERTICAL = 1,HS_FDIAGONAL = 2,HS_BDIAGONAL = 3,HS_CROSS = 4,HS_DIAGCROSS = 5,};
enum MACRO_HT {HT_PATSIZE_2x2 = 0,HT_PATSIZE_2x2_M = 1,HT_PATSIZE_4x4 = 2,HT_PATSIZE_4x4_M = 3,HT_PATSIZE_6x6 = 4,HT_PATSIZE_6x6_M = 5,HT_PATSIZE_8x8 = 6,HT_PATSIZE_8x8_M = 7,HT_PATSIZE_10x10 = 8,HT_PATSIZE_10x10_M = 9,HT_PATSIZE_12x12 = 10,HT_PATSIZE_12x12_M = 11,HT_PATSIZE_14x14 = 12,HT_PATSIZE_14x14_M = 13,HT_PATSIZE_16x16 = 14,HT_PATSIZE_16x16_M = 15,HT_PATSIZE_SUPERCELL = 16,HT_PATSIZE_SUPERCELL_M = 17,HT_PATSIZE_USER = 18,HT_PATSIZE_MAX_INDEX = 18,HT_PATSIZE_DEFAULT = 17,HT_USERPAT_CX_MIN = 4,HT_USERPAT_CX_MAX = 256,HT_USERPAT_CY_MIN = 4,HT_USERPAT_CY_MAX = 256,HT_FORMAT_1BPP = 0,HT_FORMAT_4BPP = 2,HT_FORMAT_4BPP_IRGB = 3,HT_FORMAT_8BPP = 4,HT_FORMAT_16BPP = 5,HT_FORMAT_24BPP = 6,HT_FORMAT_32BPP = 7,HT_FLAG_SQUARE_DEVICE_PEL = 1,HT_FLAG_HAS_BLACK_DYE = 2,HT_FLAG_ADDITIVE_PRIMS = 4,HT_FLAG_USE_8BPP_BITMASK = 8,HT_FLAG_INK_HIGH_ABSORPTION = 16,HT_FLAG_INK_ABSORPTION_INDICES = 96,HT_FLAG_DO_DEVCLR_XFORM = 128,HT_FLAG_OUTPUT_CMY = 256,HT_FLAG_PRINT_DRAFT_MODE = 512,HT_FLAG_INVERT_8BPP_BITMASK_IDX = 1024,HT_FLAG_8BPP_CMY332_MASK = -16777216,HT_FLAG_INK_ABSORPTION_IDX0 = 0,HT_FLAG_INK_ABSORPTION_IDX1 = 32,HT_FLAG_INK_ABSORPTION_IDX2 = 64,HT_FLAG_INK_ABSORPTION_IDX3 = 96,HT_FLAG_HIGHEST_INK_ABSORPTION = 112,HT_FLAG_HIGHER_INK_ABSORPTION = 80,HT_FLAG_HIGH_INK_ABSORPTION = 48,HT_FLAG_NORMAL_INK_ABSORPTION = 0,HT_FLAG_LOW_INK_ABSORPTION = 32,HT_FLAG_LOWER_INK_ABSORPTION = 64,HT_FLAG_LOWEST_INK_ABSORPTION = 96,HT_BITMASKPALRGB = 809650002,};
enum MACRO_HW {HW_PROFILE_GUIDLEN = 39,};
enum MACRO_IC {IC_AFFINE = 262144,IC_PROJECTIVE = 0,};
enum MACRO_ID {ID_PSRESTARTWINDOWS = 0x2,ID_PSREBOOTSYSTEM = 0x3,};
enum MACRO_IE {IE_BADID = -1,IE_OPEN = -2,IE_NOPEN = -3,IE_MEMORY = -4,IE_DEFAULT = -5,IE_HARDWARE = -10,IE_BYTESIZE = -11,IE_BAUDRATE = -12,};
enum MACRO_IF {IF_TYPE_OTHER = 1,IF_TYPE_REGULAR_1822 = 2,IF_TYPE_HDH_1822 = 3,IF_TYPE_DDN_X25 = 4,IF_TYPE_RFC877_X25 = 5,IF_TYPE_ETHERNET_CSMACD = 6,IF_TYPE_IS088023_CSMACD = 7,IF_TYPE_ISO88024_TOKENBUS = 8,IF_TYPE_ISO88025_TOKENRING = 9,IF_TYPE_ISO88026_MAN = 10,IF_TYPE_STARLAN = 11,IF_TYPE_PROTEON_10MBIT = 12,IF_TYPE_PROTEON_80MBIT = 13,IF_TYPE_HYPERCHANNEL = 14,IF_TYPE_FDDI = 15,IF_TYPE_LAP_B = 16,IF_TYPE_SDLC = 17,IF_TYPE_DS1 = 18,IF_TYPE_E1 = 19,IF_TYPE_BASIC_ISDN = 20,IF_TYPE_PRIMARY_ISDN = 21,IF_TYPE_PROP_POINT2POINT_SERIAL = 22,IF_TYPE_PPP = 23,IF_TYPE_SOFTWARE_LOOPBACK = 24,IF_TYPE_EON = 25,IF_TYPE_ETHERNET_3MBIT = 26,IF_TYPE_NSIP = 27,IF_TYPE_SLIP = 28,IF_TYPE_ULTRA = 29,IF_TYPE_DS3 = 30,IF_TYPE_SIP = 31,IF_TYPE_FRAMERELAY = 32,IF_TYPE_RS232 = 33,IF_TYPE_PARA = 34,IF_TYPE_ARCNET = 35,IF_TYPE_ARCNET_PLUS = 36,IF_TYPE_ATM = 37,IF_TYPE_MIO_X25 = 38,IF_TYPE_SONET = 39,IF_TYPE_X25_PLE = 40,IF_TYPE_ISO88022_LLC = 41,IF_TYPE_LOCALTALK = 42,IF_TYPE_SMDS_DXI = 43,IF_TYPE_FRAMERELAY_SERVICE = 44,IF_TYPE_V35 = 45,IF_TYPE_HSSI = 46,IF_TYPE_HIPPI = 47,IF_TYPE_MODEM = 48,IF_TYPE_AAL5 = 49,IF_TYPE_SONET_PATH = 50,IF_TYPE_SONET_VT = 51,IF_TYPE_SMDS_ICIP = 52,IF_TYPE_PROP_VIRTUAL = 53,IF_TYPE_PROP_MULTIPLEXOR = 54,IF_TYPE_IEEE80212 = 55,IF_TYPE_FIBRECHANNEL = 56,IF_TYPE_HIPPIINTERFACE = 57,IF_TYPE_FRAMERELAY_INTERCONNECT = 58,IF_TYPE_AFLANE_8023 = 59,IF_TYPE_AFLANE_8025 = 60,IF_TYPE_CCTEMUL = 61,IF_TYPE_FASTETHER = 62,IF_TYPE_ISDN = 63,IF_TYPE_V11 = 64,IF_TYPE_V36 = 65,IF_TYPE_G703_64K = 66,IF_TYPE_G703_2MB = 67,IF_TYPE_QLLC = 68,IF_TYPE_FASTETHER_FX = 69,IF_TYPE_CHANNEL = 70,IF_TYPE_IEEE80211 = 71,IF_TYPE_IBM370PARCHAN = 72,IF_TYPE_ESCON = 73,IF_TYPE_DLSW = 74,IF_TYPE_ISDN_S = 75,IF_TYPE_ISDN_U = 76,IF_TYPE_LAP_D = 77,IF_TYPE_IPSWITCH = 78,IF_TYPE_RSRB = 79,IF_TYPE_ATM_LOGICAL = 80,IF_TYPE_DS0 = 81,IF_TYPE_DS0_BUNDLE = 82,IF_TYPE_BSC = 83,IF_TYPE_ASYNC = 84,IF_TYPE_CNR = 85,IF_TYPE_ISO88025R_DTR = 86,IF_TYPE_EPLRS = 87,IF_TYPE_ARAP = 88,IF_TYPE_PROP_CNLS = 89,IF_TYPE_HOSTPAD = 90,IF_TYPE_TERMPAD = 91,IF_TYPE_FRAMERELAY_MPI = 92,IF_TYPE_X213 = 93,IF_TYPE_ADSL = 94,IF_TYPE_RADSL = 95,IF_TYPE_SDSL = 96,IF_TYPE_VDSL = 97,IF_TYPE_ISO88025_CRFPRINT = 98,IF_TYPE_MYRINET = 99,IF_TYPE_VOICE_EM = 100,IF_TYPE_VOICE_FXO = 101,IF_TYPE_VOICE_FXS = 102,IF_TYPE_VOICE_ENCAP = 103,IF_TYPE_VOICE_OVERIP = 104,IF_TYPE_ATM_DXI = 105,IF_TYPE_ATM_FUNI = 106,IF_TYPE_ATM_IMA = 107,IF_TYPE_PPPMULTILINKBUNDLE = 108,IF_TYPE_IPOVER_CDLC = 109,IF_TYPE_IPOVER_CLAW = 110,IF_TYPE_STACKTOSTACK = 111,IF_TYPE_VIRTUALIPADDRESS = 112,IF_TYPE_MPC = 113,IF_TYPE_IPOVER_ATM = 114,IF_TYPE_ISO88025_FIBER = 115,IF_TYPE_TDLC = 116,IF_TYPE_GIGABITETHERNET = 117,IF_TYPE_HDLC = 118,IF_TYPE_LAP_F = 119,IF_TYPE_V37 = 120,IF_TYPE_X25_MLP = 121,IF_TYPE_X25_HUNTGROUP = 122,IF_TYPE_TRANSPHDLC = 123,IF_TYPE_INTERLEAVE = 124,IF_TYPE_FAST = 125,IF_TYPE_IP = 126,IF_TYPE_DOCSCABLE_MACLAYER = 127,IF_TYPE_DOCSCABLE_DOWNSTREAM = 128,IF_TYPE_DOCSCABLE_UPSTREAM = 129,IF_TYPE_A12MPPSWITCH = 130,IF_TYPE_TUNNEL = 131,IF_TYPE_COFFEE = 132,IF_TYPE_CES = 133,IF_TYPE_ATM_SUBINTERFACE = 134,IF_TYPE_L2_VLAN = 135,IF_TYPE_L3_IPVLAN = 136,IF_TYPE_L3_IPXVLAN = 137,IF_TYPE_DIGITALPOWERLINE = 138,IF_TYPE_MEDIAMAILOVERIP = 139,IF_TYPE_DTM = 140,IF_TYPE_DCN = 141,IF_TYPE_IPFORWARD = 142,IF_TYPE_MSDSL = 143,IF_TYPE_IEEE1394 = 144,IF_TYPE_RECEIVE_ONLY = 145,};
enum MACRO_IG {IG_KD_CONTEXT = 1,IG_READ_CONTROL_SPACE = 2,IG_WRITE_CONTROL_SPACE = 3,IG_READ_IO_SPACE = 4,IG_WRITE_IO_SPACE = 5,IG_READ_PHYSICAL = 6,IG_WRITE_PHYSICAL = 7,IG_READ_IO_SPACE_EX = 8,IG_WRITE_IO_SPACE_EX = 9,IG_KSTACK_HELP = 10,IG_SET_THREAD = 11,IG_READ_MSR = 12,IG_WRITE_MSR = 13,IG_GET_DEBUGGER_DATA = 14,IG_GET_KERNEL_VERSION = 15,IG_RELOAD_SYMBOLS = 16,IG_GET_SET_SYMPATH = 17,IG_GET_EXCEPTION_RECORD = 18,IG_IS_PTR64 = 19,IG_GET_BUS_DATA = 20,IG_SET_BUS_DATA = 21,IG_DUMP_SYMBOL_INFO = 22,IG_LOWMEM_CHECK = 23,IG_SEARCH_MEMORY = 24,IG_GET_CURRENT_THREAD = 25,IG_GET_CURRENT_PROCESS = 26,IG_GET_TYPE_SIZE = 27,IG_GET_CURRENT_PROCESS_HANDLE = 28,IG_GET_INPUT_LINE = 29,IG_GET_EXPRESSION_EX = 30,IG_TRANSLATE_VIRTUAL_TO_PHYSICAL = 31,IG_GET_CACHE_SIZE = 32,IG_READ_PHYSICAL_WITH_FLAGS = 33,IG_WRITE_PHYSICAL_WITH_FLAGS = 34,IG_POINTER_SEARCH_PHYSICAL = 35,IG_GET_COR_DATA_ACCESS = 36,IG_GET_TEB_ADDRESS = 128,IG_GET_PEB_ADDRESS = 129,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,};
enum MACRO_IO {IO_REPARSE_TAG_RESERVED_ZERO = 0,IO_REPARSE_TAG_RESERVED_ONE = 1,IO_REPARSE_TAG_RESERVED_RANGE = 1,IO_REPARSE_TAG_MOUNT_POINT = -1610612733,IO_REPARSE_TAG_HSM = -1073741820,IO_REPARSE_TAG_SIS = -2147483641,IO_REPARSE_TAG_DFS = -2147483638,IO_REPARSE_TAG_FILTER_MANAGER = -2147483637,IO_COMPLETION_MODIFY_STATE = 2,IO_COMPLETION_ALL_ACCESS = 2031619,};
enum MACRO_IP {IP_OPTIONS = 1,IP_MULTICAST_IF = 2,IP_MULTICAST_TTL = 3,IP_MULTICAST_LOOP = 4,IP_ADD_MEMBERSHIP = 5,IP_DROP_MEMBERSHIP = 6,IP_TTL = 7,IP_TOS = 8,IP_DONTFRAGMENT = 9,IP_DEFAULT_MULTICAST_TTL = 1,IP_DEFAULT_MULTICAST_LOOP = 1,IP_MAX_MEMBERSHIPS = 20,};
enum MACRO_IS {IS_TEXT_UNICODE_ASCII16 = 0x1,IS_TEXT_UNICODE_REVERSE_ASCII16 = 0x10,IS_TEXT_UNICODE_STATISTICS = 0x2,IS_TEXT_UNICODE_REVERSE_STATISTICS = 0x20,IS_TEXT_UNICODE_CONTROLS = 0x4,IS_TEXT_UNICODE_REVERSE_CONTROLS = 0x40,IS_TEXT_UNICODE_SIGNATURE = 0x8,IS_TEXT_UNICODE_REVERSE_SIGNATURE = 0x80,IS_TEXT_UNICODE_ILLEGAL_CHARS = 0x100,IS_TEXT_UNICODE_ODD_LENGTH = 0x200,IS_TEXT_UNICODE_DBCS_LEADBYTE = 0x400,IS_TEXT_UNICODE_NULL_BYTES = 0x1000,IS_TEXT_UNICODE_UNICODE_MASK = 0xF,IS_TEXT_UNICODE_REVERSE_MASK = 0xF0,IS_TEXT_UNICODE_NOT_UNICODE_MASK = 0xF00,IS_TEXT_UNICODE_NOT_ASCII_MASK = 0xF000,};
enum MACRO_IT {IT_COMPACT = 0x0,IT_TYPICAL = 0x1,IT_PORTABLE = 0x2,IT_CUSTOM = 0x3,};
enum MACRO_JL {JL_SENDER_ONLY = 0x1,JL_RECEIVER_ONLY = 0x2,JL_BOTH = 0x4,};
enum MACRO_KF {KF_EXTENDED = 0x100,KF_DLGMODE = 0x800,KF_MENUMODE = 0x1000,KF_ALTDOWN = 0x2000,KF_REPEAT = 0x4000,KF_UP = 0x8000,};
enum MACRO_KL {KL_NAMELENGTH = 9,};
enum MACRO_KP {KP_IV = 1,KP_SALT = 2,KP_PADDING = 3,KP_MODE = 4,KP_MODE_BITS = 5,KP_PERMISSIONS = 6,KP_ALGID = 7,KP_BLOCKLEN = 8,KP_KEYLEN = 9,KP_SALT_EX = 10,KP_P = 11,KP_G = 12,KP_Q = 13,KP_X = 14,KP_Y = 15,KP_RA = 16,KP_RB = 17,KP_INFO = 18,KP_EFFECTIVE_KEYLEN = 19,KP_SCHANNEL_ALG = 20,KP_CLIENT_RANDOM = 21,KP_SERVER_RANDOM = 22,KP_RP = 23,KP_PRECOMP_MD5 = 24,KP_PRECOMP_SHA = 25,KP_CERTIFICATE = 26,KP_CLEAR_KEY = 27,KP_PUB_EX_LEN = 28,KP_PUB_EX_VAL = 29,KP_KEYVAL = 30,KP_ADMIN_PIN = 31,KP_KEYEXCHANGE_PIN = 32,KP_SIGNATURE_PIN = 33,KP_PREHASH = 34,KP_ROUNDS = 35,KP_OAEP_PARAMS = 36,KP_CMS_KEY_INFO = 37,KP_CMS_DH_KEY_INFO = 38,KP_PUB_PARAMS = 39,KP_VERIFY_PARAMS = 40,KP_HIGHEST_VERSION = 41,KP_GET_USE_COUNT = 42,};
enum MACRO_KS {KS_DVD_CGMS_RESERVED_MASK = 0x78,KS_DVD_CGMS_COPY_PROTECT_MASK = 0x18,KS_DVD_CGMS_COPY_PERMITTED = 0x0,KS_DVD_CGMS_COPY_ONCE = 0x10,KS_DVD_CGMS_NO_COPY = 0x18,KS_DVD_COPYRIGHT_MASK = 0x40,KS_DVD_NOT_COPYRIGHTED = 0x0,KS_DVD_COPYRIGHTED = 0x40,KS_DVD_SECTOR_PROTECT_MASK = 0x20,KS_DVD_SECTOR_NOT_PROTECTED = 0x0,KS_DVD_SECTOR_PROTECTED = 0x20,KS_BI_RGB = 0x0,KS_BI_RLE8 = 0x1,KS_BI_RLE4 = 0x2,KS_BI_BITFIELDS = 0x3,KS_iPALETTE_COLORS = 0x100,KS_iEGA_COLORS = 0x10,KS_iMASK_COLORS = 0x3,KS_iTRUECOLOR = 0x10,KS_iRED = 0x0,KS_iGREEN = 0x1,KS_iBLUE = 0x2,KS_iPALETTE = 0x8,KS_iMAXBITS = 0x8,KS_VBIDATARATE_NABTS = 0x576428,KS_VBIDATARATE_CC = 0x7AEC5,KS_VBISAMPLINGRATE_4X_NABTS = 0x15D90A0,KS_VBISAMPLINGRATE_47X_NABTS = 0x19BFCC0,KS_VBISAMPLINGRATE_5X_NABTS = 0x1B4F4C8,KS_TVTUNER_CHANGE_BEGIN_TUNE = 0x1,KS_TVTUNER_CHANGE_END_TUNE = 0x2,KS_INTERLACE_IsInterlaced = 0x1,KS_INTERLACE_1FieldPerSample = 0x2,KS_INTERLACE_Field1First = 0x4,KS_INTERLACE_UNUSED = 0x8,KS_INTERLACE_FieldPatternMask = 0x30,KS_INTERLACE_FieldPatField1Only = 0x0,KS_INTERLACE_FieldPatField2Only = 0x10,KS_INTERLACE_FieldPatBothRegular = 0x20,KS_INTERLACE_FieldPatBothIrregular = 0x30,KS_INTERLACE_DisplayModeMask = 0xC0,KS_INTERLACE_DisplayModeBobOnly = 0x0,KS_INTERLACE_DisplayModeWeaveOnly = 0x40,KS_INTERLACE_DisplayModeBobOrWeave = 0x80,KS_MPEG2_DoPanScan = 0x1,KS_MPEG2_DVDLine21Field1 = 0x2,KS_MPEG2_DVDLine21Field2 = 0x4,KS_MPEG2_SourceIsLetterboxed = 0x8,KS_MPEG2_FilmCameraMode = 0x10,KS_MPEG2_LetterboxAnalogOut = 0x20,KS_MPEG2_DSS_UserData = 0x40,KS_MPEG2_DVB_UserData = 0x80,KS_MPEG2_27MhzTimebase = 0x100,KS_MAX_SIZE_MPEG1_SEQUENCE_INFO = 0x8C,KS_MPEGAUDIOINFO_27MhzTimebase = 0x1,KS_VIDEOSTREAM_PREVIEW = 0x1,KS_VIDEOSTREAM_CAPTURE = 0x2,KS_VIDEOSTREAM_VBI = 0x10,KS_VIDEOSTREAM_NABTS = 0x20,KS_VIDEOSTREAM_CC = 0x100,KS_VIDEOSTREAM_EDS = 0x200,KS_VIDEOSTREAM_TELETEXT = 0x400,KS_VIDEOSTREAM_STILL = 0x1000,KS_VIDEOSTREAM_IS_VPE = 0x8000,KS_VIDEO_ALLOC_VPE_SYSTEM = 0x1,KS_VIDEO_ALLOC_VPE_DISPLAY = 0x2,KS_VIDEO_ALLOC_VPE_AGP = 0x4,KS_VBICAP_PROTECTION_MV_PRESENT = 0x1,KS_VBICAP_PROTECTION_MV_HARDWARE = 0x2,KS_VBICAP_PROTECTION_MV_DETECTED = 0x4,KS_NABTS_GROUPID_ORIGINAL_CONTENT_BASE = 0x800,KS_NABTS_GROUPID_ORIGINAL_CONTENT_ADVERTISER_BASE = 0x810,KS_NABTS_GROUPID_PRODUCTION_COMPANY_CONTENT_BASE = 0x820,KS_NABTS_GROUPID_PRODUCTION_COMPANY_ADVERTISER_BASE = 0x830,KS_NABTS_GROUPID_SYNDICATED_SHOW_CONTENT_BASE = 0x840,KS_NABTS_GROUPID_SYNDICATED_SHOW_ADVERTISER_BASE = 0x850,KS_NABTS_GROUPID_NETWORK_WIDE_CONTENT_BASE = 0x860,KS_NABTS_GROUPID_NETWORK_WIDE_ADVERTISER_BASE = 0x870,KS_NABTS_GROUPID_TELEVISION_STATION_CONTENT_BASE = 0x880,KS_NABTS_GROUPID_TELEVISION_STATION_ADVERTISER_BASE = 0x890,KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_CONTENT_BASE = 0x8A0,KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_ADVERTISER_BASE = 0x8B0,KS_NABTS_GROUPID_MICROSOFT_RESERVED_TEST_DATA_BASE = 0x8F0,};
enum MACRO_LA {LA_GEOMETRIC = 0x1,LA_ALTERNATE = 0x2,LA_STARTGAP = 0x4,LA_STYLED = 0x8,};
enum MACRO_LB {LB_CTLCODE = 0,LB_OKAY = 0,LB_ERR = -1,LB_ERRSPACE = -2,};
enum MACRO_LC {LC_NONE = 0,LC_POLYLINE = 2,LC_MARKER = 4,LC_POLYMARKER = 8,LC_WIDE = 16,LC_STYLED = 32,LC_WIDESTYLED = 64,LC_INTERIORS = 128,};
enum MACRO_LF {LF_FACESIZE = 32,LF_FULLFACESIZE = 64,};
enum MACRO_LM {LM_BAUD_1200 = 1200,LM_BAUD_2400 = 2400,LM_BAUD_9600 = 9600,LM_BAUD_19200 = 19200,LM_BAUD_38400 = 38400,LM_BAUD_57600 = 57600,LM_BAUD_115200 = 115200,LM_BAUD_576K = 576000,LM_BAUD_1152K = 1152000,LM_BAUD_4M = 4000000,};
enum MACRO_LP {LP_DEFAULT = 0x0,LP_MONOCHROME = 0x1,LP_VGACOLOR = 0x2,LP_COLOR = 0x4,};
enum MACRO_LR {LR_DEFAULTCOLOR = 0x0,LR_MONOCHROME = 0x1,LR_COLOR = 0x2,LR_COPYRETURNORG = 0x4,LR_COPYDELETEORG = 0x8,LR_LOADFROMFILE = 0x10,LR_LOADTRANSPARENT = 0x20,LR_DEFAULTSIZE = 0x40,LR_VGACOLOR = 0x80,LR_LOADMAP3DCOLORS = 0x1000,LR_CREATEDIBSECTION = 0x2000,LR_COPYFROMRESOURCE = 0x4000,LR_SHARED = 0x8000,};
enum MACRO_LV {LV_MAX_WORKAREAS = 16,};
enum MACRO_MA {MA_ACTIVATE = 1,MA_ACTIVATEANDEAT = 2,MA_NOACTIVATE = 3,MA_NOACTIVATEANDEAT = 4,};
enum MACRO_MB {MB_OK = 0x0,MB_OKCANCEL = 0x1,MB_ABORTRETRYIGNORE = 0x2,MB_YESNOCANCEL = 0x3,MB_YESNO = 0x4,MB_RETRYCANCEL = 0x5,MB_CANCELTRYCONTINUE = 0x6,MB_ICONHAND = 0x10,MB_ICONQUESTION = 0x20,MB_ICONEXCLAMATION = 0x30,MB_ICONASTERISK = 0x40,MB_USERICON = 0x80,MB_ICONWARNING = 0x30,MB_ICONERROR = 0x10,MB_ICONINFORMATION = 0x40,MB_ICONSTOP = 0x10,MB_DEFBUTTON1 = 0x0,MB_DEFBUTTON2 = 0x100,MB_DEFBUTTON3 = 0x200,MB_DEFBUTTON4 = 0x300,MB_APPLMODAL = 0x0,MB_SYSTEMMODAL = 0x1000,MB_TASKMODAL = 0x2000,MB_HELP = 0x4000,MB_NOFOCUS = 0x8000,MB_SETFOREGROUND = 0x10000,MB_DEFAULT_DESKTOP_ONLY = 0x20000,MB_TOPMOST = 0x40000,MB_RIGHT = 0x80000,MB_RTLREADING = 0x100000,MB_SERVICE_NOTIFICATION = 0x200000,MB_SERVICE_NOTIFICATION_NT3X = 0x40000,MB_TYPEMASK = 0xF,MB_ICONMASK = 0xF0,MB_DEFMASK = 0xF00,MB_MODEMASK = 0x3000,MB_MISCMASK = 0xC000,};
enum MACRO_MF {MF_INSERT = 0x0,MF_CHANGE = 0x80,MF_APPEND = 0x100,MF_DELETE = 0x200,MF_REMOVE = 0x1000,MF_BYCOMMAND = 0x0,MF_BYPOSITION = 0x400,MF_SEPARATOR = 0x800,MF_ENABLED = 0x0,MF_GRAYED = 0x1,MF_DISABLED = 0x2,MF_UNCHECKED = 0x0,MF_CHECKED = 0x8,MF_USECHECKBITMAPS = 0x200,MF_STRING = 0x0,MF_BITMAP = 0x4,MF_OWNERDRAW = 0x100,MF_POPUP = 0x10,MF_MENUBARBREAK = 0x20,MF_MENUBREAK = 0x40,MF_UNHILITE = 0x0,MF_HILITE = 0x80,MF_DEFAULT = 0x1000,MF_SYSMENU = 0x2000,MF_HELP = 0x4000,MF_RIGHTJUSTIFY = 0x4000,MF_MOUSESELECT = 0x8000,MF_END = 0x80,};
enum MACRO_MH {MH_CREATE = 1,MH_KEEP = 2,MH_DELETE = 3,MH_CLEANUP = 4,};
enum MACRO_MK {MK_E_FIRST = 0x800401E0,MK_E_LAST = 0x800401EF,MK_S_FIRST = 0x401E0,MK_S_LAST = 0x401EF,MK_E_CONNECTMANUALLY = 0x800401E0,MK_E_EXCEEDEDDEADLINE = 0x800401E1,MK_E_NEEDGENERIC = 0x800401E2,MK_E_UNAVAILABLE = 0x800401E3,MK_E_SYNTAX = 0x800401E4,MK_E_NOOBJECT = 0x800401E5,MK_E_INVALIDEXTENSION = 0x800401E6,MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = 0x800401E7,MK_E_NOTBINDABLE = 0x800401E8,MK_E_NOTBOUND = 0x800401E9,MK_E_CANTOPENFILE = 0x800401EA,MK_E_MUSTBOTHERUSER = 0x800401EB,MK_E_NOINVERSE = 0x800401EC,MK_E_NOSTORAGE = 0x800401ED,MK_E_NOPREFIX = 0x800401EE,MK_E_ENUMERATION_FAILED = 0x800401EF,};
enum MACRO_MM {MM_TEXT = 1,MM_LOMETRIC = 2,MM_HIMETRIC = 3,MM_LOENGLISH = 4,MM_HIENGLISH = 5,MM_TWIPS = 6,MM_ISOTROPIC = 7,MM_ANISOTROPIC = 8,MM_MIN = 1,MM_MAX = 8,MM_MAX_FIXEDSCALE = 6,};
enum MACRO_MN {MN_GETHMENU = 0x1E1,};
enum MACRO_MS {MS_CTS_ON = 0x10,MS_DSR_ON = 0x20,MS_RING_ON = 0x40,MS_RLSD_ON = 0x80,};
enum MACRO_NF {NF_QUERY = 3,NF_REQUERY = 4,};
enum MACRO_NI {NI_OPENCANDIDATE = 0x10,NI_CLOSECANDIDATE = 0x11,NI_SELECTCANDIDATESTR = 0x12,NI_CHANGECANDIDATELIST = 0x13,NI_FINALIZECONVERSIONRESULT = 0x14,NI_COMPOSITIONSTR = 0x15,NI_SETCANDIDATE_PAGESTART = 0x16,NI_SETCANDIDATE_PAGESIZE = 0x17,NI_IMEMENUSELECTED = 0x18,};
enum MACRO_NM {NM_FIRST = 0,NM_LAST = -99,};
enum MACRO_NO {NO_RECOVERY = 11003,NO_DATA = 11004,};
enum MACRO_NS {NS_ALL = 0,NS_SAP = 1,NS_NDS = 2,NS_PEER_BROWSE = 3,NS_SLP = 5,NS_DHCP = 6,NS_TCPIP_LOCAL = 10,NS_TCPIP_HOSTS = 11,NS_DNS = 12,NS_NETBT = 13,NS_WINS = 14,NS_NLA = 15,NS_NBP = 20,NS_MS = 30,NS_STDA = 31,NS_NTDS = 32,NS_X500 = 40,NS_NIS = 41,NS_NISPLUS = 42,NS_WRQ = 50,NS_NETDES = 60,};
enum MACRO_NT {NT_CONSOLE_PROPS_SIG = 0xA0000002,NT_FE_CONSOLE_PROPS_SIG = 0xA0000004,};
enum MACRO_OC {OC_BANK_CLIP = 1,};
enum MACRO_OF {OF_READ = 0x0,OF_WRITE = 0x1,OF_READWRITE = 0x2,OF_SHARE_COMPAT = 0x0,OF_SHARE_EXCLUSIVE = 0x10,OF_SHARE_DENY_WRITE = 0x20,OF_SHARE_DENY_READ = 0x30,OF_SHARE_DENY_NONE = 0x40,OF_PARSE = 0x100,OF_DELETE = 0x200,OF_VERIFY = 0x400,OF_CANCEL = 0x800,OF_CREATE = 0x1000,OF_PROMPT = 0x2000,OF_EXIST = 0x4000,OF_REOPEN = 0x8000,};
enum MACRO_OI {OI_ASYNC = 0xFFFFEEEE,};
enum MACRO_ON {NUMLOCK_ON = 0x20,SCROLLLOCK_ON = 0x40,CAPSLOCK_ON = 0x80,};
enum MACRO_PC {PC_RESERVED = 0x1,PC_EXPLICIT = 0x2,PC_NOCOLLAPSE = 0x4,};
enum MACRO_PD {PD_ALLPAGES = 0x0,PD_SELECTION = 0x1,PD_PAGENUMS = 0x2,PD_NOSELECTION = 0x4,PD_NOPAGENUMS = 0x8,PD_COLLATE = 0x10,PD_PRINTTOFILE = 0x20,PD_PRINTSETUP = 0x40,PD_NOWARNING = 0x80,PD_RETURNDC = 0x100,PD_RETURNIC = 0x200,PD_RETURNDEFAULT = 0x400,PD_SHOWHELP = 0x800,PD_ENABLEPRINTHOOK = 0x1000,PD_ENABLESETUPHOOK = 0x2000,PD_ENABLEPRINTTEMPLATE = 0x4000,PD_ENABLESETUPTEMPLATE = 0x8000,PD_ENABLEPRINTTEMPLATEHANDLE = 0x10000,PD_ENABLESETUPTEMPLATEHANDLE = 0x20000,PD_USEDEVMODECOPIES = 0x40000,PD_USEDEVMODECOPIESANDCOLLATE = 0x40000,PD_DISABLEPRINTTOFILE = 0x80000,PD_HIDEPRINTTOFILE = 0x100000,PD_NONETWORKBUTTON = 0x200000,PD_CURRENTPAGE = 0x400000,PD_NOCURRENTPAGE = 0x800000,PD_EXCLUSIONFLAGS = 0x1000000,PD_USELARGETEMPLATE = 0x10000000,PD_EXCL_COPIESANDCOLLATE = 0x8100,};
enum MACRO_PF {PF_FLOATING_POINT_PRECISION_ERRATA = 0,PF_FLOATING_POINT_EMULATED = 1,PF_COMPARE_EXCHANGE_DOUBLE = 2,PF_MMX_INSTRUCTIONS_AVAILABLE = 3,PF_PPC_MOVEMEM_64BIT_OK = 4,PF_ALPHA_BYTE_INSTRUCTIONS = 5,PF_XMMI_INSTRUCTIONS_AVAILABLE = 6,PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7,PF_RDTSC_INSTRUCTION_AVAILABLE = 8,PF_PAE_ENABLED = 9,PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10,};
enum MACRO_PM {PM_NOREMOVE = 0x0,PM_REMOVE = 0x1,PM_NOYIELD = 0x2,};
enum MACRO_PO {PO_THROTTLE_NONE = 0,PO_THROTTLE_CONSTANT = 1,PO_THROTTLE_DEGRADE = 2,PO_THROTTLE_ADAPTIVE = 3,PO_THROTTLE_MAXIMUM = 4,};
enum MACRO_PP {PP_DISPLAYERRORS = 0x1,};
enum MACRO_PR {PR_JOBSTATUS = 0x0,};
enum MACRO_PS {PS_SOLID = 0,PS_DASH = 1,PS_DOT = 2,PS_DASHDOT = 3,PS_DASHDOTDOT = 4,PS_NULL = 5,PS_INSIDEFRAME = 6,PS_USERSTYLE = 7,PS_ALTERNATE = 8,PS_STYLE_MASK = 15,PS_ENDCAP_ROUND = 0,PS_ENDCAP_SQUARE = 256,PS_ENDCAP_FLAT = 512,PS_ENDCAP_MASK = 3840,PS_JOIN_ROUND = 0,PS_JOIN_BEVEL = 4096,PS_JOIN_MITER = 8192,PS_JOIN_MASK = 61440,PS_COSMETIC = 0,PS_GEOMETRIC = 65536,PS_TYPE_MASK = 983040,};
enum MACRO_PT {PT_CLOSEFIGURE = 0x1,PT_LINETO = 0x2,PT_BEZIERTO = 0x4,PT_MOVETO = 0x6,};
enum MACRO_PW {PW_CLIENTONLY = 0x1,};
enum MACRO_QC {QC_OUTLINES = 0x1,QC_1BIT = 0x2,QC_4BIT = 0x4,QC_FONTDRIVERCAPS = 0x7,};
enum MACRO_QS {QS_KEY = 0x1,QS_MOUSEMOVE = 0x2,QS_MOUSEBUTTON = 0x4,QS_POSTMESSAGE = 0x8,QS_TIMER = 0x10,QS_PAINT = 0x20,QS_SENDMESSAGE = 0x40,QS_HOTKEY = 0x80,QS_ALLPOSTMESSAGE = 0x100,QS_RAWINPUT = 0x400,QS_MOUSE = 0x6,QS_INPUT = 0x407,QS_ALLEVENTS = 0x4BF,QS_ALLINPUT = 0x4FF,};
enum MACRO_R2 {R2_BLACK = 1,R2_NOTMERGEPEN = 2,R2_MASKNOTPEN = 3,R2_NOTCOPYPEN = 4,R2_MASKPENNOT = 5,R2_NOT = 6,R2_XORPEN = 7,R2_NOTMASKPEN = 8,R2_MASKPEN = 9,R2_NOTXORPEN = 10,R2_NOP = 11,R2_MERGENOTPEN = 12,R2_COPYPEN = 13,R2_MERGEPENNOT = 14,R2_MERGEPEN = 15,R2_WHITE = 16,R2_LAST = 16,};
enum MACRO_RB {RB_INSERTBANDA = 1025,RB_DELETEBAND = 1026,RB_GETBARINFO = 1027,RB_SETBARINFO = 1028,RB_SETBANDINFOA = 1030,RB_SETPARENT = 1031,RB_HITTEST = 1032,RB_GETRECT = 1033,RB_INSERTBANDW = 1034,RB_SETBANDINFOW = 1035,RB_GETBANDCOUNT = 1036,RB_GETROWCOUNT = 1037,RB_GETROWHEIGHT = 1038,RB_IDTOINDEX = 1040,RB_GETTOOLTIPS = 1041,RB_SETTOOLTIPS = 1042,RB_SETBKCOLOR = 1043,RB_GETBKCOLOR = 1044,RB_SETTEXTCOLOR = 1045,RB_GETTEXTCOLOR = 1046,};
enum MACRO_RC {RC_BITBLT = 1,RC_BANDING = 2,RC_SCALING = 4,RC_BITMAP64 = 8,RC_GDI20_OUTPUT = 16,RC_GDI20_STATE = 32,RC_SAVEBITMAP = 64,RC_DI_BITMAP = 128,RC_PALETTE = 256,RC_DIBTODEV = 512,RC_BIGFONT = 1024,RC_STRETCHBLT = 2048,RC_FLOODFILL = 4096,RC_STRETCHDIB = 8192,RC_OP_DX_OUTPUT = 16384,RC_DEVBITS = 32768,};
enum MACRO_RI {RI_MOUSE_LEFT_BUTTON_DOWN = 0x1,RI_MOUSE_LEFT_BUTTON_UP = 0x2,RI_MOUSE_RIGHT_BUTTON_DOWN = 0x4,RI_MOUSE_RIGHT_BUTTON_UP = 0x8,RI_MOUSE_MIDDLE_BUTTON_DOWN = 0x10,RI_MOUSE_MIDDLE_BUTTON_UP = 0x20,RI_MOUSE_BUTTON_1_DOWN = 0x1,RI_MOUSE_BUTTON_1_UP = 0x2,RI_MOUSE_BUTTON_2_DOWN = 0x4,RI_MOUSE_BUTTON_2_UP = 0x8,RI_MOUSE_BUTTON_3_DOWN = 0x10,RI_MOUSE_BUTTON_3_UP = 0x20,RI_MOUSE_BUTTON_4_DOWN = 0x40,RI_MOUSE_BUTTON_4_UP = 0x80,RI_MOUSE_BUTTON_5_DOWN = 0x100,RI_MOUSE_BUTTON_5_UP = 0x200,RI_MOUSE_WHEEL = 0x400,};
enum MACRO_RP {RP_LOGON = 0x1,RP_INIFILE = 0x2,};
enum MACRO_RT {RT_CURSOR = 1,RT_BITMAP = 2,RT_ICON = 3,RT_MENU = 4,RT_DIALOG = 5,RT_STRING = 6,RT_FONTDIR = 7,RT_FONT = 8,RT_ACCELERATOR = 9,RT_RCDATA = 10,RT_MESSAGETABLE = 11,};
enum MACRO_SB {SB_NONE = 0x0,SB_CONST_ALPHA = 0x1,SB_PIXEL_ALPHA = 0x2,SB_PREMULT_ALPHA = 0x4,SB_GRAD_RECT = 0x10,SB_GRAD_TRI = 0x20,};
enum MACRO_SC {SC_SIZE = 0xF000,SC_MOVE = 0xF010,SC_MINIMIZE = 0xF020,SC_MAXIMIZE = 0xF030,SC_NEXTWINDOW = 0xF040,SC_PREVWINDOW = 0xF050,SC_CLOSE = 0xF060,SC_VSCROLL = 0xF070,SC_HSCROLL = 0xF080,SC_MOUSEMENU = 0xF090,SC_KEYMENU = 0xF100,SC_ARRANGE = 0xF110,SC_RESTORE = 0xF120,SC_TASKLIST = 0xF130,SC_SCREENSAVE = 0xF140,SC_HOTKEY = 0xF150,SC_DEFAULT = 0xF160,SC_MONITORPOWER = 0xF170,SC_CONTEXTHELP = 0xF180,SC_SEPARATOR = 0xF00F,SC_ICON = 0xF020,SC_ZOOM = 0xF030,};
enum MACRO_SD {SD_RECEIVE = 0x0,SD_SEND = 0x1,SD_BOTH = 0x2,};
enum MACRO_SE {SE_GROUP_MANDATORY = 0x1,SE_GROUP_ENABLED_BY_DEFAULT = 0x2,SE_GROUP_ENABLED = 0x4,SE_GROUP_OWNER = 0x8,SE_GROUP_USE_FOR_DENY_ONLY = 0x10,SE_GROUP_LOGON_ID = 0xC0000000,SE_GROUP_RESOURCE = 0x20000000,};
enum MACRO_SG {SG_UNCONSTRAINED_GROUP = 0x1,SG_CONSTRAINED_GROUP = 0x2,};
enum MACRO_SM {SM_CXSCREEN = 0,SM_CYSCREEN = 1,SM_CXVSCROLL = 2,SM_CYHSCROLL = 3,SM_CYCAPTION = 4,SM_CXBORDER = 5,SM_CYBORDER = 6,SM_CXDLGFRAME = 7,SM_CYDLGFRAME = 8,SM_CYVTHUMB = 9,SM_CXHTHUMB = 10,SM_CXICON = 11,SM_CYICON = 12,SM_CXCURSOR = 13,SM_CYCURSOR = 14,SM_CYMENU = 15,SM_CXFULLSCREEN = 16,SM_CYFULLSCREEN = 17,SM_CYKANJIWINDOW = 18,SM_MOUSEPRESENT = 19,SM_CYVSCROLL = 20,SM_CXHSCROLL = 21,SM_DEBUG = 22,SM_SWAPBUTTON = 23,SM_RESERVED1 = 24,SM_RESERVED2 = 25,SM_RESERVED3 = 26,SM_RESERVED4 = 27,SM_CXMIN = 28,SM_CYMIN = 29,SM_CXSIZE = 30,SM_CYSIZE = 31,SM_CXFRAME = 32,SM_CYFRAME = 33,SM_CXMINTRACK = 34,SM_CYMINTRACK = 35,SM_CXDOUBLECLK = 36,SM_CYDOUBLECLK = 37,SM_CXICONSPACING = 38,SM_CYICONSPACING = 39,SM_MENUDROPALIGNMENT = 40,SM_PENWINDOWS = 41,SM_DBCSENABLED = 42,SM_CMOUSEBUTTONS = 43,SM_CXFIXEDFRAME = 7,SM_CYFIXEDFRAME = 8,SM_CXSIZEFRAME = 32,SM_CYSIZEFRAME = 33,SM_SECURE = 44,SM_CXEDGE = 45,SM_CYEDGE = 46,SM_CXMINSPACING = 47,SM_CYMINSPACING = 48,SM_CXSMICON = 49,SM_CYSMICON = 50,SM_CYSMCAPTION = 51,SM_CXSMSIZE = 52,SM_CYSMSIZE = 53,SM_CXMENUSIZE = 54,SM_CYMENUSIZE = 55,SM_ARRANGE = 56,SM_CXMINIMIZED = 57,SM_CYMINIMIZED = 58,SM_CXMAXTRACK = 59,SM_CYMAXTRACK = 60,SM_CXMAXIMIZED = 61,SM_CYMAXIMIZED = 62,SM_NETWORK = 63,SM_CLEANBOOT = 67,SM_CXDRAG = 68,SM_CYDRAG = 69,SM_SHOWSOUNDS = 70,SM_CXMENUCHECK = 71,SM_CYMENUCHECK = 72,SM_SLOWMACHINE = 73,SM_MIDEASTENABLED = 74,SM_MOUSEWHEELPRESENT = 75,SM_XVIRTUALSCREEN = 76,SM_YVIRTUALSCREEN = 77,SM_CXVIRTUALSCREEN = 78,SM_CYVIRTUALSCREEN = 79,SM_CMONITORS = 80,SM_SAMEDISPLAYFORMAT = 81,SM_IMMENABLED = 82,SM_CXFOCUSBORDER = 83,SM_CYFOCUSBORDER = 84,SM_TABLETPC = 86,SM_MEDIACENTER = 87,SM_CMETRICS = 88,SM_REMOTESESSION = 4096,SM_SHUTTINGDOWN = 8192,SM_REMOTECONTROL = 8193,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_DONTLINGER = 0xFFFFFF7F,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_CONNDATA = 0x7000,SO_CONNOPT = 0x7001,SO_DISCDATA = 0x7002,SO_DISCOPT = 0x7003,SO_CONNDATALEN = 0x7004,SO_CONNOPTLEN = 0x7005,SO_DISCDATALEN = 0x7006,SO_DISCOPTLEN = 0x7007,SO_OPENTYPE = 0x7008,SO_SYNCHRONOUS_ALERT = 0x10,SO_SYNCHRONOUS_NONALERT = 0x20,SO_MAXDG = 0x7009,SO_MAXPATHDG = 0x700A,SO_UPDATE_ACCEPT_CONTEXT = 0x700B,SO_CONNECT_TIME = 0x700C,};
enum MACRO_SP {SP_SERIALCOMM = 0x1,};
enum MACRO_SR {SR_OWNER = 0,SR_OWNER_PARENT = 1,};
enum MACRO_SS {SS_LEFT = 0x0,SS_CENTER = 0x1,SS_RIGHT = 0x2,SS_ICON = 0x3,SS_BLACKRECT = 0x4,SS_GRAYRECT = 0x5,SS_WHITERECT = 0x6,SS_BLACKFRAME = 0x7,SS_GRAYFRAME = 0x8,SS_WHITEFRAME = 0x9,SS_USERITEM = 0xA,SS_SIMPLE = 0xB,SS_LEFTNOWORDWRAP = 0xC,SS_OWNERDRAW = 0xD,SS_BITMAP = 0xE,SS_ENHMETAFILE = 0xF,SS_ETCHEDHORZ = 0x10,SS_ETCHEDVERT = 0x11,SS_ETCHEDFRAME = 0x12,SS_TYPEMASK = 0x1F,SS_REALSIZECONTROL = 0x40,SS_NOPREFIX = 0x80,SS_NOTIFY = 0x100,SS_CENTERIMAGE = 0x200,SS_RIGHTJUST = 0x400,SS_REALSIZEIMAGE = 0x800,SS_SUNKEN = 0x1000,SS_EDITCONTROL = 0x2000,SS_ENDELLIPSIS = 0x4000,SS_PATHELLIPSIS = 0x8000,SS_WORDELLIPSIS = 0xC000,SS_ELLIPSISMASK = 0xC000,};
enum MACRO_ST {ST_CONNECTED = 0x1,ST_ADVISE = 0x2,ST_ISLOCAL = 0x4,ST_BLOCKED = 0x8,ST_CLIENT = 0x10,ST_TERMINATED = 0x20,ST_INLIST = 0x40,ST_BLOCKNEXT = 0x80,ST_ISSELF = 0x100,};
enum MACRO_SW {SW_HIDE = 0,SW_SHOWNORMAL = 1,SW_NORMAL = 1,SW_SHOWMINIMIZED = 2,SW_SHOWMAXIMIZED = 3,SW_MAXIMIZE = 3,SW_SHOWNOACTIVATE = 4,SW_SHOW = 5,SW_MINIMIZE = 6,SW_SHOWMINNOACTIVE = 7,SW_SHOWNA = 8,SW_RESTORE = 9,SW_SHOWDEFAULT = 10,SW_FORCEMINIMIZE = 11,SW_MAX = 11,};
enum MACRO_TA {TA_NOUPDATECP = 0,TA_UPDATECP = 1,TA_LEFT = 0,TA_RIGHT = 2,TA_CENTER = 6,TA_TOP = 0,TA_BOTTOM = 8,TA_BASELINE = 24,TA_RTLREADING = 256,TA_MASK = 287,};
enum MACRO_TB {TB_ENABLEBUTTON = 1025,TB_CHECKBUTTON = 1026,TB_PRESSBUTTON = 1027,TB_HIDEBUTTON = 1028,TB_INDETERMINATE = 1029,TB_MARKBUTTON = 1030,TB_ISBUTTONENABLED = 1033,TB_ISBUTTONCHECKED = 1034,TB_ISBUTTONPRESSED = 1035,TB_ISBUTTONHIDDEN = 1036,TB_ISBUTTONINDETERMINATE = 1037,TB_ISBUTTONHIGHLIGHTED = 1038,TB_SETSTATE = 1041,TB_GETSTATE = 1042,TB_ADDBITMAP = 1043,};
enum MACRO_TC {TC_NORMAL = 0,TC_HARDERR = 1,TC_GP_TRAP = 2,TC_SIGNAL = 3,};
enum MACRO_TF {TF_DISCONNECT = 0x1,TF_REUSE_SOCKET = 0x2,TF_WRITE_BEHIND = 0x4,};
enum MACRO_TH {TH_NETDEV = 0x1,TH_TAPI = 0x2,};
enum MACRO_TT {TT_POLYGON_TYPE = 24,TT_PRIM_LINE = 1,TT_PRIM_QSPLINE = 2,TT_PRIM_CSPLINE = 3,};
enum MACRO_UD {UD_MAXVAL = 0x7FFF,UD_MINVAL = 0xFFFF8001,};
enum MACRO_UI {UI_CAP_2700 = 0x1,UI_CAP_ROT90 = 0x2,UI_CAP_ROTANY = 0x4,};
enum MACRO_UP {UP_DRIVER_ON_MP_SYSTEM = 0x92,};
enum MACRO_VK {VK_LBUTTON = 0x1,VK_RBUTTON = 0x2,VK_CANCEL = 0x3,VK_MBUTTON = 0x4,VK_XBUTTON1 = 0x5,VK_XBUTTON2 = 0x6,VK_BACK = 0x8,VK_TAB = 0x9,VK_CLEAR = 0xC,VK_RETURN = 0xD,VK_SHIFT = 0x10,VK_CONTROL = 0x11,VK_MENU = 0x12,VK_PAUSE = 0x13,VK_CAPITAL = 0x14,VK_KANA = 0x15,VK_HANGEUL = 0x15,VK_HANGUL = 0x15,VK_JUNJA = 0x17,VK_FINAL = 0x18,VK_HANJA = 0x19,VK_KANJI = 0x19,VK_ESCAPE = 0x1B,VK_CONVERT = 0x1C,VK_NONCONVERT = 0x1D,VK_ACCEPT = 0x1E,VK_MODECHANGE = 0x1F,VK_SPACE = 0x20,VK_PRIOR = 0x21,VK_NEXT = 0x22,VK_END = 0x23,VK_HOME = 0x24,VK_LEFT = 0x25,VK_UP = 0x26,VK_RIGHT = 0x27,VK_DOWN = 0x28,VK_SELECT = 0x29,VK_PRINT = 0x2A,VK_EXECUTE = 0x2B,VK_SNAPSHOT = 0x2C,VK_INSERT = 0x2D,VK_DELETE = 0x2E,VK_HELP = 0x2F,VK_LWIN = 0x5B,VK_RWIN = 0x5C,VK_APPS = 0x5D,VK_SLEEP = 0x5F,VK_NUMPAD0 = 0x60,VK_NUMPAD1 = 0x61,VK_NUMPAD2 = 0x62,VK_NUMPAD3 = 0x63,VK_NUMPAD4 = 0x64,VK_NUMPAD5 = 0x65,VK_NUMPAD6 = 0x66,VK_NUMPAD7 = 0x67,VK_NUMPAD8 = 0x68,VK_NUMPAD9 = 0x69,VK_MULTIPLY = 0x6A,VK_ADD = 0x6B,VK_SEPARATOR = 0x6C,VK_SUBTRACT = 0x6D,VK_DECIMAL = 0x6E,VK_DIVIDE = 0x6F,VK_F1 = 0x70,VK_F2 = 0x71,VK_F3 = 0x72,VK_F4 = 0x73,VK_F5 = 0x74,VK_F6 = 0x75,VK_F7 = 0x76,VK_F8 = 0x77,VK_F9 = 0x78,VK_F10 = 0x79,VK_F11 = 0x7A,VK_F12 = 0x7B,VK_F13 = 0x7C,VK_F14 = 0x7D,VK_F15 = 0x7E,VK_F16 = 0x7F,VK_F17 = 0x80,VK_F18 = 0x81,VK_F19 = 0x82,VK_F20 = 0x83,VK_F21 = 0x84,VK_F22 = 0x85,VK_F23 = 0x86,VK_F24 = 0x87,VK_NUMLOCK = 0x90,VK_SCROLL = 0x91,VK_OEM_NEC_EQUAL = 0x92,VK_OEM_FJ_JISHO = 0x92,VK_OEM_FJ_MASSHOU = 0x93,VK_OEM_FJ_TOUROKU = 0x94,VK_OEM_FJ_LOYA = 0x95,VK_OEM_FJ_ROYA = 0x96,VK_LSHIFT = 0xA0,VK_RSHIFT = 0xA1,VK_LCONTROL = 0xA2,VK_RCONTROL = 0xA3,VK_LMENU = 0xA4,VK_RMENU = 0xA5,VK_BROWSER_BACK = 0xA6,VK_BROWSER_FORWARD = 0xA7,VK_BROWSER_REFRESH = 0xA8,VK_BROWSER_STOP = 0xA9,VK_BROWSER_SEARCH = 0xAA,VK_BROWSER_FAVORITES = 0xAB,VK_BROWSER_HOME = 0xAC,VK_VOLUME_MUTE = 0xAD,VK_VOLUME_DOWN = 0xAE,VK_VOLUME_UP = 0xAF,VK_MEDIA_NEXT_TRACK = 0xB0,VK_MEDIA_PREV_TRACK = 0xB1,VK_MEDIA_STOP = 0xB2,VK_MEDIA_PLAY_PAUSE = 0xB3,VK_LAUNCH_MAIL = 0xB4,VK_LAUNCH_MEDIA_SELECT = 0xB5,VK_LAUNCH_APP1 = 0xB6,VK_LAUNCH_APP2 = 0xB7,VK_OEM_1 = 0xBA,VK_OEM_PLUS = 0xBB,VK_OEM_COMMA = 0xBC,VK_OEM_MINUS = 0xBD,VK_OEM_PERIOD = 0xBE,VK_OEM_2 = 0xBF,VK_OEM_3 = 0xC0,VK_OEM_4 = 0xDB,VK_OEM_5 = 0xDC,VK_OEM_6 = 0xDD,VK_OEM_7 = 0xDE,VK_OEM_8 = 0xDF,VK_OEM_AX = 0xE1,VK_OEM_102 = 0xE2,VK_ICO_HELP = 0xE3,VK_ICO_00 = 0xE4,VK_PROCESSKEY = 0xE5,VK_ICO_CLEAR = 0xE6,VK_PACKET = 0xE7,VK_OEM_RESET = 0xE9,VK_OEM_JUMP = 0xEA,VK_OEM_PA1 = 0xEB,VK_OEM_PA2 = 0xEC,VK_OEM_PA3 = 0xED,VK_OEM_WSCTRL = 0xEE,VK_OEM_CUSEL = 0xEF,VK_OEM_ATTN = 0xF0,VK_OEM_FINISH = 0xF1,VK_OEM_COPY = 0xF2,VK_OEM_AUTO = 0xF3,VK_OEM_ENLW = 0xF4,VK_OEM_BACKTAB = 0xF5,VK_ATTN = 0xF6,VK_CRSEL = 0xF7,VK_EXSEL = 0xF8,VK_EREOF = 0xF9,VK_PLAY = 0xFA,VK_ZOOM = 0xFB,VK_NONAME = 0xFC,VK_PA1 = 0xFD,VK_OEM_CLEAR = 0xFE,};
enum MACRO_VP {VP_COMMAND_GET = 0x1,VP_COMMAND_SET = 0x2,VP_FLAGS_TV_MODE = 0x1,VP_FLAGS_TV_STANDARD = 0x2,VP_FLAGS_FLICKER = 0x4,VP_FLAGS_OVERSCAN = 0x8,VP_FLAGS_MAX_UNSCALED = 0x10,VP_FLAGS_POSITION = 0x20,VP_FLAGS_BRIGHTNESS = 0x40,VP_FLAGS_CONTRAST = 0x80,VP_FLAGS_COPYPROTECT = 0x100,VP_MODE_WIN_GRAPHICS = 0x1,VP_MODE_TV_PLAYBACK = 0x2,VP_TV_STANDARD_NTSC_M = 0x1,VP_TV_STANDARD_NTSC_M_J = 0x2,VP_TV_STANDARD_PAL_B = 0x4,VP_TV_STANDARD_PAL_D = 0x8,VP_TV_STANDARD_PAL_H = 0x10,VP_TV_STANDARD_PAL_I = 0x20,VP_TV_STANDARD_PAL_M = 0x40,VP_TV_STANDARD_PAL_N = 0x80,VP_TV_STANDARD_SECAM_B = 0x100,VP_TV_STANDARD_SECAM_D = 0x200,VP_TV_STANDARD_SECAM_G = 0x400,VP_TV_STANDARD_SECAM_H = 0x800,VP_TV_STANDARD_SECAM_K = 0x1000,VP_TV_STANDARD_SECAM_K1 = 0x2000,VP_TV_STANDARD_SECAM_L = 0x4000,VP_TV_STANDARD_WIN_VGA = 0x8000,VP_TV_STANDARD_NTSC_433 = 0x10000,VP_TV_STANDARD_PAL_G = 0x20000,VP_TV_STANDARD_PAL_60 = 0x40000,VP_TV_STANDARD_SECAM_L1 = 0x80000,VP_CP_TYPE_APS_TRIGGER = 0x1,VP_CP_TYPE_MACROVISION = 0x2,VP_CP_CMD_ACTIVATE = 0x1,VP_CP_CMD_DEACTIVATE = 0x2,VP_CP_CMD_CHANGE = 0x4,};
enum MACRO_VS {VS_FILE_INFO = 16,VS_VERSION_INFO = 1,VS_USER_DEFINED = 100,VS_FFI_SIGNATURE = -17890115,VS_FFI_STRUCVERSION = 65536,VS_FFI_FILEFLAGSMASK = 63,VS_FF_DEBUG = 1,VS_FF_PRERELEASE = 2,VS_FF_PATCHED = 4,VS_FF_PRIVATEBUILD = 8,VS_FF_INFOINFERRED = 16,VS_FF_SPECIALBUILD = 32,};
enum MACRO_VT {VT_STREAMED_PROPSET = 73,VT_STORED_PROPSET = 74,VT_BLOB_PROPSET = 75,VT_VERBOSE_ENUM = 76,};
enum MACRO_WA {WA_INACTIVE = 0,WA_ACTIVE = 1,WA_CLICKACTIVE = 2,};
enum MACRO_WB {WB_LEFT = 0,WB_RIGHT = 1,WB_ISDELIMITER = 2,};
enum MACRO_WC {WC_DIALOG = 0x8002,};
enum MACRO_WH {WH_MIN = -1,WH_MSGFILTER = -1,WH_JOURNALRECORD = 0,WH_JOURNALPLAYBACK = 1,WH_KEYBOARD = 2,WH_GETMESSAGE = 3,WH_CALLWNDPROC = 4,WH_CBT = 5,WH_SYSMSGFILTER = 6,WH_MOUSE = 7,WH_DEBUG = 9,WH_SHELL = 10,WH_FOREGROUNDIDLE = 11,WH_CALLWNDPROCRET = 12,WH_KEYBOARD_LL = 13,WH_MOUSE_LL = 14,WH_MAX = 14,WH_MINHOOK = -1,WH_MAXHOOK = 14,};
enum MACRO_WM {WM_NULL = 0x0,WM_CREATE = 0x1,WM_DESTROY = 0x2,WM_MOVE = 0x3,WM_SIZE = 0x5,WM_ACTIVATE = 0x6,};
enum MACRO_WN {WN_SUCCESS = 0,WN_NO_ERROR = 0,WN_NOT_SUPPORTED = 50,WN_CANCEL = 1223,WN_RETRY = 1237,WN_NET_ERROR = 59,WN_MORE_DATA = 234,WN_BAD_POINTER = 487,WN_BAD_VALUE = 87,WN_BAD_USER = 2202,WN_BAD_PASSWORD = 86,WN_ACCESS_DENIED = 5,WN_FUNCTION_BUSY = 170,WN_WINDOWS_ERROR = 59,WN_OUT_OF_MEMORY = 8,WN_NO_NETWORK = 1222,WN_EXTENDED_ERROR = 1208,WN_BAD_LEVEL = 124,WN_BAD_HANDLE = 6,WN_NOT_INITIALIZING = 1247,WN_NO_MORE_DEVICES = 1248,WN_NOT_CONNECTED = 2250,WN_OPEN_FILES = 2401,WN_DEVICE_IN_USE = 2404,WN_BAD_NETNAME = 67,WN_BAD_LOCALNAME = 1200,WN_ALREADY_CONNECTED = 85,WN_DEVICE_ERROR = 31,WN_CONNECTION_CLOSED = 1201,WN_NO_NET_OR_BAD_PATH = 1203,WN_BAD_PROVIDER = 1204,WN_CANNOT_OPEN_PROFILE = 1205,WN_BAD_PROFILE = 1206,WN_BAD_DEV_TYPE = 66,WN_DEVICE_ALREADY_REMEMBERED = 1202,WN_CONNECTED_OTHER_PASSWORD = 2108,WN_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109,WN_NO_MORE_ENTRIES = 259,WN_NOT_CONTAINER = 1207,WN_NOT_AUTHENTICATED = 1244,WN_NOT_LOGGED_ON = 1245,WN_NOT_VALIDATED = 1311,};
enum MACRO_WO {WO_RGN_CLIENT_DELTA = 0x1,WO_RGN_CLIENT = 0x2,WO_RGN_SURFACE_DELTA = 0x4,WO_RGN_SURFACE = 0x8,WO_RGN_UPDATE_ALL = 0x10,WO_RGN_WINDOW = 0x20,WO_DRAW_NOTIFY = 0x40,WO_SPRITE_NOTIFY = 0x80,WO_RGN_DESKTOP_COORD = 0x100,};
enum MACRO_WS {WS_OVERLAPPED = 0x0,WS_POPUP = 0x80000000,WS_CHILD = 0x40000000,WS_MINIMIZE = 0x20000000,WS_VISIBLE = 0x10000000,WS_DISABLED = 0x8000000,WS_CLIPSIBLINGS = 0x4000000,WS_CLIPCHILDREN = 0x2000000,WS_MAXIMIZE = 0x1000000,WS_CAPTION = 0xC00000,WS_BORDER = 0x800000,WS_DLGFRAME = 0x400000,WS_VSCROLL = 0x200000,WS_HSCROLL = 0x100000,WS_SYSMENU = 0x80000,WS_THICKFRAME = 0x40000,WS_GROUP = 0x20000,WS_TABSTOP = 0x10000,WS_MINIMIZEBOX = 0x20000,WS_MAXIMIZEBOX = 0x10000,WS_TILED = 0x0,WS_ICONIC = 0x20000000,WS_SIZEBOX = 0x40000,WS_OVERLAPPEDWINDOW = 0xCF0000,WS_POPUPWINDOW = 0x80880000,WS_CHILDWINDOW = 0x40000000,WS_EX_DLGMODALFRAME = 0x1,WS_EX_NOPARENTNOTIFY = 0x4,WS_EX_TOPMOST = 0x8,WS_EX_ACCEPTFILES = 0x10,WS_EX_TRANSPARENT = 0x20,WS_EX_MDICHILD = 0x40,WS_EX_TOOLWINDOW = 0x80,WS_EX_WINDOWEDGE = 0x100,WS_EX_CLIENTEDGE = 0x200,WS_EX_CONTEXTHELP = 0x400,WS_EX_RIGHT = 0x1000,WS_EX_LEFT = 0x0,WS_EX_RTLREADING = 0x2000,WS_EX_LTRREADING = 0x0,WS_EX_LEFTSCROLLBAR = 0x4000,WS_EX_RIGHTSCROLLBAR = 0x0,WS_EX_CONTROLPARENT = 0x10000,WS_EX_STATICEDGE = 0x20000,WS_EX_APPWINDOW = 0x40000,WS_EX_OVERLAPPEDWINDOW = 0x300,WS_EX_PALETTEWINDOW = 0x188,WS_EX_LAYERED = 0x80000,WS_EX_NOINHERITLAYOUT = 0x100000,WS_EX_LAYOUTRTL = 0x400000,WS_EX_COMPOSITED = 0x2000000,WS_EX_NOACTIVATE = 0x8000000,};
enum MACRO_WT {WT_EXECUTEDEFAULT = 0x0,WT_EXECUTEINIOTHREAD = 0x1,WT_EXECUTEINUITHREAD = 0x2,WT_EXECUTEINWAITTHREAD = 0x4,WT_EXECUTEONLYONCE = 0x8,WT_EXECUTEINTIMERTHREAD = 0x20,WT_EXECUTELONGFUNCTION = 0x10,WT_EXECUTEINPERSISTENTIOTHREAD = 0x40,WT_EXECUTEINPERSISTENTTHREAD = 0x80,WT_TRANSFER_IMPERSONATION = 0x100,WT_EXECUTEINLONGTHREAD = 0x10,WT_EXECUTEDELETEWAIT = 0x8,};
enum MACRO_XF {XF_LTOL = 0,XF_INV_LTOL = 1,XF_LTOFX = 2,XF_INV_FXTOL = 3,};
enum MACRO_XO {XO_TRIVIAL = 0x1,XO_TABLE = 0x2,XO_TO_MONO = 0x4,XO_FROM_CMYK = 0x8,XO_DEVICE_ICM = 0x10,XO_HOST_ICM = 0x20,XO_SRCPALETTE = 0x1,XO_DESTPALETTE = 0x2,XO_DESTDCPALETTE = 0x3,XO_SRCBITFIELDS = 0x4,XO_DESTBITFIELDS = 0x5,};
enum MACRO_XP {XP_CONNECTIONLESS = 0x1,XP_GUARANTEED_DELIVERY = 0x2,XP_GUARANTEED_ORDER = 0x4,XP_MESSAGE_ORIENTED = 0x8,XP_PSEUDO_STREAM = 0x10,XP_GRACEFUL_CLOSE = 0x20,XP_EXPEDITED_DATA = 0x40,XP_CONNECT_DATA = 0x80,XP_DISCONNECT_DATA = 0x100,XP_SUPPORTS_BROADCAST = 0x200,XP_SUPPORTS_MULTICAST = 0x400,XP_BANDWIDTH_ALLOCATION = 0x800,XP_FRAGMENTATION = 0x1000,XP_ENCRYPTS = 0x2000,};
typedef struct _MAPTABLE MAPTABLE;
typedef struct _MCDCOLOR MCDCOLOR;
typedef struct _MCDCOORD MCDCOORD;
typedef float MCDFLOAT;
typedef struct _MCDSTATE MCDSTATE;
typedef struct tagMENUINFO MENUINFO;
typedef struct _MIB_ICMP MIB_ICMP;
typedef struct _MMCKINFO MMCKINFO;
typedef struct _MMIOINFO MMIOINFO;
typedef struct _MONITOR2 MONITOR2;
typedef struct tagMULTI_QI MULTI_QI;
typedef int ( *NEARPROC)();
typedef struct tagNMTBSAVE NMTBSAVE;
typedef struct _NM_UPDOWN NMUPDOWN;
typedef struct tagBITMAP *NPBITMAP;
typedef struct tagLOGPEN *NPLOGPEN;
typedef struct mmtime_tag *NPMMTIME;
typedef struct _NS_INFOA NS_INFOA;
typedef struct _NS_INFOW NS_INFOW;
typedef struct _NT_TIB32 NT_TIB32;
typedef struct _NT_TIB64 NT_TIB64;
typedef struct _13B347001B2B96C65D01839EEA37C971 NUMPARSE;
typedef struct _OBJECTID OBJECTID;
typedef struct _OEMUIOBJ OEMUIOBJ;
typedef struct _OFSTRUCT OFSTRUCT;
enum OLECMDID {OLECMDID_OPEN = 0x1,OLECMDID_NEW = 0x2,OLECMDID_SAVE = 0x3,OLECMDID_SAVEAS = 0x4,OLECMDID_SAVECOPYAS = 0x5,OLECMDID_PRINT = 0x6,OLECMDID_PRINTPREVIEW = 0x7,OLECMDID_PAGESETUP = 0x8,OLECMDID_SPELL = 0x9,OLECMDID_PROPERTIES = 0xA,OLECMDID_CUT = 0xB,OLECMDID_COPY = 0xC,OLECMDID_PASTE = 0xD,OLECMDID_PASTESPECIAL = 0xE,OLECMDID_UNDO = 0xF,OLECMDID_REDO = 0x10,OLECMDID_SELECTALL = 0x11,OLECMDID_CLEARSELECTION = 0x12,OLECMDID_ZOOM = 0x13,OLECMDID_GETZOOMRANGE = 0x14,OLECMDID_UPDATECOMMANDS = 0x15,OLECMDID_REFRESH = 0x16,OLECMDID_STOP = 0x17,OLECMDID_HIDETOOLBARS = 0x18,OLECMDID_SETPROGRESSMAX = 0x19,OLECMDID_SETPROGRESSPOS = 0x1A,OLECMDID_SETPROGRESSTEXT = 0x1B,OLECMDID_SETTITLE = 0x1C,OLECMDID_SETDOWNLOADSTATE = 0x1D,OLECMDID_STOPDOWNLOAD = 0x1E,OLECMDID_ONTOOLBARACTIVATED = 0x1F,OLECMDID_FIND = 0x20,OLECMDID_DELETE = 0x21,OLECMDID_HTTPEQUIV = 0x22,OLECMDID_HTTPEQUIV_DONE = 0x23,OLECMDID_ENABLE_INTERACTION = 0x24,OLECMDID_ONUNLOAD = 0x25,OLECMDID_PROPERTYBAG2 = 0x26,OLECMDID_PREREFRESH = 0x27,OLECMDID_SHOWSCRIPTERROR = 0x28,OLECMDID_SHOWMESSAGE = 0x29,OLECMDID_SHOWFIND = 0x2A,OLECMDID_SHOWPAGESETUP = 0x2B,OLECMDID_SHOWPRINT = 0x2C,OLECMDID_CLOSE = 0x2D,OLECMDID_ALLOWUILESSSAVEAS = 0x2E,OLECMDID_DONTDOWNLOADCSS = 0x2F,OLECMDID_UPDATEPAGESTATUS = 0x30,OLECMDID_PRINT2 = 0x31,OLECMDID_PRINTPREVIEW2 = 0x32,OLECMDID_SETPRINTTEMPLATE = 0x33,OLECMDID_GETPRINTTEMPLATE = 0x34,};
typedef struct _OPTPARAM OPTPARAM;
typedef struct tagACTCTXA *PACTCTXA;
typedef struct tagACTCTXW *PACTCTXW;
typedef struct _PATHDATA PATHDATA;
typedef IAVIFile *PAVIFILE;
typedef struct _F8C02B799BC5153138A3AC7C0BDE9C8E *PBSMINFO;
typedef struct _GETSETBUSDATA *PBUSDATA;
typedef struct _CERT_ID *PCERT_ID;
typedef struct _43A66EA2444E935077C76570D355CBC3 *PDEADKEY;
typedef struct tagDEVINFO *PDEVINFO;
typedef struct _DLGPAGE *PDLGPAGE;
typedef unsigned int *PDWORD32;
typedef unsigned long long *PDWORD64;
typedef struct tagPELARRAY PELARRAY;
typedef struct _A4A1DF623BA0FBABE6621202D771B918 *PEMFINFO;
typedef struct tagEMRTEXT *PEMRTEXT;
typedef struct _PERF_BIN PERF_BIN;
typedef struct _EXTPUSH *PEXTPUSH;
typedef struct _GDIINFO *PGDIINFO;
typedef struct hostent *PHOSTENT;
typedef struct _PHYSICAL PHYSICAL;
typedef struct tagPICTDESC PICTDESC;
typedef struct _IDEREGS *PIDEREGS;
typedef struct tagIMEINFO *PIMEINFO;
typedef struct _tagIMEPROA *PIMEPROA;
typedef struct _tagIMEPROW *PIMEPROW;
typedef int *PINT_PTR;
typedef struct in_addr *PIN_ADDR;
typedef struct _IOSPACE *PIOSPACE;
typedef struct joyinfo_tag *PJOYINFO;
typedef struct _686FDF1C0C03C3D9039AD8B14FB9C99A *PKSERROR;
typedef struct _69DAD432D0597BAB6A67398C913F94DB *PKSP_PIN;
typedef struct tagLVGROUP *PLVGROUP;
typedef struct midihdr_tag *PMIDIHDR;
typedef struct _POINTFIX POINTFIX;
typedef struct _OPTITEM *POPTITEM;
typedef struct _OPTTYPE *POPTTYPE;
typedef struct _18FEA12C471CE0A4515515C42723EF45 *PPBRANGE;
typedef struct _POINTQF *PPOINTQF;
typedef struct _PPP_INFO PPP_INFO;
typedef PROPPRG *PPROPPRG;
typedef struct _PSPINFO *PPSPINFO;
typedef struct pvalueA *PPVALUEA;
typedef struct pvalueW *PPVALUEW;
typedef struct _RGNDATA *PRGNDATA;
typedef struct tagPROPBAG2 PROPBAG2;
typedef struct tagPROPSPEC PROPSPEC;
typedef struct protoent PROTOENT;
typedef struct servent *PSERVENT;
typedef struct timeval *PTIMEVAL;
typedef unsigned int *PULONG32;
typedef unsigned long long *PULONG64;
typedef struct value_entA *PVALENTA;
typedef struct value_entW *PVALENTW;
typedef struct wavehdr_tag *PWAVEHDR;
typedef struct tagWCRANGE *PWCRANGE;
typedef struct _WGLSWAP *PWGLSWAP;
typedef struct tagRAWINPUT RAWINPUT;
typedef struct tagRAWMOUSE RAWMOUSE;
typedef struct _RGNRANGE RGNRANGE;
typedef struct _RIP_INFO RIP_INFO;
typedef struct _SHITEMID SHITEMID;
typedef struct sockaddr SOCKADDR;
typedef int (*SORTCOMP)( void *pv1,  void *pv2);
typedef struct SPC_LINK_ SPC_LINK;
typedef struct tagSTATDATA STATDATA;
typedef struct _TBBUTTON TBBUTTON;
typedef struct timecaps_tag TIMECAPS;
typedef struct tagTLIBATTR TLIBATTR;
typedef struct tagTRANSMSG TRANSMSG;
typedef struct tagTVSORTCB TVSORTCB;
typedef struct tagTYPEATTR TYPEATTR;
typedef struct tagTYPEDESC TYPEDESC;
typedef unsigned int UINT_PTR;
typedef struct _USERDATA USERDATA;
typedef struct videohdr_tag VIDEOHDR;
typedef struct _VMEMHEAP VMEMHEAP;
typedef struct _WAVELINK WAVELINK;
typedef struct _WIDTHRUN WIDTHRUN;
struct WiaVideo;
typedef struct _XFORMOBJ XFORMOBJ;
typedef struct _XLATEOBJ XLATEOBJ;
enum _APTTYPE {APTTYPE_CURRENT = 0xFFFFFFFF,APTTYPE_STA = 0x0,APTTYPE_MTA = 0x1,APTTYPE_NA = 0x2,APTTYPE_MAINSTA = 0x3,};
enum _D3DCULL {D3DCULL_NONE = 0x1,D3DCULL_CW = 0x2,D3DCULL_CCW = 0x3,D3DCULL_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DPOOL {D3DPOOL_DEFAULT = 0x0,D3DPOOL_MANAGED = 0x1,D3DPOOL_SYSTEMMEM = 0x2,D3DPOOL_SCRATCH = 0x3,D3DPOOL_FORCE_DWORD = 0x7FFFFFFF,};
enum _THDTYPE {THDTYPE_BLOCKMESSAGES = 0x0,THDTYPE_PROCESSMESSAGES = 0x1,};
struct protoent {char *p_name;char **p_aliases;short p_proto;};
enum tagMKSYS {MKSYS_NONE = 0x0,MKSYS_GENERICCOMPOSITE = 0x1,MKSYS_FILEMONIKER = 0x2,MKSYS_ANTIMONIKER = 0x3,MKSYS_ITEMMONIKER = 0x4,MKSYS_POINTERMONIKER = 0x5,MKSYS_CLASSMONIKER = 0x7,MKSYS_OBJREFMONIKER = 0x8,MKSYS_SESSIONMONIKER = 0x9,};
enum tagSHGDN {SHGDN_NORMAL = 0x0,SHGDN_INFOLDER = 0x1,SHGDN_FOREDITING = 0x1000,SHGDN_FORADDRESSBAR = 0x4000,SHGDN_FORPARSING = 0x8000,};
enum tagSTGTY {STGTY_STORAGE = 0x1,STGTY_STREAM = 0x2,STGTY_LOCKBYTES = 0x3,STGTY_PROPERTY = 0x4,};
enum tagTYMED {TYMED_HGLOBAL = 0x1,TYMED_FILE = 0x2,TYMED_ISTREAM = 0x4,TYMED_ISTORAGE = 0x8,TYMED_GDI = 0x10,TYMED_MFPICT = 0x20,TYMED_ENHMF = 0x40,TYMED_NULL = 0x0,};
typedef struct __MIDL___MIDL_itf_wtypes_0003_0001 uCLSSPEC;
typedef struct tagACTCTXA ACTCTXA;
typedef struct tagACTCTXW ACTCTXW;
typedef union tagBINDPTR BINDPTR;
typedef struct _F8C02B799BC5153138A3AC7C0BDE9C8E BSMINFO;
typedef struct _GETSETBUSDATA BUSDATA;
typedef struct tagCACLSID CACLSID;
typedef struct tagCADWORD CADWORD;
typedef struct tagCALPSTR CALPSTR;
typedef struct tagCASCODE CASCODE;
typedef struct _CERT_ID CERT_ID;
typedef int CIMTYPE;
typedef struct _CLIPOBJ CLIPOBJ;
typedef struct _COMSTAT COMSTAT;
typedef struct _CONTEXT CONTEXT;
typedef struct _D3DLINE D3DLINE;
typedef struct _D3DRECT D3DRECT;
typedef struct _D3DSPAN D3DSPAN;
typedef struct _DBLNODE DBLNODE;
typedef int DCIRVAL;
typedef struct _DDBLTFX DDBLTFX;
typedef struct _30CDF2DE7DC7B55457111E3E79D8AE18 DDEDATA;
typedef struct _A2F74AF90EE3AACE3322F4FF0CBF4977 DDEPOKE;
typedef struct _DDSCAPS DDSCAPS;
typedef struct _43A66EA2444E935077C76570D355CBC3 DEADKEY;
typedef struct tagDEC DECIMAL;
typedef struct tagDEVINFO DEVINFO;
typedef struct _DLGPAGE DLGPAGE;
typedef struct _DSBCAPS DSBCAPS;
typedef struct _DSCCAPS DSCCAPS;
typedef struct _DSSSEED DSSSEED;
typedef unsigned int DWORD32;
typedef unsigned long long DWORD64;
typedef struct _A4A1DF623BA0FBABE6621202D771B918 EMFINFO;
typedef struct tagEMRTEXT EMRTEXT;
typedef struct _EXTPUSH EXTPUSH;
typedef int ( *FARPROC)();
typedef struct _FONTOBJ FONTOBJ;
typedef struct _FONTSIM FONTSIM;
struct Folder2 {struct Folder2Vtbl *lpVtbl;};
struct Folder3 {struct Folder3Vtbl *lpVtbl;};
typedef struct _GDIINFO GDIINFO;
typedef struct HACMOBJ__ *HACMOBJ;
typedef struct HBITMAP__ *HBITMAP;
struct HCONV__ {int unused;};
struct HDESK__ {int unused;};
typedef struct _HD_ITEMA HDITEMA;
typedef struct _HD_ITEMW HDITEMW;
struct HDROP__ {int unused;};
typedef struct HDRVOBJ__ *HDRVOBJ;
struct HDRVR__ {int unused;};
struct HFONT__ {int unused;};
typedef void *HGDIOBJ;
struct HGLRC__ {int unused;};
struct HHOOK__ {int unused;};
struct HICON__ {int unused;};
struct HIMCC__ {int unused;};
struct HMENU__ {int unused;};
typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDI__ {int unused;};
struct HMMIO__ {int unused;};
typedef struct hostent HOSTENT;
struct HPSXA__ {int unused;};
struct HRSRC__ {int unused;};
struct HSURF__ {int unused;};
typedef struct tagHSZPAIR HSZPAIR;
struct HTASK__ {int unused;};
struct HUMPD__ {int unused;};
typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVE__ {int unused;};
typedef struct HWINSTA__ *HWINSTA;
struct IACList {struct IACListVtbl *lpVtbl;};
struct ICDBurn {struct ICDBurnVtbl *lpVtbl;};
typedef struct _IDEREGS IDEREGS;
typedef struct tagIDLDESC IDLDESC;
typedef struct tagIMEINFO IMEINFO;
typedef struct _tagIMEPROA IMEPROA;
typedef struct _tagIMEPROW IMEPROW;
struct IMalloc {struct IMallocVtbl *lpVtbl;};
typedef int INT_PTR;
typedef struct in_addr IN_ADDR;
typedef struct _IOSPACE IOSPACE;
struct IObjMgr {struct IObjMgrVtbl *lpVtbl;};
struct ISearch {struct ISearchVtbl *lpVtbl;};
struct IStream {struct IStreamVtbl *lpVtbl;};
struct IUrlMon {struct IUrlMonVtbl *lpVtbl;};
typedef struct joyinfo_tag JOYINFO;
typedef struct _686FDF1C0C03C3D9039AD8B14FB9C99A KSERROR;
typedef struct _69DAD432D0597BAB6A67398C913F94DB KSP_PIN;
typedef struct tagLICINFO LICINFO;
typedef struct tagACCEL *LPACCEL;
typedef  void *LPCVOID;
typedef struct _DLSID *LPDLSID;
typedef struct tagINPUT *LPINPUT;
typedef struct tagNMKEY *LPNMKEY;
typedef struct tagPOINT *LPPOINT;
typedef IPrint *LPPRINT;
typedef struct _RECTL *LPRECTL;
typedef struct _VMEML *LPVMEML;
typedef struct _VMEMR *LPVMEMR;
typedef struct _rloop *LPWLOOP;
typedef struct _rwsmp *LPWSMPL;
typedef struct tagXFORM *LPXFORM;
typedef struct tagLVGROUP LVGROUP;
typedef struct tagLVITEMA LVITEMA;
typedef struct tagLVITEMW LVITEMW;
enum MACRO_E {E_UNEXPECTED = 0x8000FFFF,E_NOTIMPL = 0x80004001,E_OUTOFMEMORY = 0x8007000E,E_INVALIDARG = 0x80070057,E_NOINTERFACE = 0x80004002,E_POINTER = 0x80004003,E_HANDLE = 0x80070006,E_ABORT = 0x80004004,E_FAIL = 0x80004005,E_ACCESSDENIED = 0x80070005,E_PENDING = 0x8000000A,};
enum MACRO_F {F_INSTRUMENT_DRUMS = 0x80000000,F_RGN_OPTION_SELFNONEXCLUSIVE = 0x1,};
enum MACRO_I {I_INDENTCALLBACK = -1,I_GROUPIDCALLBACK = -1,I_GROUPIDNONE = -2,};
enum MACRO_N {N_BTMASK = 0xF,N_TMASK = 0x30,N_TMASK1 = 0xC0,N_TMASK2 = 0xF0,N_BTSHFT = 0x4,N_TSHIFT = 0x2,};
enum MACRO_S {S_QUEUEEMPTY = 0,S_THRESHOLD = 1,S_ALLTHRESHOLD = 2,S_NORMAL = 0,S_LEGATO = 1,S_STACCATO = 2,S_PERIOD512 = 0,S_PERIOD1024 = 1,S_PERIOD2048 = 2,S_PERIODVOICE = 3,S_WHITE512 = 4,S_WHITE1024 = 5,S_WHITE2048 = 6,S_WHITEVOICE = 7,S_SERDVNA = -1,S_SEROFM = -2,S_SERMACT = -3,S_SERQFUL = -4,S_SERBDNT = -5,S_SERDLN = -6,S_SERDCC = -7,S_SERDTP = -8,S_SERDVL = -9,S_SERDMD = -10,S_SERDSH = -11,S_SERDPT = -12,S_SERDFQ = -13,S_SERDDR = -14,S_SERDSR = -15,S_SERDST = -16,};
typedef struct _MCDSPAN MCDSPAN;
typedef struct midihdr_tag MIDIHDR;
typedef struct _MONITOR MONITOR;
typedef struct tagNMMOUSE NMMOUSE;
typedef struct tagNMREBAR NMREBAR;
typedef struct tagPOINT *NPPOINT;
enum OLECMDF {OLECMDF_SUPPORTED = 0x1,OLECMDF_ENABLED = 0x2,OLECMDF_LATCHED = 0x4,OLECMDF_NINCHED = 0x8,OLECMDF_INVISIBLE = 0x10,OLECMDF_DEFHIDEONCTXTMENU = 0x20,};
typedef struct tagOLEVERB OLEVERB;
typedef struct _OPTITEM OPTITEM;
typedef struct _OPTTYPE OPTTYPE;
typedef struct tagPAGESET PAGESET;
typedef struct _PATHOBJ PATHOBJ;
typedef struct tagBITMAP *PBITMAP;
typedef struct _18FEA12C471CE0A4515515C42723EF45 PBRANGE;
typedef struct tagEMRARC *PEMRARC;
typedef struct tagEMREOF *PEMREOF;
typedef struct tagEMRARC *PEMRPIE;
typedef int PERCENT;
typedef struct fd_set *PFD_SET;
typedef struct _E56F877AE116898CEBF188009740BA30 PID_MAP;
typedef struct _7DB559BE1DE343E17A8A94B6F2E38031 *PKSRATE;
typedef struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1 *PKSTIME;
typedef struct linger *PLINGER;
typedef struct tagLOGPEN *PLOGPEN;
typedef signed int *PLONG32;
typedef long long *PLONG64;
typedef struct mmtime_tag *PMMTIME;
typedef struct tagNMLINK *PNMLINK;
typedef struct tagPOINTFX POINTFX;
typedef struct _POINTQF POINTQF;
typedef struct _POOLCUE POOLCUE;
typedef struct _POINTE *PPOINTE;
typedef struct _POINTL *PPOINTL;
typedef struct tagPOINTS *PPOINTS;
typedef struct tagRAWHID *PRAWHID;
typedef struct _RECTFX *PRECTFX;
typedef struct tagSMINFO *PSMINFO;
typedef struct _PSPINFO PSPINFO;
typedef unsigned short *PUINT16;
typedef unsigned int *PUINT32;
typedef unsigned long long *PUINT64;
typedef struct pvalueA PVALUEA;
typedef struct pvalueW PVALUEW;
typedef struct _VK_VSC *PVK_VSC;
typedef void *PVOID64;
typedef struct _VSC_VK *PVSC_VK;
typedef struct _WNDOBJ *PWNDOBJ;
typedef struct _XFORML *PXFORML;
typedef struct _QCMINFO QCMINFO;
typedef struct tagRGBQUAD RGBQUAD;
typedef struct _RGNDATA RGNDATA;
typedef struct servent SERVENT;
typedef struct tagSTATSTG STATSTG;
typedef struct _SURFOBJ SURFOBJ;
typedef struct tagTCITEMA TCITEMA;
typedef struct tagTCITEMW TCITEMW;
typedef struct timeval TIMEVAL;
typedef struct tagTVITEMA TVITEMA;
typedef struct tagTVITEMW TVITEMW;
typedef struct _UDACCEL UDACCEL;
typedef unsigned int ULONG32;
typedef unsigned long long ULONG64;
typedef struct value_entA VALENTA;
typedef struct value_entW VALENTW;
typedef struct tagVARDESC VARDESC;
enum VARENUM {VT_EMPTY = 0x0,VT_NULL = 0x1,VT_I2 = 0x2,VT_I4 = 0x3,VT_R4 = 0x4,VT_R8 = 0x5,VT_CY = 0x6,VT_DATE = 0x7,VT_BSTR = 0x8,VT_DISPATCH = 0x9,VT_ERROR = 0xA,VT_BOOL = 0xB,VT_VARIANT = 0xC,VT_UNKNOWN = 0xD,VT_DECIMAL = 0xE,VT_I1 = 0x10,VT_UI1 = 0x11,VT_UI2 = 0x12,VT_UI4 = 0x13,VT_I8 = 0x14,VT_UI8 = 0x15,VT_INT = 0x16,VT_UINT = 0x17,VT_VOID = 0x18,VT_HRESULT = 0x19,VT_PTR = 0x1A,VT_SAFEARRAY = 0x1B,VT_CARRAY = 0x1C,VT_USERDEFINED = 0x1D,VT_LPSTR = 0x1E,VT_LPWSTR = 0x1F,VT_RECORD = 0x24,VT_INT_PTR = 0x25,VT_UINT_PTR = 0x26,VT_FILETIME = 0x40,VT_BLOB = 0x41,VT_STREAM = 0x42,VT_STORAGE = 0x43,VT_STREAMED_OBJECT = 0x44,VT_STORED_OBJECT = 0x45,VT_BLOB_OBJECT = 0x46,VT_CF = 0x47,VT_CLSID = 0x48,VT_VERSIONED_STREAM = 0x49,VT_BSTR_BLOB = 0xFFF,VT_VECTOR = 0x1000,VT_ARRAY = 0x2000,VT_BYREF = 0x4000,VT_RESERVED = 0x8000,VT_ILLEGAL = 0xFFFF,VT_ILLEGALMASKED = 0xFFF,VT_TYPEMASK = 0xFFF,};
typedef struct tagVARIANT VARIANT;
typedef unsigned short VARTYPE;
typedef struct wavehdr_tag WAVEHDR;
typedef struct tagWCRANGE WCRANGE;
typedef struct _WGLSWAP WGLSWAP;
typedef struct WSAData WSADATA;
typedef struct WSPData WSPDATA;
enum _SPTEXT {SPTEXT_ACTIONDESCRIPTION = 0x1,SPTEXT_ACTIONDETAIL = 0x2,};
typedef signed char _TSCHAR;
typedef unsigned char _TUCHAR;
typedef char _TXCHAR;
struct _ldiv_t {int quot;int rem;};
typedef unsigned char boolean;
typedef int clock_t;
struct hostent {char *h_name;char **h_aliases;short h_addrtype;short h_length;char **h_addr_list;};
struct servent {char *s_name;char **s_aliases;short s_port;char *s_proto;};
enum tagADVF {ADVF_NODATA = 0x1,ADVF_PRIMEFIRST = 0x2,ADVF_ONLYONCE = 0x4,ADVF_DATAONSTOP = 0x40,ADVFCACHE_NOHANDLER = 0x8,ADVFCACHE_FORCEBUILTIN = 0x10,ADVFCACHE_ONSAVE = 0x20,};
enum tagSTGC {STGC_DEFAULT = 0x0,STGC_OVERWRITE = 0x1,STGC_ONLYIFCURRENT = 0x2,STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,STGC_CONSOLIDATE = 0x8,};
struct timeval {int tv_sec;int tv_usec;};
typedef unsigned long long u_int64;
typedef unsigned short u_short;
/// #define wchar_t  unsigned __int16 ===DEFINED
typedef unsigned int ALG_ID;
typedef struct tagBITMAP BITMAP;
typedef struct tagCABOOL CABOOL;
typedef struct tagCABSTR CABSTR;
typedef struct tagCADATE CADATE;
typedef struct tagCAUUID CAUUID;
struct CDBurn;
typedef struct tagCIEXYZ CIEXYZ;
typedef struct _cpinfo CPINFO;
typedef struct _D3DBOX D3DBOX;
typedef struct _DCICMD DCICMD;
typedef struct _DDARGB DDARGB;
typedef struct _923DA7BE11DCB482D02B0566D8DB27AB DDEACK;
typedef struct _DDRGBA DDRGBA;
typedef struct DHPDEV__ *DHPDEV;
typedef struct DHSURF__ *DHSURF;
typedef double DOUBLE;
typedef struct _DSCAPS DSCAPS;
typedef struct tagEMRARC EMRARC;
typedef struct tagEMREOF EMREOF;
typedef struct tagEMRARC EMRPIE;
typedef struct fd_set FD_SET;
struct Folder {struct FolderVtbl *lpVtbl;};
typedef struct HACCEL__ *HACCEL;
typedef void *HANDLE;
typedef struct HBRUSH__ *HBRUSH;
struct HDEV__ {int unused;};
struct HIMC__ {int unused;};
struct HKEY__ {int unused;};
typedef struct HMIXER__ *HMIXER;
struct HPEN__ {int unused;};
struct HRGN__ {int unused;};
struct HSTR__ {int unused;};
typedef struct HVIDEO__ *HVIDEO;
struct HWND__ {int unused;};
typedef struct _3A21E11B68C434F2F5E8C2B6B2DCB409 ICDRAW;
typedef struct _DC731844EB8703AC39E0F1B64989CDCD ICINFO;
typedef struct _478EBBB1B521D3328EC986A2D868B910 ICOPEN;
struct IKsPin;
struct IPrint {struct IPrintVtbl *lpVtbl;};
typedef struct _7DB559BE1DE343E17A8A94B6F2E38031 KSRATE;
typedef struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1 KSTIME;
typedef struct linger LINGER;
typedef struct tagLOGPEN LOGPEN;
typedef signed int LONG32;
typedef long long LONG64;
typedef struct tagBLOB *LPBLOB;
typedef struct _CSFV *LPCSFV;
typedef IFont *LPFONT;
typedef int *LPLONG;
typedef struct _MAT2 *LPMAT2;
typedef struct tagRECT *LPRECT;
typedef struct tagSIZE *LPSIZE;
typedef void *LPVOID;
typedef struct _MCDBUF MCDBUF;
typedef struct _MCDMEM MCDMEM;
typedef struct mmtime_tag MMTIME;
typedef struct tagNMCHAR NMCHAR;
typedef struct tagNMLINK NMLINK;
typedef struct tagRECT *NPRECT;
typedef struct _NT_TIB NT_TIB;
typedef struct _tagOLECMD OLECMD;
typedef struct _PALOBJ PALOBJ;
typedef struct tagPANOSE PANOSE;
typedef struct _COORD *PCOORD;
typedef struct _DRVFN *PDRVFN;
typedef struct _ENG_EVENT *PEVENT;
typedef struct tagINPUT *PINPUT;
typedef signed short *PINT16;
typedef signed int *PINT32;
typedef signed long long *PINT64;
typedef struct _INVOC *PINVOC;
typedef struct tagLITEM *PLITEM;
typedef struct _OIEXT *POIEXT;
typedef struct _POINTE POINTE;
typedef struct tagPOINTF POINTF;
typedef struct _POINTL POINTL;
typedef struct tagPOINTS POINTS;
typedef struct tagPOINT *PPOINT;
typedef struct _RECTL *PRECTL;
typedef unsigned char *PTBYTE;
typedef char *PTCHAR;
typedef unsigned char *PUINT8;
typedef struct _WCRUN *PWCRUN;
typedef struct tagXFORM *PXFORM;
typedef struct tagRAWHID RAWHID;
typedef struct _RECTFX RECTFX;
typedef struct tagRemSNB RemSNB;
typedef struct tagSMDATA SMDATA;
typedef struct tagSMINFO SMINFO;
typedef struct _STROBJ STROBJ;
typedef struct _STRRET STRRET;
typedef struct _TBINFO TBINFO;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef unsigned short USHORT;
typedef struct _VIDMEM VIDMEM;
typedef struct _VK_VSC VK_VSC;
typedef struct _VSC_VK VSC_VK;
typedef struct _WNDOBJ WNDOBJ;
typedef struct _WSABUF WSABUF;
typedef struct _XFORML XFORML;
typedef char _TCHAR;
struct _div_t {int quot;int rem;};
struct _iobuf {char *_ptr;int _cnt;char *_base;int _flag;int _file;int _charbuf;int _bufsiz;char *_tmpfname;};
typedef long long fpos_t;
typedef struct _ldiv_t ldiv_t;
typedef unsigned int size_t;
typedef int time_t;
typedef unsigned char u_char;
typedef unsigned int u_long;
typedef struct tagACCEL ACCEL;
typedef struct tagCADBL CADBL;
typedef struct tagCAFLT CAFLT;
typedef char CCHAR;
typedef struct _COORD COORD;
typedef struct _7ADE47B00230EF5EBD78FEDFCEB95499 DDELN;
typedef struct _12220BD7577024BDCE09342FCD2824E0 DDEUP;
typedef struct _DLSID DLSID;
typedef struct _DRVFN DRVFN;
typedef unsigned int DWORD;
typedef struct _FIXED FIXED;
typedef float FLOAT;
typedef int GCENT;
typedef unsigned int GROUP;
struct HBM__ {int unused;};
typedef struct HCONV__ *HCONV;
struct HDC__ {int unused;};
typedef struct HDESK__ *HDESK;
typedef struct HDROP__ *HDROP;
typedef struct HDRVR__ *HDRVR;
typedef int HFILE;
typedef struct HFONT__ *HFONT;
typedef struct HGLRC__ *HGLRC;
typedef struct HHOOK__ *HHOOK;
typedef struct HICON__ *HICON;
struct HIC__ {int unused;};
typedef struct HIMCC__ *HIMCC;
struct HKL__ {int unused;};
typedef struct HMENU__ *HMENU;
typedef struct HMIDI__ *HMIDI;
typedef struct HMMIO__ *HMMIO;
typedef char *HPSTR;
typedef struct HPSXA__ *HPSXA;
typedef struct HRSRC__ *HRSRC;
typedef struct HSURF__ *HSURF;
struct HSZ__ {int unused;};
typedef struct HTASK__ *HTASK;
typedef struct HUMPD__ *HUMPD;
typedef struct HWAVE__ *HWAVE;
struct IFont {struct IFontVtbl *lpVtbl;};
typedef struct tagINPUT INPUT;
typedef signed short INT16;
typedef signed int INT32;
typedef signed long long INT64;
typedef struct _INVOC INVOC;
typedef struct tagLITEM LITEM;
typedef struct _ABC *LPABC;
typedef struct _DCB *LPDCB;
typedef struct _IDA *LPIDA;
typedef int *LPINT;
typedef struct tagMSG *LPMSG;
typedef struct _QualityOfService *LPQOS;
typedef struct _MCDRC MCDRC;
typedef struct tagNMHDR NMHDR;
typedef struct tagNMKEY NMKEY;
typedef struct _ABC *NPABC;
typedef struct tagMSG *NPMSG;
typedef struct _OIEXT OIEXT;
typedef int PCENT;
typedef signed char *PINT8;
typedef struct _SID *PISID;
typedef struct _LUID *PLUID;
typedef struct tagPOINT POINT;
typedef struct tagRECT *PRECT;
typedef struct tagSIZE *PSIZE;
typedef unsigned int *PUINT;
typedef struct _VK_TO_FUNCTION_TABLE *PVK_F;
typedef void *PVOID;
typedef struct _RECTL RECTL;
typedef short SHORT;
struct Shell;
typedef unsigned char TBYTE;
typedef int TCENT;
typedef char TCHAR;
typedef unsigned char UCHAR;
typedef struct _7545F1A067A9FBB43FDF50E78E6B08BD UDATE;
typedef unsigned char UINT8;
typedef unsigned int ULONG;
typedef struct _VMEML VMEML;
typedef struct _VMEMR VMEMR;
typedef struct _WCRUN WCRUN;
typedef struct _rloop WLOOP;
typedef struct _rwsmp WSMPL;
typedef struct tagXFORM XFORM;
struct _GUID {unsigned int Data1;unsigned short Data2;unsigned short Data3;unsigned char Data4[8];};
typedef int _TINT;
typedef struct _div_t div_t;
typedef unsigned int u_int;
typedef struct tagBLOB BLOB;
typedef int BOOL;
typedef unsigned char BYTE;
typedef struct tagCACY CACY;
typedef struct tagCAUB CAUB;
typedef struct tagCAUH CAUH;
typedef struct tagCAUI CAUI;
typedef struct tagCAUL CAUL;
typedef char CHAR;
typedef struct _IDA CIDA;
typedef struct tagCRGB CRGB;
typedef struct _CSFV CSFV;
typedef double DATE;
typedef struct _iobuf FILE;
typedef struct _GUID GUID;
typedef struct HDEV__ *HDEV;
typedef struct _DPA *HDPA;
typedef struct _DSA *HDSA;
typedef struct HIMC__ *HIMC;
typedef struct HKEY__ *HKEY;
typedef struct HPEN__ *HPEN;
typedef struct HRGN__ *HRGN;
typedef struct HSTR__ *HSTR;
typedef struct HWND__ *HWND;
typedef signed char INT8;
struct IPin;
typedef int LONG;
typedef IBindCtx *LPBC;
typedef struct _LUID LUID;
typedef struct _MAT2 MAT2;
typedef struct _ABC *PABC;
typedef struct tagEMR *PEMR;
typedef int *PINT;
typedef struct tagMSG *PMSG;
typedef struct _NCB *PNCB;
typedef int ( *PROC)();
typedef struct _RUN *PRUN;
typedef struct tagRECT RECT;
typedef struct tagSIZE SIZE;
typedef unsigned int UINT;
typedef struct _VK_TO_FUNCTION_TABLE VK_F;
typedef unsigned short WORD;
struct _PSP;
typedef unsigned char byte;
typedef struct _ABC ABC;
typedef struct _ACL ACL;
typedef struct tagCAC CAC;
typedef struct tagCAH CAH;
typedef struct tagCAI CAI;
typedef struct tagCAL CAL;
typedef struct _DCB DCB;
typedef struct tagEMR EMR;
typedef struct HBM__ *HBM;
typedef struct HDC__ *HDC;
typedef struct HIC__ *HIC;
typedef struct HKL__ *HKL;
typedef struct HSZ__ *HSZ;
typedef int INT;
typedef struct _MDL MDL;
typedef struct tagMSG MSG;
typedef struct _NCB NCB;
typedef char *PSZ;
typedef struct _QualityOfService QOS;
typedef struct _RUN RUN;
typedef struct _SID SID;
typedef union tagCY CY;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2___9A3D5550B6DEF9CE405BB00483386E67 {BYTE Flags;};
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2___DB4434C0CE3788EF589018B7D8F8E412 {DWORD NodeNumber;};
struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___7C8E1366D020F294DF98B2AA96DD5064 {GUID ObjectId;GUID PolicyId;};
struct _DEVICE_MEDIA_INFO_________4F7870307D68C2FCA7F129B9E5696535___445D6B15ACF5C822E8B4A555F1AF8785 {BYTE MediumType;BYTE DensityCode;};
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___99025D9F8BC16C326FB237046D6F6F6F {WORD Minimum;WORD Maximum;};
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___B2B02F0A7FAA2EF9E06FFE2893D08AB3 {WORD Minimum;WORD Maximum;WORD MaximumBlocks;};
struct _EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786___11F7F98663FFB665C68BB15C93C2F507 {UCHAR HeaderType;UCHAR MarkerFlags;};
struct _EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___3916B5A0A4660469331A3AB74E6C841E {ULONG KernelTime;ULONG UserTime;};
struct _EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___4632BB0954E310FA042A82D8AAC70C14 {ULONG ClientContext;ULONG Flags;};
union _DEVICE_MEDIA_INFO______723F4108713078BC94E60AB72DA19CAC___4F7870307D68C2FCA7F129B9E5696535 {struct _DEVICE_MEDIA_INFO_________4F7870307D68C2FCA7F129B9E5696535___445D6B15ACF5C822E8B4A555F1AF8785 ScsiInformation;};
struct _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5 {BYTE BirthVolumeId[16];BYTE BirthObjectId[16];BYTE DomainId[16];};
struct _TRACE_LOGFILE_HEADER___2BC8F7E6FF87669E4A0C925407CB65FB___0637F23A6873A28AE6543F059E4656C5 {UCHAR MajorVersion;UCHAR MinorVersion;UCHAR SubVersion;UCHAR SubMinorVersion;};
struct _TRACE_LOGFILE_HEADER___548299C9C2C0CFAB401D5C20E83DC5C0___8A1F015C44BA8AC17C85DC9BC7770995 {ULONG StartBuffers;ULONG PointerSize;ULONG EventsLost;ULONG CpuSpeedInMHz;};
struct _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6___BE6FFFE6B14D10E80BF326EA5B53821A {GUID DiskId;};
struct _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6___D881D5162AD89D33B7C29C1B01B58C16 {DWORD Signature;DWORD CheckSum;};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 {WORD Dimension[4];};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 {DWORD PointerToLinenumber;DWORD PointerToNextFunction;};
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 {WORD Linenumber;WORD Size;};
struct _EVENT_TRACE_HEADER___1AD55EBA06F1C593881758F8895638BC___11F7F98663FFB665C68BB15C93C2F507 {UCHAR HeaderType;UCHAR MarkerFlags;};
struct _EVENT_TRACE_HEADER___542A7946210020DC939EF0A87B64A883___3916B5A0A4660469331A3AB74E6C841E {ULONG KernelTime;ULONG UserTime;};
struct _EVENT_TRACE_HEADER___542A7946210020DC939EF0A87B64A883___4632BB0954E310FA042A82D8AAC70C14 {ULONG ClientContext;ULONG Flags;};
struct _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058___A887C3F43B2C266F56E28E9B472055DF {DWORD dwXAlignment;DWORD dwYAlignment;DWORD dwFlags;DWORD dwReserved2;};
struct _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058___AFC34197E5C51B956EFAB0EF06B6B136 {DWORD dwStartAlignment;DWORD dwPitchAlignment;DWORD dwFlags;DWORD dwReserved2;};
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___C57AEBFB9C28022BDEE1928105F7EF0C {u_char Len;u_char CharSet;u_char UsrStr[256];};
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC {LONG lMinimum;LONG lMaximum;};
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A9226EEFE738F03A3F7D52221D0941CC {LONG lMinimum;LONG lMaximum;};
struct tagVARIANT_________E09503A454170B491AC1C4312CE36FE6___0FDBD249F1AECD6A49409B6B82281578 {PVOID pvRecord;IRecordInfo *pRecInfo;};
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___3558499B00780F336C093631BA5DA9A7 {int Len;u_char OctetSeq[1];u_char Reserved[3];};
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___6F55BDC2B20B661E3B87B545C6DF801F {int Len;u_char CharSet;u_char UsrStr[1];u_char Reserved[2];};
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___1D5E47AA0A419EF9D9DA6D4AA01777EC {LPWSAOVERLAPPED lpOverlapped;};
struct _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3___DE8E098676ACAC74F2956A2D7B83DF3B {DWORD Short;DWORD Long;};
struct _WNODE_HEADER___FC8E5BF4FD761F48CA6E0E74FA8C78CE___0AFF34700F133A66677DA8590144B5D8 {ULONG Version;ULONG Linkage;};
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 {WORD wProcessorArchitecture;WORD wReserved;};
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___3558499B00780F336C093631BA5DA9A7 {int Len;u_char OctetSeq[1];u_char Reserved[3];};
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___6F55BDC2B20B661E3B87B545C6DF801F {int Len;u_char CharSet;u_char UsrStr[1];u_char Reserved[2];};
struct _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC___357EACEEC0937B9854AEEA856D78648F {USHORT s_srcport;USHORT s_dstport;};
struct _OVERLAPPED___742A73540840F318F86F9CEE3D494648___9BFE693EDA487769FDABADE5E43394F7 {DWORD Offset;DWORD OffsetHigh;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7 {HMETAFILE hmeta;int xExt;int yExt;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8 {HICON hicon;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692 {HENHMETAFILE hemf;};
struct tagRAWMOUSE___BAD619BF849CA7670BF9DAFAE180B654___3E7396A53A7735AC40BFDACB443E8DAA {USHORT usButtonFlags;USHORT usButtonData;};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE {BYTE BaseMid;BYTE Flags1;BYTE Flags2;BYTE BaseHi;};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB {BYTE hour;BYTE min;BYTE sec;BYTE frame;BYTE fps;BYTE dummy;BYTE pad[2];};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D {DWORD songptrpos;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 {u_char s_b1;u_char s_b2;u_char s_b3;u_char s_b4;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 {u_short s_w1;u_short s_w2;};
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B {BYTE scale;BYTE sign;};
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 {ULONG Lo32;ULONG Mid32;};
union _48F34F6E58318E719B3C17D5DF8D3416___BF32DB6F8F7ADBF71F90C18AFCE2FD9C {WORD wValidBitsPerSample;WORD wSamplesPerBlock;WORD wReserved;};
union _7DEDD44825251A4EAA915BE1158FDB4F___DA7EE1E32CD45FB8635BE676609FC669 {ULONG OptionsFlags;ULONG RequirementsFlags;};
struct _87B5C366CEDD06D1A6AC557671C7F981___EEA291B95E2758FCA85357F8BCFF0FA8 {LONGLONG SignedMinimum;LONGLONG SignedMaximum;};
union _C6963F188D9781F9428F32FE3A3801AF___B3542C9802D50308928B7299817A649E {MESSAGEBOX_PARAMS MessageBoxParams;};
struct _C9F2A16A1B5FC998B91DA494984E0FDB___0559678CAE7576A37561112FDF9C20E6 {LONG SignedMinimum;LONG SignedMaximum;};
struct _C9F2A16A1B5FC998B91DA494984E0FDB___F7C05C0C56E55CB044DFD46C70BB2992 {ULONG UnsignedMinimum;ULONG UnsignedMaximum;};
union _CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4 {HKEY hKeyBase;void *pvBase;};
union _D3DNTHAL_CONTEXTCREATEDATA___7306C4885F53B6B53241EB9996CEFDB0 {PDD_SURFACE_LOCAL lpDDS;PDD_SURFACE_LOCAL lpDDSLcl;};
union _D3DNTHAL_CONTEXTCREATEDATA___A8B4623C3229555B56CAEDFBFEF613EE {PDD_SURFACE_LOCAL lpDDSZ;PDD_SURFACE_LOCAL lpDDSZLcl;};
struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0 {LARGE_INTEGER NextVcn;LARGE_INTEGER Lcn;};
union _DDHAL_GETDRIVERSTATEDATA___55B688470741D627FF8277FCA6824CAA {ULONG_PTR dwhContext;};
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 {BYTE DataBuffer[1];};
union _DDRAWI_DDRAWSURFACE_LCL___91466F88B03FE00779D4AC4358EC9B5C {LPDDRAWI_DDRAWPALETTE_INT lpDDPalette;LPDDRAWI_DDRAWPALETTE_INT lp16DDPalette;};
union _HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 {DWORD cbStruct;DWORD cbSize;};
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 {DWORD Characteristics;DWORD OriginalFirstThunk;};
union _IMAGE_FUNCTION_ENTRY64___20B872DD2F1538A436CF92B8294FA12B {ULONGLONG EndOfPrologue;ULONGLONG UnwindInfoAddress;};
union _SP_ALTPLATFORM_INFO_V2___93AF3E658AF10EA933E0A7726F592163 {WORD Reserved;WORD Flags;};
union _NDR_USER_MARSHAL_INFO___2E50A3D60C3ABC8A29A927969B630A6D {NDR_USER_MARSHAL_INFO_LEVEL1 Level1;};
union _RPC_SECURITY_QOS_V2_A___21F5B817940D6D46E3F17BCDBFB4C1E3 {RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;};
union _RPC_SECURITY_QOS_V2_W___29884D18EDD7E60328F7BC8BF7D34E2F {RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;};
union _RPC_SECURITY_QOS_V3_A___21F5B817940D6D46E3F17BCDBFB4C1E3 {RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;};
union _RPC_SECURITY_QOS_V3_W___29884D18EDD7E60328F7BC8BF7D34E2F {RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;};
union _D3DNTHAL_DP2SETLIGHT___BAE4FD8B353780C236F6C67FD08E1F99 {DWORD lightData;DWORD dwDataType;};
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D {PFULL_PTR_TO_REFID_ELEMENT *XlatTable;unsigned int NumberOfBuckets;unsigned int HashMask;};
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C {DWORD PhysicalAddress;DWORD VirtualSize;};
union tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
union tagMIXERLINECONTROLSW___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 {WORD Ordinal;WORD Hint;};
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 {CERT_ALT_NAME_INFO FullName;};
union _D3DNTHAL_DP2COMMAND___14A7885A2BAE378098B3BAEC00AA634B {WORD wPrimitiveCount;WORD wStateCount;};
union _CMC_TAGGED_REQUEST___F9232B04B0227B82B480A0AF719B17A6 {PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;};
union _IMAGE_THUNK_DATA32___A667AA66621C320A48F8EE5C4EA8143D {DWORD ForwarderString;DWORD Function;DWORD Ordinal;DWORD AddressOfData;};
union _IMAGE_THUNK_DATA64___F155400DC8E777EDFF51409B49416578 {ULONGLONG ForwarderString;ULONGLONG Function;ULONGLONG Ordinal;ULONGLONG AddressOfData;};
union _D3DHAL_DP2COMMAND___14A7885A2BAE378098B3BAEC00AA634B {WORD wPrimitiveCount;WORD wStateCount;};
union _SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 {HANDLE hIcon;HANDLE hMonitor;};
union _SHELLEXECUTEINFOW___D915D6B2B775D926C11EEA321E8940B4 {HANDLE hIcon;HANDLE hMonitor;};
union _DD_SURFACE_LOCAL___8CE80F6FCD2F01A44D21440F2D83D305 {DDCOLORKEY ddckCKSrcOverlay;DDCOLORKEY ddckCKSrcBlt;};
union _DD_SURFACE_LOCAL___E7EC937F2BC99723904DDC13F7AE4E6E {DDCOLORKEY ddckCKDestOverlay;DDCOLORKEY ddckCKDestBlt;};
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 {BYTE Name[18];};
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 {DWORD SymbolTableIndex;DWORD VirtualAddress;};
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED {DWORD VirtualAddress;DWORD RelocCount;};
union _KSM_BDA_PIN_PAIR___54CD25B4E687557DB78A3697AAB04510 {ULONG OutputPinId;ULONG OutputPinType;};
union _KSM_BDA_PIN_PAIR___F2C15BE15B02E5D4E08CDF00E238673A {ULONG InputPinId;ULONG InputPinType;};
struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B {WORD Write;WORD Create;WORD SetInfo;WORD Flush;};
struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156 {DWORD Calls;DWORD Clusters;DWORD Hints;DWORD RunsReturned;DWORD HintsHonored;DWORD HintsClusters;DWORD Cache;DWORD CacheClusters;DWORD CacheMiss;DWORD CacheMissClusters;};
struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250 {WORD Write;WORD Create;WORD SetInfo;};
union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
union _DDSURFACEDESC2___E56E877DD0D4D3B03846BC7047D947ED {DWORD dwBackBufferCount;DWORD dwDepth;};
union _DDSURFACEDESC2___F25F5019EA70F6B9B11866A0D418A260 {DWORD dwMipMapCount;DWORD dwRefreshRate;DWORD dwSrcVBHandle;};
struct _DD_MORESURFACECAPS__tagNTExtendedHeapRestrictions {DDSCAPSEX ddsCapsEx;DDSCAPSEX ddsCapsExAlt;};
union _SYM_DUMP_PARAM___0CD91D185F770C4760C3259863AFD91E {PVOID Context;PVOID pBuffer;};
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC {DWORD LowPart;DWORD HighPart;};
union _DDPIXELFORMAT___0E0BD8DB15B3F2A790C062F781315157 {DWORD dwRBitMask;DWORD dwYBitMask;};
union _DDPIXELFORMAT___10AA641B3215541DB69A48A361AE0013 {DWORD dwRGBBitCount;DWORD dwYUVBitCount;DWORD dwZBufferBitDepth;DWORD dwAlphaBitDepth;};
union _DDPIXELFORMAT___3ED4EC923A768B2489A9D1155BD11968 {DWORD dwRGBAlphaBitMask;DWORD dwYUVAlphaBitMask;DWORD dwRGBZBitMask;DWORD dwYUVZBitMask;};
union _DDPIXELFORMAT___4C5EBD389D88C4C046794501FFF390F4 {DWORD dwBBitMask;DWORD dwVBitMask;};
union _DDPIXELFORMAT___DB4BDA43012B420E1DC9AEEACAA267A5 {DWORD dwGBitMask;DWORD dwUBitMask;};
union _DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B {DWORD dwMipMapCount;DWORD dwZBufferBitDepth;DWORD dwRefreshRate;};
union _D3DMATERIAL7___0E29CCD1ABCFA56B0343B217BB93547E {D3DVALUE power;D3DVALUE dvPower;};
union _D3DMATERIAL7___48A7D73869B8DD97079A7DB0052C867A {D3DCOLORVALUE specular;D3DCOLORVALUE dcvSpecular;};
union _D3DMATERIAL7___4E89CE7B3871A99DAB3B73BC63770FCE {D3DCOLORVALUE emissive;D3DCOLORVALUE dcvEmissive;};
union _D3DMATERIAL7___B545799AB1B094EA7448ADA6B118C0D5 {D3DCOLORVALUE ambient;D3DCOLORVALUE dcvAmbient;};
union _D3DMATERIAL7___F37024B6A2A7DA8F8161E452127F778F {D3DCOLORVALUE diffuse;D3DCOLORVALUE dcvDiffuse;};
union _D3DMATERIAL___0E29CCD1ABCFA56B0343B217BB93547E {D3DVALUE power;D3DVALUE dvPower;};
union _D3DMATERIAL___48A7D73869B8DD97079A7DB0052C867A {D3DCOLORVALUE specular;D3DCOLORVALUE dcvSpecular;};
union _D3DMATERIAL___4E89CE7B3871A99DAB3B73BC63770FCE {D3DCOLORVALUE emissive;D3DCOLORVALUE dcvEmissive;};
union _D3DMATERIAL___B545799AB1B094EA7448ADA6B118C0D5 {D3DCOLORVALUE ambient;D3DCOLORVALUE dcvAmbient;};
union _D3DMATERIAL___F37024B6A2A7DA8F8161E452127F778F {D3DCOLORVALUE diffuse;D3DCOLORVALUE dcvDiffuse;};
union _D3DTLVERTEX___0F2CDCA047003D8EC75118693930E691 {D3DVALUE sx;D3DVALUE dvSX;};
union _D3DTLVERTEX___6CA934479C1F92723C45B62B9DC7F703 {D3DVALUE sy;D3DVALUE dvSY;};
union _D3DTLVERTEX___7013070F7992C3CB148910863AB1E659 {D3DVALUE tv;D3DVALUE dvTV;};
union _D3DTLVERTEX___BDFC1E337EC7BF58E4386644A37C7111 {D3DVALUE sz;D3DVALUE dvSZ;};
union _D3DTLVERTEX___ED3D3C9797719C595EAD57A73B2054F3 {D3DVALUE rhw;D3DVALUE dvRHW;};
union _D3DTLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 {D3DVALUE tu;D3DVALUE dvTU;};
union _D3DTRIANGLE___5E81141D7147E4DA50A203FBA8012470 {WORD v2;WORD wV2;};
union _D3DTRIANGLE___B37211E5FB9C3E78EB744E72121563AA {WORD v3;WORD wV3;};
union _D3DTRIANGLE___C167AD525C2A16158535093655B0BE27 {WORD v1;WORD wV1;};
struct _DDMORESURFACECAPS__tagExtendedHeapRestrictions {DDSCAPSEX ddsCapsEx;DDSCAPSEX ddsCapsExAlt;};
union _KSM_BDA_PIN___E33ABE1885360AB30BA4739A3C7D59A2 {ULONG PinId;ULONG PinType;};
union _VIDEOMEMORY___9185259A75FBB280E946CF1BC6C2CB4D {struct _VMEMHEAP *lpHeap;DWORD dwHeight;};
union _devicemodeA___4FBEBCCE69364E072421C9DF045BB77C {DWORD dmDisplayFlags;DWORD dmNup;};
union _devicemodeW___4FBEBCCE69364E072421C9DF045BB77C {DWORD dmDisplayFlags;DWORD dmNup;};
union _D3DHVERTEX___422DE5A9C9FEBBB756750EDCDEE4D165 {D3DVALUE hz;D3DVALUE dvHZ;};
union _D3DHVERTEX___81DEDA9DF6ACB3C44C422FDD657F648D {D3DVALUE hx;D3DVALUE dvHX;};
union _D3DHVERTEX___D02C4950DEF26FBAA94C7BFFD90117CD {D3DVALUE hy;D3DVALUE dvHY;};
union _D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA {D3DVALUE y;D3DVALUE dvY;};
union _D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21 {D3DVALUE z;D3DVALUE dvZ;};
union _D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 {D3DVALUE x;D3DVALUE dvX;};
union _D3DLVERTEX___7013070F7992C3CB148910863AB1E659 {D3DVALUE tv;D3DVALUE dvTV;};
union _D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 {D3DVALUE tu;D3DVALUE dvTU;};
union _DS3DVECTOR___1C324E33BC6F74D1A02BB1B088C4590A {FLOAT z;FLOAT dvZ;};
union _DS3DVECTOR___4C8BE1C25D9187060DF6575EC0B5A14F {FLOAT y;FLOAT dvY;};
union _DS3DVECTOR___C7D9B5A2358E86AF5EA4461ED5800501 {FLOAT x;FLOAT dvX;};
union _FIELD_INFO___510B7A64051C47DF2E916A87C3B03279 {PVOID fieldCallBack;PVOID pBuffer;};
typedef  ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
union _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902 {_D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902___40942CBCB8F0A1CDBC81269929B28324 __anonymous0;float m[4][4];};
union _D3DVERTEX___2970DA2ECFB38188FCB670891BDDBDFA {D3DVALUE y;D3DVALUE dvY;};
union _D3DVERTEX___3781A3F6A2280FF9BE972B852E87FD21 {D3DVALUE z;D3DVALUE dvZ;};
union _D3DVERTEX___3782FED7D702BF3DE1FC57BD6CFA9C0A {D3DVALUE ny;D3DVALUE dvNY;};
union _D3DVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 {D3DVALUE x;D3DVALUE dvX;};
union _D3DVERTEX___7013070F7992C3CB148910863AB1E659 {D3DVALUE tv;D3DVALUE dvTV;};
union _D3DVERTEX___83AC1A1E23B9ECFE234B7286E62DB631 {D3DVALUE nx;D3DVALUE dvNX;};
union _D3DVERTEX___D6B931185C6B831ED9D2BDE28EC5A699 {D3DVALUE nz;D3DVALUE dvNZ;};
union _D3DVERTEX___F5EA273054A07BEACA92D8100BBF37A6 {D3DVALUE tu;D3DVALUE dvTU;};
union _DDSCAPSEX___19AC68468C4510B3DC631A4E89752068 {DWORD dwCaps4;DWORD dwVolumeDepth;};
union _DDSCAPS2___19AC68468C4510B3DC631A4E89752068 {DWORD dwCaps4;DWORD dwVolumeDepth;};
union _NT_TIB32___6105CEC04866A055CE5CBAD3B96FF6B2 {DWORD FiberData;DWORD Version;};
union _D3DLINE___5E81141D7147E4DA50A203FBA8012470 {WORD v2;WORD wV2;};
union _D3DLINE___C167AD525C2A16158535093655B0BE27 {WORD v1;WORD wV1;};
struct _VBICODECFILTERING_STATISTICS_TELETEXT_PIN {VBICODECFILTERING_STATISTICS_COMMON_PIN Common;};
union _userHMETAFILEPICT____MIDL_IWinTypes_0005 {int hInproc;remoteMETAFILEPICT *hRemote;long long hInproc64;};
typedef D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA *LPD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA;
struct _FT_MIRROR_SET_CONFIGURATION_INFORMATION {LONGLONG MemberSize;};
struct _FT_STRIPE_SET_CONFIGURATION_INFORMATION {ULONG StripeSize;};
struct _VBICODECFILTERING_STATISTICS_COMMON_PIN {DWORD SRBsProcessed;DWORD SRBsIgnored;DWORD SRBsMissing;DWORD InternalErrors;DWORD ExternalErrors;DWORD Discontinuities;DWORD LineConfidenceAvg;DWORD BytesOutput;};
union _userHENHMETAFILE____MIDL_IWinTypes_0006 {int hInproc;BYTE_BLOB *hRemote;long long hInproc64;};
struct _VBICODECFILTERING_STATISTICS_NABTS_PIN {VBICODECFILTERING_STATISTICS_COMMON_PIN Common;};
typedef D3DHAL_VALIDATETEXTURESTAGESTATEDATA *LPD3DHAL_VALIDATETEXTURESTAGESTATEDATA;
typedef enum _8362DFB38AAC5C7129C2EC5BB1B5AC2E LSA_FOREST_TRUST_COLLISION_RECORD_TYPE;
typedef enum _POLICY_NOTIFICATION_INFORMATION_CLASS *PPOLICY_NOTIFICATION_INFORMATION_CLASS;
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;DWORD dwUnauthAttrIndex;};
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {DWORD EndOfJobTimeAction;};
struct _VBICODECFILTERING_STATISTICS_TELETEXT {VBICODECFILTERING_STATISTICS_COMMON Common;};
typedef enum _POLICY_NOTIFICATION_INFORMATION_CLASS POLICY_NOTIFICATION_INFORMATION_CLASS;
union _GDI_NONREMOTE____MIDL_IWinTypes_0002 {int hInproc;DWORD_BLOB *hRemote;};
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {ULONGLONG BeginAddress;ULONGLONG EndAddress;ULONGLONG ExceptionHandler;ULONGLONG HandlerData;ULONGLONG PrologEndAddress;};
union _userHMETAFILE____MIDL_IWinTypes_0004 {int hInproc;BYTE_BLOB *hRemote;long long hInproc64;};
typedef D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA *LPD3DHAL_DRAWONEINDEXEDPRIMITIVEDATA;
typedef  ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
struct _FT_REDISTRIBUTION_STATE_INFORMATION {LONGLONG BytesRedistributed;};
struct _VBICODECFILTERING_STATISTICS_CC_PIN {VBICODECFILTERING_STATISTICS_COMMON_PIN Common;};
struct _VBICODECFILTERING_STATISTICS_COMMON {DWORD InputSRBsProcessed;DWORD OutputSRBsProcessed;DWORD SRBsIgnored;DWORD InputSRBsMissing;DWORD OutputSRBsMissing;DWORD OutputFailures;DWORD InternalErrors;DWORD ExternalErrors;DWORD InputDiscontinuities;DWORD DSPFailures;DWORD TvTunerChanges;DWORD VBIHeaderChanges;DWORD LineConfidenceAvg;DWORD BytesOutput;};
struct __MIDL___MIDL_itf_shobjidl_0202_0003 {UINT ViewMode;UINT fFlags;};
union _userHPALETTE____MIDL_IWinTypes_0008 {int hInproc;LOGPALETTE *hRemote;long long hInproc64;};
typedef D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE2 *LPD3DNTHAL_DP2DRAWINDEXEDPRIMITIVE2;
typedef ULONG NDIS_802_11_FRAGMENTATION_THRESHOLD;
typedef enum _NDIS_802_11_NETWORK_INFRASTRUCTURE *PNDIS_802_11_NETWORK_INFRASTRUCTURE;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD ExceptionHandler;DWORD HandlerData;DWORD PrologEndAddress;};
struct _VBICODECFILTERING_NABTS_SUBSTREAMS {DWORD SubstreamMask[128];};
union _userHBITMAP____MIDL_IWinTypes_0007 {int hInproc;userBITMAP *hRemote;long long hInproc64;};
union _userHGLOBAL____MIDL_IWinTypes_0003 {int hInproc;FLAGGED_BYTE_BLOB *hRemote;long long hInproc64;};
typedef enum _2670392E564180BCAB600D3A48500581 KSPROPERTY_BDA_DIGITAL_DEMODULATOR;
typedef enum _179945923F574A37108B154726F97D56 KSPROPERTY_VIDCAP_VIDEOCOMPRESSION;
typedef D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE *LPD3DNTHAL_DP2DRAWINDEXEDPRIMITIVE;
typedef D3DNTHAL_DP2SETVERTEXSHADERCONST *LPD3DNTHAL_DP2SETVERTEXSHADERCONST;
typedef IDirectMusicDownloadedInstrument8 *LPDIRECTMUSICDOWNLOADEDINSTRUMENT8;
typedef enum _NDIS_802_11_NETWORK_INFRASTRUCTURE NDIS_802_11_NETWORK_INFRASTRUCTURE;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A PSP_INTERFACE_DEVICE_DETAIL_DATA_A;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_W PSP_INTERFACE_DEVICE_DETAIL_DATA_W;
struct _01091B9DEBEBC2354EBF1594EEF6BE89 {ULONG PossibleCount;ULONG CurrentCount;};
struct _060D6FD956D3EBF205D64C3CA4764571 {LARGE_INTEGER StartingLcn;};
struct _12065485545C98CF3EA596DDCCDF0ED5 {BOOL fLargeRoom;};
struct _12220BD7577024BDCE09342FCD2824E0 {unsigned short unused : 12;unsigned short fAck : 1;unsigned short fRelease : 1;unsigned short fReserved : 1;unsigned short fAckReq : 1;short cfFormat;BYTE rgb[1];};
struct _204C6CB5B1CC0D35B371E5C594718A83 {LONGLONG Granularity;LONGLONG Error;};
struct _25388EDDA6F9AFF912B25CA06CA16E0D {DWORD cbSize;DWORD dwSignature;DWORD idSpecialFolder;DWORD cbOffset;};
struct _299134A1587F81C88B1AF91D3DBFCA39 {ULONG DialogueLevel;};
struct _2AA7958816AF26AF0A1E54EEE587A92C {ULONG InterleavedCapPossible;};
struct _2FCB7B16F35A994219C907239F9496DC {BOOL fRepeatPreviousBlock;BOOL fErrorInCurrentBlock;};
struct _30CDF2DE7DC7B55457111E3E79D8AE18 {unsigned short unused : 12;unsigned short fResponse : 1;unsigned short fRelease : 1;unsigned short reserved : 1;unsigned short fAckReq : 1;short cfFormat;BYTE Value[1];};
struct _37E4785F055768DB96FB0F6687850E13 {int iButton;DWORD dwFlags;};
struct _3990AA19D6F3231E9709B3F98F437D89 {ULONG RatioNumerator;ULONG RatioDenominator;ULONG RatioConstantMargin;};
struct _3E8BFD172CC0232DA5E7071EC2A0A89F {ULONG CreateFlags;ULONG Node;};
struct _3EC5757393EE7828D79CED73ACE876F0 {unsigned int Count;RPC_IF_ID *IfId[1];};
struct _436EEAB87169589F8FF54A3E6B966B58 {LONG LeftAttenuation;LONG RightAttenuation;};
struct _50092E5B8D5585E25A36D2D7AA7D11CF {LARGE_INTEGER FileReferenceNumber;};
struct _52AD6460DAD19A3D48443005CDCF2412 {ULONG QuietCompression;ULONG LoudCompression;};
struct _5DBE423D59383EF3676E2D6AC9F8E7EA {DWORD dwMicroSecPerFrame;DWORD dwMaxBytesPerSec;DWORD dwPaddingGranularity;DWORD dwFlags;DWORD dwTotalFrames;DWORD dwInitialFrames;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwReserved[4];};
struct _61992E1E6DA7B91ECC7FA4A74B115A04 {LONGLONG Earliest;LONGLONG Latest;};
struct _66CF5E28886A6CE6C0E44A3DF6E2CD53 {BOOL fCopyrighted;BOOL fOriginal;};
struct _6D2254E53597AC8CE26BF57895A6DFF7 {BYTE bCla;BYTE bIns;BYTE bP1;BYTE bP2;BYTE bP3;};
struct _6D40E8E2125A3BBCEB5B162FD51EF33B {DS3DVECTOR Front;DS3DVECTOR Top;};
struct _80E50DFA284ED4BC838B08AAD8EA99BA {LARGE_INTEGER StartingVcn;};
struct _816E3560EF21380C948191659F672DF0 {ULONG MaximumChannelsPerConnection;ULONG MinimumBitsPerSample;ULONG MaximumBitsPerSample;ULONG MinimumSampleFrequency;ULONG MaximumSampleFrequency;ULONG TotalConnections;ULONG ActiveConnections;};
struct _8B9777916333A4B8A3A60FA8F93F002E {SCARD_IO_REQUEST ioRequest;};
struct _8FE9905039884FA12A33AF170E497D82 {ULONG InsideConeAngle;ULONG OutsideConeAngle;};
struct _90E769FB438B6A83B49CA07EC4EB3EFA {DWORD ckid;DWORD dwFlags;DWORD dwChunkOffset;DWORD dwChunkLength;};
struct _9283D0FA6633E8568FC062864CF70F24 {ULONG InterleavedCapSupported;};
struct _97BF4F75CC2B13E4CD29FCADBEF14990 {LONG ActiveSpeakerPositions;};
struct _9ADD4811563784E97592213CBF8060F3 {LONG BitStreamMode;};
struct _9CC657B7E0AE245246966219C61A944E {ULONG CreateFlags;};
struct _A2D3C6DF54C31D821ABE78046EA78F8E {DWORD dwGroupAddress;DWORD dwGroupMask;};
struct _A2F74AF90EE3AACE3322F4FF0CBF4977 {unsigned short unused : 13;unsigned short fRelease : 1;unsigned short fReserved : 2;short cfFormat;BYTE Value[1];};
struct _A97809CBA93BE73DFF75CDF56246D798 {ULONG OffsetInstanceData;ULONG LengthInstanceData;};
struct _B0BC4AADD5C9FF12157D028DEF0CCD6A {ULONG FromNode;ULONG FromNodePin;ULONG ToNode;ULONG ToNodePin;};
struct _B1AAA2E973C90C8AA1D1293855444268 {DWORD dwTtl;DWORD dwRateLimit;};
struct _B4A25942D193F2EAA86C395C02EC729E {ULONG CX;ULONG CY;};
struct _B62AAB724E8D7D841EB663A6FEE96A5E {ULONG MinFrameSize;ULONG MaxFrameSize;ULONG Stepping;};
struct _BC7A094E99B893F962A170A802EFE988 {ULONG MembersFlags;ULONG MembersSize;ULONG MembersCount;ULONG Flags;};
struct _BFD35443418CDCF1187E122E74A5B815 {DWORD dwPitch;DWORD dwXOrigin;DWORD dwYOrigin;};
struct _CA0DACF90AABDE33CADDF7416F0C17F2 {LONGLONG TimeBase;LONGLONG Interval;};
struct _CF7718BAF3C5EB1DFF93AAEE07D29F5C {char szName[260];char szEntryPoint[64];DWORD dwContext;};
struct _CFDE79073F41BFFF7E06FED73F276E8B {LONG timeCount;LONG timeDraw;LONG timeDecompress;LONG timeDither;LONG timeStretch;LONG timeBlt;LONG timeSetDIBits;};
struct _D0C2582348DF16EE31650672742EA602 {ULONG Size;ULONG Count;};
struct _D611436986C6FEF0F654B123D787805F {ULONG PriorityClass;ULONG PrioritySubClass;};
struct _D6B325549B2987A65B0B27A42CFBEF5C {LONGLONG MinTotalNominator;LONGLONG MaxTotalNominator;LONGLONG TotalDenominator;};
struct _DCCCDBDB2D2AC461237A75FB18C0449E {LONGLONG Time;LONGLONG SystemTime;};
struct _DE2D2125000B90024B7DD637FE0DF34E {ULONG TimeDeltaMs;ULONG ByteCount;};
struct _E031005FF5EB1AE848321EA608394D98 {DWORD Granularity;DWORD Capacity;};
struct _E1FC672EFA0154DDDEED24E20FAA5FC7 {WORD versionNumber;WORD offset;};
struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 {BOOL fDownMix;BOOL fDolbySurround;};
struct _E79116A6AA0CFF653592F57D81FA8A4C {ULONG MaximumChannelsPerConnection;ULONG MinimumBitsPerSample;ULONG MaximumBitsPerSample;ULONG MinimumSampleFrequency;ULONG MaximumSampleFrequency;ULONG TotalConnections;ULONG StaticConnections;ULONG StreamingConnections;ULONG ActiveConnections;ULONG ActiveStaticConnections;ULONG ActiveStreamingConnections;ULONG Total3DConnections;ULONG Static3DConnections;ULONG Streaming3DConnections;ULONG Active3DConnections;ULONG ActiveStatic3DConnections;ULONG ActiveStreaming3DConnections;ULONG TotalSampleMemory;ULONG FreeSampleMemory;ULONG LargestFreeContiguousSampleMemory;};
struct _EAF9C7AE235510435B672EB36E720462 {NMHDR hdr;int iItemid;char szText[260];};
struct _EC8EE2E9AF7D4EC32726A7FD632A186D {ULONG ObjectType;ULONG ObjectLength;};
struct _F0DE5EAC046D7D32AA534DC253D377C4 {ULONG ulDeviceType;};
struct _F2BCB5D6531DBE53AEF2D3A6C84D3598 {BYTE Vk;BYTE ModBits;};
typedef enum _D3DSHADER_INSTRUCTION_OPCODE_TYPE D3DSHADER_INSTRUCTION_OPCODE_TYPE;
typedef enum _02FAD7642A42DC49E4482F6F328202A2 KSMETHOD_BDA_DEVICE_CONFIGURATION;
typedef D3DHAL_DP2DRAWINDEXEDPRIMITIVE2 *LPD3DHAL_DP2DRAWINDEXEDPRIMITIVE2;
typedef D3DNTHAL_DP2SETPIXELSHADERCONST *LPD3DNTHAL_DP2SETPIXELSHADERCONST;
typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE MEMORY_RESOURCE_NOTIFICATION_TYPE;
typedef PLSA_TRUST_INFORMATION PTRUSTED_DOMAIN_INFORMATION_BASIC;
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_INTERFACE_DEVICE_DETAIL_DATA_A;
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_W SP_INTERFACE_DEVICE_DETAIL_DATA_W;
struct _D3DNTHAL_DP2INDEXEDTRIANGLELIST2 {WORD wV1;WORD wV2;WORD wV3;};
struct _D3DNTHAL_DP2INDEXEDTRIANGLESTRIP {WORD wV[3];};
struct _D3DNTHAL_DP2SETVERTEXSHADERCONST {DWORD dwRegister;DWORD dwCount;};
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;unsigned int Flags;unsigned int AuthenticationTarget;unsigned int NumberOfAuthnSchemes;unsigned int *AuthnSchemes;unsigned char *ServerCertificateSubject;};
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;unsigned int Flags;unsigned int AuthenticationTarget;unsigned int NumberOfAuthnSchemes;unsigned int *AuthnSchemes;unsigned short *ServerCertificateSubject;};
typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES EOLE_AUTHENTICATION_CAPABILITIES;
typedef RPC_STATUS ( *I_RpcProxyGetConnectionTimeoutFn)(unsigned int *ConnectionTimeout);
typedef enum _38DCB8AC08778B6D83885D33F45337CD KSPROPERTY_DIRECTSOUND3DLISTENER;
typedef enum _6C28A36E3B687017C39113137644E2AF KSPROPERTY_SYSAUDIO_DEFAULT_TYPE;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *LPCREATIVEFASTSPEECH10WAVEFORMAT;
typedef D3DHAL_DP2DRAWINDEXEDPRIMITIVE *LPD3DHAL_DP2DRAWINDEXEDPRIMITIVE;
typedef D3DHAL_DP2SETVERTEXSHADERCONST *LPD3DHAL_DP2SETVERTEXSHADERCONST;
typedef D3DNTHAL_CONTEXTDESTROYALLDATA *LPD3DNTHAL_CONTEXTDESTROYALLDATA;
typedef D3DNTHAL_DP2CREATEVERTEXSHADER *LPD3DNTHAL_DP2CREATEVERTEXSHADER;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *NPCREATIVEFASTSPEECH10WAVEFORMAT;
typedef  ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;
typedef enum _NDIS_802_11_AUTHENTICATION_MODE *PNDIS_802_11_AUTHENTICATION_MODE;
typedef enum _POLICY_DOMAIN_INFORMATION_CLASS *PPOLICY_DOMAIN_INFORMATION_CLASS;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A PSP_DEVICE_INTERFACE_DETAIL_DATA;
typedef PSP_INTERFACE_DEVICE_DETAIL_DATA_A PSP_INTERFACE_DEVICE_DETAIL_DATA;
typedef LSA_TRUST_INFORMATION TRUSTED_DOMAIN_INFORMATION_BASIC;
struct _D3DNTHAL_DP2INDEXEDTRIANGLELIST {WORD wV1;WORD wV2;WORD wV3;WORD wFlags;};
struct _D3DNTHAL_DP2SETPIXELSHADERCONST {DWORD dwRegister;DWORD dwCount;};
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {DWORD FuncStart;unsigned int PrologLen : 8;unsigned int FuncLen : 22;unsigned int ThirtyTwoBit : 1;unsigned int ExceptionFlag : 1;};
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {DWORD UIRestrictionsClass;};
struct _VBICODECFILTERING_CC_SUBSTREAMS {DWORD SubstreamMask;};
struct _VBICODECFILTERING_STATISTICS_CC {VBICODECFILTERING_STATISTICS_COMMON Common;};
typedef enum _6A1D6C7F5A20D066AEDEECAB36006C72 KSPROPERTY_BDA_FREQUENCY_FILTER;
typedef enum _5DA232089AAC7698584D5CE3C3A8D71B KSPROPERTY_VIDCAP_CAMERACONTROL;
typedef enum _9E0565FF8CB6288B094DEDB695088DFB KSPROPERTY_VIDCAP_DROPPEDFRAMES;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *LPCREATIVEFASTSPEECH8WAVEFORMAT;
typedef D3DHAL_DP2SETPIXELSHADERCONST *LPD3DHAL_DP2SETPIXELSHADERCONST;
typedef D3DNTHAL_DP2CREATEPIXELSHADER *LPD3DNTHAL_DP2CREATEPIXELSHADER;
typedef D3DNTHAL_DP2MULTIPLYTRANSFORM *LPD3DNTHAL_DP2MULTIPLYTRANSFORM;
typedef D3DNTHAL_DP2SETSTREAMSOURCEUM *LPD3DNTHAL_DP2SETSTREAMSOURCEUM;
typedef D3DNTHAL_DP2TEXTURESTAGESTATE *LPD3DNTHAL_DP2TEXTURESTAGESTATE;
typedef DDHAL_DDCOLORCONTROLCALLBACKS *LPDDHAL_DDCOLORCONTROLCALLBACKS;
typedef enum _NDIS_802_11_AUTHENTICATION_MODE NDIS_802_11_AUTHENTICATION_MODE;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *NPCREATIVEFASTSPEECH8WAVEFORMAT;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *PCREATIVEFASTSPEECH10WAVEFORMAT;
typedef enum _POLICY_DOMAIN_INFORMATION_CLASS POLICY_DOMAIN_INFORMATION_CLASS;
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_DEVICE_INTERFACE_DETAIL_DATA;
typedef SP_INTERFACE_DEVICE_DETAIL_DATA_A SP_INTERFACE_DEVICE_DETAIL_DATA;
typedef enum tag_WBEM_PROVIDER_REQUIREMENTS_TYPE WBEM_PROVIDER_REQUIREMENTS_TYPE;
struct _ACTIVATION_CONTEXT_QUERY_INDEX {DWORD ulAssemblyIndex;DWORD ulFileIndexInAssembly;};
struct _D3DHAL_DP2INDEXEDTRIANGLELIST2 {WORD wV1;WORD wV2;WORD wV3;};
struct _D3DHAL_DP2INDEXEDTRIANGLESTRIP {WORD wV[3];};
struct _D3DHAL_DP2SETVERTEXSHADERCONST {DWORD dwRegister;DWORD dwCount;};
struct _D3DNTHAL_DP2CREATEVERTEXSHADER {DWORD dwHandle;DWORD dwDeclSize;DWORD dwCodeSize;};
struct _D3DNTHAL_DP2INDEXEDTRIANGLEFAN {WORD wV[3];};
struct _OFFLOAD_IPSEC_DELETE_UDPESP_SA {HANDLE OffloadHandle;HANDLE EncapTypeEntryOffldHandle;};
struct _PAR_DEVICE_ID_SIZE_INFORMATION {ULONG DeviceIdSize;};
typedef enum _6B870DC24D0C8AC4BA7D2C047999A6A3 KSPROPERTY_BDA_ETHERNET_FILTER;
typedef enum _A5B4E8FAC21A27E9D836EC72E0E2550F KSPROPERTY_DIRECTSOUND3DBUFFER;
typedef enum _984DD30B3DA0FC7F55BB22873AC26968 KSPROPERTY_VIDCAP_VIDEOCONTROL;
typedef enum _C06925BC9DA0F969A0E4486B73371866 KSPROPERTY_VIDCAP_VIDEODECODER;
typedef enum _49B4DF22A98C0153E90C1246F17F787B KSPROPERTY_VIDCAP_VIDEOENCODER;
typedef enum _2388D0CB73CB11DFDEA2035054DDD33D KSPROPERTY_VIDCAP_VIDEOPROCAMP;
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP LOGICAL_PROCESSOR_RELATIONSHIP;
typedef D3DHAL_CONTEXTDESTROYALLDATA *LPD3DHAL_CONTEXTDESTROYALLDATA;
typedef D3DHAL_DP2CREATEVERTEXSHADER *LPD3DHAL_DP2CREATEVERTEXSHADER;
typedef D3DNTHAL_DRAWPRIMITIVES2DATA *LPD3DNTHAL_DRAWPRIMITIVES2DATA;
typedef D3DNTHAL_SETRENDERTARGETDATA *LPD3DNTHAL_SETRENDERTARGETDATA;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *PCREATIVEFASTSPEECH8WAVEFORMAT;
typedef PCREDENTIAL_TARGET_INFORMATIONA PCREDENTIAL_TARGET_INFORMATION;
struct _D3DHAL_DP2INDEXEDTRIANGLELIST {WORD wV1;WORD wV2;WORD wV3;WORD wFlags;};
struct _D3DHAL_DP2SETPIXELSHADERCONST {DWORD dwRegister;DWORD dwCount;};
struct _D3DNTHAL_DP2CREATEPIXELSHADER {DWORD dwHandle;DWORD dwCodeSize;};
struct _D3DNTHAL_DP2SETSTREAMSOURCEUM {DWORD dwStream;DWORD dwStride;};
struct _PRINTER_EVENT_ATTRIBUTES_INFO {DWORD cbSize;DWORD dwOldAttributes;DWORD dwNewAttributes;};
struct _TRANSLATE_VIRTUAL_TO_PHYSICAL {ULONG64 Virtual;ULONG64 Physical;};
typedef enum _ACTIVATION_CONTEXT_INFO_CLASS ACTIVATION_CONTEXT_INFO_CLASS;
typedef CREDENTIAL_TARGET_INFORMATIONA CREDENTIAL_TARGET_INFORMATION;
typedef enum _D3DSHADER_PARAM_REGISTER_TYPE D3DSHADER_PARAM_REGISTER_TYPE;
typedef enum _A98B79572840FDA381AA9CDCE69D1BC8 DISK_CACHE_RETENTION_PRIORITY;
typedef enum _3EB7CD5A2478AE20126886459846210D KSPROPERTY_BDA_AUTODEMODULATE;
typedef enum _702932362B8608D728382EB01F6EA68B KSPROPERTY_BDA_NULL_TRANSFORM;
typedef enum _714E217E1FF07AEF9AC8D62CE7BB20D6 KSPROPERTY_BDA_VOID_TRANSFORM;
typedef enum _3F0E1F32807E838958D0814D130CFE59 KS_AM_PROPERTY_TS_RATE_CHANGE;
typedef D3DHAL_DP2CREATEPIXELSHADER *LPD3DHAL_DP2CREATEPIXELSHADER;
typedef D3DHAL_DP2MULTIPLYTRANSFORM *LPD3DHAL_DP2MULTIPLYTRANSFORM;
typedef D3DHAL_DP2SETSTREAMSOURCEUM *LPD3DHAL_DP2SETSTREAMSOURCEUM;
typedef D3DHAL_DP2TEXTURESTAGESTATE *LPD3DHAL_DP2TEXTURESTAGESTATE;
typedef D3DHAL_DRAWONEPRIMITIVEDATA *LPD3DHAL_DRAWONEPRIMITIVEDATA;
typedef D3DNTHAL_CLIPPEDTRIANGLEFAN *LPD3DNTHAL_CLIPPEDTRIANGLEFAN;
typedef D3DNTHAL_CONTEXTDESTROYDATA *LPD3DNTHAL_CONTEXTDESTROYDATA;
typedef D3DNTHAL_D3DDX6EXTENDEDCAPS *LPD3DNTHAL_D3DDX6EXTENDEDCAPS;
typedef D3DNTHAL_DP2SETRENDERTARGET *LPD3DNTHAL_DP2SETRENDERTARGET;
typedef D3DNTHAL_DP2SETSTREAMSOURCE *LPD3DNTHAL_DP2SETSTREAMSOURCE;
typedef D3DNTHAL_TEXTUREDESTROYDATA *LPD3DNTHAL_TEXTUREDESTROYDATA;
typedef D3DNTHAL_TEXTUREGETSURFDATA *LPD3DNTHAL_TEXTUREGETSURFDATA;
typedef DDHAL_DDMOTIONCOMPCALLBACKS *LPDDHAL_DDMOTIONCOMPCALLBACKS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
typedef LPDIRECTSOUNDCAPTUREBUFFER8 *LPLPDIRECTSOUNDCAPTUREBUFFER8;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef enum _MSV1_0_PROTOCOL_MESSAGE_TYPE *PMSV1_0_PROTOCOL_MESSAGE_TYPE;
typedef enum _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;
typedef LPEXT_API_VERSION ( *PWINDBG_EXTENSION_API_VERSION)();
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;
typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
struct _CMSG_SP3_COMPATIBLE_AUX_INFO {DWORD cbSize;DWORD dwFlags;};
struct _D3DHAL_DP2CREATEVERTEXSHADER {DWORD dwHandle;DWORD dwDeclSize;DWORD dwCodeSize;};
struct _D3DHAL_DP2INDEXEDTRIANGLEFAN {WORD wV[3];};
struct _D3DNTHAL_DP2INDEXEDLINESTRIP {WORD wV[2];};
struct _DDGETPREVIOUSAUTOFLIPOUTINFO {DWORD dwSurfaceIndex;DWORD dwVBISurfaceIndex;};
struct _DDNT_DEFERRED_AGP_AWARE_DATA {DDNT_GETDRIVERINFO2DATA gdi2;};
struct _DRIVE_LAYOUT_INFORMATION_MBR {DWORD Signature;};
struct _IMAGE_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD UnwindInfoAddress;};
struct _JOBOBJECT_JOBSET_INFORMATION {DWORD MemberLevel;};
struct _NDIS_802_11_CONFIGURATION_FH {ULONG Length;ULONG HopPattern;ULONG HopSet;ULONG DwellTime;};
struct creative_fastspeechformat_tag {WAVEFORMATEX ewf;};
struct tMIXERCONTROLDETAILS_UNSIGNED {DWORD dwValue;};
typedef RPC_STATUS ( *I_RpcProxyGetClientAddressFn)(void *Context, char *Buffer, unsigned int *BufferLength);
typedef enum _8EE7F9EA7D1453B89425165DC84C8DAD KSEVENT_AUDIO_CONTROL_CHANGE;
typedef enum _2DEFE1B87100719F80278A026CBFF4D7 KSPROPERTY_ALLOCATOR_CONTROL;
typedef enum _CFCB2E1C2645813857E415DB4A5CF091 KSPROPERTY_VBICODECFILTERING;
typedef D3DHAL_DRAWPRIMITIVES2DATA *LPD3DHAL_DRAWPRIMITIVES2DATA;
typedef D3DHAL_RENDERPRIMITIVEDATA *LPD3DHAL_RENDERPRIMITIVEDATA;
typedef D3DHAL_SETRENDERTARGETDATA *LPD3DHAL_SETRENDERTARGETDATA;
typedef D3DNTHAL_CONTEXTCREATEDATA *LPD3DNTHAL_CONTEXTCREATEDATA;
typedef D3DNTHAL_DP2DRAWPRIMITIVE2 *LPD3DNTHAL_DP2DRAWPRIMITIVE2;
typedef D3DNTHAL_TEXTURECREATEDATA *LPD3DNTHAL_TEXTURECREATEDATA;
typedef DDHAL_DDVIDEOPORTCALLBACKS *LPDDHAL_DDVIDEOPORTCALLBACKS;
typedef DIALOGICOKIADPCMWAVEFORMAT *LPDIALOGICOKIADPCMWAVEFORMAT;
typedef DIRECTDRAWCLIPPERCALLBACKS *LPDIRECTDRAWCLIPPERCALLBACKS;
typedef DIRECTDRAWPALETTECALLBACKS *LPDIRECTDRAWPALETTECALLBACKS;
typedef DIRECTDRAWSURFACECALLBACKS *LPDIRECTDRAWSURFACECALLBACKS;
typedef LPDIRECTSOUNDCAPTUREBUFFER *LPLPDIRECTSOUNDCAPTUREBUFFER;
typedef enum _7AD07776184EAD704335BF70D8156030 LSA_FOREST_TRUST_RECORD_TYPE;
typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef enum _MSV1_0_PROTOCOL_MESSAGE_TYPE MSV1_0_PROTOCOL_MESSAGE_TYPE;
typedef DIALOGICOKIADPCMWAVEFORMAT *NPDIALOGICOKIADPCMWAVEFORMAT;
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE *PCHANGER_DEVICE_PROBLEM_TYPE;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef enum _NDIS_802_11_RELOAD_DEFAULTS *PNDIS_802_11_RELOAD_DEFAULTS;
typedef enum _NDIS_FDDI_LCONNECTION_STATE *PNDIS_FDDI_LCONNECTION_STATE;
typedef WORD *PSECURITY_DESCRIPTOR_CONTROL;
typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
typedef PSP_DEVINFO_LIST_DETAIL_DATA_A PSP_DEVINFO_LIST_DETAIL_DATA;
typedef enum _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;
struct _D3DDRAWPRIMITIVESTRIDEDDATA {D3DDP_PTRSTRIDE position;D3DDP_PTRSTRIDE normal;D3DDP_PTRSTRIDE diffuse;D3DDP_PTRSTRIDE specular;D3DDP_PTRSTRIDE textureCoords[8];};
struct _D3DHAL_DP2CREATEPIXELSHADER {DWORD dwHandle;DWORD dwCodeSize;};
struct _D3DHAL_DP2SETSTREAMSOURCEUM {DWORD dwStream;DWORD dwStride;};
struct _D3DNTHAL_CLIPPEDTRIANGLEFAN {DWORD FirstVertexOffset;DWORD dwEdgeFlags;DWORD PrimitiveCount;};
struct _D3DNTHAL_DP2INDEXEDLINELIST {WORD wV1;WORD wV2;};
struct _D3DNTHAL_DP2SETRENDERTARGET {DWORD hRenderTarget;DWORD hZBuffer;};
struct _D3DNTHAL_DP2SETSTREAMSOURCE {DWORD dwStream;DWORD dwVBHandle;DWORD dwStride;};
struct _D3DNTHAL_DP2TRIANGLEFAN_IMM {DWORD dwEdgeFlags;};
struct _DDGETCURRENTAUTOFLIPOUTINFO {DWORD dwSurfaceIndex;DWORD dwVBISurfaceIndex;};
struct _DDGETPREVIOUSAUTOFLIPININFO {LPDDVIDEOPORTDATA lpVideoPortData;};
struct _FILE_ALLOCATED_RANGE_BUFFER {LARGE_INTEGER FileOffset;LARGE_INTEGER Length;};
struct _IMAGE_ARCHIVE_MEMBER_HEADER {BYTE Name[16];BYTE Date[12];BYTE UserID[6];BYTE GroupID[6];BYTE Mode[8];BYTE Size[10];BYTE EndHeader[2];};
struct _VBICODECFILTERING_SCANLINES {DWORD DwordBitArray[32];};
struct audiofile_af10waveformat_tag {WAVEFORMATEX wfx;};
struct audiofile_af36waveformat_tag {WAVEFORMATEX wfx;};
struct tMIXERCONTROLDETAILS_BOOLEAN {LONG fValue;};
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE CHANGER_DEVICE_PROBLEM_TYPE;
typedef enum _D3DSHADER_PARAM_DSTMOD_TYPE D3DSHADER_PARAM_DSTMOD_TYPE;
typedef enum _D3DSHADER_PARAM_SRCMOD_TYPE D3DSHADER_PARAM_SRCMOD_TYPE;
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef enum _CD1B745820A9D90889EBAB7E9D163FB3 KSPROPERTY_BDA_SIGNAL_STATS;
typedef D3DHAL_CLIPPEDTRIANGLEFAN *LPD3DHAL_CLIPPEDTRIANGLEFAN;
typedef D3DHAL_CONTEXTDESTROYDATA *LPD3DHAL_CONTEXTDESTROYDATA;
typedef D3DHAL_D3DDX6EXTENDEDCAPS *LPD3DHAL_D3DDX6EXTENDEDCAPS;
typedef D3DHAL_DP2SETRENDERTARGET *LPD3DHAL_DP2SETRENDERTARGET;
typedef D3DHAL_DP2SETSTREAMSOURCE *LPD3DHAL_DP2SETSTREAMSOURCE;
typedef D3DHAL_DP2TRIANGLEFAN_IMM *LPD3DHAL_DP2TRIANGLEFAN_IMM;
typedef D3DHAL_DRAWPRIMITIVESDATA *LPD3DHAL_DRAWPRIMITIVESDATA;
typedef D3DHAL_TEXTUREDESTROYDATA *LPD3DHAL_TEXTUREDESTROYDATA;
typedef D3DHAL_TEXTUREGETSURFDATA *LPD3DHAL_TEXTUREGETSURFDATA;
typedef D3DNTHAL_DP2DRAWPRIMITIVE *LPD3DNTHAL_DP2DRAWPRIMITIVE;
typedef D3DNTHAL_DP2DRAWRECTPATCH *LPD3DNTHAL_DP2DRAWRECTPATCH;
typedef D3DNTHAL_DP2UPDATEPALETTE *LPD3DNTHAL_DP2UPDATEPALETTE;
typedef D3DNTHAL_GLOBALDRIVERDATA *LPD3DNTHAL_GLOBALDRIVERDATA;
typedef D3DNTHAL_SCENECAPTUREDATA *LPD3DNTHAL_SCENECAPTUREDATA;
typedef MEDIASPACEADPCMWAVEFORMAT *LPMEDIASPACEADPCMWAVEFORMAT;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
typedef enum _NDIS_802_11_RELOAD_DEFAULTS NDIS_802_11_RELOAD_DEFAULTS;
typedef enum _NDIS_FDDI_LCONNECTION_STATE NDIS_FDDI_LCONNECTION_STATE;
typedef MEDIASPACEADPCMWAVEFORMAT *NPMEDIASPACEADPCMWAVEFORMAT;
typedef  ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;
typedef  CERT_STORE_PROV_FIND_INFO *PCCERT_STORE_PROV_FIND_INFO;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
typedef DIALOGICOKIADPCMWAVEFORMAT *PDIALOGICOKIADPCMWAVEFORMAT;
typedef enum _KERB_PROTOCOL_MESSAGE_TYPE *PKERB_PROTOCOL_MESSAGE_TYPE;
typedef enum _MSV1_0_PROFILE_BUFFER_TYPE *PMSV1_0_PROFILE_BUFFER_TYPE;
typedef enum _NDIS_802_11_PRIVACY_FILTER *PNDIS_802_11_PRIVACY_FILTER;
typedef ULONG *PPOLICY_AUDIT_EVENT_OPTIONS;
typedef PSP_POWERMESSAGEWAKE_PARAMS_A PSP_POWERMESSAGEWAKE_PARAMS;
typedef PSP_REGISTER_CONTROL_STATUSA PSP_REGISTER_CONTROL_STATUS;
typedef LONG ( *PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *ExceptionInfo);
typedef LONG ( *PVECTORED_EXCEPTION_HANDLER)(struct _EXCEPTION_POINTERS *ExceptionInfo);
typedef WORD SECURITY_DESCRIPTOR_CONTROL;
typedef SP_DEVINFO_LIST_DETAIL_DATA_A SP_DEVINFO_LIST_DETAIL_DATA;
struct _CLASS_MEDIA_CHANGE_CONTEXT {DWORD MediaChangeCount;DWORD NewState;};
struct _D3DHAL_DP2INDEXEDLINESTRIP {WORD wV[2];};
struct _DDGETCURRENTAUTOFLIPININFO {LPDDVIDEOPORTDATA lpVideoPortData;};
struct _DD_DEFERRED_AGP_AWARE_DATA {DD_GETDRIVERINFO2DATA gdi2;};
struct _FILE_ZERO_DATA_INFORMATION {LARGE_INTEGER FileOffset;LARGE_INTEGER BeyondFinalZero;};
struct _FSCTL_QUERY_FAT_BPB_BUFFER {BYTE First0x24BytesOfBootSector[36];};
struct _KERB_RETRIEVE_TKT_RESPONSE {KERB_EXTERNAL_TICKET Ticket;};
struct _MEMORY_BASIC_INFORMATION32 {DWORD BaseAddress;DWORD AllocationBase;DWORD AllocationProtect;DWORD RegionSize;DWORD State;DWORD Protect;DWORD Type;};
struct _NEGOTIATE_PACKAGE_PREFIXES {ULONG MessageType;ULONG PrefixCount;ULONG Offset;ULONG Pad;};
struct _POLICY_REPLICA_SOURCE_INFO {LSA_UNICODE_STRING ReplicaSource;LSA_UNICODE_STRING ReplicaAccountName;};
struct _TOKEN_AUDIT_POLICY_ELEMENT {DWORD Category;DWORD PolicyMask;};
struct tMIXERCONTROLDETAILS_SIGNED {LONG lValue;};
struct tagKS_DATARANGE_BDA_ANTENNA {KSDATARANGE DataRange;};
struct tagRID_DEVICE_INFO_KEYBOARD {DWORD dwType;DWORD dwSubType;DWORD dwKeyboardMode;DWORD dwNumberOfFunctionKeys;DWORD dwNumberOfIndicators;DWORD dwNumberOfKeysTotal;};
struct tagRPC_CALL_ATTRIBUTES_V1_A {unsigned int Version;unsigned int Flags;unsigned int ServerPrincipalNameBufferLength;unsigned char *ServerPrincipalName;unsigned int ClientPrincipalNameBufferLength;unsigned char *ClientPrincipalName;unsigned int AuthenticationLevel;unsigned int AuthenticationService;BOOL NullSession;};
struct tagRPC_CALL_ATTRIBUTES_V1_W {unsigned int Version;unsigned int Flags;unsigned int ServerPrincipalNameBufferLength;unsigned short *ServerPrincipalName;unsigned int ClientPrincipalNameBufferLength;unsigned short *ClientPrincipalName;unsigned int AuthenticationLevel;unsigned int AuthenticationService;BOOL NullSession;};
struct tagSOLE_AUTHENTICATION_INFO {DWORD dwAuthnSvc;DWORD dwAuthzSvc;void *pAuthInfo;};
typedef  CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO;
typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef RPC_STATUS ( *I_RpcProxyIsValidMachineFn)(char *pszMachine, char *pszDotMachine, unsigned int dwPortNumber);
typedef enum _KERB_PROTOCOL_MESSAGE_TYPE KERB_PROTOCOL_MESSAGE_TYPE;
typedef enum _DD5FC77EC1374A734666B81823C28AFB KSDS3D_HRTF_FILTER_QUALITY;
typedef enum _FDE649CC57CE41CE85FECAF000FEEDF5 KSDS3D_HRTF_FILTER_VERSION;
typedef enum _D5CA3A18CB786C06D1FE5E26C4BBD8C9 KSPROPERTY_BDA_IPv4_FILTER;
typedef enum _6F6C2F72068A7A854C30F881415EDCB8 KSPROPERTY_BDA_IPv6_FILTER;
typedef enum _15EAB5DB270905D3ADC7E2FB667B7EB6 KSPROPERTY_BDA_PIN_CONTROL;
typedef enum _E429D5BCA10BC7F1E46CF67F9B793820 KSPROPERTY_STREAMINTERFACE;
typedef enum _09A34D7915C9A95B91A5C3C199852FD2 KSPROPERTY_VIDCAP_CROSSBAR;
typedef AUDIOFILE_AF10WAVEFORMAT *LPAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *LPAUDIOFILE_AF36WAVEFORMAT;
typedef D3DHAL_CONTEXTCREATEDATA *LPD3DHAL_CONTEXTCREATEDATA;
typedef D3DHAL_DP2DRAWPRIMITIVE2 *LPD3DHAL_DP2DRAWPRIMITIVE2;
typedef D3DHAL_TEXTURECREATEDATA *LPD3DHAL_TEXTURECREATEDATA;
typedef D3DNTHAL_D3DEXTENDEDCAPS *LPD3DNTHAL_D3DEXTENDEDCAPS;
typedef D3DNTHAL_DP2ADDDIRTYRECT *LPD3DNTHAL_DP2ADDDIRTYRECT;
typedef D3DNTHAL_DP2DRAWTRIPATCH *LPD3DNTHAL_DP2DRAWTRIPATCH;
typedef D3DNTHAL_DP2SETCLIPPLANE *LPD3DNTHAL_DP2SETCLIPPLANE;
typedef D3DNTHAL_DP2SETTRANSFORM *LPD3DNTHAL_DP2SETTRANSFORM;
typedef D3DNTHAL_DP2VERTEXSHADER *LPD3DNTHAL_DP2VERTEXSHADER;
typedef D3DNTHAL_DP2VIEWPORTINFO *LPD3DNTHAL_DP2VIEWPORTINFO;
typedef D3DNTHAL_TEXTURESWAPDATA *LPD3DNTHAL_TEXTURESWAPDATA;
typedef DDHAL_DDPALETTECALLBACKS *LPDDHAL_DDPALETTECALLBACKS;
typedef DDHAL_DDSURFACECALLBACKS *LPDDHAL_DDSURFACECALLBACKS;
typedef IDirectMusicPortDownload8 *LPDIRECTMUSICPORTDOWNLOAD8;
typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
typedef enum _MSV1_0_PROFILE_BUFFER_TYPE MSV1_0_PROFILE_BUFFER_TYPE;
typedef enum _NDIS_802_11_PRIVACY_FILTER NDIS_802_11_PRIVACY_FILTER;
typedef ULONG NDIS_802_11_TX_POWER_LEVEL;
typedef AUDIOFILE_AF10WAVEFORMAT *NPAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *NPAUDIOFILE_AF36WAVEFORMAT;
typedef enum _AB84C8955069406F80CB719201B159DD *PKS_COPY_MACROVISION_LEVEL;
typedef MEDIASPACEADPCMWAVEFORMAT *PMEDIASPACEADPCMWAVEFORMAT;
typedef enum _NDIS_FDDI_ATTACHMENT_TYPE *PNDIS_FDDI_ATTACHMENT_TYPE;
typedef ULONG POLICY_AUDIT_EVENT_OPTIONS;
typedef PSP_BACKUP_QUEUE_PARAMS_V1_A PSP_BACKUP_QUEUE_PARAMS_V1;
typedef PSP_BACKUP_QUEUE_PARAMS_V2_A PSP_BACKUP_QUEUE_PARAMS_V2;
typedef enum _TRUSTED_INFORMATION_CLASS *PTRUSTED_INFORMATION_CLASS;
typedef RPC_STATUS ( *RPC_NEW_HTTP_PROXY_CHANNEL)(unsigned short *ServerName, unsigned short *ServerPort, unsigned char *RemoteUser, unsigned short **NewServerName);
typedef SP_POWERMESSAGEWAKE_PARAMS_A SP_POWERMESSAGEWAKE_PARAMS;
typedef SP_REGISTER_CONTROL_STATUSA SP_REGISTER_CONTROL_STATUS;
typedef enum tag_WBEM_INFORMATION_FLAG_TYPE WBEM_INFORMATION_FLAG_TYPE;
struct _CERT_PRIVATE_KEY_VALIDITY {FILETIME NotBefore;FILETIME NotAfter;};
struct _CERT_STORE_PROV_FIND_INFO {DWORD cbSize;DWORD dwMsgAndCertEncodingType;DWORD dwFindFlags;DWORD dwFindType; void *pvFindPara;};
struct _D3DHAL_CLIPPEDTRIANGLEFAN {DWORD FirstVertexOffset;DWORD dwEdgeFlags;DWORD PrimitiveCount;};
struct _D3DHAL_DP2INDEXEDLINELIST {WORD wV1;WORD wV2;};
struct _D3DHAL_DP2SETRENDERTARGET {DWORD hRenderTarget;DWORD hZBuffer;};
struct _D3DHAL_DP2SETSTREAMSOURCE {DWORD dwStream;DWORD dwVBHandle;DWORD dwStride;};
struct _D3DHAL_DP2TRIANGLEFAN_IMM {DWORD dwEdgeFlags;};
struct _D3DNTHAL_DP2DRAWRECTPATCH {DWORD Handle;DWORD Flags;};
struct _D3DNTHAL_DP2TRIANGLESTRIP {WORD wVStart;};
struct _EVENTLOG_FULL_INFORMATION {DWORD dwFull;};
struct _IMAGE_COFF_SYMBOLS_HEADER {DWORD NumberOfSymbols;DWORD LvaToFirstSymbol;DWORD NumberOfLinenumbers;DWORD LvaToFirstLinenumber;DWORD RvaToFirstByteOfCode;DWORD RvaToLastByteOfCode;DWORD RvaToFirstByteOfData;DWORD RvaToLastByteOfData;};
struct _IMAGE_RESOURCE_DATA_ENTRY {DWORD OffsetToData;DWORD Size;DWORD CodePage;DWORD Reserved;};
struct _KS_DVDCOPY_SET_COPY_STATE {ULONG DVDCopyState;};
struct _PARCLASS_NEGOTIATION_MASK {USHORT usReadMask;USHORT usWriteMask;};
struct _POLICY_DEFAULT_QUOTA_INFO {QUOTA_LIMITS QuotaLimits;};
struct _SET_PARTITION_INFORMATION {BYTE PartitionType;};
struct _STORAGE_BUS_RESET_REQUEST {BYTE PathId;};
struct _TAPE_SET_MEDIA_PARAMETERS {DWORD BlockSize;};
struct _TRUSTED_POSIX_OFFSET_INFO {ULONG Offset;};
struct _WINDOW_BUFFER_SIZE_RECORD {COORD dwSize;};
struct tagWTSSESSION_NOTIFICATION {DWORD cbSize;DWORD dwSessionId;};
struct yamaha_adpmcwaveformat_tag {WAVEFORMATEX wfx;};
typedef enum _936EE475885E5E1972395CF18A9E441C KSDS3D_HRTF_FILTER_METHOD;
typedef enum _A6BC26748E56DACD668315459CCF5D3F KSPROPERTY_DRMAUDIOSTREAM;
typedef enum _59F47961FEC953F20A64EC788B1D06EA KSPROPERTY_VIDCAP_TVAUDIO;
typedef enum _AB84C8955069406F80CB719201B159DD KS_COPY_MACROVISION_LEVEL;
typedef CREATIVEADPCMWAVEFORMAT *LPCREATIVEADPCMWAVEFORMAT;
typedef D3DHAL_DP2DRAWPRIMITIVE *LPD3DHAL_DP2DRAWPRIMITIVE;
typedef D3DHAL_DP2DRAWRECTPATCH *LPD3DHAL_DP2DRAWRECTPATCH;
typedef D3DHAL_DP2UPDATEPALETTE *LPD3DHAL_DP2UPDATEPALETTE;
typedef D3DHAL_GLOBALDRIVERDATA *LPD3DHAL_GLOBALDRIVERDATA;
typedef D3DHAL_SCENECAPTUREDATA *LPD3DHAL_SCENECAPTUREDATA;
typedef D3DNTHAL_DP2ADDDIRTYBOX *LPD3DNTHAL_DP2ADDDIRTYBOX;
typedef D3DNTHAL_DP2CREATELIGHT *LPD3DNTHAL_DP2CREATELIGHT;
typedef D3DNTHAL_DP2PIXELSHADER *LPD3DNTHAL_DP2PIXELSHADER;
typedef D3DNTHAL_DP2RENDERSTATE *LPD3DNTHAL_DP2RENDERSTATE;
typedef D3DMATERIAL7 *LPD3DNTHAL_DP2SETMATERIAL;
typedef D3DNTHAL_DP2SETPRIORITY *LPD3DNTHAL_DP2SETPRIORITY;
typedef DDHAL_DDEXEBUFCALLBACKS *LPDDHAL_DDEXEBUFCALLBACKS;
typedef LPDIRECTSOUND3DLISTENER *LPLPDIRECTSOUND3DLISTENER;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef ULONG NDIS_802_11_RTS_THRESHOLD;
typedef enum _NDIS_FDDI_ATTACHMENT_TYPE NDIS_FDDI_ATTACHMENT_TYPE;
typedef CREATIVEADPCMWAVEFORMAT *NPCREATIVEADPCMWAVEFORMAT;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
typedef AUDIOFILE_AF10WAVEFORMAT *PAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *PAUDIOFILE_AF36WAVEFORMAT;
typedef DD_COLORCONTROLCALLBACKS *PDD_COLORCONTROLCALLBACKS;
typedef void ( *PFN_DrvDeleteDeviceBitmap)(DHSURF);
typedef enum _KERB_PROFILE_BUFFER_TYPE *PKERB_PROFILE_BUFFER_TYPE;
typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
typedef enum _MSV1_0_LOGON_SUBMIT_TYPE *PMSV1_0_LOGON_SUBMIT_TYPE;
typedef enum _NDIS_802_11_NETWORK_TYPE *PNDIS_802_11_NETWORK_TYPE;
typedef enum _NDIS_BPC_INDICATE_REASON *PNDIS_BPC_INDICATE_REASON;
typedef enum _NDIS_FDDI_RING_MGT_STATE *PNDIS_FDDI_RING_MGT_STATE;
typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
typedef enum _POLICY_INFORMATION_CLASS *PPOLICY_INFORMATION_CLASS;
typedef PSP_BACKUP_QUEUE_PARAMS_V2_A PSP_BACKUP_QUEUE_PARAMS_A;
typedef PSP_BACKUP_QUEUE_PARAMS_V2_W PSP_BACKUP_QUEUE_PARAMS_W;
typedef PSP_DEVICE_INTERFACE_DATA PSP_INTERFACE_DEVICE_DATA;
typedef PSP_TROUBLESHOOTER_PARAMS_A PSP_TROUBLESHOOTER_PARAMS;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef void ( *RPC_AUTH_KEY_RETRIEVAL_FN)(void *Arg, unsigned short *ServerPrincName, unsigned int KeyVer, void **Key, RPC_STATUS *Status);
typedef SP_BACKUP_QUEUE_PARAMS_V1_A SP_BACKUP_QUEUE_PARAMS_V1;
typedef SP_BACKUP_QUEUE_PARAMS_V2_A SP_BACKUP_QUEUE_PARAMS_V2;
typedef enum _TRUSTED_INFORMATION_CLASS TRUSTED_INFORMATION_CLASS;
typedef enum _ACDD7173F686B0B8EEB5D0397954DC28 VIDEOENCODER_BITRATE_MODE;
typedef enum tag_WBEM_BACKUP_RESTORE_FLAGS WBEM_BACKUP_RESTORE_FLAGS;
typedef enum tag_WBEM_LIMITATION_FLAG_TYPE WBEM_LIMITATION_FLAG_TYPE;
struct _ACL_REVISION_INFORMATION {DWORD AclRevision;};
struct _D3DNTHAL_DP2DRAWTRIPATCH {DWORD Handle;DWORD Flags;};
struct _D3DNTHAL_DP2TRIANGLELIST {WORD wVStart;};
struct _D3DNTHAL_DP2VERTEXSHADER {DWORD dwHandle;};
struct _D3DNTHAL_DP2VIEWPORTINFO {DWORD dwX;DWORD dwY;DWORD dwWidth;DWORD dwHeight;};
struct _POLICY_MODIFICATION_INFO {LARGE_INTEGER ModifiedId;LARGE_INTEGER DatabaseCreationTime;};
struct _SID_IDENTIFIER_AUTHORITY {BYTE Value[6];};
struct _TRUSTED_DOMAIN_NAME_INFO {LSA_UNICODE_STRING Name;};
struct _WINDOWS_IRDA_DEVICE_INFO {u_char irdaDeviceID[4];char irdaDeviceName[22];u_char irdaDeviceHints1;u_char irdaDeviceHints2;u_char irdaCharSet;};
struct tagKS_TVTUNER_CHANGE_INFO {DWORD dwFlags;DWORD dwCountryCode;DWORD dwAnalogVideoStandard;DWORD dwChannel;};
typedef enum _D3DTEXTURESTAGESTATETYPE D3DTEXTURESTAGESTATETYPE;
typedef enum _D3DTEXTURETRANSFORMFLAGS D3DTEXTURETRANSFORMFLAGS;
typedef enum _KERB_PROFILE_BUFFER_TYPE KERB_PROFILE_BUFFER_TYPE;
typedef enum _85B8D048AA221EC9AB61032617833AB7 KSDS3D_HRTF_COEFF_FORMAT;
typedef enum _8DE99528E372621AB370A19368014C30 KSMETHOD_BDA_CHANGE_SYNC;
typedef enum _6DAD80B3977302E5EA3CDCFB6538A59F KSMETHOD_STREAMALLOCATOR;
typedef enum _0B804802F465170881F43A3A4D8457F6 KSPROPERTY_BDA_PIDFILTER;
typedef enum _DF42200E5C7644BA9EFD9248E6DB20BA KSPROPERTY_BDA_PIN_EVENT;
typedef enum _F83EBA9D0BD861E54A6698205AB72334 KSPROPERTY_BIBLIOGRAPHIC;
typedef enum _1737843133A6E4DC3631406BF92A2320 KSPROPERTY_IDS_BDA_TABLE;
typedef enum _F5E9AD53D969E47E21B14A1F6622DC98 KSPROPERTY_OVERLAYUPDATE;
typedef enum _8E304CD910907B07F66BA6A3540081CA KS_PhysicalConnectorType;
typedef CONTRESVQLPCWAVEFORMAT *LPCONTRESVQLPCWAVEFORMAT;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef D3DHAL_D3DEXTENDEDCAPS *LPD3DHAL_D3DEXTENDEDCAPS;
typedef D3DHAL_DP2ADDDIRTYRECT *LPD3DHAL_DP2ADDDIRTYRECT;
typedef D3DHAL_DP2DRAWTRIPATCH *LPD3DHAL_DP2DRAWTRIPATCH;
typedef D3DHAL_DP2SETCLIPPLANE *LPD3DHAL_DP2SETCLIPPLANE;
typedef D3DHAL_DP2SETTRANSFORM *LPD3DHAL_DP2SETTRANSFORM;
typedef D3DHAL_DP2VERTEXSHADER *LPD3DHAL_DP2VERTEXSHADER;
typedef D3DHAL_DP2VIEWPORTINFO *LPD3DHAL_DP2VIEWPORTINFO;
typedef D3DHAL_RENDERSTATEDATA *LPD3DHAL_RENDERSTATEDATA;
typedef D3DHAL_TEXTURESWAPDATA *LPD3DHAL_TEXTURESWAPDATA;
typedef ULONG_PTR *LPD3DINTHAL_BUFFERHANDLE;
typedef D3DNTHAL_DP2SETINDICES *LPD3DNTHAL_DP2SETINDICES;
typedef D3DNTHAL_DP2SETPALETTE *LPD3DNTHAL_DP2SETPALETTE;
typedef IDirectMusicCollection8 *LPDIRECTMUSICCOLLECTION8;
typedef IDirectMusicInstrument8 *LPDIRECTMUSICINSTRUMENT8;
typedef FMTOWNS_SND_WAVEFORMAT *LPFMTOWNS_SND_WAVEFORMAT;
typedef NMS_VBXADPCMWAVEFORMAT *LPNMS_VBXADPCMWAVEFORMAT;
typedef LPSERVICE_TYPE_VALUE_ABSA LPSERVICE_TYPE_VALUE_ABS;
typedef YAMAHA_ADPCMWAVEFORMAT *LPYAMAHA_ADPCMWAVEFORMAT;
typedef enum _MSV1_0_LOGON_SUBMIT_TYPE MSV1_0_LOGON_SUBMIT_TYPE;
typedef enum _NDIS_802_11_NETWORK_TYPE NDIS_802_11_NETWORK_TYPE;
typedef enum _NDIS_BPC_INDICATE_REASON NDIS_BPC_INDICATE_REASON;
typedef enum _NDIS_FDDI_RING_MGT_STATE NDIS_FDDI_RING_MGT_STATE;
typedef CONTRESVQLPCWAVEFORMAT *NPCONTRESVQLPCWAVEFORMAT;
typedef FMTOWNS_SND_WAVEFORMAT *NPFMTOWNS_SND_WAVEFORMAT;
typedef NMS_VBXADPCMWAVEFORMAT *NPNMS_VBXADPCMWAVEFORMAT;
typedef YAMAHA_ADPCMWAVEFORMAT *NPYAMAHA_ADPCMWAVEFORMAT;
typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
typedef ALLOCATOR_PROPERTIES_EX *PALLOCATOR_PROPERTIES_EX;
typedef CREATIVEADPCMWAVEFORMAT *PCREATIVEADPCMWAVEFORMAT;
typedef BOOL ( *PFN_ALLOCANDFILLDEFUSAGE)( char *pszUsageOID, struct _CRYPT_PROVIDER_DEFUSAGE *psDefUsage);
typedef void ( *PFN_DrvDisableDirectDraw)(DHPDEV);
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;
typedef enum _NDIS_DEVICE_POWER_STATE *PNDIS_DEVICE_POWER_STATE;
typedef enum _NDIS_WAN_MEDIUM_SUBTYPE *PNDIS_WAN_MEDIUM_SUBTYPE;
typedef enum _POLICY_INFORMATION_CLASS POLICY_INFORMATION_CLASS;
typedef enum _POLICY_AUDIT_EVENT_TYPE *PPOLICY_AUDIT_EVENT_TYPE;
typedef PSP_NEWDEVICEWIZARD_DATA PSP_ADDPROPERTYPAGE_DATA;
typedef enum _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SP_BACKUP_QUEUE_PARAMS_V2_A SP_BACKUP_QUEUE_PARAMS_A;
typedef SP_BACKUP_QUEUE_PARAMS_V2_W SP_BACKUP_QUEUE_PARAMS_W;
typedef SP_DEVICE_INTERFACE_DATA SP_INTERFACE_DEVICE_DATA;
typedef SP_TROUBLESHOOTER_PARAMS_A SP_TROUBLESHOOTER_PARAMS;
typedef enum tag_WBEM_CONDITION_FLAG_TYPE WBEM_CONDITION_FLAG_TYPE;
struct _BDA_TEMPLATE_CONNECTION {ULONG FromNodeType;ULONG FromNodePinType;ULONG ToNodeType;ULONG ToNodePinType;};
struct _D3DHAL_DP2DRAWRECTPATCH {DWORD Handle;DWORD Flags;};
struct _D3DHAL_DP2TRIANGLESTRIP {WORD wVStart;};
struct _D3DNTHAL_DP2CREATELIGHT {DWORD dwIndex;};
struct _D3DNTHAL_DP2PIXELSHADER {DWORD dwHandle;};
struct _D3DNTHAL_DP2SETPRIORITY {DWORD dwDDDestSurface;DWORD dwPriority;};
struct _D3DNTHAL_DP2STARTVERTEX {WORD wVStart;};
struct _D3DNTHAL_DP2TRIANGLEFAN {WORD wVStart;};
struct _DDNT_GETDRIVERINFO2DATA {DWORD dwReserved;DWORD dwMagic;DWORD dwType;DWORD dwExpectedSize;};
struct _EXIT_PROCESS_DEBUG_INFO {DWORD dwExitCode;};
struct _OFFLOAD_IPSEC_DELETE_SA {HANDLE OffloadHandle;};
struct _QCMINFO_IDMAP_PLACEMENT {UINT id;UINT fFlags;};
struct _TRANSPORT_HEADER_OFFSET {USHORT ProtocolType;USHORT HeaderOffset;};
struct csimaadpcmwaveformat_tag {WAVEFORMATEX wfx;};
struct tagRID_DEVICE_INFO_MOUSE {DWORD dwId;DWORD dwNumberOfButtons;DWORD dwSampleRate;};
struct tagRPC_ERROR_ENUM_HANDLE {ULONG Signature;void *CurrentPos;void *Head;};
typedef enum _tagAUTOCOMPLETELISTOPTIONS AUTOCOMPLETELISTOPTIONS;
typedef D3DMATERIAL7 D3DNTHAL_DP2SETMATERIAL;
typedef enum tagExtendedErrorParamTypes ExtendedErrorParamTypes;
typedef enum _HIDP_KEYBOARD_DIRECTION HIDP_KEYBOARD_DIRECTION;
typedef enum _6B2401DF69FC0CC161171E2CBCDDC1C6 KSEVENT_LOOPEDSTREAMING;
typedef enum _861DD39FC4CEDEF9FD3B0ECFEB4EA61F KSEVENT_STREAMALLOCATOR;
typedef enum _FA11D0DE19A9089B50BC241520DAD748 KSPROPERTY_BDA_CA_EVENT;
typedef enum _6F5958920F6A8F401B50E2A1B2D54572 KSPROPERTY_BDA_LNB_INFO;
typedef enum _FC23A50C1CCE287E75E010175501A7BF KSPROPERTY_BDA_TOPOLOGY;
typedef enum _0A77555B03865B677ABEDAD45C36FB86 KSPROPERTY_MEDIASEEKING;
typedef enum _84B3C5477E189348A14D3C2A7517CC31 KSPROPERTY_SYSAUDIO_PIN;
typedef enum _B3A84405D78147E904BCCE08E14749CA KSPROPERTY_TOPOLOGYNODE;
typedef enum _32421077C2010E274338AC2C523E1512 KS_SEEKING_CAPABILITIES;
typedef CONTRESCR10WAVEFORMAT *LPCONTRESCR10WAVEFORMAT;
typedef D3DHAL_DP2ADDDIRTYBOX *LPD3DHAL_DP2ADDDIRTYBOX;
typedef D3DHAL_DP2CREATELIGHT *LPD3DHAL_DP2CREATELIGHT;
typedef D3DHAL_DP2PIXELSHADER *LPD3DHAL_DP2PIXELSHADER;
typedef D3DHAL_DP2RENDERSTATE *LPD3DHAL_DP2RENDERSTATE;
typedef D3DMATERIAL7 *LPD3DHAL_DP2SETMATERIAL;
typedef D3DHAL_DP2SETPRIORITY *LPD3DHAL_DP2SETPRIORITY;
typedef D3DNTHAL_DP2BUFFERBLT *LPD3DNTHAL_DP2BUFFERBLT;
typedef D3DNTHAL_DP2SETTEXLOD *LPD3DNTHAL_DP2SETTEXLOD;
typedef D3DNTHAL_DP2VOLUMEBLT *LPD3DNTHAL_DP2VOLUMEBLT;
typedef LPDIRECTSOUND3DBUFFER *LPLPDIRECTSOUND3DBUFFER;
typedef LPDIRECTSOUNDCAPTURE8 *LPLPDIRECTSOUNDCAPTURE8;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA_LATEST;
typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW_LATEST;
typedef LPSERVICE_TYPE_INFO_ABSA LPSERVICE_TYPE_INFO_ABS;
typedef SIERRAADPCMWAVEFORMAT *LPSIERRAADPCMWAVEFORMAT;
typedef int ( *LPWSPCANCELBLOCKINGCALL)(LPINT lpErrno);
typedef UCHAR NDIS_802_11_MAC_ADDRESS[6];
typedef enum _NDIS_DEVICE_POWER_STATE NDIS_DEVICE_POWER_STATE;
typedef enum _NDIS_WAN_MEDIUM_SUBTYPE NDIS_WAN_MEDIUM_SUBTYPE;
typedef CONTRESCR10WAVEFORMAT *NPCONTRESCR10WAVEFORMAT;
typedef SIERRAADPCMWAVEFORMAT *NPSIERRAADPCMWAVEFORMAT;
typedef  CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
typedef CONTRESVQLPCWAVEFORMAT *PCONTRESVQLPCWAVEFORMAT;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef FMTOWNS_SND_WAVEFORMAT *PFMTOWNS_SND_WAVEFORMAT;
typedef enum _KERB_LOGON_SUBMIT_TYPE *PKERB_LOGON_SUBMIT_TYPE;
typedef BOOL *PKSPROPERTY_COMPOSIT_ON;
typedef ULONG *PLSA_ENUMERATION_HANDLE;
typedef enum _NDIS_802_11_POWER_MODE *PNDIS_802_11_POWER_MODE;
typedef enum _NDIS_802_11_WEP_STATUS *PNDIS_802_11_WEP_STATUS;
typedef enum _NDIS_WAN_HEADER_FORMAT *PNDIS_WAN_HEADER_FORMAT;
typedef NMS_VBXADPCMWAVEFORMAT *PNMS_VBXADPCMWAVEFORMAT;
typedef enum _POLICY_AUDIT_EVENT_TYPE POLICY_AUDIT_EVENT_TYPE;
typedef enum _10A2290A9151EB22E54343EBB643574E POWER_INFORMATION_LEVEL;
typedef enum _POLICY_LSA_SERVER_ROLE *PPOLICY_LSA_SERVER_ROLE;
typedef enum __MIDL___MIDL_itf_shobjidl_0209_0003 PROPERTYUI_FORMAT_FLAGS;
typedef PSERVICE_TYPE_VALUE_ABSA PSERVICE_TYPE_VALUE_ABS;
typedef PSP_BACKUP_QUEUE_PARAMS_V2 PSP_BACKUP_QUEUE_PARAMS;
typedef PSP_DRVINFO_DETAIL_DATA_A PSP_DRVINFO_DETAIL_DATA;
typedef PSP_SELECTDEVICE_PARAMS_A PSP_SELECTDEVICE_PARAMS;
typedef ULONG ( *PWINDBG_CHECK_CONTROL_C)();
typedef YAMAHA_ADPCMWAVEFORMAT *PYAMAHA_ADPCMWAVEFORMAT;
typedef enum _ROUTER_CONNECTION_STATE ROUTER_CONNECTION_STATE;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef SP_NEWDEVICEWIZARD_DATA SP_ADDPROPERTYPAGE_DATA;
typedef enum _TAPE_DRIVE_PROBLEM_TYPE TAPE_DRIVE_PROBLEM_TYPE;
typedef enum _TOKEN_INFORMATION_CLASS TOKEN_INFORMATION_CLASS;
typedef enum tag_WBEM_EXTRA_RETURN_CODES WBEM_EXTRA_RETURN_CODES;
typedef enum tag_WBEM_UNSECAPP_FLAG_TYPE WBEM_UNSECAPP_FLAG_TYPE;
struct _BDA_TEMPLATE_PIN_JOINT {ULONG uliTemplateConnection;ULONG ulcInstancesMax;};
struct _CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwFlags;void *pvExtraPolicyPara;};
struct _CERT_SYSTEM_STORE_INFO {DWORD cbSize;};
struct _D3DHAL_DP2DRAWTRIPATCH {DWORD Handle;DWORD Flags;};
struct _D3DHAL_DP2TRIANGLELIST {WORD wVStart;};
struct _D3DHAL_DP2VERTEXSHADER {DWORD dwHandle;};
struct _D3DHAL_DP2VIEWPORTINFO {DWORD dwX;DWORD dwY;DWORD dwWidth;DWORD dwHeight;};
struct _D3DNTHAL_DP2SETINDICES {DWORD dwVBHandle;DWORD dwStride;};
struct _D3DNTHAL_DP2SETPALETTE {DWORD dwPaletteHandle;DWORD dwPaletteFlags;DWORD dwSurfaceHandle;};
struct _DISK_CONTROLLER_NUMBER {DWORD ControllerNumber;DWORD DiskNumber;};
struct _EXIT_THREAD_DEBUG_INFO {DWORD dwExitCode;};
struct _GET_LENGTH_INFORMATION {LARGE_INTEGER Length;};
struct _ImageArchitectureEntry {DWORD FixupInstRVA;DWORD NewInst;};
struct _MESSAGE_RESOURCE_BLOCK {DWORD LowId;DWORD HighId;DWORD OffsetToEntries;};
struct _MPEG2_TRANSPORT_STRIDE {DWORD dwOffset;DWORD dwPacketLength;DWORD dwStride;};
struct _NDIS_PM_PACKET_PATTERN {ULONG Priority;ULONG Reserved;ULONG MaskSize;ULONG PatternOffset;ULONG PatternSize;ULONG PatternFlags;};
struct _NDIS_WAN_PROTOCOL_CAPS {ULONG Flags;ULONG Reserved;};
struct _POLICY_PD_ACCOUNT_INFO {LSA_UNICODE_STRING Name;};
struct _SERVICE_STATUS_PROCESS {DWORD dwServiceType;DWORD dwCurrentState;DWORD dwControlsAccepted;DWORD dwWin32ExitCode;DWORD dwServiceSpecificExitCode;DWORD dwCheckPoint;DWORD dwWaitHint;DWORD dwProcessId;DWORD dwServiceFlags;};
struct _SPC_FINANCIAL_CRITERIA {BOOL fFinancialInfoAvailable;BOOL fMeetsCriteria;};
struct tagINITCOMMONCONTROLSEX {DWORD dwSize;DWORD dwICC;};
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef ULONG_PTR D3DINTHAL_BUFFERHANDLE;
typedef enum _D3DMATERIALCOLORSOURCE D3DMATERIALCOLORSOURCE;
typedef enum _D3DVS_ADDRESSMODE_TYPE D3DVS_ADDRESSMODE_TYPE;
struct DD_NTPRIVATEDRIVERCAPS {DWORD dwSize;DWORD dwPrivateCaps;};
typedef enum _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;
typedef enum _HEAP_INFORMATION_CLASS HEAP_INFORMATION_CLASS;
typedef enum _KERB_LOGON_SUBMIT_TYPE KERB_LOGON_SUBMIT_TYPE;
typedef enum _6D08AF020E88675B59174822EC55B914 KSEVENT_CLOCK_POSITION;
typedef BOOL KSPROPERTY_COMPOSIT_ON;
typedef enum _0B04060F21BCD959670CDC2C41862B4B KSPROPERTY_TUNER_MODES;
typedef enum _0C48B1A02A365DA9EEBAB619832376BC KS_AMVP_SELECTFORMATBY;
typedef enum _658345D4A0AC297778ED4BE2EFA31AA1 KS_AnalogVideoStandard;
typedef CSIMAADPCMWAVEFORMAT *LPCSIMAADPCMWAVEFORMAT;
typedef D3DHAL_DP2SETINDICES *LPD3DHAL_DP2SETINDICES;
typedef D3DHAL_DP2SETPALETTE *LPD3DHAL_DP2SETPALETTE;
typedef D3DNTHAL_DP2SETLIGHT *LPD3DNTHAL_DP2SETLIGHT;
typedef D3DNTHAL_DP2STATESET *LPD3DNTHAL_DP2STATESET;
typedef IDirectMusicDownload8 *LPDIRECTMUSICDOWNLOAD8;
typedef G721_ADPCMWAVEFORMAT *LPG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *LPG723_ADPCMWAVEFORMAT;
typedef LPDIRECTSOUNDBUFFER8 *LPLPDIRECTSOUNDBUFFER8;
typedef LPDIRECTSOUNDCAPTURE *LPLPDIRECTSOUNDCAPTURE;
typedef MPEGLAYER3WAVEFORMAT *LPMPEGLAYER3WAVEFORMAT;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
typedef TRUESPEECHWAVEFORMAT *LPTRUESPEECHWAVEFORMAT;
typedef ULONG LSA_ENUMERATION_HANDLE;
typedef enum _NDIS_802_11_POWER_MODE NDIS_802_11_POWER_MODE;
typedef enum _NDIS_802_11_WEP_STATUS NDIS_802_11_WEP_STATUS;
typedef enum _NDIS_WAN_HEADER_FORMAT NDIS_WAN_HEADER_FORMAT;
typedef CSIMAADPCMWAVEFORMAT *NPCSIMAADPCMWAVEFORMAT;
typedef G721_ADPCMWAVEFORMAT *NPG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *NPG723_ADPCMWAVEFORMAT;
typedef MPEGLAYER3WAVEFORMAT *NPMPEGLAYER3WAVEFORMAT;
typedef TRUESPEECHWAVEFORMAT *NPTRUESPEECHWAVEFORMAT;
typedef enum _OFFLOAD_INTEGRITY_ALGO OFFLOAD_INTEGRITY_ALGO;
typedef CONTRESCR10WAVEFORMAT *PCONTRESCR10WAVEFORMAT;
typedef void ( *PFLS_CALLBACK_FUNCTION)(PVOID lpFlsData);
typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;
typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef enum _NDIS_802_5_RING_STATE *PNDIS_802_5_RING_STATE;
typedef enum _POLICY_LSA_SERVER_ROLE POLICY_LSA_SERVER_ROLE;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef PSERVICE_TYPE_INFO_ABSA PSERVICE_TYPE_INFO_ABS;
typedef SIERRAADPCMWAVEFORMAT *PSIERRAADPCMWAVEFORMAT;
typedef PSP_ORIGINAL_FILE_INFO_A PSP_ORIGINAL_FILE_INFO;
typedef enum _RAS_HARDWARE_CONDITION RAS_HARDWARE_CONDITION;
typedef enum _RPC_NOTIFICATION_TYPES RPC_NOTIFICATION_TYPES;
typedef SERVICE_TYPE_VALUE_ABSA SERVICE_TYPE_VALUE_ABS;
typedef SP_BACKUP_QUEUE_PARAMS_V2 SP_BACKUP_QUEUE_PARAMS;
typedef SP_DRVINFO_DETAIL_DATA_A SP_DRVINFO_DETAIL_DATA;
typedef SP_SELECTDEVICE_PARAMS_A SP_SELECTDEVICE_PARAMS;
typedef enum tag_WBEM_GENERIC_FLAG_TYPE WBEM_GENERIC_FLAG_TYPE;
typedef enum tag_WBEM_LOCKING WBEM_LOCKING_FLAG_TYPE;
struct _D3DHAL_DP2CREATELIGHT {DWORD dwIndex;};
struct _D3DHAL_DP2PIXELSHADER {DWORD dwHandle;};
struct _D3DHAL_DP2SETPRIORITY {DWORD dwDDSurface;DWORD dwPriority;};
struct _D3DHAL_DP2STARTVERTEX {WORD wVStart;};
struct _D3DHAL_DP2TRIANGLEFAN {WORD wVStart;};
struct _D3DHAL_DRAWPRIMCOUNTS {WORD wNumStateChanges;WORD wPrimitiveType;WORD wVertexType;WORD wNumVertices;};
struct _D3DNTHAL_DP2LINESTRIP {WORD wVStart;};
struct _D3DNTHAL_DP2SETTEXLOD {DWORD dwDDSurface;DWORD dwLOD;};
struct _DD_GETDRIVERINFO2DATA {DWORD dwReserved;DWORD dwMagic;DWORD dwType;DWORD dwExpectedSize;};
struct _DD_NONLOCALVIDMEMCAPS {DWORD dwSize;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];};
struct _FIELD_INFO___BitField {USHORT Position;USHORT Size;};
struct _IMAGE_BASE_RELOCATION {DWORD VirtualAddress;DWORD SizeOfBlock;};
struct _IMAGE_TLS_DIRECTORY32 {DWORD StartAddressOfRawData;DWORD EndAddressOfRawData;DWORD AddressOfIndex;DWORD AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct _IP_MCAST_COUNTER_INFO {ULONG64 InMcastOctets;ULONG64 OutMcastOctets;ULONG64 InMcastPkts;ULONG64 OutMcastPkts;};
struct _KERB_DECRYPT_RESPONSE {UCHAR DecryptedData[1];};
struct _MCDTEXTUREENABLESTATE {BOOL textureEnabled;};
struct _NDIS_IRDA_PACKET_INFO {ULONG ExtraBOFs;ULONG MinTurnAroundTime;};
struct _NDR_USER_MARSHAL_INFO {unsigned int InformationLevel;_NDR_USER_MARSHAL_INFO___2E50A3D60C3ABC8A29A927969B630A6D __anonymous0;};
struct _PAR_QUERY_INFORMATION {UCHAR Status;};
struct _PRINTPROCESSOR_CAPS_1 {DWORD dwLevel;DWORD dwNupOptions;DWORD dwPageOrderFlags;DWORD dwNumberOfCopies;};
struct _RPC_SECURITY_QOS_V2_A {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;unsigned int AdditionalSecurityInfoType;union _RPC_SECURITY_QOS_V2_A___21F5B817940D6D46E3F17BCDBFB4C1E3 u;};
struct _RPC_SECURITY_QOS_V2_W {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;unsigned int AdditionalSecurityInfoType;union _RPC_SECURITY_QOS_V2_W___29884D18EDD7E60328F7BC8BF7D34E2F u;};
struct _RPC_SECURITY_QOS_V3_A {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;unsigned int AdditionalSecurityInfoType;union _RPC_SECURITY_QOS_V3_A___21F5B817940D6D46E3F17BCDBFB4C1E3 u;void *Sid;};
struct _RPC_SECURITY_QOS_V3_W {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;unsigned int AdditionalSecurityInfoType;union _RPC_SECURITY_QOS_V3_W___29884D18EDD7E60328F7BC8BF7D34E2F u;void *Sid;};
struct _STORAGE_DEVICE_NUMBER {DWORD DeviceType;DWORD DeviceNumber;DWORD PartitionNumber;};
struct _TAPE_CREATE_PARTITION {DWORD Method;DWORD Count;DWORD Size;};
struct _TRUSTED_PASSWORD_INFO {LSA_UNICODE_STRING Password;LSA_UNICODE_STRING OldPassword;};
struct _UNLOAD_DLL_DEBUG_INFO {LPVOID lpBaseOfDll;};
struct _tagPROTOCOLFILTERDATA {DWORD cbSize;IInternetProtocolSink *pProtocolSink;IInternetProtocol *pProtocol;IUnknown *pUnk;DWORD dwFilterFlags;};
struct oliadpcmwaveformat_tag {WAVEFORMATEX wfx;};
struct tagCInterfaceProxyVtbl {CInterfaceProxyHeader header;void *Vtbl[];};
struct tagCStdPSFactoryBuffer { IPSFactoryBufferVtbl *lpVtbl;int RefCount; ProxyFileInfo **pProxyFileList;int Filler1;};
struct tcp_reserve_port_range {USHORT UpperRange;USHORT LowerRange;};
typedef enum _ACL_INFORMATION_CLASS ACL_INFORMATION_CLASS;
typedef enum _D3DDEBUGMONITORTOKENS D3DDEBUGMONITORTOKENS;
typedef D3DMATERIAL7 D3DHAL_DP2SETMATERIAL;
typedef enum _D3DNTHAL_DP2OPERATION D3DNTHAL_DP2OPERATION;
typedef enum _D3DTRANSFORMSTATETYPE D3DTRANSFORMSTATETYPE;
typedef enum _D3DVS_RASTOUT_OFFSETS D3DVS_RASTOUT_OFFSETS;
typedef enum _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;
typedef ProxyFileInfo ExtendedProxyFileInfo;
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef enum _5F4F90A626A6FDB67639732D9E3389D6 KSPROPERTY_CONNECTION;
typedef LONG KS_AM_MaxFullDataRate;
typedef enum _219D11F677061808D19E166038DCDF6D KS_TUNER_TUNING_FLAGS;
typedef enum _87F25CE704E45E1C4AD5F80E170A75FF KS_VIDEODECODER_FLAGS;
typedef  DSCFXNoiseSuppress *LPCDSCFXNoiseSuppress;
typedef D3DHAL_DP2BUFFERBLT *LPD3DHAL_DP2BUFFERBLT;
typedef D3DHAL_DP2SETTEXLOD *LPD3DHAL_DP2SETTEXLOD;
typedef D3DHAL_DP2VOLUMEBLT *LPD3DHAL_DP2VOLUMEBLT;
typedef D3DHAL_GETSTATEDATA *LPD3DHAL_GETSTATEDATA;
typedef D3DNTHAL_CALLBACKS2 *LPD3DNTHAL_CALLBACKS2;
typedef D3DNTHAL_CALLBACKS3 *LPD3DNTHAL_CALLBACKS3;
typedef D3DNTHAL_CLEAR2DATA *LPD3DNTHAL_CLEAR2DATA;
typedef DIGIADPCMWAVEFORMAT *LPDIGIADPCMWAVEFORMAT;
typedef DIRECTDRAWCALLBACKS *LPDIRECTDRAWCALLBACKS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
typedef LPDIRECTSOUNDBUFFER *LPLPDIRECTSOUNDBUFFER;
typedef LPDIRECTSOUNDNOTIFY *LPLPDIRECTSOUNDNOTIFY;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;
typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef ULONG NDIS_802_11_KEY_INDEX;
typedef enum _NDIS_802_5_RING_STATE NDIS_802_5_RING_STATE;
typedef DIGIADPCMWAVEFORMAT *NPDIGIADPCMWAVEFORMAT;
typedef VARIANT_BOOL OLE_ENABLEDEFAULTBOOL;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
typedef PCREDENTIAL_ATTRIBUTEA PCREDENTIAL_ATTRIBUTE;
typedef CSIMAADPCMWAVEFORMAT *PCSIMAADPCMWAVEFORMAT;
typedef void ( *PFDVENUMREADYBALLBACK)(LPVOID pvData);
typedef PFILEPATHS_SIGNERINFO_A PFILEPATHS_SIGNERINFO;
typedef PFILE_IN_CABINET_INFO_A PFILE_IN_CABINET_INFO;
typedef void ( *PFN_DrvDisableSurface)(DHPDEV);
typedef enum _FT_LOGICAL_DISK_TYPE *PFT_LOGICAL_DISK_TYPE;
typedef G721_ADPCMWAVEFORMAT *PG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *PG723_ADPCMWAVEFORMAT;
typedef ULONG *PLSA_OPERATIONAL_MODE;
typedef MPEGLAYER3WAVEFORMAT *PMPEGLAYER3WAVEFORMAT;
typedef enum _NDIS_HARDWARE_STATUS *PNDIS_HARDWARE_STATUS;
typedef enum _NDIS_PHYSICAL_MEDIUM *PNDIS_PHYSICAL_MEDIUM;
typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef enum __MIDL___MIDL_itf_shobjidl_0209_0001 PROPERTYUI_NAME_FLAGS;
typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA_LATEST;
typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW_LATEST;
typedef DWORD *PSECURITY_INFORMATION;
typedef PSP_DEVINSTALL_PARAMS_A PSP_DEVINSTALL_PARAMS;
typedef TRUESPEECHWAVEFORMAT *PTRUESPEECHWAVEFORMAT;
typedef ULONG ( *PWINDBG_CHECK_VERSION)();
typedef enum _ROUTER_INTERFACE_TYPE ROUTER_INTERFACE_TYPE;
typedef void ( *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);
typedef SERVICE_TYPE_INFO_ABSA SERVICE_TYPE_INFO_ABS;
typedef enum _3EA7B843474756A7097D14E94E071D01 SHELL_LINK_DATA_FLAGS;
typedef SP_ORIGINAL_FILE_INFO_A SP_ORIGINAL_FILE_INFO;
typedef WAVEFORMATEXTENSIBLE WAVEFORMATIEEEFLOATEX;
typedef enum tag_WBEM_CHANGE_FLAG_TYPE WBEM_CHANGE_FLAG_TYPE;
typedef enum tag_WBEM_COMPILER_OPTIONS WBEM_COMPILER_OPTIONS;
struct _ACL_SIZE_INFORMATION {DWORD AceCount;DWORD AclBytesInUse;DWORD AclBytesFree;};
struct _BDA_ETHERNET_ADDRESS {BYTE rgbAddress[6];};
struct _BDA_PROGRAM_PID_LIST {ULONG ulProgramNumber;ULONG ulcPIDs;ULONG ulPID[1];};
struct _CHANGER_PRODUCT_DATA {BYTE VendorId[8];BYTE ProductId[16];BYTE Revision[4];BYTE SerialNumber[32];BYTE DeviceType;};
struct _D3DHAL_DP2SETINDICES {DWORD dwVBHandle;DWORD dwStride;};
struct _D3DHAL_DP2SETPALETTE {DWORD dwPaletteHandle;DWORD dwPaletteFlags;DWORD dwSurfaceHandle;};
struct _D3DNTHAL_DP2LINELIST {WORD wVStart;};
struct _DDGETPOLARITYOUTINFO {DWORD bPolarity;};
struct _DDNONLOCALVIDMEMCAPS {DWORD dwSize;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];};
struct _GEN_GET_NETCARD_TIME {ULONGLONG ReadTime;};
struct _IMAGE_DATA_DIRECTORY {DWORD VirtualAddress;DWORD Size;};
struct _IMAGE_FUNCTION_ENTRY {DWORD StartingAddress;DWORD EndingAddress;DWORD EndOfPrologue;};
struct _IP_ADAPTER_ORDER_MAP {ULONG NumAdapters;ULONG AdapterOrder[1];};
struct _MIB_IPMCAST_BOUNDARY {DWORD dwIfIndex;DWORD dwGroupAddress;DWORD dwGroupMask;DWORD dwStatus;};
struct _NETCONNECTINFOSTRUCT {DWORD cbStructure;DWORD dwFlags;DWORD dwSpeed;DWORD dwDelay;DWORD dwOptDataSize;};
struct _WCE_IRDA_DEVICE_INFO {u_char irdaDeviceID[4];char irdaDeviceName[22];u_char Reserved[2];};
struct _wireSAFEARR_DISPATCH {ULONG Size;IDispatch **apDispatch;};
struct digifixwaveformat_tag {WAVEFORMATEX wfx;};
struct digistdwaveformat_tag {WAVEFORMATEX wfx;};
struct echosc1waveformat_tag {WAVEFORMATEX wfx;};
struct olicelpwaveformat_tag {WAVEFORMATEX wfx;};
struct tACMFILTERTAGDETAILSA {DWORD cbStruct;DWORD dwFilterTagIndex;DWORD dwFilterTag;DWORD cbFilterSize;DWORD fdwSupport;DWORD cStandardFilters;char szFilterTag[48];};
struct tACMFORMATTAGDETAILSA {DWORD cbStruct;DWORD dwFormatTagIndex;DWORD dwFormatTag;DWORD cbFormatSize;DWORD fdwSupport;DWORD cStandardFormats;char szFormatTag[48];};
struct tagOleMenuGroupWidths {LONG width[6];};
typedef enum _COMPUTER_NAME_FORMAT COMPUTER_NAME_FORMAT;
typedef CREDENTIAL_ATTRIBUTEA CREDENTIAL_ATTRIBUTE;
typedef enum _D3DTEXTUREFILTERTYPE D3DTEXTUREFILTERTYPE;
typedef enum _ENG_DEVICE_ATTRIBUTE ENG_DEVICE_ATTRIBUTE;
typedef enum _ENG_SYSTEM_ATTRIBUTE ENG_SYSTEM_ATTRIBUTE;
typedef FILEPATHS_SIGNERINFO_A FILEPATHS_SIGNERINFO;
typedef FILE_IN_CABINET_INFO_A FILE_IN_CABINET_INFO;
typedef enum _FT_LOGICAL_DISK_TYPE FT_LOGICAL_DISK_TYPE;
typedef enum _67063D379273ADCD5D91019DFED2E95F KSEVENT_VIDEODECODER;
typedef enum _ADC633718E981BBAA2F59FA41E3EE0B2 KSINTERFACE_STANDARD;
typedef enum _7772B546DBDF650B52C572BF7BB5BA92 KSPROPERTY_AUDDECOUT;
typedef enum _05DAA4B528850479245A9C123C494191 KSPROPERTY_DVDSUBPIC;
typedef enum _A246B606C2B7904A094CADA05BFF43C3 KS_LogicalMemoryType;
typedef enum _DAFE30771B95F95613600355B79694C1 KS_VideoControlFlags;
typedef  DSBPOSITIONNOTIFY *LPCDSBPOSITIONNOTIFY;
typedef  PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;
typedef  PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;
typedef  PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;
typedef  PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;
typedef  PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;
typedef  PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;
typedef  RSVP_RESERVE_INFO *LPCRSVP_RESERVE_INFO;
typedef D3DHAL_DP2SETLIGHT *LPD3DHAL_DP2SETLIGHT;
typedef D3DHAL_DP2STATESET *LPD3DHAL_DP2STATESET;
typedef D3DNTHAL_CALLBACKS *LPD3DNTHAL_CALLBACKS;
typedef D3DNTHAL_DP2TEXBLT *LPD3DNTHAL_DP2TEXBLT;
typedef D3DNTHAL_DP2ZRANGE *LPD3DNTHAL_DP2ZRANGE;
typedef DIGIREALWAVEFORMAT *LPDIGIREALWAVEFORMAT;
typedef IDirectMusicBuffer8 *LPDIRECTMUSICBUFFER8;
typedef DVIADPCMWAVEFORMAT *LPDVIADPCMWAVEFORMAT;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
typedef IMAADPCMWAVEFORMAT *LPIMAADPCMWAVEFORMAT;
typedef OLIADPCMWAVEFORMAT *LPOLIADPCMWAVEFORMAT;
typedef ULONG LSA_OPERATIONAL_MODE;
typedef enum _D62050DCDBDF6C35CAC61CEAA5D0241B MEDIA_SAMPLE_CONTENT;
typedef enum _NDIS_HARDWARE_STATUS NDIS_HARDWARE_STATUS;
typedef enum _NDIS_PHYSICAL_MEDIUM NDIS_PHYSICAL_MEDIUM;
typedef DIGIREALWAVEFORMAT *NPDIGIREALWAVEFORMAT;
typedef DVIADPCMWAVEFORMAT *NPDVIADPCMWAVEFORMAT;
typedef IMAADPCMWAVEFORMAT *NPIMAADPCMWAVEFORMAT;
typedef OLIADPCMWAVEFORMAT *NPOLIADPCMWAVEFORMAT;
typedef enum _5FB78AF4F827B2D68807439224CA6C47 OLECMDID_REFRESHFLAG;
typedef  CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;
typedef DIGIADPCMWAVEFORMAT *PDIGIADPCMWAVEFORMAT;
typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;
typedef void ( *PFIBER_START_ROUTINE)(LPVOID lpFiberParameter);
typedef BOOL ( *PFN_CPD_ADD_PRIVDATA)(struct _CRYPT_PROVIDER_DATA *pProvData, struct _CRYPT_PROVIDER_PRIVDATA *pPrivData2Add);
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;
typedef enum _704B423838D35B9B541E315C75B8E394 PIPE_ALLOCATOR_PLACE;
typedef enum _99797C396B1D447BBE63E5346EF4FE3A *PKSPIN_COMMUNICATION;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef enum _SECURITY_LOGON_TYPE *PSECURITY_LOGON_TYPE;
typedef PSP_ALTPLATFORM_INFO_V2 PSP_ALTPLATFORM_INFO;
typedef PSP_FILE_COPY_PARAMS_A PSP_FILE_COPY_PARAMS;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef DWORD SECURITY_INFORMATION;
typedef SP_DEVINSTALL_PARAMS_A SP_DEVINSTALL_PARAMS;
typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
typedef enum _USER_MARSHAL_CB_TYPE USER_MARSHAL_CB_TYPE;
typedef enum tag_WBEM_COMPARISON_FLAG WBEM_COMPARISON_FLAG;
typedef enum tag_WBEM_CONNECT_OPTIONS WBEM_CONNECT_OPTIONS;
typedef enum tag_WBEM_QUERY_FLAG_TYPE WBEM_QUERY_FLAG_TYPE;
typedef enum tag_WBEM_REFRESHER_FLAGS WBEM_REFRESHER_FLAGS;
struct _CERT_DSS_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB q;CRYPT_UINT_BLOB g;};
struct _D3DHAL_DP2LINESTRIP {WORD wVStart;};
struct _D3DHAL_DP2SETTEXLOD {DWORD dwDDSurface;DWORD dwLOD;};
struct _D3DVERTEXBUFFERDESC {DWORD dwSize;DWORD dwCaps;DWORD dwFVF;DWORD dwNumVertices;};
struct _DDGETPOLARITYININFO {LPDDVIDEOPORTDATA lpVideoPortData;};
struct _DD_DIRECTDRAW_LOCAL {PDD_DIRECTDRAW_GLOBAL lpGbl;};
struct _KS_COPY_MACROVISION {ULONG MACROVISIONLevel;};
struct _MCDSHADELMODELSTATE {ULONG shadeModel;};
struct _MIB_IPFORWARDNUMBER {DWORD dwValue;};
struct _PAR_SET_INFORMATION {UCHAR Init;};
struct _PRINTER_NOTIFY_INIT {DWORD Size;DWORD Reserved;DWORD PollTime;};
struct _PSFEATURE_CUSTPAPER {LONG lOrientation;LONG lWidth;LONG lHeight;LONG lWidthOffset;LONG lHeightOffset;};
struct _TAPE_GET_STATISTICS {DWORD Operation;};
struct _wireSAFEARR_UNKNOWN {ULONG Size;IUnknown **apUnknown;};
struct oligsmwaveformat_tag {WAVEFORMATEX wfx;};
struct olioprwaveformat_tag {WAVEFORMATEX wfx;};
struct olisbcwaveformat_tag {WAVEFORMATEX wfx;};
struct tagCOMPOSITIONSTRING {DWORD dwSize;DWORD dwCompReadAttrLen;DWORD dwCompReadAttrOffset;DWORD dwCompReadClauseLen;DWORD dwCompReadClauseOffset;DWORD dwCompReadStrLen;DWORD dwCompReadStrOffset;DWORD dwCompAttrLen;DWORD dwCompAttrOffset;DWORD dwCompClauseLen;DWORD dwCompClauseOffset;DWORD dwCompStrLen;DWORD dwCompStrOffset;DWORD dwCursorPos;DWORD dwDeltaStart;DWORD dwResultReadClauseLen;DWORD dwResultReadClauseOffset;DWORD dwResultReadStrLen;DWORD dwResultReadStrOffset;DWORD dwResultClauseLen;DWORD dwResultClauseOffset;DWORD dwResultStrLen;DWORD dwResultStrOffset;DWORD dwPrivateSize;DWORD dwPrivateOffset;};
typedef enum _tagAUTOCOMPLETEOPTIONS AUTOCOMPLETEOPTIONS;
typedef DWORD BROWSERFRAMEOPTIONS;
typedef enum tag_CIMTYPE_ENUMERATION CIMTYPE_ENUMERATION;
typedef enum _D3DHAL_DP2OPERATION D3DHAL_DP2OPERATION;
typedef enum _D3DMULTISAMPLE_TYPE D3DMULTISAMPLE_TYPE;
typedef enum _D3DTEXTUREMAGFILTER D3DTEXTUREMAGFILTER;
typedef enum _D3DTEXTUREMINFILTER D3DTEXTUREMINFILTER;
typedef enum _D3DTEXTUREMIPFILTER D3DTEXTUREMIPFILTER;
typedef enum _D3DVERTEXBLENDFLAGS D3DVERTEXBLENDFLAGS;
typedef enum _EATTRIBUTE_DATATYPE EATTRIBUTE_DATATYPE;
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef enum _2E80CEBFECBA0EBADF6AA183D61A87F6 KSEVENT_CYCLIC_TIME;
typedef enum _9D9FB30271C58D4C0035E931B55503FE KSEVENT_VIDCAPTOSTI;
typedef enum _3A98730CE8FA5C41DCBE091A69EDD8A4 KSEVENT_VPVBINOTIFY;
typedef enum _99797C396B1D447BBE63E5346EF4FE3A KSPIN_COMMUNICATION;
typedef enum _C84AAC0EFB97B6FA6320B166810390ED KSPROPERTY_AUDIOGFX;
typedef enum _CFDA6B458BFD5441F09F532A42BB2B66 KSPROPERTY_COPYPROT;
typedef enum _2D06E770D8F86C31A6EBC72A59D3B380 KSPROPERTY_MPEG2VID;
typedef enum _7A8E7332A2E71E967EDB7B241741D182 KSPROPERTY_SYSAUDIO;
typedef enum _729DCE355D7523E6CA017E6077BAB356 KSPROPERTY_TOPOLOGY;
typedef enum _270C55D2D3E5E2B5C5E1C425B61D62C1 KSPROPERTY_VPCONFIG;
typedef enum _27AD37380C8900BF8828E9942DAD6F74 KS_AMPixAspectRatio;
typedef  PROPSHEETHEADERA *LPCPROPSHEETHEADERA;
typedef  PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
typedef  RSVP_STATUS_INFO *LPCRSVP_STATUS_INFO;
typedef  SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;
typedef D3DHAL_CLEAR2DATA *LPD3DHAL_CLEAR2DATA;
typedef DWORD *LPD3DMATERIALHANDLE;
typedef D3DNTHAL_DP2CLEAR *LPD3DNTHAL_DP2CLEAR;
typedef D3DNTHAL_DP2WINFO *LPD3DNTHAL_DP2WINFO;
typedef DWORD ( *LPDD32BITDRIVERINIT)(DWORD dwContext);
typedef DDHAL_DDCALLBACKS *LPDDHAL_DDCALLBACKS;
typedef DIGIFIXWAVEFORMAT *LPDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *LPDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *LPECHOSC1WAVEFORMAT;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
typedef OLICELPWAVEFORMAT *LPOLICELPWAVEFORMAT;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;
typedef enum _WSACOMPLETIONTYPE *LPWSACOMPLETIONTYPE;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef ULONG NDIS_802_11_ANTENNA;
struct NDIS_BPC_LAST_ERROR {ULONG ulErrorContext;ULONG ulBPCError;ULONG ulAdapterError;ULONG ulAdapterContext;};
typedef void ( *NDR_NOTIFY2_ROUTINE)(boolean flag);
typedef DIGIFIXWAVEFORMAT *NPDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *NPDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *NPECHOSC1WAVEFORMAT;
typedef OLICELPWAVEFORMAT *NPOLICELPWAVEFORMAT;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef enum _OFFLOAD_OPERATION_E OFFLOAD_OPERATION_E;
typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
typedef enum _323950C9678C627AEFAD637828B7290C *PBDA_MULTICAST_MODE;
typedef enum _DEVICE_POWER_STATE *PDEVICE_POWER_STATE;
typedef DIGIREALWAVEFORMAT *PDIGIREALWAVEFORMAT;
typedef DVIADPCMWAVEFORMAT *PDVIADPCMWAVEFORMAT;
typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
typedef LONGLONG *PFT_LOGICAL_DISK_ID;
typedef IMAADPCMWAVEFORMAT *PIMAADPCMWAVEFORMAT;
typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;
typedef OLIADPCMWAVEFORMAT *POLIADPCMWAVEFORMAT;
typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef PSP_DRVINFO_DATA_V1_A PSP_DRVINFO_DATA_V1;
typedef PSP_DRVINFO_DATA_V2_A PSP_DRVINFO_DATA_V2;
typedef PSP_INF_SIGNER_INFO_A PSP_INF_SIGNER_INFO;
typedef enum _STORAGE_MEDIA_TYPE *PSTORAGE_MEDIA_TYPE;
typedef enum _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE;
typedef RPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES;
typedef enum _SECURITY_LOGON_TYPE SECURITY_LOGON_TYPE;
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef SP_ALTPLATFORM_INFO_V2 SP_ALTPLATFORM_INFO;
typedef SP_FILE_COPY_PARAMS_A SP_FILE_COPY_PARAMS;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef enum tag_WBEM_PROVIDER_FLAGS WBEM_PROVIDER_FLAGS;
typedef enum tag_WBEM_SECURITY_FLAGS WBEM_SECURITY_FLAGS;
typedef enum tag_WBEM_SHUTDOWN_FLAGS WBEM_SHUTDOWN_FLAGS;
typedef enum tag_WBEM_TEXT_FLAG_TYPE WBEM_TEXT_FLAG_TYPE;
typedef enum _858DEE99A53335AECCB47369A882FB45 WELL_KNOWN_SID_TYPE;
typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef void ( *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);
struct _CERT_DH_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB g;};
union _CLIENT_CALL_RETURN {void *Pointer;LONG_PTR Simple;};
struct _D3DHAL_DP2LINELIST {WORD wVStart;};
struct _D3DHAL_DP2SETLIGHT {DWORD dwIndex;DWORD dwDataType;};
struct _D3DLIGHTINGELEMENT {D3DVECTOR dvPosition;D3DVECTOR dvNormal;};
struct _D3DNTHAL_DP2POINTS {WORD wCount;WORD wVStart;};
struct _D3DNTHAL_DP2ZRANGE {D3DVALUE dvMinZ;D3DVALUE dvMaxZ;};
struct _DDBOBNEXTFIELDINFO {LPDDSURFACEDATA lpSurface;};
struct _DMUS_ARTICULATION2 {ULONG ulArtIdx;ULONG ulFirstExtCkIdx;ULONG ulNextArtIdx;};
struct _DSCFXNoiseSuppress {BOOL fEnable;};
struct _EXCEPTION_RECORD32 {DWORD ExceptionCode;DWORD ExceptionFlags;DWORD ExceptionRecord;DWORD ExceptionAddress;DWORD NumberParameters;DWORD ExceptionInformation[15];};
struct _FOCUS_EVENT_RECORD {BOOL bSetFocus;};
struct _IMAGE_THUNK_DATA32 {union _IMAGE_THUNK_DATA32___A667AA66621C320A48F8EE5C4EA8143D u1;};
struct _IMAGE_THUNK_DATA64 {union _IMAGE_THUNK_DATA64___F155400DC8E777EDFF51409B49416578 u1;};
struct _KS_DVDCOPY_CHLGKEY {BYTE ChlgKey[10];BYTE Reserved[2];};
struct _KS_DVDCOPY_DISCKEY {BYTE DiscKey[2048];};
struct _MALLOC_FREE_STRUCT {void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);};
struct _MIB_IPMCAST_GLOBAL {DWORD dwEnable;};
struct _NDIS_CO_LINK_SPEED {ULONG Outbound;ULONG Inbound;};
struct _PERF_COUNTER_BLOCK {DWORD ByteLength;};
struct _SERVICE_TYPE_VALUE {DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;DWORD dwValueNameOffset;DWORD dwValueOffset;};
struct _remoteMETAFILEPICT {int mm;int xExt;int yExt;userHMETAFILE *hMF;};
struct _userFLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;userSTGMEDIUM Stgmed;};
struct midiproptimediv_tag {DWORD cbStruct;DWORD dwTimeDiv;};
struct midistrmbuffver_tag {DWORD dwVersion;DWORD dwMid;DWORD dwOEMVersion;};
struct tagKS_VBIINFOHEADER {ULONG StartLine;ULONG EndLine;ULONG SamplingFrequency;ULONG MinLineStartTime;ULONG MaxLineStartTime;ULONG ActualLineStartTime;ULONG ActualLineEndTime;ULONG VideoStandard;ULONG SamplesPerLine;ULONG StrideInBytes;ULONG BufferSize;};
struct tagMINIMIZEDMETRICS {UINT cbSize;int iWidth;int iHorzGap;int iVertGap;int iArrange;};
struct tagRemHMETAFILEPICT {int mm;int xExt;int yExt;unsigned int cbData;byte data[1];};
struct tagVS_FIXEDFILEINFO {DWORD dwSignature;DWORD dwStrucVersion;DWORD dwFileVersionMS;DWORD dwFileVersionLS;DWORD dwProductVersionMS;DWORD dwProductVersionLS;DWORD dwFileFlagsMask;DWORD dwFileFlags;DWORD dwFileOS;DWORD dwFileType;DWORD dwFileSubtype;DWORD dwFileDateMS;DWORD dwFileDateLS;};
struct tag_s_RIFFWAVE_inst {BYTE bUnshiftedNote;char chFineTune;char chGain;BYTE bLowNote;BYTE bHighNote;BYTE bLowVelocity;BYTE bHighVelocity;};
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef enum _323950C9678C627AEFAD637828B7290C BDA_MULTICAST_MODE;
typedef enum __MIDL___MIDL_itf_shobjidl_0211_0001 CATEGORYINFO_FLAGS;
typedef enum _D3DBACKBUFFER_TYPE D3DBACKBUFFER_TYPE;
typedef enum _D3DRENDERSTATETYPE D3DRENDERSTATETYPE;
typedef enum _DEVICE_POWER_STATE DEVICE_POWER_STATE;
typedef enum _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;
typedef LONGLONG FT_LOGICAL_DISK_ID;
typedef enum _JOBOBJECTINFOCLASS JOBOBJECTINFOCLASS;
typedef enum _4359A6DF66D6C0A2E03091CE4CF62226 KSDEGRADE_STANDARD;
typedef enum _CB3435FABEA0A3C4DEC3DC8A5EBD37B4 KSEVENT_CONNECTION;
typedef enum _62D95A1861CF901152B53DFA047F6B81 KSINTERFACE_FILEIO;
typedef enum _2CD358AE72CA35E88B6E5377F4286C0E KSMETHOD_WAVETABLE;
typedef enum _27EA88566304FD4A859B4EB0EE874253 KSPROPERTY_GENERAL;
typedef enum _2E38A7C1F534E42343A61A8545C8A30E KSPROPERTY_QUALITY;
typedef enum _88B706C139ABA6F86ADC31E6AAF44FB3 KSPROPERTY_RTAUDIO;
typedef enum _46FFE91252AC4BB1103ECF2E486A148F KS_CompressionCaps;
typedef ADPCMEWAVEFORMAT *LPADPCMEWAVEFORMAT;
typedef  DSFXI3DL2Reverb *LPCDSFXI3DL2Reverb;
typedef  DSFXWavesReverb *LPCDSFXWavesReverb;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef D3DHAL_CLEARDATA *LPD3DHAL_CLEARDATA;
typedef D3DHAL_DP2TEXBLT *LPD3DHAL_DP2TEXBLT;
typedef D3DHAL_DP2ZRANGE *LPD3DHAL_DP2ZRANGE;
typedef DWORD *LPD3DTEXTUREHANDLE;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
typedef IDirectMusicPort8 *LPDIRECTMUSICPORT8;
typedef IDirectMusicThru8 *LPDIRECTMUSICTHRU8;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
typedef GSM610WAVEFORMAT *LPGSM610WAVEFORMAT;
typedef void ( *LPHANDLER_FUNCTION)(DWORD dwControl);
typedef WINDOWS_IRDA_DEVICE_INFO *LPIRDA_DEVICE_INFO;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
typedef OLIGSMWAVEFORMAT *LPOLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *LPOLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *LPOLISBCWAVEFORMAT;
typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
typedef SONARCWAVEFORMAT *LPSONARCWAVEFORMAT;
typedef VOLUMEWAVEFILTER *LPVOLUMEWAVEFILTER;
typedef enum _WSAESETSERVICEOP *LPWSAESETSERVICEOP;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
typedef ADPCMEWAVEFORMAT *NPADPCMEWAVEFORMAT;
typedef GSM610WAVEFORMAT *NPGSM610WAVEFORMAT;
typedef OLIGSMWAVEFORMAT *NPOLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *NPOLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *NPOLISBCWAVEFORMAT;
typedef SONARCWAVEFORMAT *NPSONARCWAVEFORMAT;
typedef VOLUMEWAVEFILTER *NPVOLUMEWAVEFILTER;
typedef LONG OLE_XSIZE_HIMETRIC;
typedef LONG OLE_YSIZE_HIMETRIC;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
typedef enum _CRED_MARSHAL_TYPE *PCRED_MARSHAL_TYPE;
typedef DIGIFIXWAVEFORMAT *PDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *PDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *PECHOSC1WAVEFORMAT;
typedef void ( *PFN_DrvDestroyFont)(FONTOBJ *);
typedef void ( *PFN_DrvDisablePDEV)(DHPDEV);
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef OLICELPWAVEFORMAT *POLICELPWAVEFORMAT;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
typedef PSP_DRVINFO_DATA_V2_A PSP_DRVINFO_DATA_A;
typedef PSP_DRVINFO_DATA_V2_W PSP_DRVINFO_DATA_W;
typedef enum _WSACOMPLETIONTYPE *PWSACOMPLETIONTYPE;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef enum _RAS_PORT_CONDITION RAS_PORT_CONDITION;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef void (*RPC_SETFILTER_FUNC)(RPCLT_PDU_FILTER_FUNC pfnFilter);
typedef enum _CM_ERROR_CONTROL_TYPE SERVICE_ERROR_TYPE;
typedef SP_DRVINFO_DATA_V1_A SP_DRVINFO_DATA_V1;
typedef SP_DRVINFO_DATA_V2_A SP_DRVINFO_DATA_V2;
typedef SP_INF_SIGNER_INFO_A SP_INF_SIGNER_INFO;
typedef enum _STORAGE_MEDIA_TYPE STORAGE_MEDIA_TYPE;
typedef enum _STREAM_INFO_LEVELS STREAM_INFO_LEVELS;
typedef enum _SYSTEM_POWER_STATE SYSTEM_POWER_STATE;
typedef void ( *WORKERCALLBACKFUNC)(PVOID);
struct _AD_GENERAL_PARAMS {ULONG IntServAwareHopCount;ULONG PathBandwidthEstimate;ULONG MinimumLatency;ULONG PathMTU;ULONG Flags;};
struct _BDA_TABLE_SECTION {ULONG ulPrimarySectionId;ULONG ulSecondarySectionId;ULONG ulcbSectionLength;ULONG argbSectionData[1];};
struct _CERT_TRUST_STATUS {DWORD dwErrorStatus;DWORD dwInfoStatus;};
struct _CMSG_RC2_AUX_INFO {DWORD cbSize;DWORD dwBitLen;};
struct _CMSG_RC4_AUX_INFO {DWORD cbSize;DWORD dwBitLen;};
struct _D3DNTHAL_DP2WINFO {D3DVALUE dvWNear;D3DVALUE dvWFar;};
struct _DDTRANSFEROUTINFO {DWORD dwBufferPolarity;};
struct _DD_CLIPPER_GLOBAL {ULONG_PTR dwReserved1;};
struct _DD_PALETTE_GLOBAL {ULONG_PTR dwReserved1;};
struct _DMUS_ARTICULATION {ULONG ulArt1Idx;ULONG ulFirstExtCkIdx;};
struct _DMUS_DOWNLOADINFO {DWORD dwDLType;DWORD dwDLId;DWORD dwNumOffsetTableEntries;DWORD cbSize;};
struct _FLAGGED_BYTE_BLOB {unsigned int fFlags;unsigned int clSize;byte abData[1];};
struct _GEN_GET_TIME_CAPS {ULONG Flags;ULONG ClockPrecision;};
struct _GRADIENT_TRIANGLE {ULONG Vertex1;ULONG Vertex2;ULONG Vertex3;};
struct _KS_DVDCOPY_BUSKEY {BYTE BusKey[5];BYTE Reserved[1];};
struct _KS_DVDCOPY_REGION {UCHAR Reserved;UCHAR RegionData;UCHAR Reserved2[2];};
struct _MCDDEPTHTESTSTATE {ULONG depthTestFunc;};
struct _MCDPOINTDRAWSTATE {MCDFLOAT pointSize;};
struct _MENU_EVENT_RECORD {UINT dwCommandId;};
struct _NABTS_BUFFER_LINE {BYTE Confidence;BYTE Bytes[36];};
struct _OEM_DMEXTRAHEADER {DWORD dwSize;DWORD dwSignature;DWORD dwVersion;};
struct _OFFLOAD_ALGO_INFO {ULONG algoIdentifier;ULONG algoKeylen;ULONG algoRounds;};
struct _QOS_DIFFSERV_RULE {UCHAR InboundDSField;UCHAR ConformingOutboundDSField;UCHAR NonConformingOutboundDSField;UCHAR ConformingUserPriority;UCHAR NonConformingUserPriority;};
struct _userHMETAFILEPICT {int fContext;union _userHMETAFILEPICT____MIDL_IWinTypes_0005 u;};
struct aptxwaveformat_tag {WAVEFORMATEX wfx;};
struct tagDATABLOCKHEADER {DWORD cbSize;DWORD dwSignature;};
struct tagKS_MPEAUDIOINFO {DWORD dwFlags;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;};
struct tagLOCALESIGNATURE {DWORD lsUsb[4];DWORD lsCsbDefault[2];DWORD lsCsbSupported[2];};
struct tagRECONVERTSTRING {DWORD dwSize;DWORD dwVersion;DWORD dwStrLen;DWORD dwStrOffset;DWORD dwCompStrLen;DWORD dwCompStrOffset;DWORD dwTargetStrLen;DWORD dwTargetStrOffset;};
struct tagRemHENHMETAFILE {unsigned int cbData;byte data[1];};
struct tagVersionedStream {GUID guidVersion;IStream *pStream;};
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef enum _CRED_MARSHAL_TYPE CRED_MARSHAL_TYPE;
typedef enum _D3DLIGHTSTATETYPE D3DLIGHTSTATETYPE;
typedef DWORD D3DMATERIALHANDLE;
typedef enum _D3DPATCHEDGESTYLE D3DPATCHEDGESTYLE;
typedef enum _D3DSTATEBLOCKTYPE D3DSTATEBLOCKTYPE;
typedef enum _D3DTEXTUREADDRESS D3DTEXTUREADDRESS;
typedef enum _DBGKD_MAJOR_TYPES DBGKD_MAJOR_TYPES;
typedef enum _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;
typedef enum _A5D41151699DCC90B5EEB53A3A6D67E0 FRAMING_CACHE_OPS;
typedef enum _3A65399903FADBC05E4C10BA9E609C32 KSINTERFACE_MEDIA;
typedef enum _214B3FAB360CFC0FA4B19913ED3BE09A KSMETHOD_STREAMIO;
typedef enum _1FFC3954F3EEED4BA40483519ADC2C52 KSPROPERTY_BDA_CA;
typedef enum _222C5FE2FBB310101DEF802D75341780 KSPROPERTY_HRTF3D;
typedef enum _023C071F6B2DC664943C68B81541179C KSPROPERTY_STREAM;
typedef enum _E4F601CF8334073149F423AA599EAEAE KSPROPERTY_VBICAP;
typedef enum _A1E89C657E90049EA789DE2B75FA4D0B KS_TUNER_STRATEGY;
typedef ADPCMWAVEFORMAT *LPADPCMWAVEFORMAT;
typedef  DSFXCompressor *LPCDSFXCompressor;
typedef  DSFXDistortion *LPCDSFXDistortion;
typedef  FOLDERSETTINGS *LPCFOLDERSETTINGS;
typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW;
typedef  REBARBANDINFOA *LPCREBARBANDINFOA;
typedef  REBARBANDINFOW *LPCREBARBANDINFOW;
typedef D3DHAL_DP2CLEAR *LPD3DHAL_DP2CLEAR;
typedef D3DHAL_DP2WINFO *LPD3DHAL_DP2WINFO;
typedef DWORD *LPD3DMATRIXHANDLE;
typedef D3DNTHAL_DP2EXT *LPD3DNTHAL_DP2EXT;
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
typedef MPEG1WAVEFORMAT *LPMPEG1WAVEFORMAT;
typedef LPNS_SERVICE_INFOA LPNS_SERVICE_INFO;
typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
typedef VIDEOMEMORYINFO *LPVIDEOMEMORYINFO;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
typedef WINDOWPLACEMENT *LPWINDOWPLACEMENT;
typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef HANDLE MIB_SERVER_HANDLE;
typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef HANDLE MPR_SERVER_HANDLE;
typedef UCHAR NDIS_802_11_RATES[8];
typedef ADPCMWAVEFORMAT *NPADPCMWAVEFORMAT;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef MPEG1WAVEFORMAT *NPMPEG1WAVEFORMAT;
typedef enum _OFFLOAD_CONF_ALGO OFFLOAD_CONF_ALGO;
typedef LONG OLE_XPOS_HIMETRIC;
typedef LONG OLE_YPOS_HIMETRIC;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef ADPCMEWAVEFORMAT *PADPCMEWAVEFORMAT;
typedef enum _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;
typedef WORD *PBAD_TRACK_NUMBER;
typedef enum _4FF2CEF7F943208657A69CE25EA0FE31 *PBDA_CHANGE_STATE;
typedef enum _7CE1FE37114556B00E2D910941BCF644 *PBDA_SIGNAL_STATE;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef DDVIDEOPORTINFO *PDD_VIDEOPORTINFO;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;
typedef void *( *PFN_CPD_MEM_ALLOC)(DWORD cbSize);
typedef GSM610WAVEFORMAT *PGSM610WAVEFORMAT;
typedef enum tagPictureAttributes PICTUREATTRIBUTES;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;
typedef WINDOWS_IRDA_DEVICE_INFO *PIRDA_DEVICE_INFO;
typedef enum _NDIS_MEDIA_STATE *PNDIS_MEDIA_STATE;
typedef enum _NDIS_WAN_QUALITY *PNDIS_WAN_QUALITY;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef OLIGSMWAVEFORMAT *POLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *POLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *POLISBCWAVEFORMAT;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST;
typedef SONARCWAVEFORMAT *PSONARCWAVEFORMAT;
typedef enum _STORAGE_BUS_TYPE *PSTORAGE_BUS_TYPE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef VOLUMEWAVEFILTER *PVOLUMEWAVEFILTER;
typedef enum _WSAESETSERVICEOP *PWSAESETSERVICEOP;
typedef HANDLE RAS_SERVER_HANDLE;
typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
typedef SCARD_READERSTATEA SCARD_READERSTATE;
typedef enum _CM_SERVICE_LOAD_TYPE SERVICE_LOAD_TYPE;
typedef enum _CM_SERVICE_NODE_TYPE SERVICE_NODE_TYPE;
typedef SP_DRVINFO_DATA_V2_A SP_DRVINFO_DATA_A;
typedef SP_DRVINFO_DATA_V2_W SP_DRVINFO_DATA_W;
typedef enum tag_WBEMSTATUS_FORMAT WBEMSTATUS_FORMAT;
typedef enum tag_WBEM_TIMEOUT_TYPE WBEM_TIMEOUT_TYPE;
typedef LPVOID WIN_TRUST_SUBJECT;
typedef enum _WSACOMPLETIONTYPE WSACOMPLETIONTYPE;
typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
struct _ATTRIBUTE_INFO_1 {DWORD dwJobNumberOfPagesPerSide;DWORD dwDrvNumberOfPagesPerSide;DWORD dwNupBorderFlags;DWORD dwJobPageOrderFlags;DWORD dwDrvPageOrderFlags;DWORD dwJobNumberOfCopies;DWORD dwDrvNumberOfCopies;};
struct _ATTRIBUTE_INFO_2 {DWORD dwJobNumberOfPagesPerSide;DWORD dwDrvNumberOfPagesPerSide;DWORD dwNupBorderFlags;DWORD dwJobPageOrderFlags;DWORD dwDrvPageOrderFlags;DWORD dwJobNumberOfCopies;DWORD dwDrvNumberOfCopies;DWORD dwColorOptimization;};
struct _ATTRIBUTE_INFO_3 {DWORD dwJobNumberOfPagesPerSide;DWORD dwDrvNumberOfPagesPerSide;DWORD dwNupBorderFlags;DWORD dwJobPageOrderFlags;DWORD dwDrvPageOrderFlags;DWORD dwJobNumberOfCopies;DWORD dwDrvNumberOfCopies;DWORD dwColorOptimization;short dmPrintQuality;short dmYResolution;};
struct _BDA_CA_MODULE_UI {ULONG ulFormat;ULONG ulbcDesc;ULONG ulDesc[1];};
struct _BDA_IPv4_ADDRESS {BYTE rgbAddress[4];};
struct _BDA_IPv6_ADDRESS {BYTE rgbAddress[6];};
struct _D3DHAL_DP2POINTS {WORD wCount;WORD wVStart;};
struct _D3DHAL_DP2ZRANGE {D3DVALUE dvMinZ;D3DVALUE dvMaxZ;};
struct _D3DTRANSFORMCAPS {DWORD dwSize;DWORD dwCaps;};
struct _DD_CLIPPER_LOCAL {ULONG_PTR dwReserved1;};
struct _DMUS_OFFSETTABLE {ULONG ulOffsetTable[1];};
struct _DMUS_SYNTHSTATS8 {DWORD dwSize;DWORD dwValidStats;DWORD dwVoices;DWORD dwTotalCPU;DWORD dwCPUPerVoice;DWORD dwLostNotes;DWORD dwFreeMemory;int lPeakVolume;DWORD dwSynthMemUse;};
struct _FIND_NAME_BUFFER {UCHAR length;UCHAR access_control;UCHAR frame_control;UCHAR destination_addr[6];UCHAR source_addr[6];UCHAR routing_info[18];};
struct _HISTOGRAM_BUCKET {DWORD Reads;DWORD Writes;};
struct _KSPROPERTY_SPPAL {KS_DVD_YUV sppal[16];};
struct _MIB_IPFORWARDROW {DWORD dwForwardDest;DWORD dwForwardMask;DWORD dwForwardPolicy;DWORD dwForwardNextHop;DWORD dwForwardIfIndex;DWORD dwForwardType;DWORD dwForwardProto;DWORD dwForwardAge;DWORD dwForwardNextHopAS;DWORD dwForwardMetric1;DWORD dwForwardMetric2;DWORD dwForwardMetric3;DWORD dwForwardMetric4;DWORD dwForwardMetric5;};
struct _MIB_OPAQUE_QUERY {DWORD dwVarId;DWORD rgdwVarIndex[1];};
struct _PSFEATURE_OUTPUT {BOOL bPageIndependent;BOOL bSetPageDevice;};
struct _SCARD_IO_REQUEST {DWORD dwProtocol;DWORD cbPciLength;};
struct _SPLCLIENT_INFO_2 {DWORD32 hSplPrinter;};
struct _WSAPROTOCOLCHAIN {int ChainLen;DWORD ChainEntries[7];};
struct _userHENHMETAFILE {int fContext;union _userHENHMETAFILE____MIDL_IWinTypes_0006 u;};
struct midiproptempo_tag {DWORD cbStruct;DWORD dwTempo;};
struct tagCBT_CREATEWNDA {struct tagCREATESTRUCTA *lpcs;HWND hwndInsertAfter;};
struct tagCBT_CREATEWNDW {struct tagCREATESTRUCTW *lpcs;HWND hwndInsertAfter;};
struct tagDRAWTEXTPARAMS {UINT cbSize;int iTabLength;int iLeftMargin;int iRightMargin;UINT uiLengthDrawn;};
struct tagFLOATOBJ_XFORM {FLOATOBJ eM11;FLOATOBJ eM12;FLOATOBJ eM21;FLOATOBJ eM22;FLOATOBJ eDx;FLOATOBJ eDy;};
struct tagJPEGINFOHEADER {DWORD JPEGSize;DWORD JPEGProcess;DWORD JPEGColorSpaceID;DWORD JPEGBitsPerSample;DWORD JPEGHSubSampling;DWORD JPEGVSubSampling;};
struct tagPRINTPAGERANGE {DWORD nFromPage;DWORD nToPage;};
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef enum _AUDIT_EVENT_TYPE AUDIT_EVENT_TYPE;
typedef WORD BAD_TRACK_NUMBER;
typedef enum _4FF2CEF7F943208657A69CE25EA0FE31 BDA_CHANGE_STATE;
typedef enum _7CE1FE37114556B00E2D910941BCF644 BDA_SIGNAL_STATE;
typedef enum __MIDL_IBindStatusCallback_0005 BINDINFO_OPTIONS;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef enum _D3DANTIALIASMODE D3DANTIALIASMODE;
typedef enum _D3DCUBEMAP_FACES D3DCUBEMAP_FACES;
typedef enum _D3DPRIMITIVETYPE D3DPRIMITIVETYPE;
typedef enum _D3DTEXTUREFILTER D3DTEXTUREFILTER;
typedef DWORD D3DTEXTUREHANDLE;
typedef enum _D3DVSD_TOKENTYPE D3DVSD_TOKENTYPE;
typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef enum tagAspectInfoFlag DVASPECTINFOFLAG;
typedef HANDLE HCERTCHAINENGINE;
typedef enum _HIDP_REPORT_TYPE HIDP_REPORT_TYPE;
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef enum _CDF15D895FCCE1726F8D6F94CFB8A0EF IP_PREFIX_ORIGIN;
typedef enum _0BB80D20224D17CF959CD73271A83581 IP_SUFFIX_ORIGIN;
typedef WINDOWS_IRDA_DEVICE_INFO IRDA_DEVICE_INFO;
typedef enum _CAE561814972B63FC408CA74931D2863 KSEVENT_CROSSBAR;
typedef enum _AD2684E740CA89CFFCE63237D53FEB0F KSEVENT_VPNOTIFY;
typedef enum _F750B0D5AE4952E6A2E06632A571D241 KSPROPERTY_AUDIO;
typedef enum _D5A9BE53F5312CC59A8B037E92CC2DF0 KSPROPERTY_CLOCK;
typedef enum _685D0097497CB64E18A21F243FD25622 KSPROPERTY_ITD3D;
typedef enum _A2D51A8FAB7AC563CC6DB2B9AADBE187 KSPROPERTY_TUNER;
typedef enum _6F9F41060DD80647953DB726CA7F25E7 KS_SEEKING_FLAGS;
typedef ACCESSRECTLIST *LPACCESSRECTLIST;
typedef APTXWAVEFORMAT *LPAPTXWAVEFORMAT;
typedef  DSBUFFERDESC1 *LPCDSBUFFERDESC1;
typedef  DSCBUFFERDESC *LPCDSCBUFFERDESC;
typedef  DSCEFFECTDESC *LPCDSCEFFECTDESC;
typedef  MENUITEMINFOA *LPCMENUITEMINFOA;
typedef  MENUITEMINFOW *LPCMENUITEMINFOW;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
typedef ECHOWAVEFILTER *LPECHOWAVEFILTER;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
typedef FOLDERSETTINGS *LPFOLDERSETTINGS;
typedef LPDIRECTSOUND8 *LPLPDIRECTSOUND8;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA;
typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
typedef enum _WSAEcomparator *LPWSAECOMPARATOR;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;
typedef void ( *MCDENGUNINITFUNC)(SURFOBJ *pso);
typedef LONG NDIS_802_11_RSSI;
typedef enum _NDIS_MEDIA_STATE NDIS_MEDIA_STATE;
typedef enum _NDIS_WAN_QUALITY NDIS_WAN_QUALITY;
typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef APTXWAVEFORMAT *NPAPTXWAVEFORMAT;
typedef ECHOWAVEFILTER *NPECHOWAVEFILTER;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
typedef ADPCMWAVEFORMAT *PADPCMWAVEFORMAT;
typedef  CRYPT_OID_INFO *PCCRYPT_OID_INFO;
typedef  DELEGATEITEMID *PCDELEGATEITEMID;
typedef  RAWINPUTDEVICE *PCRAWINPUTDEVICE;
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef BOOL ( *PFN_FREEDEFUSAGE)( char *pszUsageOID, struct _CRYPT_PROVIDER_DEFUSAGE *psDefUsage);
typedef enum _FT_MEMBER_STATE *PFT_MEMBER_STATE;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef KSIDENTIFIER *PKSPIN_INTERFACE;
typedef MPEG1WAVEFORMAT *PMPEG1WAVEFORMAT;
typedef PNS_SERVICE_INFOA PNS_SERVICE_INFO;
typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef enum __MIDL___MIDL_itf_shobjidl_0209_0002 PROPERTYUI_FLAGS;
typedef PSP_DRVINFO_DATA_V2 PSP_DRVINFO_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT;
typedef enum tagQACONTAINERFLAGS QACONTAINERFLAGS;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef void * RPC_CLIENT_ALLOC(size_t Size);
typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef enum _STORAGE_BUS_TYPE STORAGE_BUS_TYPE;
typedef enum _5BA8699F8741A720A1AB2749ED431340 SetupFileLogInfo;
typedef enum tag_WBEM_FLAVOR_TYPE WBEM_FLAVOR_TYPE;
typedef enum tag_WBEM_STATUS_TYPE WBEM_STATUS_TYPE;
typedef enum _34531D842D203BC4328A5673C26F0BE0 WMIDPREQUESTCODE;
typedef enum _WSAESETSERVICEOP WSAESETSERVICEOP;
typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
struct _CREATE_DISK_MBR {DWORD Signature;};
struct _CUSTOMSIZEPARAM {LONG dwOrder;LONG lMinVal;LONG lMaxVal;};
struct _D3DHAL_DP2WINFO {D3DVALUE dvWNear;D3DVALUE dvWFar;};
struct _D3DLIGHTINGCAPS {DWORD dwSize;DWORD dwCaps;DWORD dwLightingModel;DWORD dwNumLights;};
struct _D3DNTHAL_DP2EXT {DWORD dwExtToken;DWORD dwSize;};
struct _DMUS_INSTRUMENT {ULONG ulPatch;ULONG ulFirstRegionIdx;ULONG ulGlobalArtIdx;ULONG ulFirstExtCkIdx;ULONG ulCopyrightIdx;ULONG ulFlags;};
struct _DMUS_SYNTHSTATS {DWORD dwSize;DWORD dwValidStats;DWORD dwVoices;DWORD dwTotalCPU;DWORD dwCPUPerVoice;DWORD dwLostNotes;DWORD dwFreeMemory;int lPeakVolume;};
struct _DOCEVENT_ESCAPE {int iEscape;int cjInput;PVOID pvInData;};
struct _DSFXWavesReverb {FLOAT fInGain;FLOAT fReverbMix;FLOAT fReverbTime;FLOAT fHighFreqRTRatio;};
struct _DSKTLSYSTEMTIME {WORD wYear;WORD wMonth;WORD wDayOfWeek;WORD wDay;WORD wHour;WORD wMinute;WORD wSecond;WORD wMilliseconds;WORD wResult;};
struct _ENG_TIME_FIELDS {USHORT usYear;USHORT usMonth;USHORT usDay;USHORT usHour;USHORT usMinute;USHORT usSecond;USHORT usMilliseconds;USHORT usWeekday;};
struct _EXTSTACKTRACE32 {ULONG FramePointer;ULONG ProgramCounter;ULONG ReturnAddress;ULONG Args[4];};
struct _EXTSTACKTRACE64 {ULONG64 FramePointer;ULONG64 ProgramCounter;ULONG64 ReturnAddress;ULONG64 Args[4];};
struct _GET_TEB_ADDRESS {ULONGLONG Address;};
struct _MCDLOGICOPSTATE {ULONG logicOpMode;};
struct _MCDSTATE_PREFIX {ULONG state;ULONG size;};
struct _MIBICMPSTATS_EX {DWORD dwMsgs;DWORD dwErrors;DWORD rgdwTypeCount[256];};
struct _MIB_IPMCAST_OIF {DWORD dwOutIfIndex;DWORD dwNextHopAddr;DWORD dwReserved;DWORD dwReserved1;};
struct _PACKEDEVENTINFO {DWORD ulSize;DWORD ulNumEventsForLogFile;DWORD ulOffsets[];};
struct _PIPE_DIMENSIONS {KS_COMPRESSION AllocatorPin;KS_COMPRESSION MaxExpansionPin;KS_COMPRESSION EndPin;};
struct _PRINTER_INFO_8A {LPDEVMODEA pDevMode;};
struct _PRINTER_INFO_8W {LPDEVMODEW pDevMode;};
struct _PRINTER_INFO_9A {LPDEVMODEA pDevMode;};
struct _PRINTER_INFO_9W {LPDEVMODEW pDevMode;};
struct _QOS_TCP_TRAFFIC {QOS_OBJECT_HDR ObjectHdr;};
struct _RemotableHandle {int fContext;union _RemotableHandle____MIDL_IWinTypes_0009 u;};
struct _SIMULATE_CAPS_1 {DWORD dwLevel;DWORD dwPageOrderFlags;DWORD dwNumberOfCopies;DWORD dwCollate;DWORD dwNupOptions;};
struct _WST_BUFFER_LINE {BYTE Confidence;BYTE Bytes[42];};
struct channel_caps_tag {DWORD dwFlags;DWORD dwSrcRectXMod;DWORD dwSrcRectYMod;DWORD dwSrcRectWidthMod;DWORD dwSrcRectHeightMod;DWORD dwDstRectXMod;DWORD dwDstRectYMod;DWORD dwDstRectWidthMod;DWORD dwDstRectHeightMod;};
struct tagANIMATIONINFO {UINT cbSize;int iMinAnimate;};
struct tagCANDIDATEINFO {DWORD dwSize;DWORD dwCount;DWORD dwOffset[32];DWORD dwPrivateSize;DWORD dwPrivateOffset;};
struct tagCANDIDATELIST {DWORD dwSize;DWORD dwStyle;DWORD dwCount;DWORD dwSelection;DWORD dwPageStart;DWORD dwPageSize;DWORD dwOffset[1];};
struct tagENHMETARECORD {DWORD iType;DWORD nSize;DWORD dParm[1];};
struct tagFONTSIGNATURE {DWORD fsUsb[4];DWORD fsCsb[2];};
struct tagKBD_TYPE_INFO {DWORD dwVersion;DWORD dwType;DWORD dwSubType;};
struct tagNMLVCACHEHINT {NMHDR hdr;int iFrom;int iTo;};
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef BOOL ( *AVISAVECALLBACK)(int);
typedef enum tagApplicationType ApplicationType;
typedef  CRYPT_OID_INFO CCRYPT_OID_INFO;
typedef DWORD D3DMATRIXHANDLE;
typedef enum _D3DRESOURCETYPE D3DRESOURCETYPE;
typedef enum _D3DTEXTUREBLEND D3DTEXTUREBLEND;
typedef enum tagDCOM_CALL_STATE DCOM_CALL_STATE;
typedef DMUS_PORTPARAMS8 DMUS_PORTPARAMS;
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef DWORD EXECUTION_STATE;
struct EXT_API_VERSION {USHORT MajorVersion;USHORT MinorVersion;USHORT Revision;USHORT Reserved;};
typedef enum _FT_MEMBER_STATE FT_MEMBER_STATE;
typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef enum _FFAEC6EEC56F40EA545825A5F63342E7 KSALLOCATORMODE;
typedef enum _C43D2A6EFFDC6958F872464784E778EF KSEVENT_TVAUDIO;
typedef KSIDENTIFIER KSPIN_INTERFACE;
typedef enum _B4C4FC6252558A234733AE07E885CE6F KSPROPERTY_WAVE;
typedef enum _A82677F2D780EECC07262E494F367D1E KS_DVDCOPYSTATE;
typedef enum _0CCF2589EBE4C99CC2ECB8B07AE7CB21 KS_MPEG2Profile;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
typedef  DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef  DLGTEMPLATE *LPCDLGTEMPLATEW;
typedef  DS3DLISTENER *LPCDS3DLISTENER;
typedef  DSBUFFERDESC *LPCDSBUFFERDESC;
typedef  DSEFFECTDESC *LPCDSEFFECTDESC;
typedef  IN_ADDR_IPV6 *LPCIN_ADDR_IPV6;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
typedef  QOS_DESTADDR *LPCQOS_DESTADDR;
typedef  SHCOLUMNDATA *LPCSHCOLUMNDATA;
typedef  SHCOLUMNINFO *LPCSHCOLUMNINFO;
typedef  SHCOLUMNINIT *LPCSHCOLUMNINIT;
typedef  WAVEFORMATEX *LPCWAVEFORMATEX;
typedef D3DHAL_DP2EXT *LPD3DHAL_DP2EXT;
typedef DDHALDDRAWFNS *LPDDHALDDRAWFNS;
typedef DDHALMODEINFO *LPDDHALMODEINFO;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
typedef DMUS_PORTCAPS *LPDMUS_PORTCAPS;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
typedef DRMWAVEFORMAT *LPDRMWAVEFORMAT;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
typedef HEAPALIASINFO *LPHEAPALIASINFO;
typedef IUNKNOWN_LIST *LPIUNKNOWN_LIST;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
typedef LPDIRECTSOUND *LPLPDIRECTSOUND;
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
typedef DWORD *LPMONTHDAYSTATE;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
typedef LPPROTOCOL_INFOA LPPROTOCOL_INFO;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef enum __MIDL_IMonikerProp_0001 MONIKERPROPERTY;
struct NDIS_BPC_STATUS {ULONG ulStatusCategory;ULONG ulStatusType;ULONG ulcbStatus;ULONG rgulStatus;};
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef DRMWAVEFORMAT *NPDRMWAVEFORMAT;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef NS_SERVICE_INFOA NS_SERVICE_INFO;
typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef APTXWAVEFORMAT *PAPTXWAVEFORMAT;
typedef enum _PARTITION_STYLE PARTITION_STYLE;
typedef DDSURFACEDESC *PDD_SURFACEDESC;
typedef DELEGATEITEMID *PDELEGATEITEMID;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef void ( *PDX_IRQCALLBACK)(PDX_IRQDATA pIrqData);
typedef ECHOWAVEFILTER *PECHOWAVEFILTER;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef void ( *PEVENT_CALLBACK)(PEVENT_TRACE pEvent);
typedef FOLDERSETTINGS *PFOLDERSETTINGS;
typedef enum _E5E05FC88E8385A5216FCD37A95BAA87 *PKSPIN_DATAFLOW;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef  MIDL_STUB_DESC *PMIDL_STUB_DESC;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef enum _NDIS_BPC_ERROR *PNDIS_BPC_ERROR;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
typedef enum tagPOINTERINACTIVE POINTERINACTIVE;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
typedef WORD PRINTEROP_FLAGS;
typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
typedef enum _UDP_ENCAP_TYPE *PUDP_ENCAP_TYPE;
typedef ULARGE_INTEGER *PULARGE_INTEGER;
typedef LSA_UNICODE_STRING *PUNICODE_STRING;
typedef enum _WSAEcomparator *PWSAECOMPARATOR;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef enum _RPC_ASYNC_EVENT RPC_ASYNC_EVENT;
typedef RPC_STATUS ( *RPC_BLOCKING_FN)(void *hWnd, void *Context, void *hSyncEvent);
typedef ULONGLONG SAMPLE_POSITION;
typedef enum __MIDL_ISearchCommandExt_0001 SEARCH_FOR_TYPE;
typedef enum _4218CD2CD980A290FF820393F4F33E3B SHREGENUM_FLAGS;
typedef SP_DRVINFO_DATA_V2 SP_DRVINFO_DATA;
typedef WAVEFORMATEXTENSIBLE WAVEFORMATPCMEX;
typedef enum tag_WBEM_BATCH_TYPE WBEM_BATCH_TYPE;
typedef enum tag_WBEM_GENUS_TYPE WBEM_GENUS_TYPE;
typedef enum tag_WBEM_LOGIN_TYPE WBEM_LOGIN_TYPE;
typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
struct _CONNECTIONLIST {ULONG cbSize;ULONG cConnections;};
struct _CRYPT_URL_INFO {DWORD cbSize;DWORD dwSyncDeltaTime;DWORD cGroup;DWORD *rgcGroupEntry;};
struct _D3DCLIPSTATUS8 {DWORD ClipUnion;DWORD ClipIntersection;};
struct _D3DLINEPATTERN {WORD wRepeatFactor;WORD wLinePattern;};
struct _D3DLOCKED_RECT {INT Pitch;void *pBits;};
struct _D3DTEXTURELOAD {D3DTEXTUREHANDLE hDestTexture;D3DTEXTUREHANDLE hSrcTexture;};
struct _DD_SURFACE_INT {PDD_SURFACE_LOCAL lpLcl;};
struct _DLLVERSIONINFO {DWORD cbSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformID;};
struct _DMUS_MSCPARAMS {PERCENT ptDefaultPan;};
struct _DMUS_NOTERANGE {DWORD dwLowNote;DWORD dwHighNote;};
struct _DSFXCompressor {FLOAT fGain;FLOAT fAttack;FLOAT fRelease;FLOAT fThreshold;FLOAT fRatio;FLOAT fPredelay;};
struct _DSFXDistortion {FLOAT fGain;FLOAT fEdge;FLOAT fPostEQCenterFrequency;FLOAT fPostEQBandwidth;FLOAT fPreLowpassCutoff;};
struct _FAT_STATISTICS {DWORD CreateHits;DWORD SuccessfulCreates;DWORD FailedCreates;DWORD NonCachedReads;DWORD NonCachedReadBytes;DWORD NonCachedWrites;DWORD NonCachedWriteBytes;DWORD NonCachedDiskReads;DWORD NonCachedDiskWrites;};
struct _KSMPEGVID_RECT {ULONG StartX;ULONG StartY;ULONG EndX;ULONG EndY;};
struct _MCDENABLESTATE {ULONG enables;};
struct _MIB_ROUTESTATE {BOOL bRoutesSetToStack;};
struct _MSV1_0_AV_PAIR {USHORT AvId;USHORT AvLen;};
struct _PRINTER_INFO_3 {PSECURITY_DESCRIPTOR pSecurityDescriptor;};
struct _PRINTER_INFO_6 {DWORD dwStatus;};
struct _SCONTEXT_QUEUE {unsigned int NumberOfObjects;NDR_SCONTEXT *ArrayOfObjects;};
struct _SERVICE_STATUS {DWORD dwServiceType;DWORD dwCurrentState;DWORD dwControlsAccepted;DWORD dwWin32ExitCode;DWORD dwServiceSpecificExitCode;DWORD dwCheckPoint;DWORD dwWaitHint;};
struct _SESSION_BUFFER {UCHAR lsn;UCHAR state;UCHAR local_name[16];UCHAR remote_name[16];UCHAR rcvs_outstanding;UCHAR sends_outstanding;};
struct _SESSION_HEADER {UCHAR sess_name;UCHAR num_sess;UCHAR rcv_dg_outstanding;UCHAR rcv_any_outstanding;};
struct _UFF_FILEHEADER {DWORD dwSignature;DWORD dwVersion;DWORD dwSize;DWORD nFonts;DWORD nGlyphSets;DWORD nVarData;DWORD offFontDir;DWORD dwFlags;DWORD dwReserved[4];};
struct _nlsversioninfo {DWORD dwNLSVersionInfoSize;DWORD dwNLSVersion;DWORD dwDefinedVersion;};
struct tagBANDSITEINFO {DWORD dwMask;DWORD dwState;DWORD dwStyle;};
struct tagHELPWININFOA {int wStructSize;int x;int y;int dx;int dy;int wMax;CHAR rgchMember[2];};
struct tagICEXYZTRIPLE {CIEXYZ ciexyzRed;CIEXYZ ciexyzGreen;CIEXYZ ciexyzBlue;};
struct tagPALETTEENTRY {BYTE peRed;BYTE peGreen;BYTE peBlue;BYTE peFlags;};
typedef enum _D3DZBUFFERTYPE D3DZBUFFERTYPE;
typedef enum _DETECTION_TYPE DETECTION_TYPE;
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef DMUS_CLOCKINFO8 DMUS_CLOCKINFO;
typedef enum _8704B174BAB6852299F1B66FD71C21B2 DMUS_CLOCKTYPE;
typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef enum __MIDL___MIDL_itf_shobjidl_0202_0002 FOLDERVIEWMODE;
typedef enum _IDL_CS_CONVERT IDL_CS_CONVERT;
typedef enum _1D78DD8871C05E6FD7D3820402F49BC1 IF_OPER_STATUS;
typedef enum _E5E05FC88E8385A5216FCD37A95BAA87 KSPIN_DATAFLOW;
typedef enum _2811190B5E8A43AD046E3AEC6C4B4077 KSPROPERTY_AC3;
typedef enum _54AE5E5F19366D8071D858EB4F56617A KSPROPERTY_AEC;
typedef enum _6A58EEAD8E4C7DF4F80FA7C6A74A3704 KSPROPERTY_PIN;
typedef ADPCMCOEFSET *LPADPCMCOEFSET;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
typedef  DSFXFlanger *LPCDSFXFlanger;
typedef  DSFXParamEq *LPCDSFXParamEq;
typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
typedef  RSVP_POLICY *LPCRSVP_POLICY;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
typedef HACMDRIVERID *LPHACMDRIVERID;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
typedef LPNETRESOURCE2A LPNETRESOURCE2;
typedef LPOPENCARDNAMEA LPOPENCARDNAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
typedef PROCESS_LIST *LPPROCESS_LIST;
typedef LPREGISTERWORDA LPREGISTERWORD;
typedef LPSERVICE_INFOA LPSERVICE_INFO;
typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef void ( *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef enum _NDIS_BPC_ERROR NDIS_BPC_ERROR;
typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef ADPCMCOEFSET *NPADPCMCOEFSET;
typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
typedef VARIANT_BOOL OLE_CANCELBOOL;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef  CERT_CONTEXT *PCCERT_CONTEXT;
typedef  COMBOBOXEXITEMA *PCCOMBOEXITEMA;
typedef  COMBOBOXEXITEMW *PCCOMBOEXITEMW;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
typedef DRMWAVEFORMAT *PDRMWAVEFORMAT;
typedef void *( *PFN_CMSG_ALLOC)(size_t cb);
typedef void ( *PFN_CRYPT_FREE)(LPVOID pv);
typedef LARGE_INTEGER *PLARGE_INTEGER;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef PPROTOCOL_INFOA PPROTOCOL_INFO;
typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PRINTER_INFO_8A PRINTER_INFO_8;
typedef PRINTER_INFO_9A PRINTER_INFO_9;
typedef enum tagPROPPAGESTATUS PROPPAGESTATUS;
typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA;
typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW;
typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
typedef ULONG Priority_802_3;
typedef LONGLONG REFERENCE_TIME;
typedef enum _SC_ACTION_TYPE SC_ACTION_TYPE;
typedef enum _SC_STATUS_TYPE SC_STATUS_TYPE;
typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef enum _6FB945646DCDC979B45A0864DF90F90A SHREGDEL_FLAGS;
typedef enum _UDP_ENCAP_TYPE UDP_ENCAP_TYPE;
typedef LSA_UNICODE_STRING UNICODE_STRING;
typedef enum __MIDL___MIDL_itf_wiavideo_0000_0001 WIAVIDEO_STATE;
typedef enum _WSAEcomparator WSAECOMPARATOR;
typedef WSANSCLASSINFOA WSANSCLASSINFO;
struct _AD_GUARANTEED {ULONG CTotal;ULONG DTotal;ULONG CSum;ULONG DSum;};
struct _BDA_PID_UNMAP {ULONG ulcPIDs;ULONG aulPIDs[1];};
struct _BLENDFUNCTION {BYTE BlendOp;BYTE BlendFlags;BYTE SourceConstantAlpha;BYTE AlphaFormat;};
struct _BYTE_SIZEDARR {unsigned int clSize;byte *pData;};
struct _D3DCLIPSTATUS {DWORD dwFlags;DWORD dwStatus;float minx;float maxx;float miny;float maxy;float minz;float maxz;};
struct _D3DHAL_DP2EXT {DWORD dwExtToken;DWORD dwSize;};
struct _D3DLOCKED_BOX {INT RowPitch;INT SlicePitch;void *pBits;};
struct _D3DMATRIXLOAD {D3DMATRIXHANDLE hDestMatrix;D3DMATRIXHANDLE hSrcMatrix;};
struct _DDLOCKOUTINFO {ULONG_PTR dwSurfacePtr;};
struct _EXTSTACKTRACE {ULONG FramePointer;ULONG ProgramCounter;ULONG ReturnAddress;ULONG Args[4];};
struct _EXTTEXTMETRIC {short emSize;short emPointSize;short emOrientation;short emMasterHeight;short emMinScale;short emMaxScale;short emMasterUnits;short emCapHeight;short emXHeight;short emLowerCaseAscent;short emLowerCaseDescent;short emSlant;short emSuperScript;short emSubScript;short emSuperScriptSize;short emSubScriptSize;short emUnderlineOffset;short emUnderlineWidth;short emDoubleUpperUnderlineOffset;short emDoubleLowerUnderlineOffset;short emDoubleUpperUnderlineWidth;short emDoubleLowerUnderlineWidth;short emStrikeOutOffset;short emStrikeOutWidth;WORD emKernPairs;WORD emKernTracks;};
struct _GDI_NONREMOTE {int fContext;union _GDI_NONREMOTE____MIDL_IWinTypes_0002 u;};
struct _GRADIENT_RECT {ULONG UpperLeft;ULONG LowerRight;};
struct _IUNKNOWN_LIST {struct _IUNKNOWN_LIST *lpLink;GUID *lpGuid;IUnknown *lpIUnknown;};
struct _MCDBLENDSTATE {ULONG blendSrc;ULONG blendDst;};
struct _MIB_IPADDRROW {DWORD dwAddr;DWORD dwIndex;DWORD dwMask;DWORD dwBCastAddr;DWORD dwReasmSize;unsigned short unused1;unsigned short wType;};
struct _PROCESSORINFO {USHORT Processor;USHORT NumberProcessors;};
struct _SHQUERYRBINFO {DWORD cbSize;long long i64Size;long long i64NumItems;};
struct _userHMETAFILE {int fContext;union _userHMETAFILE____MIDL_IWinTypes_0004 u;};
struct tagCONNECTDATA {IUnknown *pUnk;DWORD dwCookie;};
struct tagCURSORSHAPE {int xHotSpot;int yHotSpot;int cx;int cy;int cbWidth;BYTE Planes;BYTE BitsPixel;};
struct tagHANDLETABLE {HGDIOBJ objectHandle[1];};
struct tagKERNINGPAIR {WORD wFirst;WORD wSecond;int iKernAmount;};
struct tagKS_AMVPSIZE {DWORD dwWidth;DWORD dwHeight;};
struct tagNMIPADDRESS {NMHDR hdr;int iField;int iValue;};
struct tagRemHPALETTE {unsigned int cbData;byte data[1];};
struct tagSTYLESTRUCT {DWORD styleOld;DWORD styleNew;};
struct wavefilter_tag {DWORD cbStruct;DWORD dwFilterTag;DWORD fdwFilter;DWORD dwReserved[5];};
typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef wireSAFEARRAY *wirePSAFEARRAY;
typedef enum tagACTIVATEFLAGS ACTIVATEFLAGS;
typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef enum __MIDL___MIDL_itf_shobjidl_0211_0002 CATSORT_FLAGS;
typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef DWORD D3DCOLORMODEL;
typedef enum _D3DSWAPEFFECT D3DSWAPEFFECT;
typedef enum _D3DVERTEXTYPE D3DVERTEXTYPE;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef DRIVER_INFO_4A DRIVER_INFO_4;
typedef DRIVER_INFO_5A DRIVER_INFO_5;
typedef DRIVER_INFO_6A DRIVER_INFO_6;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef enum _98FA3A45888AB38274FC20DD306BA119 KSEVENT_TUNER;
typedef enum _4B933B38561F3202E8B681F2D4CA4B1B KS_MPEG2Level;
typedef LONG LCSGAMUTMATCH;
typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef  DS3DBUFFER *LPCDS3DBUFFER;
typedef  DSFXChorus *LPCDSFXChorus;
typedef  DSFXGargle *LPCDSFXGargle;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
typedef  ITEMIDLIST *LPCITEMIDLIST;
typedef  SCROLLINFO *LPCSCROLLINFO;
typedef  SHCOLUMNID *LPCSHCOLUMNID;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
typedef DDGAMMARAMP *LPDDGAMMARAMP;
typedef DDOVERLAYFX *LPDDOVERLAYFX;
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
typedef LPFINDREPLACEA LPFINDREPLACE;
typedef LPFORM_INFO_1A LPFORM_INFO_1;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
typedef LPHELPWININFOA LPHELPWININFO;
typedef LPICONMETRICSA LPICONMETRICS;
typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
typedef LPNETRESOURCEA LPNETRESOURCE;
typedef LPPORT_INFO_1A LPPORT_INFO_1;
typedef LPPORT_INFO_2A LPPORT_INFO_2;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
typedef VIDEOMEMORY *LPVIDEOMEMORY;
typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef MONITORINFOEXA MONITORINFOEX;
typedef DWORD MONTHDAYSTATE;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef enum tagOLEGETMONIKER OLEGETMONIKER;
typedef enum tagOLEVERBATTRIB OLEVERBATTRIB;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef PVOID PACCESS_TOKEN;
typedef ADPCMCOEFSET *PADPCMCOEFSET;
typedef enum _938A3B861D25DE16265A89B1C43AD81C *PBDA_EVENT_ID;
typedef PCABINET_INFO_A PCABINET_INFO;
typedef  CRL_CONTEXT *PCCRL_CONTEXT;
typedef  CTL_CONTEXT *PCCTL_CONTEXT;
typedef enum _ELEMENT_TYPE *PELEMENT_TYPE;
typedef HACMDRIVERID *PHACMDRIVERID;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;
typedef KSIDENTIFIER *PKSPIN_MEDIUM;
typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef DWORD  PM_CLOSE_PROC();
typedef PNETRESOURCE2A PNETRESOURCE2;
typedef POPENCARDNAMEA POPENCARDNAME;
typedef enum _0FC989869F227A36D749990E523E5F04 *PPOWER_ACTION;
typedef PREGISTERWORDA PREGISTERWORD;
typedef enum tagPROPBAG2_TYPE PROPBAG2_TYPE;
typedef PROTOCOL_INFOA PROTOCOL_INFO;
typedef PSERVICE_INFOA PSERVICE_INFO;
typedef enum _SID_NAME_USE *PSID_NAME_USE;
typedef PSOURCE_MEDIA_A PSOURCE_MEDIA;
typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef TEXTMETRICW TEXTMETRICOLE;
typedef DWORD_BLOB *UP_DWORD_BLOB;
typedef enum tagUSERCLASSTYPE USERCLASSTYPE;
struct _AVIFILEINFOA {DWORD dwMaxBytesPerSec;DWORD dwFlags;DWORD dwCaps;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwScale;DWORD dwRate;DWORD dwLength;DWORD dwEditCount;char szFileType[64];};
struct _BPC_FILETIME {ULONG dwLowDateTime;ULONG dwHighDateTime;};
struct _COMMTIMEOUTS {DWORD ReadIntervalTimeout;DWORD ReadTotalTimeoutMultiplier;DWORD ReadTotalTimeoutConstant;DWORD WriteTotalTimeoutMultiplier;DWORD WriteTotalTimeoutConstant;};
struct _D3DGAMMARAMP {WORD red[256];WORD green[256];WORD blue[256];};
struct _D3DMATERIAL8 {D3DCOLORVALUE Diffuse;D3DCOLORVALUE Ambient;D3DCOLORVALUE Specular;D3DCOLORVALUE Emissive;float Power;};
struct _D3DVIEWPORT8 {DWORD X;DWORD Y;DWORD Width;DWORD Height;float MinZ;float MaxZ;};
struct _DDGETIRQINFO {DWORD dwFlags;};
struct _DDKERNELCAPS {DWORD dwSize;DWORD dwCaps;DWORD dwIRQCaps;};
struct _DDLOCKININFO {LPDDSURFACEDATA lpSurfaceData;};
struct _IN_ADDR_IPV6 {UCHAR Addr[16];};
struct _IOSPACE_EX32 {ULONG Address;ULONG Length;ULONG Data;ULONG InterfaceType;ULONG BusNumber;ULONG AddressSpace;};
struct _KS_DVD_YCrCb {UCHAR Reserved;UCHAR Y;UCHAR Cr;UCHAR Cb;};
struct _MCDHINTSTATE {ULONG perspectiveCorrectionHint;ULONG pointSmoothHint;ULONG lineSmoothHint;ULONG polygonSmoothHint;ULONG fogHint;};
struct _MIBICMPSTATS {DWORD dwMsgs;DWORD dwErrors;DWORD dwDestUnreachs;DWORD dwTimeExcds;DWORD dwParmProbs;DWORD dwSrcQuenchs;DWORD dwRedirects;DWORD dwEchos;DWORD dwEchoReps;DWORD dwTimestamps;DWORD dwTimestampReps;DWORD dwAddrMasks;DWORD dwAddrMaskReps;};
struct _MIB_IFNUMBER {DWORD dwValue;};
struct _MIB_PROXYARP {DWORD dwAddress;DWORD dwMask;DWORD dwIfIndex;};
struct _MIB_TCPSTATS {DWORD dwRtoAlgorithm;DWORD dwRtoMin;DWORD dwRtoMax;DWORD dwMaxConn;DWORD dwActiveOpens;DWORD dwPassiveOpens;DWORD dwAttemptFails;DWORD dwEstabResets;DWORD dwCurrEstab;DWORD dwInSegs;DWORD dwOutSegs;DWORD dwRetransSegs;DWORD dwInErrs;DWORD dwOutRsts;DWORD dwNumConns;};
struct _MIB_UDPSTATS {DWORD dwInDatagrams;DWORD dwNoPorts;DWORD dwInErrors;DWORD dwOutDatagrams;DWORD dwNumAddrs;};
struct _PROCESS_LIST {struct _PROCESS_LIST *lpLink;DWORD dwProcessId;DWORD dwRefCnt;DWORD dwAlphaDepth;DWORD dwZDepth;};
struct _SHELLDETAILS {int fmt;int cxChar;STRRET str;};
struct _TOKEN_ORIGIN {LUID OriginatingLogonSession;};
struct _userHPALETTE {int fContext;union _userHPALETTE____MIDL_IWinTypes_0008 u;};
struct joyinfoex_tag {DWORD dwSize;DWORD dwFlags;DWORD dwXpos;DWORD dwYpos;DWORD dwZpos;DWORD dwRpos;DWORD dwUpos;DWORD dwVpos;DWORD dwButtons;DWORD dwButtonNumber;DWORD dwPOV;DWORD dwReserved1;DWORD dwReserved2;};
struct midievent_tag {DWORD dwDeltaTime;DWORD dwStreamID;DWORD dwEvent;DWORD dwParms[1];};
struct tagCSPLATFORM {DWORD dwPlatformId;DWORD dwVersionHi;DWORD dwVersionLo;DWORD dwProcessorArch;};
struct tagKS_RGBQUAD {BYTE rgbBlue;BYTE rgbGreen;BYTE rgbRed;BYTE rgbReserved;};
struct tagMINMAXINFO {POINT ptReserved;POINT ptMaxSize;POINT ptMaxPosition;POINT ptMinTrackSize;POINT ptMaxTrackSize;};
struct tagNMLVSCROLL {NMHDR hdr;int dx;int dy;};
struct tagRemHBITMAP {unsigned int cbData;byte data[1];};
struct tagRemHGLOBAL {int fNullHGlobal;unsigned int cbData;byte data[1];};
struct tagSCROLLINFO {UINT cbSize;UINT fMask;int nMin;int nMax;UINT nPage;int nPos;int nTrackPos;};
typedef userHMETAFILE *wireHMETAFILE;
typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef enum _tagACENUMOPTION ACENUMOPTION;
typedef enum _938A3B861D25DE16265A89B1C43AD81C BDA_EVENT_ID;
typedef RECT BORDERWIDTHS;
typedef CABINET_INFO_A CABINET_INFO;
typedef enum tagCOWAIT_FLAGS COWAIT_FLAGS;
typedef CREATESTRUCTA CREATESTRUCT;
typedef LPVOID CSECT_HANDLE;
typedef enum _D3DBASISTYPE D3DBASISTYPE;
typedef enum _D3DLIGHTTYPE D3DLIGHTTYPE;
typedef enum _D3DORDERTYPE D3DORDERTYPE;
typedef enum _D3DSHADEMODE D3DSHADEMODE;
typedef enum _D3DSTENCILOP D3DSTENCILOP;
typedef enum _D3DTEXTUREOP D3DTEXTUREOP;
typedef enum tagDISCARDCACHE DISCARDCACHE;
typedef enum tagExtentMode DVEXTENTMODE;
typedef enum _ELEMENT_TYPE ELEMENT_TYPE;
typedef WORD FILEOP_FLAGS;
typedef enum _D399BD8DDA7D494A1E217AB8186E520D FRAMING_PROP;
typedef BYTE GAMMA_TABLES[2][256];
typedef HANDLE GLOBALHANDLE;
typedef HIGHCONTRASTA HIGHCONTRAST;
typedef enum _3A6E283929B5F392AC4E4FEBB8743BCE IP_DAD_STATE;
typedef KSIDENTIFIER KSPIN_MEDIUM;
typedef enum _B8842F298E38803458C077776FB4B251 KS_AMVP_MODE;
typedef enum _C9C41CE7F7AB140BE1C872069B92FC11 LATENCY_TIME;
struct LIST_ENTRY32 {DWORD Flink;DWORD Blink;};
struct LIST_ENTRY64 {ULONGLONG Flink;ULONGLONG Blink;};
typedef u_long LM_BAUD_RATE;
typedef ATTACHLIST *LPATTACHLIST;
typedef LPCHOOSEFONTA LPCHOOSEFONT;
typedef DCISURFACEINFO *LPDCIPRIMARY;
typedef DDBLTBATCH *LPDDBLTBATCH;
typedef DDCAPS_DX1 *LPDDCAPS_DX1;
typedef DDCAPS_DX3 *LPDDCAPS_DX3;
typedef DDCAPS_DX5 *LPDDCAPS_DX5;
typedef DDCAPS_DX6 *LPDDCAPS_DX6;
typedef DDCAPS_DX7 *LPDDCAPS_DX7;
typedef DDCOLORKEY *LPDDCOLORKEY;
typedef DDCORECAPS *LPDDCORECAPS;
typedef WINDOWS_DEVICELIST *LPDEVICELIST;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
typedef LPDOC_INFO_3A LPDOC_INFO_3;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
typedef HACMDRIVER *LPHACMDRIVER;
typedef HACMSTREAM *LPHACMSTREAM;
typedef ITEMIDLIST *LPITEMIDLIST;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
typedef LPMIXERCAPS2A LPMIXERCAPS2;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
typedef WORD *LPPATCHARRAY;
typedef LPPRINTDLGEXA LPPRINTDLGEX;
typedef LPSERIALKEYSA LPSERIALKEYS;
typedef LPTBBUTTON LPTBBUTTONSB;
typedef LPTEXTMETRICA LPTEXTMETRIC;
typedef VARIANT *LPVARIANTARG;
typedef VIDMEMINFO *LPVIDMEMINFO;
typedef WAVEFILTER *LPWAVEFILTER;
typedef LPWAVEINCAPSA LPWAVEINCAPS;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
typedef int ( *LPWSPCLEANUP)(LPINT lpErrno);
typedef ENUMRECTS MCDENUMRECTS;
typedef MENUITEMINFOA MENUITEMINFO;
typedef MENUTEMPLATEA MENUTEMPLATE;
typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
typedef MIXERCONTROLA MIXERCONTROL;
typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef MULTIKEYHELPA MULTIKEYHELP;
typedef ULONG NDIS_VLAN_ID;
typedef NETRESOURCE2A NETRESOURCE2;
typedef DWORD NLS_FUNCTION;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef WAVEFILTER *NPWAVEFILTER;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef enum _72442BC1633A72B4A848039868482DB7 OLE_TRISTATE;
typedef OPENCARDNAMEA OPENCARDNAME;
typedef OPENFILENAMEA OPENFILENAME;
typedef PAGESETUPDLGA PAGESETUPDLG;
typedef CONVCONTEXT *PCONVCONTEXT;
typedef PCREDUI_INFOA PCREDUI_INFO;
typedef DD_MORECAPS *PDD_MORECAPS;
typedef DETAILSINFO *PDETAILSINFO;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef HANDLE *PHCRYPTASYNC;
typedef PHELPWININFOA PHELPWININFO;
typedef PICONMETRICSA PICONMETRICS;
typedef IO_COUNTERS *PIO_COUNTERS;
typedef PMIDIINCAPS2A PMIDIINCAPS2;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef enum _NDIS_MEDIUM *PNDIS_MEDIUM;
typedef enum _0FC989869F227A36D749990E523E5F04 POWER_ACTION;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;
typedef ULONG64 *PTRACEHANDLE;
typedef PWAVEINCAPS2A PWAVEINCAPS2;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef REGISTERWORDA REGISTERWORD;
typedef ULONG_PTR SCARDCONTEXT;
typedef enum _SC_ENUM_TYPE SC_ENUM_TYPE;
typedef SERVICE_INFOA SERVICE_INFO;
typedef enum _B6084D6A0EEB0FD386ED58F84822BF64 SE_TECHNIQUE;
typedef enum _SID_NAME_USE SID_NAME_USE;
typedef SOURCE_MEDIA_A SOURCE_MEDIA;
typedef enum tagSTDMSHLFLAGS STDMSHLFLAGS;
typedef enum __MIDL___MIDL_itf_shobjidl_0202_0005 SVUIA_STATUS;
typedef enum tagShutdownType ShutdownType;
typedef BYTE_BLOB *UP_BYTE_BLOB;
typedef WORD_BLOB *UP_WORD_BLOB;
typedef enum __MIDL_IBindStatusCallback_0004 URL_ENCODING;
typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
typedef BYTE *WBEM_128BITS;
typedef VARIANT WBEM_VARIANT;
typedef enum tag_WMI_OBJ_TEXT WMI_OBJ_TEXT;
typedef enum tagXMLEMEM_TYPE XMLELEM_TYPE;
struct _AFPROTOCOLS {INT iAddressFamily;INT iProtocol;};
struct _D3DPrimCaps {DWORD dwSize;DWORD dwMiscCaps;DWORD dwRasterCaps;DWORD dwZCmpCaps;DWORD dwSrcBlendCaps;DWORD dwDestBlendCaps;DWORD dwAlphaCmpCaps;DWORD dwShadeCaps;DWORD dwTextureCaps;DWORD dwTextureFilterCaps;DWORD dwTextureBlendCaps;DWORD dwTextureAddressCaps;DWORD dwStippleWidth;DWORD dwStippleHeight;};
struct _DDGAMMARAMP {WORD red[256];WORD green[256];WORD blue[256];};
struct _DD_MORECAPS {DWORD dwSize;DWORD dwAlphaCaps;DWORD dwSVBAlphaCaps;DWORD dwVSBAlphaCaps;DWORD dwSSBAlphaCaps;DWORD dwFilterCaps;DWORD dwSVBFilterCaps;DWORD dwVSBFilterCaps;DWORD dwSSBFilterCaps;};
struct _DMUS_WAVEDL {ULONG cbWaveData;};
struct _DSFXParamEq {FLOAT fCenter;FLOAT fBandwidth;FLOAT fGain;};
struct _IO_COUNTERS {ULONGLONG ReadOperationCount;ULONGLONG WriteOperationCount;ULONGLONG OtherOperationCount;ULONGLONG ReadTransferCount;ULONGLONG WriteTransferCount;ULONGLONG OtherTransferCount;};
struct _MCDVIEWPORT {MCDFLOAT xScale;MCDFLOAT xCenter;MCDFLOAT yScale;MCDFLOAT yCenter;MCDFLOAT zScale;MCDFLOAT zCenter;};
struct _MIBICMPINFO {MIBICMPSTATS icmpInStats;MIBICMPSTATS icmpOutStats;};
struct _MIB_BEST_IF {DWORD dwDestAddr;DWORD dwIfIndex;};
struct _MIB_ICMP_EX {MIBICMPSTATS_EX icmpInStats;MIBICMPSTATS_EX icmpOutStats;};
struct _MIB_IPSTATS {DWORD dwForwarding;DWORD dwDefaultTTL;DWORD dwInReceives;DWORD dwInHdrErrors;DWORD dwInAddrErrors;DWORD dwForwDatagrams;DWORD dwInUnknownProtos;DWORD dwInDiscards;DWORD dwInDelivers;DWORD dwOutRequests;DWORD dwRoutingDiscards;DWORD dwOutDiscards;DWORD dwOutNoRoutes;DWORD dwReasmTimeout;DWORD dwReasmReqds;DWORD dwReasmOks;DWORD dwReasmFails;DWORD dwFragOks;DWORD dwFragFails;DWORD dwFragCreates;DWORD dwNumIf;DWORD dwNumAddr;DWORD dwNumRoutes;};
struct _NAME_BUFFER {UCHAR name[16];UCHAR name_num;UCHAR name_flags;};
struct _tagDATAINFO {ULONG ulTotalSize;ULONG ulavrPacketSize;ULONG ulConnectSpeed;ULONG ulProcessorSpeed;};
struct _tagDATETIME {WORD year;WORD month;WORD day;WORD hour;WORD min;WORD sec;};
struct _userHBITMAP {int fContext;union _userHBITMAP____MIDL_IWinTypes_0007 u;};
struct _userHGLOBAL {int fContext;union _userHGLOBAL____MIDL_IWinTypes_0003 u;};
struct tagABORTPATH {EMR emr;};
struct tagBIND_OPTS {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;};
struct tagEMRFORMAT {DWORD dSignature;DWORD nVersion;DWORD cbData;DWORD offData;};
struct tagGUIDELINE {DWORD dwSize;DWORD dwLevel;DWORD dwIndex;DWORD dwStrLen;DWORD dwStrOffset;DWORD dwPrivateSize;DWORD dwPrivateOffset;};
struct tagPAGERANGE {LONG nFromPage;LONG nToPage;};
struct tagRASPPPCCP {DWORD dwSize;DWORD dwError;DWORD dwCompressionAlgorithm;DWORD dwOptions;DWORD dwServerCompressionAlgorithm;DWORD dwServerOptions;};
struct tagRGBTRIPLE {BYTE rgbtBlue;BYTE rgbtGreen;BYTE rgbtRed;};
struct timecaps_tag {UINT wPeriodMin;UINT wPeriodMax;};
typedef userHPALETTE *wireHPALETTE;
typedef DWORD ACCESS_MASK;
typedef DWORD APARTMENTID;
typedef CHOOSECOLORA CHOOSECOLOR;
typedef CREDUI_INFOA CREDUI_INFO;
typedef CURRENCYFMTA CURRENCYFMT;
typedef enum _D3DFILLMODE D3DFILLMODE;
typedef UINT DI_FUNCTION;
typedef enum tagDOMNodeType DOMNodeType;
typedef ENUMLOGFONTA ENUMLOGFONT;
typedef FINDREPLACEA FINDREPLACE;
typedef enum __MIDL___MIDL_itf_shobjidl_0202_0001 FOLDERFLAGS;
typedef FORM_INFO_1A FORM_INFO_1;
typedef GCP_RESULTSA GCP_RESULTS;
typedef HANDLE HCRYPTASYNC;
typedef HELPWININFOA HELPWININFO;
typedef DWORD HH_INFOTYPE;
typedef ICONMETRICSA ICONMETRICS;
typedef HANDLE LOCALHANDLE;
typedef  DSCBCAPS *LPCDSCBCAPS;
typedef  DSCFXAec *LPCDSCFXAec;
typedef  DSFXEcho *LPCDSFXEcho;
typedef  MENUINFO *LPCMENUINFO;
typedef  MMCKINFO *LPCMMCKINFO;
typedef  MMIOINFO *LPCMMIOINFO;
typedef  SHITEMID *LPCSHITEMID;
typedef  TBBUTTON *LPCTBBUTTON;
typedef D3DVECTOR *LPD3DVECTOR;
typedef DDHALINFO *LPDDHALINFO;
typedef DWORD (*LPFN_NSPAPI)(void);
typedef HEAPALIAS *LPHEAPALIAS;
typedef HMIDISTRM *LPHMIDISTRM;
typedef HMIXEROBJ *LPHMIXEROBJ;
typedef PLDT_ENTRY LPLDT_ENTRY;
typedef LPMIXERCAPSA LPMIXERCAPS;
typedef LPMIXERLINEA LPMIXERLINE;
typedef LPNUMBERFMTA LPNUMBERFMT;
typedef SAFEARRAY *LPSAFEARRAY;
typedef SC_HANDLE *LPSC_HANDLE;
typedef TPMPARAMS *LPTPMPARAMS;
typedef int ( *LPWSPSELECT)(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,  struct timeval *timeout, LPINT lpErrno);
typedef UINT MCIDEVICEID;
typedef MIDIINCAPS2A MIDIINCAPS2;
typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef enum _96F6A40AF266BA3D986193CAEF201799 MSV1_0_AVID;
typedef enum _NDIS_MEDIUM NDIS_MEDIUM;
typedef NETRESOURCEA NETRESOURCE;
typedef enum _tagOIBDG_FLAGS OIBDG_FLAGS;
typedef enum tagOLELINKBIND OLELINKBIND;
typedef ACE_HEADER *PACE_HEADER;
typedef enum _tagPARSEACTION PARSEACTION;
typedef PCREDENTIALA PCREDENTIAL;
typedef PSecHandle PCtxtHandle;
typedef WINDOWS_DEVICELIST *PDEVICELIST;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef PDOC_INFO_3A PDOC_INFO_3;
typedef enum tagPENDINGTYPE PENDINGTYPE;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef HACMDRIVER *PHACMDRIVER;
typedef HACMSTREAM *PHACMSTREAM;
typedef enum _31EF7763C4AEC8DD07C218DFAFDEDAB8 *PICMP4_TYPE;
typedef enum _682EAAD0F97AB0EDCAD8B026B6112555 *PICMP6_TYPE;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef KSIDENTIFIER *PKSPROPERTY;
typedef PVOID *PLSA_HANDLE;
typedef enum _MEDIA_TYPE *PMEDIA_TYPE;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef PMIXERCAPS2A PMIXERCAPS2;
typedef PORT_INFO_1A PORT_INFO_1;
typedef PORT_INFO_2A PORT_INFO_2;
typedef PORT_INFO_3A PORT_INFO_3;
typedef enum _0AEECC1A63E1B2F73D11FBA74082B60B PROXY_PHASE;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef WAVEFILTER *PWAVEFILTER;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef PWMIREGGUIDW PWMIREGGUID;
typedef PWMIREGINFOW PWMIREGINFO;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef enum _tagQUERYOPTION QUERYOPTION;
struct RASCTRYINFO {DWORD dwSize;DWORD dwCountryID;DWORD dwNextCountryID;DWORD dwCountryCode;DWORD dwCountryNameOffset;};
typedef ULONGLONG SAMPLE_TIME;
typedef ULONG_PTR SCARDHANDLE;
typedef enum _EAACB91A6EC543964C9E2DF086A673AD SCOPE_LEVEL;
typedef ULONG SERVICETYPE;
typedef DWORD SHCOLSTATEF;
typedef GUID SHELLVIEWID;
typedef SOUNDSENTRYA SOUNDSENTRY;
typedef STARTUPINFOA STARTUPINFO;
typedef enum tagSTREAM_SEEK STREAM_SEEK;
typedef enum tagSTRRET_TYPE STRRET_TYPE;
typedef ULONG64 TRACEHANDLE;
typedef enum tagURLTEMPLATE URLTEMPLATE;
typedef WAVEINCAPS2A WAVEINCAPS2;
typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef enum tag_WBEM_LIMITS WBEM_LIMITS;
typedef WSAQUERYSETA WSAQUERYSET;
typedef enum tagXFORMCOORDS XFORMCOORDS;
struct _ATTACHLIST {DWORD dwFlags;struct _ATTACHLIST *lpLink;struct _DDRAWI_DDRAWSURFACE_LCL *lpAttached;struct _DDRAWI_DDRAWSURFACE_INT *lpIAttached;};
struct _DDCOLORKEY {DWORD dwColorSpaceLowValue;DWORD dwColorSpaceHighValue;};
struct _DLSVERSION {DWORD dwVersionMS;DWORD dwVersionLS;};
struct _DSFXGargle {DWORD dwRateHz;DWORD dwWaveShape;};
struct _DX_IRQDATA {DWORD dwIrqFlags;};
struct _IOSPACE_EX {ULONG Address;ULONG Length;ULONG Data;ULONG InterfaceType;ULONG BusNumber;ULONG AddressSpace;};
struct _ITEMIDLIST {SHITEMID mkid;};
struct _JOB_INFO_3 {DWORD JobId;DWORD NextJobId;DWORD Reserved;};
struct _KS_DVD_YUV {UCHAR Reserved;UCHAR Y;UCHAR V;UCHAR U;};
struct _MCDBUFFERS {MCDBUF mcdFrontBuf;MCDBUF mcdBackBuf;MCDBUF mcdDepthBuf;};
struct _MIB_TCPROW {DWORD dwState;DWORD dwLocalAddr;DWORD dwLocalPort;DWORD dwRemoteAddr;DWORD dwRemotePort;};
struct _MIB_UDPROW {DWORD dwLocalAddr;DWORD dwLocalPort;};
struct _MIDILOCALE {ULONG ulBank;ULONG ulInstrument;};
struct _POINTFLOAT {FLOAT x;FLOAT y;};
struct _SFV_CREATE {UINT cbSize;IShellFolder *pshf;IShellView *psvOuter;IShellFolderViewCB *psfvcb;};
struct _SMALL_RECT {SHORT Left;SHORT Top;SHORT Right;SHORT Bottom;};
struct _SYSTEMTIME {WORD wYear;WORD wMonth;WORD wDayOfWeek;WORD wDay;WORD wHour;WORD wMinute;WORD wSecond;WORD wMilliseconds;};
struct _TOKEN_USER {SID_AND_ATTRIBUTES User;};
struct joyinfo_tag {UINT wXpos;UINT wYpos;UINT wZpos;UINT wButtons;};
struct tagDEVNAMES {WORD wDriverOffset;WORD wDeviceOffset;WORD wOutputOffset;WORD wDefault;};
struct tagRemBRUSH {unsigned int cbData;byte data[1];};
struct val_context {int valuelen;LPVOID value_context;LPVOID val_buff_ptr;};
typedef userHBITMAP *wireHBITMAP;
typedef userHGLOBAL *wireHGLOBAL;
typedef enum tagBINDSTATUS BINDSTATUS;
typedef enum tagBINDSTRING BINDSTRING;
typedef enum tagBIND_FLAGS BIND_FLAGS;
typedef PVOID BPC_HANDLE;
typedef enum tagCHANGEKIND CHANGEKIND;
typedef CHOOSEFONTA CHOOSEFONT;
typedef enum __MIDL_ICodeInstall_0001 CIP_STATUS;
typedef WORD CLIPFORMAT;
typedef CREDENTIALA CREDENTIAL;
typedef enum _D3DBLENDOP D3DBLENDOP;
typedef enum _D3DCMPFUNC D3DCMPFUNC;
typedef enum _D3DDEVTYPE D3DDEVTYPE;
typedef enum _D3DFOGMODE D3DFOGMODE;
typedef DCISURFACEINFO DCIPRIMARY;
typedef WINDOWS_DEVICELIST DEVICELIST;
typedef DOC_INFO_1A DOC_INFO_1;
typedef DOC_INFO_2A DOC_INFO_2;
typedef DOC_INFO_3A DOC_INFO_3;
typedef EXTLOGFONTA EXTLOGFONT;
typedef enum _632B66A9D7130349A03EF30A1CC9533A FilterType;
typedef ULONG_PTR HCRYPTHASH;
typedef ULONG_PTR HCRYPTPROV;
typedef PVOID HDEVNOTIFY;
typedef enum tagHH_GPROPID HH_GPROPID;
typedef PVOID HSPFILELOG;
typedef enum _31EF7763C4AEC8DD07C218DFAFDEDAB8 ICMP4_TYPE;
typedef enum _682EAAD0F97AB0EDCAD8B026B6112555 ICMP6_TYPE;
typedef enum tagINVOKEKIND INVOKEKIND;
typedef JOB_INFO_1A JOB_INFO_1;
typedef JOB_INFO_2A JOB_INFO_2;
typedef ULONG_PTR KSPIN_LOCK;
typedef KSIDENTIFIER KSPROPERTY;
typedef DWORD KS_AM_Step;
typedef LPAUXCAPS2A LPAUXCAPS2;
typedef LPAXESLISTA LPAXESLIST;
typedef LPAXISINFOA LPAXISINFO;
typedef  DSBCAPS *LPCDSBCAPS;
typedef  DSCCAPS *LPCDSCCAPS;
typedef DWORD *LPCOLORREF;
typedef LPCPINFOEXA LPCPINFOEX;
typedef DWORD *LPD3DCOLOR;
typedef DDOSCAPS *LPDDOSCAPS;
typedef DDSCAPS2 *LPDDSCAPS2;
typedef LPDRAGINFOA LPDRAGINFO;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HWAVEOUT *LPHWAVEOUT;
typedef WINDOWS_IAS_QUERY *LPIASQUERY;
typedef LPJOYCAPS2A LPJOYCAPS2;
typedef WORD *LPKEYARRAY;
typedef NMSELCHANGE *LPNMSELECT;
typedef LPOFNOTIFYA LPOFNOTIFY;
typedef LPPOLYTEXTA LPPOLYTEXT;
typedef LPPRINTDLGA LPPRINTDLG;
typedef SHITEMID *LPSHITEMID;
typedef STATDATA *LPSTATDATA;
typedef LPSTYLEBUFA LPSTYLEBUF;
typedef LPTVITEMEXA LPTVITEMEX;
typedef VMEMHEAP *LPVMEMHEAP;
typedef LPWNDCLASSA LPWNDCLASS;
typedef PVOID LSA_HANDLE;
typedef enum _MEDIA_TYPE MEDIA_TYPE;
typedef MIDIINCAPSA MIDIINCAPS;
typedef MIXERCAPS2A MIXERCAPS2;
typedef GUID MSAAPROPID;
typedef NPAUXCAPS2A NPAUXCAPS2;
typedef NPJOYCAPS2A NPJOYCAPS2;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef NPWNDCLASSA NPWNDCLASS;
typedef OFNOTIFYEXA OFNOTIFYEX;
typedef enum tagOLEDCFLAGS OLEDCFLAGS;
typedef enum tagOLEWHICHMK OLEWHICHMK;
typedef UINT OLE_HANDLE;
typedef WORD PATCHARRAY[128];
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
typedef ULONG_PTR *PDWORD_PTR;
typedef enum tagPENDINGMSG PENDINGMSG;
typedef PFILEPATHS_A PFILEPATHS;
typedef WINDOWS_IAS_QUERY *PIAS_QUERY;
typedef enum _7621D6AB91F9DA61D087C9DD9E0E63C9 PIPE_STATE;
typedef KSIDENTIFIER *PKSDEGRADE;
typedef PMIXERCAPSA PMIXERCAPS;
typedef PMIXERLINEA PMIXERLINE;
typedef PRINTDLGEXA PRINTDLGEX;
typedef ULONGLONG *PULONGLONG;
typedef enum tagREADYSTATE READYSTATE;
typedef SERIALKEYSA SERIALKEYS;
typedef enum tagSERVERCALL SERVERCALL;
typedef enum __MIDL___MIDL_itf_shobjidl_0201_0001 SHCOLSTATE;
typedef SHFILEINFOA SHFILEINFO;
typedef enum _D02A68EF54712B1F200C52B69E1D9509 SHGFP_TYPE;
typedef enum __MIDL___MIDL_itf_shobjidl_0212_0002 SLGP_FLAGS;
typedef enum _B2CD58BB5E151C37D855099D3E2FDD5A STUB_PHASE;
typedef void ( *STUB_THUNK)(PMIDL_STUB_MESSAGE);
typedef TEXTMETRICA TEXTMETRIC;
typedef enum _TOKEN_TYPE TOKEN_TYPE;
typedef enum _URLZONEREG URLZONEREG;
typedef enum _204D9DB0479990E1799BA37F02894952 URL_SCHEME;
typedef VARIANT VARIANTARG;
typedef enum tagVIEWSTATUS VIEWSTATUS;
typedef WAVEINCAPSA WAVEINCAPS;
typedef enum tag_WBEMSTATUS WBEMSTATUS;
typedef WMIREGGUIDW WMIREGGUID;
typedef WMIREGINFOW WMIREGINFO;
typedef WNDCLASSEXA WNDCLASSEX;
struct _BIN_RANGE {LARGE_INTEGER StartValue;LARGE_INTEGER Length;};
struct _BYTE_BLOB {unsigned int clSize;byte abData[1];};
struct _CERT_PAIR {CERT_BLOB Forward;CERT_BLOB Reverse;};
struct _D3DMATRIX {_D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902 __anonymous0;};
struct _DLSHEADER {ULONG cInstruments;};
struct _GAMMARAMP {WORD Red[256];WORD Green[256];WORD Blue[256];};
struct _IOSPACE32 {ULONG Address;ULONG Length;ULONG Data;};
struct _LANA_ENUM {UCHAR length;UCHAR lana[255];};
struct _NM_UPDOWN {NMHDR hdr;int iPos;int iDelta;};
struct _OLESTREAM {LPOLESTREAMVTBL lpstbl;};
struct _POOLTABLE {ULONG cbSize;ULONG cCues;};
struct _RAS_STATS {DWORD dwSize;DWORD dwBytesXmited;DWORD dwBytesRcved;DWORD dwFramesXmited;DWORD dwFramesRcved;DWORD dwCrcErr;DWORD dwTimeoutErr;DWORD dwAlignmentErr;DWORD dwHardwareOverrunErr;DWORD dwFramingErr;DWORD dwBufferOverrunErr;DWORD dwCompressionRatioIn;DWORD dwCompressionRatioOut;DWORD dwBps;DWORD dwConnectDuration;};
struct _RSAPUBKEY {DWORD magic;DWORD bitlen;DWORD pubexp;};
struct _SPC_IMAGE {struct SPC_LINK_ *pImageLink;CRYPT_DATA_BLOB Bitmap;CRYPT_DATA_BLOB Metafile;CRYPT_DATA_BLOB EnhancedMetafile;CRYPT_DATA_BLOB GifFile;};
struct _SecHandle {ULONG_PTR dwLower;ULONG_PTR dwUpper;};
struct tagHSZPAIR {HSZ hszSvc;HSZ hszTopic;};
struct tagIMEINFO {DWORD dwPrivateDataSize;DWORD fdwProperty;DWORD fdwConversionCaps;DWORD fdwSentenceCaps;DWORD fdwUICaps;DWORD fdwSCSCaps;DWORD fdwSelectCaps;};
struct tagPOINTFX {FIXED x;FIXED y;};
struct tagRGBQUAD {BYTE rgbBlue;BYTE rgbGreen;BYTE rgbRed;BYTE rgbReserved;};
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef enum _24B7ECD4AC03C444748AD3E8BD37C202 ASSOCDATA;
typedef enum _9F5DEC71A9715652613D7AC79A3DFB57 ASSOCENUM;
typedef enum _13CC20D9AD0BBA5D63681FE6203B0C08 BIDI_TYPE;
typedef enum __MIDL_IBindStatusCallback_0002 BINDINFOF;
typedef enum tagBINDSPEED BINDSPEED;
typedef enum _BIN_TYPES BIN_TYPES;
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef enum _D3DFORMAT D3DFORMAT;
typedef enum _D3DOPCODE D3DOPCODE;
typedef enum tagDVASPECT2 DVASPECT2;
typedef ULONGLONG DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef FILEPATHS_A FILEPATHS;
typedef enum tagFUNCFLAGS FUNCFLAGS;
typedef ULONG_PTR HCRYPTKEY;
typedef enum tagHITRESULT HITRESULT;
typedef WINDOWS_IAS_QUERY IAS_QUERY;
typedef ULONG IP_STATUS;
typedef ULONG_PTR KAFFINITY;
typedef KSIDENTIFIER KSDEGRADE;
typedef LONG LCSCSTYPE;
typedef LPAUXCAPSA LPAUXCAPS;
typedef  DSCAPS *LPCDSCAPS;
typedef DBLNODE *LPDBLNODE;
typedef DDBLTFX *LPDDBLTFX;
typedef DDSCAPS *LPDDSCAPS;
typedef DECIMAL *LPDECIMAL;
typedef LPDEVMODEA LPDEVMODE;
typedef LPDOCINFOA LPDOCINFO;
typedef HACMOBJ *LPHACMOBJ;
typedef HMIDIIN *LPHMIDIIN;
typedef HWAVEIN *LPHWAVEIN;
typedef LPJOYCAPSA LPJOYCAPS;
typedef LPLOGFONTA LPLOGFONT;
typedef LPNMMOUSE LPNMCLICK;
typedef LPNS_INFOA LPNS_INFO;
typedef QCMINFO *LPQCMINFO;
typedef RGBQUAD *LPRGBQUAD;
typedef VARIANT *LPVARIANT;
typedef WSADATA *LPWSADATA;
typedef HANDLE MCDHANDLE;
typedef MIXERCAPSA MIXERCAPS;
typedef MIXERLINEA MIXERLINE;
typedef enum tagMKREDUCE MKRREDUCE;
typedef UINT MMVERSION;
typedef enum tagMSHLFLAGS MSHLFLAGS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef NPDEVMODEA NPDEVMODE;
typedef NPJOYCAPSA NPJOYCAPS;
typedef NPLOGFONTA NPLOGFONT;
typedef NUMBERFMTA NUMBERFMT;
typedef enum tagOLERENDER OLERENDER;
typedef enum tagOLEUPDATE OLEUPDATE;
typedef DWORD OLE_COLOR;
typedef PAUXCAPS2A PAUXCAPS2;
typedef PAXESLISTA PAXESLIST;
typedef PAXISINFOA PAXISINFO;
typedef  ACTCTXA *PCACTCTXA;
typedef  ACTCTXW *PCACTCTXW;
typedef CONVINFO *PCONVINFO;
typedef FLOAT128 *PFLOAT128;
typedef ICONINFO *PICONINFO;
typedef PJOYCAPS2A PJOYCAPS2;
typedef KSIDENTIFIER *PKSMETHOD;
typedef PVOID PKSWORKER;
typedef LONGLONG *PLONGLONG;
typedef ULONG *PNDIS_OID;
typedef LONG *PNTSTATUS;
typedef PPOLYTEXTA PPOLYTEXT;
typedef enum __MIDL_IPrint_0001 PRINTFLAG;
typedef PSTYLEBUFA PSTYLEBUF;
typedef enum _tagPSUACTION PSUACTION;
typedef PWNDCLASSA PWNDCLASS;
struct RASIPADDR {BYTE a;BYTE b;BYTE c;BYTE d;};
typedef enum __MIDL___MIDL_itf_shobjidl_0212_0001 SLR_FLAGS;
typedef uSTGMEDIUM STGMEDIUM;
typedef enum __MIDL_IInternetSecurityManager_0002 SZM_FLAGS;
typedef enum tagTYPEFLAGS TYPEFLAGS;
typedef enum _2A6324B8E10DEE2666A6A5498DFC667B XLAT_SIDE;
struct _ABCFLOAT {FLOAT abcfA;FLOAT abcfB;FLOAT abcfC;};
struct _BLENDOBJ {BLENDFUNCTION BlendFunction;};
struct _D3DPOINT {WORD wCount;WORD wFirst;};
struct _D3DRANGE {UINT Offset;UINT Size;};
struct _D3DSTATS {DWORD dwSize;DWORD dwTrianglesDrawn;DWORD dwLinesDrawn;DWORD dwPointsDrawn;DWORD dwSpansDrawn;DWORD dwVerticesProcessed;};
struct _DDOSCAPS {DWORD dwCaps;};
struct _DSCBCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;};
struct _FILETIME {DWORD dwLowDateTime;DWORD dwHighDateTime;};
struct _FLOATOBJ {ULONG ul1;ULONG ul2;};
struct _MCDCOLOR {MCDFLOAT r;MCDFLOAT g;MCDFLOAT b;MCDFLOAT a;};
struct _MCDCOORD {MCDFLOAT x;MCDFLOAT y;MCDFLOAT z;MCDFLOAT w;};
struct _MCDSTATE {ULONG state;ULONG size;ULONG stateValue;};
struct _MIB_ICMP {MIBICMPINFO stats;};
struct _RGNRANGE {USHORT usLow;USHORT usHigh;};
struct _RIP_INFO {DWORD dwError;DWORD dwType;};
struct _XFORMOBJ {ULONG ulReserved;};
struct sockproto {u_short sp_family;u_short sp_protocol;};
struct tagCIEXYZ {FXPT2DOT30 ciexyzX;FXPT2DOT30 ciexyzY;FXPT2DOT30 ciexyzZ;};
struct tagPANOSE {BYTE bFamilyType;BYTE bSerifStyle;BYTE bWeight;BYTE bProportion;BYTE bContrast;BYTE bStrokeVariation;BYTE bArmStyle;BYTE bLetterform;BYTE bMidline;BYTE bXHeight;};
struct tagPOINTF {FLOAT x;FLOAT y;};
struct tagPOINTS {SHORT x;SHORT y;};
struct tagSMINFO {DWORD dwMask;DWORD dwType;DWORD dwFlags;int iIcon;};
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHMENU;
typedef enum _BA5933F1975D916FB246D1EEDB0FAC50 ASSOCKEY;
typedef enum _F258A75C985B6E15DF6E997DEEA0897F ASSOCSTR;
typedef AUXCAPS2A AUXCAPS2;
typedef AXESLISTA AXESLIST;
typedef AXISINFOA AXISINFO;
typedef enum __MIDL_IBindStatusCallback_0001 BINDVERB;
typedef enum tagCALLCONV CALLCONV;
typedef enum tagCALLTYPE CALLTYPE;
typedef DWORD COLORREF;
typedef CPINFOEXA CPINFOEX;
typedef enum tagCTRLINFO CTRLINFO;
typedef CY CURRENCY;
typedef enum _D3DBLEND D3DBLEND;
typedef DWORD D3DCOLOR;
typedef LONG D3DFIXED;
typedef enum tagDESCKIND DESCKIND;
typedef DRAGINFOA DRAGINFO;
typedef enum tagDVASPECT DVASPECT;
typedef enum _248C98C84AD026B4080DDE86FD8C0CD8 FD_FLAGS;
typedef enum tagFUNCKIND FUNCKIND;
typedef DWORD GEOCLASS;
typedef enum tagGUIDKIND GUIDKIND;
typedef PVOID HDEVINFO;
typedef HANDLE HDRAWDIB;
typedef DWORD HELPPOLY;
typedef DWORD HREFTYPE;
typedef PVOID HSPFILEQ;
typedef JOYCAPS2A JOYCAPS2;
typedef WORD KEYARRAY[128];
typedef KSIDENTIFIER KSMETHOD;
typedef enum tagLIBFLAGS LIBFLAGS;
typedef enum tagLOCKTYPE LOCKTYPE;
typedef CIEXYZ *LPCIEXYZ;
typedef  RECTL *LPCRECTL;
typedef DDARGB *LPDDARGB;
typedef DDRGBA *LPDDRGBA;
typedef HANDLE *LPHANDLE;
typedef HMIXER *LPHMIXER;
typedef HVIDEO *LPHVIDEO;
typedef WINDOWS_IAS_SET *LPIASSET;
typedef LPIMEPROA LPIMEPRO;
typedef STRRET *LPSTRRET;
typedef TBINFO *LPTBINFO;
typedef DWORD MCIERROR;
typedef UINT MMRESULT;
typedef ULONG NDIS_OID;
typedef NMSELCHANGE NMSELECT;
typedef NPIMEPROA NPIMEPRO;
typedef LONG NTSTATUS;
typedef OFNOTIFYA OFNOTIFY;
typedef enum tagOLECLOSE OLECLOSE;
typedef enum tagOLECONTF OLECONTF;
typedef void ( *PAPCFUNC)(ULONG_PTR dwParam);
typedef PAUXCAPSA PAUXCAPS;
typedef PCACTCTXA PCACTCTX;
typedef CONTEXT *PCONTEXT;
typedef PDEVMODEA PDEVMODE;
typedef HACMOBJ *PHACMOBJ;
typedef HSZPAIR *PHSZPAIR;
typedef WINDOWS_IAS_SET *PIAS_SET;
typedef enum _tagPI_FLAGS PI_FLAGS;
typedef PJOYCAPSA PJOYCAPS;
typedef KSIDENTIFIER *PKSEVENT;
typedef enum _B4EFCEC8C68CF8B596CEF68A8AD15C1A *PKSSTATE;
typedef PLOGFONTA PLOGFONT;
typedef PNS_INFOA PNS_INFO;
typedef POLYTEXTA POLYTEXT;
typedef PRINTDLGA PRINTDLG;
typedef LONG_PTR *PSSIZE_T;
typedef  GUID * REFCATID;
typedef DWORD SICHINTF;
typedef enum _SPACTION SPACTION;
typedef DWORD SPBEGINF;
typedef BYTE SPC_UUID[16];
typedef HANDLE *SPHANDLE;
typedef ULONG SPI_TYPE;
typedef enum tagSTATFLAG STATFLAG;
typedef STYLEBUFA STYLEBUF;
typedef TVITEMEXA TVITEMEX;
typedef enum tagTYPEKIND TYPEKIND;
typedef enum tagUASFLAGS UASFLAGS;
typedef enum _2CD99A42A273050CD294312F877025C7 URL_PART;
typedef enum tagVARFLAGS VARFLAGS;
typedef WNDCLASSA WNDCLASS;
struct _COMSTAT {unsigned int fCtsHold : 1;unsigned int fDsrHold : 1;unsigned int fRlsdHold : 1;unsigned int fXoffHold : 1;unsigned int fXoffSent : 1;unsigned int fEof : 1;unsigned int fTxim : 1;unsigned int fReserved : 25;DWORD cbInQue;DWORD cbOutQue;};
struct _D3DRECT {LONG x1;LONG y1;LONG x2;LONG y2;};
struct _D3DSPAN {WORD wCount;WORD wFirst;};
struct _DDSCAPS {DWORD dwCaps;};
struct _DSBCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwUnlockTransferRate;DWORD dwPlayCpuOverhead;};
struct _DSCCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwFormats;DWORD dwChannels;};
struct _IDEREGS {BYTE bFeaturesReg;BYTE bSectorCountReg;BYTE bSectorNumberReg;BYTE bCylLowReg;BYTE bCylHighReg;BYTE bDriveHeadReg;BYTE bCommandReg;BYTE bReserved;};
struct _IOSPACE {ULONG Address;ULONG Length;ULONG Data;};
struct _POINTQF {LARGE_INTEGER x;LARGE_INTEGER y;};
struct _POOLCUE {ULONG ulOffset;};
struct _RGNDATA {RGNDATAHEADER rdh;char Buffer[1];};
struct _UDACCEL {UINT nSec;UINT nInc;};
typedef RPC_BINDING_HANDLE handle_t;
struct sockaddr {u_short sa_family;char sa_data[14];};
struct tagPOINT {LONG x;LONG y;};
struct tagXFORM {FLOAT eM11;FLOAT eM12;FLOAT eM21;FLOAT eM22;FLOAT eDx;FLOAT eDy;};
typedef unsigned short wctype_t;
typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef RemotableHandle *wireHWND;
typedef BYTE_BLOB *wirePIDL;
typedef enum _APTTYPE APTTYPE;
typedef AUXCAPSA AUXCAPS;
typedef BYTE BOOLEAN;
typedef DWORD CALTYPE;
typedef USHORT COLOR16;
typedef enum _D3DCULL D3DCULL;
typedef enum _D3DPOOL D3DPOOL;
typedef enum tagDATADIR DATADIR;
typedef DEVMODEA DEVMODE;
typedef DOCINFOA DOCINFO;
typedef enum __MIDL_IOleDocument_0001 DOCMISC;
typedef enum tagEXTCONN EXTCONN;
typedef ULONG_PTR FLATPTR;
typedef DWORD GEOTYPE;
typedef HICON HCURSOR;
typedef PVOID HDSKSPC;
typedef HANDLE HGLOBAL;
typedef HINSTANCE HMODULE;
typedef LONG HRESULT;
typedef WINDOWS_IAS_SET IAS_SET;
typedef JOYCAPSA JOYCAPS;
typedef KSIDENTIFIER KSEVENT;
typedef enum _D64CEF8F52066C406CD4BA6573420261 KSRESET;
typedef enum _B4EFCEC8C68CF8B596CEF68A8AD15C1A KSSTATE;
typedef LOGFONTA LOGFONT;
typedef  BYTE *LPCBYTE;
typedef  GUID *LPCGUID;
typedef  RECT *LPCRECT;
typedef DWORD *LPDWORD;
typedef HMIDI *LPHMIDI;
typedef NMHDR *LPNMHDR;
typedef SIZE *LPSIZEL;
typedef LONG_PTR LRESULT;
typedef NMMOUSE NMCLICK;
typedef NS_INFOA NS_INFO;
typedef enum tagOLEMISC OLEMISC;
typedef PACTCTXA PACTCTX;
typedef LOGBRUSH PATTERN;
typedef HANDLE *PHANDLE;
typedef PIMEPROA PIMEPRO;
typedef NT_TIB *PNT_TIB;
typedef PPVALUEA PPVALUE;
typedef ULONG_PTR *PSIZE_T;
typedef LSA_STRING *PSTRING;
typedef LONG PTRDIFF;
typedef USHORT *PUSHORT;
typedef PVALENTA PVALENT;
typedef enum tagREGKIND REGKIND;
typedef LPVOID SC_LOCK;
typedef enum tagSF_TYPE SF_TYPE;
typedef enum tagSHCONTF SHCONTF;
typedef DWORD SPINITF;
typedef LONG_PTR SSIZE_T;
typedef enum tagSTGMOVE STGMOVE;
typedef enum tagSYSKIND SYSKIND;
typedef enum _THDTYPE THDTYPE;
typedef enum _FBABD51C57810C7C5F45B793B996DA98 UI_TYPE;
typedef enum tagURLZONE URLZONE;
typedef enum tagVARKIND VARKIND;
struct WSAData {WORD wVersion;WORD wHighVersion;char szDescription[257];char szSystemStatus[129];unsigned short iMaxSockets;unsigned short iMaxUdpDg;char *lpVendorInfo;};
typedef enum __MIDL_IInternetZoneManager_0002 ZAFLAGS;
struct _D3DBOX {UINT Left;UINT Top;UINT Right;UINT Bottom;UINT Front;UINT Back;};
struct _DCICMD {DWORD dwCommand;DWORD dwParam1;DWORD dwParam2;DWORD dwVersion;DWORD dwReserved;};
struct _DDARGB {BYTE blue;BYTE green;BYTE red;BYTE alpha;};
struct _DDRGBA {BYTE red;BYTE green;BYTE blue;BYTE alpha;};
struct _DSCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwMinSecondarySampleRate;DWORD dwMaxSecondarySampleRate;DWORD dwPrimaryBuffers;DWORD dwMaxHwMixingAllBuffers;DWORD dwMaxHwMixingStaticBuffers;DWORD dwMaxHwMixingStreamingBuffers;DWORD dwFreeHwMixingAllBuffers;DWORD dwFreeHwMixingStaticBuffers;DWORD dwFreeHwMixingStreamingBuffers;DWORD dwMaxHw3DAllBuffers;DWORD dwMaxHw3DStaticBuffers;DWORD dwMaxHw3DStreamingBuffers;DWORD dwFreeHw3DAllBuffers;DWORD dwFreeHw3DStaticBuffers;DWORD dwFreeHw3DStreamingBuffers;DWORD dwTotalHwMemBytes;DWORD dwFreeHwMemBytes;DWORD dwMaxContigFreeHwMemBytes;DWORD dwUnlockTransferRateHwBuffers;DWORD dwPlayCpuOverheadSwBuffers;DWORD dwReserved1;DWORD dwReserved2;};
struct _PALOBJ {ULONG ulReserved;};
struct _POINTL {LONG x;LONG y;};
struct _PUBKEY {DWORD magic;DWORD bitlen;};
struct _TBINFO {UINT cbuttons;UINT uFlags;};
struct _VK_VSC {BYTE Vk;BYTE Vsc;};
struct _WSABUF {u_long len;char *buf;};
typedef byte cs_byte;
struct tagCAUL {ULONG cElems;ULONG *pElems;};
struct tagCRGB {BYTE bRed;BYTE bGreen;BYTE bBlue;BYTE bExtra;};
struct tagRECT {LONG left;LONG top;LONG right;LONG bottom;};
struct tagSIZE {LONG cx;LONG cy;};
typedef RemotableHandle *wireHDC;
typedef RemSNB *wireSNB;
typedef ACTCTXA ACTCTX;
typedef DWORD ASSOCF;
typedef enum tagCLSCTX CLSCTX;
typedef enum tagCOINIT COINIT;
typedef DDCAPS_DX7 DDCAPS;
typedef LONG DISPID;
typedef DWORD FLOATL;
typedef DWORD FOURCC;
typedef WORD FSHORT;
typedef ULONG HGLYPH;
typedef HANDLE HLOCAL;
typedef HANDLE HUSKEY;
typedef IMEPROA IMEPRO;
typedef ULONG IPAddr;
typedef ULONG IPMask;
typedef WORD LANGID;
typedef DWORD LCTYPE;
typedef LONG LDECI4;
typedef DWORD LGRPID;
typedef LONG_PTR LPARAM;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef  CHAR *LPCSTR;
typedef GUID *LPGUID;
typedef UINT *LPUINT;
typedef WORD *LPWORD;
typedef enum tagMEMCTX MEMCTX;
typedef enum tagMSHCTX MSHCTX;
typedef LPCSTR PCTSTR;
typedef DWORD *PDWORD;
typedef FLOAT *PFLOAT;
typedef ULONG PROPID;
typedef SHORT *PSHORT;
typedef SIZE *PSIZEL;
typedef UCHAR *PUCHAR;
typedef ULONG *PULONG;
typedef USHORT *PUSAGE;
typedef PVALUEA PVALUE;
typedef enum tagREGCLS REGCLS;
typedef ACCESS_MASK REGSAM;
typedef ULONG SFGAOF;
typedef DWORD SHGDNF;
typedef ULONG_PTR SIZE_T;
typedef UINT_PTR SOCKET;
typedef enum _SPTEXT SPTEXT;
typedef LSA_STRING STRING;
typedef enum tagTYSPEC TYSPEC;
typedef VALENTA VALENT;
typedef UINT_PTR WPARAM;
struct _COORD {SHORT X;SHORT Y;};
struct _FIXED {WORD fract;short value;};
struct _INVOC {DWORD dwCount;DWORD loOffset;};
struct _RECTL {LONG left;LONG top;LONG right;LONG bottom;};
struct _rloop {ULONG cbSize;ULONG ulType;ULONG ulStart;ULONG ulLength;};
struct linger {u_short l_onoff;u_short l_linger;};
struct netent {char *n_name;char **n_aliases;short n_addrtype;u_long n_net;};
struct tagEMR {DWORD iType;DWORD nSize;};
typedef unsigned short wint_t;
typedef BYTE BCHAR;
typedef enum __MIDL_IBindStatusCallback_0003 BINDF;
typedef DWORD CALID;
typedef GUID CATID;
typedef GUID CLSID;
typedef CRITICAL_SECTION CSECT;
typedef UINT EXPPS;
typedef BYTE FCHAR;
typedef DWORD FLONG;
typedef GUID FMTID;
typedef SHORT FWORD;
typedef LONG GEOID;
typedef ULONG IDENT;
typedef  CHAR *LPCCH;
typedef HKL *LPHKL;
typedef CHAR *LPSTR;
typedef LPSTR LPTCH;
typedef enum tagMKSYS MKSYS;
typedef CHAR *NPSTR;
typedef BOOL *PBOOL;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef  CHAR *PCSTR;
typedef HKEY *PHKEY;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LPSTR PTSTR;
typedef WORD *PWORD;
typedef LONG SCODE;
typedef enum tagSHGDN SHGNO;
typedef enum __MIDL_IShellItem_0001 SIGDN;
typedef SIZE SIZEL;
typedef enum tagSTGTY STGTY;
typedef enum __MIDL___MIDL_itf_shobjidl_0202_0004 SVGIO;
typedef UINT SVSIF;
typedef WORD TWOCC;
typedef enum tagTYMED TYMED;
typedef enum _3B2A1EAD1C50A2BC68F8CFAB6412CACA URLIS;
typedef USHORT USAGE;
typedef WORD UWORD;
typedef unsigned short WCHAR;
struct _MAT2 {FIXED eM11;FIXED eM12;FIXED eM21;FIXED eM22;};
typedef enum tagADVF ADVF;
typedef WORD ATOM;
typedef enum __MIDL_IBindStatusCallback_0006 BSCF;
typedef HANDLE HDWP;
typedef PVOID HINF;
typedef DWORD LCID;
typedef CHAR *LPCH;
typedef CY *LPCY;
typedef ACL *PACL;
typedef  CHAR *PCCH;
typedef MDL *PMDL;
typedef PVOID PSID;
typedef CHAR *PSTR;
typedef LPSTR PTCH;
typedef enum __MIDL_IInternetSecurityManager_0001 PUAF;
typedef WCHAR *PWCH;
typedef ULONG ROP4;
typedef DWORD SRRF;
typedef enum tagSTGC STGC;
typedef GUID UUID;
struct _ABC {int abcA;UINT abcB;int abcC;};
struct _IDA {UINT cidl;UINT aoffset[1];};
struct _MDL {struct _MDL *MdlNext;short MdlSize;short MdlFlags;struct _EPROCESS *Process;ULONG *lpMappedSystemVa;ULONG *lpStartVa;ULONG ByteCount;ULONG ByteOffset;};
struct _RUN {LONG iStart;LONG iStop;};
typedef LONG FIX;
typedef ULONG_PTR HFC;
typedef ULONG_PTR HFF;
typedef GUID IID;
typedef ULONG MIX;
typedef CHAR *PCH;
typedef LONG_PTR ( *PFN)();
typedef LONGLONG USN;
struct _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764___F985BF779D0F5FE11994F28A81731018 {ULONG Length;DWORD Reserved;};
struct _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1 {DWORD cbBuf;LPVOID pBuf;};
struct _EVENT_INSTANCE_HEADER___CD063E6C818675C054F8A7A9A4738EC7___3A0264781BC9263812BBB95F70B75F25 {UCHAR Type;UCHAR Level;USHORT Version;};
struct _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835___A65BB09441F58C3866A236B20CDA4416 {ULONG Length;DWORD IfIndex;};
struct _DISK_DETECTION_INFO___2344D2D0A84D08BC25A5ABEA77F9F68C___C6895C4B5C301AAC9475EDA00CD39D51 {DISK_INT13_INFO Int13;DISK_EX_INT13_INFO ExInt13;};
struct _EVENT_TRACE_HEADER___9430D09E29912981CCDB72549C8FCA9E___3A0264781BC9263812BBB95F70B75F25 {UCHAR Type;UCHAR Level;USHORT Version;};
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0 {HANDLE hMem;DWORD dwReserved[3];};
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F {DWORD dwCommittedSize;DWORD dwUnCommittedSize;LPVOID lpFirstBlock;LPVOID lpLastBlock;};
struct _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___04135898E560345A2F242A01D2B4E8C6 {u_long Len;u_long CharSet;u_char UsrStr[256];};
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___B5DCF807C499FCDEE2A60940AC752147 {u_long Len;u_char OctetSeq[1024];};
struct _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893___83D0A1D806B42BB3CFEB24AD25988CD4 {USAGE UsageMin;USAGE UsageMax;USHORT StringMin;USHORT StringMax;USHORT DesignatorMin;USHORT DesignatorMax;USHORT DataIndexMin;USHORT DataIndexMax;};
struct _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893___9A2DEDAE27CA526CD6B2E1277E119468 {USAGE Usage;USAGE Reserved1;USHORT StringIndex;USHORT Reserved2;USHORT DesignatorIndex;USHORT Reserved3;USHORT DataIndex;USHORT Reserved4;};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 {struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 Function;struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 Array;};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 {struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 LnSz;DWORD TotalSize;};
struct _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41___83D0A1D806B42BB3CFEB24AD25988CD4 {USAGE UsageMin;USAGE UsageMax;USHORT StringMin;USHORT StringMax;USHORT DesignatorMin;USHORT DesignatorMax;USHORT DataIndexMin;USHORT DataIndexMax;};
struct _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41___9A2DEDAE27CA526CD6B2E1277E119468 {USAGE Usage;USAGE Reserved1;USHORT StringIndex;USHORT Reserved2;USHORT DesignatorIndex;USHORT Reserved3;USHORT DataIndex;USHORT Reserved4;};
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___A18A6C82CF5B218D68E8003A992A5456 {HWND hWnd;UINT Msg;};
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___1D4E303DADE57E5BB276842A2C49A9FB {u_short Len;u_char OctetSeq[1024];};
struct _devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___604F2BC6924E02F5722A52FC79BC44F9 {POINTL dmPosition;DWORD dmDisplayOrientation;DWORD dmDisplayFixedOutput;};
struct _devicemodeW___5A39A2C3BB0B1D2D5888DFEE2BA0B23C___604F2BC6924E02F5722A52FC79BC44F9 {POINTL dmPosition;DWORD dmDisplayOrientation;DWORD dmDisplayFixedOutput;};
struct _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC___C14401A1E0730961694E5F3AC835B577 {UCHAR s_type;UCHAR s_code;USHORT filler;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858 {HBITMAP hbitmap;HPALETTE hpal;};
union _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8 {PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;PCERT_ID pSenderId;};
struct ____335ECC51A6B56A7597C0B2929815FEAA___2045542961514ACF8A05342E7D7A4BD3 {PVOID Unused;LONG_PTR Alignment[2];};
struct ____335ECC51A6B56A7597C0B2929815FEAA___557E0A75632B2AB77ABA22F73346E46E {HANDLE Event;ULONG_PTR Reserved[2];};
struct ____F044539147C377D1A0F579F3A4EAC6A7___8DB12206A787E12F5CB68E9C5F8D04FA {GUID Set;ULONG Id;ULONG Flags;};
union _D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA___D502B0312B70DCF8ACF8FE55005DEB1B {D3DVERTEXTYPE VertexType;DWORD dwFVFControl;};
union _117E3A994AEBF040E18388CACE709509___F044539147C377D1A0F579F3A4EAC6A7 {____F044539147C377D1A0F579F3A4EAC6A7___8DB12206A787E12F5CB68E9C5F8D04FA __anonymous0;LONGLONG Alignment;};
union _572C9F5A336F5256CCDD98B741672A4F___3D2B62F9915B44C4461260C3662DC358 {ULONG InstanceNameList;ULONG BaseNameOffset;ULONG_PTR Pdo;ULONG_PTR InstanceInfo;};
union _742D342C7048E2C3902DF7570B72F6FC___1E7C0E17512837337D4DA69F160D7B1A {HANDLE ObjectHandle;PVOID ObjectPointer;};
struct _A4FB595EF421231CAF150DDD3288A6D5___33A5881EA3D20175AF6F6CBC82269B7B {ULONG FormatSize;ULONG Flags;ULONG SampleSize;ULONG Reserved;GUID MajorFormat;GUID SubFormat;GUID Specifier;};
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F {SCARD_T0_COMMAND CmdBytes;BYTE rgbHeader[5];};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29 {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous0;};
union _CMSG_KEY_AGREE_RECIPIENT_INFO___74691898E1CF581306BA249AD6F73FE1 {CERT_ID OriginatorCertId;CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;};
union _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764 {ULONGLONG Alignment;_IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764___F985BF779D0F5FE11994F28A81731018 __anonymous0;};
union _D3DNTHAL_DRAWPRIMITIVES2DATA___4A40E7D6792F856550440E087D486853 {PDD_SURFACE_LOCAL lpDDVertex;LPVOID lpVertices;};
union _D3DNTHAL_DRAWPRIMITIVES2DATA___DD26F1CDDCEF09909ADB7370566018B7 {DWORD dwVertexSize;HRESULT ddrval;};
union _DDRAWI_DDRAWSURFACE_GBL_MORE___69CDF4F9B83E08C1B922F58FDF1EFCB2 {DWORD dwPhysicalPageTable;FLATPTR fpPhysicalVidMem;};
union _HIDP_KEYBOARD_MODIFIER_STATE___09F65E3D8EC31FFE3E62B668D67CDD30 {_HIDP_KEYBOARD_MODIFIER_STATE___09F65E3D8EC31FFE3E62B668D67CDD30___CCD288663407EB3BCE693252A6740B18 __anonymous0;ULONG ul;};
union _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912 {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
union _SET_PARTITION_INFORMATION_EX___ECBF70424E32A71371BB3749E7C6F2EC {SET_PARTITION_INFORMATION_MBR Mbr;SET_PARTITION_INFORMATION_GPT Gpt;};
union _CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 {CERT_ID OriginatorCertId;CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;};
union _D3DHAL_DRAWONEPRIMITIVEDATA___D502B0312B70DCF8ACF8FE55005DEB1B {D3DVERTEXTYPE VertexType;DWORD dwFVFControl;};
union _DRIVE_LAYOUT_INFORMATION_EX___E2E3D8483D032B54611BEB6ADCC46344 {DRIVE_LAYOUT_INFORMATION_MBR Mbr;DRIVE_LAYOUT_INFORMATION_GPT Gpt;};
union _D3DHAL_DRAWPRIMITIVES2DATA___9EC3BABFFB78E494A9811F3E77A2E483 {LPDDRAWI_DDRAWSURFACE_LCL lpDDVertex;LPVOID lpVertices;};
union _D3DHAL_DRAWPRIMITIVES2DATA___DD26F1CDDCEF09909ADB7370566018B7 {DWORD dwVertexSize;HRESULT ddrval;};
union _D3DHAL_SETRENDERTARGETDATA___AA7F4F4835B84F00D17421C4D2A8A049 {LPDIRECTDRAWSURFACE lpDDSZ;LPDDRAWI_DDRAWSURFACE_LCL lpDDSZLcl;};
union _D3DHAL_SETRENDERTARGETDATA___F97B1EB6D3AC6DA1707638C5E5848180 {LPDIRECTDRAWSURFACE lpDDS;LPDDRAWI_DDRAWSURFACE_LCL lpDDSLcl;};
union _D3DNTHAL_CONTEXTCREATEDATA___DDCF36927E9BFFDD33D690AC93DE791F {PDD_DIRECTDRAW_GLOBAL lpDDGbl;PDD_DIRECTDRAW_LOCAL lpDDLcl;};
union _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
union _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
union tagRPC_EXTENDED_ERROR_INFO___749E5BDCBED96F03DEF2385A3B61DB7C {SYSTEMTIME SystemTime;FILETIME FileTime;};
union _D3DHAL_CONTEXTCREATEDATA___5B3AA550925D9E55122DB1650DBDB03D {DWORD dwPID;ULONG_PTR dwrstates;};
union _D3DHAL_CONTEXTCREATEDATA___7D939C7B4C349D82EC03AF3B9C890713 {LPDDRAWI_DIRECTDRAW_GBL lpDDGbl;LPDDRAWI_DIRECTDRAW_LCL lpDDLcl;};
union _D3DHAL_CONTEXTCREATEDATA___AA7F4F4835B84F00D17421C4D2A8A049 {LPDIRECTDRAWSURFACE lpDDSZ;LPDDRAWI_DDRAWSURFACE_LCL lpDDSZLcl;};
union _D3DHAL_CONTEXTCREATEDATA___F97B1EB6D3AC6DA1707638C5E5848180 {LPDIRECTDRAWSURFACE lpDDS;LPDDRAWI_DDRAWSURFACE_LCL lpDDSLcl;};
union _PARTITION_INFORMATION_EX___41520227951B374488E85ABED149FDD2 {PARTITION_INFORMATION_MBR Mbr;PARTITION_INFORMATION_GPT Gpt;};
union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1 {DWORD adwData[2];struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1 Data;};
union _D3DNTHAL_DP2RENDERSTATE___933A9CF36F1631E8E6BBB7EC5EB7821A {D3DVALUE fState;DWORD dwState;};
union _DDRAWI_DDRAWPALETTE_GBL___87CE64BF97EC25E039FC3DE56880F238 {ULONG_PTR dwReserved1;HPALETTE hHELGDIPalette;};
union _DDRAWI_DDRAWSURFACE_GBL___091DBF7D405BE25E65B16620C008128B {LONG lPitch;DWORD dwLinearSize;};
union _DDRAWI_DDRAWSURFACE_GBL___3E3480D0EE217BAF358C6F7F63164C60 {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPVOID lpDDHandle;};
union _DDRAWI_DDRAWSURFACE_GBL___EC76CB933E4FE6CB0F7AEE5EDE5FE8FF {LPVMEMHEAP lpVidMemHeap;DWORD dwBlockSizeX;};
union _DDRAWI_DDRAWSURFACE_LCL___6B043036C782DCB581418A8818C1EC9C {LPDDRAWI_DDRAWCLIPPER_LCL lpDDClipper;LPDDRAWI_DDRAWCLIPPER_INT lp16DDClipper;};
union _PROPSHEETUI_INFO_HEADER___88E50736DABF366776B5B85D748FD16D {HICON hIcon;ULONG_PTR IconID;};
union tagWNODE_EVENT_REFERENCE___35BDACE2D4BA78DD0D25FA8577D99EB2 {ULONG TargetInstanceIndex;WCHAR TargetInstanceName[];};
union _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D {struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___B2B02F0A7FAA2EF9E06FFE2893D08AB3 ScalarPrefetch;struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___99025D9F8BC16C326FB237046D6F6F6F BlockPrefetch;};
union _D3DHAL_DP2RENDERSTATE___F3EDB45D1196EF7B88036FF534BB239B {D3DVALUE dvState;DWORD dwState;};
union _DD_GETDRIVERSTATEDATA___ABF7C201B03F35578F4E1B252F89AF54 {PDD_DIRECTDRAW_GLOBAL lpDD;DWORD_PTR dwhContext;};
union _EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786 {USHORT FieldTypeFlags;_EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786___11F7F98663FFB665C68BB15C93C2F507 __anonymous0;};
union _EVENT_INSTANCE_HEADER___CD063E6C818675C054F8A7A9A4738EC7 {ULONG Version;struct _EVENT_INSTANCE_HEADER___CD063E6C818675C054F8A7A9A4738EC7___3A0264781BC9263812BBB95F70B75F25 Class;};
union _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A {_FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5 __anonymous0;BYTE ExtendedInfo[48];};
union _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835 {ULONGLONG Alignment;_IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835___A65BB09441F58C3866A236B20CDA4416 __anonymous0;};
union _TRACE_LOGFILE_HEADER___2BC8F7E6FF87669E4A0C925407CB65FB {ULONG Version;struct _TRACE_LOGFILE_HEADER___2BC8F7E6FF87669E4A0C925407CB65FB___0637F23A6873A28AE6543F059E4656C5 VersionDetail;};
union _TRACE_LOGFILE_HEADER___548299C9C2C0CFAB401D5C20E83DC5C0 {GUID LogInstanceGuid;_TRACE_LOGFILE_HEADER___548299C9C2C0CFAB401D5C20E83DC5C0___8A1F015C44BA8AC17C85DC9BC7770995 __anonymous0;};
union _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6 {struct _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6___D881D5162AD89D33B7C29C1B01B58C16 Mbr;struct _DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6___BE6FFFE6B14D10E80BF326EA5B53821A Gpt;};
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F {HWND hwndOwner;DWORD cMultipleItems;};
union _EVENT_TRACE_HEADER___146F82FB58FCEC23F5D30A6BD72C4E4F {GUID Guid;ULONGLONG GuidPtr;};
union _EVENT_TRACE_HEADER___1AD55EBA06F1C593881758F8895638BC {USHORT FieldTypeFlags;_EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786___11F7F98663FFB665C68BB15C93C2F507 __anonymous0;};
union _EVENT_TRACE_HEADER___9430D09E29912981CCDB72549C8FCA9E {ULONG Version;struct _EVENT_TRACE_HEADER___9430D09E29912981CCDB72549C8FCA9E___3A0264781BC9263812BBB95F70B75F25 Class;};
union _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07 {struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0 Block;struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F Region;};
union _DD_SURFACE_GLOBAL___091DBF7D405BE25E65B16620C008128B {LONG lPitch;DWORD dwLinearSize;};
union _DD_SURFACE_GLOBAL___7A21B59C32CFF5CA15CB97B965C92E66 {DWORD dwBlockSizeY;LONG lSlicePitch;};
union _DD_SURFACE_GLOBAL___CB1E62DE7444A801DA980E43BEA08FB3 {LPVIDEOMEMORY lpVidMemHeap;DWORD dwBlockSizeX;DWORD dwUserMemSize;};
union _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9 {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
union _PROPSHEETPAGEA_V1___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union _PROPSHEETPAGEA_V2___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union tagTVINSERTSTRUCTA___2E49B666B82A4FD641FAFC76A3D29C8E {TVITEMEXA itemex;TVITEMA item;};
union tagTVINSERTSTRUCTW___3D7B1E305294EDBA05E56815A0E14872 {TVITEMEXW itemex;TVITEMW item;};
struct _FT_STRIPE_SET_WITH_PARITY_CONFIGURATION_INFORMATION {LONGLONG MemberSize;ULONG StripeSize;};
union _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893 {struct _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893___83D0A1D806B42BB3CFEB24AD25988CD4 Range;struct _HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893___9A2DEDAE27CA526CD6B2E1277E119468 NotRange;};
union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC {WCHAR UnicodeChar;CHAR AsciiChar;};
union _PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C {HBITMAP hbmWatermark;LPCSTR pszbmWatermark;};
union _PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42 {HBITMAP hbmHeader;LPCSTR pszbmHeader;};
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 {UINT nStartPage;LPCSTR pStartPage;};
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 {LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE *phpage;};
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 {LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE *phpage;};
union _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058 {struct _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058___AFC34197E5C51B956EFAB0EF06B6B136 Linear;struct _SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058___A887C3F43B2C266F56E28E9B472055DF Rectangular;};
union tagWNODE_ALL_DATA___2509F747D046B06D85040055D485D2C5 {ULONG FixedInstanceSize;OFFSETINSTANCEDATAANDLENGTH OffsetInstanceDataAndLength[];};
union _CMC_STATUS_INFO___7102899B559A8354A70F3F8928772BC0 {DWORD dwFailInfo;PCMC_PEND_INFO pPendInfo;};
union _CONTROL_SERVICE___3FB44F62F5D12D5D44B4562DCCF9333E {AD_GUARANTEED Guaranteed;PARAM_BUFFER ParamBuffer[1];};
union _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41 {struct _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41___83D0A1D806B42BB3CFEB24AD25988CD4 Range;struct _HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41___9A2DEDAE27CA526CD6B2E1277E119468 NotRange;};
union _MIB_OPAQUE_INFO___17F86C708787DF658C468325A0B0DE76 {ULONGLONG ullAlign;BYTE rgbyData[1];};
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 {DWORD dwValue;ALG_ID Algid;DWORD dwLength;};
union _DDSURFACEDESC2___091DBF7D405BE25E65B16620C008128B {LONG lPitch;DWORD dwLinearSize;};
union _DDSURFACEDESC2___5B12F1D1A21F9ED7C15CB39448B5A42D {DDCOLORKEY ddckCKDestOverlay;DWORD dwEmptyFaceColor;};
union _DDSURFACEDESC2___640C42AFF919FFD3058B9E962436B842 {DDPIXELFORMAT ddpfPixelFormat;DWORD dwFVF;};
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 {handle_t *pAutoHandle;handle_t *pPrimitiveHandle;PGENERIC_BINDING_INFO pGenericBindingInfo;};
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union tagINPUTCONTEXT___072C26F05A152342D8ECB054BF7B2AA0 {LOGFONTA A;LOGFONTW W;};
union _DDSURFACEDESC___091DBF7D405BE25E65B16620C008128B {LONG lPitch;DWORD dwLinearSize;};
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E {DWORD LowPart;LONG HighPart;};
union _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F {int irdaAttribInt;struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___3558499B00780F336C093631BA5DA9A7 irdaAttribOctetSeq;struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___6F55BDC2B20B661E3B87B545C6DF801F irdaAttribUsrStr;};
struct _SLIST_HEADER___83AF6D9DC8E3B10431D79B304957BA23 {SINGLE_LIST_ENTRY Next;WORD Depth;WORD Sequence;};
union _WNODE_HEADER___FC8E5BF4FD761F48CA6E0E74FA8C78CE {ULONG64 HistoricalContext;_WNODE_HEADER___FC8E5BF4FD761F48CA6E0E74FA8C78CE___0AFF34700F133A66677DA8590144B5D8 __anonymous0;};
union _CREATE_DISK___E6D8F73FA11FE79B0BBE7B30BDE20C7B {CREATE_DISK_MBR Mbr;CREATE_DISK_GPT Gpt;};
union _DDOVERLAYFX___3639C047B3E88B857708792B1F3FEC83 {DWORD dwAlphaDestConst;LPDIRECTDRAWSURFACE lpDDSAlphaDest;};
union _DDOVERLAYFX___C0828DA952883A43DEF8D462ACC90C87 {DWORD dwAlphaSrcConst;LPDIRECTDRAWSURFACE lpDDSAlphaSrc;};
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F {DWORD dwOemId;_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 __anonymous0;};
union _VIDEOMEMORY___F643F706E5FAED7B713649E0BB2B511C {FLATPTR fpEnd;DWORD dwWidth;};
union _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3 {int irdaAttribInt;struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___3558499B00780F336C093631BA5DA9A7 irdaAttribOctetSeq;struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___6F55BDC2B20B661E3B87B545C6DF801F irdaAttribUsrStr;};
union _devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7 {_devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___A4EE175A7532F35C00DA5CAD042934DF __anonymous0;_devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___604F2BC6924E02F5722A52FC79BC44F9 __anonymous3;};
union _devicemodeW___5A39A2C3BB0B1D2D5888DFEE2BA0B23C {_devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___A4EE175A7532F35C00DA5CAD042934DF __anonymous0;_devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7___604F2BC6924E02F5722A52FC79BC44F9 __anonymous2;};
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;IO_COUNTERS IoInfo;};
union _OVERLAPPED___742A73540840F318F86F9CEE3D494648 {_OVERLAPPED___742A73540840F318F86F9CEE3D494648___9BFE693EDA487769FDABADE5E43394F7 __anonymous0;PVOID Pointer;};
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {PVOID lpInformation;PVOID lpSectionBase;ULONG ulSectionLength;PVOID lpSectionGlobalDataBase;ULONG ulSectionGlobalDataLength;};
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D {IDLDESC idldesc;PARAMDESC paramdesc;};
union tagRAWMOUSE___BAD619BF849CA7670BF9DAFAE180B654 {ULONG ulButtons;tagRAWMOUSE___BAD619BF849CA7670BF9DAFAE180B654___3E7396A53A7735AC40BFDACB443E8DAA __anonymous0;};
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwRegPolicySettings;BOOL fCommercial;};
union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC {WCHAR UnicodeChar;CHAR AsciiChar;};
union _HIDP_DATA___054E66EBAEB900A97FB470AAB272100E {ULONG RawValue;BOOLEAN On;};
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 {struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE Bytes;struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E Bits;};
union _NDIS_GUID___AB53B9CEEC61ECDF1333D6EBB2604C4E {NDIS_OID Oid;NDIS_STATUS Status;};
union _TRANSDATA___171E29005E45E425E24743D2D879D2A6 {SHORT sCode;BYTE ubCode;BYTE ubPairs[2];};
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B {ULONG oInst;VARIANT *lpvarValue;};
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {DWORD cbSize;BOOL fCommercial;};
union _D3DSTATE___6E126D7179C3BD6696EBA355AAC6A589 {DWORD dwArg[1];D3DVALUE dvArg[1];};
union _D3DSTATE___FC92201DB4C9E6548D65A7EA5D174F48 {D3DLIGHTSTATETYPE dlstLightStateType;D3DRENDERSTATETYPE drstRenderStateType;};
struct _FT_REDISTRIBUTION_CONFIGURATION_INFORMATION {ULONG StripeSize;USHORT FirstMemberWidth;USHORT SecondMemberWidth;};
union _NT_TIB64___1E27901D73CC769BB707041ECE344787 {DWORD64 FiberData;DWORD Version;};
union _CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C {CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;CRYPT_HASH_BLOB KeyId;CRYPT_HASH_BLOB HashId;};
union _DDBLTFX___3639C047B3E88B857708792B1F3FEC83 {DWORD dwAlphaDestConst;LPDIRECTDRAWSURFACE lpDDSAlphaDest;};
union _DDBLTFX___4C109671A06E28B8127C40041AB5795C {DWORD dwFillColor;DWORD dwFillDepth;DWORD dwFillPixel;LPDIRECTDRAWSURFACE lpDDSPattern;};
union _DDBLTFX___702C52B3655764E63C007A6B73D01C19 {DWORD dwZSrcConst;LPDIRECTDRAWSURFACE lpDDSZBufferSrc;};
union _DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 {DWORD dwAlphaSrcConst;LPDIRECTDRAWSURFACE lpDDSAlphaSrc;};
union _DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935 {DWORD dwZDestConst;LPDIRECTDRAWSURFACE lpDDSZBufferDest;};
union _DLGPAGE___81D8EEF2744445A9EE82E88354D6B45B {WORD DlgTemplateID;HANDLE hDlgTemplate;};
union _EXTPUSH___81D8EEF2744445A9EE82E88354D6B45B {WORD DlgTemplateID;HANDLE hDlgTemplate;};
union _OPTITEM___74C825475D62323C9F8B7568E9B8E215 {PEXTCHKBOX pExtChkBox;PEXTPUSH pExtPush;};
union in6_addr___6F0816B860EA11CA8E788AEE35731DB2 {UCHAR Byte[16];USHORT Word[8];};
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwRegPolicySettings;PCMSG_SIGNER_INFO pSignerInfo;};
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA {PVOID FiberData;DWORD Version;};
union _VIDMEM___99A34FFB5DAE936C058DAB09DE9C6078 {LPVMEMHEAP lpHeap;DWORD dwHeight;};
union _VIDMEM___F643F706E5FAED7B713649E0BB2B511C {FLATPTR fpEnd;DWORD dwWidth;};
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34 {tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B __anonymous0;USHORT signscale;};
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301 {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous0;ULONGLONG Lo64;};
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {LPSTR pszOrganization;DWORD cNoticeNumbers;int *rgNoticeNumbers;};
struct _FT_PARTITION_CONFIGURATION_INFORMATION {ULONG Signature;ULONG DiskNumber;LONGLONG ByteOffset;};
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {LARGE_INTEGER TotalUserTime;LARGE_INTEGER TotalKernelTime;LARGE_INTEGER ThisPeriodTotalUserTime;LARGE_INTEGER ThisPeriodTotalKernelTime;DWORD TotalPageFaultCount;DWORD TotalProcesses;DWORD ActiveProcesses;DWORD TotalTerminatedProcesses;};
struct _LSA_FOREST_TRUST_COLLISION_INFORMATION {ULONG RecordCount;PLSA_FOREST_TRUST_COLLISION_RECORD *Entries;};
typedef DWORD ( *LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB)(LPD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA);
typedef BOOL ( *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(PCCERT_CONTEXT pCert, void *pvFindArg);
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;CRYPT_DATA_BLOB blob;};
union _userCLIPFORMAT____MIDL_IWinTypes_0001 {DWORD dwValue;unsigned short *pwszName;};
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {HANDLE hActCtx;DWORD dwFlags;};
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {DWORD cOID;LPSTR *rgpszOID;};
struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY {UDP_ENCAP_TYPE UdpEncapType;USHORT DstEncapPort;};
typedef DWORD ( *LPD3DHAL_VALIDATETEXTURESTAGESTATECB)(LPD3DHAL_VALIDATETEXTURESTAGESTATEDATA);
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {PVOID CompletionKey;HANDLE CompletionPort;};
struct __MIDL___MIDL_itf_shobjidl_0201_0002 {GUID fmtid;DWORD pid;};
struct __MIDL___MIDL_itf_shobjidl_0211_0003 {CATEGORYINFO_FLAGS cif;WCHAR wszName[260];};
typedef void ( *RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK)(PVOID AllocationBase, SIZE_T AllocationSize);
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwSignerIndex;DWORD dwSignerType;void *pvSigner;};
struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO {ULONG AuthenticationOptions;LARGE_INTEGER MaxServiceTicketAge;LARGE_INTEGER MaxTicketAge;LARGE_INTEGER MaxRenewAge;LARGE_INTEGER MaxClockSkew;LARGE_INTEGER Reserved;};
struct _VBICODECFILTERING_STATISTICS_NABTS {VBICODECFILTERING_STATISTICS_COMMON Common;DWORD FECBundleBadLines;DWORD FECQueueOverflows;DWORD FECCorrectedLines;DWORD FECUncorrectableLines;DWORD BundlesProcessed;DWORD BundlesSent2IP;DWORD FilteredLines;};
typedef DWORD ( *LPD3DHAL_DRAWONEINDEXEDPRIMITIVECB)(LPD3DHAL_DRAWONEINDEXEDPRIMITIVEDATA);
typedef void ( *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwError, DWORD cbTransferred, LPWSAOVERLAPPED lpOverlapped, DWORD dwFlags);
typedef ULONG ( *PWINDBG_GET_THREAD_CONTEXT_ROUTINE)(ULONG Processor, PCONTEXT lpContext, ULONG cbSizeOfContext);
typedef ULONG ( *PWINDBG_SET_THREAD_CONTEXT_ROUTINE)(ULONG Processor, PCONTEXT lpContext, ULONG cbSizeOfContext);
struct _CHANGER_INITIALIZE_ELEMENT_STATUS {CHANGER_ELEMENT_LIST ElementList;BOOLEAN BarCodeScan;};
struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS {ULONG NumAdapters;IPAddr Address[1];};
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A {DWORD cbSize;CHAR DevicePath[1];};
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W {DWORD cbSize;WCHAR DevicePath[1];};
struct tagKS_DATAFORMAT_VIDEOINFO_PALETTE {KSDATAFORMAT DataFormat;KS_VIDEOINFO VideoInfo;};
struct _01DCE0ED23F464638BF845FBE919C7FC {KSP_NODE Property;ULONG EsPid;};
struct _03532CD8BA12737E900F44108AB1BA2F {BOOLEAN AcOnLine;BOOLEAN BatteryPresent;BOOLEAN Charging;BOOLEAN Discharging;BOOLEAN Spare1[4];DWORD MaxCapacity;DWORD RemainingCapacity;DWORD Rate;DWORD EstimatedTime;DWORD DefaultAlert1;DWORD DefaultAlert2;};
struct _060F75F85D33090A279ABE5EFCC5AB4A {KSPROPERTY Property;ULONG Standard;};
struct _07B7FBDB71A394C363DCB969C30B9F57 {KSPROPERTY Property;VBICODECFILTERING_STATISTICS_COMMON Statistics;};
struct _097132A3DAC724C77C2462A4DC4AA652 {KSDATAFORMAT DataFormat;WAVEFORMATEX WaveFormatEx;};
struct _0D4D90B30C078E58E26CBA964C3C5A4B {KSEVENT Event;ULONG NodeId;ULONG Reserved;};
struct _0E076CBD8F5A7ED08B697C5009EDFCFF {KSIDENTIFIER PropTypeSet;ULONG Id;ULONG PropertyLength;};
struct _12A419A691843E3FACBCDACF473D8E54 {BOOL Mute;LONG Level;};
struct _13B347001B2B96C65D01839EEA37C971 {INT cDig;ULONG dwInFlags;ULONG dwOutFlags;INT cchUsed;INT nBaseShift;INT nPwr10;};
struct _155DA1A439C400442DF8DC3CA0B009F1 {ULONG AccessFlags;ULONG DescriptionSize;KSIDENTIFIER PropTypeSet;ULONG MembersListCount;ULONG Reserved;};
struct _1889F3BAB83DF1AC38A4E0627115688D {ULONG Size;ULONG Pin;WCHAR SymbolicLinkName[1];};
struct _190FAF90ED71AB17CA7DE27E94D1BCF3 {KSPROPERTY Property;VBICODECFILTERING_STATISTICS_NABTS Statistics;};
struct _1A75AE2BAA617C024EDEDCFC2DDC14A8 {KSPROPERTY Property;ULONG MixerPinId;ULONG Reserved;};
struct _1C9ED8E2FE494C714F8336D090291E50 {DWORD style;DWORD dwExtendedStyle;WORD cdit;short x;short y;short cx;short cy;};
struct _1CE0BD7852F87226759D0185D4AC1198 {KSPROPERTY Property;VBICODECFILTERING_STATISTICS_CC_PIN Statistics;};
struct _1D3D1B49856810D80BCDEEA6F14E981E {BOOL Mute;LONG Minimum;LONG Maximum;LONG Reset;};
struct _1F16BBD766B6BEFB723ABEAEF53457A3 {KSPROPERTY Property;VBICODECFILTERING_STATISTICS_COMMON_PIN Statistics;};
struct _23496AA6B538BC04EA278D40B88E7395 {KSPROPERTY Property;KSPIN_MEDIUM IFMedium;};
struct _26873349DB0A36B1F3161FA857CA70AC {KSPROPERTY Property;KSRATE Rate;};
struct _2E8FF8F0F30DAB89972BBD12E0BA3A8E {ULONG Attributes;ULONG BufferSize;PVOID BufferAddress;};
struct _2FB1DA8EC643BE4B9CF4F2ACCAFA1124 {WORD cLength;WORD nVersion;int fFullPathTitle : 1;int fSaveLocalView : 1;int fNotShell : 1;int fSimpleDefault : 1;int fDontShowDescBar : 1;int fNewWindowMode : 1;int fShowCompColor : 1;int fDontPrettyNames : 1;int fAdminsCreateCommonGroups : 1;unsigned int fUnusedFlags : 7;UINT fMenuEnumFilter;};
struct _358B21B769DBB67C3050F61FED658732 {KSPROPERTY Property;ULONG Mode;ULONG StandardsSupported;ULONG MinFrequency;ULONG MaxFrequency;ULONG TuningGranularity;ULONG NumberOfInputs;ULONG SettlingTime;ULONG Strategy;};
struct _3878B18F15C290CF7BC80116234DE41C {HANDLE QualityManager;PVOID Context;};
struct _39A7E4ECA0CDD25B70D9543F73C0D523 {DWORDLONG SteppingDelta;KSPROPERTY_BOUNDS_LONGLONG Bounds;};
struct _3A744348A6C9F73853F568E19FD6B4F7 {REFERENCE_TIME StartTime;LONG Rate;};
struct _3D26434F5A7D20980B51C6D4C88FA6DE {DWORDLONG StartFileReferenceNumber;USN LowUsn;USN HighUsn;};
struct _40B3E31023928B11E2A8685514812B52 {KSDATAFORMAT DataFormat;KSDSOUND_BUFFERDESC BufferDesc;};
struct _455481A63A960E136730B1239333B9FD {DWORD fccType;DWORD fccHandler;DWORD dwKeyFrameEvery;DWORD dwQuality;DWORD dwBytesPerSecond;DWORD dwFlags;LPVOID lpFormat;DWORD cbFormat;LPVOID lpParms;DWORD cbParms;DWORD dwInterleaveEvery;};
struct _46B8CD9DF897759D0306203A2121EA8B {WORD mtOption;WORD mtID;WCHAR mtString[1];};
struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38 {NMHDR hdr;COMBOBOXEXITEMA ceItem;};
struct _518AEB1FEE0990110D4FC7592EB5CC55 {DS3DVECTOR Position;DS3DVECTOR Velocity;DS3DVECTOR OrientFront;DS3DVECTOR OrientTop;FLOAT DistanceFactor;FLOAT RolloffFactor;FLOAT DopplerFactor;};
struct _52BD71AC0F61B53F3E44045ED088295E {LONGLONG Duration;ULONG FrameFlags;ULONG Reserved;};
struct _56FA1B9DDCE9D648FE900988960BAD6F {KSPROPERTY Property;ULONG StandardsSupported;ULONG Capabilities;ULONG SettlingTime;ULONG HSyncPerVSync;};
struct _5B98A3A85E20DBA203FE93F0C6DC9B6B {KSPROPERTY Property;KS_AMVPSIZE Size;};
struct _5C0C72291B37B22FE700A61795928759 {ACCESS_MASK DesiredAccess;DWORD SecurityIds[1];};
struct _63C7C0E53552AFE1EE8EC0B0F6807449 {HWND hwnd;RECT rc;};
struct _686FDF1C0C03C3D9039AD8B14FB9C99A {PVOID Context;ULONG Status;};
struct _69DAD432D0597BAB6A67398C913F94DB {KSPROPERTY Property;ULONG PinId;ULONG Reserved;};
struct _6F08919EF02DAA05323F80511ECED656 {KSPROPERTY Property;ULONG NumberOfInputs;ULONG NumberOfOutputs;};
struct _7445C9FCFCC2899651BCA0E341BC0369 {KSNODEPROPERTY NodeProperty;ULONG DevSpecificId;ULONG DeviceInfo;ULONG Length;};
struct _7545F1A067A9FBB43FDF50E78E6B08BD {SYSTEMTIME st;USHORT wDayOfYear;};
struct _756B7C543A2D8873FCA38AB7A21F7B82 {NMHDR hdr;DWORD dwFlag;int iWidth;int iHeight;};
struct _764676431BC78EE50306C71955FB365D {KSPROPERTY Property;ULONG Value;};
struct _76E0DBF45CB9E280DCDAD06E7D8FE87F {LPBITMAPINFOHEADER lpbiIn;LPBITMAPINFOHEADER lpbiSuggest;int dxSrc;int dySrc;int dxDst;int dyDst;HIC hicDecompressor;};
struct _782713D97F3B48E7FFD9354B90BFCE34 {KSEVENTDATA KsEventData;DWORDLONG Position;};
struct _7C92D00B816E38F8096F1C793288C884 {UINT cbSize;DWORD dwMask;int cxPad;int cyPad;int cxBarPad;int cyBarPad;int cxButtonSpacing;int cyButtonSpacing;};
struct _7D6AD1D4C0599A70ED2A75DF53A62D54 {LONGLONG Current;LONGLONG Stop;KS_SEEKING_FLAGS CurrentFlags;KS_SEEKING_FLAGS StopFlags;};
struct _7DEDD44825251A4EAA915BE1158FDB4F {_7DEDD44825251A4EAA915BE1158FDB4F___DA7EE1E32CD45FB8635BE676609FC669 __anonymous0;ULONG PoolType;ULONG Frames;ULONG FrameSize;ULONG FileAlignment;ULONG Reserved;};
struct _7FAA4336E151361F9CD171DE989684F0 {DWORD ByteCount;WORD MajorVersion;WORD MinorVersion;};
struct _8276AF68B2084DDEC7235E96B5A3DDF6 {ULONG Size;ULONG Flags;GUID Attribute;};
struct _8363E2736332812C7A22E557719FD114 {DWORDLONG UsnJournalID;USN FirstUsn;USN NextUsn;USN LowestValidUsn;USN MaxUsn;DWORDLONG MaximumSize;DWORDLONG AllocationDelta;};
struct _83A144ADE81B1E4C267934DC64843ED5 {DWORD dwFlags;int iStart;int iLen;LPPALETTEENTRY lppe;};
struct _85CBE24E9ED55DBB779718CA5D73A273 {KSPROPERTY Property;ULONG Mode;};
struct _8630A1F515F1D9088A894BA95A0F4D66 {KSPROPERTY Property;VBICODECFILTERING_SCANLINES Scanlines;};
struct _8765F39B1D4DEFD1F2F8643F85B5D457 {ULONG Flags;ULONG Control;WAVEFORMATEX WaveFormatEx;};
struct _8C7301159AF0C1BFC267CBF90877013D {NMHDR hdr;int iItemid;WCHAR szText[260];};
struct _8DF64ED1B184087013973064ABC778F1 {BYTE vsc;WCHAR *pwsz;};
struct _91BD25BE856B91F4F94C146E39BAA29E {GUID Manufacturer;GUID Product;GUID Component;GUID Name;ULONG Version;ULONG Revision;};
struct _947C6FA139885FA2B0DE7F2A3FDD942C {DWORD style;DWORD dwExtendedStyle;short x;short y;short cx;short cy;WORD id;};
struct _976F82B52AD5D008419379398D47AE46 {DWORD UsnSourceInfo;HANDLE VolumeHandle;DWORD HandleInfo;};
struct _97739C7249C02ACEBAF17DFC34E3F72B {KSPROPERTY Property;KSMULTIPLE_ITEM MultipleItem;};
struct _98D21277AAAA3049664E864EBED0B60A {KS_FRAMING_RANGE Range;ULONG InPlaceWeight;ULONG NotInPlaceWeight;};
struct _99C6912CDB5C12269FDD73BE73429D8B {KSMETHOD Method;ULONG NodeId;ULONG Reserved;};
struct _99F880E2DB2F1E54A137D02CDE4F02E9 {UINT cbSize;DWORD dwFlags;int iItem;DWORD dwReserved;};
struct _9FEC9D2A03C37051BDB5508CF5CADF1F {DWORDLONG UsnJournalID;DWORD DeleteFlags;};
struct _A0026B003AB75CC8BFC049DB25C2779D {unsigned int DispatchTableCount;RPC_DISPATCH_FUNCTION *DispatchTable;LONG_PTR Reserved;};
struct _A07373D2A5755254DCD028456AB4EC3B {KSEVENTDATA EventData;LONGLONG MarkTime;};
struct _A156F3783D3AF89709906294AAADEE96 {KSDATARANGE DataRange;ULONG MaximumChannels;ULONG MinimumBitsPerSample;ULONG MaximumBitsPerSample;ULONG MinimumSampleFrequency;ULONG MaximumSampleFrequency;};
struct _A35FF47659D3E73F219744D22283F451 {KSPROPERTY Property;ULONG Flags;ULONG DeviceNumber;};
struct _A4CC0F087DE00420119DAAB092DFFA3E {KSPROPERTY Property;ULONG NodeId;ULONG Reserved;};
union _A4FB595EF421231CAF150DDD3288A6D5 {_A4FB595EF421231CAF150DDD3288A6D5___33A5881EA3D20175AF6F6CBC82269B7B __anonymous0;LONGLONG Alignment;};
struct _AA58E045DEB5C5C814AE34C120D7C43C {DWORD dwHALVersion;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;};
struct _AC9A5C69A2E8BFD7F981D24477498145 {LONG Channel;FLOAT VolSmoothScale;FLOAT TotalDryAttenuation;FLOAT TotalWetAttenuation;LONG SmoothFrequency;LONG Delay;};
struct _B03639772012518ABC96BF05B41D5C12 {KSALLOCATOR_FRAMING_EX Framing;ULONG AllocatedFrames;ULONG Reserved;};
struct _B04A80E61A6C52E3FD4D22A5F125C77E {KSPROPERTY Property;ULONG StreamIndex;ULONG VideoControlCaps;};
struct _B32EBC34E16EC960AF2175E3ACF4C5B6 {HINSTANCE hInstOld;UINT_PTR nIDOld;HINSTANCE hInstNew;UINT_PTR nIDNew;int nButtons;};
struct _B62AAF3B70FEB5C8D5EF5D71926BC992 {KSPROPERTY Property;ULONG Frequency;ULONG LastFrequency;ULONG TuningFlags;ULONG VideoSubChannel;ULONG AudioSubChannel;ULONG Channel;ULONG Country;};
struct _BA718A362089753A7EB60B21429558A7 {ULONG SteppingDelta;ULONG Reserved;KSPROPERTY_BOUNDS_LONG Bounds;};
struct _BDE91A4D4766441856A2EB7036E539BD {KSEVENTDATA EventData;LONGLONG TimeBase;LONGLONG Interval;};
struct _BEA4C6939D98A17C28446F73864087A3 {NMHDR hdr;BOOL fChanged;int iNewSelection;char szText[260];int iWhy;};
struct _BF6BFD8678B7E7ABDC56122D693BAF10 {ULONG InputChannels;ULONG OutputChannels;KSAUDIO_MIX_CAPS Capabilities[1];};
struct _C18AA754B44D3B0CE088F6A6B0863744 {ULONG PelsWidth;ULONG PelsHeight;ULONG BitsPerPel;WCHAR DeviceID[1];};
struct _C6963F188D9781F9428F32FE3A3801AF {UI_TYPE UIType;_C6963F188D9781F9428F32FE3A3801AF___B3542C9802D50308928B7299817A649E __anonymous0;};
struct _C8A55C2939C105561C2DA558734F3C5E {KSPROPERTY Property;ULONG PinId;ULONG NodeId;ULONG Flags;ULONG Reserved;};
union _C9F2A16A1B5FC998B91DA494984E0FDB {_C9F2A16A1B5FC998B91DA494984E0FDB___0559678CAE7576A37561112FDF9C20E6 __anonymous0;_C9F2A16A1B5FC998B91DA494984E0FDB___F7C05C0C56E55CB044DFD46C70BB2992 __anonymous1;};
struct _CE02AD95896D5CE1FBC89EB4094A5E1C {ULONG dwFlags;ULONG dwReserved;WCHAR wszFolder[260];};
struct _D63E714A239F9C0D1FE2D222C2E0E7D5 {REFERENCE_TIME OutputZeroTime;LONG Rate;};
struct _D86AEF8896DDE0BDF211E48E78F8BB6F {KSPROPERTY Property;ULONG NumberOfLines;ULONG SignalLocked;};
struct _D890D4C8B96B04D8C981ECF31CD55F01 {LARGE_INTEGER StartingLcn;LARGE_INTEGER BitmapSize;BYTE Buffer[1];};
struct _DB6743270A05FF5B7AB17563AEBB3A96 {KSPROPERTY Property;VBICODECFILTERING_NABTS_SUBSTREAMS Substreams;};
struct _DC731844EB8703AC39E0F1B64989CDCD {DWORD dwSize;DWORD fccType;DWORD fccHandler;DWORD dwFlags;DWORD dwVersion;DWORD dwVersionICM;WCHAR szName[16];WCHAR szDescription[128];WCHAR szDriver[128];};
struct _DCD76CF5A248684E95EEC87F56AA655C {LARGE_INTEGER VolumeSerialNumber;LARGE_INTEGER NumberSectors;LARGE_INTEGER TotalClusters;LARGE_INTEGER FreeClusters;LARGE_INTEGER TotalReserved;DWORD BytesPerSector;DWORD BytesPerCluster;DWORD BytesPerFileRecordSegment;DWORD ClustersPerFileRecordSegment;LARGE_INTEGER MftValidDataLength;LARGE_INTEGER MftStartLcn;LARGE_INTEGER Mft2StartLcn;LARGE_INTEGER MftZoneStart;LARGE_INTEGER MftZoneEnd;};
struct _E054F7F0B81E76E3D6D098531C7E763C {ULONG BufferSize;ULONG NextWmiRegInfo;ULONG RegistryPath;ULONG MofResourceName;ULONG GuidCount;WMIREGGUIDW WmiRegGuid[];};
struct _E15D7B7CA61FF43DF93005DFD376A388 {KSPROPERTY Property;ULONG CurrentFrequency;ULONG PLLOffset;ULONG SignalStrength;ULONG Busy;};
struct _E21F85AFDEE9EAF37885ADBF8938BB0C {KSALLOCATOR_FRAMING Framing;ULONG AllocatedFrames;ULONG Reserved;};
struct _E49E18AFB8FDA9EDC5FD9E2015544A93 {DWORD Size;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD GlobalFlagsClear;DWORD GlobalFlagsSet;DWORD CriticalSectionDefaultTimeout;DWORD DeCommitFreeBlockThreshold;DWORD DeCommitTotalFreeThreshold;DWORD LockPrefixTable;DWORD MaximumAllocationSize;DWORD VirtualMemoryThreshold;DWORD ProcessHeapFlags;DWORD ProcessAffinityMask;WORD CSDVersion;WORD Reserved1;DWORD EditList;DWORD SecurityCookie;DWORD SEHandlerTable;DWORD SEHandlerCount;};
struct _E4A6BAB3223452EC45F6B117A37FFCF9 {KSPROPERTY Property;VBICODECFILTERING_STATISTICS_NABTS_PIN Statistics;};
struct _E4D39CEDA60A9A842177218EB3078B88 {KSPROPERTY Property;ULONG InputIndex;};
struct _E56F877AE116898CEBF188009740BA30 {ULONG ulPID;MEDIA_SAMPLE_CONTENT MediaSampleContent;};
struct _E5C551D5220B94E855DFD2A46F971A3B {KSPROPERTY Property;VBICODECFILTERING_CC_SUBSTREAMS Substreams;};
struct _E76253F876E841F225888AB457FD0286 {NMHDR hdr;COMBOBOXEXITEMW ceItem;};
struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1 {LONGLONG Time;ULONG Numerator;ULONG Denominator;};
struct _EA4AC72E281160164D445E15D4425ADE {KS_AMVPSIZE Size;DWORD MaxPixelsPerSecond;DWORD Reserved;};
struct _EA4AF2A6DC8AE690E5FA5BC5736FE7C7 {DWORD NextEntryOffset;DWORD FileIndex;DWORD FileNameLength;WCHAR FileName[1];};
struct _EA831C4C2E16EF6F2B7E490157D80D27 {DWORD Restart;SID Sid;};
struct _ECC65BA02B08F93DE1D3AD2A06446B79 {ULONG Enabled;KSDS3D_ITD_PARAMS LeftParams;KSDS3D_ITD_PARAMS RightParams;ULONG Reserved;};
struct _ECD9D23603D8BADEE24156B8BE3276B4 {KSPROPERTY Property;ULONG IndexInputPin;ULONG IndexOutputPin;ULONG CanRoute;};
struct _F1FF9EB17A5B0DC512AB60E4FE6215DC {GUID PropertySet;ULONG Count;};
struct _F2115D41876A8CDF2A6608801240E71C {KSPROPERTY Property;GUID PinCategory;GUID PinName;};
struct _F9B51A3DB5554E7753FB9DD51D5E00E5 {POWER_ACTION Action;DWORD Flags;DWORD EventCode;};
struct _FB17C9225429EF808B128BCE70FFD0DB {ULONG Size;ULONG Enabled;BOOL SwapChannels;BOOL ZeroAzimuth;BOOL CrossFadeOutput;ULONG FilterSize;};
struct _FB8A4E21AD43EDA8BFCCEEFE99FC59C9 {KSPROPERTY Property;VBICODECFILTERING_STATISTICS_CC Statistics;};
struct _FBE7179BAB40555F1A13AD3C5BC3BB71 {BOOL fStereo;ULONG DualMode;};
struct _FDD48878D337B9676F07B6A46EC3FECC {SE_TECHNIQUE Technique;ULONG Center;ULONG Depth;ULONG Reserved;};
typedef DWORD ( *LPDDHALVPORTCB_CANCREATEVIDEOPORT)(LPDDHAL_CANCREATEVPORTDATA);
struct STORAGE_BREAK_RESERVATION_REQUEST {DWORD Length;BYTE _unused;BYTE PathId;BYTE TargetId;BYTE Lun;};
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedPrivateKey;};
struct _ENCRYPTION_CERTIFICATE_HASH_LIST {DWORD nCert_Hash;PENCRYPTION_CERTIFICATE_HASH *pUsers;};
struct tagKS_DATAFORMAT_VIDEOINFOHEADER2 {KSDATAFORMAT DataFormat;KS_VIDEOINFOHEADER2 VideoInfoHeader2;};
typedef DWORD ( *LPDDHALSURFCB_ADDATTACHEDSURFACE)(LPDDHAL_ADDATTACHEDSURFACEDATA);
typedef DWORD ( *LPDDHALSURFCB_SETOVERLAYPOSITION)(LPDDHAL_SETOVERLAYPOSITIONDATA);
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {DWORD cbSize;CRYPT_DATA_BLOB EncryptedKey;};
struct _IMAGE_RESOURCE_DIRECTORY_STRING {WORD Length;CHAR NameString[1];};
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {DWORD NumberOfAssignedProcesses;DWORD NumberOfProcessIdsInList;ULONG_PTR ProcessIdList[1];};
struct _TRUSTED_DOMAIN_AUTH_INFORMATION {ULONG IncomingAuthInfos;PLSA_AUTH_INFORMATION IncomingAuthenticationInformation;PLSA_AUTH_INFORMATION IncomingPreviousAuthenticationInformation;ULONG OutgoingAuthInfos;PLSA_AUTH_INFORMATION OutgoingAuthenticationInformation;PLSA_AUTH_INFORMATION OutgoingPreviousAuthenticationInformation;};
struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA {HANDLE hClientToken;LPWIN_CERTIFICATE lpCertificate;};
struct tagKS_DATAFORMAT_VIDEOINFOHEADER {KSDATAFORMAT DataFormat;KS_VIDEOINFOHEADER VideoInfoHeader;};
struct tagMIXERCONTROLDETAILS_LISTTEXTA {DWORD dwParam1;DWORD dwParam2;CHAR szName[64];};
struct tagMIXERCONTROLDETAILS_LISTTEXTW {DWORD dwParam1;DWORD dwParam2;WCHAR szName[64];};
typedef DWORD ( *LPDDHALEXEBUFCB_CANCREATEEXEBUF)(LPDDHAL_CANCREATESURFACEDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_GETCOMPBUFFINFO)(LPDDHAL_GETMOCOMPCOMPBUFFDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_GETINTERNALINFO)(LPDDHAL_GETINTERNALMOCOMPDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETOUTPUTFORMATS)(LPDDHAL_GETVPORTOUTPUTFORMATDATA);
typedef void ( *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);
typedef BOOL ( *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(HCRYPTASYNC hAsyncRetrieve);
typedef void ( *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR pszParamOid, LPVOID pvParam);
typedef BOOL ( *PFN_PROVIDER_CERTCHKPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSignerChain, DWORD idxCounterSigner);
struct _CERT_X942_DH_VALIDATION_PARAMS {CRYPT_BIT_BLOB seed;DWORD pgenCounter;};
struct _D3DNTHAL_CONTEXTDESTROYALLDATA {DWORD dwPID;HRESULT ddrval;};
struct _MSV1_0_SUPPLEMENTAL_CREDENTIAL {ULONG Version;ULONG Flags;UCHAR LmPassword[16];UCHAR NtPassword[16];};
struct _VBICAP_PROPERTIES_PROTECTION_S {KSPROPERTY Property;ULONG StreamIndex;ULONG Status;};
struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {GUID *SubjectType;WIN_TRUST_SUBJECT Subject;};
struct creative_fastspeech10format_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef DWORD ( *LPD3DNTHAL_CONTEXTDESTROYALLCB)(LPD3DNTHAL_CONTEXTDESTROYALLDATA);
typedef DWORD ( *LPDDHALVPORTCB_CREATEVIDEOPORT)(LPDDHAL_CREATEVPORTDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETINPUTFORMATS)(LPDDHAL_GETVPORTINPUTFORMATDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETSIGNALSTATUS)(LPDDHAL_GETVPORTSIGNALDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETVPORTCONNECT)(LPDDHAL_GETVPORTCONNECTDATA);
typedef DWORD ( *PDD_VPORTCB_CANCREATEVIDEOPORT)(PDD_CANCREATEVPORTDATA);
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;};
struct _D3DNTHAL_DP2MULTIPLYTRANSFORM {D3DTRANSFORMSTATETYPE xfrmType;D3DMATRIX matrix;};
struct _D3DNTHAL_DP2TEXTURESTAGESTATE {WORD wStage;WORD TSState;DWORD dwValue;};
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {DWORD TimeDateStamp;WORD OffsetModuleName;WORD NumberOfModuleForwarderRefs;};
struct _IP_ADAPTER_DNS_SERVER_ADDRESS {_IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764 __anonymous0;struct _IP_ADAPTER_DNS_SERVER_ADDRESS *Next;SOCKET_ADDRESS Address;};
struct _KERB_INTERACTIVE_UNLOCK_LOGON {KERB_INTERACTIVE_LOGON Logon;LUID LogonId;};
struct _NDIS_802_11_NETWORK_TYPE_LIST {ULONG NumberOfItems;NDIS_802_11_NETWORK_TYPE NetworkType[1];};
struct _NEGOTIATE_CALLER_NAME_REQUEST {ULONG MessageType;LUID LogonId;};
struct _RTL_VERIFIER_THUNK_DESCRIPTOR {PCHAR ThunkName;PVOID ThunkOldAddress;PVOID ThunkNewAddress;};
struct creative_fastspeech8format_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct mediaspace_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct tagKS_DATAFORMAT_VBIINFOHEADER {KSDATAFORMAT DataFormat;KS_VBIINFOHEADER VBIInfoHeader;};
typedef DWORD ( *LPDDHALEXEBUFCB_DESTROYEXEBUF)(LPDDHAL_DESTROYSURFACEDATA);
typedef DWORD ( *LPDDHALKERNELCB_SYNCVIDEOPORT)(LPDDHAL_SYNCVIDEOPORTDATA);
typedef DWORD ( *PDD_SURFCB_ADDATTACHEDSURFACE)(PDD_ADDATTACHEDSURFACEDATA);
typedef DWORD ( *PDD_SURFCB_SETOVERLAYPOSITION)(PDD_SETOVERLAYPOSITIONDATA);
typedef ULONG ( *PEVENT_TRACE_BUFFER_CALLBACKA)(PEVENT_TRACE_LOGFILEA Logfile);
typedef ULONG ( *PEVENT_TRACE_BUFFER_CALLBACKW)(PEVENT_TRACE_LOGFILEW Logfile);
typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR lpBuffer, UINT uSize);
typedef void ( *TCI_ADD_FLOW_COMPLETE_HANDLER)(HANDLE ClFlowCtx, ULONG Status);
typedef void ( *TCI_DEL_FLOW_COMPLETE_HANDLER)(HANDLE ClFlowCtx, ULONG Status);
typedef void ( *TCI_MOD_FLOW_COMPLETE_HANDLER)(HANDLE ClFlowCtx, ULONG Status);
struct _CERT_BASIC_CONSTRAINTS2_INFO {BOOL fCA;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;};
struct _CERT_POLICY_CONSTRAINTS_INFO {BOOL fRequireExplicitPolicy;DWORD dwRequireExplicitPolicySkipCerts;BOOL fInhibitPolicyMapping;DWORD dwInhibitPolicyMappingSkipCerts;};
struct _D3DHAL_CONTEXTDESTROYALLDATA {DWORD dwPID;HRESULT ddrval;};
struct _ENUM_SERVICE_STATUS_PROCESSA {LPSTR lpServiceName;LPSTR lpDisplayName;SERVICE_STATUS_PROCESS ServiceStatusProcess;};
struct _GENERIC_BINDING_ROUTINE_PAIR {GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct _IP_ADAPTER_MULTICAST_ADDRESS {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_MULTICAST_ADDRESS *Next;SOCKET_ADDRESS Address;};
struct _KERB_QUERY_TKT_CACHE_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;LUID LogonId;};
struct _KERB_SMART_CARD_UNLOCK_LOGON {KERB_SMART_CARD_LOGON Logon;LUID LogonId;};
struct _LSA_FOREST_TRUST_BINARY_DATA {ULONG Length;PUCHAR Buffer;};
struct _LSA_FOREST_TRUST_DOMAIN_INFO {PSID Sid;LSA_UNICODE_STRING DnsName;LSA_UNICODE_STRING NetbiosName;};
struct _LSA_FOREST_TRUST_INFORMATION {ULONG RecordCount;PLSA_FOREST_TRUST_RECORD *Entries;};
struct _NDR_USER_MARSHAL_INFO_LEVEL1 {void *Buffer;unsigned int BufferSize;void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);struct IRpcChannelBuffer *pRpcChannelBuffer;ULONG_PTR Reserved[5];};
struct _SET_PARTITION_INFORMATION_EX {PARTITION_STYLE PartitionStyle;_SET_PARTITION_INFORMATION_EX___ECBF70424E32A71371BB3749E7C6F2EC __anonymous0;};
struct _SP_POWERMESSAGEWAKE_PARAMS_A {SP_CLASSINSTALL_HEADER ClassInstallHeader;CHAR PowerMessageWake[512];};
struct _SP_POWERMESSAGEWAKE_PARAMS_W {SP_CLASSINSTALL_HEADER ClassInstallHeader;WCHAR PowerMessageWake[512];};
struct tagEMRCREATEDIBPATTERNBRUSHPT {EMR emr;DWORD ihBrush;DWORD iUsage;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;};
struct tagKS_DATARANGE_BDA_TRANSPORT {KSDATARANGE DataRange;BDA_TRANSPORT_INFO BdaTransportInfo;};
typedef DWORD ( *LPD3DHAL_CONTEXTDESTROYALLCB)(LPD3DHAL_CONTEXTDESTROYALLDATA);
typedef DWORD ( *LPD3DNTHAL_DRAWPRIMITIVES2CB)(LPD3DNTHAL_DRAWPRIMITIVES2DATA);
typedef DWORD ( *LPD3DNTHAL_SETRENDERTARGETCB)(LPD3DNTHAL_SETRENDERTARGETDATA);
typedef DWORD ( *LPDDHALEXEBUFCB_CREATEEXEBUF)(LPDDHAL_CREATESURFACEDATA);
typedef DWORD ( *LPDDHALEXEBUFCB_UNLOCKEXEBUF)(LPDDHAL_UNLOCKDATA);
typedef DWORD ( *LPDDHALSURFCB_DESTROYSURFACE)(LPDDHAL_DESTROYSURFACEDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETFLIPSTATUS)(LPDDHAL_GETVPORTFLIPSTATUSDATA);
typedef DWORD ( *LPDDHAL_GETAVAILDRIVERMEMORY)(LPDDHAL_GETAVAILDRIVERMEMORYDATA);
typedef DWORD ( *LPDDHAL_WAITFORVERTICALBLANK)(LPDDHAL_WAITFORVERTICALBLANKDATA);
typedef DWORD ( *PDD_MOCOMPCB_GETCOMPBUFFINFO)(PDD_GETMOCOMPCOMPBUFFDATA);
typedef DWORD ( *PDD_MOCOMPCB_GETINTERNALINFO)(PDD_GETINTERNALMOCOMPDATA);
typedef DWORD ( *PDD_VPORTCB_GETOUTPUTFORMATS)(PDD_GETVPORTOUTPUTFORMATDATA);
typedef BOOLEAN ( *PSAM_PASSWORD_FILTER_ROUTINE)(PUNICODE_STRING AccountName, PUNICODE_STRING FullName, PUNICODE_STRING Password, BOOLEAN SetOperation);
typedef void ( *PWINDBG_EXTENSION_DLL_INIT32)(PWINDBG_EXTENSION_APIS32 lpExtensionApis, USHORT MajorVersion, USHORT MinorVersion);
typedef void ( *PWINDBG_EXTENSION_DLL_INIT64)(PWINDBG_EXTENSION_APIS64 lpExtensionApis, USHORT MajorVersion, USHORT MinorVersion);
typedef ULONG ( *PWINDBG_STACKTRACE_ROUTINE32)(ULONG FramePointer, ULONG StackPointer, ULONG ProgramCounter, PEXTSTACKTRACE32 StackFrames, ULONG Frames);
struct _CHANGER_READ_ELEMENT_STATUS {CHANGER_ELEMENT_LIST ElementList;BOOLEAN VolumeTagInfo;};
struct _CROSS_CERT_DIST_POINTS_INFO {DWORD dwSyncDeltaTime;DWORD cDistPoint;PCERT_ALT_NAME_INFO rgDistPoint;};
struct _CRYPT_PASSWORD_CREDENTIALSA {DWORD cbSize;LPSTR pszUsername;LPSTR pszPassword;};
struct _D3DHAL_DP2MULTIPLYTRANSFORM {D3DTRANSFORMSTATETYPE xfrmType;D3DMATRIX matrix;};
struct _D3DHAL_DP2TEXTURESTAGESTATE {WORD wStage;WORD TSState;DWORD dwValue;};
struct _D3DNTHAL_CONTEXTDESTROYDATA {ULONG_PTR dwhContext;HRESULT ddrval;};
struct _D3DNTHAL_TEXTUREDESTROYDATA {ULONG_PTR dwhContext;ULONG_PTR dwHandle;HRESULT ddrval;};
struct _DDNT_FREE_DEFERRED_AGP_DATA {DDNT_GETDRIVERINFO2DATA gdi2;DWORD dwProcessId;};
struct _ENCRYPTION_CERTIFICATE_LIST {DWORD nUsers;PENCRYPTION_CERTIFICATE *pUsers;};
struct _GET_CURRENT_PROCESS_ADDRESS {ULONG Processor;ULONG64 CurrentThread;ULONG64 Address;};
struct _IMAGE_RESOURCE_DIR_STRING_U {WORD Length;WCHAR NameString[1];};
struct _IMAGE_SEPARATE_DEBUG_HEADER {WORD Signature;WORD Flags;WORD Machine;WORD Characteristics;DWORD TimeDateStamp;DWORD CheckSum;DWORD ImageBase;DWORD SizeOfImage;DWORD NumberOfSections;DWORD ExportedNamesSize;DWORD DebugDirectorySize;DWORD SectionAlignment;DWORD Reserved[2];};
struct _PROCESSOR_POWER_POLICY_INFO {DWORD TimeCheck;DWORD DemoteLimit;DWORD PromoteLimit;BYTE DemotePercent;BYTE PromotePercent;BYTE Spare[2];unsigned int AllowDemotion : 1;unsigned int AllowPromotion : 1;unsigned int Reserved : 30;};
struct _SP_REGISTER_CONTROL_STATUSA {DWORD cbSize;PCSTR FileName;DWORD Win32Error;DWORD FailureCode;};
struct creative_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef DWORD ( *LPD3DHAL_DRAWONEPRIMITIVECB)(LPD3DHAL_DRAWONEPRIMITIVEDATA);
typedef DWORD ( *LPD3DNTHAL_CONTEXTDESTROYCB)(LPD3DNTHAL_CONTEXTDESTROYDATA);
typedef DWORD ( *LPD3DNTHAL_TEXTUREDESTROYCB)(LPD3DNTHAL_TEXTUREDESTROYDATA);
typedef DWORD ( *LPD3DNTHAL_TEXTUREGETSURFCB)(LPD3DNTHAL_TEXTUREGETSURFDATA);
typedef DWORD ( *LPDDHALCOLORCB_COLORCONTROL)(LPDDHAL_COLORCONTROLDATA);
typedef DWORD ( *LPDDHALKERNELCB_SYNCSURFACE)(LPDDHAL_SYNCSURFACEDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_QUERYSTATUS)(LPDDHAL_QUERYMOCOMPSTATUSDATA);
typedef DWORD ( *LPDDHALPALCB_DESTROYPALETTE)(LPDDHAL_DESTROYPALETTEDATA);
typedef DWORD ( *LPDDHALSURFCB_GETFLIPSTATUS)(LPDDHAL_GETFLIPSTATUSDATA);
typedef DWORD ( *LPDDHALSURFCB_UPDATEOVERLAY)(LPDDHAL_UPDATEOVERLAYDATA);
typedef DWORD ( *LPDDHALVPORTCB_COLORCONTROL)(LPDDHAL_VPORTCOLORDATA);
typedef DWORD ( *LPDDHALVPORTCB_DESTROYVPORT)(LPDDHAL_DESTROYVPORTDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETBANDWIDTH)(LPDDHAL_GETVPORTBANDWIDTHDATA);
typedef DWORD ( *PDD_VPORTCB_CREATEVIDEOPORT)(PDD_CREATEVPORTDATA);
typedef DWORD ( *PDD_VPORTCB_GETAUTOFLIPSURF)(PDD_GETVPORTAUTOFLIPSURFACEDATA);
typedef DWORD ( *PDD_VPORTCB_GETINPUTFORMATS)(PDD_GETVPORTINPUTFORMATDATA);
typedef DWORD ( *PDD_VPORTCB_GETSIGNALSTATUS)(PDD_GETVPORTSIGNALDATA);
typedef DWORD ( *PDD_VPORTCB_GETVPORTCONNECT)(PDD_GETVPORTCONNECTDATA);
typedef HRESULT ( *PFND3DNTPARSEUNKNOWNCOMMAND)(LPVOID lpvCommands, LPVOID *lplpvReturnedCommand);
struct _ADMINISTRATOR_POWER_POLICY {SYSTEM_POWER_STATE MinSleep;SYSTEM_POWER_STATE MaxSleep;DWORD MinVideoTimeout;DWORD MaxVideoTimeout;DWORD MinSpindownTimeout;DWORD MaxSpindownTimeout;};
struct _BY_HANDLE_FILE_INFORMATION {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD dwVolumeSerialNumber;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD nNumberOfLinks;DWORD nFileIndexHigh;DWORD nFileIndexLow;};
struct _CERT_AUTHORITY_INFO_ACCESS {DWORD cAccDescr;PCERT_ACCESS_DESCRIPTION rgAccDescr;};
struct _CERT_NAME_CONSTRAINTS_INFO {DWORD cPermittedSubtree;PCERT_GENERAL_SUBTREE rgPermittedSubtree;DWORD cExcludedSubtree;PCERT_GENERAL_SUBTREE rgExcludedSubtree;};
struct _CERT_POLICY_QUALIFIER_INFO {LPSTR pszPolicyQualifierId;CRYPT_OBJID_BLOB Qualifier;};
struct _CMSG_ENCRYPTED_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;};
struct _CRYPT_ALGORITHM_IDENTIFIER {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _CRYPT_ATTRIBUTE_TYPE_VALUE {LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _CRYPT_DECRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;DWORD cCertStore;HCERTSTORE *rghCertStore;};
struct _D3DNTHAL_DP2DRAWPRIMITIVE2 {D3DPRIMITIVETYPE primType;DWORD FirstVertexOffset;DWORD PrimitiveCount;};
struct _GET_CURRENT_THREAD_ADDRESS {ULONG Processor;ULONG64 Address;};
struct _IP_ADAPTER_ANYCAST_ADDRESS {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_ANYCAST_ADDRESS *Next;SOCKET_ADDRESS Address;};
struct _LSA_REFERENCED_DOMAIN_LIST {ULONG Entries;PLSA_TRUST_INFORMATION Domains;};
struct _MEMORY_BASIC_INFORMATION64 {ULONGLONG BaseAddress;ULONGLONG AllocationBase;DWORD AllocationProtect;DWORD __alignment1;ULONGLONG RegionSize;DWORD State;DWORD Protect;DWORD Type;DWORD __alignment2;};
struct _MIB_IPMCAST_BOUNDARY_TABLE {DWORD dwNumEntries;MIB_IPMCAST_BOUNDARY table[1];};
struct _POLICY_ACCOUNT_DOMAIN_INFO {LSA_UNICODE_STRING DomainName;PSID DomainSid;};
struct _POLICY_PRIMARY_DOMAIN_INFO {LSA_UNICODE_STRING Name;PSID Sid;};
struct _QUERY_SERVICE_LOCK_STATUSA {DWORD fIsLocked;LPSTR lpLockOwner;DWORD dwLockDuration;};
struct _REQUEST_RAW_ENCRYPTED_DATA {LONGLONG FileOffset;DWORD Length;};
struct _SHChangeProductKeyAsIDList {USHORT cb;WCHAR wszProductKey[39];USHORT cbZero;};
struct _SP_TROUBLESHOOTER_PARAMS_A {SP_CLASSINSTALL_HEADER ClassInstallHeader;CHAR ChmFile[260];CHAR HtmlTroubleShooter[260];};
struct _SP_TROUBLESHOOTER_PARAMS_W {SP_CLASSINSTALL_HEADER ClassInstallHeader;WCHAR ChmFile[260];WCHAR HtmlTroubleShooter[260];};
struct contres_vqlpcwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct nms_vbxadpcmmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct tagKS_DATARANGE_ANALOGVIDEO {KSDATARANGE DataRange;KS_ANALOGVIDEOINFO AnalogVideoInfo;};
struct tagSOLE_AUTHENTICATION_LIST {DWORD cAuthInfo;SOLE_AUTHENTICATION_INFO *aAuthInfo;};
struct IMAGE_AUX_SYMBOL_TOKEN_DEF {BYTE bAuxType;BYTE bReserved;DWORD SymbolTableIndex;BYTE rgbReserved[12];};
typedef DWORD ( *LPD3DHAL_DRAWPRIMITIVES2CB)(LPD3DHAL_DRAWPRIMITIVES2DATA);
typedef DWORD ( *LPD3DHAL_RENDERPRIMITIVECB)(LPD3DHAL_RENDERPRIMITIVEDATA);
typedef DWORD ( *LPD3DHAL_SETRENDERTARGETCB)(LPD3DHAL_SETRENDERTARGETDATA);
typedef DWORD ( *LPD3DNTHAL_CONTEXTCREATECB)(LPD3DNTHAL_CONTEXTCREATEDATA);
typedef DWORD ( *LPD3DNTHAL_TEXTURECREATECB)(LPD3DNTHAL_TEXTURECREATEDATA);
typedef DWORD ( *LPDDHALEXEBUFCB_LOCKEXEBUF)(LPDDHAL_LOCKDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_BEGINFRAME)(LPDDHAL_BEGINMOCOMPFRAMEDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_GETFORMATS)(LPDDHAL_GETMOCOMPFORMATSDATA);
typedef DWORD ( *LPDDHALSURFCB_GETBLTSTATUS)(LPDDHAL_GETBLTSTATUSDATA);
typedef DWORD ( *LPDDHALVPORTCB_WAITFORSYNC)(LPDDHAL_WAITFORVPORTSYNCDATA);
typedef DWORD ( *LPDDHAL_UPDATENONLOCALHEAP)(LPDDHAL_UPDATENONLOCALHEAPDATA);
struct NDIS_BPC_CONNECTION_ENABLE {BPC_HANDLE nhConnection;BOOLEAN fEnabled;};
typedef DWORD ( *PDD_KERNELCB_SYNCVIDEOPORT)(PDD_SYNCVIDEOPORTDATA);
typedef BOOL ( *PFN_CRYPT_CANCEL_RETRIEVAL)(DWORD dwFlags, void *pvArg);
typedef void ( *PWINDBG_EXTENSION_DLL_INIT)(PWINDBG_EXTENSION_APIS lpExtensionApis, USHORT MajorVersion, USHORT MinorVersion);
typedef ULONG ( *PWINDBG_STACKTRACE_ROUTINE)(ULONG FramePointer, ULONG StackPointer, ULONG ProgramCounter, PEXTSTACKTRACE StackFrames, ULONG Frames);
struct _BDA_ETHERNET_ADDRESS_LIST {ULONG ulcAddresses;BDA_ETHERNET_ADDRESS rgAddressl[1];};
struct _CERT_ISSUER_SERIAL_NUMBER {CERT_NAME_BLOB Issuer;CRYPT_INTEGER_BLOB SerialNumber;};
struct _CERT_POLICY_MAPPINGS_INFO {DWORD cPolicyMapping;PCERT_POLICY_MAPPING rgPolicyMapping;};
struct _D3DHAL_CONTEXTDESTROYDATA {ULONG_PTR dwhContext;HRESULT ddrval;};
struct _D3DNTHAL_DP2DRAWPRIMITIVE {D3DPRIMITIVETYPE primType;DWORD VStart;DWORD PrimitiveCount;};
struct _D3DNTHAL_DP2UPDATEPALETTE {DWORD dwPaletteHandle;WORD wStartIndex;WORD wNumEntries;};
struct _DBGKD_DEBUG_DATA_HEADER32 {LIST_ENTRY32 List;ULONG OwnerTag;ULONG Size;};
struct _DBGKD_DEBUG_DATA_HEADER64 {LIST_ENTRY64 List;ULONG OwnerTag;ULONG Size;};
struct _DD_FREE_DEFERRED_AGP_DATA {DD_GETDRIVERINFO2DATA gdi2;DWORD dwProcessId;};
struct _IMAGE_BOUND_FORWARDER_REF {DWORD TimeDateStamp;WORD OffsetModuleName;WORD Reserved;};
struct _NDIS_802_11_CONFIGURATION {ULONG Length;ULONG BeaconPeriod;ULONG ATIMWindow;ULONG DSConfig;NDIS_802_11_CONFIGURATION_FH FHConfig;};
struct _READ_ELEMENT_ADDRESS_INFO {DWORD NumberOfElements;CHANGER_ELEMENT_STATUS ElementStatus[1];};
struct _TAPE_GET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD DefaultBlockSize;DWORD MaximumBlockSize;DWORD MinimumBlockSize;DWORD MaximumPartitionCount;DWORD FeaturesLow;DWORD FeaturesHigh;DWORD EOTWarningZoneSize;};
struct _TAPE_SET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD EOTWarningZoneSize;};
struct _WIN32_FILE_ATTRIBUTE_DATA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;};
struct contres_cr10waveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct fmtowns_snd_waveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct sierra_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef DWORD ( *LPD3DHAL_CONTEXTDESTROYCB)(LPD3DHAL_CONTEXTDESTROYDATA);
typedef DWORD ( *LPD3DHAL_DRAWPRIMITIVESCB)(LPD3DHAL_DRAWPRIMITIVESDATA);
typedef DWORD ( *LPD3DHAL_TEXTUREDESTROYCB)(LPD3DHAL_TEXTUREDESTROYDATA);
typedef DWORD ( *LPD3DHAL_TEXTUREGETSURFCB)(LPD3DHAL_TEXTUREGETSURFDATA);
typedef DWORD ( *LPD3DNTHAL_SCENECAPTURECB)(LPD3DNTHAL_SCENECAPTUREDATA);
typedef DWORD ( *LPDDHALSURFCB_SETCLIPLIST)(LPDDHAL_SETCLIPLISTDATA);
typedef DWORD ( *LPDDHALSURFCB_SETCOLORKEY)(LPDDHAL_SETCOLORKEYDATA);
typedef DWORD ( *PDD_SURFCB_DESTROYSURFACE)(PDD_DESTROYSURFACEDATA);
typedef DWORD ( *PDD_VPORTCB_GETFLIPSTATUS)(PDD_GETVPORTFLIPSTATUSDATA);
typedef HRESULT ( *PFND3DPARSEUNKNOWNCOMMAND)(LPVOID lpvCommands, LPVOID *lplpvReturnedCommand);
typedef void ( *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV hStoreProv, DWORD dwFlags);
typedef int ( *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding, unsigned int RequestedMgmtOperation, RPC_STATUS *Status);
struct _CERT_CHAIN_ENGINE_CONFIG {DWORD cbSize;HCERTSTORE hRestrictedRoot;HCERTSTORE hRestrictedTrust;HCERTSTORE hRestrictedOther;DWORD cAdditionalStore;HCERTSTORE *rghAdditionalStore;DWORD dwFlags;DWORD dwUrlRetrievalTimeout;DWORD MaximumCachedCertificates;DWORD CycleDetectionModulus;};
struct _CERT_CHAIN_POLICY_STATUS {DWORD cbSize;DWORD dwError;LONG lChainIndex;LONG lElementIndex;void *pvExtraPolicyStatus;};
struct _CERT_CREATE_CONTEXT_PARA {DWORD cbSize;PFN_CRYPT_FREE pfnFree;void *pvFree;};
struct _CRYPT_SMIME_CAPABILITIES {DWORD cCapability;PCRYPT_SMIME_CAPABILITY rgCapability;};
struct _D3DHAL_DP2DRAWPRIMITIVE2 {D3DPRIMITIVETYPE primType;DWORD FirstVertexOffset;DWORD PrimitiveCount;};
struct _D3DNTHAL_DP2ADDDIRTYRECT {DWORD dwSurface;RECTL rDirtyArea;};
struct _D3DNTHAL_DP2SETCLIPPLANE {DWORD dwIndex;D3DVALUE plane[4];};
struct _D3DNTHAL_DP2SETTRANSFORM {D3DTRANSFORMSTATETYPE xfrmType;D3DMATRIX matrix;};
struct _D3DNTHAL_TEXTURESWAPDATA {ULONG_PTR dwhContext;ULONG_PTR dwHandle1;ULONG_PTR dwHandle2;HRESULT ddrval;};
struct _DRIVE_LAYOUT_INFORMATION {DWORD PartitionCount;DWORD Signature;PARTITION_INFORMATION PartitionEntry[1];};
struct _IMAGE_RESOURCE_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;WORD NumberOfNamedEntries;WORD NumberOfIdEntries;};
struct _KERB_TICKET_UNLOCK_LOGON {KERB_TICKET_LOGON Logon;LUID LogonId;};
struct _MSV1_0_INTERACTIVE_LOGON {MSV1_0_LOGON_SUBMIT_TYPE MessageType;UNICODE_STRING LogonDomainName;UNICODE_STRING UserName;UNICODE_STRING Password;};
struct _OUTPUT_DEBUG_STRING_INFO {LPSTR lpDebugStringData;WORD fUnicode;WORD nDebugStringLength;};
struct _PERF_INSTANCE_DEFINITION {DWORD ByteLength;DWORD ParentObjectTitleIndex;DWORD ParentObjectInstance;LONG UniqueID;DWORD NameOffset;DWORD NameLength;};
struct _PROPSHEETUI_GETICON_INFO {WORD cbSize;WORD Flags;WORD cxIcon;WORD cyIcon;HICON hIcon;};
struct _SP_SELECTDEVICE_PARAMS_W {SP_CLASSINSTALL_HEADER ClassInstallHeader;WCHAR Title[60];WCHAR Instructions[256];WCHAR ListLabel[30];WCHAR SubTitle[256];};
struct _SP_UNREMOVEDEVICE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD Scope;DWORD HwProfile;};
struct _TRUSTED_CONTROLLERS_INFO {ULONG Entries;PLSA_UNICODE_STRING Names;};
struct tagSHCSCHANGENOTIFYSTRUCT {LONG lEvent;LPCITEMIDLIST pidl1;LPCITEMIDLIST pidl2;};
typedef DWORD ( *LPD3DHAL_CONTEXTCREATECB)(LPD3DHAL_CONTEXTCREATEDATA);
typedef DWORD ( *LPD3DHAL_TEXTURECREATECB)(LPD3DHAL_TEXTURECREATEDATA);
typedef DWORD ( *LPD3DNTHAL_TEXTURESWAPCB)(LPD3DNTHAL_TEXTURESWAPDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_ENDFRAME)(LPDDHAL_ENDMOCOMPFRAMEDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_GETGUIDS)(LPDDHAL_GETMOCOMPGUIDSDATA);
typedef DWORD ( *LPDDHALSURFCB_SETPALETTE)(LPDDHAL_SETPALETTEDATA);
typedef DWORD ( *LPDDHAL_CANCREATESURFACE)(LPDDHAL_CANCREATESURFACEDATA);
typedef DWORD ( *LPDDHAL_FLIPTOGDISURFACE)(LPDDHAL_FLIPTOGDISURFACEDATA);
typedef DWORD ( *LPDDHAL_GETHEAPALIGNMENT)(LPDDHAL_GETHEAPALIGNMENTDATA);
typedef DWORD ( *LPDDHAL_SETEXCLUSIVEMODE)(LPDDHAL_SETEXCLUSIVEMODEDATA);
typedef void ( *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs, LPSTR *lpServiceArgVectors);
struct NDIS_BPC_ADDRESS_COMPARE {BOOLEAN fEqual;ULONG ulcbFirstOffset;ULONG ulcbFirstLength;ULONG ulcbSecondOffset;ULONG ulcbSecondLength;};
typedef DWORD ( *PDD_COLORCB_COLORCONTROL)(PDD_COLORCONTROLDATA);
typedef DWORD ( *PDD_GETAVAILDRIVERMEMORY)(PDD_GETAVAILDRIVERMEMORYDATA);
typedef DWORD ( *PDD_KERNELCB_SYNCSURFACE)(PDD_SYNCSURFACEDATA);
typedef DWORD ( *PDD_MOCOMPCB_QUERYSTATUS)(PDD_QUERYMOCOMPSTATUSDATA);
typedef DWORD ( *PDD_PALCB_DESTROYPALETTE)(PDD_DESTROYPALETTEDATA);
typedef DWORD ( *PDD_SURFCB_GETFLIPSTATUS)(PDD_GETFLIPSTATUSDATA);
typedef DWORD ( *PDD_SURFCB_UPDATEOVERLAY)(PDD_UPDATEOVERLAYDATA);
typedef DWORD ( *PDD_VPORTCB_COLORCONTROL)(PDD_VPORTCOLORDATA);
typedef DWORD ( *PDD_VPORTCB_DESTROYVPORT)(PDD_DESTROYVPORTDATA);
typedef DWORD ( *PDD_VPORTCB_GETBANDWIDTH)(PDD_GETVPORTBANDWIDTHDATA);
typedef DWORD ( *PDD_WAITFORVERTICALBLANK)(PDD_WAITFORVERTICALBLANKDATA);
typedef ULONG ( *PSYM_DUMP_FIELD_CALLBACK)(struct _FIELD_INFO *pField, PVOID UserContext);
typedef ULONG ( *PWINDBG_GET_EXPRESSION32)(PCSTR lpExpression);
typedef ULONG64 ( *PWINDBG_GET_EXPRESSION64)(PCSTR lpExpression);
struct _ADDRESS_LIST_DESCRIPTOR {ULONG MediaType;NETWORK_ADDRESS_LIST AddressList;};
struct _BIDI_RESPONSE_CONTAINER {DWORD Version;DWORD Flags;DWORD Count;BIDI_RESPONSE_DATA aData[1];};
struct _CERT_ACCESS_DESCRIPTION {LPSTR pszAccessMethod;CERT_ALT_NAME_ENTRY AccessLocation;};
struct _CERT_X942_DH_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB g;CRYPT_UINT_BLOB q;CRYPT_UINT_BLOB j;PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;};
struct _CHANGER_EXCHANGE_MEDIUM {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Source;CHANGER_ELEMENT Destination1;CHANGER_ELEMENT Destination2;BOOLEAN Flip1;BOOLEAN Flip2;};
struct _CMC_ADD_ATTRIBUTES_INFO {DWORD dwCmcDataReference;DWORD cCertReference;DWORD *rgdwCertReference;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _CMC_ADD_EXTENSIONS_INFO {DWORD dwCmcDataReference;DWORD cCertReference;DWORD *rgdwCertReference;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _CMC_TAGGED_CERT_REQUEST {DWORD dwBodyPartID;CRYPT_DER_BLOB SignedCertRequest;};
struct _CMC_TAGGED_CONTENT_INFO {DWORD dwBodyPartID;CRYPT_DER_BLOB EncodedContentInfo;};
struct _CRYPT_PROVIDER_PRIVDATA {DWORD cbStruct;GUID gProviderID;DWORD cbProvData;void *pvProvData;};
struct _CRYPT_REGISTER_ACTIONID {DWORD cbStruct;CRYPT_TRUST_REG_ENTRY sInitProvider;CRYPT_TRUST_REG_ENTRY sObjectProvider;CRYPT_TRUST_REG_ENTRY sSignatureProvider;CRYPT_TRUST_REG_ENTRY sCertificateProvider;CRYPT_TRUST_REG_ENTRY sCertificatePolicyProvider;CRYPT_TRUST_REG_ENTRY sFinalPolicyProvider;CRYPT_TRUST_REG_ENTRY sTestPolicyProvider;CRYPT_TRUST_REG_ENTRY sCleanupProvider;};
struct _CRYPT_RETRIEVE_AUX_INFO {DWORD cbSize;FILETIME *pLastSyncTime;DWORD dwMaxUrlRetrievalByteCount;};
struct _D3DHAL_DP2DRAWPRIMITIVE {D3DPRIMITIVETYPE primType;DWORD VStart;DWORD PrimitiveCount;};
struct _D3DHAL_DP2UPDATEPALETTE {DWORD dwPaletteHandle;WORD wStartIndex;WORD wNumEntries;};
struct _D3DNTHAL_DP2ADDDIRTYBOX {DWORD dwSurface;D3DBOX DirtyBox;};
struct _D3DNTHAL_DP2RENDERSTATE {D3DRENDERSTATETYPE RenderState;_D3DNTHAL_DP2RENDERSTATE___933A9CF36F1631E8E6BBB7EC5EB7821A __anonymous0;};
struct _DDNT_GETFORMATCOUNTDATA {DDNT_GETDRIVERINFO2DATA gdi2;DWORD dwFormatCount;DWORD dwReserved;};
struct _FILE_NOTIFY_INFORMATION {DWORD NextEntryOffset;DWORD Action;DWORD FileNameLength;WCHAR FileName[1];};
struct _IMAGE_IMPORT_DESCRIPTOR {_IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 __anonymous0;DWORD TimeDateStamp;DWORD ForwarderChain;DWORD Name;DWORD FirstThunk;};
struct _RSVP_FILTERSPEC_V6_FLOW {IN_ADDR_IPV6 Address;UCHAR UnUsed;UCHAR FlowLabel[3];};
struct _SP_ORIGINAL_FILE_INFO_A {DWORD cbSize;CHAR OriginalInfName[260];CHAR OriginalCatalogName[260];};
struct _SP_ORIGINAL_FILE_INFO_W {DWORD cbSize;WCHAR OriginalInfName[260];WCHAR OriginalCatalogName[260];};
struct _STORAGE_PREDICT_FAILURE {DWORD PredictFailure;BYTE VendorSpecific[512];};
struct _TRACE_GUID_REGISTRATION {LPCGUID Guid;HANDLE RegHandle;};
struct digiadpcmmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct g721_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD nAuxBlockSize;};
struct g723_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD cbExtraSize;WORD nAuxBlockSize;};
struct tagEMRSCALEVIEWPORTEXTEX {EMR emr;LONG xNum;LONG xDenom;LONG yNum;LONG yDenom;};
struct tagEMRSETCOLORADJUSTMENT {EMR emr;COLORADJUSTMENT ColorAdjustment;};
struct tagMCI_WAVE_DELETE_PARMS {DWORD_PTR dwCallback;DWORD dwFrom;DWORD dwTo;};
struct IKsAggregateControlVtbl {HRESULT ( *KsAddAggregate)(IKsAggregateControl *This,  GUID * AggregateClass);HRESULT ( *KsRemoveAggregate)(IKsAggregateControl *This,  GUID * AggregateClass);};
typedef DWORD ( *LPD3DHAL_SCENECAPTURECB)(LPD3DHAL_SCENECAPTUREDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_DESTROY)(LPDDHAL_DESTROYMOCOMPDATA);
typedef DWORD ( *LPDDHALPALCB_SETENTRIES)(LPDDHAL_SETENTRIESDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETFIELD)(LPDDHAL_GETVPORTFIELDDATA);
typedef DWORD ( *LPDDHAL_CREATESURFACEEX)(LPDDHAL_CREATESURFACEEXDATA);
typedef INT ( *LPNSPREMOVESERVICECLASS)(LPGUID lpProviderId, LPGUID lpServiceClassId);
typedef void ( *LPSERVICE_CALLBACK_PROC)(LPARAM lParam, HANDLE hAsyncTaskHandle);
typedef INT ( *LPWSCUNINSTALLNAMESPACE)(LPGUID lpProviderId);
typedef DWORD ( *PDD_MOCOMPCB_BEGINFRAME)(PDD_BEGINMOCOMPFRAMEDATA);
typedef DWORD ( *PDD_MOCOMPCB_GETFORMATS)(PDD_GETMOCOMPFORMATSDATA);
typedef DWORD ( *PDD_SURFCB_GETBLTSTATUS)(PDD_GETBLTSTATUSDATA);
typedef DWORD ( *PDD_VPORTCB_WAITFORSYNC)(PDD_WAITFORVPORTSYNCDATA);
typedef BOOL ( *PFN_CRYPT_ENUM_OID_INFO)(PCCRYPT_OID_INFO pInfo, void *pvArg);
typedef BOOL ( *PFN_DrvEnableDirectDraw)(DHPDEV, DD_CALLBACKS *, DD_SURFACECALLBACKS *, DD_PALETTECALLBACKS *);
typedef void ( *WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN);
struct _BIDI_REQUEST_CONTAINER {DWORD Version;DWORD Flags;DWORD Count;BIDI_REQUEST_DATA aData[1];};
struct _CERT_REVOCATION_STATUS {DWORD cbSize;DWORD dwIndex;DWORD dwError;DWORD dwReason;BOOL fHasFreshnessTime;DWORD dwFreshnessTime;};
struct _CMSG_CTRL_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;DWORD dwRecipientIndex;};
struct _CRYPT_SMIME_CAPABILITY {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _D3DHAL_DP2ADDDIRTYRECT {DWORD dwSurface;RECTL rDirtyArea;};
struct _D3DHAL_DP2SETCLIPPLANE {DWORD dwIndex;D3DVALUE plane[4];};
struct _D3DHAL_DP2SETTRANSFORM {D3DTRANSFORMSTATETYPE xfrmType;D3DMATRIX matrix;};
struct _IMAGE_EXPORT_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Name;DWORD Base;DWORD NumberOfFunctions;DWORD NumberOfNames;DWORD AddressOfFunctions;DWORD AddressOfNames;DWORD AddressOfNameOrdinals;};
struct _IMAGE_FUNCTION_ENTRY64 {ULONGLONG StartingAddress;ULONGLONG EndingAddress;_IMAGE_FUNCTION_ENTRY64___20B872DD2F1538A436CF92B8294FA12B __anonymous0;};
struct _KERB_INTERACTIVE_LOGON {KERB_LOGON_SUBMIT_TYPE MessageType;UNICODE_STRING LogonDomainName;UNICODE_STRING UserName;UNICODE_STRING Password;};
struct _MESSAGE_RESOURCE_ENTRY {WORD Length;WORD Flags;BYTE Text[1];};
struct _MIB_MFE_STATS_TABLE_EX {DWORD dwNumEntries;MIB_IPMCAST_MFE_STATS_EX table[1];};
struct _NDIS_802_11_BSSID_LIST {ULONG NumberOfItems;NDIS_WLAN_BSSID Bssid[1];};
struct _NDIS_802_11_STATISTICS {ULONG Length;LARGE_INTEGER TransmittedFragmentCount;LARGE_INTEGER MulticastTransmittedFrameCount;LARGE_INTEGER FailedCount;LARGE_INTEGER RetryCount;LARGE_INTEGER MultipleRetryCount;LARGE_INTEGER RTSSuccessCount;LARGE_INTEGER RTSFailureCount;LARGE_INTEGER ACKFailureCount;LARGE_INTEGER FrameDuplicateCount;LARGE_INTEGER ReceivedFragmentCount;LARGE_INTEGER MulticastReceivedFrameCount;LARGE_INTEGER FCSErrorCount;};
struct _PLEX_READ_DATA_REQUEST {LARGE_INTEGER ByteOffset;DWORD ByteLength;DWORD PlexNumber;};
struct _POLICY_DOMAIN_EFS_INFO {ULONG InfoLength;PUCHAR EfsBlob;};
struct _PRINTER_NOTIFY_OPTIONS {DWORD Version;DWORD Flags;DWORD Count;PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;};
struct _REMSECURITY_ATTRIBUTES {DWORD nLength;DWORD lpSecurityDescriptor;BOOL bInheritHandle;};
struct _RSVP_FILTERSPEC_V4_GPI {IN_ADDR_IPV4 Address;ULONG GeneralPortId;};
struct _RSVP_FILTERSPEC_V6_GPI {IN_ADDR_IPV6 Address;ULONG GeneralPortId;};
struct _SP_ALTPLATFORM_INFO_V1 {DWORD cbSize;DWORD Platform;DWORD MajorVersion;DWORD MinorVersion;WORD ProcessorArchitecture;WORD Reserved;};
struct _SP_CLASSINSTALL_HEADER {DWORD cbSize;DI_FUNCTION InstallFunction;};
struct _SP_REMOVEDEVICE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD Scope;DWORD HwProfile;};
struct _WIN32_FIND_STREAM_DATA {LARGE_INTEGER StreamSize;WCHAR cStreamName[296];};
struct dvi_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct ima_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct tagEMRSETWORLDTRANSFORM {EMR emr;XFORM xform;};
struct tagMCI_GETDEVCAPS_PARMS {DWORD_PTR dwCallback;DWORD dwReturn;DWORD dwItem;};
struct tagMCI_VD_ESCAPE_PARMSA {DWORD_PTR dwCallback;LPCSTR lpstrCommand;};
typedef void ( *CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE hBinding, int fServerSide, unsigned int *pulSendingTag, unsigned int *pulDesiredReceivingTag, unsigned int *pulReceivingTag, error_status_t *pStatus);
typedef DWORD ( *LPD3DHAL_RENDERSTATECB)(LPD3DHAL_RENDERSTATEDATA);
typedef DWORD ( *LPD3DHAL_TEXTURESWAPCB)(LPD3DHAL_TEXTURESWAPDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_CREATE)(LPDDHAL_CREATEMOCOMPDATA);
typedef DWORD ( *LPDDHALMOCOMPCB_RENDER)(LPDDHAL_RENDERMOCOMPDATA);
typedef DWORD ( *LPDDHALVPORTCB_GETLINE)(LPDDHAL_GETVPORTLINEDATA);
typedef DWORD ( *LPDDHAL_DESTROYDDLOCAL)(LPDDHAL_DESTROYDDLOCALDATA);
typedef DWORD ( *LPDDHAL_GETDRIVERSTATE)(LPDDHAL_GETDRIVERSTATEDATA);
typedef int ( *LPWPUCLOSESOCKETHANDLE)(SOCKET s, LPINT lpErrno);
typedef int ( *LPWPUOPENCURRENTTHREAD)(LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef int ( *LPWSCDEINSTALLPROVIDER)(LPGUID lpProviderId, LPINT lpErrno);
typedef int ( *LPWSCREMOVEQOSTEMPLATE)( LPGUID Guid, LPWSABUF QosName);
struct NDIS_BPC_FORCE_RECEIVE {BPC_HANDLE nhConnection;ULONG ulReasonCode;};
struct NDIS_BPC_PROGRAM_GUIDE {ULONG ulGuideType;BPC_FILETIME ftLastUpdate;ULONG ulChangeNumber;ULONG ulcbGuideSize;ULONG rgulGuideData[1];};
struct NDIS_CO_DEVICE_PROFILE {NDIS_VAR_DATA_DESC DeviceDescription;NDIS_VAR_DATA_DESC DevSpecificInfo;ULONG ulTAPISupplementaryPassThru;ULONG ulAddressModes;ULONG ulNumAddresses;ULONG ulBearerModes;ULONG ulMaxTxRate;ULONG ulMinTxRate;ULONG ulMaxRxRate;ULONG ulMinRxRate;ULONG ulMediaModes;ULONG ulGenerateToneModes;ULONG ulGenerateToneMaxNumFreq;ULONG ulGenerateDigitModes;ULONG ulMonitorToneMaxNumFreq;ULONG ulMonitorToneMaxNumEntries;ULONG ulMonitorDigitModes;ULONG ulGatherDigitsMinTimeout;ULONG ulGatherDigitsMaxTimeout;ULONG ulDevCapFlags;ULONG ulMaxNumActiveCalls;ULONG ulAnswerMode;ULONG ulUUIAcceptSize;ULONG ulUUIAnswerSize;ULONG ulUUIMakeCallSize;ULONG ulUUIDropSize;ULONG ulUUISendUserUserInfoSize;ULONG ulUUICallInfoSize;};
typedef DWORD ( *PDD_SURFCB_SETCLIPLIST)(PDD_SETCLIPLISTDATA);
typedef DWORD ( *PDD_SURFCB_SETCOLORKEY)(PDD_SETCOLORKEYDATA);
typedef ULONG_PTR ( *PWINDBG_GET_EXPRESSION)(PCSTR lpExpression);
struct _BDA_IPv4_ADDRESS_LIST {ULONG ulcAddresses;BDA_IPv4_ADDRESS rgAddressl[1];};
struct _BDA_IPv6_ADDRESS_LIST {ULONG ulcAddresses;BDA_IPv6_ADDRESS rgAddressl[1];};
struct _CERT_CRL_CONTEXT_PAIR {PCCERT_CONTEXT pCertContext;PCCRL_CONTEXT pCrlContext;};
struct _CRYPT_SEQUENCE_OF_ANY {DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct _CRYPT_TRUST_REG_ENTRY {DWORD cbStruct;WCHAR *pwszDLLName;WCHAR *pwszFunctionName;};
struct _CTL_FIND_SUBJECT_PARA {DWORD cbSize;PCTL_FIND_USAGE_PARA pUsagePara;DWORD dwSubjectType;void *pvSubject;};
struct _D3DHAL_DP2ADDDIRTYBOX {DWORD dwSurface;D3DBOX DirtyBox;};
struct _D3DHAL_DP2RENDERSTATE {D3DRENDERSTATETYPE RenderState;_D3DHAL_DP2RENDERSTATE___F3EDB45D1196EF7B88036FF534BB239B __anonymous0;};
struct _D3DNTHAL_DP2BUFFERBLT {DWORD dwDDDestSurface;DWORD dwDDSrcSurface;DWORD dwOffset;D3DRANGE rSrc;DWORD dwFlags;};
struct _D3DNTHAL_DP2VOLUMEBLT {DWORD dwDDDestSurface;DWORD dwDDSrcSurface;DWORD dwDestX;DWORD dwDestY;DWORD dwDestZ;D3DBOX srcBox;DWORD dwFlags;};
struct _DD_GETFORMATCOUNTDATA {DD_GETDRIVERINFO2DATA gdi2;DWORD dwFormatCount;DWORD dwReserved;};
struct _EnumImageStoreDATAtag {WCHAR szPath[260];FILETIME ftTimeStamp;};
struct _FILESYSTEM_STATISTICS {WORD FileSystemType;WORD Version;DWORD SizeOfCompleteStructure;DWORD UserFileReads;DWORD UserFileReadBytes;DWORD UserDiskReads;DWORD UserFileWrites;DWORD UserFileWriteBytes;DWORD UserDiskWrites;DWORD MetaDataReads;DWORD MetaDataReadBytes;DWORD MetaDataDiskReads;DWORD MetaDataWrites;DWORD MetaDataWriteBytes;DWORD MetaDataDiskWrites;};
struct _IMAGE_DEBUG_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Type;DWORD SizeOfData;DWORD AddressOfRawData;DWORD PointerToRawData;};
struct _IMAGE_TLS_DIRECTORY64 {ULONGLONG StartAddressOfRawData;ULONGLONG EndAddressOfRawData;ULONGLONG AddressOfIndex;ULONGLONG AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct _LSA_TRUST_INFORMATION {LSA_UNICODE_STRING Name;PSID Sid;};
struct _MCDSTATE_SCISSOR_RECT {ULONG state;ULONG size;RECTL scissorRect;};
struct _MESSAGE_RESOURCE_DATA {DWORD NumberOfBlocks;MESSAGE_RESOURCE_BLOCK Blocks[1];};
struct _MIB_IPMCAST_OIF_STATS {DWORD dwOutIfIndex;DWORD dwNextHopAddr;DWORD dwDialContext;ULONG ulTtlTooLow;ULONG ulFragNeeded;ULONG ulOutPackets;ULONG ulOutDiscards;};
struct _NDIS_BPC_ADAPTER_CAPS {ULONG ulBPCMajorRev;ULONG ulBPCMinorRev;ULONG ulcHSDataDevices;ULONG ulbpsHSDeviceMax;ULONG ulcLSDataDevices;ULONG ulbpsLSDeviceMax;ULONG ulcTuningDevices;ULONG ulcbLargestStatus;ULONG ulVendorId;ULONG ulAdapterId;GUID guidProvider;};
struct _NDIS_PNP_CAPABILITIES {ULONG Flags;NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;};
struct _QUERY_SERVICE_CONFIGA {DWORD dwServiceType;DWORD dwStartType;DWORD dwErrorControl;LPSTR lpBinaryPathName;LPSTR lpLoadOrderGroup;DWORD dwTagId;LPSTR lpDependencies;LPSTR lpServiceStartName;LPSTR lpDisplayName;};
struct _RPC_SYNTAX_IDENTIFIER {GUID SyntaxGUID;RPC_VERSION SyntaxVersion;};
struct _SHChangeDWORDAsIDList {USHORT cb;DWORD dwItem1;DWORD dwItem2;USHORT cbZero;};
struct _SPC_SERIALIZED_OBJECT {SPC_UUID ClassId;CRYPT_DATA_BLOB SerializedData;};
struct _TRANSMIT_FILE_BUFFERS {PVOID Head;DWORD HeadLength;PVOID Tail;DWORD TailLength;};
struct __GENERIC_BINDING_INFO {void *pObj;unsigned int Size;GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct digirealwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct dolbyac2waveformat_tag {WAVEFORMATEX wfx;WORD nAuxBitsCode;};
struct tagCOLORCORRECTPALETTE {EMR emr;DWORD ihPalette;DWORD nFirstEntry;DWORD nPalEntries;DWORD nReserved;};
struct tagDDEML_MSG_HOOK_DATA {UINT_PTR uiLo;UINT_PTR uiHi;DWORD cbData;DWORD Data[8];};
struct tagEMRSETVIEWPORTEXTEX {EMR emr;SIZEL szlExtent;};
struct tagEMRSETVIEWPORTORGEX {EMR emr;POINTL ptlOrigin;};
struct tagLVINSERTGROUPSORTED {PFNLVGROUPCOMPARE pfnGroupCompare;void *pvData;LVGROUP lvGroup;};
struct tagMCI_ANIM_PLAY_PARMS {DWORD_PTR dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_ANIM_RECT_PARMS {DWORD_PTR dwCallback;RECT rc;};
struct tagMCI_ANIM_STEP_PARMS {DWORD_PTR dwCallback;DWORD dwFrames;};
struct tagMCI_OVLY_RECT_PARMS {DWORD_PTR dwCallback;RECT rc;};
struct tagRID_DEVICE_INFO_HID {DWORD dwVendorId;DWORD dwProductId;DWORD dwVersionNumber;USHORT usUsagePage;USHORT usUsage;};
typedef void ( *APC_CALLBACK_FUNCTION)(DWORD, PVOID, PVOID);
typedef DWORD ( *LPDDHALVPORTCB_UPDATE)(LPDDHAL_UPDATEVPORTDATA);
typedef DWORD ( *LPDDHAL_CREATEPALETTE)(LPDDHAL_CREATEPALETTEDATA);
typedef DWORD ( *LPDDHAL_CREATESURFACE)(LPDDHAL_CREATESURFACEDATA);
typedef DWORD ( *LPDDHAL_DESTROYDRIVER)(LPDDHAL_DESTROYDRIVERDATA);
typedef DWORD ( *LPDDHAL_GETDRIVERINFO)(LPDDHAL_GETDRIVERINFODATA);
typedef DWORD ( *LPHANDLER_FUNCTION_EX)(DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext);
typedef INT ( *LPNSPLOOKUPSERVICEEND)(HANDLE hLookup);
typedef DWORD ( *PDD_MOCOMPCB_ENDFRAME)(PDD_ENDMOCOMPFRAMEDATA);
typedef DWORD ( *PDD_MOCOMPCB_GETGUIDS)(PDD_GETMOCOMPGUIDSDATA);
typedef DWORD ( *PDD_SURFCB_SETPALETTE)(PDD_SETPALETTEDATA);
typedef BOOL ( *PFN_DrvUnloadFontFile)(ULONG_PTR);
typedef DWORD ( *PTHREAD_START_ROUTINE)(LPVOID lpThreadParameter);
struct _CERT_CREDENTIAL_INFO {ULONG cbSize;UCHAR rgbHashOfCert[20];};
struct _CERT_PUBLIC_KEY_INFO {CRYPT_ALGORITHM_IDENTIFIER Algorithm;CRYPT_BIT_BLOB PublicKey;};
struct _CHANGER_ELEMENT_LIST {CHANGER_ELEMENT Element;DWORD NumberOfElements;};
struct _CHANGER_SET_POSITION {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Destination;BOOLEAN Flip;};
struct _CMC_TAGGED_ATTRIBUTE {DWORD dwBodyPartID;CRYPT_ATTRIBUTE Attribute;};
struct _CRL_DIST_POINTS_INFO {DWORD cDistPoint;PCRL_DIST_POINT rgDistPoint;};
struct _CRYPT_KEY_PROV_PARAM {DWORD dwParam;BYTE *pbData;DWORD cbData;DWORD dwFlags;};
struct _CTL_ANY_SUBJECT_INFO {CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;CRYPT_DATA_BLOB SubjectIdentifier;};
struct _D3DExecuteBufferDesc {DWORD dwSize;DWORD dwFlags;DWORD dwCaps;DWORD dwBufferSize;LPVOID lpData;};
struct _D3DNTHAL_DP2SETLIGHT {DWORD dwIndex;_D3DNTHAL_DP2SETLIGHT___BAE4FD8B353780C236F6C67FD08E1F99 __anonymous0;};
struct _D3DNTHAL_DP2STATESET {DWORD dwOperation;DWORD dwParam;D3DSTATEBLOCKTYPE sbType;};
struct _DDVIDEOPORTBANDWIDTH {DWORD dwSize;DWORD dwCaps;DWORD dwOverlay;DWORD dwColorkey;DWORD dwYInterpolate;DWORD dwYInterpAndColorkey;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;};
struct _DD_DIRECTDRAW_GLOBAL {void *dhpdev;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;LPDDVIDEOPORTCAPS lpDDVideoPortCaps;};
struct _ENUM_SERVICE_STATUSA {LPSTR lpServiceName;LPSTR lpDisplayName;SERVICE_STATUS ServiceStatus;};
struct _EXCEPTION_DEBUG_INFO {EXCEPTION_RECORD ExceptionRecord;DWORD dwFirstChance;};
struct _FILEGROUPDESCRIPTORA {UINT cItems;FILEDESCRIPTORA fgd[1];};
struct _FILEGROUPDESCRIPTORW {UINT cItems;FILEDESCRIPTORW fgd[1];};
struct _FILE_OBJECTID_BUFFER {BYTE ObjectId[16];_FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A __anonymous0;};
union _FILE_SEGMENT_ELEMENT {PVOID64 Buffer;ULONGLONG Alignment;};
struct _IMAGE_IMPORT_BY_NAME {WORD Hint;BYTE Name[1];};
struct _IP_ADAPTER_INDEX_MAP {ULONG Index;WCHAR Name[128];};
struct _MIB_IPMCAST_IF_ENTRY {DWORD dwIfIndex;DWORD dwTtl;DWORD dwProtocol;DWORD dwRateLimit;ULONG ulInMcastOctets;ULONG ulOutMcastOctets;};
struct _MIB_IPMCAST_IF_TABLE {DWORD dwNumEntries;MIB_IPMCAST_IF_ENTRY table[1];};
struct _SERVICE_TABLE_ENTRYA {LPSTR lpServiceName;LPSERVICE_MAIN_FUNCTIONA lpServiceProc;};
struct _SP_DRVINSTALL_PARAMS {DWORD cbSize;DWORD Rank;DWORD Flags;DWORD_PTR PrivateData;DWORD Reserved;};
struct _SP_INF_SIGNER_INFO_A {DWORD cbSize;CHAR CatalogFile[260];CHAR DigitalSigner[260];CHAR DigitalSignerVersion[260];};
struct _SP_INF_SIGNER_INFO_W {DWORD cbSize;WCHAR CatalogFile[260];WCHAR DigitalSigner[260];WCHAR DigitalSignerVersion[260];};
struct _SP_PROPCHANGE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD StateChange;DWORD Scope;DWORD HwProfile;};
struct _STORAGE_HOTPLUG_INFO {DWORD Size;BOOLEAN MediaRemovable;BOOLEAN MediaHotplug;BOOLEAN DeviceHotplug;BOOLEAN WriteCacheEnableOverride;};
struct _VK_TO_FUNCTION_TABLE {BYTE Vk;BYTE NLSFEProcType;BYTE NLSFEProcCurrent;BYTE NLSFEProcSwitch;VK_FPARAM NLSFEProc[8];VK_FPARAM NLSFEProcAlt[8];};
struct ip_option_information {UCHAR Ttl;UCHAR Tos;UCHAR Flags;UCHAR OptionsSize;PUCHAR OptionsData;};
struct tACMFILTERTAGDETAILSW {DWORD cbStruct;DWORD dwFilterTagIndex;DWORD dwFilterTag;DWORD cbFilterSize;DWORD fdwSupport;DWORD cStandardFilters;WCHAR szFilterTag[48];};
struct tACMFORMATTAGDETAILSW {DWORD cbStruct;DWORD dwFormatTagIndex;DWORD dwFormatTag;DWORD cbFormatSize;DWORD fdwSupport;DWORD cStandardFormats;WCHAR szFormatTag[48];};
struct tagBDA_TRANSPORT_INFO {ULONG ulcbPhyiscalPacket;ULONG ulcbPhyiscalFrame;ULONG ulcbPhyiscalFrameAlignment;REFERENCE_TIME AvgTimePerFrame;};
struct tagCLIENTCREATESTRUCT {HANDLE hWindowMenu;UINT idFirstChild;};
struct tagEMRCREATEMONOBRUSH {EMR emr;DWORD ihBrush;DWORD iUsage;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;};
struct tagEMREXCLUDECLIPRECT {EMR emr;RECTL rclClip;};
struct tagEMRSETARCDIRECTION {EMR emr;DWORD iArcDirection;};
struct tagHH_GLOBAL_PROPERTY {HH_GPROPID id;VARIANT var;};
struct tagRAWINPUTDEVICELIST {HANDLE hDevice;DWORD dwType;};
struct tag_CompileStatusInfo {int lPhaseError;HRESULT hRes;int ObjectNum;int FirstLine;int LastLine;DWORD dwOutFlags;};
struct wavefilter_volume_tag {WAVEFILTER wfltr;DWORD dwVolume;};
typedef DWORD ( *LPDDHALSURFCB_UNLOCK)(LPDDHAL_UNLOCKDATA);
struct NDIS_BPC_DEVICE_CAPS {BPC_HANDLE nhDevice;ULONG ulBPCCaps;ULONG ulbpsMax;ULONG ulcStreamTypes;ULONG rgulStreamTypes[1];};
typedef DWORD ( *PDD_CANCREATESURFACE)(PDD_CANCREATESURFACEDATA);
typedef DWORD ( *PDD_FLIPTOGDISURFACE)(PDD_FLIPTOGDISURFACEDATA);
typedef DWORD ( *PDD_FREEDRIVERMEMORY)(PDD_FREEDRIVERMEMORYDATA);
typedef DWORD ( *PDD_MOCOMPCB_DESTROY)(PDD_DESTROYMOCOMPDATA);
typedef DWORD ( *PDD_PALCB_SETENTRIES)(PDD_SETENTRIESDATA);
typedef DWORD ( *PDD_SETEXCLUSIVEMODE)(PDD_SETEXCLUSIVEMODEDATA);
typedef DWORD ( *PDD_VPORTCB_GETFIELD)(PDD_GETVPORTFIELDDATA);
typedef HSURF ( *PFN_DrvEnableSurface)(DHPDEV);
typedef LONG ( *PFN_DrvQueryFontCaps)(ULONG, ULONG *);
struct _CHANGER_MOVE_MEDIUM {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Source;CHANGER_ELEMENT Destination;BOOLEAN Flip;};
struct _CONSOLE_CURSOR_INFO {DWORD dwSize;BOOL bVisible;};
struct _CRL_DIST_POINT_NAME {DWORD dwDistPointNameChoice;_CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 __anonymous0;};
struct _D3DHAL_DP2BUFFERBLT {DWORD dwDDDestSurface;DWORD dwDDSrcSurface;DWORD dwOffset;D3DRANGE rSrc;DWORD dwFlags;};
struct _D3DHAL_DP2VOLUMEBLT {DWORD dwDDDestSurface;DWORD dwDDSrcSurface;DWORD dwDestX;DWORD dwDestY;DWORD dwDestZ;D3DBOX srcBox;DWORD dwFlags;};
struct _D3DNTHAL_DP2COMMAND {BYTE bCommand;BYTE bReserved;_D3DHAL_DP2COMMAND___14A7885A2BAE378098B3BAEC00AA634B __anonymous0;};
struct _DBGKD_GET_VERSION32 {USHORT MajorVersion;USHORT MinorVersion;USHORT ProtocolVersion;USHORT Flags;ULONG KernBase;ULONG PsLoadedModuleList;USHORT MachineType;USHORT ThCallbackStack;USHORT NextCallback;USHORT FramePointer;ULONG KiCallUserMode;ULONG KeUserCallbackDispatcher;ULONG BreakpointWithStatus;ULONG DebuggerDataList;};
struct _DDSKIPNEXTFIELDINFO {LPDDVIDEOPORTDATA lpVideoPortData;DWORD dwSkipFlags;};
struct _DISK_GROW_PARTITION {DWORD PartitionNumber;LARGE_INTEGER BytesToGrow;};
struct _KS_DVDCOPY_TITLEKEY {ULONG KeyFlags;ULONG ReservedNT[2];UCHAR TitleKey[6];UCHAR Reserved[2];};
struct _LUID_AND_ATTRIBUTES {LUID Luid;DWORD Attributes;};
struct _MIB_MFE_STATS_TABLE {DWORD dwNumEntries;MIB_IPMCAST_MFE_STATS table[1];};
struct _PRINTER_NOTIFY_INFO {DWORD Version;DWORD Flags;DWORD Count;PRINTER_NOTIFY_INFO_DATA aData[1];};
struct _PROCESS_INFORMATION {HANDLE hProcess;HANDLE hThread;DWORD dwProcessId;DWORD dwThreadId;};
struct _SHChangeNotifyEntry {LPCITEMIDLIST pidl;BOOL fRecursive;};
struct _SOCKET_ADDRESS_LIST {INT iAddressCount;SOCKET_ADDRESS Address[1];};
struct _SYSTEM_POWER_STATUS {BYTE ACLineStatus;BYTE BatteryFlag;BYTE BatteryLifePercent;BYTE Reserved1;DWORD BatteryLifeTime;DWORD BatteryFullLifeTime;};
struct _TAPE_WMI_OPERATIONS {DWORD Method;DWORD DataBufferSize;PVOID DataBuffer;};
struct _VOLUME_DISK_EXTENTS {DWORD NumberOfDiskExtents;DISK_EXTENT Extents[1];};
struct __MCDTEXTUREOBJSTATE {ULONG name;MCDFLOAT priority;};
struct _wireSAFEARR_BRECORD {ULONG Size;wireBRECORD *aRecord;};
struct _wireSAFEARR_HAVEIID {ULONG Size;IUnknown **apUnknown;IID iid;};
struct _wireSAFEARR_VARIANT {ULONG Size;wireVARIANT *aVariant;};
struct adpcmewaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct gsm610waveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct sonarcwaveformat_tag {WAVEFORMATEX wfx;WORD wCompType;};
struct tagCBTACTIVATESTRUCT {BOOL fMouse;HWND hWndActive;};
struct tagCLEANLOCALSTORAGE {IUnknown *pInterface;PVOID pStorage;DWORD flags;};
struct tagEMRSELECTCLIPPATH {EMR emr;DWORD iMode;};
struct tagEMRSETMAPPERFLAGS {EMR emr;DWORD dwFlags;};
struct tagKS_BDA_FRAME_INFO {ULONG ExtendedHeaderSize;DWORD dwFrameFlags;ULONG ulEvent;ULONG ulChannelNumber;ULONG ulSubchannelNumber;ULONG ulReason;};
struct tagKS_MPEGVIDEOINFO2 {KS_VIDEOINFOHEADER2 hdr;DWORD dwStartTimeCode;DWORD cbSequenceHeader;DWORD dwProfile;DWORD dwLevel;DWORD dwFlags;DWORD bSequenceHeader[1];};
struct tagMCI_SEQ_SET_PARMS {DWORD_PTR dwCallback;DWORD dwTimeFormat;DWORD dwAudio;DWORD dwTempo;DWORD dwPort;DWORD dwSlave;DWORD dwMaster;DWORD dwOffset;};
struct tagMCI_VD_PLAY_PARMS {DWORD_PTR dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_VD_STEP_PARMS {DWORD_PTR dwCallback;DWORD dwFrames;};
struct tagMEASUREITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemWidth;UINT itemHeight;ULONG_PTR itemData;};
struct tagNCCALCSIZE_PARAMS {RECT rgrc[3];PWINDOWPOS lppos;};
struct tagNMLVODSTATECHANGE {NMHDR hdr;int iFrom;int iTo;UINT uNewState;UINT uOldState;};
struct tagNMTOOLTIPSCREATED {NMHDR hdr;HWND hwndToolTips;};
struct tagNONCLIENTMETRICSA {UINT cbSize;int iBorderWidth;int iScrollWidth;int iScrollHeight;int iCaptionWidth;int iCaptionHeight;LOGFONTA lfCaptionFont;int iSmCaptionWidth;int iSmCaptionHeight;LOGFONTA lfSmCaptionFont;int iMenuWidth;int iMenuHeight;LOGFONTA lfMenuFont;LOGFONTA lfStatusFont;LOGFONTA lfMessageFont;};
struct tagNONCLIENTMETRICSW {UINT cbSize;int iBorderWidth;int iScrollWidth;int iScrollHeight;int iCaptionWidth;int iCaptionHeight;LOGFONTW lfCaptionFont;int iSmCaptionWidth;int iSmCaptionHeight;LOGFONTW lfSmCaptionFont;int iMenuWidth;int iMenuHeight;LOGFONTW lfMenuFont;LOGFONTW lfStatusFont;LOGFONTW lfMessageFont;};
struct tagRASAUTODIALENTRYA {DWORD dwSize;DWORD dwFlags;DWORD dwDialingLocation;CHAR szEntry[257];};
struct tagRASAUTODIALENTRYW {DWORD dwSize;DWORD dwFlags;DWORD dwDialingLocation;WCHAR szEntry[257];};
struct tag_KS_TRUECOLORINFO {DWORD dwBitMasks[3];KS_RGBQUAD bmiColors[256];};
struct EVENT_INSTANCE_INFO {HANDLE RegHandle;ULONG InstanceId;};
typedef DWORD ( *LPD3DHAL_GETSTATECB)(LPD3DHAL_GETSTATEDATA);
typedef DWORD ( *LPD3DNTHAL_CLEAR2CB)(LPD3DNTHAL_CLEAR2DATA);
typedef DWORD ( *LPDDHALVPORTCB_FLIP)(LPDDHAL_FLIPVPORTDATA);
typedef DWORD ( *LPDDHAL_GETSCANLINE)(LPDDHAL_GETSCANLINEDATA);
typedef DWORD ( *LPDDHAL_SETCOLORKEY)(LPDDHAL_DRVSETCOLORKEYDATA);
typedef DWORD ( *PDD_CREATESURFACEEX)(PDD_CREATESURFACEEXDATA);
typedef DWORD ( *PDD_MOCOMPCB_CREATE)(PDD_CREATEMOCOMPDATA);
typedef DWORD ( *PDD_MOCOMPCB_RENDER)(PDD_RENDERMOCOMPDATA);
typedef DWORD ( *PDD_VPORTCB_GETLINE)(PDD_GETVPORTLINEDATA);
typedef void ( *PFN_DrvCompletePDEV)(DHPDEV, HDEV);
typedef void ( *PIMAGE_TLS_CALLBACK)(PVOID DllHandle, DWORD Reason, PVOID Reserved);
struct _BDANODE_DESCRIPTOR {ULONG ulBdaNodeType;GUID guidFunction;GUID guidName;};
struct _CERT_ALT_NAME_INFO {DWORD cAltEntry;PCERT_ALT_NAME_ENTRY rgAltEntry;};
struct _CERT_POLICIES_INFO {DWORD cPolicyInfo;CERT_POLICY_INFO *rgPolicyInfo;};
struct _CHANGER_SET_ACCESS {CHANGER_ELEMENT Element;DWORD Control;};
struct _CMC_TAGGED_REQUEST {DWORD dwTaggedRequestChoice;_CMC_TAGGED_REQUEST___F9232B04B0227B82B480A0AF719B17A6 __anonymous0;};
struct _CONFIG_INFO_DATA_1 {BYTE Reserved[128];DWORD dwVersion;};
struct _CRYPT_CONTENT_INFO {LPSTR pszObjId;CRYPT_DER_BLOB Content;};
struct _D3DHAL_DP2STATESET {DWORD dwOperation;DWORD dwParam;D3DSTATEBLOCKTYPE sbType;};
struct _D3DPROCESSVERTICES {DWORD dwFlags;WORD wStart;WORD wDest;DWORD dwCount;DWORD dwReserved;};
struct _DDVIDEOPORTCONNECT {DWORD dwSize;DWORD dwPortWidth;GUID guidTypeID;DWORD dwFlags;DWORD dwReserved1;};
struct _EXCEPTION_POINTERS {PEXCEPTION_RECORD ExceptionRecord;PCONTEXT ContextRecord;};
struct _EXCEPTION_RECORD64 {DWORD ExceptionCode;DWORD ExceptionFlags;DWORD64 ExceptionRecord;DWORD64 ExceptionAddress;DWORD NumberParameters;DWORD __unusedAlignment;DWORD64 ExceptionInformation[15];};
struct _FLOATING_SAVE_AREA {DWORD ControlWord;DWORD StatusWord;DWORD TagWord;DWORD ErrorOffset;DWORD ErrorSelector;DWORD DataOffset;DWORD DataSelector;BYTE RegisterArea[80];DWORD Cr0NpxState;};
struct _GETVERSIONINPARAMS {BYTE bVersion;BYTE bRevision;BYTE bReserved;BYTE bIDEDeviceMap;DWORD fCapabilities;DWORD dwReserved[4];};
struct _HIDD_CONFIGURATION {PVOID cookie;ULONG size;ULONG RingBufferSize;};
struct _HIDP_UNKNOWN_TOKEN {UCHAR Token;UCHAR Reserved[3];ULONG BitField;};
struct _KERB_NET_ADDRESSES {ULONG Number;KERB_NET_ADDRESS Addresses[1];};
struct _MCDLIGHTMODELSTATE {MCDCOLOR ambient;BOOL localViewer;BOOL twoSided;};
struct _MIB_IPFORWARDTABLE {DWORD dwNumEntries;MIB_IPFORWARDROW table[1];};
struct _MOUSE_EVENT_RECORD {COORD dwMousePosition;DWORD dwButtonState;DWORD dwControlKeyState;DWORD dwEventFlags;};
struct _NDIS_VAR_DATA_DESC {USHORT Length;USHORT MaximumLength;ULONG_PTR Offset;};
struct _RSVP_FILTERSPEC_V4 {IN_ADDR_IPV4 Address;USHORT Unused;USHORT Port;};
struct _RSVP_FILTERSPEC_V6 {IN_ADDR_IPV6 Address;USHORT UnUsed;USHORT Port;};
struct _SID_AND_ATTRIBUTES {PSID Sid;DWORD Attributes;};
struct _SPC_STATEMENT_TYPE {DWORD cKeyPurposeId;LPSTR *rgpszKeyPurposeId;};
struct _SP_INF_INFORMATION {DWORD InfStyle;DWORD InfCount;BYTE VersionData[1];};
struct _TOKEN_AUDIT_POLICY {DWORD PolicyCount;TOKEN_AUDIT_POLICY_ELEMENT Policy[1];};
struct _VERIFY_INFORMATION {LARGE_INTEGER StartingOffset;DWORD Length;};
struct _WINDOWS_DEVICELIST {ULONG numDevice;WINDOWS_IRDA_DEVICE_INFO Device[1];};
struct tagBITMAPCOREHEADER {DWORD bcSize;WORD bcWidth;WORD bcHeight;WORD bcPlanes;WORD bcBitCount;};
struct tagBITMAPFILEHEADER {WORD bfType;DWORD bfSize;WORD bfReserved1;WORD bfReserved2;DWORD bfOffBits;};
struct tagEMROFFSETCLIPRGN {EMR emr;POINTL ptlOffset;};
struct tagEMRRESIZEPALETTE {EMR emr;DWORD ihPal;DWORD cEntries;};
struct tagEMRSELECTPALETTE {EMR emr;DWORD ihPal;};
struct tagEMRSETCOLORSPACE {EMR emr;DWORD ihCS;};
struct tagEMRSETMITERLIMIT {EMR emr;FLOAT eMiterLimit;};
struct tagENUMLOGFONTEXDVA {ENUMLOGFONTEXA elfEnumLogfontEx;DESIGNVECTOR elfDesignVector;};
struct tagENUMLOGFONTEXDVW {ENUMLOGFONTEXW elfEnumLogfontEx;DESIGNVECTOR elfDesignVector;};
struct tagHW_PROFILE_INFOA {DWORD dwDockInfo;CHAR szHwProfileGuid[39];CHAR szHwProfileName[80];};
struct tagHW_PROFILE_INFOW {DWORD dwDockInfo;WCHAR szHwProfileGuid[39];WCHAR szHwProfileName[80];};
struct tagMCI_RECORD_PARMS {DWORD_PTR dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_STATUS_PARMS {DWORD_PTR dwCallback;DWORD_PTR dwReturn;DWORD dwItem;DWORD dwTrack;};
struct tagNEWTEXTMETRICEXA {NEWTEXTMETRICA ntmTm;FONTSIGNATURE ntmFontSig;};
struct tagNEWTEXTMETRICEXW {NEWTEXTMETRICW ntmTm;FONTSIGNATURE ntmFontSig;};
struct wavefilter_echo_tag {WAVEFILTER wfltr;DWORD dwVolume;DWORD dwDelay;};
typedef LRESULT ( *CAPCONTROLCALLBACK)(HWND hWnd, int nState);
typedef BOOL ( *CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL ( *LPBLOCKINGCALLBACK)(DWORD_PTR dwContext);
typedef DWORD ( *LPDDHALSURFCB_FLIP)(LPDDHAL_FLIPDATA);
typedef DWORD ( *LPDDHALSURFCB_LOCK)(LPDDHAL_LOCKDATA);
typedef void ( *LPDDHAL_VIDMEMFREE)(LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, FLATPTR fpMem);
typedef DWORD ( *PDD_DESTROYDDLOCAL)(PDD_DESTROYDDLOCALDATA);
typedef DWORD ( *PDD_GETDRIVERSTATE)(PDD_GETDRIVERSTATEDATA);
typedef DWORD ( *PDD_VPORTCB_UPDATE)(PDD_UPDATEVPORTDATA);
typedef ULONG ( *PFN_DrvDitherColor)(DHPDEV, ULONG, ULONG, ULONG *);
typedef void ( *PFN_DrvSynchronize)(DHPDEV, RECTL *);
typedef void ( *PRPC_STUB_FUNCTION)(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
typedef RPC_STATUS  RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid, void *Context);
struct _CONSOLE_FONT_INFO {DWORD nFont;COORD dwFontSize;};
struct _CRYPT_OBJID_TABLE {DWORD dwAlgId;LPCSTR pszObjId;};
struct _CRYPT_PROVUI_DATA {DWORD cbStruct;DWORD dwFinalError;WCHAR *pYesButtonText;WCHAR *pNoButtonText;WCHAR *pMoreInfoButtonText;WCHAR *pAdvancedLinkText;WCHAR *pCopyActionText;WCHAR *pCopyActionTextNoTS;WCHAR *pCopyActionTextNotSigned;};
struct _D3DHAL_DP2COMMAND {BYTE bCommand;BYTE bReserved;_D3DHAL_DP2COMMAND___14A7885A2BAE378098B3BAEC00AA634B __anonymous0;};
struct _DDFLIPOVERLAYINFO {LPDDSURFACEDATA lpCurrentSurface;LPDDSURFACEDATA lpTargetSurface;DWORD dwFlags;};
struct _DDSETSTATEOUTINFO {BOOL bSoftwareAutoflip;DWORD dwSurfaceIndex;DWORD dwVBISurfaceIndex;};
struct _DSBPOSITIONNOTIFY {DWORD dwOffset;HANDLE hEventNotify;};
struct _ENCRYPTION_BUFFER {DWORD EncryptionOperation;BYTE Private[1];};
struct _FORMAT_PARAMETERS {MEDIA_TYPE MediaType;DWORD StartCylinderNumber;DWORD EndCylinderNumber;DWORD StartHeadNumber;DWORD EndHeadNumber;};
struct _GET_EXPRESSION_EX {PCSTR Expression;PCSTR Remainder;ULONG64 Value;};
struct _GLYPHMETRICSFLOAT {FLOAT gmfBlackBoxX;FLOAT gmfBlackBoxY;POINTFLOAT gmfptGlyphOrigin;FLOAT gmfCellIncX;FLOAT gmfCellIncY;};
struct _IMAGE_FILE_HEADER {WORD Machine;WORD NumberOfSections;DWORD TimeDateStamp;DWORD PointerToSymbolTable;DWORD NumberOfSymbols;WORD SizeOfOptionalHeader;WORD Characteristics;};
struct _IMAGE_ROM_HEADERS {IMAGE_FILE_HEADER FileHeader;IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;};
struct _IP_INTERFACE_INFO {LONG NumAdapters;IP_ADAPTER_INDEX_MAP Adapter[1];};
struct _MCDALPHATESTSTATE {ULONG alphaTestFunc;MCDFLOAT alphaTestRef;};
struct _QOS_FRIENDLY_NAME {QOS_OBJECT_HDR ObjectHdr;WCHAR FriendlyName[256];};
struct _QOS_TRAFFIC_CLASS {QOS_OBJECT_HDR ObjectHdr;ULONG TrafficClass;};
struct _SERVICE_ADDRESSES {DWORD dwAddressCount;SERVICE_ADDRESS Addresses[1];};
struct _SERVICE_TYPE_INFO {DWORD dwTypeNameOffset;DWORD dwValueCount;SERVICE_TYPE_VALUE Values[1];};
struct _SPC_PE_IMAGE_DATA {CRYPT_BIT_BLOB Flags;PSPC_LINK pFile;};
struct _TAPE_GET_POSITION {DWORD Type;DWORD Partition;LARGE_INTEGER Offset;};
struct _VK_FUNCTION_PARAM {BYTE NLSFEProcIndex;ULONG NLSFEProcParam;};
struct _VK_TO_WCHAR_TABLE {PVK_TO_WCHARS1 pVkToWchars;BYTE nModifications;BYTE cbSize;};
struct tACMFILTERDETAILSA {DWORD cbStruct;DWORD dwFilterIndex;DWORD dwFilterTag;DWORD fdwSupport;LPWAVEFILTER pwfltr;DWORD cbwfltr;char szFilter[128];};
struct tACMFORMATDETAILSA {DWORD cbStruct;DWORD dwFormatIndex;DWORD dwFormatTag;DWORD fdwSupport;LPWAVEFORMATEX pwfx;DWORD cbwfx;char szFormat[128];};
struct tagCOLORADJUSTMENT {WORD caSize;WORD caFlags;WORD caIlluminantIndex;WORD caRedGamma;WORD caGreenGamma;WORD caBlueGamma;WORD caReferenceBlack;WORD caReferenceWhite;SHORT caContrast;SHORT caBrightness;SHORT caColorfulness;SHORT caRedGreenTint;};
struct tagEMRSELECTOBJECT {EMR emr;DWORD ihObject;};
struct tagEMRSETTEXTCOLOR {EMR emr;COLORREF crColor;};
struct tagENUMTEXTMETRICA {NEWTEXTMETRICEXA etmNewTextMetricEx;AXESLISTA etmAxesList;};
struct tagENUMTEXTMETRICW {NEWTEXTMETRICEXW etmNewTextMetricEx;AXESLISTW etmAxesList;};
struct tagKBDLLHOOKSTRUCT {DWORD vkCode;DWORD scanCode;DWORD flags;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagMCI_BREAK_PARMS {DWORD_PTR dwCallback;int nVirtKey;HWND hwndBreak;};
struct tagMCI_LOAD_PARMSA {DWORD_PTR dwCallback;LPCSTR lpfilename;};
struct tagMCI_SAVE_PARMSA {DWORD_PTR dwCallback;LPCSTR lpfilename;};
struct tagRASCOMMSETTINGS {DWORD dwSize;BYTE bParity;BYTE bStop;BYTE bByteSize;BYTE bAlign;};
struct tagRASCREDENTIALSA {DWORD dwSize;DWORD dwMask;CHAR szUserName[257];CHAR szPassword[257];CHAR szDomain[16];};
struct tagRASCREDENTIALSW {DWORD dwSize;DWORD dwMask;WCHAR szUserName[257];WCHAR szPassword[257];WCHAR szDomain[16];};
struct tagTRACKMOUSEEVENT {DWORD cbSize;DWORD dwFlags;HWND hwndTrack;DWORD dwHoverTime;};
struct tagTTPOLYGONHEADER {DWORD cb;DWORD dwType;POINTFX pfxStart;};
struct tagTVINSERTSTRUCTA {HTREEITEM hParent;HTREEITEM hInsertAfter;tagTVINSERTSTRUCTA___2E49B666B82A4FD641FAFC76A3D29C8E __anonymous0;};
struct tagTVINSERTSTRUCTW {HTREEITEM hParent;HTREEITEM hInsertAfter;tagTVINSERTSTRUCTW___3D7B1E305294EDBA05E56815A0E14872 __anonymous0;};
struct tagUSEROBJECTFLAGS {BOOL fInherit;BOOL fReserved;DWORD dwFlags;};
typedef BOOL ( *CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL ( *DATEFMT_ENUMPROCA)(LPSTR);
typedef HRESULT ( *DLLGETVERSIONPROC)(DLLVERSIONINFO *);
typedef DWORD ( *LPD3DHAL_CLEAR2CB)(LPD3DHAL_CLEAR2DATA);
typedef DWORD ( *LPDDHALSURFCB_BLT)(LPDDHAL_BLTDATA);
typedef DWORD ( *PDD_CREATEPALETTE)(PDD_CREATEPALETTEDATA);
typedef DWORD ( *PDD_CREATESURFACE)(PDD_CREATESURFACEDATA);
typedef DWORD ( *PDD_DESTROYDRIVER)(PDD_DESTROYDRIVERDATA);
typedef DWORD ( *PDD_GETDRIVERINFO)(PDD_GETDRIVERINFODATA);
typedef DWORD ( *PDD_SURFCB_UNLOCK)(PDD_UNLOCKDATA);
typedef BOOL ( *PFN_CPD_ADD_STORE)(struct _CRYPT_PROVIDER_DATA *pProvData, HCERTSTORE hStore2Add);
typedef BOOL ( *PFN_DrvAssertMode)(DHPDEV, BOOL);
typedef void  RPC_OBJECT_INQ_FN(UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status);
typedef DWORD ( *RasCustomHangUpFn)(HRASCONN hRasConn);
typedef BOOL ( *TIMEFMT_ENUMPROCA)(LPSTR);
struct _BINARY_CONTAINER {DWORD cbBuf;LPBYTE pData;};
struct _CERTIFICATE_BLOB {DWORD dwCertEncodingType;DWORD cbData;PBYTE pbData;};
struct _CERT_KEY_CONTEXT {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;};
struct _CERT_USAGE_MATCH {DWORD dwType;CERT_ENHKEY_USAGE Usage;};
struct _CRYPT_ATTRIBUTES {DWORD cAttr;PCRYPT_ATTRIBUTE rgAttr;};
struct _CRYPT_BLOB_ARRAY {DWORD cBlob;PCRYPT_DATA_BLOB rgBlob;};
struct _D3DRASTER_STATUS {BOOL InVBlank;UINT ScanLine;};
struct _DDSETSTATEININFO {LPDDSURFACEDATA lpSurfaceData;LPDDVIDEOPORTDATA lpVideoPortData;};
struct _DD_PALETTE_LOCAL {ULONG dwReserved0;ULONG_PTR dwReserved1;};
struct _DMUS_EVENTHEADER {DWORD cbEvent;DWORD dwChannelGroup;REFERENCE_TIME rtDelta;DWORD dwFlags;};
struct _DMUS_PORTPARAMS8 {DWORD dwSize;DWORD dwValidParams;DWORD dwVoices;DWORD dwChannelGroups;DWORD dwAudioChannels;DWORD dwSampleRate;DWORD dwEffectFlags;BOOL fShare;DWORD dwFeatures;};
struct _ENGSAFESEMAPHORE {HSEMAPHORE hsem;LONG lCount;};
struct _FIND_NAME_HEADER {WORD node_count;UCHAR reserved;UCHAR unique_group;};
struct _IMAGE_DOS_HEADER {WORD e_magic;WORD e_cblp;WORD e_cp;WORD e_crlc;WORD e_cparhdr;WORD e_minalloc;WORD e_maxalloc;WORD e_ss;WORD e_sp;WORD e_csum;WORD e_ip;WORD e_cs;WORD e_lfarlc;WORD e_ovno;WORD e_res[4];WORD e_oemid;WORD e_oeminfo;WORD e_res2[10];LONG e_lfanew;};
struct _IMAGE_LINENUMBER {union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 Type;WORD Linenumber;};
struct _KERB_NET_ADDRESS {ULONG Family;ULONG Length;PCHAR Address;};
struct _KEY_TYPE_SUBTYPE {DWORD dwKeySpec;GUID Type;GUID Subtype;};
struct _KSP_BDA_NODE_PIN {KSPROPERTY Property;ULONG ulNodeType;ULONG ulInputPinId;ULONG ulOutputPinId;};
struct _NDIS_802_11_SSID {ULONG SsidLength;UCHAR Ssid[32];};
struct _NDIS_BPC_DEVICES {ULONG ulcDevices;BPC_HANDLE rgnhDevices[1];};
struct _NS_SERVICE_INFOA {DWORD dwNameSpace;SERVICE_INFOA ServiceInfo;};
struct _NS_SERVICE_INFOW {DWORD dwNameSpace;SERVICE_INFOW ServiceInfo;};
struct _OBJECT_TYPE_LIST {WORD Level;WORD Sbz;GUID *ObjectType;};
struct _QOS_SHAPING_RATE {QOS_OBJECT_HDR ObjectHdr;ULONG ShapingRate;};
struct _QualityOfService {FLOWSPEC SendingFlowspec;FLOWSPEC ReceivingFlowspec;WSABUF ProviderSpecific;};
struct _RSVP_STATUS_INFO {QOS_OBJECT_HDR ObjectHdr;ULONG StatusCode;ULONG ExtendedStatus1;ULONG ExtendedStatus2;};
struct _TAPE_WRITE_MARKS {DWORD Type;DWORD Count;BOOLEAN Immediate;};
struct _TOKEN_PRIVILEGES {DWORD PrivilegeCount;LUID_AND_ATTRIBUTES Privileges[1];};
struct _UNI_CODEPAGEINFO {DWORD dwCodePage;INVOC SelectSymbolSet;INVOC UnSelectSymbolSet;};
struct _UNI_GLYPHSETDATA {DWORD dwSize;DWORD dwVersion;DWORD dwFlags;LONG lPredefinedID;DWORD dwGlyphCount;DWORD dwRunCount;DWORD loRunOffset;DWORD dwCodePageCount;DWORD loCodePageOffset;DWORD loMapTableOffset;DWORD dwReserved[2];};
struct __MCDTEXTURESTATE {ULONG sWrapMode;ULONG tWrapMode;ULONG minFilter;ULONG magFilter;MCDCOLOR borderColor;};
struct _wireSAFEARR_BSTR {ULONG Size;wireBSTR *aBstr;};
struct pcmwaveformat_tag {WAVEFORMAT wf;WORD wBitsPerSample;};
struct tagBITMAPCOREINFO {BITMAPCOREHEADER bmciHeader;RGBTRIPLE bmciColors[1];};
struct tagDELEGATEITEMID {WORD cbSize;WORD wOuter;WORD cbInner;BYTE rgb[1];};
struct tagEMRPIXELFORMAT {EMR emr;PIXELFORMATDESCRIPTOR pfd;};
struct tagENUMLOGFONTEXA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];BYTE elfScript[32];};
struct tagENUMLOGFONTEXW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];WCHAR elfScript[32];};
struct tagEXBMINFOHEADER {BITMAPINFOHEADER bmi;DWORD biExtDataOffset;};
struct tagKBDTABLE_MULTI {UINT nTables;KBDTABLE_DESC aKbdTables[8];};
struct tagKS_AMVPDIMINFO {DWORD dwFieldWidth;DWORD dwFieldHeight;DWORD dwVBIWidth;DWORD dwVBIHeight;RECT rcValidRegion;};
struct tagLVGROUPMETRICS {UINT cbSize;UINT mask;UINT Left;UINT Top;UINT Right;UINT Bottom;COLORREF crLeft;COLORREF crTop;COLORREF crRight;COLORREF crBottom;COLORREF crHeader;COLORREF crFooter;};
struct tagMCI_PLAY_PARMS {DWORD_PTR dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_SEEK_PARMS {DWORD_PTR dwCallback;DWORD dwTo;};
struct tagMOUSEMOVEPOINT {int x;int y;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagNMTTCUSTOMDRAW {NMCUSTOMDRAW nmcd;UINT uDrawFlags;};
struct tagNMTVCUSTOMDRAW {NMCUSTOMDRAW nmcd;COLORREF clrText;COLORREF clrTextBk;int iLevel;};
struct tagSAFEARRAYBOUND {ULONG cElements;LONG lLbound;};
typedef LRESULT ( *CAPYIELDCALLBACK)(HWND hWnd);
typedef BOOL ( *LOCALE_ENUMPROCA)(LPSTR);
typedef DWORD ( *LPD3DHAL_CLEARCB)(LPD3DHAL_CLEARDATA);
typedef UINT ( *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT ( *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
typedef int ( *LPWPUCLOSETHREAD)(LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef HANDLE ( *LPWPUCREATEEVENT)(LPINT lpErrno);
typedef int ( *LPWSPCLOSESOCKET)(SOCKET s, LPINT lpErrno);
typedef int ( *LPWSPGETPEERNAME)(SOCKET s, struct sockaddr *name, LPINT namelen, LPINT lpErrno);
typedef int ( *LPWSPGETSOCKNAME)(SOCKET s, struct sockaddr *name, LPINT namelen, LPINT lpErrno);
typedef HDEV ( *MCDRVGETHDEVFUNC)(MCDSURFACE *pMCDSurface);
typedef DWORD ( *PDD_VPORTCB_FLIP)(PDD_FLIPVPORTDATA);
typedef DWORD ( *PFNRASFREEBUFFER)(PBYTE pBufer);
typedef BOOL ( *PFN_CPD_ADD_SGNR)(struct _CRYPT_PROVIDER_DATA *pProvData, BOOL fCounterSigner, DWORD idxSigner, struct _CRYPT_PROVIDER_SGNR *pSgnr2Add);
typedef BOOL ( *PFN_DrvResetPDEV)(DHPDEV dhpdevOld, DHPDEV dhpdevNew);
typedef BOOL ( *PFN_DrvStartPage)(SURFOBJ *pso);
typedef BOOL ( *PHANDLER_ROUTINE)(DWORD CtrlType);
typedef void ( *PTIMERAPCROUTINE)(LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);
typedef ULONG ( *PWINDBG_DISASM32)(ULONG *lpOffset, PCSTR lpBuffer, ULONG fShowEffectiveAddress);
typedef void ( *WNDOBJCHANGEPROC)(WNDOBJ *pwo, FLONG fl);
struct _CERT_CHAIN_PARA {DWORD cbSize;CERT_USAGE_MATCH RequestedUsage;};
struct _CERT_EXTENSIONS {DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _CERT_NAME_VALUE {DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _CERT_OTHER_NAME {LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _CHANGER_ELEMENT {ELEMENT_TYPE ElementType;DWORD ElementAddress;};
struct _CREATE_DISK_GPT {GUID DiskId;DWORD MaxPartitionCount;};
struct _CRYPT_HASH_INFO {CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_HASH_BLOB Hash;};
struct _CTL_USAGE_MATCH {DWORD dwType;CTL_USAGE Usage;};
struct _D3DDP_PTRSTRIDE {LPVOID lpvData;DWORD dwStride;};
struct _DDVIDEOPORTCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwMaxWidth;DWORD dwMaxVBIWidth;DWORD dwMaxHeight;DWORD dwVideoPortID;DWORD dwCaps;DWORD dwFX;DWORD dwNumAutoFlipSurfaces;DWORD dwAlignVideoPortBoundary;DWORD dwAlignVideoPortPrescaleWidth;DWORD dwAlignVideoPortCropBoundary;DWORD dwAlignVideoPortCropWidth;DWORD dwPreshrinkXStep;DWORD dwPreshrinkYStep;DWORD dwNumVBIAutoFlipSurfaces;DWORD dwNumPreferredAutoflip;WORD wNumFilterTapsX;WORD wNumFilterTapsY;};
struct _DISK_INT13_INFO {WORD DriveSelect;DWORD MaxCylinders;WORD SectorsPerTrack;WORD MaxHeads;WORD NumberDrives;};
struct _DISPLAY_DEVICEA {DWORD cb;CHAR DeviceName[32];CHAR DeviceString[128];DWORD StateFlags;CHAR DeviceID[128];CHAR DeviceKey[128];};
struct _DISPLAY_DEVICEW {DWORD cb;WCHAR DeviceName[32];WCHAR DeviceString[128];DWORD StateFlags;WCHAR DeviceID[128];WCHAR DeviceKey[128];};
struct _DMUS_BUFFERDESC {DWORD dwSize;DWORD dwFlags;GUID guidBufferFormat;DWORD cbBuffer;};
struct _DMUS_PORTPARAMS {DWORD dwSize;DWORD dwValidParams;DWORD dwVoices;DWORD dwChannelGroups;DWORD dwAudioChannels;DWORD dwSampleRate;DWORD dwEffectFlags;BOOL fShare;};
struct _DOCEVENT_FILTER {UINT cbSize;UINT cElementsAllocated;UINT cElementsNeeded;UINT cElementsReturned;DWORD aDocEventCall[1];};
struct _DSFXI3DL2Reverb {LONG lRoom;LONG lRoomHF;FLOAT flRoomRolloffFactor;FLOAT flDecayTime;FLOAT flDecayHFRatio;LONG lReflections;FLOAT flReflectionsDelay;LONG lReverb;FLOAT flReverbDelay;FLOAT flDiffusion;FLOAT flDensity;FLOAT flHFReference;};
struct _GET_MEDIA_TYPES {DWORD DeviceType;DWORD MediaInfoCount;DEVICE_MEDIA_INFO MediaInfo[1];};
struct _GET_PEB_ADDRESS {ULONG64 CurrentThread;ULONGLONG Address;};
struct _GET_SET_SYMPATH {PCSTR Args;PSTR Result;int Length;};
struct _HIDD_ATTRIBUTES {ULONG Size;USHORT VendorID;USHORT ProductID;USHORT VersionNumber;};
struct _MCDSTATE_RENDER {ULONG state;ULONG size;MCDRENDERSTATE allState;};
struct _MCDSTATE_TEXENV {ULONG state;ULONG size;MCDTEXENVSTATE texEnvState;};
struct _MIB_IPADDRTABLE {DWORD dwNumEntries;MIB_IPADDRROW table[1];};
struct _MIB_IPDESTTABLE {DWORD dwNumEntries;MIB_IPDESTROW table[1];};
struct _MIB_OPAQUE_INFO {DWORD dwId;_MIB_OPAQUE_INFO___17F86C708787DF658C468325A0B0DE76 __anonymous0;};
struct _NDIS_802_11_WEP {ULONG Length;ULONG KeyIndex;ULONG KeyLength;UCHAR KeyMaterial[1];};
struct _NDR_CS_ROUTINES {NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;};
struct _NETWORK_ADDRESS {USHORT AddressLength;USHORT AddressType;UCHAR Address[1];};
struct _PATHNAME_BUFFER {DWORD PathNameLength;WCHAR Name[1];};
struct _PRINTER_INFO_1A {DWORD Flags;LPSTR pDescription;LPSTR pName;LPSTR pComment;};
struct _PRINTER_INFO_4A {LPSTR pPrinterName;LPSTR pServerName;DWORD Attributes;};
struct _PRINTER_INFO_5A {LPSTR pPrinterName;LPSTR pPortName;DWORD Attributes;DWORD DeviceNotSelectedTimeout;DWORD TransmissionRetryTimeout;};
struct _PRINTER_INFO_7A {LPSTR pszObjectGUID;DWORD dwAction;};
struct _REASSIGN_BLOCKS {WORD Reserved;WORD Count;DWORD BlockNumber[1];};
struct _SERVICE_ADDRESS {DWORD dwAddressType;DWORD dwAddressFlags;DWORD dwAddressLength;DWORD dwPrincipalLength;BYTE *lpAddress;BYTE *lpPrincipal;};
struct _SHDESCRIPTIONID {DWORD dwDescriptionId;CLSID clsid;};
struct tagACCESSTIMEOUT {UINT cbSize;DWORD dwFlags;DWORD iTimeOutMSec;};
struct tagCAPROPVARIANT {ULONG cElems;PROPVARIANT *pElems;};
struct tagDRVENABLEDATA {ULONG iDriverVersion;ULONG c;DRVFN *pdrvfn;};
struct tagHARDWAREINPUT {DWORD uMsg;WORD wParamL;WORD wParamH;};
struct tagINTERFACEDATA {METHODDATA *pmethdata;UINT cMembers;};
struct tagINTERFACEINFO {IUnknown *pUnk;IID iid;WORD wMethod;};
struct tagKBDTABLE_DESC {WCHAR wszDllName[32];DWORD dwType;DWORD dwSubType;};
struct tagLASTINPUTINFO {UINT cbSize;DWORD dwTime;};
struct tagLVHITTESTINFO {POINT pt;UINT flags;int iItem;int iSubItem;};
struct tagMCI_SET_PARMS {DWORD_PTR dwCallback;DWORD dwTimeFormat;DWORD dwAudio;};
struct tagMULTIKEYHELPA {DWORD mkSize;CHAR mkKeylist;CHAR szKeyphrase[1];};
struct tagMULTIKEYHELPW {DWORD mkSize;WCHAR mkKeylist;WCHAR szKeyphrase[1];};
struct tagNMLVFINDITEMA {NMHDR hdr;int iStart;LVFINDINFOA lvfi;};
struct tagNMLVFINDITEMW {NMHDR hdr;int iStart;LVFINDINFOW lvfi;};
struct tagRASENTRYNAMEA {DWORD dwSize;CHAR szEntryName[257];DWORD dwFlags;CHAR szPhonebookPath[261];};
struct tagRASENTRYNAMEW {DWORD dwSize;WCHAR szEntryName[257];DWORD dwFlags;WCHAR szPhonebookPath[261];};
struct tagRPCOLEMESSAGE {void *reserved1;RPCOLEDATAREP dataRepresentation;void *Buffer;ULONG cbBuffer;ULONG iMethod;void *reserved2[5];ULONG rpcFlags;};
struct tagSCROLLBARINFO {DWORD cbSize;RECT rcScrollBar;int dxyLineButton;int xyThumbTop;int xyThumbBottom;int reserved;DWORD rgstate[6];};
struct tagTBSAVEPARAMSA {HKEY hkr;LPCSTR pszSubKey;LPCSTR pszValueName;};
struct tagTCHITTESTINFO {POINT pt;UINT flags;};
struct tagTCITEMHEADERA {UINT mask;UINT lpReserved1;UINT lpReserved2;LPSTR pszText;int cchTextMax;int iImage;};
struct DDVIDEOPORTDATA {DWORD dwVideoPortId;DWORD dwVPFlags;DWORD dwOriginOffset;DWORD dwHeight;DWORD dwVBIHeight;ULONG dwDriverReserved1;ULONG dwDriverReserved2;ULONG dwDriverReserved3;};
typedef BOOL ( *LPDDHAL_SETINFO)(LPDDHALINFO lpDDHalInfo, BOOL reset);
typedef DWORD ( *LPDDHAL_SETMODE)(LPDDHAL_SETMODEDATA);
typedef int ( *LPWSPGETSOCKOPT)(SOCKET s, int level, int optname, char *optval, LPINT optlen, LPINT lpErrno);
typedef int ( *LPWSPSETSOCKOPT)(SOCKET s, int level, int optname,  char *optval, int optlen, LPINT lpErrno);
struct NDIS_BPC_COMMIT {ULONG ulcConnections;BPC_HANDLE rgnhConnections[1];};
typedef DWORD ( *PDD_GETSCANLINE)(PDD_GETSCANLINEDATA);
typedef DWORD ( *PDD_SETCOLORKEY)(PDD_DRVSETCOLORKEYDATA);
typedef DWORD ( *PDD_SURFCB_FLIP)(PDD_FLIPDATA);
typedef DWORD ( *PDD_SURFCB_LOCK)(PDD_LOCKDATA);
typedef LPVOID ( *PFN_CRYPT_ALLOC)(size_t cbSize);
typedef BOOL ( *PFN_DrvSendPage)(SURFOBJ *);
typedef BOOL ( *PFN_PROVUI_CALL)(HWND hWndSecurityDialog, struct _CRYPT_PROVIDER_DATA *pProvData);
struct _ADDJOB_INFO_1A {LPSTR Path;DWORD JobId;};
struct _CABINET_INFO_A {PCSTR CabinetPath;PCSTR CabinetFile;PCSTR DiskName;USHORT SetId;USHORT CabinetNumber;};
struct _CERT_NAME_INFO {DWORD cRDN;PCERT_RDN rgRDN;};
struct _CERT_POLICY_ID {DWORD cCertPolicyElementId;LPSTR *rgpszCertPolicyElementId;};
struct _COAUTHIDENTITY {USHORT *User;ULONG UserLength;USHORT *Domain;ULONG DomainLength;USHORT *Password;ULONG PasswordLength;ULONG Flags;};
struct _CPSUIDATABLOCK {DWORD cbData;LPBYTE pbData;};
struct _CRYPTOAPI_BLOB {DWORD cbData;BYTE *pbData;};
struct _CRYPT_BIT_BLOB {DWORD cbData;BYTE *pbData;DWORD cUnusedBits;};
struct _D3DDISPLAYMODE {UINT Width;UINT Height;UINT RefreshRate;D3DFORMAT Format;};
struct _D3DEXECUTEDATA {DWORD dwSize;DWORD dwVertexOffset;DWORD dwVertexCount;DWORD dwInstructionOffset;DWORD dwInstructionLength;DWORD dwHVertexOffset;D3DSTATUS dsStatus;};
struct _D3DINSTRUCTION {BYTE bOpcode;BYTE bSize;WORD wCount;};
struct _DDCOLORCONTROL {DWORD dwSize;DWORD dwFlags;LONG lBrightness;LONG lContrast;LONG lHue;LONG lSaturation;LONG lSharpness;LONG lGamma;LONG lColorEnable;DWORD dwReserved1;};
struct _DDNT_DXVERSION {DDNT_GETDRIVERINFO2DATA gdi2;DWORD dwDXVersion;DWORD dwReserved;};
struct _DMUS_COPYRIGHT {ULONG cbSize;BYTE byCopyright[4];};
struct _DMUS_VEGPARAMS {TCENT tcAttack;TCENT tcDecay;PERCENT ptSustain;TCENT tcRelease;TCENT tcVel2Attack;TCENT tcKey2Decay;};
struct _DMUS_WAVEARTDL {ULONG ulDownloadIdIdx;ULONG ulBus;ULONG ulBuffers;ULONG ulMasterDLId;USHORT usOptions;};
struct _DRIVER_INFO_2A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;};
struct _DRIVER_INFO_3A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;LPSTR pHelpFile;LPSTR pDependentFiles;LPSTR pMonitorName;LPSTR pDefaultDataType;};
struct _DRIVER_INFO_4A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;LPSTR pHelpFile;LPSTR pDependentFiles;LPSTR pMonitorName;LPSTR pDefaultDataType;LPSTR pszzPreviousNames;};
struct _DRIVER_INFO_5A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;DWORD dwDriverAttributes;DWORD dwConfigVersion;DWORD dwDriverVersion;};
struct _DSCBUFFERDESC1 {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;};
struct _EVENTLOGRECORD {DWORD Length;DWORD Reserved;DWORD RecordNumber;DWORD TimeGenerated;DWORD TimeWritten;DWORD EventID;WORD EventType;WORD NumStrings;WORD EventCategory;WORD ReservedFlags;DWORD ClosingRecordNumber;DWORD StringOffset;DWORD UserSidLength;DWORD UserSidOffset;DWORD DataLength;DWORD DataOffset;};
struct _FD_KERNINGPAIR {WCHAR wcFirst;WCHAR wcSecond;FWORD fwdKern;};
struct _HD_HITTESTINFO {POINT pt;UINT flags;int iItem;};
struct _HD_TEXTFILTERA {LPSTR pszText;INT cchTextMax;};
struct _KERB_AUTH_DATA {ULONG Type;ULONG Length;PUCHAR Data;};
struct _MCDPIXELUNPACK {BYTE swapEndian;BYTE lsbFirst;LONG lineLength;LONG skipLines;LONG skipPixels;LONG alignment;LONG lReserved;};
struct _MCDSTATE_PIXEL {ULONG state;ULONG size;MCDPIXELSTATE pixelState;};
struct _MCDTEXENVSTATE {ULONG texEnvMode;MCDCOLOR texEnvColor;};
struct _MEMORYSTATUSEX {DWORD dwLength;DWORD dwMemoryLoad;DWORDLONG ullTotalPhys;DWORDLONG ullAvailPhys;DWORDLONG ullTotalPageFile;DWORDLONG ullAvailPageFile;DWORDLONG ullTotalVirtual;DWORDLONG ullAvailVirtual;DWORDLONG ullAvailExtendedVirtual;};
struct _MIB_IPNETTABLE {DWORD dwNumEntries;MIB_IPNETROW table[1];};
struct _OSVERSIONINFOA {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;CHAR szCSDVersion[128];};
struct _OSVERSIONINFOW {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;WCHAR szCSDVersion[128];};
struct _PPP_IPXCP_INFO {DWORD dwError;WCHAR wszAddress[23];};
struct _PPP_NBFCP_INFO {DWORD dwError;WCHAR wszWksta[17];};
struct _RB_HITTESTINFO {POINT pt;UINT flags;int iBand;};
struct _READ_WRITE_MSR {ULONG Msr;LONGLONG Value;};
struct _SFV_SETITEMPOS {LPCITEMIDLIST pidl;POINT pt;};
struct _SOCKET_ADDRESS {LPSOCKADDR lpSockaddr;INT iSockaddrLength;};
struct _SOURCE_MEDIA_A {PCSTR Reserved;PCSTR Tagfile;PCSTR Description;PCSTR SourcePath;PCSTR SourceFile;DWORD Flags;};
union _ULARGE_INTEGER {_ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC __anonymous0;struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC u;ULONGLONG QuadPart;};
struct _VK_TO_WCHARS10 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[10];};
struct _WCE_DEVICELIST {ULONG numDevice;WCE_IRDA_DEVICE_INFO Device[1];};
struct tagCUSTDATAITEM {GUID guid;VARIANTARG varValue;};
struct tagDESIGNVECTOR {DWORD dvReserved;DWORD dvNumAxes;LONG dvValues[16];};
struct tagEMRRESTOREDC {EMR emr;LONG iRelative;};
struct tagENUMLOGFONTA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];};
struct tagENUMLOGFONTW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];};
struct tagICONMETRICSA {UINT cbSize;int iHorzSpacing;int iVertSpacing;int iTitleWrap;LOGFONTA lfFont;};
struct tagICONMETRICSW {UINT cbSize;int iHorzSpacing;int iVertSpacing;int iTitleWrap;LOGFONTW lfFont;};
struct tagLHITTESTINFO {POINT pt;LITEM item;};
struct tagMETAFILEPICT {LONG mm;LONG xExt;LONG yExt;HMETAFILE hMF;};
struct tagRASSUBENTRYA {DWORD dwSize;DWORD dwfFlags;CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;};
struct tagRASSUBENTRYW {DWORD dwSize;DWORD dwfFlags;WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;};
struct tagRemFORMATETC {DWORD cfFormat;DWORD ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagRemSTGMEDIUM {DWORD tymed;DWORD dwHandleType;unsigned int pData;unsigned int pUnkForRelease;unsigned int cbData;byte data[1];};
struct tagTITLEBARINFO {DWORD cbSize;RECT rcTitleBar;DWORD rgstate[6];};
struct tagTRANSMSGLIST {UINT uMsgCount;TRANSMSG TransMsg[1];};
typedef DWORD ( *PDD_SURFCB_BLT)(PDD_BLTDATA);
struct _ACTION_HEADER {ULONG transport_id;USHORT action_code;USHORT reserved;};
struct _CMC_PEND_INFO {CRYPT_DATA_BLOB PendToken;FILETIME PendTime;};
typedef LONG ( *_CPSUICALLBACK)(PCPSUICBPARAM pCPSUICBParam);
struct _DD_ATTACHLIST {PDD_ATTACHLIST lpLink;PDD_SURFACE_LOCAL lpAttached;};
struct _DD_STEREOMODE {DWORD dwSize;DWORD dwHeight;DWORD dwWidth;DWORD dwBpp;DWORD dwRefreshRate;BOOL bSupported;};
struct _DMUS_WAVEDATA {ULONG cbSize;BYTE byData[4];};
struct _DSBUFFERDESC1 {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;};
struct _DSCEFFECTDESC {DWORD dwSize;DWORD dwFlags;GUID guidDSCFXClass;GUID guidDSCFXInstance;DWORD dwReserved1;DWORD dwReserved2;};
struct _EFS_HASH_BLOB {DWORD cbData;PBYTE pbData;};
struct _FILE_PREFETCH {DWORD Type;DWORD Count;DWORDLONG Prefetch[1];};
struct _GETSETBUSDATA {ULONG BusDataType;ULONG BusNumber;ULONG SlotNumber;PVOID Buffer;ULONG Offset;ULONG Length;};
struct _HEAPALIASINFO {DWORD dwRefCnt;DWORD dwFlags;DWORD dwNumHeaps;LPHEAPALIAS lpAliases;};
struct _JOB_SET_ARRAY {HANDLE JobHandle;DWORD MemberLevel;DWORD Flags;};
union _LARGE_INTEGER {_LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E __anonymous0;struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E u;LONGLONG QuadPart;};
struct _MIB_IPDESTROW {_MIB_IPFORWARDROW __anonymous0;DWORD dwForwardPreference;DWORD dwForwardViewSet;};
struct _MIB_MFE_TABLE {DWORD dwNumEntries;MIB_IPMCAST_MFE table[1];};
struct _MODEMSETTINGS {DWORD dwActualSize;DWORD dwRequiredSize;DWORD dwDevSpecificOffset;DWORD dwDevSpecificSize;DWORD dwCallSetupFailTimer;DWORD dwInactivityTimeout;DWORD dwSpeakerVolume;DWORD dwSpeakerMode;DWORD dwPreferredModemOptions;DWORD dwNegotiatedModemOptions;DWORD dwNegotiatedDCERate;BYTE abVariablePortion[1];};
struct _OLESTREAMVTBL {DWORD ( *Get)(LPOLESTREAM, void *, DWORD);DWORD ( *Put)(LPOLESTREAM,  void *, DWORD);};
struct _PPP_ATCP_INFO {DWORD dwError;WCHAR wszAddress[33];};
struct _PPP_IPCP_INFO {DWORD dwError;WCHAR wszAddress[16];WCHAR wszRemoteAddress[16];};
struct _PRIVILEGE_SET {DWORD PrivilegeCount;DWORD Control;LUID_AND_ATTRIBUTES Privilege[1];};
struct _PUBLISHERINFO {DWORD dwMode;WORD wMinoutlinePPEM;WORD wMaxbitmapPPEM;};
struct _QCMINFO_IDMAP {UINT nMaxIds;QCMINFO_IDMAP_PLACEMENT pIdList[1];};
struct _RGNDATAHEADER {DWORD dwSize;DWORD iType;DWORD nCount;DWORD nRgnSize;RECT rcBound;};
struct _SCARD_ATRMASK {DWORD cbAtr;BYTE rgbAtr[36];BYTE rgbMask[36];};
struct _SOCKADDR_IRDA {u_short irdaAddressFamily;u_char irdaDeviceID[4];char irdaServiceName[25];};
struct _TOKEN_CONTROL {LUID TokenId;LUID AuthenticationId;LUID ModifiedId;TOKEN_SOURCE TokenSource;};
struct _VK_TO_WCHARS1 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[1];};
struct _VK_TO_WCHARS2 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[2];};
struct _VK_TO_WCHARS3 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[3];};
struct _VK_TO_WCHARS4 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[4];};
struct _VK_TO_WCHARS5 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[5];};
struct _VK_TO_WCHARS6 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[6];};
struct _VK_TO_WCHARS7 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[7];};
struct _VK_TO_WCHARS8 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[8];};
struct _VK_TO_WCHARS9 {BYTE VirtualKey;BYTE Attributes;WCHAR wch[9];};
struct tagCHARSETINFO {UINT ciCharset;UINT ciACP;FONTSIGNATURE fs;};
struct tagCOLORSCHEME {DWORD dwSize;COLORREF clrBtnHighlight;COLORREF clrBtnShadow;};
struct tagEMRFILLPATH {EMR emr;RECTL rclBounds;};
struct tagEXTRASEARCH {GUID guidSearch;WCHAR wszFriendlyName[80];WCHAR wszUrl[2084];};
struct tagLVDISPINFOW {NMHDR hdr;LVITEMW item;};
struct tagMDINEXTMENU {HMENU hmenuIn;HMENU hmenuNext;HWND hwndNext;};
struct tagMONITORINFO {DWORD cbSize;RECT rcMonitor;RECT rcWork;DWORD dwFlags;};
struct tagNMBCHOTITEM {NMHDR hdr;DWORD dwFlags;};
struct tagNMPGHOTITEM {NMHDR hdr;int idOld;int idNew;DWORD dwFlags;};
struct tagNMSELCHANGE {NMHDR nmhdr;SYSTEMTIME stSelStart;SYSTEMTIME stSelEnd;};
struct tagNMTBHOTITEM {NMHDR hdr;int idOld;int idNew;DWORD dwFlags;};
struct tagPARAMDESCEX {ULONG cBytes;VARIANTARG varDefaultValue;};
struct tagRASDEVINFOA {DWORD dwSize;CHAR szDeviceType[17];CHAR szDeviceName[129];};
struct tagRASDEVINFOW {DWORD dwSize;WCHAR szDeviceType[17];WCHAR szDeviceName[129];};
struct tagSOFTKBDDATA {UINT uCount;WORD wCode[1][256];};
struct tagTBADDBITMAP {HINSTANCE hInst;UINT_PTR nID;};
struct tagTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
struct tagTTPOLYCURVE {WORD wType;WORD cpfx;POINTFX apfx[1];};
struct tagTVDISPINFOA {NMHDR hdr;TVITEMA item;};
struct tagTVDISPINFOW {NMHDR hdr;TVITEMW item;};
struct waveformat_tag {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;};
struct CONFIRMSAFETY {CLSID clsid;IUnknown *pUnk;DWORD dwFlags;};
typedef void ( *ENUM_CALLBACK)(LPDCISURFACEINFO lpSurfaceInfo, LPVOID lpContext);
typedef int ( *LPWSPSHUTDOWN)(SOCKET s, int how, LPINT lpErrno);
typedef ULONG ( *MCDRVSWAPFUNC)(MCDSURFACE *pMCDSurface, ULONG flags);
struct NDIS_BPC_POOL {BPC_HANDLE nhConnection;ULONG ulcbPoolSize;ULONG ulcbMaxBufferSize;ULONG ulcbBufferReserved;};
typedef DWORD ( *PDD_MAPMEMORY)(PDD_MAPMEMORYDATA);
struct _AVIFILEINFOW {DWORD dwMaxBytesPerSec;DWORD dwFlags;DWORD dwCaps;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwScale;DWORD dwRate;DWORD dwLength;DWORD dwEditCount;WCHAR szFileType[64];};
struct _CC_BYTE_PAIR {BYTE Decoded[2];USHORT Reserved;};
struct _D3DVIEWPORT2 {DWORD dwSize;DWORD dwX;DWORD dwY;DWORD dwWidth;DWORD dwHeight;D3DVALUE dvClipX;D3DVALUE dvClipY;D3DVALUE dvClipWidth;D3DVALUE dvClipHeight;D3DVALUE dvMinZ;D3DVALUE dvMaxZ;};
struct _D3DVIEWPORT7 {DWORD dwX;DWORD dwY;DWORD dwWidth;DWORD dwHeight;D3DVALUE dvMinZ;D3DVALUE dvMaxZ;};
struct _DDNTCORECAPS {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;};
struct _DDSTEREOMODE {DWORD dwSize;DWORD dwHeight;DWORD dwWidth;DWORD dwBpp;DWORD dwRefreshRate;BOOL bSupported;};
struct _DD_DXVERSION {DD_GETDRIVERINFO2DATA gdi2;DWORD dwDXVersion;DWORD dwReserved;};
struct _DEVHTADJDATA {DWORD DeviceFlags;DWORD DeviceXDPI;DWORD DeviceYDPI;PDEVHTINFO pDefHTInfo;PDEVHTINFO pAdjHTInfo;};
struct _DRIVERSTATUS {BYTE bDriverError;BYTE bIDEError;BYTE bReserved[2];DWORD dwReserved[2];};
struct _EFS_RPC_BLOB {DWORD cbData;PBYTE pbData;};
struct _FD_GLYPHATTR {ULONG cjThis;ULONG cGlyphs;ULONG iMode;BYTE aGlyphAttr[1];};
struct _GLYPHMETRICS {UINT gmBlackBoxX;UINT gmBlackBoxY;POINT gmptGlyphOrigin;short gmCellIncX;short gmCellIncY;};
union _IN_ADDR_IPV4 {ULONG Addr;UCHAR AddrBytes[4];};
struct _IOSPACE_EX64 {ULONG64 Address;ULONG Length;ULONG Data;ULONG InterfaceType;ULONG BusNumber;ULONG AddressSpace;};
struct _MCDCLIPSTATE {ULONG userClipEnables;MCDCOORD userClipPlanes[6];MCDCOORD userClipPlanesInv[6];};
struct _MCDPIXELPACK {BYTE swapEndian;BYTE lsbFirst;LONG lineLength;LONG skipLines;LONG skipPixels;LONG alignment;LONG lReserved;};
struct _MCDRIVERINFO {ULONG verMajor;ULONG verMinor;ULONG verDriver;CHAR idStr[200];ULONG drvMemFlags;ULONG drvBatchMemSizeMax;};
struct _MEMORYSTATUS {DWORD dwLength;DWORD dwMemoryLoad;SIZE_T dwTotalPhys;SIZE_T dwAvailPhys;SIZE_T dwTotalPageFile;SIZE_T dwAvailPageFile;SIZE_T dwTotalVirtual;SIZE_T dwAvailVirtual;};
struct _MIB_IFSTATUS {DWORD dwIfIndex;DWORD dwAdminStatus;DWORD dwOperationalStatus;BOOL bMHbeatActive;BOOL bMHbeatAlive;};
struct _MIB_IPNETROW {DWORD dwIndex;DWORD dwPhysAddrLen;BYTE bPhysAddr[8];DWORD dwAddr;DWORD dwType;};
struct _MIB_TCPTABLE {DWORD dwNumEntries;MIB_TCPROW table[1];};
struct _MIB_UDPTABLE {DWORD dwNumEntries;MIB_UDPROW table[1];};
struct _MODEMDEVCAPS {DWORD dwActualSize;DWORD dwRequiredSize;DWORD dwDevSpecificOffset;DWORD dwDevSpecificSize;DWORD dwModemProviderVersion;DWORD dwModemManufacturerOffset;DWORD dwModemManufacturerSize;DWORD dwModemModelOffset;DWORD dwModemModelSize;DWORD dwModemVersionOffset;DWORD dwModemVersionSize;DWORD dwDialOptions;DWORD dwCallSetupFailTimer;DWORD dwInactivityTimeout;DWORD dwSpeakerVolume;DWORD dwSpeakerMode;DWORD dwModemOptions;DWORD dwMaxDTERate;DWORD dwMaxDCERate;BYTE abVariablePortion[1];};
struct _MPR_SERVER_0 {BOOL fLanOnlyMode;DWORD dwUpTime;DWORD dwTotalPorts;DWORD dwPortsInUse;};
struct _NETRESOURCEA {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPSTR lpLocalName;LPSTR lpRemoteName;LPSTR lpComment;LPSTR lpProvider;};
struct _PARAM_BUFFER {ULONG ParameterId;ULONG Length;UCHAR Buffer[1];};
struct _PORT_INFO_2A {LPSTR pPortName;LPSTR pMonitorName;LPSTR pDescription;DWORD fPortType;DWORD Reserved;};
struct _PORT_INFO_3A {DWORD dwStatus;LPSTR pszStatus;DWORD dwSeverity;};
struct _PROVDATA_SIP {DWORD cbStruct;GUID gSubject;struct SIP_DISPATCH_INFO_ *pSip;struct SIP_DISPATCH_INFO_ *pCATSip;struct SIP_SUBJECTINFO_ *psSipSubjectInfo;struct SIP_SUBJECTINFO_ *psSipCATSubjectInfo;struct SIP_INDIRECT_DATA_ *psIndirectData;};
struct _PSINJECTDATA {DWORD DataBytes;WORD InjectionPoint;WORD PageNumber;};
struct _QOS_DESTADDR {QOS_OBJECT_HDR ObjectHdr; struct sockaddr *SocketAddress;ULONG SocketAddressLength;};
struct _QOS_DS_CLASS {QOS_OBJECT_HDR ObjectHdr;ULONG DSField;};
struct _QUOTA_LIMITS {SIZE_T PagedPoolLimit;SIZE_T NonPagedPoolLimit;SIZE_T MinimumWorkingSetSize;SIZE_T MaximumWorkingSetSize;SIZE_T PagefileLimit;LARGE_INTEGER TimeLimit;};
struct _SCHANNEL_ALG {DWORD dwUse;ALG_ID Algid;DWORD cBits;DWORD dwFlags;DWORD dwReserved;};
union _SLIST_HEADER {ULONGLONG Alignment;_SLIST_HEADER___83AF6D9DC8E3B10431D79B304957BA23 __anonymous0;};
struct _TAPE_PREPARE {DWORD Operation;BOOLEAN Immediate;};
struct _TOKEN_GROUPS {DWORD GroupCount;SID_AND_ATTRIBUTES Groups[1];};
struct _TOKEN_SOURCE {CHAR SourceName[8];LUID SourceIdentifier;};
struct _currencyfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPSTR lpCurrencySymbol;};
struct tWAVEFORMATEX {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wBitsPerSample;WORD cbSize;};
struct tagALTTABINFO {DWORD cbSize;int cItems;int cColumns;int cRows;int iColFocus;int iRowFocus;int cxItem;int cyItem;POINT ptStart;};
struct tagAspectInfo {ULONG cb;DWORD dwFlags;};
struct tagBITMAPINFO {BITMAPINFOHEADER bmiHeader;RGBQUAD bmiColors[1];};
struct tagCABSTRBLOB {ULONG cElems;BSTRBLOB *pElems;};
struct tagCACLIPDATA {ULONG cElems;CLIPDATA *pElems;};
struct tagCAFILETIME {ULONG cElems;FILETIME *pElems;};
struct tagEMRELLIPSE {EMR emr;RECTL rclBox;};
struct tagFILTERKEYS {UINT cbSize;DWORD dwFlags;DWORD iWaitMSec;DWORD iDelayMSec;DWORD iRepeatMSec;DWORD iBounceMSec;};
struct tagHHN_NOTIFY {NMHDR hdr;PCSTR pszUrl;};
struct tagLOGPALETTE {WORD palVersion;WORD palNumEntries;PALETTEENTRY palPalEntry[1];};
struct tagLVDISPINFO {NMHDR hdr;LVITEMA item;};
struct tagLVTILEINFO {UINT cbSize;int iItem;UINT cColumns;PUINT puColumns;};
struct tagMETAHEADER {WORD mtType;WORD mtHeaderSize;WORD mtVersion;DWORD mtSize;WORD mtNoObjects;DWORD mtMaxRecord;WORD mtNoParameters;};
struct tagMETARECORD {DWORD rdSize;WORD rdFunction;WORD rdParm[1];};
struct tagRASEAPINFO {DWORD dwSizeofEapInfo;BYTE *pbEapInfo;};
struct tagRASPPPIPXA {DWORD dwSize;DWORD dwError;CHAR szIpxAddress[22];};
struct tagSTICKYKEYS {UINT cbSize;DWORD dwFlags;};
struct tagTOGGLEKEYS {UINT cbSize;DWORD dwFlags;};
typedef BOOL ( *GEO_ENUMPROC)(GEOID);
typedef int ( *GOBJENUMPROC)(LPVOID, LPARAM);
struct IACList2Vtbl {HRESULT ( *SetOptions)(IACList2 *This, DWORD dwFlag);HRESULT ( *GetOptions)(IACList2 *This, DWORD *pdwFlag);};
typedef int ( *ICMENUMPROCA)(LPSTR, LPARAM);
typedef BOOL ( *LPDDHEL_INIT)(LPDDRAWI_DIRECTDRAW_GBL, BOOL);
typedef INT ( *LPNSPCLEANUP)(LPGUID lpProviderId);
typedef DWORD ( *PDD_ALPHABLT)(PDD_BLTDATA);
struct SPC_SIGINFO_ {DWORD dwSipVersion;GUID gSIPGuid;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwReserved4;DWORD dwReserved5;};
typedef void  TIMECALLBACK(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
struct _BDA_PID_MAP {MEDIA_SAMPLE_CONTENT MediaSampleContent;ULONG ulcPIDs;ULONG aulPIDs[1];};
struct _BIN_RESULTS {DWORD NumberOfBins;BIN_COUNT BinCounts[1];};
struct _CREATE_DISK {PARTITION_STYLE PartitionStyle;_CREATE_DISK___E6D8F73FA11FE79B0BBE7B30BDE20C7B __anonymous0;};
struct _CSADDR_INFO {SOCKET_ADDRESS LocalAddr;SOCKET_ADDRESS RemoteAddr;INT iSocketType;INT iProtocol;};
struct _D3DVIEWPORT {DWORD dwSize;DWORD dwX;DWORD dwY;DWORD dwWidth;DWORD dwHeight;D3DVALUE dvScaleX;D3DVALUE dvScaleY;D3DVALUE dvMaxX;D3DVALUE dvMaxY;D3DVALUE dvMinZ;D3DVALUE dvMaxZ;};
struct _DATA_HEADER {DWORD dwSignature;WORD wSize;WORD wDataID;DWORD dwDataSize;DWORD dwReserved;};
struct _DETAILSINFO {LPCITEMIDLIST pidl;int fmt;int cxChar;STRRET str;int iImage;};
struct _DISK_EXTENT {DWORD DiskNumber;LARGE_INTEGER StartingOffset;LARGE_INTEGER ExtentLength;};
struct _DOC_INFO_2A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;DWORD dwMode;DWORD JobId;};
struct _DOC_INFO_3A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;DWORD dwFlags;};
struct _DRAWPATRECT {POINT ptPosition;POINT ptSize;WORD wStyle;WORD wPattern;};
struct _DSFXFlanger {FLOAT fWetDryMix;FLOAT fDepth;FLOAT fFeedback;FLOAT fFrequency;LONG lWaveform;FLOAT fDelay;LONG lPhase;};
struct _FD_LIGATURE {ULONG culThis;ULONG ulType;ULONG cLigatures;LIGATURE alig[1];};
struct _MIB_IFTABLE {DWORD dwNumEntries;MIB_IFROW table[1];};
struct _PRIVKEYVER3 {DWORD magic;DWORD bitlenP;DWORD bitlenQ;DWORD bitlenJ;DWORD bitlenX;DSSSEED DSSSeed;};
struct _QOS_SD_MODE {QOS_OBJECT_HDR ObjectHdr;ULONG ShapeDiscardMode;};
struct _RPC_MESSAGE {RPC_BINDING_HANDLE Handle;unsigned int DataRepresentation;void *Buffer;unsigned int BufferLength;unsigned int ProcNum;PRPC_SYNTAX_IDENTIFIER TransferSyntax;void *RpcInterfaceInformation;void *ReservedForRuntime;void *ManagerEpv;void *ImportContext;unsigned int RpcFlags;};
struct _RSVP_POLICY {USHORT Len;USHORT Type;UCHAR Info[4];};
struct _SI_COPYFILE {DWORD SourceFileNameLength;DWORD DestinationFileNameLength;DWORD Flags;WCHAR FileNameBuffer[1];};
struct _WCE_IAS_SET {char irdaClassName[61];char irdaAttribName[61];u_short irdaAttribType;union _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3 irdaAttribute;};
struct _WSATHREADID {HANDLE ThreadHandle;DWORD_PTR Reserved;};
struct _wireBRECORD {ULONG fFlags;ULONG clSize;IRecordInfo *pRecInfo;byte *pRecord;};
struct tagAXESLISTA {DWORD axlReserved;DWORD axlNumAxes;AXISINFOA axlAxisInfo[16];};
struct tagAXESLISTW {DWORD axlReserved;DWORD axlNumAxes;AXISINFOW axlAxisInfo[16];};
struct tagAXISINFOA {LONG axMinValue;LONG axMaxValue;BYTE axAxisName[16];};
struct tagAXISINFOW {LONG axMinValue;LONG axMaxValue;WCHAR axAxisName[16];};
struct tagEMRLINETO {EMR emr;POINTL ptl;};
struct tagLVCOLUMNA {UINT mask;int fmt;int cx;LPSTR pszText;int cchTextMax;int iSubItem;int iImage;int iOrder;};
struct tagMOUSEKEYS {UINT cbSize;DWORD dwFlags;DWORD iMaxSpeed;DWORD iTimeToMaxSpeed;DWORD iCtrlSpeed;DWORD dwReserved1;DWORD dwReserved2;};
struct tagNMHEADERA {NMHDR hdr;int iItem;int iButton;HDITEMA *pitem;};
struct tagNMHEADERW {NMHDR hdr;int iItem;int iButton;HDITEMW *pitem;};
struct tagPARAMDESC {LPPARAMDESCEX pparamdescex;USHORT wParamFlags;};
struct tagQACONTROL {ULONG cbSize;DWORD dwMiscStatus;DWORD dwViewStatus;DWORD dwEventCookie;DWORD dwPropNotifyCookie;DWORD dwPointerActivationPolicy;};
struct tagRASPPPIPA {DWORD dwSize;DWORD dwError;CHAR szIpAddress[16];CHAR szServerIpAddress[16];DWORD dwOptions;DWORD dwServerOptions;};
struct tagRASPPPIPW {DWORD dwSize;DWORD dwError;WCHAR szIpAddress[16];WCHAR szServerIpAddress[16];DWORD dwOptions;DWORD dwServerOptions;};
struct tagREBARINFO {UINT cbSize;UINT fMask;HIMAGELIST himl;};
struct tagSTYLEBUFA {DWORD dwStyle;CHAR szDescription[32];};
struct tagSTYLEBUFW {DWORD dwStyle;WCHAR szDescription[32];};
struct tagTPMPARAMS {UINT cbSize;RECT rcExclude;};
struct tagWINDOWPOS {HWND hwnd;HWND hwndInsertAfter;int x;int y;int cx;int cy;UINT flags;};
typedef BOOL ( *FREEOBJPROC)(DRIVEROBJ *pDriverObj);
typedef int ( *LPWSPLISTEN)(SOCKET s, int backlog, LPINT lpErrno);
typedef DWORD ( *PDD_SETMODE)(PDD_SETMODEDATA);
typedef void ( *PFN_DrvFree)(PVOID, ULONG_PTR);
struct _ACE_HEADER {BYTE AceType;BYTE AceFlags;WORD AceSize;};
struct _CONNECTION {USHORT usSource;USHORT usControl;USHORT usDestination;USHORT usTransform;LONG lScale;};
struct _DCIOVERLAY {DCISURFACEINFO dciInfo;DWORD dwChromakeyValue;DWORD dwChromakeyMask;};
struct _DDCAPS_DX1 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;};
struct _DDCAPS_DX3 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwReserved4;DWORD dwReserved5;DWORD dwReserved6;};
struct _DDCAPS_DX5 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];};
struct _DDCORECAPS {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;};
struct _DSFXChorus {FLOAT fWetDryMix;FLOAT fDepth;FLOAT fFeedback;FLOAT fFrequency;LONG lWaveform;FLOAT fDelay;LONG lPhase;};
union _FLOAT_LONG {FLOATL e;LONG l;};
struct _INFCONTEXT {PVOID Inf;PVOID CurrentInf;UINT Section;UINT Line;};
struct _INSTHEADER {ULONG cRegions;MIDILOCALE Locale;};
struct _LSA_STRING {USHORT Length;USHORT MaximumLength;PCHAR Buffer;};
struct _PUBKEYVER3 {DWORD magic;DWORD bitlenP;DWORD bitlenQ;DWORD bitlenJ;DSSSEED DSSSeed;};
struct _RAS_USER_0 {BYTE bfPrivilege;WCHAR wszPhoneNumber[129];};
struct _TAPE_ERASE {DWORD Type;BOOLEAN Immediate;};
struct _TYPE1_FONT {HANDLE hPFM;HANDLE hPFB;ULONG ulIdentifier;};
struct _WIDTHTABLE {DWORD dwSize;DWORD dwRunNum;WIDTHRUN WidthRun[1];};
struct _WSAVersion {DWORD dwVersion;WSAECOMPARATOR ecHow;};
struct _WST_BUFFER {VBICODECFILTERING_SCANLINES ScanlinesRequested;WST_BUFFER_LINE WstLines[17];};
struct _numberfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;};
struct tagBSTRBLOB {ULONG cbSize;BYTE *pData;};
struct tagCLIPDATA {ULONG cbSize;int ulClipFmt;BYTE *pClipData;};
struct tagCUSTDATA {DWORD cCustData;LPCUSTDATAITEM prgCustData;};
struct tagELEMDESC {TYPEDESC tdesc;tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D __anonymous0;};
struct tagGLYPHSET {DWORD cbThis;DWORD flAccel;DWORD cGlyphsSupported;DWORD cRanges;WCRANGE ranges[1];};
struct tagMULTI_QI { IID *pIID;IUnknown *pItf;HRESULT hr;};
struct tagPELARRAY {LONG paXCount;LONG paYCount;LONG paXExt;LONG paYExt;BYTE paRGBs;};
struct tagRASSLIPA {DWORD dwSize;DWORD dwError;CHAR szIpAddress[16];};
struct tagRASSLIPW {DWORD dwSize;DWORD dwError;WCHAR szIpAddress[16];};
struct tagSTATDATA {FORMATETC formatetc;DWORD advf;IAdviseSink *pAdvSink;DWORD dwConnection;};
struct _BIN_COUNT {BIN_RANGE BinRange;DWORD BinCount;};
struct _CHAR_INFO {union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC Char;WORD Attributes;};
struct _COLORINFO {CIECHROMA Red;CIECHROMA Green;CIECHROMA Blue;CIECHROMA Cyan;CIECHROMA Magenta;CIECHROMA Yellow;CIECHROMA AlignmentWhite;LDECI4 RedGamma;LDECI4 GreenGamma;LDECI4 BlueGamma;LDECI4 MagentaInCyanDye;LDECI4 YellowInCyanDye;LDECI4 CyanInMagentaDye;LDECI4 YellowInMagentaDye;LDECI4 CyanInYellowDye;LDECI4 MagentaInYellowDye;};
struct _CTL_USAGE {DWORD cUsageIdentifier;LPSTR *rgpszUsageIdentifier;};
struct _D3DBRANCH {DWORD dwMask;DWORD dwValue;BOOL bNegate;DWORD dwOffset;};
struct _D3DSTATUS {DWORD dwFlags;DWORD dwStatus;D3DRECT drExtent;};
struct _DDSCAPSEX {DWORD dwCaps2;DWORD dwCaps3;_DDSCAPS2___19AC68468C4510B3DC631A4E89752068 __anonymous0;};
struct _DEVHTINFO {DWORD HTFlags;DWORD HTPatternSize;DWORD DevPelsDPI;COLORINFO ColorInfo;};
struct _DMUS_WAVE {ULONG ulFirstExtCkIdx;ULONG ulCopyrightIdx;ULONG ulWaveDataIdx;WAVEFORMATEX WaveformatEx;};
struct _ENUMRECTS {ULONG c;RECTL arcl[1];};
struct _HD_LAYOUT {RECT *prc;WINDOWPOS *pwpos;};
struct _HIDP_CAPS {USAGE Usage;USAGE UsagePage;USHORT InputReportByteLength;USHORT OutputReportByteLength;USHORT FeatureReportByteLength;USHORT Reserved[17];USHORT NumberLinkCollectionNodes;USHORT NumberInputButtonCaps;USHORT NumberInputValueCaps;USHORT NumberInputDataIndices;USHORT NumberOutputButtonCaps;USHORT NumberOutputValueCaps;USHORT NumberOutputDataIndices;USHORT NumberFeatureButtonCaps;USHORT NumberFeatureValueCaps;USHORT NumberFeatureDataIndices;};
struct _HIDP_DATA {USHORT DataIndex;USHORT Reserved;_HIDP_DATA___054E66EBAEB900A97FB470AAB272100E __anonymous0;};
struct _IMAGEINFO {HBITMAP hbmImage;HBITMAP hbmMask;int Unused1;int Unused2;RECT rcImage;};
struct _IOSPACE64 {ULONG64 Address;ULONG Length;ULONG Data;};
struct _LDT_ENTRY {WORD LimitLow;WORD BaseLow;union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 HighWord;};
struct _MCDWINDOW {RECTL clientRect;RECTL clipBoundsRect;MCDENUMRECTS *pClip;MCDENUMRECTS *pClipUnscissored;void *pvUser;};
struct _MOF_FIELD {ULONG64 DataPtr;ULONG Length;ULONG DataType;};
struct _MONITOREX {DWORD dwMonitorSize;MONITOR Monitor;};
struct _NRESARRAY {UINT cItems;NETRESOURCE nr[1];};
struct _PSHNOTIFY {NMHDR hdr;LPARAM lParam;};
struct _RGNHEADER {RGNRANGE RangeKey;RGNRANGE RangeVelocity;USHORT fusOptions;USHORT usKeyGroup;};
struct _SC_ACTION {SC_ACTION_TYPE Type;DWORD Delay;};
struct _TRANSDATA {BYTE ubCodePageID;BYTE ubType;union _TRANSDATA___171E29005E45E425E24743D2D879D2A6 uCode;};
struct _TRIVERTEX {LONG x;LONG y;COLOR16 Red;COLOR16 Green;COLOR16 Blue;COLOR16 Alpha;};
struct _tagOLECMD {ULONG cmdID;DWORD cmdf;};
union tagBINDPTR {FUNCDESC *lpfuncdesc;VARDESC *lpvardesc;ITypeComp *lptcomp;};
struct tagCACLSID {ULONG cElems;CLSID *pElems;};
struct tagCADWORD {ULONG cElems;DWORD *pElems;};
struct tagCALPSTR {ULONG cElems;LPSTR *pElems;};
struct tagCASCODE {ULONG cElems;SCODE *pElems;};
struct tagIDLDESC {ULONG_PTR dwReserved;USHORT wIDLFlags;};
struct tagLICINFO {LONG cbLicInfo;BOOL fRuntimeKeyAvail;BOOL fLicVerified;};
struct tagRASIPXW {DWORD dwSize;DWORD dwError;WCHAR szIpxAddress[22];};
struct tagWCRANGE {WCHAR wcLow;USHORT cGlyphs;};
typedef BOOL ( *ABORTPROC)(HDC, int);
typedef int ( *LPWSPBIND)(SOCKET s,  struct sockaddr *name, int namelen, LPINT lpErrno);
struct _CERT_RDN {DWORD cRDNAttr;PCERT_RDN_ATTR rgRDNAttr;};
struct _D3DSTATE {_D3DSTATE___FC92201DB4C9E6548D65A7EA5D174F48 __anonymous0;_D3DSTATE___6E126D7179C3BD6696EBA355AAC6A589 __anonymous1;};
struct _DDSCAPS2 {DWORD dwCaps;DWORD dwCaps2;DWORD dwCaps3;_DDSCAPS2___19AC68468C4510B3DC631A4E89752068 __anonymous0;};
struct _DOCINFOA {int cbSize;LPCSTR lpszDocName;LPCSTR lpszOutput;LPCSTR lpszDatatype;DWORD fwType;};
struct _DSCFXAec {BOOL fEnable;BOOL fNoiseFill;DWORD dwMode;};
struct _DSFXEcho {FLOAT fWetDryMix;FLOAT fFeedback;FLOAT fLeftDelay;FLOAT fRightDelay;LONG lPanDelay;};
struct _FONTINFO {ULONG cjThis;FLONG flCaps;ULONG cGlyphsSupported;ULONG cjMaxGlyph1;ULONG cjMaxGlyph4;ULONG cjMaxGlyph8;ULONG cjMaxGlyph32;};
struct _FPO_DATA {DWORD ulOffStart;DWORD cbProcSize;DWORD cdwLocals;WORD cdwParams;unsigned short cbProlog : 8;unsigned short cbRegs : 3;unsigned short fHasSEH : 1;unsigned short fUseBP : 1;unsigned short reserved : 1;unsigned short cbFrame : 2;};
union _GLYPHDEF {GLYPHBITS *pgb;PATHOBJ *ppo;};
struct _GLYPHRUN {WCHAR wcLow;WORD wGlyphCount;};
struct _IFIEXTRA {ULONG ulIdentifier;PTRDIFF dpFontSig;ULONG cig;PTRDIFF dpDesignVector;PTRDIFF dpAxesInfoW;ULONG aulReserved[1];};
struct _KERNDATA {DWORD dwSize;DWORD dwKernPairNum;FD_KERNINGPAIR KernPair[1];};
struct _MAPTABLE {DWORD dwSize;DWORD dwGlyphNum;TRANSDATA Trans[1];};
struct _MMCKINFO {FOURCC ckid;DWORD cksize;FOURCC fccType;DWORD dwDataOffset;DWORD dwFlags;};
struct _NS_INFOA {DWORD dwNameSpace;DWORD dwNameSpaceFlags;LPSTR lpNameSpace;};
struct _NT_TIB32 {DWORD ExceptionList;DWORD StackBase;DWORD StackLimit;DWORD SubSystemTib;_NT_TIB32___6105CEC04866A055CE5CBAD3B96FF6B2 __anonymous0;DWORD ArbitraryUserPointer;DWORD Self;};
struct _NT_TIB64 {DWORD64 ExceptionList;DWORD64 StackBase;DWORD64 StackLimit;DWORD64 SubSystemTib;_NT_TIB64___1E27901D73CC769BB707041ECE344787 __anonymous0;DWORD64 ArbitraryUserPointer;DWORD64 Self;};
struct _OBJECTID {GUID Lineage;DWORD Uniquifier;};
struct _OEMUIOBJ {DWORD cbSize;POEMUIPROCS pOemUIProcs;};
struct _PERF_BIN {DWORD NumberOfBins;DWORD TypeOfBin;BIN_RANGE BinsRanges[1];};
struct _SHITEMID {USHORT cb;BYTE abID[1];};
struct _WAVELINK {USHORT fusOptions;USHORT usPhaseGroup;ULONG ulChannel;ULONG ulTableIndex;};
struct _WIDTHRUN {WORD wStartGlyph;WORD wGlyphCount;DWORD loCharWidthOffset;};
struct _flowspec {ULONG TokenRate;ULONG TokenBucketSize;ULONG PeakBandwidth;ULONG Latency;ULONG DelayVariation;SERVICETYPE ServiceType;ULONG MaxSduSize;ULONG MinimumPolicedSize;};
struct tagCABOOL {ULONG cElems;VARIANT_BOOL *pElems;};
struct tagCADATE {ULONG cElems;DATE *pElems;};
struct tagCAUUID {ULONG cElems;GUID *pElems;};
struct tagEMREOF {EMR emr;DWORD nPalEntries;DWORD offPalEntries;DWORD nSizeLast;};
struct tagNMLINK {NMHDR hdr;LITEM item;};
struct tagRAWHID {DWORD dwSizeHid;DWORD dwCount;BYTE bRawData[1];};
struct _CERT_ID {DWORD dwIdChoice;_CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C __anonymous0;};
struct _D3DLINE {_D3DLINE___C167AD525C2A16158535093655B0BE27 __anonymous0;_D3DLINE___5E81141D7147E4DA50A203FBA8012470 __anonymous2;};
struct _DBLNODE {struct _DBLNODE *next;struct _DBLNODE *prev;LPDDRAWI_DDRAWSURFACE_LCL object;LPDDRAWI_DDRAWSURFACE_INT object_int;};
struct _DSSSEED {DWORD counter;BYTE seed[20];};
struct _MCDSPAN {LONG x;LONG y;LONG numPixels;ULONG type;void *pPixels;};
struct _PATHOBJ {FLONG fl;ULONG cCurves;};
struct _WGLSWAP {HDC hdc;UINT uiFlags;};
struct tagACCEL {BYTE fVirt;WORD key;WORD cmd;};
struct tagCADBL {ULONG cElems;DOUBLE *pElems;};
struct tagCAFLT {ULONG cElems;FLOAT *pElems;};
struct tagLITEM {UINT mask;int iLink;UINT state;UINT stateMask;WCHAR szID[48];WCHAR szUrl[2084];};
struct tagNMKEY {NMHDR hdr;UINT nVKey;UINT uFlags;};
struct WSPData {WORD wVersion;WORD wHighVersion;WCHAR szDescription[256];};
struct _MCDBUF {ULONG bufFlags;LONG bufOffset;LONG bufStride;};
struct _MCDMEM {ULONG memSize;ULONG createFlags;UCHAR *pMemBase;ULONG userFlags;void *pvUser;};
struct _NT_TIB {struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;PVOID StackBase;PVOID StackLimit;PVOID SubSystemTib;_NT_TIB___0349ADB4452EC09BEC08E2292695FBBA __anonymous0;PVOID ArbitraryUserPointer;struct _NT_TIB *Self;};
struct _VSC_VK {BYTE Vsc;USHORT Vk;};
struct _cpinfo {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];};
struct tagBLOB {ULONG cbSize;BYTE *pBlobData;};
struct tagCACY {ULONG cElems;CY *pElems;};
struct tagCAUB {ULONG cElems;UCHAR *pElems;};
struct tagCAUH {ULONG cElems;ULARGE_INTEGER *pElems;};
struct tagCAUI {ULONG cElems;USHORT *pElems;};
struct _DRVFN {ULONG iFunc;PFN pfn;};
struct _MCDRC {LONG iPixelFormat;LONG iLayerPlane;ULONG createFlags;ULONG userFlags;void *pvUser;};
struct fd_set {u_int fd_count;SOCKET fd_array[64];};
struct tagCAC {ULONG cElems;CHAR *pElems;};
struct tagCAH {ULONG cElems;LARGE_INTEGER *pElems;};
struct tagCAI {ULONG cElems;SHORT *pElems;};
struct tagCAL {ULONG cElems;LONG *pElems;};
struct _LUID {DWORD LowPart;LONG HighPart;};
union tagCY {tagCY___983F061E0B702DD8AE0B4B955735A6A3 __anonymous0;LONGLONG int64;};
struct _ACL {BYTE AclRevision;BYTE Sbz1;WORD AclSize;WORD AceCount;WORD Sbz2;};
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52 {LARGE_INTEGER Cylinders;STORAGE_MEDIA_TYPE MediaType;DWORD TracksPerCylinder;DWORD SectorsPerTrack;DWORD BytesPerSector;DWORD NumberMediaSides;DWORD MediaCharacteristics;};
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___59AFAA6F9F17F2AA385AB5E28054F780 {HWND hWnd;UINT uMsg;WPARAM context;};
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___B971492F433B977CE6769B3AAD780315 {LPWSAOVERLAPPED lpOverlapped;HANDLE hPort;ULONG_PTR Key;};
union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2 {struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2___9A3D5550B6DEF9CE405BB00483386E67 ProcessorCore;struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2___DB4434C0CE3788EF589018B7D8F8E412 NumaNode;ULONGLONG Reserved[2];};
struct ____335ECC51A6B56A7597C0B2929815FEAA___77A8D5BA7911BAC3E5E8672810CEE79A {HANDLE Semaphore;ULONG Reserved;LONG Adjustment;};
union _16C1E3925C7C4AECC0ACCAA7BBC13164___335ECC51A6B56A7597C0B2929815FEAA {struct ____335ECC51A6B56A7597C0B2929815FEAA___557E0A75632B2AB77ABA22F73346E46E EventHandle;struct ____335ECC51A6B56A7597C0B2929815FEAA___77A8D5BA7911BAC3E5E8672810CEE79A SemaphoreHandle;struct ____335ECC51A6B56A7597C0B2929815FEAA___2045542961514ACF8A05342E7D7A4BD3 Alignment;};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A __anonymous0;DWORD Name;WORD Id;};
union _CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA {PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;};
union _CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC {PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;};
union _DDRAWI_DDRAWSURFACE_GBL___067F989D0D1C114CD62AD2D89785FAE9 {LPACCESSRECTLIST lpRectList;DWORD dwBlockSizeY;LONG lSlicePitch;};
union _LSA_FOREST_TRUST_RECORD___C7B7650F067485BDF6AE9750858A9CDD {LSA_UNICODE_STRING TopLevelName;LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo;LSA_FOREST_TRUST_BINARY_DATA Data;};
union _EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830 {_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___4632BB0954E310FA042A82D8AAC70C14 __anonymous0;_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___3916B5A0A4660469331A3AB74E6C841E __anonymous3;ULONG64 ProcessorTime;};
union _EVENT_TRACE_HEADER___542A7946210020DC939EF0A87B64A883 {_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___4632BB0954E310FA042A82D8AAC70C14 __anonymous0;_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___3916B5A0A4660469331A3AB74E6C841E __anonymous2;ULONG64 ProcessorTime;};
union _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD {LONG irdaAttribInt;struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___B5DCF807C499FCDEE2A60940AC752147 irdaAttribOctetSeq;struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___04135898E560345A2F242A01D2B4E8C6 irdaAttribUsrStr;};
union tagRID_DEVICE_INFO___5504F465AFF1BB2B3641E853B1A95DB8 {RID_DEVICE_INFO_MOUSE mouse;RID_DEVICE_INFO_KEYBOARD keyboard;RID_DEVICE_INFO_HID hid;};
union _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191 {LONG irdaAttribInt;struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___1D4E303DADE57E5BB276842A2C49A9FB irdaAttribOctetSeq;struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___C57AEBFB9C28022BDEE1928105F7EF0C irdaAttribUsrStr;};
union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8 {tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC __anonymous0;tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B __anonymous2;DWORD dwReserved[6];};
union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122 {tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC __anonymous0;tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B __anonymous2;DWORD dwReserved[6];};
union tagKS_VIDEOINFO___F8BBADE88DA80D04A6A2CB02740F1E2F {KS_RGBQUAD bmiColors[256];DWORD dwBitMasks[3];KS_TRUECOLORINFO TrueColorInfo;};
union _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3 {BYTE ShortName[8];struct _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3___DE8E098676ACAC74F2956A2D7B83DF3B Name;DWORD LongName[2];};
union _WNODE_HEADER___94883EDDB53D73798B50E968A69A9EBB {ULONG CountLost;HANDLE KernelHandle;LARGE_INTEGER TimeStamp;};
struct _IPX_PATTERN___BD8DCF4BCCBA406C79DE40E5D399A54E {ULONG NetworkAddress;UCHAR NodeAddress[6];USHORT Socket;};
union _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC {struct _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC___357EACEEC0937B9854AEEA856D78648F S_un_ports;struct _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC___C14401A1E0730961694E5F3AC835B577 S_un_icmp;ULONG S_Spi;};
union tagRAWINPUT___B145025D4CA0B4EFAFBBD6E93F901CD9 {RAWMOUSE mouse;RAWKEYBOARD keyboard;RAWHID hid;};
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 {DWORD ms;DWORD sample;DWORD cb;DWORD ticks;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB smpte;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D midi;};
union tagINPUT___72687D791E298366090936F57062F9D6 {MOUSEINPUT mi;KEYBDINPUT ki;HARDWAREINPUT hi;};
union in_addr___C13EC994467D6E67044F092615EC7EA9 {struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 S_un_b;struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 S_un_w;u_long S_addr;};
struct _D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA {ULONG_PTR dwhContext;DWORD dwFlags;ULONG_PTR dwReserved;DWORD dwNumPasses;HRESULT ddrval;};
struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {HANDLE hClientToken;GUID *SubjectType;WIN_TRUST_SUBJECT Subject;};
typedef ULONG ( *PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32)(ULONG offset, LPCVOID lpBuffer, ULONG cb, PULONG lpcbBytesWritten);
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {DWORD cbSize;CMSG_SIGNED_ENCODE_INFO SignedInfo;CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;};
typedef ULONG ( *PWINDBG_READ_PROCESS_MEMORY_ROUTINE32)(ULONG offset, PVOID lpBuffer, ULONG cb, PULONG lpcbBytesRead);
struct _D3DHAL_VALIDATETEXTURESTAGESTATEDATA {ULONG_PTR dwhContext;DWORD dwFlags;ULONG_PTR dwReserved;DWORD dwNumPasses;HRESULT ddrval;};
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;IO_COUNTERS IoInfo;SIZE_T ProcessMemoryLimit;SIZE_T JobMemoryLimit;SIZE_T PeakProcessMemoryUsed;SIZE_T PeakJobMemoryUsed;};
struct _KERB_ADD_BINDING_CACHE_ENTRY_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;UNICODE_STRING RealmName;UNICODE_STRING KdcAddress;ULONG AddressType;};
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {ULONG_PTR ProcessorMask;LOGICAL_PROCESSOR_RELATIONSHIP Relationship;_SYSTEM_LOGICAL_PROCESSOR_INFORMATION___52971DF241DA2C29A674324492E847F2 __anonymous0;};
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {CHANGER_ELEMENT StartingElement;DWORD ActionCode;BYTE VolumeIDTemplate[40];};
struct _FT_MIRROR_AND_SWP_STATE_INFORMATION {BOOLEAN IsDirty;BOOLEAN IsInitializing;USHORT UnhealthyMemberNumber;FT_MEMBER_STATE UnhealthyMemberState;};
union _GDI_OBJECT____MIDL_IAdviseSink_0002 {wireHBITMAP hBitmap;wireHPALETTE hPalette;wireHGLOBAL hGeneric;};
struct NDIS_BPC_MEDIA_SPECIFIC_INFORMATION {BPC_HANDLE nhConnection;ULONG ulBPCStreamType;ULONG ulReasonCode;PVOID pvMiniportReserved1;ULONG ulMiniportReserved2;};
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {LPSTR pszObjId;DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct IInternetProtocolSinkStackableVtbl {HRESULT ( *QueryInterface)(IInternetProtocolSinkStackable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolSinkStackable *This);ULONG ( *Release)(IInternetProtocolSinkStackable *This);HRESULT ( *SwitchSink)(IInternetProtocolSinkStackable *This, IInternetProtocolSink *pOIProtSink);HRESULT ( *CommitSwitch)(IInternetProtocolSinkStackable *This);HRESULT ( *RollbackSwitch)(IInternetProtocolSinkStackable *This);};
typedef NTSTATUS ( *PSAM_PASSWORD_NOTIFICATION_ROUTINE)(PUNICODE_STRING UserName, ULONG RelativeId, PUNICODE_STRING NewPassword);
struct _D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE2 {D3DPRIMITIVETYPE primType;INT BaseVertexOffset;DWORD MinIndex;DWORD NumVertices;DWORD StartIndexOffset;DWORD PrimitiveCount;};
struct _LSA_FOREST_TRUST_COLLISION_RECORD {ULONG Index;LSA_FOREST_TRUST_COLLISION_RECORD_TYPE Type;ULONG Flags;LSA_UNICODE_STRING Name;};
struct _0302F8A06E19F526F6B7CE33122C2128 {BYTE bFirstEntry;BYTE bNumEntries;WORD wFlags;PALETTEENTRY peNew[];};
struct _078929F8CD96C82DFB2B0B82CFD86124 {DWORD cbSize;DWORD dwSignature;CHAR szTarget[260];WCHAR swzTarget[260];};
struct _1C8C43135D010607C9E39DAEFBEEA658 {PVOID Context;ULONG Proportion;LONGLONG DeltaTime;};
struct _1F0027E2ABF976FB8AD72E88DC9BB28B {KSPROPERTY Property;LONGLONG PictureNumber;LONGLONG DropCount;ULONG AverageFrameSize;};
struct _2E2AA9F03C861A9A9D27DBF19670D54B {NMHDR hdr;BOOL fChanged;int iNewSelection;WCHAR szText[260];int iWhy;};
struct _30C092ACFDACA2A085242C6994837CA9 {UINT cbSize;POINT pt;UINT uHit;SYSTEMTIME st;};
struct _38332C6D8513F636DCCBCCABE200BE7A {ULONG Size;KSDS3D_HRTF_FILTER_QUALITY Quality;FLOAT SampleRate;ULONG MaxFilterSize;ULONG FilterTransientMuteLength;ULONG FilterOverlapBufferLength;ULONG OutputOverlapBufferLength;ULONG Reserved;};
struct _3A21E11B68C434F2F5E8C2B6B2DCB409 {DWORD dwFlags;LPVOID lpFormat;LPVOID lpData;DWORD cbData;LONG lTime;};
struct _43A66EA2444E935077C76570D355CBC3 {DWORD dwBoth;WCHAR wchComposed;USHORT uFlags;};
struct _441EBF211493C42D9642F77D873F68D1 {KSPROPERTY Property;ULONG StreamIndex;LONG DefaultKeyFrameRate;LONG DefaultPFrameRate;LONG DefaultQuality;LONG NumberOfQualitySettings;LONG Capabilities;};
struct _4436E3E3B2A9BAC50D793DBB422657C7 {KSNODEPROPERTY NodeProperty;PVOID AppContext;ULONG Length;ULONG Reserved;};
struct _478EBBB1B521D3328EC986A2D868B910 {DWORD dwSize;DWORD fccType;DWORD fccHandler;DWORD dwVersion;DWORD dwFlags;LRESULT dwError;LPVOID pV1Reserved;LPVOID pV2Reserved;DWORD dnDevNode;};
struct _48207AC35C517F533F0BE91ADB0B9FCA {KSPROPERTY Property;ULONG ModesSupported;KSPIN_MEDIUM VideoMedium;KSPIN_MEDIUM TVAudioMedium;KSPIN_MEDIUM RadioAudioMedium;};
struct _49CD7323AA35D3C00204BB7AA8563FFA {HANDLE FileHandle;LARGE_INTEGER StartingVcn;LARGE_INTEGER StartingLcn;DWORD ClusterCount;};
struct _4A6DF2B8DF82B84B316F580845E87DE1 {int iNextSample;DWORD dwLastScroll;BOOL bFull;POINT pts[3];DWORD dwTimes[3];};
struct _4ECFA59CF9422A64A465D2E51971C347 {PVK_TO_BIT pVkToBit;WORD wMaxModBits;BYTE ModNumber[];};
struct _572C9F5A336F5256CCDD98B741672A4F {GUID Guid;ULONG Flags;ULONG InstanceCount;_572C9F5A336F5256CCDD98B741672A4F___3D2B62F9915B44C4461260C3662DC358 __anonymous0;};
struct _6957CE76948A33FD66E00469AB6817B0 {KSPROPERTY Property;ULONG StreamIndex;LONG Value;};
struct _6B8E9FF8FB4DE59DE7DA4092DA92354D {KSNODEPROPERTY NodeProperty;PVOID ListenerId;ULONG Reserved;};
struct _6D499679CD08099A5FDFDFD45568A323 {DWORD dwFlags;LPBITMAPINFOHEADER lpbiInput;LPVOID lpInput;LPBITMAPINFOHEADER lpbiOutput;LPVOID lpOutput;DWORD ckid;};
struct _71B09FCCFB7FB16B05205AE0543E85F3 {HIMAGELIST himl;RECT margin;UINT uAlign;};
struct _73DB40CAD3136568FAD030BDAAB8FF71 {char HostName[132];char DomainName[132];PIP_ADDR_STRING CurrentDnsServer;IP_ADDR_STRING DnsServerList;UINT NodeType;char ScopeId[260];UINT EnableRouting;UINT EnableProxy;UINT EnableDns;};
struct _797ABA875A7F80AEFE23C6BF7D56B10A {DWORD dwFlags;LPBITMAPINFOHEADER lpbiSrc;LPVOID lpSrc;LPBITMAPINFOHEADER lpbiDst;LPVOID lpDst;int xDst;int yDst;int dxDst;int dyDst;int xSrc;int ySrc;int dxSrc;int dySrc;};
struct _7C2EF957B9500F866DD2CA3770F79A02 {DWORD Size;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD GlobalFlagsClear;DWORD GlobalFlagsSet;DWORD CriticalSectionDefaultTimeout;ULONGLONG DeCommitFreeBlockThreshold;ULONGLONG DeCommitTotalFreeThreshold;ULONGLONG LockPrefixTable;ULONGLONG MaximumAllocationSize;ULONGLONG VirtualMemoryThreshold;ULONGLONG ProcessAffinityMask;DWORD ProcessHeapFlags;WORD CSDVersion;WORD Reserved1;ULONGLONG EditList;ULONGLONG SecurityCookie;ULONGLONG SEHandlerTable;ULONGLONG SEHandlerCount;};
struct _7F42DEB2BB5D0DE64733A8884285C23D {RPC_NS_HANDLE LookupContext;RPC_BINDING_HANDLE ProposedHandle;RPC_BINDING_VECTOR *Bindings;};
struct _8251F34BCF49AE1C266F7CD180791646 {KSNODEPROPERTY NodeProperty;LONG Channel;ULONG Reserved;};
struct _9A6BD7645A973A5ADF34F154404EC940 {KSPROPERTY Property;LONG Value;ULONG Flags;ULONG Capabilities;};
struct _9D2EE2D5E082F56CCDE737471FBF8D82 {KSEVENT Event;PKSEVENTDATA EventData;PVOID Reserved;};
struct _A45289B030366F6A209F1D22B819A49A {LARGE_INTEGER FileReferenceNumber;DWORD FileRecordLength;BYTE FileRecordBuffer[1];};
struct _A4A1DF623BA0FBABE6621202D771B918 {DWORD nSize;HDC hdc;PBYTE pvEMF;PBYTE pvCurrentRecord;};
struct _AAD79452FC68247846A5E3B058A03BB4 {KSPROPERTY Property;ULONG Capabilities;KSPIN_MEDIUM InputMedium;KSPIN_MEDIUM OutputMedium;};
struct _B3292A763DBD4275988A0D01CB88CB44 {ULONG dwFlags;DWORD dwFileAttributes;ULONG dwReserved;WCHAR *pwszExt;WCHAR wszFile[260];};
struct _B860A2A409E82E290A04B87FD69A6FE2 {int fShowAllObjects : 1;int fShowExtensions : 1;int fNoConfirmRecycle : 1;int fShowSysFiles : 1;int fShowCompColor : 1;int fDoubleClickInWebView : 1;int fDesktopHTML : 1;int fWin95Classic : 1;int fDontPrettyPath : 1;int fShowAttribCol : 1;int fMapNetDrvBtn : 1;int fShowInfoTip : 1;int fHideIcons : 1;int fWebView : 1;int fFilter : 1;int fShowSuperHidden : 1;int fNoNetCrawling : 1;DWORD dwWin95Unused;UINT uWin95Unused;LONG lParamSort;int iSortDirection;UINT version;UINT uNotUsed;int fSepProcess : 1;int fStartPanelOn : 1;int fShowStartPage : 1;unsigned int fSpareFlags : 13;};
struct _C6832D807A2747A4D0CBF13E34E0B28B {tagDATABLOCKHEADER __anonymous0;CHAR szDarwinID[260];WCHAR szwDarwinID[260];};
struct _C811A85A3CBAF233E045382DA27E29BF {UINT cbSize;HWND hwnd;DWORD dwFlags;UINT uCount;DWORD dwTimeout;};
struct _C9C4D03C150E869FFC5FB33A10EAB149 {BOOL Enable;KSPROPERTY_SYSAUDIO_DEFAULT_TYPE DeviceType;ULONG Flags;ULONG Reserved;};
struct _CA059CF4194B4A9D56D5FA32D4D81CE0 {LPITEMIDLIST pidlTargetFolder;WCHAR szTargetParsingName[260];WCHAR szNetworkProvider[260];DWORD dwAttributes;int csidl;};
struct _CB16EFCEDA39FCD4D0BC1BDE67199271 {KSPROPERTY Property;ULONG StreamIndex;LONG Mode;};
struct _CBE416C4EAAA19179E77E4054907ADFF {USN StartUsn;DWORD ReasonMask;DWORD ReturnOnlyOnClose;DWORDLONG Timeout;DWORDLONG BytesToWaitFor;DWORDLONG UsnJournalID;};
struct _D26D25374C75FEF3AD181CCFA77BD37F {SCARD_IO_REQUEST ioRequest;BYTE bSw1;BYTE bSw2;_D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F __anonymous0;};
struct _D2D205A4E5DA2498F5010F3E3EADEEBB {KSPROPERTY Property;ULONG StreamIndex;ULONG RangeIndex;SIZE Dimensions;};
struct _D8768C71F24D405D4B7DEC8016730D6C {ULONG CategoriesCount; GUID *Categories;ULONG TopologyNodesCount; GUID *TopologyNodes;ULONG TopologyConnectionsCount; KSTOPOLOGY_CONNECTION *TopologyConnections; GUID *TopologyNodesNames;ULONG Reserved;};
struct _DCA1691E12E502D611F5426518CFEFB5 {KSDATARANGE DataRange;GUID Technology;ULONG Channels;ULONG Notes;ULONG ChannelMask;};
struct _E1D601DFB9F50A58CFF7A79389CE7A63 {ULONG CountItems;ULONG PinFlags;KS_COMPRESSION OutputCompression;ULONG PinWeight;KS_FRAMING_ITEM FramingItem[1];};
struct _EAA2A559B48BCBAE81109D6C3EFDA87C {NMHDR hdr;WORD fwKeys;RECT rcParent;int iDir;int iXpos;int iYpos;int iScroll;};
struct _EF98EE567420140E285BF0657F46953F {KSPROPERTY Property;GUID SourceFormat;GUID TargetFormat;LONGLONG Time;};
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;DWORD dwRecipientIndex;};
struct _D3DNTHAL_DP2DRAWINDEXEDPRIMITIVE {D3DPRIMITIVETYPE primType;INT BaseVertexIndex;DWORD MinIndex;DWORD NumVertices;DWORD StartIndex;DWORD PrimitiveCount;};
struct _KERB_QUERY_TKT_CACHE_EX_RESPONSE {KERB_PROTOCOL_MESSAGE_TYPE MessageType;ULONG CountOfTickets;KERB_TICKET_CACHE_INFO_EX Tickets[1];};
struct _TRUSTED_DOMAIN_FULL_INFORMATION2 {TRUSTED_DOMAIN_INFORMATION_EX2 Information;TRUSTED_POSIX_OFFSET_INFO PosixOffset;TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;};
struct tagACTCTX_SECTION_KEYED_DATA_2600 {ULONG cbSize;ULONG ulDataFormatVersion;PVOID lpData;ULONG ulLength;PVOID lpSectionGlobalData;ULONG ulSectionGlobalDataLength;PVOID lpSectionBase;ULONG ulSectionTotalLength;HANDLE hActCtx;ULONG ulAssemblyRosterIndex;};
typedef BOOL ( *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void *pvReserved);
struct _CERT_KEY_USAGE_RESTRICTION_INFO {DWORD cCertPolicyId;PCERT_POLICY_ID rgCertPolicyId;CRYPT_BIT_BLOB RestrictedKeyUsage;};
struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE2 {D3DPRIMITIVETYPE primType;INT BaseVertexOffset;DWORD MinIndex;DWORD NumVertices;DWORD StartIndexOffset;DWORD PrimitiveCount;};
struct _TRUSTED_DOMAIN_FULL_INFORMATION {TRUSTED_DOMAIN_INFORMATION_EX Information;TRUSTED_POSIX_OFFSET_INFO PosixOffset;TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;};
typedef HRESULT ( *LPD3DENUMTEXTUREFORMATSCALLBACK)(LPDDSURFACEDESC lpDdsd, LPVOID lpContext);
typedef void ( *PWINDBG_OLDKD_EXTENSION_ROUTINE)(ULONG dwCurrentPc, PWINDBG_OLDKD_EXTENSION_APIS lpExtensionApis, PCSTR lpArgumentString);
struct _D3DHAL_DP2DRAWINDEXEDPRIMITIVE {D3DPRIMITIVETYPE primType;INT BaseVertexIndex;DWORD MinIndex;DWORD NumVertices;DWORD StartIndex;DWORD PrimitiveCount;};
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 __anonymous0;union {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous1;};};
struct _MSV1_0_CHANGEPASSWORD_RESPONSE {MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;BOOLEAN PasswordInfoValid;DOMAIN_PASSWORD_INFORMATION DomainPasswordInfo;};
struct IWbemEventConsumerProviderVtbl {HRESULT ( *QueryInterface)(IWbemEventConsumerProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemEventConsumerProvider *This);ULONG ( *Release)(IWbemEventConsumerProvider *This);HRESULT ( *FindConsumer)(IWbemEventConsumerProvider *This, IWbemClassObject *pLogicalConsumer, IWbemUnboundObjectSink **ppConsumer);};
typedef BOOL ( *PFN_DrvIcmDeleteColorTransform)(DHPDEV, HANDLE);
struct _KERB_QUERY_TKT_CACHE_RESPONSE {KERB_PROTOCOL_MESSAGE_TYPE MessageType;ULONG CountOfTickets;KERB_TICKET_CACHE_INFO Tickets[1];};
struct _MSV1_0_CHANGEPASSWORD_REQUEST {MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;UNICODE_STRING DomainName;UNICODE_STRING AccountName;UNICODE_STRING OldPassword;UNICODE_STRING NewPassword;BOOLEAN Impersonating;};
struct _TRUSTED_DOMAIN_INFORMATION_EX {LSA_UNICODE_STRING Name;LSA_UNICODE_STRING FlatName;PSID Sid;ULONG TrustDirection;ULONG TrustType;ULONG TrustAttributes;};
struct tagI_RpcProxyCallbackInterface {I_RpcProxyIsValidMachineFn IsValidMachineFn;I_RpcProxyGetClientAddressFn GetClientAddressFn;I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;};
struct IConnectionPointContainerVtbl {HRESULT ( *QueryInterface)(IConnectionPointContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConnectionPointContainer *This);ULONG ( *Release)(IConnectionPointContainer *This);HRESULT ( *EnumConnectionPoints)(IConnectionPointContainer *This, IEnumConnectionPoints **ppEnum);HRESULT ( *FindConnectionPoint)(IConnectionPointContainer *This,  IID * riid, IConnectionPoint **ppCP);};
typedef HRESULT ( *LPD3DENUMPIXELFORMATSCALLBACK)(LPDDPIXELFORMAT lpDDPixFmt, LPVOID lpContext);
typedef HRESULT ( *LPFNACCESSIBLEOBJECTFROMPOINT)(POINT ptScreen, IAccessible **ppacc, VARIANT *pvarChild);
typedef int ( *LPWPUQUERYSOCKETHANDLECONTEXT)(SOCKET s, PDWORD_PTR lpContext, LPINT lpErrno);
typedef BOOL ( *PFN_DrvUpgradeRegistrySetting)(HANDLE hPrinter, PCSTR pFeature, PCSTR pOption);
typedef void ( *PWINDBG_OLD_EXTENSION_ROUTINE)(ULONG dwCurrentPc, PWINDBG_EXTENSION_APIS lpExtensionApis, PCSTR lpArgumentString);
struct _D3DNTHAL_SETRENDERTARGETDATA {ULONG_PTR dwhContext;PDD_SURFACE_LOCAL lpDDS;PDD_SURFACE_LOCAL lpDDSZ;HRESULT ddrval;};
struct _DRIVE_LAYOUT_INFORMATION_GPT {GUID DiskId;LARGE_INTEGER StartingUsableOffset;LARGE_INTEGER UsableLength;DWORD MaxPartitionCount;};
struct _KERB_PURGE_TKT_CACHE_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;LUID LogonId;UNICODE_STRING ServerName;UNICODE_STRING RealmName;};
struct _OFFLOAD_SECURITY_ASSOCIATION {OFFLOAD_OPERATION_E Operation;SPI_TYPE SPI;OFFLOAD_ALGO_INFO IntegrityAlgo;OFFLOAD_ALGO_INFO ConfAlgo;OFFLOAD_ALGO_INFO Reserved;};
struct _SECURITY_DESCRIPTOR_RELATIVE {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;DWORD Owner;DWORD Group;DWORD Sacl;DWORD Dacl;};
typedef void ( *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR pszObjectOid, PCRYPT_BLOB_ARRAY pObject, LPVOID pvFreeContext);
typedef ULONG ( *PWINDBG_STACKTRACE_ROUTINE64)(ULONG64 FramePointer, ULONG64 StackPointer, ULONG64 ProgramCounter, PEXTSTACKTRACE64 StackFrames, ULONG Frames);
struct _ACCESS_ALLOWED_CALLBACK_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _CERT_AUTHORITY_KEY_ID2_INFO {CRYPT_DATA_BLOB KeyId;CERT_ALT_NAME_INFO AuthorityCertIssuer;CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;};
struct _CMSG_KEY_TRANS_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;DWORD dwFlags;};
struct _CMSG_MAIL_LIST_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;DWORD dwFlags;};
struct _CRYPT_KEY_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;};
struct _D3DNTHAL_D3DDX6EXTENDEDCAPS {DWORD dwSize;DWORD dwMinTextureWidth;DWORD dwMaxTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;};
struct _D3DNTHAL_TEXTUREGETSURFDATA {ULONG_PTR dwhContext;HANDLE hDDS;ULONG_PTR dwHandle;HRESULT ddrval;};
struct _DD_WAITFORVERTICALBLANKDATA {PDD_DIRECTDRAW_GLOBAL lpDD;DWORD dwFlags;DWORD bIsInVB;DWORD hEvent;HRESULT ddRVal;void *WaitForVerticalBlank;};
struct _DOMAIN_PASSWORD_INFORMATION {USHORT MinPasswordLength;USHORT PasswordHistoryLength;ULONG PasswordProperties;LARGE_INTEGER MaxPasswordAge;LARGE_INTEGER MinPasswordAge;};
struct _DRIVE_LAYOUT_INFORMATION_EX {DWORD PartitionStyle;DWORD PartitionCount;_DRIVE_LAYOUT_INFORMATION_EX___E2E3D8483D032B54611BEB6ADCC46344 __anonymous0;PARTITION_INFORMATION_EX PartitionEntry[1];};
struct _KERB_CHANGEPASSWORD_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;UNICODE_STRING DomainName;UNICODE_STRING AccountName;UNICODE_STRING OldPassword;UNICODE_STRING NewPassword;BOOLEAN Impersonating;};
struct _MSV1_0_PASSTHROUGH_RESPONSE {MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;ULONG Pad;ULONG DataLength;PUCHAR ValidationData;};
struct _PRINTER_NOTIFY_OPTIONS_TYPE {WORD Type;WORD Reserved0;DWORD Reserved1;DWORD Reserved2;DWORD Count;PWORD pFields;};
struct _SP_BACKUP_QUEUE_PARAMS_V1_A {DWORD cbSize;CHAR FullInfPath[260];INT FilenameOffset;};
struct _SP_BACKUP_QUEUE_PARAMS_V1_W {DWORD cbSize;WCHAR FullInfPath[260];INT FilenameOffset;};
struct _SP_BACKUP_QUEUE_PARAMS_V2_A {DWORD cbSize;CHAR FullInfPath[260];INT FilenameOffset;CHAR ReinstallInstance[260];};
struct _SP_BACKUP_QUEUE_PARAMS_V2_W {DWORD cbSize;WCHAR FullInfPath[260];INT FilenameOffset;WCHAR ReinstallInstance[260];};
struct tagEMREXTCREATEFONTINDIRECTW {EMR emr;DWORD ihFont;EXTLOGFONTW elfw;};
typedef BOOL ( *PFN_CERT_STORE_PROV_CONTROL)(HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType,  void *pvCtrlPara);
typedef void ( *PWINDBG_EXTENSION_ROUTINE32)(HANDLE hCurrentProcess, HANDLE hCurrentThread, ULONG dwCurrentPc, ULONG dwProcessor, PCSTR lpArgumentString);
struct _ACCESS_DENIED_CALLBACK_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _CERT_AUTHORITY_KEY_ID_INFO {CRYPT_DATA_BLOB KeyId;CERT_NAME_BLOB CertIssuer;CRYPT_INTEGER_BLOB CertSerialNumber;};
struct _CONSOLE_SCREEN_BUFFER_INFO {COORD dwSize;COORD dwCursorPosition;WORD wAttributes;SMALL_RECT srWindow;COORD dwMaximumWindowSize;};
struct _CRYPT_ENCRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD dwFlags;DWORD dwInnerContentType;};
struct _CRYPT_PROVIDER_REGDEFUSAGE {DWORD cbStruct;GUID *pgActionID;WCHAR *pwszDllName;char *pwszLoadCallbackDataFunctionName;char *pwszFreeCallbackDataFunctionName;};
struct _D3DNTHAL_TEXTURECREATEDATA {ULONG_PTR dwhContext;HANDLE hDDS;ULONG_PTR dwHandle;HRESULT ddrval;};
struct _RTL_CRITICAL_SECTION_DEBUG {WORD Type;WORD CreatorBackTraceIndex;struct _RTL_CRITICAL_SECTION *CriticalSection;LIST_ENTRY ProcessLocksList;DWORD EntryCount;DWORD ContentionCount;DWORD Spare[2];};
typedef void ( *CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned int ulNetworkCodeSet, byte *pNetworkData, unsigned int ulNetworkDataLength, unsigned int ulLocalBufferSize, void *pLocalData, unsigned int *pulLocalDataLength, error_status_t *pStatus);
typedef void ( *CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned int ulNetworkCodeSet, unsigned int ulNetworkBufferSize, IDL_CS_CONVERT *conversionType, unsigned int *pulLocalBufferSize, error_status_t *pStatus);
struct IWbemUnboundObjectSinkVtbl {HRESULT ( *QueryInterface)(IWbemUnboundObjectSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemUnboundObjectSink *This);ULONG ( *Release)(IWbemUnboundObjectSink *This);HRESULT ( *IndicateToConsumer)(IWbemUnboundObjectSink *This, IWbemClassObject *pLogicalConsumer, int lNumObjects, IWbemClassObject **apObjects);};
struct NDIS_BPC_CONNECTION_STATUS {BPC_HANDLE nhConnection;BPC_HANDLE nhDevice;ULONG ulConnectPriority;ULONG ulDisconnectPriority;ULONG ulbpsAverage;ULONG ulbpsBurst;ULONG ulState;BOOLEAN fEnabled;};
typedef BOOL ( *PFN_CERT_ENUM_SYSTEM_STORE)( void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
struct _D3DHAL_D3DDX6EXTENDEDCAPS {DWORD dwSize;DWORD dwMinTextureWidth;DWORD dwMaxTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;};
struct _D3DHAL_TEXTUREDESTROYDATA {ULONG_PTR dwhContext;DWORD dwHandle;HRESULT ddrval;};
struct _D3DHAL_TEXTUREGETSURFDATA {ULONG_PTR dwhContext;ULONG_PTR lpDDS;DWORD dwHandle;HRESULT ddrval;};
struct _D3DNTHAL_GLOBALDRIVERDATA {DWORD dwSize;D3DNTHALDEVICEDESC_V1 hwCaps;DWORD dwNumVertices;DWORD dwNumClipVertices;DWORD dwNumTextureFormats;LPDDSURFACEDESC lpTextureFormats;};
struct _D3DNTHAL_SCENECAPTUREDATA {ULONG_PTR dwhContext;DWORD dwFlag;HRESULT ddrval;};
struct _DD_ADDATTACHEDSURFACEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;PDD_SURFACE_LOCAL lpSurfAttached;HRESULT ddRVal;void *AddAttachedSurface;};
struct _DD_GETVPORTFLIPSTATUSDATA {PDD_DIRECTDRAW_LOCAL lpDD;FLATPTR fpSurface;HRESULT ddRVal;void *GetVideoPortFlipStatus;};
struct _HIDP_LINK_COLLECTION_NODE {USAGE LinkUsage;USAGE LinkUsagePage;USHORT Parent;USHORT NumberOfChildren;USHORT NextSibling;USHORT FirstChild;unsigned int CollectionType : 8;unsigned int IsAlias : 1;unsigned int Reserved : 23;PVOID UserContext;};
struct _IMAGE_ROM_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD BaseOfBss;DWORD GprMask;DWORD CprMask[4];DWORD GpValue;};
struct _PARTITION_INFORMATION_GPT {GUID PartitionType;GUID PartitionId;DWORD64 Attributes;WCHAR Name[36];};
struct _PARTITION_INFORMATION_MBR {BYTE PartitionType;BOOLEAN BootIndicator;BOOLEAN RecognizedPartition;DWORD HiddenSectors;};
struct _SPC_INDIRECT_DATA_CONTENT {CRYPT_ATTRIBUTE_TYPE_VALUE Data;CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;CRYPT_HASH_BLOB Digest;};
struct _SYSTEM_ALARM_CALLBACK_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _SYSTEM_AUDIT_CALLBACK_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _TAPE_GET_MEDIA_PARAMETERS {LARGE_INTEGER Capacity;LARGE_INTEGER Remaining;DWORD BlockSize;DWORD PartitionCount;BOOLEAN WriteProtected;};
struct tagEMRMODIFYWORLDTRANSFORM {EMR emr;XFORM xform;DWORD iMode;};
struct IAddrExclusionControlVtbl {HRESULT ( *QueryInterface)(IAddrExclusionControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAddrExclusionControl *This);ULONG ( *Release)(IAddrExclusionControl *This);HRESULT ( *GetCurrentAddrExclusionList)(IAddrExclusionControl *This,  IID * riid, void **ppEnumerator);HRESULT ( *UpdateAddrExclusionList)(IAddrExclusionControl *This, IUnknown *pEnumerator);};
struct IEnumOleDocumentViewsVtbl {HRESULT ( *QueryInterface)(IEnumOleDocumentViews *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOleDocumentViews *This);ULONG ( *Release)(IEnumOleDocumentViews *This);HRESULT ( *Next)(IEnumOleDocumentViews *This, ULONG cViews, IOleDocumentView **rgpView, ULONG *pcFetched);HRESULT ( *Skip)(IEnumOleDocumentViews *This, ULONG cViews);HRESULT ( *Reset)(IEnumOleDocumentViews *This);HRESULT ( *Clone)(IEnumOleDocumentViews *This, IEnumOleDocumentViews **ppEnum);};
struct IInternetThreadSwitchVtbl {HRESULT ( *QueryInterface)(IInternetThreadSwitch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetThreadSwitch *This);ULONG ( *Release)(IInternetThreadSwitch *This);HRESULT ( *Prepare)(IInternetThreadSwitch *This);HRESULT ( *Continue)(IInternetThreadSwitch *This);};
struct IWbemProviderIdentityVtbl {HRESULT ( *QueryInterface)(IWbemProviderIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemProviderIdentity *This);ULONG ( *Release)(IWbemProviderIdentity *This);HRESULT ( *SetRegistrationObject)(IWbemProviderIdentity *This, int lFlags, IWbemClassObject *pProvReg);};
typedef BOOL ( *PFN_CRYPT_ENUM_KEYID_PROP)( CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwFlags, void *pvReserved, void *pvArg, DWORD cProp, DWORD *rgdwPropId, void **rgpvData, DWORD *rgcbData);
typedef void ( *PFN_DrvSynchronizeSurface)(SURFOBJ *, RECTL *, FLONG);
typedef void ( *PWINDBG_EXTENSION_ROUTINE)(HANDLE hCurrentProcess, HANDLE hCurrentThread, ULONG dwCurrentPc, ULONG dwProcessor, PCSTR lpArgumentString);
struct RETRIEVAL_POINTERS_BUFFER {DWORD ExtentCount;LARGE_INTEGER StartingVcn;struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0 Extents[1];};
struct _CERT_KEY_ATTRIBUTES_INFO {CRYPT_DATA_BLOB KeyId;CRYPT_BIT_BLOB IntendedKeyUsage;PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;};
struct _CERT_PHYSICAL_STORE_INFO {DWORD cbSize;LPSTR pszOpenStoreProvider;DWORD dwOpenEncodingType;DWORD dwOpenFlags;CRYPT_DATA_BLOB OpenParameters;DWORD dwFlags;DWORD dwPriority;};
struct _CERT_SIGNED_CONTENT_INFO {CRYPT_DER_BLOB ToBeSigned;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CRYPT_BIT_BLOB Signature;};
struct _COINSTALLER_CONTEXT_DATA {BOOL PostProcessing;DWORD InstallResult;PVOID PrivateData;};
struct _CRYPT_RC2_CBC_PARAMETERS {DWORD dwVersion;BOOL fIV;BYTE rgbIV[8];};
struct _D3DNTHAL_D3DEXTENDEDCAPS {DWORD dwSize;DWORD dwMinTextureWidth;DWORD dwMaxTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;DWORD dwMaxActiveLights;D3DVALUE dvMaxVertexW;WORD wMaxUserClipPlanes;WORD wMaxVertexBlendMatrices;DWORD dwVertexProcessingCaps;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwReserved4;};
struct _DDHAL_DDPALETTECALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHALPALCB_DESTROYPALETTE DestroyPalette;LPDDHALPALCB_SETENTRIES SetEntries;};
struct _DDHAL_DESTROYDDLOCALDATA {DWORD dwFlags;LPDDRAWI_DIRECTDRAW_LCL pDDLcl;HRESULT ddRVal;};
struct _HIDP_EXTENDED_ATTRIBUTES {UCHAR NumGlobalUnknowns;UCHAR Reserved[3];PHIDP_UNKNOWN_TOKEN GlobalUnknowns;ULONG Data[1];};
struct _MEMORY_BASIC_INFORMATION {PVOID BaseAddress;PVOID AllocationBase;DWORD AllocationProtect;SIZE_T RegionSize;DWORD State;DWORD Protect;DWORD Type;};
struct _MIB_IPMCAST_MFE_STATS_EX {DWORD dwGroup;DWORD dwSource;DWORD dwSrcMask;DWORD dwUpStrmNgbr;DWORD dwInIfIndex;DWORD dwInIfProtocol;DWORD dwRouteProtocol;DWORD dwRouteNetwork;DWORD dwRouteMask;ULONG ulUpTime;ULONG ulExpiryTime;ULONG ulNumOutIf;ULONG ulInPkts;ULONG ulInOctets;ULONG ulPktsDifferentIf;ULONG ulQueueOverflow;ULONG ulUninitMfe;ULONG ulNegativeMfe;ULONG ulInDiscards;ULONG ulInHdrErrors;ULONG ulTotalOutPackets;MIB_IPMCAST_OIF_STATS rgmiosOutStats[1];};
struct _NEGOTIATE_PACKAGE_PREFIX {ULONG_PTR PackageId;PVOID PackageDataA;PVOID PackageDataW;ULONG_PTR PrefixLen;UCHAR Prefix[32];};
struct _POLICY_AUDIT_EVENTS_INFO {BOOLEAN AuditingMode;PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;ULONG MaximumAuditEventCount;};
struct _PRINTER_NOTIFY_INFO_DATA {WORD Type;WORD Field;DWORD Reserved;DWORD Id;union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1 NotifyData;};
struct _SERVICE_FAILURE_ACTIONSA {DWORD dwResetPeriod;LPSTR lpRebootMsg;LPSTR lpCommand;DWORD cActions;SC_ACTION *lpsaActions;};
struct _SP_DEVICE_INTERFACE_DATA {DWORD cbSize;GUID InterfaceClassGuid;DWORD Flags;ULONG_PTR Reserved;};
struct _SP_PROPSHEETPAGE_REQUEST {DWORD cbSize;DWORD PageRequested;HDEVINFO DeviceInfoSet;PSP_DEVINFO_DATA DeviceInfoData;};
struct _SP_SELECTDEVICE_PARAMS_A {SP_CLASSINSTALL_HEADER ClassInstallHeader;CHAR Title[60];CHAR Instructions[256];CHAR ListLabel[30];CHAR SubTitle[256];BYTE Reserved[2];};
struct _TC_SUPPORTED_INFO_BUFFER {USHORT InstanceIDLength;WCHAR InstanceID[256];ADDRESS_LIST_DESCRIPTOR AddrListDesc;};
struct tagEMRCREATEBRUSHINDIRECT {EMR emr;DWORD ihBrush;LOGBRUSH32 lb;};
struct tagNMDATETIMEFORMATQUERYA {NMHDR nmhdr;LPCSTR pszFormat;SIZE szMax;};
typedef void ( *CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned int ulNetworkCodeSet, unsigned int ulLocalBufferSize, IDL_CS_CONVERT *conversionType, unsigned int *pulNetworkBufferSize, error_status_t *pStatus);
typedef void ( *CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned int ulNetworkCodeSet, void *pLocalData, unsigned int ulLocalDataLength, byte *pNetworkData, unsigned int *pulNetworkDataLength, error_status_t *pStatus);
struct IAddrTrackingControlVtbl {HRESULT ( *QueryInterface)(IAddrTrackingControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAddrTrackingControl *This);ULONG ( *Release)(IAddrTrackingControl *This);HRESULT ( *EnableCOMDynamicAddrTracking)(IAddrTrackingControl *This);HRESULT ( *DisableCOMDynamicAddrTracking)(IAddrTrackingControl *This);};
struct IEnumWbemClassObjectVtbl {HRESULT ( *QueryInterface)(IEnumWbemClassObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumWbemClassObject *This);ULONG ( *Release)(IEnumWbemClassObject *This);HRESULT ( *Reset)(IEnumWbemClassObject *This);HRESULT ( *Next)(IEnumWbemClassObject *This, int lTimeout, ULONG uCount, IWbemClassObject **apObjects, ULONG *puReturned);HRESULT ( *NextAsync)(IEnumWbemClassObject *This, ULONG uCount, IWbemObjectSink *pSink);HRESULT ( *Clone)(IEnumWbemClassObject *This, IEnumWbemClassObject **ppEnum);HRESULT ( *Skip)(IEnumWbemClassObject *This, int lTimeout, ULONG nCount);};
typedef INT ( *LPNSPINSTALLSERVICECLASS)(LPGUID lpProviderId, LPWSASERVICECLASSINFOW lpServiceClassInfo);
struct NDIS_BPC_DEVICE_SETTINGS {BPC_HANDLE nhDevice;ULONG ulBPCCaps;ULONG ulcConnections;BOOLEAN fEnabled;ULONG ulStreamType;ULONG ulcbAddressConnection;ULONG rgulAddressConnection[1];};
struct _CMSG_HASHED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CRYPT_HASH_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CRYPT_PROVIDER_DEFUSAGE {DWORD cbStruct;GUID gActionID;LPVOID pDefPolicyCallbackData;LPVOID pDefSIPClientData;};
struct _CTL_VERIFY_USAGE_STATUS {DWORD cbSize;DWORD dwError;DWORD dwFlags;PCCTL_CONTEXT *ppCtl;DWORD dwCtlEntryIndex;PCCERT_CONTEXT *ppSigner;DWORD dwSignerIndex;};
struct _D3DHAL_GLOBALDRIVERDATA {DWORD dwSize;D3DDEVICEDESC_V1 hwCaps;DWORD dwNumVertices;DWORD dwNumClipVertices;DWORD dwNumTextureFormats;LPDDSURFACEDESC lpTextureFormats;};
struct _D3DHAL_SCENECAPTUREDATA {ULONG_PTR dwhContext;DWORD dwFlag;HRESULT ddrval;};
struct _DDHAL_DDKERNELCALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHALKERNELCB_SYNCSURFACE SyncSurfaceData;LPDDHALKERNELCB_SYNCVIDEOPORT SyncVideoPortData;};
struct _DDHAL_DESTROYDRIVERDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;HRESULT ddRVal;LPDDHAL_DESTROYDRIVER DestroyDriver;};
struct _DD_FLIPTOGDISURFACEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;DWORD dwToGDI;DWORD dwReserved;HRESULT ddRVal;void *FlipToGDISurface;};
struct _DD_FREEDRIVERMEMORYDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;HRESULT ddRVal;void *FreeDriverMemory;};
struct _DD_SETEXCLUSIVEMODEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;DWORD dwEnterExcl;DWORD dwReserved;HRESULT ddRVal;void *SetExclusiveMode;};
struct _HTTPSPolicyCallbackData {_HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 __anonymous0;DWORD dwAuthType;DWORD fdwChecks;WCHAR *pwszServerName;};
struct _KERB_SMART_CARD_PROFILE {KERB_INTERACTIVE_PROFILE Profile;ULONG CertificateSize;PUCHAR CertificateData;};
struct _MSV1_0_SUBAUTH_RESPONSE {MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;ULONG SubAuthInfoLength;PUCHAR SubAuthReturnBuffer;};
struct _POINTER_SEARCH_PHYSICAL {ULONG64 Offset;ULONG64 Length;ULONG64 PointerMin;ULONG64 PointerMax;ULONG Flags;PULONG64 MatchOffsets;ULONG MatchOffsetsSize;ULONG MatchOffsetsCount;};
struct _SERVICE_TYPE_VALUE_ABSA {DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPSTR lpValueName;PVOID lpValue;};
struct mpeglayer3waveformat_tag {WAVEFORMATEX wfx;WORD wID;DWORD fdwFlags;WORD nBlockSize;WORD nFramesPerBlock;WORD nCodecDelay;};
struct tagMCI_ANIM_UPDATE_PARMS {DWORD_PTR dwCallback;RECT rc;HDC hDC;};
struct tagPIXELFORMATDESCRIPTOR {WORD nSize;WORD nVersion;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cAccumBits;BYTE cAccumRedBits;BYTE cAccumGreenBits;BYTE cAccumBlueBits;BYTE cAccumAlphaBits;BYTE cDepthBits;BYTE cStencilBits;BYTE cAuxBuffers;BYTE iLayerType;BYTE bReserved;DWORD dwLayerMask;DWORD dwVisibleMask;DWORD dwDamageMask;};
struct truespeechwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;WORD nSamplesPerBlock;BYTE abReserved[28];};
struct IForegroundTransferVtbl {HRESULT ( *QueryInterface)(IForegroundTransfer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IForegroundTransfer *This);ULONG ( *Release)(IForegroundTransfer *This);HRESULT ( *AllowForegroundTransfer)(IForegroundTransfer *This, void *lpvReserved);};
struct IUnsecuredApartmentVtbl {HRESULT ( *QueryInterface)(IUnsecuredApartment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUnsecuredApartment *This);ULONG ( *Release)(IUnsecuredApartment *This);HRESULT ( *CreateObjectStub)(IUnsecuredApartment *This, IUnknown *pObject, IUnknown **ppStub);};
typedef HRESULT ( *LPDDGAMMACALIBRATORPROC)(LPDDGAMMARAMP, LPBYTE);
typedef int ( *LPWSCINSTALLQOSTEMPLATE)( LPGUID Guid, LPWSABUF QosName, LPQOS Qos);
typedef BOOL ( *MCDRVGETENTRYPOINTSFUNC)(MCDSURFACE *pMCDSurface, MCDDRIVER *pMCDDriver);
typedef BOOL ( *PDETECT_PROGRESS_NOTIFY)(PVOID ProgressNotifyParam, DWORD DetectComplete);
typedef BOOL ( *PFN_DrvQueryPerBandInfo)(SURFOBJ *, PERBANDINFO *);
struct _CONSOLE_SELECTION_INFO {DWORD dwFlags;COORD dwSelectionAnchor;SMALL_RECT srSelection;};
struct _CRL_ISSUING_DIST_POINT {CRL_DIST_POINT_NAME DistPointName;BOOL fOnlyContainsUserCerts;BOOL fOnlyContainsCACerts;CRYPT_BIT_BLOB OnlySomeReasonFlags;BOOL fIndirectCRL;};
struct _D3DADAPTER_IDENTIFIER8 {char Driver[512];char Description[512];LARGE_INTEGER DriverVersion;DWORD VendorId;DWORD DeviceId;DWORD SubSysId;DWORD Revision;GUID DeviceIdentifier;DWORD WHQLLevel;};
struct _D3DHAL_D3DEXTENDEDCAPS {DWORD dwSize;DWORD dwMinTextureWidth;DWORD dwMaxTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;DWORD dwMaxActiveLights;D3DVALUE dvMaxVertexW;WORD wMaxUserClipPlanes;WORD wMaxVertexBlendMatrices;DWORD dwVertexProcessingCaps;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwReserved4;};
struct _D3DHAL_TEXTURESWAPDATA {ULONG_PTR dwhContext;DWORD dwHandle1;DWORD dwHandle2;HRESULT ddrval;};
struct _ENCRYPTION_CERTIFICATE {DWORD cbTotalLength;SID *pUserSid;PEFS_CERTIFICATE_BLOB pCertBlob;};
struct _FILEPATHS_SIGNERINFO_A {PCSTR Target;PCSTR Source;UINT Win32Error;DWORD Flags;PCSTR DigitalSigner;PCSTR Version;PCSTR CatalogFile;};
struct _GET_CHANGER_PARAMETERS {DWORD Size;WORD NumberTransportElements;WORD NumberStorageElements;WORD NumberCleanerSlots;WORD NumberIEElements;WORD NumberDataTransferElements;WORD NumberOfDoors;WORD FirstSlotNumber;WORD FirstDriveNumber;WORD FirstTransportNumber;WORD FirstIEPortNumber;WORD FirstCleanerSlotAddress;WORD MagazineSize;DWORD DriveCleanTimeout;DWORD Features0;DWORD Features1;BYTE MoveFromTransport;BYTE MoveFromSlot;BYTE MoveFromIePort;BYTE MoveFromDrive;BYTE ExchangeFromTransport;BYTE ExchangeFromSlot;BYTE ExchangeFromIePort;BYTE ExchangeFromDrive;BYTE LockUnlockCapabilities;BYTE PositionCapabilities;BYTE Reserved1[2];DWORD Reserved2[2];};
struct _MSV1_0_SUBAUTH_REQUEST {MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;ULONG SubAuthPackageId;ULONG SubAuthInfoLength;PUCHAR SubAuthSubmitBuffer;};
struct _POLICY_DNS_DOMAIN_INFO {LSA_UNICODE_STRING Name;LSA_UNICODE_STRING DnsDomainName;LSA_UNICODE_STRING DnsForestName;GUID DomainGuid;PSID Sid;};
struct _PROCESSOR_POWER_POLICY {DWORD Revision;BYTE DynamicThrottle;BYTE Spare[3];unsigned int DisableCStates : 1;unsigned int Reserved : 31;DWORD PolicyCount;PROCESSOR_POWER_POLICY_INFO Policy[3];};
struct _SERVICE_TYPE_INFO_ABSA {LPSTR lpTypeName;DWORD dwValueCount;SERVICE_TYPE_VALUE_ABSA Values[1];};
struct _SE_IMPERSONATION_STATE {PACCESS_TOKEN Token;BOOLEAN CopyOnOpen;BOOLEAN EffectiveOnly;SECURITY_IMPERSONATION_LEVEL Level;};
struct _SP_ALTPLATFORM_INFO_V2 {DWORD cbSize;DWORD Platform;DWORD MajorVersion;DWORD MinorVersion;WORD ProcessorArchitecture;_SP_ALTPLATFORM_INFO_V2___93AF3E658AF10EA933E0A7726F592163 __anonymous0;DWORD FirstValidatedMajorVersion;DWORD FirstValidatedMinorVersion;};
struct _SP_CLASSIMAGELIST_DATA {DWORD cbSize;HIMAGELIST ImageList;ULONG_PTR Reserved;};
struct _SP_DETECTDEVICE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;PDETECT_PROGRESS_NOTIFY DetectProgressNotify;PVOID ProgressNotifyParam;};
struct tagCInterfaceStubHeader { IID *piid; MIDL_SERVER_INFO *pServerInfo;unsigned int DispatchTableCount; PRPC_STUB_FUNCTION *pDispatchTable;};
struct tagEMRSETPALETTEENTRIES {EMR emr;DWORD ihPal;DWORD iStart;DWORD cEntries;PALETTEENTRY aPalEntries[1];};
struct tagMCI_OVLY_LOAD_PARMSA {DWORD_PTR dwCallback;LPCSTR lpfilename;RECT rc;};
struct tagMCI_OVLY_SAVE_PARMSA {DWORD_PTR dwCallback;LPCSTR lpfilename;RECT rc;};
struct tagNMDATETIMEWMKEYDOWNA {NMHDR nmhdr;int nVirtKey;LPCSTR pszFormat;SYSTEMTIME st;};
struct ICancelMethodCallsVtbl {HRESULT ( *QueryInterface)(ICancelMethodCalls *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICancelMethodCalls *This);ULONG ( *Release)(ICancelMethodCalls *This);HRESULT ( *Cancel)(ICancelMethodCalls *This, ULONG ulSeconds);HRESULT ( *TestCancel)(ICancelMethodCalls *This);};
struct IWbemEventProviderVtbl {HRESULT ( *QueryInterface)(IWbemEventProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemEventProvider *This);ULONG ( *Release)(IWbemEventProvider *This);HRESULT ( *ProvideEvents)(IWbemEventProvider *This, IWbemObjectSink *pSink, int lFlags);};
typedef HRESULT ( *LPDDENUMMODESCALLBACK2)(LPDDSURFACEDESC2, LPVOID);
typedef HRESULT ( *LPFNACCESSIBLECHILDREN)(IAccessible *paccContainer, LONG iChildStart, LONG cChildren, VARIANT *rgvarChildren, LONG *pcObtained);
typedef BOOL ( *MCDENGSETMEMSTATUSFUNC)(MCDMEM *pMCDMem, ULONG status);
typedef ULONG ( *MCDRVDELETECONTEXTFUNC)(MCDRC *pRc, DHPDEV dhpdev);
typedef ULONG ( *MCDRVDELETETEXTUREFUNC)(MCDTEXTURE *pTex, DHPDEV dhpdev);
typedef BOOL ( *PFN_CMSG_STREAM_OUTPUT)( void *pvArg, BYTE *pbData, DWORD cbData, BOOL fFinal);
typedef PVOID ( *PFN_DrvGetTrueTypeFile)(ULONG_PTR, ULONG *);
typedef PFD_GLYPHATTR ( *PFN_DrvQueryGlyphAttrs)(FONTOBJ *, ULONG);
typedef BOOL ( *PFN_DrvUpdateUISetting)(PVOID pdriverobj, PVOID pOptItem, DWORD dwPreviousSelection, DWORD dwMode);
struct _CREDENTIAL_ATTRIBUTEA {LPSTR Keyword;DWORD Flags;DWORD ValueSize;LPBYTE Value;};
struct _CRYPT_X942_OTHER_INFO {LPSTR pszContentEncryptionObjId;BYTE rgbCounter[4];BYTE rgbKeyLength[4];CRYPT_DATA_BLOB PubInfo;};
struct _CTL_VERIFY_USAGE_PARA {DWORD cbSize;CRYPT_DATA_BLOB ListIdentifier;DWORD cCtlStore;HCERTSTORE *rghCtlStore;DWORD cSignerStore;HCERTSTORE *rghSignerStore;};
struct _DD_CANCREATEVPORTDATA {PDD_DIRECTDRAW_LOCAL lpDD;LPDDVIDEOPORTDESC lpDDVideoPortDesc;HRESULT ddRVal;void *CanCreateVideoPort;};
struct _DD_DESTROYDDLOCALDATA {DWORD dwFlags;PDD_DIRECTDRAW_LOCAL pDDLcl;HRESULT ddRVal;};
struct _DD_DESTROYPALETTEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_PALETTE_GLOBAL lpDDPalette;HRESULT ddRVal;void *DestroyPalette;};
struct _DD_DESTROYSURFACEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;HRESULT ddRVal;void *DestroySurface;};
struct _MIB_IPMCAST_MFE_STATS {DWORD dwGroup;DWORD dwSource;DWORD dwSrcMask;DWORD dwUpStrmNgbr;DWORD dwInIfIndex;DWORD dwInIfProtocol;DWORD dwRouteProtocol;DWORD dwRouteNetwork;DWORD dwRouteMask;ULONG ulUpTime;ULONG ulExpiryTime;ULONG ulNumOutIf;ULONG ulInPkts;ULONG ulInOctets;ULONG ulPktsDifferentIf;ULONG ulQueueOverflow;MIB_IPMCAST_OIF_STATS rgmiosOutStats[1];};
struct _NDIS_STATISTICS_VALUE {NDIS_OID Oid;ULONG DataLength;UCHAR Data[1];};
struct _POLICY_AUDIT_LOG_INFO {ULONG AuditLogPercentFull;ULONG MaximumLogSize;LARGE_INTEGER AuditRetentionPeriod;BOOLEAN AuditLogFullShutdownInProgress;LARGE_INTEGER TimeToShutdown;ULONG NextAuditRecordId;};
struct _SP_ENABLECLASS_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;GUID ClassGuid;DWORD EnableMessage;};
struct _TIME_ZONE_INFORMATION {LONG Bias;WCHAR StandardName[32];SYSTEMTIME StandardDate;LONG StandardBias;WCHAR DaylightName[32];SYSTEMTIME DaylightDate;LONG DaylightBias;};
struct _TRACE_GUID_PROPERTIES {GUID Guid;ULONG GuidType;ULONG LoggerId;ULONG EnableLevel;ULONG EnableFlags;BOOLEAN IsEnable;};
struct ip_interface_name_info {ULONG Index;ULONG MediaType;UCHAR ConnectionType;UCHAR AccessType;GUID DeviceGuid;GUID InterfaceGuid;};
struct tagDDDEVICEIDENTIFIER2 {char szDriver[512];char szDescription[512];LARGE_INTEGER liDriverVersion;DWORD dwVendorId;DWORD dwDeviceId;DWORD dwSubSysId;DWORD dwRevision;GUID guidDeviceIdentifier;DWORD dwWHQLLevel;};
struct tagEMRCREATECOLORSPACE {EMR emr;DWORD ihCS;LOGCOLORSPACEA lcs;};
struct tagEMREXTSELECTCLIPRGN {EMR emr;DWORD cbRgnData;DWORD iMode;BYTE RgnData[1];};
struct tagKS_BITMAPINFOHEADER {DWORD biSize;LONG biWidth;LONG biHeight;WORD biPlanes;WORD biBitCount;DWORD biCompression;DWORD biSizeImage;LONG biXPelsPerMeter;LONG biYPelsPerMeter;DWORD biClrUsed;DWORD biClrImportant;};
struct tagRASEAPUSERIDENTITYA {CHAR szUserName[257];DWORD dwSizeofEapInfo;BYTE pbEapInfo[1];};
struct tagRASEAPUSERIDENTITYW {WCHAR szUserName[257];DWORD dwSizeofEapInfo;BYTE pbEapInfo[1];};
struct IEnumOleUndoUnitsVtbl {HRESULT ( *QueryInterface)(IEnumOleUndoUnits *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOleUndoUnits *This);ULONG ( *Release)(IEnumOleUndoUnits *This);HRESULT ( *Next)(IEnumOleUndoUnits *This, ULONG cElt, IOleUndoUnit **rgElt, ULONG *pcEltFetched);HRESULT ( *Skip)(IEnumOleUndoUnits *This, ULONG cElt);HRESULT ( *Reset)(IEnumOleUndoUnits *This);HRESULT ( *Clone)(IEnumOleUndoUnits *This, IEnumOleUndoUnits **ppEnum);};
struct IFolderFilterSiteVtbl {HRESULT ( *QueryInterface)(IFolderFilterSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderFilterSite *This);ULONG ( *Release)(IFolderFilterSite *This);HRESULT ( *SetFilter)(IFolderFilterSite *This, IUnknown *punk);};
struct IInitializeObjectVtbl {HRESULT ( *QueryInterface)(IInitializeObject *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IInitializeObject *This);ULONG ( *Release)(IInitializeObject *This);HRESULT ( *Initialize)(IInitializeObject *This);};
struct IProvideClassInfoVtbl {HRESULT ( *QueryInterface)(IProvideClassInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideClassInfo *This);ULONG ( *Release)(IProvideClassInfo *This);HRESULT ( *GetClassInfoA)(IProvideClassInfo *This, ITypeInfo **ppTI);};
struct ISequentialStreamVtbl {HRESULT ( *QueryInterface)(ISequentialStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISequentialStream *This);ULONG ( *Release)(ISequentialStream *This);HRESULT ( *Read)(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Write)(ISequentialStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);};
struct ISupportErrorInfoVtbl {HRESULT ( *QueryInterface)(ISupportErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISupportErrorInfo *This);ULONG ( *Release)(ISupportErrorInfo *This);HRESULT ( *InterfaceSupportsErrorInfo)(ISupportErrorInfo *This,  IID * riid);};
struct IThumbnailCaptureVtbl {HRESULT ( *CaptureThumbnail)(IThumbnailCapture *This,  SIZE *pMaxSize, IUnknown *pHTMLDoc2, HBITMAP *phbmThumbnail);};
typedef HRESULT ( *LPD3DVALIDATECALLBACK)(LPVOID lpUserArg, DWORD dwOffset);
typedef HRESULT ( *LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);
typedef HRESULT ( *LPDDENUMVIDEOCALLBACK)(LPDDVIDEOPORTCAPS, LPVOID);
typedef INT ( *LPWSCENABLENSPROVIDER)(LPGUID lpProviderId, BOOL fEnable);
typedef ULONG ( *MCDRVALLOCBUFFERSFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc);
typedef DWORD ( *PDX_GETTRANSFERSTATUS)(PVOID, PVOID, PDDGETTRANSFEROUTINFO);
typedef DWORD ( *PFNRASSETCOMMSETTINGS)(HANDLE hPort, struct tagRASCOMMSETTINGS *pRasCommSettings, PVOID pvReserved);
typedef ULONG ( *PWINDBG_IOCTL_ROUTINE)(USHORT IoctlType, PVOID lpvData, ULONG cbSize);
typedef int ( *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
struct _CERT_GENERAL_SUBTREE {CERT_ALT_NAME_ENTRY Base;DWORD dwMinimum;BOOL fMaximum;DWORD dwMaximum;};
struct _CERT_STORE_PROV_INFO {DWORD cbSize;DWORD cStoreProvFunc;void **rgpvStoreProvFunc;HCERTSTOREPROV hStoreProv;DWORD dwStoreProvFlags;HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;};
struct _CERT_TRUST_LIST_INFO {DWORD cbSize;PCTL_ENTRY pCtlEntry;PCCTL_CONTEXT pCtlContext;};
struct _CMC_TAGGED_OTHER_MSG {DWORD dwBodyPartID;LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _DD_DESTROYMOCOMPDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_MOTIONCOMP_LOCAL lpMoComp;HRESULT ddRVal;};
struct _FORMAT_EX_PARAMETERS {MEDIA_TYPE MediaType;DWORD StartCylinderNumber;DWORD EndCylinderNumber;DWORD StartHeadNumber;DWORD EndHeadNumber;WORD FormatGapLength;WORD SectorsPerTrack;WORD SectorNumber[1];};
struct _FULL_PTR_XLAT_TABLES {struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 RefIdToPointer;struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D PointerToRefId;unsigned int NextRefId;XLAT_SIDE XlatSide;};
struct _LSA_AUTH_INFORMATION {LARGE_INTEGER LastUpdateTime;ULONG AuthType;ULONG AuthInfoLength;PUCHAR AuthInfo;};
struct _NETWORK_ADDRESS_LIST {LONG AddressCount;USHORT AddressType;NETWORK_ADDRESS Address[1];};
struct _NON_PAGED_DEBUG_INFO {WORD Signature;WORD Flags;DWORD Size;WORD Machine;WORD Characteristics;DWORD TimeDateStamp;DWORD CheckSum;DWORD SizeOfImage;ULONGLONG ImageBase;};
struct _PRINTER_ENUM_VALUESA {LPSTR pValueName;DWORD cbValueName;DWORD dwType;LPBYTE pData;DWORD cbData;};
struct _RPC_SERVER_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;void *DefaultManagerEpv; void *InterpreterInfo;unsigned int Flags;};
struct _SP_DRVINFO_DATA_V1_A {DWORD cbSize;DWORD DriverType;ULONG_PTR Reserved;CHAR Description[256];CHAR MfgName[256];CHAR ProviderName[256];};
struct _SP_DRVINFO_DATA_V1_W {DWORD cbSize;DWORD DriverType;ULONG_PTR Reserved;WCHAR Description[256];WCHAR MfgName[256];WCHAR ProviderName[256];};
struct tagCOLORMATCHTOTARGET {EMR emr;DWORD dwAction;DWORD dwFlags;DWORD cbName;DWORD cbData;BYTE Data[1];};
struct tagDDDEVICEIDENTIFIER {char szDriver[512];char szDescription[512];LARGE_INTEGER liDriverVersion;DWORD dwVendorId;DWORD dwDeviceId;DWORD dwSubSysId;DWORD dwRevision;GUID guidDeviceIdentifier;};
struct tagKS_AnalogVideoInfo {RECT rcSource;RECT rcTarget;DWORD dwActiveWidth;DWORD dwActiveHeight;REFERENCE_TIME AvgTimePerFrame;};
struct tagMIXERLINECONTROLSA {DWORD cbStruct;DWORD dwLineID;tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROLA pamxctrl;};
struct tagMIXERLINECONTROLSW {DWORD cbStruct;DWORD dwLineID;tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROLW pamxctrl;};
struct tagNMHDFILTERBTNCLICK {NMHDR hdr;INT iItem;RECT rc;};
struct IImageRecompressVtbl {HRESULT ( *QueryInterface)(IImageRecompress *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImageRecompress *This);ULONG ( *Release)(IImageRecompress *This);HRESULT ( *RecompressImage)(IImageRecompress *This, IShellItem *psi, int cx, int cy, int iQuality, IStorage *pstg, IStream **ppstrmOut);};
struct IInternalUnknownVtbl {HRESULT ( *QueryInterface)(IInternalUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternalUnknown *This);ULONG ( *Release)(IInternalUnknown *This);HRESULT ( *QueryInternalInterface)(IInternalUnknown *This,  IID * riid, void **ppv);};
struct IMPORT_OBJECT_HEADER {WORD Sig1;WORD Sig2;WORD Version;WORD Machine;DWORD TimeDateStamp;DWORD SizeOfData;IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 __anonymous0;unsigned short Type : 2;unsigned short NameType : 3;unsigned short Reserved : 11;};
struct IOleDocumentSiteVtbl {HRESULT ( *QueryInterface)(IOleDocumentSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocumentSite *This);ULONG ( *Release)(IOleDocumentSite *This);HRESULT ( *ActivateMe)(IOleDocumentSite *This, IOleDocumentView *pViewToActivate);};
struct IPSFactoryBufferVtbl {HRESULT ( *QueryInterface)(IPSFactoryBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPSFactoryBuffer *This);ULONG ( *Release)(IPSFactoryBuffer *This);HRESULT ( *CreateProxy)(IPSFactoryBuffer *This, IUnknown *pUnkOuter,  IID * riid, IRpcProxyBuffer **ppProxy, void **ppv);HRESULT ( *CreateStub)(IPSFactoryBuffer *This,  IID * riid, IUnknown *pUnkServer, IRpcStubBuffer **ppStub);};
typedef BOOL ( *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef int ( *LPWPUGETPROVIDERPATH)(LPGUID lpProviderId, WCHAR *lpszProviderDllPath, LPINT lpProviderDllPathLen, LPINT lpErrno);
typedef SOCKET ( *LPWPUMODIFYIFSHANDLE)(DWORD dwCatalogEntryId, SOCKET ProposedHandle, LPINT lpErrno);
typedef int ( *LPWSCGETPROVIDERPATH)(LPGUID lpProviderId, WCHAR *lpszProviderDllPath, LPINT lpProviderDllPathLen, LPINT lpErrno);
typedef ULONG ( *MCDRVBINDCONTEXTFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc);
typedef void ( *MCDRVTRACKWINDOWFUNC)(WNDOBJ *pWndObj, MCDWINDOW *pMCDWnd, ULONG flags);
typedef int ( *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
typedef UINT ( *PFNRECONCILEPROFILEA)(LPCSTR pszCentralFile, LPCSTR pszLocalFile, DWORD dwFlags);
typedef HBITMAP ( *PFN_DrvDeriveSurface)(DD_DIRECTDRAW_GLOBAL *, DD_SURFACE_LOCAL *);
typedef LONG ( *PFN_DrvQueryFontFile)(ULONG_PTR, ULONG, ULONG, ULONG *);
typedef void ( *PWINDBG_GET_SYMBOL32)(ULONG offset, PCHAR pchBuffer, PULONG pDisplacement);
typedef void ( *PWINDBG_GET_SYMBOL64)(ULONG64 offset, PCHAR pchBuffer, PULONG64 pDisplacement);
typedef RPC_STATUS  RPC_FORWARD_FUNCTION(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, unsigned char *Rpcpro, void **ppDestEndpoint);
struct SChannelHookCallInfo {IID iid;DWORD cbSize;GUID uCausality;DWORD dwServerPid;DWORD iMethod;void *pObject;};
typedef BOOL ( *UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
struct _CRL_REVOCATION_INFO {PCRL_ENTRY pCrlEntry;PCCRL_CONTEXT pCrlContext;PCCERT_CHAIN_CONTEXT pCrlIssuerChain;};
struct _D3DFINDDEVICERESULT {DWORD dwSize;GUID guid;D3DDEVICEDESC ddHwDesc;D3DDEVICEDESC ddSwDesc;};
struct _D3DNTHAL_CALLBACKS2 {DWORD dwSize;DWORD dwFlags;LPD3DNTHAL_SETRENDERTARGETCB SetRenderTarget;LPVOID dwReserved1;LPVOID dwReserved2;LPVOID dwReserved3;LPVOID dwReserved4;};
struct _DBGKD_GET_VERSION64 {USHORT MajorVersion;USHORT MinorVersion;USHORT ProtocolVersion;USHORT Flags;USHORT MachineType;UCHAR MaxPacketType;UCHAR MaxStateChange;UCHAR MaxManipulate;UCHAR Simulation;USHORT Unused[1];ULONG64 KernBase;ULONG64 PsLoadedModuleList;ULONG64 DebuggerDataList;};
struct _DDFLIPVIDEOPORTINFO {LPDDVIDEOPORTDATA lpVideoPortData;LPDDSURFACEDATA lpCurrentSurface;LPDDSURFACEDATA lpTargetSurface;DWORD dwFlipVPFlags;};
struct _DD_DESTROYVPORTDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;HRESULT ddRVal;void *DestroyVideoPort;};
struct _DISK_PARTITION_INFO {DWORD SizeOfPartitionInfo;PARTITION_STYLE PartitionStyle;_DISK_PARTITION_INFO___4D5487B926B42C4591BD0B1336C3D1C6 __anonymous0;};
struct _DMUS_EXTENSIONCHUNK {ULONG cbSize;ULONG ulNextExtCkIdx;FOURCC ExtCkID;BYTE byExtCk[4];};
struct _INSERTPSUIPAGE_INFO {WORD cbSize;BYTE Type;BYTE Mode;ULONG_PTR dwData1;ULONG_PTR dwData2;ULONG_PTR dwData3;};
struct _IP_PER_ADAPTER_INFO {UINT AutoconfigEnabled;UINT AutoconfigActive;PIP_ADDR_STRING CurrentDnsServer;IP_ADDR_STRING DnsServerList;};
struct _LSA_TRANSLATED_NAME {SID_NAME_USE Use;LSA_UNICODE_STRING Name;LONG DomainIndex;};
struct _MCDSTENCILTESTSTATE {BOOL stencilTestFunc;USHORT stencilMask;USHORT stencilRef;ULONG stencilFail;ULONG stencilDepthFail;ULONG stencilDepthPass;};
struct _NETWORK_ADDRESS_IPX {ULONG NetworkAddress;UCHAR NodeAddress[6];USHORT Socket;};
struct _PHYSICAL_WITH_FLAGS {ULONGLONG Address;ULONG BufLen;ULONG Flags;UCHAR Buf[1];};
struct _SECURITY_ATTRIBUTES {DWORD nLength;LPVOID lpSecurityDescriptor;BOOL bInheritHandle;};
struct _tagHIT_LOGGING_INFO {DWORD dwStructSize;LPSTR lpszLoggedUrlName;SYSTEMTIME StartTime;SYSTEMTIME EndTime;LPSTR lpszExtendedInfo;};
struct tMIXERCONTROLDETAILS {DWORD cbStruct;DWORD dwControlID;DWORD cChannels;tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F __anonymous0;DWORD cbDetails;LPVOID paDetails;};
struct tagKS_MPEG1VIDEOINFO {KS_VIDEOINFOHEADER hdr;DWORD dwStartTimeCode;DWORD cbSequenceHeader;BYTE bSequenceHeader[1];};
typedef BOOL ( *CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL ( *DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
struct DD_PALETTECALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_PALCB_DESTROYPALETTE DestroyPalette;PDD_PALCB_SETENTRIES SetEntries;};
struct IDelegateFolderVtbl {HRESULT ( *QueryInterface)(IDelegateFolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDelegateFolder *This);ULONG ( *Release)(IDelegateFolder *This);HRESULT ( *SetItemAlloc)(IDelegateFolder *This, IMalloc *pmalloc);};
struct IObjectIdentityVtbl {HRESULT ( *QueryInterface)(IObjectIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectIdentity *This);ULONG ( *Release)(IObjectIdentity *This);HRESULT ( *IsEqualObject)(IObjectIdentity *This, IUnknown *punk);};
struct IObjectWithSiteVtbl {HRESULT ( *QueryInterface)(IObjectWithSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectWithSite *This);ULONG ( *Release)(IObjectWithSite *This);HRESULT ( *SetSite)(IObjectWithSite *This, IUnknown *pUnkSite);HRESULT ( *GetSite)(IObjectWithSite *This,  IID * riid, void **ppvSite);};
struct IRpcProxyBufferVtbl {HRESULT ( *QueryInterface)(IRpcProxyBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcProxyBuffer *This);ULONG ( *Release)(IRpcProxyBuffer *This);HRESULT ( *Connect)(IRpcProxyBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer);void ( *Disconnect)(IRpcProxyBuffer *This);};
struct IWbemHiPerfEnumVtbl {HRESULT ( *QueryInterface)(IWbemHiPerfEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemHiPerfEnum *This);ULONG ( *Release)(IWbemHiPerfEnum *This);HRESULT ( *AddObjects)(IWbemHiPerfEnum *This, int lFlags, ULONG uNumObjects, int *apIds, IWbemObjectAccess **apObj);HRESULT ( *RemoveObjects)(IWbemHiPerfEnum *This, int lFlags, ULONG uNumObjects, int *apIds);HRESULT ( *GetObjects)(IWbemHiPerfEnum *This, int lFlags, ULONG uNumObjects, IWbemObjectAccess **apObj, ULONG *puReturned);HRESULT ( *RemoveAll)(IWbemHiPerfEnum *This, int lFlags);};
typedef FLATPTR ( *LPDDHAL_VIDMEMALLOC)(LPDDRAWI_DIRECTDRAW_GBL lpDD, int heap, DWORD dwWidth, DWORD dwHeight);
typedef int ( *LPWSPRECVDISCONNECT)(SOCKET s, LPWSABUF lpInboundDisconnectData, LPINT lpErrno);
typedef int ( *LPWSPSENDDISCONNECT)(SOCKET s, LPWSABUF lpOutboundDisconnectData, LPINT lpErrno);
typedef BOOL ( *MCDENGESCFILTERFUNC)(SURFOBJ *pso, ULONG iEsc, ULONG cjIn, void *pvIn, ULONG cjOut, void *pvOut, ULONG *pRetVal);
typedef BOOL ( *PFN_DrvEnableDriver)(ULONG, ULONG, PDRVENABLEDATA);
typedef ULONG ( *PFN_DrvGetGlyphMode)(DHPDEV dhpdev, FONTOBJ *pfo);
typedef BOOL ( *PFN_DrvStartBanding)(SURFOBJ *, POINTL *ppointl);
typedef UINT ( *PSP_FILE_CALLBACK_A)(PVOID Context, UINT Notification, UINT_PTR Param1, UINT_PTR Param2);
typedef UINT ( *PSP_FILE_CALLBACK_W)(PVOID Context, UINT Notification, UINT_PTR Param1, UINT_PTR Param2);
struct _ACCESS_ALLOWED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _D3DNTHAL_DP2TEXBLT {DWORD dwDDDestSurface;DWORD dwDDSrcSurface;POINT pDest;RECTL rSrc;DWORD dwFlags;};
struct _DDMCCOMPBUFFERINFO {DWORD dwSize;DWORD dwNumCompBuffers;DWORD dwWidthToCreate;DWORD dwHeightToCreate;DWORD dwBytesToAllocate;DDSCAPS2 ddCompCaps;DDPIXELFORMAT ddPixelFormat;};
struct _DDMOCOMPBUFFERINFO {DWORD dwSize;PDD_SURFACE_LOCAL lpCompSurface;DWORD dwDataOffset;DWORD dwDataSize;LPVOID lpPrivate;};
struct _DDNT_GETFORMATDATA {DDNT_GETDRIVERINFO2DATA gdi2;DWORD dwFormatIndex;DDPIXELFORMAT format;};
struct _DD_GETSCANLINEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;DWORD dwScanLine;HRESULT ddRVal;void *GetScanLine;};
struct _DD_MORESURFACECAPS {DWORD dwSize;DDSCAPSEX ddsCapsMore;struct _DD_MORESURFACECAPS__tagNTExtendedHeapRestrictions ddsExtendedHeapRestrictions[1];};
struct _DD_SETCLIPLISTDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;HRESULT ddRVal;void *SetClipList;};
struct _DELETE_PORT_DATA_1 {WCHAR psztPortName[64];BYTE Reserved[98];DWORD dwVersion;DWORD dwReserved;};
struct _DISK_EX_INT13_INFO {WORD ExBufferSize;WORD ExFlags;DWORD ExCylinders;DWORD ExHeads;DWORD ExSectorsPerTrack;DWORD64 ExSectorsPerDrive;WORD ExSectorSize;WORD ExReserved;};
struct _IMAGE_NT_HEADERS64 {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER64 OptionalHeader;};
struct _KERB_EXTERNAL_NAME {SHORT NameType;USHORT NameCount;UNICODE_STRING Names[1];};
struct _LSA_TRANSLATED_SID {SID_NAME_USE Use;ULONG RelativeId;LONG DomainIndex;};
struct _NETWORK_ADDRESS_IP {USHORT sin_port;ULONG in_addr;UCHAR sin_zero[8];};
struct _READCONTROLSPACE32 {USHORT Processor;ULONG Address;ULONG BufLen;UCHAR Buf[1];};
struct _SERVICE_ASYNC_INFO {LPSERVICE_CALLBACK_PROC lpServiceCallbackProc;LPARAM lParam;HANDLE hAsyncTaskHandle;};
struct _SFVM_PROPPAGE_DATA {DWORD dwReserved;LPFNADDPROPSHEETPAGE pfn;LPARAM lParam;};
struct adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;WORD wNumCoef;ADPCMCOEFSET aCoef[];};
struct mpeg1waveformat_tag {WAVEFORMATEX wfx;WORD fwHeadLayer;DWORD dwHeadBitrate;WORD fwHeadMode;WORD fwHeadModeExt;WORD wHeadEmphasis;WORD fwHeadFlags;DWORD dwPTSLow;DWORD dwPTSHigh;};
struct tagBITMAPINFOHEADER {DWORD biSize;LONG biWidth;LONG biHeight;WORD biPlanes;WORD biBitCount;DWORD biCompression;DWORD biSizeImage;LONG biXPelsPerMeter;LONG biYPelsPerMeter;DWORD biClrUsed;DWORD biClrImportant;};
struct tagDELETEITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;HWND hwndItem;ULONG_PTR itemData;};
struct tagEMRCREATEPALETTE {EMR emr;DWORD ihPal;LOGPALETTE lgpl;};
struct tagEMRSETICMPROFILE {EMR emr;DWORD dwFlags;DWORD cbName;DWORD cbData;BYTE Data[1];};
struct tagNMDATETIMECHANGE {NMHDR nmhdr;DWORD dwFlags;SYSTEMTIME st;};
struct tagNMREBARCHILDSIZE {NMHDR hdr;UINT uBand;UINT wID;RECT rcChild;RECT rcBand;};
struct ANON_OBJECT_HEADER {WORD Sig1;WORD Sig2;WORD Version;WORD Machine;DWORD TimeDateStamp;CLSID ClassID;DWORD SizeOfData;};
typedef LRESULT ( *CAPSTATUSCALLBACKA)(HWND hWnd, int nID, LPCSTR lpsz);
struct DD_KERNELCALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_KERNELCB_SYNCSURFACE SyncSurfaceData;PDD_KERNELCB_SYNCVIDEOPORT SyncVideoPortData;};
struct IDefViewSafetyVtbl {HRESULT ( *QueryInterface)(IDefViewSafety *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDefViewSafety *This);ULONG ( *Release)(IDefViewSafety *This);HRESULT ( *IsSafePage)(IDefViewSafety *This);};
struct IMAGE_COR20_HEADER {DWORD cb;WORD MajorRuntimeVersion;WORD MinorRuntimeVersion;IMAGE_DATA_DIRECTORY MetaData;DWORD Flags;DWORD EntryPointToken;IMAGE_DATA_DIRECTORY Resources;IMAGE_DATA_DIRECTORY StrongNameSignature;IMAGE_DATA_DIRECTORY CodeManagerTable;IMAGE_DATA_DIRECTORY VTableFixups;IMAGE_DATA_DIRECTORY ExportAddressTableJumps;IMAGE_DATA_DIRECTORY ManagedNativeHeader;};
struct IQueryContinueVtbl {HRESULT ( *QueryInterface)(IQueryContinue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQueryContinue *This);ULONG ( *Release)(IQueryContinue *This);HRESULT ( *QueryContinue)(IQueryContinue *This);};
struct IWbemRefresherVtbl {HRESULT ( *QueryInterface)(IWbemRefresher *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemRefresher *This);ULONG ( *Release)(IWbemRefresher *This);HRESULT ( *Refresh)(IWbemRefresher *This, int lFlags);};
struct IWbemTransportVtbl {HRESULT ( *QueryInterface)(IWbemTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemTransport *This);ULONG ( *Release)(IWbemTransport *This);HRESULT ( *Initialize)(IWbemTransport *This);};
typedef HRESULT ( *LPFNGETCLASSOBJECT)( IID *,  IID *, LPVOID *);
typedef int ( *LPWSCENUMPROTOCOLS)(LPINT lpiProtocols, LPWSAPROTOCOL_INFOW lpProtocolBuffer, LPDWORD lpdwBufferLength, LPINT lpErrno);
typedef ULONG ( *MCDRVCREATEMEMFUNC)(MCDSURFACE *pMCDSurface, MCDMEM *pMCDMem);
typedef ULONG ( *MCDRVDELETEMEMFUNC)(MCDMEM *pMCDMem, DHPDEV dhpdev);
typedef UINT ( *PFNGETPROFILEPATHA)(LPCSTR pszUsername, LPSTR pszBuffer, UINT cbBuffer);
typedef void ( *PFN_DrvMovePointer)(SURFOBJ *pso, LONG x, LONG y, RECTL *prcl);
typedef ULONG ( *PFN_DrvResetDevice)(DHPDEV, PVOID);
typedef BOOL ( *PFN_DrvSwapBuffers)(SURFOBJ *, WNDOBJ *);
typedef void ( *PWINDBG_GET_SYMBOL)(PVOID offset, PCHAR pchBuffer, ULONG_PTR *pDisplacement);
typedef void ( *TCI_NOTIFY_HANDLER)(HANDLE ClRegCtx, HANDLE ClIfcCtx, ULONG Event, HANDLE SubCode, ULONG BufSize, PVOID Buffer);
struct _ACCESS_DENIED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _CERT_TEMPLATE_EXT {LPSTR pszObjId;DWORD dwMajorVersion;BOOL fMinorVersion;DWORD dwMinorVersion;};
struct _CONNECTDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEA lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _CONNECTDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEW lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _CRYPT_CREDENTIALS {DWORD cbSize;LPCSTR pszCredentialsOid;LPVOID pvCredentials;};
struct _CRYPT_DECODE_PARA {DWORD cbSize;PFN_CRYPT_ALLOC pfnAlloc;PFN_CRYPT_FREE pfnFree;};
struct _CRYPT_ENCODE_PARA {DWORD cbSize;PFN_CRYPT_ALLOC pfnAlloc;PFN_CRYPT_FREE pfnFree;};
struct _D3DNTHAL_DP2CLEAR {DWORD dwFlags;DWORD dwFillColor;D3DVALUE dvFillDepth;DWORD dwFillStencil;RECT Rects[1];};
struct _D3DRECTPATCH_INFO {UINT StartVertexOffsetWidth;UINT StartVertexOffsetHeight;UINT Width;UINT Height;UINT Stride;D3DBASISTYPE Basis;D3DORDERTYPE Order;};
struct _DDMORESURFACECAPS {DWORD dwSize;DDSCAPSEX ddsCapsMore;struct _DDMORESURFACECAPS__tagExtendedHeapRestrictions ddsExtendedHeapRestrictions[1];};
struct _DDVIDEOPORTNOTIFY {LARGE_INTEGER ApproximateTimeStamp;LONG lField;UINT dwSurfaceIndex;LONG lDone;};
struct _IP_ADAPTER_PREFIX {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_PREFIX *Next;SOCKET_ADDRESS Address;ULONG PrefixLength;};
struct _KDDEBUGGER_DATA32 {DBGKD_DEBUG_DATA_HEADER32 Header;ULONG KernBase;ULONG BreakpointWithStatus;ULONG SavedContext;USHORT ThCallbackStack;USHORT NextCallback;USHORT FramePointer;unsigned short PaeEnabled : 1;ULONG KiCallUserMode;ULONG KeUserCallbackDispatcher;ULONG PsLoadedModuleList;ULONG PsActiveProcessHead;ULONG PspCidTable;ULONG ExpSystemResourcesList;ULONG ExpPagedPoolDescriptor;ULONG ExpNumberOfPagedPools;ULONG KeTimeIncrement;ULONG KeBugCheckCallbackListHead;ULONG KiBugcheckData;ULONG IopErrorLogListHead;ULONG ObpRootDirectoryObject;ULONG ObpTypeObjectType;ULONG MmSystemCacheStart;ULONG MmSystemCacheEnd;ULONG MmSystemCacheWs;ULONG MmPfnDatabase;ULONG MmSystemPtesStart;ULONG MmSystemPtesEnd;ULONG MmSubsectionBase;ULONG MmNumberOfPagingFiles;ULONG MmLowestPhysicalPage;ULONG MmHighestPhysicalPage;ULONG MmNumberOfPhysicalPages;ULONG MmMaximumNonPagedPoolInBytes;ULONG MmNonPagedSystemStart;ULONG MmNonPagedPoolStart;ULONG MmNonPagedPoolEnd;ULONG MmPagedPoolStart;ULONG MmPagedPoolEnd;ULONG MmPagedPoolInformation;ULONG MmPageSize;ULONG MmSizeOfPagedPoolInBytes;ULONG MmTotalCommitLimit;ULONG MmTotalCommittedPages;ULONG MmSharedCommit;ULONG MmDriverCommit;ULONG MmProcessCommit;ULONG MmPagedPoolCommit;ULONG MmExtendedCommit;ULONG MmZeroedPageListHead;ULONG MmFreePageListHead;ULONG MmStandbyPageListHead;ULONG MmModifiedPageListHead;ULONG MmModifiedNoWritePageListHead;ULONG MmAvailablePages;ULONG MmResidentAvailablePages;ULONG PoolTrackTable;ULONG NonPagedPoolDescriptor;ULONG MmHighestUserAddress;ULONG MmSystemRangeStart;ULONG MmUserProbeAddress;ULONG KdPrintCircularBuffer;ULONG KdPrintCircularBufferEnd;ULONG KdPrintWritePointer;ULONG KdPrintRolloverCount;ULONG MmLoadedUserImageList;};
struct _KDDEBUGGER_DATA64 {DBGKD_DEBUG_DATA_HEADER64 Header;ULONG64 KernBase;ULONG64 BreakpointWithStatus;ULONG64 SavedContext;USHORT ThCallbackStack;USHORT NextCallback;USHORT FramePointer;unsigned short PaeEnabled : 1;ULONG64 KiCallUserMode;ULONG64 KeUserCallbackDispatcher;ULONG64 PsLoadedModuleList;ULONG64 PsActiveProcessHead;ULONG64 PspCidTable;ULONG64 ExpSystemResourcesList;ULONG64 ExpPagedPoolDescriptor;ULONG64 ExpNumberOfPagedPools;ULONG64 KeTimeIncrement;ULONG64 KeBugCheckCallbackListHead;ULONG64 KiBugcheckData;ULONG64 IopErrorLogListHead;ULONG64 ObpRootDirectoryObject;ULONG64 ObpTypeObjectType;ULONG64 MmSystemCacheStart;ULONG64 MmSystemCacheEnd;ULONG64 MmSystemCacheWs;ULONG64 MmPfnDatabase;ULONG64 MmSystemPtesStart;ULONG64 MmSystemPtesEnd;ULONG64 MmSubsectionBase;ULONG64 MmNumberOfPagingFiles;ULONG64 MmLowestPhysicalPage;ULONG64 MmHighestPhysicalPage;ULONG64 MmNumberOfPhysicalPages;ULONG64 MmMaximumNonPagedPoolInBytes;ULONG64 MmNonPagedSystemStart;ULONG64 MmNonPagedPoolStart;ULONG64 MmNonPagedPoolEnd;ULONG64 MmPagedPoolStart;ULONG64 MmPagedPoolEnd;ULONG64 MmPagedPoolInformation;ULONG64 MmPageSize;ULONG64 MmSizeOfPagedPoolInBytes;ULONG64 MmTotalCommitLimit;ULONG64 MmTotalCommittedPages;ULONG64 MmSharedCommit;ULONG64 MmDriverCommit;ULONG64 MmProcessCommit;ULONG64 MmPagedPoolCommit;ULONG64 MmExtendedCommit;ULONG64 MmZeroedPageListHead;ULONG64 MmFreePageListHead;ULONG64 MmStandbyPageListHead;ULONG64 MmModifiedPageListHead;ULONG64 MmModifiedNoWritePageListHead;ULONG64 MmAvailablePages;ULONG64 MmResidentAvailablePages;ULONG64 PoolTrackTable;ULONG64 NonPagedPoolDescriptor;ULONG64 MmHighestUserAddress;ULONG64 MmSystemRangeStart;ULONG64 MmUserProbeAddress;ULONG64 KdPrintCircularBuffer;ULONG64 KdPrintCircularBufferEnd;ULONG64 KdPrintWritePointer;ULONG64 KdPrintRolloverCount;ULONG64 MmLoadedUserImageList;ULONG64 NtBuildLab;ULONG64 KiNormalSystemCall;ULONG64 KiProcessorBlock;ULONG64 MmUnloadedDrivers;ULONG64 MmLastUnloadedDriver;ULONG64 MmTriageActionTaken;ULONG64 MmSpecialPoolTag;ULONG64 KernelVerifier;ULONG64 MmVerifierData;ULONG64 MmAllocatedNonPagedPool;ULONG64 MmPeakCommitment;ULONG64 MmTotalCommitLimitMaximum;ULONG64 CmNtCSDVersion;ULONG64 MmPhysicalMemoryBlock;ULONG64 MmSessionBase;ULONG64 MmSessionSize;ULONG64 MmSystemParentTablePage;ULONG64 MmVirtualTranslationBase;USHORT OffsetKThreadNextProcessor;USHORT OffsetKThreadTeb;USHORT OffsetKThreadKernelStack;USHORT OffsetKThreadInitialStack;USHORT OffsetKThreadApcProcess;USHORT OffsetKThreadState;USHORT OffsetKThreadBStore;USHORT OffsetKThreadBStoreLimit;USHORT SizeEProcess;USHORT OffsetEprocessPeb;USHORT OffsetEprocessParentCID;USHORT OffsetEprocessDirectoryTableBase;USHORT SizePrcb;USHORT OffsetPrcbDpcRoutine;USHORT OffsetPrcbCurrentThread;USHORT OffsetPrcbMhz;USHORT OffsetPrcbCpuType;USHORT OffsetPrcbVendorString;USHORT OffsetPrcbProcStateContext;USHORT OffsetPrcbNumber;USHORT SizeEThread;ULONG64 KdPrintCircularBufferPtr;ULONG64 KdPrintBufferSize;ULONG64 KeLoaderBlock;USHORT SizePcr;USHORT OffsetPcrSelfPcr;USHORT OffsetPcrCurrentPrcb;USHORT OffsetPcrContainedPrcb;USHORT OffsetPcrInitialBStore;USHORT OffsetPcrBStoreLimit;USHORT OffsetPcrInitialStack;USHORT OffsetPcrStackLimit;USHORT OffsetPrcbPcrPage;USHORT OffsetPrcbProcStateSpecialReg;USHORT GdtR0Code;USHORT GdtR0Data;USHORT GdtR0Pcr;USHORT GdtR3Code;USHORT GdtR3Data;USHORT GdtR3Teb;USHORT GdtLdt;USHORT GdtTss;USHORT Gdt64R3CmCode;USHORT Gdt64R3CmTeb;ULONG64 IopNumTriageDumpDataBlocks;ULONG64 IopTriageDumpDataBlocks;};
struct _KERB_TICKET_LOGON {KERB_LOGON_SUBMIT_TYPE MessageType;ULONG Flags;ULONG ServiceTicketLength;ULONG TicketGrantingTicketLength;PUCHAR ServiceTicket;PUCHAR TicketGrantingTicket;};
struct _MPR_IFTRANSPORT_0 {DWORD dwTransportId;HANDLE hIfTransport;WCHAR wszIfTransportName[41];};
struct _PRINTER_DEFAULTSA {LPSTR pDatatype;LPDEVMODEA pDevMode;ACCESS_MASK DesiredAccess;};
struct _TAPE_SET_POSITION {DWORD Method;DWORD Partition;LARGE_INTEGER Offset;BOOLEAN Immediate;};
struct _UFF_FONTDIRECTORY {DWORD dwSignature;WORD wSize;WORD wFontID;SHORT sGlyphID;WORD wFlags;DWORD dwInstallerSig;DWORD offFontName;DWORD offCartridgeName;DWORD offFontData;DWORD offGlyphData;DWORD offVarData;};
struct _WINDOWS_IAS_QUERY {u_char irdaDeviceID[4];char irdaClassName[64];char irdaAttribName[256];u_long irdaAttribType;union _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD irdaAttribute;};
struct tACMFILTERDETAILSW {DWORD cbStruct;DWORD dwFilterIndex;DWORD dwFilterTag;DWORD fdwSupport;LPWAVEFILTER pwfltr;DWORD cbwfltr;WCHAR szFilter[128];};
struct tACMFORMATDETAILSW {DWORD cbStruct;DWORD dwFormatIndex;DWORD dwFormatTag;DWORD fdwSupport;LPWAVEFORMATEX pwfx;DWORD cbwfx;WCHAR szFormat[128];};
struct tagCOMPOSITIONFORM {DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagEMREXTCREATEPEN {EMR emr;DWORD ihPen;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;EXTLOGPEN elp;};
struct tagMCI_INFO_PARMSA {DWORD_PTR dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;};
struct tagMCI_OPEN_PARMSA {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;};
struct tagNMTBGETINFOTIPA {NMHDR hdr;LPSTR pszText;int cchTextMax;int iItem;LPARAM lParam;};
struct tagWINDOWPLACEMENT {UINT length;UINT flags;UINT showCmd;POINT ptMinPosition;POINT ptMaxPosition;RECT rcNormalPosition;};
struct AsyncIUnknownVtbl {HRESULT ( *QueryInterface)(AsyncIUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(AsyncIUnknown *This);ULONG ( *Release)(AsyncIUnknown *This);HRESULT ( *Begin_QueryInterface)(AsyncIUnknown *This,  IID * riid);HRESULT ( *Finish_QueryInterface)(AsyncIUnknown *This, void **ppvObject);HRESULT ( *Begin_AddRef)(AsyncIUnknown *This);ULONG ( *Finish_AddRef)(AsyncIUnknown *This);HRESULT ( *Begin_Release)(AsyncIUnknown *This);ULONG ( *Finish_Release)(AsyncIUnknown *This);};
typedef LRESULT ( *CAPERRORCALLBACKA)(HWND hWnd, int nID, LPCSTR lpsz);
struct IAsyncManagerVtbl {HRESULT ( *QueryInterface)(IAsyncManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncManager *This);ULONG ( *Release)(IAsyncManager *This);HRESULT ( *CompleteCall)(IAsyncManager *This, HRESULT Result);HRESULT ( *GetCallContext)(IAsyncManager *This,  IID * riid, void **pInterface);HRESULT ( *GetState)(IAsyncManager *This, ULONG *pulStateFlags);};
typedef DWORD ( *PDX_FLIPVIDEOPORT)(PVOID, PDDFLIPVIDEOPORTINFO, PVOID);
typedef DWORD ( *PDX_SKIPNEXTFIELD)(PVOID, PDDSKIPNEXTFIELDINFO, PVOID);
struct _CERT_POLICY_INFO {LPSTR pszPolicyIdentifier;DWORD cPolicyQualifier;CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;};
struct _D3DHAL_DP2TEXBLT {DWORD dwDDDestSurface;DWORD dwDDSrcSurface;POINT pDest;RECTL rSrc;DWORD dwFlags;};
struct _D3DTRIPATCH_INFO {UINT StartVertexOffset;UINT NumVertices;D3DBASISTYPE Basis;D3DORDERTYPE Order;};
struct _DDCOMPBUFFERINFO {DWORD dwSize;DWORD dwNumCompBuffers;DWORD dwWidthToCreate;DWORD dwHeightToCreate;DWORD dwBytesToAllocate;DDSCAPS2 ddCompCaps;DDPIXELFORMAT ddPixelFormat;};
struct _DD_GETFORMATDATA {DD_GETDRIVERINFO2DATA gdi2;DWORD dwFormatIndex;DDPIXELFORMAT format;};
struct _DISK_GEOMETRY_EX {DISK_GEOMETRY Geometry;LARGE_INTEGER DiskSize;BYTE Data[1];};
struct _DISK_PERFORMANCE {LARGE_INTEGER BytesRead;LARGE_INTEGER BytesWritten;LARGE_INTEGER ReadTime;LARGE_INTEGER WriteTime;LARGE_INTEGER IdleTime;DWORD ReadCount;DWORD WriteCount;DWORD QueueDepth;DWORD SplitCount;LARGE_INTEGER QueryTime;DWORD StorageDeviceNumber;WCHAR StorageManagerName[8];};
struct _EVENTSFORLOGFILE {DWORD ulSize;WCHAR szLogicalLogFile[256];DWORD ulNumRecords;EVENTLOGRECORD pEventLogRecords[];};
struct _EXCEPTION_RECORD {DWORD ExceptionCode;DWORD ExceptionFlags;struct _EXCEPTION_RECORD *ExceptionRecord;PVOID ExceptionAddress;DWORD NumberParameters;ULONG_PTR ExceptionInformation[15];};
struct _IMAGE_DEBUG_MISC {DWORD DataType;DWORD Length;BOOLEAN Unicode;BYTE Reserved[3];BYTE Data[1];};
struct _IMAGE_NT_HEADERS {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER32 OptionalHeader;};
struct _IMAGE_RELOCATION {_IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED __anonymous0;DWORD SymbolTableIndex;WORD Type;};
struct _IMAGE_VXD_HEADER {WORD e32_magic;BYTE e32_border;BYTE e32_worder;DWORD e32_level;WORD e32_cpu;WORD e32_os;DWORD e32_ver;DWORD e32_mflags;DWORD e32_mpages;DWORD e32_startobj;DWORD e32_eip;DWORD e32_stackobj;DWORD e32_esp;DWORD e32_pagesize;DWORD e32_lastpagesize;DWORD e32_fixupsize;DWORD e32_fixupsum;DWORD e32_ldrsize;DWORD e32_ldrsum;DWORD e32_objtab;DWORD e32_objcnt;DWORD e32_objmap;DWORD e32_itermap;DWORD e32_rsrctab;DWORD e32_rsrccnt;DWORD e32_restab;DWORD e32_enttab;DWORD e32_dirtab;DWORD e32_dircnt;DWORD e32_fpagetab;DWORD e32_frectab;DWORD e32_impmod;DWORD e32_impmodcnt;DWORD e32_impproc;DWORD e32_pagesum;DWORD e32_datapage;DWORD e32_preload;DWORD e32_nrestab;DWORD e32_cbnrestab;DWORD e32_nressum;DWORD e32_autodata;DWORD e32_debuginfo;DWORD e32_debuglen;DWORD e32_instpreload;DWORD e32_instdemand;DWORD e32_heapsize;BYTE e32_res3[12];DWORD e32_winresoff;DWORD e32_winreslen;WORD e32_devid;WORD e32_ddkver;};
struct _KSM_BDA_PIN_PAIR {KSMETHOD Method;_KSM_BDA_PIN_PAIR___F2C15BE15B02E5D4E08CDF00E238673A __anonymous0;_KSM_BDA_PIN_PAIR___54CD25B4E687557DB78A3697AAB04510 __anonymous1;};
struct _KSPROPERTY_SPHLI {USHORT HLISS;USHORT Reserved;ULONG StartPTM;ULONG EndPTM;USHORT StartX;USHORT StartY;USHORT StopX;USHORT StopY;KS_COLCON ColCon;};
struct _MCDLINEDRAWSTATE {MCDFLOAT lineWidth;USHORT lineStipplePattern;SHORT lineStippleRepeat;};
struct _MCDPIXELTRANSFER {MCDFLOAT redScale;MCDFLOAT greenScale;MCDFLOAT blueScale;MCDFLOAT alphaScale;MCDFLOAT depthScale;MCDFLOAT redbias;MCDFLOAT greenBias;MCDFLOAT blueBias;MCDFLOAT aalphaBias;MCDFLOAT depthBias;MCDFLOAT zoomX;MCDFLOAT zoomY;LONG indexShift;LONG indexOffset;BOOL mapColor;BOOL mapStencil;};
struct _MCDPOLYDRAWSTATE {ULONG cullFaceMode;ULONG frontFace;ULONG polygonModeFront;ULONG polygonModeBack;BYTE polygonStipple[128];MCDFLOAT zOffsetFactor;MCDFLOAT zOffsetUnits;};
struct _PROV_ENUMALGS_EX {ALG_ID aiAlgid;DWORD dwDefaultLen;DWORD dwMinLen;DWORD dwMaxLen;DWORD dwProtocols;DWORD dwNameLen;CHAR szName[20];DWORD dwLongNameLen;CHAR szLongName[40];};
struct _RAS_CONNECTION_1 {HANDLE hConnection;HANDLE hInterface;PPP_INFO PppInfo;DWORD dwBytesXmited;DWORD dwBytesRcved;DWORD dwFramesXmited;DWORD dwFramesRcved;DWORD dwCrcErr;DWORD dwTimeoutErr;DWORD dwAlignmentErr;DWORD dwHardwareOverrunErr;DWORD dwFramingErr;DWORD dwBufferOverrunErr;DWORD dwCompressionRatioIn;DWORD dwCompressionRatioOut;};
struct _READCONTROLSPACE {USHORT Processor;ULONG Address;ULONG BufLen;UCHAR Buf[1];};
struct _RSVP_POLICY_INFO {QOS_OBJECT_HDR ObjectHdr;ULONG NumPolicyElement;RSVP_POLICY PolicyElement[1];};
struct _SENDCMDOUTPARAMS {DWORD cBufferSize;DRIVERSTATUS DriverStatus;BYTE bBuffer[1];};
struct _SYSTEM_ALARM_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _SYSTEM_AUDIT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _WIN32_FIND_DATAA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwReserved0;DWORD dwReserved1;CHAR cFileName[260];CHAR cAlternateFileName[14];};
struct _WIN32_FIND_DATAW {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwReserved0;DWORD dwReserved1;WCHAR cFileName[260];WCHAR cAlternateFileName[14];};
struct drmwaveformat_tag {WAVEFORMATEX wfx;WORD wReserved;ULONG ulContentId;WAVEFORMATEX wfxSecure;};
struct tagAAMENUFILENAME {SHORT cbTotal;BYTE rgbReserved[12];WCHAR szFileName[1];};
struct tagCOPYDATASTRUCT {ULONG_PTR dwData;DWORD cbData;PVOID lpData;};
struct tagDVTARGETDEVICE {DWORD tdSize;WORD tdDriverNameOffset;WORD tdDeviceNameOffset;WORD tdPortNameOffset;WORD tdExtDevmodeOffset;BYTE tdData[1];};
struct tagEMRNAMEDESCAPE {EMR emr;INT iEscape;INT cbDriver;INT cbEscData;BYTE EscData[1];};
struct tagMSLLHOOKSTRUCT {POINT pt;DWORD mouseData;DWORD flags;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagRASCONNSTATUSA {DWORD dwSize;enum tagRASCONNSTATE rasconnstate;DWORD dwError;CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szPhoneNumber[129];};
struct tagRASCONNSTATUSW {DWORD dwSize;enum tagRASCONNSTATE rasconnstate;DWORD dwError;WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szPhoneNumber[129];};
struct tagRASDIALPARAMSA {DWORD dwSize;CHAR szEntryName[257];CHAR szPhoneNumber[129];CHAR szCallbackNumber[129];CHAR szUserName[257];CHAR szPassword[257];CHAR szDomain[16];DWORD dwSubEntry;ULONG_PTR dwCallbackId;};
struct tagRASDIALPARAMSW {DWORD dwSize;WCHAR szEntryName[257];WCHAR szPhoneNumber[129];WCHAR szCallbackNumber[129];WCHAR szUserName[257];WCHAR szPassword[257];WCHAR szDomain[16];DWORD dwSubEntry;ULONG_PTR dwCallbackId;};
struct tagRAWINPUTDEVICE {USHORT usUsagePage;USHORT usUsage;DWORD dwFlags;HWND hwndTarget;};
struct tagRAWINPUTHEADER {DWORD dwType;DWORD dwSize;HANDLE hDevice;WPARAM wParam;};
typedef LRESULT ( *CAPVIDEOCALLBACK)(HWND hWnd, LPVIDEOHDR lpVHdr);
struct ICallFactoryVtbl {HRESULT ( *QueryInterface)(ICallFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICallFactory *This);ULONG ( *Release)(ICallFactory *This);HRESULT ( *CreateCall)(ICallFactory *This,  IID * riid, IUnknown *pCtrlUnk,  IID * riid2, IUnknown **ppv);};
struct IEnumMonikerVtbl {HRESULT ( *QueryInterface)(IEnumMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumMoniker *This);ULONG ( *Release)(IEnumMoniker *This);HRESULT ( *Next)(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumMoniker *This, ULONG celt);HRESULT ( *Reset)(IEnumMoniker *This);HRESULT ( *Clone)(IEnumMoniker *This, IEnumMoniker **ppenum);};
struct IEnumUnknownVtbl {HRESULT ( *QueryInterface)(IEnumUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumUnknown *This);ULONG ( *Release)(IEnumUnknown *This);HRESULT ( *Next)(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumUnknown *This, ULONG celt);HRESULT ( *Reset)(IEnumUnknown *This);HRESULT ( *Clone)(IEnumUnknown *This, IEnumUnknown **ppenum);};
struct IProcessLockVtbl {HRESULT ( *QueryInterface)(IProcessLock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProcessLock *This);ULONG ( *Release)(IProcessLock *This);ULONG ( *AddRefOnProcess)(IProcessLock *This);ULONG ( *ReleaseRefOnProcess)(IProcessLock *This);};
struct ITypeFactoryVtbl {HRESULT ( *QueryInterface)(ITypeFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeFactory *This);ULONG ( *Release)(ITypeFactory *This);HRESULT ( *CreateFromTypeInfo)(ITypeFactory *This, ITypeInfo *pTypeInfo,  IID * riid, IUnknown **ppv);};
typedef int ( *LPWSPASYNCSELECT)(SOCKET s, HWND hWnd, unsigned int wMsg, int lEvent, LPINT lpErrno);
typedef int ( *LPWSPEVENTSELECT)(SOCKET s, HANDLE hEventObject, int lNetworkEvents, LPINT lpErrno);
typedef BOOL ( *MCDENGINITEXFUNC)(SURFOBJ *pso, MCDGLOBALDRIVERFUNCS *pMCDGlobalDriverFuncs, void *pReserved);
typedef DWORD ( *PDX_BOBNEXTFIELD)(PVOID, PDDBOBNEXTFIELDINFO, PVOID);
typedef DWORD ( *PFNRASSENDBUFFER)(HANDLE hPort, PBYTE pBuffer, DWORD dwSize);
typedef BOOL ( *PFN_CPD_ADD_CERT)(struct _CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSigner, DWORD idxCounterSigner, PCCERT_CONTEXT pCert2Add);
typedef ULONG ( *PWINDBG_DISASM64)(ULONG64 *lpOffset, PCSTR lpBuffer, ULONG fShowEffectiveAddress);
struct _CRYPT_ATTRIBUTE {LPSTR pszObjId;DWORD cValue;PCRYPT_ATTR_BLOB rgValue;};
struct _D3DHAL_DP2CLEAR {DWORD dwFlags;DWORD dwFillColor;D3DVALUE dvFillDepth;DWORD dwFillStencil;RECT Rects[1];};
struct _DDENABLEIRQINFO {DWORD dwIRQSources;DWORD dwLine;PDX_IRQCALLBACK IRQCallback;PDX_IRQDATA lpIRQData;};
struct _DDVIDEOPORTDESC {DWORD dwSize;DWORD dwFieldWidth;DWORD dwVBIWidth;DWORD dwFieldHeight;DWORD dwMicrosecondsPerField;DWORD dwMaxPixelsPerSecond;DWORD dwVideoPortID;DWORD dwReserved1;DDVIDEOPORTCONNECT VideoPortType;ULONG_PTR dwReserved2;ULONG_PTR dwReserved3;};
struct _DD_SURFACE_MORE {DWORD dwMipMapCount;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwOverlayFlags;DDSCAPSEX ddsCapsEx;DWORD dwSurfaceHandle;};
struct _DLLVERSIONINFO2 {DLLVERSIONINFO info1;DWORD dwFlags;ULONGLONG ullVersion;};
struct _MIB_IPMCAST_MFE {DWORD dwGroup;DWORD dwSource;DWORD dwSrcMask;DWORD dwUpStrmNgbr;DWORD dwInIfIndex;DWORD dwInIfProtocol;DWORD dwRouteProtocol;DWORD dwRouteNetwork;DWORD dwRouteMask;ULONG ulUpTime;ULONG ulExpiryTime;ULONG ulTimeOut;ULONG ulNumOutIf;DWORD fFlags;DWORD dwReserved;MIB_IPMCAST_OIF rgmioOutInfo[1];};
struct _MPR_TRANSPORT_0 {DWORD dwTransportId;HANDLE hTransport;WCHAR wszTransportName[41];};
struct _NABTSFEC_BUFFER {ULONG dataSize;USHORT groupID;USHORT Reserved;UCHAR data[448];};
struct _QUOTA_LIMITS_EX {SIZE_T PagedPoolLimit;SIZE_T NonPagedPoolLimit;SIZE_T MinimumWorkingSetSize;SIZE_T MaximumWorkingSetSize;SIZE_T PagefileLimit;LARGE_INTEGER TimeLimit;SIZE_T Reserved1;SIZE_T Reserved2;SIZE_T Reserved3;SIZE_T Reserved4;DWORD Flags;DWORD Reserved5;};
struct _SENDCMDINPARAMS {DWORD cBufferSize;IDEREGS irDriveRegs;BYTE bDriveNumber;BYTE bReserved[3];DWORD dwReserved[4];BYTE bBuffer[1];};
struct _SP_DEVINFO_DATA {DWORD cbSize;GUID ClassGuid;DWORD DevInst;ULONG_PTR Reserved;};
struct _TAPE_STATISTICS {DWORD Version;DWORD Flags;LARGE_INTEGER RecoveredWrites;LARGE_INTEGER UnrecoveredWrites;LARGE_INTEGER RecoveredReads;LARGE_INTEGER UnrecoveredReads;BYTE CompressionRatioReads;BYTE CompressionRatioWrites;};
struct _TT_HITTESTINFOA {HWND hwnd;POINT pt;TTTOOLINFOA ti;};
struct _TT_HITTESTINFOW {HWND hwnd;POINT pt;TTTOOLINFOW ti;};
struct _USER_MARSHAL_CB {unsigned int Flags;PMIDL_STUB_MESSAGE pStubMsg;PFORMAT_STRING pReserve;unsigned int Signature;USER_MARSHAL_CB_TYPE CBType;PFORMAT_STRING pFormat;PFORMAT_STRING pTypeFormat;};
struct _VIDEOPARAMETERS {GUID Guid;ULONG dwOffset;ULONG dwCommand;ULONG dwFlags;ULONG dwMode;ULONG dwTVStandard;ULONG dwAvailableModes;ULONG dwAvailableTVStandard;ULONG dwFlickerFilter;ULONG dwOverScanX;ULONG dwOverScanY;ULONG dwMaxUnscaledX;ULONG dwMaxUnscaledY;ULONG dwPositionX;ULONG dwPositionY;ULONG dwBrightness;ULONG dwContrast;ULONG dwCPType;ULONG dwCPCommand;ULONG dwCPStandard;ULONG dwCPKey;ULONG bCP_APSTriggerBits;UCHAR bOEMCopyProtection[256];};
struct _WIN32_STREAM_ID {DWORD dwStreamId;DWORD dwStreamAttributes;LARGE_INTEGER Size;DWORD dwStreamNameSize;WCHAR cStreamName[1];};
struct _WIN_CERTIFICATE {DWORD dwLength;WORD wRevision;WORD wCertificateType;BYTE bCertificate[1];};
struct _WSANSClassInfoA {LPSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct _tagPROTOCOLDATA {DWORD grfFlags;DWORD dwState;LPVOID pData;ULONG cbData;};
struct tACMSTREAMHEADER {DWORD cbStruct;DWORD fdwStatus;DWORD_PTR dwUser;LPBYTE pbSrc;DWORD cbSrcLength;DWORD cbSrcLengthUsed;DWORD_PTR dwSrcUser;LPBYTE pbDst;DWORD cbDstLength;DWORD cbDstLengthUsed;DWORD_PTR dwDstUser;DWORD dwReservedDriver[10];};
struct tagCANDIDATEFORM {DWORD dwIndex;DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagCapDriverCaps {UINT wDeviceIndex;BOOL fHasOverlay;BOOL fHasDlgVideoSource;BOOL fHasDlgVideoFormat;BOOL fHasDlgVideoDisplay;BOOL fCaptureInitialized;BOOL fDriverSuppliesPalettes;HANDLE hVideoIn;HANDLE hVideoOut;HANDLE hVideoExtIn;HANDLE hVideoExtOut;};
struct tagDEBUGHOOKINFO {DWORD idThread;DWORD idThreadInstaller;LPARAM lParam;WPARAM wParam;int code;};
struct tagEMRGDICOMMENT {EMR emr;DWORD cbData;BYTE Data[1];};
struct tagGUITHREADINFO {DWORD cbSize;DWORD flags;HWND hwndActive;HWND hwndFocus;HWND hwndCapture;HWND hwndMenuOwner;HWND hwndMoveSize;HWND hwndCaret;RECT rcCaret;};
struct tagHIGHCONTRASTA {UINT cbSize;DWORD dwFlags;LPSTR lpszDefaultScheme;};
struct tagTVHITTESTINFO {POINT pt;UINT flags;HTREEITEM hItem;};
typedef LRESULT ( *CAPWAVECALLBACK)(HWND hWnd, LPWAVEHDR lpWHdr);
struct CM_Power_Data_s {DWORD PD_Size;DEVICE_POWER_STATE PD_MostRecentPowerState;DWORD PD_Capabilities;DWORD PD_D1Latency;DWORD PD_D2Latency;DWORD PD_D3Latency;DEVICE_POWER_STATE PD_PowerStateMapping[7];SYSTEM_POWER_STATE PD_DeepestSystemWake;};
struct KERB_CRYPTO_KEY {LONG KeyType;ULONG Length;PUCHAR Value;};
typedef BOOL ( *LPWPUCLOSEEVENT)(HANDLE hEvent, LPINT lpErrno);
typedef BOOL ( *LPWPURESETEVENT)(HANDLE hEvent, LPINT lpErrno);
typedef LONG ( *OEMCUIPCALLBACK)(PCPSUICBPARAM, POEMCUIPPARAM);
typedef DWORD ( *PDX_FLIPOVERLAY)(PVOID, PDDFLIPOVERLAYINFO, PVOID);
typedef DWORD ( *PFNRASGETBUFFER)(PBYTE *ppBuffer, PDWORD pdwSize);
typedef ULONG ( *PFN_DrvGetModes)(HANDLE, ULONG, DEVMODEW *);
typedef BOOL ( *PFN_DrvNextBand)(SURFOBJ *, POINTL *ppointl);
struct _ADAPTER_STATUS {UCHAR adapter_address[6];UCHAR rev_major;UCHAR reserved0;UCHAR adapter_type;UCHAR rev_minor;WORD duration;WORD frmr_recv;WORD frmr_xmit;WORD iframe_recv_err;WORD xmit_aborts;DWORD xmit_success;DWORD recv_success;WORD iframe_xmit_err;WORD recv_buff_unavail;WORD t1_timeouts;WORD ti_timeouts;DWORD reserved1;WORD free_ncbs;WORD max_cfg_ncbs;WORD max_ncbs;WORD xmit_buf_unavail;WORD max_dgram_size;WORD pending_sess;WORD max_cfg_sess;WORD max_sess;WORD max_sess_pkt_size;WORD name_count;};
struct _AVISTREAMINFOA {DWORD fccType;DWORD fccHandler;DWORD dwFlags;DWORD dwCaps;WORD wPriority;WORD wLanguage;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwInitialFrames;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;RECT rcFrame;DWORD dwEditCount;DWORD dwFormatChangeCount;char szName[64];};
struct _CERT_EXTENSION {LPSTR pszObjId;BOOL fCritical;CRYPT_OBJID_BLOB Value;};
struct _CRL_DIST_POINT {CRL_DIST_POINT_NAME DistPointName;CRYPT_BIT_BLOB ReasonFlags;CERT_ALT_NAME_INFO CRLIssuer;};
struct _DCICREATEINPUT {DCICMD cmd;DWORD dwCompression;DWORD dwMask[3];DWORD dwWidth;DWORD dwHeight;DWORD dwDCICaps;DWORD dwBitCount;LPVOID lpSurface;};
struct _DDMCBUFFERINFO {DWORD dwSize;LPDDRAWI_DDRAWSURFACE_LCL lpCompSurface;DWORD dwDataOffset;DWORD dwDataSize;LPVOID lpPrivate;};
struct _DISCDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPSTR lpLocalName;LPSTR lpRemoteName;DWORD dwFlags;};
struct _DISK_HISTOGRAM {LARGE_INTEGER DiskSize;LARGE_INTEGER Start;LARGE_INTEGER End;LARGE_INTEGER Average;LARGE_INTEGER AverageRead;LARGE_INTEGER AverageWrite;DWORD Granularity;DWORD Size;DWORD ReadCount;DWORD WriteCount;PHISTOGRAM_BUCKET Histogram;};
struct _DMUS_LFOPARAMS {PCENT pcFrequency;TCENT tcDelay;GCENT gcVolumeScale;PCENT pcPitchScale;GCENT gcMWToVolume;PCENT pcMWToPitch;};
struct _DMUS_PEGPARAMS {TCENT tcAttack;TCENT tcDecay;PERCENT ptSustain;TCENT tcRelease;TCENT tcVel2Attack;TCENT tcKey2Decay;PCENT pcRange;};
struct _FLOWDESCRIPTOR {FLOWSPEC FlowSpec;ULONG NumFilters;LPRSVP_FILTERSPEC FilterList;};
struct _GET_INPUT_LINE {PCSTR Prompt;PSTR Buffer;ULONG BufferSize;ULONG InputSize;};
struct _IP_ADDR_STRING {struct _IP_ADDR_STRING *Next;IP_ADDRESS_STRING IpAddress;IP_MASK_STRING IpMask;DWORD Context;};
struct _KERB_S4U_LOGON {KERB_LOGON_SUBMIT_TYPE MessageType;ULONG Flags;UNICODE_STRING ClientUpn;UNICODE_STRING ClientRealm;};
struct _KSGOP_USERDATA {ULONG sc;ULONG reserved1;BYTE cFields;CHAR l21Data[3];};
struct _MCDPIXELFORMAT {WORD nSize;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cDepthBits;BYTE cDepthShift;BYTE cDepthBufferBits;BYTE cStencilBits;BYTE cOverlayPlanes;BYTE cUnderlayPlanes;DWORD dwTransparentColor;};
struct _PROTOCOL_INFOA {DWORD dwServiceFlags;INT iAddressFamily;INT iMaxSockAddr;INT iMinSockAddr;INT iSocketType;INT iProtocol;DWORD dwMessageSize;LPSTR lpProtocol;};
struct _PUBLICKEYSTRUC {BYTE bType;BYTE bVersion;WORD reserved;ALG_ID aiKeyAlg;};
struct _SETRESULT_INFO {WORD cbSize;WORD wReserved;HANDLE hSetResult;LRESULT Result;};
struct _ZONEATTRIBUTES {ULONG cbSize;WCHAR szDisplayName[260];WCHAR szDescription[200];WCHAR szIconPath[260];DWORD dwTemplateMinLevel;DWORD dwTemplateRecommended;DWORD dwTemplateCurrentLevel;DWORD dwFlags;};
struct tagCOMBOBOXINFO {DWORD cbSize;RECT rcItem;RECT rcButton;DWORD stateButton;HWND hwndCombo;HWND hwndItem;HWND hwndList;};
struct tagCapInfoChunk {FOURCC fccInfoID;LPVOID lpData;LONG cbData;};
struct tagCaptureParms {DWORD dwRequestMicroSecPerFrame;BOOL fMakeUserHitOKToCapture;UINT wPercentDropForError;BOOL fYield;DWORD dwIndexSize;UINT wChunkGranularity;BOOL fUsingDOSMemory;UINT wNumVideoRequested;BOOL fCaptureAudio;UINT wNumAudioRequested;UINT vKeyAbort;BOOL fAbortLeftMouse;BOOL fAbortRightMouse;BOOL fLimitEnabled;UINT wTimeLimit;BOOL fMCIControl;BOOL fStepMCIDevice;DWORD dwMCIStartTime;DWORD dwMCIStopTime;BOOL fStepCaptureAt2x;UINT wStepCaptureAverageFrames;DWORD dwAudioBufferSize;BOOL fDisableWriteCache;UINT AVStreamMaster;};
struct tagDRAGLISTINFO {UINT uNotification;HWND hWnd;POINT ptCursor;};
struct tagEMRCREATEPEN {EMR emr;DWORD ihPen;LOGPEN lopn;};
struct tagEMREXTESCAPE {EMR emr;INT iEscape;INT cbEscData;BYTE EscData[1];};
struct tagEMRGLSRECORD {EMR emr;DWORD cbData;BYTE Data[1];};
struct tagEMRROUNDRECT {EMR emr;RECTL rclBox;SIZEL szlCorner;};
struct tagEMRSETPIXELV {EMR emr;POINTL ptlPixel;COLORREF crColor;};
struct tagMONERRSTRUCT {UINT cb;UINT wLastError;DWORD dwTime;HANDLE hTask;};
struct tagNMRBAUTOSIZE {NMHDR hdr;BOOL fChanged;RECT rcTarget;RECT rcActual;};
struct tagQUERYCONTEXT {DWORD dwContext;CSPLATFORM Platform;LCID Locale;DWORD dwVersionHi;DWORD dwVersionLo;};
struct tagSOUNDSENTRYA {UINT cbSize;DWORD dwFlags;DWORD iFSTextEffect;DWORD iFSTextEffectMSec;DWORD iFSTextEffectColorBits;DWORD iFSGrafEffect;DWORD iFSGrafEffectMSec;DWORD iFSGrafEffectColor;DWORD iWindowsEffect;DWORD iWindowsEffectMSec;LPSTR lpszWindowsEffectDLL;DWORD iWindowsEffectOrdinal;};
typedef BOOL ( *GRAYSTRINGPROC)(HDC, LPARAM, int);
struct ISurrogateVtbl {HRESULT ( *QueryInterface)(ISurrogate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISurrogate *This);ULONG ( *Release)(ISurrogate *This);HRESULT ( *LoadDllServer)(ISurrogate *This,  IID * Clsid);HRESULT ( *FreeSurrogate)(ISurrogate *This);};
typedef BOOL ( *MCDENGINITFUNC)(SURFOBJ *pso, MCDRVGETENTRYPOINTSFUNC);
typedef ULONG ( *MCDRVCLEARFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, ULONG buffers);
typedef DWORD ( *PDX_GETIRQINFO)(PVOID, PVOID, PDDGETIRQINFO);
typedef LONG ( *PFNPROPSHEETUI)(PPROPSHEETUI_INFO pPSUIInfo, LPARAM lParam);
typedef ULONG ( *PWINDBG_DISASM)(ULONG_PTR *lpOffset, PCSTR lpBuffer, ULONG fShowEffectiveAddress);
struct _CERT_RDN_ATTR {LPSTR pszObjId;DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _D3DPICKRECORD {BYTE bOpcode;BYTE bPad;DWORD dwOffset;D3DVALUE dvZ;};
struct _DDHALMODEINFO {DWORD dwWidth;DWORD dwHeight;LONG lPitch;DWORD dwBPP;WORD wFlags;WORD wRefreshRate;DWORD dwRBitMask;DWORD dwGBitMask;DWORD dwBBitMask;DWORD dwAlphaBitMask;};
struct _DDMONITORINFO {WORD Manufacturer;WORD Product;DWORD SerialNumber;GUID DeviceIdentifier;int Mode640x480;int Mode800x600;int Mode1024x768;int Mode1280x1024;int Mode1600x1200;int ModeReserved1;int ModeReserved2;int ModeReserved3;};
struct _DD_UNLOCKDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;HRESULT ddRVal;void *Unlock;};
struct _DISK_GEOMETRY {LARGE_INTEGER Cylinders;MEDIA_TYPE MediaType;DWORD TracksPerCylinder;DWORD SectorsPerTrack;DWORD BytesPerSector;};
struct _DMUS_PORTCAPS {DWORD dwSize;DWORD dwFlags;GUID guidPort;DWORD dwClass;DWORD dwType;DWORD dwMemorySize;DWORD dwMaxChannelGroups;DWORD dwMaxVoices;DWORD dwMaxAudioChannels;DWORD dwEffectFlags;WCHAR wszDescription[128];};
struct _DSCBUFFERDESC {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;DWORD dwFXCount;LPDSCEFFECTDESC lpDSCFXDesc;};
struct _HEAPALIGNMENT {DWORD dwSize;DDSCAPS ddsCaps;DWORD dwReserved;SURFACEALIGNMENT ExecuteBuffer;SURFACEALIGNMENT Overlay;SURFACEALIGNMENT Texture;SURFACEALIGNMENT ZBuffer;SURFACEALIGNMENT AlphaBuffer;SURFACEALIGNMENT Offscreen;SURFACEALIGNMENT FlipTarget;};
struct _NETINFOSTRUCT {DWORD cbStructure;DWORD dwProviderVersion;DWORD dwStatus;DWORD dwCharacteristics;ULONG_PTR dwHandle;WORD wNetType;DWORD dwPrinters;DWORD dwDrives;};
struct _PORT_INFO_FFA {LPSTR pName;DWORD cbMonitorData;LPBYTE pMonitorData;};
struct _PROV_ENUMALGS {ALG_ID aiAlgid;DWORD dwBitLen;DWORD dwNameLen;CHAR szName[20];};
struct _TC_GEN_FILTER {USHORT AddressType;ULONG PatternSize;PVOID Pattern;PVOID Mask;};
struct _WCE_IAS_QUERY {u_char irdaDeviceID[4];char irdaClassName[61];char irdaAttribName[61];u_short irdaAttribType;union _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F irdaAttribute;};
struct _tagOLECMDTEXT {DWORD cmdtextf;ULONG cwActual;ULONG cwBuf;unsigned short rgwz[1];};
struct tagCONVCONTEXT {UINT cb;UINT wFlags;UINT wCountryID;int iCodePage;DWORD dwLangID;DWORD dwSecurity;SECURITY_QUALITY_OF_SERVICE qos;};
struct tagRASADPARAMS {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;LONG xDlg;LONG yDlg;};
struct tagRAWKEYBOARD {USHORT MakeCode;USHORT Flags;USHORT Reserved;USHORT VKey;UINT Message;ULONG ExtraInformation;};
struct tagSERIALKEYSA {UINT cbSize;DWORD dwFlags;LPSTR lpszActivePort;LPSTR lpszPort;UINT iBaudRate;UINT iPortState;UINT iActive;};
struct tagTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
struct IContinueVtbl {HRESULT ( *QueryInterface)(IContinue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContinue *This);ULONG ( *Release)(IContinue *This);HRESULT ( *FContinue)(IContinue *This);};
struct IInternetVtbl {HRESULT ( *QueryInterface)(IInternet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternet *This);ULONG ( *Release)(IInternet *This);};
typedef BOOL ( *LPWPUSETEVENT)(HANDLE hEvent, LPINT lpErrno);
typedef BOOL ( *MCDRVINFOFUNC)(MCDSURFACE *pMCDSurface, MCDDRIVERINFO *pMCDDriverInfo);
typedef ULONG ( *MCDRVPIXELMAP)(MCDSURFACE *pMcdSurface, MCDRC *pRc, ULONG mapType, ULONG mapSize, void *pMap);
typedef ULONG ( *MCDRVSYNCFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc);
typedef BOOL ( *NAMEENUMPROCA)(LPSTR, LPARAM);
typedef DWORD ( *PDX_ENABLEIRQ)(PVOID, PDDENABLEIRQINFO, PVOID);
typedef BOOL ( *PFN_DrvEndDoc)(SURFOBJ *pso, FLONG fl);
typedef ULONG ( *PFN_DrvEscape)(SURFOBJ *, ULONG, ULONG, PVOID, ULONG, PVOID);
typedef void ( *PFN_DrvNotify)(SURFOBJ *, ULONG, PVOID);
typedef DWORD  PM_QUERY_PROC(LPDWORD, LPVOID *, LPDWORD, LPDWORD);
struct _CMS_KEY_INFO {DWORD dwVersion;ALG_ID Algid;BYTE *pbOID;DWORD cbOID;};
struct _D3DLIGHTDATA {DWORD dwSize;LPD3DLIGHTINGELEMENT lpIn;DWORD dwInSize;LPD3DTLVERTEX lpOut;DWORD dwOutSize;};
struct _DISK_LOGGING {BYTE Function;PVOID BufferAddress;DWORD BufferSize;};
struct _DS3DLISTENER {DWORD dwSize;D3DVECTOR vPosition;D3DVECTOR vVelocity;D3DVECTOR vOrientFront;D3DVECTOR vOrientTop;D3DVALUE flDistanceFactor;D3DVALUE flRolloffFactor;D3DVALUE flDopplerFactor;};
struct _DSBUFFERDESC {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;GUID guid3DAlgorithm;};
struct _DSEFFECTDESC {DWORD dwSize;DWORD dwFlags;GUID guidDSFXClass;DWORD_PTR dwReserved1;DWORD_PTR dwReserved2;};
struct _EFS_KEY_INFO {DWORD dwVersion;ULONG Entropy;ALG_ID Algorithm;ULONG KeyLength;};
struct _NABTS_BUFFER {VBICODECFILTERING_SCANLINES ScanlinesRequested;LONGLONG PictureNumber;NABTS_BUFFER_LINE NabtsLines[11];};
struct _QOS_DIFFSERV {QOS_OBJECT_HDR ObjectHdr;ULONG DSFieldCount;UCHAR DiffservRule[1];};
struct _SEARCHMEMORY {ULONG64 SearchAddress;ULONG64 SearchLength;ULONG64 FoundAddress;ULONG PatternLength;PVOID Pattern;};
struct tagBIND_OPTS2 {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;DWORD dwTrackFlags;DWORD dwClassContext;LCID locale;COSERVERINFO *pServerInfo;};
struct tagCURSORINFO {DWORD cbSize;DWORD flags;HCURSOR hCursor;POINT ptScreenPos;};
struct tagDISPPARAMS {VARIANTARG *rgvarg;DISPID *rgdispidNamedArgs;UINT cArgs;UINT cNamedArgs;};
struct tagExtentInfo {ULONG cb;DWORD dwExtentMode;SIZEL sizelProposed;};
struct tagKEYBDINPUT {WORD wVk;WORD wScan;DWORD dwFlags;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagLOGBRUSH32 {UINT lbStyle;COLORREF lbColor;ULONG lbHatch;};
struct tagMOUSEINPUT {LONG dx;LONG dy;DWORD mouseData;DWORD dwFlags;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagNMDAYSTATE {NMHDR nmhdr;SYSTEMTIME stStart;int cDayState;LPMONTHDAYSTATE prgDayState;};
struct tagRASPPPLCPA {DWORD dwSize;BOOL fBundled;DWORD dwError;DWORD dwAuthenticationProtocol;DWORD dwAuthenticationData;DWORD dwEapTypeId;DWORD dwServerAuthenticationProtocol;DWORD dwServerAuthenticationData;DWORD dwServerEapTypeId;BOOL fMultilink;DWORD dwTerminateReason;DWORD dwServerTerminateReason;CHAR szReplyMessage[1024];DWORD dwOptions;DWORD dwServerOptions;};
struct tagRASPPPLCPW {DWORD dwSize;BOOL fBundled;DWORD dwError;DWORD dwAuthenticationProtocol;DWORD dwAuthenticationData;DWORD dwEapTypeId;DWORD dwServerAuthenticationProtocol;DWORD dwServerAuthenticationData;DWORD dwServerEapTypeId;BOOL fMultilink;DWORD dwTerminateReason;DWORD dwServerTerminateReason;WCHAR szReplyMessage[1024];DWORD dwOptions;DWORD dwServerOptions;};
struct tagRASPPPNBFA {DWORD dwSize;DWORD dwError;DWORD dwNetBiosError;CHAR szNetBiosError[17];CHAR szWorkstationName[17];BYTE bLana;};
struct tagRASPPPNBFW {DWORD dwSize;DWORD dwError;DWORD dwNetBiosError;WCHAR szNetBiosError[17];WCHAR szWorkstationName[17];BYTE bLana;};
struct tagSTGOPTIONS {USHORT usVersion;USHORT reserved;ULONG ulSectorSize; WCHAR *pwcsTemplateFile;};
struct IUnknownVtbl {HRESULT ( *QueryInterface)(IUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUnknown *This);ULONG ( *Release)(IUnknown *This);};
typedef INT ( *LPNSPSTARTUP)(LPGUID lpProviderId, LPNSP_ROUTINE lpnspRoutines);
typedef void ( *LPOCNDSCPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef DWORD QUERYHANDLER(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);
typedef ULONG ( *WMIDPREQUEST)(WMIDPREQUESTCODE RequestCode, PVOID RequestContext, ULONG *BufferSize, PVOID Buffer);
struct _FD_GLYPHSET {ULONG cjThis;FLONG flAccel;ULONG cGlyphsSupported;ULONG cRuns;WCRUN awcrun[1];};
struct _FILEPATHS_A {PCSTR Target;PCSTR Source;UINT Win32Error;DWORD Flags;};
struct _JOB_INFO_1A {DWORD JobId;LPSTR pPrinterName;LPSTR pMachineName;LPSTR pUserName;LPSTR pDocument;LPSTR pDatatype;LPSTR pStatus;DWORD Status;DWORD Priority;DWORD Position;DWORD TotalPages;DWORD PagesPrinted;SYSTEMTIME Submitted;};
struct _KSM_BDA_PIN {KSMETHOD Method;_KSM_BDA_PIN___E33ABE1885360AB30BA4739A3C7D59A2 __anonymous0;ULONG Reserved;};
struct _MCDFOGSTATE {MCDCOLOR fogColor;MCDFLOAT fogIndex;MCDFLOAT fogDensity;MCDFLOAT fogStart;MCDFLOAT fogEnd;ULONG fogMode;};
struct _OFNOTIFYEXA {NMHDR hdr;LPOPENFILENAMEA lpOFN;LPVOID psf;LPVOID pidl;};
struct _OFNOTIFYEXW {NMHDR hdr;LPOPENFILENAMEW lpOFN;LPVOID psf;LPVOID pidl;};
struct _PERBANDINFO {BOOL bRepeatThisBand;SIZEL szlBand;ULONG ulHorzRes;ULONG ulVertRes;};
struct _PORT_DATA_1 {WCHAR sztPortName[64];DWORD dwVersion;DWORD dwProtocol;DWORD cbSize;DWORD dwReserved;WCHAR sztHostAddress[49];WCHAR sztSNMPCommunity[33];DWORD dwDoubleSpool;WCHAR sztQueue[33];WCHAR sztIPAddress[16];BYTE Reserved[540];DWORD dwPortNumber;DWORD dwSNMPEnabled;DWORD dwSNMPDevIndex;};
struct _SHFILEINFOA {HICON hIcon;int iIcon;DWORD dwAttributes;CHAR szDisplayName[260];CHAR szTypeName[80];};
struct _SHFILEINFOW {HICON hIcon;int iIcon;DWORD dwAttributes;WCHAR szDisplayName[260];WCHAR szTypeName[80];};
struct _TC_GEN_FLOW {FLOWSPEC SendingFlowspec;FLOWSPEC ReceivingFlowspec;ULONG TcObjectsLength;QOS_OBJECT_HDR TcObjects[1];};
struct tagARRAYDESC {TYPEDESC tdescElem;USHORT cDims;SAFEARRAYBOUND rgbounds[1];};
struct tagLVKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
struct tagPOLYTEXTA {int x;int y;UINT n;LPCSTR lpstr;UINT uiFlags;RECT rcl;int *pdx;};
struct tagTCKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
struct tagTVKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
struct videohdr_tag {LPBYTE lpData;DWORD dwBufferLength;DWORD dwBytesUsed;DWORD dwTimeCaptured;DWORD_PTR dwUser;DWORD dwFlags;DWORD_PTR dwReserved[4];};
typedef int ( *BFFCALLBACK)(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);
typedef void  DRVCALLBACK(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
typedef int ( *EMFPLAYPROC)(HDC, INT, HANDLE);
typedef BOOL ( *IMCENUMPROC)(HIMC, LPARAM);
struct IObjMgrVtbl {HRESULT ( *QueryInterface)(IObjMgr *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IObjMgr *This);ULONG ( *Release)(IObjMgr *This);HRESULT ( *Append)(IObjMgr *This, IUnknown *punk);HRESULT ( *Remove)(IObjMgr *This, IUnknown *punk);};
typedef void ( *RASDIALFUNC)(UINT, enum tagRASCONNSTATE, DWORD);
typedef BOOL ( *WNDENUMPROC)(HWND, LPARAM);
struct _CERT_CHAIN {DWORD cCerts;PCERT_BLOB certs;CRYPT_KEY_PROV_INFO keyLocatorInfo;};
struct _DDCAPS_DX6 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsOldCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];DDSCAPS2 ddsCaps;};
struct _DDCAPS_DX7 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsOldCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];DDSCAPS2 ddsCaps;};
struct _DS3DVECTOR {_DS3DVECTOR___C7D9B5A2358E86AF5EA4461ED5800501 __anonymous0;_DS3DVECTOR___4C8BE1C25D9187060DF6575EC0B5A14F __anonymous1;_DS3DVECTOR___1C324E33BC6F74D1A02BB1B088C4590A __anonymous2;};
struct _IP_PATTERN {ULONG Reserved1;ULONG Reserved2;ULONG SrcAddr;ULONG DstAddr;union _IP_PATTERN___98CE335063E39B7D7DE4CA25FD6996AC S_un;UCHAR ProtocolId;UCHAR Reserved3[3];};
struct _MCDTEXTURE {MCDTEXTUREDATA *pMCDTextureData;void *pSurface;ULONG createFlags;ULONG_PTR textureKey;ULONG userFlags;void *pvUser;};
struct _OVERLAPPED {ULONG_PTR Internal;ULONG_PTR InternalHigh;_OVERLAPPED___742A73540840F318F86F9CEE3D494648 __anonymous0;HANDLE hEvent;};
struct _RAS_PORT_1 {HANDLE hPort;HANDLE hConnection;RAS_HARDWARE_CONDITION dwHardwareCondition;DWORD dwLineSpeed;DWORD dwBytesXmited;DWORD dwBytesRcved;DWORD dwFramesXmited;DWORD dwFramesRcved;DWORD dwCrcErr;DWORD dwTimeoutErr;DWORD dwAlignmentErr;DWORD dwHardwareOverrunErr;DWORD dwFramingErr;DWORD dwBufferOverrunErr;DWORD dwCompressionRatioIn;DWORD dwCompressionRatioOut;};
struct _TTGETTITLE {DWORD dwSize;UINT uTitleBitmap;UINT cch;WCHAR *pszTitle;};
struct _UNIDRVINFO {DWORD dwSize;DWORD flGenFlags;WORD wType;WORD fCaps;WORD wXRes;WORD wYRes;short sYAdjust;short sYMoved;WORD wPrivateData;short sShift;INVOC SelectFont;INVOC UnSelectFont;WORD wReserved[4];};
struct midihdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD_PTR dwUser;DWORD dwFlags;struct midihdr_tag *lpNext;DWORD_PTR reserved;DWORD dwOffset;DWORD_PTR dwReserved[8];};
struct tagEVENTMSG {UINT message;UINT paramL;UINT paramH;DWORD time;HWND hwnd;};
struct tagHHNTRACK {NMHDR hdr;PCSTR pszCurUrl;int idAction;HH_WINTYPE *phhWinType;};
struct tagJOYCAPSA {WORD wMid;WORD wPid;CHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;CHAR szRegKey[32];CHAR szOEMVxD[260];};
struct tagJOYCAPSW {WORD wMid;WORD wPid;WCHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;WCHAR szRegKey[32];WCHAR szOEMVxD[260];};
struct tagLOGBRUSH {UINT lbStyle;COLORREF lbColor;ULONG_PTR lbHatch;};
struct tagLOGFONTA {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;CHAR lfFaceName[32];};
struct tagLOGFONTW {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;WCHAR lfFaceName[32];};
struct tagTRANSMSG {UINT message;WPARAM wParam;LPARAM lParam;};
struct wavehdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD_PTR dwUser;DWORD dwFlags;DWORD dwLoops;struct wavehdr_tag *lpNext;DWORD_PTR reserved;};
typedef BOOL ( *RASADFUNCA)(LPSTR, LPSTR, struct tagRASADPARAMS *, LPDWORD);
struct _CTL_ENTRY {CRYPT_DATA_BLOB SubjectIdentifier;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _D3DLIGHT8 {D3DLIGHTTYPE Type;D3DCOLORVALUE Diffuse;D3DCOLORVALUE Specular;D3DCOLORVALUE Ambient;D3DVECTOR Position;D3DVECTOR Direction;float Range;float Falloff;float Attenuation0;float Attenuation1;float Attenuation2;float Theta;float Phi;};
struct _DROPFILES {DWORD pFiles;POINT pt;BOOL fNC;BOOL fWide;};
struct _GLYPHBITS {POINTL ptlOrigin;SIZEL sizlBitmap;BYTE aj[1];};
struct _HEAPALIAS {FLATPTR fpVidMem;LPVOID lpAlias;DWORD dwAliasSize;};
struct _HMAC_Info {ALG_ID HashAlgid;BYTE *pbInnerString;DWORD cbInnerString;BYTE *pbOuterString;DWORD cbOuterString;};
struct _LIGATURE1 {BYTE VirtualKey;WORD ModificationNumber;WCHAR wch[1];};
struct _LIGATURE2 {BYTE VirtualKey;WORD ModificationNumber;WCHAR wch[2];};
struct _LIGATURE3 {BYTE VirtualKey;WORD ModificationNumber;WCHAR wch[3];};
struct _LIGATURE4 {BYTE VirtualKey;WORD ModificationNumber;WCHAR wch[4];};
struct _LIGATURE5 {BYTE VirtualKey;WORD ModificationNumber;WCHAR wch[5];};
struct _MIB_IFROW {WCHAR wszName[256];DWORD dwIndex;DWORD dwType;DWORD dwMtu;DWORD dwSpeed;DWORD dwPhysAddrLen;BYTE bPhysAddr[8];DWORD dwAdminStatus;DWORD dwOperStatus;DWORD dwLastChange;DWORD dwInOctets;DWORD dwInUcastPkts;DWORD dwInNUcastPkts;DWORD dwInDiscards;DWORD dwInErrors;DWORD dwInUnknownProtos;DWORD dwOutOctets;DWORD dwOutUcastPkts;DWORD dwOutNUcastPkts;DWORD dwOutDiscards;DWORD dwOutErrors;DWORD dwOutQLen;DWORD dwDescrLen;BYTE bDescr[256];};
struct _NDIS_GUID {GUID Guid;_NDIS_GUID___AB53B9CEEC61ECDF1333D6EBB2604C4E __anonymous0;ULONG Size;ULONG Flags;};
struct _OFNOTIFYA {NMHDR hdr;LPOPENFILENAMEA lpOFN;LPSTR pszFile;};
struct _UNIFM_HDR {DWORD dwSize;DWORD dwVersion;ULONG ulDefaultCodepage;LONG lGlyphSetDataRCID;DWORD loUnidrvInfo;DWORD loIFIMetrics;DWORD loExtTextMetric;DWORD loWidthTable;DWORD loKernPair;DWORD dwReserved[2];};
struct _cpinfoexW {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;WCHAR CodePageName[260];};
struct tagEMRTEXT {POINTL ptlReference;DWORD nChars;DWORD offString;DWORD fOptions;RECTL rcl;DWORD offDx;};
struct tagPAGESET {ULONG cbStruct;BOOL fOddPages;BOOL fEvenPages;ULONG cPageRange;PAGERANGE rgPages[1];};
struct tagRASAMBA {DWORD dwSize;DWORD dwError;CHAR szNetBiosError[17];BYTE bLana;};
struct tagRASAMBW {DWORD dwSize;DWORD dwError;WCHAR szNetBiosError[17];BYTE bLana;};
struct value_entA {LPSTR ve_valuename;DWORD ve_valuelen;DWORD_PTR ve_valueptr;DWORD ve_type;};
typedef UINT ( *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);
struct _BRUSHOBJ {ULONG iSolidColor;PVOID pvRbrush;FLONG flColorType;};
struct _COMMPROP {WORD wPacketLength;WORD wPacketVersion;DWORD dwServiceMask;DWORD dwReserved1;DWORD dwMaxTxQueue;DWORD dwMaxRxQueue;DWORD dwMaxBaud;DWORD dwProvSubType;DWORD dwProvCapabilities;DWORD dwSettableParams;DWORD dwSettableBaud;WORD wSettableData;WORD wSettableStopParity;DWORD dwCurrentTxQueue;DWORD dwCurrentRxQueue;DWORD dwProvSpec1;DWORD dwProvSpec2;WCHAR wcProvChar[1];};
struct _D3DCAPS8 {D3DDEVTYPE DeviceType;UINT AdapterOrdinal;DWORD Caps;DWORD Caps2;DWORD Caps3;DWORD PresentationIntervals;DWORD CursorCaps;DWORD DevCaps;DWORD PrimitiveMiscCaps;DWORD RasterCaps;DWORD ZCmpCaps;DWORD SrcBlendCaps;DWORD DestBlendCaps;DWORD AlphaCmpCaps;DWORD ShadeCaps;DWORD TextureCaps;DWORD TextureFilterCaps;DWORD CubeTextureFilterCaps;DWORD VolumeTextureFilterCaps;DWORD TextureAddressCaps;DWORD VolumeTextureAddressCaps;DWORD LineCaps;DWORD MaxTextureWidth;DWORD MaxTextureHeight;DWORD MaxVolumeExtent;DWORD MaxTextureRepeat;DWORD MaxTextureAspectRatio;DWORD MaxAnisotropy;float MaxVertexW;float GuardBandLeft;float GuardBandTop;float GuardBandRight;float GuardBandBottom;float ExtentsAdjust;DWORD StencilCaps;DWORD FVFCaps;DWORD TextureOpCaps;DWORD MaxTextureBlendStages;DWORD MaxSimultaneousTextures;DWORD VertexProcessingCaps;DWORD MaxActiveLights;DWORD MaxUserClipPlanes;DWORD MaxVertexBlendMatrices;DWORD MaxVertexBlendMatrixIndex;float MaxPointSize;DWORD MaxPrimitiveCount;DWORD MaxVertexIndex;DWORD MaxStreams;DWORD MaxStreamStride;DWORD VertexShaderVersion;DWORD MaxVertexShaderConst;DWORD PixelShaderVersion;float MaxPixelShaderValue;};
struct _GLYPHPOS {HGLYPH hg;GLYPHDEF *pgdf;POINTL ptl;};
struct _ICONINFO {BOOL fIcon;DWORD xHotspot;DWORD yHotspot;HBITMAP hbmMask;HBITMAP hbmColor;};
struct _OFSTRUCT {BYTE cBytes;BYTE fFixedDisk;WORD nErrCode;WORD Reserved1;WORD Reserved2;CHAR szPathName[128];};
struct _PATHDATA {FLONG flags;ULONG count;POINTFIX *pptfx;};
struct _PHYSICAL {ULONGLONG Address;ULONG BufLen;UCHAR Buf[1];};
struct _TBBUTTON {int iBitmap;int idCommand;BYTE fsState;BYTE fsStyle;BYTE bReserved[2];DWORD_PTR dwData;INT_PTR iString;};
struct _USERDATA {DWORD dwSize;ULONG_PTR dwItemID;PSTR pKeyWordName;DWORD dwReserved[8];};
struct _XLATEOBJ {ULONG iUniq;FLONG flXlate;USHORT iSrcType;USHORT iDstType;ULONG cEntries;ULONG *pulXlate;};
struct tagBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;LPVOID bmBits;};
struct tagEMRARC {EMR emr;RECTL rclBox;POINTL ptlStart;POINTL ptlEnd;};
struct tagLOGPEN {UINT lopnStyle;POINT lopnWidth;COLORREF lopnColor;};
struct tagNMCHAR {NMHDR hdr;UINT ch;DWORD dwItemPrev;DWORD dwItemNext;};
typedef LRESULT ( *HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
struct _CLIPOBJ {ULONG iUniq;RECTL rclBounds;BYTE iDComplexity;BYTE iFComplexity;BYTE iMode;BYTE fjOptions;};
struct _CONTEXT {DWORD ContextFlags;DWORD Dr0;DWORD Dr1;DWORD Dr2;DWORD Dr3;DWORD Dr6;DWORD Dr7;FLOATING_SAVE_AREA FloatSave;DWORD SegGs;DWORD SegFs;DWORD SegEs;DWORD SegDs;DWORD Edi;DWORD Esi;DWORD Ebx;DWORD Edx;DWORD Ecx;DWORD Eax;DWORD Ebp;DWORD Eip;DWORD SegCs;DWORD EFlags;DWORD Esp;DWORD SegSs;BYTE ExtendedRegisters[512];};
struct _QCMINFO {HMENU hmenu;UINT indexMenu;UINT idCmdFirst;UINT idCmdLast; QCMINFO_IDMAP *pIdMap;};
struct tagNMHDR {HWND hwndFrom;UINT_PTR idFrom;UINT code;};
struct PROPPRG {WORD flPrg;WORD flPrgInit;CHAR achTitle[30];CHAR achCmdLine[128];CHAR achWorkDir[64];WORD wHotKey;CHAR achIconFile[80];WORD wIconIndex;DWORD dwEnhModeFlags;DWORD dwRealModeFlags;CHAR achOtherFile[80];CHAR achPIFFile[260];};
struct pvalueA {LPSTR pv_valuename;int pv_valuelen;LPVOID pv_value_context;DWORD pv_type;};
struct _DLSID {ULONG ulData1;USHORT usData2;USHORT usData3;BYTE abData4[8];};
struct _VMEML {struct _VMEML *next;FLATPTR ptr;DWORD size;BOOL bDiscardable;};
struct _VMEMR {struct _VMEMR *next;struct _VMEMR *prev;struct _VMEMR *pUp;struct _VMEMR *pDown;struct _VMEMR *pLeft;struct _VMEMR *pRight;FLATPTR ptr;DWORD size;DWORD x;DWORD y;DWORD cx;DWORD cy;DWORD flags;FLATPTR pBits;BOOL bDiscardable;};
struct _WCRUN {WCHAR wcLow;USHORT cGlyphs;HGLYPH *phg;};
struct _DCB {DWORD DCBlength;DWORD BaudRate;unsigned int fBinary : 1;unsigned int fParity : 1;unsigned int fOutxCtsFlow : 1;unsigned int fOutxDsrFlow : 1;unsigned int fDtrControl : 2;unsigned int fDsrSensitivity : 1;unsigned int fTXContinueOnXoff : 1;unsigned int fOutX : 1;unsigned int fInX : 1;unsigned int fErrorChar : 1;unsigned int fNull : 1;unsigned int fRtsControl : 2;unsigned int fAbortOnError : 1;unsigned int fDummy2 : 17;WORD wReserved;WORD XonLim;WORD XoffLim;BYTE ByteSize;BYTE Parity;BYTE StopBits;char XonChar;char XoffChar;char ErrorChar;char EofChar;char EvtChar;WORD wReserved1;};
struct _SID {BYTE Revision;BYTE SubAuthorityCount;SID_IDENTIFIER_AUTHORITY IdentifierAuthority;DWORD SubAuthority[1];};
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___723F4108713078BC94E60AB72DA19CAC {STORAGE_MEDIA_TYPE MediaType;DWORD MediaCharacteristics;DWORD CurrentBlockSize;STORAGE_BUS_TYPE BusType;union _DEVICE_MEDIA_INFO______723F4108713078BC94E60AB72DA19CAC___4F7870307D68C2FCA7F129B9E5696535 BusSpecificData;};
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___5843F6C8FAC72B709E58873D9E66E99B {HANDLE hIOPort;DWORD dwNumberOfBytesTransferred;DWORD_PTR dwCompletionKey;LPOVERLAPPED lpOverlapped;};
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 {DWORD Length;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD CheckSum;SHORT Number;BYTE Selection;};
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C {DWORD TagIndex;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 Misc;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 FcnAry;WORD TvIndex;};
struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];};
struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];};
union tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D {struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858 bmp;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7 wmf;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8 icon;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692 emf;};
typedef void ( *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(LPVOID pvCompletion, DWORD dwCompletionCode, LPCSTR pszUrl, LPSTR pszObjectOid, LPVOID pvObject);
typedef ULONG ( *PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64)(ULONG64 offset, LPCVOID lpBuffer, ULONG cb, PULONG lpcbBytesWritten);
typedef BOOL ( *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
typedef ULONG ( *PWINDBG_READ_PROCESS_MEMORY_ROUTINE64)(ULONG64 offset, PVOID lpBuffer, ULONG cb, PULONG lpcbBytesRead);
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {DWORD SecurityLimitFlags;HANDLE JobToken;PTOKEN_GROUPS SidsToDisable;PTOKEN_PRIVILEGES PrivilegesToDelete;PTOKEN_GROUPS RestrictedSids;};
struct IDirectMusicDownloadedInstrumentVtbl {HRESULT ( *QueryInterface)(IDirectMusicDownloadedInstrument *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicDownloadedInstrument *This);ULONG ( *Release)(IDirectMusicDownloadedInstrument *This);};
typedef BOOL ( *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL ( *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
typedef ULONG ( *PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE)(ULONG_PTR offset, LPCVOID lpBuffer, ULONG cb, PULONG lpcbBytesWritten);
struct __MIDL___MIDL_itf_shobjidl_0230_0001 {DWORD dwMask;POINTL ptMinSize;POINTL ptMaxSize;POINTL ptIntegral;POINTL ptActual;WCHAR wszTitle[256];DWORD dwModeFlags;COLORREF crBkgnd;};
typedef ULONG ( *PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY)(ULONGLONG address, PVOID buffer, ULONG length, PULONG byteswritten);
typedef ULONG ( *PWINDBG_READ_PROCESS_MEMORY_ROUTINE)(ULONG_PTR offset, PVOID lpBuffer, ULONG cb, PULONG lpcbBytesRead);
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
typedef BOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, void *pvStoreProvFindInfo, DWORD dwFlags);
typedef ULONG ( *PWINDBG_OLDKD_READ_PHYSICAL_MEMORY)(ULONGLONG address, PVOID buffer, ULONG count, PULONG bytesread);
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {CERT_ID RecipientId;CRYPT_DATA_BLOB EncryptedKey;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {LARGE_INTEGER PerProcessUserTimeLimit;LARGE_INTEGER PerJobUserTimeLimit;DWORD LimitFlags;SIZE_T MinimumWorkingSetSize;SIZE_T MaximumWorkingSetSize;DWORD ActiveProcessLimit;ULONG_PTR Affinity;DWORD PriorityClass;DWORD SchedulingClass;};
struct _05B1F1BDA3A085B0ABA09A777878EB7C {KSPROPERTY Property;KSPIN_DATAFLOW Direction;ULONG Index;ULONG PinType;ULONG RelatedPinIndex;KSPIN_MEDIUM Medium;};
struct _0606DB5FE2099CCDC829F33B29607B55 {KSIDENTIFIER Identifier;ULONG Size;BOOL Looped;ULONG LoopPoint;BOOL InROM;KSDATAFORMAT Format;};
struct _195B5ED187AD0EF03C07D6DC4096CC78 {DWORD dwFlags;LPARAM lParam;LONG ( *Status)(LPARAM lParam, UINT message, LONG l);};
struct _22BDD2D628B0B561C5A9CA42290FE551 {DWORD bV4Size;LONG bV4Width;LONG bV4Height;WORD bV4Planes;WORD bV4BitCount;DWORD bV4V4Compression;DWORD bV4SizeImage;LONG bV4XPelsPerMeter;LONG bV4YPelsPerMeter;DWORD bV4ClrUsed;DWORD bV4ClrImportant;DWORD bV4RedMask;DWORD bV4GreenMask;DWORD bV4BlueMask;DWORD bV4AlphaMask;DWORD bV4CSType;CIEXYZTRIPLE bV4Endpoints;DWORD bV4GammaRed;DWORD bV4GammaGreen;DWORD bV4GammaBlue;};
struct _2B6042393D1A02E0AE9B16B44F784AC7 {DWORD bV5Size;LONG bV5Width;LONG bV5Height;WORD bV5Planes;WORD bV5BitCount;DWORD bV5Compression;DWORD bV5SizeImage;LONG bV5XPelsPerMeter;LONG bV5YPelsPerMeter;DWORD bV5ClrUsed;DWORD bV5ClrImportant;DWORD bV5RedMask;DWORD bV5GreenMask;DWORD bV5BlueMask;DWORD bV5AlphaMask;DWORD bV5CSType;CIEXYZTRIPLE bV5Endpoints;DWORD bV5GammaRed;DWORD bV5GammaGreen;DWORD bV5GammaBlue;DWORD bV5Intent;DWORD bV5ProfileData;DWORD bV5ProfileSize;DWORD bV5Reserved;};
struct _41B57DF5617420B0F03CF260623C53E1 {DWORD dwSize;LPDDHAL_SETINFO lpSetInfo;LPDDHAL_VIDMEMALLOC lpVidMemAlloc;LPDDHAL_VIDMEMFREE lpVidMemFree;};
struct _433BAB6AAAB02EEB6CF36ABDE1A4217C {KSDS3D_HRTF_FILTER_METHOD FilterMethod;KSDS3D_HRTF_COEFF_FORMAT CoeffFormat;KSDS3D_HRTF_FILTER_VERSION Version;ULONG Reserved;};
struct _48F34F6E58318E719B3C17D5DF8D3416 {WAVEFORMATEX Format;union _48F34F6E58318E719B3C17D5DF8D3416___BF32DB6F8F7ADBF71F90C18AFCE2FD9C Samples;DWORD dwChannelMask;GUID SubFormat;};
struct _75A13DFB4406EBA41013AD06E502A0EB {BOOLEAN PowerButtonPresent;BOOLEAN SleepButtonPresent;BOOLEAN LidPresent;BOOLEAN SystemS1;BOOLEAN SystemS2;BOOLEAN SystemS3;BOOLEAN SystemS4;BOOLEAN SystemS5;BOOLEAN HiberFilePresent;BOOLEAN FullWake;BOOLEAN VideoDimPresent;BOOLEAN ApmPresent;BOOLEAN UpsPresent;BOOLEAN ThermalControl;BOOLEAN ProcessorThrottle;BYTE ProcessorMinThrottle;BYTE ProcessorMaxThrottle;BYTE spare2[4];BOOLEAN DiskSpinDown;BYTE spare3[8];BOOLEAN SystemBatteriesPresent;BOOLEAN BatteriesAreShortTerm;BATTERY_REPORTING_SCALE BatteryScale[3];SYSTEM_POWER_STATE AcOnLineWake;SYSTEM_POWER_STATE SoftLidWake;SYSTEM_POWER_STATE RtcWake;SYSTEM_POWER_STATE MinDeviceWakeState;SYSTEM_POWER_STATE DefaultLowLatencyWake;};
struct _7DB559BE1DE343E17A8A94B6F2E38031 {LONGLONG PresentationStart;LONGLONG Duration;KSPIN_INTERFACE Interface;LONG Rate;ULONG Flags;};
struct _84B866C76402598318C95E59033217C4 {DWORD dwMask;DWORD dwStateMask;DWORD dwState;COLORREF crBkgnd;COLORREF crBtnLt;COLORREF crBtnDk;WORD wViewMode;WORD wAlign;IShellFolder *psf;LPITEMIDLIST pidl;};
struct _87CE1B284ED7C4D9787DE2C17B5E3229 {ULONG Size;ULONG TypeSpecificFlags;KSTIME PresentationTime;LONGLONG Duration;ULONG FrameExtent;ULONG DataUsed;PVOID Data;ULONG OptionsFlags;};
struct _9D580AF0AEFB1291AC1A38F1BACA0CDC {NMHDR hdr;DWORD dwMask;int idCommand;DWORD_PTR lParam;int iImage;LPSTR pszText;int cchText;};
struct _9E1ED747B9CD39E7270D6384935529E0 {DS3DVECTOR Position;DS3DVECTOR Velocity;ULONG InsideConeAngle;ULONG OutsideConeAngle;DS3DVECTOR ConeOrientation;LONG ConeOutsideVolume;FLOAT MinDistance;FLOAT MaxDistance;ULONG Mode;};
struct _BE0BDAB4463CDAC89A1FD071673BF7FC {SIZE sizeDragImage;POINT ptOffset;HBITMAP hbmpDragImage;COLORREF crColorKey;};
struct _C1C3EF408C46606406ABFE21B3E99DE8 {KSPROPERTY Property;ULONG StreamIndex;ULONG RangeIndex;SIZE Dimensions;LONGLONG CurrentActualFrameRate;LONGLONG CurrentMaxAvailableFrameRate;};
struct _D59F8FB060D1A4257ECDF2860F49B6AF {u_long nTXDataBytes;u_long nRXDataBytes;LM_BAUD_RATE nBaudRate;u_long thresholdTime;u_long discTime;u_short nMSLinkTurn;u_char nTXPackets;u_char nRXPackets;};
struct _D5B338A135013580D3FC38360357E666 {DWORD dwSize;DWORD dwMask;SHELLVIEWID *pvid;LPSTR pszWebViewTemplate;DWORD cchWebViewTemplate;LPSTR pszWebViewTemplateVersion;LPSTR pszInfoTip;DWORD cchInfoTip;CLSID *pclsid;DWORD dwFlags;LPSTR pszIconFile;DWORD cchIconFile;int iIconIndex;LPSTR pszLogo;DWORD cchLogo;};
struct _DC79A6464562D2DC48FEEE8D5793116D {LPCSTR szReader;LPVOID pvUserData;DWORD dwCurrentState;DWORD dwEventState;DWORD cbAtr;BYTE rgbAtr[36];};
struct _EEDA301819F8EA8D15C0ADB3D7583498 {GUID MemoryType;GUID BusType;ULONG MemoryFlags;ULONG BusFlags;ULONG Flags;ULONG Frames;ULONG FileAlignment;ULONG MemoryTypeWeight;KS_FRAMING_RANGE PhysicalRange;KS_FRAMING_RANGE_WEIGHTED FramingRange;};
struct _F8C02B799BC5153138A3AC7C0BDE9C8E {UINT cbSize;HDESK hdesk;HWND hwnd;LUID luid;};
struct _FB10B385A80E8C43E2FAF14F8CAB4B13 {FOURCC fccType;FOURCC fccHandler;DWORD dwFlags;WORD wPriority;WORD wLanguage;DWORD dwInitialFrames;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;RECT rcFrame;};
typedef BOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;DWORD dwRecipientIndex;DWORD dwRecipientEncryptedKeyIndex;CRYPT_BIT_BLOB OriginatorPublicKey;};
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
typedef PCCERT_CONTEXT ( *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore);
struct _KERB_PURGE_TKT_CACHE_EX_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;LUID LogonId;ULONG Flags;KERB_TICKET_CACHE_INFO_EX TicketTemplate;};
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {DWORD cbSize;LPCSTR pszUsageIdentifier;DWORD dwKeySpec;DWORD dwAcquirePrivateKeyFlags;DWORD cIssuer;CERT_NAME_BLOB *rgIssuer;PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;void *pvFindArg;};
struct _CREDENTIAL_TARGET_INFORMATIONA {LPSTR TargetName;LPSTR NetbiosServerName;LPSTR DnsServerName;LPSTR NetbiosDomainName;LPSTR DnsDomainName;LPSTR DnsTreeName;LPSTR PackageName;ULONG Flags;DWORD CredTypeCount;LPDWORD CredTypes;};
struct _TRUSTED_DOMAIN_INFORMATION_EX2 {LSA_UNICODE_STRING Name;LSA_UNICODE_STRING FlatName;PSID Sid;ULONG TrustDirection;ULONG TrustType;ULONG TrustAttributes;ULONG ForestTrustLength;PUCHAR ForestTrustInfo;};
struct _USER_MARSHAL_ROUTINE_QUADRUPLE {USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;USER_MARSHAL_FREEING_ROUTINE pfnFree;};
typedef HRESULT ( *LPFNACCESSIBLEOBJECTFROMWINDOW)(HWND hwnd, DWORD dwId,  IID * riid, void **ppvObject);
typedef int ( *LPWPUCOMPLETEOVERLAPPEDREQUEST)(SOCKET s, LPWSAOVERLAPPED lpOverlapped, DWORD dwError, DWORD cbTransferred, LPINT lpErrno);
typedef ULONG ( *MCDRVUPDATETEXTUREPRIORITYFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDTEXTURE *pTex);
typedef BOOL ( *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, HCRYPTPROV *phCryptProv, LPVOID pVoidResolveFunc);
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _CMSG_KEY_TRANS_RECIPIENT_INFO {DWORD dwVersion;CERT_ID RecipientId;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;};
struct _CRYPT_TIME_STAMP_REQUEST_INFO {LPSTR pszTimeStampAlgorithm;LPSTR pszContentType;CRYPT_OBJID_BLOB Content;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _D3DDEVICE_CREATION_PARAMETERS {UINT AdapterOrdinal;D3DDEVTYPE DeviceType;HWND hFocusWindow;DWORD BehaviorFlags;};
struct _SP_DEVINFO_LIST_DETAIL_DATA_A {DWORD cbSize;GUID ClassGuid;HANDLE RemoteMachineHandle;CHAR RemoteMachineName[263];};
struct _SP_DEVINFO_LIST_DETAIL_DATA_W {DWORD cbSize;GUID ClassGuid;HANDLE RemoteMachineHandle;WCHAR RemoteMachineName[263];};
typedef HRESULT ( *LPFNCREATESTDACCESSIBLEOBJECT)(HWND hwnd, LONG idObject,  IID * riid, void **ppvObject);
typedef ULONG ( *MCDRVUPDATETEXTUREPALETTEFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDTEXTURE *pTex, ULONG start, ULONG numEntries);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
struct _DDHAL_ADDATTACHEDSURFACEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;LPDDRAWI_DDRAWSURFACE_LCL lpSurfAttached;HRESULT ddRVal;LPDDHALSURFCB_ADDATTACHEDSURFACE AddAttachedSurface;};
struct _DDHAL_GETVPORTFLIPSTATUSDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;FLATPTR fpSurface;HRESULT ddRVal;LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;};
struct _KERB_ADD_CREDENTIALS_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;UNICODE_STRING UserName;UNICODE_STRING DomainName;UNICODE_STRING Password;LUID LogonId;ULONG Flags;};
struct _NDR_CS_SIZE_CONVERT_ROUTINES {CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;};
typedef LONG ( *MCDRVDESCRIBEPIXELFORMATFUNC)(MCDSURFACE *pMCDSurface, LONG iPixelFormat, ULONG nBytes, MCDPIXELFORMAT *pMCDPixelFmt, ULONG flags);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext);
typedef BOOL ( *PFN_DrvIcmSetDeviceGammaRamp)(DHPDEV, ULONG, LPVOID);
struct _CERT_BASIC_CONSTRAINTS_INFO {CRYPT_BIT_BLOB SubjectType;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;DWORD cSubtreesConstraint;CERT_NAME_BLOB *rgSubtreesConstraint;};
struct _DD_GETAVAILDRIVERMEMORYDATA {PDD_DIRECTDRAW_GLOBAL lpDD;DDSCAPS DDSCaps;DWORD dwTotal;DWORD dwFree;HRESULT ddRVal;void *GetAvailDriverMemory;};
struct _KERB_REFRESH_SCCRED_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;UNICODE_STRING CredentialBlob;LUID LogonId;ULONG Flags;};
struct _TOKEN_GROUPS_AND_PRIVILEGES {DWORD SidCount;DWORD SidLength;PSID_AND_ATTRIBUTES Sids;DWORD RestrictedSidCount;DWORD RestrictedSidLength;PSID_AND_ATTRIBUTES RestrictedSids;DWORD PrivilegeCount;DWORD PrivilegeLength;PLUID_AND_ATTRIBUTES Privileges;LUID AuthenticationId;};
struct tagACTCTX_SECTION_KEYED_DATA {ULONG cbSize;ULONG ulDataFormatVersion;PVOID lpData;ULONG ulLength;PVOID lpSectionGlobalData;ULONG ulSectionGlobalDataLength;PVOID lpSectionBase;ULONG ulSectionTotalLength;HANDLE hActCtx;ULONG ulAssemblyRosterIndex;ULONG ulFlags;ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;};
struct IUserEventTimerCallbackVtbl {HRESULT ( *QueryInterface)(IUserEventTimerCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUserEventTimerCallback *This);ULONG ( *Release)(IUserEventTimerCallback *This);HRESULT ( *UserEventTimerProc)(IUserEventTimerCallback *This, ULONG uUserEventTimerID, UINT uTimerElapse);};
typedef ULONG ( *MCDRVUPDATETEXTURESTATEFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDTEXTURE *pTex);
typedef LONG ( *PFN_DrvQueryTrueTypeSection)(ULONG, ULONG, ULONG, HANDLE *, PTRDIFF *);
typedef void ( *PWINDBG_EXTENSION_ROUTINE64)(HANDLE hCurrentProcess, HANDLE hCurrentThread, ULONG64 dwCurrentPc, ULONG dwProcessor, PCSTR lpArgumentString);
struct _CMSG_ENVELOPED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD cRecipients;PCERT_INFO *rgpRecipients;};
struct _D3DHAL_SETRENDERTARGETDATA {ULONG_PTR dwhContext;_D3DHAL_CONTEXTCREATEDATA___F97B1EB6D3AC6DA1707638C5E5848180 __anonymous0;_D3DHAL_CONTEXTCREATEDATA___AA7F4F4835B84F00D17421C4D2A8A049 __anonymous2;HRESULT ddrval;};
struct _DDHAL_FLIPTOGDISURFACEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;DWORD dwToGDI;DWORD dwReserved;HRESULT ddRVal;LPDDHAL_FLIPTOGDISURFACE FlipToGDISurface;};
struct _DDHAL_SETEXCLUSIVEMODEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;DWORD dwEnterExcl;DWORD dwReserved;HRESULT ddRVal;LPDDHAL_SETEXCLUSIVEMODE SetExclusiveMode;};
struct _MSV1_0_PASSTHROUGH_REQUEST {MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;UNICODE_STRING DomainName;UNICODE_STRING PackageName;ULONG DataLength;PUCHAR LogonData;ULONG Pad;};
typedef int ( *LPWPUQUERYBLOCKINGCALLBACK)(DWORD dwCatalogEntryId, LPBLOCKINGCALLBACK *lplpfnCallback, PDWORD_PTR lpdwContext, LPINT lpErrno);
typedef LONG ( *PFN_DrvDescribePixelFormat)(DHPDEV, LONG, ULONG, PIXELFORMATDESCRIPTOR *);
struct _ACCESS_ALLOWED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _CHANGER_ELEMENT_STATUS_EX {CHANGER_ELEMENT Element;CHANGER_ELEMENT SrcElementAddress;DWORD Flags;DWORD ExceptionCode;BYTE TargetId;BYTE Lun;WORD Reserved;BYTE PrimaryVolumeID[36];BYTE AlternateVolumeID[36];BYTE VendorIdentification[8];BYTE ProductIdentification[16];BYTE SerialNumber[32];};
struct _D3DHAL_DRAWPRIMITIVESDATA {ULONG_PTR dwhContext;DWORD dwFlags;LPVOID lpvData;DWORD dwFVFControl;HRESULT ddrval;};
struct _DDHAL_CREATESURFACEEXDATA {DWORD dwFlags;LPDDRAWI_DIRECTDRAW_LCL lpDDLcl;LPDDRAWI_DDRAWSURFACE_LCL lpDDSLcl;HRESULT ddRVal;};
struct _DD_SETOVERLAYPOSITIONDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSrcSurface;PDD_SURFACE_LOCAL lpDDDestSurface;LONG lXPos;LONG lYPos;HRESULT ddRVal;void *SetOverlayPosition;};
struct _KERB_TICKET_CACHE_INFO_EX {UNICODE_STRING ClientName;UNICODE_STRING ClientRealm;UNICODE_STRING ServerName;UNICODE_STRING ServerRealm;LARGE_INTEGER StartTime;LARGE_INTEGER EndTime;LARGE_INTEGER RenewTime;LONG EncryptionType;ULONG TicketFlags;};
struct _SHChangeUpdateImageIDList {USHORT cb;int iIconIndex;int iCurIndex;UINT uFlags;DWORD dwProcessID;WCHAR szName[260];USHORT cbZero;};
struct IEnumConnectionPointsVtbl {HRESULT ( *QueryInterface)(IEnumConnectionPoints *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumConnectionPoints *This);ULONG ( *Release)(IEnumConnectionPoints *This);HRESULT ( *Next)(IEnumConnectionPoints *This, ULONG cConnections, LPCONNECTIONPOINT *ppCP, ULONG *pcFetched);HRESULT ( *Skip)(IEnumConnectionPoints *This, ULONG cConnections);HRESULT ( *Reset)(IEnumConnectionPoints *This);HRESULT ( *Clone)(IEnumConnectionPoints *This, IEnumConnectionPoints **ppEnum);};
struct IGlobalInterfaceTableVtbl {HRESULT ( *QueryInterface)(IGlobalInterfaceTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGlobalInterfaceTable *This);ULONG ( *Release)(IGlobalInterfaceTable *This);HRESULT ( *RegisterInterfaceInGlobal)(IGlobalInterfaceTable *This, IUnknown *pUnk,  IID * riid, DWORD *pdwCookie);HRESULT ( *RevokeInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie);HRESULT ( *GetInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie,  IID * riid, void **ppv);};
struct ISpecifyPropertyPagesVtbl {HRESULT ( *QueryInterface)(ISpecifyPropertyPages *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISpecifyPropertyPages *This);ULONG ( *Release)(ISpecifyPropertyPages *This);HRESULT ( *GetPages)(ISpecifyPropertyPages *This, CAUUID *pPages);};
struct ISynchronizeContainerVtbl {HRESULT ( *QueryInterface)(ISynchronizeContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronizeContainer *This);ULONG ( *Release)(ISynchronizeContainer *This);HRESULT ( *AddSynchronize)(ISynchronizeContainer *This, ISynchronize *pSync);HRESULT ( *WaitMultiple)(ISynchronizeContainer *This, DWORD dwFlags, DWORD dwTimeOut, ISynchronize **ppSync);};
struct ITimeAndNoticeControlVtbl {HRESULT ( *QueryInterface)(ITimeAndNoticeControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITimeAndNoticeControl *This);ULONG ( *Release)(ITimeAndNoticeControl *This);HRESULT ( *SuppressChanges)(ITimeAndNoticeControl *This, DWORD res1, DWORD res2);};
struct IWbemProviderInitSinkVtbl {HRESULT ( *QueryInterface)(IWbemProviderInitSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemProviderInitSink *This);ULONG ( *Release)(IWbemProviderInitSink *This);HRESULT ( *SetStatus)(IWbemProviderInitSink *This, LONG lStatus, LONG lFlags);};
typedef HRESULT ( *LPD3DENUMDEVICESCALLBACK7)(LPSTR lpDeviceDescription, LPSTR lpDeviceName, LPD3DDEVICEDESC7, LPVOID);
typedef HRESULT ( *LPDDENUMSURFACESCALLBACK2)(LPDIRECTDRAWSURFACE4, LPDDSURFACEDESC2, LPVOID);
typedef HRESULT ( *LPDDENUMSURFACESCALLBACK7)(LPDIRECTDRAWSURFACE7, LPDDSURFACEDESC2, LPVOID);
typedef HBITMAP ( *PFN_DrvCreateDeviceBitmap)(DHPDEV, SIZEL, ULONG);
struct _ACCESS_DENIED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _CERT_REVOCATION_CRL_INFO {DWORD cbSize;PCCRL_CONTEXT pBaseCrlContext;PCCRL_CONTEXT pDeltaCrlContext;PCRL_ENTRY pCrlEntry;BOOL fDeltaCrlEntry;};
struct _D3DHAL_TEXTURECREATEDATA {ULONG_PTR dwhContext;LPDIRECTDRAWSURFACE lpDDS;DWORD dwHandle;HRESULT ddrval;};
struct _DDHAL_CANCREATEVPORTDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDVIDEOPORTDESC lpDDVideoPortDesc;HRESULT ddRVal;LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;};
struct _DDHAL_DESTROYPALETTEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;HRESULT ddRVal;LPDDHALPALCB_DESTROYPALETTE DestroyPalette;};
struct _DDHAL_DESTROYSURFACEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;HRESULT ddRVal;LPDDHALSURFCB_DESTROYSURFACE DestroySurface;};
struct _DDHAL_GETDRIVERSTATEDATA {DWORD dwFlags;_DDHAL_GETDRIVERSTATEDATA___55B688470741D627FF8277FCA6824CAA __anonymous0;LPDWORD lpdwStates;DWORD dwLength;HRESULT ddRVal;};
struct _REPARSE_GUID_DATA_BUFFER {DWORD ReparseTag;WORD ReparseDataLength;WORD Reserved;GUID ReparseGuid;struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 GenericReparseBuffer;};
struct _SP_DRVINFO_DETAIL_DATA_A {DWORD cbSize;FILETIME InfDate;DWORD CompatIDsOffset;DWORD CompatIDsLength;ULONG_PTR Reserved;CHAR SectionName[256];CHAR InfFileName[260];CHAR DrvDescription[256];CHAR HardwareID[1];};
struct _SP_DRVINFO_DETAIL_DATA_W {DWORD cbSize;FILETIME InfDate;DWORD CompatIDsOffset;DWORD CompatIDsLength;ULONG_PTR Reserved;WCHAR SectionName[256];WCHAR InfFileName[260];WCHAR DrvDescription[256];WCHAR HardwareID[1];};
struct tagMCI_ANIM_WINDOW_PARMSA {DWORD_PTR dwCallback;HWND hWnd;UINT nCmdShow;LPCSTR lpstrText;};
struct tagMCI_OVLY_WINDOW_PARMSA {DWORD_PTR dwCallback;HWND hWnd;UINT nCmdShow;LPCSTR lpstrText;};
typedef UINT ( *ACMFILTERCHOOSEHOOKPROCA)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT ( *ACMFILTERCHOOSEHOOKPROCW)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT ( *ACMFORMATCHOOSEHOOKPROCA)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT ( *ACMFORMATCHOOSEHOOKPROCW)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
struct IBrowserFrameOptionsVtbl {HRESULT ( *QueryInterface)(IBrowserFrameOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBrowserFrameOptions *This);ULONG ( *Release)(IBrowserFrameOptions *This);HRESULT ( *GetFrameOptions)(IBrowserFrameOptions *This, BROWSERFRAMEOPTIONS dwMask, BROWSERFRAMEOPTIONS *pdwOptions);};
struct IEnumShellImageStoreVtbl {HRESULT ( *QueryInterface)(IEnumShellImageStore *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IEnumShellImageStore *This);ULONG ( *Release)(IEnumShellImageStore *This);HRESULT ( *Reset)(IEnumShellImageStore *This);HRESULT ( *Next)(IEnumShellImageStore *This, ULONG celt, PENUMSHELLIMAGESTOREDATA *prgElt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumShellImageStore *This, ULONG celt);HRESULT ( *Clone)(IEnumShellImageStore *This, IEnumShellImageStore **ppEnum);};
typedef HRESULT ( *LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);
typedef INT ( *LPNSPGETSERVICECLASSINFO)(LPGUID lpProviderId, LPDWORD lpdwBufSize, LPWSASERVICECLASSINFOW lpServiceClassInfo);
typedef LONG ( *MCDRVSETLAYERPALETTEFUNC)(MCDSURFACE *pMCDSurface, LONG iLayerPlane, BOOL bRealize, LONG cEntries, COLORREF *pcr);
typedef BOOL ( *PFN_IMPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD dwFlags, void *pvAuxInfo);
struct _CMSG_SIGNED_ENCODE_INFO {DWORD cbSize;DWORD cSigners;PCMSG_SIGNER_ENCODE_INFO rgSigners;DWORD cCertEncoded;PCERT_BLOB rgCertEncoded;DWORD cCrlEncoded;PCRL_BLOB rgCrlEncoded;};
struct _DDHAL_DESTROYMOCOMPDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;HRESULT ddRVal;LPDDHALMOCOMPCB_DESTROY DestroyMoComp;};
struct _DDRAWI_DDMOTIONCOMP_INT {LPVOID lpVtbl;LPDDRAWI_DDMOTIONCOMP_LCL lpLcl;LPDDRAWI_DDMOTIONCOMP_INT lpLink;DWORD dwIntRefCnt;};
struct _DDRAWI_DDRAWCLIPPER_GBL {DWORD dwRefCnt;DWORD dwFlags;LPDDRAWI_DIRECTDRAW_GBL lpDD;DWORD dwProcessId;ULONG_PTR dwReserved1;ULONG_PTR hWnd;LPRGNDATA lpStaticClipList;};
struct _DDRAWI_DDRAWCLIPPER_INT {LPVOID lpVtbl;LPDDRAWI_DDRAWCLIPPER_LCL lpLcl;LPDDRAWI_DDRAWCLIPPER_INT lpLink;DWORD dwIntRefCnt;};
struct _DDRAWI_DDRAWPALETTE_GBL {DWORD dwRefCnt;DWORD dwFlags;LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;DWORD dwProcessId;LPPALETTEENTRY lpColorTable;_DDRAWI_DDRAWPALETTE_GBL___87CE64BF97EC25E039FC3DE56880F238 __anonymous0;DWORD dwDriverReserved;DWORD dwContentsStamp;DWORD dwSaveStamp;DWORD dwHandle;};
struct _DDRAWI_DDRAWPALETTE_INT {LPVOID lpVtbl;LPDDRAWI_DDRAWPALETTE_LCL lpLcl;LPDDRAWI_DDRAWPALETTE_INT lpLink;DWORD dwIntRefCnt;};
struct _DDRAWI_DDRAWPALETTE_LCL {DWORD lpPalMore;LPDDRAWI_DDRAWPALETTE_GBL lpGbl;ULONG_PTR dwUnused0;DWORD dwLocalRefCnt;IUnknown *pUnkOuter;LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;ULONG_PTR dwReserved1;ULONG_PTR dwDDRAWReserved1;ULONG_PTR dwDDRAWReserved2;ULONG_PTR dwDDRAWReserved3;};
struct _DDRAWI_DDRAWSURFACE_INT {LPVOID lpVtbl;LPDDRAWI_DDRAWSURFACE_LCL lpLcl;LPDDRAWI_DDRAWSURFACE_INT lpLink;DWORD dwIntRefCnt;};
struct _DD_CANCREATESURFACEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACEDESC lpDDSurfaceDesc;DWORD bIsDifferentPixelFormat;HRESULT ddRVal;void *CanCreateSurface;};
struct _DD_GETHEAPALIGNMENTDATA {ULONG_PTR dwInstance;DWORD dwHeap;HRESULT ddRVal;void *GetHeapAlignment;HEAPALIGNMENT Alignment;};
struct _DD_WAITFORVPORTSYNCDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwFlags;DWORD dwLine;DWORD dwTimeOut;HRESULT ddRVal;void *UpdateVideoPort;};
struct _LSA_FOREST_TRUST_RECORD {ULONG Flags;LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;LARGE_INTEGER Time;union _LSA_FOREST_TRUST_RECORD___C7B7650F067485BDF6AE9750858A9CDD ForestTrustData;};
struct _SP_NEWDEVICEWIZARD_DATA {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD Flags;HPROPSHEETPAGE DynamicPages[20];DWORD NumDynamicPages;HWND hwndWizardDlg;};
struct _SYSTEM_ALARM_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _SYSTEM_AUDIT_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct IEnumSTATPROPSETSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATPROPSETSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATPROPSETSTG *This);ULONG ( *Release)(IEnumSTATPROPSETSTG *This);HRESULT ( *Next)(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATPROPSETSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATPROPSETSTG *This);HRESULT ( *Clone)(IEnumSTATPROPSETSTG *This, IEnumSTATPROPSETSTG **ppenum);};
struct IFileSystemBindDataVtbl {HRESULT ( *QueryInterface)(IFileSystemBindData *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileSystemBindData *This);ULONG ( *Release)(IFileSystemBindData *This);HRESULT ( *SetFindData)(IFileSystemBindData *This,  WIN32_FIND_DATAW *pfd);HRESULT ( *GetFindData)(IFileSystemBindData *This, WIN32_FIND_DATAW *pfd);};
struct IProcessInitControlVtbl {HRESULT ( *QueryInterface)(IProcessInitControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProcessInitControl *This);ULONG ( *Release)(IProcessInitControl *This);HRESULT ( *ResetInitializerTimeout)(IProcessInitControl *This, DWORD dwSecondsRemaining);};
struct IPropertyNotifySinkVtbl {HRESULT ( *QueryInterface)(IPropertyNotifySink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyNotifySink *This);ULONG ( *Release)(IPropertyNotifySink *This);HRESULT ( *OnChanged)(IPropertyNotifySink *This, DISPID dispID);HRESULT ( *OnRequestEdit)(IPropertyNotifySink *This, DISPID dispID);};
struct IRpcSyntaxNegotiateVtbl {HRESULT ( *QueryInterface)(IRpcSyntaxNegotiate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcSyntaxNegotiate *This);ULONG ( *Release)(IRpcSyntaxNegotiate *This);HRESULT ( *NegotiateSyntax)(IRpcSyntaxNegotiate *This, RPCOLEMESSAGE *pMsg);};
struct IThumbnailExtractorVtbl {HRESULT ( *QueryInterface)(IThumbnailExtractor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IThumbnailExtractor *This);ULONG ( *Release)(IThumbnailExtractor *This);HRESULT ( *ExtractThumbnail)(IThumbnailExtractor *This, IStorage *pStg, ULONG ulLength, ULONG ulHeight, ULONG *pulOutputLength, ULONG *pulOutputHeight, HBITMAP *phOutputBitmap);HRESULT ( *OnFileUpdated)(IThumbnailExtractor *This, IStorage *pStg);};
typedef SOCKET ( *LPWPUCREATESOCKETHANDLE)(DWORD dwCatalogEntryId, DWORD_PTR dwContext, LPINT lpErrno);
typedef DWORD ( *PDX_GETPREVIOUSAUTOFLIP)(PVOID, PDDGETPREVIOUSAUTOFLIPININFO, PDDGETPREVIOUSAUTOFLIPOUTINFO);
struct _CHANGER_ELEMENT_STATUS {CHANGER_ELEMENT Element;CHANGER_ELEMENT SrcElementAddress;DWORD Flags;DWORD ExceptionCode;BYTE TargetId;BYTE Lun;WORD Reserved;BYTE PrimaryVolumeID[36];BYTE AlternateVolumeID[36];};
struct _CRYPT_PRIVATE_KEY_INFO {DWORD Version;CRYPT_ALGORITHM_IDENTIFIER Algorithm;CRYPT_DER_BLOB PrivateKey;PCRYPT_ATTRIBUTES pAttributes;};
struct _D3DHAL_RENDERSTATEDATA {ULONG_PTR dwhContext;DWORD dwOffset;DWORD dwCount;LPDIRECTDRAWSURFACE lpExeBuf;HRESULT ddrval;};
struct _DDHAL_DESTROYVPORTDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;HRESULT ddRVal;LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;};
struct _DDRAWI_DDVIDEOPORT_INT {LPVOID lpVtbl;LPDDRAWI_DDVIDEOPORT_LCL lpLcl;LPDDRAWI_DDVIDEOPORT_INT lpLink;DWORD dwIntRefCnt;DWORD dwFlags;};
struct _DD_CREATESURFACEEXDATA {DWORD dwFlags;PDD_DIRECTDRAW_LOCAL lpDDLcl;PDD_SURFACE_LOCAL lpDDSLcl;HRESULT ddRVal;};
struct _DD_GETVPORTCONNECTDATA {PDD_DIRECTDRAW_LOCAL lpDD;DWORD dwPortId;LPDDVIDEOPORTCONNECT lpConnect;DWORD dwNumEntries;HRESULT ddRVal;void *GetVideoPortConnectInfo;};
struct _DISK_CACHE_INFORMATION {BOOLEAN ParametersSavable;BOOLEAN ReadCacheEnabled;BOOLEAN WriteCacheEnabled;DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;WORD DisablePrefetchTransferLength;BOOLEAN PrefetchScalar;_DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D __anonymous0;};
struct _EVENT_TRACE_PROPERTIES {WNODE_HEADER Wnode;ULONG BufferSize;ULONG MinimumBuffers;ULONG MaximumBuffers;ULONG MaximumFileSize;ULONG LogFileMode;ULONG FlushTimer;ULONG EnableFlags;LONG AgeLimit;ULONG NumberOfBuffers;ULONG FreeBuffers;ULONG EventsLost;ULONG BuffersWritten;ULONG LogBuffersLost;ULONG RealTimeBuffersLost;HANDLE LoggerThreadId;ULONG LogFileNameOffset;ULONG LoggerNameOffset;};
struct _FILE_IN_CABINET_INFO_A {PCSTR NameInCabinet;DWORD FileSize;DWORD Win32Error;WORD DosDate;WORD DosTime;WORD DosAttribs;CHAR FullTargetName[260];};
struct _KERB_TICKET_CACHE_INFO {UNICODE_STRING ServerName;UNICODE_STRING RealmName;LARGE_INTEGER StartTime;LARGE_INTEGER EndTime;LARGE_INTEGER RenewTime;LONG EncryptionType;ULONG TicketFlags;};
struct tagEMRCREATECOLORSPACEW {EMR emr;DWORD ihCS;LOGCOLORSPACEW lcs;DWORD dwFlags;DWORD cbData;BYTE Data[1];};
struct tagEMRSETDIBITSTODEVICE {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;DWORD iUsageSrc;DWORD iStartScan;DWORD cScans;};
struct tagLAYERPLANEDESCRIPTOR {WORD nSize;WORD nVersion;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cAccumBits;BYTE cAccumRedBits;BYTE cAccumGreenBits;BYTE cAccumBlueBits;BYTE cAccumAlphaBits;BYTE cDepthBits;BYTE cStencilBits;BYTE cAuxBuffers;BYTE iLayerPlane;BYTE bReserved;COLORREF crTransparent;};
struct tagMCI_WAVE_OPEN_PARMSA {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwBufferSeconds;};
struct IAccessibleHandlerVtbl {HRESULT ( *QueryInterface)(IAccessibleHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccessibleHandler *This);ULONG ( *Release)(IAccessibleHandler *This);HRESULT ( *AccessibleObjectFromID)(IAccessibleHandler *This, int hwnd, int lObjectID, LPACCESSIBLE *pIAccessible);};
struct IShellExecuteHookAVtbl {HRESULT ( *QueryInterface)(IShellExecuteHookA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellExecuteHookA *This);ULONG ( *Release)(IShellExecuteHookA *This);HRESULT ( *Execute)(IShellExecuteHookA *This, LPSHELLEXECUTEINFOA pei);};
struct IShellExecuteHookWVtbl {HRESULT ( *QueryInterface)(IShellExecuteHookW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellExecuteHookW *This);ULONG ( *Release)(IShellExecuteHookW *This);HRESULT ( *Execute)(IShellExecuteHookW *This, LPSHELLEXECUTEINFOW pei);};
struct IShellLinkDataListVtbl {HRESULT ( *QueryInterface)(IShellLinkDataList *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellLinkDataList *This);ULONG ( *Release)(IShellLinkDataList *This);HRESULT ( *AddDataBlock)(IShellLinkDataList *This, void *pDataBlock);HRESULT ( *CopyDataBlock)(IShellLinkDataList *This, DWORD dwSig, void **ppDataBlock);HRESULT ( *RemoveDataBlock)(IShellLinkDataList *This, DWORD dwSig);HRESULT ( *GetFlags)(IShellLinkDataList *This, DWORD *pdwFlags);HRESULT ( *SetFlags)(IShellLinkDataList *This, DWORD dwFlags);};
struct ISynchronizeHandleVtbl {HRESULT ( *QueryInterface)(ISynchronizeHandle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronizeHandle *This);ULONG ( *Release)(ISynchronizeHandle *This);HRESULT ( *GetHandle)(ISynchronizeHandle *This, HANDLE *ph);};
struct IWinInetFileStreamVtbl {HRESULT ( *QueryInterface)(IWinInetFileStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWinInetFileStream *This);ULONG ( *Release)(IWinInetFileStream *This);HRESULT ( *SetHandleForUnlock)(IWinInetFileStream *This, DWORD_PTR hWinInetLockHandle, DWORD_PTR dwReserved);HRESULT ( *SetDeleteFile)(IWinInetFileStream *This, DWORD_PTR dwReserved);};
typedef int ( *LPWSPENUMNETWORKEVENTS)(SOCKET s, HANDLE hEventObject, LPWSANETWORKEVENTS lpNetworkEvents, LPINT lpErrno);
typedef ULONG ( *MCDRVCREATECONTEXTFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDRCINFO *pDrvRcInfo);
typedef ULONG ( *MCDRVCREATETEXTUREFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDTEXTURE *pTex);
typedef ULONG ( *MCDRVTEXTURESTATUSFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDTEXTURE *pTex);
typedef DWORD ( *PDX_GETCURRENTAUTOFLIP)(PVOID, PDDGETCURRENTAUTOFLIPININFO, PDDGETCURRENTAUTOFLIPOUTINFO);
typedef BOOL ( *PGET_MODULE_HANDLE_EXA)(DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
typedef BOOLEAN ( *PHIDP_INSERT_SCANCODES)(PVOID Context, PCHAR NewScanCodes, ULONG Length);
struct _DDHAL_GETSCANLINEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;DWORD dwScanLine;HRESULT ddRVal;LPDDHAL_GETSCANLINE GetScanLine;};
struct _DDHAL_SETCLIPLISTDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;HRESULT ddRVal;LPDDHALSURFCB_SETCLIPLIST SetClipList;};
struct _DDRAWI_DIRECTDRAW_INT {LPVOID lpVtbl;LPDDRAWI_DIRECTDRAW_LCL lpLcl;LPDDRAWI_DIRECTDRAW_INT lpLink;DWORD dwIntRefCnt;};
struct _DD_DRVSETCOLORKEYDATA {PDD_SURFACE_LOCAL lpDDSurface;DWORD dwFlags;DDCOLORKEY ckNew;HRESULT ddRVal;void *SetColorKey;};
struct _DD_GETDRIVERSTATEDATA {DWORD dwFlags;_DD_GETDRIVERSTATEDATA___ABF7C201B03F35578F4E1B252F89AF54 __anonymous0;LPDWORD lpdwStates;DWORD dwLength;HRESULT ddRVal;};
struct _DD_GETMOCOMPGUIDSDATA {PDD_DIRECTDRAW_LOCAL lpDD;DWORD dwNumGuids;GUID *lpGuids;HRESULT ddRVal;};
struct _DD_GETVPORTSIGNALDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwStatus;HRESULT ddRVal;void *GetVideoSignalStatus;};
struct _IMAGE_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;DWORD SizeOfStackReserve;DWORD SizeOfStackCommit;DWORD SizeOfHeapReserve;DWORD SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct _KERB_SMART_CARD_LOGON {KERB_LOGON_SUBMIT_TYPE MessageType;UNICODE_STRING Pin;ULONG CspDataLength;PUCHAR CspData;};
struct _LSA_OBJECT_ATTRIBUTES {ULONG Length;HANDLE RootDirectory;PLSA_UNICODE_STRING ObjectName;ULONG Attributes;PVOID SecurityDescriptor;PVOID SecurityQualityOfService;};
struct _MSV1_0_NTLM3_RESPONSE {UCHAR Response[16];UCHAR RespType;UCHAR HiRespType;USHORT Flags;ULONG MsgWord;ULONGLONG TimeStamp;UCHAR ChallengeFromClient[8];ULONG AvPairsOff;UCHAR Buffer[1];};
struct _PARTITION_INFORMATION {LARGE_INTEGER StartingOffset;LARGE_INTEGER PartitionLength;DWORD HiddenSectors;DWORD PartitionNumber;BYTE PartitionType;BOOLEAN BootIndicator;BOOLEAN RecognizedPartition;BOOLEAN RewritePartition;};
struct _SP_FILE_COPY_PARAMS_A {DWORD cbSize;HSPFILEQ QueueHandle;PCSTR SourceRootPath;PCSTR SourcePath;PCSTR SourceFilename;PCSTR SourceDescription;PCSTR SourceTagfile;PCSTR TargetDirectory;PCSTR TargetFilename;DWORD CopyStyle;HINF LayoutInf;PCSTR SecurityDescriptor;};
struct tagEMRGLSBOUNDEDRECORD {EMR emr;RECTL rclBounds;DWORD cbData;BYTE Data[1];};
struct tagKS_VIDEOINFOHEADER2 {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;DWORD dwInterlaceFlags;DWORD dwCopyProtectFlags;DWORD dwPictAspectRatioX;DWORD dwPictAspectRatioY;DWORD dwReserved1;DWORD dwReserved2;KS_BITMAPINFOHEADER bmiHeader;};
struct IDirectWriterLockVtbl {HRESULT ( *QueryInterface)(IDirectWriterLock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectWriterLock *This);ULONG ( *Release)(IDirectWriterLock *This);HRESULT ( *WaitForWriteAccess)(IDirectWriterLock *This, DWORD dwTimeout);HRESULT ( *ReleaseWriteAccess)(IDirectWriterLock *This);HRESULT ( *HaveWriteAccess)(IDirectWriterLock *This);};
struct IEnumCATEGORYINFOVtbl {HRESULT ( *QueryInterface)(IEnumCATEGORYINFO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumCATEGORYINFO *This);ULONG ( *Release)(IEnumCATEGORYINFO *This);HRESULT ( *Next)(IEnumCATEGORYINFO *This, ULONG celt, CATEGORYINFO *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumCATEGORYINFO *This, ULONG celt);HRESULT ( *Reset)(IEnumCATEGORYINFO *This);HRESULT ( *Clone)(IEnumCATEGORYINFO *This, IEnumCATEGORYINFO **ppenum);};
struct IInternetPriorityVtbl {HRESULT ( *QueryInterface)(IInternetPriority *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetPriority *This);ULONG ( *Release)(IInternetPriority *This);HRESULT ( *SetPriority)(IInternetPriority *This, LONG nPriority);HRESULT ( *GetPriority)(IInternetPriority *This, LONG *pnPriority);};
struct IShellIconOverlayVtbl {HRESULT ( *QueryInterface)(IShellIconOverlay *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellIconOverlay *This);ULONG ( *Release)(IShellIconOverlay *This);HRESULT ( *GetOverlayIndex)(IShellIconOverlay *This, LPCITEMIDLIST pidl, int *pIndex);HRESULT ( *GetOverlayIconIndex)(IShellIconOverlay *This, LPCITEMIDLIST pidl, int *pIconIndex);};
struct ISynchronizeEventVtbl {HRESULT ( *QueryInterface)(ISynchronizeEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronizeEvent *This);ULONG ( *Release)(ISynchronizeEvent *This);HRESULT ( *GetHandle)(ISynchronizeEvent *This, HANDLE *ph);HRESULT ( *SetEventHandle)(ISynchronizeEvent *This, HANDLE *ph);};
struct ISynchronizeMutexVtbl {HRESULT ( *QueryInterface)(ISynchronizeMutex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronizeMutex *This);ULONG ( *Release)(ISynchronizeMutex *This);HRESULT ( *Wait)(ISynchronizeMutex *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *Signal)(ISynchronizeMutex *This);HRESULT ( *Reset)(ISynchronizeMutex *This);HRESULT ( *ReleaseMutex)(ISynchronizeMutex *This);};
typedef BOOL ( *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
typedef LRESULT ( *LPFNLRESULTFROMOBJECT)( IID * riid, WPARAM wParam, LPUNKNOWN punk);
typedef HRESULT ( *LPFNOBJECTFROMLRESULT)(LRESULT lResult,  IID * riid, WPARAM wParam, void **ppvObject);
typedef ULONG ( *PFN_DrvFontManagement)(SURFOBJ *, FONTOBJ *, ULONG, ULONG, PVOID, ULONG, PVOID);
typedef ULONG_PTR ( *PFN_DrvSaveScreenBits)(SURFOBJ *, ULONG, ULONG_PTR, RECTL *);
typedef BOOL ( *PFN_DrvSetPixelFormat)(SURFOBJ *, LONG, HWND);
struct _CERT_REVOCATION_PARA {DWORD cbSize;PCCERT_CONTEXT pIssuerCert;DWORD cCertStore;HCERTSTORE *rgCertStore;HCERTSTORE hCrlStore;LPFILETIME pftTimeToUse;};
struct _DD_GETDRIVERINFODATA {void *dhpdev;DWORD dwSize;DWORD dwFlags;GUID guidInfo;DWORD dwExpectedSize;PVOID lpvData;DWORD dwActualSize;HRESULT ddRVal;};
struct _DD_GETFLIPSTATUSDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;DWORD dwFlags;HRESULT ddRVal;void *GetFlipStatus;};
struct _DD_GETVPORTFIELDDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;BOOL bField;HRESULT ddRVal;void *GetVideoPortField;};
struct _IMAGE_SECTION_HEADER {BYTE Name[8];union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C Misc;DWORD VirtualAddress;DWORD SizeOfRawData;DWORD PointerToRawData;DWORD PointerToRelocations;DWORD PointerToLinenumbers;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD Characteristics;};
struct _RPC_CLIENT_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;ULONG_PTR Reserved; void *InterpreterInfo;unsigned int Flags;};
struct _RTL_CRITICAL_SECTION {PRTL_CRITICAL_SECTION_DEBUG DebugInfo;LONG LockCount;LONG RecursionCount;HANDLE OwningThread;HANDLE LockSemaphore;ULONG_PTR SpinCount;};
struct _TCI_CLIENT_FUNC_LIST {TCI_NOTIFY_HANDLER ClNotifyHandler;TCI_ADD_FLOW_COMPLETE_HANDLER ClAddFlowCompleteHandler;TCI_MOD_FLOW_COMPLETE_HANDLER ClModifyFlowCompleteHandler;TCI_DEL_FLOW_COMPLETE_HANDLER ClDeleteFlowCompleteHandler;};
struct _WSAServiceClassInfoA {LPGUID lpServiceClassId;LPSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOA lpClassInfos;};
struct tagHARDWAREHOOKSTRUCT {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;};
struct tagKS_VIDEOINFOHEADER {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;KS_BITMAPINFOHEADER bmiHeader;};
struct tagMCI_SYSINFO_PARMSA {DWORD_PTR dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;DWORD dwNumber;UINT wDeviceType;};
struct tagMCI_WAVE_SET_PARMS {DWORD_PTR dwCallback;DWORD dwTimeFormat;DWORD dwAudio;UINT wInput;UINT wOutput;WORD wFormatTag;WORD wReserved2;WORD nChannels;WORD wReserved3;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wReserved4;WORD wBitsPerSample;WORD wReserved5;};
struct AsyncIPipeDoubleVtbl {HRESULT ( *QueryInterface)(AsyncIPipeDouble *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(AsyncIPipeDouble *This);ULONG ( *Release)(AsyncIPipeDouble *This);HRESULT ( *Begin_Pull)(AsyncIPipeDouble *This, ULONG cRequest);HRESULT ( *Finish_Pull)(AsyncIPipeDouble *This, DOUBLE *buf, ULONG *pcReturned);HRESULT ( *Begin_Push)(AsyncIPipeDouble *This, DOUBLE *buf, ULONG cSent);HRESULT ( *Finish_Push)(AsyncIPipeDouble *This);};
struct ICatalogFileInfoVtbl {HRESULT ( *QueryInterface)(ICatalogFileInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatalogFileInfo *This);ULONG ( *Release)(ICatalogFileInfo *This);HRESULT ( *GetCatalogFile)(ICatalogFileInfo *This, LPSTR *ppszCatalogFile);HRESULT ( *GetJavaTrust)(ICatalogFileInfo *This, void **ppJavaTrust);};
struct IConnectionPointVtbl {HRESULT ( *QueryInterface)(IConnectionPoint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConnectionPoint *This);ULONG ( *Release)(IConnectionPoint *This);HRESULT ( *GetConnectionInterface)(IConnectionPoint *This, IID *pIID);HRESULT ( *GetConnectionPointContainer)(IConnectionPoint *This, IConnectionPointContainer **ppCPC);HRESULT ( *Advise)(IConnectionPoint *This, IUnknown *pUnkSink, DWORD *pdwCookie);HRESULT ( *Unadvise)(IConnectionPoint *This, DWORD dwCookie);HRESULT ( *EnumConnections)(IConnectionPoint *This, IEnumConnections **ppEnum);};
struct IEnumConnectionsVtbl {HRESULT ( *QueryInterface)(IEnumConnections *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumConnections *This);ULONG ( *Release)(IEnumConnections *This);HRESULT ( *Next)(IEnumConnections *This, ULONG cConnections, LPCONNECTDATA rgcd, ULONG *pcFetched);HRESULT ( *Skip)(IEnumConnections *This, ULONG cConnections);HRESULT ( *Reset)(IEnumConnections *This);HRESULT ( *Clone)(IEnumConnections *This, IEnumConnections **ppEnum);};
struct IEnumExtraSearchVtbl {HRESULT ( *QueryInterface)(IEnumExtraSearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumExtraSearch *This);ULONG ( *Release)(IEnumExtraSearch *This);HRESULT ( *Next)(IEnumExtraSearch *This, ULONG celt, EXTRASEARCH *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumExtraSearch *This, ULONG celt);HRESULT ( *Reset)(IEnumExtraSearch *This);HRESULT ( *Clone)(IEnumExtraSearch *This, IEnumExtraSearch **ppenum);};
struct IEnumSTATPROPSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATPROPSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATPROPSTG *This);ULONG ( *Release)(IEnumSTATPROPSTG *This);HRESULT ( *Next)(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATPROPSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATPROPSTG *This);HRESULT ( *Clone)(IEnumSTATPROPSTG *This, IEnumSTATPROPSTG **ppenum);};
struct IInputObjectSiteVtbl {HRESULT ( *QueryInterface)(IInputObjectSite *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IInputObjectSite *This);ULONG ( *Release)(IInputObjectSite *This);HRESULT ( *OnFocusChangeIS)(IInputObjectSite *This, IUnknown *punkObj, BOOL fSetFocus);};
struct IOleAdviseHolderVtbl {HRESULT ( *QueryInterface)(IOleAdviseHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleAdviseHolder *This);ULONG ( *Release)(IOleAdviseHolder *This);HRESULT ( *Advise)(IOleAdviseHolder *This, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT ( *Unadvise)(IOleAdviseHolder *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IOleAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *SendOnRename)(IOleAdviseHolder *This, IMoniker *pmk);HRESULT ( *SendOnSave)(IOleAdviseHolder *This);HRESULT ( *SendOnClose)(IOleAdviseHolder *This);};
struct IOleCacheControlVtbl {HRESULT ( *QueryInterface)(IOleCacheControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCacheControl *This);ULONG ( *Release)(IOleCacheControl *This);HRESULT ( *OnRun)(IOleCacheControl *This, LPDATAOBJECT pDataObject);HRESULT ( *OnStop)(IOleCacheControl *This);};
struct IServiceProviderVtbl {HRESULT ( *QueryInterface)(IServiceProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServiceProvider *This);ULONG ( *Release)(IServiceProvider *This);HRESULT ( *QueryService)(IServiceProvider *This,  GUID * guidService,  IID * riid, void **ppvObject);};
typedef int ( *LPWSPDUPLICATESOCKET)(SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPINT lpErrno);
typedef DWORD ( *PFNRASRETRIEVEBUFFER)(HANDLE hPort, PBYTE pBuffer, PDWORD pdwSize);
typedef PVOID ( *PFN_DrvQueryFontTree)(DHPDEV, ULONG_PTR, ULONG, ULONG, ULONG_PTR *);
struct _CMINVOKECOMMANDINFO {DWORD cbSize;DWORD fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;DWORD dwHotKey;HANDLE hIcon;};
struct _CRYPT_PROVIDER_SGNR {DWORD cbStruct;FILETIME sftVerifyAsOf;DWORD csCertChain;struct _CRYPT_PROVIDER_CERT *pasCertChain;DWORD dwSignerType;CMSG_SIGNER_INFO *psSigner;DWORD dwError;DWORD csCounterSigners;struct _CRYPT_PROVIDER_SGNR *pasCounterSigners;PCCERT_CHAIN_CONTEXT pChainContext;};
struct _CTL_FIND_USAGE_PARA {DWORD cbSize;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;PCERT_INFO pSigner;};
struct _D3DHAL_GETSTATEDATA {ULONG_PTR dwhContext;DWORD dwWhich;D3DSTATE ddState;HRESULT ddrval;};
struct _DD_GETBLTSTATUSDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;DWORD dwFlags;HRESULT ddRVal;void *GetBltStatus;};
struct _DD_GETVPORTLINEDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwLine;HRESULT ddRVal;void *GetVideoPortLine;};
struct _ENCRYPTED_DATA_INFO {DWORDLONG StartingFileOffset;DWORD OutputBufferOffset;DWORD BytesWithinFileSize;DWORD BytesWithinValidDataLength;WORD CompressionFormat;BYTE DataUnitShift;BYTE ChunkShift;BYTE ClusterShift;BYTE EncryptionFormat;WORD NumberOfDataBlocks;DWORD DataBlockSize[1];};
struct _LOAD_DLL_DEBUG_INFO {HANDLE hFile;LPVOID lpBaseOfDll;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpImageName;WORD fUnicode;};
struct _LSA_TRANSLATED_SID2 {SID_NAME_USE Use;PSID Sid;LONG DomainIndex;ULONG Flags;};
struct _SECURITY_DESCRIPTOR {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;PSID Owner;PSID Group;PACL Sacl;PACL Dacl;};
struct tagCOMPAREITEMSTRUCT {UINT CtlType;UINT CtlID;HWND hwndItem;UINT itemID1;ULONG_PTR itemData1;UINT itemID2;ULONG_PTR itemData2;DWORD dwLocaleId;};
struct tagEMRPOLYPOLYLINE16 {EMR emr;RECTL rclBounds;DWORD nPolys;DWORD cpts;DWORD aPolyCounts[1];POINTS apts[1];};
struct tagMENUGETOBJECTINFO {DWORD dwFlags;UINT uPos;HMENU hmenu;PVOID riid;PVOID pvObj;};
struct tagNMDATETIMEFORMATA {NMHDR nmhdr;LPCSTR pszFormat;SYSTEMTIME st;LPCSTR pszDisplay;CHAR szDisplay[64];};
struct tagNMDATETIMESTRINGA {NMHDR nmhdr;LPCSTR pszUserString;SYSTEMTIME st;DWORD dwFlags;};
struct tagRASDIALEXTENSIONS {DWORD dwSize;DWORD dwfOptions;HWND hwndParent;ULONG_PTR reserved;ULONG_PTR reserved1;struct tagRASEAPINFO RasEapInfo;};
struct ICommDlgBrowserVtbl {HRESULT ( *QueryInterface)(ICommDlgBrowser *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICommDlgBrowser *This);ULONG ( *Release)(ICommDlgBrowser *This);HRESULT ( *OnDefaultCommand)(ICommDlgBrowser *This, struct IShellView *ppshv);HRESULT ( *OnStateChange)(ICommDlgBrowser *This, struct IShellView *ppshv, ULONG uChange);HRESULT ( *IncludeObject)(ICommDlgBrowser *This, struct IShellView *ppshv, LPCITEMIDLIST pidl);};
struct IFileViewerSiteVtbl {HRESULT ( *QueryInterface)(IFileViewerSite *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileViewerSite *This);ULONG ( *Release)(IFileViewerSite *This);HRESULT ( *SetPinnedWindow)(IFileViewerSite *This, HWND hwnd);HRESULT ( *GetPinnedWindow)(IFileViewerSite *This, HWND *phwnd);};
struct IFolderBandPrivVtbl {HRESULT ( *QueryInterface)(IFolderBandPriv *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderBandPriv *This);ULONG ( *Release)(IFolderBandPriv *This);HRESULT ( *SetCascade)(IFolderBandPriv *This, BOOL f);HRESULT ( *SetAccelerators)(IFolderBandPriv *This, BOOL f);HRESULT ( *SetNoIcons)(IFolderBandPriv *This, BOOL f);HRESULT ( *SetNoText)(IFolderBandPriv *This, BOOL f);};
typedef ULONG ( *MCDRVGETBUFFERSFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDBUFFERS *pMCDBuffers);
typedef BOOL ( *PFNPROCESSPOLICIESA)(HWND hwnd, LPCSTR pszPath, LPCSTR pszUsername, LPCSTR pszComputerName, DWORD dwFlags);
typedef DWORD ( *PFNRASRECEIVEBUFFER)(HANDLE hPort, PBYTE pBuffer, PDWORD pdwSize, DWORD dwTimeOut, HANDLE hEvent);
struct _DD_CREATEVPORTDATA {PDD_DIRECTDRAW_LOCAL lpDD;LPDDVIDEOPORTDESC lpDDVideoPortDesc;PDD_VIDEOPORT_LOCAL lpVideoPort;HRESULT ddRVal;void *CreateVideoPort;};
struct _READCONTROLSPACE64 {USHORT Processor;ULONG64 Address;ULONG BufLen;UCHAR Buf[1];};
struct _WSANAMESPACE_INFOA {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPSTR lpszIdentifier;};
struct tagEMRSTRETCHDIBITS {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;DWORD iUsageSrc;DWORD dwRop;LONG cxDest;LONG cyDest;};
struct tagIMEMENUITEMINFOA {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;CHAR szString[80];HBITMAP hbmpItem;};
struct tagIMEMENUITEMINFOW {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;WCHAR szString[80];HBITMAP hbmpItem;};
struct tagMDICREATESTRUCTA {LPCSTR szClass;LPCSTR szTitle;HANDLE hOwner;int x;int y;int cx;int cy;DWORD style;LPARAM lParam;};
struct tagNMREBARAUTOBREAK {NMHDR hdr;UINT uBand;UINT wID;LPARAM lParam;UINT uMsg;UINT fStyleCurrent;BOOL fAutoBreak;};
struct AsyncIPipeByteVtbl {HRESULT ( *QueryInterface)(AsyncIPipeByte *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(AsyncIPipeByte *This);ULONG ( *Release)(AsyncIPipeByte *This);HRESULT ( *Begin_Pull)(AsyncIPipeByte *This, ULONG cRequest);HRESULT ( *Finish_Pull)(AsyncIPipeByte *This, BYTE *buf, ULONG *pcReturned);HRESULT ( *Begin_Push)(AsyncIPipeByte *This, BYTE *buf, ULONG cSent);HRESULT ( *Finish_Push)(AsyncIPipeByte *This);};
struct AsyncIPipeLongVtbl {HRESULT ( *QueryInterface)(AsyncIPipeLong *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(AsyncIPipeLong *This);ULONG ( *Release)(AsyncIPipeLong *This);HRESULT ( *Begin_Pull)(AsyncIPipeLong *This, ULONG cRequest);HRESULT ( *Finish_Pull)(AsyncIPipeLong *This, LONG *buf, ULONG *pcReturned);HRESULT ( *Begin_Push)(AsyncIPipeLong *This, LONG *buf, ULONG cSent);HRESULT ( *Finish_Push)(AsyncIPipeLong *This);};
struct IEnumFORMATETCVtbl {HRESULT ( *QueryInterface)(IEnumFORMATETC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumFORMATETC *This);ULONG ( *Release)(IEnumFORMATETC *This);HRESULT ( *Next)(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumFORMATETC *This, ULONG celt);HRESULT ( *Reset)(IEnumFORMATETC *This);HRESULT ( *Clone)(IEnumFORMATETC *This, IEnumFORMATETC **ppenum);};
struct IInitializeSpyVtbl {HRESULT ( *QueryInterface)(IInitializeSpy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInitializeSpy *This);ULONG ( *Release)(IInitializeSpy *This);HRESULT ( *PreInitialize)(IInitializeSpy *This, DWORD dwCoInit, DWORD dwCurThreadAptRefs);HRESULT ( *PostInitialize)(IInitializeSpy *This, HRESULT hrCoInit, DWORD dwCoInit, DWORD dwNewThreadAptRefs);HRESULT ( *PreUninitialize)(IInitializeSpy *This, DWORD dwCurThreadAptRefs);HRESULT ( *PostUninitialize)(IInitializeSpy *This, DWORD dwNewThreadAptRefs);};
struct IKsPropertySetVtbl {HRESULT ( *Set)(IKsPropertySet *This,  GUID * PropSet, ULONG Id, LPVOID InstanceData, ULONG InstanceLength, LPVOID PropertyData, ULONG DataLength);HRESULT ( *Get)(IKsPropertySet *This,  GUID * PropSet, ULONG Id, LPVOID InstanceData, ULONG InstanceLength, LPVOID PropertyData, ULONG DataLength, ULONG *BytesReturned);HRESULT ( *QuerySupported)(IKsPropertySet *This,  GUID * PropSet, ULONG Id, ULONG *TypeSupport);};
struct IRpcStubBufferVtbl {HRESULT ( *QueryInterface)(IRpcStubBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcStubBuffer *This);ULONG ( *Release)(IRpcStubBuffer *This);HRESULT ( *Connect)(IRpcStubBuffer *This, IUnknown *pUnkServer);void ( *Disconnect)(IRpcStubBuffer *This);HRESULT ( *Invoke)(IRpcStubBuffer *This, RPCOLEMESSAGE *prpcmsg, IRpcChannelBuffer *pRpcChannelBuffer);IRpcStubBuffer *( *IsIIDSupported)(IRpcStubBuffer *This,  IID * riid);ULONG ( *CountRefs)(IRpcStubBuffer *This);HRESULT ( *DebugServerQueryInterface)(IRpcStubBuffer *This, void **ppv);void ( *DebugServerRelease)(IRpcStubBuffer *This, void *pv);};
typedef DWORD ( *LPPROGRESS_ROUTINE)(LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);
typedef DWORD ( *PSP_DETSIG_CMPPROC)(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA NewDeviceData, PSP_DEVINFO_DATA ExistingDeviceData, PVOID CompareContext);
struct _CERT_REQUEST_INFO {DWORD dwVersion;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _CMC_RESPONSE_INFO {DWORD cTaggedAttribute;PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;DWORD cTaggedContentInfo;PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;DWORD cTaggedOtherMsg;PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;};
struct _DDVIDEOPORTSTATUS {DWORD dwSize;BOOL bInUse;DWORD dwFlags;DWORD dwReserved1;DDVIDEOPORTCONNECT VideoPortType;ULONG_PTR dwReserved2;ULONG_PTR dwReserved3;};
struct _RSVP_RESERVE_INFO {QOS_OBJECT_HDR ObjectHdr;ULONG Style;ULONG ConfirmRequest;LPRSVP_POLICY_INFO PolicyElementList;ULONG NumFlowDesc;LPFLOWDESCRIPTOR FlowDescList;};
struct _WSAPROTOCOL_INFOA {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;CHAR szProtocol[256];};
struct _WSAPROTOCOL_INFOW {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;WCHAR szProtocol[256];};
struct tACMDRIVERDETAILSA {DWORD cbStruct;FOURCC fccType;FOURCC fccComp;WORD wMid;WORD wPid;DWORD vdwACM;DWORD vdwDriver;DWORD fdwSupport;DWORD cFormatTags;DWORD cFilterTags;HICON hicon;char szShortName[32];char szLongName[128];char szCopyright[80];char szLicensing[128];char szFeatures[512];};
struct tagCOMBOBOXEXITEMA {UINT mask;INT_PTR iItem;LPSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int iOverlay;int iIndent;LPARAM lParam;};
struct tagEMREXTFLOODFILL {EMR emr;POINTL ptlStart;COLORREF crColor;DWORD iMode;};
struct tagEMRPOLYPOLYLINE {EMR emr;RECTL rclBounds;DWORD nPolys;DWORD cptl;DWORD aPolyCounts[1];POINTL aptl[1];};
struct tagIMECHARPOSITION {DWORD dwSize;DWORD dwCharPos;POINT pt;UINT cLineHeight;RECT rcDocument;};
struct tagKS_AMVPDATAINFO {DWORD dwSize;DWORD dwMicrosecondsPerField;KS_AMVPDIMINFO amvpDimInfo;DWORD dwPictAspectRatioX;DWORD dwPictAspectRatioY;BOOL bEnableDoubleClock;BOOL bEnableVACT;BOOL bDataIsInterlaced;LONG lHalfLinesOdd;BOOL bFieldPolarityInverted;DWORD dwNumLinesInVREF;LONG lHalfLinesEven;DWORD dwReserved1;};
struct tagMOUSEHOOKSTRUCT {POINT pt;HWND hwnd;UINT wHitTestCode;ULONG_PTR dwExtraInfo;};
struct tagNMLVGETINFOTIPA {NMHDR hdr;DWORD dwFlags;LPSTR pszText;int cchTextMax;int iItem;int iSubItem;LPARAM lParam;};
struct tagNMTVGETINFOTIPA {NMHDR hdr;LPSTR pszText;int cchTextMax;HTREEITEM hItem;LPARAM lParam;};
struct AsyncIMultiQIVtbl {HRESULT ( *QueryInterface)(AsyncIMultiQI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(AsyncIMultiQI *This);ULONG ( *Release)(AsyncIMultiQI *This);HRESULT ( *Begin_QueryMultipleInterfaces)(AsyncIMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);HRESULT ( *Finish_QueryMultipleInterfaces)(AsyncIMultiQI *This, MULTI_QI *pMQIs);};
struct IBlockingLockVtbl {HRESULT ( *QueryInterface)(IBlockingLock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBlockingLock *This);ULONG ( *Release)(IBlockingLock *This);HRESULT ( *Lock)(IBlockingLock *This, DWORD dwTimeout);HRESULT ( *Unlock)(IBlockingLock *This);};
struct IClassFactoryVtbl {HRESULT ( *QueryInterface)(IClassFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassFactory *This);ULONG ( *Release)(IClassFactory *This);HRESULT ( *CreateInstance)(IClassFactory *This, IUnknown *pUnkOuter,  IID * riid, void **ppvObject);HRESULT ( *LockServer)(IClassFactory *This, BOOL fLock);};
struct IDefViewFrameVtbl {HRESULT ( *QueryInterface)(IDefViewFrame *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDefViewFrame *This);ULONG ( *Release)(IDefViewFrame *This);HRESULT ( *GetWindowLV)(IDefViewFrame *This, HWND *phwnd);HRESULT ( *ReleaseWindowLV)(IDefViewFrame *This);HRESULT ( *GetShellFolder)(IDefViewFrame *This, IShellFolder **ppsf);};
struct IEnumSTATDATAVtbl {HRESULT ( *QueryInterface)(IEnumSTATDATA *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATDATA *This);ULONG ( *Release)(IEnumSTATDATA *This);HRESULT ( *Next)(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATDATA *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATDATA *This);HRESULT ( *Clone)(IEnumSTATDATA *This, IEnumSTATDATA **ppenum);};
struct IObjectSafetyVtbl {HRESULT ( *QueryInterface)(IObjectSafety *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectSafety *This);ULONG ( *Release)(IObjectSafety *This);HRESULT ( *GetInterfaceSafetyOptions)(IObjectSafety *This,  IID * riid, DWORD *pdwSupportedOptions, DWORD *pdwEnabledOptions);HRESULT ( *SetInterfaceSafetyOptions)(IObjectSafety *This,  IID * riid, DWORD dwOptionSetMask, DWORD dwEnabledOptions);};
struct IRunnableTaskVtbl {HRESULT ( *QueryInterface)(IRunnableTask *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IRunnableTask *This);ULONG ( *Release)(IRunnableTask *This);HRESULT ( *Run)(IRunnableTask *This);HRESULT ( *Kill)(IRunnableTask *This, BOOL fWait);HRESULT ( *Suspend)(IRunnableTask *This);HRESULT ( *Resume)(IRunnableTask *This);ULONG ( *IsRunning)(IRunnableTask *This);};
struct IWaitMultipleVtbl {HRESULT ( *QueryInterface)(IWaitMultiple *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWaitMultiple *This);ULONG ( *Release)(IWaitMultiple *This);HRESULT ( *WaitMultiple)(IWaitMultiple *This, DWORD timeout, ISynchronize **pSync);HRESULT ( *AddSynchronize)(IWaitMultiple *This, ISynchronize *pSync);};
struct IWbemShutdownVtbl {HRESULT ( *QueryInterface)(IWbemShutdown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemShutdown *This);ULONG ( *Release)(IWbemShutdown *This);HRESULT ( *Shutdown)(IWbemShutdown *This, LONG uReason, ULONG uMaxMilliseconds, IWbemContext *pCtx);};
typedef DWORD ( *LPCLIPPERCALLBACK)(LPDIRECTDRAWCLIPPER lpDDClipper, HWND hWnd, DWORD code, LPVOID lpContext);
typedef BOOL ( *LPDDENUMCALLBACKA)(GUID *, LPSTR, LPSTR, LPVOID);
typedef BOOL ( *LPDSENUMCALLBACKA)(LPGUID, LPCSTR, LPCSTR, LPVOID);
typedef ULONG ( *MCDRVVIEWPORTFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDVIEWPORT *pMCDViewport);
struct _D3DHAL_CLEARDATA {ULONG_PTR dwhContext;DWORD dwFlags;DWORD dwFillColor;DWORD dwFillDepth;LPD3DRECT lpRects;DWORD dwNumRects;HRESULT ddrval;};
struct _D3DTRANSFORMDATA {DWORD dwSize;LPVOID lpIn;DWORD dwInSize;LPVOID lpOut;DWORD dwOutSize;LPD3DHVERTEX lpHOut;DWORD dwClip;DWORD dwClipIntersection;DWORD dwClipUnion;D3DRECT drExtent;};
struct _DDHAL_UNLOCKDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;HRESULT ddRVal;LPDDHALSURFCB_UNLOCK Unlock;};
struct _DDOPTSURFACEDESC {DWORD dwSize;DWORD dwFlags;DDSCAPS2 ddSCaps;DDOSCAPS ddOSCaps;GUID guid;DWORD dwCompressionRatio;};
struct _DDTRANSFERININFO {LPDDSURFACEDATA lpSurfaceData;DWORD dwStartLine;DWORD dwEndLine;ULONG_PTR dwTransferID;DWORD dwTransferFlags;PMDL lpDestMDL;};
struct _DD_FLIPVPORTDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;PDD_SURFACE_LOCAL lpSurfCurr;PDD_SURFACE_LOCAL lpSurfTarg;HRESULT ddRVal;void *FlipVideoPort;};
struct _DMUS_ARTICPARAMS {DMUS_LFOPARAMS LFO;DMUS_VEGPARAMS VolEG;DMUS_PEGPARAMS PitchEG;DMUS_MSCPARAMS Misc;};
struct _IMAGE_OS2_HEADER {WORD ne_magic;CHAR ne_ver;CHAR ne_rev;WORD ne_enttab;WORD ne_cbenttab;LONG ne_crc;WORD ne_flags;WORD ne_autodata;WORD ne_heap;WORD ne_stack;LONG ne_csip;LONG ne_sssp;WORD ne_cseg;WORD ne_cmod;WORD ne_cbnrestab;WORD ne_segtab;WORD ne_rsrctab;WORD ne_restab;WORD ne_modtab;WORD ne_imptab;LONG ne_nrestab;WORD ne_cmovent;WORD ne_align;WORD ne_cres;BYTE ne_exetyp;BYTE ne_flagsothers;WORD ne_pretthunks;WORD ne_psegrefbytes;WORD ne_swaparea;WORD ne_expver;};
struct _KEY_EVENT_RECORD {BOOL bKeyDown;WORD wRepeatCount;WORD wVirtualKeyCode;WORD wVirtualScanCode;union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC uChar;DWORD dwControlKeyState;};
struct _MIDL_SYNTAX_INFO {RPC_SYNTAX_IDENTIFIER TransferSyntax;RPC_DISPATCH_TABLE *DispatchTable;PFORMAT_STRING ProcString; unsigned short *FmtStringOffset;PFORMAT_STRING TypeString; void *aUserMarshalQuadruple;ULONG_PTR pReserved1;ULONG_PTR pReserved2;};
struct _OSVERSIONINFOEXA {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;CHAR szCSDVersion[128];WORD wServicePackMajor;WORD wServicePackMinor;WORD wSuiteMask;BYTE wProductType;BYTE wReserved;};
struct _OSVERSIONINFOEXW {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;WCHAR szCSDVersion[128];WORD wServicePackMajor;WORD wServicePackMinor;WORD wSuiteMask;BYTE wProductType;BYTE wReserved;};
struct _PIPE_TERMINATION {ULONG Flags;ULONG OutsideFactors;ULONG Weigth;KS_FRAMING_RANGE PhysicalRange;KS_FRAMING_RANGE_WEIGHTED OptimalRange;KS_COMPRESSION Compression;};
struct _RAS_CONNECTION_0 {HANDLE hConnection;HANDLE hInterface;DWORD dwConnectDuration;ROUTER_INTERFACE_TYPE dwInterfaceType;DWORD dwConnectionFlags;WCHAR wszInterfaceName[257];WCHAR wszUserName[257];WCHAR wszLogonDomain[16];WCHAR wszRemoteComputer[17];};
struct tagLVTILEVIEWINFO {UINT cbSize;DWORD dwMask;DWORD dwFlags;SIZE sizeTile;int cLines;RECT rcLabelMargin;};
struct tagNEWTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
struct tagNMITEMACTIVATE {NMHDR hdr;int iItem;int iSubItem;UINT uNewState;UINT uOldState;UINT uChanged;POINT ptAction;LPARAM lParam;UINT uKeyFlags;};
struct tagNMOBJECTNOTIFY {NMHDR hdr;int iItem; IID *piid;void *pObject;HRESULT hResult;DWORD dwFlags;};
struct tagNMREBARCHEVRON {NMHDR hdr;UINT uBand;UINT wID;LPARAM lParam;RECT rc;LPARAM lParamNM;};
struct tagSTATPROPSETSTG {FMTID fmtid;CLSID clsid;DWORD grfFlags;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD dwOSVersion;};
typedef BOOL ( *ENUMRESTYPEPROCA)(HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
struct IDocViewSiteVtbl {HRESULT ( *QueryInterface)(IDocViewSite *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDocViewSite *This);ULONG ( *Release)(IDocViewSite *This);HRESULT ( *OnSetTitle)(IDocViewSite *This, VARIANTARG *pvTitle);};
struct IEnumOLEVERBVtbl {HRESULT ( *QueryInterface)(IEnumOLEVERB *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOLEVERB *This);ULONG ( *Release)(IEnumOLEVERB *This);HRESULT ( *Next)(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumOLEVERB *This, ULONG celt);HRESULT ( *Reset)(IEnumOLEVERB *This);HRESULT ( *Clone)(IEnumOLEVERB *This, IEnumOLEVERB **ppenum);};
struct IEnumSTATSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATSTG *This);ULONG ( *Release)(IEnumSTATSTG *This);HRESULT ( *Next)(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATSTG *This);HRESULT ( *Clone)(IEnumSTATSTG *This, IEnumSTATSTG **ppenum);};
struct IEnumVARIANTVtbl {HRESULT ( *QueryInterface)(IEnumVARIANT *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumVARIANT *This);ULONG ( *Release)(IEnumVARIANT *This);HRESULT ( *Next)(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);HRESULT ( *Skip)(IEnumVARIANT *This, ULONG celt);HRESULT ( *Reset)(IEnumVARIANT *This);HRESULT ( *Clone)(IEnumVARIANT *This, IEnumVARIANT **ppEnum);};
struct IModalWindowVtbl {HRESULT ( *QueryInterface)(IModalWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IModalWindow *This);ULONG ( *Release)(IModalWindow *This);HRESULT ( *Show)(IModalWindow *This, HWND hwndParent);};
struct IOleDocumentVtbl {HRESULT ( *QueryInterface)(IOleDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocument *This);ULONG ( *Release)(IOleDocument *This);HRESULT ( *CreateView)(IOleDocument *This, IOleInPlaceSite *pIPSite, IStream *pstm, DWORD dwReserved, IOleDocumentView **ppView);HRESULT ( *GetDocMiscStatus)(IOleDocument *This, DWORD *pdwStatus);HRESULT ( *EnumViews)(IOleDocument *This, IEnumOleDocumentViews **ppEnum, IOleDocumentView **ppView);};
struct IRegTreeItemVtbl {HRESULT ( *QueryInterface)(IRegTreeItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRegTreeItem *This);ULONG ( *Release)(IRegTreeItem *This);HRESULT ( *GetCheckState)(IRegTreeItem *This, BOOL *pbCheck);HRESULT ( *SetCheckState)(IRegTreeItem *This, BOOL bCheck);};
struct ISynchronizeVtbl {HRESULT ( *QueryInterface)(ISynchronize *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronize *This);ULONG ( *Release)(ISynchronize *This);HRESULT ( *Wait)(ISynchronize *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *Signal)(ISynchronize *This);HRESULT ( *Reset)(ISynchronize *This);};
struct ITaskbarListVtbl {HRESULT ( *QueryInterface)(ITaskbarList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITaskbarList *This);ULONG ( *Release)(ITaskbarList *This);HRESULT ( *HrInit)(ITaskbarList *This);HRESULT ( *AddTab)(ITaskbarList *This, HWND hwnd);HRESULT ( *DeleteTab)(ITaskbarList *This, HWND hwnd);HRESULT ( *ActivateTab)(ITaskbarList *This, HWND hwnd);HRESULT ( *SetActiveAlt)(ITaskbarList *This, HWND hwnd);};
struct NDIS_BPC_CONNECT {BPC_HANDLE nhConnection;BPC_HANDLE nhDevice;ULONG ulConnectPriority;ULONG ulDisconnectPriority;BOOLEAN fImmediate;ULONG ulcbAddress;GUID guidProvider;ULONG rgulAddress[1];};
typedef int ( *OLDFONTENUMPROCA)( LOGFONTA *,  TEXTMETRICA *, DWORD, LPARAM);
typedef int ( *OLDFONTENUMPROCW)( LOGFONTW *,  TEXTMETRICW *, DWORD, LPARAM);
typedef PIFIMETRICS ( *PFN_DrvQueryFont)(DHPDEV, ULONG_PTR, ULONG, ULONG_PTR *);
struct _CMS_DH_KEY_INFO {DWORD dwVersion;ALG_ID Algid;LPSTR pszContentEncObjId;CRYPT_DATA_BLOB PubInfo;void *pReserved;};
struct _CONTROL_SERVICE {ULONG Length;SERVICETYPE Service;AD_GENERAL_PARAMS Overrides;_CONTROL_SERVICE___3FB44F62F5D12D5D44B4562DCCF9333E __anonymous0;};
struct _DDVIDEOPORTINFO {DWORD dwSize;DWORD dwOriginX;DWORD dwOriginY;DWORD dwVPFlags;RECT rCrop;DWORD dwPrescaleWidth;DWORD dwPrescaleHeight;LPDDPIXELFORMAT lpddpfInputFormat;LPDDPIXELFORMAT lpddpfVBIInputFormat;LPDDPIXELFORMAT lpddpfVBIOutputFormat;DWORD dwVBIHeight;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;};
struct _DMUS_CLOCKINFO7 {DWORD dwSize;DMUS_CLOCKTYPE ctType;GUID guidClock;WCHAR wszDescription[128];};
struct _DMUS_CLOCKINFO8 {DWORD dwSize;DMUS_CLOCKTYPE ctType;GUID guidClock;WCHAR wszDescription[128];DWORD dwFlags;};
struct _PRINTER_INFO_2A {LPSTR pServerName;LPSTR pPrinterName;LPSTR pShareName;LPSTR pPortName;LPSTR pDriverName;LPSTR pComment;LPSTR pLocation;LPDEVMODEA pDevMode;LPSTR pSepFile;LPSTR pPrintProcessor;LPSTR pDatatype;LPSTR pParameters;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Attributes;DWORD Priority;DWORD DefaultPriority;DWORD StartTime;DWORD UntilTime;DWORD Status;DWORD cJobs;DWORD AveragePPM;};
struct __MCDMIPMAPLEVEL {UCHAR *pTexels;LONG width;LONG height;LONG widthImage;LONG heightImage;MCDFLOAT widthImagef;MCDFLOAT heightImagef;LONG widthLog2;LONG heightLog2;LONG border;LONG requestedFormat;LONG baseFormat;LONG internalFormat;LONG redSize;LONG greenSize;LONG blueSize;LONG alphaSize;LONG luminanceSize;LONG intensitySize;ULONG reserved;};
struct tagEMRPOLYLINE16 {EMR emr;RECTL rclBounds;DWORD cpts;POINTS apts[1];};
struct tagENHMETAHEADER {DWORD iType;DWORD nSize;RECTL rclBounds;RECTL rclFrame;DWORD dSignature;DWORD nVersion;DWORD nBytes;DWORD nRecords;WORD nHandles;WORD sReserved;DWORD nDescription;DWORD offDescription;DWORD nPalEntries;SIZEL szlDevice;SIZEL szlMillimeters;DWORD cbPixelFormat;DWORD offPixelFormat;DWORD bOpenGL;SIZEL szlMicrometers;};
struct tagMIXERCONTROLA {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;CHAR szShortName[16];CHAR szName[64];union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8 Bounds;union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct tagMIXERCONTROLW {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;WCHAR szShortName[16];WCHAR szName[64];union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122 Bounds;union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct tagNMHDDISPINFOA {NMHDR hdr;int iItem;UINT mask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
typedef BOOL ( *ACMDRIVERENUMCB)(HACMDRIVERID hadid, DWORD_PTR dwInstance, DWORD fdwSupport);
struct IEnumIDListVtbl {HRESULT ( *QueryInterface)(IEnumIDList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumIDList *This);ULONG ( *Release)(IEnumIDList *This);HRESULT ( *Next)(IEnumIDList *This, ULONG celt, LPITEMIDLIST *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumIDList *This, ULONG celt);HRESULT ( *Reset)(IEnumIDList *This);HRESULT ( *Clone)(IEnumIDList *This, IEnumIDList **ppenum);};
struct IInsertItemVtbl {HRESULT ( *QueryInterface)(IInsertItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInsertItem *This);ULONG ( *Release)(IInsertItem *This);HRESULT ( *InsertItem)(IInsertItem *This, LPCITEMIDLIST pidl);};
struct INetCrawlerVtbl {HRESULT ( *QueryInterface)(INetCrawler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCrawler *This);ULONG ( *Release)(INetCrawler *This);HRESULT ( *Update)(INetCrawler *This, DWORD dwFlags);};
struct IPipeDoubleVtbl {HRESULT ( *QueryInterface)(IPipeDouble *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPipeDouble *This);ULONG ( *Release)(IPipeDouble *This);HRESULT ( *Pull)(IPipeDouble *This, DOUBLE *buf, ULONG cRequest, ULONG *pcReturned);HRESULT ( *Push)(IPipeDouble *This, DOUBLE *buf, ULONG cSent);};
struct IWizardSiteVtbl {HRESULT ( *QueryInterface)(IWizardSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWizardSite *This);ULONG ( *Release)(IWizardSite *This);HRESULT ( *GetPreviousPage)(IWizardSite *This, HPROPSHEETPAGE *phpage);HRESULT ( *GetNextPage)(IWizardSite *This, HPROPSHEETPAGE *phpage);HRESULT ( *GetCancelledPage)(IWizardSite *This, HPROPSHEETPAGE *phpage);};
typedef int ( *LPCONDITIONPROC)(LPWSABUF lpCallerId, LPWSABUF lpCallerData, LPQOS lpSQOS, LPQOS lpGQOS, LPWSABUF lpCalleeId, LPWSABUF lpCalleeData, GROUP *g, DWORD_PTR dwCallbackData);
typedef ULONG ( *MCDRVCOPYPIXELS)(MCDSURFACE *pMcdSurface, MCDRC *pRc, LONG x, LONG y, ULONG width, ULONG height, ULONG type);
typedef ULONG ( *MCDRVDRAWPIXELS)(MCDSURFACE *pMcdSurface, MCDRC *pRc, ULONG width, ULONG height, ULONG format, ULONG type, void *pPixels, BOOL packed);
typedef ULONG ( *MCDRVREADPIXELS)(MCDSURFACE *pMcdSurface, MCDRC *pRc, LONG x, LONG y, ULONG width, ULONG height, ULONG format, ULONG type, void *pPixels);
typedef DWORD ( *PDX_GETPOLARITY)(PVOID, PDDGETPOLARITYININFO, PDDGETPOLARITYOUTINFO);
typedef DWORD ( *PFE_EXPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength);
typedef DWORD ( *PFE_IMPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength);
typedef LONG_PTR ( *PFNCOMPROPSHEET)(HANDLE hComPropSheet, UINT Function, LPARAM lParam1, LPARAM lParam2);
struct _AVISTREAMINFOW {DWORD fccType;DWORD fccHandler;DWORD dwFlags;DWORD dwCaps;WORD wPriority;WORD wLanguage;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwInitialFrames;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;RECT rcFrame;DWORD dwEditCount;DWORD dwFormatChangeCount;WCHAR szName[64];};
struct _DD_NTCALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_FREEDRIVERMEMORY FreeDriverMemory;PDD_SETEXCLUSIVEMODE SetExclusiveMode;PDD_FLIPTOGDISURFACE FlipToGDISurface;};
struct _DRIVER_INFO_6A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;LPSTR pHelpFile;LPSTR pDependentFiles;LPSTR pMonitorName;LPSTR pDefaultDataType;LPSTR pszzPreviousNames;FILETIME ftDriverDate;DWORDLONG dwlDriverVersion;LPSTR pszMfgName;LPSTR pszOEMUrl;LPSTR pszHardwareID;LPSTR pszProvider;};
struct tagEMRINVERTRGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;BYTE RgnData[1];};
struct tagMIDIOUTCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagMIDIOUTCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagWAVEOUTCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;};
struct tagWAVEOUTCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;};
struct ICDBurnExtVtbl {HRESULT ( *QueryInterface)(ICDBurnExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICDBurnExt *This);ULONG ( *Release)(ICDBurnExt *This);HRESULT ( *GetSupportedActionTypes)(ICDBurnExt *This, DWORD *pdwActions);};
struct IRpcHelperVtbl {HRESULT ( *QueryInterface)(IRpcHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcHelper *This);ULONG ( *Release)(IRpcHelper *This);HRESULT ( *GetDCOMProtocolVersion)(IRpcHelper *This, DWORD *pComVersion);HRESULT ( *GetIIDFromOBJREF)(IRpcHelper *This, void *pObjRef, IID **piid);};
typedef SCARDHANDLE ( *LPOCNCONNPROCA)(SCARDCONTEXT, LPSTR, LPSTR, PVOID);
struct _DDSURFACEDATA {DWORD ddsCaps;DWORD dwSurfaceOffset;ULONG_PTR fpLockPtr;DWORD dwWidth;DWORD dwHeight;LONG lPitch;DWORD dwOverlayFlags;DWORD dwOverlayOffset;DWORD dwOverlaySrcWidth;DWORD dwOverlaySrcHeight;DWORD dwOverlayDestWidth;DWORD dwOverlayDestHeight;DWORD dwVideoPortId;DWORD dwFormatFlags;DWORD dwFormatFourCC;DWORD dwFormatBitCount;DWORD dwRBitMask;DWORD dwGBitMask;DWORD dwBBitMask;ULONG dwDriverReserved1;ULONG dwDriverReserved2;ULONG dwDriverReserved3;ULONG dwDriverReserved4;};
struct _DD_HALINFO_V4 {DWORD dwSize;VIDEOMEMORYINFO vmiData;DDNTCORECAPS ddCaps;PDD_GETDRIVERINFO GetDriverInfo;DWORD dwFlags;};
struct _MCDLAYERPLANE {WORD nSize;WORD nVersion;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cAuxBuffers;BYTE iLayerPlane;COLORREF crTransparent;};
struct _wireSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;SAFEARRAYUNION uArrayStructs;SAFEARRAYBOUND rgsabound[1];};
struct tagCONTROLINFO {ULONG cb;HACCEL hAccel;USHORT cAccel;DWORD dwFlags;};
struct tagEMRANGLEARC {EMR emr;POINTL ptlCenter;DWORD nRadius;FLOAT eStartAngle;FLOAT eSweepAngle;};
struct tagEMRPOLYLINE {EMR emr;RECTL rclBounds;DWORD cptl;POINTL aptl[1];};
struct tagEXTLOGFONTA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];DWORD elfVersion;DWORD elfStyleSize;DWORD elfMatch;DWORD elfReserved;BYTE elfVendorId[4];DWORD elfCulture;PANOSE elfPanose;};
struct tagKbdNlsLayer {USHORT OEMIdentifier;USHORT LayoutInformation;UINT NumOfVkToF;PVK_F pVkToF;INT NumOfMouseVKey;USHORT *pusMouseVKey;};
struct tagLVFINDINFOA {UINT flags;LPCSTR psz;LPARAM lParam;POINT pt;UINT vkDirection;};
struct tagMENUBARINFO {DWORD cbSize;RECT rcBar;HMENU hMenu;HWND hwndMenu;int fBarFocused : 1;int fFocused : 1;};
struct tagMIDIINCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwSupport;};
struct tagMIDIINCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwSupport;};
struct tagNMTBRESTORE {NMHDR hdr;DWORD *pData;DWORD *pCurrent;UINT cbData;int iItem;int cButtons;int cbBytesPerRecord;TBBUTTON tbButton;};
struct tagNMTREEVIEWA {NMHDR hdr;UINT action;TVITEMA itemOld;TVITEMA itemNew;POINT ptDrag;};
struct tagNMTREEVIEWW {NMHDR hdr;UINT action;TVITEMW itemOld;TVITEMW itemNew;POINT ptDrag;};
struct tagPAINTSTRUCT {HDC hdc;BOOL fErase;RECT rcPaint;BOOL fRestore;BOOL fIncUpdate;BYTE rgbReserved[32];};
struct tagWAVEINCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;};
struct tagWAVEINCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;};
typedef BOOL ( *DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
typedef int ( *ENHMFENUMPROC)(HDC, HANDLETABLE *,  ENHMETARECORD *, int, LPARAM);
struct IEnumGUIDVtbl {HRESULT ( *QueryInterface)(IEnumGUID *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumGUID *This);ULONG ( *Release)(IEnumGUID *This);HRESULT ( *Next)(IEnumGUID *This, ULONG celt, GUID *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumGUID *This, ULONG celt);HRESULT ( *Reset)(IEnumGUID *This);HRESULT ( *Clone)(IEnumGUID *This, IEnumGUID **ppenum);};
struct IPipeByteVtbl {HRESULT ( *QueryInterface)(IPipeByte *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPipeByte *This);ULONG ( *Release)(IPipeByte *This);HRESULT ( *Pull)(IPipeByte *This, BYTE *buf, ULONG cRequest, ULONG *pcReturned);HRESULT ( *Push)(IPipeByte *This, BYTE *buf, ULONG cSent);};
struct IPipeLongVtbl {HRESULT ( *QueryInterface)(IPipeLong *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPipeLong *This);ULONG ( *Release)(IPipeLong *This);HRESULT ( *Pull)(IPipeLong *This, LONG *buf, ULONG cRequest, ULONG *pcReturned);HRESULT ( *Push)(IPipeLong *This, LONG *buf, ULONG cSent);};
struct IXMLErrorVtbl {HRESULT ( *QueryInterface)(IXMLError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLError *This);ULONG ( *Release)(IXMLError *This);HRESULT ( *GetErrorInfo)(IXMLError *This, XML_ERROR *pErrorReturn);};
typedef BOOL ( *PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef void ( *SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);
struct _CERT_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCertEncoded;DWORD cbCertEncoded;PCERT_INFO pCertInfo;HCERTSTORE hCertStore;};
struct _CREDUI_INFOA {DWORD cbSize;HWND hwndParent;PCSTR pszMessageText;PCSTR pszCaptionText;HBITMAP hbmBanner;};
struct _DCIENUMINPUT {DCICMD cmd;RECT rSrc;RECT rDst;void ( *EnumCallback)(LPDCISURFACEINFO, LPVOID);LPVOID lpContext;};
struct _FORM_INFO_1A {DWORD Flags;LPSTR pName;SIZEL Size;RECTL ImageableArea;};
struct _WNODE_HEADER {ULONG BufferSize;ULONG ProviderId;_WNODE_HEADER___FC8E5BF4FD761F48CA6E0E74FA8C78CE __anonymous0;_WNODE_HEADER___94883EDDB53D73798B50E968A69A9EBB __anonymous1;GUID Guid;ULONG ClientContext;ULONG Flags;};
struct tagDIBSECTION {BITMAP dsBm;BITMAPINFOHEADER dsBmih;DWORD dsBitfields[3];HANDLE dshSection;DWORD dsOffset;};
struct tagDROPSTRUCT {HWND hwndSource;HWND hwndSink;DWORD wFmt;ULONG_PTR dwData;POINT ptDrop;DWORD dwControlData;};
struct tagEMRFILLRGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;DWORD ihBrush;BYTE RgnData[1];};
struct tagLVBKIMAGEA {ULONG ulFlags;HBITMAP hbm;LPSTR pszImage;UINT cchImageMax;int xOffsetPercent;int yOffsetPercent;};
struct tagMIXERCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;};
struct tagMIXERCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;};
struct tagMIXERLINEA {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD_PTR dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;CHAR szShortName[16];CHAR szName[64];struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E Target;};
struct tagMIXERLINEW {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD_PTR dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;WCHAR szShortName[16];WCHAR szName[64];struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA Target;};
struct tagNMLISTVIEW {NMHDR hdr;int iItem;int iSubItem;UINT uNewState;UINT uOldState;UINT uChanged;POINT ptAction;LPARAM lParam;};
struct tagNMTOOLBARA {NMHDR hdr;int iItem;TBBUTTON tbButton;int cchText;LPSTR pszText;RECT rcButton;};
struct IMultiQIVtbl {HRESULT ( *QueryInterface)(IMultiQI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiQI *This);ULONG ( *Release)(IMultiQI *This);HRESULT ( *QueryMultipleInterfaces)(IMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);};
struct IPersistVtbl {HRESULT ( *QueryInterface)(IPersist *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersist *This);ULONG ( *Release)(IPersist *This);HRESULT ( *GetClassID)(IPersist *This, CLSID *pClassID);};
struct IROTDataVtbl {HRESULT ( *QueryInterface)(IROTData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IROTData *This);ULONG ( *Release)(IROTData *This);HRESULT ( *GetComparisonData)(IROTData *This, byte *pbData, ULONG cbMax, ULONG *pcbData);};
typedef BOOL ( *LPOCNCHKPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef int ( *LPWSPCONNECT)(SOCKET s,  struct sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, LPINT lpErrno);
typedef DWORD ( *PDX_SETSTATE)(PVOID, PDDSETSTATEININFO, PDDSETSTATEOUTINFO);
typedef DWORD ( *PDX_TRANSFER)(PVOID, PDDTRANSFERININFO, PDDTRANSFEROUTINFO);
typedef void ( *RASDIALFUNC1)(HRASCONN, UINT, enum tagRASCONNSTATE, DWORD, DWORD);
typedef void ( *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime);
struct _CC_HW_FIELD {VBICODECFILTERING_SCANLINES ScanlinesRequested;ULONG fieldFlags;LONGLONG PictureNumber;CC_BYTE_PAIR Lines[12];};
struct _CRL_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCrlEncoded;DWORD cbCrlEncoded;PCRL_INFO pCrlInfo;HCERTSTORE hCertStore;};
struct _D3DTRIANGLE {_D3DLINE___C167AD525C2A16158535093655B0BE27 __anonymous0;_D3DLINE___5E81141D7147E4DA50A203FBA8012470 __anonymous2;_D3DTRIANGLE___B37211E5FB9C3E78EB744E72121563AA __anonymous4;WORD wFlags;};
struct _DDOVERLAYFX {DWORD dwSize;DWORD dwAlphaEdgeBlendBitDepth;DWORD dwAlphaEdgeBlend;DWORD dwReserved;DWORD dwAlphaDestConstBitDepth;_DDBLTFX___3639C047B3E88B857708792B1F3FEC83 __anonymous0;DWORD dwAlphaSrcConstBitDepth;_DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 __anonymous2;DDCOLORKEY dckDestColorkey;DDCOLORKEY dckSrcColorkey;DWORD dwDDFX;DWORD dwFlags;};
struct _DD_FLIPDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpSurfCurr;PDD_SURFACE_LOCAL lpSurfTarg;DWORD dwFlags;HRESULT ddRVal;void *Flip;PDD_SURFACE_LOCAL lpSurfCurrLeft;PDD_SURFACE_LOCAL lpSurfTargLeft;};
struct _EVENT_TRACE {EVENT_TRACE_HEADER Header;ULONG InstanceId;ULONG ParentInstanceId;GUID ParentGuid;PVOID MofData;ULONG MofLength;ULONG ClientContext;};
struct _RSVP_ADSPEC {QOS_OBJECT_HDR ObjectHdr;AD_GENERAL_PARAMS GeneralParams;ULONG NumberOfServices;CONTROL_SERVICE Services[1];};
struct tagCWPSTRUCT {LPARAM lParam;WPARAM wParam;UINT message;HWND hwnd;};
struct tagEXTLOGPEN {DWORD elpPenStyle;DWORD elpWidth;UINT elpBrushStyle;COLORREF elpColor;ULONG_PTR elpHatch;DWORD elpNumEntries;DWORD elpStyleEntry[1];};
struct tagFORMATETC {CLIPFORMAT cfFormat;DVTARGETDEVICE *ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagJOYCAPS2A {WORD wMid;WORD wPid;CHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;CHAR szRegKey[32];CHAR szOEMVxD[260];GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagJOYCAPS2W {WORD wMid;WORD wPid;WCHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;WCHAR szRegKey[32];WCHAR szOEMVxD[260];GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagRASENTRYA {DWORD dwSize;DWORD dwfOptions;DWORD dwCountryID;DWORD dwCountryCode;CHAR szAreaCode[11];CHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;struct RASIPADDR ipaddr;struct RASIPADDR ipaddrDns;struct RASIPADDR ipaddrDnsAlt;struct RASIPADDR ipaddrWins;struct RASIPADDR ipaddrWinsAlt;DWORD dwFrameSize;DWORD dwfNetProtocols;DWORD dwFramingProtocol;CHAR szScript[260];CHAR szAutodialDll[260];CHAR szAutodialFunc[260];CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szX25PadType[33];CHAR szX25Address[201];CHAR szX25Facilities[201];CHAR szX25UserData[201];DWORD dwChannels;DWORD dwReserved1;DWORD dwReserved2;DWORD dwSubEntries;DWORD dwDialMode;DWORD dwDialExtraPercent;DWORD dwDialExtraSampleSeconds;DWORD dwHangUpExtraPercent;DWORD dwHangUpExtraSampleSeconds;DWORD dwIdleDisconnectSeconds;DWORD dwType;DWORD dwEncryptionType;DWORD dwCustomAuthKey;GUID guidId;CHAR szCustomDialDll[260];DWORD dwVpnStrategy;DWORD dwfOptions2;DWORD dwfOptions3;CHAR szDnsSuffix[256];DWORD dwTcpWindowSize;CHAR szPrerequisitePbk[260];CHAR szPrerequisiteEntry[257];DWORD dwRedialCount;DWORD dwRedialPause;};
struct tagRASENTRYW {DWORD dwSize;DWORD dwfOptions;DWORD dwCountryID;DWORD dwCountryCode;WCHAR szAreaCode[11];WCHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;struct RASIPADDR ipaddr;struct RASIPADDR ipaddrDns;struct RASIPADDR ipaddrDnsAlt;struct RASIPADDR ipaddrWins;struct RASIPADDR ipaddrWinsAlt;DWORD dwFrameSize;DWORD dwfNetProtocols;DWORD dwFramingProtocol;WCHAR szScript[260];WCHAR szAutodialDll[260];WCHAR szAutodialFunc[260];WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szX25PadType[33];WCHAR szX25Address[201];WCHAR szX25Facilities[201];WCHAR szX25UserData[201];DWORD dwChannels;DWORD dwReserved1;DWORD dwReserved2;DWORD dwSubEntries;DWORD dwDialMode;DWORD dwDialExtraPercent;DWORD dwDialExtraSampleSeconds;DWORD dwHangUpExtraPercent;DWORD dwHangUpExtraSampleSeconds;DWORD dwIdleDisconnectSeconds;DWORD dwType;DWORD dwEncryptionType;DWORD dwCustomAuthKey;GUID guidId;WCHAR szCustomDialDll[260];DWORD dwVpnStrategy;DWORD dwfOptions2;DWORD dwfOptions3;WCHAR szDnsSuffix[256];DWORD dwTcpWindowSize;WCHAR szPrerequisitePbk[260];WCHAR szPrerequisiteEntry[257];DWORD dwRedialCount;DWORD dwRedialPause;};
struct tagSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;PVOID pvData;SAFEARRAYBOUND rgsabound[1];};
struct tagTVITEMEXA {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;int iIntegral;};
struct IMallocVtbl {HRESULT ( *QueryInterface)(IMalloc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMalloc *This);ULONG ( *Release)(IMalloc *This);void *( *Alloc)(IMalloc *This, SIZE_T cb);void *( *Realloc)(IMalloc *This, void *pv, SIZE_T cb);void ( *Free)(IMalloc *This, void *pv);SIZE_T ( *GetSize)(IMalloc *This, void *pv);int ( *DidAlloc)(IMalloc *This, void *pv);void ( *HeapMinimize)(IMalloc *This);};
typedef DWORD ( *LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
typedef SOCKET ( *LPWSPACCEPT)(SOCKET s, struct sockaddr *addr, LPINT addrlen, LPCONDITIONPROC lpfnCondition, DWORD_PTR dwCallbackData, LPINT lpErrno);
struct _COMMCONFIG {DWORD dwSize;WORD wVersion;WORD wReserved;DCB dcb;DWORD dwProviderSubType;DWORD dwProviderOffset;DWORD dwProviderSize;WCHAR wcProviderData[1];};
struct _D3DHVERTEX {DWORD dwFlags;_D3DHVERTEX___81DEDA9DF6ACB3C44C422FDD657F648D __anonymous0;_D3DHVERTEX___D02C4950DEF26FBAA94C7BFFD90117CD __anonymous1;_D3DHVERTEX___422DE5A9C9FEBBB756750EDCDEE4D165 __anonymous2;};
struct _DDBLTBATCH {LPRECT lprDest;LPDIRECTDRAWSURFACE lpDDSSrc;LPRECT lprSrc;DWORD dwFlags;LPDDBLTFX lpDDBltFx;};
struct _DS3DBUFFER {DWORD dwSize;D3DVECTOR vPosition;D3DVECTOR vVelocity;DWORD dwInsideConeAngle;DWORD dwOutsideConeAngle;D3DVECTOR vConeOrientation;LONG lConeOutsideVolume;D3DVALUE flMinDistance;D3DVALUE flMaxDistance;DWORD dwMode;};
struct _MCDCOMMAND {ULONG flags;MCDVERTEX *pEndVertex;ULONG reserved2;ULONG reserved3;ULONG reserved4;ULONG reserved5;MCDVERTEX *pStartVertex;ULONG reserved7;ULONG reserved8;MCDVERTEX *pVertexBuffer;ULONG reserved10;ULONG reserved11;ULONG reserved12;ULONG reserved13;ULONG reserved14;ULONG command;ULONG clipCodes;ULONG reserved17;ULONG reserved18;MCDCOMMAND *pNextCmd;ULONG numIndices;UCHAR *pIndices;ULONG reserved22;ULONG textureKey;};
struct _MCDSURFACE {MCDWINDOW *pWnd;SURFOBJ *pso;WNDOBJ *pwo;ULONG reserved[4];ULONG surfaceFlags;};
struct _OEMDMPARAM {DWORD cbSize;PVOID pdriverobj;HANDLE hPrinter;HANDLE hModule;PDEVMODE pPublicDMIn;PDEVMODE pPublicDMOut;PVOID pOEMDMIn;PVOID pOEMDMOut;DWORD cbBufSize;};
struct _RAS_PORT_0 {HANDLE hPort;HANDLE hConnection;RAS_PORT_CONDITION dwPortCondition;DWORD dwTotalNumberOfCalls;DWORD dwConnectDuration;WCHAR wszPortName[17];WCHAR wszMediaName[17];WCHAR wszDeviceName[129];WCHAR wszDeviceType[17];};
struct _tagIMEPROA {HWND hWnd;DATETIME InstDate;UINT wVersion;BYTE szDescription[50];BYTE szName[80];BYTE szOptions[30];};
struct _tagIMEPROW {HWND hWnd;DATETIME InstDate;UINT wVersion;WCHAR szDescription[50];WCHAR szName[80];WCHAR szOptions[30];};
struct _userBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;ULONG cbSize;byte pBuffer[1];};
struct tagAUXCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;};
struct tagAUXCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;};
struct tagHELPINFO {UINT cbSize;int iContextType;int iCtrlId;HANDLE hItemHandle;DWORD_PTR dwContextId;POINT MousePos;};
struct tagMENUINFO {DWORD cbSize;DWORD fMask;DWORD dwStyle;UINT cyMax;HBRUSH hbrBack;DWORD dwContextHelpID;ULONG_PTR dwMenuData;};
struct tagNMTBSAVE {NMHDR hdr;DWORD *pData;DWORD *pCurrent;UINT cbData;int iItem;int cButtons;TBBUTTON tbButton;};
struct tagRAWMOUSE {USHORT usFlags;tagRAWMOUSE___BAD619BF849CA7670BF9DAFAE180B654 __anonymous0;ULONG ulRawButtons;LONG lLastX;LONG lLastY;ULONG ulExtraInformation;};
struct tagTLIBATTR {GUID guid;LCID lcid;SYSKIND syskind;WORD wMajorVerNum;WORD wMinorVerNum;WORD wLibFlags;};
typedef int ( *MFENUMPROC)(HDC, HANDLETABLE *, METARECORD *, int, LPARAM);
struct _CRL_ENTRY {CRYPT_INTEGER_BLOB SerialNumber;FILETIME RevocationDate;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _D3DLIGHT7 {D3DLIGHTTYPE dltType;D3DCOLORVALUE dcvDiffuse;D3DCOLORVALUE dcvSpecular;D3DCOLORVALUE dcvAmbient;D3DVECTOR dvPosition;D3DVECTOR dvDirection;D3DVALUE dvRange;D3DVALUE dvFalloff;D3DVALUE dvAttenuation0;D3DVALUE dvAttenuation1;D3DVALUE dvAttenuation2;D3DVALUE dvTheta;D3DVALUE dvPhi;};
struct _DRIVEROBJ {PVOID pvObj;FREEOBJPROC pFreeProc;HDEV hdev;DHPDEV dhpdev;};
struct _MCDVERTEX {ULONG flags;MCDCOLOR *pColor;ULONG clipCode;MCDFLOAT fog;MCDCOORD clipCoord;MCDCOORD windowCoord;MCDCOORD texCoord;MCDCOORD normal;MCDCOLOR colors[2];MCDCOORD eyeCoord;};
struct _cpinfoexA {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;CHAR CodePageName[260];};
struct tagLVITEMA {UINT mask;int iItem;int iSubItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;int iIndent;int iGroupId;UINT cColumns;PUINT puColumns;};
struct tagNMMOUSE {NMHDR hdr;DWORD_PTR dwItemSpec;DWORD_PTR dwItemData;POINT pt;LPARAM dwHitInfo;};
struct tagNMREBAR {NMHDR hdr;DWORD dwMask;UINT uBand;UINT fStyle;UINT wID;LPARAM lParam;};
struct tagTCITEMA {UINT mask;DWORD dwState;DWORD dwStateMask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct tagTVITEMA {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;};
typedef void ( *TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
struct _CLIPLINE {POINTFIX ptfxA;POINTFIX ptfxB;LONG lStyleState;ULONG c;RUN arun[1];};
struct _HD_ITEMA {UINT mask;int cxy;LPSTR pszText;HBITMAP hbm;int cchTextMax;int fmt;LPARAM lParam;int iImage;int iOrder;UINT type;void *pvFilter;};
struct _MCRCINFO {ULONG requestFlags;MCDFLOAT redScale;MCDFLOAT greenScale;MCDFLOAT blueScale;MCDFLOAT alphaScale;MCDDOUBLE zScale;ULONG depthBufferMax;LONG viewportXAdjust;LONG viewportYAdjust;ULONG reserved[12];};
struct _PPP_INFO {PPP_NBFCP_INFO nbf;PPP_IPCP_INFO ip;PPP_IPXCP_INFO ipx;PPP_ATCP_INFO at;};
typedef LRESULT  MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
typedef DWORD ( *PDX_LOCK)(PVOID, PDDLOCKININFO, PDDLOCKOUTINFO);
struct _OPTTYPE {WORD cbSize;BYTE Type;BYTE Flags;WORD Count;WORD BegCtrlID;POPTPARAM pOptParam;WORD Style;WORD wReserved[3];ULONG_PTR dwReserved[3];};
struct _WNDOBJ {CLIPOBJ coClient;PVOID pvConsumer;RECTL rclClient;SURFOBJ *psoOwner;};
struct tagOIFI {UINT cb;BOOL fMDIApp;HWND hwndFrame;HACCEL haccel;UINT cAccelEntries;};
struct _rwsmp {ULONG cbSize;USHORT usUnityNote;SHORT sFineTune;LONG lAttenuation;ULONG fulOptions;ULONG cSampleLoops;};
struct _NCB {UCHAR ncb_command;UCHAR ncb_retcode;UCHAR ncb_lsn;UCHAR ncb_num;PUCHAR ncb_buffer;WORD ncb_length;UCHAR ncb_callname[16];UCHAR ncb_name[16];UCHAR ncb_rto;UCHAR ncb_sto;void ( *ncb_post)(struct _NCB *);UCHAR ncb_lana_num;UCHAR ncb_cmd_cplt;UCHAR ncb_reserve[10];HANDLE ncb_event;};
union _RSVP_FILTERSPEC___59F6C73F6B9BF6FF92B2606A8BB6C14F {RSVP_FILTERSPEC_V4 FilterSpecV4;RSVP_FILTERSPEC_V6 FilterSpecV6;RSVP_FILTERSPEC_V6_FLOW FilterSpecV6Flow;RSVP_FILTERSPEC_V4_GPI FilterSpecV4Gpi;RSVP_FILTERSPEC_V6_GPI FilterSpecV6Gpi;};
union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4 {KEY_EVENT_RECORD KeyEvent;MOUSE_EVENT_RECORD MouseEvent;WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;MENU_EVENT_RECORD MenuEvent;FOCUS_EVENT_RECORD FocusEvent;};
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {DWORD cbSize;CRYPT_BIT_BLOB RecipientPublicKey;CERT_ID RecipientId;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;HCRYPTPROV hCryptProv;CRYPT_BIT_BLOB RecipientPublicKey;CERT_ID RecipientId;};
struct _58C2C1BF6568EE28BD9B872E6BA03976 {KSPIN_INTERFACE Interface;KSPIN_MEDIUM Medium;ULONG PinId;HANDLE PinToHandle;KSPRIORITY Priority;};
struct _5C25098378D11CF2DF13A353B46EE415 {DWORD dwFlags;HPALETTE hpal;HWND hwnd;HDC hdc;int xDst;int yDst;int dxDst;int dyDst;LPBITMAPINFOHEADER lpbi;int xSrc;int ySrc;int dxSrc;int dySrc;DWORD dwRate;DWORD dwScale;};
struct _6283893B713888864804C588D87395BB {DWORD dwFlags;LPBITMAPINFOHEADER lpbiOutput;LPARAM lOutput;LPBITMAPINFOHEADER lpbiInput;LPARAM lInput;LONG lStartFrame;LONG lFrameCount;LONG lQuality;LONG lDataRate;LONG lKeyRate;DWORD dwRate;DWORD dwScale;DWORD dwOverheadPerFrame;DWORD dwReserved2;LONG ( *GetData)(LPARAM lInput, LONG lFrame, LPVOID lpBits, LONG len);LONG ( *PutData)(LPARAM lOutput, LONG lFrame, LPVOID lpBits, LONG len);};
struct _63C5725C5B677664277ACEA161B104D1 {SHCOLUMNID scid;VARTYPE vt;DWORD fmt;UINT cChars;DWORD csFlags;WCHAR wszTitle[80];WCHAR wszDescription[128];};
struct _742D342C7048E2C3902DF7570B72F6FC {ULONG Size;ULONG Flags;_742D342C7048E2C3902DF7570B72F6FC___1E7C0E17512837337D4DA69F160D7B1A __anonymous0;PVOID Reserved;KSEVENT Event;KSEVENTDATA EventData;};
struct _9223FF9C4398B5998F8B0B2319A44BF2 {DWORD dwFlags;LPBITMAPINFOHEADER lpbiOutput;LPVOID lpOutput;LPBITMAPINFOHEADER lpbiInput;LPVOID lpInput;LPDWORD lpckid;LPDWORD lpdwFlags;LONG lFrameNum;DWORD dwFrameSize;DWORD dwQuality;LPBITMAPINFOHEADER lpbiPrev;LPVOID lpPrev;};
struct _A4B4B8B4CE90204588F5CA0CCC4989CD {BOOLEAN Enable;BYTE Spare[3];DWORD BatteryLevel;POWER_ACTION_POLICY PowerPolicy;SYSTEM_POWER_STATE MinSystemState;};
struct _F2AFD13852ACA75C0D1B7913E08A9A3F {LONG cbSize;DWORD dwFlags;HIC hic;DWORD fccType;DWORD fccHandler;LPBITMAPINFO lpbiIn;LPBITMAPINFO lpbiOut;LPVOID lpBitsOut;LPVOID lpBitsPrev;LONG lFrame;LONG lKey;LONG lDataRate;LONG lQ;LONG lKeyCount;LPVOID lpState;LONG cbState;};
struct _DDHAL_DDMISCELLANEOUS2CALLBACKS {DWORD dwSize;DWORD dwFlags;LPVOID Reserved;LPDDHAL_CREATESURFACEEX CreateSurfaceEx;LPDDHAL_GETDRIVERSTATE GetDriverState;LPDDHAL_DESTROYDDLOCAL DestroyDDLocal;};
struct _DDHAL_DDMISCELLANEOUSCALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHAL_GETAVAILDRIVERMEMORY GetAvailDriverMemory;LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap;LPDDHAL_GETHEAPALIGNMENT GetHeapAlignment;LPDDHALSURFCB_GETBLTSTATUS GetSysmemBltStatus;};
struct _DDHAL_WAITFORVERTICALBLANKDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;DWORD dwFlags;DWORD bIsInVB;ULONG_PTR hEvent;HRESULT ddRVal;LPDDHAL_WAITFORVERTICALBLANK WaitForVerticalBlank;};
struct _CMSG_KEY_AGREE_RECIPIENT_INFO {DWORD dwVersion;DWORD dwOriginatorChoice;_CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 __anonymous0;CRYPT_DATA_BLOB UserKeyingMaterial;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;DWORD cRecipientEncryptedKeys;PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;};
struct _CMSG_MAIL_LIST_RECIPIENT_INFO {DWORD dwVersion;CRYPT_DATA_BLOB KeyId;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct IProvideMultipleClassInfoVtbl {HRESULT ( *QueryInterface)(IProvideMultipleClassInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideMultipleClassInfo *This);ULONG ( *Release)(IProvideMultipleClassInfo *This);HRESULT ( *GetClassInfoA)(IProvideMultipleClassInfo *This, ITypeInfo **ppTI);HRESULT ( *GetGUID)(IProvideMultipleClassInfo *This, DWORD dwGuidKind, GUID *pGUID);HRESULT ( *GetMultiTypeInfoCount)(IProvideMultipleClassInfo *This, ULONG *pcti);HRESULT ( *GetInfoOfIndex)(IProvideMultipleClassInfo *This, ULONG iti, DWORD dwFlags, ITypeInfo **pptiCoClass, DWORD *pdwTIFlags, ULONG *pcdispidReserved, IID *piidPrimary, IID *piidSource);};
typedef BOOL ( *PFN_CERT_STORE_PROV_FIND_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCERT_CONTEXT *ppProvCertContext);
struct _DDHAL_SETOVERLAYPOSITIONDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSrcSurface;LPDDRAWI_DDRAWSURFACE_LCL lpDDDestSurface;LONG lXPos;LONG lYPos;HRESULT ddRVal;LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition;};
struct tagKS_DATARANGE_VIDEO_PALETTE {KSDATARANGE DataRange;BOOL bFixedSizeSamples;BOOL bTemporalCompression;DWORD StreamDescriptionFlags;DWORD MemoryAllocationFlags;KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;KS_VIDEOINFO VideoInfo;};
struct IDirectDrawSurfaceKernelVtbl {HRESULT ( *QueryInterface)(IDirectDrawSurfaceKernel *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurfaceKernel *This);ULONG ( *Release)(IDirectDrawSurfaceKernel *This);HRESULT ( *GetKernelHandle)(IDirectDrawSurfaceKernel *This, PULONG_PTR);HRESULT ( *ReleaseKernelHandle)(IDirectDrawSurfaceKernel *This);};
struct IDirectMusicPortDownloadVtbl {HRESULT ( *QueryInterface)(IDirectMusicPortDownload *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicPortDownload *This);ULONG ( *Release)(IDirectMusicPortDownload *This);HRESULT ( *GetBuffer)(IDirectMusicPortDownload *This, DWORD dwDLId, IDirectMusicDownload **ppIDMDownload);HRESULT ( *AllocateBuffer)(IDirectMusicPortDownload *This, DWORD dwSize, IDirectMusicDownload **ppIDMDownload);HRESULT ( *GetDLId)(IDirectMusicPortDownload *This, DWORD *pdwStartDLId, DWORD dwCount);HRESULT ( *GetAppend)(IDirectMusicPortDownload *This, DWORD *pdwAppend);HRESULT ( *Download)(IDirectMusicPortDownload *This, IDirectMusicDownload *pIDMDownload);HRESULT ( *Unload)(IDirectMusicPortDownload *This, IDirectMusicDownload *pIDMDownload);};
struct IInternetSecurityMgrSiteVtbl {HRESULT ( *QueryInterface)(IInternetSecurityMgrSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSecurityMgrSite *This);ULONG ( *Release)(IInternetSecurityMgrSite *This);HRESULT ( *GetWindow)(IInternetSecurityMgrSite *This, HWND *phwnd);HRESULT ( *EnableModeless)(IInternetSecurityMgrSite *This, BOOL fEnable);};
typedef BOOL ( *PFN_CERT_STORE_PROV_FIND_CRL)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_FIND_CTL)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCTL_CONTEXT pPrevCtlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCTL_CONTEXT *ppProvCtlContext);
struct _CMSG_KEY_AGREE_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB UserKeyingMaterial;DWORD dwOriginatorChoice;_CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 __anonymous0;DWORD cKeyAgreeKeyEncryptInfo;PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;DWORD dwFlags;};
struct _DD_GETVPORTOUTPUTFORMATDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwFlags;LPDDPIXELFORMAT lpddpfInputFormat;LPDDPIXELFORMAT lpddpfOutputFormats;DWORD dwNumFormats;HRESULT ddRVal;void *GetVideoPortInputFormats;};
struct _KS_VIDEO_STREAM_CONFIG_CAPS {GUID guid;ULONG VideoStandard;SIZE InputSize;SIZE MinCroppingSize;SIZE MaxCroppingSize;int CropGranularityX;int CropGranularityY;int CropAlignX;int CropAlignY;SIZE MinOutputSize;SIZE MaxOutputSize;int OutputGranularityX;int OutputGranularityY;int StretchTapsX;int StretchTapsY;int ShrinkTapsX;int ShrinkTapsY;LONGLONG MinFrameInterval;LONGLONG MaxFrameInterval;LONG MinBitsPerSecond;LONG MaxBitsPerSecond;};
struct _SECURITY_LOGON_SESSION_DATA {ULONG Size;LUID LogonId;LSA_UNICODE_STRING UserName;LSA_UNICODE_STRING LogonDomain;LSA_UNICODE_STRING AuthenticationPackage;ULONG LogonType;ULONG Session;PSID Sid;LARGE_INTEGER LogonTime;LSA_UNICODE_STRING LogonServer;LSA_UNICODE_STRING DnsDomainName;LSA_UNICODE_STRING Upn;};
struct IDirectDrawColorControlVtbl {HRESULT ( *QueryInterface)(IDirectDrawColorControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawColorControl *This);ULONG ( *Release)(IDirectDrawColorControl *This);HRESULT ( *GetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);HRESULT ( *SetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);};
typedef BOOL ( *MCDRVDESCRIBELAYERPLANEFUNC)(MCDSURFACE *pMCDSurface, LONG iPixelFormat, LONG iLayerPlane, ULONG nBytes, MCDLAYERPLANE *pMCDLayerPlane, ULONG flags);
struct _D3DHAL_RENDERPRIMITIVEDATA {ULONG_PTR dwhContext;DWORD dwOffset;DWORD dwStatus;LPDIRECTDRAWSURFACE lpExeBuf;DWORD dwTLOffset;LPDIRECTDRAWSURFACE lpTLBuf;D3DINSTRUCTION diInstruction;HRESULT ddrval;};
struct _DDHAL_CANCREATESURFACEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDSURFACEDESC lpDDSurfaceDesc;DWORD bIsDifferentPixelFormat;HRESULT ddRVal;LPDDHAL_CANCREATESURFACE CanCreateSurface;};
struct _DDHAL_GETHEAPALIGNMENTDATA {ULONG_PTR dwInstance;DWORD dwHeap;HRESULT ddRVal;LPDDHAL_GETHEAPALIGNMENT GetHeapAlignment;HEAPALIGNMENT Alignment;};
struct _DDHAL_WAITFORVPORTSYNCDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;DWORD dwFlags;DWORD dwLine;DWORD dwTimeOut;HRESULT ddRVal;LPDDHALVPORTCB_WAITFORSYNC WaitForVideoPortSync;};
struct _DD_GETVPORTINPUTFORMATDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwFlags;LPDDPIXELFORMAT lpddpfFormat;DWORD dwNumFormats;HRESULT ddRVal;void *GetVideoPortInputFormats;};
struct _DD_MISCELLANEOUS2CALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_ALPHABLT AlphaBlt;PDD_CREATESURFACEEX CreateSurfaceEx;PDD_GETDRIVERSTATE GetDriverState;PDD_DESTROYDDLOCAL DestroyDDLocal;};
struct _MSV1_0_INTERACTIVE_PROFILE {MSV1_0_PROFILE_BUFFER_TYPE MessageType;USHORT LogonCount;USHORT BadPasswordCount;LARGE_INTEGER LogonTime;LARGE_INTEGER LogoffTime;LARGE_INTEGER KickOffTime;LARGE_INTEGER PasswordLastSet;LARGE_INTEGER PasswordCanChange;LARGE_INTEGER PasswordMustChange;UNICODE_STRING LogonScript;UNICODE_STRING HomeDirectory;UNICODE_STRING FullName;UNICODE_STRING ProfilePath;UNICODE_STRING HomeDirectoryDrive;UNICODE_STRING LogonServer;ULONG UserFlags;};
struct tagKS_DATARANGE_MPEG1_VIDEO {KSDATARANGE DataRange;BOOL bFixedSizeSamples;BOOL bTemporalCompression;DWORD StreamDescriptionFlags;DWORD MemoryAllocationFlags;KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;KS_MPEG1VIDEOINFO VideoInfoHeader;};
struct tagKS_DATARANGE_MPEG2_VIDEO {KSDATARANGE DataRange;BOOL bFixedSizeSamples;BOOL bTemporalCompression;DWORD StreamDescriptionFlags;DWORD MemoryAllocationFlags;KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;KS_MPEGVIDEOINFO2 VideoInfoHeader;};
struct IAsyncRpcChannelBufferVtbl {HRESULT ( *QueryInterface)(IAsyncRpcChannelBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncRpcChannelBuffer *This);ULONG ( *Release)(IAsyncRpcChannelBuffer *This);HRESULT ( *GetBuffer)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IAsyncRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IAsyncRpcChannelBuffer *This);HRESULT ( *GetProtocolVersion)(IAsyncRpcChannelBuffer *This, DWORD *pdwVersion);HRESULT ( *Send)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ISynchronize *pSync, ULONG *pulStatus);HRESULT ( *Receive)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);HRESULT ( *GetDestCtxEx)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);};
struct IDirectMusicInstrumentVtbl {HRESULT ( *QueryInterface)(IDirectMusicInstrument *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicInstrument *This);ULONG ( *Release)(IDirectMusicInstrument *This);HRESULT ( *GetPatch)(IDirectMusicInstrument *This, DWORD *pdwPatch);HRESULT ( *SetPatch)(IDirectMusicInstrument *This, DWORD dwPatch);};
struct IReleaseMarshalBuffersVtbl {HRESULT ( *QueryInterface)(IReleaseMarshalBuffers *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReleaseMarshalBuffers *This);ULONG ( *Release)(IReleaseMarshalBuffers *This);HRESULT ( *ReleaseMarshalBuffer)(IReleaseMarshalBuffers *This, RPCOLEMESSAGE *pMsg, DWORD dwFlags, IUnknown *pChnl);};
struct _DDHAL_GETVPORTCONNECTDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;DWORD dwPortId;LPDDVIDEOPORTCONNECT lpConnect;DWORD dwNumEntries;HRESULT ddRVal;LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;};
struct _DD_UPDATENONLOCALHEAPDATA {PDD_DIRECTDRAW_GLOBAL lpDD;DWORD dwHeap;FLATPTR fpGARTLin;FLATPTR fpGARTDev;ULONG_PTR ulPolicyMaxBytes;HRESULT ddRVal;void *UpdateNonLocalHeap;};
struct _MSV1_0_LM20_LOGON_PROFILE {MSV1_0_PROFILE_BUFFER_TYPE MessageType;LARGE_INTEGER KickOffTime;LARGE_INTEGER LogoffTime;ULONG UserFlags;UCHAR UserSessionKey[16];UNICODE_STRING LogonDomainName;UCHAR LanmanSessionKey[8];UNICODE_STRING LogonServer;UNICODE_STRING UserParameters;};
typedef BOOL ( *LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef ULONG ( *MCDRVUPDATESUBTEXTUREFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDTEXTURE *pTex, ULONG lod, RECTL *pRect);
typedef BOOL ( *PFN_CMSG_EXPORT_KEY_AGREE)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL ( *PFN_CMSG_EXPORT_KEY_TRANS)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL ( *PFN_CMSG_EXPORT_MAIL_LIST)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL ( *PFN_CMSG_IMPORT_KEY_AGREE)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL ( *PFN_CMSG_IMPORT_KEY_TRANS)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL ( *PFN_CMSG_IMPORT_MAIL_LIST)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL ( *PFN_DrvIcmCheckBitmapBits)(DHPDEV, HANDLE, SURFOBJ *, PBYTE);
struct _DDHAL_DRVSETCOLORKEYDATA {LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;DWORD dwFlags;DDCOLORKEY ckNew;HRESULT ddRVal;LPDDHAL_SETCOLORKEY SetColorKey;};
struct _DDHAL_GETMOCOMPGUIDSDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;DWORD dwNumGuids;LPGUID lpGuids;HRESULT ddRVal;LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;};
struct _DDHAL_GETVPORTSIGNALDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;DWORD dwStatus;HRESULT ddRVal;LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;};
struct _DD_GETINTERNALMOCOMPDATA {PDD_DIRECTDRAW_LOCAL lpDD;GUID *lpGuid;DWORD dwWidth;DWORD dwHeight;DDPIXELFORMAT ddPixelFormat;DWORD dwScratchMemAlloc;HRESULT ddRVal;};
struct _DD_QUERYMOCOMPSTATUSDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_MOTIONCOMP_LOCAL lpMoComp;PDD_SURFACE_LOCAL lpSurface;DWORD dwFlags;HRESULT ddRVal;};
struct _KERB_INTERACTIVE_PROFILE {KERB_PROFILE_BUFFER_TYPE MessageType;USHORT LogonCount;USHORT BadPasswordCount;LARGE_INTEGER LogonTime;LARGE_INTEGER LogoffTime;LARGE_INTEGER KickOffTime;LARGE_INTEGER PasswordLastSet;LARGE_INTEGER PasswordCanChange;LARGE_INTEGER PasswordMustChange;UNICODE_STRING LogonScript;UNICODE_STRING HomeDirectory;UNICODE_STRING FullName;UNICODE_STRING ProfilePath;UNICODE_STRING HomeDirectoryDrive;UNICODE_STRING LogonServer;ULONG UserFlags;};
struct _KERB_SETPASSWORD_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;LUID LogonId;SecHandle CredentialsHandle;ULONG Flags;UNICODE_STRING DomainName;UNICODE_STRING AccountName;UNICODE_STRING Password;};
struct _MIDL_STUBLESS_PROXY_INFO {PMIDL_STUB_DESC pStubDesc;PFORMAT_STRING ProcFormatString; unsigned short *FormatStringOffset;PRPC_SYNTAX_IDENTIFIER pTransferSyntax;ULONG_PTR nCount;PMIDL_SYNTAX_INFO pSyntaxInfo;};
struct _PARTITION_INFORMATION_EX {PARTITION_STYLE PartitionStyle;LARGE_INTEGER StartingOffset;LARGE_INTEGER PartitionLength;DWORD PartitionNumber;BOOLEAN RewritePartition;_PARTITION_INFORMATION_EX___41520227951B374488E85ABED149FDD2 __anonymous0;};
struct tagKS_DATARANGE_VIDEO_VBI {KSDATARANGE DataRange;BOOL bFixedSizeSamples;BOOL bTemporalCompression;DWORD StreamDescriptionFlags;DWORD MemoryAllocationFlags;KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;KS_VBIINFOHEADER VBIInfoHeader;};
struct IDirectMusicDownloadVtbl {HRESULT ( *QueryInterface)(IDirectMusicDownload *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicDownload *This);ULONG ( *Release)(IDirectMusicDownload *This);HRESULT ( *GetBuffer)(IDirectMusicDownload *This, void **ppvBuffer, DWORD *pdwSize);};
struct IPersistPropertyBag2Vtbl {HRESULT ( *QueryInterface)(IPersistPropertyBag2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistPropertyBag2 *This);ULONG ( *Release)(IPersistPropertyBag2 *This);HRESULT ( *GetClassID)(IPersistPropertyBag2 *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistPropertyBag2 *This);HRESULT ( *Load)(IPersistPropertyBag2 *This, IPropertyBag2 *pPropBag, IErrorLog *pErrLog);HRESULT ( *Save)(IPersistPropertyBag2 *This, IPropertyBag2 *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);HRESULT ( *IsDirty)(IPersistPropertyBag2 *This);};
typedef HRESULT ( *LPD3DENUMDEVICESCALLBACK)(GUID *lpGuid, LPSTR lpDeviceDescription, LPSTR lpDeviceName, LPD3DDEVICEDESC, LPD3DDEVICEDESC, LPVOID);
typedef BOOL ( *LPWSPGETOVERLAPPEDRESULT)(SOCKET s, LPWSAOVERLAPPED lpOverlapped, LPDWORD lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags, LPINT lpErrno);
typedef BOOL ( *PFN_DrvGetDirectDrawInfo)(DHPDEV, DD_HALINFO *, DWORD *, VIDEOMEMORY *, DWORD *, DWORD *);
typedef BOOL ( *PFN_EXPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD *pcbPrivateKeyBlob);
struct _CMSG_SIGNER_ENCODE_INFO {DWORD cbSize;PCERT_INFO pCertInfo;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;};
struct _CRYPT_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;PCCERT_CONTEXT pSigningCert;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cMsgCert;PCCERT_CONTEXT *rgpMsgCert;DWORD cMsgCrl;PCCRL_CONTEXT *rgpMsgCrl;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;DWORD dwFlags;DWORD dwInnerContentType;};
struct _DDHAL_GETDRIVERINFODATA {DWORD dwSize;DWORD dwFlags;GUID guidInfo;DWORD dwExpectedSize;LPVOID lpvData;DWORD dwActualSize;HRESULT ddRVal;ULONG_PTR dwContext;};
struct _DDHAL_GETFLIPSTATUSDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;DWORD dwFlags;HRESULT ddRVal;LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;};
struct _DDHAL_GETVPORTFIELDDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;BOOL bField;HRESULT ddRVal;LPDDHALVPORTCB_GETFIELD GetVideoPortField;};
struct _DDHAL_SYNCVIDEOPORTDATA {DWORD dwSize;LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;DWORD dwOriginOffset;DWORD dwHeight;DWORD dwVBIHeight;ULONG_PTR dwDriverReserved1;ULONG_PTR dwDriverReserved2;ULONG_PTR dwDriverReserved3;HRESULT ddRVal;};
struct _DDRAWI_DDRAWCLIPPER_LCL {DWORD lpClipMore;LPDDRAWI_DDRAWCLIPPER_GBL lpGbl;LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;DWORD dwLocalRefCnt;IUnknown *pUnkOuter;LPDDRAWI_DIRECTDRAW_INT lpDD_int;ULONG_PTR dwReserved1;IUnknown *pAddrefedThisOwner;};
struct _DD_GETMOCOMPFORMATSDATA {PDD_DIRECTDRAW_LOCAL lpDD;GUID *lpGuid;DWORD dwNumFormats;LPDDPIXELFORMAT lpFormats;HRESULT ddRVal;};
struct _IMAGE_OPTIONAL_HEADER64 {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;ULONGLONG ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;ULONGLONG SizeOfStackReserve;ULONGLONG SizeOfStackCommit;ULONGLONG SizeOfHeapReserve;ULONGLONG SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct IDummyHICONIncluderVtbl {HRESULT ( *QueryInterface)(IDummyHICONIncluder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDummyHICONIncluder *This);ULONG ( *Release)(IDummyHICONIncluder *This);HRESULT ( *Dummy)(IDummyHICONIncluder *This, HICON h1, HDC h2);};
struct IExternalConnectionVtbl {HRESULT ( *QueryInterface)(IExternalConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IExternalConnection *This);ULONG ( *Release)(IExternalConnection *This);DWORD ( *AddConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved);DWORD ( *ReleaseConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved, BOOL fLastReleaseCloses);};
struct IPersistPropertyBagVtbl {HRESULT ( *QueryInterface)(IPersistPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistPropertyBag *This);ULONG ( *Release)(IPersistPropertyBag *This);HRESULT ( *GetClassID)(IPersistPropertyBag *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistPropertyBag *This);HRESULT ( *Load)(IPersistPropertyBag *This, IPropertyBag *pPropBag, IErrorLog *pErrorLog);HRESULT ( *Save)(IPersistPropertyBag *This, IPropertyBag *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);};
struct IPropertySetStorageVtbl {HRESULT ( *QueryInterface)(IPropertySetStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertySetStorage *This);ULONG ( *Release)(IPropertySetStorage *This);HRESULT ( *Create)(IPropertySetStorage *This,  IID * rfmtid,  CLSID *pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT ( *Open)(IPropertySetStorage *This,  IID * rfmtid, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT ( *Delete)(IPropertySetStorage *This,  IID * rfmtid);HRESULT ( *Enum)(IPropertySetStorage *This, IEnumSTATPROPSETSTG **ppenum);};
struct IRunningObjectTableVtbl {HRESULT ( *QueryInterface)(IRunningObjectTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRunningObjectTable *This);ULONG ( *Release)(IRunningObjectTable *This);HRESULT ( *Register)(IRunningObjectTable *This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister);HRESULT ( *Revoke)(IRunningObjectTable *This, DWORD dwRegister);HRESULT ( *IsRunning)(IRunningObjectTable *This, IMoniker *pmkObjectName);HRESULT ( *GetObjectA)(IRunningObjectTable *This, IMoniker *pmkObjectName, IUnknown **ppunkObject);HRESULT ( *NoteChangeTime)(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime);HRESULT ( *GetTimeOfLastChange)(IRunningObjectTable *This, IMoniker *pmkObjectName, FILETIME *pfiletime);HRESULT ( *EnumRunning)(IRunningObjectTable *This, IEnumMoniker **ppenumMoniker);};
struct IWindowForBindingUIVtbl {HRESULT ( *QueryInterface)(IWindowForBindingUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWindowForBindingUI *This);ULONG ( *Release)(IWindowForBindingUI *This);HRESULT ( *GetWindow)(IWindowForBindingUI *This,  GUID * rguidReason, HWND *phwnd);};
typedef BOOL ( *LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL ( *PFN_DrvGetDriverSetting)(PVOID pdriverobj, PCSTR Feature, PVOID pOutput, DWORD cbSize, PDWORD pcbNeeded, PDWORD pdwOptionsReturned);
struct _DDHAL_GETBLTSTATUSDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;DWORD dwFlags;HRESULT ddRVal;LPDDHALSURFCB_GETBLTSTATUS GetBltStatus;};
struct _DDHAL_GETVPORTLINEDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;DWORD dwLine;HRESULT ddRVal;LPDDHALVPORTCB_GETLINE GetVideoPortLine;};
struct tagMCI_ANIM_OPEN_PARMSA {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct tagMCI_OVLY_OPEN_PARMSA {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct IProvideClassInfo2Vtbl {HRESULT ( *QueryInterface)(IProvideClassInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideClassInfo2 *This);ULONG ( *Release)(IProvideClassInfo2 *This);HRESULT ( *GetClassInfoA)(IProvideClassInfo2 *This, ITypeInfo **ppTI);HRESULT ( *GetGUID)(IProvideClassInfo2 *This, DWORD dwGuidKind, GUID *pGUID);};
struct IRpcChannelBuffer2Vtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer2 *This);ULONG ( *Release)(IRpcChannelBuffer2 *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer2 *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer2 *This);HRESULT ( *GetProtocolVersion)(IRpcChannelBuffer2 *This, DWORD *pdwVersion);};
struct IRpcChannelBuffer3Vtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer3 *This);ULONG ( *Release)(IRpcChannelBuffer3 *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer3 *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer3 *This);HRESULT ( *GetProtocolVersion)(IRpcChannelBuffer3 *This, DWORD *pdwVersion);HRESULT ( *Send)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);HRESULT ( *Receive)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG ulSize, ULONG *pulStatus);HRESULT ( *Cancel)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg);HRESULT ( *GetCallContext)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg,  IID * riid, void **pInterface);HRESULT ( *GetDestCtxEx)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *GetState)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pState);HRESULT ( *RegisterAsync)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, IAsyncManager *pAsyncMgr);};
struct IShellChangeNotifyVtbl {HRESULT ( *QueryInterface)(IShellChangeNotify *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellChangeNotify *This);ULONG ( *Release)(IShellChangeNotify *This);HRESULT ( *OnChange)(IShellChangeNotify *This, LONG lEvent, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);};
typedef INT ( *LPNSPLOOKUPSERVICENEXT)(HANDLE hLookup, DWORD dwControlFlags, LPDWORD lpdwBufferLength, LPWSAQUERYSETW lpqsResults);
struct _DDHAL_CREATEVPORTDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDVIDEOPORTDESC lpDDVideoPortDesc;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;HRESULT ddRVal;LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort;};
struct _DD_ENDMOCOMPFRAMEDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_MOTIONCOMP_LOCAL lpMoComp;LPVOID lpInputData;DWORD dwInputDataSize;HRESULT ddRVal;};
struct _SP_INSTALLWIZARD_DATA {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD Flags;HPROPSHEETPAGE DynamicPages[20];DWORD NumDynamicPages;DWORD DynamicPageFlags;DWORD PrivateFlags;LPARAM PrivateData;HWND hwndWizardDlg;};
struct tagKS_DATARANGE_VIDEO2 {KSDATARANGE DataRange;BOOL bFixedSizeSamples;BOOL bTemporalCompression;DWORD StreamDescriptionFlags;DWORD MemoryAllocationFlags;KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;KS_VIDEOINFOHEADER2 VideoInfoHeader;};
struct IContinueCallbackVtbl {HRESULT ( *QueryInterface)(IContinueCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContinueCallback *This);ULONG ( *Release)(IContinueCallback *This);HRESULT ( *FContinue)(IContinueCallback *This);HRESULT ( *FContinuePrinting)(IContinueCallback *This, LONG nCntPrinted, LONG nCurPage, unsigned short *pwszPrintStatus);};
struct IDataAdviseHolderVtbl {HRESULT ( *QueryInterface)(IDataAdviseHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataAdviseHolder *This);ULONG ( *Release)(IDataAdviseHolder *This);HRESULT ( *Advise)(IDataAdviseHolder *This, IDataObject *pDataObject, FORMATETC *pFetc, DWORD advf, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT ( *Unadvise)(IDataAdviseHolder *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IDataAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *SendOnDataChange)(IDataAdviseHolder *This, IDataObject *pDataObject, DWORD dwReserved, DWORD advf);};
struct IResolveShellLinkVtbl {HRESULT ( *QueryInterface)(IResolveShellLink *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IResolveShellLink *This);ULONG ( *Release)(IResolveShellLink *This);HRESULT ( *ResolveShellLink)(IResolveShellLink *This, IUnknown *punk, HWND hwnd, DWORD fFlags);};
struct IRpcChannelBufferVtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer *This);ULONG ( *Release)(IRpcChannelBuffer *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer *This);};
struct _CERT_REVOCATION_INFO {DWORD cbSize;DWORD dwRevocationResult;LPCSTR pszRevocationOid;LPVOID pvOidSpecificInfo;BOOL fHasFreshnessTime;DWORD dwFreshnessTime;PCERT_REVOCATION_CRL_INFO pCrlInfo;};
struct _CMSG_CMS_SIGNER_INFO {DWORD dwVersion;CERT_ID SignerId;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedHash;CRYPT_ATTRIBUTES AuthAttrs;CRYPT_ATTRIBUTES UnauthAttrs;};
struct _D3DVERTEXBUFFER_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;DWORD FVF;};
struct _DD_CREATEPALETTEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_PALETTE_GLOBAL lpDDPalette;LPPALETTEENTRY lpColorTable;HRESULT ddRVal;void *CreatePalette;BOOL is_excl;};
struct _DD_CREATESURFACEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACEDESC lpDDSurfaceDesc;PDD_SURFACE_LOCAL *lplpSList;DWORD dwSCnt;HRESULT ddRVal;void *CreateSurface;};
struct _DD_SYNCVIDEOPORTDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwOriginOffset;DWORD dwHeight;DWORD dwVBIHeight;ULONG dwDriverReserved1;ULONG dwDriverReserved2;ULONG dwDriverReserved3;HRESULT ddRVal;};
struct _MSV1_0_SUBAUTH_LOGON {MSV1_0_LOGON_SUBMIT_TYPE MessageType;UNICODE_STRING LogonDomainName;UNICODE_STRING UserName;UNICODE_STRING Workstation;UCHAR ChallengeToClient[8];STRING AuthenticationInfo1;STRING AuthenticationInfo2;ULONG ParameterControl;ULONG SubAuthPackageId;};
struct _SP_DRVINFO_DATA_V2_A {DWORD cbSize;DWORD DriverType;ULONG_PTR Reserved;CHAR Description[256];CHAR MfgName[256];CHAR ProviderName[256];FILETIME DriverDate;DWORDLONG DriverVersion;};
struct _SP_DRVINFO_DATA_V2_W {DWORD cbSize;DWORD DriverType;ULONG_PTR Reserved;WCHAR Description[256];WCHAR MfgName[256];WCHAR ProviderName[256];FILETIME DriverDate;DWORDLONG DriverVersion;};
struct tagKS_DATARANGE_VIDEO {KSDATARANGE DataRange;BOOL bFixedSizeSamples;BOOL bTemporalCompression;DWORD StreamDescriptionFlags;DWORD MemoryAllocationFlags;KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;KS_VIDEOINFOHEADER VideoInfoHeader;};
struct IContextMenuSiteVtbl {HRESULT ( *QueryInterface)(IContextMenuSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContextMenuSite *This);ULONG ( *Release)(IContextMenuSite *This);HRESULT ( *DoContextMenuPopup)(IContextMenuSite *This, IUnknown *punkContextMenu, UINT fFlags, POINT pt);};
struct IShellFolderBandVtbl {HRESULT ( *QueryInterface)(IShellFolderBand *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellFolderBand *This);ULONG ( *Release)(IShellFolderBand *This);HRESULT ( *InitializeSFB)(IShellFolderBand *This, IShellFolder *psf, LPCITEMIDLIST pidl);HRESULT ( *SetBandInfoSFB)(IShellFolderBand *This, PBANDINFOSFB pbi);HRESULT ( *GetBandInfoSFB)(IShellFolderBand *This, PBANDINFOSFB pbi);};
struct IWinInetHttpInfoVtbl {HRESULT ( *QueryInterface)(IWinInetHttpInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWinInetHttpInfo *This);ULONG ( *Release)(IWinInetHttpInfo *This);HRESULT ( *QueryOption)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);HRESULT ( *QueryInfo)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);};
struct IWizardExtensionVtbl {HRESULT ( *QueryInterface)(IWizardExtension *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWizardExtension *This);ULONG ( *Release)(IWizardExtension *This);HRESULT ( *AddPages)(IWizardExtension *This, HPROPSHEETPAGE *aPages, UINT cPages, UINT *pnPagesAdded);HRESULT ( *GetFirstPage)(IWizardExtension *This, HPROPSHEETPAGE *phpage);HRESULT ( *GetLastPage)(IWizardExtension *This, HPROPSHEETPAGE *phpage);};
struct IWrappedProtocolVtbl {HRESULT ( *QueryInterface)(IWrappedProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWrappedProtocol *This);ULONG ( *Release)(IWrappedProtocol *This);HRESULT ( *GetWrapperCode)(IWrappedProtocol *This, LONG *pnCode, DWORD_PTR dwReserved);};
typedef int ( *LPWSCINSTALLPROVIDER)(LPGUID lpProviderId,  WCHAR *lpszProviderDllPath,  LPWSAPROTOCOL_INFOW lpProtocolInfoList, DWORD dwNumberOfEntries, LPINT lpErrno);
struct _D3DFINDDEVICESEARCH {DWORD dwSize;DWORD dwFlags;BOOL bHardware;D3DCOLORMODEL dcmColorModel;GUID guid;DWORD dwCaps;D3DPRIMCAPS dpcPrimCaps;};
struct _D3DINDEXBUFFER_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;};
struct _D3DNTHAL_CALLBACKS3 {DWORD dwSize;DWORD dwFlags;LPD3DNTHAL_CLEAR2CB Clear2;LPVOID lpvReserved;LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB ValidateTextureStageState;LPD3DNTHAL_DRAWPRIMITIVES2CB DrawPrimitives2;};
struct _D3DNTHAL_CLEAR2DATA {ULONG_PTR dwhContext;DWORD dwFlags;DWORD dwFillColor;D3DVALUE dvFillDepth;DWORD dwFillStencil;LPD3DRECT lpRects;DWORD dwNumRects;HRESULT ddrval;};
struct _DDHAL_FLIPVPORTDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;LPDDRAWI_DDRAWSURFACE_LCL lpSurfCurr;LPDDRAWI_DDRAWSURFACE_LCL lpSurfTarg;HRESULT ddRVal;LPDDHALVPORTCB_FLIP FlipVideoPort;};
struct _DD_COLORCONTROLDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;LPDDCOLORCONTROL lpColorData;DWORD dwFlags;HRESULT ddRVal;void *ColorControl;};
struct _DD_MOTIONCOMP_LOCAL {PDD_DIRECTDRAW_LOCAL lpDD;GUID guid;DWORD dwUncompWidth;DWORD dwUncompHeight;DDPIXELFORMAT ddUncompPixelFormat;DWORD dwDriverReserved1;DWORD dwDriverReserved2;DWORD dwDriverReserved3;LPVOID lpDriverReserved1;LPVOID lpDriverReserved2;LPVOID lpDriverReserved3;};
struct _IMAGELISTDRAWPARAMS {DWORD cbSize;HIMAGELIST himl;int i;HDC hdcDst;int x;int y;int cx;int cy;int xBitmap;int yBitmap;COLORREF rgbBk;COLORREF rgbFg;UINT fStyle;DWORD dwRop;DWORD fState;DWORD Frame;COLORREF crEffect;};
struct tagKS_VBI_FRAME_INFO {ULONG ExtendedHeaderSize;DWORD dwFrameFlags;LONGLONG PictureNumber;LONGLONG DropCount;DWORD dwSamplingFrequency;KS_TVTUNER_CHANGE_INFO TvTunerChangeInfo;KS_VBIINFOHEADER VBIInfoHeader;};
typedef BOOL ( *ACMFILTERTAGENUMCBA)(HACMDRIVERID hadid, LPACMFILTERTAGDETAILSA paftd, DWORD_PTR dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFILTERTAGENUMCBW)(HACMDRIVERID hadid, LPACMFILTERTAGDETAILSW paftd, DWORD_PTR dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATTAGENUMCBA)(HACMDRIVERID hadid, LPACMFORMATTAGDETAILSA paftd, DWORD_PTR dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATTAGENUMCBW)(HACMDRIVERID hadid, LPACMFORMATTAGDETAILSW paftd, DWORD_PTR dwInstance, DWORD fdwSupport);
struct IAsyncOperationVtbl {HRESULT ( *QueryInterface)(IAsyncOperation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncOperation *This);ULONG ( *Release)(IAsyncOperation *This);HRESULT ( *SetAsyncMode)(IAsyncOperation *This, BOOL fDoOpAsync);HRESULT ( *GetAsyncMode)(IAsyncOperation *This, BOOL *pfIsOpAsync);HRESULT ( *StartOperation)(IAsyncOperation *This, IBindCtx *pbcReserved);HRESULT ( *InOperation)(IAsyncOperation *This, BOOL *pfInAsyncOp);HRESULT ( *EndOperation)(IAsyncOperation *This, HRESULT hResult, IBindCtx *pbcReserved, DWORD dwEffects);};
struct IClassActivatorVtbl {HRESULT ( *QueryInterface)(IClassActivator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassActivator *This);ULONG ( *Release)(IClassActivator *This);HRESULT ( *GetClassObject)(IClassActivator *This,  IID * rclsid, DWORD dwClassContext, LCID locale,  IID * riid, void **ppv);};
struct IFolderViewHostVtbl {HRESULT ( *QueryInterface)(IFolderViewHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderViewHost *This);ULONG ( *Release)(IFolderViewHost *This);HRESULT ( *Initialize)(IFolderViewHost *This, HWND hwndParent, IDataObject *pdo, RECT *prc);};
struct IPassportWizardVtbl {HRESULT ( *QueryInterface)(IPassportWizard *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPassportWizard *This);ULONG ( *Release)(IPassportWizard *This);HRESULT ( *Show)(IPassportWizard *This, HWND hwndParent);HRESULT ( *SetOptions)(IPassportWizard *This, DWORD dwOptions);};
struct IPersistStorageVtbl {HRESULT ( *QueryInterface)(IPersistStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStorage *This);ULONG ( *Release)(IPersistStorage *This);HRESULT ( *GetClassID)(IPersistStorage *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStorage *This);HRESULT ( *InitNew)(IPersistStorage *This, IStorage *pStg);HRESULT ( *Load)(IPersistStorage *This, IStorage *pStg);HRESULT ( *Save)(IPersistStorage *This, IStorage *pStgSave, BOOL fSameAsLoad);HRESULT ( *SaveCompleted)(IPersistStorage *This, IStorage *pStgNew);HRESULT ( *HandsOffStorage)(IPersistStorage *This);};
struct IProfferServiceVtbl {HRESULT ( *QueryInterface)(IProfferService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProfferService *This);ULONG ( *Release)(IProfferService *This);HRESULT ( *ProfferService)(IProfferService *This,  GUID * rguidService, IServiceProvider *psp, DWORD *pdwCookie);HRESULT ( *RevokeService)(IProfferService *This, DWORD dwCookie);};
struct IProgressNotifyVtbl {HRESULT ( *QueryInterface)(IProgressNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProgressNotify *This);ULONG ( *Release)(IProgressNotify *This);HRESULT ( *OnProgress)(IProgressNotify *This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, BOOL fAccurate, BOOL fOwner);};
struct IStdMarshalInfoVtbl {HRESULT ( *QueryInterface)(IStdMarshalInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStdMarshalInfo *This);ULONG ( *Release)(IStdMarshalInfo *This);HRESULT ( *GetClassForHandler)(IStdMarshalInfo *This, DWORD dwDestContext, void *pvDestContext, CLSID *pClsid);};
struct IUserEventTimerVtbl {HRESULT ( *QueryInterface)(IUserEventTimer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUserEventTimer *This);ULONG ( *Release)(IUserEventTimer *This);HRESULT ( *SetUserEventTimer)(IUserEventTimer *This, HWND hWnd, UINT uCallbackMessage, UINT uTimerElapse, IUserEventTimerCallback *pUserEventTimerCallback, ULONG *puUserEventTimerID);HRESULT ( *KillUserEventTimer)(IUserEventTimer *This, HWND hWnd, ULONG uUserEventTimerID);HRESULT ( *GetUserEventTimerElapsed)(IUserEventTimer *This, HWND hWnd, ULONG uUserEventTimerID, UINT *puTimerElapsed);HRESULT ( *InitTimerTickInterval)(IUserEventTimer *This, UINT uTimerTickIntervalMs);};
typedef BOOL ( *LPDDENUMCALLBACKEXA)(GUID *, LPSTR, LPSTR, LPVOID, HMONITOR);
typedef int ( *LPWSCUPDATEPROVIDER)(LPGUID lpProviderId,  WCHAR *lpszProviderDllPath,  LPWSAPROTOCOL_INFOW lpProtocolInfoList, DWORD dwNumberOfEntries, LPINT lpErrno);
typedef HFF ( *PFN_DrvLoadFontFile)(ULONG, ULONG_PTR *, PVOID *, ULONG *, DESIGNVECTOR *, ULONG, ULONG);
typedef BOOL ( *PFN_DrvRealizeBrush)(BRUSHOBJ *, SURFOBJ *, SURFOBJ *, SURFOBJ *, XLATEOBJ *, ULONG);
struct _CERT_CHAIN_CONTEXT {DWORD cbSize;CERT_TRUST_STATUS TrustStatus;DWORD cChain;PCERT_SIMPLE_CHAIN *rgpChain;DWORD cLowerQualityChainContext;PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;BOOL fHasRevocationFreshnessTime;DWORD dwRevocationFreshnessTime;};
struct _DD_SETCOLORKEYDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;DWORD dwFlags;DDCOLORKEY ckNew;HRESULT ddRVal;void *SetColorKey;};
struct _ENUMERATION_BUFFER {ULONG Length;ULONG OwnerProcessId;USHORT FlowNameLength;WCHAR FlowName[256];PTC_GEN_FLOW pFlow;ULONG NumberOfFilters;TC_GEN_FILTER GenericFilter[1];};
struct _PROCESS_HEAP_ENTRY {PVOID lpData;DWORD cbData;BYTE cbOverhead;BYTE iRegionIndex;WORD wFlags;_PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07 __anonymous0;};
struct tagOBJECTDESCRIPTOR {ULONG cbSize;CLSID clsid;DWORD dwDrawAspect;SIZEL sizel;POINTL pointl;DWORD dwStatus;DWORD dwFullUserTypeName;DWORD dwSrcOfCopy;};
struct IFillLockBytesVtbl {HRESULT ( *QueryInterface)(IFillLockBytes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFillLockBytes *This);ULONG ( *Release)(IFillLockBytes *This);HRESULT ( *FillAppend)(IFillLockBytes *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *FillAt)(IFillLockBytes *This, ULARGE_INTEGER ulOffset,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *SetFillSize)(IFillLockBytes *This, ULARGE_INTEGER ulSize);HRESULT ( *Terminate)(IFillLockBytes *This, BOOL bCanceled);};
struct IOleClientSiteVtbl {HRESULT ( *QueryInterface)(IOleClientSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleClientSite *This);ULONG ( *Release)(IOleClientSite *This);HRESULT ( *SaveObject)(IOleClientSite *This);HRESULT ( *GetMoniker)(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT ( *GetContainer)(IOleClientSite *This, IOleContainer **ppContainer);HRESULT ( *ShowObject)(IOleClientSite *This);HRESULT ( *OnShowWindow)(IOleClientSite *This, BOOL fShow);HRESULT ( *RequestNewObjectLayout)(IOleClientSite *This);};
struct IPersistFolderVtbl {HRESULT ( *QueryInterface)(IPersistFolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistFolder *This);ULONG ( *Release)(IPersistFolder *This);HRESULT ( *GetClassID)(IPersistFolder *This, CLSID *pClassID);HRESULT ( *Initialize)(IPersistFolder *This, LPCITEMIDLIST pidl);};
struct _CERT_SIMPLE_CHAIN {DWORD cbSize;CERT_TRUST_STATUS TrustStatus;DWORD cElement;PCERT_CHAIN_ELEMENT *rgpElement;PCERT_TRUST_LIST_INFO pTrustListInfo;BOOL fHasRevocationFreshnessTime;DWORD dwRevocationFreshnessTime;};
struct _D3DHAL_CALLBACKS3 {DWORD dwSize;DWORD dwFlags;LPD3DHAL_CLEAR2CB Clear2;LPVOID lpvReserved;LPD3DHAL_VALIDATETEXTURESTAGESTATECB ValidateTextureStageState;LPD3DHAL_DRAWPRIMITIVES2CB DrawPrimitives2;};
struct _D3DHAL_CLEAR2DATA {ULONG_PTR dwhContext;DWORD dwFlags;DWORD dwFillColor;D3DVALUE dvFillDepth;DWORD dwFillStencil;LPD3DRECT lpRects;DWORD dwNumRects;HRESULT ddrval;};
struct _DDHAL_SETMODEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;DWORD dwModeIndex;HRESULT ddRVal;LPDDHAL_SETMODE SetMode;BOOL inexcl;BOOL useRefreshRate;};
struct _DD_SETENTRIESDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_PALETTE_GLOBAL lpDDPalette;DWORD dwBase;DWORD dwNumEntries;LPPALETTEENTRY lpEntries;HRESULT ddRVal;void *SetEntries;};
struct _DD_SETPALETTEDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;PDD_PALETTE_GLOBAL lpDDPalette;HRESULT ddRVal;void *SetPalette;BOOL Attach;};
struct _DD_VPORTCOLORDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;DWORD dwFlags;LPDDCOLORCONTROL lpColorData;HRESULT ddRVal;void *ColorControl;};
struct _MSV1_0_LM20_LOGON {MSV1_0_LOGON_SUBMIT_TYPE MessageType;UNICODE_STRING LogonDomainName;UNICODE_STRING UserName;UNICODE_STRING Workstation;UCHAR ChallengeToClient[8];STRING CaseSensitiveChallengeResponse;STRING CaseInsensitiveChallengeResponse;ULONG ParameterControl;};
struct tACMDRIVERDETAILSW {DWORD cbStruct;FOURCC fccType;FOURCC fccComp;WORD wMid;WORD wPid;DWORD vdwACM;DWORD vdwDriver;DWORD fdwSupport;DWORD cFormatTags;DWORD cFilterTags;HICON hicon;WCHAR szShortName[32];WCHAR szLongName[128];WCHAR szCopyright[80];WCHAR szLicensing[128];WCHAR szFeatures[512];};
struct tagEMRGRADIENTFILL {EMR emr;RECTL rclBounds;DWORD nVer;DWORD nTri;ULONG ulMode;TRIVERTEX Ver[1];};
struct IAVIStreamingVtbl {HRESULT ( *QueryInterface)(IAVIStreaming *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIStreaming *This);ULONG ( *Release)(IAVIStreaming *This);HRESULT ( *Begin)(IAVIStreaming *This, LONG lStart, LONG lEnd, LONG lRate);HRESULT ( *End)(IAVIStreaming *This);};
struct IShellExtInitVtbl {HRESULT ( *QueryInterface)(IShellExtInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellExtInit *This);ULONG ( *Release)(IShellExtInit *This);HRESULT ( *Initialize)(IShellExtInit *This, LPCITEMIDLIST pidlFolder, IDataObject *pdtobj, HKEY hkeyProgID);};
struct ITaskbarList2Vtbl {HRESULT ( *QueryInterface)(ITaskbarList2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITaskbarList2 *This);ULONG ( *Release)(ITaskbarList2 *This);HRESULT ( *HrInit)(ITaskbarList2 *This);HRESULT ( *AddTab)(ITaskbarList2 *This, HWND hwnd);HRESULT ( *DeleteTab)(ITaskbarList2 *This, HWND hwnd);HRESULT ( *ActivateTab)(ITaskbarList2 *This, HWND hwnd);HRESULT ( *SetActiveAlt)(ITaskbarList2 *This, HWND hwnd);HRESULT ( *MarkFullscreenWindow)(ITaskbarList2 *This, HWND hwnd, BOOL fFullscreen);};
typedef BOOL ( *LPWSPGETQOSBYNAME)(SOCKET s, LPWSABUF lpQOSName, LPQOS lpQOS, LPINT lpErrno);
typedef ULONG ( *PFN_DrvDrawEscape)(SURFOBJ *, ULONG, CLIPOBJ *, RECTL *, ULONG, PVOID);
typedef BOOL ( *PFN_DrvSetPalette)(DHPDEV, PALOBJ *, FLONG, ULONG, ULONG);
struct _DD_MAPMEMORYDATA {PDD_DIRECTDRAW_GLOBAL lpDD;BOOL bMap;HANDLE hProcess;FLATPTR fpProcess;HRESULT ddRVal;};
struct _PROPSHEETUI_INFO {WORD cbSize;WORD Version;WORD Flags;WORD Reason;HANDLE hComPropSheet;PFNCOMPROPSHEET pfnComPropSheet;LPARAM lParamInit;ULONG_PTR UserData;ULONG_PTR Result;};
struct _TOKEN_STATISTICS {LUID TokenId;LUID AuthenticationId;LARGE_INTEGER ExpirationTime;TOKEN_TYPE TokenType;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;DWORD DynamicCharged;DWORD DynamicAvailable;DWORD GroupCount;DWORD PrivilegeCount;LUID ModifiedId;};
struct tagDRAWITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemAction;UINT itemState;HWND hwndItem;HDC hDC;RECT rcItem;ULONG_PTR itemData;};
struct tagEMREXTTEXTOUTA {EMR emr;RECTL rclBounds;DWORD iGraphicsMode;FLOAT exScale;FLOAT eyScale;EMRTEXT emrtext;};
struct tagLOGCOLORSPACEA {DWORD lcsSignature;DWORD lcsVersion;DWORD lcsSize;LCSCSTYPE lcsCSType;LCSGAMUTMATCH lcsIntent;CIEXYZTRIPLE lcsEndpoints;DWORD lcsGammaRed;DWORD lcsGammaGreen;DWORD lcsGammaBlue;CHAR lcsFilename[260];};
struct tagLOGCOLORSPACEW {DWORD lcsSignature;DWORD lcsVersion;DWORD lcsSize;LCSCSTYPE lcsCSType;LCSGAMUTMATCH lcsIntent;CIEXYZTRIPLE lcsEndpoints;DWORD lcsGammaRed;DWORD lcsGammaGreen;DWORD lcsGammaBlue;WCHAR lcsFilename[260];};
struct tagNEWTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
struct tagNMLVCUSTOMDRAW {NMCUSTOMDRAW nmcd;COLORREF clrText;COLORREF clrTextBk;int iSubItem;DWORD dwItemType;COLORREF clrFace;int iIconEffect;int iIconPhase;int iPartId;int iStateId;RECT rcText;UINT uAlign;};
typedef BOOL ( *ACMFILTERENUMCBA)(HACMDRIVERID hadid, LPACMFILTERDETAILSA pafd, DWORD_PTR dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFILTERENUMCBW)(HACMDRIVERID hadid, LPACMFILTERDETAILSW pafd, DWORD_PTR dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATENUMCBA)(HACMDRIVERID hadid, LPACMFORMATDETAILSA pafd, DWORD_PTR dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATENUMCBW)(HACMDRIVERID hadid, LPACMFORMATDETAILSW pafd, DWORD_PTR dwInstance, DWORD fdwSupport);
typedef BOOL ( *ENUMRESLANGPROCA)(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
typedef BOOL ( *ENUMRESNAMEPROCA)(HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
struct IAccIdentityVtbl {HRESULT ( *QueryInterface)(IAccIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccIdentity *This);ULONG ( *Release)(IAccIdentity *This);HRESULT ( *GetIdentityString)(IAccIdentity *This, DWORD dwIDChild, BYTE **ppIDString, DWORD *pdwIDStringLen);};
struct IBanneredBarVtbl {HRESULT ( *QueryInterface)(IBanneredBar *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IBanneredBar *This);ULONG ( *Release)(IBanneredBar *This);HRESULT ( *SetIconSize)(IBanneredBar *This, DWORD iIcon);HRESULT ( *GetIconSize)(IBanneredBar *This, DWORD *piIcon);HRESULT ( *SetBitmap)(IBanneredBar *This, HBITMAP hBitmap);HRESULT ( *GetBitmap)(IBanneredBar *This, HBITMAP *phBitmap);};
struct ICatRegisterVtbl {HRESULT ( *QueryInterface)(ICatRegister *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatRegister *This);ULONG ( *Release)(ICatRegister *This);HRESULT ( *RegisterCategories)(ICatRegister *This, ULONG cCategories, CATEGORYINFO  *    rgCategoryInfo);HRESULT ( *UnRegisterCategories)(ICatRegister *This, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *RegisterClassImplCategories)(ICatRegister *This,  IID * rclsid, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *UnRegisterClassImplCategories)(ICatRegister *This,  IID * rclsid, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *RegisterClassReqCategories)(ICatRegister *This,  IID * rclsid, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *UnRegisterClassReqCategories)(ICatRegister *This,  IID * rclsid, ULONG cCategories, CATID  *    rgcatid);};
struct IChannelHookVtbl {HRESULT ( *QueryInterface)(IChannelHook *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IChannelHook *This);ULONG ( *Release)(IChannelHook *This);void ( *ClientGetSize)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize);void ( *ClientFillBuffer)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize, void *pDataBuffer);void ( *ClientNotify)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep, HRESULT hrFault);void ( *ServerNotify)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep);void ( *ServerGetSize)(IChannelHook *This,  GUID * uExtent,  IID * riid, HRESULT hrFault, ULONG *pDataSize);void ( *ServerFillBuffer)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize, void *pDataBuffer, HRESULT hrFault);};
struct IInputObjectVtbl {HRESULT ( *QueryInterface)(IInputObject *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IInputObject *This);ULONG ( *Release)(IInputObject *This);HRESULT ( *UIActivateIO)(IInputObject *This, BOOL fActivate, LPMSG lpMsg);HRESULT ( *HasFocusIO)(IInputObject *This);HRESULT ( *TranslateAcceleratorIO)(IInputObject *This, LPMSG lpMsg);};
struct IWinInetInfoVtbl {HRESULT ( *QueryInterface)(IWinInetInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWinInetInfo *This);ULONG ( *Release)(IWinInetInfo *This);HRESULT ( *QueryOption)(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);};
typedef HRESULT ( *LPFNVIEWCALLBACK)(IShellView *psvOuter, IShellFolder *psf, HWND hwndMain, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef BOOL ( *LPWPUPOSTMESSAGE)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
struct _NOTIFYICONDATAA {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;CHAR szTip[64];};
struct _NOTIFYICONDATAW {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;WCHAR szTip[64];};
struct _NTFS_STATISTICS {DWORD LogFileFullExceptions;DWORD OtherExceptions;DWORD MftReads;DWORD MftReadBytes;DWORD MftWrites;DWORD MftWriteBytes;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B MftWritesUserLevel;WORD MftWritesFlushForLogFileFull;WORD MftWritesLazyWriter;WORD MftWritesUserRequest;DWORD Mft2Writes;DWORD Mft2WriteBytes;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B Mft2WritesUserLevel;WORD Mft2WritesFlushForLogFileFull;WORD Mft2WritesLazyWriter;WORD Mft2WritesUserRequest;DWORD RootIndexReads;DWORD RootIndexReadBytes;DWORD RootIndexWrites;DWORD RootIndexWriteBytes;DWORD BitmapReads;DWORD BitmapReadBytes;DWORD BitmapWrites;DWORD BitmapWriteBytes;WORD BitmapWritesFlushForLogFileFull;WORD BitmapWritesLazyWriter;WORD BitmapWritesUserRequest;struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250 BitmapWritesUserLevel;DWORD MftBitmapReads;DWORD MftBitmapReadBytes;DWORD MftBitmapWrites;DWORD MftBitmapWriteBytes;WORD MftBitmapWritesFlushForLogFileFull;WORD MftBitmapWritesLazyWriter;WORD MftBitmapWritesUserRequest;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B MftBitmapWritesUserLevel;DWORD UserIndexReads;DWORD UserIndexReadBytes;DWORD UserIndexWrites;DWORD UserIndexWriteBytes;DWORD LogFileReads;DWORD LogFileReadBytes;DWORD LogFileWrites;DWORD LogFileWriteBytes;struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156 Allocate;};
struct _PERF_DATA_BLOCK {WCHAR Signature[4];DWORD LittleEndian;DWORD Version;DWORD Revision;DWORD TotalByteLength;DWORD HeaderLength;DWORD NumObjectTypes;LONG DefaultObject;SYSTEMTIME SystemTime;LARGE_INTEGER PerfTime;LARGE_INTEGER PerfFreq;LARGE_INTEGER PerfTime100nSec;DWORD SystemNameLength;DWORD SystemNameOffset;};
struct _VIDEOMEMORYINFO {FLATPTR fpPrimary;DWORD dwFlags;DWORD dwDisplayWidth;DWORD dwDisplayHeight;LONG lDisplayPitch;DDPIXELFORMAT ddpfDisplay;DWORD dwOffscreenAlign;DWORD dwOverlayAlign;DWORD dwTextureAlign;DWORD dwZBufferAlign;DWORD dwAlphaAlign;PVOID pvPrimary;};
struct __MCDTEXTUREDATA {MCDTEXTURESTATE textureState;MCDTEXTUREOBJSTATE textureObjState;MCDMIPMAPLEVEL *level;ULONG textureDimension;ULONG paletteSize;RGBQUAD *paletteData;ULONG paletteBaseFormat;ULONG paletteRequestedFormat;};
struct tagEMRPOLYDRAW16 {EMR emr;RECTL rclBounds;DWORD cpts;POINTS apts[1];BYTE abTypes[1];};
struct tagKS_FRAME_INFO {ULONG ExtendedHeaderSize;DWORD dwFrameFlags;LONGLONG PictureNumber;LONGLONG DropCount;HANDLE hDirectDraw;HANDLE hSurfaceHandle;RECT DirectDrawRect;DWORD Reserved1;DWORD Reserved2;DWORD Reserved3;DWORD Reserved4;};
struct tagMENUITEMINFOA {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;ULONG_PTR dwItemData;LPSTR dwTypeData;UINT cch;HBITMAP hbmpItem;};
struct tagMIDIOUTCAPS2A {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagMIDIOUTCAPS2W {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagNMTTDISPINFOA {NMHDR hdr;LPSTR lpszText;char szText[80];HINSTANCE hinst;UINT uFlags;LPARAM lParam;};
struct tagWAVEOUTCAPS2A {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagWAVEOUTCAPS2W {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct IDropSourceVtbl {HRESULT ( *QueryInterface)(IDropSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDropSource *This);ULONG ( *Release)(IDropSource *This);HRESULT ( *QueryContinueDrag)(IDropSource *This, BOOL fEscapePressed, DWORD grfKeyState);HRESULT ( *GiveFeedback)(IDropSource *This, DWORD dwEffect);};
struct IDropTargetVtbl {HRESULT ( *QueryInterface)(IDropTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDropTarget *This);ULONG ( *Release)(IDropTarget *This);HRESULT ( *DragEnter)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT ( *DragOver)(IDropTarget *This, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT ( *DragLeave)(IDropTarget *This);HRESULT ( *Drop)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);};
struct IKsTopologyVtbl {HRESULT ( *CreateNodeInstance)(IKsTopology *This, ULONG NodeId, ULONG Flags, ACCESS_MASK DesiredAccess, IUnknown *UnkOuter,  GUID * InterfaceId, LPVOID *Interface);};
struct IRpcOptionsVtbl {HRESULT ( *QueryInterface)(IRpcOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcOptions *This);ULONG ( *Release)(IRpcOptions *This);HRESULT ( *Set)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR dwValue);HRESULT ( *Query)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR *pdwValue);};
typedef HRESULT ( *LPFNDFMCALLBACK)(IShellFolder *psf, HWND hwnd, IDataObject *pdtobj, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT_PTR ( *LPPAGEPAINTHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR ( *LPPAGESETUPHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR ( *LPPRINTHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR ( *LPSETUPHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef BOOL ( *MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);
typedef BOOL ( *PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
struct _ACCESSRECTLIST {struct _ACCESSRECTLIST *lpLink;RECT rDest;LPDDRAWI_DIRECTDRAW_LCL lpOwner;LPVOID lpSurfaceData;DWORD dwFlags;LPHEAPALIASINFO lpHeapAliasInfo;};
struct _D3DDeviceDesc7 {DWORD dwDevCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMinTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureWidth;DWORD dwMaxTextureHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;DWORD dwMaxActiveLights;D3DVALUE dvMaxVertexW;GUID deviceGUID;WORD wMaxUserClipPlanes;WORD wMaxVertexBlendMatrices;DWORD dwVertexProcessingCaps;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwReserved4;};
struct _D3DVOLUME_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;UINT Width;UINT Height;UINT Depth;};
struct _DDHAL_FLIPDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpSurfCurr;LPDDRAWI_DDRAWSURFACE_LCL lpSurfTarg;DWORD dwFlags;HRESULT ddRVal;LPDDHALSURFCB_FLIP Flip;LPDDRAWI_DDRAWSURFACE_LCL lpSurfCurrLeft;LPDDRAWI_DDRAWSURFACE_LCL lpSurfTargLeft;};
struct _NMTBCUSTOMDRAW {NMCUSTOMDRAW nmcd;HBRUSH hbrMonoDither;HBRUSH hbrLines;HPEN hpenLines;COLORREF clrText;COLORREF clrMark;COLORREF clrTextHighlight;COLORREF clrBtnFace;COLORREF clrBtnHighlight;COLORREF clrHighlightHotTrack;RECT rcText;int nStringBkMode;int nHLStringBkMode;int iListGap;};
struct _SV2CVW2_PARAMS {DWORD cbSize;IShellView *psvPrev;LPCFOLDERSETTINGS pfs;IShellBrowser *psbOwner;RECT *prcView; SHELLVIEWID *pvid;HWND hwndView;};
struct icmp_echo_reply {IPAddr Address;ULONG Status;ULONG RoundTripTime;USHORT DataSize;USHORT Reserved;PVOID Data;struct ip_option_information Options;};
struct tagCWPRETSTRUCT {LRESULT lResult;LPARAM lParam;WPARAM wParam;UINT message;HWND hwnd;};
struct tagKS_VIDEOINFO {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;KS_BITMAPINFOHEADER bmiHeader;tagKS_VIDEOINFO___F8BBADE88DA80D04A6A2CB02740F1E2F __anonymous0;};
struct tagMIDIINCAPS2A {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagMIDIINCAPS2W {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagWAVEINCAPS2A {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagWAVEINCAPS2W {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct IMallocSpyVtbl {HRESULT ( *QueryInterface)(IMallocSpy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMallocSpy *This);ULONG ( *Release)(IMallocSpy *This);SIZE_T ( *PreAlloc)(IMallocSpy *This, SIZE_T cbRequest);void *( *PostAlloc)(IMallocSpy *This, void *pActual);void *( *PreFree)(IMallocSpy *This, void *pRequest, BOOL fSpyed);void ( *PostFree)(IMallocSpy *This, BOOL fSpyed);SIZE_T ( *PreRealloc)(IMallocSpy *This, void *pRequest, SIZE_T cbRequest, void **ppNewRequest, BOOL fSpyed);void *( *PostRealloc)(IMallocSpy *This, void *pActual, BOOL fSpyed);void *( *PreGetSize)(IMallocSpy *This, void *pRequest, BOOL fSpyed);SIZE_T ( *PostGetSize)(IMallocSpy *This, SIZE_T cbActual, BOOL fSpyed);void *( *PreDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed);int ( *PostDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed, int fActual);void ( *PreHeapMinimize)(IMallocSpy *This);void ( *PostHeapMinimize)(IMallocSpy *This);};
struct IOleWindowVtbl {HRESULT ( *QueryInterface)(IOleWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleWindow *This);ULONG ( *Release)(IOleWindow *This);HRESULT ( *GetWindow)(IOleWindow *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleWindow *This, BOOL fEnterMode);};
struct IQueryInfoVtbl {HRESULT ( *QueryInterface)(IQueryInfo *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IQueryInfo *This);ULONG ( *Release)(IQueryInfo *This);HRESULT ( *GetInfoTip)(IQueryInfo *This, DWORD dwFlags, WCHAR **ppwszTip);HRESULT ( *GetInfoFlags)(IQueryInfo *This, DWORD *pdwFlags);};
struct _CMC_DATA_INFO {DWORD cTaggedAttribute;PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;DWORD cTaggedRequest;PCMC_TAGGED_REQUEST rgTaggedRequest;DWORD cTaggedContentInfo;PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;DWORD cTaggedOtherMsg;PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;};
struct _MCDPIXELSTATE {MCDPIXELTRANSFER pixelTransferModes;MCDPIXELPACK pixelPackModes;MCDPIXELUNPACK pixelUnpackModes;ULONG readBuffer;MCDCOORD rasterPos;};
struct _NETRESOURCE2A {DWORD dwScope;DWORD dwType;DWORD dwUsage;DWORD dwDisplayType;LPSTR lpLocalName;LPSTR lpRemoteName;LPSTR lpComment;NS_INFO ns_info;GUID ServiceType;DWORD dwProtocols;LPINT lpiProtocols;};
struct _SERVICE_INFOA {LPGUID lpServiceType;LPSTR lpServiceName;LPSTR lpComment;LPSTR lpLocale;DWORD dwDisplayHint;DWORD dwVersion;DWORD dwTime;LPSTR lpMachineName;LPSERVICE_ADDRESSES lpServiceAddress;BLOB ServiceSpecificInfo;};
struct _WINTRUST_DATA {DWORD cbStruct;LPVOID pPolicyCallbackData;LPVOID pSIPClientData;DWORD dwUIChoice;DWORD fdwRevocationChecks;DWORD dwUnionChoice;_WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB __anonymous0;DWORD dwStateAction;HANDLE hWVTStateData;WCHAR *pwszURLReference;DWORD dwProvFlags;};
struct tagEMRFRAMERGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;DWORD ihBrush;SIZEL szlStroke;BYTE RgnData[1];};
struct tagEMRPOLYDRAW {EMR emr;RECTL rclBounds;DWORD cptl;POINTL aptl[1];BYTE abTypes[1];};
struct tagEXTLOGFONTW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];DWORD elfVersion;DWORD elfStyleSize;DWORD elfMatch;DWORD elfReserved;BYTE elfVendorId[4];DWORD elfCulture;PANOSE elfPanose;};
struct tagMIXERCAPS2A {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagMIXERCAPS2W {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagQACONTAINER {ULONG cbSize;IOleClientSite *pClientSite;IAdviseSinkEx *pAdviseSink;IPropertyNotifySink *pPropertyNotifySink;IUnknown *pUnkEventSink;DWORD dwAmbientFlags;OLE_COLOR colorFore;OLE_COLOR colorBack;IFont *pFont;IOleUndoManager *pUndoMgr;DWORD dwAppearance;LONG lcid;HPALETTE hpal;IBindHost *pBindHost;IOleControlSite *pOleControlSite;IServiceProvider *pServiceProvider;};
typedef LRESULT ( *ACMDRIVERPROC)(DWORD_PTR, HACMDRIVERID, UINT, LPARAM, LPARAM);
struct IMarshal2Vtbl {HRESULT ( *QueryInterface)(IMarshal2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarshal2 *This);ULONG ( *Release)(IMarshal2 *This);HRESULT ( *GetUnmarshalClass)(IMarshal2 *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);HRESULT ( *GetMarshalSizeMax)(IMarshal2 *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);HRESULT ( *MarshalInterface)(IMarshal2 *This, IStream *pStm,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);HRESULT ( *UnmarshalInterface)(IMarshal2 *This, IStream *pStm,  IID * riid, void **ppv);HRESULT ( *ReleaseMarshalData)(IMarshal2 *This, IStream *pStm);HRESULT ( *DisconnectObject)(IMarshal2 *This, DWORD dwReserved);};
struct IMenuBandVtbl {HRESULT ( *QueryInterface)(IMenuBand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMenuBand *This);ULONG ( *Release)(IMenuBand *This);HRESULT ( *IsMenuMessage)(IMenuBand *This, MSG *pmsg);HRESULT ( *TranslateMenuMessage)(IMenuBand *This, MSG *pmsg, LRESULT *plRet);};
typedef UINT_PTR ( *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef SOCKET ( *LPWSPJOINLEAF)(SOCKET s,  struct sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, DWORD dwFlags, LPINT lpErrno);
typedef ULONG_PTR ( *MCDRVDRAWFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDMEM *pMCDExecMem, UCHAR *pStart, UCHAR *pEnd);
struct _D3DMATERIAL7 {_D3DMATERIAL7___F37024B6A2A7DA8F8161E452127F778F __anonymous0;_D3DMATERIAL7___B545799AB1B094EA7448ADA6B118C0D5 __anonymous2;_D3DMATERIAL7___48A7D73869B8DD97079A7DB0052C867A __anonymous4;_D3DMATERIAL7___4E89CE7B3871A99DAB3B73BC63770FCE __anonymous6;_D3DMATERIAL7___0E29CCD1ABCFA56B0343B217BB93547E __anonymous8;};
struct _DCIOFFSCREEN {DCISURFACEINFO dciInfo;DCIRVAL ( *Draw)(LPVOID);DCIRVAL ( *SetClipList)(LPVOID, LPRGNDATA);DCIRVAL ( *SetDestination)(LPVOID, LPRECT, LPRECT);};
struct _IMAGE_SYMBOL {union _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3 N;DWORD Value;SHORT SectionNumber;WORD Type;BYTE StorageClass;BYTE NumberOfAuxSymbols;};
struct _STARTUPINFOA {DWORD cb;LPSTR lpReserved;LPSTR lpDesktop;LPSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
struct tagWINDOWINFO {DWORD cbSize;RECT rcWindow;RECT rcClient;DWORD dwStyle;DWORD dwExStyle;DWORD dwWindowStatus;UINT cxWindowBorders;UINT cyWindowBorders;ATOM atomWindowType;WORD wCreatorVersion;};
struct IMarshalVtbl {HRESULT ( *QueryInterface)(IMarshal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarshal *This);ULONG ( *Release)(IMarshal *This);HRESULT ( *GetUnmarshalClass)(IMarshal *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);HRESULT ( *GetMarshalSizeMax)(IMarshal *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);HRESULT ( *MarshalInterface)(IMarshal *This, IStream *pStm,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);HRESULT ( *UnmarshalInterface)(IMarshal *This, IStream *pStm,  IID * riid, void **ppv);HRESULT ( *ReleaseMarshalData)(IMarshal *This, IStream *pStm);HRESULT ( *DisconnectObject)(IMarshal *This, DWORD dwReserved);};
typedef UINT_PTR ( *LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR ( *LPCFHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR ( *LPFRHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef int ( *LPWSPSTARTUP)(WORD wVersionRequested, LPWSPDATA lpWSPData, LPWSAPROTOCOL_INFOW lpProtocolInfo, WSPUPCALLTABLE UpcallTable, LPWSPPROC_TABLE lpProcTable);
typedef DWORD ( *RASDIALFUNC2)(ULONG_PTR, DWORD, HRASCONN, UINT, enum tagRASCONNSTATE, DWORD, DWORD);
struct _CREDENTIALA {DWORD Flags;DWORD Type;LPSTR TargetName;LPSTR Comment;FILETIME LastWritten;DWORD CredentialBlobSize;LPBYTE CredentialBlob;DWORD Persist;DWORD AttributeCount;PCREDENTIAL_ATTRIBUTEA Attributes;LPSTR TargetAlias;LPSTR UserName;};
struct _CTL_CONTEXT {DWORD dwMsgAndCertEncodingType;BYTE *pbCtlEncoded;DWORD cbCtlEncoded;PCTL_INFO pCtlInfo;HCERTSTORE hCertStore;HCRYPTMSG hCryptMsg;BYTE *pbCtlContent;DWORD cbCtlContent;};
struct _DISK_RECORD {LARGE_INTEGER ByteOffset;LARGE_INTEGER StartTime;LARGE_INTEGER EndTime;PVOID VirtualAddress;DWORD NumberOfBytes;BYTE DeviceNumber;BOOLEAN ReadRequest;};
struct _JOB_INFO_2A {DWORD JobId;LPSTR pPrinterName;LPSTR pMachineName;LPSTR pUserName;LPSTR pDocument;LPSTR pNotifyName;LPSTR pDatatype;LPSTR pPrintProcessor;LPSTR pParameters;LPSTR pDriverName;LPDEVMODEA pDevMode;LPSTR pStatus;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Status;DWORD Priority;DWORD Position;DWORD StartTime;DWORD UntilTime;DWORD TotalPages;DWORD Size;SYSTEMTIME Submitted;DWORD Time;DWORD PagesPrinted;};
struct _SYSTEM_INFO {_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F __anonymous0;DWORD dwPageSize;LPVOID lpMinimumApplicationAddress;LPVOID lpMaximumApplicationAddress;DWORD_PTR dwActiveProcessorMask;DWORD dwNumberOfProcessors;DWORD dwProcessorType;DWORD dwAllocationGranularity;WORD wProcessorLevel;WORD wProcessorRevision;};
struct _VIDEOMEMORY {DWORD dwFlags;FLATPTR fpStart;_VIDEOMEMORY___F643F706E5FAED7B713649E0BB2B511C __anonymous0;DDSCAPS ddsCaps;DDSCAPS ddsCapsAlt;_VIDEOMEMORY___9185259A75FBB280E946CF1BC6C2CB4D __anonymous2;};
struct _devicemodeA {BYTE dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;_devicemodeA___CB1E1A2E30D5738ACA9AADF670A603C7 __anonymous0;short dmColor;short dmDuplex;short dmYResolution;short dmTTOption;short dmCollate;BYTE dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;_devicemodeA___4FBEBCCE69364E072421C9DF045BB77C __anonymous6;DWORD dmDisplayFrequency;DWORD dmICMMethod;DWORD dmICMIntent;DWORD dmMediaType;DWORD dmDitherType;DWORD dmReserved1;DWORD dmReserved2;DWORD dmPanningWidth;DWORD dmPanningHeight;};
struct _devicemodeW {WCHAR dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;_devicemodeW___5A39A2C3BB0B1D2D5888DFEE2BA0B23C __anonymous0;short dmColor;short dmDuplex;short dmYResolution;short dmTTOption;short dmCollate;WCHAR dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;_devicemodeA___4FBEBCCE69364E072421C9DF045BB77C __anonymous4;DWORD dmDisplayFrequency;DWORD dmICMMethod;DWORD dmICMIntent;DWORD dmMediaType;DWORD dmDitherType;DWORD dmReserved1;DWORD dmReserved2;DWORD dmPanningWidth;DWORD dmPanningHeight;};
struct tagAUXCAPS2A {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagAUXCAPS2W {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;GUID ManufacturerGuid;GUID ProductGuid;GUID NameGuid;};
struct tagCapStatus {UINT uiImageWidth;UINT uiImageHeight;BOOL fLiveWindow;BOOL fOverlayWindow;BOOL fScale;POINT ptScroll;BOOL fUsingDefaultPalette;BOOL fAudioHardware;BOOL fCapFileExists;DWORD dwCurrentVideoFrame;DWORD dwCurrentVideoFramesDropped;DWORD dwCurrentWaveSamples;DWORD dwCurrentTimeElapsedMS;HPALETTE hPalCurrent;BOOL fCapturingNow;DWORD dwReturn;UINT wNumVideoAllocated;UINT wNumAudioAllocated;};
typedef UINT ( *LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
typedef SOCKET ( *LPWSPSOCKET)(int af, int type, int protocol, LPWSAPROTOCOL_INFOW lpProtocolInfo, GROUP g, DWORD dwFlags, LPINT lpErrno);
typedef HDDEDATA ( *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
struct _AppBarData {DWORD cbSize;HWND hWnd;UINT uCallbackMessage;UINT uEdge;RECT rc;LPARAM lParam;};
struct _FIELD_INFO {PUCHAR fName;PUCHAR printName;ULONG size;ULONG fOptions;ULONG64 address;_FIELD_INFO___510B7A64051C47DF2E916A87C3B03279 __anonymous0;ULONG TypeId;ULONG FieldOffset;ULONG BufferSize;struct _FIELD_INFO___BitField BitField;unsigned int fPointer : 1;};
struct _VIDMEMINFO {FLATPTR fpPrimary;DWORD dwFlags;DWORD dwDisplayWidth;DWORD dwDisplayHeight;LONG lDisplayPitch;DDPIXELFORMAT ddpfDisplay;DWORD dwOffscreenAlign;DWORD dwOverlayAlign;DWORD dwTextureAlign;DWORD dwZBufferAlign;DWORD dwAlphaAlign;DWORD dwNumHeaps;LPVIDMEM pvmList;};
struct tagRASCONNA {DWORD dwSize;HRASCONN hrasconn;CHAR szEntryName[257];CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szPhonebook[260];DWORD dwSubEntry;GUID guidEntry;DWORD dwFlags;LUID luid;};
struct tagRASCONNW {DWORD dwSize;HRASCONN hrasconn;WCHAR szEntryName[257];WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szPhonebook[260];DWORD dwSubEntry;GUID guidEntry;DWORD dwFlags;LUID luid;};
typedef LRESULT ( *DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);
typedef HDDEDATA  FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef BOOL ( *ORASADFUNC)(HWND, LPSTR, DWORD, LPDWORD);
struct _D3DLIGHT2 {DWORD dwSize;D3DLIGHTTYPE dltType;D3DCOLORVALUE dcvColor;D3DVECTOR dvPosition;D3DVECTOR dvDirection;D3DVALUE dvRange;D3DVALUE dvFalloff;D3DVALUE dvAttenuation0;D3DVALUE dvAttenuation1;D3DVALUE dvAttenuation2;D3DVALUE dvTheta;D3DVALUE dvPhi;DWORD dwFlags;};
struct _DRAGINFOA {UINT uSize;POINT pt;BOOL fNC;LPSTR lpFileList;DWORD grfKeyState;};
struct _GLYPHDATA {GLYPHDEF gdf;HGLYPH hg;FIX fxD;FIX fxA;FIX fxAB;FIX fxInkTop;FIX fxInkBottom;RECTL rclInk;POINTQF ptqD;};
struct _LINEATTRS {FLONG fl;ULONG iJoin;ULONG iEndCap;FLOAT_LONG elWidth;FLOATL eMiterLimit;ULONG cstyle;PFLOAT_LONG pstyle;FLOAT_LONG elStyleState;};
struct tagDEVINFO {FLONG flGraphicsCaps;LOGFONTW lfDefaultFont;LOGFONTW lfAnsiVarFont;LOGFONTW lfAnsiFixFont;ULONG cFonts;ULONG iDitherFormat;USHORT cxDither;USHORT cyDither;HPALETTE hpalDefault;FLONG flGraphicsCaps2;};
struct _D3DLIGHT {DWORD dwSize;D3DLIGHTTYPE dltType;D3DCOLORVALUE dcvColor;D3DVECTOR dvPosition;D3DVECTOR dvDirection;D3DVALUE dvRange;D3DVALUE dvFalloff;D3DVALUE dvAttenuation0;D3DVALUE dvAttenuation1;D3DVALUE dvAttenuation2;D3DVALUE dvTheta;D3DVALUE dvPhi;};
struct _FONTDIFF {BYTE jReserved1;BYTE jReserved2;BYTE jReserved3;BYTE bWeight;USHORT usWinWeight;FSHORT fsSelection;FWORD fwdAveCharWidth;FWORD fwdMaxCharInc;POINTL ptlCaret;};
struct tagSMDATA {DWORD dwMask;DWORD dwFlags;HMENU hmenu;HWND hwnd;UINT uId;UINT uIdParent;UINT uIdAncestor;IUnknown *punk;LPITEMIDLIST pidlFolder;LPITEMIDLIST pidlItem;IShellFolder *psf;void *pvUserData;};
struct _FONTOBJ {ULONG iUniq;ULONG iFace;ULONG cxMax;FLONG flFontType;ULONG_PTR iTTUniq;ULONG_PTR iFile;SIZE sizLogResPpi;ULONG ulStyleSize;PVOID pvConsumer;PVOID pvProducer;};
typedef INT_PTR ( *DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef LRESULT ( *WNDPROC)(HWND, UINT, WPARAM, LPARAM);
struct _VIDMEM {DWORD dwFlags;FLATPTR fpStart;_VIDEOMEMORY___F643F706E5FAED7B713649E0BB2B511C __anonymous0;DDSCAPS ddsCaps;DDSCAPS ddsCapsAlt;_VIDMEM___99A34FFB5DAE936C058DAB09DE9C6078 __anonymous2;};
struct tagDEC {USHORT wReserved;tagDEC___64EC678C49E7BE49873AFBFB7A849D34 __anonymous0;ULONG Hi32;union {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous1;ULONGLONG Lo64;};};
struct _CSFV {UINT cbSize;IShellFolder *pshf;IShellView *psvOuter;LPCITEMIDLIST pidl;LONG lEvents;LPFNVIEWCALLBACK pfnCallback;FOLDERVIEWMODE fvm;};
struct IDirectSoundCaptureFXNoiseSuppressVtbl {HRESULT ( *QueryInterface)(IDirectSoundCaptureFXNoiseSuppress *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCaptureFXNoiseSuppress *This);ULONG ( *Release)(IDirectSoundCaptureFXNoiseSuppress *This);HRESULT ( *SetAllParameters)(IDirectSoundCaptureFXNoiseSuppress *This, LPCDSCFXNoiseSuppress pcDscFxNoiseSuppress);HRESULT ( *GetAllParameters)(IDirectSoundCaptureFXNoiseSuppress *This, LPDSCFXNoiseSuppress pDscFxNoiseSuppress);HRESULT ( *Reset)(IDirectSoundCaptureFXNoiseSuppress *This);};
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;void *pvKeyWrapAuxInfo;HCRYPTPROV hCryptProv;DWORD dwKeySpec;DWORD dwKeyChoice;_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8 __anonymous0;CRYPT_DATA_BLOB UserKeyingMaterial;DWORD cRecipientEncryptedKeys;PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;};
struct _C8E3A74D850A8EB44C7483CB257B5DD1 {UINT cbSize;DWORD dwMask;int idCommand;int iImage;BYTE fsState;BYTE fsStyle;WORD cx;DWORD_PTR lParam;LPSTR pszText;int cchText;};
struct _F1B55BC800274E3ABC9BA0A46288924E {DWORD RecordLength;WORD MajorVersion;WORD MinorVersion;DWORDLONG FileReferenceNumber;DWORDLONG ParentFileReferenceNumber;USN Usn;LARGE_INTEGER TimeStamp;DWORD Reason;DWORD SourceInfo;DWORD SecurityId;DWORD FileAttributes;WORD FileNameLength;WORD FileNameOffset;WCHAR FileName[1];};
typedef BOOL ( *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags,  void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo);
typedef BOOL ( *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE *pbClearTextKey, DWORD *pcbClearTextKey, LPVOID pVoidDecryptFunc);
typedef BOOL ( *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm, CRYPT_DATA_BLOB *pClearTextPrivateKey, BYTE *pbEncryptedKey, DWORD *pcbEncryptedKey, LPVOID pVoidEncryptFunc);
struct _DDHAL_GETAVAILDRIVERMEMORYDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;DDSCAPS DDSCaps;DWORD dwTotal;DWORD dwFree;HRESULT ddRVal;LPDDHAL_GETAVAILDRIVERMEMORY GetAvailDriverMemory;DDSCAPSEX ddsCapsEx;};
struct _DDHAL_GETVPORTOUTPUTFORMATDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;DWORD dwFlags;LPDDPIXELFORMAT lpddpfInputFormat;LPDDPIXELFORMAT lpddpfOutputFormats;DWORD dwNumFormats;HRESULT ddRVal;LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;};
struct IDirectDrawVideoPortNotifyVtbl {HRESULT ( *QueryInterface)(IDirectDrawVideoPortNotify *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawVideoPortNotify *This);ULONG ( *Release)(IDirectDrawVideoPortNotify *This);HRESULT ( *AcquireNotification)(IDirectDrawVideoPortNotify *This, HANDLE *, LPDDVIDEOPORTNOTIFY);HRESULT ( *ReleaseNotification)(IDirectDrawVideoPortNotify *This, HANDLE);};
typedef HANDLE ( *PFN_DrvIcmCreateColorTransform)(DHPDEV, LPLOGCOLORSPACEW, LPVOID, ULONG, LPVOID, ULONG, LPVOID, ULONG, DWORD);
struct _DDHAL_GETVPORTINPUTFORMATDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;DWORD dwFlags;LPDDPIXELFORMAT lpddpfFormat;DWORD dwNumFormats;HRESULT ddRVal;LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;};
struct IDirectSoundFXWavesReverbVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXWavesReverb *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXWavesReverb *This);ULONG ( *Release)(IDirectSoundFXWavesReverb *This);HRESULT ( *SetAllParameters)(IDirectSoundFXWavesReverb *This, LPCDSFXWavesReverb pcDsFxWavesReverb);HRESULT ( *GetAllParameters)(IDirectSoundFXWavesReverb *This, LPDSFXWavesReverb pDsFxWavesReverb);};
struct _D3DNTHAL_DRAWPRIMITIVES2DATA {ULONG_PTR dwhContext;DWORD dwFlags;DWORD dwVertexType;PDD_SURFACE_LOCAL lpDDCommands;DWORD dwCommandOffset;DWORD dwCommandLength;_D3DNTHAL_DRAWPRIMITIVES2DATA___4A40E7D6792F856550440E087D486853 __anonymous0;DWORD dwVertexOffset;DWORD dwVertexLength;DWORD dwReqVertexBufSize;DWORD dwReqCommandBufSize;LPDWORD lpdwRStates;_D3DHAL_DRAWPRIMITIVES2DATA___DD26F1CDDCEF09909ADB7370566018B7 __anonymous1;DWORD dwErrorOffset;};
struct _DDHAL_UPDATENONLOCALHEAPDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;DWORD dwHeap;FLATPTR fpGARTLin;FLATPTR fpGARTDev;ULONG_PTR ulPolicyMaxBytes;HRESULT ddRVal;LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap;};
struct IDirectSoundFXCompressorVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXCompressor *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXCompressor *This);ULONG ( *Release)(IDirectSoundFXCompressor *This);HRESULT ( *SetAllParameters)(IDirectSoundFXCompressor *This, LPCDSFXCompressor pcDsFxCompressor);HRESULT ( *GetAllParameters)(IDirectSoundFXCompressor *This, LPDSFXCompressor pDsFxCompressor);};
struct IDirectSoundFXDistortionVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXDistortion *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXDistortion *This);ULONG ( *Release)(IDirectSoundFXDistortion *This);HRESULT ( *SetAllParameters)(IDirectSoundFXDistortion *This, LPCDSFXDistortion pcDsFxDistortion);HRESULT ( *GetAllParameters)(IDirectSoundFXDistortion *This, LPDSFXDistortion pDsFxDistortion);};
struct _D3DHAL_DRAWONEPRIMITIVEDATA {ULONG_PTR dwhContext;DWORD dwFlags;D3DPRIMITIVETYPE PrimitiveType;_D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA___D502B0312B70DCF8ACF8FE55005DEB1B __anonymous0;LPVOID lpvVertices;DWORD dwNumVertices;DWORD dwReserved;HRESULT ddrval;};
struct _DDHAL_GETINTERNALMOCOMPDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPGUID lpGuid;DWORD dwWidth;DWORD dwHeight;DDPIXELFORMAT ddPixelFormat;DWORD dwScratchMemAlloc;HRESULT ddRVal;LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;};
struct _DDHAL_QUERYMOCOMPSTATUSDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;LPDDRAWI_DDRAWSURFACE_LCL lpSurface;DWORD dwFlags;HRESULT ddRVal;LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;};
struct _KERB_SETPASSWORD_EX_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;LUID LogonId;SecHandle CredentialsHandle;ULONG Flags;UNICODE_STRING AccountRealm;UNICODE_STRING AccountName;UNICODE_STRING Password;UNICODE_STRING ClientRealm;UNICODE_STRING ClientName;BOOLEAN Impersonating;UNICODE_STRING KdcAddress;ULONG KdcAddressType;};
struct IDirectDrawGammaControlVtbl {HRESULT ( *QueryInterface)(IDirectDrawGammaControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawGammaControl *This);ULONG ( *Release)(IDirectDrawGammaControl *This);HRESULT ( *GetGammaRamp)(IDirectDrawGammaControl *This, DWORD, LPDDGAMMARAMP);HRESULT ( *SetGammaRamp)(IDirectDrawGammaControl *This, DWORD, LPDDGAMMARAMP);};
typedef BOOL ( *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData);
typedef BOOL ( *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY *phEncryptKey);
struct _D3DHAL_DRAWPRIMITIVES2DATA {ULONG_PTR dwhContext;DWORD dwFlags;DWORD dwVertexType;LPDDRAWI_DDRAWSURFACE_LCL lpDDCommands;DWORD dwCommandOffset;DWORD dwCommandLength;_D3DHAL_DRAWPRIMITIVES2DATA___9EC3BABFFB78E494A9811F3E77A2E483 __anonymous0;DWORD dwVertexOffset;DWORD dwVertexLength;DWORD dwReqVertexBufSize;DWORD dwReqCommandBufSize;LPDWORD lpdwRStates;_D3DHAL_DRAWPRIMITIVES2DATA___DD26F1CDDCEF09909ADB7370566018B7 __anonymous1;DWORD dwErrorOffset;};
struct _D3DNTHAL_CONTEXTCREATEDATA {_D3DNTHAL_CONTEXTCREATEDATA___DDCF36927E9BFFDD33D690AC93DE791F __anonymous0;_D3DNTHAL_CONTEXTCREATEDATA___7306C4885F53B6B53241EB9996CEFDB0 __anonymous1;_D3DNTHAL_CONTEXTCREATEDATA___A8B4623C3229555B56CAEDFBFEF613EE __anonymous2;DWORD dwPID;ULONG_PTR dwhContext;HRESULT ddrval;};
struct _DDHAL_GETMOCOMPFORMATSDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPGUID lpGuid;DWORD dwNumFormats;LPDDPIXELFORMAT lpFormats;HRESULT ddRVal;LPDDHALMOCOMPCB_GETFORMATS GetMoCompFormats;};
struct _IP_ADAPTER_UNICAST_ADDRESS {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_UNICAST_ADDRESS *Next;SOCKET_ADDRESS Address;IP_PREFIX_ORIGIN PrefixOrigin;IP_SUFFIX_ORIGIN SuffixOrigin;IP_DAD_STATE DadState;ULONG ValidLifetime;ULONG PreferredLifetime;ULONG LeaseLifetime;};
struct _KERB_RETRIEVE_TKT_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;LUID LogonId;UNICODE_STRING TargetName;ULONG TicketFlags;ULONG CacheOptions;LONG EncryptionType;SecHandle CredentialsHandle;};
struct IDirect3DBaseTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DBaseTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DBaseTexture8 *This);ULONG ( *Release)(IDirect3DBaseTexture8 *This);HRESULT ( *GetDevice)(IDirect3DBaseTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DBaseTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DBaseTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DBaseTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DBaseTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DBaseTexture8 *This);void ( *PreLoad)(IDirect3DBaseTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DBaseTexture8 *This);DWORD ( *SetLOD)(IDirect3DBaseTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DBaseTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DBaseTexture8 *This);};
struct IDirectSoundFXFlangerVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXFlanger *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXFlanger *This);ULONG ( *Release)(IDirectSoundFXFlanger *This);HRESULT ( *SetAllParameters)(IDirectSoundFXFlanger *This, LPCDSFXFlanger pcDsFxFlanger);HRESULT ( *GetAllParameters)(IDirectSoundFXFlanger *This, LPDSFXFlanger pDsFxFlanger);};
struct IDirectSoundFXParamEqVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXParamEq *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXParamEq *This);ULONG ( *Release)(IDirectSoundFXParamEq *This);HRESULT ( *SetAllParameters)(IDirectSoundFXParamEq *This, LPCDSFXParamEq pcDsFxParamEq);HRESULT ( *GetAllParameters)(IDirectSoundFXParamEq *This, LPDSFXParamEq pDsFxParamEq);};
typedef BOOL ( *PFN_DrvQueryAdvanceWidths)(DHPDEV, FONTOBJ *, ULONG, HGLYPH *, PVOID, ULONG);
typedef BOOL ( *PFN_DrvQueryDeviceSupport)(SURFOBJ *, XLATEOBJ *, XFORMOBJ *, ULONG, ULONG, PVOID, ULONG, PVOID);
typedef LONG ( *PFN_DrvQueryTrueTypeTable)(ULONG_PTR, ULONG, ULONG, PTRDIFF, ULONG, BYTE *, PBYTE *, ULONG *);
struct _D3DHAL_CONTEXTCREATEDATA {_D3DHAL_CONTEXTCREATEDATA___7D939C7B4C349D82EC03AF3B9C890713 __anonymous0;_D3DHAL_CONTEXTCREATEDATA___F97B1EB6D3AC6DA1707638C5E5848180 __anonymous1;_D3DHAL_CONTEXTCREATEDATA___AA7F4F4835B84F00D17421C4D2A8A049 __anonymous3;_D3DHAL_CONTEXTCREATEDATA___5B3AA550925D9E55122DB1650DBDB03D __anonymous5;ULONG_PTR dwhContext;HRESULT ddrval;};
struct _DDHAL_ENDMOCOMPFRAMEDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;LPVOID lpInputData;DWORD dwInputDataSize;HRESULT ddRVal;LPDDHALMOCOMPCB_ENDFRAME EndMoCompFrame;};
struct _DD_GETMOCOMPCOMPBUFFDATA {PDD_DIRECTDRAW_LOCAL lpDD;GUID *lpGuid;DWORD dwWidth;DWORD dwHeight;DDPIXELFORMAT ddPixelFormat;DWORD dwNumTypesCompBuffs;LPDDCOMPBUFFERINFO lpCompBuffInfo;HRESULT ddRVal;};
struct _DD_GETVPORTBANDWIDTHDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;LPDDPIXELFORMAT lpddpfFormat;DWORD dwWidth;DWORD dwHeight;DWORD dwFlags;LPDDVIDEOPORTBANDWIDTH lpBandwidth;HRESULT ddRVal;void *GetVideoPortBandwidth;};
struct IDirectSoundFXChorusVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXChorus *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXChorus *This);ULONG ( *Release)(IDirectSoundFXChorus *This);HRESULT ( *SetAllParameters)(IDirectSoundFXChorus *This, LPCDSFXChorus pcDsFxChorus);HRESULT ( *GetAllParameters)(IDirectSoundFXChorus *This, LPDSFXChorus pDsFxChorus);};
struct IDirectSoundFXGargleVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXGargle *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXGargle *This);ULONG ( *Release)(IDirectSoundFXGargle *This);HRESULT ( *SetAllParameters)(IDirectSoundFXGargle *This, LPCDSFXGargle pcDsFxGargle);HRESULT ( *GetAllParameters)(IDirectSoundFXGargle *This, LPDSFXGargle pDsFxGargle);};
struct _DDHAL_CREATEPALETTEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;LPPALETTEENTRY lpColorTable;HRESULT ddRVal;LPDDHAL_CREATEPALETTE CreatePalette;BOOL is_excl;};
struct _DDHAL_CREATESURFACEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDSURFACEDESC lpDDSurfaceDesc;LPDDRAWI_DDRAWSURFACE_LCL *lplpSList;DWORD dwSCnt;HRESULT ddRVal;LPDDHAL_CREATESURFACE CreateSurface;};
struct _DDHAL_DDEXEBUFCALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHALEXEBUFCB_CANCREATEEXEBUF CanCreateExecuteBuffer;LPDDHALEXEBUFCB_CREATEEXEBUF CreateExecuteBuffer;LPDDHALEXEBUFCB_DESTROYEXEBUF DestroyExecuteBuffer;LPDDHALEXEBUFCB_LOCKEXEBUF LockExecuteBuffer;LPDDHALEXEBUFCB_UNLOCKEXEBUF UnlockExecuteBuffer;};
struct _DDRAWI_DDMOTIONCOMP_LCL {LPDDRAWI_DIRECTDRAW_LCL lpDD;GUID guid;DWORD dwUncompWidth;DWORD dwUncompHeight;DDPIXELFORMAT ddUncompPixelFormat;DWORD dwInternalFlags;DWORD dwRefCnt;DWORD dwProcessId;HANDLE hMoComp;DWORD dwDriverReserved1;DWORD dwDriverReserved2;DWORD dwDriverReserved3;LPVOID lpDriverReserved1;LPVOID lpDriverReserved2;LPVOID lpDriverReserved3;};
struct _DD_BEGINMOCOMPFRAMEDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_MOTIONCOMP_LOCAL lpMoComp;PDD_SURFACE_LOCAL lpDestSurface;DWORD dwInputDataSize;LPVOID lpInputData;DWORD dwOutputDataSize;LPVOID lpOutputData;HRESULT ddRVal;};
typedef INT ( *LPNSPLOOKUPSERVICEBEGIN)(LPGUID lpProviderId, LPWSAQUERYSETW lpqsRestrictions, LPWSASERVICECLASSINFOW lpServiceClassInfo, DWORD dwControlFlags, LPHANDLE lphLookup);
struct _DDHAL_COLORCONTROLDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;LPDDCOLORCONTROL lpColorData;DWORD dwFlags;HRESULT ddRVal;LPDDHALCOLORCB_COLORCONTROL ColorControl;};
struct IDirect3DResource8Vtbl {HRESULT ( *QueryInterface)(IDirect3DResource8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DResource8 *This);ULONG ( *Release)(IDirect3DResource8 *This);HRESULT ( *GetDevice)(IDirect3DResource8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DResource8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DResource8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DResource8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DResource8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DResource8 *This);void ( *PreLoad)(IDirect3DResource8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DResource8 *This);};
struct IDirectSoundFXEchoVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXEcho *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXEcho *This);ULONG ( *Release)(IDirectSoundFXEcho *This);HRESULT ( *SetAllParameters)(IDirectSoundFXEcho *This, LPCDSFXEcho pcDsFxEcho);HRESULT ( *GetAllParameters)(IDirectSoundFXEcho *This, LPDSFXEcho pDsFxEcho);};
struct IDirectSoundNotifyVtbl {HRESULT ( *QueryInterface)(IDirectSoundNotify *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundNotify *This);ULONG ( *Release)(IDirectSoundNotify *This);HRESULT ( *SetNotificationPositions)(IDirectSoundNotify *This, DWORD dwPositionNotifies, LPCDSBPOSITIONNOTIFY pcPositionNotifies);};
struct IShellFolderViewCBVtbl {HRESULT ( *QueryInterface)(IShellFolderViewCB *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellFolderViewCB *This);ULONG ( *Release)(IShellFolderViewCB *This);HRESULT ( *MessageSFVCB)(IShellFolderViewCB *This, UINT uMsg, WPARAM wParam, LPARAM lParam);};
struct IVariantChangeTypeVtbl {HRESULT ( *QueryInterface)(IVariantChangeType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVariantChangeType *This);ULONG ( *Release)(IVariantChangeType *This);HRESULT ( *ChangeType)(IVariantChangeType *This, VARIANT *pvarDst, VARIANT *pvarSrc, LCID lcid, VARTYPE vtNew);};
typedef ULONG ( *PFN_DrvSetPointerShape)(SURFOBJ *, SURFOBJ *, SURFOBJ *, XLATEOBJ *, LONG, LONG, LONG, LONG, RECTL *, FLONG);
struct _D3DNTHALDeviceDesc_V1 {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;};
struct _D3DNTHALDeviceDesc_V2 {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;DWORD dwMinTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureWidth;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;};
struct _DDHAL_SETCOLORKEYDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;DWORD dwFlags;DDCOLORKEY ckNew;HRESULT ddRVal;LPDDHALSURFCB_SETCOLORKEY SetColorKey;};
struct _DDHAL_SYNCSURFACEDATA {DWORD dwSize;LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;DWORD dwSurfaceOffset;ULONG_PTR fpLockPtr;LONG lPitch;DWORD dwOverlayOffset;DWORD dwOverlaySrcWidth;DWORD dwOverlaySrcHeight;DWORD dwOverlayDestWidth;DWORD dwOverlayDestHeight;ULONG_PTR dwDriverReserved1;ULONG_PTR dwDriverReserved2;ULONG_PTR dwDriverReserved3;HRESULT ddRVal;};
struct IComThreadingInfoVtbl {HRESULT ( *QueryInterface)(IComThreadingInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IComThreadingInfo *This);ULONG ( *Release)(IComThreadingInfo *This);HRESULT ( *GetCurrentApartmentType)(IComThreadingInfo *This, APTTYPE *pAptType);HRESULT ( *GetCurrentThreadType)(IComThreadingInfo *This, THDTYPE *pThreadType);HRESULT ( *GetCurrentLogicalThreadId)(IComThreadingInfo *This, GUID *pguidLogicalThreadId);HRESULT ( *SetCurrentLogicalThreadId)(IComThreadingInfo *This,  GUID * rguid);};
struct IDirectDrawKernelVtbl {HRESULT ( *QueryInterface)(IDirectDrawKernel *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawKernel *This);ULONG ( *Release)(IDirectDrawKernel *This);HRESULT ( *GetCaps)(IDirectDrawKernel *This, LPDDKERNELCAPS);HRESULT ( *GetKernelHandle)(IDirectDrawKernel *This, PULONG_PTR);HRESULT ( *ReleaseKernelHandle)(IDirectDrawKernel *This);};
struct IDragSourceHelperVtbl {HRESULT ( *QueryInterface)(IDragSourceHelper *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDragSourceHelper *This);ULONG ( *Release)(IDragSourceHelper *This);HRESULT ( *InitializeFromBitmap)(IDragSourceHelper *This, LPSHDRAGIMAGE pshdi, IDataObject *pDataObject);HRESULT ( *InitializeFromWindow)(IDragSourceHelper *This, HWND hwnd, POINT *ppt, IDataObject *pDataObject);};
struct INewShortcutHookAVtbl {HRESULT ( *QueryInterface)(INewShortcutHookA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(INewShortcutHookA *This);ULONG ( *Release)(INewShortcutHookA *This);HRESULT ( *SetReferent)(INewShortcutHookA *This, LPCSTR pcszReferent, HWND hwnd);HRESULT ( *GetReferent)(INewShortcutHookA *This, LPSTR pszReferent, int cchReferent);HRESULT ( *SetFolder)(INewShortcutHookA *This, LPCSTR pcszFolder);HRESULT ( *GetFolder)(INewShortcutHookA *This, LPSTR pszFolder, int cchFolder);HRESULT ( *GetName)(INewShortcutHookA *This, LPSTR pszName, int cchName);HRESULT ( *GetExtension)(INewShortcutHookA *This, LPSTR pszExtension, int cchExtension);};
struct IOleInPlaceObjectVtbl {HRESULT ( *QueryInterface)(IOleInPlaceObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceObject *This);ULONG ( *Release)(IOleInPlaceObject *This);HRESULT ( *GetWindow)(IOleInPlaceObject *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceObject *This, BOOL fEnterMode);HRESULT ( *InPlaceDeactivate)(IOleInPlaceObject *This);HRESULT ( *UIDeactivate)(IOleInPlaceObject *This);HRESULT ( *SetObjectRects)(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT ( *ReactivateAndUndo)(IOleInPlaceObject *This);};
struct IPropertyPageSiteVtbl {HRESULT ( *QueryInterface)(IPropertyPageSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPageSite *This);ULONG ( *Release)(IPropertyPageSite *This);HRESULT ( *OnStatusChange)(IPropertyPageSite *This, DWORD dwFlags);HRESULT ( *GetLocaleID)(IPropertyPageSite *This, LCID *pLocaleID);HRESULT ( *GetPageContainer)(IPropertyPageSite *This, IUnknown **ppUnk);HRESULT ( *TranslateAcceleratorA)(IPropertyPageSite *This, MSG *pMsg);};
typedef BOOL ( *PFN_DrvTransparentBlt)(SURFOBJ *, SURFOBJ *, CLIPOBJ *, XLATEOBJ *, RECTL *, RECTL *, ULONG, ULONG);
struct _DDHAL_SETENTRIESDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;DWORD dwBase;DWORD dwNumEntries;LPPALETTEENTRY lpEntries;HRESULT ddRVal;LPDDHALPALCB_SETENTRIES SetEntries;};
struct _DDHAL_SETPALETTEDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;LPDDRAWI_DDRAWPALETTE_GBL lpDDPalette;HRESULT ddRVal;LPDDHALSURFCB_SETPALETTE SetPalette;BOOL Attach;};
struct _DDHAL_VPORTCOLORDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;DWORD dwFlags;LPDDCOLORCONTROL lpColorData;HRESULT ddRVal;LPDDHALVPORTCB_COLORCONTROL ColorControl;};
struct _DD_UPDATEOVERLAYDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDDestSurface;RECTL rDest;PDD_SURFACE_LOCAL lpDDSrcSurface;RECTL rSrc;DWORD dwFlags;DDOVERLAYFX overlayFX;HRESULT ddRVal;void *UpdateOverlay;};
struct _KERB_DECRYPT_REQUEST {KERB_PROTOCOL_MESSAGE_TYPE MessageType;LUID LogonId;ULONG Flags;LONG CryptoType;LONG KeyUsage;KERB_CRYPTO_KEY Key;ULONG EncryptedDataSize;ULONG InitialVectorSize;PUCHAR InitialVector;PUCHAR EncryptedData;};
struct _KERB_EXTERNAL_TICKET {PKERB_EXTERNAL_NAME ServiceName;PKERB_EXTERNAL_NAME TargetName;PKERB_EXTERNAL_NAME ClientName;UNICODE_STRING DomainName;UNICODE_STRING TargetDomainName;UNICODE_STRING AltTargetDomainName;KERB_CRYPTO_KEY SessionKey;ULONG TicketFlags;ULONG Flags;LARGE_INTEGER KeyExpirationTime;LARGE_INTEGER StartTime;LARGE_INTEGER EndTime;LARGE_INTEGER RenewUntil;LARGE_INTEGER TimeSkew;ULONG EncodedTicketSize;PUCHAR EncodedTicket;};
struct IDirectMusicThruVtbl {HRESULT ( *QueryInterface)(IDirectMusicThru *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicThru *This);ULONG ( *Release)(IDirectMusicThru *This);HRESULT ( *ThruChannel)(IDirectMusicThru *This, DWORD dwSourceChannelGroup, DWORD dwSourceChannel, DWORD dwDestinationChannelGroup, DWORD dwDestinationChannel, LPDIRECTMUSICPORT pDestinationPort);};
struct _CRYPT_PROVIDER_CERT {DWORD cbStruct;PCCERT_CONTEXT pCert;BOOL fCommercial;BOOL fTrustedRoot;BOOL fSelfSigned;BOOL fTestCert;DWORD dwRevokedReason;DWORD dwConfidence;DWORD dwError;CTL_CONTEXT *pTrustListContext;BOOL fTrustListSignerCert;PCCTL_CONTEXT pCtlContext;DWORD dwCtlError;BOOL fIsCyclic;PCERT_CHAIN_ELEMENT pChainElement;};
struct _DD_RENDERMOCOMPDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_MOTIONCOMP_LOCAL lpMoComp;DWORD dwNumBuffers;LPDDMOCOMPBUFFERINFO lpBufferInfo;DWORD dwFunction;LPVOID lpInputData;DWORD dwInputDataSize;LPVOID lpOutputData;DWORD dwOutputDataSize;HRESULT ddRVal;};
struct _SYSTEM_POWER_POLICY {DWORD Revision;POWER_ACTION_POLICY PowerButton;POWER_ACTION_POLICY SleepButton;POWER_ACTION_POLICY LidClose;SYSTEM_POWER_STATE LidOpenWake;DWORD Reserved;POWER_ACTION_POLICY Idle;DWORD IdleTimeout;BYTE IdleSensitivity;BYTE DynamicThrottle;BYTE Spare2[2];SYSTEM_POWER_STATE MinSleep;SYSTEM_POWER_STATE MaxSleep;SYSTEM_POWER_STATE ReducedLatencySleep;DWORD WinLogonFlags;DWORD Spare3;DWORD DozeS4Timeout;DWORD BroadcastCapacityResolution;SYSTEM_POWER_LEVEL DischargePolicy[4];DWORD VideoTimeout;BOOLEAN VideoDimDisplay;DWORD VideoReserved[3];DWORD SpindownTimeout;BOOLEAN OptimizeForPower;BYTE FanThrottleTolerance;BYTE ForcedThrottle;BYTE MinThrottle;POWER_ACTION_POLICY OverThrottled;};
struct tagEMRTRANSPARENTBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct IPersistFolder2Vtbl {HRESULT ( *QueryInterface)(IPersistFolder2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistFolder2 *This);ULONG ( *Release)(IPersistFolder2 *This);HRESULT ( *GetClassID)(IPersistFolder2 *This, CLSID *pClassID);HRESULT ( *Initialize)(IPersistFolder2 *This, LPCITEMIDLIST pidl);HRESULT ( *GetCurFolder)(IPersistFolder2 *This, LPITEMIDLIST *ppidl);};
struct _DD_D3DBUFCALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_CANCREATESURFACE CanCreateD3DBuffer;PDD_CREATESURFACE CreateD3DBuffer;PDD_SURFCB_DESTROYSURFACE DestroyD3DBuffer;PDD_SURFCB_LOCK LockD3DBuffer;PDD_SURFCB_UNLOCK UnlockD3DBuffer;};
struct _DD_UPDATEVPORTDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_VIDEOPORT_LOCAL lpVideoPort;PDD_SURFACE_INT *lplpDDSurface;PDD_SURFACE_INT *lplpDDVBISurface;PDD_VIDEOPORTINFO lpVideoInfo;DWORD dwFlags;DWORD dwNumAutoflip;DWORD dwNumVBIAutoflip;HRESULT ddRVal;void *UpdateVideoPort;};
struct _DD_VIDEOPORT_LOCAL {PDD_DIRECTDRAW_LOCAL lpDD;DDVIDEOPORTDESC ddvpDesc;DDVIDEOPORTINFO ddvpInfo;PDD_SURFACE_INT lpSurface;PDD_SURFACE_INT lpVBISurface;DWORD dwNumAutoflip;DWORD dwNumVBIAutoflip;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;ULONG_PTR dwReserved3;};
struct IMessageFilterVtbl {HRESULT ( *QueryInterface)(IMessageFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMessageFilter *This);ULONG ( *Release)(IMessageFilter *This);DWORD ( *HandleInComingCall)(IMessageFilter *This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);DWORD ( *RetryRejectedCall)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);DWORD ( *MessagePending)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);};
struct INamespaceWalkVtbl {HRESULT ( *QueryInterface)(INamespaceWalk *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INamespaceWalk *This);ULONG ( *Release)(INamespaceWalk *This);HRESULT ( *Walk)(INamespaceWalk *This, IUnknown *punkToWalk, DWORD dwFlags, int cDepth, INamespaceWalkCB *pnswcb);HRESULT ( *GetIDArrayResult)(INamespaceWalk *This, UINT *pcItems, LPITEMIDLIST **pppidl);};
struct IPersistIDListVtbl {HRESULT ( *QueryInterface)(IPersistIDList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistIDList *This);ULONG ( *Release)(IPersistIDList *This);HRESULT ( *GetClassID)(IPersistIDList *This, CLSID *pClassID);HRESULT ( *SetIDList)(IPersistIDList *This, LPCITEMIDLIST pidl);HRESULT ( *GetIDList)(IPersistIDList *This, LPITEMIDLIST *ppidl);};
struct IPersistMemoryVtbl {HRESULT ( *QueryInterface)(IPersistMemory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMemory *This);ULONG ( *Release)(IPersistMemory *This);HRESULT ( *GetClassID)(IPersistMemory *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistMemory *This);HRESULT ( *Load)(IPersistMemory *This, LPVOID pMem, ULONG cbSize);HRESULT ( *Save)(IPersistMemory *This, LPVOID pMem, BOOL fClearDirty, ULONG cbSize);HRESULT ( *GetSizeMax)(IPersistMemory *This, ULONG *pCbSize);HRESULT ( *InitNew)(IPersistMemory *This);};
struct IPersistStreamVtbl {HRESULT ( *QueryInterface)(IPersistStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStream *This);ULONG ( *Release)(IPersistStream *This);HRESULT ( *GetClassID)(IPersistStream *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStream *This);HRESULT ( *Load)(IPersistStream *This, IStream *pStm);HRESULT ( *Save)(IPersistStream *This, IStream *pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IPersistStream *This, ULARGE_INTEGER *pcbSize);};
struct IQuickActivateVtbl {HRESULT ( *QueryInterface)(IQuickActivate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQuickActivate *This);ULONG ( *Release)(IQuickActivate *This);HRESULT ( *QuickActivate)(IQuickActivate *This, QACONTAINER *pQaContainer, QACONTROL *pQaControl);HRESULT ( *SetContentExtent)(IQuickActivate *This, LPSIZEL pSizel);HRESULT ( *GetContentExtent)(IQuickActivate *This, LPSIZEL pSizel);};
typedef BOOL ( *PQUERYACTCTXW_FUNC)(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);
struct _D3DHAL_CALLBACKS2 {DWORD dwSize;DWORD dwFlags;LPD3DHAL_SETRENDERTARGETCB SetRenderTarget;LPD3DHAL_CLEARCB Clear;LPD3DHAL_DRAWONEPRIMITIVECB DrawOnePrimitive;LPD3DHAL_DRAWONEINDEXEDPRIMITIVECB DrawOneIndexedPrimitive;LPD3DHAL_DRAWPRIMITIVESCB DrawPrimitives;};
struct tagEMRPOLYTEXTOUTA {EMR emr;RECTL rclBounds;DWORD iGraphicsMode;FLOAT exScale;FLOAT eyScale;LONG cStrings;EMRTEXT aemrtext[1];};
struct IFolderFilterVtbl {HRESULT ( *QueryInterface)(IFolderFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderFilter *This);ULONG ( *Release)(IFolderFilter *This);HRESULT ( *ShouldShow)(IFolderFilter *This, IShellFolder *psf, LPCITEMIDLIST pidlFolder, LPCITEMIDLIST pidlItem);HRESULT ( *GetEnumFlags)(IFolderFilter *This, IShellFolder *psf, LPCITEMIDLIST pidlFolder, HWND *phwnd, DWORD *pgrfFlags);};
struct IHttpSecurityVtbl {HRESULT ( *QueryInterface)(IHttpSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpSecurity *This);ULONG ( *Release)(IHttpSecurity *This);HRESULT ( *GetWindow)(IHttpSecurity *This,  GUID * rguidReason, HWND *phwnd);HRESULT ( *OnSecurityProblem)(IHttpSecurity *This, DWORD dwProblem);};
struct IShellDetailsVtbl {HRESULT ( *QueryInterface)(IShellDetails *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellDetails *This);ULONG ( *Release)(IShellDetails *This);HRESULT ( *GetDetailsOf)(IShellDetails *This, LPCITEMIDLIST pidl, UINT iColumn, SHELLDETAILS *pDetails);HRESULT ( *ColumnClick)(IShellDetails *This, UINT iColumn);};
typedef BOOL ( *PFN_DrvAlphaBlend)(SURFOBJ *, SURFOBJ *, CLIPOBJ *, XLATEOBJ *, PRECTL, PRECTL, BLENDOBJ *);
struct _CMSG_SIGNER_INFO {DWORD dwVersion;CERT_NAME_BLOB Issuer;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedHash;CRYPT_ATTRIBUTES AuthAttrs;CRYPT_ATTRIBUTES UnauthAttrs;};
struct _D3DDeviceDesc_V1 {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;};
struct _D3DDeviceDesc_V2 {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;DWORD dwMinTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureWidth;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;};
struct _HIDP_BUTTON_CAPS {USAGE UsagePage;UCHAR ReportID;BOOLEAN IsAlias;USHORT BitField;USHORT LinkCollection;USAGE LinkUsage;USAGE LinkUsagePage;BOOLEAN IsRange;BOOLEAN IsStringRange;BOOLEAN IsDesignatorRange;BOOLEAN IsAbsolute;ULONG Reserved[10];_HIDP_BUTTON_CAPS___EECF18E811B231775A73F932F7651893 __anonymous0;};
struct _MCDFRAMEBUFSTATE {ULONG drawBuffer;ULONG indexWritemask;BOOL colorWritemask[4];BOOL depthWritemask;USHORT stencilWritemask;MCDCOLOR colorClearValue;MCDFLOAT indexClearValue;MCDDOUBLE depthClearValue;USHORT stencilClearValue;};
struct tagREBARBANDINFOA {UINT cbSize;UINT fMask;UINT fStyle;COLORREF clrFore;COLORREF clrBack;LPSTR lpText;UINT cch;int iImage;HWND hwndChild;UINT cxMinChild;UINT cyMinChild;UINT cx;HBITMAP hbmBack;UINT wID;UINT cyChild;UINT cyMaxChild;UINT cyIntegral;UINT cxIdeal;LPARAM lParam;UINT cxHeader;};
struct ITypeMarshalVtbl {HRESULT ( *QueryInterface)(ITypeMarshal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeMarshal *This);ULONG ( *Release)(ITypeMarshal *This);HRESULT ( *Size)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG *pSize);HRESULT ( *Marshal)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbWritten);HRESULT ( *Unmarshal)(ITypeMarshal *This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbRead);HRESULT ( *Free)(ITypeMarshal *This, PVOID pvType);};
struct _D3DSURFACE_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;D3DMULTISAMPLE_TYPE MultiSampleType;UINT Width;UINT Height;};
struct _FILEDESCRIPTORA {DWORD dwFlags;CLSID clsid;SIZEL sizel;POINTL pointl;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;CHAR cFileName[260];};
struct _FILEDESCRIPTORW {DWORD dwFlags;CLSID clsid;SIZEL sizel;POINTL pointl;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;WCHAR cFileName[260];};
struct _MPR_INTERFACE_0 {WCHAR wszInterfaceName[257];HANDLE hInterface;BOOL fEnabled;ROUTER_INTERFACE_TYPE dwIfType;ROUTER_CONNECTION_STATE dwConnectionState;DWORD fUnReachabilityReasons;DWORD dwLastError;};
struct _SHFILEOPSTRUCTA {HWND hwnd;UINT wFunc;LPCSTR pFrom;LPCSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCSTR lpszProgressTitle;};
struct tagEMRALPHABLEND {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct tagEMRSTRETCHBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct tagMONCONVSTRUCT {UINT cb;BOOL fConnect;DWORD dwTime;HANDLE hTask;HSZ hszSvc;HSZ hszTopic;HCONV hConvClient;HCONV hConvServer;};
struct tagMONHSZSTRUCTA {UINT cb;BOOL fsAction;DWORD dwTime;HSZ hsz;HANDLE hTask;CHAR str[1];};
struct tagMONHSZSTRUCTW {UINT cb;BOOL fsAction;DWORD dwTime;HSZ hsz;HANDLE hTask;WCHAR str[1];};
struct tagMONLINKSTRUCT {UINT cb;DWORD dwTime;HANDLE hTask;BOOL fEstablished;BOOL fNoData;HSZ hszSvc;HSZ hszTopic;HSZ hszItem;UINT wFmt;BOOL fServer;HCONV hConvServer;HCONV hConvClient;};
struct IDataFilterVtbl {HRESULT ( *QueryInterface)(IDataFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataFilter *This);ULONG ( *Release)(IDataFilter *This);HRESULT ( *DoEncode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT ( *DoDecode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT ( *SetEncodingLevel)(IDataFilter *This, DWORD dwEncLevel);};
typedef INT ( *LPNSPSETSERVICE)(LPGUID lpProviderId, LPWSASERVICECLASSINFOW lpServiceClassInfo, LPWSAQUERYSETW lpqsRegInfo, WSAESETSERVICEOP essOperation, DWORD dwControlFlags);
typedef BOOL ( *PFN_DrvCopyBits)(SURFOBJ *, SURFOBJ *, CLIPOBJ *, XLATEOBJ *, RECTL *, POINTL *);
struct _SYM_DUMP_PARAM {ULONG size;PUCHAR sName;ULONG Options;ULONG64 addr;PFIELD_INFO listLink;_SYM_DUMP_PARAM___0CD91D185F770C4760C3259863AFD91E __anonymous0;PSYM_DUMP_FIELD_CALLBACK CallbackRoutine;ULONG nFields;PFIELD_INFO Fields;ULONG64 ModBase;ULONG TypeId;ULONG TypeSize;ULONG BufferSize;unsigned int fPointer : 1;};
struct tagCHOOSECOLORA {DWORD lStructSize;HWND hwndOwner;HWND hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;LPCCHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
struct IKsControlVtbl {HRESULT ( *KsProperty)(IKsControl *This, PKSPROPERTY Property, ULONG PropertyLength, LPVOID PropertyData, ULONG DataLength, ULONG *BytesReturned);HRESULT ( *KsMethod)(IKsControl *This, PKSMETHOD Method, ULONG MethodLength, LPVOID MethodData, ULONG DataLength, ULONG *BytesReturned);HRESULT ( *KsEvent)(IKsControl *This, PKSEVENT Event, ULONG EventLength, LPVOID EventData, ULONG DataLength, ULONG *BytesReturned);};
struct ILockBytesVtbl {HRESULT ( *QueryInterface)(ILockBytes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILockBytes *This);ULONG ( *Release)(ILockBytes *This);HRESULT ( *ReadAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *WriteAt)(ILockBytes *This, ULARGE_INTEGER ulOffset,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *Flush)(ILockBytes *This);HRESULT ( *SetSize)(ILockBytes *This, ULARGE_INTEGER cb);HRESULT ( *LockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *UnlockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *Stat)(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct IShellIconVtbl {HRESULT ( *QueryInterface)(IShellIcon *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellIcon *This);ULONG ( *Release)(IShellIcon *This);HRESULT ( *GetIconOf)(IShellIcon *This, LPCITEMIDLIST pidl, UINT flags, LPINT lpIconIndex);};
typedef ULONG ( *MCDRVSTATEFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDMEM *pMCDMem, UCHAR *pStart, LONG length, ULONG numStates);
struct _DDPIXELFORMAT {DWORD dwSize;DWORD dwFlags;DWORD dwFourCC;_DDPIXELFORMAT___10AA641B3215541DB69A48A361AE0013 __anonymous0;_DDPIXELFORMAT___0E0BD8DB15B3F2A790C062F781315157 __anonymous1;_DDPIXELFORMAT___DB4BDA43012B420E1DC9AEEACAA267A5 __anonymous2;_DDPIXELFORMAT___4C5EBD389D88C4C046794501FFF390F4 __anonymous3;_DDPIXELFORMAT___3ED4EC923A768B2489A9D1155BD11968 __anonymous4;};
struct IGetFrameVtbl {HRESULT ( *QueryInterface)(IGetFrame *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IGetFrame *This);ULONG ( *Release)(IGetFrame *This);LPVOID ( *GetFrame)(IGetFrame *This, LONG lPos);HRESULT ( *Begin)(IGetFrame *This, LONG lStart, LONG lEnd, LONG lRate);HRESULT ( *End)(IGetFrame *This);HRESULT ( *SetFormat)(IGetFrame *This, LPBITMAPINFOHEADER lpbi, LPVOID lpBits, int x, int y, int dx, int dy);};
typedef ULONG ( *MCDRVSPANFUNC)(MCDSURFACE *pMCDSurface, MCDRC *pRc, MCDMEM *pMCDMem, MCDSPAN *pMCDSpan, BOOL bRead);
struct tagEMRMASKBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG xMask;LONG yMask;DWORD iUsageMask;DWORD offBmiMask;DWORD cbBmiMask;DWORD offBitsMask;DWORD cbBitsMask;};
struct IDeskBarVtbl {HRESULT ( *QueryInterface)(IDeskBar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDeskBar *This);ULONG ( *Release)(IDeskBar *This);HRESULT ( *GetWindow)(IDeskBar *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IDeskBar *This, BOOL fEnterMode);HRESULT ( *SetClient)(IDeskBar *This, IUnknown *punkClient);HRESULT ( *GetClient)(IDeskBar *This, IUnknown **ppunkClient);HRESULT ( *OnPosRectChangeDB)(IDeskBar *This, LPRECT prc);};
typedef BOOL ( *PFN_DrvPaint)(SURFOBJ *, CLIPOBJ *, BRUSHOBJ *, POINTL *, MIX);
struct _DMUS_REGION {RGNRANGE RangeKey;RGNRANGE RangeVelocity;USHORT fusOptions;USHORT usKeyGroup;ULONG ulRegionArtIdx;ULONG ulNextRegionIdx;ULONG ulFirstExtCkIdx;WAVELINK WaveLink;WSMPL WSMP;WLOOP WLOOP[1];};
struct tagEMRBITBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;};
struct _DD_HALINFO {DWORD dwSize;VIDEOMEMORYINFO vmiData;DDNTCORECAPS ddCaps;PDD_GETDRIVERINFO GetDriverInfo;DWORD dwFlags;LPVOID lpD3DGlobalDriverData;LPVOID lpD3DHALCallbacks;PDD_D3DBUFCALLBACKS lpD3DBufCallbacks;};
struct tagACTCTXA {ULONG cbSize;DWORD dwFlags;LPCSTR lpSource;USHORT wProcessorArchitecture;LANGID wLangId;LPCSTR lpAssemblyDirectory;LPCSTR lpResourceName;LPCSTR lpApplicationName;HMODULE hModule;};
struct _CRL_INFO {DWORD dwVersion;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME ThisUpdate;FILETIME NextUpdate;DWORD cCRLEntry;PCRL_ENTRY rgCRLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _GDIINFO {ULONG ulVersion;ULONG ulTechnology;ULONG ulHorzSize;ULONG ulVertSize;ULONG ulHorzRes;ULONG ulVertRes;ULONG cBitsPixel;ULONG cPlanes;ULONG ulNumColors;ULONG flRaster;ULONG ulLogPixelsX;ULONG ulLogPixelsY;ULONG flTextCaps;ULONG ulDACRed;ULONG ulDACGreen;ULONG ulDACBlue;ULONG ulAspectX;ULONG ulAspectY;ULONG ulAspectXY;LONG xStyleStep;LONG yStyleStep;LONG denStyleStep;POINTL ptlPhysOffset;SIZEL szlPhysSize;ULONG ulNumPalReg;COLORINFO ciDevice;ULONG ulDevicePelsDPI;ULONG ulPrimaryOrder;ULONG ulHTPatternSize;ULONG ulHTOutputFormat;ULONG flHTFlags;ULONG ulVRefresh;ULONG ulBltAlignment;ULONG ulPanningHorzRes;ULONG ulPanningVertRes;ULONG xPanningAlignment;ULONG yPanningAlignment;ULONG cxHTPat;ULONG cyHTPat;LPBYTE pHTPatA;LPBYTE pHTPatB;LPBYTE pHTPatC;ULONG flShadeBlend;ULONG ulPhysicalPixelCharacteristics;ULONG ulPhysicalPixelGamma;};
struct tagMSG {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;DWORD time;POINT pt;};
struct _D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA {ULONG_PTR dwhContext;DWORD dwFlags;D3DPRIMITIVETYPE PrimitiveType;_D3DHAL_DRAWONEINDEXEDPRIMITIVEDATA___D502B0312B70DCF8ACF8FE55005DEB1B __anonymous0;LPVOID lpvVertices;DWORD dwNumVertices;LPWORD lpwIndices;DWORD dwNumIndices;HRESULT ddrval;};
struct _1DF2F441892C3D46584606B89F66007B {DWORD dwStructSize;LPSTR lpstrGroupNames;DWORD nMaxGroupNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPSTR lpstrCardNames;DWORD nMaxCardNames;LPOCNCHKPROC lpfnCheck;LPOCNCONNPROCA lpfnConnect;LPOCNDSCPROC lpfnDisconnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;};
struct IInternetHostSecurityManagerVtbl {HRESULT ( *QueryInterface)(IInternetHostSecurityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetHostSecurityManager *This);ULONG ( *Release)(IInternetHostSecurityManager *This);HRESULT ( *GetSecurityId)(IInternetHostSecurityManager *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);HRESULT ( *ProcessUrlAction)(IInternetHostSecurityManager *This, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT ( *QueryCustomPolicy)(IInternetHostSecurityManager *This,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);};
struct _DDRAWI_DDRAWSURFACE_GBL_MORE {DWORD dwSize;_DDRAWI_DDRAWSURFACE_GBL_MORE___69CDF4F9B83E08C1B922F58FDF1EFCB2 __anonymous0;LPDWORD pPageTable;DWORD cPages;ULONG_PTR dwSavedDCContext;FLATPTR fpAliasedVidMem;ULONG_PTR dwDriverReserved;ULONG_PTR dwHELReserved;DWORD cPageUnlocks;ULONG_PTR hKernelSurface;DWORD dwKernelRefCnt;LPDDCOLORCONTROL lpColorInfo;FLATPTR fpNTAlias;DWORD dwContentsStamp;LPVOID lpvUnswappedDriverReserved;LPVOID lpDDRAWReserved2;DWORD dwDDRAWReserved1;DWORD dwDDRAWReserved2;FLATPTR fpAliasOfVidMem;};
struct IDirectSoundCaptureFXAecVtbl {HRESULT ( *QueryInterface)(IDirectSoundCaptureFXAec *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCaptureFXAec *This);ULONG ( *Release)(IDirectSoundCaptureFXAec *This);HRESULT ( *SetAllParameters)(IDirectSoundCaptureFXAec *This, LPCDSCFXAec pDscFxAec);HRESULT ( *GetAllParameters)(IDirectSoundCaptureFXAec *This, LPDSCFXAec pDscFxAec);HRESULT ( *GetStatus)(IDirectSoundCaptureFXAec *This, PDWORD pdwStatus);HRESULT ( *Reset)(IDirectSoundCaptureFXAec *This);};
struct _DDHAL_GETMOCOMPCOMPBUFFDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPGUID lpGuid;DWORD dwWidth;DWORD dwHeight;DDPIXELFORMAT ddPixelFormat;DWORD dwNumTypesCompBuffs;LPDDMCCOMPBUFFERINFO lpCompBuffInfo;HRESULT ddRVal;LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;};
struct _DDHAL_GETVPORTBANDWIDTHDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;LPDDPIXELFORMAT lpddpfFormat;DWORD dwWidth;DWORD dwHeight;DWORD dwFlags;LPDDVIDEOPORTBANDWIDTH lpBandwidth;HRESULT ddRVal;LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;};
struct IOleInPlaceActiveObjectVtbl {HRESULT ( *QueryInterface)(IOleInPlaceActiveObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceActiveObject *This);ULONG ( *Release)(IOleInPlaceActiveObject *This);HRESULT ( *GetWindow)(IOleInPlaceActiveObject *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceActiveObject *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IOleInPlaceActiveObject *This, LPMSG lpmsg);HRESULT ( *OnFrameWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT ( *OnDocWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT ( *ResizeBorder)(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);HRESULT ( *EnableModeless)(IOleInPlaceActiveObject *This, BOOL fEnable);};
struct _DDHAL_BEGINMOCOMPFRAMEDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;LPDDRAWI_DDRAWSURFACE_LCL lpDestSurface;DWORD dwInputDataSize;LPVOID lpInputData;DWORD dwOutputDataSize;LPVOID lpOutputData;HRESULT ddRVal;LPDDHALMOCOMPCB_BEGINFRAME BeginMoCompFrame;};
struct _CMSG_CONTENT_ENCRYPT_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD cRecipients;PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;PFN_CMSG_ALLOC pfnAlloc;PFN_CMSG_FREE pfnFree;DWORD dwEncryptFlags;HCRYPTKEY hContentEncryptKey;DWORD dwFlags;};
struct _DDHAL_UPDATEOVERLAYDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDDestSurface;RECTL rDest;LPDDRAWI_DDRAWSURFACE_LCL lpDDSrcSurface;RECTL rSrc;DWORD dwFlags;DDOVERLAYFX overlayFX;HRESULT ddRVal;LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;};
struct _D3DPRESENT_PARAMETERS_ {UINT BackBufferWidth;UINT BackBufferHeight;D3DFORMAT BackBufferFormat;UINT BackBufferCount;D3DMULTISAMPLE_TYPE MultiSampleType;D3DSWAPEFFECT SwapEffect;HWND hDeviceWindow;BOOL Windowed;BOOL EnableAutoDepthStencil;D3DFORMAT AutoDepthStencilFormat;DWORD Flags;UINT FullScreen_RefreshRateInHz;UINT FullScreen_PresentationInterval;};
struct _DDHAL_RENDERMOCOMPDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;DWORD dwNumBuffers;LPDDMCBUFFERINFO lpBufferInfo;DWORD dwFunction;LPVOID lpInputData;DWORD dwInputDataSize;LPVOID lpOutputData;DWORD dwOutputDataSize;HRESULT ddRVal;LPDDHALMOCOMPCB_RENDER RenderMoComp;};
struct _SP_DEVINSTALL_PARAMS_A {DWORD cbSize;DWORD Flags;DWORD FlagsEx;HWND hwndParent;PSP_FILE_CALLBACK_A InstallMsgHandler;PVOID InstallMsgHandlerContext;HSPFILEQ FileQueue;ULONG_PTR ClassInstallReserved;DWORD Reserved;CHAR DriverPath[260];};
struct _SP_DEVINSTALL_PARAMS_W {DWORD cbSize;DWORD Flags;DWORD FlagsEx;HWND hwndParent;PSP_FILE_CALLBACK_A InstallMsgHandler;PVOID InstallMsgHandlerContext;HSPFILEQ FileQueue;ULONG_PTR ClassInstallReserved;DWORD Reserved;WCHAR DriverPath[260];};
struct IPersistStreamInitVtbl {HRESULT ( *QueryInterface)(IPersistStreamInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStreamInit *This);ULONG ( *Release)(IPersistStreamInit *This);HRESULT ( *GetClassID)(IPersistStreamInit *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStreamInit *This);HRESULT ( *Load)(IPersistStreamInit *This, LPSTREAM pStm);HRESULT ( *Save)(IPersistStreamInit *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IPersistStreamInit *This, ULARGE_INTEGER *pCbSize);HRESULT ( *InitNew)(IPersistStreamInit *This);};
struct IShellMenuCallbackVtbl {HRESULT ( *QueryInterface)(IShellMenuCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellMenuCallback *This);ULONG ( *Release)(IShellMenuCallback *This);HRESULT ( *CallbackSM)(IShellMenuCallback *This, LPSMDATA psmd, UINT uMsg, WPARAM wParam, LPARAM lParam);};
struct _DDHAL_UPDATEVPORTDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;LPDDRAWI_DDRAWSURFACE_INT *lplpDDSurface;LPDDRAWI_DDRAWSURFACE_INT *lplpDDVBISurface;LPDDVIDEOPORTINFO lpVideoInfo;DWORD dwFlags;DWORD dwNumAutoflip;DWORD dwNumVBIAutoflip;HRESULT ddRVal;LPDDHALVPORTCB_UPDATE UpdateVideoPort;};
struct _DDRAWI_DIRECTDRAW_LCL {DWORD lpDDMore;LPDDRAWI_DIRECTDRAW_GBL lpGbl;DWORD dwUnused0;DWORD dwLocalFlags;DWORD dwLocalRefCnt;DWORD dwProcessId;IUnknown *pUnkOuter;DWORD dwObsolete1;ULONG_PTR hWnd;ULONG_PTR hDC;DWORD dwErrorMode;LPDDRAWI_DDRAWSURFACE_INT lpPrimary;LPDDRAWI_DDRAWSURFACE_INT lpCB;DWORD dwPreferredMode;HINSTANCE hD3DInstance;IUnknown *pD3DIUnknown;LPDDHAL_CALLBACKS lpDDCB;ULONG_PTR hDDVxd;DWORD dwAppHackFlags;ULONG_PTR hFocusWnd;DWORD dwHotTracking;DWORD dwIMEState;ULONG_PTR hWndPopup;ULONG_PTR hDD;ULONG_PTR hGammaCalibrator;LPDDGAMMACALIBRATORPROC lpGammaCalibrator;};
struct AsyncIAdviseSink2Vtbl {HRESULT ( *QueryInterface)(AsyncIAdviseSink2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(AsyncIAdviseSink2 *This);ULONG ( *Release)(AsyncIAdviseSink2 *This);void ( *Begin_OnDataChange)(AsyncIAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *Finish_OnDataChange)(AsyncIAdviseSink2 *This);void ( *Begin_OnViewChange)(AsyncIAdviseSink2 *This, DWORD dwAspect, LONG lindex);void ( *Finish_OnViewChange)(AsyncIAdviseSink2 *This);void ( *Begin_OnRename)(AsyncIAdviseSink2 *This, IMoniker *pmk);void ( *Finish_OnRename)(AsyncIAdviseSink2 *This);void ( *Begin_OnSave)(AsyncIAdviseSink2 *This);void ( *Finish_OnSave)(AsyncIAdviseSink2 *This);void ( *Begin_OnClose)(AsyncIAdviseSink2 *This);void ( *Finish_OnClose)(AsyncIAdviseSink2 *This);void ( *Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *This, IMoniker *pmk);void ( *Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *This);};
struct IDropTargetHelperVtbl {HRESULT ( *QueryInterface)(IDropTargetHelper *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDropTargetHelper *This);ULONG ( *Release)(IDropTargetHelper *This);HRESULT ( *DragEnter)(IDropTargetHelper *This, HWND hwndTarget, IDataObject *pDataObject, POINT *ppt, DWORD dwEffect);HRESULT ( *DragLeave)(IDropTargetHelper *This);HRESULT ( *DragOver)(IDropTargetHelper *This, POINT *ppt, DWORD dwEffect);HRESULT ( *Drop)(IDropTargetHelper *This, IDataObject *pDataObject, POINT *ppt, DWORD dwEffect);HRESULT ( *Show)(IDropTargetHelper *This, BOOL fShow);};
struct ISurrogateServiceVtbl {HRESULT ( *QueryInterface)(ISurrogateService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISurrogateService *This);ULONG ( *Release)(ISurrogateService *This);HRESULT ( *Init)(ISurrogateService *This,  GUID * rguidProcessID, IProcessLock *pProcessLock, BOOL *pfApplicationAware);HRESULT ( *ApplicationLaunch)(ISurrogateService *This,  GUID * rguidApplID, ApplicationType appType);HRESULT ( *ApplicationFree)(ISurrogateService *This,  GUID * rguidApplID);HRESULT ( *CatalogRefresh)(ISurrogateService *This, ULONG ulReserved);HRESULT ( *ProcessShutdown)(ISurrogateService *This, ShutdownType shutdownType);};
struct AsyncIAdviseSinkVtbl {HRESULT ( *QueryInterface)(AsyncIAdviseSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(AsyncIAdviseSink *This);ULONG ( *Release)(AsyncIAdviseSink *This);void ( *Begin_OnDataChange)(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *Finish_OnDataChange)(AsyncIAdviseSink *This);void ( *Begin_OnViewChange)(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex);void ( *Finish_OnViewChange)(AsyncIAdviseSink *This);void ( *Begin_OnRename)(AsyncIAdviseSink *This, IMoniker *pmk);void ( *Finish_OnRename)(AsyncIAdviseSink *This);void ( *Begin_OnSave)(AsyncIAdviseSink *This);void ( *Finish_OnSave)(AsyncIAdviseSink *This);void ( *Begin_OnClose)(AsyncIAdviseSink *This);void ( *Finish_OnClose)(AsyncIAdviseSink *This);};
struct ICommDlgBrowser2Vtbl {HRESULT ( *QueryInterface)(ICommDlgBrowser2 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICommDlgBrowser2 *This);ULONG ( *Release)(ICommDlgBrowser2 *This);HRESULT ( *OnDefaultCommand)(ICommDlgBrowser2 *This, struct IShellView *ppshv);HRESULT ( *OnStateChange)(ICommDlgBrowser2 *This, struct IShellView *ppshv, ULONG uChange);HRESULT ( *IncludeObject)(ICommDlgBrowser2 *This, struct IShellView *ppshv, LPCITEMIDLIST pidl);HRESULT ( *Notify)(ICommDlgBrowser2 *This, struct IShellView *ppshv, DWORD dwNotifyType);HRESULT ( *GetDefaultMenuText)(ICommDlgBrowser2 *This, struct IShellView *ppshv, WCHAR *pszText, INT cchMax);HRESULT ( *GetViewFlags)(ICommDlgBrowser2 *This, DWORD *pdwFlags);};
struct IOleDocumentViewVtbl {HRESULT ( *QueryInterface)(IOleDocumentView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocumentView *This);ULONG ( *Release)(IOleDocumentView *This);HRESULT ( *SetInPlaceSite)(IOleDocumentView *This, IOleInPlaceSite *pIPSite);HRESULT ( *GetInPlaceSite)(IOleDocumentView *This, IOleInPlaceSite **ppIPSite);HRESULT ( *GetDocument)(IOleDocumentView *This, IUnknown **ppunk);HRESULT ( *SetRect)(IOleDocumentView *This, LPRECT prcView);HRESULT ( *GetRect)(IOleDocumentView *This, LPRECT prcView);HRESULT ( *SetRectComplex)(IOleDocumentView *This, LPRECT prcView, LPRECT prcHScroll, LPRECT prcVScroll, LPRECT prcSizeBox);HRESULT ( *Show)(IOleDocumentView *This, BOOL fShow);HRESULT ( *UIActivate)(IOleDocumentView *This, BOOL fUIActivate);HRESULT ( *Open)(IOleDocumentView *This);HRESULT ( *CloseView)(IOleDocumentView *This, DWORD dwReserved);HRESULT ( *SaveViewState)(IOleDocumentView *This, LPSTREAM pstm);HRESULT ( *ApplyViewState)(IOleDocumentView *This, LPSTREAM pstm);HRESULT ( *Clone)(IOleDocumentView *This, IOleInPlaceSite *pIPSiteNew, IOleDocumentView **ppViewNew);};
struct IPointerInactiveVtbl {HRESULT ( *QueryInterface)(IPointerInactive *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPointerInactive *This);ULONG ( *Release)(IPointerInactive *This);HRESULT ( *GetActivationPolicy)(IPointerInactive *This, DWORD *pdwPolicy);HRESULT ( *OnInactiveMouseMove)(IPointerInactive *This, LPCRECT pRectBounds, LONG x, LONG y, DWORD grfKeyState);HRESULT ( *OnInactiveSetCursor)(IPointerInactive *This, LPCRECT pRectBounds, LONG x, LONG y, DWORD dwMouseMsg, BOOL fSetAlways);};
typedef LONG ( *PFN_DrvQueryFontData)(DHPDEV, FONTOBJ *, ULONG, HGLYPH, GLYPHDATA *, PVOID, ULONG);
struct _DD_CREATEMOCOMPDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_MOTIONCOMP_LOCAL lpMoComp;GUID *lpGuid;DWORD dwUncompWidth;DWORD dwUncompHeight;DDPIXELFORMAT ddUncompPixelFormat;LPVOID lpData;DWORD dwDataSize;HRESULT ddRVal;};
struct IPersistMonikerVtbl {HRESULT ( *QueryInterface)(IPersistMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMoniker *This);ULONG ( *Release)(IPersistMoniker *This);HRESULT ( *GetClassID)(IPersistMoniker *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistMoniker *This);HRESULT ( *Load)(IPersistMoniker *This, BOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode);HRESULT ( *Save)(IPersistMoniker *This, IMoniker *pimkName, LPBC pbc, BOOL fRemember);HRESULT ( *SaveCompleted)(IPersistMoniker *This, IMoniker *pimkName, LPBC pibc);HRESULT ( *GetCurMoniker)(IPersistMoniker *This, IMoniker **ppimkName);};
struct _DD_SYNCSURFACEDATA {PDD_DIRECTDRAW_LOCAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;DWORD dwSurfaceOffset;ULONG_PTR fpLockPtr;LONG lPitch;DWORD dwOverlayOffset;ULONG dwDriverReserved1;ULONG dwDriverReserved2;ULONG dwDriverReserved3;ULONG dwDriverReserved4;HRESULT ddRVal;};
struct _OUTLINETEXTMETRICA {UINT otmSize;TEXTMETRICA otmTextMetrics;BYTE otmFiller;PANOSE otmPanoseNumber;UINT otmfsSelection;UINT otmfsType;int otmsCharSlopeRise;int otmsCharSlopeRun;int otmItalicAngle;UINT otmEMSquare;int otmAscent;int otmDescent;UINT otmLineGap;UINT otmsCapEmHeight;UINT otmsXHeight;RECT otmrcFontBox;int otmMacAscent;int otmMacDescent;UINT otmMacLineGap;UINT otmusMinimumPPEM;POINT otmptSubscriptSize;POINT otmptSubscriptOffset;POINT otmptSuperscriptSize;POINT otmptSuperscriptOffset;UINT otmsStrikeoutSize;int otmsStrikeoutPosition;int otmsUnderscoreSize;int otmsUnderscorePosition;PSTR otmpFamilyName;PSTR otmpFaceName;PSTR otmpStyleName;PSTR otmpFullName;};
struct _OUTLINETEXTMETRICW {UINT otmSize;TEXTMETRICW otmTextMetrics;BYTE otmFiller;PANOSE otmPanoseNumber;UINT otmfsSelection;UINT otmfsType;int otmsCharSlopeRise;int otmsCharSlopeRun;int otmItalicAngle;UINT otmEMSquare;int otmAscent;int otmDescent;UINT otmLineGap;UINT otmsCapEmHeight;UINT otmsXHeight;RECT otmrcFontBox;int otmMacAscent;int otmMacDescent;UINT otmMacLineGap;UINT otmusMinimumPPEM;POINT otmptSubscriptSize;POINT otmptSubscriptOffset;POINT otmptSuperscriptSize;POINT otmptSuperscriptOffset;UINT otmsStrikeoutSize;int otmsStrikeoutPosition;int otmsUnderscoreSize;int otmsUnderscorePosition;PSTR otmpFamilyName;PSTR otmpFaceName;PSTR otmpStyleName;PSTR otmpFullName;};
struct tagNMCUSTOMDRAWINFO {NMHDR hdr;DWORD dwDrawStage;HDC hdc;RECT rc;DWORD_PTR dwItemSpec;UINT uItemState;LPARAM lItemlParam;};
struct IAVIEditStreamVtbl {HRESULT ( *QueryInterface)(IAVIEditStream *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIEditStream *This);ULONG ( *Release)(IAVIEditStream *This);HRESULT ( *Cut)(IAVIEditStream *This, LONG *plStart, LONG *plLength, PAVISTREAM *ppResult);HRESULT ( *Copy)(IAVIEditStream *This, LONG *plStart, LONG *plLength, PAVISTREAM *ppResult);HRESULT ( *Paste)(IAVIEditStream *This, LONG *plPos, LONG *plLength, PAVISTREAM pstream, LONG lStart, LONG lEnd);HRESULT ( *Clone)(IAVIEditStream *This, PAVISTREAM *ppResult);HRESULT ( *SetInfo)(IAVIEditStream *This, AVISTREAMINFOW *lpInfo, LONG cbInfo);};
struct IDeskBarClientVtbl {HRESULT ( *QueryInterface)(IDeskBarClient *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDeskBarClient *This);ULONG ( *Release)(IDeskBarClient *This);HRESULT ( *GetWindow)(IDeskBarClient *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDeskBarClient *This, BOOL fEnterMode);HRESULT ( *SetDeskBarSite)(IDeskBarClient *This, IUnknown *punkSite);HRESULT ( *SetModeDBC)(IDeskBarClient *This, DWORD dwMode);HRESULT ( *UIActivateDBC)(IDeskBarClient *This, DWORD dwState);HRESULT ( *GetSize)(IDeskBarClient *This, DWORD dwWhich, LPRECT prc);};
struct IDockingWindowVtbl {HRESULT ( *QueryInterface)(IDockingWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDockingWindow *This);ULONG ( *Release)(IDockingWindow *This);HRESULT ( *GetWindow)(IDockingWindow *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindow *This, BOOL fEnterMode);HRESULT ( *ShowDW)(IDockingWindow *This, BOOL fShow);HRESULT ( *CloseDW)(IDockingWindow *This, DWORD dwReserved);HRESULT ( *ResizeBorderDW)(IDockingWindow *This, LPCRECT prcBorder, IUnknown *punkToolbarSite, BOOL fReserved);};
struct _MIDL_SERVER_INFO_ {PMIDL_STUB_DESC pStubDesc; SERVER_ROUTINE *DispatchTable;PFORMAT_STRING ProcString; unsigned short *FmtStringOffset; STUB_THUNK *ThunkTable;PRPC_SYNTAX_IDENTIFIER pTransferSyntax;ULONG_PTR nCount;PMIDL_SYNTAX_INFO pSyntaxInfo;};
struct IAdviseSinkExVtbl {HRESULT ( *QueryInterface)(IAdviseSinkEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSinkEx *This);ULONG ( *Release)(IAdviseSinkEx *This);void ( *OnDataChange)(IAdviseSinkEx *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSinkEx *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSinkEx *This, IMoniker *pmk);void ( *OnSave)(IAdviseSinkEx *This);void ( *OnClose)(IAdviseSinkEx *This);void ( *OnViewStatusChange)(IAdviseSinkEx *This, DWORD dwViewStatus);};
struct IExtractIconAVtbl {HRESULT ( *QueryInterface)(IExtractIconA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IExtractIconA *This);ULONG ( *Release)(IExtractIconA *This);HRESULT ( *GetIconLocation)(IExtractIconA *This, UINT uFlags, LPSTR szIconFile, UINT cchMax, int *piIndex, UINT *pwFlags);HRESULT ( *Extract)(IExtractIconA *This, LPCSTR pszFile, UINT nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIconSize);};
struct _FD_DEVICEMETRICS {FLONG flRealizedType;POINTE pteBase;POINTE pteSide;LONG lD;FIX fxMaxAscender;FIX fxMaxDescender;POINTL ptlUnderline1;POINTL ptlStrikeOut;POINTL ptlULThickness;POINTL ptlSOThickness;ULONG cxMax;ULONG cyMax;ULONG cjGlyphMax;FD_XFORM fdxQuantized;LONG lNonLinearExtLeading;LONG lNonLinearIntLeading;LONG lNonLinearMaxCharWidth;LONG lNonLinearAvgCharWidth;LONG lMinA;LONG lMinC;LONG lMinD;LONG alReserved[1];};
struct IAdviseSink2Vtbl {HRESULT ( *QueryInterface)(IAdviseSink2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSink2 *This);ULONG ( *Release)(IAdviseSink2 *This);void ( *OnDataChange)(IAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSink2 *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSink2 *This, IMoniker *pmk);void ( *OnSave)(IAdviseSink2 *This);void ( *OnClose)(IAdviseSink2 *This);void ( *OnLinkSrcChange)(IAdviseSink2 *This, IMoniker *pmk);};
struct IFileViewerAVtbl {HRESULT ( *QueryInterface)(IFileViewerA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileViewerA *This);ULONG ( *Release)(IFileViewerA *This);HRESULT ( *ShowInitialize)(IFileViewerA *This, LPFILEVIEWERSITE lpfsi);HRESULT ( *Show)(IFileViewerA *This, LPFVSHOWINFO pvsi);HRESULT ( *PrintTo)(IFileViewerA *This, LPSTR pszDriver, BOOL fSuppressUI);};
struct _HIDP_VALUE_CAPS {USAGE UsagePage;UCHAR ReportID;BOOLEAN IsAlias;USHORT BitField;USHORT LinkCollection;USAGE LinkUsage;USAGE LinkUsagePage;BOOLEAN IsRange;BOOLEAN IsStringRange;BOOLEAN IsDesignatorRange;BOOLEAN IsAbsolute;BOOLEAN HasNull;UCHAR Reserved;USHORT BitSize;USHORT ReportCount;USHORT Reserved2[5];ULONG UnitsExp;ULONG Units;LONG LogicalMin;LONG LogicalMax;LONG PhysicalMin;LONG PhysicalMax;_HIDP_VALUE_CAPS___D10B5F657B465D66794202428CB38B41 __anonymous0;};
struct _IP_ADAPTER_INFO {struct _IP_ADAPTER_INFO *Next;DWORD ComboIndex;char AdapterName[260];char Description[132];UINT AddressLength;BYTE Address[8];DWORD Index;UINT Type;UINT DhcpEnabled;PIP_ADDR_STRING CurrentIpAddress;IP_ADDR_STRING IpAddressList;IP_ADDR_STRING GatewayList;IP_ADDR_STRING DhcpServer;BOOL HaveWins;IP_ADDR_STRING PrimaryWinsServer;IP_ADDR_STRING SecondaryWinsServer;time_t LeaseObtained;time_t LeaseExpires;};
struct tagCREATESTRUCTA {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCSTR lpszName;LPCSTR lpszClass;DWORD dwExStyle;};
struct tagMSGBOXPARAMSA {UINT cbSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpszText;LPCSTR lpszCaption;DWORD dwStyle;LPCSTR lpszIcon;DWORD_PTR dwContextHelpId;MSGBOXCALLBACK lpfnMsgBoxCallback;DWORD dwLanguageId;};
struct IAdviseSinkVtbl {HRESULT ( *QueryInterface)(IAdviseSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSink *This);ULONG ( *Release)(IAdviseSink *This);void ( *OnDataChange)(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSink *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSink *This, IMoniker *pmk);void ( *OnSave)(IAdviseSink *This);void ( *OnClose)(IAdviseSink *This);};
struct IDataObjectVtbl {HRESULT ( *QueryInterface)(IDataObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataObject *This);ULONG ( *Release)(IDataObject *This);HRESULT ( *GetData)(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);HRESULT ( *GetDataHere)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium);HRESULT ( *QueryGetData)(IDataObject *This, FORMATETC *pformatetc);HRESULT ( *GetCanonicalFormatEtc)(IDataObject *This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut);HRESULT ( *SetData)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT ( *EnumFormatEtc)(IDataObject *This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc);HRESULT ( *DAdvise)(IDataObject *This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT ( *DUnadvise)(IDataObject *This, DWORD dwConnection);HRESULT ( *EnumDAdvise)(IDataObject *This, IEnumSTATDATA **ppenumAdvise);};
struct IOleControlVtbl {HRESULT ( *QueryInterface)(IOleControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControl *This);ULONG ( *Release)(IOleControl *This);HRESULT ( *GetControlInfo)(IOleControl *This, CONTROLINFO *pCI);HRESULT ( *OnMnemonic)(IOleControl *This, MSG *pMsg);HRESULT ( *OnAmbientPropertyChange)(IOleControl *This, DISPID dispID);HRESULT ( *FreezeEvents)(IOleControl *This, BOOL bFreeze);};
struct _DCISURFACEINFO {DWORD dwSize;DWORD dwDCICaps;DWORD dwCompression;DWORD dwMask[3];DWORD dwWidth;DWORD dwHeight;LONG lStride;DWORD dwBitCount;ULONG_PTR dwOffSurface;WORD wSelSurface;WORD wReserved;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DCIRVAL ( *BeginAccess)(LPVOID, LPRECT);void ( *EndAccess)(LPVOID);void ( *DestroySurface)(LPVOID);};
struct _DDHAL_LOCKDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDSurface;DWORD bHasRect;RECTL rArea;LPVOID lpSurfData;HRESULT ddRVal;LPDDHALSURFCB_LOCK Lock;DWORD dwFlags;};
struct tagMONMSGSTRUCT {UINT cb;HWND hwndTo;DWORD dwTime;HANDLE hTask;UINT wMsg;WPARAM wParam;LPARAM lParam;DDEML_MSG_HOOK_DATA dmhd;};
struct ICopyHookAVtbl {HRESULT ( *QueryInterface)(ICopyHookA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICopyHookA *This);ULONG ( *Release)(ICopyHookA *This);UINT ( *CopyCallback)(ICopyHookA *This, HWND hwnd, UINT wFunc, UINT wFlags, LPCSTR pszSrcFile, DWORD dwSrcAttribs, LPCSTR pszDestFile, DWORD dwDestAttribs);};
struct IDVGetEnumVtbl {HRESULT ( *QueryInterface)(IDVGetEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVGetEnum *This);ULONG ( *Release)(IDVGetEnum *This);HRESULT ( *SetEnumReadyCallback)(IDVGetEnum *This, PFDVENUMREADYBALLBACK pfn, LPVOID pvData);HRESULT ( *CreateEnumIDListFromContents)(IDVGetEnum *This, LPCITEMIDLIST pidlFolder, DWORD dwEnumFlags, IEnumIDList **ppEnumIDList);};
struct _DDSURFACEDESC {DWORD dwSize;DWORD dwFlags;DWORD dwHeight;DWORD dwWidth;_DDRAWI_DDRAWSURFACE_GBL___091DBF7D405BE25E65B16620C008128B __anonymous0;DWORD dwBackBufferCount;_DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B __anonymous4;DWORD dwAlphaBitDepth;DWORD dwReserved;LPVOID lpSurface;DDCOLORKEY ddckCKDestOverlay;DDCOLORKEY ddckCKDestBlt;DDCOLORKEY ddckCKSrcOverlay;DDCOLORKEY ddckCKSrcBlt;DDPIXELFORMAT ddpfPixelFormat;DDSCAPS ddsCaps;};
struct tagWNDCLASSEXA {UINT cbSize;UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;HICON hIconSm;};
struct IOleCacheVtbl {HRESULT ( *QueryInterface)(IOleCache *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCache *This);ULONG ( *Release)(IOleCache *This);HRESULT ( *Cache)(IOleCache *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT ( *Uncache)(IOleCache *This, DWORD dwConnection);HRESULT ( *EnumCache)(IOleCache *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT ( *InitCache)(IOleCache *This, IDataObject *pDataObject);HRESULT ( *SetData)(IOleCache *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);};
typedef BOOL ( *PFN_DrvLineTo)(SURFOBJ *, CLIPOBJ *, BRUSHOBJ *, LONG, LONG, LONG, LONG, RECTL *, MIX);
struct _WSAQuerySetA {DWORD dwSize;LPSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
typedef LRESULT ( *SUBCLASSPROC)(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, UINT_PTR uIdSubclass, DWORD_PTR dwRefData);
struct _D3DMATERIAL {DWORD dwSize;_D3DMATERIAL7___F37024B6A2A7DA8F8161E452127F778F __anonymous0;_D3DMATERIAL7___B545799AB1B094EA7448ADA6B118C0D5 __anonymous2;_D3DMATERIAL7___48A7D73869B8DD97079A7DB0052C867A __anonymous4;_D3DMATERIAL7___4E89CE7B3871A99DAB3B73BC63770FCE __anonymous6;_D3DMATERIAL7___0E29CCD1ABCFA56B0343B217BB93547E __anonymous8;D3DTEXTUREHANDLE hTexture;DWORD dwRampSize;};
struct _DD_LOCKDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDSurface;DWORD bHasRect;RECTL rArea;LPVOID lpSurfData;HRESULT ddRVal;void *Lock;DWORD dwFlags;FLATPTR fpProcess;};
struct _browseinfoA {HWND hwndOwner;LPCITEMIDLIST pidlRoot;LPSTR pszDisplayName;LPCSTR lpszTitle;UINT ulFlags;BFFCALLBACK lpfn;LPARAM lParam;int iImage;};
struct tagEMRPLGBLT {EMR emr;RECTL rclBounds;POINTL aptlDest[3];LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG xMask;LONG yMask;DWORD iUsageMask;DWORD offBmiMask;DWORD cbBmiMask;DWORD offBitsMask;DWORD cbBitsMask;};
struct tagTOOLINFOA {UINT cbSize;UINT uFlags;HWND hwnd;UINT_PTR uId;RECT rect;HINSTANCE hinst;LPSTR lpszText;LPARAM lParam;void *lpReserved;};
struct tagWNDCLASSA {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;};
struct IStreamVtbl {HRESULT ( *QueryInterface)(IStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStream *This);ULONG ( *Release)(IStream *This);HRESULT ( *Read)(IStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Write)(IStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *Seek)(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT ( *SetSize)(IStream *This, ULARGE_INTEGER libNewSize);HRESULT ( *CopyTo)(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);HRESULT ( *Commit)(IStream *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IStream *This);HRESULT ( *LockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *UnlockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *Stat)(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag);HRESULT ( *Clone)(IStream *This, IStream **ppstm);};
typedef INT ( *LPNSPIOCTL)(HANDLE hLookup, DWORD dwControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSACOMPLETION lpCompletion, LPWSATHREADID lpThreadId);
struct _DDBLTFX {DWORD dwSize;DWORD dwDDFX;DWORD dwROP;DWORD dwDDROP;DWORD dwRotationAngle;DWORD dwZBufferOpCode;DWORD dwZBufferLow;DWORD dwZBufferHigh;DWORD dwZBufferBaseDest;DWORD dwZDestConstBitDepth;_DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935 __anonymous0;DWORD dwZSrcConstBitDepth;_DDBLTFX___702C52B3655764E63C007A6B73D01C19 __anonymous1;DWORD dwAlphaEdgeBlendBitDepth;DWORD dwAlphaEdgeBlend;DWORD dwReserved;DWORD dwAlphaDestConstBitDepth;_DDBLTFX___3639C047B3E88B857708792B1F3FEC83 __anonymous2;DWORD dwAlphaSrcConstBitDepth;_DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 __anonymous4;_DDBLTFX___4C109671A06E28B8127C40041AB5795C __anonymous6;DDCOLORKEY ddckDestColorkey;DDCOLORKEY ddckSrcColorkey;};
struct _A5A2C297D512B29747AD9A814A819610 {_C6832D807A2747A4D0CBF13E34E0B28B __anonymous0;WORD wFillAttribute;WORD wPopupFillAttribute;COORD dwScreenBufferSize;COORD dwWindowSize;COORD dwWindowOrigin;DWORD nFont;DWORD nInputBufferSize;COORD dwFontSize;UINT uFontFamily;UINT uFontWeight;WCHAR FaceName[32];UINT uCursorSize;BOOL bFullScreen;BOOL bQuickEdit;BOOL bInsertMode;BOOL bAutoPosition;UINT uHistoryBufferSize;UINT uNumberOfHistoryBuffers;BOOL bHistoryNoDup;COLORREF ColorTable[16];};
typedef LONG ( *PFN_DrvQueryTrueTypeOutline)(DHPDEV, FONTOBJ *, HGLYPH, BOOL, GLYPHDATA *, ULONG, TTPOLYGONHEADER *);
struct IShellTaskScheduler2Vtbl {HRESULT ( *QueryInterface)(IShellTaskScheduler2 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellTaskScheduler2 *This);ULONG ( *Release)(IShellTaskScheduler2 *This);HRESULT ( *AddTask)(IShellTaskScheduler2 *This, IRunnableTask *pTask,  GUID * rtoid, DWORD_PTR lParam, DWORD dwPriority);HRESULT ( *RemoveTasks)(IShellTaskScheduler2 *This,  GUID * rtoid, DWORD_PTR lParam, BOOL fWaitIfRunning);UINT ( *CountTasks)(IShellTaskScheduler2 *This,  GUID * rtoid);HRESULT ( *Status)(IShellTaskScheduler2 *This, DWORD dwReleaseStatus, DWORD dwThreadTimeout);HRESULT ( *AddTask2)(IShellTaskScheduler2 *This, IRunnableTask *pTask,  GUID * rtoid, DWORD_PTR lParam, DWORD dwPriority, DWORD grfFlags);HRESULT ( *MoveTask)(IShellTaskScheduler2 *This,  GUID * rtoid, DWORD_PTR lParam, DWORD dwPriority, DWORD grfFlags);};
struct _ALLOCATOR_PROPERTIES_EX {int cBuffers;int cbBuffer;int cbAlign;int cbPrefix;GUID MemoryType;GUID BusType;PIPE_STATE State;PIPE_TERMINATION Input;PIPE_TERMINATION Output;ULONG Strategy;ULONG Flags;ULONG Weight;KS_LogicalMemoryType LogicalMemoryType;PIPE_ALLOCATOR_PLACE AllocatorPlace;PIPE_DIMENSIONS Dimensions;KS_FRAMING_RANGE PhysicalRange;IKsAllocatorEx *PrevSegment;ULONG CountNextSegments;IKsAllocatorEx **NextSegments;ULONG InsideFactors;ULONG NumberPins;};
struct IDirect3DSwapChain8Vtbl {HRESULT ( *QueryInterface)(IDirect3DSwapChain8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DSwapChain8 *This);ULONG ( *Release)(IDirect3DSwapChain8 *This);HRESULT ( *Present)(IDirect3DSwapChain8 *This,  RECT *pSourceRect,  RECT *pDestRect, HWND hDestWindowOverride,  RGNDATA *pDirtyRegion);HRESULT ( *GetBackBuffer)(IDirect3DSwapChain8 *This, UINT BackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface8 **ppBackBuffer);};
struct IShellTaskSchedulerVtbl {HRESULT ( *QueryInterface)(IShellTaskScheduler *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellTaskScheduler *This);ULONG ( *Release)(IShellTaskScheduler *This);HRESULT ( *AddTask)(IShellTaskScheduler *This, IRunnableTask *pTask,  GUID * rtoid, DWORD_PTR lParam, DWORD dwPriority);HRESULT ( *RemoveTasks)(IShellTaskScheduler *This,  GUID * rtoid, DWORD_PTR lParam, BOOL fWaitIfRunning);UINT ( *CountTasks)(IShellTaskScheduler *This,  GUID * rtoid);HRESULT ( *Status)(IShellTaskScheduler *This, DWORD dwReleaseStatus, DWORD dwThreadTimeout);};
struct _DDHAL_CREATEMOCOMPDATA {LPDDRAWI_DIRECTDRAW_LCL lpDD;LPDDRAWI_DDMOTIONCOMP_LCL lpMoComp;LPGUID lpGuid;DWORD dwUncompWidth;DWORD dwUncompHeight;DDPIXELFORMAT ddUncompPixelFormat;LPVOID lpData;DWORD dwDataSize;HRESULT ddRVal;LPDDHALMOCOMPCB_CREATE CreateMoComp;};
struct IDirectDrawPaletteVtbl {HRESULT ( *QueryInterface)(IDirectDrawPalette *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawPalette *This);ULONG ( *Release)(IDirectDrawPalette *This);HRESULT ( *GetCaps)(IDirectDrawPalette *This, LPDWORD);HRESULT ( *GetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);HRESULT ( *Initialize)(IDirectDrawPalette *This, LPDIRECTDRAW, DWORD, LPPALETTEENTRY);HRESULT ( *SetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);};
struct IDirect3DSurface8Vtbl {HRESULT ( *QueryInterface)(IDirect3DSurface8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DSurface8 *This);ULONG ( *Release)(IDirect3DSurface8 *This);HRESULT ( *GetDevice)(IDirect3DSurface8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DSurface8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DSurface8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DSurface8 *This,  GUID * refguid);HRESULT ( *GetContainer)(IDirect3DSurface8 *This,  IID * riid, void **ppContainer);HRESULT ( *GetDesc)(IDirect3DSurface8 *This, D3DSURFACE_DESC *pDesc);HRESULT ( *LockRect)(IDirect3DSurface8 *This, D3DLOCKED_RECT *pLockedRect,  RECT *pRect, DWORD Flags);HRESULT ( *UnlockRect)(IDirect3DSurface8 *This);};
struct IOleCommandTargetVtbl {HRESULT ( *QueryInterface)(IOleCommandTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCommandTarget *This);ULONG ( *Release)(IOleCommandTarget *This);HRESULT ( *QueryStatus)(IOleCommandTarget *This,  GUID *pguidCmdGroup, ULONG cCmds, OLECMD  *    prgCmds, OLECMDTEXT *pCmdText);HRESULT ( *Exec)(IOleCommandTarget *This,  GUID *pguidCmdGroup, DWORD nCmdID, DWORD nCmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);};
struct _EVENT_TRACE_LOGFILEA {LPSTR LogFileName;LPSTR LoggerName;LONGLONG CurrentTime;ULONG BuffersRead;ULONG LogFileMode;EVENT_TRACE CurrentEvent;TRACE_LOGFILE_HEADER LogfileHeader;PEVENT_TRACE_BUFFER_CALLBACKA BufferCallback;ULONG BufferSize;ULONG Filled;ULONG EventsLost;PEVENT_CALLBACK EventCallback;ULONG IsKernelTrace;PVOID Context;};
struct _OFFLOAD_IPSEC_ADD_SA {IPAddr SrcAddr;IPMask SrcMask;IPAddr DestAddr;IPMask DestMask;ULONG Protocol;USHORT SrcPort;USHORT DestPort;IPAddr SrcTunnelAddr;IPAddr DestTunnelAddr;USHORT Flags;SHORT NumSAs;OFFLOAD_SECURITY_ASSOCIATION SecAssoc[3];HANDLE OffloadHandle;ULONG KeyLen;UCHAR KeyMat[1];};
struct IDirect3DVolume8Vtbl {HRESULT ( *QueryInterface)(IDirect3DVolume8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DVolume8 *This);ULONG ( *Release)(IDirect3DVolume8 *This);HRESULT ( *GetDevice)(IDirect3DVolume8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DVolume8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DVolume8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DVolume8 *This,  GUID * refguid);HRESULT ( *GetContainer)(IDirect3DVolume8 *This,  IID * riid, void **ppContainer);HRESULT ( *GetDesc)(IDirect3DVolume8 *This, D3DVOLUME_DESC *pDesc);HRESULT ( *LockBox)(IDirect3DVolume8 *This, D3DLOCKED_BOX *pLockedVolume,  D3DBOX *pBox, DWORD Flags);HRESULT ( *UnlockBox)(IDirect3DVolume8 *This);};
struct IOleControlSiteVtbl {HRESULT ( *QueryInterface)(IOleControlSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControlSite *This);ULONG ( *Release)(IOleControlSite *This);HRESULT ( *OnControlInfoChanged)(IOleControlSite *This);HRESULT ( *LockInPlaceActive)(IOleControlSite *This, BOOL fLock);HRESULT ( *GetExtendedControl)(IOleControlSite *This, IDispatch **ppDisp);HRESULT ( *TransformCoords)(IOleControlSite *This, POINTL *pPtlHimetric, POINTF *pPtfContainer, DWORD dwFlags);HRESULT ( *TranslateAcceleratorA)(IOleControlSite *This, MSG *pMsg, DWORD grfModifiers);HRESULT ( *OnFocus)(IOleControlSite *This, BOOL fGotFocus);HRESULT ( *ShowPropertyFrame)(IOleControlSite *This);};
struct IPrintOemCommonVtbl {HRESULT ( *QueryInterface)(IPrintOemCommon *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPrintOemCommon *This);ULONG ( *Release)(IPrintOemCommon *This);HRESULT ( *GetInfo)(IPrintOemCommon *This, DWORD dwMode, PVOID pBuffer, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *DevMode)(IPrintOemCommon *This, DWORD dwMode, POEMDMPARAM pOemDMParam);};
struct IReferenceClockVtbl {HRESULT ( *QueryInterface)(IReferenceClock *This,  IID *, LPVOID *);ULONG ( *AddRef)(IReferenceClock *This);ULONG ( *Release)(IReferenceClock *This);HRESULT ( *GetTime)(IReferenceClock *This, REFERENCE_TIME *pTime);HRESULT ( *AdviseTime)(IReferenceClock *This, REFERENCE_TIME rtBaseTime, REFERENCE_TIME rtStreamTime, HANDLE hEvent, LPDWORD pdwAdviseCookie);HRESULT ( *AdvisePeriodic)(IReferenceClock *This, REFERENCE_TIME rtStartTime, REFERENCE_TIME rtPeriodTime, HANDLE hSemaphore, LPDWORD pdwAdviseCookie);HRESULT ( *Unadvise)(IReferenceClock *This, DWORD dwAdviseCookie);};
struct _D3DNTDeviceDesc_V3 {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;DWORD dwMinTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureWidth;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;};
struct IAccPropServerVtbl {HRESULT ( *QueryInterface)(IAccPropServer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccPropServer *This);ULONG ( *Release)(IAccPropServer *This);HRESULT ( *GetPropValue)(IAccPropServer *This,  BYTE *pIDString, DWORD dwIDStringLen, MSAAPROPID idProp, VARIANT *pvarValue, BOOL *pfHasProp);};
typedef BOOL ( *PFN_DrvStretchBlt)(SURFOBJ *, SURFOBJ *, SURFOBJ *, CLIPOBJ *, XLATEOBJ *, COLORADJUSTMENT *, POINTL *, RECTL *, RECTL *, POINTL *, ULONG);
struct _D3DDeviceDesc_V3 {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;DWORD dwMinTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureWidth;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;};
struct tACMFILTERCHOOSEA {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFILTER pwfltr;DWORD cbwfltr;LPCSTR pszTitle;char szFilterTag[48];char szFilter[128];LPSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFILTER pwfltrEnum;HINSTANCE hInstance;LPCSTR pszTemplateName;LPARAM lCustData;ACMFILTERCHOOSEHOOKPROCA pfnHook;};
struct tACMFORMATCHOOSEA {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFORMATEX pwfx;DWORD cbwfx;LPCSTR pszTitle;char szFormatTag[48];char szFormat[128];LPSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFORMATEX pwfxEnum;HINSTANCE hInstance;LPCSTR pszTemplateName;LPARAM lCustData;ACMFORMATCHOOSEHOOKPROCA pfnHook;};
struct IContextMenuVtbl {HRESULT ( *QueryInterface)(IContextMenu *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IContextMenu *This);ULONG ( *Release)(IContextMenu *This);HRESULT ( *QueryContextMenu)(IContextMenu *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu *This, UINT_PTR idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);};
struct IFolderViewVtbl {HRESULT ( *QueryInterface)(IFolderView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderView *This);ULONG ( *Release)(IFolderView *This);HRESULT ( *GetCurrentViewMode)(IFolderView *This, UINT *pViewMode);HRESULT ( *SetCurrentViewMode)(IFolderView *This, UINT ViewMode);HRESULT ( *GetFolder)(IFolderView *This,  IID * riid, void **ppv);HRESULT ( *Item)(IFolderView *This, int iItemIndex, LPITEMIDLIST *ppidl);HRESULT ( *ItemCount)(IFolderView *This, UINT uFlags, int *pcItems);HRESULT ( *Items)(IFolderView *This, UINT uFlags,  IID * riid, void **ppv);HRESULT ( *GetSelectionMarkedItem)(IFolderView *This, int *piItem);HRESULT ( *GetFocusedItem)(IFolderView *This, int *piItem);HRESULT ( *GetItemPosition)(IFolderView *This, LPCITEMIDLIST pidl, POINT *ppt);HRESULT ( *GetSpacing)(IFolderView *This, POINT *ppt);HRESULT ( *GetDefaultSpacing)(IFolderView *This, POINT *ppt);HRESULT ( *GetAutoArrange)(IFolderView *This);HRESULT ( *SelectItem)(IFolderView *This, int iItem, DWORD dwFlags);HRESULT ( *SelectAndPositionItems)(IFolderView *This, UINT cidl, LPCITEMIDLIST *apidl, POINT *apt, DWORD dwFlags);};
typedef BOOL ( *PFN_DrvFillPath)(SURFOBJ *, PATHOBJ *, CLIPOBJ *, BRUSHOBJ *, POINTL *, MIX, FLONG);
struct tagFINDREPLACEA {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;DWORD Flags;LPSTR lpstrFindWhat;LPSTR lpstrReplaceWith;WORD wFindWhatLen;WORD wReplaceWithLen;LPARAM lCustData;LPFRHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
struct tagINPUTCONTEXT {HWND hWnd;BOOL fOpen;POINT ptStatusWndPos;POINT ptSoftKbdPos;DWORD fdwConversion;DWORD fdwSentence;union tagINPUTCONTEXT___072C26F05A152342D8ECB054BF7B2AA0 lfFont;COMPOSITIONFORM cfCompForm;CANDIDATEFORM cfCandForm[4];HIMCC hCompStr;HIMCC hCandInfo;HIMCC hGuideLine;HIMCC hPrivate;DWORD dwNumMsgBuf;HIMCC hMsgBuf;DWORD fdwInit;DWORD dwReserve[3];};
struct IAVIStreamVtbl {HRESULT ( *QueryInterface)(IAVIStream *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIStream *This);ULONG ( *Release)(IAVIStream *This);HRESULT ( *Create)(IAVIStream *This, LPARAM lParam1, LPARAM lParam2);HRESULT ( *Info)(IAVIStream *This, AVISTREAMINFOW *psi, LONG lSize);LONG ( *FindSample)(IAVIStream *This, LONG lPos, LONG lFlags);HRESULT ( *ReadFormat)(IAVIStream *This, LONG lPos, LPVOID lpFormat, LONG *lpcbFormat);HRESULT ( *SetFormat)(IAVIStream *This, LONG lPos, LPVOID lpFormat, LONG cbFormat);HRESULT ( *Read)(IAVIStream *This, LONG lStart, LONG lSamples, LPVOID lpBuffer, LONG cbBuffer, LONG *plBytes, LONG *plSamples);HRESULT ( *Write)(IAVIStream *This, LONG lStart, LONG lSamples, LPVOID lpBuffer, LONG cbBuffer, DWORD dwFlags, LONG *plSampWritten, LONG *plBytesWritten);HRESULT ( *Delete)(IAVIStream *This, LONG lStart, LONG lSamples);HRESULT ( *ReadData)(IAVIStream *This, DWORD fcc, LPVOID lp, LONG *lpcb);HRESULT ( *WriteData)(IAVIStream *This, DWORD fcc, LPVOID lp, LONG cb);HRESULT ( *SetInfo)(IAVIStream *This, AVISTREAMINFOW *lpInfo, LONG cbInfo);};
struct _D3DDeviceDesc {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;DWORD dwMinTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureWidth;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;DWORD dwMaxTextureRepeat;DWORD dwMaxTextureAspectRatio;DWORD dwMaxAnisotropy;D3DVALUE dvGuardBandLeft;D3DVALUE dvGuardBandTop;D3DVALUE dvGuardBandRight;D3DVALUE dvGuardBandBottom;D3DVALUE dvExtentsAdjust;DWORD dwStencilCaps;DWORD dwFVFCaps;DWORD dwTextureOpCaps;WORD wMaxTextureBlendStages;WORD wMaxSimultaneousTextures;};
struct tagMONCBSTRUCT {UINT cb;DWORD dwTime;HANDLE hTask;DWORD dwRet;UINT wType;UINT wFmt;HCONV hConv;HSZ hsz1;HSZ hsz2;HDDEDATA hData;ULONG_PTR dwData1;ULONG_PTR dwData2;CONVCONTEXT cc;DWORD cbData;DWORD Data[8];};
struct IDeskBandVtbl {HRESULT ( *QueryInterface)(IDeskBand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDeskBand *This);ULONG ( *Release)(IDeskBand *This);HRESULT ( *GetWindow)(IDeskBand *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IDeskBand *This, BOOL fEnterMode);HRESULT ( *ShowDW)(IDeskBand *This, BOOL fShow);HRESULT ( *CloseDW)(IDeskBand *This, DWORD dwReserved);HRESULT ( *ResizeBorderDW)(IDeskBand *This, LPCRECT prcBorder, IUnknown *punkToolbarSite, BOOL fReserved);HRESULT ( *GetBandInfo)(IDeskBand *This, DWORD dwBandID, DWORD dwViewMode, DESKBANDINFO *pdbi);};
typedef int ( *LPWSPRECVFROM)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, struct sockaddr *lpFrom, LPINT lpFromlen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef BOOL ( *PFN_DrvBitBlt)(SURFOBJ *, SURFOBJ *, SURFOBJ *, CLIPOBJ *, XLATEOBJ *, RECTL *, POINTL *, POINTL *, BRUSHOBJ *, POINTL *, ROP4);
typedef int ( *LPWSPSENDTO)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags,  struct sockaddr *lpTo, int iTolen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct tagCONVINFO {DWORD cb;DWORD_PTR hUser;HCONV hConvPartner;HSZ hszSvcPartner;HSZ hszServiceReq;HSZ hszTopic;HSZ hszItem;UINT wFmt;UINT wType;UINT wStatus;UINT wConvst;UINT wLastError;HCONVLIST hConvList;CONVCONTEXT ConvCtxt;HWND hwnd;HWND hwndPartner;};
struct tagOFN_NT4A {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpstrFilter;LPSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPSTR lpstrFile;DWORD nMaxFile;LPSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCSTR lpstrInitialDir;LPCSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
struct IPrintVtbl {HRESULT ( *QueryInterface)(IPrint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPrint *This);ULONG ( *Release)(IPrint *This);HRESULT ( *SetInitialPageNum)(IPrint *This, LONG nFirstPage);HRESULT ( *GetPageInfo)(IPrint *This, LONG *pnFirstPage, LONG *pcPages);HRESULT ( *Print)(IPrint *This, DWORD grfFlags, DVTARGETDEVICE **pptd, PAGESET **ppPageSet, STGMEDIUM *pstgmOptions, IContinueCallback *pcallback, LONG nFirstPage, LONG *pcPagesPrinted, LONG *pnLastPage);};
typedef int ( *LPWSPIOCTL)(SOCKET s, DWORD dwIoControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct _CERT_INFO {DWORD dwVersion;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME NotBefore;FILETIME NotAfter;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;CRYPT_BIT_BLOB IssuerUniqueId;CRYPT_BIT_BLOB SubjectUniqueId;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _D3DVERTEX {_D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 __anonymous0;_D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA __anonymous2;_D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21 __anonymous4;_D3DVERTEX___83AC1A1E23B9ECFE234B7286E62DB631 __anonymous6;_D3DVERTEX___3782FED7D702BF3DE1FC57BD6CFA9C0A __anonymous7;_D3DVERTEX___D6B931185C6B831ED9D2BDE28EC5A699 __anonymous8;_D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 __anonymous9;_D3DLVERTEX___7013070F7992C3CB148910863AB1E659 __anonymous12;};
typedef int ( *LPWSPRECV)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef int ( *LPWSPSEND)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct _CTL_INFO {DWORD dwVersion;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;CRYPT_INTEGER_BLOB SequenceNumber;FILETIME ThisUpdate;FILETIME NextUpdate;CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;DWORD cCTLEntry;PCTL_ENTRY rgCTLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _VMEMHEAP {DWORD dwFlags;DWORD stride;LPVOID freeList;LPVOID allocList;DWORD dwTotalSize;FLATPTR fpGARTLin;FLATPTR fpGARTDev;DWORD dwCommitedSize;DWORD dwCoalesceCount;HEAPALIGNMENT Alignment;DDSCAPSEX ddsCapsEx;DDSCAPSEX ddsCapsExAlt;LARGE_INTEGER liPhysAGPBase;HANDLE hdevAGP;LPVOID pvPhysRsrv;BYTE *pAgpCommitMask;DWORD dwAgpCommitMaskSize;};
struct tagOFNA {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpstrFilter;LPSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPSTR lpstrFile;DWORD nMaxFile;LPSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCSTR lpstrInitialDir;LPCSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCSTR lpTemplateName;void *pvReserved;DWORD dwReserved;DWORD FlagsEx;};
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 {EXCEPTION_DEBUG_INFO Exception;CREATE_THREAD_DEBUG_INFO CreateThread;CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;EXIT_THREAD_DEBUG_INFO ExitThread;EXIT_PROCESS_DEBUG_INFO ExitProcess;LOAD_DLL_DEBUG_INFO LoadDll;UNLOAD_DLL_DEBUG_INFO UnloadDll;OUTPUT_DEBUG_STRING_INFO DebugString;RIP_INFO RipInfo;};
struct IDirectSoundFXI3DL2ReverbVtbl {HRESULT ( *QueryInterface)(IDirectSoundFXI3DL2Reverb *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFXI3DL2Reverb *This);ULONG ( *Release)(IDirectSoundFXI3DL2Reverb *This);HRESULT ( *SetAllParameters)(IDirectSoundFXI3DL2Reverb *This, LPCDSFXI3DL2Reverb pcDsFxI3DL2Reverb);HRESULT ( *GetAllParameters)(IDirectSoundFXI3DL2Reverb *This, LPDSFXI3DL2Reverb pDsFxI3DL2Reverb);HRESULT ( *SetPreset)(IDirectSoundFXI3DL2Reverb *This, DWORD dwPreset);HRESULT ( *GetPreset)(IDirectSoundFXI3DL2Reverb *This, LPDWORD pdwPreset);HRESULT ( *SetQuality)(IDirectSoundFXI3DL2Reverb *This, LONG lQuality);HRESULT ( *GetQuality)(IDirectSoundFXI3DL2Reverb *This, LONG *plQuality);};
struct _OFFLOAD_IPSEC_ADD_UDPESP_SA {IPAddr SrcAddr;IPMask SrcMask;IPAddr DstAddr;IPMask DstMask;ULONG Protocol;USHORT SrcPort;USHORT DstPort;IPAddr SrcTunnelAddr;IPAddr DstTunnelAddr;USHORT Flags;SHORT NumSAs;OFFLOAD_SECURITY_ASSOCIATION SecAssoc[3];HANDLE OffloadHandle;OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY EncapTypeEntry;HANDLE EncapTypeEntryOffldHandle;ULONG KeyLen;UCHAR KeyMat[1];};
struct IDirect3DVertexBuffer8Vtbl {HRESULT ( *QueryInterface)(IDirect3DVertexBuffer8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DVertexBuffer8 *This);ULONG ( *Release)(IDirect3DVertexBuffer8 *This);HRESULT ( *GetDevice)(IDirect3DVertexBuffer8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DVertexBuffer8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DVertexBuffer8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DVertexBuffer8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DVertexBuffer8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DVertexBuffer8 *This);void ( *PreLoad)(IDirect3DVertexBuffer8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DVertexBuffer8 *This);HRESULT ( *Lock)(IDirect3DVertexBuffer8 *This, UINT OffsetToLock, UINT SizeToLock, BYTE **ppbData, DWORD Flags);HRESULT ( *Unlock)(IDirect3DVertexBuffer8 *This);HRESULT ( *GetDesc)(IDirect3DVertexBuffer8 *This, D3DVERTEXBUFFER_DESC *pDesc);};
struct IDirectSound3DListenerVtbl {HRESULT ( *QueryInterface)(IDirectSound3DListener *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound3DListener *This);ULONG ( *Release)(IDirectSound3DListener *This);HRESULT ( *GetAllParameters)(IDirectSound3DListener *This, LPDS3DLISTENER pListener);HRESULT ( *GetDistanceFactor)(IDirectSound3DListener *This, D3DVALUE *pflDistanceFactor);HRESULT ( *GetDopplerFactor)(IDirectSound3DListener *This, D3DVALUE *pflDopplerFactor);HRESULT ( *GetOrientation)(IDirectSound3DListener *This, D3DVECTOR *pvOrientFront, D3DVECTOR *pvOrientTop);HRESULT ( *GetPosition)(IDirectSound3DListener *This, D3DVECTOR *pvPosition);HRESULT ( *GetRolloffFactor)(IDirectSound3DListener *This, D3DVALUE *pflRolloffFactor);HRESULT ( *GetVelocity)(IDirectSound3DListener *This, D3DVECTOR *pvVelocity);HRESULT ( *SetAllParameters)(IDirectSound3DListener *This, LPCDS3DLISTENER pcListener, DWORD dwApply);HRESULT ( *SetDistanceFactor)(IDirectSound3DListener *This, D3DVALUE flDistanceFactor, DWORD dwApply);HRESULT ( *SetDopplerFactor)(IDirectSound3DListener *This, D3DVALUE flDopplerFactor, DWORD dwApply);HRESULT ( *SetOrientation)(IDirectSound3DListener *This, D3DVALUE xFront, D3DVALUE yFront, D3DVALUE zFront, D3DVALUE xTop, D3DVALUE yTop, D3DVALUE zTop, DWORD dwApply);HRESULT ( *SetPosition)(IDirectSound3DListener *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);HRESULT ( *SetRolloffFactor)(IDirectSound3DListener *This, D3DVALUE flRolloffFactor, DWORD dwApply);HRESULT ( *SetVelocity)(IDirectSound3DListener *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);HRESULT ( *CommitDeferredSettings)(IDirectSound3DListener *This);};
struct IDirect3DIndexBuffer8Vtbl {HRESULT ( *QueryInterface)(IDirect3DIndexBuffer8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DIndexBuffer8 *This);ULONG ( *Release)(IDirect3DIndexBuffer8 *This);HRESULT ( *GetDevice)(IDirect3DIndexBuffer8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DIndexBuffer8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DIndexBuffer8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DIndexBuffer8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DIndexBuffer8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DIndexBuffer8 *This);void ( *PreLoad)(IDirect3DIndexBuffer8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DIndexBuffer8 *This);HRESULT ( *Lock)(IDirect3DIndexBuffer8 *This, UINT OffsetToLock, UINT SizeToLock, BYTE **ppbData, DWORD Flags);HRESULT ( *Unlock)(IDirect3DIndexBuffer8 *This);HRESULT ( *GetDesc)(IDirect3DIndexBuffer8 *This, D3DINDEXBUFFER_DESC *pDesc);};
struct IPrintDialogCallbackVtbl {HRESULT ( *QueryInterface)(IPrintDialogCallback *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPrintDialogCallback *This);ULONG ( *Release)(IPrintDialogCallback *This);HRESULT ( *InitDone)(IPrintDialogCallback *This);HRESULT ( *SelectionChange)(IPrintDialogCallback *This);HRESULT ( *HandleMessage)(IPrintDialogCallback *This, HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult);};
typedef BOOL ( *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PFN_CMSG_ALLOC pfnAlloc, HCRYPTKEY *phEncryptKey, PBYTE *ppbEncryptParameters, PDWORD pcbEncryptParameters);
struct _DDRAWI_DDRAWSURFACE_GBL {DWORD dwRefCnt;DWORD dwGlobalFlags;_DDRAWI_DDRAWSURFACE_GBL___067F989D0D1C114CD62AD2D89785FAE9 __anonymous0;_DDRAWI_DDRAWSURFACE_GBL___EC76CB933E4FE6CB0F7AEE5EDE5FE8FF __anonymous1;_DDRAWI_DDRAWSURFACE_GBL___3E3480D0EE217BAF358C6F7F63164C60 __anonymous2;FLATPTR fpVidMem;_DDRAWI_DDRAWSURFACE_GBL___091DBF7D405BE25E65B16620C008128B __anonymous3;WORD wHeight;WORD wWidth;DWORD dwUsageCount;ULONG_PTR dwReserved1;DDPIXELFORMAT ddpfSurface;};
struct IDirectSoundCaptureVtbl {HRESULT ( *QueryInterface)(IDirectSoundCapture *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCapture *This);ULONG ( *Release)(IDirectSoundCapture *This);HRESULT ( *CreateCaptureBuffer)(IDirectSoundCapture *This, LPCDSCBUFFERDESC pcDSCBufferDesc, LPDIRECTSOUNDCAPTUREBUFFER *ppDSCBuffer, LPUNKNOWN pUnkOuter);HRESULT ( *GetCaps)(IDirectSoundCapture *This, LPDSCCAPS pDSCCaps);HRESULT ( *Initialize)(IDirectSoundCapture *This, LPCGUID pcGuidDevice);};
struct _EVENT_INSTANCE_HEADER {USHORT Size;_EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786 __anonymous0;_EVENT_INSTANCE_HEADER___CD063E6C818675C054F8A7A9A4738EC7 __anonymous3;ULONG ThreadId;ULONG ProcessId;LARGE_INTEGER TimeStamp;ULONGLONG RegHandle;ULONG InstanceId;ULONG ParentInstanceId;union {_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___4632BB0954E310FA042A82D8AAC70C14 __anonymous4;_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___3916B5A0A4660469331A3AB74E6C841E __anonymous7;ULONG64 ProcessorTime;};ULONGLONG ParentRegHandle;};
struct IPrintOemDriverUIVtbl {HRESULT ( *QueryInterface)(IPrintOemDriverUI *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPrintOemDriverUI *This);ULONG ( *Release)(IPrintOemDriverUI *This);HRESULT ( *DrvGetDriverSetting)(IPrintOemDriverUI *This, PVOID pci, PCSTR Feature, PVOID pOutput, DWORD cbSize, PDWORD pcbNeeded, PDWORD pdwOptionsReturned);HRESULT ( *DrvUpgradeRegistrySetting)(IPrintOemDriverUI *This, HANDLE hPrinter, PCSTR pFeature, PCSTR pOption);HRESULT ( *DrvUpdateUISetting)(IPrintOemDriverUI *This, PVOID pci, PVOID pOptItem, DWORD dwPreviousSelection, DWORD dwMode);};
struct ISimpleFrameSiteVtbl {HRESULT ( *QueryInterface)(ISimpleFrameSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISimpleFrameSite *This);ULONG ( *Release)(ISimpleFrameSite *This);HRESULT ( *PreMessageFilter)(ISimpleFrameSite *This, HWND hWnd, UINT msg, WPARAM wp, LPARAM lp, LRESULT *plResult, DWORD *pdwCookie);HRESULT ( *PostMessageFilter)(ISimpleFrameSite *This, HWND hWnd, UINT msg, WPARAM wp, LPARAM lp, LRESULT *plResult, DWORD dwCookie);};
struct IColumnProviderVtbl {HRESULT ( *QueryInterface)(IColumnProvider *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IColumnProvider *This);ULONG ( *Release)(IColumnProvider *This);HRESULT ( *Initialize)(IColumnProvider *This, LPCSHCOLUMNINIT psci);HRESULT ( *GetColumnInfo)(IColumnProvider *This, DWORD dwIndex, SHCOLUMNINFO *psci);HRESULT ( *GetItemData)(IColumnProvider *This, LPCSHCOLUMNID pscid, LPCSHCOLUMNDATA pscd, VARIANT *pvarData);};
struct IOleInPlaceSiteVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSite *This);ULONG ( *Release)(IOleInPlaceSite *This);HRESULT ( *GetWindow)(IOleInPlaceSite *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSite *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSite *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSite *This);HRESULT ( *OnUIActivate)(IOleInPlaceSite *This);HRESULT ( *GetWindowContext)(IOleInPlaceSite *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSite *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSite *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSite *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSite *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSite *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSite *This, LPCRECT lprcPosRect);};
typedef BOOL ( *PFN_DrvGradientFill)(SURFOBJ *, CLIPOBJ *, XLATEOBJ *, TRIVERTEX *, ULONG, PVOID, ULONG, RECTL *, POINTL *, ULONG);
struct _EVENT_TRACE_HEADER {USHORT Size;_EVENT_INSTANCE_HEADER___35B0F3EA56849800F72A377BB01EF786 __anonymous0;_EVENT_TRACE_HEADER___9430D09E29912981CCDB72549C8FCA9E __anonymous2;ULONG ThreadId;ULONG ProcessId;LARGE_INTEGER TimeStamp;_EVENT_TRACE_HEADER___146F82FB58FCEC23F5D30A6BD72C4E4F __anonymous3;union {_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___4632BB0954E310FA042A82D8AAC70C14 __anonymous4;_EVENT_INSTANCE_HEADER___9497770372971F54F7DA6FC3F6A39830___3916B5A0A4660469331A3AB74E6C841E __anonymous6;ULONG64 ProcessorTime;};};
struct _DD_SURFACE_GLOBAL {_DD_SURFACE_GLOBAL___7A21B59C32CFF5CA15CB97B965C92E66 __anonymous0;_DD_SURFACE_GLOBAL___CB1E62DE7444A801DA980E43BEA08FB3 __anonymous1;FLATPTR fpVidMem;_DDRAWI_DDRAWSURFACE_GBL___091DBF7D405BE25E65B16620C008128B __anonymous2;LONG yHint;LONG xHint;DWORD wHeight;DWORD wWidth;ULONG_PTR dwReserved1;DDPIXELFORMAT ddpfSurface;FLATPTR fpHeapOffset;HANDLE hCreatorProcess;};
struct _SHELLEXECUTEINFOA {DWORD cbSize;ULONG fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpFile;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;HINSTANCE hInstApp;LPVOID lpIDList;LPCSTR lpClass;HKEY hkeyClass;DWORD dwHotKey;_SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 __anonymous0;HANDLE hProcess;};
typedef BOOL ( *PFN_DrvStrokePath)(SURFOBJ *, PATHOBJ *, CLIPOBJ *, XFORMOBJ *, BRUSHOBJ *, POINTL *, LINEATTRS *, MIX);
struct _DD_SURFACE_LOCAL {PDD_SURFACE_GLOBAL lpGbl;DWORD dwFlags;DDSCAPS ddsCaps;ULONG_PTR dwReserved1;_DD_SURFACE_LOCAL___8CE80F6FCD2F01A44D21440F2D83D305 __anonymous0;_DD_SURFACE_LOCAL___E7EC937F2BC99723904DDC13F7AE4E6E __anonymous1;PDD_SURFACE_MORE lpSurfMore;PDD_ATTACHLIST lpAttachList;PDD_ATTACHLIST lpAttachListFrom;RECT rcOverlaySrc;};
struct _DDHAL_CALLBACKS {DDHAL_DDCALLBACKS cbDDCallbacks;DDHAL_DDSURFACECALLBACKS cbDDSurfaceCallbacks;DDHAL_DDPALETTECALLBACKS cbDDPaletteCallbacks;DDHAL_DDCALLBACKS HALDD;DDHAL_DDSURFACECALLBACKS HALDDSurface;DDHAL_DDPALETTECALLBACKS HALDDPalette;DDHAL_DDCALLBACKS HELDD;DDHAL_DDSURFACECALLBACKS HELDDSurface;DDHAL_DDPALETTECALLBACKS HELDDPalette;DDHAL_DDEXEBUFCALLBACKS cbDDExeBufCallbacks;DDHAL_DDEXEBUFCALLBACKS HALDDExeBuf;DDHAL_DDEXEBUFCALLBACKS HELDDExeBuf;DDHAL_DDVIDEOPORTCALLBACKS cbDDVideoPortCallbacks;DDHAL_DDVIDEOPORTCALLBACKS HALDDVideoPort;DDHAL_DDCOLORCONTROLCALLBACKS cbDDColorControlCallbacks;DDHAL_DDCOLORCONTROLCALLBACKS HALDDColorControl;DDHAL_DDMISCELLANEOUSCALLBACKS cbDDMiscellaneousCallbacks;DDHAL_DDMISCELLANEOUSCALLBACKS HALDDMiscellaneous;DDHAL_DDKERNELCALLBACKS cbDDKernelCallbacks;DDHAL_DDKERNELCALLBACKS HALDDKernel;DDHAL_DDMOTIONCOMPCALLBACKS cbDDMotionCompCallbacks;DDHAL_DDMOTIONCOMPCALLBACKS HALDDMotionComp;};
struct _NDIS_WLAN_BSSID {ULONG Length;NDIS_802_11_MAC_ADDRESS MacAddress;UCHAR Reserved[2];NDIS_802_11_SSID Ssid;ULONG Privacy;NDIS_802_11_RSSI Rssi;NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;NDIS_802_11_CONFIGURATION Configuration;NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;NDIS_802_11_RATES SupportedRates;};
struct _DDSURFACEDESC2 {DWORD dwSize;DWORD dwFlags;DWORD dwHeight;DWORD dwWidth;_DDRAWI_DDRAWSURFACE_GBL___091DBF7D405BE25E65B16620C008128B __anonymous0;_DDSURFACEDESC2___E56E877DD0D4D3B03846BC7047D947ED __anonymous4;_DDSURFACEDESC2___F25F5019EA70F6B9B11866A0D418A260 __anonymous5;DWORD dwAlphaBitDepth;DWORD dwReserved;LPVOID lpSurface;_DDSURFACEDESC2___5B12F1D1A21F9ED7C15CB39448B5A42D __anonymous6;DDCOLORKEY ddckCKDestBlt;DDCOLORKEY ddckCKSrcOverlay;DDCOLORKEY ddckCKSrcBlt;_DDSURFACEDESC2___640C42AFF919FFD3058B9E962436B842 __anonymous7;DDSCAPS2 ddsCaps;DWORD dwTextureStage;};
struct _MCDRENDERSTATE {ULONG enables;BOOL textureEnabled;MCDCOLOR fogColor;MCDFLOAT fogIndex;MCDFLOAT fogDensity;MCDFLOAT fogStart;MCDFLOAT fogEnd;ULONG fogMode;ULONG shadeModel;MCDFLOAT pointSize;MCDFLOAT lineWidth;USHORT lineStipplePattern;SHORT lineStippleRepeat;ULONG cullFaceMode;ULONG frontFace;ULONG polygonModeFront;ULONG polygonModeBack;BYTE polygonStipple[128];MCDFLOAT zOffsetFactor;MCDFLOAT zOffsetUnits;BOOL stencilTestFunc;USHORT stencilMask;USHORT stencilRef;ULONG stencilFail;ULONG stencilDepthFail;ULONG stencilDepthPass;ULONG alphaTestFunc;MCDFLOAT alphaTestRef;ULONG depthTestFunc;ULONG blendSrc;ULONG blendDst;ULONG logicOpMode;ULONG drawBuffer;ULONG indexWritemask;BOOL colorWritemask[4];BOOL depthWritemask;USHORT stencilWritemask;MCDCOLOR colorClearValue;MCDFLOAT indexClearValue;MCDDOUBLE depthClearValue;USHORT stencilClearValue;BOOL twoSided;MCDCOORD userClipPlanes[6];ULONG perspectiveCorrectionHint;ULONG pointSmoothHint;ULONG lineSmoothHint;ULONG polygonSmoothHint;ULONG fogHint;};
struct IMenuPopupVtbl {HRESULT ( *QueryInterface)(IMenuPopup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMenuPopup *This);ULONG ( *Release)(IMenuPopup *This);HRESULT ( *GetWindow)(IMenuPopup *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IMenuPopup *This, BOOL fEnterMode);HRESULT ( *SetClient)(IMenuPopup *This, IUnknown *punkClient);HRESULT ( *GetClient)(IMenuPopup *This, IUnknown **ppunkClient);HRESULT ( *OnPosRectChangeDB)(IMenuPopup *This, LPRECT prc);HRESULT ( *Popup)(IMenuPopup *This, POINTL *ppt, RECTL *prcExclude, DWORD dwFlags);HRESULT ( *OnSelect)(IMenuPopup *This, DWORD dwSelectType);HRESULT ( *SetSubMenu)(IMenuPopup *This, IMenuPopup *pmp, BOOL fSet);};
struct IOleCache2Vtbl {HRESULT ( *QueryInterface)(IOleCache2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCache2 *This);ULONG ( *Release)(IOleCache2 *This);HRESULT ( *Cache)(IOleCache2 *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT ( *Uncache)(IOleCache2 *This, DWORD dwConnection);HRESULT ( *EnumCache)(IOleCache2 *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT ( *InitCache)(IOleCache2 *This, IDataObject *pDataObject);HRESULT ( *SetData)(IOleCache2 *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT ( *UpdateCache)(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);HRESULT ( *DiscardCache)(IOleCache2 *This, DWORD dwDiscardOptions);};
typedef BOOL ( *PFN_DrvTextOut)(SURFOBJ *, STROBJ *, FONTOBJ *, CLIPOBJ *, RECTL *, RECTL *, BRUSHOBJ *, BRUSHOBJ *, POINTL *, MIX);
struct _DDHAL_BLTDATA {LPDDRAWI_DIRECTDRAW_GBL lpDD;LPDDRAWI_DDRAWSURFACE_LCL lpDDDestSurface;RECTL rDest;LPDDRAWI_DDRAWSURFACE_LCL lpDDSrcSurface;RECTL rSrc;DWORD dwFlags;DWORD dwROPFlags;DDBLTFX bltFX;HRESULT ddRVal;LPDDHALSURFCB_BLT Blt;BOOL IsClipped;RECTL rOrigDest;RECTL rOrigSrc;DWORD dwRectCnt;LPRECT prDestRects;};
typedef BOOL ( *PFN_DrvPlgBlt)(SURFOBJ *, SURFOBJ *, SURFOBJ *, CLIPOBJ *, XLATEOBJ *, COLORADJUSTMENT *, POINTL *, POINTFIX *, RECTL *, POINTL *, ULONG);
struct IAVIFileVtbl {HRESULT ( *QueryInterface)(IAVIFile *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIFile *This);ULONG ( *Release)(IAVIFile *This);HRESULT ( *Info)(IAVIFile *This, AVIFILEINFOW *pfi, LONG lSize);HRESULT ( *GetStream)(IAVIFile *This, PAVISTREAM *ppStream, DWORD fccType, LONG lParam);HRESULT ( *CreateStream)(IAVIFile *This, PAVISTREAM *ppStream, AVISTREAMINFOW *psi);HRESULT ( *WriteData)(IAVIFile *This, DWORD ckid, LPVOID lpData, LONG cbData);HRESULT ( *ReadData)(IAVIFile *This, DWORD ckid, LPVOID lpData, LONG *lpcbData);HRESULT ( *EndRecord)(IAVIFile *This);HRESULT ( *DeleteStream)(IAVIFile *This, DWORD fccType, LONG lParam);};
struct _DD_BLTDATA {PDD_DIRECTDRAW_GLOBAL lpDD;PDD_SURFACE_LOCAL lpDDDestSurface;RECTL rDest;PDD_SURFACE_LOCAL lpDDSrcSurface;RECTL rSrc;DWORD dwFlags;DWORD dwROPFlags;DDBLTFX bltFX;HRESULT ddRVal;void *Blt;BOOL IsClipped;RECTL rOrigDest;RECTL rOrigSrc;DWORD dwRectCnt;LPRECT prDestRects;DWORD dwAFlags;DDARGB ddargbScaleFactors;};
struct _SURFOBJ {DHSURF dhsurf;HSURF hsurf;DHPDEV dhpdev;HDEV hdev;SIZEL sizlBitmap;ULONG cjBits;PVOID pvBits;PVOID pvScan0;LONG lDelta;ULONG iUniq;ULONG iBitmapFormat;USHORT iType;USHORT fjBitmap;};
struct tagPDEXA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;DWORD Flags2;DWORD ExclusionFlags;DWORD nPageRanges;DWORD nMaxPageRanges;LPPRINTPAGERANGE lpPageRanges;DWORD nMinPage;DWORD nMaxPage;DWORD nCopies;HINSTANCE hInstance;LPCSTR lpPrintTemplateName;LPUNKNOWN lpCallback;DWORD nPropertyPages;HPROPSHEETPAGE *lphPropertyPages;DWORD nStartPage;DWORD dwResultAction;};
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 {SAFEARR_BSTR BstrStr;SAFEARR_UNKNOWN UnknownStr;SAFEARR_DISPATCH DispatchStr;SAFEARR_VARIANT VariantStr;SAFEARR_BRECORD RecordStr;SAFEARR_HAVEIID HaveIidStr;BYTE_SIZEDARR ByteStr;WORD_SIZEDARR WordStr;DWORD_SIZEDARR LongStr;HYPER_SIZEDARR HyperStr;};
struct _9B80566C9ECE6A73A5F898405A50FFFF {DWORD dwStructSize;SCARDCONTEXT hSCardContext;HWND hwndOwner;DWORD dwFlags;LPCSTR lpstrTitle;LPCSTR lpstrSearchDesc;HICON hIcon;POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;LPOCNCONNPROCA lpfnConnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;LPSTR lpstrRdr;DWORD nMaxRdr;LPSTR lpstrCard;DWORD nMaxCard;DWORD dwActiveProtocol;SCARDHANDLE hCardHandle;};
struct IOleInPlaceObjectWindowlessVtbl {HRESULT ( *QueryInterface)(IOleInPlaceObjectWindowless *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceObjectWindowless *This);ULONG ( *Release)(IOleInPlaceObjectWindowless *This);HRESULT ( *GetWindow)(IOleInPlaceObjectWindowless *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceObjectWindowless *This, BOOL fEnterMode);HRESULT ( *InPlaceDeactivate)(IOleInPlaceObjectWindowless *This);HRESULT ( *UIDeactivate)(IOleInPlaceObjectWindowless *This);HRESULT ( *SetObjectRects)(IOleInPlaceObjectWindowless *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT ( *ReactivateAndUndo)(IOleInPlaceObjectWindowless *This);HRESULT ( *OnWindowMessage)(IOleInPlaceObjectWindowless *This, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *GetDropTarget)(IOleInPlaceObjectWindowless *This, IDropTarget **ppDropTarget);};
struct IDirectSoundCaptureBufferVtbl {HRESULT ( *QueryInterface)(IDirectSoundCaptureBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCaptureBuffer *This);ULONG ( *Release)(IDirectSoundCaptureBuffer *This);HRESULT ( *GetCaps)(IDirectSoundCaptureBuffer *This, LPDSCBCAPS pDSCBCaps);HRESULT ( *GetCurrentPosition)(IDirectSoundCaptureBuffer *This, LPDWORD pdwCapturePosition, LPDWORD pdwReadPosition);HRESULT ( *GetFormat)(IDirectSoundCaptureBuffer *This, LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten);HRESULT ( *GetStatus)(IDirectSoundCaptureBuffer *This, LPDWORD pdwStatus);HRESULT ( *Initialize)(IDirectSoundCaptureBuffer *This, LPDIRECTSOUNDCAPTURE pDirectSoundCapture, LPCDSCBUFFERDESC pcDSCBufferDesc);HRESULT ( *Lock)(IDirectSoundCaptureBuffer *This, DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1, LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags);HRESULT ( *Start)(IDirectSoundCaptureBuffer *This, DWORD dwFlags);HRESULT ( *Stop)(IDirectSoundCaptureBuffer *This);HRESULT ( *Unlock)(IDirectSoundCaptureBuffer *This, LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2);};
struct IDirect3DVolumeTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DVolumeTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DVolumeTexture8 *This);ULONG ( *Release)(IDirect3DVolumeTexture8 *This);HRESULT ( *GetDevice)(IDirect3DVolumeTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DVolumeTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DVolumeTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DVolumeTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DVolumeTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DVolumeTexture8 *This);void ( *PreLoad)(IDirect3DVolumeTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DVolumeTexture8 *This);DWORD ( *SetLOD)(IDirect3DVolumeTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DVolumeTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DVolumeTexture8 *This);HRESULT ( *GetLevelDesc)(IDirect3DVolumeTexture8 *This, UINT Level, D3DVOLUME_DESC *pDesc);HRESULT ( *GetVolumeLevel)(IDirect3DVolumeTexture8 *This, UINT Level, IDirect3DVolume8 **ppVolumeLevel);HRESULT ( *LockBox)(IDirect3DVolumeTexture8 *This, UINT Level, D3DLOCKED_BOX *pLockedVolume,  D3DBOX *pBox, DWORD Flags);HRESULT ( *UnlockBox)(IDirect3DVolumeTexture8 *This, UINT Level);HRESULT ( *AddDirtyBox)(IDirect3DVolumeTexture8 *This,  D3DBOX *pDirtyBox);};
typedef BOOL ( *PFN_DrvStrokeAndFillPath)(SURFOBJ *, PATHOBJ *, CLIPOBJ *, XFORMOBJ *, BRUSHOBJ *, LINEATTRS *, BRUSHOBJ *, POINTL *, MIX, FLONG);
struct IDirect3DTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DTexture8 *This);ULONG ( *Release)(IDirect3DTexture8 *This);HRESULT ( *GetDevice)(IDirect3DTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DTexture8 *This);void ( *PreLoad)(IDirect3DTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DTexture8 *This);DWORD ( *SetLOD)(IDirect3DTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DTexture8 *This);HRESULT ( *GetLevelDesc)(IDirect3DTexture8 *This, UINT Level, D3DSURFACE_DESC *pDesc);HRESULT ( *GetSurfaceLevel)(IDirect3DTexture8 *This, UINT Level, IDirect3DSurface8 **ppSurfaceLevel);HRESULT ( *LockRect)(IDirect3DTexture8 *This, UINT Level, D3DLOCKED_RECT *pLockedRect,  RECT *pRect, DWORD Flags);HRESULT ( *UnlockRect)(IDirect3DTexture8 *This, UINT Level);HRESULT ( *AddDirtyRect)(IDirect3DTexture8 *This,  RECT *pDirtyRect);};
struct IOleInPlaceSiteExVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSiteEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSiteEx *This);ULONG ( *Release)(IOleInPlaceSiteEx *This);HRESULT ( *GetWindow)(IOleInPlaceSiteEx *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSiteEx *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSiteEx *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSiteEx *This);HRESULT ( *OnUIActivate)(IOleInPlaceSiteEx *This);HRESULT ( *GetWindowContext)(IOleInPlaceSiteEx *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSiteEx *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSiteEx *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSiteEx *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSiteEx *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSiteEx *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSiteEx *This, LPCRECT lprcPosRect);HRESULT ( *OnInPlaceActivateEx)(IOleInPlaceSiteEx *This, BOOL *pfNoRedraw, DWORD dwFlags);HRESULT ( *OnInPlaceDeactivateEx)(IOleInPlaceSiteEx *This, BOOL fNoRedraw);HRESULT ( *RequestUIActivate)(IOleInPlaceSiteEx *This);};
typedef BOOL ( *PFN_DrvStretchBltROP)(SURFOBJ *, SURFOBJ *, SURFOBJ *, CLIPOBJ *, XLATEOBJ *, COLORADJUSTMENT *, POINTL *, RECTL *, RECTL *, POINTL *, ULONG, BRUSHOBJ *, ROP4);
struct _MIDL_STUB_MESSAGE {PRPC_MESSAGE RpcMsg;unsigned char *Buffer;unsigned char *BufferStart;unsigned char *BufferEnd;unsigned char *BufferMark;unsigned int BufferLength;unsigned int MemorySize;unsigned char *Memory;int IsClient;int ReuseBuffer;struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;int IgnoreEmbeddedPointers;unsigned char *PointerBufferMark;unsigned char fBufferValid;unsigned char uFlags;unsigned short UniquePtrCount;ULONG_PTR MaxCount;unsigned int Offset;unsigned int ActualCount;void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);unsigned char *StackTop;unsigned char *pPresentedType;unsigned char *pTransmitType;handle_t SavedHandle; struct _MIDL_STUB_DESC *StubDesc;struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;unsigned int FullPtrRefId;unsigned int PointerLength;int fInDontFree : 1;int fDontCallFreeInst : 1;int fInOnlyParam : 1;int fHasReturn : 1;int fHasExtensions : 1;int fHasNewCorrDesc : 1;int fUnused : 10;int fUnused2 : 16;unsigned int dwDestContext;void *pvDestContext;NDR_SCONTEXT *SavedContextHandles;int ParamNumber;struct IRpcChannelBuffer *pRpcChannelBuffer;PARRAY_INFO pArrayInfo;unsigned int *SizePtrCountArray;unsigned int *SizePtrOffsetArray;unsigned int *SizePtrLengthArray;void *pArgQueue;unsigned int dwStubPhase;void *LowStackMark;PNDR_ASYNC_MESSAGE pAsyncMsg;PNDR_CORRELATION_INFO pCorrInfo;unsigned char *pCorrMemory;void *pMemoryList;CS_STUB_INFO *pCSInfo;unsigned char *ConformanceMark;unsigned char *VarianceMark;INT_PTR Unused;struct _NDR_PROC_CONTEXT *pContext;INT_PTR Reserved51_1;INT_PTR Reserved51_2;INT_PTR Reserved51_3;INT_PTR Reserved51_4;INT_PTR Reserved51_5;};
struct IContextMenu2Vtbl {HRESULT ( *QueryInterface)(IContextMenu2 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IContextMenu2 *This);ULONG ( *Release)(IContextMenu2 *This);HRESULT ( *QueryContextMenu)(IContextMenu2 *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu2 *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu2 *This, UINT_PTR idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);HRESULT ( *HandleMenuMsg)(IContextMenu2 *This, UINT uMsg, WPARAM wParam, LPARAM lParam);};
struct DD_CALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_DESTROYDRIVER DestroyDriver;PDD_CREATESURFACE CreateSurface;PDD_SETCOLORKEY SetColorKey;PDD_SETMODE SetMode;PDD_WAITFORVERTICALBLANK WaitForVerticalBlank;PDD_CANCREATESURFACE CanCreateSurface;PDD_CREATEPALETTE CreatePalette;PDD_GETSCANLINE GetScanLine;PDD_MAPMEMORY MapMemory;};
struct _NSP_ROUTINE {DWORD cbSize;DWORD dwMajorVersion;DWORD dwMinorVersion;LPNSPCLEANUP NSPCleanup;LPNSPLOOKUPSERVICEBEGIN NSPLookupServiceBegin;LPNSPLOOKUPSERVICENEXT NSPLookupServiceNext;LPNSPLOOKUPSERVICEEND NSPLookupServiceEnd;LPNSPSETSERVICE NSPSetService;LPNSPINSTALLSERVICECLASS NSPInstallServiceClass;LPNSPREMOVESERVICECLASS NSPRemoveServiceClass;LPNSPGETSERVICECLASSINFO NSPGetServiceClassInfo;LPNSPIOCTL NSPIoctl;};
struct _IFIMETRICS {ULONG cjThis;ULONG cjIfiExtra;PTRDIFF dpwszFamilyName;PTRDIFF dpwszStyleName;PTRDIFF dpwszFaceName;PTRDIFF dpwszUniqueName;PTRDIFF dpFontSim;LONG lEmbedId;LONG lItalicAngle;LONG lCharBias;PTRDIFF dpCharSets;BYTE jWinCharSet;BYTE jWinPitchAndFamily;USHORT usWinWeight;ULONG flInfo;USHORT fsSelection;USHORT fsType;FWORD fwdUnitsPerEm;FWORD fwdLowestPPEm;FWORD fwdWinAscender;FWORD fwdWinDescender;FWORD fwdMacAscender;FWORD fwdMacDescender;FWORD fwdMacLineGap;FWORD fwdTypoAscender;FWORD fwdTypoDescender;FWORD fwdTypoLineGap;FWORD fwdAveCharWidth;FWORD fwdMaxCharInc;FWORD fwdCapHeight;FWORD fwdXHeight;FWORD fwdSubscriptXSize;FWORD fwdSubscriptYSize;FWORD fwdSubscriptXOffset;FWORD fwdSubscriptYOffset;FWORD fwdSuperscriptXSize;FWORD fwdSuperscriptYSize;FWORD fwdSuperscriptXOffset;FWORD fwdSuperscriptYOffset;FWORD fwdUnderscoreSize;FWORD fwdUnderscorePosition;FWORD fwdStrikeoutSize;FWORD fwdStrikeoutPosition;BYTE chFirstChar;BYTE chLastChar;BYTE chDefaultChar;BYTE chBreakChar;WCHAR wcFirstChar;WCHAR wcLastChar;WCHAR wcDefaultChar;WCHAR wcBreakChar;POINTL ptlBaseline;POINTL ptlAspect;POINTL ptlCaret;RECTL rclFontBox;BYTE achVendId[4];ULONG cKerningPairs;ULONG ulPanoseCulture;PANOSE panose;};
struct tagKbdLayer {PMODIFIERS pCharModifiers;PVK_TO_WCHAR_TABLE pVkToWcharTable;PDEADKEY pDeadKey;PVSC_LPWSTR pKeyNames;PVSC_LPWSTR pKeyNamesExt;WCHAR **pKeyNamesDead;USHORT *pusVSCtoVK;BYTE bMaxVSCtoVK;PVSC_VK pVSCtoVK_E0;PVSC_VK pVSCtoVK_E1;DWORD fLocaleFlags;BYTE nLgMax;BYTE cbLgEntry;PLIGATURE1 pLigature;DWORD dwType;DWORD dwSubType;};
struct tagPSDA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
struct tagPDA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;WORD nFromPage;WORD nToPage;WORD nMinPage;WORD nMaxPage;WORD nCopies;HINSTANCE hInstance;LPARAM lCustData;LPPRINTHOOKPROC lpfnPrintHook;LPSETUPHOOKPROC lpfnSetupHook;LPCSTR lpPrintTemplateName;LPCSTR lpSetupTemplateName;HGLOBAL hPrintTemplate;HGLOBAL hSetupTemplate;};
struct _FC03820C0C9B455049C143518E71A23B {DWORD dwStructSize;HWND hwndOwner;SCARDCONTEXT hSCardContext;LPSTR lpstrGroupNames;DWORD nMaxGroupNames;LPSTR lpstrCardNames;DWORD nMaxCardNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPSTR lpstrRdr;DWORD nMaxRdr;LPSTR lpstrCard;DWORD nMaxCard;LPCSTR lpstrTitle;DWORD dwFlags;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;DWORD dwActiveProtocol;LPOCNCONNPROCA lpfnConnect;LPOCNCHKPROC lpfnCheck;LPOCNDSCPROC lpfnDisconnect;SCARDHANDLE hCardHandle;};
struct IDirectSoundCaptureBuffer8Vtbl {HRESULT ( *QueryInterface)(IDirectSoundCaptureBuffer8 *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCaptureBuffer8 *This);ULONG ( *Release)(IDirectSoundCaptureBuffer8 *This);HRESULT ( *GetCaps)(IDirectSoundCaptureBuffer8 *This, LPDSCBCAPS pDSCBCaps);HRESULT ( *GetCurrentPosition)(IDirectSoundCaptureBuffer8 *This, LPDWORD pdwCapturePosition, LPDWORD pdwReadPosition);HRESULT ( *GetFormat)(IDirectSoundCaptureBuffer8 *This, LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten);HRESULT ( *GetStatus)(IDirectSoundCaptureBuffer8 *This, LPDWORD pdwStatus);HRESULT ( *Initialize)(IDirectSoundCaptureBuffer8 *This, LPDIRECTSOUNDCAPTURE pDirectSoundCapture, LPCDSCBUFFERDESC pcDSCBufferDesc);HRESULT ( *Lock)(IDirectSoundCaptureBuffer8 *This, DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1, LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags);HRESULT ( *Start)(IDirectSoundCaptureBuffer8 *This, DWORD dwFlags);HRESULT ( *Stop)(IDirectSoundCaptureBuffer8 *This);HRESULT ( *Unlock)(IDirectSoundCaptureBuffer8 *This, LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2);HRESULT ( *GetObjectInPath)(IDirectSoundCaptureBuffer8 *This,  GUID * rguidObject, DWORD dwIndex,  GUID * rguidInterface, LPVOID *ppObject);HRESULT ( *GetFXStatus)(DWORD dwFXCount, LPDWORD pdwFXStatus);};
struct _DDHAL_DDMOTIONCOMPCALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;LPDDHALMOCOMPCB_GETFORMATS GetMoCompFormats;LPDDHALMOCOMPCB_CREATE CreateMoComp;LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;LPDDHALMOCOMPCB_BEGINFRAME BeginMoCompFrame;LPDDHALMOCOMPCB_ENDFRAME EndMoCompFrame;LPDDHALMOCOMPCB_RENDER RenderMoComp;LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;LPDDHALMOCOMPCB_DESTROY DestroyMoComp;};
struct IDirectSoundFullDuplexVtbl {HRESULT ( *QueryInterface)(IDirectSoundFullDuplex *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundFullDuplex *This);ULONG ( *Release)(IDirectSoundFullDuplex *This);HRESULT ( *Initialize)(IDirectSoundFullDuplex *This, LPCGUID pCaptureGuid, LPCGUID pRenderGuid, LPCDSCBUFFERDESC lpDscBufferDesc, LPCDSBUFFERDESC lpDsBufferDesc, HWND hWnd, DWORD dwLevel, LPLPDIRECTSOUNDCAPTUREBUFFER8 lplpDirectSoundCaptureBuffer8, LPLPDIRECTSOUNDBUFFER8 lplpDirectSoundBuffer8);};
struct IDirect3DCubeTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DCubeTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DCubeTexture8 *This);ULONG ( *Release)(IDirect3DCubeTexture8 *This);HRESULT ( *GetDevice)(IDirect3DCubeTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DCubeTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DCubeTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DCubeTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DCubeTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DCubeTexture8 *This);void ( *PreLoad)(IDirect3DCubeTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DCubeTexture8 *This);DWORD ( *SetLOD)(IDirect3DCubeTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DCubeTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DCubeTexture8 *This);HRESULT ( *GetLevelDesc)(IDirect3DCubeTexture8 *This, UINT Level, D3DSURFACE_DESC *pDesc);HRESULT ( *GetCubeMapSurface)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType, UINT Level, IDirect3DSurface8 **ppCubeMapSurface);HRESULT ( *LockRect)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType, UINT Level, D3DLOCKED_RECT *pLockedRect,  RECT *pRect, DWORD Flags);HRESULT ( *UnlockRect)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType, UINT Level);HRESULT ( *AddDirtyRect)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType,  RECT *pDirtyRect);};
struct _DDRAWI_DDVIDEOPORT_LCL {LPDDRAWI_DIRECTDRAW_LCL lpDD;DDVIDEOPORTDESC ddvpDesc;DDVIDEOPORTINFO ddvpInfo;LPDDRAWI_DDRAWSURFACE_INT lpSurface;LPDDRAWI_DDRAWSURFACE_INT lpVBISurface;LPDDRAWI_DDRAWSURFACE_INT *lpFlipInts;DWORD dwNumAutoflip;DWORD dwProcessID;DWORD dwStateFlags;DWORD dwFlags;DWORD dwRefCnt;FLATPTR fpLastFlip;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;HANDLE hDDVideoPort;DWORD dwNumVBIAutoflip;LPDDVIDEOPORTDESC lpVBIDesc;LPDDVIDEOPORTDESC lpVideoDesc;LPDDVIDEOPORTINFO lpVBIInfo;LPDDVIDEOPORTINFO lpVideoInfo;DWORD dwVBIProcessID;LPDDRAWI_DDVIDEOPORT_INT lpVPNotify;};
struct DD_MOTIONCOMPCALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_MOCOMPCB_GETGUIDS GetMoCompGuids;PDD_MOCOMPCB_GETFORMATS GetMoCompFormats;PDD_MOCOMPCB_CREATE CreateMoComp;PDD_MOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;PDD_MOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;PDD_MOCOMPCB_BEGINFRAME BeginMoCompFrame;PDD_MOCOMPCB_ENDFRAME EndMoCompFrame;PDD_MOCOMPCB_RENDER RenderMoComp;PDD_MOCOMPCB_QUERYSTATUS QueryMoCompStatus;PDD_MOCOMPCB_DESTROY DestroyMoComp;};
struct IDirectDrawClipperVtbl {HRESULT ( *QueryInterface)(IDirectDrawClipper *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawClipper *This);ULONG ( *Release)(IDirectDrawClipper *This);HRESULT ( *GetClipList)(IDirectDrawClipper *This, LPRECT, LPRGNDATA, LPDWORD);HRESULT ( *GetHWnd)(IDirectDrawClipper *This, HWND *);HRESULT ( *Initialize)(IDirectDrawClipper *This, LPDIRECTDRAW, DWORD);HRESULT ( *IsClipListChanged)(IDirectDrawClipper *This, BOOL *);HRESULT ( *SetClipList)(IDirectDrawClipper *This, LPRGNDATA, DWORD);HRESULT ( *SetHWnd)(IDirectDrawClipper *This, DWORD, HWND);};
struct _CRYPT_PROVIDER_DATA {DWORD cbStruct;WINTRUST_DATA *pWintrustData;BOOL fOpenedFile;HWND hWndParent;GUID *pgActionID;HCRYPTPROV hProv;DWORD dwError;DWORD dwRegSecuritySettings;DWORD dwRegPolicySettings;struct _CRYPT_PROVIDER_FUNCTIONS *psPfns;DWORD cdwTrustStepErrors;DWORD *padwTrustStepErrors;DWORD chStores;HCERTSTORE *pahStores;DWORD dwEncoding;HCRYPTMSG hMsg;DWORD csSigners;struct _CRYPT_PROVIDER_SGNR *pasSigners;DWORD csProvPrivData;struct _CRYPT_PROVIDER_PRIVDATA *pasProvPrivData;DWORD dwSubjectChoice;_CRYPT_PROVIDER_DATA___FE2B7DE956400363F942998E125D9843 __anonymous0;char *pszUsageOID;BOOL fRecallWithState;FILETIME sftSystemTime;char *pszCTLSignerUsageOID;DWORD dwProvFlags;DWORD dwFinalError;PCERT_USAGE_MATCH pRequestUsage;DWORD dwTrustPubSettings;};
struct _D3DNTHAL_CALLBACKS {DWORD dwSize;LPD3DNTHAL_CONTEXTCREATECB ContextCreate;LPD3DNTHAL_CONTEXTDESTROYCB ContextDestroy;LPD3DNTHAL_CONTEXTDESTROYALLCB ContextDestroyAll;LPD3DNTHAL_SCENECAPTURECB SceneCapture;LPVOID dwReserved10;LPVOID dwReserved11;LPVOID dwReserved22;LPVOID dwReserved23;ULONG_PTR dwReserved;LPD3DNTHAL_TEXTURECREATECB TextureCreate;LPD3DNTHAL_TEXTUREDESTROYCB TextureDestroy;LPD3DNTHAL_TEXTURESWAPCB TextureSwap;LPD3DNTHAL_TEXTUREGETSURFCB TextureGetSurf;LPVOID dwReserved12;LPVOID dwReserved13;LPVOID dwReserved14;LPVOID dwReserved15;LPVOID dwReserved16;LPVOID dwReserved17;LPVOID dwReserved18;LPVOID dwReserved19;LPVOID dwReserved20;LPVOID dwReserved21;LPVOID dwReserved24;ULONG_PTR dwReserved0;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;ULONG_PTR dwReserved3;ULONG_PTR dwReserved4;ULONG_PTR dwReserved5;ULONG_PTR dwReserved6;ULONG_PTR dwReserved7;ULONG_PTR dwReserved8;ULONG_PTR dwReserved9;};
struct _DDHAL_DDCALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHAL_DESTROYDRIVER DestroyDriver;LPDDHAL_CREATESURFACE CreateSurface;LPDDHAL_SETCOLORKEY SetColorKey;LPDDHAL_SETMODE SetMode;LPDDHAL_WAITFORVERTICALBLANK WaitForVerticalBlank;LPDDHAL_CANCREATESURFACE CanCreateSurface;LPDDHAL_CREATEPALETTE CreatePalette;LPDDHAL_GETSCANLINE GetScanLine;LPDDHAL_SETEXCLUSIVEMODE SetExclusiveMode;LPDDHAL_FLIPTOGDISURFACE FlipToGDISurface;};
struct IContextMenu3Vtbl {HRESULT ( *QueryInterface)(IContextMenu3 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IContextMenu3 *This);ULONG ( *Release)(IContextMenu3 *This);HRESULT ( *QueryContextMenu)(IContextMenu3 *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu3 *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu3 *This, UINT_PTR idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);HRESULT ( *HandleMenuMsg)(IContextMenu3 *This, UINT uMsg, WPARAM wParam, LPARAM lParam);HRESULT ( *HandleMenuMsg2)(IContextMenu3 *This, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);};
struct IShellLinkAVtbl {HRESULT ( *QueryInterface)(IShellLinkA *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellLinkA *This);ULONG ( *Release)(IShellLinkA *This);HRESULT ( *GetPath)(IShellLinkA *This, LPSTR pszFile, int cch, WIN32_FIND_DATAA *pfd, DWORD fFlags);HRESULT ( *GetIDList)(IShellLinkA *This, LPITEMIDLIST *ppidl);HRESULT ( *SetIDList)(IShellLinkA *This, LPCITEMIDLIST pidl);HRESULT ( *GetDescription)(IShellLinkA *This, LPSTR pszName, int cch);HRESULT ( *SetDescription)(IShellLinkA *This, LPCSTR pszName);HRESULT ( *GetWorkingDirectory)(IShellLinkA *This, LPSTR pszDir, int cch);HRESULT ( *SetWorkingDirectory)(IShellLinkA *This, LPCSTR pszDir);HRESULT ( *GetArguments)(IShellLinkA *This, LPSTR pszArgs, int cch);HRESULT ( *SetArguments)(IShellLinkA *This, LPCSTR pszArgs);HRESULT ( *GetHotkey)(IShellLinkA *This, WORD *pwHotkey);HRESULT ( *SetHotkey)(IShellLinkA *This, WORD wHotkey);HRESULT ( *GetShowCmd)(IShellLinkA *This, int *piShowCmd);HRESULT ( *SetShowCmd)(IShellLinkA *This, int iShowCmd);HRESULT ( *GetIconLocation)(IShellLinkA *This, LPSTR pszIconPath, int cch, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkA *This, LPCSTR pszIconPath, int iIcon);HRESULT ( *SetRelativePath)(IShellLinkA *This, LPCSTR pszPathRel, DWORD dwReserved);HRESULT ( *Resolve)(IShellLinkA *This, HWND hwnd, DWORD fFlags);HRESULT ( *SetPath)(IShellLinkA *This, LPCSTR pszFile);};
struct IViewObjectVtbl {HRESULT ( *QueryInterface)(IViewObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObject *This);ULONG ( *Release)(IViewObject *This);HRESULT ( *Draw)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(ULONG_PTR dwContinue), ULONG_PTR dwContinue);HRESULT ( *GetColorSet)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObject *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObject *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);};
struct IShellMenuVtbl {HRESULT ( *QueryInterface)(IShellMenu *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellMenu *This);ULONG ( *Release)(IShellMenu *This);HRESULT ( *Initialize)(IShellMenu *This, IShellMenuCallback *psmc, UINT uId, UINT uIdAncestor, DWORD dwFlags);HRESULT ( *GetMenuInfo)(IShellMenu *This, IShellMenuCallback **ppsmc, UINT *puId, UINT *puIdAncestor, DWORD *pdwFlags);HRESULT ( *SetShellFolder)(IShellMenu *This, IShellFolder *psf, LPCITEMIDLIST pidlFolder, HKEY hKey, DWORD dwFlags);HRESULT ( *GetShellFolder)(IShellMenu *This, DWORD *pdwFlags, LPITEMIDLIST *ppidl,  IID * riid, void **ppv);HRESULT ( *SetMenu)(IShellMenu *This, HMENU hmenu, HWND hwnd, DWORD dwFlags);HRESULT ( *GetMenu)(IShellMenu *This, HMENU *phmenu, HWND *phwnd, DWORD *pdwFlags);HRESULT ( *InvalidateItem)(IShellMenu *This, LPSMDATA psmd, DWORD dwFlags);HRESULT ( *GetState)(IShellMenu *This, LPSMDATA psmd);HRESULT ( *SetMenuToolbar)(IShellMenu *This, IUnknown *punk, DWORD dwFlags);};
struct IDDVideoPortContainerVtbl {HRESULT ( *QueryInterface)(IDDVideoPortContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDDVideoPortContainer *This);ULONG ( *Release)(IDDVideoPortContainer *This);HRESULT ( *CreateVideoPort)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTDESC, LPDIRECTDRAWVIDEOPORT *, IUnknown *);HRESULT ( *EnumVideoPorts)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTCAPS, LPVOID, LPDDENUMVIDEOCALLBACK);HRESULT ( *GetVideoPortConnectInfo)(IDDVideoPortContainer *This, DWORD, LPDWORD, LPDDVIDEOPORTCONNECT);HRESULT ( *QueryVideoPortStatus)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTSTATUS);};
struct IDirectDrawVideoPortVtbl {HRESULT ( *QueryInterface)(IDirectDrawVideoPort *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawVideoPort *This);ULONG ( *Release)(IDirectDrawVideoPort *This);HRESULT ( *Flip)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *GetBandwidthInfo)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, DWORD, DWORD, DWORD, LPDDVIDEOPORTBANDWIDTH);HRESULT ( *GetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);HRESULT ( *GetInputFormats)(IDirectDrawVideoPort *This, LPDWORD, LPDDPIXELFORMAT, DWORD);HRESULT ( *GetOutputFormats)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, LPDWORD, LPDDPIXELFORMAT, DWORD);HRESULT ( *GetFieldPolarity)(IDirectDrawVideoPort *This, LPBOOL);HRESULT ( *GetVideoLine)(IDirectDrawVideoPort *This, LPDWORD);HRESULT ( *GetVideoSignalStatus)(IDirectDrawVideoPort *This, LPDWORD);HRESULT ( *SetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);HRESULT ( *SetTargetSurface)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *StartVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);HRESULT ( *StopVideo)(IDirectDrawVideoPort *This);HRESULT ( *UpdateVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);HRESULT ( *WaitForSync)(IDirectDrawVideoPort *This, DWORD, DWORD, DWORD);};
struct IDirectSound3DBufferVtbl {HRESULT ( *QueryInterface)(IDirectSound3DBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound3DBuffer *This);ULONG ( *Release)(IDirectSound3DBuffer *This);HRESULT ( *GetAllParameters)(IDirectSound3DBuffer *This, LPDS3DBUFFER pDs3dBuffer);HRESULT ( *GetConeAngles)(IDirectSound3DBuffer *This, LPDWORD pdwInsideConeAngle, LPDWORD pdwOutsideConeAngle);HRESULT ( *GetConeOrientation)(IDirectSound3DBuffer *This, D3DVECTOR *pvOrientation);HRESULT ( *GetConeOutsideVolume)(IDirectSound3DBuffer *This, LPLONG plConeOutsideVolume);HRESULT ( *GetMaxDistance)(IDirectSound3DBuffer *This, D3DVALUE *pflMaxDistance);HRESULT ( *GetMinDistance)(IDirectSound3DBuffer *This, D3DVALUE *pflMinDistance);HRESULT ( *GetMode)(IDirectSound3DBuffer *This, LPDWORD pdwMode);HRESULT ( *GetPosition)(IDirectSound3DBuffer *This, D3DVECTOR *pvPosition);HRESULT ( *GetVelocity)(IDirectSound3DBuffer *This, D3DVECTOR *pvVelocity);HRESULT ( *SetAllParameters)(IDirectSound3DBuffer *This, LPCDS3DBUFFER pcDs3dBuffer, DWORD dwApply);HRESULT ( *SetConeAngles)(IDirectSound3DBuffer *This, DWORD dwInsideConeAngle, DWORD dwOutsideConeAngle, DWORD dwApply);HRESULT ( *SetConeOrientation)(IDirectSound3DBuffer *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);HRESULT ( *SetConeOutsideVolume)(IDirectSound3DBuffer *This, LONG lConeOutsideVolume, DWORD dwApply);HRESULT ( *SetMaxDistance)(IDirectSound3DBuffer *This, D3DVALUE flMaxDistance, DWORD dwApply);HRESULT ( *SetMinDistance)(IDirectSound3DBuffer *This, D3DVALUE flMinDistance, DWORD dwApply);HRESULT ( *SetMode)(IDirectSound3DBuffer *This, DWORD dwMode, DWORD dwApply);HRESULT ( *SetPosition)(IDirectSound3DBuffer *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);HRESULT ( *SetVelocity)(IDirectSound3DBuffer *This, D3DVALUE x, D3DVALUE y, D3DVALUE z, DWORD dwApply);};
struct IDirectSound8Vtbl {HRESULT ( *QueryInterface)(IDirectSound8 *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound8 *This);ULONG ( *Release)(IDirectSound8 *This);HRESULT ( *CreateSoundBuffer)(IDirectSound8 *This, LPCDSBUFFERDESC pcDSBufferDesc, LPDIRECTSOUNDBUFFER *ppDSBuffer, LPUNKNOWN pUnkOuter);HRESULT ( *GetCaps)(IDirectSound8 *This, LPDSCAPS pDSCaps);HRESULT ( *DuplicateSoundBuffer)(IDirectSound8 *This, LPDIRECTSOUNDBUFFER pDSBufferOriginal, LPDIRECTSOUNDBUFFER *ppDSBufferDuplicate);HRESULT ( *SetCooperativeLevel)(IDirectSound8 *This, HWND hwnd, DWORD dwLevel);HRESULT ( *Compact)(IDirectSound8 *This);HRESULT ( *GetSpeakerConfig)(IDirectSound8 *This, LPDWORD pdwSpeakerConfig);HRESULT ( *SetSpeakerConfig)(IDirectSound8 *This, DWORD dwSpeakerConfig);HRESULT ( *Initialize)(IDirectSound8 *This, LPCGUID pcGuidDevice);HRESULT ( *VerifyCertification)(IDirectSound8 *This, LPDWORD pdwCertified);};
struct IPrintCoreUI2Vtbl {HRESULT ( *QueryInterface)(IPrintCoreUI2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPrintCoreUI2 *This);ULONG ( *Release)(IPrintCoreUI2 *This);HRESULT ( *DrvGetDriverSetting)(IPrintCoreUI2 *This, PVOID pci, PCSTR Feature, PVOID pOutput, DWORD cbSize, PDWORD pcbNeeded, PDWORD pdwOptionsReturned);HRESULT ( *DrvUpgradeRegistrySetting)(IPrintCoreUI2 *This, HANDLE hPrinter, PCSTR pFeature, PCSTR pOption);HRESULT ( *DrvUpdateUISetting)(IPrintCoreUI2 *This, PVOID pci, PVOID pOptItem, DWORD dwPreviousSelection, DWORD dwMode);HRESULT ( *GetOptions)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pmszFeaturesRequested, DWORD cbIn, PSTR pmszFeatureOptionBuf, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *SetOptions)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pmszFeatureOptionBuf, DWORD cbIn, PDWORD pdwResult);HRESULT ( *EnumConstrainedOptions)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pszFeatureKeyword, PSTR pmszConstrainedOptionList, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *WhyConstrained)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pszFeatureKeyword, PCSTR pszOptionKeyword, PSTR pmszReasonList, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *GetGlobalAttribute)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pszAttribute, PDWORD pdwDataType, PBYTE pbData, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *GetFeatureAttribute)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pszFeatureKeyword, PCSTR pszAttribute, PDWORD pdwDataType, PBYTE pbData, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *GetOptionAttribute)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pszFeatureKeyword, PCSTR pszOptionKeyword, PCSTR pszAttribute, PDWORD pdwDataType, PBYTE pbData, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *EnumFeatures)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PSTR pmszFeatureList, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *EnumOptions)(IPrintCoreUI2 *This, POEMUIOBJ poemuiobj, DWORD dwFlags, PCSTR pszFeatureKeyword, PSTR pmszOptionList, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *QuerySimulationSupport)(IPrintCoreUI2 *This, HANDLE hPrinter, DWORD dwLevel, PBYTE pCaps, DWORD cbSize, PDWORD pcbNeeded);};
struct _PROPSHEETHEADERA {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous0;LPCSTR pszCaption;UINT nPages;_PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 __anonymous4;_PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 __anonymous5;PFNPROPSHEETCALLBACK pfnCallback;_PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C __anonymous6;HPALETTE hplWatermark;_PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42 __anonymous7;};
struct IDirectSoundVtbl {HRESULT ( *QueryInterface)(IDirectSound *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound *This);ULONG ( *Release)(IDirectSound *This);HRESULT ( *CreateSoundBuffer)(IDirectSound *This, LPCDSBUFFERDESC pcDSBufferDesc, LPDIRECTSOUNDBUFFER *ppDSBuffer, LPUNKNOWN pUnkOuter);HRESULT ( *GetCaps)(IDirectSound *This, LPDSCAPS pDSCaps);HRESULT ( *DuplicateSoundBuffer)(IDirectSound *This, LPDIRECTSOUNDBUFFER pDSBufferOriginal, LPDIRECTSOUNDBUFFER *ppDSBufferDuplicate);HRESULT ( *SetCooperativeLevel)(IDirectSound *This, HWND hwnd, DWORD dwLevel);HRESULT ( *Compact)(IDirectSound *This);HRESULT ( *GetSpeakerConfig)(IDirectSound *This, LPDWORD pdwSpeakerConfig);HRESULT ( *SetSpeakerConfig)(IDirectSound *This, DWORD dwSpeakerConfig);HRESULT ( *Initialize)(IDirectSound *This, LPCGUID pcGuidDevice);};
struct IViewObject2Vtbl {HRESULT ( *QueryInterface)(IViewObject2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObject2 *This);ULONG ( *Release)(IViewObject2 *This);HRESULT ( *Draw)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(ULONG_PTR dwContinue), ULONG_PTR dwContinue);HRESULT ( *GetColorSet)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObject2 *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObject2 *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObject2 *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);HRESULT ( *GetExtent)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);};
struct _MIDL_STUB_DESC {void *RpcInterfaceInformation;void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 IMPLICIT_HANDLE_INFO; NDR_RUNDOWN *apfnNdrRundownRoutines; GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs; EXPR_EVAL *apfnExprEval; XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple; unsigned char *pFormatTypes;int fCheckBounds;unsigned int Version;MALLOC_FREE_STRUCT *pMallocFreeStruct;int MIDLVersion; COMM_FAULT_OFFSETS *CommFaultOffsets; USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple; NDR_NOTIFY_ROUTINE *NotifyRoutineTable;ULONG_PTR mFlags; NDR_CS_ROUTINES *CsRoutineTables;void *Reserved4;ULONG_PTR Reserved5;};
struct tagCHOOSEFONTA {DWORD lStructSize;HWND hwndOwner;HDC hDC;LPLOGFONTA lpLogFont;INT iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;LPCFHOOKPROC lpfnHook;LPCSTR lpTemplateName;HINSTANCE hInstance;LPSTR lpszStyle;WORD nFontType;WORD ___MISSING_ALIGNMENT__;INT nSizeMin;INT nSizeMax;};
struct _DDHALINFO {DWORD dwSize;LPDDHAL_DDCALLBACKS lpDDCallbacks;LPDDHAL_DDSURFACECALLBACKS lpDDSurfaceCallbacks;LPDDHAL_DDPALETTECALLBACKS lpDDPaletteCallbacks;VIDMEMINFO vmiData;DDCORECAPS ddCaps;DWORD dwMonitorFrequency;LPDDHAL_GETDRIVERINFO GetDriverInfo;DWORD dwModeIndex;LPDWORD lpdwFourCC;DWORD dwNumModes;LPDDHALMODEINFO lpModeInfo;DWORD dwFlags;LPVOID lpPDevice;DWORD hInstance;ULONG_PTR lpD3DGlobalDriverData;ULONG_PTR lpD3DHALCallbacks;LPDDHAL_DDEXEBUFCALLBACKS lpDDExeBufCallbacks;};
struct _DDRAWI_DDRAWSURFACE_MORE {DWORD dwSize;IUNKNOWN_LIST *lpIUnknowns;LPDDRAWI_DIRECTDRAW_LCL lpDD_lcl;DWORD dwPageLockCount;DWORD dwBytesAllocated;LPDDRAWI_DIRECTDRAW_INT lpDD_int;DWORD dwMipMapCount;LPDDRAWI_DDRAWCLIPPER_INT lpDDIClipper;LPHEAPALIASINFO lpHeapAliasInfo;DWORD dwOverlayFlags;void *rgjunc;LPDDRAWI_DDVIDEOPORT_LCL lpVideoPort;LPDDOVERLAYFX lpddOverlayFX;DDSCAPSEX ddsCapsEx;DWORD dwTextureStage;LPVOID lpDDRAWReserved;LPVOID lpDDRAWReserved2;LPVOID lpDDrawReserved3;DWORD dwDDrawReserved4;LPVOID lpDDrawReserved5;LPDWORD lpGammaRamp;LPDWORD lpOriginalGammaRamp;LPVOID lpDDrawReserved6;DWORD dwSurfaceHandle;DWORD qwDDrawReserved8[2];LPVOID lpDDrawReserved9;DWORD cSurfaces;LPDDSURFACEDESC2 pCreatedDDSurfaceDesc2;LPDDRAWI_DDRAWSURFACE_LCL *slist;DWORD dwFVF;LPVOID lpVB;};
struct _DDRAWI_DDRAWSURFACE_LCL {LPDDRAWI_DDRAWSURFACE_MORE lpSurfMore;LPDDRAWI_DDRAWSURFACE_GBL lpGbl;ULONG_PTR hDDSurface;LPATTACHLIST lpAttachList;LPATTACHLIST lpAttachListFrom;DWORD dwLocalRefCnt;DWORD dwProcessId;DWORD dwFlags;DDSCAPS ddsCaps;_DDRAWI_DDRAWSURFACE_LCL___91466F88B03FE00779D4AC4358EC9B5C __anonymous0;_DDRAWI_DDRAWSURFACE_LCL___6B043036C782DCB581418A8818C1EC9C __anonymous1;DWORD dwModeCreatedIn;DWORD dwBackBufferCount;DDCOLORKEY ddckCKDestBlt;DDCOLORKEY ddckCKSrcBlt;ULONG_PTR hDC;ULONG_PTR dwReserved1;DDCOLORKEY ddckCKSrcOverlay;DDCOLORKEY ddckCKDestOverlay;LPDDRAWI_DDRAWSURFACE_INT lpSurfaceOverlaying;DBLNODE dbnOverlayNode;RECT rcOverlaySrc;RECT rcOverlayDest;DWORD dwClrXparent;DWORD dwAlpha;LONG lOverlayX;LONG lOverlayY;};
struct IDirectSoundBufferVtbl {HRESULT ( *QueryInterface)(IDirectSoundBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundBuffer *This);ULONG ( *Release)(IDirectSoundBuffer *This);HRESULT ( *GetCaps)(IDirectSoundBuffer *This, LPDSBCAPS pDSBufferCaps);HRESULT ( *GetCurrentPosition)(IDirectSoundBuffer *This, LPDWORD pdwCurrentPlayCursor, LPDWORD pdwCurrentWriteCursor);HRESULT ( *GetFormat)(IDirectSoundBuffer *This, LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten);HRESULT ( *GetVolume)(IDirectSoundBuffer *This, LPLONG plVolume);HRESULT ( *GetPan)(IDirectSoundBuffer *This, LPLONG plPan);HRESULT ( *GetFrequency)(IDirectSoundBuffer *This, LPDWORD pdwFrequency);HRESULT ( *GetStatus)(IDirectSoundBuffer *This, LPDWORD pdwStatus);HRESULT ( *Initialize)(IDirectSoundBuffer *This, LPDIRECTSOUND pDirectSound, LPCDSBUFFERDESC pcDSBufferDesc);HRESULT ( *Lock)(IDirectSoundBuffer *This, DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1, LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags);HRESULT ( *Play)(IDirectSoundBuffer *This, DWORD dwReserved1, DWORD dwPriority, DWORD dwFlags);HRESULT ( *SetCurrentPosition)(IDirectSoundBuffer *This, DWORD dwNewPosition);HRESULT ( *SetFormat)(IDirectSoundBuffer *This, LPCWAVEFORMATEX pcfxFormat);HRESULT ( *SetVolume)(IDirectSoundBuffer *This, LONG lVolume);HRESULT ( *SetPan)(IDirectSoundBuffer *This, LONG lPan);HRESULT ( *SetFrequency)(IDirectSoundBuffer *This, DWORD dwFrequency);HRESULT ( *Stop)(IDirectSoundBuffer *This);HRESULT ( *Unlock)(IDirectSoundBuffer *This, LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2);HRESULT ( *Restore)(IDirectSoundBuffer *This);};
struct _D3DHAL_CALLBACKS {DWORD dwSize;LPD3DHAL_CONTEXTCREATECB ContextCreate;LPD3DHAL_CONTEXTDESTROYCB ContextDestroy;LPD3DHAL_CONTEXTDESTROYALLCB ContextDestroyAll;LPD3DHAL_SCENECAPTURECB SceneCapture;LPVOID lpReserved10;LPVOID lpReserved11;LPD3DHAL_RENDERSTATECB RenderState;LPD3DHAL_RENDERPRIMITIVECB RenderPrimitive;DWORD dwReserved;LPD3DHAL_TEXTURECREATECB TextureCreate;LPD3DHAL_TEXTUREDESTROYCB TextureDestroy;LPD3DHAL_TEXTURESWAPCB TextureSwap;LPD3DHAL_TEXTUREGETSURFCB TextureGetSurf;LPVOID lpReserved12;LPVOID lpReserved13;LPVOID lpReserved14;LPVOID lpReserved15;LPVOID lpReserved16;LPVOID lpReserved17;LPVOID lpReserved18;LPVOID lpReserved19;LPVOID lpReserved20;LPVOID lpReserved21;LPD3DHAL_GETSTATECB GetState;DWORD dwReserved0;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwReserved4;DWORD dwReserved5;DWORD dwReserved6;DWORD dwReserved7;DWORD dwReserved8;DWORD dwReserved9;};
struct _DDHAL_DDSURFACECALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHALSURFCB_DESTROYSURFACE DestroySurface;LPDDHALSURFCB_FLIP Flip;LPDDHALSURFCB_SETCLIPLIST SetClipList;LPDDHALSURFCB_LOCK Lock;LPDDHALSURFCB_UNLOCK Unlock;LPDDHALSURFCB_BLT Blt;LPDDHALSURFCB_SETCOLORKEY SetColorKey;LPDDHALSURFCB_ADDATTACHEDSURFACE AddAttachedSurface;LPDDHALSURFCB_GETBLTSTATUS GetBltStatus;LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition;LPVOID reserved4;LPDDHALSURFCB_SETPALETTE SetPalette;};
struct IDirectSoundBuffer8Vtbl {HRESULT ( *QueryInterface)(IDirectSoundBuffer8 *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundBuffer8 *This);ULONG ( *Release)(IDirectSoundBuffer8 *This);HRESULT ( *GetCaps)(IDirectSoundBuffer8 *This, LPDSBCAPS pDSBufferCaps);HRESULT ( *GetCurrentPosition)(IDirectSoundBuffer8 *This, LPDWORD pdwCurrentPlayCursor, LPDWORD pdwCurrentWriteCursor);HRESULT ( *GetFormat)(IDirectSoundBuffer8 *This, LPWAVEFORMATEX pwfxFormat, DWORD dwSizeAllocated, LPDWORD pdwSizeWritten);HRESULT ( *GetVolume)(IDirectSoundBuffer8 *This, LPLONG plVolume);HRESULT ( *GetPan)(IDirectSoundBuffer8 *This, LPLONG plPan);HRESULT ( *GetFrequency)(IDirectSoundBuffer8 *This, LPDWORD pdwFrequency);HRESULT ( *GetStatus)(IDirectSoundBuffer8 *This, LPDWORD pdwStatus);HRESULT ( *Initialize)(IDirectSoundBuffer8 *This, LPDIRECTSOUND pDirectSound, LPCDSBUFFERDESC pcDSBufferDesc);HRESULT ( *Lock)(IDirectSoundBuffer8 *This, DWORD dwOffset, DWORD dwBytes, LPVOID *ppvAudioPtr1, LPDWORD pdwAudioBytes1, LPVOID *ppvAudioPtr2, LPDWORD pdwAudioBytes2, DWORD dwFlags);HRESULT ( *Play)(IDirectSoundBuffer8 *This, DWORD dwReserved1, DWORD dwPriority, DWORD dwFlags);HRESULT ( *SetCurrentPosition)(IDirectSoundBuffer8 *This, DWORD dwNewPosition);HRESULT ( *SetFormat)(IDirectSoundBuffer8 *This, LPCWAVEFORMATEX pcfxFormat);HRESULT ( *SetVolume)(IDirectSoundBuffer8 *This, LONG lVolume);HRESULT ( *SetPan)(IDirectSoundBuffer8 *This, LONG lPan);HRESULT ( *SetFrequency)(IDirectSoundBuffer8 *This, DWORD dwFrequency);HRESULT ( *Stop)(IDirectSoundBuffer8 *This);HRESULT ( *Unlock)(IDirectSoundBuffer8 *This, LPVOID pvAudioPtr1, DWORD dwAudioBytes1, LPVOID pvAudioPtr2, DWORD dwAudioBytes2);HRESULT ( *Restore)(IDirectSoundBuffer8 *This);HRESULT ( *SetFX)(IDirectSoundBuffer8 *This, DWORD dwEffectsCount, LPDSEFFECTDESC pDSFXDesc, LPDWORD pdwResultCodes);HRESULT ( *AcquireResources)(IDirectSoundBuffer8 *This, DWORD dwFlags, DWORD dwEffectsCount, LPDWORD pdwResultCodes);HRESULT ( *GetObjectInPath)(IDirectSoundBuffer8 *This,  GUID * rguidObject, DWORD dwIndex,  GUID * rguidInterface, LPVOID *ppObject);};
struct DD_SURFACECALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_SURFCB_DESTROYSURFACE DestroySurface;PDD_SURFCB_FLIP Flip;PDD_SURFCB_SETCLIPLIST SetClipList;PDD_SURFCB_LOCK Lock;PDD_SURFCB_UNLOCK Unlock;PDD_SURFCB_BLT Blt;PDD_SURFCB_SETCOLORKEY SetColorKey;PDD_SURFCB_ADDATTACHEDSURFACE AddAttachedSurface;PDD_SURFCB_GETBLTSTATUS GetBltStatus;PDD_SURFCB_GETFLIPSTATUS GetFlipStatus;PDD_SURFCB_UPDATEOVERLAY UpdateOverlay;PDD_SURFCB_SETOVERLAYPOSITION SetOverlayPosition;LPVOID reserved4;PDD_SURFCB_SETPALETTE SetPalette;};
struct _DXAPI_INTERFACE {USHORT Size;USHORT Version;PVOID Context;PVOID InterfaceReference;PVOID InterfaceDereference;PDX_GETIRQINFO DxGetIrqInfo;PDX_ENABLEIRQ DxEnableIrq;PDX_SKIPNEXTFIELD DxSkipNextField;PDX_BOBNEXTFIELD DxBobNextField;PDX_SETSTATE DxSetState;PDX_LOCK DxLock;PDX_FLIPOVERLAY DxFlipOverlay;PDX_FLIPVIDEOPORT DxFlipVideoPort;PDX_GETPOLARITY DxGetPolarity;PDX_GETCURRENTAUTOFLIP DxGetCurrentAutoflip;PDX_GETPREVIOUSAUTOFLIP DxGetPreviousAutoflip;PDX_TRANSFER DxTransfer;PDX_GETTRANSFERSTATUS DxGetTransferStatus;};
struct IPictureVtbl {HRESULT ( *QueryInterface)(IPicture *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPicture *This);ULONG ( *Release)(IPicture *This);HRESULT ( *get_Handle)(IPicture *This, OLE_HANDLE *pHandle);HRESULT ( *get_hPal)(IPicture *This, OLE_HANDLE *phPal);HRESULT ( *get_Type)(IPicture *This, SHORT *pType);HRESULT ( *get_Width)(IPicture *This, OLE_XSIZE_HIMETRIC *pWidth);HRESULT ( *get_Height)(IPicture *This, OLE_YSIZE_HIMETRIC *pHeight);HRESULT ( *Render)(IPicture *This, HDC hDC, LONG x, LONG y, LONG cx, LONG cy, OLE_XPOS_HIMETRIC xSrc, OLE_YPOS_HIMETRIC ySrc, OLE_XSIZE_HIMETRIC cxSrc, OLE_YSIZE_HIMETRIC cySrc, LPCRECT pRcWBounds);HRESULT ( *set_hPal)(IPicture *This, OLE_HANDLE hPal);HRESULT ( *get_CurDC)(IPicture *This, HDC *phDC);HRESULT ( *SelectPicture)(IPicture *This, HDC hDCIn, HDC *phDCOut, OLE_HANDLE *phBmpOut);HRESULT ( *get_KeepOriginalFormat)(IPicture *This, BOOL *pKeep);HRESULT ( *put_KeepOriginalFormat)(IPicture *This, BOOL keep);HRESULT ( *PictureChanged)(IPicture *This);HRESULT ( *SaveAsFile)(IPicture *This, LPSTREAM pStream, BOOL fSaveMemCopy, LONG *pCbSize);HRESULT ( *get_Attributes)(IPicture *This, DWORD *pDwAttr);};
struct IDirectMusicPortVtbl {HRESULT ( *QueryInterface)(IDirectMusicPort *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicPort *This);ULONG ( *Release)(IDirectMusicPort *This);HRESULT ( *PlayBuffer)(IDirectMusicPort *This, LPDIRECTMUSICBUFFER pBuffer);HRESULT ( *SetReadNotificationHandle)(IDirectMusicPort *This, HANDLE hEvent);HRESULT ( *Read)(IDirectMusicPort *This, LPDIRECTMUSICBUFFER pBuffer);HRESULT ( *DownloadInstrument)(IDirectMusicPort *This, IDirectMusicInstrument *pInstrument, IDirectMusicDownloadedInstrument **ppDownloadedInstrument, DMUS_NOTERANGE *pNoteRanges, DWORD dwNumNoteRanges);HRESULT ( *UnloadInstrument)(IDirectMusicPort *This, IDirectMusicDownloadedInstrument *pDownloadedInstrument);HRESULT ( *GetLatencyClock)(IDirectMusicPort *This, IReferenceClock **ppClock);HRESULT ( *GetRunningStats)(IDirectMusicPort *This, LPDMUS_SYNTHSTATS pStats);HRESULT ( *Compact)(IDirectMusicPort *This);HRESULT ( *GetCaps)(IDirectMusicPort *This, LPDMUS_PORTCAPS pPortCaps);HRESULT ( *DeviceIoControl)(IDirectMusicPort *This, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);HRESULT ( *SetNumChannelGroups)(IDirectMusicPort *This, DWORD dwChannelGroups);HRESULT ( *GetNumChannelGroups)(IDirectMusicPort *This, LPDWORD pdwChannelGroups);HRESULT ( *Activate)(IDirectMusicPort *This, BOOL fActive);HRESULT ( *SetChannelPriority)(IDirectMusicPort *This, DWORD dwChannelGroup, DWORD dwChannel, DWORD dwPriority);HRESULT ( *GetChannelPriority)(IDirectMusicPort *This, DWORD dwChannelGroup, DWORD dwChannel, LPDWORD pdwPriority);HRESULT ( *SetDirectSound)(IDirectMusicPort *This, LPDIRECTSOUND pDirectSound, LPDIRECTSOUNDBUFFER pDirectSoundBuffer);HRESULT ( *GetFormat)(IDirectMusicPort *This, LPWAVEFORMATEX pWaveFormatEx, LPDWORD pdwWaveFormatExSize, LPDWORD pdwBufferSize);};
struct IViewObjectExVtbl {HRESULT ( *QueryInterface)(IViewObjectEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObjectEx *This);ULONG ( *Release)(IViewObjectEx *This);HRESULT ( *Draw)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(ULONG_PTR dwContinue), ULONG_PTR dwContinue);HRESULT ( *GetColorSet)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObjectEx *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObjectEx *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObjectEx *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);HRESULT ( *GetExtent)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);HRESULT ( *GetRect)(IViewObjectEx *This, DWORD dwAspect, LPRECTL pRect);HRESULT ( *GetViewStatus)(IViewObjectEx *This, DWORD *pdwStatus);HRESULT ( *QueryHitPoint)(IViewObjectEx *This, DWORD dwAspect, LPCRECT pRectBounds, POINT ptlLoc, LONG lCloseHint, DWORD *pHitResult);HRESULT ( *QueryHitRect)(IViewObjectEx *This, DWORD dwAspect, LPCRECT pRectBounds, LPCRECT pRectLoc, LONG lCloseHint, DWORD *pHitResult);HRESULT ( *GetNaturalExtent)(IViewObjectEx *This, DWORD dwAspect, LONG lindex, DVTARGETDEVICE *ptd, HDC hicTargetDev, DVEXTENTINFO *pExtentInfo, LPSIZEL pSizel);};
struct IDirect3D8Vtbl {HRESULT ( *QueryInterface)(IDirect3D8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3D8 *This);ULONG ( *Release)(IDirect3D8 *This);HRESULT ( *RegisterSoftwareDevice)(IDirect3D8 *This, void *pInitializeFunction);UINT ( *GetAdapterCount)(IDirect3D8 *This);HRESULT ( *GetAdapterIdentifier)(IDirect3D8 *This, UINT Adapter, DWORD Flags, D3DADAPTER_IDENTIFIER8 *pIdentifier);UINT ( *GetAdapterModeCount)(IDirect3D8 *This, UINT Adapter);HRESULT ( *EnumAdapterModes)(IDirect3D8 *This, UINT Adapter, UINT Mode, D3DDISPLAYMODE *pMode);HRESULT ( *GetAdapterDisplayMode)(IDirect3D8 *This, UINT Adapter, D3DDISPLAYMODE *pMode);HRESULT ( *CheckDeviceType)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE CheckType, D3DFORMAT DisplayFormat, D3DFORMAT BackBufferFormat, BOOL Windowed);HRESULT ( *CheckDeviceFormat)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, DWORD Usage, D3DRESOURCETYPE RType, D3DFORMAT CheckFormat);HRESULT ( *CheckDeviceMultiSampleType)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SurfaceFormat, BOOL Windowed, D3DMULTISAMPLE_TYPE MultiSampleType);HRESULT ( *CheckDepthStencilMatch)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, D3DFORMAT RenderTargetFormat, D3DFORMAT DepthStencilFormat);HRESULT ( *GetDeviceCaps)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DCAPS8 *pCaps);HMONITOR ( *GetAdapterMonitor)(IDirect3D8 *This, UINT Adapter);HRESULT ( *CreateDevice)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, HWND hFocusWindow, DWORD BehaviorFlags, D3DPRESENT_PARAMETERS *pPresentationParameters, IDirect3DDevice8 **ppReturnedDeviceInterface);};
struct IOleInPlaceSiteWindowlessVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSiteWindowless *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSiteWindowless *This);ULONG ( *Release)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetWindow)(IOleInPlaceSiteWindowless *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSiteWindowless *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnUIActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetWindowContext)(IOleInPlaceSiteWindowless *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSiteWindowless *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSiteWindowless *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSiteWindowless *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSiteWindowless *This, LPCRECT lprcPosRect);HRESULT ( *OnInPlaceActivateEx)(IOleInPlaceSiteWindowless *This, BOOL *pfNoRedraw, DWORD dwFlags);HRESULT ( *OnInPlaceDeactivateEx)(IOleInPlaceSiteWindowless *This, BOOL fNoRedraw);HRESULT ( *RequestUIActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *CanWindowlessActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetCapture)(IOleInPlaceSiteWindowless *This);HRESULT ( *SetCapture)(IOleInPlaceSiteWindowless *This, BOOL fCapture);HRESULT ( *GetFocus)(IOleInPlaceSiteWindowless *This);HRESULT ( *SetFocus)(IOleInPlaceSiteWindowless *This, BOOL fFocus);HRESULT ( *GetDC)(IOleInPlaceSiteWindowless *This, LPCRECT pRect, DWORD grfFlags, HDC *phDC);HRESULT ( *ReleaseDC)(IOleInPlaceSiteWindowless *This, HDC hDC);HRESULT ( *InvalidateRect)(IOleInPlaceSiteWindowless *This, LPCRECT pRect, BOOL fErase);HRESULT ( *InvalidateRgn)(IOleInPlaceSiteWindowless *This, HRGN hRGN, BOOL fErase);HRESULT ( *ScrollRect)(IOleInPlaceSiteWindowless *This, INT dx, INT dy, LPCRECT pRectScroll, LPCRECT pRectClip);HRESULT ( *AdjustRect)(IOleInPlaceSiteWindowless *This, LPRECT prc);HRESULT ( *OnDefWindowMessage)(IOleInPlaceSiteWindowless *This, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);};
struct _DDHAL_DDVIDEOPORTCALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort;LPDDHALVPORTCB_FLIP FlipVideoPort;LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;LPVOID lpReserved1;LPDDHALVPORTCB_GETFIELD GetVideoPortField;LPDDHALVPORTCB_GETLINE GetVideoPortLine;LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;LPDDHALVPORTCB_UPDATE UpdateVideoPort;LPDDHALVPORTCB_WAITFORSYNC WaitForVideoPortSync;LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;LPDDHALVPORTCB_COLORCONTROL ColorControl;};
struct DD_VIDEOPORTCALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_VPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;PDD_VPORTCB_CREATEVIDEOPORT CreateVideoPort;PDD_VPORTCB_FLIP FlipVideoPort;PDD_VPORTCB_GETBANDWIDTH GetVideoPortBandwidth;PDD_VPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;PDD_VPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;LPVOID lpReserved1;PDD_VPORTCB_GETFIELD GetVideoPortField;PDD_VPORTCB_GETLINE GetVideoPortLine;PDD_VPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;PDD_VPORTCB_DESTROYVPORT DestroyVideoPort;PDD_VPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;PDD_VPORTCB_UPDATE UpdateVideoPort;PDD_VPORTCB_WAITFORSYNC WaitForVideoPortSync;PDD_VPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;PDD_VPORTCB_COLORCONTROL ColorControl;};
union _wireVARIANT___BE66B252C7DCDEBB95D6D0C528AEDF22 {LONGLONG llVal;LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;wireBSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;wirePSAFEARRAY parray;wireBRECORD brecVal;BYTE *pbVal;SHORT *piVal;LONG *plVal;LONGLONG *pllVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;wireBSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;wirePSAFEARRAY *pparray;wireVARIANT *pvarVal;CHAR cVal;USHORT uiVal;ULONG ulVal;ULONGLONG ullVal;INT intVal;UINT uintVal;DECIMAL decVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;ULONGLONG *pullVal;INT *pintVal;UINT *puintVal;};
struct IDirectDrawSurface2Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface2 *This);ULONG ( *Release)(IDirectDrawSurface2 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface2 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface2 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface2 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE2, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface2 *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface2 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface2 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE2 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface2 *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface2 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface2 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface2 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface2 *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface2 *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface2 *This);HRESULT ( *Lock)(IDirectDrawSurface2 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface2 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface2 *This);HRESULT ( *SetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface2 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface2 *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);HRESULT ( *GetDDInterface)(IDirectDrawSurface2 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface2 *This, DWORD);};
struct IDirectDrawSurface3Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface3 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface3 *This);ULONG ( *Release)(IDirectDrawSurface3 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface3 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface3 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface3 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE3, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface3 *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface3 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface3 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE3 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface3 *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface3 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface3 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface3 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface3 *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface3 *This);HRESULT ( *Lock)(IDirectDrawSurface3 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface3 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface3 *This);HRESULT ( *SetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface3 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface3 *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);HRESULT ( *GetDDInterface)(IDirectDrawSurface3 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *SetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC, DWORD);};
struct IDirectDrawSurfaceVtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface *This);ULONG ( *Release)(IDirectDrawSurface *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface *This, DWORD, DWORD, LPDIRECTDRAWSURFACE, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface *This, LPDDSCAPS, LPDIRECTDRAWSURFACE *);HRESULT ( *GetBltStatus)(IDirectDrawSurface *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface *This);HRESULT ( *Lock)(IDirectDrawSurface *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface *This);HRESULT ( *SetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);};
struct IDirectDrawSurface4Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface4 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface4 *This);ULONG ( *Release)(IDirectDrawSurface4 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface4 *This, LPDIRECTDRAWSURFACE4);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface4 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface4 *This, LPRECT, LPDIRECTDRAWSURFACE4, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface4 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface4 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE4, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface4 *This, DWORD, LPDIRECTDRAWSURFACE4);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface4 *This, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface4 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *Flip)(IDirectDrawSurface4 *This, LPDIRECTDRAWSURFACE4, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface4 *This, LPDDSCAPS2, LPDIRECTDRAWSURFACE4 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface4 *This, LPDDSCAPS2);HRESULT ( *GetClipper)(IDirectDrawSurface4 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface4 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface4 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface4 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface4 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface4 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface4 *This, LPDDSURFACEDESC2);HRESULT ( *Initialize)(IDirectDrawSurface4 *This, LPDIRECTDRAW, LPDDSURFACEDESC2);HRESULT ( *IsLost)(IDirectDrawSurface4 *This);HRESULT ( *Lock)(IDirectDrawSurface4 *This, LPRECT, LPDDSURFACEDESC2, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface4 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface4 *This);HRESULT ( *SetClipper)(IDirectDrawSurface4 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface4 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface4 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface4 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface4 *This, LPRECT);HRESULT ( *UpdateOverlay)(IDirectDrawSurface4 *This, LPRECT, LPDIRECTDRAWSURFACE4, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface4 *This, DWORD, LPDIRECTDRAWSURFACE4);HRESULT ( *GetDDInterface)(IDirectDrawSurface4 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *SetSurfaceDesc)(IDirectDrawSurface4 *This, LPDDSURFACEDESC2, DWORD);HRESULT ( *SetPrivateData)(IDirectDrawSurface4 *This,  GUID *, LPVOID, DWORD, DWORD);HRESULT ( *GetPrivateData)(IDirectDrawSurface4 *This,  GUID *, LPVOID, LPDWORD);HRESULT ( *FreePrivateData)(IDirectDrawSurface4 *This,  GUID *);HRESULT ( *GetUniquenessValue)(IDirectDrawSurface4 *This, LPDWORD);HRESULT ( *ChangeUniquenessValue)(IDirectDrawSurface4 *This);};
struct IDirectDrawSurface7Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface7 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface7 *This);ULONG ( *Release)(IDirectDrawSurface7 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface7 *This, LPDIRECTDRAWSURFACE7);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface7 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface7 *This, LPRECT, LPDIRECTDRAWSURFACE7, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface7 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface7 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE7, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface7 *This, DWORD, LPDIRECTDRAWSURFACE7);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface7 *This, LPVOID, LPDDENUMSURFACESCALLBACK7);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface7 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK7);HRESULT ( *Flip)(IDirectDrawSurface7 *This, LPDIRECTDRAWSURFACE7, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface7 *This, LPDDSCAPS2, LPDIRECTDRAWSURFACE7 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface7 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface7 *This, LPDDSCAPS2);HRESULT ( *GetClipper)(IDirectDrawSurface7 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface7 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface7 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface7 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface7 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface7 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface7 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface7 *This, LPDDSURFACEDESC2);HRESULT ( *Initialize)(IDirectDrawSurface7 *This, LPDIRECTDRAW, LPDDSURFACEDESC2);HRESULT ( *IsLost)(IDirectDrawSurface7 *This);HRESULT ( *Lock)(IDirectDrawSurface7 *This, LPRECT, LPDDSURFACEDESC2, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface7 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface7 *This);HRESULT ( *SetClipper)(IDirectDrawSurface7 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface7 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface7 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface7 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface7 *This, LPRECT);HRESULT ( *UpdateOverlay)(IDirectDrawSurface7 *This, LPRECT, LPDIRECTDRAWSURFACE7, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface7 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface7 *This, DWORD, LPDIRECTDRAWSURFACE7);HRESULT ( *GetDDInterface)(IDirectDrawSurface7 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface7 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface7 *This, DWORD);HRESULT ( *SetSurfaceDesc)(IDirectDrawSurface7 *This, LPDDSURFACEDESC2, DWORD);HRESULT ( *SetPrivateData)(IDirectDrawSurface7 *This,  GUID *, LPVOID, DWORD, DWORD);HRESULT ( *GetPrivateData)(IDirectDrawSurface7 *This,  GUID *, LPVOID, LPDWORD);HRESULT ( *FreePrivateData)(IDirectDrawSurface7 *This,  GUID *);HRESULT ( *GetUniquenessValue)(IDirectDrawSurface7 *This, LPDWORD);HRESULT ( *ChangeUniquenessValue)(IDirectDrawSurface7 *This);HRESULT ( *SetPriority)(IDirectDrawSurface7 *This, DWORD);HRESULT ( *GetPriority)(IDirectDrawSurface7 *This, LPDWORD);HRESULT ( *SetLOD)(IDirectDrawSurface7 *This, DWORD);HRESULT ( *GetLOD)(IDirectDrawSurface7 *This, LPDWORD);};
struct _DDRAWI_DIRECTDRAW_GBL {DWORD dwRefCnt;DWORD dwFlags;FLATPTR fpPrimaryOrig;DDCORECAPS ddCaps;DWORD dwInternal1;DWORD dwUnused1[9];LPDDHAL_CALLBACKS lpDDCBtmp;LPDDRAWI_DDRAWSURFACE_INT dsList;LPDDRAWI_DDRAWPALETTE_INT palList;LPDDRAWI_DDRAWCLIPPER_INT clipperList;LPDDRAWI_DIRECTDRAW_GBL lp16DD;DWORD dwMaxOverlays;DWORD dwCurrOverlays;DWORD dwMonitorFrequency;DDCORECAPS ddHELCaps;DWORD dwUnused2[50];DDCOLORKEY ddckCKDestOverlay;DDCOLORKEY ddckCKSrcOverlay;VIDMEMINFO vmiData;LPVOID lpDriverHandle;LPDDRAWI_DIRECTDRAW_LCL lpExclusiveOwner;DWORD dwModeIndex;DWORD dwModeIndexOrig;DWORD dwNumFourCC;DWORD *lpdwFourCC;DWORD dwNumModes;LPDDHALMODEINFO lpModeInfo;PROCESS_LIST plProcessList;DWORD dwSurfaceLockCount;DWORD dwAliasedLockCnt;ULONG_PTR dwReserved3;ULONG_PTR hDD;char cObsolete[12];DWORD dwReserved1;DWORD dwReserved2;DBLNODE dbnOverlayRoot;LPWORD lpwPDeviceFlags;DWORD dwPDevice;DWORD dwWin16LockCnt;DWORD dwUnused3;DWORD hInstance;DWORD dwEvent16;DWORD dwSaveNumModes;ULONG_PTR lpD3DGlobalDriverData;ULONG_PTR lpD3DHALCallbacks;DDCORECAPS ddBothCaps;LPDDVIDEOPORTCAPS lpDDVideoPortCaps;LPDDRAWI_DDVIDEOPORT_INT dvpList;ULONG_PTR lpD3DHALCallbacks2;RECT rectDevice;DWORD cMonitors;LPVOID gpbmiSrc;LPVOID gpbmiDest;LPHEAPALIASINFO phaiHeapAliases;ULONG_PTR hKernelHandle;ULONG_PTR pfnNotifyProc;LPDDKERNELCAPS lpDDKernelCaps;LPDDNONLOCALVIDMEMCAPS lpddNLVCaps;LPDDNONLOCALVIDMEMCAPS lpddNLVHELCaps;LPDDNONLOCALVIDMEMCAPS lpddNLVBothCaps;ULONG_PTR lpD3DExtendedCaps;DWORD dwDOSBoxEvent;RECT rectDesktop;char cDriverName[32];ULONG_PTR lpD3DHALCallbacks3;DWORD dwNumZPixelFormats;LPDDPIXELFORMAT lpZPixelFormats;LPDDRAWI_DDMOTIONCOMP_INT mcList;DWORD hDDVxd;DDSCAPSEX ddsCapsMore;};
struct _MCDDRIVER {ULONG ulSize;MCDRVDESCRIBEPIXELFORMATFUNC pMCDrvDescribePixelFormat;MCDRVDESCRIBELAYERPLANEFUNC pMCDrvDescribeLayerPlane;MCDRVSETLAYERPALETTEFUNC pMCDrvSetLayerPalette;MCDRVINFOFUNC pMCDrvInfo;MCDRVCREATECONTEXTFUNC pMCDrvCreateContext;MCDRVDELETECONTEXTFUNC pMCDrvDeleteContext;MCDRVBINDCONTEXTFUNC pMCDrvBindContext;MCDRVCREATETEXTUREFUNC pMCDrvCreateTexture;MCDRVDELETETEXTUREFUNC pMCDrvDeleteTexture;MCDRVUPDATESUBTEXTUREFUNC pMCDrvUpdateSubTexture;MCDRVUPDATETEXTUREPALETTEFUNC pMCDrvUpdateTexturePalette;MCDRVUPDATETEXTUREPRIORITYFUNC pMCDrvUpdateTexturePriority;MCDRVUPDATETEXTURESTATEFUNC pMCDrvUpdateTextureState;MCDRVTEXTURESTATUSFUNC pMCDrvTextureStatus;MCDRVCREATEMEMFUNC pMCDrvCreateMem;MCDRVDELETEMEMFUNC pMCDrvDeleteMem;MCDRVDRAWFUNC pMCDrvDraw;MCDRVCLEARFUNC pMCDrvClear;MCDRVSWAPFUNC pMCDrvSwap;MCDRVSTATEFUNC pMCDrvState;MCDRVVIEWPORTFUNC pMCDrvViewport;MCDRVGETHDEVFUNC pMCDrvGetHdev;MCDRVSPANFUNC pMCDrvSpan;MCDRVTRACKWINDOWFUNC pMCDrvTrackWindow;MCDRVALLOCBUFFERSFUNC pMCDrvAllocBuffers;MCDRVGETBUFFERSFUNC pMCDrvGetBuffers;MCDRVSYNCFUNC pMCDrvSync;MCDRVDRAWPIXELS pMCDrvDrawPixels;MCDRVREADPIXELS pMCDrvReadPixels;MCDRVCOPYPIXELS pMCDrvCopyPixels;MCDRVPIXELMAP pMCDrvPixelMap;};
struct IDirect3DDevice8Vtbl {HRESULT ( *QueryInterface)(IDirect3DDevice8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DDevice8 *This);ULONG ( *Release)(IDirect3DDevice8 *This);HRESULT ( *TestCooperativeLevel)(IDirect3DDevice8 *This);UINT ( *GetAvailableTextureMem)(IDirect3DDevice8 *This);HRESULT ( *ResourceManagerDiscardBytes)(IDirect3DDevice8 *This, DWORD Bytes);HRESULT ( *GetDirect3D)(IDirect3DDevice8 *This, IDirect3D8 **ppD3D8);HRESULT ( *GetDeviceCaps)(IDirect3DDevice8 *This, D3DCAPS8 *pCaps);HRESULT ( *GetDisplayMode)(IDirect3DDevice8 *This, D3DDISPLAYMODE *pMode);HRESULT ( *GetCreationParameters)(IDirect3DDevice8 *This, D3DDEVICE_CREATION_PARAMETERS *pParameters);HRESULT ( *SetCursorProperties)(IDirect3DDevice8 *This, UINT XHotSpot, UINT YHotSpot, IDirect3DSurface8 *pCursorBitmap);void ( *SetCursorPosition)(IDirect3DDevice8 *This, UINT XScreenSpace, UINT YScreenSpace, DWORD Flags);BOOL ( *ShowCursor)(IDirect3DDevice8 *This, BOOL bShow);HRESULT ( *CreateAdditionalSwapChain)(IDirect3DDevice8 *This, D3DPRESENT_PARAMETERS *pPresentationParameters, IDirect3DSwapChain8 **pSwapChain);HRESULT ( *Reset)(IDirect3DDevice8 *This, D3DPRESENT_PARAMETERS *pPresentationParameters);HRESULT ( *Present)(IDirect3DDevice8 *This,  RECT *pSourceRect,  RECT *pDestRect, HWND hDestWindowOverride,  RGNDATA *pDirtyRegion);HRESULT ( *GetBackBuffer)(IDirect3DDevice8 *This, UINT BackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface8 **ppBackBuffer);HRESULT ( *GetRasterStatus)(IDirect3DDevice8 *This, D3DRASTER_STATUS *pRasterStatus);void ( *SetGammaRamp)(IDirect3DDevice8 *This, DWORD Flags,  D3DGAMMARAMP *pRamp);void ( *GetGammaRamp)(IDirect3DDevice8 *This, D3DGAMMARAMP *pRamp);HRESULT ( *CreateTexture)(IDirect3DDevice8 *This, UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture8 **ppTexture);HRESULT ( *CreateVolumeTexture)(IDirect3DDevice8 *This, UINT Width, UINT Height, UINT Depth, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture8 **ppVolumeTexture);HRESULT ( *CreateCubeTexture)(IDirect3DDevice8 *This, UINT EdgeLength, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture8 **ppCubeTexture);HRESULT ( *CreateVertexBuffer)(IDirect3DDevice8 *This, UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool, IDirect3DVertexBuffer8 **ppVertexBuffer);HRESULT ( *CreateIndexBuffer)(IDirect3DDevice8 *This, UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer8 **ppIndexBuffer);HRESULT ( *CreateRenderTarget)(IDirect3DDevice8 *This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, BOOL Lockable, IDirect3DSurface8 **ppSurface);HRESULT ( *CreateDepthStencilSurface)(IDirect3DDevice8 *This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, IDirect3DSurface8 **ppSurface);HRESULT ( *CreateImageSurface)(IDirect3DDevice8 *This, UINT Width, UINT Height, D3DFORMAT Format, IDirect3DSurface8 **ppSurface);HRESULT ( *CopyRects)(IDirect3DDevice8 *This, IDirect3DSurface8 *pSourceSurface,  RECT *pSourceRectsArray, UINT cRects, IDirect3DSurface8 *pDestinationSurface,  POINT *pDestPointsArray);HRESULT ( *UpdateTexture)(IDirect3DDevice8 *This, IDirect3DBaseTexture8 *pSourceTexture, IDirect3DBaseTexture8 *pDestinationTexture);HRESULT ( *GetFrontBuffer)(IDirect3DDevice8 *This, IDirect3DSurface8 *pDestSurface);HRESULT ( *SetRenderTarget)(IDirect3DDevice8 *This, IDirect3DSurface8 *pRenderTarget, IDirect3DSurface8 *pNewZStencil);HRESULT ( *GetRenderTarget)(IDirect3DDevice8 *This, IDirect3DSurface8 **ppRenderTarget);HRESULT ( *GetDepthStencilSurface)(IDirect3DDevice8 *This, IDirect3DSurface8 **ppZStencilSurface);HRESULT ( *BeginScene)(IDirect3DDevice8 *This);HRESULT ( *EndScene)(IDirect3DDevice8 *This);HRESULT ( *Clear)(IDirect3DDevice8 *This, DWORD Count,  D3DRECT *pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil);HRESULT ( *SetTransform)(IDirect3DDevice8 *This, D3DTRANSFORMSTATETYPE State,  D3DMATRIX *pMatrix);HRESULT ( *GetTransform)(IDirect3DDevice8 *This, D3DTRANSFORMSTATETYPE State, D3DMATRIX *pMatrix);HRESULT ( *MultiplyTransform)(IDirect3DDevice8 *This, D3DTRANSFORMSTATETYPE,  D3DMATRIX *);HRESULT ( *SetViewport)(IDirect3DDevice8 *This,  D3DVIEWPORT8 *pViewport);HRESULT ( *GetViewport)(IDirect3DDevice8 *This, D3DVIEWPORT8 *pViewport);HRESULT ( *SetMaterial)(IDirect3DDevice8 *This,  D3DMATERIAL8 *pMaterial);HRESULT ( *GetMaterial)(IDirect3DDevice8 *This, D3DMATERIAL8 *pMaterial);HRESULT ( *SetLight)(IDirect3DDevice8 *This, DWORD Index,  D3DLIGHT8 *);HRESULT ( *GetLight)(IDirect3DDevice8 *This, DWORD Index, D3DLIGHT8 *);HRESULT ( *LightEnable)(IDirect3DDevice8 *This, DWORD Index, BOOL Enable);HRESULT ( *GetLightEnable)(IDirect3DDevice8 *This, DWORD Index, BOOL *pEnable);HRESULT ( *SetClipPlane)(IDirect3DDevice8 *This, DWORD Index,  float *pPlane);HRESULT ( *GetClipPlane)(IDirect3DDevice8 *This, DWORD Index, float *pPlane);HRESULT ( *SetRenderState)(IDirect3DDevice8 *This, D3DRENDERSTATETYPE State, DWORD Value);HRESULT ( *GetRenderState)(IDirect3DDevice8 *This, D3DRENDERSTATETYPE State, DWORD *pValue);HRESULT ( *BeginStateBlock)(IDirect3DDevice8 *This);HRESULT ( *EndStateBlock)(IDirect3DDevice8 *This, DWORD *pToken);HRESULT ( *ApplyStateBlock)(IDirect3DDevice8 *This, DWORD Token);HRESULT ( *CaptureStateBlock)(IDirect3DDevice8 *This, DWORD Token);HRESULT ( *DeleteStateBlock)(IDirect3DDevice8 *This, DWORD Token);HRESULT ( *CreateStateBlock)(IDirect3DDevice8 *This, D3DSTATEBLOCKTYPE Type, DWORD *pToken);HRESULT ( *SetClipStatus)(IDirect3DDevice8 *This,  D3DCLIPSTATUS8 *pClipStatus);HRESULT ( *GetClipStatus)(IDirect3DDevice8 *This, D3DCLIPSTATUS8 *pClipStatus);HRESULT ( *GetTexture)(IDirect3DDevice8 *This, DWORD Stage, IDirect3DBaseTexture8 **ppTexture);HRESULT ( *SetTexture)(IDirect3DDevice8 *This, DWORD Stage, IDirect3DBaseTexture8 *pTexture);HRESULT ( *GetTextureStageState)(IDirect3DDevice8 *This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD *pValue);HRESULT ( *SetTextureStageState)(IDirect3DDevice8 *This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value);HRESULT ( *ValidateDevice)(IDirect3DDevice8 *This, DWORD *pNumPasses);HRESULT ( *GetInfo)(IDirect3DDevice8 *This, DWORD DevInfoID, void *pDevInfoStruct, DWORD DevInfoStructSize);HRESULT ( *SetPaletteEntries)(IDirect3DDevice8 *This, UINT PaletteNumber,  PALETTEENTRY *pEntries);HRESULT ( *GetPaletteEntries)(IDirect3DDevice8 *This, UINT PaletteNumber, PALETTEENTRY *pEntries);HRESULT ( *SetCurrentTexturePalette)(IDirect3DDevice8 *This, UINT PaletteNumber);HRESULT ( *GetCurrentTexturePalette)(IDirect3DDevice8 *This, UINT *PaletteNumber);HRESULT ( *DrawPrimitive)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount);HRESULT ( *DrawIndexedPrimitive)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE, UINT minIndex, UINT NumVertices, UINT startIndex, UINT primCount);HRESULT ( *DrawPrimitiveUP)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount,  void *pVertexStreamZeroData, UINT VertexStreamZeroStride);HRESULT ( *DrawIndexedPrimitiveUP)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE PrimitiveType, UINT MinVertexIndex, UINT NumVertexIndices, UINT PrimitiveCount,  void *pIndexData, D3DFORMAT IndexDataFormat,  void *pVertexStreamZeroData, UINT VertexStreamZeroStride);HRESULT ( *ProcessVertices)(IDirect3DDevice8 *This, UINT SrcStartIndex, UINT DestIndex, UINT VertexCount, IDirect3DVertexBuffer8 *pDestBuffer, DWORD Flags);HRESULT ( *CreateVertexShader)(IDirect3DDevice8 *This,  DWORD *pDeclaration,  DWORD *pFunction, DWORD *pHandle, DWORD Usage);HRESULT ( *SetVertexShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *GetVertexShader)(IDirect3DDevice8 *This, DWORD *pHandle);HRESULT ( *DeleteVertexShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *SetVertexShaderConstant)(IDirect3DDevice8 *This, DWORD Register,  void *pConstantData, DWORD ConstantCount);HRESULT ( *GetVertexShaderConstant)(IDirect3DDevice8 *This, DWORD Register, void *pConstantData, DWORD ConstantCount);HRESULT ( *GetVertexShaderDeclaration)(IDirect3DDevice8 *This, DWORD Handle, void *pData, DWORD *pSizeOfData);HRESULT ( *GetVertexShaderFunction)(IDirect3DDevice8 *This, DWORD Handle, void *pData, DWORD *pSizeOfData);HRESULT ( *SetStreamSource)(IDirect3DDevice8 *This, UINT StreamNumber, IDirect3DVertexBuffer8 *pStreamData, UINT Stride);HRESULT ( *GetStreamSource)(IDirect3DDevice8 *This, UINT StreamNumber, IDirect3DVertexBuffer8 **ppStreamData, UINT *pStride);HRESULT ( *SetIndices)(IDirect3DDevice8 *This, IDirect3DIndexBuffer8 *pIndexData, UINT BaseVertexIndex);HRESULT ( *GetIndices)(IDirect3DDevice8 *This, IDirect3DIndexBuffer8 **ppIndexData, UINT *pBaseVertexIndex);HRESULT ( *CreatePixelShader)(IDirect3DDevice8 *This,  DWORD *pFunction, DWORD *pHandle);HRESULT ( *SetPixelShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *GetPixelShader)(IDirect3DDevice8 *This, DWORD *pHandle);HRESULT ( *DeletePixelShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *SetPixelShaderConstant)(IDirect3DDevice8 *This, DWORD Register,  void *pConstantData, DWORD ConstantCount);HRESULT ( *GetPixelShaderConstant)(IDirect3DDevice8 *This, DWORD Register, void *pConstantData, DWORD ConstantCount);HRESULT ( *GetPixelShaderFunction)(IDirect3DDevice8 *This, DWORD Handle, void *pData, DWORD *pSizeOfData);HRESULT ( *DrawRectPatch)(IDirect3DDevice8 *This, UINT Handle,  float *pNumSegs,  D3DRECTPATCH_INFO *pRectPatchInfo);HRESULT ( *DrawTriPatch)(IDirect3DDevice8 *This, UINT Handle,  float *pNumSegs,  D3DTRIPATCH_INFO *pTriPatchInfo);HRESULT ( *DeletePatch)(IDirect3DDevice8 *This, UINT Handle);};
union _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO___76A3B0E8FFB5FF4FE868B027B0FA21D8 {HCRYPTKEY hKeyEncryptionKey;void *pvKeyEncryptionKey;};
struct _87B5C366CEDD06D1A6AC557671C7F981___368524030E53626B9A6587120F737379 {DWORDLONG UnsignedMinimum;DWORDLONG UnsignedMaximum;};
union _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 {HCRYPTKEY hKeyEncryptionKey;void *pvKeyEncryptionKey;};
union _DISK_DETECTION_INFO___2344D2D0A84D08BC25A5ABEA77F9F68C {_DISK_DETECTION_INFO___2344D2D0A84D08BC25A5ABEA77F9F68C___C6895C4B5C301AAC9475EDA00CD39D51 __anonymous0;};
union _D3DTLVERTEX___30594A6BB70EFF251680D22A869004B0 {D3DCOLOR specular;D3DCOLOR dcSpecular;};
union _D3DTLVERTEX___34D6BCDD47B44126D7A203197E7A8282 {D3DCOLOR color;D3DCOLOR dcColor;};
union _D3DLVERTEX___30594A6BB70EFF251680D22A869004B0 {D3DCOLOR specular;D3DCOLOR dcSpecular;};
union _D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282 {D3DCOLOR color;D3DCOLOR dcColor;};
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 {struct tagTYPEDESC *lptdesc;struct tagARRAYDESC *lpadesc;HREFTYPE hreftype;};
struct _117E3A994AEBF040E18388CACE709509 {_117E3A994AEBF040E18388CACE709509___F044539147C377D1A0F579F3A4EAC6A7 __anonymous0;};
struct _284877062F9D14F112F3A0D6BC9583DD {DWORDLONG MaximumSize;DWORDLONG AllocationDelta;};
struct _97C70B764F4B63B047CCB37F16214516 {DWORDLONG PlayOffset;DWORDLONG WriteOffset;};
typedef HRESULT ( *PFN_PROVIDER_TESTFINALPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef BOOLEAN *PSECURITY_CONTEXT_TRACKING_MODE;
typedef BOOLEAN ( *PSAM_INIT_NOTIFICATION_ROUTINE)();
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;
typedef HRESULT ( *PFN_PROVIDER_FINALPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
struct _HIDP_KEYBOARD_MODIFIER_STATE {_HIDP_KEYBOARD_MODIFIER_STATE___09F65E3D8EC31FFE3E62B668D67CDD30 __anonymous0;};
struct _NDIS_PM_WAKE_UP_CAPABILITIES {NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;NDIS_DEVICE_POWER_STATE MinPatternWakeUp;NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;};
struct _POLICY_AUDIT_FULL_QUERY_INFO {BOOLEAN ShutDownOnFull;BOOLEAN LogIsFull;};
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
struct _LSA_ENUMERATION_INFORMATION {PSID Sid;};
struct _POLICY_LSA_SERVER_ROLE_INFO {POLICY_LSA_SERVER_ROLE LsaServerRole;};
typedef HRESULT ( *PFN_PROVIDER_CERTTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
struct _DDGETTRANSFERSTATUSOUTINFO {DWORD_PTR dwTransferID;};
struct _POLICY_AUDIT_FULL_SET_INFO {BOOLEAN ShutDownOnFull;};
struct NDIS_BPC_STATUS_CONNECTION {BPC_HANDLE nhConnection;BPC_HANDLE nhDevice;};
typedef HRESULT ( *PFN_PROVIDER_OBJTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef HRESULT ( *PFN_PROVIDER_SIGTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
typedef HRESULT ( *PFN_PROVIDER_CLEANUP_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
struct _CRL_FIND_ISSUED_FOR_PARA {PCCERT_CONTEXT pSubjectCert;PCCERT_CONTEXT pIssuerCert;};
struct _DECRYPTION_STATUS_BUFFER {BOOLEAN NoEncryptedStreams;};
typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;
struct tagCInterfaceProxyHeader { IID *piid;};
typedef WAVEFORMATIEEEFLOATEX *LPWAVEFORMATIEEEFLOATEX;
typedef WAVEFORMATIEEEFLOATEX *NPWAVEFORMATIEEEFLOATEX;
typedef PUCHAR PHIDP_REPORT_DESCRIPTOR;
typedef void  RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event);
struct _FILE_SET_SPARSE_BUFFER {BOOLEAN SetSparse;};
struct _PRINTPROCESSOR_INFO_1A {LPSTR pName;};
struct _XMIT_ROUTINE_QUINTUPLE {XMIT_HELPER_ROUTINE pfnTranslateToXmit;XMIT_HELPER_ROUTINE pfnTranslateFromXmit;XMIT_HELPER_ROUTINE pfnFreeXmit;XMIT_HELPER_ROUTINE pfnFreeInst;};
typedef LPFNADDPROPSHEETPAGE LPFNSVADDPROPSHEETPAGE;
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
typedef HRESULT ( *PFN_PROVIDER_INIT_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
typedef WAVEFORMATIEEEFLOATEX *PWAVEFORMATIEEEFLOATEX;
typedef void (*PWINDBG_OUTPUT_ROUTINE)(PCSTR lpFormat, ...);
struct _PREVENT_MEDIA_REMOVAL {BOOLEAN PreventMediaRemoval;};
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef KS_LogicalMemoryType *PKS_LogicalMemoryType;
typedef PIPE_ALLOCATOR_PLACE *PPIPE_ALLOCATOR_PLACE;
struct _CRYPT_OID_FUNC_ENTRY {LPCSTR pszOID;void *pvFuncAddr;};
struct _SERVICE_DESCRIPTIONA {LPSTR lpDescription;};
struct _UNIVERSAL_NAME_INFOA {LPSTR lpUniversalName;};
struct NDIS_BPC_POOL_RETURN {BPC_HANDLE nhConnection;};
struct _CERT_POLICY_MAPPING {LPSTR pszIssuerDomainPolicy;LPSTR pszSubjectDomainPolicy;};
struct _RPC_TRANSFER_SYNTAX {UUID Uuid;unsigned short VersMajor;unsigned short VersMinor;};
struct _SFVM_HELPTOPIC_DATA {WCHAR wszHelpFile[260];WCHAR wszHelpTopic[260];};
struct _TOKEN_PRIMARY_GROUP {PSID PrimaryGroup;};
struct tagMCI_GENERIC_PARMS {DWORD_PTR dwCallback;};
struct NDIS_BPC_DISCONNECT {BPC_HANDLE nhConnection;};
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
struct _RPC_BINDING_VECTOR {unsigned int Count;RPC_BINDING_HANDLE BindingH[1];};
struct _TOKEN_DEFAULT_DACL {PACL DefaultDacl;};
struct tagWNODE_EVENT_ITEM {struct _WNODE_HEADER WnodeHeader;};
typedef int ( *EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef LPDDENUMCALLBACKEXA LPDDENUMCALLBACKEX;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
struct _D3DMATRIXMULTIPLY {D3DMATRIXHANDLE hDestMatrix;D3DMATRIXHANDLE hSrcMatrix1;D3DMATRIXHANDLE hSrcMatrix2;};
struct _DATATYPES_INFO_1A {LPSTR pName;};
struct _REMOTE_NAME_INFOA {LPSTR lpUniversalName;LPSTR lpConnectionName;LPSTR lpRemainingPath;};
struct tagHH_SET_INFOTYPE {int cbStruct;LPCSTR pszCatName;LPCSTR pszInfoTypeName;};
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
typedef DMUS_PORTPARAMS *LPDMUS_PORTPARAMS;
typedef WAVEFORMATPCMEX *LPWAVEFORMATPCMEX;
typedef WAVEFORMATPCMEX *NPWAVEFORMATPCMEX;
struct _PROVIDOR_INFO_1A {LPSTR pName;LPSTR pEnvironment;LPSTR pDLLName;};
struct _PROVIDOR_INFO_2A {LPSTR pOrder;};
struct _SURFACEALIGNMENT {_SURFACEALIGNMENT___DAF505541A1392813D93ACE345019058 __anonymous0;};
struct tagCStdStubBuffer { struct IRpcStubBufferVtbl *lpVtbl;int RefCount;struct IUnknown *pvServerObject; struct ICallFactoryVtbl *pCallFactoryVtbl; IID *pAsyncIID;struct IPSFactoryBuffer *pPSFactory; struct IReleaseMarshalBuffersVtbl *pRMBVtbl;};
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef LPDDENUMCALLBACKA LPDDENUMCALLBACK;
typedef DMUS_CLOCKINFO *LPDMUS_CLOCKINFO;
typedef HRESULT ( *LPFNCANUNLOADNOW)();
typedef REFERENCE_TIME *LPREFERENCE_TIME;
typedef WAVEFORMATPCMEX *PWAVEFORMATPCMEX;
struct _GENERIC_MAPPING {ACCESS_MASK GenericRead;ACCESS_MASK GenericWrite;ACCESS_MASK GenericExecute;ACCESS_MASK GenericAll;};
struct _MONITOR_INFO_1A {LPSTR pName;};
struct _MONITOR_INFO_2A {LPSTR pName;LPSTR pEnvironment;LPSTR pDLLName;};
struct tagREGISTERWORDA {LPSTR lpReading;LPSTR lpWord;};
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
typedef ACMDRIVERPROC *LPACMDRIVERPROC;
typedef LPCRECT LPCBORDERWIDTHS;
typedef TEXTMETRICOLE *LPTEXTMETRICOLE;
typedef NAMEENUMPROCA WINSTAENUMPROCA;
struct _DRIVER_INFO_1A {LPSTR pName;};
struct _FLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;STGMEDIUM Stgmed;};
struct _SHNAMEMAPPINGA {LPSTR pszOldPath;LPSTR pszNewPath;int cchOldPath;int cchNewPath;};
struct _USAGE_AND_PAGE {USAGE Usage;USAGE UsagePage;};
struct _userCLIPFORMAT {int fContext;union _userCLIPFORMAT____MIDL_IWinTypes_0001 u;};
struct tagHELPWININFOW {int wStructSize;int x;int y;int dx;int dy;int wMax;WCHAR rgchMember[2];};
typedef WCHAR *DEADKEY_LPWSTR;
typedef SCARDCONTEXT *LPSCARDCONTEXT;
typedef TIMECALLBACK *LPTIMECALLBACK;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef WINSTAENUMPROCA WINSTAENUMPROC;
struct _tagStartParam {IID iid;IBindCtx *pIBindCtx;IUnknown *pItf;};
struct arp_send_reply {IPAddr DestAddress;IPAddr SrcAddress;};
struct tagHH_ENUM_CAT {int cbStruct;LPCSTR pszCatName;LPCSTR pszCatDescription;};
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef DRVCALLBACK *LPDRVCALLBACK;
typedef SAMPLE_TIME *LPSAMPLE_TIME;
typedef SCARDHANDLE *LPSCARDHANDLE;
typedef int ( *PFNDPACOMPARE)(void *p1, void *p2, LPARAM lParam);
typedef FRAMING_PROP *PFRAMING_PROP;
typedef QUERYHANDLER *PQUERYHANDLER;
typedef SCARDCONTEXT *PSCARDCONTEXT;
struct _PORT_INFO_1A {LPSTR pName;};
struct tagHH_ENUM_IT {int cbStruct;int iType;LPCSTR pszCatName;LPCSTR pszITName;LPCSTR pszITDescription;};
typedef FONTENUMPROCA FONTENUMPROC;
typedef int  IIDLookupRtn( IID *pIID, int *pIndex);
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef int ( *LPWPUFDISSET)(SOCKET s, fd_set *fdset);
typedef void ( *LPWSAUSERAPC)(DWORD_PTR dwContext);
typedef DRVCALLBACK MIDICALLBACK;
typedef ACCESS_MASK *PACCESS_MASK;
typedef DRVCALLBACK *PDRVCALLBACK;
typedef int ( *PFNLVCOMPARE)(LPARAM, LPARAM, LPARAM);
typedef int ( *PFNTVCOMPARE)(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
typedef HH_INFOTYPE *PHH_INFOTYPE;
typedef PROPENUMPROCA PROPENUMPROC;
typedef SCARDHANDLE *PSCARDHANDLE;
typedef DRVCALLBACK WAVECALLBACK;
struct _DOC_INFO_1A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;};
struct _IPX_PATTERN {struct _IPX_PATTERN___BD8DCF4BCCBA406C79DE40E5D399A54E Src;struct _IPX_PATTERN___BD8DCF4BCCBA406C79DE40E5D399A54E Dest;};
struct _TOKEN_OWNER {PSID Owner;};
struct _UUID_VECTOR {unsigned int Count;UUID *Uuid[1];};
typedef void ( *LINEDDAPROC)(int, int, LPARAM);
typedef OLERENDER *LPOLERENDER;
typedef OLEUPDATE *LPOLEUPDATE;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef HDEVNOTIFY *PHDEVNOTIFY;
typedef KSPIN_LOCK *PKSPIN_LOCK;
typedef TOKEN_TYPE *PTOKEN_TYPE;
typedef MMIOPROC *LPMMIOPROC;
typedef DWORDLONG *PDWORDLONG;
typedef IIDLookupRtn *PIIDLookup;
typedef KAFFINITY *PKAFFINITY;
typedef OLEUPDATE *POLEUPDATE;
typedef  WCHAR *WBEM_CWSTR;
struct _CIECHROMA {LDECI4 x;LDECI4 y;LDECI4 Y;};
struct _RPC_IF_ID {UUID Uuid;unsigned short VersMajor;unsigned short VersMinor;};
typedef PCONTEXT LPCONTEXT;
typedef PATTERN *LPPATTERN;
typedef PATTERN *NPPATTERN;
typedef WCHAR *WBEM_WSTR;
struct _COLORMAP {COLORREF from;COLORREF to;};
struct _FD_XFORM {FLOATL eXX;FLOATL eXY;FLOATL eYX;FLOATL eYY;};
struct _POINTFIX {FIX x;FIX y;};
typedef HGLOBAL HOLEMENU;
typedef LPCSTR LPCUTSTR;
typedef  WCHAR *LPCUWSTR;
typedef DDCAPS *LPDDCAPS;
typedef DISPID MEMBERID;
typedef BOOLEAN *PBOOLEAN;
typedef PATTERN *PPATTERN;
typedef PTRDIFF *PPTRDIFF;
struct _FONTSIM {PTRDIFF dpBold;PTRDIFF dpItalic;PTRDIFF dpBoldItalic;};
struct in6_addr {union in6_addr___6F0816B860EA11CA8E788AEE35731DB2 u;};
typedef CLSID *LPCLSID;
typedef CSECT *LPCSECT;
typedef LPCSTR LPCTSTR;
typedef  WCHAR *LPCWSTR;
typedef FMTID *LPFMTID;
typedef LPSTR LPUTSTR;
typedef WCHAR *LPUWSTR;
typedef WCHAR OLECHAR;
typedef LPCSTR PCUTSTR;
typedef  WCHAR *PCUWSTR;
typedef HGLYPH *PHGLYPH;
typedef HUSKEY *PHUSKEY;
typedef WCHAR SN_CHAR;
struct _POINTE {FLOATL x;FLOATL y;};
struct _RECTFX {FIX xLeft;FIX yTop;FIX xRight;FIX yBottom;};
struct _XFORML {FLOATL eM11;FLOATL eM12;FLOATL eM21;FLOATL eM22;FLOATL eDx;FLOATL eDy;};
struct in_addr {union in_addr___C13EC994467D6E67044F092615EC7EA9 S_un;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
typedef  WCHAR *LPCWCH;
typedef LPSTR LPTSTR;
typedef WCHAR *LPWSTR;
typedef WCHAR *NWPSTR;
typedef  WCHAR *PCWSTR;
typedef SCODE *PSCODE;
typedef LPSTR PUTSTR;
typedef WCHAR *PUWSTR;
typedef WCHAR *PWCHAR;
typedef IID *LPIID;
typedef WCHAR *LPWCH;
typedef  WCHAR *PCWCH;
typedef WCHAR *PWSTR;
typedef OLECHAR *BSTR;
typedef FIX *PFIX;
typedef OLECHAR **SNB;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___C9F2A79EEE81C8CFC776F7DA83E58678 {LPWSAOVERLAPPED lpOverlapped;LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;};
union _CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217 {void *pvSystemStore;LPCSTR pszSystemStore;LPCWSTR pwszSystemStore;};
union _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983 {struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52 DiskInfo;struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52 RemovableDiskInfo;struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___723F4108713078BC94E60AB72DA19CAC TapeInfo;};
union _PROPSHEETPAGEA_V1___B64A5FEB82A45975B190BC8DCA872511 {LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;};
union _PROPSHEETPAGEA_V2___B64A5FEB82A45975B190BC8DCA872511 {LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;};
union _PROPSHEETPAGEW_V1___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETPAGEW_V1___26DC58415637CAEA1C2B7198DBAAFB8E {LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;};
union _PROPSHEETPAGEW_V2___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETPAGEW_V2___26DC58415637CAEA1C2B7198DBAAFB8E {LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;};
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 {UINT nStartPage;LPCWSTR pStartPage;};
union _PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779 {HBITMAP hbmHeader;LPCWSTR pszbmHeader;};
union _PROPSHEETHEADERW___C635E94935336589E496FC759198B86F {HBITMAP hbmWatermark;LPCWSTR pszbmWatermark;};
union _PROPSHEETPAGEA___B64A5FEB82A45975B190BC8DCA872511 {LPCSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;};
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETPAGEW___26DC58415637CAEA1C2B7198DBAAFB8E {LPCWSTR pszTemplate;PROPSHEETPAGE_RESOURCE pResource;};
union _CPSUICBPARAM___7FE1AA947C56968AF3B960F56128DB37 {LONG OldSel;LPTSTR pOldSel;};
union SPC_LINK____5823D59480DB17DC94F0503486FD38F0 {LPWSTR pwszUrl;SPC_SERIALIZED_OBJECT Moniker;LPWSTR pwszFile;};
union _EXTPUSH___7C7FF14AAA7F2F0CB53D652B0FC528B5 {DLGPROC DlgProc;FARPROC pfnCallBack;};
union _OPTITEM___DEC5B3968A449581A37FC9B786F6173F {LONG Sel;LPTSTR pSel;};
union _STRRET___CBA4CBE4EE73FCDBDFD08B2527F2F26D {LPWSTR pOleStr;UINT uOffset;char cStr[260];};
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {DWORD dwFlags;DWORD ulFormatVersion;DWORD ulAssemblyCount;DWORD ulRootManifestPathType;DWORD ulRootManifestPathChars;DWORD ulRootConfigurationPathType;DWORD ulRootConfigurationPathChars;DWORD ulAppDirPathType;DWORD ulAppDirPathChars;PCWSTR lpRootManifestPath;PCWSTR lpRootConfigurationPath;PCWSTR lpAppDirPath;};
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {HKEY hKeyBase;LPWSTR pwszRegPath;};
struct _ASSEMBLY_FILE_DETAILED_INFORMATION {DWORD ulFlags;DWORD ulFilenameLength;DWORD ulPathLength;PCWSTR lpFileName;PCWSTR lpFilePath;};
struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY {HANDLE hFile;LPCWSTR lpPath;LPCWSTR lpDisplayName;};
struct _CERT_POLICY_QUALIFIER_USER_NOTICE {CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;LPWSTR pszDisplayText;};
struct _16C1E3925C7C4AECC0ACCAA7BBC13164 {ULONG NotificationType;_16C1E3925C7C4AECC0ACCAA7BBC13164___335ECC51A6B56A7597C0B2929815FEAA __anonymous0;};
union _87B5C366CEDD06D1A6AC557671C7F981 {_87B5C366CEDD06D1A6AC557671C7F981___EEA291B95E2758FCA85357F8BCFF0FA8 __anonymous0;_87B5C366CEDD06D1A6AC557671C7F981___368524030E53626B9A6587120F737379 __anonymous1;};
struct _8FE251E0C9BEAEF58C2D97D4F1899077 {_A5A2C297D512B29747AD9A814A819610 __anonymous0;UINT uCodePage;};
struct _CERT_REGISTRY_STORE_ROAMING_PARA {HKEY hKey;LPWSTR pwszStoreDirectory;};
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;LPVOID pvCompletion;};
struct _CERT_SYSTEM_STORE_RELOCATE_PARA {_CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4 __anonymous0;_CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217 __anonymous1;};
struct _NEGOTIATE_CALLER_NAME_RESPONSE {ULONG MessageType;PWSTR CallerName;};
struct _DDHAL_DDCOLORCONTROLCALLBACKS {DWORD dwSize;DWORD dwFlags;LPDDHALCOLORCB_COLORCONTROL ColorControl;};
typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR lpBuffer, UINT uSize);
struct _ENUM_SERVICE_STATUS_PROCESSW {LPWSTR lpServiceName;LPWSTR lpDisplayName;SERVICE_STATUS_PROCESS ServiceStatusProcess;};
typedef DWORD ( *RasCustomDeleteEntryNotifyFn)(LPCWSTR lpszPhonebook, LPCWSTR lpszEntry, DWORD dwFlags);
struct _CRYPT_PASSWORD_CREDENTIALSW {DWORD cbSize;LPWSTR pszUsername;LPWSTR pszPassword;};
struct _SP_REGISTER_CONTROL_STATUSW {DWORD cbSize;PCWSTR FileName;DWORD Win32Error;DWORD FailureCode;};
struct tagRASCUSTOMSCRIPTEXTENSIONS {DWORD dwSize;PFNRASSETCOMMSETTINGS pfnRasSetCommSettings;};
struct _CMSG_RECIPIENT_ENCODE_INFO {DWORD dwRecipientChoice;_CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA __anonymous0;};
struct _QUERY_SERVICE_LOCK_STATUSW {DWORD fIsLocked;LPWSTR lpLockOwner;DWORD dwLockDuration;};
struct _DD_MISCELLANEOUSCALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_GETAVAILDRIVERMEMORY GetAvailDriverMemory;};
struct _DD_COLORCONTROLCALLBACKS {DWORD dwSize;DWORD dwFlags;PDD_COLORCB_COLORCONTROL ColorControl;};
typedef void ( *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs, LPWSTR *lpServiceArgVectors);
struct _CMSG_CMS_RECIPIENT_INFO {DWORD dwRecipientChoice;_CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC __anonymous0;};
struct _WIN_TRUST_SUBJECT_FILE {HANDLE hFile;LPCWSTR lpPath;};
struct tagMCI_VD_ESCAPE_PARMSW {DWORD_PTR dwCallback;LPCWSTR lpstrCommand;};
struct _DRIVER_UPGRADE_INFO_2 {LPTSTR pPrinterName;LPTSTR pOldDriverDirectory;DWORD cVersion;LPTSTR pName;LPTSTR pEnvironment;LPTSTR pDriverPath;LPTSTR pDataFile;LPTSTR pConfigFile;LPTSTR pHelpFile;LPTSTR pDependentFiles;LPTSTR pMonitorName;LPTSTR pDefaultDataType;LPTSTR pszzPreviousNames;};
struct _QUERY_SERVICE_CONFIGW {DWORD dwServiceType;DWORD dwStartType;DWORD dwErrorControl;LPWSTR lpBinaryPathName;LPWSTR lpLoadOrderGroup;DWORD dwTagId;LPWSTR lpDependencies;LPWSTR lpServiceStartName;LPWSTR lpDisplayName;};
struct _ENUM_SERVICE_STATUSW {LPWSTR lpServiceName;LPWSTR lpDisplayName;SERVICE_STATUS ServiceStatus;};
struct _MCDGLOBALDRIVERFUNCS {ULONG ulSize;MCDRVGETENTRYPOINTSFUNC pMCDrvGetEntryPoints;};
struct _SERVICE_TABLE_ENTRYW {LPWSTR lpServiceName;LPSERVICE_MAIN_FUNCTIONW lpServiceProc;};
struct tagCInterfaceStubVtbl {CInterfaceStubHeader header;IRpcStubBufferVtbl Vtbl;};
struct _KERB_TICKET_PROFILE {KERB_INTERACTIVE_PROFILE Profile;KERB_CRYPTO_KEY SessionKey;};
struct _wireSAFEARRAY_UNION {ULONG sfType;union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 u;};
struct tagMOUSEHOOKSTRUCTEX {tagMOUSEHOOKSTRUCT __anonymous0;DWORD mouseData;};
typedef BOOLEAN ( *PREGISTERCLASSNAMEW)(LPCWSTR);
struct _CRYPT_PROVUI_FUNCS {DWORD cbStruct;struct _CRYPT_PROVUI_DATA *psUIData;PFN_PROVUI_CALL pfnOnMoreInfoClick;PFN_PROVUI_CALL pfnOnMoreInfoClickDefault;PFN_PROVUI_CALL pfnOnAdvancedClick;PFN_PROVUI_CALL pfnOnAdvancedClickDefault;};
struct _LSA_UNICODE_STRING {USHORT Length;USHORT MaximumLength;PWSTR Buffer;};
struct _SPC_SP_AGENCY_INFO {struct SPC_LINK_ *pPolicyInformation;LPWSTR pwszPolicyDisplayText;PSPC_IMAGE pLogoImage;struct SPC_LINK_ *pLogoLink;};
typedef BOOL ( *CODEPAGE_ENUMPROCW)(LPWSTR);
struct tagMCI_LOAD_PARMSW {DWORD_PTR dwCallback;LPCWSTR lpfilename;};
struct tagMCI_SAVE_PARMSW {DWORD_PTR dwCallback;LPCWSTR lpfilename;};
struct tagRID_DEVICE_INFO {DWORD cbSize;DWORD dwType;tagRID_DEVICE_INFO___5504F465AFF1BB2B3641E853B1A95DB8 __anonymous0;};
struct tagWNODE_TOO_SMALL {struct _WNODE_HEADER WnodeHeader;ULONG SizeNeeded;};
typedef BOOL ( *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL ( *DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL ( *TIMEFMT_ENUMPROCW)(LPWSTR);
struct _CMSG_STREAM_INFO {DWORD cbContent;PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;void *pvArg;};
struct tagMONITORINFOEXA {tagMONITORINFO __anonymous0;CHAR szDevice[32];};
struct tagMONITORINFOEXW {tagMONITORINFO __anonymous0;WCHAR szDevice[32];};
typedef BOOL ( *LOCALE_ENUMPROCW)(LPWSTR);
struct _CRYPT_URL_ARRAY {DWORD cUrl;LPWSTR *rgwszUrl;};
struct _PRINTER_INFO_1W {DWORD Flags;LPWSTR pDescription;LPWSTR pName;LPWSTR pComment;};
struct _PRINTER_INFO_4W {LPWSTR pPrinterName;LPWSTR pServerName;DWORD Attributes;};
struct _PRINTER_INFO_5W {LPWSTR pPrinterName;LPWSTR pPortName;DWORD Attributes;DWORD DeviceNotSelectedTimeout;DWORD TransmissionRetryTimeout;};
struct _PRINTER_INFO_7W {LPWSTR pszObjectGUID;DWORD dwAction;};
struct _RSVP_FILTERSPEC {FilterType Type;_RSVP_FILTERSPEC___59F6C73F6B9BF6FF92B2606A8BB6C14F __anonymous0;};
struct _WINDOWS_IAS_SET {char irdaClassName[64];char irdaAttribName[256];u_long irdaAttribType;union _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191 irdaAttribute;};
struct tagDRVCONFIGINFO {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;};
struct tagTBSAVEPARAMSW {HKEY hkr;LPCWSTR pszSubKey;LPCWSTR pszValueName;};
struct tagTCITEMHEADERW {UINT mask;UINT lpReserved1;UINT lpReserved2;LPWSTR pszText;int cchTextMax;int iImage;};
struct DRVCONFIGINFOEX {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;DWORD dnDevNode;};
struct _ADDJOB_INFO_1W {LPWSTR Path;DWORD JobId;};
struct _CABINET_INFO_W {PCWSTR CabinetPath;PCWSTR CabinetFile;PCWSTR DiskName;USHORT SetId;USHORT CabinetNumber;};
struct _CAT_MEMBERINFO {LPWSTR pwszSubjGuid;DWORD dwCertVersion;};
struct _DRIVER_INFO_2W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;};
struct _DRIVER_INFO_3W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;LPWSTR pHelpFile;LPWSTR pDependentFiles;LPWSTR pMonitorName;LPWSTR pDefaultDataType;};
struct _DRIVER_INFO_4W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;LPWSTR pHelpFile;LPWSTR pDependentFiles;LPWSTR pMonitorName;LPWSTR pDefaultDataType;LPWSTR pszzPreviousNames;};
struct _DRIVER_INFO_5W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;DWORD dwDriverAttributes;DWORD dwConfigVersion;DWORD dwDriverVersion;};
struct _HD_TEXTFILTERW {LPWSTR pszText;INT cchTextMax;};
struct _SOURCE_MEDIA_W {PCWSTR Reserved;PCWSTR Tagfile;PCWSTR Description;PCWSTR SourcePath;PCWSTR SourceFile;DWORD Flags;};
struct tagMSAAMENUINFO {DWORD dwMSAASignature;DWORD cchWText;LPWSTR pszWText;};
struct _INPUT_RECORD {WORD EventType;union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4 Event;};
struct _NETRESOURCEW {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPWSTR lpLocalName;LPWSTR lpRemoteName;LPWSTR lpComment;LPWSTR lpProvider;};
struct _PORT_INFO_2W {LPWSTR pPortName;LPWSTR pMonitorName;LPWSTR pDescription;DWORD fPortType;DWORD Reserved;};
struct _PORT_INFO_3W {DWORD dwStatus;LPWSTR pszStatus;DWORD dwSeverity;};
struct _currencyfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPWSTR lpCurrencySymbol;};
typedef int ( *ICMENUMPROCW)(LPWSTR, LPARAM);
typedef DWORD  PM_OPEN_PROC(LPWSTR);
struct _DEBUG_EVENT {DWORD dwDebugEventCode;DWORD dwProcessId;DWORD dwThreadId;union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 u;};
struct _DOC_INFO_2W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;DWORD dwMode;DWORD JobId;};
struct _DOC_INFO_3W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;DWORD dwFlags;};
struct tagHH_AKLINK {int cbStruct;BOOL fReserved;LPCTSTR pszKeywords;LPCTSTR pszUrl;LPCTSTR pszMsgText;LPCTSTR pszMsgTitle;LPCTSTR pszWindow;BOOL fIndexOnFail;};
struct tagLVCOLUMNW {UINT mask;int fmt;int cx;LPWSTR pszText;int cchTextMax;int iSubItem;int iImage;int iOrder;};
struct tagPARAMDATA {OLECHAR *szName;VARTYPE vt;};
struct _GDI_OBJECT {DWORD ObjectType;union _GDI_OBJECT____MIDL_IAdviseSink_0002 u;};
struct _OEMUIPROCS {PFN_DrvGetDriverSetting DrvGetDriverSetting;PFN_DrvUpdateUISetting DrvUpdateUISetting;};
struct _numberfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;};
struct sockaddr_in {short sin_family;u_short sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct tagCALPWSTR {ULONG cElems;LPWSTR *pElems;};
struct tagPICTDESC {UINT cbSizeofstruct;UINT picType;tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D __anonymous0;};
struct tagRAWINPUT {RAWINPUTHEADER header;union tagRAWINPUT___B145025D4CA0B4EFAFBBD6E93F901CD9 data;};
struct tagTYPEDESC {tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 __anonymous0;VARTYPE vt;};
struct _xml_error {unsigned int _nLine;BSTR _pchBuf;unsigned int _cchBuf;unsigned int _ich;BSTR _pszFound;BSTR _pszExpected;DWORD _reserved1;DWORD _reserved2;};
struct mmtime_tag {UINT wType;union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 u;};
struct tagLVGROUP {UINT cbSize;UINT mask;LPWSTR pszHeader;int cchHeader;LPWSTR pszFooter;int cchFooter;int iGroupId;UINT stateMask;UINT state;UINT uAlign;};
struct SPC_LINK_ {DWORD dwLinkChoice;SPC_LINK____5823D59480DB17DC94F0503486FD38F0 __anonymous0;};
struct _DOCINFOW {int cbSize;LPCWSTR lpszDocName;LPCWSTR lpszOutput;LPCWSTR lpszDatatype;DWORD fwType;};
struct _NS_INFOW {DWORD dwNameSpace;DWORD dwNameSpaceFlags;LPWSTR lpNameSpace;};
struct tagCABSTR {ULONG cElems;BSTR *pElems;};
struct tagINPUT {DWORD type;tagINPUT___72687D791E298366090936F57062F9D6 __anonymous0;};
struct _STRRET {UINT uType;_STRRET___CBA4CBE4EE73FCDBDFD08B2527F2F26D __anonymous0;};
struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {DWORD ulFlags;DWORD ulEncodedAssemblyIdentityLength;DWORD ulManifestPathType;DWORD ulManifestPathLength;LARGE_INTEGER liManifestLastWriteTime;DWORD ulPolicyPathType;DWORD ulPolicyPathLength;LARGE_INTEGER liPolicyLastWriteTime;DWORD ulMetadataSatelliteRosterIndex;DWORD ulManifestVersionMajor;DWORD ulManifestVersionMinor;DWORD ulPolicyVersionMajor;DWORD ulPolicyVersionMinor;DWORD ulAssemblyDirectoryNameLength;PCWSTR lpAssemblyEncodedAssemblyIdentity;PCWSTR lpAssemblyManifestPath;PCWSTR lpAssemblyPolicyPath;PCWSTR lpAssemblyDirectoryName;DWORD ulFileCount;};
typedef BOOL ( *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg);
struct _939B1A1D3305CA6F2D0B71D8D29A6AEF {DWORD cbSize;LPWSTR pTitle;LPWSTR pMessage;DWORD Style;DWORD dwTimeout;BOOL bWait;};
typedef void ( *RTL_VERIFIER_DLL_UNLOAD_CALLBACK)(PWSTR DllName, PVOID DllBase, SIZE_T DllSize, PVOID Reserved);
typedef void ( *RTL_VERIFIER_DLL_LOAD_CALLBACK)(PWSTR DllName, PVOID DllBase, SIZE_T DllSize, PVOID Reserved);
struct tagSOLE_AUTHENTICATION_SERVICE {DWORD dwAuthnSvc;DWORD dwAuthzSvc;OLECHAR *pPrincipalName;HRESULT hr;};
struct _CRYPTPROTECT_PROMPTSTRUCT {DWORD cbSize;DWORD dwPromptFlags;HWND hwndApp;LPCWSTR szPrompt;};
struct _CRYPT_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;void *pvGetArg;};
struct _CERT_KEYGEN_REQUEST_INFO {DWORD dwVersion;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;LPWSTR pwszChallengeString;};
struct _CREATE_THREAD_DEBUG_INFO {HANDLE hThread;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;};
struct _SERVICE_FAILURE_ACTIONSW {DWORD dwResetPeriod;LPWSTR lpRebootMsg;LPWSTR lpCommand;DWORD cActions;SC_ACTION *lpsaActions;};
struct tagNMDATETIMEFORMATQUERYW {NMHDR nmhdr;LPCWSTR pszFormat;SIZE szMax;};
struct _PERF_COUNTER_DEFINITION {DWORD ByteLength;DWORD CounterNameTitleIndex;LPWSTR CounterNameTitle;DWORD CounterHelpTitleIndex;LPWSTR CounterHelpTitle;LONG DefaultScale;DWORD DetailLevel;DWORD CounterType;DWORD CounterSize;DWORD CounterOffset;};
struct _SERVICE_TYPE_VALUE_ABSW {DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPWSTR lpValueName;PVOID lpValue;};
struct tagWNODE_SINGLE_INSTANCE {struct _WNODE_HEADER WnodeHeader;ULONG OffsetInstanceName;ULONG InstanceIndex;ULONG DataBlockOffset;ULONG SizeDataBlock;UCHAR VariableData[];};
struct _FILEPATHS_SIGNERINFO_W {PCWSTR Target;PCWSTR Source;UINT Win32Error;DWORD Flags;PCWSTR DigitalSigner;PCWSTR Version;PCWSTR CatalogFile;};
struct _PRINTPROCESSOROPENDATA {PDEVMODE pDevMode;LPWSTR pDatatype;LPWSTR pParameters;LPWSTR pDocumentName;DWORD JobId;LPWSTR pOutputFile;LPWSTR pPrinterName;};
struct _SERVICE_TYPE_INFO_ABSW {LPWSTR lpTypeName;DWORD dwValueCount;SERVICE_TYPE_VALUE_ABSW Values[1];};
struct tagMCI_OVLY_LOAD_PARMSW {DWORD_PTR dwCallback;LPCWSTR lpfilename;RECT rc;};
struct tagMCI_OVLY_SAVE_PARMSW {DWORD_PTR dwCallback;LPCWSTR lpfilename;RECT rc;};
struct tagNMDATETIMEWMKEYDOWNW {NMHDR nmhdr;int nVirtKey;LPCWSTR pszFormat;SYSTEMTIME st;};
struct _CREDENTIAL_ATTRIBUTEW {LPWSTR Keyword;DWORD Flags;DWORD ValueSize;LPBYTE Value;};
typedef BOOL ( *PFN_DrvQuerySpoolType)(DHPDEV dhpdev, LPWSTR pwchType);
typedef int ( *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);
struct _DEVICEPROPERTYHEADER {WORD cbSize;WORD Flags;HANDLE hPrinter;LPTSTR pszPrinterName;};
struct _DOCEVENT_CREATEDCPRE {PWSTR pszDriver;PWSTR pszDevice;PDEVMODEW pdm;BOOL bIC;};
struct _PRINTER_ENUM_VALUESW {LPWSTR pValueName;DWORD cbValueName;DWORD dwType;LPBYTE pData;DWORD cbData;};
typedef UINT ( *PFNRECONCILEPROFILEW)(LPCWSTR pszCentralFile, LPCWSTR pszLocalFile, DWORD dwFlags);
typedef BOOL ( *UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
struct _CRYPT_KEY_PROV_INFO {LPWSTR pwszContainerName;LPWSTR pwszProvName;DWORD dwProvType;DWORD dwFlags;DWORD cProvParam;PCRYPT_KEY_PROV_PARAM rgProvParam;DWORD dwKeySpec;};
struct _DISK_DETECTION_INFO {DWORD SizeOfDetectInfo;DETECTION_TYPE DetectionType;_DISK_DETECTION_INFO___2344D2D0A84D08BC25A5ABEA77F9F68C __anonymous0;};
struct tagWNODE_METHOD_ITEM {struct _WNODE_HEADER WnodeHeader;ULONG OffsetInstanceName;ULONG InstanceIndex;ULONG MethodId;ULONG DataBlockOffset;ULONG SizeDataBlock;UCHAR VariableData[];};
struct tagWNODE_SINGLE_ITEM {struct _WNODE_HEADER WnodeHeader;ULONG OffsetInstanceName;ULONG InstanceIndex;ULONG ItemId;ULONG DataBlockOffset;ULONG SizeDataItem;UCHAR VariableData[];};
typedef BOOL ( *CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL ( *DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
struct IURLSearchHook2Vtbl {HRESULT ( *TranslateWithSearchContext)(IURLSearchHook2 *This, LPWSTR lpwszSearchURL, DWORD cchBufferSize, ISearchContext *pSearchContext);};
struct _BIDI_RESPONSE_DATA {DWORD dwResult;DWORD dwReqNumber;LPWSTR pSchema;BIDI_DATA data;};
struct _CRYPT_CSP_PROVIDER {DWORD dwKeySpec;LPWSTR pwszProviderName;CRYPT_BIT_BLOB Signature;};
typedef LRESULT ( *CAPSTATUSCALLBACKW)(HWND hWnd, int nID, LPCWSTR lpsz);
typedef UINT ( *PFNGETPROFILEPATHW)(LPCWSTR pszUsername, LPWSTR pszBuffer, UINT cbBuffer);
struct _BIDI_REQUEST_DATA {DWORD dwReqNumber;LPWSTR pSchema;BIDI_DATA data;};
struct _PRINTER_DEFAULTSW {LPWSTR pDatatype;LPDEVMODEW pDevMode;ACCESS_MASK DesiredAccess;};
struct _TC_IFC_DESCRIPTOR {ULONG Length;LPWSTR pInterfaceName;LPWSTR pInterfaceID;ADDRESS_LIST_DESCRIPTOR AddressListDesc;};
struct _tagEDITBALLOONTIP {DWORD cbStruct;LPCWSTR pszTitle;LPCWSTR pszText;INT ttiIcon;};
struct tagAASHELLMENUITEM {void *lpReserved1;int iReserved;UINT uiReserved;LPAASHELLMENUFILENAME lpName;LPWSTR psz;};
struct tagMCI_INFO_PARMSW {DWORD_PTR dwCallback;LPWSTR lpstrReturn;DWORD dwRetSize;};
struct tagMCI_OPEN_PARMSW {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;};
struct tagNMTBGETINFOTIPW {NMHDR hdr;LPWSTR pszText;int cchTextMax;int iItem;LPARAM lParam;};
typedef LRESULT ( *CAPERRORCALLBACKW)(HWND hWnd, int nID, LPCWSTR lpsz);
union _IMAGE_AUX_SYMBOL {struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C Sym;struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 File;struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 Section;};
struct _OEMFONTINSTPARAM {DWORD cbSize;HANDLE hPrinter;HANDLE hModule;HANDLE hHeap;DWORD dwFlags;PWSTR pFontInstallerName;};
struct _SPLCLIENT_INFO_1 {DWORD dwSize;LPWSTR pMachineName;LPWSTR pUserName;DWORD dwBuildNum;DWORD dwMajorVersion;DWORD dwMinorVersion;WORD wProcessorArchitecture;};
struct tagWNODE_ALL_DATA {struct _WNODE_HEADER WnodeHeader;ULONG DataBlockOffset;ULONG InstanceCount;ULONG OffsetInstanceNameOffsets;tagWNODE_ALL_DATA___2509F747D046B06D85040055D485D2C5 __anonymous0;};
struct _CMC_STATUS_INFO {DWORD dwStatus;DWORD cBodyList;DWORD *rgdwBodyList;LPWSTR pwszStatusString;DWORD dwOtherInfoChoice;_CMC_STATUS_INFO___7102899B559A8354A70F3F8928772BC0 __anonymous0;};
struct _WSANSClassInfoW {LPWSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct _tagCODEBASEHOLD {ULONG cbSize;LPWSTR szDistUnit;LPWSTR szCodeBase;DWORD dwVersionMS;DWORD dwVersionLS;DWORD dwStyle;};
struct _tagSOFTDISTINFO {ULONG cbSize;DWORD dwFlags;DWORD dwAdState;LPWSTR szTitle;LPWSTR szAbstract;LPWSTR szHREF;DWORD dwInstalledVersionMS;DWORD dwInstalledVersionLS;DWORD dwUpdateVersionMS;DWORD dwUpdateVersionLS;DWORD dwAdvertisedVersionMS;DWORD dwAdvertisedVersionLS;DWORD dwReserved;};
struct tagHIGHCONTRASTW {UINT cbSize;DWORD dwFlags;LPWSTR lpszDefaultScheme;};
struct tagStorageLayout {DWORD LayoutType;OLECHAR *pwcsElementName;LARGE_INTEGER cOffset;LARGE_INTEGER cBytes;};
struct _DISCDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPWSTR lpLocalName;LPWSTR lpRemoteName;DWORD dwFlags;};
struct _PROTOCOL_INFOW {DWORD dwServiceFlags;INT iAddressFamily;INT iMaxSockAddr;INT iMinSockAddr;INT iSocketType;INT iProtocol;DWORD dwMessageSize;LPWSTR lpProtocol;};
struct tagCATEGORYINFO {CATID catid;LCID lcid;OLECHAR szDescription[128];};
struct tagHH_FTS_QUERY {int cbStruct;BOOL fUniCodeStrings;LPCTSTR pszSearchQuery;LONG iProximity;BOOL fStemmedSearch;BOOL fTitleOnly;BOOL fExecute;LPCTSTR pszWindow;};
struct tagLVSETINFOTIP {UINT cbSize;DWORD dwFlags;LPWSTR pszText;int iItem;int iSubItem;};
struct tagSOUNDSENTRYW {UINT cbSize;DWORD dwFlags;DWORD iFSTextEffect;DWORD iFSTextEffectMSec;DWORD iFSTextEffectColorBits;DWORD iFSGrafEffect;DWORD iFSGrafEffectMSec;DWORD iFSGrafEffectColor;DWORD iWindowsEffect;DWORD iWindowsEffectMSec;LPWSTR lpszWindowsEffectDLL;DWORD iWindowsEffectOrdinal;};
struct _CAT_NAMEVALUE {LPWSTR pwszTag;DWORD fdwFlags;CRYPT_DATA_BLOB Value;};
struct _PORT_INFO_FFW {LPWSTR pName;DWORD cbMonitorData;LPBYTE pMonitorData;};
struct tagSERIALKEYSW {UINT cbSize;DWORD dwFlags;LPWSTR lpszActivePort;LPWSTR lpszPort;UINT iBaudRate;UINT iPortState;UINT iActive;};
typedef BOOL ( *NAMEENUMPROCW)(LPWSTR, LPARAM);
struct _COSERVERINFO {DWORD dwReserved1;LPWSTR pwszName;COAUTHINFO *pAuthInfo;DWORD dwReserved2;};
struct provider_info {PQUERYHANDLER pi_R0_1val;PQUERYHANDLER pi_R0_allvals;PQUERYHANDLER pi_R3_1val;PQUERYHANDLER pi_R3_allvals;DWORD pi_flags;LPVOID pi_key_context;};
struct _FILEPATHS_W {PCWSTR Target;PCWSTR Source;UINT Win32Error;DWORD Flags;};
struct _JOB_INFO_1W {DWORD JobId;LPWSTR pPrinterName;LPWSTR pMachineName;LPWSTR pUserName;LPWSTR pDocument;LPWSTR pDatatype;LPWSTR pStatus;DWORD Status;DWORD Priority;DWORD Position;DWORD TotalPages;DWORD PagesPrinted;SYSTEMTIME Submitted;};
struct _wireVARIANT {DWORD clSize;DWORD rpcReserved;USHORT vt;USHORT wReserved1;USHORT wReserved2;USHORT wReserved3;_wireVARIANT___BE66B252C7DCDEBB95D6D0C528AEDF22 __anonymous0;};
struct tagPOLYTEXTW {int x;int y;UINT n;LPCWSTR lpstr;UINT uiFlags;RECT rcl;int *pdx;};
struct _COAUTHINFO {DWORD dwAuthnSvc;DWORD dwAuthzSvc;LPWSTR pwszServerPrincName;DWORD dwAuthnLevel;DWORD dwImpersonationLevel;COAUTHIDENTITY *pAuthIdentityData;DWORD dwCapabilities;};
struct tagTVSORTCB {HTREEITEM hParent;PFNTVCOMPARE lpfnCompare;LPARAM lParam;};
typedef BOOL ( *RASADFUNCW)(LPWSTR, LPWSTR, struct tagRASADPARAMS *, LPDWORD);
struct _EXTCHKBOX {WORD cbSize;WORD Flags;LPTSTR pTitle;LPTSTR pSeparator;LPTSTR pCheckedName;ULONG_PTR IconID;WORD wReserved[4];ULONG_PTR dwReserved[2];};
struct _OFNOTIFYW {NMHDR hdr;LPOPENFILENAMEW lpOFN;LPWSTR pszFile;};
struct value_entW {LPWSTR ve_valuename;DWORD ve_valuelen;DWORD_PTR ve_valueptr;DWORD ve_type;};
struct _CPS_URLS {LPWSTR pszURL;CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;CRYPT_DATA_BLOB *pDigest;};
struct _LIGATURE {ULONG culSize;LPWSTR pwsz;ULONG chglyph;HGLYPH ahglyph[1];};
struct _PSPINFO {WORD cbSize;WORD wReserved;HANDLE hComPropSheet;HANDLE hCPSUIPage;PFNCOMPROPSHEET pfnComPropSheet;};
struct pvalueW {LPWSTR pv_valuename;int pv_valuelen;LPVOID pv_value_context;DWORD pv_type;};
union tagRPC_EE_INFO_PARAM___A3FD93C0502A9420CA2CBD32041223FD {LPSTR AnsiString;LPWSTR UnicodeString;int LVal;short SVal;ULONGLONG PVal;BinaryParam BVal;};
union _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655 {struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___59AFAA6F9F17F2AA385AB5E28054F780 WindowMessage;struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___1D5E47AA0A419EF9D9DA6D4AA01777EC Event;struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___C9F2A79EEE81C8CFC776F7DA83E58678 Apc;struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___B971492F433B977CE6769B3AAD780315 Port;};
struct IWbemDecoupledBasicEventProviderVtbl {HRESULT ( *QueryInterface)(IWbemDecoupledBasicEventProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemDecoupledBasicEventProvider *This);ULONG ( *Release)(IWbemDecoupledBasicEventProvider *This);HRESULT ( *Register)(IWbemDecoupledBasicEventProvider *This, int a_Flags, IWbemContext *a_Context, LPCWSTR a_User, LPCWSTR a_Locale, LPCWSTR a_Scope, LPCWSTR a_Registration, IUnknown *a_Unknown);HRESULT ( *UnRegister)(IWbemDecoupledBasicEventProvider *This);HRESULT ( *GetSink)(IWbemDecoupledBasicEventProvider *This, int a_Flags, IWbemContext *a_Context, IWbemObjectSink **a_Sink);HRESULT ( *GetServiceA)(IWbemDecoupledBasicEventProvider *This, int a_Flags, IWbemContext *a_Context, IWbemServices **a_Service);};
struct _068AF82868DFBF98C4A3A88443B401AE {DWORD cbSize;HWND hwndOwner;int iShow;DWORD dwFlags;RECT rect;IUnknown *punkRel;OLECHAR strNewFile[260];};
struct _1C7B1951FFF3947E82177A9E3997A43B {NMHDR hdr;DWORD dwMask;int idCommand;DWORD_PTR lParam;int iImage;LPWSTR pszText;int cchText;};
struct _B80B7D01E79FADDB4AAC58DE22BC823F {LPCWSTR szReader;LPVOID pvUserData;DWORD dwCurrentState;DWORD dwEventState;DWORD cbAtr;BYTE rgbAtr[36];};
struct _EC893833BD5056AD53916225206BDC9F {DWORD dwSize;DWORD dwMask;SHELLVIEWID *pvid;LPWSTR pszWebViewTemplate;DWORD cchWebViewTemplate;LPWSTR pszWebViewTemplateVersion;LPWSTR pszInfoTip;DWORD cchInfoTip;CLSID *pclsid;DWORD dwFlags;LPWSTR pszIconFile;DWORD cchIconFile;int iIconIndex;LPWSTR pszLogo;DWORD cchLogo;};
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;DWORD dwRecipientIndex;DWORD dwKeyChoice;_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 __anonymous0;};
struct IWbemEventProviderQuerySinkVtbl {HRESULT ( *QueryInterface)(IWbemEventProviderQuerySink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemEventProviderQuerySink *This);ULONG ( *Release)(IWbemEventProviderQuerySink *This);HRESULT ( *NewQuery)(IWbemEventProviderQuerySink *This, unsigned int dwId, WBEM_WSTR wszQueryLanguage, WBEM_WSTR wszQuery);HRESULT ( *CancelQuery)(IWbemEventProviderQuerySink *This, unsigned int dwId);};
struct _CREDENTIAL_TARGET_INFORMATIONW {LPWSTR TargetName;LPWSTR NetbiosServerName;LPWSTR DnsServerName;LPWSTR NetbiosDomainName;LPWSTR DnsDomainName;LPWSTR DnsTreeName;LPWSTR PackageName;ULONG Flags;DWORD CredTypeCount;LPDWORD CredTypes;};
typedef BOOL ( *PFN_CERT_ENUM_PHYSICAL_STORE)( void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
struct _ENCRYPTION_CERTIFICATE_HASH {DWORD cbTotalLength;SID *pUserSid;PEFS_HASH_BLOB pHash;LPWSTR lpDisplayInformation;};
struct _RTL_VERIFIER_DLL_DESCRIPTOR {PWCHAR DllName;DWORD DllFlags;PVOID DllAddress;PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;};
struct _SECURITY_QUALITY_OF_SERVICE {DWORD Length;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;BOOLEAN EffectiveOnly;};
struct IWbemConfigureRefresherVtbl {HRESULT ( *QueryInterface)(IWbemConfigureRefresher *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemConfigureRefresher *This);ULONG ( *Release)(IWbemConfigureRefresher *This);HRESULT ( *AddObjectByPath)(IWbemConfigureRefresher *This, IWbemServices *pNamespace, LPCWSTR wszPath, int lFlags, IWbemContext *pContext, IWbemClassObject **ppRefreshable, int *plId);HRESULT ( *AddObjectByTemplate)(IWbemConfigureRefresher *This, IWbemServices *pNamespace, IWbemClassObject *pTemplate, int lFlags, IWbemContext *pContext, IWbemClassObject **ppRefreshable, int *plId);HRESULT ( *AddRefresher)(IWbemConfigureRefresher *This, IWbemRefresher *pRefresher, int lFlags, int *plId);HRESULT ( *Remove)(IWbemConfigureRefresher *This, int lId, int lFlags);HRESULT ( *AddEnum)(IWbemConfigureRefresher *This, IWbemServices *pNamespace, LPCWSTR wszClassName, int lFlags, IWbemContext *pContext, IWbemHiPerfEnum **ppEnum, int *plId);};
struct IWbemDecoupledRegistrarVtbl {HRESULT ( *QueryInterface)(IWbemDecoupledRegistrar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemDecoupledRegistrar *This);ULONG ( *Release)(IWbemDecoupledRegistrar *This);HRESULT ( *Register)(IWbemDecoupledRegistrar *This, int a_Flags, IWbemContext *a_Context, LPCWSTR a_User, LPCWSTR a_Locale, LPCWSTR a_Scope, LPCWSTR a_Registration, IUnknown *a_Unknown);HRESULT ( *UnRegister)(IWbemDecoupledRegistrar *This);};
struct _CRYPT_PKCS8_IMPORT_PARAMS {CRYPT_DIGEST_BLOB PrivateKey;PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;LPVOID pVoidResolveFunc;PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;LPVOID pVoidDecryptFunc;};
struct _CERT_POLICY95_QUALIFIER1 {LPWSTR pszPracticesReference;LPSTR pszNoticeIdentifier;LPSTR pszNSINoticeIdentifier;DWORD cCPSURLs;CPS_URLS *rgCPSURLs;};
struct tagMCI_ANIM_WINDOW_PARMSW {DWORD_PTR dwCallback;HWND hWnd;UINT nCmdShow;LPCWSTR lpstrText;};
struct tagMCI_OVLY_WINDOW_PARMSW {DWORD_PTR dwCallback;HWND hWnd;UINT nCmdShow;LPCWSTR lpstrText;};
struct IWbemBackupRestoreExVtbl {HRESULT ( *QueryInterface)(IWbemBackupRestoreEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemBackupRestoreEx *This);ULONG ( *Release)(IWbemBackupRestoreEx *This);HRESULT ( *Backup)(IWbemBackupRestoreEx *This, LPCWSTR strBackupToFile, int lFlags);HRESULT ( *Restore)(IWbemBackupRestoreEx *This, LPCWSTR strRestoreFromFile, int lFlags);HRESULT ( *Pause)(IWbemBackupRestoreEx *This);HRESULT ( *Resume)(IWbemBackupRestoreEx *This);};
typedef HRESULT ( *LPDIRECTDRAWENUMERATEEXA)(LPDDENUMCALLBACKEXA lpCallback, LPVOID lpContext, DWORD dwFlags);
struct tagWNODE_EVENT_REFERENCE {struct _WNODE_HEADER WnodeHeader;GUID TargetGuid;ULONG TargetDataBlockSize;tagWNODE_EVENT_REFERENCE___35BDACE2D4BA78DD0D25FA8577D99EB2 __anonymous0;};
struct IWbemConnectorLoginVtbl {HRESULT ( *QueryInterface)(IWbemConnectorLogin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemConnectorLogin *This);ULONG ( *Release)(IWbemConnectorLogin *This);HRESULT ( *ConnectorLogin)(IWbemConnectorLogin *This, LPWSTR wszNetworkResource, LPWSTR wszPreferredLocale, int lFlags, IWbemContext *pCtx,  IID * riid, void **pInterface);};
struct _FILE_IN_CABINET_INFO_W {PCWSTR NameInCabinet;DWORD FileSize;DWORD Win32Error;WORD DosDate;WORD DosTime;WORD DosAttribs;WCHAR FullTargetName[260];};
struct tagMCI_WAVE_OPEN_PARMSW {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwBufferSeconds;};
struct IWbemBackupRestoreVtbl {HRESULT ( *QueryInterface)(IWbemBackupRestore *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemBackupRestore *This);ULONG ( *Release)(IWbemBackupRestore *This);HRESULT ( *Backup)(IWbemBackupRestore *This, LPCWSTR strBackupToFile, int lFlags);HRESULT ( *Restore)(IWbemBackupRestore *This, LPCWSTR strRestoreFromFile, int lFlags);};
struct IWbemObjectTextSrcVtbl {HRESULT ( *QueryInterface)(IWbemObjectTextSrc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemObjectTextSrc *This);ULONG ( *Release)(IWbemObjectTextSrc *This);HRESULT ( *GetText)(IWbemObjectTextSrc *This, int lFlags, IWbemClassObject *pObj, ULONG uObjTextFormat, IWbemContext *pCtx, BSTR *strText);HRESULT ( *CreateFromText)(IWbemObjectTextSrc *This, int lFlags, BSTR strText, ULONG uObjTextFormat, IWbemContext *pCtx, IWbemClassObject **pNewObj);};
typedef BOOL ( *PGET_MODULE_HANDLE_EXW)(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);
struct _SP_FILE_COPY_PARAMS_W {DWORD cbSize;HSPFILEQ QueueHandle;PCWSTR SourceRootPath;PCWSTR SourcePath;PCWSTR SourceFilename;PCWSTR SourceDescription;PCWSTR SourceTagfile;PCWSTR TargetDirectory;PCWSTR TargetFilename;DWORD CopyStyle;HINF LayoutInf;PCWSTR SecurityDescriptor;};
typedef INT ( *LPWSCINSTALLNAMESPACE)(LPWSTR lpszIdentifier, LPWSTR lpszPathName, DWORD dwNameSpace, DWORD dwVersion, LPGUID lpProviderId);
struct _WSAServiceClassInfoW {LPGUID lpServiceClassId;LPWSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOW lpClassInfos;};
struct tagMCI_SYSINFO_PARMSW {DWORD_PTR dwCallback;LPWSTR lpstrReturn;DWORD dwRetSize;DWORD dwNumber;UINT wDeviceType;};
struct tagNMDATETIMEFORMATW {NMHDR nmhdr;LPCWSTR pszFormat;SYSTEMTIME st;LPCWSTR pszDisplay;WCHAR szDisplay[64];};
struct tagNMDATETIMESTRINGW {NMHDR nmhdr;LPCWSTR pszUserString;SYSTEMTIME st;DWORD dwFlags;};
struct IHWEventHandlerVtbl {HRESULT ( *QueryInterface)(IHWEventHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHWEventHandler *This);ULONG ( *Release)(IHWEventHandler *This);HRESULT ( *Initialize)(IHWEventHandler *This, LPCWSTR pszParams);HRESULT ( *HandleEvent)(IHWEventHandler *This, LPCWSTR pszDeviceID, LPCWSTR pszAltDeviceID, LPCWSTR pszEventType);HRESULT ( *HandleEventWithContent)(IHWEventHandler *This, LPCWSTR pszDeviceID, LPCWSTR pszAltDeviceID, LPCWSTR pszEventType, LPCWSTR pszContentTypeHandler, IDataObject *pdataobject);};
struct IWbemCallResultVtbl {HRESULT ( *QueryInterface)(IWbemCallResult *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemCallResult *This);ULONG ( *Release)(IWbemCallResult *This);HRESULT ( *GetResultObject)(IWbemCallResult *This, int lTimeout, IWbemClassObject **ppResultObject);HRESULT ( *GetResultString)(IWbemCallResult *This, int lTimeout, BSTR *pstrResultString);HRESULT ( *GetResultServices)(IWbemCallResult *This, int lTimeout, IWbemServices **ppServices);HRESULT ( *GetCallStatus)(IWbemCallResult *This, int lTimeout, int *plStatus);};
struct IWbemObjectSinkVtbl {HRESULT ( *QueryInterface)(IWbemObjectSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemObjectSink *This);ULONG ( *Release)(IWbemObjectSink *This);HRESULT ( *Indicate)(IWbemObjectSink *This, int lObjectCount, IWbemClassObject **apObjArray);HRESULT ( *SetStatus)(IWbemObjectSink *This, int lFlags, HRESULT hResult, BSTR strParam, IWbemClassObject *pObjParam);};
typedef BOOL ( *PFNPROCESSPOLICIESW)(HWND hwnd, LPCWSTR pszPath, LPCWSTR pszUsername, LPCWSTR pszComputerName, DWORD dwFlags);
struct WINTRUST_BLOB_INFO_ {DWORD cbStruct;GUID gSubject;LPCWSTR pcwszDisplayName;DWORD cbMemObject;BYTE *pbMemObject;DWORD cbMemSignedMsg;BYTE *pbMemSignedMsg;};
struct WINTRUST_FILE_INFO_ {DWORD cbStruct;LPCWSTR pcwszFilePath;HANDLE hFile;GUID *pgKnownSubject;};
struct WINTRUST_SGNR_INFO_ {DWORD cbStruct;LPCWSTR pcwszDisplayName;CMSG_SIGNER_INFO *psSignerInfo;DWORD chStores;HCERTSTORE *pahStores;};
struct _WSANAMESPACE_INFOW {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPWSTR lpszIdentifier;};
struct tagMDICREATESTRUCTW {LPCWSTR szClass;LPCWSTR szTitle;HANDLE hOwner;int x;int y;int cx;int cy;DWORD style;LPARAM lParam;};
struct tagCOMBOBOXEXITEMW {UINT mask;INT_PTR iItem;LPWSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int iOverlay;int iIndent;LPARAM lParam;};
struct tagNMLVGETINFOTIPW {NMHDR hdr;DWORD dwFlags;LPWSTR pszText;int cchTextMax;int iItem;int iSubItem;LPARAM lParam;};
struct tagNMTVGETINFOTIPW {NMHDR hdr;LPWSTR pszText;int cchTextMax;HTREEITEM hItem;LPARAM lParam;};
struct IBindProtocolVtbl {HRESULT ( *QueryInterface)(IBindProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindProtocol *This);ULONG ( *Release)(IBindProtocol *This);HRESULT ( *CreateBinding)(IBindProtocol *This, LPCWSTR szUrl, IBindCtx *pbc, IBinding **ppb);};
struct IWbemServicesVtbl {HRESULT ( *QueryInterface)(IWbemServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemServices *This);ULONG ( *Release)(IWbemServices *This);HRESULT ( *OpenNamespace)(IWbemServices *This,  BSTR strNamespace, int lFlags, IWbemContext *pCtx, IWbemServices **ppWorkingNamespace, IWbemCallResult **ppResult);HRESULT ( *CancelAsyncCall)(IWbemServices *This, IWbemObjectSink *pSink);HRESULT ( *QueryObjectSink)(IWbemServices *This, int lFlags, IWbemObjectSink **ppResponseHandler);HRESULT ( *GetObjectA)(IWbemServices *This,  BSTR strObjectPath, int lFlags, IWbemContext *pCtx, IWbemClassObject **ppObject, IWbemCallResult **ppCallResult);HRESULT ( *GetObjectAsync)(IWbemServices *This,  BSTR strObjectPath, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *PutClass)(IWbemServices *This, IWbemClassObject *pObject, int lFlags, IWbemContext *pCtx, IWbemCallResult **ppCallResult);HRESULT ( *PutClassAsync)(IWbemServices *This, IWbemClassObject *pObject, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *DeleteClass)(IWbemServices *This,  BSTR strClass, int lFlags, IWbemContext *pCtx, IWbemCallResult **ppCallResult);HRESULT ( *DeleteClassAsync)(IWbemServices *This,  BSTR strClass, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *CreateClassEnum)(IWbemServices *This,  BSTR strSuperclass, int lFlags, IWbemContext *pCtx, IEnumWbemClassObject **ppEnum);HRESULT ( *CreateClassEnumAsync)(IWbemServices *This,  BSTR strSuperclass, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *PutInstance)(IWbemServices *This, IWbemClassObject *pInst, int lFlags, IWbemContext *pCtx, IWbemCallResult **ppCallResult);HRESULT ( *PutInstanceAsync)(IWbemServices *This, IWbemClassObject *pInst, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *DeleteInstance)(IWbemServices *This,  BSTR strObjectPath, int lFlags, IWbemContext *pCtx, IWbemCallResult **ppCallResult);HRESULT ( *DeleteInstanceAsync)(IWbemServices *This,  BSTR strObjectPath, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *CreateInstanceEnum)(IWbemServices *This,  BSTR strFilter, int lFlags, IWbemContext *pCtx, IEnumWbemClassObject **ppEnum);HRESULT ( *CreateInstanceEnumAsync)(IWbemServices *This,  BSTR strFilter, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *ExecQuery)(IWbemServices *This,  BSTR strQueryLanguage,  BSTR strQuery, int lFlags, IWbemContext *pCtx, IEnumWbemClassObject **ppEnum);HRESULT ( *ExecQueryAsync)(IWbemServices *This,  BSTR strQueryLanguage,  BSTR strQuery, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *ExecNotificationQuery)(IWbemServices *This,  BSTR strQueryLanguage,  BSTR strQuery, int lFlags, IWbemContext *pCtx, IEnumWbemClassObject **ppEnum);HRESULT ( *ExecNotificationQueryAsync)(IWbemServices *This,  BSTR strQueryLanguage,  BSTR strQuery, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pResponseHandler);HRESULT ( *ExecMethod)(IWbemServices *This,  BSTR strObjectPath,  BSTR strMethodName, int lFlags, IWbemContext *pCtx, IWbemClassObject *pInParams, IWbemClassObject **ppOutParams, IWbemCallResult **ppCallResult);HRESULT ( *ExecMethodAsync)(IWbemServices *This,  BSTR strObjectPath,  BSTR strMethodName, int lFlags, IWbemContext *pCtx, IWbemClassObject *pInParams, IWbemObjectSink *pResponseHandler);};
typedef BOOL ( *LPDDENUMCALLBACKW)(GUID *, LPWSTR, LPWSTR, LPVOID);
typedef BOOL ( *LPDSENUMCALLBACKW)(LPGUID, LPCWSTR, LPCWSTR, LPVOID);
struct _PERF_OBJECT_TYPE {DWORD TotalByteLength;DWORD DefinitionLength;DWORD HeaderLength;DWORD ObjectNameTitleIndex;LPWSTR ObjectNameTitle;DWORD ObjectHelpTitleIndex;LPWSTR ObjectHelpTitle;DWORD DetailLevel;DWORD NumCounters;LONG DefaultCounter;LONG NumInstances;DWORD CodePage;LARGE_INTEGER PerfTime;LARGE_INTEGER PerfFreq;};
typedef BOOL ( *ENUMRESTYPEPROCW)(HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);
struct IWbemLocatorVtbl {HRESULT ( *QueryInterface)(IWbemLocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemLocator *This);ULONG ( *Release)(IWbemLocator *This);HRESULT ( *ConnectServer)(IWbemLocator *This,  BSTR strNetworkResource,  BSTR strUser,  BSTR strPassword,  BSTR strLocale, int lSecurityFlags,  BSTR strAuthority, IWbemContext *pCtx, IWbemServices **ppNamespace);};
struct _PRINTER_INFO_2W {LPWSTR pServerName;LPWSTR pPrinterName;LPWSTR pShareName;LPWSTR pPortName;LPWSTR pDriverName;LPWSTR pComment;LPWSTR pLocation;LPDEVMODEW pDevMode;LPWSTR pSepFile;LPWSTR pPrintProcessor;LPWSTR pDatatype;LPWSTR pParameters;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Attributes;DWORD Priority;DWORD DefaultPriority;DWORD StartTime;DWORD UntilTime;DWORD Status;DWORD cJobs;DWORD AveragePPM;};
struct tagNMHDDISPINFOW {NMHDR hdr;int iItem;UINT mask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
typedef BOOL ( *PFN_DrvStartDoc)(SURFOBJ *pso, LPWSTR pwszDocName, DWORD dwJobId);
typedef DWORD  PM_COLLECT_PROC(LPWSTR, LPVOID *, LPDWORD, LPDWORD);
struct _DRIVER_INFO_6W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;LPWSTR pHelpFile;LPWSTR pDependentFiles;LPWSTR pMonitorName;LPWSTR pDefaultDataType;LPWSTR pszzPreviousNames;FILETIME ftDriverDate;DWORDLONG dwlDriverVersion;LPWSTR pszMfgName;LPWSTR pszOEMUrl;LPWSTR pszHardwareID;LPWSTR pszProvider;};
struct tagGCP_RESULTSA {DWORD lStructSize;LPSTR lpOutString;UINT *lpOrder;int *lpDx;int *lpCaretPos;LPSTR lpClass;LPWSTR lpGlyphs;UINT nGlyphs;int nMaxFit;};
struct tagGCP_RESULTSW {DWORD lStructSize;LPWSTR lpOutString;UINT *lpOrder;int *lpDx;int *lpCaretPos;LPSTR lpClass;LPWSTR lpGlyphs;UINT nGlyphs;int nMaxFit;};
typedef SCARDHANDLE ( *LPOCNCONNPROCW)(SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);
struct tagLVFINDINFOW {UINT flags;LPCWSTR psz;LPARAM lParam;POINT pt;UINT vkDirection;};
typedef int ( *LPWPUQUEUEAPC)(LPWSATHREADID lpThreadId, LPWSAUSERAPC lpfnUserApc, DWORD_PTR dwContext, LPINT lpErrno);
typedef BOOL ( *PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);
struct _CREDUI_INFOW {DWORD cbSize;HWND hwndParent;PCWSTR pszMessageText;PCWSTR pszCaptionText;HBITMAP hbmBanner;};
struct _FORM_INFO_1W {DWORD Flags;LPWSTR pName;SIZEL Size;RECTL ImageableArea;};
struct tagLVBKIMAGEW {ULONG ulFlags;HBITMAP hbm;LPWSTR pszImage;UINT cchImageMax;int xOffsetPercent;int yOffsetPercent;};
struct tagNMTOOLBARW {NMHDR hdr;int iItem;TBBUTTON tbButton;int cchText;LPWSTR pszText;RECT rcButton;};
struct tagTVITEMEXW {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;int iIntegral;};
struct tagLVITEMW {UINT mask;int iItem;int iSubItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;int iIndent;int iGroupId;UINT cColumns;PUINT puColumns;};
struct tagTCITEMW {UINT mask;DWORD dwState;DWORD dwStateMask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct tagTVITEMW {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;};
struct _HD_ITEMW {UINT mask;int cxy;LPWSTR pszText;HBITMAP hbm;int cchTextMax;int fmt;LPARAM lParam;int iImage;int iOrder;UINT type;void *pvFilter;};
struct _OIEXT {WORD cbSize;WORD Flags;HINSTANCE hInstCaller;LPTSTR pHelpFile;ULONG_PTR dwReserved[4];};
union _CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676 {PCERT_OTHER_NAME pOtherName;LPWSTR pwszRfc822Name;LPWSTR pwszDNSName;CERT_NAME_BLOB DirectoryName;LPWSTR pwszURL;CRYPT_DATA_BLOB IPAddress;LPSTR pszRegisteredID;};
union _BIDI_DATA___576ECEF05A6845DB2A355826BB89294F {BOOL bData;LONG iData;LPWSTR sData;FLOAT fData;BINARY_CONTAINER biData;};
struct IWbemEventProviderSecurityVtbl {HRESULT ( *QueryInterface)(IWbemEventProviderSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemEventProviderSecurity *This);ULONG ( *Release)(IWbemEventProviderSecurity *This);HRESULT ( *AccessCheck)(IWbemEventProviderSecurity *This, WBEM_CWSTR wszQueryLanguage, WBEM_CWSTR wszQuery, int lSidLength,  BYTE *pSid);};
struct IWbemConstructClassObjectVtbl {HRESULT ( *QueryInterface)(IWbemConstructClassObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemConstructClassObject *This);ULONG ( *Release)(IWbemConstructClassObject *This);HRESULT ( *SetInheritanceChain)(IWbemConstructClassObject *This, int lNumAntecedents, LPWSTR *awszAntecedents);HRESULT ( *SetPropertyOrigin)(IWbemConstructClassObject *This, LPCWSTR wszPropertyName, int lOriginIndex);HRESULT ( *SetMethodOrigin)(IWbemConstructClassObject *This, LPCWSTR wszMethodName, int lOriginIndex);HRESULT ( *SetServerNamespace)(IWbemConstructClassObject *This, LPCWSTR wszServer, LPCWSTR wszNamespace);};
struct IWbemUnsecuredApartmentVtbl {HRESULT ( *QueryInterface)(IWbemUnsecuredApartment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemUnsecuredApartment *This);ULONG ( *Release)(IWbemUnsecuredApartment *This);HRESULT ( *CreateObjectStub)(IWbemUnsecuredApartment *This, IUnknown *pObject, IUnknown **ppStub);HRESULT ( *CreateSinkStub)(IWbemUnsecuredApartment *This, IWbemObjectSink *pSink, DWORD dwFlags, LPCWSTR wszReserved, IWbemObjectSink **ppStub);};
struct IEncodingFilterFactoryVtbl {HRESULT ( *QueryInterface)(IEncodingFilterFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEncodingFilterFactory *This);ULONG ( *Release)(IEncodingFilterFactory *This);HRESULT ( *FindBestFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter **ppDF);HRESULT ( *GetDefaultFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter **ppDF);};
struct _CREATE_PROCESS_DEBUG_INFO {HANDLE hFile;HANDLE hProcess;HANDLE hThread;LPVOID lpBaseOfImage;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;LPVOID lpImageName;WORD fUnicode;};
struct _CRYPT_PKCS8_EXPORT_PARAMS {HCRYPTPROV hCryptProv;DWORD dwKeySpec;LPSTR pszPrivateKeyObjId;PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;LPVOID pVoidEncryptFunc;};
struct tagRPC_EXTENDED_ERROR_INFO {ULONG Version;LPWSTR ComputerName;ULONG ProcessID;union tagRPC_EXTENDED_ERROR_INFO___749E5BDCBED96F03DEF2385A3B61DB7C u;ULONG GeneratingComponent;ULONG Status;USHORT DetectionLocation;USHORT Flags;int NumberOfParameters;RPC_EE_INFO_PARAM Parameters[4];};
struct IActionProgressDialogVtbl {HRESULT ( *QueryInterface)(IActionProgressDialog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActionProgressDialog *This);ULONG ( *Release)(IActionProgressDialog *This);HRESULT ( *Initialize)(IActionProgressDialog *This, SPINITF flags, LPCWSTR pszTitle, LPCWSTR pszCancel);HRESULT ( *Stop)(IActionProgressDialog *This);};
struct IAutoCompleteDropDownVtbl {HRESULT ( *QueryInterface)(IAutoCompleteDropDown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAutoCompleteDropDown *This);ULONG ( *Release)(IAutoCompleteDropDown *This);HRESULT ( *GetDropDownStatus)(IAutoCompleteDropDown *This, DWORD *pdwFlags, LPWSTR *ppwszString);HRESULT ( *ResetEnumerator)(IAutoCompleteDropDown *This);};
struct IWbemPropertyProviderVtbl {HRESULT ( *QueryInterface)(IWbemPropertyProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemPropertyProvider *This);ULONG ( *Release)(IWbemPropertyProvider *This);HRESULT ( *GetProperty)(IWbemPropertyProvider *This, int lFlags,  BSTR strLocale,  BSTR strClassMapping,  BSTR strInstMapping,  BSTR strPropMapping, VARIANT *pvValue);HRESULT ( *PutProperty)(IWbemPropertyProvider *This, int lFlags,  BSTR strLocale,  BSTR strClassMapping,  BSTR strInstMapping,  BSTR strPropMapping,  VARIANT *pvValue);};
typedef BOOL ( *LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
struct IQueryCancelAutoPlayVtbl {HRESULT ( *QueryInterface)(IQueryCancelAutoPlay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQueryCancelAutoPlay *This);ULONG ( *Release)(IQueryCancelAutoPlay *This);HRESULT ( *AllowAutoPlay)(IQueryCancelAutoPlay *This, LPCWSTR pszPath, DWORD dwContentType, LPCWSTR pszLabel, DWORD dwSerialNumber);};
struct _PROPSHEETUI_INFO_HEADER {WORD cbSize;WORD Flags;LPTSTR pTitle;HWND hWndParent;HINSTANCE hInst;_PROPSHEETUI_INFO_HEADER___88E50736DABF366776B5B85D748FD16D __anonymous0;};
struct IWbemHiPerfProviderVtbl {HRESULT ( *QueryInterface)(IWbemHiPerfProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemHiPerfProvider *This);ULONG ( *Release)(IWbemHiPerfProvider *This);HRESULT ( *QueryInstances)(IWbemHiPerfProvider *This, IWbemServices *pNamespace, WCHAR *wszClass, int lFlags, IWbemContext *pCtx, IWbemObjectSink *pSink);HRESULT ( *CreateRefresher)(IWbemHiPerfProvider *This, IWbemServices *pNamespace, int lFlags, IWbemRefresher **ppRefresher);HRESULT ( *CreateRefreshableObject)(IWbemHiPerfProvider *This, IWbemServices *pNamespace, IWbemObjectAccess *pTemplate, IWbemRefresher *pRefresher, int lFlags, IWbemContext *pContext, IWbemObjectAccess **ppRefreshable, int *plId);HRESULT ( *StopRefreshing)(IWbemHiPerfProvider *This, IWbemRefresher *pRefresher, int lId, int lFlags);HRESULT ( *CreateRefreshableEnum)(IWbemHiPerfProvider *This, IWbemServices *pNamespace, LPCWSTR wszClass, IWbemRefresher *pRefresher, int lFlags, IWbemContext *pContext, IWbemHiPerfEnum *pHiPerfEnum, int *plId);HRESULT ( *GetObjects)(IWbemHiPerfProvider *This, IWbemServices *pNamespace, int lNumObjects, IWbemObjectAccess **apObj, int lFlags, IWbemContext *pContext);};
struct IWbemStatusCodeTextVtbl {HRESULT ( *QueryInterface)(IWbemStatusCodeText *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemStatusCodeText *This);ULONG ( *Release)(IWbemStatusCodeText *This);HRESULT ( *GetErrorCodeText)(IWbemStatusCodeText *This, HRESULT hRes, LCID LocaleId, int lFlags, BSTR *MessageText);HRESULT ( *GetFacilityCodeText)(IWbemStatusCodeText *This, HRESULT hRes, LCID LocaleId, int lFlags, BSTR *MessageText);};
typedef BOOL ( *LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL ( *PFN_CRYPT_ENUM_OID_FUNC)(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue,  DWORD  *    rgdwValueType,  LPCWSTR  *    rgpwszValueName,  BYTE * rgpbValueData[],  DWORD  *    rgcbValueData, void *pvArg);
struct _DOCUMENTPROPERTYHEADER {WORD cbSize;WORD Reserved;HANDLE hPrinter;LPTSTR pszPrinterName;PDEVMODE pdmIn;PDEVMODE pdmOut;DWORD cbOut;DWORD fMode;};
struct tagMCI_ANIM_OPEN_PARMSW {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct tagMCI_OVLY_OPEN_PARMSW {DWORD_PTR dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct WINTRUST_CATALOG_INFO_ {DWORD cbStruct;DWORD dwCatalogVersion;LPCWSTR pcwszCatalogFilePath;LPCWSTR pcwszMemberTag;LPCWSTR pcwszMemberFilePath;HANDLE hMemberFile;BYTE *pbCalculatedFileHash;DWORD cbCalculatedFileHash;PCCTL_CONTEXT pcCatalogContext;};
struct IWbemProviderInitVtbl {HRESULT ( *QueryInterface)(IWbemProviderInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemProviderInit *This);ULONG ( *Release)(IWbemProviderInit *This);HRESULT ( *Initialize)(IWbemProviderInit *This, LPWSTR wszUser, LONG lFlags, LPWSTR wszNamespace, LPWSTR wszLocale, IWbemServices *pNamespace, IWbemContext *pCtx, IWbemProviderInitSink *pInitSink);};
struct INamespaceWalkCBVtbl {HRESULT ( *QueryInterface)(INamespaceWalkCB *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INamespaceWalkCB *This);ULONG ( *Release)(INamespaceWalkCB *This);HRESULT ( *FoundItem)(INamespaceWalkCB *This, IShellFolder *psf, LPCITEMIDLIST pidl);HRESULT ( *EnterFolder)(INamespaceWalkCB *This, IShellFolder *psf, LPCITEMIDLIST pidl);HRESULT ( *LeaveFolder)(INamespaceWalkCB *This, IShellFolder *psf, LPCITEMIDLIST pidl);HRESULT ( *InitializeProgressDialog)(INamespaceWalkCB *This, LPWSTR *ppszTitle, LPWSTR *ppszCancel);};
typedef INT ( *LPWSPSTRINGTOADDRESS)(LPWSTR AddressString, INT AddressFamily, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPSOCKADDR lpAddress, LPINT lpAddressLength, LPINT lpErrno);
struct IClientSecurityVtbl {HRESULT ( *QueryInterface)(IClientSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClientSecurity *This);ULONG ( *Release)(IClientSecurity *This);HRESULT ( *QueryBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pAuthInfo, DWORD *pCapabilites);HRESULT ( *SetBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthInfo, DWORD dwCapabilities);HRESULT ( *CopyProxy)(IClientSecurity *This, IUnknown *pProxy, IUnknown **ppCopy);};
struct IItemNameLimitsVtbl {HRESULT ( *QueryInterface)(IItemNameLimits *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IItemNameLimits *This);ULONG ( *Release)(IItemNameLimits *This);HRESULT ( *GetValidCharacters)(IItemNameLimits *This, LPWSTR *ppwszValidChars, LPWSTR *ppwszInvalidChars);HRESULT ( *GetMaxLength)(IItemNameLimits *This, LPCWSTR pszName, int *piMaxNameLen);};
struct IRemoteComputerVtbl {HRESULT ( *QueryInterface)(IRemoteComputer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteComputer *This);ULONG ( *Release)(IRemoteComputer *This);HRESULT ( *Initialize)(IRemoteComputer *This, LPCWSTR pszMachine, BOOL bEnumerating);};
typedef BOOL ( *LPDDENUMCALLBACKEXW)(GUID *, LPWSTR, LPWSTR, LPVOID, HMONITOR);
struct WINTRUST_CERT_INFO_ {DWORD cbStruct;LPCWSTR pcwszDisplayName;CERT_CONTEXT *psCertContext;DWORD chStores;HCERTSTORE *pahStores;DWORD dwFlags;FILETIME *psftVerifyAsOf;};
struct _DEVQUERYPRINT_INFO {WORD cbSize;WORD Level;HANDLE hPrinter;DEVMODE *pDevMode;LPTSTR pszErrorStr;DWORD cchErrorStr;DWORD cchNeeded;};
struct IOplockStorageVtbl {HRESULT ( *QueryInterface)(IOplockStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOplockStorage *This);ULONG ( *Release)(IOplockStorage *This);HRESULT ( *CreateStorageEx)(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs,  IID * riid, void **ppstgOpen);HRESULT ( *OpenStorageEx)(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs,  IID * riid, void **ppstgOpen);};
struct ISearchContextVtbl {HRESULT ( *QueryInterface)(ISearchContext *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ISearchContext *This);ULONG ( *Release)(ISearchContext *This);HRESULT ( *GetSearchUrl)(ISearchContext *This, BSTR *pbstrSearchUrl);HRESULT ( *GetSearchText)(ISearchContext *This, BSTR *pbstrSearchText);HRESULT ( *GetSearchStyle)(ISearchContext *This, DWORD *pdwSearchStyle);};
struct IURLSearchHookVtbl {HRESULT ( *QueryInterface)(IURLSearchHook *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IURLSearchHook *This);ULONG ( *Release)(IURLSearchHook *This);HRESULT ( *Translate)(IURLSearchHook *This, LPWSTR lpwszSearchURL, DWORD cchBufferSize);};
struct IAuthenticateVtbl {HRESULT ( *QueryInterface)(IAuthenticate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAuthenticate *This);ULONG ( *Release)(IAuthenticate *This);HRESULT ( *Authenticate)(IAuthenticate *This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword);};
typedef BOOL ( *ENUMRESLANGPROCW)(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
typedef BOOL ( *ENUMRESNAMEPROCW)(HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
struct IMonikerPropVtbl {HRESULT ( *QueryInterface)(IMonikerProp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMonikerProp *This);ULONG ( *Release)(IMonikerProp *This);HRESULT ( *PutProperty)(IMonikerProp *This, MONIKERPROPERTY mkp, LPCWSTR val);};
struct tagMENUITEMINFOW {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;ULONG_PTR dwItemData;LPWSTR dwTypeData;UINT cch;HBITMAP hbmpItem;};
typedef BOOL ( *PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);
typedef DWORD ( *RasCustomDialFn)(HINSTANCE hInstDll, struct tagRASDIALEXTENSIONS *lpRasDialExtensions, LPCWSTR lpszPhonebook, struct tagRASDIALPARAMSA *lpRasDialParams, DWORD dwNotifierType, LPVOID lpvNotifier, HRASCONN *lphRasConn, DWORD dwFlags);
struct _CRYPT_OID_INFO {DWORD cbSize;LPCSTR pszOID;LPCWSTR pwszName;DWORD dwGroupId;_CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 __anonymous0;CRYPT_DATA_BLOB ExtraInfo;};
struct _tagRemBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;REMSECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
struct _NETRESOURCE2W {DWORD dwScope;DWORD dwType;DWORD dwUsage;DWORD dwDisplayType;LPWSTR lpLocalName;LPWSTR lpRemoteName;LPWSTR lpComment;NS_INFO ns_info;GUID ServiceType;DWORD dwProtocols;LPINT lpiProtocols;};
struct _SERVICE_INFOW {LPGUID lpServiceType;LPWSTR lpServiceName;LPWSTR lpComment;LPWSTR lpLocale;DWORD dwDisplayHint;DWORD dwVersion;DWORD dwTime;LPWSTR lpMachineName;LPSERVICE_ADDRESSES lpServiceAddress;BLOB ServiceSpecificInfo;};
struct _CPSUICBPARAM {WORD cbSize;WORD Reason;HWND hDlg;POPTITEM pOptItem;WORD cOptItem;WORD Flags;POPTITEM pCurItem;_CPSUICBPARAM___7FE1AA947C56968AF3B960F56128DB37 __anonymous0;ULONG_PTR UserData;ULONG_PTR Result;};
struct _STARTUPINFOW {DWORD cb;LPWSTR lpReserved;LPWSTR lpDesktop;LPWSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
struct _CREDENTIALW {DWORD Flags;DWORD Type;LPWSTR TargetName;LPWSTR Comment;FILETIME LastWritten;DWORD CredentialBlobSize;LPBYTE CredentialBlob;DWORD Persist;DWORD AttributeCount;PCREDENTIAL_ATTRIBUTEW Attributes;LPWSTR TargetAlias;LPWSTR UserName;};
struct _JOB_INFO_2W {DWORD JobId;LPWSTR pPrinterName;LPWSTR pMachineName;LPWSTR pUserName;LPWSTR pDocument;LPWSTR pNotifyName;LPWSTR pDatatype;LPWSTR pPrintProcessor;LPWSTR pParameters;LPWSTR pDriverName;LPDEVMODEW pDevMode;LPWSTR pStatus;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Status;DWORD Priority;DWORD Position;DWORD StartTime;DWORD UntilTime;DWORD TotalPages;DWORD Size;SYSTEMTIME Submitted;DWORD Time;DWORD PagesPrinted;};
struct _MONITORINIT {DWORD cbSize;HANDLE hSpooler;HANDLE hckRegistryRoot;PMONITORREG pMonitorReg;BOOL bLocal;LPCWSTR pszServerName;};
struct IUrlMonVtbl {HRESULT ( *QueryInterface)(IUrlMon *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlMon *This);ULONG ( *Release)(IUrlMon *This);HRESULT ( *AsyncGetClassBits)(IUrlMon *This,  IID * rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx *pbc, DWORD dwClassContext,  IID * riid, DWORD flags);};
struct _DRAGINFOW {UINT uSize;POINT pt;BOOL fNC;LPWSTR lpFileList;DWORD grfKeyState;};
struct _MONITORUI {DWORD dwMonitorUISize;BOOL ( *pfnAddPortUI)(PCWSTR pszServer, HWND hWnd, PCWSTR pszMonitorNameIn, PWSTR *ppszPortNameOut);BOOL ( *pfnConfigurePortUI)(PCWSTR pName, HWND hWnd, PCWSTR pPortName);BOOL ( *pfnDeletePortUI)(PCWSTR pszServer, HWND hWnd, PCWSTR pszPortName);};
struct _OPTPARAM {WORD cbSize;BYTE Flags;BYTE Style;LPTSTR pData;ULONG_PTR IconID;LPARAM lParam;ULONG_PTR dwReserved[2];};
struct _DLGPAGE {WORD cbSize;WORD Flags;DLGPROC DlgProc;LPTSTR pTabName;ULONG_PTR IconID;_DLGPAGE___81D8EEF2744445A9EE82E88354D6B45B __anonymous0;};
struct _EXTPUSH {WORD cbSize;WORD Flags;LPTSTR pTitle;_EXTPUSH___7C7FF14AAA7F2F0CB53D652B0FC528B5 __anonymous0;ULONG_PTR IconID;_DLGPAGE___81D8EEF2744445A9EE82E88354D6B45B __anonymous1;ULONG_PTR dwReserved[3];};
struct _STROBJ {ULONG cGlyphs;FLONG flAccel;ULONG ulCharInc;RECTL rclBkGround;GLYPHPOS *pgp;LPWSTR pwszOrg;};
struct IWbemClientConnectionTransportVtbl {HRESULT ( *QueryInterface)(IWbemClientConnectionTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemClientConnectionTransport *This);ULONG ( *Release)(IWbemClientConnectionTransport *This);HRESULT ( *Open)(IWbemClientConnectionTransport *This, BSTR strAddressType, DWORD dwBinaryAddressLength, BYTE *abBinaryAddress,  BSTR strObject,  BSTR strUser,  BSTR strPassword,  BSTR strLocale, int lFlags, IWbemContext *pCtx,  IID * riid, void **pInterface, IWbemCallResult **pCallRes);HRESULT ( *OpenAsync)(IWbemClientConnectionTransport *This, BSTR strAddressType, DWORD dwBinaryAddressLength, BYTE *abBinaryAddress,  BSTR strObject,  BSTR strUser,  BSTR strPassword,  BSTR strLocale, int lFlags, IWbemContext *pCtx,  IID * riid, IWbemObjectSink *pResponseHandler);HRESULT ( *Cancel)(IWbemClientConnectionTransport *This, int lFlags, IWbemObjectSink *pHandler);};
struct _AA1FD51437B6FE081639C5575C92216B {UINT cbSize;DWORD dwMask;int idCommand;int iImage;BYTE fsState;BYTE fsStyle;WORD cx;DWORD_PTR lParam;LPWSTR pszText;int cchText;};
struct IShellIconOverlayIdentifierVtbl {HRESULT ( *QueryInterface)(IShellIconOverlayIdentifier *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellIconOverlayIdentifier *This);ULONG ( *Release)(IShellIconOverlayIdentifier *This);HRESULT ( *IsMemberOf)(IShellIconOverlayIdentifier *This, LPCWSTR pwszPath, DWORD dwAttrib);HRESULT ( *GetOverlayInfo)(IShellIconOverlayIdentifier *This, LPWSTR pwszIconFile, int cchMax, int *pIndex, DWORD *pdwFlags);HRESULT ( *GetPriority)(IShellIconOverlayIdentifier *This, int *pIPriority);};
struct ICurrentWorkingDirectoryVtbl {HRESULT ( *QueryInterface)(ICurrentWorkingDirectory *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICurrentWorkingDirectory *This);ULONG ( *Release)(ICurrentWorkingDirectory *This);HRESULT ( *GetDirectory)(ICurrentWorkingDirectory *This, LPWSTR pwzPath, DWORD cchSize);HRESULT ( *SetDirectory)(ICurrentWorkingDirectory *This, LPCWSTR pwzPath);};
struct IShellIconOverlayManagerVtbl {HRESULT ( *QueryInterface)(IShellIconOverlayManager *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellIconOverlayManager *This);ULONG ( *Release)(IShellIconOverlayManager *This);HRESULT ( *GetFileOverlayInfo)(IShellIconOverlayManager *This, LPCWSTR pwszPath, DWORD dwAttrib, int *pIndex, DWORD dwflags);HRESULT ( *GetReservedOverlayInfo)(IShellIconOverlayManager *This, LPCWSTR pwszPath, DWORD dwAttrib, int *pIndex, DWORD dwflags, int iReservedID);HRESULT ( *RefreshOverlayImages)(IShellIconOverlayManager *This, DWORD dwFlags);HRESULT ( *LoadNonloadedOverlayIdentifiers)(IShellIconOverlayManager *This);HRESULT ( *OverlayIndexFromImageIndex)(IShellIconOverlayManager *This, int iImage, int *piIndex, BOOL fAdd);};
struct IDirectMusicCollectionVtbl {HRESULT ( *QueryInterface)(IDirectMusicCollection *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicCollection *This);ULONG ( *Release)(IDirectMusicCollection *This);HRESULT ( *GetInstrument)(IDirectMusicCollection *This, DWORD dwPatch, IDirectMusicInstrument **ppInstrument);HRESULT ( *EnumInstrument)(IDirectMusicCollection *This, DWORD dwIndex, DWORD *pdwPatch, LPWSTR pwszName, DWORD dwNameLen);};
struct IWbemAddressResolutionVtbl {HRESULT ( *QueryInterface)(IWbemAddressResolution *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemAddressResolution *This);ULONG ( *Release)(IWbemAddressResolution *This);HRESULT ( *Resolve)(IWbemAddressResolution *This, LPWSTR wszNamespacePath, LPWSTR wszAddressType, DWORD *pdwAddressLength, BYTE **pabBinaryAddress);};
struct _WINDBG_OLD_EXTENSION_APIS {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION lpGetExpressionRoutine;PWINDBG_GET_SYMBOL lpGetSymbolRoutine;PWINDBG_DISASM lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;};
struct IInternetProtocolSinkVtbl {HRESULT ( *QueryInterface)(IInternetProtocolSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolSink *This);ULONG ( *Release)(IInternetProtocolSink *This);HRESULT ( *Switch)(IInternetProtocolSink *This, PROTOCOLDATA *pProtocolData);HRESULT ( *ReportProgress)(IInternetProtocolSink *This, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *ReportData)(IInternetProtocolSink *This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax);HRESULT ( *ReportResult)(IInternetProtocolSink *This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult);};
struct IWbemClientTransportVtbl {HRESULT ( *QueryInterface)(IWbemClientTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemClientTransport *This);ULONG ( *Release)(IWbemClientTransport *This);HRESULT ( *ConnectServer)(IWbemClientTransport *This, BSTR strAddressType, DWORD dwBinaryAddressLength, BYTE *abBinaryAddress, BSTR strNetworkResource, BSTR strUser, BSTR strPassword, BSTR strLocale, int lSecurityFlags, BSTR strAuthority, IWbemContext *pCtx, IWbemServices **ppNamespace);};
struct IWebWizardExtensionVtbl {HRESULT ( *QueryInterface)(IWebWizardExtension *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebWizardExtension *This);ULONG ( *Release)(IWebWizardExtension *This);HRESULT ( *AddPages)(IWebWizardExtension *This, HPROPSHEETPAGE *aPages, UINT cPages, UINT *pnPagesAdded);HRESULT ( *GetFirstPage)(IWebWizardExtension *This, HPROPSHEETPAGE *phpage);HRESULT ( *GetLastPage)(IWebWizardExtension *This, HPROPSHEETPAGE *phpage);HRESULT ( *SetInitialURL)(IWebWizardExtension *This, LPCWSTR pszURL);HRESULT ( *SetErrorURL)(IWebWizardExtension *This, LPCWSTR pszErrorURL);};
struct IShellPropSheetExtVtbl {HRESULT ( *QueryInterface)(IShellPropSheetExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellPropSheetExt *This);ULONG ( *Release)(IShellPropSheetExt *This);HRESULT ( *AddPages)(IShellPropSheetExt *This, LPFNSVADDPROPSHEETPAGE pfnAddPage, LPARAM lParam);HRESULT ( *ReplacePage)(IShellPropSheetExt *This, EXPPS uPageID, LPFNSVADDPROPSHEETPAGE pfnReplaceWith, LPARAM lParam);};
struct _CMInvokeCommandInfoEx {DWORD cbSize;DWORD fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;DWORD dwHotKey;HANDLE hIcon;LPCSTR lpTitle;LPCWSTR lpVerbW;LPCWSTR lpParametersW;LPCWSTR lpDirectoryW;LPCWSTR lpTitleW;POINT ptInvoke;};
struct INewShortcutHookWVtbl {HRESULT ( *QueryInterface)(INewShortcutHookW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(INewShortcutHookW *This);ULONG ( *Release)(INewShortcutHookW *This);HRESULT ( *SetReferent)(INewShortcutHookW *This, LPCWSTR pcszReferent, HWND hwnd);HRESULT ( *GetReferent)(INewShortcutHookW *This, LPWSTR pszReferent, int cchReferent);HRESULT ( *SetFolder)(INewShortcutHookW *This, LPCWSTR pcszFolder);HRESULT ( *GetFolder)(INewShortcutHookW *This, LPWSTR pszFolder, int cchFolder);HRESULT ( *GetName)(INewShortcutHookW *This, LPWSTR pszName, int cchName);HRESULT ( *GetExtension)(INewShortcutHookW *This, LPWSTR pszExtension, int cchExtension);};
struct IWbemLevel1LoginVtbl {HRESULT ( *QueryInterface)(IWbemLevel1Login *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemLevel1Login *This);ULONG ( *Release)(IWbemLevel1Login *This);HRESULT ( *EstablishPosition)(IWbemLevel1Login *This, LPWSTR wszClientMachineName, DWORD dwProcessId, DWORD *phAuthEventHandle);HRESULT ( *RequestChallenge)(IWbemLevel1Login *This, LPWSTR wszNetworkResource, LPWSTR wszUser, WBEM_128BITS Nonce);HRESULT ( *WBEMLogin)(IWbemLevel1Login *This, LPWSTR wszPreferredLocale, WBEM_128BITS AccessToken, int lFlags, IWbemContext *pCtx, IWbemServices **ppNamespace);HRESULT ( *NTLMLogin)(IWbemLevel1Login *This, LPWSTR wszNetworkResource, LPWSTR wszPreferredLocale, int lFlags, IWbemContext *pCtx, IWbemServices **ppNamespace);};
struct IOleUndoManagerVtbl {HRESULT ( *QueryInterface)(IOleUndoManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleUndoManager *This);ULONG ( *Release)(IOleUndoManager *This);HRESULT ( *Open)(IOleUndoManager *This, IOleParentUndoUnit *pPUU);HRESULT ( *Close)(IOleUndoManager *This, IOleParentUndoUnit *pPUU, BOOL fCommit);HRESULT ( *Add)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *GetOpenParentState)(IOleUndoManager *This, DWORD *pdwState);HRESULT ( *DiscardFrom)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *UndoTo)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *RedoTo)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *EnumUndoable)(IOleUndoManager *This, IEnumOleUndoUnits **ppEnum);HRESULT ( *EnumRedoable)(IOleUndoManager *This, IEnumOleUndoUnits **ppEnum);HRESULT ( *GetLastUndoDescription)(IOleUndoManager *This, BSTR *pBstr);HRESULT ( *GetLastRedoDescription)(IOleUndoManager *This, BSTR *pBstr);HRESULT ( *Enable)(IOleUndoManager *This, BOOL fEnable);};
struct IRunnableObjectVtbl {HRESULT ( *QueryInterface)(IRunnableObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRunnableObject *This);ULONG ( *Release)(IRunnableObject *This);HRESULT ( *GetRunningClass)(IRunnableObject *This, LPCLSID lpClsid);HRESULT ( *Run)(IRunnableObject *This, LPBINDCTX pbc);BOOL ( *IsRunning)(IRunnableObject *This);HRESULT ( *LockRunning)(IRunnableObject *This, BOOL fLock, BOOL fLastUnlockCloses);HRESULT ( *SetContainedObject)(IRunnableObject *This, BOOL fContained);};
struct IServerSecurityVtbl {HRESULT ( *QueryInterface)(IServerSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServerSecurity *This);ULONG ( *Release)(IServerSecurity *This);HRESULT ( *QueryBlanket)(IServerSecurity *This, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pPrivs, DWORD *pCapabilities);HRESULT ( *ImpersonateClient)(IServerSecurity *This);HRESULT ( *RevertToSelf)(IServerSecurity *This);BOOL ( *IsImpersonating)(IServerSecurity *This);};
struct _CERT_CHAIN_ELEMENT {DWORD cbSize;PCCERT_CONTEXT pCertContext;CERT_TRUST_STATUS TrustStatus;PCERT_REVOCATION_INFO pRevocationInfo;PCERT_ENHKEY_USAGE pIssuanceUsage;PCERT_ENHKEY_USAGE pApplicationUsage;LPCWSTR pwszExtendedErrorInfo;};
struct IHttpNegotiateVtbl {HRESULT ( *QueryInterface)(IHttpNegotiate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpNegotiate *This);ULONG ( *Release)(IHttpNegotiate *This);HRESULT ( *BeginningTransaction)(IHttpNegotiate *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);HRESULT ( *OnResponse)(IHttpNegotiate *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);};
struct ILayoutStorageVtbl {HRESULT ( *QueryInterface)(ILayoutStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILayoutStorage *This);ULONG ( *Release)(ILayoutStorage *This);HRESULT ( *LayoutScript)(ILayoutStorage *This, StorageLayout *pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag);HRESULT ( *BeginMonitor)(ILayoutStorage *This);HRESULT ( *EndMonitor)(ILayoutStorage *This);HRESULT ( *ReLayoutDocfile)(ILayoutStorage *This, OLECHAR *pwcsNewDfName);HRESULT ( *ReLayoutDocfileOnILockBytes)(ILayoutStorage *This, ILockBytes *pILockBytes);};
struct tagREBARBANDINFOW {UINT cbSize;UINT fMask;UINT fStyle;COLORREF clrFore;COLORREF clrBack;LPWSTR lpText;UINT cch;int iImage;HWND hwndChild;UINT cxMinChild;UINT cyMinChild;UINT cx;HBITMAP hbmBack;UINT wID;UINT cyChild;UINT cyMaxChild;UINT cyIntegral;UINT cxIdeal;LPARAM lParam;UINT cxHeader;};
struct IOleUndoUnitVtbl {HRESULT ( *QueryInterface)(IOleUndoUnit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleUndoUnit *This);ULONG ( *Release)(IOleUndoUnit *This);HRESULT ( *Do)(IOleUndoUnit *This, IOleUndoManager *pUndoManager);HRESULT ( *GetDescription)(IOleUndoUnit *This, BSTR *pBstr);HRESULT ( *GetUnitType)(IOleUndoUnit *This, CLSID *pClsid, LONG *plID);HRESULT ( *OnNextAdd)(IOleUndoUnit *This);};
struct _SHFILEOPSTRUCTW {HWND hwnd;UINT wFunc;LPCWSTR pFrom;LPCWSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCWSTR lpszProgressTitle;};
struct tagNMTTDISPINFOW {NMHDR hdr;LPWSTR lpszText;WCHAR szText[80];HINSTANCE hinst;UINT uFlags;LPARAM lParam;};
struct tagProxyFileInfo { PCInterfaceProxyVtblList *pProxyVtblList; PCInterfaceStubVtblList *pStubVtblList; PCInterfaceName *pNamesArray; IID **pDelegatedIIDs; PIIDLookup pIIDLookupRtn;unsigned short TableSize;unsigned short TableVersion; IID **pAsyncIIDLookup;LONG_PTR Filler2;LONG_PTR Filler3;LONG_PTR Filler4;};
struct tagCHOOSECOLORW {DWORD lStructSize;HWND hwndOwner;HWND hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;LPCCHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct IDispErrorVtbl {HRESULT ( *QueryInterface)(IDispError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispError *This);ULONG ( *Release)(IDispError *This);HRESULT ( *QueryErrorInfo)(IDispError *This, GUID guidErrorType, IDispError **ppde);HRESULT ( *GetNext)(IDispError *This, IDispError **ppde);HRESULT ( *GetHresult)(IDispError *This, HRESULT *phr);HRESULT ( *GetSource)(IDispError *This, BSTR *pbstrSource);HRESULT ( *GetHelpInfo)(IDispError *This, BSTR *pbstrFileName, DWORD *pdwContext);HRESULT ( *GetDescription)(IDispError *This, BSTR *pbstrDescription);};
struct IErrorInfoVtbl {HRESULT ( *QueryInterface)(IErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorInfo *This);ULONG ( *Release)(IErrorInfo *This);HRESULT ( *GetGUID)(IErrorInfo *This, GUID *pGUID);HRESULT ( *GetSource)(IErrorInfo *This, BSTR *pBstrSource);HRESULT ( *GetDescription)(IErrorInfo *This, BSTR *pBstrDescription);HRESULT ( *GetHelpFile)(IErrorInfo *This, BSTR *pBstrHelpFile);HRESULT ( *GetHelpContext)(IErrorInfo *This, DWORD *pdwHelpContext);};
struct _OEMUIPSPARAM {DWORD cbSize;POEMUIOBJ poemuiobj;HANDLE hPrinter;PWSTR pPrinterName;HANDLE hModule;HANDLE hOEMHeap;PDEVMODE pPublicDM;PVOID pOEMDM;PVOID pOEMUserData;DWORD dwFlags;PVOID pOemEntry;};
struct _tagBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;STGMEDIUM stgmedData;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;SECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
struct tagEXCEPINFO {WORD wCode;WORD wReserved;BSTR bstrSource;BSTR bstrDescription;BSTR bstrHelpFile;DWORD dwHelpContext;PVOID pvReserved;HRESULT ( *pfnDeferredFillIn)(struct tagEXCEPINFO *);SCODE scode;};
struct tagHH_POPUP {int cbStruct;HINSTANCE hinst;UINT idString;LPCTSTR pszText;POINT pt;COLORREF clrForeground;COLORREF clrBackground;RECT rcMargins;LPCTSTR pszFont;};
struct tagACTCTXW {ULONG cbSize;DWORD dwFlags;LPCWSTR lpSource;USHORT wProcessorArchitecture;LANGID wLangId;LPCWSTR lpAssemblyDirectory;LPCWSTR lpResourceName;LPCWSTR lpApplicationName;HMODULE hModule;};
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;HCRYPTPROV hCryptProv;DWORD dwKeyChoice;_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 __anonymous0;CRYPT_DATA_BLOB KeyId;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _4B26251D75C0D59F22113E7121B4AA5F {DWORD dwStructSize;LPWSTR lpstrGroupNames;DWORD nMaxGroupNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPWSTR lpstrCardNames;DWORD nMaxCardNames;LPOCNCHKPROC lpfnCheck;LPOCNCONNPROCW lpfnConnect;LPOCNDSCPROC lpfnDisconnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;};
struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR {DWORD Length;PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;PWSTR VerifierImage;DWORD VerifierFlags;DWORD VerifierDebug;PVOID RtlpGetStackTraceAddress;PVOID RtlpDebugPageHeapCreate;PVOID RtlpDebugPageHeapDestroy;RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;};
struct IInternetProtocolRootVtbl {HRESULT ( *QueryInterface)(IInternetProtocolRoot *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolRoot *This);ULONG ( *Release)(IInternetProtocolRoot *This);HRESULT ( *Start)(IInternetProtocolRoot *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);HRESULT ( *Continue)(IInternetProtocolRoot *This, PROTOCOLDATA *pProtocolData);HRESULT ( *Abort)(IInternetProtocolRoot *This, HRESULT hrReason, DWORD dwOptions);HRESULT ( *Terminate)(IInternetProtocolRoot *This, DWORD dwOptions);HRESULT ( *Suspend)(IInternetProtocolRoot *This);HRESULT ( *Resume)(IInternetProtocolRoot *This);};
struct IPrintDialogServicesVtbl {HRESULT ( *QueryInterface)(IPrintDialogServices *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPrintDialogServices *This);ULONG ( *Release)(IPrintDialogServices *This);HRESULT ( *GetCurrentDevMode)(IPrintDialogServices *This, LPDEVMODE pDevMode, UINT *pcbSize);HRESULT ( *GetCurrentPrinterName)(IPrintDialogServices *This, LPTSTR pPrinterName, UINT *pcchSize);HRESULT ( *GetCurrentPortName)(IPrintDialogServices *This, LPTSTR pPortName, UINT *pcchSize);};
struct IDockingWindowFrameVtbl {HRESULT ( *QueryInterface)(IDockingWindowFrame *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDockingWindowFrame *This);ULONG ( *Release)(IDockingWindowFrame *This);HRESULT ( *GetWindow)(IDockingWindowFrame *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindowFrame *This, BOOL fEnterMode);HRESULT ( *AddToolbar)(IDockingWindowFrame *This, IUnknown *punkSrc, LPCWSTR pwszItem, DWORD dwAddFlags);HRESULT ( *RemoveToolbar)(IDockingWindowFrame *This, IUnknown *punkSrc, DWORD dwRemoveFlags);HRESULT ( *FindToolbar)(IDockingWindowFrame *This, LPCWSTR pwszItem,  IID * riid, void **ppv);};
struct IDockingWindowSiteVtbl {HRESULT ( *QueryInterface)(IDockingWindowSite *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDockingWindowSite *This);ULONG ( *Release)(IDockingWindowSite *This);HRESULT ( *GetWindow)(IDockingWindowSite *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindowSite *This, BOOL fEnterMode);HRESULT ( *GetBorderDW)(IDockingWindowSite *This, IUnknown *punkObj, LPRECT prcBorder);HRESULT ( *RequestBorderSpaceDW)(IDockingWindowSite *This, IUnknown *punkObj, LPCBORDERWIDTHS pbw);HRESULT ( *SetBorderSpaceDW)(IDockingWindowSite *This, IUnknown *punkObj, LPCBORDERWIDTHS pbw);};
struct ICategoryProviderVtbl {HRESULT ( *QueryInterface)(ICategoryProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICategoryProvider *This);ULONG ( *Release)(ICategoryProvider *This);HRESULT ( *CanCategorizeOnSCID)(ICategoryProvider *This, SHCOLUMNID *pscid);HRESULT ( *GetDefaultCategory)(ICategoryProvider *This, GUID *pguid, SHCOLUMNID *pscid);HRESULT ( *GetCategoryForSCID)(ICategoryProvider *This, SHCOLUMNID *pscid, GUID *pguid);HRESULT ( *EnumCategories)(ICategoryProvider *This, IEnumGUID **penum);HRESULT ( *GetCategoryName)(ICategoryProvider *This, GUID *pguid, LPWSTR pszName, UINT cch);HRESULT ( *CreateCategory)(ICategoryProvider *This, GUID *pguid,  IID * riid, void **ppv);};
struct IPublishingWizardVtbl {HRESULT ( *QueryInterface)(IPublishingWizard *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPublishingWizard *This);ULONG ( *Release)(IPublishingWizard *This);HRESULT ( *AddPages)(IPublishingWizard *This, HPROPSHEETPAGE *aPages, UINT cPages, UINT *pnPagesAdded);HRESULT ( *GetFirstPage)(IPublishingWizard *This, HPROPSHEETPAGE *phpage);HRESULT ( *GetLastPage)(IPublishingWizard *This, HPROPSHEETPAGE *phpage);HRESULT ( *Initialize)(IPublishingWizard *This, IDataObject *pdo, DWORD dwOptions, LPCWSTR pszServiceProvider);HRESULT ( *GetTransferManifest)(IPublishingWizard *This, HRESULT *phrFromTransfer, IXMLDOMDocument **pdocManifest);};
struct IUserNotificationVtbl {HRESULT ( *QueryInterface)(IUserNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUserNotification *This);ULONG ( *Release)(IUserNotification *This);HRESULT ( *SetBalloonInfo)(IUserNotification *This, LPCWSTR pszTitle, LPCWSTR pszText, DWORD dwInfoFlags);HRESULT ( *SetBalloonRetry)(IUserNotification *This, DWORD dwShowTime, DWORD dwInterval, UINT cRetryCount);HRESULT ( *SetIconInfo)(IUserNotification *This, HICON hIcon, LPCWSTR pszToolTip);HRESULT ( *Show)(IUserNotification *This, IQueryContinue *pqc, DWORD dwContinuePollInterval);HRESULT ( *PlaySoundA)(IUserNotification *This, LPCWSTR pszSoundName);};
struct IWbemQualifierSetVtbl {HRESULT ( *QueryInterface)(IWbemQualifierSet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemQualifierSet *This);ULONG ( *Release)(IWbemQualifierSet *This);HRESULT ( *Get)(IWbemQualifierSet *This, LPCWSTR wszName, int lFlags, VARIANT *pVal, int *plFlavor);HRESULT ( *Put)(IWbemQualifierSet *This, LPCWSTR wszName, VARIANT *pVal, int lFlavor);HRESULT ( *Delete)(IWbemQualifierSet *This, LPCWSTR wszName);HRESULT ( *GetNames)(IWbemQualifierSet *This, int lFlags, SAFEARRAY **pNames);HRESULT ( *BeginEnumeration)(IWbemQualifierSet *This, int lFlags);HRESULT ( *Next)(IWbemQualifierSet *This, int lFlags, BSTR *pstrName, VARIANT *pVal, int *plFlavor);HRESULT ( *EndEnumeration)(IWbemQualifierSet *This);};
struct _TRACE_LOGFILE_HEADER {ULONG BufferSize;_TRACE_LOGFILE_HEADER___2BC8F7E6FF87669E4A0C925407CB65FB __anonymous0;ULONG ProviderVersion;ULONG NumberOfProcessors;LARGE_INTEGER EndTime;ULONG TimerResolution;ULONG MaximumFileSize;ULONG LogFileMode;ULONG BuffersWritten;union {GUID LogInstanceGuid;_TRACE_LOGFILE_HEADER___548299C9C2C0CFAB401D5C20E83DC5C0___8A1F015C44BA8AC17C85DC9BC7770995 __anonymous1;};LPWSTR LoggerName;LPWSTR LogFileName;TIME_ZONE_INFORMATION TimeZone;LARGE_INTEGER BootTime;LARGE_INTEGER PerfFreq;LARGE_INTEGER StartTime;ULONG ReservedFlags;ULONG BuffersLost;};
struct IInternetSessionVtbl {HRESULT ( *QueryInterface)(IInternetSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSession *This);ULONG ( *Release)(IInternetSession *This);HRESULT ( *RegisterNameSpace)(IInternetSession *This, IClassFactory *pCF,  IID * rclsid, LPCWSTR pwzProtocol, ULONG cPatterns,  LPCWSTR *ppwzPatterns, DWORD dwReserved);HRESULT ( *UnregisterNameSpace)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pszProtocol);HRESULT ( *RegisterMimeFilter)(IInternetSession *This, IClassFactory *pCF,  IID * rclsid, LPCWSTR pwzType);HRESULT ( *UnregisterMimeFilter)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pwzType);HRESULT ( *CreateBinding)(IInternetSession *This, LPBC pBC, LPCWSTR szUrl, IUnknown *pUnkOuter, IUnknown **ppUnk, IInternetProtocol **ppOInetProt, DWORD dwOption);HRESULT ( *SetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);HRESULT ( *GetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD *pdwBufferLength, DWORD dwReserved);};
typedef INT ( *LPWSPADDRESSTOSTRING)(LPSOCKADDR lpsaAddress, DWORD dwAddressLength, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPWSTR lpszAddressString, LPDWORD lpdwAddressStringLength, LPINT lpErrno);
struct ICatInformationVtbl {HRESULT ( *QueryInterface)(ICatInformation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatInformation *This);ULONG ( *Release)(ICatInformation *This);HRESULT ( *EnumCategories)(ICatInformation *This, LCID lcid, IEnumCATEGORYINFO **ppenumCategoryInfo);HRESULT ( *GetCategoryDesc)(ICatInformation *This, REFCATID rcatid, LCID lcid, LPWSTR *pszDesc);HRESULT ( *EnumClassesOfCategories)(ICatInformation *This, ULONG cImplemented, CATID  *    rgcatidImpl, ULONG cRequired, CATID  *    rgcatidReq, IEnumGUID **ppenumClsid);HRESULT ( *IsClassOfCategories)(ICatInformation *This,  IID * rclsid, ULONG cImplemented, CATID  *    rgcatidImpl, ULONG cRequired, CATID  *    rgcatidReq);HRESULT ( *EnumImplCategoriesOfClass)(ICatInformation *This,  IID * rclsid, IEnumGUID **ppenumCatid);HRESULT ( *EnumReqCategoriesOfClass)(ICatInformation *This,  IID * rclsid, IEnumGUID **ppenumCatid);};
struct IPersistFolder3Vtbl {HRESULT ( *QueryInterface)(IPersistFolder3 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IPersistFolder3 *This);ULONG ( *Release)(IPersistFolder3 *This);HRESULT ( *GetClassID)(IPersistFolder3 *This, LPCLSID lpClassID);HRESULT ( *Initialize)(IPersistFolder3 *This, LPCITEMIDLIST pidl);HRESULT ( *GetCurFolder)(IPersistFolder3 *This, LPITEMIDLIST *ppidl);HRESULT ( *InitializeEx)(IPersistFolder3 *This, IBindCtx *pbc, LPCITEMIDLIST pidlRoot,  PERSIST_FOLDER_TARGET_INFO *ppfti);HRESULT ( *GetFolderTargetInfo)(IPersistFolder3 *This, PERSIST_FOLDER_TARGET_INFO *ppfti);};
struct IExtractIconWVtbl {HRESULT ( *QueryInterface)(IExtractIconW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IExtractIconW *This);ULONG ( *Release)(IExtractIconW *This);HRESULT ( *GetIconLocation)(IExtractIconW *This, UINT uFlags, LPWSTR szIconFile, UINT cchMax, int *piIndex, UINT *pwFlags);HRESULT ( *Extract)(IExtractIconW *This, LPCWSTR pszFile, UINT nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIconSize);};
struct IExtractImageVtbl {HRESULT ( *QueryInterface)(IExtractImage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IExtractImage *This);ULONG ( *Release)(IExtractImage *This);HRESULT ( *GetLocation)(IExtractImage *This, LPWSTR pszPathBuffer, DWORD cch, DWORD *pdwPriority,  SIZE *prgSize, DWORD dwRecClrDepth, DWORD *pdwFlags);HRESULT ( *Extract)(IExtractImage *This, HBITMAP *phBmpThumbnail);};
struct ICodeInstallVtbl {HRESULT ( *QueryInterface)(ICodeInstall *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICodeInstall *This);ULONG ( *Release)(ICodeInstall *This);HRESULT ( *GetWindow)(ICodeInstall *This,  GUID * rguidReason, HWND *phwnd);HRESULT ( *OnCodeInstallProblem)(ICodeInstall *This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved);};
struct IFileViewerWVtbl {HRESULT ( *QueryInterface)(IFileViewerW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileViewerW *This);ULONG ( *Release)(IFileViewerW *This);HRESULT ( *ShowInitialize)(IFileViewerW *This, LPFILEVIEWERSITE lpfsi);HRESULT ( *Show)(IFileViewerW *This, LPFVSHOWINFO pvsi);HRESULT ( *PrintTo)(IFileViewerW *This, LPWSTR pszDriver, BOOL fSuppressUI);};
struct IMofCompilerVtbl {HRESULT ( *QueryInterface)(IMofCompiler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMofCompiler *This);ULONG ( *Release)(IMofCompiler *This);HRESULT ( *CompileFile)(IMofCompiler *This, LPWSTR FileName, LPWSTR ServerAndNamespace, LPWSTR User, LPWSTR Authority, LPWSTR Password, LONG lOptionFlags, LONG lClassFlags, LONG lInstanceFlags, WBEM_COMPILE_STATUS_INFO *pInfo);HRESULT ( *CompileBuffer)(IMofCompiler *This, int BuffSize, BYTE *pBuffer, LPWSTR ServerAndNamespace, LPWSTR User, LPWSTR Authority, LPWSTR Password, LONG lOptionFlags, LONG lClassFlags, LONG lInstanceFlags, WBEM_COMPILE_STATUS_INFO *pInfo);HRESULT ( *CreateBMOF)(IMofCompiler *This, LPWSTR TextFileName, LPWSTR BMOFFileName, LPWSTR ServerAndNamespace, LONG lOptionFlags, LONG lClassFlags, LONG lInstanceFlags, WBEM_COMPILE_STATUS_INFO *pInfo);};
struct IWbemContextVtbl {HRESULT ( *QueryInterface)(IWbemContext *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemContext *This);ULONG ( *Release)(IWbemContext *This);HRESULT ( *Clone)(IWbemContext *This, IWbemContext **ppNewCopy);HRESULT ( *GetNames)(IWbemContext *This, int lFlags, SAFEARRAY **pNames);HRESULT ( *BeginEnumeration)(IWbemContext *This, int lFlags);HRESULT ( *Next)(IWbemContext *This, int lFlags, BSTR *pstrName, VARIANT *pValue);HRESULT ( *EndEnumeration)(IWbemContext *This);HRESULT ( *SetValue)(IWbemContext *This, LPCWSTR wszName, int lFlags, VARIANT *pValue);HRESULT ( *GetValue)(IWbemContext *This, LPCWSTR wszName, int lFlags, VARIANT *pValue);HRESULT ( *DeleteValue)(IWbemContext *This, LPCWSTR wszName, int lFlags);HRESULT ( *DeleteAll)(IWbemContext *This);};
struct tagCREATESTRUCTW {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCWSTR lpszName;LPCWSTR lpszClass;DWORD dwExStyle;};
struct tagMSGBOXPARAMSW {UINT cbSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpszText;LPCWSTR lpszCaption;DWORD dwStyle;LPCWSTR lpszIcon;DWORD_PTR dwContextHelpId;MSGBOXCALLBACK lpfnMsgBoxCallback;DWORD dwLanguageId;};
struct _COMPROPSHEETUI {WORD cbSize;WORD Flags;HINSTANCE hInstCaller;LPTSTR pCallerName;ULONG_PTR UserData;LPTSTR pHelpFile;_CPSUICALLBACK pfnCallBack;POPTITEM pOptItem;PDLGPAGE pDlgPage;WORD cOptItem;WORD cDlgPage;ULONG_PTR IconID;LPTSTR pOptItemName;WORD CallerVersion;WORD OptItemVersion;ULONG_PTR dwReserved[4];};
struct ICopyHookWVtbl {HRESULT ( *QueryInterface)(ICopyHookW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICopyHookW *This);ULONG ( *Release)(ICopyHookW *This);UINT ( *CopyCallback)(ICopyHookW *This, HWND hwnd, UINT wFunc, UINT wFlags, LPCWSTR pszSrcFile, DWORD dwSrcAttribs, LPCWSTR pszDestFile, DWORD dwDestAttribs);};
struct tagWNDCLASSEXW {UINT cbSize;UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCWSTR lpszMenuName;LPCWSTR lpszClassName;HICON hIconSm;};
struct IBandSiteVtbl {HRESULT ( *QueryInterface)(IBandSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBandSite *This);ULONG ( *Release)(IBandSite *This);HRESULT ( *AddBand)(IBandSite *This, IUnknown *punk);HRESULT ( *EnumBands)(IBandSite *This, UINT uBand, DWORD *pdwBandID);HRESULT ( *QueryBand)(IBandSite *This, DWORD dwBandID, IDeskBand **ppstb, DWORD *pdwState, LPWSTR pszName, int cchName);HRESULT ( *SetBandState)(IBandSite *This, DWORD dwBandID, DWORD dwMask, DWORD dwState);HRESULT ( *RemoveBand)(IBandSite *This, DWORD dwBandID);HRESULT ( *GetBandObject)(IBandSite *This, DWORD dwBandID,  IID * riid, void **ppv);HRESULT ( *SetBandSiteInfo)(IBandSite *This,  BANDSITEINFO *pbsinfo);HRESULT ( *GetBandSiteInfo)(IBandSite *This, BANDSITEINFO *pbsinfo);};
struct _WSAQuerySetW {DWORD dwSize;LPWSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPWSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPWSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPWSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
struct tagHH_WINTYPE {int cbStruct;BOOL fUniCodeStrings;LPCTSTR pszType;DWORD fsValidMembers;DWORD fsWinProperties;LPCTSTR pszCaption;DWORD dwStyles;DWORD dwExStyles;RECT rcWindowPos;int nShowState;HWND hwndHelp;HWND hwndCaller;HH_INFOTYPE *paInfoTypes;HWND hwndToolBar;HWND hwndNavigation;HWND hwndHTML;int iNavWidth;RECT rcHTML;LPCTSTR pszToc;LPCTSTR pszIndex;LPCTSTR pszFile;LPCTSTR pszHome;DWORD fsToolBarFlags;BOOL fNotExpanded;int curNavType;int tabpos;int idNotify;BYTE tabOrder[20];int cHistory;LPCTSTR pszJump1;LPCTSTR pszJump2;LPCTSTR pszUrlJump1;LPCTSTR pszUrlJump2;RECT rcMinSize;int cbInfoTypes;LPCTSTR pszCustomTabs;};
struct tagMETHODDATA {OLECHAR *szName;PARAMDATA *ppdata;DISPID dispid;UINT iMeth;CALLCONV cc;UINT cArgs;WORD wFlags;VARTYPE vtReturn;};
struct _browseinfoW {HWND hwndOwner;LPCITEMIDLIST pidlRoot;LPWSTR pszDisplayName;LPCWSTR lpszTitle;UINT ulFlags;BFFCALLBACK lpfn;LPARAM lParam;int iImage;};
struct tagTOOLINFOW {UINT cbSize;UINT uFlags;HWND hwnd;UINT_PTR uId;RECT rect;HINSTANCE hinst;LPWSTR lpszText;LPARAM lParam;void *lpReserved;};
struct tagWNDCLASSW {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCWSTR lpszMenuName;LPCWSTR lpszClassName;};
struct ICDBurnVtbl {HRESULT ( *QueryInterface)(ICDBurn *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICDBurn *This);ULONG ( *Release)(ICDBurn *This);HRESULT ( *GetRecorderDriveLetter)(ICDBurn *This, LPWSTR pszDrive, UINT cch);HRESULT ( *Burn)(ICDBurn *This, HWND hwnd);HRESULT ( *HasRecordableDrive)(ICDBurn *This, BOOL *pfHasRecorder);};
struct IInternetSecurityManagerVtbl {HRESULT ( *QueryInterface)(IInternetSecurityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSecurityManager *This);ULONG ( *Release)(IInternetSecurityManager *This);HRESULT ( *SetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite *pSite);HRESULT ( *GetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite **ppSite);HRESULT ( *MapUrlToZone)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);HRESULT ( *GetSecurityId)(IInternetSecurityManager *This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);HRESULT ( *ProcessUrlAction)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT ( *QueryCustomPolicy)(IInternetSecurityManager *This, LPCWSTR pwszUrl,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);HRESULT ( *SetZoneMapping)(IInternetSecurityManager *This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);HRESULT ( *GetZoneMappings)(IInternetSecurityManager *This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);};
struct IOleParentUndoUnitVtbl {HRESULT ( *QueryInterface)(IOleParentUndoUnit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleParentUndoUnit *This);ULONG ( *Release)(IOleParentUndoUnit *This);HRESULT ( *Do)(IOleParentUndoUnit *This, IOleUndoManager *pUndoManager);HRESULT ( *GetDescription)(IOleParentUndoUnit *This, BSTR *pBstr);HRESULT ( *GetUnitType)(IOleParentUndoUnit *This, CLSID *pClsid, LONG *plID);HRESULT ( *OnNextAdd)(IOleParentUndoUnit *This);HRESULT ( *Open)(IOleParentUndoUnit *This, IOleParentUndoUnit *pPUU);HRESULT ( *Close)(IOleParentUndoUnit *This, IOleParentUndoUnit *pPUU, BOOL fCommit);HRESULT ( *Add)(IOleParentUndoUnit *This, IOleUndoUnit *pUU);HRESULT ( *FindUnit)(IOleParentUndoUnit *This, IOleUndoUnit *pUU);HRESULT ( *GetParentState)(IOleParentUndoUnit *This, DWORD *pdwState);};
struct _EVENT_TRACE_LOGFILEW {LPWSTR LogFileName;LPWSTR LoggerName;LONGLONG CurrentTime;ULONG BuffersRead;ULONG LogFileMode;EVENT_TRACE CurrentEvent;TRACE_LOGFILE_HEADER LogfileHeader;PEVENT_TRACE_BUFFER_CALLBACKW BufferCallback;ULONG BufferSize;ULONG Filled;ULONG EventsLost;PEVENT_CALLBACK EventCallback;ULONG IsKernelTrace;PVOID Context;};
struct IShellImageStoreVtbl {HRESULT ( *QueryInterface)(IShellImageStore *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellImageStore *This);ULONG ( *Release)(IShellImageStore *This);HRESULT ( *Open)(IShellImageStore *This, DWORD dwMode, DWORD *pdwLock);HRESULT ( *Create)(IShellImageStore *This, DWORD dwMode, DWORD *pdwLock);HRESULT ( *ReleaseLock)(IShellImageStore *This,  DWORD *pdwLock);HRESULT ( *Close)(IShellImageStore *This,  DWORD *pdwLock);HRESULT ( *Commit)(IShellImageStore *This,  DWORD *pdwLock);HRESULT ( *IsLocked)(IShellImageStore *This);HRESULT ( *GetMode)(IShellImageStore *This, DWORD *pdwMode);HRESULT ( *GetCapabilities)(IShellImageStore *This, DWORD *pdwCapMask);HRESULT ( *AddEntry)(IShellImageStore *This, LPCWSTR pszName,  FILETIME *pftTimeStamp, DWORD dwMode, HBITMAP hImage);HRESULT ( *GetEntry)(IShellImageStore *This, LPCWSTR pszName, DWORD dwMode, HBITMAP *phImage);HRESULT ( *DeleteEntry)(IShellImageStore *This, LPCWSTR pszName);HRESULT ( *IsEntryInStore)(IShellImageStore *This, LPCWSTR pszName, FILETIME *pftTimeStamp);HRESULT ( *Enum)(IShellImageStore *This, LPENUMSHELLIMAGESTORE *ppEnum);};
struct IWbemClassObjectVtbl {HRESULT ( *QueryInterface)(IWbemClassObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemClassObject *This);ULONG ( *Release)(IWbemClassObject *This);HRESULT ( *GetQualifierSet)(IWbemClassObject *This, IWbemQualifierSet **ppQualSet);HRESULT ( *Get)(IWbemClassObject *This, LPCWSTR wszName, int lFlags, VARIANT *pVal, CIMTYPE *pType, int *plFlavor);HRESULT ( *Put)(IWbemClassObject *This, LPCWSTR wszName, int lFlags, VARIANT *pVal, CIMTYPE Type);HRESULT ( *Delete)(IWbemClassObject *This, LPCWSTR wszName);HRESULT ( *GetNames)(IWbemClassObject *This, LPCWSTR wszQualifierName, int lFlags, VARIANT *pQualifierVal, SAFEARRAY **pNames);HRESULT ( *BeginEnumeration)(IWbemClassObject *This, int lEnumFlags);HRESULT ( *Next)(IWbemClassObject *This, int lFlags, BSTR *strName, VARIANT *pVal, CIMTYPE *pType, int *plFlavor);HRESULT ( *EndEnumeration)(IWbemClassObject *This);HRESULT ( *GetPropertyQualifierSet)(IWbemClassObject *This, LPCWSTR wszProperty, IWbemQualifierSet **ppQualSet);HRESULT ( *Clone)(IWbemClassObject *This, IWbemClassObject **ppCopy);HRESULT ( *GetObjectText)(IWbemClassObject *This, int lFlags, BSTR *pstrObjectText);HRESULT ( *SpawnDerivedClass)(IWbemClassObject *This, int lFlags, IWbemClassObject **ppNewClass);HRESULT ( *SpawnInstance)(IWbemClassObject *This, int lFlags, IWbemClassObject **ppNewInstance);HRESULT ( *CompareTo)(IWbemClassObject *This, int lFlags, IWbemClassObject *pCompareTo);HRESULT ( *GetPropertyOrigin)(IWbemClassObject *This, LPCWSTR wszName, BSTR *pstrClassName);HRESULT ( *InheritsFrom)(IWbemClassObject *This, LPCWSTR strAncestor);HRESULT ( *GetMethod)(IWbemClassObject *This, LPCWSTR wszName, int lFlags, IWbemClassObject **ppInSignature, IWbemClassObject **ppOutSignature);HRESULT ( *PutMethod)(IWbemClassObject *This, LPCWSTR wszName, int lFlags, IWbemClassObject *pInSignature, IWbemClassObject *pOutSignature);HRESULT ( *DeleteMethod)(IWbemClassObject *This, LPCWSTR wszName);HRESULT ( *BeginMethodEnumeration)(IWbemClassObject *This, int lEnumFlags);HRESULT ( *NextMethod)(IWbemClassObject *This, int lFlags, BSTR *pstrName, IWbemClassObject **ppInSignature, IWbemClassObject **ppOutSignature);HRESULT ( *EndMethodEnumeration)(IWbemClassObject *This);HRESULT ( *GetMethodQualifierSet)(IWbemClassObject *This, LPCWSTR wszMethod, IWbemQualifierSet **ppQualSet);HRESULT ( *GetMethodOrigin)(IWbemClassObject *This, LPCWSTR wszMethodName, BSTR *pstrClassName);};
struct IHttpNegotiate2Vtbl {HRESULT ( *QueryInterface)(IHttpNegotiate2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpNegotiate2 *This);ULONG ( *Release)(IHttpNegotiate2 *This);HRESULT ( *BeginningTransaction)(IHttpNegotiate2 *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);HRESULT ( *OnResponse)(IHttpNegotiate2 *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);HRESULT ( *GetRootSecurityId)(IHttpNegotiate2 *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);};
struct IClassFactory2Vtbl {HRESULT ( *QueryInterface)(IClassFactory2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassFactory2 *This);ULONG ( *Release)(IClassFactory2 *This);HRESULT ( *CreateInstance)(IClassFactory2 *This, IUnknown *pUnkOuter,  IID * riid, void **ppvObject);HRESULT ( *LockServer)(IClassFactory2 *This, BOOL fLock);HRESULT ( *GetLicInfo)(IClassFactory2 *This, LICINFO *pLicInfo);HRESULT ( *RequestLicKey)(IClassFactory2 *This, DWORD dwReserved, BSTR *pBstrKey);HRESULT ( *CreateInstanceLic)(IClassFactory2 *This, IUnknown *pUnkOuter, IUnknown *pUnkReserved,  IID * riid, BSTR bstrKey, PVOID *ppvObj);};
struct IExtractImage2Vtbl {HRESULT ( *QueryInterface)(IExtractImage2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IExtractImage2 *This);ULONG ( *Release)(IExtractImage2 *This);HRESULT ( *GetLocation)(IExtractImage2 *This, LPWSTR pszPathBuffer, DWORD cch, DWORD *pdwPriority,  SIZE *prgSize, DWORD dwRecClrDepth, DWORD *pdwFlags);HRESULT ( *Extract)(IExtractImage2 *This, HBITMAP *phBmpThumbnail);HRESULT ( *GetDateStamp)(IExtractImage2 *This, FILETIME *pDateStamp);};
struct IWbemEventSinkVtbl {HRESULT ( *QueryInterface)(IWbemEventSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemEventSink *This);ULONG ( *Release)(IWbemEventSink *This);HRESULT ( *Indicate)(IWbemEventSink *This, int lObjectCount, IWbemClassObject **apObjArray);HRESULT ( *SetStatus)(IWbemEventSink *This, int lFlags, HRESULT hResult, BSTR strParam, IWbemClassObject *pObjParam);HRESULT ( *SetSinkSecurity)(IWbemEventSink *This, int lSDLength, BYTE *pSD);HRESULT ( *IsActive)(IWbemEventSink *This);HRESULT ( *GetRestrictedSink)(IWbemEventSink *This, int lNumQueries,  LPCWSTR *awszQueries, IUnknown *pCallback, IWbemEventSink **ppSink);HRESULT ( *SetBatchingParameters)(IWbemEventSink *This, LONG lFlags, DWORD dwMaxBufferSize, DWORD dwMaxSendLatency);};
struct tagFINDREPLACEW {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;DWORD Flags;LPWSTR lpstrFindWhat;LPWSTR lpstrReplaceWith;WORD wFindWhatLen;WORD wReplaceWithLen;LPARAM lCustData;LPFRHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct IWiaVideoVtbl {HRESULT ( *QueryInterface)(IWiaVideo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWiaVideo *This);ULONG ( *Release)(IWiaVideo *This);HRESULT ( *get_PreviewVisible)(IWiaVideo *This, BOOL *pbPreviewVisible);HRESULT ( *put_PreviewVisible)(IWiaVideo *This, BOOL bPreviewVisible);HRESULT ( *get_ImagesDirectory)(IWiaVideo *This, BSTR *pbstrImageDirectory);HRESULT ( *put_ImagesDirectory)(IWiaVideo *This, BSTR bstrImageDirectory);HRESULT ( *CreateVideoByWiaDevID)(IWiaVideo *This, BSTR bstrWiaDeviceID, HWND hwndParent, BOOL bStretchToFitParent, BOOL bAutoBeginPlayback);HRESULT ( *CreateVideoByDevNum)(IWiaVideo *This, UINT uiDeviceNumber, HWND hwndParent, BOOL bStretchToFitParent, BOOL bAutoBeginPlayback);HRESULT ( *CreateVideoByName)(IWiaVideo *This, BSTR bstrFriendlyName, HWND hwndParent, BOOL bStretchToFitParent, BOOL bAutoBeginPlayback);HRESULT ( *DestroyVideo)(IWiaVideo *This);HRESULT ( *Play)(IWiaVideo *This);HRESULT ( *Pause)(IWiaVideo *This);HRESULT ( *TakePicture)(IWiaVideo *This, BSTR *pbstrNewImageFilename);HRESULT ( *ResizeVideo)(IWiaVideo *This, BOOL bStretchToFitParent);HRESULT ( *GetCurrentState)(IWiaVideo *This, WIAVIDEO_STATE *pState);};
struct _OEMCUIPPARAM {DWORD cbSize;POEMUIOBJ poemuiobj;HANDLE hPrinter;PWSTR pPrinterName;HANDLE hModule;HANDLE hOEMHeap;PDEVMODE pPublicDM;PVOID pOEMDM;DWORD dwFlags;POPTITEM pDrvOptItems;DWORD cDrvOptItems;POPTITEM pOEMOptItems;DWORD cOEMOptItems;PVOID pOEMUserData;OEMCUIPCALLBACK OEMCUIPCallback;};
struct IStorageVtbl {HRESULT ( *QueryInterface)(IStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStorage *This);ULONG ( *Release)(IStorage *This);HRESULT ( *CreateStream)(IStorage *This,  OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm);HRESULT ( *OpenStream)(IStorage *This,  OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);HRESULT ( *CreateStorage)(IStorage *This,  OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage **ppstg);HRESULT ( *OpenStorage)(IStorage *This,  OLECHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg);HRESULT ( *CopyTo)(IStorage *This, DWORD ciidExclude,  IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);HRESULT ( *MoveElementTo)(IStorage *This,  OLECHAR *pwcsName, IStorage *pstgDest,  OLECHAR *pwcsNewName, DWORD grfFlags);HRESULT ( *Commit)(IStorage *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IStorage *This);HRESULT ( *EnumElements)(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);HRESULT ( *DestroyElement)(IStorage *This,  OLECHAR *pwcsName);HRESULT ( *RenameElement)(IStorage *This,  OLECHAR *pwcsOldName,  OLECHAR *pwcsNewName);HRESULT ( *SetElementTimes)(IStorage *This,  OLECHAR *pwcsName,  FILETIME *pctime,  FILETIME *patime,  FILETIME *pmtime);HRESULT ( *SetClass)(IStorage *This,  IID * clsid);HRESULT ( *SetStateBits)(IStorage *This, DWORD grfStateBits, DWORD grfMask);HRESULT ( *Stat)(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct _D3DTLVERTEX {_D3DTLVERTEX___0F2CDCA047003D8EC75118693930E691 __anonymous0;_D3DTLVERTEX___6CA934479C1F92723C45B62B9DC7F703 __anonymous1;_D3DTLVERTEX___BDFC1E337EC7BF58E4386644A37C7111 __anonymous2;_D3DTLVERTEX___ED3D3C9797719C595EAD57A73B2054F3 __anonymous3;_D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282 __anonymous4;_D3DLVERTEX___30594A6BB70EFF251680D22A869004B0 __anonymous6;_D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 __anonymous8;_D3DLVERTEX___7013070F7992C3CB148910863AB1E659 __anonymous11;};
struct _D3DLVERTEX {_D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 __anonymous0;_D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA __anonymous2;_D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21 __anonymous4;DWORD dwReserved;_D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282 __anonymous6;_D3DLVERTEX___30594A6BB70EFF251680D22A869004B0 __anonymous8;_D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 __anonymous10;_D3DLVERTEX___7013070F7992C3CB148910863AB1E659 __anonymous13;};
struct tagFUNCDESC {MEMBERID memid;SCODE *lprgscode;ELEMDESC *lprgelemdescParam;FUNCKIND funckind;INVOKEKIND invkind;CALLCONV callconv;SHORT cParams;SHORT cParamsOpt;SHORT oVft;SHORT cScodes;ELEMDESC elemdescFunc;WORD wFuncFlags;};
struct tagOFN_NT4W {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpstrFilter;LPWSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPWSTR lpstrFile;DWORD nMaxFile;LPWSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCWSTR lpstrInitialDir;LPCWSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCWSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct _MMIOINFO {DWORD dwFlags;FOURCC fccIOProc;LPMMIOPROC pIOProc;UINT wErrorRet;HTASK htask;LONG cchBuffer;HPSTR pchBuffer;HPSTR pchNext;HPSTR pchEndRead;HPSTR pchEndWrite;LONG lBufOffset;LONG lDiskOffset;DWORD adwInfo[3];DWORD dwReserved1;DWORD dwReserved2;HMMIO hmmio;};
struct tagOFNW {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpstrFilter;LPWSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPWSTR lpstrFile;DWORD nMaxFile;LPWSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCWSTR lpstrInitialDir;LPCWSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCWSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCWSTR lpTemplateName;void *pvReserved;DWORD dwReserved;DWORD FlagsEx;};
struct IInternetProtocolInfoVtbl {HRESULT ( *QueryInterface)(IInternetProtocolInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolInfo *This);ULONG ( *Release)(IInternetProtocolInfo *This);HRESULT ( *ParseUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT ( *CombineUrl)(IInternetProtocolInfo *This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT ( *CompareUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags);HRESULT ( *QueryInfo)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD *pcbBuf, DWORD dwReserved);};
struct IBindStatusCallbackVtbl {HRESULT ( *QueryInterface)(IBindStatusCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindStatusCallback *This);ULONG ( *Release)(IBindStatusCallback *This);HRESULT ( *OnStartBinding)(IBindStatusCallback *This, DWORD dwReserved, IBinding *pib);HRESULT ( *GetPriority)(IBindStatusCallback *This, LONG *pnPriority);HRESULT ( *OnLowResource)(IBindStatusCallback *This, DWORD reserved);HRESULT ( *OnProgress)(IBindStatusCallback *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *OnStopBinding)(IBindStatusCallback *This, HRESULT hresult, LPCWSTR szError);HRESULT ( *GetBindInfo)(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *OnDataAvailable)(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);HRESULT ( *OnObjectAvailable)(IBindStatusCallback *This,  IID * riid, IUnknown *punk);};
struct IInternetProtocolVtbl {HRESULT ( *QueryInterface)(IInternetProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocol *This);ULONG ( *Release)(IInternetProtocol *This);HRESULT ( *Start)(IInternetProtocol *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);HRESULT ( *Continue)(IInternetProtocol *This, PROTOCOLDATA *pProtocolData);HRESULT ( *Abort)(IInternetProtocol *This, HRESULT hrReason, DWORD dwOptions);HRESULT ( *Terminate)(IInternetProtocol *This, DWORD dwOptions);HRESULT ( *Suspend)(IInternetProtocol *This);HRESULT ( *Resume)(IInternetProtocol *This);HRESULT ( *Read)(IInternetProtocol *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Seek)(IInternetProtocol *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT ( *LockRequest)(IInternetProtocol *This, DWORD dwOptions);HRESULT ( *UnlockRequest)(IInternetProtocol *This);};
struct _SHCREATEPROCESSINFOW {DWORD cbSize;ULONG fMask;HWND hwnd;LPCWSTR pszFile;LPCWSTR pszParameters;LPCWSTR pszCurrentDirectory;HANDLE hUserToken;LPSECURITY_ATTRIBUTES lpProcessAttributes;LPSECURITY_ATTRIBUTES lpThreadAttributes;BOOL bInheritHandles;DWORD dwCreationFlags;LPSTARTUPINFOW lpStartupInfo;LPPROCESS_INFORMATION lpProcessInformation;};
struct IActionProgressVtbl {HRESULT ( *QueryInterface)(IActionProgress *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActionProgress *This);ULONG ( *Release)(IActionProgress *This);HRESULT ( *Begin)(IActionProgress *This, SPACTION action, SPBEGINF flags);HRESULT ( *UpdateProgress)(IActionProgress *This, ULONGLONG ulCompleted, ULONGLONG ulTotal);HRESULT ( *UpdateText)(IActionProgress *This, SPTEXT sptext, LPCWSTR pszText, BOOL fMayCompact);HRESULT ( *QueryCancel)(IActionProgress *This, BOOL *pfCancelled);HRESULT ( *ResetCancel)(IActionProgress *This);HRESULT ( *End)(IActionProgress *This);};
struct _PROPSHEETPAGEA_V1 {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEA___B64A5FEB82A45975B190BC8DCA872511 __anonymous0;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous3;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT *pcRefParent;};
struct _PROPSHEETPAGEA_V2 {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEA___B64A5FEB82A45975B190BC8DCA872511 __anonymous0;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous3;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT *pcRefParent;LPCSTR pszHeaderTitle;LPCSTR pszHeaderSubTitle;};
struct _PROPSHEETPAGEW_V1 {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEW___26DC58415637CAEA1C2B7198DBAAFB8E __anonymous0;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous3;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT *pcRefParent;};
struct _PROPSHEETPAGEW_V2 {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEW___26DC58415637CAEA1C2B7198DBAAFB8E __anonymous0;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous3;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT *pcRefParent;LPCWSTR pszHeaderTitle;LPCWSTR pszHeaderSubTitle;};
struct _SHELLEXECUTEINFOW {DWORD cbSize;ULONG fMask;HWND hwnd;LPCWSTR lpVerb;LPCWSTR lpFile;LPCWSTR lpParameters;LPCWSTR lpDirectory;int nShow;HINSTANCE hInstApp;LPVOID lpIDList;LPCWSTR lpClass;HKEY hkeyClass;DWORD dwHotKey;_SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 __anonymous0;HANDLE hProcess;};
typedef DHPDEV ( *PFN_DrvEnablePDEV)(PDEVMODEW, LPWSTR, ULONG, HSURF *, ULONG, GDIINFO *, ULONG, PDEVINFO, HDEV, LPWSTR, HANDLE);
struct tACMFILTERCHOOSEW {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFILTER pwfltr;DWORD cbwfltr;LPCWSTR pszTitle;WCHAR szFilterTag[48];WCHAR szFilter[128];LPWSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFILTER pwfltrEnum;HINSTANCE hInstance;LPCWSTR pszTemplateName;LPARAM lCustData;ACMFILTERCHOOSEHOOKPROCW pfnHook;};
struct tACMFORMATCHOOSEW {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFORMATEX pwfx;DWORD cbwfx;LPCWSTR pszTitle;WCHAR szFormatTag[48];WCHAR szFormat[128];LPWSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFORMATEX pwfxEnum;HINSTANCE hInstance;LPCWSTR pszTemplateName;LPARAM lCustData;ACMFORMATCHOOSEHOOKPROCW pfnHook;};
struct ICategorizerVtbl {HRESULT ( *QueryInterface)(ICategorizer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICategorizer *This);ULONG ( *Release)(ICategorizer *This);HRESULT ( *GetDescription)(ICategorizer *This, LPWSTR pszDesc, UINT cch);HRESULT ( *GetCategory)(ICategorizer *This, UINT cidl, LPCITEMIDLIST *apidl, DWORD *rgCategoryIds);HRESULT ( *GetCategoryInfo)(ICategorizer *This, DWORD dwCategoryId, CATEGORY_INFO *pci);HRESULT ( *CompareCategory)(ICategorizer *This, CATSORT_FLAGS csfFlags, DWORD dwCategoryId1, DWORD dwCategoryId2);};
struct _OPTITEM {WORD cbSize;BYTE Level;BYTE DlgPageIdx;DWORD Flags;ULONG_PTR UserData;LPTSTR pName;_OPTITEM___DEC5B3968A449581A37FC9B786F6173F __anonymous0;_OPTITEM___74C825475D62323C9F8B7568E9B8E215 __anonymous1;POPTTYPE pOptType;DWORD HelpIndex;BYTE DMPubID;BYTE UserItemID;WORD wReserved;POIEXT pOIExt;ULONG_PTR dwReserved[3];};
struct tagPDEXW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;DWORD Flags2;DWORD ExclusionFlags;DWORD nPageRanges;DWORD nMaxPageRanges;LPPRINTPAGERANGE lpPageRanges;DWORD nMinPage;DWORD nMaxPage;DWORD nCopies;HINSTANCE hInstance;LPCWSTR lpPrintTemplateName;LPUNKNOWN lpCallback;DWORD nPropertyPages;HPROPSHEETPAGE *lphPropertyPages;DWORD nStartPage;DWORD dwResultAction;};
struct _A63D84EB732F4E602FF2E049D2D99B44 {DWORD dwStructSize;SCARDCONTEXT hSCardContext;HWND hwndOwner;DWORD dwFlags;LPCWSTR lpstrTitle;LPCWSTR lpstrSearchDesc;HICON hIcon;POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;LPOCNCONNPROCW lpfnConnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;LPWSTR lpstrRdr;DWORD nMaxRdr;LPWSTR lpstrCard;DWORD nMaxCard;DWORD dwActiveProtocol;SCARDHANDLE hCardHandle;};
struct _WINDBG_OLDKD_EXTENSION_APIS {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION32 lpGetExpressionRoutine;PWINDBG_GET_SYMBOL32 lpGetSymbolRoutine;PWINDBG_DISASM32 lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 lpReadVirtualMemRoutine;PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 lpWriteVirtualMemRoutine;PWINDBG_OLDKD_READ_PHYSICAL_MEMORY lpReadPhysicalMemRoutine;PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY lpWritePhysicalMemRoutine;};
struct IInternetZoneManagerVtbl {HRESULT ( *QueryInterface)(IInternetZoneManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetZoneManager *This);ULONG ( *Release)(IInternetZoneManager *This);HRESULT ( *GetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT ( *SetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT ( *GetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);HRESULT ( *SetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone,  GUID * guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *GetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *SetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *PromptAction)(IInternetZoneManager *This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);HRESULT ( *LogAction)(IInternetZoneManager *This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);HRESULT ( *CreateZoneEnumerator)(IInternetZoneManager *This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);HRESULT ( *GetZoneAt)(IInternetZoneManager *This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);HRESULT ( *DestroyZoneEnumerator)(IInternetZoneManager *This, DWORD dwEnum);HRESULT ( *CopyTemplatePoliciesToZone)(IInternetZoneManager *This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);};
struct IPerPropertyBrowsingVtbl {HRESULT ( *QueryInterface)(IPerPropertyBrowsing *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPerPropertyBrowsing *This);ULONG ( *Release)(IPerPropertyBrowsing *This);HRESULT ( *GetDisplayString)(IPerPropertyBrowsing *This, DISPID dispID, BSTR *pBstr);HRESULT ( *MapPropertyToPage)(IPerPropertyBrowsing *This, DISPID dispID, CLSID *pClsid);HRESULT ( *GetPredefinedStrings)(IPerPropertyBrowsing *This, DISPID dispID, CALPOLESTR *pCaStringsOut, CADWORD *pCaCookiesOut);HRESULT ( *GetPredefinedValue)(IPerPropertyBrowsing *This, DISPID dispID, DWORD dwCookie, VARIANT *pVarOut);};
typedef DWORD ( *RasCustomScriptExecuteFn)(HANDLE hPort, LPCWSTR lpszPhonebook, LPCWSTR lpszEntryName, PFNRASGETBUFFER pfnRasGetBuffer, PFNRASFREEBUFFER pfnRasFreeBuffer, PFNRASSENDBUFFER pfnRasSendBuffer, PFNRASRECEIVEBUFFER pfnRasReceiveBuffer, PFNRASRETRIEVEBUFFER pfnRasRetrieveBuffer, HWND hWnd, struct tagRASDIALPARAMSA *pRasDialParams, PVOID pvReserved);
struct IDirectMusicBufferVtbl {HRESULT ( *QueryInterface)(IDirectMusicBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusicBuffer *This);ULONG ( *Release)(IDirectMusicBuffer *This);HRESULT ( *Flush)(IDirectMusicBuffer *This);HRESULT ( *TotalTime)(IDirectMusicBuffer *This, LPREFERENCE_TIME prtTime);HRESULT ( *PackStructured)(IDirectMusicBuffer *This, REFERENCE_TIME rt, DWORD dwChannelGroup, DWORD dwChannelMessage);HRESULT ( *PackUnstructured)(IDirectMusicBuffer *This, REFERENCE_TIME rt, DWORD dwChannelGroup, DWORD cb, LPBYTE lpb);HRESULT ( *ResetReadPtr)(IDirectMusicBuffer *This);HRESULT ( *GetNextEvent)(IDirectMusicBuffer *This, LPREFERENCE_TIME prt, LPDWORD pdwChannelGroup, LPDWORD pdwLength, LPBYTE *ppData);HRESULT ( *GetRawBufferPtr)(IDirectMusicBuffer *This, LPBYTE *ppData);HRESULT ( *GetStartTime)(IDirectMusicBuffer *This, LPREFERENCE_TIME prt);HRESULT ( *GetUsedBytes)(IDirectMusicBuffer *This, LPDWORD pcb);HRESULT ( *GetMaxBytes)(IDirectMusicBuffer *This, LPDWORD pcb);HRESULT ( *GetBufferFormat)(IDirectMusicBuffer *This, LPGUID pGuidFormat);HRESULT ( *SetStartTime)(IDirectMusicBuffer *This, REFERENCE_TIME rt);HRESULT ( *SetUsedBytes)(IDirectMusicBuffer *This, DWORD cb);};
struct IWbemObjectAccessVtbl {HRESULT ( *QueryInterface)(IWbemObjectAccess *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWbemObjectAccess *This);ULONG ( *Release)(IWbemObjectAccess *This);HRESULT ( *GetQualifierSet)(IWbemObjectAccess *This, IWbemQualifierSet **ppQualSet);HRESULT ( *Get)(IWbemObjectAccess *This, LPCWSTR wszName, int lFlags, VARIANT *pVal, CIMTYPE *pType, int *plFlavor);HRESULT ( *Put)(IWbemObjectAccess *This, LPCWSTR wszName, int lFlags, VARIANT *pVal, CIMTYPE Type);HRESULT ( *Delete)(IWbemObjectAccess *This, LPCWSTR wszName);HRESULT ( *GetNames)(IWbemObjectAccess *This, LPCWSTR wszQualifierName, int lFlags, VARIANT *pQualifierVal, SAFEARRAY **pNames);HRESULT ( *BeginEnumeration)(IWbemObjectAccess *This, int lEnumFlags);HRESULT ( *Next)(IWbemObjectAccess *This, int lFlags, BSTR *strName, VARIANT *pVal, CIMTYPE *pType, int *plFlavor);HRESULT ( *EndEnumeration)(IWbemObjectAccess *This);HRESULT ( *GetPropertyQualifierSet)(IWbemObjectAccess *This, LPCWSTR wszProperty, IWbemQualifierSet **ppQualSet);HRESULT ( *Clone)(IWbemObjectAccess *This, IWbemClassObject **ppCopy);HRESULT ( *GetObjectText)(IWbemObjectAccess *This, int lFlags, BSTR *pstrObjectText);HRESULT ( *SpawnDerivedClass)(IWbemObjectAccess *This, int lFlags, IWbemClassObject **ppNewClass);HRESULT ( *SpawnInstance)(IWbemObjectAccess *This, int lFlags, IWbemClassObject **ppNewInstance);HRESULT ( *CompareTo)(IWbemObjectAccess *This, int lFlags, IWbemClassObject *pCompareTo);HRESULT ( *GetPropertyOrigin)(IWbemObjectAccess *This, LPCWSTR wszName, BSTR *pstrClassName);HRESULT ( *InheritsFrom)(IWbemObjectAccess *This, LPCWSTR strAncestor);HRESULT ( *GetMethod)(IWbemObjectAccess *This, LPCWSTR wszName, int lFlags, IWbemClassObject **ppInSignature, IWbemClassObject **ppOutSignature);HRESULT ( *PutMethod)(IWbemObjectAccess *This, LPCWSTR wszName, int lFlags, IWbemClassObject *pInSignature, IWbemClassObject *pOutSignature);HRESULT ( *DeleteMethod)(IWbemObjectAccess *This, LPCWSTR wszName);HRESULT ( *BeginMethodEnumeration)(IWbemObjectAccess *This, int lEnumFlags);HRESULT ( *NextMethod)(IWbemObjectAccess *This, int lFlags, BSTR *pstrName, IWbemClassObject **ppInSignature, IWbemClassObject **ppOutSignature);HRESULT ( *EndMethodEnumeration)(IWbemObjectAccess *This);HRESULT ( *GetMethodQualifierSet)(IWbemObjectAccess *This, LPCWSTR wszMethod, IWbemQualifierSet **ppQualSet);HRESULT ( *GetMethodOrigin)(IWbemObjectAccess *This, LPCWSTR wszMethodName, BSTR *pstrClassName);HRESULT ( *GetPropertyHandle)(IWbemObjectAccess *This, LPCWSTR wszPropertyName, CIMTYPE *pType, int *plHandle);HRESULT ( *WritePropertyValue)(IWbemObjectAccess *This, int lHandle, int lNumBytes,  byte *aData);HRESULT ( *ReadPropertyValue)(IWbemObjectAccess *This, int lHandle, int lBufferSize, int *plNumBytes, byte *aData);HRESULT ( *ReadDWORD)(IWbemObjectAccess *This, int lHandle, DWORD *pdw);HRESULT ( *WriteDWORD)(IWbemObjectAccess *This, int lHandle, DWORD dw);HRESULT ( *ReadQWORD)(IWbemObjectAccess *This, int lHandle, unsigned long long *pqw);HRESULT ( *WriteQWORD)(IWbemObjectAccess *This, int lHandle, unsigned long long pw);HRESULT ( *GetPropertyInfoByHandle)(IWbemObjectAccess *This, int lHandle, BSTR *pstrName, CIMTYPE *pType);HRESULT ( *Lock)(IWbemObjectAccess *This, int lFlags);HRESULT ( *Unlock)(IWbemObjectAccess *This, int lFlags);};
struct ISoftDistExtVtbl {HRESULT ( *QueryInterface)(ISoftDistExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoftDistExt *This);ULONG ( *Release)(ISoftDistExt *This);HRESULT ( *ProcessSoftDist)(ISoftDistExt *This, LPCWSTR szCDFURL, IXMLElement *pSoftDistElement, LPSOFTDISTINFO lpsdi);HRESULT ( *GetFirstCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT ( *GetNextCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT ( *AsyncInstallDistributionUnit)(ISoftDistExt *This, IBindCtx *pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh);};
struct _PROPSHEETPAGEA {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEA___B64A5FEB82A45975B190BC8DCA872511 __anonymous0;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous3;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT *pcRefParent;LPCSTR pszHeaderTitle;LPCSTR pszHeaderSubTitle;HANDLE hActCtx;};
struct _PROPSHEETPAGEW {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEW___26DC58415637CAEA1C2B7198DBAAFB8E __anonymous0;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous3;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT *pcRefParent;LPCWSTR pszHeaderTitle;LPCWSTR pszHeaderSubTitle;HANDLE hActCtx;};
struct tagPSDW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCWSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
struct tagPDW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;WORD nFromPage;WORD nToPage;WORD nMinPage;WORD nMaxPage;WORD nCopies;HINSTANCE hInstance;LPARAM lCustData;LPPRINTHOOKPROC lpfnPrintHook;LPSETUPHOOKPROC lpfnSetupHook;LPCWSTR lpPrintTemplateName;LPCWSTR lpSetupTemplateName;HGLOBAL hPrintTemplate;HGLOBAL hSetupTemplate;};
struct _1FC20381981E06D3B4F68D6006129906 {DWORD dwStructSize;HWND hwndOwner;SCARDCONTEXT hSCardContext;LPWSTR lpstrGroupNames;DWORD nMaxGroupNames;LPWSTR lpstrCardNames;DWORD nMaxCardNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPWSTR lpstrRdr;DWORD nMaxRdr;LPWSTR lpstrCard;DWORD nMaxCard;LPCWSTR lpstrTitle;DWORD dwFlags;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;DWORD dwActiveProtocol;LPOCNCONNPROCW lpfnConnect;LPOCNCHKPROC lpfnCheck;LPOCNDSCPROC lpfnDisconnect;SCARDHANDLE hCardHandle;};
struct _IP_ADAPTER_ADDRESSES {_IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835 __anonymous0;struct _IP_ADAPTER_ADDRESSES *Next;PCHAR AdapterName;PIP_ADAPTER_UNICAST_ADDRESS FirstUnicastAddress;PIP_ADAPTER_ANYCAST_ADDRESS FirstAnycastAddress;PIP_ADAPTER_MULTICAST_ADDRESS FirstMulticastAddress;PIP_ADAPTER_DNS_SERVER_ADDRESS FirstDnsServerAddress;PWCHAR DnsSuffix;PWCHAR Description;PWCHAR FriendlyName;BYTE PhysicalAddress[8];DWORD PhysicalAddressLength;DWORD Flags;DWORD Mtu;DWORD IfType;IF_OPER_STATUS OperStatus;DWORD Ipv6IfIndex;DWORD ZoneIndices[16];PIP_ADAPTER_PREFIX FirstPrefix;};
struct IAccPropServicesVtbl {HRESULT ( *QueryInterface)(IAccPropServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccPropServices *This);ULONG ( *Release)(IAccPropServices *This);HRESULT ( *SetPropValue)(IAccPropServices *This,  BYTE *pIDString, DWORD dwIDStringLen, MSAAPROPID idProp, VARIANT var);HRESULT ( *SetPropServer)(IAccPropServices *This,  BYTE *pIDString, DWORD dwIDStringLen,  MSAAPROPID *paProps, int cProps, IAccPropServer *pServer, AnnoScope annoScope);HRESULT ( *ClearProps)(IAccPropServices *This,  BYTE *pIDString, DWORD dwIDStringLen,  MSAAPROPID *paProps, int cProps);HRESULT ( *SetHwndProp)(IAccPropServices *This, HWND hwnd, DWORD idObject, DWORD idChild, MSAAPROPID idProp, VARIANT var);HRESULT ( *SetHwndPropStr)(IAccPropServices *This, HWND hwnd, DWORD idObject, DWORD idChild, MSAAPROPID idProp, LPCWSTR str);HRESULT ( *SetHwndPropServer)(IAccPropServices *This, HWND hwnd, DWORD idObject, DWORD idChild,  MSAAPROPID *paProps, int cProps, IAccPropServer *pServer, AnnoScope annoScope);HRESULT ( *ClearHwndProps)(IAccPropServices *This, HWND hwnd, DWORD idObject, DWORD idChild,  MSAAPROPID *paProps, int cProps);HRESULT ( *ComposeHwndIdentityString)(IAccPropServices *This, HWND hwnd, DWORD idObject, DWORD idChild, BYTE **ppIDString, DWORD *pdwIDStringLen);HRESULT ( *DecomposeHwndIdentityString)(IAccPropServices *This,  BYTE *pIDString, DWORD dwIDStringLen, HWND *phwnd, DWORD *pidObject, DWORD *pidChild);HRESULT ( *SetHmenuProp)(IAccPropServices *This, HMENU hmenu, DWORD idChild, MSAAPROPID idProp, VARIANT var);HRESULT ( *SetHmenuPropStr)(IAccPropServices *This, HMENU hmenu, DWORD idChild, MSAAPROPID idProp, LPCWSTR str);HRESULT ( *SetHmenuPropServer)(IAccPropServices *This, HMENU hmenu, DWORD idChild,  MSAAPROPID *paProps, int cProps, IAccPropServer *pServer, AnnoScope annoScope);HRESULT ( *ClearHmenuProps)(IAccPropServices *This, HMENU hmenu, DWORD idChild,  MSAAPROPID *paProps, int cProps);HRESULT ( *ComposeHmenuIdentityString)(IAccPropServices *This, HMENU hmenu, DWORD idChild, BYTE **ppIDString, DWORD *pdwIDStringLen);HRESULT ( *DecomposeHmenuIdentityString)(IAccPropServices *This,  BYTE *pIDString, DWORD dwIDStringLen, HMENU *phmenu, DWORD *pidChild);};
struct IProgressDialogVtbl {HRESULT ( *QueryInterface)(IProgressDialog *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IProgressDialog *This);ULONG ( *Release)(IProgressDialog *This);HRESULT ( *StartProgressDialog)(IProgressDialog *This, HWND hwndParent, IUnknown *punkEnableModless, DWORD dwFlags, LPCVOID pvResevered);HRESULT ( *StopProgressDialog)(IProgressDialog *This);HRESULT ( *SetTitle)(IProgressDialog *This, LPCWSTR pwzTitle);HRESULT ( *SetAnimation)(IProgressDialog *This, HINSTANCE hInstAnimation, UINT idAnimation);BOOL ( *HasUserCancelled)(IProgressDialog *This);HRESULT ( *SetProgress)(IProgressDialog *This, DWORD dwCompleted, DWORD dwTotal);HRESULT ( *SetProgress64)(IProgressDialog *This, ULONGLONG ullCompleted, ULONGLONG ullTotal);HRESULT ( *SetLine)(IProgressDialog *This, DWORD dwLineNum, LPCWSTR pwzString, BOOL fCompactPath, LPCVOID pvResevered);HRESULT ( *SetCancelMsg)(IProgressDialog *This, LPCWSTR pwzCancelMsg, LPCVOID pvResevered);HRESULT ( *Timer)(IProgressDialog *This, DWORD dwTimerAction, LPCVOID pvResevered);};
struct IShellLinkWVtbl {HRESULT ( *QueryInterface)(IShellLinkW *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellLinkW *This);ULONG ( *Release)(IShellLinkW *This);HRESULT ( *GetPath)(IShellLinkW *This, LPWSTR pszFile, int cch, WIN32_FIND_DATAW *pfd, DWORD fFlags);HRESULT ( *GetIDList)(IShellLinkW *This, LPITEMIDLIST *ppidl);HRESULT ( *SetIDList)(IShellLinkW *This, LPCITEMIDLIST pidl);HRESULT ( *GetDescription)(IShellLinkW *This, LPWSTR pszName, int cch);HRESULT ( *SetDescription)(IShellLinkW *This, LPCWSTR pszName);HRESULT ( *GetWorkingDirectory)(IShellLinkW *This, LPWSTR pszDir, int cch);HRESULT ( *SetWorkingDirectory)(IShellLinkW *This, LPCWSTR pszDir);HRESULT ( *GetArguments)(IShellLinkW *This, LPWSTR pszArgs, int cch);HRESULT ( *SetArguments)(IShellLinkW *This, LPCWSTR pszArgs);HRESULT ( *GetHotkey)(IShellLinkW *This, WORD *pwHotkey);HRESULT ( *SetHotkey)(IShellLinkW *This, WORD wHotkey);HRESULT ( *GetShowCmd)(IShellLinkW *This, int *piShowCmd);HRESULT ( *SetShowCmd)(IShellLinkW *This, int iShowCmd);HRESULT ( *GetIconLocation)(IShellLinkW *This, LPWSTR pszIconPath, int cch, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkW *This, LPCWSTR pszIconPath, int iIcon);HRESULT ( *SetRelativePath)(IShellLinkW *This, LPCWSTR pszPathRel, DWORD dwReserved);HRESULT ( *Resolve)(IShellLinkW *This, HWND hwnd, DWORD fFlags);HRESULT ( *SetPath)(IShellLinkW *This, LPCWSTR pszFile);};
struct IFontVtbl {HRESULT ( *QueryInterface)(IFont *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFont *This);ULONG ( *Release)(IFont *This);HRESULT ( *get_Name)(IFont *This, BSTR *pName);HRESULT ( *put_Name)(IFont *This, BSTR name);HRESULT ( *get_Size)(IFont *This, CY *pSize);HRESULT ( *put_Size)(IFont *This, CY size);HRESULT ( *get_Bold)(IFont *This, BOOL *pBold);HRESULT ( *put_Bold)(IFont *This, BOOL bold);HRESULT ( *get_Italic)(IFont *This, BOOL *pItalic);HRESULT ( *put_Italic)(IFont *This, BOOL italic);HRESULT ( *get_Underline)(IFont *This, BOOL *pUnderline);HRESULT ( *put_Underline)(IFont *This, BOOL underline);HRESULT ( *get_Strikethrough)(IFont *This, BOOL *pStrikethrough);HRESULT ( *put_Strikethrough)(IFont *This, BOOL strikethrough);HRESULT ( *get_Weight)(IFont *This, SHORT *pWeight);HRESULT ( *put_Weight)(IFont *This, SHORT weight);HRESULT ( *get_Charset)(IFont *This, SHORT *pCharset);HRESULT ( *put_Charset)(IFont *This, SHORT charset);HRESULT ( *get_hFont)(IFont *This, HFONT *phFont);HRESULT ( *Clone)(IFont *This, IFont **ppFont);HRESULT ( *IsEqual)(IFont *This, IFont *pFontOther);HRESULT ( *SetRatio)(IFont *This, LONG cyLogical, LONG cyHimetric);HRESULT ( *QueryTextMetrics)(IFont *This, TEXTMETRICOLE *pTM);HRESULT ( *AddRefHfont)(IFont *This, HFONT hFont);HRESULT ( *ReleaseHfont)(IFont *This, HFONT hFont);HRESULT ( *SetHdc)(IFont *This, HDC hDC);};
struct _WINDBG_EXTENSION_APIS32 {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION32 lpGetExpressionRoutine;PWINDBG_GET_SYMBOL32 lpGetSymbolRoutine;PWINDBG_DISASM32 lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 lpReadProcessMemoryRoutine;PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 lpWriteProcessMemoryRoutine;PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;PWINDBG_IOCTL_ROUTINE lpIoctlRoutine;PWINDBG_STACKTRACE_ROUTINE32 lpStackTraceRoutine;};
struct _WINDBG_EXTENSION_APIS64 {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION64 lpGetExpressionRoutine;PWINDBG_GET_SYMBOL64 lpGetSymbolRoutine;PWINDBG_DISASM64 lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 lpReadProcessMemoryRoutine;PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 lpWriteProcessMemoryRoutine;PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;PWINDBG_IOCTL_ROUTINE lpIoctlRoutine;PWINDBG_STACKTRACE_ROUTINE64 lpStackTraceRoutine;};
struct _WINDBG_EXTENSION_APIS {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION lpGetExpressionRoutine;PWINDBG_GET_SYMBOL lpGetSymbolRoutine;PWINDBG_DISASM lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;PWINDBG_READ_PROCESS_MEMORY_ROUTINE lpReadProcessMemoryRoutine;PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE lpWriteProcessMemoryRoutine;PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;PWINDBG_IOCTL_ROUTINE lpIoctlRoutine;PWINDBG_STACKTRACE_ROUTINE lpStackTraceRoutine;};
struct _PROPSHEETHEADERW {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous0;LPCWSTR pszCaption;UINT nPages;_PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 __anonymous4;_PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 __anonymous5;PFNPROPSHEETCALLBACK pfnCallback;_PROPSHEETHEADERW___C635E94935336589E496FC759198B86F __anonymous6;HPALETTE hplWatermark;_PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779 __anonymous7;};
struct tagCHOOSEFONTW {DWORD lStructSize;HWND hwndOwner;HDC hDC;LPLOGFONTW lpLogFont;INT iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;LPCFHOOKPROC lpfnHook;LPCWSTR lpTemplateName;HINSTANCE hInstance;LPWSTR lpszStyle;WORD nFontType;WORD ___MISSING_ALIGNMENT__;INT nSizeMin;INT nSizeMax;};
struct _MONITORREG {DWORD cbSize;LONG ( *fpCreateKey)(HANDLE hcKey, LPCTSTR pszSubKey, DWORD dwOptions, REGSAM samDesired, PSECURITY_ATTRIBUTES pSecurityAttributes, PHANDLE phckResult, PDWORD pdwDisposition, HANDLE hSpooler);LONG ( *fpOpenKey)(HANDLE hcKey, LPCTSTR pszSubKey, REGSAM samDesired, PHANDLE phkResult, HANDLE hSpooler);LONG ( *fpCloseKey)(HANDLE hcKey, HANDLE hSpooler);LONG ( *fpDeleteKey)(HANDLE hcKey, LPCTSTR pszSubKey, HANDLE hSpooler);LONG ( *fpEnumKey)(HANDLE hcKey, DWORD dwIndex, LPTSTR pszName, PDWORD pcchName, PFILETIME pftLastWriteTime, HANDLE hSpooler);LONG ( *fpQueryInfoKey)(HANDLE hcKey, PDWORD pcSubKeys, PDWORD pcbKey, PDWORD pcValues, PDWORD pcbValue, PDWORD pcbData, PDWORD pcbSecurityDescriptor, PFILETIME pftLastWriteTime, HANDLE hSpooler);LONG ( *fpSetValue)(HANDLE hcKey, LPCTSTR pszValue, DWORD dwType,  BYTE *pData, DWORD cbData, HANDLE hSpooler);LONG ( *fpDeleteValue)(HANDLE hcKey, LPCTSTR pszValue, HANDLE hSpooler);LONG ( *fpEnumValue)(HANDLE hcKey, DWORD dwIndex, LPTSTR pszValue, PDWORD pcbValue, PDWORD pType, PBYTE pData, PDWORD pcbData, HANDLE hSpooler);LONG ( *fpQueryValue)(HANDLE hcKey, LPCTSTR pszValue, PDWORD pType, PBYTE pData, PDWORD pcbData, HANDLE hSpooler);};
struct IPropertyUIVtbl {HRESULT ( *QueryInterface)(IPropertyUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyUI *This);ULONG ( *Release)(IPropertyUI *This);HRESULT ( *ParsePropertyName)(IPropertyUI *This, LPCWSTR pszName, FMTID *pfmtid, PROPID *ppid, ULONG *pchEaten);HRESULT ( *GetCannonicalName)(IPropertyUI *This,  IID * fmtid, PROPID pid, LPWSTR pwszText, DWORD cchText);HRESULT ( *GetDisplayName)(IPropertyUI *This,  IID * fmtid, PROPID pid, PROPERTYUI_NAME_FLAGS flags, LPWSTR pwszText, DWORD cchText);HRESULT ( *GetPropertyDescription)(IPropertyUI *This,  IID * fmtid, PROPID pid, LPWSTR pwszText, DWORD cchText);HRESULT ( *GetDefaultWidth)(IPropertyUI *This,  IID * fmtid, PROPID pid, ULONG *pcxChars);HRESULT ( *GetFlags)(IPropertyUI *This,  IID * fmtid, PROPID pid, PROPERTYUI_FLAGS *pFlags);HRESULT ( *FormatForDisplay)(IPropertyUI *This,  IID * fmtid, PROPID pid,  PROPVARIANT *pvar, PROPERTYUI_FORMAT_FLAGS flags, LPWSTR pwszText, DWORD cchText);HRESULT ( *GetHelpInfo)(IPropertyUI *This,  IID * fmtid, PROPID pid, LPWSTR pwszHelpFile, DWORD cch, UINT *puHelpID);};
struct _MONITOR {BOOL ( *pfnEnumPorts)(LPWSTR pName, DWORD Level, LPBYTE pPorts, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *pfnOpenPort)(LPWSTR pName, PHANDLE pHandle);BOOL ( *pfnOpenPortEx)(LPWSTR pPortName, LPWSTR pPrinterName, PHANDLE pHandle, struct _MONITOR *pMonitor);BOOL ( *pfnStartDocPort)(HANDLE hPort, LPWSTR pPrinterName, DWORD JobId, DWORD Level, LPBYTE pDocInfo);BOOL ( *pfnWritePort)(HANDLE hPort, LPBYTE pBuffer, DWORD cbBuf, LPDWORD pcbWritten);BOOL ( *pfnReadPort)(HANDLE hPort, LPBYTE pBuffer, DWORD cbBuffer, LPDWORD pcbRead);BOOL ( *pfnEndDocPort)(HANDLE hPort);BOOL ( *pfnClosePort)(HANDLE hPort);BOOL ( *pfnAddPort)(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName);BOOL ( *pfnAddPortEx)(LPWSTR pName, DWORD Level, LPBYTE lpBuffer, LPWSTR lpMonitorName);BOOL ( *pfnConfigurePort)(LPWSTR pName, HWND hWnd, LPWSTR pPortName);BOOL ( *pfnDeletePort)(LPWSTR pName, HWND hWnd, LPWSTR pPortName);BOOL ( *pfnGetPrinterDataFromPort)(HANDLE hPort, DWORD ControlID, LPWSTR pValueName, LPWSTR lpInBuffer, DWORD cbInBuffer, LPWSTR lpOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbReturned);BOOL ( *pfnSetPortTimeOuts)(HANDLE hPort, LPCOMMTIMEOUTS lpCTO, DWORD reserved);BOOL ( *pfnXcvOpenPort)(LPCWSTR pszObject, ACCESS_MASK GrantedAccess, PHANDLE phXcv);DWORD ( *pfnXcvDataPort)(HANDLE hXcv, LPCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded);BOOL ( *pfnXcvClosePort)(HANDLE hXcv);};
struct IQueryAssociationsVtbl {HRESULT ( *QueryInterface)(IQueryAssociations *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IQueryAssociations *This);ULONG ( *Release)(IQueryAssociations *This);HRESULT ( *Init)(IQueryAssociations *This, ASSOCF flags, LPCWSTR pszAssoc, HKEY hkProgid, HWND hwnd);HRESULT ( *GetString)(IQueryAssociations *This, ASSOCF flags, ASSOCSTR str, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut);HRESULT ( *GetKey)(IQueryAssociations *This, ASSOCF flags, ASSOCKEY key, LPCWSTR pszExtra, HKEY *phkeyOut);HRESULT ( *GetData)(IQueryAssociations *This, ASSOCF flags, ASSOCDATA data, LPCWSTR pszExtra, LPVOID pvOut, DWORD *pcbOut);HRESULT ( *GetEnum)(IQueryAssociations *This, ASSOCF flags, ASSOCENUM assocenum, LPCWSTR pszExtra,  IID * riid, LPVOID *ppvOut);};
struct _CRYPT_PROVIDER_FUNCTIONS {DWORD cbStruct;PFN_CPD_MEM_ALLOC pfnAlloc;PFN_CPD_MEM_FREE pfnFree;PFN_CPD_ADD_STORE pfnAddStore2Chain;PFN_CPD_ADD_SGNR pfnAddSgnr2Chain;PFN_CPD_ADD_CERT pfnAddCert2Chain;PFN_CPD_ADD_PRIVDATA pfnAddPrivData2Chain;PFN_PROVIDER_INIT_CALL pfnInitialize;PFN_PROVIDER_OBJTRUST_CALL pfnObjectTrust;PFN_PROVIDER_SIGTRUST_CALL pfnSignatureTrust;PFN_PROVIDER_CERTTRUST_CALL pfnCertificateTrust;PFN_PROVIDER_FINALPOLICY_CALL pfnFinalPolicy;PFN_PROVIDER_CERTCHKPOLICY_CALL pfnCertCheckPolicy;PFN_PROVIDER_TESTFINALPOLICY_CALL pfnTestFinalPolicy;struct _CRYPT_PROVUI_FUNCS *psUIpfns;PFN_PROVIDER_CLEANUP_CALL pfnCleanupPolicy;};
struct _WSPUPCALLTABLE {LPWPUCLOSEEVENT lpWPUCloseEvent;LPWPUCLOSESOCKETHANDLE lpWPUCloseSocketHandle;LPWPUCREATEEVENT lpWPUCreateEvent;LPWPUCREATESOCKETHANDLE lpWPUCreateSocketHandle;LPWPUFDISSET lpWPUFDIsSet;LPWPUGETPROVIDERPATH lpWPUGetProviderPath;LPWPUMODIFYIFSHANDLE lpWPUModifyIFSHandle;LPWPUPOSTMESSAGE lpWPUPostMessage;LPWPUQUERYBLOCKINGCALLBACK lpWPUQueryBlockingCallback;LPWPUQUERYSOCKETHANDLECONTEXT lpWPUQuerySocketHandleContext;LPWPUQUEUEAPC lpWPUQueueApc;LPWPURESETEVENT lpWPUResetEvent;LPWPUSETEVENT lpWPUSetEvent;LPWPUOPENCURRENTTHREAD lpWPUOpenCurrentThread;LPWPUCLOSETHREAD lpWPUCloseThread;};
struct IShellViewVtbl {HRESULT ( *QueryInterface)(IShellView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellView *This);ULONG ( *Release)(IShellView *This);HRESULT ( *GetWindow)(IShellView *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IShellView *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IShellView *This, MSG *pmsg);HRESULT ( *EnableModeless)(IShellView *This, BOOL fEnable);HRESULT ( *UIActivate)(IShellView *This, UINT uState);HRESULT ( *Refresh)(IShellView *This);HRESULT ( *CreateViewWindow)(IShellView *This, IShellView *psvPrevious, LPCFOLDERSETTINGS pfs, IShellBrowser *psb, RECT *prcView, HWND *phWnd);HRESULT ( *DestroyViewWindow)(IShellView *This);HRESULT ( *GetCurrentInfo)(IShellView *This, LPFOLDERSETTINGS pfs);HRESULT ( *AddPropertySheetPages)(IShellView *This, DWORD dwReserved, LPFNSVADDPROPSHEETPAGE pfn, LPARAM lparam);HRESULT ( *SaveViewState)(IShellView *This);HRESULT ( *SelectItem)(IShellView *This, LPCITEMIDLIST pidlItem, SVSIF uFlags);HRESULT ( *GetItemObject)(IShellView *This, UINT uItem,  IID * riid, void **ppv);};
struct _MONITOR2 {DWORD cbSize;BOOL ( *pfnEnumPorts)(HANDLE hMonitor, LPWSTR pName, DWORD Level, LPBYTE pPorts, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *pfnOpenPort)(HANDLE hMonitor, LPWSTR pName, PHANDLE pHandle);BOOL ( *pfnOpenPortEx)(HANDLE hMonitor, HANDLE hMonitorPort, LPWSTR pPortName, LPWSTR pPrinterName, PHANDLE pHandle, struct _MONITOR2 *pMonitor2);BOOL ( *pfnStartDocPort)(HANDLE hPort, LPWSTR pPrinterName, DWORD JobId, DWORD Level, LPBYTE pDocInfo);BOOL ( *pfnWritePort)(HANDLE hPort, LPBYTE pBuffer, DWORD cbBuf, LPDWORD pcbWritten);BOOL ( *pfnReadPort)(HANDLE hPort, LPBYTE pBuffer, DWORD cbBuffer, LPDWORD pcbRead);BOOL ( *pfnEndDocPort)(HANDLE hPort);BOOL ( *pfnClosePort)(HANDLE hPort);BOOL ( *pfnAddPort)(HANDLE hMonitor, LPWSTR pName, HWND hWnd, LPWSTR pMonitorName);BOOL ( *pfnAddPortEx)(HANDLE hMonitor, LPWSTR pName, DWORD Level, LPBYTE lpBuffer, LPWSTR lpMonitorName);BOOL ( *pfnConfigurePort)(HANDLE hMonitor, LPWSTR pName, HWND hWnd, LPWSTR pPortName);BOOL ( *pfnDeletePort)(HANDLE hMonitor, LPWSTR pName, HWND hWnd, LPWSTR pPortName);BOOL ( *pfnGetPrinterDataFromPort)(HANDLE hPort, DWORD ControlID, LPWSTR pValueName, LPWSTR lpInBuffer, DWORD cbInBuffer, LPWSTR lpOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbReturned);BOOL ( *pfnSetPortTimeOuts)(HANDLE hPort, LPCOMMTIMEOUTS lpCTO, DWORD reserved);BOOL ( *pfnXcvOpenPort)(HANDLE hMonitor, LPCWSTR pszObject, ACCESS_MASK GrantedAccess, PHANDLE phXcv);DWORD ( *pfnXcvDataPort)(HANDLE hXcv, LPCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded);BOOL ( *pfnXcvClosePort)(HANDLE hXcv);void ( *pfnShutdown)(HANDLE hMonitor);DWORD ( *pfnSendRecvBidiDataFromPort)(HANDLE hPort, DWORD dwAccessBit, LPCWSTR pAction, PBIDI_REQUEST_CONTAINER pReqData, PBIDI_RESPONSE_CONTAINER *ppResData);};
struct IDirectMusic8Vtbl {HRESULT ( *QueryInterface)(IDirectMusic8 *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusic8 *This);ULONG ( *Release)(IDirectMusic8 *This);HRESULT ( *EnumPort)(IDirectMusic8 *This, DWORD dwIndex, LPDMUS_PORTCAPS pPortCaps);HRESULT ( *CreateMusicBuffer)(IDirectMusic8 *This, LPDMUS_BUFFERDESC pBufferDesc, LPDIRECTMUSICBUFFER *ppBuffer, LPUNKNOWN pUnkOuter);HRESULT ( *CreatePort)(IDirectMusic8 *This,  IID * rclsidPort, LPDMUS_PORTPARAMS pPortParams, LPDIRECTMUSICPORT *ppPort, LPUNKNOWN pUnkOuter);HRESULT ( *EnumMasterClock)(IDirectMusic8 *This, DWORD dwIndex, LPDMUS_CLOCKINFO lpClockInfo);HRESULT ( *GetMasterClock)(IDirectMusic8 *This, LPGUID pguidClock, IReferenceClock **ppReferenceClock);HRESULT ( *SetMasterClock)(IDirectMusic8 *This,  GUID * rguidClock);HRESULT ( *Activate)(IDirectMusic8 *This, BOOL fEnable);HRESULT ( *GetDefaultPort)(IDirectMusic8 *This, LPGUID pguidPort);HRESULT ( *SetDirectSound)(IDirectMusic8 *This, LPDIRECTSOUND pDirectSound, HWND hWnd);HRESULT ( *SetExternalMasterClock)(IDirectMusic8 *This, IReferenceClock *pClock);};
struct IDirectMusicVtbl {HRESULT ( *QueryInterface)(IDirectMusic *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectMusic *This);ULONG ( *Release)(IDirectMusic *This);HRESULT ( *EnumPort)(IDirectMusic *This, DWORD dwIndex, LPDMUS_PORTCAPS pPortCaps);HRESULT ( *CreateMusicBuffer)(IDirectMusic *This, LPDMUS_BUFFERDESC pBufferDesc, LPDIRECTMUSICBUFFER *ppBuffer, LPUNKNOWN pUnkOuter);HRESULT ( *CreatePort)(IDirectMusic *This,  IID * rclsidPort, LPDMUS_PORTPARAMS pPortParams, LPDIRECTMUSICPORT *ppPort, LPUNKNOWN pUnkOuter);HRESULT ( *EnumMasterClock)(IDirectMusic *This, DWORD dwIndex, LPDMUS_CLOCKINFO lpClockInfo);HRESULT ( *GetMasterClock)(IDirectMusic *This, LPGUID pguidClock, IReferenceClock **ppReferenceClock);HRESULT ( *SetMasterClock)(IDirectMusic *This,  GUID * rguidClock);HRESULT ( *Activate)(IDirectMusic *This, BOOL fEnable);HRESULT ( *GetDefaultPort)(IDirectMusic *This, LPGUID pguidPort);HRESULT ( *SetDirectSound)(IDirectMusic *This, LPDIRECTSOUND pDirectSound, HWND hWnd);};
struct IDirectDrawVtbl {HRESULT ( *QueryInterface)(IDirectDraw *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw *This);ULONG ( *Release)(IDirectDraw *This);HRESULT ( *Compact)(IDirectDraw *This);HRESULT ( *CreateClipper)(IDirectDraw *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);HRESULT ( *EnumDisplayModes)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);HRESULT ( *EnumSurfaces)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *FlipToGDISurface)(IDirectDraw *This);HRESULT ( *GetCaps)(IDirectDraw *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw *This, LPDDSURFACEDESC);HRESULT ( *GetFourCCCodes)(IDirectDraw *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE *);HRESULT ( *GetMonitorFrequency)(IDirectDraw *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw *This, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw *This, DWORD, HANDLE);};
struct IShellView2Vtbl {HRESULT ( *QueryInterface)(IShellView2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellView2 *This);ULONG ( *Release)(IShellView2 *This);HRESULT ( *GetWindow)(IShellView2 *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IShellView2 *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IShellView2 *This, MSG *pmsg);HRESULT ( *EnableModeless)(IShellView2 *This, BOOL fEnable);HRESULT ( *UIActivate)(IShellView2 *This, UINT uState);HRESULT ( *Refresh)(IShellView2 *This);HRESULT ( *CreateViewWindow)(IShellView2 *This, IShellView *psvPrevious, LPCFOLDERSETTINGS pfs, IShellBrowser *psb, RECT *prcView, HWND *phWnd);HRESULT ( *DestroyViewWindow)(IShellView2 *This);HRESULT ( *GetCurrentInfo)(IShellView2 *This, LPFOLDERSETTINGS pfs);HRESULT ( *AddPropertySheetPages)(IShellView2 *This, DWORD dwReserved, LPFNSVADDPROPSHEETPAGE pfn, LPARAM lparam);HRESULT ( *SaveViewState)(IShellView2 *This);HRESULT ( *SelectItem)(IShellView2 *This, LPCITEMIDLIST pidlItem, SVSIF uFlags);HRESULT ( *GetItemObject)(IShellView2 *This, UINT uItem,  IID * riid, void **ppv);HRESULT ( *GetView)(IShellView2 *This, SHELLVIEWID *pvid, ULONG uView);HRESULT ( *CreateViewWindow2)(IShellView2 *This, LPSV2CVW2_PARAMS lpParams);HRESULT ( *HandleRename)(IShellView2 *This, LPCITEMIDLIST pidlNew);HRESULT ( *SelectAndPositionItem)(IShellView2 *This, LPCITEMIDLIST pidlItem, UINT uFlags, POINT *ppt);};
struct IDirectDraw2Vtbl {HRESULT ( *QueryInterface)(IDirectDraw2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw2 *This);ULONG ( *Release)(IDirectDraw2 *This);HRESULT ( *Compact)(IDirectDraw2 *This);HRESULT ( *CreateClipper)(IDirectDraw2 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw2 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw2 *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);HRESULT ( *EnumDisplayModes)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);HRESULT ( *EnumSurfaces)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *FlipToGDISurface)(IDirectDraw2 *This);HRESULT ( *GetCaps)(IDirectDraw2 *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw2 *This, LPDDSURFACEDESC);HRESULT ( *GetFourCCCodes)(IDirectDraw2 *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE *);HRESULT ( *GetMonitorFrequency)(IDirectDraw2 *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw2 *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw2 *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw2 *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw2 *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw2 *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw2 *This, DWORD, DWORD, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw2 *This, DWORD, HANDLE);HRESULT ( *GetAvailableVidMem)(IDirectDraw2 *This, LPDDSCAPS, LPDWORD, LPDWORD);};
struct IDirectDraw4Vtbl {HRESULT ( *QueryInterface)(IDirectDraw4 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw4 *This);ULONG ( *Release)(IDirectDraw4 *This);HRESULT ( *Compact)(IDirectDraw4 *This);HRESULT ( *CreateClipper)(IDirectDraw4 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw4 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw4 *This, LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE4 *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw4 *This, LPDIRECTDRAWSURFACE4, LPDIRECTDRAWSURFACE4 *);HRESULT ( *EnumDisplayModes)(IDirectDraw4 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2);HRESULT ( *EnumSurfaces)(IDirectDraw4 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *FlipToGDISurface)(IDirectDraw4 *This);HRESULT ( *GetCaps)(IDirectDraw4 *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw4 *This, LPDDSURFACEDESC2);HRESULT ( *GetFourCCCodes)(IDirectDraw4 *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw4 *This, LPDIRECTDRAWSURFACE4 *);HRESULT ( *GetMonitorFrequency)(IDirectDraw4 *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw4 *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw4 *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw4 *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw4 *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw4 *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw4 *This, DWORD, DWORD, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw4 *This, DWORD, HANDLE);HRESULT ( *GetAvailableVidMem)(IDirectDraw4 *This, LPDDSCAPS2, LPDWORD, LPDWORD);HRESULT ( *GetSurfaceFromDC)(IDirectDraw4 *This, HDC, LPDIRECTDRAWSURFACE4 *);HRESULT ( *RestoreAllSurfaces)(IDirectDraw4 *This);HRESULT ( *TestCooperativeLevel)(IDirectDraw4 *This);HRESULT ( *GetDeviceIdentifier)(IDirectDraw4 *This, LPDDDEVICEIDENTIFIER, DWORD);};
struct _PRINTPROVIDOR {BOOL ( *fpOpenPrinter)(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTS pDefault);BOOL ( *fpSetJob)(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command);BOOL ( *fpGetJob)(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded);BOOL ( *fpEnumJobs)(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);HANDLE ( *fpAddPrinter)(LPWSTR pName, DWORD Level, LPBYTE pPrinter);BOOL ( *fpDeletePrinter)(HANDLE hPrinter);BOOL ( *fpSetPrinter)(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command);BOOL ( *fpGetPrinter)(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded);BOOL ( *fpEnumPrinters)(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *fpAddPrinterDriver)(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo);BOOL ( *fpEnumPrinterDrivers)(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *fpGetPrinterDriver)(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded);BOOL ( *fpGetPrinterDriverDirectory)(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded);BOOL ( *fpDeletePrinterDriver)(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName);BOOL ( *fpAddPrintProcessor)(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName);BOOL ( *fpEnumPrintProcessors)(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *fpGetPrintProcessorDirectory)(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded);BOOL ( *fpDeletePrintProcessor)(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName);BOOL ( *fpEnumPrintProcessorDatatypes)(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDataypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);DWORD ( *fpStartDocPrinter)(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo);BOOL ( *fpStartPagePrinter)(HANDLE hPrinter);BOOL ( *fpWritePrinter)(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten);BOOL ( *fpEndPagePrinter)(HANDLE hPrinter);BOOL ( *fpAbortPrinter)(HANDLE hPrinter);BOOL ( *fpReadPrinter)(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead);BOOL ( *fpEndDocPrinter)(HANDLE hPrinter);BOOL ( *fpAddJob)(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded);BOOL ( *fpScheduleJob)(HANDLE hPrinter, DWORD JobId);DWORD ( *fpGetPrinterData)(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);DWORD ( *fpSetPrinterData)(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);DWORD ( *fpWaitForPrinterChange)(HANDLE hPrinter, DWORD Flags);BOOL ( *fpClosePrinter)(HANDLE hPrinter);BOOL ( *fpAddForm)(HANDLE hPrinter, DWORD Level, LPBYTE pForm);BOOL ( *fpDeleteForm)(HANDLE hPrinter, LPWSTR pFormName);BOOL ( *fpGetForm)(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded);BOOL ( *fpSetForm)(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm);BOOL ( *fpEnumForms)(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *fpEnumMonitors)(LPWSTR pName, DWORD Level, LPBYTE pMonitors, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *fpEnumPorts)(LPWSTR pName, DWORD Level, LPBYTE pPorts, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *fpAddPort)(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName);BOOL ( *fpConfigurePort)(LPWSTR pName, HWND hWnd, LPWSTR pPortName);BOOL ( *fpDeletePort)(LPWSTR pName, HWND hWnd, LPWSTR pPortName);HANDLE ( *fpCreatePrinterIC)(HANDLE hPrinter, LPDEVMODEW pDevMode);BOOL ( *fpPlayGdiScriptOnPrinterIC)(HANDLE hPrinterIC, LPBYTE pIn, DWORD cIn, LPBYTE pOut, DWORD cOut, DWORD ul);BOOL ( *fpDeletePrinterIC)(HANDLE hPrinterIC);BOOL ( *fpAddPrinterConnection)(LPWSTR pName);BOOL ( *fpDeletePrinterConnection)(LPWSTR pName);DWORD ( *fpPrinterMessageBox)(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType);BOOL ( *fpAddMonitor)(LPWSTR pName, DWORD Level, LPBYTE pMonitorInfo);BOOL ( *fpDeleteMonitor)(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName);BOOL ( *fpResetPrinter)(HANDLE hPrinter, LPPRINTER_DEFAULTS pDefault);BOOL ( *fpGetPrinterDriverEx)(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, DWORD dwClientMajorVersion, DWORD dwClientMinorVersion, PDWORD pdwServerMajorVersion, PDWORD pdwServerMinorVersion);BOOL ( *fpFindFirstPrinterChangeNotification)(HANDLE hPrinter, DWORD fdwFlags, DWORD fdwOptions, HANDLE hNotify, PDWORD pfdwStatus, PVOID pPrinterNotifyOptions, PVOID pPrinterNotifyInit);BOOL ( *fpFindClosePrinterChangeNotification)(HANDLE hPrinter);BOOL ( *fpAddPortEx)(LPWSTR pName, DWORD Level, LPBYTE lpBuffer, LPWSTR lpMonitorName);BOOL ( *fpShutDown)(LPVOID pvReserved);BOOL ( *fpRefreshPrinterChangeNotification)(HANDLE hPrinter, DWORD Reserved, PVOID pvReserved, PVOID pPrinterNotifyInfo);BOOL ( *fpOpenPrinterEx)(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTS pDefault, LPBYTE pClientInfo, DWORD Level);HANDLE ( *fpAddPrinterEx)(LPWSTR pName, DWORD Level, LPBYTE pPrinter, LPBYTE pClientInfo, DWORD ClientInfoLevel);BOOL ( *fpSetPort)(LPWSTR pName, LPWSTR pPortName, DWORD Level, LPBYTE pPortInfo);DWORD ( *fpEnumPrinterData)(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData);DWORD ( *fpDeletePrinterData)(HANDLE hPrinter, LPWSTR pValueName);DWORD ( *fpClusterSplOpen)(LPCTSTR pszServer, LPCTSTR pszResource, PHANDLE phSpooler, LPCTSTR pszName, LPCTSTR pszAddress);DWORD ( *fpClusterSplClose)(HANDLE hSpooler);DWORD ( *fpClusterSplIsAlive)(HANDLE hSpooler);DWORD ( *fpSetPrinterDataEx)(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);DWORD ( *fpGetPrinterDataEx)(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);DWORD ( *fpEnumPrinterDataEx)(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues);DWORD ( *fpEnumPrinterKey)(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey);DWORD ( *fpDeletePrinterDataEx)(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName);DWORD ( *fpDeletePrinterKey)(HANDLE hPrinter, LPCWSTR pKeyName);BOOL ( *fpSeekPrinter)(HANDLE hPrinter, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER pliNewPointer, DWORD dwMoveMethod, BOOL bWrite);BOOL ( *fpDeletePrinterDriverEx)(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionNum);BOOL ( *fpAddPerMachineConnection)(LPCWSTR pServer, LPCWSTR pPrinterName, LPCWSTR pPrintServer, LPCWSTR pProvider);BOOL ( *fpDeletePerMachineConnection)(LPCWSTR pServer, LPCWSTR pPrinterName);BOOL ( *fpEnumPerMachineConnections)(LPCWSTR pServer, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);BOOL ( *fpXcvData)(HANDLE hXcv, LPCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus);BOOL ( *fpAddPrinterDriverEx)(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo, DWORD dwFileCopyFlags);BOOL ( *fpSplReadPrinter)(HANDLE hPrinter, LPBYTE *pBuf, DWORD cbBuf);BOOL ( *fpDriverUnloadComplete)(LPWSTR pDriverFile);BOOL ( *fpGetSpoolFileInfo)(HANDLE hPrinter, LPWSTR *pSpoolDir, LPHANDLE phFile, HANDLE hSpoolerProcess, HANDLE hAppProcess);BOOL ( *fpCommitSpoolData)(HANDLE hPrinter, DWORD cbCommit);BOOL ( *fpCloseSpoolFileHandle)(HANDLE hPrinter);BOOL ( *fpFlushPrinter)(HANDLE hPrinter, LPBYTE pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep);DWORD ( *fpSendRecvBidiData)(HANDLE hPrinter, LPCWSTR pAction, PBIDI_REQUEST_CONTAINER pReqData, PBIDI_RESPONSE_CONTAINER *ppResData);BOOL ( *fpAddDriverCatalog)(HANDLE hPrinter, DWORD dwLevel, void *pvDriverInfCatInfo, DWORD dwCatalogCopyFlags);};
union tagVARIANT______65D68C826D16CA47CF95571D7BFCD657___E09503A454170B491AC1C4312CE36FE6 {LONGLONG llVal;LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;BSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;SAFEARRAY *parray;BYTE *pbVal;SHORT *piVal;LONG *plVal;LONGLONG *pllVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;BSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;SAFEARRAY **pparray;VARIANT *pvarVal;PVOID byref;CHAR cVal;USHORT uiVal;ULONG ulVal;ULONGLONG ullVal;INT intVal;UINT uintVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;ULONGLONG *pullVal;INT *pintVal;UINT *puintVal;tagVARIANT_________E09503A454170B491AC1C4312CE36FE6___0FDBD249F1AECD6A49409B6B82281578 __anonymous0;};
struct IDirectDraw7Vtbl {HRESULT ( *QueryInterface)(IDirectDraw7 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw7 *This);ULONG ( *Release)(IDirectDraw7 *This);HRESULT ( *Compact)(IDirectDraw7 *This);HRESULT ( *CreateClipper)(IDirectDraw7 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw7 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw7 *This, LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE7 *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw7 *This, LPDIRECTDRAWSURFACE7, LPDIRECTDRAWSURFACE7 *);HRESULT ( *EnumDisplayModes)(IDirectDraw7 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2);HRESULT ( *EnumSurfaces)(IDirectDraw7 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMSURFACESCALLBACK7);HRESULT ( *FlipToGDISurface)(IDirectDraw7 *This);HRESULT ( *GetCaps)(IDirectDraw7 *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw7 *This, LPDDSURFACEDESC2);HRESULT ( *GetFourCCCodes)(IDirectDraw7 *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw7 *This, LPDIRECTDRAWSURFACE7 *);HRESULT ( *GetMonitorFrequency)(IDirectDraw7 *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw7 *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw7 *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw7 *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw7 *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw7 *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw7 *This, DWORD, DWORD, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw7 *This, DWORD, HANDLE);HRESULT ( *GetAvailableVidMem)(IDirectDraw7 *This, LPDDSCAPS2, LPDWORD, LPDWORD);HRESULT ( *GetSurfaceFromDC)(IDirectDraw7 *This, HDC, LPDIRECTDRAWSURFACE7 *);HRESULT ( *RestoreAllSurfaces)(IDirectDraw7 *This);HRESULT ( *TestCooperativeLevel)(IDirectDraw7 *This);HRESULT ( *GetDeviceIdentifier)(IDirectDraw7 *This, LPDDDEVICEIDENTIFIER2, DWORD);HRESULT ( *StartModeTest)(IDirectDraw7 *This, LPSIZE, DWORD, DWORD);HRESULT ( *EvaluateMode)(IDirectDraw7 *This, DWORD, DWORD *);};
struct IPrintOemUIVtbl {HRESULT ( *QueryInterface)(IPrintOemUI *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPrintOemUI *This);ULONG ( *Release)(IPrintOemUI *This);HRESULT ( *GetInfo)(IPrintOemUI *This, DWORD dwMode, PVOID pBuffer, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *DevMode)(IPrintOemUI *This, DWORD dwMode, POEMDMPARAM pOemDMParam);HRESULT ( *PublishDriverInterface)(IPrintOemUI *This, IUnknown *pIUnknown);HRESULT ( *CommonUIProp)(IPrintOemUI *This, DWORD dwMode, POEMCUIPPARAM pOemCUIPParam);HRESULT ( *DocumentPropertySheets)(IPrintOemUI *This, PPROPSHEETUI_INFO pPSUIInfo, LPARAM lParam);HRESULT ( *DevicePropertySheets)(IPrintOemUI *This, PPROPSHEETUI_INFO pPSUIInfo, LPARAM lParam);HRESULT ( *DevQueryPrintEx)(IPrintOemUI *This, POEMUIOBJ poemuiobj, PDEVQUERYPRINT_INFO pDQPInfo, PDEVMODE pPublicDM, PVOID pOEMDM);HRESULT ( *DeviceCapabilitiesA)(IPrintOemUI *This, POEMUIOBJ poemuiobj, HANDLE hPrinter, PWSTR pDeviceName, WORD wCapability, PVOID pOutput, PDEVMODE pPublicDM, PVOID pOEMDM, DWORD dwOld, DWORD *dwResult);HRESULT ( *UpgradePrinter)(IPrintOemUI *This, DWORD dwLevel, PBYTE pDriverUpgradeInfo);HRESULT ( *PrinterEvent)(IPrintOemUI *This, PWSTR pPrinterName, INT iDriverEvent, DWORD dwFlags, LPARAM lParam);HRESULT ( *DriverEvent)(IPrintOemUI *This, DWORD dwDriverEvent, DWORD dwLevel, LPBYTE pDriverInfo, LPARAM lParam);HRESULT ( *QueryColorProfile)(IPrintOemUI *This, HANDLE hPrinter, POEMUIOBJ poemuiobj, PDEVMODE pPublicDM, PVOID pOEMDM, ULONG ulQueryMode, void *pvProfileData, ULONG *pcbProfileData, FLONG *pflProfileData);HRESULT ( *FontInstallerDlgProc)(IPrintOemUI *This, HWND hWnd, UINT usMsg, WPARAM wParam, LPARAM lParam);HRESULT ( *UpdateExternalFonts)(IPrintOemUI *This, HANDLE hPrinter, HANDLE hHeap, PWSTR pwstrCartridges);};
struct IPrintOemUI2Vtbl {HRESULT ( *QueryInterface)(IPrintOemUI2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPrintOemUI2 *This);ULONG ( *Release)(IPrintOemUI2 *This);HRESULT ( *GetInfo)(IPrintOemUI2 *This, DWORD dwMode, PVOID pBuffer, DWORD cbSize, PDWORD pcbNeeded);HRESULT ( *DevMode)(IPrintOemUI2 *This, DWORD dwMode, POEMDMPARAM pOemDMParam);HRESULT ( *PublishDriverInterface)(IPrintOemUI2 *This, IUnknown *pIUnknown);HRESULT ( *CommonUIProp)(IPrintOemUI2 *This, DWORD dwMode, POEMCUIPPARAM pOemCUIPParam);HRESULT ( *DocumentPropertySheets)(IPrintOemUI2 *This, PPROPSHEETUI_INFO pPSUIInfo, LPARAM lParam);HRESULT ( *DevicePropertySheets)(IPrintOemUI2 *This, PPROPSHEETUI_INFO pPSUIInfo, LPARAM lParam);HRESULT ( *DevQueryPrintEx)(IPrintOemUI2 *This, POEMUIOBJ poemuiobj, PDEVQUERYPRINT_INFO pDQPInfo, PDEVMODE pPublicDM, PVOID pOEMDM);HRESULT ( *DeviceCapabilitiesA)(IPrintOemUI2 *This, POEMUIOBJ poemuiobj, HANDLE hPrinter, PWSTR pDeviceName, WORD wCapability, PVOID pOutput, PDEVMODE pPublicDM, PVOID pOEMDM, DWORD dwOld, DWORD *dwResult);HRESULT ( *UpgradePrinter)(IPrintOemUI2 *This, DWORD dwLevel, PBYTE pDriverUpgradeInfo);HRESULT ( *PrinterEvent)(IPrintOemUI2 *This, PWSTR pPrinterName, INT iDriverEvent, DWORD dwFlags, LPARAM lParam);HRESULT ( *DriverEvent)(IPrintOemUI2 *This, DWORD dwDriverEvent, DWORD dwLevel, LPBYTE pDriverInfo, LPARAM lParam);HRESULT ( *QueryColorProfile)(IPrintOemUI2 *This, HANDLE hPrinter, POEMUIOBJ poemuiobj, PDEVMODE pPublicDM, PVOID pOEMDM, ULONG ulQueryMode, void *pvProfileData, ULONG *pcbProfileData, FLONG *pflProfileData);HRESULT ( *FontInstallerDlgProc)(IPrintOemUI2 *This, HWND hWnd, UINT usMsg, WPARAM wParam, LPARAM lParam);HRESULT ( *UpdateExternalFonts)(IPrintOemUI2 *This, HANDLE hPrinter, HANDLE hHeap, PWSTR pwstrCartridges);HRESULT ( *QueryJobAttributes)(IPrintOemUI2 *This, HANDLE hPrinter, PDEVMODE pDevmode, DWORD dwLevel, LPBYTE lpAttributeInfo);HRESULT ( *HideStandardUI)(IPrintOemUI2 *This, DWORD dwMode);HRESULT ( *DocumentEvent)(IPrintOemUI2 *This, HANDLE hPrinter, HDC hdc, INT iEsc, ULONG cbIn, PVOID pvIn, ULONG cbOut, PVOID pvOut, PINT piResult);};
struct _WSPPROC_TABLE {LPWSPACCEPT lpWSPAccept;LPWSPADDRESSTOSTRING lpWSPAddressToString;LPWSPASYNCSELECT lpWSPAsyncSelect;LPWSPBIND lpWSPBind;LPWSPCANCELBLOCKINGCALL lpWSPCancelBlockingCall;LPWSPCLEANUP lpWSPCleanup;LPWSPCLOSESOCKET lpWSPCloseSocket;LPWSPCONNECT lpWSPConnect;LPWSPDUPLICATESOCKET lpWSPDuplicateSocket;LPWSPENUMNETWORKEVENTS lpWSPEnumNetworkEvents;LPWSPEVENTSELECT lpWSPEventSelect;LPWSPGETOVERLAPPEDRESULT lpWSPGetOverlappedResult;LPWSPGETPEERNAME lpWSPGetPeerName;LPWSPGETSOCKNAME lpWSPGetSockName;LPWSPGETSOCKOPT lpWSPGetSockOpt;LPWSPGETQOSBYNAME lpWSPGetQOSByName;LPWSPIOCTL lpWSPIoctl;LPWSPJOINLEAF lpWSPJoinLeaf;LPWSPLISTEN lpWSPListen;LPWSPRECV lpWSPRecv;LPWSPRECVDISCONNECT lpWSPRecvDisconnect;LPWSPRECVFROM lpWSPRecvFrom;LPWSPSELECT lpWSPSelect;LPWSPSEND lpWSPSend;LPWSPSENDDISCONNECT lpWSPSendDisconnect;LPWSPSENDTO lpWSPSendTo;LPWSPSETSOCKOPT lpWSPSetSockOpt;LPWSPSHUTDOWN lpWSPShutdown;LPWSPSOCKET lpWSPSocket;LPWSPSTRINGTOADDRESS lpWSPStringToAddress;};
union tagPROPVARIANT______1A0FF913CB6A2700FBDFFDCC16233417___C55E7FD68DDBD4820BEEA04B5D0E46A7 {CHAR cVal;UCHAR bVal;SHORT iVal;USHORT uiVal;LONG lVal;ULONG ulVal;INT intVal;UINT uintVal;LARGE_INTEGER hVal;ULARGE_INTEGER uhVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;FILETIME filetime;CLSID *puuid;CLIPDATA *pclipdata;BSTR bstrVal;BSTRBLOB bstrblobVal;BLOB blob;LPSTR pszVal;LPWSTR pwszVal;IUnknown *punkVal;IDispatch *pdispVal;IStream *pStream;IStorage *pStorage;LPVERSIONEDSTREAM pVersionedStream;LPSAFEARRAY parray;CAC cac;CAUB caub;CAI cai;CAUI caui;CAL cal;CAUL caul;CAH cah;CAUH cauh;CAFLT caflt;CADBL cadbl;CABOOL cabool;CASCODE cascode;CACY cacy;CADATE cadate;CAFILETIME cafiletime;CACLSID cauuid;CACLIPDATA caclipdata;CABSTR cabstr;CABSTRBLOB cabstrblob;CALPSTR calpstr;CALPWSTR calpwstr;CAPROPVARIANT capropvar;CHAR *pcVal;UCHAR *pbVal;SHORT *piVal;USHORT *puiVal;LONG *plVal;ULONG *pulVal;INT *pintVal;UINT *puintVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;DECIMAL *pdecVal;SCODE *pscode;CY *pcyVal;DATE *pdate;BSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;LPSAFEARRAY *pparray;PROPVARIANT *pvarVal;};
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {LPWSTR pwszName;LPWSTR pwszValue;};
struct _USERNAME_TARGET_CREDENTIAL_INFO {LPWSTR UserName;};
struct _CERT_LDAP_STORE_OPENED_PARA {void *pvLdapSessionHandle;LPCWSTR pwszLdapUrl;};
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;
typedef LPDIRECTDRAWENUMERATEEXA LPDIRECTDRAWENUMERATEEX;
struct _PRINTPROCESSOR_INFO_1W {LPWSTR pName;};
struct _DRIVER_UPGRADE_INFO_1 {LPTSTR pPrinterName;LPTSTR pOldDriverDirectory;};
struct _SERVICE_DESCRIPTIONW {LPWSTR lpDescription;};
struct _UNIVERSAL_NAME_INFOW {LPWSTR lpUniversalName;};
typedef int ( *EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);
struct _DATATYPES_INFO_1W {LPWSTR pName;};
struct _DEVICE_MEDIA_INFO {union _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983 DeviceSpecific;};
struct _REMOTE_NAME_INFOW {LPWSTR lpUniversalName;LPWSTR lpConnectionName;LPWSTR lpRemainingPath;};
typedef SN_CHAR SCOPE_NAME_BUFFER[256];
struct _PROVIDOR_INFO_1W {LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDLLName;};
struct _PROVIDOR_INFO_2W {LPWSTR pOrder;};
struct _SPC_SP_OPUS_INFO {LPCWSTR pwszProgramName;struct SPC_LINK_ *pMoreInfo;struct SPC_LINK_ *pPublisherInfo;};
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
struct _MONITOR_INFO_1W {LPWSTR pName;};
struct _MONITOR_INFO_2W {LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDLLName;};
struct tagREGISTERWORDW {LPWSTR lpReading;LPWSTR lpWord;};
typedef NAMEENUMPROCW WINSTAENUMPROCW;
struct _DRIVER_INFO_1W {LPWSTR pName;};
struct _SHNAMEMAPPINGW {LPWSTR pszOldPath;LPWSTR pszNewPath;int cchOldPath;int cchNewPath;};
typedef MIDICALLBACK *LPMIDICALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
struct _PORT_INFO_1W {LPWSTR pName;};
struct _DOC_INFO_1W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;};
typedef BSTR DataMember;
typedef SN_CHAR *SCOPE_NAME;
typedef  OLECHAR *LPCOLESTR;
struct tagRemSNB {unsigned int ulCntStr;unsigned int ulCntChar;OLECHAR rgString[1];};
typedef OLECHAR *LPOLESTR;
typedef BSTR *LPBSTR;
struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___6B5846D67F7DD81E1807E9F45EE9219E {LPOLESTR pPackageName;GUID PolicyId;};
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___FE55FC766DFEC649A23F3D16D006B7DF {PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;HANDLE hThread;};
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 {PROPID propid;LPOLESTR lpwstr;};
struct _CERT_ALT_NAME_ENTRY {DWORD dwAltNameChoice;_CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676 __anonymous0;};
struct tagRPC_EE_INFO_PARAM {ExtendedErrorParamTypes ParameterType;union tagRPC_EE_INFO_PARAM___A3FD93C0502A9420CA2CBD32041223FD u;};
struct _MIB_IPMCAST_SCOPE {DWORD dwGroupAddress;DWORD dwGroupMask;SCOPE_NAME_BUFFER snNameBuffer;DWORD dwStatus;};
struct _WSACOMPLETION {WSACOMPLETIONTYPE Type;union _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655 Parameters;};
struct tagCALPOLESTR {ULONG cElems;LPOLESTR *pElems;};
struct tagPROPSPEC {ULONG ulKind;tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 __anonymous0;};
struct _BIDI_DATA {DWORD dwBidiType;union _BIDI_DATA___576ECEF05A6845DB2A355826BB89294F u;};
struct tagVARIANT___E93DC971A089CC95F6C875332324C1E7___65D68C826D16CA47CF95571D7BFCD657 {VARTYPE vt;WORD wReserved1;WORD wReserved2;WORD wReserved3;tagVARIANT______65D68C826D16CA47CF95571D7BFCD657___E09503A454170B491AC1C4312CE36FE6 __anonymous0;};
struct tagSTATPROPSTG {LPOLESTR lpwstrName;PROPID propid;VARTYPE vt;};
struct tagOLEVERB {LONG lVerb;LPOLESTR lpszVerbName;DWORD fuFlags;DWORD grfAttribs;};
union __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005 {CLSID clsid;LPOLESTR pFileExt;LPOLESTR pMimeType;LPOLESTR pProgId;LPOLESTR pFileName;struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___6B5846D67F7DD81E1807E9F45EE9219E ByName;struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___7C8E1366D020F294DF98B2AA96DD5064 ByObjectId;};
typedef HRESULT ( *LPDIRECTDRAWENUMERATEEXW)(LPDDENUMCALLBACKEXW lpCallback, LPVOID lpContext, DWORD dwFlags);
struct DataSourceListenerVtbl {HRESULT ( *QueryInterface)(DataSourceListener *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DataSourceListener *This);ULONG ( *Release)(DataSourceListener *This);HRESULT ( *dataMemberChanged)(DataSourceListener *This, DataMember bstrDM);HRESULT ( *dataMemberAdded)(DataSourceListener *This, DataMember bstrDM);HRESULT ( *dataMemberRemoved)(DataSourceListener *This, DataMember bstrDM);};
struct IParseDisplayNameVtbl {HRESULT ( *QueryInterface)(IParseDisplayName *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParseDisplayName *This);ULONG ( *Release)(IParseDisplayName *This);HRESULT ( *ParseDisplayName)(IParseDisplayName *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);};
struct IRootStorageVtbl {HRESULT ( *QueryInterface)(IRootStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRootStorage *This);ULONG ( *Release)(IRootStorage *This);HRESULT ( *SwitchToFile)(IRootStorage *This, LPOLESTR pszFile);};
struct IEnumStringVtbl {HRESULT ( *QueryInterface)(IEnumString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumString *This);ULONG ( *Release)(IEnumString *This);HRESULT ( *Next)(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumString *This, ULONG celt);HRESULT ( *Reset)(IEnumString *This);HRESULT ( *Clone)(IEnumString *This, IEnumString **ppenum);};
struct tagPROPPAGEINFO {ULONG cb;LPOLESTR pszTitle;SIZE size;LPOLESTR pszDocString;LPOLESTR pszHelpFile;DWORD dwHelpContext;};
struct DataSourceVtbl {HRESULT ( *QueryInterface)(DataSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DataSource *This);ULONG ( *Release)(DataSource *This);HRESULT ( *getDataMember)(DataSource *This, DataMember bstrDM,  IID * riid, IUnknown **ppunk);HRESULT ( *getDataMemberName)(DataSource *This, int lIndex, DataMember *pbstrDM);HRESULT ( *getDataMemberCount)(DataSource *This, int *plCount);HRESULT ( *addDataSourceListener)(DataSource *This, DataSourceListener *pDSL);HRESULT ( *removeDataSourceListener)(DataSource *This, DataSourceListener *pDSL);};
struct IACListVtbl {HRESULT ( *QueryInterface)(IACList *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IACList *This);ULONG ( *Release)(IACList *This);HRESULT ( *Expand)(IACList *This, LPCOLESTR pszExpand);};
struct tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E___1A0FF913CB6A2700FBDFFDCC16233417 {VARTYPE vt;PROPVAR_PAD1 wReserved1;PROPVAR_PAD2 wReserved2;PROPVAR_PAD3 wReserved3;tagPROPVARIANT______1A0FF913CB6A2700FBDFFDCC16233417___C55E7FD68DDBD4820BEEA04B5D0E46A7 __anonymous0;};
union _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3 {struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___FE55FC766DFEC649A23F3D16D006B7DF APC;struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___5843F6C8FAC72B709E58873D9E66E99B IOC;struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___A18A6C82CF5B218D68E8003A992A5456 HWND;HANDLE hEvent;PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;};
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB {HBITMAP hBitmap;HMETAFILEPICT hMetaFilePict;HENHMETAFILE hEnhMetaFile;HGLOBAL hGlobal;LPOLESTR lpszFileName;IStream *pstm;IStorage *pstg;};
struct INamedPropertyBagVtbl {HRESULT ( *QueryInterface)(INamedPropertyBag *This,  IID * riid, void **ppv);ULONG ( *AddRef)(INamedPropertyBag *This);ULONG ( *Release)(INamedPropertyBag *This);HRESULT ( *ReadPropertyNPB)(INamedPropertyBag *This, LPCOLESTR pszBagname, LPCOLESTR pszPropName, PROPVARIANT *pVar);HRESULT ( *WritePropertyNPB)(INamedPropertyBag *This, LPCOLESTR pszBagname, LPCOLESTR pszPropName, PROPVARIANT *pVar);HRESULT ( *RemovePropertyNPB)(INamedPropertyBag *This, LPCOLESTR pszBagname, LPCOLESTR pszPropName);};
struct IEnumACStringVtbl {HRESULT ( *QueryInterface)(IEnumACString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumACString *This);ULONG ( *Release)(IEnumACString *This);HRESULT ( *Next)(IEnumACString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumACString *This, ULONG celt);HRESULT ( *Reset)(IEnumACString *This);HRESULT ( *Clone)(IEnumACString *This, IEnumString **ppenum);HRESULT ( *NextItem)(IEnumACString *This, LPOLESTR pszUrl, ULONG cchMax, ULONG *pulSortIndex);HRESULT ( *SetEnumOptions)(IEnumACString *This, DWORD dwOptions);HRESULT ( *GetEnumOptions)(IEnumACString *This, DWORD *pdwOptions);};
struct IPropertyBagVtbl {HRESULT ( *QueryInterface)(IPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBag *This);ULONG ( *Release)(IPropertyBag *This);HRESULT ( *Read)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);HRESULT ( *Write)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar);};
struct IBindHostVtbl {HRESULT ( *QueryInterface)(IBindHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindHost *This);ULONG ( *Release)(IBindHost *This);HRESULT ( *CreateMoniker)(IBindHost *This, LPOLESTR szName, IBindCtx *pBC, IMoniker **ppmk, DWORD dwReserved);HRESULT ( *MonikerBindToStorage)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC,  IID * riid, void **ppvObj);HRESULT ( *MonikerBindToObject)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC,  IID * riid, void **ppvObj);};
struct IErrorLogVtbl {HRESULT ( *QueryInterface)(IErrorLog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorLog *This);ULONG ( *Release)(IErrorLog *This);HRESULT ( *AddError)(IErrorLog *This, LPCOLESTR pszPropName, EXCEPINFO *pExcepInfo);};
struct IBindCtxVtbl {HRESULT ( *QueryInterface)(IBindCtx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindCtx *This);ULONG ( *Release)(IBindCtx *This);HRESULT ( *RegisterObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT ( *RevokeObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT ( *ReleaseBoundObjects)(IBindCtx *This);HRESULT ( *SetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT ( *GetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT ( *GetRunningObjectTable)(IBindCtx *This, IRunningObjectTable **pprot);HRESULT ( *RegisterObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown *punk);HRESULT ( *GetObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown **ppunk);HRESULT ( *EnumObjectParam)(IBindCtx *This, IEnumString **ppenum);HRESULT ( *RevokeObjectParam)(IBindCtx *This, LPOLESTR pszKey);};
struct tagFONTDESC {UINT cbSizeofstruct;LPOLESTR lpstrName;CY cySize;SHORT sWeight;SHORT sCharset;BOOL fItalic;BOOL fUnderline;BOOL fStrikethrough;};
struct tagPROPBAG2 {DWORD dwType;VARTYPE vt;CLIPFORMAT cfType;DWORD dwHint;LPOLESTR pstrName;CLSID clsid;};
struct tagSTATSTG {LPOLESTR pwcsName;DWORD type;ULARGE_INTEGER cbSize;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD grfMode;DWORD grfLocksSupported;CLSID clsid;DWORD grfStateBits;DWORD reserved;};
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 {wireHMETAFILEPICT hMetaFilePict;wireHENHMETAFILE hHEnhMetaFile;GDI_OBJECT *hGdiHandle;wireHGLOBAL hGlobal;LPOLESTR lpszFileName;BYTE_BLOB *pstm;BYTE_BLOB *pstg;};
struct IInternetBindInfoVtbl {HRESULT ( *QueryInterface)(IInternetBindInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetBindInfo *This);ULONG ( *Release)(IInternetBindInfo *This);HRESULT ( *GetBindInfo)(IInternetBindInfo *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *GetBindString)(IInternetBindInfo *This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);};
struct IOleItemContainerVtbl {HRESULT ( *QueryInterface)(IOleItemContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleItemContainer *This);ULONG ( *Release)(IOleItemContainer *This);HRESULT ( *ParseDisplayName)(IOleItemContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *EnumObjects)(IOleItemContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT ( *LockContainer)(IOleItemContainer *This, BOOL fLock);HRESULT ( *GetObjectA)(IOleItemContainer *This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx *pbc,  IID * riid, void **ppvObject);HRESULT ( *GetObjectStorage)(IOleItemContainer *This, LPOLESTR pszItem, IBindCtx *pbc,  IID * riid, void **ppvStorage);HRESULT ( *IsRunning)(IOleItemContainer *This, LPOLESTR pszItem);};
struct ITypeChangeEventsVtbl {HRESULT ( *QueryInterface)(ITypeChangeEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeChangeEvents *This);ULONG ( *Release)(ITypeChangeEvents *This);HRESULT ( *RequestTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoBefore, LPOLESTR pStrName, INT *pfCancel);HRESULT ( *AfterTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoAfter, LPOLESTR pStrName);};
struct ICreateErrorInfoVtbl {HRESULT ( *QueryInterface)(ICreateErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateErrorInfo *This);ULONG ( *Release)(ICreateErrorInfo *This);HRESULT ( *SetGUID)(ICreateErrorInfo *This,  GUID * rguid);HRESULT ( *SetSource)(ICreateErrorInfo *This, LPOLESTR szSource);HRESULT ( *SetDescription)(ICreateErrorInfo *This, LPOLESTR szDescription);HRESULT ( *SetHelpFile)(ICreateErrorInfo *This, LPOLESTR szHelpFile);HRESULT ( *SetHelpContext)(ICreateErrorInfo *This, DWORD dwHelpContext);};
struct IAutoCompleteVtbl {HRESULT ( *QueryInterface)(IAutoComplete *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAutoComplete *This);ULONG ( *Release)(IAutoComplete *This);HRESULT ( *Init)(IAutoComplete *This, HWND hwndEdit, IUnknown *punkACL, LPCOLESTR pwszRegKeyPath, LPCOLESTR pwszQuickComplete);HRESULT ( *Enable)(IAutoComplete *This, BOOL fEnable);};
struct IOleContainerVtbl {HRESULT ( *QueryInterface)(IOleContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleContainer *This);ULONG ( *Release)(IOleContainer *This);HRESULT ( *ParseDisplayName)(IOleContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *EnumObjects)(IOleContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT ( *LockContainer)(IOleContainer *This, BOOL fLock);};
struct IOleLinkVtbl {HRESULT ( *QueryInterface)(IOleLink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleLink *This);ULONG ( *Release)(IOleLink *This);HRESULT ( *SetUpdateOptions)(IOleLink *This, DWORD dwUpdateOpt);HRESULT ( *GetUpdateOptions)(IOleLink *This, DWORD *pdwUpdateOpt);HRESULT ( *SetSourceMoniker)(IOleLink *This, IMoniker *pmk,  IID * rclsid);HRESULT ( *GetSourceMoniker)(IOleLink *This, IMoniker **ppmk);HRESULT ( *SetSourceDisplayName)(IOleLink *This, LPCOLESTR pszStatusText);HRESULT ( *GetSourceDisplayName)(IOleLink *This, LPOLESTR *ppszDisplayName);HRESULT ( *BindToSource)(IOleLink *This, DWORD bindflags, IBindCtx *pbc);HRESULT ( *BindIfRunning)(IOleLink *This);HRESULT ( *GetBoundSource)(IOleLink *This, IUnknown **ppunk);HRESULT ( *UnbindSource)(IOleLink *This);HRESULT ( *Update)(IOleLink *This, IBindCtx *pbc);};
struct tagVARDESC {MEMBERID memid;LPOLESTR lpstrSchema;tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B __anonymous0;ELEMDESC elemdescVar;WORD wVarFlags;VARKIND varkind;};
struct IAutoComplete2Vtbl {HRESULT ( *QueryInterface)(IAutoComplete2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAutoComplete2 *This);ULONG ( *Release)(IAutoComplete2 *This);HRESULT ( *Init)(IAutoComplete2 *This, HWND hwndEdit, IUnknown *punkACL, LPCOLESTR pwszRegKeyPath, LPCOLESTR pwszQuickComplete);HRESULT ( *Enable)(IAutoComplete2 *This, BOOL fEnable);HRESULT ( *SetOptions)(IAutoComplete2 *This, DWORD dwFlag);HRESULT ( *GetOptions)(IAutoComplete2 *This, DWORD *pdwFlag);};
struct IPropertyBag2Vtbl {HRESULT ( *QueryInterface)(IPropertyBag2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBag2 *This);ULONG ( *Release)(IPropertyBag2 *This);HRESULT ( *Read)(IPropertyBag2 *This, ULONG cProperties, PROPBAG2 *pPropBag, IErrorLog *pErrLog, VARIANT *pvarValue, HRESULT *phrError);HRESULT ( *Write)(IPropertyBag2 *This, ULONG cProperties, PROPBAG2 *pPropBag, VARIANT *pvarValue);HRESULT ( *CountProperties)(IPropertyBag2 *This, ULONG *pcProperties);HRESULT ( *GetPropertyInfo)(IPropertyBag2 *This, ULONG iProperty, ULONG cProperties, PROPBAG2 *pPropBag, ULONG *pcProperties);HRESULT ( *LoadObject)(IPropertyBag2 *This, LPCOLESTR pstrName, DWORD dwHint, IUnknown *pUnkObject, IErrorLog *pErrLog);};
struct tagOCPFIPARAMS {ULONG cbStructSize;HWND hWndOwner;int x;int y;LPCOLESTR lpszCaption;ULONG cObjects;LPUNKNOWN *lplpUnk;ULONG cPages;CLSID *lpPages;LCID lcid;DISPID dispidInitialProperty;};
struct ITypeCompVtbl {HRESULT ( *QueryInterface)(ITypeComp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeComp *This);ULONG ( *Release)(ITypeComp *This);HRESULT ( *Bind)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);HRESULT ( *BindType)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);};
struct IBindingVtbl {HRESULT ( *QueryInterface)(IBinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBinding *This);ULONG ( *Release)(IBinding *This);HRESULT ( *Abort)(IBinding *This);HRESULT ( *Suspend)(IBinding *This);HRESULT ( *Resume)(IBinding *This);HRESULT ( *SetPriority)(IBinding *This, LONG nPriority);HRESULT ( *GetPriority)(IBinding *This, LONG *pnPriority);HRESULT ( *GetBindResult)(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved);};
struct IOleInPlaceUIWindowVtbl {HRESULT ( *QueryInterface)(IOleInPlaceUIWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceUIWindow *This);ULONG ( *Release)(IOleInPlaceUIWindow *This);HRESULT ( *GetWindow)(IOleInPlaceUIWindow *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceUIWindow *This, BOOL fEnterMode);HRESULT ( *GetBorder)(IOleInPlaceUIWindow *This, LPRECT lprectBorder);HRESULT ( *RequestBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetActiveObject)(IOleInPlaceUIWindow *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);};
struct IPersistFileVtbl {HRESULT ( *QueryInterface)(IPersistFile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistFile *This);ULONG ( *Release)(IPersistFile *This);HRESULT ( *GetClassID)(IPersistFile *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistFile *This);HRESULT ( *Load)(IPersistFile *This, LPCOLESTR pszFileName, DWORD dwMode);HRESULT ( *Save)(IPersistFile *This, LPCOLESTR pszFileName, BOOL fRemember);HRESULT ( *SaveCompleted)(IPersistFile *This, LPCOLESTR pszFileName);HRESULT ( *GetCurFile)(IPersistFile *This, LPOLESTR *ppszFileName);};
struct IShellItemVtbl {HRESULT ( *QueryInterface)(IShellItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellItem *This);ULONG ( *Release)(IShellItem *This);HRESULT ( *BindToHandler)(IShellItem *This, IBindCtx *pbc,  GUID * rbhid,  IID * riid, void **ppvOut);HRESULT ( *GetParent)(IShellItem *This, IShellItem **ppsi);HRESULT ( *GetDisplayName)(IShellItem *This, SIGDN sigdnName, LPOLESTR *ppszName);HRESULT ( *GetAttributes)(IShellItem *This, SFGAOF sfgaoMask, SFGAOF *psfgaoAttribs);HRESULT ( *Compare)(IShellItem *This, IShellItem *psi, SICHINTF hint, int *piOrder);};
struct IRecordInfoVtbl {HRESULT ( *QueryInterface)(IRecordInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRecordInfo *This);ULONG ( *Release)(IRecordInfo *This);HRESULT ( *RecordInit)(IRecordInfo *This, PVOID pvNew);HRESULT ( *RecordClear)(IRecordInfo *This, PVOID pvExisting);HRESULT ( *RecordCopy)(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);HRESULT ( *GetGuid)(IRecordInfo *This, GUID *pguid);HRESULT ( *GetName)(IRecordInfo *This, BSTR *pbstrName);HRESULT ( *GetSize)(IRecordInfo *This, ULONG *pcbSize);HRESULT ( *GetTypeInfo)(IRecordInfo *This, ITypeInfo **ppTypeInfo);HRESULT ( *GetField)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *GetFieldNoCopy)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);HRESULT ( *PutField)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *PutFieldNoCopy)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *GetFieldNames)(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);BOOL ( *IsMatchingType)(IRecordInfo *This, IRecordInfo *pRecordInfo);PVOID ( *RecordCreate)(IRecordInfo *This);HRESULT ( *RecordCreateCopy)(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);HRESULT ( *RecordDestroy)(IRecordInfo *This, PVOID pvRecord);};
struct IMonikerVtbl {HRESULT ( *QueryInterface)(IMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMoniker *This);ULONG ( *Release)(IMoniker *This);HRESULT ( *GetClassID)(IMoniker *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMoniker *This);HRESULT ( *Load)(IMoniker *This, IStream *pStm);HRESULT ( *Save)(IMoniker *This, IStream *pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMoniker *This, ULARGE_INTEGER *pcbSize);HRESULT ( *BindToObject)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft,  IID * riidResult, void **ppvResult);HRESULT ( *BindToStorage)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft,  IID * riid, void **ppvObj);HRESULT ( *Reduce)(IMoniker *This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced);HRESULT ( *ComposeWith)(IMoniker *This, IMoniker *pmkRight, BOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite);HRESULT ( *Enum)(IMoniker *This, BOOL fForward, IEnumMoniker **ppenumMoniker);HRESULT ( *IsEqual)(IMoniker *This, IMoniker *pmkOtherMoniker);HRESULT ( *Hash)(IMoniker *This, DWORD *pdwHash);HRESULT ( *IsRunning)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning);HRESULT ( *GetTimeOfLastChange)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime);HRESULT ( *Inverse)(IMoniker *This, IMoniker **ppmk);HRESULT ( *CommonPrefixWith)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkPrefix);HRESULT ( *RelativePathTo)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkRelPath);HRESULT ( *GetDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName);HRESULT ( *ParseDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *IsSystemMoniker)(IMoniker *This, DWORD *pdwMksys);};
struct IPropertyStorageVtbl {HRESULT ( *QueryInterface)(IPropertyStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyStorage *This);ULONG ( *Release)(IPropertyStorage *This);HRESULT ( *ReadMultiple)(IPropertyStorage *This, ULONG cpspec,  PROPSPEC  *    rgpspec, PROPVARIANT  *    rgpropvar);HRESULT ( *WriteMultiple)(IPropertyStorage *This, ULONG cpspec,  PROPSPEC  *    rgpspec,  PROPVARIANT  *    rgpropvar, PROPID propidNameFirst);HRESULT ( *DeleteMultiple)(IPropertyStorage *This, ULONG cpspec,  PROPSPEC  *    rgpspec);HRESULT ( *ReadPropertyNames)(IPropertyStorage *This, ULONG cpropid,  PROPID  *    rgpropid, LPOLESTR  *    rglpwstrName);HRESULT ( *WritePropertyNames)(IPropertyStorage *This, ULONG cpropid,  PROPID  *    rgpropid,  LPOLESTR  *    rglpwstrName);HRESULT ( *DeletePropertyNames)(IPropertyStorage *This, ULONG cpropid,  PROPID  *    rgpropid);HRESULT ( *Commit)(IPropertyStorage *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IPropertyStorage *This);HRESULT ( *Enum)(IPropertyStorage *This, IEnumSTATPROPSTG **ppenum);HRESULT ( *SetTimes)(IPropertyStorage *This,  FILETIME *pctime,  FILETIME *patime,  FILETIME *pmtime);HRESULT ( *SetClass)(IPropertyStorage *This,  IID * clsid);HRESULT ( *Stat)(IPropertyStorage *This, STATPROPSETSTG *pstatpsstg);};
struct ICreateTypeLibVtbl {HRESULT ( *QueryInterface)(ICreateTypeLib *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeLib *This);ULONG ( *Release)(ICreateTypeLib *This);HRESULT ( *CreateTypeInfo)(ICreateTypeLib *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT ( *SetName)(ICreateTypeLib *This, LPOLESTR szName);HRESULT ( *SetVersion)(ICreateTypeLib *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *SetGuid)(ICreateTypeLib *This,  GUID * guid);HRESULT ( *SetDocString)(ICreateTypeLib *This, LPOLESTR szDoc);HRESULT ( *SetHelpFileName)(ICreateTypeLib *This, LPOLESTR szHelpFileName);HRESULT ( *SetHelpContext)(ICreateTypeLib *This, DWORD dwHelpContext);HRESULT ( *SetLcid)(ICreateTypeLib *This, LCID lcid);HRESULT ( *SetLibFlags)(ICreateTypeLib *This, UINT uLibFlags);HRESULT ( *SaveAllChanges)(ICreateTypeLib *This);};
struct IPropertyPageVtbl {HRESULT ( *QueryInterface)(IPropertyPage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPage *This);ULONG ( *Release)(IPropertyPage *This);HRESULT ( *SetPageSite)(IPropertyPage *This, IPropertyPageSite *pPageSite);HRESULT ( *Activate)(IPropertyPage *This, HWND hWndParent, LPCRECT pRect, BOOL bModal);HRESULT ( *Deactivate)(IPropertyPage *This);HRESULT ( *GetPageInfo)(IPropertyPage *This, PROPPAGEINFO *pPageInfo);HRESULT ( *SetObjects)(IPropertyPage *This, ULONG cObjects, IUnknown **ppUnk);HRESULT ( *Show)(IPropertyPage *This, UINT nCmdShow);HRESULT ( *Move)(IPropertyPage *This, LPCRECT pRect);HRESULT ( *IsPageDirty)(IPropertyPage *This);HRESULT ( *Apply)(IPropertyPage *This);HRESULT ( *Help)(IPropertyPage *This, LPCOLESTR pszHelpDir);HRESULT ( *TranslateAcceleratorA)(IPropertyPage *This, MSG *pMsg);};
struct tagTYPEATTR {GUID guid;LCID lcid;DWORD dwReserved;MEMBERID memidConstructor;MEMBERID memidDestructor;LPOLESTR lpstrSchema;ULONG cbSizeInstance;TYPEKIND typekind;WORD cFuncs;WORD cVars;WORD cImplTypes;WORD cbSizeVft;WORD cbAlignment;WORD wTypeFlags;WORD wMajorVerNum;WORD wMinorVerNum;TYPEDESC tdescAlias;IDLDESC idldescType;};
struct DShellFolderViewEventsVtbl {HRESULT ( *QueryInterface)(DShellFolderViewEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellFolderViewEvents *This);ULONG ( *Release)(DShellFolderViewEvents *This);HRESULT ( *GetTypeInfoCount)(DShellFolderViewEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellFolderViewEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellFolderViewEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellFolderViewEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct _SearchAssistantEventsVtbl {HRESULT ( *QueryInterface)(_SearchAssistantEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_SearchAssistantEvents *This);ULONG ( *Release)(_SearchAssistantEvents *This);HRESULT ( *GetTypeInfoCount)(_SearchAssistantEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_SearchAssistantEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_SearchAssistantEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_SearchAssistantEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DShellNameSpaceEventsVtbl {HRESULT ( *QueryInterface)(DShellNameSpaceEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellNameSpaceEvents *This);ULONG ( *Release)(DShellNameSpaceEvents *This);HRESULT ( *GetTypeInfoCount)(DShellNameSpaceEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellNameSpaceEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellNameSpaceEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellNameSpaceEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IXMLElementCollectionVtbl {HRESULT ( *QueryInterface)(IXMLElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElementCollection *This);ULONG ( *Release)(IXMLElementCollection *This);HRESULT ( *GetTypeInfoCount)(IXMLElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_length)(IXMLElementCollection *This, int v);HRESULT ( *get_length)(IXMLElementCollection *This, int *p);HRESULT ( *get__newEnum)(IXMLElementCollection *This, IUnknown **ppUnk);HRESULT ( *item)(IXMLElementCollection *This, VARIANT var1, VARIANT var2, IDispatch **ppDisp);};
struct DSearchCommandEventsVtbl {HRESULT ( *QueryInterface)(DSearchCommandEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DSearchCommandEvents *This);ULONG ( *Release)(DSearchCommandEvents *This);HRESULT ( *GetTypeInfoCount)(DSearchCommandEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DSearchCommandEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DSearchCommandEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DSearchCommandEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct XMLDOMDocumentEventsVtbl {HRESULT ( *QueryInterface)(XMLDOMDocumentEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(XMLDOMDocumentEvents *This);ULONG ( *Release)(XMLDOMDocumentEvents *This);HRESULT ( *GetTypeInfoCount)(XMLDOMDocumentEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(XMLDOMDocumentEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(XMLDOMDocumentEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(XMLDOMDocumentEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DShellWindowsEventsVtbl {HRESULT ( *QueryInterface)(DShellWindowsEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellWindowsEvents *This);ULONG ( *Release)(DShellWindowsEvents *This);HRESULT ( *GetTypeInfoCount)(DShellWindowsEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellWindowsEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellWindowsEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellWindowsEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DWebBrowserEvents2Vtbl {HRESULT ( *QueryInterface)(DWebBrowserEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DWebBrowserEvents2 *This);ULONG ( *Release)(DWebBrowserEvents2 *This);HRESULT ( *GetTypeInfoCount)(DWebBrowserEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DWebBrowserEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DWebBrowserEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DWebBrowserEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DWebBrowserEventsVtbl {HRESULT ( *QueryInterface)(DWebBrowserEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DWebBrowserEvents *This);ULONG ( *Release)(DWebBrowserEvents *This);HRESULT ( *GetTypeInfoCount)(DWebBrowserEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DWebBrowserEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DWebBrowserEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DWebBrowserEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ISWbemEventSourceVtbl {HRESULT ( *QueryInterface)(ISWbemEventSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemEventSource *This);ULONG ( *Release)(ISWbemEventSource *This);HRESULT ( *GetTypeInfoCount)(ISWbemEventSource *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemEventSource *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemEventSource *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemEventSource *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *NextEvent)(ISWbemEventSource *This, int iTimeoutMs, ISWbemObject **objWbemObject);HRESULT ( *get_Security_)(ISWbemEventSource *This, ISWbemSecurity **objWbemSecurity);};
struct ISWbemSinkEventsVtbl {HRESULT ( *QueryInterface)(ISWbemSinkEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemSinkEvents *This);ULONG ( *Release)(ISWbemSinkEvents *This);HRESULT ( *GetTypeInfoCount)(ISWbemSinkEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemSinkEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemSinkEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemSinkEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct FolderItemVerbsVtbl {HRESULT ( *QueryInterface)(FolderItemVerbs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItemVerbs *This);ULONG ( *Release)(FolderItemVerbs *This);HRESULT ( *GetTypeInfoCount)(FolderItemVerbs *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItemVerbs *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItemVerbs *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItemVerbs *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItemVerbs *This, int *plCount);HRESULT ( *get_Application)(FolderItemVerbs *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItemVerbs *This, IDispatch **ppid);HRESULT ( *Item)(FolderItemVerbs *This, VARIANT index, FolderItemVerb **ppid);HRESULT ( *_NewEnum)(FolderItemVerbs *This, IUnknown **ppunk);};
struct ICreateTypeLib2Vtbl {HRESULT ( *QueryInterface)(ICreateTypeLib2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeLib2 *This);ULONG ( *Release)(ICreateTypeLib2 *This);HRESULT ( *CreateTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT ( *SetName)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT ( *SetVersion)(ICreateTypeLib2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *SetGuid)(ICreateTypeLib2 *This,  GUID * guid);HRESULT ( *SetDocString)(ICreateTypeLib2 *This, LPOLESTR szDoc);HRESULT ( *SetHelpFileName)(ICreateTypeLib2 *This, LPOLESTR szHelpFileName);HRESULT ( *SetHelpContext)(ICreateTypeLib2 *This, DWORD dwHelpContext);HRESULT ( *SetLcid)(ICreateTypeLib2 *This, LCID lcid);HRESULT ( *SetLibFlags)(ICreateTypeLib2 *This, UINT uLibFlags);HRESULT ( *SaveAllChanges)(ICreateTypeLib2 *This);HRESULT ( *DeleteTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT ( *SetCustData)(ICreateTypeLib2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetHelpStringContext)(ICreateTypeLib2 *This, ULONG dwHelpStringContext);HRESULT ( *SetHelpStringDll)(ICreateTypeLib2 *This, LPOLESTR szFileName);};
struct IFontEventsDispVtbl {HRESULT ( *QueryInterface)(IFontEventsDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontEventsDisp *This);ULONG ( *Release)(IFontEventsDisp *This);HRESULT ( *GetTypeInfoCount)(IFontEventsDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFontEventsDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFontEventsDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFontEventsDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IXMLDOMNodeListVtbl {HRESULT ( *QueryInterface)(IXMLDOMNodeList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNodeList *This);ULONG ( *Release)(IXMLDOMNodeList *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNodeList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNodeList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNodeList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNodeList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_item)(IXMLDOMNodeList *This, int index, IXMLDOMNode **listItem);HRESULT ( *get_length)(IXMLDOMNodeList *This, int *listLength);HRESULT ( *nextNode)(IXMLDOMNodeList *This, IXMLDOMNode **nextItem);HRESULT ( *reset)(IXMLDOMNodeList *This);HRESULT ( *get__newEnum)(IXMLDOMNodeList *This, IUnknown **ppUnk);};
struct IPropertyPage2Vtbl {HRESULT ( *QueryInterface)(IPropertyPage2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPage2 *This);ULONG ( *Release)(IPropertyPage2 *This);HRESULT ( *SetPageSite)(IPropertyPage2 *This, IPropertyPageSite *pPageSite);HRESULT ( *Activate)(IPropertyPage2 *This, HWND hWndParent, LPCRECT pRect, BOOL bModal);HRESULT ( *Deactivate)(IPropertyPage2 *This);HRESULT ( *GetPageInfo)(IPropertyPage2 *This, PROPPAGEINFO *pPageInfo);HRESULT ( *SetObjects)(IPropertyPage2 *This, ULONG cObjects, IUnknown **ppUnk);HRESULT ( *Show)(IPropertyPage2 *This, UINT nCmdShow);HRESULT ( *Move)(IPropertyPage2 *This, LPCRECT pRect);HRESULT ( *IsPageDirty)(IPropertyPage2 *This);HRESULT ( *Apply)(IPropertyPage2 *This);HRESULT ( *Help)(IPropertyPage2 *This, LPCOLESTR pszHelpDir);HRESULT ( *TranslateAcceleratorA)(IPropertyPage2 *This, MSG *pMsg);HRESULT ( *EditProperty)(IPropertyPage2 *This, DISPID dispID);};
struct IFolderViewOCVtbl {HRESULT ( *QueryInterface)(IFolderViewOC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderViewOC *This);ULONG ( *Release)(IFolderViewOC *This);HRESULT ( *GetTypeInfoCount)(IFolderViewOC *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFolderViewOC *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFolderViewOC *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFolderViewOC *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetFolderView)(IFolderViewOC *This, IDispatch *pdisp);};
struct FolderItems2Vtbl {HRESULT ( *QueryInterface)(FolderItems2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItems2 *This);ULONG ( *Release)(FolderItems2 *This);HRESULT ( *GetTypeInfoCount)(FolderItems2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItems2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItems2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItems2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItems2 *This, int *plCount);HRESULT ( *get_Application)(FolderItems2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItems2 *This, IDispatch **ppid);HRESULT ( *Item)(FolderItems2 *This, VARIANT index, FolderItem **ppid);HRESULT ( *_NewEnum)(FolderItems2 *This, IUnknown **ppunk);HRESULT ( *InvokeVerbEx)(FolderItems2 *This, VARIANT vVerb, VARIANT vArgs);};
struct IPictureDispVtbl {HRESULT ( *QueryInterface)(IPictureDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPictureDisp *This);ULONG ( *Release)(IPictureDisp *This);HRESULT ( *GetTypeInfoCount)(IPictureDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IPictureDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IPictureDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IPictureDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct FolderItemsVtbl {HRESULT ( *QueryInterface)(FolderItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItems *This);ULONG ( *Release)(FolderItems *This);HRESULT ( *GetTypeInfoCount)(FolderItems *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItems *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItems *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItems *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItems *This, int *plCount);HRESULT ( *get_Application)(FolderItems *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItems *This, IDispatch **ppid);HRESULT ( *Item)(FolderItems *This, VARIANT index, FolderItem **ppid);HRESULT ( *_NewEnum)(FolderItems *This, IUnknown **ppunk);};
struct ISWbemSinkVtbl {HRESULT ( *QueryInterface)(ISWbemSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemSink *This);ULONG ( *Release)(ISWbemSink *This);HRESULT ( *GetTypeInfoCount)(ISWbemSink *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemSink *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemSink *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemSink *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Cancel)(ISWbemSink *This);};
struct IDispatchVtbl {HRESULT ( *QueryInterface)(IDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispatch *This);ULONG ( *Release)(IDispatch *This);HRESULT ( *GetTypeInfoCount)(IDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IFontDispVtbl {HRESULT ( *QueryInterface)(IFontDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontDisp *This);ULONG ( *Release)(IFontDisp *This);HRESULT ( *GetTypeInfoCount)(IFontDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFontDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFontDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFontDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ISWbemRefreshableItemVtbl {HRESULT ( *QueryInterface)(ISWbemRefreshableItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemRefreshableItem *This);ULONG ( *Release)(ISWbemRefreshableItem *This);HRESULT ( *GetTypeInfoCount)(ISWbemRefreshableItem *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemRefreshableItem *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemRefreshableItem *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemRefreshableItem *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Index)(ISWbemRefreshableItem *This, int *iIndex);HRESULT ( *get_Refresher)(ISWbemRefreshableItem *This, ISWbemRefresher **objWbemRefresher);HRESULT ( *get_IsSet)(ISWbemRefreshableItem *This, VARIANT_BOOL *bIsSet);HRESULT ( *get_Object)(ISWbemRefreshableItem *This, ISWbemObjectEx **objWbemObject);HRESULT ( *get_ObjectSet)(ISWbemRefreshableItem *This, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *Remove)(ISWbemRefreshableItem *This, int iFlags);};
struct IShellFolderViewDual2Vtbl {HRESULT ( *QueryInterface)(IShellFolderViewDual2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolderViewDual2 *This);ULONG ( *Release)(IShellFolderViewDual2 *This);HRESULT ( *GetTypeInfoCount)(IShellFolderViewDual2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellFolderViewDual2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellFolderViewDual2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellFolderViewDual2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellFolderViewDual2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellFolderViewDual2 *This, IDispatch **ppid);HRESULT ( *get_Folder)(IShellFolderViewDual2 *This, Folder **ppid);HRESULT ( *SelectedItems)(IShellFolderViewDual2 *This, FolderItems **ppid);HRESULT ( *get_FocusedItem)(IShellFolderViewDual2 *This, FolderItem **ppid);HRESULT ( *SelectItem)(IShellFolderViewDual2 *This, VARIANT *pvfi, int dwFlags);HRESULT ( *PopupItemMenu)(IShellFolderViewDual2 *This, FolderItem *pfi, VARIANT vx, VARIANT vy, BSTR *pbs);HRESULT ( *get_Script)(IShellFolderViewDual2 *This, IDispatch **ppDisp);HRESULT ( *get_ViewOptions)(IShellFolderViewDual2 *This, int *plViewOptions);HRESULT ( *get_CurrentViewMode)(IShellFolderViewDual2 *This, UINT *pViewMode);HRESULT ( *put_CurrentViewMode)(IShellFolderViewDual2 *This, UINT ViewMode);HRESULT ( *SelectItemRelative)(IShellFolderViewDual2 *This, int iRelative);};
struct IShellFolderViewDualVtbl {HRESULT ( *QueryInterface)(IShellFolderViewDual *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolderViewDual *This);ULONG ( *Release)(IShellFolderViewDual *This);HRESULT ( *GetTypeInfoCount)(IShellFolderViewDual *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellFolderViewDual *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellFolderViewDual *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellFolderViewDual *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellFolderViewDual *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellFolderViewDual *This, IDispatch **ppid);HRESULT ( *get_Folder)(IShellFolderViewDual *This, Folder **ppid);HRESULT ( *SelectedItems)(IShellFolderViewDual *This, FolderItems **ppid);HRESULT ( *get_FocusedItem)(IShellFolderViewDual *This, FolderItem **ppid);HRESULT ( *SelectItem)(IShellFolderViewDual *This, VARIANT *pvfi, int dwFlags);HRESULT ( *PopupItemMenu)(IShellFolderViewDual *This, FolderItem *pfi, VARIANT vx, VARIANT vy, BSTR *pbs);HRESULT ( *get_Script)(IShellFolderViewDual *This, IDispatch **ppDisp);HRESULT ( *get_ViewOptions)(IShellFolderViewDual *This, int *plViewOptions);};
struct ISWbemNamedValueSetVtbl {HRESULT ( *QueryInterface)(ISWbemNamedValueSet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemNamedValueSet *This);ULONG ( *Release)(ISWbemNamedValueSet *This);HRESULT ( *GetTypeInfoCount)(ISWbemNamedValueSet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemNamedValueSet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemNamedValueSet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemNamedValueSet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ISWbemNamedValueSet *This, IUnknown **pUnk);HRESULT ( *Item)(ISWbemNamedValueSet *This, BSTR strName, int iFlags, ISWbemNamedValue **objWbemNamedValue);HRESULT ( *get_Count)(ISWbemNamedValueSet *This, int *iCount);HRESULT ( *Add)(ISWbemNamedValueSet *This, BSTR strName, VARIANT *varValue, int iFlags, ISWbemNamedValue **objWbemNamedValue);HRESULT ( *Remove)(ISWbemNamedValueSet *This, BSTR strName, int iFlags);HRESULT ( *Clone)(ISWbemNamedValueSet *This, ISWbemNamedValueSet **objWbemNamedValueSet);HRESULT ( *DeleteAll)(ISWbemNamedValueSet *This);};
struct IXMLDOMNamedNodeMapVtbl {HRESULT ( *QueryInterface)(IXMLDOMNamedNodeMap *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNamedNodeMap *This);ULONG ( *Release)(IXMLDOMNamedNodeMap *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNamedNodeMap *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNamedNodeMap *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNamedNodeMap *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNamedNodeMap *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *getNamedItem)(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);HRESULT ( *setNamedItem)(IXMLDOMNamedNodeMap *This, IXMLDOMNode *newItem, IXMLDOMNode **nameItem);HRESULT ( *removeNamedItem)(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);HRESULT ( *get_item)(IXMLDOMNamedNodeMap *This, int index, IXMLDOMNode **listItem);HRESULT ( *get_length)(IXMLDOMNamedNodeMap *This, int *listLength);HRESULT ( *getQualifiedItem)(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);HRESULT ( *removeQualifiedItem)(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);HRESULT ( *nextNode)(IXMLDOMNamedNodeMap *This, IXMLDOMNode **nextItem);HRESULT ( *reset)(IXMLDOMNamedNodeMap *This);HRESULT ( *get__newEnum)(IXMLDOMNamedNodeMap *This, IUnknown **ppUnk);};
struct IXMLDOMParseErrorVtbl {HRESULT ( *QueryInterface)(IXMLDOMParseError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMParseError *This);ULONG ( *Release)(IXMLDOMParseError *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMParseError *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMParseError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMParseError *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMParseError *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_errorCode)(IXMLDOMParseError *This, int *errorCode);HRESULT ( *get_url)(IXMLDOMParseError *This, BSTR *urlString);HRESULT ( *get_reason)(IXMLDOMParseError *This, BSTR *reasonString);HRESULT ( *get_srcText)(IXMLDOMParseError *This, BSTR *sourceString);HRESULT ( *get_line)(IXMLDOMParseError *This, int *lineNumber);HRESULT ( *get_linepos)(IXMLDOMParseError *This, int *linePosition);HRESULT ( *get_filepos)(IXMLDOMParseError *This, int *filePosition);};
struct ISWbemNamedValueVtbl {HRESULT ( *QueryInterface)(ISWbemNamedValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemNamedValue *This);ULONG ( *Release)(ISWbemNamedValue *This);HRESULT ( *GetTypeInfoCount)(ISWbemNamedValue *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemNamedValue *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemNamedValue *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemNamedValue *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(ISWbemNamedValue *This, VARIANT *varValue);HRESULT ( *put_Value)(ISWbemNamedValue *This, VARIANT *varValue);HRESULT ( *get_Name)(ISWbemNamedValue *This, BSTR *strName);};
struct ISWbemMethodSetVtbl {HRESULT ( *QueryInterface)(ISWbemMethodSet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemMethodSet *This);ULONG ( *Release)(ISWbemMethodSet *This);HRESULT ( *GetTypeInfoCount)(ISWbemMethodSet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemMethodSet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemMethodSet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemMethodSet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ISWbemMethodSet *This, IUnknown **pUnk);HRESULT ( *Item)(ISWbemMethodSet *This, BSTR strName, int iFlags, ISWbemMethod **objWbemMethod);HRESULT ( *get_Count)(ISWbemMethodSet *This, int *iCount);};
struct ISWbemObjectSetVtbl {HRESULT ( *QueryInterface)(ISWbemObjectSet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemObjectSet *This);ULONG ( *Release)(ISWbemObjectSet *This);HRESULT ( *GetTypeInfoCount)(ISWbemObjectSet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemObjectSet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemObjectSet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemObjectSet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ISWbemObjectSet *This, IUnknown **pUnk);HRESULT ( *Item)(ISWbemObjectSet *This, BSTR strObjectPath, int iFlags, ISWbemObject **objWbemObject);HRESULT ( *get_Count)(ISWbemObjectSet *This, int *iCount);HRESULT ( *get_Security_)(ISWbemObjectSet *This, ISWbemSecurity **objWbemSecurity);};
struct IShellDispatch2Vtbl {HRESULT ( *QueryInterface)(IShellDispatch2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch2 *This);ULONG ( *Release)(IShellDispatch2 *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch2 *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch2 *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch2 *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch2 *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch2 *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch2 *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch2 *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch2 *This);HRESULT ( *FileRun)(IShellDispatch2 *This);HRESULT ( *CascadeWindows)(IShellDispatch2 *This);HRESULT ( *TileVertically)(IShellDispatch2 *This);HRESULT ( *TileHorizontally)(IShellDispatch2 *This);HRESULT ( *ShutdownWindows)(IShellDispatch2 *This);HRESULT ( *Suspend)(IShellDispatch2 *This);HRESULT ( *EjectPC)(IShellDispatch2 *This);HRESULT ( *SetTime)(IShellDispatch2 *This);HRESULT ( *TrayProperties)(IShellDispatch2 *This);HRESULT ( *Help)(IShellDispatch2 *This);HRESULT ( *FindFiles)(IShellDispatch2 *This);HRESULT ( *FindComputer)(IShellDispatch2 *This);HRESULT ( *RefreshMenu)(IShellDispatch2 *This);HRESULT ( *ControlPanelItem)(IShellDispatch2 *This, BSTR szDir);HRESULT ( *IsRestricted)(IShellDispatch2 *This, BSTR Group, BSTR Restriction, int *plRestrictValue);HRESULT ( *ShellExecuteA)(IShellDispatch2 *This, BSTR File, VARIANT vArgs, VARIANT vDir, VARIANT vOperation, VARIANT vShow);HRESULT ( *FindPrinter)(IShellDispatch2 *This, BSTR name, BSTR location, BSTR model);HRESULT ( *GetSystemInformation)(IShellDispatch2 *This, BSTR name, VARIANT *pv);HRESULT ( *ServiceStart)(IShellDispatch2 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *ServiceStop)(IShellDispatch2 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *IsServiceRunning)(IShellDispatch2 *This, BSTR ServiceName, VARIANT *pRunning);HRESULT ( *CanStartStopService)(IShellDispatch2 *This, BSTR ServiceName, VARIANT *pCanStartStop);HRESULT ( *ShowBrowserBar)(IShellDispatch2 *This, BSTR bstrClsid, VARIANT bShow, VARIANT *pSuccess);};
struct IShellDispatch3Vtbl {HRESULT ( *QueryInterface)(IShellDispatch3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch3 *This);ULONG ( *Release)(IShellDispatch3 *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch3 *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch3 *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch3 *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch3 *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch3 *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch3 *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch3 *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch3 *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch3 *This);HRESULT ( *FileRun)(IShellDispatch3 *This);HRESULT ( *CascadeWindows)(IShellDispatch3 *This);HRESULT ( *TileVertically)(IShellDispatch3 *This);HRESULT ( *TileHorizontally)(IShellDispatch3 *This);HRESULT ( *ShutdownWindows)(IShellDispatch3 *This);HRESULT ( *Suspend)(IShellDispatch3 *This);HRESULT ( *EjectPC)(IShellDispatch3 *This);HRESULT ( *SetTime)(IShellDispatch3 *This);HRESULT ( *TrayProperties)(IShellDispatch3 *This);HRESULT ( *Help)(IShellDispatch3 *This);HRESULT ( *FindFiles)(IShellDispatch3 *This);HRESULT ( *FindComputer)(IShellDispatch3 *This);HRESULT ( *RefreshMenu)(IShellDispatch3 *This);HRESULT ( *ControlPanelItem)(IShellDispatch3 *This, BSTR szDir);HRESULT ( *IsRestricted)(IShellDispatch3 *This, BSTR Group, BSTR Restriction, int *plRestrictValue);HRESULT ( *ShellExecuteA)(IShellDispatch3 *This, BSTR File, VARIANT vArgs, VARIANT vDir, VARIANT vOperation, VARIANT vShow);HRESULT ( *FindPrinter)(IShellDispatch3 *This, BSTR name, BSTR location, BSTR model);HRESULT ( *GetSystemInformation)(IShellDispatch3 *This, BSTR name, VARIANT *pv);HRESULT ( *ServiceStart)(IShellDispatch3 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *ServiceStop)(IShellDispatch3 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *IsServiceRunning)(IShellDispatch3 *This, BSTR ServiceName, VARIANT *pRunning);HRESULT ( *CanStartStopService)(IShellDispatch3 *This, BSTR ServiceName, VARIANT *pCanStartStop);HRESULT ( *ShowBrowserBar)(IShellDispatch3 *This, BSTR bstrClsid, VARIANT bShow, VARIANT *pSuccess);HRESULT ( *AddToRecent)(IShellDispatch3 *This, VARIANT varFile, BSTR bstrCategory);};
struct IShellLinkDual2Vtbl {HRESULT ( *QueryInterface)(IShellLinkDual2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellLinkDual2 *This);ULONG ( *Release)(IShellLinkDual2 *This);HRESULT ( *GetTypeInfoCount)(IShellLinkDual2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellLinkDual2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellLinkDual2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellLinkDual2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Path)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_Path)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_Description)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_Description)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_WorkingDirectory)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_WorkingDirectory)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_Arguments)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_Arguments)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_Hotkey)(IShellLinkDual2 *This, int *piHK);HRESULT ( *put_Hotkey)(IShellLinkDual2 *This, int iHK);HRESULT ( *get_ShowCommand)(IShellLinkDual2 *This, int *piShowCommand);HRESULT ( *put_ShowCommand)(IShellLinkDual2 *This, int iShowCommand);HRESULT ( *Resolve)(IShellLinkDual2 *This, int fFlags);HRESULT ( *GetIconLocation)(IShellLinkDual2 *This, BSTR *pbs, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkDual2 *This, BSTR bs, int iIcon);HRESULT ( *Save)(IShellLinkDual2 *This, VARIANT vWhere);HRESULT ( *get_Target)(IShellLinkDual2 *This, FolderItem **ppfi);};
struct IXMLHttpRequestVtbl {HRESULT ( *QueryInterface)(IXMLHttpRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLHttpRequest *This);ULONG ( *Release)(IXMLHttpRequest *This);HRESULT ( *GetTypeInfoCount)(IXMLHttpRequest *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLHttpRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLHttpRequest *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLHttpRequest *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *open)(IXMLHttpRequest *This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword);HRESULT ( *setRequestHeader)(IXMLHttpRequest *This, BSTR bstrHeader, BSTR bstrValue);HRESULT ( *getResponseHeader)(IXMLHttpRequest *This, BSTR bstrHeader, BSTR *pbstrValue);HRESULT ( *getAllResponseHeaders)(IXMLHttpRequest *This, BSTR *pbstrHeaders);HRESULT ( *send)(IXMLHttpRequest *This, VARIANT varBody);HRESULT ( *abort)(IXMLHttpRequest *This);HRESULT ( *get_status)(IXMLHttpRequest *This, int *plStatus);HRESULT ( *get_statusText)(IXMLHttpRequest *This, BSTR *pbstrStatus);HRESULT ( *get_responseXML)(IXMLHttpRequest *This, IDispatch **ppBody);HRESULT ( *get_responseText)(IXMLHttpRequest *This, BSTR *pbstrBody);HRESULT ( *get_responseBody)(IXMLHttpRequest *This, VARIANT *pvarBody);HRESULT ( *get_responseStream)(IXMLHttpRequest *This, VARIANT *pvarBody);HRESULT ( *get_readyState)(IXMLHttpRequest *This, int *plState);HRESULT ( *put_onreadystatechange)(IXMLHttpRequest *This, IDispatch *pReadyStateSink);};
struct FolderItemVerbVtbl {HRESULT ( *QueryInterface)(FolderItemVerb *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItemVerb *This);ULONG ( *Release)(FolderItemVerb *This);HRESULT ( *GetTypeInfoCount)(FolderItemVerb *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItemVerb *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItemVerb *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItemVerb *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItemVerb *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItemVerb *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItemVerb *This, BSTR *pbs);HRESULT ( *DoIt)(FolderItemVerb *This);};
struct IShellDispatchVtbl {HRESULT ( *QueryInterface)(IShellDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch *This);ULONG ( *Release)(IShellDispatch *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch *This);HRESULT ( *FileRun)(IShellDispatch *This);HRESULT ( *CascadeWindows)(IShellDispatch *This);HRESULT ( *TileVertically)(IShellDispatch *This);HRESULT ( *TileHorizontally)(IShellDispatch *This);HRESULT ( *ShutdownWindows)(IShellDispatch *This);HRESULT ( *Suspend)(IShellDispatch *This);HRESULT ( *EjectPC)(IShellDispatch *This);HRESULT ( *SetTime)(IShellDispatch *This);HRESULT ( *TrayProperties)(IShellDispatch *This);HRESULT ( *Help)(IShellDispatch *This);HRESULT ( *FindFiles)(IShellDispatch *This);HRESULT ( *FindComputer)(IShellDispatch *This);HRESULT ( *RefreshMenu)(IShellDispatch *This);HRESULT ( *ControlPanelItem)(IShellDispatch *This, BSTR szDir);};
struct IShellLinkDualVtbl {HRESULT ( *QueryInterface)(IShellLinkDual *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellLinkDual *This);ULONG ( *Release)(IShellLinkDual *This);HRESULT ( *GetTypeInfoCount)(IShellLinkDual *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellLinkDual *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellLinkDual *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellLinkDual *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Path)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Path)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Description)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Description)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_WorkingDirectory)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_WorkingDirectory)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Arguments)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Arguments)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Hotkey)(IShellLinkDual *This, int *piHK);HRESULT ( *put_Hotkey)(IShellLinkDual *This, int iHK);HRESULT ( *get_ShowCommand)(IShellLinkDual *This, int *piShowCommand);HRESULT ( *put_ShowCommand)(IShellLinkDual *This, int iShowCommand);HRESULT ( *Resolve)(IShellLinkDual *This, int fFlags);HRESULT ( *GetIconLocation)(IShellLinkDual *This, BSTR *pbs, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkDual *This, BSTR bs, int iIcon);HRESULT ( *Save)(IShellLinkDual *This, VARIANT vWhere);};
struct IXMLDSOControlVtbl {HRESULT ( *QueryInterface)(IXMLDSOControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDSOControl *This);ULONG ( *Release)(IXMLDSOControl *This);HRESULT ( *GetTypeInfoCount)(IXMLDSOControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDSOControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDSOControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDSOControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_XMLDocument)(IXMLDSOControl *This, IXMLDOMDocument **ppDoc);HRESULT ( *put_XMLDocument)(IXMLDSOControl *This, IXMLDOMDocument *ppDoc);HRESULT ( *get_JavaDSOCompatible)(IXMLDSOControl *This, BOOL *fJavaDSOCompatible);HRESULT ( *put_JavaDSOCompatible)(IXMLDSOControl *This, BOOL fJavaDSOCompatible);HRESULT ( *get_readyState)(IXMLDSOControl *This, int *state);};
struct ISWbemLocatorVtbl {HRESULT ( *QueryInterface)(ISWbemLocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemLocator *This);ULONG ( *Release)(ISWbemLocator *This);HRESULT ( *GetTypeInfoCount)(ISWbemLocator *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemLocator *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemLocator *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemLocator *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ConnectServer)(ISWbemLocator *This, BSTR strServer, BSTR strNamespace, BSTR strUser, BSTR strPassword, BSTR strLocale, BSTR strAuthority, int iSecurityFlags, IDispatch *objWbemNamedValueSet, ISWbemServices **objWbemServices);HRESULT ( *get_Security_)(ISWbemLocator *This, ISWbemSecurity **objWbemSecurity);};
struct IXMLAttributeVtbl {HRESULT ( *QueryInterface)(IXMLAttribute *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLAttribute *This);ULONG ( *Release)(IXMLAttribute *This);HRESULT ( *GetTypeInfoCount)(IXMLAttribute *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLAttribute *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLAttribute *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_name)(IXMLAttribute *This, BSTR *n);HRESULT ( *get_value)(IXMLAttribute *This, BSTR *v);};
struct DFConstraintVtbl {HRESULT ( *QueryInterface)(DFConstraint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DFConstraint *This);ULONG ( *Release)(DFConstraint *This);HRESULT ( *GetTypeInfoCount)(DFConstraint *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DFConstraint *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DFConstraint *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DFConstraint *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(DFConstraint *This, BSTR *pbs);HRESULT ( *get_Value)(DFConstraint *This, VARIANT *pv);};
struct FolderItems3Vtbl {HRESULT ( *QueryInterface)(FolderItems3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItems3 *This);ULONG ( *Release)(FolderItems3 *This);HRESULT ( *GetTypeInfoCount)(FolderItems3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItems3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItems3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItems3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItems3 *This, int *plCount);HRESULT ( *get_Application)(FolderItems3 *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItems3 *This, IDispatch **ppid);HRESULT ( *Item)(FolderItems3 *This, VARIANT index, FolderItem **ppid);HRESULT ( *_NewEnum)(FolderItems3 *This, IUnknown **ppunk);HRESULT ( *InvokeVerbEx)(FolderItems3 *This, VARIANT vVerb, VARIANT vArgs);HRESULT ( *Filter)(FolderItems3 *This, int grfFlags, BSTR bstrFileSpec);HRESULT ( *get_Verbs)(FolderItems3 *This, FolderItemVerbs **ppfic);};
struct ISWbemMethodVtbl {HRESULT ( *QueryInterface)(ISWbemMethod *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemMethod *This);ULONG ( *Release)(ISWbemMethod *This);HRESULT ( *GetTypeInfoCount)(ISWbemMethod *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemMethod *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemMethod *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemMethod *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ISWbemMethod *This, BSTR *strName);HRESULT ( *get_Origin)(ISWbemMethod *This, BSTR *strOrigin);HRESULT ( *get_InParameters)(ISWbemMethod *This, ISWbemObject **objWbemInParameters);HRESULT ( *get_OutParameters)(ISWbemMethod *This, ISWbemObject **objWbemOutParameters);HRESULT ( *get_Qualifiers_)(ISWbemMethod *This, ISWbemQualifierSet **objWbemQualifierSet);};
struct IXMLDocumentVtbl {HRESULT ( *QueryInterface)(IXMLDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDocument *This);ULONG ( *Release)(IXMLDocument *This);HRESULT ( *GetTypeInfoCount)(IXMLDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_root)(IXMLDocument *This, IXMLElement **p);HRESULT ( *get_fileSize)(IXMLDocument *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IXMLDocument *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IXMLDocument *This, BSTR *p);HRESULT ( *get_URL)(IXMLDocument *This, BSTR *p);HRESULT ( *put_URL)(IXMLDocument *This, BSTR p);HRESULT ( *get_mimeType)(IXMLDocument *This, BSTR *p);HRESULT ( *get_readyState)(IXMLDocument *This, int *pl);HRESULT ( *get_charset)(IXMLDocument *This, BSTR *p);HRESULT ( *put_charset)(IXMLDocument *This, BSTR p);HRESULT ( *get_version)(IXMLDocument *This, BSTR *p);HRESULT ( *get_doctype)(IXMLDocument *This, BSTR *p);HRESULT ( *get_dtdURL)(IXMLDocument *This, BSTR *p);HRESULT ( *createElement)(IXMLDocument *This, VARIANT vType, VARIANT var1, IXMLElement **ppElem);};
struct IXMLElement2Vtbl {HRESULT ( *QueryInterface)(IXMLElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElement2 *This);ULONG ( *Release)(IXMLElement2 *This);HRESULT ( *GetTypeInfoCount)(IXMLElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_tagName)(IXMLElement2 *This, BSTR *p);HRESULT ( *put_tagName)(IXMLElement2 *This, BSTR p);HRESULT ( *get_parent)(IXMLElement2 *This, IXMLElement2 **ppParent);HRESULT ( *setAttribute)(IXMLElement2 *This, BSTR strPropertyName, VARIANT PropertyValue);HRESULT ( *getAttribute)(IXMLElement2 *This, BSTR strPropertyName, VARIANT *PropertyValue);HRESULT ( *removeAttribute)(IXMLElement2 *This, BSTR strPropertyName);HRESULT ( *get_children)(IXMLElement2 *This, IXMLElementCollection **pp);HRESULT ( *get_type)(IXMLElement2 *This, int *plType);HRESULT ( *get_text)(IXMLElement2 *This, BSTR *p);HRESULT ( *put_text)(IXMLElement2 *This, BSTR p);HRESULT ( *addChild)(IXMLElement2 *This, IXMLElement2 *pChildElem, int lIndex, int lReserved);HRESULT ( *removeChild)(IXMLElement2 *This, IXMLElement2 *pChildElem);HRESULT ( *get_attributes)(IXMLElement2 *This, IXMLElementCollection **pp);};
struct IAccessibleVtbl {HRESULT ( *QueryInterface)(IAccessible *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccessible *This);ULONG ( *Release)(IAccessible *This);HRESULT ( *GetTypeInfoCount)(IAccessible *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAccessible *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAccessible *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAccessible *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_accParent)(IAccessible *This, IDispatch **ppdispParent);HRESULT ( *get_accChildCount)(IAccessible *This, int *pcountChildren);HRESULT ( *get_accChild)(IAccessible *This, VARIANT varChild, IDispatch **ppdispChild);HRESULT ( *get_accName)(IAccessible *This, VARIANT varChild, BSTR *pszName);HRESULT ( *get_accValue)(IAccessible *This, VARIANT varChild, BSTR *pszValue);HRESULT ( *get_accDescription)(IAccessible *This, VARIANT varChild, BSTR *pszDescription);HRESULT ( *get_accRole)(IAccessible *This, VARIANT varChild, VARIANT *pvarRole);HRESULT ( *get_accState)(IAccessible *This, VARIANT varChild, VARIANT *pvarState);HRESULT ( *get_accHelp)(IAccessible *This, VARIANT varChild, BSTR *pszHelp);HRESULT ( *get_accHelpTopic)(IAccessible *This, BSTR *pszHelpFile, VARIANT varChild, int *pidTopic);HRESULT ( *get_accKeyboardShortcut)(IAccessible *This, VARIANT varChild, BSTR *pszKeyboardShortcut);HRESULT ( *get_accFocus)(IAccessible *This, VARIANT *pvarChild);HRESULT ( *get_accSelection)(IAccessible *This, VARIANT *pvarChildren);HRESULT ( *get_accDefaultAction)(IAccessible *This, VARIANT varChild, BSTR *pszDefaultAction);HRESULT ( *accSelect)(IAccessible *This, int flagsSelect, VARIANT varChild);HRESULT ( *accLocation)(IAccessible *This, int *pxLeft, int *pyTop, int *pcxWidth, int *pcyHeight, VARIANT varChild);HRESULT ( *accNavigate)(IAccessible *This, int navDir, VARIANT varStart, VARIANT *pvarEndUpAt);HRESULT ( *accHitTest)(IAccessible *This, int xLeft, int yTop, VARIANT *pvarChild);HRESULT ( *accDoDefaultAction)(IAccessible *This, VARIANT varChild);HRESULT ( *put_accName)(IAccessible *This, VARIANT varChild, BSTR szName);HRESULT ( *put_accValue)(IAccessible *This, VARIANT varChild, BSTR szValue);};
struct IXMLElementVtbl {HRESULT ( *QueryInterface)(IXMLElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElement *This);ULONG ( *Release)(IXMLElement *This);HRESULT ( *GetTypeInfoCount)(IXMLElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_tagName)(IXMLElement *This, BSTR *p);HRESULT ( *put_tagName)(IXMLElement *This, BSTR p);HRESULT ( *get_parent)(IXMLElement *This, IXMLElement **ppParent);HRESULT ( *setAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT PropertyValue);HRESULT ( *getAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT *PropertyValue);HRESULT ( *removeAttribute)(IXMLElement *This, BSTR strPropertyName);HRESULT ( *get_children)(IXMLElement *This, IXMLElementCollection **pp);HRESULT ( *get_type)(IXMLElement *This, int *plType);HRESULT ( *get_text)(IXMLElement *This, BSTR *p);HRESULT ( *put_text)(IXMLElement *This, BSTR p);HRESULT ( *addChild)(IXMLElement *This, IXMLElement *pChildElem, int lIndex, int lReserved);HRESULT ( *removeChild)(IXMLElement *This, IXMLElement *pChildElem);};
struct ISearchesVtbl {HRESULT ( *QueryInterface)(ISearches *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearches *This);ULONG ( *Release)(ISearches *This);HRESULT ( *GetTypeInfoCount)(ISearches *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearches *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearches *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearches *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ISearches *This, int *plCount);HRESULT ( *get_Default)(ISearches *This, BSTR *pbstrDefault);HRESULT ( *Item)(ISearches *This, VARIANT index, ISearch **ppid);HRESULT ( *_NewEnum)(ISearches *This, IUnknown **ppunk);};
struct ISearchVtbl {HRESULT ( *QueryInterface)(ISearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearch *This);ULONG ( *Release)(ISearch *This);HRESULT ( *GetTypeInfoCount)(ISearch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(ISearch *This, BSTR *pbstrTitle);HRESULT ( *get_Id)(ISearch *This, BSTR *pbstrId);HRESULT ( *get_Url)(ISearch *This, BSTR *pbstrUrl);};
struct FolderVtbl {HRESULT ( *QueryInterface)(Folder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Folder *This);ULONG ( *Release)(Folder *This);HRESULT ( *GetTypeInfoCount)(Folder *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Folder *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Folder *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Folder *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(Folder *This, BSTR *pbs);HRESULT ( *get_Application)(Folder *This, IDispatch **ppid);HRESULT ( *get_Parent)(Folder *This, IDispatch **ppid);HRESULT ( *get_ParentFolder)(Folder *This, Folder **ppsf);HRESULT ( *Items)(Folder *This, FolderItems **ppid);HRESULT ( *ParseName)(Folder *This, BSTR bName, FolderItem **ppid);HRESULT ( *NewFolder)(Folder *This, BSTR bName, VARIANT vOptions);HRESULT ( *MoveHere)(Folder *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *CopyHere)(Folder *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *GetDetailsOf)(Folder *This, VARIANT vItem, int iColumn, BSTR *pbs);};
struct IShellFavoritesNameSpaceVtbl {HRESULT ( *QueryInterface)(IShellFavoritesNameSpace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFavoritesNameSpace *This);ULONG ( *Release)(IShellFavoritesNameSpace *This);HRESULT ( *GetTypeInfoCount)(IShellFavoritesNameSpace *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellFavoritesNameSpace *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellFavoritesNameSpace *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellFavoritesNameSpace *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *MoveSelectionUp)(IShellFavoritesNameSpace *This);HRESULT ( *MoveSelectionDown)(IShellFavoritesNameSpace *This);HRESULT ( *ResetSort)(IShellFavoritesNameSpace *This);HRESULT ( *NewFolder)(IShellFavoritesNameSpace *This);HRESULT ( *Synchronize)(IShellFavoritesNameSpace *This);HRESULT ( *Import)(IShellFavoritesNameSpace *This);HRESULT ( *Export)(IShellFavoritesNameSpace *This);HRESULT ( *InvokeContextMenuCommand)(IShellFavoritesNameSpace *This, BSTR strCommand);HRESULT ( *MoveSelectionTo)(IShellFavoritesNameSpace *This);HRESULT ( *get_SubscriptionsEnabled)(IShellFavoritesNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *CreateSubscriptionForSelection)(IShellFavoritesNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *DeleteSubscriptionForSelection)(IShellFavoritesNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *SetRoot)(IShellFavoritesNameSpace *This, BSTR bstrFullPath);};
struct IPassportClientServicesVtbl {HRESULT ( *QueryInterface)(IPassportClientServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPassportClientServices *This);ULONG ( *Release)(IPassportClientServices *This);HRESULT ( *GetTypeInfoCount)(IPassportClientServices *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IPassportClientServices *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IPassportClientServices *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IPassportClientServices *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *MemberExists)(IPassportClientServices *This, BSTR bstrUser, BSTR bstrPassword, VARIANT_BOOL *pvfExists);};
struct IXMLDOMImplementationVtbl {HRESULT ( *QueryInterface)(IXMLDOMImplementation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMImplementation *This);ULONG ( *Release)(IXMLDOMImplementation *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMImplementation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMImplementation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMImplementation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMImplementation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *hasFeature)(IXMLDOMImplementation *This, BSTR feature, BSTR version, VARIANT_BOOL *hasFeature);};
struct ISearchAssistantOC2Vtbl {HRESULT ( *QueryInterface)(ISearchAssistantOC2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchAssistantOC2 *This);ULONG ( *Release)(ISearchAssistantOC2 *This);HRESULT ( *GetTypeInfoCount)(ISearchAssistantOC2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchAssistantOC2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchAssistantOC2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchAssistantOC2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddNextMenuItem)(ISearchAssistantOC2 *This, BSTR bstrText, int idItem);HRESULT ( *SetDefaultSearchUrl)(ISearchAssistantOC2 *This, BSTR bstrUrl);HRESULT ( *NavigateToDefaultSearch)(ISearchAssistantOC2 *This);HRESULT ( *IsRestricted)(ISearchAssistantOC2 *This, BSTR bstrGuid, VARIANT_BOOL *pVal);HRESULT ( *get_ShellFeaturesEnabled)(ISearchAssistantOC2 *This, VARIANT_BOOL *pVal);HRESULT ( *get_SearchAssistantDefault)(ISearchAssistantOC2 *This, VARIANT_BOOL *pVal);HRESULT ( *get_Searches)(ISearchAssistantOC2 *This, ISearches **ppid);HRESULT ( *get_InWebFolder)(ISearchAssistantOC2 *This, VARIANT_BOOL *pVal);HRESULT ( *PutProperty)(ISearchAssistantOC2 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR bstrValue);HRESULT ( *GetProperty)(ISearchAssistantOC2 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *put_EventHandled)(ISearchAssistantOC2 *This, VARIANT_BOOL bHandled);HRESULT ( *ResetNextMenu)(ISearchAssistantOC2 *This);HRESULT ( *FindOnWeb)(ISearchAssistantOC2 *This);HRESULT ( *FindFilesOrFolders)(ISearchAssistantOC2 *This);HRESULT ( *FindComputer)(ISearchAssistantOC2 *This);HRESULT ( *FindPrinter)(ISearchAssistantOC2 *This);HRESULT ( *FindPeople)(ISearchAssistantOC2 *This);HRESULT ( *GetSearchAssistantURL)(ISearchAssistantOC2 *This, VARIANT_BOOL bSubstitute, VARIANT_BOOL bCustomize, BSTR *pbstrValue);HRESULT ( *NotifySearchSettingsChanged)(ISearchAssistantOC2 *This);HRESULT ( *put_ASProvider)(ISearchAssistantOC2 *This, BSTR Provider);HRESULT ( *get_ASProvider)(ISearchAssistantOC2 *This, BSTR *pProvider);HRESULT ( *put_ASSetting)(ISearchAssistantOC2 *This, int Setting);HRESULT ( *get_ASSetting)(ISearchAssistantOC2 *This, int *pSetting);HRESULT ( *NETDetectNextNavigate)(ISearchAssistantOC2 *This);HRESULT ( *PutFindText)(ISearchAssistantOC2 *This, BSTR FindTextA);HRESULT ( *get_Version)(ISearchAssistantOC2 *This, int *pVersion);HRESULT ( *EncodeString)(ISearchAssistantOC2 *This, BSTR bstrValue, BSTR bstrCharSet, VARIANT_BOOL bUseUTF8, BSTR *pbstrResult);HRESULT ( *get_ShowFindPrinter)(ISearchAssistantOC2 *This, VARIANT_BOOL *pbShowFindPrinter);};
struct ISearchAssistantOC3Vtbl {HRESULT ( *QueryInterface)(ISearchAssistantOC3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchAssistantOC3 *This);ULONG ( *Release)(ISearchAssistantOC3 *This);HRESULT ( *GetTypeInfoCount)(ISearchAssistantOC3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchAssistantOC3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchAssistantOC3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchAssistantOC3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddNextMenuItem)(ISearchAssistantOC3 *This, BSTR bstrText, int idItem);HRESULT ( *SetDefaultSearchUrl)(ISearchAssistantOC3 *This, BSTR bstrUrl);HRESULT ( *NavigateToDefaultSearch)(ISearchAssistantOC3 *This);HRESULT ( *IsRestricted)(ISearchAssistantOC3 *This, BSTR bstrGuid, VARIANT_BOOL *pVal);HRESULT ( *get_ShellFeaturesEnabled)(ISearchAssistantOC3 *This, VARIANT_BOOL *pVal);HRESULT ( *get_SearchAssistantDefault)(ISearchAssistantOC3 *This, VARIANT_BOOL *pVal);HRESULT ( *get_Searches)(ISearchAssistantOC3 *This, ISearches **ppid);HRESULT ( *get_InWebFolder)(ISearchAssistantOC3 *This, VARIANT_BOOL *pVal);HRESULT ( *PutProperty)(ISearchAssistantOC3 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR bstrValue);HRESULT ( *GetProperty)(ISearchAssistantOC3 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *put_EventHandled)(ISearchAssistantOC3 *This, VARIANT_BOOL bHandled);HRESULT ( *ResetNextMenu)(ISearchAssistantOC3 *This);HRESULT ( *FindOnWeb)(ISearchAssistantOC3 *This);HRESULT ( *FindFilesOrFolders)(ISearchAssistantOC3 *This);HRESULT ( *FindComputer)(ISearchAssistantOC3 *This);HRESULT ( *FindPrinter)(ISearchAssistantOC3 *This);HRESULT ( *FindPeople)(ISearchAssistantOC3 *This);HRESULT ( *GetSearchAssistantURL)(ISearchAssistantOC3 *This, VARIANT_BOOL bSubstitute, VARIANT_BOOL bCustomize, BSTR *pbstrValue);HRESULT ( *NotifySearchSettingsChanged)(ISearchAssistantOC3 *This);HRESULT ( *put_ASProvider)(ISearchAssistantOC3 *This, BSTR Provider);HRESULT ( *get_ASProvider)(ISearchAssistantOC3 *This, BSTR *pProvider);HRESULT ( *put_ASSetting)(ISearchAssistantOC3 *This, int Setting);HRESULT ( *get_ASSetting)(ISearchAssistantOC3 *This, int *pSetting);HRESULT ( *NETDetectNextNavigate)(ISearchAssistantOC3 *This);HRESULT ( *PutFindText)(ISearchAssistantOC3 *This, BSTR FindTextA);HRESULT ( *get_Version)(ISearchAssistantOC3 *This, int *pVersion);HRESULT ( *EncodeString)(ISearchAssistantOC3 *This, BSTR bstrValue, BSTR bstrCharSet, VARIANT_BOOL bUseUTF8, BSTR *pbstrResult);HRESULT ( *get_ShowFindPrinter)(ISearchAssistantOC3 *This, VARIANT_BOOL *pbShowFindPrinter);HRESULT ( *get_SearchCompanionAvailable)(ISearchAssistantOC3 *This, VARIANT_BOOL *pbAvailable);HRESULT ( *put_UseSearchCompanion)(ISearchAssistantOC3 *This, VARIANT_BOOL bUseSC);HRESULT ( *get_UseSearchCompanion)(ISearchAssistantOC3 *This, VARIANT_BOOL *pbUseSC);};
struct ISWbemQualifierSetVtbl {HRESULT ( *QueryInterface)(ISWbemQualifierSet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemQualifierSet *This);ULONG ( *Release)(ISWbemQualifierSet *This);HRESULT ( *GetTypeInfoCount)(ISWbemQualifierSet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemQualifierSet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemQualifierSet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemQualifierSet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ISWbemQualifierSet *This, IUnknown **pUnk);HRESULT ( *Item)(ISWbemQualifierSet *This, BSTR name, int iFlags, ISWbemQualifier **objWbemQualifier);HRESULT ( *get_Count)(ISWbemQualifierSet *This, int *iCount);HRESULT ( *Add)(ISWbemQualifierSet *This, BSTR strName, VARIANT *varVal, VARIANT_BOOL bPropagatesToSubclass, VARIANT_BOOL bPropagatesToInstance, VARIANT_BOOL bIsOverridable, int iFlags, ISWbemQualifier **objWbemQualifier);HRESULT ( *Remove)(ISWbemQualifierSet *This, BSTR strName, int iFlags);};
struct ISearchAssistantOCVtbl {HRESULT ( *QueryInterface)(ISearchAssistantOC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchAssistantOC *This);ULONG ( *Release)(ISearchAssistantOC *This);HRESULT ( *GetTypeInfoCount)(ISearchAssistantOC *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchAssistantOC *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchAssistantOC *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchAssistantOC *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddNextMenuItem)(ISearchAssistantOC *This, BSTR bstrText, int idItem);HRESULT ( *SetDefaultSearchUrl)(ISearchAssistantOC *This, BSTR bstrUrl);HRESULT ( *NavigateToDefaultSearch)(ISearchAssistantOC *This);HRESULT ( *IsRestricted)(ISearchAssistantOC *This, BSTR bstrGuid, VARIANT_BOOL *pVal);HRESULT ( *get_ShellFeaturesEnabled)(ISearchAssistantOC *This, VARIANT_BOOL *pVal);HRESULT ( *get_SearchAssistantDefault)(ISearchAssistantOC *This, VARIANT_BOOL *pVal);HRESULT ( *get_Searches)(ISearchAssistantOC *This, ISearches **ppid);HRESULT ( *get_InWebFolder)(ISearchAssistantOC *This, VARIANT_BOOL *pVal);HRESULT ( *PutProperty)(ISearchAssistantOC *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR bstrValue);HRESULT ( *GetProperty)(ISearchAssistantOC *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *put_EventHandled)(ISearchAssistantOC *This, VARIANT_BOOL bHandled);HRESULT ( *ResetNextMenu)(ISearchAssistantOC *This);HRESULT ( *FindOnWeb)(ISearchAssistantOC *This);HRESULT ( *FindFilesOrFolders)(ISearchAssistantOC *This);HRESULT ( *FindComputer)(ISearchAssistantOC *This);HRESULT ( *FindPrinter)(ISearchAssistantOC *This);HRESULT ( *FindPeople)(ISearchAssistantOC *This);HRESULT ( *GetSearchAssistantURL)(ISearchAssistantOC *This, VARIANT_BOOL bSubstitute, VARIANT_BOOL bCustomize, BSTR *pbstrValue);HRESULT ( *NotifySearchSettingsChanged)(ISearchAssistantOC *This);HRESULT ( *put_ASProvider)(ISearchAssistantOC *This, BSTR Provider);HRESULT ( *get_ASProvider)(ISearchAssistantOC *This, BSTR *pProvider);HRESULT ( *put_ASSetting)(ISearchAssistantOC *This, int Setting);HRESULT ( *get_ASSetting)(ISearchAssistantOC *This, int *pSetting);HRESULT ( *NETDetectNextNavigate)(ISearchAssistantOC *This);HRESULT ( *PutFindText)(ISearchAssistantOC *This, BSTR FindTextA);HRESULT ( *get_Version)(ISearchAssistantOC *This, int *pVersion);HRESULT ( *EncodeString)(ISearchAssistantOC *This, BSTR bstrValue, BSTR bstrCharSet, VARIANT_BOOL bUseUTF8, BSTR *pbstrResult);};
struct ISearchCommandExtVtbl {HRESULT ( *QueryInterface)(ISearchCommandExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchCommandExt *This);ULONG ( *Release)(ISearchCommandExt *This);HRESULT ( *GetTypeInfoCount)(ISearchCommandExt *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchCommandExt *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchCommandExt *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchCommandExt *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ClearResults)(ISearchCommandExt *This);HRESULT ( *NavigateToSearchResults)(ISearchCommandExt *This);HRESULT ( *get_ProgressText)(ISearchCommandExt *This, BSTR *pbs);HRESULT ( *SaveSearch)(ISearchCommandExt *This);HRESULT ( *GetErrorInfo)(ISearchCommandExt *This, BSTR *pbs, int *phr);HRESULT ( *SearchFor)(ISearchCommandExt *This, int iFor);HRESULT ( *GetScopeInfo)(ISearchCommandExt *This, BSTR bsScope, int *pdwScopeInfo);HRESULT ( *RestoreSavedSearch)(ISearchCommandExt *This, VARIANT *pvarFile);HRESULT ( *Execute)(ISearchCommandExt *This, VARIANT *RecordsAffected, VARIANT *Parameters, int Options);HRESULT ( *AddConstraint)(ISearchCommandExt *This, BSTR Name, VARIANT Value);HRESULT ( *GetNextConstraint)(ISearchCommandExt *This, VARIANT_BOOL fReset, DFConstraint **ppdfc);};
struct IOleInPlaceFrameVtbl {HRESULT ( *QueryInterface)(IOleInPlaceFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceFrame *This);ULONG ( *Release)(IOleInPlaceFrame *This);HRESULT ( *GetWindow)(IOleInPlaceFrame *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceFrame *This, BOOL fEnterMode);HRESULT ( *GetBorder)(IOleInPlaceFrame *This, LPRECT lprectBorder);HRESULT ( *RequestBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetActiveObject)(IOleInPlaceFrame *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);HRESULT ( *InsertMenus)(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT ( *SetMenu)(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);HRESULT ( *RemoveMenus)(IOleInPlaceFrame *This, HMENU hmenuShared);HRESULT ( *SetStatusText)(IOleInPlaceFrame *This, LPCOLESTR pszStatusText);HRESULT ( *EnableModeless)(IOleInPlaceFrame *This, BOOL fEnable);HRESULT ( *TranslateAcceleratorA)(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID);};
struct ISWbemObjectPathVtbl {HRESULT ( *QueryInterface)(ISWbemObjectPath *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemObjectPath *This);ULONG ( *Release)(ISWbemObjectPath *This);HRESULT ( *GetTypeInfoCount)(ISWbemObjectPath *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemObjectPath *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemObjectPath *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemObjectPath *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Path)(ISWbemObjectPath *This, BSTR *strPath);HRESULT ( *put_Path)(ISWbemObjectPath *This, BSTR strPath);HRESULT ( *get_RelPath)(ISWbemObjectPath *This, BSTR *strRelPath);HRESULT ( *put_RelPath)(ISWbemObjectPath *This, BSTR strRelPath);HRESULT ( *get_Server)(ISWbemObjectPath *This, BSTR *strServer);HRESULT ( *put_Server)(ISWbemObjectPath *This, BSTR strServer);HRESULT ( *get_Namespace)(ISWbemObjectPath *This, BSTR *strNamespace);HRESULT ( *put_Namespace)(ISWbemObjectPath *This, BSTR strNamespace);HRESULT ( *get_ParentNamespace)(ISWbemObjectPath *This, BSTR *strParentNamespace);HRESULT ( *get_DisplayName)(ISWbemObjectPath *This, BSTR *strDisplayName);HRESULT ( *put_DisplayName)(ISWbemObjectPath *This, BSTR strDisplayName);HRESULT ( *get_Class)(ISWbemObjectPath *This, BSTR *strClass);HRESULT ( *put_Class)(ISWbemObjectPath *This, BSTR strClass);HRESULT ( *get_IsClass)(ISWbemObjectPath *This, VARIANT_BOOL *bIsClass);HRESULT ( *SetAsClass)(ISWbemObjectPath *This);HRESULT ( *get_IsSingleton)(ISWbemObjectPath *This, VARIANT_BOOL *bIsSingleton);HRESULT ( *SetAsSingleton)(ISWbemObjectPath *This);HRESULT ( *get_Keys)(ISWbemObjectPath *This, ISWbemNamedValueSet **objWbemNamedValueSet);HRESULT ( *get_Security_)(ISWbemObjectPath *This, ISWbemSecurity **objWbemSecurity);HRESULT ( *get_Locale)(ISWbemObjectPath *This, BSTR *strLocale);HRESULT ( *put_Locale)(ISWbemObjectPath *This, BSTR strLocale);HRESULT ( *get_Authority)(ISWbemObjectPath *This, BSTR *strAuthority);HRESULT ( *put_Authority)(ISWbemObjectPath *This, BSTR strAuthority);};
struct ISWbemServicesExVtbl {HRESULT ( *QueryInterface)(ISWbemServicesEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemServicesEx *This);ULONG ( *Release)(ISWbemServicesEx *This);HRESULT ( *GetTypeInfoCount)(ISWbemServicesEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemServicesEx *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemServicesEx *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemServicesEx *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Get)(ISWbemServicesEx *This, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObject **objWbemObject);HRESULT ( *GetAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Delete)(ISWbemServicesEx *This, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet);HRESULT ( *DeleteAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *InstancesOf)(ISWbemServicesEx *This, BSTR strClass, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *InstancesOfAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strClass, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *SubclassesOf)(ISWbemServicesEx *This, BSTR strSuperclass, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *SubclassesOfAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strSuperclass, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecQuery)(ISWbemServicesEx *This, BSTR strQuery, BSTR strQueryLanguage, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *ExecQueryAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strQuery, BSTR strQueryLanguage, int lFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *AssociatorsOf)(ISWbemServicesEx *This, BSTR strObjectPath, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *AssociatorsOfAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strObjectPath, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ReferencesTo)(ISWbemServicesEx *This, BSTR strObjectPath, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *ReferencesToAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strObjectPath, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecNotificationQuery)(ISWbemServicesEx *This, BSTR strQuery, BSTR strQueryLanguage, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemEventSource **objWbemEventSource);HRESULT ( *ExecNotificationQueryAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strQuery, BSTR strQueryLanguage, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecMethod)(ISWbemServicesEx *This, BSTR strObjectPath, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObject **objWbemOutParameters);HRESULT ( *ExecMethodAsync)(ISWbemServicesEx *This, IDispatch *objWbemSink, BSTR strObjectPath, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *get_Security_)(ISWbemServicesEx *This, ISWbemSecurity **objWbemSecurity);HRESULT ( *Put)(ISWbemServicesEx *This, ISWbemObjectEx *objWbemObject, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectPath **objWbemObjectPath);HRESULT ( *PutAsync)(ISWbemServicesEx *This, ISWbemSink *objWbemSink, ISWbemObjectEx *objWbemObject, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);};
struct IFileSearchBandVtbl {HRESULT ( *QueryInterface)(IFileSearchBand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSearchBand *This);ULONG ( *Release)(IFileSearchBand *This);HRESULT ( *GetTypeInfoCount)(IFileSearchBand *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFileSearchBand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFileSearchBand *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFileSearchBand *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetFocus)(IFileSearchBand *This);HRESULT ( *SetSearchParameters)(IFileSearchBand *This, BSTR *pbstrSearchID, VARIANT_BOOL bNavToResults, VARIANT *pvarScope, VARIANT *pvarQueryFile);HRESULT ( *get_SearchID)(IFileSearchBand *This, BSTR *pbstrSearchID);HRESULT ( *get_Scope)(IFileSearchBand *This, VARIANT *pvarScope);HRESULT ( *get_QueryFile)(IFileSearchBand *This, VARIANT *pvarFile);};
struct ISWbemLastErrorVtbl {HRESULT ( *QueryInterface)(ISWbemLastError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemLastError *This);ULONG ( *Release)(ISWbemLastError *This);HRESULT ( *GetTypeInfoCount)(ISWbemLastError *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemLastError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemLastError *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemLastError *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Put_)(ISWbemLastError *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectPath **objWbemObjectPath);HRESULT ( *PutAsync_)(ISWbemLastError *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Delete_)(ISWbemLastError *This, int iFlags, IDispatch *objWbemNamedValueSet);HRESULT ( *DeleteAsync_)(ISWbemLastError *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Instances_)(ISWbemLastError *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *InstancesAsync_)(ISWbemLastError *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Subclasses_)(ISWbemLastError *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *SubclassesAsync_)(ISWbemLastError *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Associators_)(ISWbemLastError *This, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *AssociatorsAsync_)(ISWbemLastError *This, IDispatch *objWbemSink, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *References_)(ISWbemLastError *This, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *ReferencesAsync_)(ISWbemLastError *This, IDispatch *objWbemSink, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecMethod_)(ISWbemLastError *This, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObject **objWbemOutParameters);HRESULT ( *ExecMethodAsync_)(ISWbemLastError *This, IDispatch *objWbemSink, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Clone_)(ISWbemLastError *This, ISWbemObject **objWbemObject);HRESULT ( *GetObjectText_)(ISWbemLastError *This, int iFlags, BSTR *strObjectText);HRESULT ( *SpawnDerivedClass_)(ISWbemLastError *This, int iFlags, ISWbemObject **objWbemObject);HRESULT ( *SpawnInstance_)(ISWbemLastError *This, int iFlags, ISWbemObject **objWbemObject);HRESULT ( *CompareTo_)(ISWbemLastError *This, IDispatch *objWbemObject, int iFlags, VARIANT_BOOL *bResult);HRESULT ( *get_Qualifiers_)(ISWbemLastError *This, ISWbemQualifierSet **objWbemQualifierSet);HRESULT ( *get_Properties_)(ISWbemLastError *This, ISWbemPropertySet **objWbemPropertySet);HRESULT ( *get_Methods_)(ISWbemLastError *This, ISWbemMethodSet **objWbemMethodSet);HRESULT ( *get_Derivation_)(ISWbemLastError *This, VARIANT *strClassNameArray);HRESULT ( *get_Path_)(ISWbemLastError *This, ISWbemObjectPath **objWbemObjectPath);HRESULT ( *get_Security_)(ISWbemLastError *This, ISWbemSecurity **objWbemSecurity);};
struct ISWbemQualifierVtbl {HRESULT ( *QueryInterface)(ISWbemQualifier *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemQualifier *This);ULONG ( *Release)(ISWbemQualifier *This);HRESULT ( *GetTypeInfoCount)(ISWbemQualifier *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemQualifier *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemQualifier *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemQualifier *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(ISWbemQualifier *This, VARIANT *varValue);HRESULT ( *put_Value)(ISWbemQualifier *This, VARIANT *varValue);HRESULT ( *get_Name)(ISWbemQualifier *This, BSTR *strName);HRESULT ( *get_IsLocal)(ISWbemQualifier *This, VARIANT_BOOL *bIsLocal);HRESULT ( *get_PropagatesToSubclass)(ISWbemQualifier *This, VARIANT_BOOL *bPropagatesToSubclass);HRESULT ( *put_PropagatesToSubclass)(ISWbemQualifier *This, VARIANT_BOOL bPropagatesToSubclass);HRESULT ( *get_PropagatesToInstance)(ISWbemQualifier *This, VARIANT_BOOL *bPropagatesToInstance);HRESULT ( *put_PropagatesToInstance)(ISWbemQualifier *This, VARIANT_BOOL bPropagatesToInstance);HRESULT ( *get_IsOverridable)(ISWbemQualifier *This, VARIANT_BOOL *bIsOverridable);HRESULT ( *put_IsOverridable)(ISWbemQualifier *This, VARIANT_BOOL bIsOverridable);HRESULT ( *get_IsAmended)(ISWbemQualifier *This, VARIANT_BOOL *bIsAmended);};
struct ISWbemRefresherVtbl {HRESULT ( *QueryInterface)(ISWbemRefresher *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemRefresher *This);ULONG ( *Release)(ISWbemRefresher *This);HRESULT ( *GetTypeInfoCount)(ISWbemRefresher *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemRefresher *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemRefresher *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemRefresher *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ISWbemRefresher *This, IUnknown **pUnk);HRESULT ( *Item)(ISWbemRefresher *This, int iIndex, ISWbemRefreshableItem **objWbemRefreshableItem);HRESULT ( *get_Count)(ISWbemRefresher *This, int *iCount);HRESULT ( *Add)(ISWbemRefresher *This, ISWbemServicesEx *objWbemServices, BSTR bsInstancePath, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemRefreshableItem **objWbemRefreshableItem);HRESULT ( *AddEnum)(ISWbemRefresher *This, ISWbemServicesEx *objWbemServices, BSTR bsClassName, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemRefreshableItem **objWbemRefreshableItem);HRESULT ( *Remove)(ISWbemRefresher *This, int iIndex, int iFlags);HRESULT ( *Refresh)(ISWbemRefresher *This, int iFlags);HRESULT ( *get_AutoReconnect)(ISWbemRefresher *This, VARIANT_BOOL *bCount);HRESULT ( *put_AutoReconnect)(ISWbemRefresher *This, VARIANT_BOOL bCount);HRESULT ( *DeleteAll)(ISWbemRefresher *This);};
struct IShellDispatch4Vtbl {HRESULT ( *QueryInterface)(IShellDispatch4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch4 *This);ULONG ( *Release)(IShellDispatch4 *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch4 *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch4 *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch4 *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch4 *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch4 *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch4 *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch4 *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch4 *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch4 *This);HRESULT ( *FileRun)(IShellDispatch4 *This);HRESULT ( *CascadeWindows)(IShellDispatch4 *This);HRESULT ( *TileVertically)(IShellDispatch4 *This);HRESULT ( *TileHorizontally)(IShellDispatch4 *This);HRESULT ( *ShutdownWindows)(IShellDispatch4 *This);HRESULT ( *Suspend)(IShellDispatch4 *This);HRESULT ( *EjectPC)(IShellDispatch4 *This);HRESULT ( *SetTime)(IShellDispatch4 *This);HRESULT ( *TrayProperties)(IShellDispatch4 *This);HRESULT ( *Help)(IShellDispatch4 *This);HRESULT ( *FindFiles)(IShellDispatch4 *This);HRESULT ( *FindComputer)(IShellDispatch4 *This);HRESULT ( *RefreshMenu)(IShellDispatch4 *This);HRESULT ( *ControlPanelItem)(IShellDispatch4 *This, BSTR szDir);HRESULT ( *IsRestricted)(IShellDispatch4 *This, BSTR Group, BSTR Restriction, int *plRestrictValue);HRESULT ( *ShellExecuteA)(IShellDispatch4 *This, BSTR File, VARIANT vArgs, VARIANT vDir, VARIANT vOperation, VARIANT vShow);HRESULT ( *FindPrinter)(IShellDispatch4 *This, BSTR name, BSTR location, BSTR model);HRESULT ( *GetSystemInformation)(IShellDispatch4 *This, BSTR name, VARIANT *pv);HRESULT ( *ServiceStart)(IShellDispatch4 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *ServiceStop)(IShellDispatch4 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *IsServiceRunning)(IShellDispatch4 *This, BSTR ServiceName, VARIANT *pRunning);HRESULT ( *CanStartStopService)(IShellDispatch4 *This, BSTR ServiceName, VARIANT *pCanStartStop);HRESULT ( *ShowBrowserBar)(IShellDispatch4 *This, BSTR bstrClsid, VARIANT bShow, VARIANT *pSuccess);HRESULT ( *AddToRecent)(IShellDispatch4 *This, VARIANT varFile, BSTR bstrCategory);HRESULT ( *WindowsSecurity)(IShellDispatch4 *This);HRESULT ( *ToggleDesktop)(IShellDispatch4 *This);HRESULT ( *ExplorerPolicy)(IShellDispatch4 *This, BSTR bstrPolicyName, VARIANT *pValue);HRESULT ( *GetSetting)(IShellDispatch4 *This, int lSetting, VARIANT_BOOL *pResult);};
struct ISWbemSecurityVtbl {HRESULT ( *QueryInterface)(ISWbemSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemSecurity *This);ULONG ( *Release)(ISWbemSecurity *This);HRESULT ( *GetTypeInfoCount)(ISWbemSecurity *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemSecurity *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemSecurity *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemSecurity *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ImpersonationLevel)(ISWbemSecurity *This, WbemImpersonationLevelEnum *iImpersonationLevel);HRESULT ( *put_ImpersonationLevel)(ISWbemSecurity *This, WbemImpersonationLevelEnum iImpersonationLevel);HRESULT ( *get_AuthenticationLevel)(ISWbemSecurity *This, WbemAuthenticationLevelEnum *iAuthenticationLevel);HRESULT ( *put_AuthenticationLevel)(ISWbemSecurity *This, WbemAuthenticationLevelEnum iAuthenticationLevel);HRESULT ( *get_Privileges)(ISWbemSecurity *This, ISWbemPrivilegeSet **objWbemPrivilegeSet);};
struct ISWbemServicesVtbl {HRESULT ( *QueryInterface)(ISWbemServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemServices *This);ULONG ( *Release)(ISWbemServices *This);HRESULT ( *GetTypeInfoCount)(ISWbemServices *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemServices *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemServices *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemServices *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Get)(ISWbemServices *This, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObject **objWbemObject);HRESULT ( *GetAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Delete)(ISWbemServices *This, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet);HRESULT ( *DeleteAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strObjectPath, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *InstancesOf)(ISWbemServices *This, BSTR strClass, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *InstancesOfAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strClass, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *SubclassesOf)(ISWbemServices *This, BSTR strSuperclass, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *SubclassesOfAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strSuperclass, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecQuery)(ISWbemServices *This, BSTR strQuery, BSTR strQueryLanguage, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *ExecQueryAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strQuery, BSTR strQueryLanguage, int lFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *AssociatorsOf)(ISWbemServices *This, BSTR strObjectPath, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *AssociatorsOfAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strObjectPath, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ReferencesTo)(ISWbemServices *This, BSTR strObjectPath, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *ReferencesToAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strObjectPath, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecNotificationQuery)(ISWbemServices *This, BSTR strQuery, BSTR strQueryLanguage, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemEventSource **objWbemEventSource);HRESULT ( *ExecNotificationQueryAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strQuery, BSTR strQueryLanguage, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecMethod)(ISWbemServices *This, BSTR strObjectPath, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObject **objWbemOutParameters);HRESULT ( *ExecMethodAsync)(ISWbemServices *This, IDispatch *objWbemSink, BSTR strObjectPath, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *get_Security_)(ISWbemServices *This, ISWbemSecurity **objWbemSecurity);};
struct IShellUIHelperVtbl {HRESULT ( *QueryInterface)(IShellUIHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellUIHelper *This);ULONG ( *Release)(IShellUIHelper *This);HRESULT ( *GetTypeInfoCount)(IShellUIHelper *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellUIHelper *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellUIHelper *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellUIHelper *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ResetFirstBootMode)(IShellUIHelper *This);HRESULT ( *ResetSafeMode)(IShellUIHelper *This);HRESULT ( *RefreshOfflineDesktop)(IShellUIHelper *This);HRESULT ( *AddFavorite)(IShellUIHelper *This, BSTR URL, VARIANT *Title);HRESULT ( *AddChannel)(IShellUIHelper *This, BSTR URL);HRESULT ( *AddDesktopComponent)(IShellUIHelper *This, BSTR URL, BSTR Type, VARIANT *Left, VARIANT *Top, VARIANT *Width, VARIANT *Height);HRESULT ( *IsSubscribed)(IShellUIHelper *This, BSTR URL, VARIANT_BOOL *pBool);HRESULT ( *NavigateAndFind)(IShellUIHelper *This, BSTR URL, BSTR strQuery, VARIANT *varTargetFrame);HRESULT ( *ImportExportFavorites)(IShellUIHelper *This, VARIANT_BOOL fImport, BSTR strImpExpPath);HRESULT ( *AutoCompleteSaveForm)(IShellUIHelper *This, VARIANT *Form);HRESULT ( *AutoScan)(IShellUIHelper *This, BSTR strSearch, BSTR strFailureUrl, VARIANT *pvarTargetFrame);HRESULT ( *AutoCompleteAttach)(IShellUIHelper *This, VARIANT *Reserved);HRESULT ( *ShowBrowserUI)(IShellUIHelper *This, BSTR bstrName, VARIANT *pvarIn, VARIANT *pvarOut);};
struct IWebWizardHostVtbl {HRESULT ( *QueryInterface)(IWebWizardHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebWizardHost *This);ULONG ( *Release)(IWebWizardHost *This);HRESULT ( *GetTypeInfoCount)(IWebWizardHost *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebWizardHost *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebWizardHost *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebWizardHost *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *FinalBack)(IWebWizardHost *This);HRESULT ( *FinalNext)(IWebWizardHost *This);HRESULT ( *Cancel)(IWebWizardHost *This);HRESULT ( *put_Caption)(IWebWizardHost *This, BSTR bstrCaption);HRESULT ( *get_Caption)(IWebWizardHost *This, BSTR *pbstrCaption);HRESULT ( *put_Property)(IWebWizardHost *This, BSTR bstrPropertyName, VARIANT *pvProperty);HRESULT ( *get_Property)(IWebWizardHost *This, BSTR bstrPropertyName, VARIANT *pvProperty);HRESULT ( *SetWizardButtons)(IWebWizardHost *This, VARIANT_BOOL vfEnableBack, VARIANT_BOOL vfEnableNext, VARIANT_BOOL vfLastPage);HRESULT ( *SetHeaderText)(IWebWizardHost *This, BSTR bstrHeaderTitle, BSTR bstrHeaderSubtitle);};
struct IShellWindowsVtbl {HRESULT ( *QueryInterface)(IShellWindows *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellWindows *This);ULONG ( *Release)(IShellWindows *This);HRESULT ( *GetTypeInfoCount)(IShellWindows *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellWindows *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellWindows *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellWindows *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IShellWindows *This, int *Count);HRESULT ( *Item)(IShellWindows *This, VARIANT index, IDispatch **Folder);HRESULT ( *_NewEnum)(IShellWindows *This, IUnknown **ppunk);HRESULT ( *Register)(IShellWindows *This, IDispatch *pid, int hwnd, int swClass, int *plCookie);HRESULT ( *RegisterPending)(IShellWindows *This, int lThreadId, VARIANT *pvarloc, VARIANT *pvarlocRoot, int swClass, int *plCookie);HRESULT ( *Revoke)(IShellWindows *This, int lCookie);HRESULT ( *OnNavigate)(IShellWindows *This, int lCookie, VARIANT *pvarLoc);HRESULT ( *OnActivated)(IShellWindows *This, int lCookie, VARIANT_BOOL fActive);HRESULT ( *FindWindowSW)(IShellWindows *This, VARIANT *pvarLoc, VARIANT *pvarLocRoot, int swClass, int *phwnd, int swfwOptions, IDispatch **ppdispOut);HRESULT ( *OnCreated)(IShellWindows *This, int lCookie, IUnknown *punk);HRESULT ( *ProcessAttachDetach)(IShellWindows *This, VARIANT_BOOL fAttach);};
struct IXMLDocument2Vtbl {HRESULT ( *QueryInterface)(IXMLDocument2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDocument2 *This);ULONG ( *Release)(IXMLDocument2 *This);HRESULT ( *GetTypeInfoCount)(IXMLDocument2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDocument2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDocument2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDocument2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_root)(IXMLDocument2 *This, IXMLElement2 **p);HRESULT ( *get_fileSize)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_URL)(IXMLDocument2 *This, BSTR *p);HRESULT ( *put_URL)(IXMLDocument2 *This, BSTR p);HRESULT ( *get_mimeType)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_readyState)(IXMLDocument2 *This, int *pl);HRESULT ( *get_charset)(IXMLDocument2 *This, BSTR *p);HRESULT ( *put_charset)(IXMLDocument2 *This, BSTR p);HRESULT ( *get_version)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_doctype)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_dtdURL)(IXMLDocument2 *This, BSTR *p);HRESULT ( *createElement)(IXMLDocument2 *This, VARIANT vType, VARIANT var1, IXMLElement2 **ppElem);HRESULT ( *get_async)(IXMLDocument2 *This, VARIANT_BOOL *pf);HRESULT ( *put_async)(IXMLDocument2 *This, VARIANT_BOOL f);};
struct INewWDEventsVtbl {HRESULT ( *QueryInterface)(INewWDEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INewWDEvents *This);ULONG ( *Release)(INewWDEvents *This);HRESULT ( *GetTypeInfoCount)(INewWDEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(INewWDEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(INewWDEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(INewWDEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *FinalBack)(INewWDEvents *This);HRESULT ( *FinalNext)(INewWDEvents *This);HRESULT ( *Cancel)(INewWDEvents *This);HRESULT ( *put_Caption)(INewWDEvents *This, BSTR bstrCaption);HRESULT ( *get_Caption)(INewWDEvents *This, BSTR *pbstrCaption);HRESULT ( *put_Property)(INewWDEvents *This, BSTR bstrPropertyName, VARIANT *pvProperty);HRESULT ( *get_Property)(INewWDEvents *This, BSTR bstrPropertyName, VARIANT *pvProperty);HRESULT ( *SetWizardButtons)(INewWDEvents *This, VARIANT_BOOL vfEnableBack, VARIANT_BOOL vfEnableNext, VARIANT_BOOL vfLastPage);HRESULT ( *SetHeaderText)(INewWDEvents *This, BSTR bstrHeaderTitle, BSTR bstrHeaderSubtitle);HRESULT ( *PassportAuthenticate)(INewWDEvents *This, BSTR bstrSignInUrl, VARIANT_BOOL *pvfAuthenitcated);};
struct ISWbemObjectVtbl {HRESULT ( *QueryInterface)(ISWbemObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemObject *This);ULONG ( *Release)(ISWbemObject *This);HRESULT ( *GetTypeInfoCount)(ISWbemObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Put_)(ISWbemObject *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectPath **objWbemObjectPath);HRESULT ( *PutAsync_)(ISWbemObject *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Delete_)(ISWbemObject *This, int iFlags, IDispatch *objWbemNamedValueSet);HRESULT ( *DeleteAsync_)(ISWbemObject *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Instances_)(ISWbemObject *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *InstancesAsync_)(ISWbemObject *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Subclasses_)(ISWbemObject *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *SubclassesAsync_)(ISWbemObject *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Associators_)(ISWbemObject *This, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *AssociatorsAsync_)(ISWbemObject *This, IDispatch *objWbemSink, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *References_)(ISWbemObject *This, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *ReferencesAsync_)(ISWbemObject *This, IDispatch *objWbemSink, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecMethod_)(ISWbemObject *This, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObject **objWbemOutParameters);HRESULT ( *ExecMethodAsync_)(ISWbemObject *This, IDispatch *objWbemSink, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Clone_)(ISWbemObject *This, ISWbemObject **objWbemObject);HRESULT ( *GetObjectText_)(ISWbemObject *This, int iFlags, BSTR *strObjectText);HRESULT ( *SpawnDerivedClass_)(ISWbemObject *This, int iFlags, ISWbemObject **objWbemObject);HRESULT ( *SpawnInstance_)(ISWbemObject *This, int iFlags, ISWbemObject **objWbemObject);HRESULT ( *CompareTo_)(ISWbemObject *This, IDispatch *objWbemObject, int iFlags, VARIANT_BOOL *bResult);HRESULT ( *get_Qualifiers_)(ISWbemObject *This, ISWbemQualifierSet **objWbemQualifierSet);HRESULT ( *get_Properties_)(ISWbemObject *This, ISWbemPropertySet **objWbemPropertySet);HRESULT ( *get_Methods_)(ISWbemObject *This, ISWbemMethodSet **objWbemMethodSet);HRESULT ( *get_Derivation_)(ISWbemObject *This, VARIANT *strClassNameArray);HRESULT ( *get_Path_)(ISWbemObject *This, ISWbemObjectPath **objWbemObjectPath);HRESULT ( *get_Security_)(ISWbemObject *This, ISWbemSecurity **objWbemSecurity);};
struct IDispatchExVtbl {HRESULT ( *QueryInterface)(IDispatchEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispatchEx *This);ULONG ( *Release)(IDispatchEx *This);HRESULT ( *GetTypeInfoCount)(IDispatchEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDispatchEx *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDispatchEx *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDispatchEx *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDispID)(IDispatchEx *This, BSTR bstrName, DWORD grfdex, DISPID *pid);HRESULT ( *InvokeEx)(IDispatchEx *This, DISPID id, LCID lcid, WORD wFlags, DISPPARAMS *pdp, VARIANT *pvarRes, EXCEPINFO *pei, IServiceProvider *pspCaller);HRESULT ( *DeleteMemberByName)(IDispatchEx *This, BSTR bstrName, DWORD grfdex);HRESULT ( *DeleteMemberByDispID)(IDispatchEx *This, DISPID id);HRESULT ( *GetMemberProperties)(IDispatchEx *This, DISPID id, DWORD grfdexFetch, DWORD *pgrfdex);HRESULT ( *GetMemberName)(IDispatchEx *This, DISPID id, BSTR *pbstrName);HRESULT ( *GetNextDispID)(IDispatchEx *This, DWORD grfdex, DISPID id, DISPID *pid);HRESULT ( *GetNameSpaceParent)(IDispatchEx *This, IUnknown **ppunk);};
struct IWebBrowserVtbl {HRESULT ( *QueryInterface)(IWebBrowser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowser *This);ULONG ( *Release)(IWebBrowser *This);HRESULT ( *GetTypeInfoCount)(IWebBrowser *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowser *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowser *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowser *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowser *This);HRESULT ( *GoForward)(IWebBrowser *This);HRESULT ( *GoHome)(IWebBrowser *This);HRESULT ( *GoSearch)(IWebBrowser *This);HRESULT ( *Navigate)(IWebBrowser *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowser *This);HRESULT ( *Refresh2)(IWebBrowser *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowser *This);HRESULT ( *get_Application)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowser *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowser *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowser *This, int *pl);HRESULT ( *put_Left)(IWebBrowser *This, int Left);HRESULT ( *get_Top)(IWebBrowser *This, int *pl);HRESULT ( *put_Top)(IWebBrowser *This, int Top);HRESULT ( *get_Width)(IWebBrowser *This, int *pl);HRESULT ( *put_Width)(IWebBrowser *This, int Width);HRESULT ( *get_Height)(IWebBrowser *This, int *pl);HRESULT ( *put_Height)(IWebBrowser *This, int Height);HRESULT ( *get_LocationName)(IWebBrowser *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowser *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowser *This, VARIANT_BOOL *pBool);};
struct ISWbemPrivilegeSetVtbl {HRESULT ( *QueryInterface)(ISWbemPrivilegeSet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemPrivilegeSet *This);ULONG ( *Release)(ISWbemPrivilegeSet *This);HRESULT ( *GetTypeInfoCount)(ISWbemPrivilegeSet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemPrivilegeSet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemPrivilegeSet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemPrivilegeSet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ISWbemPrivilegeSet *This, IUnknown **pUnk);HRESULT ( *Item)(ISWbemPrivilegeSet *This, WbemPrivilegeEnum iPrivilege, ISWbemPrivilege **objWbemPrivilege);HRESULT ( *get_Count)(ISWbemPrivilegeSet *This, int *iCount);HRESULT ( *Add)(ISWbemPrivilegeSet *This, WbemPrivilegeEnum iPrivilege, VARIANT_BOOL bIsEnabled, ISWbemPrivilege **objWbemPrivilege);HRESULT ( *Remove)(ISWbemPrivilegeSet *This, WbemPrivilegeEnum iPrivilege);HRESULT ( *DeleteAll)(ISWbemPrivilegeSet *This);HRESULT ( *AddAsString)(ISWbemPrivilegeSet *This, BSTR strPrivilege, VARIANT_BOOL bIsEnabled, ISWbemPrivilege **objWbemPrivilege);};
struct ISWbemPropertySetVtbl {HRESULT ( *QueryInterface)(ISWbemPropertySet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemPropertySet *This);ULONG ( *Release)(ISWbemPropertySet *This);HRESULT ( *GetTypeInfoCount)(ISWbemPropertySet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemPropertySet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemPropertySet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemPropertySet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ISWbemPropertySet *This, IUnknown **pUnk);HRESULT ( *Item)(ISWbemPropertySet *This, BSTR strName, int iFlags, ISWbemProperty **objWbemProperty);HRESULT ( *get_Count)(ISWbemPropertySet *This, int *iCount);HRESULT ( *Add)(ISWbemPropertySet *This, BSTR strName, WbemCimtypeEnum iCIMType, VARIANT_BOOL bIsArray, int iFlags, ISWbemProperty **objWbemProperty);HRESULT ( *Remove)(ISWbemPropertySet *This, BSTR strName, int iFlags);};
struct IScriptErrorListVtbl {HRESULT ( *QueryInterface)(IScriptErrorList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScriptErrorList *This);ULONG ( *Release)(IScriptErrorList *This);HRESULT ( *GetTypeInfoCount)(IScriptErrorList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IScriptErrorList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IScriptErrorList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IScriptErrorList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *advanceError)(IScriptErrorList *This);HRESULT ( *retreatError)(IScriptErrorList *This);HRESULT ( *canAdvanceError)(IScriptErrorList *This, BOOL *pfCanAdvance);HRESULT ( *canRetreatError)(IScriptErrorList *This, BOOL *pfCanRetreat);HRESULT ( *getErrorLine)(IScriptErrorList *This, LONG *plLine);HRESULT ( *getErrorChar)(IScriptErrorList *This, LONG *plChar);HRESULT ( *getErrorCode)(IScriptErrorList *This, LONG *plCode);HRESULT ( *getErrorMsg)(IScriptErrorList *This, BSTR *pstr);HRESULT ( *getErrorUrl)(IScriptErrorList *This, BSTR *pstr);HRESULT ( *getAlwaysShowLockState)(IScriptErrorList *This, BOOL *pfAlwaysShowLocked);HRESULT ( *getDetailsPaneOpen)(IScriptErrorList *This, BOOL *pfDetailsPaneOpen);HRESULT ( *setDetailsPaneOpen)(IScriptErrorList *This, BOOL fDetailsPaneOpen);HRESULT ( *getPerErrorDisplay)(IScriptErrorList *This, BOOL *pfPerErrorDisplay);HRESULT ( *setPerErrorDisplay)(IScriptErrorList *This, BOOL fPerErrorDisplay);};
struct ISWbemPrivilegeVtbl {HRESULT ( *QueryInterface)(ISWbemPrivilege *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemPrivilege *This);ULONG ( *Release)(ISWbemPrivilege *This);HRESULT ( *GetTypeInfoCount)(ISWbemPrivilege *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemPrivilege *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemPrivilege *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemPrivilege *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_IsEnabled)(ISWbemPrivilege *This, VARIANT_BOOL *bIsEnabled);HRESULT ( *put_IsEnabled)(ISWbemPrivilege *This, VARIANT_BOOL bIsEnabled);HRESULT ( *get_Name)(ISWbemPrivilege *This, BSTR *strDisplayName);HRESULT ( *get_DisplayName)(ISWbemPrivilege *This, BSTR *strDisplayName);HRESULT ( *get_Identifier)(ISWbemPrivilege *This, WbemPrivilegeEnum *iPrivilege);};
struct ISWbemDateTimeVtbl {HRESULT ( *QueryInterface)(ISWbemDateTime *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemDateTime *This);ULONG ( *Release)(ISWbemDateTime *This);HRESULT ( *GetTypeInfoCount)(ISWbemDateTime *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemDateTime *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemDateTime *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemDateTime *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(ISWbemDateTime *This, BSTR *strValue);HRESULT ( *put_Value)(ISWbemDateTime *This, BSTR strValue);HRESULT ( *get_Year)(ISWbemDateTime *This, int *iYear);HRESULT ( *put_Year)(ISWbemDateTime *This, int iYear);HRESULT ( *get_YearSpecified)(ISWbemDateTime *This, VARIANT_BOOL *bYearSpecified);HRESULT ( *put_YearSpecified)(ISWbemDateTime *This, VARIANT_BOOL bYearSpecified);HRESULT ( *get_Month)(ISWbemDateTime *This, int *iMonth);HRESULT ( *put_Month)(ISWbemDateTime *This, int iMonth);HRESULT ( *get_MonthSpecified)(ISWbemDateTime *This, VARIANT_BOOL *bMonthSpecified);HRESULT ( *put_MonthSpecified)(ISWbemDateTime *This, VARIANT_BOOL bMonthSpecified);HRESULT ( *get_Day)(ISWbemDateTime *This, int *iDay);HRESULT ( *put_Day)(ISWbemDateTime *This, int iDay);HRESULT ( *get_DaySpecified)(ISWbemDateTime *This, VARIANT_BOOL *bDaySpecified);HRESULT ( *put_DaySpecified)(ISWbemDateTime *This, VARIANT_BOOL bDaySpecified);HRESULT ( *get_Hours)(ISWbemDateTime *This, int *iHours);HRESULT ( *put_Hours)(ISWbemDateTime *This, int iHours);HRESULT ( *get_HoursSpecified)(ISWbemDateTime *This, VARIANT_BOOL *bHoursSpecified);HRESULT ( *put_HoursSpecified)(ISWbemDateTime *This, VARIANT_BOOL bHoursSpecified);HRESULT ( *get_Minutes)(ISWbemDateTime *This, int *iMinutes);HRESULT ( *put_Minutes)(ISWbemDateTime *This, int iMinutes);HRESULT ( *get_MinutesSpecified)(ISWbemDateTime *This, VARIANT_BOOL *bMinutesSpecified);HRESULT ( *put_MinutesSpecified)(ISWbemDateTime *This, VARIANT_BOOL bMinutesSpecified);HRESULT ( *get_Seconds)(ISWbemDateTime *This, int *iSeconds);HRESULT ( *put_Seconds)(ISWbemDateTime *This, int iSeconds);HRESULT ( *get_SecondsSpecified)(ISWbemDateTime *This, VARIANT_BOOL *bSecondsSpecified);HRESULT ( *put_SecondsSpecified)(ISWbemDateTime *This, VARIANT_BOOL bSecondsSpecified);HRESULT ( *get_Microseconds)(ISWbemDateTime *This, int *iMicroseconds);HRESULT ( *put_Microseconds)(ISWbemDateTime *This, int iMicroseconds);HRESULT ( *get_MicrosecondsSpecified)(ISWbemDateTime *This, VARIANT_BOOL *bMicrosecondsSpecified);HRESULT ( *put_MicrosecondsSpecified)(ISWbemDateTime *This, VARIANT_BOOL bMicrosecondsSpecified);HRESULT ( *get_UTC)(ISWbemDateTime *This, int *iUTC);HRESULT ( *put_UTC)(ISWbemDateTime *This, int iUTC);HRESULT ( *get_UTCSpecified)(ISWbemDateTime *This, VARIANT_BOOL *bUTCSpecified);HRESULT ( *put_UTCSpecified)(ISWbemDateTime *This, VARIANT_BOOL bUTCSpecified);HRESULT ( *get_IsInterval)(ISWbemDateTime *This, VARIANT_BOOL *bIsInterval);HRESULT ( *put_IsInterval)(ISWbemDateTime *This, VARIANT_BOOL bIsInterval);HRESULT ( *GetVarDate)(ISWbemDateTime *This, VARIANT_BOOL bIsLocal, DATE *dVarDate);HRESULT ( *SetVarDate)(ISWbemDateTime *This, DATE dVarDate, VARIANT_BOOL bIsLocal);HRESULT ( *GetFileTime)(ISWbemDateTime *This, VARIANT_BOOL bIsLocal, BSTR *strFileTime);HRESULT ( *SetFileTime)(ISWbemDateTime *This, BSTR strFileTime, VARIANT_BOOL bIsLocal);};
struct ISWbemObjectExVtbl {HRESULT ( *QueryInterface)(ISWbemObjectEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemObjectEx *This);ULONG ( *Release)(ISWbemObjectEx *This);HRESULT ( *GetTypeInfoCount)(ISWbemObjectEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemObjectEx *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemObjectEx *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemObjectEx *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Put_)(ISWbemObjectEx *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectPath **objWbemObjectPath);HRESULT ( *PutAsync_)(ISWbemObjectEx *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Delete_)(ISWbemObjectEx *This, int iFlags, IDispatch *objWbemNamedValueSet);HRESULT ( *DeleteAsync_)(ISWbemObjectEx *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Instances_)(ISWbemObjectEx *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *InstancesAsync_)(ISWbemObjectEx *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Subclasses_)(ISWbemObjectEx *This, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *SubclassesAsync_)(ISWbemObjectEx *This, IDispatch *objWbemSink, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Associators_)(ISWbemObjectEx *This, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *AssociatorsAsync_)(ISWbemObjectEx *This, IDispatch *objWbemSink, BSTR strAssocClass, BSTR strResultClass, BSTR strResultRole, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredAssocQualifier, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *References_)(ISWbemObjectEx *This, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObjectSet **objWbemObjectSet);HRESULT ( *ReferencesAsync_)(ISWbemObjectEx *This, IDispatch *objWbemSink, BSTR strResultClass, BSTR strRole, VARIANT_BOOL bClassesOnly, VARIANT_BOOL bSchemaOnly, BSTR strRequiredQualifier, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *ExecMethod_)(ISWbemObjectEx *This, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, ISWbemObject **objWbemOutParameters);HRESULT ( *ExecMethodAsync_)(ISWbemObjectEx *This, IDispatch *objWbemSink, BSTR strMethodName, IDispatch *objWbemInParameters, int iFlags, IDispatch *objWbemNamedValueSet, IDispatch *objWbemAsyncContext);HRESULT ( *Clone_)(ISWbemObjectEx *This, ISWbemObject **objWbemObject);HRESULT ( *GetObjectText_)(ISWbemObjectEx *This, int iFlags, BSTR *strObjectText);HRESULT ( *SpawnDerivedClass_)(ISWbemObjectEx *This, int iFlags, ISWbemObject **objWbemObject);HRESULT ( *SpawnInstance_)(ISWbemObjectEx *This, int iFlags, ISWbemObject **objWbemObject);HRESULT ( *CompareTo_)(ISWbemObjectEx *This, IDispatch *objWbemObject, int iFlags, VARIANT_BOOL *bResult);HRESULT ( *get_Qualifiers_)(ISWbemObjectEx *This, ISWbemQualifierSet **objWbemQualifierSet);HRESULT ( *get_Properties_)(ISWbemObjectEx *This, ISWbemPropertySet **objWbemPropertySet);HRESULT ( *get_Methods_)(ISWbemObjectEx *This, ISWbemMethodSet **objWbemMethodSet);HRESULT ( *get_Derivation_)(ISWbemObjectEx *This, VARIANT *strClassNameArray);HRESULT ( *get_Path_)(ISWbemObjectEx *This, ISWbemObjectPath **objWbemObjectPath);HRESULT ( *get_Security_)(ISWbemObjectEx *This, ISWbemSecurity **objWbemSecurity);HRESULT ( *Refresh_)(ISWbemObjectEx *This, int iFlags, IDispatch *objWbemNamedValueSet);HRESULT ( *get_SystemProperties_)(ISWbemObjectEx *This, ISWbemPropertySet **objWbemPropertySet);HRESULT ( *GetText_)(ISWbemObjectEx *This, WbemObjectTextFormatEnum iObjectTextFormat, int iFlags, IDispatch *objWbemNamedValueSet, BSTR *bsText);HRESULT ( *SetFromText_)(ISWbemObjectEx *This, BSTR bsText, WbemObjectTextFormatEnum iObjectTextFormat, int iFlags, IDispatch *objWbemNamedValueSet);};
struct ISWbemPropertyVtbl {HRESULT ( *QueryInterface)(ISWbemProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISWbemProperty *This);ULONG ( *Release)(ISWbemProperty *This);HRESULT ( *GetTypeInfoCount)(ISWbemProperty *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISWbemProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISWbemProperty *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISWbemProperty *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(ISWbemProperty *This, VARIANT *varValue);HRESULT ( *put_Value)(ISWbemProperty *This, VARIANT *varValue);HRESULT ( *get_Name)(ISWbemProperty *This, BSTR *strName);HRESULT ( *get_IsLocal)(ISWbemProperty *This, VARIANT_BOOL *bIsLocal);HRESULT ( *get_Origin)(ISWbemProperty *This, BSTR *strOrigin);HRESULT ( *get_CIMType)(ISWbemProperty *This, WbemCimtypeEnum *iCimType);HRESULT ( *get_Qualifiers_)(ISWbemProperty *This, ISWbemQualifierSet **objWbemQualifierSet);HRESULT ( *get_IsArray)(ISWbemProperty *This, VARIANT_BOOL *bIsArray);};
struct IWebBrowserAppVtbl {HRESULT ( *QueryInterface)(IWebBrowserApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowserApp *This);ULONG ( *Release)(IWebBrowserApp *This);HRESULT ( *GetTypeInfoCount)(IWebBrowserApp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowserApp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowserApp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowserApp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowserApp *This);HRESULT ( *GoForward)(IWebBrowserApp *This);HRESULT ( *GoHome)(IWebBrowserApp *This);HRESULT ( *GoSearch)(IWebBrowserApp *This);HRESULT ( *Navigate)(IWebBrowserApp *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowserApp *This);HRESULT ( *Refresh2)(IWebBrowserApp *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowserApp *This);HRESULT ( *get_Application)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowserApp *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Left)(IWebBrowserApp *This, int Left);HRESULT ( *get_Top)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Top)(IWebBrowserApp *This, int Top);HRESULT ( *get_Width)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Width)(IWebBrowserApp *This, int Width);HRESULT ( *get_Height)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Height)(IWebBrowserApp *This, int Height);HRESULT ( *get_LocationName)(IWebBrowserApp *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowserApp *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *Quit)(IWebBrowserApp *This);HRESULT ( *ClientToWindow)(IWebBrowserApp *This, int *pcx, int *pcy);HRESULT ( *PutProperty)(IWebBrowserApp *This, BSTR Property, VARIANT vtValue);HRESULT ( *GetProperty)(IWebBrowserApp *This, BSTR Property, VARIANT *pvtValue);HRESULT ( *get_Name)(IWebBrowserApp *This, BSTR *Name);HRESULT ( *get_HWND)(IWebBrowserApp *This, SHANDLE_PTR *pHWND);HRESULT ( *get_FullName)(IWebBrowserApp *This, BSTR *FullName);HRESULT ( *get_Path)(IWebBrowserApp *This, BSTR *Path);HRESULT ( *get_Visible)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *put_Visible)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_StatusBar)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *put_StatusBar)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_StatusText)(IWebBrowserApp *This, BSTR *StatusText);HRESULT ( *put_StatusText)(IWebBrowserApp *This, BSTR StatusText);HRESULT ( *get_ToolBar)(IWebBrowserApp *This, int *Value);HRESULT ( *put_ToolBar)(IWebBrowserApp *This, int Value);HRESULT ( *get_MenuBar)(IWebBrowserApp *This, VARIANT_BOOL *Value);HRESULT ( *put_MenuBar)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_FullScreen)(IWebBrowserApp *This, VARIANT_BOOL *pbFullScreen);HRESULT ( *put_FullScreen)(IWebBrowserApp *This, VARIANT_BOOL bFullScreen);};
struct IOleObjectVtbl {HRESULT ( *QueryInterface)(IOleObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleObject *This);ULONG ( *Release)(IOleObject *This);HRESULT ( *SetClientSite)(IOleObject *This, IOleClientSite *pClientSite);HRESULT ( *GetClientSite)(IOleObject *This, IOleClientSite **ppClientSite);HRESULT ( *SetHostNames)(IOleObject *This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);HRESULT ( *Close)(IOleObject *This, DWORD dwSaveOption);HRESULT ( *SetMoniker)(IOleObject *This, DWORD dwWhichMoniker, IMoniker *pmk);HRESULT ( *GetMoniker)(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT ( *InitFromData)(IOleObject *This, IDataObject *pDataObject, BOOL fCreation, DWORD dwReserved);HRESULT ( *GetClipboardData)(IOleObject *This, DWORD dwReserved, IDataObject **ppDataObject);HRESULT ( *DoVerb)(IOleObject *This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);HRESULT ( *EnumVerbs)(IOleObject *This, IEnumOLEVERB **ppEnumOleVerb);HRESULT ( *Update)(IOleObject *This);HRESULT ( *IsUpToDate)(IOleObject *This);HRESULT ( *GetUserClassID)(IOleObject *This, CLSID *pClsid);HRESULT ( *GetUserType)(IOleObject *This, DWORD dwFormOfType, LPOLESTR *pszUserType);HRESULT ( *SetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT ( *GetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT ( *Advise)(IOleObject *This, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT ( *Unadvise)(IOleObject *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IOleObject *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *GetMiscStatus)(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus);HRESULT ( *SetColorScheme)(IOleObject *This, LOGPALETTE *pLogpal);};
struct ITypeLibVtbl {HRESULT ( *QueryInterface)(ITypeLib *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeLib *This);ULONG ( *Release)(ITypeLib *This);UINT ( *GetTypeInfoCount)(ITypeLib *This);HRESULT ( *GetTypeInfo)(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);HRESULT ( *GetTypeInfoType)(ITypeLib *This, UINT index, TYPEKIND *pTKind);HRESULT ( *GetTypeInfoOfGuid)(ITypeLib *This,  GUID * guid, ITypeInfo **ppTinfo);HRESULT ( *GetLibAttr)(ITypeLib *This, TLIBATTR **ppTLibAttr);HRESULT ( *GetTypeComp)(ITypeLib *This, ITypeComp **ppTComp);HRESULT ( *GetDocumentation)(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *IsName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT ( *FindName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void ( *ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *pTLibAttr);};
struct Folder2Vtbl {HRESULT ( *QueryInterface)(Folder2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Folder2 *This);ULONG ( *Release)(Folder2 *This);HRESULT ( *GetTypeInfoCount)(Folder2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Folder2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Folder2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Folder2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(Folder2 *This, BSTR *pbs);HRESULT ( *get_Application)(Folder2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(Folder2 *This, IDispatch **ppid);HRESULT ( *get_ParentFolder)(Folder2 *This, Folder **ppsf);HRESULT ( *Items)(Folder2 *This, FolderItems **ppid);HRESULT ( *ParseName)(Folder2 *This, BSTR bName, FolderItem **ppid);HRESULT ( *NewFolder)(Folder2 *This, BSTR bName, VARIANT vOptions);HRESULT ( *MoveHere)(Folder2 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *CopyHere)(Folder2 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *GetDetailsOf)(Folder2 *This, VARIANT vItem, int iColumn, BSTR *pbs);HRESULT ( *get_Self)(Folder2 *This, FolderItem **ppfi);HRESULT ( *get_OfflineStatus)(Folder2 *This, LONG *pul);HRESULT ( *Synchronize)(Folder2 *This);HRESULT ( *get_HaveToShowWebViewBarricade)(Folder2 *This, VARIANT_BOOL *pbHaveToShowWebViewBarricade);HRESULT ( *DismissedWebViewBarricade)(Folder2 *This);};
struct Folder3Vtbl {HRESULT ( *QueryInterface)(Folder3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Folder3 *This);ULONG ( *Release)(Folder3 *This);HRESULT ( *GetTypeInfoCount)(Folder3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Folder3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Folder3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Folder3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(Folder3 *This, BSTR *pbs);HRESULT ( *get_Application)(Folder3 *This, IDispatch **ppid);HRESULT ( *get_Parent)(Folder3 *This, IDispatch **ppid);HRESULT ( *get_ParentFolder)(Folder3 *This, Folder **ppsf);HRESULT ( *Items)(Folder3 *This, FolderItems **ppid);HRESULT ( *ParseName)(Folder3 *This, BSTR bName, FolderItem **ppid);HRESULT ( *NewFolder)(Folder3 *This, BSTR bName, VARIANT vOptions);HRESULT ( *MoveHere)(Folder3 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *CopyHere)(Folder3 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *GetDetailsOf)(Folder3 *This, VARIANT vItem, int iColumn, BSTR *pbs);HRESULT ( *get_Self)(Folder3 *This, FolderItem **ppfi);HRESULT ( *get_OfflineStatus)(Folder3 *This, LONG *pul);HRESULT ( *Synchronize)(Folder3 *This);HRESULT ( *get_HaveToShowWebViewBarricade)(Folder3 *This, VARIANT_BOOL *pbHaveToShowWebViewBarricade);HRESULT ( *DismissedWebViewBarricade)(Folder3 *This);HRESULT ( *get_ShowWebViewBarricade)(Folder3 *This, VARIANT_BOOL *pbShowWebViewBarricade);HRESULT ( *put_ShowWebViewBarricade)(Folder3 *This, VARIANT_BOOL bShowWebViewBarricade);};
struct IXMLDOMProcessingInstructionVtbl {HRESULT ( *QueryInterface)(IXMLDOMProcessingInstruction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMProcessingInstruction *This);ULONG ( *Release)(IXMLDOMProcessingInstruction *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMProcessingInstruction *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMProcessingInstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMProcessingInstruction *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMProcessingInstruction *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMProcessingInstruction *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMProcessingInstruction *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMProcessingInstruction *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMProcessingInstruction *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMProcessingInstruction *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMProcessingInstruction *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMProcessingInstruction *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMProcessingInstruction *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMProcessingInstruction *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMProcessingInstruction *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMProcessingInstruction *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMProcessingInstruction *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMProcessingInstruction *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMProcessingInstruction *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMProcessingInstruction *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMProcessingInstruction *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMProcessingInstruction *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMProcessingInstruction *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_target)(IXMLDOMProcessingInstruction *This, BSTR *name);HRESULT ( *get_data)(IXMLDOMProcessingInstruction *This, BSTR *value);HRESULT ( *put_data)(IXMLDOMProcessingInstruction *This, BSTR value);};
struct IXMLDOMDocumentFragmentVtbl {HRESULT ( *QueryInterface)(IXMLDOMDocumentFragment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMDocumentFragment *This);ULONG ( *Release)(IXMLDOMDocumentFragment *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentFragment *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMDocumentFragment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentFragment *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMDocumentFragment *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMDocumentFragment *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMDocumentFragment *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMDocumentFragment *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMDocumentFragment *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMDocumentFragment *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMDocumentFragment *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMDocumentFragment *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMDocumentFragment *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMDocumentFragment *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMDocumentFragment *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMDocumentFragment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentFragment *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMDocumentFragment *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMDocumentFragment *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMDocumentFragment *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentFragment *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentFragment *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMDocumentFragment *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMDocumentFragment *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMDocumentFragment *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMDocumentFragment *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMDocumentFragment *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMDocumentFragment *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMEntityReferenceVtbl {HRESULT ( *QueryInterface)(IXMLDOMEntityReference *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMEntityReference *This);ULONG ( *Release)(IXMLDOMEntityReference *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMEntityReference *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMEntityReference *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMEntityReference *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMEntityReference *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMEntityReference *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMEntityReference *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMEntityReference *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMEntityReference *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMEntityReference *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMEntityReference *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMEntityReference *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMEntityReference *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMEntityReference *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMEntityReference *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMEntityReference *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMEntityReference *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMEntityReference *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMEntityReference *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMEntityReference *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMEntityReference *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMEntityReference *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMEntityReference *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMEntityReference *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMEntityReference *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMEntityReference *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMEntityReference *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMEntityReference *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMEntityReference *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMEntityReference *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMEntityReference *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMEntityReference *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMEntityReference *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMEntityReference *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMCharacterDataVtbl {HRESULT ( *QueryInterface)(IXMLDOMCharacterData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMCharacterData *This);ULONG ( *Release)(IXMLDOMCharacterData *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMCharacterData *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMCharacterData *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMCharacterData *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMCharacterData *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMCharacterData *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMCharacterData *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMCharacterData *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMCharacterData *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMCharacterData *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMCharacterData *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMCharacterData *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMCharacterData *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMCharacterData *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMCharacterData *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMCharacterData *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMCharacterData *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMCharacterData *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMCharacterData *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMCharacterData *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMCharacterData *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMCharacterData *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMCharacterData *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMCharacterData *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMCharacterData *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMCharacterData *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMCharacterData *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMCharacterData *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMCharacterData *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMCharacterData *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMCharacterData *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMCharacterData *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMCharacterData *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMCharacterData *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMCharacterData *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMCharacterData *This, BSTR data);HRESULT ( *get_length)(IXMLDOMCharacterData *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMCharacterData *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMCharacterData *This, BSTR data);HRESULT ( *insertData)(IXMLDOMCharacterData *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMCharacterData *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMCharacterData *This, int offset, int count, BSTR data);};
struct IXMLDOMCDATASectionVtbl {HRESULT ( *QueryInterface)(IXMLDOMCDATASection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMCDATASection *This);ULONG ( *Release)(IXMLDOMCDATASection *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMCDATASection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMCDATASection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMCDATASection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMCDATASection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMCDATASection *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMCDATASection *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMCDATASection *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMCDATASection *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMCDATASection *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMCDATASection *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMCDATASection *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMCDATASection *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMCDATASection *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMCDATASection *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMCDATASection *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMCDATASection *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMCDATASection *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMCDATASection *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMCDATASection *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMCDATASection *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMCDATASection *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMCDATASection *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMCDATASection *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMCDATASection *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMCDATASection *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMCDATASection *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMCDATASection *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMCDATASection *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMCDATASection *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMCDATASection *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMCDATASection *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMCDATASection *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMCDATASection *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMCDATASection *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMCDATASection *This, BSTR data);HRESULT ( *get_length)(IXMLDOMCDATASection *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMCDATASection *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMCDATASection *This, BSTR data);HRESULT ( *insertData)(IXMLDOMCDATASection *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMCDATASection *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMCDATASection *This, int offset, int count, BSTR data);HRESULT ( *splitText)(IXMLDOMCDATASection *This, int offset, IXMLDOMText **rightHandTextNode);};
struct IXMLDOMDocumentTypeVtbl {HRESULT ( *QueryInterface)(IXMLDOMDocumentType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMDocumentType *This);ULONG ( *Release)(IXMLDOMDocumentType *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentType *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMDocumentType *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentType *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMDocumentType *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMDocumentType *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMDocumentType *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMDocumentType *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMDocumentType *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMDocumentType *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMDocumentType *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMDocumentType *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMDocumentType *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMDocumentType *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMDocumentType *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMDocumentType *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMDocumentType *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMDocumentType *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMDocumentType *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentType *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMDocumentType *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMDocumentType *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMDocumentType *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMDocumentType *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentType *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentType *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMDocumentType *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMDocumentType *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMDocumentType *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMDocumentType *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMDocumentType *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMDocumentType *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMDocumentType *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_name)(IXMLDOMDocumentType *This, BSTR *rootName);HRESULT ( *get_entities)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **entityMap);HRESULT ( *get_notations)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **notationMap);};
struct IXMLDOMAttributeVtbl {HRESULT ( *QueryInterface)(IXMLDOMAttribute *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMAttribute *This);ULONG ( *Release)(IXMLDOMAttribute *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMAttribute *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMAttribute *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMAttribute *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMAttribute *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMAttribute *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMAttribute *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMAttribute *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMAttribute *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMAttribute *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMAttribute *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMAttribute *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMAttribute *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMAttribute *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMAttribute *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMAttribute *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMAttribute *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMAttribute *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMAttribute *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMAttribute *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMAttribute *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMAttribute *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMAttribute *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMAttribute *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMAttribute *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMAttribute *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMAttribute *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMAttribute *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMAttribute *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMAttribute *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMAttribute *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMAttribute *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMAttribute *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_name)(IXMLDOMAttribute *This, BSTR *attributeName);HRESULT ( *get_value)(IXMLDOMAttribute *This, VARIANT *attributeValue);HRESULT ( *put_value)(IXMLDOMAttribute *This, VARIANT attributeValue);};
struct ICreateTypeInfoVtbl {HRESULT ( *QueryInterface)(ICreateTypeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeInfo *This);ULONG ( *Release)(ICreateTypeInfo *This);HRESULT ( *SetGuid)(ICreateTypeInfo *This,  GUID * guid);HRESULT ( *SetTypeFlags)(ICreateTypeInfo *This, UINT uTypeFlags);HRESULT ( *SetDocString)(ICreateTypeInfo *This, LPOLESTR pStrDoc);HRESULT ( *SetHelpContext)(ICreateTypeInfo *This, DWORD dwHelpContext);HRESULT ( *SetVersion)(ICreateTypeInfo *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT ( *AddFuncDesc)(ICreateTypeInfo *This, UINT index, FUNCDESC *pFuncDesc);HRESULT ( *AddImplType)(ICreateTypeInfo *This, UINT index, HREFTYPE hRefType);HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo *This, UINT index, INT implTypeFlags);HRESULT ( *SetAlignment)(ICreateTypeInfo *This, WORD cbAlignment);HRESULT ( *SetSchema)(ICreateTypeInfo *This, LPOLESTR pStrSchema);HRESULT ( *AddVarDesc)(ICreateTypeInfo *This, UINT index, VARDESC *pVarDesc);HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT ( *SetVarName)(ICreateTypeInfo *This, UINT index, LPOLESTR szName);HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo *This, TYPEDESC *pTDescAlias);HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT ( *SetFuncDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetVarDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetVarHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetMops)(ICreateTypeInfo *This, UINT index, BSTR bstrMops);HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo *This, IDLDESC *pIdlDesc);HRESULT ( *LayOut)(ICreateTypeInfo *This);};
struct IShellNameSpaceVtbl {HRESULT ( *QueryInterface)(IShellNameSpace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellNameSpace *This);ULONG ( *Release)(IShellNameSpace *This);HRESULT ( *GetTypeInfoCount)(IShellNameSpace *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellNameSpace *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellNameSpace *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellNameSpace *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *MoveSelectionUp)(IShellNameSpace *This);HRESULT ( *MoveSelectionDown)(IShellNameSpace *This);HRESULT ( *ResetSort)(IShellNameSpace *This);HRESULT ( *NewFolder)(IShellNameSpace *This);HRESULT ( *Synchronize)(IShellNameSpace *This);HRESULT ( *Import)(IShellNameSpace *This);HRESULT ( *Export)(IShellNameSpace *This);HRESULT ( *InvokeContextMenuCommand)(IShellNameSpace *This, BSTR strCommand);HRESULT ( *MoveSelectionTo)(IShellNameSpace *This);HRESULT ( *get_SubscriptionsEnabled)(IShellNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *CreateSubscriptionForSelection)(IShellNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *DeleteSubscriptionForSelection)(IShellNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *SetRoot)(IShellNameSpace *This, BSTR bstrFullPath);HRESULT ( *get_EnumOptions)(IShellNameSpace *This, LONG *pgrfEnumFlags);HRESULT ( *put_EnumOptions)(IShellNameSpace *This, LONG lVal);HRESULT ( *get_SelectedItem)(IShellNameSpace *This, IDispatch **pItem);HRESULT ( *put_SelectedItem)(IShellNameSpace *This, IDispatch *pItem);HRESULT ( *get_Root)(IShellNameSpace *This, VARIANT *pvar);HRESULT ( *put_Root)(IShellNameSpace *This, VARIANT var);HRESULT ( *get_Depth)(IShellNameSpace *This, int *piDepth);HRESULT ( *put_Depth)(IShellNameSpace *This, int iDepth);HRESULT ( *get_Mode)(IShellNameSpace *This, UINT *puMode);HRESULT ( *put_Mode)(IShellNameSpace *This, UINT uMode);HRESULT ( *get_Flags)(IShellNameSpace *This, DWORD *pdwFlags);HRESULT ( *put_Flags)(IShellNameSpace *This, DWORD dwFlags);HRESULT ( *put_TVFlags)(IShellNameSpace *This, DWORD dwFlags);HRESULT ( *get_TVFlags)(IShellNameSpace *This, DWORD *dwFlags);HRESULT ( *get_Columns)(IShellNameSpace *This, BSTR *bstrColumns);HRESULT ( *put_Columns)(IShellNameSpace *This, BSTR bstrColumns);HRESULT ( *get_CountViewTypes)(IShellNameSpace *This, int *piTypes);HRESULT ( *SetViewType)(IShellNameSpace *This, int iType);HRESULT ( *SelectedItems)(IShellNameSpace *This, IDispatch **ppid);HRESULT ( *Expand)(IShellNameSpace *This, VARIANT var, int iDepth);HRESULT ( *UnselectAll)(IShellNameSpace *This);};
struct IXMLDOMDocumentVtbl {HRESULT ( *QueryInterface)(IXMLDOMDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMDocument *This);ULONG ( *Release)(IXMLDOMDocument *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMDocument *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMDocument *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMDocument *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMDocument *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMDocument *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMDocument *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMDocument *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMDocument *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMDocument *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMDocument *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMDocument *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMDocument *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMDocument *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMDocument *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMDocument *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMDocument *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMDocument *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMDocument *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMDocument *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMDocument *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMDocument *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMDocument *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMDocument *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMDocument *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMDocument *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMDocument *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMDocument *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMDocument *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMDocument *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMDocument *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_doctype)(IXMLDOMDocument *This, IXMLDOMDocumentType **documentType);HRESULT ( *get_implementation)(IXMLDOMDocument *This, IXMLDOMImplementation **impl);HRESULT ( *get_documentElement)(IXMLDOMDocument *This, IXMLDOMElement **DOMElement);HRESULT ( *putref_documentElement)(IXMLDOMDocument *This, IXMLDOMElement *DOMElement);HRESULT ( *createElement)(IXMLDOMDocument *This, BSTR tagName, IXMLDOMElement **element);HRESULT ( *createDocumentFragment)(IXMLDOMDocument *This, IXMLDOMDocumentFragment **docFrag);HRESULT ( *createTextNode)(IXMLDOMDocument *This, BSTR data, IXMLDOMText **text);HRESULT ( *createComment)(IXMLDOMDocument *This, BSTR data, IXMLDOMComment **comment);HRESULT ( *createCDATASection)(IXMLDOMDocument *This, BSTR data, IXMLDOMCDATASection **cdata);HRESULT ( *createProcessingInstruction)(IXMLDOMDocument *This, BSTR target, BSTR data, IXMLDOMProcessingInstruction **pi);HRESULT ( *createAttribute)(IXMLDOMDocument *This, BSTR name, IXMLDOMAttribute **attribute);HRESULT ( *createEntityReference)(IXMLDOMDocument *This, BSTR name, IXMLDOMEntityReference **entityRef);HRESULT ( *getElementsByTagName)(IXMLDOMDocument *This, BSTR tagName, IXMLDOMNodeList **resultList);HRESULT ( *createNode)(IXMLDOMDocument *This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode **node);HRESULT ( *nodeFromID)(IXMLDOMDocument *This, BSTR idString, IXMLDOMNode **node);HRESULT ( *load)(IXMLDOMDocument *This, VARIANT xmlSource, VARIANT_BOOL *isSuccessful);HRESULT ( *get_readyState)(IXMLDOMDocument *This, int *value);HRESULT ( *get_parseError)(IXMLDOMDocument *This, IXMLDOMParseError **errorObj);HRESULT ( *get_url)(IXMLDOMDocument *This, BSTR *urlString);HRESULT ( *get_async)(IXMLDOMDocument *This, VARIANT_BOOL *isAsync);HRESULT ( *put_async)(IXMLDOMDocument *This, VARIANT_BOOL isAsync);HRESULT ( *abort)(IXMLDOMDocument *This);HRESULT ( *loadXML)(IXMLDOMDocument *This, BSTR bstrXML, VARIANT_BOOL *isSuccessful);HRESULT ( *save)(IXMLDOMDocument *This, VARIANT destination);HRESULT ( *get_validateOnParse)(IXMLDOMDocument *This, VARIANT_BOOL *isValidating);HRESULT ( *put_validateOnParse)(IXMLDOMDocument *This, VARIANT_BOOL isValidating);HRESULT ( *get_resolveExternals)(IXMLDOMDocument *This, VARIANT_BOOL *isResolving);HRESULT ( *put_resolveExternals)(IXMLDOMDocument *This, VARIANT_BOOL isResolving);HRESULT ( *get_preserveWhiteSpace)(IXMLDOMDocument *This, VARIANT_BOOL *isPreserving);HRESULT ( *put_preserveWhiteSpace)(IXMLDOMDocument *This, VARIANT_BOOL isPreserving);HRESULT ( *put_onreadystatechange)(IXMLDOMDocument *This, VARIANT readystatechangeSink);HRESULT ( *put_ondataavailable)(IXMLDOMDocument *This, VARIANT ondataavailableSink);HRESULT ( *put_ontransformnode)(IXMLDOMDocument *This, VARIANT ontransformnodeSink);};
struct IXMLDOMNotationVtbl {HRESULT ( *QueryInterface)(IXMLDOMNotation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNotation *This);ULONG ( *Release)(IXMLDOMNotation *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNotation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNotation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNotation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNotation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMNotation *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMNotation *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMNotation *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMNotation *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMNotation *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMNotation *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMNotation *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMNotation *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMNotation *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMNotation *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMNotation *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMNotation *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMNotation *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMNotation *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMNotation *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMNotation *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMNotation *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMNotation *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMNotation *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMNotation *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMNotation *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMNotation *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMNotation *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMNotation *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMNotation *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMNotation *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMNotation *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMNotation *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMNotation *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMNotation *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_publicId)(IXMLDOMNotation *This, VARIANT *publicID);HRESULT ( *get_systemId)(IXMLDOMNotation *This, VARIANT *systemID);};
struct IXMLDOMCommentVtbl {HRESULT ( *QueryInterface)(IXMLDOMComment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMComment *This);ULONG ( *Release)(IXMLDOMComment *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMComment *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMComment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMComment *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMComment *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMComment *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMComment *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMComment *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMComment *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMComment *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMComment *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMComment *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMComment *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMComment *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMComment *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMComment *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMComment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMComment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMComment *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMComment *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMComment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMComment *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMComment *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMComment *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMComment *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMComment *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMComment *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMComment *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMComment *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMComment *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMComment *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMComment *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMComment *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMComment *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMComment *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMComment *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMComment *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMComment *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMComment *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMComment *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMComment *This, BSTR data);HRESULT ( *get_length)(IXMLDOMComment *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMComment *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMComment *This, BSTR data);HRESULT ( *insertData)(IXMLDOMComment *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMComment *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMComment *This, int offset, int count, BSTR data);};
struct IXMLDOMElementVtbl {HRESULT ( *QueryInterface)(IXMLDOMElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMElement *This);ULONG ( *Release)(IXMLDOMElement *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMElement *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMElement *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMElement *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMElement *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMElement *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMElement *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMElement *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMElement *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMElement *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMElement *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMElement *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMElement *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMElement *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMElement *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMElement *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMElement *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMElement *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMElement *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMElement *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMElement *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMElement *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMElement *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMElement *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMElement *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMElement *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMElement *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMElement *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMElement *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMElement *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMElement *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMElement *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMElement *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMElement *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMElement *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_tagName)(IXMLDOMElement *This, BSTR *tagName);HRESULT ( *getAttribute)(IXMLDOMElement *This, BSTR name, VARIANT *value);HRESULT ( *setAttribute)(IXMLDOMElement *This, BSTR name, VARIANT value);HRESULT ( *removeAttribute)(IXMLDOMElement *This, BSTR name);HRESULT ( *getAttributeNode)(IXMLDOMElement *This, BSTR name, IXMLDOMAttribute **attributeNode);HRESULT ( *setAttributeNode)(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);HRESULT ( *removeAttributeNode)(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);HRESULT ( *getElementsByTagName)(IXMLDOMElement *This, BSTR tagName, IXMLDOMNodeList **resultList);HRESULT ( *normalize)(IXMLDOMElement *This);};
struct IXMLDOMEntityVtbl {HRESULT ( *QueryInterface)(IXMLDOMEntity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMEntity *This);ULONG ( *Release)(IXMLDOMEntity *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMEntity *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMEntity *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMEntity *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMEntity *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMEntity *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMEntity *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMEntity *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMEntity *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMEntity *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMEntity *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMEntity *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMEntity *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMEntity *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMEntity *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMEntity *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMEntity *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMEntity *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMEntity *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMEntity *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMEntity *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMEntity *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMEntity *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMEntity *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMEntity *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMEntity *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMEntity *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMEntity *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMEntity *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMEntity *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMEntity *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMEntity *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMEntity *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMEntity *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMEntity *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_publicId)(IXMLDOMEntity *This, VARIANT *publicID);HRESULT ( *get_systemId)(IXMLDOMEntity *This, VARIANT *systemID);HRESULT ( *get_notationName)(IXMLDOMEntity *This, BSTR *name);};
struct IShellFolderVtbl {HRESULT ( *QueryInterface)(IShellFolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolder *This);ULONG ( *Release)(IShellFolder *This);HRESULT ( *ParseDisplayName)(IShellFolder *This, HWND hwnd, LPBC pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, LPITEMIDLIST *ppidl, ULONG *pdwAttributes);HRESULT ( *EnumObjects)(IShellFolder *This, HWND hwnd, SHCONTF grfFlags, IEnumIDList **ppenumIDList);HRESULT ( *BindToObject)(IShellFolder *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *BindToStorage)(IShellFolder *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *CompareIDs)(IShellFolder *This, LPARAM lParam, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);HRESULT ( *CreateViewObject)(IShellFolder *This, HWND hwndOwner,  IID * riid, void **ppv);HRESULT ( *GetAttributesOf)(IShellFolder *This, UINT cidl, LPCITEMIDLIST *apidl, SFGAOF *rgfInOut);HRESULT ( *GetUIObjectOf)(IShellFolder *This, HWND hwndOwner, UINT cidl, LPCITEMIDLIST *apidl,  IID * riid, UINT *rgfReserved, void **ppv);HRESULT ( *GetDisplayNameOf)(IShellFolder *This, LPCITEMIDLIST pidl, SHGDNF uFlags, STRRET *pName);HRESULT ( *SetNameOf)(IShellFolder *This, HWND hwnd, LPCITEMIDLIST pidl, LPCOLESTR pszName, SHGDNF uFlags, LPITEMIDLIST *ppidlOut);};
struct FolderItem2Vtbl {HRESULT ( *QueryInterface)(FolderItem2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItem2 *This);ULONG ( *Release)(FolderItem2 *This);HRESULT ( *GetTypeInfoCount)(FolderItem2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItem2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItem2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItem2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItem2 *This, BSTR *pbs);HRESULT ( *put_Name)(FolderItem2 *This, BSTR bs);HRESULT ( *get_Path)(FolderItem2 *This, BSTR *pbs);HRESULT ( *get_GetLink)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_GetFolder)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_IsLink)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFolder)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFileSystem)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_IsBrowsable)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_ModifyDate)(FolderItem2 *This, DATE *pdt);HRESULT ( *put_ModifyDate)(FolderItem2 *This, DATE dt);HRESULT ( *get_Size)(FolderItem2 *This, LONG *pul);HRESULT ( *get_Type)(FolderItem2 *This, BSTR *pbs);HRESULT ( *Verbs)(FolderItem2 *This, FolderItemVerbs **ppfic);HRESULT ( *InvokeVerb)(FolderItem2 *This, VARIANT vVerb);HRESULT ( *InvokeVerbEx)(FolderItem2 *This, VARIANT vVerb, VARIANT vArgs);HRESULT ( *ExtendedProperty)(FolderItem2 *This, BSTR bstrPropName, VARIANT *pvRet);};
struct IXMLDOMNodeVtbl {HRESULT ( *QueryInterface)(IXMLDOMNode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNode *This);ULONG ( *Release)(IXMLDOMNode *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNode *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNode *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNode *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMNode *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMNode *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMNode *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMNode *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMNode *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMNode *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMNode *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMNode *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMNode *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMNode *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMNode *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMNode *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMNode *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMNode *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMNode *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMNode *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMNode *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMNode *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMNode *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMNode *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMNode *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMNode *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMNode *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMNode *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMNode *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMNode *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMNode *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMNode *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMNode *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMNode *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMNode *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMNode *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMNode *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMNode *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMTextVtbl {HRESULT ( *QueryInterface)(IXMLDOMText *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMText *This);ULONG ( *Release)(IXMLDOMText *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMText *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMText *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMText *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMText *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMText *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMText *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMText *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMText *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMText *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMText *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMText *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMText *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMText *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMText *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMText *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMText *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMText *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMText *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMText *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMText *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMText *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMText *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMText *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMText *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMText *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMText *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMText *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMText *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMText *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMText *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMText *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMText *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMText *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMText *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMText *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMText *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMText *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMText *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMText *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMText *This, BSTR data);HRESULT ( *get_length)(IXMLDOMText *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMText *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMText *This, BSTR data);HRESULT ( *insertData)(IXMLDOMText *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMText *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMText *This, int offset, int count, BSTR data);HRESULT ( *splitText)(IXMLDOMText *This, int offset, IXMLDOMText **rightHandTextNode);};
struct IXTLRuntimeVtbl {HRESULT ( *QueryInterface)(IXTLRuntime *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXTLRuntime *This);ULONG ( *Release)(IXTLRuntime *This);HRESULT ( *GetTypeInfoCount)(IXTLRuntime *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXTLRuntime *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXTLRuntime *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXTLRuntime *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXTLRuntime *This, BSTR *name);HRESULT ( *get_nodeValue)(IXTLRuntime *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXTLRuntime *This, VARIANT value);HRESULT ( *get_nodeType)(IXTLRuntime *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXTLRuntime *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXTLRuntime *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXTLRuntime *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXTLRuntime *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXTLRuntime *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXTLRuntime *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXTLRuntime *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXTLRuntime *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXTLRuntime *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXTLRuntime *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXTLRuntime *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXTLRuntime *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXTLRuntime *This, BSTR *nodeType);HRESULT ( *get_text)(IXTLRuntime *This, BSTR *text);HRESULT ( *put_text)(IXTLRuntime *This, BSTR text);HRESULT ( *get_specified)(IXTLRuntime *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXTLRuntime *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXTLRuntime *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXTLRuntime *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXTLRuntime *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXTLRuntime *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXTLRuntime *This, BSTR *xmlString);HRESULT ( *transformNode)(IXTLRuntime *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXTLRuntime *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXTLRuntime *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXTLRuntime *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXTLRuntime *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXTLRuntime *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXTLRuntime *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXTLRuntime *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *uniqueID)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pID);HRESULT ( *depth)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pDepth);HRESULT ( *childNumber)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pNumber);HRESULT ( *ancestorChildNumber)(IXTLRuntime *This, BSTR bstrNodeName, IXMLDOMNode *pNode, int *pNumber);HRESULT ( *absoluteChildNumber)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pNumber);HRESULT ( *formatIndex)(IXTLRuntime *This, int lIndex, BSTR bstrFormat, BSTR *pbstrFormattedString);HRESULT ( *formatNumber)(IXTLRuntime *This, double dblNumber, BSTR bstrFormat, BSTR *pbstrFormattedString);HRESULT ( *formatDate)(IXTLRuntime *This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);HRESULT ( *formatTime)(IXTLRuntime *This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);};
struct FolderItemVtbl {HRESULT ( *QueryInterface)(FolderItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItem *This);ULONG ( *Release)(FolderItem *This);HRESULT ( *GetTypeInfoCount)(FolderItem *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItem *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItem *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItem *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItem *This, BSTR *pbs);HRESULT ( *put_Name)(FolderItem *This, BSTR bs);HRESULT ( *get_Path)(FolderItem *This, BSTR *pbs);HRESULT ( *get_GetLink)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_GetFolder)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_IsLink)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFolder)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFileSystem)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsBrowsable)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_ModifyDate)(FolderItem *This, DATE *pdt);HRESULT ( *put_ModifyDate)(FolderItem *This, DATE dt);HRESULT ( *get_Size)(FolderItem *This, LONG *pul);HRESULT ( *get_Type)(FolderItem *This, BSTR *pbs);HRESULT ( *Verbs)(FolderItem *This, FolderItemVerbs **ppfic);HRESULT ( *InvokeVerb)(FolderItem *This, VARIANT vVerb);};
struct ITypeLib2Vtbl {HRESULT ( *QueryInterface)(ITypeLib2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeLib2 *This);ULONG ( *Release)(ITypeLib2 *This);UINT ( *GetTypeInfoCount)(ITypeLib2 *This);HRESULT ( *GetTypeInfo)(ITypeLib2 *This, UINT index, ITypeInfo **ppTInfo);HRESULT ( *GetTypeInfoType)(ITypeLib2 *This, UINT index, TYPEKIND *pTKind);HRESULT ( *GetTypeInfoOfGuid)(ITypeLib2 *This,  GUID * guid, ITypeInfo **ppTinfo);HRESULT ( *GetLibAttr)(ITypeLib2 *This, TLIBATTR **ppTLibAttr);HRESULT ( *GetTypeComp)(ITypeLib2 *This, ITypeComp **ppTComp);HRESULT ( *GetDocumentation)(ITypeLib2 *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *IsName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT ( *FindName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void ( *ReleaseTLibAttr)(ITypeLib2 *This, TLIBATTR *pTLibAttr);HRESULT ( *GetCustData)(ITypeLib2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetLibStatistics)(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);HRESULT ( *GetDocumentation2)(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT ( *GetAllCustData)(ITypeLib2 *This, CUSTDATA *pCustData);};
struct ICreateTypeInfo2Vtbl {HRESULT ( *QueryInterface)(ICreateTypeInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeInfo2 *This);ULONG ( *Release)(ICreateTypeInfo2 *This);HRESULT ( *SetGuid)(ICreateTypeInfo2 *This,  GUID * guid);HRESULT ( *SetTypeFlags)(ICreateTypeInfo2 *This, UINT uTypeFlags);HRESULT ( *SetDocString)(ICreateTypeInfo2 *This, LPOLESTR pStrDoc);HRESULT ( *SetHelpContext)(ICreateTypeInfo2 *This, DWORD dwHelpContext);HRESULT ( *SetVersion)(ICreateTypeInfo2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo2 *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT ( *AddFuncDesc)(ICreateTypeInfo2 *This, UINT index, FUNCDESC *pFuncDesc);HRESULT ( *AddImplType)(ICreateTypeInfo2 *This, UINT index, HREFTYPE hRefType);HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo2 *This, UINT index, INT implTypeFlags);HRESULT ( *SetAlignment)(ICreateTypeInfo2 *This, WORD cbAlignment);HRESULT ( *SetSchema)(ICreateTypeInfo2 *This, LPOLESTR pStrSchema);HRESULT ( *AddVarDesc)(ICreateTypeInfo2 *This, UINT index, VARDESC *pVarDesc);HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo2 *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT ( *SetVarName)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szName);HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo2 *This, TYPEDESC *pTDescAlias);HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT ( *SetFuncDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetVarDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetVarHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetMops)(ICreateTypeInfo2 *This, UINT index, BSTR bstrMops);HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo2 *This, IDLDESC *pIdlDesc);HRESULT ( *LayOut)(ICreateTypeInfo2 *This);HRESULT ( *DeleteFuncDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *DeleteFuncDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind);HRESULT ( *DeleteVarDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *DeleteVarDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid);HRESULT ( *DeleteImplType)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *SetCustData)(ICreateTypeInfo2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetFuncCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetParamCustData)(ICreateTypeInfo2 *This, UINT indexFunc, UINT indexParam,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetVarCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetImplTypeCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetHelpStringContext)(ICreateTypeInfo2 *This, ULONG dwHelpStringContext);HRESULT ( *SetFuncHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT ( *SetVarHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT ( *Invalidate)(ICreateTypeInfo2 *This);HRESULT ( *SetName)(ICreateTypeInfo2 *This, LPOLESTR szName);};
struct IShellBrowserVtbl {HRESULT ( *QueryInterface)(IShellBrowser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellBrowser *This);ULONG ( *Release)(IShellBrowser *This);HRESULT ( *GetWindow)(IShellBrowser *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IShellBrowser *This, BOOL fEnterMode);HRESULT ( *InsertMenusSB)(IShellBrowser *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT ( *SetMenuSB)(IShellBrowser *This, HMENU hmenuShared, HOLEMENU holemenuRes, HWND hwndActiveObject);HRESULT ( *RemoveMenusSB)(IShellBrowser *This, HMENU hmenuShared);HRESULT ( *SetStatusTextSB)(IShellBrowser *This, LPCOLESTR pszStatusText);HRESULT ( *EnableModelessSB)(IShellBrowser *This, BOOL fEnable);HRESULT ( *TranslateAcceleratorSB)(IShellBrowser *This, MSG *pmsg, WORD wID);HRESULT ( *BrowseObject)(IShellBrowser *This, LPCITEMIDLIST pidl, UINT wFlags);HRESULT ( *GetViewStateStream)(IShellBrowser *This, DWORD grfMode, IStream **ppStrm);HRESULT ( *GetControlWindow)(IShellBrowser *This, UINT id, HWND *phwnd);HRESULT ( *SendControlMsg)(IShellBrowser *This, UINT id, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pret);HRESULT ( *QueryActiveShellView)(IShellBrowser *This, IShellView **ppshv);HRESULT ( *OnViewWindowActive)(IShellBrowser *This, IShellView *pshv);HRESULT ( *SetToolbarItems)(IShellBrowser *This, LPTBBUTTONSB lpButtons, UINT nButtons, UINT uFlags);};
struct IWebBrowser2Vtbl {HRESULT ( *QueryInterface)(IWebBrowser2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowser2 *This);ULONG ( *Release)(IWebBrowser2 *This);HRESULT ( *GetTypeInfoCount)(IWebBrowser2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowser2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowser2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowser2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowser2 *This);HRESULT ( *GoForward)(IWebBrowser2 *This);HRESULT ( *GoHome)(IWebBrowser2 *This);HRESULT ( *GoSearch)(IWebBrowser2 *This);HRESULT ( *Navigate)(IWebBrowser2 *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowser2 *This);HRESULT ( *Refresh2)(IWebBrowser2 *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowser2 *This);HRESULT ( *get_Application)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowser2 *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Left)(IWebBrowser2 *This, int Left);HRESULT ( *get_Top)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Top)(IWebBrowser2 *This, int Top);HRESULT ( *get_Width)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Width)(IWebBrowser2 *This, int Width);HRESULT ( *get_Height)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Height)(IWebBrowser2 *This, int Height);HRESULT ( *get_LocationName)(IWebBrowser2 *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowser2 *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *Quit)(IWebBrowser2 *This);HRESULT ( *ClientToWindow)(IWebBrowser2 *This, int *pcx, int *pcy);HRESULT ( *PutProperty)(IWebBrowser2 *This, BSTR Property, VARIANT vtValue);HRESULT ( *GetProperty)(IWebBrowser2 *This, BSTR Property, VARIANT *pvtValue);HRESULT ( *get_Name)(IWebBrowser2 *This, BSTR *Name);HRESULT ( *get_HWND)(IWebBrowser2 *This, SHANDLE_PTR *pHWND);HRESULT ( *get_FullName)(IWebBrowser2 *This, BSTR *FullName);HRESULT ( *get_Path)(IWebBrowser2 *This, BSTR *Path);HRESULT ( *get_Visible)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *put_Visible)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_StatusBar)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *put_StatusBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_StatusText)(IWebBrowser2 *This, BSTR *StatusText);HRESULT ( *put_StatusText)(IWebBrowser2 *This, BSTR StatusText);HRESULT ( *get_ToolBar)(IWebBrowser2 *This, int *Value);HRESULT ( *put_ToolBar)(IWebBrowser2 *This, int Value);HRESULT ( *get_MenuBar)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_MenuBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_FullScreen)(IWebBrowser2 *This, VARIANT_BOOL *pbFullScreen);HRESULT ( *put_FullScreen)(IWebBrowser2 *This, VARIANT_BOOL bFullScreen);HRESULT ( *Navigate2)(IWebBrowser2 *This, VARIANT *URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *QueryStatusWB)(IWebBrowser2 *This, OLECMDID cmdID, OLECMDF *pcmdf);HRESULT ( *ExecWB)(IWebBrowser2 *This, OLECMDID cmdID, OLECMDEXECOPT cmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);HRESULT ( *ShowBrowserBar)(IWebBrowser2 *This, VARIANT *pvaClsid, VARIANT *pvarShow, VARIANT *pvarSize);HRESULT ( *get_ReadyState)(IWebBrowser2 *This, READYSTATE *plReadyState);HRESULT ( *get_Offline)(IWebBrowser2 *This, VARIANT_BOOL *pbOffline);HRESULT ( *put_Offline)(IWebBrowser2 *This, VARIANT_BOOL bOffline);HRESULT ( *get_Silent)(IWebBrowser2 *This, VARIANT_BOOL *pbSilent);HRESULT ( *put_Silent)(IWebBrowser2 *This, VARIANT_BOOL bSilent);HRESULT ( *get_RegisterAsBrowser)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_RegisterAsBrowser)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_RegisterAsDropTarget)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_RegisterAsDropTarget)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_TheaterMode)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_TheaterMode)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_AddressBar)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_AddressBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_Resizable)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_Resizable)(IWebBrowser2 *This, VARIANT_BOOL Value);};
struct ITypeInfoVtbl {HRESULT ( *QueryInterface)(ITypeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeInfo *This);ULONG ( *Release)(ITypeInfo *This);HRESULT ( *GetTypeAttr)(ITypeInfo *This, TYPEATTR **ppTypeAttr);HRESULT ( *GetTypeComp)(ITypeInfo *This, ITypeComp **ppTComp);HRESULT ( *GetFuncDesc)(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT ( *GetVarDesc)(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);HRESULT ( *GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT ( *GetRefTypeOfImplType)(ITypeInfo *This, UINT index, HREFTYPE *pRefType);HRESULT ( *GetImplTypeFlags)(ITypeInfo *This, UINT index, INT *pImplTypeFlags);HRESULT ( *GetIDsOfNames)(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT ( *Invoke)(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT ( *GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT ( *AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT ( *CreateInstance)(ITypeInfo *This, IUnknown *pUnkOuter,  IID * riid, PVOID *ppvObj);HRESULT ( *GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);HRESULT ( *GetContainingTypeLib)(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);void ( *ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *pTypeAttr);void ( *ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pFuncDesc);void ( *ReleaseVarDesc)(ITypeInfo *This, VARDESC *pVarDesc);};
struct IShellFolder2Vtbl {HRESULT ( *QueryInterface)(IShellFolder2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolder2 *This);ULONG ( *Release)(IShellFolder2 *This);HRESULT ( *ParseDisplayName)(IShellFolder2 *This, HWND hwnd, LPBC pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, LPITEMIDLIST *ppidl, ULONG *pdwAttributes);HRESULT ( *EnumObjects)(IShellFolder2 *This, HWND hwnd, SHCONTF grfFlags, IEnumIDList **ppenumIDList);HRESULT ( *BindToObject)(IShellFolder2 *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *BindToStorage)(IShellFolder2 *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *CompareIDs)(IShellFolder2 *This, LPARAM lParam, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);HRESULT ( *CreateViewObject)(IShellFolder2 *This, HWND hwndOwner,  IID * riid, void **ppv);HRESULT ( *GetAttributesOf)(IShellFolder2 *This, UINT cidl, LPCITEMIDLIST *apidl, SFGAOF *rgfInOut);HRESULT ( *GetUIObjectOf)(IShellFolder2 *This, HWND hwndOwner, UINT cidl, LPCITEMIDLIST *apidl,  IID * riid, UINT *rgfReserved, void **ppv);HRESULT ( *GetDisplayNameOf)(IShellFolder2 *This, LPCITEMIDLIST pidl, SHGDNF uFlags, STRRET *pName);HRESULT ( *SetNameOf)(IShellFolder2 *This, HWND hwnd, LPCITEMIDLIST pidl, LPCOLESTR pszName, SHGDNF uFlags, LPITEMIDLIST *ppidlOut);HRESULT ( *GetDefaultSearchGUID)(IShellFolder2 *This, GUID *pguid);HRESULT ( *EnumSearches)(IShellFolder2 *This, IEnumExtraSearch **ppenum);HRESULT ( *GetDefaultColumn)(IShellFolder2 *This, DWORD dwRes, ULONG *pSort, ULONG *pDisplay);HRESULT ( *GetDefaultColumnState)(IShellFolder2 *This, UINT iColumn, SHCOLSTATEF *pcsFlags);HRESULT ( *GetDetailsEx)(IShellFolder2 *This, LPCITEMIDLIST pidl,  SHCOLUMNID *pscid, VARIANT *pv);HRESULT ( *GetDetailsOf)(IShellFolder2 *This, LPCITEMIDLIST pidl, UINT iColumn, SHELLDETAILS *psd);HRESULT ( *MapColumnToSCID)(IShellFolder2 *This, UINT iColumn, SHCOLUMNID *pscid);};
struct ITypeInfo2Vtbl {HRESULT ( *QueryInterface)(ITypeInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeInfo2 *This);ULONG ( *Release)(ITypeInfo2 *This);HRESULT ( *GetTypeAttr)(ITypeInfo2 *This, TYPEATTR **ppTypeAttr);HRESULT ( *GetTypeComp)(ITypeInfo2 *This, ITypeComp **ppTComp);HRESULT ( *GetFuncDesc)(ITypeInfo2 *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT ( *GetVarDesc)(ITypeInfo2 *This, UINT index, VARDESC **ppVarDesc);HRESULT ( *GetNames)(ITypeInfo2 *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT ( *GetRefTypeOfImplType)(ITypeInfo2 *This, UINT index, HREFTYPE *pRefType);HRESULT ( *GetImplTypeFlags)(ITypeInfo2 *This, UINT index, INT *pImplTypeFlags);HRESULT ( *GetIDsOfNames)(ITypeInfo2 *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT ( *Invoke)(ITypeInfo2 *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDocumentation)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *GetDllEntry)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT ( *GetRefTypeInfo)(ITypeInfo2 *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT ( *AddressOfMember)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT ( *CreateInstance)(ITypeInfo2 *This, IUnknown *pUnkOuter,  IID * riid, PVOID *ppvObj);HRESULT ( *GetMops)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrMops);HRESULT ( *GetContainingTypeLib)(ITypeInfo2 *This, ITypeLib **ppTLib, UINT *pIndex);void ( *ReleaseTypeAttr)(ITypeInfo2 *This, TYPEATTR *pTypeAttr);void ( *ReleaseFuncDesc)(ITypeInfo2 *This, FUNCDESC *pFuncDesc);void ( *ReleaseVarDesc)(ITypeInfo2 *This, VARDESC *pVarDesc);HRESULT ( *GetTypeKind)(ITypeInfo2 *This, TYPEKIND *pTypeKind);HRESULT ( *GetTypeFlags)(ITypeInfo2 *This, ULONG *pTypeFlags);HRESULT ( *GetFuncIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, UINT *pFuncIndex);HRESULT ( *GetVarIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, UINT *pVarIndex);HRESULT ( *GetCustData)(ITypeInfo2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetFuncCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetVarCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetImplTypeCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetDocumentation2)(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT ( *GetAllCustData)(ITypeInfo2 *This, CUSTDATA *pCustData);HRESULT ( *GetAllFuncCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT ( *GetAllParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, CUSTDATA *pCustData);HRESULT ( *GetAllVarCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT ( *GetAllImplTypeCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);};
union tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E {tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E___1A0FF913CB6A2700FBDFFDCC16233417 __anonymous0;DECIMAL decVal;};
union tagVARIANT___E93DC971A089CC95F6C875332324C1E7 {tagVARIANT___E93DC971A089CC95F6C875332324C1E7___65D68C826D16CA47CF95571D7BFCD657 __anonymous0;DECIMAL decVal;};
struct __MIDL___MIDL_itf_wtypes_0003_0001 {DWORD tyspec;union __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005 tagged_union;};
struct _userSTGMEDIUM___STGMEDIUM_UNION {DWORD tymed;union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 u;};
struct tagSTGMEDIUM {DWORD tymed;tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB __anonymous0;IUnknown *pUnkForRelease;};
struct _RPC_ASYNC_STATE {unsigned int Size;unsigned int Signature;int Lock;unsigned int Flags;void *StubInfo;void *UserInfo;void *RuntimeInfo;RPC_ASYNC_EVENT Event;RPC_NOTIFICATION_TYPES NotificationType;union _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3 u;LONG_PTR Reserved[4];};
struct tagPROPVARIANT {tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E __anonymous0;};
struct tagVARIANT {tagVARIANT___E93DC971A089CC95F6C875332324C1E7 __anonymous0;};



/// #endif ===true


