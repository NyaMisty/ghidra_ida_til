
#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\pc\bc5w16.til.h"
/// #define GHIDRA ===DEFINED

/// #ifndef INCLUDE_GUARD_bc5w16_til ===true

/// #define INCLUDE_GUARD_bc5w16_til ===DEFINED


#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\5_gengdt\pc\.\..\..\..\..\IDAPlugins\idatil2c\common.h"


/// #define __int64  long long ===DEFINED
/// #define __int32  int ===DEFINED
/// #define __int16  short ===DEFINED
/// #define __int8  char ===DEFINED

/// #ifdef GHIDRA ===true

typedef struct {
    long long u1;
    long long u2;
} __int128;
typedef struct {
    unsigned long long u1;
    unsigned long long u2;
} __uint128;
/// #endif ===true


typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

/// #define _BYTE  uint8_t ===DEFINED
/// #define _WORD  uint16_t ===DEFINED
/// #define _QWORD  uint64_t ===DEFINED
/// #define _DWORD  uint32_t ===DEFINED



/// #ifndef HAVETYPE_bool ===true

/// #define bool  char ===DEFINED
/// #endif ===true


/// #ifndef HAVETYPE___u32 ===true

typedef uint32_t __u32;
/// #endif ===true

/// #ifndef HAVETYPE___u16 ===true

typedef uint16_t __u16;
/// #endif ===true

/// #ifndef HAVETYPE___u64 ===true

typedef uint64_t __u64;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_uid32_t ===true

typedef unsigned int __kernel_uid32_t;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_mqd_t ===true

typedef int __kernel_mqd_t;
/// #endif ===true



/// #define __fastcall ===DEFINED

/// #define __unaligned ===DEFINED

/// #define __stdcall ===DEFINED

/// #define __cppobj ===DEFINED

/// #define __declspec([x])   ===DEFINED
/// #define __hidden ===DEFINED

/// #define __cdecl ===DEFINED

/// #define __noreturn ===DEFINED

/// #define __pascal ===DEFINED

/// #define __near ===DEFINED


/// #define const ===DEFINED

/// #define this  _this ===DEFINED
/// #define near ===DEFINED


typedef char _Mbstatet;

typedef void **va_list;





























 
#line 4: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\pc\bc5w16.til.h"




struct tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C___A8262751543F154F80C41ED2519FD13B;
struct tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C___D5AE507983131F2A7D73786D6C61051F;
struct mmtime_tag___E89738907296235928D3FD1615E4E030___77546E6DA24DBEE74453C7AE7BAE240D;
struct mmtime_tag___E89738907296235928D3FD1615E4E030___B7A2B1CE967584EBB3840978181CF21D;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5;
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F;
union tMIXERLINECONTROLS___DC43C2837E8C20184C3137B308FBE3E1;
union tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C;
union tMIXERCONTROL___AFA1D3B62FF5E28583F9FD43B125895E;
union tagSTGMEDIUM___62EF16ADBE1A605A5A555D41C9B0FE35;
union tagTYPEDESC___B4FA4469D1F86C0E7D898206ED7D9FDD;
union mmtime_tag___E89738907296235928D3FD1615E4E030;
struct tMIXERLINE___603D61C4173A9E5D7ED836A8441A40C9;
union tagVARDESC___F04833D7152C1F618CB19FA4ACB5074C;
union tagVARIANT___97E52095E85F5E8E7D59138FFD8EEF88;
union in_addr___C13EC994467D6E67044F092615EC7EA9;
struct _096A9CEC9D0640E3594D0A52C8C05E40;
struct _12162CE22CDC56067DA0BB6E4AD54465;
struct _3CA0C319F87D2D6479A928EE1D6E454C;
struct _548B30A8C808F6625678FF0EC6B59BB3;
struct _549C1D5CD1C453772D3DFDF07CAC3EA1;
struct _6EEFECD5A0D572B8077FDFCD6CCD86DE;
struct _7B3C5D519F2E4A5BE311CA6A6DE1B2A0;
struct _925387C1A9AA03DD03B17550DEA320D0;
struct _979FA3DE6ECCF956231BFC297C4278E6;
struct _9811B5662EE51361168BFF08BB491D75;
struct _B8243ED19B76CA5D55F9F69ED1E7C09F;
struct _DFB5CCA608DB1B6F2D4767A059C3C570;
struct _F537039E3C3D15C2CDBD1FBA107663C2;
struct tMIXERCONTROLDETAILS_LISTTEXT;
struct tMIXERCONTROLDETAILS_UNSIGNED;
struct tMIXERCONTROLDETAILS_BOOLEAN;
struct IOleInPlaceActiveObjectVtbl;
struct tMIXERCONTROLDETAILS_SIGNED;
struct tagMCI_ANIM_UPDATE_PARMS;
struct tagMCI_ANIM_WINDOW_PARMS;
struct tagMCI_OVLY_WINDOW_PARMS;
struct tagMCI_WAVE_DELETE_PARMS;
struct IExternalConnectionVtbl;
struct IOleInPlaceActiveObject;
struct IOleInPlaceUIWindowVtbl;
struct IRunningObjectTableVtbl;
struct tagMCI_GETDEVCAPS_PARMS;
struct tagMCI_ANIM_OPEN_PARMS;
struct tagMCI_ANIM_PLAY_PARMS;
struct tagMCI_ANIM_RECT_PARMS;
struct tagMCI_ANIM_STEP_PARMS;
struct tagMCI_OVLY_LOAD_PARMS;
struct tagMCI_OVLY_OPEN_PARMS;
struct tagMCI_OVLY_RECT_PARMS;
struct tagMCI_OVLY_SAVE_PARMS;
struct tagMCI_VD_ESCAPE_PARMS;
struct tagMCI_WAVE_OPEN_PARMS;
struct IDataAdviseHolderVtbl;
struct IOleInPlaceObjectVtbl;
struct IOleItemContainerVtbl;
struct IParseDisplayNameVtbl;
struct ISupportErrorInfoVtbl;
struct tagCLIENTCREATESTRUCT;
struct tagHARDWAREHOOKSTRUCT;
struct tagMCI_WAVE_SET_PARMS;
struct tagOleMenuGroupWidths;
struct ICreateErrorInfoVtbl;
struct IOleAdviseHolderVtbl;
struct IOleCacheControlVtbl;
struct IOleInPlaceFrameVtbl;
struct tMIXERCONTROLDETAILS;
struct tagCBTACTIVATESTRUCT;
struct tagCOMPAREITEMSTRUCT;
struct tagMCI_GENERIC_PARMS;
struct tagMCI_SEQ_SET_PARMS;
struct tagMCI_SYSINFO_PARMS;
struct tagMCI_VD_PLAY_PARMS;
struct tagMCI_VD_STEP_PARMS;
struct tagMEASUREITEMSTRUCT;
struct tagNCCALCSIZE_PARAMS;
struct tagOUTLINETEXTMETRIC;
struct tagRASTERIZER_STATUS;
struct ICreateTypeInfoVtbl;
struct IExternalConnection;
struct IOleInPlaceSiteVtbl;
struct IOleInPlaceUIWindow;
struct IPersistStorageVtbl;
struct IRunnableObjectVtbl;
struct IRunningObjectTable;
struct IStdMarshalInfoVtbl;
struct tagBITMAPCOREHEADER;
struct tagBITMAPFILEHEADER;
struct tagBITMAPINFOHEADER;
struct tagDELETEITEMSTRUCT;
struct tagDRIVERINFOSTRUCT;
struct tagFMS_GETDRIVEINFO;
struct tagMCI_RECORD_PARMS;
struct tagMCI_STATUS_PARMS;
struct tagNFYLOGPARAMERROR;
struct tagOBJECTDESCRIPTOR;
struct tagVS_FIXEDFILEINFO;
struct ICreateTypeLibVtbl;
struct IEnumFORMATETCVtbl;
struct IMessageFilterVtbl;
struct IOleClientSiteVtbl;
struct IPersistStreamVtbl;
struct tMIXERLINECONTROLS;
struct tagMCI_BREAK_PARMS;
struct tagMDICREATESTRUCT;
struct tagMOUSEHOOKSTRUCT;
struct tagSTACKTRACEENTRY;
struct tagTTPOLYGONHEADER;
struct tagWINDOWPLACEMENT;
struct IClassFactoryVtbl;
struct IDataAdviseHolder;
struct IEnumSTATDATAVtbl;
struct IOleContainerVtbl;
struct IOleInPlaceObject;
struct IOleItemContainer;
struct IParseDisplayName;
struct ISupportErrorInfo;
struct pcmwaveformat_tag;
struct tagBANDINFOSTRUCT;
struct tagBITMAPCOREINFO;
struct tagDRAWITEMSTRUCT;
struct tagDVTARGETDEVICE;
struct tagFMS_GETFILESEL;
struct tagMCI_INFO_PARMS;
struct tagMCI_LOAD_PARMS;
struct tagMCI_OPEN_PARMS;
struct tagMCI_PLAY_PARMS;
struct tagMCI_SAVE_PARMS;
struct tagMCI_SEEK_PARMS;
struct tagSAFEARRAYBOUND;
struct IAdviseSink2Vtbl;
struct ICreateErrorInfo;
struct IEnumMonikerVtbl;
struct IEnumOLEVERBVtbl;
struct IEnumSTATSTGVtbl;
struct IEnumUnknownVtbl;
struct IEnumVARIANTVtbl;
struct IOleAdviseHolder;
struct IOleCacheControl;
struct IOleInPlaceFrame;
struct IPersistFileVtbl;
struct IRootStorageVtbl;
struct IViewObject2Vtbl;
struct channel_caps_tag;
struct tagCBT_CREATEWND;
struct tagDEBUGHOOKINFO;
struct tagDRVCONFIGINFO;
struct tagINTERFACEDATA;
struct tagINTERFACEINFO;
struct tagMCI_SET_PARMS;
struct tagMONCONVSTRUCT;
struct tagMONLINKSTRUCT;
struct tagNEWTEXTMETRIC;
struct tagPENDATAHEADER;
struct DRVCONFIGINFOEX;
struct IAdviseSinkVtbl;
struct ICreateTypeInfo;
struct IDataObjectVtbl;
struct IDropSourceVtbl;
struct IDropTargetVtbl;
struct IEnumStringVtbl;
struct IOleInPlaceSite;
struct IPersistStorage;
struct IRunnableObject;
struct IStdMarshalInfo;
struct IViewObjectVtbl;
struct _ULARGE_INTEGER;
struct midioutcaps_tag;
struct tagCREATESTRUCT;
struct tagGLYPHMETRICS;
struct tagMETAFILEPICT;
struct tagMONERRSTRUCT;
struct tagMONHSZSTRUCT;
struct tagMONMSGSTRUCT;
struct tagMULTIKEYHELP;
struct tagPALETTEENTRY;
struct tagSCREENPARAMS;
struct tagWINDEBUGINFO;
struct waveoutcaps_tag;
struct ICreateTypeLib;
struct IEnumFORMATETC;
struct IErrorInfoVtbl;
struct ILockBytesVtbl;
struct IMessageFilter;
struct IOleCache2Vtbl;
struct IOleClientSite;
struct IOleObjectVtbl;
struct IOleWindowVtbl;
struct IPersistStream;
struct _LARGE_INTEGER;
struct _OLESTREAMVTBL;
struct midiincaps_tag;
struct tagCHOOSECOLOR;
struct tagCONVCONTEXT;
struct tagENUMLOGFONT;
struct tagFINDREPLACE;
struct tagGLOBALENTRY;
struct tagHANDLETABLE;
struct tagKERNINGPAIR;
struct tagMODULEENTRY;
struct tagMONCBSTRUCT;
struct tagNFYLOGERROR;
struct tagNFYSTARTDLL;
struct tagPAINTSTRUCT;
struct tagSYSHEAPINFO;
struct tagTTPOLYCURVE;
struct waveformat_tag;
struct waveincaps_tag;
struct IClassFactory;
struct IDispatchVtbl;
struct IEnumSTATDATA;
struct IOleCacheVtbl;
struct IOleContainer;
struct ITypeCompVtbl;
struct ITypeInfoVtbl;
struct tMIXERCONTROL;
struct tWAVEFORMATEX;
struct tagBITMAPINFO;
struct tagCALBSTRUCT;
struct tagCHOOSEFONT;
struct tagCLASSENTRY;
struct tagDISPPARAMS;
struct tagGLOBALINFO;
struct tagLOCALENTRY;
struct tagLOGPALETTE;
struct tagMEMMANINFO;
struct tagMETAHEADER;
struct tagMETARECORD;
struct tagMETHODDATA;
struct tagMINMAXINFO;
struct tagNEWCPLINFO;
struct tagNFYLOADSEG;
struct tagOEMPENINFO;
struct tagSTROKEINFO;
struct tagTEXTMETRIC;
struct IAdviseSink2;
struct IBindCtxVtbl;
struct IEnumMoniker;
struct IEnumOLEVERB;
struct IEnumSTATSTG;
struct IEnumUnknown;
struct IEnumVARIANT;
struct IMarshalVtbl;
struct IMonikerVtbl;
struct IOleLinkVtbl;
struct IPersistFile;
struct IPersistVtbl;
struct IRootStorage;
struct IStorageVtbl;
struct ITypeLibVtbl;
struct IUnknownVtbl;
struct IViewObject2;
struct sockaddr_vns;
struct tagARRAYDESC;
struct tagBIND_OPTS;
struct tagBOXLAYOUT;
struct tagDDEADVISE;
struct tagEXCEPINFO;
struct tagFORMATETC;
struct tagLOCALINFO;
struct tagPARAMDATA;
struct tagPENPACKET;
struct tagRGBTRIPLE;
struct tagSAFEARRAY;
struct tagSTGMEDIUM;
struct tagTASKENTRY;
struct tagTIMERINFO;
struct tagWINDOWPOS;
struct timecaps_tag;
struct videohdr_tag;
struct IAdviseSink;
struct IDataObject;
struct IDropSource;
struct IDropTarget;
struct IEnumString;
struct IMallocVtbl;
struct IStreamVtbl;
struct IViewObject;
struct _exceptionl;
struct auxcaps_tag;
struct joycaps_tag;
struct joyinfo_tag;
struct midihdr_tag;
struct sockaddr_in;
struct sockaddr_nb;
struct sockaddr_tp;
struct tagCONVINFO;
struct tagCTLSTYLE;
struct tagDEVNAMES;
struct tagELEMDESC;
struct tagEVENTMSG;
struct tagFILETIME;
struct tagFMS_LOAD;
struct tagFUNCDESC;
struct tagLOGBRUSH;
struct tagOFSTRUCT;
struct tagRCRESULT;
struct tagSTATDATA;
struct tagTLIBATTR;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct tagWNDCLASS;
struct wavehdr_tag;
struct IErrorInfo;
struct ILockBytes;
struct IOleCache2;
struct IOleObject;
struct IOleWindow;
struct _OLESTREAM;
struct mmtime_tag;
struct tMIXERCAPS;
struct tMIXERLINE;
union tagBINDPTR;
struct tagCOMSTAT;
struct tagCPLINFO;
struct tagCTLINFO;
struct tagCTLTYPE;
struct tagDDEDATA;
struct tagDDEPOKE;
struct tagDEVMODE;
struct tagHSZPAIR;
struct tagIDLDESC;
struct tagLOGFONT;
struct tagOLEVERB;
struct tagPENINFO;
struct tagPOINTFX;
struct tagRECTOFS;
struct tagRGBQUAD;
struct tagSEGINFO;
struct tagSKBINFO;
struct tagSTATSTG;
struct tagVARDESC;
struct tagVARIANT;
struct IDispatch;
struct IOleCache;
struct ITypeComp;
struct ITypeInfo;
struct _MMCKINFO;
struct _MMIOINFO;
struct __jmp_buf;
struct _complexl;
struct exception;
struct sockproto;
struct tagBITMAP;
struct tagDDEACK;
struct tagLOGPEN;
struct tagNFYRIP;
struct tagPANOSE;
struct tagPOINTL;
struct text_info;
struct IBindCtx;
struct IMarshal;
struct IMoniker;
struct IOleLink;
struct IPersist;
struct IStorage;
struct ITypeLib;
struct IUnknown;
struct protoent;
struct sockaddr;
struct tagDDELN;
struct tagDDEUP;
struct tagFIXED;
struct tagGUIDE;
struct tagPOINT;
struct tagRECTL;
struct tagSIZEL;
struct IMalloc;
struct IStream;
struct WSAData;
struct complex;
struct hostent;
struct in_addr;
struct ip_mreq;
struct servent;
struct tagMAT2;
struct tagOIFI;
struct tagRECT;
struct tagSIZE;
struct timeval;
struct utimbuf;
struct dirent;
struct fd_set;
struct linger;
struct netent;
struct tagABC;
struct tagDCB;
struct tagMSG;
struct tagOFN;
struct tagSYC;
struct tagSYE;
struct tagSYG;
struct ffblk;
struct ftime;
struct lconv;
struct tagCY;
struct tagPD;
struct tagRC;
struct timeb;
struct GUID;
struct stat;
struct tm;

struct tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C___D5AE507983131F2A7D73786D6C61051F {int lMinimum;int lMaximum;};
enum _320585250961ABE9F4D068EEEC4E2CC6 {BIND_MAYBOTHERUSER = 0x1,BIND_JUSTTESTEXISTENCE = 0x2,};
struct _7B3C5D519F2E4A5BE311CA6A6DE1B2A0 {int level;unsigned int flags;char fd;unsigned char hold;int bsize;unsigned char *buffer;unsigned char *curp;unsigned int istemp;int token;};
struct _925387C1A9AA03DD03B17550DEA320D0 {int wStructSize;int x;int y;int dx;int dy;int wMax;char rgchMember[2];};
struct _979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
struct _B8243ED19B76CA5D55F9F69ED1E7C09F {int quot;int rem;};
enum _C967B4BD5950CD7FE5A55F6326D513E0 {DOMAIN = 0x1,SING = 0x2,OVERFLOW = 0x3,UNDERFLOW = 0x4,TLOSS = 0x5,PLOSS = 0x6,STACKFAULT = 0x7,};
enum MACRO_DRV_SetPenDriverEntryPoints {DRV_SetPenDriverEntryPoints = 2049,DRV_RemovePenDriverEntryPoints = 2050,DRV_SetPenSamplingRate = 2051,DRV_SetPenSamplingDist = 2052,DRV_GetName = 2053,DRV_GetVersion = 2054,DRV_GetPenInfo = 2055,DRV_GetCalibration = 2059,DRV_SetCalibration = 2060,};
typedef struct tMIXERCONTROLDETAILS_LISTTEXT *LPMIXERCONTROLDETAILS_LISTTEXT;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;
typedef struct tMIXERCONTROLDETAILS_LISTTEXT *PMIXERCONTROLDETAILS_LISTTEXT;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;
typedef struct tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;
typedef struct tMIXERCONTROLDETAILS_LISTTEXT MIXERCONTROLDETAILS_LISTTEXT;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED MIXERCONTROLDETAILS_UNSIGNED;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;
struct tMIXERCONTROLDETAILS_BOOLEAN {int fValue;};
typedef struct tMIXERCONTROLDETAILS_BOOLEAN MIXERCONTROLDETAILS_BOOLEAN;
typedef struct tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;
struct tMIXERCONTROLDETAILS_SIGNED {int lValue;};
enum MACRO_ENABLERELATIVEWIDTHS {ENABLERELATIVEWIDTHS = 768,};
enum MACRO_MK_E_CONNECTMANUALLY {MK_E_CONNECTMANUALLY = 480,MK_E_EXCEEDEDDEADLINE = 481,MK_E_NEEDGENERIC = 482,MK_E_UNAVAILABLE = 483,MK_E_SYNTAX = 484,MK_E_NOOBJECT = 485,MK_E_INVALIDEXTENSION = 486,MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = 487,MK_E_NOTBINDABLE = 488,MK_E_NOTBOUND = 489,MK_E_CANTOPENFILE = 490,MK_E_MUSTBOTHERUSER = 491,MK_E_NOINVERSE = 492,MK_E_NOSTORAGE = 493,MK_E_NOPREFIX = 494,MK_S_REDUCED_TO_SELF = 482,MK_S_ME = 484,MK_S_HIM = 485,MK_S_US = 486,MK_S_MONIKERALREADYREGISTERED = 487,};
enum MACRO_WM_WINDOWPOSCHANGING {WM_WINDOWPOSCHANGING = 0x46,WM_WINDOWPOSCHANGED = 0x47,WM_MOVE = 0x3,WM_SIZE = 0x5,};
typedef struct tMIXERCONTROLDETAILS_SIGNED MIXERCONTROLDETAILS_SIGNED;
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
enum MACRO_GETSETPAPERMETRICS {GETSETPAPERMETRICS = 35,};
enum MACRO_GETVECTORBRUSHSIZE {GETVECTORBRUSHSIZE = 27,};
enum MACRO_WM_QUERYENDSESSION {WM_QUERYENDSESSION = 0x11,WM_ENDSESSION = 0x16,WM_QUIT = 0x12,WM_SYSTEMERROR = 0x17,};
enum MACRO_WM_QUERYNEWPALETTE {WM_QUERYNEWPALETTE = 0x30F,WM_PALETTEISCHANGING = 0x310,WM_PALETTECHANGED = 0x311,};
enum MACRO_WSAEPROTONOSUPPORT {WSAEPROTONOSUPPORT = 10043,};
enum MACRO_WSAESOCKTNOSUPPORT {WSAESOCKTNOSUPPORT = 10044,};
enum MACRO_WSAVERNOTSUPPORTED {WSAVERNOTSUPPORTED = 10092,};
struct IOleInPlaceActiveObject {struct IOleInPlaceActiveObjectVtbl *lpVtbl;};
typedef struct tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_ANIM_WINDOW_PARMS *LPMCI_ANIM_WINDOW_PARMS;
typedef struct tagMCI_OVLY_WINDOW_PARMS *LPMCI_OVLY_WINDOW_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS;
enum MACRO_ENABLEPAIRKERNING {ENABLEPAIRKERNING = 769,};
enum MACRO_GETPRINTINGOFFSET {GETPRINTINGOFFSET = 13,};
enum MACRO_GETSETPRINTORIENT {GETSETPRINTORIENT = 30,};
enum MACRO_GETTRACKKERNTABLE {GETTRACKKERNTABLE = 259,};
enum MACRO_SELECTPAPERSOURCE {SELECTPAPERSOURCE = 18,};
enum MACRO_SW_SCROLLCHILDREN {SW_SCROLLCHILDREN = 0x1,SW_INVALIDATE = 0x2,SW_ERASE = 0x4,};
enum MACRO_WM_CTLCOLORMSGBOX {WM_CTLCOLORMSGBOX = 0x132,WM_CTLCOLOREDIT = 0x133,WM_CTLCOLORLISTBOX = 0x134,WM_CTLCOLORBTN = 0x135,WM_CTLCOLORDLG = 0x136,WM_CTLCOLORSCROLLBAR = 0x137,WM_CTLCOLORSTATIC = 0x138,};
enum MACRO_WM_SYSCOLORCHANGE {WM_SYSCOLORCHANGE = 0x15,};
enum MACRO_WSANOTINITIALISED {WSANOTINITIALISED = 10093,};
typedef struct tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS;
enum MACRO_CTL3D_NOSUBCLASS {CTL3D_NOSUBCLASS = 0,CTL3D_SUBCLASS = 1,};
enum MACRO_ENUMPAPERMETRICS {ENUMPAPERMETRICS = 34,};
enum MACRO_GETPAIRKERNTABLE {GETPAIRKERNTABLE = 258,};
enum MACRO_GETSCALINGFACTOR {GETSCALINGFACTOR = 14,};
enum MACRO_GETVECTORPENSIZE {GETVECTORPENSIZE = 26,};
enum MACRO_MARSHALINTERFACE {MARSHALINTERFACE_MIN = 40,};
enum MACRO_MAXGETHOSTSTRUCT {MAXGETHOSTSTRUCT = 1024,};
enum MACRO_MULTIFILEOPENORD {MULTIFILEOPENORD = 1537,};
enum MACRO_SETALLJUSTVALUES {SETALLJUSTVALUES = 771,};
enum MACRO_SW_PARENTCLOSING {SW_PARENTCLOSING = 1,SW_OTHERMAXIMIZED = 2,SW_PARENTOPENING = 3,SW_OTHERRESTORED = 4,SW_OTHERZOOM = 2,SW_OTHERUNZOOM = 4,};
enum MACRO_WH_JOURNALRECORD {WH_JOURNALRECORD = 0,WH_JOURNALPLAYBACK = 1,};
enum MACRO_WM_CHILDACTIVATE {WM_CHILDACTIVATE = 0x22,};
enum MACRO_WM_DEVMODECHANGE {WM_DEVMODECHANGE = 0x1B,WM_TIMECHANGE = 0x1E,};
enum MACRO_WM_QUERYDRAGICON {WM_QUERYDRAGICON = 0x37,WM_DROPFILES = 0x233,};
enum MACRO_WM_SPOOLERSTATUS {WM_SPOOLERSTATUS = 0x2A,};
enum MACRO_WSAEADDRNOTAVAIL {WSAEADDRNOTAVAIL = 10049,};
typedef struct _096A9CEC9D0640E3594D0A52C8C05E40 MENUITEMTEMPLATEHEADER;
typedef struct tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS;
typedef struct tagMCI_ANIM_OPEN_PARMS *LPMCI_ANIM_OPEN_PARMS;
typedef struct tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMS *LPMCI_OVLY_LOAD_PARMS;
typedef struct tagMCI_OVLY_OPEN_PARMS *LPMCI_OVLY_OPEN_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS;
typedef struct tagMCI_OVLY_SAVE_PARMS *LPMCI_OVLY_SAVE_PARMS;
typedef struct tagMCI_VD_ESCAPE_PARMS *LPMCI_VD_ESCAPE_PARMS;
typedef struct tagMCI_WAVE_OPEN_PARMS *LPMCI_WAVE_OPEN_PARMS;
typedef struct tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;
enum MACRO_COLOR_HUESCROLL {COLOR_HUESCROLL = 700,COLOR_SATSCROLL = 701,COLOR_LUMSCROLL = 702,COLOR_HUE = 703,COLOR_SAT = 704,COLOR_LUM = 705,COLOR_RED = 706,COLOR_GREEN = 707,COLOR_BLUE = 708,COLOR_CURRENT = 709,COLOR_RAINBOW = 710,COLOR_SAVE = 711,COLOR_ADD = 712,COLOR_SOLID = 713,COLOR_TUNE = 714,COLOR_SCHEMES = 715,COLOR_ELEMENT = 716,COLOR_SAMPLES = 717,COLOR_PALETTE = 718,COLOR_MIX = 719,COLOR_BOX1 = 720,COLOR_CUSTOM1 = 721,COLOR_HUEACCEL = 723,COLOR_SATACCEL = 724,COLOR_LUMACCEL = 725,COLOR_REDACCEL = 726,COLOR_GREENACCEL = 727,COLOR_BLUEACCEL = 728,};
enum MACRO_DRAWPATTERNRECT {DRAWPATTERNRECT = 25,};
enum MACRO_FLOODFILLBORDER {FLOODFILLBORDER = 0,FLOODFILLSURFACE = 1,};
enum MACRO_GETPHYSPAGESIZE {GETPHYSPAGESIZE = 12,};
enum MACRO_GETSETPAPERBINS {GETSETPAPERBINS = 29,};
enum MACRO_HE_GETBOXLAYOUT {HE_GETBOXLAYOUT = 20,HE_SETBOXLAYOUT = 21,};
enum MACRO_LF_FULLFACESIZE {LF_FULLFACESIZE = 64,};
enum MACRO_MAXDICTIONARIES {MAXDICTIONARIES = 16,cbRcLanguageMax = 44,};
enum MACRO_MAXOEMDATAWORDS {MAXOEMDATAWORDS = 6,};
enum MACRO_WM_WININICHANGE {WM_WININICHANGE = 0x1A,};
enum MACRO_WSAEAFNOSUPPORT {WSAEAFNOSUPPORT = 10047,};
enum MACRO_WSAECONNABORTED {WSAECONNABORTED = 10053,};
enum MACRO_WSAECONNREFUSED {WSAECONNREFUSED = 10061,};
enum MACRO_WSAEDESTADDRREQ {WSAEDESTADDRREQ = 10039,};
enum MACRO_WSAEHOSTUNREACH {WSAEHOSTUNREACH = 10065,};
enum MACRO_WSAENAMETOOLONG {WSAENAMETOOLONG = 10063,};
enum MACRO_WSAEPFNOSUPPORT {WSAEPFNOSUPPORT = 10046,};
enum MACRO_WSAETOOMANYREFS {WSAETOOMANYREFS = 10059,};
enum MACRO_cwRcReservedMax {cwRcReservedMax = 8,};
typedef struct tagMCI_ANIM_UPDATE_PARMS MCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_ANIM_WINDOW_PARMS MCI_ANIM_WINDOW_PARMS;
typedef struct tagMCI_OVLY_WINDOW_PARMS MCI_OVLY_WINDOW_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS MCI_WAVE_DELETE_PARMS;
typedef struct tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS;
struct tagOleMenuGroupWidths {int width[6];};
typedef IExternalConnection *LPEXTERNALCONNECTION;
typedef struct tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS;
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
enum MACRO_CF_SCREENFONTS {CF_SCREENFONTS = 0x1,CF_PRINTERFONTS = 0x2,CF_BOTH = 0x3,CF_SHOWHELP = 0x4,CF_ENABLEHOOK = 0x8,CF_ENABLETEMPLATE = 0x10,CF_ENABLETEMPLATEHANDLE = 0x20,CF_INITTOLOGFONTSTRUCT = 0x40,CF_USESTYLE = 0x80,CF_EFFECTS = 0x100,CF_APPLY = 0x200,CF_ANSIONLY = 0x400,CF_NOVECTORFONTS = 0x800,CF_NOOEMFONTS = 0x800,CF_NOSIMULATIONS = 0x1000,CF_LIMITSIZE = 0x2000,CF_FIXEDPITCHONLY = 0x4000,CF_WYSIWYG = 0x8000,CF_FORCEFONTEXIST = 0x0,CF_SCALABLEONLY = 0x0,CF_TTONLY = 0x0,CF_NOFACESEL = 0x0,CF_NOSTYLESEL = 0x0,CF_NOSIZESEL = 0x0,};
enum MACRO_CTL3D_CTLCOLOR {CTL3D_CTLCOLOR = 4593,CTL3D_3DCHECK = 26567,};
enum MACRO_CTL3D_NOBORDER {CTL3D_NOBORDER = 0,CTL3D_BORDER = 1,};
enum MACRO_CWCSTORAGENAME {CWCSTORAGENAME = 32,};
enum MACRO_DLGWINDOWEXTRA {DLGWINDOWEXTRA = 30,};
enum MACRO_DM_SPECVERSION {DM_SPECVERSION = 0x30A,DM_ORIENTATION = 0x1,DM_PAPERSIZE = 0x2,DM_PAPERLENGTH = 0x4,DM_PAPERWIDTH = 0x8,DM_SCALE = 0x10,DM_COPIES = 0x100,DM_DEFAULTSOURCE = 0x200,DM_PRINTQUALITY = 0x400,DM_COLOR = 0x800,DM_DUPLEX = 0x1000,DM_YRESOLUTION = 0x2000,DM_TTOPTION = 0x4000,};
enum MACRO_FORMATDLGORD30 {FORMATDLGORD30 = 1544,};
enum MACRO_FORMATDLGORD31 {FORMATDLGORD31 = 1543,};
enum MACRO_GETEXTENTTABLE {GETEXTENTTABLE = 257,};
enum MACRO_GMEM_DISCARDED {GMEM_DISCARDED = 0x4000,GMEM_LOCKCOUNT = 0xFF,};
enum MACRO_LMEM_DISCARDED {LMEM_DISCARDED = 0x4000,LMEM_LOCKCOUNT = 0xFF,};
enum MACRO_PEN_NOINKWIDTH {PEN_NOINKWIDTH = 0,};
enum MACRO_PRNSETUPDLGORD {PRNSETUPDLGORD = 1539,};
enum MACRO_WM_DLGSUBCLASS {WM_DLGSUBCLASS = 4592,};
enum MACRO_WM_NCMOUSEMOVE {WM_NCMOUSEMOVE = 0xA0,WM_NCLBUTTONDOWN = 0xA1,WM_NCLBUTTONUP = 0xA2,WM_NCLBUTTONDBLCLK = 0xA3,WM_NCRBUTTONDOWN = 0xA4,WM_NCRBUTTONUP = 0xA5,WM_NCRBUTTONDBLCLK = 0xA6,WM_NCMBUTTONDOWN = 0xA7,WM_NCMBUTTONUP = 0xA8,WM_NCMBUTTONDBLCLK = 0xA9,WM_MOUSEACTIVATE = 0x21,};
enum MACRO_WM_PENWINFIRST {WM_PENWINFIRST = 0x380,WM_PENWINLAST = 0x38F,WM_COALESCE_FIRST = 0x390,WM_COALESCE_LAST = 0x39F,WM_POWER = 0x48,};
enum MACRO_WSAEINPROGRESS {WSAEINPROGRESS = 10036,};
enum MACRO_WSAENETUNREACH {WSAENETUNREACH = 10051,};
enum MACRO_WSAENOPROTOOPT {WSAENOPROTOOPT = 10042,};
enum MACRO_WSAEWOULDBLOCK {WSAEWOULDBLOCK = 10035,};
enum MACRO_WSASYSNOTREADY {WSASYSNOTREADY = 10091,};
enum MACRO_cbRcrgbfAlcMax {cbRcrgbfAlcMax = 32,};
typedef struct tagMCI_GETDEVCAPS_PARMS MCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS;
typedef struct tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;
struct tagRASTERIZER_STATUS {int nSize;int wFlags;int nLanguageID;};
struct IExternalConnection {struct IExternalConnectionVtbl *lpVtbl;};
struct IOleInPlaceUIWindow {struct IOleInPlaceUIWindowVtbl *lpVtbl;};
struct IRunningObjectTable {struct IRunningObjectTableVtbl *lpVtbl;};
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
typedef struct tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_SYSINFO_PARMS *LPMCI_SYSINFO_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS;
typedef struct tMIXERLINECONTROLS *LPMIXERLINECONTROLS;
typedef struct tagOUTLINETEXTMETRIC *LPOUTLINETEXTMETRIC;
enum MACRO_BS_PUSHBUTTON {BS_PUSHBUTTON = 0x0,BS_DEFPUSHBUTTON = 0x1,BS_CHECKBOX = 0x2,BS_AUTOCHECKBOX = 0x3,BS_RADIOBUTTON = 0x4,BS_3STATE = 0x5,BS_AUTO3STATE = 0x6,BS_GROUPBOX = 0x7,BS_USERBUTTON = 0x8,BS_AUTORADIOBUTTON = 0x9,BS_OWNERDRAW = 0xB,BS_LEFTTEXT = 0x20,};
enum MACRO_CCHDEVICENAME {CCHDEVICENAME = 32,CCHPAPERNAME = 64,};
enum MACRO_COMPLEXREGION {COMPLEXREGION = 3,};
enum MACRO_CTLDATALENGTH {CTLDATALENGTH = 255,};
enum MACRO_DRIVERVERSION {DRIVERVERSION = 0,TECHNOLOGY = 2,HORZSIZE = 4,};
enum MACRO_ENUMPAPERBINS {ENUMPAPERBINS = 31,SETDIBSCALING = 32,};
enum MACRO_GETCOLORTABLE {GETCOLORTABLE = 5,};
enum MACRO_GETTECHNOLOGY {GETTECHNOLOGY = 20,};
enum MACRO_HTBOTTOMRIGHT {HTBOTTOMRIGHT = 17,};
enum MACRO_HTTRANSPARENT {HTTRANSPARENT = -1,};
enum MACRO_REPLACEDLGORD {REPLACEDLGORD = 1541,};
enum MACRO_SETMITERLIMIT {SETMITERLIMIT = 23,};
enum MACRO_WM_CANCELMODE {WM_CANCELMODE = 0x1F,WM_TIMER = 0x113,};
enum MACRO_WM_CHOOSEFONT {WM_CHOOSEFONT_GETLOGFONT = 1025,};
enum MACRO_WM_COMMNOTIFY {WM_COMMNOTIFY = 0x44,};
enum MACRO_WM_FONTCHANGE {WM_FONTCHANGE = 0x1D,};
enum MACRO_WM_GETDLGCODE {WM_GETDLGCODE = 0x87,};
enum MACRO_WM_INITDIALOG {WM_INITDIALOG = 0x110,WM_NEXTDLGCTL = 0x28,WM_PARENTNOTIFY = 0x210,WM_ENTERIDLE = 0x121,};
enum MACRO_WM_SHOWWINDOW {WM_SHOWWINDOW = 0x18,};
enum MACRO_WM_SYSCOMMAND {WM_SYSCOMMAND = 0x112,};
enum MACRO_WM_VKEYTOITEM {WM_VKEYTOITEM = 0x2E,WM_CHARTOITEM = 0x2F,};
enum MACRO_WSAEADDRINUSE {WSAEADDRINUSE = 10048,};
enum MACRO_WSAECONNRESET {WSAECONNRESET = 10054,};
enum MACRO_WSAEOPNOTSUPP {WSAEOPNOTSUPP = 10045,};
enum MACRO_WSAEPROTOTYPE {WSAEPROTOTYPE = 10041,};
enum MACRO_cbDictPathMax {cbDictPathMax = 255,};
typedef struct tagMCI_ANIM_OPEN_PARMS MCI_ANIM_OPEN_PARMS;
typedef struct tagMCI_ANIM_PLAY_PARMS MCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS MCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS MCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMS MCI_OVLY_LOAD_PARMS;
typedef struct tagMCI_OVLY_OPEN_PARMS MCI_OVLY_OPEN_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS MCI_OVLY_RECT_PARMS;
typedef struct tagMCI_OVLY_SAVE_PARMS MCI_OVLY_SAVE_PARMS;
typedef struct tagMCI_VD_ESCAPE_PARMS MCI_VD_ESCAPE_PARMS;
typedef struct tagMCI_WAVE_OPEN_PARMS MCI_WAVE_OPEN_PARMS;
typedef struct tMIXERCONTROLDETAILS MIXERCONTROLDETAILS;
typedef struct tagOIFI OLEINPLACEFRAMEINFO;
typedef struct tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS;
typedef struct tagCLIENTCREATESTRUCT CLIENTCREATESTRUCT;
typedef struct tagHARDWAREHOOKSTRUCT HARDWAREHOOKSTRUCT;
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
typedef struct tagFMS_GETDRIVEINFO *LPFMS_GETDRIVEINFO;
typedef struct tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
typedef IOleItemContainer *LPOLEITEMCONTAINER;
typedef IParseDisplayName *LPPARSEDISPLAYNAME;
enum MACRO_ACTIVEOBJECT {ACTIVEOBJECT_STRONG = 0x0,ACTIVEOBJECT_WEAK = 0x1,};
enum MACRO_BLACKONWHITE {BLACKONWHITE = 1,WHITEONBLACK = 2,};
enum MACRO_CLASSFACTORY {CLASSFACTORY_E_FIRST = 0x110,CLASSFACTORY_E_LAST = 0x11F,CLASSFACTORY_S_FIRST = 0x110,CLASSFACTORY_S_LAST = 0x11F,};
enum MACRO_COLORONCOLOR {COLORONCOLOR = 3,};
enum MACRO_CTLMSGOFFSET {CTLMSGOFFSET = 3569,};
enum MACRO_ENABLEDUPLEX {ENABLEDUPLEX = 28,};
enum MACRO_ENUM_MINIMUM {ENUM_MINIMUM = 1,ENUM_MAXIMUM = 4096,};
enum MACRO_GETTECHNOLGY {GETTECHNOLGY = 20,};
enum MACRO_HWND_DESKTOP {HWND_DESKTOP = 0,};
enum MACRO_IMPLTYPEFLAG {IMPLTYPEFLAG_FDEFAULT = 0x1,IMPLTYPEFLAG_FSOURCE = 0x2,IMPLTYPEFLAG_FRESTRICTED = 0x4,};
enum MACRO_SETCOPYCOUNT {SETCOPYCOUNT = 17,};
enum MACRO_SETKERNTRACK {SETKERNTRACK = 770,};
enum MACRO_SIZEZOOMSHOW {SIZEZOOMSHOW = 3,SIZEZOOMHIDE = 4,};
enum MACRO_WM_DLGBORDER {WM_DLGBORDER = 4591,};
enum MACRO_WM_MDICREATE {WM_MDICREATE = 0x220,WM_MDIDESTROY = 0x221,WM_MDIACTIVATE = 0x222,WM_MDIRESTORE = 0x223,WM_MDINEXT = 0x224,WM_MDIMAXIMIZE = 0x225,WM_MDITILE = 0x226,WM_MDICASCADE = 0x227,WM_MDIICONARRANGE = 0x228,WM_MDIGETACTIVE = 0x229,WM_MDISETMENU = 0x230,};
enum MACRO_WM_MOUSEMOVE {WM_MOUSEMOVE = 0x200,WM_LBUTTONDOWN = 0x201,WM_LBUTTONUP = 0x202,WM_LBUTTONDBLCLK = 0x203,WM_RBUTTONDOWN = 0x204,WM_RBUTTONUP = 0x205,WM_RBUTTONDBLCLK = 0x206,WM_MBUTTONDOWN = 0x207,WM_MBUTTONUP = 0x208,WM_MBUTTONDBLCLK = 0x209,WM_MOUSEFIRST = 0x200,WM_MOUSELAST = 0x209,};
enum MACRO_WM_NCHITTEST {WM_NCHITTEST = 0x84,};
enum MACRO_WM_QUERYOPEN {WM_QUERYOPEN = 0x13,WM_CLOSE = 0x10,WM_GETMINMAXINFO = 0x24,};
enum MACRO_WM_QUEUESYNC {WM_QUEUESYNC = 0x23,};
enum MACRO_WM_SETREDRAW {WM_SETREDRAW = 0xB,WM_ENABLE = 0xA,WM_SETTEXT = 0xC,WM_GETTEXT = 0xD,WM_GETTEXTLENGTH = 0xE,};
enum MACRO_WSAEHOSTDOWN {WSAEHOSTDOWN = 10064,};
enum MACRO_WSAENETRESET {WSAENETRESET = 10052,};
enum MACRO_WSAENOTEMPTY {WSAENOTEMPTY = 10066,};
enum MACRO_WSAESHUTDOWN {WSAESHUTDOWN = 10058,};
enum MACRO_WSAETIMEDOUT {WSAETIMEDOUT = 10060,};
enum MACRO__HEAPCORRUPT {_HEAPCORRUPT = -1,};
typedef struct tagMCI_WAVE_SET_PARMS MCI_WAVE_SET_PARMS;
typedef struct tagOleMenuGroupWidths OLEMENUGROUPWIDTHS;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS;
typedef struct tMIXERLINECONTROLS *PMIXERLINECONTROLS;
typedef struct tagCBTACTIVATESTRUCT CBTACTIVATESTRUCT;
typedef struct tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
struct IDataAdviseHolder {struct IDataAdviseHolderVtbl *lpVtbl;};
struct IOleInPlaceObject {struct IOleInPlaceObjectVtbl *lpVtbl;};
struct IOleItemContainer {struct IOleItemContainerVtbl *lpVtbl;};
struct IParseDisplayName {struct IParseDisplayNameVtbl *lpVtbl;};
struct ISupportErrorInfo {struct ISupportErrorInfoVtbl *lpVtbl;};
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;
typedef struct tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS;
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
typedef IOleCacheControl *LPOLECACHECONTROL;
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef struct tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;
enum MACRO_BITSPERBYTE {BITSPERBYTE = 8,};
enum MACRO_CONVERT10_E {CONVERT10_E_OLESTREAM_GET = 448,CONVERT10_E_OLESTREAM_PUT = 449,CONVERT10_E_OLESTREAM_FMT = 450,CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = 451,CONVERT10_E_STG_FMT = 452,CONVERT10_E_STG_NO_STD_STREAM = 453,CONVERT10_E_STG_DIB_TO_BITMAP = 454,CONVERT10_S_NO_PRESENTATION = 448,};
enum MACRO_EPSPRINTING {EPSPRINTING = 33,};
enum MACRO_FILEOPENORD {FILEOPENORD = 1536,};
enum MACRO_FLUSHOUTPUT {FLUSHOUTPUT = 6,};
enum MACRO_GCL_WNDPROC {GCL_WNDPROC = -24,};
enum MACRO_GETFACENAME {GETFACENAME = 513,};
enum MACRO_HTMAXBUTTON {HTMAXBUTTON = 9,};
enum MACRO_MOUSETRAILS {MOUSETRAILS = 39,GETEXTENDEDTEXTMETRICS = 256,};
enum MACRO_MSGF_DDEMGR {MSGF_DDEMGR = 0x8001,};
enum MACRO_NONZEROLHND {NONZEROLHND = 2,};
enum MACRO_NONZEROLPTR {NONZEROLPTR = 0,};
enum MACRO_NOTSRCERASE {NOTSRCERASE = 0xA6,};
enum MACRO_NUMRESERVED {NUMRESERVED = 106,};
enum MACRO_PASSTHROUGH {PASSTHROUGH = 19,};
enum MACRO_PC_RESERVED {PC_RESERVED = 0x1,PC_EXPLICIT = 0x2,PC_NOCOLLAPSE = 0x4,};
enum MACRO_PDEVICESIZE {PDEVICESIZE = 26,};
enum MACRO_PRINTDLGORD {PRINTDLGORD = 1538,};
enum MACRO_RC_WDEFAULT {RC_WDEFAULT = 0xFFFF,RC_LDEFAULT = 0xFFFF,RC_WDEFAULTFLAGS = 0x8000,RC_LDEFAULTFLAGS = 0x0,};
enum MACRO_SETLINEJOIN {SETLINEJOIN = 22,};
enum MACRO_SIZEPALETTE {SIZEPALETTE = 104,};
enum MACRO_TRANSPARENT {TRANSPARENT = 1,OPAQUE = 2,};
enum MACRO_WH_HARDWARE {WH_HARDWARE = 8,WH_SHELL = 10,};
enum MACRO_WH_KEYBOARD {WH_KEYBOARD = 2,};
enum MACRO_WM_ACTIVATE {WM_ACTIVATE = 0x6,WM_ACTIVATEAPP = 0x1C,WM_NCACTIVATE = 0x86,WM_SETFOCUS = 0x7,WM_KILLFOCUS = 0x8,WM_KEYDOWN = 0x100,WM_KEYUP = 0x101,WM_CHAR = 0x102,WM_DEADCHAR = 0x103,WM_SYSKEYDOWN = 0x104,WM_SYSKEYUP = 0x105,WM_SYSCHAR = 0x106,WM_SYSDEADCHAR = 0x107,WM_KEYFIRST = 0x100,WM_KEYLAST = 0x108,};
enum MACRO_WM_CTLCOLOR {WM_CTLCOLOR = 0x19,};
enum MACRO_WM_DRAWITEM {WM_DRAWITEM = 0x2B,WM_MEASUREITEM = 0x2C,WM_DELETEITEM = 0x2D,WM_COMPAREITEM = 0x39,};
enum MACRO_WM_INITMENU {WM_INITMENU = 0x116,WM_INITMENUPOPUP = 0x117,WM_MENUSELECT = 0x11F,WM_MENUCHAR = 0x120,WM_COMMAND = 0x111,WM_HSCROLL = 0x114,WM_VSCROLL = 0x115,};
enum MACRO_WM_RCRESULT {WM_RCRESULT = 897,WM_HOOKRCRESULT = 898,WM_GLOBALRCCHANGE = 899,WM_SKB = 900,WM_HEDITCTL = 901,};
enum MACRO_WSAEALREADY {WSAEALREADY = 10037,};
enum MACRO_WSAEMSGSIZE {WSAEMSGSIZE = 10040,};
enum MACRO_WSAENETDOWN {WSAENETDOWN = 10050,};
enum MACRO_WSAENOTCONN {WSAENOTCONN = 10057,};
enum MACRO_WSAENOTSOCK {WSAENOTSOCK = 10038,};
enum MACRO_WSAEPROCLIM {WSAEPROCLIM = 10067,};
enum MACRO_cbRcUserMax {cbRcUserMax = 32,};
typedef struct tagMCI_GENERIC_PARMS MCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS MCI_SEQ_SET_PARMS;
typedef struct tagMCI_SYSINFO_PARMS MCI_SYSINFO_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS MCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS MCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
typedef struct tMIXERLINECONTROLS MIXERLINECONTROLS;
typedef struct tagNCCALCSIZE_PARAMS NCCALCSIZE_PARAMS;
typedef struct DRVCONFIGINFOEX  *NPDRVCONFIGINFOEX;
typedef struct tagOUTLINETEXTMETRIC OUTLINETEXTMETRIC;
typedef struct tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct tagRASTERIZER_STATUS RASTERIZER_STATUS;
struct tagSAFEARRAYBOUND {unsigned int cElements;int lLbound;};
typedef struct tagBITMAPCOREHEADER BITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER BITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;
typedef struct tagDELETEITEMSTRUCT DELETEITEMSTRUCT;
typedef struct tagDRIVERINFOSTRUCT DRIVERINFOSTRUCT;
typedef struct tagFMS_GETDRIVEINFO FMS_GETDRIVEINFO;
struct ICreateErrorInfo {struct ICreateErrorInfoVtbl *lpVtbl;};
struct IOleAdviseHolder {struct IOleAdviseHolderVtbl *lpVtbl;};
struct IOleCacheControl {struct IOleCacheControlVtbl *lpVtbl;};
struct IOleInPlaceFrame {struct IOleInPlaceFrameVtbl *lpVtbl;};
typedef ICreateTypeInfo *LPCREATETYPEINFO;
typedef struct tagFMS_GETFILESEL *LPFMS_GETFILESEL;
typedef struct tagMCI_INFO_PARMS *LPMCI_INFO_PARMS;
typedef struct tagMCI_LOAD_PARMS *LPMCI_LOAD_PARMS;
typedef struct tagMCI_OPEN_PARMS *LPMCI_OPEN_PARMS;
typedef struct tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS;
typedef struct tagMCI_SAVE_PARMS *LPMCI_SAVE_PARMS;
typedef struct tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS;
typedef IOleInPlaceSite *LPOLEINPLACESITE;
typedef IPersistStorage *LPPERSISTSTORAGE;
typedef IRunnableObject *LPRUNNABLEOBJECT;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef IStdMarshalInfo *LPSTDMARSHALINFO;
enum MACRO_CBN_ENDREC {CBN_ENDREC = 16,CBN_DELAYEDRECOGFAIL = 17,CBN_RCRESULT = 18,};
enum MACRO_CCSTYLEORD {CCSTYLEORD = 3,CCFLAGSORD = 4,};
enum MACRO_CC_RGBINIT {CC_RGBINIT = 0x1,CC_FULLOPEN = 0x2,CC_PREVENTFULLOPEN = 0x4,CC_SHOWHELP = 0x8,CC_ENABLEHOOK = 0x10,CC_ENABLETEMPLATE = 0x20,CC_ENABLETEMPLATEHANDLE = 0x40,};
enum MACRO_CLIENTSITE {CLIENTSITE_E_FIRST = 0x190,CLIENTSITE_E_LAST = 0x19F,CLIENTSITE_S_FIRST = 0x190,CLIENTSITE_S_LAST = 0x19F,};
enum MACRO_CP_WINANSI {CP_WINANSI = 1004,};
enum MACRO_DEVICEDATA {DEVICEDATA = 19,};
enum MACRO_DMAXPOWTWO {DMAXPOWTWO = 0x3FF,};
enum MACRO_DRAGDROP_E {DRAGDROP_E_NOTREGISTERED = 256,DRAGDROP_E_ALREADYREGISTERED = 257,DRAGDROP_E_INVALIDHWND = 258,DRAGDROP_S_DROP = 256,DRAGDROP_S_CANCEL = 257,DRAGDROP_S_USEDEFAULTCURSORS = 258,};
enum MACRO_DROPEFFECT {DROPEFFECT_NONE = 0,DROPEFFECT_COPY = 1,DROPEFFECT_MOVE = 2,DROPEFFECT_LINK = 4,DROPEFFECT_SCROLL = 0,};
enum MACRO_FINDDLGORD {FINDDLGORD = 1540,};
enum MACRO_FMAXPOWTWO {FMAXPOWTWO = 0x7F,};
enum MACRO_FONTDLGORD {FONTDLGORD = 1542,};
enum MACRO_GETBASEIRQ {GETBASEIRQ = 10,};
enum MACRO_HC_GETNEXT {HC_GETNEXT = 1,HC_SKIP = 2,HC_NOREMOVE = 3,HC_NOREM = 3,HC_SYSMODALON = 4,HC_SYSMODALOFF = 5,};
enum MACRO_HTTOPRIGHT {HTTOPRIGHT = 14,};
enum MACRO_LOGPIXELSX {LOGPIXELSX = 88,};
enum MACRO_LOGPIXELSY {LOGPIXELSY = 90,};
enum MACRO_MARKPARITY {MARKPARITY = 3,SPACEPARITY = 4,};
enum MACRO_MAXHOTSPOT {MAXHOTSPOT = 8,};
enum MACRO_MERGEPAINT {MERGEPAINT = 0x226,};
enum MACRO_NOTSRCCOPY {NOTSRCCOPY = 0x8,};
enum MACRO_NUMMARKERS {NUMMARKERS = 20,};
enum MACRO_ONESTOPBIT {ONESTOPBIT = 0,ONE5STOPBITS = 1,TWOSTOPBITS = 2,};
enum MACRO_POSTSCRIPT {POSTSCRIPT_DATA = 37,POSTSCRIPT_IGNORE = 38,};
enum MACRO_RASTERCAPS {RASTERCAPS = 38,};
enum MACRO_READ_WRITE {READ_WRITE = 2,};
enum MACRO_SETCHARSET {SETCHARSET = 772,GETSETSCREENPARAMS = 3072,};
enum MACRO_SETLINECAP {SETLINECAP = 21,};
enum MACRO_SIZENORMAL {SIZENORMAL = 0,SIZEICONIC = 1,SIZEFULLSCREEN = 2,};
enum MACRO_WM_NCPAINT {WM_NCPAINT = 0x85,WM_NCCALCSIZE = 0x83,};
enum MACRO_WM_SETFONT {WM_SETFONT = 0x30,WM_GETFONT = 0x31,};
enum MACRO_WSABASEERR {WSABASEERR = 10000,};
enum MACRO_WSAEDISCON {WSAEDISCON = 10101,};
enum MACRO_WSAEISCONN {WSAEISCONN = 10056,};
enum MACRO_WSAENOBUFS {WSAENOBUFS = 10055,};
enum MACRO_WSAEREMOTE {WSAEREMOTE = 10071,};
enum MACRO__FREEENTRY {_FREEENTRY = 3,_USEDENTRY = 4,};
enum MACRO__HEAPEMPTY {_HEAPEMPTY = 1,_HEAPOK = 2,};
typedef struct tagMCI_RECORD_PARMS MCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS MCI_STATUS_PARMS;
typedef struct _549C1D5CD1C453772D3DFDF07CAC3EA1 MENUITEMTEMPLATE;
typedef struct tagNFYLOGPARAMERROR NFYLOGPARAMERROR;
typedef struct tagOBJECTDESCRIPTOR OBJECTDESCRIPTOR;
typedef struct DRVCONFIGINFOEX *PDRVCONFIGINFOEX;
typedef struct tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS;
typedef struct tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
enum WING_DITHER_TYPE {WING_DISPERSED_4x4 = 0x0,WING_DISPERSED_8x8 = 0x1,WING_CLUSTERED_4x4 = 0x2,};
enum tagOLEGETMONIKER {OLEGETMONIKER_ONLYIFTHERE = 0x1,OLEGETMONIKER_FORCEASSIGN = 0x2,OLEGETMONIKER_UNASSIGN = 0x3,OLEGETMONIKER_TEMPFORUSER = 0x4,};
enum tagOLEVERBATTRIB {OLEVERBATTRIB_NEVERDIRTIES = 0x1,OLEVERBATTRIB_ONCONTAINERMENU = 0x2,};
enum tagUSERCLASSTYPE {USERCLASSTYPE_FULL = 0x1,USERCLASSTYPE_SHORT = 0x2,USERCLASSTYPE_APPNAME = 0x3,};
struct ICreateTypeInfo {struct ICreateTypeInfoVtbl *lpVtbl;};
struct IOleInPlaceSite {struct IOleInPlaceSiteVtbl *lpVtbl;};
struct IPersistStorage {struct IPersistStorageVtbl *lpVtbl;};
struct IRunnableObject {struct IRunnableObjectVtbl *lpVtbl;};
struct IStdMarshalInfo {struct IStdMarshalInfoVtbl *lpVtbl;};
typedef ICreateTypeLib *LPCREATETYPELIB;
typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct tagINTERFACEDATA *LPINTERFACEDATA;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
typedef struct tagMCI_SET_PARMS *LPMCI_SET_PARMS;
typedef IMessageFilter *LPMESSAGEFILTER;
typedef IOleClientSite *LPOLECLIENTSITE;
typedef struct pcmwaveformat_tag *LPPCMWAVEFORMAT;
typedef struct tagPENDATAHEADER *LPPENDATAHEADER;
typedef IPersistStream *LPPERSISTSTREAM;
enum MACRO_ALTERNATE {ALTERNATE = 1,WINDING = 2,};
enum MACRO_BITSPIXEL {BITSPIXEL = 12,};
enum MACRO_BLACKNESS {BLACKNESS = 0x42,};
enum MACRO_CBR_BLOCK {CBR_BLOCK = 0xFFFF,};
enum MACRO_CCINFOORD {CCINFOORD = 2,};
enum MACRO_CLIPBRD_E {CLIPBRD_E_CANT_OPEN = 464,CLIPBRD_E_CANT_EMPTY = 465,CLIPBRD_E_CANT_SET = 466,CLIPBRD_E_BAD_DATA = 467,CLIPBRD_E_CANT_CLOSE = 468,};
enum MACRO_CONVERT10 {CONVERT10_E_FIRST = 0x1C0,CONVERT10_E_LAST = 0x1CF,CONVERT10_S_FIRST = 0x1C0,CONVERT10_S_LAST = 0x1CF,};
enum MACRO_CURVECAPS {CURVECAPS = 28,};
enum MACRO_DC_FIELDS {DC_FIELDS = 1,DC_PAPERS = 2,DC_PAPERSIZE = 3,DC_MINEXTENT = 4,DC_MAXEXTENT = 5,DC_BINS = 6,DC_DUPLEX = 7,DC_SIZE = 8,DC_EXTRA = 9,DC_VERSION = 10,DC_DRIVER = 11,DC_BINNAMES = 12,DC_ENUMRESOLUTIONS = 13,DC_FILEDEPENDENCIES = 14,DC_TRUETYPE = 15,DC_PAPERNAMES = 16,DC_ORIENTATION = 17,DC_COPIES = 18,};
enum MACRO_DM_UPDATE {DM_UPDATE = 1,DM_COPY = 2,DM_PROMPT = 4,DM_MODIFY = 8,DM_IN_BUFFER = 8,DM_IN_PROMPT = 4,DM_OUT_BUFFER = 2,DM_OUT_DEFAULT = 1,};
enum MACRO_DRAFTMODE {DRAFTMODE = 7,QUERYESCSUPPORT = 8,};
enum MACRO_DSTINVERT {DSTINVERT = 0x9,};
enum MACRO_GCW_STYLE {GCW_STYLE = -26,GCW_ATOM = -32,};
enum MACRO_GETMAXCOM {GETMAXCOM = 9,};
enum MACRO_GETMAXLPT {GETMAXLPT = 8,};
enum MACRO_GWL_STYLE {GWL_STYLE = -16,GWL_EXSTYLE = -20,};
enum MACRO_HIDDENBIT {HIDDENBIT = 1,};
enum MACRO_HINSTANCE {HINSTANCE_ERROR = 32,};
enum MACRO_HTGROWBOX {HTGROWBOX = 4,HTREDUCE = 8,};
enum MACRO_HTHSCROLL {HTHSCROLL = 6,};
enum MACRO_HTNOWHERE {HTNOWHERE = 0,HTCLIENT = 1,HTCAPTION = 2,};
enum MACRO_HTSYSMENU {HTSYSMENU = 3,HTSIZE = 4,};
enum MACRO_HTTOPLEFT {HTTOPLEFT = 13,};
enum MACRO_HTVSCROLL {HTVSCROLL = 7,HTMINBUTTON = 8,};
enum MACRO_INPLACE_E {INPLACE_E_NOTUNDOABLE = 416,INPLACE_E_NOTOOLSPACE = 417,INPLACE_S_TRUNCATED = 416,INPLACE_DEFBORDERWIDTH = 4,};
enum MACRO_MERGECOPY {MERGECOPY = 0xCA,};
enum MACRO_MFCOMMENT {MFCOMMENT = 15,GETPENWIDTH = 16,};
enum MACRO_NOT_FOUND {WSAHOST_NOT_FOUND = 11001,HOST_NOT_FOUND = 11001,};
enum MACRO_NUMCOLORS {NUMCOLORS = 24,};
enum MACRO_PATINVERT {PATINVERT = 0x49,};
enum MACRO_SIMULATED {SIMULATED_FONTTYPE = 0x8000,PRINTER_FONTTYPE = 0x4000,SCREEN_FONTTYPE = 0x2000,BOLD_FONTTYPE = 0x100,ITALIC_FONTTYPE = 0x200,REGULAR_FONTTYPE = 0x400,};
enum MACRO_SOMAXCONN {SOMAXCONN = 5,};
enum MACRO_SRCINVERT {SRCINVERT = 0x46,};
enum MACRO_TRANSFORM {TRANSFORM_CTM = 4107,};
enum MACRO_UPDFCACHE {UPDFCACHE_NODATACACHE = 0x1,UPDFCACHE_ONSAVECACHE = 0x2,UPDFCACHE_ONSTOPCACHE = 0x4,UPDFCACHE_NORMALCACHE = 0x8,UPDFCACHE_IFBLANK = 0x10,UPDFCACHE_ONLYIFBLANK = 0x0,UPDFCACHE_IFBLANKORONSAVECACHE = 0x12,UPDFCACHE_ALL = 0xFFFF,UPDFCACHE_ALLBUTNODATACACHE = 0xFFFE,};
enum MACRO_WHITENESS {WHITENESS = 0x62,};
enum MACRO_WILDCARDS {WILDCARDS = 0x1,EXTENSION = 0x2,FILENAME = 0x4,DIRECTORY = 0x8,DRIVE = 0x10,};
enum MACRO_WM_CREATE {WM_CREATE = 0x1,WM_NCCREATE = 0x81,WM_DESTROY = 0x2,WM_NCDESTROY = 0x82,};
enum MACRO_WSAEACCES {WSAEACCES = 10013,};
enum MACRO_WSAEDQUOT {WSAEDQUOT = 10069,};
enum MACRO_WSAEFAULT {WSAEFAULT = 10014,};
enum MACRO_WSAEINVAL {WSAEINVAL = 10022,};
enum MACRO_WSAEMFILE {WSAEMFILE = 10024,};
enum MACRO_WSAESTALE {WSAESTALE = 10070,};
enum MACRO_WSAEUSERS {WSAEUSERS = 10068,};
enum MACRO__BADVALUE {_BADVALUE = -3,};
enum MACRO__NOCURSOR {_NOCURSOR = 0,_SOLIDCURSOR = 1,_NORMALCURSOR = 2,BLINK = 128,};
typedef struct tagMCI_BREAK_PARMS MCI_BREAK_PARMS;
typedef struct tagMDICREATESTRUCT MDICREATESTRUCT;
typedef struct tagMOUSEHOOKSTRUCT MOUSEHOOKSTRUCT;
typedef struct pcmwaveformat_tag  *NPPCMWAVEFORMAT;
typedef struct tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS;
typedef struct _ULARGE_INTEGER *PULARGE_INTEGER;
typedef struct tagSTACKTRACEENTRY STACKTRACEENTRY;
typedef struct tagTTPOLYGONHEADER TTPOLYGONHEADER;
typedef struct tagWINDOWPLACEMENT WINDOWPLACEMENT;
enum tagDISCARDCACHE {DISCARDCACHE_SAVEIFDIRTY = 0x0,DISCARDCACHE_NOSAVE = 0x1,};
struct tagSCREENPARAMS {int angle;int frequency;};
typedef struct tagBANDINFOSTRUCT BANDINFOSTRUCT;
typedef struct tagBITMAPCOREINFO BITMAPCOREINFO;
typedef struct tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;
typedef struct tagFMS_GETFILESEL FMS_GETFILESEL;
struct ICreateTypeLib {struct ICreateTypeLibVtbl *lpVtbl;};
struct IEnumFORMATETC {struct IEnumFORMATETCVtbl *lpVtbl;};
struct IMessageFilter {struct IMessageFilterVtbl *lpVtbl;};
struct IOleClientSite {struct IOleClientSiteVtbl *lpVtbl;};
struct IPersistStream {struct IPersistStreamVtbl *lpVtbl;};
typedef struct channel_caps_tag *LPCHANNEL_CAPS;
typedef IClassFactory *LPCLASSFACTORY;
typedef struct _548B30A8C808F6625678FF0EC6B59BB3 *LPCTLCLASSLIST;
typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef struct tagGLYPHMETRICS *LPGLYPHMETRICS;
typedef struct tMIXERCONTROL *LPMIXERCONTROL;
typedef IOleContainer *LPOLECONTAINER;
typedef struct sockaddr_vns *LPSOCKADDR_VNS;
typedef struct tWAVEFORMATEX *LPWAVEFORMATEX;
enum MACRO_ABSOLUTE {ABSOLUTE = 1,RELATIVE = 2,};
enum MACRO_APPCLASS {APPCLASS_STANDARD = 0x0,APPCLASS_MASK = 0xF,};
enum MACRO_ASPECTXY {ASPECTXY = 44,};
enum MACRO_BANDINFO {BANDINFO = 24,};
enum MACRO_BITPENUP {BITPENUP = 0x8000,};
enum MACRO_CLIPCAPS {CLIPCAPS = 36,};
enum MACRO_COLORRES {COLORRES = 108,};
enum MACRO_CTLCLASS {CTLCLASS = 20,};
enum MACRO_CTLCOLOR {CTLCOLOR_MSGBOX = 0,CTLCOLOR_EDIT = 1,CTLCOLOR_LISTBOX = 2,CTLCOLOR_BTN = 3,CTLCOLOR_DLG = 4,CTLCOLOR_SCROLLBAR = 5,CTLCOLOR_STATIC = 6,};
enum MACRO_CTLDESCR {CTLDESCR = 22,};
enum MACRO_CTLTITLE {CTLTITLE = 94,};
enum MACRO_CTLTYPES {CTLTYPES = 12,};
enum MACRO_DISPATCH {DISPATCH_METHOD = 0x1,DISPATCH_PROPERTYGET = 0x2,DISPATCH_PROPERTYPUT = 0x4,DISPATCH_PROPERTYPUTREF = 0x8,};
enum MACRO_DMORIENT {DMORIENT_PORTRAIT = 1,DMORIENT_LANDSCAPE = 2,};
enum MACRO_DRAGDROP {DRAGDROP_E_FIRST = 0x100,DRAGDROP_E_LAST = 0x10F,DRAGDROP_S_FIRST = 0x100,DRAGDROP_S_LAST = 0x10F,};
enum MACRO_FACILITY {FACILITY_NULL = 0x0,FACILITY_RPC = 0x1,FACILITY_DISPATCH = 0x2,FACILITY_STORAGE = 0x3,FACILITY_ITF = 0x4,};
enum MACRO_FILENAME {FILENAME_MAX = 80,MB_CUR_MAX = 1,RAND_MAX = 32767,};
enum MACRO_FONTTYPE {RASTER_FONTTYPE = 0x1,DEVICE_FONTTYPE = 0x2,TRUETYPE_FONTTYPE = 0x4,};
enum MACRO_HTBORDER {HTBORDER = 18,};
enum MACRO_HTBOTTOM {HTBOTTOM = 15,HTBOTTOMLEFT = 16,};
enum MACRO_HWND_TOP {HWND_TOP = 0,HWND_BOTTOM = 1,HWND_TOPMOST = -1,HWND_NOTOPMOST = -2,};
enum MACRO_IDIGNORE {IDIGNORE = 5,};
enum MACRO_INKWIDTH {INKWIDTH_MINIMUM = 0,INKWIDTH_MAXIMUM = 15,};
enum MACRO_ISOPROTO {ISOPROTO_TP0 = 25,ISOPROTO_TP1 = 26,ISOPROTO_TP2 = 27,ISOPROTO_TP3 = 28,ISOPROTO_TP4 = 29,ISOPROTO_TP = 29,ISOPROTO_CLTP = 30,ISOPROTO_CLNP = 31,ISOPROTO_X25 = 32,ISOPROTO_INACT_NL = 33,ISOPROTO_ESIS = 34,ISOPROTO_INTRAISIS = 35,};
enum MACRO_LF_FIXED {LF_FIXED = 1,LF_FREE = 2,LF_MOVEABLE = 4,};
enum MACRO_LINECAPS {LINECAPS = 30,POLYGONALCAPS = 32,};
enum MACRO_LPDFNULL {LPDFNULL = 0,};
enum MACRO_MAXDRIVE {MAXDRIVE = 3,MAXPATH = 80,};
enum MACRO_MAXSHORT {MAXSHORT = 0x7FFF,};
enum MACRO_MAX_DATA {MAX_DATA = 11,MAX_PATH = 255,MAX_MODULE_NAME = 9,MAX_CLASSNAME = 255,};
enum MACRO_NEWFRAME {NEWFRAME = 1,};
enum MACRO_NEXTBAND {NEXTBAND = 3,SETCOLORTABLE = 4,};
enum MACRO_NOPARITY {NOPARITY = 0,ODDPARITY = 1,EVENPARITY = 2,};
enum MACRO_NUMFONTS {NUMFONTS = 22,};
enum MACRO_OLEIVERB {OLEIVERB_PRIMARY = 0,OLEIVERB_SHOW = -1,OLEIVERB_OPEN = -2,OLEIVERB_HIDE = -3,OLEIVERB_UIACTIVATE = -4,OLEIVERB_INPLACEACTIVATE = -5,OLEIVERB_DISCARDUNDOSTATE = -6,};
enum MACRO_OLEOBJ_E {OLEOBJ_E_NOVERBS = 384,OLEOBJ_E_INVALIDVERB = 385,OLEOBJ_S_INVALIDVERB = 384,OLEOBJ_S_CANNOT_DOVERB_NOW = 385,OLEOBJ_S_INVALIDHWND = 386,};
enum MACRO_PATPAINT {PATPAINT = 0xA09,};
enum MACRO_RECOVERY {WSANO_RECOVERY = 11003,NO_RECOVERY = 11003,};
enum MACRO_RESETDEV {RESETDEV = 7,LPTx = 128,};
enum MACRO_ROTFLAGS {ROTFLAGS_REGISTRATIONKEEPSALIVE = 1,};
enum MACRO_SET_CLIP {SET_CLIP_BOX = 4108,SET_BOUNDS = 4109,};
enum MACRO_SEVERITY {SEVERITY_SUCCESS = 0,SEVERITY_ERROR = 1,};
enum MACRO_SRCERASE {SRCERASE = 0x328,};
enum MACRO_SRCPAINT {SRCPAINT = 0x86,};
enum MACRO_TEXTCAPS {TEXTCAPS = 34,};
enum MACRO_VERTSIZE {VERTSIZE = 6,HORZRES = 8,};
enum MACRO_VNSPROTO {VNSPROTO_IPC = 1,VNSPROTO_RELIABLE_IPC = 2,VNSPROTO_SPP = 3,};
enum MACRO_WH_DEBUG {WH_DEBUG = 9,};
enum MACRO_WH_MOUSE {WH_MOUSE = 7,};
enum MACRO_WM_PAINT {WM_PAINT = 0xF,WM_ERASEBKGND = 0x14,WM_ICONERASEBKGND = 0x27,};
enum MACRO_WSAEBADF {WSAEBADF = 10009,};
enum MACRO_WSAEINTR {WSAEINTR = 10004,};
enum MACRO_WSAELOOP {WSAELOOP = 10062,};
enum MACRO__BADNODE {_BADNODE = -2,};
enum MACRO__HEAPEND {_HEAPEND = 5,};
enum MACRO_ctlFirst {ctlFirst = 0x400,};
enum MACRO_iSycNull {iSycNull = -1,};
typedef struct tagMCI_INFO_PARMS MCI_INFO_PARMS;
typedef struct tagMCI_LOAD_PARMS MCI_LOAD_PARMS;
typedef struct tagMCI_OPEN_PARMS MCI_OPEN_PARMS;
typedef struct tagMCI_PLAY_PARMS MCI_PLAY_PARMS;
typedef struct tagMCI_SAVE_PARMS MCI_SAVE_PARMS;
typedef struct tagMCI_SEEK_PARMS MCI_SEEK_PARMS;
typedef struct tWAVEFORMATEX  *NPWAVEFORMATEX;
typedef struct _LARGE_INTEGER *PLARGE_INTEGER;
typedef struct tagMCI_SET_PARMS *PMCI_SET_PARMS;
typedef struct pcmwaveformat_tag *PPCMWAVEFORMAT;
typedef struct tagSAFEARRAYBOUND SAFEARRAYBOUND;
typedef struct _ULARGE_INTEGER ULARGE_INTEGER;
enum tagOLELINKBIND {OLELINKBIND_EVENIFCLASSDIFF = 0x1,};
enum tagPENDINGTYPE {PENDINGTYPE_TOPLEVEL = 0x1,PENDINGTYPE_NESTED = 0x2,};
enum tagSTREAM_SEEK {STREAM_SEEK_SET = 0x0,STREAM_SEEK_CUR = 0x1,STREAM_SEEK_END = 0x2,};
typedef struct tagCBT_CREATEWND CBT_CREATEWND;
typedef struct tagDEBUGHOOKINFO DEBUGHOOKINFO;
typedef struct tagDRVCONFIGINFO DRVCONFIGINFO;
struct IClassFactory {struct IClassFactoryVtbl *lpVtbl;};
struct IEnumSTATDATA {struct IEnumSTATDATAVtbl *lpVtbl;};
typedef struct tagINTERFACEDATA INTERFACEDATA;
typedef struct tagINTERFACEINFO INTERFACEINFO;
struct IOleContainer {struct IOleContainerVtbl *lpVtbl;};
typedef struct _LARGE_INTEGER LARGE_INTEGER;
typedef IAdviseSink2 *LPADVISESINK2;
typedef struct tagENUMLOGFONT *LPENUMLOGFONT;
typedef IEnumMoniker *LPENUMMONIKER;
typedef IEnumOLEVERB *LPENUMOLEVERB;
typedef IEnumSTATSTG *LPENUMSTATSTG;
typedef IEnumUnknown *LPENUMUNKNOWN;
typedef IEnumVARIANT *LPENUMVARIANT;
typedef struct tagKERNINGPAIR *LPKERNINGPAIR;
typedef struct midioutcaps_tag *LPMIDIOUTCAPS;
typedef IPersistFile *LPPERSISTFILE;
typedef IRootStorage *LPROOTSTORAGE;
typedef struct sockaddr_in *LPSOCKADDR_IN;
typedef struct sockaddr_nb *LPSOCKADDR_NB;
typedef struct sockaddr_tp *LPSOCKADDR_TP;
typedef struct tagTTPOLYCURVE *LPTTPOLYCURVE;
typedef IViewObject2 *LPVIEWOBJECT2;
typedef struct waveoutcaps_tag *LPWAVEOUTCAPS;
enum MACRO_ADDRESS {WSANO_ADDRESS = 11004,NO_ADDRESS = 11004,};
enum MACRO_ASPECTX {ASPECTX = 40,};
enum MACRO_ASPECTY {ASPECTY = 42,};
enum MACRO_CACHE_E {CACHE_E_NOCACHE_UPDATED = 368,CACHE_S_FORMATETC_NOTSUPPORTED = 368,CACHE_S_SAMECACHE = 369,CACHE_S_SOMECACHES_NOTUPDATED = 370,};
enum MACRO_CB_OKAY {CB_OKAY = 0,CB_ERR = -1,CB_ERRSPACE = -2,};
enum MACRO_CHARSET {ANSI_CHARSET = 0,DEFAULT_CHARSET = 1,SYMBOL_CHARSET = 2,SHIFTJIS_CHARSET = 128,HANGEUL_CHARSET = 129,CHINESEBIG5_CHARSET = 136,OEM_CHARSET = 255,};
enum MACRO_CLIPBRD {CLIPBRD_E_FIRST = 0x1D0,CLIPBRD_E_LAST = 0x1DF,CLIPBRD_S_FIRST = 0x1D0,CLIPBRD_S_LAST = 0x1DF,};
enum MACRO_DEFAULT {DEFAULT_PALETTE = 15,};
enum MACRO_DEXPLEN {DEXPLEN = 11,};
enum MACRO_DMAXEXP {DMAXEXP = 308,};
enum MACRO_DMCOLOR {DMCOLOR_MONOCHROME = 1,DMCOLOR_COLOR = 2,};
enum MACRO_DMINEXP {DMINEXP = -307,};
enum MACRO_DMPAPER {DMPAPER_LETTER = 1,DMPAPER_LETTERSMALL = 2,DMPAPER_TABLOID = 3,DMPAPER_LEDGER = 4,DMPAPER_LEGAL = 5,DMPAPER_STATEMENT = 6,DMPAPER_EXECUTIVE = 7,DMPAPER_A3 = 8,DMPAPER_A4 = 9,DMPAPER_A4SMALL = 10,DMPAPER_A5 = 11,DMPAPER_B4 = 12,DMPAPER_B5 = 13,DMPAPER_FOLIO = 14,DMPAPER_QUARTO = 15,DMPAPER_10X14 = 16,DMPAPER_11X17 = 17,DMPAPER_NOTE = 18,DMPAPER_ENV_9 = 19,DMPAPER_ENV_10 = 20,DMPAPER_ENV_11 = 21,DMPAPER_ENV_12 = 22,DMPAPER_ENV_14 = 23,DMPAPER_CSHEET = 24,DMPAPER_DSHEET = 25,DMPAPER_ESHEET = 26,DMPAPER_ENV_DL = 27,DMPAPER_ENV_C5 = 28,DMPAPER_ENV_C3 = 29,DMPAPER_ENV_C4 = 30,DMPAPER_ENV_C6 = 31,DMPAPER_ENV_C65 = 32,DMPAPER_ENV_B4 = 33,DMPAPER_ENV_B5 = 34,DMPAPER_ENV_B6 = 35,DMPAPER_ENV_ITALY = 36,DMPAPER_ENV_MONARCH = 37,DMPAPER_ENV_PERSONAL = 38,DMPAPER_FANFOLD_US = 39,DMPAPER_FANFOLD_STD_GERMAN = 40,DMPAPER_FANFOLD_LGL_GERMAN = 41,DMPAPER_LAST = 41,DMPAPER_USER = 256,};
enum MACRO_DSIGNIF {DSIGNIF = 53,};
enum MACRO_EMBDHLP {EMBDHLP_INPROC_HANDLER = 0x0,EMBDHLP_INPROC_SERVER = 0x1,EMBDHLP_CREATENOW = 0x0,EMBDHLP_DELAYCREATE = 0x0,};
enum MACRO_EXPBASE {EXPBASE = 2,};
enum MACRO_FD_READ {FD_READ = 0x1,FD_WRITE = 0x2,FD_OOB = 0x4,FD_ACCEPT = 0x8,FD_CONNECT = 0x10,FD_CLOSE = 0x20,};
enum MACRO_FEXPLEN {FEXPLEN = 8,};
enum MACRO_FMAXEXP {FMAXEXP = 38,};
enum MACRO_FMEVENT {FMEVENT_LOAD = 100,FMEVENT_UNLOAD = 101,FMEVENT_INITMENU = 102,FMEVENT_USER_REFRESH = 103,FMEVENT_SELCHANGE = 104,};
enum MACRO_FMFOCUS {FMFOCUS_DIR = 1,FMFOCUS_TREE = 2,FMFOCUS_DRIVES = 3,FMFOCUS_SEARCH = 4,};
enum MACRO_FMINEXP {FMINEXP = -37,};
enum MACRO_FSIGNIF {FSIGNIF = 24,};
enum MACRO_HTERROR {HTERROR = -2,};
enum MACRO_HTRIGHT {HTRIGHT = 11,};
enum MACRO_IDABORT {IDABORT = 3,IDRETRY = 4,};
enum MACRO_IDLFLAG {IDLFLAG_NONE = 0,IDLFLAG_FIN = 1,IDLFLAG_FOUT = 2,IDLFLAG_FLCID = 4,IDLFLAG_FRETVAL = 8,};
enum MACRO_IMPLINK {IMPLINK_IP = 155,IMPLINK_LOWEXPER = 156,IMPLINK_HIGHEXPER = 158,};
enum MACRO_INPLACE {INPLACE_E_FIRST = 0x1A0,INPLACE_E_LAST = 0x1AF,INPLACE_S_FIRST = 0x1A0,INPLACE_S_LAST = 0x1AF,};
enum MACRO_INVALID {INVALID_SOCKET = -1,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x7F,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_TCP = 6,IPPROTO_PUP = 12,IPPROTO_UDP = 17,IPPROTO_IDP = 22,IPPROTO_ND = 77,IPPROTO_RAW = 255,IPPROTO_MAX = 256,};
enum MACRO_LB_OKAY {LB_OKAY = 0,LB_ERR = -1,LB_ERRSPACE = -2,LB_CTLCODE = 0,};
enum MACRO_LENBASE {LENBASE = 1,};
enum MACRO_MARSHAL {MARSHAL_E_FIRST = 0x120,MARSHAL_E_LAST = 0x12F,MARSHAL_S_FIRST = 0x120,MARSHAL_S_LAST = 0x12F,};
enum MACRO_MAXFILE {MAXFILE = 9,};
enum MACRO_MAXLONG {MAXLONG = 0xFFFF,HIBITL = 0x0,};
enum MACRO_MDITILE {MDITILE_VERTICAL = 0x0,MDITILE_HORIZONTAL = 0x1,MDITILE_SKIPDISABLED = 0x2,};
enum MACRO_MONITOR {APPCLASS_MONITOR = 0x1,XTYP_MONITOR = 0x80F2,};
enum MACRO_NETBIOS {NETBIOS_NAME_LENGTH = 16,NETBIOS_UNIQUE_NAME = 0,NETBIOS_GROUP_NAME = 1,NETBIOS_TYPE_QUICK_UNIQUE = 2,NETBIOS_TYPE_QUICK_GROUP = 3,};
enum MACRO_NOERROR {NOERROR = 0,};
enum MACRO_NUMPENS {NUMPENS = 18,};
enum MACRO_PATCOPY {PATCOPY = 0x21,};
enum MACRO_QUALITY {DEFAULT_QUALITY = 0,DRAFT_QUALITY = 1,PROOF_QUALITY = 2,};
enum MACRO_REGDB_E {REGDB_E_READREGDB = 0x150,REGDB_E_WRITEREGDB = 0x151,REGDB_E_KEYMISSING = 0x152,REGDB_E_INVALIDVALUE = 0x153,REGDB_E_CLASSNOTREG = 0x154,REGDB_E_IIDNOTREG = 0x155,};
enum MACRO_SETXOFF {SETXOFF = 1,SETXON = 2,};
enum MACRO_SRCCOPY {SRCCOPY = 0x20,};
enum MACRO_STRETCH {STRETCH_ANDSCANS = 1,STRETCH_ORSCANS = 2,STRETCH_DELETESCANS = 3,};
enum MACRO_SUCCESS {SUCCESS_SUCCESS = 0,};
enum MACRO_TIMEOUT {TIMEOUT_ASYNC = -1,};
enum MACRO_TOOLBIT {TOOLBIT_SIZE = 24,};
enum MACRO_UAE_BOX {UAE_BOX = 0,NO_UAE_BOX = 1,};
enum MACRO_VARIANT {VARIANT_NOVALUEPROP = 1,};
enum MACRO_VERTRES {VERTRES = 10,};
enum MACRO_WM_NULL {WM_NULL = 0x0,WM_USER = 0x400,};
enum MACRO_ctlLast {ctlLast = 0x4FF,};
enum MACRO_pshHelp {pshHelp = 1038,};
enum MACRO_wPntAll {wPntAll = 0xFFFF,};
typedef struct tagMCI_SET_PARMS MCI_SET_PARMS;
typedef struct tagMONCONVSTRUCT MONCONVSTRUCT;
typedef struct tagMONLINKSTRUCT MONLINKSTRUCT;
typedef struct tagNEWTEXTMETRIC NEWTEXTMETRIC;
typedef struct midioutcaps_tag  *NPMIDIOUTCAPS;
typedef struct waveoutcaps_tag  *NPWAVEOUTCAPS;
typedef struct _OLESTREAMVTBL OLESTREAMVTBL;
typedef struct channel_caps_tag  *PCHANNEL_CAPS;
typedef struct pcmwaveformat_tag PCMWAVEFORMAT;
typedef struct tagPENDATAHEADER PENDATAHEADER;
typedef struct tMIXERCONTROL *PMIXERCONTROL;
typedef struct sockaddr_vns *PSOCKADDR_VNS;
typedef struct tWAVEFORMATEX *PWAVEFORMATEX;
struct tagCALBSTRUCT {int wOffsetX;int wOffsetY;int wDistinctWidth;int wDistinctHeight;};
enum tagINVOKEKIND {INVOKE_FUNC = 0x1,INVOKE_PROPERTYGET = 0x2,INVOKE_PROPERTYPUT = 0x4,INVOKE_PROPERTYPUTREF = 0x8,};
enum tagOLEWHICHMK {OLEWHICHMK_CONTAINER = 0x1,OLEWHICHMK_OBJREL = 0x2,OLEWHICHMK_OBJFULL = 0x3,};
enum tagPENDINGMSG {PENDINGMSG_CANCELCALL = 0x0,PENDINGMSG_WAITNOPROCESS = 0x1,PENDINGMSG_WAITDEFPROCESS = 0x2,};
enum tagSERVERCALL {SERVERCALL_ISHANDLED = 0x0,SERVERCALL_REJECTED = 0x1,SERVERCALL_RETRYLATER = 0x2,};
typedef struct channel_caps_tag CHANNEL_CAPS;
typedef struct tagCREATESTRUCT CREATESTRUCT;
typedef struct _548B30A8C808F6625678FF0EC6B59BB3 CTLCLASSLIST;
typedef struct tagGLYPHMETRICS GLYPHMETRICS;
struct IAdviseSink2 {struct IAdviseSink2Vtbl *lpVtbl;};
struct IEnumMoniker {struct IEnumMonikerVtbl *lpVtbl;};
struct IEnumOLEVERB {struct IEnumOLEVERBVtbl *lpVtbl;};
struct IEnumSTATSTG {struct IEnumSTATSTGVtbl *lpVtbl;};
struct IEnumUnknown {struct IEnumUnknownVtbl *lpVtbl;};
struct IEnumVARIANT {struct IEnumVARIANTVtbl *lpVtbl;};
struct IPersistFile {struct IPersistFileVtbl *lpVtbl;};
struct IRootStorage {struct IRootStorageVtbl *lpVtbl;};
struct IViewObject2 {struct IViewObject2Vtbl *lpVtbl;};
typedef IAdviseSink *LPADVISESINK;
typedef struct tagCALBSTRUCT *LPCALBSTRUCT;
typedef IDataObject *LPDATAOBJECT;
typedef IDropSource *LPDROPSOURCE;
typedef IDropTarget *LPDROPTARGET;
typedef IEnumString *LPENUMSTRING;
typedef struct tagMETHODDATA *LPMETHODDATA;
typedef struct midiincaps_tag *LPMIDIINCAPS;
typedef struct tagNEWCPLINFO *LPNEWCPLINFO;
typedef struct tagOEMPENINFO *LPOEMPENINFO;
typedef struct _12162CE22CDC56067DA0BB6E4AD54465 *LPRWCTLCLASS;
typedef struct tagSTROKEINFO *LPSTROKEINFO;
typedef struct tagVARIANT *LPVARIANTARG;
typedef IViewObject *LPVIEWOBJECT;
typedef struct waveformat_tag *LPWAVEFORMAT;
typedef struct waveincaps_tag *LPWAVEINCAPS;
enum MACRO_APPCMD {APPCMD_CLIENTONLY = 0x10,APPCMD_FILTERINITS = 0x20,APPCMD_MASK = 0xFF0,};
enum MACRO_ASPECT {ASPECT_FILTERING = 0x1,};
enum MACRO_BUFSIZ {BUFSIZ = 512,};
enum MACRO_CLRDTR {CLRDTR = 6,};
enum MACRO_CP_ACP {CP_ACP = 0,CP_OEMCP = 1,};
enum MACRO_DATA_E {DATA_E_FORMATETC = 100,DATA_S_SAMEFORMATETC = 304,};
enum MACRO_DISPID {DISPID_VALUE = 0,DISPID_UNKNOWN = -1,DISPID_PROPERTYPUT = -3,DISPID_NEWENUM = -4,DISPID_EVALUATE = -5,DISPID_CONSTRUCTOR = -6,DISPID_DESTRUCTOR = -7,};
enum MACRO_DMLERR {DMLERR_NO_ERROR = 0,DMLERR_FIRST = 16384,DMLERR_ADVACKTIMEOUT = 16384,DMLERR_BUSY = 16385,DMLERR_DATAACKTIMEOUT = 16386,DMLERR_DLL_NOT_INITIALIZED = 16387,DMLERR_DLL_USAGE = 16388,DMLERR_EXECACKTIMEOUT = 16389,DMLERR_INVALIDPARAMETER = 16390,DMLERR_LOW_MEMORY = 16391,DMLERR_MEMORY_ERROR = 16392,DMLERR_NOTPROCESSED = 16393,DMLERR_NO_CONV_ESTABLISHED = 16394,DMLERR_POKEACKTIMEOUT = 16395,DMLERR_POSTMSG_FAILED = 16396,DMLERR_REENTRANCY = 16397,DMLERR_SERVER_DIED = 16398,DMLERR_SYS_ERROR = 16399,DMLERR_UNADVACKTIMEOUT = 16400,DMLERR_UNFOUND_QUEUE_ID = 16401,DMLERR_LAST = 16401,};
enum MACRO_DRVCNF {DRVCNF_CANCEL = 0x0,DRVCNF_OK = 0x1,DRVCNF_RESTART = 0x2,};
enum MACRO_DT_TOP {DT_TOP = 0x0,DT_LEFT = 0x0,DT_CENTER = 0x1,DT_RIGHT = 0x2,DT_VCENTER = 0x4,DT_BOTTOM = 0x8,DT_WORDBREAK = 0x10,DT_SINGLELINE = 0x20,DT_EXPANDTABS = 0x40,DT_TABSTOP = 0x80,DT_NOCLIP = 0x100,DT_EXTERNALLEADING = 0x200,DT_CALCRECT = 0x400,DT_NOPREFIX = 0x800,DT_INTERNAL = 0x1000,};
enum MACRO_FMMENU {FMMENU_FIRST = 1,FMMENU_LAST = 99,};
enum MACRO_GLOBAL {GLOBAL_ALL = 0,GLOBAL_LRU = 1,GLOBAL_FREE = 2,};
enum MACRO_HIBITI {HIBITI = 0x8000,};
enum MACRO_HSHELL {HSHELL_WINDOWCREATED = 1,HSHELL_WINDOWDESTROYED = 2,HSHELL_ACTIVATESHELLWINDOW = 3,};
enum MACRO_HTLEFT {HTLEFT = 10,};
enum MACRO_HTMENU {HTMENU = 5,};
enum MACRO_HTZOOM {HTZOOM = 9,};
enum MACRO_IGNORE {IGNORE = 0,INFINITE = -1,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_LOOPBACK = 0x7F000001,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_NONE = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_IPPORT {IPPORT_ECHO = 7,IPPORT_DISCARD = 9,IPPORT_SYSTAT = 11,IPPORT_DAYTIME = 13,IPPORT_NETSTAT = 15,IPPORT_FTP = 21,IPPORT_TELNET = 23,IPPORT_SMTP = 25,IPPORT_TIMESERVER = 37,IPPORT_NAMESERVER = 42,IPPORT_WHOIS = 43,IPPORT_MTP = 57,IPPORT_TFTP = 69,IPPORT_RJE = 77,IPPORT_FINGER = 79,IPPORT_TTYLINK = 87,IPPORT_SUPDUP = 95,IPPORT_EXECSERVER = 512,IPPORT_LOGINSERVER = 513,IPPORT_CMDSERVER = 514,IPPORT_EFSSERVER = 520,IPPORT_BIFFUDP = 512,IPPORT_WHOSERVER = 513,IPPORT_ROUTESERVER = 520,IPPORT_RESERVED = 1024,};
enum MACRO_MAXDIR {MAXDIR = 66,};
enum MACRO_MAXEXT {MAXEXT = 5,};
enum MACRO_MAXINT {MAXINT = 0x7FFF,HIBITS = 0x8000,};
enum MACRO_MF_HSZ {MF_HSZ_INFO = 0x0,MF_SENDMSGS = 0x0,MF_POSTMSGS = 0x0,MF_CALLBACKS = 0x0,MF_ERRORS = 0x0,MF_LINKS = 0x0,MF_CONV = 0x0,MF_MASK = 0x0,};
enum MACRO_MK_ALT {MK_ALT = 0x20,};
enum MACRO_OLEOBJ {OLEOBJ_E_FIRST = 0x180,OLEOBJ_E_LAST = 0x18F,OLEOBJ_S_FIRST = 0x180,OLEOBJ_S_LAST = 0x18F,};
enum MACRO_PLANES {PLANES = 14,NUMBRUSHES = 16,};
enum MACRO_SETDTR {SETDTR = 5,};
enum MACRO_SETRTS {SETRTS = 3,CLRRTS = 4,};
enum MACRO_SIGNAL {SIGABRT = 22,SIGFPE = 8,SIGILL = 4,SIGINT = 2,SIGSEGV = 11,SIGTERM = 15,};
enum MACRO_SOCKET {SOCKET_ERROR = -1,};
enum MACRO_SRCAND {SRCAND = 0xC6,};
enum MACRO_STDOLE {STDOLE_MAJORVERNUM = 0x1,STDOLE_MINORVERNUM = 0x0,STDOLE_LCID = 0x0,};
enum MACRO_SYSPAL {SYSPAL_STATIC = 1,SYSPAL_NOSTATIC = 2,};
enum MACRO_SYSTEM {SYSTEM_FIXED_FONT = 16,};
enum MACRO_S_IFMT {S_IFMT = 0xF000,S_IFDIR = 0x4000,S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFBLK = 0x3000,S_IFREG = 0x8000,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,};
enum MACRO_VIEW_S {VIEW_S_ALREADY_FROZEN = 320,};
enum MACRO_WH_CBT {WH_CBT = 5,};
enum MACRO_WINVER {WINVER = 0x30A,};
enum MACRO_WM_CPL {WM_CPL_LAUNCH = 2024,WM_CPL_LAUNCHED = 2025,};
enum MACRO_WM_CUT {WM_CUT = 0x300,WM_COPY = 0x301,WM_PASTE = 0x302,WM_CLEAR = 0x303,WM_UNDO = 0x304,WM_RENDERFORMAT = 0x305,WM_RENDERALLFORMATS = 0x306,WM_DESTROYCLIPBOARD = 0x307,WM_DRAWCLIPBOARD = 0x308,WM_PAINTCLIPBOARD = 0x309,WM_SIZECLIPBOARD = 0x30B,WM_VSCROLLCLIPBOARD = 0x30A,WM_HSCROLLCLIPBOARD = 0x30E,WM_ASKCBFORMATNAME = 0x30C,WM_CHANGECBCHAIN = 0x30D,WM_SETCURSOR = 0x20,};
enum MACRO_WM_DDE {WM_DDE_FIRST = 0x3E0,WM_DDE_INITIATE = 0x3E0,WM_DDE_TERMINATE = 0x3E1,WM_DDE_ADVISE = 0x3E2,WM_DDE_UNADVISE = 0x3E3,WM_DDE_ACK = 0x3E4,WM_DDE_DATA = 0x3E5,WM_DDE_REQUEST = 0x3E6,WM_DDE_POKE = 0x3E7,WM_DDE_EXECUTE = 0x3E8,WM_DDE_LAST = 0x3E8,};
enum MACRO_XCLASS {XCLASS_MASK = 0xFC00,XCLASS_BOOL = 0x1000,XCLASS_DATA = 0x2000,XCLASS_FLAGS = 0x4000,XCLASS_NOTIFICATION = 0x8000,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,};
typedef struct tagMETAFILEPICT METAFILEPICT;
typedef struct tMIXERCONTROL MIXERCONTROL;
typedef struct tagMONERRSTRUCT MONERRSTRUCT;
typedef struct tagMONHSZSTRUCT MONHSZSTRUCT;
typedef struct tagMONMSGSTRUCT MONMSGSTRUCT;
typedef struct tagMULTIKEYHELP MULTIKEYHELP;
typedef struct midiincaps_tag  *NPMIDIINCAPS;
typedef struct waveformat_tag  *NPWAVEFORMAT;
typedef struct waveincaps_tag  *NPWAVEINCAPS;
typedef struct tagOFN OPENFILENAME;
typedef struct tagPALETTEENTRY PALETTEENTRY;
typedef struct midioutcaps_tag *PMIDIOUTCAPS;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_nb *PSOCKADDR_NB;
typedef struct sockaddr_tp *PSOCKADDR_TP;
typedef struct waveoutcaps_tag *PWAVEOUTCAPS;
typedef struct tagSCREENPARAMS SCREENPARAMS;
typedef struct sockaddr_vns SOCKADDR_VNS;
typedef int VARIANT_BOOL;
typedef struct tWAVEFORMATEX WAVEFORMATEX;
typedef struct tagWINDEBUGINFO WINDEBUGINFO;
typedef int sig_atomic_t;
enum tagBINDSPEED {BINDSPEED_INDEFINITE = 0x1,BINDSPEED_MODERATE = 0x2,BINDSPEED_IMMEDIATE = 0x3,};
struct tagDDEADVISE {unsigned short reserved : 14;unsigned short fDeferUpd : 1;unsigned short fAckReq : 1;int cfFormat;};
enum tagFUNCFLAGS {FUNCFLAG_FRESTRICTED = 0x1,FUNCFLAG_FSOURCE = 0x2,FUNCFLAG_FBINDABLE = 0x4,FUNCFLAG_FREQUESTEDIT = 0x8,FUNCFLAG_FDISPLAYBIND = 0x10,FUNCFLAG_FDEFAULTBIND = 0x20,FUNCFLAG_FHIDDEN = 0x40,};
enum tagMSHLFLAGS {MSHLFLAGS_NORMAL = 0x0,MSHLFLAGS_TABLESTRONG = 0x1,MSHLFLAGS_TABLEWEAK = 0x2,};
enum tagOLERENDER {OLERENDER_NONE = 0x0,OLERENDER_DRAW = 0x1,OLERENDER_FORMAT = 0x2,OLERENDER_ASIS = 0x3,};
enum tagOLEUPDATE {OLEUPDATE_ALWAYS = 0x1,OLEUPDATE_ONCALL = 0x3,};
enum tagTYPEFLAGS {TYPEFLAG_FAPPOBJECT = 0x1,TYPEFLAG_FCANCREATE = 0x2,TYPEFLAG_FLICENSED = 0x4,TYPEFLAG_FPREDECLID = 0x8,TYPEFLAG_FHIDDEN = 0x10,TYPEFLAG_FCONTROL = 0x20,TYPEFLAG_FDUAL = 0x40,TYPEFLAG_FNONEXTENSIBLE = 0x80,TYPEFLAG_FOLEAUTOMATION = 0x100,};
typedef struct tagCHOOSECOLOR CHOOSECOLOR;
typedef struct tagCONVCONTEXT CONVCONTEXT;
typedef struct tagENUMLOGFONT ENUMLOGFONT;
typedef struct tagFINDREPLACE FINDREPLACE;
typedef struct tagGLOBALENTRY GLOBALENTRY;
typedef struct tagHANDLETABLE HANDLETABLE;
typedef struct _925387C1A9AA03DD03B17550DEA320D0 HELPWININFO;
struct IAdviseSink {struct IAdviseSinkVtbl *lpVtbl;};
struct IDataObject {struct IDataObjectVtbl *lpVtbl;};
struct IDropSource {struct IDropSourceVtbl *lpVtbl;};
struct IDropTarget {struct IDropTargetVtbl *lpVtbl;};
struct IEnumString {struct IEnumStringVtbl *lpVtbl;};
struct IViewObject {struct IViewObjectVtbl *lpVtbl;};
typedef struct tagKERNINGPAIR KERNINGPAIR;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct tagBOXLAYOUT *LPBOXLAYOUT;
typedef struct tagEXCEPINFO *LPEXCEPINFO;
typedef struct tagFORMATETC *LPFORMATETC;
typedef ILockBytes *LPLOCKBYTES;
typedef struct tMIXERCAPS *LPMIXERCAPS;
typedef struct tMIXERLINE *LPMIXERLINE;
typedef IOleCache2 *LPOLECACHE2;
typedef IOleObject *LPOLEOBJECT;
typedef struct _OLESTREAM *LPOLESTREAM;
typedef IOleWindow *LPOLEWINDOW;
typedef struct tagPARAMDATA *LPPARAMDATA;
typedef struct tagPENPACKET *LPPENPACKET;
typedef struct _DFB5CCA608DB1B6F2D4767A059C3C570 *LPRWCTLTYPE;
typedef struct tagSAFEARRAY *LPSAFEARRAY;
typedef struct tagSTGMEDIUM *LPSTGMEDIUM;
enum MACRO_AGAIN {WSATRY_AGAIN = 11002,TRY_AGAIN = 11002,};
enum MACRO_BRUSH {WHITE_BRUSH = 0,LTGRAY_BRUSH = 1,GRAY_BRUSH = 2,DKGRAY_BRUSH = 3,BLACK_BRUSH = 4,NULL_BRUSH = 5,HOLLOW_BRUSH = 5,};
enum MACRO_CACHE {CACHE_E_FIRST = 0x170,CACHE_E_LAST = 0x17F,CACHE_S_FIRST = 0x170,CACHE_S_LAST = 0x17F,};
enum MACRO_CCERR {CCERR_CHOOSECOLORCODES = 0x5000,};
enum MACRO_CDERR {CDERR_DIALOGFAILURE = 0xFFFF,CDERR_GENERALCODES = 0x0,CDERR_STRUCTSIZE = 0x1,CDERR_INITIALIZATION = 0x2,CDERR_NOTEMPLATE = 0x3,CDERR_NOHINSTANCE = 0x4,CDERR_LOADSTRFAILURE = 0x5,CDERR_FINDRESFAILURE = 0x6,CDERR_LOADRESFAILURE = 0x7,CDERR_LOCKRESFAILURE = 0x8,CDERR_MEMALLOCFAILURE = 0x9,CDERR_MEMLOCKFAILURE = 0xA,CDERR_NOHOOK = 0xB,CDERR_REGISTERMSGFAIL = 0xC,};
enum MACRO_CFERR {CFERR_CHOOSEFONTCODES = 0x2000,CFERR_NOFONTS = 0x2001,CFERR_MAXLESSTHANMIN = 0x2002,};
enum MACRO_CLASS {CLASS_E_NOAGGREGATION = 0x110,CLASS_E_CLASSNOTAVAILABLE = 0x111,};
enum MACRO_COLOR {COLOR_SCROLLBAR = 0,COLOR_BACKGROUND = 1,COLOR_ACTIVECAPTION = 2,COLOR_INACTIVECAPTION = 3,COLOR_MENU = 4,COLOR_WINDOW = 5,COLOR_WINDOWFRAME = 6,COLOR_MENUTEXT = 7,COLOR_WINDOWTEXT = 8,COLOR_CAPTIONTEXT = 9,COLOR_ACTIVEBORDER = 10,COLOR_INACTIVEBORDER = 11,COLOR_APPWORKSPACE = 12,COLOR_HIGHLIGHT = 13,COLOR_HIGHLIGHTTEXT = 14,COLOR_BTNFACE = 15,COLOR_BTNSHADOW = 16,COLOR_GRAYTEXT = 17,COLOR_BTNTEXT = 18,COLOR_INACTIVECAPTIONTEXT = 19,COLOR_BTNHIGHLIGHT = 20,};
enum MACRO_CTL3D {CTL3D_SUBCLASS_DYNCREATE = 0x1,CTL3D_NOSUBCLASS_DYNCREATE = 0x2,CTL3D_BUTTON_CTL = 0x0,CTL3D_LISTBOX_CTL = 0x1,CTL3D_EDIT_CTL = 0x2,CTL3D_COMBO_CTL = 0x3,CTL3D_STATIC_CTL = 0x4,CTL3D_BUTTONS = 0x1,CTL3D_LISTBOXES = 0x2,CTL3D_EDITS = 0x4,CTL3D_COMBOS = 0x8,CTL3D_STATICTEXTS = 0x10,CTL3D_STATICFRAMES = 0x20,CTL3D_NODLGWINDOW = 0x0,CTL3D_ALL = 0xFFFF,};
enum MACRO_DMBIN {DMBIN_UPPER = 1,DMBIN_ONLYONE = 1,DMBIN_LOWER = 2,DMBIN_MIDDLE = 3,DMBIN_MANUAL = 4,DMBIN_ENVELOPE = 5,DMBIN_ENVMANUAL = 6,DMBIN_AUTO = 7,DMBIN_TRACTOR = 8,DMBIN_SMALLFMT = 9,DMBIN_LARGEFMT = 10,DMBIN_LARGECAPACITY = 11,DMBIN_CASSETTE = 14,DMBIN_LAST = 14,DMBIN_USER = 256,};
enum MACRO_DMDUP {DMDUP_SIMPLEX = 1,DMDUP_VERTICAL = 2,DMDUP_HORIZONTAL = 3,};
enum MACRO_DMRES {DMRES_DRAFT = -1,DMRES_LOW = -2,DMRES_MEDIUM = -3,DMRES_HIGH = -4,};
enum MACRO_DRIVE {DRIVE_REMOVABLE = 2,DRIVE_FIXED = 3,DRIVE_REMOTE = 4,};
enum MACRO_DRVEA {DRVEA_NORMALEXIT = 0x1,DRVEA_ABNORMALEXIT = 0x2,};
enum MACRO_DVGEN {DVGEN_E_FIRST = 100,};
enum MACRO_ERRNO {EZERO = 0,EINVFNC = 1,ENOFILE = 2,ENOPATH = 3,ECONTR = 7,EINVMEM = 9,EINVENV = 10,EINVFMT = 11,EINVACC = 12,EINVDAT = 13,EINVDRV = 15,ECURDIR = 16,ENOTSAM = 17,ENMFILE = 18,ENOENT = 2,EMFILE = 4,EACCES = 5,EBADF = 6,ENOMEM = 8,EFAULT = 14,ENODEV = 15,EINVAL = 19,E2BIG = 20,ENOEXEC = 21,EXDEV = 22,ENFILE = 23,ECHILD = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EEXIST = 35,EDEADLOCK = 36,EPERM = 37,ESRCH = 38,EINTR = 39,EIO = 40,ENXIO = 41,EAGAIN = 42,ENOTBLK = 43,EBUSY = 44,ENOTDIR = 45,EISDIR = 46,EUCLEAN = 47,EXCHIVERB_OPEN = 0,EXCHIVERB_RESERVED_COMPOSE = 100,EXCHIVERB_RESERVED_OPEN = 101,EXCHIVERB_REPLYTOSENDER = 102,EXCHIVERB_REPLYTOALL = 103,EXCHIVERB_FORWARD = 104,EXCHIVERB_PRINT = 105,EXCHIVERB_SAVEAS = 106,EXCHIVERB_RESERVED_DELIVERY = 107,EXCHIVERB_REPLYTOFOLDER = 108,lidOpMap = 1,ichOpMapReservedCompose = 0,ichOpMapOpen = 1,ichOpMapReplyToSender = 2,ichOpMapReplyToAll = 3,ichOpMapForward = 4,ichOpMapPrint = 5,ichOpMapSaveAs = 6,ichOpMapReservedDelivery = 7,ichOpMapReplyToFolder = 8,chOpMapByClient = 48,chOpMapByForm = 49,chOpMapDisable = 50,O_RDONLY = 1,O_WRONLY = 2,O_RDWR = 4,O_CREAT = 256,O_TRUNC = 512,O_EXCL = 1024,_O_RUNFLAGS = 1792,_O_WRITABLE = 256,_O_EOF = 512,O_APPEND = 2048,O_CHANGED = 4096,O_DEVICE = 8192,O_TEXT = 16384,O_BINARY = -32768,O_NOINHERIT = 128,O_DENYALL = 16,O_DENYWRITE = 32,O_DENYREAD = 48,O_DENYNONE = 64,FLT_RADIX = 2,FLT_ROUNDS = 1,FLT_GUARD = 1,FLT_NORMALIZE = 1,DBL_DIG = 15,FLT_DIG = 6,LDBL_DIG = 18,DBL_MANT_DIG = 53,FLT_MANT_DIG = 24,LDBL_MANT_DIG = 64,DBL_MAX_EXP = 1024,FLT_MAX_EXP = 128,LDBL_MAX_EXP = 16384,DBL_MAX_10_EXP = 308,FLT_MAX_10_EXP = 38,LDBL_MAX_10_EXP = 4932,DBL_MIN_10_EXP = -307,FLT_MIN_10_EXP = -37,LDBL_MIN_10_EXP = -4931,DBL_MIN_EXP = -1021,FLT_MIN_EXP = -125,LDBL_MIN_EXP = -16381,SW_INVALID = 1,SW_DENORMAL = 2,SW_ZERODIVIDE = 4,SW_OVERFLOW = 8,SW_UNDERFLOW = 16,SW_INEXACT = 32,SW_STACKFAULT = 64,MCW_EM = 63,EM_INVALID = 1,EM_DENORMAL = 2,EM_ZERODIVIDE = 4,EM_OVERFLOW = 8,EM_UNDERFLOW = 16,EM_INEXACT = 32,MCW_IC = 4096,IC_AFFINE = 4096,IC_PROJECTIVE = 0,MCW_RC = 3072,RC_CHOP = 3072,RC_UP = 2048,RC_DOWN = 1024,RC_NEAR = 0,MCW_PC = 768,PC_24 = 0,PC_53 = 512,PC_64 = 768,FPE_INTOVFLOW = 126,FPE_INTDIV0 = 127,FPE_INVALID = 129,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_STACKFAULT = 135,FPE_EXPLICITGEN = 140,SEGV_BOUND = 10,SEGV_EXPLICITGEN = 11,ILL_EXECUTION = 20,ILL_EXPLICITGEN = 21,_NFILE_ = 50,HANDLE_MAX = 50,CHAR_BIT = 8,MB_LEN_MAX = 2,SCHAR_MIN = -128,SCHAR_MAX = 127,UCHAR_MAX = 255,CHAR_MIN = -128,CHAR_MAX = 127,SHRT_MIN = -32768,SHRT_MAX = 32767,USHRT_MAX = -1,LONG_MIN = 0,LONG_MAX = -1,ULONG_MAX = -1,INT_MIN = -32768,INT_MAX = 32767,UINT_MAX = -1,LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MESSAGES = 6,LC_userdef = 7,LC_LAST = 7,LZERROR_BADINHANDLE = -1,LZERROR_BADOUTHANDLE = -2,LZERROR_READ = -3,LZERROR_WRITE = -4,LZERROR_GLOBALLOC = -5,LZERROR_GLOBLOCK = -6,LZERROR_BADVALUE = -7,LZERROR_UNKNOWNALG = -8,MAXPNAMELEN = 32,MAXERRORLENGTH = 256,MAX_JOYSTICKOEMVXDNAME = 260,MM_MICROSOFT = 1,MM_MIDI_MAPPER = 1,MM_WAVE_MAPPER = 2,MM_SNDBLST_MIDIOUT = 3,MM_SNDBLST_MIDIIN = 4,MM_SNDBLST_SYNTH = 5,MM_SNDBLST_WAVEOUT = 6,MM_SNDBLST_WAVEIN = 7,MM_ADLIB = 9,MM_MPU401_MIDIOUT = 10,MM_MPU401_MIDIIN = 11,MM_PC_JOYSTICK = 12,TIME_MS = 1,TIME_SAMPLES = 2,TIME_BYTES = 4,TIME_SMPTE = 8,TIME_MIDI = 16,TIME_TICKS = 32,MM_JOY1MOVE = 928,MM_JOY2MOVE = 929,MM_JOY1ZMOVE = 930,MM_JOY2ZMOVE = 931,MM_JOY1BUTTONDOWN = 949,MM_JOY2BUTTONDOWN = 950,MM_JOY1BUTTONUP = 951,MM_JOY2BUTTONUP = 952,MM_MCINOTIFY = 953,MM_WOM_OPEN = 955,MM_WOM_CLOSE = 956,MM_WOM_DONE = 957,MM_WIM_OPEN = 958,MM_WIM_CLOSE = 959,MM_WIM_DATA = 960,MM_MIM_OPEN = 961,MM_MIM_CLOSE = 962,MM_MIM_DATA = 963,MM_MIM_LONGDATA = 964,MM_MIM_ERROR = 965,MM_MIM_LONGERROR = 966,MM_MOM_OPEN = 967,MM_MOM_CLOSE = 968,MM_MOM_DONE = 969,MM_DRVM_OPEN = 976,MM_DRVM_CLOSE = 977,MM_DRVM_DATA = 978,MM_DRVM_ERROR = 979,MM_STREAM_OPEN = 980,MM_STREAM_CLOSE = 981,MM_STREAM_DONE = 982,MM_STREAM_ERROR = 983,MM_MIXM_LINE_CHANGE = 976,MM_MIXM_CONTROL_CHANGE = 977,MMSYSERR_BASE = 0,WAVERR_BASE = 32,MIDIERR_BASE = 64,TIMERR_BASE = 96,JOYERR_BASE = 160,MCIERR_BASE = 256,MIXERR_BASE = 1024,MCI_STRING_OFFSET = 512,MCI_VD_OFFSET = 1024,MCI_CD_OFFSET = 1088,MCI_WAVE_OFFSET = 1152,MCI_SEQ_OFFSET = 1216,MMSYSERR_NOERROR = 0,MMSYSERR_ERROR = 1,MMSYSERR_BADDEVICEID = 2,MMSYSERR_NOTENABLED = 3,MMSYSERR_ALLOCATED = 4,MMSYSERR_INVALHANDLE = 5,MMSYSERR_NODRIVER = 6,MMSYSERR_NOMEM = 7,MMSYSERR_NOTSUPPORTED = 8,MMSYSERR_BADERRNUM = 9,MMSYSERR_INVALFLAG = 10,MMSYSERR_INVALPARAM = 11,MMSYSERR_HANDLEBUSY = 12,MMSYSERR_INVALIDALIAS = 13,MMSYSERR_BADDB = 14,MMSYSERR_KEYNOTFOUND = 15,MMSYSERR_READERROR = 16,MMSYSERR_WRITEERROR = 17,MMSYSERR_DELETEERROR = 18,MMSYSERR_VALNOTFOUND = 19,MMSYSERR_NODRIVERCB = 20,MMSYSERR_LASTERROR = 20,DRV_CANCEL = 0,DRV_OK = 1,DRV_RESTART = 2,DRV_MCI_FIRST = 2048,DRV_MCI_LAST = 6143,CALLBACK_TYPEMASK = 0,CALLBACK_NULL = 0,CALLBACK_WINDOW = 0,CALLBACK_TASK = 0,CALLBACK_FUNCTION = 0,SND_SYNC = 0,SND_ASYNC = 1,SND_NODEFAULT = 2,SND_MEMORY = 4,SND_LOOP = 8,SND_NOSTOP = 16,SND_NOWAIT = 8192,SND_ALIAS = 0,SND_ALIAS_ID = 0,SND_FILENAME = 0,SND_RESOURCE = 4,SND_ALIAS_START = 0,WAVERR_BADFORMAT = 32,WAVERR_STILLPLAYING = 33,WAVERR_UNPREPARED = 34,WAVERR_SYNC = 35,WAVERR_LASTERROR = 35,WOM_OPEN = 955,WOM_CLOSE = 956,WOM_DONE = 957,WIM_OPEN = 958,WIM_CLOSE = 959,WIM_DATA = 960,WAVE_MAPPER = -1,WAVE_FORMAT_QUERY = 1,WAVE_ALLOWSYNC = 2,WHDR_DONE = 1,WHDR_PREPARED = 2,WHDR_BEGINLOOP = 4,WHDR_ENDLOOP = 8,WHDR_INQUEUE = 16,WAVECAPS_PITCH = 1,WAVECAPS_PLAYBACKRATE = 2,WAVECAPS_VOLUME = 4,WAVECAPS_LRVOLUME = 8,WAVECAPS_SYNC = 16,WAVECAPS_SAMPLEACCURATE = 32,WAVECAPS_DIRECTSOUND = 64,WAVE_INVALIDFORMAT = 0,WAVE_FORMAT_1M08 = 1,WAVE_FORMAT_1S08 = 2,WAVE_FORMAT_1M16 = 4,WAVE_FORMAT_1S16 = 8,WAVE_FORMAT_2M08 = 16,WAVE_FORMAT_2S08 = 32,WAVE_FORMAT_2M16 = 64,WAVE_FORMAT_2S16 = 128,WAVE_FORMAT_4M08 = 256,WAVE_FORMAT_4S08 = 512,WAVE_FORMAT_4M16 = 1024,WAVE_FORMAT_4S16 = 2048,WAVE_FORMAT_PCM = 1,MIDIERR_UNPREPARED = 64,MIDIERR_STILLPLAYING = 65,MIDIERR_NOMAP = 66,MIDIERR_NOTREADY = 67,MIDIERR_NODEVICE = 68,MIDIERR_INVALIDSETUP = 69,MIDIERR_BADOPENMODE = 70,MIDIERR_DONT_CONTINUE = 71,MIDIERR_LASTERROR = 71,MIDIPATCHSIZE = 128,MIM_OPEN = 961,MIM_CLOSE = 962,MIM_DATA = 963,MIM_LONGDATA = 964,MIM_ERROR = 965,MIM_LONGERROR = 966,MOM_OPEN = 967,MOM_CLOSE = 968,MOM_DONE = 969,MIDIMAPPER = -1,MIDI_MAPPER = -1,MIDI_CACHE_ALL = 1,MIDI_CACHE_BESTFIT = 2,MIDI_CACHE_QUERY = 3,MIDI_UNCACHE = 4,MOD_MIDIPORT = 1,MOD_SYNTH = 2,MOD_SQSYNTH = 3,MOD_FMSYNTH = 4,MOD_MAPPER = 5,MIDICAPS_VOLUME = 1,MIDICAPS_LRVOLUME = 2,MIDICAPS_CACHE = 4,MHDR_DONE = 1,MHDR_PREPARED = 2,MHDR_INQUEUE = 4,MHDR_ISSTRM = 8,AUX_MAPPER = -1,AUXCAPS_CDAUDIO = 1,AUXCAPS_AUXIN = 2,AUXCAPS_VOLUME = 1,AUXCAPS_LRVOLUME = 2,MIXER_SHORT_NAME_CHARS = 16,MIXER_LONG_NAME_CHARS = 64,MIXERR_INVALLINE = 1024,MIXERR_INVALCONTROL = 1025,MIXERR_INVALVALUE = 1026,MIXERR_LASTERROR = 1026,MIXER_OBJECTF_HANDLE = 0,MIXER_OBJECTF_MIXER = 0,MIXER_OBJECTF_HMIXER = 0,MIXER_OBJECTF_WAVEOUT = 0,MIXER_OBJECTF_HWAVEOUT = 0,MIXER_OBJECTF_WAVEIN = 0,MIXER_OBJECTF_HWAVEIN = 0,MIXER_OBJECTF_MIDIOUT = 0,MIXER_OBJECTF_HMIDIOUT = 0,MIXER_OBJECTF_MIDIIN = 0,MIXER_OBJECTF_HMIDIIN = 0,MIXER_OBJECTF_AUX = 0,MIXERLINE_LINEF_ACTIVE = 1,MIXERLINE_LINEF_DISCONNECTED = -32768,MIXERLINE_LINEF_SOURCE = 0,MIXERLINE_COMPONENTTYPE_DST_FIRST = 0,MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0,MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 1,MIXERLINE_COMPONENTTYPE_DST_LINE = 2,MIXERLINE_COMPONENTTYPE_DST_MONITOR = 3,MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 4,MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 5,MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 6,MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 7,MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 8,MIXERLINE_COMPONENTTYPE_DST_LAST = 8,MIXERLINE_COMPONENTTYPE_SRC_FIRST = 4096,MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 4096,MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 4097,MIXERLINE_COMPONENTTYPE_SRC_LINE = 4098,MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 4099,MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 4100,MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 4101,MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 4102,MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 4103,MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 4104,MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 4105,MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 4106,MIXERLINE_COMPONENTTYPE_SRC_LAST = 4106,MIXERLINE_TARGETTYPE_UNDEFINED = 0,MIXERLINE_TARGETTYPE_WAVEOUT = 1,MIXERLINE_TARGETTYPE_WAVEIN = 2,MIXERLINE_TARGETTYPE_MIDIOUT = 3,MIXERLINE_TARGETTYPE_MIDIIN = 4,MIXERLINE_TARGETTYPE_AUX = 5,MIXER_GETLINEINFOF_DESTINATION = 0,MIXER_GETLINEINFOF_SOURCE = 1,MIXER_GETLINEINFOF_LINEID = 2,MIXER_GETLINEINFOF_COMPONENTTYPE = 3,MIXER_GETLINEINFOF_TARGETTYPE = 4,MIXER_GETLINEINFOF_QUERYMASK = 15,MIXERCONTROL_CONTROLF_UNIFORM = 1,MIXERCONTROL_CONTROLF_MULTIPLE = 2,MIXERCONTROL_CONTROLF_DISABLED = 0,MIXERCONTROL_CT_CLASS_MASK = 0,MIXERCONTROL_CT_CLASS_CUSTOM = 0,MIXERCONTROL_CT_CLASS_METER = 0,MIXERCONTROL_CT_CLASS_SWITCH = 0,MIXERCONTROL_CT_CLASS_NUMBER = 0,MIXERCONTROL_CT_CLASS_SLIDER = 0,MIXERCONTROL_CT_CLASS_FADER = 0,MIXERCONTROL_CT_CLASS_TIME = 0,MIXERCONTROL_CT_CLASS_LIST = 0,MIXERCONTROL_CT_SUBCLASS_MASK = 0,MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0,MIXERCONTROL_CT_SC_SWITCH_BUTTON = 0,MIXERCONTROL_CT_SC_METER_POLLED = 0,MIXERCONTROL_CT_SC_TIME_MICROSECS = 0,MIXERCONTROL_CT_SC_TIME_MILLISECS = 0,MIXERCONTROL_CT_SC_LIST_SINGLE = 0,MIXERCONTROL_CT_SC_LIST_MULTIPLE = 0,MIXERCONTROL_CT_UNITS_MASK = 0,MIXERCONTROL_CT_UNITS_CUSTOM = 0,MIXERCONTROL_CT_UNITS_BOOLEAN = 0,MIXERCONTROL_CT_UNITS_SIGNED = 0,MIXERCONTROL_CT_UNITS_UNSIGNED = 0,MIXERCONTROL_CT_UNITS_DECIBELS = 0,MIXERCONTROL_CT_UNITS_PERCENT = 0,MIXERCONTROL_CONTROLTYPE_CUSTOM = 0,MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 0,MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 0,MIXERCONTROL_CONTROLTYPE_PEAKMETER = 1,MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 0,MIXERCONTROL_CONTROLTYPE_BOOLEAN = 0,MIXERCONTROL_CONTROLTYPE_ONOFF = 1,MIXERCONTROL_CONTROLTYPE_MUTE = 2,MIXERCONTROL_CONTROLTYPE_MONO = 3,MIXERCONTROL_CONTROLTYPE_LOUDNESS = 4,MIXERCONTROL_CONTROLTYPE_STEREOENH = 5,MIXERCONTROL_CONTROLTYPE_BUTTON = 0,MIXERCONTROL_CONTROLTYPE_DECIBELS = 0,MIXERCONTROL_CONTROLTYPE_SIGNED = 0,MIXERCONTROL_CONTROLTYPE_UNSIGNED = 0,MIXERCONTROL_CONTROLTYPE_PERCENT = 0,MIXERCONTROL_CONTROLTYPE_SLIDER = 0,MIXERCONTROL_CONTROLTYPE_PAN = 1,MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 2,MIXERCONTROL_CONTROLTYPE_FADER = 0,MIXERCONTROL_CONTROLTYPE_VOLUME = 1,MIXERCONTROL_CONTROLTYPE_BASS = 2,MIXERCONTROL_CONTROLTYPE_TREBLE = 3,MIXERCONTROL_CONTROLTYPE_EQUALIZER = 4,MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 0,MIXERCONTROL_CONTROLTYPE_MUX = 1,MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 0,MIXERCONTROL_CONTROLTYPE_MIXER = 1,MIXERCONTROL_CONTROLTYPE_MICROTIME = 0,MIXERCONTROL_CONTROLTYPE_MILLITIME = 0,MIXER_GETLINECONTROLSF_ALL = 0,MIXER_GETLINECONTROLSF_ONEBYID = 1,MIXER_GETLINECONTROLSF_ONEBYTYPE = 2,MIXER_GETLINECONTROLSF_QUERYMASK = 15,MIXER_GETCONTROLDETAILSF_VALUE = 0,MIXER_GETCONTROLDETAILSF_LISTTEXT = 1,MIXER_GETCONTROLDETAILSF_QUERYMASK = 15,MIXER_SETCONTROLDETAILSF_VALUE = 0,MIXER_SETCONTROLDETAILSF_CUSTOM = 1,MIXER_SETCONTROLDETAILSF_QUERYMASK = 15,TIMERR_NOERROR = 0,TIMERR_NOCANDO = 97,TIMERR_STRUCT = 129,TIME_ONESHOT = 0,TIME_PERIODIC = 1,JOYERR_NOERROR = 0,JOYERR_PARMS = 165,JOYERR_NOCANDO = 166,JOYERR_UNPLUGGED = 167,JOY_BUTTON1 = 1,JOY_BUTTON2 = 2,JOY_BUTTON3 = 4,JOY_BUTTON4 = 8,JOY_BUTTON1CHG = 256,JOY_BUTTON2CHG = 512,JOY_BUTTON3CHG = 1024,JOY_BUTTON4CHG = 2048,JOY_BUTTON5 = 16,JOY_BUTTON6 = 32,JOY_BUTTON7 = 64,JOY_BUTTON8 = 128,JOY_BUTTON9 = 256,JOY_BUTTON10 = 512,JOY_BUTTON11 = 1024,JOY_BUTTON12 = 2048,JOY_BUTTON13 = 4096,JOY_BUTTON14 = 8192,JOY_BUTTON15 = 16384,JOY_BUTTON16 = -32768,JOY_BUTTON17 = 0,JOY_BUTTON18 = 0,JOY_BUTTON19 = 0,JOY_BUTTON20 = 0,JOY_BUTTON21 = 0,JOY_BUTTON22 = 0,JOY_BUTTON23 = 0,JOY_BUTTON24 = 0,JOY_BUTTON25 = 0,JOY_BUTTON26 = 0,JOY_BUTTON27 = 0,JOY_BUTTON28 = 0,JOY_BUTTON29 = 0,JOY_BUTTON30 = 0,JOY_BUTTON31 = 0,JOY_BUTTON32 = 0,JOY_POVCENTERED = -1,JOY_POVFORWARD = 0,JOY_POVRIGHT = 9000,JOY_POVBACKWARD = 18000,JOY_POVLEFT = 27000,JOY_RETURNX = 1,JOY_RETURNY = 2,JOY_RETURNZ = 4,JOY_RETURNR = 8,JOY_RETURNU = 16,JOY_RETURNV = 32,JOY_RETURNPOV = 64,JOY_RETURNBUTTONS = 128,JOY_RETURNRAWDATA = 256,JOY_RETURNPOVCTS = 512,JOY_RETURNCENTERED = 1024,JOY_USEDEADZONE = 2048,JOY_RETURNALL = 255,JOY_CAL_READALWAYS = 0,JOY_CAL_READXYONLY = 0,JOY_CAL_READ3 = 0,JOY_CAL_READ4 = 0,JOY_CAL_READXONLY = 0,JOY_CAL_READYONLY = 0,JOY_CAL_READ5 = 0,JOY_CAL_READ6 = 0,JOY_CAL_READZONLY = 0,JOY_CAL_READRONLY = 0,JOY_CAL_READUONLY = 0,JOY_CAL_READVONLY = 0,JOYSTICKID1 = 0,JOYSTICKID2 = 1,JOYCAPS_HASZ = 1,JOYCAPS_HASR = 2,JOYCAPS_HASU = 4,JOYCAPS_HASV = 8,JOYCAPS_HASPOV = 16,JOYCAPS_POV4DIR = 32,JOYCAPS_POVCTS = 64,MMIOERR_BASE = 256,MMIOERR_FILENOTFOUND = 257,MMIOERR_OUTOFMEMORY = 258,MMIOERR_CANNOTOPEN = 259,MMIOERR_CANNOTCLOSE = 260,MMIOERR_CANNOTREAD = 261,MMIOERR_CANNOTWRITE = 262,MMIOERR_CANNOTSEEK = 263,MMIOERR_CANNOTEXPAND = 264,MMIOERR_CHUNKNOTFOUND = 265,MMIOERR_UNBUFFERED = 266,MMIOERR_PATHNOTFOUND = 267,MMIOERR_ACCESSDENIED = 268,MMIOERR_SHARINGVIOLATION = 269,MMIOERR_NETWORKERROR = 270,MMIOERR_TOOMANYOPENFILES = 271,MMIOERR_INVALIDFILE = 272,CFSEPCHAR = 43,MMIO_RWMODE = 3,MMIO_SHAREMODE = 112,MMIO_CREATE = 4096,MMIO_PARSE = 256,MMIO_DELETE = 512,MMIO_EXIST = 16384,MMIO_ALLOCBUF = 0,MMIO_GETTEMP = 0,MMIO_DIRTY = 0,MMIO_READ = 0,MMIO_WRITE = 1,MMIO_READWRITE = 2,MMIO_COMPAT = 0,MMIO_EXCLUSIVE = 16,MMIO_DENYWRITE = 32,MMIO_DENYREAD = 48,MMIO_DENYNONE = 64,MMIO_FHOPEN = 16,MMIO_EMPTYBUF = 16,MMIO_TOUPPER = 16,MMIO_INSTALLPROC = 0,MMIO_GLOBALPROC = 0,MMIO_REMOVEPROC = 0,MMIO_UNICODEPROC = 0,MMIO_FINDPROC = 0,MMIO_FINDCHUNK = 16,MMIO_FINDRIFF = 32,MMIO_FINDLIST = 64,MMIO_CREATERIFF = 32,MMIO_CREATELIST = 64,MMIOM_READ = 0,MMIOM_WRITE = 1,MMIOM_SEEK = 2,MMIOM_OPEN = 3,MMIOM_CLOSE = 4,MMIOM_WRITEFLUSH = 5,MMIOM_RENAME = 6,MMIOM_USER = -32768,MMIO_DEFAULTBUFFER = 8192,MCIERR_INVALID_DEVICE_ID = 257,MCIERR_UNRECOGNIZED_KEYWORD = 259,MCIERR_UNRECOGNIZED_COMMAND = 261,MCIERR_HARDWARE = 262,MCIERR_INVALID_DEVICE_NAME = 263,MCIERR_OUT_OF_MEMORY = 264,MCIERR_DEVICE_OPEN = 265,MCIERR_CANNOT_LOAD_DRIVER = 266,MCIERR_MISSING_COMMAND_STRING = 267,MCIERR_PARAM_OVERFLOW = 268,MCIERR_MISSING_STRING_ARGUMENT = 269,MCIERR_BAD_INTEGER = 270,MCIERR_PARSER_INTERNAL = 271,MCIERR_DRIVER_INTERNAL = 272,MCIERR_MISSING_PARAMETER = 273,MCIERR_UNSUPPORTED_FUNCTION = 274,MCIERR_FILE_NOT_FOUND = 275,MCIERR_DEVICE_NOT_READY = 276,MCIERR_INTERNAL = 277,MCIERR_DRIVER = 278,MCIERR_CANNOT_USE_ALL = 279,MCIERR_MULTIPLE = 280,MCIERR_EXTENSION_NOT_FOUND = 281,MCIERR_OUTOFRANGE = 282,MCIERR_FLAGS_NOT_COMPATIBLE = 284,MCIERR_FILE_NOT_SAVED = 286,MCIERR_DEVICE_TYPE_REQUIRED = 287,MCIERR_DEVICE_LOCKED = 288,MCIERR_DUPLICATE_ALIAS = 289,MCIERR_BAD_CONSTANT = 290,MCIERR_MUST_USE_SHAREABLE = 291,MCIERR_MISSING_DEVICE_NAME = 292,MCIERR_BAD_TIME_FORMAT = 293,MCIERR_NO_CLOSING_QUOTE = 294,MCIERR_DUPLICATE_FLAGS = 295,MCIERR_INVALID_FILE = 296,MCIERR_NULL_PARAMETER_BLOCK = 297,MCIERR_UNNAMED_RESOURCE = 298,MCIERR_NEW_REQUIRES_ALIAS = 299,MCIERR_NOTIFY_ON_AUTO_OPEN = 300,MCIERR_NO_ELEMENT_ALLOWED = 301,MCIERR_NONAPPLICABLE_FUNCTION = 302,MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303,MCIERR_FILENAME_REQUIRED = 304,MCIERR_EXTRA_CHARACTERS = 305,MCIERR_DEVICE_NOT_INSTALLED = 306,MCIERR_GET_CD = 307,MCIERR_SET_CD = 308,MCIERR_SET_DRIVE = 309,MCIERR_DEVICE_LENGTH = 310,MCIERR_DEVICE_ORD_LENGTH = 311,MCIERR_NO_INTEGER = 312,MCIERR_WAVE_OUTPUTSINUSE = 320,MCIERR_WAVE_SETOUTPUTINUSE = 321,MCIERR_WAVE_INPUTSINUSE = 322,MCIERR_WAVE_SETINPUTINUSE = 323,MCIERR_WAVE_OUTPUTUNSPECIFIED = 324,MCIERR_WAVE_INPUTUNSPECIFIED = 325,MCIERR_WAVE_OUTPUTSUNSUITABLE = 326,MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327,MCIERR_WAVE_INPUTSUNSUITABLE = 328,MCIERR_WAVE_SETINPUTUNSUITABLE = 329,MCIERR_SEQ_DIV_INCOMPATIBLE = 336,MCIERR_SEQ_PORT_INUSE = 337,MCIERR_SEQ_PORT_NONEXISTENT = 338,MCIERR_SEQ_PORT_MAPNODEVICE = 339,MCIERR_SEQ_PORT_MISCERROR = 340,MCIERR_SEQ_TIMER = 341,MCIERR_SEQ_PORTUNSPECIFIED = 342,MCIERR_SEQ_NOMIDIPRESENT = 343,MCIERR_NO_WINDOW = 346,MCIERR_CREATEWINDOW = 347,MCIERR_FILE_READ = 348,MCIERR_FILE_WRITE = 349,MCIERR_NO_IDENTITY = 350,MCIERR_CUSTOM_DRIVER_BASE = 512,MCI_FIRST = 2048,MCI_OPEN = 2051,MCI_CLOSE = 2052,MCI_ESCAPE = 2053,MCI_PLAY = 2054,MCI_SEEK = 2055,MCI_STOP = 2056,MCI_PAUSE = 2057,MCI_INFO = 2058,MCI_GETDEVCAPS = 2059,MCI_SPIN = 2060,MCI_SET = 2061,MCI_STEP = 2062,MCI_RECORD = 2063,MCI_SYSINFO = 2064,MCI_BREAK = 2065,MCI_SAVE = 2067,MCI_STATUS = 2068,MCI_CUE = 2096,MCI_REALIZE = 2112,MCI_WINDOW = 2113,MCI_PUT = 2114,MCI_WHERE = 2115,MCI_FREEZE = 2116,MCI_UNFREEZE = 2117,MCI_LOAD = 2128,MCI_CUT = 2129,MCI_COPY = 2130,MCI_PASTE = 2131,MCI_UPDATE = 2132,MCI_RESUME = 2133,MCI_DELETE = 2134,MCI_USER_MESSAGES = 3072,MCI_LAST = 4095,MCI_ALL_DEVICE_ID = -1,MCI_DEVTYPE_VCR = 513,MCI_DEVTYPE_VIDEODISC = 514,MCI_DEVTYPE_OVERLAY = 515,MCI_DEVTYPE_CD_AUDIO = 516,MCI_DEVTYPE_DAT = 517,MCI_DEVTYPE_SCANNER = 518,MCI_DEVTYPE_ANIMATION = 519,MCI_DEVTYPE_DIGITAL_VIDEO = 520,MCI_DEVTYPE_OTHER = 521,MCI_DEVTYPE_WAVEFORM_AUDIO = 522,MCI_DEVTYPE_SEQUENCER = 523,MCI_DEVTYPE_FIRST = 513,MCI_DEVTYPE_LAST = 523,MCI_DEVTYPE_FIRST_USER = 4096,MCI_MODE_NOT_READY = 524,MCI_MODE_STOP = 525,MCI_MODE_PLAY = 526,MCI_MODE_RECORD = 527,MCI_MODE_SEEK = 528,MCI_MODE_PAUSE = 529,MCI_MODE_OPEN = 530,MCI_FORMAT_MILLISECONDS = 0,MCI_FORMAT_HMS = 1,MCI_FORMAT_MSF = 2,MCI_FORMAT_FRAMES = 3,MCI_FORMAT_SMPTE_24 = 4,MCI_FORMAT_SMPTE_25 = 5,MCI_FORMAT_SMPTE_30 = 6,MCI_FORMAT_SMPTE_30DROP = 7,MCI_FORMAT_BYTES = 8,MCI_FORMAT_SAMPLES = 9,MCI_FORMAT_TMSF = 10,MCI_NOTIFY_SUCCESSFUL = 1,MCI_NOTIFY_SUPERSEDED = 2,MCI_NOTIFY_ABORTED = 4,MCI_NOTIFY_FAILURE = 8,MCI_NOTIFY = 1,MCI_WAIT = 2,MCI_FROM = 4,MCI_TO = 8,MCI_TRACK = 16,MCI_OPEN_SHAREABLE = 256,MCI_OPEN_ELEMENT = 512,MCI_OPEN_ALIAS = 1024,MCI_OPEN_ELEMENT_ID = 2048,MCI_OPEN_TYPE_ID = 4096,MCI_OPEN_TYPE = 8192,MCI_SEEK_TO_START = 256,MCI_SEEK_TO_END = 512,MCI_STATUS_ITEM = 256,MCI_STATUS_START = 512,MCI_STATUS_LENGTH = 1,MCI_STATUS_POSITION = 2,MCI_STATUS_NUMBER_OF_TRACKS = 3,MCI_STATUS_MODE = 4,MCI_STATUS_MEDIA_PRESENT = 5,MCI_STATUS_TIME_FORMAT = 6,MCI_STATUS_READY = 7,MCI_STATUS_CURRENT_TRACK = 8,MCI_INFO_PRODUCT = 256,MCI_INFO_FILE = 512,MCI_INFO_MEDIA_UPC = 1024,MCI_INFO_MEDIA_IDENTITY = 2048,MCI_INFO_NAME = 4096,MCI_INFO_COPYRIGHT = 8192,MCI_GETDEVCAPS_ITEM = 256,MCI_GETDEVCAPS_CAN_RECORD = 1,MCI_GETDEVCAPS_HAS_AUDIO = 2,MCI_GETDEVCAPS_HAS_VIDEO = 3,MCI_GETDEVCAPS_DEVICE_TYPE = 4,MCI_GETDEVCAPS_USES_FILES = 5,MCI_GETDEVCAPS_COMPOUND_DEVICE = 6,MCI_GETDEVCAPS_CAN_EJECT = 7,MCI_GETDEVCAPS_CAN_PLAY = 8,MCI_GETDEVCAPS_CAN_SAVE = 9,MCI_SYSINFO_QUANTITY = 256,MCI_SYSINFO_OPEN = 512,MCI_SYSINFO_NAME = 1024,MCI_SYSINFO_INSTALLNAME = 2048,MCI_SET_DOOR_OPEN = 256,MCI_SET_DOOR_CLOSED = 512,MCI_SET_TIME_FORMAT = 1024,MCI_SET_AUDIO = 2048,MCI_SET_VIDEO = 4096,MCI_SET_ON = 8192,MCI_SET_OFF = 16384,MCI_SET_AUDIO_ALL = 0,MCI_SET_AUDIO_LEFT = 1,MCI_SET_AUDIO_RIGHT = 2,MCI_BREAK_KEY = 256,MCI_BREAK_HWND = 512,MCI_BREAK_OFF = 1024,MCI_RECORD_INSERT = 256,MCI_RECORD_OVERWRITE = 512,MCI_SAVE_FILE = 256,MCI_LOAD_FILE = 256,MCI_VD_MODE_PARK = 1025,MCI_VD_MEDIA_CLV = 1026,MCI_VD_MEDIA_CAV = 1027,MCI_VD_MEDIA_OTHER = 1028,MCI_VD_FORMAT_TRACK = 16385,MCI_VD_PLAY_REVERSE = 0,MCI_VD_PLAY_FAST = 0,MCI_VD_PLAY_SPEED = 0,MCI_VD_PLAY_SCAN = 0,MCI_VD_PLAY_SLOW = 0,MCI_VD_SEEK_REVERSE = 0,MCI_VD_STATUS_SPEED = 16386,MCI_VD_STATUS_FORWARD = 16387,MCI_VD_STATUS_MEDIA_TYPE = 16388,MCI_VD_STATUS_SIDE = 16389,MCI_VD_STATUS_DISC_SIZE = 16390,MCI_VD_GETDEVCAPS_CLV = 0,MCI_VD_GETDEVCAPS_CAV = 0,MCI_VD_SPIN_UP = 0,MCI_VD_SPIN_DOWN = 0,MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386,MCI_VD_GETDEVCAPS_FAST_RATE = 16387,MCI_VD_GETDEVCAPS_SLOW_RATE = 16388,MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389,MCI_VD_STEP_FRAMES = 0,MCI_VD_STEP_REVERSE = 0,MCI_VD_ESCAPE_STRING = 256,MCI_CDA_STATUS_TYPE_TRACK = 16385,MCI_CDA_TRACK_AUDIO = 1088,MCI_CDA_TRACK_OTHER = 1089,MCI_WAVE_PCM = 1152,MCI_WAVE_MAPPER = 1153,MCI_WAVE_OPEN_BUFFER = 0,MCI_WAVE_SET_FORMATTAG = 0,MCI_WAVE_SET_CHANNELS = 0,MCI_WAVE_SET_SAMPLESPERSEC = 0,MCI_WAVE_SET_AVGBYTESPERSEC = 0,MCI_WAVE_SET_BLOCKALIGN = 0,MCI_WAVE_SET_BITSPERSAMPLE = 0,MCI_WAVE_INPUT = 0,MCI_WAVE_OUTPUT = 0,MCI_WAVE_STATUS_FORMATTAG = 16385,MCI_WAVE_STATUS_CHANNELS = 16386,MCI_WAVE_STATUS_SAMPLESPERSEC = 16387,MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388,MCI_WAVE_STATUS_BLOCKALIGN = 16389,MCI_WAVE_STATUS_BITSPERSAMPLE = 16390,MCI_WAVE_STATUS_LEVEL = 16391,MCI_WAVE_SET_ANYINPUT = 0,MCI_WAVE_SET_ANYOUTPUT = 0,MCI_WAVE_GETDEVCAPS_INPUTS = 16385,MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386,MCI_SEQ_DIV_PPQN = 1216,MCI_SEQ_DIV_SMPTE_24 = 1217,MCI_SEQ_DIV_SMPTE_25 = 1218,MCI_SEQ_DIV_SMPTE_30DROP = 1219,MCI_SEQ_DIV_SMPTE_30 = 1220,MCI_SEQ_FORMAT_SONGPTR = 16385,MCI_SEQ_FILE = 16386,MCI_SEQ_MIDI = 16387,MCI_SEQ_SMPTE = 16388,MCI_SEQ_NONE = -3,MCI_SEQ_MAPPER = -1,MCI_SEQ_STATUS_TEMPO = 16386,MCI_SEQ_STATUS_PORT = 16387,MCI_SEQ_STATUS_SLAVE = 16391,MCI_SEQ_STATUS_MASTER = 16392,MCI_SEQ_STATUS_OFFSET = 16393,MCI_SEQ_STATUS_DIVTYPE = 16394,MCI_SEQ_STATUS_NAME = 16395,MCI_SEQ_STATUS_COPYRIGHT = 16396,MCI_SEQ_SET_TEMPO = 0,MCI_SEQ_SET_PORT = 0,MCI_SEQ_SET_SLAVE = 0,MCI_SEQ_SET_MASTER = 0,MCI_SEQ_SET_OFFSET = 0,MCI_ANIM_OPEN_WS = 0,MCI_ANIM_OPEN_PARENT = 0,MCI_ANIM_OPEN_NOSTATIC = 0,MCI_ANIM_PLAY_SPEED = 0,MCI_ANIM_PLAY_REVERSE = 0,MCI_ANIM_PLAY_FAST = 0,MCI_ANIM_PLAY_SLOW = 0,MCI_ANIM_PLAY_SCAN = 0,MCI_ANIM_STEP_REVERSE = 0,MCI_ANIM_STEP_FRAMES = 0,MCI_ANIM_STATUS_SPEED = 16385,MCI_ANIM_STATUS_FORWARD = 16386,MCI_ANIM_STATUS_HWND = 16387,MCI_ANIM_STATUS_HPAL = 16388,MCI_ANIM_STATUS_STRETCH = 16389,MCI_ANIM_INFO_TEXT = 0,MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385,MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386,MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387,MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388,MCI_ANIM_GETDEVCAPS_PALETTES = 16390,MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391,MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392,MCI_ANIM_REALIZE_NORM = 0,MCI_ANIM_REALIZE_BKGD = 0,MCI_ANIM_WINDOW_HWND = 0,MCI_ANIM_WINDOW_STATE = 0,MCI_ANIM_WINDOW_TEXT = 0,MCI_ANIM_WINDOW_ENABLE_STRETCH = 0,MCI_ANIM_WINDOW_DISABLE_STRETCH = 0,MCI_ANIM_WINDOW_DEFAULT = 0,MCI_ANIM_RECT = 0,MCI_ANIM_PUT_SOURCE = 0,MCI_ANIM_PUT_DESTINATION = 0,MCI_ANIM_WHERE_SOURCE = 0,MCI_ANIM_WHERE_DESTINATION = 0,MCI_ANIM_UPDATE_HDC = 0,MCI_OVLY_OPEN_WS = 0,MCI_OVLY_OPEN_PARENT = 0,MCI_OVLY_STATUS_HWND = 16385,MCI_OVLY_STATUS_STRETCH = 16386,MCI_OVLY_INFO_TEXT = 0,MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385,MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386,MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387,MCI_OVLY_WINDOW_HWND = 0,MCI_OVLY_WINDOW_STATE = 0,MCI_OVLY_WINDOW_TEXT = 0,MCI_OVLY_WINDOW_ENABLE_STRETCH = 0,MCI_OVLY_WINDOW_DISABLE_STRETCH = 0,MCI_OVLY_WINDOW_DEFAULT = 0,MCI_OVLY_RECT = 0,MCI_OVLY_PUT_SOURCE = 0,MCI_OVLY_PUT_DESTINATION = 0,MCI_OVLY_PUT_FRAME = 0,MCI_OVLY_PUT_VIDEO = 0,MCI_OVLY_WHERE_SOURCE = 0,MCI_OVLY_WHERE_DESTINATION = 0,MCI_OVLY_WHERE_FRAME = 0,MCI_OVLY_WHERE_VIDEO = 0,NEWTRANSPARENT = 3,QUERYROPSUPPORT = 40,SELECTDIB = 41,_INC_MSVIDEO = 50,DV_ERR_OK = 0,DV_ERR_BASE = 1,DV_ERR_NONSPECIFIC = 1,DV_ERR_BADFORMAT = 2,DV_ERR_STILLPLAYING = 3,DV_ERR_UNPREPARED = 4,DV_ERR_SYNC = 5,DV_ERR_TOOMANYCHANNELS = 6,DV_ERR_NOTDETECTED = 7,DV_ERR_BADINSTALL = 8,DV_ERR_CREATEPALETTE = 9,DV_ERR_SIZEFIELD = 10,DV_ERR_PARAM1 = 11,DV_ERR_PARAM2 = 12,DV_ERR_CONFIG1 = 13,DV_ERR_CONFIG2 = 14,DV_ERR_FLAGS = 15,DV_ERR_13 = 16,DV_ERR_NOTSUPPORTED = 17,DV_ERR_NOMEM = 18,DV_ERR_ALLOCATED = 19,DV_ERR_BADDEVICEID = 20,DV_ERR_INVALHANDLE = 21,DV_ERR_BADERRNUM = 22,DV_ERR_NO_BUFFERS = 23,DV_ERR_MEM_CONFLICT = 24,DV_ERR_IO_CONFLICT = 25,DV_ERR_DMA_CONFLICT = 26,DV_ERR_INT_CONFLICT = 27,DV_ERR_PROTECT_ONLY = 28,DV_ERR_LASTERROR = 28,DV_ERR_USER_MSG = 1001,DV_VM_OPEN = 976,DV_VM_CLOSE = 977,DV_VM_DATA = 978,DV_VM_ERROR = 979,VHDR_DONE = 1,VHDR_PREPARED = 2,VHDR_INQUEUE = 4,VHDR_KEYFRAME = 8,VCAPS_OVERLAY = 1,VCAPS_SRC_CAN_CLIP = 2,VCAPS_DST_CAN_CLIP = 4,VCAPS_CAN_SCALE = 8,VIDEO_EXTERNALIN = 1,VIDEO_EXTERNALOUT = 2,VIDEO_IN = 4,VIDEO_OUT = 8,VIDEO_DLG_QUERY = 16,VIDEO_CONFIGURE_QUERY = -32768,VIDEO_CONFIGURE_SET = 4096,VIDEO_CONFIGURE_GET = 8192,VIDEO_CONFIGURE_QUERYSIZE = 1,VIDEO_CONFIGURE_CURRENT = 16,VIDEO_CONFIGURE_NOMINAL = 32,VIDEO_CONFIGURE_MIN = 64,VIDEO_CONFIGURE_MAX = 128,DVM_USER = 16384,DVM_CONFIGURE_START = 4096,DVM_CONFIGURE_END = 8191,DVM_PALETTE = 4097,DVM_FORMAT = 4098,DVM_PALETTERGB555 = 4099,DVM_SRC_RECT = 4100,DVM_DST_RECT = 4101,rmm = 23,rup = 639,rmj = 0,CT_CTYPE1 = 1,CT_CTYPE2 = 2,CT_CTYPE3 = 4,C1_UPPER = 1,C1_LOWER = 2,C1_DIGIT = 4,C1_SPACE = 8,C1_PUNCT = 16,C1_CNTRL = 32,C1_BLANK = 64,C1_XDIGIT = 128,C1_ALPHA = 256,C2_LEFTTORIGHT = 1,C2_RIGHTTOLEFT = 2,C2_EUROPENUMBER = 3,C2_EUROPESEPARATOR = 4,C2_EUROPETERMINATOR = 5,C2_ARABICNUMBER = 6,C2_COMMONSEPARATOR = 7,C2_BLOCKSEPARATOR = 8,C2_SEGMENTSEPARATOR = 9,C2_WHITESPACE = 10,C2_OTHERNEUTRAL = 11,C2_NOTAPPLICABLE = 0,C3_NONSPACING = 1,C3_DIACRITIC = 2,C3_VOWELMARK = 4,C3_SYMBOL = 8,C3_KATAKANA = 16,C3_HIRAGANA = 32,C3_HALFWIDTH = 64,C3_FULLWIDTH = 128,C3_IDEOGRAPH = 256,C3_KASHIDA = 512,C3_ALPHA = -32768,C3_NOTAPPLICABLE = 0,NORM_IGNOREKASHIDA = 0,LCMAP_LOWERCASE = 256,LCMAP_UPPERCASE = 512,LCMAP_SORTKEY = 1024,LCMAP_HALFWIDTH = 2048,LCMAP_FULLWIDTH = 4096,LCMAP_HIRAGANA = 8192,LCMAP_KATAKANA = 16384,LANG_NEUTRAL = 0,LANG_ALBANIAN = 28,LANG_ARABIC = 1,LANG_BAHASA = 33,LANG_BULGARIAN = 2,LANG_CATALAN = 3,LANG_CHINESE = 4,LANG_CZECH = 5,LANG_DANISH = 6,LANG_DUTCH = 19,LANG_ENGLISH = 9,LANG_FINNISH = 11,LANG_FRENCH = 12,LANG_GERMAN = 7,LANG_GREEK = 8,LANG_HEBREW = 13,LANG_HUNGARIAN = 14,LANG_ICELANDIC = 15,LANG_ITALIAN = 16,LANG_JAPANESE = 17,LANG_KOREAN = 18,LANG_NORWEGIAN = 20,LANG_POLISH = 21,LANG_PORTUGUESE = 22,LANG_RHAETO_ROMAN = 23,LANG_ROMANIAN = 24,LANG_RUSSIAN = 25,LANG_SERBO_CROATIAN = 26,LANG_SLOVAK = 27,LANG_SPANISH = 10,LANG_SWEDISH = 29,LANG_THAI = 30,LANG_TURKISH = 31,LANG_URDU = 32,SUBLANG_NEUTRAL = 0,SUBLANG_DEFAULT = 1,SUBLANG_SYS_DEFAULT = 2,SUBLANG_CHINESE_SIMPLIFIED = 2,SUBLANG_CHINESE_TRADITIONAL = 1,SUBLANG_DUTCH = 1,SUBLANG_DUTCH_BELGIAN = 2,SUBLANG_ENGLISH_US = 1,SUBLANG_ENGLISH_UK = 2,SUBLANG_ENGLISH_AUS = 3,SUBLANG_ENGLISH_CAN = 4,SUBLANG_ENGLISH_NZ = 5,SUBLANG_ENGLISH_EIRE = 6,SUBLANG_FRENCH = 1,SUBLANG_FRENCH_BELGIAN = 2,SUBLANG_FRENCH_CANADIAN = 3,SUBLANG_FRENCH_SWISS = 4,SUBLANG_GERMAN = 1,SUBLANG_GERMAN_SWISS = 2,SUBLANG_GERMAN_AUSTRIAN = 3,SUBLANG_ITALIAN = 1,SUBLANG_ITALIAN_SWISS = 2,SUBLANG_NORWEGIAN_BOKMAL = 1,SUBLANG_NORWEGIAN_NYNORSK = 2,SUBLANG_PORTUGUESE = 2,SUBLANG_PORTUGUESE_BRAZILIAN = 1,SUBLANG_SERBO_CROATIAN_CYRILLIC = 2,SUBLANG_SERBO_CROATIAN_LATIN = 1,SUBLANG_SPANISH = 1,SUBLANG_SPANISH_MEXICAN = 2,SUBLANG_SPANISH_MODERN = 3,CTRY_DEFAULT = 0,CTRY_AUSTRALIA = 61,CTRY_AUSTRIA = 43,CTRY_BELGIUM = 32,CTRY_BRAZIL = 55,CTRY_CANADA = 2,CTRY_DENMARK = 45,CTRY_FINLAND = 358,CTRY_FRANCE = 33,CTRY_GERMANY = 49,CTRY_ICELAND = 354,CTRY_IRELAND = 353,CTRY_ITALY = 39,CTRY_JAPAN = 81,CTRY_MEXICO = 52,CTRY_NETHERLANDS = 31,CTRY_NEW_ZEALAND = 64,CTRY_NORWAY = 47,CTRY_PORTUGAL = 351,CTRY_PRCHINA = 86,CTRY_SOUTH_KOREA = 82,CTRY_SPAIN = 34,CTRY_SWEDEN = 46,CTRY_SWITZERLAND = 41,CTRY_TAIWAN = 886,CTRY_UNITED_KINGDOM = 44,CTRY_UNITED_STATES = 1,LOCALE_NOUSEROVERRIDE = 0,LOCALE_ILANGUAGE = 1,LOCALE_SLANGUAGE = 2,LOCALE_SENGLANGUAGE = 4097,LOCALE_SABBREVLANGNAME = 3,LOCALE_SNATIVELANGNAME = 4,LOCALE_ICOUNTRY = 5,LOCALE_SCOUNTRY = 6,LOCALE_SENGCOUNTRY = 4098,LOCALE_SABBREVCTRYNAME = 7,LOCALE_SNATIVECTRYNAME = 8,LOCALE_IDEFAULTLANGUAGE = 9,LOCALE_IDEFAULTCOUNTRY = 10,LOCALE_IDEFAULTCODEPAGE = 11,LOCALE_IDEFAULTANSICODEPAGE = 4100,LOCALE_SLIST = 12,LOCALE_IMEASURE = 13,LOCALE_SDECIMAL = 14,LOCALE_STHOUSAND = 15,LOCALE_SGROUPING = 16,LOCALE_IDIGITS = 17,LOCALE_ILZERO = 18,LOCALE_INEGNUMBER = 4112,LOCALE_SNATIVEDIGITS = 19,LOCALE_SCURRENCY = 20,LOCALE_SINTLSYMBOL = 21,LOCALE_SMONDECIMALSEP = 22,LOCALE_SMONTHOUSANDSEP = 23,LOCALE_SMONGROUPING = 24,LOCALE_ICURRDIGITS = 25,LOCALE_IINTLCURRDIGITS = 26,LOCALE_ICURRENCY = 27,LOCALE_INEGCURR = 28,LOCALE_SDATE = 29,LOCALE_STIME = 30,LOCALE_SSHORTDATE = 31,LOCALE_SLONGDATE = 32,LOCALE_STIMEFORMAT = 4099,LOCALE_IDATE = 33,LOCALE_ILDATE = 34,LOCALE_ITIME = 35,LOCALE_ITIMEMARKPOSN = 4101,LOCALE_ICENTURY = 36,LOCALE_ITLZERO = 37,LOCALE_IDAYLZERO = 38,LOCALE_IMONLZERO = 39,LOCALE_S1159 = 40,LOCALE_S2359 = 41,LOCALE_ICALENDARTYPE = 4105,LOCALE_IOPTIONALCALENDAR = 4107,LOCALE_IFIRSTDAYOFWEEK = 4108,LOCALE_IFIRSTWEEKOFYEAR = 4109,LOCALE_SDAYNAME1 = 42,LOCALE_SDAYNAME2 = 43,LOCALE_SDAYNAME3 = 44,LOCALE_SDAYNAME4 = 45,LOCALE_SDAYNAME5 = 46,LOCALE_SDAYNAME6 = 47,LOCALE_SDAYNAME7 = 48,LOCALE_SABBREVDAYNAME1 = 49,LOCALE_SABBREVDAYNAME2 = 50,LOCALE_SABBREVDAYNAME3 = 51,LOCALE_SABBREVDAYNAME4 = 52,LOCALE_SABBREVDAYNAME5 = 53,LOCALE_SABBREVDAYNAME6 = 54,LOCALE_SABBREVDAYNAME7 = 55,LOCALE_SMONTHNAME1 = 56,LOCALE_SMONTHNAME2 = 57,LOCALE_SMONTHNAME3 = 58,LOCALE_SMONTHNAME4 = 59,LOCALE_SMONTHNAME5 = 60,LOCALE_SMONTHNAME6 = 61,LOCALE_SMONTHNAME7 = 62,LOCALE_SMONTHNAME8 = 63,LOCALE_SMONTHNAME9 = 64,LOCALE_SMONTHNAME10 = 65,LOCALE_SMONTHNAME11 = 66,LOCALE_SMONTHNAME12 = 67,LOCALE_SMONTHNAME13 = 4110,LOCALE_SABBREVMONTHNAME1 = 68,LOCALE_SABBREVMONTHNAME2 = 69,LOCALE_SABBREVMONTHNAME3 = 70,LOCALE_SABBREVMONTHNAME4 = 71,LOCALE_SABBREVMONTHNAME5 = 72,LOCALE_SABBREVMONTHNAME6 = 73,LOCALE_SABBREVMONTHNAME7 = 74,LOCALE_SABBREVMONTHNAME8 = 75,LOCALE_SABBREVMONTHNAME9 = 76,LOCALE_SABBREVMONTHNAME10 = 77,LOCALE_SABBREVMONTHNAME11 = 78,LOCALE_SABBREVMONTHNAME12 = 79,LOCALE_SABBREVMONTHNAME13 = 4111,LOCALE_SPOSITIVESIGN = 80,LOCALE_SNEGATIVESIGN = 81,LOCALE_IPOSSIGNPOSN = 82,LOCALE_INEGSIGNPOSN = 83,LOCALE_IPOSSYMPRECEDES = 84,LOCALE_IPOSSEPBYSPACE = 85,LOCALE_INEGSYMPRECEDES = 86,LOCALE_INEGSEPBYSPACE = 87,LANG_SYSTEM_DEFAULT = 2048,LANG_USER_DEFAULT = 1024,LOCALE_SYSTEM_DEFAULT = 2048,LOCALE_USER_DEFAULT = 1024,P_WAIT = 0,P_NOWAIT = 1,P_OVERLAY = 2,P_NOWAITO = 3,P_DETACH = 4,WAIT_CHILD = 0,WAIT_GRANDCHILD = 1,SH_COMPAT = 0,SH_DENYRW = 16,SH_DENYWR = 32,SH_DENYRD = 48,SH_DENYNO = 64,SH_DENYNONE = 64,ERROR_SUCCESS = 0,ERROR_BADDB = 1,ERROR_BADKEY = 2,ERROR_CANTOPEN = 3,ERROR_CANTREAD = 4,ERROR_CANTWRITE = 5,ERROR_OUTOFMEMORY = 6,ERROR_INVALID_PARAMETER = 7,ERROR_ACCESS_DENIED = 8,SE_ERR_SHARE = 26,SE_ERR_ASSOCINCOMPLETE = 27,SE_ERR_DDETIMEOUT = 28,SE_ERR_DDEFAIL = 29,SE_ERR_DDEBUSY = 30,SE_ERR_NOASSOC = 31,SIG_DFL = 0,SIG_IGN = 1,SIG_ERR = -1,};
enum MACRO_ERROR {ERROR = 0,NULLREGION = 1,SIMPLEREGION = 2,};
enum MACRO_FNERR {FNERR_FILENAMECODES = 0x3000,FNERR_SUBCLASSFAILURE = 0x3001,FNERR_INVALIDFILENAME = 0x3002,FNERR_BUFFERTOOSMALL = 0x3003,};
enum MACRO_FRAME {FRAME_FAR = 0,FRAME_NEAR = 1,};
enum MACRO_FRERR {FRERR_FINDREPLACECODES = 0x4000,FRERR_BUFFERLENGTHZERO = 0x4001,};
enum MACRO_HDATA {HDATA_APPOWNED = 0x1,};
enum MACRO_HFILE {HFILE_ERROR = -1,};
enum MACRO_HTTOP {HTTOP = 12,};
enum MACRO_IDYES {IDYES = 6,};
enum MACRO_OLE_E {OLE_E_OLEVERB = 0,OLE_E_ADVF = 1,OLE_E_ENUM_NOMORE = 2,OLE_E_ADVISENOTSUPPORTED = 3,OLE_E_NOCONNECTION = 4,OLE_E_NOTRUNNING = 5,OLE_E_NOCACHE = 6,OLE_E_BLANK = 7,OLE_E_CLASSDIFF = 8,OLE_E_CANT_GETMONIKER = 9,OLE_E_CANT_BINDTOSOURCE = 10,OLE_E_STATIC = 11,OLE_E_PROMPTSAVECANCELLED = 12,OLE_E_INVALIDRECT = 13,OLE_E_WRONGCOMPOBJ = 14,OLE_E_INVALIDHWND = 15,OLE_E_NOT_INPLACEACTIVE = 16,OLE_E_CANTCONVERT = 17,OLE_E_NOSTORAGE = 18,};
enum MACRO_OLE_S {OLE_S_USEREG = 0,OLE_S_STATIC = 1,OLE_S_MAC_CLIPFORMAT = 2,};
enum MACRO_PDERR {PDERR_PRINTERCODES = 0x1000,PDERR_SETUPFAILURE = 0x1001,PDERR_PARSEFAILURE = 0x1002,PDERR_RETDEFFAILURE = 0x1003,PDERR_LOADDRVFAILURE = 0x1004,PDERR_GETDEVMODEFAIL = 0x1005,PDERR_INITFAILURE = 0x1006,PDERR_NODEVICES = 0x1007,PDERR_NODEFAULTPRN = 0x1008,PDERR_DNDMMISMATCH = 0x1009,PDERR_CREATEICFAILURE = 0x100A,PDERR_PRINTERNOTFOUND = 0x100B,PDERR_DEFAULTDIFFERENT = 0x100C,};
enum MACRO_PITCH {DEFAULT_PITCH = 0x0,FIXED_PITCH = 0x1,VARIABLE_PITCH = 0x2,};
enum MACRO_REGDB {REGDB_E_FIRST = 0x150,REGDB_E_LAST = 0x15F,REGDB_S_FIRST = 0x150,REGDB_S_LAST = 0x15F,};
enum MACRO_SYVHI {SYVHI_SPECIAL = 0,SYVHI_ANSI = 1,SYVHI_GESTURE = 2,SYVHI_KANJI = 3,SYVHI_SHAPE = 4,SYVHI_UNICODE = 5,SYVHI_VKEY = 6,};
enum MACRO_TRAIN {TRAIN_NONE = 0x0,TRAIN_DEFAULT = 0x1,TRAIN_CUSTOM = 0x2,TRAIN_BOTH = 0x3,TRAIN_SAVE = 0x0,TRAIN_REVERT = 0x1,};
enum MACRO_WSANO {WSANO_DATA = 11004,NO_DATA = 11004,};
enum MACRO_XTYPF {XTYPF_NOBLOCK = 0x2,XTYPF_NODATA = 0x4,XTYPF_ACKREQ = 0x8,};
enum MACRO_chx10 {chx10 = 0x419,};
enum MACRO_chx11 {chx11 = 0x41A,};
enum MACRO_chx12 {chx12 = 0x41B,};
enum MACRO_chx13 {chx13 = 0x41C,};
enum MACRO_chx14 {chx14 = 0x41D,};
enum MACRO_chx15 {chx15 = 0x41E,};
enum MACRO_chx16 {chx16 = 0x41D,};
enum MACRO_cmb10 {cmb10 = 0x479,};
enum MACRO_cmb11 {cmb11 = 0x47A,};
enum MACRO_cmb12 {cmb12 = 0x47B,};
enum MACRO_cmb13 {cmb13 = 0x47C,};
enum MACRO_cmb14 {cmb14 = 0x47D,};
enum MACRO_cmb15 {cmb15 = 0x47E,};
enum MACRO_cmb16 {cmb16 = 0x47F,};
enum MACRO_edt10 {edt10 = 0x489,};
enum MACRO_edt11 {edt11 = 0x48A,};
enum MACRO_edt12 {edt12 = 0x48B,};
enum MACRO_edt13 {edt13 = 0x48C,};
enum MACRO_edt14 {edt14 = 0x48D,};
enum MACRO_edt15 {edt15 = 0x48E,};
enum MACRO_edt16 {edt16 = 0x48F,};
enum MACRO_lst10 {lst10 = 0x469,};
enum MACRO_lst11 {lst11 = 0x46A,};
enum MACRO_lst12 {lst12 = 0x46B,};
enum MACRO_lst13 {lst13 = 0x46C,};
enum MACRO_lst14 {lst14 = 0x46D,};
enum MACRO_lst15 {lst15 = 0x46E,};
enum MACRO_lst16 {lst16 = 0x46F,};
enum MACRO_psh10 {psh10 = 0x409,};
enum MACRO_psh11 {psh11 = 0x40A,};
enum MACRO_psh12 {psh12 = 0x40B,};
enum MACRO_psh13 {psh13 = 0x40C,};
enum MACRO_psh14 {psh14 = 0x40D,};
enum MACRO_psh15 {psh15 = 0x40E,};
enum MACRO_psh16 {psh16 = 0x40F,};
enum MACRO_rad10 {rad10 = 0x429,};
enum MACRO_rad11 {rad11 = 0x42A,};
enum MACRO_rad12 {rad12 = 0x42B,};
enum MACRO_rad13 {rad13 = 0x42C,};
enum MACRO_rad14 {rad14 = 0x42D,};
enum MACRO_rad15 {rad15 = 0x42E,};
enum MACRO_rad16 {rad16 = 0x42F,};
enum MACRO_stc10 {stc10 = 0x449,};
enum MACRO_stc11 {stc11 = 0x44A,};
enum MACRO_stc12 {stc12 = 0x44B,};
enum MACRO_stc13 {stc13 = 0x44C,};
enum MACRO_stc14 {stc14 = 0x44D,};
enum MACRO_stc15 {stc15 = 0x44E,};
enum MACRO_stc16 {stc16 = 0x44F,};
enum MACRO_stc17 {stc17 = 0x450,};
enum MACRO_stc18 {stc18 = 0x451,};
enum MACRO_stc19 {stc19 = 0x452,};
enum MACRO_stc20 {stc20 = 0x453,};
enum MACRO_stc21 {stc21 = 0x454,};
enum MACRO_stc22 {stc22 = 0x455,};
enum MACRO_stc23 {stc23 = 0x456,};
enum MACRO_stc24 {stc24 = 0x457,};
enum MACRO_stc25 {stc25 = 0x458,};
enum MACRO_stc26 {stc26 = 0x459,};
enum MACRO_stc27 {stc27 = 0x45A,};
enum MACRO_stc28 {stc28 = 0x45B,};
enum MACRO_stc29 {stc29 = 0x45C,};
enum MACRO_stc30 {stc30 = 0x45D,};
enum MACRO_stc31 {stc31 = 0x45E,};
enum MACRO_stc32 {stc32 = 0x45F,};
typedef struct midioutcaps_tag MIDIOUTCAPS;
typedef struct tagMODULEENTRY MODULEENTRY;
typedef struct tagMONCBSTRUCT MONCBSTRUCT;
typedef struct tagNFYLOGERROR NFYLOGERROR;
typedef struct tagNFYSTARTDLL NFYSTARTDLL;
typedef struct tagPAINTSTRUCT PAINTSTRUCT;
typedef struct midiincaps_tag *PMIDIINCAPS;
typedef struct tagNEWCPLINFO *PNEWCPLINFO;
typedef struct waveformat_tag *PWAVEFORMAT;
typedef struct waveincaps_tag *PWAVEINCAPS;
typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_nb SOCKADDR_NB;
typedef struct sockaddr_tp SOCKADDR_TP;
typedef struct tagSYSHEAPINFO SYSHEAPINFO;
typedef struct tagTTPOLYCURVE TTPOLYCURVE;
typedef struct waveoutcaps_tag WAVEOUTCAPS;
typedef void (*_CatcherPTR)();
struct _exceptionl {int type;char *name;long double arg1;long double arg2;long double retval;};
enum tagCALLCONV {CC_CDECL = 0x1,CC_MSCPASCAL = 0x2,CC_PASCAL = 0x2,CC_MACPASCAL = 0x3,CC_STDCALL = 0x4,CC_RESERVED = 0x5,CC_SYSCALL = 0x6,CC_MPWCDECL = 0x7,CC_MPWPASCAL = 0x8,CC_MAX = 0x9,};
enum tagCALLTYPE {CALLTYPE_TOPLEVEL = 0x1,CALLTYPE_NESTED = 0x2,CALLTYPE_ASYNC = 0x3,CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,CALLTYPE_ASYNC_CALLPENDING = 0x5,};
enum tagDESCKIND {DESCKIND_NONE = 0x0,DESCKIND_FUNCDESC = 0x1,DESCKIND_VARDESC = 0x2,DESCKIND_TYPECOMP = 0x3,DESCKIND_IMPLICITAPPOBJ = 0x4,DESCKIND_MAX = 0x5,};
enum tagDVASPECT {DVASPECT_CONTENT = 0x1,DVASPECT_THUMBNAIL = 0x2,DVASPECT_ICON = 0x4,DVASPECT_DOCPRINT = 0x8,};
enum tagFUNCKIND {FUNC_VIRTUAL = 0x0,FUNC_PUREVIRTUAL = 0x1,FUNC_NONVIRTUAL = 0x2,FUNC_STATIC = 0x3,FUNC_DISPATCH = 0x4,};
enum tagLIBFLAGS {LIBFLAG_FRESTRICTED = 0x1,LIBFLAG_FCONTROL = 0x2,LIBFLAG_FHIDDEN = 0x4,};
enum tagLOCKTYPE {LOCK_WRITE = 0x1,LOCK_EXCLUSIVE = 0x2,LOCK_ONLYONCE = 0x4,};
enum tagMKREDUCE {MKRREDUCE_ONE = 0x0,MKRREDUCE_TOUSER = 0x0,MKRREDUCE_THROUGHUSER = 0x0,MKRREDUCE_ALL = 0x0,};
enum tagOLECLOSE {OLECLOSE_SAVEIFDIRTY = 0x0,OLECLOSE_NOSAVE = 0x1,OLECLOSE_PROMPTSAVE = 0x2,};
enum tagOLECONTF {OLECONTF_EMBEDDINGS = 0x1,OLECONTF_LINKS = 0x2,OLECONTF_OTHERS = 0x4,OLECONTF_ONLYUSER = 0x8,OLECONTF_ONLYIFRUNNING = 0x10,};
enum tagSTATFLAG {STATFLAG_DEFAULT = 0x0,STATFLAG_NONAME = 0x1,};
enum tagTYPEKIND {TKIND_ENUM = 0x0,TKIND_RECORD = 0x1,TKIND_MODULE = 0x2,TKIND_INTERFACE = 0x3,TKIND_DISPATCH = 0x4,TKIND_COCLASS = 0x5,TKIND_ALIAS = 0x6,TKIND_UNION = 0x7,TKIND_MAX = 0x8,};
enum tagVARFLAGS {VARFLAG_FREADONLY = 0x1,VARFLAG_FSOURCE = 0x2,VARFLAG_FBINDABLE = 0x4,VARFLAG_FREQUESTEDIT = 0x8,VARFLAG_FDISPLAYBIND = 0x10,VARFLAG_FDEFAULTBIND = 0x20,VARFLAG_FHIDDEN = 0x40,};
typedef struct tagBITMAPINFO BITMAPINFO;
typedef struct tagCALBSTRUCT CALBSTRUCT;
typedef struct tagCHOOSEFONT CHOOSEFONT;
typedef struct tagCLASSENTRY CLASSENTRY;
typedef struct tagDISPPARAMS DISPPARAMS;
typedef struct tagGLOBALINFO GLOBALINFO;
struct IErrorInfo {struct IErrorInfoVtbl *lpVtbl;};
struct ILockBytes {struct ILockBytesVtbl *lpVtbl;};
struct IOleCache2 {struct IOleCache2Vtbl *lpVtbl;};
struct IOleObject {struct IOleObjectVtbl *lpVtbl;};
struct IOleWindow {struct IOleWindowVtbl *lpVtbl;};
typedef struct tagLOCALENTRY LOCALENTRY;
typedef struct tagLOGPALETTE LOGPALETTE;
typedef int *LPCATCHBUF;
typedef IDispatch *LPDISPATCH;
typedef struct tagELEMDESC *LPELEMDESC;
typedef struct tagFMS_LOAD *LPFMS_LOAD;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef struct _MMCKINFO *LPMMCKINFO;
typedef struct _MMIOINFO *LPMMIOINFO;
typedef IOleCache *LPOLECACHE;
typedef struct protoent *LPPROTOENT;
typedef struct tagRCRESULT *LPRCRESULT;
typedef struct sockaddr *LPSOCKADDR;
typedef struct timecaps_tag *LPTIMECAPS;
typedef struct tagTLIBATTR *LPTLIBATTR;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef ITypeComp *LPTYPECOMP;
typedef ITypeInfo *LPTYPEINFO;
typedef struct videohdr_tag *LPVIDEOHDR;
enum MACRO_BOOL {FALSE = 0,TRUE = 1,};
enum MACRO_CADV {CADV_LATEACK = 0xFFFF,};
enum MACRO_CLIP {CLIP_DEFAULT_PRECIS = 0x0,CLIP_CHARACTER_PRECIS = 0x1,CLIP_STROKE_PRECIS = 0x2,CLIP_MASK = 0xF,CLIP_LH_ANGLES = 0x10,CLIP_TT_ALWAYS = 0x20,CLIP_EMBEDDED = 0x80,};
enum MACRO_CPEX {CPEX_DEST_STDCALL = 0x0,CPEX_DEST_CDECL = 0x0,};
enum MACRO_CRUC {CRUC_REMOVE = 1,};
enum MACRO_CSTF {CSTF_CTSHOLD = 0x1,CSTF_DSRHOLD = 0x2,CSTF_RLSDHOLD = 0x4,CSTF_XOFFHOLD = 0x8,CSTF_XOFFSENT = 0x10,CSTF_EOF = 0x20,CSTF_TXIM = 0x40,};
enum MACRO_DATA {DATA_E_FIRST = 0x130,DATA_E_LAST = 0x13F,DATA_S_FIRST = 0x130,DATA_S_LAST = 0x13F,};
enum MACRO_DCTT {DCTT_BITMAP = 0x1,DCTT_DOWNLOAD = 0x2,DCTT_SUBDEV = 0x4,};
enum MACRO_DIRQ {DIRQ_QUERY = 1,DIRQ_DESCRIPTION = 2,DIRQ_CONFIGURE = 3,DIRQ_OPEN = 4,DIRQ_CLOSE = 5,DIRQ_SETWORDLISTS = 6,DIRQ_STRING = 7,DIRQ_SUGGEST = 8,DIRQ_ADD = 9,DIRQ_DELETE = 10,DIRQ_FLUSH = 11,DIRQ_RCCHANGE = 12,DIRQ_SYMBOLGRAPH = 13,DIRQ_INIT = 14,DIRQ_CLEANUP = 15,DIRQ_COPYRIGHT = 16,DIRQ_USER = 4096,};
enum MACRO_DISP {DISP_E_UNKNOWNINTERFACE = 1,DISP_E_MEMBERNOTFOUND = 3,DISP_E_PARAMNOTFOUND = 4,DISP_E_TYPEMISMATCH = 5,DISP_E_UNKNOWNNAME = 6,DISP_E_NONAMEDARGS = 7,DISP_E_BADVARTYPE = 8,DISP_E_EXCEPTION = 9,DISP_E_OVERFLOW = 10,DISP_E_BADINDEX = 11,DISP_E_UNKNOWNLCID = 12,DISP_E_ARRAYISLOCKED = 13,DISP_E_BADPARAMCOUNT = 14,DISP_E_PARAMNOTOPTIONAL = 15,DISP_E_BADCALLEE = 16,DISP_E_NOTACOLLECTION = 17,};
enum MACRO_DLGC {DLGC_WANTARROWS = 0x1,DLGC_WANTTAB = 0x2,DLGC_WANTALLKEYS = 0x4,DLGC_WANTMESSAGE = 0x4,DLGC_HASSETSEL = 0x8,DLGC_DEFPUSHBUTTON = 0x10,DLGC_UNDEFPUSHBUTTON = 0x20,DLGC_RADIOBUTTON = 0x40,DLGC_WANTCHARS = 0x80,DLGC_STATIC = 0x100,DLGC_BUTTON = 0x2000,};
enum MACRO_DMTT {DMTT_BITMAP = 1,DMTT_DOWNLOAD = 2,DMTT_SUBDEV = 3,};
enum MACRO_DRAW {VIEW_E_DRAW = 320,E_DRAW = 320,};
enum MACRO_ENUM {ENUM_E_FIRST = 0x1B0,ENUM_E_LAST = 0x1BF,ENUM_S_FIRST = 0x1B0,ENUM_S_LAST = 0x1BF,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 1,};
enum MACRO_FADF {FADF_AUTO = 0x1,FADF_STATIC = 0x2,FADF_EMBEDDED = 0x4,FADF_FIXEDSIZE = 0x10,FADF_BSTR = 0x100,FADF_UNKNOWN = 0x200,FADF_DISPATCH = 0x400,FADF_VARIANT = 0x800,FADF_RESERVED = 0xF0E8,};
enum MACRO_FONT {OEM_FIXED_FONT = 10,ANSI_FIXED_FONT = 11,ANSI_VAR_FONT = 12,SYSTEM_FONT = 13,DEVICE_DEFAULT_FONT = 14,};
enum MACRO_GFSR {GFSR_SYSTEMRESOURCES = 0x0,GFSR_GDIRESOURCES = 0x1,GFSR_USERRESOURCES = 0x2,};
enum MACRO_GGRC {GGRC_OK = 0,GGRC_DICTBUFTOOSMALL = 1,GGRC_PARAMERROR = 2,};
enum MACRO_GHND {GHND = 66,};
enum MACRO_GMEM {GMEM_FIXED = 0x0,GMEM_MOVEABLE = 0x2,GMEM_NOCOMPACT = 0x10,GMEM_NODISCARD = 0x20,GMEM_ZEROINIT = 0x40,GMEM_MODIFY = 0x80,GMEM_DISCARDABLE = 0x100,GMEM_NOT_BANKED = 0x1000,GMEM_SHARE = 0x2000,GMEM_DDESHARE = 0x2000,GMEM_NOTIFY = 0x4000,GMEM_LOWER = 0x1000,};
enum MACRO_GPTR {GPTR = 64,};
enum MACRO_HCBT {HCBT_MOVESIZE = 0,HCBT_MINMAX = 1,HCBT_QS = 2,HCBT_CREATEWND = 3,HCBT_DESTROYWND = 4,HCBT_ACTIVATE = 5,HCBT_CLICKSKIPPED = 6,HCBT_KEYSKIPPED = 7,HCBT_SYSCOMMAND = 8,HCBT_SETFOCUS = 9,};
enum MACRO_HEAP {NORMAL_HEAP = 0,USER_HEAP = 1,GDI_HEAP = 2,};
enum MACRO_HEKK {HEKK_DEFAULT = 0,HEKK_CONVERT = 1,HEKK_CANDIDATE = 2,};
enum MACRO_HELP {HELP_CONTEXT = 0x1,HELP_QUIT = 0x2,HELP_INDEX = 0x3,HELP_CONTENTS = 0x3,HELP_HELPONHELP = 0x4,HELP_SETINDEX = 0x5,HELP_SETCONTENTS = 0x5,HELP_CONTEXTPOPUP = 0x8,HELP_FORCEFILE = 0x9,HELP_KEY = 0x101,HELP_COMMAND = 0x102,HELP_PARTIALKEY = 0x105,HELP_MULTIKEY = 0x201,HELP_SETWINPOS = 0x203,};
enum MACRO_HIDE {HIDE_WINDOW = 0,};
enum MACRO_HKEY {HKEY_CLASSES_ROOT = 1,};
enum MACRO_HWND {HWND_BROADCAST = 0xFFFF,};
enum MACRO_IDNO {IDNO = 7,};
enum MACRO_IDOK {IDOK = 1,IDCANCEL = 2,};
enum MACRO_IEEE {IEEE = 1,};
enum MACRO_LHND {LHND = 66,};
enum MACRO_LMEM {LMEM_FIXED = 0x0,LMEM_MOVEABLE = 0x2,LMEM_NOCOMPACT = 0x10,LMEM_NODISCARD = 0x20,LMEM_ZEROINIT = 0x40,LMEM_MODIFY = 0x80,LMEM_DISCARDABLE = 0xF00,};
enum MACRO_LPTR {LPTR = 64,};
enum MACRO_MAPI {MAPI_E_CALL_FAILED = 8,MAPI_E_NOT_ENOUGH_MEMORY = 2,MAPI_E_INVALID_PARAMETER = 3,MAPI_E_INTERFACE_NOT_SUPPORTED = 4,MAPI_E_NO_ACCESS = 9,MAPI_E_NO_SUPPORT = 258,MAPI_E_BAD_CHARWIDTH = 259,MAPI_E_STRING_TOO_LONG = 261,MAPI_E_UNKNOWN_FLAGS = 262,MAPI_E_INVALID_ENTRYID = 263,MAPI_E_INVALID_OBJECT = 264,MAPI_E_OBJECT_CHANGED = 265,MAPI_E_OBJECT_DELETED = 266,MAPI_E_BUSY = 267,MAPI_E_NOT_ENOUGH_DISK = 269,MAPI_E_NOT_ENOUGH_RESOURCES = 270,MAPI_E_NOT_FOUND = 271,MAPI_E_VERSION = 272,MAPI_E_LOGON_FAILED = 273,MAPI_E_SESSION_LIMIT = 274,MAPI_E_USER_CANCEL = 275,MAPI_E_UNABLE_TO_ABORT = 276,MAPI_E_NETWORK_ERROR = 277,MAPI_E_DISK_ERROR = 278,MAPI_E_TOO_COMPLEX = 279,MAPI_E_BAD_COLUMN = 280,MAPI_E_EXTENDED_ERROR = 281,MAPI_E_COMPUTED = 282,MAPI_E_CORRUPT_DATA = 283,MAPI_E_UNCONFIGURED = 284,MAPI_E_FAILONEPROVIDER = 285,MAPI_E_UNKNOWN_CPID = 286,MAPI_E_UNKNOWN_LCID = 287,MAPI_E_PASSWORD_CHANGE_REQUIRED = 288,MAPI_E_PASSWORD_EXPIRED = 289,MAPI_E_INVALID_WORKSTATION_ACCOUNT = 290,MAPI_E_INVALID_ACCESS_TIME = 291,MAPI_E_ACCOUNT_DISABLED = 292,MAPI_E_END_OF_SESSION = 512,MAPI_E_UNKNOWN_ENTRYID = 513,MAPI_E_MISSING_REQUIRED_COLUMN = 514,MAPI_W_NO_SERVICE = 515,MAPI_E_BAD_VALUE = 769,MAPI_E_INVALID_TYPE = 770,MAPI_E_TYPE_NO_SUPPORT = 771,MAPI_E_UNEXPECTED_TYPE = 772,MAPI_E_TOO_BIG = 773,MAPI_E_DECLINE_COPY = 774,MAPI_E_UNEXPECTED_ID = 775,MAPI_W_ERRORS_RETURNED = 896,MAPI_E_UNABLE_TO_COMPLETE = 1024,MAPI_E_TIMEOUT = 1025,MAPI_E_TABLE_EMPTY = 1026,MAPI_E_TABLE_TOO_BIG = 1027,MAPI_E_INVALID_BOOKMARK = 1029,MAPI_W_POSITION_CHANGED = 1153,MAPI_W_APPROX_COUNT = 1154,MAPI_E_WAIT = 1280,MAPI_E_CANCEL = 1281,MAPI_E_NOT_ME = 1282,MAPI_W_CANCEL_MESSAGE = 1408,MAPI_E_CORRUPT_STORE = 1536,MAPI_E_NOT_IN_QUEUE = 1537,MAPI_E_NO_SUPPRESS = 1538,MAPI_E_COLLISION = 1540,MAPI_E_NOT_INITIALIZED = 1541,MAPI_E_NON_STANDARD = 1542,MAPI_E_NO_RECIPIENTS = 1543,MAPI_E_SUBMITTED = 1544,MAPI_E_HAS_FOLDERS = 1545,MAPI_E_HAS_MESSAGES = 1546,MAPI_E_FOLDER_CYCLE = 1547,MAPI_W_PARTIAL_COMPLETION = 1664,MAPI_E_AMBIGUOUS_RECIP = 1792,};
enum MACRO_MDIS {MDIS_ALLCHILDSTYLES = 0x1,};
enum MACRO_MENU {MENU_TEXT_LEN = 40,};
enum MACRO_META {META_SETBKCOLOR = 0x201,META_SETBKMODE = 0x102,META_SETMAPMODE = 0x103,META_SETROP2 = 0x104,META_SETRELABS = 0x105,META_SETPOLYFILLMODE = 0x106,META_SETSTRETCHBLTMODE = 0x107,META_SETTEXTCHAREXTRA = 0x108,META_SETTEXTCOLOR = 0x209,META_SETTEXTJUSTIFICATION = 0x20A,META_SETWINDOWORG = 0x20B,META_SETWINDOWEXT = 0x20C,META_SETVIEWPORTORG = 0x20D,META_SETVIEWPORTEXT = 0x20E,META_OFFSETWINDOWORG = 0x20F,META_SCALEWINDOWEXT = 0x410,META_OFFSETVIEWPORTORG = 0x211,META_SCALEVIEWPORTEXT = 0x412,META_LINETO = 0x213,META_MOVETO = 0x214,META_EXCLUDECLIPRECT = 0x415,META_INTERSECTCLIPRECT = 0x416,META_ARC = 0x817,META_ELLIPSE = 0x418,META_FLOODFILL = 0x419,META_PIE = 0x81A,META_RECTANGLE = 0x41B,META_ROUNDRECT = 0x61C,META_PATBLT = 0x61D,META_SAVEDC = 0x1E,META_SETPIXEL = 0x41F,META_OFFSETCLIPRGN = 0x220,META_TEXTOUT = 0x521,META_BITBLT = 0x922,META_STRETCHBLT = 0xB23,META_POLYGON = 0x324,META_POLYLINE = 0x325,META_ESCAPE = 0x626,META_RESTOREDC = 0x127,META_FILLREGION = 0x228,META_FRAMEREGION = 0x429,META_INVERTREGION = 0x12A,META_PAINTREGION = 0x12B,META_SELECTCLIPREGION = 0x12C,META_SELECTOBJECT = 0x12D,META_SETTEXTALIGN = 0x12E,META_DRAWTEXT = 0x62F,META_CHORD = 0x830,META_SETMAPPERFLAGS = 0x231,META_EXTTEXTOUT = 0xA32,META_SETDIBTODEV = 0xD33,META_SELECTPALETTE = 0x234,META_REALIZEPALETTE = 0x35,META_ANIMATEPALETTE = 0x436,META_SETPALENTRIES = 0x37,META_POLYPOLYGON = 0x538,META_RESIZEPALETTE = 0x139,META_DIBBITBLT = 0x940,META_DIBSTRETCHBLT = 0xB41,META_DIBCREATEPATTERNBRUSH = 0x142,META_STRETCHDIB = 0xF43,META_EXTFLOODFILL = 0x548,META_RESETDC = 0x14C,META_STARTDOC = 0x14D,META_STARTPAGE = 0x4F,META_ENDPAGE = 0x50,META_ABORTDOC = 0x52,META_ENDDOC = 0x5E,META_DELETEOBJECT = 0x1F0,META_CREATEPALETTE = 0xF7,META_CREATEBRUSH = 0xF8,META_CREATEPATTERNBRUSH = 0x1F9,META_CREATEPENINDIRECT = 0x2FA,META_CREATEFONTINDIRECT = 0x2FB,META_CREATEBRUSHINDIRECT = 0x2FC,META_CREATEBITMAPINDIRECT = 0x2FD,META_CREATEBITMAP = 0x6FE,META_CREATEREGION = 0x6FF,};
enum MACRO_MK_E {MK_E_FIRST = 0x1E0,MK_E_LAST = 0x1EF,MK_S_FIRST = 0x1E0,MK_S_LAST = 0x1EF,};
enum MACRO_MODE {DOS_MODE = 0,OS2_MODE = 1,};
enum MACRO_MSGF {MSGF_DIALOGBOX = 0,MSGF_MENU = 2,MSGF_MOVE = 3,MSGF_SIZE = 4,MSGF_SCROLLBAR = 5,MSGF_NEXTWINDOW = 6,MSGF_MAINLOOP = 8,MSGF_USER = 4096,};
enum MACRO_NORM {NORM_IGNORECASE = 0x1,NORM_IGNORENONSPACE = 0x2,NORM_IGNORESYMBOLS = 0x4,NORM_IGNOREWIDTH = 0x8,NORM_IGNOREKANATYPE = 0x40,};
enum MACRO_NSIG {NSIG = 23,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_PATH {BEGIN_PATH = 4096,CLIP_TO_PATH = 4097,END_PATH = 4098,};
enum MACRO_PDTS {PDTS_LOMETRIC = 0x0,PDTS_HIMETRIC = 0x1,PDTS_HIENGLISH = 0x2,PDTS_SCALEMAX = 0x3,PDTS_DISPLAY = 0x3,PDTS_ARBITRARY = 0x4,PDTS_SCALEMASK = 0xF,PDTS_STANDARDSCALE = 0x2,PDTS_NOPENINFO = 0x100,PDTS_NOUPPOINTS = 0x200,PDTS_NOOEMDATA = 0x400,PDTS_NOCOLINEAR = 0x800,PDTS_COMPRESSED = 0x8000,PDTS_COMPRESSMETHOD = 0xF0,PDTS_COMPRESS2NDDERIV = 0x10,};
enum MACRO_PDTT {PDTT_DEFAULT = 0x0,PDTT_PENINFO = 0x100,PDTT_UPPOINTS = 0x200,PDTT_OEMDATA = 0x400,PDTT_COLINEAR = 0x800,PDTT_COMPRESS = 0x8000,PDTT_DECOMPRESS = 0x4000,PDTT_ALL = 0xF00,};
enum MACRO_RCIP {RCIP_ALLANSICHAR = 0x1,RCIP_MASK = 0x1,};
enum MACRO_RCOR {RCOR_NORMAL = 1,RCOR_RIGHT = 2,RCOR_UPSIDEDOWN = 3,RCOR_LEFT = 4,};
enum MACRO_RCRT {RCRT_DEFAULT = 0x0,RCRT_UNIDENTIFIED = 0x1,RCRT_GESTURE = 0x2,RCRT_NOSYMBOLMATCH = 0x4,RCRT_PRIVATE = 0x4000,RCRT_NORECOG = 0x8000,RCRT_ALREADYPROCESSED = 0x8,RCRT_GESTURETRANSLATED = 0x10,RCRT_GESTURETOKEYS = 0x20,};
enum MACRO_READ {READ = 0,WRITE = 1,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SGRC {SGRC_OK = 0x0,SGRC_USER = 0x1,SGRC_PARAMERROR = 0x2,SGRC_RC = 0x4,SGRC_RECOGNIZER = 0x8,SGRC_DICTIONARY = 0x10,SGRC_INIFILE = 0x20,};
enum MACRO_SHOW {SHOW_OPENWINDOW = 1,SHOW_ICONWINDOW = 2,SHOW_FULLSCREEN = 3,SHOW_OPENNOACTIVATE = 4,};
enum MACRO_SIZE {SIZE_RESTORED = 0,SIZE_MINIMIZED = 1,SIZE_MAXIMIZED = 2,SIZE_MAXSHOW = 3,SIZE_MAXHIDE = 4,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SPIF {SPIF_UPDATEINIFILE = 0x1,SPIF_SENDWININICHANGE = 0x2,};
enum MACRO_STGM {STGM_DIRECT = 0x0,STGM_TRANSACTED = 0x0,STGM_READ = 0x0,STGM_WRITE = 0x1,STGM_READWRITE = 0x2,STGM_SHARE_DENY_NONE = 0x40,STGM_SHARE_DENY_READ = 0x30,STGM_SHARE_DENY_WRITE = 0x20,STGM_SHARE_EXCLUSIVE = 0x10,STGM_PRIORITY = 0x0,STGM_DELETEONRELEASE = 0x0,STGM_CREATE = 0x1000,STGM_CONVERT = 0x0,STGM_FAILIFTHERE = 0x0,};
enum MACRO_S_OK {S_OK = 0,S_FALSE = 1,};
enum MACRO_TMPF {TMPF_FIXED_PITCH = 0x1,TMPF_VECTOR = 0x2,TMPF_DEVICE = 0x8,TMPF_TRUETYPE = 0x4,};
enum MACRO_TYPE {TYPE_E_BUFFERTOOSMALL = -32746,TYPE_E_INVDATAREAD = -32744,TYPE_E_UNSUPFORMAT = -32743,TYPE_E_REGISTRYACCESS = -32740,TYPE_E_LIBNOTREGISTERED = -32739,TYPE_E_UNDEFINEDTYPE = -32729,TYPE_E_QUALIFIEDNAMEDISALLOWED = -32728,TYPE_E_INVALIDSTATE = -32727,TYPE_E_WRONGTYPEKIND = -32726,TYPE_E_ELEMENTNOTFOUND = -32725,TYPE_E_AMBIGUOUSNAME = -32724,TYPE_E_NAMECONFLICT = -32723,TYPE_E_UNKNOWNLCID = -32722,TYPE_E_DLLFUNCTIONNOTFOUND = -32721,TYPE_E_BADMODULEKIND = -30531,TYPE_E_SIZETOOBIG = -30523,TYPE_E_DUPLICATEID = -30522,TYPE_E_INVALIDID = -30513,TYPE_E_TYPEMISMATCH = -29536,TYPE_E_OUTOFBOUNDS = -29535,TYPE_E_IOERROR = -29534,TYPE_E_CANTCREATETMPFILE = -29533,TYPE_E_CANTLOADLIBRARY = -25526,TYPE_E_INCONSISTENTPROPFUNCS = -25469,TYPE_E_CIRCULARTYPE = -25468,};
enum MACRO_VFFF {VFFF_ISSHAREDFILE = 0x1,};
enum MACRO_VFT2 {VFT2_UNKNOWN = 0x0,VFT2_DRV_PRINTER = 0x1,VFT2_DRV_KEYBOARD = 0x2,VFT2_DRV_LANGUAGE = 0x3,VFT2_DRV_DISPLAY = 0x4,VFT2_DRV_MOUSE = 0x5,VFT2_DRV_NETWORK = 0x6,VFT2_DRV_SYSTEM = 0x7,VFT2_DRV_INSTALLABLE = 0x8,VFT2_DRV_SOUND = 0x9,VFT2_DRV_COMM = 0xA,VFT2_FONT_RASTER = 0x1,VFT2_FONT_VECTOR = 0x2,VFT2_FONT_TRUETYPE = 0x3,};
enum MACRO_VIEW {VIEW_E_FIRST = 0x140,VIEW_E_LAST = 0x14F,VIEW_S_FIRST = 0x140,VIEW_S_LAST = 0x14F,};
enum MACRO_VIFF {VIFF_FORCEINSTALL = 0x1,VIFF_DONTDELETEOLD = 0x2,};
enum MACRO_WEOF {WEOF = 0xFFFF,};
enum MACRO_WM32 {WM32_Invalid_Func = 0x1,WM32_Invalid_Flags = 0x2,WM32_Invalid_Arg = 0x3,WM32_Insufficient_Sels = 0x4,WM32_Insufficient_Mem = 0x5,};
enum MACRO_XTYP {XTYP_ERROR = 0x8002,XTYP_ADVDATA = 0x4010,XTYP_ADVREQ = 0x2022,XTYP_ADVSTART = 0x1030,XTYP_ADVSTOP = 0x8040,XTYP_EXECUTE = 0x4050,XTYP_CONNECT = 0x1062,XTYP_CONNECT_CONFIRM = 0x8072,XTYP_XACT_COMPLETE = 0x8080,XTYP_POKE = 0x4090,XTYP_REGISTER = 0x80A2,XTYP_REQUEST = 0x20B0,XTYP_DISCONNECT = 0x80C2,XTYP_UNREGISTER = 0x80D2,XTYP_WILDCONNECT = 0x20E2,XTYP_MASK = 0xF0,XTYP_SHIFT = 0x4,};
enum MACRO__MAX {_MAX_PATH = 80,_MAX_DRIVE = 3,_MAX_DIR = 66,_MAX_FNAME = 9,_MAX_EXT = 5,};
enum MACRO_chx1 {chx1 = 0x410,};
enum MACRO_chx2 {chx2 = 0x411,};
enum MACRO_chx3 {chx3 = 0x412,};
enum MACRO_chx4 {chx4 = 0x413,};
enum MACRO_chx5 {chx5 = 0x414,};
enum MACRO_chx6 {chx6 = 0x415,};
enum MACRO_chx7 {chx7 = 0x416,};
enum MACRO_chx8 {chx8 = 0x417,};
enum MACRO_chx9 {chx9 = 0x418,};
enum MACRO_cmb1 {cmb1 = 0x470,};
enum MACRO_cmb2 {cmb2 = 0x471,};
enum MACRO_cmb3 {cmb3 = 0x472,};
enum MACRO_cmb4 {cmb4 = 0x473,};
enum MACRO_cmb5 {cmb5 = 0x474,};
enum MACRO_cmb6 {cmb6 = 0x475,};
enum MACRO_cmb7 {cmb7 = 0x476,};
enum MACRO_cmb8 {cmb8 = 0x477,};
enum MACRO_cmb9 {cmb9 = 0x478,};
enum MACRO_edt1 {edt1 = 0x480,};
enum MACRO_edt2 {edt2 = 0x481,};
enum MACRO_edt3 {edt3 = 0x482,};
enum MACRO_edt4 {edt4 = 0x483,};
enum MACRO_edt5 {edt5 = 0x484,};
enum MACRO_edt6 {edt6 = 0x485,};
enum MACRO_edt7 {edt7 = 0x486,};
enum MACRO_edt8 {edt8 = 0x487,};
enum MACRO_edt9 {edt9 = 0x488,};
enum MACRO_frm1 {frm1 = 0x434,};
enum MACRO_frm2 {frm2 = 0x435,};
enum MACRO_frm3 {frm3 = 0x436,};
enum MACRO_frm4 {frm4 = 0x437,};
enum MACRO_grp1 {grp1 = 0x430,};
enum MACRO_grp2 {grp2 = 0x431,};
enum MACRO_grp3 {grp3 = 0x432,};
enum MACRO_grp4 {grp4 = 0x433,};
enum MACRO_ico1 {ico1 = 0x43C,};
enum MACRO_ico2 {ico2 = 0x43D,};
enum MACRO_ico3 {ico3 = 0x43E,};
enum MACRO_ico4 {ico4 = 0x43F,};
enum MACRO_lst1 {lst1 = 0x460,};
enum MACRO_lst2 {lst2 = 0x461,};
enum MACRO_lst3 {lst3 = 0x462,};
enum MACRO_lst4 {lst4 = 0x463,};
enum MACRO_lst5 {lst5 = 0x464,};
enum MACRO_lst6 {lst6 = 0x465,};
enum MACRO_lst7 {lst7 = 0x466,};
enum MACRO_lst8 {lst8 = 0x467,};
enum MACRO_lst9 {lst9 = 0x468,};
enum MACRO_psh1 {psh1 = 0x400,};
enum MACRO_psh2 {psh2 = 0x401,};
enum MACRO_psh3 {psh3 = 0x402,};
enum MACRO_psh4 {psh4 = 0x403,};
enum MACRO_psh5 {psh5 = 0x404,};
enum MACRO_psh6 {psh6 = 0x405,};
enum MACRO_psh7 {psh7 = 0x406,};
enum MACRO_psh8 {psh8 = 0x407,};
enum MACRO_psh9 {psh9 = 0x408,};
enum MACRO_rad1 {rad1 = 0x420,};
enum MACRO_rad2 {rad2 = 0x421,};
enum MACRO_rad3 {rad3 = 0x422,};
enum MACRO_rad4 {rad4 = 0x423,};
enum MACRO_rad5 {rad5 = 0x424,};
enum MACRO_rad6 {rad6 = 0x425,};
enum MACRO_rad7 {rad7 = 0x426,};
enum MACRO_rad8 {rad8 = 0x427,};
enum MACRO_rad9 {rad9 = 0x428,};
enum MACRO_rct1 {rct1 = 0x438,};
enum MACRO_rct2 {rct2 = 0x439,};
enum MACRO_rct3 {rct3 = 0x43A,};
enum MACRO_rct4 {rct4 = 0x43B,};
enum MACRO_scr1 {scr1 = 0x490,};
enum MACRO_scr2 {scr2 = 0x491,};
enum MACRO_scr3 {scr3 = 0x492,};
enum MACRO_scr4 {scr4 = 0x493,};
enum MACRO_scr5 {scr5 = 0x494,};
enum MACRO_scr6 {scr6 = 0x495,};
enum MACRO_scr7 {scr7 = 0x496,};
enum MACRO_scr8 {scr8 = 0x497,};
enum MACRO_stc1 {stc1 = 0x440,};
enum MACRO_stc2 {stc2 = 0x441,};
enum MACRO_stc3 {stc3 = 0x442,};
enum MACRO_stc4 {stc4 = 0x443,};
enum MACRO_stc5 {stc5 = 0x444,};
enum MACRO_stc6 {stc6 = 0x445,};
enum MACRO_stc7 {stc7 = 0x446,};
enum MACRO_stc8 {stc8 = 0x447,};
enum MACRO_stc9 {stc9 = 0x448,};
typedef struct tagMEMMANINFO MEMMANINFO;
typedef struct tagMETAHEADER METAHEADER;
typedef struct tagMETARECORD METARECORD;
typedef struct tagMETHODDATA METHODDATA;
typedef struct midiincaps_tag MIDIINCAPS;
typedef struct tagMINMAXINFO MINMAXINFO;
typedef struct tagNEWCPLINFO NEWCPLINFO;
typedef struct tagNFYLOADSEG NFYLOADSEG;
typedef struct _MMCKINFO  *NPMMCKINFO;
typedef struct _MMIOINFO  *NPMMIOINFO;
typedef struct timecaps_tag  *NPTIMECAPS;
typedef struct tagOEMPENINFO OEMPENINFO;
typedef struct tMIXERCAPS *PMIXERCAPS;
typedef struct tMIXERLINE *PMIXERLINE;
typedef struct _12162CE22CDC56067DA0BB6E4AD54465 RWCTLCLASS;
typedef struct _3CA0C319F87D2D6479A928EE1D6E454C RWCTLSTYLE;
typedef struct tagSTROKEINFO STROKEINFO;
typedef struct tagTEXTMETRIC TEXTMETRIC;
typedef struct tagVARIANT VARIANTARG;
typedef struct waveformat_tag WAVEFORMAT;
typedef struct waveincaps_tag WAVEINCAPS;
struct tagCPLINFO {int idIcon;int idName;int idInfo;int lData;};
enum tagDATADIR {DATADIR_GET = 0x1,DATADIR_SET = 0x2,};
enum tagEXTCONN {EXTCONN_STRONG = 0x1,};
enum tagOLEMISC {OLEMISC_RECOMPOSEONRESIZE = 0x1,OLEMISC_ONLYICONIC = 0x2,OLEMISC_INSERTNOTREPLACE = 0x4,OLEMISC_STATIC = 0x8,OLEMISC_CANTLINKINSIDE = 0x10,OLEMISC_CANLINKBYOLE1 = 0x20,OLEMISC_ISLINKOBJECT = 0x40,OLEMISC_INSIDEOUT = 0x80,OLEMISC_ACTIVATEWHENVISIBLE = 0x100,OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,};
struct tagRECTOFS {int dLeft;int dTop;int dRight;int dBottom;};
enum tagSTGMOVE {STGMOVE_MOVE = 0x0,STGMOVE_COPY = 0x1,};
enum tagSYSKIND {SYS_WIN16 = 0x0,SYS_WIN32 = 0x1,SYS_MAC = 0x2,};
enum tagVARKIND {VAR_PERINSTANCE = 0x0,VAR_STATIC = 0x1,VAR_CONST = 0x2,VAR_DISPATCH = 0x3,};
enum text_modes {LASTMODE = 0xFFFF,BW40 = 0x0,C40 = 0x1,BW80 = 0x2,C80 = 0x3,MONO = 0x7,C4350 = 0x40,};
typedef struct tagARRAYDESC ARRAYDESC;
typedef struct tagBIND_OPTS BIND_OPTS;
typedef struct tagBOXLAYOUT BOXLAYOUT;
typedef struct tagDDEADVISE DDEADVISE;
typedef struct tagEXCEPINFO EXCEPINFO;
typedef struct tagFORMATETC FORMATETC;
struct IDispatch {struct IDispatchVtbl *lpVtbl;};
struct IOleCache {struct IOleCacheVtbl *lpVtbl;};
struct ITypeComp {struct ITypeCompVtbl *lpVtbl;};
struct ITypeInfo {struct ITypeInfoVtbl *lpVtbl;};
typedef struct tagLOCALINFO LOCALINFO;
typedef struct auxcaps_tag *LPAUXCAPS;
typedef IBindCtx *LPBINDCTX;
typedef union tagBINDPTR *LPBINDPTR;
typedef struct tagCPLINFO *LPCPLINFO;
typedef struct hostent *LPHOSTENT;
typedef struct tagIDLDESC *LPIDLDESC;
typedef struct in_addr *LPIN_ADDR;
typedef struct joycaps_tag *LPJOYCAPS;
typedef struct joyinfo_tag *LPJOYINFO;
typedef IMarshal *LPMARSHAL;
typedef struct midihdr_tag *LPMIDIHDR;
typedef IMoniker *LPMONIKER;
typedef IOleLink *LPOLELINK;
typedef struct tagOLEVERB *LPOLEVERB;
typedef struct tagPENDATAHEADER *LPPENDATA;
typedef struct tagPENINFO *LPPENINFO;
typedef IPersist *LPPERSIST;
typedef struct tagPOINTFX *LPPOINTFX;
typedef struct tagRECTOFS *LPRECTOFS;
typedef struct servent *LPSERVENT;
typedef struct tagSKBINFO *LPSKBINFO;
typedef IStorage *LPSTORAGE;
typedef struct timeval *LPTIMEVAL;
typedef ITypeLib *LPTYPELIB;
typedef IUnknown *LPUNKNOWN;
typedef struct tagVARDESC *LPVARDESC;
typedef struct tagVARIANT *LPVARIANT;
typedef struct wavehdr_tag *LPWAVEHDR;
enum MACRO_ALC {ALC_ALL = 0x43FF,ALC_DEFAULT = 0x0,ALC_LCALPHA = 0x1,ALC_UCALPHA = 0x2,ALC_ALPHA = 0x3,ALC_NUMERIC = 0x4,ALC_ALPHANUMERIC = 0x7,ALC_PUNC = 0x8,ALC_MATH = 0x10,ALC_MONETARY = 0x20,ALC_OTHER = 0x40,ALC_WHITE = 0x100,ALC_NONPRINT = 0x200,ALC_GESTURE = 0x4000,ALC_USEBITMAP = 0x8000,ALC_DBCS = 0x400,ALC_HIRAGANA = 0x0,ALC_KATAKANA = 0x0,ALC_KANJI = 0x0,ALC_OEM = 0x0,ALC_RESERVED = 0x3800,ALC_NOPRIORITY = 0x0,ALC_SYSMINIMUM = 0x410F,};
enum MACRO_BXD {BXD_CELLWIDTH = 12,BXD_CELLHEIGHT = 16,BXD_BASEHEIGHT = 13,BXD_BASEHORZ = 0,BXD_CUSPHEIGHT = 2,BXD_ENDCUSPHEIGHT = 4,};
enum MACRO_BXS {BXS_NONE = 0,BXS_RECT = 1,BXS_ENDTEXTMARK = 2,BXS_MASK = 3,};
enum MACRO_CBF {CBF_FAIL_SELFCONNECTIONS = 0x1000,CBF_FAIL_CONNECTIONS = 0x2000,CBF_FAIL_ADVISES = 0x4000,CBF_FAIL_EXECUTES = 0x8000,CBF_FAIL_POKES = 0x0,CBF_FAIL_REQUESTS = 0x0,CBF_FAIL_ALLSVRXACTIONS = 0xF000,CBF_SKIP_CONNECT_CONFIRMS = 0x0,CBF_SKIP_REGISTRATIONS = 0x0,CBF_SKIP_UNREGISTRATIONS = 0x0,CBF_SKIP_DISCONNECTS = 0x0,CBF_SKIP_ALLNOTIFICATIONS = 0x0,};
enum MACRO_CBM {CBM_INIT = 0x4,};
enum MACRO_CBN {CBN_ERRSPACE = -1,CBN_SELCHANGE = 1,CBN_DBLCLK = 2,CBN_SETFOCUS = 3,CBN_KILLFOCUS = 4,CBN_EDITCHANGE = 5,CBN_EDITUPDATE = 6,CBN_DROPDOWN = 7,CBN_CLOSEUP = 8,CBN_SELENDOK = 9,CBN_SELENDCANCEL = 10,};
enum MACRO_CBR {CBR_110 = 0xFF10,CBR_300 = 0xFF11,CBR_600 = 0xFF12,CBR_1200 = 0xFF13,CBR_2400 = 0xFF14,CBR_4800 = 0xFF15,CBR_9600 = 0xFF16,CBR_14400 = 0xFF17,CBR_19200 = 0xFF18,CBR_38400 = 0xFF1B,CBR_56000 = 0xFF1F,CBR_128000 = 0xFF23,CBR_256000 = 0xFF27,};
enum MACRO_CBS {CBS_SIMPLE = 0x1,CBS_DROPDOWN = 0x2,CBS_DROPDOWNLIST = 0x3,CBS_OWNERDRAWFIXED = 0x10,CBS_OWNERDRAWVARIABLE = 0x20,CBS_AUTOHSCROLL = 0x40,CBS_OEMCONVERT = 0x80,CBS_SORT = 0x100,CBS_HASSTRINGS = 0x200,CBS_NOINTEGRALHEIGHT = 0x400,CBS_DISABLENOSCROLL = 0x800,};
enum MACRO_CPL {CPL_INIT = 1,CPL_GETCOUNT = 2,CPL_INQUIRE = 3,CPL_SELECT = 4,CPL_DBLCLK = 5,CPL_STOP = 6,CPL_EXIT = 7,CPL_NEWINQUIRE = 8,CPL_DO_PRINTER_SETUP = 100,CPL_DO_NETPRN_SETUP = 101,CPL_SETUP = 200,};
enum MACRO_CTM {RESTORE_CTM = 4100,SAVE_CTM = 4101,};
enum MACRO_CWR {CWR_STRIPCR = 0x1,CWR_STRIPLF = 0x2,CWR_STRIPTAB = 0x4,CWR_SINGLELINEEDIT = 0x7,CWR_TITLE = 0x10,CWR_KKCONVERT = 0x20,};
enum MACRO_DBF {DBF_TRACE = 0x0,DBF_WARNING = 0x4000,DBF_ERROR = 0x8000,DBF_FATAL = 0xC000,DBF_KERNEL = 0x1000,DBF_KRN_MEMMAN = 0x1,DBF_KRN_LOADMODULE = 0x2,DBF_KRN_SEGMENTLOAD = 0x4,DBF_USER = 0x800,DBF_GDI = 0x400,DBF_MMSYSTEM = 0x40,DBF_PENWIN = 0x20,DBF_APPLICATION = 0x8,DBF_DRIVER = 0x10,};
enum MACRO_DBO {DBO_CHECKHEAP = 0x1,DBO_BUFFERFILL = 0x4,DBO_DISABLEGPTRAPPING = 0x10,DBO_CHECKFREE = 0x20,DBO_SILENT = 0x8000,DBO_TRACEBREAK = 0x2000,DBO_WARNINGBREAK = 0x1000,DBO_NOERRORBREAK = 0x800,DBO_NOFATALBREAK = 0x400,DBO_INT3BREAK = 0x100,};
enum MACRO_DCB {DCB_RESET = 0x1,DCB_ACCUMULATE = 0x2,DCB_DIRTY = 0x2,DCB_SET = 0x3,DCB_ENABLE = 0x4,DCB_DISABLE = 0x8,};
enum MACRO_DCX {DCX_WINDOW = 0x1,DCX_CACHE = 0x2,DCX_CLIPCHILDREN = 0x8,DCX_CLIPSIBLINGS = 0x10,DCX_PARENTCLIP = 0x20,DCX_EXCLUDERGN = 0x40,DCX_INTERSECTRGN = 0x80,DCX_LOCKWINDOWUPDATE = 0x400,DCX_USESTYLE = 0x0,};
enum MACRO_DDE {DDE_FACK = 0x8000,DDE_FBUSY = 0x4000,DDE_FDEFERUPD = 0x4000,DDE_FACKREQ = 0x8000,DDE_FRELEASE = 0x2000,DDE_FREQUESTED = 0x1000,DDE_FACKRESERVED = 0x3FF0,DDE_FADVRESERVED = 0x3FFF,DDE_FDATRESERVED = 0x4FFF,DDE_FPOKRESERVED = 0xDFFF,DDE_FAPPSTATUS = 0xFF,DDE_FNOTPROCESSED = 0x0,};
enum MACRO_DDL {DDL_READWRITE = 0x0,DDL_READONLY = 0x1,DDL_HIDDEN = 0x2,DDL_SYSTEM = 0x4,DDL_DIRECTORY = 0x10,DDL_ARCHIVE = 0x20,DDL_POSTMSGS = 0x2000,DDL_DRIVES = 0x4000,DDL_EXCLUSIVE = 0x8000,};
enum MACRO_DIB {DIB_RGB_COLORS = 0,DIB_PAL_COLORS = 1,};
enum MACRO_DLG {DLG_COLOR = 10,};
enum MACRO_DNS {DNS_REGISTER = 0x1,DNS_UNREGISTER = 0x2,DNS_FILTERON = 0x4,DNS_FILTEROFF = 0x8,};
enum MACRO_DRV {DRV_LOAD = 0x1,DRV_ENABLE = 0x2,DRV_OPEN = 0x3,DRV_CLOSE = 0x4,DRV_DISABLE = 0x5,DRV_FREE = 0x6,DRV_CONFIGURE = 0x7,DRV_QUERYCONFIGURE = 0x8,DRV_INSTALL = 0x9,DRV_REMOVE = 0xA,DRV_EXITSESSION = 0xB,DRV_EXITAPPLICATION = 0xC,DRV_POWER = 0xF,DRV_RESERVED = 0x800,DRV_USER = 0x4000,};
enum MACRO_DWL {DWL_MSGRESULT = 0,DWL_DLGPROC = 4,DWL_USER = 8,};
enum MACRO_EDS {EDS_WIN = 1,EDS_CUR = 2,EDS_TEMP = 3,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_ERR {ERR_WARNING = 0x8000,ERR_PARAM = 0x4000,ERR_SIZE_MASK = 0x3000,ERR_BYTE = 0x1000,ERR_WORD = 0x2000,ERR_DWORD = 0x3000,ERR_BAD_VALUE = 0x6001,ERR_BAD_FLAGS = 0x6002,ERR_BAD_INDEX = 0x6003,ERR_BAD_DVALUE = 0x7004,ERR_BAD_DFLAGS = 0x7005,ERR_BAD_DINDEX = 0x7006,ERR_BAD_PTR = 0x7007,ERR_BAD_FUNC_PTR = 0x7008,ERR_BAD_SELECTOR = 0x6009,ERR_BAD_STRING_PTR = 0x700A,ERR_BAD_HANDLE = 0x600B,ERR_BAD_HINSTANCE = 0x6020,ERR_BAD_HMODULE = 0x6021,ERR_BAD_GLOBAL_HANDLE = 0x6022,ERR_BAD_LOCAL_HANDLE = 0x6023,ERR_BAD_ATOM = 0x6024,ERR_BAD_HFILE = 0x6025,ERR_BAD_HWND = 0x6040,ERR_BAD_HMENU = 0x6041,ERR_BAD_HCURSOR = 0x6042,ERR_BAD_HICON = 0x6043,ERR_BAD_HDWP = 0x6044,ERR_BAD_CID = 0x6045,ERR_BAD_HDRVR = 0x6046,ERR_BAD_COORDS = 0x7060,ERR_BAD_GDI_OBJECT = 0x6061,ERR_BAD_HDC = 0x6062,ERR_BAD_HPEN = 0x6063,ERR_BAD_HFONT = 0x6064,ERR_BAD_HBRUSH = 0x6065,ERR_BAD_HBITMAP = 0x6066,ERR_BAD_HRGN = 0x6067,ERR_BAD_HPALETTE = 0x6068,ERR_BAD_HMETAFILE = 0x6069,ERR_GALLOC = 0x1,ERR_GREALLOC = 0x2,ERR_GLOCK = 0x3,ERR_LALLOC = 0x4,ERR_LREALLOC = 0x5,ERR_LLOCK = 0x6,ERR_ALLOCRES = 0x7,ERR_LOCKRES = 0x8,ERR_LOADMODULE = 0x9,ERR_CREATEDLG = 0x40,ERR_CREATEDLG2 = 0x41,ERR_REGISTERCLASS = 0x42,ERR_DCBUSY = 0x43,ERR_CREATEWND = 0x44,ERR_STRUCEXTRA = 0x45,ERR_LOADSTR = 0x46,ERR_LOADMENU = 0x47,ERR_NESTEDBEGINPAINT = 0x48,ERR_BADINDEX = 0x49,ERR_CREATEMENU = 0x4A,ERR_CREATEDC = 0x80,ERR_CREATEMETA = 0x81,ERR_DELOBJSELECTED = 0x82,ERR_SELBITMAP = 0x83,};
enum MACRO_ESB {ESB_ENABLE_BOTH = 0x0,ESB_DISABLE_BOTH = 0x3,ESB_DISABLE_LEFT = 0x1,ESB_DISABLE_RIGHT = 0x2,ESB_DISABLE_UP = 0x1,ESB_DISABLE_DOWN = 0x2,ESB_DISABLE_LTUP = 0x1,ESB_DISABLE_RTDN = 0x2,};
enum MACRO_ETO {ETO_GRAYED = 0x1,ETO_OPAQUE = 0x2,ETO_CLIPPED = 0x4,};
enum MACRO_EXT {EXT_DEVICE_CAPS = 4099,};
enum MACRO_GCL {GCL_MENUNAME = -8,};
enum MACRO_GCW {GCW_HBRBACKGROUND = -10,GCW_HCURSOR = -12,GCW_HICON = -14,GCW_HMODULE = -16,GCW_CBWNDEXTRA = -18,GCW_CBCLSEXTRA = -20,};
enum MACRO_GGO {GGO_METRICS = 0,GGO_BITMAP = 1,GGO_NATIVE = 2,};
enum MACRO_GND {GND_FIRSTINSTANCEONLY = 0x1,GND_FORWARD = 0x0,GND_REVERSE = 0x2,};
enum MACRO_GWL {GWL_WNDPROC = -4,};
enum MACRO_GWW {GWW_HINSTANCE = -6,GWW_HWNDPARENT = -8,GWW_ID = -12,};
enum MACRO_HEP {HEP_NORECOG = 0,HEP_RECOG = 1,HEP_WAITFORTAP = 2,};
enum MACRO_HKP {HKP_SETHOOK = 0,HKP_UNHOOK = -1,};
enum MACRO_HWR {HWR_RESULTS = 0,HWR_APPWIDE = 1,};
enum MACRO_INT {INT_DIV0 = 0,INT_1 = 1,INT_3 = 3,INT_UDINSTR = 6,INT_STKFAULT = 12,INT_GPFAULT = 13,INT_BADPAGEFAULT = 14,INT_CTLALTSYSRQ = 256,};
enum MACRO_IOC {IOC_VOID = 0x0,IOC_OUT = 0x0,IOC_IN = 0x0,IOC_INOUT = 0x0,};
enum MACRO_ISO {ISO_MAX_ADDR_LENGTH = 64,ISO_HIERARCHICAL = 0,ISO_NON_HIERARCHICAL = 1,ISO_EXP_DATA_USE = 0,ISO_EXP_DATA_NUSE = 1,};
enum MACRO_LBN {LBN_ERRSPACE = -2,LBN_SELCHANGE = 1,LBN_DBLCLK = 2,LBN_SELCANCEL = 3,LBN_SETFOCUS = 4,LBN_KILLFOCUS = 5,};
enum MACRO_LBS {LBS_NOTIFY = 0x1,LBS_SORT = 0x2,LBS_NOREDRAW = 0x4,LBS_MULTIPLESEL = 0x8,LBS_OWNERDRAWFIXED = 0x10,LBS_OWNERDRAWVARIABLE = 0x20,LBS_HASSTRINGS = 0x40,LBS_USETABSTOPS = 0x80,LBS_NOINTEGRALHEIGHT = 0x100,LBS_MULTICOLUMN = 0x200,LBS_WANTKEYBOARDINPUT = 0x400,LBS_EXTENDEDSEL = 0x800,LBS_DISABLENOSCROLL = 0x1000,LBS_STANDARD = 0x3,};
enum MACRO_LEN {WSADESCRIPTION_LEN = 256,WSASYS_STATUS_LEN = 128,};
enum MACRO_MAP {MAP_GESTOGES = 18,MAP_GESTOVKEYS = 40,};
enum MACRO_MAX {MAX_MONITORS = 4,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_MAXIOVLEN = 0x10,MSG_PARTIAL = 0x8000,};
enum MACRO_NFY {NFY_UNKNOWN = 0,NFY_LOADSEG = 1,NFY_FREESEG = 2,NFY_STARTDLL = 3,NFY_STARTTASK = 4,NFY_EXITTASK = 5,NFY_DELMODULE = 6,NFY_RIP = 7,NFY_TASKIN = 8,NFY_TASKOUT = 9,NFY_INCHAR = 10,NFY_OUTSTR = 11,NFY_LOGERROR = 12,NFY_LOGPARAMERROR = 13,};
enum MACRO_NTM {NTM_REGULAR = 0x40,NTM_BOLD = 0x20,NTM_ITALIC = 0x1,};
enum MACRO_NUM {NUM_BASIC_COLORS = 48,NUM_CUSTOM_COLORS = 16,};
enum MACRO_OBJ {OBJ_PEN = 1,OBJ_BRUSH = 2,};
enum MACRO_OBM {OBM_SKBBTNUP = 32767,OBM_SKBBTNDOWN = 32766,OBM_SKBBTNDISABLED = 32765,};
enum MACRO_ODA {ODA_DRAWENTIRE = 0x1,ODA_SELECT = 0x2,ODA_FOCUS = 0x4,};
enum MACRO_ODS {ODS_SELECTED = 0x1,ODS_GRAYED = 0x2,ODS_DISABLED = 0x4,ODS_CHECKED = 0x8,ODS_FOCUS = 0x10,};
enum MACRO_ODT {ODT_MENU = 1,ODT_LISTBOX = 2,ODT_COMBOBOX = 3,ODT_BUTTON = 4,};
enum MACRO_OFN {OFN_READONLY = 0x1,OFN_OVERWRITEPROMPT = 0x2,OFN_HIDEREADONLY = 0x4,OFN_NOCHANGEDIR = 0x8,OFN_SHOWHELP = 0x10,OFN_ENABLEHOOK = 0x20,OFN_ENABLETEMPLATE = 0x40,OFN_ENABLETEMPLATEHANDLE = 0x80,OFN_NOVALIDATE = 0x100,OFN_ALLOWMULTISELECT = 0x200,OFN_EXTENSIONDIFFERENT = 0x400,OFN_PATHMUSTEXIST = 0x800,OFN_FILEMUSTEXIST = 0x1000,OFN_CREATEPROMPT = 0x2000,OFN_SHAREAWARE = 0x4000,OFN_NOREADONLYRETURN = 0x8000,OFN_NOTESTFILECREATE = 0x0,OFN_SHAREFALLTHROUGH = 0x2,OFN_SHARENOWARN = 0x1,OFN_SHAREWARN = 0x0,};
enum MACRO_OLE {OLE_E_FIRST = 0x0,OLE_E_LAST = 0xFF,OLE_S_FIRST = 0x0,OLE_S_LAST = 0xFF,};
enum MACRO_OUT {OUT_DEFAULT_PRECIS = 0,OUT_STRING_PRECIS = 1,OUT_CHARACTER_PRECIS = 2,OUT_STROKE_PRECIS = 3,OUT_TT_PRECIS = 4,OUT_DEVICE_PRECIS = 5,OUT_RASTER_PRECIS = 6,OUT_TT_ONLY_PRECIS = 7,};
enum MACRO_PCM {PCM_PENUP = 0x1,PCM_RANGE = 0x2,PCM_INVERT = 0x20,PCM_RECTEXCLUDE = 0x2000,PCM_RECTBOUND = 0x4000,PCM_TIMEOUT = 0x8000,PCM_ADDDEFAULTS = 0x0,};
enum MACRO_PDC {PDC_INTEGRATED = 0x1,PDC_PROXIMITY = 0x2,PDC_RANGE = 0x4,PDC_INVERT = 0x8,PDC_RELATIVE = 0x10,PDC_BARREL1 = 0x20,PDC_BARREL2 = 0x40,PDC_BARREL3 = 0x80,};
enum MACRO_PDK {PDK_UP = 0x0,PDK_DOWN = 0x1,PDK_BARREL1 = 0x2,PDK_BARREL2 = 0x4,PDK_BARREL3 = 0x8,PDK_TRANSITION = 0x10,PDK_INVERTED = 0x80,PDK_OUTOFRANGE = 0x4000,PDK_DRIVER = 0x8000,PDK_TIPMASK = 0x1,PDK_SWITCHES = 0xF,};
enum MACRO_PDT {PDT_NULL = 0,PDT_PRESSURE = 1,PDT_HEIGHT = 2,PDT_ANGLEXY = 3,PDT_ANGLEZ = 4,PDT_BARRELROTATION = 5,PDT_OEMSPECIFIC = 16,};
enum MACRO_PEN {WHITE_PEN = 6,BLACK_PEN = 7,NULL_PEN = 8,};
enum MACRO_PWR {PWR_OK = 1,PWR_FAIL = -1,PWR_SUSPENDREQUEST = 1,PWR_SUSPENDRESUME = 2,PWR_CRITICALRESUME = 3,};
enum MACRO_QID {QID_SYNC = -1,};
enum MACRO_RCD {RCD_DEFAULT = 0,RCD_LR = 1,RCD_RL = 2,RCD_TB = 3,RCD_BT = 4,};
enum MACRO_RCO {RCO_NOPOINTEREVENT = 0x1,RCO_SAVEALLDATA = 0x2,RCO_SAVEHPENDATA = 0x4,RCO_NOFLASHUNKNOWN = 0x8,RCO_TABLETCOORD = 0x10,RCO_NOSPACEBREAK = 0x20,RCO_NOHIDECURSOR = 0x40,RCO_NOHOOK = 0x80,RCO_BOXED = 0x100,RCO_SUGGEST = 0x200,RCO_DISABLEGESMAP = 0x400,RCO_NOFLASHCURSOR = 0x800,RCO_COLDRECOG = 0x8000,};
enum MACRO_RCP {RCP_LEFTHAND = 0x1,RCP_MAPCHAR = 0x4,};
enum MACRO_RDW {RDW_INVALIDATE = 0x1,RDW_INTERNALPAINT = 0x2,RDW_ERASE = 0x4,RDW_VALIDATE = 0x8,RDW_NOINTERNALPAINT = 0x10,RDW_NOERASE = 0x20,RDW_NOCHILDREN = 0x40,RDW_ALLCHILDREN = 0x80,RDW_UPDATENOW = 0x100,RDW_ERASENOW = 0x200,RDW_FRAME = 0x400,RDW_NOFRAME = 0x800,};
enum MACRO_REC {REC_OEM = -1024,REC_LANGUAGE = -48,REC_GUIDE = -47,REC_PARAMERROR = -46,REC_INVALIDREF = -45,REC_RECTEXCLUDE = -44,REC_RECTBOUND = -43,REC_PCM = -42,REC_RESULTMODE = -41,REC_HWND = -40,REC_ALC = -39,REC_ERRORLEVEL = -38,REC_CLVERIFY = -37,REC_DICT = -36,REC_HREC = -35,REC_BADEVENTREF = -33,REC_NOCOLLECTION = -32,REC_DEBUG = -32,REC_POINTEREVENT = -31,REC_BADHPENDATA = -9,REC_OOM = -8,REC_NOINPUT = -7,REC_NOTABLET = -6,REC_BUSY = -5,REC_BUFFERTOOSMALL = -4,REC_ABORT = -3,REC_OVERFLOW = -1,REC_OK = 0,REC_TERMBOUND = 1,REC_TERMEX = 2,REC_TERMPENUP = 3,REC_TERMRANGE = 4,REC_TERMTIMEOUT = 5,REC_DONE = 6,REC_TERMOEM = 512,};
enum MACRO_REG {REG_SZ = 1,};
enum MACRO_RGN {RGN_AND = 1,RGN_OR = 2,RGN_XOR = 3,RGN_DIFF = 4,RGN_COPY = 5,};
enum MACRO_RPA {RPA_DEFAULT = 1,};
enum MACRO_RPC {RPC_E_FIRST = 0x0,RPC_E_CALL_REJECTED = 0x1,RPC_E_CALL_CANCELED = 0x2,RPC_E_CANTPOST_INSENDCALL = 0x3,RPC_E_CANTCALLOUT_INASYNCCALL = 0x4,RPC_E_CANTCALLOUT_INEXTERNALCALL = 0x5,RPC_E_CONNECTION_TERMINATED = 0x6,RPC_E_SERVER_DIED = 0x7,RPC_E_CLIENT_DIED = 0x8,RPC_E_INVALID_DATAPACKET = 0x9,RPC_E_CANTTRANSMIT_CALL = 0xA,RPC_E_CLIENT_CANTMARSHAL_DATA = 0xB,RPC_E_CLIENT_CANTUNMARSHAL_DATA = 0xC,RPC_E_SERVER_CANTMARSHAL_DATA = 0xD,RPC_E_SERVER_CANTUNMARSHAL_DATA = 0xE,RPC_E_INVALID_DATA = 0xF,RPC_E_INVALID_PARAMETER = 0x10,RPC_E_CANTCALLOUT_AGAIN = 0x11,RPC_E_UNEXPECTED = 0xFFFF,};
enum MACRO_RRM {RRM_STROKE = 0,RRM_SYMBOL = 1,RRM_WORD = 2,RRM_NEWLINE = 3,RRM_COMPLETE = 16,};
enum MACRO_SBS {SBS_HORZ = 0x0,SBS_VERT = 0x1,SBS_TOPALIGN = 0x2,SBS_LEFTALIGN = 0x2,SBS_BOTTOMALIGN = 0x4,SBS_RIGHTALIGN = 0x4,SBS_SIZEBOXTOPLEFTALIGN = 0x2,SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x4,SBS_SIZEBOX = 0x8,};
enum MACRO_SDS {SDS_MENU = 0x1,SDS_SYSMODAL = 0x2,SDS_NOTASKQUEUE = 0x4,SDS_DIALOG = 0x8,SDS_TASKLOCKED = 0x10,};
enum MACRO_SEM {SEM_FAILCRITICALERRORS = 0x1,SEM_NOGPFAULTERRORBOX = 0x2,SEM_NOOPENFILEERRORBOX = 0x8000,};
enum MACRO_SET {SET_ARC_DIRECTION = 4102,SET_BACKGROUND_COLOR = 4103,SET_POLY_MODE = 4104,SET_SCREEN_ANGLE = 4105,SET_SPREAD = 4106,};
enum MACRO_SKB {SKB_QUERY = 0x0,SKB_SHOW = 0x1,SKB_HIDE = 0x2,SKB_CENTER = 0x10,SKB_MOVE = 0x20,SKB_MINIMIZE = 0x40,SKB_FULL = 0x100,SKB_BASIC = 0x200,SKB_NUMPAD = 0x400,};
enum MACRO_SKN {SKN_CHANGED = 1,SKN_POSCHANGED = 1,SKN_PADCHANGED = 2,SKN_MINCHANGED = 4,SKN_VISCHANGED = 8,SKN_TERMINATED = -1,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SPI {SPI_GETBEEP = 1,SPI_SETBEEP = 2,SPI_GETMOUSE = 3,SPI_SETMOUSE = 4,SPI_GETBORDER = 5,SPI_SETBORDER = 6,SPI_GETKEYBOARDSPEED = 10,SPI_SETKEYBOARDSPEED = 11,SPI_LANGDRIVER = 12,SPI_ICONHORIZONTALSPACING = 13,SPI_GETSCREENSAVETIMEOUT = 14,SPI_SETSCREENSAVETIMEOUT = 15,SPI_GETSCREENSAVEACTIVE = 16,SPI_SETSCREENSAVEACTIVE = 17,SPI_GETGRIDGRANULARITY = 18,SPI_SETGRIDGRANULARITY = 19,SPI_SETDESKWALLPAPER = 20,SPI_SETDESKPATTERN = 21,SPI_GETKEYBOARDDELAY = 22,SPI_SETKEYBOARDDELAY = 23,SPI_ICONVERTICALSPACING = 24,SPI_GETICONTITLEWRAP = 25,SPI_SETICONTITLEWRAP = 26,SPI_GETMENUDROPALIGNMENT = 27,SPI_SETMENUDROPALIGNMENT = 28,SPI_SETDOUBLECLKWIDTH = 29,SPI_SETDOUBLECLKHEIGHT = 30,SPI_GETICONTITLELOGFONT = 31,SPI_SETDOUBLECLICKTIME = 32,SPI_SETMOUSEBUTTONSWAP = 33,SPI_SETICONTITLELOGFONT = 34,SPI_GETFASTTASKSWITCH = 35,SPI_SETFASTTASKSWITCH = 36,};
enum MACRO_STG {STG_E_INVALIDFUNCTION = 0x1,STG_E_FILENOTFOUND = 0x2,STG_E_PATHNOTFOUND = 0x3,STG_E_TOOMANYOPENFILES = 0x4,STG_E_ACCESSDENIED = 0x5,STG_E_INVALIDHANDLE = 0x6,STG_E_INSUFFICIENTMEMORY = 0x8,STG_E_INVALIDPOINTER = 0x9,STG_E_NOMOREFILES = 0x12,STG_E_DISKISWRITEPROTECTED = 0x13,STG_E_SEEKERROR = 0x19,STG_E_WRITEFAULT = 0x1D,STG_E_READFAULT = 0x1E,STG_E_SHAREVIOLATION = 0x20,STG_E_LOCKVIOLATION = 0x21,STG_E_FILEALREADYEXISTS = 0x50,STG_E_INVALIDPARAMETER = 0x57,STG_E_MEDIUMFULL = 0x70,STG_E_ABNORMALAPIEXIT = 0xFA,STG_E_INVALIDHEADER = 0xFB,STG_E_INVALIDNAME = 0xFC,STG_E_UNKNOWN = 0xFD,STG_E_UNIMPLEMENTEDFUNCTION = 0xFE,STG_E_INVALIDFLAG = 0xFF,STG_E_INUSE = 0x100,STG_E_NOTCURRENT = 0x101,STG_E_REVERTED = 0x102,STG_E_CANTSAVE = 0x103,STG_E_OLDFORMAT = 0x104,STG_E_OLDDLL = 0x105,STG_E_SHAREREQUIRED = 0x106,STG_E_NOTFILEBASEDSTORAGE = 0x107,STG_E_EXTANTMARSHALLINGS = 0x108,STG_S_CONVERTED = 0x200,};
enum MACRO_STM {STM_SETICON = 1024,STM_GETICON = 1025,};
enum MACRO_SWP {SWP_NOSIZE = 0x1,SWP_NOMOVE = 0x2,SWP_NOZORDER = 0x4,SWP_NOREDRAW = 0x8,SWP_NOACTIVATE = 0x10,SWP_FRAMECHANGED = 0x20,SWP_SHOWWINDOW = 0x40,SWP_HIDEWINDOW = 0x80,SWP_NOCOPYBITS = 0x100,SWP_NOOWNERZORDER = 0x200,SWP_DRAWFRAME = 0x20,SWP_NOREPOSITION = 0x200,SWP_NOSENDCHANGING = 0x400,SWP_DEFERERASE = 0x2000,};
enum MACRO_SYS {SYS_OPEN = 50,};
enum MACRO_SYV {SYV_NULL = 0x0,SYV_UNKNOWN = 0x1,SYV_EMPTY = 0x3,SYV_BEGINOR = 0x10,SYV_ENDOR = 0x11,SYV_OR = 0x12,SYV_SOFTNEWLINE = 0x20,SYV_SPACENULL = 0x0,SYV_KKCONVERT = 0xFFD4,SYV_CLEAR = 0xFFD5,SYV_EXTENDSELECT = 0xFFD8,SYV_UNDO = 0xFFD9,SYV_COPY = 0xFFDA,SYV_CUT = 0xFFDB,SYV_PASTE = 0xFFDC,SYV_CLEARWORD = 0xFFDD,SYV_USER = 0xFFDE,SYV_CORRECT = 0xFFDF,SYV_BACKSPACE = 0x8,SYV_TAB = 0x9,SYV_RETURN = 0xD,SYV_SPACE = 0x20,SYV_APPGESTUREMASK = 0x0,SYV_CIRCLEUPA = 0x24B6,SYV_CIRCLEUPZ = 0x24CF,SYV_CIRCLELOA = 0x24D0,SYV_CIRCLELOZ = 0x24E9,SYV_SHAPELINE = 0x1,SYV_SHAPEELLIPSE = 0x2,SYV_SHAPERECT = 0x3,SYV_SHAPEMIN = 0x1,SYV_SHAPEMAX = 0x3,};
enum MACRO_TCP {TCP_NODELAY = 0x1,TCP_BSDURGENT = 0x7000,};
enum MACRO_TMP {TMP_MAX = 0xFFFF,FOPEN_MAX = 0x32,};
enum MACRO_TPM {TPM_LEFTBUTTON = 0x0,TPM_RIGHTBUTTON = 0x2,TPM_LEFTALIGN = 0x0,TPM_CENTERALIGN = 0x4,TPM_RIGHTALIGN = 0x8,};
enum MACRO_USA {USA_COUNTRYCODE = 1,};
enum MACRO_VAR {VAR_TIMEVALUEONLY = 0x1,VAR_DATEVALUEONLY = 0x2,};
enum MACRO_VFF {VFF_CURNEDEST = 0x1,VFF_FILEINUSE = 0x2,VFF_BUFFTOOSMALL = 0x4,};
enum MACRO_VFT {VFT_UNKNOWN = 0x0,VFT_APP = 0x1,VFT_DLL = 0x2,VFT_DRV = 0x3,VFT_FONT = 0x4,VFT_VXD = 0x5,VFT_STATIC_LIB = 0x7,};
enum MACRO_VIF {VIF_TEMPFILE = 0x1,VIF_MISMATCH = 0x2,VIF_SRCOLD = 0x4,VIF_DIFFLANG = 0x8,VIF_DIFFCODEPG = 0x10,VIF_DIFFTYPE = 0x20,VIF_WRITEPROT = 0x40,VIF_FILEINUSE = 0x80,VIF_OUTOFSPACE = 0x100,VIF_ACCESSVIOLATION = 0x200,VIF_SHARINGVIOLATION = 0x400,VIF_CANNOTCREATE = 0x800,VIF_CANNOTDELETE = 0x1000,VIF_CANNOTRENAME = 0x2000,VIF_CANNOTDELETECUR = 0x4000,VIF_OUTOFMEMORY = 0x8000,VIF_CANNOTREADSRC = 0x0,VIF_CANNOTREADDST = 0x0,VIF_BUFFTOOSMALL = 0x0,};
enum MACRO_VOS {VOS_UNKNOWN = 0x0,VOS_DOS = 0x0,VOS_OS216 = 0x0,VOS_OS232 = 0x0,VOS_NT = 0x0,VOS__BASE = 0x0,VOS__WINDOWS16 = 0x1,VOS__PM16 = 0x2,VOS__PM32 = 0x3,VOS__WINDOWS32 = 0x4,VOS_DOS_WINDOWS16 = 0x1,VOS_DOS_WINDOWS32 = 0x4,VOS_OS216_PM16 = 0x2,VOS_OS232_PM32 = 0x3,VOS_NT_WINDOWS32 = 0x4,};
enum MACRO_VWM {VWM_MOUSEMOVE = 0x1,VWM_MOUSELEFTDOWN = 0x2,VWM_MOUSELEFTUP = 0x4,VWM_MOUSERIGHTDOWN = 0x8,VWM_MOUSERIGHTUP = 0x10,};
enum MACRO_WCR {WCR_RECOGNAME = 0,WCR_QUERY = 1,WCR_CONFIGDIALOG = 2,WCR_DEFAULT = 3,WCR_RCCHANGE = 4,WCR_VERSION = 5,WCR_TRAIN = 6,WCR_TRAINSAVE = 7,WCR_TRAINMAX = 8,WCR_TRAINDIRTY = 9,WCR_TRAINCUSTOM = 10,WCR_QUERYLANGUAGE = 11,WCR_USERCHANGE = 12,WCR_PRIVATE = 1024,};
enum MACRO_WDI {WDI_OPTIONS = 0x1,WDI_FILTER = 0x2,WDI_ALLOCBREAK = 0x4,};
enum MACRO_WEP {WEP_SYSTEM_EXIT = 1,WEP_FREE_DLL = 0,};
enum MACRO_WPF {WPF_SETMINPOSITION = 0x1,WPF_RESTORETOMAXIMIZED = 0x2,};
enum MACRO_WVR {WVR_ALIGNTOP = 0x10,WVR_ALIGNLEFT = 0x20,WVR_ALIGNBOTTOM = 0x40,WVR_ALIGNRIGHT = 0x80,WVR_HREDRAW = 0x100,WVR_VREDRAW = 0x200,WVR_REDRAW = 0x300,WVR_VALIDRECTS = 0x400,};
enum MACRO_XST {XST_NULL = 0,XST_INCOMPLETE = 1,XST_CONNECTED = 2,XST_INIT1 = 3,XST_INIT2 = 4,XST_REQSENT = 5,XST_DATARCVD = 6,XST_POKESENT = 7,XST_POKEACKRCVD = 8,XST_EXECSENT = 9,XST_EXECACKRCVD = 10,XST_ADVSENT = 11,XST_UNADVSENT = 12,XST_ADVACKRCVD = 13,XST_UNADVACKRCVD = 14,XST_ADVDATASENT = 15,XST_ADVDATAACKRCVD = 16,};
enum MACRO__IS {_IS_SP = 1,_IS_DIG = 2,_IS_UPP = 4,_IS_LOW = 8,_IS_HEX = 16,_IS_CTL = 32,_IS_PUN = 64,_IS_BLK = 128,_IS_ALPHA = 12,_IS_ALNUM = 14,_IS_GRAPH = 94,};
typedef struct tMIXERCAPS MIXERCAPS;
typedef struct tMIXERLINE MIXERLINE;
typedef struct auxcaps_tag  *NPAUXCAPS;
typedef struct joycaps_tag  *NPJOYCAPS;
typedef struct joyinfo_tag  *NPJOYINFO;
typedef struct midihdr_tag  *NPMIDIHDR;
typedef struct wavehdr_tag  *NPWAVEHDR;
typedef struct _OLESTREAM OLESTREAM;
typedef struct tagPARAMDATA PARAMDATA;
typedef struct tagPENPACKET PENPACKET;
typedef struct _MMCKINFO *PMMCKINFO;
typedef struct _MMIOINFO *PMMIOINFO;
typedef struct protoent *PPROTOENT;
typedef struct sockaddr *PSOCKADDR;
typedef struct timecaps_tag *PTIMECAPS;
typedef struct videohdr_tag  *PVIDEOHDR;
typedef struct tagRGBTRIPLE RGBTRIPLE;
typedef struct _6EEFECD5A0D572B8077FDFCD6CCD86DE RWCTLINFO;
typedef struct _DFB5CCA608DB1B6F2D4767A059C3C570 RWCTLTYPE;
typedef struct tagSAFEARRAY SAFEARRAY;
typedef struct tagSTGMEDIUM STGMEDIUM;
typedef struct tagTASKENTRY TASKENTRY;
typedef struct tagTIMERINFO TIMERINFO;
typedef struct tagWINDOWPOS WINDOWPOS;
struct __jmp_buf {unsigned int j_sp;unsigned int j_ss;unsigned int j_flag;unsigned int j_cs;unsigned int j_ip;unsigned int j_bp;unsigned int j_di;unsigned int j_es;unsigned int j_si;unsigned int j_ds;unsigned int j_excep;unsigned int j_context;};
struct _complexl {long double x;long double y;};
struct exception {int type;char *name;double arg1;double arg2;double retval;};
typedef int ptrdiff_t;
enum tagCLSCTX {CLSCTX_INPROC_SERVER = 0x1,CLSCTX_INPROC_HANDLER = 0x2,CLSCTX_LOCAL_SERVER = 0x4,};
struct tagDDEACK {unsigned short bAppReturnCode : 8;unsigned short reserved : 6;unsigned short fBusy : 1;unsigned short fAck : 1;};
enum tagMEMCTX {MEMCTX_TASK = 0x1,MEMCTX_SHARED = 0x2,MEMCTX_UNKNOWN = 0xFFFF,MEMCTX_SAME = 0xFFFE,};
enum tagMSHCTX {MSHCTX_LOCAL = 0x0,MSHCTX_NOSHAREDMEM = 0x1,};
struct tagPOINTL {int x;int y;};
enum tagREGCLS {REGCLS_SINGLEUSE = 0x0,REGCLS_MULTIPLEUSE = 0x1,REGCLS_MULTI_SEPARATE = 0x2,};
struct text_info {unsigned char winleft;unsigned char wintop;unsigned char winright;unsigned char winbottom;unsigned char attribute;unsigned char normattr;unsigned char currmode;unsigned char screenheight;unsigned char screenwidth;unsigned char curx;unsigned char cury;};
typedef int CATCHBUF[9];
typedef struct tagCONVINFO CONVINFO;
typedef struct tagCTLSTYLE CTLSTYLE;
typedef struct tagDEVNAMES DEVNAMES;
typedef struct tagELEMDESC ELEMDESC;
typedef struct tagEVENTMSG EVENTMSG;
typedef struct tagFILETIME FILETIME;
typedef struct tagFMS_LOAD FMS_LOAD;
typedef struct tagFUNCDESC FUNCDESC;
typedef unsigned int HREFTYPE;
struct IBindCtx {struct IBindCtxVtbl *lpVtbl;};
struct IMarshal {struct IMarshalVtbl *lpVtbl;};
struct IMoniker {struct IMonikerVtbl *lpVtbl;};
struct IOleLink {struct IOleLinkVtbl *lpVtbl;};
struct IPersist {struct IPersistVtbl *lpVtbl;};
struct IStorage {struct IStorageVtbl *lpVtbl;};
struct ITypeLib {struct ITypeLibVtbl *lpVtbl;};
struct IUnknown {struct IUnknownVtbl *lpVtbl;};
typedef struct tagLOGBRUSH LOGBRUSH;
typedef struct fd_set *LPFD_SET;
typedef struct linger *LPLINGER;
typedef IMalloc *LPMALLOC;
typedef struct mmtime_tag *LPMMTIME;
typedef struct tagPANOSE *LPPANOSE;
typedef IStream *LPSTREAM;
enum MACRO_AF {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_IPX = 6,AF_NS = 6,AF_ISO = 7,AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_NETBIOS = 17,AF_VOICEVIEW = 18,AF_FIREFOX = 19,AF_UNKNOWN1 = 20,AF_BAN = 21,AF_MAX = 22,};
enum MACRO_BI {BI_RGB = 0,BI_RLE8 = 1,BI_RLE4 = 2,};
enum MACRO_BM {BM_GETCHECK = 1024,BM_SETCHECK = 1025,BM_GETSTATE = 1026,BM_SETSTATE = 1027,BM_SETSTYLE = 1028,};
enum MACRO_BN {BN_CLICKED = 0,BN_PAINT = 1,BN_HILITE = 2,BN_UNHILITE = 3,BN_DISABLE = 4,BN_DOUBLECLICKED = 5,};
enum MACRO_BS {BS_SOLID = 0,BS_NULL = 1,BS_HOLLOW = 1,BS_HATCHED = 2,BS_PATTERN = 3,BS_INDEXED = 4,BS_DIBPATTERN = 5,};
enum MACRO_CB {CB_GETEDITSEL = 1024,CB_LIMITTEXT = 1025,CB_SETEDITSEL = 1026,CB_ADDSTRING = 1027,CB_DELETESTRING = 1028,CB_DIR = 1029,CB_GETCOUNT = 1030,CB_GETCURSEL = 1031,CB_GETLBTEXT = 1032,CB_GETLBTEXTLEN = 1033,CB_INSERTSTRING = 1034,CB_RESETCONTENT = 1035,CB_FINDSTRING = 1036,CB_SELECTSTRING = 1037,CB_SETCURSEL = 1038,CB_SHOWDROPDOWN = 1039,CB_GETITEMDATA = 1040,CB_SETITEMDATA = 1041,CB_GETDROPPEDCONTROLRECT = 1042,CB_SETITEMHEIGHT = 1043,CB_GETITEMHEIGHT = 1044,CB_SETEXTENDEDUI = 1045,CB_GETEXTENDEDUI = 1046,CB_GETDROPPEDSTATE = 1047,CB_FINDSTRINGEXACT = 1048,};
enum MACRO_CC {CC_NONE = 0x0,CC_CIRCLES = 0x1,CC_PIE = 0x2,CC_CHORD = 0x4,CC_ELLIPSES = 0x8,CC_WIDE = 0x10,CC_STYLED = 0x20,CC_WIDESTYLED = 0x40,CC_INTERIORS = 0x80,CC_ROUNDRECT = 0x100,};
enum MACRO_CD {CD_LBSELNOITEMS = -1,CD_LBSELCHANGE = 0,CD_LBSELSUB = 1,CD_LBSELADD = 2,};
enum MACRO_CE {CE_RXOVER = 0x1,CE_OVERRUN = 0x2,CE_RXPARITY = 0x4,CE_FRAME = 0x8,CE_BREAK = 0x10,CE_CTSTO = 0x20,CE_DSRTO = 0x40,CE_RLSDTO = 0x80,CE_TXFULL = 0x100,CE_PTO = 0x200,CE_IOE = 0x400,CE_DNS = 0x800,CE_OOP = 0x1000,CE_MODE = 0x8000,};
enum MACRO_CF {CF_TEXT = 1,CF_BITMAP = 2,CF_METAFILEPICT = 3,CF_SYLK = 4,CF_DIF = 5,CF_TIFF = 6,CF_OEMTEXT = 7,CF_DIB = 8,CF_PALETTE = 9,CF_PENDATA = 10,CF_RIFF = 11,CF_WAVE = 12,CF_OWNERDISPLAY = 128,CF_DSPTEXT = 129,CF_DSPBITMAP = 130,CF_DSPMETAFILEPICT = 131,CF_PRIVATEFIRST = 512,CF_PRIVATELAST = 767,CF_GDIOBJFIRST = 768,CF_GDIOBJLAST = 1023,};
enum MACRO_CL {CL_NULL = 0,CL_MINIMUM = 1,CL_MAXIMUM = 100,};
enum MACRO_CN {CN_RECEIVE = 0x1,CN_TRANSMIT = 0x2,CN_EVENT = 0x4,};
enum MACRO_CO {CO_E_FIRST = 0x1F0,CO_E_LAST = 0x1FF,CO_S_FIRST = 0x1F0,CO_S_LAST = 0x1FF,CO_E_NOTINITIALIZED = 0x1F0,CO_E_ALREADYINITIALIZED = 0x1F1,CO_E_CANTDETERMINECLASS = 0x1F2,CO_E_CLASSSTRING = 0x1F3,CO_E_IIDSTRING = 0x1F4,CO_E_APPNOTFOUND = 0x1F5,CO_E_APPSINGLEUSE = 0x1F6,CO_E_ERRORINAPP = 0x1F7,CO_E_DLLNOTFOUND = 0x1F8,CO_E_ERRORINDLL = 0x1F9,CO_E_WRONGOSFORAPP = 0x1FA,CO_E_OBJNOTREG = 0x1FB,CO_E_OBJISREG = 0x1FC,CO_E_OBJNOTCONNECTED = 0x1FD,CO_E_APPDIDNTREG = 0x1FE,};
enum MACRO_CP {CP_NONE = 0x0,CP_RECTANGLE = 0x1,CP_REGION = 0x2,};
enum MACRO_CS {CS_VREDRAW = 0x1,CS_HREDRAW = 0x2,CS_OWNDC = 0x20,CS_CLASSDC = 0x40,CS_PARENTDC = 0x80,CS_SAVEBITS = 0x800,CS_DBLCLKS = 0x8,CS_BYTEALIGNCLIENT = 0x1000,CS_BYTEALIGNWINDOW = 0x2000,CS_NOCLOSE = 0x200,CS_KEYCVTWINDOW = 0x4,CS_NOKEYCVT = 0x100,CS_GLOBALCLASS = 0x4000,};
enum MACRO_CW {CW_USEDEFAULT = 0x8000,};
enum MACRO_DC {DC_HASDEFID = 0x534B,};
enum MACRO_DD {DD_DEFSCROLLINSET = 11,DD_DEFSCROLLDELAY = 50,DD_DEFSCROLLINTERVAL = 50,DD_DEFDRAGDELAY = 200,DD_DEFDRAGMINDIST = 2,};
enum MACRO_DM {DM_GETDEFID = 1024,DM_SETDEFID = 1025,};
enum MACRO_DN {DN_DEFAULTPRN = 0x1,};
enum MACRO_DS {DS_ABSALIGN = 0x1,DS_SYSMODAL = 0x2,DS_LOCALEDIT = 0x20,DS_SETFONT = 0x40,DS_MODALFRAME = 0x80,DS_NOIDLEMSG = 0x100,};
enum MACRO_DT {DT_PLOTTER = 0,DT_RASDISPLAY = 1,DT_RASPRINTER = 2,DT_RASCAMERA = 3,DT_CHARSTREAM = 4,DT_METAFILE = 5,DT_DISPFILE = 6,};
enum MACRO_DV {DV_E_FORMATETC = 100,DV_E_DVTARGETDEVICE = 101,DV_E_STGMEDIUM = 102,DV_E_STATDATA = 103,DV_E_LINDEX = 104,DV_E_TYMED = 105,DV_E_CLIPFORMAT = 106,DV_E_DVASPECT = 107,DV_E_DVTARGETDEVICE_SIZE = 108,DV_E_NOIVIEWOBJECT = 109,};
enum MACRO_EC {EC_ENABLEALL = 0,EC_ENABLEONE = 128,EC_DISABLE = 8,EC_QUERYWAITING = 2,};
enum MACRO_EM {EM_GETSEL = 1024,EM_SETSEL = 1025,EM_GETRECT = 1026,EM_SETRECT = 1027,EM_SETRECTNP = 1028,EM_LINESCROLL = 1030,EM_GETMODIFY = 1032,EM_SETMODIFY = 1033,EM_GETLINECOUNT = 1034,EM_LINEINDEX = 1035,EM_SETHANDLE = 1036,EM_GETHANDLE = 1037,EM_LINELENGTH = 1041,EM_REPLACESEL = 1042,EM_SETFONT = 1043,EM_GETLINE = 1044,EM_LIMITTEXT = 1045,EM_CANUNDO = 1046,EM_UNDO = 1047,EM_FMTLINES = 1048,EM_LINEFROMCHAR = 1049,EM_SETWORDBREAK = 1050,EM_SETTABSTOPS = 1051,EM_SETPASSWORDCHAR = 1052,EM_EMPTYUNDOBUFFER = 1053,EM_GETFIRSTVISIBLELINE = 1054,EM_SETREADONLY = 1055,EM_SETWORDBREAKPROC = 1056,EM_GETWORDBREAKPROC = 1057,EM_GETPASSWORDCHAR = 1058,};
enum MACRO_EN {EN_SETFOCUS = 0x100,EN_KILLFOCUS = 0x200,EN_CHANGE = 0x300,EN_UPDATE = 0x400,EN_ERRSPACE = 0x500,EN_MAXTEXT = 0x501,EN_HSCROLL = 0x601,EN_VSCROLL = 0x602,};
enum MACRO_ES {ES_LEFT = 0x0,ES_CENTER = 0x1,ES_RIGHT = 0x2,ES_MULTILINE = 0x4,ES_UPPERCASE = 0x8,ES_LOWERCASE = 0x10,ES_PASSWORD = 0x20,ES_AUTOVSCROLL = 0x40,ES_AUTOHSCROLL = 0x80,ES_NOHIDESEL = 0x100,ES_OEMCONVERT = 0x400,ES_READONLY = 0x800,ES_WANTRETURN = 0x1000,};
enum MACRO_EV {EV_RXCHAR = 0x1,EV_RXFLAG = 0x2,EV_TXEMPTY = 0x4,EV_CTS = 0x8,EV_DSR = 0x10,EV_RLSD = 0x20,EV_BREAK = 0x40,EV_ERR = 0x80,EV_RING = 0x100,EV_PERR = 0x200,EV_CTSS = 0x400,EV_DSRS = 0x800,EV_RLSDS = 0x1000,EV_RingTe = 0x2000,EV_RINGTE = 0x2000,};
enum MACRO_EW {EW_RESTARTWINDOWS = 0x42,EW_REBOOTSYSTEM = 0x43,};
enum MACRO_FD {FD_SETSIZE = 64,};
enum MACRO_FF {FF_DONTCARE = 0x0,FF_ROMAN = 0x10,FF_SWISS = 0x20,FF_MODERN = 0x30,FF_SCRIPT = 0x40,FF_DECORATIVE = 0x50,};
enum MACRO_FM {FM_GETFOCUS = 0x600,FM_GETDRIVEINFO = 0x601,FM_GETSELCOUNT = 0x602,FM_GETSELCOUNTLFN = 0x603,FM_GETFILESEL = 0x604,FM_GETFILESELLFN = 0x605,FM_REFRESH_WINDOWS = 0x606,FM_RELOAD_EXTENSIONS = 0x607,};
enum MACRO_FR {FR_DOWN = 0x1,FR_WHOLEWORD = 0x2,FR_MATCHCASE = 0x4,FR_FINDNEXT = 0x8,FR_REPLACE = 0x10,FR_REPLACEALL = 0x20,FR_DIALOGTERM = 0x40,FR_SHOWHELP = 0x80,FR_ENABLEHOOK = 0x100,FR_ENABLETEMPLATE = 0x200,FR_NOUPDOWN = 0x400,FR_NOMATCHCASE = 0x800,FR_NOWHOLEWORD = 0x1000,FR_ENABLETEMPLATEHANDLE = 0x2000,FR_HIDEUPDOWN = 0x4000,FR_HIDEMATCHCASE = 0x8000,FR_HIDEWHOLEWORD = 0x0,};
enum MACRO_FW {FW_DONTCARE = 0,FW_THIN = 100,FW_EXTRALIGHT = 200,FW_LIGHT = 300,FW_NORMAL = 400,FW_MEDIUM = 500,FW_SEMIBOLD = 600,FW_BOLD = 700,FW_EXTRABOLD = 800,FW_HEAVY = 900,FW_ULTRALIGHT = 200,FW_REGULAR = 400,FW_DEMIBOLD = 600,FW_ULTRABOLD = 800,FW_BLACK = 900,};
enum MACRO_GD {GD_USERDEFINED = 0,GD_CURSORCOMPONENT = 1,GD_BITMAP = 2,GD_ICONCOMPONENT = 3,GD_MENU = 4,GD_DIALOG = 5,GD_STRING = 6,GD_FONTDIR = 7,GD_FONT = 8,GD_ACCELERATORS = 9,GD_RCDATA = 10,GD_ERRTABLE = 11,GD_CURSOR = 12,GD_ICON = 14,GD_NAMETABLE = 15,GD_MAX_RESOURCE = 15,};
enum MACRO_GF {GF_PDB_OWNER = 0x100,};
enum MACRO_GT {GT_UNKNOWN = 0,GT_DGROUP = 1,GT_DATA = 2,GT_CODE = 3,GT_TASK = 4,GT_RESOURCE = 5,GT_MODULE = 6,GT_FREE = 7,GT_INTERNAL = 8,GT_SENTINEL = 9,GT_BURGERMASTER = 10,};
enum MACRO_GW {GW_HWNDFIRST = 0,GW_HWNDLAST = 1,GW_HWNDNEXT = 2,GW_HWNDPREV = 3,GW_OWNER = 4,GW_CHILD = 5,};
enum MACRO_HC {HC_ACTION = 0,HC_GETLPLPFN = -3,HC_LPLPFNNEXT = -2,HC_LPFNNEXT = -1,};
enum MACRO_HE {HE_GETRC = 3,HE_SETRC = 4,HE_GETINFLATE = 5,HE_SETINFLATE = 6,HE_GETUNDERLINE = 7,HE_SETUNDERLINE = 8,HE_GETINKHANDLE = 9,HE_SETINKMODE = 10,HE_STOPINKMODE = 11,HE_GETRCRESULTCODE = 12,HE_DEFAULTFONT = 13,HE_CHARPOSITION = 14,HE_CHAROFFSET = 15,HE_GETRCRESULT = 22,HE_KKCONVERT = 30,HE_GETKKCONVERT = 31,HE_CANCELKKCONVERT = 32,HE_FIXKKCONVERT = 33,};
enum MACRO_HN {HN_ENDREC = 4,HN_DELAYEDRECOGFAIL = 5,HN_RCRESULT = 20,HN_ENDKKCONVERT = 30,};
enum MACRO_HS {HS_HORIZONTAL = 0,HS_VERTICAL = 1,HS_FDIAGONAL = 2,HS_BDIAGONAL = 3,HS_CROSS = 4,HS_DIAGCROSS = 5,};
enum MACRO_ID {ID_DEFAULTINST = -2,};
enum MACRO_IE {IE_BADID = -1,IE_OPEN = -2,IE_NOPEN = -3,IE_MEMORY = -4,IE_DEFAULT = -5,IE_HARDWARE = -10,IE_BYTESIZE = -11,IE_BAUDRATE = -12,};
enum MACRO_IN {IN_CLASSA_NET = 0x0,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0x0,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x0,IN_CLASSC_NET = 0xFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,};
enum MACRO_IP {IP_OPTIONS = 1,IP_MULTICAST_IF = 2,IP_MULTICAST_TTL = 3,IP_MULTICAST_LOOP = 4,IP_ADD_MEMBERSHIP = 5,IP_DROP_MEMBERSHIP = 6,IP_TTL = 7,IP_TOS = 8,IP_DONTFRAGMENT = 9,IP_DEFAULT_MULTICAST_TTL = 1,IP_DEFAULT_MULTICAST_LOOP = 1,IP_MAX_MEMBERSHIPS = 20,};
enum MACRO_KF {KF_EXTENDED = 0x100,KF_DLGMODE = 0x800,KF_MENUMODE = 0x1000,KF_ALTDOWN = 0x2000,KF_REPEAT = 0x4000,KF_UP = 0x8000,};
enum MACRO_LB {LB_ADDSTRING = 1025,LB_INSERTSTRING = 1026,LB_DELETESTRING = 1027,LB_RESETCONTENT = 1029,LB_SETSEL = 1030,LB_SETCURSEL = 1031,LB_GETSEL = 1032,LB_GETCURSEL = 1033,LB_GETTEXT = 1034,LB_GETTEXTLEN = 1035,LB_GETCOUNT = 1036,LB_SELECTSTRING = 1037,LB_DIR = 1038,LB_GETTOPINDEX = 1039,LB_FINDSTRING = 1040,LB_GETSELCOUNT = 1041,LB_GETSELITEMS = 1042,LB_SETTABSTOPS = 1043,LB_GETHORIZONTALEXTENT = 1044,LB_SETHORIZONTALEXTENT = 1045,LB_SETCOLUMNWIDTH = 1046,LB_SETTOPINDEX = 1048,LB_GETITEMRECT = 1049,LB_GETITEMDATA = 1050,LB_SETITEMDATA = 1051,LB_SELITEMRANGE = 1052,LB_SETCARETINDEX = 1055,LB_GETCARETINDEX = 1056,LB_SETITEMHEIGHT = 1057,LB_GETITEMHEIGHT = 1058,LB_FINDSTRINGEXACT = 1059,};
enum MACRO_LC {LC_NONE = 0x0,LC_POLYLINE = 0x2,LC_MARKER = 0x4,LC_POLYMARKER = 0x8,LC_WIDE = 0x10,LC_STYLED = 0x20,LC_WIDESTYLED = 0x40,LC_INTERIORS = 0x80,};
enum MACRO_LF {LF_FACESIZE = 32,};
enum MACRO_LK {LK_UNLCK = 0,LK_LOCK = 1,LK_NBLCK = 2,LK_RLCK = 3,LK_NBRLCK = 4,};
enum MACRO_LT {LT_NORMAL = 0,LT_FREE = 255,LT_GDI_PEN = 1,LT_GDI_BRUSH = 2,LT_GDI_FONT = 3,LT_GDI_PALETTE = 4,LT_GDI_BITMAP = 5,LT_GDI_RGN = 6,LT_GDI_DC = 7,LT_GDI_DISABLED_DC = 8,LT_GDI_METADC = 9,LT_GDI_METAFILE = 10,LT_GDI_MAX = 10,LT_USER_CLASS = 1,LT_USER_WND = 2,LT_USER_STRING = 3,LT_USER_MENU = 4,LT_USER_CLIP = 5,LT_USER_CBOX = 6,LT_USER_PALETTE = 7,LT_USER_ED = 8,LT_USER_BWL = 9,LT_USER_OWNERDRAW = 10,LT_USER_SPB = 11,LT_USER_CHECKPOINT = 12,LT_USER_DCE = 13,LT_USER_MWP = 14,LT_USER_PROP = 15,LT_USER_LBIV = 16,LT_USER_MISC = 17,LT_USER_ATOMS = 18,LT_USER_LOCKINPUTSTATE = 19,LT_USER_HOOKLIST = 20,LT_USER_USERSEEUSERDOALLOC = 21,LT_USER_HOTKEYLIST = 22,LT_USER_POPUPMENU = 23,LT_USER_HANDLETABLE = 32,LT_USER_MAX = 32,};
enum MACRO_MA {MA_ACTIVATE = 1,MA_ACTIVATEANDEAT = 2,MA_NOACTIVATE = 3,MA_NOACTIVATEANDEAT = 4,};
enum MACRO_MB {MB_OK = 0x0,MB_OKCANCEL = 0x1,MB_ABORTRETRYIGNORE = 0x2,MB_YESNOCANCEL = 0x3,MB_YESNO = 0x4,MB_RETRYCANCEL = 0x5,MB_TYPEMASK = 0xF,MB_ICONHAND = 0x10,MB_ICONQUESTION = 0x20,MB_ICONEXCLAMATION = 0x30,MB_ICONASTERISK = 0x40,MB_ICONMASK = 0xF0,MB_ICONINFORMATION = 0x40,MB_ICONSTOP = 0x10,MB_DEFBUTTON1 = 0x0,MB_DEFBUTTON2 = 0x100,MB_DEFBUTTON3 = 0x200,MB_DEFMASK = 0xF00,MB_APPLMODAL = 0x0,MB_SYSTEMMODAL = 0x1000,MB_TASKMODAL = 0x2000,MB_NOFOCUS = 0x8000,};
enum MACRO_MF {MF_INSERT = 0x0,MF_CHANGE = 0x80,MF_APPEND = 0x100,MF_DELETE = 0x200,MF_REMOVE = 0x1000,MF_BYCOMMAND = 0x0,MF_BYPOSITION = 0x400,MF_SEPARATOR = 0x800,MF_ENABLED = 0x0,MF_GRAYED = 0x1,MF_DISABLED = 0x2,MF_UNCHECKED = 0x0,MF_CHECKED = 0x8,MF_USECHECKBITMAPS = 0x200,MF_STRING = 0x0,MF_BITMAP = 0x4,MF_OWNERDRAW = 0x100,MF_POPUP = 0x10,MF_MENUBARBREAK = 0x20,MF_MENUBREAK = 0x40,MF_UNHILITE = 0x0,MF_HILITE = 0x80,MF_SYSMENU = 0x2000,MF_HELP = 0x4000,MF_MOUSESELECT = 0x8000,MF_END = 0x80,};
enum MACRO_MH {MH_CREATE = 1,MH_KEEP = 2,MH_DELETE = 3,MH_CLEANUP = 4,};
enum MACRO_MK {MK_LBUTTON = 0x1,MK_RBUTTON = 0x2,MK_SHIFT = 0x4,MK_CONTROL = 0x8,MK_MBUTTON = 0x10,};
enum MACRO_MM {MM_TEXT = 1,MM_LOMETRIC = 2,MM_HIMETRIC = 3,MM_LOENGLISH = 4,MM_HIENGLISH = 5,MM_TWIPS = 6,MM_ISOTROPIC = 7,MM_ANISOTROPIC = 8,};
enum MACRO_NF {NF_NORMAL = 0,NF_TASKSWITCH = 1,NF_RIP = 2,};
enum MACRO_OF {OF_READ = 0x0,OF_WRITE = 0x1,OF_READWRITE = 0x2,OF_SHARE_COMPAT = 0x0,OF_SHARE_EXCLUSIVE = 0x10,OF_SHARE_DENY_WRITE = 0x20,OF_SHARE_DENY_READ = 0x30,OF_SHARE_DENY_NONE = 0x40,OF_PARSE = 0x100,OF_DELETE = 0x200,OF_VERIFY = 0x400,OF_SEARCH = 0x400,OF_CANCEL = 0x800,OF_CREATE = 0x1000,OF_PROMPT = 0x2000,OF_EXIST = 0x4000,OF_REOPEN = 0x8000,};
enum MACRO_PC {PC_NONE = 0x0,PC_POLYGON = 0x1,PC_RECTANGLE = 0x2,PC_WINDPOLYGON = 0x4,PC_SCANLINE = 0x8,PC_WIDE = 0x10,PC_STYLED = 0x20,PC_WIDESTYLED = 0x40,PC_INTERIORS = 0x80,};
enum MACRO_PD {PD_ALLPAGES = 0x0,PD_SELECTION = 0x1,PD_PAGENUMS = 0x2,PD_NOSELECTION = 0x4,PD_NOPAGENUMS = 0x8,PD_COLLATE = 0x10,PD_PRINTTOFILE = 0x20,PD_PRINTSETUP = 0x40,PD_NOWARNING = 0x80,PD_RETURNDC = 0x100,PD_RETURNIC = 0x200,PD_RETURNDEFAULT = 0x400,PD_SHOWHELP = 0x800,PD_ENABLEPRINTHOOK = 0x1000,PD_ENABLESETUPHOOK = 0x2000,PD_ENABLEPRINTTEMPLATE = 0x4000,PD_ENABLESETUPTEMPLATE = 0x8000,PD_ENABLEPRINTTEMPLATEHANDLE = 0x0,PD_ENABLESETUPTEMPLATEHANDLE = 0x0,PD_USEDEVMODECOPIES = 0x0,PD_DISABLEPRINTTOFILE = 0x0,PD_HIDEPRINTTOFILE = 0x0,};
enum MACRO_PF {PF_UNSPEC = 0,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_IPX = 6,PF_ISO = 7,PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_VOICEVIEW = 18,PF_FIREFOX = 19,PF_UNKNOWN1 = 20,PF_BAN = 21,PF_MAX = 22,};
enum MACRO_PM {PM_NOREMOVE = 0x0,PM_REMOVE = 0x1,PM_NOYIELD = 0x2,};
enum MACRO_PR {PR_JOBSTATUS = 0x0,};
enum MACRO_PS {PS_SOLID = 0,PS_DASH = 1,PS_DOT = 2,PS_DASHDOT = 3,PS_DASHDOTDOT = 4,PS_NULL = 5,PS_INSIDEFRAME = 6,};
enum MACRO_QS {QS_KEY = 0x1,QS_MOUSEMOVE = 0x2,QS_MOUSEBUTTON = 0x4,QS_MOUSE = 0x6,QS_POSTMESSAGE = 0x8,QS_TIMER = 0x10,QS_PAINT = 0x20,QS_SENDMESSAGE = 0x40,QS_ALLINPUT = 0x7F,};
enum MACRO_R2 {R2_BLACK = 1,R2_NOTMERGEPEN = 2,R2_MASKNOTPEN = 3,R2_NOTCOPYPEN = 4,R2_MASKPENNOT = 5,R2_NOT = 6,R2_XORPEN = 7,R2_NOTMASKPEN = 8,R2_MASKPEN = 9,R2_NOTXORPEN = 10,R2_NOP = 11,R2_MERGENOTPEN = 12,R2_COPYPEN = 13,R2_MERGEPENNOT = 14,R2_MERGEPEN = 15,R2_WHITE = 16,};
enum MACRO_RC {RC_BITBLT = 0x1,RC_BANDING = 0x2,RC_SCALING = 0x4,RC_BITMAP64 = 0x8,RC_GDI20_OUTPUT = 0x10,RC_GDI20_STATE = 0x20,RC_SAVEBITMAP = 0x40,RC_DI_BITMAP = 0x80,RC_PALETTE = 0x100,RC_DIBTODEV = 0x200,RC_BIGFONT = 0x400,RC_STRETCHBLT = 0x800,RC_FLOODFILL = 0x1000,RC_STRETCHDIB = 0x2000,RC_OP_DX_OUTPUT = 0x4000,RC_DEVBITS = 0x8000,};
enum MACRO_SB {SB_LINEUP = 0,SB_LINELEFT = 0,SB_LINEDOWN = 1,SB_LINERIGHT = 1,SB_PAGEUP = 2,SB_PAGELEFT = 2,SB_PAGEDOWN = 3,SB_PAGERIGHT = 3,SB_THUMBPOSITION = 4,SB_THUMBTRACK = 5,SB_TOP = 6,SB_LEFT = 6,SB_BOTTOM = 7,SB_RIGHT = 7,SB_ENDSCROLL = 8,SB_HORZ = 0,SB_VERT = 1,SB_CTL = 2,SB_BOTH = 3,};
enum MACRO_SC {SC_SIZE = 0xF000,SC_MOVE = 0xF010,SC_MINIMIZE = 0xF020,SC_MAXIMIZE = 0xF030,SC_NEXTWINDOW = 0xF040,SC_PREVWINDOW = 0xF050,SC_CLOSE = 0xF060,SC_VSCROLL = 0xF070,SC_HSCROLL = 0xF080,SC_MOUSEMENU = 0xF090,SC_KEYMENU = 0xF100,SC_ARRANGE = 0xF110,SC_RESTORE = 0xF120,SC_TASKLIST = 0xF130,SC_SCREENSAVE = 0xF140,SC_HOTKEY = 0xF150,SC_ICON = 0xF020,SC_ZOOM = 0xF030,};
enum MACRO_SM {SM_CXSCREEN = 0,SM_CYSCREEN = 1,SM_CXVSCROLL = 2,SM_CYHSCROLL = 3,SM_CYCAPTION = 4,SM_CXBORDER = 5,SM_CYBORDER = 6,SM_CXDLGFRAME = 7,SM_CYDLGFRAME = 8,SM_CYVTHUMB = 9,SM_CXHTHUMB = 10,SM_CXICON = 11,SM_CYICON = 12,SM_CXCURSOR = 13,SM_CYCURSOR = 14,SM_CYMENU = 15,SM_CXFULLSCREEN = 16,SM_CYFULLSCREEN = 17,SM_CYKANJIWINDOW = 18,SM_MOUSEPRESENT = 19,SM_CYVSCROLL = 20,SM_CXHSCROLL = 21,SM_DEBUG = 22,SM_SWAPBUTTON = 23,SM_RESERVED1 = 24,SM_RESERVED2 = 25,SM_RESERVED3 = 26,SM_RESERVED4 = 27,SM_CXMIN = 28,SM_CYMIN = 29,SM_CXSIZE = 30,SM_CYSIZE = 31,SM_CXFRAME = 32,SM_CYFRAME = 33,SM_CXMINTRACK = 34,SM_CYMINTRACK = 35,SM_CXDOUBLECLK = 36,SM_CYDOUBLECLK = 37,SM_CXICONSPACING = 38,SM_CYICONSPACING = 39,SM_MENUDROPALIGNMENT = 40,SM_PENWINDOWS = 41,SM_DBCSENABLED = 42,SM_CMETRICS = 43,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_DONTLINGER = 0xFF7F,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_CONNDATA = 0x7000,SO_CONNOPT = 0x7001,SO_DISCDATA = 0x7002,SO_DISCOPT = 0x7003,SO_CONNDATALEN = 0x7004,SO_CONNOPTLEN = 0x7005,SO_DISCDATALEN = 0x7006,SO_DISCOPTLEN = 0x7007,SO_OPENTYPE = 0x7008,SO_SYNCHRONOUS_ALERT = 0x10,SO_SYNCHRONOUS_NONALERT = 0x20,SO_MAXDG = 0x7009,SO_MAXPATHDG = 0x700A,SO_UPDATE_ACCEPT_CONTEXT = 0x700B,SO_CONNECT_TIME = 0x700C,};
enum MACRO_SP {SP_NOTREPORTED = 0x4000,SP_ERROR = 0xFFFF,SP_APPABORT = 0xFFFE,SP_USERABORT = 0xFFFD,SP_OUTOFDISK = 0xFFFC,SP_OUTOFMEMORY = 0xFFFB,};
enum MACRO_SS {SS_LEFT = 0x0,SS_CENTER = 0x1,SS_RIGHT = 0x2,SS_ICON = 0x3,SS_BLACKRECT = 0x4,SS_GRAYRECT = 0x5,SS_WHITERECT = 0x6,SS_BLACKFRAME = 0x7,SS_GRAYFRAME = 0x8,SS_WHITEFRAME = 0x9,SS_SIMPLE = 0xB,SS_LEFTNOWORDWRAP = 0xC,SS_NOPREFIX = 0x80,};
enum MACRO_ST {ST_CONNECTED = 0x1,ST_ADVISE = 0x2,ST_ISLOCAL = 0x4,ST_BLOCKED = 0x8,ST_CLIENT = 0x10,ST_TERMINATED = 0x20,ST_INLIST = 0x40,ST_BLOCKNEXT = 0x80,ST_ISSELF = 0x100,};
enum MACRO_SW {SW_HIDE = 0,SW_SHOWNORMAL = 1,SW_NORMAL = 1,SW_SHOWMINIMIZED = 2,SW_SHOWMAXIMIZED = 3,SW_MAXIMIZE = 3,SW_SHOWNOACTIVATE = 4,SW_SHOW = 5,SW_MINIMIZE = 6,SW_SHOWMINNOACTIVE = 7,SW_SHOWNA = 8,SW_RESTORE = 9,};
enum MACRO_TA {TA_NOUPDATECP = 0x0,TA_UPDATECP = 0x1,TA_LEFT = 0x0,TA_RIGHT = 0x2,TA_CENTER = 0x6,TA_TOP = 0x0,TA_BOTTOM = 0x8,TA_BASELINE = 0x18,};
enum MACRO_TC {TC_OP_CHARACTER = 0x1,TC_OP_STROKE = 0x2,TC_CP_STROKE = 0x4,TC_CR_90 = 0x8,TC_CR_ANY = 0x10,TC_SF_X_YINDEP = 0x20,TC_SA_DOUBLE = 0x40,TC_SA_INTEGER = 0x80,TC_SA_CONTIN = 0x100,TC_EA_DOUBLE = 0x200,TC_IA_ABLE = 0x400,TC_UA_ABLE = 0x800,TC_SO_ABLE = 0x1000,TC_RA_ABLE = 0x2000,TC_VA_ABLE = 0x4000,TC_RESERVED = 0x8000,};
enum MACRO_TF {TF_FORCEDRIVE = 0x80,};
enum MACRO_TT {TT_POLYGON_TYPE = 24,TT_PRIM_LINE = 1,TT_PRIM_QSPLINE = 2,TT_AVAILABLE = 1,TT_ENABLED = 2,};
enum MACRO_VK {VK_LBUTTON = 0x1,VK_RBUTTON = 0x2,VK_CANCEL = 0x3,VK_MBUTTON = 0x4,VK_BACK = 0x8,VK_TAB = 0x9,VK_CLEAR = 0xC,VK_RETURN = 0xD,VK_SHIFT = 0x10,VK_CONTROL = 0x11,VK_MENU = 0x12,VK_PAUSE = 0x13,VK_CAPITAL = 0x14,VK_ESCAPE = 0x1B,VK_SPACE = 0x20,VK_PRIOR = 0x21,VK_NEXT = 0x22,VK_END = 0x23,VK_HOME = 0x24,VK_LEFT = 0x25,VK_UP = 0x26,VK_RIGHT = 0x27,VK_DOWN = 0x28,VK_SELECT = 0x29,VK_PRINT = 0x2A,VK_EXECUTE = 0x2B,VK_SNAPSHOT = 0x2C,VK_INSERT = 0x2D,VK_DELETE = 0x2E,VK_HELP = 0x2F,VK_NUMPAD0 = 0x60,VK_NUMPAD1 = 0x61,VK_NUMPAD2 = 0x62,VK_NUMPAD3 = 0x63,VK_NUMPAD4 = 0x64,VK_NUMPAD5 = 0x65,VK_NUMPAD6 = 0x66,VK_NUMPAD7 = 0x67,VK_NUMPAD8 = 0x68,VK_NUMPAD9 = 0x69,VK_MULTIPLY = 0x6A,VK_ADD = 0x6B,VK_SEPARATOR = 0x6C,VK_SUBTRACT = 0x6D,VK_DECIMAL = 0x6E,VK_DIVIDE = 0x6F,VK_F1 = 0x70,VK_F2 = 0x71,VK_F3 = 0x72,VK_F4 = 0x73,VK_F5 = 0x74,VK_F6 = 0x75,VK_F7 = 0x76,VK_F8 = 0x77,VK_F9 = 0x78,VK_F10 = 0x79,VK_F11 = 0x7A,VK_F12 = 0x7B,VK_F13 = 0x7C,VK_F14 = 0x7D,VK_F15 = 0x7E,VK_F16 = 0x7F,VK_F17 = 0x80,VK_F18 = 0x81,VK_F19 = 0x82,VK_F20 = 0x83,VK_F21 = 0x84,VK_F22 = 0x85,VK_F23 = 0x86,VK_F24 = 0x87,VK_NUMLOCK = 0x90,VK_SCROLL = 0x91,};
enum MACRO_VS {VS_FFI_SIGNATURE = 0x4BD,VS_FFI_STRUCVERSION = 0x0,VS_FFI_FILEFLAGSMASK = 0x3F,VS_FF_DEBUG = 0x1,VS_FF_PRERELEASE = 0x2,VS_FF_PATCHED = 0x4,VS_FF_PRIVATEBUILD = 0x8,VS_FF_INFOINFERRED = 0x10,VS_FF_SPECIALBUILD = 0x20,};
enum MACRO_VT {VT_VECTOR = 0x1000,VT_ARRAY = 0x2000,VT_BYREF = 0x4000,VT_RESERVED = 0x8000,};
enum MACRO_WA {WA_INACTIVE = 0,WA_ACTIVE = 1,WA_CLICKACTIVE = 2,};
enum MACRO_WB {WB_LEFT = 0,WB_RIGHT = 1,WB_ISDELIMITER = 2,};
enum MACRO_WF {WF_PMODE = 0x1,WF_CPU286 = 0x2,WF_CPU386 = 0x4,WF_CPU486 = 0x8,WF_STANDARD = 0x10,WF_WIN286 = 0x10,WF_ENHANCED = 0x20,WF_WIN386 = 0x20,WF_CPU086 = 0x40,WF_CPU186 = 0x80,WF_LARGEFRAME = 0x100,WF_SMALLFRAME = 0x200,WF_80x87 = 0x400,WF_PAGING = 0x800,WF_WLO = 0x8000,};
enum MACRO_WH {WH_GETMESSAGE = 3,WH_CALLWNDPROC = 4,WH_MSGFILTER = -1,WH_SYSMSGFILTER = 6,};
enum MACRO_WM {WM_COMPACTING = 0x41,};
enum MACRO_WN {WN_SUCCESS = 0x0,WN_NOT_SUPPORTED = 0x1,WN_NET_ERROR = 0x2,WN_MORE_DATA = 0x3,WN_BAD_POINTER = 0x4,WN_BAD_VALUE = 0x5,WN_BAD_PASSWORD = 0x6,WN_ACCESS_DENIED = 0x7,WN_FUNCTION_BUSY = 0x8,WN_WINDOWS_ERROR = 0x9,WN_BAD_USER = 0xA,WN_OUT_OF_MEMORY = 0xB,WN_CANCEL = 0xC,WN_CONTINUE = 0xD,WN_NOT_CONNECTED = 0x30,WN_OPEN_FILES = 0x31,WN_BAD_NETNAME = 0x32,WN_BAD_LOCALNAME = 0x33,WN_ALREADY_CONNECTED = 0x34,WN_DEVICE_ERROR = 0x35,WN_CONNECTION_CLOSED = 0x36,};
enum MACRO_WS {WS_OVERLAPPED = 0x0,WS_POPUP = 0x0,WS_CHILD = 0x0,WS_CLIPSIBLINGS = 0x0,WS_CLIPCHILDREN = 0x0,WS_VISIBLE = 0x0,WS_DISABLED = 0x0,WS_MINIMIZE = 0x0,WS_MAXIMIZE = 0x0,WS_CAPTION = 0x0,WS_BORDER = 0x0,WS_DLGFRAME = 0x0,WS_VSCROLL = 0x0,WS_HSCROLL = 0x0,WS_SYSMENU = 0x0,WS_THICKFRAME = 0x0,WS_MINIMIZEBOX = 0x0,WS_MAXIMIZEBOX = 0x0,WS_GROUP = 0x0,WS_TABSTOP = 0x0,WS_OVERLAPPEDWINDOW = 0x0,WS_POPUPWINDOW = 0x0,WS_CHILDWINDOW = 0x0,WS_EX_DLGMODALFRAME = 0x1,WS_EX_NOPARENTNOTIFY = 0x4,WS_EX_TOPMOST = 0x8,WS_EX_ACCEPTFILES = 0x10,WS_EX_TRANSPARENT = 0x20,WS_TILED = 0x0,WS_ICONIC = 0x0,WS_SIZEBOX = 0x0,WS_TILEDWINDOW = 0x0,};
enum MACRO__F {_F_RDWR = 0x3,_F_READ = 0x1,_F_WRIT = 0x2,_F_BUF = 0x4,_F_LBUF = 0x8,_F_ERR = 0x10,_F_EOF = 0x20,_F_BIN = 0x40,_F_IN = 0x80,_F_OUT = 0x100,_F_TERM = 0x200,};
typedef struct _MMCKINFO MMCKINFO;
typedef struct _MMIOINFO MMIOINFO;
typedef int (   *NEARPROC)();
typedef struct mmtime_tag  *NPMMTIME;
typedef struct tagOFSTRUCT OFSTRUCT;
typedef struct auxcaps_tag *PAUXCAPS;
typedef struct tagCPLINFO *PCPLINFO;
typedef struct hostent *PHOSTENT;
typedef struct in_addr *PIN_ADDR;
typedef struct joycaps_tag *PJOYCAPS;
typedef struct joyinfo_tag *PJOYINFO;
typedef struct midihdr_tag *PMIDIHDR;
typedef struct tagPD PRINTDLG;
typedef struct protoent PROTOENT;
typedef struct servent *PSERVENT;
typedef struct timeval *PTIMEVAL;
typedef struct wavehdr_tag *PWAVEHDR;
typedef struct tagRCRESULT RCRESULT;
typedef struct sockaddr SOCKADDR;
typedef struct tagSTATDATA STATDATA;
typedef struct timecaps_tag TIMECAPS;
typedef struct tagTLIBATTR TLIBATTR;
typedef struct tagTYPEATTR TYPEATTR;
typedef struct tagTYPEDESC TYPEDESC;
typedef struct videohdr_tag VIDEOHDR;
typedef struct tagWNDCLASS WNDCLASS;
typedef void (*atexit_t)();
struct protoent {char *p_name;char * *p_aliases;int p_proto;};
struct tagDDELN {unsigned short unused : 13;unsigned short fRelease : 1;unsigned short fDeferUpd : 1;unsigned short fAckReq : 1;int cfFormat;};
struct tagGUIDE {int xOrigin;int yOrigin;int cxBox;int cyBox;int cxBase;int cyBase;int cHorzBox;int cVertBox;int cyMid;};
enum tagMKSYS {MKSYS_NONE = 0x0,MKSYS_GENERICCOMPOSITE = 0x1,MKSYS_FILEMONIKER = 0x2,MKSYS_ANTIMONIKER = 0x3,MKSYS_ITEMMONIKER = 0x4,MKSYS_POINTERMONIKER = 0x5,};
struct tagPOINT {int x;int y;};
struct tagRECTL {int left;int top;int right;int bottom;};
struct tagSIZEL {int cx;int cy;};
enum tagSTGTY {STGTY_STORAGE = 0x1,STGTY_STREAM = 0x2,STGTY_LOCKBYTES = 0x3,STGTY_PROPERTY = 0x4,};
enum tagTYMED {TYMED_HGLOBAL = 0x1,TYMED_FILE = 0x2,TYMED_ISTREAM = 0x4,TYMED_ISTORAGE = 0x8,TYMED_GDI = 0x10,TYMED_MFPICT = 0x20,TYMED_NULL = 0x0,};
typedef struct auxcaps_tag AUXCAPS;
typedef union tagBINDPTR BINDPTR;
typedef struct tagCOMSTAT COMSTAT;
typedef struct tagCPLINFO CPLINFO;
typedef struct tagCTLINFO CTLINFO;
typedef struct tagCTLTYPE CTLTYPE;
typedef struct tagDDEDATA DDEDATA;
typedef struct tagDDEPOKE DDEPOKE;
typedef struct tagDEVMODE DEVMODE;
typedef struct _9811B5662EE51361168BFF08BB491D75 DOCINFO;
typedef int ( *FARPROC)();
typedef struct hostent HOSTENT;
typedef void *HRESULT;
typedef struct tagHSZPAIR HSZPAIR;
typedef struct tagIDLDESC IDLDESC;
struct IMalloc {struct IMallocVtbl *lpVtbl;};
typedef struct in_addr IN_ADDR;
struct IStream {struct IStreamVtbl *lpVtbl;};
typedef struct joycaps_tag JOYCAPS;
typedef struct joyinfo_tag JOYINFO;
typedef struct tagLOGFONT LOGFONT;
typedef  void *LPCVOID;
typedef struct tagFIXED *LPFIXED;
typedef struct tagGUIDE *LPGUIDE;
typedef struct tagRECTL *LPRECTL;
typedef struct tagSIZEL *LPSIZEL;
typedef int LRESULT;
enum MACRO_E {E_UNEXPECTED = 0xFFFF,E_NOTIMPL = 0x1,E_OUTOFMEMORY = 0x2,E_INVALIDARG = 0x3,E_NOINTERFACE = 0x4,E_POINTER = 0x5,E_HANDLE = 0x6,E_ABORT = 0x7,E_FAIL = 0x8,E_ACCESSDENIED = 0x9,};
enum MACRO_L {L_ctermid = 5,L_tmpnam = 13,};
enum MACRO_S {S_PERIOD512 = 0,S_PERIOD1024 = 1,S_PERIOD2048 = 2,S_PERIODVOICE = 3,S_WHITE512 = 4,S_WHITE1024 = 5,S_WHITE2048 = 6,S_WHITEVOICE = 7,S_QUEUEEMPTY = 0,S_THRESHOLD = 1,S_ALLTHRESHOLD = 2,S_NORMAL = 0,S_LEGATO = 1,S_STACCATO = 2,S_SERDVNA = -1,S_SEROFM = -2,S_SERMACT = -3,S_SERQFUL = -4,S_SERBDNT = -5,S_SERDLN = -6,S_SERDCC = -7,S_SERDTP = -8,S_SERDVL = -9,S_SERDMD = -10,S_SERDSH = -11,S_SERDPT = -12,S_SERDFQ = -13,S_SERDDR = -14,S_SERDSR = -15,S_SERDST = -16,};
typedef struct midihdr_tag MIDIHDR;
typedef struct tagOLEVERB OLEVERB;
typedef struct tagPENINFO PENINFO;
typedef struct fd_set *PFD_SET;
typedef struct linger *PLINGER;
typedef struct mmtime_tag *PMMTIME;
typedef struct tagPOINTFX POINTFX;
typedef struct tagRECTOFS RECTOFS;
typedef struct tagRGBQUAD RGBQUAD;
typedef struct tagSEGINFO SEGINFO;
typedef struct servent SERVENT;
typedef struct tagSKBINFO SKBINFO;
typedef struct tagSTATSTG STATSTG;
typedef struct timeval TIMEVAL;
typedef struct tagVARDESC VARDESC;
enum VARENUM {VT_EMPTY = 0x0,VT_NULL = 0x1,VT_I2 = 0x2,VT_I4 = 0x3,VT_R4 = 0x4,VT_R8 = 0x5,VT_CY = 0x6,VT_DATE = 0x7,VT_BSTR = 0x8,VT_DISPATCH = 0x9,VT_ERROR = 0xA,VT_BOOL = 0xB,VT_VARIANT = 0xC,VT_UNKNOWN = 0xD,VT_I1 = 0x10,VT_UI1 = 0x11,VT_UI2 = 0x12,VT_UI4 = 0x13,VT_I8 = 0x14,VT_UI8 = 0x15,VT_INT = 0x16,VT_UINT = 0x17,VT_VOID = 0x18,VT_HRESULT = 0x19,VT_PTR = 0x1A,VT_SAFEARRAY = 0x1B,VT_CARRAY = 0x1C,VT_USERDEFINED = 0x1D,VT_LPSTR = 0x1E,VT_LPWSTR = 0x1F,VT_FILETIME = 0x40,VT_BLOB = 0x41,VT_STREAM = 0x42,VT_STORAGE = 0x43,VT_STREAMED_OBJECT = 0x44,VT_STORED_OBJECT = 0x45,VT_BLOB_OBJECT = 0x46,VT_CF = 0x47,VT_CLSID = 0x48,};
typedef struct tagVARIANT VARIANT;
typedef unsigned int VARTYPE;
typedef struct wavehdr_tag WAVEHDR;
typedef struct WSAData WSADATA;
typedef signed char _TSCHAR;
typedef unsigned char _TUCHAR;
typedef char _TXCHAR;
typedef int clock_t;
struct complex {double x;double y;};
struct hostent {char *h_name;char * *h_aliases;int h_addrtype;int h_length;char * *h_addr_list;};
typedef struct __jmp_buf jmp_buf[1];
struct servent {char *s_name;char * *s_aliases;int s_port;char *s_proto;};
enum tagADVF {ADVF_NODATA = 0x1,ADVF_PRIMEFIRST = 0x2,ADVF_ONLYONCE = 0x4,ADVF_DATAONSTOP = 0x40,ADVFCACHE_NOHANDLER = 0x8,ADVFCACHE_FORCEBUILTIN = 0x10,ADVFCACHE_ONSAVE = 0x20,};
struct tagRECT {int left;int top;int right;int bottom;};
struct tagSIZE {int cx;int cy;};
enum tagSTGC {STGC_DEFAULT = 0x0,STGC_OVERWRITE = 0x1,STGC_ONLYIFCURRENT = 0x2,STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,};
struct timeval {int tv_sec;int tv_usec;};
typedef unsigned int u_short;
/// #define wchar_t  unsigned int ===DEFINED
typedef struct tagBITMAP BITMAP;
enum COLORS {BLACK = 0x0,BLUE = 0x1,GREEN = 0x2,CYAN = 0x3,RED = 0x4,MAGENTA = 0x5,BROWN = 0x6,LIGHTGRAY = 0x7,DARKGRAY = 0x8,LIGHTBLUE = 0x9,LIGHTGREEN = 0xA,LIGHTCYAN = 0xB,LIGHTRED = 0xC,LIGHTMAGENTA = 0xD,YELLOW = 0xE,WHITE = 0xF,};
typedef struct tagDDEACK DDEACK;
typedef int DISPID;
typedef struct fd_set FD_SET;
typedef unsigned int LANGID;
typedef unsigned int LCTYPE;
typedef struct linger LINGER;
typedef struct tagLOGPEN LOGPEN;
typedef int LPARAM;
typedef  char *LPCSTR;
typedef GUID *LPGUID;
typedef int *LPLONG;
typedef struct tagMAT2 *LPMAT2;
typedef void *LPVOID;
typedef struct mmtime_tag MMTIME;
typedef struct tagNFYRIP NFYRIP;
typedef struct tagPANOSE PANOSE;
typedef struct tagPOINTL POINTL;
typedef unsigned int USHORT;
typedef char _TCHAR;
struct dirent {char d_name[13];};
typedef int fpos_t;
typedef struct _B8243ED19B76CA5D55F9F69ED1E7C09F ldiv_t;
typedef unsigned int size_t;
typedef int time_t;
typedef unsigned char u_char;
typedef unsigned int u_long;
typedef unsigned int uint16;
typedef unsigned int uint32;
typedef GUID CLSID;
typedef struct tagDDELN DDELN;
typedef struct tagDDEUP DDEUP;
typedef unsigned int DWORD;
typedef struct tagFIXED FIXED;
typedef struct tagGUIDE GUIDE;
typedef int HFILE;
typedef char *HPSTR;
typedef int *LPINT;
typedef char *LPSTR;
typedef struct tagSYC *LPSYC;
typedef struct tagSYE *LPSYE;
typedef struct tagSYG *LPSYG;
typedef char  *NPSTR;
typedef int  *PLONG;
typedef struct tagPOINT POINT;
typedef struct tagRECTL RECTL;
typedef int SCODE;
typedef int SHORT;
typedef struct tagSIZEL SIZEL;
typedef char TCHAR;
typedef int _TINT;
typedef struct _979FA3DE6ECCF956231BFC297C4278E6 div_t;
struct ffblk {char ff_reserved[21];char ff_attrib;unsigned int ff_ftime;unsigned int ff_fdate;int ff_fsize;char ff_name[13];};
struct ftime {unsigned short ft_tsec : 5;unsigned short ft_min : 6;unsigned short ft_hour : 5;unsigned short ft_day : 5;unsigned short ft_month : 4;unsigned short ft_year : 7;};
typedef signed int int16;
typedef signed int int32;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
struct tagCY {unsigned int Lo;int Hi;};
struct timeb {int time;int millitm;int timezone;int dstflag;};
typedef unsigned int u_int;
typedef unsigned char uint8;
typedef int BOOL;
typedef char *BSTR;
typedef unsigned char BYTE;
typedef char CHAR;
typedef double DATE;
typedef struct _7B3C5D519F2E4A5BE311CA6A6DE1B2A0 FILE;
typedef IBindCtx *LPBC;
typedef struct tagBANDINFOSTRUCT *LPBI;
typedef struct tagRC *LPRC;
typedef struct tagMAT2 MAT2;
typedef int  *PINT;
typedef char  *PSTR;
typedef struct tagRECT RECT;
typedef struct tagSIZE SIZE;
typedef unsigned int UINT;
typedef unsigned int WORD;
typedef signed char int8;
struct stat {int st_dev;int st_ino;int st_mode;int st_nlink;int st_uid;int st_gid;int st_rdev;int st_size;int st_atime;int st_mtime;int st_ctime;};
typedef struct tagABC ABC;
typedef int ALC;
typedef struct tagDCB DCB;
typedef struct _F537039E3C3D15C2CDBD1FBA107663C2 DIR;
typedef GUID IID;
typedef struct tagMSG MSG;
typedef int REC;
typedef char * *SNB;
typedef struct tagSYC SYC;
typedef struct tagSYE SYE;
typedef struct tagSYG SYG;
typedef int SYV;
typedef int CL;
typedef struct tagCY CY;
typedef struct tagRC RC;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct mmtime_tag___E89738907296235928D3FD1615E4E030___77546E6DA24DBEE74453C7AE7BAE240D {BYTE hour;BYTE min;BYTE sec;BYTE frame;BYTE fps;BYTE dummy;};
struct mmtime_tag___E89738907296235928D3FD1615E4E030___B7A2B1CE967584EBB3840978181CF21D {DWORD songptrpos;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 {u_char s_b1;u_char s_b2;u_char s_b3;u_char s_b4;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 {u_short s_w1;u_short s_w2;};
union tMIXERLINECONTROLS___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
union tMIXERCONTROL___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
union tagTYPEDESC___B4FA4469D1F86C0E7D898206ED7D9FDD {struct tagTYPEDESC *lptdesc;struct tagARRAYDESC *lpadesc;HREFTYPE hreftype;};
union tagVARDESC___F04833D7152C1F618CB19FA4ACB5074C {unsigned int oInst;VARIANT *lpvarValue;};
struct _096A9CEC9D0640E3594D0A52C8C05E40 {UINT versionNumber;UINT offset;};
struct _548B30A8C808F6625678FF0EC6B59BB3 {int nClasses;RWCTLCLASS Classes[];};
struct _549C1D5CD1C453772D3DFDF07CAC3EA1 {UINT mtOption;UINT mtID;char mtString[1];};
struct _9811B5662EE51361168BFF08BB491D75 {int cbSize;LPCSTR lpszDocName;LPCSTR lpszOutput;};
struct _F537039E3C3D15C2CDBD1FBA107663C2 {char _d_reserved[30];struct dirent _d_dirent;char *_d_dirname;char _d_first;unsigned char _d_magic;};
struct tMIXERCONTROLDETAILS_LISTTEXT {DWORD dwParam1;DWORD dwParam2;char szName[64];};
struct tMIXERCONTROLDETAILS_UNSIGNED {DWORD dwValue;};
struct tagMCI_WAVE_DELETE_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_GETDEVCAPS_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;};
struct tagMCI_ANIM_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_ANIM_STEP_PARMS {DWORD dwCallback;DWORD dwFrames;};
typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;
typedef CLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;
typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
struct tagMCI_GENERIC_PARMS {DWORD dwCallback;};
struct tagMCI_SEQ_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;DWORD dwTempo;DWORD dwPort;DWORD dwSlave;DWORD dwMaster;DWORD dwOffset;};
struct tagMCI_VD_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_VD_STEP_PARMS {DWORD dwCallback;DWORD dwFrames;};
typedef COMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;
typedef MEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;
typedef NCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;
typedef RASTERIZER_STATUS *LPRASTERIZER_STATUS;
struct tagFMS_GETDRIVEINFO {DWORD dwTotalSpace;DWORD dwFreeSpace;char szPath[260];char szVolume[14];char szShare[128];};
struct tagMCI_RECORD_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_STATUS_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;DWORD dwTrack;};
struct tagVS_FIXEDFILEINFO {DWORD dwSignature;DWORD dwStrucVersion;DWORD dwFileVersionMS;DWORD dwFileVersionLS;DWORD dwProductVersionMS;DWORD dwProductVersionLS;DWORD dwFileFlagsMask;DWORD dwFileFlags;DWORD dwFileOS;DWORD dwFileType;DWORD dwFileSubtype;DWORD dwFileDateMS;DWORD dwFileDateLS;};
typedef BITMAPCOREHEADER *LPBITMAPCOREHEADER;
typedef BITMAPFILEHEADER *LPBITMAPFILEHEADER;
typedef BITMAPINFOHEADER *LPBITMAPINFOHEADER;
typedef DELETEITEMSTRUCT *LPDELETEITEMSTRUCT;
typedef DRIVERINFOSTRUCT *LPDRIVERINFOSTRUCT;
typedef COMPAREITEMSTRUCT  *PCOMPAREITEMSTRUCT;
typedef MEASUREITEMSTRUCT  *PMEASUREITEMSTRUCT;
typedef int ( *EDITWORDBREAKPROC)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef MDICREATESTRUCT *LPMDICREATESTRUCT;
typedef MOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;
typedef WINDOWPLACEMENT *LPWINDOWPLACEMENT;
typedef BITMAPCOREHEADER *PBITMAPCOREHEADER;
typedef BITMAPFILEHEADER *PBITMAPFILEHEADER;
typedef BITMAPINFOHEADER *PBITMAPINFOHEADER;
typedef DELETEITEMSTRUCT  *PDELETEITEMSTRUCT;
struct tagMCI_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_SEEK_PARMS {DWORD dwCallback;DWORD dwTo;};
typedef BITMAPCOREINFO *LPBITMAPCOREINFO;
typedef DRAWITEMSTRUCT *LPDRAWITEMSTRUCT;
typedef HRESULT ( *LPFNCANUNLOADNOW)();
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT;
struct channel_caps_tag {DWORD dwFlags;DWORD dwSrcRectXMod;DWORD dwSrcRectYMod;DWORD dwSrcRectWidthMod;DWORD dwSrcRectHeightMod;DWORD dwDstRectXMod;DWORD dwDstRectYMod;DWORD dwDstRectWidthMod;DWORD dwDstRectHeightMod;};
struct tagINTERFACEDATA {METHODDATA *pmethdata;unsigned int cMembers;};
struct tagMCI_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;};
typedef CBT_CREATEWND *LPCBT_CREATEWND;
typedef  WAVEFORMATEX *LPCWAVEFORMATEX;
typedef DEBUGHOOKINFO *LPDEBUGHOOKINFO;
typedef DRVCONFIGINFO *LPDRVCONFIGINFO;
typedef NEWTEXTMETRIC *LPNEWTEXTMETRIC;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;
typedef NEWTEXTMETRIC  *NPNEWTEXTMETRIC;
typedef FARPROC OLDFONTENUMPROC;
typedef BITMAPCOREINFO *PBITMAPCOREINFO;
typedef DRAWITEMSTRUCT  *PDRAWITEMSTRUCT;
struct _ULARGE_INTEGER {DWORD LowPart;DWORD HighPart;};
struct tagPALETTEENTRY {BYTE peRed;BYTE peGreen;BYTE peBlue;BYTE peFlags;};
typedef FARPROC GRAYSTRINGPROC;
typedef CREATESTRUCT *LPCREATESTRUCT;
typedef METAFILEPICT *LPMETAFILEPICT;
typedef OPENFILENAME *LPOPENFILENAME;
typedef PALETTEENTRY *LPPALETTEENTRY;
typedef DRVCONFIGINFO  *PDRVCONFIGINFO;
typedef NEWTEXTMETRIC *PNEWTEXTMETRIC;
struct _LARGE_INTEGER {DWORD LowPart;int HighPart;};
struct tagENUMLOGFONT {LOGFONT elfLogFont;char elfFullName[64];char elfStyle[32];};
struct tagKERNINGPAIR {WORD wFirst;WORD wSecond;int iKernAmount;};
typedef CHOOSECOLOR *LPCHOOSECOLOR;
typedef FINDREPLACE *LPFINDREPLACE;
typedef HANDLETABLE *LPHANDLETABLE;
typedef HELPWININFO *LPHELPWININFO;
typedef PAINTSTRUCT *LPPAINTSTRUCT;
typedef PAINTSTRUCT  *NPPAINTSTRUCT;
typedef enum tagOLEGETMONIKER OLEGETMONIKER;
typedef enum tagOLEVERBATTRIB OLEVERBATTRIB;
typedef enum tagUSERCLASSTYPE USERCLASSTYPE;
struct tagMINMAXINFO {POINT ptReserved;POINT ptMaxSize;POINT ptMaxPosition;POINT ptMinTrackSize;POINT ptMaxTrackSize;};
struct tagOEMPENINFO {UINT wPdt;UINT wValueMax;UINT wDistinct;};
struct tagTEXTMETRIC {int tmHeight;int tmAscent;int tmDescent;int tmInternalLeading;int tmExternalLeading;int tmAveCharWidth;int tmMaxCharWidth;int tmWeight;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmPitchAndFamily;BYTE tmCharSet;int tmOverhang;int tmDigitizedAspectX;int tmDigitizedAspectY;};
typedef RECT BORDERWIDTHS;
typedef enum tagDISCARDCACHE DISCARDCACHE;
typedef FARPROC FONTENUMPROC;
typedef FARPROC GOBJENUMPROC;
typedef BITMAPINFO *LPBITMAPINFO;
typedef CHOOSEFONT *LPCHOOSEFONT;
typedef LOGPALETTE *LPLOGPALETTE;
typedef METARECORD *LPMETARECORD;
typedef WORD *LPPATCHARRAY;
typedef RWCTLSTYLE *LPRWCTLSTYLE;
typedef TEXTMETRIC *LPTEXTMETRIC;
typedef LOGPALETTE  *NPLOGPALETTE;
typedef TEXTMETRIC  *NPTEXTMETRIC;
typedef CONVCONTEXT *PCONVCONTEXT;
typedef HANDLETABLE *PHANDLETABLE;
typedef HELPWININFO  *PHELPWININFO;
typedef PAINTSTRUCT *PPAINTSTRUCT;
typedef FARPROC PROPENUMPROC;
typedef FARPROC RSRCHDLRPROC;
struct tagBIND_OPTS {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;};
struct tagPARAMDATA {char *szName;VARTYPE vt;};
struct tagPENPACKET {UINT wTabletX;UINT wTabletY;UINT wPDK;UINT rgwOemData[6];};
struct tagRGBTRIPLE {BYTE rgbtBlue;BYTE rgbtGreen;BYTE rgbtRed;};
struct tagSAFEARRAY {unsigned int cDims;unsigned int fFeatures;unsigned int cbElements;unsigned int cLocks;unsigned int handle;void *pvData;SAFEARRAYBOUND rgsabound[1];};
struct tagTIMERINFO {DWORD dwSize;DWORD dwmsSinceStart;DWORD dwmsThisVM;};
struct timecaps_tag {UINT wPeriodMin;UINT wPeriodMax;};
typedef FARPROC GNOTIFYPROC;
typedef FARPROC LINEDDAPROC;
typedef  MMCKINFO *LPCMMCKINFO;
typedef  MMIOINFO *LPCMMIOINFO;
typedef RGBTRIPLE *LPRGBTRIPLE;
typedef RWCTLINFO *LPRWCTLINFO;
typedef WINDOWPOS *LPWINDOWPOS;
typedef UINT MCIDEVICEID;
typedef enum tagOLELINKBIND OLELINKBIND;
typedef BITMAPINFO *PBITMAPINFO;
typedef enum tagPENDINGTYPE PENDINGTYPE;
typedef LOGPALETTE *PLOGPALETTE;
typedef METARECORD *PMETARECORD;
typedef RWCTLSTYLE *PRWCTLSTYLE;
typedef TEXTMETRIC *PTEXTMETRIC;
typedef BOOL ( *RCYIELDPROC)();
typedef enum tagSTREAM_SEEK STREAM_SEEK;
typedef FARPROC WNDENUMPROC;
struct joyinfo_tag {UINT wXpos;UINT wYpos;UINT wZpos;UINT wButtons;};
struct sockaddr_nb {int snb_family;u_short snb_type;char snb_name[16];};
struct tagDEVNAMES {UINT wDriverOffset;UINT wDeviceOffset;UINT wOutputOffset;UINT wDefault;};
struct tagFILETIME {DWORD dwLowDateTime;DWORD dwHighDateTime;};
typedef enum _320585250961ABE9F4D068EEEC4E2CC6 BIND_FLAGS;
typedef WORD CLIPFORMAT;
typedef enum tagINVOKEKIND INVOKEKIND;
typedef CTLSTYLE *LPCTLSTYLE;
typedef DEVNAMES *LPDEVNAMES;
typedef EVENTMSG *LPEVENTMSG;
typedef WORD *LPKEYARRAY;
typedef LOGBRUSH *LPLOGBRUSH;
typedef OFSTRUCT *LPOFSTRUCT;
typedef PRINTDLG *LPPRINTDLG;
typedef STATDATA *LPSTATDATA;
typedef WNDCLASS *LPWNDCLASS;
typedef FARPROC MFENUMPROC;
typedef EVENTMSG  *NPEVENTMSG;
typedef LOGBRUSH  *NPLOGBRUSH;
typedef OFSTRUCT  *NPOFSTRUCT;
typedef WNDCLASS  *NPWNDCLASS;
typedef enum tagOLEWHICHMK OLEWHICHMK;
typedef WORD PATCHARRAY[128];
typedef enum tagPENDINGMSG PENDINGMSG;
typedef RWCTLINFO *PRWCTLINFO;
typedef enum tagSERVERCALL SERVERCALL;
struct _OLESTREAM {LPOLESTREAMVTBL lpstbl;};
struct tagDDEDATA {unsigned short unused : 12;unsigned short fResponse : 1;unsigned short fRelease : 1;unsigned short reserved : 1;unsigned short fAckReq : 1;int cfFormat;BYTE Value[1];};
struct tagDDEPOKE {unsigned short unused : 13;unsigned short fRelease : 1;unsigned short fReserved : 2;int cfFormat;BYTE Value[1];};
struct tagIDLDESC {BSTR bstrIDLInfo;unsigned int wIDLFlags;};
struct tagLOGFONT {int lfHeight;int lfWidth;int lfEscapement;int lfOrientation;int lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;char lfFaceName[32];};
struct tagPOINTFX {FIXED x;FIXED y;};
struct tagRGBQUAD {BYTE rgbBlue;BYTE rgbGreen;BYTE rgbRed;BYTE rgbReserved;};
typedef FARPROC ABORTPROC;
typedef enum tagBINDSPEED BINDSPEED;
typedef enum tagFUNCFLAGS FUNCFLAGS;
typedef DWORD HCONVLIST;
typedef UINT HINSTANCE;
typedef UINT HMETAFILE;
typedef UINT HMIDISTRM;
typedef UINT HMIXEROBJ;
typedef CTLINFO *LPCTLINFO;
typedef DEVMODE *LPDEVMODE;
typedef DOCINFO *LPDOCINFO;
typedef LOGFONT *LPLOGFONT;
typedef RGBQUAD *LPRGBQUAD;
typedef SEGINFO *LPSEGINFO;
typedef WSADATA *LPWSADATA;
typedef enum tagMKREDUCE MKRREDUCE;
typedef enum tagMSHLFLAGS MSHLFLAGS;
typedef DEVMODE  *NPDEVMODE;
typedef LOGFONT  *NPLOGFONT;
typedef enum tagOLERENDER OLERENDER;
typedef enum tagOLEUPDATE OLEUPDATE;
typedef CONVINFO *PCONVINFO;
typedef CTLSTYLE *PCTLSTYLE;
typedef EVENTMSG *PEVENTMSG;
typedef LOGBRUSH *PLOGBRUSH;
typedef OFSTRUCT *POFSTRUCT;
typedef WNDCLASS *PWNDCLASS;
typedef FARPROC TIMERPROC;
typedef enum tagTYPEFLAGS TYPEFLAGS;
struct sockproto {u_short sp_family;u_short sp_protocol;};
struct tagBITMAP {int bmType;int bmWidth;int bmHeight;int bmWidthBytes;BYTE bmPlanes;BYTE bmBitsPixel;void *bmBits;};
struct tagPANOSE {BYTE bFamilyType;BYTE bSerifStyle;BYTE bWeight;BYTE bProportion;BYTE bContrast;BYTE bStrokeVariation;BYTE bArmStyle;BYTE bLetterform;BYTE bMidline;BYTE bXHeight;};
typedef enum tagCALLCONV CALLCONV;
typedef enum tagCALLTYPE CALLTYPE;
typedef DWORD COLORREF;
typedef enum tagDESCKIND DESCKIND;
typedef enum tagDVASPECT DVASPECT;
typedef enum tagFUNCKIND FUNCKIND;
typedef DWORD HDDEDATA;
typedef UINT HMIDIOUT;
typedef UINT HOLEMENU;
typedef FARPROC HOOKPROC;
typedef UINT HPALETTE;
typedef UINT HWAVEOUT;
typedef WORD KEYARRAY[128];
typedef enum tagLIBFLAGS LIBFLAGS;
typedef enum tagLOCKTYPE LOCKTYPE;
typedef BITMAP *LPBITMAP;
typedef  RECTL *LPCRECTL;
typedef LOGPEN *LPLOGPEN;
typedef DWORD MCIERROR;
typedef DISPID MEMBERID;
typedef UINT MMRESULT;
typedef BITMAP  *NPBITMAP;
typedef LOGPEN  *NPLOGPEN;
typedef enum tagOLECLOSE OLECLOSE;
typedef enum tagOLECONTF OLECONTF;
typedef CTLINFO *PCTLINFO;
typedef DEVMODE *PDEVMODE;
typedef HSZPAIR *PHSZPAIR;
typedef LOGFONT *PLOGFONT;
typedef enum tagSTATFLAG STATFLAG;
typedef enum tagTYPEKIND TYPEKIND;
typedef enum tagVARFLAGS VARFLAGS;
struct sockaddr {u_short sa_family;char sa_data[14];};
struct tagDDEUP {unsigned short unused : 12;unsigned short fAck : 1;unsigned short fRelease : 1;unsigned short fReserved : 1;unsigned short fAckReq : 1;int cfFormat;BYTE rgb[1];};
struct tagFIXED {UINT fract;int value;};
typedef enum tagDATADIR DATADIR;
typedef FARPROC DLGPROC;
typedef enum tagEXTCONN EXTCONN;
typedef UINT HBITMAP;
typedef UINT HGDIOBJ;
typedef UINT HMIDIIN;
typedef HINSTANCE HMODULE;
typedef UINT HWAVEIN;
typedef CLSID *LPCLSID;
typedef  RECT *LPCRECT;
typedef  TCHAR *LPCTSTR;
typedef DWORD *LPDWORD;
typedef POINT *LPPOINT;
typedef POINT  *NPPOINT;
typedef enum tagOLEMISC OLEMISC;
typedef LOGBRUSH PATTERN;
typedef BITMAP *PBITMAP;
typedef LOGPEN *PLOGPEN;
typedef enum tagSTGMOVE STGMOVE;
typedef enum tagSYSKIND SYSKIND;
typedef enum tagVARKIND VARKIND;
typedef UINT VERSION;
struct WSAData {WORD wVersion;WORD wHighVersion;char szDescription[257];char szSystemStatus[129];unsigned int iMaxSockets;unsigned int iMaxUdpDg;char *lpVendorInfo;};
typedef enum _C967B4BD5950CD7FE5A55F6326D513E0 _mexcep;
struct tagMAT2 {FIXED eM11;FIXED eM12;FIXED eM21;FIXED eM22;};
struct utimbuf {time_t actime;time_t modtime;};
typedef enum tagCLSCTX CLSCTX;
typedef DWORD FOURCC;
typedef UINT HACCEL;
typedef UINT HANDLE;
typedef UINT HBRUSH;
typedef HANDLE HLOCAL;
typedef UINT HMIXER;
typedef UINT HVIDEO;
typedef BSTR *LPBSTR;
typedef BYTE *LPBYTE;
typedef RECT *LPRECT;
typedef SIZE *LPSIZE;
typedef TCHAR *LPTSTR;
typedef UINT *LPUINT;
typedef WORD *LPWORD;
typedef enum tagMEMCTX MEMCTX;
typedef enum tagMSHCTX MSHCTX;
typedef RECT  *NPRECT;
typedef SIZE  *NPSIZE;
typedef DWORD  *PDWORD;
typedef POINT *PPOINT;
typedef SCODE *PSCODE;
typedef enum tagREGCLS REGCLS;
typedef u_int SOCKET;
typedef UINT WPARAM;
struct linger {u_short l_onoff;u_short l_linger;};
struct netent {char *n_name;char * *n_aliases;int n_addrtype;u_long n_net;};
struct tagABC {int abcA;UINT abcB;int abcC;};
typedef unsigned int wint_t;
typedef DWORD HCONV;
typedef UINT HDROP;
typedef UINT HDRVR;
typedef UINT HFONT;
typedef DWORD HHOOK;
typedef UINT HICON;
typedef UINT HMENU;
typedef UINT HMIDI;
typedef UINT HMMIO;
typedef UINT HRSRC;
typedef UINT HTASK;
typedef UINT HWAVE;
typedef ABC *LPABC;
typedef DCB *LPDCB;
typedef IID *LPIID;
typedef MSG *LPMSG;
typedef SYV *LPSYV;
typedef enum tagMKSYS MKSYS;
typedef MSG  *NPMSG;
typedef BYTE  *PBYTE;
typedef RECT *PRECT;
typedef SIZE *PSIZE;
typedef WORD  *PWORD;
typedef enum tagSTGTY STGTY;
typedef enum tagTYMED TYMED;
typedef DWORD ULONG;
typedef WORD WCHAR;
typedef enum tagADVF ADVF;
typedef UINT ATOM;
typedef UINT HDWP;
typedef DWORD HKEY;
typedef UINT HPEN;
typedef HANDLE HREC;
typedef UINT HRGN;
typedef UINT HSTR;
typedef UINT HWND;
typedef DWORD LCID;
typedef MSG *PMSG;
typedef enum tagSTGC STGC;
typedef UINT HDC;
typedef UINT HKP;
typedef DWORD HSZ;
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F {HWND hwndOwner;DWORD cMultipleItems;};
union tagSTGMEDIUM___62EF16ADBE1A605A5A555D41C9B0FE35 {HANDLE hGlobal;LPSTR lpszFileName;IStream *pstm;IStorage *pstg;};
struct _6EEFECD5A0D572B8077FDFCD6CCD86DE {UINT wVersion;UINT wCtlTypes;char szClass[20];char szTitle[94];char szReserved[10];RWCTLTYPE Type[12];};
struct tagMCI_ANIM_RECT_PARMS {DWORD dwCallback;RECT rc;};
struct tagMCI_OVLY_RECT_PARMS {DWORD dwCallback;RECT rc;};
struct tagMCI_VD_ESCAPE_PARMS {DWORD dwCallback;LPCSTR lpstrCommand;};
struct ISupportErrorInfoVtbl {HRESULT (*QueryInterface)(ISupportErrorInfo *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(ISupportErrorInfo *This);unsigned int (*Release)(ISupportErrorInfo *This);HRESULT (*InterfaceSupportsErrorInfo)(ISupportErrorInfo *This,  IID * riid);};
struct tagCLIENTCREATESTRUCT {HMENU hWindowMenu;UINT idFirstChild;};
struct tagMCI_WAVE_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;WORD wInput;WORD wReserved0;WORD wOutput;WORD wReserved1;WORD wFormatTag;WORD wReserved2;WORD nChannels;WORD wReserved3;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wReserved4;WORD wBitsPerSample;WORD wReserved5;};
struct tagCBTACTIVATESTRUCT {BOOL fMouse;HWND hWndActive;};
struct tagMEASUREITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemWidth;UINT itemHeight;DWORD itemData;};
struct tagNCCALCSIZE_PARAMS {RECT rgrc[3];WINDOWPOS *lppos;};
struct tagBITMAPCOREHEADER {DWORD bcSize;int bcWidth;int bcHeight;WORD bcPlanes;WORD bcBitCount;};
struct tagBITMAPFILEHEADER {UINT bfType;DWORD bfSize;UINT bfReserved1;UINT bfReserved2;DWORD bfOffBits;};
struct tagBITMAPINFOHEADER {DWORD biSize;int biWidth;int biHeight;WORD biPlanes;WORD biBitCount;DWORD biCompression;DWORD biSizeImage;int biXPelsPerMeter;int biYPelsPerMeter;DWORD biClrUsed;DWORD biClrImportant;};
struct tagTTPOLYGONHEADER {DWORD cb;DWORD dwType;POINTFX pfxStart;};
struct pcmwaveformat_tag {WAVEFORMAT wf;WORD wBitsPerSample;};
struct tagBANDINFOSTRUCT {BOOL fGraphics;BOOL fText;RECT rcGraphics;};
struct tagBITMAPCOREINFO {BITMAPCOREHEADER bmciHeader;RGBTRIPLE bmciColors[1];};
struct tagMCI_INFO_PARMS {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;};
struct tagMCI_LOAD_PARMS {DWORD dwCallback;LPCSTR lpfilename;};
struct tagMCI_SAVE_PARMS {DWORD dwCallback;LPCSTR lpfilename;};
struct tagCBT_CREATEWND {CREATESTRUCT *lpcs;HWND hwndInsertAfter;};
struct tagDRVCONFIGINFO {DWORD dwDCISize;LPCSTR lpszDCISectionName;LPCSTR lpszDCIAliasName;};
struct tagINTERFACEINFO {struct IUnknown *pUnk;IID iid;WORD wMethod;};
struct DRVCONFIGINFOEX {DWORD dwDCISize;LPCSTR lpszDCISectionName;LPCSTR lpszDCIAliasName;DWORD dnDevNode;};
struct tagGLYPHMETRICS {UINT gmBlackBoxX;UINT gmBlackBoxY;POINT gmptGlyphOrigin;int gmCellIncX;int gmCellIncY;};
struct tagMULTIKEYHELP {UINT mkSize;BYTE mkKeylist;BYTE szKeyphrase[1];};
struct tagWINDEBUGINFO {UINT flags;DWORD dwOptions;DWORD dwFilter;char achAllocModule[8];DWORD dwAllocBreak;DWORD dwAllocCount;};
struct _OLESTREAMVTBL {DWORD ( *Get)(LPOLESTREAM, void *, DWORD);DWORD ( *Put)(LPOLESTREAM,  void *, DWORD);};
struct midiincaps_tag {WORD wMid;WORD wPid;VERSION vDriverVersion;char szPname[32];};
struct tagCONVCONTEXT {UINT cb;UINT wFlags;UINT wCountryID;int iCodePage;DWORD dwLangID;DWORD dwSecurity;};
struct tagNFYLOGERROR {DWORD dwSize;UINT wErrCode;void *lpInfo;};
struct tagTTPOLYCURVE {UINT wType;UINT cpfx;POINTFX apfx[1];};
struct waveformat_tag {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;};
typedef int ( *LPFUNCRESULTS)(LPRCRESULT, REC);
struct tWAVEFORMATEX {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wBitsPerSample;WORD cbSize;};
struct tagBITMAPINFO {BITMAPINFOHEADER bmiHeader;RGBQUAD bmiColors[1];};
struct tagDISPPARAMS {VARIANTARG *rgvarg;DISPID *rgdispidNamedArgs;unsigned int cArgs;unsigned int cNamedArgs;};
struct tagGLOBALINFO {DWORD dwSize;WORD wcItems;WORD wcItemsFree;WORD wcItemsLRU;};
struct tagLOGPALETTE {WORD palVersion;WORD palNumEntries;PALETTEENTRY palPalEntry[1];};
struct tagMEMMANINFO {DWORD dwSize;DWORD dwLargestFreeBlock;DWORD dwMaxPagesAvailable;DWORD dwMaxPagesLockable;DWORD dwTotalLinearSpace;DWORD dwTotalUnlockedPages;DWORD dwFreePages;DWORD dwTotalPages;DWORD dwFreeLinearSpace;DWORD dwSwapFilePages;WORD wPageSize;};
struct tagMETAHEADER {UINT mtType;UINT mtHeaderSize;UINT mtVersion;DWORD mtSize;UINT mtNoObjects;DWORD mtMaxRecord;UINT mtNoParameters;};
struct tagMETARECORD {DWORD rdSize;UINT rdFunction;UINT rdParm[1];};
struct tagNEWCPLINFO {DWORD dwSize;DWORD dwFlags;DWORD dwHelpContext;int lData;HICON hIcon;char szName[32];char szInfo[64];char szHelpFile[128];};
struct tagSTROKEINFO {UINT cPnt;UINT cbPnts;UINT wPdk;DWORD dwTick;};
typedef void  TIMECALLBACK(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
struct sockaddr_vns {u_short sin_family;u_char net_address[4];u_char subnet_addr[2];u_char port[2];u_char hops;u_char filler[5];};
struct tagARRAYDESC {TYPEDESC tdescElem;unsigned int cDims;SAFEARRAYBOUND rgbounds[1];};
struct tagBOXLAYOUT {int cyCusp;int cyEndCusp;UINT style;DWORD rgbText;DWORD rgbBox;DWORD rgbSelect;};
struct tagLOCALINFO {DWORD dwSize;WORD wcItems;};
struct tagSTGMEDIUM {DWORD tymed;tagSTGMEDIUM___62EF16ADBE1A605A5A555D41C9B0FE35 __anonymous0;IUnknown *pUnkForRelease;};
struct tagWINDOWPOS {HWND hwnd;HWND hwndInsertAfter;int x;int y;int cx;int cy;UINT flags;};
struct videohdr_tag {LPBYTE lpData;DWORD dwBufferLength;DWORD dwBytesUsed;DWORD dwTimeCaptured;DWORD dwUser;DWORD dwFlags;DWORD dwReserved[4];};
typedef BOOL ( *LPFNEDITRES)(LPSTR szType, LPSTR szId);
typedef UINT ( *LPFNIDTOSTR)(UINT, LPSTR, UINT);
typedef BOOL ( *LPFNRAWHOOK)(LPPENPACKET);
typedef DWORD ( *LPFNSTRTOID)(LPSTR);
struct joycaps_tag {WORD wMid;WORD wPid;char szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;};
struct midihdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;struct midihdr_tag *lpNext;DWORD reserved;};
struct sockaddr_tp {u_short tp_family;u_short tp_addr_type;u_short tp_taddr_len;u_short tp_tsel_len;u_char tp_addr[64];};
struct tagCTLSTYLE {UINT wX;UINT wY;UINT wCx;UINT wCy;UINT wId;DWORD dwStyle;char szClass[20];char szTitle[94];};
struct tagELEMDESC {TYPEDESC tdesc;IDLDESC idldesc;};
struct tagEVENTMSG {UINT message;UINT paramL;UINT paramH;DWORD time;};
struct tagLOGBRUSH {UINT lbStyle;COLORREF lbColor;int lbHatch;};
struct tagOFSTRUCT {BYTE cBytes;BYTE fFixedDisk;UINT nErrCode;BYTE reserved[4];char szPathName[128];};
struct tagSTATDATA {FORMATETC formatetc;DWORD advf;IAdviseSink *pAdvSink;DWORD dwConnection;};
struct tagTYPEDESC {tagTYPEDESC___B4FA4469D1F86C0E7D898206ED7D9FDD __anonymous0;VARTYPE vt;};
struct wavehdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;DWORD dwLoops;struct wavehdr_tag *lpNext;DWORD reserved;};
union tagBINDPTR {FUNCDESC *lpfuncdesc;VARDESC *lpvardesc;ITypeComp *lptcomp;};
struct tagCOMSTAT {BYTE status;UINT cbInQue;UINT cbOutQue;};
struct tagCTLINFO {UINT wVersion;UINT wCtlTypes;char szClass[20];char szTitle[94];char szReserved[10];CTLTYPE Type[12];};
struct tagCTLTYPE {UINT wType;UINT wWidth;UINT wHeight;DWORD dwStyle;char szDescr[22];};
struct tagDEVMODE {char dmDeviceName[32];UINT dmSpecVersion;UINT dmDriverVersion;UINT dmSize;UINT dmDriverExtra;DWORD dmFields;int dmOrientation;int dmPaperSize;int dmPaperLength;int dmPaperWidth;int dmScale;int dmCopies;int dmDefaultSource;int dmPrintQuality;int dmColor;int dmDuplex;int dmYResolution;int dmTTOption;};
struct tagOLEVERB {int lVerb;LPSTR lpszVerbName;DWORD fuFlags;DWORD grfAttribs;};
struct tagPENINFO {UINT cxRawWidth;UINT cyRawHeight;UINT wDistinctWidth;UINT wDistinctHeight;int nSamplingRate;int nSamplingDist;int lPdc;int cPens;int cbOemData;OEMPENINFO rgoempeninfo[6];UINT rgwReserved[8];};
struct _MMCKINFO {FOURCC ckid;DWORD cksize;FOURCC fccType;DWORD dwDataOffset;DWORD dwFlags;};
struct tagNFYRIP {DWORD dwSize;WORD wIP;WORD wCS;WORD wSS;WORD wBP;WORD wExitCode;};
struct fd_set {u_int fd_count;SOCKET fd_array[64];};
struct tagDCB {BYTE Id;UINT BaudRate;BYTE ByteSize;BYTE Parity;BYTE StopBits;UINT RlsTimeout;UINT CtsTimeout;UINT DsrTimeout;unsigned short fBinary : 1;unsigned short fRtsDisable : 1;unsigned short fParity : 1;unsigned short fOutxCtsFlow : 1;unsigned short fOutxDsrFlow : 1;unsigned short fDummy : 2;unsigned short fDtrDisable : 1;unsigned short fOutX : 1;unsigned short fInX : 1;unsigned short fPeChar : 1;unsigned short fNull : 1;unsigned short fChEvt : 1;unsigned short fDtrflow : 1;unsigned short fRtsflow : 1;unsigned short fDummy2 : 1;char XonChar;char XoffChar;UINT XonLim;UINT XoffLim;char PeChar;char EofChar;char EvtChar;UINT TxDelay;};
struct tagSYC {UINT wStrokeFirst;UINT wPntFirst;UINT wStrokeLast;UINT wPntLast;BOOL fLastSyc;};
struct tagSYE {SYV syv;int lRecogVal;CL cl;int iSyc;};
typedef int ( *LPDF)(int, LPVOID, LPVOID, int, DWORD, DWORD);
union tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C {struct tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C___D5AE507983131F2A7D73786D6C61051F s1;struct tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C___A8262751543F154F80C41ED2519FD13B s2;DWORD dwReserved[6];};
union mmtime_tag___E89738907296235928D3FD1615E4E030 {DWORD ms;DWORD sample;DWORD cb;DWORD ticks;struct mmtime_tag___E89738907296235928D3FD1615E4E030___77546E6DA24DBEE74453C7AE7BAE240D smpte;struct mmtime_tag___E89738907296235928D3FD1615E4E030___B7A2B1CE967584EBB3840978181CF21D midi;};
struct tMIXERLINE___603D61C4173A9E5D7ED836A8441A40C9 {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;VERSION vDriverVersion;char szPname[32];};
union in_addr___C13EC994467D6E67044F092615EC7EA9 {struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 S_un_b;struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 S_un_w;u_long S_addr;};
struct _3CA0C319F87D2D6479A928EE1D6E454C {UINT wX;UINT wY;UINT wCx;UINT wCy;UINT wId;DWORD dwStyle;char szClass[20];char szTitle[94];BYTE CtlDataSize;BYTE CtlData[255];};
struct tagMCI_ANIM_UPDATE_PARMS {DWORD dwCallback;RECT rc;HDC hDC;};
struct tagMCI_OVLY_LOAD_PARMS {DWORD dwCallback;LPCSTR lpfilename;RECT rc;};
struct tagMCI_OVLY_SAVE_PARMS {DWORD dwCallback;LPCSTR lpfilename;RECT rc;};
struct ICreateErrorInfoVtbl {HRESULT (*QueryInterface)(ICreateErrorInfo *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(ICreateErrorInfo *This);unsigned int (*Release)(ICreateErrorInfo *This);HRESULT (*SetGUID)(ICreateErrorInfo *This,  GUID * rguid);HRESULT (*SetSource)(ICreateErrorInfo *This, LPSTR szSource);HRESULT (*SetDescription)(ICreateErrorInfo *This, LPSTR szDescription);HRESULT (*SetHelpFile)(ICreateErrorInfo *This, LPSTR szHelpFile);HRESULT (*SetHelpContext)(ICreateErrorInfo *This, unsigned int dwHelpContext);};
struct tMIXERCONTROLDETAILS {DWORD cbStruct;DWORD dwControlID;DWORD cChannels;union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F u;DWORD cbDetails;LPVOID paDetails;};
struct tagCOMPAREITEMSTRUCT {UINT CtlType;UINT CtlID;HWND hwndItem;UINT itemID1;DWORD itemData1;UINT itemID2;DWORD itemData2;};
struct tagMCI_SYSINFO_PARMS {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;DWORD dwNumber;WORD wDeviceType;WORD wReserved0;};
struct tagDELETEITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;HWND hwndItem;DWORD itemData;};
struct tagDRIVERINFOSTRUCT {UINT length;HDRVR hDriver;HINSTANCE hModule;char szAliasName[128];};
struct tagNFYLOGPARAMERROR {DWORD dwSize;UINT wErrCode;FARPROC lpfnErrorAddr;void * *lpBadParam;};
typedef BOOL ( *LPFNNOTIFYCALLBACK)(WORD wID, DWORD dwData);
struct tMIXERLINECONTROLS {DWORD cbStruct;DWORD dwLineID;tMIXERLINECONTROLS___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROL pamxctrl;};
struct tagMCI_BREAK_PARMS {DWORD dwCallback;int nVirtKey;WORD wReserved0;HWND hwndBreak;WORD wReserved1;};
struct tagWINDOWPLACEMENT {UINT length;UINT flags;UINT showCmd;POINT ptMinPosition;POINT ptMaxPosition;RECT rcNormalPosition;};
struct tagDVTARGETDEVICE {DWORD tdSize;WORD tdDriverNameOffset;WORD tdDeviceNameOffset;WORD tdPortNameOffset;WORD tdExtDevmodeOffset;BYTE tdData[1];};
struct tagFMS_GETFILESEL {UINT wTime;UINT wDate;DWORD dwSize;BYTE bAttr;char szName[260];};
typedef DWORD ( *FM_UNDELETE_PROC)(HWND, LPSTR);
struct IEnumVARIANTVtbl {HRESULT (*QueryInterface)(IEnumVARIANT *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(IEnumVARIANT *This);unsigned int (*Release)(IEnumVARIANT *This);HRESULT (*Next)(IEnumVARIANT *This, unsigned int celt, VARIANT *rgvar, unsigned int *pceltFetched);HRESULT (*Skip)(IEnumVARIANT *This, unsigned int celt);HRESULT (*Reset)(IEnumVARIANT *This);HRESULT (*Clone)(IEnumVARIANT *This, IEnumVARIANT * *ppenum);};
struct tagDEBUGHOOKINFO {HMODULE hModuleHook;LPARAM reserved;LPARAM lParam;WPARAM wParam;int code;};
struct tagNEWTEXTMETRIC {int tmHeight;int tmAscent;int tmDescent;int tmInternalLeading;int tmExternalLeading;int tmAveCharWidth;int tmMaxCharWidth;int tmWeight;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmPitchAndFamily;BYTE tmCharSet;int tmOverhang;int tmDigitizedAspectX;int tmDigitizedAspectY;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
struct tagPENDATAHEADER {UINT wVersion;UINT cbSizeUsed;UINT cStrokes;UINT cPnt;UINT cPntStrokeMax;RECT rectBound;UINT wPndts;int nInkWidth;DWORD rgbInk;};
struct midioutcaps_tag {WORD wMid;WORD wPid;VERSION vDriverVersion;char szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagMONERRSTRUCT {UINT cb;UINT wLastError;DWORD dwTime;HANDLE hTask;};
struct waveoutcaps_tag {WORD wMid;WORD wPid;VERSION vDriverVersion;char szPname[32];DWORD dwFormats;WORD wChannels;DWORD dwSupport;};
struct IErrorInfoVtbl {HRESULT (*QueryInterface)(IErrorInfo *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(IErrorInfo *This);unsigned int (*Release)(IErrorInfo *This);HRESULT (*GetGUID)(IErrorInfo *This, GUID *pguid);HRESULT (*GetSource)(IErrorInfo *This, BSTR *pbstrSource);HRESULT (*GetDescription)(IErrorInfo *This, BSTR *pbstrDescription);HRESULT (*GetHelpFile)(IErrorInfo *This, BSTR *pbstrHelpFile);HRESULT (*GetHelpContext)(IErrorInfo *This, unsigned int *pdwHelpContext);};
struct tagMODULEENTRY {DWORD dwSize;char szModule[10];HMODULE hModule;WORD wcUsage;char szExePath[256];WORD wNext;};
struct tagNFYSTARTDLL {DWORD dwSize;HMODULE hModule;WORD wCS;WORD wIP;};
struct waveincaps_tag {WORD wMid;WORD wPid;VERSION vDriverVersion;char szPname[32];DWORD dwFormats;WORD wChannels;};
struct tMIXERCONTROL {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;char szShortName[16];char szName[64];union tMIXERCONTROL___A559D66DCD7A1BA00AE602A0A7AC983C Bounds;union tMIXERCONTROL___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct tagCLASSENTRY {DWORD dwSize;HMODULE hInst;char szClassName[256];WORD wNext;};
struct tagLOCALENTRY {DWORD dwSize;HLOCAL hHandle;WORD wAddress;WORD wSize;WORD wFlags;WORD wcLock;WORD wType;WORD hHeap;WORD wHeapType;WORD wNext;};
struct tagNFYLOADSEG {DWORD dwSize;WORD wSelector;WORD wSegNum;WORD wType;WORD wcInstance;LPCSTR lpstrModuleName;};
struct tagEXCEPINFO {unsigned int wCode;unsigned int wReserved;BSTR bstrSource;BSTR bstrDescription;BSTR bstrHelpFile;unsigned int dwHelpContext;void *pvReserved;HRESULT ( *pfnDeferredFillIn)(struct tagEXCEPINFO *);SCODE scode;};
struct tagFORMATETC {CLIPFORMAT cfFormat;DVTARGETDEVICE *ptd;DWORD dwAspect;int lindex;DWORD tymed;};
typedef void  DRVCALLBACK(HDRVR hdrvr, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
typedef DWORD ( *FM_EXT_PROC)(HWND, UINT, int);
struct auxcaps_tag {WORD wMid;WORD wPid;VERSION vDriverVersion;char szPname[32];WORD wTechnology;DWORD dwSupport;};
struct tagFMS_LOAD {DWORD dwSize;char szMenuName[40];HMENU hMenu;UINT wMenuDelta;};
struct tMIXERCAPS {WORD wMid;WORD wPid;VERSION vDriverVersion;char szPname[32];DWORD fdwSupport;DWORD cDestinations;};
typedef UINT ( *LPFNFLAGS)(DWORD dwStyle, LPSTR lpBuff, UINT wBuffLength);
typedef UINT ( *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);
struct tagLOGPEN {UINT lopnStyle;POINT lopnWidth;COLORREF lopnColor;};
struct tagSYG {POINT rgpntHotSpots[8];int cHotSpot;int nFirstBox;int lRecogVal;LPSYE lpsye;int cSye;LPSYC lpsyc;int cSyc;};
struct GUID {DWORD Data1;WORD Data2;WORD Data3;BYTE Data4[8];};
struct tagMCI_ANIM_WINDOW_PARMS {DWORD dwCallback;HWND hWnd;WORD wReserved1;WORD nCmdShow;WORD wReserved2;LPCSTR lpstrText;};
struct tagMCI_WAVE_OPEN_PARMS {DWORD dwCallback;MCIDEVICEID wDeviceID;WORD wReserved0;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwBufferSeconds;};
struct tagHARDWAREHOOKSTRUCT {HWND hWnd;UINT wMessage;WPARAM wParam;LPARAM lParam;};
struct ICreateTypeLibVtbl {HRESULT (*QueryInterface)(ICreateTypeLib *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(ICreateTypeLib *This);unsigned int (*Release)(ICreateTypeLib *This);HRESULT (*CreateTypeInfo)(ICreateTypeLib *This, char *szName, TYPEKIND tkind, ICreateTypeInfo * *lplpictinfo);HRESULT (*SetName)(ICreateTypeLib *This, char *szName);HRESULT (*SetVersion)(ICreateTypeLib *This, unsigned int wMajorVerNum, unsigned int wMinorVerNum);HRESULT (*SetGuid)(ICreateTypeLib *This,  GUID * guid);HRESULT (*SetDocString)(ICreateTypeLib *This, char *szDoc);HRESULT (*SetHelpFileName)(ICreateTypeLib *This, char *szHelpFileName);HRESULT (*SetHelpContext)(ICreateTypeLib *This, unsigned int dwHelpContext);HRESULT (*SetLcid)(ICreateTypeLib *This, LCID lcid);HRESULT (*SetLibFlags)(ICreateTypeLib *This, unsigned int uLibFlags);HRESULT (*SaveAllChanges)(ICreateTypeLib *This);};
typedef HRESULT ( *LPFNGETCLASSOBJECT)( CLSID *,  IID *, LPVOID *);
struct tagMDICREATESTRUCT {LPCSTR szClass;LPCSTR szTitle;HINSTANCE hOwner;int x;int y;int cx;int cy;DWORD style;LPARAM lParam;};
struct tagMOUSEHOOKSTRUCT {POINT pt;HWND hwnd;UINT wHitTestCode;DWORD dwExtraInfo;};
struct tagSTACKTRACEENTRY {DWORD dwSize;HTASK hTask;WORD wSS;WORD wBP;WORD wCS;WORD wIP;HMODULE hModule;WORD wSegment;WORD wFlags;};
struct tagMCI_OPEN_PARMS {DWORD dwCallback;MCIDEVICEID wDeviceID;WORD wReserved0;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;};
struct tagPAINTSTRUCT {HDC hdc;BOOL fErase;RECT rcPaint;BOOL fRestore;BOOL fIncUpdate;BYTE rgbReserved[16];};
struct ITypeCompVtbl {HRESULT (*QueryInterface)(ITypeComp *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(ITypeComp *This);unsigned int (*Release)(ITypeComp *This);HRESULT (*Bind)(ITypeComp *This, char *szName, unsigned int lHashVal, unsigned int wflags, ITypeInfo * *pptinfo, DESCKIND *pdesckind, BINDPTR *pbindptr);HRESULT (*BindType)(ITypeComp *This, char *szName, unsigned int lHashVal, ITypeInfo * *pptinfo, ITypeComp * *pptcomp);};
struct tagMETHODDATA {char *szName;PARAMDATA *ppdata;DISPID dispid;unsigned int iMeth;CALLCONV cc;unsigned int cArgs;unsigned int wFlags;VARTYPE vtReturn;};
struct IUnknownVtbl {HRESULT (*QueryInterface)(IUnknown *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IUnknown *This);ULONG (*Release)(IUnknown *This);};
typedef LRESULT ( *APPLET_PROC)(HWND hwndCpl, UINT msg, LPARAM lParam1, LPARAM lParam2);
struct IMallocVtbl {HRESULT (*QueryInterface)(IMalloc *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IMalloc *This);ULONG (*Release)(IMalloc *This);void *(*Alloc)(IMalloc *This, ULONG cb);void *(*Realloc)(IMalloc *This, void *pv, ULONG cb);void (*Free)(IMalloc *This, void *pv);ULONG (*GetSize)(IMalloc *This, void *pv);int (*DidAlloc)(IMalloc *This, void *pv);void (*HeapMinimize)(IMalloc *This);};
typedef DWORD ( *LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, DEVMODE *);
struct tagSTATSTG {char *pwcsName;DWORD type;ULARGE_INTEGER cbSize;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD grfMode;DWORD grfLocksSupported;CLSID clsid;DWORD grfStateBits;DWORD reserved;};
struct tagVARDESC {MEMBERID memid;char *lpstrSchema;tagVARDESC___F04833D7152C1F618CB19FA4ACB5074C __anonymous0;ELEMDESC elemdescVar;unsigned int wVarFlags;VARKIND varkind;};
typedef LRESULT  MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
struct tagOIFI {UINT cb;BOOL fMDIApp;HWND hwndFrame;HACCEL haccel;int cAccelEntries;};
struct tagMCI_OVLY_WINDOW_PARMS {DWORD dwCallback;HWND hWnd;WORD wReserved1;UINT nCmdShow;WORD wReserved2;LPCSTR lpstrText;};
struct tagMCI_ANIM_OPEN_PARMS {DWORD dwCallback;MCIDEVICEID wDeviceID;WORD wReserved0;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;WORD wReserved1;};
struct tagMCI_OVLY_OPEN_PARMS {DWORD dwCallback;MCIDEVICEID wDeviceID;WORD wReserved0;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;WORD wReserved1;};
struct IOleCacheControlVtbl {HRESULT (*QueryInterface)(IOleCacheControl *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleCacheControl *This);ULONG (*Release)(IOleCacheControl *This);HRESULT (*OnRun)(IOleCacheControl *This, LPDATAOBJECT pDataObject);HRESULT (*OnStop)(IOleCacheControl *This);};
struct tagOBJECTDESCRIPTOR {ULONG cbSize;CLSID clsid;DWORD dwDrawAspect;SIZEL sizel;POINTL pointl;DWORD dwStatus;DWORD dwFullUserTypeName;DWORD dwSrcOfCopy;};
struct IEnumFORMATETCVtbl {HRESULT (*QueryInterface)(IEnumFORMATETC *This,  IID * riid, LPVOID *ppv);ULONG (*AddRef)(IEnumFORMATETC *This);ULONG (*Release)(IEnumFORMATETC *This);HRESULT (*Next)(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);HRESULT (*Skip)(IEnumFORMATETC *This, ULONG celt);HRESULT (*Reset)(IEnumFORMATETC *This);HRESULT (*Clone)(IEnumFORMATETC *This, IEnumFORMATETC * *ppenum);};
struct IEnumSTATDATAVtbl {HRESULT (*QueryInterface)(IEnumSTATDATA *This,  IID * riid, LPVOID *ppv);ULONG (*AddRef)(IEnumSTATDATA *This);ULONG (*Release)(IEnumSTATDATA *This);HRESULT (*Next)(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);HRESULT (*Skip)(IEnumSTATDATA *This, ULONG celt);HRESULT (*Reset)(IEnumSTATDATA *This);HRESULT (*Clone)(IEnumSTATDATA *This, IEnumSTATDATA * *ppenum);};
struct tagDRAWITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemAction;UINT itemState;HWND hwndItem;HDC hDC;RECT rcItem;DWORD itemData;};
struct IEnumMonikerVtbl {HRESULT (*QueryInterface)(IEnumMoniker *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IEnumMoniker *This);ULONG (*Release)(IEnumMoniker *This);HRESULT (*Next)(IEnumMoniker *This, ULONG celt, LPMONIKER *rgelt, ULONG *pceltFetched);HRESULT (*Skip)(IEnumMoniker *This, ULONG celt);HRESULT (*Reset)(IEnumMoniker *This);HRESULT (*Clone)(IEnumMoniker *This, IEnumMoniker * *ppenm);};
struct IEnumOLEVERBVtbl {HRESULT (*QueryInterface)(IEnumOLEVERB *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IEnumOLEVERB *This);ULONG (*Release)(IEnumOLEVERB *This);HRESULT (*Next)(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);HRESULT (*Skip)(IEnumOLEVERB *This, ULONG celt);HRESULT (*Reset)(IEnumOLEVERB *This);HRESULT (*Clone)(IEnumOLEVERB *This, IEnumOLEVERB * *ppenm);};
struct IEnumSTATSTGVtbl {HRESULT (*QueryInterface)(IEnumSTATSTG *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IEnumSTATSTG *This);ULONG (*Release)(IEnumSTATSTG *This);HRESULT (*Next)(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);HRESULT (*Skip)(IEnumSTATSTG *This, ULONG celt);HRESULT (*Reset)(IEnumSTATSTG *This);HRESULT (*Clone)(IEnumSTATSTG *This, IEnumSTATSTG * *ppenm);};
struct IEnumUnknownVtbl {HRESULT (*QueryInterface)(IEnumUnknown *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IEnumUnknown *This);ULONG (*Release)(IEnumUnknown *This);HRESULT (*Next)(IEnumUnknown *This, ULONG celt, LPUNKNOWN *rgelt, ULONG *pceltFetched);HRESULT (*Skip)(IEnumUnknown *This, ULONG celt);HRESULT (*Reset)(IEnumUnknown *This);HRESULT (*Clone)(IEnumUnknown *This, IEnumUnknown * *ppenm);};
struct IRootStorageVtbl {HRESULT (*QueryInterface)(IRootStorage *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IRootStorage *This);ULONG (*Release)(IRootStorage *This);HRESULT (*SwitchToFile)(IRootStorage *This, LPSTR lpstrFile);};
struct IEnumStringVtbl {HRESULT (*QueryInterface)(IEnumString *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IEnumString *This);ULONG (*Release)(IEnumString *This);HRESULT (*Next)(IEnumString *This, ULONG celt, LPSTR *rgelt, ULONG *pceltFetched);HRESULT (*Skip)(IEnumString *This, ULONG celt);HRESULT (*Reset)(IEnumString *This);HRESULT (*Clone)(IEnumString *This, IEnumString * *ppenm);};
struct tagCREATESTRUCT {void *lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;int style;LPCSTR lpszName;LPCSTR lpszClass;DWORD dwExStyle;};
struct IPersistVtbl {HRESULT (*QueryInterface)(IPersist *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IPersist *This);ULONG (*Release)(IPersist *This);HRESULT (*GetClassID)(IPersist *This, LPCLSID lpClassID);};
typedef UINT ( *LPFNDEVMODE)(HWND, HMODULE, DEVMODE *, LPSTR, LPSTR, DEVMODE *, LPSTR, UINT);
typedef LRESULT ( *DRIVERPROC)(DWORD, HDRVR, UINT, LPARAM, LPARAM);
typedef HDDEDATA  FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2);
struct tagSKBINFO {HWND hwnd;UINT nPad;BOOL fVisible;BOOL fMinimized;RECT rect;DWORD dwReserved;};
typedef LRESULT ( *WNDPROC)(HWND, UINT, WPARAM, LPARAM);
struct IExternalConnectionVtbl {HRESULT (*QueryInterface)(IExternalConnection *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IExternalConnection *This);ULONG (*Release)(IExternalConnection *This);DWORD (*AddConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved);DWORD (*ReleaseConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved, BOOL fLastReleaseCloses);};
struct IStdMarshalInfoVtbl {HRESULT (*QueryInterface)(IStdMarshalInfo *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IStdMarshalInfo *This);ULONG (*Release)(IStdMarshalInfo *This);HRESULT (*GetClassForHandler)(IStdMarshalInfo *This, DWORD dwDestContext, LPVOID pvDestContext, LPCLSID pClsid);};
struct IMessageFilterVtbl {HRESULT (*QueryInterface)(IMessageFilter *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IMessageFilter *This);ULONG (*Release)(IMessageFilter *This);DWORD (*HandleInComingCall)(IMessageFilter *This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, DWORD dwReserved);DWORD (*RetryRejectedCall)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);DWORD (*MessagePending)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);};
struct IClassFactoryVtbl {HRESULT (*QueryInterface)(IClassFactory *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IClassFactory *This);ULONG (*Release)(IClassFactory *This);HRESULT (*CreateInstance)(IClassFactory *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObject);HRESULT (*LockServer)(IClassFactory *This, BOOL fLock);};
struct tagMONCONVSTRUCT {UINT cb;BOOL fConnect;DWORD dwTime;HANDLE hTask;HSZ hszSvc;HSZ hszTopic;HCONV hConvClient;HCONV hConvServer;};
struct tagMONLINKSTRUCT {UINT cb;DWORD dwTime;HANDLE hTask;BOOL fEstablished;BOOL fNoData;HSZ hszSvc;HSZ hszTopic;HSZ hszItem;UINT wFmt;BOOL fServer;HCONV hConvServer;HCONV hConvClient;};
struct IDropSourceVtbl {HRESULT (*QueryInterface)(IDropSource *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IDropSource *This);ULONG (*Release)(IDropSource *This);HRESULT (*QueryContinueDrag)(IDropSource *This, BOOL fEscapePressed, DWORD grfKeyState);HRESULT (*GiveFeedback)(IDropSource *This, DWORD dwEffect);};
struct tagMONHSZSTRUCT {UINT cb;BOOL fsAction;DWORD dwTime;HSZ hsz;HANDLE hTask;WORD wReserved;char str[1];};
struct tagMONMSGSTRUCT {UINT cb;HWND hwndTo;DWORD dwTime;HANDLE hTask;UINT wMsg;WPARAM wParam;LPARAM lParam;};
struct IOleWindowVtbl {HRESULT (*QueryInterface)(IOleWindow *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleWindow *This);ULONG (*Release)(IOleWindow *This);HRESULT (*GetWindow)(IOleWindow *This, HWND *lphwnd);HRESULT (*ContextSensitiveHelp)(IOleWindow *This, BOOL fEnterMode);};
struct ITypeLibVtbl {HRESULT (*QueryInterface)(ITypeLib *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(ITypeLib *This);unsigned int (*Release)(ITypeLib *This);unsigned int (*GetTypeInfoCount)(ITypeLib *This);HRESULT (*GetTypeInfo)(ITypeLib *This, unsigned int index, ITypeInfo * *pptinfo);HRESULT (*GetTypeInfoType)(ITypeLib *This, unsigned int index, TYPEKIND *ptypekind);HRESULT (*GetTypeInfoOfGuid)(ITypeLib *This,  GUID * guid, ITypeInfo * *pptinfo);HRESULT (*GetLibAttr)(ITypeLib *This, TLIBATTR * *pptlibattr);HRESULT (*GetTypeComp)(ITypeLib *This, ITypeComp * *pptcomp);HRESULT (*GetDocumentation)(ITypeLib *This, int index, BSTR *pbstrName, BSTR *pbstrDocString, unsigned int *pdwHelpContext, BSTR *pbstrHelpFile);HRESULT (*IsName)(ITypeLib *This, char *szNameBuf, unsigned int lHashVal, int *lpfName);HRESULT (*FindName)(ITypeLib *This, char *szNameBuf, unsigned int lHashVal, ITypeInfo * *rgptinfo, MEMBERID *rgmemid, unsigned int *pcFound);void (*ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *ptlibattr);};
struct tagCONVINFO {DWORD cb;DWORD hUser;HCONV hConvPartner;HSZ hszSvcPartner;HSZ hszServiceReq;HSZ hszTopic;HSZ hszItem;UINT wFmt;UINT wType;UINT wStatus;UINT wConvst;UINT wLastError;HCONVLIST hConvList;CONVCONTEXT ConvCtxt;};
struct tagFUNCDESC {MEMBERID memid;SCODE *lprgscode;ELEMDESC *lprgelemdescParam;FUNCKIND funckind;INVOKEKIND invkind;CALLCONV callconv;int cParams;int cParamsOpt;int oVft;int cScodes;ELEMDESC elemdescFunc;unsigned int wFuncFlags;};
struct tagTYPEATTR {GUID guid;LCID lcid;unsigned int dwReserved;MEMBERID memidConstructor;MEMBERID memidDestructor;char *lpstrSchema;unsigned int cbSizeInstance;TYPEKIND typekind;unsigned int cFuncs;unsigned int cVars;unsigned int cImplTypes;unsigned int cbSizeVft;unsigned int cbAlignment;unsigned int wTypeFlags;unsigned int wMajorVerNum;unsigned int wMinorVerNum;TYPEDESC tdescAlias;IDLDESC idldescType;};
struct tagMSG {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;DWORD time;POINT pt;};
union tagVARIANT___97E52095E85F5E8E7D59138FFD8EEF88 {unsigned char bVal;int iVal;int lVal;float fltVal;double dblVal;VARIANT_BOOL _bool;SCODE scode;CY cyVal;DATE date;BSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;SAFEARRAY *parray;unsigned char *pbVal;int *piVal;int *plVal;float *pfltVal;double *pdblVal;VARIANT_BOOL *pbool;SCODE *pscode;CY *pcyVal;DATE *pdate;BSTR *pbstrVal;IUnknown * *ppunkVal;IDispatch * *ppdispVal;SAFEARRAY * *pparray;VARIANT *pvarVal;void *byref;};
struct IOleInPlaceObjectVtbl {HRESULT (*QueryInterface)(IOleInPlaceObject *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleInPlaceObject *This);ULONG (*Release)(IOleInPlaceObject *This);HRESULT (*GetWindow)(IOleInPlaceObject *This, HWND *lphwnd);HRESULT (*ContextSensitiveHelp)(IOleInPlaceObject *This, BOOL fEnterMode);HRESULT (*InPlaceDeactivate)(IOleInPlaceObject *This);HRESULT (*UIDeactivate)(IOleInPlaceObject *This);HRESULT (*SetObjectRects)(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT (*ReactivateAndUndo)(IOleInPlaceObject *This);};
struct IParseDisplayNameVtbl {HRESULT (*QueryInterface)(IParseDisplayName *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IParseDisplayName *This);ULONG (*Release)(IParseDisplayName *This);HRESULT (*ParseDisplayName)(IParseDisplayName *This, LPBC pbc, LPSTR lpszDisplayName, ULONG *pchEaten, LPMONIKER *ppmkOut);};
struct tagOUTLINETEXTMETRIC {UINT otmSize;TEXTMETRIC otmTextMetrics;BYTE otmFiller;PANOSE otmPanoseNumber;UINT otmfsSelection;UINT otmfsType;int otmsCharSlopeRise;int otmsCharSlopeRun;int otmItalicAngle;UINT otmEMSquare;int otmAscent;int otmDescent;UINT otmLineGap;UINT otmsCapEmHeight;UINT otmsXHeight;RECT otmrcFontBox;int otmMacAscent;int otmMacDescent;UINT otmMacLineGap;UINT otmusMinimumPPEM;POINT otmptSubscriptSize;POINT otmptSubscriptOffset;POINT otmptSuperscriptSize;POINT otmptSuperscriptOffset;UINT otmsStrikeoutSize;int otmsStrikeoutPosition;int otmsUnderscorePosition;int otmsUnderscoreSize;PSTR otmpFamilyName;PSTR otmpFaceName;PSTR otmpStyleName;PSTR otmpFullName;};
struct IPersistStorageVtbl {HRESULT (*QueryInterface)(IPersistStorage *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IPersistStorage *This);ULONG (*Release)(IPersistStorage *This);HRESULT (*GetClassID)(IPersistStorage *This, LPCLSID lpClassID);HRESULT (*IsDirty)(IPersistStorage *This);HRESULT (*InitNew)(IPersistStorage *This, LPSTORAGE pStg);HRESULT (*Load)(IPersistStorage *This, LPSTORAGE pStg);HRESULT (*Save)(IPersistStorage *This, LPSTORAGE pStgSave, BOOL fSameAsLoad);HRESULT (*SaveCompleted)(IPersistStorage *This, LPSTORAGE pStgNew);HRESULT (*HandsOffStorage)(IPersistStorage *This);};
struct IRunnableObjectVtbl {HRESULT (*QueryInterface)(IRunnableObject *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IRunnableObject *This);ULONG (*Release)(IRunnableObject *This);HRESULT (*GetRunningClass)(IRunnableObject *This, LPCLSID lpClsid);HRESULT (*Run)(IRunnableObject *This, LPBINDCTX pbc);BOOL (*IsRunning)(IRunnableObject *This);HRESULT (*LockRunning)(IRunnableObject *This, BOOL fLock, BOOL fLastUnlockCloses);HRESULT (*SetContainedObject)(IRunnableObject *This, BOOL fContained);};
struct ILockBytesVtbl {HRESULT (*QueryInterface)(ILockBytes *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(ILockBytes *This);ULONG (*Release)(ILockBytes *This);HRESULT (*ReadAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);HRESULT (*WriteAt)(ILockBytes *This, ULARGE_INTEGER ulOffset,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT (*Flush)(ILockBytes *This);HRESULT (*SetSize)(ILockBytes *This, ULARGE_INTEGER cb);HRESULT (*LockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (*UnlockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (*Stat)(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct tagCHOOSECOLOR {DWORD lStructSize;HWND hwndOwner;HWND hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;UINT ( *lpfnHook)(HWND, UINT, WPARAM, LPARAM);LPCSTR lpTemplateName;};
struct tagMONCBSTRUCT {UINT cb;WORD wReserved;DWORD dwTime;HANDLE hTask;DWORD dwRet;UINT wType;UINT wFmt;HCONV hConv;HSZ hsz1;HSZ hsz2;HDDEDATA hData;DWORD dwData1;DWORD dwData2;};
struct IDispatchVtbl {HRESULT (*QueryInterface)(IDispatch *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(IDispatch *This);unsigned int (*Release)(IDispatch *This);HRESULT (*GetTypeInfoCount)(IDispatch *This, unsigned int *pctinfo);HRESULT (*GetTypeInfo)(IDispatch *This, unsigned int itinfo, LCID lcid, ITypeInfo * *pptinfo);HRESULT (*GetIDsOfNames)(IDispatch *This,  IID * riid, char * *rgszNames, unsigned int cNames, LCID lcid, DISPID *rgdispid);HRESULT (*Invoke)(IDispatch *This, DISPID dispidMember,  IID * riid, LCID lcid, unsigned int wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, unsigned int *puArgErr);};
struct IOleAdviseHolderVtbl {HRESULT (*QueryInterface)(IOleAdviseHolder *This,  IID * riid, LPVOID *ppv);ULONG (*AddRef)(IOleAdviseHolder *This);ULONG (*Release)(IOleAdviseHolder *This);HRESULT (*Advise)(IOleAdviseHolder *This, LPADVISESINK pAdvise, DWORD *pdwConnection);HRESULT (*Unadvise)(IOleAdviseHolder *This, DWORD dwConnection);HRESULT (*EnumAdvise)(IOleAdviseHolder *This, LPENUMSTATDATA *ppenumAdvise);HRESULT (*SendOnRename)(IOleAdviseHolder *This, LPMONIKER pmk);HRESULT (*SendOnSave)(IOleAdviseHolder *This);HRESULT (*SendOnClose)(IOleAdviseHolder *This);};
struct ICreateTypeInfoVtbl {HRESULT (*QueryInterface)(ICreateTypeInfo *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(ICreateTypeInfo *This);unsigned int (*Release)(ICreateTypeInfo *This);HRESULT (*SetGuid)(ICreateTypeInfo *This,  GUID * guid);HRESULT (*SetTypeFlags)(ICreateTypeInfo *This, unsigned int uTypeFlags);HRESULT (*SetDocString)(ICreateTypeInfo *This, char *pstrDoc);HRESULT (*SetHelpContext)(ICreateTypeInfo *This, unsigned int dwHelpContext);HRESULT (*SetVersion)(ICreateTypeInfo *This, unsigned int wMajorVerNum, unsigned int wMinorVerNum);HRESULT (*AddRefTypeInfo)(ICreateTypeInfo *This, ITypeInfo *ptinfo, HREFTYPE *phreftype);HRESULT (*AddFuncDesc)(ICreateTypeInfo *This, unsigned int index, FUNCDESC *pfuncdesc);HRESULT (*AddImplType)(ICreateTypeInfo *This, unsigned int index, HREFTYPE hreftype);HRESULT (*SetImplTypeFlags)(ICreateTypeInfo *This, unsigned int index, int impltypeflags);HRESULT (*SetAlignment)(ICreateTypeInfo *This, unsigned int cbAlignment);HRESULT (*SetSchema)(ICreateTypeInfo *This, char *lpstrSchema);HRESULT (*AddVarDesc)(ICreateTypeInfo *This, unsigned int index, VARDESC *pvardesc);HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo *This, unsigned int index, char * *rgszNames, unsigned int cNames);HRESULT (*SetVarName)(ICreateTypeInfo *This, unsigned int index, char *szName);HRESULT (*SetTypeDescAlias)(ICreateTypeInfo *This, TYPEDESC *ptdescAlias);HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo *This, unsigned int index, char *szDllName, char *szProcName);HRESULT (*SetFuncDocString)(ICreateTypeInfo *This, unsigned int index, char *szDocString);HRESULT (*SetVarDocString)(ICreateTypeInfo *This, unsigned int index, char *szDocString);HRESULT (*SetFuncHelpContext)(ICreateTypeInfo *This, unsigned int index, unsigned int dwHelpContext);HRESULT (*SetVarHelpContext)(ICreateTypeInfo *This, unsigned int index, unsigned int dwHelpContext);HRESULT (*SetMops)(ICreateTypeInfo *This, unsigned int index, BSTR bstrMops);HRESULT (*SetTypeIdldesc)(ICreateTypeInfo *This, IDLDESC *pidldesc);HRESULT (*LayOut)(ICreateTypeInfo *This);};
struct IOleClientSiteVtbl {HRESULT (*QueryInterface)(IOleClientSite *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleClientSite *This);ULONG (*Release)(IOleClientSite *This);HRESULT (*SaveObject)(IOleClientSite *This);HRESULT (*GetMoniker)(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, LPMONIKER *ppmk);HRESULT (*GetContainer)(IOleClientSite *This, LPOLECONTAINER *ppContainer);HRESULT (*ShowObject)(IOleClientSite *This);HRESULT (*OnShowWindow)(IOleClientSite *This, BOOL fShow);HRESULT (*RequestNewObjectLayout)(IOleClientSite *This);};
struct IPersistStreamVtbl {HRESULT (*QueryInterface)(IPersistStream *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IPersistStream *This);ULONG (*Release)(IPersistStream *This);HRESULT (*GetClassID)(IPersistStream *This, LPCLSID lpClassID);HRESULT (*IsDirty)(IPersistStream *This);HRESULT (*Load)(IPersistStream *This, LPSTREAM pStm);HRESULT (*Save)(IPersistStream *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT (*GetSizeMax)(IPersistStream *This, ULARGE_INTEGER *pcbSize);};
struct IAdviseSink2Vtbl {HRESULT (*QueryInterface)(IAdviseSink2 *This,  IID * riid, LPVOID *ppv);ULONG (*AddRef)(IAdviseSink2 *This);ULONG (*Release)(IAdviseSink2 *This);void (*OnDataChange)(IAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void (*OnViewChange)(IAdviseSink2 *This, DWORD dwAspect, int lindex);void (*OnRename)(IAdviseSink2 *This, LPMONIKER pmk);void (*OnSave)(IAdviseSink2 *This);void (*OnClose)(IAdviseSink2 *This);void (*OnLinkSrcChange)(IAdviseSink2 *This, LPMONIKER pmk);};
struct IAdviseSinkVtbl {HRESULT (*QueryInterface)(IAdviseSink *This,  IID * riid, LPVOID *ppv);ULONG (*AddRef)(IAdviseSink *This);ULONG (*Release)(IAdviseSink *This);void (*OnDataChange)(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void (*OnViewChange)(IAdviseSink *This, DWORD dwAspect, int lindex);void (*OnRename)(IAdviseSink *This, LPMONIKER pmk);void (*OnSave)(IAdviseSink *This);void (*OnClose)(IAdviseSink *This);};
struct IDropTargetVtbl {HRESULT (*QueryInterface)(IDropTarget *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IDropTarget *This);ULONG (*Release)(IDropTarget *This);HRESULT (*DragEnter)(IDropTarget *This, LPDATAOBJECT pDataObj, DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect);HRESULT (*DragOver)(IDropTarget *This, DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect);HRESULT (*DragLeave)(IDropTarget *This);HRESULT (*Drop)(IDropTarget *This, LPDATAOBJECT pDataObj, DWORD grfKeyState, POINTL pt, LPDWORD pdwEffect);};
struct tagFINDREPLACE {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;DWORD Flags;LPSTR lpstrFindWhat;LPSTR lpstrReplaceWith;UINT wFindWhatLen;UINT wReplaceWithLen;LPARAM lCustData;UINT ( *lpfnHook)(HWND, UINT, WPARAM, LPARAM);LPCSTR lpTemplateName;};
struct IMarshalVtbl {HRESULT (*QueryInterface)(IMarshal *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IMarshal *This);ULONG (*Release)(IMarshal *This);HRESULT (*GetUnmarshalClass)(IMarshal *This,  IID * riid, LPVOID pv, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPCLSID pCid);HRESULT (*GetMarshalSizeMax)(IMarshal *This,  IID * riid, LPVOID pv, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPDWORD pSize);HRESULT (*MarshalInterface)(IMarshal *This, LPSTREAM pStm,  IID * riid, LPVOID pv, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);HRESULT (*UnmarshalInterface)(IMarshal *This, LPSTREAM pStm,  IID * riid, LPVOID *ppv);HRESULT (*ReleaseMarshalData)(IMarshal *This, LPSTREAM pStm);HRESULT (*DisconnectObject)(IMarshal *This, DWORD dwReserved);};
struct IStreamVtbl {HRESULT (*QueryInterface)(IStream *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IStream *This);ULONG (*Release)(IStream *This);HRESULT (*Read)(IStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT (*Write)(IStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT (*Seek)(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT (*SetSize)(IStream *This, ULARGE_INTEGER libNewSize);HRESULT (*CopyTo)(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);HRESULT (*Commit)(IStream *This, DWORD grfCommitFlags);HRESULT (*Revert)(IStream *This);HRESULT (*LockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (*UnlockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (*Stat)(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag);HRESULT (*Clone)(IStream *This, IStream * *ppstm);};
struct tagOFN {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpstrFilter;LPSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPSTR lpstrFile;DWORD nMaxFile;LPSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCSTR lpstrInitialDir;LPCSTR lpstrTitle;DWORD Flags;UINT nFileOffset;UINT nFileExtension;LPCSTR lpstrDefExt;LPARAM lCustData;UINT ( *lpfnHook)(HWND, UINT, WPARAM, LPARAM);LPCSTR lpTemplateName;};
struct IOleInPlaceActiveObjectVtbl {HRESULT (*QueryInterface)(IOleInPlaceActiveObject *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleInPlaceActiveObject *This);ULONG (*Release)(IOleInPlaceActiveObject *This);HRESULT (*GetWindow)(IOleInPlaceActiveObject *This, HWND *lphwnd);HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject *This, BOOL fEnterMode);HRESULT (*TranslateAccelerator)(IOleInPlaceActiveObject *This, LPMSG lpmsg);HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT (*ResizeBorder)(IOleInPlaceActiveObject *This, LPCRECT lprectBorder, LPOLEINPLACEUIWINDOW lpUIWindow, BOOL fFrameWindow);HRESULT (*EnableModeless)(IOleInPlaceActiveObject *This, BOOL fEnable);};
struct IRunningObjectTableVtbl {HRESULT (*QueryInterface)(IRunningObjectTable *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IRunningObjectTable *This);ULONG (*Release)(IRunningObjectTable *This);HRESULT (*Register)(IRunningObjectTable *This, DWORD grfFlags, LPUNKNOWN punkObject, LPMONIKER pmkObjectName, DWORD *pdwRegister);HRESULT (*Revoke)(IRunningObjectTable *This, DWORD dwRegister);HRESULT (*IsRunning)(IRunningObjectTable *This, LPMONIKER pmkObjectName);HRESULT (*GetObject)(IRunningObjectTable *This, LPMONIKER pmkObjectName, LPUNKNOWN *ppunkObject);HRESULT (*NoteChangeTime)(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime);HRESULT (*GetTimeOfLastChange)(IRunningObjectTable *This, LPMONIKER pmkObjectName, FILETIME *pfiletime);HRESULT (*EnumRunning)(IRunningObjectTable *This, LPENUMMONIKER *ppenumMoniker);};
struct IDataAdviseHolderVtbl {HRESULT (*QueryInterface)(IDataAdviseHolder *This,  IID * riid, LPVOID *ppv);ULONG (*AddRef)(IDataAdviseHolder *This);ULONG (*Release)(IDataAdviseHolder *This);HRESULT (*Advise)(IDataAdviseHolder *This, LPDATAOBJECT pDataObject, FORMATETC *pFetc, DWORD advf, LPADVISESINK pAdvise, DWORD *pdwConnection);HRESULT (*Unadvise)(IDataAdviseHolder *This, DWORD dwConnection);HRESULT (*EnumAdvise)(IDataAdviseHolder *This, LPENUMSTATDATA *ppenumAdvise);HRESULT (*SendOnDataChange)(IDataAdviseHolder *This, LPDATAOBJECT pDataObject, DWORD dwReserved, DWORD advf);};
struct IPersistFileVtbl {HRESULT (*QueryInterface)(IPersistFile *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IPersistFile *This);ULONG (*Release)(IPersistFile *This);HRESULT (*GetClassID)(IPersistFile *This, LPCLSID lpClassID);HRESULT (*IsDirty)(IPersistFile *This);HRESULT (*Load)(IPersistFile *This, LPCSTR lpszFileName, DWORD grfMode);HRESULT (*Save)(IPersistFile *This, LPCSTR lpszFileName, BOOL fRemember);HRESULT (*SaveCompleted)(IPersistFile *This, LPCSTR lpszFileName);HRESULT (*GetCurFile)(IPersistFile *This, LPSTR *lplpszFileName);};
struct IBindCtxVtbl {HRESULT (*QueryInterface)(IBindCtx *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IBindCtx *This);ULONG (*Release)(IBindCtx *This);HRESULT (*RegisterObjectBound)(IBindCtx *This, LPUNKNOWN punk);HRESULT (*RevokeObjectBound)(IBindCtx *This, LPUNKNOWN punk);HRESULT (*ReleaseBoundObjects)(IBindCtx *This);HRESULT (*SetBindOptions)(IBindCtx *This, LPBIND_OPTS pbindopts);HRESULT (*GetBindOptions)(IBindCtx *This, LPBIND_OPTS pbindopts);HRESULT (*GetRunningObjectTable)(IBindCtx *This, LPRUNNINGOBJECTTABLE *pprot);HRESULT (*RegisterObjectParam)(IBindCtx *This, LPSTR lpszKey, LPUNKNOWN punk);HRESULT (*GetObjectParam)(IBindCtx *This, LPSTR lpszKey, LPUNKNOWN *ppunk);HRESULT (*EnumObjectParam)(IBindCtx *This, LPENUMSTRING *ppenum);HRESULT (*RevokeObjectParam)(IBindCtx *This, LPSTR lpszKey);};
struct IStorageVtbl {HRESULT (*QueryInterface)(IStorage *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IStorage *This);ULONG (*Release)(IStorage *This);HRESULT (*CreateStream)(IStorage *This,  char *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream * *ppstm);HRESULT (*OpenStream)(IStorage *This,  char *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream * *ppstm);HRESULT (*CreateStorage)(IStorage *This,  char *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage * *ppstg);HRESULT (*OpenStorage)(IStorage *This,  char *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage * *ppstg);HRESULT (*CopyTo)(IStorage *This, DWORD ciidExclude,  IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);HRESULT (*MoveElementTo)(IStorage *This,  char *lpszName, IStorage *pstgDest,  char *lpszNewName, DWORD grfFlags);HRESULT (*Commit)(IStorage *This, DWORD grfCommitFlags);HRESULT (*Revert)(IStorage *This);HRESULT (*EnumElements)(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG * *ppenm);HRESULT (*DestroyElement)(IStorage *This,  char *pwcsName);HRESULT (*RenameElement)(IStorage *This,  char *pwcsOldName,  char *pwcsNewName);HRESULT (*SetElementTimes)(IStorage *This,  char *lpszName,  FILETIME *pctime,  FILETIME *patime,  FILETIME *pmtime);HRESULT (*SetClass)(IStorage *This,  CLSID * clsid);HRESULT (*SetStateBits)(IStorage *This, DWORD grfStateBits, DWORD grfMask);HRESULT (*Stat)(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct IOleContainerVtbl {HRESULT (*QueryInterface)(IOleContainer *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleContainer *This);ULONG (*Release)(IOleContainer *This);HRESULT (*ParseDisplayName)(IOleContainer *This, LPBC pbc, LPSTR lpszDisplayName, ULONG *pchEaten, LPMONIKER *ppmkOut);HRESULT (*EnumObjects)(DWORD grfFlags, LPENUMUNKNOWN *ppenumUnknown);HRESULT (*LockContainer)(IOleContainer *This, BOOL fLock);};
struct IOleItemContainerVtbl {HRESULT (*QueryInterface)(IOleItemContainer *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleItemContainer *This);ULONG (*Release)(IOleItemContainer *This);HRESULT (*ParseDisplayName)(IOleItemContainer *This, LPBC pbc, LPSTR lpszDisplayName, ULONG *pchEaten, LPMONIKER *ppmkOut);HRESULT (*EnumObjects)(IOleItemContainer *This, DWORD grfFlags, LPENUMUNKNOWN *ppenumUnknown);HRESULT (*LockContainer)(IOleItemContainer *This, BOOL fLock);HRESULT (*GetObject)(IOleItemContainer *This, LPSTR lpszItem, DWORD dwSpeedNeeded, LPBINDCTX pbc,  IID * riid, LPVOID *ppvObject);HRESULT (*GetObjectStorage)(IOleItemContainer *This, LPSTR lpszItem, LPBINDCTX pbc,  IID * riid, LPVOID *ppvStorage);HRESULT (*IsRunning)(IOleItemContainer *This, LPSTR lpszItem);};
struct IViewObjectVtbl {HRESULT (*QueryInterface)(IViewObject *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IViewObject *This);ULONG (*Release)(IViewObject *This);HRESULT (*Draw)(IViewObject *This, DWORD dwDrawAspect, int lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD), DWORD dwContinue);HRESULT (*GetColorSet)(IViewObject *This, DWORD dwDrawAspect, int lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LPLOGPALETTE *ppColorSet);HRESULT (*Freeze)(IViewObject *This, DWORD dwDrawAspect, int lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT (*Unfreeze)(IViewObject *This, DWORD dwFreeze);HRESULT (*SetAdvise)(IViewObject *This, DWORD aspects, DWORD advf, LPADVISESINK pAdvSink);HRESULT (*GetAdvise)(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, LPADVISESINK *ppAdvSink);};
struct IOleCache2Vtbl {HRESULT (*QueryInterface)(IOleCache2 *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleCache2 *This);ULONG (*Release)(IOleCache2 *This);HRESULT (*Cache)(IOleCache2 *This, LPFORMATETC lpFormatetc, DWORD advf, LPDWORD lpdwConnection);HRESULT (*Uncache)(IOleCache2 *This, DWORD dwConnection);HRESULT (*EnumCache)(IOleCache2 *This, LPENUMSTATDATA *ppenumStatData);HRESULT (*InitCache)(IOleCache2 *This, LPDATAOBJECT pDataObject);HRESULT (*SetData)(IOleCache2 *This, LPFORMATETC pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT (*UpdateCache)(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);HRESULT (*DiscardCache)(IOleCache2 *This, DWORD dwDiscardOptions);};
struct IOleCacheVtbl {HRESULT (*QueryInterface)(IOleCache *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleCache *This);ULONG (*Release)(IOleCache *This);HRESULT (*Cache)(IOleCache *This, LPFORMATETC lpFormatetc, DWORD advf, LPDWORD lpdwConnection);HRESULT (*Uncache)(IOleCache *This, DWORD dwConnection);HRESULT (*EnumCache)(IOleCache *This, LPENUMSTATDATA *ppenumStatData);HRESULT (*InitCache)(IOleCache *This, LPDATAOBJECT pDataObject);HRESULT (*SetData)(IOleCache *This, LPFORMATETC pformatetc, STGMEDIUM *pmedium, BOOL fRelease);};
struct tagCHOOSEFONT {DWORD lStructSize;HWND hwndOwner;HDC hDC;LOGFONT *lpLogFont;int iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;UINT ( *lpfnHook)(HWND, UINT, WPARAM, LPARAM);LPCSTR lpTemplateName;HINSTANCE hInstance;LPSTR lpszStyle;UINT nFontType;int nSizeMin;int nSizeMax;};
struct IOleInPlaceSiteVtbl {HRESULT (*QueryInterface)(IOleInPlaceSite *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleInPlaceSite *This);ULONG (*Release)(IOleInPlaceSite *This);HRESULT (*GetWindow)(IOleInPlaceSite *This, HWND *lphwnd);HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite *This, BOOL fEnterMode);HRESULT (*CanInPlaceActivate)(IOleInPlaceSite *This);HRESULT (*OnInPlaceActivate)(IOleInPlaceSite *This);HRESULT (*OnUIActivate)(IOleInPlaceSite *This);HRESULT (*GetWindowContext)(IOleInPlaceSite *This, LPOLEINPLACEFRAME *lplpFrame, LPOLEINPLACEUIWINDOW *lplpDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT (*Scroll)(IOleInPlaceSite *This, SIZE scrollExtent);HRESULT (*OnUIDeactivate)(IOleInPlaceSite *This, BOOL fUndoable);HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite *This);HRESULT (*DiscardUndoState)(IOleInPlaceSite *This);HRESULT (*DeactivateAndUndo)(IOleInPlaceSite *This);HRESULT (*OnPosRectChange)(IOleInPlaceSite *This, LPCRECT lprcPosRect);};
struct IViewObject2Vtbl {HRESULT (*QueryInterface)(IViewObject2 *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IViewObject2 *This);ULONG (*Release)(IViewObject2 *This);HRESULT (*Draw)(IViewObject2 *This, DWORD dwDrawAspect, int lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD), DWORD dwContinue);HRESULT (*GetColorSet)(IViewObject2 *This, DWORD dwDrawAspect, int lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LPLOGPALETTE *ppColorSet);HRESULT (*Freeze)(IViewObject2 *This, DWORD dwDrawAspect, int lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT (*Unfreeze)(IViewObject2 *This, DWORD dwFreeze);HRESULT (*SetAdvise)(IViewObject2 *This, DWORD aspects, DWORD advf, LPADVISESINK pAdvSink);HRESULT (*GetAdvise)(IViewObject2 *This, DWORD *pAspects, DWORD *pAdvf, LPADVISESINK *ppAdvSink);HRESULT (*GetExtent)(IViewObject2 *This, DWORD dwDrawAspect, int lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);};
struct ITypeInfoVtbl {HRESULT (*QueryInterface)(ITypeInfo *This,  IID * riid, void * *ppvObj);unsigned int (*AddRef)(ITypeInfo *This);unsigned int (*Release)(ITypeInfo *This);HRESULT (*GetTypeAttr)(ITypeInfo *This, TYPEATTR * *pptypeattr);HRESULT (*GetTypeComp)(ITypeInfo *This, ITypeComp * *pptcomp);HRESULT (*GetFuncDesc)(ITypeInfo *This, unsigned int index, FUNCDESC * *ppfuncdesc);HRESULT (*GetVarDesc)(ITypeInfo *This, unsigned int index, VARDESC * *ppvardesc);HRESULT (*GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgbstrNames, unsigned int cMaxNames, unsigned int *pcNames);HRESULT (*GetRefTypeOfImplType)(ITypeInfo *This, unsigned int index, HREFTYPE *phreftype);HRESULT (*GetImplTypeFlags)(ITypeInfo *This, unsigned int index, int *pimpltypeflags);HRESULT (*GetIDsOfNames)(ITypeInfo *This, char * *rgszNames, unsigned int cNames, MEMBERID *rgmemid);HRESULT (*Invoke)(ITypeInfo *This, void *pvInstance, MEMBERID memid, unsigned int wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, unsigned int *puArgErr);HRESULT (*GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pbstrName, BSTR *pbstrDocString, unsigned int *pdwHelpContext, BSTR *pbstrHelpFile);HRESULT (*GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invkind, BSTR *pbstrDllName, BSTR *pbstrName, unsigned int *pwOrdinal);HRESULT (*GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hreftype, ITypeInfo * *pptinfo);HRESULT (*AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invkind, void * *ppv);HRESULT (*CreateInstance)(ITypeInfo *This, IUnknown *punkOuter,  IID * riid, void * *ppvObj);HRESULT (*GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pbstrMops);HRESULT (*GetContainingTypeLib)(ITypeInfo *This, ITypeLib * *pptlib, unsigned int *pindex);void (*ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *ptypeattr);void (*ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pfuncdesc);void (*ReleaseVarDesc)(ITypeInfo *This, VARDESC *pvardesc);};
struct IOleLinkVtbl {HRESULT (*QueryInterface)(IOleLink *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleLink *This);ULONG (*Release)(IOleLink *This);HRESULT (*SetUpdateOptions)(IOleLink *This, DWORD dwUpdateOpt);HRESULT (*GetUpdateOptions)(IOleLink *This, LPDWORD pdwUpdateOpt);HRESULT (*SetSourceMoniker)(IOleLink *This, LPMONIKER pmk,  CLSID * rclsid);HRESULT (*GetSourceMoniker)(IOleLink *This, LPMONIKER *ppmk);HRESULT (*SetSourceDisplayName)(IOleLink *This, LPCSTR lpszDisplayName);HRESULT (*GetSourceDisplayName)(IOleLink *This, LPSTR *lplpszDisplayName);HRESULT (*BindToSource)(IOleLink *This, DWORD bindflags, LPBINDCTX pbc);HRESULT (*BindIfRunning)(IOleLink *This);HRESULT (*GetBoundSource)(IOleLink *This, LPUNKNOWN *ppUnk);HRESULT (*UnbindSource)(IOleLink *This);HRESULT (*Update)(IOleLink *This, LPBINDCTX pbc);};
struct tagRC {HREC hrec;HWND hwnd;UINT wEventRef;UINT wRcPreferences;int lRcOptions;RCYIELDPROC lpfnYield;BYTE lpUser[32];UINT wCountry;UINT wIntlPreferences;char lpLanguage[44];LPDF rglpdf[16];UINT wTryDictionary;CL clErrorLevel;ALC alc;ALC alcPriority;BYTE rgbfAlc[32];UINT wResultMode;UINT wTimeOut;int lPcm;RECT rectBound;RECT rectExclude;GUIDE guide;UINT wRcOrient;UINT wRcDirect;int nInkWidth;COLORREF rgbInk;DWORD dwAppParam;DWORD dwDictParam;DWORD dwRecognizer;UINT rgwReserved[8];};
struct IDataObjectVtbl {HRESULT (*QueryInterface)(IDataObject *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IDataObject *This);ULONG (*Release)(IDataObject *This);HRESULT (*GetData)(IDataObject *This, LPFORMATETC pformatetcIn, LPSTGMEDIUM pmedium);HRESULT (*GetDataHere)(IDataObject *This, LPFORMATETC pformatetc, LPSTGMEDIUM pmedium);HRESULT (*QueryGetData)(IDataObject *This, LPFORMATETC pformatetc);HRESULT (*GetCanonicalFormatEtc)(IDataObject *This, LPFORMATETC pformatetc, LPFORMATETC pformatetcOut);HRESULT (*SetData)(IDataObject *This, LPFORMATETC pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT (*EnumFormatEtc)(IDataObject *This, DWORD dwDirection, LPENUMFORMATETC *ppenumFormatEtc);HRESULT (*DAdvise)(IDataObject *This, FORMATETC *pFormatetc, DWORD advf, LPADVISESINK pAdvSink, DWORD *pdwConnection);HRESULT (*DUnadvise)(IDataObject *This, DWORD dwConnection);HRESULT (*EnumDAdvise)(IDataObject *This, LPENUMSTATDATA *ppenumAdvise);};
struct IMonikerVtbl {HRESULT (*QueryInterface)(IMoniker *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IMoniker *This);ULONG (*Release)(IMoniker *This);HRESULT (*GetClassID)(IMoniker *This, LPCLSID lpClassID);HRESULT (*IsDirty)(IMoniker *This);HRESULT (*Load)(IMoniker *This, LPSTREAM pStm);HRESULT (*Save)(IMoniker *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT (*GetSizeMax)(IMoniker *This, ULARGE_INTEGER *pcbSize);HRESULT (*BindToObject)(IMoniker *This, LPBC pbc, LPMONIKER pmkToLeft,  IID * riidResult, LPVOID *ppvResult);HRESULT (*BindToStorage)(IMoniker *This, LPBC pbc, LPMONIKER pmkToLeft,  IID * riid, LPVOID *ppvObj);HRESULT (*Reduce)(IMoniker *This, LPBC pbc, DWORD dwReduceHowFar, LPMONIKER *ppmkToLeft, LPMONIKER *ppmkReduced);HRESULT (*ComposeWith)(IMoniker *This, LPMONIKER pmkRight, BOOL fOnlyIfNotGeneric, LPMONIKER *ppmkComposite);HRESULT (*Enum)(IMoniker *This, BOOL fForward, LPENUMMONIKER *ppenumMoniker);HRESULT (*IsEqual)(IMoniker *This, LPMONIKER pmkOtherMoniker);HRESULT (*Hash)(IMoniker *This, LPDWORD pdwHash);HRESULT (*IsRunning)(IMoniker *This, LPBC pbc, LPMONIKER pmkToLeft, LPMONIKER pmkNewlyRunning);HRESULT (*GetTimeOfLastChange)(IMoniker *This, LPBC pbc, LPMONIKER pmkToLeft, FILETIME *pfiletime);HRESULT (*Inverse)(IMoniker *This, LPMONIKER *ppmk);HRESULT (*CommonPrefixWith)(IMoniker *This, LPMONIKER pmkOther, LPMONIKER *ppmkPrefix);HRESULT (*RelativePathTo)(IMoniker *This, LPMONIKER pmkOther, LPMONIKER *ppmkRelPath);HRESULT (*GetDisplayName)(IMoniker *This, LPBC pbc, LPMONIKER pmkToLeft, LPSTR *lplpszDisplayName);HRESULT (*ParseDisplayName)(IMoniker *This, LPBC pbc, LPMONIKER pmkToLeft, LPSTR lpszDisplayName, ULONG *pchEaten, LPMONIKER *ppmkOut);HRESULT (*IsSystemMoniker)(IMoniker *This, LPDWORD pdwMksys);};
struct IOleObjectVtbl {HRESULT (*QueryInterface)(IOleObject *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleObject *This);ULONG (*Release)(IOleObject *This);HRESULT (*SetClientSite)(IOleObject *This, LPOLECLIENTSITE pClientSite);HRESULT (*GetClientSite)(IOleObject *This, LPOLECLIENTSITE *ppClientSite);HRESULT (*SetHostNames)(IOleObject *This, LPCSTR szContainerApp, LPCSTR szContainerObj);HRESULT (*Close)(IOleObject *This, DWORD dwSaveOption);HRESULT (*SetMoniker)(IOleObject *This, DWORD dwWhichMoniker, LPMONIKER pmk);HRESULT (*GetMoniker)(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, LPMONIKER *ppmk);HRESULT (*InitFromData)(IOleObject *This, LPDATAOBJECT pDataObject, BOOL fCreation, DWORD dwReserved);HRESULT (*GetClipboardData)(IOleObject *This, DWORD dwReserved, LPDATAOBJECT *ppDataObject);HRESULT (*DoVerb)(IOleObject *This, int iVerb, LPMSG lpmsg, LPOLECLIENTSITE pActiveSite, int lindex, HWND hwndParent, LPCRECT lprcPosRect);HRESULT (*EnumVerbs)(IOleObject *This, LPENUMOLEVERB *ppenumOleVerb);HRESULT (*Update)(IOleObject *This);HRESULT (*IsUpToDate)(IOleObject *This);HRESULT (*GetUserClassID)(IOleObject *This, CLSID *pClsid);HRESULT (*GetUserType)(IOleObject *This, DWORD dwFormOfType, LPSTR *pszUserType);HRESULT (*SetExtent)(IOleObject *This, DWORD dwDrawAspect, LPSIZEL lpsizel);HRESULT (*GetExtent)(IOleObject *This, DWORD dwDrawAspect, LPSIZEL lpsizel);HRESULT (*Advise)(IOleObject *This, LPADVISESINK pAdvSink, DWORD *pdwConnection);HRESULT (*Unadvise)(IOleObject *This, DWORD dwConnection);HRESULT (*EnumAdvise)(IOleObject *This, LPENUMSTATDATA *ppenumAdvise);HRESULT (*GetMiscStatus)(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus);HRESULT (*SetColorScheme)(IOleObject *This, LPLOGPALETTE lpLogpal);};
typedef LPCRECT LPCBORDERWIDTHS;
struct tagMETAFILEPICT {int mm;int xExt;int yExt;HMETAFILE hMF;};
typedef LPRECT LPBORDERWIDTHS;
typedef TIMECALLBACK *LPTIMECALLBACK;
struct tagHANDLETABLE {HGDIOBJ objectHandle[1];};
typedef DRVCALLBACK *LPDRVCALLBACK;
typedef HANDLE GLOBALHANDLE;
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef DRVCALLBACK MIDICALLBACK;
typedef DRVCALLBACK WAVECALLBACK;
typedef HANDLE LOCALHANDLE;
typedef HMIDISTRM *LPHMIDISTRM;
typedef HMIXEROBJ *LPHMIXEROBJ;
typedef OLERENDER *LPOLERENDER;
typedef OLEUPDATE *LPOLEUPDATE;
typedef FNCALLBACK *PFNCALLBACK;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HWAVEOUT *LPHWAVEOUT;
typedef MMIOPROC *LPMMIOPROC;
struct tagHSZPAIR {HSZ hszSvc;HSZ hszTopic;};
typedef HMIDIIN *LPHMIDIIN;
typedef HWAVEIN *LPHWAVEIN;
typedef PATTERN *LPPATTERN;
typedef PATTERN  *NPPATTERN;
typedef int ( *ENUMPROC)(LPSYV, int, void *);
typedef HANDLE HPENDATA;
typedef HANDLE *LPHANDLE;
typedef HMIXER *LPHMIXER;
typedef HVIDEO *LPHVIDEO;
typedef PATTERN *PPATTERN;
typedef HANDLE  *SPHANDLE;
typedef HICON HCURSOR;
typedef HANDLE HGLOBAL;
typedef  WCHAR *LPCWSTR;
typedef HMIDI *LPHMIDI;
typedef HANDLE *PHANDLE;
struct in_addr {union in_addr___C13EC994467D6E67044F092615EC7EA9 S_un;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
typedef WCHAR *LPWSTR;
typedef HKEY *PHKEY;
typedef HGLOBAL ( *LPFNLOADRES)(LPSTR szType, LPSTR szId);
struct sockaddr_in {int sin_family;u_short sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct mmtime_tag {UINT wType;union mmtime_tag___E89738907296235928D3FD1615E4E030 u;};
struct tMIXERLINE {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;char szShortName[16];char szName[64];struct tMIXERLINE___603D61C4173A9E5D7ED836A8441A40C9 Target;};
struct tagSEGINFO {UINT offSegment;UINT cbSegment;UINT flags;UINT cbAlloc;HGLOBAL h;UINT alignShift;UINT reserved[2];};
struct tagVARIANT {VARTYPE vt;unsigned int wReserved1;unsigned int wReserved2;unsigned int wReserved3;tagVARIANT___97E52095E85F5E8E7D59138FFD8EEF88 __anonymous0;};
struct tagSYSHEAPINFO {DWORD dwSize;WORD wUserFreePercent;WORD wGDIFreePercent;HGLOBAL hUserSegment;HGLOBAL hGDISegment;};
struct tagTLIBATTR {GUID guid;LCID lcid;SYSKIND syskind;unsigned int wMajorVerNum;unsigned int wMinorVerNum;unsigned int wLibFlags;};
struct _DFB5CCA608DB1B6F2D4767A059C3C570 {UINT wType;UINT wWidth;UINT wHeight;DWORD dwStyle;char szDescr[22];HBITMAP hToolBit;HCURSOR hDropCurs;};
struct tagGLOBALENTRY {DWORD dwSize;DWORD dwAddress;DWORD dwBlockSize;HGLOBAL hBlock;WORD wcLock;WORD wcPageLock;WORD wFlags;BOOL wHeapPresent;HGLOBAL hOwner;WORD wType;WORD wData;DWORD dwNext;DWORD dwNextAlt;};
typedef BOOL ( *LPFNSTYLE)(HWND hWnd, HGLOBAL hCntlStyle, LPFNSTRTOID lpfnSID, LPFNIDTOSTR lpfnIDS);
typedef HGLOBAL ( *LPFNLIST)(LPCSTR szAppName, UINT wVersion, LPFNLOADRES fnLoad, LPFNEDITRES fnEdit);
struct tagTASKENTRY {DWORD dwSize;HTASK hTask;HTASK hTaskParent;HINSTANCE hInst;HMODULE hModule;WORD wSS;WORD wSP;WORD wStackTop;WORD wStackMinimum;WORD wStackBottom;WORD wcEvents;HGLOBAL hQueue;char szModule[10];WORD wPSPOffset;HANDLE hNext;};
struct tagWNDCLASS {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;};
struct _MMIOINFO {DWORD dwFlags;FOURCC fccIOProc;LPMMIOPROC pIOProc;UINT wErrorRet;HTASK htask;int cchBuffer;HPSTR pchBuffer;HPSTR pchNext;HPSTR pchEndRead;HPSTR pchEndWrite;int lBufOffset;int lDiskOffset;DWORD adwInfo[3];DWORD dwReserved1;DWORD dwReserved2;HMMIO hmmio;};
struct tagRCRESULT {SYG syg;UINT wResultsType;int cSyv;LPSYV lpsyv;HANDLE hSyv;int nBaseLine;int nMidLine;HPENDATA hpendata;RECT rectBoundInk;POINT pntEnd;LPRC lprc;};
struct tagPD {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;UINT nFromPage;UINT nToPage;UINT nMinPage;UINT nMaxPage;UINT nCopies;HINSTANCE hInstance;LPARAM lCustData;UINT ( *lpfnPrintHook)(HWND, UINT, WPARAM, LPARAM);UINT ( *lpfnSetupHook)(HWND, UINT, WPARAM, LPARAM);LPCSTR lpPrintTemplateName;LPCSTR lpSetupTemplateName;HGLOBAL hPrintTemplate;HGLOBAL hSetupTemplate;};
struct IOleInPlaceUIWindowVtbl {HRESULT (*QueryInterface)(IOleInPlaceUIWindow *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleInPlaceUIWindow *This);ULONG (*Release)(IOleInPlaceUIWindow *This);HRESULT (*GetWindow)(IOleInPlaceUIWindow *This, HWND *lphwnd);HRESULT (*ContextSensitiveHelp)(IOleInPlaceUIWindow *This, BOOL fEnterMode);HRESULT (*GetBorder)(IOleInPlaceUIWindow *This, LPRECT lprectBorder);HRESULT (*RequestBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS lpborderwidths);HRESULT (*SetBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS lpborderwidths);HRESULT (*SetActiveObject)(IOleInPlaceUIWindow *This, LPOLEINPLACEACTIVEOBJECT lpActiveObject, LPCSTR lpszObjName);};
struct IOleInPlaceFrameVtbl {HRESULT (*QueryInterface)(IOleInPlaceFrame *This,  IID * riid, LPVOID *ppvObj);ULONG (*AddRef)(IOleInPlaceFrame *This);ULONG (*Release)(IOleInPlaceFrame *This);HRESULT (*GetWindow)(IOleInPlaceFrame *This, HWND *lphwnd);HRESULT (*ContextSensitiveHelp)(IOleInPlaceFrame *This, BOOL fEnterMode);HRESULT (*GetBorder)(IOleInPlaceFrame *This, LPRECT lprectBorder);HRESULT (*RequestBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS lpborderwidths);HRESULT (*SetBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS lpborderwidths);HRESULT (*SetActiveObject)(IOleInPlaceFrame *This, LPOLEINPLACEACTIVEOBJECT lpActiveObject, LPCSTR lpszObjName);HRESULT (*InsertMenus)(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT (*SetMenu)(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);HRESULT (*RemoveMenus)(IOleInPlaceFrame *This, HMENU hmenuShared);HRESULT (*SetStatusText)(IOleInPlaceFrame *This, LPCSTR lpszStatusText);HRESULT (*EnableModeless)(IOleInPlaceFrame *This, BOOL fEnable);HRESULT (*TranslateAccelerator)(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID);};
typedef MIDICALLBACK *LPMIDICALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
typedef HGLOBAL ( *LPFNINFO)();
struct _12162CE22CDC56067DA0BB6E4AD54465 {LPFNINFO fnRWInfo;LPFNSTYLE fnRWStyle;LPFNFLAGS fnFlags;char szClass[20];};



/// #endif ===true


