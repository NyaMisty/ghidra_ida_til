
#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\gnuunx.til.h"
/// #define HAVETYPE___u32 ===DEFINED

/// #define HAVETYPE___u16 ===DEFINED

/// #define HAVETYPE___u64 ===DEFINED

/// #define HAVETYPE___kernel_uid32_t ===DEFINED

/// #define HAVETYPE___kernel_mqd_t ===DEFINED

/// #define GHIDRA ===DEFINED

/// #ifndef INCLUDE_GUARD_gnuunx_til ===true

/// #define INCLUDE_GUARD_gnuunx_til ===DEFINED


#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\5_gengdt\.\..\..\..\IDAPlugins\idatil2c\common.h"


/// #define __int64  long long ===DEFINED
/// #define __int32  int ===DEFINED
/// #define __int16  short ===DEFINED
/// #define __int8  char ===DEFINED

/// #ifdef GHIDRA ===true

typedef struct {
    long long u1;
    long long u2;
} __int128;
typedef struct {
    unsigned long long u1;
    unsigned long long u2;
} __uint128;
/// #endif ===true


typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

/// #define _BYTE  uint8_t ===DEFINED
/// #define _WORD  uint16_t ===DEFINED
/// #define _QWORD  uint64_t ===DEFINED
/// #define _DWORD  uint32_t ===DEFINED



/// #ifndef HAVETYPE_bool ===true

/// #define bool  char ===DEFINED
/// #endif ===true


/// #ifndef HAVETYPE___u32 ===false
//// 
//// typedef uint32_t __u32;
/// #endif ===false

/// #ifndef HAVETYPE___u16 ===false
//// 
//// typedef uint16_t __u16;
/// #endif ===false

/// #ifndef HAVETYPE___u64 ===false
//// 
//// typedef uint64_t __u64;
/// #endif ===false

/// #ifndef HAVETYPE___kernel_uid32_t ===false
//// 
//// typedef unsigned int __kernel_uid32_t;
/// #endif ===false

/// #ifndef HAVETYPE___kernel_mqd_t ===false
//// 
//// typedef int __kernel_mqd_t;
/// #endif ===false



/// #define __fastcall ===DEFINED

/// #define __unaligned ===DEFINED

/// #define __stdcall ===DEFINED

/// #define __cppobj ===DEFINED

/// #define __declspec([x])   ===DEFINED
/// #define __hidden ===DEFINED

/// #define __cdecl ===DEFINED

/// #define __noreturn ===DEFINED


/// #define const ===DEFINED

/// #define this  _this ===DEFINED

typedef char _Mbstatet;

typedef void **va_list;





























 
#line 9: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\gnuunx.til.h"




struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___257C4BBE877DAACE468881AF3C3FD997;
struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___41E103AEC814609D75F1D5A85352E48F;
struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___5321887C570BBFDBA75455701C3FC442;
struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___C0D47F044CB1E673F41B0FD513C7A3FC;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___266F084FBD2DD430E7AFD348E031639B;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___2B1610C43CB4355643BAC37269BF7BBD;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___4D7B9F91797FDA1EDFB9ACCA9956D6AF;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___53BFC109C2D88721EDDD2D191A43FEE2;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___5E8E083A73AC38B15B41F0D6DF520976;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___619292454ABA4BDF568AEF9D996941D4;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___AA2A6ECD71AC302E6CFCB957185D9CCF;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___D1980AFFFC9687F94E18953A0671F132;
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___EEECD32CAA16E098BD39A4A2C5E80212;
struct bfd_link_hash_entry______5321887C570BBFDBA75455701C3FC442__bfd_link_hash_common_entry;
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___BFD7413E14FC21CAB05150D69A0647C0;
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___C081DE2363A7D6E022ACDA68492DBB3F;
struct bfd_link_order___F088814F1EB47C39F5059A2176155568___20472B6430190B13548BE45EDDAD6B8B;
struct bfd_link_order___F088814F1EB47C39F5059A2176155568___974A17A8BC5AF481D5F80CD1467CEB27;
struct bfd_link_order___F088814F1EB47C39F5059A2176155568___CB20B2E56E1A0ADC543C65136DC1864E;
struct rejected_reply___D36433C375B856769A86CDA2CFADE497___C081DE2363A7D6E022ACDA68492DBB3F;
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___B8AD833485FADDB6F1E0494B45611EC6;
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FB6660946ED728575FB5339601D7D5BE;
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FD3E7DCAA1FA6D37E77316D970071F0A;
struct __res_state___E19F19286CA79C25813C29B2F37D7904___9F1FBFA3B280393606EA65BB64E9684F;
union _xEvent______F60DFC41729ECCA7C121C44CBFE60E95___82F47A5C57D4899F304609D6061CA549;
struct sigevent___C855B7F99D6435A8E40592C91F886A00___A6CCB415D22742E8ABADFD8EB2BAAD45;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___06CC3EE1C785FF4C65A358F81D4770E3;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___0782806FB5FEE125636C30F93EC424E5;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___0F73BC087B0175F837E61BF86166AB84;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___210E680417EC90CA260E4854A6751754;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___316B218C709051C178B3BB07E6B18196;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___3284E488B37AEC742A022E833068D497;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___3F936A3A9A06092B5B70BD26A7DFD789;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___40ECE1105C1C479EC11371480E0EAEEE;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___4C0CCDC0D2C41013B07E05B3A7C75551;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___4D6B1C2E2FE6C1124CAB2311E897D1AB;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___5A60174FC6A07BE0049C674473C6C1C3;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___674F3E4AE65A41A1BBF2ACE37596CB1B;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___99F5A2754EC45011AB028BB1CC2CE3C7;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___9C75AB6DDEADA42926A4005EFC1B4241;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___9E59406F0409BDE74EEED2CE1F683A76;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___B56843D1A807D13D0FEC0C0069626892;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___B652DCB1C62512FA77E4252B8A422175;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___C927E5D571B5CC43049437141E992D5C;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___CB6A6FBD4AABDC204CA09785462A5EAC;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___CF45A70F1381AC3E41639336F8DCFD08;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___D4E6015299E8C3BAFA52E0C7400AB6A6;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___E3E63ACF9DBDF6C56161A285CC120760;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___EDE3B33B7AF26E05A2A60AEE6589519E;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F0E773388BCCF7D4D022A846E01785CC;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F0EDD24BB588AB1974F0CC5CC47343A0;
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F60DFC41729ECCA7C121C44CBFE60E95;
struct icmphdr___44B9F435D952314818895718F3518D16___6EE1EE5693408D5F1EEE7E152919407C;
struct icmphdr___44B9F435D952314818895718F3518D16___FAA42A1B1B50669B023341484BA7B095;
struct objdata___B3007D6063AF66DF722E8A0D3E39E00C___C5CA305DAC14A48247D92F909AB77E9C;
struct rpc_err___20A10790E27E739F57AC739A9EB3B2A2___BF7AC7AAFAE2A9D4F26CD1E6B816F6B2;
struct rpc_err___20A10790E27E739F57AC739A9EB3B2A2___C081DE2363A7D6E022ACDA68492DBB3F;
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___002955E8B5DE3B92E30DFEF7AB65BFE2;
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___353EAF26536A4016665766004ADC0BD6;
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___394784BEE55B7018BCA7354475FB2ABC;
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___534EC22A0813C1325C3E7D3262B5A8D3;
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___DDF278A5B88F81FEC3CBEE828E282CB3;
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___F43D85AC31CEBD8CC07B08111ABDF065;
struct icmp___EEC48C5976A17953B310258F40698883___18EAF2C5161535AE6831887B3FEB9817;
struct icmp___EEC48C5976A17953B310258F40698883___E13592CBDF627F773A21D4C55E8BB1FD;
struct ____1C1E9EA25555F3A04518B10EE9DF4602___5BEEE552B0DC6B217341171DE42CA55F;
struct ____1C1E9EA25555F3A04518B10EE9DF4602___CB6A6FBD4AABDC204CA09785462A5EAC;
struct ____1C1E9EA25555F3A04518B10EE9DF4602___FA18AEC49CDA3F922B926DB83731E944;
struct ____4C8070B9675DF490D49D1F7749E052FB___554023DFD94A0D1F1DC623A35C397FCE;
struct ____4C8070B9675DF490D49D1F7749E052FB___CB6A6FBD4AABDC204CA09785462A5EAC;
union _0F3578149035D0CDE8FE9154071A721D___9AAFAEFBCBBBF749C8CE72EB51A9C8A2;
struct _10BF8BFF208FC04E48FB9712D25FCBB7___33BBEBA79D8C3D381AA595E08C13178B;
union _1A16B277A945B8F62DE8883A2D91AFD9___0740F39446D5E828B16B7363880DB674;
union _1AA7F1335C4C6CFF07A82EACE5F12A97___334616D58205B64CBDE7625544988388;
struct _1C4035FDEAFFF0FCE26E66A96F6BBEB4___20EFCB5FAA72B851457C6BAA266EC02E;
struct _2B2D277CB94E3786AC978CB982FDCC47___0DD87E7D5067AFA6367924F4350962B4;
struct _2B2D277CB94E3786AC978CB982FDCC47___376D00C7E1B7A5ED22C80CA26753DCCE;
struct _2B2D277CB94E3786AC978CB982FDCC47___400BA39E42047056CF99A3263FA31D4C;
struct _2B2D277CB94E3786AC978CB982FDCC47___57292DFCF470BDC3494EA7118CBCC8BD;
struct _2B2D277CB94E3786AC978CB982FDCC47___73418DF873F0AEAE72664EE28475962B;
struct _2B2D277CB94E3786AC978CB982FDCC47___85517BA59E6BA55FB4735AB48AC251E7;
struct _2B2D277CB94E3786AC978CB982FDCC47___9C9DDB14D1D289A980AAF2B4D6C80B7E;
struct _2B2D277CB94E3786AC978CB982FDCC47___EC5C984D1ABB44D79E844BA1925B0F8F;
struct _2B2D277CB94E3786AC978CB982FDCC47___F3FCB5F8AADE779F0358406CD1E720C8;
struct _2B2D277CB94E3786AC978CB982FDCC47___F5F34547B09E0E11024B1056985C8E5F;
union _5D6EFF7AE4955960C2AFFE32FE5051B9___A6A66F05C578A4FA32694BF857B12B94;
struct _6105F69743B5F4DC3D2725A2474E8E7A___226E8492299A9657BCCDB2FD50B1B3D8;
union _6954A090FF674864C2EF0B367DFBE910___4C8070B9675DF490D49D1F7749E052FB;
struct _6B73A3115BC6C5DB52FFBC029452666C___CDF557A927ED2BFF93B09908D4EFCA76;
struct _6DF3DE276417BF858702C9AB9AD460CB___471377A4EE616195936A53166C2E8985;
struct _6DF3DE276417BF858702C9AB9AD460CB___C80D1A5D569DC2D014AF103056E679B8;
union _702BBE03CA55F2529059C1331C136CB9___BF437CD3F94558FA799CF6E0127CD317;
struct _738A8E8AC168E5B4B1A53622C9D7048F___D6587128ED4C013AF36DCCA432989BD5;
union _7F4FA8E04F335CE1E911E9EDA6B28A3F___F5AEDB05CC685AEABDADED2A12BE7C9F;
union _8E3F17DF06268256B33C950219C36638___933121F4FA1889599F702E16603DBB9F;
union _9E389EF8DB18C75445DC45CE7C2FFB9B___2798575F521600C1E26DD161E22996D8;
union _9E6A7A2F5B8444BF3F540E884EB664C9___1C1E9EA25555F3A04518B10EE9DF4602;
union _C2A18E44A509FAD040F54243FD2340D8___778EFE577D72BDC72296C1BA4B0B2E9A;
struct _C4DC01CDDDF5A53B120EAA56060806A9___864F4118F25B9F87A90D9A329FD28BAF;
struct _C4DC01CDDDF5A53B120EAA56060806A9___E2AA81D64E46956BF76D69C9998515AC;
struct _C4DC01CDDDF5A53B120EAA56060806A9___EAF5EEBD71EE8006EF9C111F1CEF53E0;
struct _C4DC01CDDDF5A53B120EAA56060806A9___EBB8E7C0FA976B86CC5F6009BBD5451F;
union _CDF3BC70CBFC5069783BD7650BD44CEE___199E9548C3C848AC2EFDDFCE03257421;
union _E8B6B3D679DDF9A2A9F1E31A29349D07___E20C8C1B4A7C82F1CEEE602013DD1F57;
struct _F7A7EA8B301FD75068D384417C243F9B___D3E652E3315149915DD54C83778308C0;
union _F9E7774477A9727B3397D0BE30B022B2___9A662A763779714768031DA711D3415F;
union _XIMStatusDrawCallbackStruct___D9A2F521BD917AA4B9408853DE8DEFA7;
union _XIMStringConversionText___DE48A4CD3A06187C4ACE99002CF90FB4;
union _____pthread_mutex_s___30DFB618E49C377A3D62C6584A4CBE95;
union WBXMLAttributeName_s___FA40C9F21723DAAB428353CE1E5EA15A;
union bfd_link_order_reloc___B1652E1B2D42B7B6BC287CA32D4604B8;
union bfd_link_hash_entry___7518C311B30939442257602FB0F48E63;
struct ieee854_long_double___301A90221CF54AA61D03B5601C453EBC;
struct ieee854_long_double___FB8E818610133F718AF156918955DD46;
struct ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314__ip6_hdrctl;
struct xcb_composite_create_region_from_border_clip_request_t;
union demangle_component___BD38721DC8730D9720604E58D5DD62AB;
union lineno_cache_entry___7DFE706FE41FDD19EC190E8655BAC81D;
struct ____OldXSizeHints___CDF557A927ED2BFF93B09908D4EFCA76;
struct _F85E194B51CBDC38F209555F4162D10C____pthread_mutex_s;
struct xcb_xf86dri_query_direct_rendering_capable_request_t;
union BDF_PropertyRec____70749040A902BEEB5B4A43154398F920;
union jas_iccattrval_s___4E7A20EABC1986AAA015782F8F2C1C32;
struct xcb_xf86dri_query_direct_rendering_capable_cookie_t;
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_rtradv;
struct xcb_xf86dri_query_direct_rendering_capable_reply_t;
struct _75F7E626134BF34BF20657FC27D19BCE___OldXSizeHints;
union accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023;
union bfd_link_order___F088814F1EB47C39F5059A2176155568;
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_idseq;
struct ieee754_double___D177F1DF27478B0248C6745F72EEAEB0;
struct ieee754_double___DD584A325266113E3D0838C6650565BE;
union jas_cmpxform_s___A0F1B4D3F69509C57B0549094C544A5C;
union rejected_reply___D36433C375B856769A86CDA2CFADE497;
struct xcb_x_print_print_get_screen_of_context_request_t;
struct directory_obj___1F9DB6EC5B4D38C4C9C3429D1A4D637D;
struct directory_obj___C1C9E10248BAA10524C7D0EEA27D2609;
union getquota_rslt___93D720EECC4BDA120269F9F7BB40A95B;
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_pmtu;
struct ieee754_float___C1CC197CEBD9377945A71E8A21F83EB1;
struct ieee754_float___CCFA8EFBEFBEB58ABED61A4627F05411;
struct xcb_render_set_picture_clip_rectangles_request_t;
struct xcb_x_print_print_get_image_resolution_request_t;
struct xcb_x_print_print_get_screen_of_context_cookie_t;
struct xcb_x_print_print_set_image_resolution_request_t;
struct _B44A6AA5E65CF240A74FE9F706C0E430__svc_auth_ops;
struct _XmuCvtCache___A3950F211C81DD2EE7118AB39C575077;
union authdes_verf___7A6CF749D39778C1B89693A36BA727C7;
union key_netstres___2176196DCBB8522A9A1E300DB0535BE5;
union klm_testrply___40F9D261D31BF2147C1606393BAB8476;
union nlm_testrply___25E723FE95144319ADEDD57F4FF59DDE;
union td_event_msg___93B01EC8B2A37DE149D5B3F5BB1472F3;
struct xcb_x_print_print_get_image_resolution_cookie_t;
struct xcb_x_print_print_get_page_dimensions_request_t;
struct xcb_x_print_print_get_screen_of_context_reply_t;
struct xcb_x_print_print_rehash_printer_list_request_t;
struct xcb_x_print_print_set_image_resolution_cookie_t;
struct xcb_xfixes_create_region_from_picture_request_t;
struct __res_state___A41D3F045172AF5618492D381489FAF0;
union __res_state___E19F19286CA79C25813C29B2F37D7904;
union bfd_section___9F836792AEA16A07FDA56DC7499E62B0;
union cryptkeyres___EF36972044157FC290EE2FE4EF835697;
union if_settings___26F75A7CF7D20622A142A8F9C6BB7EFD;
struct nis_taglist___D5235F6F3B62BCE7910AF756FE53E6D0;
struct xcb_composite_release_overlay_window_request_t;
struct xcb_glx_get_compressed_tex_image_arb_request_t;
struct xcb_x_print_print_get_image_resolution_reply_t;
struct xcb_x_print_print_get_one_attributes_request_t;
struct xcb_x_print_print_get_page_dimensions_cookie_t;
struct xcb_x_print_print_set_image_resolution_reply_t;
struct xcb_xfixes_create_region_from_bitmap_request_t;
struct xcb_xfixes_create_region_from_window_request_t;
struct xcb_xfixes_get_cursor_image_and_name_request_t;
union ypbind_resp___CD49527FE086EB7F6D0E69C2C3AD50AC;
union WBXMLTag_s___A183063E187A51A6887EEAA00767A090;
union bfd_symbol___B9E77FD0681C1335DBAA9A65240EEB16;
union bp_address___3B940BBAFE206A608BBBF7EC1987BA49;
struct cback_data___8577E6F7A3DA394015609B473F63AD7B;
union getcredres___C5134A0BDA290BA80D31944F899AB902;
struct ib_request___284138CD61DEACF1E3B0F8ADC9D2B817;
struct ib_request___2D577313DCD2E74CD5A0055993933E3C;
struct ib_request___BC4F227684F3C8C9122828D0FF4C6B30;
struct log_result___946B3E427CBAEF2C8E64E80E43621ACD;
struct nis_result___4B6B45C3F1C3815D68D653B8D499AE33;
struct nis_server___DA92845B88BF4FFBAAA2281E50DC5AF5;
struct ns_request___C16B7AFEC0429C3BD747A37F4D827FFD;
union reply_body___3176F759A4E4A0B30BE44C0FA3C218CC;
struct xcb_composite_unredirect_subwindows_request_t;
struct xcb_glx_get_color_table_parameterfv_request_t;
struct xcb_glx_get_color_table_parameteriv_request_t;
struct xcb_glx_get_compressed_tex_image_arb_cookie_t;
struct xcb_glx_get_convolution_parameterfv_request_t;
struct xcb_glx_get_convolution_parameteriv_request_t;
struct xcb_x_print_print_get_document_data_request_t;
struct xcb_x_print_print_get_one_attributes_cookie_t;
struct xcb_x_print_print_get_page_dimensions_reply_t;
struct xcb_x_print_print_put_document_data_request_t;
struct xcb_xfixes_get_cursor_image_and_name_cookie_t;
union ypresp_all___438EB5C0F713AEE99C9EADC1C626DC0A;
struct _XDisplay___40E717ABED307E15FC65B9096F5C7074;
union _xkbEvent___1A318C185F777B9ECB86573CC964DEF2;
struct des_block___8E96D37FBE99CA069DD91238980BB651;
union desparams___F38C3328E965CE3ADB16864418918AD0;
struct dump_args___00C533AE8545A66FA38641508A3DC473;
struct entry_col___E942B815045DEE9FABC14DA0AE6314FC;
struct entry_obj___9954B692FACAC347CBA764979909DFF4;
struct fd_result___864956CB4DA79F92CA310E20E4E9B271;
struct fd_result___E188DDB4946479B1B04909415F6D7A2E;
struct group_obj___6B1AF3D1F6DE7092D80225088D6E3A34;
union icmp6_hdr___85A0B7966B981BE593FDADBE0B8685D7;
struct log_entry___1E639176190539C4AF5A837E820AE922;
struct rex_start___27D82728F37DDE14700CB9E3D9A87412;
struct rex_start___4E8F7DC4996D24194F1417703DE27DA2;
union sigaction___8A6CDC2F5AA8DF854CEC54DCAF095C68;
struct table_obj___37F826B7C2AFF7B3E483E0E1EE89ED51;
union td_notify___143F0EF771439D241AFD6E8AB1506B64;
struct xcb_glx_change_drawable_attributes_request_t;
struct xcb_glx_get_color_table_parameterfv_cookie_t;
struct xcb_glx_get_color_table_parameteriv_cookie_t;
struct xcb_glx_get_compressed_tex_image_arb_reply_t;
struct xcb_glx_get_convolution_parameterfv_cookie_t;
struct xcb_glx_get_convolution_parameteriv_cookie_t;
struct xcb_render_create_conical_gradient_request_t;
struct xcb_render_query_pict_index_values_request_t;
struct xcb_x_print_print_get_document_data_cookie_t;
struct xcb_x_print_print_get_one_attributes_reply_t;
struct xcb_x_print_print_get_printer_list_request_t;
struct xcb_xf86dri_get_client_driver_name_request_t;
struct xcb_xfixes_get_cursor_image_and_name_reply_t;
struct xcb_xfixes_set_picture_clip_region_request_t;
struct xcb_xfixes_set_window_shape_region_request_t;
union _FcValue___4C90D9DC80941421F4625716AB95C5A2;
union _XIMText___8281806D2C2C5E9220BA18F83AF5F330;
union fhstatus___5A86E21E7BD06EF982D138486E7C27D0;
union in6_addr___485AE7EBE2507040E6A806129EC743D2;
struct link_obj___6E2208C80A69EAD3D69988E63D048B29;
struct nis_attr___F2081D9F3F0358B3A954C101A2B200CE;
union sigevent___C855B7F99D6435A8E40592C91F886A00;
struct unixcred___B86B6406BF4F2F34B5DC36D552B35DA0;
struct xcb_composite_redirect_subwindows_request_t;
struct xcb_glx_get_color_table_parameterfv_reply_t;
struct xcb_glx_get_color_table_parameteriv_reply_t;
struct xcb_glx_get_convolution_parameterfv_reply_t;
struct xcb_glx_get_convolution_parameteriv_reply_t;
struct xcb_glx_get_histogram_parameterfv_request_t;
struct xcb_glx_get_histogram_parameteriv_request_t;
struct xcb_glx_get_tex_level_parameterfv_request_t;
struct xcb_glx_get_tex_level_parameteriv_request_t;
struct xcb_glx_vendor_private_with_reply_request_t;
struct xcb_render_create_linear_gradient_request_t;
struct xcb_render_create_radial_gradient_request_t;
struct xcb_render_query_pict_index_values_cookie_t;
struct xcb_res_query_client_pixmap_bytes_request_t;
struct xcb_x_print_print_destroy_context_request_t;
struct xcb_x_print_print_get_document_data_reply_t;
struct xcb_x_print_print_get_printer_list_cookie_t;
struct xcb_xf86dri_get_client_driver_name_cookie_t;
struct xcb_xfixes_select_selection_input_request_t;
union _xEvent___9BB2AF36AA186CD40502B345642DDFAB;
union fddihdr___938C6FB260523AB5682B137AC0052733;
union icmphdr___44B9F435D952314818895718F3518D16;
union ifaddrs___5A9FB6B4293E0982D0D9C18B84AAF77B;
union ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314;
union objdata___B3007D6063AF66DF722E8A0D3E39E00C;
union obstack___EB32574EB45F4F0470D0F374CAEC173A;
union rpc_err___20A10790E27E739F57AC739A9EB3B2A2;
union rpc_msg___7D774571B4FAB0E4BBD540829030FA52;
union siginfo___0A533C95F56D7198FDCBF4ED772C5A43;
union tftphdr___AC1EF054FE947B275A5712C606118B7A;
struct xcb_composite_get_overlay_window_request_t;
struct xcb_composite_name_window_pixmap_request_t;
struct xcb_glx_get_histogram_parameterfv_cookie_t;
struct xcb_glx_get_histogram_parameteriv_cookie_t;
struct xcb_glx_get_tex_level_parameterfv_cookie_t;
struct xcb_glx_get_tex_level_parameteriv_cookie_t;
struct xcb_glx_vendor_private_with_reply_cookie_t;
struct xcb_render_query_pict_index_values_reply_t;
struct xcb_render_set_picture_transform_request_t;
struct xcb_res_query_client_pixmap_bytes_cookie_t;
struct xcb_screensaver_unset_attributes_request_t;
struct xcb_x_print_print_get_attributes_request_t;
struct xcb_x_print_print_get_printer_list_reply_t;
struct xcb_x_print_print_input_selected_request_t;
struct xcb_x_print_print_set_attributes_request_t;
struct xcb_xf86dri_get_client_driver_name_reply_t;
struct xcb_xfixes_change_cursor_by_name_request_t;
struct xcb_xfixes_create_region_from_gc_request_t;
union ifconf___FEA5AA0AF02382EAC1EF5698C9530A86;
struct xcb_composite_get_overlay_window_cookie_t;
struct xcb_composite_unredirect_window_request_t;
struct xcb_glx_get_drawable_attributes_request_t;
struct xcb_glx_get_histogram_parameterfv_reply_t;
struct xcb_glx_get_histogram_parameteriv_reply_t;
struct xcb_glx_get_query_objectuiv_arb_request_t;
struct xcb_glx_get_tex_level_parameterfv_reply_t;
struct xcb_glx_get_tex_level_parameteriv_reply_t;
struct xcb_glx_query_extensions_string_request_t;
struct xcb_glx_vendor_private_with_reply_reply_t;
struct xcb_res_query_client_pixmap_bytes_reply_t;
struct xcb_x_print_print_get_attributes_cookie_t;
struct xcb_x_print_print_input_selected_cookie_t;
struct xcb_x_print_print_query_screens_request_t;
struct xcb_x_print_print_query_version_request_t;
struct event___3F9DAFE875678DCD32E4C48DBA0B6DC5;
struct event___DA694BA3E6A28DADAA3B1D9573205141;
union ifreq___4AF2B49FDDB54BAFABDFAE063E6E4A98;
union ifreq___E3B69D1AD22BDEC81E225954E969544B;
union iwreq___4AF2B49FDDB54BAFABDFAE063E6E4A98;
struct xcb_change_active_pointer_grab_request_t;
struct xcb_composite_get_overlay_window_reply_t;
struct xcb_glx_get_convolution_filter_request_t;
struct xcb_glx_get_drawable_attributes_cookie_t;
struct xcb_glx_get_minmax_parameterfv_request_t;
struct xcb_glx_get_minmax_parameteriv_request_t;
struct xcb_glx_get_query_objectiv_arb_request_t;
struct xcb_glx_get_query_objectuiv_arb_cookie_t;
struct xcb_glx_query_extensions_string_cookie_t;
struct xcb_render_composite_glyphs_16_request_t;
struct xcb_render_composite_glyphs_32_request_t;
struct xcb_render_reference_glyph_set_request_t;
struct xcb_res_query_client_resources_request_t;
struct xcb_screensaver_set_attributes_request_t;
struct xcb_x_print_print_get_attributes_reply_t;
struct xcb_x_print_print_input_selected_reply_t;
struct xcb_x_print_print_query_screens_cookie_t;
struct xcb_x_print_print_query_version_cookie_t;
struct xcb_x_print_print_select_input_request_t;
struct xcb_xfixes_select_cursor_input_request_t;
struct xcb_xvmc_list_subpicture_types_request_t;
union icmp___893B68B5BC55935E15A63F398B6517AD;
union icmp___EEC48C5976A17953B310258F40698883;
struct wait___39CA23F4E14B66D514B108A5928EF219;
struct wait___E9BF053A98CA6B253628237B5A23E48D;
struct xcb_composite_redirect_window_request_t;
struct xcb_glx_are_textures_resident_request_t;
struct xcb_glx_get_convolution_filter_cookie_t;
struct xcb_glx_get_drawable_attributes_reply_t;
struct xcb_glx_get_minmax_parameterfv_cookie_t;
struct xcb_glx_get_minmax_parameteriv_cookie_t;
struct xcb_glx_get_query_objectiv_arb_cookie_t;
struct xcb_glx_get_query_objectuiv_arb_reply_t;
struct xcb_glx_query_extensions_string_reply_t;
struct xcb_record_unregister_clients_request_t;
struct xcb_render_composite_glyphs_8_request_t;
struct xcb_render_create_anim_cursor_request_t;
struct xcb_render_query_pict_formats_request_t;
struct xcb_render_set_picture_filter_request_t;
struct xcb_res_query_client_resources_cookie_t;
struct xcb_screensaver_query_version_request_t;
struct xcb_sync_list_system_counters_request_t;
struct xcb_x_print_print_get_context_request_t;
struct xcb_x_print_print_query_screens_reply_t;
struct xcb_x_print_print_query_version_reply_t;
struct xcb_x_print_print_set_context_request_t;
struct xcb_xf86dri_get_drawable_info_request_t;
struct xcb_xfixes_set_gc_clip_region_request_t;
struct xcb_xinerama_get_screen_count_request_t;
struct xcb_xv_query_image_attributes_request_t;
struct xcb_xvmc_list_subpicture_types_cookie_t;
union bfd___79E81F24FDD4E858974D117930D5B80D;
union orl___8DF7BF4CA0F9B4BD4EF006267CE87BBB;
union rip___AFFF135AAACB9FA320A59FAF8451ECA8;
union tsp___E78A65B7E52D74DB905DCAA7AEC02B40;
struct xcb_change_window_attributes_request_t;
struct xcb_glx_are_textures_resident_cookie_t;
struct xcb_glx_get_convolution_filter_reply_t;
struct xcb_glx_get_minmax_parameterfv_reply_t;
struct xcb_glx_get_minmax_parameteriv_reply_t;
struct xcb_glx_get_query_objectiv_arb_reply_t;
struct xcb_glx_get_separable_filter_request_t;
struct xcb_glx_make_context_current_request_t;
struct xcb_list_installed_colormaps_request_t;
struct xcb_randr_screen_change_notify_event_t;
struct xcb_render_create_solid_fill_request_t;
struct xcb_render_query_pict_formats_cookie_t;
struct xcb_res_query_client_resources_reply_t;
struct xcb_screensaver_query_version_cookie_t;
struct xcb_screensaver_select_input_request_t;
struct xcb_sync_list_system_counters_cookie_t;
struct xcb_x_print_print_get_context_cookie_t;
struct xcb_x_print_print_start_page_request_t;
struct xcb_xf86dri_close_connection_request_t;
struct xcb_xf86dri_destroy_drawable_request_t;
struct xcb_xf86dri_get_drawable_info_cookie_t;
struct xcb_xinerama_get_screen_count_cookie_t;
struct xcb_xinerama_get_screen_size_request_t;
struct xcb_xv_query_image_attributes_cookie_t;
struct xcb_xv_query_port_attributes_request_t;
struct xcb_xvmc_list_subpicture_types_reply_t;
struct xcb_change_keyboard_control_request_t;
struct xcb_change_keyboard_mapping_request_t;
struct xcb_composite_query_version_request_t;
struct xcb_glx_are_textures_resident_reply_t;
struct xcb_glx_get_polygon_stipple_request_t;
struct xcb_glx_get_separable_filter_cookie_t;
struct xcb_glx_get_tex_parameterfv_request_t;
struct xcb_glx_get_tex_parameteriv_request_t;
struct xcb_glx_make_context_current_cookie_t;
struct xcb_glx_query_server_string_request_t;
struct xcb_list_installed_colormaps_cookie_t;
struct xcb_randr_set_screen_config_request_t;
struct xcb_record_register_clients_request_t;
struct xcb_render_create_glyph_set_request_t;
struct xcb_render_query_pict_formats_reply_t;
struct xcb_screensaver_query_version_reply_t;
struct xcb_sync_list_system_counters_reply_t;
struct xcb_x_print_print_get_context_reply_t;
struct xcb_x_print_print_start_doc_request_t;
struct xcb_x_print_print_start_job_request_t;
struct xcb_xf86dri_auth_connection_request_t;
struct xcb_xf86dri_create_drawable_request_t;
struct xcb_xf86dri_destroy_context_request_t;
struct xcb_xf86dri_get_device_info_request_t;
struct xcb_xf86dri_get_drawable_info_reply_t;
struct xcb_xf86dri_open_connection_request_t;
struct xcb_xfixes_get_cursor_image_request_t;
struct xcb_xfixes_intersect_region_request_t;
struct xcb_xfixes_translate_region_request_t;
struct xcb_xinerama_get_screen_count_reply_t;
struct xcb_xinerama_get_screen_size_cookie_t;
struct xcb_xv_query_image_attributes_reply_t;
struct xcb_xv_query_port_attributes_cookie_t;
struct xcb_xvmc_destroy_subpicture_request_t;
struct xcb_xvmc_list_surface_types_request_t;
union ____2798575F521600C1E26DD161E22996D8;
union ____933121F4FA1889599F702E16603DBB9F;
struct _XIMPreeditStateNotifyCallbackStruct;
struct xcb_change_pointer_control_request_t;
struct xcb_composite_query_version_cookie_t;
struct xcb_copy_colormap_and_free_request_t;
struct xcb_glx_create_new_context_request_t;
struct xcb_glx_delete_queries_arb_request_t;
struct xcb_glx_destroy_glx_pixmap_request_t;
struct xcb_glx_get_polygon_stipple_cookie_t;
struct xcb_glx_get_separable_filter_reply_t;
struct xcb_glx_get_tex_parameterfv_cookie_t;
struct xcb_glx_get_tex_parameteriv_cookie_t;
struct xcb_glx_get_visual_configs_request_t;
struct xcb_glx_make_context_current_reply_t;
struct xcb_glx_query_server_string_cookie_t;
struct xcb_list_installed_colormaps_reply_t;
struct xcb_randr_set_screen_config_cookie_t;
struct xcb_record_disable_context_request_t;
struct xcb_record_element_header_iterator_t;
struct xcb_render_fill_rectangles_request_t;
struct xcb_screensaver_query_info_request_t;
struct xcb_x_print_create_context_request_t;
struct xcb_x_print_print_end_page_request_t;
struct xcb_xf86dri_auth_connection_cookie_t;
struct xcb_xf86dri_create_context_request_t;
struct xcb_xf86dri_create_drawable_cookie_t;
struct xcb_xf86dri_drm_clip_rect_iterator_t;
struct xcb_xf86dri_get_device_info_cookie_t;
struct xcb_xf86dri_open_connection_cookie_t;
struct xcb_xfixes_change_save_set_request_t;
struct xcb_xfixes_get_cursor_image_cookie_t;
struct xcb_xfixes_get_cursor_name_request_t;
struct xcb_xfixes_set_cursor_name_request_t;
struct xcb_xfixes_subtract_region_request_t;
struct xcb_xinerama_get_screen_size_reply_t;
struct xcb_xinerama_query_screens_request_t;
struct xcb_xinerama_query_version_request_t;
struct xcb_xv_query_port_attributes_reply_t;
struct xcb_xv_select_video_notify_request_t;
struct xcb_xvmc_create_subpicture_request_t;
struct xcb_xvmc_list_surface_types_cookie_t;
struct _FontRenders___FontRenderersElement;
struct _xSecurityAuthorizationRevokedEvent;
struct xcb_composite_query_version_reply_t;
struct xcb_get_window_attributes_request_t;
struct xcb_glx_create_glx_pixmap_request_t;
struct xcb_glx_get_polygon_stipple_reply_t;
struct xcb_glx_get_tex_parameterfv_reply_t;
struct xcb_glx_get_tex_parameteriv_reply_t;
struct xcb_glx_get_visual_configs_cookie_t;
struct xcb_glx_query_server_string_reply_t;
struct xcb_randr_get_screen_info_request_t;
struct xcb_randr_set_screen_config_reply_t;
struct xcb_record_create_context_request_t;
struct xcb_record_enable_context_request_t;
struct xcb_render_animcursorelt_iterator_t;
struct xcb_render_change_picture_request_t;
struct xcb_render_create_picture_request_t;
struct xcb_render_free_glyph_set_request_t;
struct xcb_screensaver_query_info_cookie_t;
struct xcb_translate_coordinates_request_t;
struct xcb_x_print_attribut_notify_event_t;
struct xcb_x_print_print_end_doc_request_t;
struct xcb_x_print_print_end_job_request_t;
struct xcb_xc_misc_get_xid_range_request_t;
struct xcb_xf86dri_auth_connection_reply_t;
struct xcb_xf86dri_create_context_cookie_t;
struct xcb_xf86dri_create_drawable_reply_t;
struct xcb_xf86dri_get_device_info_reply_t;
struct xcb_xf86dri_open_connection_reply_t;
struct xcb_xf86dri_query_version_request_t;
struct xcb_xfixes_destroy_region_request_t;
struct xcb_xfixes_get_cursor_image_reply_t;
struct xcb_xfixes_get_cursor_name_cookie_t;
struct xcb_xfixes_region_extents_request_t;
struct xcb_xfixes_selection_notify_event_t;
struct xcb_xinerama_query_screens_cookie_t;
struct xcb_xinerama_query_version_cookie_t;
struct xcb_xinerama_screen_info_iterator_t;
struct xcb_xv_get_port_attribute_request_t;
struct xcb_xv_image_format_info_iterator_t;
struct xcb_xv_list_image_formats_request_t;
struct xcb_xv_select_port_notify_request_t;
struct xcb_xv_set_port_attribute_request_t;
struct xcb_xvmc_create_subpicture_cookie_t;
struct xcb_xvmc_list_surface_types_reply_t;
struct _XIMStringConversionCallbackStruct;
struct xcb_client_message_data_iterator_t;
struct xcb_damage_query_version_request_t;
struct xcb_get_keyboard_control_request_t;
struct xcb_get_keyboard_mapping_request_t;
struct xcb_get_modifier_mapping_request_t;
struct xcb_get_window_attributes_cookie_t;
struct xcb_glx_get_pixel_mapuiv_request_t;
struct xcb_glx_get_pixel_mapusv_request_t;
struct xcb_glx_get_visual_configs_reply_t;
struct xcb_list_fonts_with_info_request_t;
struct xcb_randr_get_screen_info_cookie_t;
struct xcb_randr_refresh_rates_iterator_t;
struct xcb_record_enable_context_cookie_t;
struct xcb_record_query_version_request_t;
struct xcb_render_create_cursor_request_t;
struct xcb_render_directformat_iterator_t;
struct xcb_render_pictforminfo_iterator_t;
struct xcb_render_query_filters_request_t;
struct xcb_render_query_version_request_t;
struct xcb_screensaver_query_info_reply_t;
struct xcb_set_modifier_mapping_request_t;
struct xcb_shape_get_rectangles_request_t;
struct xcb_shape_input_selected_request_t;
struct xcb_sync_destroy_counter_request_t;
struct xcb_translate_coordinates_cookie_t;
struct xcb_xc_misc_get_xid_list_request_t;
struct xcb_xc_misc_get_xid_range_cookie_t;
struct xcb_xf86dri_create_context_reply_t;
struct xcb_xf86dri_query_version_cookie_t;
struct xcb_xfixes_change_cursor_request_t;
struct xcb_xfixes_create_region_request_t;
struct xcb_xfixes_expand_region_request_t;
struct xcb_xfixes_get_cursor_name_reply_t;
struct xcb_xfixes_invert_region_request_t;
struct xcb_xfixes_query_version_request_t;
struct xcb_xinerama_query_screens_reply_t;
struct xcb_xinerama_query_version_reply_t;
struct xcb_xv_get_port_attribute_cookie_t;
struct xcb_xv_list_image_formats_cookie_t;
struct xcb_xvmc_create_subpicture_reply_t;
struct xcb_xvmc_destroy_context_request_t;
struct xcb_xvmc_destroy_surface_request_t;
struct _003ED5EBE9EDC5550508A3829E164254;
struct _00580D67DBBDE0DF5EC3B468D69A2E22;
struct _00F641E758640FAA883D4195ED0EFEE3;
struct _0118C954C4C10A412A94DFE5F40A710D;
struct _0127D00A1E42427D1F922D6E02BD29BF;
struct _014A104DDA4E37509806F389081D67BC;
struct _017021331B1CD62A1DE3CFBDC78C43A7;
struct _01738E5109BD63F41ECBFCFB577D1A78;
struct _0187150EB0144696EE5998F276804071;
struct _019B8CCB864AFF4771EC3D9E3020C8B5;
struct _019CECDD6753AAB6598130682127E88A;
struct _01C1C9E3C017E38AF79D67403D653E7E;
struct _01D78593398EF5D4C7B0D882F4AC2769;
struct _01F58A4EF10D36C3A582DC7631AF8C2B;
struct _0246488962F6181E546D6EAF3BC67956;
struct _02952D74399316BEFD2BE4AE2D13875D;
struct _02B7C110B96F422043FD747664A5A945;
struct _031200335061428091E44434635CEF4A;
struct _033A15DA152AF22304FBDDC054A7A035;
struct _0340F183E3D57BA98D278D6E8F4BBAEC;
struct _038B891F4881F16F541AE58F6D49FAEC;
struct _03C803DDC9061B143F519D4D73BD5571;
struct _048EDDC221AC6C2316AA6C5DA748547D;
struct _0490893E281F28CD04BB03B56188F30F;
struct _04D0ADC31935FE4C3A858C08EAEE2E45;
struct _04E4DAE4A3CDECE9860BD3B57B108BDE;
struct _050D667D91EB5E6EF621582721732C5C;
struct _0566ABB5D656E83D377732EE088CAE2E;
struct _0633EDD3133237A2FCFD0D477CC3F2C1;
struct _06385DA08CE18FAF207AB6F3372C4AC2;
struct _06742EBB9865A0CB782C1FF729D99154;
struct _069CA722659D31B5E21E1ACEADA10473;
struct _0702AFAE85E523028461380896C86760;
struct _0733D28D39B544C0D1FF9AB5A89F168E;
struct _07A0BBE0F3D6D0E97B5A30869B6D39C4;
struct _07B36B105D1522E7FC3538405AC1EE4D;
struct _07EFE3D70871BDBDCA74D2E21165F647;
struct _0822494CA8335A3B81E4FAC70FD7E6A7;
struct _085FAF82344F726CA3F577D24DE6B299;
struct _087D3754357485F048BF88A6E8C427F7;
struct _0894F55B6F728822A381396F6EE8B24B;
struct _089D19AFE35A3BB9549C0E2B9D96DA0E;
struct _091A8121C3C792D8858188DBB434C01C;
struct _091D8C0512871595A9DC831969F12B34;
struct _091E54628E296745C34C39E0F9BDAA79;
struct _092DD72AC6B9BBA1C79AF097B6F8E844;
struct _0938F46EF6BF1A288D23C461D10040B7;
struct _095E6FF95FC66C44DDF436071BD80AA6;
struct _09E69E0556021A33BB43607C87C36B45;
struct _0A132E968BCCC0DBF60AFD92D1AD913D;
struct _0A270F69B196F9EFA6F2CD4624EE5655;
struct _0A53A945C8DD0EF6031AEFE0D9D194A2;
struct _0A710E56E462CA6F472C6BEF95652ED5;
struct _0B4ED8A417FCECA210AD3881277BFA25;
struct _0B57ACDB47B389BE1AB4C5797C92E9F4;
struct _0B741672733CFD1AAF50D1A5E3ACE892;
struct _0BD8AAF00E5AD5D601EEE168306C4453;
struct _0BD9B7EE8D8D1BFD7DE9A4EB5AE97DA4;
struct _0BFF5F3619172B7B9D3CD50426ED3418;
struct _0C1A989C237847E9E0FEF5D20B714342;
struct _0C21A611EFF1A0A24872DDA75B66705A;
struct _0C41D669CC7829CF12B135747142967F;
struct _0C4B847EA89D426433C47107E0756204;
struct _0C5B3DDBD9AAB3637C3C3A1D41E42158;
struct _0C717C2A96F31E63806E7AEC00F2A098;
struct _0CA5FB17303BD72ED823DD36CD7B7A7D;
struct _0CBB5A6AED43B7843759DE8BFE16890A;
struct _0CCE02F838D9CC63825202C012B6DAD4;
struct _0D0114D795552F54A79F202DB3226B55;
struct _0D158C80ECE88D73A8DF0C6BE4079214;
struct _0D1FFF2FD08E009A212466AD439E256D;
struct _0D364CBB4DE5622667695AC90920144B;
struct _0DA2860FA9A69F203063D0028C53EA56;
struct _0DEEDF24E65D3751BB6E7763FD103A13;
union _0E48C489052D3F6994034E9D4DCBE034;
struct _0E536A4A735E73BADC27E9D377D18348;
struct _0E6A401F8BD845D438E717B135D77D29;
struct _0E70E9A2AD7D0637C6C018491CDB8CD9;
struct _0E8A98C555F38355A2FCB8E6352B37F5;
struct _0F2B39C4889BFBA0BBC9C66D38A1F5D3;
struct _0F3578149035D0CDE8FE9154071A721D;
struct _0F4B06D36BC906735A699C1D59FCE038;
struct _0F63C52D50F31C01632B7951AEFCA4FD;
struct _0FC95954E9672604C2E419500968ACC1;
struct _100578E431449C3F6D027CA87AB6407A;
struct _10184D3025615BB97A779285FBA6EAF5;
struct _101ED56796A31C5C092EFC61C0F81522;
struct _103FEF2231D5EFB91E1851DC5DE2406C;
struct _10993F2E9F3172E576B70C41387B5624;
struct _10BF8BFF208FC04E48FB9712D25FCBB7;
struct _113ADE3249D8CE9145901B23810AE272;
struct _11C917A64EBBC5D03EC5A08E1FB0008D;
struct _11DD07E0BD355014207FDEFC87674481;
struct _1206FECF9ACD3192A71AF1264343EAEE;
union _12139D15327A66BC6BD2CA276E233382;
struct _1216BD7A426656BEB445C7268BAB0AB9;
struct _121BB16CF18BA8DCF6DED8D25AA283B5;
struct _12883A0710B467FBB4742064A9BE69DF;
struct _1296C23E7EDA709A08D87BF116515624;
struct _12C70FB380D888247B65F57E99B647A7;
struct _12CB43F8B5E82306BEFC9B5BEF52A53F;
struct _1309DA1401AD871232334AF15910FB3C;
struct _1318B99C26BF9CA63A0C21B938052883;
struct _13470DA4B6A7AAE8ACC864F70C5FF73E;
struct _13745364EEA695BC65B7D4AAC1B24515;
struct _13C78DD7EDF1CF1C4AE9B0D54E891AA2;
struct _1463B1446DFC3BE3591F88FAF0B4315C;
struct _149F28F052847359C6CBD46BA265755A;
struct _14A823895445B846828F3D4F9D47C3C9;
struct _14C4DC63A35B6E2FD67711EA9BA1C1B3;
struct _150405F9C54B0D4890F2C395186D419E;
struct _15146D0240F64972E1BB855D6E1C4620;
struct _15A7CADFA0C3B6AF2858DE2248F61F64;
struct _160641F2D897670075418D2E6B733231;
struct _160BFFB979B4E4E895FB2627A5A1E75F;
struct _1647B670B91D8E45F62891AE6C005714;
struct _1669416059A592B0B468DB2A6FC4CAE8;
struct _16B3D492BF50C8DE24893282FFCDBBF0;
struct _16CFC57C4AEAAC7816B638D66FDFD80A;
struct _176B59BEDA9B70C3FEBB155A23358FC4;
struct _1801593F65176DF1DA4677E119FA0B5C;
struct _194914D9D4C0AE9A8FC55BCBB00ED166;
struct _196A900E1F8FC6D65F3C04EA8B9471C8;
struct _19819260117A2122793EF6A7F838A8D8;
struct _19958847318214F780EFE5EAB3B1A0C9;
struct _19DEE1C64F7EC3DDB040A3404BEC0D9F;
struct _1A16B277A945B8F62DE8883A2D91AFD9;
struct _1A68CE477B37BE31DCB043B6F4664E49;
struct _1AA7F1335C4C6CFF07A82EACE5F12A97;
struct _1ACEBBD1BA76D1519A3D809460AEA55C;
struct _1AFD2E0C6FFD3A342E1E54CFD5D94B7E;
struct _1B380CA5B169C2B25F5DE0AF08CB7E59;
struct _1B5F367B5963C48BD3F34F9922AB12D3;
struct _1BB85DE3512B339811D8B67FC16B212D;
struct _1BDC7C7F49C92F644328BBE26F29D5DE;
struct _1BE3EF8FAEFD838E59DA61E46CB3832E;
union _1C4035FDEAFFF0FCE26E66A96F6BBEB4;
struct _1C5B76C096BE4E4273B6A3EEC40CE50E;
struct _1C8B88A4B2A3D81E79624372BB131558;
struct _1C989109A1E2AFEC30347169F1D74F63;
struct _1CFFE104D7DFB51E74C0A01BE327DA92;
struct _1D1C51FD6E0EDC1C8CC0D22E01FA7C4E;
struct _1D4F7230B22579A4FD715C0E003DAA6E;
struct _1D94229A8023420ECF1EF35EE55259C6;
struct _1DA914B8AB142FCB959C2D9AF0891F55;
struct _1DD0730E73CA0CCE248C91CD23CFA17D;
struct _1DEEF64472AA4AF2F540A924A55E576B;
struct _1E0D006DA5A3AB615AC2957B38222DF2;
struct _1E2A6A9B5EC919B5C597AB6887935210;
struct _1E42E411FAE309B90570872BD6DA89F0;
struct _1E4927A029C92C0FD595CCC76CE8B139;
struct _1E68C84E6BE3B673D767CBEC47B3DECA;
struct _1EA155DB59F5BD48931EE1812AEA4515;
struct _1F0742A31307BC27E4EE3AB33F15E494;
struct _1F1AC3FACFBF0931A43D0CD999C4D927;
struct _1FC3FDECD71C050414C1CECD38620FB8;
struct _1FC9C4745BFE4A4C45A6D008A791D581;
struct _1FE64A7A0C6AD5F0405EA84ACD580761;
struct _20372CCC7895932BACE6325FD7981C66;
struct _2155392EAF78816288DE33777AAC4297;
struct _216A9F1C1CB18296D79DECC5D8B8E2C3;
struct _2178B426BC8C8AE0F5D29E93EB059F03;
struct _21AD2773B4EF3639ECA7EA03A86E1290;
struct _21E1A9CAE728A96D553CF326E63FACDD;
struct _21F387D49C351711E6B876CB6DA7584F;
struct _221FB40353091864D31474CD79EAAEF6;
struct _225FD46B7233514BB6E78EAEDC113C23;
struct _23254339BB91F737308FB37B0328931B;
struct _23528D99DB311AE570394A3CCFCAFAB2;
struct _23589243830CB3BE7E2EA4E046E5A332;
struct _236D87147CED486A0AF93ED3996AECBD;
struct _23D39CEB96D177F7D0B7BFAD0D72AB23;
struct _2427DE1D26AE87CC436F1C07EF51166C;
struct _242BB1C523CD001B2A53A1A084DAE0C6;
struct _246DDDA2B420E716CCF540DCDA3D282B;
struct _24A706A694346F4C39DF8A9ADF3DF2AA;
struct _24BF153529F05C45F0A0621575016FCA;
struct _24D066745D16D85385206417A709F2D6;
struct _24F12A37FE1D1AEA7948B3C7A0452456;
struct _252B149599A3B883D834EF1777AA3852;
struct _256B6D485D886C7434E6D059DF9BE864;
struct _25D6574E7038479B9CA0BC4071594788;
struct _26934E13CB11D4E3DDD70D95266A4A57;
struct _2696F812B3705C744CB9A8772F005405;
struct _26A9D8D4FC2ED17163FA6119A25D6DBF;
struct _27480D859758915FF7183925E59D9D13;
struct _276527E852EBD04F842021527F4FA45F;
struct _27AC02CFF97A742F93959B98FA171589;
struct _27D11525F5373DBAD314D9C96183D582;
struct _28142D6A19F8031FDF6344CC69CB9532;
struct _28183F13DB7442E77993ED2BEDDC9E43;
struct _281923904974B9915ABD548A82CFE427;
struct _28432349E9E6DB3D22D342B43F161279;
struct _286A111ACEDB435E271A47289B65D34E;
struct _2881F4C235E25C1F32ED86388B1D309E;
struct _28AFE566BB5B37E66F132F7FE54BDDCF;
struct _292923DDD4ED46EE83D974C820DC3932;
struct _29C593C589279C3E7D511580F3E78129;
struct _29CF6037BDB08BCCAAEBB0F049E81934;
struct _29DBA087DFE16744A29CB8F8CD68D43B;
struct _2A2BB2E6A1A637B547E2DF81ADC3376A;
struct _2A4C46EAAE865C05377B30846399D3D1;
struct _2A4E2A3E6DCC7FD4DDF34506A216CCE0;
struct _2A5F331BE8D13DBE7F0EFE2DE0745FC4;
struct _2A73BF0E4CA9808D683BEEEFEEB2900C;
struct _2A859DA02CD5E3593B5918B42FA7FFEB;
struct _2AC87F894EE3258143DDE890FCFACB0D;
struct _2AE07F4A994C5FC6C65BC46898F1D740;
struct _2B0C7BC237EA785081DC8BB3BF49058B;
struct _2B2D277CB94E3786AC978CB982FDCC47;
struct _2B57C510C3935D29053A101D8FCA0A7C;
struct _2C268D9809C6E9DE2B818A0BB7518C2E;
struct _2C303F742F1AA0AC713FA8EB1EC01C89;
struct _2C727585251F722E1CFA636B2B0D134C;
struct _2CBA644A081B49363F2046758E32CF0D;
struct _2D59FDEE4261500A2FE9AC0FF5270F5C;
struct _2D6D05448839E8D39EF22D0A7A7B9E49;
struct _2D810D1D3161CD7717A7A7CB85DAD1D6;
struct _2DDFDD5DD8CD88FDBBE41C4BA29EE9C7;
struct _2DE9659B7EEC2253521CC6BF2372B999;
struct _2E0E2C12F04118C9E52BAE749EE378FF;
struct _2E22270806C47E05D9B4938893A6CA7A;
struct _2E55BACA418C7D9DC01173D7FC9AB491;
struct _2E56E956F88F593FE24676E86AAE3518;
struct _2E67F07AE07052B8E2E5530980B63AB8;
struct _2E772061F36030946C15A90398CEA89B;
struct _2E963936DF2C8EEC00CED466180278DB;
struct _2EA2656FD07E452BFC8A303BAC941F0E;
struct _2EA2B750C06C2344CAE427A9270EC33C;
struct _2FA8933AB233BEF1F551184322DF3360;
struct _2FC2A6BC4D5C4BA98ABB1F848EBDDDCB;
struct _2FC37C12F50461D7B99376C23209E757;
struct _31065A595C2624CF17F23189AD470066;
struct _31724D647FFD3CAE2535F1783448B15A;
struct _31DC1A9A30C8BE83503485AFF4563DAB;
struct _3208E1BA8126707DC1A488F29A0DED72;
struct _322E4D740D2A723112F8227414848916;
struct _32330425E7850E17C6A7DFCDBBE04D6C;
struct _32453B3EC12C1083BBBEA47A258ADABA;
struct _326076F7099E6F08FACB2F19F051A23E;
struct _32814486483B74398EA3D6D6C36E06C2;
struct _32EEA813D9DAD40A14F6989D3C5227A8;
struct _335EDB02744B103283B800FF919FC940;
struct _3369594E17BD6DC3517892D04DD0216E;
struct _338644C2278094D31E58DDA0CC7454C7;
struct _338A332AC07B59A36792FEE160C5A511;
struct _33AF8112BACFF99F66629433CE03587D;
struct _33E0BD21BC9E25CB376AFEED9A297D0A;
struct _33EF72D568008DEC7E31A16B28F183D9;
struct _345FECB84F456AF148A04283FEB93B5B;
struct _34681C3D6FB58953006C9844DC50C14F;
struct _346B3FD68C26438FA8B69D57DEBF0D40;
struct _34E3615AA1F5E404F43F7626305BA1D6;
struct _3508950B7FC9B81EB4123657631043D2;
struct _350BC2B23F9B41AFEB7D1AE3E404670A;
struct _355FFBAADB08B4CAA5BBFAF829DED10A;
struct _3578C73785DC808474EBF8D1E351F2D3;
struct _35F39AB974A221D257EE41BCA2E719FF;
struct _368A13762F027E92E1CC17A526B41AA7;
struct _36DE37CB51FE5E11DEB44C8315B704E8;
struct _36DEF595F1A226E1F4FE3B5A16E1057B;
struct _37A9DB4B311662424B6FA129E06762F1;
struct _37BE2491590EE7EB76B44447C3CB76CA;
struct _37CF6FD3D8604C440825361FBCF768B5;
struct _389F741C4688F992C1DDC28AB9B68F46;
struct _38AB55CADF3218184FF2A828A7079C62;
struct _38BC431CF83E096863532D796A6E7F77;
struct _394027BAA9AA8E82816E9F77F29CC265;
struct _395B269B2EB9353EDAC9E4036758953F;
struct _3982B52BB2F6F242AE0CDAAD29A77640;
struct _39A4136BB030D7809586100094537552;
struct _3A28C96D52FB29F9635C6203D2891B70;
struct _3A8E116D72DF0C8D49D51593D925AF55;
struct _3ACF1F82BEC6DEE83FE33E625399BBD7;
struct _3AD473A9924D2058FA4FA6E47C9E79DE;
struct _3AD660D2DE6692ED5D5F4CBA114AA277;
struct _3B00234C5998E2ECB70FFF97A8C8B026;
struct _3B46E2BF73F463FD420C5BF273406D17;
struct _3B80496DCDE561EAC81E803683D00588;
struct _3B81704CAFF80915670BCDC93E5E5502;
struct _3B895FF4AB049C141C5F7C25E8036379;
struct _3BE679DC1FFA371624A790DBC1F4853A;
struct _3BEEF239534EE9E2D4AD58999E56F197;
struct _3C4960FCBBDB3233211578F053843777;
struct _3C4C38FC10522588E30AD31A846C8E7D;
struct _3C663E68C00512772EEEF9594AC2C00F;
struct _3C68DE36615A2A96935F4E8A62136411;
struct _3D2747B906FBDDB46B196214774699C1;
struct _3D278926CADFDD0A67AC279ACD531B59;
struct _3D6C9E6FC2A1930EF06F70ECE24ED2E6;
struct _3DA4CDB67EF3124D6BB6A4128B3FCD7C;
struct _3DAB27C0C642F6AD6A1592659EA9CCF3;
struct _3DC652DCB514310A717FA1C1FDE5369A;
struct _3DC7B7400B12314EE6EFE34533277AB7;
struct _3DD3CD96FAD56E1211E0F63114C705EF;
struct _3DDB46D984C469553E00D9B3BEA3349C;
struct _3E0CB53261D6AD0D2D8FF0EEA54E5912;
struct _3E18A7AAF5D17F3F11EB968C0A78AED4;
struct _3E53CB2ED1FED691C94CE793AD197BA2;
struct _3E5DE56775B94BA308AA7A6C3C30E39A;
struct _3E84D1386F10E26A4E3E4F22FDD3C8B8;
struct _3EBE077DD2A684AF0A86C02ED2B61EB1;
struct _3F2E090B53825C071BE42E5C77B221DD;
struct _3FC3C3386C6C3548296DFC9EB081B6FE;
struct _403017519C186A112CAA8988372FD914;
struct _408ECFFBDBCCAB2F4BE7BF225F1A7284;
struct _419D850E958B0F42F8B9D5E0BB3E2ED8;
struct _425D596FFB295BDC9ECE8B5455A7138C;
struct _42F676846640B939B65BF8A961B681A1;
struct _431023746282E83C34446CE1DCC859AA;
struct _431497C136870E9873948068EF0F03D8;
struct _4351FBF019520AA1BFC0E4306B612802;
struct _4361408BED2235647FC2AC23AD3C77FE;
struct _447FC71AB694A71F5F8338F97A6324BE;
struct _44840292B0FD4432816E14C2BB6B9957;
struct _4489EB38A238A95680D8722B994EE839;
struct _44921DDD4632BD4A3848A6F76E5AB5A7;
struct _4496CBA88907C11C6361D9179E75F570;
struct _44989FB912D962B2DEA21D74F6F43DAE;
struct _44DBA8761062EA5D0E0445C058A5F0FB;
struct _44E50AEC2878F8A6376C06FA64195504;
struct _44FE0B4DD8D897C404C5F698855C1F5D;
struct _45331FD382D3B76DE50383933A2C35C9;
struct _4543C93AEA47F6ED8C90F8F964657E96;
struct _45BD469DC424D3F368EE6E10DDB8D8EE;
struct _45DCCDFC0525EE913BAEBC241F6FB2DF;
struct _46547E058388880E40CCFC83289F8447;
struct _4664B325D7B1C568276997F8FB024EC2;
struct _46E98DFFB043B27551402CF21DCA7EF9;
struct _470449F8043B0E95436C3AE3811CEA11;
struct _4742A0942DABEB0EF5B18B5595A3D286;
struct _477257A9E00A927C5CA4C8DCAD23E65C;
struct _4788A0C65CEF1424AE2DE816674E1913;
struct _4856EFEBDD7E53CA21A9CBFC75FEF206;
struct _4861D9BFE2A7E5E384D09A595EEA31C4;
struct _488EF114463850BAC9987E879A5DF652;
struct _488FF45B2B0EF525AA1AD13B1739492B;
struct _48974C792553FBFA318CEC22C625F222;
struct _48A6A373861130075F8524D5C353FEE6;
struct _49A9C69F1FAAE36175A766361397A248;
struct _49E0976F54CAA6C31E6EB46E11375E9B;
struct _4A5D5D546E7D786034D6559D1E5FBE4A;
struct _4A647C60455AE07B29957B156A9865A4;
struct _4B29FBEAFEB74D66435D912679576990;
struct _4C0A166D0FCB5B830093FB9F7D7DFC34;
struct _4C17583A42DA2A5F9B3C30D47F076D0A;
struct _4C25F4CCE77EB8ED613895749E258BA8;
struct _4C33C3844275DD1394D2B5937B049BB9;
struct _4C65BE1067297C4FADB11C7C25C29C00;
struct _4C6601BAE3B7FB7226E40FC6ABCCD221;
struct _4CEF0DA0B6BB912CC29F60746948E744;
struct _4D0B2EE74E9FAFCBF56BDC59F25A7FDB;
struct _4D2E0013E954DA651F15636ABC395F09;
struct _4D3786CE601BCE38E7C1926A41A4FA0B;
struct _4D6107A0E0A129C018412AC817ADC559;
struct _4D69B6347F056FE268056727CEA155AA;
struct _4D6CF402BE6604EF49AB6A1F1F900B99;
struct _4DAB985EC804DF06DE833983110A4312;
struct _4DBA840A262C58E6AC422C7E2FFFF3EA;
struct _4DCAC2088B3F168EF4BFBCEA383ECFD2;
struct _4E230DA965C384CCE937FCE2A8CE1FCC;
struct _4E2DFB9F6290197309D31FB10928FA58;
struct _4E3F1E4C1E1A83481E83EC5617B4D6E4;
struct _4E404080472975271550CB06928F4DCD;
struct _4E7073A36C65C782742204589C7C453B;
struct _4E78C26E658CAF0AD1368496874A57C9;
struct _4E8A4C7FC2C9452EEDB2A455AEE467A8;
struct _4F05924539240263F877D05CF063C89B;
struct _4F622AD2F1F50F32A9A86AA5D4320B7D;
struct _4FA264C19AF857256A85E546E5BB1960;
struct _4FA67FD0121DE61C8BBE74D0ECEE2878;
struct _4FB432CAED1F3912A0288EBA807D24E6;
struct _4FE7A0243530ED5D54F44C34328C369B;
struct _4FFA9527088137D66D8D180D61C68358;
struct _5017C5E321C1F8BFCB8C657324B6EA8C;
struct _5076863A126F636DF3EACFE42235765C;
struct _509170DB936076954425573DA84CBC0B;
struct _50D2B38DA8D5F7F9D092D3B0069535E8;
struct _50E42323027751282F1104957020037E;
struct _51727A972DDFA83BAA2CC416714856EF;
struct _518F0DEC427BFC57A6F8B4A0E681A1CE;
struct _51FA9807B1251E8577C033ECC63EDB35;
struct _522CF4EE19F54DFCAFCA34FCD3871800;
struct _523CE37B1F7AC95341854764E619AB82;
struct _528C256D64E70EF258C44321FAFFDA35;
struct _52CB3FFAB7580FFF5F815C5CB2D8B1B5;
struct _52CBE65B67561D76877705E9E11130C9;
struct _53299512E10B7C26B66BF0D6C299D662;
struct _53901533A28EEBC402C56245C1C7891C;
struct _53996C97E395EF20FC508697C3EEF92C;
struct _53A84E5818A8BF56A6CBC41177A9FFE2;
struct _53B2C5E872CF4691EFE90F887D66B7FD;
struct _54527827121C21F3031526454FE9C7A8;
struct _546FDEDFB3946C28A5792DCE2825D685;
struct _54B79DB8E4CBEE2C88E3D67FC733EBBD;
struct _54EF5FF687867CC801B0E66E7A862080;
struct _552480BDAF941CC5E2D5D2221F90C259;
struct _555515E43BC9CF64AF390C3AB1002B52;
struct _55878F909A460D750597EA530E338969;
struct _5588D47BF677798F0DBD9E168C93317B;
struct _55D1EED960AB10AAD38BEA1E9F59F1B6;
struct _55F7F426FEFBA4DDF34FBEE0D54465AF;
struct _560A03400C719BC685F99AA3989F50DD;
struct _56236F995320E9550D01648098F1E75E;
struct _56876A3CF1ED32735E0999A0D66A4738;
union _569A3EBE48D59AD86C5994BFEDBCF6F2;
struct _56F965C4CB1B37CA1C9344E914749FD8;
struct _5763F2EC7349805D26B2ED34581CC2B6;
struct _57642C20A930BC40CC56BFA51EFC45F8;
struct _57E6A23A76D16D83EF023BCC9C7B7628;
struct _58058F4C4926147A1BF935BBE1E04307;
struct _582D8074D4EFCBB1785B13940ECA4EF6;
struct _582DBE3FFCEAF5F2BDC86CE4805EFD64;
struct _5839BF3C468A8421CDCDB8829E3FB660;
struct _58C3F68DE6E766EC315A68C29D87018F;
struct _5A262504CED8592D77CD10ACA44C3AD1;
struct _5AD267705BD8B4B0926875A73B385ABE;
struct _5ADACAF53662BBE439937D75EA2CC10F;
struct _5B111F5C4E48B86FA81A443B3B21CC9D;
struct _5B7C9E3DC72B13D6EDED508B1DAEEFE9;
struct _5BB888AFAE3DA1AF86E88EEDAEBE9855;
struct _5C0647BB1A627D9926272DE9A3EB3DF9;
struct _5C0DD3C4E70CCCC9965B24A6BE5ED8FB;
struct _5C2B60FA26E73A1BF39A96E97412C65C;
struct _5C358F5DC2F4F58C756854976C7F2ED0;
struct _5C360CD6F7BDFED17568144DDDEE5A5E;
struct _5C41C718BCBFD6CC2A68DF59D547D717;
struct _5C7A236BA0562DB05D77CA85FA8CD202;
struct _5C8033F90A64FC4676BFB935617D1B44;
struct _5CD0DDA75FC8A64FD62E45433429A157;
struct _5CD4A96D42C01A4BC625F6F1B381D291;
struct _5CF04B6421DF2D20D24DDD28F16D3C2A;
struct _5CFC2639D93A82964D22ABF82B05BF7F;
struct _5D6EFF7AE4955960C2AFFE32FE5051B9;
struct _5DA0449935C160E6A1371B1AEC9BA1E2;
struct _5DD49376C74765CB7E96286DDB46181E;
struct _5E29C5FF94304EAD83140C47151323A4;
struct _5E5FECD46FC629FFA3831CFFFA8A0613;
struct _5E771194B47AF17C9267085CABF953C3;
struct _5E8F645B7662834A694E868B27EBBB24;
struct _5EC50BA61A7AE0BB02D4340472A7D806;
struct _5EC6E86656B6684A0C8370E4CB53DCE1;
struct _5ED203E6BF1B06D8F06879722F6B66D4;
struct _5EDD4B4F882E321F07D8AFF023DDDD7D;
struct _5F0218706A29D3B501048FD21A470406;
struct _5F1426FF167D9E06CE7F137AEA610D0C;
struct _5F5D7BEDB023FB83B7B8ABC973A4716F;
struct _5F6963A5B3CCD1D3B53748FF8C021BB0;
struct _5FA790A5D3D6F59615AEC79DB4A09862;
struct _5FD5198515091F6F9684846B8D2DAFFB;
struct _604D81E4FA484317851D2FA1962E3052;
struct _609755D20E77E328DB0AAE27327A3AE9;
struct _60FD28E41E68D30D206D9EC072DAC7C8;
struct _6103EF8F75D1B3E3CA9BBD68F760DEDF;
struct _6105F69743B5F4DC3D2725A2474E8E7A;
struct _612E07375E3857AAAD72ABB386C90011;
struct _612EFEAF23CFF8A46AC5C5A26952ECB6;
struct _6136D91980F3ED417B16959F6289782F;
struct _613E1A502E66CA56B68C37497F252C25;
struct _616DFE8EE921B679729534094133FEFF;
struct _618D74B62491482EAF0B43D47E77026B;
struct _61B607A2274ED5109A268B0B2173104D;
struct _61E3B0A33819AD8DAE0C4234C1987B22;
struct _621D16500987A711CC39A0AD4484DBF8;
struct _624041EF38A3D722ECC431A5F82DF930;
struct _625B72EC204AD184FA367A67F4C8645C;
struct _625DD72E42D2E4120693244DFAAD3348;
struct _62E4225A05F3FA192F1EADC1962F3FA7;
struct _6313E54CC161B7E5C4F7C30B4DF21654;
struct _636E06EF14FC653C9FA755BCE21D4A3F;
struct _63BD57EE9DEAF718631DB9386FA8EB5E;
struct _64419251F3172C7227A52AC30EAD3C9D;
struct _647E6F6FB5E1F7CA7AC59F3987F53CE2;
struct _648B167E5FE8430EFE8E72D1CD79C82D;
struct _648D5B97A5A1D2D2729A4C51B6643734;
struct _64992689D90D12C17DC9EE3D4AA6EC53;
struct _64A10EE371E893EA59638110B65879C5;
struct _6532AF44D7211C2B9106181412036892;
struct _65A7BC70F11250CC66A1AAC499DD4DF0;
struct _65CC1628E84FE837888FBDC426B5411E;
struct _665F1ADE1952A58E13B5D78D0B8A3255;
struct _666210E100F3CB5D4A75782C69E711A8;
struct _67223C7576264C1E3F5454254FA2FCB7;
struct _673344A079D566E8DA83CACA09ADE8E3;
struct _67409BAD9025072768D801439602E625;
struct _67BA815F7CB0308CE8EF90A300D23A50;
struct _67E052DBE3D4216490A6D8B2745BB149;
struct _67EB8B73AFD8C3C32B210944A0EE6A33;
struct _6891B45CD5C184FEB200E38CDC4FE1A6;
struct _68DA40E4D3A1CB1C47D4FE5C47C475EF;
struct _68EFEC536F03412D58850C40CDE6BAE5;
struct _68F8387BCBDA9BD2024BB43F6B7187C6;
struct _691123D744001B8BE68B84780CEE447C;
struct _694E7AF0BC9EE95CDB6E54249E923D7E;
struct _6954A090FF674864C2EF0B367DFBE910;
struct _697B32D3B5D3093ACC810617F93D908A;
struct _6999C5F45A7509ACAEE4435BC7D6BE11;
struct _69EBDB3A774B1AFC7F282884D9B780FC;
struct _6AA03524D3DE094A4520E6B853ADD0D3;
struct _6B1106A64659663BF4BA9950E3F10E4F;
struct _6B16D0CDF8A6D24951AF7FC52FCEB99B;
struct _6B1E97362D63C40B98094F056DF5AEF5;
struct _6B73A3115BC6C5DB52FFBC029452666C;
struct _6B88FAC29A9971BB7647F24C04F63FBE;
struct _6B8E614C81B948CB69ED41556D403C37;
struct _6B919F4E06D00F382C9963DC471D0B48;
struct _6BA9BAD34CD581FCA2A7610248080448;
struct _6BBDD4222850636FE766E2CAFC28CB09;
struct _6BC30673BAC263332B5478E8764DF6F2;
struct _6C0DBE15692AB0301FA41806B271F811;
struct _6C157D281FCCF3AD18E5920BAFADC6E6;
struct _6C34763ADB9205A5E9B577107C4B0C36;
struct _6C3EB73958973EBDA54A91099DFB92F6;
struct _6C531080E0330861B126A2833D727845;
struct _6C8DA88AE0F795AA91A7651F5464995D;
struct _6CDBBC56673808DBC2DA2091B1C251E0;
struct _6D6F1B3E2508C3E8FAF2245CB1C669E1;
union _6DF3DE276417BF858702C9AB9AD460CB;
struct _6E58DE7E5977316D543695706C282257;
struct _6E603A4D6E053F4C38E194015FCDFC50;
struct _6EB75DCF57D6784EE27228E47E167564;
struct _6ECA53571B8FCC125A3088582131FB6E;
struct _6ECE5F7C46F37A2EF909042FBC6F3E21;
struct _6F8FCF8121BD236ABFC6904166324F66;
struct _6FB552EA524F38554FA8528F506D34FD;
struct _6FD63CF3083337BDDDDD931C730A9E68;
struct _701DEBC035A327D9CE136C2F446BD60C;
struct _702BBE03CA55F2529059C1331C136CB9;
struct _7086C2867C7D4B0306B00A1789D67F56;
struct _70AE50C60636BA34AE17DCBE089831D2;
struct _70CE59A0CFDF5BD02F17410240B55142;
struct _70DED5C9F2A29D27E550D747EFE3C2C4;
struct _70E4CC7E54BA43D6E5622AB555079691;
struct _71FB89AF527DBE05A40AF86E9AEEBBEA;
struct _7223AFE63A8123EF6F49E197890FAA10;
struct _7250734D77F79F0949305E641023FE62;
struct _7257EFC214C83636CC1C8B1684490891;
struct _7286F01C0F25CC9697D9D7CFCD5C4B3B;
struct _72F0243C2EB87E20847F7DC0E66AC2E3;
struct _730B0A961A25B34AF2CAA3D5B8639BBB;
struct _7374270A99571F2A61066392503F95BA;
union _738A8E8AC168E5B4B1A53622C9D7048F;
struct _73B4058B96DB787648F70BEB3765CE40;
struct _73FDACF34BD773846371F264A3DF2411;
struct _740C46A196F463FF63DE6C8E1A8E1740;
struct _74689F94013354ABD1284F3BD5DCBEC8;
struct _748E6396DB81A71CC67026C5868B0A61;
struct _749257863A78ACF83BA10F9F553F4560;
struct _74E95F720A863C1E402D38672975CCC6;
struct _7501B521F09A6EDD43C68106808E09A6;
struct _7545E18792FF2C20F9BB4220259E75A2;
struct _75655E49B9147F5ECABE2329F0193DCC;
struct _75B48D098FE9EFE9C298E47B5B8F0BEC;
struct _75F7E626134BF34BF20657FC27D19BCE;
struct _75FC8135A7E79B969971564222AED43C;
struct _75FD820D0CE6C215ACE04A8FAA270A6D;
struct _765B65D42894188272D96826C864A075;
struct _76C432023C30A60D6F0CA03B71EF1A2A;
struct _76D52EC222D2C536EACA604D43F5657A;
struct _772FB43CCF21C0EB4D2EF861D4978150;
struct _775C8D8A4887E1FCC801B4D481FA4360;
struct _7768503639F77374B09C8CE2FF45E7E1;
struct _77AFB732CE0E94178E86FE7589E57943;
struct _77B5DA89F8222E8D6D7C1ABF47542A30;
struct _7801A91C37AF2AAC45BD7DD78FEE34EA;
union _781B27F37A2DA3C5D0084E69F313DC7D;
struct _7894C0B609BF7037CBFB2C6964164B94;
struct _78B46019F679C5E70AAD7C2ED28277AC;
struct _7905F1106D6192C786F48B3D63EB8F32;
struct _791AF81D366397FAE28AFC7E5E3FF4B5;
struct _79210749048C5E17703F76300116C143;
struct _794969DFB3CB8212888176F478F3AFCC;
struct _7963ED2253978A4E491ADF870F9A304B;
struct _797907A242F94DB9200676D3A724828B;
struct _798E7147B6C21289B5F0FC5985B127F4;
struct _79997B0BE24A7D700C550979629A1B8E;
struct _79C6B1010639C7F2EBBCA0EF1CC49774;
struct _79D3745B39F9E71262BFBA7985E1C7DE;
struct _79F2479F433F63099A0390C39EAA789F;
struct _79FC17A0C7A3F31E1105D33CC8C2AA30;
struct _7A3E8E29A57684CB97219B36FB039E49;
struct _7A455DB3BD331D79AF16B3231F86E0C5;
struct _7A75335468D0F989B2CF91A04174818E;
struct _7A8BCDFD27D305719C6F21C05BF2348A;
struct _7AC6EBFF84C7D5C6D4B5835EAB8E1003;
struct _7ACF4F4DA8290ABE25A6ADD1CFDA4216;
struct _7ADB213CE3A416951231E877AA0F0D4C;
union _7AE8B4B46CA7ACE445000D141F00559C;
struct _7B1AACD52ED53B3363F77B2C48FE4393;
struct _7B203B1D6B17DB4D229BE0C85CFA6293;
struct _7B3408C53D543BF7CD2E93CFF0955DEB;
union _7B6D3CF7C92E6402FF2DDB4E46F022F4;
struct _7BA34DEC42B2BEB7846068E691B46F3F;
struct _7BC974A8E90EFB1AB4A63682D9BB99C5;
struct _7C0193CACD5E2992F63533D0F1598B1A;
struct _7CA3BFA0E2ACF16B623A64955922766D;
struct _7CACD6175943F9295C4690CAF509C655;
struct _7CC8751860F3412009ACB1FCC844661E;
struct _7CE69C85D0575A23F013545F3194CABE;
struct _7D044E98E295B1AE6D053F4E096E3E34;
struct _7D1B644A0EEA2B09DD88F0E6B7E788D2;
struct _7D569909FEB0E294999F498DE699AF74;
struct _7D9782CC89DA8BC9D1AA066BD7A8943F;
struct _7E3EB1143DB1648EACC9B112CB231A1D;
struct _7E7BC6786790AB56FAE456C8962F7E9D;
struct _7E8BAC4262F9B7E47F22B721CB72642D;
struct _7F0AD33161C1C735745BF21ED1DBE93E;
struct _7F1527F4980126EB9203A44DB3E05AC8;
struct _7F4FA8E04F335CE1E911E9EDA6B28A3F;
struct _7F541C22F3B2F8E6D7F24FB341D374C1;
struct _7F79EDEFC3CE5D4824B190E83A46D022;
struct _7F9CDB57B2273A7A35E8F17907E745D4;
struct _7FBA96F229FB301DA1D20C97214BF251;
struct _7FFBF4E81BEBC201DEAF468EBD0F9AD5;
struct _80262239D5DEFAC7F5C75EBAC6CCD93C;
struct _8037B5CF1C7930037367B37388F05F8B;
struct _80BF1CA6AF87AF0DC64498AC611B3C23;
struct _80FA3E9E2CB8CB94E88F4B4B7A4726B2;
struct _81227E6A2E975B2588700A3A20196845;
struct _819D62649EAF67B78691543FCA1EE6A8;
struct _8215DDD75066012239D919FF6D1C96FC;
struct _82207ABABC4EB421AD27F9EAB2AF6BD5;
struct _8222826D686B50CB8E41460EE2275F07;
struct _82CA72D52CE6587547984538D976BD84;
struct _82CCEA45697413307268EF955876A1D9;
struct _82D86B5B3C9D9E6A7BE98808A956EE82;
struct _82EB719490A0E9F110B2F30DF6A71FC1;
struct _831449F56FD082F867F95B7A85E29B03;
struct _832302596B16D7C435F01BD429ECA1F5;
struct _834671796DFF06177BC2ADD32BAB03CC;
struct _8350987D17B2947444B2D568F36850A0;
struct _83A9560127C5CA1AF601DD4E7C3B278F;
struct _83DC73F186BDA0868BCE8C2AD62B1A32;
struct _83EE9095BF164417D8EF1B0B9271645C;
struct _859F20FF7BA8AA6321582CBACCA6F869;
struct _861FAFCB43E78E06EE70900C6267245C;
struct _86549870A56B750901787CF4B94C9DDE;
struct _875800A09C817D61F833D1479DE8ED86;
struct _87651D9D31681607819E457EB5237059;
struct _877451DBD18072CBABC3B29349C46696;
struct _8790A95C9089D47EA8D4BDC2F4BAD9F8;
struct _87D722ECD21497B94ED1D7223FEC05F4;
struct _880211171E610BEC08A41169F91F4D60;
struct _8848BD856EE61894A9007CEF6791E684;
struct _884E74C734502FDAE5886BDFF852D3B6;
struct _88C1685F053777CC7A3B1D0ED0ED52E3;
struct _88CB499CEF7C95AB64991FDC4A8C267A;
struct _88FB39CD3802D019F63911908A8052EF;
struct _895A6AA0EC03D09B638DC82C89B5E3C4;
struct _896D23E0DCE5181A858CD1FDEDFC63B0;
struct _8973D72E68A3D7427BDE924AB847E810;
struct _897E4B831DB07A8CD8CF80172B9B47E8;
struct _89ACFCE72F27CF3E8997F0C88CBC1FEF;
struct _89C19CA17CD4EE2490EC1EBDB53AA079;
struct _8A0FC57137FB478736F2B9862ECE0EA6;
struct _8A36C2984BCF3F09374227AC2CA3601E;
struct _8A4D2DD0535D3740C9D9302B62B9E8F3;
struct _8AC915922B7872008F9FA0F659707AB7;
struct _8AD7665855BDD9D58C16EA2008E774F8;
struct _8AF8D50F7459E989F83B822632060AA0;
struct _8B1EAF7AAA57F33F38F96E94C6EE2E44;
struct _8BC4543EF695142B249D7CC5D558FED0;
struct _8BD108F1E7322F577EC46D8A34BD7229;
struct _8BD856D0EABB45DC0AE6203B505E4C05;
struct _8BE617EABEB75C8FAB9CB9A4A240FEE3;
struct _8C2FD448F8CF6A602A866F997822A598;
struct _8C544AC6C871408AE6573DA61B3B8C70;
struct _8CF502427BECF149369724E71469A9A4;
struct _8D276D88AE7A52B5A0CD113CDF9731AA;
struct _8D40ACCAC6057C8589735CF1D51B872E;
struct _8D66564F98126883EE28AC7CFF4C7324;
struct _8DAA3FFB6B33F31F5053448038813E4C;
struct _8DDBCDCB4EEBED7E3946A9A0AA381214;
struct _8E1349AD4AC8D9A4F1DC84C54B0BE169;
struct _8E3F17DF06268256B33C950219C36638;
struct _8E8531482D4582E35E09D5AA05C855BB;
struct _8E9D6FDA341A5CD3E2BA41AECEFC8DB5;
struct _8EB7145310D404E702198108260231E4;
struct _8ED1EDE36117F631290006C3E9446427;
struct _8ED815E5FBCF56EC30B814FDB5559582;
struct _8F38FA1882FD1CDA04507844DB5B7464;
struct _8FAAC4C6A9B09454B312C1AFE3312BB1;
struct _8FB2953F75CCF01072247179C715B36F;
struct _9081086C0126123317B5AEBA108CF51B;
struct _90B3239242A1E7B072ABC9D9983310BF;
struct _90E70BB8598364AAEAF6E156E433A864;
struct _90F4279CED75C32CE4133781567FE5DA;
struct _91B6CB490464A345E007449761AA48F2;
struct _91DA6C1759B9453440D37A912FAA4391;
struct _92276D725373BB3B16F8CB5C6778E662;
struct _925C5E9ADF13AF08F8E4BE2898EADC8C;
struct _9260E9DF4F900591ED372CA82BEE9A23;
struct _92C2B677F4D6F16C081E111A1354037E;
struct _92C41753C7AFA0CB8157A9B4DAA6D4C8;
struct _931DBA82A19B61CA267B848FC88C1541;
struct _932C98117C7FBC3E6D86F96BD678D2D1;
struct _9375A326D5D02800B5E28ACECE8480CB;
struct _93B69AC16094E7C5789E83029DFD84BC;
struct _94144826E4178014C622990B92554F5C;
struct _942EBE9ABD97793534DEB0950390C4AB;
struct _94C04A488373DB802AA4CC07AF27941B;
struct _94DE3FD15F99ADB1828A8006E569663B;
struct _94FA839E2A2E2CDB2FF04022E6E0CAA1;
struct _9522E807BA7B29263AAB53074ABFE969;
struct _95C51ACBAA3B94C874709B766C465057;
struct _95F74D7453875C15752E25CB7F1BF0CB;
struct _96264A6F4C8C04631D278E968D9BF4CE;
struct _96852D299A3BC18B35313C48EFA48634;
struct _9722585E737591D9DBBFC1CA80083F53;
struct _9750BD37C04375AEAD857CD1AEBC6ACD;
struct _975F191B774855E1091B820C10595CF2;
struct _9763FFEA107F886AC733AD6B5D71CF1E;
struct _979FA3DE6ECCF956231BFC297C4278E6;
struct _984028CEBAA862490ACFAD72BCDE57E1;
struct _985C3B0B1950C24006043DC21969E304;
struct _9862706C0A5BB87114D8D1264CC215A3;
struct _988632284A71C49D1170FC4598DEA165;
struct _989300C65D48D4487CD63431A5B756B7;
struct _991DB0B5CB0892F70B164889AA9E2739;
struct _9990F7522FA29648C94CCC0846165B95;
struct _9A02475B75BDC9A6C1FC81F46F9E4217;
struct _9A76EF495F8378CE70D9AF691FDAC84A;
struct _9A79A86C67FC8B79D589DEFE9BCD3BC9;
struct _9AD92D66A9B7FE2D16898D79F4A40DAD;
struct _9AF668561A3C9CA6386E91513092AD00;
struct _9B215D7B412F7706499A9C5F7AE2BF48;
struct _9B4395DE66E8574EC0897BBFC5E468E1;
struct _9B8DBD56B2ADF437D63C1746D87B8C1A;
struct _9B9FAE43572AF8916E11706D7ECE195D;
struct _9C05987122A935634D9A0959094DDFFC;
struct _9C224668B7E64BE6AE9499E6FD772938;
struct _9C8855C5416F841FBC956426CB420C87;
struct _9C9793AFB485CBCDC1723AA9DA7467C7;
struct _9D085620EB695911E35E2B9DE84C0E07;
struct _9D0FB7664D5CF4633C4A9E9917855E92;
struct _9D24C8DB1BE3DD751F7CBDF214675376;
struct _9D6FB564ED57422FFB268B9144C446E8;
struct _9D856B837113E1B9C553BEF8F42066D9;
struct _9D9F8CC524C7DD4F9704759512315B2D;
struct _9DBA678C3E373C7A30D5EC7DD13ED3FC;
struct _9DC1427BFA5A30405B067C9596620D04;
struct _9DE996CCF029E9EC8780697D99848B24;
struct _9DF042AED270B6910968D1A2BC70046F;
struct _9DF5225FB79C7EC3237B4B73EEC9C169;
struct _9DFE28049B8EEB519566F0D7FE7040FC;
struct _9E0249E98289110ACA9F1289B33657CF;
struct _9E1D181561E0D2ACA87E09ABA7C14355;
struct _9E389EF8DB18C75445DC45CE7C2FFB9B;
struct _9E48EF926CC337D4DD46A8B6E6B97304;
struct _9E637E3D30D4EE6DC2F7DCF094554036;
struct _9E6A7A2F5B8444BF3F540E884EB664C9;
struct _9ED58EEAFF80161A60B7DFF5CDA307D2;
struct _9EDEC9CDD32BA2E5983B8867B401ABD1;
struct _9F409A22DE3AD0D94F719EC6F00E420F;
struct _9F8356FA3F6B7BB65CCFE589AF8F3C28;
struct _9F86842B58D3B4811684B11871470FBD;
struct _9FD2D690B5466D0C81573B00EFBDAE2C;
struct _9FED812B80655AE33F3AD93E5626D145;
struct _A0014DEEDBC3166AD27E11A70E9D3D79;
struct _A03D8E09E1901FA73C4A77E2D3267500;
struct _A043DEDA58AACB0ED59B54E1362CDED0;
struct _A0565235DB0A025ED98270EC8F0003BF;
struct _A06AF73261543B69A785AD9B5C737D11;
struct _A0B32823B19A2A6438953816D84B0843;
struct _A112317F86DCB2DDC9FE57A6FC58C010;
struct _A1602EFEF26A0DD20EAD389B18F82E81;
struct _A1A32FB2C00492E90944DE52B5668962;
struct _A1AC26B3F52FABB6E699F530F015B0DD;
struct _A23F2D0A331F720D631E2B6171CC3ECA;
struct _A27B2EF13B029B6AC017266492BED372;
struct _A27C0735E8A7EB8595B640D9B7BEF349;
struct _A2C7B4C52241BF95D2B2191B54C0B07A;
struct _A2DE5C624CAE7E415130221DEBE38D94;
struct _A2FB221EC01549407EDCF016C4C0632F;
struct _A313ED2DE25BE046A874D492CFBD731F;
struct _A35F2E1A5E531ECFC152E2BA15F78A6A;
struct _A365B987896F695263E94A4D93A744FD;
struct _A386896A7A6A8667CB6DAB8066B01EA8;
struct _A400BCBF43F87F2088946A887ADD242F;
struct _A41C32B76964981F2FE8CE9B9485A97F;
struct _A422162A3E9D4DF972C9311063D03360;
struct _A42D6322032E0C7A7A9C932B10DA502C;
struct _A467143AA6DED7F9A689DDE9D5460EF6;
struct _A46BFD4B6B8C284ED478D587B5722CAB;
struct _A47C75AE74EA14FC2F54815F4A8813BA;
struct _A4A7C3BD565590D1E17F737ABF60719A;
struct _A4DBC252F7392490EC4C7D58273D4CD1;
struct _A4EF4A77E40471EF410BD1BFBD9E090A;
struct _A545D31055C82AF5215FB86F909CA367;
struct _A55E8F963C5B6AC40AFF9FD81070CC8F;
struct _A56827FA99728A529A1C213E34F0D83D;
struct _A572CE7E5663FCA9F137B2D1D40B04E1;
struct _A5C97285B4EC7F28E1C14AA67E7E424B;
struct _A6524737EEF8C4DE9F2A62890C064223;
struct _A6F99021C670370B88B165D4DC414CDD;
struct _A7019015FC7C2C37D01376608F5D1FF2;
struct _A78408D38BF8EB20B5134CAF14D5F131;
struct _A7EE476123D6E02EF3E6172D8886EF01;
struct _A80CA2BDA095D60FE5AEEB62DEB4779D;
struct _A84A6CEBE9E9E241ABAC9CFB04BBE1A2;
struct _A84CE16FBD8B7EE0DD32EF223D545A98;
struct _A868A57034B7192D5EB80526E63380DD;
struct _A87B2475E9FE5E7737E5261AB6E50CE5;
struct _A8C15E0CCC4F1BB7303BFAC73A97A837;
struct _A94EB43F2838EBEBCA936AD6F7EBA6B5;
struct _A952ABD3B0337785ED8C31FE9C2AE823;
struct _A9B1BAFFCE9059101A2CA55F4DE425B3;
struct _AA339AC83CE9D84A9C74DA91D78C2A72;
struct _AA401E6E4181592548E0AAEFA6FE89CD;
struct _AA5DE4F56F55237DE42D9AAC0EFC65DE;
struct _AAD257271AAA9A190B14D3482C45D035;
struct _AAD518AFB58856180F72F894AD441DEE;
struct _AAE88594007F457B798403BCEE2A7045;
struct _AAECD496E21460385AB9540869BF9C78;
struct _AB98B12C01F884E8BC2DC3D07B35D622;
struct _ABE60368F0168DDE4E32B527D5287C6B;
struct _AC1F0727205AA235F31FA7E4FBAB6931;
struct _AC79B0E9D40EF6B7A4C8BE07CA2286DC;
struct _AC93509FFB6B9C1B98C9154A5D973C79;
struct _AD3E4B684969994001E04092A9466FB4;
struct _AD58CDA99C93F34C31A743157D5C3E5C;
struct _ADF91E6B5301140E8711A6FF29415028;
struct _AE25578E94EB9DEB13D122608361EF67;
struct _AE7090D44B263C525193247B1C3DC203;
struct _AE71E2F0BA42A771B72098AA93CA26BC;
struct _AEEA76D8CE49243D0419CEF55BCA8374;
struct _AF27679C824E3E5901AA7DC2B9114169;
struct _AF39247D48CF164753A445931539035C;
struct _AF5FB4080A51E8992C2DCC85F9B13FAA;
struct _AFBA3BFF93393526E752507E8910BD40;
struct _B025004886C7FA591A1478EDE7E7D2F6;
struct _B030971557B6948BCB07CDE1436E426E;
struct _B09B64BCB86C923CE64AD6544D183118;
struct _B0A4657A0F832627789EEFA30E2C3FE8;
struct _B14224ABEA533B24DFD259D862A6483B;
struct _B16FC8566897364FB8F68A61B8D500EB;
struct _B173786F760212F3DBD7C5A6C83676A6;
struct _B17A026830C769E803D493B7F2598A70;
struct _B1BFEFE2106F3BB5718738D899DB0721;
struct _B1F3B1E8AC6C76EBFB982A13A87B6D55;
union _B20031452D9C70A13D819C8DDA3A0BA9;
struct _B269B0A5851D241ECE7A73512E496A13;
struct _B278447F4BA50B253C16979F98AB98A4;
struct _B2B69F9AD24016B318383C2A7C8A2E10;
struct _B2D1347A7314B3F7BD8A6C26E40DE0B3;
struct _B2D730F73A56FF96C6A7A740CAA96BFE;
struct _B2F7B8A6150007A0765871980FCF4D2A;
struct _B3154DDC89CC03C065CC7D94E90D12B0;
struct _B366CC5B56440B0B1B4971EDF28ED7EF;
struct _B36C03EE0DB03800CDBEDA1CF8CFFD5F;
struct _B3807A7E298580816B8893D27A6B40D0;
struct _B39400A659C1078B091D331E19541038;
struct _B3BD77590CC72559D1303DD07BD38410;
struct _B44A6AA5E65CF240A74FE9F706C0E430;
struct _B4654CD279B33E607B3273E64CC6A8CF;
struct _B466B6127C4D0EA4542034CCB3136555;
union _B4686A6782EA22417C8F11570D0281E7;
struct _B4B234DF51BFD6860BC6DFAD9B63C9C2;
struct _B4C695B0250A38B82AFFE65B8304A51A;
struct _B4DBE4004D983CDD99352ECA92D175EF;
struct _B4E11D905D4614A9FACC9B78D32FE1E4;
struct _B4F2C86EC2AFA3B90E8AE0EA0F71367B;
struct _B4FA891B630887EC538EB91F019A9C2C;
struct _B58F2A65D6A08A32CD1EAF6D9DE3C432;
struct _B5E8E02F7A52D99CF4C865E96F59C543;
struct _B676EA68DBBAD6DA98C0AF39E8F6E1CC;
struct _B6C2B50A2126E272B3960EB4DC4F6604;
struct _B6DB448D25F6CB9AE733EFE1F4C4EFF9;
struct _B700DEC12E3C3D556A5FC194447E1A6E;
struct _B767383C4D9BDDC040C77011396CEA14;
struct _B76D2E1C695AB963EBB0451E02A66BD9;
struct _B8340C644CDB6E95F3781F01B22F6B41;
struct _B863C2049EBF4C6B116A5513F43CF6D2;
struct _B88A4CA2F1F645428AB97EBD99B32A47;
struct _B8BE427FC8694D49638950F9AF5F05C2;
struct _BA1C9873524F37DFA28FC6E8B2A0BC7B;
struct _BA7B5543ABAE7B9E6314E3F267492402;
struct _BAC7E67B0C2C05C40DFF67087D59816E;
struct _BAC9482348E0E8493864B83901A477A6;
struct _BAE4AA77CC43BF06F4D3ADF31CFD29F5;
struct _BB279EA07E8836E412716D1B8B41E21D;
struct _BB307DE81D005F0ABA15BB97E20A0808;
struct _BB9D9B590A605113A47DE84E848B0D17;
struct _BBC1C953EE608EAB448834AFD8261F09;
struct _BC0C03DE100E0ADBA9BE7AF77D01715A;
struct _BC21E3DCA2DEF6CD8EB07ED07E074597;
struct _BC246FD96289B80B779C80FD0A76F445;
struct _BC4B0D515307F8380CCAE7BF44CFA97C;
struct _BC522D80D70F7E982D1D01F262D61B8C;
struct _BC57A1630E59AFE2C540D0A45294CC64;
struct _BCAE7384F079FDFA9DD5F4EFBAB29817;
struct _BCC9C96203DDB6ECC5EFD83EB5D80763;
struct _BCDE0020825236A8F8A72B60AFA7374C;
struct _BD0CD7113069CF1296E061F976B1B743;
struct _BD3E200215DC355DB1AB2D6A05084309;
struct _BD550A7A04DEFA8C16DE6F55E7178AE2;
struct _BD577CFD808EB4E77A4E3752FBFBD993;
struct _BD619B2F7AFF7BA6F06506AA27210664;
struct _BD6B6A249F1B6C2CBC1F20B0596A95AC;
struct _BD71CB07C4DDF44AC99036AEC3635494;
struct _BD96F4C520841110C237EF8D06FD9BEE;
struct _BDA8B21BBF344B8E23C198E46F24428F;
struct _BDC2BC4E1FC4E3665C531F87A904F1CB;
struct _BE4469CD69A158FEF141EB99E29DC657;
struct _BE873DF30A0F36F7B74D63F54E76D60A;
struct _BE90B4AC206CC1F52CC4D15D587652C4;
struct _BEA3E970906BDE5578391186783FC521;
struct _BEDEF4614EC85AEAB08F01A1475BB3BD;
struct _BF04F385087D384300B2A0AB26B803BF;
struct _BF2EA9C081140064A68778B10C033DD0;
struct _BFB970BD49ED9B406D7CBF54A76D57DD;
struct _C091F8996EF5667AFF510FF5B2E0143E;
struct _C0A0DF669A9A28D262D6289CF39399F2;
struct _C0A8173FD3695D4670457D810A0436B3;
struct _C1314179BE3A0EB70B2FB159EDD63B8A;
struct _C16308A46254792F555119C61B977CA2;
struct _C19E6F380814408DFD31968534DDA3C5;
struct _C1A5A3DCCCA94F161802FCE22321BD34;
struct _C1A851173DD816DDF7F0E0D062CEFEE2;
struct _C1BC45A60F843B4624B9FAA35BF87512;
struct _C201FB0F2222C07B40D490F1CBB06D58;
struct _C260757490C306CA273BB590CB913883;
struct _C277CB81CBAA95C145BFA0CE4951774F;
struct _C2A18E44A509FAD040F54243FD2340D8;
struct _C30FF1240D2A8075F6967DECC9305E3F;
struct _C32D75228195D08F6D42072DC87ED14F;
struct _C3C653411B6E49EB349248421822EA60;
struct _C3DFAA9936722914B9C7944393FC310D;
struct _C40F7F4DD1C7C26B2F1D3F03E611B28C;
struct _C4AF4D457027AFDE6D53E29D5E02871C;
struct _C4D830AACD6CA9C030EA39190076ECCB;
struct _C4DC01CDDDF5A53B120EAA56060806A9;
struct _C552EBCACAEF1EC592A2129D44400B77;
struct _C61370466789CEEC8D7677AF1FE7B66E;
struct _C636080007C4706D90F0D4DC955336B1;
struct _C65377E4DB536D1ADB016911E41EAEC0;
struct _C65DFB72B3FBEEE777E9E71274DF712D;
struct _C6621B22F6499CFAE165CD3E2FB352AA;
struct _C6945E03756C0EFF0E3D4BF179417A01;
struct _C70BF6770A9AD12C6B9D1FF146C70C10;
struct _C7406CB336B739A87F2A2E6FB42BC742;
struct _C76765155B02FA21702E864CD4488A00;
struct _C772EEB8BDF2D9B03BC2113DCD14FF9B;
struct _C785CF6C4EEFEB89ECBC9FAC0351909D;
struct _C78656F81DC45526E09FF6CEF1B798FB;
struct _C7C2F9747408B8A39467CE13B3FC53FB;
struct _C8091AD492510FDF271EFEA57BB3787D;
struct _C82A39D70AC665D4F8B9F5FC885D2B73;
struct _C872F43EA669D8C471FAD313DA7A2479;
struct _C889EC8CC43E7C0CC7EDA4C569652F40;
struct _C96B45266D904955FF5B1BE5BB2CC4AC;
struct _C9793B2A88A40550F3E6FCBE57C78800;
struct _C9EFACD7AD111D54B2C71B18ED3A969D;
struct _CA18D99C52BF47BA3661A7BE783B3F23;
struct _CA1CD5B08005403884A7641019451813;
struct _CB86ED79A67F464A5E5DD7E35915D8C3;
struct _CBA5F02AFFC4EA4A3305BB276E7E8CDE;
struct _CBEB826488D526BABFC41413DDE1C327;
struct _CC7B73821EC10F3655DDE5DAA21E5635;
struct _CC986080033DF028379B0F24745BC29A;
struct _CCAEDA52B750854C25441FD25B4DA915;
struct _CCAFB83A0FC0BF591DA5D736B6BAF8AE;
struct _CD2774D7904D8BC0AB34D0D3977DB8FF;
struct _CD350D2F1F23C9E87696B3BB28EF6366;
struct _CDF3BC70CBFC5069783BD7650BD44CEE;
struct _CE2CC21A8DF6496E4E3BA1994C658522;
struct _CE845F89F9878C873199BB4116C12DE5;
struct _CE866585EA90BEF8E1777B84F5242003;
struct _CE94CBC997C090EAAC40968C8F5E3465;
struct _CF0026E7EC4F507009AD4F7D07FF93B8;
struct _CF062F67C3439FCE826EEADEB80EF798;
struct _CF61D8B6D31E4D5BDA17EA1156C41E64;
struct _CF91FEEC29390B2E3A7754517937B585;
struct _CFC98DDC8C48D7D4D5B40C9CE62D3BBC;
struct _CFD68B7ADBC82BE7EABF4FDEA780590F;
struct _D03F7999BD0EFD0AEFB0AB94057876B9;
struct _D08E3E427138D596819F8CEF4AEF4F32;
struct _D0A230E2822E6F114388A4393E99A918;
struct _D0A88ECD5B9151D3C71E69B7AE3ECA15;
struct _D0F732F65C44B5672B29FFE38726918A;
union _D1779CA5851A61401DD36BCDAF347214;
struct _D1A99149F7DEF10F5C1917DF5D27BC53;
struct _D1CC089C043B8A5C6F39977960C72D3D;
union _D1D0F511BF997F52624AFB2B0CE27B40;
struct _D253512181A5FC719D07097CFD19CBCF;
struct _D293AA008B167A5482334DF4B9C04D8D;
struct _D293DB0BD17AE7654E9C3A224EBA1B54;
struct _D2BC88768625D18EB51B5B1C4DF7633B;
struct _D30E1CD2E9753287075FA3466243327C;
struct _D379431B13F78A36F2202C5AA386190E;
struct _D3AF385DED024A0A11BBAE3B646E064C;
struct _D414AB5C490C563DD84DD380518CE003;
struct _D467916C3587874006E0A38FD04B2C07;
struct _D484A87E94E3DD0BB42E942E2185E2EE;
struct _D498926E8696BF91244D867CE73FD66E;
struct _D4B7CCBA990A156E447947BB060E0786;
struct _D4C8F552392F5332BDD78714AF7AFE61;
struct _D4E78A805D3B4AC5F724CECE1911262F;
struct _D4FB496F61D4660631FE604D96639DD9;
struct _D53EE25F80C41C95CC04B700465E64D8;
struct _D5990F2BF3086DF3C6E5843A4F6D2F9C;
struct _D60B59C14E4F896E4A7591EB7765B14B;
struct _D6CB40C77BBA5C4EA30E630B21A87947;
struct _D70593ABB97D9ADE4A069324C98D63AE;
struct _D758E79311354DDC9AF0CC7E7C22CD10;
struct _D769135999DFEE6143DE1D9CD80B3AD5;
struct _D7CE09BF9A0F6F73C5A4D3330C0E16F2;
struct _D7F0CB1571AAC0714CF3A2A9DC0827E7;
struct _D8169209A0BDD9CFFFA27C4AE6C5DFD0;
union _D8231012D0728EC3472C30FA3109CEFA;
struct _D8DA3DB8B551D92E16702FBF10C103DD;
struct _D91B7973290C063AF6BE980DDFB9E8E4;
struct _D91C2DCC69F66A043F2E243F7B809339;
struct _D9975735FE375B63E13B12CE4075213A;
struct _D9BDF4B3DDC8B65752EAC3136B32DA96;
struct _DA4C8A7C662E901D031392A43A7446A0;
struct _DA4CA76774A2C175F5D0B77BF61D79A2;
struct _DA732864DAD897F0B587BCCAD8E078EE;
struct _DAC170E456357DF80928C89F26405355;
struct _DAEBDFCF6641BEDF5371E5E95CD6FE55;
struct _DB0E3B2132CB3BCDB478CD47716D7AA6;
struct _DB0EFD4055EE50FF77A024DEFEA8EE37;
struct _DB14CFE2E08779D243D914BBAB2B5230;
struct _DB2D4F6E439022CA547DF8AA2CE83D6E;
struct _DB64A8459715AF3CEFE23597C08B5967;
struct _DBDB4AF8E469679C3A4CD785AB502395;
struct _DBE3D025CF6B61E7535360E73F7BAA3C;
struct _DC1F4185A69167B259A83E436A7DD097;
struct _DC32A0924BDC2649CEA8C5E8AC72EF13;
struct _DCB8A1A5DF0C1422D7122422CAF2D078;
struct _DD1A60F664AD301361B26C5800787B5E;
struct _DD90A90D33B6DCFC05E4E875B7D49A5E;
struct _DDAC1D07D44FFC2E5C65864F60CCE1DF;
struct _DDB9E5FBB16C40A976BC405025678C57;
struct _DDF2E5A27F0B22B52D0F64042525F7F2;
struct _DE22F0CCEF99DCE80683B5031CFFEACA;
struct _DE2D2D600621BF6A9A3C6AB05D887D2A;
struct _DE5295A524AE5E785ED4C88469459F67;
struct _DEA6EB3579BA90947BB8CFA4C4EC84A1;
struct _DEB6ED3E3E48801FAB6806704D963455;
struct _DEEBBF9E678AFA2413B9A4D363D90472;
struct _DF21E726BD65398407620C5BBBA9E08C;
struct _DF2660A74F633C8EB56A7225DE8125F3;
struct _DF35D159A1509306ACCF933DCAD10C10;
struct _DFC468A573BED393F8C22B677D1D24EF;
struct _E019DD19C3E276A39E4768CCE95A0FD0;
struct _E0F65D5058ACC2BC5F9AF2EDFFAF29D1;
struct _E1260AB78985DBC228459590506E4C92;
struct _E1655291D14CE59495117F42FECB583D;
struct _E1B611A0324DBC10371E6C5C458A41ED;
struct _E253BFAEF58A5A0733BD8E7952BEDE5F;
struct _E286A6BB4A6F2654A491CFFF4E402FC9;
struct _E2CAB82FD115FB5CD111E5D354459422;
struct _E38AF46511CCA77388BA66BB0D6EA6C9;
struct _E4175BE510398187CE128A5A014B31E0;
struct _E43B4FFA2E3C0DB794E5C488D88E145C;
struct _E47C1379F192540C5AC97D7F222EBA5E;
struct _E4C683071E34AD255F18B3FB82D2DFAE;
struct _E520267D12BF4FCD5BA9F753AB237D0B;
struct _E52A8F32C8A3F3878A2B0A4A62B69464;
struct _E55328F014D59CB8D8C2D56824FBB3BE;
struct _E59953A36063650DE92A1957B98E4A1B;
struct _E5FCE84481A5DA4B542276D3CC112A29;
struct _E5FEC4B44082A4B8B21FC86BB58EB49C;
struct _E63B05C5B736EEB1B492508D1A96BE3C;
struct _E688C0674EF62F7B7CE00CF8BBC4E652;
struct _E6A7EC26390A1436F354D6A4637276C8;
struct _E6CAD5F58B0D02B91FD47A036636D1EC;
struct _E6E23F4F2E9628A3BBE27C1C5CFEEEE2;
struct _E714B4690DCD4CE2097239CD07373860;
struct _E7564DB44F0EBD2E4F38C95410816DF7;
struct _E77CCBE5D8B1F0833042AA57AE35DB28;
struct _E7AFD6532C2786B1E1EBCA6ADECADE75;
struct _E7C62F5F3E0275B7F733491039FF6F2A;
struct _E84BFE5D58BE41C003DC505783B004D5;
struct _E8B6B3D679DDF9A2A9F1E31A29349D07;
struct _E8D0F98918C5E335D9AA76BE62A7C3B8;
struct _E8D391135C8469DFAA1B91EC6A7D7277;
struct _E979E361A2908732FE24CBF47752810D;
struct _E97BFE069D0E69649C7DF89B8901896C;
struct _E98D3537A10D6D7A36EB2CF02D2A733B;
struct _E997A7E9262D40FC83356A066D96F704;
struct _E99BC90019053CAF4DC18DC60688EDEF;
struct _E99E267610E58315722078BC51216460;
struct _E9CA16F3AD9E9F5B10D815E98DF6D9BD;
struct _E9D9387C3B11BC3046AC632B5B502F37;
struct _EA67C4467E5D392AEC3890F142F1A94F;
struct _EA6E221180A88D0F80F7EA618755CCA9;
struct _EAACC5D9CCC471DA18A3EBF0220D3A4D;
struct _EAD4BA1AA5D214B5D4E5F46AB8426598;
struct _EBE355A101A506B8BB9BC1A4B6A6F5B0;
struct _EC67746570F1353AA5EB836736C244CA;
struct _EC87D4E5EFECFC4D155F79244EABA9BB;
struct _ECC0E2C5AD5080F3204655729300624A;
struct _ED5182E24FA63E003AABD0C8CEC5D325;
struct _ED9B42DCB70FAF91CA1BE125EE068ABB;
struct _EDB85F966E4A638CA0FF7E75C4B94ACF;
struct _EDCAE6FAA77F2844B16FB7E0B618EDD7;
struct _EDE17C06FAF221A5878FFED27CF569B6;
struct _EDFC536A603B7BCAB77AE790F95C9CC5;
struct _EE0EBD6C29C148C8F36C0CC188CAC56F;
struct _EE1B24C0A7B1D7D53B85F68543B9F050;
struct _EE65B23A4559DB1BF795CF28121204EB;
struct _EE831A901A5A464BF76892075612AE21;
struct _EE866C64B9E084E52F8894370051FA3D;
struct _EEC12600E3B3BC42C851475B8200B3A2;
struct _EEFF94D31B1553C87DFF230889E3822E;
struct _EF1440E4CA89662D977D4B051E2FFAB7;
struct _EF14843253DB275F4E3937D8BFD0A759;
struct _EF15DCB28339270802C69A46485DD45C;
struct _EF16C2CE2E165A35D2E9A200C63AE0C2;
struct _EF54914952AB89C7E0EBAF949772487D;
struct _EF7BB4E5444BE1EDC70E587EA13D8BB4;
struct _EF8F73C6C596F3380A5120BEC2D3F264;
struct _EFD6C7D4777DD13E0B1CDD145692A98C;
struct _F028EE1E7A219E794434525B0B591EF9;
struct _F059149F541946541B5DFE9F6EB20E96;
struct _F0B6F56018B35AE6D958AA393C56DA44;
struct _F0BD037E525ACFEA0C1F272EFA8FD580;
struct _F0D1009415F4F398C0AA24385D596C1B;
struct _F0E4D660A9A04229E05BDCB7A8A9731A;
struct _F134966C153EAA2FEEB175F7114F713D;
struct _F13FDF1465C2A4EBCF0352D5A6933F7D;
struct _F14124C6CA524F54899508FD11C59AF5;
struct _F1472F09D9F4F4B2B771740E265DAEF8;
struct _F172F94299C982F5FEAF6C4E72460A72;
struct _F19CD3A20937CEF33F3E2EF5E2D906EF;
struct _F1CA5290AFDA1F8F382C2CF8549939AD;
struct _F1DC5359840258F1056D6AC9280CBC0A;
struct _F1E1BB7F23F71F625712F6F0DB53C50A;
struct _F1F9335C32D188513BC2595A34A539C6;
struct _F1FFDF0E76C6F940FFACBA8A13B33CEB;
struct _F21D8018CF145B47A329D27C35E96B99;
struct _F26672320A718E8E26EFAEDB64EDC182;
struct _F2B759443FC190F802FE53FB7862F04C;
struct _F2C3184CEEDD49A7FB665043E59AF1F0;
struct _F2ECD6480817AB9433FAAAFCD2A3757B;
struct _F2F9B6351970DCB60CFA1FAEAB4D2E42;
struct _F38DCD124B444AE28722F96474B80F5D;
struct _F3B093D2CE3717F6C8DEE3DEA876E75D;
struct _F3EFAA27463B93CC96181BFE5F29A4C5;
struct _F403E5F5616236146AF752723515CE63;
struct _F41DB5A7C32B97CBCEE09CBFE1E8FA57;
struct _F464FEA7A4E5B570917C7E6E5C96B7A9;
struct _F466B234F46A211DC597B6DC6FDB33CA;
struct _F47845C17C3A632D161D2E9D762DE912;
struct _F4F17E25C7BB477B61B5A580F872EC7D;
struct _F52D9FC92091A8183F87E95DDBDC622D;
struct _F571D10236F18BD99A11DF3B50D0C123;
struct _F57445CCAF99E2554B974CAECD301767;
struct _F5921867A833B452F3779F1505474C7F;
struct _F5D530A8B9C8144C513F035766B8BD9F;
struct _F5EF5B284EA9B9A59B7A392BA3F2AA41;
struct _F5EF5DA862DE88FCCA82FCE0F474E907;
struct _F61ACF7744F0F243EEA7ADCD8DB51D9E;
struct _F683121DA6B0B811B23B9D483FF7482A;
struct _F6E4DA94E7160BC83621C4F78D7EDA8D;
union _F7A7EA8B301FD75068D384417C243F9B;
struct _F7AEAB90CD1FFE3D56BEDD9E988BA465;
union _F802AEB59326FE5752476AC56FC6EFE2;
struct _F80E3F154E69694439090B67229FB6AA;
struct _F81C4DFCF4FD8DAD229D0D8C30F8406E;
struct _F8536B884003ADBD90188302B8AD267C;
union _F85E194B51CBDC38F209555F4162D10C;
struct _F87A538C433C2C2FB670457A634B5AF2;
struct _F88DFF0D39F146217256B482FD360ACC;
struct _F8C87AC2A7BC3CC5A7E8B476E8E692C2;
struct _F8FAE457CD964A2B19190AE0569FFFEA;
struct _F913BEC784D3D8439A039A40A101A5CC;
struct _F97BA04A84B56701784896B95A4002D0;
struct _F9A11BF5FCA53245437FD040CE8F0807;
struct _F9E7774477A9727B3397D0BE30B022B2;
struct _FA4FE0B2CA883E06053CBA1706060353;
struct _FB619B5CE8E6B82A3D0938CCE57F62CA;
struct _FB68FDDBB52DBDF02F327E3198820E09;
struct _FC067DEDDE18A65B7B77DF0D808EC43F;
struct _FC3BB1A81303FA005E7D17D8401F89AB;
struct _FC926E0FF1B4283F98DDB8B9F4E921D4;
struct _FCBEDAD8A539FBE868C0633AE68719B3;
struct _FCBFA738B12E671543F3DA36C81F300F;
struct _FCC23D59EDC7C9AEBCA8416FDF631F7E;
struct _FCE16AE268B388C13B857015D638E9ED;
struct _FCE7B9AB8EE8DD1EB8924ED5C32F7044;
struct _FD24C124EC918F75BF8194FC7995E204;
struct _FD8FCB430836D04139012301F63EB9C6;
struct _FD9483B813B6D6AD9C03ECC43231FAB9;
struct _FD9EA5F23BD8EC0F64EDF9068C14C969;
struct _FDC4E96304CD6EC3DE0DB0C9DA4747DA;
struct _FDFBD601B4BD2833D8A740F2A9550A80;
struct _FE40CA45A22CE2D2440EEC72EA923B6E;
struct _FE43560485AD2DF497423A9D2646B91A;
struct _FE74AE40C36D9F9A6F621CCCBCB7D423;
struct _FE8C559F4B68F5A3A5D9DBCE5E9919CF;
struct _FE9896265ABA69989620FFBB2F6B5FBF;
struct _FEC8B8888F3B689040694BF1F630E941;
struct _FEE235D246429C26A250F47C5DFFA7E6;
struct _FF07158C3282A916C3A4C5C72C8100CA;
struct _FF16F36C84D77908C186E6C9218E9417;
struct _FF2B271BD07173775CE163A4BE842405;
struct _FF8B70C3EB5683862853208A738C6C2E;
struct _FF9246841A32B78E17B3644398C154C0;
struct _FFD82B8BDC4823D2EC5A0D9DC75F48E0;
struct _FFDDF8AD41840F2444187795E69FE4AB;
struct xcb_big_requests_enable_request_t;
struct xcb_create_glyph_cursor_request_t;
struct xcb_damage_query_version_cookie_t;
struct xcb_get_keyboard_control_cookie_t;
struct xcb_get_keyboard_mapping_cookie_t;
struct xcb_get_modifier_mapping_cookie_t;
struct xcb_get_pointer_control_request_t;
struct xcb_get_pointer_mapping_request_t;
struct xcb_get_selection_owner_request_t;
struct xcb_get_window_attributes_reply_t;
struct xcb_glx_delete_textures_request_t;
struct xcb_glx_destroy_context_request_t;
struct xcb_glx_destroy_pbuffer_request_t;
struct xcb_glx_feedback_buffer_request_t;
struct xcb_glx_gen_queries_arb_request_t;
struct xcb_glx_get_color_table_request_t;
struct xcb_glx_get_pixel_mapfv_request_t;
struct xcb_glx_get_pixel_mapuiv_cookie_t;
struct xcb_glx_get_pixel_mapusv_cookie_t;
struct xcb_glx_get_queryiv_arb_request_t;
struct xcb_list_fonts_with_info_cookie_t;
struct xcb_poly_fill_rectangle_request_t;
struct xcb_randr_get_screen_info_reply_t;
struct xcb_randr_query_version_request_t;
struct xcb_record_client_info_iterator_t;
struct xcb_record_client_spec_iterator_t;
struct xcb_record_enable_context_reply_t;
struct xcb_record_free_context_request_t;
struct xcb_record_query_version_cookie_t;
struct xcb_render_free_picture_request_t;
struct xcb_render_query_filters_cookie_t;
struct xcb_render_query_version_cookie_t;
struct xcb_screensaver_suspend_request_t;
struct xcb_set_clip_rectangles_request_t;
struct xcb_set_close_down_mode_request_t;
struct xcb_set_modifier_mapping_cookie_t;
struct xcb_set_pointer_mapping_request_t;
struct xcb_set_selection_owner_request_t;
struct xcb_setup_authenticate_iterator_t;
struct xcb_shape_get_rectangles_cookie_t;
struct xcb_shape_input_selected_cookie_t;
struct xcb_shape_query_extents_request_t;
struct xcb_shape_query_version_request_t;
struct xcb_sync_change_counter_request_t;
struct xcb_sync_create_counter_request_t;
struct xcb_sync_systemcounter_iterator_t;
struct xcb_sync_waitcondition_iterator_t;
struct xcb_test_compare_cursor_request_t;
struct xcb_translate_coordinates_reply_t;
struct xcb_xc_misc_get_version_request_t;
struct xcb_xc_misc_get_xid_list_cookie_t;
struct xcb_xc_misc_get_xid_range_reply_t;
struct xcb_xevie_query_version_request_t;
struct xcb_xf86dri_query_version_reply_t;
struct xcb_xfixes_fetch_region_request_t;
struct xcb_xfixes_query_version_cookie_t;
struct xcb_xfixes_union_region_request_t;
struct xcb_xv_get_port_attribute_reply_t;
struct xcb_xv_list_image_formats_reply_t;
struct xcb_xvmc_create_context_request_t;
struct xcb_xvmc_create_surface_request_t;
struct GLXCreateGLXPixmapWithConfigSGIX;
struct xcb_alloc_color_planes_request_t;
struct xcb_big_requests_enable_cookie_t;
struct xcb_damage_query_version_reply_t;
struct xcb_destroy_subwindows_request_t;
struct xcb_force_screen_saver_request_t;
struct xcb_get_keyboard_control_reply_t;
struct xcb_get_keyboard_mapping_reply_t;
struct xcb_get_modifier_mapping_reply_t;
struct xcb_get_pointer_control_cookie_t;
struct xcb_get_pointer_mapping_cookie_t;
struct xcb_get_selection_owner_cookie_t;
struct xcb_glx_create_context_request_t;
struct xcb_glx_create_pbuffer_request_t;
struct xcb_glx_destroy_pixmap_request_t;
struct xcb_glx_gen_queries_arb_cookie_t;
struct xcb_glx_get_clip_plane_request_t;
struct xcb_glx_get_color_table_cookie_t;
struct xcb_glx_get_fb_configs_request_t;
struct xcb_glx_get_materialfv_request_t;
struct xcb_glx_get_materialiv_request_t;
struct xcb_glx_get_pixel_mapfv_cookie_t;
struct xcb_glx_get_pixel_mapuiv_reply_t;
struct xcb_glx_get_pixel_mapusv_reply_t;
struct xcb_glx_get_queryiv_arb_cookie_t;
struct xcb_glx_vendor_private_request_t;
struct xcb_list_fonts_with_info_reply_t;
struct xcb_query_text_extents_request_t;
struct xcb_randr_query_version_cookie_t;
struct xcb_randr_screen_size_iterator_t;
struct xcb_randr_select_input_request_t;
struct xcb_record_get_context_request_t;
struct xcb_record_query_version_reply_t;
struct xcb_render_free_glyphs_request_t;
struct xcb_render_indexvalue_iterator_t;
struct xcb_render_pictformat_iterator_t;
struct xcb_render_pictscreen_iterator_t;
struct xcb_render_pictvisual_iterator_t;
struct xcb_render_query_filters_reply_t;
struct xcb_render_query_version_reply_t;
struct xcb_set_access_control_request_t;
struct xcb_set_modifier_mapping_reply_t;
struct xcb_set_pointer_mapping_cookie_t;
struct xcb_shape_get_rectangles_reply_t;
struct xcb_shape_input_selected_reply_t;
struct xcb_shape_query_extents_cookie_t;
struct xcb_shape_query_version_cookie_t;
struct xcb_shape_select_input_request_t;
struct xcb_sync_destroy_alarm_request_t;
struct xcb_sync_query_counter_request_t;
struct xcb_test_compare_cursor_cookie_t;
struct xcb_uninstall_colormap_request_t;
struct xcb_x_print_bad_sequence_error_t;
struct xcb_xc_misc_get_version_cookie_t;
struct xcb_xc_misc_get_xid_list_reply_t;
struct xcb_xevie_query_version_cookie_t;
struct xcb_xevie_select_input_request_t;
struct xcb_xfixes_copy_region_request_t;
struct xcb_xfixes_cursor_notify_event_t;
struct xcb_xfixes_fetch_region_cookie_t;
struct xcb_xfixes_hide_cursor_request_t;
struct xcb_xfixes_query_version_reply_t;
struct xcb_xfixes_show_cursor_request_t;
struct xcb_xinerama_get_state_request_t;
struct xcb_xinerama_is_active_request_t;
struct xcb_xv_attribute_info_iterator_t;
struct xcb_xv_query_best_size_request_t;
struct xcb_xv_query_encodings_request_t;
struct xcb_xv_query_extension_request_t;
struct xcb_xvmc_create_context_cookie_t;
struct xcb_xvmc_create_surface_cookie_t;
struct xcb_xvmc_query_version_request_t;
struct xcb_xvmc_surface_info_iterator_t;
struct _XF86OldVidModeValidateModeLine;
struct _XcupGetReservedColormapEntries;
struct xcb_alloc_color_cells_request_t;
struct xcb_alloc_color_planes_cookie_t;
struct xcb_alloc_named_color_request_t;
struct xcb_big_requests_enable_reply_t;
struct xcb_convert_selection_request_t;
struct xcb_dpms_get_timeouts_request_t;
struct xcb_dpms_set_timeouts_request_t;
struct xcb_get_motion_events_request_t;
struct xcb_get_pointer_control_reply_t;
struct xcb_get_pointer_mapping_reply_t;
struct xcb_get_selection_owner_reply_t;
struct xcb_glx_create_pixmap_request_t;
struct xcb_glx_create_window_request_t;
struct xcb_glx_delete_window_request_t;
struct xcb_glx_gen_queries_arb_reply_t;
struct xcb_glx_get_clip_plane_cookie_t;
struct xcb_glx_get_color_table_reply_t;
struct xcb_glx_get_fb_configs_cookie_t;
struct xcb_glx_get_histogram_request_t;
struct xcb_glx_get_materialfv_cookie_t;
struct xcb_glx_get_materialiv_cookie_t;
struct xcb_glx_get_pixel_mapfv_reply_t;
struct xcb_glx_get_queryiv_arb_reply_t;
struct xcb_glx_get_tex_envfv_request_t;
struct xcb_glx_get_tex_enviv_request_t;
struct xcb_glx_get_tex_gendv_request_t;
struct xcb_glx_get_tex_genfv_request_t;
struct xcb_glx_get_tex_geniv_request_t;
struct xcb_glx_get_tex_image_request_t;
struct xcb_glx_pbuffer_clobber_event_t;
struct xcb_glx_query_context_request_t;
struct xcb_glx_query_version_request_t;
struct xcb_glx_select_buffer_request_t;
struct xcb_query_text_extents_cookie_t;
struct xcb_randr_query_version_reply_t;
struct xcb_record_ext_range_iterator_t;
struct xcb_record_get_context_cookie_t;
struct xcb_render_add_glyphs_request_t;
struct xcb_render_glyphinfo_iterator_t;
struct xcb_render_pictdepth_iterator_t;
struct xcb_render_transform_iterator_t;
struct xcb_render_trapezoid_iterator_t;
struct xcb_render_trapezoids_request_t;
struct xcb_res_query_clients_request_t;
struct xcb_res_query_version_request_t;
struct xcb_rotate_properties_request_t;
struct xcb_set_pointer_mapping_reply_t;
struct xcb_shape_query_extents_reply_t;
struct xcb_shape_query_version_reply_t;
struct xcb_shm_create_pixmap_request_t;
struct xcb_shm_query_version_request_t;
struct xcb_store_named_color_request_t;
struct xcb_sync_change_alarm_request_t;
struct xcb_sync_counter_notify_event_t;
struct xcb_sync_create_alarm_request_t;
struct xcb_sync_get_priority_request_t;
struct xcb_sync_query_counter_cookie_t;
struct xcb_sync_set_priority_request_t;
struct xcb_test_compare_cursor_reply_t;
struct xcb_test_grab_control_request_t;
struct xcb_x_print_bad_context_error_t;
struct xcb_x_print_pcontext_iterator_t;
struct xcb_xc_misc_get_version_reply_t;
struct xcb_xevie_query_version_reply_t;
struct xcb_xevie_select_input_cookie_t;
struct xcb_xfixes_fetch_region_reply_t;
struct xcb_xfixes_set_region_request_t;
struct xcb_xinerama_get_state_cookie_t;
struct xcb_xinerama_is_active_cookie_t;
struct xcb_xv_encoding_info_iterator_t;
struct xcb_xv_query_adaptors_request_t;
struct xcb_xv_query_best_size_cookie_t;
struct xcb_xv_query_encodings_cookie_t;
struct xcb_xv_query_extension_cookie_t;
struct xcb_xvmc_create_context_reply_t;
struct xcb_xvmc_create_surface_reply_t;
struct xcb_xvmc_query_version_cookie_t;
struct GLXCreateContextWithConfigSGIX;
struct _XIMPreeditCaretCallbackStruct;
struct xcb_alloc_color_cells_cookie_t;
struct xcb_alloc_color_planes_reply_t;
struct xcb_alloc_named_color_cookie_t;
struct xcb_circulate_window_request_t;
struct xcb_configure_window_request_t;
struct xcb_dpms_force_level_request_t;
struct xcb_dpms_get_timeouts_cookie_t;
struct xcb_dpms_get_version_request_t;
struct xcb_get_motion_events_cookie_t;
struct xcb_get_screen_saver_request_t;
struct xcb_glx_context_tag_iterator_t;
struct xcb_glx_copy_context_request_t;
struct xcb_glx_delete_lists_request_t;
struct xcb_glx_gen_textures_request_t;
struct xcb_glx_get_booleanv_request_t;
struct xcb_glx_get_clip_plane_reply_t;
struct xcb_glx_get_fb_configs_reply_t;
struct xcb_glx_get_histogram_cookie_t;
struct xcb_glx_get_integerv_request_t;
struct xcb_glx_get_materialfv_reply_t;
struct xcb_glx_get_materialiv_reply_t;
struct xcb_glx_get_tex_envfv_cookie_t;
struct xcb_glx_get_tex_enviv_cookie_t;
struct xcb_glx_get_tex_gendv_cookie_t;
struct xcb_glx_get_tex_genfv_cookie_t;
struct xcb_glx_get_tex_geniv_cookie_t;
struct xcb_glx_get_tex_image_cookie_t;
struct xcb_glx_is_query_arb_request_t;
struct xcb_glx_make_current_request_t;
struct xcb_glx_pixel_storef_request_t;
struct xcb_glx_pixel_storei_request_t;
struct xcb_glx_query_context_cookie_t;
struct xcb_glx_query_version_cookie_t;
struct xcb_glx_render_large_request_t;
struct xcb_glx_swap_buffers_request_t;
struct xcb_install_colormap_request_t;
struct xcb_query_text_extents_reply_t;
struct xcb_record_bad_context_error_t;
struct xcb_record_get_context_reply_t;
struct xcb_record_range_16_iterator_t;
struct xcb_render_add_traps_request_t;
struct xcb_render_composite_request_t;
struct xcb_render_glyphset_iterator_t;
struct xcb_render_pict_format_error_t;
struct xcb_render_pointfix_iterator_t;
struct xcb_render_tri_strip_request_t;
struct xcb_render_triangle_iterator_t;
struct xcb_render_triangles_request_t;
struct xcb_res_query_clients_cookie_t;
struct xcb_res_query_version_cookie_t;
struct xcb_screensaver_notify_event_t;
struct xcb_set_screen_saver_request_t;
struct xcb_shape_rectangles_request_t;
struct xcb_shm_query_version_cookie_t;
struct xcb_sync_get_priority_cookie_t;
struct xcb_sync_query_alarm_request_t;
struct xcb_sync_query_counter_reply_t;
struct xcb_sync_set_counter_request_t;
struct xcb_test_get_version_request_t;
struct xcb_unmap_subwindows_request_t;
struct xcb_x_print_printer_iterator_t;
struct xcb_x_print_string8_iterator_t;
struct xcb_xevie_select_input_reply_t;
struct xcb_xinerama_get_state_reply_t;
struct xcb_xinerama_is_active_reply_t;
struct xcb_xv_adaptor_info_iterator_t;
struct xcb_xv_query_adaptors_cookie_t;
struct xcb_xv_query_best_size_reply_t;
struct xcb_xv_query_encodings_reply_t;
struct xcb_xv_query_extension_reply_t;
struct xcb_xv_shm_put_image_request_t;
struct xcb_xvmc_query_version_reply_t;
struct xcb_xvmc_subpicture_iterator_t;
struct GLXDestroyHyperpipeConfigSGIX;
struct _FontCacheChangeCacheSettings;
struct _XIMPreeditDrawCallbackStruct;
struct cpufreq_available_frequencies;
struct xcb_alloc_color_cells_reply_t;
struct xcb_alloc_named_color_reply_t;
struct xcb_change_property_request_t;
struct xcb_change_save_set_request_t;
struct xcb_configure_request_event_t;
struct xcb_create_colormap_request_t;
struct xcb_damage_bad_damage_error_t;
struct xcb_damage_subtract_request_t;
struct xcb_delete_property_request_t;
struct xcb_dpms_get_timeouts_reply_t;
struct xcb_dpms_get_version_cookie_t;
struct xcb_get_input_focus_request_t;
struct xcb_get_motion_events_reply_t;
struct xcb_get_screen_saver_cookie_t;
struct xcb_glx_client_info_request_t;
struct xcb_glx_gen_textures_cookie_t;
struct xcb_glx_get_booleanv_cookie_t;
struct xcb_glx_get_doublev_request_t;
struct xcb_glx_get_histogram_reply_t;
struct xcb_glx_get_integerv_cookie_t;
struct xcb_glx_get_lightfv_request_t;
struct xcb_glx_get_lightiv_request_t;
struct xcb_glx_get_tex_envfv_reply_t;
struct xcb_glx_get_tex_enviv_reply_t;
struct xcb_glx_get_tex_gendv_reply_t;
struct xcb_glx_get_tex_genfv_reply_t;
struct xcb_glx_get_tex_geniv_reply_t;
struct xcb_glx_get_tex_image_reply_t;
struct xcb_glx_is_query_arb_cookie_t;
struct xcb_glx_make_current_cookie_t;
struct xcb_glx_query_context_reply_t;
struct xcb_glx_query_version_reply_t;
struct xcb_glx_read_pixels_request_t;
struct xcb_glx_render_mode_request_t;
struct xcb_graphics_exposure_event_t;
struct xcb_list_extensions_request_t;
struct xcb_list_properties_request_t;
struct xcb_query_best_size_request_t;
struct xcb_query_extension_request_t;
struct xcb_record_context_iterator_t;
struct xcb_record_range_8_iterator_t;
struct xcb_render_linefix_iterator_t;
struct xcb_render_picture_iterator_t;
struct xcb_render_spanfix_iterator_t;
struct xcb_reparent_window_request_t;
struct xcb_res_query_clients_reply_t;
struct xcb_res_query_version_reply_t;
struct xcb_selection_request_event_t;
struct xcb_set_input_focus_request_t;
struct xcb_shm_query_version_reply_t;
struct xcb_sync_alarm_notify_event_t;
struct xcb_sync_get_priority_reply_t;
struct xcb_sync_initialize_request_t;
struct xcb_sync_query_alarm_cookie_t;
struct xcb_test_fake_input_request_t;
struct xcb_test_get_version_cookie_t;
struct xcb_ungrab_keyboard_request_t;
struct xcb_visibility_notify_event_t;
struct xcb_xfixes_bad_region_error_t;
struct xcb_xv_query_adaptors_reply_t;
struct FT_Incremental_InterfaceRec_;
struct GLXQueryHyperpipeNetworkSGIX;
struct _FontCacheGetCacheStatistics;
struct _XF86VidModeGetGammaRampSize;
struct _XF86VidModeSetClientVersion;
struct _XF86VidModeValidateModeLine;
struct _XIMStatusDrawCallbackStruct;
struct xcb_circulate_notify_event_t;
struct xcb_configure_notify_event_t;
struct xcb_damage_damage_iterator_t;
struct xcb_damage_destroy_request_t;
struct xcb_destroy_window_request_t;
struct xcb_dpms_get_version_reply_t;
struct xcb_get_input_focus_cookie_t;
struct xcb_get_screen_saver_reply_t;
struct xcb_glx_gen_textures_reply_t;
struct xcb_glx_get_booleanv_reply_t;
struct xcb_glx_get_doublev_cookie_t;
struct xcb_glx_get_floatv_request_t;
struct xcb_glx_get_integerv_reply_t;
struct xcb_glx_get_lightfv_cookie_t;
struct xcb_glx_get_lightiv_cookie_t;
struct xcb_glx_get_minmax_request_t;
struct xcb_glx_get_string_request_t;
struct xcb_glx_is_query_arb_reply_t;
struct xcb_glx_is_texture_request_t;
struct xcb_glx_make_current_reply_t;
struct xcb_glx_read_pixels_cookie_t;
struct xcb_glx_render_mode_cookie_t;
struct xcb_glx_use_x_font_request_t;
struct xcb_list_extensions_cookie_t;
struct xcb_list_properties_cookie_t;
struct xcb_map_subwindows_request_t;
struct xcb_poly_rectangle_request_t;
struct xcb_query_best_size_cookie_t;
struct xcb_query_extension_cookie_t;
struct xcb_recolor_cursor_request_t;
struct xcb_render_glyph_set_error_t;
struct xcb_render_tri_fan_request_t;
struct xcb_selection_notify_event_t;
struct xcb_setup_request_iterator_t;
struct xcb_sync_initialize_cookie_t;
struct xcb_sync_query_alarm_reply_t;
struct xcb_test_get_version_reply_t;
struct xcb_ungrab_pointer_request_t;
struct xcb_xfixes_region_iterator_t;
struct xcb_xv_ungrab_port_request_t;
struct GLXChangeDrawableAttributes;
struct GLXQueryHyperpipeConfigSGIX;
struct GLXQueryMaxSwapBarriersSGIX;
struct _FTNormalisedTransformation;
union _FontEntry___FontEntryParts;
struct _ScreenSaverUnsetAttributes;
struct _XResQueryClientPixmapBytes;
struct _xkbIndicatorDoodadWireDesc;
struct cpufreq_available_governors;
struct xcb_colormap_notify_event_t;
struct xcb_create_cursor_request_t;
struct xcb_create_pixmap_request_t;
struct xcb_create_window_request_t;
struct xcb_damage_create_request_t;
struct xcb_free_colormap_request_t;
struct xcb_get_atom_name_request_t;
struct xcb_get_font_path_request_t;
struct xcb_get_input_focus_reply_t;
struct xcb_glx_drawable_iterator_t;
struct xcb_glx_fbconfig_iterator_t;
struct xcb_glx_gen_lists_request_t;
struct xcb_glx_get_doublev_reply_t;
struct xcb_glx_get_error_request_t;
struct xcb_glx_get_floatv_cookie_t;
struct xcb_glx_get_lightfv_reply_t;
struct xcb_glx_get_lightiv_reply_t;
struct xcb_glx_get_mapdv_request_t;
struct xcb_glx_get_mapfv_request_t;
struct xcb_glx_get_mapiv_request_t;
struct xcb_glx_get_minmax_cookie_t;
struct xcb_glx_get_string_cookie_t;
struct xcb_glx_is_direct_request_t;
struct xcb_glx_is_texture_cookie_t;
struct xcb_glx_read_pixels_reply_t;
struct xcb_glx_render_mode_reply_t;
struct xcb_grab_keyboard_request_t;
struct xcb_image_text_16_request_t;
struct xcb_list_extensions_reply_t;
struct xcb_list_properties_reply_t;
struct xcb_poly_fill_arc_request_t;
struct xcb_property_notify_event_t;
struct xcb_query_best_size_reply_t;
struct xcb_query_extension_reply_t;
struct xcb_query_pointer_request_t;
struct xcb_record_range_iterator_t;
struct xcb_render_color_iterator_t;
struct xcb_render_fixed_iterator_t;
struct xcb_render_glyph_iterator_t;
struct xcb_reparent_notify_event_t;
struct xcb_selection_clear_event_t;
struct xcb_set_font_path_request_t;
struct xcb_setup_failed_iterator_t;
struct xcb_shape_combine_request_t;
struct xcb_shm_get_image_request_t;
struct xcb_shm_put_image_request_t;
struct xcb_sync_counter_iterator_t;
struct xcb_sync_initialize_reply_t;
struct xcb_sync_trigger_iterator_t;
struct xcb_ungrab_button_request_t;
struct xcb_ungrab_server_request_t;
struct xcb_xf86dri_drm_clip_rect_t;
struct xcb_xv_bad_encoding_error_t;
struct xcb_xv_stop_video_request_t;
struct xcb_xv_video_notify_event_t;
struct xcb_xvmc_context_iterator_t;
struct xcb_xvmc_surface_iterator_t;
struct FT_Incremental_MetricsRec_;
struct LIBMTP_device_entry_struct;
struct WBXMLConvWBXML2XMLParams_s;
struct WBXMLConvXML2WBXMLParams_s;
struct _AppleWMSetWindowMenuCheck;
struct _FontCacheGetCacheSettings;
struct _XF86OldVidModeAddModeLine;
struct _XF86OldVidModeModModeLine;
struct _XF86VidModeLockModeSwitch;
struct _xkbGetIndicatorStateReply;
struct _xkbGetNamedIndicatorReply;
struct _xkbSetDebuggingFlagsReply;
struct demangle_builtin_type_info;
struct xcb_allow_events_request_t;
struct xcb_change_hosts_request_t;
struct xcb_client_message_event_t;
struct xcb_destroy_notify_event_t;
struct xcb_dpms_capable_request_t;
struct xcb_dpms_disable_request_t;
struct xcb_get_atom_name_cookie_t;
struct xcb_get_font_path_cookie_t;
struct xcb_get_geometry_request_t;
struct xcb_get_property_request_t;
struct xcb_glx_context_iterator_t;
struct xcb_glx_end_list_request_t;
struct xcb_glx_float32_iterator_t;
struct xcb_glx_float64_iterator_t;
struct xcb_glx_gen_lists_cookie_t;
struct xcb_glx_get_error_cookie_t;
struct xcb_glx_get_floatv_reply_t;
struct xcb_glx_get_mapdv_cookie_t;
struct xcb_glx_get_mapfv_cookie_t;
struct xcb_glx_get_mapiv_cookie_t;
struct xcb_glx_get_minmax_reply_t;
struct xcb_glx_get_string_reply_t;
struct xcb_glx_is_direct_cookie_t;
struct xcb_glx_is_texture_reply_t;
struct xcb_glx_new_list_request_t;
struct xcb_glx_pbuffer_iterator_t;
struct xcb_grab_keyboard_cookie_t;
struct xcb_grab_pointer_request_t;
struct xcb_gravity_notify_event_t;
struct xcb_image_text_8_request_t;
struct xcb_lookup_color_request_t;
struct xcb_mapping_notify_event_t;
struct xcb_no_operation_request_t;
struct xcb_poly_segment_request_t;
struct xcb_poly_text_16_request_t;
struct xcb_query_colors_request_t;
struct xcb_query_keymap_request_t;
struct xcb_query_pointer_cookie_t;
struct xcb_render_animcursorelt_t;
struct xcb_render_pict_op_error_t;
struct xcb_render_picture_error_t;
struct xcb_render_trap_iterator_t;
struct xcb_resize_request_event_t;
struct xcb_shape_offset_request_t;
struct xcb_shm_completion_event_t;
struct xcb_shm_get_image_cookie_t;
struct xcb_store_colors_request_t;
struct xcb_unmap_window_request_t;
struct xcb_warp_pointer_request_t;
struct xcb_x_print_notify_event_t;
struct xcb_xevie_event_iterator_t;
struct xcb_xinerama_screen_info_t;
struct xcb_xv_bad_control_error_t;
struct xcb_xv_encoding_iterator_t;
struct xcb_xv_get_still_request_t;
struct xcb_xv_get_video_request_t;
struct xcb_xv_grab_port_request_t;
struct xcb_xv_image_format_info_t;
struct xcb_xv_port_notify_event_t;
struct xcb_xv_put_image_request_t;
struct xcb_xv_put_still_request_t;
struct xcb_xv_put_video_request_t;
struct xcb_xv_rational_iterator_t;
struct GLXVendorPrivateWithReply;
struct _ApplicationShellClassRec;
struct _ScreenSaverSetAttributes;
struct _WindowsWMSetFrontProcess;
struct _XF86MiscGetMouseSettings;
struct _XF86MiscSetClientVersion;
struct _XF86MiscSetGrabKeysState;
struct _XF86MiscSetMouseSettings;
struct _XF86RushUnlockAllPixmaps;
struct _XRenderPictureAttributes;
struct _XResQueryClientResources;
struct _XkbExtensionDeviceNotify;
struct __kernel_sockaddr_storage;
struct _xkbExtensionDeviceNotify;
struct _xkbKTSetMapEntryWireDesc;
struct bfd_elf_version_expr_head;
struct xcb_alloc_color_request_t;
union xcb_client_message_data_t;
struct xcb_create_notify_event_t;
struct xcb_damage_notify_event_t;
struct xcb_dpms_capable_cookie_t;
struct xcb_dpms_enable_request_t;
struct xcb_free_colors_request_t;
struct xcb_free_cursor_request_t;
struct xcb_free_pixmap_request_t;
struct xcb_get_atom_name_reply_t;
struct xcb_get_font_path_reply_t;
struct xcb_get_geometry_cookie_t;
struct xcb_get_property_cookie_t;
struct xcb_glx_bool32_iterator_t;
struct xcb_glx_gen_lists_reply_t;
struct xcb_glx_get_error_reply_t;
struct xcb_glx_get_mapdv_reply_t;
struct xcb_glx_get_mapfv_reply_t;
struct xcb_glx_get_mapiv_reply_t;
struct xcb_glx_is_direct_reply_t;
struct xcb_glx_is_list_request_t;
struct xcb_glx_pixmap_iterator_t;
struct xcb_glx_wait_gl_request_t;
struct xcb_glx_window_iterator_t;
struct xcb_grab_button_request_t;
struct xcb_grab_keyboard_reply_t;
struct xcb_grab_pointer_cookie_t;
struct xcb_grab_server_request_t;
struct xcb_intern_atom_request_t;
struct xcb_keymap_notify_event_t;
struct xcb_kill_client_request_t;
struct xcb_lookup_color_cookie_t;
struct xcb_motion_notify_event_t;
struct xcb_poly_text_8_request_t;
struct xcb_query_colors_cookie_t;
struct xcb_query_keymap_cookie_t;
struct xcb_query_pointer_reply_t;
struct xcb_randr_refresh_rates_t;
struct xcb_render_directformat_t;
struct xcb_render_pictforminfo_t;
struct xcb_res_client_iterator_t;
struct xcb_shape_kind_iterator_t;
struct xcb_shm_get_image_reply_t;
struct xcb_sync_alarm_iterator_t;
struct xcb_sync_int64_iterator_t;
struct xcb_visualtype_iterator_t;
struct xcb_xevie_start_request_t;
struct xcb_xv_grab_port_cookie_t;
struct FT_Incremental_FuncsRec_;
struct GLXGetDrawableAttributes;
struct GLXQueryExtensionsString;
struct _JAWT_DrawingSurfaceInfo;
struct _PanoramiXGetScreenCount;
struct _PrintGetImageResolution;
struct _PrintSetImageResolution;
struct _ScreenSaverQueryVersion;
struct _WindowsWMReenableUpdate;
struct _XDGACopyTransparentArea;
struct _XF86BigfontQueryVersion;
struct _XF86DGAQueryDirectVideo;
struct _XF86RushAT3DDisableRegs;
struct _XF86RushStatusRegOffset;
struct _XF86VidModeGetGammaRamp;
struct _XF86VidModeQueryVersion;
struct _XF86VidModeSetGammaRamp;
struct _XIMStringConversionText;
struct _XkbDeviceValuatorAction;
struct __pthread_internal_slist;
struct _xSyncCounterNotifyEvent;
struct _xSyncListSystemCounters;
struct _xkbGetIndicatorMapReply;
struct _xkbIndicatorMapWireDesc;
struct _xkbSymInterpretWireDesc;
struct ipx_interface_definition;
struct usb_interface_descriptor;
struct xcb_alloc_color_cookie_t;
struct xcb_button_press_event_t;
struct xcb_clear_area_request_t;
struct xcb_close_font_request_t;
struct xcb_coloritem_iterator_t;
struct xcb_copy_plane_request_t;
struct xcb_dpms_capable_reply_t;
struct xcb_enter_notify_event_t;
struct xcb_get_geometry_reply_t;
struct xcb_get_property_reply_t;
struct xcb_glx_finish_request_t;
struct xcb_glx_is_list_cookie_t;
struct xcb_glx_render_request_t;
struct xcb_glx_wait_x_request_t;
struct xcb_grab_pointer_reply_t;
struct xcb_intern_atom_cookie_t;
struct xcb_list_fonts_request_t;
struct xcb_list_hosts_request_t;
struct xcb_lookup_color_reply_t;
struct xcb_map_window_request_t;
struct xcb_poly_point_request_t;
struct xcb_query_colors_reply_t;
struct xcb_query_font_request_t;
struct xcb_query_keymap_reply_t;
struct xcb_query_tree_request_t;
struct xcb_record_client_info_t;
struct xcb_rectangle_iterator_t;
struct xcb_render_glyph_error_t;
struct xcb_send_event_request_t;
struct xcb_set_dashes_request_t;
struct xcb_setup_authenticate_t;
struct xcb_shape_mask_request_t;
struct xcb_shape_notify_event_t;
struct xcb_shm_attach_request_t;
struct xcb_shm_detach_request_t;
struct xcb_sync_await_request_t;
struct xcb_sync_counter_error_t;
struct xcb_sync_systemcounter_t;
struct xcb_sync_waitcondition_t;
struct xcb_timecoord_iterator_t;
struct xcb_timestamp_iterator_t;
struct xcb_ungrab_key_request_t;
struct xcb_unmap_notify_event_t;
struct xcb_xevie_send_request_t;
struct xcb_xevie_start_cookie_t;
struct xcb_xv_format_iterator_t;
struct xcb_xv_grab_port_reply_t;
struct LIBMTP_mtpdevice_struct;
struct _AppleWMSetFrontProcess;
struct _LbxQueryExtensionReply;
struct _PanoramiXGetScreenSize;
struct _PrintGetPageDimensions;
struct _PrintRehashPrinterList;
struct _ScreenSaverSelectInput;
struct _TransientShellClassRec;
struct _VendorShellExtClassRec;
struct _ViewportConstraintsRec;
struct _WindowsWMDisableUpdate;
struct _WindowsWMFrameSetTitle;
struct _XEVIGetVisualInfoReply;
struct _XF86DGAGetViewPortSize;
struct _XF86DGAInstallColormap;
struct _XF86DGAViewPortChanged;
struct _XF86MiscGetKbdSettings;
struct _XF86MiscSetKbdSettings;
struct _XF86RushAT3DEnableRegs;
struct _XF86RushSetPixelStride;
struct _XF86VidModeAddModeLine;
struct _XF86VidModeGetModeLine;
struct _XF86VidModeModModeLine;
struct _XF86VidModeSetViewPort;
struct _XRRScreenConfiguration;
struct __pthread_cleanup_frame;
struct _pthread_cleanup_buffer;
struct _xSyncDestroyCounterReq;
struct _xkbListComponentsReply;
struct _xkbPerClientFlagsReply;
struct _xkbShapeDoodadWireDesc;
struct _xkmIndicatorDoodadDesc;
struct usb_endpoint_descriptor;
struct xcb_alloc_color_reply_t;
struct xcb_change_gc_request_t;
struct xcb_charinfo_iterator_t;
struct xcb_colormap_iterator_t;
struct xcb_copy_area_request_t;
struct xcb_create_gc_request_t;
struct xcb_dpms_info_request_t;
struct xcb_drawable_iterator_t;
struct xcb_fill_poly_request_t;
struct xcb_fontable_iterator_t;
struct xcb_fontprop_iterator_t;
struct xcb_gcontext_iterator_t;
struct xcb_get_image_request_t;
struct xcb_glx_finish_cookie_t;
struct xcb_glx_flush_request_t;
struct xcb_glx_generic_error_t;
struct xcb_glx_is_list_reply_t;
struct xcb_intern_atom_reply_t;
struct xcb_list_fonts_cookie_t;
struct xcb_list_hosts_cookie_t;
struct xcb_map_request_event_t;
struct xcb_no_exposure_event_t;
struct xcb_open_font_request_t;
struct xcb_poly_line_request_t;
struct xcb_put_image_request_t;
struct xcb_query_font_cookie_t;
struct xcb_query_tree_cookie_t;
struct xcb_randr_screen_size_t;
struct xcb_render_indexvalue_t;
struct xcb_render_pictscreen_t;
struct xcb_render_pictvisual_t;
struct xcb_res_type_iterator_t;
struct xcb_shape_op_iterator_t;
struct xcb_visualid_iterator_t;
struct xcb_xevie_end_request_t;
struct xcb_xevie_send_cookie_t;
struct xcb_xevie_start_reply_t;
struct xcb_xv_attribute_info_t;
struct xcb_xv_bad_port_error_t;
struct xcb_xv_image_iterator_t;
struct xcb_xvmc_surface_info_t;
struct GLXBindSwapBarrierSGIX;
struct GLXHyperpipeConfigSGIX;
struct GLXQueryContextInfoEXT;
struct LIBMTP_playlist_struct;
struct _AppleWMReenableUpdate;
struct _AppleWMSetWindowLevel;
struct _BitmapScalablePrivate;
struct _FontCacheQueryVersion;
struct _LbxGetKeyboardMapping;
struct _LbxGetModifierMapping;
struct _LbxInvalidateTagEvent;
struct _OverrideShellClassRec;
struct _PanoramiXQueryVersion;
struct _PrintGetContextScreen;
struct _TMComplexBindProcsRec;
struct _TMComplexStateTreeRec;
struct _TopLevelShellClassRec;
struct _WindowsWMFrameGetRect;
struct _WindowsWMQueryVersion;
struct _XDGAGetViewportStatus;
struct _XF86VidModeSwitchMode;
struct _XkbSwitchScreenAction;
struct _xSyncAlarmNotifyEvent;
struct _xSyncChangeCounterReq;
struct _xSyncCreateCounterReq;
struct _xkbDeviceLedsWireDesc;
struct _xkbGetDeviceInfoReply;
struct _xkbKTMapEntryWireDesc;
struct _xkbLogoDoodadWireDesc;
struct _xkbOverlayKeyWireDesc;
struct _xkbOverlayRowWireDesc;
struct _xkbTextDoodadWireDesc;
struct demangle_operator_info;
struct nd_opt_home_agent_info;
struct rose_facilities_struct;
struct sg_simple_inquiry_resp;
struct xcb_dpms_info_cookie_t;
struct xcb_get_image_cookie_t;
struct xcb_glx_finish_reply_t;
struct xcb_grab_key_request_t;
struct xcb_keycode_iterator_t;
struct xcb_list_fonts_reply_t;
struct xcb_list_hosts_reply_t;
struct xcb_map_notify_event_t;
struct xcb_poly_arc_request_t;
struct xcb_query_font_reply_t;
struct xcb_query_tree_reply_t;
struct xcb_record_ext_range_t;
struct xcb_render_glyphinfo_t;
struct xcb_render_pictdepth_t;
struct xcb_render_transform_t;
struct xcb_render_trapezoid_t;
struct xcb_segment_iterator_t;
struct xcb_shm_seg_iterator_t;
struct xcb_sync_alarm_error_t;
struct xcb_xevie_end_cookie_t;
struct xcb_xevie_send_reply_t;
struct xcb_xv_encoding_info_t;
struct xcb_xv_port_iterator_t;
struct GLXMakeContextCurrent;
struct GLXMakeCurrentReadSGI;
struct WBXMLAttrValueEntry_s;
struct WBXMLContentHandler_s;
struct WBXMLNameSpaceEntry_s;
struct XawPrintShellClassRec;
struct _AppleWMDisableUpdate;
struct _AppleWMSetWindowMenu;
struct _DialogConstraintsRec;
struct _ExtensionSelectorRec;
struct _LbxBeginLargeRequest;
struct _LbxGetWinAttrAndGeom;
struct _PanedConstraintsPart;
struct _PrintGetDocumentData;
struct _PrintGetOneAttribute;
struct _PrintPutDocumentData;
struct _QueuedRequestInfoRec;
struct _ScreenSaverQueryInfo;
struct _SessionShellClassRec;
struct _TMComplexBindDataRec;
struct _TMSimpleBindProcsRec;
struct _TMSimpleStateTreeRec;
struct _WindowsWMSelectInput;
struct _XDGACloseFramebuffer;
struct _XDGASetClientVersion;
struct _XEVIGetVisualInfoReq;
struct _XF86BigfontQueryFont;
struct _XF86MiscGetFilePaths;
struct _XF86MiscQueryVersion;
struct _XF86RushQueryVersion;
struct _XF86RushUnlockPixmap;
struct _XawTextSelectionSalt;
struct _XkbNewKeyboardNotify;
struct _XkbRedirectKeyAction;
struct _XmuDisplayQueueEntry;
struct _XtCheckpointTokenRec;
struct __gconv_loaded_object;
struct _xPrintAttributeEvent;
struct _xSyncDestroyAlarmReq;
struct _xSyncQueryCounterReq;
struct _xkbAnyDoodadWireDesc;
struct _xkbGetCompatMapReply;
struct _xkbGetIndicatorState;
struct _xkbGetKbdByNameReply;
struct _xkbGetNamedIndicator;
struct _xkbNewKeyboardNotify;
struct _xkbSetDebuggingFlags;
struct _xkbSetNamedIndicator;
struct _xkbUseExtensionReply;
struct ax25_route_opt_struct;
struct cpufreq_affected_cpus;
struct usb_config_descriptor;
struct usb_descriptor_header;
struct usb_device_descriptor;
struct usb_string_descriptor;
struct xcb_button_iterator_t;
struct xcb_char2b_iterator_t;
struct xcb_copy_gc_request_t;
struct xcb_cursor_iterator_t;
struct xcb_dpms_info_reply_t;
struct xcb_format_iterator_t;
struct xcb_free_gc_request_t;
struct xcb_get_image_reply_t;
struct xcb_key_press_event_t;
struct xcb_keysym_iterator_t;
struct xcb_pixmap_iterator_t;
struct xcb_record_range_16_t;
struct xcb_render_pointfix_t;
struct xcb_render_triangle_t;
struct xcb_screen_iterator_t;
struct xcb_window_iterator_t;
struct xcb_x_print_printer_t;
struct xcb_xevie_end_reply_t;
struct xcb_xv_adaptor_info_t;
struct FT_WinFNT_HeaderRec_;
struct GLXJoinSwapGroupSGIX;
struct GLXQueryServerString;
struct LIBMTP_folder_struct;
struct LIBMTP_object_struct;
struct WBXMLAttributeName_s;
struct WBXMLExtValueEntry_s;
struct WBXMLPublicIDEntry_s;
struct WBXMLTreeAttribute_s;
struct XawVendorShellExtRec;
struct XtPerDisplayInputRec;
struct _AppleWMFrameGetRect;
struct _AppleWMFrameHitTest;
struct _AppleWMQueryVersion;
struct _ConstraintClassPart;
struct _FontScaleAliasEntry;
struct _FormConstraintsPart;
struct _JAWT_DrawingSurface;
struct _LbxBitmapCompMethod;
struct _LbxLargeRequestData;
struct _LbxListenToAllEvent;
struct _LbxListenToOneEvent;
struct _LbxPixmapCompMethod;
struct _LbxReleaseCmapEvent;
struct _LbxSendTagDataEvent;
struct _PanedConstraintsRec;
struct _PrintDestroyContext;
struct _PrintGetPrinterList;
struct _QueryEncodingsReply;
struct _QueryExtensionReply;
struct _TMParseStateTreeRec;
struct _TMSimpleBindDataRec;
struct _TreeConstraintsPart;
struct _VendorShellClassRec;
struct _XDGAInstallColormap;
struct _XDGAOpenFramebuffer;
struct _XF86DGAQueryVersion;
struct _XF86MiscPassMessage;
struct _XF86RushSetCopyMode;
struct _XF86VidModeGetGamma;
struct _XF86VidModeSetGamma;
struct _XawListReturnStruct;
struct _XawTextPropertyList;
struct _XkbConfigUnboundMod;
struct _XkbDeviceLedChanges;
struct _XkbIndicatorChanges;
struct _XkbStateNotifyEvent;
struct __GLXvisualConfigRec;
struct _bfd_window_internal;
struct _xExtendedVisualInfo;
struct _xSyncChangeAlarmReq;
struct _xSyncCreateAlarmReq;
struct _xkbBehaviorWireDesc;
struct _xkbGetControlsReply;
struct _xkbGetGeometryReply;
struct _xkmIndicatorMapDesc;
struct _xkmSymInterpretDesc;
struct bfd_elf_dynamic_list;
struct bfd_elf_version_deps;
struct bfd_elf_version_expr;
struct bfd_elf_version_tree;
struct bfd_link_needed_list;
struct bfd_link_order_reloc;
struct ipx_route_definition;
struct iw_michaelmicfailure;
struct sensors_feature_data;
struct vm86plus_info_struct;
struct xcb_depth_iterator_t;
struct xcb_focus_in_event_t;
struct xcb_point_iterator_t;
struct xcb_record_range_8_t;
struct xcb_render_linefix_t;
struct xcb_render_spanfix_t;
struct xcb_setup_iterator_t;
struct FT_OutlineGlyphRec_;
struct FT_Size_RequestRec_;
struct FT_Var_Named_Style_;
struct GLXCreateNewContext;
struct GLXDestroyGLXPixmap;
struct GLXGetFBConfigsSGIX;
struct GLXGetVisualConfigs;
struct LIBMTP_track_struct;
struct _AppleWMSelectInput;
struct _AsciiSinkClassPart;
struct _CompositeClassPart;
struct _ConstraintClassRec;
struct _ExifContentPrivate;
struct _FormConstraintsRec;
struct _LbxEndLargeRequest;
struct _MenuButtonClassRec;
struct _MultiSinkClassPart;
struct _PrintCreateContext;
struct _PrintGetAttributes;
struct _PrintInputSelected;
struct _PrintSetAttributes;
struct _QueryAdaptorsReply;
struct _ScreenSaverSuspend;
struct _ShapeGetRectangles;
struct _ShapeInputSelected;
struct _SimpleMenuClassRec;
struct _StripChartClassRec;
struct _TMModifierMatchRec;
struct _TreeConstraintsRec;
struct _WindowsWMFrameDraw;
struct _XDGACreateColormap;
struct _XF86DGADirectVideo;
struct _XF86DGASetViewPort;
struct _XF86RushLockPixmap;
struct _XSyncSystemCounter;
struct _XawTextPaintStruct;
struct _XcursorChunkHeader;
struct _XkbCompatMapNotify;
struct _XkbControlsChanges;
struct _XkbDeviceBtnAction;
struct _XkbIndicatorDoodad;
struct _XkbIndicatorMapRec;
struct _XkbIndicatorNotify;
struct _XkbRF_DescribeVars;
struct _XkbSymInterpretRec;
struct _XtPerDisplayStruct;
struct _xSyncQueryAlarmReq;
struct _xSyncSetCounterReq;
struct _xSyncWaitCondition;
struct _xkbCompatMapNotify;
struct _xkbGetIndicatorMap;
struct _xkbIndicatorNotify;
struct _xkbKeyTypeWireDesc;
struct _xkbOutlineWireDesc;
struct _xkbOverlayWireDesc;
struct _xkbSectionWireDesc;
struct _xkbSetIndicatorMap;
struct _xkbVModMapWireDesc;
struct _xkmShapeDoodadDesc;
struct ax25_bpqaddr_struct;
struct bfd_link_hash_entry;
struct bfd_link_hash_table;
struct colorhist_list_item;
union ieee854_long_double;
struct internalCallbackRec;
struct nd_neighbor_solicit;
struct nd_opt_adv_interval;
struct user_fpxregs_struct;
struct xcb_atom_iterator_t;
struct xcb_font_iterator_t;
struct xcb_host_iterator_t;
struct xcb_request_error_t;
struct xcb_setup_request_t;
struct FT_BitmapGlyphRec_;
struct FT_Renderer_Class_;
struct GLXCreateGLXPixmap;
struct JNIInvokeInterface;
struct JNINativeInterface;
struct LIBMTP_file_struct;
struct _AppleWMSetCanQuit;
struct _AsciiSinkClassRec;
struct _AsciiSrcClassPart;
struct _AsciiTextClassRec;
struct _CompositeClassRec;
struct _FSXFontInfoHeader;
struct _FontScalableEntry;
struct _FontScalableExtra;
struct _IceSavedReplyWait;
struct _LbxChangeProperty;
struct _LbxFreeCellsEvent;
struct _LbxIncrementPixel;
struct _LbxModifySequence;
struct _LbxQueryExtension;
struct _MultiSinkClassRec;
struct _MultiSrcClassPart;
struct _PanoramiXGetState;
struct _PrintQueryScreens;
struct _PrintQueryVersion;
struct _ProcessContextRec;
struct _ScreenSaverNotify;
struct _ScrollbarClassRec;
struct _ShapeQueryExtents;
struct _ShapeQueryVersion;
struct _SmeThreeDClassRec;
struct _TextSinkClassPart;
struct _XDGAFillRectangle;
struct _XF86DGAGetVidPage;
struct _XF86DGAGetVideoLL;
struct _XF86DGASetVidPage;
struct _XIMHotKeyTriggers;
struct _XcursorFileHeader;
struct _XevieQueryVersion;
struct _XkbComponentNames;
struct _XkbConfigRtrnPriv;
struct _XkbControlsNotify;
struct _XkbMapNotifyEvent;
struct __gconv_trans_data;
struct _contextErrDataRec;
struct _xkbActionWireDesc;
struct _xkbControlsNotify;
union _xkbDoodadWireDesc;
struct _xkbLatchLockState;
struct _xkbListComponents;
struct _xkbPerClientFlags;
struct _xkbSymMapWireDesc;
struct _xkmKTMapEntryDesc;
struct _xkmLogoDoodadDesc;
struct _xkmOverlayKeyDesc;
struct _xkmOverlayRowDesc;
struct _xkmTextDoodadDesc;
struct ax25_routes_struct;
struct bfd_link_callbacks;
struct demangle_component;
struct full_sockaddr_ax25;
struct full_sockaddr_rose;
struct gmon_cg_arc_record;
struct icmp6_router_renum;
struct jas_icctagtabent_s;
struct lineno_cache_entry;
struct nd_neighbor_advert;
struct nd_opt_prefix_info;
struct raw_config_request;
struct reloc_howto_struct;
struct sysfs_class_device;
struct tupleint_list_item;
struct usb_hid_descriptor;
struct user_fpregs_struct;
struct wireless_scan_head;
struct xcb_arc_iterator_t;
struct xcb_bell_request_t;
struct xcb_expose_event_t;
struct xcb_record_range_t;
struct xcb_render_color_t;
struct xcb_rgb_iterator_t;
struct xcb_setup_failed_t;
struct xcb_str_iterator_t;
struct xcb_sync_trigger_t;
struct FTC_ImageTypeRec_;
struct FT_Glyph_Metrics_;
struct FT_Outline_Funcs_;
struct FT_Raster_Params_;
struct GLXDestroyContext;
struct GLXDestroyPbuffer;
struct WBXMLTreeClbCtx_s;
struct _ATranslationData;
struct _AppleWMFrameDraw;
struct _AsciiSrcClassRec;
struct _CaseConverterRec;
struct _ExifEntryPrivate;
struct _HookObjClassPart;
struct _LbxInvalidateTag;
struct _ModToKeysymTable;
struct _MultiSrcClassRec;
struct _PortholeClassRec;
struct _PrintSelectInput;
struct _QueuedRequestRec;
struct _RectObjClassPart;
struct _RepeaterClassRec;
struct _ShapeSelectInput;
struct _ShmGetImageReply;
struct _SmeLineClassPart;
struct _TemplateClassRec;
struct _TextSinkClassRec;
struct _TextSrcClassPart;
struct _ViewportClassRec;
struct _XConicalGradient;
struct _XDGAQueryVersion;
struct _XEVIQueryVersion;
struct _XIMHotKeyTrigger;
struct _XResQueryClients;
struct _XResQueryVersion;
struct _XcupQueryVersion;
struct _XevieSelectInput;
struct _XftGlyphFontSpec;
struct _XkbAccessXNotify;
struct _XkbActionMessage;
struct _XkbCompatChanges;
struct _XkbComponentList;
struct _XkbComponentName;
struct _XkbConfigModInfo;
struct _XkbDeviceChanges;
struct _XkbDeviceLedInfo;
struct _XkbGeometrySizes;
struct _XkbMessageAction;
struct _XkbPtrDfltAction;
struct _XrmHashBucketRec;
struct __gconv_step_data;
struct _ss_request_entry;
struct _ss_request_table;
struct _xPrintPrintEvent;
struct _xSyncGetPriority;
struct _xSyncSetPriority;
struct _xkbAccessXNotify;
struct _xkbActionMessage;
struct _xkbGetDeviceInfo;
struct _xkbGetNamesReply;
struct _xkbGetStateReply;
struct _xkbPointWireDesc;
struct _xkbSetDeviceInfo;
struct _xkbShapeWireDesc;
struct _xkmAnyDoodadDesc;
struct _xkmKeySymMapDesc;
struct ax25_parms_struct;
struct fb_fix_screeninfo;
struct fb_var_screeninfo;
struct nd_router_solicit;
struct ns_tcp_tsig_state;
struct po_xerror_handler;
struct re_pattern_buffer;
struct reloc_cache_entry;
struct revectored_struct;
struct rose_cause_struct;
struct rose_route_struct;
struct sensors_chip_name;
struct sg_scsi_sense_hdr;
struct splay_tree_node_s;
struct xcb_render_trap_t;
struct xcb_value_error_t;
struct xcb_xevie_event_t;
struct xcb_xv_rational_t;
struct BDF_PropertyRec_;
struct CID_FaceDictRec_;
struct CID_FaceInfoRec_;
struct CLIENT__clnt_ops;
struct FT_GlyphSlotRec_;
struct FT_Module_Class_;
struct FT_Multi_Master_;
struct FT_Raster_Funcs_;
struct FT_Size_Metrics_;
struct GLXCreateContext;
struct GLXCreatePbuffer;
struct GLXDestroyPixmap;
struct GLXDestroyWindow;
struct GLXVendorPrivate;
struct JDK1_1AttachArgs;
struct JavaVMAttachArgs;
struct SearchAndReplace;
struct WBXMLAttrEntry_s;
struct WBXMLAttribute_s;
struct WBXMLLangEntry_s;
struct XML_ParserStruct;
struct XawPrintShellRec;
struct _CommandClassRec;
struct _ExifDataPrivate;
struct _FontBitmapEntry;
struct _FontPathElement;
struct _HookObjClassRec;
struct _LbxQueryVersion;
struct _MenuButtonClass;
struct _ObjectClassPart;
struct _PerDisplayTable;
struct _PrintGetContext;
struct _PrintSetContext;
struct _RectObjClassRec;
struct _ShapeRectangles;
struct _ShmCreatePixmap;
struct _ShmQueryVersion;
struct _SmeBSBClassPart;
struct _SmeLineClassRec;
struct _TMBranchHeadRec;
struct _TMKeyContextRec;
struct _TextSrcClassRec;
struct _TranslationData;
struct _WMShellClassRec;
struct _WindowsWMNotify;
struct _XConnectionInfo;
struct _XDGASelectInput;
struct _XDGASetViewport;
struct _XExtDisplayInfo;
struct _XExtensionHooks;
struct _XLinearGradient;
struct _XRadialGradient;
struct _XagDestroyAssoc;
struct _XagQueryVersion;
struct _XawGripCallData;
struct _XawTextKillRing;
struct _XawTextProperty;
struct _XcmsFunctionSet;
struct _XcmsPerScrnInfo;
struct _XcupStoreColors;
struct _XcursorComments;
struct _XftCharFontSpec;
struct _XkbClientMapRec;
struct _XkbCompatMapRec;
struct _XkbConfigFields;
struct _XkbIndicatorRec;
struct _XkbPtrBtnAction;
struct _XkbServerMapRec;
struct _XmuDisplayQueue;
struct _XtServerGrabRec;
struct _XvMCMpegControl;
struct __GLXFBConfigRec;
struct _xQueryFontReply;
struct _xSyncInitialize;
struct _xkbGetCompatMap;
struct _xkbGetKbdByName;
struct _xkbModsWireDesc;
struct _xkbSelectEvents;
struct _xkbSetCompatMap;
struct _xkbUseExtension;
struct _xkmBehaviorDesc;
struct _xkmGeometryDesc;
struct _xwd_file_header;
struct authdes_fullname;
struct ax25_info_struct;
struct ccs_modesel_head;
struct coff_comdat_info;
struct demangler_engine;
struct disassemble_info;
struct ecoff_debug_info;
struct ecoff_debug_swap;
struct group_source_req;
struct jas_iccattrval_s;
struct lt_user_dlloader;
struct nd_router_advert;
struct pcap_file_header;
struct po_error_handler;
struct sockaddr_storage;
struct sound_timer_info;
struct ternary_node_def;
struct user_regs_struct;
struct xcb_connection_t;
struct xcb_res_client_t;
struct xcb_sync_int64_t;
struct xcb_visualtype_t;
struct FT_Bitmap_Size_;
struct FT_Glyph_Class_;
struct FT_ListNodeRec_;
struct GLXCreatePixmap;
struct GLXCreateWindow;
struct GLXGetFBConfigs;
struct GLXQueryContext;
struct GLXQueryVersion;
struct SVCXPRT__xp_ops;
struct WBXMLTagEntry_s;
struct WBXMLTreeNode_s;
struct _BitmapInstance;
struct _ConstraintPart;
struct _DialogClassRec;
struct _FontAliasEntry;
struct _FontMapReverse;
struct _FontResolution;
struct _JAWT_Rectangle;
struct _LbxAllowMotion;
struct _LbxCloseClient;
struct _LbxGetProperty;
struct _LbxInternAtoms;
struct _LbxSwitchEvent;
struct _ObjectClassRec;
struct _PanedClassPart;
struct _PannerClassRec;
struct _PrintStartPage;
struct _ProtocolStream;
struct _SignalEventRec;
struct _SimpleClassRec;
struct _SimpleMenuPart;
struct _SmeBSBClassRec;
union _TMStateTreeRec;
struct _TMTypeMatchRec;
struct _ThreeDClassRec;
struct _ToggleClassRec;
struct _WidgetClassRec;
struct _XComposeStatus;
struct _XConnWatchInfo;
struct _XDGAQueryModes;
struct _XExtensionInfo;
struct _XInternalAsync;
struct _XagCreateAssoc;
struct _XawIcTablePart;
struct _XcmsColorSpace;
struct _XcursorAnimate;
struct _XcursorComment;
struct _XcursorCursors;
struct _XcursorFileToc;
struct _XkbConfigField;
struct _XkbCtrlsAction;
struct _XkbGroupAction;
struct _XkbKbdDpyState;
struct _XkbKeyAliasRec;
struct _XkbNameChanges;
struct _XkbNamesNotify;
struct _XkbShapeDoodad;
struct _XkbUI_ViewOpts;
struct __locale_struct;
struct _contextDataRec;
struct _old_mixer_info;
struct _xkbGetControls;
struct _xkbGetGeometry;
struct _xkbGetMapReply;
struct _xkbKeyWireDesc;
struct _xkbNamesNotify;
struct _xkbRowWireDesc;
struct _xkbSetControls;
struct _xkbSetGeometry;
struct _xkbStateNotify;
struct _xkmKeyTypeDesc;
struct _xkmOutlineDesc;
struct _xkmOverlayDesc;
struct _xkmSectionDesc;
struct _xkmSectionInfo;
struct _xkmVModMapDesc;
struct ax25_ctl_struct;
struct ax25_fwd_struct;
struct colorfile_entry;
struct console_font_op;
struct consolefontdesc;
struct event_watermark;
struct fddi_8022_1_hdr;
struct fddi_8022_2_hdr;
union internal_auxent;
struct internal_syment;
struct ipx_config_data;
struct mixer_vol_table;
struct nr_parms_struct;
struct nr_route_struct;
struct short_hand_verf;
struct sysfs_attribute;
struct vm86plus_struct;
struct wireless_config;
struct xMbufBufferInfo;
struct xcb_auth_info_t;
struct xcb_coloritem_t;
struct xcb_extension_t;
struct xcb_rectangle_t;
struct xcb_timecoord_t;
struct xcb_xv_format_t;
struct AUTH__auth_ops;
struct FTC_ScalerRec_;
struct FT_CharMapRec_;
union FT_StreamDesc_;
struct FT_UnitVector_;
struct GLXCopyContext;
struct GLXMakeCurrent;
struct GLXRenderLarge;
struct GLXSwapBuffers;
struct JDK1_1InitArgs;
struct JavaVMInitArgs;
struct PS_FontInfoRec;
struct PS_PrivateRec_;
struct SANE_Auth_Data;
struct TT_HoriHeader_;
struct TT_MaxProfile_;
struct TT_Postscript_;
struct TT_VertHeader_;
struct WBXMLEncoder_s;
struct _ActionHookRec;
struct _AppleWMNotify;
struct _BitmapSources;
struct _CompositePart;
struct _ConstraintRec;
struct _CoreClassPart;
struct _ExifMnoteData;
struct _FcGlobalCache;
struct _FontDirectory;
struct _LabelClassRec;
struct _LbxCloseEvent;
struct _LbxStartProxy;
struct _LbxStreamOpts;
struct _MenuButtonRec;
struct _PanedClassRec;
struct _PrintStartDoc;
struct _PrintStartJob;
struct _ShellClassRec;
struct _ShmCompletion;
struct _SimpleMenuRec;
struct _StripChartRec;
union _TMBindDataRec;
struct _TimerEventRec;
struct _TreeClassPart;
struct _XAnyClassinfo;
struct _XExtEventInfo;
struct _XImage__funcs;
struct _XValuatorInfo;
struct _XawTextAnchor;
struct _XawTextEntity;
struct _XawTextMargin;
struct _XcursorImages;
struct _XkbBellNotify;
struct _XkbConfigRtrn;
struct _XkbDeviceInfo;
struct _XkbKTMapEntry;
struct _XkbKeyNameRec;
struct _XkbLogoDoodad;
struct _XkbMapChanges;
struct _XkbOverlayKey;
struct _XkbOverlayRow;
struct _XkbRF_VarDefs;
struct _XkbRF_VarDesc;
struct _XkbTextDoodad;
struct _XmuWidgetNode;
struct _XtCallbackRec;
struct _obstack_chunk;
struct _ss_rp_options;
struct _xAnyClassinfo;
struct _xSyncAwaitReq;
struct _xValuatorInfo;
struct _xkbBellNotify;
struct _xkmActionDesc;
union _xkmDoodadDesc;
struct accepted_reply;
struct atalk_netrange;
struct audio_buf_info;
struct authunix_parms;
struct bfd_hash_entry;
struct bfd_hash_table;
struct bfd_link_order;
struct bp_getfile_arg;
struct bp_getfile_res;
struct colorhist_item;
struct copr_debug_buf;
struct cpufreq_policy;
union ieee754_double;
struct internal_state;
struct ip6_opt_router;
struct ip6_opt_tunnel;
struct ip_mreq_source;
struct iw_modul_descr;
struct jas_cmpxform_s;
struct klm_unlockargs;
struct nlm_unlockargs;
struct objalloc_align;
struct partition_elem;
struct ppp_comp_stats;
struct rejected_reply;
struct rrd_time_value;
struct sbi_instrument;
struct st_soundstream;
struct usb_ctrl_setup;
struct usb_dev_handle;
struct xcb_charinfo_t;
struct xcb_fontprop_t;
struct xcb_res_type_t;
struct xcb_xv_image_t;
struct ypall_callback;
struct ypbind_binding;
struct yppushresp_xfr;
struct ypresp_key_val;
struct ypresp_maplist;
struct FT_MemoryRec_;
struct FT_Open_Args_;
struct FT_Parameter_;
struct FT_StreamRec_;
struct GLUtesselator;
struct GLXClientInfo;
struct La_i86_retval;
struct PS_DesignMap_;
struct WBXMLBuffer_s;
struct WBXMLParser_s;
struct _AsciiSinkRec;
struct _AsciiSrcPart;
struct _BlockHookRec;
struct _CommandClass;
struct _CompositeRec;
struct _FPEFunctions;
struct _FSPropOffset;
struct _FcObjectType;
struct _FontRenderer;
struct _FontScalable;
struct _FormClassRec;
struct _GripClassRec;
struct _IO_FILE_plus;
struct _IjsClientCtx;
struct _IjsServerCtx;
struct _LBXDeltaElem;
struct _LateBindings;
struct _LbxCopyPlane;
struct _LbxImageText;
struct _LbxNewClient;
struct _LbxPolyPoint;
struct _LbxQueryFont;
struct _LbxStopProxy;
struct _ListClassRec;
struct _MultiSinkRec;
struct _MultiSrcPart;
struct _ParamInfoRec;
struct _PrintEndPage;
struct _ScrollbarRec;
struct _ShapeCombine;
struct _SmeClassPart;
struct _SmeThreeDRec;
struct _TMConvertRec;
struct _TextClassRec;
struct _TreeClassRec;
struct _ViewportPart;
struct _XAsyncEState;
struct _XDGACopyArea;
struct _XPointDouble;
struct _XcursorImage;
struct _XftGlyphSpec;
struct _XkbAnyAction;
struct _XkbAnyDoodad;
struct _XkbISOAction;
struct _XkbModAction;
struct _XkbPtrAction;
struct _XkbSymMapRec;
struct _XkbUI_Select;
struct _XtActionsRec;
struct _XtGrabExtRec;
struct __exit_status;
struct __jmp_buf_tag;
struct __sched_param;
struct __sysctl_args;
struct _libc_fpstate;
struct _win_st__pdat;
struct _xkbMapNotify;
struct _xkmPointDesc;
struct _xkmShapeDesc;
struct bfd_arch_info;
struct bfd_link_info;
struct bfd_sym_chain;
struct bp_whoami_arg;
struct bp_whoami_res;
struct directory_obj;
struct fddi_snap_hdr;
struct getquota_args;
struct getquota_rslt;
struct gmon_hist_hdr;
union ieee754_float;
struct inotify_event;
struct ip6_opt_jumbo;
struct ipx_route_def;
struct iw_encode_ext;
struct iw_pmkid_cand;
struct iw_statistics;
struct nd_opt_rd_hdr;
struct nlm_shareargs;
struct nr_ctl_struct;
struct partition_def;
struct pcap_etherent;
struct ps_prochandle;
struct remove_sample;
struct rpc_createerr;
struct rstat_timeval;
struct seq_event_rec;
struct sockaddr_ax25;
struct sockaddr_rose;
struct st_signalinfo;
struct synth_control;
struct td_thr_events;
struct tr_statistics;
struct usb_interface;
struct wireless_info;
struct wireless_scan;
struct xcb_segment_t;
struct ypbind_setdom;
struct ypdelete_args;
struct ypresp_master;
struct ypupdate_args;
struct FTC_FontRec_;
struct FTC_SBitRec_;
struct FT_GlyphRec_;
struct FT_SfntName_;
struct FT_Var_Axis_;
struct JavaVMOption;
struct PS_BlendRec_;
struct XDR__xdr_ops;
struct _AsciiSrcRec;
struct _BitmapExtra;
struct _BoxClassRec;
struct _EventSeqRec;
struct _ExifContent;
struct _FSXCharInfo;
struct _FcObjectSet;
struct _FillPolyReq;
struct _FontBCEntry;
struct _FontRenders;
struct _HookObjPart;
struct _IcePingWait;
struct _KeyCacheRec;
struct _LangProcRec;
struct _LbxCopyArea;
struct _LbxFillPoly;
struct _LbxPolyText;
struct _LbxPutImage;
struct _MultiSrcRec;
struct _PortholeRec;
struct _PrintEndDoc;
struct _PrintEndJob;
struct _PutImageReq;
struct _RectObjPart;
struct _RepeaterRec;
struct _ShapeNotify;
struct _ShapeOffset;
struct _ShmGetImage;
struct _ShmPutImage;
struct _SmeClassRec;
struct _TMGlobalRec;
struct _TemplateRec;
struct _TextSinkRec;
struct _TipClassRec;
struct _ToggleClass;
struct _ViewportRec;
struct _WorkProcRec;
struct _XAnimCursor;
struct _XButtonInfo;
struct _XDGASetMode;
struct _XDeviceInfo;
struct _XGlyphElt16;
struct _XGlyphElt32;
struct _XIndexValue;
struct _XPointFixed;
struct _XawTextUndo;
struct _XcursorFile;
struct _XftCharSpec;
struct _XftFontInfo;
struct _XkbAnyEvent;
struct _XkbBehavior;
struct _XkbControls;
struct _XkbFileInfo;
struct _XkbGeometry;
struct _XkbNamesRec;
struct _XkbProperty;
struct _XkbRF_Group;
struct _XkbRF_Rules;
struct _XkbStateRec;
struct _XmuCvtCache;
struct _XmuScanline;
struct _XtAppStruct;
struct _XtDeviceRec;
struct _XvMCQMatrix;
struct __gconv_info;
struct __gconv_step;
struct _ns_flagdata;
struct _symbol_info;
struct _xButtonInfo;
struct _xDeviceInfo;
struct _xkbAnyEvent;
struct _xkbGetNames;
struct _xkbGetState;
struct _xkbSetNames;
struct _xkmFileInfo;
struct _xkmModsDesc;
struct arpd_request;
struct authdes_cred;
struct authdes_verf;
struct bfd_preserve;
struct buffmem_desc;
struct console_font;
struct cryptkeyarg2;
struct drand48_data;
struct elf_prpsinfo;
struct elf_prstatus;
struct ether_header;
struct group_filter;
struct icmp6_filter;
struct icmp_ra_addr;
struct ip6_opt_nsap;
struct ip_timestamp;
struct iw_discarded;
struct iw_priv_args;
struct key_netstarg;
struct key_netstres;
struct klm_lockargs;
struct klm_testargs;
struct klm_testrply;
struct mt_tape_info;
struct mtconfiginfo;
struct nlm_cancargs;
struct nlm_lockargs;
struct nlm_shareres;
struct nlm_testargs;
struct nlm_testrply;
struct parport_list;
struct re_registers;
struct relent_chain;
struct rr_pco_match;
struct sockaddr_ash;
struct sockaddr_in6;
struct sockaddr_ipx;
struct sockaddr_pkt;
struct splay_tree_s;
struct spraytimeval;
struct st_instrinfo;
struct stream_descr;
struct sysfs_device;
struct sysfs_driver;
struct sysfs_module;
struct td_event_msg;
struct td_thrhandle;
struct xcb_char2b_t;
struct xcb_format_t;
struct xcb_screen_t;
struct ypresp_order;
struct FT_FaceRec_;
struct FT_Generic_;
struct FT_ListRec_;
struct FT_MM_Axis_;
struct FT_Outline_;
struct FT_SizeRec_;
struct GLXIsDirect;
struct GLXUseXFont;
struct Gpm_Connect;
struct La_i86_regs;
struct WBXMLList_s;
struct WBXMLTree_s;
struct _ActionsRec;
struct _BitmapFont;
struct _CommandRec;
struct _DestroyRec;
struct _DialogPart;
struct _ExifLoader;
struct _ExtentInfo;
struct _FSPropInfo;
struct _FTInstance;
struct _FcConstant;
struct _FontScaled;
struct _GetBugMode;
struct _HookObjRec;
struct _InputEvent;
struct _LbxTagData;
struct _MultiPiece;
struct _ObjectPart;
struct _POINTBLOCK;
struct _RadioGroup;
struct _RectObjRec;
struct _RequestRec;
struct _SetBugMode;
struct _SmeLineRec;
struct _TMEventRec;
struct _TextSrcRec;
struct _WidgetInfo;
struct _XFreeFuncs;
struct _XGlyphElt8;
struct _XGlyphInfo;
struct _XLineFixed;
struct _XSyncValue;
struct _XTransform;
struct _XTrapezoid;
struct _XagDestroy;
struct _XagGetAttr;
struct _XevieStart;
struct _XkbChanges;
struct _XkbKeyType;
struct _XkbOutline;
struct _XkbOverlay;
struct _XkbRF_Rule;
struct _XkbSection;
struct _XmuSegment;
struct _XtEventRec;
struct _XtResource;
struct _XtStateRec;
struct __dirstream;
struct __res_state;
struct _bfd_window;
struct _libc_fpreg;
struct _xRectangle;
struct _xkmKeyDesc;
struct _xkmRowDesc;
struct _zlibbuffer;
struct argp_option;
struct bfd_section;
struct bpf_program;
struct bpf_version;
struct bufferevent;
struct cdrom_drive;
struct copr_buffer;
struct cryptkeyarg;
struct cryptkeyres;
struct elf_siginfo;
struct epoll_event;
struct error_table;
struct exit_status;
struct fddi_header;
struct floatformat;
struct gz_header_s;
struct if_settings;
struct in6_pktinfo;
struct ip6_mtuinfo;
struct ip_msfilter;
struct iw_scan_req;
struct lt_dlloader;
struct nd_redirect;
struct nis_taglist;
struct nlm_testres;
struct ns_tsig_key;
struct opaque_auth;
struct packet_mreq;
struct pcap_dumper;
struct pcap_pkthdr;
struct ppm_fs_info;
struct printf_info;
struct random_data;
struct rex_ttymode;
struct rex_ttysize;
struct rmtcallargs;
struct rpc_timeval;
struct rrd_context;
struct rusers_utmp;
struct sched_param;
struct sg_req_info;
struct sigaltstack;
struct sm_stat_res;
struct sockaddr_at;
struct sockaddr_ec;
struct sockaddr_in;
struct sockaddr_ll;
struct sockaddr_un;
struct st_fileinfo;
struct st_loopinfo;
struct strfdinsert;
struct sysfs_class;
struct td_ta_stats;
struct td_thragent;
struct utmpidlearr;
struct vm86_struct;
struct xcb_depth_t;
struct xcb_point_t;
struct xcb_setup_t;
struct xdr_discrim;
struct ypbind_resp;
struct ypmap_parms;
struct ypreq_nokey;
struct FT_Bitmap_;
struct FT_MM_Var_;
struct FT_Matrix_;
struct FT_Vector_;
struct GLUquadric;
struct TT_Header_;
struct WBXMLTag_s;
struct _DialogRec;
struct _ExifEntry;
struct _FSExtData;
struct _FTMapping;
struct _FcCharSet;
struct _FcFontSet;
struct _FcLangSet;
struct _FcPattern;
struct _FcStrList;
struct _FontEntry;
struct _FontNames;
struct _FontTable;
struct _IO_jump_t;
struct _IO_marker;
struct _LBXDeltas;
struct _LbxSwitch;
struct _ObjectRec;
struct _PaneStack;
struct _PannerRec;
struct _SelectRec;
struct _ShapeMask;
struct _ShmAttach;
struct _ShmDetach;
struct _SimpleRec;
struct _SmeBSBRec;
struct _ThreeDRec;
struct _ToggleRec;
struct _WidgetRec;
struct _XAxisInfo;
struct _XLockPtrs;
struct _XTriangle;
struct _XagCreate;
struct _XawIcPart;
struct _XawImPart;
struct _XevieSend;
union _XkbAction;
struct _XkbBounds;
union _XkbDoodad;
struct _XtGrabRec;
union __GLXEvent;
struct _alternate;
struct _jmethodID;
struct _xAxisInfo;
struct _xkbGetMap;
struct _xkbSetMap;
struct argp_child;
struct argp_state;
struct arpreq_old;
struct atalk_addr;
struct bfd_symbol;
struct bfd_target;
struct bp_address;
struct bufferDesc;
struct cback_data;
struct completion;
struct compressor;
struct count_info;
struct dyn_string;
struct ecoff_extr;
union epoll_data;
struct ether_addr;
struct event_base;
struct exportnode;
struct getcredres;
struct ib_request;
struct in_pktinfo;
struct ip6_rthdr0;
struct itimerspec;
struct iw_quality;
union iwreq_data;
struct kbd_repeat;
struct klm_holder;
struct log_result;
struct mixer_info;
struct nd_opt_hdr;
struct nd_opt_mtu;
struct nis_object;
struct nis_result;
struct nis_server;
struct nlm_holder;
struct nlm_notify;
struct ns_request;
struct ntptimeval;
struct patch_info;
struct reply_body;
struct rex_result;
struct rmtcallres;
struct rr_pco_use;
struct sg_scsi_id;
struct sigcontext;
struct spraycumul;
struct statsswtch;
struct synth_info;
struct sysex_info;
struct td_thrinfo;
struct unimapdesc;
struct unimapinit;
struct usb_device;
struct vt_consize;
struct xcb_host_t;
struct ypresp_all;
struct ypresp_val;
struct ypresp_xfr;
struct z_stream_s;
struct GLXRender;
struct GLXSingle;
struct GLXWaitGL;
struct Gpm_Event;
struct TTCapInfo;
struct _AsciiRec;
struct _CharInfo;
struct _CorePart;
struct _EventRec;
struct _ExifData;
struct _FSChar2b;
struct _FSExtent;
struct _FSOffset;
struct _FSQEvent;
struct _FSServer;
struct _FcAtomic;
struct _FcBlanks;
struct _FcConfig;
struct _FcMatrix;
struct _FcStrSet;
struct _FontInfo;
struct _FontName;
struct _FontProp;
struct _FormPart;
struct _LabelRec;
struct _LbxDelta;
struct _PCFTable;
struct _PanedRec;
struct _ParamRec;
struct _TextPart;
struct _XDGASync;
struct _XDisplay;
struct _XExtData;
struct _XFilters;
struct _XKeyInfo;
struct _XPrivate;
struct _XSQEvent;
struct _XSpanFix;
struct _XagQuery;
struct _XevieEnd;
struct _XftColor;
struct _XkbColor;
union _XkbEvent;
struct _XkbPoint;
struct _XkbShape;
struct _jfieldID;
struct _xKeyInfo;
struct _xSegment;
struct _xkbEvent;
struct cacheinfo;
struct call_body;
struct cp_result;
union des_block;
struct desparams;
struct dump_args;
struct entry_col;
struct entry_obj;
struct ether_arp;
struct exception;
struct fd_result;
struct fieldnode;
struct gmonparam;
struct group_obj;
struct group_req;
struct groupnode;
struct icmp6_hdr;
struct in6_rtmsg;
struct ip6_rthdr;
struct ip_addr_t;
struct ipv6_mreq;
struct itimerval;
struct iw_missed;
struct iw_thrspy;
struct kbkeycode;
struct log_entry;
struct midi_info;
struct mountbody;
struct nlm_share;
struct osockaddr;
struct pamtuples;
struct pcap_addr;
struct pcap_stat;
struct ping_args;
struct ppp_stats;
struct rex_start;
struct rr_result;
struct sg_header;
struct sg_io_hdr;
struct sg_io_vec;
struct sigaction;
struct st_effect;
struct st_format;
struct stab_info;
struct statstime;
struct str_mlist;
struct strrecvfd;
struct sysfs_bus;
struct table_col;
struct table_obj;
struct td_notify;
struct timestamp;
struct vm86_regs;
struct xcb_arc_t;
struct xcb_rgb_t;
struct xcb_str_t;
struct ypmaplist;
struct ypreq_key;
struct ypreq_xfr;
struct FTSize_s;
struct FT_BBox_;
struct FT_Data_;
struct FT_Span_;
struct GLUnurbs;
struct GLXWaitX;
struct TT_PCLT_;
struct ZlibInfo;
struct _ExifLog;
struct _ExifMem;
union _FSEvent;
struct _FSRange;
struct _FcCache;
struct _FcValue;
struct _FontEnc;
struct _FontMap;
struct _FormRec;
struct _GripRec;
struct _IO_FILE;
struct _IceConn;
struct _ListRec;
struct _TextRec;
struct _TipPart;
struct _TreeRec;
struct _XCircle;
struct _XIMText;
struct _XRegion;
struct _XcmsCCC;
struct _XftDraw;
struct _XftFont;
struct _XkbDesc;
struct _XkbMods;
struct _XmuArea;
struct _XtTMRec;
struct __ns_msg;
struct _buffile;
struct _fpstate;
struct _xkbBell;
struct a2ps_job;
struct addrinfo;
struct aliasent;
struct bandinfo;
struct bpf_insn;
struct compstat;
struct copr_msg;
struct endpoint;
struct evbuffer;
struct fhstatus;
struct formnode;
struct gmon_hdr;
struct in6_addr;
struct ip6_dest;
struct ip6_frag;
struct ip_mreqn;
struct ipc_perm;
struct iw_event;
struct iw_param;
struct iw_pmksa;
struct iw_point;
struct iw_range;
struct kbdiacrs;
struct kbsentry;
struct klm_lock;
struct klm_stat;
struct link_map;
struct link_obj;
struct mallinfo;
struct msqid_ds;
struct nis_attr;
struct nlm_lock;
struct nlm_stat;
struct oar_mask;
struct objalloc;
struct pex_time;
struct pmaplist;
struct ppp_idle;
struct protoent;
struct semid_ds;
struct sg_iovec;
struct shm_info;
struct shmid_ds;
struct sigevent;
struct sigstack;
struct sockaddr;
struct str_list;
struct strioctl;
struct tcp_info;
struct termtype;
struct timespec;
struct timezone;
struct tostruct;
struct ttychars;
struct tupleint;
struct typenode;
struct ucontext;
struct unixcred;
struct utmpidle;
struct vt_sizes;
struct BDFSTAT;
struct Elf_Scn;
struct Gpm_Roi;
struct SVCXPRT;
struct TT_OS2_;
struct _BoxRec;
struct _Client;
struct _FTFace;
struct _FTFont;
struct _SmeRec;
struct _TipRec;
struct _XAssoc;
union _XEvent;
struct _XExten;
struct _XImage;
struct _XctRec;
struct _XkbKey;
struct _XkbRow;
struct __ns_rr;
struct _fpxreg;
struct _ftsent;
struct _win_st;
struct _xEvent;
struct _xPoint;
struct _xmmreg;
struct cmsghdr;
struct dl_node;
struct ec_addr;
struct et_list;
struct eventop;
struct fd_args;
struct fddihdr;
struct fibheap;
struct fibnode;
struct hostent;
struct icmphdr;
struct ifaddrs;
struct in_addr;
struct ip6_ext;
struct ip6_hbh;
struct ip6_hdr;
struct ip6_opt;
struct ip_mreq;
struct ip_opts;
struct iw_freq;
struct iw_mlme;
struct kbdiacr;
struct kbentry;
struct lastlog;
struct ltchars;
struct mld_hdr;
struct mq_attr;
struct msginfo;
struct netinfo;
struct nis_oid;
struct nis_tag;
struct nlm_res;
struct objdata;
struct obstack;
struct parport;
struct pcap_if;
struct pppstat;
struct r_debug;
struct res_sym;
struct rpc_err;
struct rpc_msg;
struct rtentry;
struct ru_utmp;
struct seminfo;
struct servent;
struct shminfo;
struct siginfo;
struct sm_name;
struct sm_stat;
struct statvfs;
struct strpeek;
struct svc_req;
struct sysinfo;
struct tagITEM;
struct tagMENU;
struct termios;
struct tftphdr;
struct timeval;
struct trh_hdr;
struct trn_hdr;
struct unipair;
struct usb_bus;
struct utimbuf;
struct utmparr;
struct utsname;
struct vt_mode;
struct vt_stat;
struct winsize;
struct CLIENT;
struct XML_cp;
struct _ENTRY;
struct _Piece;
struct _XTrap;
struct _XawDL;
struct _fpreg;
struct ar_hdr;
struct arphdr;
struct arpreq;
struct carsym;
struct dirent;
struct dqinfo;
struct ethhdr;
struct ifconf;
union jvalue;
struct linger;
struct mntent;
struct module;
struct mon_id;
struct msghdr;
struct netent;
struct netobj;
struct option;
struct passwd;
struct pollfd;
struct rawarc;
struct rlimit;
struct rpcent;
struct rquota;
struct rusage;
struct screen;
struct sembuf;
struct sgttyb;
union sigval;
struct sigvec;
struct statfs;
struct status;
struct strbuf;
struct tchars;
struct tcphdr;
struct termio;
struct ttyent;
struct udphdr;
struct vjstat;
struct vtimes;
struct _Font;
struct _JAWT;
struct _XETC;
struct _xArc;
struct _xReq;
struct aiocb;
struct dlist;
struct dqblk;
struct entry;
struct event;
struct flock;
struct fstab;
struct glyph;
struct group;
struct ifmap;
struct ifreq;
struct iovec;
struct iphdr;
struct iwreq;
struct lconv;
struct mtget;
struct mtpos;
struct my_id;
struct nlist;
struct panel;
struct stats;
struct timeb;
struct timex;
struct tmask;
struct trllc;
struct ucred;
struct ustat;
struct utmpx;
struct xauth;
struct AUTH;
struct _XGC;
struct __bb;
struct acct;
struct argp;
struct file;
struct font;
struct htab;
struct icmp;
struct igmp;
struct ldat;
struct mtop;
struct pcap;
struct pmap;
struct prof;
struct spwd;
struct stat;
struct term;
struct user;
struct utmp;
union wait;
struct Elf;
struct TOC;
struct XDR;
struct bfd;
struct mon;
struct orl;
struct pam;
struct rip;
struct tms;
struct tsp;
struct ip;
struct tm;

struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___41E103AEC814609D75F1D5A85352E48F {struct bfd_link_hash_entry *next;bfd *abfd;bfd *weak;};
struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___C0D47F044CB1E673F41B0FD513C7A3FC {struct bfd_link_hash_entry *next;struct bfd_link_hash_entry *link; char *warning;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___266F084FBD2DD430E7AFD348E031639B {int args;struct demangle_component *name;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___2B1610C43CB4355643BAC37269BF7BBD { char *s;int len;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___4D7B9F91797FDA1EDFB9ACCA9956D6AF { struct demangle_operator_info *op;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___53BFC109C2D88721EDDD2D191A43FEE2 {int number;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___619292454ABA4BDF568AEF9D996941D4 { struct demangle_builtin_type_info *type;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___AA2A6ECD71AC302E6CFCB957185D9CCF {struct demangle_component *left;struct demangle_component *right;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___EEECD32CAA16E098BD39A4A2C5E80212 { char *string;int len;};
struct bfd_link_order___F088814F1EB47C39F5059A2176155568___CB20B2E56E1A0ADC543C65136DC1864E {struct bfd_link_order_reloc *p;};
struct rpc_err___20A10790E27E739F57AC739A9EB3B2A2___BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 {int s1;int s2;};
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___394784BEE55B7018BCA7354475FB2ABC {void *si_addr;};
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___534EC22A0813C1325C3E7D3262B5A8D3 {int si_band;int si_fd;};
struct _1C4035FDEAFFF0FCE26E66A96F6BBEB4___20EFCB5FAA72B851457C6BAA266EC02E {int __lock;unsigned int __futex;unsigned long long __total_seq;unsigned long long __wakeup_seq;unsigned long long __woken_seq;void *__mutex;unsigned int __nwaiters;unsigned int __broadcast_seq;};
struct _6B73A3115BC6C5DB52FFBC029452666C___CDF557A927ED2BFF93B09908D4EFCA76 {int x;int y;};
union _702BBE03CA55F2529059C1331C136CB9___BF437CD3F94558FA799CF6E0127CD317 {char b[20];short s[10];int l[5];};
struct _738A8E8AC168E5B4B1A53622C9D7048F___D6587128ED4C013AF36DCCA432989BD5 {int __lock;unsigned int __nr_readers;unsigned int __readers_wakeup;unsigned int __writer_wakeup;unsigned int __nr_readers_queued;unsigned int __nr_writers_queued;unsigned int __flags;int __writer;};
struct ieee854_long_double___301A90221CF54AA61D03B5601C453EBC {unsigned int mantissa1 : 32;unsigned int mantissa0 : 30;unsigned int quiet_nan : 1;unsigned int one : 1;unsigned int exponent : 15;unsigned int negative : 1;unsigned int empty : 16;};
struct ieee854_long_double___FB8E818610133F718AF156918955DD46 {unsigned int mantissa1 : 32;unsigned int mantissa0 : 32;unsigned int exponent : 15;unsigned int negative : 1;unsigned int empty : 16;};
struct ____OldXSizeHints___CDF557A927ED2BFF93B09908D4EFCA76 {int x;int y;};
struct xcb_xf86dri_query_direct_rendering_capable_cookie_t {unsigned int sequence;};
struct ieee754_double___D177F1DF27478B0248C6745F72EEAEB0 {unsigned int mantissa1 : 32;unsigned int mantissa0 : 20;unsigned int exponent : 11;unsigned int negative : 1;};
struct ieee754_double___DD584A325266113E3D0838C6650565BE {unsigned int mantissa1 : 32;unsigned int mantissa0 : 19;unsigned int quiet_nan : 1;unsigned int exponent : 11;unsigned int negative : 1;};
struct ieee754_float___C1CC197CEBD9377945A71E8A21F83EB1 {unsigned int mantissa : 22;unsigned int quiet_nan : 1;unsigned int exponent : 8;unsigned int negative : 1;};
struct ieee754_float___CCFA8EFBEFBEB58ABED61A4627F05411 {unsigned int mantissa : 23;unsigned int exponent : 8;unsigned int negative : 1;};
struct xcb_x_print_print_get_screen_of_context_cookie_t {unsigned int sequence;};
struct _B44A6AA5E65CF240A74FE9F706C0E430__svc_auth_ops {int (*svc_ah_wrap)();int (*svc_ah_unwrap)();int (*svc_ah_destroy)();};
struct _XmuCvtCache___A3950F211C81DD2EE7118AB39C575077 {char **bitmapFilePath;};
struct xcb_x_print_print_get_image_resolution_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_set_image_resolution_cookie_t {unsigned int sequence;};
union bfd_section___9F836792AEA16A07FDA56DC7499E62B0 {struct bfd_link_order *link_order;struct bfd_section *s;};
struct xcb_x_print_print_get_page_dimensions_cookie_t {unsigned int sequence;};
struct xcb_glx_get_compressed_tex_image_arb_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_one_attributes_cookie_t {unsigned int sequence;};
struct xcb_xfixes_get_cursor_image_and_name_cookie_t {unsigned int sequence;};
struct xcb_glx_get_color_table_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_color_table_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_convolution_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_convolution_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_document_data_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_unsupported_private_request_error_t;
struct xcb_render_query_pict_index_values_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_printer_list_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_get_client_driver_name_cookie_t {unsigned int sequence;};
enum MACRO_WindowsWMFrameStyleExNoInheritLayout {WindowsWMFrameStyleExNoInheritLayout = 0x100000,};
typedef struct _A422162A3E9D4DF972C9311063D03360 __GLXdispatchCompressedTexSubImage3DHeader;
union ifaddrs___5A9FB6B4293E0982D0D9C18B84AAF77B {struct sockaddr *ifu_broadaddr;struct sockaddr *ifu_dstaddr;};
union obstack___EB32574EB45F4F0470D0F374CAEC173A {int tempint;void *tempptr;};
enum r_debug___AF097615159EB3CBDA82C5A5C14EBA11 {RT_CONSISTENT = 0x0,RT_ADD = 0x1,RT_DELETE = 0x2,};
union tftphdr___AC1EF054FE947B275A5712C606118B7A {unsigned short tu_block;short tu_code;char tu_stuff[1];};
struct xcb_glx_get_histogram_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_histogram_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_level_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_level_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_vendor_private_with_reply_cookie_t {unsigned int sequence;};
struct xcb_res_query_client_pixmap_bytes_cookie_t {unsigned int sequence;};
enum MACRO_WindowsWMFrameStyleExNoParentNotify {WindowsWMFrameStyleExNoParentNotify = 4,WindowsWMFrameStyleExOverlappedWindow = 768,};
enum MACRO_WindowsWMFrameStyleExRightScrollBar {WindowsWMFrameStyleExRightScrollBar = 0,WindowsWMFrameStyleExRtlReading = 8192,WindowsWMFrameStyleExStaticEdge = 131072,};
enum MACRO_XSecurityAllAuthorizationAttributes {XSecurityAllAuthorizationAttributes = 15,};
union ifconf___FEA5AA0AF02382EAC1EF5698C9530A86 {char *ifcu_buf;struct ifreq *ifcu_req;};
struct xcb_composite_get_overlay_window_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_attributes_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_input_selected_cookie_t {unsigned int sequence;};
enum MACRO_WindowsWMFrameStyleExDlgModalFrame {WindowsWMFrameStyleExDlgModalFrame = 1,WindowsWMFrameStyleExLayered = 524288,WindowsWMFrameStyleExLayoutRtl = 4194304,};
enum MACRO_WindowsWMFrameStyleExPaletteWindow {WindowsWMFrameStyleExPaletteWindow = 0x188,WindowsWMFrameStyleExRight = 0x1000,};
typedef struct _E8D0F98918C5E335D9AA76BE62A7C3B8 __GLXdispatchCompressedTexSubImageHeader;
struct event___3F9DAFE875678DCD32E4C48DBA0B6DC5 {struct event *tqe_next;struct event **tqe_prev;};
struct event___DA694BA3E6A28DADAA3B1D9573205141 {struct event *rbe_left;struct event *rbe_right;struct event *rbe_parent;int rbe_color;};
union ifreq___4AF2B49FDDB54BAFABDFAE063E6E4A98 {char ifrn_name[16];};
union iwreq___4AF2B49FDDB54BAFABDFAE063E6E4A98 {char ifrn_name[16];};
struct xcb_glx_get_drawable_attributes_cookie_t {unsigned int sequence;};
struct xcb_glx_get_query_objectuiv_arb_cookie_t {unsigned int sequence;};
struct xcb_glx_query_extensions_string_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_query_screens_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_query_version_cookie_t {unsigned int sequence;};
enum MACRO_XFixesSetSelectionOwnerNotifyMask {XFixesSetSelectionOwnerNotifyMask = 1,XFixesSelectionWindowDestroyNotifyMask = 2,XFixesSelectionClientCloseNotifyMask = 4,};
enum MACRO_XSecurityAuthorizationRevokedMask {XSecurityAuthorizationRevokedMask = 1,};
enum MACRO_sz_xScreenSaverUnsetAttributesReq {sz_xScreenSaverUnsetAttributesReq = 8,};
typedef struct _100578E431449C3F6D027CA87AB6407A __GLXcompressedTexSubImage3DLargeHeader;
typedef struct _0A53A945C8DD0EF6031AEFE0D9D194A2 __GLXdispatchCompressedTexImage3DHeader;
struct wait___39CA23F4E14B66D514B108A5928EF219 {unsigned int __w_stopval : 8;unsigned int __w_stopsig : 8;unsigned int : 16;};
struct wait___E9BF053A98CA6B253628237B5A23E48D {unsigned int __w_termsig : 7;unsigned int __w_coredump : 1;unsigned int __w_retcode : 8;unsigned int : 16;};
typedef struct _7CE69C85D0575A23F013545F3194CABE xCompositeCreateRegionFromBorderClipReq;
struct xcb_glx_get_convolution_filter_cookie_t {unsigned int sequence;};
struct xcb_glx_get_minmax_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_minmax_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_query_objectiv_arb_cookie_t {unsigned int sequence;};
struct xcb_res_query_client_resources_cookie_t {unsigned int sequence;};
struct xcb_xvmc_list_subpicture_types_cookie_t {unsigned int sequence;};
enum MACRO_MultibufferUpdateActionUndefined {MultibufferUpdateActionUndefined = 0,MultibufferUpdateActionBackground = 1,MultibufferUpdateActionUntouched = 2,};
enum MACRO_WindowsWMFrameStyleExAcceptFiles {WindowsWMFrameStyleExAcceptFiles = 16,WindowsWMFrameStyleExAppWindow = 262144,};
enum MACRO_WindowsWMFrameStyleExContextHelp {WindowsWMFrameStyleExContextHelp = 0x400,WindowsWMFrameStyleExControlParent = 0x10000,};
typedef struct _673344A079D566E8DA83CACA09ADE8E3 __GLXdispatchDrawArraysComponentHeader;
union bfd___79E81F24FDD4E858974D117930D5B80D {struct aout_data_struct *aout_data;struct artdata *aout_ar_data;struct _oasys_data *oasys_obj_data;struct _oasys_ar_data *oasys_ar_data;struct coff_tdata *coff_obj_data;struct pe_tdata *pe_obj_data;struct xcoff_tdata *xcoff_obj_data;struct ecoff_tdata *ecoff_obj_data;struct ieee_data_struct *ieee_data;struct ieee_ar_data_struct *ieee_ar_data;struct srec_data_struct *srec_data;struct ihex_data_struct *ihex_data;struct tekhex_data_struct *tekhex_data;struct elf_obj_tdata *elf_obj_data;struct nlm_obj_tdata *nlm_obj_data;struct bout_data_struct *bout_data;struct mmo_data_struct *mmo_data;struct sun_core_struct *sun_core_data;struct sco5_core_struct *sco5_core_data;struct trad_core_struct *trad_core_data;struct som_data_struct *som_data;struct hpux_core_struct *hpux_core_data;struct hppabsd_core_struct *hppabsd_core_data;struct sgi_core_struct *sgi_core_data;struct lynx_core_struct *lynx_core_data;struct osf_core_struct *osf_core_data;struct cisco_core_struct *cisco_core_data;struct versados_data_struct *versados_data;struct netbsd_core_struct *netbsd_core_data;struct mach_o_data_struct *mach_o_data;struct mach_o_fat_data_struct *mach_o_fat_data;struct bfd_pef_data_struct *pef_data;struct bfd_pef_xlib_data_struct *pef_xlib_data;struct bfd_sym_data_struct *sym_data;void *any;};
struct xcb_glx_are_textures_resident_cookie_t {unsigned int sequence;};
struct xcb_render_query_pict_formats_cookie_t {unsigned int sequence;};
struct xcb_screensaver_query_version_cookie_t {unsigned int sequence;};
struct xcb_sync_list_system_counters_cookie_t {unsigned int sequence;};
struct xcb_x_print_print_get_context_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_get_drawable_info_cookie_t {unsigned int sequence;};
struct xcb_xinerama_get_screen_count_cookie_t {unsigned int sequence;};
struct xcb_xv_query_image_attributes_cookie_t {unsigned int sequence;};
enum MACRO_WindowsWMFrameStyleClipChildren {WindowsWMFrameStyleClipChildren = 0x2000000,WindowsWMFrameStyleClipSiblings = 0x4000000,WindowsWMFrameStyleDisabled = 0x8000000,};
enum MACRO_WindowsWMFrameStyleExClientEdge {WindowsWMFrameStyleExClientEdge = 512,WindowsWMFrameStyleExComposited = 33554432,};
enum MACRO_WindowsWMFrameStyleExLtrReading {WindowsWMFrameStyleExLtrReading = 0,WindowsWMFrameStyleExMDIChild = 64,WindowsWMFrameStyleExNoActivate = 134217728,};
enum MACRO_WindowsWMFrameStyleExToolWindow {WindowsWMFrameStyleExToolWindow = 128,};
enum MACRO_XIMStringConversionSubstitution {XIMStringConversionSubstitution = 0x1,XIMStringConversionRetrieval = 0x2,};
enum MACRO_XkbAllExtensionDeviceEventsMask {XkbAllExtensionDeviceEventsMask = 0x801F,};
enum MACRO_sz_xScreenSaverSetAttributesReq {sz_xScreenSaverSetAttributesReq = 28,};
typedef struct _CD350D2F1F23C9E87696B3BB28EF6366 __GLXcompressedTexSubImageLargeHeader;
typedef struct _46E98DFFB043B27551402CF21DCA7EF9 __GLXdispatchCompressedTexImageHeader;
struct xcb_glx_get_separable_filter_cookie_t {unsigned int sequence;};
struct xcb_glx_make_context_current_cookie_t {unsigned int sequence;};
struct xcb_list_installed_colormaps_cookie_t {unsigned int sequence;};
struct xcb_xinerama_get_screen_size_cookie_t {unsigned int sequence;};
struct xcb_xv_query_port_attributes_cookie_t {unsigned int sequence;};
enum MACRO_WindowsWMFrameStyleChildWindow {WindowsWMFrameStyleChildWindow = 0x40000000,};
enum MACRO_WindowsWMFrameStyleMaximizeBox {WindowsWMFrameStyleMaximizeBox = 0x10000,WindowsWMFrameStyleMinimize = 0x20000000,};
enum MACRO_WindowsWMFrameStyleMinimizeBox {WindowsWMFrameStyleMinimizeBox = 0x20000,};
enum MACRO_WindowsWMFrameStylePopupWindow {WindowsWMFrameStylePopupWindow = 0x80880000,};
enum MACRO_XF86MiscModInDevClientNotLocal {XF86MiscModInDevClientNotLocal = 6,};
enum MACRO_sz_xScreenSaverQueryVersionReq {sz_xScreenSaverQueryVersionReq = 8,sz_xScreenSaverQueryVersionReply = 32,};
enum MACRO_sz_xXF86BigfontQueryVersionReq {sz_xXF86BigfontQueryVersionReq = 4,sz_xXF86BigfontQueryVersionReply = 32,};
enum MACRO_sz_xXF86VidModeQueryVersionReq {sz_xXF86VidModeQueryVersionReq = 4,sz_xXF86VidModeQueryVersionReply = 32,sz_xXF86VidModeGetModeLineReq = 8,sz_xXF86VidModeGetAllModeLinesReq = 8,sz_xXF86VidModeGetMonitorReq = 8,sz_xXF86VidModeGetViewPortReq = 8,sz_xXF86VidModeGetDotClocksReq = 8,sz_xXF86VidModeGetPermissionsReq = 8,sz_xXF86VidModeGetModeLineReply = 52,sz_xXF86OldVidModeGetModeLineReply = 36,sz_xXF86VidModeGetAllModeLinesReply = 32,sz_xXF86VidModeAddModeLineReq = 92,sz_xXF86OldVidModeAddModeLineReq = 60,sz_xXF86VidModeModModeLineReq = 48,sz_xXF86OldVidModeModModeLineReq = 32,sz_xXF86VidModeDeleteModeLineReq = 52,sz_xXF86VidModeValidateModeLineReq = 52,sz_xXF86VidModeSwitchToModeReq = 52,sz_xXF86OldVidModeDeleteModeLineReq = 36,sz_xXF86OldVidModeValidateModeLineReq = 36,sz_xXF86OldVidModeSwitchToModeReq = 36,sz_xXF86VidModeSwitchModeReq = 8,sz_xXF86VidModeLockModeSwitchReq = 8,sz_xXF86VidModeValidateModeLineReply = 32,sz_xXF86VidModeGetMonitorReply = 32,sz_xXF86VidModeGetViewPortReply = 32,sz_xXF86VidModeSetViewPortReq = 16,sz_xXF86VidModeGetDotClocksReply = 32,sz_xXF86VidModeSetClientVersionReq = 8,sz_xXF86VidModeGetGammaReq = 32,sz_xXF86VidModeGetGammaReply = 32,sz_xXF86VidModeSetGammaReq = 32,sz_xXF86VidModeSetGammaRampReq = 8,sz_xXF86VidModeGetGammaRampReq = 8,sz_xXF86VidModeGetGammaRampReply = 32,sz_xXF86VidModeGetGammaRampSizeReq = 8,sz_xXF86VidModeGetGammaRampSizeReply = 32,sz_xXF86VidModeGetPermissionsReply = 32,sz_xGetExtensionVersionReq = 8,sz_xGetExtensionVersionReply = 32,sz_xListInputDevicesReq = 4,sz_xListInputDevicesReply = 32,sz_xOpenDeviceReq = 8,sz_xOpenDeviceReply = 32,sz_xCloseDeviceReq = 8,sz_xSetDeviceModeReq = 8,sz_xSetDeviceModeReply = 32,sz_xSelectExtensionEventReq = 12,sz_xGetSelectedExtensionEventsReq = 8,sz_xGetSelectedExtensionEventsReply = 32,sz_xChangeDeviceDontPropagateListReq = 12,sz_xGetDeviceDontPropagateListReq = 8,sz_xGetDeviceDontPropagateListReply = 32,sz_xGetDeviceMotionEventsReq = 16,sz_xGetDeviceMotionEventsReply = 32,sz_xChangeKeyboardDeviceReq = 8,sz_xChangeKeyboardDeviceReply = 32,sz_xChangePointerDeviceReq = 8,sz_xChangePointerDeviceReply = 32,sz_xGrabDeviceReq = 20,sz_xGrabDeviceReply = 32,sz_xUngrabDeviceReq = 12,sz_xGrabDeviceKeyReq = 20,sz_xGrabDeviceKeyReply = 32,sz_xUngrabDeviceKeyReq = 16,sz_xGrabDeviceButtonReq = 20,sz_xGrabDeviceButtonReply = 32,sz_xUngrabDeviceButtonReq = 16,sz_xAllowDeviceEventsReq = 12,sz_xGetDeviceFocusReq = 8,sz_xGetDeviceFocusReply = 32,sz_xSetDeviceFocusReq = 16,sz_xGetFeedbackControlReq = 8,sz_xGetFeedbackControlReply = 32,sz_xChangeFeedbackControlReq = 12,sz_xGetDeviceKeyMappingReq = 8,sz_xGetDeviceKeyMappingReply = 32,sz_xChangeDeviceKeyMappingReq = 8,sz_xGetDeviceModifierMappingReq = 8,sz_xSetDeviceModifierMappingReq = 8,sz_xSetDeviceModifierMappingReply = 32,sz_xGetDeviceButtonMappingReq = 8,sz_xGetDeviceButtonMappingReply = 32,sz_xSetDeviceButtonMappingReq = 8,sz_xSetDeviceButtonMappingReply = 32,sz_xQueryDeviceStateReq = 8,sz_xQueryDeviceStateReply = 32,sz_xSendExtensionEventReq = 16,sz_xDeviceBellReq = 8,sz_xSetDeviceValuatorsReq = 8,sz_xSetDeviceValuatorsReply = 32,sz_xGetDeviceControlReq = 8,sz_xGetDeviceControlReply = 32,sz_xChangeDeviceControlReq = 8,sz_xChangeDeviceControlReply = 32,};
typedef struct _033A15DA152AF22304FBDDC054A7A035 __GLXcompressedTexImage3DLargeHeader;
typedef struct _C40F7F4DD1C7C26B2F1D3F03E611B28C __GLXdispatchConvolutionFilterHeader;
typedef struct GLXCreateGLXPixmapWithConfigSGIX xGLXCreateGLXPixmapWithConfigSGIXReq;
typedef struct _322E4D740D2A723112F8227414848916 xXcupGetReservedColormapEntriesReply;
struct xcb_composite_query_version_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_current_drawable_error_t;
struct xcb_glx_get_polygon_stipple_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_parameterfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_parameteriv_cookie_t {unsigned int sequence;};
struct xcb_glx_query_server_string_cookie_t {unsigned int sequence;};
struct xcb_randr_set_screen_config_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_auth_connection_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_create_drawable_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_drm_clip_rect_iterator_t {xcb_xf86dri_drm_clip_rect_t *data;int rem;int index;};
struct xcb_xf86dri_get_device_info_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_open_connection_cookie_t {unsigned int sequence;};
struct xcb_xfixes_get_cursor_image_cookie_t {unsigned int sequence;};
struct xcb_xvmc_list_surface_types_cookie_t {unsigned int sequence;};
enum MACRO_MultibufferUpdateActionCopied {MultibufferUpdateActionCopied = 3,};
enum MACRO_MultibufferUpdateHintFrequent {MultibufferUpdateHintFrequent = 0,MultibufferUpdateHintIntermittent = 1,MultibufferUpdateHintStatic = 2,};
enum MACRO_WindowsWMControllerNotifyMask {WindowsWMControllerNotifyMask = 1,WindowsWMActivationNotifyMask = 2,};
enum MACRO_WindowsWMFrameStyleOverlapped {WindowsWMFrameStyleOverlapped = 0,WindowsWMFrameStyleOverlappedWindow = 13565952,WindowsWMFrameStylePopup = -2147483648,};
enum MACRO_XFixesSetSelectionOwnerNotify {XFixesSetSelectionOwnerNotify = 0,XFixesSelectionWindowDestroyNotify = 1,XFixesSelectionClientCloseNotify = 2,};
enum MACRO_XSecurityAuthorizationRevoked {XSecurityAuthorizationRevoked = 0,XSecurityAuthorizationNameLen = 19,};
enum MACRO_sz_xScreenSaverSelectInputReq {sz_xScreenSaverSelectInputReq = 12,};
typedef struct _XIMPreeditStateNotifyCallbackStruct XIMPreeditStateNotifyCallbackStruct;
typedef struct _CF0026E7EC4F507009AD4F7D07FF93B8 xGLXDestroyHyperpipeConfigSGIXReply;
typedef struct _2A5F331BE8D13DBE7F0EFE2DE0745FC4 xSecurityGenerateAuthorizationReply;
struct xcb_glx_get_visual_configs_cookie_t {unsigned int sequence;};
struct xcb_render_animcursorelt_iterator_t {xcb_render_animcursorelt_t *data;int rem;int index;};
struct xcb_screensaver_query_info_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_create_context_cookie_t {unsigned int sequence;};
struct xcb_xfixes_get_cursor_name_cookie_t {unsigned int sequence;};
struct xcb_xinerama_query_screens_cookie_t {unsigned int sequence;};
struct xcb_xinerama_query_version_cookie_t {unsigned int sequence;};
struct xcb_xinerama_screen_info_iterator_t {xcb_xinerama_screen_info_t *data;int rem;int index;};
struct xcb_xv_image_format_info_iterator_t {xcb_xv_image_format_info_t *data;int rem;int index;};
struct xcb_xvmc_create_subpicture_cookie_t {unsigned int sequence;};
enum MACRO_WindowsWMFrameStyleExTopMost {WindowsWMFrameStyleExTopMost = 8,WindowsWMFrameStyleExTransparent = 32,WindowsWMFrameStyleExWindowEdge = 256,};
enum MACRO_X_ScreenSaverUnsetAttributes {X_ScreenSaverUnsetAttributes = 4,};
enum MACRO_XtConstraintExtensionVersion {XtConstraintExtensionVersion = 1,};
enum MACRO_sz_xCompositeQueryVersionReq {sz_xCompositeQueryVersionReq = 12,sz_xCompositeQueryVersionReply = 32,sz_xCompositeRedirectWindowReq = 12,sz_xCompositeRedirectSubwindowsReq = 12,sz_xCompositeUnredirectWindowReq = 12,sz_xCompositeUnredirectSubwindowsReq = 12,sz_xCompositeCreateRegionFromBorderClipReq = 12,sz_xCompositeNameWindowPixmapReq = 12,};
enum MACRO_sz_xFontCacheQueryVersionReq {sz_xFontCacheQueryVersionReq = 4,sz_xFontCacheQueryVersionReply = 32,sz_xFontCacheGetCacheSettingsReq = 4,sz_xFontCacheGetCacheSettingsReply = 32,sz_xFontCacheChangeCacheSettingsReq = 32,sz_xFontCacheGetCacheStatisticsReq = 4,sz_xFontCacheGetCacheStatisticsReply = 64,};
enum MACRO_sz_xPanoramiXQueryVersionReq {sz_xPanoramiXQueryVersionReq = 8,sz_xPanoramiXQueryVersionReply = 32,sz_xPanoramiXGetStateReq = 8,sz_panoramiXGetStateReply = 32,sz_xPanoramiXGetScreenCountReq = 8,sz_panoramiXGetScreenCountReply = 32,sz_xPanoramiXGetScreenSizeReq = 12,sz_panoramiXGetScreenSizeReply = 32,sz_xXineramaIsActiveReq = 4,sz_XineramaIsActiveReply = 32,sz_xXineramaQueryScreensReq = 4,sz_XineramaQueryScreensReply = 32,sz_XineramaScreenInfo = 8,};
enum MACRO_sz_xWindowsWMQueryVersionReq {sz_xWindowsWMQueryVersionReq = 4,sz_xWindowsWMQueryVersionReply = 32,sz_xWindowsWMDisableUpdateReq = 8,sz_xWindowsWMReenableUpdateReq = 8,sz_xWindowsWMSelectInputReq = 8,sz_xWindowsWMNotifyEvent = 28,sz_xWindowsWMSetFrontProcessReq = 4,sz_xWindowsWMFrameGetRectReq = 24,sz_xWindowsWMFrameGetRectReply = 32,sz_xWindowsWMFrameDrawReq = 28,sz_xWindowsWMFrameSetTitleReq = 16,};
typedef struct _BD3E200215DC355DB1AB2D6A05084309 XSecurityAuthorizationRevokedEvent;
typedef struct _9E48EF926CC337D4DD46A8B6E6B97304 __GLXcompressedTexImageLargeHeader;
typedef struct _7CACD6175943F9295C4690CAF509C655 __GLXcompressedTexSubImage3DHeader;
typedef struct GLXCreateContextWithConfigSGIX xGLXCreateContextWithConfigSGIXReq;
typedef struct _E9CA16F3AD9E9F5B10D815E98DF6D9BD xGLXQueryHyperpipeNetworkSGIXReply;
typedef struct _7374270A99571F2A61066392503F95BA xRenderSetPictureClipRectanglesReq;
typedef struct _xSecurityAuthorizationRevokedEvent xSecurityAuthorizationRevokedEvent;
typedef struct _XF86OldVidModeValidateModeLine xXF86OldVidModeValidateModeLineReq;
typedef struct _XcupGetReservedColormapEntries xXcupGetReservedColormapEntriesReq;
struct xcb_client_message_data_iterator_t {xcb_client_message_data_t *data;int rem;int index;};
struct xcb_get_window_attributes_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_current_window_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_render_request_error_t;
struct xcb_randr_get_screen_info_cookie_t {unsigned int sequence;};
struct xcb_randr_refresh_rates_iterator_t {xcb_randr_refresh_rates_t *data;int rem;int index;};
struct xcb_record_enable_context_cookie_t {unsigned int sequence;};
struct xcb_render_directformat_iterator_t {xcb_render_directformat_t *data;int rem;int index;};
struct xcb_render_pictforminfo_iterator_t {xcb_render_pictforminfo_t *data;int rem;int index;};
struct xcb_translate_coordinates_cookie_t {unsigned int sequence;};
struct xcb_xc_misc_get_xid_range_cookie_t {unsigned int sequence;};
struct xcb_xf86dri_query_version_cookie_t {unsigned int sequence;};
struct xcb_xv_get_port_attribute_cookie_t {unsigned int sequence;};
struct xcb_xv_list_image_formats_cookie_t {unsigned int sequence;};
enum _003F63A829E52477BDB4080710A1139D {preorder = 0x0,postorder = 0x1,endorder = 0x2,leaf = 0x3,};
enum _0112955827FC2F1F3D73B2DA97E42271 {XSyncPositiveTransition = 0x0,XSyncNegativeTransition = 0x1,XSyncPositiveComparison = 0x2,XSyncNegativeComparison = 0x3,};
enum _018E9FE7519BCFF29BB9A1C135EDF766 {AFORK = 0x1,ASU = 0x2,ACORE = 0x8,AXSIG = 0x10,};
struct _01C1C9E3C017E38AF79D67403D653E7E {int dummy[10];};
enum _0241768F8F0DCA008454E0B2C1E22666 {SANE_STATUS_GOOD = 0x0,SANE_STATUS_UNSUPPORTED = 0x1,SANE_STATUS_CANCELLED = 0x2,SANE_STATUS_DEVICE_BUSY = 0x3,SANE_STATUS_INVAL = 0x4,SANE_STATUS_EOF = 0x5,SANE_STATUS_JAMMED = 0x6,SANE_STATUS_NO_DOCS = 0x7,SANE_STATUS_COVER_OPEN = 0x8,SANE_STATUS_IO_ERROR = 0x9,SANE_STATUS_NO_MEM = 0xA,SANE_STATUS_ACCESS_DENIED = 0xB,};
struct _0246488962F6181E546D6EAF3BC67956 {int active_transfer_count;};
struct _038B891F4881F16F541AE58F6D49FAEC {void *data;int rem;int index;};
enum _038CC4C7C84F4F08B3B749DDF010BA25 {Linear8Bit = 0x0,TwoD8Bit = 0x1,Linear16Bit = 0x2,TwoD16Bit = 0x3,};
enum _04C2547481720F27824901D484534BBE {__LC_CTYPE = 0x0,__LC_NUMERIC = 0x1,__LC_TIME = 0x2,__LC_COLLATE = 0x3,__LC_MONETARY = 0x4,__LC_MESSAGES = 0x5,__LC_ALL = 0x6,__LC_PAPER = 0x7,__LC_NAME = 0x8,__LC_ADDRESS = 0x9,__LC_TELEPHONE = 0xA,__LC_MEASUREMENT = 0xB,__LC_IDENTIFICATION = 0xC,};
enum _05A50ECB05B65953CE4DB9E3BEF9FCBB {NET_LLC2_TIMEOUT = 0x1,};
enum _05E3195081394CB44D0F2D41FD41A42E {ILL_ILLOPC = 0x1,ILL_ILLOPN = 0x2,ILL_ILLADR = 0x3,ILL_ILLTRP = 0x4,ILL_PRVOPC = 0x5,ILL_PRVREG = 0x6,ILL_COPROC = 0x7,ILL_BADSTK = 0x8,};
enum _0768B3C9B4531D32B9A04EBD4D0A7046 {FT_STROKER_LINECAP_BUTT = 0x0,FT_STROKER_LINECAP_ROUND = 0x1,FT_STROKER_LINECAP_SQUARE = 0x2,};
enum _0820D168B3B596C7A12A3578F6930236 {NET_IPX_PPROP_BROADCASTING = 0x1,NET_IPX_FORWARDING = 0x2,};
enum _08676B761D46AC0E8736B97FA3DBC486 {PTHREAD_RWLOCK_PREFER_READER_NP = 0x0,PTHREAD_RWLOCK_PREFER_WRITER_NP = 0x1,PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 0x2,PTHREAD_RWLOCK_DEFAULT_NP = 0x0,};
enum _0932C92357F026C9D2319DBF48969F7A {FT_ORIENTATION_TRUETYPE = 0x0,FT_ORIENTATION_POSTSCRIPT = 0x1,FT_ORIENTATION_FILL_RIGHT = 0x0,FT_ORIENTATION_FILL_LEFT = 0x1,FT_ORIENTATION_NONE = 0x2,};
enum _09C3FFA026BC908AACE27D0C95B171E0 {DEV_PARPORT_SPINTIME = 0x1,DEV_PARPORT_BASE_ADDR = 0x2,DEV_PARPORT_IRQ = 0x3,DEV_PARPORT_DMA = 0x4,DEV_PARPORT_MODES = 0x5,DEV_PARPORT_DEVICES = 0x6,DEV_PARPORT_AUTOPROBE = 0x10,};
enum _09C860568073AF9B3326CA3F8EA2C049 {FT_TRUETYPE_ENGINE_TYPE_NONE = 0x0,FT_TRUETYPE_ENGINE_TYPE_UNPATENTED = 0x1,FT_TRUETYPE_ENGINE_TYPE_PATENTED = 0x2,};
enum _0AA02EF7744A92D26B678F19DE8AD812 {PCAP_D_INOUT = 0x0,PCAP_D_IN = 0x1,PCAP_D_OUT = 0x2,};
enum _0B9944DDAD0BA9038E29AF625CFDC62B {XawAsciiFile = 0x0,XawAsciiString = 0x1,};
enum _0BB1BA921291E79A02F5DCFF454F3F31 {NET_BRIDGE_NF_CALL_ARPTABLES = 0x1,NET_BRIDGE_NF_CALL_IPTABLES = 0x2,NET_BRIDGE_NF_CALL_IP6TABLES = 0x3,NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 0x4,};
struct _0C41D669CC7829CF12B135747142967F { char *str;unsigned short length;};
enum _0D28A6D9277963163067C053D6D791C2 {PTHREAD_CANCEL_DEFERRED = 0x0,PTHREAD_CANCEL_ASYNCHRONOUS = 0x1,};
enum _0DDACC7DC443E071E9807358C2A97208 {AIO_CANCELED = 0x0,AIO_NOTCANCELED = 0x1,AIO_ALLDONE = 0x2,};
union _0E48C489052D3F6994034E9D4DCBE034 {int ival;char *str;};
enum _0E64F95F8B8660ABA7845ADD323C20B1 {PartialSuccess = 0x0,Failure = 0x1,ProtocolMismatch = 0x2,};
enum _0F8BABA1B48417FD3D523998AF2D6706 {REG_NOERROR = 0x0,REG_NOMATCH = 0x1,REG_BADPAT = 0x2,REG_ECOLLATE = 0x3,REG_ECTYPE = 0x4,REG_EESCAPE = 0x5,REG_ESUBREG = 0x6,REG_EBRACK = 0x7,REG_EPAREN = 0x8,REG_EBRACE = 0x9,REG_BADBR = 0xA,REG_ERANGE = 0xB,REG_ESPACE = 0xC,REG_BADRPT = 0xD,REG_EEND = 0xE,REG_ESIZE = 0xF,REG_ERPAREN = 0x10,};
enum _0FA339A064E61FF434A56DA3EE04706A {TCP_ESTABLISHED = 0x1,TCP_SYN_SENT = 0x2,TCP_SYN_RECV = 0x3,TCP_FIN_WAIT1 = 0x4,TCP_FIN_WAIT2 = 0x5,TCP_TIME_WAIT = 0x6,TCP_CLOSE = 0x7,TCP_CLOSE_WAIT = 0x8,TCP_LAST_ACK = 0x9,TCP_LISTEN = 0xA,TCP_CLOSING = 0xB,};
struct _103FEF2231D5EFB91E1851DC5DE2406C {int fd;char buf[4096];int buf_size;int buf_idx;};
enum _1245A1FB5F4A3D60B68851188167E7C1 {XSyncAbsolute = 0x0,XSyncRelative = 0x1,};
enum _12BAAB26CA3655D1868224AB234A8625 {XtReliefNone = 0x0,XtReliefRaised = 0x1,XtReliefSunken = 0x2,XtReliefRidge = 0x3,XtReliefGroove = 0x4,};
struct _12CB43F8B5E82306BEFC9B5BEF52A53F {int flags;int min_value;int max_value;char *name;};
struct _1318B99C26BF9CA63A0C21B938052883 {unsigned int width;unsigned int height;int shiftX;int shiftY;};
struct _13C78DD7EDF1CF1C4AE9B0D54E891AA2 {short x;short y;};
struct _1647B670B91D8E45F62891AE6C005714 {int surface_type_id;int chroma_format;unsigned short max_width;unsigned short max_height;unsigned short subpicture_max_width;unsigned short subpicture_max_height;int mc_type;int flags;};
enum _1675019C39AB41AE4A5425409D0013B8 {T1_BLEND_UNDERLINE_POSITION = 0x0,T1_BLEND_UNDERLINE_THICKNESS = 0x1,T1_BLEND_ITALIC_ANGLE = 0x2,T1_BLEND_BLUE_VALUES = 0x3,T1_BLEND_OTHER_BLUES = 0x4,T1_BLEND_STANDARD_WIDTH = 0x5,T1_BLEND_STANDARD_HEIGHT = 0x6,T1_BLEND_STEM_SNAP_WIDTHS = 0x7,T1_BLEND_STEM_SNAP_HEIGHTS = 0x8,T1_BLEND_BLUE_SCALE = 0x9,T1_BLEND_BLUE_SHIFT = 0xA,T1_BLEND_FAMILY_BLUES = 0xB,T1_BLEND_FAMILY_OTHER_BLUES = 0xC,T1_BLEND_FORCE_BOLD = 0xD,T1_BLEND_MAX = 0xE,};
enum _16B0B93CB8DD7194C50FFF250111CAE4 {PTHREAD_CREATE_JOINABLE = 0x0,PTHREAD_CREATE_DETACHED = 0x1,};
struct _16CFC57C4AEAAC7816B638D66FDFD80A {int vendor_specific;};
enum _19025816C28C84F41A389A9321401763 {SANE_UNIT_NONE = 0x0,SANE_UNIT_PIXEL = 0x1,SANE_UNIT_BIT = 0x2,SANE_UNIT_MM = 0x3,SANE_UNIT_DPI = 0x4,SANE_UNIT_PERCENT = 0x5,SANE_UNIT_MICROSECOND = 0x6,};
struct _196A900E1F8FC6D65F3C04EA8B9471C8 {float red;float green;float blue;};
struct _19819260117A2122793EF6A7F838A8D8 {short x;short y;short width;short height;};
enum _1DAB2066660C93B51247B976141F21A3 {NET_DECNET_CONF_LOOPBACK = 0xFFFFFFFE,NET_DECNET_CONF_DDCMP = 0xFFFFFFFD,NET_DECNET_CONF_PPP = 0xFFFFFFFC,NET_DECNET_CONF_X25 = 0xFFFFFFFB,NET_DECNET_CONF_GRE = 0xFFFFFFFA,NET_DECNET_CONF_ETHER = 0xFFFFFFF9,};
enum _1DEA5F99BA550E134F90C8CF2EF07191 {MM_NOTOK = 0xFFFFFFFF,MM_OK = 0x0,MM_NOMSG = 0x1,MM_NOCON = 0x4,};
struct _1E0D006DA5A3AB615AC2957B38222DF2 { char *tray_name; char *medium_name;int mbool;float ma1;float ma2;float ma3;float ma4;};
enum _1EF468414A5E42A89158CD4431479D07 {PA_INT = 0x0,PA_CHAR = 0x1,PA_WCHAR = 0x2,PA_STRING = 0x3,PA_WSTRING = 0x4,PA_POINTER = 0x5,PA_FLOAT = 0x6,PA_DOUBLE = 0x7,PA_LAST = 0x8,};
struct _1FC9C4745BFE4A4C45A6D008A791D581 {unsigned int id : 16;unsigned int rd : 1;unsigned int tc : 1;unsigned int aa : 1;unsigned int opcode : 4;unsigned int qr : 1;unsigned int rcode : 4;unsigned int cd : 1;unsigned int ad : 1;unsigned int unused : 1;unsigned int ra : 1;unsigned int qdcount : 16;unsigned int ancount : 16;unsigned int nscount : 16;unsigned int arcount : 16;};
enum _20BF6AAA3CA8DA11F31F89CA7C2358CE {NET_CORE = 0x1,NET_ETHER = 0x2,NET_802 = 0x3,NET_UNIX = 0x4,NET_IPV4 = 0x5,NET_IPX = 0x6,NET_ATALK = 0x7,NET_NETROM = 0x8,NET_AX25 = 0x9,NET_BRIDGE = 0xA,NET_ROSE = 0xB,NET_IPV6 = 0xC,NET_X25 = 0xD,NET_TR = 0xE,NET_DECNET = 0xF,NET_ECONET = 0x10,NET_SCTP = 0x11,NET_LLC = 0x12,NET_NETFILTER = 0x13,NET_DCCP = 0x14,};
struct _2155392EAF78816288DE33777AAC4297 { char *name;int x_dpi;int y_dpi;};
struct _21E1A9CAE728A96D553CF326E63FACDD {int bit;int byte;int glyph;int scan;};
enum _21F5A3B15463AF72127F5499CB6EE2AC {XStringStyle = 0x0,XCompoundTextStyle = 0x1,XTextStyle = 0x2,XStdICCTextStyle = 0x3,XUTF8StringStyle = 0x4,};
enum _22290B8E2C6A05087E308339D4352906 {XawsdLeft = 0x0,XawsdRight = 0x1,};
enum _223FFC458C10D7E132B773948B7A6063 {XctUnspecified = 0x0,XctLeftToRight = 0x1,XctRightToLeft = 0x2,};
struct _236D87147CED486A0AF93ED3996AECBD {int firstPos;int length;char *ptr;unsigned int format;};
struct _23D39CEB96D177F7D0B7BFAD0D72AB23 {char *res_name;char *res_class;};
enum _25942044E42384ABB7F0CC7F690A0C02 {WRDE_DOOFFS = 0x1,WRDE_APPEND = 0x2,WRDE_NOCMD = 0x4,WRDE_REUSE = 0x8,WRDE_SHOWERR = 0x10,WRDE_UNDEF = 0x20,__WRDE_FLAGS = 0x3F,};
struct _26934E13CB11D4E3DDD70D95266A4A57 {char *string;char *symbolic;char *m_color;char *g4_color;char *g_color;char *c_color;};
struct _276527E852EBD04F842021527F4FA45F {int __allocated;int __used;struct __spawn_action *__actions;int __pad[16];};
enum _27E3653AFA52D5F7034BCEB849B66A6A {DMXLocalInputType = 0x0,DMXConsoleInputType = 0x1,DMXBackendInputType = 0x2,};
enum _281072E49EAE8AB5625F274A9284616B {NET_AX25_IP_DEFAULT_MODE = 0x1,NET_AX25_DEFAULT_MODE = 0x2,NET_AX25_BACKOFF_TYPE = 0x3,NET_AX25_CONNECT_MODE = 0x4,NET_AX25_STANDARD_WINDOW = 0x5,NET_AX25_EXTENDED_WINDOW = 0x6,NET_AX25_T1_TIMEOUT = 0x7,NET_AX25_T2_TIMEOUT = 0x8,NET_AX25_T3_TIMEOUT = 0x9,NET_AX25_IDLE_TIMEOUT = 0xA,NET_AX25_N2 = 0xB,NET_AX25_PACLEN = 0xC,NET_AX25_PROTOCOL = 0xD,NET_AX25_DAMA_SLAVE_TIMEOUT = 0xE,};
struct _28AFE566BB5B37E66F132F7FE54BDDCF {char *string;};
enum _28CA9876FFADE53F315F57AC53AC1E49 {NET_IPV4_ROUTE_FLUSH = 0x1,NET_IPV4_ROUTE_MIN_DELAY = 0x2,NET_IPV4_ROUTE_MAX_DELAY = 0x3,NET_IPV4_ROUTE_GC_THRESH = 0x4,NET_IPV4_ROUTE_MAX_SIZE = 0x5,NET_IPV4_ROUTE_GC_MIN_INTERVAL = 0x6,NET_IPV4_ROUTE_GC_TIMEOUT = 0x7,NET_IPV4_ROUTE_GC_INTERVAL = 0x8,NET_IPV4_ROUTE_REDIRECT_LOAD = 0x9,NET_IPV4_ROUTE_REDIRECT_NUMBER = 0xA,NET_IPV4_ROUTE_REDIRECT_SILENCE = 0xB,NET_IPV4_ROUTE_ERROR_COST = 0xC,NET_IPV4_ROUTE_ERROR_BURST = 0xD,NET_IPV4_ROUTE_GC_ELASTICITY = 0xE,NET_IPV4_ROUTE_MTU_EXPIRES = 0xF,NET_IPV4_ROUTE_MIN_PMTU = 0x10,NET_IPV4_ROUTE_MIN_ADVMSS = 0x11,NET_IPV4_ROUTE_SECRET_INTERVAL = 0x12,NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS = 0x13,};
enum _292475A2E0A8DABD769C5D6A9D9CC8D5 {NET_IPV6_ROUTE_FLUSH = 0x1,NET_IPV6_ROUTE_GC_THRESH = 0x2,NET_IPV6_ROUTE_MAX_SIZE = 0x3,NET_IPV6_ROUTE_GC_MIN_INTERVAL = 0x4,NET_IPV6_ROUTE_GC_TIMEOUT = 0x5,NET_IPV6_ROUTE_GC_INTERVAL = 0x6,NET_IPV6_ROUTE_GC_ELASTICITY = 0x7,NET_IPV6_ROUTE_MTU_EXPIRES = 0x8,NET_IPV6_ROUTE_MIN_ADVMSS = 0x9,NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS = 0xA,};
enum _2A9A0AD3137DAC1E7C7E9C93534584E8 {LayoutPending = 0x0,LayoutInProgress = 0x1,LayoutDone = 0x2,};
enum _2ADC401C2E21ED1A63A0FE0B868E544D {XOMOrientation_LTR_TTB = 0x0,XOMOrientation_RTL_TTB = 0x1,XOMOrientation_TTB_LTR = 0x2,XOMOrientation_TTB_RTL = 0x3,XOMOrientation_Context = 0x4,};
struct _2AE07F4A994C5FC6C65BC46898F1D740 {int present;short major_version;short minor_version;};
struct _2B57C510C3935D29053A101D8FCA0A7C {unsigned char c_class;unsigned char length;short num_buttons;char buttons[32];};
enum _2BE422EB4B7233E8C58D6E03ADE8CB89 {_IEEE_ = 0xFFFFFFFF,_SVID_ = 0x0,_XOPEN_ = 0x1,_POSIX_ = 0x2,_ISOC_ = 0x3,};
enum _2D9ECEA6C47E3C7C9ECCF7148E10CC7F {DEV_PARPORT_DEVICES_ACTIVE = 0xFFFFFFFD,};
struct _2E56E956F88F593FE24676E86AAE3518 {unsigned short count_values;char **supported_values;};
struct _2EA2B750C06C2344CAE427A9270EC33C {char ax25_call[7];};
enum _30552BE8D9C6A41A52D422625EC0E786 {ft_sfnt_head = 0x0,ft_sfnt_maxp = 0x1,ft_sfnt_os2 = 0x2,ft_sfnt_hhea = 0x3,ft_sfnt_vhea = 0x4,ft_sfnt_post = 0x5,ft_sfnt_pclt = 0x6,sfnt_max = 0x7,};
enum _3167F93E33C5EBD9DFF0553630CBED55 {NET_SCTP_RTO_INITIAL = 0x1,NET_SCTP_RTO_MIN = 0x2,NET_SCTP_RTO_MAX = 0x3,NET_SCTP_RTO_ALPHA = 0x4,NET_SCTP_RTO_BETA = 0x5,NET_SCTP_VALID_COOKIE_LIFE = 0x6,NET_SCTP_ASSOCIATION_MAX_RETRANS = 0x7,NET_SCTP_PATH_MAX_RETRANS = 0x8,NET_SCTP_MAX_INIT_RETRANSMITS = 0x9,NET_SCTP_HB_INTERVAL = 0xA,NET_SCTP_PRESERVE_ENABLE = 0xB,NET_SCTP_MAX_BURST = 0xC,NET_SCTP_ADDIP_ENABLE = 0xD,NET_SCTP_PRSCTP_ENABLE = 0xE,NET_SCTP_SNDBUF_POLICY = 0xF,NET_SCTP_SACK_TIMEOUT = 0x10,NET_SCTP_RCVBUF_POLICY = 0x11,};
enum _333A93504FD7CE79801A284E769B0FEB {_CS_PATH = 0x0,_CS_V6_WIDTH_RESTRICTED_ENVS = 0x1,_CS_GNU_LIBC_VERSION = 0x2,_CS_GNU_LIBPTHREAD_VERSION = 0x3,_CS_LFS_CFLAGS = 0x3E8,_CS_LFS_LDFLAGS = 0x3E9,_CS_LFS_LIBS = 0x3EA,_CS_LFS_LINTFLAGS = 0x3EB,_CS_LFS64_CFLAGS = 0x3EC,_CS_LFS64_LDFLAGS = 0x3ED,_CS_LFS64_LIBS = 0x3EE,_CS_LFS64_LINTFLAGS = 0x3EF,_CS_XBS5_ILP32_OFF32_CFLAGS = 0x44C,_CS_XBS5_ILP32_OFF32_LDFLAGS = 0x44D,_CS_XBS5_ILP32_OFF32_LIBS = 0x44E,_CS_XBS5_ILP32_OFF32_LINTFLAGS = 0x44F,_CS_XBS5_ILP32_OFFBIG_CFLAGS = 0x450,_CS_XBS5_ILP32_OFFBIG_LDFLAGS = 0x451,_CS_XBS5_ILP32_OFFBIG_LIBS = 0x452,_CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 0x453,_CS_XBS5_LP64_OFF64_CFLAGS = 0x454,_CS_XBS5_LP64_OFF64_LDFLAGS = 0x455,_CS_XBS5_LP64_OFF64_LIBS = 0x456,_CS_XBS5_LP64_OFF64_LINTFLAGS = 0x457,_CS_XBS5_LPBIG_OFFBIG_CFLAGS = 0x458,_CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 0x459,_CS_XBS5_LPBIG_OFFBIG_LIBS = 0x45A,_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 0x45B,_CS_POSIX_V6_ILP32_OFF32_CFLAGS = 0x45C,_CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 0x45D,_CS_POSIX_V6_ILP32_OFF32_LIBS = 0x45E,_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 0x45F,_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 0x460,_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 0x461,_CS_POSIX_V6_ILP32_OFFBIG_LIBS = 0x462,_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 0x463,_CS_POSIX_V6_LP64_OFF64_CFLAGS = 0x464,_CS_POSIX_V6_LP64_OFF64_LDFLAGS = 0x465,_CS_POSIX_V6_LP64_OFF64_LIBS = 0x466,_CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 0x467,_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 0x468,_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 0x469,_CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 0x46A,_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 0x46B,};
struct _335EDB02744B103283B800FF919FC940 {short x1;short y1;short x2;short y2;};
struct _338A332AC07B59A36792FEE160C5A511 {int typelength;int valuelength;char *type;char *value;};
enum _344761FA513CCF7CF08610AC23D40EDD {XawPrintLAYOUTMODE_NONE = 0x0,XawPrintLAYOUTMODE_PAGESIZE = 0x1,XawPrintLAYOUTMODE_DRAWABLEAREA = 0x2,};
enum _34F88896D34DF08B0014D0487AAD5030 {XATTR_CREATE = 0x1,XATTR_REPLACE = 0x2,};
enum _35A689336FE0D24D3433A45C728BDA9A {IceConnectPending = 0x0,IceConnectAccepted = 0x1,IceConnectRejected = 0x2,IceConnectIOError = 0x3,};
struct _368A13762F027E92E1CC17A526B41AA7 {unsigned char c_class;unsigned char length;unsigned char num_valuators;unsigned char mode;int *valuators;};
enum _370B16B521D1480DB65E1A57FB2EE4FF {CTL_KERN = 0x1,CTL_VM = 0x2,CTL_NET = 0x3,CTL_FS = 0x5,CTL_DEBUG = 0x6,CTL_DEV = 0x7,CTL_BUS = 0x8,CTL_ABI = 0x9,CTL_CPU = 0xA,};
enum _37DCB93EF8D95414A7671406898CD704 {NET_NF_CONNTRACK_MAX = 0x1,NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT = 0x2,NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV = 0x3,NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED = 0x4,NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT = 0x5,NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT = 0x6,NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK = 0x7,NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT = 0x8,NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE = 0x9,NET_NF_CONNTRACK_UDP_TIMEOUT = 0xA,NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM = 0xB,NET_NF_CONNTRACK_ICMP_TIMEOUT = 0xC,NET_NF_CONNTRACK_GENERIC_TIMEOUT = 0xD,NET_NF_CONNTRACK_BUCKETS = 0xE,NET_NF_CONNTRACK_LOG_INVALID = 0xF,NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS = 0x10,NET_NF_CONNTRACK_TCP_LOOSE = 0x11,NET_NF_CONNTRACK_TCP_BE_LIBERAL = 0x12,NET_NF_CONNTRACK_TCP_MAX_RETRANS = 0x13,NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED = 0x14,NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT = 0x15,NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED = 0x16,NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED = 0x17,NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT = 0x18,NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD = 0x19,NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT = 0x1A,NET_NF_CONNTRACK_COUNT = 0x1B,NET_NF_CONNTRACK_ICMPV6_TIMEOUT = 0x1C,NET_NF_CONNTRACK_FRAG6_TIMEOUT = 0x1D,NET_NF_CONNTRACK_FRAG6_LOW_THRESH = 0x1E,NET_NF_CONNTRACK_FRAG6_HIGH_THRESH = 0x1F,NET_NF_CONNTRACK_CHECKSUM = 0x20,};
enum _387260238D821795496CF8EA8057DA7E {LIO_READ = 0x0,LIO_WRITE = 0x1,LIO_NOP = 0x2,};
enum _38ABBF04E8C64EAD46767C993E61F2A9 {NET_NETROM_DEFAULT_PATH_QUALITY = 0x1,NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER = 0x2,NET_NETROM_NETWORK_TTL_INITIALISER = 0x3,NET_NETROM_TRANSPORT_TIMEOUT = 0x4,NET_NETROM_TRANSPORT_MAXIMUM_TRIES = 0x5,NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY = 0x6,NET_NETROM_TRANSPORT_BUSY_DELAY = 0x7,NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE = 0x8,NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT = 0x9,NET_NETROM_ROUTING_CONTROL = 0xA,NET_NETROM_LINK_FAILS_COUNT = 0xB,NET_NETROM_RESET = 0xC,};
enum _3A62C614979A92BEB5F3FA9C72B43E27 {XtGrabNone = 0x0,XtGrabNonexclusive = 0x1,XtGrabExclusive = 0x2,};
struct _3ACF1F82BEC6DEE83FE33E625399BBD7 {short x;short y;unsigned short width;unsigned short height;short angle1;short angle2;};
struct _3B46E2BF73F463FD420C5BF273406D17 {int key_click_percent;int bell_percent;unsigned int bell_pitch;unsigned int bell_duration;unsigned int led_mask;int global_auto_repeat;char auto_repeats[32];};
struct _3DC652DCB514310A717FA1C1FDE5369A {unsigned int pixel;unsigned short red;unsigned short green;unsigned short blue;char flags;char pad;};
enum _3EACBFB1F6A69D9CA6E99CE3BA7C8589 {res_goahead = 0x0,res_nextns = 0x1,res_modified = 0x2,res_done = 0x3,res_error = 0x4,};
enum _401A9802811826260D9AA8000BA0BB75 {ELF_K_NONE = 0x0,ELF_K_AR = 0x1,ELF_K_COFF = 0x2,ELF_K_ELF = 0x3,ELF_K_NUM = 0x4,};
enum _405C8636DEE5D8D2C9F0466394C3E3EA {XrmoptionNoArg = 0x0,XrmoptionIsArg = 0x1,XrmoptionStickyArg = 0x2,XrmoptionSepArg = 0x3,XrmoptionResArg = 0x4,XrmoptionSkipArg = 0x5,XrmoptionSkipLine = 0x6,XrmoptionSkipNArgs = 0x7,};
enum _418BC0EE331BA95A9821FB8B6A7FD376 {__GCONV_IS_LAST = 0x1,__GCONV_IGNORE_ERRORS = 0x2,};
struct _42F676846640B939B65BF8A961B681A1 {void (*shadowdraw)();};
enum _439B6CC11D067694C5AE104EBD065164 {XawisOn = 0x0,XawisOff = 0x1,};
struct _44840292B0FD4432816E14C2BB6B9957 {unsigned int __val[32];};
enum _4495C0A634E380314992BEF5C5E51096 {__GCONV_OK = 0x0,__GCONV_NOCONV = 0x1,__GCONV_NODB = 0x2,__GCONV_NOMEM = 0x3,__GCONV_EMPTY_INPUT = 0x4,__GCONV_FULL_OUTPUT = 0x5,__GCONV_ILLEGAL_INPUT = 0x6,__GCONV_INCOMPLETE_INPUT = 0x7,__GCONV_ILLEGAL_DESCRIPTOR = 0x8,__GCONV_INTERNAL_ERROR = 0x9,};
struct _44E50AEC2878F8A6376C06FA64195504 {short x1;short x2;short y1;short y2;};
enum _462DFD103CA4DED1B135CF601E36D04A {FT_STROKER_BORDER_LEFT = 0x0,FT_STROKER_BORDER_RIGHT = 0x1,};
struct _477257A9E00A927C5CA4C8DCAD23E65C {int type;int rate;int delay;int servnumlock;};
enum _4805EAB0B223F78A463BBC8BA0A6D5FF {IceAcceptSuccess = 0x0,IceAcceptFailure = 0x1,IceAcceptBadMalloc = 0x2,};
enum _484AC76A97C3E4CB6D1B530C347B65AB {_SC_ARG_MAX = 0x0,_SC_CHILD_MAX = 0x1,_SC_CLK_TCK = 0x2,_SC_NGROUPS_MAX = 0x3,_SC_OPEN_MAX = 0x4,_SC_STREAM_MAX = 0x5,_SC_TZNAME_MAX = 0x6,_SC_JOB_CONTROL = 0x7,_SC_SAVED_IDS = 0x8,_SC_REALTIME_SIGNALS = 0x9,_SC_PRIORITY_SCHEDULING = 0xA,_SC_TIMERS = 0xB,_SC_ASYNCHRONOUS_IO = 0xC,_SC_PRIORITIZED_IO = 0xD,_SC_SYNCHRONIZED_IO = 0xE,_SC_FSYNC = 0xF,_SC_MAPPED_FILES = 0x10,_SC_MEMLOCK = 0x11,_SC_MEMLOCK_RANGE = 0x12,_SC_MEMORY_PROTECTION = 0x13,_SC_MESSAGE_PASSING = 0x14,_SC_SEMAPHORES = 0x15,_SC_SHARED_MEMORY_OBJECTS = 0x16,_SC_AIO_LISTIO_MAX = 0x17,_SC_AIO_MAX = 0x18,_SC_AIO_PRIO_DELTA_MAX = 0x19,_SC_DELAYTIMER_MAX = 0x1A,_SC_MQ_OPEN_MAX = 0x1B,_SC_MQ_PRIO_MAX = 0x1C,_SC_VERSION = 0x1D,_SC_PAGESIZE = 0x1E,_SC_RTSIG_MAX = 0x1F,_SC_SEM_NSEMS_MAX = 0x20,_SC_SEM_VALUE_MAX = 0x21,_SC_SIGQUEUE_MAX = 0x22,_SC_TIMER_MAX = 0x23,_SC_BC_BASE_MAX = 0x24,_SC_BC_DIM_MAX = 0x25,_SC_BC_SCALE_MAX = 0x26,_SC_BC_STRING_MAX = 0x27,_SC_COLL_WEIGHTS_MAX = 0x28,_SC_EQUIV_CLASS_MAX = 0x29,_SC_EXPR_NEST_MAX = 0x2A,_SC_LINE_MAX = 0x2B,_SC_RE_DUP_MAX = 0x2C,_SC_CHARCLASS_NAME_MAX = 0x2D,_SC_2_VERSION = 0x2E,_SC_2_C_BIND = 0x2F,_SC_2_C_DEV = 0x30,_SC_2_FORT_DEV = 0x31,_SC_2_FORT_RUN = 0x32,_SC_2_SW_DEV = 0x33,_SC_2_LOCALEDEF = 0x34,_SC_PII = 0x35,_SC_PII_XTI = 0x36,_SC_PII_SOCKET = 0x37,_SC_PII_INTERNET = 0x38,_SC_PII_OSI = 0x39,_SC_POLL = 0x3A,_SC_SELECT = 0x3B,_SC_UIO_MAXIOV = 0x3C,_SC_IOV_MAX = 0x3C,_SC_PII_INTERNET_STREAM = 0x3D,_SC_PII_INTERNET_DGRAM = 0x3E,_SC_PII_OSI_COTS = 0x3F,_SC_PII_OSI_CLTS = 0x40,_SC_PII_OSI_M = 0x41,_SC_T_IOV_MAX = 0x42,_SC_THREADS = 0x43,_SC_THREAD_SAFE_FUNCTIONS = 0x44,_SC_GETGR_R_SIZE_MAX = 0x45,_SC_GETPW_R_SIZE_MAX = 0x46,_SC_LOGIN_NAME_MAX = 0x47,_SC_TTY_NAME_MAX = 0x48,_SC_THREAD_DESTRUCTOR_ITERATIONS = 0x49,_SC_THREAD_KEYS_MAX = 0x4A,_SC_THREAD_STACK_MIN = 0x4B,_SC_THREAD_THREADS_MAX = 0x4C,_SC_THREAD_ATTR_STACKADDR = 0x4D,_SC_THREAD_ATTR_STACKSIZE = 0x4E,_SC_THREAD_PRIORITY_SCHEDULING = 0x4F,_SC_THREAD_PRIO_INHERIT = 0x50,_SC_THREAD_PRIO_PROTECT = 0x51,_SC_THREAD_PROCESS_SHARED = 0x52,_SC_NPROCESSORS_CONF = 0x53,_SC_NPROCESSORS_ONLN = 0x54,_SC_PHYS_PAGES = 0x55,_SC_AVPHYS_PAGES = 0x56,_SC_ATEXIT_MAX = 0x57,_SC_PASS_MAX = 0x58,_SC_XOPEN_VERSION = 0x59,_SC_XOPEN_XCU_VERSION = 0x5A,_SC_XOPEN_UNIX = 0x5B,_SC_XOPEN_CRYPT = 0x5C,_SC_XOPEN_ENH_I18N = 0x5D,_SC_XOPEN_SHM = 0x5E,_SC_2_CHAR_TERM = 0x5F,_SC_2_C_VERSION = 0x60,_SC_2_UPE = 0x61,_SC_XOPEN_XPG2 = 0x62,_SC_XOPEN_XPG3 = 0x63,_SC_XOPEN_XPG4 = 0x64,_SC_CHAR_BIT = 0x65,_SC_CHAR_MAX = 0x66,_SC_CHAR_MIN = 0x67,_SC_INT_MAX = 0x68,_SC_INT_MIN = 0x69,_SC_LONG_BIT = 0x6A,_SC_WORD_BIT = 0x6B,_SC_MB_LEN_MAX = 0x6C,_SC_NZERO = 0x6D,_SC_SSIZE_MAX = 0x6E,_SC_SCHAR_MAX = 0x6F,_SC_SCHAR_MIN = 0x70,_SC_SHRT_MAX = 0x71,_SC_SHRT_MIN = 0x72,_SC_UCHAR_MAX = 0x73,_SC_UINT_MAX = 0x74,_SC_ULONG_MAX = 0x75,_SC_USHRT_MAX = 0x76,_SC_NL_ARGMAX = 0x77,_SC_NL_LANGMAX = 0x78,_SC_NL_MSGMAX = 0x79,_SC_NL_NMAX = 0x7A,_SC_NL_SETMAX = 0x7B,_SC_NL_TEXTMAX = 0x7C,_SC_XBS5_ILP32_OFF32 = 0x7D,_SC_XBS5_ILP32_OFFBIG = 0x7E,_SC_XBS5_LP64_OFF64 = 0x7F,_SC_XBS5_LPBIG_OFFBIG = 0x80,_SC_XOPEN_LEGACY = 0x81,_SC_XOPEN_REALTIME = 0x82,_SC_XOPEN_REALTIME_THREADS = 0x83,_SC_ADVISORY_INFO = 0x84,_SC_BARRIERS = 0x85,_SC_BASE = 0x86,_SC_C_LANG_SUPPORT = 0x87,_SC_C_LANG_SUPPORT_R = 0x88,_SC_CLOCK_SELECTION = 0x89,_SC_CPUTIME = 0x8A,_SC_THREAD_CPUTIME = 0x8B,_SC_DEVICE_IO = 0x8C,_SC_DEVICE_SPECIFIC = 0x8D,_SC_DEVICE_SPECIFIC_R = 0x8E,_SC_FD_MGMT = 0x8F,_SC_FIFO = 0x90,_SC_PIPE = 0x91,_SC_FILE_ATTRIBUTES = 0x92,_SC_FILE_LOCKING = 0x93,_SC_FILE_SYSTEM = 0x94,_SC_MONOTONIC_CLOCK = 0x95,_SC_MULTI_PROCESS = 0x96,_SC_SINGLE_PROCESS = 0x97,_SC_NETWORKING = 0x98,_SC_READER_WRITER_LOCKS = 0x99,_SC_SPIN_LOCKS = 0x9A,_SC_REGEXP = 0x9B,_SC_REGEX_VERSION = 0x9C,_SC_SHELL = 0x9D,_SC_SIGNALS = 0x9E,_SC_SPAWN = 0x9F,_SC_SPORADIC_SERVER = 0xA0,_SC_THREAD_SPORADIC_SERVER = 0xA1,_SC_SYSTEM_DATABASE = 0xA2,_SC_SYSTEM_DATABASE_R = 0xA3,_SC_TIMEOUTS = 0xA4,_SC_TYPED_MEMORY_OBJECTS = 0xA5,_SC_USER_GROUPS = 0xA6,_SC_USER_GROUPS_R = 0xA7,_SC_2_PBS = 0xA8,_SC_2_PBS_ACCOUNTING = 0xA9,_SC_2_PBS_LOCATE = 0xAA,_SC_2_PBS_MESSAGE = 0xAB,_SC_2_PBS_TRACK = 0xAC,_SC_SYMLOOP_MAX = 0xAD,_SC_STREAMS = 0xAE,_SC_2_PBS_CHECKPOINT = 0xAF,_SC_V6_ILP32_OFF32 = 0xB0,_SC_V6_ILP32_OFFBIG = 0xB1,_SC_V6_LP64_OFF64 = 0xB2,_SC_V6_LPBIG_OFFBIG = 0xB3,_SC_HOST_NAME_MAX = 0xB4,_SC_TRACE = 0xB5,_SC_TRACE_EVENT_FILTER = 0xB6,_SC_TRACE_INHERIT = 0xB7,_SC_TRACE_LOG = 0xB8,_SC_LEVEL1_ICACHE_SIZE = 0xB9,_SC_LEVEL1_ICACHE_ASSOC = 0xBA,_SC_LEVEL1_ICACHE_LINESIZE = 0xBB,_SC_LEVEL1_DCACHE_SIZE = 0xBC,_SC_LEVEL1_DCACHE_ASSOC = 0xBD,_SC_LEVEL1_DCACHE_LINESIZE = 0xBE,_SC_LEVEL2_CACHE_SIZE = 0xBF,_SC_LEVEL2_CACHE_ASSOC = 0xC0,_SC_LEVEL2_CACHE_LINESIZE = 0xC1,_SC_LEVEL3_CACHE_SIZE = 0xC2,_SC_LEVEL3_CACHE_ASSOC = 0xC3,_SC_LEVEL3_CACHE_LINESIZE = 0xC4,_SC_LEVEL4_CACHE_SIZE = 0xC5,_SC_LEVEL4_CACHE_ASSOC = 0xC6,_SC_LEVEL4_CACHE_LINESIZE = 0xC7,_SC_IPV6 = 0xEB,_SC_RAW_SOCKETS = 0xEC,};
enum _48BC290D844A5089CFC155FB9F341232 {ELF_C_NULL = 0x0,ELF_C_READ = 0x1,ELF_C_WRITE = 0x2,ELF_C_CLR = 0x3,ELF_C_SET = 0x4,ELF_C_FDDONE = 0x5,ELF_C_FDREAD = 0x6,ELF_C_RDWR = 0x7,ELF_C_NUM = 0x8,};
enum _4B79377ECCE91D3DEA72513DA268167D {PER_LINUX = 0x0,PER_LINUX_32BIT = 0x800000,PER_SVR4 = 0x4100001,PER_SVR3 = 0x5000002,PER_SCOSVR3 = 0x7000003,PER_OSR5 = 0x6000003,PER_WYSEV386 = 0x5000004,PER_ISCR4 = 0x4000005,PER_BSD = 0x6,PER_SUNOS = 0x4000006,PER_XENIX = 0x5000007,PER_LINUX32 = 0x8,PER_IRIX32 = 0x4000009,PER_IRIXN32 = 0x400000A,PER_IRIX64 = 0x400000B,PER_RISCOS = 0xC,PER_SOLARIS = 0x400000D,PER_UW7 = 0x410000E,PER_HPUX = 0xF,PER_OSF4 = 0x10,PER_MASK = 0xFF,};
enum _4BAC799F52E32CD0F3E53C897EB09913 {DEV_PARPORT_DEVICE_TIMESLICE = 0x1,};
struct _4C33C3844275DD1394D2B5937B049BB9 {int fd;int flags;char pathname[21];};
enum _4CA91DF92A766E005510E94BCB31B8F2 {WRDE_NOSPACE = 0x1,WRDE_BADCHAR = 0x2,WRDE_BADVAL = 0x3,WRDE_CMDSUB = 0x4,WRDE_SYNTAX = 0x5,};
enum _4CCF5BD0F314D9FB3C73290162533A92 {SS_ONSTACK = 0x1,SS_DISABLE = 0x2,};
struct _4D0B2EE74E9FAFCBF56BDC59F25A7FDB {unsigned int dlci;};
struct _4D6107A0E0A129C018412AC817ADC559 {char *start;char *current;int bytes_remaining;};
enum _4DDA3DBF10B182AF3E85C052E6F45E2A {__ISwupper = 0x0,__ISwlower = 0x1,__ISwalpha = 0x2,__ISwdigit = 0x3,__ISwxdigit = 0x4,__ISwspace = 0x5,__ISwprint = 0x6,__ISwgraph = 0x7,__ISwblank = 0x8,__ISwcntrl = 0x9,__ISwpunct = 0xA,__ISwalnum = 0xB,_ISwupper = 0x1000000,_ISwlower = 0x2000000,_ISwalpha = 0x4000000,_ISwdigit = 0x8000000,_ISwxdigit = 0x10000000,_ISwspace = 0x20000000,_ISwprint = 0x40000000,_ISwgraph = 0x80000000,_ISwblank = 0x10000,_ISwcntrl = 0x20000,_ISwpunct = 0x40000,_ISwalnum = 0x80000,};
enum _4E8858D30CCE92E14DA3F4BDDBD8423C {DEV_CDROM = 0x1,DEV_HWMON = 0x2,DEV_PARPORT = 0x3,DEV_RAID = 0x4,DEV_MAC_HID = 0x5,DEV_SCSI = 0x6,DEV_IPMI = 0x7,};
struct _4E8A4C7FC2C9452EEDB2A455AEE467A8 {int update_hint;};
struct _4F05924539240263F877D05CF063C89B {char *displayName;int logicalScreen;unsigned int screenWindowWidth;unsigned int screenWindowHeight;int screenWindowXoffset;int screenWindowYoffset;unsigned int rootWindowWidth;unsigned int rootWindowHeight;int rootWindowXoffset;int rootWindowYoffset;int rootWindowXorigin;int rootWindowYorigin;};
struct _4FA264C19AF857256A85E546E5BB1960 {float hi;float lo;};
struct _4FFA9527088137D66D8D180D61C68358 {int family;int length;char *address;};
struct _509170DB936076954425573DA84CBC0B {unsigned char c_class;unsigned char length;unsigned char num_valuators;unsigned char mode;int valuators[6];};
enum _51BDFC43F8CE98845B5B58BAECF68DA1 {PTHREAD_PROCESS_PRIVATE = 0x0,PTHREAD_PROCESS_SHARED = 0x1,};
enum _51FBBAA9F27BB943842F2245DA1E39C9 {XpAuError_success = 0x0,XpAuError_unspecified_error = 0x1,XpAuError_errno = 0x2,XpAuError_error_no_memory = 0x3,XpAuError_unexpected_eos = 0x4,XpAuError_unknown_argument = 0x5,XpAuError_unsupported_medium = 0x6,XpAuError_unsupported_resolution = 0x7,XpAuError_unsupported_orientation = 0x8,XpAuError_unsupported_plex = 0x9,XpAuError_unsupported_copy_count = 0xA,XpAuError_unsupported_job_name = 0xB,XpAuError_no_dpi_set = 0xC,XpAuError_not_inside_job = 0xD,XpAuError_not_inside_document = 0xE,XpAuError_not_inside_page = 0xF,XpAuError_inside_job = 0x10,XpAuError_inside_document = 0x11,XpAuError_inside_page = 0x12,};
enum _524C077D957471F3061D228C9C236D67 {IceClosedNow = 0x0,IceClosedASAP = 0x1,IceConnectionInUse = 0x2,IceStartedShutdownNegotiation = 0x3,};
enum _5354C40EB6E537E32623CE28BE16F40A {IF_LINK_MODE_DEFAULT = 0x0,IF_LINK_MODE_DORMANT = 0x1,};
struct _53996C97E395EF20FC508697C3EEF92C {short lbearing;short rbearing;short width;short ascent;short descent;unsigned short attributes;};
enum _53CE12A658AFC896A02D6DAAB8B83B4C {EXIF_FORMAT_BYTE = 0x1,EXIF_FORMAT_ASCII = 0x2,EXIF_FORMAT_SHORT = 0x3,EXIF_FORMAT_LONG = 0x4,EXIF_FORMAT_RATIONAL = 0x5,EXIF_FORMAT_SBYTE = 0x6,EXIF_FORMAT_UNDEFINED = 0x7,EXIF_FORMAT_SSHORT = 0x8,EXIF_FORMAT_SLONG = 0x9,EXIF_FORMAT_SRATIONAL = 0xA,EXIF_FORMAT_FLOAT = 0xB,EXIF_FORMAT_DOUBLE = 0xC,};
enum _53FC39E43B7B453D6D6E6386D66C23EF {FT_STROKER_LINEJOIN_ROUND = 0x0,FT_STROKER_LINEJOIN_BEVEL = 0x1,FT_STROKER_LINEJOIN_MITER = 0x2,};
struct _552480BDAF941CC5E2D5D2221F90C259 {int width;int height;int mwidth;int mheight;};
enum _570712C348BADE557832D140950F50BF {EXIF_IFD_0 = 0x0,EXIF_IFD_1 = 0x1,EXIF_IFD_EXIF = 0x2,EXIF_IFD_GPS = 0x3,EXIF_IFD_INTEROPERABILITY = 0x4,EXIF_IFD_COUNT = 0x5,};
enum _57AD7624A7600895FA96DD2ACF967891 {MNT_FORCE = 0x1,};
enum _59ADF383BA38CAA5BA6081183E2DDFF0 {ABDAY_1 = 0x20000,ABDAY_2 = 0x20001,ABDAY_3 = 0x20002,ABDAY_4 = 0x20003,ABDAY_5 = 0x20004,ABDAY_6 = 0x20005,ABDAY_7 = 0x20006,DAY_1 = 0x20007,DAY_2 = 0x20008,DAY_3 = 0x20009,DAY_4 = 0x2000A,DAY_5 = 0x2000B,DAY_6 = 0x2000C,DAY_7 = 0x2000D,ABMON_1 = 0x2000E,ABMON_2 = 0x2000F,ABMON_3 = 0x20010,ABMON_4 = 0x20011,ABMON_5 = 0x20012,ABMON_6 = 0x20013,ABMON_7 = 0x20014,ABMON_8 = 0x20015,ABMON_9 = 0x20016,ABMON_10 = 0x20017,ABMON_11 = 0x20018,ABMON_12 = 0x20019,MON_1 = 0x2001A,MON_2 = 0x2001B,MON_3 = 0x2001C,MON_4 = 0x2001D,MON_5 = 0x2001E,MON_6 = 0x2001F,MON_7 = 0x20020,MON_8 = 0x20021,MON_9 = 0x20022,MON_10 = 0x20023,MON_11 = 0x20024,MON_12 = 0x20025,AM_STR = 0x20026,PM_STR = 0x20027,D_T_FMT = 0x20028,D_FMT = 0x20029,T_FMT = 0x2002A,T_FMT_AMPM = 0x2002B,ERA = 0x2002C,__ERA_YEAR = 0x2002D,ERA_D_FMT = 0x2002E,ALT_DIGITS = 0x2002F,ERA_D_T_FMT = 0x20030,ERA_T_FMT = 0x20031,_NL_TIME_ERA_NUM_ENTRIES = 0x20032,_NL_TIME_ERA_ENTRIES = 0x20033,_NL_WABDAY_1 = 0x20034,_NL_WABDAY_2 = 0x20035,_NL_WABDAY_3 = 0x20036,_NL_WABDAY_4 = 0x20037,_NL_WABDAY_5 = 0x20038,_NL_WABDAY_6 = 0x20039,_NL_WABDAY_7 = 0x2003A,_NL_WDAY_1 = 0x2003B,_NL_WDAY_2 = 0x2003C,_NL_WDAY_3 = 0x2003D,_NL_WDAY_4 = 0x2003E,_NL_WDAY_5 = 0x2003F,_NL_WDAY_6 = 0x20040,_NL_WDAY_7 = 0x20041,_NL_WABMON_1 = 0x20042,_NL_WABMON_2 = 0x20043,_NL_WABMON_3 = 0x20044,_NL_WABMON_4 = 0x20045,_NL_WABMON_5 = 0x20046,_NL_WABMON_6 = 0x20047,_NL_WABMON_7 = 0x20048,_NL_WABMON_8 = 0x20049,_NL_WABMON_9 = 0x2004A,_NL_WABMON_10 = 0x2004B,_NL_WABMON_11 = 0x2004C,_NL_WABMON_12 = 0x2004D,_NL_WMON_1 = 0x2004E,_NL_WMON_2 = 0x2004F,_NL_WMON_3 = 0x20050,_NL_WMON_4 = 0x20051,_NL_WMON_5 = 0x20052,_NL_WMON_6 = 0x20053,_NL_WMON_7 = 0x20054,_NL_WMON_8 = 0x20055,_NL_WMON_9 = 0x20056,_NL_WMON_10 = 0x20057,_NL_WMON_11 = 0x20058,_NL_WMON_12 = 0x20059,_NL_WAM_STR = 0x2005A,_NL_WPM_STR = 0x2005B,_NL_WD_T_FMT = 0x2005C,_NL_WD_FMT = 0x2005D,_NL_WT_FMT = 0x2005E,_NL_WT_FMT_AMPM = 0x2005F,_NL_WERA_YEAR = 0x20060,_NL_WERA_D_FMT = 0x20061,_NL_WALT_DIGITS = 0x20062,_NL_WERA_D_T_FMT = 0x20063,_NL_WERA_T_FMT = 0x20064,_NL_TIME_WEEK_NDAYS = 0x20065,_NL_TIME_WEEK_1STDAY = 0x20066,_NL_TIME_WEEK_1STWEEK = 0x20067,_NL_TIME_FIRST_WEEKDAY = 0x20068,_NL_TIME_FIRST_WORKDAY = 0x20069,_NL_TIME_CAL_DIRECTION = 0x2006A,_NL_TIME_TIMEZONE = 0x2006B,_DATE_FMT = 0x2006C,_NL_W_DATE_FMT = 0x2006D,_NL_TIME_CODESET = 0x2006E,_NL_NUM_LC_TIME = 0x2006F,_NL_COLLATE_NRULES = 0x30000,_NL_COLLATE_RULESETS = 0x30001,_NL_COLLATE_TABLEMB = 0x30002,_NL_COLLATE_WEIGHTMB = 0x30003,_NL_COLLATE_EXTRAMB = 0x30004,_NL_COLLATE_INDIRECTMB = 0x30005,_NL_COLLATE_GAP1 = 0x30006,_NL_COLLATE_GAP2 = 0x30007,_NL_COLLATE_GAP3 = 0x30008,_NL_COLLATE_TABLEWC = 0x30009,_NL_COLLATE_WEIGHTWC = 0x3000A,_NL_COLLATE_EXTRAWC = 0x3000B,_NL_COLLATE_INDIRECTWC = 0x3000C,_NL_COLLATE_SYMB_HASH_SIZEMB = 0x3000D,_NL_COLLATE_SYMB_TABLEMB = 0x3000E,_NL_COLLATE_SYMB_EXTRAMB = 0x3000F,_NL_COLLATE_COLLSEQMB = 0x30010,_NL_COLLATE_COLLSEQWC = 0x30011,_NL_COLLATE_CODESET = 0x30012,_NL_NUM_LC_COLLATE = 0x30013,_NL_CTYPE_CLASS = 0x0,_NL_CTYPE_TOUPPER = 0x1,_NL_CTYPE_GAP1 = 0x2,_NL_CTYPE_TOLOWER = 0x3,_NL_CTYPE_GAP2 = 0x4,_NL_CTYPE_CLASS32 = 0x5,_NL_CTYPE_GAP3 = 0x6,_NL_CTYPE_GAP4 = 0x7,_NL_CTYPE_GAP5 = 0x8,_NL_CTYPE_GAP6 = 0x9,_NL_CTYPE_CLASS_NAMES = 0xA,_NL_CTYPE_MAP_NAMES = 0xB,_NL_CTYPE_WIDTH = 0xC,_NL_CTYPE_MB_CUR_MAX = 0xD,_NL_CTYPE_CODESET_NAME = 0xE,CODESET = 0xE,_NL_CTYPE_TOUPPER32 = 0xF,_NL_CTYPE_TOLOWER32 = 0x10,_NL_CTYPE_CLASS_OFFSET = 0x11,_NL_CTYPE_MAP_OFFSET = 0x12,_NL_CTYPE_INDIGITS_MB_LEN = 0x13,_NL_CTYPE_INDIGITS0_MB = 0x14,_NL_CTYPE_INDIGITS1_MB = 0x15,_NL_CTYPE_INDIGITS2_MB = 0x16,_NL_CTYPE_INDIGITS3_MB = 0x17,_NL_CTYPE_INDIGITS4_MB = 0x18,_NL_CTYPE_INDIGITS5_MB = 0x19,_NL_CTYPE_INDIGITS6_MB = 0x1A,_NL_CTYPE_INDIGITS7_MB = 0x1B,_NL_CTYPE_INDIGITS8_MB = 0x1C,_NL_CTYPE_INDIGITS9_MB = 0x1D,_NL_CTYPE_INDIGITS_WC_LEN = 0x1E,_NL_CTYPE_INDIGITS0_WC = 0x1F,_NL_CTYPE_INDIGITS1_WC = 0x20,_NL_CTYPE_INDIGITS2_WC = 0x21,_NL_CTYPE_INDIGITS3_WC = 0x22,_NL_CTYPE_INDIGITS4_WC = 0x23,_NL_CTYPE_INDIGITS5_WC = 0x24,_NL_CTYPE_INDIGITS6_WC = 0x25,_NL_CTYPE_INDIGITS7_WC = 0x26,_NL_CTYPE_INDIGITS8_WC = 0x27,_NL_CTYPE_INDIGITS9_WC = 0x28,_NL_CTYPE_OUTDIGIT0_MB = 0x29,_NL_CTYPE_OUTDIGIT1_MB = 0x2A,_NL_CTYPE_OUTDIGIT2_MB = 0x2B,_NL_CTYPE_OUTDIGIT3_MB = 0x2C,_NL_CTYPE_OUTDIGIT4_MB = 0x2D,_NL_CTYPE_OUTDIGIT5_MB = 0x2E,_NL_CTYPE_OUTDIGIT6_MB = 0x2F,_NL_CTYPE_OUTDIGIT7_MB = 0x30,_NL_CTYPE_OUTDIGIT8_MB = 0x31,_NL_CTYPE_OUTDIGIT9_MB = 0x32,_NL_CTYPE_OUTDIGIT0_WC = 0x33,_NL_CTYPE_OUTDIGIT1_WC = 0x34,_NL_CTYPE_OUTDIGIT2_WC = 0x35,_NL_CTYPE_OUTDIGIT3_WC = 0x36,_NL_CTYPE_OUTDIGIT4_WC = 0x37,_NL_CTYPE_OUTDIGIT5_WC = 0x38,_NL_CTYPE_OUTDIGIT6_WC = 0x39,_NL_CTYPE_OUTDIGIT7_WC = 0x3A,_NL_CTYPE_OUTDIGIT8_WC = 0x3B,_NL_CTYPE_OUTDIGIT9_WC = 0x3C,_NL_CTYPE_TRANSLIT_TAB_SIZE = 0x3D,_NL_CTYPE_TRANSLIT_FROM_IDX = 0x3E,_NL_CTYPE_TRANSLIT_FROM_TBL = 0x3F,_NL_CTYPE_TRANSLIT_TO_IDX = 0x40,_NL_CTYPE_TRANSLIT_TO_TBL = 0x41,_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN = 0x42,_NL_CTYPE_TRANSLIT_DEFAULT_MISSING = 0x43,_NL_CTYPE_TRANSLIT_IGNORE_LEN = 0x44,_NL_CTYPE_TRANSLIT_IGNORE = 0x45,_NL_CTYPE_MAP_TO_NONASCII = 0x46,_NL_CTYPE_EXTRA_MAP_1 = 0x47,_NL_CTYPE_EXTRA_MAP_2 = 0x48,_NL_CTYPE_EXTRA_MAP_3 = 0x49,_NL_CTYPE_EXTRA_MAP_4 = 0x4A,_NL_CTYPE_EXTRA_MAP_5 = 0x4B,_NL_CTYPE_EXTRA_MAP_6 = 0x4C,_NL_CTYPE_EXTRA_MAP_7 = 0x4D,_NL_CTYPE_EXTRA_MAP_8 = 0x4E,_NL_CTYPE_EXTRA_MAP_9 = 0x4F,_NL_CTYPE_EXTRA_MAP_10 = 0x50,_NL_CTYPE_EXTRA_MAP_11 = 0x51,_NL_CTYPE_EXTRA_MAP_12 = 0x52,_NL_CTYPE_EXTRA_MAP_13 = 0x53,_NL_CTYPE_EXTRA_MAP_14 = 0x54,_NL_NUM_LC_CTYPE = 0x55,__INT_CURR_SYMBOL = 0x40000,__CURRENCY_SYMBOL = 0x40001,__MON_DECIMAL_POINT = 0x40002,__MON_THOUSANDS_SEP = 0x40003,__MON_GROUPING = 0x40004,__POSITIVE_SIGN = 0x40005,__NEGATIVE_SIGN = 0x40006,__INT_FRAC_DIGITS = 0x40007,__FRAC_DIGITS = 0x40008,__P_CS_PRECEDES = 0x40009,__P_SEP_BY_SPACE = 0x4000A,__N_CS_PRECEDES = 0x4000B,__N_SEP_BY_SPACE = 0x4000C,__P_SIGN_POSN = 0x4000D,__N_SIGN_POSN = 0x4000E,_NL_MONETARY_CRNCYSTR = 0x4000F,__INT_P_CS_PRECEDES = 0x40010,__INT_P_SEP_BY_SPACE = 0x40011,__INT_N_CS_PRECEDES = 0x40012,__INT_N_SEP_BY_SPACE = 0x40013,__INT_P_SIGN_POSN = 0x40014,__INT_N_SIGN_POSN = 0x40015,_NL_MONETARY_DUO_INT_CURR_SYMBOL = 0x40016,_NL_MONETARY_DUO_CURRENCY_SYMBOL = 0x40017,_NL_MONETARY_DUO_INT_FRAC_DIGITS = 0x40018,_NL_MONETARY_DUO_FRAC_DIGITS = 0x40019,_NL_MONETARY_DUO_P_CS_PRECEDES = 0x4001A,_NL_MONETARY_DUO_P_SEP_BY_SPACE = 0x4001B,_NL_MONETARY_DUO_N_CS_PRECEDES = 0x4001C,_NL_MONETARY_DUO_N_SEP_BY_SPACE = 0x4001D,_NL_MONETARY_DUO_INT_P_CS_PRECEDES = 0x4001E,_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE = 0x4001F,_NL_MONETARY_DUO_INT_N_CS_PRECEDES = 0x40020,_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE = 0x40021,_NL_MONETARY_DUO_P_SIGN_POSN = 0x40022,_NL_MONETARY_DUO_N_SIGN_POSN = 0x40023,_NL_MONETARY_DUO_INT_P_SIGN_POSN = 0x40024,_NL_MONETARY_DUO_INT_N_SIGN_POSN = 0x40025,_NL_MONETARY_UNO_VALID_FROM = 0x40026,_NL_MONETARY_UNO_VALID_TO = 0x40027,_NL_MONETARY_DUO_VALID_FROM = 0x40028,_NL_MONETARY_DUO_VALID_TO = 0x40029,_NL_MONETARY_CONVERSION_RATE = 0x4002A,_NL_MONETARY_DECIMAL_POINT_WC = 0x4002B,_NL_MONETARY_THOUSANDS_SEP_WC = 0x4002C,_NL_MONETARY_CODESET = 0x4002D,_NL_NUM_LC_MONETARY = 0x4002E,__DECIMAL_POINT = 0x10000,RADIXCHAR = 0x10000,__THOUSANDS_SEP = 0x10001,THOUSEP = 0x10001,__GROUPING = 0x10002,_NL_NUMERIC_DECIMAL_POINT_WC = 0x10003,_NL_NUMERIC_THOUSANDS_SEP_WC = 0x10004,_NL_NUMERIC_CODESET = 0x10005,_NL_NUM_LC_NUMERIC = 0x10006,__YESEXPR = 0x50000,__NOEXPR = 0x50001,__YESSTR = 0x50002,__NOSTR = 0x50003,_NL_MESSAGES_CODESET = 0x50004,_NL_NUM_LC_MESSAGES = 0x50005,_NL_PAPER_HEIGHT = 0x70000,_NL_PAPER_WIDTH = 0x70001,_NL_PAPER_CODESET = 0x70002,_NL_NUM_LC_PAPER = 0x70003,_NL_NAME_NAME_FMT = 0x80000,_NL_NAME_NAME_GEN = 0x80001,_NL_NAME_NAME_MR = 0x80002,_NL_NAME_NAME_MRS = 0x80003,_NL_NAME_NAME_MISS = 0x80004,_NL_NAME_NAME_MS = 0x80005,_NL_NAME_CODESET = 0x80006,_NL_NUM_LC_NAME = 0x80007,_NL_ADDRESS_POSTAL_FMT = 0x90000,_NL_ADDRESS_COUNTRY_NAME = 0x90001,_NL_ADDRESS_COUNTRY_POST = 0x90002,_NL_ADDRESS_COUNTRY_AB2 = 0x90003,_NL_ADDRESS_COUNTRY_AB3 = 0x90004,_NL_ADDRESS_COUNTRY_CAR = 0x90005,_NL_ADDRESS_COUNTRY_NUM = 0x90006,_NL_ADDRESS_COUNTRY_ISBN = 0x90007,_NL_ADDRESS_LANG_NAME = 0x90008,_NL_ADDRESS_LANG_AB = 0x90009,_NL_ADDRESS_LANG_TERM = 0x9000A,_NL_ADDRESS_LANG_LIB = 0x9000B,_NL_ADDRESS_CODESET = 0x9000C,_NL_NUM_LC_ADDRESS = 0x9000D,_NL_TELEPHONE_TEL_INT_FMT = 0xA0000,_NL_TELEPHONE_TEL_DOM_FMT = 0xA0001,_NL_TELEPHONE_INT_SELECT = 0xA0002,_NL_TELEPHONE_INT_PREFIX = 0xA0003,_NL_TELEPHONE_CODESET = 0xA0004,_NL_NUM_LC_TELEPHONE = 0xA0005,_NL_MEASUREMENT_MEASUREMENT = 0xB0000,_NL_MEASUREMENT_CODESET = 0xB0001,_NL_NUM_LC_MEASUREMENT = 0xB0002,_NL_IDENTIFICATION_TITLE = 0xC0000,_NL_IDENTIFICATION_SOURCE = 0xC0001,_NL_IDENTIFICATION_ADDRESS = 0xC0002,_NL_IDENTIFICATION_CONTACT = 0xC0003,_NL_IDENTIFICATION_EMAIL = 0xC0004,_NL_IDENTIFICATION_TEL = 0xC0005,_NL_IDENTIFICATION_FAX = 0xC0006,_NL_IDENTIFICATION_LANGUAGE = 0xC0007,_NL_IDENTIFICATION_TERRITORY = 0xC0008,_NL_IDENTIFICATION_AUDIENCE = 0xC0009,_NL_IDENTIFICATION_APPLICATION = 0xC000A,_NL_IDENTIFICATION_ABBREVIATION = 0xC000B,_NL_IDENTIFICATION_REVISION = 0xC000C,_NL_IDENTIFICATION_DATE = 0xC000D,_NL_IDENTIFICATION_CATEGORY = 0xC000E,_NL_IDENTIFICATION_CODESET = 0xC000F,_NL_NUM_LC_IDENTIFICATION = 0xC0010,_NL_NUM = 0xC0011,};
enum _5A0D34CF8B2C4ADAC358A58CA181ACC9 {NET_UNIX_DESTROY_DELAY = 0x1,NET_UNIX_DELETE_DELAY = 0x2,NET_UNIX_MAX_DGRAM_QLEN = 0x3,};
enum _5A773820A0D67B4336D2749C8D45D255 {XrmBindTightly = 0x0,XrmBindLoosely = 0x1,};
enum _5AA2368C5C8110BA0B87D07F31E9D5D2 {FS_NRINODE = 0x1,FS_STATINODE = 0x2,FS_MAXINODE = 0x3,FS_NRDQUOT = 0x4,FS_MAXDQUOT = 0x5,FS_NRFILE = 0x6,FS_MAXFILE = 0x7,FS_DENTRY = 0x8,FS_NRSUPER = 0x9,FS_MAXSUPER = 0xA,FS_OVERFLOWUID = 0xB,FS_OVERFLOWGID = 0xC,FS_LEASES = 0xD,FS_DIR_NOTIFY = 0xE,FS_LEASE_TIME = 0xF,FS_DQSTATS = 0x10,FS_XFS = 0x11,FS_AIO_NR = 0x12,FS_AIO_MAX_NR = 0x13,FS_INOTIFY = 0x14,};
struct _5AD267705BD8B4B0926875A73B385ABE {int inclrspc;int outclrspc;};
struct _5B111F5C4E48B86FA81A443B3B21CC9D { char *plex;};
struct _5BB888AFAE3DA1AF86E88EEDAEBE9855 {char *protocol_name;unsigned short protocol_data_length;char *protocol_data;char *network_id;char *auth_name;unsigned short auth_data_length;char *auth_data;};
struct _5CF04B6421DF2D20D24DDD28F16D3C2A { char *name;void *address;};
enum _5DC38A7C59C0EB4905B0CA747B22AD1B {IPPORT_ECHO = 0x7,IPPORT_DISCARD = 0x9,IPPORT_SYSTAT = 0xB,IPPORT_DAYTIME = 0xD,IPPORT_NETSTAT = 0xF,IPPORT_FTP = 0x15,IPPORT_TELNET = 0x17,IPPORT_SMTP = 0x19,IPPORT_TIMESERVER = 0x25,IPPORT_NAMESERVER = 0x2A,IPPORT_WHOIS = 0x2B,IPPORT_MTP = 0x39,IPPORT_TFTP = 0x45,IPPORT_RJE = 0x4D,IPPORT_FINGER = 0x4F,IPPORT_TTYLINK = 0x57,IPPORT_SUPDUP = 0x5F,IPPORT_EXECSERVER = 0x200,IPPORT_LOGINSERVER = 0x201,IPPORT_CMDSERVER = 0x202,IPPORT_EFSSERVER = 0x208,IPPORT_BIFFUDP = 0x200,IPPORT_WHOSERVER = 0x201,IPPORT_ROUTESERVER = 0x208,IPPORT_RESERVED = 0x400,IPPORT_USERRESERVED = 0x1388,};
enum _5E1A04F015DD11A9DDD0863975C51122 {SANE_ACTION_GET_VALUE = 0x0,SANE_ACTION_SET_VALUE = 0x1,SANE_ACTION_SET_AUTO = 0x2,};
enum _5E65BB40F6ADE64B38A28A13261FB94F {DEV_PARPORT_DEFAULT = 0xFFFFFFFD,};
enum _5E73109BBAA167E4C78A8EE8CF9AEA71 {NET_IPV4_NF_CONNTRACK_MAX = 0x1,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT = 0x2,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV = 0x3,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED = 0x4,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT = 0x5,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT = 0x6,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK = 0x7,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT = 0x8,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE = 0x9,NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT = 0xA,NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM = 0xB,NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT = 0xC,NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT = 0xD,NET_IPV4_NF_CONNTRACK_BUCKETS = 0xE,NET_IPV4_NF_CONNTRACK_LOG_INVALID = 0xF,NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS = 0x10,NET_IPV4_NF_CONNTRACK_TCP_LOOSE = 0x11,NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL = 0x12,NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS = 0x13,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED = 0x14,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT = 0x15,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED = 0x16,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED = 0x17,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT = 0x18,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD = 0x19,NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT = 0x1A,NET_IPV4_NF_CONNTRACK_COUNT = 0x1B,NET_IPV4_NF_CONNTRACK_CHECKSUM = 0x1C,};
enum _5FCFC9B82C4ACD98A29891A49C87C3CA {DEV_SCSI_LOGGING_LEVEL = 0x1,};
struct _609755D20E77E328DB0AAE27327A3AE9 {int id;char *name;int flags;};
enum _61A4AA732B1B6BCB47681503B3A6A9B1 {NET_DCCP_DEFAULT_SEQ_WINDOW = 0x1,NET_DCCP_DEFAULT_RX_CCID = 0x2,NET_DCCP_DEFAULT_TX_CCID = 0x3,NET_DCCP_DEFAULT_ACK_RATIO = 0x4,NET_DCCP_DEFAULT_SEND_ACKVEC = 0x5,NET_DCCP_DEFAULT_SEND_NDP = 0x6,};
struct _647E6F6FB5E1F7CA7AC59F3987F53CE2 {short red;short redMask;short green;short greenMask;short blue;short blueMask;short alpha;short alphaMask;};
struct _648B167E5FE8430EFE8E72D1CD79C82D {short pmin;short pmax;short smin;short smax;};
struct _64992689D90D12C17DC9EE3D4AA6EC53 {int map[256];void *data;int (*convert)(void *data,  char *s);void (*release)(void *data);};
enum _65CF98EECFB69F691B0631C04FBFD9D4 {TD_ALL_EVENTS = 0x0,TD_EVENT_NONE = 0x0,TD_READY = 0x1,TD_SLEEP = 0x2,TD_SWITCHTO = 0x3,TD_SWITCHFROM = 0x4,TD_LOCK_TRY = 0x5,TD_CATCHSIG = 0x6,TD_IDLE = 0x7,TD_CREATE = 0x8,TD_DEATH = 0x9,TD_PREEMPT = 0xA,TD_PRI_INHERIT = 0xB,TD_REAP = 0xC,TD_CONCURRENCY = 0xD,TD_TIMEOUT = 0xE,TD_MIN_EVENT_NUM = 0x1,TD_MAX_EVENT_NUM = 0xE,TD_EVENTS_ENABLE = 0x1F,};
enum _65DEA8C88790C58D814787499C3E1437 {NET_CORE_WMEM_MAX = 0x1,NET_CORE_RMEM_MAX = 0x2,NET_CORE_WMEM_DEFAULT = 0x3,NET_CORE_RMEM_DEFAULT = 0x4,NET_CORE_MAX_BACKLOG = 0x6,NET_CORE_FASTROUTE = 0x7,NET_CORE_MSG_COST = 0x8,NET_CORE_MSG_BURST = 0x9,NET_CORE_OPTMEM_MAX = 0xA,NET_CORE_HOT_LIST_LENGTH = 0xB,NET_CORE_DIVERT_VERSION = 0xC,NET_CORE_NO_CONG_THRESH = 0xD,NET_CORE_NO_CONG = 0xE,NET_CORE_LO_CONG = 0xF,NET_CORE_MOD_CONG = 0x10,NET_CORE_DEV_WEIGHT = 0x11,NET_CORE_SOMAXCONN = 0x12,NET_CORE_BUDGET = 0x13,NET_CORE_AEVENT_ETIME = 0x14,NET_CORE_AEVENT_RSEQTH = 0x15,};
enum _673534010955E48566F9B27E65308EE2 {TRAP_BRKPT = 0x1,TRAP_TRACE = 0x2,};
struct _691123D744001B8BE68B84780CEE447C {unsigned char byte1;unsigned char byte2;};
struct _697B32D3B5D3093ACC810617F93D908A {unsigned char first;unsigned char last;};
enum _699D2B6448FB7BE3D7A3A7D1978CAEFE {UL_GETFSIZE = 0x1,UL_SETFSIZE = 0x2,__UL_GETMAXBRK = 0x3,__UL_GETOPENMAX = 0x4,};
struct _6B1106A64659663BF4BA9950E3F10E4F {int charset_count;char **charset_list;};
enum _6B58CDAFB112E83C3DE0007F6614EB2F {EXIF_TAG_INTEROPERABILITY_INDEX = 0x1,EXIF_TAG_INTEROPERABILITY_VERSION = 0x2,EXIF_TAG_NEW_SUBFILE_TYPE = 0xFE,EXIF_TAG_IMAGE_WIDTH = 0x100,EXIF_TAG_IMAGE_LENGTH = 0x101,EXIF_TAG_BITS_PER_SAMPLE = 0x102,EXIF_TAG_COMPRESSION = 0x103,EXIF_TAG_PHOTOMETRIC_INTERPRETATION = 0x106,EXIF_TAG_FILL_ORDER = 0x10A,EXIF_TAG_DOCUMENT_NAME = 0x10D,EXIF_TAG_IMAGE_DESCRIPTION = 0x10E,EXIF_TAG_MAKE = 0x10F,EXIF_TAG_MODEL = 0x110,EXIF_TAG_STRIP_OFFSETS = 0x111,EXIF_TAG_ORIENTATION = 0x112,EXIF_TAG_SAMPLES_PER_PIXEL = 0x115,EXIF_TAG_ROWS_PER_STRIP = 0x116,EXIF_TAG_STRIP_BYTE_COUNTS = 0x117,EXIF_TAG_X_RESOLUTION = 0x11A,EXIF_TAG_Y_RESOLUTION = 0x11B,EXIF_TAG_PLANAR_CONFIGURATION = 0x11C,EXIF_TAG_RESOLUTION_UNIT = 0x128,EXIF_TAG_TRANSFER_FUNCTION = 0x12D,EXIF_TAG_SOFTWARE = 0x131,EXIF_TAG_DATE_TIME = 0x132,EXIF_TAG_ARTIST = 0x13B,EXIF_TAG_WHITE_POINT = 0x13E,EXIF_TAG_PRIMARY_CHROMATICITIES = 0x13F,EXIF_TAG_TRANSFER_RANGE = 0x156,EXIF_TAG_SUB_IFDS = 0x14A,EXIF_TAG_JPEG_PROC = 0x200,EXIF_TAG_JPEG_INTERCHANGE_FORMAT = 0x201,EXIF_TAG_JPEG_INTERCHANGE_FORMAT_LENGTH = 0x202,EXIF_TAG_YCBCR_COEFFICIENTS = 0x211,EXIF_TAG_YCBCR_SUB_SAMPLING = 0x212,EXIF_TAG_YCBCR_POSITIONING = 0x213,EXIF_TAG_REFERENCE_BLACK_WHITE = 0x214,EXIF_TAG_XML_PACKET = 0x2BC,EXIF_TAG_RELATED_IMAGE_FILE_FORMAT = 0x1000,EXIF_TAG_RELATED_IMAGE_WIDTH = 0x1001,EXIF_TAG_RELATED_IMAGE_LENGTH = 0x1002,EXIF_TAG_CFA_REPEAT_PATTERN_DIM = 0x828D,EXIF_TAG_CFA_PATTERN = 0x828E,EXIF_TAG_BATTERY_LEVEL = 0x828F,EXIF_TAG_COPYRIGHT = 0x8298,EXIF_TAG_EXPOSURE_TIME = 0x829A,EXIF_TAG_FNUMBER = 0x829D,EXIF_TAG_IPTC_NAA = 0x83BB,EXIF_TAG_IMAGE_RESOURCES = 0x8649,EXIF_TAG_EXIF_IFD_POINTER = 0x8769,EXIF_TAG_INTER_COLOR_PROFILE = 0x8773,EXIF_TAG_EXPOSURE_PROGRAM = 0x8822,EXIF_TAG_SPECTRAL_SENSITIVITY = 0x8824,EXIF_TAG_GPS_INFO_IFD_POINTER = 0x8825,EXIF_TAG_ISO_SPEED_RATINGS = 0x8827,EXIF_TAG_OECF = 0x8828,EXIF_TAG_EXIF_VERSION = 0x9000,EXIF_TAG_DATE_TIME_ORIGINAL = 0x9003,EXIF_TAG_DATE_TIME_DIGITIZED = 0x9004,EXIF_TAG_COMPONENTS_CONFIGURATION = 0x9101,EXIF_TAG_COMPRESSED_BITS_PER_PIXEL = 0x9102,EXIF_TAG_SHUTTER_SPEED_VALUE = 0x9201,EXIF_TAG_APERTURE_VALUE = 0x9202,EXIF_TAG_BRIGHTNESS_VALUE = 0x9203,EXIF_TAG_EXPOSURE_BIAS_VALUE = 0x9204,EXIF_TAG_MAX_APERTURE_VALUE = 0x9205,EXIF_TAG_SUBJECT_DISTANCE = 0x9206,EXIF_TAG_METERING_MODE = 0x9207,EXIF_TAG_LIGHT_SOURCE = 0x9208,EXIF_TAG_FLASH = 0x9209,EXIF_TAG_FOCAL_LENGTH = 0x920A,EXIF_TAG_SUBJECT_AREA = 0x9214,EXIF_TAG_TIFF_EP_STANDARD_ID = 0x9216,EXIF_TAG_MAKER_NOTE = 0x927C,EXIF_TAG_USER_COMMENT = 0x9286,EXIF_TAG_SUB_SEC_TIME = 0x9290,EXIF_TAG_SUB_SEC_TIME_ORIGINAL = 0x9291,EXIF_TAG_SUB_SEC_TIME_DIGITIZED = 0x9292,EXIF_TAG_FLASH_PIX_VERSION = 0xA000,EXIF_TAG_COLOR_SPACE = 0xA001,EXIF_TAG_PIXEL_X_DIMENSION = 0xA002,EXIF_TAG_PIXEL_Y_DIMENSION = 0xA003,EXIF_TAG_RELATED_SOUND_FILE = 0xA004,EXIF_TAG_INTEROPERABILITY_IFD_POINTER = 0xA005,EXIF_TAG_FLASH_ENERGY = 0xA20B,EXIF_TAG_SPATIAL_FREQUENCY_RESPONSE = 0xA20C,EXIF_TAG_FOCAL_PLANE_X_RESOLUTION = 0xA20E,EXIF_TAG_FOCAL_PLANE_Y_RESOLUTION = 0xA20F,EXIF_TAG_FOCAL_PLANE_RESOLUTION_UNIT = 0xA210,EXIF_TAG_SUBJECT_LOCATION = 0xA214,EXIF_TAG_EXPOSURE_INDEX = 0xA215,EXIF_TAG_SENSING_METHOD = 0xA217,EXIF_TAG_FILE_SOURCE = 0xA300,EXIF_TAG_SCENE_TYPE = 0xA301,EXIF_TAG_NEW_CFA_PATTERN = 0xA302,EXIF_TAG_CUSTOM_RENDERED = 0xA401,EXIF_TAG_EXPOSURE_MODE = 0xA402,EXIF_TAG_WHITE_BALANCE = 0xA403,EXIF_TAG_DIGITAL_ZOOM_RATIO = 0xA404,EXIF_TAG_FOCAL_LENGTH_IN_35MM_FILM = 0xA405,EXIF_TAG_SCENE_CAPTURE_TYPE = 0xA406,EXIF_TAG_GAIN_CONTROL = 0xA407,EXIF_TAG_CONTRAST = 0xA408,EXIF_TAG_SATURATION = 0xA409,EXIF_TAG_SHARPNESS = 0xA40A,EXIF_TAG_DEVICE_SETTING_DESCRIPTION = 0xA40B,EXIF_TAG_SUBJECT_DISTANCE_RANGE = 0xA40C,EXIF_TAG_IMAGE_UNIQUE_ID = 0xA420,EXIF_TAG_GAMMA = 0xA500,EXIF_TAG_UNKNOWN_C4A5 = 0xC4A5,};
enum _6DE0D61D61F97D6E17ED7D70441829F1 {NET_TR_RIF_TIMEOUT = 0x1,};
enum _6EDDAF1AB37F2D63F8B7F83107C2123B {ELF_T_BYTE = 0x0,ELF_T_ADDR = 0x1,ELF_T_DYN = 0x2,ELF_T_EHDR = 0x3,ELF_T_HALF = 0x4,ELF_T_OFF = 0x5,ELF_T_PHDR = 0x6,ELF_T_RELA = 0x7,ELF_T_REL = 0x8,ELF_T_SHDR = 0x9,ELF_T_SWORD = 0xA,ELF_T_SYM = 0xB,ELF_T_WORD = 0xC,ELF_T_SXWORD = 0xD,ELF_T_XWORD = 0xE,ELF_T_VDEF = 0xF,ELF_T_VNEED = 0x10,ELF_T_NUM = 0x11,};
enum _6F917803B5EDAFFE6558D2A0AFE2718B {POLL_IN = 0x1,POLL_OUT = 0x2,POLL_MSG = 0x3,POLL_ERR = 0x4,POLL_PRI = 0x5,POLL_HUP = 0x6,};
struct _6FD63CF3083337BDDDDD931C730A9E68 { char *title;int copies;};
struct _701DEBC035A327D9CE136C2F446BD60C {int major;int minor;int micro;};
struct _7257EFC214C83636CC1C8B1684490891 {char *next_in;unsigned int avail_in;unsigned int total_in_lo32;unsigned int total_in_hi32;char *next_out;unsigned int avail_out;unsigned int total_out_lo32;unsigned int total_out_hi32;void *state;void *(*bzalloc)(void *, int, int);void (*bzfree)(void *, void *);void *opaque;};
enum _730196AC61DA5EA630CA6661CED053E5 {PROF_USHORT = 0x0,PROF_UINT = 0x1,PROF_FAST = 0x2,};
struct _73FDACF34BD773846371F264A3DF2411 {unsigned int dlci;char master[16];};
enum _76118AAE9423756A80C890A3D2420816 {NET_IPV4_FORWARD = 0x8,NET_IPV4_DYNADDR = 0x9,NET_IPV4_CONF = 0x10,NET_IPV4_NEIGH = 0x11,NET_IPV4_ROUTE = 0x12,NET_IPV4_FIB_HASH = 0x13,NET_IPV4_NETFILTER = 0x14,NET_IPV4_TCP_TIMESTAMPS = 0x21,NET_IPV4_TCP_WINDOW_SCALING = 0x22,NET_IPV4_TCP_SACK = 0x23,NET_IPV4_TCP_RETRANS_COLLAPSE = 0x24,NET_IPV4_DEFAULT_TTL = 0x25,NET_IPV4_AUTOCONFIG = 0x26,NET_IPV4_NO_PMTU_DISC = 0x27,NET_IPV4_TCP_SYN_RETRIES = 0x28,NET_IPV4_IPFRAG_HIGH_THRESH = 0x29,NET_IPV4_IPFRAG_LOW_THRESH = 0x2A,NET_IPV4_IPFRAG_TIME = 0x2B,NET_IPV4_TCP_MAX_KA_PROBES = 0x2C,NET_IPV4_TCP_KEEPALIVE_TIME = 0x2D,NET_IPV4_TCP_KEEPALIVE_PROBES = 0x2E,NET_IPV4_TCP_RETRIES1 = 0x2F,NET_IPV4_TCP_RETRIES2 = 0x30,NET_IPV4_TCP_FIN_TIMEOUT = 0x31,NET_IPV4_IP_MASQ_DEBUG = 0x32,NET_TCP_SYNCOOKIES = 0x33,NET_TCP_STDURG = 0x34,NET_TCP_RFC1337 = 0x35,NET_TCP_SYN_TAILDROP = 0x36,NET_TCP_MAX_SYN_BACKLOG = 0x37,NET_IPV4_LOCAL_PORT_RANGE = 0x38,NET_IPV4_ICMP_ECHO_IGNORE_ALL = 0x39,NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS = 0x3A,NET_IPV4_ICMP_SOURCEQUENCH_RATE = 0x3B,NET_IPV4_ICMP_DESTUNREACH_RATE = 0x3C,NET_IPV4_ICMP_TIMEEXCEED_RATE = 0x3D,NET_IPV4_ICMP_PARAMPROB_RATE = 0x3E,NET_IPV4_ICMP_ECHOREPLY_RATE = 0x3F,NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES = 0x40,NET_IPV4_IGMP_MAX_MEMBERSHIPS = 0x41,NET_TCP_TW_RECYCLE = 0x42,NET_IPV4_ALWAYS_DEFRAG = 0x43,NET_IPV4_TCP_KEEPALIVE_INTVL = 0x44,NET_IPV4_INET_PEER_THRESHOLD = 0x45,NET_IPV4_INET_PEER_MINTTL = 0x46,NET_IPV4_INET_PEER_MAXTTL = 0x47,NET_IPV4_INET_PEER_GC_MINTIME = 0x48,NET_IPV4_INET_PEER_GC_MAXTIME = 0x49,NET_TCP_ORPHAN_RETRIES = 0x4A,NET_TCP_ABORT_ON_OVERFLOW = 0x4B,NET_TCP_SYNACK_RETRIES = 0x4C,NET_TCP_MAX_ORPHANS = 0x4D,NET_TCP_MAX_TW_BUCKETS = 0x4E,NET_TCP_FACK = 0x4F,NET_TCP_REORDERING = 0x50,NET_TCP_ECN = 0x51,NET_TCP_DSACK = 0x52,NET_TCP_MEM = 0x53,NET_TCP_WMEM = 0x54,NET_TCP_RMEM = 0x55,NET_TCP_APP_WIN = 0x56,NET_TCP_ADV_WIN_SCALE = 0x57,NET_IPV4_NONLOCAL_BIND = 0x58,NET_IPV4_ICMP_RATELIMIT = 0x59,NET_IPV4_ICMP_RATEMASK = 0x5A,NET_TCP_TW_REUSE = 0x5B,NET_TCP_FRTO = 0x5C,NET_TCP_LOW_LATENCY = 0x5D,NET_IPV4_IPFRAG_SECRET_INTERVAL = 0x5E,NET_IPV4_IGMP_MAX_MSF = 0x60,NET_TCP_NO_METRICS_SAVE = 0x61,NET_TCP_DEFAULT_WIN_SCALE = 0x69,NET_TCP_MODERATE_RCVBUF = 0x6A,NET_TCP_TSO_WIN_DIVISOR = 0x6B,NET_TCP_BIC_BETA = 0x6C,NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR = 0x6D,NET_TCP_CONG_CONTROL = 0x6E,NET_TCP_ABC = 0x6F,NET_IPV4_IPFRAG_MAX_DIST = 0x70,NET_TCP_MTU_PROBING = 0x71,NET_TCP_BASE_MSS = 0x72,NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS = 0x73,NET_TCP_DMA_COPYBREAK = 0x74,NET_TCP_SLOW_START_AFTER_IDLE = 0x75,};
struct _76D52EC222D2C536EACA604D43F5657A {char *name;char *signature;void *fnPtr;};
enum _77AA6B3C94CF91510975FAEAA78CF27F {NET_ROSE_RESTART_REQUEST_TIMEOUT = 0x1,NET_ROSE_CALL_REQUEST_TIMEOUT = 0x2,NET_ROSE_RESET_REQUEST_TIMEOUT = 0x3,NET_ROSE_CLEAR_REQUEST_TIMEOUT = 0x4,NET_ROSE_ACK_HOLD_BACK_TIMEOUT = 0x5,NET_ROSE_ROUTING_CONTROL = 0x6,NET_ROSE_LINK_FAIL_TIMEOUT = 0x7,NET_ROSE_MAX_VCS = 0x8,NET_ROSE_WINDOW_SIZE = 0x9,NET_ROSE_NO_ACTIVITY_TIMEOUT = 0xA,};
enum _77F4E97EC64EB764A006B2CB38EEE544 {Normal = 0x0,Selected = 0x1,};
union _781B27F37A2DA3C5D0084E69F313DC7D {char __size[36];int __align;};
enum _78AB2E3EF86977834775ADA3E6383E9B {SCM_RIGHTS = 0x1,SCM_CREDENTIALS = 0x2,};
enum _7A6D1403076F33F26AB38429B1986DDD {XtGeometryYes = 0x0,XtGeometryNo = 0x1,XtGeometryAlmost = 0x2,XtGeometryDone = 0x3,};
enum _7AB5A752696E25D059A83A920E9EDD46 {DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES = 0x1,DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES = 0x2,DEV_MAC_HID_MOUSE_BUTTON_EMULATION = 0x3,DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE = 0x4,DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE = 0x5,DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES = 0x6,};
enum _7B4937F8288E0A2632DB0D8517829904 {NET_LLC_STATION_ACK_TIMEOUT = 0x1,};
union _7B6D3CF7C92E6402FF2DDB4E46F022F4 {char __size[8];int __align;};
enum _7BA0AAB70F107C573DDBF8D470C03EEA {ST_RDONLY = 0x1,ST_NOSUID = 0x2,};
enum _7C6A1E1ACDF4A97E77CE90783425BCA4 {CLD_EXITED = 0x1,CLD_KILLED = 0x2,CLD_DUMPED = 0x3,CLD_TRAPPED = 0x4,CLD_STOPPED = 0x5,CLD_CONTINUED = 0x6,};
enum _7D8899B18D60224BD7DC00379072D77E {CTL_BUS_ISA = 0x1,};
struct _7D9782CC89DA8BC9D1AA066BD7A8943F {char pipeName[80];int channel;unsigned int participationType;int timeSlice;};
enum _7E6CC9AB302A52DC230FBF2181C351A3 {NET_LLC2 = 0x1,NET_LLC_STATION = 0x2,};
enum _807353C2561437682B85CDC20D8F25D2 {RANDOM_POOLSIZE = 0x1,RANDOM_ENTROPY_COUNT = 0x2,RANDOM_READ_THRESH = 0x3,RANDOM_WRITE_THRESH = 0x4,RANDOM_BOOT_ID = 0x5,RANDOM_UUID = 0x6,};
enum _8121F3393B56EF45A4608DC145F43305 {DEV_CDROM_INFO = 0x1,DEV_CDROM_AUTOCLOSE = 0x2,DEV_CDROM_AUTOEJECT = 0x3,DEV_CDROM_DEBUG = 0x4,DEV_CDROM_LOCK = 0x5,DEV_CDROM_CHECK_MEDIA = 0x6,};
enum _81CB9C9397203DD8391907B26844B7B6 {IceProcessMessagesSuccess = 0x0,IceProcessMessagesIOError = 0x1,IceProcessMessagesConnectionClosed = 0x2,};
struct _82EB719490A0E9F110B2F30DF6A71FC1 {char *resource;char *c_private;};
enum _8546030AC881EF144A8AFFBFFB571340 {FT_Mod_Err_Base = 0x0,FT_Mod_Err_Autofit = 0x0,FT_Mod_Err_BDF = 0x0,FT_Mod_Err_Cache = 0x0,FT_Mod_Err_CFF = 0x0,FT_Mod_Err_CID = 0x0,FT_Mod_Err_Gzip = 0x0,FT_Mod_Err_LZW = 0x0,FT_Mod_Err_OTvalid = 0x0,FT_Mod_Err_PCF = 0x0,FT_Mod_Err_PFR = 0x0,FT_Mod_Err_PSaux = 0x0,FT_Mod_Err_PShinter = 0x0,FT_Mod_Err_PSnames = 0x0,FT_Mod_Err_Raster = 0x0,FT_Mod_Err_SFNT = 0x0,FT_Mod_Err_Smooth = 0x0,FT_Mod_Err_TrueType = 0x0,FT_Mod_Err_Type1 = 0x0,FT_Mod_Err_Type42 = 0x0,FT_Mod_Err_Winfonts = 0x0,FT_Mod_Err_Max = 0x1,};
enum _854F96D2E86F06551DB8BCCBF3013A19 {EXIF_SUPPORT_LEVEL_UNKNOWN = 0x0,EXIF_SUPPORT_LEVEL_NOT_RECORDED = 0x1,EXIF_SUPPORT_LEVEL_MANDATORY = 0x2,EXIF_SUPPORT_LEVEL_OPTIONAL = 0x3,};
enum _86DEB66C19F24B8F0BC3CEFDC19B8707 {VM_UNUSED1 = 0x1,VM_UNUSED2 = 0x2,VM_UNUSED3 = 0x3,VM_UNUSED4 = 0x4,VM_OVERCOMMIT_MEMORY = 0x5,VM_UNUSED5 = 0x6,VM_UNUSED7 = 0x7,VM_UNUSED8 = 0x8,VM_UNUSED9 = 0x9,VM_PAGE_CLUSTER = 0xA,VM_DIRTY_BACKGROUND = 0xB,VM_DIRTY_RATIO = 0xC,VM_DIRTY_WB_CS = 0xD,VM_DIRTY_EXPIRE_CS = 0xE,VM_NR_PDFLUSH_THREADS = 0xF,VM_OVERCOMMIT_RATIO = 0x10,VM_PAGEBUF = 0x11,VM_HUGETLB_PAGES = 0x12,VM_SWAPPINESS = 0x13,VM_LOWMEM_RESERVE_RATIO = 0x14,VM_MIN_FREE_KBYTES = 0x15,VM_MAX_MAP_COUNT = 0x16,VM_LAPTOP_MODE = 0x17,VM_BLOCK_DUMP = 0x18,VM_HUGETLB_GROUP = 0x19,VM_VFS_CACHE_PRESSURE = 0x1A,VM_LEGACY_VA_LAYOUT = 0x1B,VM_SWAP_TOKEN_TIMEOUT = 0x1C,VM_DROP_PAGECACHE = 0x1D,VM_PERCPU_PAGELIST_FRACTION = 0x1E,VM_ZONE_RECLAIM_MODE = 0x1F,VM_MIN_UNMAPPED = 0x20,VM_PANIC_ON_OOM = 0x21,VM_VDSO_ENABLED = 0x22,VM_MIN_SLAB = 0x23,};
struct _880211171E610BEC08A41169F91F4D60 {unsigned char cmd;char nr_args;char nr_returns;unsigned char data[30];};
enum _8823E4385667F399442D029ECC89BADC {MM_HARD = 0x1,MM_SOFT = 0x2,MM_FIRM = 0x4,MM_APPL = 0x8,MM_UTIL = 0x10,MM_OPSYS = 0x20,MM_RECOVER = 0x40,MM_NRECOV = 0x80,MM_PRINT = 0x100,MM_CONSOLE = 0x200,};
enum _884C1EC5BC597C1C1C3D394BF6C4CBE7 {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_CTRUNC = 0x8,MSG_PROXY = 0x10,MSG_TRUNC = 0x20,MSG_DONTWAIT = 0x40,MSG_EOR = 0x80,MSG_WAITALL = 0x100,MSG_FIN = 0x200,MSG_SYN = 0x400,MSG_CONFIRM = 0x800,MSG_RST = 0x1000,MSG_ERRQUEUE = 0x2000,MSG_NOSIGNAL = 0x4000,MSG_MORE = 0x8000,};
enum _891529C55A3D7F6C466AE0BA608A35EA {P_ALL = 0x0,P_PID = 0x1,P_PGID = 0x2,};
enum _89FB60EA18EC68E58342D0F505790FD5 {TD_THR_ANY_TYPE = 0x0,TD_THR_USER = 0x1,TD_THR_SYSTEM = 0x2,};
struct _8A36C2984BCF3F09374227AC2CA3601E {char pipeName[80];int XOrigin;int YOrigin;int maxHeight;int maxWidth;};
enum _8A5B0459554ADC1FC50DF7FB1D4DC658 {FT_Err_Ok = 0x0,FT_Err_Cannot_Open_Resource = 0x1,FT_Err_Unknown_File_Format = 0x2,FT_Err_Invalid_File_Format = 0x3,FT_Err_Invalid_Version = 0x4,FT_Err_Lower_Module_Version = 0x5,FT_Err_Invalid_Argument = 0x6,FT_Err_Unimplemented_Feature = 0x7,FT_Err_Invalid_Table = 0x8,FT_Err_Invalid_Offset = 0x9,FT_Err_Array_Too_Large = 0xA,FT_Err_Invalid_Glyph_Index = 0x10,FT_Err_Invalid_Character_Code = 0x11,FT_Err_Invalid_Glyph_Format = 0x12,FT_Err_Cannot_Render_Glyph = 0x13,FT_Err_Invalid_Outline = 0x14,FT_Err_Invalid_Composite = 0x15,FT_Err_Too_Many_Hints = 0x16,FT_Err_Invalid_Pixel_Size = 0x17,FT_Err_Invalid_Handle = 0x20,FT_Err_Invalid_Library_Handle = 0x21,FT_Err_Invalid_Driver_Handle = 0x22,FT_Err_Invalid_Face_Handle = 0x23,FT_Err_Invalid_Size_Handle = 0x24,FT_Err_Invalid_Slot_Handle = 0x25,FT_Err_Invalid_CharMap_Handle = 0x26,FT_Err_Invalid_Cache_Handle = 0x27,FT_Err_Invalid_Stream_Handle = 0x28,FT_Err_Too_Many_Drivers = 0x30,FT_Err_Too_Many_Extensions = 0x31,FT_Err_Out_Of_Memory = 0x40,FT_Err_Unlisted_Object = 0x41,FT_Err_Cannot_Open_Stream = 0x51,FT_Err_Invalid_Stream_Seek = 0x52,FT_Err_Invalid_Stream_Skip = 0x53,FT_Err_Invalid_Stream_Read = 0x54,FT_Err_Invalid_Stream_Operation = 0x55,FT_Err_Invalid_Frame_Operation = 0x56,FT_Err_Nested_Frame_Access = 0x57,FT_Err_Invalid_Frame_Read = 0x58,FT_Err_Raster_Uninitialized = 0x60,FT_Err_Raster_Corrupted = 0x61,FT_Err_Raster_Overflow = 0x62,FT_Err_Raster_Negative_Height = 0x63,FT_Err_Too_Many_Caches = 0x70,FT_Err_Invalid_Opcode = 0x80,FT_Err_Too_Few_Arguments = 0x81,FT_Err_Stack_Overflow = 0x82,FT_Err_Code_Overflow = 0x83,FT_Err_Bad_Argument = 0x84,FT_Err_Divide_By_Zero = 0x85,FT_Err_Invalid_Reference = 0x86,FT_Err_Debug_OpCode = 0x87,FT_Err_ENDF_In_Exec_Stream = 0x88,FT_Err_Nested_DEFS = 0x89,FT_Err_Invalid_CodeRange = 0x8A,FT_Err_Execution_Too_Long = 0x8B,FT_Err_Too_Many_Function_Defs = 0x8C,FT_Err_Too_Many_Instruction_Defs = 0x8D,FT_Err_Table_Missing = 0x8E,FT_Err_Horiz_Header_Missing = 0x8F,FT_Err_Locations_Missing = 0x90,FT_Err_Name_Table_Missing = 0x91,FT_Err_CMap_Table_Missing = 0x92,FT_Err_Hmtx_Table_Missing = 0x93,FT_Err_Post_Table_Missing = 0x94,FT_Err_Invalid_Horiz_Metrics = 0x95,FT_Err_Invalid_CharMap_Format = 0x96,FT_Err_Invalid_PPem = 0x97,FT_Err_Invalid_Vert_Metrics = 0x98,FT_Err_Could_Not_Find_Context = 0x99,FT_Err_Invalid_Post_Table_Format = 0x9A,FT_Err_Invalid_Post_Table = 0x9B,FT_Err_Syntax_Error = 0xA0,FT_Err_Stack_Underflow = 0xA1,FT_Err_Ignore = 0xA2,FT_Err_Missing_Startfont_Field = 0xB0,FT_Err_Missing_Font_Field = 0xB1,FT_Err_Missing_Size_Field = 0xB2,FT_Err_Missing_Chars_Field = 0xB3,FT_Err_Missing_Startchar_Field = 0xB4,FT_Err_Missing_Encoding_Field = 0xB5,FT_Err_Missing_Bbx_Field = 0xB6,FT_Err_Bbx_Too_Big = 0xB7,FT_Err_Max = 0xB8,};
enum _8BD9F521841EE507DA6CD23C5DEB68B8 {SANE_FRAME_GRAY = 0x0,SANE_FRAME_RGB = 0x1,SANE_FRAME_RED = 0x2,SANE_FRAME_GREEN = 0x3,SANE_FRAME_BLUE = 0x4,};
enum _8DB803BC5513738C8EA3309052018F73 {NET_DECNET_NODE_TYPE = 0x1,NET_DECNET_NODE_ADDRESS = 0x2,NET_DECNET_NODE_NAME = 0x3,NET_DECNET_DEFAULT_DEVICE = 0x4,NET_DECNET_TIME_WAIT = 0x5,NET_DECNET_DN_COUNT = 0x6,NET_DECNET_DI_COUNT = 0x7,NET_DECNET_DR_COUNT = 0x8,NET_DECNET_DST_GC_INTERVAL = 0x9,NET_DECNET_CONF = 0xA,NET_DECNET_NO_FC_MAX_CWND = 0xB,NET_DECNET_MEM = 0xC,NET_DECNET_RMEM = 0xD,NET_DECNET_WMEM = 0xE,NET_DECNET_DEBUG_LEVEL = 0xFF,};
enum _9051D8B3F8B003A45CF2C181583131A8 {SEGV_MAPERR = 0x1,SEGV_ACCERR = 0x2,};
enum _921B804C5CB7E03958A5E43A5656BF3D {DEV_IPMI_POWEROFF_POWERCYCLE = 0x1,};
struct _96852D299A3BC18B35313C48EFA48634 {unsigned int clock_rate;unsigned int clock_type;unsigned short loopback;unsigned int slot_map;};
enum _96E1CC93C2F1CFF48C6FE97FA848F82E {BUS_ADRALN = 0x1,BUS_ADRERR = 0x2,BUS_OBJERR = 0x3,};
struct _9722585E737591D9DBBFC1CA80083F53 {int __val[2];};
struct _9750BD37C04375AEAD857CD1AEBC6ACD {char *protocol_name;char *network_id;char *auth_name;unsigned short auth_data_length;char *auth_data;};
struct _979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
enum _97E62D0F9169E28A1C7F099874B12937 {MMAP_PAGE_ZERO = 0x100000,ADDR_LIMIT_32BIT = 0x800000,SHORT_INODE = 0x1000000,WHOLE_SECONDS = 0x2000000,STICKY_TIMEOUTS = 0x4000000,};
enum _9C0A09B1627D44E3547F1864F8F06AF5 {NET_IPV6_FORWARDING = 0x1,NET_IPV6_HOP_LIMIT = 0x2,NET_IPV6_MTU = 0x3,NET_IPV6_ACCEPT_RA = 0x4,NET_IPV6_ACCEPT_REDIRECTS = 0x5,NET_IPV6_AUTOCONF = 0x6,NET_IPV6_DAD_TRANSMITS = 0x7,NET_IPV6_RTR_SOLICITS = 0x8,NET_IPV6_RTR_SOLICIT_INTERVAL = 0x9,NET_IPV6_RTR_SOLICIT_DELAY = 0xA,NET_IPV6_USE_TEMPADDR = 0xB,NET_IPV6_TEMP_VALID_LFT = 0xC,NET_IPV6_TEMP_PREFERED_LFT = 0xD,NET_IPV6_REGEN_MAX_RETRY = 0xE,NET_IPV6_MAX_DESYNC_FACTOR = 0xF,NET_IPV6_MAX_ADDRESSES = 0x10,NET_IPV6_FORCE_MLD_VERSION = 0x11,NET_IPV6_ACCEPT_RA_DEFRTR = 0x12,NET_IPV6_ACCEPT_RA_PINFO = 0x13,NET_IPV6_ACCEPT_RA_RTR_PREF = 0x14,NET_IPV6_RTR_PROBE_INTERVAL = 0x15,NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN = 0x16,__NET_IPV6_MAX = 0x17,};
enum _9C31C63761D5D352F3EF8F6380D9A3A0 {NET_IPV6_CONF = 0x10,NET_IPV6_NEIGH = 0x11,NET_IPV6_ROUTE = 0x12,NET_IPV6_ICMP = 0x13,NET_IPV6_BINDV6ONLY = 0x14,NET_IPV6_IP6FRAG_HIGH_THRESH = 0x15,NET_IPV6_IP6FRAG_LOW_THRESH = 0x16,NET_IPV6_IP6FRAG_TIME = 0x17,NET_IPV6_IP6FRAG_SECRET_INTERVAL = 0x18,NET_IPV6_MLD_MAX_MSF = 0x19,};
enum _9C5D24A798A79904BCA8E9BE0F0E493F {IPPROTO_IP = 0x0,IPPROTO_HOPOPTS = 0x0,IPPROTO_ICMP = 0x1,IPPROTO_IGMP = 0x2,IPPROTO_IPIP = 0x4,IPPROTO_TCP = 0x6,IPPROTO_EGP = 0x8,IPPROTO_PUP = 0xC,IPPROTO_UDP = 0x11,IPPROTO_IDP = 0x16,IPPROTO_TP = 0x1D,IPPROTO_IPV6 = 0x29,IPPROTO_ROUTING = 0x2B,IPPROTO_FRAGMENT = 0x2C,IPPROTO_RSVP = 0x2E,IPPROTO_GRE = 0x2F,IPPROTO_ESP = 0x32,IPPROTO_AH = 0x33,IPPROTO_ICMPV6 = 0x3A,IPPROTO_NONE = 0x3B,IPPROTO_DSTOPTS = 0x3C,IPPROTO_MTP = 0x5C,IPPROTO_ENCAP = 0x62,IPPROTO_PIM = 0x67,IPPROTO_COMP = 0x6C,IPPROTO_SCTP = 0x84,IPPROTO_RAW = 0xFF,IPPROTO_MAX = 0x100,};
enum _9CD73F9531C3235FCD002958ECF24B00 {MM_NOSEV = 0x0,MM_HALT = 0x1,MM_ERROR = 0x2,MM_WARNING = 0x3,MM_INFO = 0x4,};
enum _9E1DF9A61974C4C1C54DE3F5F4FAD665 {XawsmTextSelect = 0x0,XawsmTextExtend = 0x1,};
struct _9EDEC9CDD32BA2E5983B8867B401ABD1 {int numerator;int denominator;};
struct _A06AF73261543B69A785AD9B5C737D11 {int depth;int bits_per_pixel;int scanline_pad;};
enum _A07DB15FC3F9C76A4500090AF467BC3A {XawactionStart = 0x0,XawactionAdjust = 0x1,XawactionEnd = 0x2,};
struct _A2DE5C624CAE7E415130221DEBE38D94 {char *device;int type;int baudrate;int samplerate;int resolution;int buttons;int emulate3buttons;int emulate3timeout;int chordmiddle;int flags;};
enum _A2F04AFED0D759E95510362442EAC31A {NET_IPV6_ICMP_RATELIMIT = 0x1,};
enum _A3665E69DB87D7B6ED44928954CD85F4 {IcePoAuthHaveReply = 0x0,IcePoAuthRejected = 0x1,IcePoAuthFailed = 0x2,IcePoAuthDoneCleanup = 0x3,};
struct _A386896A7A6A8667CB6DAB8066B01EA8 {int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;};
enum _A3E7C5F72761EBC037D2D2A236AE02A1 {XawtextRead = 0x0,XawtextAppend = 0x1,XawtextEdit = 0x2,};
enum _A4FC3F986F398A5CBEAD24293CBFE469 {_PC_LINK_MAX = 0x0,_PC_MAX_CANON = 0x1,_PC_MAX_INPUT = 0x2,_PC_NAME_MAX = 0x3,_PC_PATH_MAX = 0x4,_PC_PIPE_BUF = 0x5,_PC_CHOWN_RESTRICTED = 0x6,_PC_NO_TRUNC = 0x7,_PC_VDISABLE = 0x8,_PC_SYNC_IO = 0x9,_PC_ASYNC_IO = 0xA,_PC_PRIO_IO = 0xB,_PC_SOCK_MAXBUF = 0xC,_PC_FILESIZEBITS = 0xD,_PC_REC_INCR_XFER_SIZE = 0xE,_PC_REC_MAX_XFER_SIZE = 0xF,_PC_REC_MIN_XFER_SIZE = 0x10,_PC_REC_XFER_ALIGN = 0x11,_PC_ALLOC_SIZE_MIN = 0x12,_PC_SYMLINK_MAX = 0x13,_PC_2_SYMLINKS = 0x14,};
enum _A98D0825AA235C940E5A466593BCCCF2 {GMON_TAG_TIME_HIST = 0x0,GMON_TAG_CG_ARC = 0x1,GMON_TAG_BB_COUNT = 0x2,};
struct _AA5DE4F56F55237DE42D9AAC0EFC65DE {int *buf;int prec;int sgnd;int width;int height;};
struct _AC1F0727205AA235F31FA7E4FBAB6931 {long long quot;long long rem;};
enum _AC818D2726C4489E171752BFF84D79DA {FE_TONEAREST = 0x0,FE_DOWNWARD = 0x400,FE_UPWARD = 0x800,FE_TOWARDZERO = 0xC00,};
enum _ACFC05DFBD69156C0388855EBEA4D33B {NET_DECNET_CONF_DEV_PRIORITY = 0x1,NET_DECNET_CONF_DEV_T1 = 0x2,NET_DECNET_CONF_DEV_T2 = 0x3,NET_DECNET_CONF_DEV_T3 = 0x4,NET_DECNET_CONF_DEV_FORWARDING = 0x5,NET_DECNET_CONF_DEV_BLKSIZE = 0x6,NET_DECNET_CONF_DEV_STATE = 0x7,};
struct _ADF91E6B5301140E8711A6FF29415028 {char depth;unsigned int visual_id;};
enum _AE3329FEB427F74B2DA967177CE854FD {NET_ATALK_AARP_EXPIRY_TIME = 0x1,NET_ATALK_AARP_TICK_TIME = 0x2,NET_ATALK_AARP_RETRANSMIT_LIMIT = 0x3,NET_ATALK_AARP_RESOLVE_TIME = 0x4,};
struct _AE7090D44B263C525193247B1C3DC203 {unsigned short x;unsigned short y;unsigned char macroblock_type;unsigned char motion_type;unsigned char motion_vertical_field_select;unsigned char dct_type;short PMV[2][2][2];unsigned int index;unsigned short coded_block_pattern;unsigned short pad0;};
enum _AEEDBE257A0664EDA892534EE275891B {XawtextWrapNever = 0x0,XawtextWrapLine = 0x1,XawtextWrapWord = 0x2,};
struct _AFBA3BFF93393526E752507E8910BD40 {char pipeName[80];int networkId;};
enum _B017515FC8405800518D7337EC8ACF8A {FS_DQ_LOOKUPS = 0x1,FS_DQ_DROPS = 0x2,FS_DQ_READS = 0x3,FS_DQ_WRITES = 0x4,FS_DQ_CACHE_HITS = 0x5,FS_DQ_ALLOCATED = 0x6,FS_DQ_FREE = 0x7,FS_DQ_SYNCS = 0x8,FS_DQ_WARNINGS = 0x9,};
enum _B1BBC3EB11550C1AA81C57463DE5079D {NET_DCCP_DEFAULT = 0x1,};
enum _B2430AC2242BA7F2580EA2C6A8B8DC7A {KERN_OSTYPE = 0x1,KERN_OSRELEASE = 0x2,KERN_OSREV = 0x3,KERN_VERSION = 0x4,KERN_SECUREMASK = 0x5,KERN_PROF = 0x6,KERN_NODENAME = 0x7,KERN_DOMAINNAME = 0x8,KERN_CAP_BSET = 0xE,KERN_PANIC = 0xF,KERN_REALROOTDEV = 0x10,KERN_SPARC_REBOOT = 0x15,KERN_CTLALTDEL = 0x16,KERN_PRINTK = 0x17,KERN_NAMETRANS = 0x18,KERN_PPC_HTABRECLAIM = 0x19,KERN_PPC_ZEROPAGED = 0x1A,KERN_PPC_POWERSAVE_NAP = 0x1B,KERN_MODPROBE = 0x1C,KERN_SG_BIG_BUFF = 0x1D,KERN_ACCT = 0x1E,KERN_PPC_L2CR = 0x1F,KERN_RTSIGNR = 0x20,KERN_RTSIGMAX = 0x21,KERN_SHMMAX = 0x22,KERN_MSGMAX = 0x23,KERN_MSGMNB = 0x24,KERN_MSGPOOL = 0x25,KERN_SYSRQ = 0x26,KERN_MAX_THREADS = 0x27,KERN_RANDOM = 0x28,KERN_SHMALL = 0x29,KERN_MSGMNI = 0x2A,KERN_SEM = 0x2B,KERN_SPARC_STOP_A = 0x2C,KERN_SHMMNI = 0x2D,KERN_OVERFLOWUID = 0x2E,KERN_OVERFLOWGID = 0x2F,KERN_SHMPATH = 0x30,KERN_HOTPLUG = 0x31,KERN_IEEE_EMULATION_WARNINGS = 0x32,KERN_S390_USER_DEBUG_LOGGING = 0x33,KERN_CORE_USES_PID = 0x34,KERN_TAINTED = 0x35,KERN_CADPID = 0x36,KERN_PIDMAX = 0x37,KERN_CORE_PATTERN = 0x38,KERN_PANIC_ON_OOPS = 0x39,KERN_HPPA_PWRSW = 0x3A,KERN_HPPA_UNALIGNED = 0x3B,KERN_PRINTK_RATELIMIT = 0x3C,KERN_PRINTK_RATELIMIT_BURST = 0x3D,KERN_PTY = 0x3E,KERN_NGROUPS_MAX = 0x3F,KERN_SPARC_SCONS_PWROFF = 0x40,KERN_HZ_TIMER = 0x41,KERN_UNKNOWN_NMI_PANIC = 0x42,KERN_BOOTLOADER_TYPE = 0x43,KERN_RANDOMIZE = 0x44,KERN_SETUID_DUMPABLE = 0x45,KERN_SPIN_RETRY = 0x46,KERN_ACPI_VIDEO_FLAGS = 0x47,KERN_IA64_UNALIGNED = 0x48,KERN_COMPAT_LOG = 0x49,KERN_MAX_LOCK_DEPTH = 0x4A,};
struct _B278447F4BA50B253C16979F98AB98A4 {int reparented;};
enum _B34E6FF94D606ADE7B24EB7AB8A02C61 {SHUT_RD = 0x0,SHUT_WR = 0x1,SHUT_RDWR = 0x2,};
enum _B4D60AD46407E27163A1AD596294B62F {SANE_CONSTRAINT_NONE = 0x0,SANE_CONSTRAINT_RANGE = 0x1,SANE_CONSTRAINT_WORD_LIST = 0x2,SANE_CONSTRAINT_STRING_LIST = 0x3,};
enum _B539734676A04848B68060D6D483E0A0 {XIMTextType = 0x0,XIMBitmapType = 0x1,};
enum _B56A8FDB734905B01AAA83C795239EA3 {EXIF_DATA_TYPE_UNCOMPRESSED_CHUNKY = 0x0,EXIF_DATA_TYPE_UNCOMPRESSED_PLANAR = 0x1,EXIF_DATA_TYPE_UNCOMPRESSED_YCC = 0x2,EXIF_DATA_TYPE_COMPRESSED = 0x3,EXIF_DATA_TYPE_COUNT = 0x4,};
enum _B64C39E2ADABB22C50C1D912F1D253CC {XIMIsInvisible = 0x0,XIMIsPrimary = 0x1,XIMIsSecondary = 0x2,};
enum _B66645BB19D3E41D07C841CC99076606 {TD_OK = 0x0,TD_ERR = 0x1,TD_NOTHR = 0x2,TD_NOSV = 0x3,TD_NOLWP = 0x4,TD_BADPH = 0x5,TD_BADTH = 0x6,TD_BADSH = 0x7,TD_BADTA = 0x8,TD_BADKEY = 0x9,TD_NOMSG = 0xA,TD_NOFPREGS = 0xB,TD_NOLIBTHREAD = 0xC,TD_NOEVENT = 0xD,TD_NOCAPAB = 0xE,TD_DBERR = 0xF,TD_NOAPLIC = 0x10,TD_NOTSD = 0x11,TD_MALLOC = 0x12,TD_PARTIALREG = 0x13,TD_NOXREGS = 0x14,TD_TLSDEFER = 0x15,TD_NOTALLOC = 0x15,TD_VERSION = 0x16,TD_NOTLS = 0x17,};
enum _B9867847443BB25721460208505189B7 {XtCallbackNoList = 0x0,XtCallbackHasNone = 0x1,XtCallbackHasSome = 0x2,};
enum _B9B1E3761F7AC9C80FCB354FC1070F12 {SmcClosedNow = 0x0,SmcClosedASAP = 0x1,SmcConnectionInUse = 0x2,};
struct _BAC7E67B0C2C05C40DFF67087D59816E {unsigned int t391;unsigned int t392;unsigned int n391;unsigned int n392;unsigned int n393;unsigned short lmi;unsigned short dce;};
enum _BBCB981D413E493465A41117C60C00A1 {LIBMTP_FILETYPE_WAV = 0x0,LIBMTP_FILETYPE_MP3 = 0x1,LIBMTP_FILETYPE_WMA = 0x2,LIBMTP_FILETYPE_OGG = 0x3,LIBMTP_FILETYPE_AUDIBLE = 0x4,LIBMTP_FILETYPE_MP4 = 0x5,LIBMTP_FILETYPE_UNDEF_AUDIO = 0x6,LIBMTP_FILETYPE_WMV = 0x7,LIBMTP_FILETYPE_AVI = 0x8,LIBMTP_FILETYPE_MPEG = 0x9,LIBMTP_FILETYPE_ASF = 0xA,LIBMTP_FILETYPE_QT = 0xB,LIBMTP_FILETYPE_UNDEF_VIDEO = 0xC,LIBMTP_FILETYPE_JPEG = 0xD,LIBMTP_FILETYPE_JFIF = 0xE,LIBMTP_FILETYPE_TIFF = 0xF,LIBMTP_FILETYPE_BMP = 0x10,LIBMTP_FILETYPE_GIF = 0x11,LIBMTP_FILETYPE_PICT = 0x12,LIBMTP_FILETYPE_PNG = 0x13,LIBMTP_FILETYPE_VCALENDAR1 = 0x14,LIBMTP_FILETYPE_VCALENDAR2 = 0x15,LIBMTP_FILETYPE_VCARD2 = 0x16,LIBMTP_FILETYPE_VCARD3 = 0x17,LIBMTP_FILETYPE_WINDOWSIMAGEFORMAT = 0x18,LIBMTP_FILETYPE_WINEXEC = 0x19,LIBMTP_FILETYPE_TEXT = 0x1A,LIBMTP_FILETYPE_HTML = 0x1B,LIBMTP_FILETYPE_UNKNOWN = 0x1C,};
enum _BBDC91CCB9D7364B7012064E8011D5AF {MS_RDONLY = 0x1,MS_NOSUID = 0x2,MS_NODEV = 0x4,MS_NOEXEC = 0x8,MS_SYNCHRONOUS = 0x10,MS_REMOUNT = 0x20,MS_MANDLOCK = 0x40,S_WRITE = 0x80,S_APPEND = 0x100,S_IMMUTABLE = 0x200,MS_NOATIME = 0x400,MS_NODIRATIME = 0x800,MS_BIND = 0x1000,};
enum _BBF51B68E199C550B4BD602DD9A27574 {XawtextResizeNever = 0x0,XawtextResizeWidth = 0x1,XawtextResizeHeight = 0x2,XawtextResizeBoth = 0x3,};
struct _BC246FD96289B80B779C80FD0A76F445 {int himark;int lowmark;int balance;};
enum _BCBBA9AC94D25DC3586E84CD32717A4D {IF_OPER_UNKNOWN = 0x0,IF_OPER_NOTPRESENT = 0x1,IF_OPER_DOWN = 0x2,IF_OPER_LOWERLAYERDOWN = 0x3,IF_OPER_TESTING = 0x4,IF_OPER_DORMANT = 0x5,IF_OPER_UP = 0x6,};
enum _BCDA133813398945F6840621756ADB21 {NET_PROTO_CONF_ALL = 0xFFFFFFFE,NET_PROTO_CONF_DEFAULT = 0xFFFFFFFD,};
enum _BEA24FCA785E61799FFE1578A73CE71E {EXIF_DATA_OPTION_IGNORE_UNKNOWN_TAGS = 0x1,EXIF_DATA_OPTION_FOLLOW_SPECIFICATION = 0x2,};
struct _BEA3E970906BDE5578391186783FC521 {int extension;int major_opcode;int first_event;int first_error;};
struct _BF04F385087D384300B2A0AB26B803BF {unsigned short red;unsigned short green;unsigned short blue;unsigned short alpha;};
struct _BFB970BD49ED9B406D7CBF54A76D57DD {int key_click_percent;int bell_percent;int bell_pitch;int bell_duration;int led;int led_mode;int key;int auto_repeat_mode;};
enum _BFC3F34F6952027A5BE2BDFB69B3FD82 {ABI_DEFHANDLER_COFF = 0x1,ABI_DEFHANDLER_ELF = 0x2,ABI_DEFHANDLER_LCALL7 = 0x3,ABI_DEFHANDLER_LIBCSO = 0x4,ABI_TRACE = 0x5,ABI_FAKE_UTSNAME = 0x6,};
enum _C0270FB39E4CE07AC157CD319F68544E {NET_NEIGH_MCAST_SOLICIT = 0x1,NET_NEIGH_UCAST_SOLICIT = 0x2,NET_NEIGH_APP_SOLICIT = 0x3,NET_NEIGH_RETRANS_TIME = 0x4,NET_NEIGH_REACHABLE_TIME = 0x5,NET_NEIGH_DELAY_PROBE_TIME = 0x6,NET_NEIGH_GC_STALE_TIME = 0x7,NET_NEIGH_UNRES_QLEN = 0x8,NET_NEIGH_PROXY_QLEN = 0x9,NET_NEIGH_ANYCAST_DELAY = 0xA,NET_NEIGH_PROXY_DELAY = 0xB,NET_NEIGH_LOCKTIME = 0xC,NET_NEIGH_GC_INTERVAL = 0xD,NET_NEIGH_GC_THRESH1 = 0xE,NET_NEIGH_GC_THRESH2 = 0xF,NET_NEIGH_GC_THRESH3 = 0x10,NET_NEIGH_RETRANS_TIME_MS = 0x11,NET_NEIGH_REACHABLE_TIME_MS = 0x12,__NET_NEIGH_MAX = 0x13,};
enum _C24571D27ADEE20044434E1DF48F13D7 {PTHREAD_INHERIT_SCHED = 0x0,PTHREAD_EXPLICIT_SCHED = 0x1,};
enum _C25EDA2AFA4331EE1194B950D24C90A5 {XSyncAlarmActive = 0x0,XSyncAlarmInactive = 0x1,XSyncAlarmDestroyed = 0x2,};
struct _C3C653411B6E49EB349248421822EA60 {int fd;char buf[4096];int buf_size;};
enum _C41CDAA8564673A221AD080C882502C2 {NET_LLC2_ACK_TIMEOUT = 0x1,NET_LLC2_P_TIMEOUT = 0x2,NET_LLC2_REJ_TIMEOUT = 0x3,NET_LLC2_BUSY_TIMEOUT = 0x4,};
enum _C4D2990799738055A4FAFA16DB7CE68F {DT_UNKNOWN = 0x0,DT_FIFO = 0x1,DT_CHR = 0x2,DT_DIR = 0x4,DT_BLK = 0x6,DT_REG = 0x8,DT_LNK = 0xA,DT_SOCK = 0xC,DT_WHT = 0xE,};
enum _C6409F74CDDB4F3B136154E2773784F4 {OPT_END = 0x0,OPT_FLAG = 0x1,OPT_STRING = 0x2,OPT_INT = 0x3,OPT_UINT = 0x4,OPT_LONG = 0x5,OPT_ULONG = 0x6,OPT_FLOAT = 0x7,};
struct _C6621B22F6499CFAE165CD3E2FB352AA {int order;};
enum _C68DBFABEFD6F7DD662F0678857B890B {DEV_PARPORT_DEFAULT_TIMESLICE = 0x1,DEV_PARPORT_DEFAULT_SPINTIME = 0x2,};
enum _C6DE0E8AF8221E8B7722BED8F4800537 {XtListHead = 0x0,XtListTail = 0x1,};
struct _C70BF6770A9AD12C6B9D1FF146C70C10 { char *orientation;};
struct _C872F43EA669D8C471FAD313DA7A2479 {int n_chan;int bps;char cs[256];int width;int height;double xres;double yres;};
enum _C8C7928264C653DC751C42DB42AAB11F {FTW_F = 0x0,FTW_D = 0x1,FTW_DNR = 0x2,FTW_NS = 0x3,FTW_SL = 0x4,};
enum _C9547D9B9E214CE5EBD681A7EEC38B08 {IceProtocolSetupSuccess = 0x0,IceProtocolSetupFailure = 0x1,IceProtocolSetupIOError = 0x2,IceProtocolAlreadyActive = 0x3,};
enum _CA14DD4F2E8D90DC28AD71B4B0C7A8E9 {LT_ERROR_UNKNOWN = 0x0,LT_ERROR_DLOPEN_NOT_SUPPORTED = 0x1,LT_ERROR_INVALID_LOADER = 0x2,LT_ERROR_INIT_LOADER = 0x3,LT_ERROR_REMOVE_LOADER = 0x4,LT_ERROR_FILE_NOT_FOUND = 0x5,LT_ERROR_DEPLIB_NOT_FOUND = 0x6,LT_ERROR_NO_SYMBOLS = 0x7,LT_ERROR_CANNOT_OPEN = 0x8,LT_ERROR_CANNOT_CLOSE = 0x9,LT_ERROR_SYMBOL_NOT_FOUND = 0xA,LT_ERROR_NO_MEMORY = 0xB,LT_ERROR_INVALID_HANDLE = 0xC,LT_ERROR_BUFFER_OVERFLOW = 0xD,LT_ERROR_INVALID_ERRORCODE = 0xE,LT_ERROR_SHUTDOWN = 0xF,LT_ERROR_CLOSE_RESIDENT_MODULE = 0x10,LT_ERROR_INVALID_MUTEX_ARGS = 0x11,LT_ERROR_INVALID_POSITION = 0x12,LT_ERROR_MAX = 0x13,};
struct _CA1CD5B08005403884A7641019451813 {short x;short y;unsigned short width;unsigned short height;};
enum _CAA3FD00411B0A7D7F1344282CDE0D9F {XtJustifyLeft = 0x0,XtJustifyCenter = 0x1,XtJustifyRight = 0x2,};
enum _CCC31958CF2403C4DC26E468BC116719 {SI_ASYNCNL = 0xFFFFFFC4,SI_TKILL = 0xFFFFFFFA,SI_SIGIO = 0xFFFFFFFB,SI_ASYNCIO = 0xFFFFFFFC,SI_MESGQ = 0xFFFFFFFD,SI_TIMER = 0xFFFFFFFE,SI_QUEUE = 0xFFFFFFFF,SI_USER = 0x0,SI_KERNEL = 0x80,};
enum _CD18EE7D8E043705C6E91FECCDBD5439 {XawstPositions = 0x0,XawstWhiteSpace = 0x1,XawstEOL = 0x2,XawstParagraph = 0x3,XawstAll = 0x4,XawstAlphaNumeric = 0x5,};
enum _CE93EC4FEABABA83F96403AD96B9B05B {NET_IPV4_CONF_FORWARDING = 0x1,NET_IPV4_CONF_MC_FORWARDING = 0x2,NET_IPV4_CONF_PROXY_ARP = 0x3,NET_IPV4_CONF_ACCEPT_REDIRECTS = 0x4,NET_IPV4_CONF_SECURE_REDIRECTS = 0x5,NET_IPV4_CONF_SEND_REDIRECTS = 0x6,NET_IPV4_CONF_SHARED_MEDIA = 0x7,NET_IPV4_CONF_RP_FILTER = 0x8,NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE = 0x9,NET_IPV4_CONF_BOOTP_RELAY = 0xA,NET_IPV4_CONF_LOG_MARTIANS = 0xB,NET_IPV4_CONF_TAG = 0xC,NET_IPV4_CONF_ARPFILTER = 0xD,NET_IPV4_CONF_MEDIUM_ID = 0xE,NET_IPV4_CONF_NOXFRM = 0xF,NET_IPV4_CONF_NOPOLICY = 0x10,NET_IPV4_CONF_FORCE_IGMP_VERSION = 0x11,NET_IPV4_CONF_ARP_ANNOUNCE = 0x12,NET_IPV4_CONF_ARP_IGNORE = 0x13,NET_IPV4_CONF_PROMOTE_SECONDARIES = 0x14,NET_IPV4_CONF_ARP_ACCEPT = 0x15,__NET_IPV4_CONF_MAX = 0x16,};
struct _CF61D8B6D31E4D5BDA17EA1156C41E64 {unsigned short __control_word;unsigned short __unused1;unsigned short __status_word;unsigned short __unused2;unsigned short __tags;unsigned short __unused3;unsigned int __eip;unsigned short __cs_selector;unsigned int __opcode : 11;unsigned int __unused4 : 5;unsigned int __data_offset;unsigned short __data_selector;unsigned short __unused5;};
enum _CFDA3CC52F0D4A83481BDDD19D316FDE {FE_INVALID = 0x1,__FE_DENORM = 0x2,FE_DIVBYZERO = 0x4,FE_OVERFLOW = 0x8,FE_UNDERFLOW = 0x10,FE_INEXACT = 0x20,};
enum _D09768A2BC77380209F000FE4177D0DD {NET_X25_RESTART_REQUEST_TIMEOUT = 0x1,NET_X25_CALL_REQUEST_TIMEOUT = 0x2,NET_X25_RESET_REQUEST_TIMEOUT = 0x3,NET_X25_CLEAR_REQUEST_TIMEOUT = 0x4,NET_X25_ACK_HOLD_BACK_TIMEOUT = 0x5,};
union _D1779CA5851A61401DD36BCDAF347214 {char __size[20];int __align;};
struct _D1A99149F7DEF10F5C1917DF5D27BC53 {unsigned char input_class;unsigned char event_type_base;};
union _D1D0F511BF997F52624AFB2B0CE27B40 {char __size[4];int __align;};
enum _D2435FF4F3AAF25C455EAA2CA1747697 {XtAddress = 0x0,XtBaseOffset = 0x1,XtImmediate = 0x2,XtResourceString = 0x3,XtResourceQuark = 0x4,XtWidgetBaseOffset = 0x5,XtProcedureArg = 0x6,};
enum _D27D64ACA6BE44402370DBB31D47E682 {XawselectNull = 0x0,XawselectPosition = 0x1,XawselectChar = 0x2,XawselectWord = 0x3,XawselectLine = 0x4,XawselectParagraph = 0x5,XawselectAll = 0x6,XawselectAlphaNumeric = 0x7,};
struct _D379431B13F78A36F2202C5AA386190E {char *dptr;int dsize;};
enum _D4AB9A46DE65367CC0FF11AD6E77796A {TD_THR_ANY_STATE = 0x0,TD_THR_UNKNOWN = 0x1,TD_THR_STOPPED = 0x2,TD_THR_RUN = 0x3,TD_THR_ACTIVE = 0x4,TD_THR_ZOMBIE = 0x5,TD_THR_SLEEP = 0x6,TD_THR_STOPPED_ASLEEP = 0x7,};
enum _D6648E7C00A5D72C8804EAE47C88934A {HighlightNone = 0x0,HighlightWhenUnset = 0x1,HighlightAlways = 0x2,};
enum _D6780478D9BE6E11BA44DDB700E1646F {XtNoServerGrab = 0x0,XtPassiveServerGrab = 0x1,XtActiveServerGrab = 0x2,XtPseudoPassiveServerGrab = 0x3,XtPseudoActiveServerGrab = 0x4,};
enum _D690D5C64A428DDCADD2EDBBEBC4BFE4 {DEV_RAID_SPEED_LIMIT_MIN = 0x1,DEV_RAID_SPEED_LIMIT_MAX = 0x2,};
struct _D6CB40C77BBA5C4EA30E630B21A87947 {int id;char *name;};
enum _D8F03A40183C1F0DFE13800B3B9FB0ED {FSETLOCKING_QUERY = 0x0,FSETLOCKING_INTERNAL = 0x1,FSETLOCKING_BYCALLER = 0x2,};
enum _D977E9F951F185655E8D10358B86BF77 {EXIF_BYTE_ORDER_MOTOROLA = 0x0,EXIF_BYTE_ORDER_INTEL = 0x1,};
enum _DB4B60BC3E5D47BB5823C48350265A79 {XIMForwardChar = 0x0,XIMBackwardChar = 0x1,XIMForwardWord = 0x2,XIMBackwardWord = 0x3,XIMCaretUp = 0x4,XIMCaretDown = 0x5,XIMNextLine = 0x6,XIMPreviousLine = 0x7,XIMLineStart = 0x8,XIMLineEnd = 0x9,XIMAbsolutePosition = 0xA,XIMDontChange = 0xB,};
enum _DC2797625D574A9AF0B4A811E544652D {PTHREAD_CANCEL_ENABLE = 0x0,PTHREAD_CANCEL_DISABLE = 0x1,};
struct _DCB8A1A5DF0C1422D7122422CAF2D078 {unsigned char c_class;unsigned char length;};
enum _DD7C7A6F7774314680C00686808A9C69 {IcePaAuthContinue = 0x0,IcePaAuthAccepted = 0x1,IcePaAuthRejected = 0x2,IcePaAuthFailed = 0x3,};
enum _DDE587BC9507421E24019D1CDC2018E8 {XawtextScrollNever = 0x0,XawtextScrollWhenNeeded = 0x1,XawtextScrollAlways = 0x2,};
struct _DE22F0CCEF99DCE80683B5031CFFEACA {int num;char *name;float verticalRefresh;int flags;int imageWidth;int imageHeight;int pixmapWidth;int pixmapHeight;int bytesPerScanline;int byteOrder;int depth;int bitsPerPixel;unsigned int redMask;unsigned int greenMask;unsigned int blueMask;short visualClass;int viewportWidth;int viewportHeight;int xViewportStep;int yViewportStep;int maxViewportX;int maxViewportY;int viewportFlags;int reserved1;int reserved2;};
struct _DE2D2D600621BF6A9A3C6AB05D887D2A {unsigned int interval;unsigned int timeout;};
struct _E019DD19C3E276A39E4768CCE95A0FD0 {int frabjous;};
enum _E027FAAD9E62D0114E3908730A75FC8D {FPE_INTDIV = 0x1,FPE_INTOVF = 0x2,FPE_FLTDIV = 0x3,FPE_FLTOVF = 0x4,FPE_FLTUND = 0x5,FPE_FLTRES = 0x6,FPE_FLTINV = 0x7,FPE_FLTSUB = 0x8,};
enum _E0BCD9FA8FAD627D1AF071660FC89943 {INOTIFY_MAX_USER_INSTANCES = 0x1,INOTIFY_MAX_USER_WATCHES = 0x2,INOTIFY_MAX_QUEUED_EVENTS = 0x3,};
enum _E12B6EC3796E924F65D7BDA27D4A9CE5 {PTHREAD_SCOPE_SYSTEM = 0x0,PTHREAD_SCOPE_PROCESS = 0x1,};
enum _E1B461D6ADC649FA7943809455C6C6EE {NOTIFY_BPT = 0x0,NOTIFY_AUTOBPT = 0x1,NOTIFY_SYSCALL = 0x2,};
enum _E203AC54CF4949A66D893C858D3FE04C {SendWidgetTree = 0x0,SetValues = 0x1,GetResources = 0x2,GetGeometry = 0x3,FindChild = 0x4,GetValues = 0x5,};
enum _E2BA145CAD3FA99800CF745E3AD6FBD8 {IJS_CMD_ACK = 0x0,IJS_CMD_NAK = 0x1,IJS_CMD_PING = 0x2,IJS_CMD_PONG = 0x3,IJS_CMD_OPEN = 0x4,IJS_CMD_CLOSE = 0x5,IJS_CMD_BEGIN_JOB = 0x6,IJS_CMD_END_JOB = 0x7,IJS_CMD_CANCEL_JOB = 0x8,IJS_CMD_QUERY_STATUS = 0x9,IJS_CMD_LIST_PARAMS = 0xA,IJS_CMD_ENUM_PARAM = 0xB,IJS_CMD_SET_PARAM = 0xC,IJS_CMD_GET_PARAM = 0xD,IJS_CMD_BEGIN_PAGE = 0xE,IJS_CMD_SEND_DATA_BLOCK = 0xF,IJS_CMD_END_PAGE = 0x10,IJS_CMD_EXIT = 0x11,};
enum _E36C8D2C56B42191E3816E8650763980 {LIO_WAIT = 0x0,LIO_NOWAIT = 0x1,};
enum _E385CDEA8CFF6E4370ACEA6C55A0E665 {PTY_MAX = 0x1,PTY_NR = 0x2,};
struct _E4175BE510398187CE128A5A014B31E0 {int id;int type;int byte_order;char guid[16];int bits_per_pixel;int format;int num_planes;int depth;unsigned int red_mask;unsigned int green_mask;unsigned int blue_mask;unsigned int y_sample_bits;unsigned int u_sample_bits;unsigned int v_sample_bits;unsigned int horz_y_period;unsigned int horz_u_period;unsigned int horz_v_period;unsigned int vert_y_period;unsigned int vert_u_period;unsigned int vert_v_period;char component_order[32];int scanline_order;};
enum _E5174C28E2C76F79C438E7F3C344BC7A {NormalResource = 0x0,ConstraintResource = 0x1,};
enum _E54E6D51CE7B5536353B8548369F9C7D {XtorientHorizontal = 0x0,XtorientVertical = 0x1,};
struct _E55328F014D59CB8D8C2D56824FBB3BE {char *name;char *desc;};
struct _E688C0674EF62F7B7CE00CF8BBC4E652 {char *configfile;char *modulepath;char *logfile;};
enum _E6EAAA6568A176E748BE1EBE64072FDA {XawjustifyLeft = 0x0,XawjustifyRight = 0x1,XawjustifyCenter = 0x2,XawjustifyFull = 0x3,};
struct _E7564DB44F0EBD2E4F38C95410816DF7 {int screen_number;short x_org;short y_org;short width;short height;};
struct _E7C62F5F3E0275B7F733491039FF6F2A {char *filename;char *name;int ref_count;};
enum _E9E0E1DFB2F6F0EF0EA94C4F0D403FDA {FcEndianBig = 0x0,FcEndianLittle = 0x1,};
struct _EA6E221180A88D0F80F7EA618755CCA9 {unsigned int event_mask;};
enum _EABC889922A50A303F6B4C71DAEB95C3 {EXIF_LOG_CODE_NONE = 0x0,EXIF_LOG_CODE_DEBUG = 0x1,EXIF_LOG_CODE_NO_MEMORY = 0x2,EXIF_LOG_CODE_CORRUPT_DATA = 0x3,};
struct _EAD4BA1AA5D214B5D4E5F46AB8426598 {unsigned int sequence;};
struct _EBE355A101A506B8BB9BC1A4B6A6F5B0 {unsigned short red;unsigned short green;unsigned short blue;};
enum _EC76598FBB86ACEAD9C3AB7DF2C978D2 {ABSOLUTE_TIME = 0x0,RELATIVE_TO_START_TIME = 0x1,RELATIVE_TO_END_TIME = 0x2,};
struct _ED5182E24FA63E003AABD0C8CEC5D325 {char pipeName[80];int srcXOrigin;int srcYOrigin;int srcWidth;int srcHeight;int destXOrigin;int destYOrigin;int destWidth;int destHeight;};
struct _EDB85F966E4A638CA0FF7E75C4B94ACF {char rose_addr[5];};
enum _EDBA1914F16BC538415B0E0A3A3FD3BB {FIND = 0x0,ENTER = 0x1,};
struct _EDFC536A603B7BCAB77AE790F95C9CC5 {char *name;unsigned int nlines;char **lines;};
enum _EE526AEE819F68457CE89197307C431F {XctSegment = 0x0,XctC0Segment = 0x1,XctGLSegment = 0x2,XctC1Segment = 0x3,XctGRSegment = 0x4,XctExtendedSegment = 0x5,XctExtension = 0x6,XctHorizontal = 0x7,XctEndOfText = 0x8,XctError = 0x9,};
struct _EEC12600E3B3BC42C851475B8200B3A2 {unsigned int clock_rate;unsigned int clock_type;unsigned short loopback;};
struct _F028EE1E7A219E794434525B0B591EF9 {unsigned char c_class;unsigned char length;short num_keys;char keys[32];};
enum _F19F9B134F208A3967B2D7983280CA18 {_ISupper = 0x100,_ISlower = 0x200,_ISalpha = 0x400,_ISdigit = 0x800,_ISxdigit = 0x1000,_ISspace = 0x2000,_ISprint = 0x4000,_ISgraph = 0x8000,_ISblank = 0x1,_IScntrl = 0x2,_ISpunct = 0x4,_ISalnum = 0x8,};
struct _F1F9335C32D188513BC2595A34A539C6 {unsigned short encoding;unsigned short parity;};
struct _F26672320A718E8E26EFAEDB64EDC182 {char *buf;char *tag;char *val;char *pos;};
enum _F5967C7ED14E617C589EA5E59AAD7923 {SANE_TYPE_BOOL = 0x0,SANE_TYPE_INT = 0x1,SANE_TYPE_FIXED = 0x2,SANE_TYPE_STRING = 0x3,SANE_TYPE_BUTTON = 0x4,SANE_TYPE_GROUP = 0x5,};
union _F802AEB59326FE5752476AC56FC6EFE2 {char __size[16];int __align;};
struct _F87A538C433C2C2FB670457A634B5AF2 {short x;short y;unsigned short flags;};
enum _F931043289F3EB625E64AA790190F860 {PTHREAD_MUTEX_TIMED_NP = 0x0,PTHREAD_MUTEX_RECURSIVE_NP = 0x1,PTHREAD_MUTEX_ERRORCHECK_NP = 0x2,PTHREAD_MUTEX_ADAPTIVE_NP = 0x3,};
struct _FB68FDDBB52DBDF02F327E3198820E09 {unsigned int fds_bits[32];};
enum _FCD655E0C39E155367D8B8505F7FCFE1 {BUS_ISA_MEM_BASE = 0x1,BUS_ISA_PORT_BASE = 0x2,BUS_ISA_PORT_SHIFT = 0x3,};
enum _FCF7146F21D65165DF73AAE311CA591D {XawChainTop = 0x0,XawChainBottom = 0x1,XawChainLeft = 0x2,XawChainRight = 0x3,XawRubber = 0x4,};
enum _FE790CD3BD14997723CBFB5A61519AED {SIGEV_SIGNAL = 0x0,SIGEV_NONE = 0x1,SIGEV_THREAD = 0x2,SIGEV_THREAD_ID = 0x4,};
struct _FF8B70C3EB5683862853208A738C6C2E {unsigned short first;unsigned short last;};
enum MACRO_AppleWMControllerNotifyMask {AppleWMControllerNotifyMask = 1,AppleWMActivationNotifyMask = 2,AppleWMPasteboardNotifyMask = 4,};
enum MACRO_MultibufferWindowUpdateHint {MultibufferWindowUpdateHint = 1,};
enum MACRO_WindowsWMFrameStyleDlgFrame {WindowsWMFrameStyleDlgFrame = 0x400000,};
enum MACRO_WindowsWMFrameStyleMaximize {WindowsWMFrameStyleMaximize = 0x1000000,};
enum MACRO_XIMStringConversionLeftEdge {XIMStringConversionLeftEdge = 0x1,XIMStringConversionRightEdge = 0x2,XIMStringConversionTopEdge = 0x4,XIMStringConversionBottomEdge = 0x8,XIMStringConversionConcealed = 0x10,XIMStringConversionWrapped = 0x20,};
enum MACRO_XkbAllNewKeyboardEventsMask {XkbAllNewKeyboardEventsMask = 0x7,};
enum MACRO_XtCompositeExtensionVersion {XtCompositeExtensionVersion = 2,};
enum MACRO_sz_lbxQuickMotionDeltaEvent {sz_lbxQuickMotionDeltaEvent = 4,sz_lbxMotionDeltaEvent = 8,};
enum MACRO_sz_xScreenSaverQueryInfoReq {sz_xScreenSaverQueryInfoReq = 8,sz_xScreenSaverQueryInfoReply = 32,};
enum MACRO_sz_xSecurityQueryVersionReq {sz_xSecurityQueryVersionReq = 8,sz_xSecurityQueryVersionReply = 32,sz_xSecurityGenerateAuthorizationReq = 12,sz_xSecurityGenerateAuthorizationReply = 32,sz_xSecurityRevokeAuthorizationReq = 8,sz_xSecurityAuthorizationRevokedEvent = 32,};
enum MACRO_sz_xXF86BigfontQueryFontReq {sz_xXF86BigfontQueryFontReq = 12,sz_xXF86BigfontQueryFontReply = 72,};
enum MACRO_sz_xXF86MiscQueryVersionReq {sz_xXF86MiscQueryVersionReq = 4,sz_xXF86MiscQueryVersionReply = 32,sz_xXF86MiscGetMouseSettingsReq = 4,sz_xXF86MiscGetMouseSettingsReply = 44,sz_xXF86MiscGetKbdSettingsReq = 4,sz_xXF86MiscGetKbdSettingsReply = 32,sz_xXF86MiscSetMouseSettingsReq = 36,sz_xXF86MiscSetKbdSettingsReq = 20,sz_xXF86MiscSetGrabKeysStateReq = 8,sz_xXF86MiscSetGrabKeysStateReply = 32,sz_xXF86MiscSetClientVersionReq = 8,sz_xXF86MiscGetFilePathsReq = 4,sz_xXF86MiscGetFilePathsReply = 32,sz_xXF86MiscPassMessageReq = 12,sz_xXF86MiscPassMessageReply = 32,};
enum MACRO_sz_xXF86RushQueryVersionReq {sz_xXF86RushQueryVersionReq = 4,sz_xXF86RushQueryVersionReply = 32,sz_xXF86RushLockPixmapReq = 12,sz_xXF86RushLockPixmapReply = 32,sz_xXF86RushUnlockPixmapReq = 12,sz_xXF86RushUnlockAllPixmapsReq = 4,sz_xXF86RushSetCopyModeReq = 12,sz_xXF86RushSetPixelStrideReq = 12,sz_xXF86RushOverlayPixmapReq = 40,sz_xXF86RushStatusRegOffsetReq = 8,sz_xXF86RushStatusRegOffsetReply = 32,sz_xXF86RushAT3DEnableRegsReq = 8,sz_xXF86RushAT3DDisableRegsReq = 8,};
typedef void (*WBXMLProcessingInstructionHandler)(void *ctx,  unsigned char *target, unsigned char *data);
typedef struct _XIMStringConversionCallbackStruct XIMStringConversionCallbackStruct;
typedef struct _C78656F81DC45526E09FF6CEF1B798FB __GLXConvolutionFilterLargeHeader;
typedef struct _7B1AACD52ED53B3363F77B2C48FE4393 xChangeDeviceDontPropagateListReq;
typedef struct _28432349E9E6DB3D22D342B43F161279 xCompositeReleaseOverlayWindowReq;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeUnredirectSubwindowsReq;
typedef struct _8BD108F1E7322F577EC46D8A34BD7229 xFontCacheGetCacheStatisticsReply;
typedef struct GLXDestroyHyperpipeConfigSGIX xGLXDestroyHyperpipeConfigSGIXReq;
typedef struct _E9CA16F3AD9E9F5B10D815E98DF6D9BD xGLXQueryHyperpipeConfigSGIXReply;
typedef struct _4D3786CE601BCE38E7C1926A41A4FA0B xGLXQueryMaxSwapBarriersSGIXReply;
typedef struct _F2ECD6480817AB9433FAAAFCD2A3757B xSecurityGenerateAuthorizationReq;
typedef struct _5017C5E321C1F8BFCB8C657324B6EA8C xXF86VidModeGetGammaRampSizeReply;
typedef struct _9763FFEA107F886AC733AD6B5D71CF1E xXF86VidModeValidateModeLineReply;
typedef struct _C0A0DF669A9A28D262D6289CF39399F2 xXFixesCreateRegionFromPictureReq;
typedef struct _8ED815E5FBCF56EC30B814FDB5559582 xXFixesGetCursorImageAndNameReply;
struct xcb_damage_query_version_cookie_t {unsigned int sequence;};
struct xcb_get_keyboard_control_cookie_t {unsigned int sequence;};
struct xcb_get_keyboard_mapping_cookie_t {unsigned int sequence;};
struct xcb_get_modifier_mapping_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_context_state_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_large_request_error_t;
struct xcb_glx_get_pixel_mapuiv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_pixel_mapusv_cookie_t {unsigned int sequence;};
struct xcb_list_fonts_with_info_cookie_t {unsigned int sequence;};
struct xcb_record_client_info_iterator_t {xcb_record_client_info_t *data;int rem;int index;};
struct xcb_record_query_version_cookie_t {unsigned int sequence;};
struct xcb_render_query_filters_cookie_t {unsigned int sequence;};
struct xcb_render_query_version_cookie_t {unsigned int sequence;};
struct xcb_set_modifier_mapping_cookie_t {unsigned int sequence;};
struct xcb_setup_authenticate_iterator_t {xcb_setup_authenticate_t *data;int rem;int index;};
struct xcb_shape_get_rectangles_cookie_t {unsigned int sequence;};
struct xcb_shape_input_selected_cookie_t {unsigned int sequence;};
struct xcb_sync_systemcounter_iterator_t {xcb_sync_systemcounter_t *data;int rem;int index;};
struct xcb_sync_waitcondition_iterator_t {xcb_sync_waitcondition_t *data;int rem;int index;};
struct xcb_xc_misc_get_xid_list_cookie_t {unsigned int sequence;};
struct xcb_xfixes_query_version_cookie_t {unsigned int sequence;};
enum xcb_xfixes_selection_event_mask_t {XCB_XFIXES_SELECTION_EVENT_MASK_SET_SELECTION_OWNER = 0x1,XCB_XFIXES_SELECTION_EVENT_MASK_SELECTION_WINDOW_DESTROY = 0x2,XCB_XFIXES_SELECTION_EVENT_MASK_SELECTION_CLIENT_CLOSE = 0x4,};
enum xcb_xv_image_format_info_format_t {XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PACKED = 0x0,XCB_XV_IMAGE_FORMAT_INFO_FORMAT_PLANAR = 0x1,};
enum MACRO_BitmapFormatScanlineUnit64 {BitmapFormatScanlineUnit64 = 12288,};
enum MACRO_CompositeRedirectAutomatic {CompositeRedirectAutomatic = 0,CompositeRedirectManual = 1,};
enum MACRO_MultibufferBufferEventMask {MultibufferBufferEventMask = 1,};
enum MACRO_WindowsWMFrameRectTitleBar {WindowsWMFrameRectTitleBar = 1,WindowsWMFrameRectTracking = 2,};
enum MACRO_WindowsWMFrameStyleCaption {WindowsWMFrameStyleCaption = 0xC00000,WindowsWMFrameStyleChild = 0x40000000,};
enum MACRO_WindowsWMFrameStyleSizeBox {WindowsWMFrameStyleSizeBox = 0x40000,WindowsWMFrameStyleSysMenu = 0x80000,};
enum MACRO_WindowsWMFrameStyleTabStop {WindowsWMFrameStyleTabStop = 0x10000,WindowsWMFrameStyleThickFrame = 0x40000,};
enum MACRO_WindowsWMFrameStyleVScroll {WindowsWMFrameStyleVScroll = 0x200000,};
enum MACRO_XDamageReportRawRectangles {XDamageReportRawRectangles = 0,XDamageReportDeltaRectangles = 1,XDamageReportBoundingBox = 2,};
enum MACRO_X_ScreenSaverSetAttributes {X_ScreenSaverSetAttributes = 3,};
enum MACRO_sz_xAppleWMQueryVersionReq {sz_xAppleWMQueryVersionReq = 4,sz_xAppleWMQueryVersionReply = 32,sz_xAppleWMDisableUpdateReq = 8,sz_xAppleWMReenableUpdateReq = 8,sz_xAppleWMSelectInputReq = 8,sz_xAppleWMNotifyEvent = 20,sz_xAppleWMSetWindowMenuReq = 8,sz_xAppleWMSetWindowMenuCheckReq = 8,sz_xAppleWMSetFrontProcessReq = 4,sz_xAppleWMSetWindowLevelReq = 12,sz_xAppleWMSetCanQuitReq = 8,sz_xAppleWMFrameGetRectReq = 24,sz_xAppleWMFrameGetRectReply = 32,sz_xAppleWMFrameHitTestReq = 28,sz_xAppleWMFrameHitTestReply = 32,sz_xAppleWMFrameDrawReq = 36,};
enum MACRO_sz_xXF86DGAQueryVersionReq {sz_xXF86DGAQueryVersionReq = 4,sz_xXF86DGAQueryVersionReply = 32,sz_xXF86DGAGetVideoLLReq = 8,sz_xXF86DGAInstallColormapReq = 12,sz_xXF86DGAGetVideoLLReply = 32,sz_xXF86DGADirectVideoReq = 8,sz_xXF86DGAGetViewPortSizeReq = 8,sz_xXF86DGAGetViewPortSizeReply = 32,sz_xXF86DGASetViewPortReq = 16,sz_xXF86DGAGetVidPageReq = 8,sz_xXF86DGAGetVidPageReply = 32,sz_xXF86DGASetVidPageReq = 8,sz_xXF86DGAQueryDirectVideoReq = 8,sz_xXF86DGAQueryDirectVideoReply = 32,sz_xXF86DGAViewPortChangedReq = 8,sz_xXF86DGAViewPortChangedReply = 32,};
typedef void (*PFNGLFLUSHVERTEXARRAYRANGENVPROC)(void);
typedef struct _79210749048C5E17703F76300116C143 XSecurityAuthorizationAttributes;
typedef struct _68F8387BCBDA9BD2024BB43F6B7187C6 __GLXcompressedTexSubImageHeader;
typedef struct _8FB2953F75CCF01072247179C715B36F __GLXdispatchColorSubTableHeader;
typedef struct _7ADB213CE3A416951231E877AA0F0D4C __GLXdispatchTexSubImage3DHeader;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXChangeDesktopAttributesReply;
typedef struct _0CBB5A6AED43B7843759DE8BFE16890A xDMXChangeScreensAttributesReply;
typedef struct _FontCacheChangeCacheSettings xFontCacheChangeCacheSettingsReq;
typedef struct GLXQueryHyperpipeNetworkSGIX xGLXQueryHyperpipeNetworkSGIXReq;
typedef struct _988632284A71C49D1170FC4598DEA165 xGetDeviceDontPropagateListReply;
typedef struct _90B3239242A1E7B072ABC9D9983310BF xGetSelectedExtensionEventsReply;
typedef struct _7E3EB1143DB1648EACC9B112CB231A1D xRenderQueryPictIndexValuesReply;
typedef struct _XF86OldVidModeValidateModeLine xXF86OldVidModeDeleteModeLineReq;
typedef struct _CBEB826488D526BABFC41413DDE1C327 xXF86VidModeGetAllModeLinesReply;
typedef struct _1C8B88A4B2A3D81E79624372BB131558 xXFixesCreateRegionFromBitmapReq;
typedef struct _E6E23F4F2E9628A3BBE27C1C5CFEEEE2 xXFixesCreateRegionFromWindowReq;
typedef struct _BD6B6A249F1B6C2CBC1F20B0596A95AC xXResQueryClientPixmapBytesReply;
struct xcb_big_requests_enable_cookie_t {unsigned int sequence;};
struct xcb_get_pointer_control_cookie_t {unsigned int sequence;};
struct xcb_get_pointer_mapping_cookie_t {unsigned int sequence;};
struct xcb_get_selection_owner_cookie_t {unsigned int sequence;};
struct xcb_glx_gen_queries_arb_cookie_t {unsigned int sequence;};
struct xcb_glx_get_color_table_cookie_t {unsigned int sequence;};
struct xcb_glx_get_pixel_mapfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_queryiv_arb_cookie_t {unsigned int sequence;};
struct xcb_randr_query_version_cookie_t {unsigned int sequence;};
struct xcb_randr_screen_size_iterator_t {xcb_randr_screen_size_t *data;int rem;int index;};
struct xcb_render_indexvalue_iterator_t {xcb_render_indexvalue_t *data;int rem;int index;};
struct xcb_render_pictscreen_iterator_t {xcb_render_pictscreen_t *data;int rem;int index;};
struct xcb_render_pictvisual_iterator_t {xcb_render_pictvisual_t *data;int rem;int index;};
struct xcb_set_pointer_mapping_cookie_t {unsigned int sequence;};
struct xcb_shape_query_extents_cookie_t {unsigned int sequence;};
struct xcb_shape_query_version_cookie_t {unsigned int sequence;};
struct xcb_test_compare_cursor_cookie_t {unsigned int sequence;};
struct xcb_xc_misc_get_version_cookie_t {unsigned int sequence;};
struct xcb_xevie_query_version_cookie_t {unsigned int sequence;};
struct xcb_xfixes_fetch_region_cookie_t {unsigned int sequence;};
struct xcb_xv_attribute_info_iterator_t {xcb_xv_attribute_info_t *data;int rem;int index;};
struct xcb_xvmc_create_context_cookie_t {unsigned int sequence;};
struct xcb_xvmc_create_surface_cookie_t {unsigned int sequence;};
struct xcb_xvmc_surface_info_iterator_t {xcb_xvmc_surface_info_t *data;int rem;int index;};
enum MACRO_AppleWMFrameAnyBoxClicked {AppleWMFrameAnyBoxClicked = 0x3800,AppleWMFrameGrowBox = 0x4000,};
enum MACRO_AppleWMFrameClassDocument {AppleWMFrameClassDocument = 1,AppleWMFrameClassDialog = 2,AppleWMFrameClassModalDialog = 4,AppleWMFrameClassSystemModalDialog = 8,AppleWMFrameClassUtility = 16,AppleWMFrameClassToolbar = 32,AppleWMFrameClassMenu = 64,AppleWMFrameClassSplash = 128,AppleWMFrameClassBorderless = 256,};
enum MACRO_BitmapFormatByteOrderMask {BitmapFormatByteOrderMask = 1,BitmapFormatBitOrderMask = 2,BitmapFormatImageRectMask = 12,BitmapFormatScanlinePadMask = 768,BitmapFormatScanlineUnitMask = 12288,};
enum MACRO_BitmapFormatScanlinePad64 {BitmapFormatScanlinePad64 = 768,};
enum MACRO_BitmapFormatScanlineUnit8 {BitmapFormatScanlineUnit8 = 0,BitmapFormatScanlineUnit16 = 4096,BitmapFormatScanlineUnit32 = 8192,};
enum MACRO_CatalogueChangeNotifyMask {CatalogueChangeNotifyMask = 1,FontChangeNotifyMask = 2,};
enum MACRO_PictOpConjointAtopReverse {PictOpConjointAtopReverse = 0x2A,};
enum MACRO_PictOpConjointOverReverse {PictOpConjointOverReverse = 0x24,};
enum MACRO_PictOpDisjointAtopReverse {PictOpDisjointAtopReverse = 0x1A,};
enum MACRO_PictOpDisjointOverReverse {PictOpDisjointOverReverse = 0x14,};
enum MACRO_SmsRegisterClientProcMask {SmsRegisterClientProcMask = 1,SmsInteractRequestProcMask = 2,SmsInteractDoneProcMask = 4,SmsSaveYourselfRequestProcMask = 8,SmsSaveYourselfP2RequestProcMask = 16,SmsSaveYourselfDoneProcMask = 32,SmsCloseConnectionProcMask = 64,SmsSetPropertiesProcMask = 128,SmsDeletePropertiesProcMask = 256,SmsGetPropertiesProcMask = 512,};
enum MACRO_WindowsWMControllerNotify {WindowsWMControllerNotify = 0,WindowsWMActivationNotify = 1,WindowsWMNumberEvents = 2,};
enum MACRO_WindowsWMFrameRectGrowBox {WindowsWMFrameRectGrowBox = 3,WindowsWMFrameStyleBorder = 8388608,};
enum MACRO_WindowsWMFrameStyleExLeft {WindowsWMFrameStyleExLeft = 0,WindowsWMFrameStyleExLeftScrollBar = 16384,};
enum MACRO_XF86DGADirectNotActivated {XF86DGADirectNotActivated = 3,XF86DGAOperationNotSupported = 4,};
enum MACRO_XF86VidModeClientNotLocal {XF86VidModeClientNotLocal = 5,};
enum MACRO_XF86VidModeModeUnsuitable {XF86VidModeModeUnsuitable = 3,XF86VidModeExtensionDisabled = 4,};
enum MACRO_XFixesDisplayCursorNotify {XFixesDisplayCursorNotify = 0,XFixesDisplayCursorNotifyMask = 1,XFixesNumberEvents = 2,};
enum MACRO_XIMStringConversionBuffer {XIMStringConversionBuffer = 0x1,XIMStringConversionLine = 0x2,};
enum MACRO_XSecurityBadAuthorization {XSecurityBadAuthorization = 0,XSecurityBadAuthorizationProtocol = 1,};
enum MACRO_X_ScreenSaverQueryVersion {X_ScreenSaverQueryVersion = 0,};
enum MACRO_X_XF86BigfontQueryVersion {X_XF86BigfontQueryVersion = 0,X_XF86BigfontQueryFont = 1,};
enum MACRO_X_XF86VidModeQueryVersion {X_XF86VidModeQueryVersion = 0,X_XF86VidModeGetModeLine = 1,X_XF86VidModeModModeLine = 2,X_XF86VidModeSwitchMode = 3,X_XF86VidModeGetMonitor = 4,X_XF86VidModeLockModeSwitch = 5,X_XF86VidModeGetAllModeLines = 6,X_XF86VidModeAddModeLine = 7,X_XF86VidModeDeleteModeLine = 8,X_XF86VidModeValidateModeLine = 9,X_XF86VidModeSwitchToMode = 10,X_XF86VidModeGetViewPort = 11,X_XF86VidModeSetViewPort = 12,X_XF86VidModeGetDotClocks = 13,X_XF86VidModeSetClientVersion = 14,X_XF86VidModeSetGamma = 15,X_XF86VidModeGetGamma = 16,X_XF86VidModeGetGammaRamp = 17,X_XF86VidModeSetGammaRamp = 18,X_XF86VidModeGetGammaRampSize = 19,X_XF86VidModeGetPermissions = 20,};
enum MACRO_XkbAllStateComponentsMask {XkbAllStateComponentsMask = 0x3FFF,};
enum MACRO_sz_xDamageQueryVersionReq {sz_xDamageQueryVersionReq = 12,sz_xDamageQueryVersionReply = 32,sz_xDamageCreateReq = 16,sz_xDamageDestroyReq = 8,sz_xDamageSubtractReq = 16,};
enum MACRO_sz_xScreenSaverSuspendReq {sz_xScreenSaverSuspendReq = 8,sz_xScreenSaverNotifyEvent = 32,};
enum MACRO_sz_xXFixesQueryVersionReq {sz_xXFixesQueryVersionReq = 12,sz_xXFixesQueryVersionReply = 32,sz_xXFixesChangeSaveSetReq = 12,sz_xXFixesSelectSelectionInputReq = 16,sz_xXFixesSelectCursorInputReq = 12,sz_xXFixesGetCursorImageReq = 4,sz_xXFixesGetCursorImageReply = 32,sz_xXFixesCreateRegionReq = 8,sz_xXFixesCreateRegionFromBitmapReq = 12,sz_xXFixesCreateRegionFromWindowReq = 16,sz_xXFixesCreateRegionFromGCReq = 12,sz_xXFixesCreateRegionFromPictureReq = 12,sz_xXFixesDestroyRegionReq = 8,sz_xXFixesSetRegionReq = 8,sz_xXFixesCopyRegionReq = 12,sz_xXFixesCombineRegionReq = 16,sz_xXFixesUnionRegionReq = 16,sz_xXFixesIntersectRegionReq = 16,sz_xXFixesSubtractRegionReq = 16,sz_xXFixesInvertRegionReq = 20,sz_xXFixesTranslateRegionReq = 12,sz_xXFixesRegionExtentsReq = 12,sz_xXFixesFetchRegionReq = 8,sz_xXFixesFetchRegionReply = 32,sz_xXFixesSetGCClipRegionReq = 16,sz_xXFixesSetWindowShapeRegionReq = 20,sz_xXFixesSetPictureClipRegionReq = 16,sz_xXFixesSetCursorNameReq = 12,sz_xXFixesGetCursorNameReq = 8,sz_xXFixesGetCursorNameReply = 32,sz_xXFixesGetCursorImageAndNameReq = 4,sz_xXFixesGetCursorImageAndNameReply = 32,sz_xXFixesChangeCursorReq = 12,sz_xXFixesChangeCursorByNameReq = 12,sz_xXFixesExpandRegionReq = 20,};
typedef void (*PFNGLBEGINFRAGMENTSHADERATIPROC)(void);
typedef struct _B767383C4D9BDDC040C77011396CEA14 __GLXcompressedTexImage3DHeader;
enum bfd_link_common_skip_ar_aymbols {bfd_link_common_skip_none = 0x0,bfd_link_common_skip_text = 0x1,bfd_link_common_skip_data = 0x2,bfd_link_common_skip_all = 0x3,};
typedef struct _E2CAB82FD115FB5CD111E5D354459422 xCompositeGetOverlayWindowReply;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeRedirectSubwindowsReq;
typedef struct _FD9483B813B6D6AD9C03ECC43231FAB9 xFontCacheGetCacheSettingsReply;
typedef struct _FontCacheGetCacheStatistics xFontCacheGetCacheStatisticsReq;
typedef struct GLXChangeDrawableAttributes xGLXChangeDrawableAttributesReq;
typedef struct GLXQueryHyperpipeConfigSGIX xGLXQueryHyperpipeConfigSGIXReq;
typedef struct GLXQueryMaxSwapBarriersSGIX xGLXQueryMaxSwapBarriersSGIXReq;
typedef struct _B466B6127C4D0EA4542034CCB3136555 xRenderCreateConicalGradientReq;
typedef struct _0D158C80ECE88D73A8DF0C6BE4079214 xSecurityRevokeAuthorizationReq;
typedef struct _04E4DAE4A3CDECE9860BD3B57B108BDE xXF86OldVidModeGetModeLineReply;
typedef struct _XF86VidModeGetGammaRampSize xXF86VidModeGetGammaRampSizeReq;
typedef struct _C636080007C4706D90F0D4DC955336B1 xXF86VidModeGetPermissionsReply;
typedef struct _XF86VidModeSetClientVersion xXF86VidModeSetClientVersionReq;
typedef struct _XF86VidModeValidateModeLine xXF86VidModeValidateModeLineReq;
typedef struct _3DD3CD96FAD56E1211E0F63114C705EF xXFixesGetCursorImageAndNameReq;
struct xcb_alloc_color_planes_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_context_tag_error_t;
struct xcb_glx_get_clip_plane_cookie_t {unsigned int sequence;};
struct xcb_glx_get_fb_configs_cookie_t {unsigned int sequence;};
struct xcb_glx_get_materialfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_materialiv_cookie_t {unsigned int sequence;};
struct xcb_query_text_extents_cookie_t {unsigned int sequence;};
struct xcb_record_ext_range_iterator_t {xcb_record_ext_range_t *data;int rem;int index;};
struct xcb_record_get_context_cookie_t {unsigned int sequence;};
struct xcb_render_glyphinfo_iterator_t {xcb_render_glyphinfo_t *data;int rem;int index;};
struct xcb_render_pictdepth_iterator_t {xcb_render_pictdepth_t *data;int rem;int index;};
struct xcb_render_transform_iterator_t {xcb_render_transform_t *data;int rem;int index;};
struct xcb_render_trapezoid_iterator_t {xcb_render_trapezoid_t *data;int rem;int index;};
struct xcb_sync_query_counter_cookie_t {unsigned int sequence;};
struct xcb_xevie_select_input_cookie_t {unsigned int sequence;};
enum xcb_xfixes_cursor_notify_mask_t {XCB_XFIXES_CURSOR_NOTIFY_MASK_DISPLAY_CURSOR = 0x1,};
struct xcb_xinerama_get_state_cookie_t {unsigned int sequence;};
struct xcb_xinerama_is_active_cookie_t {unsigned int sequence;};
struct xcb_xv_encoding_info_iterator_t {xcb_xv_encoding_info_t *data;int rem;int index;};
enum xcb_xv_image_format_info_type_t {XCB_XV_IMAGE_FORMAT_INFO_TYPE_RGB = 0x0,XCB_XV_IMAGE_FORMAT_INFO_TYPE_YUV = 0x1,};
struct xcb_xv_query_best_size_cookie_t {unsigned int sequence;};
struct xcb_xv_query_encodings_cookie_t {unsigned int sequence;};
struct xcb_xv_query_extension_cookie_t {unsigned int sequence;};
struct xcb_xvmc_query_version_cookie_t {unsigned int sequence;};
enum MACRO_AppleWMFrameRectTitleBar {AppleWMFrameRectTitleBar = 1,AppleWMFrameRectTracking = 2,};
enum MACRO_AppleWMWindowLevelNormal {AppleWMWindowLevelNormal = 0,AppleWMWindowLevelFloating = 1,AppleWMWindowLevelTornOff = 2,};
enum MACRO_BitmapFormatByteOrderLSB {BitmapFormatByteOrderLSB = 0,BitmapFormatByteOrderMSB = 1,};
enum MACRO_BitmapFormatImageRectMin {BitmapFormatImageRectMin = 0,BitmapFormatImageRectMaxWidth = 4,BitmapFormatImageRectMax = 8,};
enum MACRO_BitmapFormatScanlinePad8 {BitmapFormatScanlinePad8 = 0,BitmapFormatScanlinePad16 = 256,BitmapFormatScanlinePad32 = 512,};
enum MACRO_LeftToRightDrawDirection {LeftToRightDrawDirection = 0,RightToLeftDrawDirection = 1,};
enum MACRO_MultibufferClobberNotify {MultibufferClobberNotify = 0,MultibufferUpdateNotify = 1,MultibufferNumberEvents = 2,};
enum MACRO_PictOpConjointOutReverse {PictOpConjointOutReverse = 0x28,};
enum MACRO_PictOpDisjointOutReverse {PictOpDisjointOutReverse = 0x18,};
enum MACRO_RRScreenChangeNotifyMask {RRScreenChangeNotifyMask = 1,};
enum MACRO_ReleaseByFreeingColormap {ReleaseByFreeingColormap = 1,};
enum MACRO_WindowsWMFrameStyleGroup {WindowsWMFrameStyleGroup = 0x20000,WindowsWMFrameStyleHScroll = 0x100000,WindowsWMFrameStyleIconic = 0x20000000,};
enum MACRO_WindowsWMFrameStyleTiled {WindowsWMFrameStyleTiled = 0,WindowsWMFrameStyleTiledWindow = 13565952,WindowsWMFrameStyleVisible = 268435456,};
enum MACRO_XF86MiscBadMouseProtocol {XF86MiscBadMouseProtocol = 0,XF86MiscBadMouseBaudRate = 1,XF86MiscBadMouseFlags = 2,};
enum MACRO_XF86MiscModInDevDisabled {XF86MiscModInDevDisabled = 5,};
enum MACRO_X_ScreenSaverSelectInput {X_ScreenSaverSelectInput = 2,};
enum MACRO_XkbAllActionMessagesMask {XkbAllActionMessagesMask = 1,};
enum MACRO_XkbExtensionDeviceNotify {XkbExtensionDeviceNotify = 11,};
enum MACRO_XkbNewKeyboardNotifyMask {XkbNewKeyboardNotifyMask = 1,XkbMapNotifyMask = 2,XkbStateNotifyMask = 4,XkbControlsNotifyMask = 8,XkbIndicatorStateNotifyMask = 16,XkbIndicatorMapNotifyMask = 32,XkbNamesNotifyMask = 64,XkbCompatMapNotifyMask = 128,XkbBellNotifyMask = 256,XkbActionMessageMask = 512,XkbAccessXNotifyMask = 1024,XkbExtensionDeviceNotifyMask = 2048,};
enum MACRO_XlibSpecificationRelease {XlibSpecificationRelease = 6,};
enum MACRO_XtObjectExtensionVersion {XtObjectExtensionVersion = 1,};
enum MACRO_XtUnspecifiedWindowGroup {XtUnspecifiedWindowGroup = 3,};
enum MACRO__XkbErrBadImplementation {_XkbErrBadImplementation = 26,};
enum MACRO__XkbErrMissingIndicators {_XkbErrMissingIndicators = 6,};
enum MACRO__devicePointerMotionHint {_devicePointerMotionHint = 0,_deviceButton1Motion = 1,_deviceButton2Motion = 2,};
enum MACRO_sz_xPrintQueryVersionReq {sz_xPrintQueryVersionReq = 4,sz_xPrintQueryVersionReply = 32,sz_xPrintGetPrinterListReq = 12,sz_xPrintGetPrinterListReply = 32,sz_xPrintRehashPrinterListReq = 4,sz_xPrintCreateContextReq = 16,sz_xPrintSetContextReq = 8,sz_xPrintGetContextReq = 4,sz_xPrintGetContextReply = 32,sz_xPrintDestroyContextReq = 8,sz_xPrintGetContextScreenReq = 8,sz_xPrintGetContextScreenReply = 32,sz_xPrintStartJobReq = 8,sz_xPrintEndJobReq = 8,sz_xPrintStartDocReq = 8,sz_xPrintEndDocReq = 8,sz_xPrintPutDocumentDataReq = 16,sz_xPrintGetDocumentDataReq = 12,sz_xPrintGetDocumentDataReply = 32,sz_xPrintStartPageReq = 8,sz_xPrintEndPageReq = 8,sz_xPrintSelectInputReq = 12,sz_xPrintInputSelectedReq = 8,sz_xPrintInputSelectedReply = 32,sz_xPrintGetAttributesReq = 12,sz_xPrintGetAttributesReply = 32,sz_xPrintSetAttributesReq = 16,sz_xPrintGetOneAttributeReq = 16,sz_xPrintGetOneAttributeReply = 32,sz_xPrintGetPageDimensionsReq = 8,sz_xPrintGetPageDimensionsReply = 32,sz_xPrintQueryScreensReq = 4,sz_xPrintQueryScreensReply = 32,sz_xPrintSetImageResolutionReq = 12,sz_xPrintSetImageResolutionReply = 32,sz_xPrintGetImageResolutionReq = 8,sz_xPrintGetImageResolutionReply = 32,};
enum MACRO_sz_xShapeQueryVersionReq {sz_xShapeQueryVersionReq = 4,sz_xShapeQueryVersionReply = 32,sz_xShapeRectanglesReq = 16,sz_xShapeMaskReq = 20,sz_xShapeCombineReq = 20,sz_xShapeOffsetReq = 16,sz_xShapeQueryExtentsReq = 8,sz_xShapeQueryExtentsReply = 32,sz_xShapeSelectInputReq = 12,sz_xShapeNotifyEvent = 32,sz_xShapeInputSelectedReq = 8,sz_xShapeInputSelectedReply = 32,sz_xShapeGetRectanglesReq = 12,sz_xShapeGetRectanglesReply = 32,};
enum MACRO_sz_xXevieQueryVersionReq {sz_xXevieQueryVersionReq = 8,sz_xXevieQueryVersionReply = 32,sz_xXevieStartReq = 8,sz_xXevieStartReply = 32,sz_xXevieEndReq = 8,sz_xXevieEndReply = 32,sz_xXevieSendReq = 104,sz_xXevieSendReply = 32,sz_xXevieSelectInputReq = 8,sz_xXevieSelectInputReply = 32,};
enum MACRO_sz_xvmcQueryVersionReply {sz_xvmcQueryVersionReply = 32,sz_xvmcListSurfaceTypesReply = 32,sz_xvmcCreateContextReply = 32,sz_xvmcCreateSurfaceReply = 32,sz_xvmcCreateSubpictureReply = 32,sz_xvmcListSubpictureTypesReply = 32,sz_xvmcGetDRInfoReply = 32,sz_xvRational = 8,sz_xvAdaptorInfo = 12,sz_xvEncodingInfo = 20,sz_xvFormat = 8,sz_xvAttributeInfo = 16,sz_xvImageFormatInfo = 128,};
typedef struct _8E8531482D4582E35E09D5AA05C855BB __GLXdispatchTexSubImageHeader;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smSaveYourselfPhase2RequestMsg;
typedef struct _B3BD77590CC72559D1303DD07BD38410 xDMXChangeDesktopAttributesReq;
typedef struct _A42D6322032E0C7A7A9C932B10DA502C xDMXChangeScreensAttributesReq;
typedef struct _150405F9C54B0D4890F2C395186D419E xGLXGetDrawableAttributesReply;
typedef struct _F5921867A833B452F3779F1505474C7F xGLXQueryExtensionsStringReply;
typedef struct _625B72EC204AD184FA367A67F4C8645C xGetDeviceDontPropagateListReq;
typedef struct _D0A230E2822E6F114388A4393E99A918 xGetDeviceModifierMappingReply;
typedef struct _625B72EC204AD184FA367A67F4C8645C xGetSelectedExtensionEventsReq;
typedef struct _2427DE1D26AE87CC436F1C07EF51166C xMbufGetMBufferAttributesReply;
typedef struct _A1AC26B3F52FABB6E699F530F015B0DD xRenderCreateLinearGradientReq;
typedef struct _4F622AD2F1F50F32A9A86AA5D4320B7D xRenderCreateRadialGradientReq;
typedef struct _7E7BC6786790AB56FAE456C8962F7E9D xRenderQueryPictIndexValuesReq;
typedef struct _ScreenSaverUnsetAttributes xScreenSaverUnsetAttributesReq;
typedef struct _5F1426FF167D9E06CE7F137AEA610D0C xSetDeviceModifierMappingReply;
typedef struct _82CA72D52CE6587547984538D976BD84 xXF86MiscGetMouseSettingsReply;
typedef struct _9763FFEA107F886AC733AD6B5D71CF1E xXF86MiscSetGrabKeysStateReply;
typedef struct _XF86OldVidModeValidateModeLine xXF86OldVidModeSwitchToModeReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetAllModeLinesReq;
typedef struct _0CCE02F838D9CC63825202C012B6DAD4 xXFixesSelectSelectionInputReq;
typedef struct _5CD4A96D42C01A4BC625F6F1B381D291 xXFixesSetPictureClipRegionReq;
typedef struct _E520267D12BF4FCD5BA9F753AB237D0B xXFixesSetWindowShapeRegionReq;
typedef struct _XResQueryClientPixmapBytes xXResQueryClientPixmapBytesReq;
typedef struct _D1CC089C043B8A5C6F39977960C72D3D xXResQueryClientResourcesReply;
struct xcb_alloc_color_cells_cookie_t {unsigned int sequence;};
struct xcb_alloc_named_color_cookie_t {unsigned int sequence;};
struct xcb_dpms_get_timeouts_cookie_t {unsigned int sequence;};
struct xcb_get_motion_events_cookie_t {unsigned int sequence;};
struct xcb_glx_get_histogram_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_envfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_enviv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_gendv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_genfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_geniv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_tex_image_cookie_t {unsigned int sequence;};
struct xcb_glx_query_context_cookie_t {unsigned int sequence;};
struct xcb_glx_query_version_cookie_t {unsigned int sequence;};
struct xcb_record_range_16_iterator_t {xcb_record_range_16_t *data;int rem;int index;};
struct xcb_render_pointfix_iterator_t {xcb_render_pointfix_t *data;int rem;int index;};
struct xcb_render_triangle_iterator_t {xcb_render_triangle_t *data;int rem;int index;};
struct xcb_res_query_clients_cookie_t {unsigned int sequence;};
struct xcb_res_query_version_cookie_t {unsigned int sequence;};
struct xcb_shm_query_version_cookie_t {unsigned int sequence;};
struct xcb_sync_get_priority_cookie_t {unsigned int sequence;};
struct xcb_x_print_printer_iterator_t {xcb_x_print_printer_t *data;int rem;int index;};
struct xcb_xv_adaptor_info_iterator_t {xcb_xv_adaptor_info_t *data;int rem;int index;};
struct xcb_xv_query_adaptors_cookie_t {unsigned int sequence;};
typedef struct _FTNormalisedTransformation *FTNormalisedTransformationPtr;
typedef struct _FTNormalisedTransformation FTNormalisedTransformationRec;
enum MACRO_AppleWMControllerNotify {AppleWMControllerNotify = 0,AppleWMActivationNotify = 1,AppleWMPasteboardNotify = 2,};
enum MACRO_AppleWMCopyToPasteboard {AppleWMCopyToPasteboard = 0,};
enum MACRO_AppleWMFrameRectGrowBox {AppleWMFrameRectGrowBox = 3,};
enum MACRO_AppleWMWindowMenuNotify {AppleWMWindowMenuNotify = 10,};
enum MACRO_BitmapFormatBitOrderLSB {BitmapFormatBitOrderLSB = 0,BitmapFormatBitOrderMSB = 2,};
enum MACRO_CompositeNumberRequests {CompositeNumberRequests = 9,};
enum MACRO_FamilyServerInterpreted {FamilyServerInterpreted = 5,};
enum MACRO_IceMajorOpcodeDuplicate {IceMajorOpcodeDuplicate = 7,IceUnknownProtocol = 8,};
enum MACRO_MiscExtGrabStateSuccess {MiscExtGrabStateSuccess = 0,MiscExtGrabStateLocked = 1,MiscExtGrabStateAlready = 2,};
enum MACRO_PictOpConjointInReverse {PictOpConjointInReverse = 0x26,};
enum MACRO_PictOpDisjointInReverse {PictOpDisjointInReverse = 0x16,};
enum MACRO_ScreenSaverMajorVersion {ScreenSaverMajorVersion = 1,};
enum MACRO_ScreenSaverMinorVersion {ScreenSaverMinorVersion = 1,};
enum MACRO_SmcSaveYourselfProcMask {SmcSaveYourselfProcMask = 1,SmcDieProcMask = 2,SmcSaveCompleteProcMask = 4,SmcShutdownCancelledProcMask = 8,};
enum MACRO_WindowsWMClientNotLocal {WindowsWMClientNotLocal = 0,WindowsWMOperationNotSupported = 1,WindowsWMNumberErrors = 2,};
enum MACRO_WindowsWMMinimizeWindow {WindowsWMMinimizeWindow = 0,WindowsWMMaximizeWindow = 1,WindowsWMRestoreWindow = 2,};
enum MACRO_XF86BigfontNumberErrors {XF86BigfontNumberErrors = 0,};
enum MACRO_XF86BigfontNumberEvents {XF86BigfontNumberEvents = 0,};
enum MACRO_XF86VidModeNumberErrors {XF86VidModeNumberErrors = 7,};
enum MACRO_XF86VidModeNumberEvents {XF86VidModeNumberEvents = 0,};
enum MACRO_XIMStringConversionWord {XIMStringConversionWord = 0x3,XIMStringConversionChar = 0x4,};
enum MACRO_X_CompositeQueryVersion {X_CompositeQueryVersion = 0,X_CompositeRedirectWindow = 1,X_CompositeRedirectSubwindows = 2,X_CompositeUnredirectWindow = 3,X_CompositeUnredirectSubwindows = 4,X_CompositeCreateRegionFromBorderClip = 5,X_CompositeNameWindowPixmap = 6,X_CompositeGetOverlayWindow = 7,X_CompositeReleaseOverlayWindow = 8,};
enum MACRO_X_FontCacheQueryVersion {X_FontCacheQueryVersion = 0,X_FontCacheGetCacheSettings = 1,X_FontCacheChangeCacheSettings = 2,X_FontCacheGetCacheStatistics = 3,};
enum MACRO_X_PanoramiXQueryVersion {X_PanoramiXQueryVersion = 0,X_PanoramiXGetState = 1,X_PanoramiXGetScreenCount = 2,X_PanoramiXGetScreenSize = 3,X_XineramaIsActive = 4,X_XineramaQueryScreens = 5,};
enum MACRO_X_WindowsWMQueryVersion {X_WindowsWMQueryVersion = 0,X_WindowsWMFrameGetRect = 1,X_WindowsWMFrameDraw = 2,X_WindowsWMFrameSetTitle = 3,X_WindowsWMDisableUpdate = 4,X_WindowsWMReenableUpdate = 5,X_WindowsWMSelectInput = 6,X_WindowsWMSetFrontProcess = 7,};
enum MACRO_XkbAllAccessXEventsMask {XkbAllAccessXEventsMask = 0xF,};
enum MACRO_XkbAllControlEventsMask {XkbAllControlEventsMask = -134209537,};
enum MACRO_XkbAllMapComponentsMask {XkbAllMapComponentsMask = 255,};
enum MACRO_XkbExplicitKeyType1Mask {XkbExplicitKeyType1Mask = 1,XkbExplicitKeyType2Mask = 2,XkbExplicitKeyType3Mask = 4,XkbExplicitKeyType4Mask = 8,XkbExplicitInterpretMask = 16,XkbExplicitAutoRepeatMask = 32,XkbExplicitBehaviorMask = 64,XkbExplicitVModMapMask = 128,};
enum MACRO_XkbLC_ForceLatin1Lookup {XkbLC_ForceLatin1Lookup = 1,XkbLC_ConsumeLookupMods = 2,XkbLC_AlwaysConsumeShiftAndLock = 4,XkbLC_IgnoreNewKeyboards = 8,XkbLC_ControlFallback = 16,XkbLC_ConsumeKeysOnComposeFail = 536870912,XkbLC_ComposeLED = 1073741824,XkbLC_BeepOnComposeFail = 2147483648,XkbLC_AllComposeControls = -1073741824,XkbLC_AllControls = -1073741793,};
enum MACRO_XtExposeCompressMaximal {XtExposeCompressMaximal = 3,XtExposeGraphicsExpose = 16,XtExposeGraphicsExposeMerged = 32,XtExposeNoExpose = 64,XtExposeNoRegion = 128,};
enum MACRO_XtShellExtensionVersion {XtShellExtensionVersion = 1,};
enum MACRO__XkbErrMissingCompatMap {_XkbErrMissingCompatMap = 7,_XkbErrMissingSymInterps = 8,};
enum MACRO_sz_xXCMiscGetVersionReq {sz_xXCMiscGetVersionReq = 8,sz_xXCMiscGetVersionReply = 32,sz_xXCMiscGetXIDRangeReq = 4,sz_xXCMiscGetXIDRangeReply = 32,sz_xXCMiscGetXIDListReq = 8,sz_xXCMiscGetXIDListReply = 32,};
enum MACRO_sz_xXDGAQueryVersionReq {sz_xXDGAQueryVersionReq = 4,sz_xXDGAQueryVersionReply = 32,sz_xXDGAQueryModesReq = 8,sz_xXDGAQueryModesReply = 32,sz_xXDGASetModeReq = 16,sz_xXDGASetModeReply = 32,sz_xXDGAModeInfo = 72,sz_xXDGAOpenFramebufferReq = 8,sz_xXDGAOpenFramebufferReply = 32,sz_xXDGACloseFramebufferReq = 8,sz_xXDGASetViewportReq = 16,sz_xXDGAInstallColormapReq = 12,sz_xXDGASelectInputReq = 12,sz_xXDGAFillRectangleReq = 20,sz_xXDGACopyAreaReq = 20,sz_xXDGACopyTransparentAreaReq = 24,sz_xXDGAGetViewportStatusReq = 8,sz_xXDGAGetViewportStatusReply = 32,sz_xXDGASyncReq = 8,sz_xXDGASyncReply = 32,sz_xXDGASetClientVersionReq = 8,sz_xXDGAChangePixmapModeReq = 16,sz_xXDGAChangePixmapModeReply = 32,sz_xXDGACreateColormapReq = 20,};
enum MACRO_sz_xXcupQueryVersionReq {sz_xXcupQueryVersionReq = 8,sz_xXcupQueryVersionReply = 32,sz_xXcupGetReservedColormapEntriesReq = 8,sz_xXcupGetReservedColormapEntriesReply = 32,sz_xXcupStoreColorsReq = 8,sz_xXcupStoreColorsReply = 32,};
typedef void (*PFNGLBEGINVERTEXSHADEREXTPROC)(void);
typedef void (*PFNGLENDFRAGMENTSHADERATIPROC)(void);
typedef void (*PFNGLSTARTINSTRUMENTSSGIXPROC)(void);
typedef int (*PFNGLXGETSWAPINTERVALMESAPROC)(void);
typedef struct _XIMPreeditCaretCallbackStruct XIMPreeditCaretCallbackStruct;
typedef struct _XkbExtensionDeviceNotify XkbExtensionDeviceNotifyEvent;
typedef struct _DAC170E456357DF80928C89F26405355 __GLXColorSubTableLargeHeader;
typedef struct _C7C2F9747408B8A39467CE13B3FC53FB __GLXcompressedTexImageHeader;
typedef struct _9D0FB7664D5CF4633C4A9E9917855E92 __GLXdispatchColorTableHeader;
typedef struct _A7EE476123D6E02EF3E6172D8886EF01 __GLXdispatchDrawArraysHeader;
typedef struct _B025004886C7FA591A1478EDE7E7D2F6 __GLXdispatchDrawPixelsHeader;
typedef struct _613E1A502E66CA56B68C37497F252C25 __GLXdispatchTexImage3DHeader;
typedef struct _A0B32823B19A2A6438953816D84B0843 __GLXtexSubImage3DLargeHeader;
struct cpufreq_available_frequencies {unsigned int frequency;struct cpufreq_available_frequencies *next;struct cpufreq_available_frequencies *first;};
typedef struct _AppleWMSetWindowMenuCheck xAppleWMSetWindowMenuCheckReq;
typedef struct _28432349E9E6DB3D22D342B43F161279 xCompositeGetOverlayWindowReq;
typedef struct _E6CAD5F58B0D02B91FD47A036636D1EC xCompositeNameWindowPixmapReq;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeUnredirectWindowReq;
typedef struct _5F6963A5B3CCD1D3B53748FF8C021BB0 xDMXGetDesktopAttributesReply;
typedef struct _FontCacheGetCacheSettings xFontCacheGetCacheSettingsReq;
typedef struct _252B149599A3B883D834EF1777AA3852 xGLXGetConvolutionFilterReply;
typedef struct GLXVendorPrivateWithReply xGLXVendorPrivateWithReplyReq;
typedef struct _C889EC8CC43E7C0CC7EDA4C569652F40 xMbufGetBufferAttributesReply;
typedef struct _C201FB0F2222C07B40D490F1CBB06D58 xPanoramiXGetScreenCountReply;
typedef struct _4A647C60455AE07B29957B156A9865A4 xPrintGetImageResolutionReply;
typedef struct _0938F46EF6BF1A288D23C461D10040B7 xPrintSetImageResolutionReply;
typedef struct _92C41753C7AFA0CB8157A9B4DAA6D4C8 xRenderSetPictureTransformReq;
typedef struct _0E536A4A735E73BADC27E9D377D18348 xScreenSaverQueryVersionReply;
typedef struct _A4A7C3BD565590D1E17F737ABF60719A xXF86BigfontQueryVersionReply;
typedef struct _F1CA5290AFDA1F8F382C2CF8549939AD xXF86DGAQueryDirectVideoReply;
typedef struct _XF86OldVidModeAddModeLine xXF86OldVidModeAddModeLineReq;
typedef struct _XF86OldVidModeModModeLine xXF86OldVidModeModModeLineReq;
typedef struct _087D3754357485F048BF88A6E8C427F7 xXF86RushStatusRegOffsetReply;
typedef struct _XF86VidModeValidateModeLine xXF86VidModeDeleteModeLineReq;
typedef struct _65CC1628E84FE837888FBDC426B5411E xXF86VidModeGetDotClocksReply;
typedef struct _5017C5E321C1F8BFCB8C657324B6EA8C xXF86VidModeGetGammaRampReply;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetPermissionsReq;
typedef struct _XF86VidModeLockModeSwitch xXF86VidModeLockModeSwitchReq;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXF86VidModeQueryVersionReply;
typedef xcb_circulate_notify_event_t xcb_circulate_request_event_t;
struct xcb_dpms_get_version_cookie_t {unsigned int sequence;};
struct xcb_get_screen_saver_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_fb_config_error_t;
struct xcb_glx_gen_textures_cookie_t {unsigned int sequence;};
struct xcb_glx_get_booleanv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_integerv_cookie_t {unsigned int sequence;};
struct xcb_glx_is_query_arb_cookie_t {unsigned int sequence;};
struct xcb_glx_make_current_cookie_t {unsigned int sequence;};
struct xcb_record_range_8_iterator_t {xcb_record_range_8_t *data;int rem;int index;};
struct xcb_render_linefix_iterator_t {xcb_render_linefix_t *data;int rem;int index;};
struct xcb_render_spanfix_iterator_t {xcb_render_spanfix_t *data;int rem;int index;};
struct xcb_sync_query_alarm_cookie_t {unsigned int sequence;};
struct xcb_test_get_version_cookie_t {unsigned int sequence;};
enum xcb_xfixes_save_set_mapping_t {XCB_XFIXES_SAVE_SET_MAPPING_MAP = 0x0,XCB_XFIXES_SAVE_SET_MAPPING_UNMAP = 0x1,};
enum MACRO_AppleWMBringAllToFront {AppleWMBringAllToFront = 3,AppleWMHideWindow = 4,};
enum MACRO_AppleWMNumWindowLevels {AppleWMNumWindowLevels = 5,};
enum MACRO_AppleWMWindowLevelDock {AppleWMWindowLevelDock = 3,AppleWMWindowLevelDesktop = 4,};
enum MACRO_MultibufferUnclobbered {MultibufferUnclobbered = 0,MultibufferPartiallyClobbered = 1,MultibufferFullyClobbered = 2,MultibufferClobberNotifyMask = 33554432,MultibufferUpdateNotifyMask = 67108864,};
enum MACRO_NeedFunctionPrototypes {NeedFunctionPrototypes = 1,};
enum MACRO_RevertToFollowKeyboard {RevertToFollowKeyboard = 3,};
enum MACRO_XF86RushClientNotLocal {XF86RushClientNotLocal = 0,XF86RushNumberErrors = 1,};
enum MACRO_XSecurityAllEventMasks {XSecurityAllEventMasks = 1,};
enum MACRO_XSecurityClientTrusted {XSecurityClientTrusted = 0,XSecurityClientUntrusted = 1,};
enum MACRO_X_MbufGetBufferVersion {X_MbufGetBufferVersion = 0,X_MbufCreateImageBuffers = 1,X_MbufDestroyImageBuffers = 2,X_MbufDisplayImageBuffers = 3,X_MbufSetMBufferAttributes = 4,X_MbufGetMBufferAttributes = 5,X_MbufSetBufferAttributes = 6,X_MbufGetBufferAttributes = 7,X_MbufGetBufferInfo = 8,X_MbufCreateStereoWindow = 9,X_MbufClearImageBufferArea = 10,};
enum MACRO_X_ScreenSaverQueryInfo {X_ScreenSaverQueryInfo = 1,};
enum MACRO_X_SecurityQueryVersion {X_SecurityQueryVersion = 0,X_SecurityGenerateAuthorization = 1,X_SecurityRevokeAuthorization = 2,};
enum MACRO_X_XF86MiscQueryVersion {X_XF86MiscQueryVersion = 0,X_XF86MiscGetMouseSettings = 3,X_XF86MiscGetKbdSettings = 4,X_XF86MiscSetMouseSettings = 5,X_XF86MiscSetKbdSettings = 6,X_XF86MiscSetGrabKeysState = 7,X_XF86MiscSetClientVersion = 8,X_XF86MiscGetFilePaths = 9,X_XF86MiscPassMessage = 10,};
enum MACRO_X_XF86RushQueryVersion {X_XF86RushQueryVersion = 0,X_XF86RushLockPixmap = 1,X_XF86RushUnlockPixmap = 2,X_XF86RushUnlockAllPixmaps = 3,X_XF86RushGetCopyMode = 4,X_XF86RushSetCopyMode = 5,X_XF86RushGetPixelStride = 6,X_XF86RushSetPixelStride = 7,X_XF86RushOverlayPixmap = 8,X_XF86RushStatusRegOffset = 9,X_XF86RushAT3DEnableRegs = 10,X_XF86RushAT3DDisableRegs = 11,};
enum MACRO_XkbActionMessageLength {XkbActionMessageLength = 6,};
enum MACRO_XkbAllBooleanCtrlsMask {XkbAllBooleanCtrlsMask = 0x1FFF,};
enum MACRO_XtSpecificationRelease {XtSpecificationRelease = 6,};
enum MACRO__XkbErrIllegalContents {_XkbErrIllegalContents = 12,};
enum MACRO__XkbErrMissingGeometry {_XkbErrMissingGeometry = 9,};
enum MACRO__XkbErrMissingReqTypes {_XkbErrMissingReqTypes = 3,_XkbErrMissingSymbols = 4,};
enum MACRO__XtEventTimerEventType {_XtEventTimerEventType = 4294967295,};
enum MACRO_sz_xDMXQueryVersionReq {sz_xDMXQueryVersionReq = 4,sz_xDMXQueryVersionReply = 32,sz_xDMXSyncReq = 4,sz_xDMXSyncReply = 32,sz_xDMXForceWindowCreationReq = 8,sz_xDMXForceWindowCreationReply = 32,sz_xDMXGetScreenCountReq = 4,sz_xDMXGetScreenCountReply = 32,sz_xDMXGetScreenAttributesReq = 8,sz_xDMXGetScreenAttributesReply = 36,sz_xDMXChangeScreensAttributesReq = 12,sz_xDMXChangeScreensAttributesReply = 32,sz_xDMXAddScreenReq = 16,sz_xDMXAddScreenReply = 32,sz_xDMXRemoveScreenReq = 8,sz_xDMXRemoveScreenReply = 32,sz_xDMXGetWindowAttributesReq = 8,sz_xDMXGetWindowAttributesReply = 32,sz_xDMXGetDesktopAttributesReq = 4,sz_xDMXGetDesktopAttributesReply = 32,sz_xDMXChangeDesktopAttributesReq = 8,sz_xDMXChangeDesktopAttributesReply = 32,sz_xDMXGetInputCountReq = 4,sz_xDMXGetInputCountReply = 32,sz_xDMXGetInputAttributesReq = 8,sz_xDMXGetInputAttributesReply = 32,sz_xDMXAddInputReq = 12,sz_xDMXAddInputReply = 32,sz_xDMXRemoveInputReq = 8,sz_xDMXRemoveInputReply = 32,};
enum MACRO_sz_xLbxQueryVersionReq {sz_xLbxQueryVersionReq = 4,sz_xLbxQueryVersionReply = 32,sz_xLbxStartProxyReq = 4,sz_xLbxStopProxyReq = 4,sz_xLbxSwitchReq = 8,sz_xLbxNewClientReq = 8,sz_xLbxCloseClientReq = 8,sz_xLbxModifySequenceReq = 8,sz_xLbxAllowMotionReq = 8,sz_xLbxGrabCmapReq = 8,};
enum MACRO_sz_xShmQueryVersionReq {sz_xShmQueryVersionReq = 4,sz_xShmQueryVersionReply = 32,sz_xShmAttachReq = 16,sz_xShmDetachReq = 8,sz_xShmPutImageReq = 40,sz_xShmGetImageReq = 32,sz_xShmGetImageReply = 32,sz_xShmCreatePixmapReq = 28,sz_xShmCompletionEvent = 32,};
enum MACRO_sz_xXTestGetVersionReq {sz_xXTestGetVersionReq = 8,sz_xXTestGetVersionReply = 32,sz_xXTestCompareCursorReq = 12,sz_xXTestCompareCursorReply = 32,sz_xXTestFakeInputReq = 36,sz_xXTestGrabControlReq = 8,};
enum MACRO_sz_xXTrapGetStatsReply {sz_xXTrapGetStatsReply = 1088,};
enum MACRO_sz_xXagQueryVersionReq {sz_xXagQueryVersionReq = 8,sz_xXagQueryVersionReply = 32,};
enum MACRO_sz_xvQueryExtensionReq {sz_xvQueryExtensionReq = 4,sz_xvQueryAdaptorsReq = 8,sz_xvQueryEncodingsReq = 8,sz_xvPutVideoReq = 32,sz_xvPutStillReq = 32,sz_xvGetVideoReq = 32,sz_xvGetStillReq = 32,sz_xvGrabPortReq = 12,sz_xvUngrabPortReq = 12,sz_xvSelectVideoNotifyReq = 12,sz_xvSelectPortNotifyReq = 12,sz_xvStopVideoReq = 12,sz_xvSetPortAttributeReq = 16,sz_xvGetPortAttributeReq = 12,sz_xvQueryBestSizeReq = 20,sz_xvQueryPortAttributesReq = 8,sz_xvPutImageReq = 40,sz_xvShmPutImageReq = 52,sz_xvListImageFormatsReq = 8,sz_xvQueryImageAttributesReq = 16,sz_xvQueryExtensionReply = 32,sz_xvQueryAdaptorsReply = 32,sz_xvQueryEncodingsReply = 32,sz_xvGrabPortReply = 32,sz_xvGetPortAttributeReply = 32,sz_xvQueryBestSizeReply = 32,sz_xvQueryPortAttributesReply = 32,sz_xvListImageFormatsReply = 32,sz_xvQueryImageAttributesReply = 32,};
typedef void (*PFNGLENDOCCLUSIONQUERYNVPROC)(void);
typedef void (*PFNGLTAGSAMPLEBUFFERSGIXPROC)(void);
typedef struct _XIMPreeditDrawCallbackStruct XIMPreeditDrawCallbackStruct;
typedef unsigned short XIMStringConversionOperation;
typedef void (*XML_StartCdataSectionHandler)(void *userData);
typedef struct _D769135999DFEE6143DE1D9CD80B3AD5 XtChangeHookSetValuesDataRec;
typedef struct _B173786F760212F3DBD7C5A6C83676A6 __GLXConvolutionFilterHeader;
typedef struct _E97BFE069D0E69649C7DF89B8901896C fsCatalogueChangeNotifyEvent;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXForceWindowCreationReply;
typedef struct _6B8E614C81B948CB69ED41556D403C37 xDMXGetScreenAttributesReply;
typedef struct _D9975735FE375B63E13B12CE4075213A xDMXGetWindowAttributesReply;
typedef struct GLXGetDrawableAttributes xGLXGetDrawableAttributesReq;
typedef struct _54EF5FF687867CC801B0E66E7A862080 xGLXHyperpipeConfigSGIXReply;
typedef struct _085FAF82344F726CA3F577D24DE6B299 xGLXQueryContextInfoEXTReply;
typedef struct GLXQueryExtensionsString xGLXQueryExtensionsStringReq;
typedef struct _EE866C64B9E084E52F8894370051FA3D xGetDeviceButtonMappingReply;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetDeviceModifierMappingReq;
typedef struct _56876A3CF1ED32735E0999A0D66A4738 xListInstalledColormapsReply;
typedef struct _11DD07E0BD355014207FDEFC87674481 xMbufClearImageBufferAreaReq;
typedef struct _E253BFAEF58A5A0733BD8E7952BEDE5F xMbufCreateImageBuffersReply;
typedef struct _3C663E68C00512772EEEF9594AC2C00F xMbufGetMBufferAttributesReq;
typedef struct _93B69AC16094E7C5789E83029DFD84BC xMbufSetMBufferAttributesReq;
typedef struct _1E42E411FAE309B90570872BD6DA89F0 xPanoramiXGetScreenSizeReply;
typedef struct _160BFFB979B4E4E895FB2627A5A1E75F xPrintGetPageDimensionsReply;
typedef struct _095E6FF95FC66C44DDF436071BD80AA6 xRenderQueryPictFormatsReply;
typedef struct _ScreenSaverSetAttributes xScreenSaverSetAttributesReq;
typedef struct _748E6396DB81A71CC67026C5868B0A61 xSetDeviceButtonMappingReply;
typedef struct _BB279EA07E8836E412716D1B8B41E21D xSetDeviceModifierMappingReq;
typedef struct _EF8F73C6C596F3380A5120BEC2D3F264 xSyncListSystemCountersReply;
typedef struct _WindowsWMSetFrontProcess xWindowsWMSetFrontProcessReq;
typedef struct _5E5FECD46FC629FFA3831CFFFA8A0613 xXF86DGAGetViewPortSizeReply;
typedef struct _B4B234DF51BFD6860BC6DFAD9B63C9C2 xXF86DGAViewPortChangedReply;
typedef struct _FF16F36C84D77908C186E6C9218E9417 xXF86MiscGetKbdSettingsReply;
typedef struct _XF86MiscGetMouseSettings xXF86MiscGetMouseSettingsReq;
typedef struct _XF86MiscSetClientVersion xXF86MiscSetClientVersionReq;
typedef struct _XF86MiscSetGrabKeysState xXF86MiscSetGrabKeysStateReq;
typedef struct _XF86MiscSetMouseSettings xXF86MiscSetMouseSettingsReq;
typedef struct _XF86RushUnlockAllPixmaps xXF86RushUnlockAllPixmapsReq;
typedef struct _0BFF5F3619172B7B9D3CD50426ED3418 xXF86VidModeGetModeLineReply;
typedef struct _1D1C51FD6E0EDC1C8CC0D22E01FA7C4E xXF86VidModeGetViewPortReply;
typedef struct _E38AF46511CCA77388BA66BB0D6EA6C9 xXFixesChangeCursorByNameReq;
typedef struct _B2D730F73A56FF96C6A7A740CAA96BFE xXFixesCreateRegionFromGCReq;
typedef struct _XResQueryClientResources xXResQueryClientResourcesReq;
struct xcb_get_input_focus_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_drawable_error_t;
struct xcb_glx_get_doublev_cookie_t {unsigned int sequence;};
struct xcb_glx_get_lightfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_lightiv_cookie_t {unsigned int sequence;};
struct xcb_glx_read_pixels_cookie_t {unsigned int sequence;};
struct xcb_glx_render_mode_cookie_t {unsigned int sequence;};
struct xcb_list_extensions_cookie_t {unsigned int sequence;};
struct xcb_list_properties_cookie_t {unsigned int sequence;};
struct xcb_query_best_size_cookie_t {unsigned int sequence;};
struct xcb_query_extension_cookie_t {unsigned int sequence;};
struct xcb_setup_request_iterator_t {xcb_setup_request_t *data;int rem;int index;};
struct xcb_sync_initialize_cookie_t {unsigned int sequence;};
enum xcb_xfixes_save_set_target_t {XCB_XFIXES_SAVE_SET_TARGET_NEAREST = 0x0,XCB_XFIXES_SAVE_SET_TARGET_ROOT = 0x1,};
enum xcb_xfixes_selection_event_t {XCB_XFIXES_SELECTION_EVENT_SET_SELECTION_OWNER = 0x0,XCB_XFIXES_SELECTION_EVENT_SELECTION_WINDOW_DESTROY = 0x1,XCB_XFIXES_SELECTION_EVENT_SELECTION_CLIENT_CLOSE = 0x2,};
typedef struct _FE74AE40C36D9F9A6F621CCCBCB7D423 xvmcListSubpictureTypesReply;
typedef struct _ApplicationShellClassRec *ApplicationShellWidgetClass;
typedef struct _52CBE65B67561D76877705E9E11130C9 ConstraintClassExtensionRec;
typedef struct FT_Incremental_InterfaceRec_ FT_Incremental_InterfaceRec;
enum MACRO_AppleWMClientNotLocal {AppleWMClientNotLocal = 0,AppleWMOperationNotSupported = 1,AppleWMNumberErrors = 2,};
enum MACRO_AppleWMMinimizeWindow {AppleWMMinimizeWindow = 0,AppleWMZoomWindow = 1,AppleWMCloseWindow = 2,};
enum MACRO_AppleWMPreviousWindow {AppleWMPreviousWindow = 12,};
enum MACRO_ConfigureRequestEvent {lbxsz_ConfigureRequestEvent = 28,lbxupsz_ConfigureRequestEvent = 28,};
enum MACRO_DESTRUCTOR_ITERATIONS {_POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4,PTHREAD_DESTRUCTOR_ITERATIONS = 4,};
enum MACRO_DisableScreenInterval {DisableScreenInterval = 0,};
enum MACRO_FontCacheNumberEvents {FontCacheNumberEvents = 0,};
enum MACRO_FontInfoAllCharsExist {FontInfoAllCharsExist = 1,FontInfoInkInside = 2,FontInfoHorizontalOverlap = 4,};
enum MACRO_GLXBadCurrentDrawable {GLXBadCurrentDrawable = 11,};
enum MACRO_IWEVMICHAELMICFAILURE {IWEVMICHAELMICFAILURE = 0x8C06,};
enum MACRO_LbxInvalidateTagEvent {LbxInvalidateTagEvent = 3,LbxSendTagDataEvent = 4,};
enum MACRO_NeedVarargsPrototypes {NeedVarargsPrototypes = 1,};
enum MACRO_PictOpConjointMaximum {PictOpConjointMaximum = 0x2B,};
enum MACRO_PictOpDisjointMaximum {PictOpDisjointMaximum = 0x1B,PictOpConjointMinimum = 0x20,};
enum MACRO_ScreenSaverNotifyMask {ScreenSaverNotifyMask = 0x1,ScreenSaverCycleMask = 0x2,};
enum MACRO_SelectionRequestEvent {lbxsz_SelectionRequestEvent = 28,lbxupsz_SelectionRequestEvent = 28,};
enum MACRO_WindowsWMResizeWindow {WindowsWMResizeWindow = 7,WindowsWMActivateWindow = 8,};
enum MACRO_XDamageNumberRequests {XDamageNumberRequests = 4,};
enum MACRO_XDamageReportNonEmpty {XDamageReportNonEmpty = 3,};
enum MACRO_XF86DGAClientNotLocal {XF86DGAClientNotLocal = 0,XF86DGANoDirectVideoMode = 1,XF86DGAScreenNotActive = 2,};
enum MACRO_XF86MiscBadMouseCombo {XF86MiscBadMouseCombo = 3,XF86MiscBadKbdType = 4,};
enum MACRO_XF86VidModeZoomLocked {XF86VidModeZoomLocked = 6,};
enum MACRO_XFixesSelectionNotify {XFixesSelectionNotify = 0,};
enum MACRO_XPUATTRIBUTESUPPORTED {XPUATTRIBUTESUPPORTED_JOB_NAME = 1,XPUATTRIBUTESUPPORTED_JOB_OWNER = 2,XPUATTRIBUTESUPPORTED_NOTIFICATION_PROFILE = 4,XPUATTRIBUTESUPPORTED_COPY_COUNT = 8,XPUATTRIBUTESUPPORTED_DOCUMENT_FORMAT = 16,XPUATTRIBUTESUPPORTED_CONTENT_ORIENTATION = 32,XPUATTRIBUTESUPPORTED_DEFAULT_PRINTER_RESOLUTION = 64,XPUATTRIBUTESUPPORTED_DEFAULT_INPUT_TRAY = 128,XPUATTRIBUTESUPPORTED_DEFAULT_MEDIUM = 256,XPUATTRIBUTESUPPORTED_PLEX = 512,XPUATTRIBUTESUPPORTED_LISTFONTS_MODES = 1024,};
enum MACRO_XRecordCurrentClients {XRecordCurrentClients = 1,XRecordFutureClients = 2,};
enum MACRO_XSecurityNumberEvents {XSecurityNumberEvents = 1,XSecurityNumberErrors = 2,};
enum MACRO_X_AppleWMQueryVersion {X_AppleWMQueryVersion = 0,X_AppleWMFrameGetRect = 1,X_AppleWMFrameHitTest = 2,X_AppleWMFrameDraw = 3,X_AppleWMDisableUpdate = 4,X_AppleWMReenableUpdate = 5,X_AppleWMSelectInput = 6,X_AppleWMSetWindowMenuCheck = 7,X_AppleWMSetFrontProcess = 8,X_AppleWMSetWindowLevel = 9,X_AppleWMSetCanQuit = 10,X_AppleWMSetWindowMenu = 11,};
enum MACRO_X_GetExtensionVersion {X_GetExtensionVersion = 1,X_ListInputDevices = 2,X_OpenDevice = 3,X_CloseDevice = 4,X_SetDeviceMode = 5,X_SelectExtensionEvent = 6,X_GetSelectedExtensionEvents = 7,X_ChangeDeviceDontPropagateList = 8,X_GetDeviceDontPropagateList = 9,X_GetDeviceMotionEvents = 10,X_ChangeKeyboardDevice = 11,X_ChangePointerDevice = 12,X_GrabDevice = 13,X_UngrabDevice = 14,X_GrabDeviceKey = 15,X_UngrabDeviceKey = 16,X_GrabDeviceButton = 17,X_UngrabDeviceButton = 18,X_AllowDeviceEvents = 19,X_GetDeviceFocus = 20,X_SetDeviceFocus = 21,X_GetFeedbackControl = 22,X_ChangeFeedbackControl = 23,X_GetDeviceKeyMapping = 24,X_ChangeDeviceKeyMapping = 25,X_GetDeviceModifierMapping = 26,X_SetDeviceModifierMapping = 27,X_GetDeviceButtonMapping = 28,X_SetDeviceButtonMapping = 29,X_QueryDeviceState = 30,X_SendExtensionEvent = 31,X_DeviceBell = 32,X_SetDeviceValuators = 33,X_GetDeviceControl = 34,X_ChangeDeviceControl = 35,};
enum MACRO_X_XF86DGAQueryVersion {X_XF86DGAQueryVersion = 0,X_XF86DGAGetVideoLL = 1,X_XF86DGADirectVideo = 2,X_XF86DGAGetViewPortSize = 3,X_XF86DGASetViewPort = 4,X_XF86DGAGetVidPage = 5,X_XF86DGASetVidPage = 6,X_XF86DGAInstallColormap = 7,X_XF86DGAQueryDirectVideo = 8,X_XF86DGAViewPortChanged = 9,};
enum MACRO_XkbAccessXOptionsMask {XkbAccessXOptionsMask = 264,};
enum MACRO_XkbAllRadioGroupsMask {XkbAllRadioGroupsMask = 0xFFFFFFFF,};
enum MACRO_XkbAllVirtualModsMask {XkbAllVirtualModsMask = 0xFFFF,};
enum MACRO_XkbComponentNamesMask {XkbComponentNamesMask = 0x3F,};
enum MACRO_XkbGeomMaxLabelColors {XkbGeomMaxLabelColors = 3,};
enum MACRO_XkbGeomPropertiesMask {XkbGeomPropertiesMask = 1,XkbGeomColorsMask = 2,XkbGeomShapesMask = 4,XkbGeomSectionsMask = 8,XkbGeomDoodadsMask = 16,XkbGeomKeyAliasesMask = 32,};
enum MACRO_XkbIndicatorMapNotify {XkbIndicatorMapNotify = 5,};
enum MACRO_XkbPerKeyBitArraySize {XkbPerKeyBitArraySize = 32,};
enum MACRO_XtUnspecifiedShellInt {XtUnspecifiedShellInt = -1,};
enum MACRO__XkbErrBadFileVersion {_XkbErrBadFileVersion = 21,};
enum MACRO__XkbErrFileCannotOpen {_XkbErrFileCannotOpen = 15,_XkbErrBadValue = 16,};
enum MACRO__XkbErrIllegalTOCType {_XkbErrIllegalTOCType = 11,};
enum MACRO__XtShellPositionValid {_XtShellPositionValid = 1,_XtShellNotReparented = 2,_XtShellPPositionOK = 4,_XtShellGeometryParsed = 8,};
enum MACRO_sz_xDPMSGetVersionReq {sz_xDPMSGetVersionReq = 8,sz_xDPMSGetVersionReply = 32,sz_xDPMSCapableReq = 4,sz_xDPMSCapableReply = 32,sz_xDPMSGetTimeoutsReq = 4,sz_xDPMSGetTimeoutsReply = 32,sz_xDPMSSetTimeoutsReq = 12,sz_xDPMSEnableReq = 4,sz_xDPMSDisableReq = 4,sz_xDPMSForceLevelReq = 8,sz_xDPMSInfoReq = 4,sz_xDPMSInfoReply = 32,};
enum MACRO_sz_xGLXRenderLargeReq {sz_xGLXRenderLargeReq = 16,sz_xGLXSingleReq = 8,sz_xGLXQueryVersionReq = 12,sz_xGLXIsDirectReq = 8,sz_xGLXCreateContextReq = 24,sz_xGLXDestroyContextReq = 8,sz_xGLXMakeCurrentReq = 16,sz_xGLXWaitGLReq = 8,sz_xGLXWaitXReq = 8,sz_xGLXCopyContextReq = 20,sz_xGLXSwapBuffersReq = 12,sz_xGLXUseXFontReq = 24,sz_xGLXCreateGLXPixmapReq = 20,sz_xGLXDestroyGLXPixmapReq = 8,sz_xGLXGetVisualConfigsReq = 8,sz_xGLXVendorPrivateReq = 12,sz_xGLXVendorPrivateWithReplyReq = 12,sz_xGLXQueryExtensionsStringReq = 8,sz_xGLXQueryServerStringReq = 12,sz_xGLXClientInfoReq = 16,sz_xGLXGetFBConfigsReq = 8,sz_xGLXCreatePixmapReq = 24,sz_xGLXDestroyPixmapReq = 8,sz_xGLXCreateNewContextReq = 28,sz_xGLXQueryContextReq = 8,sz_xGLXMakeContextCurrentReq = 20,sz_xGLXCreatePbufferReq = 20,sz_xGLXDestroyPbufferReq = 8,sz_xGLXGetDrawableAttributesReq = 8,sz_xGLXChangeDrawableAttributesReq = 12,sz_xGLXCreateWindowReq = 24,sz_xGLXDestroyWindowReq = 8,sz_xGLXGetErrorReply = 32,sz_xGLXMakeCurrentReply = 32,sz_xGLXReadPixelsReply = 32,sz_xGLXGetTexImageReply = 32,sz_xGLXGetSeparableFilterReply = 32,sz_xGLXGetConvolutionFilterReply = 32,sz_xGLXGetHistogramReply = 32,sz_xGLXGetMinmaxReply = 32,sz_xGLXRenderModeReply = 32,sz_xGLXQueryVersionReply = 32,sz_xGLXGetVisualConfigsReply = 32,sz_xGLXIsDirectReply = 32,sz_xGLXSingleReply = 32,sz_xGLXVendorPrivReply = 32,sz_xGLXQueryExtensionsStringReply = 32,sz_xGLXQueryServerStringReply = 32,sz_xGLXGetFBConfigsReply = 32,sz_xGLXQueryContextReply = 32,sz_xGLXMakeContextCurrentReply = 32,sz_xGLXCreateGLXPbufferReply = 32,sz_xGLXGetDrawableAttributesReply = 32,sz_xGLXGetColorTableReply = 32,sz_xGLXQueryContextInfoEXTReq = 16,sz_xGLXQueryContextInfoEXTReply = 32,sz_xGLXMakeCurrentReadSGIReq = 24,sz_xGLXMakeCurrentReadSGIReply = 32,sz_xGLXGetFBConfigsSGIXReq = 16,sz_xGLXCreateContextWithConfigSGIXReq = 36,sz_xGLXCreateGLXPixmapWithConfigSGIXReq = 28,sz_xGLXJoinSwapGroupSGIXReq = 20,sz_xGLXBindSwapBarrierSGIXReq = 20,sz_xGLXQueryMaxSwapBarriersSGIXReq = 16,sz_xGLXQueryMaxSwapBarriersSGIXReply = 32,sz_xGLXQueryHyperpipeNetworkSGIXReq = 16,sz_xGLXQueryHyperpipeNetworkSGIXReply = 32,sz_xGLXDestroyHyperpipeConfigSGIXReq = 32,sz_xGLXDestroyHyperpipeConfigSGIXReply = 32,sz_xGLXQueryHyperpipeConfigSGIXReq = 32,sz_xGLXQueryHyperpipeConfigSGIXReply = 32,sz_xGLXHyperpipeConfigSGIXReq = 32,sz_xGLXHyperpipeConfigSGIXReply = 32,};
enum MACRO_sz_xLbxQueryFontReply {sz_xLbxQueryFontReply = 32,sz_xLbxChangePropertyReq = 24,sz_xLbxChangePropertyReply = 32,sz_xLbxGetPropertyReq = 28,sz_xLbxGetPropertyReply = 32,sz_xLbxTagDataReq = 12,sz_xLbxInvalidateTagReq = 8,sz_xLbxPutImageReq = 7,sz_xLbxGetImageReq = 24,sz_xLbxGetImageReply = 32,};
enum MACRO_sz_xSyncInitializeReq {sz_xSyncInitializeReq = 8,sz_xSyncInitializeReply = 32,sz_xSyncListSystemCountersReq = 4,sz_xSyncListSystemCountersReply = 32,sz_xSyncSystemCounter = 14,sz_xSyncCreateCounterReq = 16,sz_xSyncChangeCounterReq = 16,sz_xSyncSetCounterReq = 16,sz_xSyncDestroyCounterReq = 8,sz_xSyncQueryCounterReq = 8,sz_xSyncQueryCounterReply = 32,sz_xSyncAwaitReq = 4,sz_xSyncWaitCondition = 28,sz_xSyncCreateAlarmReq = 12,sz_xSyncDestroyAlarmReq = 8,sz_xSyncQueryAlarmReq = 8,sz_xSyncQueryAlarmReply = 40,sz_xSyncChangeAlarmReq = 12,sz_xSyncSetPriorityReq = 12,sz_xSyncGetPriorityReq = 8,sz_xSyncGetPriorityReply = 32,};
enum MACRO_sz_xkbUseExtensionReq {sz_xkbUseExtensionReq = 8,sz_xkbUseExtensionReply = 32,sz_xkbSelectEventsReq = 16,sz_xkbBellReq = 28,sz_xkbGetStateReq = 8,sz_xkbGetStateReply = 32,sz_xkbLatchLockStateReq = 16,sz_xkbGetControlsReq = 8,sz_xkbGetControlsReply = 92,sz_xkbSetControlsReq = 100,sz_xkbKTMapEntryWireDesc = 8,sz_xkbKTSetMapEntryWireDesc = 4,sz_xkbModsWireDesc = 4,sz_xkbKeyTypeWireDesc = 8,sz_xkbSymMapWireDesc = 8,sz_xkbVModMapWireDesc = 4,sz_xkbBehaviorWireDesc = 4,sz_xkbActionWireDesc = 8,sz_xkbGetMapReq = 28,sz_xkbGetMapReply = 40,};
typedef void (*PFNGLENDVERTEXSHADEREXTPROC)(void);
typedef void (*PFNGLPRIMITIVERESTARTNVPROC)(void);
typedef struct _XIMStatusDrawCallbackStruct XIMStatusDrawCallbackStruct;
typedef unsigned int XIMStringConversionFeedback;
typedef unsigned short XIMStringConversionPosition;
typedef struct _67409BAD9025072768D801439602E625 XawPrintShellCallbackStruct;
typedef struct _014A104DDA4E37509806F389081D67BC __GLXdispatchTexImageHeader;
typedef struct _EEFF94D31B1553C87DFF230889E3822E __GLXtexSubImageLargeHeader;
struct cpufreq_available_governors {char *governor;struct cpufreq_available_governors *next;struct cpufreq_available_governors *first;};
typedef struct _C1A851173DD816DDF7F0E0D062CEFEE2 xChangeActivePointerGrabReq;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xCompositeQueryVersionReply;
typedef struct _9522E807BA7B29263AAB53074ABFE969 xCompositeRedirectWindowReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXGetDesktopAttributesReq;
typedef struct _7AC6EBFF84C7D5C6D4B5835EAB8E1003 xDMXGetInputAttributesReply;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xFontCacheQueryVersionReply;
typedef struct _252B149599A3B883D834EF1777AA3852 xGLXGetSeparableFilterReply;
typedef struct _582DBE3FFCEAF5F2BDC86CE4805EFD64 xGLXMakeContextCurrentReply;
typedef struct _1669416059A592B0B468DB2A6FC4CAE8 xGLXMakeCurrentReadSGIReply;
typedef struct _38AB55CADF3218184FF2A828A7079C62 xGetDeviceMotionEventsReply;
typedef struct _9ED58EEAFF80161A60B7DFF5CDA307D2 xLbxGetKeyboardMappingReply;
typedef struct _3D278926CADFDD0A67AC279ACD531B59 xLbxGetModifierMappingReply;
typedef struct _3C663E68C00512772EEEF9594AC2C00F xMbufDestroyImageBuffersReq;
typedef struct _C552EBCACAEF1EC592A2129D44400B77 xMbufDisplayImageBuffersReq;
typedef struct _2E772061F36030946C15A90398CEA89B xMbufGetBufferAttributesReq;
typedef struct _730B0A961A25B34AF2CAA3D5B8639BBB xMbufSetBufferAttributesReq;
typedef struct _PanoramiXGetScreenCount xPanoramiXGetScreenCountReq;
typedef struct _7C0193CACD5E2992F63533D0F1598B1A xPanoramiXQueryVersionReply;
typedef struct _FCBEDAD8A539FBE868C0633AE68719B3 xPrintGetContextScreenReply;
typedef struct _PrintGetImageResolution xPrintGetImageResolutionReq;
typedef struct _PrintSetImageResolution xPrintSetImageResolutionReq;
typedef struct _E997A7E9262D40FC83356A066D96F704 xRecordUnregisterClientsReq;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphs16Req;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphs32Req;
typedef struct _E52A8F32C8A3F3878A2B0A4A62B69464 xRenderReferenceGlyphSetReq;
typedef struct _ScreenSaverQueryVersion xScreenSaverQueryVersionReq;
typedef struct _9A76EF495F8378CE70D9AF691FDAC84A xWindowsWMFrameGetRectReply;
typedef struct _A80CA2BDA095D60FE5AEEB62DEB4779D xWindowsWMQueryVersionReply;
typedef struct _WindowsWMReenableUpdate xWindowsWMReenableUpdateReq;
typedef struct _XDGACopyTransparentArea xXDGACopyTransparentAreaReq;
typedef struct _9763FFEA107F886AC733AD6B5D71CF1E xXDGAGetViewportStatusReply;
typedef struct _XF86BigfontQueryVersion xXF86BigfontQueryVersionReq;
typedef struct _XF86DGAQueryDirectVideo xXF86DGAQueryDirectVideoReq;
typedef struct _XF86RushAT3DDisableRegs xXF86RushAT3DDisableRegsReq;
typedef struct _XF86RushStatusRegOffset xXF86RushStatusRegOffsetReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetDotClocksReq;
typedef struct _XF86VidModeGetGammaRamp xXF86VidModeGetGammaRampReq;
typedef struct _6B88FAC29A9971BB7647F24C04F63FBE xXF86VidModeGetMonitorReply;
typedef struct _XF86VidModeQueryVersion xXF86VidModeQueryVersionReq;
typedef struct _XF86VidModeSetGammaRamp xXF86VidModeSetGammaRampReq;
typedef struct _XF86VidModeValidateModeLine xXF86VidModeSwitchToModeReq;
typedef struct _1F0742A31307BC27E4EE3AB33F15E494 xXFixesSelectCursorInputReq;
typedef struct _9081086C0126123317B5AEBA108CF51B xXFixesSelectionNotifyEvent;
typedef xcb_glx_generic_error_t xcb_glx_bad_context_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_pbuffer_error_t;
struct xcb_glx_get_floatv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_minmax_cookie_t {unsigned int sequence;};
struct xcb_glx_get_string_cookie_t {unsigned int sequence;};
struct xcb_glx_is_texture_cookie_t {unsigned int sequence;};
struct xcb_record_range_iterator_t {xcb_record_range_t *data;int rem;int index;};
struct xcb_render_color_iterator_t {xcb_render_color_t *data;int rem;int index;};
struct xcb_setup_failed_iterator_t {xcb_setup_failed_t *data;int rem;int index;};
struct xcb_sync_trigger_iterator_t {xcb_sync_trigger_t *data;int rem;int index;};
typedef struct _7BC974A8E90EFB1AB4A63682D9BB99C5 xvQueryImageAttributesReply;
typedef struct _2C727585251F722E1CFA636B2B0D134C CompositeClassExtensionRec;
enum MACRO_BitmapFormatMaskByte {BitmapFormatMaskByte = 1,BitmapFormatMaskBit = 2,BitmapFormatMaskImageRectangle = 4,BitmapFormatMaskScanLinePad = 8,BitmapFormatMaskScanLineUnit = 16,};
enum MACRO_ConfigureNotifyEvent {lbxsz_ConfigureNotifyEvent = 28,lbxupsz_ConfigureNotifyEvent = 27,};
enum MACRO_DMXScreenWindowWidth {DMXScreenWindowWidth = 1,DMXScreenWindowHeight = 2,DMXScreenWindowXoffset = 4,DMXScreenWindowYoffset = 8,DMXRootWindowWidth = 16,DMXRootWindowHeight = 32,DMXRootWindowXoffset = 64,DMXRootWindowYoffset = 128,DMXRootWindowXorigin = 256,DMXRootWindowYorigin = 512,};
enum MACRO_FontCacheBadProtocol {FontCacheBadProtocol = 0,FontCacheCannotAllocMemory = 1,FontCacheNumberErrors = 2,};
enum MACRO_IceProtocolDuplicate {IceProtocolDuplicate = 6,};
enum MACRO_IndirectPairWordSize {IndirectPairWordSize = 2,};
enum MACRO_IntegerFeedbackClass {IntegerFeedbackClass = 3,LedFeedbackClass = 4,};
enum MACRO_LbxImageCompressNone {LbxImageCompressNone = 0,};
enum MACRO_LbxMasterClientIndex {LbxMasterClientIndex = 0,};
enum MACRO_MultibufferBadBuffer {MultibufferBadBuffer = 0,MultibufferNumberErrors = 1,};
enum MACRO_NeedNestedPrototypes {NeedNestedPrototypes = 1,};
enum MACRO_RRScreenChangeNotify {RRScreenChangeNotify = 0,};
enum MACRO_RecordMaxCoreRequest {RecordMaxCoreRequest = 127,};
enum MACRO_RecordMaxDeviceEvent {RecordMaxDeviceEvent = 6,};
enum MACRO_RecordMinDeviceEvent {RecordMinDeviceEvent = 2,};
enum MACRO_RenderNumberRequests {RenderNumberRequests = 37,};
enum MACRO_SNDCTL_DSP_SETSYNCRO {SNDCTL_DSP_SETSYNCRO = 20501,SNDCTL_DSP_SETDUPLEX = 20502,};
enum MACRO_SelectionNotifyEvent {lbxsz_SelectionNotifyEvent = 24,lbxupsz_SelectionNotifyEvent = 24,};
enum MACRO_VisibilityUnobscured {VisibilityUnobscured = 0,VisibilityPartiallyObscured = 1,VisibilityFullyObscured = 2,};
enum MACRO_WindowRegionBounding {WindowRegionBounding = 0,WindowRegionClip = 1,};
enum MACRO_WindowsWMCloseWindow {WindowsWMCloseWindow = 3,WindowsWMBringAllToFront = 4,};
enum MACRO_XDGAConcurrentAccess {XDGAConcurrentAccess = 0x1,XDGASolidFillRect = 0x2,XDGABlitRect = 0x4,XDGABlitTransRect = 0x8,XDGAPixmap = 0x10,XDGAInterlaced = 0x10000,XDGADoublescan = 0x20000,};
enum MACRO_XF86DGADirectPresent {XF86DGADirectPresent = 0x1,XF86DGADirectGraphics = 0x2,XF86DGADirectMouse = 0x4,XF86DGADirectKeyb = 0x8,XF86DGAHasColormap = 0x100,XF86DGADirectColormap = 0x200,};
enum MACRO_XF86MiscNumberEvents {XF86MiscNumberEvents = 0,};
enum MACRO_XF86RushNumberEvents {XF86RushNumberEvents = 0,};
enum MACRO_XFixesNumberRequests {XFixesNumberRequests = 31,};
enum MACRO_X_DamageQueryVersion {X_DamageQueryVersion = 0,X_DamageCreate = 1,X_DamageDestroy = 2,X_DamageSubtract = 3,};
enum MACRO_X_RecordQueryVersion {X_RecordQueryVersion = 0,X_RecordCreateContext = 1,X_RecordRegisterClients = 2,X_RecordUnregisterClients = 3,X_RecordGetContext = 4,X_RecordEnableContext = 5,X_RecordDisableContext = 6,X_RecordFreeContext = 7,};
enum MACRO_X_RenderQueryVersion {X_RenderQueryVersion = 0,X_RenderQueryPictFormats = 1,X_RenderQueryPictIndexValues = 2,X_RenderQueryDithers = 3,X_RenderCreatePicture = 4,X_RenderChangePicture = 5,X_RenderSetPictureClipRectangles = 6,X_RenderFreePicture = 7,X_RenderComposite = 8,X_RenderScale = 9,X_RenderTrapezoids = 10,X_RenderTriangles = 11,X_RenderTriStrip = 12,X_RenderTriFan = 13,X_RenderColorTrapezoids = 14,X_RenderColorTriangles = 15,X_RenderCreateGlyphSet = 17,X_RenderReferenceGlyphSet = 18,X_RenderFreeGlyphSet = 19,X_RenderAddGlyphs = 20,X_RenderAddGlyphsFromPicture = 21,X_RenderFreeGlyphs = 22,X_RenderCompositeGlyphs8 = 23,X_RenderCompositeGlyphs16 = 24,X_RenderCompositeGlyphs32 = 25,X_RenderFillRectangles = 26,X_RenderCreateCursor = 27,X_RenderSetPictureTransform = 28,X_RenderQueryFilters = 29,X_RenderSetPictureFilter = 30,X_RenderCreateAnimCursor = 31,X_RenderAddTraps = 32,X_RenderCreateSolidFill = 33,X_RenderCreateLinearGradient = 34,X_RenderCreateRadialGradient = 35,X_RenderCreateConicalGradient = 36,};
enum MACRO_X_ScreenSaverSuspend {X_ScreenSaverSuspend = 5,};
enum MACRO_X_XFixesQueryVersion {X_XFixesQueryVersion = 0,X_XFixesChangeSaveSet = 1,X_XFixesSelectSelectionInput = 2,X_XFixesSelectCursorInput = 3,X_XFixesGetCursorImage = 4,X_XFixesCreateRegion = 5,X_XFixesCreateRegionFromBitmap = 6,X_XFixesCreateRegionFromWindow = 7,X_XFixesCreateRegionFromGC = 8,X_XFixesCreateRegionFromPicture = 9,X_XFixesDestroyRegion = 10,X_XFixesSetRegion = 11,X_XFixesCopyRegion = 12,X_XFixesUnionRegion = 13,X_XFixesIntersectRegion = 14,X_XFixesSubtractRegion = 15,X_XFixesInvertRegion = 16,X_XFixesTranslateRegion = 17,X_XFixesRegionExtents = 18,X_XFixesFetchRegion = 19,X_XFixesSetGCClipRegion = 20,X_XFixesSetWindowShapeRegion = 21,X_XFixesSetPictureClipRegion = 22,X_XFixesSetCursorName = 23,X_XFixesGetCursorName = 24,X_XFixesGetCursorImageAndName = 25,X_XFixesChangeCursor = 26,X_XFixesChangeCursorByName = 27,X_XFixesExpandRegion = 28,X_XFixesHideCursor = 29,X_XFixesShowCursor = 30,};
enum MACRO_XctSingleSetSegments {XctSingleSetSegments = 0x1,XctProvideExtensions = 0x2,XctAcceptC0Extensions = 0x4,XctAcceptC1Extensions = 0x8,XctHideDirection = 0x10,XctFreeString = 0x20,XctShiftMultiGRToGL = 0x40,};
enum MACRO_XkbAllBellEventsMask {XkbAllBellEventsMask = 1,};
enum MACRO_XkbAllClientInfoMask {XkbAllClientInfoMask = 7,XkbAllServerInfoMask = 248,};
enum MACRO_XkbAllComponentsMask {XkbAllComponentsMask = 0x7F,};
enum MACRO_XkbAllIndicatorsMask {XkbAllIndicatorsMask = 0xFFFFFFFF,};
enum MACRO_XkbAnyActionDataSize {XkbAnyActionDataSize = 7,};
enum MACRO_XkbModifierStateMask {XkbModifierStateMask = 1,XkbModifierBaseMask = 2,XkbModifierLatchMask = 4,XkbModifierLockMask = 8,XkbGroupStateMask = 16,XkbGroupBaseMask = 32,XkbGroupLatchMask = 64,XkbGroupLockMask = 128,XkbCompatStateMask = 256,XkbGrabModsMask = 512,XkbCompatGrabModsMask = 1024,XkbLookupModsMask = 2048,XkbCompatLookupModsMask = 4096,XkbPointerButtonMask = 8192,};
enum MACRO_XkbNewKeyboardNotify {XkbNewKeyboardNotify = 0,XkbMapNotify = 1,XkbStateNotify = 2,};
enum MACRO_XkbSetMapResizeTypes {XkbSetMapResizeTypes = 1,XkbSetMapRecomputeActions = 2,};
enum MACRO_XkmSemanticsRequired {XkmSemanticsRequired = 2,XkmSemanticsOptional = 73,};
enum MACRO_XpmPixmapColorFailed {XpmPixmapColorFailed = -4,};
enum MACRO_XpmPixmapFileInvalid {XpmPixmapFileInvalid = -2,};
enum MACRO__XkbErrBadFileFormat {_XkbErrBadFileFormat = 22,};
enum MACRO__XkbErrIllegalDoodad {_XkbErrIllegalDoodad = 10,};
enum MACRO__deviceButton3Motion {_deviceButton3Motion = 3,_deviceButton4Motion = 4,};
enum MACRO__deviceButton5Motion {_deviceButton5Motion = 5,};
enum MACRO_sz_pmGetProxyAddrMsg {sz_pmGetProxyAddrMsg = 8,sz_pmGetProxyAddrReplyMsg = 8,sz_pmStartProxyMsg = 8,sz_smRegisterClientMsg = 8,sz_smRegisterClientReplyMsg = 8,sz_smSaveYourselfMsg = 16,sz_smSaveYourselfRequestMsg = 16,sz_smInteractRequestMsg = 8,sz_smInteractMsg = 8,sz_smInteractDoneMsg = 8,sz_smSaveYourselfDoneMsg = 8,sz_smDieMsg = 8,sz_smShutdownCancelledMsg = 8,sz_smCloseConnectionMsg = 8,sz_smSetPropertiesMsg = 8,sz_smDeletePropertiesMsg = 8,sz_smGetPropertiesMsg = 8,sz_smPropertiesReplyMsg = 8,sz_smSaveYourselfPhase2RequestMsg = 8,sz_smSaveYourselfPhase2Msg = 8,sz_smSaveCompleteMsg = 8,};
enum MACRO_sz_xLbxGrabCmapReply {sz_xLbxGrabCmapReply = 32,sz_xLbxGrabCmapReplyHdr = 8,sz_xLbxReleaseCmapReq = 8,sz_xLbxAllocColorReq = 20,sz_xLbxIncrementPixelReq = 12,sz_xLbxDeltaReq = 6,sz_xLbxGetModifierMappingReq = 4,sz_xLbxGetModifierMappingReply = 32,sz_xLbxGetKeyboardMappingReq = 8,sz_xLbxGetKeyboardMappingReply = 32,sz_xLbxQueryFontReq = 8,sz_xLbxInternAtomsReq = 6,sz_xLbxInternAtomsReply = 32,sz_xLbxInternAtomsReplyHdr = 8,sz_xLbxGetWinAttrAndGeomReq = 8,sz_xLbxGetWinAttrAndGeomReply = 60,sz_xLbxSyncReq = 4,sz_xLbxSyncReply = 32,};
enum MACRO_sz_xMITSetBugModeReq {sz_xMITSetBugModeReq = 8,sz_xMITGetBugModeReq = 4,sz_xMITGetBugModeReply = 32,};
enum MACRO_sz_xTestFakeInputReq {sz_xTestFakeInputReq = 72,sz_xTestGetInputReq = 8,sz_xTestStopInputReq = 4,sz_xTestResetReq = 4,sz_xTestQueryInputSizeReq = 4,};
typedef void (*PFNGLFINISHTEXTURESUNXPROC)(void);
typedef void (*PFNGLRESIZEBUFFERSMESAPROC)(void);
typedef int (*PFNGLXSWAPINTERVALMESAPROC)(unsigned int interval);
typedef int (*PFNGLXWAITVIDEOSYNCSGIPROC)(int divisor, int remainder, unsigned int *count);
typedef struct _9D085620EB695911E35E2B9DE84C0E07 XFixesSelectionNotifyEvent;
typedef void (*XML_EndCdataSectionHandler)(void *userData);
typedef struct _07B36B105D1522E7FC3538405AC1EE4D XRRScreenChangeNotifyEvent;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F XawVendorShellExtClassPart;
typedef struct _F7AEAB90CD1FFE3D56BEDD9E988BA465 __GLXColorTableLargeHeader;
typedef struct _4742A0942DABEB0EF5B18B5595A3D286 __GLXdrawArraysLargeHeader;
typedef struct _5F5D7BEDB023FB83B7B8ABC973A4716F __GLXdrawPixelsLargeHeader;
typedef struct _F13FDF1465C2A4EBCF0352D5A6933F7D __GLXtexImage3DLargeHeader;
struct demangle_builtin_type_info;
typedef struct _276527E852EBD04F842021527F4FA45F posix_spawn_file_actions_t;
typedef struct _AppleWMSetFrontProcess xAppleWMSetFrontProcessReq;
typedef struct _28183F13DB7442E77993ED2BEDDC9E43 xChangeDeviceKeyMappingReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xChangeKeyboardDeviceReply;
typedef struct _FCC23D59EDC7C9AEBCA8416FDF631F7E xChangeWindowAttributesReq;
typedef struct _091D8C0512871595A9DC831969F12B34 xDMXForceWindowCreationReq;
typedef struct _BDA8B21BBF344B8E23C198E46F24428F xDMXGetScreenAttributesReq;
typedef struct _091D8C0512871595A9DC831969F12B34 xDMXGetWindowAttributesReq;
typedef struct GLXBindSwapBarrierSGIX xGLXBindSwapBarrierSGIXReq;
typedef struct GLXHyperpipeConfigSGIX xGLXHyperpipeConfigSGIXReq;
typedef struct GLXQueryContextInfoEXT xGLXQueryContextInfoEXTReq;
typedef struct _F5921867A833B452F3779F1505474C7F xGLXQueryServerStringReply;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetDeviceButtonMappingReq;
typedef struct _8C2FD448F8CF6A602A866F997822A598 xLbxGetWinAttrAndGeomReply;
typedef struct _560A03400C719BC685F99AA3989F50DD xMbufCreateImageBuffersReq;
typedef struct _1BDC7C7F49C92F644328BBE26F29D5DE xMbufCreateStereoWindowReq;
typedef struct _BD71CB07C4DDF44AC99036AEC3635494 xMbufGetBufferVersionReply;
typedef struct _PanoramiXGetScreenSize xPanoramiXGetScreenSizeReq;
typedef struct _F464FEA7A4E5B570917C7E6E5C96B7A9 xPrintGetDocumentDataReply;
typedef struct _86549870A56B750901787CF4B94C9DDE xPrintGetOneAttributeReply;
typedef struct _PrintGetPageDimensions xPrintGetPageDimensionsReq;
typedef struct _PrintRehashPrinterList xPrintRehashPrinterListReq;
typedef struct _176B59BEDA9B70C3FEBB155A23358FC4 xRRScreenChangeNotifyEvent;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphs8Req;
typedef struct _BAE4AA77CC43BF06F4D3ADF31CFD29F5 xRenderCreateAnimCursorReq;
typedef struct _523CE37B1F7AC95341854764E619AB82 xRenderQueryPictFormatsReq;
typedef struct _BA7B5543ABAE7B9E6314E3F267492402 xRenderSetPictureFilterReq;
typedef struct _A8C15E0CCC4F1BB7303BFAC73A97A837 xScreenSaverQueryInfoReply;
typedef struct _ScreenSaverSelectInput xScreenSaverSelectInputReq;
typedef struct _B16FC8566897364FB8F68A61B8D500EB xSecurityQueryVersionReply;
typedef struct _C785CF6C4EEFEB89ECBC9FAC0351909D xSetDeviceButtonMappingReq;
typedef struct _xSyncListSystemCounters xSyncListSystemCountersReq;
typedef struct _WindowsWMDisableUpdate xWindowsWMDisableUpdateReq;
typedef struct _WindowsWMFrameSetTitle xWindowsWMFrameSetTitleReq;
typedef struct _975F191B774855E1091B820C10595CF2 xXDGAChangePixmapModeReply;
typedef struct _3982B52BB2F6F242AE0CDAAD29A77640 xXF86BigfontQueryFontReply;
typedef struct _XF86DGAGetViewPortSize xXF86DGAGetViewPortSizeReq;
typedef struct _XF86DGAInstallColormap xXF86DGAInstallColormapReq;
typedef struct _XF86DGAViewPortChanged xXF86DGAViewPortChangedReq;
typedef struct _5C8033F90A64FC4676BFB935617D1B44 xXF86MiscGetFilePathsReply;
typedef struct _XF86MiscGetKbdSettings xXF86MiscGetKbdSettingsReq;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXF86MiscQueryVersionReply;
typedef struct _XF86MiscSetKbdSettings xXF86MiscSetKbdSettingsReq;
typedef struct _XF86RushAT3DEnableRegs xXF86RushAT3DEnableRegsReq;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXF86RushQueryVersionReply;
typedef struct _XF86RushSetPixelStride xXF86RushSetPixelStrideReq;
typedef struct _XF86VidModeAddModeLine xXF86VidModeAddModeLineReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetModeLineReq;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetViewPortReq;
typedef struct _XF86VidModeModModeLine xXF86VidModeModModeLineReq;
typedef struct _XF86VidModeSetViewPort xXF86VidModeSetViewPortReq;
typedef struct _3DA4CDB67EF3124D6BB6A4128B3FCD7C xXFixesGetCursorImageReply;
typedef struct _64A10EE371E893EA59638110B65879C5 xXineramaQueryScreensReply;
typedef xcb_button_press_event_t xcb_button_release_event_t;
struct xcb_get_atom_name_cookie_t {unsigned int sequence;};
struct xcb_get_font_path_cookie_t {unsigned int sequence;};
typedef xcb_glx_generic_error_t xcb_glx_bad_pixmap_error_t;
typedef xcb_glx_generic_error_t xcb_glx_bad_window_error_t;
struct xcb_glx_gen_lists_cookie_t {unsigned int sequence;};
struct xcb_glx_get_error_cookie_t {unsigned int sequence;};
struct xcb_glx_get_mapdv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_mapfv_cookie_t {unsigned int sequence;};
struct xcb_glx_get_mapiv_cookie_t {unsigned int sequence;};
struct xcb_glx_is_direct_cookie_t {unsigned int sequence;};
struct xcb_grab_keyboard_cookie_t {unsigned int sequence;};
typedef xcb_request_error_t xcb_implementation_error_t;
struct xcb_query_pointer_cookie_t {unsigned int sequence;};
struct xcb_render_trap_iterator_t {xcb_render_trap_t *data;int rem;int index;};
struct xcb_shm_get_image_cookie_t {unsigned int sequence;};
struct xcb_xevie_event_iterator_t {xcb_xevie_event_t *data;int rem;int index;};
enum xcb_xfixes_cursor_notify_t {XCB_XFIXES_CURSOR_NOTIFY_DISPLAY_CURSOR = 0x0,};
enum xcb_xfixes_save_set_mode_t {XCB_XFIXES_SAVE_SET_MODE_INSERT = 0x0,XCB_XFIXES_SAVE_SET_MODE_DELETE = 0x1,};
struct xcb_xv_rational_iterator_t {xcb_xv_rational_t *data;int rem;int index;};
typedef struct _xkbIndicatorDoodadWireDesc xkbIndicatorDoodadWireDesc;
typedef struct _79F2479F433F63099A0390C39EAA789F xvQueryPortAttributesReply;
typedef struct _7E8BAC4262F9B7E47F22B721CB72642D xvmcListSubpictureTypesReq;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F ApplicationShellClassPart;
typedef struct FT_Incremental_MetricsRec_ FT_Incremental_MetricsRec;
typedef struct _02952D74399316BEFD2BE4AE2D13875D GLXBufferClobberEventSGIX;
enum MACRO_AppleWMNumberEvents {AppleWMNumberEvents = 3,};
enum MACRO_ColormapUninstalled {ColormapUninstalled = 0,ColormapInstalled = 1,};
enum MACRO_FSBadImplementation {FSBadImplementation = 11,};
enum MACRO_FamilyKrb5Principal {FamilyKrb5Principal = 253,};
enum MACRO_GLXBadCurrentWindow {GLXBadCurrentWindow = 5,};
enum MACRO_GLXBadRenderRequest {GLXBadRenderRequest = 6,};
enum MACRO_LbxMotionDeltaEvent {LbxMotionDeltaEvent = 7,LbxReleaseCmapEvent = 8,};
enum MACRO_MITMiscNumberErrors {MITMiscNumberErrors = 0,};
enum MACRO_MITMiscNumberEvents {MITMiscNumberEvents = 0,};
enum MACRO_MultibufferModeMono {MultibufferModeMono = 0,MultibufferModeStereo = 1,};
enum MACRO_MultibufferSideMono {MultibufferSideMono = 0,MultibufferSideLeft = 1,MultibufferSideRight = 2,};
enum MACRO_PictOpConjointClear {PictOpConjointClear = 0x20,};
enum MACRO_PictOpDisjointClear {PictOpDisjointClear = 0x10,};
enum MACRO_RecordMaxExtRequest {RecordMaxExtRequest = 255,};
enum MACRO_RecordMinExtRequest {RecordMinExtRequest = 128,};
enum MACRO_SNDCTL_DSP_NONBLOCK {SNDCTL_DSP_NONBLOCK = 20494,};
enum MACRO_ScreenSaverDisabled {ScreenSaverDisabled = 3,};
enum MACRO_SelectionClearEvent {lbxsz_SelectionClearEvent = 16,lbxupsz_SelectionClearEvent = 16,};
enum MACRO_SmInteractStyleNone {SmInteractStyleNone = 0,SmInteractStyleErrors = 1,SmInteractStyleAny = 2,};
enum MACRO_SubPixelVerticalRGB {SubPixelVerticalRGB = 3,SubPixelVerticalBGR = 4,};
enum MACRO_WindowsWMHideWindow {WindowsWMHideWindow = 5,};
enum MACRO_WindowsWMMoveWindow {WindowsWMMoveWindow = 6,};
enum MACRO_XBigReqNumberErrors {XBigReqNumberErrors = 0,};
enum MACRO_XBigReqNumberEvents {XBigReqNumberEvents = 0,};
enum MACRO_XDGAPixmapModeLarge {XDGAPixmapModeLarge = 0,XDGAPixmapModeSmall = 1,};
enum MACRO_XF86DGANumberErrors {XF86DGANumberErrors = 5,};
enum MACRO_XF86DGANumberEvents {XF86DGANumberEvents = 7,};
enum MACRO_XF86VidModeBadClock {XF86VidModeBadClock = 0,XF86VidModeBadHTimings = 1,XF86VidModeBadVTimings = 2,};
enum MACRO_XLocaleNotSupported {XLocaleNotSupported = -2,};
enum MACRO_X_PrintQueryVersion {X_PrintQueryVersion = 0,X_PrintGetPrinterList = 1,X_PrintCreateContext = 2,X_PrintSetContext = 3,X_PrintGetContext = 4,X_PrintDestroyContext = 5,X_PrintGetContextScreen = 6,X_PrintStartJob = 7,X_PrintEndJob = 8,X_PrintStartDoc = 9,X_PrintEndDoc = 10,X_PrintPutDocumentData = 11,X_PrintGetDocumentData = 12,X_PrintStartPage = 13,X_PrintEndPage = 14,X_PrintSelectInput = 15,X_PrintInputSelected = 16,X_PrintGetAttributes = 17,X_PrintSetAttributes = 18,X_PrintGetOneAttribute = 19,X_PrintRehashPrinterList = 20,X_PrintGetPageDimensions = 21,X_PrintQueryScreens = 22,X_PrintSetImageResolution = 23,X_PrintGetImageResolution = 24,};
enum MACRO_X_ShapeQueryVersion {X_ShapeQueryVersion = 0,X_ShapeRectangles = 1,X_ShapeMask = 2,X_ShapeCombine = 3,X_ShapeOffset = 4,X_ShapeQueryExtents = 5,X_ShapeSelectInput = 6,X_ShapeInputSelected = 7,X_ShapeGetRectangles = 8,};
enum MACRO_X_XevieQueryVersion {X_XevieQueryVersion = 0,X_XevieStart = 1,X_XevieEnd = 2,X_XevieSend = 3,X_XevieSelectInput = 4,};
enum MACRO_XagNdefaultColormap {XagNdefaultColormap = 3,XagNblackPixel = 4,};
enum MACRO_XagSingleScreenMask {XagSingleScreenMask = 1,XagDefaultRootMask = 2,XagRootVisualMask = 4,XagDefaultColormapMask = 8,XagBlackPixelMask = 16,XagWhitePixelMask = 32,XagAppGroupLeaderMask = 64,};
enum MACRO_XawTextEncoding8bit {XawTextEncoding8bit = 0,XawTextEncodingChar2b = 1,};
enum MACRO_XkbAllRequiredTypes {XkbAllRequiredTypes = 0xF,};
enum MACRO_XkbKeycodesNameMask {XkbKeycodesNameMask = 1,XkbGeometryNameMask = 2,XkbSymbolsNameMask = 4,XkbPhysSymbolsNameMask = 8,XkbTypesNameMask = 16,XkbCompatNameMask = 32,XkbKeyTypeNamesMask = 64,XkbKTLevelNamesMask = 128,XkbIndicatorNamesMask = 256,XkbKeyNamesMask = 512,XkbKeyAliasesMask = 1024,XkbVirtualModNamesMask = 2048,XkbGroupNamesMask = 4096,XkbRGNamesMask = 8192,};
enum MACRO_XkbLastRequiredType {XkbLastRequiredType = 3,XkbNumRequiredTypes = 4,};
enum MACRO_XkmKeyHasGroup1Type {XkmKeyHasGroup1Type = 1,XkmKeyHasGroup2Type = 2,XkmKeyHasGroup3Type = 4,XkmKeyHasGroup4Type = 8,XkmKeyHasActions = 16,XkmKeyHasBehavior = 32,XkmRepeatingKey = 64,XkmNonRepeatingKey = 128,};
enum MACRO_XkmVirtualModsIndex {XkmVirtualModsIndex = 6,};
enum MACRO_XpmPixmapColorError {XpmPixmapColorError = 1,};
enum MACRO_XpmReturnColorTable {XpmReturnColorTable = 32768,XpmReturnAllocPixels = 65536,XpmAllocCloseColors = 131072,XpmBitmapFormat = 262144,XpmAllocColor = 524288,XpmFreeColors = 1048576,XpmColorClosure = 2097152,};
enum MACRO_XpmReturnExtensions {XpmReturnExtensions = 1024,XpmExactColors = 2048,XpmCloseness = 4096,XpmRGBCloseness = 8192,XpmColorKey = 16384,XpmColorTable = 32768,};
enum MACRO_XtUnspecifiedPixmap {XtUnspecifiedPixmap = 2,};
enum MACRO_XtUnspecifiedWindow {XtUnspecifiedWindow = 2,};
enum MACRO__XkbErrBadTypeWidth {_XkbErrBadTypeWidth = 19,};
enum MACRO__XkbErrFileNotFound {_XkbErrFileNotFound = 14,};
enum MACRO__XkbErrMissingVMods {_XkbErrMissingVMods = 5,};
enum MACRO___GLX_NUMBER_EVENTS {__GLX_NUMBER_EVENTS = 17,__GLX_MAX_CONTEXT_PROPS = 3,__GLX_SIZE_INT8 = 1,__GLX_SIZE_INT16 = 2,__GLX_SIZE_INT32 = 4,__GLX_SIZE_CARD8 = 1,__GLX_SIZE_CARD16 = 2,__GLX_SIZE_CARD32 = 4,__GLX_SIZE_FLOAT32 = 4,__GLX_SIZE_FLOAT64 = 8,};
enum MACRO__deviceButtonMotion {_deviceButtonMotion = 6,};
enum MACRO__deviceMotionNotify {_deviceMotionNotify = 0,};
enum MACRO_sz_xBigReqEnableReq {sz_xBigReqEnableReq = 4,sz_xBigReqEnableReply = 32,};
enum MACRO_sz_xLbxPolyPointReq {sz_xLbxPolyPointReq = 6,sz_xLbxPolyLineReq = 6,sz_xLbxPolySegmentReq = 6,sz_xLbxPolyRectangleReq = 6,sz_xLbxPolyArcReq = 6,sz_xLbxPolyFillRectangleReq = 6,sz_xLbxPolyFillArc = 6,sz_xLbxFillPolyReq = 7,sz_xLbxCopyAreaReq = 6,sz_xLbxCopyPlaneReq = 10,sz_xLbxPolyTextReq = 5,sz_xLbxPolyText8Req = 5,sz_xLbxPolyText16Req = 5,sz_xLbxImageTextReq = 6,sz_xLbxImageText8Req = 6,sz_xLbxImageText16Req = 6,sz_xLbxDiffItem = 2,sz_xLbxStartReply = 32,sz_xLbxStartReplyHdr = 8,sz_xLbxQueryExtensionReq = 8,sz_xLbxQueryExtensionReply = 32,sz_BeginLargeRequestReq = 8,sz_LargeRequestDataReq = 4,sz_EndLargeRequestReq = 4,sz_xLbxSwitchEvent = 8,sz_xLbxCloseEvent = 32,sz_xLbxInvalidateTagEvent = 32,sz_xLbxSendTagDataEvent = 32,sz_xLbxListenToOneEvent = 32,sz_xLbxReleaseCmapEvent = 32,sz_xLbxFreeCellsEvent = 32,};
enum MACRO_sz_xkmKeySymMapDesc {sz_xkmKeySymMapDesc = 4,sz_xkmIndicatorMapDesc = 12,sz_xkmGeometryDesc = 20,sz_xkmPointDesc = 4,sz_xkmOutlineDesc = 4,sz_xkmShapeDesc = 4,sz_xkmSectionDesc = 16,sz_xkmRowDesc = 8,sz_xkmKeyDesc = 8,sz_xkmOverlayDesc = 4,sz_xkmOverlayRowDesc = 4,sz_xkmOverlayKeyDesc = 8,sz_xkmShapeDoodadDesc = 16,sz_xkmTextDoodadDesc = 16,sz_xkmIndicatorDoodadDesc = 16,sz_xkmLogoDoodadDesc = 16,sz_xkmAnyDoodadDesc = 16,sz_xkmDoodadDesc = 16,};
typedef int (*PFNGLXGETVIDEOSYNCSGIPROC)(unsigned int *count);
typedef int (*PFNGLXSET3DFXMODEMESAPROC)(int mode);
typedef int (*PFNGLXSWAPINTERVALSGIPROC)(int interval);
typedef struct _TransientShellClassRec *TransientShellWidgetClass;
typedef void (*XML_EndDoctypeDeclHandler)(void *userData);
typedef struct _5C0647BB1A627D9926272DE9A3EB3DF9 XML_Memory_Handling_Suite;
typedef struct _338A332AC07B59A36792FEE160C5A511 XServerInterpretedAddress;
typedef struct _VendorShellExtClassRec XawVendorShellExtClassRec;
typedef struct _XkbNewKeyboardNotify XkbNewKeyboardNotifyEvent;
typedef struct _D769135999DFEE6143DE1D9CD80B3AD5 *XtChangeHookSetValuesData;
typedef struct _CE94CBC997C090EAAC40968C8F5E3465 __GLXdispatchBitmapHeader;
typedef struct _55F7F426FEFBA4DDF34FBEE0D54465AF __GLXpolygonStippleHeader;
typedef int (*__gconv_trans_context_fct)(void *,  unsigned char *,  unsigned char *, unsigned char *, unsigned char *);
struct __kernel_sockaddr_storage {unsigned short ss_family;char __data[126];};
struct bfd_elf_version_expr_head {struct bfd_elf_version_expr *list;void *htab;struct bfd_elf_version_expr *remaining;unsigned int mask;};
typedef struct _3D6C9E6FC2A1930EF06F70ECE24ED2E6 fsListFontsWithXInfoReply;
typedef void (*nfs4_idmap_log_function_t)( char *, ...);
typedef struct _E99E267610E58315722078BC51216460 xAppleWMFrameGetRectReply;
typedef struct _9F409A22DE3AD0D94F719EC6F00E420F xAppleWMFrameHitTestReply;
typedef struct _A80CA2BDA095D60FE5AEEB62DEB4779D xAppleWMQueryVersionReply;
typedef struct _AppleWMReenableUpdate xAppleWMReenableUpdateReq;
typedef struct _AppleWMSetWindowLevel xAppleWMSetWindowLevelReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xChangeDeviceControlReply;
typedef struct _78B46019F679C5E70AAD7C2ED28277AC xChangeFeedbackControlReq;
typedef struct _925C5E9ADF13AF08F8E4BE2898EADC8C xChangeKeyboardControlReq;
typedef struct _F80E3F154E69694439090B67229FB6AA xChangeKeyboardMappingReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xChangePointerDeviceReply;
typedef struct _E1B611A0324DBC10371E6C5C458A41ED xCompositeQueryVersionReq;
typedef struct _72F0243C2EB87E20847F7DC0E66AC2E3 xDMXGetInputAttributesReq;
typedef struct _FontCacheQueryVersion xFontCacheQueryVersionReq;
typedef struct _3E0CB53261D6AD0D2D8FF0EEA54E5912 xGLXCreateGLXPbufferReply;
typedef struct _FDC4E96304CD6EC3DE0DB0C9DA4747DA xGLXGetVisualConfigsReply;
typedef struct GLXMakeContextCurrent xGLXMakeContextCurrentReq;
typedef struct GLXMakeCurrentReadSGI xGLXMakeCurrentReadSGIReq;
typedef struct _88CB499CEF7C95AB64991FDC4A8C267A xGetDeviceKeyMappingReply;
typedef struct _FD8FCB430836D04139012301F63EB9C6 xGetDeviceMotionEventsReq;
typedef struct _CFD68B7ADBC82BE7EABF4FDEA780590F xGetExtensionVersionReply;
typedef struct _D0A88ECD5B9151D3C71E69B7AE3ECA15 xGetWindowAttributesReply;
typedef struct _LbxGetKeyboardMapping xLbxGetKeyboardMappingReq;
typedef struct _LbxGetModifierMapping xLbxGetModifierMappingReq;
typedef struct _PanoramiXQueryVersion xPanoramiXQueryVersionReq;
typedef struct _PrintGetContextScreen xPrintGetContextScreenReq;
typedef struct _DAEBDFCF6641BEDF5371E5E95CD6FE55 xPrintGetPrinterListReply;
typedef struct _2D59FDEE4261500A2FE9AC0FF5270F5C xRecordEnableContextReply;
typedef struct _791AF81D366397FAE28AFC7E5E3FF4B5 xRecordRegisterClientsReq;
typedef struct _1B5F367B5963C48BD3F34F9922AB12D3 xRenderCompositeGlyphsReq;
typedef struct _68EFEC536F03412D58850C40CDE6BAE5 xRenderCreateSolidFillReq;
typedef struct _WindowsWMFrameGetRect xWindowsWMFrameGetRectReq;
typedef struct _WindowsWMQueryVersion xWindowsWMQueryVersionReq;
typedef struct _XDGAGetViewportStatus xXDGAGetViewportStatusReq;
typedef struct _8DDBCDCB4EEBED7E3946A9A0AA381214 xXDGAOpenFramebufferReply;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXF86DGAQueryVersionReply;
typedef struct _F41DB5A7C32B97CBCEE09CBFE1E8FA57 xXF86MiscPassMessageReply;
typedef struct _8037B5CF1C7930037367B37388F05F8B xXF86RushOverlayPixmapReq;
typedef struct _AEEA76D8CE49243D0419CEF55BCA8374 xXF86VidModeGetGammaReply;
typedef struct _XF86VidModeGetModeLine xXF86VidModeGetMonitorReq;
typedef struct _XF86VidModeSwitchMode xXF86VidModeSwitchModeReq;
typedef struct _AF27679C824E3E5901AA7DC2B9114169 xXFixesGetCursorNameReply;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesIntersectRegionReq;
typedef struct _B2F7B8A6150007A0765871980FCF4D2A xXFixesSetGCClipRegionReq;
typedef struct _4DBA840A262C58E6AC422C7E2FFFF3EA xXFixesTranslateRegionReq;
enum xcb_damage_report_level_t {XCB_DAMAGE_REPORT_LEVEL_RAW_RECTANGLES = 0x0,XCB_DAMAGE_REPORT_LEVEL_DELTA_RECTANGLES = 0x1,XCB_DAMAGE_REPORT_LEVEL_BOUNDING_BOX = 0x2,XCB_DAMAGE_REPORT_LEVEL_NON_EMPTY = 0x3,};
struct xcb_dpms_capable_cookie_t {unsigned int sequence;};
struct xcb_get_geometry_cookie_t {unsigned int sequence;};
struct xcb_get_property_cookie_t {unsigned int sequence;};
struct xcb_grab_pointer_cookie_t {unsigned int sequence;};
struct xcb_lookup_color_cookie_t {unsigned int sequence;};
struct xcb_query_colors_cookie_t {unsigned int sequence;};
struct xcb_query_keymap_cookie_t {unsigned int sequence;};
struct xcb_res_client_iterator_t {xcb_res_client_t *data;int rem;int index;};
struct xcb_sync_int64_iterator_t {xcb_sync_int64_t *data;int rem;int index;};
struct xcb_visualtype_iterator_t {xcb_visualtype_t *data;int rem;int index;};
struct xcb_xv_grab_port_cookie_t {unsigned int sequence;};
typedef struct _xkbGetIndicatorStateReply xkbGetIndicatorStateReply;
typedef struct _xkbGetNamedIndicatorReply xkbGetNamedIndicatorReply;
typedef struct _xkbSetDebuggingFlagsReply xkbSetDebuggingFlagsReply;
typedef struct _408ECFFBDBCCAB2F4BE7BF225F1A7284 xvQueryImageAttributesReq;
typedef struct _5C360CD6F7BDFED17568144DDDEE5A5E xvmcCreateSubpictureReply;
typedef struct _DB14CFE2E08779D243D914BBAB2B5230 xvmcListSurfaceTypesReply;
typedef struct _ApplicationShellClassRec ApplicationShellClassRec;
typedef struct _BitmapScalablePrivate *BitmapScalablePrivatePtr;
typedef struct _BitmapScalablePrivate BitmapScalablePrivateRec;
typedef struct _52CBE65B67561D76877705E9E11130C9 *ConstraintClassExtension;
enum MACRO_AppleWMFrameActive {AppleWMFrameActive = 0x1,AppleWMFrameUrgent = 0x2,AppleWMFrameTitle = 0x4,AppleWMFramePrelight = 0x8,AppleWMFrameShaded = 0x10,AppleWMFrameCloseBox = 0x100,AppleWMFrameCollapseBox = 0x200,AppleWMFrameZoomBox = 0x400,};
enum MACRO_AppleWMFrameAnyBox {AppleWMFrameAnyBox = 0x700,AppleWMFrameCloseBoxClicked = 0x800,AppleWMFrameCollapseBoxClicked = 0x1000,AppleWMFrameZoomBoxClicked = 0x2000,};
enum MACRO_COMMAND_TERMINATED {COMMAND_TERMINATED = 0x11,};
enum MACRO_ClientMessageEvent {lbxsz_ClientMessageEvent = 32,lbxupsz_ClientMessageEvent = 32,};
enum MACRO_DestroyNotifyEvent {lbxsz_DestroyNotifyEvent = 12,lbxupsz_DestroyNotifyEvent = 12,};
enum MACRO_DisableScreenSaver {DisableScreenSaver = 0,};
enum MACRO_DontAllowExposures {DontAllowExposures = 0,AllowExposures = 1,DefaultExposures = 2,};
enum MACRO_DontPreferBlanking {DontPreferBlanking = 0,PreferBlanking = 1,DefaultBlanking = 2,};
enum MACRO_DontSendCoreEvents {DontSendCoreEvents = 60,};
enum MACRO_FSBadAccessContext {FSBadAccessContext = 5,};
enum MACRO_FillOpaqueStippled {FillOpaqueStippled = 3,};
enum MACRO_GLXBadLargeRequest {GLXBadLargeRequest = 7,GLXUnsupportedPrivateRequest = 8,};
enum MACRO_GLX_PbufferClobber {GLX_PbufferClobber = 0,};
enum MACRO_IceAuthLockSuccess {IceAuthLockSuccess = 0,IceAuthLockError = 1,IceAuthLockTimeout = 2,};
enum MACRO_LastExtensionError {LastExtensionError = 255,};
enum MACRO_LbxTagTypeConnInfo {LbxTagTypeConnInfo = 5,};
enum MACRO_LbxTagTypeProperty {LbxTagTypeProperty = 3,LbxTagTypeFont = 4,};
enum MACRO_MAXFONTFILENAMELEN {MAXFONTFILENAMELEN = 1024,};
enum MACRO_MappingNotifyEvent {lbxsz_MappingNotifyEvent = 8,lbxupsz_MappingNotifyEvent = 7,};
enum MACRO_NeedWidePrototypes {NeedWidePrototypes = 0,};
enum MACRO_NotifyWhileGrabbed {NotifyWhileGrabbed = 3,};
enum MACRO_PictOpConjointAtop {PictOpConjointAtop = 0x29,};
enum MACRO_PictOpConjointOver {PictOpConjointOver = 0x23,};
enum MACRO_PictOpDisjointAtop {PictOpDisjointAtop = 0x19,};
enum MACRO_PictOpDisjointOver {PictOpDisjointOver = 0x13,};
enum MACRO_PictStandardARGB32 {PictStandardARGB32 = 0,PictStandardRGB24 = 1,PictStandardA8 = 2,};
enum MACRO_RRSetConfigSuccess {RRSetConfigSuccess = 0,RRSetConfigInvalidConfigTime = 1,RRSetConfigInvalidTime = 2,};
enum MACRO_RenderNumberErrors {RenderNumberErrors = 5,};
enum MACRO_ResizeRequestEvent {lbxsz_ResizeRequestEvent = 12,lbxupsz_ResizeRequestEvent = 12,};
enum MACRO_SIOCSIFHWBROADCAST {SIOCSIFHWBROADCAST = 0x8937,};
enum MACRO_ScreenSaverBlanked {ScreenSaverBlanked = 0,ScreenSaverInternal = 1,ScreenSaverExternal = 2,};
enum MACRO_SmRestartIfRunning {SmRestartIfRunning = 0,SmRestartAnyway = 1,SmRestartImmediately = 2,};
enum MACRO_XCMiscMinorVersion {XCMiscMinorVersion = 1,};
enum MACRO_XCMiscNumberErrors {XCMiscNumberErrors = 0,XCMiscMajorVersion = 1,};
enum MACRO_XCMiscNumberEvents {XCMiscNumberEvents = 0,};
enum MACRO_XConverterNotFound {XConverterNotFound = -3,};
enum MACRO_XETrapColorReplies {XETrapColorReplies = 13,};
enum MACRO_XETrapVectorEvents {XETrapVectorEvents = 12,};
enum MACRO_XFixesCursorNotify {XFixesCursorNotify = 1,};
enum MACRO_XSyncCounterNotify {XSyncCounterNotify = 0,XSyncAlarmNotify = 1,XSyncAlarmNotifyMask = 2,};
enum MACRO_XTestCurrentCursor {XTestCurrentCursor = 1,};
enum MACRO_X_XCMiscGetVersion {X_XCMiscGetVersion = 0,X_XCMiscGetXIDRange = 1,X_XCMiscGetXIDList = 2,};
enum MACRO_X_XDGAQueryVersion {X_XDGAQueryVersion = 0,X_XDGAQueryModes = 12,X_XDGASetMode = 13,X_XDGASetViewport = 14,X_XDGAInstallColormap = 15,X_XDGASelectInput = 16,X_XDGAFillRectangle = 17,X_XDGACopyArea = 18,X_XDGACopyTransparentArea = 19,X_XDGAGetViewportStatus = 20,X_XDGASync = 21,X_XDGAOpenFramebuffer = 22,X_XDGACloseFramebuffer = 23,X_XDGASetClientVersion = 24,X_XDGAChangePixmapMode = 25,X_XDGACreateColormap = 26,};
enum MACRO_X_XResQueryVersion {X_XResQueryVersion = 0,X_XResQueryClients = 1,X_XResQueryClientResources = 2,X_XResQueryClientPixmapBytes = 3,};
enum MACRO_X_XcupQueryVersion {X_XcupQueryVersion = 0,X_XcupGetReservedColormapEntries = 1,X_XcupStoreColors = 2,};
enum MACRO_XagNappGroupLeader {XagNappGroupLeader = 6,};
enum MACRO_XagWindowTypeWin16 {XagWindowTypeWin16 = 3,};
enum MACRO_XawTextSearchError {XawTextSearchError = -12345,};
enum MACRO_XkbAllControlsMask {XkbAllControlsMask = 0xF8001FFF,};
enum MACRO_XkbAllExplicitMask {XkbAllExplicitMask = 0xFF,};
enum MACRO_XkbCompatMapNotify {XkbCompatMapNotify = 7,XkbBellNotify = 8,};
enum MACRO_XkbGeomMaxPriority {XkbGeomMaxPriority = 255,};
enum MACRO_XkbMaxLegalKeyCode {XkbMaxLegalKeyCode = 255,};
enum MACRO_XkbMinLegalKeyCode {XkbMinLegalKeyCode = 8,};
enum MACRO_XkmIndicatorsIndex {XkmIndicatorsIndex = 3,XkmKeyNamesIndex = 4,};
enum MACRO_XlibDisplayIOError {XlibDisplayIOError = 1,XlibDisplayClosing = 2,XlibDisplayNoXkb = 4,XlibDisplayPrivSync = 8,XlibDisplayProcConni = 16,XlibDisplayReadEvents = 32,};
enum MACRO_XtExposeNoCompress {XtExposeNoCompress = 0,XtExposeCompressSeries = 1,XtExposeCompressMultiple = 2,};
enum MACRO_XtVersionDontCheck {XtVersionDontCheck = 0,};
enum MACRO__XkbErrBadFileType {_XkbErrBadFileType = 20,};
enum MACRO__XkbErrBadTypeName {_XkbErrBadTypeName = 18,};
enum MACRO__XkbErrXReqFailure {_XkbErrXReqFailure = 25,};
enum MACRO__deviceButtonPress {_deviceButtonPress = 0,_deviceButtonRelease = 1,};
enum MACRO__deviceStateNotify {_deviceStateNotify = 0,_deviceMappingNotify = 1,_changeDeviceNotify = 2,};
enum MACRO_sz_xMbufBufferInfo {sz_xMbufBufferInfo = 8,sz_xMbufGetBufferVersionReq = 4,sz_xMbufGetBufferVersionReply = 32,sz_xMbufCreateImageBuffersReq = 12,sz_xMbufCreateImageBuffersReply = 32,sz_xMbufDestroyImageBuffersReq = 8,sz_xMbufDisplayImageBuffersReq = 8,sz_xMbufSetMBufferAttributesReq = 12,sz_xMbufGetMBufferAttributesReq = 8,sz_xMbufGetMBufferAttributesReply = 32,sz_xMbufSetBufferAttributesReq = 12,sz_xMbufGetBufferAttributesReq = 8,sz_xMbufGetBufferAttributesReply = 32,sz_xMbufGetBufferInfoReq = 8,sz_xMbufGetBufferInfoReply = 32,sz_xMbufCreateStereoWindowReq = 44,sz_xMbufClearImageBufferAreaReq = 20,};
typedef struct _OverrideShellClassRec *OverrideShellWidgetClass;
typedef void (*PFNGLFLUSHRASTERSGIXPROC)(void);
typedef void (*PFNGLUNLOCKARRAYSEXTPROC)(void);
typedef struct _TopLevelShellClassRec *TopLevelShellWidgetClass;
typedef struct WBXMLConvWBXML2XMLParams_s WBXMLConvWBXML2XMLParams;
typedef struct WBXMLConvXML2WBXMLParams_s WBXMLConvXML2WBXMLParams;
enum WBXMLEncoderXMLGenType_e {WBXML_ENCODER_XML_GEN_COMPACT = 0x0,WBXML_ENCODER_XML_GEN_INDENT = 0x1,WBXML_ENCODER_XML_GEN_CANONICAL = 0x2,};
typedef struct _604D81E4FA484317851D2FA1962E3052 XChangeDeviceNotifyEvent;
typedef struct _6891B45CD5C184FEB200E38CDC4FE1A6 XDeviceResolutionControl;
typedef struct _D8169209A0BDD9CFFFA27C4AE6C5DFD0 XFixesCursorImageAndName;
typedef int (*XML_NotStandaloneHandler)(void *userData);
typedef struct _XRenderPictureAttributes XRenderPictureAttributes;
typedef struct _6D6F1B3E2508C3E8FAF2245CB1C669E1 *XawTextLineTableEntryPtr;
typedef struct _90F4279CED75C32CE4133781567FE5DA XdbeBackBufferAttributes;
typedef struct _EA6E221180A88D0F80F7EA618755CCA9 XmbufSetBufferAttributes;
typedef struct _4E8A4C7FC2C9452EEDB2A455AEE467A8 XmbufSetWindowAttributes;
struct _XkbDeviceValuatorAction {unsigned char type;unsigned char device;unsigned char v1_what;unsigned char v1_ndx;unsigned char v1_value;unsigned char v2_what;unsigned char v2_ndx;unsigned char v2_value;};
typedef struct _6AA03524D3DE094A4520E6B853ADD0D3 __GLXColorSubTableHeader;
typedef struct _BF2EA9C081140064A68778B10C033DD0 __GLXtexImageLargeHeader;
typedef struct _EF7BB4E5444BE1EDC70E587EA13D8BB4 __GLXtexSubImage3DHeader;
struct __pthread_internal_slist {struct __pthread_internal_slist *__next;};
enum bfd_link_hash_table_type {bfd_link_generic_hash_table = 0x0,bfd_link_elf_hash_table = 0x1,};
struct ipx_interface_definition {unsigned int ipx_network;unsigned char ipx_device[16];unsigned char ipx_dlink_type;unsigned char ipx_special;unsigned char ipx_node[6];};
typedef struct _36DE37CB51FE5E11DEB44C8315B704E8 lbxQuickMotionDeltaEvent;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smRegisterClientReplyMsg;
typedef struct _94DE3FD15F99ADB1828A8006E569663B smSaveYourselfRequestMsg;
typedef void (*splay_tree_deallocate_fn)(void *, void *);
typedef struct _AppleWMDisableUpdate xAppleWMDisableUpdateReq;
typedef struct _AppleWMSetWindowMenu xAppleWMSetWindowMenuReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xChangeKeyboardDeviceReq;
typedef struct _C19E6F380814408DFD31968534DDA3C5 xChangePointerControlReq;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xDamageQueryVersionReply;
typedef struct GLXJoinSwapGroupSGIX xGLXJoinSwapGroupSGIXReq;
typedef struct GLXQueryServerString xGLXQueryServerStringReq;
typedef struct _092DD72AC6B9BBA1C79AF097B6F8E844 xGetFeedbackControlReply;
typedef struct _A35F2E1A5E531ECFC152E2BA15F78A6A xGetKeyboardControlReply;
typedef struct _E5FEC4B44082A4B8B21FC86BB58EB49C xGetKeyboardMappingReply;
typedef struct _0702AFAE85E523028461380896C86760 xGetModifierMappingReply;
typedef struct _LbxBeginLargeRequest xLbxBeginLargeRequestReq;
typedef struct _LbxGetWinAttrAndGeom xLbxGetWinAttrAndGeomReq;
typedef struct _DD90A90D33B6DCFC05E4E875B7D49A5E xMbufGetBufferVersionReq;
typedef struct _4C65BE1067297C4FADB11C7C25C29C00 xPrintGetAttributesReply;
typedef struct _PrintGetDocumentData xPrintGetDocumentDataReq;
typedef struct _PrintGetOneAttribute xPrintGetOneAttributeReq;
typedef struct _D498926E8696BF91244D867CE73FD66E xPrintInputSelectedReply;
typedef struct _PrintPutDocumentData xPrintPutDocumentDataReq;
typedef struct _AB98B12C01F884E8BC2DC3D07B35D622 xRR1_0SetScreenConfigReq;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordDisableContextReq;
typedef struct _B16FC8566897364FB8F68A61B8D500EB xRecordQueryVersionReply;
typedef struct _B700DEC12E3C3D556A5FC194447E1A6E xRenderCreateGlyphSetReq;
typedef struct _7A75335468D0F989B2CF91A04174818E xRenderFillRectanglesReq;
typedef struct _9B9FAE43572AF8916E11706D7ECE195D xRenderQueryFiltersReply;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xRenderQueryVersionReply;
typedef struct _ScreenSaverQueryInfo xScreenSaverQueryInfoReq;
typedef struct _A4DBC252F7392490EC4C7D58273D4CD1 xSecurityQueryVersionReq;
typedef struct _8BD856D0EABB45DC0AE6203B505E4C05 xSelectExtensionEventReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xSetDeviceValuatorsReply;
typedef struct _3FC3C3386C6C3548296DFC9EB081B6FE xShapeGetRectanglesReply;
typedef struct _B030971557B6948BCB07CDE1436E426E xShapeInputSelectedReply;
typedef struct _8AC915922B7872008F9FA0F659707AB7 xTestQueryInputSizeReply;
typedef struct _WindowsWMSelectInput xWindowsWMSelectInputReq;
typedef struct _8D276D88AE7A52B5A0CD113CDF9731AA xXDGAChangePixmapModeReq;
typedef struct _XDGACloseFramebuffer xXDGACloseFramebufferReq;
typedef struct _XDGASetClientVersion xXDGASetClientVersionReq;
typedef struct _XF86BigfontQueryFont xXF86BigfontQueryFontReq;
typedef struct _XF86MiscGetFilePaths xXF86MiscGetFilePathsReq;
typedef struct _XF86MiscQueryVersion xXF86MiscQueryVersionReq;
typedef struct _D91B7973290C063AF6BE980DDFB9E8E4 xXF86RushLockPixmapReply;
typedef struct _XF86RushQueryVersion xXF86RushQueryVersionReq;
typedef struct _XF86RushUnlockPixmap xXF86RushUnlockPixmapReq;
typedef struct _2E67F07AE07052B8E2E5530980B63AB8 xXFixesCursorNotifyEvent;
typedef struct _3DD3CD96FAD56E1211E0F63114C705EF xXFixesGetCursorImageReq;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xXFixesQueryVersionReply;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesSubtractRegionReq;
typedef struct _E98D3537A10D6D7A36EB2CF02D2A733B xXTestCompareCursorReply;
typedef struct _4496CBA88907C11C6361D9179E75F570 xXineramaQueryScreensReq;
struct xcb_alloc_color_cookie_t {unsigned int sequence;};
struct xcb_coloritem_iterator_t {xcb_coloritem_t *data;int rem;int index;};
enum xcb_composite_redirect_t {XCB_COMPOSITE_REDIRECT_AUTOMATIC = 0x0,XCB_COMPOSITE_REDIRECT_MANUAL = 0x1,};
struct xcb_glx_is_list_cookie_t {unsigned int sequence;};
struct xcb_intern_atom_cookie_t {unsigned int sequence;};
typedef xcb_enter_notify_event_t xcb_leave_notify_event_t;
struct xcb_rectangle_iterator_t {xcb_rectangle_t *data;int rem;int index;};
enum xcb_send_request_flags_t {XCB_REQUEST_CHECKED = 0x1,XCB_REQUEST_RAW = 0x2,XCB_REQUEST_DISCARD_REPLY = 0x4,};
struct xcb_timecoord_iterator_t {xcb_timecoord_t *data;int rem;int index;};
struct xcb_xevie_start_cookie_t {unsigned int sequence;};
struct xcb_xv_format_iterator_t {xcb_xv_format_t *data;int rem;int index;};
typedef struct _xkbExtensionDeviceNotify xkbExtensionDeviceNotify;
typedef struct _xkbKTSetMapEntryWireDesc xkbKTSetMapEntryWireDesc;
typedef struct _9A02475B75BDC9A6C1FC81F46F9E4217 xvQueryPortAttributesReq;
typedef struct _D91C2DCC69F66A043F2E243F7B809339 xvmcDestroySubpictureReq;
typedef struct _2C727585251F722E1CFA636B2B0D134C *CompositeClassExtension;
typedef struct FT_Incremental_FuncsRec_ FT_Incremental_FuncsRec;
typedef struct _AFBA3BFF93393526E752507E8910BD40 GLXHyperpipeNetworkSGIX;
typedef struct _JAWT_DrawingSurfaceInfo JAWT_DrawingSurfaceInfo;
enum MACRO_AppleWMNextWindow {AppleWMNextWindow = 11,};
enum MACRO_AsyncOtherDevices {AsyncOtherDevices = 3,AsyncAll = 4,};
enum MACRO_AutoRepeatModeOff {AutoRepeatModeOff = 0,AutoRepeatModeOn = 1,AutoRepeatModeDefault = 2,};
enum MACRO_BadImplementation {BadImplementation = 17,FirstExtensionError = 128,};
enum MACRO_BellFeedbackClass {BellFeedbackClass = 5,};
enum MACRO_CILEN_PREDICTOR_2 {CILEN_PREDICTOR_2 = 2,};
enum MACRO_CreateNotifyEvent {lbxsz_CreateNotifyEvent = 24,lbxupsz_CreateNotifyEvent = 23,};
enum MACRO_DvKeyClickPercent {DvKeyClickPercent = 1,DvPercent = 2,DvPitch = 4,DvDuration = 8,DvLed = 16,DvLedMode = 32,DvKey = 64,DvAutoRepeatMode = 128,};
enum MACRO_KBKeyClickPercent {KBKeyClickPercent = 1,KBBellPercent = 2,KBBellPitch = 4,KBBellDuration = 8,KBLed = 16,KBLedMode = 32,KBKey = 64,KBAutoRepeatMode = 128,};
enum MACRO_LbxFreeCellsEvent {LbxFreeCellsEvent = 9,};
enum MACRO_NotifyPointerRoot {NotifyPointerRoot = 6,};
enum MACRO_NullFontDirectory {NullFontDirectory = 0,};
enum MACRO_PictOpAtopReverse {PictOpAtopReverse = 10,};
enum MACRO_PictOpConjointDst {PictOpConjointDst = 0x22,};
enum MACRO_PictOpConjointOut {PictOpConjointOut = 0x27,};
enum MACRO_PictOpConjointSrc {PictOpConjointSrc = 0x21,};
enum MACRO_PictOpConjointXor {PictOpConjointXor = 0x2B,};
enum MACRO_PictOpDisjointDst {PictOpDisjointDst = 0x12,};
enum MACRO_PictOpDisjointOut {PictOpDisjointOut = 0x17,};
enum MACRO_PictOpDisjointSrc {PictOpDisjointSrc = 0x11,};
enum MACRO_PictOpDisjointXor {PictOpDisjointXor = 0x1B,};
enum MACRO_PixmapColorFailed {PixmapColorFailed = -4,};
enum MACRO_PixmapFileInvalid {PixmapFileInvalid = -2,};
enum MACRO_RRSetConfigFailed {RRSetConfigFailed = 3,};
enum MACRO_SIOCRSGFACILITIES {SIOCRSGFACILITIES = 35302,};
enum MACRO_ScreenSaverNotify {ScreenSaverNotify = 0,ScreenSaverNumberEvents = 1,};
enum MACRO_TCPOLEN_TIMESTAMP {TCPOLEN_TIMESTAMP = 10,TCPOLEN_TSTAMP_APPA = 12,};
enum MACRO_WindowsWMIsActive {WindowsWMIsActive = 0,WindowsWMIsInactive = 1,};
enum MACRO_XDGAFlipImmediate {XDGAFlipImmediate = 0x1,XDGAFlipRetrace = 0x2,};
enum MACRO_XF86Bigfont_FLAGS {XF86Bigfont_FLAGS_Shm = 1,};
enum MACRO_XIMPreeditUnKnown {XIMPreeditUnKnown = 0,XIMPreeditEnable = 1,XIMPreeditDisable = 2,};
enum MACRO_XI_DeviceValuator {XI_DeviceValuator = 0,XI_DeviceKeyPress = 1,XI_DeviceKeyRelease = 2,XI_DeviceButtonPress = 3,XI_DeviceButtonRelease = 4,XI_DeviceMotionNotify = 5,XI_DeviceFocusIn = 6,XI_DeviceFocusOut = 7,XI_ProximityIn = 8,XI_ProximityOut = 9,XI_DeviceStateNotify = 10,XI_DeviceMappingNotify = 11,XI_ChangeDeviceNotify = 12,XI_DeviceKeystateNotify = 13,XI_DeviceButtonstateNotify = 14,};
enum MACRO_XRecordAllClients {XRecordAllClients = 3,};
enum MACRO_XRecordBadContext {XRecordBadContext = 0,XRecordFromServerTime = 1,XRecordFromClientTime = 2,XRecordFromClientSequence = 4,};
enum MACRO_XRecordClientDied {XRecordClientDied = 3,XRecordStartOfData = 4,};
enum MACRO_XRecordFromServer {XRecordFromServer = 0,XRecordFromClient = 1,XRecordClientStarted = 2,};
enum MACRO_XSyncNumberEvents {XSyncNumberEvents = 2,};
enum MACRO_XTestMinorVersion {XTestMinorVersion = 2,};
enum MACRO_XTestNumberErrors {XTestNumberErrors = 0,XTestMajorVersion = 2,};
enum MACRO_XTestNumberEvents {XTestNumberEvents = 0,};
enum MACRO_X_DMXQueryVersion {X_DMXQueryVersion = 0,X_DMXGetScreenCount = 1,X_DMXGetScreenInformationDEPRECATED = 2,X_DMXGetWindowAttributes = 3,X_DMXGetInputCount = 4,X_DMXGetInputAttributes = 5,X_DMXForceWindowCreationDEPRECATED = 6,X_DMXReconfigureScreenDEPRECATED = 7,X_DMXSync = 8,X_DMXForceWindowCreation = 9,X_DMXGetScreenAttributes = 10,X_DMXChangeScreensAttributes = 11,X_DMXAddScreen = 12,X_DMXRemoveScreen = 13,X_DMXGetDesktopAttributes = 14,X_DMXChangeDesktopAttributes = 15,X_DMXAddInput = 16,X_DMXRemoveInput = 17,};
enum MACRO_X_EVIQueryVersion {X_EVIQueryVersion = 0,X_EVIGetVisualInfo = 1,};
enum MACRO_X_LbxQueryVersion {X_LbxQueryVersion = 0,X_LbxStartProxy = 1,X_LbxStopProxy = 2,X_LbxSwitch = 3,X_LbxNewClient = 4,X_LbxCloseClient = 5,X_LbxModifySequence = 6,X_LbxAllowMotion = 7,X_LbxIncrementPixel = 8,X_LbxDelta = 9,X_LbxGetModifierMapping = 10,X_LbxInvalidateTag = 12,X_LbxPolyPoint = 13,X_LbxPolyLine = 14,X_LbxPolySegment = 15,X_LbxPolyRectangle = 16,X_LbxPolyArc = 17,X_LbxFillPoly = 18,X_LbxPolyFillRectangle = 19,X_LbxPolyFillArc = 20,X_LbxGetKeyboardMapping = 21,X_LbxQueryFont = 22,X_LbxChangeProperty = 23,X_LbxGetProperty = 24,X_LbxTagData = 25,X_LbxCopyArea = 26,X_LbxCopyPlane = 27,X_LbxPolyText8 = 28,X_LbxPolyText16 = 29,X_LbxImageText8 = 30,X_LbxImageText16 = 31,X_LbxQueryExtension = 32,X_LbxPutImage = 33,X_LbxGetImage = 34,X_LbxBeginLargeRequest = 35,X_LbxLargeRequestData = 36,X_LbxEndLargeRequest = 37,X_LbxInternAtoms = 38,X_LbxGetWinAttrAndGeom = 39,X_LbxGrabCmap = 40,X_LbxReleaseCmap = 41,X_LbxAllocColor = 42,X_LbxSync = 43,};
enum MACRO_X_ShmQueryVersion {X_ShmQueryVersion = 0,X_ShmAttach = 1,X_ShmDetach = 2,X_ShmPutImage = 3,X_ShmGetImage = 4,X_ShmCreatePixmap = 5,};
enum MACRO_X_XTestGetVersion {X_XTestGetVersion = 0,X_XTestCompareCursor = 1,X_XTestFakeInput = 2,X_XTestGrabControl = 3,};
enum MACRO_X_XagQueryVersion {X_XagQueryVersion = 0,X_XagCreate = 1,X_XagDestroy = 2,X_XagGetAttr = 3,X_XagQuery = 4,X_XagCreateAssoc = 5,X_XagDestroyAssoc = 6,};
enum MACRO_XawShapeRectangle {XawShapeRectangle = 1,XawShapeOval = 2,};
enum MACRO_XevieNumberErrors {XevieNumberErrors = 0,};
enum MACRO_XkbControlsNotify {XkbControlsNotify = 3,XkbIndicatorStateNotify = 4,};
enum MACRO_XkbMaxRadioGroups {XkbMaxRadioGroups = 32,};
enum MACRO_XkbNoModifierMask {XkbNoModifierMask = 0,XkbAllModifiersMask = 255,};
enum MACRO_XkbRepeatKeysMask {XkbRepeatKeysMask = 1,XkbSlowKeysMask = 2,XkbBounceKeysMask = 4,XkbStickyKeysMask = 8,XkbMouseKeysMask = 16,XkbMouseKeysAccelMask = 32,XkbAccessXKeysMask = 64,XkbAccessXTimeoutMask = 128,XkbAccessXFeedbackMask = 256,XkbAudibleBellMask = 512,XkbOverlay1Mask = 1024,XkbOverlay2Mask = 2048,XkbIgnoreGroupLockMask = 4096,XkbGroupsWrapMask = 134217728,XkbInternalModsMask = 268435456,XkbIgnoreLockModsMask = 536870912,XkbPerKeyRepeatMask = 1073741824,XkbControlsEnabledMask = 2147483648,};
enum MACRO_XkbSetMapAllFlags {XkbSetMapAllFlags = 0x3,};
enum MACRO_XkmAllIndicesMask {XkmAllIndicesMask = 0x7F,};
enum MACRO_XkmKeymapRequired {XkmKeymapRequired = 23,XkmKeymapOptional = 104,};
enum MACRO_XkmLayoutRequired {XkmLayoutRequired = 21,XkmLayoutOptional = 96,};
enum MACRO_XkmLegalIndexMask {XkmLegalIndexMask = 0x7F,};
enum MACRO_XkmSemanticsLegal {XkmSemanticsLegal = 75,};
enum MACRO_XmuShapeRectangle {XmuShapeRectangle = 1,XmuShapeOval = 2,};
enum MACRO_XpmIncludeVersion {XpmIncludeVersion = 30411,};
enum MACRO_XpmPixmapNoMemory {XpmPixmapNoMemory = -3,};
enum MACRO_XpmReturnComments {XpmReturnComments = 256,XpmUndefPixel = -2147483648,};
enum MACRO__deviceButtonGrab {_deviceButtonGrab = 7,_deviceOwnerGrabButton = 8,};
enum MACRO__noExtensionEvent {_noExtensionEvent = 9,};
enum MACRO_sz_fsBitmapFormat {sz_fsBitmapFormat = 4,};
typedef struct _985C3B0B1950C24006043DC21969E304 ObjectClassExtensionRec;
typedef struct _SessionShellClassRec *SessionShellWidgetClass;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F TransientShellClassPart;
typedef struct _B278447F4BA50B253C16979F98AB98A4 ViewportConstraintsPart;
typedef void (*WBXMLEndDocumentHandler)(void *ctx);
typedef struct _1D94229A8023420ECF1EF35EE55259C6 XDeviceFocusChangeEvent;
typedef struct _C96B45266D904955FF5B1BE5BB2CC4AC XDeviceStateNotifyEvent;
typedef struct _5E771194B47AF17C9267085CABF953C3 XETrapGetLastInpTimeRep;
typedef struct _44FE0B4DD8D897C404C5F698855C1F5D XFixesCursorNotifyEvent;
typedef struct _XIMStringConversionText XIMStringConversionText;
typedef unsigned short XIMStringConversionType;
typedef struct _0127D00A1E42427D1F922D6E02BD29BF XIntegerFeedbackControl;
typedef struct _A6F99021C670370B88B165D4DC414CDD XScreenSaverNotifyEvent;
typedef struct _2881F4C235E25C1F32ED86388B1D309E XSyncCounterNotifyEvent;
typedef struct XawVendorShellExtRec *XawVendorShellExtWidget;
typedef struct _XkbCompatMapNotify XkbCompatMapNotifyEvent;
typedef struct _XkbDeviceValuatorAction XkbDeviceValuatorAction;
typedef struct _XkbIndicatorNotify XkbIndicatorNotifyEvent;
typedef struct _A952ABD3B0337785ED8C31FE9C2AE823 XmbufClobberNotifyEvent;
typedef struct _1E0D006DA5A3AB615AC2957B38222DF2 *XpuMediumSourceSizeList;
typedef struct _1DA914B8AB142FCB959C2D9AF0891F55 _IceProtoSetupToYouInfo;
struct _XRRScreenConfiguration;
struct __pthread_cleanup_frame {void (*__cancel_routine)(void *);void *__cancel_arg;int __do_it;int __cancel_type;};
struct _pthread_cleanup_buffer {void (*__routine)(void *);void *__arg;int __canceltype;struct _pthread_cleanup_buffer *__prev;};
enum demangle_component_type {DEMANGLE_COMPONENT_NAME = 0x0,DEMANGLE_COMPONENT_QUAL_NAME = 0x1,DEMANGLE_COMPONENT_LOCAL_NAME = 0x2,DEMANGLE_COMPONENT_TYPED_NAME = 0x3,DEMANGLE_COMPONENT_TEMPLATE = 0x4,DEMANGLE_COMPONENT_TEMPLATE_PARAM = 0x5,DEMANGLE_COMPONENT_CTOR = 0x6,DEMANGLE_COMPONENT_DTOR = 0x7,DEMANGLE_COMPONENT_VTABLE = 0x8,DEMANGLE_COMPONENT_VTT = 0x9,DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE = 0xA,DEMANGLE_COMPONENT_TYPEINFO = 0xB,DEMANGLE_COMPONENT_TYPEINFO_NAME = 0xC,DEMANGLE_COMPONENT_TYPEINFO_FN = 0xD,DEMANGLE_COMPONENT_THUNK = 0xE,DEMANGLE_COMPONENT_VIRTUAL_THUNK = 0xF,DEMANGLE_COMPONENT_COVARIANT_THUNK = 0x10,DEMANGLE_COMPONENT_JAVA_CLASS = 0x11,DEMANGLE_COMPONENT_GUARD = 0x12,DEMANGLE_COMPONENT_REFTEMP = 0x13,DEMANGLE_COMPONENT_HIDDEN_ALIAS = 0x14,DEMANGLE_COMPONENT_SUB_STD = 0x15,DEMANGLE_COMPONENT_RESTRICT = 0x16,DEMANGLE_COMPONENT_VOLATILE = 0x17,DEMANGLE_COMPONENT_CONST = 0x18,DEMANGLE_COMPONENT_RESTRICT_THIS = 0x19,DEMANGLE_COMPONENT_VOLATILE_THIS = 0x1A,DEMANGLE_COMPONENT_CONST_THIS = 0x1B,DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL = 0x1C,DEMANGLE_COMPONENT_POINTER = 0x1D,DEMANGLE_COMPONENT_REFERENCE = 0x1E,DEMANGLE_COMPONENT_COMPLEX = 0x1F,DEMANGLE_COMPONENT_IMAGINARY = 0x20,DEMANGLE_COMPONENT_BUILTIN_TYPE = 0x21,DEMANGLE_COMPONENT_VENDOR_TYPE = 0x22,DEMANGLE_COMPONENT_FUNCTION_TYPE = 0x23,DEMANGLE_COMPONENT_ARRAY_TYPE = 0x24,DEMANGLE_COMPONENT_PTRMEM_TYPE = 0x25,DEMANGLE_COMPONENT_ARGLIST = 0x26,DEMANGLE_COMPONENT_TEMPLATE_ARGLIST = 0x27,DEMANGLE_COMPONENT_OPERATOR = 0x28,DEMANGLE_COMPONENT_EXTENDED_OPERATOR = 0x29,DEMANGLE_COMPONENT_CAST = 0x2A,DEMANGLE_COMPONENT_UNARY = 0x2B,DEMANGLE_COMPONENT_BINARY = 0x2C,DEMANGLE_COMPONENT_BINARY_ARGS = 0x2D,DEMANGLE_COMPONENT_TRINARY = 0x2E,DEMANGLE_COMPONENT_TRINARY_ARG1 = 0x2F,DEMANGLE_COMPONENT_TRINARY_ARG2 = 0x30,DEMANGLE_COMPONENT_LITERAL = 0x31,DEMANGLE_COMPONENT_LITERAL_NEG = 0x32,};
typedef struct _FF9246841A32B78E17B3644398C154C0 deviceButtonStateNotify;
enum ieee1284_transfer_flags {F1284_NONBLOCK = 0x1,F1284_SWE = 0x4,F1284_RLE = 0x8,F1284_FASTEPP = 0x10,};
typedef struct _101ED56796A31C5C092EFC61C0F81522 smSaveYourselfPhase2Msg;
typedef struct _AppleWMFrameGetRect xAppleWMFrameGetRectReq;
typedef struct _AppleWMFrameHitTest xAppleWMFrameHitTestReq;
typedef struct _AppleWMQueryVersion xAppleWMQueryVersionReq;
typedef struct _BCDE0020825236A8F8A72B60AFA7374C xChangeDeviceControlReq;
typedef struct _AD58CDA99C93F34C31A743157D5C3E5C xChangePointerDeviceReq;
typedef struct _DC32A0924BDC2649CEA8C5E8AC72EF13 xCopyColormapAndFreeReq;
typedef struct _D9975735FE375B63E13B12CE4075213A xDMXGetScreenCountReply;
typedef struct _53299512E10B7C26B66BF0D6C299D662 xDeviceTSCalibrationCtl;
typedef struct GLXCreateNewContext xGLXCreateNewContextReq;
typedef struct GLXDestroyGLXPixmap xGLXDestroyGLXPixmapReq;
typedef struct GLXGetFBConfigsSGIX xGLXGetFBConfigsSGIXReq;
typedef struct GLXGetVisualConfigs xGLXGetVisualConfigsReq;
typedef struct _8222826D686B50CB8E41460EE2275F07 xGLXPbufferClobberEvent;
typedef struct _6C8DA88AE0F795AA91A7651F5464995D xGetDeviceKeyMappingReq;
typedef struct _EF15DCB28339270802C69A46485DD45C xGetExtensionVersionReq;
typedef struct _019CECDD6753AAB6598130682127E88A xGetPointerControlReply;
typedef struct _F38DCD124B444AE28722F96474B80F5D xGetPointerMappingReply;
typedef struct _286A111ACEDB435E271A47289B65D34E xGetSelectionOwnerReply;
typedef struct _E63B05C5B736EEB1B492508D1A96BE3C xLbxChangePropertyReply;
typedef struct _LbxLargeRequestData xLbxLargeRequestDataReq;
typedef struct _LbxQueryExtensionReply xLbxQueryExtensionReply;
typedef struct _92276D725373BB3B16F8CB5C6778E662 xListFontsWithInfoReply;
typedef struct _62E4225A05F3FA192F1EADC1962F3FA7 xMbufClobberNotifyEvent;
typedef struct _BB307DE81D005F0ABA15BB97E20A0808 xMbufGetBufferInfoReply;
typedef struct _D467916C3587874006E0A38FD04B2C07 xPanoramiXGetStateReply;
typedef struct _PrintDestroyContext xPrintDestroyContextReq;
typedef struct _PrintGetPrinterList xPrintGetPrinterListReq;
typedef struct _DAEBDFCF6641BEDF5371E5E95CD6FE55 xPrintQueryScreensReply;
typedef struct _884E74C734502FDAE5886BDFF852D3B6 xPrintQueryVersionReply;
typedef struct _3DAB27C0C642F6AD6A1592659EA9CCF3 xRRSetScreenConfigReply;
typedef struct _791AF81D366397FAE28AFC7E5E3FF4B5 xRecordCreateContextReq;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordEnableContextReq;
typedef struct _24F12A37FE1D1AEA7948B3C7A0452456 xRenderChangePictureReq;
typedef struct _B1BFEFE2106F3BB5718738D899DB0721 xRenderCreatePictureReq;
typedef struct _ScreenSaverNotify xScreenSaverNotifyEvent;
typedef struct _AAD518AFB58856180F72F894AD441DEE xShapeQueryExtentsReply;
typedef struct _7D044E98E295B1AE6D053F4E096E3E34 xShapeQueryVersionReply;
typedef struct _xSyncCounterNotifyEvent xSyncCounterNotifyEvent;
typedef struct _B3154DDC89CC03C065CC7D94E90D12B0 xXCMiscGetXIDRangeReply;
typedef struct _XDGAInstallColormap xXDGAInstallColormapReq;
typedef struct _XDGAOpenFramebuffer xXDGAOpenFramebufferReq;
typedef struct _6B16D0CDF8A6D24951AF7FC52FCEB99B xXF86DGAGetVidPageReply;
typedef struct _A365B987896F695263E94A4D93A744FD xXF86DGAGetVideoLLReply;
typedef struct _XF86DGAQueryVersion xXF86DGAQueryVersionReq;
typedef struct _XF86MiscPassMessage xXF86MiscPassMessageReq;
typedef struct _2FC2A6BC4D5C4BA98ABB1F848EBDDDCB xXF86OldVidModeModeInfo;
typedef struct _XF86RushSetCopyMode xXF86RushSetCopyModeReq;
typedef struct _XF86VidModeGetGamma xXF86VidModeGetGammaReq;
typedef struct _XF86VidModeSetGamma xXF86VidModeSetGammaReq;
typedef struct _019B8CCB864AFF4771EC3D9E3020C8B5 xXFixesChangeSaveSetReq;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesCombineRegionReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesDestroyRegionReq;
typedef struct _DA4CA76774A2C175F5D0B77BF61D79A2 xXFixesFetchRegionReply;
typedef struct _0490893E281F28CD04BB03B56188F30F xXFixesGetCursorNameReq;
typedef struct _5EC50BA61A7AE0BB02D4340472A7D806 xXFixesRegionExtentsReq;
typedef struct _D414AB5C490C563DD84DD380518CE003 xXFixesSetCursorNameReq;
typedef struct _EFD6C7D4777DD13E0B1CDD145692A98C xXevieQueryVersionReply;
struct xcb_charinfo_iterator_t {xcb_charinfo_t *data;int rem;int index;};
struct xcb_fontprop_iterator_t {xcb_fontprop_t *data;int rem;int index;};
enum xcb_get_property_type_t {XCB_GET_PROPERTY_TYPE_ANY = 0x0,};
struct xcb_glx_finish_cookie_t {unsigned int sequence;};
typedef xcb_key_press_event_t xcb_key_release_event_t;
struct xcb_list_fonts_cookie_t {unsigned int sequence;};
struct xcb_list_hosts_cookie_t {unsigned int sequence;};
struct xcb_query_font_cookie_t {unsigned int sequence;};
struct xcb_query_tree_cookie_t {unsigned int sequence;};
struct xcb_res_type_iterator_t {xcb_res_type_t *data;int rem;int index;};
enum xcb_screensaver_event_t {XCB_SCREENSAVER_EVENT_NOTIFY_MASK = 0x1,XCB_SCREENSAVER_EVENT_CYCLE_MASK = 0x2,};
enum xcb_screensaver_state_t {XCB_SCREENSAVER_STATE_OFF = 0x0,XCB_SCREENSAVER_STATE_ON = 0x1,XCB_SCREENSAVER_STATE_CYCLE = 0x2,XCB_SCREENSAVER_STATE_DISABLED = 0x3,};
typedef xcb_value_error_t xcb_shm_bad_seg_error_t;
struct xcb_xevie_send_cookie_t {unsigned int sequence;};
enum xcb_xv_attribute_flag_t {XCB_XV_ATTRIBUTE_FLAG_GETTABLE = 0x1,XCB_XV_ATTRIBUTE_FLAG_SETTABLE = 0x2,};
struct xcb_xv_image_iterator_t {xcb_xv_image_t *data;int rem;int index;};
typedef struct _xkbGetIndicatorMapReply xkbGetIndicatorMapReply;
typedef struct _xkbGetIndicatorState xkbGetIndicatorStateReq;
typedef struct _xkbGetNamedIndicator xkbGetNamedIndicatorReq;
typedef struct _xkbIndicatorMapWireDesc xkbIndicatorMapWireDesc;
typedef struct _xkbSetDebuggingFlags xkbSetDebuggingFlagsReq;
typedef struct _xkbSetNamedIndicator xkbSetNamedIndicatorReq;
typedef struct _xkbSymInterpretWireDesc xkbSymInterpretWireDesc;
typedef struct _0C5B3DDBD9AAB3637C3C3A1D41E42158 xvGetPortAttributeReply;
typedef struct _403017519C186A112CAA8988372FD914 xvListImageFormatsReply;
typedef struct _942EBE9ABD97793534DEB0950390C4AB xvmcCreateSubpictureReq;
typedef struct _B0A4657A0F832627789EEFA30E2C3FE8 xvmcListSurfaceTypesReq;
typedef struct _CFC98DDC8C48D7D4D5B40C9CE62D3BBC *ApplicationShellWidget;
typedef struct FT_Incremental_MetricsRec_ *FT_Incremental_Metrics;
typedef int (*FT_Raster_BitTest_Func)(int y, int x, void *user);
typedef struct _522CF4EE19F54DFCAFCA34FCD3871800 *FontCacheStatisticsPtr;
typedef struct _FontScaleAliasEntry *FontScaleAliasEntryPtr;
typedef struct _FontScaleAliasEntry FontScaleAliasEntryRec;
typedef struct _A2C7B4C52241BF95D2B2191B54C0B07A GLXPbufferClobberEvent;
enum MACRO_COMMAND_COMPLETE {COMMAND_COMPLETE = 0x0,};
enum MACRO_CirculateRequest {CirculateRequest = 27,};
enum MACRO_ConfigureRequest {ConfigureRequest = 23,};
enum MACRO_DPMSMinorVersion {DPMSMinorVersion = 1,};
enum MACRO_DPMSNumberErrors {DPMSNumberErrors = 0,DPMSMajorVersion = 1,};
enum MACRO_DPMSNumberEvents {DPMSNumberEvents = 0,};
enum MACRO_DamageNotifyMore {DamageNotifyMore = 0x80,};
enum MACRO_ELFOSABI_OPENVMS {ELFOSABI_OPENVMS = 13,ELFOSABI_NSK = 14,ELFOSABI_AROS = 15,};
enum MACRO_EXTENDED_MESSAGE {EXTENDED_MESSAGE = 0x1,EXTENDED_MODIFY_DATA_POINTER = 0x0,EXTENDED_SDTR = 0x1,EXTENDED_EXTENDED_IDENTIFY = 0x2,EXTENDED_WDTR = 0x3,};
enum MACRO_FREETYPE_VERSION {FREETYPE_VERSION = 2002002,};
enum MACRO_FT_VALIDATE_BASE {FT_VALIDATE_BASE = 0x100,FT_VALIDATE_GDEF = 0x200,FT_VALIDATE_GPOS = 0x400,FT_VALIDATE_GSUB = 0x800,FT_VALIDATE_JSTF = 0x1000,FT_VALIDATE_OT = 0x1F00,FT_ANGLE_PI = 0xB40000,FT_ANGLE_2PI = 0x1680000,FT_ANGLE_PI2 = 0x5A0000,FT_ANGLE_PI4 = 0x2D0000,FT_WinFNT_ID_CP1252 = 0x0,FT_WinFNT_ID_DEFAULT = 0x1,FT_WinFNT_ID_SYMBOL = 0x2,FT_WinFNT_ID_MAC = 0x4D,FT_WinFNT_ID_CP932 = 0x80,FT_WinFNT_ID_CP949 = 0x81,FT_WinFNT_ID_CP1361 = 0x82,FT_WinFNT_ID_CP936 = 0x86,FT_WinFNT_ID_CP950 = 0x88,FT_WinFNT_ID_CP1253 = 0xA1,FT_WinFNT_ID_CP1254 = 0xA2,FT_WinFNT_ID_CP1258 = 0xA3,FT_WinFNT_ID_CP1255 = 0xB1,FT_WinFNT_ID_CP1256 = 0xB2,FT_WinFNT_ID_CP1257 = 0xBA,FT_WinFNT_ID_CP1251 = 0xCC,FT_WinFNT_ID_CP874 = 0xDE,FT_WinFNT_ID_CP1250 = 0xEE,FT_WinFNT_ID_OEM = 0xFF,};
enum MACRO_KbdFeedbackClass {KbdFeedbackClass = 0,PtrFeedbackClass = 1,StringFeedbackClass = 2,};
enum MACRO_LOCALDOMAINPARTS {LOCALDOMAINPARTS = 2,};
enum MACRO_LbxTagTypeModmap {LbxTagTypeModmap = 1,LbxTagTypeKeymap = 2,};
enum MACRO_NorthEastGravity {NorthEastGravity = 3,WestGravity = 4,};
enum MACRO_NotifyDetailNone {NotifyDetailNone = 7,};
enum MACRO_NullFontRenderer {NullFontRenderer = 0,};
enum MACRO_PTHREAD_CANCELED {PTHREAD_CANCELED = -1,PTHREAD_ONCE_INIT = 0,PTHREAD_BARRIER_SERIAL_THREAD = -1,};
enum MACRO_PictOpConjointIn {PictOpConjointIn = 0x25,};
enum MACRO_PictOpDisjointIn {PictOpDisjointIn = 0x15,};
enum MACRO_PixmapColorError {PixmapColorError = 1,};
enum MACRO_PropertyNewValue {PropertyNewValue = 0,PropertyDelete = 1,};
enum MACRO_RectObjClassFlag {RectObjClassFlag = 0x2,WidgetClassFlag = 0x4,CompositeClassFlag = 0x8,ConstraintClassFlag = 0x10,ShellClassFlag = 0x20,WMShellClassFlag = 0x40,TopLevelClassFlag = 0x80,};
enum MACRO_SIOCATALKDIFADDR {SIOCATALKDIFADDR = 35296,};
enum MACRO_SIOCAX25GETPARMS {SIOCAX25GETPARMS = 35301,};
enum MACRO_SIOCAX25SETPARMS {SIOCAX25SETPARMS = 35302,};
enum MACRO_SIOCGIWENCODEEXT {SIOCGIWENCODEEXT = 0x8B35,};
enum MACRO_SIOCPROTOPRIVATE {SIOCPROTOPRIVATE = 0x89E0,};
enum MACRO_SIOCSIWENCODEEXT {SIOCSIWENCODEEXT = 0x8B34,};
enum MACRO_ScreenSaverReset {ScreenSaverReset = 0,ScreenSaverActive = 1,};
enum MACRO_SelectionRequest {SelectionRequest = 30,};
enum MACRO_SouthEastGravity {SouthEastGravity = 9,};
enum MACRO_SouthWestGravity {SouthWestGravity = 7,SouthGravity = 8,};
enum MACRO_UnmapNotifyEvent {lbxsz_UnmapNotifyEvent = 16,lbxupsz_UnmapNotifyEvent = 13,};
enum MACRO_VisibilityNotify {VisibilityNotify = 15,CreateNotify = 16,};
enum MACRO_XETrapCoreEvents {XETrapCoreEvents = 7,};
enum MACRO_XETrapGrabServer {XETrapGrabServer = 14,};
enum MACRO_XETrapMaxRequest {XETrapMaxRequest = 32,};
enum MACRO_XETrapStatistics {XETrapStatistics = 7,XETrapWinXY = 8,};
enum MACRO_XETrapTrapActive {XETrapTrapActive = 0,};
enum MACRO_XF86MiscNoModule {XF86MiscNoModule = 7,XF86MiscNumberErrors = 8,};
enum MACRO_XIMHotKeyStateON {XIMHotKeyStateON = 0x1,XIMHotKeyStateOFF = 0x2,};
enum MACRO_XPGetDocFinished {XPGetDocFinished = 0,XPGetDocSecondConsumer = 1,XPGetDocError = 2,};
enum MACRO_XPStartJobNotify {XPStartJobNotify = 0,XPEndJobNotify = 1,XPStartDocNotify = 2,};
enum MACRO_XRecordEndOfData {XRecordEndOfData = 5,};
enum MACRO_XSecurityTimeout {XSecurityTimeout = 1,XSecurityTrustLevel = 2,XSecurityGroup = 4,XSecurityEventMask = 8,};
enum MACRO_X_DPMSGetVersion {X_DPMSGetVersion = 0,X_DPMSCapable = 1,X_DPMSGetTimeouts = 2,X_DPMSSetTimeouts = 3,X_DPMSEnable = 4,X_DPMSDisable = 5,X_DPMSForceLevel = 6,X_DPMSInfo = 7,};
enum MACRO_X_RRQueryVersion {X_RRQueryVersion = 0,X_RROldGetScreenInfo = 1,X_RR1_0SetScreenConfig = 2,X_RRSetScreenConfig = 2,X_RROldScreenChangeSelectInput = 3,X_RRSelectInput = 4,X_RRGetScreenInfo = 5,};
enum MACRO_X_SyncInitialize {X_SyncInitialize = 0,X_SyncListSystemCounters = 1,X_SyncCreateCounter = 2,X_SyncSetCounter = 3,X_SyncChangeCounter = 4,X_SyncQueryCounter = 5,X_SyncDestroyCounter = 6,X_SyncAwait = 7,X_SyncCreateAlarm = 8,X_SyncChangeAlarm = 9,X_SyncQueryAlarm = 10,X_SyncDestroyAlarm = 11,X_SyncSetPriority = 12,X_SyncGetPriority = 13,};
enum MACRO_X_kbUseExtension {X_kbUseExtension = 0,X_kbSelectEvents = 1,X_kbBell = 3,X_kbGetState = 4,X_kbLatchLockState = 5,X_kbGetControls = 6,X_kbSetControls = 7,X_kbGetMap = 8,X_kbSetMap = 9,X_kbGetCompatMap = 10,X_kbSetCompatMap = 11,X_kbGetIndicatorState = 12,X_kbGetIndicatorMap = 13,X_kbSetIndicatorMap = 14,X_kbGetNamedIndicator = 15,X_kbSetNamedIndicator = 16,X_kbGetNames = 17,X_kbSetNames = 18,X_kbGetGeometry = 19,X_kbSetGeometry = 20,X_kbPerClientFlags = 21,X_kbListComponents = 22,X_kbGetKbdByName = 23,X_kbGetDeviceInfo = 24,X_kbSetDeviceInfo = 25,X_kbSetDebuggingFlags = 101,};
enum MACRO_XagNsingleScreen {XagNsingleScreen = 7,};
enum MACRO_XagWindowTypeX11 {XagWindowTypeX11 = 0,XagWindowTypeMacintosh = 1,XagWindowTypeWin32 = 2,};
enum MACRO_XawTextReadError {XawTextReadError = -1,};
enum MACRO_XawTextScanError {XawTextScanError = -1,};
enum MACRO_XcupNumberErrors {XcupNumberErrors = 0,};
enum MACRO_XkbAccessXNotify {XkbAccessXNotify = 10,};
enum MACRO_XkbActionMessage {XkbActionMessage = 9,};
enum MACRO_XkbAllCompatMask {XkbAllCompatMask = 0x3,};
enum MACRO_XkbAllEventsMask {XkbAllEventsMask = 0xFFF,};
enum MACRO_XkbAllGroupsMask {XkbAllGroupsMask = 0xF,};
enum MACRO_XkbClientMapMask {XkbClientMapMask = 1,XkbServerMapMask = 2,XkbCompatMapMask = 4,XkbIndicatorMapMask = 8,XkbNamesMask = 16,XkbGeometryMask = 32,XkbControlsMask = 64,};
enum MACRO_XkbKeyNameLength {XkbKeyNameLength = 4,XkbMaxRedirectCount = 8,};
enum MACRO_XkbMaxShiftLevel {XkbMaxShiftLevel = 63,};
enum MACRO_XkbMaxSymsPerKey {XkbMaxSymsPerKey = 252,};
enum MACRO_XkbOneLevelIndex {XkbOneLevelIndex = 0,XkbTwoLevelIndex = 1,XkbAlphabeticIndex = 2,};
enum MACRO_XkbSymInterpMask {XkbSymInterpMask = 1,XkbGroupCompatMask = 2,};
enum MACRO_XkbUnknownDoodad {XkbUnknownDoodad = 0,XkbOutlineDoodad = 1,XkbSolidDoodad = 2,};
enum MACRO_XkbWrapIntoRange {XkbWrapIntoRange = 0x0,XkbClampIntoRange = 0x40,XkbRedirectIntoRange = 0x80,};
enum MACRO_XkmGeometryIndex {XkmGeometryIndex = 5,};
enum MACRO_XkmSemanticsFile {XkmSemanticsFile = 20,};
enum MACRO_XlibDisplayReply {XlibDisplayReply = 32,XlibDisplayWriting = 64,XlibDisplayDfltRMDB = 128,};
enum MACRO_XpmPixmapSuccess {XpmPixmapSuccess = 0,XpmPixmapOpenFailed = -1,};
enum MACRO_XrmEnumAllLevels {XrmEnumAllLevels = 0,XrmEnumOneLevel = 1,};
enum MACRO_XtCacheByDisplay {XtCacheByDisplay = 0x3,XtCacheRefCount = 0x100,};
enum MACRO__PROTOCOLS_TALKD {_PROTOCOLS_TALKD_H = 1,};
enum MACRO__PROTOCOLS_TIMED {_PROTOCOLS_TIMED_H = 1,_RPC_TYPES_H = 1,};
enum MACRO__XkbErrBadLength {_XkbErrBadLength = 24,};
enum MACRO__XkbErrEmptyFile {_XkbErrEmptyFile = 13,};
enum MACRO_internal_defined {__strtol_internal_defined = 1,__strtoul_internal_defined = 1,__strtoll_internal_defined = 1,__strtoull_internal_defined = 1,};
enum MACRO_sz_xDirectFormat {sz_xDirectFormat = 16,sz_xPictFormInfo = 28,sz_xPictVisual = 8,sz_xPictDepth = 8,sz_xPictScreen = 8,sz_xIndexValue = 12,sz_xRenderColor = 8,sz_xPointFixed = 8,sz_xLineFixed = 16,sz_xTriangle = 24,sz_xTrapezoid = 40,sz_xGlyphInfo = 12,sz_xGlyphElt = 8,sz_xSpanFix = 12,sz_xTrap = 24,sz_xRenderQueryVersionReq = 12,sz_xRenderQueryVersionReply = 32,sz_xRenderQueryPictFormatsReq = 4,sz_xRenderQueryPictFormatsReply = 32,sz_xRenderQueryPictIndexValuesReq = 8,sz_xRenderQueryPictIndexValuesReply = 32,sz_xRenderCreatePictureReq = 20,sz_xRenderChangePictureReq = 12,sz_xRenderSetPictureClipRectanglesReq = 12,sz_xRenderFreePictureReq = 8,sz_xRenderCompositeReq = 36,sz_xRenderScaleReq = 32,sz_xRenderTrapezoidsReq = 24,sz_xRenderTrianglesReq = 24,sz_xRenderTriStripReq = 24,sz_xRenderTriFanReq = 24,sz_xRenderCreateGlyphSetReq = 12,sz_xRenderReferenceGlyphSetReq = 24,sz_xRenderFreeGlyphSetReq = 8,sz_xRenderAddGlyphsReq = 12,sz_xRenderFreeGlyphsReq = 8,sz_xRenderCompositeGlyphs8Req = 28,sz_xRenderCompositeGlyphs16Req = 28,sz_xRenderCompositeGlyphs32Req = 28,sz_xRenderFillRectanglesReq = 20,sz_xRenderCreateCursorReq = 16,sz_xRenderTransform = 36,sz_xRenderSetPictureTransformReq = 44,sz_xRenderQueryFiltersReq = 8,sz_xRenderQueryFiltersReply = 32,sz_xRenderSetPictureFilterReq = 12,sz_xAnimCursorElt = 8,sz_xRenderCreateAnimCursorReq = 8,sz_xRenderAddTrapsReq = 12,sz_xRenderCreateSolidFillReq = 16,sz_xRenderCreateLinearGradientReq = 28,sz_xRenderCreateRadialGradientReq = 36,sz_xRenderCreateConicalGradientReq = 24,};
enum MACRO_sz_xXagCreateReq {sz_xXagCreateReq = 12,sz_xXagDestroyReq = 8,sz_xXagGetAttrReq = 8,sz_xXagGetAttrReply = 32,sz_xXagQueryReq = 8,sz_xXagQueryReply = 32,sz_xXagCreateAssocReq = 12,sz_xXagDestroyAssocReq = 8,};
typedef struct _EA67C4467E5D392AEC3890F142F1A94F OverrideShellClassPart;
typedef struct _5D6EFF7AE4955960C2AFFE32FE5051B9 SANE_Option_Descriptor;
typedef struct _832302596B16D7C435F01BD429ECA1F5 ShellClassExtensionRec;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F TopLevelShellClassPart;
typedef struct _TransientShellClassRec TransientShellClassRec;
typedef struct _VendorShellClassRec *VendorShellWidgetClass;
typedef struct _ViewportConstraintsRec ViewportConstraintsRec;
typedef void (*WBXMLCharactersHandler)(void *ctx, unsigned char *ch, unsigned int start, unsigned int length);
typedef struct _9DE996CCF029E9EC8780697D99848B24 XCirculateRequestEvent;
typedef struct _2696F812B3705C744CB9A8772F005405 XConfigureRequestEvent;
typedef struct _EF1440E4CA89662D977D4B051E2FFAB7 XDeviceResolutionState;
typedef struct _B4E11D905D4614A9FACC9B78D32FE1E4 XF86VidModeNotifyEvent;
enum XML_ParamEntityParsing {XML_PARAM_ENTITY_PARSING_NEVER = 0x0,XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE = 0x1,XML_PARAM_ENTITY_PARSING_ALWAYS = 0x2,};
typedef struct _XRRScreenConfiguration XRRScreenConfiguration;
typedef unsigned int XSecurityAuthorization;
typedef struct _BC522D80D70F7E982D1D01F262D61B8C XSelectionRequestEvent;
typedef struct _FC926E0FF1B4283F98DDB8B9F4E921D4 XStringFeedbackControl;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F XawPrintShellClassPart;
typedef struct _XkbConfigUnboundMod *XkbConfigUnboundModPtr;
typedef struct _XkbConfigUnboundMod XkbConfigUnboundModRec;
typedef struct _XkbControlsNotify XkbControlsNotifyEvent;
typedef struct _XkbDeviceLedChanges *XkbDeviceLedChangesPtr;
typedef struct _XkbDeviceLedChanges XkbDeviceLedChangesRec;
typedef struct _XkbIndicatorChanges *XkbIndicatorChangesPtr;
typedef struct _XkbIndicatorChanges XkbIndicatorChangesRec;
typedef struct _5ADACAF53662BBE439937D75EA2CC10F XmbufUpdateNotifyEvent;
typedef struct _1E0D006DA5A3AB615AC2957B38222DF2 XpuMediumSourceSizeRec;
typedef struct _5DD49376C74765CB7E96286DDB46181E XtConfigureHookDataRec;
typedef struct _BD96F4C520841110C237EF8D06FD9BEE _IceProtoSetupToMeInfo;
struct _XkbSwitchScreenAction {unsigned char type;unsigned char flags;char screenXXX;};
typedef struct _00F641E758640FAA883D4195ED0EFEE3 __GLXbitmapLargeHeader;
typedef struct _9FD2D690B5466D0C81573B00EFBDAE2C __GLXrenderLargeHeader;
typedef struct _4E404080472975271550CB06928F4DCD __GLXtexSubImageHeader;
typedef int (*__gconv_trans_init_fct)(void **,  char *);
typedef struct _6105F69743B5F4DC3D2725A2474E8E7A __pthread_unwind_buf_t;
typedef void (*bfd_error_handler_type)( char *, ...);
typedef int (*bfd_qsort_closure_func)( void *,  void *,  void *);
struct demangle_operator_info;
typedef struct _A4EF4A77E40471EF410BD1BFBD9E090A deviceKeyButtonPointer;
enum dynamic_lib_link_class {DYN_NORMAL = 0x0,DYN_AS_NEEDED = 0x1,DYN_DT_NEEDED = 0x2,DYN_NO_ADD_NEEDED = 0x4,DYN_NO_NEEDED = 0x8,};
enum floatformat_byteorders {floatformat_little = 0x0,floatformat_big = 0x1,floatformat_littlebyte_bigword = 0x2,floatformat_vax = 0x3,};
enum notice_asneeded_action {notice_as_needed = 0x0,notice_not_needed = 0x1,notice_needed = 0x2,};
typedef struct _BC21E3DCA2DEF6CD8EB07ED07E074597 pmGetProxyAddrReplyMsg;
struct sg_simple_inquiry_resp {unsigned char peripheral_qualifier;unsigned char peripheral_type;unsigned char rmb;unsigned char version;unsigned char byte_3;unsigned char byte_5;unsigned char byte_6;unsigned char byte_7;char vendor[9];char product[17];char revision[5];};
typedef struct _101ED56796A31C5C092EFC61C0F81522 smShutdownCancelledMsg;
typedef void *(*splay_tree_allocate_fn)(int, void *);
enum sysfs_attribute_method {SYSFS_METHOD_SHOW = 0x1,SYSFS_METHOD_STORE = 0x2,};
typedef struct _44DBA8761062EA5D0E0445C058A5F0FB xAllocColorPlanesReply;
typedef struct _AppleWMSelectInput xAppleWMSelectInputReq;
typedef struct _5F0218706A29D3B501048FD21A470406 xDMXGetInputCountReply;
typedef struct _B269B0A5851D241ECE7A73512E496A13 xDamageQueryVersionReq;
typedef struct _2C268D9809C6E9DE2B818A0BB7518C2E xDeviceResolutionState;
typedef struct _XEVIGetVisualInfoReply xEVIGetVisualInfoReply;
typedef struct GLXCreateGLXPixmap xGLXCreateGLXPixmapReq;
typedef struct _F6E4DA94E7160BC83621C4F78D7EDA8D xGLXGetColorTableReply;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xGetDeviceControlReply;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetFeedbackControlReq;
typedef struct _9A79A86C67FC8B79D589DEFE9BCD3BC9 xGetKeyboardMappingReq;
typedef struct _LbxEndLargeRequest xLbxEndLargeRequestReq;
typedef struct _LbxInvalidateTagEvent xLbxInvalidateTagEvent;
typedef struct _38BC431CF83E096863532D796A6E7F77 xListInputDevicesReply;
typedef struct _32EEA813D9DAD40A14F6989D3C5227A8 xMbufUpdateNotifyEvent;
typedef struct _PrintCreateContext xPrintCreateContextReq;
typedef struct _PrintGetAttributes xPrintGetAttributesReq;
typedef struct _PrintInputSelected xPrintInputSelectedReq;
typedef struct _PrintSetAttributes xPrintSetAttributesReq;
typedef struct _19958847318214F780EFE5EAB3B1A0C9 xQueryDeviceStateReply;
typedef struct _C30FF1240D2A8075F6967DECC9305E3F xQueryTextExtentsReply;
typedef struct _3208E1BA8126707DC1A488F29A0DED72 xRecordGetContextReply;
typedef struct _AAD257271AAA9A190B14D3482C45D035 xRecordQueryVersionReq;
typedef struct _3E53CB2ED1FED691C94CE793AD197BA2 xRenderCreateCursorReq;
typedef struct _2AC87F894EE3258143DDE890FCFACB0D xRenderFreeGlyphSetReq;
typedef struct _89C19CA17CD4EE2490EC1EBDB53AA079 xRenderQueryFiltersReq;
typedef struct _1ACEBBD1BA76D1519A3D809460AEA55C xRenderQueryVersionReq;
typedef struct _ScreenSaverSuspend xScreenSaverSuspendReq;
typedef struct _2A859DA02CD5E3593B5918B42FA7FFEB xSendExtensionEventReq;
typedef struct _29C593C589279C3E7D511580F3E78129 xSetDeviceValuatorsReq;
typedef struct _F1472F09D9F4F4B2B771740E265DAEF8 xSetModifierMappingReq;
typedef struct _ShapeGetRectangles xShapeGetRectanglesReq;
typedef struct _ShapeInputSelected xShapeInputSelectedReq;
typedef struct _xSyncDestroyCounterReq xSyncDestroyCounterReq;
typedef struct _B4654CD279B33E607B3273E64CC6A8CF xSyncQueryCounterReply;
typedef struct _5CD0DDA75FC8A64FD62E45433429A157 xTestQueryInputSizeReq;
typedef struct _AC93509FFB6B9C1B98C9154A5D973C79 xUngrabDeviceButtonReq;
typedef struct _WindowsWMFrameDraw xWindowsWMFrameDrawReq;
typedef struct _DA732864DAD897F0B587BCCAD8E078EE xXCMiscGetVersionReply;
typedef struct _896D23E0DCE5181A858CD1FDEDFC63B0 xXCMiscGetXIDListReply;
typedef struct _XDGACreateColormap xXDGACreateColormapReq;
typedef struct _3F2E090B53825C071BE42E5C77B221DD xXDGAQueryVersionReply;
typedef struct _XF86DGADirectVideo xXF86DGADirectVideoReq;
typedef struct _XF86DGASetViewPort xXF86DGASetViewPortReq;
typedef struct _XF86RushLockPixmap xXF86RushLockPixmapReq;
typedef struct _5EC50BA61A7AE0BB02D4340472A7D806 xXFixesChangeCursorReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesCreateRegionReq;
typedef struct _9E1D181561E0D2ACA87E09ABA7C14355 xXFixesExpandRegionReq;
typedef struct _0D1FFF2FD08E009A212466AD439E256D xXFixesInvertRegionReq;
typedef struct _5ED203E6BF1B06D8F06879722F6B66D4 xXFixesQueryVersionReq;
typedef struct _2E963936DF2C8EEC00CED466180278DB xXResQueryClientsReply;
typedef struct _70AE50C60636BA34AE17DCBE089831D2 xXResQueryVersionReply;
typedef struct _B09B64BCB86C923CE64AD6544D183118 xXTestCompareCursorReq;
typedef struct _EFD6C7D4777DD13E0B1CDD145692A98C xXcupQueryVersionReply;
typedef struct _322E4D740D2A723112F8227414848916 xXevieSelectInputReply;
typedef struct _2DE9659B7EEC2253521CC6BF2372B999 xXineramaIsActiveReply;
enum xcb_auto_repeat_mode_t {XCB_AUTO_REPEAT_MODE_OFF = 0x0,XCB_AUTO_REPEAT_MODE_ON = 0x1,XCB_AUTO_REPEAT_MODE_DEFAULT = 0x2,};
struct xcb_dpms_info_cookie_t {unsigned int sequence;};
typedef struct _038B891F4881F16F541AE58F6D49FAEC xcb_generic_iterator_t;
struct xcb_get_image_cookie_t {unsigned int sequence;};
typedef struct _3A28C96D52FB29F9635C6203D2891B70 xcb_protocol_request_t;
enum xcb_randr_set_config_t {XCB_RANDR_SET_CONFIG_SUCCESS = 0x0,XCB_RANDR_SET_CONFIG_INVALID_CONFIG_TIME = 0x1,XCB_RANDR_SET_CONFIG_INVALID_TIME = 0x2,XCB_RANDR_SET_CONFIG_FAILED = 0x3,};
enum xcb_render_pict_type_t {XCB_RENDER_PICT_TYPE_INDEXED = 0x0,XCB_RENDER_PICT_TYPE_DIRECT = 0x1,};
enum xcb_render_poly_edge_t {XCB_RENDER_POLY_EDGE_SHARP = 0x0,XCB_RENDER_POLY_EDGE_SMOOTH = 0x1,};
enum xcb_render_poly_mode_t {XCB_RENDER_POLY_MODE_PRECISE = 0x0,XCB_RENDER_POLY_MODE_IMPRECISE = 0x1,};
enum xcb_render_sub_pixel_t {XCB_RENDER_SUB_PIXEL_UNKNOWN = 0x0,XCB_RENDER_SUB_PIXEL_HORIZONTAL_RGB = 0x1,XCB_RENDER_SUB_PIXEL_HORIZONTAL_BGR = 0x2,XCB_RENDER_SUB_PIXEL_VERTICAL_RGB = 0x3,XCB_RENDER_SUB_PIXEL_VERTICAL_BGR = 0x4,XCB_RENDER_SUB_PIXEL_NONE = 0x5,};
enum xcb_screensaver_kind_t {XCB_SCREENSAVER_KIND_BLANKED = 0x0,XCB_SCREENSAVER_KIND_INTERNAL = 0x1,XCB_SCREENSAVER_KIND_EXTERNAL = 0x2,};
struct xcb_segment_iterator_t {xcb_segment_t *data;int rem;int index;};
struct xcb_xevie_end_cookie_t {unsigned int sequence;};
typedef struct _xkbListComponentsReply xkbListComponentsReply;
typedef struct _xkbPerClientFlagsReply xkbPerClientFlagsReply;
typedef struct _xkbShapeDoodadWireDesc xkbShapeDoodadWireDesc;
typedef struct _xkmIndicatorDoodadDesc xkmIndicatorDoodadDesc;
typedef struct _9C9793AFB485CBCDC1723AA9DA7467C7 xvSelectVideoNotifyReq;
typedef struct _01D78593398EF5D4C7B0D882F4AC2769 xvmcCreateContextReply;
typedef struct _04D0ADC31935FE4C3A858C08EAEE2E45 xvmcCreateSurfaceReply;
typedef struct _ConstraintClassRec *ConstraintWidgetClass;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F DialogConstraintsPart;
typedef void (*FT_Raster_BitSet_Func)(int y, int x, void *user);
enum FT_Size_Request_Type_ {FT_SIZE_REQUEST_TYPE_NOMINAL = 0x0,FT_SIZE_REQUEST_TYPE_REAL_DIM = 0x1,FT_SIZE_REQUEST_TYPE_BBOX = 0x2,FT_SIZE_REQUEST_TYPE_CELL = 0x3,FT_SIZE_REQUEST_TYPE_SCALES = 0x4,FT_SIZE_REQUEST_TYPE_MAX = 0x5,};
typedef struct LIBMTP_device_entry_struct LIBMTP_device_entry_t;
enum MACRO_AnyPropertyType {AnyPropertyType = 0,};
enum MACRO_AppleWMIsActive {AppleWMIsActive = 0,AppleWMIsInactive = 1,};
enum MACRO_AsyncThisDevice {AsyncThisDevice = 0,SyncThisDevice = 1,ReplayThisDevice = 2,};
enum MACRO_CILEN_PREDICTOR {CILEN_PREDICTOR_1 = 2,};
enum MACRO_CirculateNotify {CirculateNotify = 26,};
enum MACRO_ConfigureNotify {ConfigureNotify = 22,};
enum MACRO_CoordModeOrigin {CoordModeOrigin = 0,CoordModePrevious = 1,};
enum MACRO_DMXDesktopWidth {DMXDesktopWidth = 1,DMXDesktopHeight = 2,DMXDesktopShiftX = 4,DMXDesktopShiftY = 8,};
enum MACRO_ETHERTYPE_TRAIL {ETHERTYPE_TRAIL = 0x1000,ETHERTYPE_NTRAILER = 0x10,};
enum MACRO_EnterLeaveEvent {lbxsz_EnterLeaveEvent = 32,lbxupsz_EnterLeaveEvent = 32,};
enum MACRO_FONTSEGMENTSIZE {FONTSEGMENTSIZE = 16,};
enum MACRO_FT_PROPORTIONAL {FT_PROPORTIONAL = 0,FT_MONOSPACED = 1,FT_CHARCELL = 2,FT_AVAILABLE_UNKNOWN = 0,FT_AVAILABLE_NO = 1,FT_AVAILABLE_METRICS = 2,FT_AVAILABLE_RASTERISED = 3,FT_GET_GLYPH_BOTH = 1,FT_GET_GLYPH_METRICS_ONLY = 2,FT_GET_DUMMY = 4,FT_FORCE_CONSTANT_SPACING = 8,};
enum MACRO_FamilyInternet6 {FamilyInternet6 = 6,};
enum MACRO_FamilyLocalHost {FamilyLocalHost = 252,};
enum MACRO_FilterAliasNone {FilterAliasNone = -1,};
enum MACRO_FontLeftToRight {FontLeftToRight = 0,FontRightToLeft = 1,};
enum MACRO_GLYPHPADOPTIONS {GLYPHPADOPTIONS = 4,};
enum MACRO_GrabNotViewable {GrabNotViewable = 3,GrabFrozen = 4,};
enum MACRO_INADDR_LOOPBACK {INADDR_LOOPBACK = 0x7F000001,INADDR_UNSPEC_GROUP = 0xE0000000,INADDR_ALLHOSTS_GROUP = 0xE0000001,INADDR_ALLRTRS_GROUP = 0xE0000002,INADDR_MAX_LOCAL_GROUP = 0xE00000FF,};
enum MACRO_IWEVASSOCRESPIE {IWEVASSOCRESPIE = 0x8C08,};
enum MACRO_KEYCHECKSUMSIZE {KEYCHECKSUMSIZE = 16,};
enum MACRO_MapRequestEvent {lbxsz_MapRequestEvent = 12,lbxupsz_MapRequestEvent = 12,};
enum MACRO_MappingModifier {MappingModifier = 0,MappingKeyboard = 1,MappingPointer = 2,};
enum MACRO_NCURSES_TERMCAP {NCURSES_TERMCAP_H_incl = 1,};
enum MACRO_NoSuchExtension {NoSuchExtension = 1,};
enum MACRO_NotifyNonlinear {NotifyNonlinear = 3,NotifyNonlinearVirtual = 4,};
enum MACRO_PictOpInReverse {PictOpInReverse = 6,};
enum MACRO_PictStandardNUM {PictStandardNUM = 5,};
enum MACRO_PictTypeIndexed {PictTypeIndexed = 0,PictTypeDirect = 1,};
enum MACRO_PolyModePrecise {PolyModePrecise = 0,PolyModeImprecise = 1,};
enum MACRO_PropModeReplace {PropModeReplace = 0,PropModePrepend = 1,PropModeAppend = 2,};
enum MACRO_RPCSMALLMSGSIZE {RPCSMALLMSGSIZE = 400,};
enum MACRO_RSTATVERS_SWTCH {RSTATVERS_SWTCH = 2,RSTATVERS_ORIG = 1,};
enum MACRO_RecordNumErrors {RecordNumErrors = 1,};
enum MACRO_RecordNumEvents {RecordNumEvents = 0,};
enum MACRO_SIOCAX25BPQADDR {SIOCAX25BPQADDR = 35300,};
enum MACRO_SIOCAX25GETINFO {SIOCAX25GETINFO = 35305,};
enum MACRO_SIOCIWFIRSTPRIV {SIOCIWFIRSTPRIV = 0x8BE0,};
enum MACRO_SelectionNotify {SelectionNotify = 31,ColormapNotify = 32,};
enum MACRO_ShapeNotifyMask {ShapeNotifyMask = 1,};
enum MACRO_SubPixelUnknown {SubPixelUnknown = 0,SubPixelHorizontalRGB = 1,SubPixelHorizontalBGR = 2,};
enum MACRO_TIOCSERGETMULTI {TIOCSERGETMULTI = 0x545A,};
enum MACRO_TIOCSERSETMULTI {TIOCSERSETMULTI = 0x545B,};
enum MACRO_VisibilityEvent {lbxsz_VisibilityEvent = 12,lbxupsz_VisibilityEvent = 9,};
enum MACRO_WRITE_FILEMARKS {WRITE_FILEMARKS = 0x10,};
enum MACRO_XBufferOverflow {XBufferOverflow = -1,};
enum MACRO_XETrapDataStart {XETrapDataStart = 0,XETrapDataContinued = 1,XETrapDataLast = 2,};
enum MACRO_XETrapMaxPacket {XETrapMaxPacket = 5,};
enum MACRO_XETrapNumErrors {XETrapNumErrors = 9,};
enum MACRO_XETrapTimestamp {XETrapTimestamp = 0,XETrapCmd = 1,XETrapCmdKeyMod = 2,};
enum MACRO_XFIXES_REVISION {XFIXES_REVISION = 1,XFIXES_VERSION = 40001,};
enum MACRO_XIMInitialState {XIMInitialState = 1,XIMPreserveState = 2,};
enum MACRO_XPEndPageNotify {XPEndPageNotify = 5,};
enum MACRO_XSyncBadCounter {XSyncBadCounter = 0,XSyncBadAlarm = 1,XSyncNumberErrors = 2,};
enum MACRO_XTestMAX_DEVICE {XTestMAX_DEVICE_ID = 0xF,};
enum MACRO_X_MITSetBugMode {X_MITSetBugMode = 0,X_MITGetBugMode = 1,};
enum MACRO_X_TestFakeInput {X_TestFakeInput = 1,X_TestGetInput = 2,X_TestStopInput = 3,X_TestReset = 4,X_TestQueryInputSize = 5,};
enum MACRO_XagNdefaultRoot {XagNdefaultRoot = 1,XagNrootVisual = 2,};
enum MACRO_XawReplaceError {XawReplaceError = -1,};
enum MACRO_XawShapeEllipse {XawShapeEllipse = 3,XawShapeRoundedRectangle = 4,};
enum MACRO_XcmsInitFailure {XcmsInitFailure = 0xFF,};
enum MACRO_XkbAllNamesMask {XkbAllNamesMask = 0x3FFF,};
enum MACRO_XkbAllXIClasses {XkbAllXIClasses = 0x500,};
enum MACRO_XkbGeomPtsPerMM {XkbGeomPtsPerMM = 10,XkbGeomMaxColors = 32,};
enum MACRO_XkbKeyTypesMask {XkbKeyTypesMask = 1,XkbKeySymsMask = 2,XkbModifierMapMask = 4,XkbExplicitComponentsMask = 8,XkbKeyActionsMask = 16,XkbKeyBehaviorsMask = 32,XkbVirtualModsMask = 64,XkbVirtualModMapMask = 128,};
enum MACRO_XkbMajorVersion {XkbMajorVersion = 1,};
enum MACRO_XkbMinorVersion {XkbMinorVersion = 0,XkbExplicitKeyTypesMask = 15,};
enum MACRO_XkbNoShiftLevel {XkbNoShiftLevel = 0xFF,};
enum MACRO_XkbNumKbdGroups {XkbNumKbdGroups = 4,};
enum MACRO_XkbNumModifiers {XkbNumModifiers = 8,XkbNumVirtualMods = 16,XkbNumIndicators = 32,};
enum MACRO_XkbOneLevelMask {XkbOneLevelMask = 1,XkbTwoLevelMask = 2,XkbAlphabeticMask = 4,XkbKeypadMask = 8,};
enum MACRO_XkbRGMaxMembers {XkbRGMaxMembers = 12,};
enum MACRO_XkmGeometryFile {XkmGeometryFile = 23,};
enum MACRO_XmuShapeEllipse {XmuShapeEllipse = 3,XmuShapeRoundedRectangle = 4,};
enum MACRO_XtInputNoneMask {XtInputNoneMask = 0,XtInputReadMask = 1,XtInputWriteMask = 2,XtInputExceptMask = 4,};
enum MACRO_XvAnyReasonMask {XvAnyReasonMask = 31,};
enum MACRO__BITS_SIGTHREAD {_BITS_SIGTHREAD_H = 1,_TIME_H = 1,};
enum MACRO__POSIX_SPORADIC {_POSIX_SPORADIC_SERVER = -1,_POSIX_THREAD_SPORADIC_SERVER = -1,_POSIX_TRACE = -1,_POSIX_TRACE_EVENT_FILTER = -1,_POSIX_TRACE_INHERIT = -1,_POSIX_TRACE_LOG = -1,_POSIX_TYPED_MEMORY_OBJECTS = -1,};
enum MACRO__XOPEN_REALTIME {_XOPEN_REALTIME = 1,_XOPEN_REALTIME_THREADS = 1,_XOPEN_SHM = 1,};
enum MACRO__XkbErrBadAlloc {_XkbErrBadAlloc = 23,};
enum MACRO__XkbErrBadMatch {_XkbErrBadMatch = 17,};
enum MACRO___have_sigevent {__have_sigevent_t = 1,};
enum MACRO__deviceKeyPress {_deviceKeyPress = 0,_deviceKeyRelease = 1,};
enum MACRO_numInputClasses {numInputClasses = 7,};
enum MACRO_sz_XRecordRange {sz_XRecordRange = 32,sz_XRecordClientInfo = 12,sz_XRecordState = 16,sz_XRecordDatum = 32,};
enum MACRO_sz_fsPropOffset {sz_fsPropOffset = 20,sz_fsPropInfo = 8,sz_fsResolution = 6,sz_fsChar2b = 2,sz_fsChar2b_version1 = 2,sz_fsOffset32 = 8,sz_fsRange = 4,sz_fsXCharInfo = 12,sz_fsXFontInfoHeader = 40,sz_fsConnClientPrefix = 8,sz_fsConnSetup = 12,sz_fsConnSetupExtra = 8,sz_fsConnSetupAccept = 12,sz_fsReq = 4,sz_fsListExtensionsReq = 4,sz_fsResourceReq = 8,sz_fsNoopReq = 4,sz_fsListExtensionReq = 4,sz_fsQueryExtensionReq = 4,sz_fsListCataloguesReq = 12,sz_fsSetCataloguesReq = 4,sz_fsGetCataloguesReq = 4,sz_fsSetEventMaskReq = 8,sz_fsGetEventMaskReq = 4,sz_fsCreateACReq = 8,sz_fsFreeACReq = 8,sz_fsSetAuthorizationReq = 8,sz_fsSetResolutionReq = 4,sz_fsGetResolutionReq = 4,sz_fsListFontsReq = 12,sz_fsListFontsWithXInfoReq = 12,sz_fsOpenBitmapFontReq = 16,sz_fsQueryXInfoReq = 8,sz_fsQueryXExtents8Req = 12,sz_fsQueryXExtents16Req = 12,sz_fsQueryXBitmaps8Req = 16,sz_fsQueryXBitmaps16Req = 16,sz_fsCloseReq = 8,sz_fsReply = 8,sz_fsGenericReply = 8,sz_fsListExtensionsReply = 8,sz_fsQueryExtensionReply = 20,sz_fsListCataloguesReply = 16,sz_fsGetCataloguesReply = 8,sz_fsGetEventMaskReply = 12,sz_fsCreateACReply = 12,sz_fsGetResolutionReply = 8,sz_fsListFontsReply = 16,sz_fsListFontsWithXInfoReply = 52,sz_fsOpenBitmapFontReply = 16,sz_fsQueryXInfoReply = 48,sz_fsQueryXExtents8Reply = 12,sz_fsQueryXExtents16Reply = 12,sz_fsQueryXBitmaps8Reply = 20,sz_fsQueryXBitmaps16Reply = 20,sz_fsError = 16,sz_fsEvent = 12,sz_fsKeepAliveEvent = 12,};
enum MACRO_sz_xScreenSizes {sz_xScreenSizes = 8,sz_xRRQueryVersionReq = 12,sz_xRRQueryVersionReply = 32,sz_xRRGetScreenInfoReq = 8,sz_xRRGetScreenInfoReply = 32,sz_xRR1_0SetScreenConfigReq = 20,sz_xRRSetScreenConfigReq = 24,sz_xRRSetScreenConfigReply = 32,sz_xRRSelectInputReq = 12,sz_xRRScreenChangeNotifyEvent = 32,};
enum MACRO_sz_xkbSetMapReq {sz_xkbSetMapReq = 36,sz_xkbSymInterpretWireDesc = 16,sz_xkbGetCompatMapReq = 12,sz_xkbGetCompatMapReply = 32,sz_xkbSetCompatMapReq = 16,sz_xkbGetIndicatorStateReq = 8,sz_xkbGetIndicatorStateReply = 32,sz_xkbGetIndicatorMapReq = 12,sz_xkbGetIndicatorMapReply = 32,sz_xkbIndicatorMapWireDesc = 12,sz_xkbSetIndicatorMapReq = 12,sz_xkbGetNamedIndicatorReq = 16,sz_xkbGetNamedIndicatorReply = 32,sz_xkbSetNamedIndicatorReq = 32,sz_xkbGetNamesReq = 12,sz_xkbGetNamesReply = 32,sz_xkbSetNamesReq = 28,sz_xkbPointWireDesc = 4,sz_xkbOutlineWireDesc = 4,sz_xkbShapeWireDesc = 8,sz_xkbSectionWireDesc = 20,sz_xkbRowWireDesc = 8,sz_xkbKeyWireDesc = 8,sz_xkbOverlayWireDesc = 8,sz_xkbOverlayRowWireDesc = 4,sz_xkbOverlayKeyWireDesc = 8,sz_xkbShapeDoodadWireDesc = 20,sz_xkbTextDoodadWireDesc = 20,sz_xkbIndicatorDoodadWireDesc = 20,sz_xkbLogoDoodadWireDesc = 20,sz_xkbAnyDoodadWireDesc = 20,sz_xkbDoodadWireDesc = 20,sz_xkbGetGeometryReq = 12,sz_xkbGetGeometryReply = 32,sz_xkbSetGeometryReq = 28,sz_xkbPerClientFlagsReq = 28,sz_xkbPerClientFlagsReply = 32,sz_xkbListComponentsReq = 8,sz_xkbListComponentsReply = 32,sz_xkbGetKbdByNameReq = 12,sz_xkbGetKbdByNameReply = 32,sz_xkbDeviceLedsWireDesc = 20,sz_xkbGetDeviceInfoReq = 16,sz_xkbGetDeviceInfoReply = 32,sz_xkbSetDeviceInfoReq = 12,sz_xkbSetDebuggingFlagsReq = 24,sz_xkbSetDebuggingFlagsReply = 32,sz_xkbAnyEvent = 32,sz_xkbNewKeyboardNotify = 32,sz_xkbMapNotify = 32,sz_xkbStateNotify = 32,sz_xkbControlsNotify = 32,sz_xkbIndicatorNotify = 32,sz_xkbNamesNotify = 32,sz_xkbCompatMapNotify = 32,sz_xkbBellNotify = 32,sz_xkbActionMessage = 32,sz_xkbAccessXNotify = 32,sz_xkbExtensionDeviceNotify = 32,sz_xkbEvent = 32,};
typedef struct _MenuButtonClassRec *MenuButtonWidgetClass;
typedef struct _OverrideShellClassRec OverrideShellClassRec;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F SessionShellClassPart;
typedef struct _SimpleMenuClassRec *SimpleMenuWidgetClass;
typedef struct _StripChartClassRec *StripChartWidgetClass;
typedef struct _TMComplexBindProcsRec TMComplexBindProcsRec;
typedef struct _TMComplexStateTreeRec TMComplexStateTreeRec;
typedef struct _TopLevelShellClassRec TopLevelShellClassRec;
struct WBXMLAttrValueEntry_s { char *xmlName;unsigned char wbxmlCodePage;unsigned char wbxmlToken;};
struct WBXMLNameSpaceEntry_s { char *xmlNameSpace;unsigned char wbxmlCodePage;};
typedef struct _A2DE5C624CAE7E415130221DEBE38D94 XF86MiscMouseSettings;
typedef struct _61E3B0A33819AD8DAE0C4234C1987B22 XIntegerFeedbackState;
typedef struct _28142D6A19F8031FDF6344CC69CB9532 XProximityNotifyEvent;
typedef struct _E4C683071E34AD255F18B3FB82D2DFAE XSyncAlarmNotifyEvent;
typedef struct _E9D9387C3B11BC3046AC632B5B502F37 XTestInputActionEvent;
typedef struct _A112317F86DCB2DDC9FE57A6FC58C010 XWindowsWMNotifyEvent;
typedef struct _6D6F1B3E2508C3E8FAF2245CB1C669E1 XawTextLineTableEntry;
typedef struct _23254339BB91F737308FB37B0328931B XawVendorShellExtPart;
typedef struct _XkbAccessXNotify XkbAccessXNotifyEvent;
typedef struct _XkbActionMessage XkbActionMessageEvent;
typedef struct _XkbControlsChanges *XkbControlsChangesPtr;
typedef struct _XkbControlsChanges XkbControlsChangesRec;
typedef struct _XkbIndicatorDoodad *XkbIndicatorDoodadPtr;
typedef struct _XkbIndicatorDoodad XkbIndicatorDoodadRec;
typedef struct _XkbRF_DescribeVars *XkbRF_DescribeVarsPtr;
typedef struct _XkbRF_DescribeVars XkbRF_DescribeVarsRec;
typedef struct _XkbSwitchScreenAction XkbSwitchScreenAction;
typedef struct _CD2774D7904D8BC0AB34D0D3977DB8FF XmbufBufferAttributes;
typedef struct _7501B521F09A6EDD43C68106808E09A6 XmbufWindowAttributes;
typedef struct _A47C75AE74EA14FC2F54815F4A8813BA XtGeometryHookDataRec;
struct _XkbRedirectKeyAction {unsigned char type;unsigned char new_key;unsigned char mods_mask;unsigned char mods;unsigned char vmods_mask0;unsigned char vmods_mask1;unsigned char vmods0;unsigned char vmods1;};
typedef struct _4E3F1E4C1E1A83481E83EC5617B4D6E4 __GLXColorTableHeader;
typedef struct _C65377E4DB536D1ADB016911E41EAEC0 __GLXdrawArraysHeader;
typedef struct _54B79DB8E4CBEE2C88E3D67FC733EBBD __GLXdrawPixelsHeader;
typedef struct _D7CE09BF9A0F6F73C5A4D3330C0E16F2 __GLXtexImage3DHeader;
struct __gconv_loaded_object;
typedef void (*__gconv_trans_end_fct)(void *);
typedef void (*__kernel_sighandler_t)(int);
enum __ns_update_operation {ns_uop_delete = 0x0,ns_uop_add = 0x1,ns_uop_max = 0x2,};
struct cpufreq_affected_cpus {unsigned int cpu;struct cpufreq_affected_cpus *next;struct cpufreq_affected_cpus *first;};
typedef struct _FCE16AE268B388C13B857015D638E9ED fsImplementationError;
typedef struct _113ADE3249D8CE9145901B23810AE272 fsListCataloguesReply;
typedef struct _A400BCBF43F87F2088946A887ADD242F fsListExtensionsReply;
typedef struct _E979E361A2908732FE24CBF47752810D fsOpenBitmapFontReply;
typedef struct _2D6D05448839E8D39EF22D0A7A7B9E49 fsQueryExtensionReply;
typedef struct _5C7A236BA0562DB05D77CA85FA8CD202 fsQueryXBitmaps8Reply;
typedef struct _D293DB0BD17AE7654E9C3A224EBA1B54 fsQueryXExtents8Reply;
typedef struct _350BC2B23F9B41AFEB7D1AE3E404670A iceConnectionReplyMsg;
typedef struct _5C41C718BCBFD6CC2A68DF59D547D717 iceConnectionSetupMsg;
enum ieee1284_capabilities {CAP1284_RAW = 0x1,CAP1284_NIBBLE = 0x2,CAP1284_BYTE = 0x4,CAP1284_COMPAT = 0x8,CAP1284_BECP = 0x10,CAP1284_ECP = 0x20,CAP1284_ECPRLE = 0x40,CAP1284_ECPSWE = 0x80,CAP1284_EPP = 0x100,CAP1284_EPPSL = 0x200,CAP1284_EPPSWE = 0x400,CAP1284_IRQ = 0x800,CAP1284_DMA = 0x1000,};
enum ieee1284_control_bits {C1284_NSTROBE = 0x1,C1284_NAUTOFD = 0x2,C1284_NINIT = 0x4,C1284_NSELECTIN = 0x8,C1284_INVERTED = 0xB,};
typedef struct po_message_iterator *po_message_iterator_t;
typedef union _D1D0F511BF997F52624AFB2B0CE27B40 pthread_barrierattr_t;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smDeletePropertiesMsg;
typedef struct _B8BE427FC8694D49638950F9AF5F05C2 smSaveYourselfDoneMsg;
typedef struct _2E22270806C47E05D9B4938893A6CA7A xAllocColorCellsReply;
typedef struct _73B4058B96DB787648F70BEB3765CE40 xAllocNamedColorReply;
typedef struct _A56827FA99728A529A1C213E34F0D83D xAllowDeviceEventsReq;
typedef struct _AppleWMSetCanQuit xAppleWMSetCanQuitReq;
typedef struct _6C531080E0330861B126A2833D727845 xCreateGlyphCursorReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXGetScreenCountReq;
typedef struct _089D19AFE35A3BB9549C0E2B9D96DA0E xDMXQueryVersionReply;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXRemoveScreenReply;
typedef struct _7286F01C0F25CC9697D9D7CFCD5C4B3B xDPMSGetTimeoutsReply;
typedef struct _7D044E98E295B1AE6D053F4E096E3E34 xEVIQueryVersionReply;
typedef struct GLXDestroyContext xGLXDestroyContextReq;
typedef struct GLXDestroyPbuffer xGLXDestroyPbufferReq;
typedef struct _B2B69F9AD24016B318383C2A7C8A2E10 xGLXGetFBConfigsReply;
typedef struct _F6E4DA94E7160BC83621C4F78D7EDA8D xGLXGetHistogramReply;
typedef struct _085FAF82344F726CA3F577D24DE6B299 xGLXQueryContextReply;
typedef struct _F8C87AC2A7BC3CC5A7E8B476E8E692C2 xGLXQueryVersionReply;
typedef struct _53A84E5818A8BF56A6CBC41177A9FFE2 xGetMotionEventsReply;
typedef struct _F2B759443FC190F802FE53FB7862F04C xIntegerFeedbackState;
typedef struct _LbxChangeProperty xLbxChangePropertyReq;
typedef struct _LbxIncrementPixel xLbxIncrementPixelReq;
typedef struct _LbxModifySequence xLbxModifySequenceReq;
typedef struct _LbxQueryExtension xLbxQueryExtensionReq;
typedef struct _7D044E98E295B1AE6D053F4E096E3E34 xLbxQueryVersionReply;
typedef struct _88C1685F053777CC7A3B1D0ED0ED52E3 xMbufGetBufferInfoReq;
typedef struct _PanoramiXGetState xPanoramiXGetStateReq;
typedef struct _4DAB985EC804DF06DE833983110A4312 xPrintGetContextReply;
typedef struct _PrintQueryScreens xPrintQueryScreensReq;
typedef struct _PrintQueryVersion xPrintQueryVersionReq;
typedef struct _425D596FFB295BDC9ECE8B5455A7138C xRRGetScreenInfoReply;
typedef struct _49A9C69F1FAAE36175A766361397A248 xRRSetScreenConfigReq;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordFreeContextReq;
typedef struct _989300C65D48D4487CD63431A5B756B7 xRenderFreePictureReq;
typedef struct _5E29C5FF94304EAD83140C47151323A4 xSetClipRectanglesReq;
typedef struct _0C1A989C237847E9E0FEF5D20B714342 xSetPointerMappingReq;
typedef struct _3C68DE36615A2A96935F4E8A62136411 xSetSelectionOwnerReq;
typedef struct _ShapeQueryExtents xShapeQueryExtentsReq;
typedef struct _ShapeQueryVersion xShapeQueryVersionReq;
typedef struct _AE25578E94EB9DEB13D122608361EF67 xShmQueryVersionReply;
typedef struct _xSyncAlarmNotifyEvent xSyncAlarmNotifyEvent;
typedef struct _xSyncChangeCounterReq xSyncChangeCounterReq;
typedef struct _xSyncCreateCounterReq xSyncCreateCounterReq;
typedef struct _15146D0240F64972E1BB855D6E1C4620 xSyncGetPriorityReply;
typedef struct _9D6FB564ED57422FFB268B9144C446E8 xTestInputActionEvent;
typedef struct _0F4B06D36BC906735A699C1D59FCE038 xTranslateCoordsReply;
typedef struct _WindowsWMNotify xWindowsWMNotifyEvent;
typedef struct _4B29FBEAFEB74D66435D912679576990 xXCMiscGetXIDRangeReq;
typedef struct _XDGAFillRectangle xXDGAFillRectangleReq;
typedef struct _XF86DGAGetVidPage xXF86DGAGetVidPageReq;
typedef struct _XF86DGAGetVideoLL xXF86DGAGetVideoLLReq;
typedef struct _XF86DGASetVidPage xXF86DGASetVidPageReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesFetchRegionReq;
typedef struct _31724D647FFD3CAE2535F1783448B15A xXFixesUnionRegionReq;
typedef struct _5CFC2639D93A82964D22ABF82B05BF7F xXTestGetVersionReply;
typedef struct _EFD6C7D4777DD13E0B1CDD145692A98C xXagQueryVersionReply;
typedef struct _322E4D740D2A723112F8227414848916 xXcupStoreColorsReply;
typedef struct _XevieQueryVersion xXevieQueryVersionReq;
struct xcb_char2b_iterator_t {xcb_char2b_t *data;int rem;int index;};
typedef xcb_focus_in_event_t xcb_focus_out_event_t;
struct xcb_format_iterator_t {xcb_format_t *data;int rem;int index;};
typedef xcb_value_error_t xcb_g_context_error_t;
typedef xcb_value_error_t xcb_id_choice_error_t;
struct xcb_screen_iterator_t {xcb_screen_t *data;int rem;int index;};
enum xcb_send_event_dest_t {XCB_SEND_EVENT_DEST_POINTER_WINDOW = 0x0,XCB_SEND_EVENT_DEST_ITEM_FOCUS = 0x1,};
enum xcb_sync_alarmstate_t {XCB_SYNC_ALARMSTATE_ACTIVE = 0x0,XCB_SYNC_ALARMSTATE_INACTIVE = 0x1,XCB_SYNC_ALARMSTATE_DESTROYED = 0x2,};
enum xcb_x_print_ev_mask_t {XCB_X_PRINT_EV_MASK_NO_EVENT_MASK = 0x0,XCB_X_PRINT_EV_MASK_PRINT_MASK = 0x1,XCB_X_PRINT_EV_MASK_ATTRIBUTE_MASK = 0x2,};
enum xcb_x_print_get_doc_t {XCB_X_PRINT_GET_DOC_FINISHED = 0x0,XCB_X_PRINT_GET_DOC_SECOND_CONSUMER = 0x1,};
typedef char xcb_x_print_string8_t;
typedef struct _xkbDeviceLedsWireDesc xkbDeviceLedsWireDesc;
typedef struct _xkbGetDeviceInfoReply xkbGetDeviceInfoReply;
typedef struct _xkbGetIndicatorMap xkbGetIndicatorMapReq;
typedef struct _xkbKTMapEntryWireDesc xkbKTMapEntryWireDesc;
typedef struct _xkbLogoDoodadWireDesc xkbLogoDoodadWireDesc;
typedef struct _xkbOverlayKeyWireDesc xkbOverlayKeyWireDesc;
typedef struct _xkbOverlayRowWireDesc xkbOverlayRowWireDesc;
typedef struct _xkbSetIndicatorMap xkbSetIndicatorMapReq;
typedef struct _xkbTextDoodadWireDesc xkbTextDoodadWireDesc;
typedef struct _819D62649EAF67B78691543FCA1EE6A8 xvGetPortAttributeReq;
typedef struct _9A02475B75BDC9A6C1FC81F46F9E4217 xvListImageFormatsReq;
typedef struct _QueryEncodingsReply xvQueryEncodingsReply;
typedef struct _QueryExtensionReply xvQueryExtensionReply;
typedef struct _6E58DE7E5977316D543695706C282257 xvSelectPortNotifyReq;
typedef struct _B5E8E02F7A52D99CF4C865E96F59C543 xvSetPortAttributeReq;
typedef struct _55D1EED960AB10AAD38BEA1E9F59F1B6 xvmcDestroyContextReq;
typedef struct _C260757490C306CA273BB590CB913883 xvmcDestroySurfaceReq;
typedef struct _A1A32FB2C00492E90944DE52B5668962 xvmcQueryVersionReply;
typedef struct _031200335061428091E44434635CEF4A ApplicationShellPart;
typedef struct _AsciiSinkClassRec *AsciiSinkObjectClass;
typedef struct _AsciiTextClassRec *AsciiTextWidgetClass;
typedef struct _CompositeClassRec *CompositeWidgetClass;
typedef struct _1318B99C26BF9CA63A0C21B938052883 DMXDesktopAttributes;
typedef struct _DialogConstraintsRec DialogConstraintsRec;
typedef void (*FT_Generic_Finalizer)(void *object);
typedef struct _BC246FD96289B80B779C80FD0A76F445 *FontCacheSettingsPtr;
typedef struct _FontScalableEntry *FontScalableEntryPtr;
typedef struct _FontScalableEntry FontScalableEntryRec;
typedef struct _FontScalableExtra *FontScalableExtraPtr;
typedef struct _FontScalableExtra FontScalableExtraRec;
typedef int (*IceHostBasedAuthProc)(char *);
typedef struct internalCallbackRec *InternalCallbackList;
enum MACRO_AppleWMHideAll {AppleWMHideAll = 5,};
enum MACRO_AppleWMShowAll {AppleWMShowAll = 6,AppleWMWindowMenuItem = 9,};
enum MACRO_BitmapNoMemory {BitmapNoMemory = 3,};
enum MACRO_CI_PREDICTOR_2 {CI_PREDICTOR_2 = 2,};
enum MACRO_CirculateEvent {lbxsz_CirculateEvent = 20,lbxupsz_CirculateEvent = 17,};
enum MACRO_ClipByChildren {ClipByChildren = 0,IncludeInferiors = 1,};
enum MACRO_CopyFromParent {CopyFromParent = 0,};
enum MACRO_DEFAULT_RIGHTS {DEFAULT_RIGHTS = 983297,};
enum MACRO_DmxBadXinerama {DmxBadXinerama = 1001,};
enum MACRO_FPEResetFailed {FPEResetFailed = 89,};
enum MACRO_FamilyInternet {FamilyInternet = 0,FamilyDECnet = 1,FamilyChaos = 2,};
enum MACRO_FollowKeyboard {FollowKeyboard = 3,};
enum MACRO_GLXBadFBConfig {GLXBadFBConfig = 9,};
enum MACRO_GXcopyInverted {GXcopyInverted = 0xC,};
enum MACRO_GfxExposeEvent {lbxsz_GfxExposeEvent = 24,lbxupsz_GfxExposeEvent = 21,};
enum MACRO_GraphicsExpose {GraphicsExpose = 13,};
enum MACRO_IN_LOOPBACKNET {IN_LOOPBACKNET = 127,};
enum MACRO_IWEVASSOCREQIE {IWEVASSOCREQIE = 0x8C07,};
enum MACRO_IWEVREGISTERED {IWEVREGISTERED = 0x8C03,};
enum MACRO_IceCanContinue {IceCanContinue = 0,IceFatalToProtocol = 1,IceFatalToConnection = 2,IceBadMinor = 32768,};
enum MACRO_IceSetupFailed {IceSetupFailed = 3,IceAuthRejected = 4,};
enum MACRO_InputClassBits {InputClassBits = 0x3F,};
enum MACRO_KeyButtonEvent {lbxsz_KeyButtonEvent = 32,lbxupsz_KeyButtonEvent = 31,};
enum MACRO_LbxListenToAll {LbxListenToAll = 6,};
enum MACRO_LbxListenToOne {LbxListenToOne = 5,};
enum MACRO_LbxSwitchEvent {LbxSwitchEvent = 0,LbxCloseEvent = 1,LbxDeltaEvent = 2,};
enum MACRO_MAXFONTNAMELEN {MAXFONTNAMELEN = 1024,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 64,};
enum MACRO_MODE_SELECT_10 {MODE_SELECT_10 = 0x55,};
enum MACRO_MTSETDRVBUFFER {MTSETDRVBUFFER = 24,};
enum MACRO_MapNotifyEvent {lbxsz_MapNotifyEvent = 16,lbxupsz_MapNotifyEvent = 13,};
enum MACRO_MappingSuccess {MappingSuccess = 0,MappingBusy = 1,MappingFailed = 2,};
enum MACRO_NCURSES_BUTTON {NCURSES_BUTTON_RELEASED = 0x1,NCURSES_BUTTON_PRESSED = 0x2,NCURSES_BUTTON_CLICKED = 0x4,NCURSES_DOUBLE_CLICKED = 0x8,NCURSES_TRIPLE_CLICKED = 0x10,NCURSES_RESERVED_EVENT = 0x20,};
enum MACRO_NCURSES_XNAMES {NCURSES_XNAMES = 1,};
enum MACRO_NUMFACEBUCKETS {NUMFACEBUCKETS = 32,};
enum MACRO_NUMPTSTOBUFFER {NUMPTSTOBUFFER = 200,};
enum MACRO_NotifyAncestor {NotifyAncestor = 0,NotifyVirtual = 1,NotifyInferior = 2,};
enum MACRO_PMAPVERS_PROTO {PMAPVERS_PROTO = 2,PMAPVERS_ORIG = 1,};
enum MACRO_PictOpSaturate {PictOpSaturate = 13,};
enum MACRO_PictStandardA4 {PictStandardA4 = 3,PictStandardA1 = 4,};
enum MACRO_PixmapNoMemory {PixmapNoMemory = -3,};
enum MACRO_PropTypeString {PropTypeString = 0,PropTypeUnsigned = 1,PropTypeSigned = 2,};
enum MACRO_PropertyNotify {PropertyNotify = 28,};
enum MACRO_ProximityState {ProximityState = 2,};
enum MACRO_RESERVED_EVENT {BUTTON1_RESERVED_EVENT = 32,BUTTON2_RESERVED_EVENT = 2048,BUTTON3_RESERVED_EVENT = 131072,BUTTON4_RESERVED_EVENT = 8388608,};
enum MACRO_RRNumberErrors {RRNumberErrors = 0,RRNumberEvents = 1,};
enum MACRO_RecordMaxError {RecordMaxError = 255,};
enum MACRO_RecordMaxEvent {RecordMaxEvent = 127,};
enum MACRO_ReparentNotify {ReparentNotify = 21,};
enum MACRO_ReplayKeyboard {ReplayKeyboard = 5,};
enum MACRO_SACK_PERMITTED {TCPOPT_SACK_PERMITTED = 4,TCPOLEN_SACK_PERMITTED = 2,};
enum MACRO_SIOCAIPXITFCRT {SIOCAIPXITFCRT = 35296,};
enum MACRO_SIOCAIPXPRISLT {SIOCAIPXPRISLT = 35297,};
enum MACRO_SIOCAX25ADDFWD {SIOCAX25ADDFWD = 35306,};
enum MACRO_SIOCAX25ADDUID {SIOCAX25ADDUID = 35297,};
enum MACRO_SIOCAX25CTLCON {SIOCAX25CTLCON = 35304,};
enum MACRO_SIOCAX25DELFWD {SIOCAX25DELFWD = 35307,};
enum MACRO_SIOCAX25DELUID {SIOCAX25DELUID = 35298,};
enum MACRO_SIOCAX25GETUID {SIOCAX25GETUID = 35296,};
enum MACRO_SIOCDEVPRIVATE {SIOCDEVPRIVATE = 0x89F0,};
enum MACRO_SIOCGIFBRDADDR {SIOCGIFBRDADDR = 0x8919,};
enum MACRO_SIOCGIFDSTADDR {SIOCGIFDSTADDR = 0x8917,};
enum MACRO_SIOCGIFNETMASK {SIOCGIFNETMASK = 0x891B,};
enum MACRO_SIOCIPXCFGDATA {SIOCIPXCFGDATA = 35298,};
enum MACRO_SIOCIPXNCPCONN {SIOCIPXNCPCONN = 35299,};
enum MACRO_SIOCIWLASTPRIV {SIOCIWLASTPRIV = 0x8BFF,};
enum MACRO_SIOCNRGETPARMS {SIOCNRGETPARMS = 35296,};
enum MACRO_SIOCNRSETPARMS {SIOCNRSETPARMS = 35297,};
enum MACRO_SIOCSIFBRDADDR {SIOCSIFBRDADDR = 0x891A,};
enum MACRO_SIOCSIFDSTADDR {SIOCSIFDSTADDR = 0x8918,};
enum MACRO_SIOCSIFNETMASK {SIOCSIFNETMASK = 0x891C,};
enum MACRO_SaveSetNearest {SaveSetNearest = 0,SaveSetRoot = 1,};
enum MACRO_ScreenSaverOff {ScreenSaverOff = 0,ScreenSaverOn = 1,ScreenSaverCycle = 2,};
enum MACRO_SelectionClear {SelectionClear = 29,};
enum MACRO_SendCoreEvents {SendCoreEvents = 59,};
enum MACRO_SmRestartNever {SmRestartNever = 3,};
enum MACRO_TIOCGLCKTRMIOS {TIOCGLCKTRMIOS = 0x5456,};
enum MACRO_TIOCSERGSTRUCT {TIOCSERGSTRUCT = 0x5458,};
enum MACRO_TIOCSLCKTRMIOS {TIOCSLCKTRMIOS = 0x5457,};
enum MACRO_TMKEYCACHELOG2 {TMKEYCACHELOG2 = 6,TMKEYCACHESIZE = 64,};
enum MACRO_VertexRelative {VertexRelative = 0x1,VertexDontDraw = 0x2,VertexCurved = 0x4,VertexStartClosed = 0x8,VertexEndClosed = 0x10,};
enum MACRO_WithdrawnState {WithdrawnState = 0,NormalState = 1,};
enum MACRO_XETCDeltaTimes {XETCDeltaTimes = 7,XETCTrapActive = 8,};
enum MACRO_XETrapMaxEvent {XETrapMaxEvent = 4,};
enum MACRO_XETrapRevision {XETrapRevision = 0,XETrapProtocol = 32,};
enum MACRO_XETrapTransOut {XETrapTransOut = 6,};
enum MACRO_XIMPreeditArea {XIMPreeditArea = 0x1,XIMPreeditCallbacks = 0x2,XIMPreeditPosition = 0x4,XIMPreeditNothing = 0x8,XIMPreeditNone = 0x10,XIMStatusArea = 0x100,XIMStatusCallbacks = 0x200,XIMStatusNothing = 0x400,XIMStatusNone = 0x800,};
enum MACRO_XPEndDocNotify {XPEndDocNotify = 3,XPStartPageNotify = 4,};
enum MACRO_XSyncCACounter {XSyncCACounter = 1,XSyncCAValueType = 2,XSyncCAValue = 4,XSyncCATestType = 8,XSyncCADelta = 16,XSyncCAEvents = 32,};
enum MACRO_XTestEXCLUSIVE {XTestEXCLUSIVE = 1,};
enum MACRO_X_BigReqEnable {X_BigReqEnable = 0,};
enum MACRO_XagBadAppGroup {XagBadAppGroup = 0,XagNumberErrors = 1,};
enum MACRO_XagNwhitePixel {XagNwhitePixel = 5,};
enum MACRO_XkbDfltXIClass {XkbDfltXIClass = 0x300,XkbDfltXIId = 0x400,};
enum MACRO_XkbGeomAllMask {XkbGeomAllMask = 0x3F,};
enum MACRO_XkbGroup1Index {XkbGroup1Index = 0,XkbGroup2Index = 1,XkbGroup3Index = 2,};
enum MACRO_XkbGroup4Index {XkbGroup4Index = 3,};
enum MACRO_XkbKeypadIndex {XkbKeypadIndex = 3,};
enum MACRO_XkbMaxKbdGroup {XkbMaxKbdGroup = 3,XkbMaxMouseKeysBtn = 4,};
enum MACRO_XkbMaxKeyCount {XkbMaxKeyCount = 248,};
enum MACRO_XkbMaxKeyTypes {XkbMaxKeyTypes = 255,};
enum MACRO_XkbNamesNotify {XkbNamesNotify = 6,};
enum MACRO_XkbNoIndicator {XkbNoIndicator = 0xFF,};
enum MACRO_XkmFileVersion {XkmFileVersion = 15,};
enum MACRO_XkmIllegalFile {XkmIllegalFile = -1,};
enum MACRO_XkmKeyHasTypes {XkmKeyHasTypes = 0xF,};
enum MACRO_XkmKeymapLegal {XkmKeymapLegal = 127,};
enum MACRO_XkmLayoutLegal {XkmLayoutLegal = 117,};
enum MACRO_XpmColorFailed {XpmColorFailed = -4,};
enum MACRO_XpmFileInvalid {XpmFileInvalid = -2,};
enum MACRO_XpmReturnInfos {XpmReturnInfos = 256,XpmReturnPixels = 512,XpmExtensions = 1024,};
enum MACRO_XtSMDontChange {XtSMDontChange = 5,};
enum MACRO_XtTableReplace {XtTableReplace = 0,XtTableAugment = 1,XtTableOverride = 2,};
enum MACRO_XtTableUnmerge {XtTableUnmerge = 3,};
enum MACRO_XvBadExtension {XvBadExtension = 1,XvAlreadyGrabbed = 2,};
enum MACRO_XvMCBadContext {XvMCBadContext = 0,XvMCBadSurface = 1,XvMCBadSubpicture = 2,};
enum MACRO_XvNoReasonMask {XvNoReasonMask = 0,};
enum MACRO__BITS_IPCTYPES {_BITS_IPCTYPES_H = 1,};
enum MACRO__BITS_SOCKADDR {_BITS_SOCKADDR_H = 1,};
enum MACRO__NETINET_IF_TR {_NETINET_IF_TR_H = 1,};
enum MACRO__POSIX_THREADS {_POSIX_THREADS = 200112,_POSIX_REENTRANT_FUNCTIONS = 1,_POSIX_THREAD_SAFE_FUNCTIONS = 200112,_POSIX_THREAD_PRIORITY_SCHEDULING = 200112,_POSIX_THREAD_ATTR_STACKSIZE = 200112,_POSIX_THREAD_ATTR_STACKADDR = 200112,_POSIX_THREAD_PRIO_INHERIT = 200112,_POSIX_THREAD_PRIO_PROTECT = 200112,_POSIX_SEMAPHORES = 200112,_POSIX_REALTIME_SIGNALS = 200112,_POSIX_ASYNCHRONOUS_IO = 200112,_POSIX_ASYNC_IO = 1,};
enum MACRO__RPC_AUTH_UNIX {_RPC_AUTH_UNIX_H = 1,};
enum MACRO__SYS_SYSMACROS {_SYS_SYSMACROS_H = 1,_BITS_PTHREADTYPES_H = 1,};
enum MACRO___FILE_defined {__FILE_defined = 1,____FILE_defined = 1,};
enum MACRO__deviceFocusIn {_deviceFocusIn = 0,_deviceFocusOut = 1,};
enum MACRO_sz_RECORDRANGE {sz_RECORDRANGE = 24,sz_xRecordRange = 24,sz_xRecordQueryVersionReq = 8,sz_xRecordQueryVersionReply = 32,sz_xRecordCreateContextReq = 20,sz_xRecordRegisterClientsReq = 20,sz_xRecordUnregisterClientsReq = 12,sz_xRecordGetContextReq = 8,sz_xRecordGetContextReply = 32,sz_xRecordEnableContextReq = 8,sz_xRecordEnableContextReply = 32,sz_xRecordDisableContextReq = 8,sz_xRecordFreeContextReq = 8,};
enum MACRO_sz_xXResClient {sz_xXResClient = 8,sz_xXResType = 8,sz_xXResQueryVersionReq = 8,sz_xXResQueryVersionReply = 32,sz_xXResQueryClientsReq = 4,sz_xXResQueryClientsReply = 32,sz_xXResQueryClientResourcesReq = 8,sz_xXResQueryClientResourcesReply = 32,sz_xXResQueryClientPixmapBytesReq = 8,sz_xXResQueryClientPixmapBytesReply = 32,};
enum MACRO_sz_xkmFileInfo {sz_xkmFileInfo = 8,sz_xkmSectionInfo = 8,sz_xkmKeyTypeDesc = 8,sz_xkmKTMapEntryDesc = 4,sz_xkmModsDesc = 4,sz_xkmVModMapDesc = 4,sz_xkmSymInterpretDesc = 16,sz_xkmBehaviorDesc = 4,sz_xkmActionDesc = 8,};
enum MACRO_xvmcNumRequest {xvmcNumRequest = 10,};
typedef struct _MultiSinkClassRec *MultiSinkObjectClass;
typedef struct _985C3B0B1950C24006043DC21969E304 *ObjectClassExtension;
typedef struct _PanedConstraintsPart PanedConstraintsPart;
typedef struct _QueuedRequestInfoRec QueuedRequestInfoRec;
typedef struct _ScrollbarClassRec *ScrollbarWidgetClass;
typedef struct _SessionShellClassRec SessionShellClassRec;
typedef struct _SmeThreeDClassRec *SmeThreeDObjectClass;
typedef struct _TMComplexBindDataRec TMComplexBindDataRec;
typedef struct _TMSimpleBindProcsRec TMSimpleBindProcsRec;
typedef struct _TMSimpleStateTreeRec TMSimpleStateTreeRec;
typedef struct _419D850E958B0F42F8B9D5E0BB3E2ED8 *TransientShellWidget;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F VendorShellClassPart;
struct WBXMLExtValueEntry_s { char *xmlName;unsigned char wbxmlToken;};
struct WBXMLPublicIDEntry_s {unsigned int wbxmlPublicID; char *xmlPublicID; char *xmlRootElt; char *xmlDTD;};
typedef struct _0633EDD3133237A2FCFD0D477CC3F2C1 XBellFeedbackControl;
typedef struct _4FA264C19AF857256A85E546E5BB1960 XF86VidModeSyncRange;
typedef struct _C1314179BE3A0EB70B2FB159EDD63B8A XGraphicsExposeEvent;
typedef struct _AE71E2F0BA42A771B72098AA93CA26BC XRecordInterceptData;
typedef struct _36DEF595F1A226E1F4FE3B5A16E1057B XSelectionClearEvent;
typedef struct _C61370466789CEEC8D7677AF1FE7B66E XSetWindowAttributes;
typedef struct _49E0976F54CAA6C31E6EB46E11375E9B XStringFeedbackState;
typedef struct _BD577CFD808EB4E77A4E3752FBFBD993 XSyncAlarmAttributes;
typedef struct _XawTextSelectionSalt XawTextSelectionSalt;
typedef struct _DA4C8A7C662E901D031392A43A7446A0 XdbeScreenVisualInfo;
typedef struct _XkbComponentNames *XkbComponentNamesPtr;
typedef struct _XkbComponentNames XkbComponentNamesRec;
typedef struct _XkbConfigRtrnPriv *XkbConfigRtrnPrivPtr;
typedef struct _XkbConfigRtrnPriv XkbConfigRtrnPrivRec;
typedef struct _XkbRedirectKeyAction XkbRedirectKeyAction;
typedef struct _XmuDisplayQueueEntry XmuDisplayQueueEntry;
typedef struct _XtCheckpointTokenRec XtCheckpointTokenRec;
typedef struct _87D722ECD21497B94ED1D7223FEC05F4 XtDestroyHookDataRec;
struct _FontScaleAliasEntry {char *resolved;};
typedef struct _447FC71AB694A71F5F8338F97A6324BE _IceConnectToYouInfo;
struct _LbxBitmapCompMethod {char *methodName;int inited;int methodOpCode;int (*compInit)(void);int (*compFunc)(unsigned char *, unsigned char *, int, int, int, int, int, int *);int (*decompFunc)(unsigned char *, unsigned char *, int, int, int, int);};
struct _LbxPixmapCompMethod {char *methodName;unsigned int formatMask;int depthCount;int depths[5];int inited;int methodOpCode;int (*compInit)(void);int (*compFunc)(char *, char *, int, int, int, int, int, int *);int (*decompFunc)(char *, char *, int, int);};
struct _XkbConfigUnboundMod {unsigned char what;unsigned char mods;unsigned short vmods;short merge;char *name;};
struct _XkbDeviceLedChanges {unsigned short led_class;unsigned short led_id;unsigned int defined;struct _XkbDeviceLedChanges *next;};
struct _XkbIndicatorChanges {unsigned int state_changes;unsigned int map_changes;};
typedef int __kernel_suseconds_t;
struct _bfd_window_internal;
struct bfd_elf_version_deps {struct bfd_elf_version_deps *next;struct bfd_elf_version_tree *version_needed;};
struct bfd_elf_version_expr {struct bfd_elf_version_expr *next; char *pattern; char *symbol;unsigned int symver : 1;unsigned int script : 1;unsigned int mask : 3;};
struct bfd_link_needed_list {struct bfd_link_needed_list *next;bfd *by; char *name;};
typedef struct _B2D1347A7314B3F7BD8A6C26E40DE0B3 deviceKeyStateNotify;
typedef struct _9260E9DF4F900591ED372CA82BEE9A23 fsAccessContextError;
typedef struct _29DBA087DFE16744A29CB8F8CD68D43B fsCreateACExtraReply;
typedef struct _B8340C644CDB6E95F3781F01B22F6B41 fsGetCataloguesReply;
typedef struct _90E70BB8598364AAEAF6E156E433A864 fsGetResolutionReply;
enum ieee1284_devid_flags {F1284_FRESH = 0x2,};
enum ieee1284_status_bits {S1284_NFAULT = 0x8,S1284_SELECT = 0x10,S1284_PERROR = 0x20,S1284_NACK = 0x40,S1284_BUSY = 0x80,S1284_INVERTED = 0x80,};
struct ipx_route_definition {unsigned int ipx_network;unsigned int ipx_router_network;unsigned char ipx_router_node[6];};
typedef struct _C76765155B02FA21702E864CD4488A00 jas_iccattrvalinfo_t;
typedef struct _B14224ABEA533B24DFD259D862A6483B jas_image_cmptparm_t;
typedef struct _4C33C3844275DD1394D2B5937B049BB9 jas_stream_fileobj_t;
typedef union _7B6D3CF7C92E6402FF2DDB4E46F022F4 pthread_rwlockattr_t;
struct sensors_feature_data {int number; char *name;int mapping;int unused;int mode;};
typedef struct _101ED56796A31C5C092EFC61C0F81522 smCloseConnectionMsg;
typedef struct _FD24C124EC918F75BF8194FC7995E204 smInteractRequestMsg;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smPropertiesReplyMsg;
typedef struct _EEC12600E3B3BC42C851475B8200B3A2 sync_serial_settings;
struct vm86plus_info_struct {unsigned int force_return_for_pic : 1;unsigned int vm86dbg_active : 1;unsigned int vm86dbg_TFpendig : 1;unsigned int unused : 28;unsigned int is_vm86pus : 1;unsigned char vm86dbg_intxxtab[32];};
typedef struct _91B6CB490464A345E007449761AA48F2 xAllocColorPlanesReq;
typedef struct _AppleWMFrameDraw xAppleWMFrameDrawReq;
typedef struct _F683121DA6B0B811B23B9D483FF7482A xConvertSelectionReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXGetInputCountReq;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXRemoveInputReply;
typedef struct _DA732864DAD897F0B587BCCAD8E078EE xDPMSGetVersionReply;
typedef struct _3B895FF4AB049C141C5F7C25E8036379 xDeviceResolutionCtl;
typedef struct _XEVIGetVisualInfoReq xEVIGetVisualInfoReq;
typedef struct GLXCreateContext xGLXCreateContextReq;
typedef struct GLXCreatePbuffer xGLXCreatePbufferReq;
typedef struct GLXDestroyPixmap xGLXDestroyPixmapReq;
typedef struct GLXDestroyWindow xGLXDestroyWindowReq;
typedef struct _861FAFCB43E78E06EE70900C6267245C xGLXGetTexImageReply;
typedef struct _582DBE3FFCEAF5F2BDC86CE4805EFD64 xGLXMakeCurrentReply;
typedef struct GLXVendorPrivate xGLXVendorPrivateReq;
typedef struct _C16308A46254792F555119C61B977CA2 xGetDeviceControlReq;
typedef struct _76C432023C30A60D6F0CA03B71EF1A2A xGetDeviceFocusReply;
typedef struct _621D16500987A711CC39A0AD4484DBF8 xGetScreenSaverReply;
typedef struct _5763F2EC7349805D26B2ED34581CC2B6 xGrabDeviceButtonReq;
typedef struct _0E6A401F8BD845D438E717B135D77D29 xLbxGetPropertyReply;
typedef struct _CF062F67C3439FCE826EEADEB80EF798 xLbxInternAtomsReply;
typedef struct _LbxInvalidateTag xLbxInvalidateTagReq;
typedef struct _LbxListenToAllEvent xLbxListenToAllEvent;
typedef struct _LbxListenToOneEvent xLbxListenToOneEvent;
typedef struct _LbxReleaseCmapEvent xLbxReleaseCmapEvent;
typedef struct _LbxSendTagDataEvent xLbxSendTagDataEvent;
typedef struct _5E8F645B7662834A694E868B27EBBB24 xListExtensionsReply;
typedef struct _3BEEF239534EE9E2D4AD58999E56F197 xListInputDevicesReq;
typedef struct _C65DFB72B3FBEEE777E9E71274DF712D xListPropertiesReply;
typedef struct _xPrintAttributeEvent xPrintAttributeEvent;
typedef struct _PrintSelectInput xPrintSelectInputReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xQueryDeviceStateReq;
typedef struct _C32D75228195D08F6D42072DC87ED14F xQueryExtensionReply;
typedef struct _F21D8018CF145B47A329D27C35E96B99 xQueryTextExtentsReq;
typedef struct _4A5D5D546E7D786034D6559D1E5FBE4A xRRQueryVersionReply;
typedef struct _6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordGetContextReq;
typedef struct _2AC87F894EE3258143DDE890FCFACB0D xRenderFreeGlyphsReq;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTrapezoidsReq;
typedef struct _F8536B884003ADBD90188302B8AD267C xRotatePropertiesReq;
typedef struct _ShapeSelectInput xShapeSelectInputReq;
typedef struct _70CE59A0CFDF5BD02F17410240B55142 xStringFeedbackState;
typedef struct _xSyncDestroyAlarmReq xSyncDestroyAlarmReq;
typedef struct _4CEF0DA0B6BB912CC29F60746948E744 xSyncInitializeReply;
typedef struct _281923904974B9915ABD548A82CFE427 xSyncQueryAlarmReply;
typedef struct _xSyncQueryCounterReq xSyncQueryCounterReq;
typedef struct _C1A5A3DCCCA94F161802FCE22321BD34 xXCMiscGetVersionReq;
typedef struct _FFD82B8BDC4823D2EC5A0D9DC75F48E0 xXCMiscGetXIDListReq;
typedef struct _932C98117C7FBC3E6D86F96BD678D2D1 xXDGAQueryModesReply;
typedef struct _XDGAQueryVersion xXDGAQueryVersionReq;
typedef struct _7545E18792FF2C20F9BB4220259E75A2 xXF86VidModeModeInfo;
typedef struct _5EC50BA61A7AE0BB02D4340472A7D806 xXFixesCopyRegionReq;
typedef struct _D4E78A805D3B4AC5F724CECE1911262F xXFixesHideCursorReq;
typedef struct _D4E78A805D3B4AC5F724CECE1911262F xXFixesShowCursorReq;
typedef struct _XResQueryClients xXResQueryClientsReq;
typedef struct _XResQueryVersion xXResQueryVersionReq;
typedef struct _F81C4DFCF4FD8DAD229D0D8C30F8406E xXTestGrabControlReq;
typedef struct _XcupQueryVersion xXcupQueryVersionReq;
typedef struct _XevieSelectInput xXevieSelectInputReq;
typedef struct _4496CBA88907C11C6361D9179E75F570 xXineramaIsActiveReq;
enum xcb_access_control_t {XCB_ACCESS_CONTROL_DISABLE = 0x0,XCB_ACCESS_CONTROL_ENABLE = 0x1,};
enum xcb_colormap_alloc_t {XCB_COLORMAP_ALLOC_NONE = 0x0,XCB_COLORMAP_ALLOC_ALL = 0x1,};
typedef xcb_value_error_t xcb_colormap_error_t;
enum xcb_colormap_state_t {XCB_COLORMAP_STATE_UNINSTALLED = 0x0,XCB_COLORMAP_STATE_INSTALLED = 0x1,};
struct xcb_depth_iterator_t {xcb_depth_t *data;int rem;int index;};
typedef xcb_value_error_t xcb_drawable_error_t;
enum xcb_mapping_status_t {XCB_MAPPING_STATUS_SUCCESS = 0x0,XCB_MAPPING_STATUS_BUSY = 0x1,XCB_MAPPING_STATUS_FAILURE = 0x2,};
struct xcb_point_iterator_t {xcb_point_t *data;int rem;int index;};
enum xcb_query_shape_of_t {XCB_QUERY_SHAPE_OF_LARGEST_CURSOR = 0x0,XCB_QUERY_SHAPE_OF_FASTEST_TILE = 0x1,XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE = 0x2,};
enum xcb_randr_rotation_t {XCB_RANDR_ROTATION_ROTATE_0 = 0x1,XCB_RANDR_ROTATION_ROTATE_90 = 0x2,XCB_RANDR_ROTATION_ROTATE_180 = 0x4,XCB_RANDR_ROTATION_ROTATE_270 = 0x8,XCB_RANDR_ROTATION_REFLECT_X = 0x10,XCB_RANDR_ROTATION_REFLECT_Y = 0x20,};
enum xcb_render_pict_op_t {XCB_RENDER_PICT_OP_CLEAR = 0x0,XCB_RENDER_PICT_OP_SRC = 0x1,XCB_RENDER_PICT_OP_DST = 0x2,XCB_RENDER_PICT_OP_OVER = 0x3,XCB_RENDER_PICT_OP_OVER_REVERSE = 0x4,XCB_RENDER_PICT_OP_IN = 0x5,XCB_RENDER_PICT_OP_IN_REVERSE = 0x6,XCB_RENDER_PICT_OP_OUT = 0x7,XCB_RENDER_PICT_OP_OUT_REVERSE = 0x8,XCB_RENDER_PICT_OP_ATOP = 0x9,XCB_RENDER_PICT_OP_ATOP_REVERSE = 0xA,XCB_RENDER_PICT_OP_XOR = 0xB,XCB_RENDER_PICT_OP_ADD = 0xC,XCB_RENDER_PICT_OP_SATURATE = 0xD,XCB_RENDER_PICT_OP_DISJOINT_CLEAR = 0x10,XCB_RENDER_PICT_OP_DISJOINT_SRC = 0x11,XCB_RENDER_PICT_OP_DISJOINT_DST = 0x12,XCB_RENDER_PICT_OP_DISJOINT_OVER = 0x13,XCB_RENDER_PICT_OP_DISJOINT_OVER_REVERSE = 0x14,XCB_RENDER_PICT_OP_DISJOINT_IN = 0x15,XCB_RENDER_PICT_OP_DISJOINT_IN_REVERSE = 0x16,XCB_RENDER_PICT_OP_DISJOINT_OUT = 0x17,XCB_RENDER_PICT_OP_DISJOINT_OUT_REVERSE = 0x18,XCB_RENDER_PICT_OP_DISJOINT_ATOP = 0x19,XCB_RENDER_PICT_OP_DISJOINT_ATOP_REVERSE = 0x1A,XCB_RENDER_PICT_OP_DISJOINT_XOR = 0x1B,XCB_RENDER_PICT_OP_CONJOINT_CLEAR = 0x20,XCB_RENDER_PICT_OP_CONJOINT_SRC = 0x21,XCB_RENDER_PICT_OP_CONJOINT_DST = 0x22,XCB_RENDER_PICT_OP_CONJOINT_OVER = 0x23,XCB_RENDER_PICT_OP_CONJOINT_OVER_REVERSE = 0x24,XCB_RENDER_PICT_OP_CONJOINT_IN = 0x25,XCB_RENDER_PICT_OP_CONJOINT_IN_REVERSE = 0x26,XCB_RENDER_PICT_OP_CONJOINT_OUT = 0x27,XCB_RENDER_PICT_OP_CONJOINT_OUT_REVERSE = 0x28,XCB_RENDER_PICT_OP_CONJOINT_ATOP = 0x29,XCB_RENDER_PICT_OP_CONJOINT_ATOP_REVERSE = 0x2A,XCB_RENDER_PICT_OP_CONJOINT_XOR = 0x2B,};
struct xcb_setup_iterator_t {xcb_setup_t *data;int rem;int index;};
enum xcb_subwindow_mode_t {XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN = 0x0,XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS = 0x1,};
enum xcb_sync_valuetype_t {XCB_SYNC_VALUETYPE_ABSOLUTE = 0x0,XCB_SYNC_VALUETYPE_RELATIVE = 0x1,};
enum xcb_x_print_detail_t {XCB_X_PRINT_DETAIL_START_JOB_NOTIFY = 0x1,XCB_X_PRINT_DETAIL_END_JOB_NOTIFY = 0x2,XCB_X_PRINT_DETAIL_START_DOC_NOTIFY = 0x3,XCB_X_PRINT_DETAIL_END_DOC_NOTIFY = 0x4,XCB_X_PRINT_DETAIL_START_PAGE_NOTIFY = 0x5,XCB_X_PRINT_DETAIL_END_PAGE_NOTIFY = 0x6,};
enum xcb_xevie_datatype_t {XCB_XEVIE_DATATYPE_UNMODIFIED = 0x0,XCB_XEVIE_DATATYPE_MODIFIED = 0x1,};
typedef struct _xkbAnyDoodadWireDesc xkbAnyDoodadWireDesc;
typedef struct _xkbGetCompatMapReply xkbGetCompatMapReply;
typedef struct _xkbGetKbdByNameReply xkbGetKbdByNameReply;
typedef struct _xkbLatchLockState xkbLatchLockStateReq;
typedef struct _xkbListComponents xkbListComponentsReq;
typedef struct _xkbNewKeyboardNotify xkbNewKeyboardNotify;
typedef struct _xkbPerClientFlags xkbPerClientFlagsReq;
typedef struct _xkbUseExtensionReply xkbUseExtensionReply;
typedef struct _QueryAdaptorsReply xvQueryAdaptorsReply;
typedef struct _431023746282E83C34446CE1DCC859AA xvQueryBestSizeReply;
typedef struct _740C46A196F463FF63DE6C8E1A8E1740 xvmcCreateContextReq;
typedef struct _14A823895445B846828F3D4F9D47C3C9 xvmcCreateSurfaceReq;
typedef struct _CFC98DDC8C48D7D4D5B40C9CE62D3BBC ApplicationShellRec;
typedef struct _AsciiSrcClassRec *AsciiSrcObjectClass;
typedef struct _ConstraintClassPart ConstraintClassPart;
typedef struct _4F05924539240263F877D05CF063C89B DMXScreenAttributes;
typedef struct _1DEEF64472AA4AF2F540A924A55E576B DMXWindowAttributes;
enum FT_Glyph_BBox_Mode_ {FT_GLYPH_BBOX_UNSCALED = 0x0,FT_GLYPH_BBOX_SUBPIXELS = 0x0,FT_GLYPH_BBOX_GRIDFIT = 0x1,FT_GLYPH_BBOX_TRUNCATE = 0x2,FT_GLYPH_BBOX_PIXELS = 0x3,};
typedef struct FT_WinFNT_HeaderRec_ FT_WinFNT_HeaderRec;
typedef struct _21E1A9CAE728A96D553CF326E63FACDD *FontBitmapFormatPtr;
typedef struct _21E1A9CAE728A96D553CF326E63FACDD FontBitmapFormatRec;
typedef struct _522CF4EE19F54DFCAFCA34FCD3871800 FontCacheStatistics;
typedef struct _FontPatternCache *FontPatternCachePtr;
typedef struct _FormConstraintsPart FormConstraintsPart;
typedef struct internalCallbackRec InternalCallbackRec;
typedef struct _JAWT_DrawingSurface JAWT_DrawingSurface;
typedef struct _LbxBitmapCompMethod LbxBitmapCompMethod;
typedef struct _LbxPixmapCompMethod LbxPixmapCompMethod;
typedef void *LbxStreamCompHandle;
enum MACRO_AsyncKeyboard {AsyncKeyboard = 3,SyncKeyboard = 4,};
enum MACRO_BOOTPARAMPROC {BOOTPARAMPROC_WHOAMI = 1,BOOTPARAMPROC_GETFILE = 2,};
enum MACRO_BOOTPARAMPROG {BOOTPARAMPROG = 100026,};
enum MACRO_BOOTPARAMVERS {BOOTPARAMVERS = 1,};
enum MACRO_BadFontFormat {BadFontFormat = 88,};
enum MACRO_BadPictFormat {BadPictFormat = 0,BadPicture = 1,BadPictOp = 2,};
enum MACRO_BitmapSuccess {BitmapSuccess = 0,BitmapOpenFailed = 1,BitmapFileInvalid = 2,};
enum MACRO_ButtonRelease {ButtonRelease = 5,};
enum MACRO_CD_FRAMEWORDS {CD_FRAMEWORDS = 1176,};
enum MACRO_CapProjecting {CapProjecting = 3,};
enum MACRO_CenterGravity {CenterGravity = 5,};
enum MACRO_ClientMessage {ClientMessage = 33,};
enum MACRO_ColormapEvent {lbxsz_ColormapEvent = 16,lbxupsz_ColormapEvent = 14,};
enum MACRO_DEFAULT_GLYPH {DEFAULT_GLYPH_CACHING_MODE = 1,};
enum MACRO_DestroyNotify {DestroyNotify = 17,};
enum MACRO_DisableAccess {DisableAccess = 0,};
enum MACRO_DontCareState {DontCareState = 0,ZoomState = 2,InactiveState = 4,};
enum MACRO_EI_ABIVERSION {EI_ABIVERSION = 8,EI_PAD = 9,};
enum MACRO_EXEC_PAGESIZE {EXEC_PAGESIZE = 4096,};
enum MACRO_FARCSPERBATCH {FARCSPERBATCH = 256,};
enum MACRO_FONT_ENCODING {FONT_ENCODING_UNICODE = 1,FONT_ENCODING_TRUETYPE = 2,FONT_ENCODING_POSTSCRIPT = 3,FONT_SHOW_INFO = 1,FONT_SHOW_PROPS = 2,FONT_SHOW_METRICS = 4,FONT_SHOW_GLYPHS = 8,FONT_SHOW_ALL = 11,};
enum MACRO_FRCTSPERBATCH {FRCTSPERBATCH = 256,};
enum MACRO_FSBadIDChoice {FSBadIDChoice = 6,};
enum MACRO_FamilyNetname {FamilyNetname = 254,};
enum MACRO_FeedbackClass {FeedbackClass = 3,ProximityClass = 4,};
enum MACRO_FontAliasType {FontAliasType = 0x1000,};
enum MACRO_FontNameAlias {FontNameAlias = 82,};
enum MACRO_ForgetGravity {ForgetGravity = 0,NorthWestGravity = 1,NorthGravity = 2,};
enum MACRO_GLXBadContext {GLXBadContext = 0,GLXBadContextState = 1,GLXBadDrawable = 2,};
enum MACRO_GLXBadPbuffer {GLXBadPbuffer = 10,};
enum MACRO_GravityNotify {GravityNotify = 24,};
enum MACRO_IWEVPMKIDCAND {IWEVPMKIDCAND = 0x8C09,};
enum MACRO_IceAuthFailed {IceAuthFailed = 5,};
enum MACRO_IceProtoMajor {IceProtoMajor = 1,};
enum MACRO_IceProtoMinor {IceProtoMinor = 0,};
enum MACRO_KeysymModMask {KeysymModMask = 134217728,AnyButtonMask = 268435456,};
enum MACRO_LbxNumberReqs {LbxNumberReqs = 44,};
enum MACRO_MAXMAPNAMELEN {MAXMAPNAMELEN = 255,};
enum MACRO_MAXNETNAMELEN {MAXNETNAMELEN = 255,};
enum MACRO_MAXPACKETSIZE {MAXPACKETSIZE = 512,};
enum MACRO_MAXRESOLVSORT {MAXRESOLVSORT = 10,};
enum MACRO_MIN_CACHEABLE {MIN_CACHEABLE_LEN = 8,};
enum MACRO_MODE_SENSE_10 {MODE_SENSE_10 = 0x5A,};
enum MACRO_MOD_EXCLUSIVE {MOD_EXCLUSIVE = 8192,};
enum MACRO_MappingNotify {MappingNotify = 34,};
enum MACRO_ModeBitsShift {ModeBitsShift = 6,};
enum MACRO_NCURSES_PANEL {NCURSES_PANEL_H_incl = 1,};
enum MACRO_NoExposeEvent {lbxsz_NoExposeEvent = 12,lbxupsz_NoExposeEvent = 11,};
enum MACRO_NotifyPointer {NotifyPointer = 5,};
enum MACRO_NullFontEntry {NullFontEntry = 0,};
enum MACRO_NullFontTable {NullFontTable = 0,};
enum MACRO_PIO_UNIMAPCLR {PIO_UNIMAPCLR = 0x4B68,};
enum MACRO_PictOpMaximum {PictOpMaximum = 13,PictOpDisjointMinimum = 16,};
enum MACRO_PictOpMinimum {PictOpMinimum = 0,};
enum MACRO_PixmapSuccess {PixmapSuccess = 0,PixmapOpenFailed = -1,};
enum MACRO_PointerWindow {PointerWindow = 0,InputFocus = 1,};
enum MACRO_PolyEdgeSharp {PolyEdgeSharp = 0,PolyEdgeSmooth = 1,};
enum MACRO_PropertyEvent {lbxsz_PropertyEvent = 20,lbxupsz_PropertyEvent = 17,};
enum MACRO_QueuedAlready {QueuedAlready = 0,QueuedAfterReading = 1,QueuedAfterFlush = 2,};
enum MACRO_READ_CAPACITY {READ_CAPACITY = 0x25,READ_10 = 0x28,};
enum MACRO_READ_POSITION {READ_POSITION = 0x34,};
enum MACRO_ReparentEvent {lbxsz_ReparentEvent = 24,lbxupsz_ReparentEvent = 21,};
enum MACRO_RepeatReflect {RepeatReflect = 3,};
enum MACRO_ResizeRequest {ResizeRequest = 25,};
enum MACRO_SG_LIB_DRIVER {SG_LIB_DRIVER_OK = 0,SG_LIB_DRIVER_BUSY = 1,SG_LIB_DRIVER_SOFT = 2,SG_LIB_DRIVER_MEDIA = 3,SG_LIB_DRIVER_ERROR = 4,SG_LIB_DRIVER_INVALID = 5,SG_LIB_DRIVER_TIMEOUT = 6,SG_LIB_DRIVER_HARD = 7,SG_LIB_DRIVER_SENSE = 8,SG_LIB_SUGGEST_RETRY = 16,SG_LIB_SUGGEST_ABORT = 32,SG_LIB_SUGGEST_REMAP = 48,SG_LIB_SUGGEST_DIE = 64,SG_LIB_SUGGEST_SENSE = 128,SG_LIB_SUGGEST_IS_OK = 255,SG_LIB_DRIVER_MASK = 15,SG_LIB_SUGGEST_MASK = 240,SG_LIB_CAT_TIMEOUT = 33,};
enum MACRO_SIOCAX25NOUID {SIOCAX25NOUID = 35299,};
enum MACRO_SIOCAX25OPTRT {SIOCAX25OPTRT = 35303,};
enum MACRO_SIOCGIFHWADDR {SIOCGIFHWADDR = 0x8927,};
enum MACRO_SIOCGIFMETRIC {SIOCGIFMETRIC = 0x891D,};
enum MACRO_SIOCGIFPFLAGS {SIOCGIFPFLAGS = 0x8935,};
enum MACRO_SIOCGIFTXQLEN {SIOCGIFTXQLEN = 0x8942,};
enum MACRO_SIOCGIWAPLIST {SIOCGIWAPLIST = 0x8B17,};
enum MACRO_SIOCGIWENCODE {SIOCGIWENCODE = 0x8B2B,};
enum MACRO_SIOCGIWTHRSPY {SIOCGIWTHRSPY = 0x8B13,};
enum MACRO_SIOCRSGL2CALL {SIOCRSGL2CALL = 35301,};
enum MACRO_SIOCRSSL2CALL {SIOCRSSL2CALL = 35298,};
enum MACRO_SIOCSIFHWADDR {SIOCSIFHWADDR = 0x8924,};
enum MACRO_SIOCSIFMETRIC {SIOCSIFMETRIC = 0x891E,};
enum MACRO_SIOCSIFPFLAGS {SIOCSIFPFLAGS = 0x8934,};
enum MACRO_SIOCSIFTXQLEN {SIOCSIFTXQLEN = 0x8943,};
enum MACRO_SIOCSIWCOMMIT {SIOCSIWCOMMIT = 0x8B00,};
enum MACRO_SIOCSIWENCODE {SIOCSIWENCODE = 0x8B2A,};
enum MACRO_SIOCSIWTHRSPY {SIOCSIWTHRSPY = 0x8B12,};
enum MACRO_SLC_NOSUPPORT {SLC_NOSUPPORT = 0,SLC_CANTCHANGE = 1,SLC_VARIABLE = 2,SLC_DEFAULT = 3,SLC_LEVELBITS = 3,SLC_FUNC = 0,SLC_FLAGS = 1,SLC_VALUE = 2,SLC_ACK = 128,SLC_FLUSHIN = 64,SLC_FLUSHOUT = 32,};
enum MACRO_SO_ACCEPTCONN {SO_ACCEPTCONN = 30,SO_PEERSEC = 31,SO_PASSSEC = 34,};
enum MACRO_SetModeInsert {SetModeInsert = 0,SetModeDelete = 1,};
enum MACRO_ShapeBounding {ShapeBounding = 0,ShapeClip = 1,ShapeInput = 2,};
enum MACRO_ShapeSubtract {ShapeSubtract = 3,ShapeInvert = 4,};
enum MACRO_ShiftMapIndex {ShiftMapIndex = 0,LockMapIndex = 1,ControlMapIndex = 2,};
enum MACRO_ShmCompletion {ShmCompletion = 0,ShmNumberEvents = 1,};
enum MACRO_SmDialogError {SmDialogError = 0,SmDialogNormal = 1,};
enum MACRO_StaticGravity {StaticGravity = 10,};
enum MACRO_TCPOPT_TSTAMP {TCPOPT_TSTAMP_HDR = 16844810,};
enum MACRO_TIOCGHAYESESP {TIOCGHAYESESP = 0x545E,};
enum MACRO_TIOCSERCONFIG {TIOCSERCONFIG = 0x5453,};
enum MACRO_TIOCSERGETLSR {TIOCSERGETLSR = 0x5459,};
enum MACRO_TIOCSHAYESESP {TIOCSHAYESESP = 0x545F,};
enum MACRO_TSPTYPENUMBER {TSPTYPENUMBER = 25,};
enum MACRO_VisualAllMask {VisualAllMask = 0x1FF,};
enum MACRO_WRCTSPERBATCH {WRCTSPERBATCH = 10,ZRCTSPERBATCH = 256,};
enum MACRO_XDamageNotify {XDamageNotify = 0,XDamageNumberEvents = 1,};
enum MACRO_XETrapRelease {XETrapRelease = 3,XETrapVersion = 4,};
enum MACRO_XETrapRequest {XETrapRequest = 3,XETrapEvent = 4,};
enum MACRO_XETrapTransIn {XETrapTransIn = 9,};
enum MACRO_XLookupKeySym {XLookupKeySym = 3,XLookupBoth = 4,};
enum MACRO_XPAttrReplace {XPAttrReplace = 1,XPAttrMerge = 2,};
enum MACRO_XPNoEventMask {XPNoEventMask = 0,XPPrintMask = 1,XPAttributeMask = 2,};
enum MACRO_XPPrintNotify {XPPrintNotify = 0,XPAttributeNotify = 1,};
enum MACRO_XP_ATTRIBUTES {XP_ATTRIBUTES = 5,};
enum MACRO_XdbeBadBuffer {XdbeBadBuffer = 0,};
enum MACRO_XdbeUndefined {XdbeUndefined = 0,XdbeBackground = 1,XdbeUntouched = 2,};
enum MACRO_XkbGroup1Mask {XkbGroup1Mask = 1,XkbGroup2Mask = 2,XkbGroup3Mask = 4,XkbGroup4Mask = 8,XkbAnyGroupMask = 128,};
enum MACRO_XkbLogoDoodad {XkbLogoDoodad = 5,};
enum MACRO_XkbMapDefined {XkbMapDefined = 1,XkbStateDefined = 2,};
enum MACRO_XkbNoModifier {XkbNoModifier = 0xFF,};
enum MACRO_XkbTextDoodad {XkbTextDoodad = 3,XkbIndicatorDoodad = 4,};
enum MACRO_XkbUseCoreKbd {XkbUseCoreKbd = 0x100,XkbUseCorePtr = 0x200,};
enum MACRO_XkmKeymapFile {XkmKeymapFile = 22,};
enum MACRO_XkmLayoutFile {XkmLayoutFile = 21,};
enum MACRO_XkmTypesIndex {XkmTypesIndex = 0,XkmCompatMapIndex = 1,XkmSymbolsIndex = 2,};
enum MACRO_XpauVFilename {XpauVFilename = 1,XpauVMedium = 2,XpauVResolution = 4,XpauVOrientation = 8,XpauVPlex = 16,XpauVCopies = 32,XpauVTitle = 64,};
enum MACRO_XpmColorError {XpmColorError = 1,};
enum MACRO_XtCWQueryOnly {XtCWQueryOnly = 128,};
enum MACRO_XvInvalidTime {XvInvalidTime = 3,XvBadReply = 4,};
enum MACRO_XvMCNumEvents {XvMCNumEvents = 0,XvMCNumErrors = 3,};
enum MACRO_XvStartedMask {XvStartedMask = 1,XvStoppedMask = 2,XvBusyMask = 4,XvPreemptedMask = 8,XvHardErrorMask = 16,};
enum MACRO_XvTopToBottom {XvTopToBottom = 0,XvBottomToTop = 1,};
enum MACRO_XvVideoNotify {XvVideoNotify = 0,XvPortNotify = 1,XvNumEvents = 2,};
enum MACRO__NETINET_IGMP {_NETINET_IGMP_H = 1,};
enum MACRO__POSIX_SHARED {_POSIX_SHARED_MEMORY_OBJECTS = 200112,_POSIX_CPUTIME = 0,_POSIX_THREAD_CPUTIME = 0,_POSIX_REGEXP = 1,_POSIX_READER_WRITER_LOCKS = 200112,_POSIX_SHELL = 1,_POSIX_TIMEOUTS = 200112,_POSIX_SPIN_LOCKS = 200112,_POSIX_SPAWN = 200112,_POSIX_TIMERS = 200112,_POSIX_BARRIERS = 200112,_POSIX_MESSAGE_PASSING = 200112,_POSIX_THREAD_PROCESS_SHARED = 200112,_POSIX_MONOTONIC_CLOCK = 0,_POSIX_CLOCK_SELECTION = 200112,_POSIX_ADVISORY_INFO = 200112,_POSIX_IPV6 = 200112,_POSIX_RAW_SOCKETS = 200112,};
enum MACRO__POSIX_THREAD {_POSIX_THREAD_THREADS_MAX = 64,AIO_PRIO_DELTA_MAX = 20,};
enum MACRO__RPC_AUTH_DES {_RPC_AUTH_DES_H = 1,_RPC_SVC_H = 1,};
enum MACRO__RPC_PMAP_RMT {_RPC_PMAP_RMT_H = 1,};
enum MACRO__SYS_APPARMOR {_SYS_APPARMOR_H = 1,_SYS_DEBUGREG_H = 1,};
enum MACRO__SYS_SENDFILE {_SYS_SENDFILE_H = 1,_SYS_SHM_H = 1,};
enum MACRO__SYS_TTYCHARS {_SYS_TTYCHARS_H = 1,};
enum MACRO___NETINET_UDP {__NETINET_UDP_H = 1,};
enum MACRO_sz_VisualID32 {sz_VisualID32 = 4,sz_xExtendedVisualInfo = 16,sz_xEVIQueryVersionReq = 4,sz_xEVIQueryVersionReply = 32,sz_xEVIGetVisualInfoReq = 8,sz_xEVIGetVisualInfoReply = 32,};
enum MACRO_xvNumRequests {xvNumRequests = 20,};
typedef struct _MenuButtonClass MenuButtonClassPart;
typedef struct _MultiSrcClassRec *MultiSrcObjectClass;
typedef struct _39A4136BB030D7809586100094537552 *OverrideShellWidget;
typedef struct _PanedConstraintsRec PanedConstraintsRec;
typedef struct _PortholeClassRec *PortholeWidgetClass;
typedef struct _RepeaterClassRec *RepeaterWidgetClass;
typedef struct _832302596B16D7C435F01BD429ECA1F5 *ShellClassExtension;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F SimpleMenuClassPart;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F StripChartClassPart;
typedef struct _TMParseStateTreeRec TMParseStateTreeRec;
typedef struct _TMSimpleBindDataRec TMSimpleBindDataRec;
typedef struct _TemplateClassRec *TemplateWidgetClass;
typedef struct _TextSinkClassRec *TextSinkObjectClass;
typedef struct _A6524737EEF8C4DE9F2A62890C064223 *TopLevelShellWidget;
typedef struct _TreeConstraintsPart TreeConstraintsPart;
typedef struct _VendorShellClassRec VendorShellClassRec;
typedef struct _ViewportConstraintsRec *ViewportConstraints;
typedef struct _ViewportClassRec *ViewportWidgetClass;
typedef struct WBXMLAttrValueEntry_s WBXMLAttrValueEntry;
typedef struct WBXMLContentHandler_s WBXMLContentHandler;
typedef void WBXMLListEltCleaner(void *item);
typedef struct WBXMLNameSpaceEntry_s WBXMLNameSpaceEntry;
enum WBXMLTreeNodeType_e {WBXML_TREE_ELEMENT_NODE = 0x0,WBXML_TREE_TEXT_NODE = 0x1,WBXML_TREE_CDATA_NODE = 0x2,WBXML_TREE_PI_NODE = 0x3,WBXML_TREE_TREE_NODE = 0x4,};
typedef struct _9AF668561A3C9CA6386E91513092AD00 XAppleWMNotifyEvent;
typedef struct _702BBE03CA55F2529059C1331C136CB9 XClientMessageEvent;
typedef struct _07EFE3D70871BDBDCA74D2E21165F647 XDestroyWindowEvent;
typedef struct _003ED5EBE9EDC5550508A3829E164254 XDeviceMappingEvent;
typedef struct _477257A9E00A927C5CA4C8DCAD23E65C XF86MiscKbdSettings;
typedef struct _3508950B7FC9B81EB4123657631043D2 XF86VidModeModeInfo;
typedef struct _F3B093D2CE3717F6C8DEE3DEA876E75D XF86VidModeModeLine;
typedef struct _1216BD7A426656BEB445C7268BAB0AB9 XKbdFeedbackControl;
typedef struct _834671796DFF06177BC2ADD32BAB03CC XLedFeedbackControl;
typedef struct _A06AF73261543B69A785AD9B5C737D11 XPixmapFormatValues;
typedef struct _79C6B1010639C7F2EBBCA0EF1CC49774 XPtrFeedbackControl;
typedef struct _647E6F6FB5E1F7CA7AC59F3987F53CE2 XRenderDirectFormat;
typedef struct _9F86842B58D3B4811684B11871470FBD XResizeRequestEvent;
typedef struct _612EFEAF23CFF8A46AC5C5A26952ECB6 XShmCompletionEvent;
typedef struct _XawListReturnStruct XawListReturnStruct;
typedef struct XawPrintShellRec *XawPrintShellWidget;
typedef struct _D8DA3DB8B551D92E16702FBF10C103DD *XawTextLineTablePtr;
typedef struct _DDF2E5A27F0B22B52D0F64042525F7F2 XawTextPositionInfo;
typedef struct _831449F56FD082F867F95B7A85E29B03 XawTextPropertyInfo;
typedef struct _XawTextPropertyList XawTextPropertyList;
typedef struct _XkbCompatChanges *XkbCompatChangesPtr;
typedef struct _XkbCompatChanges XkbCompatChangesRec;
typedef struct _XkbComponentList *XkbComponentListPtr;
typedef struct _XkbComponentList XkbComponentListRec;
typedef struct _XkbComponentName *XkbComponentNamePtr;
typedef struct _XkbComponentName XkbComponentNameRec;
typedef struct _XkbConfigModInfo *XkbConfigModInfoPtr;
typedef struct _XkbConfigModInfo XkbConfigModInfoRec;
typedef struct _XkbDeviceChanges *XkbDeviceChangesPtr;
typedef struct _XkbDeviceChanges XkbDeviceChangesRec;
typedef struct _XkbDeviceLedInfo *XkbDeviceLedInfoPtr;
typedef struct _XkbDeviceLedInfo XkbDeviceLedInfoRec;
typedef struct _XkbGeometrySizes *XkbGeometrySizesPtr;
typedef struct _XkbGeometrySizes XkbGeometrySizesRec;
typedef struct _XkbNamesNotify XkbNamesNotifyEvent;
typedef struct _XkbStateNotifyEvent XkbStateNotifyEvent;
typedef struct _13470DA4B6A7AAE8ACC864F70C5FF73E XtChangeHookDataRec;
typedef struct _5DD49376C74765CB7E96286DDB46181E *XtConfigureHookData;
typedef struct _9D9F8CC524C7DD4F9704759512315B2D XtCreateHookDataRec;
typedef struct _FCBFA738B12E671543F3DA36C81F300F XtPerWidgetInputRec;
typedef struct _E4175BE510398187CE128A5A014B31E0 XvImageFormatValues;
typedef struct _0822494CA8335A3B81E4FAC70FD7E6A7 XvMCMacroBlockArray;
struct _ExifContentPrivate;
typedef struct _D4FB496F61D4660631FE604D96639DD9 _IceConnectToMeInfo;
struct _XkbControlsChanges {unsigned int changed_ctrls;unsigned int enabled_ctrls_changes;int num_groups_changed;};
struct _XkbDeviceBtnAction {unsigned char type;unsigned char flags;unsigned char count;unsigned char button;unsigned char device;};
typedef struct _52CB3FFAB7580FFF5F815C5CB2D8B1B5 __GLXtexImageHeader;
typedef int __rlimit_resource_t;
enum bfd_link_order_type {bfd_undefined_link_order = 0x0,bfd_indirect_link_order = 0x1,bfd_data_link_order = 0x2,bfd_section_reloc_link_order = 0x3,bfd_symbol_reloc_link_order = 0x4,};
enum bfd_reloc_code_real {_dummy_first_bfd_reloc_code_real = 0x0,BFD_RELOC_64 = 0x1,BFD_RELOC_32 = 0x2,BFD_RELOC_26 = 0x3,BFD_RELOC_24 = 0x4,BFD_RELOC_16 = 0x5,BFD_RELOC_14 = 0x6,BFD_RELOC_8 = 0x7,BFD_RELOC_64_PCREL = 0x8,BFD_RELOC_32_PCREL = 0x9,BFD_RELOC_24_PCREL = 0xA,BFD_RELOC_16_PCREL = 0xB,BFD_RELOC_12_PCREL = 0xC,BFD_RELOC_8_PCREL = 0xD,BFD_RELOC_32_SECREL = 0xE,BFD_RELOC_32_GOT_PCREL = 0xF,BFD_RELOC_16_GOT_PCREL = 0x10,BFD_RELOC_8_GOT_PCREL = 0x11,BFD_RELOC_32_GOTOFF = 0x12,BFD_RELOC_16_GOTOFF = 0x13,BFD_RELOC_LO16_GOTOFF = 0x14,BFD_RELOC_HI16_GOTOFF = 0x15,BFD_RELOC_HI16_S_GOTOFF = 0x16,BFD_RELOC_8_GOTOFF = 0x17,BFD_RELOC_64_PLT_PCREL = 0x18,BFD_RELOC_32_PLT_PCREL = 0x19,BFD_RELOC_24_PLT_PCREL = 0x1A,BFD_RELOC_16_PLT_PCREL = 0x1B,BFD_RELOC_8_PLT_PCREL = 0x1C,BFD_RELOC_64_PLTOFF = 0x1D,BFD_RELOC_32_PLTOFF = 0x1E,BFD_RELOC_16_PLTOFF = 0x1F,BFD_RELOC_LO16_PLTOFF = 0x20,BFD_RELOC_HI16_PLTOFF = 0x21,BFD_RELOC_HI16_S_PLTOFF = 0x22,BFD_RELOC_8_PLTOFF = 0x23,BFD_RELOC_68K_GLOB_DAT = 0x24,BFD_RELOC_68K_JMP_SLOT = 0x25,BFD_RELOC_68K_RELATIVE = 0x26,BFD_RELOC_32_BASEREL = 0x27,BFD_RELOC_16_BASEREL = 0x28,BFD_RELOC_LO16_BASEREL = 0x29,BFD_RELOC_HI16_BASEREL = 0x2A,BFD_RELOC_HI16_S_BASEREL = 0x2B,BFD_RELOC_8_BASEREL = 0x2C,BFD_RELOC_RVA = 0x2D,BFD_RELOC_8_FFnn = 0x2E,BFD_RELOC_32_PCREL_S2 = 0x2F,BFD_RELOC_16_PCREL_S2 = 0x30,BFD_RELOC_23_PCREL_S2 = 0x31,BFD_RELOC_HI22 = 0x32,BFD_RELOC_LO10 = 0x33,BFD_RELOC_GPREL16 = 0x34,BFD_RELOC_GPREL32 = 0x35,BFD_RELOC_I960_CALLJ = 0x36,BFD_RELOC_NONE = 0x37,BFD_RELOC_SPARC_WDISP22 = 0x38,BFD_RELOC_SPARC22 = 0x39,BFD_RELOC_SPARC13 = 0x3A,BFD_RELOC_SPARC_GOT10 = 0x3B,BFD_RELOC_SPARC_GOT13 = 0x3C,BFD_RELOC_SPARC_GOT22 = 0x3D,BFD_RELOC_SPARC_PC10 = 0x3E,BFD_RELOC_SPARC_PC22 = 0x3F,BFD_RELOC_SPARC_WPLT30 = 0x40,BFD_RELOC_SPARC_COPY = 0x41,BFD_RELOC_SPARC_GLOB_DAT = 0x42,BFD_RELOC_SPARC_JMP_SLOT = 0x43,BFD_RELOC_SPARC_RELATIVE = 0x44,BFD_RELOC_SPARC_UA16 = 0x45,BFD_RELOC_SPARC_UA32 = 0x46,BFD_RELOC_SPARC_UA64 = 0x47,BFD_RELOC_SPARC_BASE13 = 0x48,BFD_RELOC_SPARC_BASE22 = 0x49,BFD_RELOC_SPARC_10 = 0x4A,BFD_RELOC_SPARC_11 = 0x4B,BFD_RELOC_SPARC_OLO10 = 0x4C,BFD_RELOC_SPARC_HH22 = 0x4D,BFD_RELOC_SPARC_HM10 = 0x4E,BFD_RELOC_SPARC_LM22 = 0x4F,BFD_RELOC_SPARC_PC_HH22 = 0x50,BFD_RELOC_SPARC_PC_HM10 = 0x51,BFD_RELOC_SPARC_PC_LM22 = 0x52,BFD_RELOC_SPARC_WDISP16 = 0x53,BFD_RELOC_SPARC_WDISP19 = 0x54,BFD_RELOC_SPARC_7 = 0x55,BFD_RELOC_SPARC_6 = 0x56,BFD_RELOC_SPARC_5 = 0x57,BFD_RELOC_SPARC_PLT32 = 0x58,BFD_RELOC_SPARC_PLT64 = 0x59,BFD_RELOC_SPARC_HIX22 = 0x5A,BFD_RELOC_SPARC_LOX10 = 0x5B,BFD_RELOC_SPARC_H44 = 0x5C,BFD_RELOC_SPARC_M44 = 0x5D,BFD_RELOC_SPARC_L44 = 0x5E,BFD_RELOC_SPARC_REGISTER = 0x5F,BFD_RELOC_SPARC_REV32 = 0x60,BFD_RELOC_SPARC_TLS_GD_HI22 = 0x61,BFD_RELOC_SPARC_TLS_GD_LO10 = 0x62,BFD_RELOC_SPARC_TLS_GD_ADD = 0x63,BFD_RELOC_SPARC_TLS_GD_CALL = 0x64,BFD_RELOC_SPARC_TLS_LDM_HI22 = 0x65,BFD_RELOC_SPARC_TLS_LDM_LO10 = 0x66,BFD_RELOC_SPARC_TLS_LDM_ADD = 0x67,BFD_RELOC_SPARC_TLS_LDM_CALL = 0x68,BFD_RELOC_SPARC_TLS_LDO_HIX22 = 0x69,BFD_RELOC_SPARC_TLS_LDO_LOX10 = 0x6A,BFD_RELOC_SPARC_TLS_LDO_ADD = 0x6B,BFD_RELOC_SPARC_TLS_IE_HI22 = 0x6C,BFD_RELOC_SPARC_TLS_IE_LO10 = 0x6D,BFD_RELOC_SPARC_TLS_IE_LD = 0x6E,BFD_RELOC_SPARC_TLS_IE_LDX = 0x6F,BFD_RELOC_SPARC_TLS_IE_ADD = 0x70,BFD_RELOC_SPARC_TLS_LE_HIX22 = 0x71,BFD_RELOC_SPARC_TLS_LE_LOX10 = 0x72,BFD_RELOC_SPARC_TLS_DTPMOD32 = 0x73,BFD_RELOC_SPARC_TLS_DTPMOD64 = 0x74,BFD_RELOC_SPARC_TLS_DTPOFF32 = 0x75,BFD_RELOC_SPARC_TLS_DTPOFF64 = 0x76,BFD_RELOC_SPARC_TLS_TPOFF32 = 0x77,BFD_RELOC_SPARC_TLS_TPOFF64 = 0x78,BFD_RELOC_ALPHA_GPDISP_HI16 = 0x79,BFD_RELOC_ALPHA_GPDISP_LO16 = 0x7A,BFD_RELOC_ALPHA_GPDISP = 0x7B,BFD_RELOC_ALPHA_LITERAL = 0x7C,BFD_RELOC_ALPHA_ELF_LITERAL = 0x7D,BFD_RELOC_ALPHA_LITUSE = 0x7E,BFD_RELOC_ALPHA_HINT = 0x7F,BFD_RELOC_ALPHA_LINKAGE = 0x80,BFD_RELOC_ALPHA_CODEADDR = 0x81,BFD_RELOC_ALPHA_GPREL_HI16 = 0x82,BFD_RELOC_ALPHA_GPREL_LO16 = 0x83,BFD_RELOC_ALPHA_BRSGP = 0x84,BFD_RELOC_ALPHA_TLSGD = 0x85,BFD_RELOC_ALPHA_TLSLDM = 0x86,BFD_RELOC_ALPHA_DTPMOD64 = 0x87,BFD_RELOC_ALPHA_GOTDTPREL16 = 0x88,BFD_RELOC_ALPHA_DTPREL64 = 0x89,BFD_RELOC_ALPHA_DTPREL_HI16 = 0x8A,BFD_RELOC_ALPHA_DTPREL_LO16 = 0x8B,BFD_RELOC_ALPHA_DTPREL16 = 0x8C,BFD_RELOC_ALPHA_GOTTPREL16 = 0x8D,BFD_RELOC_ALPHA_TPREL64 = 0x8E,BFD_RELOC_ALPHA_TPREL_HI16 = 0x8F,BFD_RELOC_ALPHA_TPREL_LO16 = 0x90,BFD_RELOC_ALPHA_TPREL16 = 0x91,BFD_RELOC_MIPS_JMP = 0x92,BFD_RELOC_MIPS16_JMP = 0x93,BFD_RELOC_MIPS16_GPREL = 0x94,BFD_RELOC_HI16 = 0x95,BFD_RELOC_HI16_S = 0x96,BFD_RELOC_LO16 = 0x97,BFD_RELOC_HI16_PCREL = 0x98,BFD_RELOC_HI16_S_PCREL = 0x99,BFD_RELOC_LO16_PCREL = 0x9A,BFD_RELOC_MIPS16_HI16 = 0x9B,BFD_RELOC_MIPS16_HI16_S = 0x9C,BFD_RELOC_MIPS16_LO16 = 0x9D,BFD_RELOC_MIPS_LITERAL = 0x9E,BFD_RELOC_MIPS_GOT16 = 0x9F,BFD_RELOC_MIPS_CALL16 = 0xA0,BFD_RELOC_MIPS_GOT_HI16 = 0xA1,BFD_RELOC_MIPS_GOT_LO16 = 0xA2,BFD_RELOC_MIPS_CALL_HI16 = 0xA3,BFD_RELOC_MIPS_CALL_LO16 = 0xA4,BFD_RELOC_MIPS_SUB = 0xA5,BFD_RELOC_MIPS_GOT_PAGE = 0xA6,BFD_RELOC_MIPS_GOT_OFST = 0xA7,BFD_RELOC_MIPS_GOT_DISP = 0xA8,BFD_RELOC_MIPS_SHIFT5 = 0xA9,BFD_RELOC_MIPS_SHIFT6 = 0xAA,BFD_RELOC_MIPS_INSERT_A = 0xAB,BFD_RELOC_MIPS_INSERT_B = 0xAC,BFD_RELOC_MIPS_DELETE = 0xAD,BFD_RELOC_MIPS_HIGHEST = 0xAE,BFD_RELOC_MIPS_HIGHER = 0xAF,BFD_RELOC_MIPS_SCN_DISP = 0xB0,BFD_RELOC_MIPS_REL16 = 0xB1,BFD_RELOC_MIPS_RELGOT = 0xB2,BFD_RELOC_MIPS_JALR = 0xB3,BFD_RELOC_MIPS_TLS_DTPMOD32 = 0xB4,BFD_RELOC_MIPS_TLS_DTPREL32 = 0xB5,BFD_RELOC_MIPS_TLS_DTPMOD64 = 0xB6,BFD_RELOC_MIPS_TLS_DTPREL64 = 0xB7,BFD_RELOC_MIPS_TLS_GD = 0xB8,BFD_RELOC_MIPS_TLS_LDM = 0xB9,BFD_RELOC_MIPS_TLS_DTPREL_HI16 = 0xBA,BFD_RELOC_MIPS_TLS_DTPREL_LO16 = 0xBB,BFD_RELOC_MIPS_TLS_GOTTPREL = 0xBC,BFD_RELOC_MIPS_TLS_TPREL32 = 0xBD,BFD_RELOC_MIPS_TLS_TPREL64 = 0xBE,BFD_RELOC_MIPS_TLS_TPREL_HI16 = 0xBF,BFD_RELOC_MIPS_TLS_TPREL_LO16 = 0xC0,BFD_RELOC_MIPS_COPY = 0xC1,BFD_RELOC_MIPS_JUMP_SLOT = 0xC2,BFD_RELOC_FRV_LABEL16 = 0xC3,BFD_RELOC_FRV_LABEL24 = 0xC4,BFD_RELOC_FRV_LO16 = 0xC5,BFD_RELOC_FRV_HI16 = 0xC6,BFD_RELOC_FRV_GPREL12 = 0xC7,BFD_RELOC_FRV_GPRELU12 = 0xC8,BFD_RELOC_FRV_GPREL32 = 0xC9,BFD_RELOC_FRV_GPRELHI = 0xCA,BFD_RELOC_FRV_GPRELLO = 0xCB,BFD_RELOC_FRV_GOT12 = 0xCC,BFD_RELOC_FRV_GOTHI = 0xCD,BFD_RELOC_FRV_GOTLO = 0xCE,BFD_RELOC_FRV_FUNCDESC = 0xCF,BFD_RELOC_FRV_FUNCDESC_GOT12 = 0xD0,BFD_RELOC_FRV_FUNCDESC_GOTHI = 0xD1,BFD_RELOC_FRV_FUNCDESC_GOTLO = 0xD2,BFD_RELOC_FRV_FUNCDESC_VALUE = 0xD3,BFD_RELOC_FRV_FUNCDESC_GOTOFF12 = 0xD4,BFD_RELOC_FRV_FUNCDESC_GOTOFFHI = 0xD5,BFD_RELOC_FRV_FUNCDESC_GOTOFFLO = 0xD6,BFD_RELOC_FRV_GOTOFF12 = 0xD7,BFD_RELOC_FRV_GOTOFFHI = 0xD8,BFD_RELOC_FRV_GOTOFFLO = 0xD9,BFD_RELOC_FRV_GETTLSOFF = 0xDA,BFD_RELOC_FRV_TLSDESC_VALUE = 0xDB,BFD_RELOC_FRV_GOTTLSDESC12 = 0xDC,BFD_RELOC_FRV_GOTTLSDESCHI = 0xDD,BFD_RELOC_FRV_GOTTLSDESCLO = 0xDE,BFD_RELOC_FRV_TLSMOFF12 = 0xDF,BFD_RELOC_FRV_TLSMOFFHI = 0xE0,BFD_RELOC_FRV_TLSMOFFLO = 0xE1,BFD_RELOC_FRV_GOTTLSOFF12 = 0xE2,BFD_RELOC_FRV_GOTTLSOFFHI = 0xE3,BFD_RELOC_FRV_GOTTLSOFFLO = 0xE4,BFD_RELOC_FRV_TLSOFF = 0xE5,BFD_RELOC_FRV_TLSDESC_RELAX = 0xE6,BFD_RELOC_FRV_GETTLSOFF_RELAX = 0xE7,BFD_RELOC_FRV_TLSOFF_RELAX = 0xE8,BFD_RELOC_FRV_TLSMOFF = 0xE9,BFD_RELOC_MN10300_GOTOFF24 = 0xEA,BFD_RELOC_MN10300_GOT32 = 0xEB,BFD_RELOC_MN10300_GOT24 = 0xEC,BFD_RELOC_MN10300_GOT16 = 0xED,BFD_RELOC_MN10300_COPY = 0xEE,BFD_RELOC_MN10300_GLOB_DAT = 0xEF,BFD_RELOC_MN10300_JMP_SLOT = 0xF0,BFD_RELOC_MN10300_RELATIVE = 0xF1,BFD_RELOC_386_GOT32 = 0xF2,BFD_RELOC_386_PLT32 = 0xF3,BFD_RELOC_386_COPY = 0xF4,BFD_RELOC_386_GLOB_DAT = 0xF5,BFD_RELOC_386_JUMP_SLOT = 0xF6,BFD_RELOC_386_RELATIVE = 0xF7,BFD_RELOC_386_GOTOFF = 0xF8,BFD_RELOC_386_GOTPC = 0xF9,BFD_RELOC_386_TLS_TPOFF = 0xFA,BFD_RELOC_386_TLS_IE = 0xFB,BFD_RELOC_386_TLS_GOTIE = 0xFC,BFD_RELOC_386_TLS_LE = 0xFD,BFD_RELOC_386_TLS_GD = 0xFE,BFD_RELOC_386_TLS_LDM = 0xFF,BFD_RELOC_386_TLS_LDO_32 = 0x100,BFD_RELOC_386_TLS_IE_32 = 0x101,BFD_RELOC_386_TLS_LE_32 = 0x102,BFD_RELOC_386_TLS_DTPMOD32 = 0x103,BFD_RELOC_386_TLS_DTPOFF32 = 0x104,BFD_RELOC_386_TLS_TPOFF32 = 0x105,BFD_RELOC_386_TLS_GOTDESC = 0x106,BFD_RELOC_386_TLS_DESC_CALL = 0x107,BFD_RELOC_386_TLS_DESC = 0x108,BFD_RELOC_X86_64_GOT32 = 0x109,BFD_RELOC_X86_64_PLT32 = 0x10A,BFD_RELOC_X86_64_COPY = 0x10B,BFD_RELOC_X86_64_GLOB_DAT = 0x10C,BFD_RELOC_X86_64_JUMP_SLOT = 0x10D,BFD_RELOC_X86_64_RELATIVE = 0x10E,BFD_RELOC_X86_64_GOTPCREL = 0x10F,BFD_RELOC_X86_64_32S = 0x110,BFD_RELOC_X86_64_DTPMOD64 = 0x111,BFD_RELOC_X86_64_DTPOFF64 = 0x112,BFD_RELOC_X86_64_TPOFF64 = 0x113,BFD_RELOC_X86_64_TLSGD = 0x114,BFD_RELOC_X86_64_TLSLD = 0x115,BFD_RELOC_X86_64_DTPOFF32 = 0x116,BFD_RELOC_X86_64_GOTTPOFF = 0x117,BFD_RELOC_X86_64_TPOFF32 = 0x118,BFD_RELOC_X86_64_GOTOFF64 = 0x119,BFD_RELOC_X86_64_GOTPC32 = 0x11A,BFD_RELOC_X86_64_GOT64 = 0x11B,BFD_RELOC_X86_64_GOTPCREL64 = 0x11C,BFD_RELOC_X86_64_GOTPC64 = 0x11D,BFD_RELOC_X86_64_GOTPLT64 = 0x11E,BFD_RELOC_X86_64_PLTOFF64 = 0x11F,BFD_RELOC_X86_64_GOTPC32_TLSDESC = 0x120,BFD_RELOC_X86_64_TLSDESC_CALL = 0x121,BFD_RELOC_X86_64_TLSDESC = 0x122,BFD_RELOC_NS32K_IMM_8 = 0x123,BFD_RELOC_NS32K_IMM_16 = 0x124,BFD_RELOC_NS32K_IMM_32 = 0x125,BFD_RELOC_NS32K_IMM_8_PCREL = 0x126,BFD_RELOC_NS32K_IMM_16_PCREL = 0x127,BFD_RELOC_NS32K_IMM_32_PCREL = 0x128,BFD_RELOC_NS32K_DISP_8 = 0x129,BFD_RELOC_NS32K_DISP_16 = 0x12A,BFD_RELOC_NS32K_DISP_32 = 0x12B,BFD_RELOC_NS32K_DISP_8_PCREL = 0x12C,BFD_RELOC_NS32K_DISP_16_PCREL = 0x12D,BFD_RELOC_NS32K_DISP_32_PCREL = 0x12E,BFD_RELOC_PDP11_DISP_8_PCREL = 0x12F,BFD_RELOC_PDP11_DISP_6_PCREL = 0x130,BFD_RELOC_PJ_CODE_HI16 = 0x131,BFD_RELOC_PJ_CODE_LO16 = 0x132,BFD_RELOC_PJ_CODE_DIR16 = 0x133,BFD_RELOC_PJ_CODE_DIR32 = 0x134,BFD_RELOC_PJ_CODE_REL16 = 0x135,BFD_RELOC_PJ_CODE_REL32 = 0x136,BFD_RELOC_PPC_B26 = 0x137,BFD_RELOC_PPC_BA26 = 0x138,BFD_RELOC_PPC_TOC16 = 0x139,BFD_RELOC_PPC_B16 = 0x13A,BFD_RELOC_PPC_B16_BRTAKEN = 0x13B,BFD_RELOC_PPC_B16_BRNTAKEN = 0x13C,BFD_RELOC_PPC_BA16 = 0x13D,BFD_RELOC_PPC_BA16_BRTAKEN = 0x13E,BFD_RELOC_PPC_BA16_BRNTAKEN = 0x13F,BFD_RELOC_PPC_COPY = 0x140,BFD_RELOC_PPC_GLOB_DAT = 0x141,BFD_RELOC_PPC_JMP_SLOT = 0x142,BFD_RELOC_PPC_RELATIVE = 0x143,BFD_RELOC_PPC_LOCAL24PC = 0x144,BFD_RELOC_PPC_EMB_NADDR32 = 0x145,BFD_RELOC_PPC_EMB_NADDR16 = 0x146,BFD_RELOC_PPC_EMB_NADDR16_LO = 0x147,BFD_RELOC_PPC_EMB_NADDR16_HI = 0x148,BFD_RELOC_PPC_EMB_NADDR16_HA = 0x149,BFD_RELOC_PPC_EMB_SDAI16 = 0x14A,BFD_RELOC_PPC_EMB_SDA2I16 = 0x14B,BFD_RELOC_PPC_EMB_SDA2REL = 0x14C,BFD_RELOC_PPC_EMB_SDA21 = 0x14D,BFD_RELOC_PPC_EMB_MRKREF = 0x14E,BFD_RELOC_PPC_EMB_RELSEC16 = 0x14F,BFD_RELOC_PPC_EMB_RELST_LO = 0x150,BFD_RELOC_PPC_EMB_RELST_HI = 0x151,BFD_RELOC_PPC_EMB_RELST_HA = 0x152,BFD_RELOC_PPC_EMB_BIT_FLD = 0x153,BFD_RELOC_PPC_EMB_RELSDA = 0x154,BFD_RELOC_PPC64_HIGHER = 0x155,BFD_RELOC_PPC64_HIGHER_S = 0x156,BFD_RELOC_PPC64_HIGHEST = 0x157,BFD_RELOC_PPC64_HIGHEST_S = 0x158,BFD_RELOC_PPC64_TOC16_LO = 0x159,BFD_RELOC_PPC64_TOC16_HI = 0x15A,BFD_RELOC_PPC64_TOC16_HA = 0x15B,BFD_RELOC_PPC64_TOC = 0x15C,BFD_RELOC_PPC64_PLTGOT16 = 0x15D,BFD_RELOC_PPC64_PLTGOT16_LO = 0x15E,BFD_RELOC_PPC64_PLTGOT16_HI = 0x15F,BFD_RELOC_PPC64_PLTGOT16_HA = 0x160,BFD_RELOC_PPC64_ADDR16_DS = 0x161,BFD_RELOC_PPC64_ADDR16_LO_DS = 0x162,BFD_RELOC_PPC64_GOT16_DS = 0x163,BFD_RELOC_PPC64_GOT16_LO_DS = 0x164,BFD_RELOC_PPC64_PLT16_LO_DS = 0x165,BFD_RELOC_PPC64_SECTOFF_DS = 0x166,BFD_RELOC_PPC64_SECTOFF_LO_DS = 0x167,BFD_RELOC_PPC64_TOC16_DS = 0x168,BFD_RELOC_PPC64_TOC16_LO_DS = 0x169,BFD_RELOC_PPC64_PLTGOT16_DS = 0x16A,BFD_RELOC_PPC64_PLTGOT16_LO_DS = 0x16B,BFD_RELOC_PPC_TLS = 0x16C,BFD_RELOC_PPC_DTPMOD = 0x16D,BFD_RELOC_PPC_TPREL16 = 0x16E,BFD_RELOC_PPC_TPREL16_LO = 0x16F,BFD_RELOC_PPC_TPREL16_HI = 0x170,BFD_RELOC_PPC_TPREL16_HA = 0x171,BFD_RELOC_PPC_TPREL = 0x172,BFD_RELOC_PPC_DTPREL16 = 0x173,BFD_RELOC_PPC_DTPREL16_LO = 0x174,BFD_RELOC_PPC_DTPREL16_HI = 0x175,BFD_RELOC_PPC_DTPREL16_HA = 0x176,BFD_RELOC_PPC_DTPREL = 0x177,BFD_RELOC_PPC_GOT_TLSGD16 = 0x178,BFD_RELOC_PPC_GOT_TLSGD16_LO = 0x179,BFD_RELOC_PPC_GOT_TLSGD16_HI = 0x17A,BFD_RELOC_PPC_GOT_TLSGD16_HA = 0x17B,BFD_RELOC_PPC_GOT_TLSLD16 = 0x17C,BFD_RELOC_PPC_GOT_TLSLD16_LO = 0x17D,BFD_RELOC_PPC_GOT_TLSLD16_HI = 0x17E,BFD_RELOC_PPC_GOT_TLSLD16_HA = 0x17F,BFD_RELOC_PPC_GOT_TPREL16 = 0x180,BFD_RELOC_PPC_GOT_TPREL16_LO = 0x181,BFD_RELOC_PPC_GOT_TPREL16_HI = 0x182,BFD_RELOC_PPC_GOT_TPREL16_HA = 0x183,BFD_RELOC_PPC_GOT_DTPREL16 = 0x184,BFD_RELOC_PPC_GOT_DTPREL16_LO = 0x185,BFD_RELOC_PPC_GOT_DTPREL16_HI = 0x186,BFD_RELOC_PPC_GOT_DTPREL16_HA = 0x187,BFD_RELOC_PPC64_TPREL16_DS = 0x188,BFD_RELOC_PPC64_TPREL16_LO_DS = 0x189,BFD_RELOC_PPC64_TPREL16_HIGHER = 0x18A,BFD_RELOC_PPC64_TPREL16_HIGHERA = 0x18B,BFD_RELOC_PPC64_TPREL16_HIGHEST = 0x18C,BFD_RELOC_PPC64_TPREL16_HIGHESTA = 0x18D,BFD_RELOC_PPC64_DTPREL16_DS = 0x18E,BFD_RELOC_PPC64_DTPREL16_LO_DS = 0x18F,BFD_RELOC_PPC64_DTPREL16_HIGHER = 0x190,BFD_RELOC_PPC64_DTPREL16_HIGHERA = 0x191,BFD_RELOC_PPC64_DTPREL16_HIGHEST = 0x192,BFD_RELOC_PPC64_DTPREL16_HIGHESTA = 0x193,BFD_RELOC_I370_D12 = 0x194,BFD_RELOC_CTOR = 0x195,BFD_RELOC_ARM_PCREL_BRANCH = 0x196,BFD_RELOC_ARM_PCREL_BLX = 0x197,BFD_RELOC_THUMB_PCREL_BLX = 0x198,BFD_RELOC_ARM_PCREL_CALL = 0x199,BFD_RELOC_ARM_PCREL_JUMP = 0x19A,BFD_RELOC_THUMB_PCREL_BRANCH7 = 0x19B,BFD_RELOC_THUMB_PCREL_BRANCH9 = 0x19C,BFD_RELOC_THUMB_PCREL_BRANCH12 = 0x19D,BFD_RELOC_THUMB_PCREL_BRANCH20 = 0x19E,BFD_RELOC_THUMB_PCREL_BRANCH23 = 0x19F,BFD_RELOC_THUMB_PCREL_BRANCH25 = 0x1A0,BFD_RELOC_ARM_OFFSET_IMM = 0x1A1,BFD_RELOC_ARM_THUMB_OFFSET = 0x1A2,BFD_RELOC_ARM_TARGET1 = 0x1A3,BFD_RELOC_ARM_ROSEGREL32 = 0x1A4,BFD_RELOC_ARM_SBREL32 = 0x1A5,BFD_RELOC_ARM_TARGET2 = 0x1A6,BFD_RELOC_ARM_PREL31 = 0x1A7,BFD_RELOC_ARM_MOVW = 0x1A8,BFD_RELOC_ARM_MOVT = 0x1A9,BFD_RELOC_ARM_MOVW_PCREL = 0x1AA,BFD_RELOC_ARM_MOVT_PCREL = 0x1AB,BFD_RELOC_ARM_THUMB_MOVW = 0x1AC,BFD_RELOC_ARM_THUMB_MOVT = 0x1AD,BFD_RELOC_ARM_THUMB_MOVW_PCREL = 0x1AE,BFD_RELOC_ARM_THUMB_MOVT_PCREL = 0x1AF,BFD_RELOC_ARM_JUMP_SLOT = 0x1B0,BFD_RELOC_ARM_GLOB_DAT = 0x1B1,BFD_RELOC_ARM_GOT32 = 0x1B2,BFD_RELOC_ARM_PLT32 = 0x1B3,BFD_RELOC_ARM_RELATIVE = 0x1B4,BFD_RELOC_ARM_GOTOFF = 0x1B5,BFD_RELOC_ARM_GOTPC = 0x1B6,BFD_RELOC_ARM_TLS_GD32 = 0x1B7,BFD_RELOC_ARM_TLS_LDO32 = 0x1B8,BFD_RELOC_ARM_TLS_LDM32 = 0x1B9,BFD_RELOC_ARM_TLS_DTPOFF32 = 0x1BA,BFD_RELOC_ARM_TLS_DTPMOD32 = 0x1BB,BFD_RELOC_ARM_TLS_TPOFF32 = 0x1BC,BFD_RELOC_ARM_TLS_IE32 = 0x1BD,BFD_RELOC_ARM_TLS_LE32 = 0x1BE,BFD_RELOC_ARM_ALU_PC_G0_NC = 0x1BF,BFD_RELOC_ARM_ALU_PC_G0 = 0x1C0,BFD_RELOC_ARM_ALU_PC_G1_NC = 0x1C1,BFD_RELOC_ARM_ALU_PC_G1 = 0x1C2,BFD_RELOC_ARM_ALU_PC_G2 = 0x1C3,BFD_RELOC_ARM_LDR_PC_G0 = 0x1C4,BFD_RELOC_ARM_LDR_PC_G1 = 0x1C5,BFD_RELOC_ARM_LDR_PC_G2 = 0x1C6,BFD_RELOC_ARM_LDRS_PC_G0 = 0x1C7,BFD_RELOC_ARM_LDRS_PC_G1 = 0x1C8,BFD_RELOC_ARM_LDRS_PC_G2 = 0x1C9,BFD_RELOC_ARM_LDC_PC_G0 = 0x1CA,BFD_RELOC_ARM_LDC_PC_G1 = 0x1CB,BFD_RELOC_ARM_LDC_PC_G2 = 0x1CC,BFD_RELOC_ARM_ALU_SB_G0_NC = 0x1CD,BFD_RELOC_ARM_ALU_SB_G0 = 0x1CE,BFD_RELOC_ARM_ALU_SB_G1_NC = 0x1CF,BFD_RELOC_ARM_ALU_SB_G1 = 0x1D0,BFD_RELOC_ARM_ALU_SB_G2 = 0x1D1,BFD_RELOC_ARM_LDR_SB_G0 = 0x1D2,BFD_RELOC_ARM_LDR_SB_G1 = 0x1D3,BFD_RELOC_ARM_LDR_SB_G2 = 0x1D4,BFD_RELOC_ARM_LDRS_SB_G0 = 0x1D5,BFD_RELOC_ARM_LDRS_SB_G1 = 0x1D6,BFD_RELOC_ARM_LDRS_SB_G2 = 0x1D7,BFD_RELOC_ARM_LDC_SB_G0 = 0x1D8,BFD_RELOC_ARM_LDC_SB_G1 = 0x1D9,BFD_RELOC_ARM_LDC_SB_G2 = 0x1DA,BFD_RELOC_ARM_IMMEDIATE = 0x1DB,BFD_RELOC_ARM_ADRL_IMMEDIATE = 0x1DC,BFD_RELOC_ARM_T32_IMMEDIATE = 0x1DD,BFD_RELOC_ARM_T32_ADD_IMM = 0x1DE,BFD_RELOC_ARM_T32_IMM12 = 0x1DF,BFD_RELOC_ARM_T32_ADD_PC12 = 0x1E0,BFD_RELOC_ARM_SHIFT_IMM = 0x1E1,BFD_RELOC_ARM_SMC = 0x1E2,BFD_RELOC_ARM_SWI = 0x1E3,BFD_RELOC_ARM_MULTI = 0x1E4,BFD_RELOC_ARM_CP_OFF_IMM = 0x1E5,BFD_RELOC_ARM_CP_OFF_IMM_S2 = 0x1E6,BFD_RELOC_ARM_T32_CP_OFF_IMM = 0x1E7,BFD_RELOC_ARM_T32_CP_OFF_IMM_S2 = 0x1E8,BFD_RELOC_ARM_ADR_IMM = 0x1E9,BFD_RELOC_ARM_LDR_IMM = 0x1EA,BFD_RELOC_ARM_LITERAL = 0x1EB,BFD_RELOC_ARM_IN_POOL = 0x1EC,BFD_RELOC_ARM_OFFSET_IMM8 = 0x1ED,BFD_RELOC_ARM_T32_OFFSET_U8 = 0x1EE,BFD_RELOC_ARM_T32_OFFSET_IMM = 0x1EF,BFD_RELOC_ARM_HWLITERAL = 0x1F0,BFD_RELOC_ARM_THUMB_ADD = 0x1F1,BFD_RELOC_ARM_THUMB_IMM = 0x1F2,BFD_RELOC_ARM_THUMB_SHIFT = 0x1F3,BFD_RELOC_SH_PCDISP8BY2 = 0x1F4,BFD_RELOC_SH_PCDISP12BY2 = 0x1F5,BFD_RELOC_SH_IMM3 = 0x1F6,BFD_RELOC_SH_IMM3U = 0x1F7,BFD_RELOC_SH_DISP12 = 0x1F8,BFD_RELOC_SH_DISP12BY2 = 0x1F9,BFD_RELOC_SH_DISP12BY4 = 0x1FA,BFD_RELOC_SH_DISP12BY8 = 0x1FB,BFD_RELOC_SH_DISP20 = 0x1FC,BFD_RELOC_SH_DISP20BY8 = 0x1FD,BFD_RELOC_SH_IMM4 = 0x1FE,BFD_RELOC_SH_IMM4BY2 = 0x1FF,BFD_RELOC_SH_IMM4BY4 = 0x200,BFD_RELOC_SH_IMM8 = 0x201,BFD_RELOC_SH_IMM8BY2 = 0x202,BFD_RELOC_SH_IMM8BY4 = 0x203,BFD_RELOC_SH_PCRELIMM8BY2 = 0x204,BFD_RELOC_SH_PCRELIMM8BY4 = 0x205,BFD_RELOC_SH_SWITCH16 = 0x206,BFD_RELOC_SH_SWITCH32 = 0x207,BFD_RELOC_SH_USES = 0x208,BFD_RELOC_SH_COUNT = 0x209,BFD_RELOC_SH_ALIGN = 0x20A,BFD_RELOC_SH_CODE = 0x20B,BFD_RELOC_SH_DATA = 0x20C,BFD_RELOC_SH_LABEL = 0x20D,BFD_RELOC_SH_LOOP_START = 0x20E,BFD_RELOC_SH_LOOP_END = 0x20F,BFD_RELOC_SH_COPY = 0x210,BFD_RELOC_SH_GLOB_DAT = 0x211,BFD_RELOC_SH_JMP_SLOT = 0x212,BFD_RELOC_SH_RELATIVE = 0x213,BFD_RELOC_SH_GOTPC = 0x214,BFD_RELOC_SH_GOT_LOW16 = 0x215,BFD_RELOC_SH_GOT_MEDLOW16 = 0x216,BFD_RELOC_SH_GOT_MEDHI16 = 0x217,BFD_RELOC_SH_GOT_HI16 = 0x218,BFD_RELOC_SH_GOTPLT_LOW16 = 0x219,BFD_RELOC_SH_GOTPLT_MEDLOW16 = 0x21A,BFD_RELOC_SH_GOTPLT_MEDHI16 = 0x21B,BFD_RELOC_SH_GOTPLT_HI16 = 0x21C,BFD_RELOC_SH_PLT_LOW16 = 0x21D,BFD_RELOC_SH_PLT_MEDLOW16 = 0x21E,BFD_RELOC_SH_PLT_MEDHI16 = 0x21F,BFD_RELOC_SH_PLT_HI16 = 0x220,BFD_RELOC_SH_GOTOFF_LOW16 = 0x221,BFD_RELOC_SH_GOTOFF_MEDLOW16 = 0x222,BFD_RELOC_SH_GOTOFF_MEDHI16 = 0x223,BFD_RELOC_SH_GOTOFF_HI16 = 0x224,BFD_RELOC_SH_GOTPC_LOW16 = 0x225,BFD_RELOC_SH_GOTPC_MEDLOW16 = 0x226,BFD_RELOC_SH_GOTPC_MEDHI16 = 0x227,BFD_RELOC_SH_GOTPC_HI16 = 0x228,BFD_RELOC_SH_COPY64 = 0x229,BFD_RELOC_SH_GLOB_DAT64 = 0x22A,BFD_RELOC_SH_JMP_SLOT64 = 0x22B,BFD_RELOC_SH_RELATIVE64 = 0x22C,BFD_RELOC_SH_GOT10BY4 = 0x22D,BFD_RELOC_SH_GOT10BY8 = 0x22E,BFD_RELOC_SH_GOTPLT10BY4 = 0x22F,BFD_RELOC_SH_GOTPLT10BY8 = 0x230,BFD_RELOC_SH_GOTPLT32 = 0x231,BFD_RELOC_SH_SHMEDIA_CODE = 0x232,BFD_RELOC_SH_IMMU5 = 0x233,BFD_RELOC_SH_IMMS6 = 0x234,BFD_RELOC_SH_IMMS6BY32 = 0x235,BFD_RELOC_SH_IMMU6 = 0x236,BFD_RELOC_SH_IMMS10 = 0x237,BFD_RELOC_SH_IMMS10BY2 = 0x238,BFD_RELOC_SH_IMMS10BY4 = 0x239,BFD_RELOC_SH_IMMS10BY8 = 0x23A,BFD_RELOC_SH_IMMS16 = 0x23B,BFD_RELOC_SH_IMMU16 = 0x23C,BFD_RELOC_SH_IMM_LOW16 = 0x23D,BFD_RELOC_SH_IMM_LOW16_PCREL = 0x23E,BFD_RELOC_SH_IMM_MEDLOW16 = 0x23F,BFD_RELOC_SH_IMM_MEDLOW16_PCREL = 0x240,BFD_RELOC_SH_IMM_MEDHI16 = 0x241,BFD_RELOC_SH_IMM_MEDHI16_PCREL = 0x242,BFD_RELOC_SH_IMM_HI16 = 0x243,BFD_RELOC_SH_IMM_HI16_PCREL = 0x244,BFD_RELOC_SH_PT_16 = 0x245,BFD_RELOC_SH_TLS_GD_32 = 0x246,BFD_RELOC_SH_TLS_LD_32 = 0x247,BFD_RELOC_SH_TLS_LDO_32 = 0x248,BFD_RELOC_SH_TLS_IE_32 = 0x249,BFD_RELOC_SH_TLS_LE_32 = 0x24A,BFD_RELOC_SH_TLS_DTPMOD32 = 0x24B,BFD_RELOC_SH_TLS_DTPOFF32 = 0x24C,BFD_RELOC_SH_TLS_TPOFF32 = 0x24D,BFD_RELOC_ARC_B22_PCREL = 0x24E,BFD_RELOC_ARC_B26 = 0x24F,BFD_RELOC_BFIN_16_IMM = 0x250,BFD_RELOC_BFIN_16_HIGH = 0x251,BFD_RELOC_BFIN_4_PCREL = 0x252,BFD_RELOC_BFIN_5_PCREL = 0x253,BFD_RELOC_BFIN_16_LOW = 0x254,BFD_RELOC_BFIN_10_PCREL = 0x255,BFD_RELOC_BFIN_11_PCREL = 0x256,BFD_RELOC_BFIN_12_PCREL_JUMP = 0x257,BFD_RELOC_BFIN_12_PCREL_JUMP_S = 0x258,BFD_RELOC_BFIN_24_PCREL_CALL_X = 0x259,BFD_RELOC_BFIN_24_PCREL_JUMP_L = 0x25A,BFD_RELOC_BFIN_GOT17M4 = 0x25B,BFD_RELOC_BFIN_GOTHI = 0x25C,BFD_RELOC_BFIN_GOTLO = 0x25D,BFD_RELOC_BFIN_FUNCDESC = 0x25E,BFD_RELOC_BFIN_FUNCDESC_GOT17M4 = 0x25F,BFD_RELOC_BFIN_FUNCDESC_GOTHI = 0x260,BFD_RELOC_BFIN_FUNCDESC_GOTLO = 0x261,BFD_RELOC_BFIN_FUNCDESC_VALUE = 0x262,BFD_RELOC_BFIN_FUNCDESC_GOTOFF17M4 = 0x263,BFD_RELOC_BFIN_FUNCDESC_GOTOFFHI = 0x264,BFD_RELOC_BFIN_FUNCDESC_GOTOFFLO = 0x265,BFD_RELOC_BFIN_GOTOFF17M4 = 0x266,BFD_RELOC_BFIN_GOTOFFHI = 0x267,BFD_RELOC_BFIN_GOTOFFLO = 0x268,BFD_RELOC_BFIN_GOT = 0x269,BFD_RELOC_BFIN_PLTPC = 0x26A,BFD_ARELOC_BFIN_PUSH = 0x26B,BFD_ARELOC_BFIN_CONST = 0x26C,BFD_ARELOC_BFIN_ADD = 0x26D,BFD_ARELOC_BFIN_SUB = 0x26E,BFD_ARELOC_BFIN_MULT = 0x26F,BFD_ARELOC_BFIN_DIV = 0x270,BFD_ARELOC_BFIN_MOD = 0x271,BFD_ARELOC_BFIN_LSHIFT = 0x272,BFD_ARELOC_BFIN_RSHIFT = 0x273,BFD_ARELOC_BFIN_AND = 0x274,BFD_ARELOC_BFIN_OR = 0x275,BFD_ARELOC_BFIN_XOR = 0x276,BFD_ARELOC_BFIN_LAND = 0x277,BFD_ARELOC_BFIN_LOR = 0x278,BFD_ARELOC_BFIN_LEN = 0x279,BFD_ARELOC_BFIN_NEG = 0x27A,BFD_ARELOC_BFIN_COMP = 0x27B,BFD_ARELOC_BFIN_PAGE = 0x27C,BFD_ARELOC_BFIN_HWPAGE = 0x27D,BFD_ARELOC_BFIN_ADDR = 0x27E,BFD_RELOC_D10V_10_PCREL_R = 0x27F,BFD_RELOC_D10V_10_PCREL_L = 0x280,BFD_RELOC_D10V_18 = 0x281,BFD_RELOC_D10V_18_PCREL = 0x282,BFD_RELOC_D30V_6 = 0x283,BFD_RELOC_D30V_9_PCREL = 0x284,BFD_RELOC_D30V_9_PCREL_R = 0x285,BFD_RELOC_D30V_15 = 0x286,BFD_RELOC_D30V_15_PCREL = 0x287,BFD_RELOC_D30V_15_PCREL_R = 0x288,BFD_RELOC_D30V_21 = 0x289,BFD_RELOC_D30V_21_PCREL = 0x28A,BFD_RELOC_D30V_21_PCREL_R = 0x28B,BFD_RELOC_D30V_32 = 0x28C,BFD_RELOC_D30V_32_PCREL = 0x28D,BFD_RELOC_DLX_HI16_S = 0x28E,BFD_RELOC_DLX_LO16 = 0x28F,BFD_RELOC_DLX_JMP26 = 0x290,BFD_RELOC_M32C_HI8 = 0x291,BFD_RELOC_M32C_RL_JUMP = 0x292,BFD_RELOC_M32C_RL_1ADDR = 0x293,BFD_RELOC_M32C_RL_2ADDR = 0x294,BFD_RELOC_M32R_24 = 0x295,BFD_RELOC_M32R_10_PCREL = 0x296,BFD_RELOC_M32R_18_PCREL = 0x297,BFD_RELOC_M32R_26_PCREL = 0x298,BFD_RELOC_M32R_HI16_ULO = 0x299,BFD_RELOC_M32R_HI16_SLO = 0x29A,BFD_RELOC_M32R_LO16 = 0x29B,BFD_RELOC_M32R_SDA16 = 0x29C,BFD_RELOC_M32R_GOT24 = 0x29D,BFD_RELOC_M32R_26_PLTREL = 0x29E,BFD_RELOC_M32R_COPY = 0x29F,BFD_RELOC_M32R_GLOB_DAT = 0x2A0,BFD_RELOC_M32R_JMP_SLOT = 0x2A1,BFD_RELOC_M32R_RELATIVE = 0x2A2,BFD_RELOC_M32R_GOTOFF = 0x2A3,BFD_RELOC_M32R_GOTOFF_HI_ULO = 0x2A4,BFD_RELOC_M32R_GOTOFF_HI_SLO = 0x2A5,BFD_RELOC_M32R_GOTOFF_LO = 0x2A6,BFD_RELOC_M32R_GOTPC24 = 0x2A7,BFD_RELOC_M32R_GOT16_HI_ULO = 0x2A8,BFD_RELOC_M32R_GOT16_HI_SLO = 0x2A9,BFD_RELOC_M32R_GOT16_LO = 0x2AA,BFD_RELOC_M32R_GOTPC_HI_ULO = 0x2AB,BFD_RELOC_M32R_GOTPC_HI_SLO = 0x2AC,BFD_RELOC_M32R_GOTPC_LO = 0x2AD,BFD_RELOC_V850_9_PCREL = 0x2AE,BFD_RELOC_V850_22_PCREL = 0x2AF,BFD_RELOC_V850_SDA_16_16_OFFSET = 0x2B0,BFD_RELOC_V850_SDA_15_16_OFFSET = 0x2B1,BFD_RELOC_V850_ZDA_16_16_OFFSET = 0x2B2,BFD_RELOC_V850_ZDA_15_16_OFFSET = 0x2B3,BFD_RELOC_V850_TDA_6_8_OFFSET = 0x2B4,BFD_RELOC_V850_TDA_7_8_OFFSET = 0x2B5,BFD_RELOC_V850_TDA_7_7_OFFSET = 0x2B6,BFD_RELOC_V850_TDA_16_16_OFFSET = 0x2B7,BFD_RELOC_V850_TDA_4_5_OFFSET = 0x2B8,BFD_RELOC_V850_TDA_4_4_OFFSET = 0x2B9,BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET = 0x2BA,BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET = 0x2BB,BFD_RELOC_V850_CALLT_6_7_OFFSET = 0x2BC,BFD_RELOC_V850_CALLT_16_16_OFFSET = 0x2BD,BFD_RELOC_V850_LONGCALL = 0x2BE,BFD_RELOC_V850_LONGJUMP = 0x2BF,BFD_RELOC_V850_ALIGN = 0x2C0,BFD_RELOC_V850_LO16_SPLIT_OFFSET = 0x2C1,BFD_RELOC_MN10300_32_PCREL = 0x2C2,BFD_RELOC_MN10300_16_PCREL = 0x2C3,BFD_RELOC_TIC30_LDP = 0x2C4,BFD_RELOC_TIC54X_PARTLS7 = 0x2C5,BFD_RELOC_TIC54X_PARTMS9 = 0x2C6,BFD_RELOC_TIC54X_23 = 0x2C7,BFD_RELOC_TIC54X_16_OF_23 = 0x2C8,BFD_RELOC_TIC54X_MS7_OF_23 = 0x2C9,BFD_RELOC_FR30_48 = 0x2CA,BFD_RELOC_FR30_20 = 0x2CB,BFD_RELOC_FR30_6_IN_4 = 0x2CC,BFD_RELOC_FR30_8_IN_8 = 0x2CD,BFD_RELOC_FR30_9_IN_8 = 0x2CE,BFD_RELOC_FR30_10_IN_8 = 0x2CF,BFD_RELOC_FR30_9_PCREL = 0x2D0,BFD_RELOC_FR30_12_PCREL = 0x2D1,BFD_RELOC_MCORE_PCREL_IMM8BY4 = 0x2D2,BFD_RELOC_MCORE_PCREL_IMM11BY2 = 0x2D3,BFD_RELOC_MCORE_PCREL_IMM4BY2 = 0x2D4,BFD_RELOC_MCORE_PCREL_32 = 0x2D5,BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2 = 0x2D6,BFD_RELOC_MCORE_RVA = 0x2D7,BFD_RELOC_MMIX_GETA = 0x2D8,BFD_RELOC_MMIX_GETA_1 = 0x2D9,BFD_RELOC_MMIX_GETA_2 = 0x2DA,BFD_RELOC_MMIX_GETA_3 = 0x2DB,BFD_RELOC_MMIX_CBRANCH = 0x2DC,BFD_RELOC_MMIX_CBRANCH_J = 0x2DD,BFD_RELOC_MMIX_CBRANCH_1 = 0x2DE,BFD_RELOC_MMIX_CBRANCH_2 = 0x2DF,BFD_RELOC_MMIX_CBRANCH_3 = 0x2E0,BFD_RELOC_MMIX_PUSHJ = 0x2E1,BFD_RELOC_MMIX_PUSHJ_1 = 0x2E2,BFD_RELOC_MMIX_PUSHJ_2 = 0x2E3,BFD_RELOC_MMIX_PUSHJ_3 = 0x2E4,BFD_RELOC_MMIX_PUSHJ_STUBBABLE = 0x2E5,BFD_RELOC_MMIX_JMP = 0x2E6,BFD_RELOC_MMIX_JMP_1 = 0x2E7,BFD_RELOC_MMIX_JMP_2 = 0x2E8,BFD_RELOC_MMIX_JMP_3 = 0x2E9,BFD_RELOC_MMIX_ADDR19 = 0x2EA,BFD_RELOC_MMIX_ADDR27 = 0x2EB,BFD_RELOC_MMIX_REG_OR_BYTE = 0x2EC,BFD_RELOC_MMIX_REG = 0x2ED,BFD_RELOC_MMIX_BASE_PLUS_OFFSET = 0x2EE,BFD_RELOC_MMIX_LOCAL = 0x2EF,BFD_RELOC_AVR_7_PCREL = 0x2F0,BFD_RELOC_AVR_13_PCREL = 0x2F1,BFD_RELOC_AVR_16_PM = 0x2F2,BFD_RELOC_AVR_LO8_LDI = 0x2F3,BFD_RELOC_AVR_HI8_LDI = 0x2F4,BFD_RELOC_AVR_HH8_LDI = 0x2F5,BFD_RELOC_AVR_MS8_LDI = 0x2F6,BFD_RELOC_AVR_LO8_LDI_NEG = 0x2F7,BFD_RELOC_AVR_HI8_LDI_NEG = 0x2F8,BFD_RELOC_AVR_HH8_LDI_NEG = 0x2F9,BFD_RELOC_AVR_MS8_LDI_NEG = 0x2FA,BFD_RELOC_AVR_LO8_LDI_PM = 0x2FB,BFD_RELOC_AVR_LO8_LDI_GS = 0x2FC,BFD_RELOC_AVR_HI8_LDI_PM = 0x2FD,BFD_RELOC_AVR_HI8_LDI_GS = 0x2FE,BFD_RELOC_AVR_HH8_LDI_PM = 0x2FF,BFD_RELOC_AVR_LO8_LDI_PM_NEG = 0x300,BFD_RELOC_AVR_HI8_LDI_PM_NEG = 0x301,BFD_RELOC_AVR_HH8_LDI_PM_NEG = 0x302,BFD_RELOC_AVR_CALL = 0x303,BFD_RELOC_AVR_LDI = 0x304,BFD_RELOC_AVR_6 = 0x305,BFD_RELOC_AVR_6_ADIW = 0x306,BFD_RELOC_390_12 = 0x307,BFD_RELOC_390_GOT12 = 0x308,BFD_RELOC_390_PLT32 = 0x309,BFD_RELOC_390_COPY = 0x30A,BFD_RELOC_390_GLOB_DAT = 0x30B,BFD_RELOC_390_JMP_SLOT = 0x30C,BFD_RELOC_390_RELATIVE = 0x30D,BFD_RELOC_390_GOTPC = 0x30E,BFD_RELOC_390_GOT16 = 0x30F,BFD_RELOC_390_PC16DBL = 0x310,BFD_RELOC_390_PLT16DBL = 0x311,BFD_RELOC_390_PC32DBL = 0x312,BFD_RELOC_390_PLT32DBL = 0x313,BFD_RELOC_390_GOTPCDBL = 0x314,BFD_RELOC_390_GOT64 = 0x315,BFD_RELOC_390_PLT64 = 0x316,BFD_RELOC_390_GOTENT = 0x317,BFD_RELOC_390_GOTOFF64 = 0x318,BFD_RELOC_390_GOTPLT12 = 0x319,BFD_RELOC_390_GOTPLT16 = 0x31A,BFD_RELOC_390_GOTPLT32 = 0x31B,BFD_RELOC_390_GOTPLT64 = 0x31C,BFD_RELOC_390_GOTPLTENT = 0x31D,BFD_RELOC_390_PLTOFF16 = 0x31E,BFD_RELOC_390_PLTOFF32 = 0x31F,BFD_RELOC_390_PLTOFF64 = 0x320,BFD_RELOC_390_TLS_LOAD = 0x321,BFD_RELOC_390_TLS_GDCALL = 0x322,BFD_RELOC_390_TLS_LDCALL = 0x323,BFD_RELOC_390_TLS_GD32 = 0x324,BFD_RELOC_390_TLS_GD64 = 0x325,BFD_RELOC_390_TLS_GOTIE12 = 0x326,BFD_RELOC_390_TLS_GOTIE32 = 0x327,BFD_RELOC_390_TLS_GOTIE64 = 0x328,BFD_RELOC_390_TLS_LDM32 = 0x329,BFD_RELOC_390_TLS_LDM64 = 0x32A,BFD_RELOC_390_TLS_IE32 = 0x32B,BFD_RELOC_390_TLS_IE64 = 0x32C,BFD_RELOC_390_TLS_IEENT = 0x32D,BFD_RELOC_390_TLS_LE32 = 0x32E,BFD_RELOC_390_TLS_LE64 = 0x32F,BFD_RELOC_390_TLS_LDO32 = 0x330,BFD_RELOC_390_TLS_LDO64 = 0x331,BFD_RELOC_390_TLS_DTPMOD = 0x332,BFD_RELOC_390_TLS_DTPOFF = 0x333,BFD_RELOC_390_TLS_TPOFF = 0x334,BFD_RELOC_390_20 = 0x335,BFD_RELOC_390_GOT20 = 0x336,BFD_RELOC_390_GOTPLT20 = 0x337,BFD_RELOC_390_TLS_GOTIE20 = 0x338,BFD_RELOC_SCORE_DUMMY1 = 0x339,BFD_RELOC_SCORE_GPREL15 = 0x33A,BFD_RELOC_SCORE_DUMMY2 = 0x33B,BFD_RELOC_SCORE_JMP = 0x33C,BFD_RELOC_SCORE_BRANCH = 0x33D,BFD_RELOC_SCORE16_JMP = 0x33E,BFD_RELOC_SCORE16_BRANCH = 0x33F,BFD_RELOC_SCORE_GOT15 = 0x340,BFD_RELOC_SCORE_GOT_LO16 = 0x341,BFD_RELOC_SCORE_CALL15 = 0x342,BFD_RELOC_SCORE_DUMMY_HI16 = 0x343,BFD_RELOC_IP2K_FR9 = 0x344,BFD_RELOC_IP2K_BANK = 0x345,BFD_RELOC_IP2K_ADDR16CJP = 0x346,BFD_RELOC_IP2K_PAGE3 = 0x347,BFD_RELOC_IP2K_LO8DATA = 0x348,BFD_RELOC_IP2K_HI8DATA = 0x349,BFD_RELOC_IP2K_EX8DATA = 0x34A,BFD_RELOC_IP2K_LO8INSN = 0x34B,BFD_RELOC_IP2K_HI8INSN = 0x34C,BFD_RELOC_IP2K_PC_SKIP = 0x34D,BFD_RELOC_IP2K_TEXT = 0x34E,BFD_RELOC_IP2K_FR_OFFSET = 0x34F,BFD_RELOC_VPE4KMATH_DATA = 0x350,BFD_RELOC_VPE4KMATH_INSN = 0x351,BFD_RELOC_VTABLE_INHERIT = 0x352,BFD_RELOC_VTABLE_ENTRY = 0x353,BFD_RELOC_IA64_IMM14 = 0x354,BFD_RELOC_IA64_IMM22 = 0x355,BFD_RELOC_IA64_IMM64 = 0x356,BFD_RELOC_IA64_DIR32MSB = 0x357,BFD_RELOC_IA64_DIR32LSB = 0x358,BFD_RELOC_IA64_DIR64MSB = 0x359,BFD_RELOC_IA64_DIR64LSB = 0x35A,BFD_RELOC_IA64_GPREL22 = 0x35B,BFD_RELOC_IA64_GPREL64I = 0x35C,BFD_RELOC_IA64_GPREL32MSB = 0x35D,BFD_RELOC_IA64_GPREL32LSB = 0x35E,BFD_RELOC_IA64_GPREL64MSB = 0x35F,BFD_RELOC_IA64_GPREL64LSB = 0x360,BFD_RELOC_IA64_LTOFF22 = 0x361,BFD_RELOC_IA64_LTOFF64I = 0x362,BFD_RELOC_IA64_PLTOFF22 = 0x363,BFD_RELOC_IA64_PLTOFF64I = 0x364,BFD_RELOC_IA64_PLTOFF64MSB = 0x365,BFD_RELOC_IA64_PLTOFF64LSB = 0x366,BFD_RELOC_IA64_FPTR64I = 0x367,BFD_RELOC_IA64_FPTR32MSB = 0x368,BFD_RELOC_IA64_FPTR32LSB = 0x369,BFD_RELOC_IA64_FPTR64MSB = 0x36A,BFD_RELOC_IA64_FPTR64LSB = 0x36B,BFD_RELOC_IA64_PCREL21B = 0x36C,BFD_RELOC_IA64_PCREL21BI = 0x36D,BFD_RELOC_IA64_PCREL21M = 0x36E,BFD_RELOC_IA64_PCREL21F = 0x36F,BFD_RELOC_IA64_PCREL22 = 0x370,BFD_RELOC_IA64_PCREL60B = 0x371,BFD_RELOC_IA64_PCREL64I = 0x372,BFD_RELOC_IA64_PCREL32MSB = 0x373,BFD_RELOC_IA64_PCREL32LSB = 0x374,BFD_RELOC_IA64_PCREL64MSB = 0x375,BFD_RELOC_IA64_PCREL64LSB = 0x376,BFD_RELOC_IA64_LTOFF_FPTR22 = 0x377,BFD_RELOC_IA64_LTOFF_FPTR64I = 0x378,BFD_RELOC_IA64_LTOFF_FPTR32MSB = 0x379,BFD_RELOC_IA64_LTOFF_FPTR32LSB = 0x37A,BFD_RELOC_IA64_LTOFF_FPTR64MSB = 0x37B,BFD_RELOC_IA64_LTOFF_FPTR64LSB = 0x37C,BFD_RELOC_IA64_SEGREL32MSB = 0x37D,BFD_RELOC_IA64_SEGREL32LSB = 0x37E,BFD_RELOC_IA64_SEGREL64MSB = 0x37F,BFD_RELOC_IA64_SEGREL64LSB = 0x380,BFD_RELOC_IA64_SECREL32MSB = 0x381,BFD_RELOC_IA64_SECREL32LSB = 0x382,BFD_RELOC_IA64_SECREL64MSB = 0x383,BFD_RELOC_IA64_SECREL64LSB = 0x384,BFD_RELOC_IA64_REL32MSB = 0x385,BFD_RELOC_IA64_REL32LSB = 0x386,BFD_RELOC_IA64_REL64MSB = 0x387,BFD_RELOC_IA64_REL64LSB = 0x388,BFD_RELOC_IA64_LTV32MSB = 0x389,BFD_RELOC_IA64_LTV32LSB = 0x38A,BFD_RELOC_IA64_LTV64MSB = 0x38B,BFD_RELOC_IA64_LTV64LSB = 0x38C,BFD_RELOC_IA64_IPLTMSB = 0x38D,BFD_RELOC_IA64_IPLTLSB = 0x38E,BFD_RELOC_IA64_COPY = 0x38F,BFD_RELOC_IA64_LTOFF22X = 0x390,BFD_RELOC_IA64_LDXMOV = 0x391,BFD_RELOC_IA64_TPREL14 = 0x392,BFD_RELOC_IA64_TPREL22 = 0x393,BFD_RELOC_IA64_TPREL64I = 0x394,BFD_RELOC_IA64_TPREL64MSB = 0x395,BFD_RELOC_IA64_TPREL64LSB = 0x396,BFD_RELOC_IA64_LTOFF_TPREL22 = 0x397,BFD_RELOC_IA64_DTPMOD64MSB = 0x398,BFD_RELOC_IA64_DTPMOD64LSB = 0x399,BFD_RELOC_IA64_LTOFF_DTPMOD22 = 0x39A,BFD_RELOC_IA64_DTPREL14 = 0x39B,BFD_RELOC_IA64_DTPREL22 = 0x39C,BFD_RELOC_IA64_DTPREL64I = 0x39D,BFD_RELOC_IA64_DTPREL32MSB = 0x39E,BFD_RELOC_IA64_DTPREL32LSB = 0x39F,BFD_RELOC_IA64_DTPREL64MSB = 0x3A0,BFD_RELOC_IA64_DTPREL64LSB = 0x3A1,BFD_RELOC_IA64_LTOFF_DTPREL22 = 0x3A2,BFD_RELOC_M68HC11_HI8 = 0x3A3,BFD_RELOC_M68HC11_LO8 = 0x3A4,BFD_RELOC_M68HC11_3B = 0x3A5,BFD_RELOC_M68HC11_RL_JUMP = 0x3A6,BFD_RELOC_M68HC11_RL_GROUP = 0x3A7,BFD_RELOC_M68HC11_LO16 = 0x3A8,BFD_RELOC_M68HC11_PAGE = 0x3A9,BFD_RELOC_M68HC11_24 = 0x3AA,BFD_RELOC_M68HC12_5B = 0x3AB,BFD_RELOC_16C_NUM08 = 0x3AC,BFD_RELOC_16C_NUM08_C = 0x3AD,BFD_RELOC_16C_NUM16 = 0x3AE,BFD_RELOC_16C_NUM16_C = 0x3AF,BFD_RELOC_16C_NUM32 = 0x3B0,BFD_RELOC_16C_NUM32_C = 0x3B1,BFD_RELOC_16C_DISP04 = 0x3B2,BFD_RELOC_16C_DISP04_C = 0x3B3,BFD_RELOC_16C_DISP08 = 0x3B4,BFD_RELOC_16C_DISP08_C = 0x3B5,BFD_RELOC_16C_DISP16 = 0x3B6,BFD_RELOC_16C_DISP16_C = 0x3B7,BFD_RELOC_16C_DISP24 = 0x3B8,BFD_RELOC_16C_DISP24_C = 0x3B9,BFD_RELOC_16C_DISP24a = 0x3BA,BFD_RELOC_16C_DISP24a_C = 0x3BB,BFD_RELOC_16C_REG04 = 0x3BC,BFD_RELOC_16C_REG04_C = 0x3BD,BFD_RELOC_16C_REG04a = 0x3BE,BFD_RELOC_16C_REG04a_C = 0x3BF,BFD_RELOC_16C_REG14 = 0x3C0,BFD_RELOC_16C_REG14_C = 0x3C1,BFD_RELOC_16C_REG16 = 0x3C2,BFD_RELOC_16C_REG16_C = 0x3C3,BFD_RELOC_16C_REG20 = 0x3C4,BFD_RELOC_16C_REG20_C = 0x3C5,BFD_RELOC_16C_ABS20 = 0x3C6,BFD_RELOC_16C_ABS20_C = 0x3C7,BFD_RELOC_16C_ABS24 = 0x3C8,BFD_RELOC_16C_ABS24_C = 0x3C9,BFD_RELOC_16C_IMM04 = 0x3CA,BFD_RELOC_16C_IMM04_C = 0x3CB,BFD_RELOC_16C_IMM16 = 0x3CC,BFD_RELOC_16C_IMM16_C = 0x3CD,BFD_RELOC_16C_IMM20 = 0x3CE,BFD_RELOC_16C_IMM20_C = 0x3CF,BFD_RELOC_16C_IMM24 = 0x3D0,BFD_RELOC_16C_IMM24_C = 0x3D1,BFD_RELOC_16C_IMM32 = 0x3D2,BFD_RELOC_16C_IMM32_C = 0x3D3,BFD_RELOC_CRX_REL4 = 0x3D4,BFD_RELOC_CRX_REL8 = 0x3D5,BFD_RELOC_CRX_REL8_CMP = 0x3D6,BFD_RELOC_CRX_REL16 = 0x3D7,BFD_RELOC_CRX_REL24 = 0x3D8,BFD_RELOC_CRX_REL32 = 0x3D9,BFD_RELOC_CRX_REGREL12 = 0x3DA,BFD_RELOC_CRX_REGREL22 = 0x3DB,BFD_RELOC_CRX_REGREL28 = 0x3DC,BFD_RELOC_CRX_REGREL32 = 0x3DD,BFD_RELOC_CRX_ABS16 = 0x3DE,BFD_RELOC_CRX_ABS32 = 0x3DF,BFD_RELOC_CRX_NUM8 = 0x3E0,BFD_RELOC_CRX_NUM16 = 0x3E1,BFD_RELOC_CRX_NUM32 = 0x3E2,BFD_RELOC_CRX_IMM16 = 0x3E3,BFD_RELOC_CRX_IMM32 = 0x3E4,BFD_RELOC_CRX_SWITCH8 = 0x3E5,BFD_RELOC_CRX_SWITCH16 = 0x3E6,BFD_RELOC_CRX_SWITCH32 = 0x3E7,BFD_RELOC_CRIS_BDISP8 = 0x3E8,BFD_RELOC_CRIS_UNSIGNED_5 = 0x3E9,BFD_RELOC_CRIS_SIGNED_6 = 0x3EA,BFD_RELOC_CRIS_UNSIGNED_6 = 0x3EB,BFD_RELOC_CRIS_SIGNED_8 = 0x3EC,BFD_RELOC_CRIS_UNSIGNED_8 = 0x3ED,BFD_RELOC_CRIS_SIGNED_16 = 0x3EE,BFD_RELOC_CRIS_UNSIGNED_16 = 0x3EF,BFD_RELOC_CRIS_LAPCQ_OFFSET = 0x3F0,BFD_RELOC_CRIS_UNSIGNED_4 = 0x3F1,BFD_RELOC_CRIS_COPY = 0x3F2,BFD_RELOC_CRIS_GLOB_DAT = 0x3F3,BFD_RELOC_CRIS_JUMP_SLOT = 0x3F4,BFD_RELOC_CRIS_RELATIVE = 0x3F5,BFD_RELOC_CRIS_32_GOT = 0x3F6,BFD_RELOC_CRIS_16_GOT = 0x3F7,BFD_RELOC_CRIS_32_GOTPLT = 0x3F8,BFD_RELOC_CRIS_16_GOTPLT = 0x3F9,BFD_RELOC_CRIS_32_GOTREL = 0x3FA,BFD_RELOC_CRIS_32_PLT_GOTREL = 0x3FB,BFD_RELOC_CRIS_32_PLT_PCREL = 0x3FC,BFD_RELOC_860_COPY = 0x3FD,BFD_RELOC_860_GLOB_DAT = 0x3FE,BFD_RELOC_860_JUMP_SLOT = 0x3FF,BFD_RELOC_860_RELATIVE = 0x400,BFD_RELOC_860_PC26 = 0x401,BFD_RELOC_860_PLT26 = 0x402,BFD_RELOC_860_PC16 = 0x403,BFD_RELOC_860_LOW0 = 0x404,BFD_RELOC_860_SPLIT0 = 0x405,BFD_RELOC_860_LOW1 = 0x406,BFD_RELOC_860_SPLIT1 = 0x407,BFD_RELOC_860_LOW2 = 0x408,BFD_RELOC_860_SPLIT2 = 0x409,BFD_RELOC_860_LOW3 = 0x40A,BFD_RELOC_860_LOGOT0 = 0x40B,BFD_RELOC_860_SPGOT0 = 0x40C,BFD_RELOC_860_LOGOT1 = 0x40D,BFD_RELOC_860_SPGOT1 = 0x40E,BFD_RELOC_860_LOGOTOFF0 = 0x40F,BFD_RELOC_860_SPGOTOFF0 = 0x410,BFD_RELOC_860_LOGOTOFF1 = 0x411,BFD_RELOC_860_SPGOTOFF1 = 0x412,BFD_RELOC_860_LOGOTOFF2 = 0x413,BFD_RELOC_860_LOGOTOFF3 = 0x414,BFD_RELOC_860_LOPC = 0x415,BFD_RELOC_860_HIGHADJ = 0x416,BFD_RELOC_860_HAGOT = 0x417,BFD_RELOC_860_HAGOTOFF = 0x418,BFD_RELOC_860_HAPC = 0x419,BFD_RELOC_860_HIGH = 0x41A,BFD_RELOC_860_HIGOT = 0x41B,BFD_RELOC_860_HIGOTOFF = 0x41C,BFD_RELOC_OPENRISC_ABS_26 = 0x41D,BFD_RELOC_OPENRISC_REL_26 = 0x41E,BFD_RELOC_H8_DIR16A8 = 0x41F,BFD_RELOC_H8_DIR16R8 = 0x420,BFD_RELOC_H8_DIR24A8 = 0x421,BFD_RELOC_H8_DIR24R8 = 0x422,BFD_RELOC_H8_DIR32A16 = 0x423,BFD_RELOC_XSTORMY16_REL_12 = 0x424,BFD_RELOC_XSTORMY16_12 = 0x425,BFD_RELOC_XSTORMY16_24 = 0x426,BFD_RELOC_XSTORMY16_FPTR16 = 0x427,BFD_RELOC_XC16X_PAG = 0x428,BFD_RELOC_XC16X_POF = 0x429,BFD_RELOC_XC16X_SEG = 0x42A,BFD_RELOC_XC16X_SOF = 0x42B,BFD_RELOC_VAX_GLOB_DAT = 0x42C,BFD_RELOC_VAX_JMP_SLOT = 0x42D,BFD_RELOC_VAX_RELATIVE = 0x42E,BFD_RELOC_MT_PC16 = 0x42F,BFD_RELOC_MT_HI16 = 0x430,BFD_RELOC_MT_LO16 = 0x431,BFD_RELOC_MT_GNU_VTINHERIT = 0x432,BFD_RELOC_MT_GNU_VTENTRY = 0x433,BFD_RELOC_MT_PCINSN8 = 0x434,BFD_RELOC_MSP430_10_PCREL = 0x435,BFD_RELOC_MSP430_16_PCREL = 0x436,BFD_RELOC_MSP430_16 = 0x437,BFD_RELOC_MSP430_16_PCREL_BYTE = 0x438,BFD_RELOC_MSP430_16_BYTE = 0x439,BFD_RELOC_MSP430_2X_PCREL = 0x43A,BFD_RELOC_MSP430_RL_PCREL = 0x43B,BFD_RELOC_IQ2000_OFFSET_16 = 0x43C,BFD_RELOC_IQ2000_OFFSET_21 = 0x43D,BFD_RELOC_IQ2000_UHI16 = 0x43E,BFD_RELOC_XTENSA_RTLD = 0x43F,BFD_RELOC_XTENSA_GLOB_DAT = 0x440,BFD_RELOC_XTENSA_JMP_SLOT = 0x441,BFD_RELOC_XTENSA_RELATIVE = 0x442,BFD_RELOC_XTENSA_PLT = 0x443,BFD_RELOC_XTENSA_DIFF8 = 0x444,BFD_RELOC_XTENSA_DIFF16 = 0x445,BFD_RELOC_XTENSA_DIFF32 = 0x446,BFD_RELOC_XTENSA_SLOT0_OP = 0x447,BFD_RELOC_XTENSA_SLOT1_OP = 0x448,BFD_RELOC_XTENSA_SLOT2_OP = 0x449,BFD_RELOC_XTENSA_SLOT3_OP = 0x44A,BFD_RELOC_XTENSA_SLOT4_OP = 0x44B,BFD_RELOC_XTENSA_SLOT5_OP = 0x44C,BFD_RELOC_XTENSA_SLOT6_OP = 0x44D,BFD_RELOC_XTENSA_SLOT7_OP = 0x44E,BFD_RELOC_XTENSA_SLOT8_OP = 0x44F,BFD_RELOC_XTENSA_SLOT9_OP = 0x450,BFD_RELOC_XTENSA_SLOT10_OP = 0x451,BFD_RELOC_XTENSA_SLOT11_OP = 0x452,BFD_RELOC_XTENSA_SLOT12_OP = 0x453,BFD_RELOC_XTENSA_SLOT13_OP = 0x454,BFD_RELOC_XTENSA_SLOT14_OP = 0x455,BFD_RELOC_XTENSA_SLOT0_ALT = 0x456,BFD_RELOC_XTENSA_SLOT1_ALT = 0x457,BFD_RELOC_XTENSA_SLOT2_ALT = 0x458,BFD_RELOC_XTENSA_SLOT3_ALT = 0x459,BFD_RELOC_XTENSA_SLOT4_ALT = 0x45A,BFD_RELOC_XTENSA_SLOT5_ALT = 0x45B,BFD_RELOC_XTENSA_SLOT6_ALT = 0x45C,BFD_RELOC_XTENSA_SLOT7_ALT = 0x45D,BFD_RELOC_XTENSA_SLOT8_ALT = 0x45E,BFD_RELOC_XTENSA_SLOT9_ALT = 0x45F,BFD_RELOC_XTENSA_SLOT10_ALT = 0x460,BFD_RELOC_XTENSA_SLOT11_ALT = 0x461,BFD_RELOC_XTENSA_SLOT12_ALT = 0x462,BFD_RELOC_XTENSA_SLOT13_ALT = 0x463,BFD_RELOC_XTENSA_SLOT14_ALT = 0x464,BFD_RELOC_XTENSA_OP0 = 0x465,BFD_RELOC_XTENSA_OP1 = 0x466,BFD_RELOC_XTENSA_OP2 = 0x467,BFD_RELOC_XTENSA_ASM_EXPAND = 0x468,BFD_RELOC_XTENSA_ASM_SIMPLIFY = 0x469,BFD_RELOC_Z80_DISP8 = 0x46A,BFD_RELOC_Z8K_DISP7 = 0x46B,BFD_RELOC_Z8K_CALLR = 0x46C,BFD_RELOC_Z8K_IMM4L = 0x46D,BFD_RELOC_UNUSED = 0x46E,};
typedef struct _bfd_window_internal bfd_window_internal;
typedef struct _749257863A78ACF83BA10F9F553F4560 deviceMappingNotify;
typedef struct _0733D28D39B544C0D1FF9AB5A89F168E fsGetEventMaskReply;
typedef struct _BD0CD7113069CF1296E061F976B1B743 fsListCataloguesReq;
typedef struct _54527827121C21F3031526454FE9C7A8 fsOpenBitmapFontReq;
typedef struct _58C3F68DE6E766EC315A68C29D87018F fsQueryExtensionReq;
typedef struct _1CFFE104D7DFB51E74C0A01BE327DA92 fsQueryXBitmaps8Req;
typedef struct _7223AFE63A8123EF6F49E197890FAA10 fsQueryXExtents8Req;
typedef struct _BCAE7384F079FDFA9DD5F4EFBAB29817 iceAuthNextPhaseMsg;
typedef struct _DF35D159A1509306ACCF933DCAD10C10 iceProtocolReplyMsg;
typedef struct _1D4F7230B22579A4FD715C0E003DAA6E iceProtocolSetupMsg;
enum ieee1284_open_flags {F1284_EXCL = 0x1,};
struct internalCallbackRec {unsigned short count;char is_padded;char call_state;};
typedef struct _24D066745D16D85385206417A709F2D6 jas_iccattrvalops_t;
typedef struct _5A262504CED8592D77CD10ACA44C3AD1 jas_image_fmtinfo_t;
typedef struct _A84A6CEBE9E9E241ABAC9CFB04BBE1A2 jas_stream_memobj_t;
typedef struct _6EB75DCF57D6784EE27228E47E167564 lbxMotionDeltaEvent;
typedef  char *lt_dlmutex_geterror(void);
typedef void lt_dlmutex_seterror( char *errmsg);
typedef  struct po_xerror_handler *po_xerror_handler_t;
typedef union _D1D0F511BF997F52624AFB2B0CE27B40 pthread_mutexattr_t;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smRegisterClientMsg;
struct user_fpxregs_struct {unsigned short cwd;unsigned short swd;unsigned short twd;unsigned short fop;int fip;int fcs;int foo;int fos;int mxcsr;int reserved;int st_space[32];int xmm_space[32];int padding[56];};
typedef struct _5C2B60FA26E73A1BF39A96E97412C65C xAllocColorCellsReq;
typedef struct _4E2DFB9F6290197309D31FB10928FA58 xAllocNamedColorReq;
typedef struct _AppleWMNotify xAppleWMNotifyEvent;
typedef struct _56F965C4CB1B37CA1C9344E914749FD8 xCirculateWindowReq;
typedef struct _57E6A23A76D16D83EF023BCC9C7B7628 xConfigureWindowReq;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXQueryVersionReq;
typedef struct _BDA8B21BBF344B8E23C198E46F24428F xDMXRemoveScreenReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSGetTimeoutsReq;
typedef struct _F571D10236F18BD99A11DF3B50D0C123 xDPMSSetTimeoutsReq;
typedef struct _XEVIQueryVersion xEVIQueryVersionReq;
typedef struct _xExtendedVisualInfo xExtendedVisualInfo;
typedef struct GLXCreatePixmap xGLXCreatePixmapReq;
typedef struct GLXCreateWindow xGLXCreateWindowReq;
typedef struct GLXGetFBConfigs xGLXGetFBConfigsReq;
typedef struct GLXQueryContext xGLXQueryContextReq;
typedef struct GLXQueryVersion xGLXQueryVersionReq;
typedef struct _546FDEDFB3946C28A5792DCE2825D685 xGLXReadPixelsReply;
typedef struct _091E54628E296745C34C39E0F9BDAA79 xGLXRenderModeReply;
typedef struct _7CC8751860F3412009ACB1FCC844661E xGLXVendorPrivReply;
typedef struct _8E9D6FDA341A5CD3E2BA41AECEFC8DB5 xGetInputFocusReply;
typedef struct _DB0E3B2132CB3BCDB478CD47716D7AA6 xGetMotionEventsReq;
typedef struct _4E7073A36C65C782742204589C7C453B xIntegerFeedbackCtl;
typedef struct _0894F55B6F728822A381396F6EE8B24B xLbxConnSetupPrefix;
typedef struct _LbxQueryVersion xLbxQueryVersionReq;
typedef struct _91DA6C1759B9453440D37A912FAA4391 xMITGetBugModeReply;
typedef struct _PrintGetContext xPrintGetContextReq;
typedef struct _PrintSetContext xPrintSetContextReq;
typedef struct _9990F7522FA29648C94CCC0846165B95 xQueryBestSizeReply;
typedef struct _0A710E56E462CA6F472C6BEF95652ED5 xRRGetScreenInfoReq;
typedef struct _80FA3E9E2CB8CB94E88F4B4B7A4726B2 xRenderAddGlyphsReq;
typedef struct _0DEEDF24E65D3751BB6E7763FD103A13 xRenderCompositeReq;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTrianglesReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xSetDeviceModeReply;
typedef struct _ShapeRectangles xShapeRectanglesReq;
typedef struct _ShmCompletion xShmCompletionEvent;
typedef struct _ShmCreatePixmap xShmCreatePixmapReq;
typedef struct _ShmQueryVersion xShmQueryVersionReq;
typedef struct _C7406CB336B739A87F2A2E6FB42BC742 xStoreNamedColorReq;
typedef struct _xSyncChangeAlarmReq xSyncChangeAlarmReq;
typedef struct _xSyncCreateAlarmReq xSyncCreateAlarmReq;
typedef struct _xSyncGetPriority xSyncGetPriorityReq;
typedef struct _xSyncSetPriority xSyncSetPriorityReq;
typedef struct _BC0C03DE100E0ADBA9BE7AF77D01715A xTranslateCoordsReq;
typedef struct _9C8855C5416F841FBC956426CB420C87 xUngrabDeviceKeyReq;
typedef struct _XDGASelectInput xXDGASelectInputReq;
typedef struct _XDGASetViewport xXDGASetViewportReq;
typedef struct _121BB16CF18BA8DCF6DED8D25AA283B5 xXFixesSetRegionReq;
typedef struct _A1602EFEF26A0DD20EAD389B18F82E81 xXTestGetVersionReq;
typedef struct _4E78C26E658CAF0AD1368496874A57C9 xXTrapGetAvailReply;
typedef struct _23528D99DB311AE570394A3CCFCAFAB2 xXTrapGetLITimReply;
typedef struct _DBE3D025CF6B61E7535360E73F7BAA3C xXTrapGetStatsReply;
typedef struct _XagDestroyAssoc xXagDestroyAssocReq;
typedef struct _XagQueryVersion xXagQueryVersionReq;
typedef struct _XcupStoreColors xXcupStoreColorsReq;
typedef struct _F2F9B6351970DCB60CFA1FAEAB4D2E42 xXineramaScreenInfo;
enum xcb_backing_store_t {XCB_BACKING_STORE_NOT_USEFUL = 0x0,XCB_BACKING_STORE_WHEN_MAPPED = 0x1,XCB_BACKING_STORE_ALWAYS = 0x2,};
enum xcb_clip_ordering_t {XCB_CLIP_ORDERING_UNSORTED = 0x0,XCB_CLIP_ORDERING_Y_SORTED = 0x1,XCB_CLIP_ORDERING_YX_SORTED = 0x2,XCB_CLIP_ORDERING_YX_BANDED = 0x3,};
enum xcb_config_window_t {XCB_CONFIG_WINDOW_X = 0x1,XCB_CONFIG_WINDOW_Y = 0x2,XCB_CONFIG_WINDOW_WIDTH = 0x4,XCB_CONFIG_WINDOW_HEIGHT = 0x8,XCB_CONFIG_WINDOW_BORDER_WIDTH = 0x10,XCB_CONFIG_WINDOW_SIBLING = 0x20,XCB_CONFIG_WINDOW_STACK_MODE = 0x40,};
typedef struct _AC79B0E9D40EF6B7A4C8BE07CA2286DC xcb_generic_error_t;
typedef struct _F14124C6CA524F54899508FD11C59AF5 xcb_generic_event_t;
typedef struct _7FFBF4E81BEBC201DEAF468EBD0F9AD5 xcb_generic_reply_t;
struct xcb_host_iterator_t {xcb_host_t *data;int rem;int index;};
enum xcb_notify_detail_t {XCB_NOTIFY_DETAIL_ANCESTOR = 0x0,XCB_NOTIFY_DETAIL_VIRTUAL = 0x1,XCB_NOTIFY_DETAIL_INFERIOR = 0x2,XCB_NOTIFY_DETAIL_NONLINEAR = 0x3,XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL = 0x4,XCB_NOTIFY_DETAIL_POINTER = 0x5,XCB_NOTIFY_DETAIL_POINTER_ROOT = 0x6,XCB_NOTIFY_DETAIL_NONE = 0x7,};
enum xcb_record_h_type_t {XCB_RECORD_H_TYPE_FROM_SERVER_TIME = 0x1,XCB_RECORD_H_TYPE_FROM_CLIENT_TIME = 0x2,XCB_RECORD_H_TYPE_FROM_CLIENT_SEQUENCE = 0x4,};
enum xcb_render_repeat_t {XCB_RENDER_REPEAT_NONE = 0x0,XCB_RENDER_REPEAT_NORMAL = 0x1,XCB_RENDER_REPEAT_PAD = 0x2,XCB_RENDER_REPEAT_REFLECT = 0x3,};
enum xcb_sync_testtype_t {XCB_SYNC_TESTTYPE_POSITIVE_TRANSITION = 0x0,XCB_SYNC_TESTTYPE_NEGATIVE_TRANSITION = 0x1,XCB_SYNC_TESTTYPE_POSITIVE_COMPARISON = 0x2,XCB_SYNC_TESTTYPE_NEGATIVE_COMPARISON = 0x3,};
typedef struct _xkbBehaviorWireDesc xkbBehaviorWireDesc;
typedef struct _xkbGetControlsReply xkbGetControlsReply;
typedef struct _xkbGetDeviceInfo xkbGetDeviceInfoReq;
typedef struct _xkbGetGeometryReply xkbGetGeometryReply;
typedef struct _xkbSetDeviceInfo xkbSetDeviceInfoReq;
typedef struct _xkmIndicatorMapDesc xkmIndicatorMapDesc;
typedef struct _xkmSymInterpretDesc xkmSymInterpretDesc;
typedef struct _9A02475B75BDC9A6C1FC81F46F9E4217 xvQueryEncodingsReq;
typedef struct _E7AFD6532C2786B1E1EBCA6ADECADE75 xvQueryExtensionReq;
typedef struct _488FF45B2B0EF525AA1AD13B1739492B xvmcQueryVersionReq;
typedef struct _AsciiSinkClassPart AsciiSinkClassPart;
typedef struct _CommandClassRec *CommandWidgetClass;
typedef struct _CompositeClassPart CompositeClassPart;
typedef struct _ConstraintClassRec ConstraintClassRec;
typedef struct _F913BEC784D3D8439A039A40A101A5CC DMXInputAttributes;
typedef struct _ExifContentPrivate ExifContentPrivate;
typedef struct _794969DFB3CB8212888176F478F3AFCC ExtendedVisualInfo;
typedef unsigned int FSBitmapFormatMask;
typedef struct FT_OutlineGlyphRec_ FT_OutlineGlyphRec;
typedef struct FT_Size_RequestRec_ FT_Size_RequestRec;
typedef struct FT_Var_Named_Style_ FT_Var_Named_Style;
typedef struct _FontBitmapEntry *FontBitmapEntryPtr;
typedef struct _FontBitmapEntry FontBitmapEntryRec;
typedef struct _FontPathElement *FontPathElementPtr;
typedef struct _FontPathElement FontPathElementRec;
typedef struct _FormConstraintsRec FormConstraintsRec;
typedef struct GLUtesselator GLUtriangulatorObj;
typedef struct LIBMTP_mtpdevice_struct LIBMTP_mtpdevice_t;
enum MACRO_AllTemporary {AllTemporary = 0,};
enum MACRO_AsyncPointer {AsyncPointer = 0,SyncPointer = 1,ReplayPointer = 2,};
enum MACRO_BSD_COMPRESS {CI_BSD_COMPRESS = 21,CILEN_BSD_COMPRESS = 3,};
enum MACRO_BadCharRange {BadCharRange = 87,};
enum MACRO_BadLbxClient {BadLbxClient = 0,LbxNumberErrors = 1,};
enum MACRO_CI_PREDICTOR {CI_PREDICTOR_1 = 1,};
enum MACRO_COMMAND_LINE {COMMAND_LINE_SIZE = 256,};
enum MACRO_COPY_ABORTED {COPY_ABORTED = 0xA,};
enum MACRO_CWBackPixmap {CWBackPixmap = 1,CWBackPixel = 2,CWBorderPixmap = 4,CWBorderPixel = 8,CWBitGravity = 16,CWWinGravity = 32,CWBackingStore = 64,CWBackingPlanes = 128,CWBackingPixel = 256,CWOverrideRedirect = 512,CWSaveUnder = 1024,CWEventMask = 2048,CWDontPropagate = 4096,CWColormap = 8192,CWCursor = 16384,};
enum MACRO_DATA_PROTECT {DATA_PROTECT = 0x7,};
enum MACRO_DEFAULT_GRIP {DEFAULT_GRIP_SIZE = 8,};
enum MACRO_DEFAULT_JUMP {DEFAULT_JUMP = -1,};
enum MACRO_DEFAULT_TEXT {DEFAULT_TEXT_HEIGHT = 65535,DEFAULT_TAB_SIZE = 8,};
enum MACRO_DMXInputType {DMXInputType = 1,DMXInputPhysicalScreen = 2,DMXInputSendsCore = 4,};
enum MACRO_ELFCLASSNONE {ELFCLASSNONE = 0,ELFCLASS32 = 1,ELFCLASS64 = 2,};
enum MACRO_EnableAccess {EnableAccess = 1,};
enum MACRO_FSBadRequest {FSBadRequest = 0,FSBadFormat = 1,FSBadFont = 2,};
enum MACRO_FontLoadInfo {FontLoadInfo = 0x1,FontLoadProps = 0x2,FontLoadMetrics = 0x4,FontLoadBitmaps = 0x8,};
enum MACRO_GFXCacheNone {GFXCacheNone = 0xF,};
enum MACRO_GLOB_NOSPACE {GLOB_NOSPACE = 1,GLOB_ABORTED = 2,GLOB_NOMATCH = 3,GLOB_NOSYS = 4,};
enum MACRO_GLXBadPixmap {GLXBadPixmap = 3,GLXBadContextTag = 4,};
enum MACRO_GLXBadWindow {GLXBadWindow = 12,};
enum MACRO_GMON_VERSION {GMON_VERSION = 1,GMON_SHOBJ_VERSION = 131071,};
enum MACRO_GXorInverted {GXorInverted = 0xD,};
enum MACRO_GrabModeSync {GrabModeSync = 0,GrabModeAsync = 1,};
enum MACRO_GravityEvent {lbxsz_GravityEvent = 16,lbxupsz_GravityEvent = 16,};
enum MACRO_HASHFRACTION {HASHFRACTION = 2,};
enum MACRO_HISTFRACTION {HISTFRACTION = 2,};
enum MACRO_ICMP6_ROUTER {ICMP6_ROUTER_RENUMBERING = 138,ICMP6_RR_FLAGS_TEST = 128,ICMP6_RR_FLAGS_REQRESULT = 64,ICMP6_RR_FLAGS_FORCEAPPLY = 32,ICMP6_RR_FLAGS_SPECSITE = 16,ICMP6_RR_FLAGS_PREVDONE = 8,};
enum MACRO_INTERMEDIATE {INTERMEDIATE_GOOD = 0x8,INTERMEDIATE_C_GOOD = 0xA,};
enum MACRO_IP_MAXPACKET {IP_MAXPACKET = 65535,};
enum MACRO_IceBadLength {IceBadLength = 0x8002,};
enum MACRO_KDGETKEYCODE {KDGETKEYCODE = 0x4B4C,};
enum MACRO_KDSETKEYCODE {KDSETKEYCODE = 0x4B4D,};
enum MACRO_K_SCROLLLOCK {K_SCROLLLOCK = 0x1,K_NUMLOCK = 0x2,K_CAPSLOCK = 0x4,};
enum MACRO_KeymapNotify {KeymapNotify = 11,};
enum MACRO_LIBGETTEXTPO {LIBGETTEXTPO_VERSION = 0xF00,};
enum MACRO_LM_MAXSTRLEN {LM_MAXSTRLEN = 1024,};
enum MACRO_LOCK_SUCCESS {LOCK_SUCCESS = 0,LOCK_ERROR = 1,LOCK_TIMEOUT = 2,};
enum MACRO_MAXDIMENSION {MAXDIMENSION = 2147483647,};
enum MACRO_MAXERRMSGLEN {MAXERRMSGLEN = 255,};
enum MACRO_MAXYPDATALEN {MAXYPDATALEN = 1023,};
enum MACRO_MAX_IPOPTLEN {MAX_IPOPTLEN = 40,};
enum MACRO_MEDIUM_ERROR {MEDIUM_ERROR = 0x3,HARDWARE_ERROR = 0x4,};
enum MACRO_MENU_COMMAND {MIN_MENU_COMMAND = 512,MAX_MENU_COMMAND = 528,};
enum MACRO_MIDI_NOTEOFF {MIDI_NOTEOFF = 0x80,MIDI_NOTEON = 0x90,MIDI_KEY_PRESSURE = 0xA0,MIDI_CTL_CHANGE = 0xB0,MIDI_PGM_CHANGE = 0xC0,MIDI_CHN_PRESSURE = 0xD0,MIDI_PITCH_BEND = 0xE0,MIDI_SYSTEM_PREFIX = 0xF0,};
enum MACRO_MTSETDENSITY {MTSETDENSITY = 21,};
enum MACRO_Mod1MapIndex {Mod1MapIndex = 3,Mod2MapIndex = 4,};
enum MACRO_Mod3MapIndex {Mod3MapIndex = 5,};
enum MACRO_Mod4MapIndex {Mod4MapIndex = 6,};
enum MACRO_Mod5MapIndex {Mod5MapIndex = 7,Button1Mask = 256,Button2Mask = 512,Button3Mask = 1024,Button4Mask = 2048,Button5Mask = 4096,AnyModifier = 32768,};
enum MACRO_MotionNotify {MotionNotify = 6,};
enum MACRO_NCURSES_ATTR {NCURSES_ATTR_SHIFT = 8,};
enum MACRO_NCURSES_TERM {NCURSES_TERM_H_incl = 1,};
enum MACRO_NO_HIGHLIGHT {NO_HIGHLIGHT = -1,};
enum MACRO_NULL_xdrproc {NULL_xdrproc_t = 0,};
enum MACRO_NotifyNormal {NotifyNormal = 0,NotifyGrab = 1,NotifyUngrab = 2,};
enum MACRO_NullCharInfo {NullCharInfo = 0,};
enum MACRO_NullFontInfo {NullFontInfo = 0,};
enum MACRO_NullFontName {NullFontName = 0,};
enum MACRO_NullProperty {NullProperty = 0,};
enum MACRO_PictFormatID {PictFormatID = 1,PictFormatType = 2,PictFormatDepth = 4,PictFormatRed = 8,PictFormatRedMask = 16,PictFormatGreen = 32,PictFormatGreenMask = 64,PictFormatBlue = 128,PictFormatBlueMask = 256,PictFormatAlpha = 512,PictFormatAlphaMask = 1024,PictFormatColormap = 2048,};
enum MACRO_READ_ELEMENT {READ_ELEMENT_STATUS = 0xB8,};
enum MACRO_READ_REVERSE {READ_REVERSE = 0xF,};
enum MACRO_RES_MAXNDOTS {RES_MAXNDOTS = 15,RES_MAXRETRANS = 30,RES_MAXRETRY = 5,RES_DFLRETRY = 2,RES_MAXTIME = 65535,};
enum MACRO_RUSERSVERS_0 {RUSERSVERS = 3,MAXUSERS = 100,};
enum MACRO_RUSERSVERS_3 {RUSERSVERS_3 = 3,};
enum MACRO_RectangleOut {RectangleOut = 0,RectangleIn = 1,RectanglePart = 2,};
enum MACRO_RevertToNone {RevertToNone = 0,RevertToPointerRoot = 1,RevertToParent = 2,};
enum MACRO_SEQ_FULLSIZE {SEQ_FULLSIZE = 0xFD,SEQ_PRIVATE = 0xFE,SEQ_EXTENDED = 0xFF,};
enum MACRO_SIOCADDMULTI {SIOCADDMULTI = 0x8931,};
enum MACRO_SIOCDELMULTI {SIOCDELMULTI = 0x8932,};
enum MACRO_SIOCGIFCOUNT {SIOCGIFCOUNT = 0x8938,};
enum MACRO_SIOCGIFENCAP {SIOCGIFENCAP = 0x8925,};
enum MACRO_SIOCGIFFLAGS {SIOCGIFFLAGS = 0x8913,};
enum MACRO_SIOCGIFINDEX {SIOCGIFINDEX = 0x8933,};
enum MACRO_SIOCGIFSLAVE {SIOCGIFSLAVE = 0x8929,};
enum MACRO_SIOCGIWESSID {SIOCGIWESSID = 0x8B1B,};
enum MACRO_SIOCGIWGENIE {SIOCGIWGENIE = 0x8B31,};
enum MACRO_SIOCGIWMODUL {SIOCGIWMODUL = 0x8B2F,};
enum MACRO_SIOCGIWNICKN {SIOCGIWNICKN = 0x8B1D,};
enum MACRO_SIOCGIWPOWER {SIOCGIWPOWER = 0x8B2D,};
enum MACRO_SIOCGIWRANGE {SIOCGIWRANGE = 0x8B0B,};
enum MACRO_SIOCGIWRETRY {SIOCGIWRETRY = 0x8B29,};
enum MACRO_SIOCGIWSTATS {SIOCGIWSTATS = 0x8B0F,};
enum MACRO_SIOCGIWTXPOW {SIOCGIWTXPOW = 0x8B27,};
enum MACRO_SIOCNRCTLCON {SIOCNRCTLCON = 35300,};
enum MACRO_SIOCNRDECOBS {SIOCNRDECOBS = 35298,};
enum MACRO_SIOCRSACCEPT {SIOCRSACCEPT = 35299,};
enum MACRO_SIOCRSGCAUSE {SIOCRSGCAUSE = 35296,};
enum MACRO_SIOCRSL2CALL {SIOCRSL2CALL = 35298,};
enum MACRO_SIOCRSSCAUSE {SIOCRSSCAUSE = 35297,};
enum MACRO_SIOCSIFENCAP {SIOCSIFENCAP = 0x8926,};
enum MACRO_SIOCSIFFLAGS {SIOCSIFFLAGS = 0x8914,};
enum MACRO_SIOCSIFSLAVE {SIOCSIFSLAVE = 0x8930,};
enum MACRO_SIOCSIWESSID {SIOCSIWESSID = 0x8B1A,};
enum MACRO_SIOCSIWGENIE {SIOCSIWGENIE = 0x8B30,};
enum MACRO_SIOCSIWMODUL {SIOCSIWMODUL = 0x8B2E,};
enum MACRO_SIOCSIWNICKN {SIOCSIWNICKN = 0x8B1C,};
enum MACRO_SIOCSIWPMKSA {SIOCSIWPMKSA = 0x8B36,};
enum MACRO_SIOCSIWPOWER {SIOCSIWPOWER = 0x8B2C,};
enum MACRO_SIOCSIWRANGE {SIOCSIWRANGE = 0x8B0A,};
enum MACRO_SIOCSIWRETRY {SIOCSIWRETRY = 0x8B28,};
enum MACRO_SIOCSIWSTATS {SIOCSIWSTATS = 0x8B0E,};
enum MACRO_SIOCSIWTXPOW {SIOCSIWTXPOW = 0x8B26,};
enum MACRO_SIZE_SPECIFY {SIZE_SPECIFY_MASK = 0xF,PIXELSIZE_MASK = 0x3,};
enum MACRO_SmProtoMajor {SmProtoMajor = 1,};
enum MACRO_SmProtoMinor {SmProtoMinor = 0,};
enum MACRO_SmSaveGlobal {SmSaveGlobal = 0,SmSaveLocal = 1,SmSaveBoth = 2,};
enum MACRO_StillWorking {StillWorking = 81,};
enum MACRO_SubPixelNone {SubPixelNone = 5,};
enum MACRO_TCStatistics {TCStatistics = 1,TCRequests = 2,TCEvents = 4,TCMaxPacket = 8,TCCmdKey = 16,TCTimeStamps = 32,TCWinXY = 64,TCXInput = 128,TCReqCBs = 256,TCEvtCBs = 512,TCCursor = 1024,TCColorReplies = 2048,TCGrabServer = 4096,};
enum MACRO_TIOCGSOFTCAR {TIOCGSOFTCAR = 0x5419,};
enum MACRO_TIOCPKT_DATA {TIOCPKT_DATA = 0,TIOCPKT_FLUSHREAD = 1,TIOCPKT_FLUSHWRITE = 2,TIOCPKT_STOP = 4,TIOCPKT_START = 8,TIOCPKT_NOSTOP = 16,TIOCPKT_DOSTOP = 32,};
enum MACRO_TIOCSERGWILD {TIOCSERGWILD = 0x5454,};
enum MACRO_TIOCSERSWILD {TIOCSERSWILD = 0x5455,};
enum MACRO_TIOCSSOFTCAR {TIOCSSOFTCAR = 0x541A,};
enum MACRO_UnmapGravity {UnmapGravity = 0,};
enum MACRO_UseXKeyboard {UseXKeyboard = 0xFF,};
enum MACRO_VisualNoMask {VisualNoMask = 0x0,VisualIDMask = 0x1,VisualScreenMask = 0x2,VisualDepthMask = 0x4,VisualClassMask = 0x8,VisualRedMaskMask = 0x10,VisualGreenMaskMask = 0x20,VisualBlueMaskMask = 0x40,VisualColormapSizeMask = 0x80,VisualBitsPerRGBMask = 0x100,};
enum MACRO_WBXML_PUBLIC {WBXML_PUBLIC_ID_SYNCML_SYNCML10 = 0xFD1,WBXML_PUBLIC_ID_SYNCML_DEVINF10 = 0xFD2,WBXML_PUBLIC_ID_SYNCML_METINF10 = 0x1,WBXML_PUBLIC_ID_SYNCML_SYNCML11 = 0xFD3,WBXML_PUBLIC_ID_SYNCML_DEVINF11 = 0xFD4,WBXML_PUBLIC_ID_SYNCML_METINF11 = 0x1,WBXML_PUBLIC_ID_WV_CSP11 = 0x10,WBXML_PUBLIC_ID_WV_CSP12 = 0x1,};
enum MACRO_WLNSPERBATCH {WLNSPERBATCH = 50,ZLNSPERBATCH = 1024,};
enum MACRO_WRITE_VERIFY {WRITE_VERIFY = 0x2E,};
enum MACRO_XDGANeedRoot {XDGANeedRoot = 0x1,};
enum MACRO_XEKeyIsClear {XEKeyIsClear = 0,XEKeyIsEcho = 1,XEKeyIsOther = 2,};
enum MACRO_XETrapCursor {XETrapCursor = 10,};
enum MACRO_XETrapXInput {XETrapXInput = 11,};
enum MACRO_XI_BadDevice {XI_BadDevice = 0,XI_BadEvent = 1,XI_BadMode = 2,XI_DeviceBusy = 3,XI_BadClass = 4,};
enum MACRO_XPBadContext {XPBadContext = 0,XPBadSequence = 1,XPBadResourceID = 2,};
enum MACRO_XPFinishAttr {XPFinishAttr = 13,};
enum MACRO_XPIntDocAttr {XPIntDocAttr = 18,};
enum MACRO_XPIntJobAttr {XPIntJobAttr = 17,};
enum MACRO_XPMediumAttr {XPMediumAttr = 6,};
enum MACRO_XPOutputAttr {XPOutputAttr = 14,};
enum MACRO_XPResConAttr {XPResConAttr = 19,};
enum MACRO_XPServerAttr {XPServerAttr = 5,};
enum MACRO_XTestACTIONS {XTestACTIONS_SIZE = 28,};
enum MACRO_XawPRSliderX {XawPRSliderX = 1,XawPRSliderY = 2,XawPRSliderWidth = 4,XawPRSliderHeight = 8,XawPRCanvasWidth = 16,XawPRCanvasHeight = 32,};
enum MACRO_XcmsInitNone {XcmsInitNone = 0x0,XcmsInitSuccess = 0x1,};
enum MACRO_XcursorFalse {XcursorFalse = 0,};
enum MACRO_XkbAllGroups {XkbAllGroups = 255,};
enum MACRO_XkbEventCode {XkbEventCode = 0,XkbNumberEvents = 1,};
enum MACRO_XkmLastIndex {XkmLastIndex = 6,};
enum MACRO_XkmTypesMask {XkmTypesMask = 1,XkmCompatMapMask = 2,XkmSymbolsMask = 4,XkmIndicatorsMask = 8,XkmKeyNamesMask = 16,XkmGeometryMask = 32,XkmVirtualModsMask = 64,};
enum MACRO_XtMyAncestor {XtMyAncestor = 0,XtMyDescendant = 1,XtMyCousin = 2,};
enum MACRO_XvLastReason {XvLastReason = 4,};
enum MACRO_XvMCRevision {XvMCRevision = 1,};
enum MACRO_XvNumReasons {XvNumReasons = 5,};
enum MACRO_ZLIB_STRCOMP {ZLIB_STRCOMP_OPT_LEN = 7,ZLIB_PACKET_HDRLEN = 2,ZLIB_MAX_DATALEN = 4095,ZLIB_MAX_PLAIN = 270,ZLIB_MAX_OUTLEN = 540,ZLIB_COMPRESS_FLAG = 128,ZLIB_DATALEN_MASK = 15,};
enum MACRO__BITS_LOCALE {_BITS_LOCALE_H = 1,_UTMP_H = 1,};
enum MACRO__BITS_POSIX1 {_BITS_POSIX1_LIM_H = 1,};
enum MACRO__BITS_POSIX2 {_BITS_POSIX2_LIM_H = 1,};
enum MACRO__BITS_SETJMP {_BITS_SETJMP_H = 1,};
enum MACRO__HAVE_STRUCT {_HAVE_STRUCT_TERMIOS_C_ISPEED = 1,_HAVE_STRUCT_TERMIOS_C_OSPEED = 1,};
enum MACRO__NETINET_IP6 {_NETINET_IP6_H = 1,};
enum MACRO__NETINET_TCP {_NETINET_TCP_H = 1,};
enum MACRO__POSIX2_CHAR {_POSIX2_CHAR_TERM = 200112,};
enum MACRO__SYS_INOTIFY {_SYS_INOTIFY_H = 1,};
enum MACRO__SYS_KDAEMON {_SYS_KDAEMON_H = 1,_SYS_KLOG_H = 1,_SYS_MMAN_H = 1,};
enum MACRO__SYS_SYSINFO {_SYS_SYSINFO_H = 1,};
enum MACRO__SYS_UTSNAME {_SYS_UTSNAME_H = 1,};
enum MACRO__XAW_PRINTSP {_XAW_PRINTSP_H = 1,};
enum MACRO__XtCBCalling {_XtCBCalling = 1,_XtCBFreeAfterCalling = 2,};
enum MACRO___GLX_NUMBER {__GLX_NUMBER_ERRORS = 13,};
enum MACRO___GLX_SINGLE {__GLX_SINGLE_HDR_SIZE = 8,__GLX_VENDPRIV_HDR_SIZE = 12,__GLX_RENDER_HDR_SIZE = 4,__GLX_RENDER_LARGE_HDR_SIZE = 8,__GLX_PIXEL_HDR_SIZE = 20,__GLX_PIXEL_3D_HDR_SIZE = 36,__GLX_BITMAP_HDR_SIZE = 24,__GLX_BITMAP_CMD_HDR_SIZE = 48,__GLX_BITMAP_CMD_DISPATCH_HDR_SIZE = 44,__GLX_POLYGONSTIPPLE_CMD_HDR_SIZE = 24,__GLX_TEXIMAGE_HDR_SIZE = 32,__GLX_TEXIMAGE_CMD_HDR_SIZE = 56,__GLX_TEXIMAGE_CMD_DISPATCH_HDR_SIZE = 52,__GLX_TEXIMAGE_3D_HDR_SIZE = 44,__GLX_TEXIMAGE_3D_CMD_HDR_SIZE = 84,__GLX_TEXIMAGE_3D_CMD_DISPATCH_HDR_SIZE = 80,__GLX_TEXSUBIMAGE_HDR_SIZE = 36,__GLX_TEXSUBIMAGE_CMD_HDR_SIZE = 60,__GLX_TEXSUBIMAGE_CMD_DISPATCH_HDR_SIZE = 56,__GLX_TEXSUBIMAGE_3D_HDR_SIZE = 52,__GLX_TEXSUBIMAGE_3D_CMD_HDR_SIZE = 92,__GLX_TEXSUBIMAGE_3D_CMD_DISPATCH_HDR_SIZE = 88,__GLX_COMPRESSED_TEXIMAGE_HDR_SIZE = 28,__GLX_COMPRESSED_TEXIMAGE_CMD_HDR_SIZE = 32,__GLX_COMPRESSED_TEXIMAGE_DISPATCH_HDR_SIZE = 28,__GLX_COMPRESSED_TEXSUBIMAGE_HDR_SIZE = 32,__GLX_COMPRESSED_TEXSUBIMAGE_CMD_HDR_SIZE = 36,__GLX_COMPRESSED_TEXSUBIMAGE_DISPATCH_HDR_SIZE = 32,__GLX_COMPRESSED_TEXIMAGE_3D_HDR_SIZE = 32,__GLX_COMPRESSED_TEXIMAGE_3D_CMD_HDR_SIZE = 36,__GLX_COMPRESSED_TEXIMAGE_3D_DISPATCH_HDR_SIZE = 32,__GLX_COMPRESSED_TEXSUBIMAGE_3D_HDR_SIZE = 32,__GLX_COMPRESSED_TEXSUBIMAGE_3D_CMD_HDR_SIZE = 36,__GLX_COMPRESSED_TEXSUBIMAGE_3D_DISPATCH_HDR_SIZE = 32,__GLX_DRAWPIXELS_HDR_SIZE = 16,__GLX_DRAWPIXELS_CMD_HDR_SIZE = 40,__GLX_DRAWPIXELS_CMD_DISPATCH_HDR_SIZE = 36,__GLX_CONV_FILT_HDR_SIZE = 24,__GLX_CONV_FILT_CMD_HDR_SIZE = 48,__GLX_CONV_FILT_CMD_DISPATCH_HDR_SIZE = 44,__GLX_DRAWARRAYS_HDR_SIZE = 12,__GLX_DRAWARRAYS_CMD_HDR_SIZE = 16,__GLX_COMPONENT_HDR_SIZE = 12,__GLX_COLOR_TABLE_HDR_SIZE = 20,__GLX_COLOR_TABLE_CMD_HDR_SIZE = 44,__GLX_COLOR_SUBTABLE_HDR_SIZE = 20,__GLX_COLOR_SUBTABLE_CMD_HDR_SIZE = 44,};
enum MACRO___NETINET_IP {__NETINET_IP_ICMP_H = 1,};
enum MACRO___SIZEOF_SEM {__SIZEOF_SEM_T = 16,};
enum MACRO__proximityIn {_proximityIn = 0,_proximityOut = 1,};
enum MACRO_sz_EventData {sz_EventData = 24,};
enum MACRO_sz_XWDheader {sz_XWDheader = 100,sz_XWDColor = 12,};
enum MACRO_zeroPosition {zeroPosition = 0,XawLF = 10,};
typedef struct _MenuButtonClassRec MenuButtonClassRec;
typedef struct _MultiSinkClassPart MultiSinkClassPart;
typedef struct _PerDisplayTable *PerDisplayTablePtr;
typedef struct _3D2747B906FBDDB46B196214774699C1 RECORD_CLIENT_INFO;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F ScrollbarClassPart;
typedef struct _4E230DA965C384CCE937FCE2A8CE1FCC *SessionShellWidget;
typedef struct _SimpleMenuClassRec SimpleMenuClassRec;
typedef struct _SmeLineClassRec *SmeLineObjectClass;
typedef struct _46547E058388880E40CCFC83289F8447 SmeThreeDClassPart;
typedef struct _StripChartClassRec StripChartClassRec;
typedef struct _TMComplexBindProcsRec *TMComplexBindProcs;
typedef struct _TMComplexStateTreeRec *TMComplexStateTree;
typedef struct _TMModifierMatchRec TMModifierMatchRec;
typedef struct _TextSrcClassRec *TextSrcObjectClass;
typedef struct _6E603A4D6E053F4C38E194015FCDFC50 TransientShellPart;
typedef struct _TreeConstraintsRec TreeConstraintsRec;
typedef struct WBXMLAttributeName_s WBXMLAttributeName;
typedef struct WBXMLExtValueEntry_s WBXMLExtValueEntry;
typedef struct WBXMLPublicIDEntry_s WBXMLPublicIDEntry;
typedef struct WBXMLTreeAttribute_s WBXMLTreeAttribute;
typedef struct _WMShellClassRec *WMShellWidgetClass;
typedef struct _0633EDD3133237A2FCFD0D477CC3F2C1 XBellFeedbackState;
typedef struct _25D6574E7038479B9CA0BC4071594788 XCreateWindowEvent;
typedef struct _1FC3FDECD71C050414C1CECD38620FB8 XDamageNotifyEvent;
typedef struct _618D74B62491482EAF0B43D47E77026B XDeviceButtonEvent;
typedef struct _BD550A7A04DEFA8C16DE6F55E7178AE2 XDeviceMotionEvent;
typedef struct _B676EA68DBBAD6DA98C0AF39E8F6E1CC XF86VidModeMonitor;
typedef struct _XSyncSystemCounter XSyncSystemCounter;
typedef struct _CE2CC21A8DF6496E4E3BA1994C658522 XSyncWaitCondition;
typedef struct _XawGripCallData XawGripCallDataRec;
typedef struct _XawTextPaintStruct XawTextPaintStruct;
typedef struct _XcursorChunkHeader XcursorChunkHeader;
typedef struct _E7564DB44F0EBD2E4F38C95410816DF7 XineramaScreenInfo;
typedef struct _XkbBellNotify XkbBellNotifyEvent;
typedef union _0E48C489052D3F6994034E9D4DCBE034 *XkbCFScanResultPtr;
typedef union _0E48C489052D3F6994034E9D4DCBE034 XkbCFScanResultRec;
typedef struct _XkbConfigFields *XkbConfigFieldsPtr;
typedef struct _XkbConfigFields XkbConfigFieldsRec;
typedef struct _XkbDeviceBtnAction XkbDeviceBtnAction;
typedef struct _XkbIndicatorMapRec *XkbIndicatorMapPtr;
typedef struct _XkbIndicatorMapRec XkbIndicatorMapRec;
typedef struct _XkbSymInterpretRec *XkbSymInterpretPtr;
typedef struct _XkbSymInterpretRec XkbSymInterpretRec;
typedef struct _C70BF6770A9AD12C6B9D1FF146C70C10 *XpuOrientationList;
typedef struct _A47C75AE74EA14FC2F54815F4A8813BA *XtGeometryHookData;
typedef struct _XtPerDisplayStruct XtPerDisplayStruct;
typedef struct _XtGrabExtRec *XtServerGrabExtPtr;
typedef struct _XtGrabExtRec XtServerGrabExtRec;
typedef struct _26A9D8D4FC2ED17163FA6119A25D6DBF XvVideoNotifyEvent;
typedef struct _1AA7F1335C4C6CFF07A82EACE5F12A97 _IceProcessMsgInfo;
struct _XkbComponentNames {char *keymap;char *keycodes;char *types;char *compat;char *symbols;char *geometry;};
typedef unsigned int __builtin_offsetof;
typedef int __kernel_clockid_t;
typedef unsigned short __kernel_ipc_pid_t;
typedef unsigned short __kernel_old_dev_t;
typedef unsigned short __kernel_old_gid_t;
typedef unsigned short __kernel_old_uid_t;
typedef int __kernel_ptrdiff_t;
typedef int __priority_which_t;
struct _xkmOverlayKeyDesc {char over[4];char under[4];};
enum bfd__bfd_direction {no_direction = 0x0,read_direction = 0x1,write_direction = 0x2,both_direction = 0x3,};
typedef struct bfd_arch_info bfd_arch_info_type;
enum bfd_link_hash_type {bfd_link_hash_new = 0x0,bfd_link_hash_undefined = 0x1,bfd_link_hash_undefweak = 0x2,bfd_link_hash_defined = 0x3,bfd_link_hash_defweak = 0x4,bfd_link_hash_common = 0x5,bfd_link_hash_indirect = 0x6,bfd_link_hash_warning = 0x7,};
typedef struct _BDC2BC4E1FC4E3665C531F87A904F1CB changeDeviceNotify;
enum floatformat_intbit {floatformat_intbit_yes = 0x0,floatformat_intbit_no = 0x1,};
typedef struct _44989FB912D962B2DEA21D74F6F43DAE fsConnClientPrefix;
typedef struct _8215DDD75066012239D919FF6D1C96FC fsSetCataloguesReq;
typedef struct _A545D31055C82AF5215FB86F909CA367 fsSetResolutionReq;
struct gmon_cg_arc_record {char from_pc[4];char self_pc[4];char count[4];};
typedef void (*htab_free_with_arg)(void *, void *);
typedef struct _3B80496DCDE561EAC81E803683D00588 iceAuthRequiredMsg;
typedef struct _5AD267705BD8B4B0926875A73B385ABE jas_cmclrspcconv_t;
typedef struct _6103EF8F75D1B3E3CA9BBD68F760DEDF jas_cmshapmatlut_t;
typedef struct jas_icctagtabent_s jas_icctagtabent_t;
typedef struct _27480D859758915FF7183925E59D9D13 jas_image_fmtops_t;
typedef  struct po_error_handler *po_error_handler_t;
typedef union _D1D0F511BF997F52624AFB2B0CE27B40 pthread_condattr_t;
typedef int pthread_spinlock_t;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smGetPropertiesMsg;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smSetPropertiesMsg;
struct user_fpregs_struct {int cwd;int swd;int twd;int fip;int fcs;int foo;int fos;int st_space[20];};
struct wireless_scan_head {wireless_scan *result;int retry;};
typedef struct _D293AA008B167A5482334DF4B9C04D8D xBellFeedbackState;
typedef struct _A043DEDA58AACB0ED59B54E1362CDED0 xBigReqEnableReply;
typedef struct _56236F995320E9550D01648098F1E75E xChangePropertyReq;
typedef struct _7CA3BFA0E2ACF16B623A64955922766D xCreateColormapReq;
typedef struct _9B8DBD56B2ADF437D63C1746D87B8C1A xDMXAddScreenReply;
typedef struct _E286A6BB4A6F2654A491CFFF4E402FC9 xDMXRemoveInputReq;
typedef struct _ABE60368F0168DDE4E32B527D5287C6B xDPMSForceLevelReq;
typedef struct _02B7C110B96F422043FD747664A5A945 xDPMSGetVersionReq;
typedef struct _06385DA08CE18FAF207AB6F3372C4AC2 xDamageNotifyEvent;
typedef struct _83DC73F186BDA0868BCE8C2AD62B1A32 xDamageSubtractReq;
typedef struct _DF21E726BD65398407620C5BBBA9E08C xDeletePropertyReq;
typedef struct GLXCopyContext xGLXCopyContextReq;
typedef struct _546FDEDFB3946C28A5792DCE2825D685 xGLXGetMinmaxReply;
typedef struct GLXMakeCurrent xGLXMakeCurrentReq;
typedef struct GLXRenderLarge xGLXRenderLargeReq;
typedef struct GLXSwapBuffers xGLXSwapBuffersReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xGetDeviceFocusReq;
typedef struct _LbxAllowMotion xLbxAllowMotionReq;
typedef struct _LbxCloseClient xLbxCloseClientReq;
typedef struct _LbxFreeCellsEvent xLbxFreeCellsEvent;
typedef struct _LbxGetProperty xLbxGetPropertyReq;
typedef struct _LbxInternAtoms xLbxInternAtomsReq;
typedef struct _5588D47BF677798F0DBD9E168C93317B xLbxQueryFontReply;
typedef struct _50E42323027751282F1104957020037E xLbxReleaseCmapReq;
typedef struct _PrintStartPage xPrintStartPageReq;
typedef struct _32453B3EC12C1083BBBEA47A258ADABA xQueryExtensionReq;
typedef struct _616DFE8EE921B679729534094133FEFF xQueryPointerReply;
typedef struct _1B380CA5B169C2B25F5DE0AF08CB7E59 xRRQueryVersionReq;
typedef struct _8ED1EDE36117F631290006C3E9446427 xRenderAddTrapsReq;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTriStripReq;
typedef struct _FF2B271BD07173775CE163A4BE842405 xReparentWindowReq;
typedef struct _F1FFDF0E76C6F940FFACBA8A13B33CEB xSetDeviceFocusReq;
typedef struct _A27B2EF13B029B6AC017266492BED372 xSetScreenSaverReq;
typedef struct _7D569909FEB0E294999F498DE699AF74 xStringFeedbackCtl;
typedef struct _xSyncInitialize xSyncInitializeReq;
typedef struct _xSyncQueryAlarmReq xSyncQueryAlarmReq;
typedef struct _xSyncSetCounterReq xSyncSetCounterReq;
typedef struct _F4F17E25C7BB477B61B5A580F872EC7D xSyncSystemCounter;
typedef struct _xSyncWaitCondition xSyncWaitCondition;
typedef struct _XDGAQueryModes xXDGAQueryModesReq;
typedef struct _E77CCBE5D8B1F0833042AA57AE35DB28 xXTestFakeInputReq;
typedef struct _C6945E03756C0EFF0E3D4BF179417A01 xXTrapGetVersReply;
typedef struct _XagCreateAssoc xXagCreateAssocReq;
typedef xcb_request_error_t xcb_access_error_t;
struct xcb_arc_iterator_t {xcb_arc_t *data;int rem;int index;};
enum xcb_button_index_t {XCB_BUTTON_INDEX_ANY = 0x0,XCB_BUTTON_INDEX_1 = 0x1,XCB_BUTTON_INDEX_2 = 0x2,XCB_BUTTON_INDEX_3 = 0x3,XCB_BUTTON_INDEX_4 = 0x4,XCB_BUTTON_INDEX_5 = 0x5,};
typedef xcb_value_error_t xcb_cursor_error_t;
enum xcb_image_format_t {XCB_IMAGE_FORMAT_XY_BITMAP = 0x0,XCB_IMAGE_FORMAT_XY_PIXMAP = 0x1,XCB_IMAGE_FORMAT_Z_PIXMAP = 0x2,};
typedef xcb_request_error_t xcb_length_error_t;
typedef xcb_value_error_t xcb_pixmap_error_t;
struct xcb_rgb_iterator_t {xcb_rgb_t *data;int rem;int index;};
enum xcb_screen_saver_t {XCB_SCREEN_SAVER_RESET = 0x0,XCB_SCREEN_SAVER_ACTIVE = 0x1,};
struct xcb_str_iterator_t {xcb_str_t *data;int rem;int index;};
enum xcb_visual_class_t {XCB_VISUAL_CLASS_STATIC_GRAY = 0x0,XCB_VISUAL_CLASS_GRAY_SCALE = 0x1,XCB_VISUAL_CLASS_STATIC_COLOR = 0x2,XCB_VISUAL_CLASS_PSEUDO_COLOR = 0x3,XCB_VISUAL_CLASS_TRUE_COLOR = 0x4,XCB_VISUAL_CLASS_DIRECT_COLOR = 0x5,};
enum xcb_window_class_t {XCB_WINDOW_CLASS_COPY_FROM_PARENT = 0x0,XCB_WINDOW_CLASS_INPUT_OUTPUT = 0x1,XCB_WINDOW_CLASS_INPUT_ONLY = 0x2,};
typedef xcb_value_error_t xcb_window_error_t;
enum xcb_x_print_attr_t {XCB_X_PRINT_ATTR_JOB_ATTR = 0x1,XCB_X_PRINT_ATTR_DOC_ATTR = 0x2,XCB_X_PRINT_ATTR_PAGE_ATTR = 0x3,XCB_X_PRINT_ATTR_PRINTER_ATTR = 0x4,XCB_X_PRINT_ATTR_SERVER_ATTR = 0x5,XCB_X_PRINT_ATTR_MEDIUM_ATTR = 0x6,XCB_X_PRINT_ATTR_SPOOLER_ATTR = 0x7,};
typedef struct _xkbCompatMapNotify xkbCompatMapNotify;
typedef struct _xkbGetCompatMap xkbGetCompatMapReq;
typedef struct _xkbGetKbdByName xkbGetKbdByNameReq;
typedef struct _xkbIndicatorNotify xkbIndicatorNotify;
typedef struct _xkbKeyTypeWireDesc xkbKeyTypeWireDesc;
typedef struct _xkbOutlineWireDesc xkbOutlineWireDesc;
typedef struct _xkbOverlayWireDesc xkbOverlayWireDesc;
typedef struct _xkbSectionWireDesc xkbSectionWireDesc;
typedef struct _xkbSelectEvents xkbSelectEventsReq;
typedef struct _xkbSetCompatMap xkbSetCompatMapReq;
typedef struct _xkbUseExtension xkbUseExtensionReq;
typedef struct _xkbVModMapWireDesc xkbVModMapWireDesc;
typedef struct _xkmShapeDoodadDesc xkmShapeDoodadDesc;
typedef struct _DC1F4185A69167B259A83E436A7DD097 xvQueryAdaptorsReq;
typedef struct _2E55BACA418C7D9DC01173D7FC9AB491 xvQueryBestSizeReq;
typedef struct _44921DDD4632BD4A3848A6F76E5AB5A7 xvmcGetDRInfoReply;
typedef struct _AsciiSinkClassRec AsciiSinkClassRec;
typedef struct _AsciiSrcClassPart AsciiSrcClassPart;
typedef struct _AsciiTextClassRec AsciiTextClassRec;
enum BDF_PropertyType_ {BDF_PROPERTY_TYPE_NONE = 0x0,BDF_PROPERTY_TYPE_ATOM = 0x1,BDF_PROPERTY_TYPE_INTEGER = 0x2,BDF_PROPERTY_TYPE_CARDINAL = 0x3,};
typedef struct _BitmapInstance *BitmapInstancePtr;
typedef struct _BitmapInstance BitmapInstanceRec;
typedef struct _CompositeClassRec CompositeClassRec;
typedef struct _DialogConstraintsRec *DialogConstraints;
typedef struct _DialogClassRec *DialogWidgetClass;
typedef struct _FSXFontInfoHeader FSXFontInfoHeader;
typedef struct FT_BitmapGlyphRec_ FT_BitmapGlyphRec;
typedef void (*FT_DebugHook_Func)(void *arg);
typedef struct FT_Renderer_Class_ FT_Renderer_Class;
typedef struct _FontAliasEntry *FontAliasEntryPtr;
typedef struct _FontAliasEntry FontAliasEntryRec;
typedef struct _BC246FD96289B80B779C80FD0A76F445 FontCacheSettings;
typedef struct _FontMapReverse *FontMapReversePtr;
typedef struct _FontMapReverse FontMapReverseRec;
typedef struct _FontResolution *FontResolutionPtr;
typedef struct _FontResolution FontResolutionRec;
typedef struct GLFBDevContextRec *GLFBDevContextPtr;
typedef struct _8A36C2984BCF3F09374227AC2CA3601E GLXPipeRectLimits;
typedef struct LIBMTP_playlist_struct LIBMTP_playlist_t;
typedef struct _LayoutClassRec *LayoutWidgetClass;
enum MACRO_ACCESSPERMS {ACCESSPERMS = 511,};
enum MACRO_ALL_RESULTS {ALL_RESULTS = 8,};
enum MACRO_AuthSuccess {AuthSuccess = 0,AuthContinue = 1,AuthBusy = 2,};
enum MACRO_BUFFILESIZE {BUFFILESIZE = 8192,};
enum MACRO_BadDrawable {BadDrawable = 9,};
enum MACRO_BadFontName {BadFontName = 83,};
enum MACRO_BadFontPath {BadFontPath = 86,};
enum MACRO_BadGlyphSet {BadGlyphSet = 3,BadGlyph = 4,};
enum MACRO_BadIDChoice {BadIDChoice = 14,};
enum MACRO_CLGET_RETRY {CLGET_RETRY_TIMEOUT = 5,};
enum MACRO_COPY_VERIFY {COPY_VERIFY = 0x3A,};
enum MACRO_CTL_MAXNAME {CTL_MAXNAME = 10,};
enum MACRO_CurrentTime {CurrentTime = 0,};
enum MACRO_CursorShape {CursorShape = 0,TileShape = 1,StippleShape = 2,};
enum MACRO_DEFFILEMODE {DEFFILEMODE = 438,};
enum MACRO_DEVICE_BITS {DEVICE_BITS = 0x7F,};
enum MACRO_DPMSModeOff {DPMSModeOff = 3,};
enum MACRO_DirectColor {DirectColor = 5,};
enum MACRO_DmxBadReply {DmxBadReply = 1003,};
enum MACRO_DmxBadValue {DmxBadValue = 1002,};
enum MACRO_ELFCLASSNUM {ELFCLASSNUM = 3,};
enum MACRO_ELFDATANONE {ELFDATANONE = 0,ELFDATA2LSB = 1,ELFDATA2MSB = 2,};
enum MACRO_ELF_PRARGSZ {ELF_PRARGSZ = 80,};
enum MACRO_ENHANCEMENT {ENHANCEMENT_SPECIFY_MASK = 0x40,};
enum MACRO_ERROR_TABLE {ERROR_TABLE_BASE_ss = 748800,};
enum MACRO_EastGravity {EastGravity = 6,};
enum MACRO_EnterNotify {EnterNotify = 7,LeaveNotify = 8,};
enum MACRO_EvenOddRule {EvenOddRule = 0,WindingRule = 1,};
enum MACRO_ExposeEvent {lbxsz_ExposeEvent = 20,lbxupsz_ExposeEvent = 18,};
enum MACRO_FLOATFORMAT {FLOATFORMAT_H = 1,__FMTMSG_H = 1,};
enum MACRO_FORMAT_UNIT {FORMAT_UNIT = 0x4,};
enum MACRO_FSBadLength {FSBadLength = 10,};
enum MACRO_FSLASTEvent {FSLASTEvent = 3,};
enum MACRO_FS_PROTOCOL {FS_PROTOCOL = 2,FS_PROTOCOL_MINOR = 0,};
enum MACRO_FT_VALIDATE {FT_VALIDATE_feat_INDEX = 0,FT_VALIDATE_mort_INDEX = 1,FT_VALIDATE_morx_INDEX = 2,FT_VALIDATE_bsln_INDEX = 3,FT_VALIDATE_just_INDEX = 4,FT_VALIDATE_kern_INDEX = 5,FT_VALIDATE_opbd_INDEX = 6,FT_VALIDATE_trak_INDEX = 7,FT_VALIDATE_prop_INDEX = 8,FT_VALIDATE_lcar_INDEX = 9,FT_VALIDATE_GX_LAST_INDEX = 9,FT_VALIDATE_GX_LENGTH = 10,FT_VALIDATE_GX_START = 16384,FT_VALIDATE_feat = 16384,FT_VALIDATE_mort = 32768,FT_VALIDATE_morx = 65536,FT_VALIDATE_bsln = 131072,FT_VALIDATE_just = 262144,FT_VALIDATE_kern = 524288,FT_VALIDATE_opbd = 1048576,FT_VALIDATE_trak = 2097152,FT_VALIDATE_prop = 4194304,FT_VALIDATE_lcar = 8388608,FT_VALIDATE_GX = 16760832,FT_VALIDATE_MS = 16384,FT_VALIDATE_APPLE = 32768,FT_VALIDATE_CKERN = 49152,FT_PARAM_TAG_INCREMENTAL = 1768842098,FT_LCD_FILTER_NONE = 0,FT_LCD_FILTER_DEFAULT = 1,};
enum MACRO_FamilyLocal {FamilyLocal = 256,};
enum MACRO_FontFileEOF {FontFileEOF = -1,};
enum MACRO_FontLoadAll {FontLoadAll = 0xF,FontOpenSync = 0x10,FontReopen = 0x20,};
enum MACRO_GXorReverse {GXorReverse = 0xB,};
enum MACRO_GrabSuccess {GrabSuccess = 0,AlreadyGrabbed = 1,GrabInvalidTime = 2,};
enum MACRO_IFHWADDRLEN {IFHWADDRLEN = 6,};
enum MACRO_IWEVEXPIRED {IWEVEXPIRED = 0x8C04,};
enum MACRO_IceBadMajor {IceBadMajor = 0,IceNoAuth = 1,IceNoVersion = 2,};
enum MACRO_IceBadState {IceBadState = 0x8001,};
enum MACRO_IceBadValue {IceBadValue = 0x8003,};
enum MACRO_IceLSBfirst {IceLSBfirst = 0,IceMSBfirst = 1,};
enum MACRO_IconicState {IconicState = 3,};
enum MACRO_InProximity {InProximity = 0,OutOfProximity = 2,};
enum MACRO_InputOutput {InputOutput = 1,InputOnly = 2,};
enum MACRO_KDSIGACCEPT {KDSIGACCEPT = 0x4B4E,};
enum MACRO_KDUNMAPDISP {KDUNMAPDISP = 0x4B3D,};
enum MACRO_KeymapEvent {lbxsz_KeymapEvent = 32,lbxupsz_KeymapEvent = 32,};
enum MACRO_LeftToRight {LeftToRight = 0,RightToLeft = 1,BottomToTop = 2,};
enum MACRO_MAXSYMLINKS {MAXSYMLINKS = 20,};
enum MACRO_MAX_MACHINE {MAX_MACHINE_NAME = 255,};
enum MACRO_MINSIGSTKSZ {MINSIGSTKSZ = 2048,SIGSTKSZ = 8192,};
enum MACRO_MODE_SELECT {MODE_SELECT = 0x15,};
enum MACRO_MOTION_MASK {XTestX_MOTION_MASK = 0xF,XTestY_MOTION_MASK = 0xF0,};
enum MACRO_MSG_NOERROR {MSG_NOERROR = 0x1000,MSG_STAT = 0xB,MSG_INFO = 0xC,};
enum MACRO_MULTIBUFFER {MULTIBUFFER_MAJOR_VERSION = 1,MULTIBUFFER_MINOR_VERSION = 1,};
enum MACRO_NCURSES_ETI {NCURSES_ETI_H_incl = 1,};
enum MACRO_NO_AUTHINFO {NO_AUTHINFO = 131072,};
enum MACRO_NO_RECOVERY {NO_RECOVERY = 3,NO_DATA = 4,NO_ADDRESS = 4,};
enum MACRO_NoEventMask {NoEventMask = 0,KeyPressMask = 1,KeyReleaseMask = 2,ButtonPressMask = 4,ButtonReleaseMask = 8,EnterWindowMask = 16,LeaveWindowMask = 32,PointerMotionMask = 64,PointerMotionHintMask = 128,Button1MotionMask = 256,Button2MotionMask = 512,Button3MotionMask = 1024,Button4MotionMask = 2048,Button5MotionMask = 4096,ButtonMotionMask = 8192,KeymapStateMask = 16384,ExposureMask = 32768,VisibilityChangeMask = 65536,StructureNotifyMask = 131072,ResizeRedirectMask = 262144,SubstructureNotifyMask = 524288,SubstructureRedirectMask = 1048576,FocusChangeMask = 2097152,PropertyChangeMask = 4194304,ColormapChangeMask = 8388608,OwnerGrabButtonMask = 16777216,};
enum MACRO_POSIX_SPAWN {POSIX_SPAWN_RESETIDS = 0x1,POSIX_SPAWN_SETPGROUP = 0x2,POSIX_SPAWN_SETSIGDEF = 0x4,POSIX_SPAWN_SETSIGMASK = 0x8,POSIX_SPAWN_SETSCHEDPARAM = 0x10,POSIX_SPAWN_SETSCHEDULER = 0x20,};
enum MACRO_PTSPERBATCH {PTSPERBATCH = 1024,};
enum MACRO_PictOpClear {PictOpClear = 0,PictOpSrc = 1,PictOpDst = 2,};
enum MACRO_PointerRoot {PointerRoot = 1,};
enum MACRO_PseudoColor {PseudoColor = 3,TrueColor = 4,};
enum MACRO_READ_DEFECT {READ_DEFECT_DATA = 0x37,};
enum MACRO_RESERVATION {RESERVATION_CONFLICT = 0xC,};
enum MACRO_RPC_ANYSOCK {RPC_ANYSOCK = -1,};
enum MACRO_RaiseLowest {RaiseLowest = 0,LowerHighest = 1,};
enum MACRO_SEARCH_HIGH {SEARCH_HIGH_12 = 0xB0,SEARCH_EQUAL_12 = 0xB1,SEARCH_LOW_12 = 0xB2,};
enum MACRO_SEQ_BALANCE {SEQ_BALANCE = 11,SEQ_VOLMODE = 12,};
enum MACRO_SIOCADDDLCI {SIOCADDDLCI = 0x8980,};
enum MACRO_SIOCDELDLCI {SIOCDELDLCI = 0x8981,};
enum MACRO_SIOCDIFADDR {SIOCDIFADDR = 0x8936,};
enum MACRO_SIOCGIFADDR {SIOCGIFADDR = 0x8915,};
enum MACRO_SIOCGIFCONF {SIOCGIFCONF = 0x8912,};
enum MACRO_SIOCGIFNAME {SIOCGIFNAME = 0x8910,};
enum MACRO_SIOCGIWAUTH {SIOCGIWAUTH = 0x8B33,};
enum MACRO_SIOCGIWFRAG {SIOCGIWFRAG = 0x8B25,};
enum MACRO_SIOCGIWFREQ {SIOCGIWFREQ = 0x8B05,};
enum MACRO_SIOCGIWMODE {SIOCGIWMODE = 0x8B07,};
enum MACRO_SIOCGIWNAME {SIOCGIWNAME = 0x8B01,};
enum MACRO_SIOCGIWNWID {SIOCGIWNWID = 0x8B03,};
enum MACRO_SIOCGIWPRIV {SIOCGIWPRIV = 0x8B0D,};
enum MACRO_SIOCGIWRATE {SIOCGIWRATE = 0x8B21,};
enum MACRO_SIOCGIWSCAN {SIOCGIWSCAN = 0x8B19,};
enum MACRO_SIOCGIWSENS {SIOCGIWSENS = 0x8B09,};
enum MACRO_SIOCIWFIRST {SIOCIWFIRST = 0x8B00,};
enum MACRO_SIOCNRRTCTL {SIOCNRRTCTL = 35299,};
enum MACRO_SIOCRSCLRRT {SIOCRSCLRRT = 35300,};
enum MACRO_SIOCSIFADDR {SIOCSIFADDR = 0x8916,};
enum MACRO_SIOCSIFLINK {SIOCSIFLINK = 0x8911,};
enum MACRO_SIOCSIFNAME {SIOCSIFNAME = 0x8923,};
enum MACRO_SIOCSIWAUTH {SIOCSIWAUTH = 0x8B32,};
enum MACRO_SIOCSIWFRAG {SIOCSIWFRAG = 0x8B24,};
enum MACRO_SIOCSIWFREQ {SIOCSIWFREQ = 0x8B04,};
enum MACRO_SIOCSIWMLME {SIOCSIWMLME = 0x8B16,};
enum MACRO_SIOCSIWMODE {SIOCSIWMODE = 0x8B06,};
enum MACRO_SIOCSIWNWID {SIOCSIWNWID = 0x8B02,};
enum MACRO_SIOCSIWPRIV {SIOCSIWPRIV = 0x8B0C,};
enum MACRO_SIOCSIWRATE {SIOCSIWRATE = 0x8B20,};
enum MACRO_SIOCSIWSCAN {SIOCSIWSCAN = 0x8B18,};
enum MACRO_SIOCSIWSENS {SIOCSIWSENS = 0x8B08,};
enum MACRO_SIOGIFINDEX {SIOGIFINDEX = 35123,};
enum MACRO_SNDCTL_COPR {SNDCTL_COPR_RESET = 17152,};
enum MACRO_SOUND_MIXER {SOUND_MIXER_NRDEVICES = 25,SOUND_MIXER_VOLUME = 0,SOUND_MIXER_BASS = 1,SOUND_MIXER_TREBLE = 2,SOUND_MIXER_SYNTH = 3,SOUND_MIXER_PCM = 4,SOUND_MIXER_SPEAKER = 5,SOUND_MIXER_LINE = 6,SOUND_MIXER_MIC = 7,SOUND_MIXER_CD = 8,SOUND_MIXER_IMIX = 9,SOUND_MIXER_ALTPCM = 10,SOUND_MIXER_RECLEV = 11,SOUND_MIXER_IGAIN = 12,SOUND_MIXER_OGAIN = 13,SOUND_MIXER_LINE1 = 14,SOUND_MIXER_LINE2 = 15,SOUND_MIXER_LINE3 = 16,SOUND_MIXER_DIGITAL1 = 17,SOUND_MIXER_DIGITAL2 = 18,SOUND_MIXER_DIGITAL3 = 19,SOUND_MIXER_PHONEIN = 20,SOUND_MIXER_PHONEOUT = 21,SOUND_MIXER_VIDEO = 22,SOUND_MIXER_RADIO = 23,SOUND_MIXER_MONITOR = 24,SOUND_ONOFF_MIN = 28,SOUND_ONOFF_MAX = 30,SOUND_MIXER_NONE = 31,SOUND_MIXER_ENHANCE = 31,SOUND_MIXER_MUTE = 31,SOUND_MIXER_LOUD = 31,SOUND_MIXER_RECSRC = 255,SOUND_MIXER_DEVMASK = 254,SOUND_MIXER_RECMASK = 253,SOUND_MIXER_CAPS = 252,SOUND_CAP_EXCL_INPUT = 1,SOUND_MIXER_STEREODEVS = 251,SOUND_MIXER_OUTSRC = 250,SOUND_MIXER_OUTMASK = 249,SOUND_MASK_VOLUME = 1,SOUND_MASK_BASS = 2,SOUND_MASK_TREBLE = 4,SOUND_MASK_SYNTH = 8,SOUND_MASK_PCM = 16,SOUND_MASK_SPEAKER = 32,SOUND_MASK_LINE = 64,SOUND_MASK_MIC = 128,SOUND_MASK_CD = 256,SOUND_MASK_IMIX = 512,SOUND_MASK_ALTPCM = 1024,SOUND_MASK_RECLEV = 2048,SOUND_MASK_IGAIN = 4096,SOUND_MASK_OGAIN = 8192,SOUND_MASK_LINE1 = 16384,SOUND_MASK_LINE2 = 32768,SOUND_MASK_LINE3 = 65536,SOUND_MASK_DIGITAL1 = 131072,SOUND_MASK_DIGITAL2 = 262144,SOUND_MASK_DIGITAL3 = 524288,SOUND_MASK_PHONEIN = 1048576,SOUND_MASK_PHONEOUT = 2097152,SOUND_MASK_RADIO = 8388608,SOUND_MASK_VIDEO = 4194304,SOUND_MASK_MONITOR = 16777216,SOUND_MASK_MUTE = 2147483648,SOUND_MASK_ENHANCE = 2147483648,SOUND_MASK_LOUD = 2147483648,};
enum MACRO_SUBCMDSHIFT {SUBCMDSHIFT = 8,};
enum MACRO_ShapeNotify {ShapeNotify = 0,ShapeNumberEvents = 1,};
enum MACRO_TCPOPT_SACK {TCPOPT_SACK = 5,TCPOPT_TIMESTAMP = 8,};
enum MACRO_TIOCGICOUNT {TIOCGICOUNT = 0x545D,};
enum MACRO_TIOCGSERIAL {TIOCGSERIAL = 0x541E,};
enum MACRO_TIOCSSERIAL {TIOCSSERIAL = 0x541F,};
enum MACRO_TopToBottom {TopToBottom = 3,};
enum MACRO_UnmapNotify {UnmapNotify = 18,};
enum MACRO_XF86BIGFONT {XF86BIGFONT_MAJOR_VERSION = 1,XF86BIGFONT_MINOR_VERSION = 1,};
enum MACRO_XF86Bigfont {XF86Bigfont_CAP_LocalShm = 1,};
enum MACRO_XF86VIDMODE {XF86VIDMODE_MAJOR_VERSION = 2,XF86VIDMODE_MINOR_VERSION = 2,};
enum MACRO_XLookupNone {XLookupNone = 1,XLookupChars = 2,};
enum MACRO_XPDocNormal {XPDocNormal = 1,XPDocRaw = 2,};
enum MACRO_XPTransAttr {XPTransAttr = 9,};
enum MACRO_XTestACTION {XTestACTION_TYPE_MASK = 0x3,XTestKEY_STATE_MASK = 0x4,XTestX_SIGN_BIT_MASK = 0x4,XTestY_SIGN_BIT_MASK = 0x8,XTestDEVICE_ID_MASK = 0xF0,};
enum MACRO_XTestMOTION {XTestMOTION_MAX = 15,XTestMOTION_MIN = -15,};
enum MACRO_XTestPACKED {XTestPACKED_ACTIONS = 2,XTestPACKED_MOTION = 4,};
enum MACRO_XTestSTROKE {XTestSTROKE_DELAY_TIME = 10,};
enum MACRO_X_GLXRender {X_GLXRender = 1,X_GLXRenderLarge = 2,X_GLXCreateContext = 3,X_GLXDestroyContext = 4,X_GLXMakeCurrent = 5,X_GLXIsDirect = 6,X_GLXQueryVersion = 7,X_GLXWaitGL = 8,X_GLXWaitX = 9,X_GLXCopyContext = 10,X_GLXSwapBuffers = 11,X_GLXUseXFont = 12,X_GLXCreateGLXPixmap = 13,X_GLXGetVisualConfigs = 14,X_GLXDestroyGLXPixmap = 15,X_GLXVendorPrivate = 16,X_GLXVendorPrivateWithReply = 17,X_GLXQueryExtensionsString = 18,X_GLXQueryServerString = 19,X_GLXClientInfo = 20,X_GLXGetFBConfigs = 21,X_GLXCreatePixmap = 22,X_GLXDestroyPixmap = 23,X_GLXCreateNewContext = 24,X_GLXQueryContext = 25,X_GLXMakeContextCurrent = 26,X_GLXCreatePbuffer = 27,X_GLXDestroyPbuffer = 28,X_GLXGetDrawableAttributes = 29,X_GLXChangeDrawableAttributes = 30,X_GLXCreateWindow = 31,X_GLXDestroyWindow = 32,X_GLsop_NewList = 101,X_GLsop_EndList = 102,X_GLsop_DeleteLists = 103,X_GLsop_GenLists = 104,X_GLsop_FeedbackBuffer = 105,X_GLsop_SelectBuffer = 106,X_GLsop_RenderMode = 107,X_GLsop_Finish = 108,X_GLsop_Flush = 142,X_GLsop_PixelStoref = 109,X_GLsop_PixelStorei = 110,X_GLsop_ReadPixels = 111,X_GLsop_GetBooleanv = 112,X_GLsop_GetClipPlane = 113,X_GLsop_GetDoublev = 114,X_GLsop_GetError = 115,X_GLsop_GetFloatv = 116,X_GLsop_GetIntegerv = 117,X_GLsop_GetLightfv = 118,X_GLsop_GetLightiv = 119,X_GLsop_GetMapdv = 120,X_GLsop_GetMapfv = 121,X_GLsop_GetMapiv = 122,X_GLsop_GetMaterialfv = 123,X_GLsop_GetMaterialiv = 124,X_GLsop_GetPixelMapfv = 125,X_GLsop_GetPixelMapuiv = 126,X_GLsop_GetPixelMapusv = 127,X_GLsop_GetPolygonStipple = 128,X_GLsop_GetString = 129,X_GLsop_GetTexEnvfv = 130,X_GLsop_GetTexEnviv = 131,X_GLsop_GetTexGendv = 132,X_GLsop_GetTexGenfv = 133,X_GLsop_GetTexGeniv = 134,X_GLsop_GetTexImage = 135,X_GLsop_GetTexParameterfv = 136,X_GLsop_GetTexParameteriv = 137,X_GLsop_GetTexLevelParameterfv = 138,X_GLsop_GetTexLevelParameteriv = 139,X_GLsop_IsEnabled = 140,X_GLsop_IsList = 141,X_GLsop_AreTexturesResident = 143,X_GLsop_DeleteTextures = 144,X_GLsop_GenTextures = 145,X_GLsop_IsTexture = 146,X_GLsop_GetColorTable = 147,X_GLsop_GetColorTableParameterfv = 148,X_GLsop_GetColorTableParameteriv = 149,X_GLsop_GetConvolutionFilter = 150,X_GLsop_GetConvolutionParameterfv = 151,X_GLsop_GetConvolutionParameteriv = 152,X_GLsop_GetSeparableFilter = 153,X_GLsop_GetHistogram = 154,X_GLsop_GetHistogramParameterfv = 155,X_GLsop_GetHistogramParameteriv = 156,X_GLsop_GetMinmax = 157,X_GLsop_GetMinmaxParameterfv = 158,X_GLsop_GetMinmaxParameteriv = 159,X_GLsop_GetCompressedTexImage = 160,X_GLrop_CallList = 1,X_GLrop_CallLists = 2,X_GLrop_ListBase = 3,X_GLrop_Begin = 4,X_GLrop_Bitmap = 5,X_GLrop_Color3bv = 6,X_GLrop_Color3dv = 7,X_GLrop_Color3fv = 8,X_GLrop_Color3iv = 9,X_GLrop_Color3sv = 10,X_GLrop_Color3ubv = 11,X_GLrop_Color3uiv = 12,X_GLrop_Color3usv = 13,X_GLrop_Color4bv = 14,X_GLrop_Color4dv = 15,X_GLrop_Color4fv = 16,X_GLrop_Color4iv = 17,X_GLrop_Color4sv = 18,X_GLrop_Color4ubv = 19,X_GLrop_Color4uiv = 20,X_GLrop_Color4usv = 21,X_GLrop_EdgeFlagv = 22,X_GLrop_End = 23,X_GLrop_Indexdv = 24,X_GLrop_Indexfv = 25,X_GLrop_Indexiv = 26,X_GLrop_Indexsv = 27,X_GLrop_Normal3bv = 28,X_GLrop_Normal3dv = 29,X_GLrop_Normal3fv = 30,X_GLrop_Normal3iv = 31,X_GLrop_Normal3sv = 32,X_GLrop_RasterPos2dv = 33,X_GLrop_RasterPos2fv = 34,X_GLrop_RasterPos2iv = 35,X_GLrop_RasterPos2sv = 36,X_GLrop_RasterPos3dv = 37,X_GLrop_RasterPos3fv = 38,X_GLrop_RasterPos3iv = 39,X_GLrop_RasterPos3sv = 40,X_GLrop_RasterPos4dv = 41,X_GLrop_RasterPos4fv = 42,X_GLrop_RasterPos4iv = 43,X_GLrop_RasterPos4sv = 44,X_GLrop_Rectdv = 45,X_GLrop_Rectfv = 46,X_GLrop_Rectiv = 47,X_GLrop_Rectsv = 48,X_GLrop_TexCoord1dv = 49,X_GLrop_TexCoord1fv = 50,X_GLrop_TexCoord1iv = 51,X_GLrop_TexCoord1sv = 52,X_GLrop_TexCoord2dv = 53,X_GLrop_TexCoord2fv = 54,X_GLrop_TexCoord2iv = 55,X_GLrop_TexCoord2sv = 56,X_GLrop_TexCoord3dv = 57,X_GLrop_TexCoord3fv = 58,X_GLrop_TexCoord3iv = 59,X_GLrop_TexCoord3sv = 60,X_GLrop_TexCoord4dv = 61,X_GLrop_TexCoord4fv = 62,X_GLrop_TexCoord4iv = 63,X_GLrop_TexCoord4sv = 64,X_GLrop_Vertex2dv = 65,X_GLrop_Vertex2fv = 66,X_GLrop_Vertex2iv = 67,X_GLrop_Vertex2sv = 68,X_GLrop_Vertex3dv = 69,X_GLrop_Vertex3fv = 70,X_GLrop_Vertex3iv = 71,X_GLrop_Vertex3sv = 72,X_GLrop_Vertex4dv = 73,X_GLrop_Vertex4fv = 74,X_GLrop_Vertex4iv = 75,X_GLrop_Vertex4sv = 76,X_GLrop_ClipPlane = 77,X_GLrop_ColorMaterial = 78,X_GLrop_CullFace = 79,X_GLrop_Fogf = 80,X_GLrop_Fogfv = 81,X_GLrop_Fogi = 82,X_GLrop_Fogiv = 83,X_GLrop_FrontFace = 84,X_GLrop_Hint = 85,X_GLrop_Lightf = 86,X_GLrop_Lightfv = 87,X_GLrop_Lighti = 88,X_GLrop_Lightiv = 89,X_GLrop_LightModelf = 90,X_GLrop_LightModelfv = 91,X_GLrop_LightModeli = 92,X_GLrop_LightModeliv = 93,X_GLrop_LineStipple = 94,X_GLrop_LineWidth = 95,X_GLrop_Materialf = 96,X_GLrop_Materialfv = 97,X_GLrop_Materiali = 98,X_GLrop_Materialiv = 99,X_GLrop_PointSize = 100,X_GLrop_PolygonMode = 101,X_GLrop_PolygonStipple = 102,X_GLrop_Scissor = 103,X_GLrop_ShadeModel = 104,X_GLrop_TexParameterf = 105,X_GLrop_TexParameterfv = 106,X_GLrop_TexParameteri = 107,X_GLrop_TexParameteriv = 108,X_GLrop_TexImage1D = 109,X_GLrop_TexImage2D = 110,X_GLrop_TexEnvf = 111,X_GLrop_TexEnvfv = 112,X_GLrop_TexEnvi = 113,X_GLrop_TexEnviv = 114,X_GLrop_TexGend = 115,X_GLrop_TexGendv = 116,X_GLrop_TexGenf = 117,X_GLrop_TexGenfv = 118,X_GLrop_TexGeni = 119,X_GLrop_TexGeniv = 120,X_GLrop_InitNames = 121,X_GLrop_LoadName = 122,X_GLrop_PassThrough = 123,X_GLrop_PopName = 124,X_GLrop_PushName = 125,X_GLrop_DrawBuffer = 126,X_GLrop_Clear = 127,X_GLrop_ClearAccum = 128,X_GLrop_ClearIndex = 129,X_GLrop_ClearColor = 130,X_GLrop_ClearStencil = 131,X_GLrop_ClearDepth = 132,X_GLrop_StencilMask = 133,X_GLrop_ColorMask = 134,X_GLrop_DepthMask = 135,X_GLrop_IndexMask = 136,X_GLrop_Accum = 137,X_GLrop_Disable = 138,X_GLrop_Enable = 139,X_GLrop_PopAttrib = 141,X_GLrop_PushAttrib = 142,X_GLrop_Map1d = 143,X_GLrop_Map1f = 144,X_GLrop_Map2d = 145,X_GLrop_Map2f = 146,X_GLrop_MapGrid1d = 147,X_GLrop_MapGrid1f = 148,X_GLrop_MapGrid2d = 149,X_GLrop_MapGrid2f = 150,X_GLrop_EvalCoord1dv = 151,X_GLrop_EvalCoord1fv = 152,X_GLrop_EvalCoord2dv = 153,X_GLrop_EvalCoord2fv = 154,X_GLrop_EvalMesh1 = 155,X_GLrop_EvalPoint1 = 156,X_GLrop_EvalMesh2 = 157,X_GLrop_EvalPoint2 = 158,X_GLrop_AlphaFunc = 159,X_GLrop_BlendFunc = 160,X_GLrop_LogicOp = 161,X_GLrop_StencilFunc = 162,X_GLrop_StencilOp = 163,X_GLrop_DepthFunc = 164,X_GLrop_PixelZoom = 165,X_GLrop_PixelTransferf = 166,X_GLrop_PixelTransferi = 167,X_GLrop_PixelMapfv = 168,X_GLrop_PixelMapuiv = 169,X_GLrop_PixelMapusv = 170,X_GLrop_ReadBuffer = 171,X_GLrop_CopyPixels = 172,X_GLrop_DrawPixels = 173,X_GLrop_DepthRange = 174,X_GLrop_Frustum = 175,X_GLrop_LoadIdentity = 176,X_GLrop_LoadMatrixf = 177,X_GLrop_LoadMatrixd = 178,X_GLrop_MatrixMode = 179,X_GLrop_MultMatrixf = 180,X_GLrop_MultMatrixd = 181,X_GLrop_Ortho = 182,X_GLrop_PopMatrix = 183,X_GLrop_PushMatrix = 184,X_GLrop_Rotated = 185,X_GLrop_Rotatef = 186,X_GLrop_Scaled = 187,X_GLrop_Scalef = 188,X_GLrop_Translated = 189,X_GLrop_Translatef = 190,X_GLrop_Viewport = 191,X_GLrop_DrawArrays = 193,X_GLrop_PolygonOffset = 192,X_GLrop_CopyTexImage1D = 4119,X_GLrop_CopyTexImage2D = 4120,X_GLrop_CopyTexSubImage1D = 4121,X_GLrop_CopyTexSubImage2D = 4122,X_GLrop_TexSubImage1D = 4099,X_GLrop_TexSubImage2D = 4100,X_GLrop_BindTexture = 4117,X_GLrop_PrioritizeTextures = 4118,X_GLrop_Indexubv = 194,X_GLrop_BlendColor = 4096,X_GLrop_BlendEquation = 4097,X_GLrop_ColorTable = 2053,X_GLrop_ColorTableParameterfv = 2054,X_GLrop_ColorTableParameteriv = 2055,X_GLrop_CopyColorTable = 2056,X_GLrop_ColorSubTable = 195,X_GLrop_CopyColorSubTable = 196,X_GLrop_ConvolutionFilter1D = 4101,X_GLrop_ConvolutionFilter2D = 4102,X_GLrop_ConvolutionParameterf = 4103,X_GLrop_ConvolutionParameterfv = 4104,X_GLrop_ConvolutionParameteri = 4105,X_GLrop_ConvolutionParameteriv = 4106,X_GLrop_CopyConvolutionFilter1D = 4107,X_GLrop_CopyConvolutionFilter2D = 4108,X_GLrop_SeparableFilter2D = 4109,X_GLrop_Histogram = 4110,X_GLrop_Minmax = 4111,X_GLrop_ResetHistogram = 4112,X_GLrop_ResetMinmax = 4113,X_GLrop_TexImage3D = 4114,X_GLrop_TexSubImage3D = 4115,X_GLrop_CopyTexSubImage3D = 4123,X_GLrop_DrawArraysEXT = 4116,X_GLrop_ActiveTextureARB = 197,X_GLrop_MultiTexCoord1dvARB = 198,X_GLrop_MultiTexCoord1fvARB = 199,X_GLrop_MultiTexCoord1ivARB = 200,X_GLrop_MultiTexCoord1svARB = 201,X_GLrop_MultiTexCoord2dvARB = 202,X_GLrop_MultiTexCoord2fvARB = 203,X_GLrop_MultiTexCoord2ivARB = 204,X_GLrop_MultiTexCoord2svARB = 205,X_GLrop_MultiTexCoord3dvARB = 206,X_GLrop_MultiTexCoord3fvARB = 207,X_GLrop_MultiTexCoord3ivARB = 208,X_GLrop_MultiTexCoord3svARB = 209,X_GLrop_MultiTexCoord4dvARB = 210,X_GLrop_MultiTexCoord4fvARB = 211,X_GLrop_MultiTexCoord4ivARB = 212,X_GLrop_MultiTexCoord4svARB = 213,X_GLrop_CompressedTexImage1D = 214,X_GLrop_CompressedTexImage2D = 215,X_GLrop_CompressedTexImage3D = 216,X_GLrop_CompressedTexSubImage1D = 217,X_GLrop_CompressedTexSubImage2D = 218,X_GLrop_CompressedTexSubImage3D = 219,X_GLrop_SampleCoverageARB = 229,X_GLrop_WindowPos3fARB = 230,X_GLrop_FogCoordfv = 4124,X_GLrop_FogCoorddv = 4125,X_GLrop_PointParameterfARB = 2065,X_GLrop_PointParameterfvARB = 2066,X_GLrop_SecondaryColor3bv = 4126,X_GLrop_SecondaryColor3sv = 4127,X_GLrop_SecondaryColor3iv = 4128,X_GLrop_SecondaryColor3fv = 4129,X_GLrop_SecondaryColor3dv = 4130,X_GLrop_SecondaryColor3ubv = 4131,X_GLrop_SecondaryColor3usv = 4132,X_GLrop_SecondaryColor3uiv = 4133,X_GLrop_BlendFuncSeparate = 4134,X_GLrop_PointParameteri = 4221,X_GLrop_PointParameteriv = 4222,X_GLvop_GetConvolutionFilterEXT = 1,X_GLvop_GetConvolutionParameterfvEXT = 2,X_GLvop_GetConvolutionParameterivEXT = 3,X_GLvop_GetSeparableFilterEXT = 4,X_GLvop_GetHistogramEXT = 5,X_GLvop_GetHistogramParameterfvEXT = 6,X_GLvop_GetHistogramParameterivEXT = 7,X_GLvop_GetMinmaxEXT = 8,X_GLvop_GetMinmaxParameterfvEXT = 9,X_GLvop_GetMinmaxParameterivEXT = 10,X_GLvop_AreTexturesResidentEXT = 11,X_GLvop_DeleteTexturesEXT = 12,X_GLvop_GenTexturesEXT = 13,X_GLvop_IsTextureEXT = 14,X_GLvop_GetCombinerInputParameterfvNV = 1270,X_GLvop_GetCombinerInputParameterivNV = 1271,X_GLvop_GetCombinerOutputParameterfvNV = 1272,X_GLvop_GetCombinerOutputParameterivNV = 1273,X_GLvop_GetFinalCombinerOutputParameterfvNV = 1274,X_GLvop_GetFinalCombinerOutputParameterivNV = 1275,X_GLvop_DeleteFenceNV = 1276,X_GLvop_GenFencesNV = 1277,X_GLvop_IsFenceNV = 1278,X_GLvop_TestFenceNV = 1279,X_GLvop_GetFenceivNV = 1280,X_GLvop_AreProgramsResidentNV = 1293,X_GLvop_DeleteProgramARB = 1294,X_GLvop_GenProgramsARB = 1295,X_GLvop_GetProgramEnvParameterfvARB = 1296,X_GLvop_GetProgramEnvParameterdvARB = 1297,X_GLvop_GetProgramEnvParameterivNV = 1298,X_GLvop_GetProgramStringNV = 1299,X_GLvop_GetTrackMatrixivNV = 1300,X_GLvop_GetVertexAttribdvARB = 1301,X_GLvop_GetVertexAttribfvARB = 1302,X_GLvop_GetVertexAttribivARB = 1303,X_GLvop_IsProgramARB = 1304,X_GLvop_GetProgramLocalParameterfvARB = 1305,X_GLvop_GetProgramLocalParameterdvARB = 1306,X_GLvop_GetProgramivARB = 1307,X_GLvop_GetProgramStringARB = 1308,X_GLvop_GetProgramNamedParameter4fvNV = 1310,X_GLvop_GetProgramNamedParameter4dvNV = 1311,X_GLvop_SampleMaskSGIS = 2048,X_GLvop_SamplePatternSGIS = 2049,X_GLvop_GetDetailTexFuncSGIS = 4096,X_GLvop_GetSharpenTexFuncSGIS = 4097,X_GLvop_GetColorTableSGI = 4098,X_GLvop_GetColorTableParameterfvSGI = 4099,X_GLvop_GetColorTableParameterivSGI = 4100,X_GLvop_GetTexFilterFuncSGIS = 4101,X_GLvop_GetInstrumentsSGIX = 4102,X_GLvop_InstrumentsBufferSGIX = 4103,X_GLvop_PollInstrumentsSGIX = 4104,X_GLvop_FlushRasterSGIX = 4105,X_GLXvop_QueryContextInfoEXT = 1024,X_GLXvop_BindTexImageEXT = 1330,X_GLXvop_ReleaseTexImageEXT = 1331,X_GLXvop_SwapIntervalSGI = 65536,X_GLXvop_MakeCurrentReadSGI = 65537,X_GLXvop_CreateGLXVideoSourceSGIX = 65538,X_GLXvop_DestroyGLXVideoSourceSGIX = 65539,X_GLXvop_GetFBConfigsSGIX = 65540,X_GLXvop_CreateContextWithConfigSGIX = 65541,X_GLXvop_CreateGLXPixmapWithConfigSGIX = 65542,X_GLXvop_CreateGLXPbufferSGIX = 65543,X_GLXvop_DestroyGLXPbufferSGIX = 65544,X_GLXvop_ChangeDrawableAttributesSGIX = 65545,X_GLXvop_GetDrawableAttributesSGIX = 65546,X_GLXvop_JoinSwapGroupSGIX = 65547,X_GLXvop_BindSwapBarrierSGIX = 65548,X_GLXvop_QueryMaxSwapBarriersSGIX = 65549,X_GLXvop_QueryHyperpipeNetworkSGIX = 65550,X_GLXvop_QueryHyperpipeConfigSGIX = 65551,X_GLXvop_HyperpipeConfigSGIX = 65552,X_GLXvop_DestroyHyperpipeConfigSGIX = 65553,X_GLrop_WeightbvARB = 220,X_GLrop_WeightubvARB = 221,X_GLrop_WeightsvARB = 222,X_GLrop_WeightusvARB = 223,X_GLrop_WeightivARB = 224,X_GLrop_WeightuivARB = 225,X_GLrop_VertexBlendARB = 226,X_GLrop_WeightfvARB = 227,X_GLrop_WeightdvARB = 228,X_GLrop_BindProgramARB = 4180,X_GLrop_ProgramEnvParameter4fvARB = 4184,X_GLrop_ProgramEnvParameter4dvARB = 4185,X_GLrop_VertexAttrib1svARB = 4189,X_GLrop_VertexAttrib2svARB = 4190,X_GLrop_VertexAttrib3svARB = 4191,X_GLrop_VertexAttrib4svARB = 4192,X_GLrop_VertexAttrib1fvARB = 4193,X_GLrop_VertexAttrib2fvARB = 4194,X_GLrop_VertexAttrib3fvARB = 4195,X_GLrop_VertexAttrib4fvARB = 4196,X_GLrop_VertexAttrib1dvARB = 4197,X_GLrop_VertexAttrib2dvARB = 4198,X_GLrop_VertexAttrib3dvARB = 4199,X_GLrop_ProgramLocalParameter4fvARB = 4215,X_GLrop_ProgramLocalParameter4dvARB = 4216,X_GLrop_ProgramStringARB = 4217,X_GLrop_VertexAttrib4dvARB = 4200,X_GLrop_VertexAttrib4NubvARB = 4201,X_GLrop_VertexAttrib4bvARB = 4230,X_GLrop_VertexAttrib4ivARB = 4231,X_GLrop_VertexAttrib4ubvARB = 4232,X_GLrop_VertexAttrib4usvARB = 4233,X_GLrop_VertexAttrib4uivARB = 4234,X_GLrop_VertexAttrib4NbvARB = 4235,X_GLrop_VertexAttrib4NsvARB = 4236,X_GLrop_VertexAttrib4NivARB = 4237,X_GLrop_VertexAttrib4NusvARB = 4238,X_GLrop_VertexAttrib4NuivARB = 4239,X_GLrop_VertexWeightfvEXT = 4135,X_GLrop_CombinerParameterfNV = 4136,X_GLrop_CombinerParameterfvNV = 4137,X_GLrop_CombinerParameteriNV = 4138,X_GLrop_CombinerParameterivNV = 4139,X_GLrop_CombinerInputNV = 4140,X_GLrop_CombinerOutputNV = 4141,X_GLrop_FinalCombinerInputNV = 4142,X_GLrop_SetFenceNV = 4143,X_GLrop_FinishFenceNV = 4144,X_GLrop_ExecuteProgramNV = 4181,X_GLrop_RequestResidentProgramsNV = 4182,X_GLrop_LoadProgamNV = 4183,X_GLrop_ProgramParameters4fvNV = 4186,X_GLrop_ProgramParameters4dvNV = 4187,X_GLrop_TrackMatrixNV = 4188,X_GLrop_VertexAttribs1svNV = 4202,X_GLrop_VertexAttribs2svNV = 4203,X_GLrop_VertexAttribs3svNV = 4204,X_GLrop_VertexAttribs4svNV = 4205,X_GLrop_VertexAttribs1fvNV = 4206,X_GLrop_VertexAttribs2fvNV = 4207,X_GLrop_VertexAttribs3fvNV = 4208,X_GLrop_VertexAttribs4fvNV = 4209,X_GLrop_VertexAttribs1dvNV = 4210,X_GLrop_VertexAttribs2dvNV = 4211,X_GLrop_VertexAttribs3dvNV = 4212,X_GLrop_VertexAttribs4dvNV = 4213,X_GLrop_VertexAttribs4ubvNV = 4214,X_GLrop_ActiveStencilFaceEXT = 4220,X_GLrop_ProgramNamedParameter4fvNV = 4218,X_GLrop_ProgramNamedParameter4dvNV = 4219,X_GLrop_DepthBoundsEXT = 4229,X_GLrop_BlendEquationSeparateEXT = 4228,X_GLvop_IsRenderbufferEXT = 1422,X_GLvop_GenRenderbuffersEXT = 1423,X_GLvop_GetRenderbufferParameterivEXT = 1424,X_GLvop_IsFramebufferEXT = 1425,X_GLvop_GenFramebuffersEXT = 1426,X_GLvop_CheckFramebufferStatusEXT = 1427,X_GLvop_GetFramebufferAttachmentParameterivEXT = 1428,};
enum MACRO_XawCR_START {XawCR_START_JOB = 70,XawCR_END_JOB = 71,XawCR_DOC_SETUP = 72,XawCR_PAGE_SETUP = 73,};
enum MACRO_XawEditDone {XawEditDone = 0,XawEditError = 1,XawPositionError = 2,};
enum MACRO_XcmsFailure {XcmsFailure = 0,XcmsSuccess = 1,XcmsSuccessWithCompression = 2,};
enum MACRO_XcursorTrue {XcursorTrue = 1,};
enum MACRO_XkbAllXIIds {XkbAllXIIds = 0x600,};
enum MACRO_XkbAnyGroup {XkbAnyGroup = 254,};
enum MACRO_XkbKeyboard {XkbKeyboard = 0,XkbNumberErrors = 1,};
enum MACRO_XpmComments {XpmComments = 256,};
enum MACRO_XpmNoMemory {XpmNoMemory = -3,};
enum MACRO_XtAllEvents {XtAllEvents = 4294967295,};
enum MACRO_XtCacheNone {XtCacheNone = 0x1,XtCacheAll = 0x2,};
enum MACRO_XvInputMask {XvInputMask = 1,XvOutputMask = 2,XvVideoMask = 4,XvStillMask = 8,XvImageMask = 16,XvPixmapMask = 65536,XvWindowMask = 131072,};
enum MACRO_XvMCVersion {XvMCVersion = 1,};
enum MACRO_XvNumErrors {XvNumErrors = 3,};
enum MACRO_XvPreempted {XvPreempted = 3,XvHardError = 4,};
enum MACRO_YPMAXDOMAIN {YPMAXDOMAIN = 64,};
enum MACRO_YPMAXRECORD {YPMAXRECORD = 1024,};
enum MACRO__BITS_TYPES {_BITS_TYPES_H = 1,_BITS_TYPESIZES_H = 1,};
enum MACRO__NETINET_IF {_NETINET_IF_FDDI_H = 1,};
enum MACRO__NETINET_IN {_NETINET_IN_SYSTM_H = 1,__NETINET_IP_H = 1,};
enum MACRO__RPCSVC_NIS {_RPCSVC_NIS_CALLBACK_H = 1,};
enum MACRO__SYS_REBOOT {_SYS_REBOOT_H = 1,};
enum MACRO__SYS_SELECT {_SYS_SELECT_H = 1,};
enum MACRO__SYS_STATFS {_SYS_STATFS_H = 1,_SYS_STATVFS_H = 1,_SYS_SWAP_H = 1,};
enum MACRO__SYS_SYSCTL {_SYS_SYSCTL_H = 1,};
enum MACRO__SYS_SYSLOG {_SYS_SYSLOG_H = 1,_BITS_SYSLOG_PATH_H = 1,};
enum MACRO__SYS_VLIMIT {_SYS_VLIMIT_H = 1,};
enum MACRO__SYS_VTIMES {_SYS_VTIMES_H = 1,};
enum MACRO__XkbKSLower {_XkbKSLower = 1,_XkbKSUpper = 2,};
enum MACRO__XkbSuccess {_XkbSuccess = 0,_XkbErrMissingNames = 1,_XkbErrMissingTypes = 2,};
enum MACRO___NETPACKET {__NETPACKET_PACKET_H = 1,};
enum MACRO___USE_POSIX {__USE_POSIX = 1,__USE_POSIX2 = 1,__USE_POSIX199309 = 1,__USE_POSIX199506 = 1,__USE_XOPEN2K = 1,__USE_MISC = 1,__USE_BSD = 1,__USE_SVID = 1,__USE_FORTIFY_LEVEL = 0,};
enum MACRO___WCOREFLAG {__WCOREFLAG = 0x80,};
enum MACRO_sz_xSegment {sz_xSegment = 8,sz_xPoint = 4,sz_xRectangle = 8,sz_xArc = 12,sz_xConnClientPrefix = 12,sz_xConnSetupPrefix = 8,sz_xConnSetup = 32,sz_xPixmapFormat = 8,sz_xDepth = 8,sz_xVisualType = 24,sz_xWindowRoot = 40,sz_xTimecoord = 8,sz_xHostEntry = 4,sz_xCharInfo = 12,sz_xFontProp = 8,sz_xTextElt = 2,sz_xColorItem = 12,sz_xrgb = 8,sz_xGenericReply = 32,sz_xGetWindowAttributesReply = 44,sz_xGetGeometryReply = 32,sz_xQueryTreeReply = 32,sz_xInternAtomReply = 32,sz_xGetAtomNameReply = 32,sz_xGetPropertyReply = 32,sz_xListPropertiesReply = 32,sz_xGetSelectionOwnerReply = 32,sz_xGrabPointerReply = 32,sz_xQueryPointerReply = 32,sz_xGetMotionEventsReply = 32,sz_xTranslateCoordsReply = 32,sz_xGetInputFocusReply = 32,sz_xQueryKeymapReply = 40,sz_xQueryFontReply = 60,sz_xQueryTextExtentsReply = 32,sz_xListFontsReply = 32,sz_xGetFontPathReply = 32,sz_xGetImageReply = 32,sz_xListInstalledColormapsReply = 32,sz_xAllocColorReply = 32,sz_xAllocNamedColorReply = 32,sz_xAllocColorCellsReply = 32,sz_xAllocColorPlanesReply = 32,sz_xQueryColorsReply = 32,sz_xLookupColorReply = 32,sz_xQueryBestSizeReply = 32,sz_xQueryExtensionReply = 32,sz_xListExtensionsReply = 32,sz_xSetMappingReply = 32,sz_xGetKeyboardControlReply = 52,sz_xGetPointerControlReply = 32,sz_xGetScreenSaverReply = 32,sz_xListHostsReply = 32,sz_xSetModifierMappingReply = 32,sz_xError = 32,sz_xEvent = 32,sz_xKeymapEvent = 32,sz_xReq = 4,sz_xResourceReq = 8,sz_xCreateWindowReq = 32,sz_xChangeWindowAttributesReq = 12,sz_xChangeSaveSetReq = 8,sz_xReparentWindowReq = 16,sz_xConfigureWindowReq = 12,sz_xCirculateWindowReq = 8,sz_xInternAtomReq = 8,sz_xChangePropertyReq = 24,sz_xDeletePropertyReq = 12,sz_xGetPropertyReq = 24,sz_xSetSelectionOwnerReq = 16,sz_xConvertSelectionReq = 24,sz_xSendEventReq = 44,sz_xGrabPointerReq = 24,sz_xGrabButtonReq = 24,sz_xUngrabButtonReq = 12,sz_xChangeActivePointerGrabReq = 16,sz_xGrabKeyboardReq = 16,sz_xGrabKeyReq = 16,sz_xUngrabKeyReq = 12,sz_xAllowEventsReq = 8,sz_xGetMotionEventsReq = 16,sz_xTranslateCoordsReq = 16,sz_xWarpPointerReq = 24,sz_xSetInputFocusReq = 12,sz_xOpenFontReq = 12,sz_xQueryTextExtentsReq = 8,sz_xListFontsReq = 8,sz_xSetFontPathReq = 8,sz_xCreatePixmapReq = 16,sz_xCreateGCReq = 16,sz_xChangeGCReq = 12,sz_xCopyGCReq = 16,sz_xSetDashesReq = 12,sz_xSetClipRectanglesReq = 12,sz_xCopyAreaReq = 28,sz_xCopyPlaneReq = 32,sz_xPolyPointReq = 12,sz_xPolySegmentReq = 12,sz_xFillPolyReq = 16,sz_xPutImageReq = 24,sz_xGetImageReq = 20,sz_xPolyTextReq = 16,sz_xImageTextReq = 16,sz_xCreateColormapReq = 16,sz_xCopyColormapAndFreeReq = 12,sz_xAllocColorReq = 16,sz_xAllocNamedColorReq = 12,sz_xAllocColorCellsReq = 12,sz_xAllocColorPlanesReq = 16,sz_xFreeColorsReq = 12,sz_xStoreColorsReq = 8,sz_xStoreNamedColorReq = 16,sz_xQueryColorsReq = 8,sz_xLookupColorReq = 12,sz_xCreateCursorReq = 32,sz_xCreateGlyphCursorReq = 32,sz_xRecolorCursorReq = 20,sz_xQueryBestSizeReq = 12,sz_xQueryExtensionReq = 8,sz_xChangeKeyboardControlReq = 8,sz_xBellReq = 4,sz_xChangePointerControlReq = 12,sz_xSetScreenSaverReq = 12,sz_xChangeHostsReq = 8,sz_xListHostsReq = 4,sz_xChangeModeReq = 4,sz_xRotatePropertiesReq = 12,sz_xReply = 32,sz_xGrabKeyboardReply = 32,sz_xListFontsWithInfoReply = 60,sz_xSetPointerMappingReply = 32,sz_xGetKeyboardMappingReply = 32,sz_xGetPointerMappingReply = 32,sz_xGetModifierMappingReply = 32,sz_xListFontsWithInfoReq = 8,sz_xPolyLineReq = 12,sz_xPolyArcReq = 12,sz_xPolyRectangleReq = 12,sz_xPolyFillRectangleReq = 12,sz_xPolyFillArcReq = 12,sz_xPolyText8Req = 16,sz_xPolyText16Req = 16,sz_xImageText8Req = 16,sz_xImageText16Req = 16,sz_xSetPointerMappingReq = 4,sz_xForceScreenSaverReq = 4,sz_xSetCloseDownModeReq = 4,sz_xClearAreaReq = 16,sz_xSetAccessControlReq = 4,sz_xGetKeyboardMappingReq = 8,sz_xSetModifierMappingReq = 4,sz_xPropIconSize = 24,sz_xChangeKeyboardMappingReq = 8,};
typedef struct _MultiSinkClassRec MultiSinkClassRec;
typedef struct _MultiSrcClassPart MultiSrcClassPart;
typedef struct _E019DD19C3E276A39E4768CCE95A0FD0 OverrideShellPart;
typedef struct _PannerClassRec *PannerWidgetClass;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F PortholeClassPart;
typedef struct _ProcessContextRec ProcessContextRec;
typedef struct _QueuedRequestInfoRec *QueuedRequestInfo;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F RepeaterClassPart;
typedef struct _ScrollbarClassRec ScrollbarClassRec;
typedef struct _SimpleClassRec *SimpleWidgetClass;
typedef struct _SmeBSBClassRec *SmeBSBObjectClass;
typedef struct _SmeThreeDClassRec SmeThreeDClassRec;
typedef struct _TMComplexBindDataRec *TMComplexBindData;
typedef struct _TMSimpleBindProcsRec *TMSimpleBindProcs;
typedef struct _TMSimpleStateTreeRec *TMSimpleStateTree;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F TemplateClassPart;
typedef struct _TextSinkClassPart TextSinkClassPart;
typedef struct _ThreeDClassRec *ThreeDWidgetClass;
typedef struct _ToggleClassRec *ToggleWidgetClass;
typedef struct _338644C2278094D31E58DDA0CC7454C7 TopLevelShellPart;
typedef struct _419D850E958B0F42F8B9D5E0BB3E2ED8 TransientShellRec;
typedef struct _FE9896265ABA69989620FFBB2F6B5FBF *VendorShellWidget;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F ViewportClassPart;
typedef struct _9B215D7B412F7706499A9C5F7AE2BF48 XETrapGetAvailRep;
typedef struct _C1BC45A60F843B4624B9FAA35BF87512 XETrapGetStatsRep;
typedef struct _2AE07F4A994C5FC6C65BC46898F1D740 XExtensionVersion;
typedef struct _E688C0674EF62F7B7CE00CF8BBC4E652 XF86MiscFilePaths;
typedef struct _D8169209A0BDD9CFFFA27C4AE6C5DFD0 XFixesCursorImage;
typedef struct _6F8FCF8121BD236ABFC6904166324F66 XFocusChangeEvent;
typedef struct _XIMHotKeyTriggers XIMHotKeyTriggers;
typedef struct _EAACC5D9CCC471DA18A3EBF0220D3A4D XKbdFeedbackState;
typedef struct _7B3408C53D543BF7CD2E93CFF0955DEB XLedFeedbackState;
enum XML_Content_Quant {XML_CQUANT_NONE = 0x0,XML_CQUANT_OPT = 0x1,XML_CQUANT_REP = 0x2,XML_CQUANT_PLUS = 0x3,};
typedef struct _701DEBC035A327D9CE136C2F446BD60C XML_Expat_Version;
typedef struct _B863C2049EBF4C6B116A5513F43CF6D2 XML_ParsingStatus;
typedef unsigned char XPAttrReplacement;
typedef struct _79C6B1010639C7F2EBBCA0EF1CC49774 XPtrFeedbackState;
typedef struct _859F20FF7BA8AA6321582CBACCA6F869 XRecordClientInfo;
typedef unsigned int XRecordClientSpec;
typedef struct _CC986080033DF028379B0F24745BC29A XRenderPictFormat;
typedef struct _BEDEF4614EC85AEAB08F01A1475BB3BD XStandardColormap;
typedef struct _3AD660D2DE6692ED5D5F4CBA114AA277 XSyncCounterError;
typedef struct _88FB39CD3802D019F63911908A8052EF XTestFakeAckEvent;
typedef struct _394027BAA9AA8E82816E9F77F29CC265 XWindowAttributes;
typedef struct _01738E5109BD63F41ECBFCFB577D1A78 XawPrintShellPart;
typedef struct _XcursorFileHeader XcursorFileHeader;
typedef struct _XkbConfigField *XkbConfigFieldPtr;
typedef struct _XkbConfigField XkbConfigFieldRec;
typedef struct _XkbKbdDpyState *XkbKbdDpyStatePtr;
typedef struct _XkbKbdDpyState XkbKbdDpyStateRec;
typedef struct _XkbMapNotifyEvent XkbMapNotifyEvent;
typedef struct _XkbNameChanges *XkbNameChangesPtr;
typedef struct _XkbNameChanges XkbNameChangesRec;
typedef struct _XkbShapeDoodad *XkbShapeDoodadPtr;
typedef struct _XkbShapeDoodad XkbShapeDoodadRec;
typedef struct _XkbUI_ViewOpts *XkbUI_ViewOptsPtr;
typedef struct _XkbUI_ViewOpts XkbUI_ViewOptsRec;
typedef struct _F47845C17C3A632D161D2E9D762DE912 *XpuColorspaceList;
typedef struct _C70BF6770A9AD12C6B9D1FF146C70C10 XpuOrientationRec;
typedef struct _2155392EAF78816288DE33777AAC4297 *XpuResolutionList;
typedef int XpuSupportedFlags;
typedef struct _CB86ED79A67F464A5E5DD7E35915D8C3 *XrmOptionDescList;
typedef struct _XtCheckpointTokenRec *XtCheckpointToken;
typedef struct _87D722ECD21497B94ED1D7223FEC05F4 *XtDestroyHookData;
typedef struct XtPerDisplayInputRec *XtPerDisplayInput;
typedef struct _27D11525F5373DBAD314D9C96183D582 XvPortNotifyEvent;
struct _ExifEntryPrivate;
struct _HookObjClassPart {int unused;};
typedef struct _XAsyncEState _XAsyncErrorState;
struct _XkbCompatChanges {unsigned char changed_groups;unsigned short first_si;unsigned short num_si;};
struct _XkbComponentName {unsigned short flags;char *name;};
struct _XkbConfigModInfo {int replace;unsigned char mods;unsigned char mods_clear;unsigned short vmods;unsigned short vmods_clear;};
struct _XkbGeometrySizes {unsigned int which;unsigned short num_properties;unsigned short num_colors;unsigned short num_shapes;unsigned short num_sections;unsigned short num_doodads;unsigned short num_key_aliases;};
struct _XkbMessageAction {unsigned char type;unsigned char flags;unsigned char message[6];};
struct _XkbPtrDfltAction {unsigned char type;unsigned char flags;unsigned char affect;char valueXXX;};
struct _XrmHashBucketRec;
typedef struct _0E8A98C555F38355A2FCB8E6352B37F5 __GLXbitmapHeader;
typedef struct _5839BF3C468A8421CDCDB8829E3FB660 __GLXrenderHeader;
typedef struct __GLXvisualConfigRec __GLXvisualConfig;
typedef void *__builtin_va_list;
typedef struct __pthread_internal_slist __pthread_slist_t;
enum __rlimit_resource {RLIMIT_CPU = 0x0,RLIMIT_FSIZE = 0x1,RLIMIT_DATA = 0x2,RLIMIT_STACK = 0x3,RLIMIT_CORE = 0x4,__RLIMIT_RSS = 0x5,RLIMIT_NOFILE = 0x7,__RLIMIT_OFILE = 0x7,RLIMIT_AS = 0x9,__RLIMIT_NPROC = 0x6,__RLIMIT_MEMLOCK = 0x8,__RLIMIT_LOCKS = 0xA,__RLIMIT_SIGPENDING = 0xB,__RLIMIT_MSGQUEUE = 0xC,__RLIMIT_NICE = 0xD,__RLIMIT_RTPRIO = 0xE,__RLIMIT_NLIMITS = 0xF,__RLIM_NLIMITS = 0xF,};
enum __vlimit_resource {LIM_NORAISE = 0x0,LIM_CPU = 0x1,LIM_FSIZE = 0x2,LIM_DATA = 0x3,LIM_STACK = 0x4,LIM_CORE = 0x5,LIM_MAXRSS = 0x6,};
struct _ss_request_entry { char * *command_names;void (* function)(int,  char * *, int, void *); char * info_string;int flags;};
typedef char *bp_machine_name_t;
enum complain_overflow {complain_overflow_dont = 0x0,complain_overflow_bitfield = 0x1,complain_overflow_signed = 0x2,complain_overflow_unsigned = 0x3,};
typedef struct _contextErrDataRec contextErrDataRec;
enum demangling_styles {no_demangling = 0xFFFFFFFF,unknown_demangling = 0x0,auto_demangling = 0x100,gnu_demangling = 0x200,lucid_demangling = 0x400,arm_demangling = 0x800,hp_demangling = 0x1000,edg_demangling = 0x2000,gnu_v3_demangling = 0x4000,java_demangling = 0x4,gnat_demangling = 0x8000,};
typedef struct _A55E8F963C5B6AC40AFF9FD81070CC8F deviceStateNotify;
struct fb_fix_screeninfo;
struct fb_var_screeninfo;
typedef struct _73FDACF34BD773846371F264A3DF2411 fr_proto_pvc_info;
typedef struct _6313E54CC161B7E5C4F7C30B4DF21654 fsChar2b_version1;
typedef struct _9DC1427BFA5A30405B067C9596620D04 fsConnSetupAccept;
typedef struct _797907A242F94DB9200676D3A724828B fsGetEventMaskReq;
typedef struct _3E18A7AAF5D17F3F11EB968C0A78AED4 fsQueryXInfoReply;
typedef struct _0F63C52D50F31C01632B7951AEFCA4FD fsResolutionError;
typedef struct _8BE617EABEB75C8FAB9CB9A4A240FEE3 fsSetEventMaskReq;
typedef struct _33AF8112BACFF99F66629433CE03587D fsXFontInfoHeader;
enum gnu_v3_ctor_kinds {gnu_v3_complete_object_ctor = 0x1,gnu_v3_base_object_ctor = 0x2,gnu_v3_complete_object_allocating_ctor = 0x3,};
enum gnu_v3_dtor_kinds {gnu_v3_deleting_dtor = 0x1,gnu_v3_complete_object_dtor = 0x2,gnu_v3_base_object_dtor = 0x3,};
typedef struct _F61ACF7744F0F243EEA7ADCD8DB51D9E jas_cmpxformops_t;
typedef struct _C82A39D70AC665D4F8B9F5FC885D2B73 jas_cmpxformseq_t;
typedef void lt_dlmutex_unlock(void);
struct ns_tcp_tsig_state {int counter;struct dst_key *key;void *ctx;unsigned char sig[512];int siglen;};
typedef struct _6999C5F45A7509ACAEE4435BC7D6BE11 pmGetProxyAddrMsg;
typedef struct _B4C695B0250A38B82AFFE65B8304A51A posix_spawnattr_t;
typedef union _D1779CA5851A61401DD36BCDAF347214 pthread_barrier_t;
struct revectored_struct {unsigned int __map[8];};
struct rose_cause_struct {unsigned char cause;unsigned char diagnostic;};
struct sensors_chip_name {char *prefix;int bus;int addr;char *busname;};
struct sg_scsi_sense_hdr {unsigned char response_code;unsigned char sense_key;unsigned char asc;unsigned char ascq;unsigned char byte4;unsigned char byte5;unsigned char byte6;unsigned char additional_length;};
typedef struct _6C0DBE15692AB0301FA41806B271F811 smInteractDoneMsg;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smSaveCompleteMsg;
typedef struct _0A132E968BCCC0DBF60AFD92D1AD913D smSaveYourselfMsg;
typedef struct _EC87D4E5EFECFC4D155F79244EABA9BB xChangeSaveSetReq;
typedef struct _07A0BBE0F3D6D0E97B5A30869B6D39C4 xConnClientPrefix;
typedef struct _0566ABB5D656E83D377732EE088CAE2E xDMXAddInputReply;
typedef struct _B6C2B50A2126E272B3960EB4DC4F6604 xDPMSCapableReply;
typedef struct _2CBA644A081B49363F2046758E32CF0D xDamageDestroyReq;
typedef struct GLXClientInfo xGLXClientInfoReq;
typedef struct _4C25F4CCE77EB8ED613895749E258BA8 xGLXGetErrorReply;
typedef struct _5DA0449935C160E6A1371B1AEC9BA1E2 xGLXIsDirectReply;
typedef struct _8B1EAF7AAA57F33F38F96E94C6EE2E44 xGetAtomNameReply;
typedef struct _8E1349AD4AC8D9A4F1DC84C54B0BE169 xGetFontPathReply;
typedef struct _37BE2491590EE7EB76B44447C3CB76CA xGetGeometryReply;
typedef struct _D70593ABB97D9ADE4A069324C98D63AE xGetPropertyReply;
typedef struct _37CF6FD3D8604C440825361FBCF768B5 xGrabDeviceKeyReq;
typedef struct _8C544AC6C871408AE6573DA61B3B8C70 xGrabPointerReply;
typedef struct _F97BA04A84B56701784896B95A4002D0 xKbdFeedbackState;
typedef struct _2C303F742F1AA0AC713FA8EB1EC01C89 xLbxAllocColorReq;
typedef struct _67EB8B73AFD8C3C32B210944A0EE6A33 xLbxGetImageReply;
typedef struct _5FD5198515091F6F9684846B8D2DAFFB xLbxGrabCmapReply;
typedef struct _LbxStartProxy xLbxStartProxyReq;
typedef struct _A9B1BAFFCE9059101A2CA55F4DE425B3 xLedFeedbackState;
typedef struct _79D3745B39F9E71262BFBA7985E1C7DE xLookupColorReply;
typedef struct _GetBugMode xMITGetBugModeReq;
typedef struct _SetBugMode xMITSetBugModeReq;
typedef struct _PrintStartDoc xPrintStartDocReq;
typedef struct _PrintStartJob xPrintStartJobReq;
typedef struct _24BF153529F05C45F0A0621575016FCA xPtrFeedbackState;
typedef struct _E6A7EC26390A1436F354D6A4637276C8 xQueryBestSizeReq;
typedef struct _3C4C38FC10522588E30AD31A846C8E7D xQueryColorsReply;
typedef struct _27AC02CFF97A742F93959B98FA171589 xQueryKeymapReply;
typedef struct _89ACFCE72F27CF3E8997F0C88CBC1FEF xRRSelectInputReq;
typedef struct _1463B1446DFC3BE3591F88FAF0B4315C xRecolorCursorReq;
typedef struct _EDCAE6FAA77F2844B16FB7E0B618EDD7 xSetDeviceModeReq;
typedef struct _60FD28E41E68D30D206D9EC072DAC7C8 xSetInputFocusReq;
typedef struct _ShapeNotify xShapeNotifyEvent;
typedef struct _ShmGetImageReply xShmGetImageReply;
typedef struct _F466B234F46A211DC597B6DC6FDB33CA xTestFakeAckEvent;
typedef struct _221FB40353091864D31474CD79EAAEF6 xTestFakeInputReq;
typedef struct _5CD0DDA75FC8A64FD62E45433429A157 xTestStopInputReq;
typedef struct _E8D391135C8469DFAA1B91EC6A7D7277 xXDGASetModeReply;
typedef struct _555515E43BC9CF64AF390C3AB1002B52 xXTrapGetCurReply;
typedef xcb_request_error_t xcb_alloc_error_t;
enum xcb_back_pixmap_t {XCB_BACK_PIXMAP_NONE = 0x0,XCB_BACK_PIXMAP_PARENT_RELATIVE = 0x1,};
enum xcb_button_mask_t {XCB_BUTTON_MASK_1 = 0x100,XCB_BUTTON_MASK_2 = 0x200,XCB_BUTTON_MASK_3 = 0x400,XCB_BUTTON_MASK_4 = 0x800,XCB_BUTTON_MASK_5 = 0x1000,XCB_BUTTON_MASK_ANY = 0x8000,};
typedef float xcb_glx_float32_t;
typedef double xcb_glx_float64_t;
enum xcb_grab_status_t {XCB_GRAB_STATUS_SUCCESS = 0x0,XCB_GRAB_STATUS_ALREADY_GRABBED = 0x1,XCB_GRAB_STATUS_INVALID_TIME = 0x2,XCB_GRAB_STATUS_NOT_VIEWABLE = 0x3,XCB_GRAB_STATUS_FROZEN = 0x4,};
enum xcb_image_order_t {XCB_IMAGE_ORDER_LSB_FIRST = 0x0,XCB_IMAGE_ORDER_MSB_FIRST = 0x1,};
enum xcb_input_focus_t {XCB_INPUT_FOCUS_NONE = 0x0,XCB_INPUT_FOCUS_POINTER_ROOT = 0x1,XCB_INPUT_FOCUS_PARENT = 0x2,};
typedef xcb_request_error_t xcb_match_error_t;
enum xcb_notify_mode_t {XCB_NOTIFY_MODE_NORMAL = 0x0,XCB_NOTIFY_MODE_GRAB = 0x1,XCB_NOTIFY_MODE_UNGRAB = 0x2,XCB_NOTIFY_MODE_WHILE_GRABBED = 0x3,};
enum xcb_test_cursor_t {XCB_TEST_CURSOR_NONE = 0x0,XCB_TEST_CURSOR_CURRENT = 0x1,};
typedef struct _EAD4BA1AA5D214B5D4E5F46AB8426598 xcb_void_cookie_t;
typedef struct _xkbActionWireDesc xkbActionWireDesc;
typedef struct _xkbControlsNotify xkbControlsNotify;
typedef union _xkbDoodadWireDesc xkbDoodadWireDesc;
typedef struct _xkbGetControls xkbGetControlsReq;
typedef struct _xkbGetGeometry xkbGetGeometryReq;
typedef struct _xkbSetControls xkbSetControlsReq;
typedef struct _xkbSetGeometry xkbSetGeometryReq;
typedef struct _xkbSymMapWireDesc xkbSymMapWireDesc;
typedef struct _xkmKTMapEntryDesc xkmKTMapEntryDesc;
typedef struct _xkmLogoDoodadDesc xkmLogoDoodadDesc;
typedef struct _xkmOverlayKeyDesc xkmOverlayKeyDesc;
typedef struct _xkmOverlayRowDesc xkmOverlayRowDesc;
typedef struct _xkmTextDoodadDesc xkmTextDoodadDesc;
typedef struct _C277CB81CBAA95C145BFA0CE4951774F xvImageFormatInfo;
typedef struct _ATranslationData ATranslationData;
typedef struct _AsciiSrcClassRec AsciiSrcClassRec;
typedef struct _BitmapSources *BitmapSourcesPtr;
typedef struct _BitmapSources BitmapSourcesRec;
typedef struct _CaseConverterRec *CaseConverterPtr;
typedef struct _CaseConverterRec CaseConverterRec;
typedef struct _CommandClass CommandClassPart;
typedef struct _CompositeClassPart *CompositePartPtr;
typedef struct _ConstraintRec *ConstraintWidget;
typedef struct _ExifEntryPrivate ExifEntryPrivate;
typedef struct FTC_ImageTypeRec_ FTC_ImageTypeRec;
typedef struct FT_Face_InternalRec_ *FT_Face_Internal;
enum FT_Glyph_Format_ {FT_GLYPH_FORMAT_NONE = 0x0,FT_GLYPH_FORMAT_COMPOSITE = 0x636F6D70,FT_GLYPH_FORMAT_BITMAP = 0x62697473,FT_GLYPH_FORMAT_OUTLINE = 0x6F75746C,FT_GLYPH_FORMAT_PLOTTER = 0x706C6F74,};
typedef struct FT_Glyph_Metrics_ FT_Glyph_Metrics;
enum FT_Kerning_Mode_ {FT_KERNING_DEFAULT = 0x0,FT_KERNING_UNFITTED = 0x1,FT_KERNING_UNSCALED = 0x2,};
typedef struct FT_Outline_Funcs_ FT_Outline_Funcs;
typedef struct FT_Raster_Params_ FT_Raster_Params;
typedef struct FT_Size_InternalRec_ *FT_Size_Internal;
typedef struct FT_Slot_InternalRec_ *FT_Slot_Internal;
typedef struct FT_WinFNT_HeaderRec_ *FT_WinFNT_Header;
typedef struct _FontDirectory *FontDirectoryPtr;
typedef struct _FontDirectory FontDirectoryRec;
typedef struct _FontRenders *FontRenderersPtr;
typedef struct _FontRenders FontRenderersRec;
typedef struct GLFBDevBufferRec *GLFBDevBufferPtr;
typedef struct GLFBDevVisualRec *GLFBDevVisualPtr;
typedef struct GLUtesselator GLUtesselatorObj;
typedef struct _HookObjClassPart HookObjClassPart;
typedef struct _9750BD37C04375AEAD857CD1AEBC6ACD IceAuthDataEntry;
typedef struct _5BB888AFAE3DA1AF86E88EEDAEBE9855 IceAuthFileEntry;
typedef struct _ED9B42DCB70FAF91CA1BE125EE068ABB IceReplyWaitInfo;
struct JDK1_1AttachArgs {void *__padding;};
typedef struct _LabelClassRec *LabelWidgetClass;
enum MACRO_ACCOUNTING {ACCOUNTING = 9,};
enum MACRO_ADDRSTRLEN {INET_ADDRSTRLEN = 16,INET6_ADDRSTRLEN = 46,};
enum MACRO_ARCDENSITY {ARCDENSITY = 3,};
enum MACRO_AX25_NOUID {AX25_NOUID_DEFAULT = 0,AX25_NOUID_BLOCK = 1,AX25_SET_RT_IPMODE = 2,AX25_DIGI_INBAND = 1,AX25_DIGI_XBAND = 2,AX25_MAX_DIGIS = 8,AX25_VALUES_IPDEFMODE = 0,AX25_VALUES_AXDEFMODE = 1,AX25_VALUES_NETROM = 2,AX25_VALUES_TEXT = 3,AX25_VALUES_BACKOFF = 4,AX25_VALUES_CONMODE = 5,AX25_VALUES_WINDOW = 6,AX25_VALUES_EWINDOW = 7,AX25_VALUES_T1 = 8,AX25_VALUES_T2 = 9,AX25_VALUES_T3 = 10,AX25_VALUES_N2 = 11,AX25_VALUES_DIGI = 12,AX25_VALUES_IDLE = 13,AX25_VALUES_PACLEN = 14,AX25_VALUES_IPMAXQUEUE = 15,AX25_MAX_VALUES = 20,};
enum MACRO_AllocError {AllocError = 80,};
enum MACRO_AuthDenied {AuthDenied = 3,};
enum MACRO_BADVERSION {BADVERSION = 6,};
enum MACRO_BFD_LINKER {BFD_LINKER_CREATED = 0x2000,BFD_NO_MORE_SYMBOLS = 0xFFFFFFFF,BFD_ARM_SPECIAL_SYM_TYPE_MAP = 0x1,BFD_ARM_SPECIAL_SYM_TYPE_TAG = 0x2,BFD_ARM_SPECIAL_SYM_TYPE_OTHER = 0x4,BFD_ARM_SPECIAL_SYM_TYPE_ANY = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_BLKGETSIZE {BLKGETSIZE = 0x1260,};
enum MACRO_BLKSECTGET {BLKSECTGET = 0x1267,};
enum MACRO_BLKSECTSET {BLKSECTSET = 0x1266,};
enum MACRO_BUFFILEEOF {BUFFILEEOF = -1,};
enum MACRO_BYTESWAP_H {_BYTESWAP_H = 1,_BITS_BYTESWAP_H = 1,};
enum MACRO_BadDevices {BadDevices = 5,};
enum MACRO_BitsInByte {BitsInByte = 8,};
enum MACRO_CHARSUBSET {CHARSUBSET_SPECIFIED = 0x40,};
enum MACRO_CapNotLast {CapNotLast = 0,CapButt = 1,CapRound = 2,};
enum MACRO_DELAYTIMER {DELAYTIMER_MAX = 2147483647,TTY_NAME_MAX = 32,LOGIN_NAME_MAX = 256,HOST_NAME_MAX = 64,MQ_PRIO_MAX = 32768,SSIZE_MAX = 2147483647,};
enum MACRO_DES_MAXLEN {DES_MAXLEN = 65536,DES_QUICKLEN = 16,};
enum MACRO_DIAGNOSTIC {RECEIVE_DIAGNOSTIC = 0x1C,SEND_DIAGNOSTIC = 0x1D,};
enum MACRO_DISCONNECT {DISCONNECT = 0x4,};
enum MACRO_DPMSModeOn {DPMSModeOn = 0,DPMSModeStandby = 1,DPMSModeSuspend = 2,};
enum MACRO_DestroyAll {DestroyAll = 0,RetainPermanent = 1,RetainTemporary = 2,};
enum MACRO_DeviceMode {DeviceMode = 1,};
enum MACRO_DvAccelNum {DvAccelNum = 1,DvAccelDenom = 2,DvThreshold = 4,};
enum MACRO_EF_SPARCV9 {EF_SPARCV9_MM = 3,EF_SPARCV9_TSO = 0,EF_SPARCV9_PSO = 1,EF_SPARCV9_RMO = 2,EF_SPARC_LEDATA = 8388608,EF_SPARC_EXT_MASK = 16776960,EF_SPARC_32PLUS = 256,EF_SPARC_SUN_US1 = 512,EF_SPARC_HAL_R1 = 1024,EF_SPARC_SUN_US3 = 2048,};
enum MACRO_EI_VERSION {EI_VERSION = 6,EI_OSABI = 7,};
enum MACRO_ELFDATANUM {ELFDATANUM = 3,};
enum MACRO_EV_TIMEOUT {EV_TIMEOUT = 0x1,EV_READ = 0x2,EV_WRITE = 0x4,EV_SIGNAL = 0x8,EV_PERSIST = 0x10,};
enum MACRO_FD_CLOEXEC {FD_CLOEXEC = 1,};
enum MACRO_FONT_ENTRY {FONT_ENTRY_SCALABLE = 0,FONT_ENTRY_SCALE_ALIAS = 1,FONT_ENTRY_BITMAP = 2,FONT_ENTRY_ALIAS = 3,FONT_ENTRY_BC = 4,};
enum MACRO_FOREGROUND {FOREGROUND = 1,HIGHLIGHT = 2,};
enum MACRO_FSBadAlloc {FSBadAlloc = 9,};
enum MACRO_FSBadRange {FSBadRange = 3,FSBadEventMask = 4,};
enum MACRO_FT_OUTLINE {FT_OUTLINE_NONE = 0x0,FT_OUTLINE_OWNER = 0x1,FT_OUTLINE_EVEN_ODD_FILL = 0x2,FT_OUTLINE_REVERSE_FILL = 0x4,FT_OUTLINE_IGNORE_DROPOUTS = 0x8,FT_OUTLINE_HIGH_PRECISION = 0x100,FT_OUTLINE_SINGLE_PASS = 0x200,};
enum MACRO_FamilyWild {FamilyWild = 65535,};
enum MACRO_FocusClass {FocusClass = 5,};
enum MACRO_FocusEvent {lbxsz_FocusEvent = 12,lbxupsz_FocusEvent = 9,};
enum MACRO_FontChange {FontChange = 255,};
enum MACRO_GCFunction {GCFunction = 1,GCPlaneMask = 2,GCForeground = 4,GCBackground = 8,GCLineWidth = 16,GCLineStyle = 32,GCCapStyle = 64,GCJoinStyle = 128,GCFillStyle = 256,GCFillRule = 512,GCTile = 1024,GCStipple = 2048,GCTileStipXOrigin = 4096,GCTileStipYOrigin = 8192,GCFont = 16384,GCSubwindowMode = 32768,GCGraphicsExposures = 65536,GCClipXOrigin = 131072,GCClipYOrigin = 262144,GCClipMask = 524288,GCDashOffset = 1048576,GCDashList = 2097152,GCArcMode = 4194304,};
enum MACRO_GLX_WINDOW {GLX_WINDOW_TYPE = 1,GLX_PIXMAP_TYPE = 2,GLX_VIDEO_SOURCE_TYPE = 3,GLX_PBUFFER_TYPE = 4,GLX_GLXWINDOW_TYPE = 6,};
enum MACRO_GRP_MASKOS {GRP_MASKOS = 0xFF00000,GRP_MASKPROC = 0xF0000000,};
enum MACRO_HAS_LINENO {HAS_LINENO = 0x4,HAS_DEBUG = 0x8,HAS_SYMS = 0x10,HAS_LOCALS = 0x20,};
enum MACRO_HAVE_DLFCN {HAVE_DLFCN_H = 1,HAVE_FCNTL_H = 1,HAVE_INTTYPES_H = 1,HAVE_LIBM = 1,HAVE_LIMITS_H = 1,HAVE_MEMORY_H = 1,HAVE_STDBOOL_H = 1,HAVE_STDDEF_H = 1,HAVE_STDINT_H = 1,HAVE_STDLIB_H = 1,HAVE_STRINGS_H = 1,HAVE_STRING_H = 1,HAVE_SYS_STAT_H = 1,HAVE_SYS_TYPES_H = 1,HAVE_UNISTD_H = 1,HAVE_VLA = 1,HAVE_VPRINTF = 1,};
enum MACRO_HostInsert {HostInsert = 0,HostDelete = 1,};
enum MACRO_ICMP_REDIR {ICMP_REDIR_NET = 0,ICMP_REDIR_HOST = 1,ICMP_REDIR_NETTOS = 2,ICMP_REDIR_HOSTTOS = 3,ICMP_EXC_TTL = 0,ICMP_EXC_FRAGTIME = 1,ICMP_MINLEN = 8,ICMP_MASKLEN = 12,ICMP_UNREACH = 3,ICMP_SOURCEQUENCH = 4,ICMP_ROUTERADVERT = 9,ICMP_ROUTERSOLICIT = 10,ICMP_TIMXCEED = 11,ICMP_PARAMPROB = 12,ICMP_TSTAMP = 13,ICMP_TSTAMPREPLY = 14,ICMP_IREQ = 15,ICMP_IREQREPLY = 16,ICMP_MASKREQ = 17,ICMP_MASKREPLY = 18,ICMP_MAXTYPE = 18,ICMP_UNREACH_NET = 0,ICMP_UNREACH_HOST = 1,ICMP_UNREACH_PROTOCOL = 2,ICMP_UNREACH_PORT = 3,ICMP_UNREACH_NEEDFRAG = 4,ICMP_UNREACH_SRCFAIL = 5,ICMP_UNREACH_NET_UNKNOWN = 6,ICMP_UNREACH_HOST_UNKNOWN = 7,ICMP_UNREACH_ISOLATED = 8,ICMP_UNREACH_NET_PROHIB = 9,ICMP_UNREACH_HOST_PROHIB = 10,ICMP_UNREACH_TOSNET = 11,ICMP_UNREACH_TOSHOST = 12,ICMP_UNREACH_FILTER_PROHIB = 13,ICMP_UNREACH_HOST_PRECEDENCE = 14,ICMP_UNREACH_PRECEDENCE_CUTOFF = 15,ICMP_REDIRECT_NET = 0,ICMP_REDIRECT_HOST = 1,ICMP_REDIRECT_TOSNET = 2,ICMP_REDIRECT_TOSHOST = 3,ICMP_TIMXCEED_INTRANS = 0,ICMP_TIMXCEED_REASS = 1,ICMP_PARAMPROB_OPTABSENT = 1,};
enum MACRO_IPV6_RTHDR {IPV6_RTHDR_LOOSE = 0,IPV6_RTHDR_STRICT = 1,IPV6_RTHDR_TYPE_0 = 0,};
enum MACRO_IP_DEFAULT {IP_DEFAULT_MULTICAST_TTL = 1,IP_DEFAULT_MULTICAST_LOOP = 1,IP_MAX_MEMBERSHIPS = 20,};
enum MACRO_IWEVCUSTOM {IWEVCUSTOM = 0x8C02,};
enum MACRO_IWEVTXDROP {IWEVTXDROP = 0x8C00,};
enum MACRO_IsUnmapped {IsUnmapped = 0,IsUnviewable = 1,IsViewable = 2,};
enum MACRO_IsXPointer {IsXPointer = 0,IsXKeyboard = 1,IsXExtensionDevice = 2,};
enum MACRO_JAS_STREAM {JAS_STREAM_READ = 0x1,JAS_STREAM_WRITE = 0x2,JAS_STREAM_APPEND = 0x4,JAS_STREAM_BINARY = 0x8,JAS_STREAM_CREATE = 0x10,JAS_STREAM_UNBUF = 0x0,JAS_STREAM_LINEBUF = 0x1,JAS_STREAM_FULLBUF = 0x2,JAS_STREAM_BUFMODEMASK = 0xF,JAS_STREAM_FREEBUF = 0x8,JAS_STREAM_RDBUF = 0x10,JAS_STREAM_WRBUF = 0x20,JAS_STREAM_EOF = 0x1,JAS_STREAM_ERR = 0x2,JAS_STREAM_RWLIMIT = 0x4,JAS_STREAM_ERRMASK = 0x7,JAS_STREAM_BUFSIZE = 0x2000,JAS_STREAM_PERMS = 0x1B6,JAS_STREAM_MAXPUTBACK = 0x10,JAS_STREAM_FILEOBJ_DELONCLOSE = 0x1,JAS_STREAM_FILEOBJ_NOCLOSE = 0x2,JAS_ICC_MAGIC = 0x61637370,JAS_ICC_HDRLEN = 0x80,JAS_ICC_CLAS_IN = 0x73636E72,JAS_ICC_CLAS_DPY = 0x6D6E7472,JAS_ICC_CLAS_OUT = 0x70727472,JAS_ICC_CLAS_LNK = 0x6C696E6B,JAS_ICC_CLAS_CNV = 0x73706163,JAS_ICC_CLAS_ABS = 0x61627374,JAS_ICC_CLAS_NAM = 0x6E6D636C,JAS_ICC_COLORSPC_XYZ = 0x58595A20,JAS_ICC_COLORSPC_LAB = 0x4C616220,JAS_ICC_COLORSPC_LUV = 0x4C757620,JAS_ICC_COLORSPC_YCBCR = 0x59436272,JAS_ICC_COLORSPC_YXY = 0x59787920,JAS_ICC_COLORSPC_RGB = 0x52474220,JAS_ICC_COLORSPC_GRAY = 0x47524159,JAS_ICC_COLORSPC_HSV = 0x48535620,JAS_ICC_COLORSPC_HLS = 0x484C5320,JAS_ICC_COLORSPC_CMYK = 0x434D594B,JAS_ICC_COLORSPC_CMY = 0x434D5920,JAS_ICC_COLORSPC_2 = 0x32434C52,JAS_ICC_COLORSPC_3 = 0x33434C52,JAS_ICC_COLORSPC_4 = 0x34434C52,JAS_ICC_COLORSPC_5 = 0x35434C52,JAS_ICC_COLORSPC_6 = 0x36434C52,JAS_ICC_COLORSPC_7 = 0x37434C52,JAS_ICC_COLORSPC_8 = 0x38434C52,JAS_ICC_COLORSPC_9 = 0x39434C52,JAS_ICC_COLORSPC_10 = 0x41434C52,JAS_ICC_COLORSPC_11 = 0x42434C52,JAS_ICC_COLORSPC_12 = 0x43434C52,JAS_ICC_COLORSPC_13 = 0x44434C52,JAS_ICC_COLORSPC_14 = 0x45434C52,JAS_ICC_COLORSPC_15 = 0x46434C52,JAS_ICC_REFCOLORSPC_XYZ = 0x58595A20,JAS_ICC_REFCOLORSPC_LAB = 0x4C616220,JAS_ICC_PLATFORM_APPL = 0x4150504C,JAS_ICC_PLATFORM_MSFT = 0x4D534654,JAS_ICC_PLATFORM_SGI = 0x53474920,JAS_ICC_PLATFORM_SUNW = 0x53554E57,JAS_ICC_PLATFORM_TGNT = 0x54474E54,JAS_ICC_FLAGS_EMBED = 0x1,JAS_ICC_FLAGS_NOSEP = 0x2,JAS_ICC_ATTR_TRANS = 0x1,JAS_ICC_ATTR_MATTE = 0x2,JAS_ICC_INTENT_PER = 0x0,JAS_ICC_INTENT_REL = 0x1,JAS_ICC_INTENT_SAT = 0x2,JAS_ICC_INTENT_ABS = 0x3,JAS_ICC_TAG_ATOB0 = 0x41324230,JAS_ICC_TAG_ATOB1 = 0x41324231,JAS_ICC_TAG_ATOB2 = 0x41324232,JAS_ICC_TAG_BLUMATCOL = 0x6258595A,JAS_ICC_TAG_BLUTRC = 0x62545243,JAS_ICC_TAG_BTOA0 = 0x42324130,JAS_ICC_TAG_BTOA1 = 0x42324131,JAS_ICC_TAG_BTOA2 = 0x42324132,JAS_ICC_TAG_CALTIME = 0x63616C74,JAS_ICC_TAG_CHARTARGET = 0x74617267,JAS_ICC_TAG_CPYRT = 0x63707274,JAS_ICC_TAG_CRDINFO = 0x63726469,JAS_ICC_TAG_DEVMAKERDESC = 0x646D6E64,JAS_ICC_TAG_DEVMODELDESC = 0x646D6464,JAS_ICC_TAG_DEVSET = 0x64657673,JAS_ICC_TAG_GAMUT = 0x67616D74,JAS_ICC_TAG_GRYTRC = 0x6B545243,JAS_ICC_TAG_GRNMATCOL = 0x6758595A,JAS_ICC_TAG_GRNTRC = 0x67545243,JAS_ICC_TAG_LUM = 0x6C756D69,JAS_ICC_TAG_MEASURE = 0x6D656173,JAS_ICC_TAG_MEDIABLKPT = 0x626B7074,JAS_ICC_TAG_MEDIAWHIPT = 0x77747074,JAS_ICC_TAG_NAMCOLR = 0x6E636F6C,JAS_ICC_TAG_NAMCOLR2 = 0x6E636C32,JAS_ICC_TAG_OUTRESP = 0x72657370,JAS_ICC_TAG_PREVIEW0 = 0x70726530,JAS_ICC_TAG_PREVIEW1 = 0x70726531,JAS_ICC_TAG_PREVIEW2 = 0x70726532,JAS_ICC_TAG_PROFDESC = 0x64657363,JAS_ICC_TAG_PROFSEQDESC = 0x70736571,JAS_ICC_TAG_PSDCRD0 = 0x70736430,JAS_ICC_TAG_PSCRDD1 = 0x70736431,JAS_ICC_TAG_PSCRDD2 = 0x70736432,JAS_ICC_TAG_PSCRDD3 = 0x70736433,JAS_ICC_TAG_PS2CSA = 0x70733273,JAS_ICC_TAG_PS2RENINTENT = 0x70733269,JAS_ICC_TAG_REDMATCOL = 0x7258595A,JAS_ICC_TAG_REDTRC = 0x72545243,JAS_ICC_TAG_SCRNGDES = 0x73637264,JAS_ICC_TAG_SCRNG = 0x7363726E,JAS_ICC_TAG_TECH = 0x74656368,JAS_ICC_TAG_UCRBG = 0x62666420,JAS_ICC_TAG_VIEWCONDDESC = 0x76756564,JAS_ICC_TAG_VIEWCOND = 0x76696577,JAS_ICC_TYPE_CRDINFO = 0x63726469,JAS_ICC_TYPE_CURV = 0x63757276,JAS_ICC_TYPE_DATA = 0x64617461,JAS_ICC_TYPE_TIME = 0x6474696D,JAS_ICC_TYPE_DEVSET = 0x64657673,JAS_ICC_TYPE_LUT16 = 0x6D667432,JAS_ICC_TYPE_LUT8 = 0x6D667431,JAS_ICC_TYPE_MEASURE = 0x6D656173,JAS_ICC_TYPE_NAMCOLR = 0x6E636F6C,JAS_ICC_TYPE_NAMCOLR2 = 0x6E636C32,JAS_ICC_TYPE_PROFSEQDESC = 0x70736571,JAS_ICC_TYPE_RESPCURVSET16 = 0x72637332,JAS_ICC_TYPE_SF32 = 0x73663332,JAS_ICC_TYPE_SCRNG = 0x7363726E,JAS_ICC_TYPE_SIG = 0x73696720,JAS_ICC_TYPE_TXTDESC = 0x64657363,JAS_ICC_TYPE_TXT = 0x74657874,JAS_ICC_TYPE_UF32 = 0x75663332,JAS_ICC_TYPE_UCRBG = 0x62666420,JAS_ICC_TYPE_UI16 = 0x75693136,JAS_ICC_TYPE_UI32 = 0x75693332,JAS_ICC_TYPE_UI8 = 0x75693038,JAS_ICC_TYPE_UI64 = 0x75693634,JAS_ICC_TYPE_VIEWCOND = 0x76696577,JAS_ICC_TYPE_XYZ = 0x58595A20,JAS_CMXFORM_OP_FWD = 0x0,JAS_CMXFORM_OP_REV = 0x1,JAS_CMXFORM_OP_PROOF = 0x2,JAS_CMXFORM_OP_GAMUT = 0x3,JAS_CMXFORM_INTENT_PER = 0x0,JAS_CMXFORM_INTENT_RELCLR = 0x1,JAS_CMXFORM_INTENT_ABSCLR = 0x2,JAS_CMXFORM_INTENT_SAT = 0x3,JAS_CMXFORM_NUMINTENTS = 0x4,JAS_CMXFORM_OPTM_SPEED = 0x0,JAS_CMXFORM_OPTM_SIZE = 0x1,JAS_CMXFORM_OPTM_ACC = 0x2,JAS_CLRSPC_UNKNOWNMASK = 0x4000,JAS_CLRSPC_FAM_UNKNOWN = 0x0,JAS_CLRSPC_FAM_XYZ = 0x1,JAS_CLRSPC_FAM_LAB = 0x2,JAS_CLRSPC_FAM_GRAY = 0x3,JAS_CLRSPC_FAM_RGB = 0x4,JAS_CLRSPC_FAM_YCBCR = 0x5,JAS_CLRSPC_UNKNOWN = 0x4000,JAS_CLRSPC_CIEXYZ = 0x101,JAS_CLRSPC_CIELAB = 0x201,JAS_CLRSPC_SGRAY = 0x301,JAS_CLRSPC_SRGB = 0x401,JAS_CLRSPC_SYCBCR = 0x501,JAS_CLRSPC_GENRGB = 0x400,JAS_CLRSPC_GENGRAY = 0x300,JAS_CLRSPC_GENYCBCR = 0x500,JAS_CLRSPC_CHANIND_YCBCR_Y = 0x0,JAS_CLRSPC_CHANIND_YCBCR_CB = 0x1,JAS_CLRSPC_CHANIND_YCBCR_CR = 0x2,JAS_CLRSPC_CHANIND_RGB_R = 0x0,JAS_CLRSPC_CHANIND_RGB_G = 0x1,JAS_CLRSPC_CHANIND_RGB_B = 0x2,JAS_CLRSPC_CHANIND_GRAY_Y = 0x0,JAS_CMPROF_TYPE_DEV = 0x1,JAS_CMPROF_TYPE_CLRSPC = 0x2,JAS_CMPROF_NUMPXFORMSEQS = 0xD,JAS_GETOPT_EOF = 0xFFFFFFFF,JAS_GETOPT_ERR = 0x3F,JAS_OPT_HASARG = 0x1,JAS_MATRIX_REF = 0x1,JAS_IMAGE_INMEMTHRESH = 0x1000000,JAS_IMAGE_CT_UNKNOWN = 0x10000,JAS_IMAGE_CT_OPACITY = 0x8000,JAS_IMAGE_CT_RGB_R = 0x0,JAS_IMAGE_CT_RGB_G = 0x1,JAS_IMAGE_CT_RGB_B = 0x2,JAS_IMAGE_CT_YCBCR_Y = 0x0,JAS_IMAGE_CT_YCBCR_CB = 0x1,JAS_IMAGE_CT_YCBCR_CR = 0x2,JAS_IMAGE_CT_GRAY_Y = 0x0,JAS_IMAGE_MAXFMTS = 0x20,};
enum MACRO_KDGKBDIACR {KDGKBDIACR = 0x4B4A,};
enum MACRO_KDSKBDIACR {KDSKBDIACR = 0x4B4B,};
enum MACRO_KeyRelease {KeyRelease = 3,ButtonPress = 4,};
enum MACRO_LOG_SELECT {LOG_SELECT = 0x4C,LOG_SENSE = 0x4D,};
enum MACRO_LedModeOff {LedModeOff = 0,LedModeOn = 1,};
enum MACRO_MAP_FAILED {MAP_FAILED = -1,};
enum MACRO_MAXDFLSRCH {MAXDFLSRCH = 3,};
enum MACRO_MAXNAMELEN {MAXNAMELEN = 1025,};
enum MACRO_MAXPATHLEN {MAXPATHLEN = 4096,};
enum MACRO_MAX_NETOBJ {MAX_NETOBJ_SZ = 1024,};
enum MACRO_MISCOMPARE {MISCOMPARE = 0xE,};
enum MACRO_MNTPATHLEN {MNTPATHLEN = 1024,};
enum MACRO_MODE_SENSE {MODE_SENSE = 0x1A,};
enum MACRO_MOD_OFFSET {MOD_OFFSET = 1,MOD_FREQUENCY = 2,MOD_MAXERROR = 4,MOD_ESTERROR = 8,MOD_STATUS = 16,MOD_TIMECONST = 32,MOD_CLKB = 16384,MOD_CLKA = 32769,};
enum MACRO_MSG_PARITY {MSG_PARITY_ERROR = 0x9,};
enum MACRO_MapRequest {MapRequest = 20,};
enum MACRO_NAMESERVER {NAMESERVER_PORT = 53,};
enum MACRO_NSS_BUFLEN {NSS_BUFLEN_PASSWD = 1024,};
enum MACRO_NT_PRFPREG {NT_PRFPREG = 2,};
enum MACRO_NULLSTRING {NULLSTRING = 0,};
enum MACRO_NewPointer {NewPointer = 0,NewKeyboard = 1,};
enum MACRO_NotifyHint {NotifyHint = 1,};
enum MACRO_O_ONEVALUE {O_ONEVALUE = 0x1,O_SHOWDESC = 0x2,O_ROWMAJOR = 0x4,O_IGNORECASE = 0x8,O_SHOWMATCH = 0x10,O_NONCYCLIC = 0x20,O_SELECTABLE = 0x1,};
enum MACRO_OtherClass {OtherClass = 6,};
enum MACRO_PCI_DEVICE {PCI_DEVICE_ID_NVIDIA_GEFORCE_SDR = 0x100,PCI_DEVICE_ID_NVIDIA_GEFORCE_DDR = 0x101,PCI_DEVICE_ID_NVIDIA_QUADRO = 0x103,PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX = 0x110,PCI_DEVICE_ID_NVIDIA_GEFORCE2_MX2 = 0x111,PCI_DEVICE_ID_NVIDIA_GEFORCE2_GO = 0x112,PCI_DEVICE_ID_NVIDIA_QUADRO2_MXR = 0x113,PCI_DEVICE_ID_NVIDIA_GEFORCE_6600_GT = 0x140,PCI_DEVICE_ID_NVIDIA_GEFORCE_6600 = 0x141,PCI_DEVICE_ID_NVIDIA_GEFORCE_6610_XL = 0x145,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_540 = 0x14E,PCI_DEVICE_ID_NVIDIA_GEFORCE_6200 = 0x14F,PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS = 0x150,PCI_DEVICE_ID_NVIDIA_GEFORCE2_GTS2 = 0x151,PCI_DEVICE_ID_NVIDIA_GEFORCE2_ULTRA = 0x152,PCI_DEVICE_ID_NVIDIA_QUADRO2_PRO = 0x153,PCI_DEVICE_ID_NVIDIA_GEFORCE_6200_TURBOCACHE = 0x161,PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200 = 0x164,PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250 = 0x166,PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6200_1 = 0x167,PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_6250_1 = 0x168,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_460 = 0x170,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440 = 0x171,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420 = 0x172,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_SE = 0x173,PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO = 0x174,PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO = 0x175,PCI_DEVICE_ID_NVIDIA_GEFORCE4_420_GO_M32 = 0x176,PCI_DEVICE_ID_NVIDIA_GEFORCE4_460_GO = 0x177,PCI_DEVICE_ID_NVIDIA_QUADRO4_500XGL = 0x178,PCI_DEVICE_ID_NVIDIA_GEFORCE4_440_GO_M64 = 0x179,PCI_DEVICE_ID_NVIDIA_QUADRO4_200 = 0x17A,PCI_DEVICE_ID_NVIDIA_QUADRO4_550XGL = 0x17B,PCI_DEVICE_ID_NVIDIA_QUADRO4_500_GOGL = 0x17C,PCI_DEVICE_ID_NVIDIA_GEFORCE4_410_GO_M16 = 0x17D,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440_8X = 0x181,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_440SE_8X = 0x182,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_420_8X = 0x183,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_4000 = 0x185,PCI_DEVICE_ID_NVIDIA_GEFORCE4_448_GO = 0x186,PCI_DEVICE_ID_NVIDIA_GEFORCE4_488_GO = 0x187,PCI_DEVICE_ID_NVIDIA_QUADRO4_580_XGL = 0x188,PCI_DEVICE_ID_NVIDIA_GEFORCE4_MX_MAC = 0x189,PCI_DEVICE_ID_NVIDIA_QUADRO4_280_NVS = 0x18A,PCI_DEVICE_ID_NVIDIA_QUADRO4_380_XGL = 0x18B,PCI_DEVICE_ID_NVIDIA_IGEFORCE2 = 0x1A0,PCI_DEVICE_ID_NVIDIA_NFORCE = 0x1A4,PCI_DEVICE_ID_NVIDIA_MCP1_AUDIO = 0x1B1,PCI_DEVICE_ID_NVIDIA_NFORCE_SMBUS = 0x1B4,PCI_DEVICE_ID_NVIDIA_NFORCE_IDE = 0x1BC,PCI_DEVICE_ID_NVIDIA_MCP1_MODEM = 0x1C1,PCI_DEVICE_ID_NVIDIA_NVENET_1 = 0x1C3,PCI_DEVICE_ID_NVIDIA_NFORCE2 = 0x1E0,PCI_DEVICE_ID_NVIDIA_GEFORCE3 = 0x200,PCI_DEVICE_ID_NVIDIA_GEFORCE3_1 = 0x201,PCI_DEVICE_ID_NVIDIA_GEFORCE3_2 = 0x202,PCI_DEVICE_ID_NVIDIA_QUADRO_DDC = 0x203,PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B = 0x211,PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_LE = 0x212,PCI_DEVICE_ID_NVIDIA_GEFORCE_6800B_GT = 0x215,PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4600 = 0x250,PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4400 = 0x251,PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4200 = 0x253,PCI_DEVICE_ID_NVIDIA_QUADRO4_900XGL = 0x258,PCI_DEVICE_ID_NVIDIA_QUADRO4_750XGL = 0x259,PCI_DEVICE_ID_NVIDIA_QUADRO4_700XGL = 0x25B,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SMBUS = 0x264,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_IDE = 0x265,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA = 0x266,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP51_SATA2 = 0x267,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SMBUS = 0x368,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_IDE = 0x36E,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA = 0x37E,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP55_SATA2 = 0x37F,PCI_DEVICE_ID_NVIDIA_NVENET_12 = 0x268,PCI_DEVICE_ID_NVIDIA_NVENET_13 = 0x269,PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800 = 0x280,PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800_8X = 0x281,PCI_DEVICE_ID_NVIDIA_GEFORCE4_TI_4800SE = 0x282,PCI_DEVICE_ID_NVIDIA_GEFORCE4_4200_GO = 0x286,PCI_DEVICE_ID_NVIDIA_QUADRO4_980_XGL = 0x288,PCI_DEVICE_ID_NVIDIA_QUADRO4_780_XGL = 0x289,PCI_DEVICE_ID_NVIDIA_QUADRO4_700_GOGL = 0x28C,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800_ULTRA = 0x301,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5800 = 0x302,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_2000 = 0x308,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1000 = 0x309,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600_ULTRA = 0x311,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600 = 0x312,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5600SE = 0x314,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5600 = 0x31A,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5650 = 0x31B,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO700 = 0x31C,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200 = 0x320,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_ULTRA = 0x321,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200_1 = 0x322,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5200SE = 0x323,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5200 = 0x324,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250 = 0x325,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5500 = 0x326,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5100 = 0x327,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5250_32 = 0x328,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO_5200 = 0x329,PCI_DEVICE_ID_NVIDIA_QUADRO_NVS_280_PCI = 0x32A,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_500 = 0x32B,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5300 = 0x32C,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5100 = 0x32D,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900_ULTRA = 0x330,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900 = 0x331,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900XT = 0x332,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5950_ULTRA = 0x333,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5900ZT = 0x334,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_3000 = 0x338,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_700 = 0x33F,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700_ULTRA = 0x341,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700 = 0x342,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700LE = 0x343,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_5700VE = 0x344,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_1 = 0x347,PCI_DEVICE_ID_NVIDIA_GEFORCE_FX_GO5700_2 = 0x348,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_GO1000 = 0x34C,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_1100 = 0x34E,PCI_DEVICE_ID_NVIDIA_NVENET_14 = 0x372,PCI_DEVICE_ID_NVIDIA_NVENET_15 = 0x373,PCI_DEVICE_ID_NVIDIA_NVENET_16 = 0x3E5,PCI_DEVICE_ID_NVIDIA_NVENET_17 = 0x3E6,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA = 0x3E7,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_IDE = 0x3EC,PCI_DEVICE_ID_NVIDIA_NVENET_18 = 0x3EE,PCI_DEVICE_ID_NVIDIA_NVENET_19 = 0x3EF,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA2 = 0x3F6,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP61_SATA3 = 0x3F7,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP65_IDE = 0x448,PCI_DEVICE_ID_NVIDIA_NVENET_20 = 0x450,PCI_DEVICE_ID_NVIDIA_NVENET_21 = 0x451,PCI_DEVICE_ID_NVIDIA_NVENET_22 = 0x452,PCI_DEVICE_ID_NVIDIA_NVENET_23 = 0x453,PCI_VENDOR_ID_IMS = 0x10E0,PCI_DEVICE_ID_IMS_TT128 = 0x9128,PCI_DEVICE_ID_IMS_TT3D = 0x9135,PCI_VENDOR_ID_INTERG = 0x10EA,PCI_DEVICE_ID_INTERG_1682 = 0x1682,PCI_DEVICE_ID_INTERG_2000 = 0x2000,PCI_DEVICE_ID_INTERG_2010 = 0x2010,PCI_DEVICE_ID_INTERG_5000 = 0x5000,PCI_DEVICE_ID_INTERG_5050 = 0x5050,PCI_VENDOR_ID_REALTEK = 0x10EC,PCI_DEVICE_ID_REALTEK_8139 = 0x8139,PCI_VENDOR_ID_XILINX = 0x10EE,PCI_DEVICE_ID_RME_DIGI96 = 0x3FC0,PCI_DEVICE_ID_RME_DIGI96_8 = 0x3FC1,PCI_DEVICE_ID_RME_DIGI96_8_PRO = 0x3FC2,PCI_DEVICE_ID_RME_DIGI96_8_PAD_OR_PST = 0x3FC3,PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP = 0x3FC5,PCI_DEVICE_ID_XILINX_HAMMERFALL_DSP_MADI = 0x3FC6,PCI_VENDOR_ID_INIT = 0x1101,PCI_VENDOR_ID_CREATIVE = 0x1102,PCI_DEVICE_ID_CREATIVE_EMU10K1 = 0x2,PCI_VENDOR_ID_ECTIVA = 0x1102,PCI_DEVICE_ID_ECTIVA_EV1938 = 0x8938,PCI_VENDOR_ID_TTI = 0x1103,PCI_DEVICE_ID_TTI_HPT343 = 0x3,PCI_DEVICE_ID_TTI_HPT366 = 0x4,PCI_DEVICE_ID_TTI_HPT372 = 0x5,PCI_DEVICE_ID_TTI_HPT302 = 0x6,PCI_DEVICE_ID_TTI_HPT371 = 0x7,PCI_DEVICE_ID_TTI_HPT374 = 0x8,PCI_DEVICE_ID_TTI_HPT372N = 0x9,PCI_VENDOR_ID_VIA = 0x1106,PCI_DEVICE_ID_VIA_8763_0 = 0x198,PCI_DEVICE_ID_VIA_8380_0 = 0x204,PCI_DEVICE_ID_VIA_3238_0 = 0x238,PCI_DEVICE_ID_VIA_PT880 = 0x258,PCI_DEVICE_ID_VIA_PT880ULTRA = 0x308,PCI_DEVICE_ID_VIA_PX8X0_0 = 0x259,PCI_DEVICE_ID_VIA_3269_0 = 0x269,PCI_DEVICE_ID_VIA_K8T800PRO_0 = 0x282,PCI_DEVICE_ID_VIA_3296_0 = 0x296,PCI_DEVICE_ID_VIA_8363_0 = 0x305,PCI_DEVICE_ID_VIA_P4M800CE = 0x314,PCI_DEVICE_ID_VIA_8371_0 = 0x391,PCI_DEVICE_ID_VIA_8501_0 = 0x501,PCI_DEVICE_ID_VIA_82C561 = 0x561,PCI_DEVICE_ID_VIA_82C586_1 = 0x571,PCI_DEVICE_ID_VIA_82C576 = 0x576,PCI_DEVICE_ID_VIA_SATA_EIDE = 0x581,PCI_DEVICE_ID_VIA_82C586_0 = 0x586,PCI_DEVICE_ID_VIA_82C596 = 0x596,PCI_DEVICE_ID_VIA_82C597_0 = 0x597,PCI_DEVICE_ID_VIA_82C598_0 = 0x598,PCI_DEVICE_ID_VIA_8601_0 = 0x601,PCI_DEVICE_ID_VIA_8605_0 = 0x605,PCI_DEVICE_ID_VIA_82C686 = 0x686,PCI_DEVICE_ID_VIA_82C691_0 = 0x691,PCI_DEVICE_ID_VIA_82C576_1 = 0x1571,PCI_DEVICE_ID_VIA_82C586_2 = 0x3038,PCI_DEVICE_ID_VIA_82C586_3 = 0x3040,PCI_DEVICE_ID_VIA_82C596_3 = 0x3050,PCI_DEVICE_ID_VIA_82C596B_3 = 0x3051,PCI_DEVICE_ID_VIA_82C686_4 = 0x3057,PCI_DEVICE_ID_VIA_82C686_5 = 0x3058,PCI_DEVICE_ID_VIA_8233_5 = 0x3059,PCI_DEVICE_ID_VIA_8233_0 = 0x3074,PCI_DEVICE_ID_VIA_8633_0 = 0x3091,PCI_DEVICE_ID_VIA_8367_0 = 0x3099,PCI_DEVICE_ID_VIA_8653_0 = 0x3101,PCI_DEVICE_ID_VIA_8622 = 0x3102,PCI_DEVICE_ID_VIA_8235_USB_2 = 0x3104,PCI_DEVICE_ID_VIA_8233C_0 = 0x3109,PCI_DEVICE_ID_VIA_8361 = 0x3112,PCI_DEVICE_ID_VIA_XM266 = 0x3116,PCI_DEVICE_ID_VIA_612X = 0x3119,PCI_DEVICE_ID_VIA_862X_0 = 0x3123,PCI_DEVICE_ID_VIA_8753_0 = 0x3128,PCI_DEVICE_ID_VIA_8233A = 0x3147,PCI_DEVICE_ID_VIA_8703_51_0 = 0x3148,PCI_DEVICE_ID_VIA_8237_SATA = 0x3149,PCI_DEVICE_ID_VIA_XN266 = 0x3156,PCI_DEVICE_ID_VIA_6410 = 0x3164,PCI_DEVICE_ID_VIA_8754C_0 = 0x3168,PCI_DEVICE_ID_VIA_8235 = 0x3177,PCI_DEVICE_ID_VIA_8385_0 = 0x3188,PCI_DEVICE_ID_VIA_8377_0 = 0x3189,PCI_DEVICE_ID_VIA_8378_0 = 0x3205,PCI_DEVICE_ID_VIA_8783_0 = 0x3208,PCI_DEVICE_ID_VIA_8237 = 0x3227,PCI_DEVICE_ID_VIA_8251 = 0x3287,PCI_DEVICE_ID_VIA_8237A = 0x3337,PCI_DEVICE_ID_VIA_8231 = 0x8231,PCI_DEVICE_ID_VIA_8231_4 = 0x8235,PCI_DEVICE_ID_VIA_8365_1 = 0x8305,PCI_DEVICE_ID_VIA_CX700 = 0x8324,PCI_DEVICE_ID_VIA_8371_1 = 0x8391,PCI_DEVICE_ID_VIA_82C598_1 = 0x8598,PCI_DEVICE_ID_VIA_838X_1 = 0xB188,PCI_DEVICE_ID_VIA_83_87XX_1 = 0xB198,PCI_VENDOR_ID_SIEMENS = 0x110A,PCI_DEVICE_ID_SIEMENS_DSCC4 = 0x2102,PCI_VENDOR_ID_VORTEX = 0x1119,PCI_DEVICE_ID_VORTEX_GDT60x0 = 0x0,PCI_DEVICE_ID_VORTEX_GDT6000B = 0x1,PCI_DEVICE_ID_VORTEX_GDT6x10 = 0x2,PCI_DEVICE_ID_VORTEX_GDT6x20 = 0x3,PCI_DEVICE_ID_VORTEX_GDT6530 = 0x4,PCI_DEVICE_ID_VORTEX_GDT6550 = 0x5,PCI_DEVICE_ID_VORTEX_GDT6x17 = 0x6,PCI_DEVICE_ID_VORTEX_GDT6x27 = 0x7,PCI_DEVICE_ID_VORTEX_GDT6537 = 0x8,PCI_DEVICE_ID_VORTEX_GDT6557 = 0x9,PCI_DEVICE_ID_VORTEX_GDT6x15 = 0xA,PCI_DEVICE_ID_VORTEX_GDT6x25 = 0xB,PCI_DEVICE_ID_VORTEX_GDT6535 = 0xC,PCI_DEVICE_ID_VORTEX_GDT6555 = 0xD,PCI_DEVICE_ID_VORTEX_GDT6x17RP = 0x100,PCI_DEVICE_ID_VORTEX_GDT6x27RP = 0x101,PCI_DEVICE_ID_VORTEX_GDT6537RP = 0x102,PCI_DEVICE_ID_VORTEX_GDT6557RP = 0x103,PCI_DEVICE_ID_VORTEX_GDT6x11RP = 0x104,PCI_DEVICE_ID_VORTEX_GDT6x21RP = 0x105,PCI_VENDOR_ID_EF = 0x111A,PCI_DEVICE_ID_EF_ATM_FPGA = 0x0,PCI_DEVICE_ID_EF_ATM_ASIC = 0x2,PCI_VENDOR_ID_EF_ATM_LANAI2 = 0x3,PCI_VENDOR_ID_EF_ATM_LANAIHB = 0x5,PCI_VENDOR_ID_IDT = 0x111D,PCI_DEVICE_ID_IDT_IDT77201 = 0x1,PCI_VENDOR_ID_FORE = 0x1127,PCI_DEVICE_ID_FORE_PCA200E = 0x300,PCI_VENDOR_ID_PHILIPS = 0x1131,PCI_DEVICE_ID_PHILIPS_SAA7146 = 0x7146,PCI_DEVICE_ID_PHILIPS_SAA9730 = 0x9730,PCI_VENDOR_ID_EICON = 0x1133,PCI_DEVICE_ID_EICON_DIVA20 = 0xE002,PCI_DEVICE_ID_EICON_DIVA20_U = 0xE004,PCI_DEVICE_ID_EICON_DIVA201 = 0xE005,PCI_DEVICE_ID_EICON_DIVA202 = 0xE00B,PCI_DEVICE_ID_EICON_MAESTRA = 0xE010,PCI_DEVICE_ID_EICON_MAESTRAQ = 0xE012,PCI_DEVICE_ID_EICON_MAESTRAQ_U = 0xE013,PCI_DEVICE_ID_EICON_MAESTRAP = 0xE014,PCI_VENDOR_ID_ZIATECH = 0x1138,PCI_DEVICE_ID_ZIATECH_5550_HC = 0x5550,PCI_VENDOR_ID_SYSKONNECT = 0x1148,PCI_DEVICE_ID_SYSKONNECT_TR = 0x4200,PCI_DEVICE_ID_SYSKONNECT_GE = 0x4300,PCI_DEVICE_ID_SYSKONNECT_YU = 0x4320,PCI_DEVICE_ID_SYSKONNECT_9DXX = 0x4400,PCI_DEVICE_ID_SYSKONNECT_9MXX = 0x4500,PCI_VENDOR_ID_DIGI = 0x114F,PCI_DEVICE_ID_DIGI_DF_M_IOM2_E = 0x70,PCI_DEVICE_ID_DIGI_DF_M_E = 0x71,PCI_DEVICE_ID_DIGI_DF_M_IOM2_A = 0x72,PCI_DEVICE_ID_DIGI_DF_M_A = 0x73,PCI_DEVICE_ID_NEO_2DB9 = 0xC8,PCI_DEVICE_ID_NEO_2DB9PRI = 0xC9,PCI_DEVICE_ID_NEO_2RJ45 = 0xCA,PCI_DEVICE_ID_NEO_2RJ45PRI = 0xCB,PCI_VENDOR_ID_XIRCOM = 0x115D,PCI_DEVICE_ID_XIRCOM_RBM56G = 0x101,PCI_DEVICE_ID_XIRCOM_X3201_MDM = 0x103,PCI_VENDOR_ID_SERVERWORKS = 0x1166,PCI_DEVICE_ID_SERVERWORKS_HE = 0x8,PCI_DEVICE_ID_SERVERWORKS_LE = 0x9,PCI_DEVICE_ID_SERVERWORKS_GCNB_LE = 0x17,PCI_DEVICE_ID_SERVERWORKS_EPB = 0x103,PCI_DEVICE_ID_SERVERWORKS_OSB4 = 0x200,PCI_DEVICE_ID_SERVERWORKS_CSB5 = 0x201,PCI_DEVICE_ID_SERVERWORKS_CSB6 = 0x203,PCI_DEVICE_ID_SERVERWORKS_HT1000SB = 0x205,PCI_DEVICE_ID_SERVERWORKS_OSB4IDE = 0x211,PCI_DEVICE_ID_SERVERWORKS_CSB5IDE = 0x212,PCI_DEVICE_ID_SERVERWORKS_CSB6IDE = 0x213,PCI_DEVICE_ID_SERVERWORKS_HT1000IDE = 0x214,PCI_DEVICE_ID_SERVERWORKS_CSB6IDE2 = 0x217,PCI_DEVICE_ID_SERVERWORKS_CSB6LPC = 0x227,PCI_VENDOR_ID_SBE = 0x1176,PCI_DEVICE_ID_SBE_WANXL100 = 0x301,PCI_DEVICE_ID_SBE_WANXL200 = 0x302,PCI_DEVICE_ID_SBE_WANXL400 = 0x104,PCI_VENDOR_ID_TOSHIBA = 0x1179,PCI_DEVICE_ID_TOSHIBA_PICCOLO = 0x102,PCI_DEVICE_ID_TOSHIBA_PICCOLO_1 = 0x103,PCI_DEVICE_ID_TOSHIBA_PICCOLO_2 = 0x105,PCI_DEVICE_ID_TOSHIBA_TOPIC95 = 0x60A,PCI_DEVICE_ID_TOSHIBA_TOPIC97 = 0x60F,PCI_DEVICE_ID_TOSHIBA_TOPIC100 = 0x617,PCI_VENDOR_ID_TOSHIBA_2 = 0x102F,PCI_DEVICE_ID_TOSHIBA_TC35815CF = 0x30,PCI_DEVICE_ID_TOSHIBA_TC86C001_MISC = 0x108,PCI_DEVICE_ID_TOSHIBA_SPIDER_NET = 0x1B3,PCI_VENDOR_ID_RICOH = 0x1180,PCI_DEVICE_ID_RICOH_RL5C465 = 0x465,PCI_DEVICE_ID_RICOH_RL5C466 = 0x466,PCI_DEVICE_ID_RICOH_RL5C475 = 0x475,PCI_DEVICE_ID_RICOH_RL5C476 = 0x476,PCI_DEVICE_ID_RICOH_RL5C478 = 0x478,PCI_DEVICE_ID_RICOH_R5C822 = 0x822,PCI_VENDOR_ID_DLINK = 0x1186,PCI_DEVICE_ID_DLINK_DGE510T = 0x4C00,PCI_VENDOR_ID_ARTOP = 0x1191,PCI_DEVICE_ID_ARTOP_ATP850UF = 0x5,PCI_DEVICE_ID_ARTOP_ATP860 = 0x6,PCI_DEVICE_ID_ARTOP_ATP860R = 0x7,PCI_DEVICE_ID_ARTOP_ATP865 = 0x8,PCI_DEVICE_ID_ARTOP_ATP865R = 0x9,PCI_DEVICE_ID_ARTOP_AEC7610 = 0x8002,PCI_DEVICE_ID_ARTOP_AEC7612UW = 0x8010,PCI_DEVICE_ID_ARTOP_AEC7612U = 0x8020,PCI_DEVICE_ID_ARTOP_AEC7612S = 0x8030,PCI_DEVICE_ID_ARTOP_AEC7612D = 0x8040,PCI_DEVICE_ID_ARTOP_AEC7612SUW = 0x8050,PCI_DEVICE_ID_ARTOP_8060 = 0x8060,PCI_VENDOR_ID_ZEITNET = 0x1193,PCI_DEVICE_ID_ZEITNET_1221 = 0x1,PCI_DEVICE_ID_ZEITNET_1225 = 0x2,PCI_VENDOR_ID_FUJITSU_ME = 0x119E,PCI_DEVICE_ID_FUJITSU_FS155 = 0x1,PCI_DEVICE_ID_FUJITSU_FS50 = 0x3,PCI_SUBVENDOR_ID_KEYSPAN = 0x11A9,PCI_SUBDEVICE_ID_KEYSPAN_SX2 = 0x5334,PCI_VENDOR_ID_MARVELL = 0x11AB,PCI_DEVICE_ID_MARVELL_GT64111 = 0x4146,PCI_DEVICE_ID_MARVELL_GT64260 = 0x6430,PCI_DEVICE_ID_MARVELL_MV64360 = 0x6460,PCI_DEVICE_ID_MARVELL_MV64460 = 0x6480,PCI_DEVICE_ID_MARVELL_GT96100 = 0x9652,PCI_DEVICE_ID_MARVELL_GT96100A = 0x9653,PCI_VENDOR_ID_V3 = 0x11B0,PCI_DEVICE_ID_V3_V960 = 0x1,PCI_DEVICE_ID_V3_V351 = 0x2,PCI_VENDOR_ID_ATT = 0x11C1,PCI_DEVICE_ID_ATT_VENUS_MODEM = 0x480,PCI_VENDOR_ID_SPECIALIX = 0x11CB,PCI_DEVICE_ID_SPECIALIX_IO8 = 0x2000,PCI_DEVICE_ID_SPECIALIX_RIO = 0x8000,PCI_SUBDEVICE_ID_SPECIALIX_SPEED4 = 0xA004,PCI_VENDOR_ID_ANALOG_DEVICES = 0x11D4,PCI_DEVICE_ID_AD1889JS = 0x1889,PCI_DEVICE_ID_SEGA_BBA = 0x1234,PCI_VENDOR_ID_ZORAN = 0x11DE,PCI_DEVICE_ID_ZORAN_36057 = 0x6057,PCI_DEVICE_ID_ZORAN_36120 = 0x6120,PCI_VENDOR_ID_COMPEX = 0x11F6,PCI_DEVICE_ID_COMPEX_ENET100VG4 = 0x112,PCI_VENDOR_ID_RP = 0x11FE,PCI_DEVICE_ID_RP32INTF = 0x1,PCI_DEVICE_ID_RP8INTF = 0x2,PCI_DEVICE_ID_RP16INTF = 0x3,PCI_DEVICE_ID_RP4QUAD = 0x4,PCI_DEVICE_ID_RP8OCTA = 0x5,PCI_DEVICE_ID_RP8J = 0x6,PCI_DEVICE_ID_RP4J = 0x7,PCI_DEVICE_ID_RP8SNI = 0x8,PCI_DEVICE_ID_RP16SNI = 0x9,PCI_DEVICE_ID_RPP4 = 0xA,PCI_DEVICE_ID_RPP8 = 0xB,PCI_DEVICE_ID_RP4M = 0xD,PCI_DEVICE_ID_RP2_232 = 0xE,PCI_DEVICE_ID_RP2_422 = 0xF,PCI_DEVICE_ID_URP32INTF = 0x801,PCI_DEVICE_ID_URP8INTF = 0x802,PCI_DEVICE_ID_URP16INTF = 0x803,PCI_DEVICE_ID_URP8OCTA = 0x805,PCI_DEVICE_ID_UPCI_RM3_8PORT = 0x80C,PCI_DEVICE_ID_UPCI_RM3_4PORT = 0x80D,PCI_DEVICE_ID_CRP16INTF = 0x903,PCI_VENDOR_ID_CYCLADES = 0x120E,PCI_DEVICE_ID_CYCLOM_Y_Lo = 0x100,PCI_DEVICE_ID_CYCLOM_Y_Hi = 0x101,PCI_DEVICE_ID_CYCLOM_4Y_Lo = 0x102,PCI_DEVICE_ID_CYCLOM_4Y_Hi = 0x103,PCI_DEVICE_ID_CYCLOM_8Y_Lo = 0x104,PCI_DEVICE_ID_CYCLOM_8Y_Hi = 0x105,PCI_DEVICE_ID_CYCLOM_Z_Lo = 0x200,PCI_DEVICE_ID_CYCLOM_Z_Hi = 0x201,PCI_DEVICE_ID_PC300_RX_2 = 0x300,PCI_DEVICE_ID_PC300_RX_1 = 0x301,PCI_DEVICE_ID_PC300_TE_2 = 0x310,PCI_DEVICE_ID_PC300_TE_1 = 0x311,PCI_DEVICE_ID_PC300_TE_M_2 = 0x320,PCI_DEVICE_ID_PC300_TE_M_1 = 0x321,PCI_VENDOR_ID_ESSENTIAL = 0x120F,PCI_DEVICE_ID_ESSENTIAL_ROADRUNNER = 0x1,PCI_VENDOR_ID_O2 = 0x1217,PCI_DEVICE_ID_O2_6729 = 0x6729,PCI_DEVICE_ID_O2_6730 = 0x673A,PCI_DEVICE_ID_O2_6832 = 0x6832,PCI_DEVICE_ID_O2_6836 = 0x6836,PCI_VENDOR_ID_3DFX = 0x121A,PCI_DEVICE_ID_3DFX_VOODOO = 0x1,PCI_DEVICE_ID_3DFX_VOODOO2 = 0x2,PCI_DEVICE_ID_3DFX_BANSHEE = 0x3,PCI_DEVICE_ID_3DFX_VOODOO3 = 0x5,PCI_DEVICE_ID_3DFX_VOODOO5 = 0x9,PCI_VENDOR_ID_AVM = 0x1244,PCI_DEVICE_ID_AVM_B1 = 0x700,PCI_DEVICE_ID_AVM_C4 = 0x800,PCI_DEVICE_ID_AVM_A1 = 0xA00,PCI_DEVICE_ID_AVM_A1_V2 = 0xE00,PCI_DEVICE_ID_AVM_C2 = 0x1100,PCI_DEVICE_ID_AVM_T1 = 0x1200,PCI_VENDOR_ID_STALLION = 0x124D,PCI_VENDOR_ID_AT = 0x1259,PCI_SUBDEVICE_ID_AT_2700FX = 0x2701,PCI_SUBDEVICE_ID_AT_2701FX = 0x2703,PCI_VENDOR_ID_ESS = 0x125D,PCI_DEVICE_ID_ESS_ESS1968 = 0x1968,PCI_DEVICE_ID_ESS_ESS1978 = 0x1978,PCI_DEVICE_ID_ESS_ALLEGRO_1 = 0x1988,PCI_DEVICE_ID_ESS_ALLEGRO = 0x1989,PCI_DEVICE_ID_ESS_CANYON3D_2LE = 0x1990,PCI_DEVICE_ID_ESS_CANYON3D_2 = 0x1992,PCI_DEVICE_ID_ESS_MAESTRO3 = 0x1998,PCI_DEVICE_ID_ESS_MAESTRO3_1 = 0x1999,PCI_DEVICE_ID_ESS_MAESTRO3_HW = 0x199A,PCI_DEVICE_ID_ESS_MAESTRO3_2 = 0x199B,PCI_VENDOR_ID_SATSAGEM = 0x1267,PCI_DEVICE_ID_SATSAGEM_NICCY = 0x1016,PCI_VENDOR_ID_ENSONIQ = 0x1274,PCI_DEVICE_ID_ENSONIQ_CT5880 = 0x5880,PCI_DEVICE_ID_ENSONIQ_ES1370 = 0x5000,PCI_DEVICE_ID_ENSONIQ_ES1371 = 0x1371,PCI_VENDOR_ID_TRANSMETA = 0x1279,PCI_DEVICE_ID_EFFICEON = 0x60,PCI_VENDOR_ID_ROCKWELL = 0x127A,PCI_VENDOR_ID_ITE = 0x1283,PCI_DEVICE_ID_ITE_IT8172G = 0x8172,PCI_DEVICE_ID_ITE_IT8172G_AUDIO = 0x801,PCI_DEVICE_ID_ITE_8211 = 0x8211,PCI_DEVICE_ID_ITE_8212 = 0x8212,PCI_DEVICE_ID_ITE_8872 = 0x8872,PCI_DEVICE_ID_ITE_IT8330G_0 = 0xE886,PCI_DEVICE_ID_ESS_ESS0100 = 0x100,PCI_VENDOR_ID_ALTEON = 0x12AE,PCI_SUBVENDOR_ID_CONNECT_TECH = 0x12C4,PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_232 = 0x1,PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_232 = 0x2,PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_232 = 0x3,PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485 = 0x4,PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_4_4 = 0x5,PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485 = 0x6,PCI_SUBDEVICE_ID_CONNECT_TECH_BH4_485_2_2 = 0x7,PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_485 = 0x8,PCI_SUBDEVICE_ID_CONNECT_TECH_BH8_485_2_6 = 0x9,PCI_SUBDEVICE_ID_CONNECT_TECH_BH081101V1 = 0xA,PCI_SUBDEVICE_ID_CONNECT_TECH_BH041101V1 = 0xB,PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ = 0xC,PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_PTM = 0xD,PCI_SUBDEVICE_ID_CONNECT_TECH_NT960PCI = 0x100,PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_2 = 0x201,PCI_SUBDEVICE_ID_CONNECT_TECH_TITAN_4 = 0x202,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_232 = 0x300,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_232 = 0x301,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_232 = 0x302,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_1_1 = 0x310,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_2 = 0x311,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_4 = 0x312,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2 = 0x320,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4 = 0x321,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8 = 0x322,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_2_485 = 0x330,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_4_485 = 0x331,PCI_SUBDEVICE_ID_CONNECT_TECH_PCI_UART_8_485 = 0x332,PCI_VENDOR_ID_NVIDIA_SGS = 0x12D2,PCI_DEVICE_ID_NVIDIA_SGS_RIVA128 = 0x18,PCI_SUBVENDOR_ID_CHASE_PCIFAST = 0x12E0,PCI_SUBDEVICE_ID_CHASE_PCIFAST4 = 0x31,PCI_SUBDEVICE_ID_CHASE_PCIFAST8 = 0x21,PCI_SUBDEVICE_ID_CHASE_PCIFAST16 = 0x11,PCI_SUBDEVICE_ID_CHASE_PCIFAST16FMC = 0x41,PCI_SUBVENDOR_ID_CHASE_PCIRAS = 0x124D,PCI_SUBDEVICE_ID_CHASE_PCIRAS4 = 0xF001,PCI_SUBDEVICE_ID_CHASE_PCIRAS8 = 0xF010,PCI_VENDOR_ID_AUREAL = 0x12EB,PCI_DEVICE_ID_AUREAL_VORTEX_1 = 0x1,PCI_DEVICE_ID_AUREAL_VORTEX_2 = 0x2,PCI_DEVICE_ID_AUREAL_ADVANTAGE = 0x3,PCI_VENDOR_ID_ELECTRONICDESIGNGMBH = 0x12F8,PCI_DEVICE_ID_LML_33R10 = 0x8A02,PCI_VENDOR_ID_SIIG = 0x131F,PCI_SUBVENDOR_ID_SIIG = 0x131F,PCI_DEVICE_ID_SIIG_1S_10x_550 = 0x1000,PCI_DEVICE_ID_SIIG_1S_10x_650 = 0x1001,PCI_DEVICE_ID_SIIG_1S_10x_850 = 0x1002,PCI_DEVICE_ID_SIIG_1S1P_10x_550 = 0x1010,PCI_DEVICE_ID_SIIG_1S1P_10x_650 = 0x1011,PCI_DEVICE_ID_SIIG_1S1P_10x_850 = 0x1012,PCI_DEVICE_ID_SIIG_1P_10x = 0x1020,PCI_DEVICE_ID_SIIG_2P_10x = 0x1021,PCI_DEVICE_ID_SIIG_2S_10x_550 = 0x1030,PCI_DEVICE_ID_SIIG_2S_10x_650 = 0x1031,PCI_DEVICE_ID_SIIG_2S_10x_850 = 0x1032,PCI_DEVICE_ID_SIIG_2S1P_10x_550 = 0x1034,PCI_DEVICE_ID_SIIG_2S1P_10x_650 = 0x1035,PCI_DEVICE_ID_SIIG_2S1P_10x_850 = 0x1036,PCI_DEVICE_ID_SIIG_4S_10x_550 = 0x1050,PCI_DEVICE_ID_SIIG_4S_10x_650 = 0x1051,PCI_DEVICE_ID_SIIG_4S_10x_850 = 0x1052,PCI_DEVICE_ID_SIIG_1S_20x_550 = 0x2000,PCI_DEVICE_ID_SIIG_1S_20x_650 = 0x2001,PCI_DEVICE_ID_SIIG_1S_20x_850 = 0x2002,PCI_DEVICE_ID_SIIG_1P_20x = 0x2020,PCI_DEVICE_ID_SIIG_2P_20x = 0x2021,PCI_DEVICE_ID_SIIG_2S_20x_550 = 0x2030,PCI_DEVICE_ID_SIIG_2S_20x_650 = 0x2031,PCI_DEVICE_ID_SIIG_2S_20x_850 = 0x2032,PCI_DEVICE_ID_SIIG_2P1S_20x_550 = 0x2040,PCI_DEVICE_ID_SIIG_2P1S_20x_650 = 0x2041,PCI_DEVICE_ID_SIIG_2P1S_20x_850 = 0x2042,PCI_DEVICE_ID_SIIG_1S1P_20x_550 = 0x2010,PCI_DEVICE_ID_SIIG_1S1P_20x_650 = 0x2011,PCI_DEVICE_ID_SIIG_1S1P_20x_850 = 0x2012,PCI_DEVICE_ID_SIIG_4S_20x_550 = 0x2050,PCI_DEVICE_ID_SIIG_4S_20x_650 = 0x2051,PCI_DEVICE_ID_SIIG_4S_20x_850 = 0x2052,PCI_DEVICE_ID_SIIG_2S1P_20x_550 = 0x2060,PCI_DEVICE_ID_SIIG_2S1P_20x_650 = 0x2061,PCI_DEVICE_ID_SIIG_2S1P_20x_850 = 0x2062,PCI_DEVICE_ID_SIIG_8S_20x_550 = 0x2080,PCI_DEVICE_ID_SIIG_8S_20x_650 = 0x2081,PCI_DEVICE_ID_SIIG_8S_20x_850 = 0x2082,PCI_SUBDEVICE_ID_SIIG_QUARTET_SERIAL = 0x2050,PCI_VENDOR_ID_RADISYS = 0x1331,PCI_VENDOR_ID_DOMEX = 0x134A,PCI_DEVICE_ID_DOMEX_DMX3191D = 0x1,PCI_VENDOR_ID_INTASHIELD = 0x135A,PCI_DEVICE_ID_INTASHIELD_IS200 = 0xD80,PCI_VENDOR_ID_QUATECH = 0x135C,PCI_DEVICE_ID_QUATECH_QSC100 = 0x10,PCI_DEVICE_ID_QUATECH_DSC100 = 0x20,PCI_DEVICE_ID_QUATECH_ESC100D = 0x50,PCI_DEVICE_ID_QUATECH_ESC100M = 0x60,PCI_VENDOR_ID_SEALEVEL = 0x135E,PCI_DEVICE_ID_SEALEVEL_U530 = 0x7101,PCI_DEVICE_ID_SEALEVEL_UCOMM2 = 0x7201,PCI_DEVICE_ID_SEALEVEL_UCOMM422 = 0x7402,PCI_DEVICE_ID_SEALEVEL_UCOMM232 = 0x7202,PCI_DEVICE_ID_SEALEVEL_COMM4 = 0x7401,PCI_DEVICE_ID_SEALEVEL_COMM8 = 0x7801,PCI_DEVICE_ID_SEALEVEL_UCOMM8 = 0x7804,PCI_VENDOR_ID_HYPERCOPE = 0x1365,PCI_DEVICE_ID_HYPERCOPE_PLX = 0x9050,PCI_SUBDEVICE_ID_HYPERCOPE_OLD_ERGO = 0x104,PCI_SUBDEVICE_ID_HYPERCOPE_ERGO = 0x106,PCI_SUBDEVICE_ID_HYPERCOPE_METRO = 0x107,PCI_SUBDEVICE_ID_HYPERCOPE_CHAMP2 = 0x108,PCI_VENDOR_ID_KAWASAKI = 0x136B,PCI_DEVICE_ID_MCHIP_KL5A72002 = 0xFF01,PCI_VENDOR_ID_CNET = 0x1371,PCI_DEVICE_ID_CNET_GIGACARD = 0x434E,PCI_VENDOR_ID_LMC = 0x1376,PCI_DEVICE_ID_LMC_HSSI = 0x3,PCI_DEVICE_ID_LMC_DS3 = 0x4,PCI_DEVICE_ID_LMC_SSI = 0x5,PCI_DEVICE_ID_LMC_T1 = 0x6,PCI_VENDOR_ID_NETGEAR = 0x1385,PCI_DEVICE_ID_NETGEAR_GA620 = 0x620A,PCI_VENDOR_ID_APPLICOM = 0x1389,PCI_DEVICE_ID_APPLICOM_PCIGENERIC = 0x1,PCI_DEVICE_ID_APPLICOM_PCI2000IBS_CAN = 0x2,PCI_DEVICE_ID_APPLICOM_PCI2000PFB = 0x3,PCI_VENDOR_ID_MOXA = 0x1393,PCI_DEVICE_ID_MOXA_RC7000 = 0x1,PCI_DEVICE_ID_MOXA_CP102 = 0x1020,PCI_DEVICE_ID_MOXA_CP102UL = 0x1021,PCI_DEVICE_ID_MOXA_CP102U = 0x1022,PCI_DEVICE_ID_MOXA_C104 = 0x1040,PCI_DEVICE_ID_MOXA_CP104U = 0x1041,PCI_DEVICE_ID_MOXA_CP104JU = 0x1042,PCI_DEVICE_ID_MOXA_CT114 = 0x1140,PCI_DEVICE_ID_MOXA_CP114 = 0x1141,PCI_DEVICE_ID_MOXA_CP118U = 0x1180,PCI_DEVICE_ID_MOXA_CP132 = 0x1320,PCI_DEVICE_ID_MOXA_CP132U = 0x1321,PCI_DEVICE_ID_MOXA_CP134U = 0x1340,PCI_DEVICE_ID_MOXA_C168 = 0x1680,PCI_DEVICE_ID_MOXA_CP168U = 0x1681,PCI_VENDOR_ID_CCD = 0x1397,PCI_DEVICE_ID_CCD_2BD0 = 0x2BD0,PCI_DEVICE_ID_CCD_B000 = 0xB000,PCI_DEVICE_ID_CCD_B006 = 0xB006,PCI_DEVICE_ID_CCD_B007 = 0xB007,PCI_DEVICE_ID_CCD_B008 = 0xB008,PCI_DEVICE_ID_CCD_B009 = 0xB009,PCI_DEVICE_ID_CCD_B00A = 0xB00A,PCI_DEVICE_ID_CCD_B00B = 0xB00B,PCI_DEVICE_ID_CCD_B00C = 0xB00C,PCI_DEVICE_ID_CCD_B100 = 0xB100,PCI_DEVICE_ID_CCD_B700 = 0xB700,PCI_DEVICE_ID_CCD_B701 = 0xB701,PCI_VENDOR_ID_EXAR = 0x13A8,PCI_DEVICE_ID_EXAR_XR17C152 = 0x152,PCI_DEVICE_ID_EXAR_XR17C154 = 0x154,PCI_DEVICE_ID_EXAR_XR17C158 = 0x158,PCI_VENDOR_ID_MICROGATE = 0x13C0,PCI_DEVICE_ID_MICROGATE_USC = 0x10,PCI_DEVICE_ID_MICROGATE_SCA = 0x30,PCI_VENDOR_ID_3WARE = 0x13C1,PCI_DEVICE_ID_3WARE_1000 = 0x1000,PCI_DEVICE_ID_3WARE_7000 = 0x1001,PCI_DEVICE_ID_3WARE_9000 = 0x1002,PCI_VENDOR_ID_IOMEGA = 0x13CA,PCI_DEVICE_ID_IOMEGA_BUZ = 0x4231,PCI_VENDOR_ID_ABOCOM = 0x13D1,PCI_DEVICE_ID_ABOCOM_2BD1 = 0x2BD1,PCI_VENDOR_ID_CMEDIA = 0x13F6,PCI_DEVICE_ID_CMEDIA_CM8338A = 0x100,PCI_DEVICE_ID_CMEDIA_CM8338B = 0x101,PCI_DEVICE_ID_CMEDIA_CM8738 = 0x111,PCI_DEVICE_ID_CMEDIA_CM8738B = 0x112,PCI_VENDOR_ID_LAVA = 0x1407,PCI_DEVICE_ID_LAVA_DSERIAL = 0x100,PCI_DEVICE_ID_LAVA_QUATRO_A = 0x101,PCI_DEVICE_ID_LAVA_QUATRO_B = 0x102,PCI_DEVICE_ID_LAVA_OCTO_A = 0x180,PCI_DEVICE_ID_LAVA_OCTO_B = 0x181,PCI_DEVICE_ID_LAVA_PORT_PLUS = 0x200,PCI_DEVICE_ID_LAVA_QUAD_A = 0x201,PCI_DEVICE_ID_LAVA_QUAD_B = 0x202,PCI_DEVICE_ID_LAVA_SSERIAL = 0x500,PCI_DEVICE_ID_LAVA_PORT_650 = 0x600,PCI_DEVICE_ID_LAVA_PARALLEL = 0x8000,PCI_DEVICE_ID_LAVA_DUAL_PAR_A = 0x8002,PCI_DEVICE_ID_LAVA_DUAL_PAR_B = 0x8003,PCI_DEVICE_ID_LAVA_BOCA_IOPPAR = 0x8800,PCI_VENDOR_ID_TIMEDIA = 0x1409,PCI_DEVICE_ID_TIMEDIA_1889 = 0x7168,PCI_VENDOR_ID_ICE = 0x1412,PCI_DEVICE_ID_ICE_1712 = 0x1712,PCI_DEVICE_ID_VT1724 = 0x1724,PCI_VENDOR_ID_OXSEMI = 0x1415,PCI_DEVICE_ID_OXSEMI_12PCI840 = 0x8403,PCI_DEVICE_ID_OXSEMI_16PCI954 = 0x9501,PCI_DEVICE_ID_OXSEMI_16PCI95N = 0x9511,PCI_DEVICE_ID_OXSEMI_16PCI954PP = 0x9513,PCI_DEVICE_ID_OXSEMI_16PCI952 = 0x9521,PCI_VENDOR_ID_SAMSUNG = 0x144D,PCI_VENDOR_ID_MYRICOM = 0x14C1,PCI_VENDOR_ID_TITAN = 0x14D2,PCI_DEVICE_ID_TITAN_010L = 0x8001,PCI_DEVICE_ID_TITAN_100L = 0x8010,PCI_DEVICE_ID_TITAN_110L = 0x8011,PCI_DEVICE_ID_TITAN_200L = 0x8020,PCI_DEVICE_ID_TITAN_210L = 0x8021,PCI_DEVICE_ID_TITAN_400L = 0x8040,PCI_DEVICE_ID_TITAN_800L = 0x8080,PCI_DEVICE_ID_TITAN_100 = 0xA001,PCI_DEVICE_ID_TITAN_200 = 0xA005,PCI_DEVICE_ID_TITAN_400 = 0xA003,PCI_DEVICE_ID_TITAN_800B = 0xA004,PCI_VENDOR_ID_PANACOM = 0x14D4,PCI_DEVICE_ID_PANACOM_QUADMODEM = 0x400,PCI_DEVICE_ID_PANACOM_DUALMODEM = 0x402,PCI_VENDOR_ID_AFAVLAB = 0x14DB,PCI_DEVICE_ID_AFAVLAB_P028 = 0x2180,PCI_DEVICE_ID_AFAVLAB_P030 = 0x2182,PCI_SUBDEVICE_ID_AFAVLAB_P061 = 0x2150,PCI_VENDOR_ID_BROADCOM = 0x14E4,PCI_DEVICE_ID_TIGON3_5752 = 0x1600,PCI_DEVICE_ID_TIGON3_5752M = 0x1601,PCI_DEVICE_ID_TIGON3_5700 = 0x1644,PCI_DEVICE_ID_TIGON3_5701 = 0x1645,PCI_DEVICE_ID_TIGON3_5702 = 0x1646,PCI_DEVICE_ID_TIGON3_5703 = 0x1647,PCI_DEVICE_ID_TIGON3_5704 = 0x1648,PCI_DEVICE_ID_TIGON3_5704S_2 = 0x1649,PCI_DEVICE_ID_NX2_5706 = 0x164A,PCI_DEVICE_ID_NX2_5708 = 0x164C,PCI_DEVICE_ID_TIGON3_5702FE = 0x164D,PCI_DEVICE_ID_TIGON3_5705 = 0x1653,PCI_DEVICE_ID_TIGON3_5705_2 = 0x1654,PCI_DEVICE_ID_TIGON3_5720 = 0x1658,PCI_DEVICE_ID_TIGON3_5721 = 0x1659,PCI_DEVICE_ID_TIGON3_5705M = 0x165D,PCI_DEVICE_ID_TIGON3_5705M_2 = 0x165E,PCI_DEVICE_ID_TIGON3_5714 = 0x1668,PCI_DEVICE_ID_TIGON3_5714S = 0x1669,PCI_DEVICE_ID_TIGON3_5780 = 0x166A,PCI_DEVICE_ID_TIGON3_5780S = 0x166B,PCI_DEVICE_ID_TIGON3_5705F = 0x166E,PCI_DEVICE_ID_TIGON3_5754M = 0x1672,PCI_DEVICE_ID_TIGON3_5755M = 0x1673,PCI_DEVICE_ID_TIGON3_5750 = 0x1676,PCI_DEVICE_ID_TIGON3_5751 = 0x1677,PCI_DEVICE_ID_TIGON3_5715 = 0x1678,PCI_DEVICE_ID_TIGON3_5715S = 0x1679,PCI_DEVICE_ID_TIGON3_5754 = 0x167A,PCI_DEVICE_ID_TIGON3_5755 = 0x167B,PCI_DEVICE_ID_TIGON3_5750M = 0x167C,PCI_DEVICE_ID_TIGON3_5751M = 0x167D,PCI_DEVICE_ID_TIGON3_5751F = 0x167E,PCI_DEVICE_ID_TIGON3_5787M = 0x1693,PCI_DEVICE_ID_TIGON3_5782 = 0x1696,PCI_DEVICE_ID_TIGON3_5786 = 0x169A,PCI_DEVICE_ID_TIGON3_5787 = 0x169B,PCI_DEVICE_ID_TIGON3_5788 = 0x169C,PCI_DEVICE_ID_TIGON3_5789 = 0x169D,PCI_DEVICE_ID_TIGON3_5702X = 0x16A6,PCI_DEVICE_ID_TIGON3_5703X = 0x16A7,PCI_DEVICE_ID_TIGON3_5704S = 0x16A8,PCI_DEVICE_ID_NX2_5706S = 0x16AA,PCI_DEVICE_ID_NX2_5708S = 0x16AC,PCI_DEVICE_ID_TIGON3_5702A3 = 0x16C6,PCI_DEVICE_ID_TIGON3_5703A3 = 0x16C7,PCI_DEVICE_ID_TIGON3_5781 = 0x16DD,PCI_DEVICE_ID_TIGON3_5753 = 0x16F7,PCI_DEVICE_ID_TIGON3_5753M = 0x16FD,PCI_DEVICE_ID_TIGON3_5753F = 0x16FE,PCI_DEVICE_ID_TIGON3_5901 = 0x170D,PCI_DEVICE_ID_BCM4401B1 = 0x170C,PCI_DEVICE_ID_TIGON3_5901_2 = 0x170E,PCI_DEVICE_ID_BCM4401 = 0x4401,PCI_DEVICE_ID_BCM4401B0 = 0x4402,PCI_VENDOR_ID_TOPIC = 0x151F,PCI_DEVICE_ID_TOPIC_TP560 = 0x0,PCI_VENDOR_ID_ENE = 0x1524,PCI_DEVICE_ID_ENE_1211 = 0x1211,PCI_DEVICE_ID_ENE_1225 = 0x1225,PCI_DEVICE_ID_ENE_1410 = 0x1410,PCI_DEVICE_ID_ENE_710 = 0x1411,PCI_DEVICE_ID_ENE_712 = 0x1412,PCI_DEVICE_ID_ENE_1420 = 0x1420,PCI_DEVICE_ID_ENE_720 = 0x1421,PCI_DEVICE_ID_ENE_722 = 0x1422,PCI_VENDOR_ID_CHELSIO = 0x1425,PCI_VENDOR_ID_SYBA = 0x1592,PCI_DEVICE_ID_SYBA_2P_EPP = 0x782,PCI_DEVICE_ID_SYBA_1P_ECP = 0x783,PCI_VENDOR_ID_MORETON = 0x15AA,PCI_DEVICE_ID_RASTEL_2PORT = 0x2000,PCI_VENDOR_ID_ZOLTRIX = 0x15B0,PCI_DEVICE_ID_ZOLTRIX_2BD0 = 0x2BD0,PCI_VENDOR_ID_MELLANOX = 0x15B3,PCI_DEVICE_ID_MELLANOX_TAVOR = 0x5A44,PCI_DEVICE_ID_MELLANOX_TAVOR_BRIDGE = 0x5A46,PCI_DEVICE_ID_MELLANOX_ARBEL_COMPAT = 0x6278,PCI_DEVICE_ID_MELLANOX_ARBEL = 0x6282,PCI_DEVICE_ID_MELLANOX_SINAI_OLD = 0x5E8C,PCI_DEVICE_ID_MELLANOX_SINAI = 0x6274,PCI_VENDOR_ID_PDC = 0x15E9,PCI_VENDOR_ID_FARSITE = 0x1619,PCI_DEVICE_ID_FARSITE_T2P = 0x400,PCI_DEVICE_ID_FARSITE_T4P = 0x440,PCI_DEVICE_ID_FARSITE_T1U = 0x610,PCI_DEVICE_ID_FARSITE_T2U = 0x620,PCI_DEVICE_ID_FARSITE_T4U = 0x640,PCI_DEVICE_ID_FARSITE_TE1 = 0x1610,PCI_DEVICE_ID_FARSITE_TE1C = 0x1612,PCI_VENDOR_ID_SIBYTE = 0x166D,PCI_DEVICE_ID_BCM1250_HT = 0x2,PCI_VENDOR_ID_NETCELL = 0x169C,PCI_DEVICE_ID_REVOLUTION = 0x44,PCI_VENDOR_ID_VITESSE = 0x1725,PCI_DEVICE_ID_VITESSE_VSC7174 = 0x7174,PCI_VENDOR_ID_LINKSYS = 0x1737,PCI_DEVICE_ID_LINKSYS_EG1064 = 0x1064,PCI_VENDOR_ID_ALTIMA = 0x173B,PCI_DEVICE_ID_ALTIMA_AC1000 = 0x3E8,PCI_DEVICE_ID_ALTIMA_AC1001 = 0x3E9,PCI_DEVICE_ID_ALTIMA_AC9100 = 0x3EA,PCI_DEVICE_ID_ALTIMA_AC1003 = 0x3EB,PCI_VENDOR_ID_S2IO = 0x17D5,PCI_DEVICE_ID_S2IO_WIN = 0x5731,PCI_DEVICE_ID_S2IO_UNI = 0x5831,PCI_DEVICE_ID_HERC_WIN = 0x5732,PCI_DEVICE_ID_HERC_UNI = 0x5832,PCI_VENDOR_ID_SITECOM = 0x182D,PCI_DEVICE_ID_SITECOM_DC105V2 = 0x3069,PCI_VENDOR_ID_TOPSPIN = 0x1867,PCI_VENDOR_ID_TDI = 0x192E,PCI_DEVICE_ID_TDI_EHCI = 0x101,PCI_VENDOR_ID_JMICRON = 0x197B,PCI_DEVICE_ID_JMICRON_JMB360 = 0x2360,PCI_DEVICE_ID_JMICRON_JMB361 = 0x2361,PCI_DEVICE_ID_JMICRON_JMB363 = 0x2363,PCI_DEVICE_ID_JMICRON_JMB365 = 0x2365,PCI_DEVICE_ID_JMICRON_JMB366 = 0x2366,PCI_DEVICE_ID_JMICRON_JMB368 = 0x2368,PCI_VENDOR_ID_TEKRAM = 0x1DE1,PCI_DEVICE_ID_TEKRAM_DC290 = 0xDC29,PCI_VENDOR_ID_HINT = 0x3388,PCI_DEVICE_ID_HINT_VXPROII_IDE = 0x8013,PCI_VENDOR_ID_3DLABS = 0x3D3D,PCI_DEVICE_ID_3DLABS_PERMEDIA2 = 0x7,PCI_DEVICE_ID_3DLABS_PERMEDIA2V = 0x9,PCI_VENDOR_ID_AKS = 0x416C,PCI_DEVICE_ID_AKS_ALADDINCARD = 0x100,PCI_VENDOR_ID_S3 = 0x5333,PCI_DEVICE_ID_S3_TRIO = 0x8811,PCI_DEVICE_ID_S3_868 = 0x8880,PCI_DEVICE_ID_S3_968 = 0x88F0,PCI_DEVICE_ID_S3_SAVAGE4 = 0x8A25,PCI_DEVICE_ID_S3_PROSAVAGE8 = 0x8D04,PCI_DEVICE_ID_S3_SONICVIBES = 0xCA00,PCI_VENDOR_ID_DUNORD = 0x5544,PCI_DEVICE_ID_DUNORD_I3000 = 0x1,PCI_VENDOR_ID_DCI = 0x6666,PCI_DEVICE_ID_DCI_PCCOM4 = 0x1,PCI_DEVICE_ID_DCI_PCCOM8 = 0x2,PCI_DEVICE_ID_DCI_PCCOM2 = 0x4,PCI_VENDOR_ID_INTEL = 0x8086,PCI_DEVICE_ID_INTEL_EESSC = 0x8,PCI_DEVICE_ID_INTEL_PXHD_0 = 0x320,PCI_DEVICE_ID_INTEL_PXHD_1 = 0x321,PCI_DEVICE_ID_INTEL_PXH_0 = 0x329,PCI_DEVICE_ID_INTEL_PXH_1 = 0x32A,PCI_DEVICE_ID_INTEL_PXHV = 0x32C,PCI_DEVICE_ID_INTEL_82375 = 0x482,PCI_DEVICE_ID_INTEL_82424 = 0x483,PCI_DEVICE_ID_INTEL_82378 = 0x484,PCI_DEVICE_ID_INTEL_I960 = 0x960,PCI_DEVICE_ID_INTEL_I960RM = 0x962,PCI_DEVICE_ID_INTEL_82815_MC = 0x1130,PCI_DEVICE_ID_INTEL_82815_CGC = 0x1132,PCI_DEVICE_ID_INTEL_82092AA_0 = 0x1221,PCI_DEVICE_ID_INTEL_7505_0 = 0x2550,PCI_DEVICE_ID_INTEL_7205_0 = 0x255D,PCI_DEVICE_ID_INTEL_82437 = 0x122D,PCI_DEVICE_ID_INTEL_82371FB_0 = 0x122E,PCI_DEVICE_ID_INTEL_82371FB_1 = 0x1230,PCI_DEVICE_ID_INTEL_82371MX = 0x1234,PCI_DEVICE_ID_INTEL_82441 = 0x1237,PCI_DEVICE_ID_INTEL_82380FB = 0x124B,PCI_DEVICE_ID_INTEL_82439 = 0x1250,PCI_DEVICE_ID_INTEL_80960_RP = 0x1960,PCI_DEVICE_ID_INTEL_82840_HB = 0x1A21,PCI_DEVICE_ID_INTEL_82845_HB = 0x1A30,PCI_DEVICE_ID_INTEL_IOAT = 0x1A38,PCI_DEVICE_ID_INTEL_82801AA_0 = 0x2410,PCI_DEVICE_ID_INTEL_82801AA_1 = 0x2411,PCI_DEVICE_ID_INTEL_82801AA_3 = 0x2413,PCI_DEVICE_ID_INTEL_82801AA_5 = 0x2415,PCI_DEVICE_ID_INTEL_82801AA_6 = 0x2416,PCI_DEVICE_ID_INTEL_82801AA_8 = 0x2418,PCI_DEVICE_ID_INTEL_82801AB_0 = 0x2420,PCI_DEVICE_ID_INTEL_82801AB_1 = 0x2421,PCI_DEVICE_ID_INTEL_82801AB_3 = 0x2423,PCI_DEVICE_ID_INTEL_82801AB_5 = 0x2425,PCI_DEVICE_ID_INTEL_82801AB_6 = 0x2426,PCI_DEVICE_ID_INTEL_82801AB_8 = 0x2428,PCI_DEVICE_ID_INTEL_82801BA_0 = 0x2440,PCI_DEVICE_ID_INTEL_82801BA_2 = 0x2443,PCI_DEVICE_ID_INTEL_82801BA_4 = 0x2445,PCI_DEVICE_ID_INTEL_82801BA_6 = 0x2448,PCI_DEVICE_ID_INTEL_82801BA_8 = 0x244A,PCI_DEVICE_ID_INTEL_82801BA_9 = 0x244B,PCI_DEVICE_ID_INTEL_82801BA_10 = 0x244C,PCI_DEVICE_ID_INTEL_82801BA_11 = 0x244E,PCI_DEVICE_ID_INTEL_82801E_0 = 0x2450,PCI_DEVICE_ID_INTEL_82801E_11 = 0x245B,PCI_DEVICE_ID_INTEL_82801CA_0 = 0x2480,PCI_DEVICE_ID_INTEL_82801CA_3 = 0x2483,PCI_DEVICE_ID_INTEL_82801CA_5 = 0x2485,PCI_DEVICE_ID_INTEL_82801CA_6 = 0x2486,PCI_DEVICE_ID_INTEL_82801CA_10 = 0x248A,PCI_DEVICE_ID_INTEL_82801CA_11 = 0x248B,PCI_DEVICE_ID_INTEL_82801CA_12 = 0x248C,PCI_DEVICE_ID_INTEL_82801DB_0 = 0x24C0,PCI_DEVICE_ID_INTEL_82801DB_1 = 0x24C1,PCI_DEVICE_ID_INTEL_82801DB_3 = 0x24C3,PCI_DEVICE_ID_INTEL_82801DB_5 = 0x24C5,PCI_DEVICE_ID_INTEL_82801DB_6 = 0x24C6,PCI_DEVICE_ID_INTEL_82801DB_9 = 0x24C9,PCI_DEVICE_ID_INTEL_82801DB_10 = 0x24CA,PCI_DEVICE_ID_INTEL_82801DB_11 = 0x24CB,PCI_DEVICE_ID_INTEL_82801DB_12 = 0x24CC,PCI_DEVICE_ID_INTEL_82801EB_0 = 0x24D0,PCI_DEVICE_ID_INTEL_82801EB_1 = 0x24D1,PCI_DEVICE_ID_INTEL_82801EB_3 = 0x24D3,PCI_DEVICE_ID_INTEL_82801EB_5 = 0x24D5,PCI_DEVICE_ID_INTEL_82801EB_6 = 0x24D6,PCI_DEVICE_ID_INTEL_82801EB_11 = 0x24DB,PCI_DEVICE_ID_INTEL_82801EB_13 = 0x24DD,PCI_DEVICE_ID_INTEL_ESB_1 = 0x25A1,PCI_DEVICE_ID_INTEL_ESB_2 = 0x25A2,PCI_DEVICE_ID_INTEL_ESB_4 = 0x25A4,PCI_DEVICE_ID_INTEL_ESB_5 = 0x25A6,PCI_DEVICE_ID_INTEL_ESB_9 = 0x25AB,PCI_DEVICE_ID_INTEL_82820_HB = 0x2500,PCI_DEVICE_ID_INTEL_82820_UP_HB = 0x2501,PCI_DEVICE_ID_INTEL_82850_HB = 0x2530,PCI_DEVICE_ID_INTEL_82860_HB = 0x2531,PCI_DEVICE_ID_INTEL_E7501_MCH = 0x254C,PCI_DEVICE_ID_INTEL_82845G_HB = 0x2560,PCI_DEVICE_ID_INTEL_82845G_IG = 0x2562,PCI_DEVICE_ID_INTEL_82865_HB = 0x2570,PCI_DEVICE_ID_INTEL_82865_IG = 0x2572,PCI_DEVICE_ID_INTEL_82875_HB = 0x2578,PCI_DEVICE_ID_INTEL_82915G_HB = 0x2580,PCI_DEVICE_ID_INTEL_82915G_IG = 0x2582,PCI_DEVICE_ID_INTEL_82915GM_HB = 0x2590,PCI_DEVICE_ID_INTEL_82915GM_IG = 0x2592,PCI_DEVICE_ID_INTEL_82945G_HB = 0x2770,PCI_DEVICE_ID_INTEL_82945G_IG = 0x2772,PCI_DEVICE_ID_INTEL_82945GM_HB = 0x27A0,PCI_DEVICE_ID_INTEL_82945GM_IG = 0x27A2,PCI_DEVICE_ID_INTEL_ICH6_0 = 0x2640,PCI_DEVICE_ID_INTEL_ICH6_1 = 0x2641,PCI_DEVICE_ID_INTEL_ICH6_2 = 0x2642,PCI_DEVICE_ID_INTEL_ICH6_16 = 0x266A,PCI_DEVICE_ID_INTEL_ICH6_17 = 0x266D,PCI_DEVICE_ID_INTEL_ICH6_18 = 0x266E,PCI_DEVICE_ID_INTEL_ICH6_19 = 0x266F,PCI_DEVICE_ID_INTEL_ESB2_0 = 0x2670,PCI_DEVICE_ID_INTEL_ESB2_14 = 0x2698,PCI_DEVICE_ID_INTEL_ESB2_17 = 0x269B,PCI_DEVICE_ID_INTEL_ESB2_18 = 0x269E,PCI_DEVICE_ID_INTEL_ICH7_0 = 0x27B8,PCI_DEVICE_ID_INTEL_ICH7_1 = 0x27B9,PCI_DEVICE_ID_INTEL_ICH7_30 = 0x27B0,PCI_DEVICE_ID_INTEL_ICH7_31 = 0x27BD,PCI_DEVICE_ID_INTEL_ICH7_17 = 0x27DA,PCI_DEVICE_ID_INTEL_ICH7_19 = 0x27DD,PCI_DEVICE_ID_INTEL_ICH7_20 = 0x27DE,PCI_DEVICE_ID_INTEL_ICH7_21 = 0x27DF,PCI_DEVICE_ID_INTEL_ICH8_0 = 0x2810,PCI_DEVICE_ID_INTEL_ICH8_1 = 0x2811,PCI_DEVICE_ID_INTEL_ICH8_2 = 0x2812,PCI_DEVICE_ID_INTEL_ICH8_3 = 0x2814,PCI_DEVICE_ID_INTEL_ICH8_4 = 0x2815,PCI_DEVICE_ID_INTEL_ICH8_5 = 0x283E,PCI_DEVICE_ID_INTEL_ICH8_6 = 0x2850,PCI_DEVICE_ID_INTEL_82855PM_HB = 0x3340,PCI_DEVICE_ID_INTEL_82830_HB = 0x3575,PCI_DEVICE_ID_INTEL_82830_CGC = 0x3577,PCI_DEVICE_ID_INTEL_82855GM_HB = 0x3580,PCI_DEVICE_ID_INTEL_82855GM_IG = 0x3582,PCI_DEVICE_ID_INTEL_E7520_MCH = 0x3590,PCI_DEVICE_ID_INTEL_E7320_MCH = 0x3592,PCI_DEVICE_ID_INTEL_MCH_PA = 0x3595,PCI_DEVICE_ID_INTEL_MCH_PA1 = 0x3596,PCI_DEVICE_ID_INTEL_MCH_PB = 0x3597,PCI_DEVICE_ID_INTEL_MCH_PB1 = 0x3598,PCI_DEVICE_ID_INTEL_MCH_PC = 0x3599,PCI_DEVICE_ID_INTEL_MCH_PC1 = 0x359A,PCI_DEVICE_ID_INTEL_E7525_MCH = 0x359E,PCI_DEVICE_ID_INTEL_82371SB_0 = 0x7000,PCI_DEVICE_ID_INTEL_82371SB_1 = 0x7010,PCI_DEVICE_ID_INTEL_82371SB_2 = 0x7020,PCI_DEVICE_ID_INTEL_82437VX = 0x7030,PCI_DEVICE_ID_INTEL_82439TX = 0x7100,PCI_DEVICE_ID_INTEL_82371AB_0 = 0x7110,PCI_DEVICE_ID_INTEL_82371AB = 0x7111,PCI_DEVICE_ID_INTEL_82371AB_2 = 0x7112,PCI_DEVICE_ID_INTEL_82371AB_3 = 0x7113,PCI_DEVICE_ID_INTEL_82810_MC1 = 0x7120,PCI_DEVICE_ID_INTEL_82810_IG1 = 0x7121,PCI_DEVICE_ID_INTEL_82810_MC3 = 0x7122,PCI_DEVICE_ID_INTEL_82810_IG3 = 0x7123,PCI_DEVICE_ID_INTEL_82810E_MC = 0x7124,PCI_DEVICE_ID_INTEL_82810E_IG = 0x7125,PCI_DEVICE_ID_INTEL_82443LX_0 = 0x7180,PCI_DEVICE_ID_INTEL_82443LX_1 = 0x7181,PCI_DEVICE_ID_INTEL_82443BX_0 = 0x7190,PCI_DEVICE_ID_INTEL_82443BX_1 = 0x7191,PCI_DEVICE_ID_INTEL_82443BX_2 = 0x7192,PCI_DEVICE_ID_INTEL_440MX = 0x7195,PCI_DEVICE_ID_INTEL_440MX_6 = 0x7196,PCI_DEVICE_ID_INTEL_82443MX_0 = 0x7198,PCI_DEVICE_ID_INTEL_82443MX_1 = 0x7199,PCI_DEVICE_ID_INTEL_82443MX_3 = 0x719B,PCI_DEVICE_ID_INTEL_82443GX_0 = 0x71A0,PCI_DEVICE_ID_INTEL_82443GX_2 = 0x71A2,PCI_DEVICE_ID_INTEL_82372FB_1 = 0x7601,PCI_DEVICE_ID_INTEL_82454GX = 0x84C4,PCI_DEVICE_ID_INTEL_82450GX = 0x84C5,PCI_DEVICE_ID_INTEL_82451NX = 0x84CA,PCI_DEVICE_ID_INTEL_82454NX = 0x84CB,PCI_DEVICE_ID_INTEL_84460GX = 0x84EA,PCI_DEVICE_ID_INTEL_IXP4XX = 0x8500,PCI_DEVICE_ID_INTEL_IXP2800 = 0x9004,PCI_DEVICE_ID_INTEL_S21152BB = 0xB152,PCI_VENDOR_ID_SCALEMP = 0x8686,PCI_DEVICE_ID_SCALEMP_VSMP_CTL = 0x1010,PCI_VENDOR_ID_COMPUTONE = 0x8E0E,PCI_DEVICE_ID_COMPUTONE_IP2EX = 0x291,PCI_DEVICE_ID_COMPUTONE_PG = 0x302,PCI_SUBVENDOR_ID_COMPUTONE = 0x8E0E,PCI_SUBDEVICE_ID_COMPUTONE_PG4 = 0x1,PCI_SUBDEVICE_ID_COMPUTONE_PG8 = 0x2,PCI_SUBDEVICE_ID_COMPUTONE_PG6 = 0x3,PCI_VENDOR_ID_KTI = 0x8E2E,PCI_VENDOR_ID_ADAPTEC = 0x9004,PCI_DEVICE_ID_ADAPTEC_7810 = 0x1078,PCI_DEVICE_ID_ADAPTEC_7821 = 0x2178,PCI_DEVICE_ID_ADAPTEC_38602 = 0x3860,PCI_DEVICE_ID_ADAPTEC_7850 = 0x5078,PCI_DEVICE_ID_ADAPTEC_7855 = 0x5578,PCI_DEVICE_ID_ADAPTEC_3860 = 0x6038,PCI_DEVICE_ID_ADAPTEC_1480A = 0x6075,PCI_DEVICE_ID_ADAPTEC_7860 = 0x6078,PCI_DEVICE_ID_ADAPTEC_7861 = 0x6178,PCI_DEVICE_ID_ADAPTEC_7870 = 0x7078,PCI_DEVICE_ID_ADAPTEC_7871 = 0x7178,PCI_DEVICE_ID_ADAPTEC_7872 = 0x7278,PCI_DEVICE_ID_ADAPTEC_7873 = 0x7378,PCI_DEVICE_ID_ADAPTEC_7874 = 0x7478,PCI_DEVICE_ID_ADAPTEC_7895 = 0x7895,PCI_DEVICE_ID_ADAPTEC_7880 = 0x8078,PCI_DEVICE_ID_ADAPTEC_7881 = 0x8178,PCI_DEVICE_ID_ADAPTEC_7882 = 0x8278,PCI_DEVICE_ID_ADAPTEC_7883 = 0x8378,PCI_DEVICE_ID_ADAPTEC_7884 = 0x8478,PCI_DEVICE_ID_ADAPTEC_7885 = 0x8578,PCI_DEVICE_ID_ADAPTEC_7886 = 0x8678,PCI_DEVICE_ID_ADAPTEC_7887 = 0x8778,PCI_DEVICE_ID_ADAPTEC_7888 = 0x8878,PCI_VENDOR_ID_ADAPTEC2 = 0x9005,PCI_DEVICE_ID_ADAPTEC2_2940U2 = 0x10,PCI_DEVICE_ID_ADAPTEC2_2930U2 = 0x11,PCI_DEVICE_ID_ADAPTEC2_7890B = 0x13,PCI_DEVICE_ID_ADAPTEC2_7890 = 0x1F,PCI_DEVICE_ID_ADAPTEC2_3940U2 = 0x50,PCI_DEVICE_ID_ADAPTEC2_3950U2D = 0x51,PCI_DEVICE_ID_ADAPTEC2_7896 = 0x5F,PCI_DEVICE_ID_ADAPTEC2_7892A = 0x80,PCI_DEVICE_ID_ADAPTEC2_7892B = 0x81,PCI_DEVICE_ID_ADAPTEC2_7892D = 0x83,PCI_DEVICE_ID_ADAPTEC2_7892P = 0x8F,PCI_DEVICE_ID_ADAPTEC2_7899A = 0xC0,PCI_DEVICE_ID_ADAPTEC2_7899B = 0xC1,PCI_DEVICE_ID_ADAPTEC2_7899D = 0xC3,PCI_DEVICE_ID_ADAPTEC2_7899P = 0xCF,PCI_DEVICE_ID_ADAPTEC2_OBSIDIAN = 0x500,PCI_DEVICE_ID_ADAPTEC2_SCAMP = 0x503,PCI_VENDOR_ID_HOLTEK = 0x9412,PCI_DEVICE_ID_HOLTEK_6565 = 0x6565,PCI_VENDOR_ID_NETMOS = 0x9710,PCI_DEVICE_ID_NETMOS_9705 = 0x9705,PCI_DEVICE_ID_NETMOS_9715 = 0x9715,PCI_DEVICE_ID_NETMOS_9735 = 0x9735,PCI_DEVICE_ID_NETMOS_9745 = 0x9745,PCI_DEVICE_ID_NETMOS_9755 = 0x9755,PCI_DEVICE_ID_NETMOS_9805 = 0x9805,PCI_DEVICE_ID_NETMOS_9815 = 0x9815,PCI_DEVICE_ID_NETMOS_9835 = 0x9835,PCI_DEVICE_ID_NETMOS_9845 = 0x9845,PCI_DEVICE_ID_NETMOS_9855 = 0x9855,PCI_SUBVENDOR_ID_EXSYS = 0xD84D,PCI_SUBDEVICE_ID_EXSYS_4014 = 0x4014,PCI_SUBDEVICE_ID_EXSYS_4055 = 0x4055,PCI_VENDOR_ID_TIGERJET = 0xE159,PCI_DEVICE_ID_TIGERJET_300 = 0x1,PCI_DEVICE_ID_TIGERJET_100 = 0x2,PCI_VENDOR_ID_TTTECH = 0x357,PCI_DEVICE_ID_TTTECH_MC322 = 0xA,PCI_VENDOR_ID_XILINX_RME = 0xEA60,PCI_DEVICE_ID_RME_DIGI32 = 0x9896,PCI_DEVICE_ID_RME_DIGI32_PRO = 0x9897,PCI_DEVICE_ID_RME_DIGI32_8 = 0x9898,};
enum MACRO_PERMISSION {PERMISSION_DENIED = 4,};
enum MACRO_PERSISTENT {PERSISTENT_RESERVE_IN = 0x5E,PERSISTENT_RESERVE_OUT = 0x5F,};
enum MACRO_PGM_FORMAT {PGM_FORMAT = 20530,RPGM_FORMAT = 20533,};
enum MACRO_POSIX_MADV {POSIX_MADV_NORMAL = 0,POSIX_MADV_RANDOM = 1,POSIX_MADV_SEQUENTIAL = 2,POSIX_MADV_WILLNEED = 3,POSIX_MADV_DONTNEED = 4,};
enum MACRO_PPM_FORMAT {PPM_FORMAT = 20531,RPPM_FORMAT = 20534,};
enum MACRO_PictOpAtop {PictOpAtop = 9,};
enum MACRO_PictOpOver {PictOpOver = 3,PictOpOverReverse = 4,};
enum MACRO_PlaceOnTop {PlaceOnTop = 0,PlaceOnBottom = 1,};
enum MACRO_RELEASE_10 {RELEASE_10 = 0x57,};
enum MACRO_RESERVE_10 {RESERVE_10 = 0x56,};
enum MACRO_RIPVERSION {RIPVERSION = 1,};
enum MACRO_RQUOTAPROC {RQUOTAPROC_GETQUOTA = 1,RQUOTAPROC_GETACTIVEQUOTA = 2,};
enum MACRO_RQUOTAPROG {RQUOTAPROG = 100011,};
enum MACRO_RQUOTAVERS {RQUOTAVERS = 1,};
enum MACRO_RUSERSPROC {RUSERSPROC_NUM = 1,RUSERSPROC_NAMES = 2,RUSERSPROC_ALLNAMES = 3,};
enum MACRO_RUSERSPROG {RUSERSPROG = 100002,};
enum MACRO_RUSERSVERS {RUSERSVERS_IDLE = 2,};
enum MACRO_RepeatNone {RepeatNone = 0,RepeatNormal = 1,RepeatPad = 2,};
enum MACRO_SET_LIMITS {SET_LIMITS = 0x33,};
enum MACRO_SG_LIB_DID {SG_LIB_DID_OK = 0,SG_LIB_DID_NO_CONNECT = 1,SG_LIB_DID_BUS_BUSY = 2,SG_LIB_DID_TIME_OUT = 3,SG_LIB_DID_BAD_TARGET = 4,SG_LIB_DID_ABORT = 5,SG_LIB_DID_PARITY = 6,SG_LIB_DID_ERROR = 7,SG_LIB_DID_RESET = 8,SG_LIB_DID_BAD_INTR = 9,SG_LIB_DID_PASSTHROUGH = 10,SG_LIB_DID_SOFT_ERROR = 11,SG_LIB_DID_IMM_RETRY = 12,SG_LIB_DID_REQUEUE = 13,};
enum MACRO_SHF_PARISC {SHF_PARISC_SHORT = 0x20000000,SHF_PARISC_HUGE = 0x40000000,SHF_PARISC_SBP = 0x80000000,};
enum MACRO_SHN_PARISC {SHN_PARISC_ANSI_COMMON = 0xFF00,SHN_PARISC_HUGE_COMMON = 0xFF01,};
enum MACRO_SHT_PARISC {SHT_PARISC_EXT = 0x70000000,SHT_PARISC_UNWIND = 0x70000001,SHT_PARISC_DOC = 0x70000002,};
enum MACRO_SIOCATMARK {SIOCATMARK = 0x8905,};
enum MACRO_SIOCGIFMAP {SIOCGIFMAP = 0x8970,};
enum MACRO_SIOCGIFMEM {SIOCGIFMEM = 0x891F,};
enum MACRO_SIOCGIFMTU {SIOCGIFMTU = 0x8921,};
enum MACRO_SIOCGIWRTS {SIOCGIWRTS = 0x8B23,};
enum MACRO_SIOCGIWSPY {SIOCGIWSPY = 0x8B11,};
enum MACRO_SIOCGSTAMP {SIOCGSTAMP = 0x8906,};
enum MACRO_SIOCIWLAST {SIOCIWLAST = 35839,};
enum MACRO_SIOCSIFMAP {SIOCSIFMAP = 0x8971,};
enum MACRO_SIOCSIFMEM {SIOCSIFMEM = 0x8920,};
enum MACRO_SIOCSIFMTU {SIOCSIFMTU = 0x8922,};
enum MACRO_SIOCSIWRTS {SIOCSIWRTS = 0x8B22,};
enum MACRO_SIOCSIWSPY {SIOCSIWSPY = 0x8B10,};
enum MACRO_SNDCTL_DSP {SNDCTL_DSP_RESET = 20480,SNDCTL_DSP_SYNC = 20481,SNDCTL_DSP_POST = 20488,};
enum MACRO_SOL_NETROM {SOL_NETROM = 259,};
enum MACRO_SOL_SOCKET {SOL_SOCKET = 1,};
enum MACRO_STRINGSIZE {STRINGSIZE = 1024,};
enum MACRO_STT_PARISC {STT_PARISC_MILLICODE = 13,STT_HP_OPAQUE = 11,STT_HP_STUB = 12,};
enum MACRO_SUBCMDMASK {SUBCMDMASK = 0xFF,};
enum MACRO_SaveSetMap {SaveSetMap = 0,SaveSetUnmap = 1,};
enum MACRO_StaticGray {StaticGray = 0,GrayScale = 1,StaticColor = 2,};
enum MACRO_Successful {Successful = 85,};
enum MACRO_TIMER_RATE {TIMER_RATE = 30,};
enum MACRO_TIOCGWINSZ {TIOCGWINSZ = 0x5413,};
enum MACRO_TIOCMIWAIT {TIOCMIWAIT = 0x545C,};
enum MACRO_TIOCSWINSZ {TIOCSWINSZ = 0x5414,};
enum MACRO_TSPVERSION {TSPVERSION = 1,};
enum MACRO_UCONTEXT_H {_UCONTEXT_H = 1,_SYS_UCONTEXT_H = 1,};
enum MACRO_UINT_FAST8 {UINT_FAST8_MAX = 255,UINT_FAST16_MAX = -1,UINT_FAST32_MAX = -1,UINT_FAST64_MAX = -1,};
enum MACRO_UNISCRNMAP {GIO_UNISCRNMAP = 0x4B69,PIO_UNISCRNMAP = 0x4B6A,};
enum MACRO_USPosition {USPosition = 1,USSize = 2,PPosition = 4,PSize = 8,PMinSize = 16,PMaxSize = 32,PResizeInc = 64,PAspect = 128,PBaseSize = 256,PWinGravity = 512,};
enum MACRO_UT_UNKNOWN {UT_UNKNOWN = 0,};
enum MACRO_WRITE_LONG {WRITE_LONG_2 = 0xEA,};
enum MACRO_WRITE_SAME {WRITE_SAME = 0x41,};
enum MACRO_XCOMPOSITE {XCOMPOSITE_MAJOR = 0,XCOMPOSITE_MINOR = 3,XCOMPOSITE_REVISION = 2,XCOMPOSITE_VERSION = 302,};
enum MACRO_XETrapData {XETrapData = 0,XETrapNumberEvents = 1,};
enum MACRO_XEVI_MAJOR {XEVI_MAJOR_VERSION = 1,XEVI_MINOR_VERSION = 0,};
enum MACRO_XFT_WEIGHT {XFT_WEIGHT_LIGHT = 50,XFT_WEIGHT_MEDIUM = 100,XFT_WEIGHT_DEMIBOLD = 180,XFT_WEIGHT_BOLD = 200,XFT_WEIGHT_BLACK = 210,XFT_SLANT_ROMAN = 0,XFT_SLANT_ITALIC = 100,XFT_SLANT_OBLIQUE = 110,XFT_PROPORTIONAL = 0,XFT_MONO = 100,XFT_CHARCELL = 110,XFT_RGBA_UNKNOWN = 0,XFT_RGBA_RGB = 1,XFT_RGBA_BGR = 2,XFT_RGBA_VRGB = 3,XFT_RGBA_VBGR = 4,XFT_RGBA_NONE = 5,XFT_NMISSING = 256,};
enum MACRO_XIMReverse {XIMReverse = 1,XIMUnderline = 2,XIMHighlight = 4,XIMPrimary = 32,XIMSecondary = 64,XIMTertiary = 128,XIMVisibleToForward = 256,XIMVisibleToBackword = 512,XIMVisibleToCenter = 1024,};
enum MACRO_XML_PUBLIC {XML_PUBLIC_ID_OTA_SETTINGS = 0,};
enum MACRO_XPAPPUTILS {XPAPPUTILS_H = 1,XPRINTUTIL_H = 1,};
enum MACRO_XPFontAttr {XPFontAttr = 7,XPResAttr = 8,};
enum MACRO_XPPageAttr {XPPageAttr = 3,XPPrinterAttr = 4,};
enum MACRO_XTestDELAY {XTestDELAY_DEVICE_ID = 0xF,};
enum MACRO_XTestEVENT {XTestEVENT_COUNT = 2,};
enum MACRO_XTestPRESS {XTestPRESS = 1,XTestRELEASE = 2,XTestSTROKE = 4,};
enum MACRO_XTestSHORT {XTestSHORT_DELAY_TIME = 0xFFFF,};
enum MACRO_XawVersion {XawVersion = 7000002,};
enum MACRO_XctVersion {XctVersion = 1,};
enum MACRO_XdbeCopied {XdbeCopied = 3,};
enum MACRO_XftVersion {XftVersion = 20109,};
enum MACRO_XkbMessage {XkbMessage = 3,};
enum MACRO_XkbNoShape {XkbNoShape = 0xFF,};
enum MACRO_XkbXKMFile {XkbXKMFile = 0,XkbCFile = 1,XkbXKBFile = 2,};
enum MACRO_XpmSuccess {XpmSuccess = 0,XpmOpenFailed = -1,};
enum MACRO_XtIMXEvent {XtIMXEvent = 1,XtIMTimer = 2,XtIMAlternateInput = 4,XtIMSignal = 8,};
enum MACRO_XvBadAlloc {XvBadAlloc = 5,};
enum MACRO_XvGettable {XvGettable = 0x1,XvSettable = 0x2,};
enum MACRO_XvRevision {XvRevision = 2,};
enum MACRO_YPBINDPROC {YPBINDPROC_NULL = 0,YPBINDPROC_DOMAIN = 1,YPBINDPROC_SETDOM = 2,};
enum MACRO_YPBINDPROG {YPBINDPROG = 100007,};
enum MACRO_YPBINDVERS {YPBINDVERS = 2,};
enum MACRO_YPPUSHPROC {YPPUSHPROC_NULL = 0,YPPUSHPROC_XFRRESP = 1,};
enum MACRO__ARPA_INET {_ARPA_INET_H = 1,_ARPA_TELNET_H = 1,};
enum MACRO__ARPA_TFTP {_ARPA_TFTP_H = 1,};
enum MACRO__BITS_TIME {_BITS_TIME_H = 1,};
enum MACRO__NETECONET {_NETECONET_EC_H = 1,};
enum MACRO__NET_ROUTE {_NET_ROUTE_H = 1,};
enum MACRO__POSIX_OPT {_POSIX_OPT_H = 1,_POSIX_JOB_CONTROL = 1,_POSIX_SAVED_IDS = 1,_POSIX_PRIORITY_SCHEDULING = 200112,_POSIX_SYNCHRONIZED_IO = 200112,_POSIX_FSYNC = 200112,_POSIX_MAPPED_FILES = 200112,_POSIX_MEMLOCK = 200112,_POSIX_MEMLOCK_RANGE = 200112,_POSIX_MEMORY_PROTECTION = 200112,_POSIX_CHOWN_RESTRICTED = 1,_POSIX_VDISABLE = 0,_POSIX_NO_TRUNC = 1,};
enum MACRO__PROTOCOLS {_PROTOCOLS_ROUTED_H = 1,};
enum MACRO__SEMAPHORE {_SEMAPHORE_H = 1,};
enum MACRO__STDIO_EXT {_STDIO_EXT_H = 1,_STRINGS_H = 1,_STROPTS_H = 1,_BITS_XTITYPES_H = 1,_BITS_STROPTS_H = 1,};
enum MACRO__SYS_IOCTL {_SYS_IOCTL_H = 1,};
enum MACRO__SYS_MOUNT {_SYS_MOUNT_H = 1,};
enum MACRO__SYS_TIMEB {_SYS_TIMEB_H = 1,_SYS_TIMES_H = 1,_SYS_TIMEX_H = 1,};
enum MACRO__SYS_TYPES {_SYS_TYPES_H = 1,};
enum MACRO__SYS_XATTR {_SYS_XATTR_H = 1,};
enum MACRO__XKBCONFIG {_XKBCONFIG_H_ = 1,};
enum MACRO__XKMFORMAT {_XKMFORMAT_H_ = 1,};
enum MACRO___LIBELF64 {__LIBELF64 = 1,};
enum MACRO___WORDSIZE {__WORDSIZE = 32,};
enum MACRO_____gwchar {____gwchar_t_defined = 1,};
enum MACRO___dontcare {__dontcare__ = -1,};
enum MACRO___timespec {__timespec_defined = 1,};
typedef struct _MenuButtonRec *MenuButtonWidget;
typedef struct _ModToKeysymTable ModToKeysymTable;
typedef struct _MultiSrcClassRec MultiSrcClassRec;
typedef struct _39A4136BB030D7809586100094537552 OverrideShellRec;
typedef struct _PanedConstraintsRec *PanedConstraints;
typedef struct _PanedClassRec *PanedWidgetClass;
typedef struct _PortholeClassRec PortholeClassRec;
typedef struct _QueuedRequestRec QueuedRequestRec;
typedef struct _RectObjClassPart RectObjClassPart;
typedef struct _RepeaterClassRec RepeaterClassRec;
typedef struct _0246488962F6181E546D6EAF3BC67956 RequestWindowRec;
typedef struct _1C5B76C096BE4E4273B6A3EEC40CE50E SelectionPropRec;
typedef struct _50D2B38DA8D5F7F9D092D3B0069535E8 SessionShellPart;
typedef struct _ShellClassRec *ShellWidgetClass;
typedef struct _SimpleMenuRec *SimpleMenuWidget;
typedef struct _SmeLineClassPart SmeLineClassPart;
typedef struct _StripChartRec *StripChartWidget;
typedef struct _TMParseStateTreeRec *TMParseStateTree;
typedef struct _TMSimpleBindDataRec *TMSimpleBindData;
typedef struct _TemplateClassRec TemplateClassRec;
typedef struct _TextSinkClassRec TextSinkClassRec;
typedef struct _TextSrcClassPart TextSrcClassPart;
typedef struct _A6524737EEF8C4DE9F2A62890C064223 TopLevelShellRec;
typedef struct _ViewportClassRec ViewportClassRec;
struct WBXMLAttrEntry_s { char *xmlName; char *xmlValue;unsigned char wbxmlCodePage;unsigned char wbxmlToken;};
enum WBXMLValueType_e {WBXML_VALUE_TOKEN = 0x0,WBXML_VALUE_LITERAL = 0x1,};
typedef struct _EA67C4467E5D392AEC3890F142F1A94F WMShellClassPart;
typedef struct _XConicalGradient XConicalGradient;
typedef struct _21AD2773B4EF3639ECA7EA03A86E1290 XDeviceTimeCoord;
typedef struct _8790A95C9089D47EA8D4BDC2F4BAD9F8 XETrapGetVersRep;
typedef struct _196A900E1F8FC6D65F3C04EA8B9471C8 XF86VidModeGamma;
typedef struct _4351FBF019520AA1BFC0E4306B612802 XFeedbackControl;
typedef struct _XIMHotKeyTrigger XIMHotKeyTrigger;
typedef struct _BFB970BD49ED9B406D7CBF54A76D57DD XKeyboardControl;
enum XML_Content_Type {XML_CTYPE_EMPTY = 0x1,XML_CTYPE_ANY = 0x2,XML_CTYPE_MIXED = 0x3,XML_CTYPE_NAME = 0x4,XML_CTYPE_CHOICE = 0x5,XML_CTYPE_SEQ = 0x6,};
struct XML_ParserStruct;
typedef struct _BCC9C96203DDB6ECC5EFD83EB5D80763 XMapRequestEvent;
typedef struct _68DA40E4D3A1CB1C47D4FE5C47C475EF XPAttributeEvent;
typedef struct _017021331B1CD62A1DE3CFBDC78C43A7 XPDataReadyEvent;
typedef struct _1AFD2E0C6FFD3A342E1E54CFD5D94B7E XScreenSaverInfo;
typedef struct _XValuatorInfo *XValuatorInfoPtr;
typedef struct _5FA790A5D3D6F59615AEC79DB4A09862 XVisibilityEvent;
typedef struct _D8DA3DB8B551D92E16702FBF10C103DD XawTextLineTable;
typedef struct _8A0FC57137FB478736F2B9862ECE0EA6 XawTextPaintList;
typedef struct _1206FECF9ACD3192A71AF1264343EAEE XawTextSelection;
typedef struct _XftGlyphFontSpec XftGlyphFontSpec;
typedef struct _XkbConfigRtrn *XkbConfigRtrnPtr;
typedef struct _XkbConfigRtrn XkbConfigRtrnRec;
typedef struct _XkbDeviceInfo *XkbDeviceInfoPtr;
typedef struct _XkbDeviceInfo XkbDeviceInfoRec;
typedef struct _XkbKTMapEntry *XkbKTMapEntryPtr;
typedef struct _XkbKTMapEntry XkbKTMapEntryRec;
typedef struct _XkbLogoDoodad *XkbLogoDoodadPtr;
typedef struct _XkbLogoDoodad XkbLogoDoodadRec;
typedef struct _XkbMapChanges *XkbMapChangesPtr;
typedef struct _XkbMapChanges XkbMapChangesRec;
typedef struct _XkbMessageAction XkbMessageAction;
typedef struct _XkbOverlayKey *XkbOverlayKeyPtr;
typedef struct _XkbOverlayKey XkbOverlayKeyRec;
typedef struct _XkbOverlayRow *XkbOverlayRowPtr;
typedef struct _XkbOverlayRow XkbOverlayRowRec;
typedef struct _XkbPtrDfltAction XkbPtrDfltAction;
typedef struct _XkbRF_VarDefs *XkbRF_VarDefsPtr;
typedef struct _XkbRF_VarDefs XkbRF_VarDefsRec;
typedef struct _XkbRF_VarDesc *XkbRF_VarDescPtr;
typedef struct _XkbRF_VarDesc XkbRF_VarDescRec;
typedef struct _XkbTextDoodad *XkbTextDoodadPtr;
typedef struct _XkbTextDoodad XkbTextDoodadRec;
typedef struct _F47845C17C3A632D161D2E9D762DE912 XpuColorspaceRec;
typedef struct _2155392EAF78816288DE33777AAC4297 XpuResolutionRec;
typedef struct _CB86ED79A67F464A5E5DD7E35915D8C3 XrmOptionDescRec;
typedef struct _13470DA4B6A7AAE8ACC864F70C5FF73E *XtChangeHookData;
typedef struct _7D1B644A0EEA2B09DD88F0E6B7E788D2 *XtConvertArgList;
typedef struct _9D9F8CC524C7DD4F9704759512315B2D *XtCreateHookData;
typedef struct _FCBFA738B12E671543F3DA36C81F300F *XtPerWidgetInput;
typedef struct _9FED812B80655AE33F3AD93E5626D145 XtWidgetGeometry;
struct _ExifDataPrivate;
struct _XawTextKillRing {struct _XawTextKillRing *next;char *contents;int length;unsigned int refcount;unsigned int format;};
struct _XkbPtrBtnAction {unsigned char type;unsigned char flags;unsigned char count;unsigned char button;};
struct _XvMCMpegControl {unsigned int BVMV_range;unsigned int BHMV_range;unsigned int FVMV_range;unsigned int FHMV_range;unsigned int picture_structure;unsigned int intra_dc_precision;unsigned int picture_coding_type;unsigned int mpeg_coding;unsigned int flags;};
typedef struct _75B48D098FE9EFE9C298E47B5B8F0BEC __GLXpixelHeader;
enum __codecvt_result {__codecvt_ok = 0x0,__codecvt_partial = 0x1,__codecvt_error = 0x2,__codecvt_noconv = 0x3,};
typedef int (*__gconv_init_fct)(struct __gconv_step *);
typedef int __itimer_which_t;
typedef char *__kernel_caddr_t;
typedef int __kernel_clock_t;
typedef int __kernel_daddr_t;
typedef unsigned short __kernel_gid16_t;
typedef unsigned int __kernel_gid32_t;
typedef unsigned short __kernel_nlink_t;
typedef int __kernel_ssize_t;
typedef int __kernel_timer_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned int __kernel_uid32_t;
enum __priority_which {PRIO_PROCESS = 0x0,PRIO_PGRP = 0x1,PRIO_USER = 0x2,};
enum __ptrace_request {PTRACE_TRACEME = 0x0,PTRACE_PEEKTEXT = 0x1,PTRACE_PEEKDATA = 0x2,PTRACE_PEEKUSER = 0x3,PTRACE_POKETEXT = 0x4,PTRACE_POKEDATA = 0x5,PTRACE_POKEUSER = 0x6,PTRACE_CONT = 0x7,PTRACE_KILL = 0x8,PTRACE_SINGLESTEP = 0x9,PTRACE_GETREGS = 0xC,PTRACE_SETREGS = 0xD,PTRACE_GETFPREGS = 0xE,PTRACE_SETFPREGS = 0xF,PTRACE_ATTACH = 0x10,PTRACE_DETACH = 0x11,PTRACE_GETFPXREGS = 0x12,PTRACE_SETFPXREGS = 0x13,PTRACE_SYSCALL = 0x18,PTRACE_SETOPTIONS = 0x4200,PTRACE_GETEVENTMSG = 0x4201,PTRACE_GETSIGINFO = 0x4202,PTRACE_SETSIGINFO = 0x4203,};
typedef struct timezone *__timezone_ptr_t;
enum authdes_namekind {ADN_FULLNAME = 0x0,ADN_NICKNAME = 0x1,};
struct ax25_info_struct {unsigned int n2;unsigned int n2count;unsigned int t1;unsigned int t1timer;unsigned int t2;unsigned int t2timer;unsigned int t3;unsigned int t3timer;unsigned int idle;unsigned int idletimer;unsigned int state;unsigned int rcv_q;unsigned int snd_q;};
enum bfd_architecture {bfd_arch_unknown = 0x0,bfd_arch_obscure = 0x1,bfd_arch_m68k = 0x2,bfd_arch_vax = 0x3,bfd_arch_i960 = 0x4,bfd_arch_or32 = 0x5,bfd_arch_sparc = 0x6,bfd_arch_mips = 0x7,bfd_arch_i386 = 0x8,bfd_arch_we32k = 0x9,bfd_arch_tahoe = 0xA,bfd_arch_i860 = 0xB,bfd_arch_i370 = 0xC,bfd_arch_romp = 0xD,bfd_arch_convex = 0xE,bfd_arch_m88k = 0xF,bfd_arch_m98k = 0x10,bfd_arch_pyramid = 0x11,bfd_arch_h8300 = 0x12,bfd_arch_pdp11 = 0x13,bfd_arch_powerpc = 0x14,bfd_arch_rs6000 = 0x15,bfd_arch_hppa = 0x16,bfd_arch_d10v = 0x17,bfd_arch_d30v = 0x18,bfd_arch_dlx = 0x19,bfd_arch_m68hc11 = 0x1A,bfd_arch_m68hc12 = 0x1B,bfd_arch_z8k = 0x1C,bfd_arch_h8500 = 0x1D,bfd_arch_sh = 0x1E,bfd_arch_alpha = 0x1F,bfd_arch_arm = 0x20,bfd_arch_ns32k = 0x21,bfd_arch_w65 = 0x22,bfd_arch_tic30 = 0x23,bfd_arch_tic4x = 0x24,bfd_arch_tic54x = 0x25,bfd_arch_tic80 = 0x26,bfd_arch_v850 = 0x27,bfd_arch_arc = 0x28,bfd_arch_m32c = 0x29,bfd_arch_m32r = 0x2A,bfd_arch_mn10200 = 0x2B,bfd_arch_mn10300 = 0x2C,bfd_arch_fr30 = 0x2D,bfd_arch_frv = 0x2E,bfd_arch_mcore = 0x2F,bfd_arch_ia64 = 0x30,bfd_arch_ip2k = 0x31,bfd_arch_iq2000 = 0x32,bfd_arch_mt = 0x33,bfd_arch_pj = 0x34,bfd_arch_avr = 0x35,bfd_arch_bfin = 0x36,bfd_arch_cr16c = 0x37,bfd_arch_crx = 0x38,bfd_arch_cris = 0x39,bfd_arch_s390 = 0x3A,bfd_arch_score = 0x3B,bfd_arch_openrisc = 0x3C,bfd_arch_mmix = 0x3D,bfd_arch_xstormy16 = 0x3E,bfd_arch_msp430 = 0x3F,bfd_arch_xc16x = 0x40,bfd_arch_xtensa = 0x41,bfd_arch_maxq = 0x42,bfd_arch_z80 = 0x43,bfd_arch_last = 0x44,};
enum bfd_link_discard {discard_sec_merge = 0x0,discard_none = 0x1,discard_l = 0x2,discard_all = 0x3,};
enum bfd_print_symbol {bfd_print_symbol_name = 0x0,bfd_print_symbol_more = 0x1,bfd_print_symbol_all = 0x2,};
enum bfd_reloc_status {bfd_reloc_ok = 0x0,bfd_reloc_overflow = 0x1,bfd_reloc_outofrange = 0x2,bfd_reloc_continue = 0x3,bfd_reloc_notsupported = 0x4,bfd_reloc_other = 0x5,bfd_reloc_undefined = 0x6,bfd_reloc_dangerous = 0x7,};
struct ccs_modesel_head {unsigned char _r1;unsigned char medium;unsigned char _r2;unsigned char block_desc_length;unsigned char density;unsigned char number_blocks_hi;unsigned char number_blocks_med;unsigned char number_blocks_lo;unsigned char _r3;unsigned char block_length_hi;unsigned char block_length_med;unsigned char block_length_lo;};
struct coff_comdat_info { char *name;int symbol;};
typedef struct colorhist_item *colorhist_vector;
struct ecoff_debug_info;
struct ecoff_debug_swap;
typedef struct _29DBA087DFE16744A29CB8F8CD68D43B fsConnSetupExtra;
typedef struct _2A73BF0E4CA9808D683BEEEFEEB2900C fsEventMaskError;
typedef struct _E5FCE84481A5DA4B542276D3CC112A29 fsKeepAliveEvent;
typedef struct _D7F0CB1571AAC0714CF3A2A9DC0827E7 fsListFontsReply;
typedef struct _70DED5C9F2A29D27E550D747EFE3C2C4 jas_iccattrtab_t;
typedef struct jas_iccattrval_s jas_iccattrval_t;
typedef struct _EC67746570F1353AA5EB836736C244CA jas_icctxtdesc_t;
typedef struct _A0014DEEDBC3166AD27E11A70E9D3D79 jas_image_cmpt_t;
typedef void jas_stream_obj_t;
typedef struct _7A3E8E29A57684CB97219B36FB039E49 jas_stream_ops_t;
typedef union _738A8E8AC168E5B4B1A53622C9D7048F pthread_rwlock_t;
typedef  struct reloc_howto_struct reloc_howto_type;
typedef unsigned int splay_tree_value;
typedef  struct _ss_request_entry ss_request_entry;
typedef  struct _ss_request_table ss_request_table;
struct user_regs_struct {int ebx;int ecx;int edx;int esi;int edi;int ebp;int eax;int xds;int xes;int xfs;int xgs;int orig_eax;int eip;int xcs;int eflags;int esp;int xss;};
typedef struct _0A270F69B196F9EFA6F2CD4624EE5655 xAllocColorReply;
typedef struct _67BA815F7CB0308CE8EF90A300D23A50 xBellFeedbackCtl;
typedef struct _10184D3025615BB97A779285FBA6EAF5 xBigReqEnableReq;
typedef struct _D60B59C14E4F896E4A7591EB7765B14B xConnSetupPrefix;
typedef struct _6FB552EA524F38554FA8528F506D34FD xCreateCursorReq;
typedef struct _1F1AC3FACFBF0931A43D0CD999C4D927 xCreatePixmapReq;
typedef struct _F5EF5DA862DE88FCCA82FCE0F474E907 xCreateWindowReq;
typedef struct _395B269B2EB9353EDAC9E4036758953F xDMXAddScreenReq;
typedef struct _B366CC5B56440B0B1B4971EDF28ED7EF xDamageCreateReq;
typedef struct _A2FB221EC01549407EDCF016C4C0632F xGrabDeviceReply;
typedef struct _94FA839E2A2E2CDB2FF04022E6E0CAA1 xGrabKeyboardReq;
typedef struct _FA4FE0B2CA883E06053CBA1706060353 xInternAtomReply;
typedef struct _LbxCopyPlane xLbxCopyPlaneReq;
typedef struct _LbxImageText xLbxImageTextReq;
typedef struct _LbxNewClient xLbxNewClientReq;
typedef struct _LbxPolyPoint xLbxPolyPointReq;
typedef struct _LbxQueryFont xLbxQueryFontReq;
typedef struct _LbxStopProxy xLbxStopProxyReq;
typedef struct _80262239D5DEFAC7F5C75EBAC6CCD93C xOpenDeviceReply;
typedef struct _PrintEndPage xPrintEndPageReq;
typedef struct _xPrintPrintEvent xPrintPrintEvent;
typedef struct _B1F3B1E8AC6C76EBFB982A13A87B6D55 xRenderTransform;
typedef struct _242BB1C523CD001B2A53A1A084DAE0C6 xRenderTriFanReq;
typedef struct _FE8C559F4B68F5A3A5D9DBCE5E9919CF xSetMappingReply;
typedef struct _ShapeCombine xShapeCombineReq;
typedef struct _3369594E17BD6DC3517892D04DD0216E xTestGetInputReq;
typedef struct _37A9DB4B311662424B6FA129E06762F1 xUngrabButtonReq;
typedef struct _F57445CCAF99E2554B974CAECD301767 xUngrabDeviceReq;
typedef struct _xValuatorInfo *xValuatorInfoPtr;
typedef struct _XDGACopyArea xXDGACopyAreaReq;
typedef struct _A27C0735E8A7EB8595B640D9B7BEF349 xXagGetAttrReply;
typedef struct _322E4D740D2A723112F8227414848916 xXevieStartReply;
typedef xcb_value_error_t xcb_atom_error_t;
enum xcb_close_down_t {XCB_CLOSE_DOWN_DESTROY_ALL = 0x0,XCB_CLOSE_DOWN_RETAIN_PERMANENT = 0x1,XCB_CLOSE_DOWN_RETAIN_TEMPORARY = 0x2,};
enum xcb_color_flag_t {XCB_COLOR_FLAG_RED = 0x1,XCB_COLOR_FLAG_GREEN = 0x2,XCB_COLOR_FLAG_BLUE = 0x4,};
struct xcb_connection_t;
enum xcb_coord_mode_t {XCB_COORD_MODE_ORIGIN = 0x0,XCB_COORD_MODE_PREVIOUS = 0x1,};
enum xcb_event_mask_t {XCB_EVENT_MASK_NO_EVENT = 0x0,XCB_EVENT_MASK_KEY_PRESS = 0x1,XCB_EVENT_MASK_KEY_RELEASE = 0x2,XCB_EVENT_MASK_BUTTON_PRESS = 0x4,XCB_EVENT_MASK_BUTTON_RELEASE = 0x8,XCB_EVENT_MASK_ENTER_WINDOW = 0x10,XCB_EVENT_MASK_LEAVE_WINDOW = 0x20,XCB_EVENT_MASK_POINTER_MOTION = 0x40,XCB_EVENT_MASK_POINTER_MOTION_HINT = 0x80,XCB_EVENT_MASK_BUTTON_1_MOTION = 0x100,XCB_EVENT_MASK_BUTTON_2_MOTION = 0x200,XCB_EVENT_MASK_BUTTON_3_MOTION = 0x400,XCB_EVENT_MASK_BUTTON_4_MOTION = 0x800,XCB_EVENT_MASK_BUTTON_5_MOTION = 0x1000,XCB_EVENT_MASK_BUTTON_MOTION = 0x2000,XCB_EVENT_MASK_KEYMAP_STATE = 0x4000,XCB_EVENT_MASK_EXPOSURE = 0x8000,XCB_EVENT_MASK_VISIBILITY_CHANGE = 0x10000,XCB_EVENT_MASK_STRUCTURE_NOTIFY = 0x20000,XCB_EVENT_MASK_RESIZE_REDIRECT = 0x40000,XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY = 0x80000,XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT = 0x100000,XCB_EVENT_MASK_FOCUS_CHANGE = 0x200000,XCB_EVENT_MASK_PROPERTY_CHANGE = 0x400000,XCB_EVENT_MASK_COLOR_MAP_CHANGE = 0x800000,XCB_EVENT_MASK_OWNER_GRAB_BUTTON = 0x1000000,};
enum xcb_fill_style_t {XCB_FILL_STYLE_SOLID = 0x0,XCB_FILL_STYLE_TILED = 0x1,XCB_FILL_STYLE_STIPPLED = 0x2,XCB_FILL_STYLE_OPAQUE_STIPPLED = 0x3,};
typedef xcb_value_error_t xcb_font_error_t;
enum xcb_join_style_t {XCB_JOIN_STYLE_MITRE = 0x0,XCB_JOIN_STYLE_ROUND = 0x1,XCB_JOIN_STYLE_BEVEL = 0x2,};
enum xcb_line_style_t {XCB_LINE_STYLE_SOLID = 0x0,XCB_LINE_STYLE_ON_OFF_DASH = 0x1,XCB_LINE_STYLE_DOUBLE_DASH = 0x2,};
typedef xcb_request_error_t xcb_name_error_t;
enum xcb_poly_shape_t {XCB_POLY_SHAPE_COMPLEX = 0x0,XCB_POLY_SHAPE_NONCONVEX = 0x1,XCB_POLY_SHAPE_CONVEX = 0x2,};
enum xcb_stack_mode_t {XCB_STACK_MODE_ABOVE = 0x0,XCB_STACK_MODE_BELOW = 0x1,XCB_STACK_MODE_TOP_IF = 0x2,XCB_STACK_MODE_BOTTOM_IF = 0x3,XCB_STACK_MODE_OPPOSITE = 0x4,};
enum xcb_visibility_t {XCB_VISIBILITY_UNOBSCURED = 0x0,XCB_VISIBILITY_PARTIALLY_OBSCURED = 0x1,XCB_VISIBILITY_FULLY_OBSCURED = 0x2,};
typedef struct _xkbAccessXNotify xkbAccessXNotify;
typedef struct _xkbActionMessage xkbActionMessage;
typedef struct _xkbGetNamesReply xkbGetNamesReply;
typedef struct _xkbGetStateReply xkbGetStateReply;
typedef struct _xkbPointWireDesc xkbPointWireDesc;
typedef struct _xkbShapeWireDesc xkbShapeWireDesc;
typedef struct _xkmAnyDoodadDesc xkmAnyDoodadDesc;
typedef struct _xkmKeySymMapDesc xkmKeySymMapDesc;
typedef struct _1309DA1401AD871232334AF15910FB3C xvShmPutImageReq;
typedef struct _DF2660A74F633C8EB56A7225DE8125F3 xvmcGetDRInfoReq;
typedef struct _alternate AlternateServer;
typedef struct _AsciiSinkRec *AsciiSinkObject;
typedef struct BDF_PropertyRec_ BDF_PropertyRec;
typedef struct CID_FaceDictRec_ CID_FaceDictRec;
typedef struct CID_FaceInfoRec_ CID_FaceInfoRec;
typedef struct _C9EFACD7AD111D54B2C71B18ED3A969D CallBackInfoRec;
typedef struct _CommandClassRec CommandClassRec;
typedef struct _CompositeRec *CompositeWidget;
typedef struct _WidgetClassRec *CoreWidgetClass;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F DialogClassPart;
typedef struct _ExifDataPrivate ExifDataPrivate;
typedef void (*ExifMemFreeFunc)(void *p);
typedef struct _FPEFunctions FPEFunctionsRec;
typedef struct FT_GlyphSlotRec_ FT_GlyphSlotRec;
typedef struct FT_Module_Class_ FT_Module_Class;
typedef struct FT_Multi_Master_ FT_Multi_Master;
typedef struct FT_OutlineGlyphRec_ *FT_OutlineGlyph;
typedef struct FT_Raster_Funcs_ FT_Raster_Funcs;
enum FT_Render_Mode_ {FT_RENDER_MODE_NORMAL = 0x0,FT_RENDER_MODE_LIGHT = 0x1,FT_RENDER_MODE_MONO = 0x2,FT_RENDER_MODE_LCD = 0x3,FT_RENDER_MODE_LCD_V = 0x4,FT_RENDER_MODE_MAX = 0x5,};
typedef struct FT_Size_Metrics_ FT_Size_Metrics;
typedef struct FT_Size_RequestRec_ *FT_Size_Request;
typedef struct _FontRenderer *FontRendererPtr;
typedef struct _FontRenderer FontRendererRec;
typedef struct _FontScalable *FontScalablePtr;
typedef struct _FontScalable FontScalableRec;
typedef struct _FormConstraintsRec *FormConstraints;
typedef struct _FormClassRec *FormWidgetClass;
typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
typedef struct _XawGripCallData GripCallDataRec;
typedef struct _GripClassRec *GripWidgetClass;
typedef struct _HookObjClassRec HookObjClassRec;
typedef struct _HookObjClassRec *HookObjectClass;
typedef struct _931DBA82A19B61CA267B848FC88C1541 IcePaVersionRec;
typedef struct _DEA6EB3579BA90947BB8CFA4C4EC84A1 IcePoVersionRec;
typedef struct _76D52EC222D2C536EACA604D43F5657A JNINativeMethod;
typedef struct _LBXDeltaElem *LBXDeltaElemPtr;
typedef struct _LBXDeltaElem LBXDeltaElemRec;
typedef struct LIBMTP_folder_struct LIBMTP_folder_t;
typedef struct LIBMTP_object_struct LIBMTP_object_t;
typedef struct _LateBindings *LateBindingsPtr;
typedef struct _ListClassRec *ListWidgetClass;
enum MACRO_AUTH_NONE {AUTH_NONE = 0,AUTH_NULL = 0,AUTH_SYS = 1,AUTH_UNIX = 1,AUTH_SHORT = 2,AUTH_DES = 3,AUTH_DH = 3,AUTH_KERB = 4,};
enum MACRO_AddToList {AddToList = 0,DeleteFromList = 1,};
enum MACRO_AllPlanes {AllPlanes = 4294967295,};
enum MACRO_AllValues {AllValues = 0xF,XNegative = 0x10,YNegative = 0x20,};
enum MACRO_AllocNone {AllocNone = 0,AllocAll = 1,};
enum MACRO_AnyButton {AnyButton = 0,};
enum MACRO_AsyncBoth {AsyncBoth = 6,};
enum MACRO_BLKFLSBUF {BLKFLSBUF = 0x1261,};
enum MACRO_BLKFRAGET {BLKFRAGET = 0x1265,};
enum MACRO_BLKFRASET {BLKFRASET = 0x1264,};
enum MACRO_BLKRRPART {BLKRRPART = 0x125F,};
enum MACRO_BLKSSZGET {BLKSSZGET = 0x1268,};
enum MACRO_BOOLCOUNT {BOOLCOUNT = 44,};
enum MACRO_BOOLWRITE {BOOLWRITE = 37,};
enum MACRO_BYTE_MASK {BYTE_MASK = 255,};
enum MACRO_BadAccess {BadAccess = 10,};
enum MACRO_BadCursor {BadCursor = 6,};
enum MACRO_BadDamage {BadDamage = 0,XDamageNumberErrors = 1,};
enum MACRO_BadRegion {BadRegion = 0,XFixesNumberErrors = 1,};
enum MACRO_BadScreen {BadScreen = 7,BadSwapReq = 8,};
enum MACRO_BadShmSeg {BadShmSeg = 0,ShmNumberErrors = 1,};
enum MACRO_BadWindow {BadWindow = 3,BadPixmap = 4,};
enum MACRO_CIICFocus {CIICFocus = 1,CIFontSet = 2,CIFg = 4,CIBg = 8,CIBgPixmap = 16,CICursorP = 32,CILineS = 64,};
enum MACRO_CLSET_SVC {CLSET_SVC_ADDR = 16,CLSET_PUSH_TIMOD = 17,CLSET_POP_TIMOD = 18,CLSET_RETRY_TIMEOUT = 4,};
enum MACRO_COMPOSITE {COMPOSITE_MAJOR = 0,COMPOSITE_MINOR = 3,};
enum MACRO_CONDITION {CONDITION_GOOD = 0x2,};
enum MACRO_CPLastBit {CPLastBit = 12,};
enum MACRO_CPUSTATES {CPUSTATES = 4,};
enum MACRO_DvInteger {DvInteger = 1,};
enum MACRO_EF_PARISC {EF_PARISC_TRAPNIL = 0x10000,EF_PARISC_EXT = 0x20000,EF_PARISC_LSB = 0x40000,EF_PARISC_WIDE = 0x80000,EF_PARISC_NO_KABP = 0x100000,EF_PARISC_LAZYSWAP = 0x400000,EF_PARISC_ARCH = 0xFFFF,};
enum MACRO_ETHERTYPE {ETHERTYPE_PUP = 0x200,ETHERTYPE_IP = 0x800,ETHERTYPE_ARP = 0x806,ETHERTYPE_REVARP = 0x8035,};
enum MACRO_FC_WEIGHT {FC_WEIGHT_THIN = 0,FC_WEIGHT_EXTRALIGHT = 40,FC_WEIGHT_ULTRALIGHT = 40,FC_WEIGHT_LIGHT = 50,FC_WEIGHT_BOOK = 75,FC_WEIGHT_REGULAR = 80,FC_WEIGHT_NORMAL = 80,FC_WEIGHT_MEDIUM = 100,FC_WEIGHT_DEMIBOLD = 180,FC_WEIGHT_SEMIBOLD = 180,FC_WEIGHT_BOLD = 200,FC_WEIGHT_EXTRABOLD = 205,FC_WEIGHT_ULTRABOLD = 205,FC_WEIGHT_BLACK = 210,FC_WEIGHT_HEAVY = 210,FC_SLANT_ROMAN = 0,FC_SLANT_ITALIC = 100,FC_SLANT_OBLIQUE = 110,FC_WIDTH_ULTRACONDENSED = 50,FC_WIDTH_EXTRACONDENSED = 63,FC_WIDTH_CONDENSED = 75,FC_WIDTH_SEMICONDENSED = 87,FC_WIDTH_NORMAL = 100,FC_WIDTH_SEMIEXPANDED = 113,FC_WIDTH_EXPANDED = 125,FC_WIDTH_EXTRAEXPANDED = 150,FC_WIDTH_ULTRAEXPANDED = 200,FC_PROPORTIONAL = 0,FC_DUAL = 90,FC_MONO = 100,FC_CHARCELL = 110,FC_RGBA_UNKNOWN = 0,FC_RGBA_RGB = 1,FC_RGBA_BGR = 2,FC_RGBA_VRGB = 3,FC_RGBA_VBGR = 4,FC_RGBA_NONE = 5,FC_HINT_NONE = 0,FC_HINT_SLIGHT = 1,FC_HINT_MEDIUM = 2,FC_HINT_FULL = 3,FC_CHARSET_MAP_SIZE = 8,FC_CHARSET_DONE = 4294967295,FC_UTF8_MAX_LEN = 6,};
enum MACRO_FIOGETOWN {FIOGETOWN = 0x8903,};
enum MACRO_FIOSETOWN {FIOSETOWN = 0x8901,};
enum MACRO_FNONBLOCK {FNONBLOCK = 2048,};
enum MACRO_FONTCACHE {FONTCACHE_MAJOR_VERSION = 0,FONTCACHE_MINOR_VERSION = 1,};
enum MACRO_FONT_XLFD {FONT_XLFD_REPLACE_NONE = 0,FONT_XLFD_REPLACE_STAR = 1,FONT_XLFD_REPLACE_ZERO = 2,FONT_XLFD_REPLACE_VALUE = 3,};
enum MACRO_FSBadName {FSBadName = 7,FSBadResolution = 8,};
enum MACRO_FSSuccess {FSSuccess = -1,};
enum MACRO_FT_MODULE {FT_MODULE_FONT_DRIVER = 1,FT_MODULE_RENDERER = 2,FT_MODULE_HINTER = 4,FT_MODULE_STYLER = 8,FT_MODULE_DRIVER_SCALABLE = 256,FT_MODULE_DRIVER_NO_OUTLINES = 512,FT_MODULE_DRIVER_HAS_HINTER = 1024,};
enum MACRO_FT_SIZEOF {FT_SIZEOF_INT = 4,FT_SIZEOF_LONG = 4,FT_ALIGNMENT = 8,};
enum MACRO_FUNCPROTO {FUNCPROTO = 15,};
enum MACRO_FillSolid {FillSolid = 0,FillTiled = 1,FillStippled = 2,};
enum MACRO_GCLastBit {GCLastBit = 22,};
enum MACRO_ICMP6_DST {ICMP6_DST_UNREACH_NOROUTE = 0,ICMP6_DST_UNREACH_ADMIN = 1,ICMP6_DST_UNREACH_BEYONDSCOPE = 2,ICMP6_DST_UNREACH_ADDR = 3,ICMP6_DST_UNREACH_NOPORT = 4,ICMP6_TIME_EXCEED_TRANSIT = 0,ICMP6_TIME_EXCEED_REASSEMBLY = 1,ICMP6_PARAMPROB_HEADER = 0,ICMP6_PARAMPROB_NEXTHEADER = 1,ICMP6_PARAMPROB_OPTION = 2,};
enum MACRO_INITIATOR {INITIATOR_ERROR = 0x5,};
enum MACRO_INT_FAST8 {INT_FAST8_MIN = -128,INT_FAST16_MIN = -2147483648,INT_FAST32_MIN = -2147483648,INT_FAST64_MIN = -9223372036854775808,INT_FAST8_MAX = 127,INT_FAST16_MAX = 2147483647,INT_FAST32_MAX = 2147483647,INT_FAST64_MAX = 9223372036854775807,};
enum MACRO_IN_ACCESS {IN_ACCESS = 0x1,IN_MODIFY = 0x2,IN_ATTRIB = 0x4,IN_CLOSE_WRITE = 0x8,IN_CLOSE_NOWRITE = 0x10,IN_CLOSE = 0x18,IN_OPEN = 0x20,IN_MOVED_FROM = 0x40,IN_MOVED_TO = 0x80,IN_MOVE = 0xC0,IN_CREATE = 0x100,IN_DELETE = 0x200,IN_DELETE_SELF = 0x400,IN_MOVE_SELF = 0x800,IN_UNMOUNT = 0x2000,IN_Q_OVERFLOW = 0x4000,IN_IGNORED = 0x8000,IN_ONLYDIR = 0x1000000,IN_DONT_FOLLOW = 0x2000000,IN_MASK_ADD = 0x20000000,IN_ISDIR = 0x40000000,IN_ONESHOT = 0x80000000,IN_ALL_EVENTS = 0xFFF,};
enum MACRO_IPFRAGTTL {IPFRAGTTL = 60,};
enum MACRO_IPVERSION {IPVERSION = 4,};
enum MACRO_IP_ROUTER {IP_ROUTER_ALERT = 5,IP_PKTINFO = 8,IP_PKTOPTIONS = 9,IP_PMTUDISC = 10,IP_MTU_DISCOVER = 10,IP_RECVERR = 11,IP_RECVTTL = 12,IP_RECVTOS = 13,IP_PMTUDISC_DONT = 0,IP_PMTUDISC_WANT = 1,IP_PMTUDISC_DO = 2,};
enum MACRO_IWEVFIRST {IWEVFIRST = 0x8C00,};
enum MACRO_IWEVGENIE {IWEVGENIE = 0x8C05,};
enum MACRO_InputHint {InputHint = 1,StateHint = 2,IconPixmapHint = 4,IconWindowHint = 8,IconPositionHint = 16,IconMaskHint = 32,WindowGroupHint = 64,};
enum MACRO_JoinMiter {JoinMiter = 0,JoinRound = 1,JoinBevel = 2,};
enum MACRO_KDDISABIO {KDDISABIO = 0x4B37,};
enum MACRO_KDGETMODE {KDGETMODE = 0x4B3B,};
enum MACRO_KDGKBMETA {KDGKBMETA = 0x4B62,};
enum MACRO_KDGKBMODE {KDGKBMODE = 0x4B44,};
enum MACRO_KDGKBSENT {KDGKBSENT = 0x4B48,};
enum MACRO_KDGKBTYPE {KDGKBTYPE = 0x4B33,};
enum MACRO_KDMAPDISP {KDMAPDISP = 0x4B3C,};
enum MACRO_KDSETMODE {KDSETMODE = 0x4B3A,};
enum MACRO_KDSKBMETA {KDSKBMETA = 0x4B63,};
enum MACRO_KDSKBMODE {KDSKBMODE = 0x4B45,};
enum MACRO_KDSKBSENT {KDSKBSENT = 0x4B49,};
enum MACRO_KIOCSOUND {KIOCSOUND = 0x4B2F,};
enum MACRO_K_METABIT {K_METABIT = 0x3,K_ESCPREFIX = 0x4,};
enum MACRO_K_NORMTAB {K_NORMTAB = 0x0,K_SHIFTTAB = 0x1,K_ALTTAB = 0x2,K_ALTSHIFTTAB = 0x3,};
enum MACRO_KeepAlive {KeepAlive = 0,CatalogueChangeNotify = 1,FontChangeNotify = 2,};
enum MACRO_LARGEFILE {_LFS_LARGEFILE = 1,_LFS64_LARGEFILE = 1,};
enum MACRO_LASTEvent {LASTEvent = 35,};
enum MACRO_LBX_SMART {LBX_SMART_GRAB = 0x80,LBX_AUTO_RELEASE = 0x40,LBX_3CHANNELS = 0x20,LBX_2BYTE_PIXELS = 0x10,LBX_RGB_BITS_MASK = 0xF,LBX_LIST_END = 0x0,LBX_PIXEL_PRIVATE = 0x1,LBX_PIXEL_SHARED = 0x2,LBX_PIXEL_RANGE_PRIVATE = 0x3,LBX_PIXEL_RANGE_SHARED = 0x4,LBX_NEXT_CHANNEL = 0x5,};
enum MACRO_LBX_WIDTH {LBX_WIDTH_SHIFT = 26,LBX_LEFT_SHIFT = 20,LBX_RIGHT_SHIFT = 13,LBX_ASCENT_SHIFT = 7,LBX_DESCENT_SHIFT = 0,LBX_WIDTH_BITS = 6,LBX_LEFT_BITS = 6,LBX_RIGHT_BITS = 7,LBX_ASCENT_BITS = 6,LBX_DESCENT_BITS = 7,LBX_WIDTH_MASK = -67108864,LBX_LEFT_MASK = 66060288,LBX_RIGHT_MASK = 1040384,LBX_ASCENT_MASK = 8064,LBX_DESCENT_MASK = 127,};
enum MACRO_L_ctermid {L_ctermid = 9,L_cuserid = 9,};
enum MACRO_LineSolid {LineSolid = 0,LineOnOffDash = 1,LineDoubleDash = 2,};
enum MACRO_MAXCDNAME {MAXCDNAME = 255,};
enum MACRO_MAXDNSRCH {MAXDNSRCH = 6,};
enum MACRO_MAXNAMLEN {MAXNAMLEN = 255,};
enum MACRO_MAXQUOTAS {MAXQUOTAS = 2,};
enum MACRO_MAX_CANON {MAX_CANON = 255,MAX_INPUT = 255,};
enum MACRO_MNTNAMLEN {MNTNAMLEN = 255,};
enum MACRO_MODE_EDIT {MODE_EDIT = 0x1,MODE_TRAPSIG = 0x2,MODE_ACK = 0x4,MODE_SOFT_TAB = 0x8,MODE_LIT_ECHO = 0x10,MODE_MASK = 0x1F,MODE_FLOW = 0x100,MODE_ECHO = 0x200,MODE_INBIN = 0x400,MODE_OUTBIN = 0x800,MODE_FORCE = 0x1000,};
enum MACRO_MOUNTPROC {MOUNTPROC_NULL = 0,MOUNTPROC_MNT = 1,MOUNTPROC_DUMP = 2,MOUNTPROC_UMNT = 3,MOUNTPROC_UMNTALL = 4,MOUNTPROC_EXPORT = 5,MOUNTPROC_EXPORTALL = 6,};
enum MACRO_MOUNTPROG {MOUNTPROG = 100005,};
enum MACRO_MOUNTVERS {MOUNTVERS = 1,};
enum MACRO_MTSETPART {MTSETPART = 33,};
enum MACRO_MapNotify {MapNotify = 19,};
enum MACRO_NAME_SIZE {NAME_SIZE = 12,TTY_SIZE = 16,};
enum MACRO_NGROUPS_0 {NGROUPS = 65536,};
enum MACRO_NOT_READY {NOT_READY = 0x2,};
enum MACRO_NR_DQHASH {NR_DQHASH = 43,NR_DQUOTS = 256,};
enum MACRO_NULLQUARK {NULLQUARK = 0,};
enum MACRO_NotUseful {NotUseful = 0,WhenMapped = 1,Always = 2,};
enum MACRO_O_VISIBLE {O_VISIBLE = 0x1,O_ACTIVE = 0x2,O_PUBLIC = 0x4,O_EDIT = 0x8,O_WRAP = 0x10,O_BLANK = 0x20,O_AUTOSKIP = 0x40,O_NULLOK = 0x80,O_PASSOK = 0x100,O_STATIC = 0x200,O_NL_OVERLOAD = 0x1,O_BS_OVERLOAD = 0x2,};
enum MACRO_PANORAMIX {PANORAMIX_MAJOR_VERSION = 1,PANORAMIX_MINOR_VERSION = 1,};
enum MACRO_PAllHints {PAllHints = 252,};
enum MACRO_PF_PARISC {PF_PARISC_SBP = 0x8000000,PF_HP_PAGE_SIZE = 0x100000,PF_HP_FAR_SHARED = 0x200000,PF_HP_NEAR_SHARED = 0x400000,PF_HP_CODE = 0x1000000,PF_HP_MODIFY = 0x2000000,PF_HP_LAZYSWAP = 0x4000000,PF_HP_SBP = 0x8000000,};
enum MACRO_PF_UNSPEC {PF_UNSPEC = 0,PF_LOCAL = 1,PF_UNIX = 1,PF_FILE = 1,PF_INET = 2,PF_AX25 = 3,PF_IPX = 4,PF_APPLETALK = 5,PF_NETROM = 6,PF_BRIDGE = 7,PF_ATMPVC = 8,PF_X25 = 9,PF_INET6 = 10,PF_ROSE = 11,PF_DECnet = 12,PF_NETBEUI = 13,PF_SECURITY = 14,PF_KEY = 15,PF_NETLINK = 16,PF_ROUTE = 16,PF_PACKET = 17,PF_ASH = 18,PF_ECONET = 19,PF_ATMSVC = 20,PF_SNA = 22,PF_IRDA = 23,PF_PPPOX = 24,PF_WANPIPE = 25,PF_BLUETOOTH = 31,PF_MAX = 32,};
enum MACRO_PIXELSIZE {PIXELSIZE_UNDEFINED = 0,PIXELSIZE_SCALAR = 1,PIXELSIZE_ARRAY = 2,PIXELSIZE_SCALAR_NORMALIZED = 3,};
enum MACRO_POINTSIZE {POINTSIZE_MASK = 0xC,POINTSIZE_UNDEFINED = 0x0,POINTSIZE_SCALAR = 0x4,POINTSIZE_ARRAY = 0x8,};
enum MACRO_PictOpAdd {PictOpAdd = 12,};
enum MACRO_PictOpOut {PictOpOut = 7,PictOpOutReverse = 8,};
enum MACRO_PictOpXor {PictOpXor = 11,};
enum MACRO_QUEUE_TAG {SIMPLE_QUEUE_TAG = 0x20,HEAD_OF_QUEUE_TAG = 0x21,ORDERED_QUEUE_TAG = 0x22,};
enum MACRO_RECOVERED {RECOVERED_ERROR = 0x1,};
enum MACRO_RSTATPROC {RSTATPROC_STATS = 1,RSTATPROC_HAVEDISK = 2,};
enum MACRO_RSTATPROG {RSTATPROG = 100001,};
enum MACRO_RSTATVERS {RSTATVERS_TIME = 3,};
enum MACRO_RTF_LOCAL {RTF_LOCAL = 0x80000000,RTF_INTERFACE = 0x40000000,RTF_MULTICAST = 0x20000000,RTF_BROADCAST = 0x10000000,RTF_NAT = 0x8000000,RTF_ADDRCLASSMASK = 0xF8000000,};
enum MACRO_SCHAR_MIN {SCHAR_MIN = -128,SHRT_MIN = -32768,INT_MIN = -2147483648,LONG_MIN = -2147483648,};
enum MACRO_SHF_ALPHA {SHF_ALPHA_GPREL = 0x10000000,};
enum MACRO_SHF_AMD64 {SHF_AMD64_LARGE = 0x10000000,};
enum MACRO_SHM_MAJOR {SHM_MAJOR_VERSION = 1,SHM_MINOR_VERSION = 1,};
enum MACRO_SHT_ALPHA {SHT_ALPHA_DEBUG = 0x70000001,SHT_ALPHA_REGINFO = 0x70000002,};
enum MACRO_SIG_BLOCK {SIG_BLOCK = 0,SIG_UNBLOCK = 1,SIG_SETMASK = 2,};
enum MACRO_SIOCADDRT {SIOCADDRT = 0x890B,};
enum MACRO_SIOCDELRT {SIOCDELRT = 0x890C,};
enum MACRO_SIOCDRARP {SIOCDRARP = 0x8960,};
enum MACRO_SIOCGIFBR {SIOCGIFBR = 0x8940,};
enum MACRO_SIOCGIWAP {SIOCGIWAP = 0x8B15,};
enum MACRO_SIOCGPGRP {SIOCGPGRP = 0x8904,};
enum MACRO_SIOCGRARP {SIOCGRARP = 0x8961,};
enum MACRO_SIOCRTMSG {SIOCRTMSG = 0x890D,};
enum MACRO_SIOCSIFBR {SIOCSIFBR = 0x8941,};
enum MACRO_SIOCSIWAP {SIOCSIWAP = 0x8B14,};
enum MACRO_SIOCSPGRP {SIOCSPGRP = 0x8902,};
enum MACRO_SIOCSRARP {SIOCSRARP = 0x8962,};
enum MACRO_SOL_ATALK {SOL_ATALK = 258,};
enum MACRO_SOMAXCONN {SOMAXCONN = 128,};
enum MACRO_SOUND_PCM {SOUND_PCM_POST = 20488,SOUND_PCM_RESET = 20480,SOUND_PCM_SYNC = 20481,SOUND_PCM_NONBLOCK = 20494,SOUND_PCM_SETSYNCRO = 20501,};
enum MACRO_SPRAYPROC {SPRAYPROC_SPRAY = 1,SPRAYPROC_GET = 2,SPRAYPROC_CLEAR = 3,};
enum MACRO_SPRAYPROG {SPRAYPROG = 100012,};
enum MACRO_SPRAYVERS {SPRAYVERS = 1,};
enum MACRO_STO_ALPHA {STO_ALPHA_NOPV = 0x80,STO_ALPHA_STD_GPLOAD = 0x88,};
enum MACRO_STT_SPARC {STT_SPARC_REGISTER = 13,};
enum MACRO_SYNTH_CAP {SYNTH_CAP_PERCMODE = 0x1,SYNTH_CAP_OPL3 = 0x2,SYNTH_CAP_INPUT = 0x4,};
enum MACRO_S_BLKSIZE {S_BLKSIZE = 512,};
enum MACRO_ShiftMask {ShiftMask = 1,LockMask = 2,ControlMask = 4,Mod1Mask = 8,Mod2Mask = 16,Mod3Mask = 32,Mod4Mask = 64,Mod5Mask = 128,};
enum MACRO_Suspended {Suspended = 84,};
enum MACRO_TEST_UNIT {TEST_UNIT_READY = 0x0,};
enum MACRO_TIOCGPGRP {TIOCGPGRP = 0x540F,};
enum MACRO_TIOCLINUX {TIOCLINUX = 0x541C,};
enum MACRO_TIOCNOTTY {TIOCNOTTY = 0x5422,};
enum MACRO_TIOCSCTTY {TIOCSCTTY = 0x540E,};
enum MACRO_TIOCSPGRP {TIOCSPGRP = 0x5410,};
enum MACRO_TYPE_DISK {TYPE_DISK = 0x0,TYPE_TAPE = 0x1,TYPE_PROCESSOR = 0x3,TYPE_WORM = 0x4,TYPE_ROM = 0x5,TYPE_SCANNER = 0x6,TYPE_MOD = 0x7,TYPE_MEDIUM_CHANGER = 0x8,TYPE_ENCLOSURE = 0xD,TYPE_NO_LUN = 0x7F,};
enum MACRO_WCOREFLAG {WCOREFLAG = 128,};
enum MACRO_XCSUCCESS {XCSUCCESS = 0,XCNOMEM = 1,XCNOENT = 2,};
enum MACRO_XNoMemory {XNoMemory = -1,};
enum MACRO_XPAuxSPkg {XPAuxSPkg = 11,};
enum MACRO_XPDelAttr {XPDelAttr = 10,};
enum MACRO_XPImpAttr {XPImpAttr = 15,XPSchedAttr = 16,};
enum MACRO_XPJobAttr {XPJobAttr = 1,XPDocAttr = 2,};
enum MACRO_XP_EVENTS {XP_EVENTS = 2,};
enum MACRO_XTestFAKE {XTestFAKE_ACK_NOT_NEEDED = 0,XTestFAKE_ACK_REQUEST = 1,};
enum MACRO_XawBSLASH {XawBSLASH = 92,};
enum MACRO_XkbXINone {XkbXINone = 0xFF00,};
enum MACRO_XpmFormat {XpmFormat = 3,XpmVersion = 4,XpmRevision = 11,};
enum MACRO_XpmVisual {XpmVisual = 1,XpmColormap = 2,XpmDepth = 4,XpmSize = 8,XpmHotspot = 16,XpmCharsPerPixel = 32,XpmColorSymbols = 64,XpmRgbFilename = 128,XpmInfos = 256,};
enum MACRO_XtVersion {XtVersion = 11006,};
enum MACRO_XvBadPort {XvBadPort = 0,XvBadEncoding = 1,XvBadControl = 2,};
enum MACRO_XvStarted {XvStarted = 0,XvStopped = 1,XvBusy = 2,};
enum MACRO_XvVersion {XvVersion = 2,};
enum MACRO_YPMAXPEER {YPMAXPEER = 64,};
enum MACRO__EXECINFO {_EXECINFO_H = 1,};
enum MACRO__INTTYPES {_INTTYPES_H = 1,};
enum MACRO__IO_MAGIC {_IO_MAGIC_MASK = 0xFFFF0000,_IO_USER_BUF = 0x1,_IO_UNBUFFERED = 0x2,_IO_NO_READS = 0x4,_IO_NO_WRITES = 0x8,_IO_EOF_SEEN = 0x10,_IO_ERR_SEEN = 0x20,_IO_DELETE_DONT_CLOSE = 0x40,_IO_LINKED = 0x80,_IO_IN_BACKUP = 0x100,_IO_LINE_BUF = 0x200,_IO_TIED_PUT_GET = 0x400,_IO_CURRENTLY_PUTTING = 0x800,_IO_IS_APPENDING = 0x1000,_IO_IS_FILEBUF = 0x2000,_IO_BAD_SEEN = 0x4000,_IO_USER_LOCK = 0x8000,_IO_FLAGS2_MMAP = 0x1,_IO_FLAGS2_NOTCANCEL = 0x2,_IO_SKIPWS = 0x1,_IO_LEFT = 0x2,_IO_RIGHT = 0x4,_IO_INTERNAL = 0x8,_IO_DEC = 0x10,_IO_OCT = 0x20,_IO_HEX = 0x40,_IO_SHOWBASE = 0x80,_IO_SHOWPOINT = 0x100,_IO_UPPERCASE = 0x200,_IO_SHOWPOS = 0x400,_IO_SCIENTIFIC = 0x800,_IO_FIXED = 0x1000,_IO_UNITBUF = 0x2000,_IO_STDIO = 0x4000,_IO_DONT_CLOSE = 0x8000,_IO_BOOLALPHA = 0x10000,};
enum MACRO__LANGINFO {_LANGINFO_H = 1,_NL_TYPES_H = 1,};
enum MACRO__NETATALK {_NETATALK_AT_H = 1,};
enum MACRO__NEWINDEX {_NEWINDEX = -1,};
enum MACRO__NOCHANGE {_NOCHANGE = -1,};
enum MACRO__POSIX2_C {_POSIX2_C_BIND = 200112,_POSIX2_C_DEV = 200112,_POSIX2_SW_DEV = 200112,_POSIX2_LOCALEDEF = 200112,};
enum MACRO__RPC_AUTH {_RPC_AUTH_H = 1,};
enum MACRO__RPC_CLNT {_RPC_CLNT_H = 1,_SYS_UN_H = 1,};
enum MACRO__RPC_PMAP {_RPC_PMAP_CLNT_H = 1,_RPC_PMAP_PROT_H = 1,};
enum MACRO__SIGSET_H {_SIGSET_H_fns = 1,};
enum MACRO__SYSEXITS {_SYSEXITS_H = 1,};
enum MACRO__SYS_ACCT {_SYS_ACCT_H = 1,};
enum MACRO__SYS_FILE {_SYS_FILE_H = 1,_SYS_FSUID_H = 1,_SYS_GMON_H = 1,};
enum MACRO__SYS_GMON {_SYS_GMON_OUT_H = 1,};
enum MACRO__SYS_MTIO {_SYS_MTIO_H = 1,};
enum MACRO__SYS_PERM {_SYS_PERM_H = 1,_SYS_PERSONALITY_H = 1,_SYS_PRCTL_H = 1,};
enum MACRO__SYS_POLL {_SYS_POLL_H = 1,};
enum MACRO__SYS_STAT {_SYS_STAT_H = 1,};
enum MACRO__SYS_TIME {_SYS_TIME_H = 1,_IEEE754_H = 1,};
enum MACRO__SYS_VM86 {_SYS_VM86_H = 1,};
enum MACRO__SYS_WAIT {_SYS_WAIT_H = 1,_SYS_RESOURCE_H = 1,};
enum MACRO__XKBBELLS {_XKBBELLS_H_ = 1,};
enum MACRO__XKBRULES {_XKBRULES_H_ = 1,};
enum MACRO___GLX_MAX {__GLX_MAX_RENDER_CMD_SIZE = 64000,};
enum MACRO___GNU_LIB {__GNU_LIB_NAMES_H = 1,_GNU_LIBC_VERSION_H = 1,};
enum MACRO___NAMESER {__NAMESER = 19991006,};
enum MACRO___NETINET {__NETINET_IF_ETHER_H = 1,};
enum MACRO___UNKNOWN {__UNKNOWN_10646_CHAR = 0xFFFD,};
enum MACRO___USE_GNU {__USE_GNU_GETTEXT = 1,};
enum MACRO___defined {__defined_schedparam = 1,};
enum MACRO___mbstate {__mbstate_t_defined = 1,};
enum MACRO_ft_module {ft_module_font_driver = 1,ft_module_renderer = 2,ft_module_hinter = 4,ft_module_styler = 8,ft_module_driver_scalable = 256,ft_module_driver_no_outlines = 512,ft_module_driver_has_hinter = 1024,};
enum MACRO_ft_raster {ft_raster_flag_default = 0,ft_raster_flag_aa = 1,ft_raster_flag_direct = 2,ft_raster_flag_clip = 4,};
enum MACRO_sz_CARD32 {sz_CARD32 = 4,sz_CARD8 = 1,};
enum MACRO_sz_iceMsg {sz_iceMsg = 8,sz_iceErrorMsg = 16,sz_iceByteOrderMsg = 8,sz_iceConnectionSetupMsg = 16,sz_iceAuthRequiredMsg = 16,sz_iceAuthReplyMsg = 16,sz_iceAuthNextPhaseMsg = 16,sz_iceConnectionReplyMsg = 8,sz_iceProtocolSetupMsg = 16,sz_iceProtocolReplyMsg = 8,sz_icePingMsg = 8,sz_icePingReplyMsg = 8,sz_iceWantToCloseMsg = 8,sz_iceNoCloseMsg = 8,};
enum MACRO_t_defined {__time_t_defined = 1,__clockid_t_defined = 1,__timer_t_defined = 1,};
typedef struct _MultiSinkRec *MultiSinkObject;
typedef struct _ObjectClassPart ObjectClassPart;
typedef struct PS_DesignMap_ PS_DesignMapRec;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F PannerClassPart;
typedef struct _PerDisplayTable PerDisplayTable;
typedef struct _355FFBAADB08B4CAA5BBFAF829DED10A RECORD_EXTRANGE;
typedef struct _RectObjClassRec RectObjClassRec;
typedef struct _8350987D17B2947444B2D568F36850A0 SANE_Parameters;
typedef struct svgamesa_context *SVGAMesaContext;
typedef struct _ScrollbarRec *ScrollbarWidget;
typedef struct _4E230DA965C384CCE937FCE2A8CE1FCC SessionShellRec;
typedef struct _2FA8933AB233BEF1F551184322DF3360 SimpleClassPart;
typedef struct _SmeBSBClassPart SmeBSBClassPart;
typedef struct _SmeLineClassRec SmeLineClassRec;
typedef struct _SmeThreeDRec *SmeThreeDObject;
typedef struct _4D6CF402BE6604EF49AB6A1F1F900B99 SubstitutionRec;
typedef struct _TMBranchHeadRec TMBranchHeadRec;
typedef struct _TMKeyContextRec TMKeyContextRec;
typedef struct _TMModifierMatchRec *TMModifierMatch;
typedef union _TMStateTreeRec **TMStateTreeList;
typedef struct _TextSrcClassRec TextSrcClassRec;
typedef struct _TextClassRec *TextWidgetClass;
typedef struct _42F676846640B939B65BF8A961B681A1 ThreeDClassPart;
typedef struct _ToggleClass ToggleClassPart;
typedef struct _TranslationData TranslationData;
typedef struct _TreeConstraintsRec *TreeConstraints;
typedef struct _TreeClassRec *TreeWidgetClass;
typedef struct _16CFC57C4AEAAC7816B638D66FDFD80A VendorShellPart;
enum WBXMLLanguage_e {WBXML_LANG_UNKNOWN = 0x0,};
struct WBXMLTagEntry_s { char *xmlName;unsigned char wbxmlCodePage;unsigned char wbxmlToken;};
typedef struct WBXMLTreeClbCtx_s WBXMLTreeClbCtx;
typedef struct _WMShellClassRec WMShellClassRec;
typedef struct _33EF72D568008DEC7E31A16B28F183D9 XCirculateEvent;
typedef struct _01F58A4EF10D36C3A582DC7631AF8C2B XConfigureEvent;
typedef struct _6B919F4E06D00F382C9963DC471D0B48 XDGAButtonEvent;
typedef struct _9DFE28049B8EEB519566F0D7FE7040FC XDGAMotionEvent;
typedef struct _775C8D8A4887E1FCC801B4D481FA4360 XDeviceKeyEvent;
typedef struct _AD3E4B684969994001E04092A9466FB4 XETrapDataEvent;
typedef struct _B4FA891B630887EC538EB91F019A9C2C XETrapGetCurRep;
typedef struct _XExtDisplayInfo XExtDisplayInfo;
typedef struct _XExtensionHooks XExtensionHooks;
typedef struct _6BA9BAD34CD581FCA2A7610248080448 XFontSetExtents;
typedef unsigned int XIMPreeditState;
typedef struct _D1A99149F7DEF10F5C1917DF5D27BC53 XInputClassInfo;
typedef struct _XLinearGradient XLinearGradient;
enum XML_FeatureEnum {XML_FEATURE_END = 0x0,XML_FEATURE_UNICODE = 0x1,XML_FEATURE_UNICODE_WCHAR_T = 0x2,XML_FEATURE_DTD = 0x3,XML_FEATURE_CONTEXT_BYTES = 0x4,XML_FEATURE_MIN_SIZE = 0x5,XML_FEATURE_SIZEOF_XML_CHAR = 0x6,XML_FEATURE_SIZEOF_XML_LCHAR = 0x7,XML_FEATURE_NS = 0x8,};
typedef struct _64419251F3172C7227A52AC30EAD3C9D XModifierKeymap;
typedef struct _XRadialGradient XRadialGradient;
typedef struct _3AD473A9924D2058FA4FA6E47C9E79DE XRecordExtRange;
typedef struct _FEE235D246429C26A250F47C5DFFA7E6 XSelectionEvent;
typedef struct _346B3FD68C26438FA8B69D57DEBF0D40 XShmSegmentInfo;
typedef struct _EE0EBD6C29C148C8F36C0CC188CAC56F XSyncAlarmError;
typedef struct _E59953A36063650DE92A1957B98E4A1B XTestMotionInfo;
typedef struct _509170DB936076954425573DA84CBC0B XValuatorStatus;
typedef struct _XawGripCallData *XawGripCallData;
typedef struct _FC067DEDDE18A65B7B77DF0D808EC43F XawPannerReport;
typedef struct _236D87147CED486A0AF93ED3996AECBD *XawTextBlockPtr;
typedef struct _XawTextKillRing XawTextKillRing;
typedef int XawTextPosition;
typedef struct _XawTextProperty XawTextProperty;
typedef unsigned int XcmsColorFormat;
typedef struct _XcmsFunctionSet XcmsFunctionSet;
typedef struct _XcmsPerScrnInfo XcmsPerScrnInfo;
typedef struct _XcursorComments XcursorComments;
typedef struct _0BD9B7EE8D8D1BFD7DE9A4EB5AE97DA4 XdbeBufferError;
typedef struct _XftCharFontSpec XftCharFontSpec;
typedef struct _XkbAnyDoodad *XkbAnyDoodadPtr;
typedef struct _XkbAnyDoodad XkbAnyDoodadRec;
typedef struct _XkbClientMapRec *XkbClientMapPtr;
typedef struct _XkbClientMapRec XkbClientMapRec;
typedef struct _XkbCompatMapRec *XkbCompatMapPtr;
typedef struct _XkbCompatMapRec XkbCompatMapRec;
typedef struct _XkbIndicatorRec *XkbIndicatorPtr;
typedef struct _XkbIndicatorRec XkbIndicatorRec;
typedef struct _XkbPtrBtnAction XkbPtrBtnAction;
typedef struct _XkbServerMapRec *XkbServerMapPtr;
typedef struct _XkbServerMapRec XkbServerMapRec;
typedef struct _XkbUI_Select *XkbUI_SelectPtr;
typedef struct _XkbUI_Select XkbUI_SelectRec;
typedef struct _82207ABABC4EB421AD27F9EAB2AF6BD5 XmbufBufferInfo;
typedef struct _XmuDisplayQueue XmuDisplayQueue;
typedef struct _0B741672733CFD1AAF50D1A5E3ACE892 *XrmResourceList;
typedef struct _7D1B644A0EEA2B09DD88F0E6B7E788D2 XtConvertArgRec;
typedef struct _XtServerGrabRec *XtServerGrabPtr;
typedef struct _XtServerGrabRec XtServerGrabRec;
typedef struct _XvMCMpegControl XvMCMpegControl;
typedef struct _1647B670B91D8E45F62891AE6C005714 XvMCSurfaceInfo;
struct _FontAliasEntry {char *resolved;};
struct _FontMapReverse {unsigned int (*reverse)(unsigned int, void *);void *data;};
struct _FontResolution {unsigned short x_resolution;unsigned short y_resolution;unsigned short point_size;};
struct _ProtocolStream {unsigned int size;unsigned int alloc;unsigned char *real_top;unsigned char *top;unsigned char *current;};
struct _XkbConfigField {char *field;unsigned char field_id;};
struct _XkbCtrlsAction {unsigned char type;unsigned char flags;unsigned char ctrls3;unsigned char ctrls2;unsigned char ctrls1;unsigned char ctrls0;};
struct _XkbGroupAction {unsigned char type;unsigned char flags;char group_XXX;};
struct _XkbKbdDpyState;
struct _XkbKeyAliasRec {char real[4];char alias[4];};
struct _XkbNameChanges {unsigned int changed;unsigned char first_type;unsigned char num_types;unsigned char first_lvl;unsigned char num_lvls;unsigned char num_aliases;unsigned char num_rg;unsigned char first_key;unsigned char num_keys;unsigned short changed_vmods;unsigned int changed_indicators;unsigned char changed_groups;};
typedef void (*__GLXextFuncPtr)(void);
typedef void (*__dispatch_fn_t)(struct svc_req *, SVCXPRT *);
typedef void (*__gconv_end_fct)(struct __gconv_step *);
typedef struct _FB68FDDBB52DBDF02F327E3198820E09 __kernel_fd_set;
typedef struct _9722585E737591D9DBBFC1CA80083F53 __kernel_fsid_t;
typedef long long __kernel_loff_t;
typedef unsigned short __kernel_mode_t;
typedef unsigned int __kernel_size_t;
typedef int __kernel_time_t;
struct __locale_struct {struct locale_data *__locales[13]; unsigned short *__ctype_b; int *__ctype_tolower; int *__ctype_toupper; char *__names[13];};
enum __ns_cert_types {cert_t_pkix = 0x1,cert_t_spki = 0x2,cert_t_pgp = 0x3,cert_t_url = 0xFD,cert_t_oid = 0xFE,};
struct colorfile_entry {int r;int g;int b;char *colorname;};
enum colornameFormat {PAM_COLORNAME_ENGLISH = 0x0,PAM_COLORNAME_HEXOK = 0x1,};
struct console_font_op {unsigned int op;unsigned int flags;unsigned int width;unsigned int height;unsigned int charcount;unsigned char *data;};
struct consolefontdesc {unsigned short charcount;unsigned short charheight;char *chardata;};
typedef struct user_fpxregs_struct elf_fpxregset_t;
typedef struct _624041EF38A3D722ECC431A5F82DF930 fsCreateACReply;
typedef struct _3BE679DC1FFA371624A790DBC1F4853A fsIDChoiceError;
typedef struct _BCAE7384F079FDFA9DD5F4EFBAB29817 iceAuthReplyMsg;
typedef struct _694E7AF0BC9EE95CDB6E54249E923D7E iceByteOrderMsg;
union internal_auxent;
struct internal_syment;
struct ipx_config_data {unsigned char ipxcfg_auto_select_primary;unsigned char ipxcfg_auto_create_interfaces;};
typedef int (*iw_enum_handler)(int skfd, char *ifname,char * *    args, int count);
typedef struct _AA5DE4F56F55237DE42D9AAC0EFC65DE jas_cmcmptfmt_t;
typedef struct _C6621B22F6499CFAE165CD3E2FB352AA jas_cmshaplut_t;
typedef struct _31065A595C2624CF17F23189AD470066 jas_cmshapmat_t;
typedef struct _EF16C2CE2E165A35D2E9A200C63AE0C2 jas_icctagtab_t;
typedef void lt_dlmutex_lock(void);
typedef struct _880211171E610BEC08A41169F91F4D60 mpu_command_rec;
struct nr_parms_struct {unsigned int quality;unsigned int obs_count;unsigned int ttl;unsigned int timeout;unsigned int ack_delay;unsigned int busy_delay;unsigned int tries;unsigned int window;unsigned int paclen;};
typedef struct _9862706C0A5BB87114D8D1264CC215A3 pmStartProxyMsg;
typedef union _F85E194B51CBDC38F209555F4162D10C pthread_mutex_t;
typedef struct splay_tree_node_s *splay_tree_node;
typedef struct st_signalinfo st_signalinfo_t;
typedef struct td_thr_events td_thr_events_t;
typedef struct _F3EFAA27463B93CC96181BFE5F29A4C5 xAllowEventsReq;
typedef struct _FB619B5CE8E6B82A3D0938CCE57F62CA xChangeHostsReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xCloseDeviceReq;
typedef struct _895A6AA0EC03D09B638DC82C89B5E3C4 xDMXAddInputReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSCapableReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSDisableReq;
typedef struct _4361408BED2235647FC2AC23AD3C77FE xETrapDataEvent;
typedef struct GLXIsDirect xGLXIsDirectReq;
typedef struct _7CC8751860F3412009ACB1FCC844661E xGLXSingleReply;
typedef struct GLXUseXFont xGLXUseXFontReq;
typedef struct _F0BD037E525ACFEA0C1F272EFA8FD580 xGetPropertyReq;
typedef struct _79FC17A0C7A3F31E1105D33CC8C2AA30 xGrabPointerReq;
typedef struct _0C21A611EFF1A0A24872DDA75B66705A xInputClassInfo;
typedef struct _A7019015FC7C2C37D01376608F5D1FF2 xKbdFeedbackCtl;
typedef struct _LbxCopyArea xLbxCopyAreaReq;
typedef struct _LbxFillPoly xLbxFillPolyReq;
typedef struct _3C4960FCBBDB3233211578F053843777 xLbxGetImageReq;
typedef struct _50E42323027751282F1104957020037E xLbxGrabCmapReq;
typedef struct _LbxPolyText xLbxPolyTextReq;
typedef struct _LbxPutImage xLbxPutImageReq;
typedef struct _LbxSwitchEvent xLbxSwitchEvent;
typedef struct _A9B1BAFFCE9059101A2CA55F4DE425B3 xLedFeedbackCtl;
typedef struct _57642C20A930BC40CC56BFA51EFC45F8 xListFontsReply;
typedef struct _EF54914952AB89C7E0EBAF949772487D xListHostsReply;
typedef struct _4E2DFB9F6290197309D31FB10928FA58 xLookupColorReq;
typedef struct _77B5DA89F8222E8D6D7C1ABF47542A30 xPolySegmentReq;
typedef struct _PrintEndDoc xPrintEndDocReq;
typedef struct _PrintEndJob xPrintEndJobReq;
typedef struct _67223C7576264C1E3F5454254FA2FCB7 xPtrFeedbackCtl;
typedef struct _7905F1106D6192C786F48B3D63EB8F32 xQueryColorsReq;
typedef struct _xQueryFontReply xQueryFontReply;
typedef struct _DDAC1D07D44FFC2E5C65864F60CCE1DF xQueryTreeReply;
typedef struct _3578C73785DC808474EBF8D1E351F2D3 xRenderScaleReq;
typedef struct _069CA722659D31B5E21E1ACEADA10473 xSetFontPathReq;
typedef struct _ShapeOffset xShapeOffsetReq;
typedef struct _ShmGetImage xShmGetImageReq;
typedef struct _ShmPutImage xShmPutImageReq;
typedef struct _7905F1106D6192C786F48B3D63EB8F32 xStoreColorsReq;
typedef struct _F52D9FC92091A8183F87E95DDBDC622D xWarpPointerReq;
typedef struct _XDGASetMode xXDGASetModeReq;
typedef struct _326076F7099E6F08FACB2F19F051A23E xXTrapConfigReq;
typedef struct _322E4D740D2A723112F8227414848916 xXevieSendReply;
struct xcb_auth_info_t {int namelen;char *name;int datalen;char *data;};
enum xcb_cap_style_t {XCB_CAP_STYLE_NOT_LAST = 0x0,XCB_CAP_STYLE_BUTT = 0x1,XCB_CAP_STYLE_ROUND = 0x2,XCB_CAP_STYLE_PROJECTING = 0x3,};
enum xcb_circulate_t {XCB_CIRCULATE_RAISE_LOWEST = 0x0,XCB_CIRCULATE_LOWER_HIGHEST = 0x1,};
enum xcb_exposures_t {XCB_EXPOSURES_NOT_ALLOWED = 0x0,XCB_EXPOSURES_ALLOWED = 0x1,XCB_EXPOSURES_DEFAULT = 0x2,};
struct xcb_extension_t { char *name;int global_id;};
enum xcb_fill_rule_t {XCB_FILL_RULE_EVEN_ODD = 0x0,XCB_FILL_RULE_WINDING = 0x1,};
enum xcb_font_draw_t {XCB_FONT_DRAW_LEFT_TO_RIGHT = 0x0,XCB_FONT_DRAW_RIGHT_TO_LEFT = 0x1,};
enum xcb_glx_pbcdt_t {XCB_GLX_PBCDT_WINDOW = 0x8019,XCB_GLX_PBCDT_PBUFFER = 0x801A,};
enum xcb_glx_pbcet_t {XCB_GLX_PBCET_DAMAGED = 0x8017,XCB_GLX_PBCET_SAVED = 0x8018,};
enum xcb_grab_mode_t {XCB_GRAB_MODE_SYNC = 0x0,XCB_GRAB_MODE_ASYNC = 0x1,};
enum xcb_host_mode_t {XCB_HOST_MODE_INSERT = 0x0,XCB_HOST_MODE_DELETE = 0x1,};
enum xcb_map_index_t {XCB_MAP_INDEX_SHIFT = 0x0,XCB_MAP_INDEX_LOCK = 0x1,XCB_MAP_INDEX_CONTROL = 0x2,XCB_MAP_INDEX_1 = 0x3,XCB_MAP_INDEX_2 = 0x4,XCB_MAP_INDEX_3 = 0x5,XCB_MAP_INDEX_4 = 0x6,XCB_MAP_INDEX_5 = 0x7,};
enum xcb_map_state_t {XCB_MAP_STATE_UNMAPPED = 0x0,XCB_MAP_STATE_UNVIEWABLE = 0x1,XCB_MAP_STATE_VIEWABLE = 0x2,};
enum xcb_prop_mode_t {XCB_PROP_MODE_REPLACE = 0x0,XCB_PROP_MODE_PREPEND = 0x1,XCB_PROP_MODE_APPEND = 0x2,};
enum xcb_record_cs_t {XCB_RECORD_CS_CURRENT_CLIENTS = 0x1,XCB_RECORD_CS_FUTURE_CLIENTS = 0x2,XCB_RECORD_CS_ALL_CLIENTS = 0x3,};
enum xcb_render_cp_t {XCB_RENDER_CP_REPEAT = 0x1,XCB_RENDER_CP_ALPHA_MAP = 0x2,XCB_RENDER_CP_ALPHA_X_ORIGIN = 0x4,XCB_RENDER_CP_ALPHA_Y_ORIGIN = 0x8,XCB_RENDER_CP_CLIP_X_ORIGIN = 0x10,XCB_RENDER_CP_CLIP_Y_ORIGIN = 0x20,XCB_RENDER_CP_CLIP_MASK = 0x40,XCB_RENDER_CP_GRAPHICS_EXPOSURE = 0x80,XCB_RENDER_CP_SUBWINDOW_MODE = 0x100,XCB_RENDER_CP_POLY_EDGE = 0x200,XCB_RENDER_CP_POLY_MODE = 0x400,XCB_RENDER_CP_DITHER = 0x800,XCB_RENDER_CP_COMPONENT_ALPHA = 0x1000,};
typedef struct _xkbModsWireDesc xkbModsWireDesc;
typedef struct _xkmBehaviorDesc xkmBehaviorDesc;
typedef struct _xkmGeometryDesc xkmGeometryDesc;
typedef struct _7086C2867C7D4B0306B00A1789D67F56 xvAttributeInfo;
typedef struct _7801A91C37AF2AAC45BD7DD78FEE34EA xvGrabPortReply;
typedef struct _DEEBBF9E678AFA2413B9A4D363D90472 xvUngrabPortReq;
typedef struct _BE4469CD69A158FEF141EB99E29DC657 xvmcSurfaceInfo;
enum ypbind_resptype {YPBIND_SUCC_VAL = 0x1,YPBIND_FAIL_VAL = 0x2,};
struct AUTH__auth_ops {void (*ah_nextverf)(AUTH *);int (*ah_marshal)(AUTH *, XDR *);int (*ah_validate)(AUTH *, struct opaque_auth *);int (*ah_refresh)(AUTH *);void (*ah_destroy)(AUTH *);};
typedef struct _EA67C4467E5D392AEC3890F142F1A94F AsciiClassPart;
typedef struct _AsciiSrcRec *AsciiSrcObject;
typedef struct _BitmapExtra *BitmapExtraPtr;
typedef struct _BitmapExtra BitmapExtraRec;
typedef struct _BoxClassRec *BoxWidgetClass;
typedef struct _ConstraintPart ConstraintPart;
typedef struct _ConverterRec **ConverterTable;
typedef struct _DialogClassRec DialogClassRec;
typedef struct _D30E1CD2E9753287075FA3466243327C Elf_Options_Hw;
typedef unsigned int FSBitmapFormat;
typedef struct FTC_ImageCacheRec_ *FTC_ImageCache;
typedef struct FT_BitmapGlyphRec_ *FT_BitmapGlyph;
typedef struct FT_Bitmap_Size_ FT_Bitmap_Size;
typedef struct FT_Glyph_Class_ FT_Glyph_Class;
typedef struct FT_IncrementalRec_ *FT_Incremental;
typedef struct FT_ListNodeRec_ FT_ListNodeRec;
enum FT_Pixel_Mode_ {FT_PIXEL_MODE_NONE = 0x0,FT_PIXEL_MODE_MONO = 0x1,FT_PIXEL_MODE_GRAY = 0x2,FT_PIXEL_MODE_GRAY2 = 0x3,FT_PIXEL_MODE_GRAY4 = 0x4,FT_PIXEL_MODE_LCD = 0x5,FT_PIXEL_MODE_LCD_V = 0x6,FT_PIXEL_MODE_MAX = 0x7,};
union FT_StreamDesc_ {int value;void *pointer;};
typedef struct _FontBCEntry *FontBCEntryPtr;
typedef struct _FontBCEntry FontBCEntryRec;
typedef struct foo_mesa_context *FooMesaContext;
typedef struct _JAWT_Rectangle JAWT_Rectangle;
typedef struct LIBMTP_track_struct LIBMTP_track_t;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F LabelClassPart;
enum MACRO_ALLPERMS {ALLPERMS = 4095,};
enum MACRO_ANNOUNCE {ANNOUNCE = 3,};
enum MACRO_AREGTYPE {AREGTYPE = 0,LNKTYPE = 49,};
enum MACRO_AUTHTYPE {AUTHTYPE_NULL = 0,AUTHTYPE_KERBEROS_V4 = 1,AUTHTYPE_KERBEROS_V5 = 2,AUTHTYPE_SPX = 3,AUTHTYPE_MINK = 4,AUTHTYPE_CNT = 5,AUTHTYPE_TEST = 99,};
enum MACRO_AllHints {AllHints = 127,XUrgencyHint = 256,};
enum MACRO_ArcChord {ArcChord = 0,ArcPieSlice = 1,};
enum MACRO_B1000000 {B1000000 = 0x1008,};
enum MACRO_B1152000 {B1152000 = 0x1009,};
enum MACRO_B1500000 {B1500000 = 0x100A,};
enum MACRO_B2000000 {B2000000 = 0x100B,};
enum MACRO_B2500000 {B2500000 = 0x100C,};
enum MACRO_B3000000 {B3000000 = 0x100D,};
enum MACRO_B3500000 {B3500000 = 0x100E,};
enum MACRO_B4000000 {B4000000 = 0x100F,};
enum MACRO_BFD_FORT {BFD_FORT_COMM_DEFAULT_VALUE = 0,};
enum MACRO_BLKRAGET {BLKRAGET = 0x1263,};
enum MACRO_BLKRASET {BLKRASET = 0x1262,};
enum MACRO_BLKROGET {BLKROGET = 0x125E,};
enum MACRO_BLKROSET {BLKROSET = 0x125D,};
enum MACRO_BadAlloc {BadAlloc = 11,};
enum MACRO_BadColor {BadColor = 12,};
enum MACRO_BottomIf {BottomIf = 3,Opposite = 4,};
enum MACRO_CACHE_16 {CACHE_16_BIT_GLYPHS = 1,CACHE_ALL_GLYPHS = 2,};
enum MACRO_CDISCARD {CDISCARD = 15,};
enum MACRO_CONSOLES {MIN_NR_CONSOLES = 1,MAX_NR_CONSOLES = 63,MAX_NR_USER_CONSOLES = 63,};
enum MACRO_CONTINUE {CONTINUE = 3,TRANSIENT = 4,};
enum MACRO_CONTTYPE {CONTTYPE = 55,};
enum MACRO_CPRepeat {CPRepeat = 1,CPAlphaMap = 2,CPAlphaXOrigin = 4,CPAlphaYOrigin = 8,CPClipXOrigin = 16,CPClipYOrigin = 32,CPClipMask = 64,CPGraphicsExposure = 128,CPSubwindowMode = 256,CPPolyEdge = 512,CPPolyMode = 1024,CPDither = 2048,CPComponentAlpha = 4096,};
enum MACRO_CREPRINT {CREPRINT = 18,};
enum MACRO_CURSES_H {CURSES_H = 1,};
enum MACRO_DSP_BIND {DSP_BIND_QUERY = 0x0,DSP_BIND_FRONT = 0x1,DSP_BIND_SURR = 0x2,DSP_BIND_CENTER_LFE = 0x4,DSP_BIND_HANDSET = 0x8,DSP_BIND_MIC = 0x10,DSP_BIND_MODEM1 = 0x20,DSP_BIND_MODEM2 = 0x40,DSP_BIND_I2S = 0x80,DSP_BIND_SPDIF = 0x100,};
enum MACRO_DT_ALPHA {DT_ALPHA_PLTRO = 1879048192,DT_ALPHA_NUM = 1,};
enum MACRO_DT_PPC64 {DT_PPC64_GLINK = 1879048192,DT_PPC64_OPD = 1879048193,DT_PPC64_OPDSZ = 1879048194,DT_PPC64_NUM = 3,};
enum MACRO_DT_SPARC {DT_SPARC_REGISTER = 0x70000001,DT_SPARC_NUM = 0x2,};
enum MACRO_DvString {DvString = 1,};
enum MACRO_EF_ALPHA {EF_ALPHA_32BIT = 1,EF_ALPHA_CANRELAX = 2,};
enum MACRO_EI_CLASS {EI_CLASS = 4,};
enum MACRO_ELFOSABI {ELFOSABI_NONE = 0,ELFOSABI_SYSV = 0,ELFOSABI_HPUX = 1,ELFOSABI_NETBSD = 2,ELFOSABI_LINUX = 3,ELFOSABI_SOLARIS = 6,ELFOSABI_AIX = 7,ELFOSABI_IRIX = 8,ELFOSABI_FREEBSD = 9,ELFOSABI_TRU64 = 10,ELFOSABI_MODESTO = 11,ELFOSABI_OPENBSD = 12,ELFOSABI_ARM = 97,ELFOSABI_STANDALONE = 255,};
enum MACRO_ELF_NOTE {ELF_NOTE_PAGESIZE_HINT = 1,ELF_NOTE_ABI = 1,ELF_NOTE_OS_LINUX = 0,ELF_NOTE_OS_GNU = 1,ELF_NOTE_OS_SOLARIS2 = 2,ELF_NOTE_OS_FREEBSD = 3,};
enum MACRO_ENOSPACE {ENOSPACE = 3,EBADOP = 4,};
enum MACRO_ETHERMIN {ETHERMIN = 46,};
enum MACRO_ETHERMTU {ETHERMTU = 1500,};
enum MACRO_EVBUFFER {EVBUFFER_READ = 0x1,EVBUFFER_WRITE = 0x2,EVBUFFER_EOF = 0x10,EVBUFFER_ERROR = 0x20,EVBUFFER_TIMEOUT = 0x40,};
enum MACRO_EXTENDED {EXTENDED_SAP = 0xAA,};
enum MACRO_FIFOTYPE {FIFOTYPE = 54,};
enum MACRO_FIOASYNC {FIOASYNC = 0x5452,};
enum MACRO_FIONCLEX {FIONCLEX = 0x5450,};
enum MACRO_FIONREAD {FIONREAD = 0x541B,};
enum MACRO_FIOQSIZE {FIOQSIZE = 0x5460,};
enum MACRO_FMNAMESZ {FMNAMESZ = 8,};
enum MACRO_FREETYPE {FREETYPE_MAJOR = 2,FREETYPE_MINOR = 2,FREETYPE_PATCH = 2,};
enum MACRO_FS_Reply {FS_Reply = 0,FS_Error = 1,FS_Event = 2,FS_Noop = 0,FS_ListExtensions = 1,FS_QueryExtension = 2,FS_ListCatalogues = 3,FS_SetCatalogues = 4,FS_GetCatalogues = 5,FS_SetEventMask = 6,FS_GetEventMask = 7,FS_CreateAC = 8,FS_FreeAC = 9,FS_SetAuthorization = 10,FS_SetResolution = 11,FS_GetResolution = 12,FS_ListFonts = 13,FS_ListFontsWithXInfo = 14,FS_OpenBitmapFont = 15,FS_QueryXInfo = 16,FS_QueryXExtents8 = 17,FS_QueryXExtents16 = 18,FS_QueryXBitmaps8 = 19,FS_QueryXBitmaps16 = 20,FS_CloseFont = 21,};
enum MACRO_FT_CURVE {FT_CURVE_TAG_ON = 1,FT_CURVE_TAG_CONIC = 0,FT_CURVE_TAG_CUBIC = 2,FT_CURVE_TAG_TOUCH_X = 8,FT_CURVE_TAG_TOUCH_Y = 16,FT_CURVE_TAG_TOUCH_BOTH = 24,FT_Curve_Tag_On = 1,FT_Curve_Tag_Conic = 0,FT_Curve_Tag_Cubic = 2,FT_Curve_Tag_Touch_X = 8,FT_Curve_Tag_Touch_Y = 16,FT_RASTER_FLAG_DEFAULT = 0,FT_RASTER_FLAG_AA = 1,FT_RASTER_FLAG_DIRECT = 2,FT_RASTER_FLAG_CLIP = 4,};
enum MACRO_FT_PARAM {FT_PARAM_TAG_UNPATENTED_HINTING = 1970172001,};
enum MACRO_FocusOut {FocusOut = 10,};
enum MACRO_GXinvert {GXinvert = 0xA,};
enum MACRO_HAS_LOAD {HAS_LOAD_PAGE = 0x1000,};
enum MACRO_HFIXEDSZ {HFIXEDSZ = 12,};
enum MACRO_ICMP6_RR {ICMP6_RR_PCOUSE_RAFLAGS_ONLINK = 0x20,ICMP6_RR_PCOUSE_RAFLAGS_AUTO = 0x10,ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME = 0x80,ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME = 0x40,ICMP6_RR_RESULT_FLAGS_OOB = 0x200,ICMP6_RR_RESULT_FLAGS_FORBIDDEN = 0x100,};
enum MACRO_ICMP_NET {ICMP_NET_UNREACH = 0,ICMP_HOST_UNREACH = 1,ICMP_PROT_UNREACH = 2,ICMP_PORT_UNREACH = 3,ICMP_FRAG_NEEDED = 4,ICMP_SR_FAILED = 5,ICMP_NET_UNKNOWN = 6,ICMP_HOST_UNKNOWN = 7,ICMP_HOST_ISOLATED = 8,ICMP_NET_ANO = 9,ICMP_HOST_ANO = 10,ICMP_NET_UNR_TOS = 11,ICMP_HOST_UNR_TOS = 12,ICMP_PKT_FILTERED = 13,ICMP_PREC_VIOLATION = 14,ICMP_PREC_CUTOFF = 15,};
enum MACRO_IFNAMSIZ {IFNAMSIZ = 16,};
enum MACRO_INBUFFER {INBUFFER_SIZE = 8192,OUTBUFFER_SIZE = 4096,};
enum MACRO_INFINITY {INFINITY = 0x7FFFFFFF,};
enum MACRO_IPDEFTTL {IPDEFTTL = 64,};
enum MACRO_IPOPT_TS {IPOPT_TS_TSONLY = 0,IPOPT_TS_TSANDADDR = 1,IPOPT_TS_PRESPEC = 3,IPOPT_SECUR_UNCLASS = 0,IPOPT_SECUR_CONFID = 61749,IPOPT_SECUR_EFTO = 30874,IPOPT_SECUR_MMMM = 48205,IPOPT_SECUR_RESTR = 44819,IPOPT_SECUR_SECRET = 55176,IPOPT_SECUR_TOPSECRET = 27589,};
enum MACRO_IPTTLDEC {IPTTLDEC = 1,};
enum MACRO_IWEVQUAL {IWEVQUAL = 0x8C01,};
enum MACRO_KDENABIO {KDENABIO = 0x4B36,};
enum MACRO_KDFONTOP {KDFONTOP = 0x4B72,};
enum MACRO_KDGETLED {KDGETLED = 0x4B31,};
enum MACRO_KDGKBENT {KDGKBENT = 0x4B46,};
enum MACRO_KDGKBLED {KDGKBLED = 0x4B64,};
enum MACRO_KDKBDREP {KDKBDREP = 0x4B52,};
enum MACRO_KDMKTONE {KDMKTONE = 0x4B30,};
enum MACRO_KDSETLED {KDSETLED = 0x4B32,};
enum MACRO_KDSKBENT {KDSKBENT = 0x4B47,};
enum MACRO_KDSKBLED {KDSKBLED = 0x4B65,};
enum MACRO_KEYBOARD {KEYBOARD = 1,};
enum MACRO_KEYBYTES {KEYBYTES = 24,};
enum MACRO_KEY_PROG {KEY_PROG = 100029,KEY_VERS = 1,KEY_SET = 1,KEY_ENCRYPT = 2,KEY_DECRYPT = 3,KEY_GEN = 4,KEY_GETCRED = 5,KEY_VERS2 = 2,KEY_ENCRYPT_PK = 6,KEY_DECRYPT_PK = 7,KEY_NET_PUT = 8,KEY_NET_GET = 9,KEY_GET_CONV = 10,};
enum MACRO_KeyClass {KeyClass = 0,ButtonClass = 1,ValuatorClass = 2,};
enum MACRO_KeyPress {KeyPress = 2,};
enum MACRO_LSBFirst {LSBFirst = 0,MSBFirst = 1,};
enum MACRO_LbxEvent {LbxEvent = 0,LbxQuickMotionDeltaEvent = 1,LbxNumberEvents = 2,};
enum MACRO_MAXLABEL {MAXLABEL = 63,};
enum MACRO_MAXSHORT {MAXSHORT = 32767,};
enum MACRO_MAX_ADDR {MAX_ADDR_LEN = 7,};
enum MACRO_MAX_AUTH {MAX_AUTH_BYTES = 400,};
enum MACRO_MAX_LIFE {MAX_LIFE = 60,};
enum MACRO_MAX_PATH {MAX_PATH_LEN = 1024,MAX_FILEID = 32,};
enum MACRO_MIDI_CAP {MIDI_CAP_MPU401 = 1,};
enum MACRO_MINSHORT {MINSHORT = -32767,};
enum MACRO_MTMKPART {MTMKPART = 34,};
enum MACRO_MTSETBLK {MTSETBLK = 20,};
enum MACRO_MTUNLOAD {MTUNLOAD = 31,MTCOMPRESSION = 32,};
enum MACRO_MTUNLOCK {MTUNLOCK = 29,};
enum MACRO_NEGATIVE {XTestX_NEGATIVE = 0x4,XTestY_NEGATIVE = 0x8,};
enum MACRO_NIS_PROG {NIS_PROG = 100300,NIS_VERSION = 3,NIS_LOOKUP = 1,NIS_ADD = 2,NIS_MODIFY = 3,NIS_REMOVE = 4,NIS_IBLIST = 5,NIS_IBADD = 6,NIS_IBMODIFY = 7,NIS_IBREMOVE = 8,NIS_IBFIRST = 9,NIS_IBNEXT = 10,NIS_FINDDIRECTORY = 12,NIS_STATUS = 14,NIS_DUMPLOG = 15,NIS_DUMP = 16,NIS_CALLBACK = 17,NIS_CPTIME = 18,NIS_CHECKPOINT = 19,NIS_PING = 20,NIS_SERVSTATE = 21,NIS_MKDIR = 22,NIS_RMDIR = 23,NIS_UPDKEYS = 24,};
enum MACRO_NIS_READ {NIS_READ_ACC = 1,NIS_MODIFY_ACC = 2,NIS_CREATE_ACC = 4,NIS_DESTROY_ACC = 8,};
enum MACRO_NO_CACHE {NO_CACHE = 16,};
enum MACRO_NO_SENSE {NO_SENSE = 0x0,};
enum MACRO_NTELOPTS {NTELOPTS = 40,};
enum MACRO_NULLPROC {NULLPROC = 0,UDPMSGSIZE = 8800,};
enum MACRO_NUMCOUNT {NUMCOUNT = 39,};
enum MACRO_NUMWRITE {NUMWRITE = 33,STRWRITE = 394,};
enum MACRO_NoExpose {NoExpose = 14,};
enum MACRO_NoSymbol {NoSymbol = 0,};
enum MACRO_NullFont {NullFont = 0,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_O_BINARY {O_BINARY = 0,};
enum MACRO_PACKETSZ {PACKETSZ = 512,MAXDNAME = 1025,};
enum MACRO_PARANOIA {PARANOIA_CB_READ = 0,PARANOIA_CB_VERIFY = 1,PARANOIA_CB_FIXUP_EDGE = 2,PARANOIA_CB_FIXUP_ATOM = 3,PARANOIA_CB_SCRATCH = 4,PARANOIA_CB_REPAIR = 5,PARANOIA_CB_SKIP = 6,PARANOIA_CB_DRIFT = 7,PARANOIA_CB_BACKOFF = 8,PARANOIA_CB_OVERLAP = 9,PARANOIA_CB_FIXUP_DROPPED = 10,PARANOIA_CB_FIXUP_DUPED = 11,PARANOIA_CB_READERR = 12,PARANOIA_MODE_FULL = 255,PARANOIA_MODE_DISABLE = 0,PARANOIA_MODE_VERIFY = 1,PARANOIA_MODE_FRAGMENT = 2,PARANOIA_MODE_OVERLAP = 4,PARANOIA_MODE_SCRATCH = 8,PARANOIA_MODE_REPAIR = 16,PARANOIA_MODE_NEVERSKIP = 32,};
enum MACRO_PBM_TYPE {PBM_TYPE = 20529,};
enum MACRO_PEXECUTE {PEXECUTE_FIRST = 1,PEXECUTE_LAST = 2,PEXECUTE_ONE = 3,PEXECUTE_SEARCH = 4,PEXECUTE_VERBOSE = 8,};
enum MACRO_PF_Other {PF_Other = 0,PF_Apollo = 10,PF_ATT = 20,PF_Cray1 = 30,PF_Cray2 = 31,PF_DECUltrix = 40,PF_DECVMS = 41,PF_DECVT1000 = 42,PF_DECXTerm = 43,PF_DECELN = 44,PF_DECOSF1 = 45,PF_HP9000s800 = 50,PF_HP9000s300 = 51,PF_IBMAT = 60,PF_IBMRT = 61,PF_IBMPS2 = 62,PF_IBMRS = 63,PF_MacII = 70,PF_Pegasus = 80,PF_SGI = 90,PF_Sony = 100,PF_Sun3 = 110,PF_Sun386i = 111,PF_SunSparc = 112,};
enum MACRO_PGM_TYPE {PGM_TYPE = 20530,PGM_TRANSPARENT = 0,};
enum MACRO_PMAPPORT {PMAPPORT = 111,};
enum MACRO_PMAPPROC {PMAPPROC_NULL = 0,PMAPPROC_SET = 1,PMAPPROC_UNSET = 2,PMAPPROC_GETPORT = 3,PMAPPROC_DUMP = 4,PMAPPROC_CALLIT = 5,};
enum MACRO_PMAPPROG {PMAPPROG = 100000,};
enum MACRO_PMAPVERS {PMAPVERS = 2,};
enum MACRO_POINTERS {SAVE_POINTERS = 0x2,RESTORE_POINTERS = 0x3,};
enum MACRO_PPM_TYPE {PPM_TYPE = 20531,};
enum MACRO_PictOpIn {PictOpIn = 5,};
enum MACRO_QFIXEDSZ {QFIXEDSZ = 4,RRFIXEDSZ = 10,};
enum MACRO_READ_TOC {READ_TOC = 0x43,};
enum MACRO_REASSIGN {REASSIGN_BLOCKS = 0x7,};
enum MACRO_RECOVERY {INITIATE_RECOVERY = 0xF,RELEASE_RECOVERY = 0x10,};
enum MACRO_REQ_LEFT {REQ_LEFT_ITEM = 512,REQ_RIGHT_ITEM = 513,REQ_UP_ITEM = 514,REQ_DOWN_ITEM = 515,REQ_SCR_ULINE = 516,REQ_SCR_DLINE = 517,REQ_SCR_DPAGE = 518,REQ_SCR_UPAGE = 519,REQ_FIRST_ITEM = 520,REQ_LAST_ITEM = 521,REQ_NEXT_ITEM = 522,REQ_PREV_ITEM = 523,REQ_TOGGLE_ITEM = 524,REQ_CLEAR_PATTERN = 525,REQ_BACK_PATTERN = 526,REQ_NEXT_MATCH = 527,REQ_PREV_MATCH = 528,};
enum MACRO_RESERVED {ADD_RESERVED = 2048,REM_RESERVED = 4096,};
enum MACRO_RE_NREGS {RE_NREGS = 30,};
enum MACRO_ROSE_DTE {ROSE_DTE_ORIGINATED = 0x0,ROSE_NUMBER_BUSY = 0x1,ROSE_INVALID_FACILITY = 0x3,ROSE_NETWORK_CONGESTION = 0x5,ROSE_OUT_OF_ORDER = 0x9,ROSE_ACCESS_BARRED = 0xB,ROSE_NOT_OBTAINABLE = 0xD,ROSE_REMOTE_PROCEDURE = 0x11,ROSE_LOCAL_PROCEDURE = 0x13,ROSE_SHIP_ABSENT = 0x39,};
enum MACRO_R_PARISC {R_PARISC_NONE = 0,R_PARISC_DIR32 = 1,R_PARISC_DIR21L = 2,R_PARISC_DIR17R = 3,R_PARISC_DIR17F = 4,R_PARISC_DIR14R = 6,R_PARISC_PCREL32 = 9,R_PARISC_PCREL21L = 10,R_PARISC_PCREL17R = 11,R_PARISC_PCREL17F = 12,R_PARISC_PCREL14R = 14,R_PARISC_DPREL21L = 18,R_PARISC_DPREL14R = 22,R_PARISC_GPREL21L = 26,R_PARISC_GPREL14R = 30,R_PARISC_LTOFF21L = 34,R_PARISC_LTOFF14R = 38,R_PARISC_SECREL32 = 41,R_PARISC_SEGBASE = 48,R_PARISC_SEGREL32 = 49,R_PARISC_PLTOFF21L = 50,R_PARISC_PLTOFF14R = 54,R_PARISC_LTOFF_FPTR32 = 57,R_PARISC_LTOFF_FPTR21L = 58,R_PARISC_LTOFF_FPTR14R = 62,R_PARISC_FPTR64 = 64,R_PARISC_PLABEL32 = 65,R_PARISC_PCREL64 = 72,R_PARISC_PCREL22F = 74,R_PARISC_PCREL14WR = 75,R_PARISC_PCREL14DR = 76,R_PARISC_PCREL16F = 77,R_PARISC_PCREL16WF = 78,R_PARISC_PCREL16DF = 79,R_PARISC_DIR64 = 80,R_PARISC_DIR14WR = 83,R_PARISC_DIR14DR = 84,R_PARISC_DIR16F = 85,R_PARISC_DIR16WF = 86,R_PARISC_DIR16DF = 87,R_PARISC_GPREL64 = 88,R_PARISC_GPREL14WR = 91,R_PARISC_GPREL14DR = 92,R_PARISC_GPREL16F = 93,R_PARISC_GPREL16WF = 94,R_PARISC_GPREL16DF = 95,R_PARISC_LTOFF64 = 96,R_PARISC_LTOFF14WR = 99,R_PARISC_LTOFF14DR = 100,R_PARISC_LTOFF16F = 101,R_PARISC_LTOFF16WF = 102,R_PARISC_LTOFF16DF = 103,R_PARISC_SECREL64 = 104,R_PARISC_SEGREL64 = 112,R_PARISC_PLTOFF14WR = 115,R_PARISC_PLTOFF14DR = 116,R_PARISC_PLTOFF16F = 117,R_PARISC_PLTOFF16WF = 118,R_PARISC_PLTOFF16DF = 119,R_PARISC_LTOFF_FPTR64 = 120,R_PARISC_LTOFF_FPTR14WR = 123,R_PARISC_LTOFF_FPTR14DR = 124,R_PARISC_LTOFF_FPTR16F = 125,R_PARISC_LTOFF_FPTR16WF = 126,R_PARISC_LTOFF_FPTR16DF = 127,R_PARISC_LORESERVE = 128,R_PARISC_COPY = 128,R_PARISC_IPLT = 129,R_PARISC_EPLT = 130,R_PARISC_TPREL32 = 153,R_PARISC_TPREL21L = 154,R_PARISC_TPREL14R = 158,R_PARISC_LTOFF_TP21L = 162,R_PARISC_LTOFF_TP14R = 166,R_PARISC_LTOFF_TP14F = 167,R_PARISC_TPREL64 = 216,R_PARISC_TPREL14WR = 219,R_PARISC_TPREL14DR = 220,R_PARISC_TPREL16F = 221,R_PARISC_TPREL16WF = 222,R_PARISC_TPREL16DF = 223,R_PARISC_LTOFF_TP64 = 224,R_PARISC_LTOFF_TP14WR = 227,R_PARISC_LTOFF_TP14DR = 228,R_PARISC_LTOFF_TP16F = 229,R_PARISC_LTOFF_TP16WF = 230,R_PARISC_LTOFF_TP16DF = 231,R_PARISC_HIRESERVE = 255,};
enum MACRO_Relative {Relative = 0,Absolute = 1,};
enum MACRO_SECURITY {SECURITY_MAJOR_VERSION = 1,SECURITY_MINOR_VERSION = 0,};
enum MACRO_SEM_STAT {SEM_STAT = 18,SEM_INFO = 19,};
enum MACRO_SEM_UNDO {SEM_UNDO = 0x1000,};
enum MACRO_SHF_MIPS {SHF_MIPS_GPREL = 0x10000000,SHF_MIPS_MERGE = 0x20000000,SHF_MIPS_ADDR = 0x40000000,SHF_MIPS_STRINGS = 0x80000000,SHF_MIPS_NOSTRIP = 0x8000000,SHF_MIPS_LOCAL = 0x4000000,SHF_MIPS_NAMES = 0x2000000,SHF_MIPS_NODUPE = 0x1000000,};
enum MACRO_SHN_MIPS {SHN_MIPS_ACOMMON = 0xFF00,SHN_MIPS_TEXT = 0xFF01,SHN_MIPS_DATA = 0xFF02,SHN_MIPS_SCOMMON = 0xFF03,SHN_MIPS_SUNDEFINED = 0xFF04,};
enum MACRO_SHT_MIPS {SHT_MIPS_LIBLIST = 0x70000000,SHT_MIPS_MSYM = 0x70000001,SHT_MIPS_CONFLICT = 0x70000002,SHT_MIPS_GPTAB = 0x70000003,SHT_MIPS_UCODE = 0x70000004,SHT_MIPS_DEBUG = 0x70000005,SHT_MIPS_REGINFO = 0x70000006,SHT_MIPS_PACKAGE = 0x70000007,SHT_MIPS_PACKSYM = 0x70000008,SHT_MIPS_RELD = 0x70000009,SHT_MIPS_IFACE = 0x7000000B,SHT_MIPS_CONTENT = 0x7000000C,SHT_MIPS_OPTIONS = 0x7000000D,SHT_MIPS_SHDR = 0x70000010,SHT_MIPS_FDESC = 0x70000011,SHT_MIPS_EXTSYM = 0x70000012,SHT_MIPS_DENSE = 0x70000013,SHT_MIPS_PDESC = 0x70000014,SHT_MIPS_LOCSYM = 0x70000015,SHT_MIPS_AUXSYM = 0x70000016,SHT_MIPS_OPTSYM = 0x70000017,SHT_MIPS_LOCSTR = 0x70000018,SHT_MIPS_LINE = 0x70000019,SHT_MIPS_RFDESC = 0x7000001A,SHT_MIPS_DELTASYM = 0x7000001B,SHT_MIPS_DELTAINST = 0x7000001C,SHT_MIPS_DELTACLASS = 0x7000001D,SHT_MIPS_DWARF = 0x7000001E,SHT_MIPS_DELTADECL = 0x7000001F,SHT_MIPS_SYMBOL_LIB = 0x70000020,SHT_MIPS_EVENTS = 0x70000021,SHT_MIPS_TRANSLATE = 0x70000022,SHT_MIPS_PIXIE = 0x70000023,SHT_MIPS_XLATE = 0x70000024,SHT_MIPS_XLATE_DEBUG = 0x70000025,SHT_MIPS_WHIRL = 0x70000026,SHT_MIPS_EH_REGION = 0x70000027,SHT_MIPS_XLATE_OLD = 0x70000028,SHT_MIPS_PDR_EXCEPTION = 0x70000029,};
enum MACRO_SHT_SUNW {SHT_SUNW_dof = 0x6FFFFFF4,SHT_SUNW_cap = 0x6FFFFFF5,SHT_SUNW_SIGNATURE = 0x6FFFFFF6,SHT_SUNW_ANNOTATE = 0x6FFFFFF7,SHT_SUNW_DEBUGSTR = 0x6FFFFFF8,SHT_SUNW_DEBUG = 0x6FFFFFF9,SHT_SUNW_verdef = 0x6FFFFFFD,SHT_SUNW_verneed = 0x6FFFFFFE,SHT_SUNW_versym = 0x6FFFFFFF,SHT_SPARC_GOTDATA = 0x70000000,SHT_AMD64_UNWIND = 0x70000001,};
enum MACRO_SIOCDARP {SIOCDARP = 0x8953,};
enum MACRO_SIOCGARP {SIOCGARP = 0x8954,};
enum MACRO_SIOCSARP {SIOCSARP = 0x8955,};
enum MACRO_SM_Error {SM_Error = 0,SM_RegisterClient = 1,SM_RegisterClientReply = 2,SM_SaveYourself = 3,SM_SaveYourselfRequest = 4,SM_InteractRequest = 5,SM_Interact = 6,SM_InteractDone = 7,SM_SaveYourselfDone = 8,SM_Die = 9,SM_ShutdownCancelled = 10,SM_CloseConnection = 11,SM_SetProperties = 12,SM_DeleteProperties = 13,SM_GetProperties = 14,SM_PropertiesReply = 15,SM_SaveYourselfPhase2Request = 16,SM_SaveYourselfPhase2 = 17,SM_SaveComplete = 18,};
enum MACRO_SOL_AX25 {SOL_AX25 = 257,};
enum MACRO_SOL_IPV6 {SOL_IPV6 = 41,SOL_ICMPV6 = 58,};
enum MACRO_SOL_ROSE {SOL_ROSE = 260,};
enum MACRO_SPRAYMAX {SPRAYMAX = 8845,};
enum MACRO_STB_MIPS {STB_MIPS_SPLIT_COMMON = 13,};
enum MACRO_STRCOUNT {STRCOUNT = 414,};
enum MACRO_SVGAMESA {SVGAMESA_MAJOR_VERSION = 4,SVGAMESA_MINOR_VERSION = 0,};
enum MACRO_SYS_NMLN {SYS_NMLN = 65,};
enum MACRO_ShapeSet {ShapeSet = 0,ShapeUnion = 1,ShapeIntersect = 2,};
enum MACRO_SyncBoth {SyncBoth = 7,};
enum MACRO_TCIFLUSH {TCIFLUSH = 0,TCOFLUSH = 1,TCIOFLUSH = 2,};
enum MACRO_TIME_INS {TIME_INS = 1,TIME_DEL = 2,TIME_OOP = 3,TIME_WAIT = 4,TIME_ERROR = 5,TIME_BAD = 5,};
enum MACRO_TIOCCBRK {TIOCCBRK = 0x5428,};
enum MACRO_TIOCCONS {TIOCCONS = 0x541D,};
enum MACRO_TIOCEXCL {TIOCEXCL = 0x540C,};
enum MACRO_TIOCGETD {TIOCGETD = 0x5424,};
enum MACRO_TIOCGSID {TIOCGSID = 0x5429,};
enum MACRO_TIOCMBIC {TIOCMBIC = 0x5417,};
enum MACRO_TIOCMBIS {TIOCMBIS = 0x5416,};
enum MACRO_TIOCMGET {TIOCMGET = 0x5415,};
enum MACRO_TIOCMSET {TIOCMSET = 0x5418,};
enum MACRO_TIOCNXCL {TIOCNXCL = 0x540D,};
enum MACRO_TIOCOUTQ {TIOCOUTQ = 0x5411,};
enum MACRO_TIOCSBRK {TIOCSBRK = 0x5427,};
enum MACRO_TIOCSETD {TIOCSETD = 0x5423,};
enum MACRO_TMR_WAIT {TMR_WAIT_REL = 1,TMR_WAIT_ABS = 2,TMR_STOP = 3,TMR_START = 4,TMR_CONTINUE = 5,TMR_TEMPO = 6,TMR_ECHO = 8,TMR_CLOCK = 9,TMR_SPP = 10,TMR_TIMESIG = 11,};
enum MACRO_TVERSLEN {TVERSLEN = 2,};
enum MACRO_UNLOCKED {UNLOCKED = 0,BUFSIZE = 2048,};
enum MACRO_USRQUOTA {USRQUOTA = 0,GRPQUOTA = 1,};
enum MACRO_Unsorted {Unsorted = 0,YSorted = 1,YXSorted = 2,};
enum MACRO_VDISCARD {VDISCARD = 13,};
enum MACRO_VREPRINT {VREPRINT = 12,};
enum MACRO_WAITTIME {MIN_WAITTIME = 2,MAX_WAITTIME = 5,};
enum MACRO_WILDCARD {PIXELSIZE_WILDCARD = 0x10,POINTSIZE_WILDCARD = 0x20,};
enum MACRO_WIRELESS {WIRELESS_EXT = 21,};
enum MACRO_WRITE_10 {WRITE_10 = 0x2A,};
enum MACRO_WRITE_12 {WRITE_12 = 0xAA,WRITE_VERIFY_12 = 0xAE,};
enum MACRO_WSTOPPED {WSTOPPED = 2,WEXITED = 4,WCONTINUED = 8,WNOWAIT = 16777216,__WNOTHREAD = 536870912,__WALL = 1073741824,__WCLONE = -2147483648,};
enum MACRO_XAW_LIST {XAW_LIST_NONE = -1,};
enum MACRO_XF86MISC {XF86MISC_MAJOR_VERSION = 0,XF86MISC_MINOR_VERSION = 9,};
enum MACRO_XF86RUSH {XF86RUSH_MAJOR_VERSION = 1,XF86RUSH_MINOR_VERSION = 1,};
enum MACRO_XK_Reset {XK_Reset = 0x1000FF6C,XK_System = 0x1000FF6D,XK_User = 0x1000FF6E,XK_ClearLine = 0x1000FF6F,XK_InsertLine = 0x1000FF70,XK_DeleteLine = 0x1000FF71,XK_InsertChar = 0x1000FF72,XK_DeleteChar = 0x1000FF73,XK_BackTab = 0x1000FF74,XK_KP_BackTab = 0x1000FF75,XK_Ext16bit_L = 0x1000FF76,XK_Ext16bit_R = 0x1000FF77,XK_mute_acute = 0x100000A8,XK_mute_grave = 0x100000A9,XK_mute_asciicircum = 0x100000AA,XK_mute_diaeresis = 0x100000AB,XK_mute_asciitilde = 0x100000AC,XK_lira = 0x100000AF,XK_guilder = 0x100000BE,XK_IO = 0x100000EE,XK_longminus = 0x100000F6,XK_block = 0x100000FC,};
enum MACRO_XPOINTER {XPOINTER = 0,XKEYBOARD = 1,};
enum MACRO_XTestKEY {XTestKEY_UP = 0x4,XTestKEY_DOWN = 0x0,};
enum MACRO_XTestMAX {XTestMAX_ACTION_LIST_SIZE = 64,};
enum MACRO_XYBitmap {XYBitmap = 0,XYPixmap = 1,ZPixmap = 2,};
enum MACRO_XawPRAll {XawPRAll = 63,};
enum MACRO_XpauVAll {XpauVAll = 127,};
enum MACRO_XtMySelf {XtMySelf = 3,XtUnrelated = 4,};
enum MACRO_XvPacked {XvPacked = 0,XvPlanar = 1,};
enum MACRO_YPMAXMAP {YPMAXMAP = 64,};
enum MACRO_YXBanded {YXBanded = 3,};
enum MACRO__ALIASES {_ALIASES_H = 1,_ANSIDECL_H = 1,};
enum MACRO__CPUFREQ {_CPUFREQ_H = 1,_CRYPT_H = 1,};
enum MACRO__FNMATCH {_FNMATCH_H = 1,};
enum MACRO__GETTEXT {_GETTEXT_PO_H = 1,};
enum MACRO__IFADDRS {_IFADDRS_H = 1,_SYS_SOCKET_H = 1,_SYS_UIO_H = 1,_BITS_UIO_H = 1,};
enum MACRO__NETAX25 {_NETAX25_AX25_H = 1,};
enum MACRO__NETINET {_NETINET_ETHER_H = 1,_NETINET_ICMP6_H = 1,};
enum MACRO__NETROSE {_NETROSE_ROSE_H = 1,};
enum MACRO__NET_PPP {_NET_PPP_DEFS_H = 1,};
enum MACRO__PTHREAD {_PTHREAD_H = 1,_SCHED_H = 1,};
enum MACRO__RPC_MSG {_RPC_MSG_H = 1,};
enum MACRO__RPC_RPC {_RPC_RPC_H = 1,_RPC_XDR_H = 1,};
enum MACRO__RPC_SVC {_RPC_SVC_AUTH_H = 1,};
enum MACRO__SCSI_SG {_SCSI_SG_H = 1,};
enum MACRO__SYS_DIR {_SYS_DIR_H = 1,_SYS_EPOLL_H = 1,};
enum MACRO__SYS_PCI {_SYS_PCI_H = 1,};
enum MACRO__SYS_RAW {_SYS_RAW_H = 1,};
enum MACRO__SYS_REG {_SYS_REG_H = 1,};
enum MACRO__SYS_SEM {_SYS_SEM_H = 1,};
enum MACRO__UTSNAME {_UTSNAME_LENGTH = 65,_UTSNAME_DOMAIN_LENGTH = 65,_UTSNAME_SYSNAME_LENGTH = 65,_UTSNAME_NODENAME_LENGTH = 65,_UTSNAME_RELEASE_LENGTH = 65,_UTSNAME_VERSION_LENGTH = 65,_UTSNAME_MACHINE_LENGTH = 65,};
enum MACRO__WORDEXP {_WORDEXP_H = 1,};
enum MACRO__XKBFILE {_XKBFILE_H_ = 1,};
enum MACRO__XLIBINT {_XLIBINT_H_ = 1,};
enum MACRO__XLOCALE {_XLOCALE_H = 1,};
enum MACRO___ASSERT {__ASSERT_FUNCTION = 0,};
enum MACRO___LIBELF {__LIBELF_SYMBOL_VERSIONS = 1,};
enum MACRO___NETIPX {__NETIPX_IPX_H = 1,};
enum MACRO___SIZEOF {__SIZEOF_PTHREAD_ATTR_T = 36,__SIZEOF_PTHREAD_MUTEX_T = 24,__SIZEOF_PTHREAD_MUTEXATTR_T = 4,__SIZEOF_PTHREAD_COND_T = 48,__SIZEOF_PTHREAD_COND_COMPAT_T = 12,__SIZEOF_PTHREAD_CONDATTR_T = 4,__SIZEOF_PTHREAD_RWLOCK_T = 32,__SIZEOF_PTHREAD_RWLOCKATTR_T = 8,__SIZEOF_PTHREAD_BARRIER_T = 20,__SIZEOF_PTHREAD_BARRIERATTR_T = 4,};
enum MACRO____BUFIO {___BUFIO_H___ = 1,};
enum MACRO___iswxxx {__iswxxx_defined = 1,};
enum MACRO_argument {no_argument = 0,required_argument = 1,optional_argument = 2,};
enum MACRO_included {included_xmu_lookup_h = 1,};
typedef struct _1DD0730E73CA0CCE248C91CD23CFA17D MenuButtonPart;
typedef struct _MultiSrcRec *MultiSrcObject;
typedef struct _ObjectClassRec ObjectClassRec;
typedef struct _PanedClassPart PanedClassPart;
typedef struct _PannerClassRec PannerClassRec;
typedef struct _PortholeRec *PortholeWidget;
typedef struct _ProcessContextRec *ProcessContext;
typedef struct _ProtocolStream ProtocolStream;
typedef struct _991DB0B5CB0892F70B164889AA9E2739 RECORD_RANGE16;
typedef struct _RepeaterRec *RepeaterWidget;
struct SANE_Auth_Data;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F ShellClassPart;
typedef struct _SignalEventRec SignalEventRec;
typedef struct _SimpleClassRec SimpleClassRec;
typedef struct _SimpleMenuPart SimpleMenuPart;
typedef struct _SmeBSBClassRec SmeBSBClassRec;
typedef struct _SmeClassRec *SmeObjectClass;
typedef struct _8AD7665855BDD9D58C16EA2008E774F8 StripChartPart;
typedef union _TMStateTreeRec **TMStateTreePtr;
typedef struct _TMTypeMatchRec TMTypeMatchRec;
typedef struct _TemplateRec *TemplateWidget;
typedef struct _F403E5F5616236146AF752723515CE63 TextSinkExtRec;
typedef struct _TextSinkRec *TextSinkObject;
typedef struct _ThreeDClassRec ThreeDClassRec;
typedef struct _TipClassRec *TipWidgetClass;
typedef struct _ToggleClassRec ToggleClassRec;
typedef struct _FE9896265ABA69989620FFBB2F6B5FBF VendorShellRec;
typedef struct _ViewportRec *ViewportWidget;
typedef struct WBXMLAttrEntry_s WBXMLAttrEntry;
typedef struct WBXMLAttribute_s WBXMLAttribute;
struct WBXMLEncoder_s;
typedef struct WBXMLLangEntry_s WBXMLLangEntry;
enum WBXMLVersion_e {WBXML_VERSION_UNKNOWN = 0xFFFFFFFF,WBXML_VERSION_10 = 0x0,WBXML_VERSION_11 = 0x1,WBXML_VERSION_12 = 0x2,WBXML_VERSION_13 = 0x3,};
typedef struct _WidgetClassRec WidgetClassRec;
typedef struct _XButtonInfo *XButtonInfoPtr;
typedef struct _1EA155DB59F5BD48931EE1812AEA4515 XColormapEvent;
typedef struct _XComposeStatus XComposeStatus;
typedef struct _96264A6F4C8C04631D278E968D9BF4CE XCrossingEvent;
typedef struct _14C4DC63A35B6E2FD67711EA9BA1C1B3 XDeviceControl;
typedef struct _XDeviceInfo *XDeviceInfoPtr;
typedef struct _D4C8F552392F5332BDD78714AF7AFE61 XETrapInputReq;
typedef struct _XExtensionInfo XExtensionInfo;
typedef struct _4351FBF019520AA1BFC0E4306B612802 XFeedbackState;
typedef unsigned int XIMHotKeyState;
typedef struct _3B46E2BF73F463FD420C5BF273406D17 XKeyboardState;
typedef struct _772FB43CCF21C0EB4D2EF861D4978150 XNoExposeEvent;
typedef struct _6B1106A64659663BF4BA9950E3F10E4F XOMCharSetList;
typedef struct _9375A326D5D02800B5E28ACECE8480CB XOMOrientation;
typedef unsigned char XPDocumentType;
typedef unsigned char XPGetDocStatus;
typedef struct _216A9F1C1CB18296D79DECC5D8B8E2C3 XPanoramiXInfo;
typedef struct _77AFB732CE0E94178E86FE7589E57943 XPropertyEvent;
typedef unsigned int XRecordContext;
typedef struct _FF8B70C3EB5683862853208A738C6C2E XRecordRange16;
typedef struct _D2BC88768625D18EB51B5B1C4DF7633B XReparentEvent;
typedef struct _1E4927A029C92C0FD595CCC76CE8B139 XTestDelayInfo;
typedef struct _368A13762F027E92E1CC17A526B41AA7 XValuatorState;
typedef struct _BA1C9873524F37DFA28FC6E8B2A0BC7B XWindowChanges;
typedef struct _XawDL XawDisplayList;
typedef struct _XawIcTablePart *XawIcTableList;
typedef struct _XawIcTablePart XawIcTablePart;
typedef struct _XcmsColorSpace XcmsColorSpace;
typedef struct _XcursorAnimate XcursorAnimate;
typedef struct _XcursorComment XcursorComment;
typedef struct _XcursorCursors XcursorCursors;
typedef struct _XcursorFileToc XcursorFileToc;
typedef unsigned char XdbeSwapAction;
typedef struct _665F1ADE1952A58E13B5D78D0B8A3255 XdbeVisualInfo;
typedef struct _XkbControls *XkbControlsPtr;
typedef struct _XkbControls XkbControlsRec;
typedef struct _XkbCtrlsAction XkbCtrlsAction;
typedef struct _XkbFileInfo *XkbFileInfoPtr;
typedef struct _XkbGeometry *XkbGeometryPtr;
typedef struct _XkbGeometry XkbGeometryRec;
typedef struct _XkbGroupAction XkbGroupAction;
typedef struct _XkbKeyAliasRec *XkbKeyAliasPtr;
typedef struct _XkbKeyAliasRec XkbKeyAliasRec;
typedef struct _XkbProperty *XkbPropertyPtr;
typedef struct _XkbProperty XkbPropertyRec;
typedef struct _XkbRF_Group *XkbRF_GroupPtr;
typedef struct _XkbRF_Group XkbRF_GroupRec;
typedef struct _XkbRF_Rules *XkbRF_RulesPtr;
typedef struct _XkbRF_Rules XkbRF_RulesRec;
typedef struct _6BBDD4222850636FE766E2CAFC28CB09 XpauPageValues;
typedef struct _2EA2656FD07E452BFC8A303BAC941F0E XpmColorSymbol;
typedef struct _TranslationData *XtAccelerators;
typedef struct _XtCallbackRec *XtCallbackList;
typedef unsigned int XtGeometryMask;
typedef struct _7768503639F77374B09C8CE2FF45E7E1 XtPopdownIDRec;
typedef struct _XtResource *XtResourceList;
typedef struct _XtSaveYourselfRec *XtSaveYourself;
typedef struct _TranslationData *XtTranslations;
typedef struct _1E2A6A9B5EC919B5C597AB6887935210 *XtTypedArgList;
typedef struct _6C34763ADB9205A5E9B577107C4B0C36 XvEncodingInfo;
typedef struct _2DDFDD5DD8CD88FDBBE41C4BA29EE9C7 XvMCBlockArray;
typedef struct _AE7090D44B263C525193247B1C3DC203 XvMCMacroBlock;
typedef struct _C0A8173FD3695D4670457D810A0436B3 XvMCSubpicture;
struct _ExifMnoteData;
struct _FcGlobalCache;
typedef struct _D08E3E427138D596819F8CEF4AEF4F32 _IcePaProtocol;
typedef struct _C091F8996EF5667AFF510FF5B2E0143E _IcePoProtocol;
typedef struct _XInternalAsync _XAsyncHandler;
struct _XkbRF_VarDefs {char *model;char *layout;char *variant;char *options;unsigned short sz_extra;unsigned short num_extra;char *extra_names;char **extra_values;};
struct _XkbRF_VarDesc {char *name;char *desc;};
typedef unsigned int _XtTranslateOp;
enum __itimer_which {ITIMER_REAL = 0x0,ITIMER_VIRTUAL = 0x1,ITIMER_PROF = 0x2,};
typedef unsigned short __kernel_gid_t;
typedef unsigned int __kernel_ino_t;
typedef int __kernel_key_t;
typedef int __kernel_mqd_t;
typedef int __kernel_off_t;
typedef int __kernel_pid_t;
typedef unsigned short __kernel_uid_t;
enum __ns_key_types {ns_kt_rsa = 0x1,ns_kt_dh = 0x2,ns_kt_dsa = 0x3,ns_kt_private = 0xFE,};
typedef int __rusage_who_t;
typedef int __sig_atomic_t;
typedef void (*__sighandler_t)(int);
typedef struct bfd_link_info _bfd_link_info;
struct _obstack_chunk {char *limit;struct _obstack_chunk *prev;char contents[4];};
struct _ss_rp_options {int version;void (*unknown)(int,  char * *, int, void *);int allow_suspend;int catch_int;};
struct audio_buf_info {int fragments;int fragstotal;int fragsize;int bytes;};
struct bfd_hash_entry {struct bfd_hash_entry *next; char *string;unsigned int hash;};
struct bfd_hash_table {struct bfd_hash_entry **table;unsigned int size;unsigned int count;unsigned int entsize;struct bfd_hash_entry *(*newfunc)(struct bfd_hash_entry *, struct bfd_hash_table *,  char *);void *memory;};
enum bfd_link_strip {strip_none = 0x0,strip_debugger = 0x1,strip_some = 0x2,strip_all = 0x3,};
typedef long long bfd_signed_vma;
typedef void cdrom_paranoia;
typedef struct colorhist_list_item *colorhist_list;
typedef  char *const_nis_name;
typedef struct _contextDataRec contextDataRec;
struct copr_debug_buf {int command;int parm1;int parm2;int flags;int len;};
struct cpufreq_policy {unsigned int min;unsigned int max;char *governor;};
typedef struct _1BB85DE3512B339811D8B67FC16B212D deviceValuator;
typedef struct user_fpregs_struct elf_fpregset_t;
typedef struct _32814486483B74398EA3D6D6C36E06C2 fsGenericReply;
typedef struct _2178B426BC8C8AE0F5D29E93EB059F03 fsListFontsReq;
typedef struct _FCE16AE268B388C13B857015D638E9ED fsRequestError;
enum ieee1284_modes {M1284_NIBBLE = 0x0,M1284_BYTE = 0x1,M1284_COMPAT = 0x100,M1284_BECP = 0x200,M1284_ECP = 0x10,M1284_ECPRLE = 0x30,M1284_ECPSWE = 0x400,M1284_EPP = 0x40,M1284_EPPSL = 0x800,M1284_EPPSWE = 0x1000,M1284_FLAG_DEVICEID = 0x4,M1284_FLAG_EXT_LINK = 0x4000,};
struct internal_state {int dummy;};
struct iw_modul_descr {unsigned int mask;char cmd[8];char *verbose;};
typedef struct _51FA9807B1251E8577C033ECC63EDB35 jas_cmpixmap_t;
typedef struct jas_cmpxform_s jas_cmpxform_t;
typedef struct _8EB7145310D404E702198108260231E4 jas_icclut16_t;
typedef struct _F26672320A718E8E26EFAEDB64EDC182 jas_tvparser_t;
typedef struct _0DA2860FA9A69F203063D0028C53EA56 lbxMotionCache;
typedef unsigned int lt_dlcaller_id;
struct objalloc_align {char x;double d;};
struct partition_elem {int class_element;struct partition_elem *next;unsigned int class_count;};
typedef union _781B27F37A2DA3C5D0084E69F313DC7D pthread_attr_t;
typedef union _1C4035FDEAFFF0FCE26E66A96F6BBEB4 pthread_cond_t;
typedef int pthread_once_t;
typedef struct _F1F9335C32D188513BC2595A34A539C6 raw_hdlc_proto;
typedef unsigned char sbi_instr_data[32];
typedef unsigned int splay_tree_key;
typedef struct st_instrinfo st_instrinfo_t;
typedef struct td_event_msg td_event_msg_t;
typedef struct td_thrhandle td_thrhandle_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;
struct usb_dev_handle;
typedef struct _70E4CC7E54BA43D6E5622AB555079691 xAllocColorReq;
typedef struct _8BC4543EF695142B249D7CC5D558FED0 xAnimCursorElt;
typedef struct _xButtonInfo *xButtonInfoPtr;
typedef struct _F88DFF0D39F146217256B482FD360ACC xChangeModeReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSEnableReq;
typedef struct _81227E6A2E975B2588700A3A20196845 xDPMSInfoReply;
typedef struct _FC3BB1A81303FA005E7D17D8401F89AB xDeviceBellReq;
typedef struct _xDeviceInfo *xDeviceInfoPtr;
typedef struct _4D2E0013E954DA651F15636ABC395F09 xFeedbackState;
typedef struct _091A8121C3C792D8858188DBB434C01C xFreeColorsReq;
typedef struct _1E68C84E6BE3B673D767CBEC47B3DECA xGetImageReply;
typedef struct _03C803DDC9061B143F519D4D73BD5571 xGrabButtonReq;
typedef struct _EDE17C06FAF221A5878FFED27CF569B6 xGrabDeviceReq;
typedef struct _7A455DB3BD331D79AF16B3231F86E0C5 xInternAtomReq;
typedef struct _LbxCloseEvent xLbxCloseEvent;
typedef struct _A03D8E09E1901FA73C4A77E2D3267500 xLbxStartReply;
typedef struct _LbxTagData xLbxTagDataReq;
typedef struct _8973D72E68A3D7427BDE924AB847E810 xOpenDeviceReq;
typedef struct _87651D9D31681607819E457EB5237059 xValuatorState;
typedef struct _F1E1BB7F23F71F625712F6F0DB53C50A xXDGASyncReply;
typedef struct _FF07158C3282A916C3A4C5C72C8100CA xXTrapInputReq;
typedef struct _XagDestroy xXagDestroyReq;
typedef struct _XagGetAttr xXagGetAttrReq;
typedef struct _B39400A659C1078B091D331E19541038 xXagQueryReply;
typedef struct _322E4D740D2A723112F8227414848916 xXevieEndReply;
typedef struct _XevieStart xXevieStartReq;
enum xcb_arc_mode_t {XCB_ARC_MODE_CHORD = 0x0,XCB_ARC_MODE_PIE_SLICE = 0x1,};
enum xcb_blanking_t {XCB_BLANKING_NOT_PREFERRED = 0x0,XCB_BLANKING_PREFERRED = 0x1,XCB_BLANKING_DEFAULT = 0x2,};
enum xcb_led_mode_t {XCB_LED_MODE_OFF = 0x0,XCB_LED_MODE_ON = 0x1,};
enum xcb_mod_mask_t {XCB_MOD_MASK_SHIFT = 0x1,XCB_MOD_MASK_LOCK = 0x2,XCB_MOD_MASK_CONTROL = 0x4,XCB_MOD_MASK_1 = 0x8,XCB_MOD_MASK_2 = 0x10,XCB_MOD_MASK_3 = 0x20,XCB_MOD_MASK_4 = 0x40,XCB_MOD_MASK_5 = 0x80,};
enum xcb_property_t {XCB_PROPERTY_NEW_VALUE = 0x0,XCB_PROPERTY_DELETE = 0x1,};
enum xcb_randr_sm_t {XCB_RANDR_SM_SCREEN_CHANGE_NOTIFY = 0x1,};
enum xcb_set_mode_t {XCB_SET_MODE_INSERT = 0x0,XCB_SET_MODE_DELETE = 0x1,};
enum xcb_shape_sk_t {XCB_SHAPE_SK_BOUNDING = 0x0,XCB_SHAPE_SK_CLIP = 0x1,XCB_SHAPE_SK_INPUT = 0x2,};
enum xcb_shape_so_t {XCB_SHAPE_SO_SET = 0x0,XCB_SHAPE_SO_UNION = 0x1,XCB_SHAPE_SO_INTERSECT = 0x2,XCB_SHAPE_SO_SUBTRACT = 0x3,XCB_SHAPE_SO_INVERT = 0x4,};
typedef struct _xkbGetMapReply xkbGetMapReply;
typedef struct _xkbGetNames xkbGetNamesReq;
typedef struct _xkbGetState xkbGetStateReq;
typedef struct _xkbKeyWireDesc xkbKeyWireDesc;
typedef struct _xkbNamesNotify xkbNamesNotify;
typedef struct _xkbRowWireDesc xkbRowWireDesc;
typedef struct _xkbSetNames xkbSetNamesReq;
typedef struct _xkbStateNotify xkbStateNotify;
typedef struct _xkmKeyTypeDesc xkmKeyTypeDesc;
typedef struct _xkmOutlineDesc xkmOutlineDesc;
typedef struct _xkmOverlayDesc xkmOverlayDesc;
typedef struct _xkmSectionDesc xkmSectionDesc;
typedef struct _xkmSectionInfo xkmSectionInfo;
typedef struct _xkmVModMapDesc xkmVModMapDesc;
typedef struct _12C70FB380D888247B65F57E99B647A7 xvEncodingInfo;
typedef struct _DE5295A524AE5E785ED4C88469459F67 xvStopVideoReq;
struct ypbind_binding {char ypbind_binding_addr[4];char ypbind_binding_port[2];};
typedef struct _ATranslationData *ATranslations;
typedef struct _ActionHookRec ActionHookRec;
typedef struct _7A8BCDFD27D305719C6F21C05BF2348A AsciiSinkPart;
typedef struct _BitmapFont *BitmapFontPtr;
typedef struct _BitmapFont BitmapFontRec;
typedef struct _CommandRec *CommandWidget;
typedef struct _CompositePart CompositePart;
typedef struct _ConstraintRec ConstraintRec;
typedef struct _CoreClassPart CoreClassPart;
typedef int DrawDirection;
typedef struct _BC4B0D515307F8380CCAE7BF44CFA97C Elf32_RegInfo;
typedef struct _FE43560485AD2DF497423A9D2646B91A Elf32_Syminfo;
typedef struct _12883A0710B467FBB4742064A9BE69DF Elf32_Verdaux;
typedef struct _E714B4690DCD4CE2097239CD07373860 Elf32_Vernaux;
typedef struct _DDB9E5FBB16C40A976BC405025678C57 Elf32_Verneed;
typedef struct _2FC37C12F50461D7B99376C23209E757 Elf64_Syminfo;
typedef struct _D758E79311354DDC9AF0CC7E7C22CD10 Elf64_Verdaux;
typedef struct _A46BFD4B6B8C284ED478D587B5722CAB Elf64_Vernaux;
typedef struct _DBDB4AF8E469679C3A4CD785AB502395 Elf64_Verneed;
typedef struct _ExifMnoteData ExifMnoteData;
typedef struct _3EBE077DD2A684AF0A86C02ED2B61EB1 ExifSRational;
typedef char ExifUndefined;
typedef struct _ExtentInfo *ExtentInfoPtr;
typedef struct _ExtentInfo ExtentInfoRec;
typedef struct FTC_CMapCacheRec_ *FTC_CMapCache;
typedef struct FTC_ImageTypeRec_ *FTC_ImageType;
typedef struct FTC_SBitCacheRec_ *FTC_SBitCache;
typedef struct FTC_ScalerRec_ FTC_ScalerRec;
typedef struct _FTInstance *FTInstancePtr;
typedef struct _FTInstance FTInstanceRec;
typedef struct FT_CharMapRec_ FT_CharMapRec;
typedef union FT_StreamDesc_ FT_StreamDesc;
typedef struct FT_UnitVector_ FT_UnitVector;
typedef int Field_Options;
typedef struct _FontScaled *FontScaledPtr;
typedef struct _FontScaled FontScaledRec;
typedef struct foo_mesa_buffer *FooMesaBuffer;
typedef struct foo_mesa_visual *FooMesaVisual;
typedef struct _8DAA3FFB6B33F31F5053448038813E4C FormClassPart;
typedef struct GLUquadric GLUquadricObj;
struct GLUtesselator;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F GripClassPart;
typedef struct _C872F43EA669D8C471FAD313DA7A2479 IjsPageHeader;
typedef struct LIBMTP_file_struct LIBMTP_file_t;
typedef struct _LabelClassRec LabelClassRec;
typedef struct _LbxStreamOpts LbxStreamOpts;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F ListClassPart;
enum MACRO_ABORTED {ABORTED_COMMAND = 0xB,};
enum MACRO_ALL_GCS {ALL_GCS = 3,};
enum MACRO_ANYADDR {ANYADDR = 0,};
enum MACRO_ANYMARK {ANYMARK = 0x1,LASTMARK = 0x2,};
enum MACRO_B115200 {B115200 = 0x1002,};
enum MACRO_B230400 {B230400 = 0x1003,};
enum MACRO_B460800 {B460800 = 0x1004,};
enum MACRO_B500000 {B500000 = 0x1005,};
enum MACRO_B576000 {B576000 = 0x1006,};
enum MACRO_B921600 {B921600 = 0x1007,};
enum MACRO_BADADDR {BADADDR = 7,BADCTLADDR = 8,};
enum MACRO_BFD_ELF {BFD_ELF_VERSION_C_TYPE = 1,BFD_ELF_VERSION_CXX_TYPE = 2,BFD_ELF_VERSION_JAVA_TYPE = 4,};
enum MACRO_BIOSSEG {BIOSSEG = 0xF000,};
enum MACRO_BLKTYPE {BLKTYPE = 52,};
enum MACRO_BSF_NOT {BSF_NOT_AT_END = 0x400,BSF_CONSTRUCTOR = 0x800,BSF_WARNING = 0x1000,BSF_INDIRECT = 0x2000,BSF_FILE = 0x4000,BSF_DYNAMIC = 0x8000,BSF_OBJECT = 0x10000,BSF_DEBUGGING_RELOC = 0x20000,BSF_THREAD_LOCAL = 0x40000,};
enum MACRO_BUTTON1 {BUTTON1_RELEASED = 1,BUTTON1_PRESSED = 2,BUTTON1_CLICKED = 4,BUTTON1_DOUBLE_CLICKED = 8,BUTTON1_TRIPLE_CLICKED = 16,};
enum MACRO_BUTTON2 {BUTTON2_RELEASED = 64,BUTTON2_PRESSED = 128,BUTTON2_CLICKED = 256,BUTTON2_DOUBLE_CLICKED = 512,BUTTON2_TRIPLE_CLICKED = 1024,};
enum MACRO_BUTTON3 {BUTTON3_RELEASED = 4096,BUTTON3_PRESSED = 8192,BUTTON3_CLICKED = 16384,BUTTON3_DOUBLE_CLICKED = 32768,BUTTON3_TRIPLE_CLICKED = 65536,};
enum MACRO_BUTTON4 {BUTTON4_RELEASED = 262144,BUTTON4_PRESSED = 524288,BUTTON4_CLICKED = 1048576,BUTTON4_DOUBLE_CLICKED = 2097152,BUTTON4_TRIPLE_CLICKED = 4194304,};
enum MACRO_BadAtom {BadAtom = 5,};
enum MACRO_BadFont {BadFont = 7,BadMatch = 8,};
enum MACRO_BadName {BadName = 15,BadLength = 16,};
enum MACRO_Button1 {Button1 = 1,Button2 = 2,};
enum MACRO_Button3 {Button3 = 3,Button4 = 4,};
enum MACRO_Button5 {Button5 = 5,};
enum MACRO_CACHING {CACHING_OFF = 0,};
enum MACRO_CANBSIZ {CANBSIZ = 255,NCARGS = 131072,};
enum MACRO_CHRTYPE {CHRTYPE = 51,};
enum MACRO_CLKFLAG {CLKFLAG_PROGRAMABLE = 1,};
enum MACRO_COMMAND {MIN_FORM_COMMAND = 512,MAX_FORM_COMMAND = 568,MAX_COMMAND = 639,};
enum MACRO_COMPARE {COMPARE = 0x39,};
enum MACRO_CSIGNAL {CSIGNAL = 0xFF,};
enum MACRO_CSTATUS {CSTATUS = 0,CKILL = 21,};
enum MACRO_CWERASE {CWERASE = 23,};
enum MACRO_Complex {Complex = 0,Nonconvex = 1,Convex = 2,};
enum MACRO_DEFAULT {WORLD_DEFAULT = 1,GROUP_DEFAULT = 256,OWNER_DEFAULT = 983040,};
enum MACRO_DEFLATE {DEFLATE_MIN_SIZE = 9,DEFLATE_MAX_SIZE = 15,DEFLATE_METHOD_VAL = 8,DEFLATE_CHK_SEQUENCE = 0,};
enum MACRO_DIRTYPE {DIRTYPE = 53,};
enum MACRO_DT_MIPS {DT_MIPS_RLD_VERSION = 0x70000001,DT_MIPS_TIME_STAMP = 0x70000002,DT_MIPS_ICHECKSUM = 0x70000003,DT_MIPS_IVERSION = 0x70000004,DT_MIPS_FLAGS = 0x70000005,DT_MIPS_BASE_ADDRESS = 0x70000006,DT_MIPS_MSYM = 0x70000007,DT_MIPS_CONFLICT = 0x70000008,DT_MIPS_LIBLIST = 0x70000009,DT_MIPS_LOCAL_GOTNO = 0x7000000A,DT_MIPS_CONFLICTNO = 0x7000000B,DT_MIPS_LIBLISTNO = 0x70000010,DT_MIPS_SYMTABNO = 0x70000011,DT_MIPS_UNREFEXTNO = 0x70000012,DT_MIPS_GOTSYM = 0x70000013,DT_MIPS_HIPAGENO = 0x70000014,DT_MIPS_RLD_MAP = 0x70000016,DT_MIPS_DELTA_CLASS = 0x70000017,DT_MIPS_DELTA_CLASS_NO = 0x70000018,DT_MIPS_DELTA_INSTANCE = 0x70000019,DT_MIPS_DELTA_INSTANCE_NO = 0x7000001A,DT_MIPS_DELTA_RELOC = 0x7000001B,DT_MIPS_DELTA_RELOC_NO = 0x7000001C,DT_MIPS_DELTA_SYM = 0x7000001D,DT_MIPS_DELTA_SYM_NO = 0x7000001E,DT_MIPS_DELTA_CLASSSYM = 0x70000020,DT_MIPS_DELTA_CLASSSYM_NO = 0x70000021,DT_MIPS_CXX_FLAGS = 0x70000022,DT_MIPS_PIXIE_INIT = 0x70000023,DT_MIPS_SYMBOL_LIB = 0x70000024,DT_MIPS_LOCALPAGE_GOTIDX = 0x70000025,DT_MIPS_LOCAL_GOTIDX = 0x70000026,DT_MIPS_HIDDEN_GOTIDX = 0x70000027,DT_MIPS_PROTECTED_GOTIDX = 0x70000028,DT_MIPS_OPTIONS = 0x70000029,DT_MIPS_INTERFACE = 0x7000002A,DT_MIPS_DYNSTR_ALIGN = 0x7000002B,DT_MIPS_INTERFACE_SIZE = 0x7000002C,DT_MIPS_RLD_TEXT_RESOLVE_ADDR = 0x7000002D,DT_MIPS_PERF_SUFFIX = 0x7000002E,DT_MIPS_COMPACT_SIZE = 0x7000002F,DT_MIPS_GP_VALUE = 0x70000030,DT_MIPS_AUX_DYNAMIC = 0x70000031,DT_MIPS_NUM = 0x32,};
enum MACRO_DT_SUSE {DT_SUSE_DIRECT_VAGUE = 32768,DT_SUSE_DIRECT_MASK = 4095,DT_SUSE_DIRECT_UNKNOWN = 4095,};
enum MACRO_DT_USED {DT_USED = 0x7FFFFFFE,};
enum MACRO_DYNAMIC {DYNAMIC = 0x40,};
enum MACRO_ECHOCTL {ECHOCTL = 0x200,ECHOPRT = 0x400,ECHOKE = 0x800,FLUSHO = 0x800000,PENDIN = 0x20000000,};
enum MACRO_EDITRES {EDITRES_IS_OBJECT = 2,EDITRES_IS_UNREALIZED = 0,EDITRES_FORMAT = 8,EDITRES_SEND_EVENT_FORMAT = 32,};
enum MACRO_EEXISTS {EEXISTS = 6,};
enum MACRO_EF_MIPS {EF_MIPS_NOREORDER = 1,EF_MIPS_PIC = 2,EF_MIPS_CPIC = 4,EF_MIPS_XGOT = 8,EF_MIPS_64BIT_WHIRL = 16,EF_MIPS_ABI2 = 32,EF_MIPS_ABI_ON32 = 64,EF_MIPS_ARCH = -268435456,EF_MIPS_ARCH_1 = 0,EF_MIPS_ARCH_2 = 268435456,EF_MIPS_ARCH_3 = 536870912,EF_MIPS_ARCH_4 = 805306368,EF_MIPS_ARCH_5 = 1073741824,EF_MIPS_ARCH_32 = 1610612736,EF_MIPS_ARCH_64 = 1879048192,};
enum MACRO_EI_DATA {EI_DATA = 5,};
enum MACRO_EI_MAG1 {EI_MAG1 = 1,};
enum MACRO_EI_MAG2 {EI_MAG2 = 2,};
enum MACRO_EI_MAG3 {EI_MAG3 = 3,};
enum MACRO_ELFMAG0 {ELFMAG0 = 0x7F,};
enum MACRO_ELFMAG1 {ELFMAG1 = 69,};
enum MACRO_ELFMAG2 {ELFMAG2 = 76,};
enum MACRO_ELFMAG3 {ELFMAG3 = 70,};
enum MACRO_ENCRYPT {ENCRYPT_IS = 0,ENCRYPT_SUPPORT = 1,ENCRYPT_REPLY = 2,ENCRYPT_START = 3,ENCRYPT_END = 4,ENCRYPT_REQSTART = 5,ENCRYPT_REQEND = 6,ENCRYPT_ENC_KEYID = 7,ENCRYPT_DEC_KEYID = 8,ENCRYPT_CNT = 9,};
enum MACRO_ENCTYPE {ENCTYPE_ANY = 0,ENCTYPE_DES_CFB64 = 1,ENCTYPE_DES_OFB64 = 2,ENCTYPE_CNT = 3,};
enum MACRO_ENOTSUP {ENOTSUP = 95,};
enum MACRO_ENOUSER {ENOUSER = 7,};
enum MACRO_E_TABSZ {E_TABSZ = 256,};
enum MACRO_FAPPEND {FAPPEND = 1024,FFSYNC = 4096,FASYNC = 8192,};
enum MACRO_FIOCLEX {FIOCLEX = 0x5451,};
enum MACRO_FIONBIO {FIONBIO = 0x5421,};
enum MACRO_FLUSHRW {FLUSHRW = 0x3,};
enum MACRO_FM_TYPE {FM_TYPE_ADLIB = 0x0,FM_TYPE_OPL3 = 0x1,};
enum MACRO_FNDELAY {FNDELAY = 2048,};
enum MACRO_FT_FACE {FT_FACE_FLAG_SCALABLE = 1,FT_FACE_FLAG_FIXED_SIZES = 2,FT_FACE_FLAG_FIXED_WIDTH = 4,FT_FACE_FLAG_SFNT = 8,FT_FACE_FLAG_HORIZONTAL = 16,FT_FACE_FLAG_VERTICAL = 32,FT_FACE_FLAG_KERNING = 64,FT_FACE_FLAG_FAST_GLYPHS = 128,FT_FACE_FLAG_MULTIPLE_MASTERS = 256,FT_FACE_FLAG_GLYPH_NAMES = 512,FT_FACE_FLAG_EXTERNAL_STREAM = 1024,FT_FACE_FLAG_HINTER = 2048,FT_STYLE_FLAG_ITALIC = 1,FT_STYLE_FLAG_BOLD = 2,FT_OPEN_MEMORY = 1,FT_OPEN_STREAM = 2,FT_OPEN_PATHNAME = 4,FT_OPEN_DRIVER = 8,FT_OPEN_PARAMS = 16,};
enum MACRO_FT_LOAD {FT_LOAD_DEFAULT = 0x0,FT_LOAD_NO_SCALE = 0x1,FT_LOAD_NO_HINTING = 0x2,FT_LOAD_RENDER = 0x4,FT_LOAD_NO_BITMAP = 0x8,FT_LOAD_VERTICAL_LAYOUT = 0x10,FT_LOAD_FORCE_AUTOHINT = 0x20,FT_LOAD_CROP_BITMAP = 0x40,FT_LOAD_PEDANTIC = 0x80,FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 0x200,FT_LOAD_NO_RECURSE = 0x400,FT_LOAD_IGNORE_TRANSFORM = 0x800,FT_LOAD_MONOCHROME = 0x1000,FT_LOAD_LINEAR_DESIGN = 0x2000,FT_LOAD_SBITS_ONLY = 0x4000,FT_LOAD_NO_AUTOHINT = 0x8000,FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS = 0x1,FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES = 0x2,FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID = 0x4,FT_SUBGLYPH_FLAG_SCALE = 0x8,FT_SUBGLYPH_FLAG_XY_SCALE = 0x40,FT_SUBGLYPH_FLAG_2X2 = 0x80,FT_SUBGLYPH_FLAG_USE_MY_METRICS = 0x200,};
enum MACRO_F_RDLCK {F_RDLCK = 0,F_WRLCK = 1,F_UNLCK = 2,F_EXLCK = 4,F_SHLCK = 8,};
enum MACRO_F_ULOCK {F_ULOCK = 0,F_LOCK = 1,F_TLOCK = 2,F_TEST = 3,};
enum MACRO_FcFalse {FcFalse = 0,};
enum MACRO_FocusIn {FocusIn = 9,};
enum MACRO_GENERIC {GENERIC_SCSI = 0,};
enum MACRO_GETNCNT {GETNCNT = 14,};
enum MACRO_GETZCNT {GETZCNT = 15,SETVAL = 16,};
enum MACRO_GLFBDEV {GLFBDEV_VERSION_1_0 = 1,GLFBDEV_DOUBLE_BUFFER = 100,GLFBDEV_COLOR_INDEX = 101,GLFBDEV_DEPTH_SIZE = 102,GLFBDEV_STENCIL_SIZE = 103,GLFBDEV_ACCUM_SIZE = 104,GLFBDEV_LEVEL = 105,GLFBDEV_MULTISAMPLE = 106,GLFBDEV_NONE = 0,GLFBDEV_VERSION = 200,GLFBDEV_VENDOR = 201,};
enum MACRO_GXclear {GXclear = 0x0,GXand = 0x1,GXandReverse = 0x2,};
enum MACRO_GXequiv {GXequiv = 0x9,};
enum MACRO_IEEE754 {IEEE754_FLOAT_BIAS = 0x7F,IEEE754_DOUBLE_BIAS = 0x3FF,};
enum MACRO_IEEE854 {IEEE854_LONG_DOUBLE_BIAS = 0x3FFF,};
enum MACRO_IERRORS {IERRORS = 5,};
enum MACRO_IEVENTS {IEVENTS = 15,};
enum MACRO_ILLEGAL {ILLEGAL_REQUEST = 0x5,};
enum MACRO_INQUIRY {INQUIRY = 0x12,};
enum MACRO_INT16SZ {INT16SZ = 2,INADDRSZ = 4,IN6ADDRSZ = 16,};
enum MACRO_INT32SZ {INT32SZ = 4,};
enum MACRO_IOCSIZE {IOCSIZE_MASK = 1073676288,IOCSIZE_SHIFT = 16,};
enum MACRO_IP_ADDR {IP_ADDR_TYPE = 1,};
enum MACRO_JUSTIFY {JUSTIFY_LEFT = 1,JUSTIFY_CENTER = 2,JUSTIFY_RIGHT = 3,};
enum MACRO_KDADDIO {KDADDIO = 0x4B34,};
enum MACRO_KDDELIO {KDDELIO = 0x4B35,};
enum MACRO_KD_FONT {KD_FONT_OP_SET = 0,KD_FONT_OP_GET = 1,KD_FONT_OP_SET_DEFAULT = 2,KD_FONT_OP_COPY = 3,KD_FONT_FLAG_DONT_RECALC = 1,};
enum MACRO_LBX_MAX {LBX_MAX_DEPTHS = 5,LBX_IMAGE_COMPRESS_SUCCESS = 0,LBX_IMAGE_COMPRESS_NO_SUPPORT = 1,LBX_IMAGE_COMPRESS_BAD_MALLOC = 2,LBX_IMAGE_COMPRESS_NOT_WORTH_IT = 3,LBX_OPT_DELTA_PROXY = 0,LBX_OPT_DELTA_SERVER = 1,LBX_OPT_STREAM_COMP = 2,LBX_OPT_BITMAP_COMP = 3,LBX_OPT_PIXMAP_COMP = 4,LBX_OPT_MSG_COMP = 5,LBX_OPT_USE_TAGS = 6,LBX_OPT_CMAP_ALL = 7,LBX_OPT_EXTENSION = 255,LBX_OPT_SMALLLEN_SIZE = 1,LBX_OPT_BIGLEN_SIZE = 3,LBX_OPT_BIGLEN_MIN = 256,LBX_OPT_SMALLHDR_LEN = 2,LBX_OPT_BIGHDR_LEN = 4,LBX_OPT_DELTA_REQLEN = 6,LBX_OPT_DELTA_REPLYLEN = 2,LBX_OPT_DELTA_NCACHE_DFLT = 16,LBX_OPT_DELTA_MSGLEN_MIN = 32,LBX_OPT_DELTA_MSGLEN_DFLT = 64,};
enum MACRO_LoadAll {LoadAll = 0x1,FinishRamge = 0x2,EightBitFont = 0x4,SixteenBitFont = 0x8,};
enum MACRO_MACHINE {MACHINE_UNKNOWN = 3,};
enum MACRO_MAXGIDS {MAXGIDS = 16,};
enum MACRO_MAX_MEM {MAX_MEM_LEVEL = 9,MAX_WBITS = 15,};
enum MACRO_MESSAGE {MESSAGE_REJECT = 0x7,};
enum MACRO_MINARCS {MINARCS = 50,MAXARCS = 1048576,};
enum MACRO_MORECTL {MORECTL = 1,MOREDATA = 2,};
enum MACRO_MTERASE {MTERASE = 13,};
enum MACRO_MTRESET {MTRESET = 0,MTFSF = 1,MTBSF = 2,};
enum MACRO_MTRETEN {MTRETEN = 9,};
enum MACRO_NCURSES {NCURSES_VERSION_MAJOR = 5,NCURSES_VERSION_MINOR = 5,NCURSES_VERSION_PATCH = 20060513,NCURSES_MOUSE_VERSION = 1,NCURSES_DLL_H_incl = 1,NCURSES_ENABLE_STDBOOL_H = 1,NCURSES_UNCTRL_H_incl = 1,};
enum MACRO_NFSMODE {NFSMODE_FMT = 0xF000,NFSMODE_DIR = 0x4000,NFSMODE_CHR = 0x2000,NFSMODE_BLK = 0x6000,NFSMODE_REG = 0x8000,NFSMODE_LNK = 0xA000,NFSMODE_SOCK = 0xC000,NFSMODE_FIFO = 0x1000,};
enum MACRO_NFS_MNT {NFS_MNT_PROGRAM = 100005,NFS_MNT_PORT = 627,};
enum MACRO_NGROUPS {NGROUPS_MAX = 65536,ARG_MAX = 131072,};
enum MACRO_NOGROUP {NOGROUP = -1,};
enum MACRO_NO_SUCH {NO_SUCH_CHAR = -1,};
enum MACRO_NR_ICMP {NR_ICMP_UNREACH = 15,};
enum MACRO_NoValue {NoValue = 0x0,XValue = 0x1,YValue = 0x2,WidthValue = 0x4,HeightValue = 0x8,};
enum MACRO_PF_MIPS {PF_MIPS_LOCAL = 0x10000000,};
enum MACRO_POINTER {POINTER = 0,};
enum MACRO_PROCESS {INIT_PROCESS = 5,LOGIN_PROCESS = 6,USER_PROCESS = 7,DEAD_PROCESS = 8,};
enum MACRO_PTHREAD {PTHREAD_STACK_MIN = 16384,};
enum MACRO_PTRDIFF {PTRDIFF_MIN = -2147483648,PTRDIFF_MAX = 2147483647,};
enum MACRO_PT_MIPS {PT_MIPS_REGINFO = 0x70000000,PT_MIPS_RTPROC = 0x70000001,PT_MIPS_OPTIONS = 0x70000002,};
enum MACRO_PT_SUNW {PT_SUNW_UNWIND = 0x6464E550,PT_SUNWDTRACE = 0x6FFFFFFC,PT_SUNWCAP = 0x6FFFFFFD,};
enum MACRO_READ_12 {READ_12 = 0xA8,};
enum MACRO_RECOVER {RECOVER_BUFFERED_DATA = 0x14,};
enum MACRO_RELEASE {RELEASE = 0x17,};
enum MACRO_REQUEST {REQUEST_SENSE = 0x3,};
enum MACRO_RESERVE {RESERVE = 0x16,};
enum MACRO_REXPROC {REXPROC_START = 1,REXPROC_WAIT = 2,REXPROC_MODES = 3,REXPROC_WINCH = 4,REXPROC_SIGNAL = 5,};
enum MACRO_REXPROG {REXPROG = 100017,};
enum MACRO_REXVERS {REXVERS = 1,};
enum MACRO_RPCTEST {RPCTEST_PROGRAM = 1,RPCTEST_VERSION = 1,RPCTEST_NULL_PROC = 2,RPCTEST_NULL_BATCH_PROC = 3,};
enum MACRO_R_ALPHA {R_ALPHA_NONE = 0,R_ALPHA_REFLONG = 1,R_ALPHA_REFQUAD = 2,R_ALPHA_GPREL32 = 3,R_ALPHA_LITERAL = 4,R_ALPHA_LITUSE = 5,R_ALPHA_GPDISP = 6,R_ALPHA_BRADDR = 7,R_ALPHA_HINT = 8,R_ALPHA_SREL16 = 9,R_ALPHA_SREL32 = 10,R_ALPHA_SREL64 = 11,R_ALPHA_GPRELHIGH = 17,R_ALPHA_GPRELLOW = 18,R_ALPHA_GPREL16 = 19,R_ALPHA_COPY = 24,R_ALPHA_GLOB_DAT = 25,R_ALPHA_JMP_SLOT = 26,R_ALPHA_RELATIVE = 27,R_ALPHA_TLS_GD_HI = 28,R_ALPHA_TLSGD = 29,R_ALPHA_TLS_LDM = 30,R_ALPHA_DTPMOD64 = 31,R_ALPHA_GOTDTPREL = 32,R_ALPHA_DTPREL64 = 33,R_ALPHA_DTPRELHI = 34,R_ALPHA_DTPRELLO = 35,R_ALPHA_DTPREL16 = 36,R_ALPHA_GOTTPREL = 37,R_ALPHA_TPREL64 = 38,R_ALPHA_TPRELHI = 39,R_ALPHA_TPRELLO = 40,R_ALPHA_TPREL16 = 41,R_ALPHA_NUM = 46,};
enum MACRO_R_PPC64 {R_PPC64_NONE = 0,R_PPC64_ADDR32 = 1,R_PPC64_ADDR24 = 2,R_PPC64_ADDR16 = 3,R_PPC64_ADDR16_LO = 4,R_PPC64_ADDR16_HI = 5,R_PPC64_ADDR16_HA = 6,R_PPC64_ADDR14 = 7,R_PPC64_ADDR14_BRTAKEN = 8,R_PPC64_ADDR14_BRNTAKEN = 9,R_PPC64_REL24 = 10,R_PPC64_REL14 = 11,R_PPC64_REL14_BRTAKEN = 12,R_PPC64_REL14_BRNTAKEN = 13,R_PPC64_GOT16 = 14,R_PPC64_GOT16_LO = 15,R_PPC64_GOT16_HI = 16,R_PPC64_GOT16_HA = 17,R_PPC64_COPY = 19,R_PPC64_GLOB_DAT = 20,R_PPC64_JMP_SLOT = 21,R_PPC64_RELATIVE = 22,R_PPC64_UADDR32 = 24,R_PPC64_UADDR16 = 25,R_PPC64_REL32 = 26,R_PPC64_PLT32 = 27,R_PPC64_PLTREL32 = 28,R_PPC64_PLT16_LO = 29,R_PPC64_PLT16_HI = 30,R_PPC64_PLT16_HA = 31,R_PPC64_SECTOFF = 33,R_PPC64_SECTOFF_LO = 34,R_PPC64_SECTOFF_HI = 35,R_PPC64_SECTOFF_HA = 36,R_PPC64_ADDR30 = 37,R_PPC64_ADDR64 = 38,R_PPC64_ADDR16_HIGHER = 39,R_PPC64_ADDR16_HIGHERA = 40,R_PPC64_ADDR16_HIGHEST = 41,R_PPC64_ADDR16_HIGHESTA = 42,R_PPC64_UADDR64 = 43,R_PPC64_REL64 = 44,R_PPC64_PLT64 = 45,R_PPC64_PLTREL64 = 46,R_PPC64_TOC16 = 47,R_PPC64_TOC16_LO = 48,R_PPC64_TOC16_HI = 49,R_PPC64_TOC16_HA = 50,R_PPC64_TOC = 51,R_PPC64_PLTGOT16 = 52,R_PPC64_PLTGOT16_LO = 53,R_PPC64_PLTGOT16_HI = 54,R_PPC64_PLTGOT16_HA = 55,R_PPC64_ADDR16_DS = 56,R_PPC64_ADDR16_LO_DS = 57,R_PPC64_GOT16_DS = 58,R_PPC64_GOT16_LO_DS = 59,R_PPC64_PLT16_LO_DS = 60,R_PPC64_SECTOFF_DS = 61,R_PPC64_SECTOFF_LO_DS = 62,R_PPC64_TOC16_DS = 63,R_PPC64_TOC16_LO_DS = 64,R_PPC64_PLTGOT16_DS = 65,R_PPC64_PLTGOT16_LO_DS = 66,R_PPC64_TLS = 67,R_PPC64_DTPMOD64 = 68,R_PPC64_TPREL16 = 69,R_PPC64_TPREL16_LO = 70,R_PPC64_TPREL16_HI = 71,R_PPC64_TPREL16_HA = 72,R_PPC64_TPREL64 = 73,R_PPC64_DTPREL16 = 74,R_PPC64_DTPREL16_LO = 75,R_PPC64_DTPREL16_HI = 76,R_PPC64_DTPREL16_HA = 77,R_PPC64_DTPREL64 = 78,R_PPC64_GOT_TLSGD16 = 79,R_PPC64_GOT_TLSGD16_LO = 80,R_PPC64_GOT_TLSGD16_HI = 81,R_PPC64_GOT_TLSGD16_HA = 82,R_PPC64_GOT_TLSLD16 = 83,R_PPC64_GOT_TLSLD16_LO = 84,R_PPC64_GOT_TLSLD16_HI = 85,R_PPC64_GOT_TLSLD16_HA = 86,R_PPC64_GOT_TPREL16_DS = 87,R_PPC64_GOT_TPREL16_LO_DS = 88,R_PPC64_GOT_TPREL16_HI = 89,R_PPC64_GOT_TPREL16_HA = 90,R_PPC64_GOT_DTPREL16_DS = 91,R_PPC64_GOT_DTPREL16_LO_DS = 92,R_PPC64_GOT_DTPREL16_HI = 93,R_PPC64_GOT_DTPREL16_HA = 94,R_PPC64_TPREL16_DS = 95,R_PPC64_TPREL16_LO_DS = 96,R_PPC64_TPREL16_HIGHER = 97,R_PPC64_TPREL16_HIGHERA = 98,R_PPC64_TPREL16_HIGHEST = 99,R_PPC64_TPREL16_HIGHESTA = 100,R_PPC64_DTPREL16_DS = 101,R_PPC64_DTPREL16_LO_DS = 102,R_PPC64_DTPREL16_HIGHER = 103,R_PPC64_DTPREL16_HIGHERA = 104,R_PPC64_DTPREL16_HIGHEST = 105,R_PPC64_DTPREL16_HIGHESTA = 106,R_PPC64_NUM = 107,};
enum MACRO_R_SPARC {R_SPARC_NONE = 0,R_SPARC_8 = 1,R_SPARC_16 = 2,R_SPARC_32 = 3,R_SPARC_DISP8 = 4,R_SPARC_DISP16 = 5,R_SPARC_DISP32 = 6,R_SPARC_WDISP30 = 7,R_SPARC_WDISP22 = 8,R_SPARC_HI22 = 9,R_SPARC_22 = 10,R_SPARC_13 = 11,R_SPARC_LO10 = 12,R_SPARC_GOT10 = 13,R_SPARC_GOT13 = 14,R_SPARC_GOT22 = 15,R_SPARC_PC10 = 16,R_SPARC_PC22 = 17,R_SPARC_WPLT30 = 18,R_SPARC_COPY = 19,R_SPARC_GLOB_DAT = 20,R_SPARC_JMP_SLOT = 21,R_SPARC_RELATIVE = 22,R_SPARC_UA32 = 23,R_SPARC_PLT32 = 24,R_SPARC_HIPLT22 = 25,R_SPARC_LOPLT10 = 26,R_SPARC_PCPLT32 = 27,R_SPARC_PCPLT22 = 28,R_SPARC_PCPLT10 = 29,R_SPARC_10 = 30,R_SPARC_11 = 31,R_SPARC_64 = 32,R_SPARC_OLO10 = 33,R_SPARC_HH22 = 34,R_SPARC_HM10 = 35,R_SPARC_LM22 = 36,R_SPARC_PC_HH22 = 37,R_SPARC_PC_HM10 = 38,R_SPARC_PC_LM22 = 39,R_SPARC_WDISP16 = 40,R_SPARC_WDISP19 = 41,R_SPARC_7 = 43,R_SPARC_5 = 44,R_SPARC_6 = 45,R_SPARC_DISP64 = 46,R_SPARC_PLT64 = 47,R_SPARC_HIX22 = 48,R_SPARC_LOX10 = 49,R_SPARC_H44 = 50,R_SPARC_M44 = 51,R_SPARC_L44 = 52,R_SPARC_REGISTER = 53,R_SPARC_UA64 = 54,R_SPARC_UA16 = 55,R_SPARC_TLS_GD_HI22 = 56,R_SPARC_TLS_GD_LO10 = 57,R_SPARC_TLS_GD_ADD = 58,R_SPARC_TLS_GD_CALL = 59,R_SPARC_TLS_LDM_HI22 = 60,R_SPARC_TLS_LDM_LO10 = 61,R_SPARC_TLS_LDM_ADD = 62,R_SPARC_TLS_LDM_CALL = 63,R_SPARC_TLS_LDO_HIX22 = 64,R_SPARC_TLS_LDO_LOX10 = 65,R_SPARC_TLS_LDO_ADD = 66,R_SPARC_TLS_IE_HI22 = 67,R_SPARC_TLS_IE_LO10 = 68,R_SPARC_TLS_IE_LD = 69,R_SPARC_TLS_IE_LDX = 70,R_SPARC_TLS_IE_ADD = 71,R_SPARC_TLS_LE_HIX22 = 72,R_SPARC_TLS_LE_LOX10 = 73,R_SPARC_TLS_DTPMOD32 = 74,R_SPARC_TLS_DTPMOD64 = 75,R_SPARC_TLS_DTPOFF32 = 76,R_SPARC_TLS_DTPOFF64 = 77,R_SPARC_TLS_TPOFF32 = 78,R_SPARC_TLS_TPOFF64 = 79,R_SPARC_NUM = 80,};
enum MACRO_SCRNMAP {GIO_SCRNMAP = 0x4B40,PIO_SCRNMAP = 0x4B41,};
enum MACRO_SCSI_PT {SCSI_PT_DO_START_OK = 0,SCSI_PT_DO_BAD_PARAMS = 1,SCSI_PT_DO_TIMEOUT = 2,SCSI_PT_RESULT_GOOD = 0,SCSI_PT_RESULT_STATUS = 1,SCSI_PT_RESULT_SENSE = 2,SCSI_PT_RESULT_TRANSPORT_ERR = 3,SCSI_PT_RESULT_OS_ERR = 4,};
enum MACRO_SEEK_10 {SEEK_10 = 0x2B,};
enum MACRO_SEGSIZE {SEGSIZE = 512,};
enum MACRO_SELFMAG {SELFMAG = 4,};
enum MACRO_SENSORS {SENSORS_LM78_IN0 = 1,SENSORS_LM78_IN1 = 2,SENSORS_LM78_IN2 = 3,SENSORS_LM78_IN3 = 4,SENSORS_LM78_IN4 = 5,SENSORS_LM78_IN5 = 6,SENSORS_LM78_IN6 = 7,SENSORS_LM78_IN0_MIN = 11,SENSORS_LM78_IN1_MIN = 12,SENSORS_LM78_IN2_MIN = 13,SENSORS_LM78_IN3_MIN = 14,SENSORS_LM78_IN4_MIN = 15,SENSORS_LM78_IN5_MIN = 16,SENSORS_LM78_IN6_MIN = 17,SENSORS_LM78_IN0_MAX = 21,SENSORS_LM78_IN1_MAX = 22,SENSORS_LM78_IN2_MAX = 23,SENSORS_LM78_IN3_MAX = 24,SENSORS_LM78_IN4_MAX = 25,SENSORS_LM78_IN5_MAX = 26,SENSORS_LM78_IN6_MAX = 27,SENSORS_LM78_FAN1 = 31,SENSORS_LM78_FAN2 = 32,SENSORS_LM78_FAN3 = 33,SENSORS_LM78_FAN1_MIN = 41,SENSORS_LM78_FAN2_MIN = 42,SENSORS_LM78_FAN3_MIN = 43,SENSORS_LM78_TEMP = 51,SENSORS_LM78_TEMP_HYST = 52,SENSORS_LM78_TEMP_OVER = 53,SENSORS_LM78_VID = 61,SENSORS_LM78_FAN1_DIV = 71,SENSORS_LM78_FAN2_DIV = 72,SENSORS_LM78_FAN3_DIV = 73,SENSORS_LM78_ALARMS = 81,SENSORS_LM78J_IN0 = 1,SENSORS_LM78J_IN1 = 2,SENSORS_LM78J_IN2 = 3,SENSORS_LM78J_IN3 = 4,SENSORS_LM78J_IN4 = 5,SENSORS_LM78J_IN5 = 6,SENSORS_LM78J_IN6 = 7,SENSORS_LM78J_IN0_MIN = 11,SENSORS_LM78J_IN1_MIN = 12,SENSORS_LM78J_IN2_MIN = 13,SENSORS_LM78J_IN3_MIN = 14,SENSORS_LM78J_IN4_MIN = 15,SENSORS_LM78J_IN5_MIN = 16,SENSORS_LM78J_IN6_MIN = 17,SENSORS_LM78J_IN0_MAX = 21,SENSORS_LM78J_IN1_MAX = 22,SENSORS_LM78J_IN2_MAX = 23,SENSORS_LM78J_IN3_MAX = 24,SENSORS_LM78J_IN4_MAX = 25,SENSORS_LM78J_IN5_MAX = 26,SENSORS_LM78J_IN6_MAX = 27,SENSORS_LM78J_FAN1 = 31,SENSORS_LM78J_FAN2 = 32,SENSORS_LM78J_FAN3 = 33,SENSORS_LM78J_FAN1_MIN = 41,SENSORS_LM78J_FAN2_MIN = 42,SENSORS_LM78J_FAN3_MIN = 43,SENSORS_LM78J_TEMP = 51,SENSORS_LM78J_TEMP_HYST = 52,SENSORS_LM78J_TEMP_OVER = 53,SENSORS_LM78J_VID = 61,SENSORS_LM78J_FAN1_DIV = 71,SENSORS_LM78J_FAN2_DIV = 72,SENSORS_LM78J_FAN3_DIV = 73,SENSORS_LM78J_ALARMS = 81,SENSORS_LM79_IN0 = 1,SENSORS_LM79_IN1 = 2,SENSORS_LM79_IN2 = 3,SENSORS_LM79_IN3 = 4,SENSORS_LM79_IN4 = 5,SENSORS_LM79_IN5 = 6,SENSORS_LM79_IN6 = 7,SENSORS_LM79_IN0_MIN = 11,SENSORS_LM79_IN1_MIN = 12,SENSORS_LM79_IN2_MIN = 13,SENSORS_LM79_IN3_MIN = 14,SENSORS_LM79_IN4_MIN = 15,SENSORS_LM79_IN5_MIN = 16,SENSORS_LM79_IN6_MIN = 17,SENSORS_LM79_IN0_MAX = 21,SENSORS_LM79_IN1_MAX = 22,SENSORS_LM79_IN2_MAX = 23,SENSORS_LM79_IN3_MAX = 24,SENSORS_LM79_IN4_MAX = 25,SENSORS_LM79_IN5_MAX = 26,SENSORS_LM79_IN6_MAX = 27,SENSORS_LM79_FAN1 = 31,SENSORS_LM79_FAN2 = 32,SENSORS_LM79_FAN3 = 33,SENSORS_LM79_FAN1_MIN = 41,SENSORS_LM79_FAN2_MIN = 42,SENSORS_LM79_FAN3_MIN = 43,SENSORS_LM79_TEMP = 51,SENSORS_LM79_TEMP_HYST = 52,SENSORS_LM79_TEMP_OVER = 53,SENSORS_LM79_VID = 61,SENSORS_LM79_FAN1_DIV = 71,SENSORS_LM79_FAN2_DIV = 72,SENSORS_LM79_FAN3_DIV = 73,SENSORS_LM79_ALARMS = 81,SENSORS_LM75_TEMP = 51,SENSORS_LM75_TEMP_HYST = 52,SENSORS_LM75_TEMP_OVER = 53,SENSORS_ADM1021_TEMP = 51,SENSORS_ADM1021_TEMP_HYST = 52,SENSORS_ADM1021_TEMP_OVER = 53,SENSORS_ADM1021_REMOTE_TEMP = 54,SENSORS_ADM1021_REMOTE_TEMP_HYST = 55,SENSORS_ADM1021_REMOTE_TEMP_OVER = 56,SENSORS_ADM1021_ALARMS = 81,SENSORS_ADM1021_DIE_CODE = 90,SENSORS_ADM1031_TEMP1 = 51,SENSORS_ADM1031_TEMP1_MIN = 52,SENSORS_ADM1031_TEMP1_MAX = 53,SENSORS_ADM1031_TEMP1_CRIT = 54,SENSORS_ADM1031_TEMP2 = 61,SENSORS_ADM1031_TEMP2_MIN = 62,SENSORS_ADM1031_TEMP2_MAX = 63,SENSORS_ADM1031_TEMP2_CRIT = 64,SENSORS_ADM1031_TEMP3 = 71,SENSORS_ADM1031_TEMP3_MIN = 72,SENSORS_ADM1031_TEMP3_MAX = 73,SENSORS_ADM1031_TEMP3_CRIT = 74,SENSORS_ADM1031_FAN1 = 80,SENSORS_ADM1031_FAN1_MIN = 81,SENSORS_ADM1031_FAN1_DIV = 82,SENSORS_ADM1031_FAN2 = 90,SENSORS_ADM1031_FAN2_MIN = 91,SENSORS_ADM1031_FAN2_DIV = 92,SENSORS_ADM1031_ALARMS = 100,SENSORS_MAX1617_TEMP = 51,SENSORS_MAX1617_TEMP_HYST = 52,SENSORS_MAX1617_TEMP_OVER = 53,SENSORS_MAX1617_REMOTE_TEMP = 54,SENSORS_MAX1617_REMOTE_TEMP_HYST = 55,SENSORS_MAX1617_REMOTE_TEMP_OVER = 56,SENSORS_MAX1617_ALARMS = 81,SENSORS_MAX1617A_TEMP = 51,SENSORS_MAX1617A_TEMP_HYST = 52,SENSORS_MAX1617A_TEMP_OVER = 53,SENSORS_MAX1617A_REMOTE_TEMP = 54,SENSORS_MAX1617A_REMOTE_TEMP_HYST = 55,SENSORS_MAX1617A_REMOTE_TEMP_OVER = 56,SENSORS_MAX1617A_ALARMS = 81,SENSORS_GL518_VDD = 1,SENSORS_GL518_VIN1 = 2,SENSORS_GL518_VIN2 = 3,SENSORS_GL518_VIN3 = 4,SENSORS_GL518_VDD_MIN = 11,SENSORS_GL518_VIN1_MIN = 12,SENSORS_GL518_VIN2_MIN = 13,SENSORS_GL518_VIN3_MIN = 14,SENSORS_GL518_VDD_MAX = 21,SENSORS_GL518_VIN1_MAX = 22,SENSORS_GL518_VIN2_MAX = 23,SENSORS_GL518_VIN3_MAX = 24,SENSORS_GL518_FAN1 = 31,SENSORS_GL518_FAN2 = 32,SENSORS_GL518_FAN1_MIN = 41,SENSORS_GL518_FAN2_MIN = 42,SENSORS_GL518_TEMP = 51,SENSORS_GL518_TEMP_HYST = 52,SENSORS_GL518_TEMP_OVER = 53,SENSORS_GL518_FAN1_DIV = 71,SENSORS_GL518_FAN2_DIV = 72,SENSORS_GL518_ALARMS = 81,SENSORS_GL518_BEEP_ENABLE = 82,SENSORS_GL518_BEEPS = 83,SENSORS_GL518_ITERATE = 84,SENSORS_GL518_FAN1OFF = 85,SENSORS_GL518_FAN1PIN = 86,SENSORS_GL520_VDD = 1,SENSORS_GL520_VIN1 = 2,SENSORS_GL520_VIN2 = 3,SENSORS_GL520_VIN3 = 4,SENSORS_GL520_VIN4 = 5,SENSORS_GL520_VDD_MIN = 11,SENSORS_GL520_VIN1_MIN = 12,SENSORS_GL520_VIN2_MIN = 13,SENSORS_GL520_VIN3_MIN = 14,SENSORS_GL520_VIN4_MIN = 15,SENSORS_GL520_VDD_MAX = 21,SENSORS_GL520_VIN1_MAX = 22,SENSORS_GL520_VIN2_MAX = 23,SENSORS_GL520_VIN3_MAX = 24,SENSORS_GL520_VIN4_MAX = 25,SENSORS_GL520_FAN1 = 31,SENSORS_GL520_FAN2 = 32,SENSORS_GL520_FAN1_MIN = 41,SENSORS_GL520_FAN2_MIN = 42,SENSORS_GL520_TEMP1 = 51,SENSORS_GL520_TEMP1_HYST = 52,SENSORS_GL520_TEMP1_OVER = 53,SENSORS_GL520_TEMP2 = 54,SENSORS_GL520_TEMP2_HYST = 55,SENSORS_GL520_TEMP2_OVER = 56,SENSORS_GL520_VID = 61,SENSORS_GL520_FAN1_DIV = 71,SENSORS_GL520_FAN2_DIV = 72,SENSORS_GL520_ALARMS = 81,SENSORS_GL520_BEEP_ENABLE = 82,SENSORS_GL520_BEEPS = 83,SENSORS_GL520_TWOTEMPS = 84,SENSORS_GL520_FAN1OFF = 85,SENSORS_LM80_IN0 = 1,SENSORS_LM80_IN1 = 2,SENSORS_LM80_IN2 = 3,SENSORS_LM80_IN3 = 4,SENSORS_LM80_IN4 = 5,SENSORS_LM80_IN5 = 6,SENSORS_LM80_IN6 = 7,SENSORS_LM80_IN0_MIN = 11,SENSORS_LM80_IN1_MIN = 12,SENSORS_LM80_IN2_MIN = 13,SENSORS_LM80_IN3_MIN = 14,SENSORS_LM80_IN4_MIN = 15,SENSORS_LM80_IN5_MIN = 16,SENSORS_LM80_IN6_MIN = 17,SENSORS_LM80_IN0_MAX = 21,SENSORS_LM80_IN1_MAX = 22,SENSORS_LM80_IN2_MAX = 23,SENSORS_LM80_IN3_MAX = 24,SENSORS_LM80_IN4_MAX = 25,SENSORS_LM80_IN5_MAX = 26,SENSORS_LM80_IN6_MAX = 27,SENSORS_LM80_FAN1 = 31,SENSORS_LM80_FAN2 = 32,SENSORS_LM80_FAN1_MIN = 41,SENSORS_LM80_FAN2_MIN = 42,SENSORS_LM80_TEMP = 51,SENSORS_LM80_TEMP_HOT_HYST = 52,SENSORS_LM80_TEMP_HOT_MAX = 53,SENSORS_LM80_TEMP_OS_HYST = 54,SENSORS_LM80_TEMP_OS_MAX = 55,SENSORS_LM80_FAN1_DIV = 71,SENSORS_LM80_FAN2_DIV = 72,SENSORS_LM80_ALARMS = 81,SENSORS_LM83_LOCAL_TEMP = 51,SENSORS_LM83_LOCAL_HIGH = 52,SENSORS_LM83_REMOTE1_TEMP = 54,SENSORS_LM83_REMOTE1_HIGH = 55,SENSORS_LM83_REMOTE2_TEMP = 57,SENSORS_LM83_REMOTE2_HIGH = 58,SENSORS_LM83_REMOTE3_TEMP = 60,SENSORS_LM83_REMOTE3_HIGH = 61,SENSORS_LM83_TCRIT = 80,SENSORS_LM83_ALARMS = 81,SENSORS_ADM1027_ALARM_MASK = 1,SENSORS_ADM1027_FAN1_PPR = 2,SENSORS_ADM1027_FAN1_TACH_MODE = 3,SENSORS_ADM1027_FAN2_PPR = 4,SENSORS_ADM1027_FAN2_TACH_MODE = 5,SENSORS_ADM1027_FAN3_PPR = 6,SENSORS_ADM1027_FAN3_TACH_MODE = 7,SENSORS_ADM1027_FAN4_PPR = 8,SENSORS_ADM1027_FAN4_TACH_MODE = 9,SENSORS_ADM1027_PWM1_SMOOTH = 10,SENSORS_ADM1027_PWM2_SMOOTH = 11,SENSORS_ADM1027_PWM3_SMOOTH = 12,SENSORS_ADM1027_TEMP1_OFFSET = 13,SENSORS_ADM1027_TEMP2_OFFSET = 14,SENSORS_ADM1027_TEMP3_OFFSET = 15,SENSORS_LM85_ALARMS = 16,SENSORS_LM85_VID = 17,SENSORS_LM85_VRM = 18,SENSORS_LM85_FAN1 = 19,SENSORS_LM85_FAN1_MIN = 20,SENSORS_LM85_FAN1_TACH_MODE = 21,SENSORS_LM85_FAN2 = 22,SENSORS_LM85_FAN2_MIN = 23,SENSORS_LM85_FAN2_TACH_MODE = 24,SENSORS_LM85_FAN3 = 25,SENSORS_LM85_FAN3_MIN = 26,SENSORS_LM85_FAN3_TACH_MODE = 27,SENSORS_LM85_FAN4 = 28,SENSORS_LM85_FAN4_MIN = 29,SENSORS_LM85_IN0 = 30,SENSORS_LM85_IN0_MAX = 31,SENSORS_LM85_IN0_MIN = 32,SENSORS_LM85_IN1 = 33,SENSORS_LM85_IN1_MAX = 34,SENSORS_LM85_IN1_MIN = 35,SENSORS_LM85_IN2 = 36,SENSORS_LM85_IN2_MAX = 37,SENSORS_LM85_IN2_MIN = 38,SENSORS_LM85_IN3 = 39,SENSORS_LM85_IN3_MAX = 40,SENSORS_LM85_IN3_MIN = 41,SENSORS_LM85_IN4 = 42,SENSORS_LM85_IN4_MAX = 43,SENSORS_LM85_IN4_MIN = 44,SENSORS_LM85_IN5 = 45,SENSORS_LM85_IN5_MAX = 46,SENSORS_LM85_IN5_MIN = 47,SENSORS_LM85_IN6 = 48,SENSORS_LM85_IN6_MAX = 49,SENSORS_LM85_IN6_MIN = 50,SENSORS_LM85_IN7 = 51,SENSORS_LM85_IN7_MAX = 52,SENSORS_LM85_IN7_MIN = 53,SENSORS_LM85_PWM1 = 54,SENSORS_LM85_PWM1_FREQ = 55,SENSORS_LM85_PWM1_INVERT = 56,SENSORS_LM85_PWM1_MIN = 57,SENSORS_LM85_PWM1_MIN_CTL = 58,SENSORS_LM85_PWM1_SPINUP = 59,SENSORS_LM85_PWM1_SPINUP_CTL = 60,SENSORS_LM85_PWM1_ZONE = 61,SENSORS_LM85_PWM2 = 62,SENSORS_LM85_PWM2_FREQ = 63,SENSORS_LM85_PWM2_INVERT = 64,SENSORS_LM85_PWM2_MIN = 65,SENSORS_LM85_PWM2_MIN_CTL = 66,SENSORS_LM85_PWM2_SPINUP = 67,SENSORS_LM85_PWM2_SPINUP_CTL = 68,SENSORS_LM85_PWM2_ZONE = 69,SENSORS_LM85_PWM3 = 70,SENSORS_LM85_PWM3_FREQ = 71,SENSORS_LM85_PWM3_INVERT = 72,SENSORS_LM85_PWM3_MIN = 73,SENSORS_LM85_PWM3_MIN_CTL = 74,SENSORS_LM85_PWM3_SPINUP = 75,SENSORS_LM85_PWM3_SPINUP_CTL = 76,SENSORS_LM85_PWM3_ZONE = 77,SENSORS_LM85_TEMP1 = 78,SENSORS_LM85_TEMP1_MAX = 79,SENSORS_LM85_TEMP1_MIN = 80,SENSORS_LM85_TEMP2 = 81,SENSORS_LM85_TEMP2_MAX = 82,SENSORS_LM85_TEMP2_MIN = 83,SENSORS_LM85_TEMP3 = 84,SENSORS_LM85_TEMP3_MAX = 85,SENSORS_LM85_TEMP3_MIN = 86,SENSORS_LM85_ZONE1_CRITICAL = 87,SENSORS_LM85_ZONE1_HYST = 88,SENSORS_LM85_ZONE1_LIMIT = 89,SENSORS_LM85_ZONE1_RANGE = 90,SENSORS_LM85_ZONE1_SMOOTH = 91,SENSORS_LM85_ZONE2_CRITICAL = 92,SENSORS_LM85_ZONE2_HYST = 93,SENSORS_LM85_ZONE2_LIMIT = 94,SENSORS_LM85_ZONE2_RANGE = 95,SENSORS_LM85_ZONE2_SMOOTH = 96,SENSORS_LM85_ZONE3_CRITICAL = 97,SENSORS_LM85_ZONE3_HYST = 98,SENSORS_LM85_ZONE3_LIMIT = 99,SENSORS_LM85_ZONE3_RANGE = 100,SENSORS_LM85_ZONE3_SMOOTH = 101,SENSORS_LM90_LOCAL_TEMP = 51,SENSORS_LM90_LOCAL_HIGH = 52,SENSORS_LM90_LOCAL_LOW = 53,SENSORS_LM90_LOCAL_TCRIT = 54,SENSORS_LM90_REMOTE_TEMP = 57,SENSORS_LM90_REMOTE_HIGH = 58,SENSORS_LM90_REMOTE_LOW = 59,SENSORS_LM90_REMOTE_TCRIT = 60,SENSORS_LM90_LOCAL_TCRIT_HYST = 79,SENSORS_LM90_REMOTE_TCRIT_HYST = 80,SENSORS_LM90_ALARMS = 81,SENSORS_LM63_LOCAL_TEMP = 51,SENSORS_LM63_LOCAL_HIGH = 52,SENSORS_LM63_REMOTE_TEMP = 57,SENSORS_LM63_REMOTE_HIGH = 58,SENSORS_LM63_REMOTE_LOW = 59,SENSORS_LM63_REMOTE_TCRIT = 60,SENSORS_LM63_REMOTE_TCRIT_HYST = 80,SENSORS_LM63_ALARMS = 81,SENSORS_LM63_FAN = 84,SENSORS_LM63_FAN_LOW = 85,SENSORS_LM63_PWM = 87,SENSORS_LM63_PWM_ENABLE = 88,SENSORS_W83781D_IN0 = 1,SENSORS_W83781D_IN1 = 2,SENSORS_W83781D_IN2 = 3,SENSORS_W83781D_IN3 = 4,SENSORS_W83781D_IN4 = 5,SENSORS_W83781D_IN5 = 6,SENSORS_W83781D_IN6 = 7,SENSORS_W83781D_IN0_MIN = 11,SENSORS_W83781D_IN1_MIN = 12,SENSORS_W83781D_IN2_MIN = 13,SENSORS_W83781D_IN3_MIN = 14,SENSORS_W83781D_IN4_MIN = 15,SENSORS_W83781D_IN5_MIN = 16,SENSORS_W83781D_IN6_MIN = 17,SENSORS_W83781D_IN0_MAX = 21,SENSORS_W83781D_IN1_MAX = 22,SENSORS_W83781D_IN2_MAX = 23,SENSORS_W83781D_IN3_MAX = 24,SENSORS_W83781D_IN4_MAX = 25,SENSORS_W83781D_IN5_MAX = 26,SENSORS_W83781D_IN6_MAX = 27,SENSORS_W83781D_FAN1 = 31,SENSORS_W83781D_FAN2 = 32,SENSORS_W83781D_FAN3 = 33,SENSORS_W83781D_FAN1_MIN = 41,SENSORS_W83781D_FAN2_MIN = 42,SENSORS_W83781D_FAN3_MIN = 43,SENSORS_W83781D_TEMP1 = 51,SENSORS_W83781D_TEMP1_HYST = 52,SENSORS_W83781D_TEMP1_OVER = 53,SENSORS_W83781D_TEMP2 = 54,SENSORS_W83781D_TEMP2_HYST = 55,SENSORS_W83781D_TEMP2_OVER = 56,SENSORS_W83781D_TEMP3 = 57,SENSORS_W83781D_TEMP3_HYST = 58,SENSORS_W83781D_TEMP3_OVER = 59,SENSORS_W83781D_VID = 61,SENSORS_W83781D_VRM = 62,SENSORS_W83781D_FAN1_DIV = 71,SENSORS_W83781D_FAN2_DIV = 72,SENSORS_W83781D_FAN3_DIV = 73,SENSORS_W83781D_ALARMS = 81,SENSORS_W83781D_BEEP_ENABLE = 82,SENSORS_W83781D_BEEPS = 83,SENSORS_W83781D_SENS1 = 91,SENSORS_W83781D_SENS2 = 92,SENSORS_W83781D_SENS3 = 93,SENSORS_W83791D_IN0 = 1,SENSORS_W83791D_IN1 = 2,SENSORS_W83791D_IN2 = 3,SENSORS_W83791D_IN3 = 4,SENSORS_W83791D_IN4 = 5,SENSORS_W83791D_IN5 = 6,SENSORS_W83791D_IN6 = 7,SENSORS_W83791D_IN7 = 8,SENSORS_W83791D_IN8 = 9,SENSORS_W83791D_IN9 = 10,SENSORS_W83791D_IN0_MIN = 11,SENSORS_W83791D_IN1_MIN = 12,SENSORS_W83791D_IN2_MIN = 13,SENSORS_W83791D_IN3_MIN = 14,SENSORS_W83791D_IN4_MIN = 15,SENSORS_W83791D_IN5_MIN = 16,SENSORS_W83791D_IN6_MIN = 17,SENSORS_W83791D_IN7_MIN = 18,SENSORS_W83791D_IN8_MIN = 19,SENSORS_W83791D_IN9_MIN = 20,SENSORS_W83791D_IN0_MAX = 21,SENSORS_W83791D_IN1_MAX = 22,SENSORS_W83791D_IN2_MAX = 23,SENSORS_W83791D_IN3_MAX = 24,SENSORS_W83791D_IN4_MAX = 25,SENSORS_W83791D_IN5_MAX = 26,SENSORS_W83791D_IN6_MAX = 27,SENSORS_W83791D_IN7_MAX = 28,SENSORS_W83791D_IN8_MAX = 29,SENSORS_W83791D_IN9_MAX = 30,SENSORS_W83791D_FAN1 = 31,SENSORS_W83791D_FAN2 = 32,SENSORS_W83791D_FAN3 = 33,SENSORS_W83791D_FAN4 = 34,SENSORS_W83791D_FAN5 = 35,SENSORS_W83791D_FAN1_MIN = 41,SENSORS_W83791D_FAN2_MIN = 42,SENSORS_W83791D_FAN3_MIN = 43,SENSORS_W83791D_FAN4_MIN = 44,SENSORS_W83791D_FAN5_MIN = 45,SENSORS_W83791D_TEMP1 = 51,SENSORS_W83791D_TEMP1_HYST = 52,SENSORS_W83791D_TEMP1_OVER = 53,SENSORS_W83791D_TEMP2 = 54,SENSORS_W83791D_TEMP2_HYST = 55,SENSORS_W83791D_TEMP2_OVER = 56,SENSORS_W83791D_TEMP3 = 57,SENSORS_W83791D_TEMP3_HYST = 58,SENSORS_W83791D_TEMP3_OVER = 59,SENSORS_W83791D_VID = 61,SENSORS_W83791D_VRM = 62,SENSORS_W83791D_FAN1_DIV = 71,SENSORS_W83791D_FAN2_DIV = 72,SENSORS_W83791D_FAN3_DIV = 73,SENSORS_W83791D_FAN4_DIV = 74,SENSORS_W83791D_FAN5_DIV = 75,SENSORS_W83791D_ALARMS = 81,SENSORS_W83791D_BEEP_ENABLE = 82,SENSORS_W83791D_BEEPS = 83,SENSORS_W83791D_SENS1 = 91,SENSORS_W83791D_SENS2 = 92,SENSORS_W83791D_SENS3 = 93,SENSORS_W83792D_IN0 = 1,SENSORS_W83792D_IN1 = 2,SENSORS_W83792D_IN2 = 3,SENSORS_W83792D_IN3 = 4,SENSORS_W83792D_IN4 = 5,SENSORS_W83792D_IN5 = 6,SENSORS_W83792D_IN6 = 7,SENSORS_W83792D_IN7 = 8,SENSORS_W83792D_IN8 = 9,SENSORS_W83792D_IN9 = 10,SENSORS_W83792D_IN0_MIN = 11,SENSORS_W83792D_IN1_MIN = 12,SENSORS_W83792D_IN2_MIN = 13,SENSORS_W83792D_IN3_MIN = 14,SENSORS_W83792D_IN4_MIN = 15,SENSORS_W83792D_IN5_MIN = 16,SENSORS_W83792D_IN6_MIN = 17,SENSORS_W83792D_IN7_MIN = 18,SENSORS_W83792D_IN8_MIN = 19,SENSORS_W83792D_IN9_MIN = 20,SENSORS_W83792D_IN0_MAX = 21,SENSORS_W83792D_IN1_MAX = 22,SENSORS_W83792D_IN2_MAX = 23,SENSORS_W83792D_IN3_MAX = 24,SENSORS_W83792D_IN4_MAX = 25,SENSORS_W83792D_IN5_MAX = 26,SENSORS_W83792D_IN6_MAX = 27,SENSORS_W83792D_IN7_MAX = 28,SENSORS_W83792D_IN8_MAX = 29,SENSORS_W83792D_IN9_MAX = 30,SENSORS_W83792D_FAN1 = 31,SENSORS_W83792D_FAN2 = 32,SENSORS_W83792D_FAN3 = 33,SENSORS_W83792D_FAN4 = 34,SENSORS_W83792D_FAN5 = 35,SENSORS_W83792D_FAN6 = 36,SENSORS_W83792D_FAN7 = 37,SENSORS_W83792D_FAN1_MIN = 41,SENSORS_W83792D_FAN2_MIN = 42,SENSORS_W83792D_FAN3_MIN = 43,SENSORS_W83792D_FAN4_MIN = 44,SENSORS_W83792D_FAN5_MIN = 45,SENSORS_W83792D_FAN6_MIN = 46,SENSORS_W83792D_FAN7_MIN = 47,SENSORS_W83792D_TEMP1 = 51,SENSORS_W83792D_TEMP1_HYST = 52,SENSORS_W83792D_TEMP1_OVER = 53,SENSORS_W83792D_TEMP2 = 54,SENSORS_W83792D_TEMP2_HYST = 55,SENSORS_W83792D_TEMP2_OVER = 56,SENSORS_W83792D_TEMP3 = 57,SENSORS_W83792D_TEMP3_HYST = 58,SENSORS_W83792D_TEMP3_OVER = 59,SENSORS_W83792D_CHASSIS = 63,SENSORS_W83792D_ALARMS = 64,SENSORS_W83792D_FAN1_DIV = 71,SENSORS_W83792D_FAN2_DIV = 72,SENSORS_W83792D_FAN3_DIV = 73,SENSORS_W83792D_FAN4_DIV = 74,SENSORS_W83792D_FAN5_DIV = 75,SENSORS_W83792D_FAN6_DIV = 76,SENSORS_W83792D_FAN7_DIV = 77,SENSORS_W83793_VID0 = 221,SENSORS_W83793_VID1 = 222,SENSORS_W83793_VRM = 230,SENSORS_W83793_CHASSIS = 240,SENSORS_W83782D_IN0 = 1,SENSORS_W83782D_IN1 = 2,SENSORS_W83782D_IN2 = 3,SENSORS_W83782D_IN3 = 4,SENSORS_W83782D_IN4 = 5,SENSORS_W83782D_IN5 = 6,SENSORS_W83782D_IN6 = 7,SENSORS_W83782D_IN7 = 8,SENSORS_W83782D_IN8 = 9,SENSORS_W83782D_IN0_MIN = 11,SENSORS_W83782D_IN1_MIN = 12,SENSORS_W83782D_IN2_MIN = 13,SENSORS_W83782D_IN3_MIN = 14,SENSORS_W83782D_IN4_MIN = 15,SENSORS_W83782D_IN5_MIN = 16,SENSORS_W83782D_IN6_MIN = 17,SENSORS_W83782D_IN7_MIN = 18,SENSORS_W83782D_IN8_MIN = 19,SENSORS_W83782D_IN0_MAX = 21,SENSORS_W83782D_IN1_MAX = 22,SENSORS_W83782D_IN2_MAX = 23,SENSORS_W83782D_IN3_MAX = 24,SENSORS_W83782D_IN4_MAX = 25,SENSORS_W83782D_IN5_MAX = 26,SENSORS_W83782D_IN6_MAX = 27,SENSORS_W83782D_IN7_MAX = 28,SENSORS_W83782D_IN8_MAX = 29,SENSORS_W83782D_FAN1 = 31,SENSORS_W83782D_FAN2 = 32,SENSORS_W83782D_FAN3 = 33,SENSORS_W83782D_FAN1_MIN = 41,SENSORS_W83782D_FAN2_MIN = 42,SENSORS_W83782D_FAN3_MIN = 43,SENSORS_W83782D_TEMP1 = 51,SENSORS_W83782D_TEMP1_HYST = 52,SENSORS_W83782D_TEMP1_OVER = 53,SENSORS_W83782D_TEMP2 = 54,SENSORS_W83782D_TEMP2_HYST = 55,SENSORS_W83782D_TEMP2_OVER = 56,SENSORS_W83782D_TEMP3 = 57,SENSORS_W83782D_TEMP3_HYST = 58,SENSORS_W83782D_TEMP3_OVER = 59,SENSORS_W83782D_VID = 61,SENSORS_W83782D_VRM = 62,SENSORS_W83782D_FAN1_DIV = 71,SENSORS_W83782D_FAN2_DIV = 72,SENSORS_W83782D_FAN3_DIV = 73,SENSORS_W83782D_ALARMS = 81,SENSORS_W83782D_BEEP_ENABLE = 82,SENSORS_W83782D_BEEPS = 83,SENSORS_W83782D_SENS1 = 91,SENSORS_W83782D_SENS2 = 92,SENSORS_W83782D_SENS3 = 93,SENSORS_W83783S_IN0 = 1,SENSORS_W83783S_IN1 = 2,SENSORS_W83783S_IN2 = 3,SENSORS_W83783S_IN3 = 4,SENSORS_W83783S_IN4 = 5,SENSORS_W83783S_IN5 = 6,SENSORS_W83783S_IN6 = 7,SENSORS_W83783S_IN0_MIN = 11,SENSORS_W83783S_IN1_MIN = 12,SENSORS_W83783S_IN2_MIN = 13,SENSORS_W83783S_IN3_MIN = 14,SENSORS_W83783S_IN4_MIN = 15,SENSORS_W83783S_IN5_MIN = 16,SENSORS_W83783S_IN6_MIN = 17,SENSORS_W83783S_IN0_MAX = 21,SENSORS_W83783S_IN1_MAX = 22,SENSORS_W83783S_IN2_MAX = 23,SENSORS_W83783S_IN3_MAX = 24,SENSORS_W83783S_IN4_MAX = 25,SENSORS_W83783S_IN5_MAX = 26,SENSORS_W83783S_IN6_MAX = 27,SENSORS_W83783S_FAN1 = 31,SENSORS_W83783S_FAN2 = 32,SENSORS_W83783S_FAN3 = 33,SENSORS_W83783S_FAN1_MIN = 41,SENSORS_W83783S_FAN2_MIN = 42,SENSORS_W83783S_FAN3_MIN = 43,SENSORS_W83783S_TEMP1 = 51,SENSORS_W83783S_TEMP1_HYST = 52,SENSORS_W83783S_TEMP1_OVER = 53,SENSORS_W83783S_TEMP2 = 54,SENSORS_W83783S_TEMP2_HYST = 55,SENSORS_W83783S_TEMP2_OVER = 56,SENSORS_W83783S_VID = 61,SENSORS_W83783S_VRM = 62,SENSORS_W83783S_FAN1_DIV = 71,SENSORS_W83783S_FAN2_DIV = 72,SENSORS_W83783S_FAN3_DIV = 73,SENSORS_W83783S_ALARMS = 81,SENSORS_W83783S_BEEP_ENABLE = 82,SENSORS_W83783S_BEEPS = 83,SENSORS_W83783S_SENS1 = 91,SENSORS_W83783S_SENS2 = 92,SENSORS_W83L785TS_TEMP = 51,SENSORS_W83L785TS_TEMP_OVER = 52,SENSORS_W83627EHF_IN0 = 1,SENSORS_W83627EHF_IN1 = 2,SENSORS_W83627EHF_IN2 = 3,SENSORS_W83627EHF_IN3 = 4,SENSORS_W83627EHF_IN4 = 5,SENSORS_W83627EHF_IN5 = 6,SENSORS_W83627EHF_IN6 = 7,SENSORS_W83627EHF_IN7 = 8,SENSORS_W83627EHF_IN8 = 9,SENSORS_W83627EHF_IN9 = 10,SENSORS_W83627EHF_IN0_ALARM = 111,SENSORS_W83627EHF_IN1_ALARM = 112,SENSORS_W83627EHF_IN2_ALARM = 113,SENSORS_W83627EHF_IN3_ALARM = 114,SENSORS_W83627EHF_IN4_ALARM = 115,SENSORS_W83627EHF_IN5_ALARM = 116,SENSORS_W83627EHF_IN6_ALARM = 117,SENSORS_W83627EHF_IN7_ALARM = 118,SENSORS_W83627EHF_IN8_ALARM = 119,SENSORS_W83627EHF_IN9_ALARM = 120,SENSORS_W83627EHF_IN0_MIN = 11,SENSORS_W83627EHF_IN1_MIN = 12,SENSORS_W83627EHF_IN2_MIN = 13,SENSORS_W83627EHF_IN3_MIN = 14,SENSORS_W83627EHF_IN4_MIN = 15,SENSORS_W83627EHF_IN5_MIN = 16,SENSORS_W83627EHF_IN6_MIN = 17,SENSORS_W83627EHF_IN7_MIN = 18,SENSORS_W83627EHF_IN8_MIN = 19,SENSORS_W83627EHF_IN9_MIN = 20,SENSORS_W83627EHF_IN0_MAX = 21,SENSORS_W83627EHF_IN1_MAX = 22,SENSORS_W83627EHF_IN2_MAX = 23,SENSORS_W83627EHF_IN3_MAX = 24,SENSORS_W83627EHF_IN4_MAX = 25,SENSORS_W83627EHF_IN5_MAX = 26,SENSORS_W83627EHF_IN6_MAX = 27,SENSORS_W83627EHF_IN7_MAX = 28,SENSORS_W83627EHF_IN8_MAX = 29,SENSORS_W83627EHF_IN9_MAX = 30,SENSORS_W83627EHF_FAN1 = 31,SENSORS_W83627EHF_FAN2 = 32,SENSORS_W83627EHF_FAN3 = 33,SENSORS_W83627EHF_FAN4 = 34,SENSORS_W83627EHF_FAN5 = 35,SENSORS_W83627EHF_FAN1_ALARM = 131,SENSORS_W83627EHF_FAN2_ALARM = 132,SENSORS_W83627EHF_FAN3_ALARM = 133,SENSORS_W83627EHF_FAN4_ALARM = 134,SENSORS_W83627EHF_FAN5_ALARM = 135,SENSORS_W83627EHF_FAN1_MIN = 41,SENSORS_W83627EHF_FAN2_MIN = 42,SENSORS_W83627EHF_FAN3_MIN = 43,SENSORS_W83627EHF_FAN4_MIN = 44,SENSORS_W83627EHF_FAN5_MIN = 45,SENSORS_W83627EHF_FAN1_DIV = 51,SENSORS_W83627EHF_FAN2_DIV = 52,SENSORS_W83627EHF_FAN3_DIV = 53,SENSORS_W83627EHF_FAN4_DIV = 54,SENSORS_W83627EHF_FAN5_DIV = 55,SENSORS_W83627EHF_TEMP1 = 61,SENSORS_W83627EHF_TEMP2 = 62,SENSORS_W83627EHF_TEMP3 = 63,SENSORS_W83627EHF_TEMP1_ALARM = 161,SENSORS_W83627EHF_TEMP2_ALARM = 162,SENSORS_W83627EHF_TEMP3_ALARM = 163,SENSORS_W83627EHF_TEMP1_OVER = 71,SENSORS_W83627EHF_TEMP2_OVER = 72,SENSORS_W83627EHF_TEMP3_OVER = 73,SENSORS_W83627EHF_TEMP1_HYST = 81,SENSORS_W83627EHF_TEMP2_HYST = 82,SENSORS_W83627EHF_TEMP3_HYST = 83,SENSORS_ADM9240_IN0 = 1,SENSORS_ADM9240_IN1 = 2,SENSORS_ADM9240_IN2 = 3,SENSORS_ADM9240_IN3 = 4,SENSORS_ADM9240_IN4 = 5,SENSORS_ADM9240_IN5 = 6,SENSORS_ADM9240_IN0_MIN = 11,SENSORS_ADM9240_IN1_MIN = 12,SENSORS_ADM9240_IN2_MIN = 13,SENSORS_ADM9240_IN3_MIN = 14,SENSORS_ADM9240_IN4_MIN = 15,SENSORS_ADM9240_IN5_MIN = 16,SENSORS_ADM9240_IN0_MAX = 21,SENSORS_ADM9240_IN1_MAX = 22,SENSORS_ADM9240_IN2_MAX = 23,SENSORS_ADM9240_IN3_MAX = 24,SENSORS_ADM9240_IN4_MAX = 25,SENSORS_ADM9240_IN5_MAX = 26,SENSORS_ADM9240_FAN1 = 31,SENSORS_ADM9240_FAN2 = 32,SENSORS_ADM9240_FAN1_MIN = 41,SENSORS_ADM9240_FAN2_MIN = 42,SENSORS_ADM9240_TEMP = 51,SENSORS_ADM9240_TEMP_HYST = 52,SENSORS_ADM9240_TEMP_OVER = 53,SENSORS_ADM9240_VID = 61,SENSORS_ADM9240_FAN1_DIV = 71,SENSORS_ADM9240_FAN2_DIV = 72,SENSORS_ADM9240_ALARMS = 81,SENSORS_ADM9240_ANALOG_OUT = 82,SENSORS_SIS5595_IN0 = 1,SENSORS_SIS5595_IN1 = 2,SENSORS_SIS5595_IN2 = 3,SENSORS_SIS5595_IN3 = 4,SENSORS_SIS5595_IN4 = 5,SENSORS_SIS5595_IN0_MIN = 11,SENSORS_SIS5595_IN1_MIN = 12,SENSORS_SIS5595_IN2_MIN = 13,SENSORS_SIS5595_IN3_MIN = 14,SENSORS_SIS5595_IN4_MIN = 15,SENSORS_SIS5595_IN0_MAX = 21,SENSORS_SIS5595_IN1_MAX = 22,SENSORS_SIS5595_IN2_MAX = 23,SENSORS_SIS5595_IN3_MAX = 24,SENSORS_SIS5595_IN4_MAX = 25,SENSORS_SIS5595_FAN1 = 31,SENSORS_SIS5595_FAN2 = 32,SENSORS_SIS5595_FAN1_MIN = 41,SENSORS_SIS5595_FAN2_MIN = 42,SENSORS_SIS5595_TEMP = 51,SENSORS_SIS5595_TEMP_HYST = 52,SENSORS_SIS5595_TEMP_OVER = 53,SENSORS_SIS5595_FAN1_DIV = 71,SENSORS_SIS5595_FAN2_DIV = 72,SENSORS_SIS5595_ALARMS = 81,SENSORS_MAXI_CG_FAN1 = 1,SENSORS_MAXI_CG_FAN2 = 2,SENSORS_MAXI_CG_FAN3 = 3,SENSORS_MAXI_CG_FAN1_MIN = 11,SENSORS_MAXI_CG_FAN2_MIN = 12,SENSORS_MAXI_CG_FAN3_MIN = 13,SENSORS_MAXI_CG_FAN1_DIV = 14,SENSORS_MAXI_CG_FAN2_DIV = 15,SENSORS_MAXI_CG_FAN3_DIV = 16,SENSORS_MAXI_CG_TEMP1 = 21,SENSORS_MAXI_CG_TEMP2 = 22,SENSORS_MAXI_CG_TEMP3 = 23,SENSORS_MAXI_CG_TEMP4 = 24,SENSORS_MAXI_CG_TEMP5 = 25,SENSORS_MAXI_CG_TEMP1_MAX = 31,SENSORS_MAXI_CG_TEMP2_MAX = 32,SENSORS_MAXI_CG_TEMP3_MAX = 33,SENSORS_MAXI_CG_TEMP4_MAX = 34,SENSORS_MAXI_CG_TEMP5_MAX = 35,SENSORS_MAXI_CG_TEMP1_HYST = 41,SENSORS_MAXI_CG_TEMP2_HYST = 42,SENSORS_MAXI_CG_TEMP3_HYST = 43,SENSORS_MAXI_CG_TEMP4_HYST = 44,SENSORS_MAXI_CG_TEMP5_HYST = 45,SENSORS_MAXI_CG_PLL = 51,SENSORS_MAXI_CG_PLL_MIN = 52,SENSORS_MAXI_CG_PLL_MAX = 53,SENSORS_MAXI_CG_VID1 = 61,SENSORS_MAXI_CG_VID2 = 62,SENSORS_MAXI_CG_VID3 = 63,SENSORS_MAXI_CG_VID4 = 64,SENSORS_MAXI_CG_VID1_MIN = 71,SENSORS_MAXI_CG_VID2_MIN = 72,SENSORS_MAXI_CG_VID3_MIN = 73,SENSORS_MAXI_CG_VID4_MIN = 74,SENSORS_MAXI_CG_VID1_MAX = 81,SENSORS_MAXI_CG_VID2_MAX = 82,SENSORS_MAXI_CG_VID3_MAX = 83,SENSORS_MAXI_CG_VID4_MAX = 84,SENSORS_MAXI_CG_ALARMS = 91,SENSORS_MAXI_CO_FAN1 = 1,SENSORS_MAXI_CO_FAN2 = 2,SENSORS_MAXI_CO_FAN3 = 3,SENSORS_MAXI_CO_FAN1_MIN = 11,SENSORS_MAXI_CO_FAN2_MIN = 12,SENSORS_MAXI_CO_FAN3_MIN = 13,SENSORS_MAXI_CO_FAN1_DIV = 14,SENSORS_MAXI_CO_FAN2_DIV = 15,SENSORS_MAXI_CO_FAN3_DIV = 16,SENSORS_MAXI_CO_TEMP1 = 21,SENSORS_MAXI_CO_TEMP2 = 22,SENSORS_MAXI_CO_TEMP3 = 23,SENSORS_MAXI_CO_TEMP4 = 24,SENSORS_MAXI_CO_TEMP5 = 25,SENSORS_MAXI_CO_TEMP1_MAX = 31,SENSORS_MAXI_CO_TEMP2_MAX = 32,SENSORS_MAXI_CO_TEMP3_MAX = 33,SENSORS_MAXI_CO_TEMP4_MAX = 34,SENSORS_MAXI_CO_TEMP5_MAX = 35,SENSORS_MAXI_CO_TEMP1_HYST = 41,SENSORS_MAXI_CO_TEMP2_HYST = 42,SENSORS_MAXI_CO_TEMP3_HYST = 43,SENSORS_MAXI_CO_TEMP4_HYST = 44,SENSORS_MAXI_CO_TEMP5_HYST = 45,SENSORS_MAXI_CO_PLL = 51,SENSORS_MAXI_CO_PLL_MIN = 52,SENSORS_MAXI_CO_PLL_MAX = 53,SENSORS_MAXI_CO_VID1 = 61,SENSORS_MAXI_CO_VID2 = 62,SENSORS_MAXI_CO_VID3 = 63,SENSORS_MAXI_CO_VID4 = 64,SENSORS_MAXI_CO_VID1_MIN = 71,SENSORS_MAXI_CO_VID2_MIN = 72,SENSORS_MAXI_CO_VID3_MIN = 73,SENSORS_MAXI_CO_VID4_MIN = 74,SENSORS_MAXI_CO_VID1_MAX = 81,SENSORS_MAXI_CO_VID2_MAX = 82,SENSORS_MAXI_CO_VID3_MAX = 83,SENSORS_MAXI_CO_VID4_MAX = 84,SENSORS_MAXI_CO_ALARMS = 91,SENSORS_MAXI_AS_FAN1 = 1,SENSORS_MAXI_AS_FAN2 = 2,SENSORS_MAXI_AS_FAN3 = 3,SENSORS_MAXI_AS_FAN1_MIN = 11,SENSORS_MAXI_AS_FAN2_MIN = 12,SENSORS_MAXI_AS_FAN3_MIN = 13,SENSORS_MAXI_AS_FAN1_DIV = 14,SENSORS_MAXI_AS_FAN2_DIV = 15,SENSORS_MAXI_AS_FAN3_DIV = 16,SENSORS_MAXI_AS_TEMP1 = 21,SENSORS_MAXI_AS_TEMP2 = 22,SENSORS_MAXI_AS_TEMP3 = 23,SENSORS_MAXI_AS_TEMP4 = 24,SENSORS_MAXI_AS_TEMP5 = 25,SENSORS_MAXI_AS_TEMP1_MAX = 31,SENSORS_MAXI_AS_TEMP2_MAX = 32,SENSORS_MAXI_AS_TEMP3_MAX = 33,SENSORS_MAXI_AS_TEMP4_MAX = 34,SENSORS_MAXI_AS_TEMP5_MAX = 35,SENSORS_MAXI_AS_TEMP1_HYST = 41,SENSORS_MAXI_AS_TEMP2_HYST = 42,SENSORS_MAXI_AS_TEMP3_HYST = 43,SENSORS_MAXI_AS_TEMP4_HYST = 44,SENSORS_MAXI_AS_TEMP5_HYST = 45,SENSORS_MAXI_AS_PLL = 51,SENSORS_MAXI_AS_PLL_MIN = 52,SENSORS_MAXI_AS_PLL_MAX = 53,SENSORS_MAXI_AS_VID1 = 61,SENSORS_MAXI_AS_VID2 = 62,SENSORS_MAXI_AS_VID3 = 63,SENSORS_MAXI_AS_VID4 = 64,SENSORS_MAXI_AS_VID1_MIN = 71,SENSORS_MAXI_AS_VID2_MIN = 72,SENSORS_MAXI_AS_VID3_MIN = 73,SENSORS_MAXI_AS_VID4_MIN = 74,SENSORS_MAXI_AS_VID1_MAX = 81,SENSORS_MAXI_AS_VID2_MAX = 82,SENSORS_MAXI_AS_VID3_MAX = 83,SENSORS_MAXI_AS_VID4_MAX = 84,SENSORS_MAXI_AS_ALARMS = 91,SENSORS_THMC50_TEMP = 51,SENSORS_THMC50_TEMP_HYST = 52,SENSORS_THMC50_TEMP_OVER = 53,SENSORS_THMC50_REMOTE_TEMP = 54,SENSORS_THMC50_REMOTE_TEMP_HYST = 55,SENSORS_THMC50_REMOTE_TEMP_OVER = 56,SENSORS_THMC50_ANALOG_OUT = 71,SENSORS_THMC50_INTER = 81,SENSORS_THMC50_INTER_MASK = 82,SENSORS_THMC50_DIE_CODE = 90,SENSORS_ADM1025_IN0 = 1,SENSORS_ADM1025_IN1 = 2,SENSORS_ADM1025_IN2 = 3,SENSORS_ADM1025_IN3 = 4,SENSORS_ADM1025_IN4 = 5,SENSORS_ADM1025_IN5 = 6,SENSORS_ADM1025_IN0_MIN = 11,SENSORS_ADM1025_IN1_MIN = 12,SENSORS_ADM1025_IN2_MIN = 13,SENSORS_ADM1025_IN3_MIN = 14,SENSORS_ADM1025_IN4_MIN = 15,SENSORS_ADM1025_IN5_MIN = 16,SENSORS_ADM1025_IN0_MAX = 21,SENSORS_ADM1025_IN1_MAX = 22,SENSORS_ADM1025_IN2_MAX = 23,SENSORS_ADM1025_IN3_MAX = 24,SENSORS_ADM1025_IN4_MAX = 25,SENSORS_ADM1025_IN5_MAX = 26,SENSORS_ADM1025_TEMP1 = 51,SENSORS_ADM1025_TEMP1_LOW = 52,SENSORS_ADM1025_TEMP1_HIGH = 53,SENSORS_ADM1025_TEMP2 = 54,SENSORS_ADM1025_TEMP2_LOW = 55,SENSORS_ADM1025_TEMP2_HIGH = 56,SENSORS_ADM1025_VID = 61,SENSORS_ADM1025_VRM = 62,SENSORS_ADM1025_ALARMS = 81,SENSORS_ADM1026_AFC_DAC = 1,SENSORS_ADM1026_AFC_PWM = 2,SENSORS_ADM1026_ALARMS = 3,SENSORS_ADM1026_ALARM_MASK = 4,SENSORS_ADM1026_DAC = 5,SENSORS_ADM1026_GPIO = 6,SENSORS_ADM1026_GPIO_MASK = 7,SENSORS_ADM1026_PWM = 8,SENSORS_ADM1026_VID = 9,SENSORS_ADM1026_VRM = 10,SENSORS_ADM1026_FAN0 = 11,SENSORS_ADM1026_FAN0_DIV = 12,SENSORS_ADM1026_FAN0_MIN = 13,SENSORS_ADM1026_FAN1 = 14,SENSORS_ADM1026_FAN1_DIV = 15,SENSORS_ADM1026_FAN1_MIN = 16,SENSORS_ADM1026_FAN2 = 17,SENSORS_ADM1026_FAN2_DIV = 18,SENSORS_ADM1026_FAN2_MIN = 19,SENSORS_ADM1026_FAN3 = 20,SENSORS_ADM1026_FAN3_DIV = 21,SENSORS_ADM1026_FAN3_MIN = 22,SENSORS_ADM1026_FAN4 = 23,SENSORS_ADM1026_FAN4_DIV = 24,SENSORS_ADM1026_FAN4_MIN = 25,SENSORS_ADM1026_FAN5 = 26,SENSORS_ADM1026_FAN5_DIV = 27,SENSORS_ADM1026_FAN5_MIN = 28,SENSORS_ADM1026_FAN6 = 29,SENSORS_ADM1026_FAN6_DIV = 30,SENSORS_ADM1026_FAN6_MIN = 31,SENSORS_ADM1026_FAN7 = 32,SENSORS_ADM1026_FAN7_DIV = 33,SENSORS_ADM1026_FAN7_MIN = 34,SENSORS_ADM1026_IN0 = 35,SENSORS_ADM1026_IN0_MAX = 36,SENSORS_ADM1026_IN0_MIN = 37,SENSORS_ADM1026_IN1 = 38,SENSORS_ADM1026_IN1_MAX = 39,SENSORS_ADM1026_IN1_MIN = 40,SENSORS_ADM1026_IN2 = 41,SENSORS_ADM1026_IN2_MAX = 42,SENSORS_ADM1026_IN2_MIN = 43,SENSORS_ADM1026_IN3 = 44,SENSORS_ADM1026_IN3_MAX = 45,SENSORS_ADM1026_IN3_MIN = 46,SENSORS_ADM1026_IN4 = 47,SENSORS_ADM1026_IN4_MAX = 48,SENSORS_ADM1026_IN4_MIN = 49,SENSORS_ADM1026_IN5 = 50,SENSORS_ADM1026_IN5_MAX = 51,SENSORS_ADM1026_IN5_MIN = 52,SENSORS_ADM1026_IN6 = 53,SENSORS_ADM1026_IN6_MAX = 54,SENSORS_ADM1026_IN6_MIN = 55,SENSORS_ADM1026_IN7 = 56,SENSORS_ADM1026_IN7_MAX = 57,SENSORS_ADM1026_IN7_MIN = 58,SENSORS_ADM1026_IN8 = 59,SENSORS_ADM1026_IN8_MAX = 60,SENSORS_ADM1026_IN8_MIN = 61,SENSORS_ADM1026_IN9 = 62,SENSORS_ADM1026_IN9_MAX = 63,SENSORS_ADM1026_IN9_MIN = 64,SENSORS_ADM1026_IN10 = 65,SENSORS_ADM1026_IN10_MAX = 66,SENSORS_ADM1026_IN10_MIN = 67,SENSORS_ADM1026_IN11 = 68,SENSORS_ADM1026_IN11_MAX = 69,SENSORS_ADM1026_IN11_MIN = 70,SENSORS_ADM1026_IN12 = 71,SENSORS_ADM1026_IN12_MAX = 72,SENSORS_ADM1026_IN12_MIN = 73,SENSORS_ADM1026_IN13 = 74,SENSORS_ADM1026_IN13_MAX = 75,SENSORS_ADM1026_IN13_MIN = 76,SENSORS_ADM1026_IN14 = 77,SENSORS_ADM1026_IN14_MAX = 78,SENSORS_ADM1026_IN14_MIN = 79,SENSORS_ADM1026_IN15 = 80,SENSORS_ADM1026_IN15_MAX = 81,SENSORS_ADM1026_IN15_MIN = 82,SENSORS_ADM1026_IN16 = 83,SENSORS_ADM1026_IN16_MAX = 84,SENSORS_ADM1026_IN16_MIN = 85,SENSORS_ADM1026_TEMP1 = 86,SENSORS_ADM1026_TEMP1_MAX = 87,SENSORS_ADM1026_TEMP1_MIN = 88,SENSORS_ADM1026_TEMP1_OFFSET = 89,SENSORS_ADM1026_TEMP1_THERM = 90,SENSORS_ADM1026_TEMP1_TMIN = 91,SENSORS_ADM1026_TEMP2 = 92,SENSORS_ADM1026_TEMP2_MAX = 93,SENSORS_ADM1026_TEMP2_MIN = 94,SENSORS_ADM1026_TEMP2_OFFSET = 95,SENSORS_ADM1026_TEMP2_THERM = 96,SENSORS_ADM1026_TEMP2_TMIN = 97,SENSORS_ADM1026_TEMP3 = 98,SENSORS_ADM1026_TEMP3_MAX = 99,SENSORS_ADM1026_TEMP3_MIN = 100,SENSORS_ADM1026_TEMP3_OFFSET = 101,SENSORS_ADM1026_TEMP3_THERM = 102,SENSORS_ADM1026_TEMP3_TMIN = 103,SENSORS_VIA686A_IN0 = 1,SENSORS_VIA686A_IN1 = 2,SENSORS_VIA686A_IN2 = 3,SENSORS_VIA686A_IN3 = 4,SENSORS_VIA686A_IN4 = 5,SENSORS_VIA686A_IN0_MIN = 11,SENSORS_VIA686A_IN1_MIN = 12,SENSORS_VIA686A_IN2_MIN = 13,SENSORS_VIA686A_IN3_MIN = 14,SENSORS_VIA686A_IN4_MIN = 15,SENSORS_VIA686A_IN0_MAX = 21,SENSORS_VIA686A_IN1_MAX = 22,SENSORS_VIA686A_IN2_MAX = 23,SENSORS_VIA686A_IN3_MAX = 24,SENSORS_VIA686A_IN4_MAX = 25,SENSORS_VIA686A_FAN1 = 31,SENSORS_VIA686A_FAN2 = 32,SENSORS_VIA686A_FAN1_MIN = 41,SENSORS_VIA686A_FAN2_MIN = 42,SENSORS_VIA686A_TEMP = 51,SENSORS_VIA686A_TEMP_HYST = 52,SENSORS_VIA686A_TEMP_OVER = 53,SENSORS_VIA686A_TEMP2 = 54,SENSORS_VIA686A_TEMP2_HYST = 55,SENSORS_VIA686A_TEMP2_OVER = 56,SENSORS_VIA686A_TEMP3 = 57,SENSORS_VIA686A_TEMP3_HYST = 58,SENSORS_VIA686A_TEMP3_OVER = 59,SENSORS_VIA686A_FAN1_DIV = 71,SENSORS_VIA686A_FAN2_DIV = 72,SENSORS_VIA686A_ALARMS = 81,SENSORS_DDCMON_MAN_ID = 10,SENSORS_DDCMON_PROD_ID = 11,SENSORS_DDCMON_YEAR = 13,SENSORS_DDCMON_WEEK = 14,SENSORS_DDCMON_EDID_VER = 15,SENSORS_DDCMON_EDID_REV = 16,SENSORS_DDCMON_HORSIZE = 21,SENSORS_DDCMON_VERSIZE = 22,SENSORS_DDCMON_GAMMA = 23,SENSORS_DDCMON_DPMS = 24,SENSORS_DDCMON_HORSYNCMIN = 31,SENSORS_DDCMON_HORSYNCMAX = 32,SENSORS_DDCMON_VERSYNCMIN = 33,SENSORS_DDCMON_VERSYNCMAX = 34,SENSORS_DDCMON_MAXCLOCK = 35,SENSORS_DDCMON_SERIAL = 40,SENSORS_DDCMON_TIMINGS = 50,SENSORS_DDCMON_TIMING1_HOR = 51,SENSORS_DDCMON_TIMING1_VER = 52,SENSORS_DDCMON_TIMING1_REF = 53,SENSORS_DDCMON_TIMING2_HOR = 54,SENSORS_DDCMON_TIMING2_VER = 55,SENSORS_DDCMON_TIMING2_REF = 56,SENSORS_DDCMON_TIMING3_HOR = 57,SENSORS_DDCMON_TIMING3_VER = 58,SENSORS_DDCMON_TIMING3_REF = 59,SENSORS_DDCMON_TIMING4_HOR = 60,SENSORS_DDCMON_TIMING4_VER = 61,SENSORS_DDCMON_TIMING4_REF = 62,SENSORS_DDCMON_TIMING5_HOR = 63,SENSORS_DDCMON_TIMING5_VER = 64,SENSORS_DDCMON_TIMING5_REF = 65,SENSORS_DDCMON_TIMING6_HOR = 66,SENSORS_DDCMON_TIMING6_VER = 67,SENSORS_DDCMON_TIMING6_REF = 68,SENSORS_DDCMON_TIMING7_HOR = 69,SENSORS_DDCMON_TIMING7_VER = 70,SENSORS_DDCMON_TIMING7_REF = 71,SENSORS_DDCMON_TIMING8_HOR = 72,SENSORS_DDCMON_TIMING8_VER = 73,SENSORS_DDCMON_TIMING8_REF = 74,SENSORS_EEPROM_TYPE = 10,SENSORS_EEPROM_ROWADDR = 12,SENSORS_EEPROM_COLADDR = 13,SENSORS_EEPROM_NUMROWS = 14,SENSORS_EEPROM_BANKS = 15,SENSORS_EEPROM_VAIO_NAME = 128,SENSORS_EEPROM_VAIO_SERIAL = 160,SENSORS_EEPROM_EDID_HEADER = 32,SENSORS_EEPROM_SHUTTLE = 40,SENSORS_LM87_IN0 = 1,SENSORS_LM87_IN1 = 2,SENSORS_LM87_IN2 = 3,SENSORS_LM87_IN3 = 4,SENSORS_LM87_IN4 = 5,SENSORS_LM87_IN5 = 6,SENSORS_LM87_AIN1 = 7,SENSORS_LM87_AIN2 = 8,SENSORS_LM87_IN0_MIN = 11,SENSORS_LM87_IN1_MIN = 12,SENSORS_LM87_IN2_MIN = 13,SENSORS_LM87_IN3_MIN = 14,SENSORS_LM87_IN4_MIN = 15,SENSORS_LM87_IN5_MIN = 16,SENSORS_LM87_AIN1_MIN = 17,SENSORS_LM87_AIN2_MIN = 18,SENSORS_LM87_IN0_MAX = 21,SENSORS_LM87_IN1_MAX = 22,SENSORS_LM87_IN2_MAX = 23,SENSORS_LM87_IN3_MAX = 24,SENSORS_LM87_IN4_MAX = 25,SENSORS_LM87_IN5_MAX = 26,SENSORS_LM87_AIN1_MAX = 27,SENSORS_LM87_AIN2_MAX = 28,SENSORS_LM87_FAN1 = 31,SENSORS_LM87_FAN2 = 32,SENSORS_LM87_FAN1_MIN = 41,SENSORS_LM87_FAN2_MIN = 42,SENSORS_LM87_TEMP1 = 51,SENSORS_LM87_TEMP2 = 52,SENSORS_LM87_TEMP3 = 53,SENSORS_LM87_TEMP1_HYST = 54,SENSORS_LM87_TEMP1_OVER = 55,SENSORS_LM87_TEMP2_HYST = 56,SENSORS_LM87_TEMP2_OVER = 57,SENSORS_LM87_TEMP3_HYST = 58,SENSORS_LM87_TEMP3_OVER = 59,SENSORS_LM87_VID = 61,SENSORS_LM87_VRM = 62,SENSORS_LM87_FAN1_DIV = 71,SENSORS_LM87_FAN2_DIV = 72,SENSORS_LM87_ALARMS = 81,SENSORS_LM87_ANALOG_OUT = 82,SENSORS_MTP008_IN0 = 1,SENSORS_MTP008_IN1 = 2,SENSORS_MTP008_IN2 = 3,SENSORS_MTP008_IN3 = 4,SENSORS_MTP008_IN4 = 5,SENSORS_MTP008_IN5 = 6,SENSORS_MTP008_IN6 = 7,SENSORS_MTP008_IN0_MIN = 11,SENSORS_MTP008_IN1_MIN = 12,SENSORS_MTP008_IN2_MIN = 13,SENSORS_MTP008_IN3_MIN = 14,SENSORS_MTP008_IN4_MIN = 15,SENSORS_MTP008_IN5_MIN = 16,SENSORS_MTP008_IN6_MIN = 17,SENSORS_MTP008_IN0_MAX = 21,SENSORS_MTP008_IN1_MAX = 22,SENSORS_MTP008_IN2_MAX = 23,SENSORS_MTP008_IN3_MAX = 24,SENSORS_MTP008_IN4_MAX = 25,SENSORS_MTP008_IN5_MAX = 26,SENSORS_MTP008_IN6_MAX = 27,SENSORS_MTP008_FAN1 = 31,SENSORS_MTP008_FAN2 = 32,SENSORS_MTP008_FAN3 = 33,SENSORS_MTP008_FAN1_MIN = 41,SENSORS_MTP008_FAN2_MIN = 42,SENSORS_MTP008_FAN3_MIN = 43,SENSORS_MTP008_TEMP1 = 51,SENSORS_MTP008_TEMP2 = 52,SENSORS_MTP008_TEMP3 = 53,SENSORS_MTP008_TEMP1_OVER = 54,SENSORS_MTP008_TEMP1_HYST = 55,SENSORS_MTP008_TEMP2_OVER = 56,SENSORS_MTP008_TEMP2_HYST = 57,SENSORS_MTP008_TEMP3_OVER = 58,SENSORS_MTP008_TEMP3_HYST = 59,SENSORS_MTP008_VID = 61,SENSORS_MTP008_FAN1_DIV = 71,SENSORS_MTP008_FAN2_DIV = 72,SENSORS_MTP008_FAN3_DIV = 73,SENSORS_MTP008_ALARMS = 81,SENSORS_MTP008_BEEP = 82,SENSORS_DS1621_TEMP = 51,SENSORS_DS1621_TEMP_HYST = 52,SENSORS_DS1621_TEMP_OVER = 53,SENSORS_DS1621_ALARMS = 81,SENSORS_DS1621_ENABLE = 82,SENSORS_DS1621_CONTINUOUS = 83,SENSORS_DS1621_POLARITY = 84,SENSORS_ADM1024_IN0 = 1,SENSORS_ADM1024_IN1 = 2,SENSORS_ADM1024_IN2 = 3,SENSORS_ADM1024_IN3 = 4,SENSORS_ADM1024_IN4 = 5,SENSORS_ADM1024_IN5 = 6,SENSORS_ADM1024_IN0_MIN = 11,SENSORS_ADM1024_IN1_MIN = 12,SENSORS_ADM1024_IN2_MIN = 13,SENSORS_ADM1024_IN3_MIN = 14,SENSORS_ADM1024_IN4_MIN = 15,SENSORS_ADM1024_IN5_MIN = 16,SENSORS_ADM1024_IN0_MAX = 21,SENSORS_ADM1024_IN1_MAX = 22,SENSORS_ADM1024_IN2_MAX = 23,SENSORS_ADM1024_IN3_MAX = 24,SENSORS_ADM1024_IN4_MAX = 25,SENSORS_ADM1024_IN5_MAX = 26,SENSORS_ADM1024_FAN1 = 31,SENSORS_ADM1024_FAN2 = 32,SENSORS_ADM1024_FAN1_MIN = 41,SENSORS_ADM1024_FAN2_MIN = 42,SENSORS_ADM1024_TEMP = 51,SENSORS_ADM1024_TEMP1 = 52,SENSORS_ADM1024_TEMP2 = 53,SENSORS_ADM1024_TEMP_HYST = 61,SENSORS_ADM1024_TEMP_OVER = 62,SENSORS_ADM1024_TEMP1_HYST = 63,SENSORS_ADM1024_TEMP1_OVER = 64,SENSORS_ADM1024_TEMP2_HYST = 65,SENSORS_ADM1024_TEMP2_OVER = 66,SENSORS_ADM1024_VID = 71,SENSORS_ADM1024_FAN1_DIV = 81,SENSORS_ADM1024_FAN2_DIV = 82,SENSORS_ADM1024_ALARMS = 91,SENSORS_ADM1024_ANALOG_OUT = 92,SENSORS_IT87_IN0 = 1,SENSORS_IT87_IN1 = 2,SENSORS_IT87_IN2 = 3,SENSORS_IT87_IN3 = 4,SENSORS_IT87_IN4 = 5,SENSORS_IT87_IN5 = 6,SENSORS_IT87_IN6 = 7,SENSORS_IT87_IN7 = 8,SENSORS_IT87_IN8 = 9,SENSORS_IT87_IN0_MIN = 11,SENSORS_IT87_IN1_MIN = 12,SENSORS_IT87_IN2_MIN = 13,SENSORS_IT87_IN3_MIN = 14,SENSORS_IT87_IN4_MIN = 15,SENSORS_IT87_IN5_MIN = 16,SENSORS_IT87_IN6_MIN = 17,SENSORS_IT87_IN7_MIN = 18,SENSORS_IT87_IN0_MAX = 21,SENSORS_IT87_IN1_MAX = 22,SENSORS_IT87_IN2_MAX = 23,SENSORS_IT87_IN3_MAX = 24,SENSORS_IT87_IN4_MAX = 25,SENSORS_IT87_IN5_MAX = 26,SENSORS_IT87_IN6_MAX = 27,SENSORS_IT87_IN7_MAX = 28,SENSORS_IT87_FAN1 = 31,SENSORS_IT87_FAN2 = 32,SENSORS_IT87_FAN3 = 33,SENSORS_IT87_FAN1_MIN = 41,SENSORS_IT87_FAN2_MIN = 42,SENSORS_IT87_FAN3_MIN = 43,SENSORS_IT87_TEMP1 = 51,SENSORS_IT87_TEMP2 = 52,SENSORS_IT87_TEMP3 = 53,SENSORS_IT87_TEMP1_LOW = 54,SENSORS_IT87_TEMP2_LOW = 55,SENSORS_IT87_TEMP3_LOW = 56,SENSORS_IT87_TEMP1_HIGH = 57,SENSORS_IT87_TEMP2_HIGH = 58,SENSORS_IT87_TEMP3_HIGH = 59,SENSORS_IT87_VID = 61,SENSORS_IT87_FAN1_DIV = 71,SENSORS_IT87_FAN2_DIV = 72,SENSORS_IT87_FAN3_DIV = 73,SENSORS_IT87_ALARMS_FAN = 81,SENSORS_IT87_ALARMS_VIN = 82,SENSORS_IT87_ALARMS_TEMP = 83,SENSORS_IT87_ALARMS = 84,SENSORS_IT87_SENS1 = 91,SENSORS_IT87_SENS2 = 92,SENSORS_IT87_SENS3 = 93,SENSORS_FSCPOS_REV = 1,SENSORS_FSCPOS_EVENT = 2,SENSORS_FSCPOS_CONTROL = 3,SENSORS_FSCPOS_FAN1 = 4,SENSORS_FSCPOS_FAN2 = 5,SENSORS_FSCPOS_FAN3 = 6,SENSORS_FSCPOS_FAN1_MIN = 7,SENSORS_FSCPOS_FAN2_MIN = 8,SENSORS_FSCPOS_FAN3_MIN = 9,SENSORS_FSCPOS_FAN1_STATE = 10,SENSORS_FSCPOS_FAN2_STATE = 11,SENSORS_FSCPOS_FAN3_STATE = 12,SENSORS_FSCPOS_FAN1_RIPPLE = 13,SENSORS_FSCPOS_FAN2_RIPPLE = 14,SENSORS_FSCPOS_FAN3_RIPPLE = 15,SENSORS_FSCPOS_TEMP1 = 16,SENSORS_FSCPOS_TEMP2 = 17,SENSORS_FSCPOS_TEMP3 = 18,SENSORS_FSCPOS_TEMP1_STATE = 19,SENSORS_FSCPOS_TEMP2_STATE = 20,SENSORS_FSCPOS_TEMP3_STATE = 21,SENSORS_FSCPOS_VOLTAGE1 = 22,SENSORS_FSCPOS_VOLTAGE2 = 23,SENSORS_FSCPOS_VOLTAGE3 = 24,SENSORS_FSCPOS_WDOG_PRESET = 25,SENSORS_FSCPOS_WDOG_STATE = 26,SENSORS_FSCPOS_WDOG_CONTROL = 27,SENSORS_FSCSCY_REV = 1,SENSORS_FSCSCY_EVENT = 2,SENSORS_FSCSCY_CONTROL = 3,SENSORS_FSCSCY_FAN1 = 4,SENSORS_FSCSCY_FAN2 = 5,SENSORS_FSCSCY_FAN3 = 6,SENSORS_FSCSCY_FAN4 = 7,SENSORS_FSCSCY_FAN5 = 8,SENSORS_FSCSCY_FAN6 = 9,SENSORS_FSCSCY_FAN1_MIN = 10,SENSORS_FSCSCY_FAN2_MIN = 11,SENSORS_FSCSCY_FAN3_MIN = 12,SENSORS_FSCSCY_FAN4_MIN = 13,SENSORS_FSCSCY_FAN5_MIN = 14,SENSORS_FSCSCY_FAN6_MIN = 15,SENSORS_FSCSCY_FAN1_STATE = 16,SENSORS_FSCSCY_FAN2_STATE = 17,SENSORS_FSCSCY_FAN3_STATE = 18,SENSORS_FSCSCY_FAN4_STATE = 19,SENSORS_FSCSCY_FAN5_STATE = 20,SENSORS_FSCSCY_FAN6_STATE = 21,SENSORS_FSCSCY_FAN1_RIPPLE = 22,SENSORS_FSCSCY_FAN2_RIPPLE = 23,SENSORS_FSCSCY_FAN3_RIPPLE = 24,SENSORS_FSCSCY_FAN4_RIPPLE = 25,SENSORS_FSCSCY_FAN5_RIPPLE = 26,SENSORS_FSCSCY_FAN6_RIPPLE = 27,SENSORS_FSCSCY_TEMP1 = 28,SENSORS_FSCSCY_TEMP2 = 29,SENSORS_FSCSCY_TEMP3 = 30,SENSORS_FSCSCY_TEMP4 = 31,SENSORS_FSCSCY_TEMP1_STATE = 32,SENSORS_FSCSCY_TEMP2_STATE = 33,SENSORS_FSCSCY_TEMP3_STATE = 34,SENSORS_FSCSCY_TEMP4_STATE = 35,SENSORS_FSCSCY_TEMP1_LIM = 36,SENSORS_FSCSCY_TEMP2_LIM = 37,SENSORS_FSCSCY_TEMP3_LIM = 38,SENSORS_FSCSCY_TEMP4_LIM = 39,SENSORS_FSCSCY_TEMP1_MIN = 40,SENSORS_FSCSCY_TEMP2_MIN = 41,SENSORS_FSCSCY_TEMP3_MIN = 42,SENSORS_FSCSCY_TEMP4_MIN = 43,SENSORS_FSCSCY_TEMP1_MAX = 44,SENSORS_FSCSCY_TEMP2_MAX = 45,SENSORS_FSCSCY_TEMP3_MAX = 46,SENSORS_FSCSCY_TEMP4_MAX = 47,SENSORS_FSCSCY_VOLTAGE1 = 48,SENSORS_FSCSCY_VOLTAGE2 = 49,SENSORS_FSCSCY_VOLTAGE3 = 50,SENSORS_FSCSCY_WDOG_PRESET = 51,SENSORS_FSCSCY_WDOG_STATE = 52,SENSORS_FSCSCY_WDOG_CONTROL = 52,SENSORS_FSCHER_REV = 1,SENSORS_FSCHER_EVENT = 2,SENSORS_FSCHER_CONTROL = 3,SENSORS_FSCHER_FAN1 = 4,SENSORS_FSCHER_FAN2 = 5,SENSORS_FSCHER_FAN3 = 6,SENSORS_FSCHER_PWM1 = 7,SENSORS_FSCHER_PWM2 = 8,SENSORS_FSCHER_PWM3 = 9,SENSORS_FSCHER_FAN1_STATE = 10,SENSORS_FSCHER_FAN2_STATE = 11,SENSORS_FSCHER_FAN3_STATE = 12,SENSORS_FSCHER_FAN1_RIPPLE = 13,SENSORS_FSCHER_FAN2_RIPPLE = 14,SENSORS_FSCHER_FAN3_RIPPLE = 15,SENSORS_FSCHER_TEMP1 = 16,SENSORS_FSCHER_TEMP2 = 17,SENSORS_FSCHER_TEMP3 = 18,SENSORS_FSCHER_TEMP1_STATE = 19,SENSORS_FSCHER_TEMP2_STATE = 20,SENSORS_FSCHER_TEMP3_STATE = 21,SENSORS_FSCHER_VOLTAGE1 = 22,SENSORS_FSCHER_VOLTAGE2 = 23,SENSORS_FSCHER_VOLTAGE3 = 24,SENSORS_FSCHER_WDOG_PRESET = 25,SENSORS_FSCHER_WDOG_STATE = 26,SENSORS_FSCHER_WDOG_CONTROL = 27,SENSORS_PCF8591_AIN_CONF = 1,SENSORS_PCF8591_CH0 = 2,SENSORS_PCF8591_CH1 = 3,SENSORS_PCF8591_CH2 = 4,SENSORS_PCF8591_CH3 = 5,SENSORS_PCF8591_AOUT_ENABLE = 6,SENSORS_PCF8591_AOUT = 7,SENSORS_VT1211_IN0 = 1,SENSORS_VT1211_IN1 = 2,SENSORS_VT1211_IN2 = 3,SENSORS_VT1211_IN3 = 4,SENSORS_VT1211_IN4 = 5,SENSORS_VT1211_IN5 = 6,SENSORS_VT1211_IN0_MIN = 11,SENSORS_VT1211_IN1_MIN = 12,SENSORS_VT1211_IN2_MIN = 13,SENSORS_VT1211_IN3_MIN = 14,SENSORS_VT1211_IN4_MIN = 15,SENSORS_VT1211_IN5_MIN = 16,SENSORS_VT1211_IN0_MAX = 21,SENSORS_VT1211_IN1_MAX = 22,SENSORS_VT1211_IN2_MAX = 23,SENSORS_VT1211_IN3_MAX = 24,SENSORS_VT1211_IN4_MAX = 25,SENSORS_VT1211_IN5_MAX = 26,SENSORS_VT1211_FAN1 = 31,SENSORS_VT1211_FAN2 = 32,SENSORS_VT1211_FAN1_MIN = 41,SENSORS_VT1211_FAN2_MIN = 42,SENSORS_VT1211_TEMP1 = 51,SENSORS_VT1211_TEMP1_HYST = 52,SENSORS_VT1211_TEMP1_OVER = 53,SENSORS_VT1211_TEMP2 = 54,SENSORS_VT1211_TEMP2_HYST = 55,SENSORS_VT1211_TEMP2_OVER = 56,SENSORS_VT1211_TEMP3 = 57,SENSORS_VT1211_TEMP3_HYST = 58,SENSORS_VT1211_TEMP3_OVER = 59,SENSORS_VT1211_TEMP4 = 60,SENSORS_VT1211_TEMP4_HYST = 61,SENSORS_VT1211_TEMP4_OVER = 62,SENSORS_VT1211_TEMP5 = 63,SENSORS_VT1211_TEMP5_HYST = 64,SENSORS_VT1211_TEMP5_OVER = 65,SENSORS_VT1211_TEMP6 = 66,SENSORS_VT1211_TEMP6_HYST = 67,SENSORS_VT1211_TEMP6_OVER = 68,SENSORS_VT1211_TEMP7 = 69,SENSORS_VT1211_TEMP7_HYST = 70,SENSORS_VT1211_TEMP7_OVER = 71,SENSORS_VT1211_FAN1_DIV = 75,SENSORS_VT1211_FAN2_DIV = 76,SENSORS_VT1211_ALARMS = 81,SENSORS_VT1211_VID = 82,SENSORS_VT1211_VRM = 83,SENSORS_VT1211_UCH = 84,SENSORS_SMSC47M1_FAN1 = 31,SENSORS_SMSC47M1_FAN2 = 32,SENSORS_SMSC47M1_FAN1_MIN = 41,SENSORS_SMSC47M1_FAN2_MIN = 42,SENSORS_SMSC47M1_FAN1_DIV = 75,SENSORS_SMSC47M1_FAN2_DIV = 76,SENSORS_SMSC47M1_ALARMS = 81,SENSORS_SMSC47M192_VID = 301,SENSORS_SMSC47M192_VRM = 302,SENSORS_PC87360_ALARMS_IN = 10,SENSORS_PC87360_ALARMS_TEMP = 11,SENSORS_PC87360_FAN1 = 31,SENSORS_PC87360_FAN2 = 32,SENSORS_PC87360_FAN3 = 33,SENSORS_PC87360_FAN1_MIN = 41,SENSORS_PC87360_FAN2_MIN = 42,SENSORS_PC87360_FAN3_MIN = 43,SENSORS_PC87360_FAN1_DIV = 71,SENSORS_PC87360_FAN2_DIV = 72,SENSORS_PC87360_FAN3_DIV = 73,SENSORS_PC87360_FAN1_STATUS = 81,SENSORS_PC87360_FAN2_STATUS = 82,SENSORS_PC87360_FAN3_STATUS = 83,SENSORS_PC87360_IN0 = 90,SENSORS_PC87360_IN1 = 91,SENSORS_PC87360_IN2 = 92,SENSORS_PC87360_IN3 = 93,SENSORS_PC87360_IN4 = 94,SENSORS_PC87360_IN5 = 95,SENSORS_PC87360_IN6 = 96,SENSORS_PC87360_IN7 = 97,SENSORS_PC87360_IN8 = 98,SENSORS_PC87360_IN9 = 99,SENSORS_PC87360_IN10 = 100,SENSORS_PC87360_IN0_MIN = 110,SENSORS_PC87360_IN1_MIN = 111,SENSORS_PC87360_IN2_MIN = 112,SENSORS_PC87360_IN3_MIN = 113,SENSORS_PC87360_IN4_MIN = 114,SENSORS_PC87360_IN5_MIN = 115,SENSORS_PC87360_IN6_MIN = 116,SENSORS_PC87360_IN7_MIN = 117,SENSORS_PC87360_IN8_MIN = 118,SENSORS_PC87360_IN9_MIN = 119,SENSORS_PC87360_IN10_MIN = 120,SENSORS_PC87360_IN0_MAX = 130,SENSORS_PC87360_IN1_MAX = 131,SENSORS_PC87360_IN2_MAX = 132,SENSORS_PC87360_IN3_MAX = 133,SENSORS_PC87360_IN4_MAX = 134,SENSORS_PC87360_IN5_MAX = 135,SENSORS_PC87360_IN6_MAX = 136,SENSORS_PC87360_IN7_MAX = 137,SENSORS_PC87360_IN8_MAX = 138,SENSORS_PC87360_IN9_MAX = 139,SENSORS_PC87360_IN10_MAX = 140,SENSORS_PC87360_IN0_STATUS = 150,SENSORS_PC87360_IN1_STATUS = 151,SENSORS_PC87360_IN2_STATUS = 152,SENSORS_PC87360_IN3_STATUS = 153,SENSORS_PC87360_IN4_STATUS = 154,SENSORS_PC87360_IN5_STATUS = 155,SENSORS_PC87360_IN6_STATUS = 156,SENSORS_PC87360_IN7_STATUS = 157,SENSORS_PC87360_IN8_STATUS = 158,SENSORS_PC87360_IN9_STATUS = 159,SENSORS_PC87360_IN10_STATUS = 160,SENSORS_PC87360_TEMP1 = 171,SENSORS_PC87360_TEMP2 = 172,SENSORS_PC87360_TEMP3 = 173,SENSORS_PC87360_TEMP4 = 174,SENSORS_PC87360_TEMP5 = 175,SENSORS_PC87360_TEMP6 = 176,SENSORS_PC87360_TEMP1_MIN = 181,SENSORS_PC87360_TEMP2_MIN = 182,SENSORS_PC87360_TEMP3_MIN = 183,SENSORS_PC87360_TEMP4_MIN = 184,SENSORS_PC87360_TEMP5_MIN = 185,SENSORS_PC87360_TEMP6_MIN = 186,SENSORS_PC87360_TEMP1_MAX = 191,SENSORS_PC87360_TEMP2_MAX = 192,SENSORS_PC87360_TEMP3_MAX = 193,SENSORS_PC87360_TEMP4_MAX = 194,SENSORS_PC87360_TEMP5_MAX = 195,SENSORS_PC87360_TEMP6_MAX = 196,SENSORS_PC87360_TEMP1_CRIT = 201,SENSORS_PC87360_TEMP2_CRIT = 202,SENSORS_PC87360_TEMP3_CRIT = 203,SENSORS_PC87360_TEMP4_CRIT = 204,SENSORS_PC87360_TEMP5_CRIT = 205,SENSORS_PC87360_TEMP6_CRIT = 206,SENSORS_PC87360_TEMP1_STATUS = 211,SENSORS_PC87360_TEMP2_STATUS = 212,SENSORS_PC87360_TEMP3_STATUS = 213,SENSORS_PC87360_TEMP4_STATUS = 214,SENSORS_PC87360_TEMP5_STATUS = 215,SENSORS_PC87360_TEMP6_STATUS = 216,SENSORS_PC87360_VID = 240,SENSORS_PC87360_VRM = 241,SENSORS_LM92_TEMP_HIGH = 1,SENSORS_LM92_TEMP_LOW = 2,SENSORS_LM92_TEMP_CRIT = 3,SENSORS_LM92_TEMP_HYST = 4,SENSORS_LM92_TEMP = 5,SENSORS_LM92_ALARMS = 6,SENSORS_VT8231_IN0 = 1,SENSORS_VT8231_IN1 = 2,SENSORS_VT8231_IN2 = 3,SENSORS_VT8231_IN3 = 4,SENSORS_VT8231_IN4 = 5,SENSORS_VT8231_IN5 = 6,SENSORS_VT8231_IN0_MIN = 11,SENSORS_VT8231_IN1_MIN = 12,SENSORS_VT8231_IN2_MIN = 13,SENSORS_VT8231_IN3_MIN = 14,SENSORS_VT8231_IN4_MIN = 15,SENSORS_VT8231_IN5_MIN = 16,SENSORS_VT8231_IN0_MAX = 21,SENSORS_VT8231_IN1_MAX = 22,SENSORS_VT8231_IN2_MAX = 23,SENSORS_VT8231_IN3_MAX = 24,SENSORS_VT8231_IN4_MAX = 25,SENSORS_VT8231_IN5_MAX = 26,SENSORS_VT8231_FAN1 = 31,SENSORS_VT8231_FAN2 = 32,SENSORS_VT8231_FAN1_MIN = 41,SENSORS_VT8231_FAN2_MIN = 42,SENSORS_VT8231_TEMP = 51,SENSORS_VT8231_TEMP_HYST = 52,SENSORS_VT8231_TEMP_OVER = 53,SENSORS_VT8231_TEMP2 = 54,SENSORS_VT8231_TEMP2_HYST = 55,SENSORS_VT8231_TEMP2_OVER = 56,SENSORS_VT8231_TEMP3 = 57,SENSORS_VT8231_TEMP3_HYST = 58,SENSORS_VT8231_TEMP3_OVER = 59,SENSORS_VT8231_TEMP4 = 60,SENSORS_VT8231_TEMP4_HYST = 61,SENSORS_VT8231_TEMP4_OVER = 62,SENSORS_VT8231_TEMP5 = 63,SENSORS_VT8231_TEMP5_HYST = 64,SENSORS_VT8231_TEMP5_OVER = 65,SENSORS_VT8231_TEMP6 = 66,SENSORS_VT8231_TEMP6_HYST = 67,SENSORS_VT8231_TEMP6_OVER = 68,SENSORS_VT8231_FAN1_DIV = 75,SENSORS_VT8231_FAN2_DIV = 76,SENSORS_VT8231_ALARMS = 81,SENSORS_VT8231_VID = 82,SENSORS_VT8231_VRM = 83,SENSORS_VT8231_UCH = 84,SENSORS_BMC_ALARMS = 1,SENSORS_BMC_IN1 = 101,SENSORS_BMC_IN1_MIN = 201,SENSORS_BMC_IN1_MAX = 301,SENSORS_BMC_FAN1 = 1001,SENSORS_BMC_FAN1_MIN = 1101,SENSORS_BMC_TEMP1 = 2001,SENSORS_BMC_TEMP1_MIN = 2101,SENSORS_BMC_TEMP1_MAX = 2201,SENSORS_BMC_CURR1 = 3001,SENSORS_BMC_CURR1_MIN = 3101,SENSORS_BMC_CURR1_MAX = 3201,SENSORS_LM93_IN1 = 1011,SENSORS_LM93_IN1_MIN = 1012,SENSORS_LM93_IN1_MAX = 1013,SENSORS_LM93_IN2 = 1021,SENSORS_LM93_IN2_MIN = 1022,SENSORS_LM93_IN2_MAX = 1023,SENSORS_LM93_IN3 = 1031,SENSORS_LM93_IN3_MIN = 1032,SENSORS_LM93_IN3_MAX = 1033,SENSORS_LM93_IN4 = 1041,SENSORS_LM93_IN4_MIN = 1042,SENSORS_LM93_IN4_MAX = 1043,SENSORS_LM93_IN5 = 1051,SENSORS_LM93_IN5_MIN = 1052,SENSORS_LM93_IN5_MAX = 1053,SENSORS_LM93_IN6 = 1061,SENSORS_LM93_IN6_MIN = 1062,SENSORS_LM93_IN6_MAX = 1063,SENSORS_LM93_IN7 = 1071,SENSORS_LM93_IN7_MIN = 1072,SENSORS_LM93_IN7_MAX = 1073,SENSORS_LM93_IN8 = 1081,SENSORS_LM93_IN8_MIN = 1082,SENSORS_LM93_IN8_MAX = 1083,SENSORS_LM93_IN9 = 1091,SENSORS_LM93_IN9_MIN = 1092,SENSORS_LM93_IN9_MAX = 1093,SENSORS_LM93_IN10 = 1101,SENSORS_LM93_IN10_MIN = 1102,SENSORS_LM93_IN10_MAX = 1103,SENSORS_LM93_IN11 = 1111,SENSORS_LM93_IN11_MIN = 1112,SENSORS_LM93_IN11_MAX = 1113,SENSORS_LM93_IN12 = 1121,SENSORS_LM93_IN12_MIN = 1122,SENSORS_LM93_IN12_MAX = 1123,SENSORS_LM93_IN13 = 1131,SENSORS_LM93_IN13_MIN = 1132,SENSORS_LM93_IN13_MAX = 1133,SENSORS_LM93_IN14 = 1141,SENSORS_LM93_IN14_MIN = 1142,SENSORS_LM93_IN14_MAX = 1143,SENSORS_LM93_IN15 = 1151,SENSORS_LM93_IN15_MIN = 1152,SENSORS_LM93_IN15_MAX = 1153,SENSORS_LM93_IN16 = 1161,SENSORS_LM93_IN16_MIN = 1162,SENSORS_LM93_IN16_MAX = 1163,SENSORS_LM93_TEMP1 = 2011,SENSORS_LM93_TEMP1_MIN = 2012,SENSORS_LM93_TEMP1_MAX = 2013,SENSORS_LM93_TEMP2 = 2021,SENSORS_LM93_TEMP2_MIN = 2022,SENSORS_LM93_TEMP2_MAX = 2023,SENSORS_LM93_TEMP3 = 2031,SENSORS_LM93_TEMP3_MIN = 2032,SENSORS_LM93_TEMP3_MAX = 2033,SENSORS_LM93_FAN1 = 3011,SENSORS_LM93_FAN1_MIN = 3012,SENSORS_LM93_FAN2 = 3021,SENSORS_LM93_FAN2_MIN = 3022,SENSORS_LM93_FAN3 = 3031,SENSORS_LM93_FAN3_MIN = 3032,SENSORS_LM93_FAN4 = 3041,SENSORS_LM93_FAN4_MIN = 3042,SENSORS_LM93_VID1 = 4001,SENSORS_LM93_VID2 = 4002,SENSORS_LM93_ALARMS = 5001,SENSORS_ASB100_IN0 = 1,SENSORS_ASB100_IN1 = 2,SENSORS_ASB100_IN2 = 3,SENSORS_ASB100_IN3 = 4,SENSORS_ASB100_IN4 = 5,SENSORS_ASB100_IN5 = 6,SENSORS_ASB100_IN6 = 7,SENSORS_ASB100_IN0_MIN = 17,SENSORS_ASB100_IN1_MIN = 18,SENSORS_ASB100_IN2_MIN = 19,SENSORS_ASB100_IN3_MIN = 20,SENSORS_ASB100_IN4_MIN = 21,SENSORS_ASB100_IN5_MIN = 22,SENSORS_ASB100_IN6_MIN = 23,SENSORS_ASB100_IN0_MAX = 33,SENSORS_ASB100_IN1_MAX = 34,SENSORS_ASB100_IN2_MAX = 35,SENSORS_ASB100_IN3_MAX = 36,SENSORS_ASB100_IN4_MAX = 37,SENSORS_ASB100_IN5_MAX = 38,SENSORS_ASB100_IN6_MAX = 39,SENSORS_ASB100_FAN1 = 49,SENSORS_ASB100_FAN2 = 50,SENSORS_ASB100_FAN3 = 51,SENSORS_ASB100_FAN1_MIN = 65,SENSORS_ASB100_FAN2_MIN = 66,SENSORS_ASB100_FAN3_MIN = 67,SENSORS_ASB100_TEMP1 = 81,SENSORS_ASB100_TEMP1_HYST = 82,SENSORS_ASB100_TEMP1_OVER = 83,SENSORS_ASB100_TEMP2 = 84,SENSORS_ASB100_TEMP2_HYST = 85,SENSORS_ASB100_TEMP2_OVER = 86,SENSORS_ASB100_TEMP3 = 87,SENSORS_ASB100_TEMP3_HYST = 88,SENSORS_ASB100_TEMP3_OVER = 89,SENSORS_ASB100_TEMP4 = 90,SENSORS_ASB100_TEMP4_HYST = 91,SENSORS_ASB100_TEMP4_OVER = 92,SENSORS_ASB100_VID = 97,SENSORS_ASB100_VRM = 98,SENSORS_ASB100_FAN1_DIV = 113,SENSORS_ASB100_FAN2_DIV = 114,SENSORS_ASB100_FAN3_DIV = 115,SENSORS_ASB100_ALARMS = 129,SENSORS_ASB100_BEEP_ENABLE = 130,SENSORS_ASB100_BEEPS = 131,SENSORS_XEONTEMP_REMOTE_TEMP = 54,SENSORS_XEONTEMP_REMOTE_TEMP_HYST = 55,SENSORS_XEONTEMP_REMOTE_TEMP_OVER = 56,SENSORS_XEONTEMP_ALARMS = 81,SENSORS_MAX1619_LOCAL_TEMP = 51,SENSORS_MAX1619_REMOTE_TEMP = 52,SENSORS_MAX1619_REMOTE_LOW = 53,SENSORS_MAX1619_REMOTE_HIGH = 54,SENSORS_MAX1619_REMOTE_MAX = 55,SENSORS_MAX1619_REMOTE_HYST = 56,SENSORS_MAX1619_ALARMS = 81,SENSORS_MAX6650_FAN1_TACH = 1,SENSORS_MAX6650_FAN2_TACH = 2,SENSORS_MAX6650_FAN3_TACH = 3,SENSORS_MAX6650_FAN4_TACH = 4,SENSORS_MAX6650_SPEED = 5,SENSORS_SMSC47B397_TEMP1 = 1,SENSORS_SMSC47B397_TEMP2 = 2,SENSORS_SMSC47B397_TEMP3 = 3,SENSORS_SMSC47B397_TEMP4 = 4,SENSORS_SMSC47B397_FAN1 = 17,SENSORS_SMSC47B397_FAN2 = 18,SENSORS_SMSC47B397_FAN3 = 19,SENSORS_SMSC47B397_FAN4 = 20,SENSORS_F71805F_ALARMS_IN = 200,SENSORS_F71805F_ALARMS_FAN = 201,SENSORS_F71805F_ALARMS_TEMP = 202,SENSORS_K8TEMP_TEMP1 = 1,SENSORS_K8TEMP_TEMP2 = 2,SENSORS_K8TEMP_TEMP3 = 3,SENSORS_K8TEMP_TEMP4 = 4,SENSORS_ERR_WILDCARDS = 1,SENSORS_ERR_NO_ENTRY = 2,SENSORS_ERR_ACCESS = 3,SENSORS_ERR_PROC = 4,SENSORS_ERR_DIV_ZERO = 5,SENSORS_ERR_CHIP_NAME = 6,SENSORS_ERR_BUS_NAME = 7,SENSORS_ERR_PARSE = 8,SENSORS_ERR_ACCESS_W = 9,SENSORS_ERR_ACCESS_R = 10,SENSORS_CHIP_NAME_PREFIX_ANY = 0,SENSORS_CHIP_NAME_BUS_ISA = -1,SENSORS_CHIP_NAME_BUS_ANY = -2,SENSORS_CHIP_NAME_BUS_ANY_I2C = -3,SENSORS_CHIP_NAME_BUS_DUMMY = -4,SENSORS_CHIP_NAME_BUS_PCI = -5,SENSORS_CHIP_NAME_ADDR_ANY = -1,SENSORS_MODE_NO_RW = 0,SENSORS_MODE_R = 1,SENSORS_MODE_W = 2,SENSORS_MODE_RW = 3,SENSORS_NO_MAPPING = -1,};
enum MACRO_SHF_ARM {SHF_ARM_ENTRYSECT = 0x10000000,SHF_ARM_COMDEF = 0x80000000,};
enum MACRO_SNDCARD {SNDCARD_ADLIB = 1,SNDCARD_SB = 2,SNDCARD_PAS = 3,SNDCARD_GUS = 4,SNDCARD_MPU401 = 5,SNDCARD_SB16 = 6,SNDCARD_SB16MIDI = 7,SNDCARD_UART6850 = 8,SNDCARD_GUS16 = 9,SNDCARD_MSS = 10,SNDCARD_PSS = 11,SNDCARD_SSCAPE = 12,SNDCARD_PSS_MPU = 13,SNDCARD_PSS_MSS = 14,SNDCARD_SSCAPE_MSS = 15,SNDCARD_TRXPRO = 16,SNDCARD_TRXPRO_SB = 17,SNDCARD_TRXPRO_MPU = 18,SNDCARD_MAD16 = 19,SNDCARD_MAD16_MPU = 20,SNDCARD_CS4232 = 21,SNDCARD_CS4232_MPU = 22,SNDCARD_MAUI = 23,SNDCARD_PSEUDO_MSS = 24,SNDCARD_GUSPNP = 25,SNDCARD_UART401 = 26,};
enum MACRO_SNDZERO {SNDZERO = 0x1,};
enum MACRO_SOL_IPX {SOL_IPX = 256,};
enum MACRO_SOL_TCP {SOL_TCP = 6,};
enum MACRO_SOL_UDP {SOL_UDP = 17,};
enum MACRO_STT_ARM {STT_ARM_TFUNC = 0xD,};
enum MACRO_SUGGEST {SUGGEST_RETRY = 0x10,SUGGEST_ABORT = 0x20,SUGGEST_REMAP = 0x30,SUGGEST_DIE = 0x40,SUGGEST_SENSE = 0x80,SUGGEST_IS_OK = 0xFF,};
enum MACRO_SYMINFO {SYMINFO_BT_SELF = 0xFFFF,SYMINFO_BT_PARENT = 0xFFFE,SYMINFO_BT_LOWRESERVE = 0xFF00,SYMINFO_FLG_DIRECT = 0x1,SYMINFO_FLG_PASSTHRU = 0x2,SYMINFO_FLG_COPY = 0x4,SYMINFO_FLG_LAZYLOAD = 0x8,SYMINFO_NONE = 0x0,SYMINFO_CURRENT = 0x1,SYMINFO_NUM = 0x2,};
enum MACRO_SYMTYPE {SYMTYPE = 50,};
enum MACRO_S_INPUT {S_INPUT = 0x1,S_HIPRI = 0x2,S_OUTPUT = 0x4,S_MSG = 0x8,S_ERROR = 0x10,S_HANGUP = 0x20,S_RDNORM = 0x40,S_WRNORM = 0x4,S_RDBAND = 0x80,S_WRBAND = 0x100,S_BANDURG = 0x200,};
enum MACRO_Success {Success = 0,BadRequest = 1,BadValue = 2,};
enum MACRO_SyncAll {SyncAll = 5,};
enum MACRO_TCPOLEN {TCPOLEN_MAXSEG = 4,};
enum MACRO_TCP_MSS {TCP_MSS = 512,TCP_MAXWIN = 65535,TCP_MAX_WINSHIFT = 14,};
enum MACRO_TCSANOW {TCSANOW = 0,TCSADRAIN = 1,TCSAFLUSH = 2,};
enum MACRO_TCSBRKP {TCSBRKP = 0x5425,};
enum MACRO_TCSETAF {TCSETAF = 0x5408,};
enum MACRO_TCSETAW {TCSETAW = 0x5407,};
enum MACRO_TCSETSF {TCSETSF = 0x5404,};
enum MACRO_TCSETSW {TCSETSW = 0x5403,};
enum MACRO_TELQUAL {TELQUAL_IS = 0,TELQUAL_SEND = 1,TELQUAL_INFO = 2,TELQUAL_REPLY = 2,TELQUAL_NAME = 3,};
enum MACRO_TERMIOS {TERMIOS = 1,NAMESIZE = 256,};
enum MACRO_TGWRITE {TGWRITE = 0x10,};
enum MACRO_TIMEOUT {CLSET_TIMEOUT = 1,CLGET_TIMEOUT = 2,};
enum MACRO_TIME_OK {TIME_OK = 0,};
enum MACRO_TIOCINQ {TIOCINQ = 21531,};
enum MACRO_TIOCPKT {TIOCPKT = 0x5420,};
enum MACRO_TIOCSER {TIOCSER_TEMT = 0x1,};
enum MACRO_TIOCSTI {TIOCSTI = 0x5412,};
enum MACRO_TMAGLEN {TMAGLEN = 6,};
enum MACRO_TOWRITE {TOWRITE = 0x2,};
enum MACRO_TR_ALEN {TR_ALEN = 6,};
enum MACRO_TUWRITE {TUWRITE = 0x80,};
enum MACRO_UINTMAX {UINTMAX_MAX = -1,};
enum MACRO_UINTPTR {UINTPTR_MAX = -1,};
enum MACRO_UNKNOWN {UNKNOWN_REQUEST = 5,};
enum MACRO_VERSION {_POSIX_VERSION = 200112,_POSIX2_VERSION = 200112,};
enum MACRO_VWERASE {VWERASE = 14,};
enum MACRO_WINDOWS {WINDOWS_WM_MAJOR_VERSION = 1,WINDOWS_WM_MINOR_VERSION = 0,WINDOWS_WM_PATCH_VERSION = 0,};
enum MACRO_WNOHANG {WNOHANG = 1,WUNTRACED = 2,};
enum MACRO_XALLOCA {XALLOCA_H = 1,};
enum MACRO_XCURSOR {XCURSOR_MAGIC = 0x72756358,XCURSOR_LIB_MAJOR = 0x1,XCURSOR_LIB_MINOR = 0x1,XCURSOR_LIB_REVISION = 0x7,XCURSOR_LIB_VERSION = 0x277B,XCURSOR_FILE_MAJOR = 0x1,XCURSOR_FILE_MINOR = 0x0,XCURSOR_FILE_VERSION = 0x10000,XCURSOR_FILE_HEADER_LEN = 0x10,XCURSOR_FILE_TOC_LEN = 0xC,XCURSOR_CHUNK_HEADER_LEN = 0x10,XCURSOR_COMMENT_TYPE = 0xFFFE0001,XCURSOR_COMMENT_VERSION = 0x1,XCURSOR_COMMENT_HEADER_LEN = 0x14,XCURSOR_COMMENT_COPYRIGHT = 0x1,XCURSOR_COMMENT_LICENSE = 0x2,XCURSOR_COMMENT_OTHER = 0x3,XCURSOR_COMMENT_MAX_LEN = 0x100000,XCURSOR_IMAGE_TYPE = 0xFFFD0002,XCURSOR_IMAGE_VERSION = 0x1,XCURSOR_IMAGE_HEADER_LEN = 0x24,XCURSOR_IMAGE_MAX_SIZE = 0x7FFF,XCURSOR_BITMAP_HASH_SIZE = 0x10,};
enum MACRO_XPSpool {XPSpool = 1,XPGetData = 2,};
enum MACRO_X_Reply {X_Reply = 1,X_Error = 0,X_CreateWindow = 1,X_ChangeWindowAttributes = 2,X_GetWindowAttributes = 3,X_DestroyWindow = 4,X_DestroySubwindows = 5,X_ChangeSaveSet = 6,X_ReparentWindow = 7,X_MapWindow = 8,X_MapSubwindows = 9,X_UnmapWindow = 10,X_UnmapSubwindows = 11,X_ConfigureWindow = 12,X_CirculateWindow = 13,X_GetGeometry = 14,X_QueryTree = 15,X_InternAtom = 16,X_GetAtomName = 17,X_ChangeProperty = 18,X_DeleteProperty = 19,X_GetProperty = 20,X_ListProperties = 21,X_SetSelectionOwner = 22,X_GetSelectionOwner = 23,X_ConvertSelection = 24,X_SendEvent = 25,X_GrabPointer = 26,X_UngrabPointer = 27,X_GrabButton = 28,X_UngrabButton = 29,X_ChangeActivePointerGrab = 30,X_GrabKeyboard = 31,X_UngrabKeyboard = 32,X_GrabKey = 33,X_UngrabKey = 34,X_AllowEvents = 35,X_GrabServer = 36,X_UngrabServer = 37,X_QueryPointer = 38,X_GetMotionEvents = 39,X_TranslateCoords = 40,X_WarpPointer = 41,X_SetInputFocus = 42,X_GetInputFocus = 43,X_QueryKeymap = 44,X_OpenFont = 45,X_CloseFont = 46,X_QueryFont = 47,X_QueryTextExtents = 48,X_ListFonts = 49,X_ListFontsWithInfo = 50,X_SetFontPath = 51,X_GetFontPath = 52,X_CreatePixmap = 53,X_FreePixmap = 54,X_CreateGC = 55,X_ChangeGC = 56,X_CopyGC = 57,X_SetDashes = 58,X_SetClipRectangles = 59,X_FreeGC = 60,X_ClearArea = 61,X_CopyArea = 62,X_CopyPlane = 63,X_PolyPoint = 64,X_PolyLine = 65,X_PolySegment = 66,X_PolyRectangle = 67,X_PolyArc = 68,X_FillPoly = 69,X_PolyFillRectangle = 70,X_PolyFillArc = 71,X_PutImage = 72,X_GetImage = 73,X_PolyText8 = 74,X_PolyText16 = 75,X_ImageText8 = 76,X_ImageText16 = 77,X_CreateColormap = 78,X_FreeColormap = 79,X_CopyColormapAndFree = 80,X_InstallColormap = 81,X_UninstallColormap = 82,X_ListInstalledColormaps = 83,X_AllocColor = 84,X_AllocNamedColor = 85,X_AllocColorCells = 86,X_AllocColorPlanes = 87,X_FreeColors = 88,X_StoreColors = 89,X_StoreNamedColor = 90,X_QueryColors = 91,X_LookupColor = 92,X_CreateCursor = 93,X_CreateGlyphCursor = 94,X_FreeCursor = 95,X_RecolorCursor = 96,X_QueryBestSize = 97,X_QueryExtension = 98,X_ListExtensions = 99,X_ChangeKeyboardMapping = 100,X_GetKeyboardMapping = 101,X_ChangeKeyboardControl = 102,X_GetKeyboardControl = 103,X_Bell = 104,X_ChangePointerControl = 105,X_GetPointerControl = 106,X_SetScreenSaver = 107,X_GetScreenSaver = 108,X_ChangeHosts = 109,X_ListHosts = 110,X_SetAccessControl = 111,X_SetCloseDownMode = 112,X_KillClient = 113,X_RotateProperties = 114,X_ForceScreenSaver = 115,X_SetPointerMapping = 116,X_GetPointerMapping = 117,X_SetModifierMapping = 118,X_GetModifierMapping = 119,X_NoOperation = 127,};
enum MACRO_XtIMAll {XtIMAll = 15,};
enum MACRO_XvInput {XvInput = 0,XvOutput = 1,};
enum MACRO__ALLOCA {_ALLOCA_H = 1,_AIO_H = 1,_FCNTL_H = 1,};
enum MACRO__ASSERT {_ASSERT_H = 1,HAVE_IO_H = 1,HAVE_WINDOWS_H = 1,};
enum MACRO__DIRENT {_DIRENT_H = 1,};
enum MACRO__ENDIAN {_ENDIAN_H = 1,};
enum MACRO__G_HAVE {_G_HAVE_BOOL = 1,_G_HAVE_ATEXIT = 1,_G_HAVE_SYS_CDEFS = 1,_G_HAVE_SYS_WAIT = 1,_G_NEED_STDARG_H = 1,_G_HAVE_PRINTF_FP = 1,_G_HAVE_MMAP = 1,_G_HAVE_MREMAP = 1,_G_HAVE_LONG_DOUBLE_IO = 1,_G_HAVE_IO_FILE_OPEN = 1,_G_HAVE_IO_GETLINE_INFO = 1,_G_IO_IO_FILE_VERSION = 131073,_G_HAVE_ST_BLKSIZE = 0,_G_BUFSIZ = 8192,_G_NAMES_HAVE_UNDERSCORE = 0,_G_VTABLE_LABEL_HAS_LENGTH = 1,_G_USING_THUNKS = 1,};
enum MACRO__LIBGEN {_LIBGEN_H = 1,_LIBINTL_H = 1,};
enum MACRO__LIMITS {_LIMITS_H = 1,};
enum MACRO__LOCALE {_LOCALE_H = 1,};
enum MACRO__MALLOC {_MALLOC_H = 1,};
enum MACRO__MCHECK {_MCHECK_H = 1,_MEMORY_H = 1,};
enum MACRO__MNTENT {_MNTENT_H = 1,_MONETARY_H = 1,};
enum MACRO__MQUEUE {_MQUEUE_H = 1,};
enum MACRO__NETASH {_NETASH_ASH_H = 1,};
enum MACRO__NETROM {_NETROM_NETROM_H = 1,};
enum MACRO__POSIX2 {_POSIX2_BC_BASE_MAX = 99,_POSIX2_BC_DIM_MAX = 2048,_POSIX2_BC_SCALE_MAX = 99,_POSIX2_BC_STRING_MAX = 1000,_POSIX2_COLL_WEIGHTS_MAX = 2,_POSIX2_EXPR_NEST_MAX = 32,_POSIX2_LINE_MAX = 2048,_POSIX2_RE_DUP_MAX = 255,_POSIX2_CHARCLASS_NAME_MAX = 14,};
enum MACRO__PRINTF {_PRINTF_H = 1,};
enum MACRO__PROFIL {_PROFIL_H = 1,_SYS_PTRACE_H = 1,_SYS_QUOTA_H = 1,};
enum MACRO__REGEXP {_REGEXP_H = 1,_SYS_PARAM_H = 1,};
enum MACRO__RPCSVC {_RPCSVC_NIS_H = 1,};
enum MACRO__SEARCH {_SEARCH_H = 1,};
enum MACRO__SETJMP {_SETJMP_H = 1,_SGTTY_H = 1,_SHADOW_H = 1,};
enum MACRO__SIGSET {_SIGSET_H_types = 1,};
enum MACRO__STDLIB {_STDLIB_H = 1,};
enum MACRO__STRUCT {_STRUCT_TIMEVAL = 1,};
enum MACRO__SYS_IO {_SYS_IO_H = 1,_SYS_IPC_H = 1,};
enum MACRO__SYS_KD {_SYS_KD_H = 1,};
enum MACRO__THREAD {_THREAD_DB_H = 1,_SYS_PROCFS_H = 1,_SYS_USER_H = 1,};
enum MACRO__TTYENT {_TTYENT_H = 1,};
enum MACRO__ULIMIT {_ULIMIT_H = 1,_UTIME_H = 1,_UTMPX_H = 1,};
enum MACRO__UNISTD {_UNISTD_H = 1,};
enum MACRO__VALUES {_VALUES_H = 1,};
enum MACRO__WCTYPE {_WCTYPE_H = 1,};
enum MACRO___GLIBC {__GLIBC__ = 2,__GLIBC_MINOR__ = 5,__GLIBC_HAVE_LONG_LONG = 1,};
enum MACRO___SIGEV {__SIGEV_MAX_SIZE = 64,};
enum MACRO___WCHAR {__WCHAR_MIN = -2147483648,__WCHAR_MAX = 2147483647,};
enum MACRO___clock {__clock_t_defined = 1,};
enum MACRO___error {__error_t_defined = 1,};
enum MACRO_fsFalse {fsFalse = 0,};
enum MACRO_ft_open {ft_open_memory = 1,ft_open_stream = 2,ft_open_pathname = 4,ft_open_driver = 8,ft_open_params = 16,};
typedef struct _MenuButtonRec MenuButtonRec;
typedef struct _B76D2E1C695AB963EBB0451E02A66BD9 MultiSinkPart;
typedef struct osmesa_context *OSMesaContext;
typedef struct PS_PrivateRec_ PS_PrivateRec;
typedef struct _PanedClassRec PanedClassRec;
typedef struct _QueuedRequestRec *QueuedRequest;
typedef struct _F9A11BF5FCA53245437FD040CE8F0807 RECORD_RANGE8;
typedef struct _A5C97285B4EC7F28E1C14AA67E7E424B ScrollbarPart;
typedef struct _1C5B76C096BE4E4273B6A3EEC40CE50E *SelectionProp;
typedef struct _ShellClassRec ShellClassRec;
typedef struct _SimpleMenuRec SimpleMenuRec;
typedef struct _SmeLineRec *SmeLineObject;
typedef struct _7F541C22F3B2F8E6D7F24FB341D374C1 SmeThreeDPart;
typedef struct _StripChartRec StripChartRec;
typedef unsigned short SubpixelOrder;
typedef struct TT_HoriHeader_ TT_HoriHeader;
typedef struct TT_MaxProfile_ TT_MaxProfile;
typedef struct TT_Postscript_ TT_Postscript;
typedef struct TT_VertHeader_ TT_VertHeader;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F TextClassPart;
typedef struct _TextSrcRec *TextSrcObject;
typedef struct _TimerEventRec TimerEventRec;
typedef struct _TreeClassPart TreeClassPart;
struct WBXMLBuffer_s;
struct WBXMLParser_s;
typedef struct WBXMLTagEntry_s WBXMLTagEntry;
typedef struct WBXMLTreeNode_s WBXMLTreeNode;
typedef struct _DEB6ED3E3E48801FAB6806704D963455 *WMShellWidget;
typedef struct _XAnyClassinfo XAnyClassInfo;
typedef struct _2B57C510C3935D29053A101D8FCA0A7C XButtonStatus;
typedef struct _XExtEventInfo XExtEventInfo;
typedef struct _9E0249E98289110ACA9F1289B33657CF XGravityEvent;
typedef unsigned int XIMResetState;
typedef struct _2E56E956F88F593FE24676E86AAE3518 XIMValuesList;
typedef struct _83EE9095BF164417D8EF1B0B9271645C XMappingEvent;
typedef struct _E55328F014D59CB8D8C2D56824FBB3BE *XPPrinterList;
typedef struct _552480BDAF941CC5E2D5D2221F90C259 XRRScreenSize;
typedef struct _697B32D3B5D3093ACC810617F93D908A XRecordRange8;
typedef struct _666210E100F3CB5D4A75782C69E711A8 XTestJumpInfo;
typedef struct _612E07375E3857AAAD72ABB386C90011 XTextProperty;
typedef void *XVaNestedList;
typedef struct _XValuatorInfo XValuatorInfo;
typedef struct _xwd_file_header XWDFileHeader;
typedef struct _XawTextAnchor XawTextAnchor;
typedef struct _XawTextEntity XawTextEntity;
typedef struct _XawTextMargin XawTextMargin;
typedef struct _XcursorImages XcursorImages;
typedef struct _XkbChanges *XkbChangesPtr;
typedef struct _XkbChanges XkbChangesRec;
typedef struct _XkbKeyNameRec *XkbKeyNamePtr;
typedef struct _XkbKeyNameRec XkbKeyNameRec;
typedef struct _XkbKeyType *XkbKeyTypePtr;
typedef struct _XkbKeyType XkbKeyTypeRec;
typedef struct _XkbOutline *XkbOutlinePtr;
typedef struct _XkbOutline XkbOutlineRec;
typedef struct _XkbOverlay *XkbOverlayPtr;
typedef struct _XkbOverlay XkbOverlayRec;
typedef struct _XkbRF_Rule *XkbRF_RulePtr;
typedef struct _XkbRF_Rule XkbRF_RuleRec;
typedef struct _XkbSection *XkbSectionPtr;
typedef struct _XkbSection XkbSectionRec;
typedef struct _XkbUI_View *XkbUI_ViewPtr;
typedef struct _XmuScanline XmuTextUpdate;
typedef struct _XmuWidgetNode XmuWidgetNode;
typedef struct _7F9CDB57B2273A7A35E8F17907E745D4 XpauDocValues;
typedef struct _6FD63CF3083337BDDDDD931C730A9E68 XpauJobValues;
typedef struct _94144826E4178014C622990B92554F5C XpmAttributes;
typedef struct _XrmHashBucketRec *XrmHashBucket;
typedef unsigned int XtBlockHookId;
typedef struct _XtCallbackRec XtCallbackRec;
typedef unsigned int XtVersionType;
typedef struct _EE831A901A5A464BF76892075612AE21 XvAdaptorInfo;
typedef struct _zlibbuffer *ZlibBufferPtr;
enum _FcLangResult {FcLangEqual = 0x0,FcLangDifferentCountry = 0x1,FcLangDifferentLang = 0x2,};
struct _IO_FILE_plus;
struct _IjsClientCtx;
struct _IjsServerCtx;
struct _LBXDeltaElem {int length;unsigned char *buf;};
struct _XAsyncEState {unsigned int min_sequence_number;unsigned int max_sequence_number;unsigned char error_code;unsigned char major_opcode;unsigned short minor_opcode;unsigned char last_error_received;int error_count;};
typedef struct _XFreeFuncs _XFreeFuncRec;
typedef struct _E47C1379F192540C5AC97D7F222EBA5E *_XPrivDisplay;
struct _XkbAnyAction {unsigned char type;unsigned char data[7];};
struct _XkbISOAction {unsigned char type;unsigned char flags;unsigned char mask;unsigned char real_mods;char group_XXX;unsigned char affect;unsigned char vmods1;unsigned char vmods2;};
struct _XkbModAction {unsigned char type;unsigned char flags;unsigned char mask;unsigned char real_mods;unsigned char vmods1;unsigned char vmods2;};
struct _XkbPtrAction {unsigned char type;unsigned char flags;unsigned char high_XXX;unsigned char low_XXX;unsigned char high_YYY;unsigned char low_YYY;};
struct _XkbSymMapRec {unsigned char kt_index[4];unsigned char group_info;unsigned char width;unsigned short offset;};
typedef struct __GLXFBConfigRec __GLXFBConfig;
typedef int (*__compar_fn_t)( void *,  void *);
struct __exit_status {short __e_termination;short __e_exit;};
typedef int __io_close_fn(void *cookie);
struct __sched_param {int __sched_priority;};
enum __socket_type {SOCK_STREAM = 0x1,SOCK_DGRAM = 0x2,SOCK_RAW = 0x3,SOCK_RDM = 0x4,SOCK_SEQPACKET = 0x5,SOCK_PACKET = 0xA,};
typedef int __suseconds_t;
typedef unsigned int __t_uscalar_t;
struct _win_st__pdat {short _pad_y;short _pad_x;short _pad_top;short _pad_left;short _pad_bottom;short _pad_right;};
typedef struct relent_chain arelent_chain;
typedef unsigned long long bfd_size_type;
struct bfd_sym_chain {struct bfd_sym_chain *next; char *name;};
enum dis_insn_type {dis_noninsn = 0x0,dis_nonbranch = 0x1,dis_branch = 0x2,dis_condbranch = 0x3,dis_jsr = 0x4,dis_condjsr = 0x5,dis_dref = 0x6,dis_dref2 = 0x7,};
typedef int (*fprintf_ftype)(void *,  char *, ...);
typedef unsigned int fpu_control_t;
typedef struct _1A68CE477B37BE31DCB043B6F4664E49 fsCreateACReq;
typedef struct _B17A026830C769E803D493B7F2598A70 fsFormatError;
typedef struct _69EBDB3A774B1AFC7F282884D9B780FC fsLengthError;
typedef struct _A23F2D0A331F720D631E2B6171CC3ECA fsResourceReq;
struct getquota_args {char *gqa_pathp;int gqa_uid;};
struct gmon_hist_hdr {char low_pc[4];char high_pc[4];char hist_size[4];char prof_rate[4];char dimen[15];char dimen_abbrev;};
enum insert_option {NO_INSERT = 0x0,INSERT = 0x1,};
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
struct ipx_route_def {unsigned int ipx_network;unsigned int ipx_router_network;unsigned char ipx_router_node[6];unsigned char ipx_device[16];unsigned short ipx_flags;};
typedef struct _A87B2475E9FE5E7737E5261AB6E50CE5 jas_cmxform_t;
typedef struct _225FD46B7233514BB6E78EAEDC113C23 jas_iccattr_t;
typedef struct _74689F94013354ABD1284F3BD5DCBEC8 jas_icccurv_t;
typedef struct _71FB89AF527DBE05A40AF86E9AEEBBEA jas_icclut8_t;
typedef struct _897E4B831DB07A8CD8CF80172B9B47E8 jas_iccprof_t;
typedef struct _6532AF44D7211C2B9106181412036892 jas_icctime_t;
typedef struct _D6CB40C77BBA5C4EA30E630B21A87947 jas_taginfo_t;
enum mcheck_status {MCHECK_DISABLED = 0xFFFFFFFF,MCHECK_OK = 0x0,MCHECK_FREE = 0x1,MCHECK_HEAD = 0x2,MCHECK_TAIL = 0x3,};
struct nr_ctl_struct {unsigned char index;unsigned char id;unsigned int cmd;unsigned int arg;};
typedef struct pcap_dumper pcap_dumper_t;
enum pm_check_code {PM_CHECK_OK = 0x0,PM_CHECK_UNKNOWN_TYPE = 0x1,PM_CHECK_TOO_LONG = 0x2,PM_CHECK_UNCHECKABLE = 0x3,PM_CHECK_TOO_SHORT = 0x4,};
enum pm_check_type {PM_CHECK_BASIC = 0x0,};
struct ps_prochandle;
typedef unsigned int pthread_key_t;
struct remove_sample {int devno;int bankno;int instrno;};
enum report_method {RM_NOT_YET_SET = 0x0,RM_IGNORE = 0x1,RM_GENERATE_WARNING = 0x2,RM_GENERATE_ERROR = 0x3,};
struct seq_event_rec {unsigned char arr[8];};
typedef struct sg_req_info sg_req_info_t;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smInteractMsg;
typedef struct _ss_rp_options ss_rp_options;
typedef struct st_fileinfo st_fileinfo_t;
typedef struct st_loopinfo st_loopinfo_t;
struct synth_control {int devno;char data[4000];};
typedef struct _13745364EEA695BC65B7D4AAC1B24515 td_eventbuf_t;
typedef struct td_ta_stats td_ta_stats_t;
typedef struct td_thragent td_thragent_t;
struct tr_statistics {unsigned int rx_packets;unsigned int tx_packets;unsigned int rx_bytes;unsigned int tx_bytes;unsigned int rx_errors;unsigned int tx_errors;unsigned int rx_dropped;unsigned int tx_dropped;unsigned int multicast;unsigned int transmit_collision;unsigned int line_errors;unsigned int internal_errors;unsigned int burst_errors;unsigned int A_C_errors;unsigned int abort_delimiters;unsigned int lost_frames;unsigned int recv_congest_count;unsigned int frame_copied_errors;unsigned int frequency_errors;unsigned int token_errors;unsigned int dummy1;};
typedef struct tupleint_list_item *tupleint_list;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;
typedef unsigned char uint_least8_t;
struct usb_interface {struct usb_interface_descriptor *altsetting;int num_altsetting;};
typedef void (*void_function)();
typedef struct _xAnyClassinfo xAnyClassInfo;
typedef struct _53B2C5E872CF4691EFE90F887D66B7FD xClearAreaReq;
typedef struct _45331FD382D3B76DE50383933A2C35C9 xCopyPlaneReq;
typedef struct _246DDDA2B420E716CCF540DCDA3D282B xDMXSyncReply;
typedef struct _9DBA678C3E373C7A30D5EC7DD13ED3FC xDirectFormat;
typedef struct GLXRender xGLXRenderReq;
typedef struct GLXSingle xGLXSingleReq;
typedef struct GLXWaitGL xGLXWaitGLReq;
typedef struct _33E0BD21BC9E25CB376AFEED9A297D0A xGenericReply;
typedef struct _D53EE25F80C41C95CC04B700465E64D8 xImageTextReq;
typedef struct _LbxSwitch xLbxSwitchReq;
typedef struct _4856EFEBDD7E53CA21A9CBFC75FEF206 xLbxSyncReply;
typedef struct _292923DDD4ED46EE83D974C820DC3932 xListFontsReq;
typedef struct _B4F2C86EC2AFA3B90E8AE0EA0F71367B xListHostsReq;
typedef struct _DB2D4F6E439022CA547DF8AA2CE83D6E xPictFormInfo;
typedef struct _5C0DD3C4E70CCCC9965B24A6BE5ED8FB xPixmapFormat;
typedef struct _82D86B5B3C9D9E6A7BE98808A956EE82 xPolyPointReq;
typedef struct _7250734D77F79F0949305E641023FE62 xSendEventReq;
typedef struct _1296C23E7EDA709A08D87BF116515624 xSetDashesReq;
typedef struct _ShapeMask xShapeMaskReq;
typedef struct _ShmAttach xShmAttachReq;
typedef struct _ShmDetach xShmDetachReq;
typedef struct _xSyncAwaitReq xSyncAwaitReq;
typedef struct _5CD0DDA75FC8A64FD62E45433429A157 xTestResetReq;
typedef struct _9DF5225FB79C7EC3237B4B73EEC9C169 xUngrabKeyReq;
typedef struct _xValuatorInfo xValuatorInfo;
typedef struct _F134966C153EAA2FEEB175F7114F713D xXDGAModeInfo;
typedef struct _XagCreate xXagCreateReq;
typedef struct _XevieSend xXevieSendReq;
enum xcb_gravity_t {XCB_GRAVITY_BIT_FORGET = 0x0,XCB_GRAVITY_WIN_UNMAP = 0x0,XCB_GRAVITY_NORTH_WEST = 0x1,XCB_GRAVITY_NORTH = 0x2,XCB_GRAVITY_NORTH_EAST = 0x3,XCB_GRAVITY_WEST = 0x4,XCB_GRAVITY_CENTER = 0x5,XCB_GRAVITY_EAST = 0x6,XCB_GRAVITY_SOUTH_WEST = 0x7,XCB_GRAVITY_SOUTH = 0x8,XCB_GRAVITY_SOUTH_EAST = 0x9,XCB_GRAVITY_STATIC = 0xA,};
enum xcb_mapping_t {XCB_MAPPING_MODIFIER = 0x0,XCB_MAPPING_KEYBOARD = 0x1,XCB_MAPPING_POINTER = 0x2,};
enum xcb_sync_ca_t {XCB_SYNC_CA_COUNTER = 0x1,XCB_SYNC_CA_VALUE_TYPE = 0x2,XCB_SYNC_CA_VALUE = 0x4,XCB_SYNC_CA_TEST_TYPE = 0x8,XCB_SYNC_CA_DELTA = 0x10,XCB_SYNC_CA_EVENTS = 0x20,};
enum xcb_xv_type_t {XCB_XV_TYPE_INPUT_MASK = 0x1,XCB_XV_TYPE_OUTPUT_MASK = 0x2,XCB_XV_TYPE_VIDEO_MASK = 0x4,XCB_XV_TYPE_STILL_MASK = 0x8,XCB_XV_TYPE_IMAGE_MASK = 0x10,};
typedef struct _xkbBellNotify xkbBellNotify;
typedef struct _xkmActionDesc xkmActionDesc;
typedef union _xkmDoodadDesc xkmDoodadDesc;
typedef struct _D0F732F65C44B5672B29FFE38726918A xvAdaptorInfo;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvGetStillReq;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvGetVideoReq;
typedef struct _DEEBBF9E678AFA2413B9A4D363D90472 xvGrabPortReq;
typedef struct _75FC8135A7E79B969971564222AED43C xvPutImageReq;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvPutStillReq;
typedef struct _9D856B837113E1B9C553BEF8F42066D9 xvPutVideoReq;
enum yppush_status {YPPUSH_SUCC = 0x1,YPPUSH_AGE = 0x2,YPPUSH_NOMAP = 0xFFFFFFFF,YPPUSH_NODOM = 0xFFFFFFFE,YPPUSH_RSRC = 0xFFFFFFFD,YPPUSH_RPC = 0xFFFFFFFC,YPPUSH_MADDR = 0xFFFFFFFB,YPPUSH_YPERR = 0xFFFFFFFA,YPPUSH_BADARGS = 0xFFFFFFF9,YPPUSH_DBM = 0xFFFFFFF8,YPPUSH_FILE = 0xFFFFFFF7,YPPUSH_SKEW = 0xFFFFFFF6,YPPUSH_CLEAR = 0xFFFFFFF5,YPPUSH_FORCE = 0xFFFFFFF4,YPPUSH_XFRERR = 0xFFFFFFF3,YPPUSH_REFUSED = 0xFFFFFFF2,};
typedef struct amesa_context *AMesaContext;
typedef struct _AsciiSinkRec AsciiSinkRec;
typedef struct _AsciiSrcPart AsciiSrcPart;
typedef struct BDF_PropertyRec_ *BDF_Property;
typedef struct _BlockHookRec BlockHookRec;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F BoxClassPart;
typedef struct CID_FaceDictRec_ *CID_FaceDict;
typedef struct CID_FaceInfoRec_ *CID_FaceInfo;
typedef struct _3DC7B7400B12314EE6EFE34533277AB7 CTL_RESPONSE;
typedef struct _C9EFACD7AD111D54B2C71B18ED3A969D *CallBackInfo;
typedef struct _CompositePart *CompositePtr;
typedef struct _CompositeRec CompositeRec;
typedef struct _WidgetClassRec CoreClassRec;
typedef struct dmesa_context *DMesaContext;
typedef struct _DialogRec *DialogWidget;
enum EPOLL_EVENTS {EPOLLIN = 0x1,EPOLLPRI = 0x2,EPOLLOUT = 0x4,EPOLLRDNORM = 0x40,EPOLLRDBAND = 0x80,EPOLLWRNORM = 0x100,EPOLLWRBAND = 0x200,EPOLLMSG = 0x400,EPOLLERR = 0x8,EPOLLHUP = 0x10,EPOLLONESHOT = 0x40000000,EPOLLET = 0x80000000,};
typedef struct _A0565235DB0A025ED98270EC8F0003BF Elf32_Verdef;
typedef struct _F9E7774477A9727B3397D0BE30B022B2 Elf32_auxv_t;
typedef struct _75FD820D0CE6C215ACE04A8FAA270A6D Elf64_Verdef;
typedef struct _E8B6B3D679DDF9A2A9F1E31A29349D07 Elf64_auxv_t;
typedef struct _63BD57EE9DEAF718631DB9386FA8EB5E ExifRational;
typedef struct _ExtensionSelectorRec ExtSelectRec;
typedef struct _FPEFunctions FPEFunctions;
typedef struct _35F39AB974A221D257EE41BCA2E719FF FSErrorEvent;
typedef struct _FSPropOffset FSPropOffset;
typedef struct _FTMapping *FTMappingPtr;
typedef struct _FTMapping FTMappingRec;
enum FT_Encoding_ {FT_ENCODING_NONE = 0x0,FT_ENCODING_MS_SYMBOL = 0x73796D62,FT_ENCODING_UNICODE = 0x756E6963,FT_ENCODING_SJIS = 0x736A6973,FT_ENCODING_GB2312 = 0x67622020,FT_ENCODING_BIG5 = 0x62696735,FT_ENCODING_WANSUNG = 0x77616E73,FT_ENCODING_JOHAB = 0x6A6F6861,FT_ENCODING_MS_SJIS = 0x736A6973,FT_ENCODING_MS_GB2312 = 0x67622020,FT_ENCODING_MS_BIG5 = 0x62696735,FT_ENCODING_MS_WANSUNG = 0x77616E73,FT_ENCODING_MS_JOHAB = 0x6A6F6861,FT_ENCODING_ADOBE_STANDARD = 0x41444F42,FT_ENCODING_ADOBE_EXPERT = 0x41444245,FT_ENCODING_ADOBE_CUSTOM = 0x41444243,FT_ENCODING_ADOBE_LATIN_1 = 0x6C617431,FT_ENCODING_OLD_LATIN_2 = 0x6C617432,FT_ENCODING_APPLE_ROMAN = 0x61726D6E,};
typedef struct FT_GlyphSlotRec_ *FT_GlyphSlot;
typedef struct FT_Open_Args_ FT_Open_Args;
typedef struct FT_Parameter_ FT_Parameter;
typedef struct FT_StreamRec_ FT_StreamRec;
typedef struct _FcObjectType FcObjectType;
typedef struct _FontEntry *FontEntryPtr;
typedef struct _FontEntry FontEntryRec;
typedef struct _FontNames *FontNamesPtr;
typedef struct _FontNames FontNamesRec;
typedef struct _FontTable *FontTablePtr;
typedef struct _FontTable FontTableRec;
typedef struct _FormClassRec FormClassRec;
typedef int Form_Options;
typedef struct _XawGripCallData *GripCallData;
typedef struct _GripClassRec GripClassRec;
typedef struct _IceListenObj *IceListenObj;
typedef struct _IjsClientCtx IjsClientCtx;
typedef struct _IjsServerCtx IjsServerCtx;
typedef struct _23589243830CB3BE7E2EA4E046E5A332 IndirectPair;
typedef int Item_Options;
struct JavaVMOption {char *optionString;void *extraInfo;};
typedef struct _LBXDeltas *LBXDeltasPtr;
typedef struct _LBXDeltas LBXDeltasRec;
typedef struct _LateBindings LateBindings;
typedef struct _LayoutRec *LayoutWidget;
typedef struct _ListClassRec ListClassRec;
enum MACRO_ACTION {XTestDELAY_ACTION = 0,XTestKEY_ACTION = 1,XTestMOTION_ACTION = 2,XTestJUMP_ACTION = 3,};
enum MACRO_ALLOCA {USE_C_ALLOCA = 1,C_ALLOCA = 1,};
enum MACRO_ARPHRD {ARPHRD_NETROM = 0,ARPHRD_ETHER = 1,ARPHRD_EETHER = 2,ARPHRD_AX25 = 3,ARPHRD_PRONET = 4,ARPHRD_CHAOS = 5,ARPHRD_IEEE802 = 6,ARPHRD_ARCNET = 7,ARPHRD_APPLETLK = 8,ARPHRD_DLCI = 15,ARPHRD_ATM = 19,ARPHRD_METRICOM = 23,ARPHRD_IEEE1394 = 24,ARPHRD_EUI64 = 27,ARPHRD_INFINIBAND = 32,ARPHRD_SLIP = 256,ARPHRD_CSLIP = 257,ARPHRD_SLIP6 = 258,ARPHRD_CSLIP6 = 259,ARPHRD_RSRVD = 260,ARPHRD_ADAPT = 264,ARPHRD_ROSE = 270,ARPHRD_X25 = 271,ARPHRD_HWX25 = 272,ARPHRD_PPP = 512,ARPHRD_CISCO = 513,ARPHRD_HDLC = 513,ARPHRD_LAPB = 516,ARPHRD_DDCMP = 517,ARPHRD_RAWHDLC = 518,ARPHRD_TUNNEL = 768,ARPHRD_TUNNEL6 = 769,ARPHRD_FRAD = 770,ARPHRD_SKIP = 771,ARPHRD_LOOPBACK = 772,ARPHRD_LOCALTLK = 773,ARPHRD_FDDI = 774,ARPHRD_BIF = 775,ARPHRD_SIT = 776,ARPHRD_IPDDP = 777,ARPHRD_IPGRE = 778,ARPHRD_PIMREG = 779,ARPHRD_HIPPI = 780,ARPHRD_ASH = 781,ARPHRD_ECONET = 782,ARPHRD_IRDA = 783,ARPHRD_FCPP = 784,ARPHRD_FCAL = 785,ARPHRD_FCPL = 786,ARPHRD_FCFABRIC = 787,ARPHRD_IEEE802_TR = 800,ARPHRD_IEEE80211 = 801,ARPHRD_IEEE80211_PRISM = 802,ARPHRD_IEEE80211_RADIOTAP = 803,ARPHRD_VOID = 65535,ARPHRD_NONE = 65534,};
enum MACRO_ATADDR {ATADDR_ANYNET = 0,ATADDR_ANYNODE = 0,ATADDR_ANYPORT = 0,ATADDR_BCAST = 255,};
enum MACRO_ATPORT {ATPORT_FIRST = 1,ATPORT_RESERVED = 128,ATPORT_LAST = 254,};
enum MACRO_AnyKey {AnyKey = 0,};
enum MACRO_B19200 {B19200 = 0xE,};
enum MACRO_B38400 {B38400 = 0xF,};
enum MACRO_B57600 {B57600 = 0x1001,};
enum MACRO_BFD_IS {BFD_IS_RELAXABLE = 0x200,BFD_TRADITIONAL_FORMAT = 0x400,BFD_IN_MEMORY = 0x800,};
enum MACRO_BITMAP {BITMAP_FONT_SEGMENT_SIZE = 128,};
enum MACRO_BPF_LD {BPF_LD = 0x0,BPF_LDX = 0x1,BPF_ST = 0x2,BPF_STX = 0x3,BPF_ALU = 0x4,BPF_JMP = 0x5,BPF_RET = 0x6,BPF_MISC = 0x7,BPF_W = 0x0,BPF_H = 0x8,BPF_B = 0x10,BPF_IMM = 0x0,BPF_ABS = 0x20,BPF_IND = 0x40,BPF_MEM = 0x60,BPF_LEN = 0x80,BPF_MSH = 0xA0,BPF_ADD = 0x0,BPF_SUB = 0x10,BPF_MUL = 0x20,BPF_DIV = 0x30,BPF_OR = 0x40,BPF_AND = 0x50,BPF_LSH = 0x60,BPF_RSH = 0x70,BPF_NEG = 0x80,BPF_JA = 0x0,BPF_JEQ = 0x10,BPF_JGT = 0x20,BPF_JGE = 0x30,BPF_JSET = 0x40,BPF_K = 0x0,BPF_X = 0x8,BPF_A = 0x10,BPF_TAX = 0x0,BPF_TXA = 0x80,BPF_MEMWORDS = 0x10,};
enum MACRO_BUFFER {WRITE_BUFFER = 0x3B,READ_BUFFER = 0x3C,};
enum MACRO_BUTTON {BUTTON_CTRL = 16777216,BUTTON_SHIFT = 33554432,BUTTON_ALT = 67108864,};
enum MACRO_CBPROC {CBPROC_RECEIVE = 1,CBPROC_FINISH = 2,CBPROC_ERROR = 3,};
enum MACRO_CFLUSH {CFLUSH = 15,};
enum MACRO_CHANGE {CHANGE_DEFINITION = 0x40,};
enum MACRO_CIBAUD {CIBAUD = 0x100F0000,CMSPAR = 0x40000000,CRTSCTS = 0x80000000,};
enum MACRO_CLIENT {CLIENT_REQ = 1,};
enum MACRO_CLNEXT {CLNEXT = 22,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000000,};
enum MACRO_COOKED {COOKED_IOCTL = 1,};
enum MACRO_CSTART {CSTART = 17,};
enum MACRO_CURSES {CURSES = 1,};
enum MACRO_DAMAGE {DAMAGE_MAJOR = 1,DAMAGE_MINOR = 0,};
enum MACRO_DECOMP {DECOMP_ERROR = -1,DECOMP_FATALERROR = -2,};
enum MACRO_DELETE {DELETE = 2,};
enum MACRO_DESERR {DESERR_NONE = 0,DESERR_NOHWDEVICE = 1,DESERR_HWERROR = 2,DESERR_BADPARAM = 3,};
enum MACRO_DEVICE {DEVICE_RESOLUTION = 1,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,};
enum MACRO_DO_BSD {DO_BSD_COMPRESS = 1,DO_DEFLATE = 1,DO_PREDICTOR_1 = 0,DO_PREDICTOR_2 = 0,};
enum MACRO_DRIVER {DRIVER_OK = 0x0,DRIVER_BUSY = 0x1,DRIVER_SOFT = 0x2,DRIVER_MEDIA = 0x3,DRIVER_ERROR = 0x4,DRIVER_INVALID = 0x5,DRIVER_TIMEOUT = 0x6,DRIVER_HARD = 0x7,DRIVER_SENSE = 0x8,};
enum MACRO_DT_PPC {DT_PPC_GOT = 1879048192,DT_PPC_NUM = 1,};
enum MACRO_EBADID {EBADID = 5,};
enum MACRO_ECTYPE {ECTYPE_PACKET_RECEIVED = 0,ECTYPE_TRANSMIT_STATUS = 16,ECTYPE_TRANSMIT_OK = 1,ECTYPE_TRANSMIT_NOT_LISTENING = 2,ECTYPE_TRANSMIT_NET_ERROR = 3,ECTYPE_TRANSMIT_NO_CLOCK = 4,ECTYPE_TRANSMIT_LINE_JAMMED = 5,ECTYPE_TRANSMIT_NOT_PRESENT = 6,};
enum MACRO_EF_ARM {EF_ARM_RELEXEC = 0x1,EF_ARM_HASENTRY = 0x2,EF_ARM_INTERWORK = 0x4,EF_ARM_APCS_26 = 0x8,EF_ARM_APCS_FLOAT = 0x10,EF_ARM_PIC = 0x20,EF_ARM_ALIGN8 = 0x40,EF_ARM_NEW_ABI = 0x80,EF_ARM_OLD_ABI = 0x100,EF_ARM_SYMSARESORTED = 0x4,EF_ARM_DYNSYMSUSESEGIDX = 0x8,EF_ARM_MAPSYMSFIRST = 0x10,EF_ARM_EABIMASK = 0xFF000000,EF_ARM_EABI_UNKNOWN = 0x0,EF_ARM_EABI_VER1 = 0x1000000,EF_ARM_EABI_VER2 = 0x2000000,};
enum MACRO_EF_PPC {EF_PPC_EMB = 0x80000000,EF_PPC_RELOCATABLE = 0x10000,EF_PPC_RELOCATABLE_LIB = 0x8000,};
enum MACRO_EM_486 {EM_486 = 6,EM_SPARC64 = 11,EM_AMD64 = 62,EM_VIDEOCORE = 95,EM_TMM_GPP = 96,EM_NS32K = 97,EM_TPC = 98,EM_SNP1K = 99,EM_ST200 = 100,EM_IP2K = 101,EM_MAX = 102,EM_CR = 103,EM_F2MC16 = 104,EM_MSP430 = 105,EM_BLACKFIN = 106,EM_SE_C33 = 107,EM_SEP = 108,EM_ARCA = 109,EM_UNICORE = 110,};
enum MACRO_ENDIAN {__LITTLE_ENDIAN = 1234,__BIG_ENDIAN = 4321,__PDP_ENDIAN = 3412,};
enum MACRO_EUNDEF {EUNDEF = 0,ENOTFOUND = 1,EACCESS = 2,};
enum MACRO_EVLIST {EVLIST_TIMEOUT = 0x1,EVLIST_INSERTED = 0x2,EVLIST_SIGNAL = 0x4,EVLIST_ACTIVE = 0x8,EVLIST_INTERNAL = 0x10,EVLIST_INIT = 0x80,EVLIST_ALL = 0xF09F,};
enum MACRO_EVLOOP {EVLOOP_ONCE = 0x1,EVLOOP_NONBLOCK = 0x2,};
enum MACRO_EV_SEQ {EV_SEQ_LOCAL = 0x80,EV_TIMING = 0x81,EV_CHN_COMMON = 0x92,EV_CHN_VOICE = 0x93,EV_SYSEX = 0x94,};
enum MACRO_EXPAND {EXPAND_NAME = 64,};
enum MACRO_EXPIRE {EXPIRE_TIME = 180,GARBAGE_TIME = 240,};
enum MACRO_Expose {Expose = 12,};
enum MACRO_FAILED {FAILED = 2,};
enum MACRO_FHSIZE {FHSIZE = 32,};
enum MACRO_FILENO {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,};
enum MACRO_FLUSHR {FLUSHR = 0x1,FLUSHW = 0x2,};
enum MACRO_FOLLOW {FOLLOW_LINKS = 1,FOLLOW_PATH = 2,};
enum MACRO_FORMAT {PBM_FORMAT = 20529,RPBM_FORMAT = 20532,};
enum MACRO_FSHIFT {FSHIFT = 8,FSCALE = 256,};
enum MACRO_FcTrue {FcTrue = 1,};
enum MACRO_GETALL {GETALL = 13,};
enum MACRO_GETPID {GETPID = 11,};
enum MACRO_GETVAL {GETVAL = 12,};
enum MACRO_GROUPS {IMPMEM_GROUPS = 1,RECURS_GROUPS = 2,NEGMEM_GROUPS = 4,};
enum MACRO_GXcopy {GXcopy = 0x3,GXandInverted = 0x4,};
enum MACRO_GXnand {GXnand = 0xE,};
enum MACRO_GXnoop {GXnoop = 0x5,};
enum MACRO_HEADER {HEADER_SIZE = 6,};
enum MACRO_HOPCNT {HOPCNT_INFINITY = 16,};
enum MACRO_IEXTEN {IEXTEN = 0x8000,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,PARMRK = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IUCLC = 0x200,IXON = 0x400,IXANY = 0x800,IXOFF = 0x1000,IMAXBEL = 0x2000,IUTF8 = 0x4000,};
enum MACRO_IGNORE {IGNORE_SCALABLE_ALIASES = 2,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_NONE = 0xFFFFFFFF,};
enum MACRO_INTMAX {INTMAX_MIN = -9223372036854775808,INTMAX_MAX = 9223372036854775807,};
enum MACRO_INTPTR {INTPTR_MIN = -2147483648,INTPTR_MAX = 2147483647,};
enum MACRO_IP6OPT {IP6OPT_TYPE_SKIP = 0x0,IP6OPT_TYPE_DISCARD = 0x40,IP6OPT_TYPE_FORCEICMP = 0x80,IP6OPT_TYPE_ICMP = 0xC0,IP6OPT_TYPE_MUTABLE = 0x20,IP6OPT_PAD1 = 0x0,IP6OPT_PADN = 0x1,IP6OPT_JUMBO = 0xC2,IP6OPT_NSAP_ADDR = 0xC3,IP6OPT_TUNNEL_LIMIT = 0x4,IP6OPT_ROUTER_ALERT = 0x5,IP6OPT_JUMBO_LEN = 0x6,};
enum MACRO_IP_MSS {IP_MSS = 576,};
enum MACRO_IW_NUM {IW_NUM_OPER_MODE = 7,IW_SIZE_MODUL_LIST = 16,};
enum MACRO_LCRTBS {LCRTBS = 0x1,LPRTERA = 0x2,LCRTERA = 0x4,LTILDE = 0x8,LMDMBUF = 0x10,LLITOUT = 0x20,LTOSTOP = 0x40,LFLUSHO = 0x80,LNOHANG = 0x100,LL001000 = 0x200,LCRTKIL = 0x400,LPASS8 = 0x800,LCTLECH = 0x1000,LPENDIN = 0x2000,LDECCTQ = 0x4000,LNOFLSH = 0x8000,};
enum MACRO_LIBUSB {LIBUSB_HAS_GET_DRIVER_NP = 1,LIBUSB_HAS_DETACH_KERNEL_DRIVER_NP = 1,};
enum MACRO_LINKED {LINKED_CMD_COMPLETE = 0xA,LINKED_FLG_CMD_COMPLETE = 0xB,};
enum MACRO_LITTLE {LITTLE_ENDIAN = 1234,BIG_ENDIAN = 4321,PDP_ENDIAN = 3412,};
enum MACRO_LITUSE {LITUSE_ALPHA_ADDR = 0,LITUSE_ALPHA_BASE = 1,LITUSE_ALPHA_BYTOFF = 2,LITUSE_ALPHA_JSR = 3,LITUSE_ALPHA_TLS_GD = 4,LITUSE_ALPHA_TLS_LDM = 5,};
enum MACRO_LOCKED {LOCKED = 1,};
enum MACRO_MASTER {MASTER_ONLY = 32,};
enum MACRO_MAXCUT {MAXCUT = 30000,};
enum MACRO_MAXTRK {MAXTRK = 100,};
enum MACRO_MAXTTL {MAXTTL = 255,};
enum MACRO_MAX_IQ {MAX_IQ_TIME = 604800,MAX_DQ_TIME = 604800,};
enum MACRO_MEDIUM {MEDIUM_SCAN = 0x38,};
enum MACRO_MS_MGC {MS_MGC_VAL = 0xC0ED0000,MS_MGC_MSK = 0xFFFF0000,};
enum MACRO_MTBSFM {MTBSFM = 10,};
enum MACRO_MTFSFM {MTFSFM = 11,};
enum MACRO_MTLOAD {MTLOAD = 30,};
enum MACRO_MTLOCK {MTLOCK = 28,};
enum MACRO_MTOFFL {MTOFFL = 7,MTNOP = 8,};
enum MACRO_MTRAS1 {MTRAS1 = 14,};
enum MACRO_MTRAS2 {MTRAS2 = 15,MTRAS3 = 16,};
enum MACRO_MTSEEK {MTSEEK = 22,};
enum MACRO_MTTELL {MTTELL = 23,};
enum MACRO_MTWEOF {MTWEOF = 5,};
enum MACRO_NETROM {NETROM_T1 = 1,NETROM_T2 = 2,NETROM_N2 = 3,NETROM_PACLEN = 5,NETROM_T4 = 6,NETROM_IDLE = 7,NETROM_KILL = 99,NETROM_NEIGH = 0,NETROM_NODE = 1,};
enum MACRO_NOFILE {NOFILE = 256,};
enum MACRO_NORMAL {NORMAL_ALIAS_BEHAVIOR = 0,};
enum MACRO_NO_GCS {NO_GCS = 0,};
enum MACRO_OPTION {OPTION_ARG_OPTIONAL = 0x1,OPTION_HIDDEN = 0x2,OPTION_ALIAS = 0x4,OPTION_DOC = 0x8,OPTION_NO_USAGE = 0x10,};
enum MACRO_OSMESA {OSMESA_MAJOR_VERSION = 6,OSMESA_MINOR_VERSION = 5,OSMESA_PATCH_VERSION = 0,OSMESA_COLOR_INDEX = 6400,OSMESA_RGBA = 6408,OSMESA_BGRA = 1,OSMESA_ARGB = 2,OSMESA_RGB = 6407,OSMESA_BGR = 4,OSMESA_RGB_565 = 5,OSMESA_ROW_LENGTH = 16,OSMESA_Y_UP = 17,OSMESA_WIDTH = 32,OSMESA_HEIGHT = 33,OSMESA_FORMAT = 34,OSMESA_TYPE = 35,OSMESA_MAX_WIDTH = 36,OSMESA_MAX_HEIGHT = 37,};
enum MACRO_PACKET {PACKET_HOST = 0,PACKET_BROADCAST = 1,PACKET_MULTICAST = 2,PACKET_OTHERHOST = 3,PACKET_OUTGOING = 4,PACKET_LOOPBACK = 5,PACKET_FASTROUTE = 6,PACKET_ADD_MEMBERSHIP = 1,PACKET_DROP_MEMBERSHIP = 2,PACKET_RECV_OUTPUT = 3,PACKET_RX_RING = 5,PACKET_STATISTICS = 6,PACKET_MR_MULTICAST = 0,PACKET_MR_PROMISC = 1,PACKET_MR_ALLMULTI = 2,};
enum MACRO_PANNER {PANNER_DEFAULT_SCALE = 8,PANNER_OUTOFRANGE = -30000,};
enum MACRO_PCIIOC {PCIIOC_BASE = 1346586880,PCIIOC_CONTROLLER = 1346586880,PCIIOC_MMAP_IS_IO = 1346586881,PCIIOC_MMAP_IS_MEM = 1346586882,PCIIOC_WRITE_COMBINE = 1346586883,};
enum MACRO_PF_ARM {PF_ARM_SB = 0x10000000,};
enum MACRO_POLLIN {POLLIN = 0x1,POLLPRI = 0x2,POLLOUT = 0x4,POLLERR = 0x8,POLLHUP = 0x10,POLLNVAL = 0x20,};
enum MACRO_PRELIM {PRELIM = 1,COMPLETE = 2,};
enum MACRO_PRESET {PRESET_DICT = 0x20,};
enum MACRO_PT_ARM {PT_ARM_EXIDX = 0x70000001,};
enum MACRO_READ_6 {READ_6 = 0x8,};
enum MACRO_RECORD {RECORD_MAJOR_VERSION = 1,RECORD_MINOR_VERSION = 13,RECORD_LOWEST_MAJOR_VERSION = 1,RECORD_LOWEST_MINOR_VERSION = 12,};
enum MACRO_RENDER {RENDER_MAJOR = 0,RENDER_MINOR = 10,};
enum MACRO_REPORT {REPORT_MOUSE_POSITION = 134217728,};
enum MACRO_RETURN {RETURN_RESULT = 128,};
enum MACRO_REZERO {REZERO_UNIT = 0x1,};
enum MACRO_RIPCMD {RIPCMD_REQUEST = 1,RIPCMD_RESPONSE = 2,RIPCMD_TRACEON = 3,RIPCMD_TRACEOFF = 4,RIPCMD_MAX = 5,};
enum MACRO_RUSERS {RUSERS_MAXUSERLEN = 32,RUSERS_MAXLINELEN = 32,RUSERS_MAXHOSTLEN = 257,RUSERS_EMPTY = 0,RUSERS_RUN_LVL = 1,RUSERS_BOOT_TIME = 2,RUSERS_OLD_TIME = 3,RUSERS_NEW_TIME = 4,RUSERS_INIT_PROCESS = 5,RUSERS_LOGIN_PROCESS = 6,RUSERS_USER_PROCESS = 7,RUSERS_DEAD_PROCESS = 8,RUSERS_ACCOUNTING = 9,};
enum MACRO_R_IA64 {R_IA64_NONE = 0x0,R_IA64_IMM14 = 0x21,R_IA64_IMM22 = 0x22,R_IA64_IMM64 = 0x23,R_IA64_DIR32MSB = 0x24,R_IA64_DIR32LSB = 0x25,R_IA64_DIR64MSB = 0x26,R_IA64_DIR64LSB = 0x27,R_IA64_GPREL22 = 0x2A,R_IA64_GPREL64I = 0x2B,R_IA64_GPREL32MSB = 0x2C,R_IA64_GPREL32LSB = 0x2D,R_IA64_GPREL64MSB = 0x2E,R_IA64_GPREL64LSB = 0x2F,R_IA64_LTOFF22 = 0x32,R_IA64_LTOFF64I = 0x33,R_IA64_PLTOFF22 = 0x3A,R_IA64_PLTOFF64I = 0x3B,R_IA64_PLTOFF64MSB = 0x3E,R_IA64_PLTOFF64LSB = 0x3F,R_IA64_FPTR64I = 0x43,R_IA64_FPTR32MSB = 0x44,R_IA64_FPTR32LSB = 0x45,R_IA64_FPTR64MSB = 0x46,R_IA64_FPTR64LSB = 0x47,R_IA64_PCREL60B = 0x48,R_IA64_PCREL21B = 0x49,R_IA64_PCREL21M = 0x4A,R_IA64_PCREL21F = 0x4B,R_IA64_PCREL32MSB = 0x4C,R_IA64_PCREL32LSB = 0x4D,R_IA64_PCREL64MSB = 0x4E,R_IA64_PCREL64LSB = 0x4F,R_IA64_LTOFF_FPTR22 = 0x52,R_IA64_LTOFF_FPTR64I = 0x53,R_IA64_LTOFF_FPTR32MSB = 0x54,R_IA64_LTOFF_FPTR32LSB = 0x55,R_IA64_LTOFF_FPTR64MSB = 0x56,R_IA64_LTOFF_FPTR64LSB = 0x57,R_IA64_SEGREL32MSB = 0x5C,R_IA64_SEGREL32LSB = 0x5D,R_IA64_SEGREL64MSB = 0x5E,R_IA64_SEGREL64LSB = 0x5F,R_IA64_SECREL32MSB = 0x64,R_IA64_SECREL32LSB = 0x65,R_IA64_SECREL64MSB = 0x66,R_IA64_SECREL64LSB = 0x67,R_IA64_REL32MSB = 0x6C,R_IA64_REL32LSB = 0x6D,R_IA64_REL64MSB = 0x6E,R_IA64_REL64LSB = 0x6F,R_IA64_LTV32MSB = 0x74,R_IA64_LTV32LSB = 0x75,R_IA64_LTV64MSB = 0x76,R_IA64_LTV64LSB = 0x77,R_IA64_PCREL21BI = 0x79,R_IA64_PCREL22 = 0x7A,R_IA64_PCREL64I = 0x7B,R_IA64_IPLTMSB = 0x80,R_IA64_IPLTLSB = 0x81,R_IA64_COPY = 0x84,R_IA64_SUB = 0x85,R_IA64_LTOFF22X = 0x86,R_IA64_LDXMOV = 0x87,R_IA64_TPREL14 = 0x91,R_IA64_TPREL22 = 0x92,R_IA64_TPREL64I = 0x93,R_IA64_TPREL64MSB = 0x96,R_IA64_TPREL64LSB = 0x97,R_IA64_LTOFF_TPREL22 = 0x9A,R_IA64_DTPMOD64MSB = 0xA6,R_IA64_DTPMOD64LSB = 0xA7,R_IA64_LTOFF_DTPMOD22 = 0xAA,R_IA64_DTPREL14 = 0xB1,R_IA64_DTPREL22 = 0xB2,R_IA64_DTPREL64I = 0xB3,R_IA64_DTPREL32MSB = 0xB4,R_IA64_DTPREL32LSB = 0xB5,R_IA64_DTPREL64MSB = 0xB6,R_IA64_DTPREL64LSB = 0xB7,R_IA64_LTOFF_DTPREL22 = 0xBA,R_SH_NONE = 0x0,R_SH_DIR32 = 0x1,R_SH_REL32 = 0x2,R_SH_DIR8WPN = 0x3,R_SH_IND12W = 0x4,R_SH_DIR8WPL = 0x5,R_SH_DIR8WPZ = 0x6,R_SH_DIR8BP = 0x7,R_SH_DIR8W = 0x8,R_SH_DIR8L = 0x9,R_SH_SWITCH16 = 0x19,R_SH_SWITCH32 = 0x1A,R_SH_USES = 0x1B,R_SH_COUNT = 0x1C,R_SH_ALIGN = 0x1D,R_SH_CODE = 0x1E,R_SH_DATA = 0x1F,R_SH_LABEL = 0x20,R_SH_SWITCH8 = 0x21,R_SH_GNU_VTINHERIT = 0x22,R_SH_GNU_VTENTRY = 0x23,R_SH_TLS_GD_32 = 0x90,R_SH_TLS_LD_32 = 0x91,R_SH_TLS_LDO_32 = 0x92,R_SH_TLS_IE_32 = 0x93,R_SH_TLS_LE_32 = 0x94,R_SH_TLS_DTPMOD32 = 0x95,R_SH_TLS_DTPOFF32 = 0x96,R_SH_TLS_TPOFF32 = 0x97,R_SH_GOT32 = 0xA0,R_SH_PLT32 = 0xA1,R_SH_COPY = 0xA2,R_SH_GLOB_DAT = 0xA3,R_SH_JMP_SLOT = 0xA4,R_SH_RELATIVE = 0xA5,R_SH_GOTOFF = 0xA6,R_SH_GOTPC = 0xA7,R_SH_NUM = 0x100,R_390_NONE = 0x0,R_390_8 = 0x1,R_390_12 = 0x2,R_390_16 = 0x3,R_390_32 = 0x4,R_390_PC32 = 0x5,R_390_GOT12 = 0x6,R_390_GOT32 = 0x7,R_390_PLT32 = 0x8,R_390_COPY = 0x9,R_390_GLOB_DAT = 0xA,R_390_JMP_SLOT = 0xB,R_390_RELATIVE = 0xC,R_390_GOTOFF32 = 0xD,R_390_GOTPC = 0xE,R_390_GOT16 = 0xF,R_390_PC16 = 0x10,R_390_PC16DBL = 0x11,R_390_PLT16DBL = 0x12,R_390_PC32DBL = 0x13,R_390_PLT32DBL = 0x14,R_390_GOTPCDBL = 0x15,R_390_64 = 0x16,R_390_PC64 = 0x17,R_390_GOT64 = 0x18,R_390_PLT64 = 0x19,R_390_GOTENT = 0x1A,R_390_GOTOFF16 = 0x1B,R_390_GOTOFF64 = 0x1C,R_390_GOTPLT12 = 0x1D,R_390_GOTPLT16 = 0x1E,R_390_GOTPLT32 = 0x1F,R_390_GOTPLT64 = 0x20,R_390_GOTPLTENT = 0x21,R_390_PLTOFF16 = 0x22,R_390_PLTOFF32 = 0x23,R_390_PLTOFF64 = 0x24,R_390_TLS_LOAD = 0x25,R_390_TLS_GDCALL = 0x26,R_390_TLS_LDCALL = 0x27,R_390_TLS_GD32 = 0x28,R_390_TLS_GD64 = 0x29,R_390_TLS_GOTIE12 = 0x2A,R_390_TLS_GOTIE32 = 0x2B,R_390_TLS_GOTIE64 = 0x2C,R_390_TLS_LDM32 = 0x2D,R_390_TLS_LDM64 = 0x2E,R_390_TLS_IE32 = 0x2F,R_390_TLS_IE64 = 0x30,R_390_TLS_IEENT = 0x31,R_390_TLS_LE32 = 0x32,R_390_TLS_LE64 = 0x33,R_390_TLS_LDO32 = 0x34,R_390_TLS_LDO64 = 0x35,R_390_TLS_DTPMOD = 0x36,R_390_TLS_DTPOFF = 0x37,R_390_TLS_TPOFF = 0x38,R_390_20 = 0x39,R_390_GOT20 = 0x3A,R_390_GOTPLT20 = 0x3B,R_390_TLS_GOTIE20 = 0x3C,R_390_NUM = 0x3D,R_CRIS_NONE = 0x0,R_CRIS_8 = 0x1,R_CRIS_16 = 0x2,R_CRIS_32 = 0x3,R_CRIS_8_PCREL = 0x4,R_CRIS_16_PCREL = 0x5,R_CRIS_32_PCREL = 0x6,R_CRIS_GNU_VTINHERIT = 0x7,R_CRIS_GNU_VTENTRY = 0x8,R_CRIS_COPY = 0x9,R_CRIS_GLOB_DAT = 0xA,R_CRIS_JUMP_SLOT = 0xB,R_CRIS_RELATIVE = 0xC,R_CRIS_16_GOT = 0xD,R_CRIS_32_GOT = 0xE,R_CRIS_16_GOTPLT = 0xF,R_CRIS_32_GOTPLT = 0x10,R_CRIS_32_GOTREL = 0x11,R_CRIS_32_PLT_GOTREL = 0x12,R_CRIS_32_PLT_PCREL = 0x13,R_CRIS_NUM = 0x14,R_X86_64_NONE = 0x0,R_X86_64_64 = 0x1,R_X86_64_PC32 = 0x2,R_X86_64_GOT32 = 0x3,R_X86_64_PLT32 = 0x4,R_X86_64_COPY = 0x5,R_X86_64_GLOB_DAT = 0x6,R_X86_64_JUMP_SLOT = 0x7,R_X86_64_RELATIVE = 0x8,R_X86_64_GOTPCREL = 0x9,R_X86_64_32 = 0xA,R_X86_64_32S = 0xB,R_X86_64_16 = 0xC,R_X86_64_PC16 = 0xD,R_X86_64_8 = 0xE,R_X86_64_PC8 = 0xF,R_X86_64_DTPMOD64 = 0x10,R_X86_64_DTPOFF64 = 0x11,R_X86_64_TPOFF64 = 0x12,R_X86_64_TLSGD = 0x13,R_X86_64_TLSLD = 0x14,R_X86_64_DTPOFF32 = 0x15,R_X86_64_GOTTPOFF = 0x16,R_X86_64_TPOFF32 = 0x17,R_X86_64_NUM = 0x18,R_MN10300_NONE = 0x0,R_MN10300_32 = 0x1,R_MN10300_16 = 0x2,R_MN10300_8 = 0x3,R_MN10300_PCREL32 = 0x4,R_MN10300_PCREL16 = 0x5,R_MN10300_PCREL8 = 0x6,R_MN10300_GNU_VTINHERIT = 0x7,R_MN10300_GNU_VTENTRY = 0x8,R_MN10300_24 = 0x9,R_MN10300_GOTPC32 = 0xA,R_MN10300_GOTPC16 = 0xB,R_MN10300_GOTOFF32 = 0xC,R_MN10300_GOTOFF24 = 0xD,R_MN10300_GOTOFF16 = 0xE,R_MN10300_PLT32 = 0xF,R_MN10300_PLT16 = 0x10,R_MN10300_GOT32 = 0x11,R_MN10300_GOT24 = 0x12,R_MN10300_GOT16 = 0x13,R_MN10300_COPY = 0x14,R_MN10300_GLOB_DAT = 0x15,R_MN10300_JMP_SLOT = 0x16,R_MN10300_RELATIVE = 0x17,R_MN10300_NUM = 0x18,R_M32R_NONE = 0x0,R_M32R_16 = 0x1,R_M32R_32 = 0x2,R_M32R_24 = 0x3,R_M32R_10_PCREL = 0x4,R_M32R_18_PCREL = 0x5,R_M32R_26_PCREL = 0x6,R_M32R_HI16_ULO = 0x7,R_M32R_HI16_SLO = 0x8,R_M32R_LO16 = 0x9,R_M32R_SDA16 = 0xA,R_M32R_GNU_VTINHERIT = 0xB,R_M32R_GNU_VTENTRY = 0xC,R_M32R_16_RELA = 0x21,R_M32R_32_RELA = 0x22,R_M32R_24_RELA = 0x23,R_M32R_10_PCREL_RELA = 0x24,R_M32R_18_PCREL_RELA = 0x25,R_M32R_26_PCREL_RELA = 0x26,R_M32R_HI16_ULO_RELA = 0x27,R_M32R_HI16_SLO_RELA = 0x28,R_M32R_LO16_RELA = 0x29,R_M32R_SDA16_RELA = 0x2A,R_M32R_RELA_GNU_VTINHERIT = 0x2B,R_M32R_RELA_GNU_VTENTRY = 0x2C,R_M32R_REL32 = 0x2D,R_M32R_GOT24 = 0x30,R_M32R_26_PLTREL = 0x31,R_M32R_COPY = 0x32,R_M32R_GLOB_DAT = 0x33,R_M32R_JMP_SLOT = 0x34,R_M32R_RELATIVE = 0x35,R_M32R_GOTOFF = 0x36,R_M32R_GOTPC24 = 0x37,R_M32R_GOT16_HI_ULO = 0x38,R_M32R_GOT16_HI_SLO = 0x39,R_M32R_GOT16_LO = 0x3A,R_M32R_GOTPC_HI_ULO = 0x3B,R_M32R_GOTPC_HI_SLO = 0x3C,R_M32R_GOTPC_LO = 0x3D,R_M32R_GOTOFF_HI_ULO = 0x3E,R_M32R_GOTOFF_HI_SLO = 0x3F,R_M32R_GOTOFF_LO = 0x40,R_M32R_NUM = 0x100,};
enum MACRO_R_MIPS {R_MIPS_NONE = 0,R_MIPS_16 = 1,R_MIPS_32 = 2,R_MIPS_REL32 = 3,R_MIPS_26 = 4,R_MIPS_HI16 = 5,R_MIPS_LO16 = 6,R_MIPS_GPREL16 = 7,R_MIPS_LITERAL = 8,R_MIPS_GOT16 = 9,R_MIPS_PC16 = 10,R_MIPS_CALL16 = 11,R_MIPS_GPREL32 = 12,R_MIPS_SHIFT5 = 16,R_MIPS_SHIFT6 = 17,R_MIPS_64 = 18,R_MIPS_GOT_DISP = 19,R_MIPS_GOT_PAGE = 20,R_MIPS_GOT_OFST = 21,R_MIPS_GOT_HI16 = 22,R_MIPS_GOT_LO16 = 23,R_MIPS_SUB = 24,R_MIPS_INSERT_A = 25,R_MIPS_INSERT_B = 26,R_MIPS_DELETE = 27,R_MIPS_HIGHER = 28,R_MIPS_HIGHEST = 29,R_MIPS_CALL_HI16 = 30,R_MIPS_CALL_LO16 = 31,R_MIPS_SCN_DISP = 32,R_MIPS_REL16 = 33,R_MIPS_ADD_IMMEDIATE = 34,R_MIPS_PJUMP = 35,R_MIPS_RELGOT = 36,R_MIPS_JALR = 37,R_MIPS_TLS_DTPMOD32 = 38,R_MIPS_TLS_DTPREL32 = 39,R_MIPS_TLS_DTPMOD64 = 40,R_MIPS_TLS_DTPREL64 = 41,R_MIPS_TLS_GD = 42,R_MIPS_TLS_LDM = 43,R_MIPS_TLS_DTPREL_HI16 = 44,R_MIPS_TLS_DTPREL_LO16 = 45,R_MIPS_TLS_GOTTPREL = 46,R_MIPS_TLS_TPREL32 = 47,R_MIPS_TLS_TPREL64 = 48,R_MIPS_TLS_TPREL_HI16 = 49,R_MIPS_TLS_TPREL_LO16 = 50,R_MIPS_NUM = 51,};
enum MACRO_SAMPLE {SAMPLE_TYPE_BASIC = 0x10,SAMPLE_TYPE_GUS = 0x10,SAMPLE_TYPE_WAVEFRONT = 0x11,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SEARCH {SEARCH_HIGH = 0x30,SEARCH_EQUAL = 0x31,SEARCH_LOW = 0x32,};
enum MACRO_SEEK_6 {SEEK_6 = 0xB,};
enum MACRO_SETALL {SETALL = 17,};
enum MACRO_SG_LIB {SG_LIB_SYNTAX_ERROR = 1,SG_LIB_FILE_ERROR = 15,SG_LIB_CAT_CLEAN = 0,SG_LIB_CAT_NOT_READY = 2,SG_LIB_CAT_MEDIUM_HARD = 3,SG_LIB_CAT_ILLEGAL_REQ = 5,SG_LIB_CAT_UNIT_ATTENTION = 6,SG_LIB_CAT_INVALID_OP = 9,SG_LIB_CAT_NO_SENSE = 10,SG_LIB_CAT_RECOVERED = 11,SG_LIB_CAT_MALFORMED = 97,SG_LIB_CAT_SENSE = 98,SG_LIB_CAT_OTHER = 99,};
enum MACRO_SHF_IA {SHF_IA_64_SHORT = 0x10000000,SHF_IA_64_NORECOV = 0x20000000,};
enum MACRO_SHT_IA {SHT_IA_64_EXT = 1879048192,SHT_IA_64_UNWIND = 1879048193,};
enum MACRO_SIGNAL {SIGHUP = 1,SIGINT = 2,SIGQUIT = 3,SIGILL = 4,SIGTRAP = 5,SIGABRT = 6,SIGIOT = 6,SIGBUS = 7,SIGFPE = 8,SIGKILL = 9,SIGUSR1 = 10,SIGSEGV = 11,SIGUSR2 = 12,SIGPIPE = 13,SIGALRM = 14,SIGTERM = 15,SIGSTKFLT = 16,SIGCHLD = 17,SIGCONT = 18,SIGSTOP = 19,SIGTSTP = 20,SIGTTIN = 21,SIGTTOU = 22,SIGURG = 23,SIGXCPU = 24,SIGXFSZ = 25,SIGVTALRM = 26,SIGPROF = 27,SIGWINCH = 28,SIGIO = 29,SIGPWR = 30,SIGSYS = 31,SIGUNUSED = 31,_NSIG = 65,__SIGRTMIN = 32,__SIGRTMAX = 64,};
enum MACRO_SIZEOF {SIZEOF_INT = 4,SIZEOF_LONG = 4,SIZEOF_LONG_LONG = 8,SIZEOF_SHORT = 2,SIZEOF_UNSIGNED_INT = 4,SIZEOF_UNSIGNED_LONG = 4,SIZEOF_UNSIGNED_LONG_LONG = 8,SIZEOF_UNSIGNED_SHORT = 2,};
enum MACRO_SNDCTL {SNDCTL_SEQ_RESET = 20736,SNDCTL_SEQ_SYNC = 20737,SNDCTL_SEQ_PANIC = 20753,SNDCTL_TMR_START = 21506,SNDCTL_TMR_STOP = 21507,SNDCTL_TMR_CONTINUE = 21508,};
enum MACRO_SOL_IP {SOL_IP = 0,};
enum MACRO_SOURCE {_BSD_SOURCE = 1,_SVID_SOURCE = 1,_POSIX_SOURCE = 1,_POSIX_C_SOURCE = 200112,};
enum MACRO_SS_RQT {SS_RQT_TBL_V2 = 2,SS_RP_V1 = 1,SS_OPT_DONT_LIST = 1,SS_OPT_DONT_SUMMARIZE = 2,};
enum MACRO_STATUS {STATUS_MASK = 0x3E,};
enum MACRO_STORED {STORED_BLOCK = 0,};
enum MACRO_SUPPLY {SUPPLY_INTERVAL = 30,};
enum MACRO_T1_MAX {T1_MAX_MM_DESIGNS = 16,T1_MAX_MM_AXIS = 4,T1_MAX_MM_MAP_POINTS = 20,};
enum MACRO_TABDLY {TABDLY = 0x1800,};
enum MACRO_TANDEM {TANDEM = 0x1,CBREAK = 0x2,LCASE = 0x4,CRMOD = 0x10,RAW = 0x20,ODDP = 0x40,EVENP = 0x80,};
enum MACRO_TCFLSH {TCFLSH = 0x540B,};
enum MACRO_TCGETA {TCGETA = 0x5405,};
enum MACRO_TCGETS {TCGETS = 0x5401,};
enum MACRO_TCOOFF {TCOOFF = 0,TCOON = 1,TCIOFF = 2,};
enum MACRO_TCPOPT {TCPOPT_EOL = 0,TCPOPT_NOP = 1,TCPOPT_MAXSEG = 2,};
enum MACRO_TCSBRK {TCSBRK = 0x5409,};
enum MACRO_TCSETA {TCSETA = 0x5406,};
enum MACRO_TCSETS {TCSETS = 0x5402,};
enum MACRO_TCXONC {TCXONC = 0x540A,};
enum MACRO_TELCMD {TELCMD_FIRST = 236,TELCMD_LAST = 255,};
enum MACRO_TELOPT {TELOPT_BINARY = 0,TELOPT_ECHO = 1,TELOPT_RCP = 2,TELOPT_SGA = 3,TELOPT_NAMS = 4,TELOPT_STATUS = 5,TELOPT_TM = 6,TELOPT_RCTE = 7,TELOPT_NAOL = 8,TELOPT_NAOP = 9,TELOPT_NAOCRD = 10,TELOPT_NAOHTS = 11,TELOPT_NAOHTD = 12,TELOPT_NAOFFD = 13,TELOPT_NAOVTS = 14,TELOPT_NAOVTD = 15,TELOPT_NAOLFD = 16,TELOPT_XASCII = 17,TELOPT_LOGOUT = 18,TELOPT_BM = 19,TELOPT_DET = 20,TELOPT_SUPDUP = 21,TELOPT_SUPDUPOUTPUT = 22,TELOPT_SNDLOC = 23,TELOPT_TTYPE = 24,TELOPT_EOR = 25,TELOPT_TUID = 26,TELOPT_OUTMRK = 27,TELOPT_TTYLOC = 28,TELOPT_3270REGIME = 29,TELOPT_X3PAD = 30,TELOPT_NAWS = 31,TELOPT_TSPEED = 32,TELOPT_LFLOW = 33,TELOPT_LINEMODE = 34,TELOPT_XDISPLOC = 35,TELOPT_OLD_ENVIRON = 36,TELOPT_AUTHENTICATION = 37,TELOPT_ENCRYPT = 38,TELOPT_NEW_ENVIRON = 39,TELOPT_EXOPL = 255,};
enum MACRO_TGEXEC {TGEXEC = 0x8,};
enum MACRO_TGREAD {TGREAD = 0x20,};
enum MACRO_TMPSIZ {TMPSIZ = 20,};
enum MACRO_TM_MOD {TM_MOD_SEGMENT_SIZE = 16,TM_TYPE_SEGMENT_SIZE = 16,};
enum MACRO_TOEXEC {TOEXEC = 0x1,REGTYPE = 0x30,};
enum MACRO_TOREAD {TOREAD = 0x4,};
enum MACRO_TOSTOP {TOSTOP = 0x400000,};
enum MACRO_TR_RII {TR_RII = 0x80,TR_RCF_DIR_BIT = 0x80,TR_RCF_LEN_MASK = 0x1F00,TR_RCF_BROADCAST = 0x8000,TR_RCF_LIMITED_BROADCAST = 0xC000,TR_RCF_FRAME2K = 0x20,TR_RCF_BROADCAST_MASK = 0xC000,TR_MAXRIFLEN = 0x12,};
enum MACRO_TUEXEC {TUEXEC = 0x40,};
enum MACRO_TUREAD {TUREAD = 0x100,};
enum MACRO_UNIMAP {GIO_UNIMAP = 0x4B66,PIO_UNIMAP = 0x4B67,};
enum MACRO_UPAGES {UPAGES = 1,};
enum MACRO_UPDATE {UPDATE_BLOCK = 0x3D,};
enum MACRO_VERIFY {VERIFY = 0x2F,};
enum MACRO_VLNEXT {VLNEXT = 15,VEOL2 = 16,};
enum MACRO_VOLUME {VOLUME_OVERFLOW = 0xD,};
enum MACRO_VTIMES {VTIMES_UNITS_PER_SECOND = 60,};
enum MACRO_WINDOW {TCPOPT_WINDOW = 3,TCPOLEN_WINDOW = 3,};
enum MACRO_XETrap {XETrap_Reset = 0,XETrap_GetAvailable = 1,XETrap_Config = 2,XETrap_StartTrap = 3,XETrap_StopTrap = 4,XETrap_GetCurrent = 5,XETrap_GetStatistics = 6,XETrap_SimulateXEvent = 7,XETrap_GetVersion = 8,XETrap_GetLastInpTime = 9,};
enum MACRO_XF86VM {XF86VM_READ_PERMISSION = 1,XF86VM_WRITE_PERMISSION = 2,};
enum MACRO_XF86XK {XF86XK_ModeLock = 0x1008FF01,XF86XK_MonBrightnessUp = 0x1008FF02,XF86XK_MonBrightnessDown = 0x1008FF03,XF86XK_KbdLightOnOff = 0x1008FF04,XF86XK_KbdBrightnessUp = 0x1008FF05,XF86XK_KbdBrightnessDown = 0x1008FF06,XF86XK_Standby = 0x1008FF10,XF86XK_AudioLowerVolume = 0x1008FF11,XF86XK_AudioMute = 0x1008FF12,XF86XK_AudioRaiseVolume = 0x1008FF13,XF86XK_AudioPlay = 0x1008FF14,XF86XK_AudioStop = 0x1008FF15,XF86XK_AudioPrev = 0x1008FF16,XF86XK_AudioNext = 0x1008FF17,XF86XK_HomePage = 0x1008FF18,XF86XK_Mail = 0x1008FF19,XF86XK_Start = 0x1008FF1A,XF86XK_Search = 0x1008FF1B,XF86XK_AudioRecord = 0x1008FF1C,XF86XK_Calculator = 0x1008FF1D,XF86XK_Memo = 0x1008FF1E,XF86XK_ToDoList = 0x1008FF1F,XF86XK_Calendar = 0x1008FF20,XF86XK_PowerDown = 0x1008FF21,XF86XK_ContrastAdjust = 0x1008FF22,XF86XK_RockerUp = 0x1008FF23,XF86XK_RockerDown = 0x1008FF24,XF86XK_RockerEnter = 0x1008FF25,XF86XK_Back = 0x1008FF26,XF86XK_Forward = 0x1008FF27,XF86XK_Stop = 0x1008FF28,XF86XK_Refresh = 0x1008FF29,XF86XK_PowerOff = 0x1008FF2A,XF86XK_WakeUp = 0x1008FF2B,XF86XK_Eject = 0x1008FF2C,XF86XK_ScreenSaver = 0x1008FF2D,XF86XK_WWW = 0x1008FF2E,XF86XK_Sleep = 0x1008FF2F,XF86XK_Favorites = 0x1008FF30,XF86XK_AudioPause = 0x1008FF31,XF86XK_AudioMedia = 0x1008FF32,XF86XK_MyComputer = 0x1008FF33,XF86XK_VendorHome = 0x1008FF34,XF86XK_LightBulb = 0x1008FF35,XF86XK_Shop = 0x1008FF36,XF86XK_History = 0x1008FF37,XF86XK_OpenURL = 0x1008FF38,XF86XK_AddFavorite = 0x1008FF39,XF86XK_HotLinks = 0x1008FF3A,XF86XK_BrightnessAdjust = 0x1008FF3B,XF86XK_Finance = 0x1008FF3C,XF86XK_Community = 0x1008FF3D,XF86XK_AudioRewind = 0x1008FF3E,XF86XK_XF86BackForward = 0x1008FF3F,XF86XK_Launch0 = 0x1008FF40,XF86XK_Launch1 = 0x1008FF41,XF86XK_Launch2 = 0x1008FF42,XF86XK_Launch3 = 0x1008FF43,XF86XK_Launch4 = 0x1008FF44,XF86XK_Launch5 = 0x1008FF45,XF86XK_Launch6 = 0x1008FF46,XF86XK_Launch7 = 0x1008FF47,XF86XK_Launch8 = 0x1008FF48,XF86XK_Launch9 = 0x1008FF49,XF86XK_LaunchA = 0x1008FF4A,XF86XK_LaunchB = 0x1008FF4B,XF86XK_LaunchC = 0x1008FF4C,XF86XK_LaunchD = 0x1008FF4D,XF86XK_LaunchE = 0x1008FF4E,XF86XK_LaunchF = 0x1008FF4F,XF86XK_ApplicationLeft = 0x1008FF50,XF86XK_ApplicationRight = 0x1008FF51,XF86XK_Book = 0x1008FF52,XF86XK_CD = 0x1008FF53,XF86XK_Calculater = 0x1008FF54,XF86XK_Clear = 0x1008FF55,XF86XK_Close = 0x1008FF56,XF86XK_Copy = 0x1008FF57,XF86XK_Cut = 0x1008FF58,XF86XK_Display = 0x1008FF59,XF86XK_DOS = 0x1008FF5A,XF86XK_Documents = 0x1008FF5B,XF86XK_Excel = 0x1008FF5C,XF86XK_Explorer = 0x1008FF5D,XF86XK_Game = 0x1008FF5E,XF86XK_Go = 0x1008FF5F,XF86XK_iTouch = 0x1008FF60,XF86XK_LogOff = 0x1008FF61,XF86XK_Market = 0x1008FF62,XF86XK_Meeting = 0x1008FF63,XF86XK_MenuKB = 0x1008FF65,XF86XK_MenuPB = 0x1008FF66,XF86XK_MySites = 0x1008FF67,XF86XK_New = 0x1008FF68,XF86XK_News = 0x1008FF69,XF86XK_OfficeHome = 0x1008FF6A,XF86XK_Open = 0x1008FF6B,XF86XK_Option = 0x1008FF6C,XF86XK_Paste = 0x1008FF6D,XF86XK_Phone = 0x1008FF6E,XF86XK_Q = 0x1008FF70,XF86XK_Reply = 0x1008FF72,XF86XK_Reload = 0x1008FF73,XF86XK_RotateWindows = 0x1008FF74,XF86XK_RotationPB = 0x1008FF75,XF86XK_RotationKB = 0x1008FF76,XF86XK_Save = 0x1008FF77,XF86XK_ScrollUp = 0x1008FF78,XF86XK_ScrollDown = 0x1008FF79,XF86XK_ScrollClick = 0x1008FF7A,XF86XK_Send = 0x1008FF7B,XF86XK_Spell = 0x1008FF7C,XF86XK_SplitScreen = 0x1008FF7D,XF86XK_Support = 0x1008FF7E,XF86XK_TaskPane = 0x1008FF7F,XF86XK_Terminal = 0x1008FF80,XF86XK_Tools = 0x1008FF81,XF86XK_Travel = 0x1008FF82,XF86XK_UserPB = 0x1008FF84,XF86XK_User1KB = 0x1008FF85,XF86XK_User2KB = 0x1008FF86,XF86XK_Video = 0x1008FF87,XF86XK_WheelButton = 0x1008FF88,XF86XK_Word = 0x1008FF89,XF86XK_Xfer = 0x1008FF8A,XF86XK_ZoomIn = 0x1008FF8B,XF86XK_ZoomOut = 0x1008FF8C,XF86XK_Away = 0x1008FF8D,XF86XK_Messenger = 0x1008FF8E,XF86XK_WebCam = 0x1008FF8F,XF86XK_MailForward = 0x1008FF90,XF86XK_Pictures = 0x1008FF91,XF86XK_Music = 0x1008FF92,XF86XK_Switch_VT_1 = 0x1008FE01,XF86XK_Switch_VT_2 = 0x1008FE02,XF86XK_Switch_VT_3 = 0x1008FE03,XF86XK_Switch_VT_4 = 0x1008FE04,XF86XK_Switch_VT_5 = 0x1008FE05,XF86XK_Switch_VT_6 = 0x1008FE06,XF86XK_Switch_VT_7 = 0x1008FE07,XF86XK_Switch_VT_8 = 0x1008FE08,XF86XK_Switch_VT_9 = 0x1008FE09,XF86XK_Switch_VT_10 = 0x1008FE0A,XF86XK_Switch_VT_11 = 0x1008FE0B,XF86XK_Switch_VT_12 = 0x1008FE0C,XF86XK_Ungrab = 0x1008FE20,XF86XK_ClearGrab = 0x1008FE21,XF86XK_Next_VMode = 0x1008FE22,XF86XK_Prev_VMode = 0x1008FE23,};
enum MACRO_XFIXES {XFIXES_MAJOR = 4,XFIXES_MINOR = 0,};
enum MACRO_XInput {XInput_Initial_Release = 1,XInput_Add_XDeviceBell = 2,XInput_Add_XSetDeviceValuators = 3,XInput_Add_XChangeDeviceControl = 4,};
enum MACRO_XPAuxS {XPAuxS = 12,};
enum MACRO_X_BYTE {X_BYTE_ORDER = 1234,X_BIG_ENDIAN = 4321,X_LITTLE_ENDIAN = 1234,};
enum MACRO_X_HAVE {X_HAVE_UTF8_STRING = 1,};
enum MACRO_XawDEL {XawDEL = 0x7F,};
enum MACRO_XawESC {XawESC = 0x1B,};
enum MACRO_XawTAB {XawTAB = 0x9,};
enum MACRO_XkbAXN {XkbAXN_SKPress = 0,XkbAXN_SKAccept = 1,XkbAXN_SKReject = 2,XkbAXN_SKRelease = 3,XkbAXN_BKAccept = 4,XkbAXN_BKReject = 5,XkbAXN_AXKWarning = 6,XkbAXN_SKPressMask = 1,XkbAXN_SKAcceptMask = 2,XkbAXN_SKRejectMask = 4,XkbAXN_SKReleaseMask = 8,XkbAXN_BKAcceptMask = 16,XkbAXN_BKRejectMask = 32,XkbAXN_AXKWarningMask = 64,};
enum MACRO_XkbErr {XkbErr_BadDevice = 0xFF,XkbErr_BadClass = 0xFE,XkbErr_BadId = 0xFD,};
enum MACRO_XkbGBN {XkbGBN_TypesMask = 1,XkbGBN_CompatMapMask = 2,XkbGBN_ClientSymbolsMask = 4,XkbGBN_ServerSymbolsMask = 8,XkbGBN_SymbolsMask = 12,XkbGBN_IndicatorMapMask = 16,XkbGBN_KeyNamesMask = 32,XkbGBN_GeometryMask = 64,XkbGBN_OtherNamesMask = 128,XkbGBN_AllComponentsMask = 255,};
enum MACRO_XkbNKN {XkbNKN_KeycodesMask = 1,XkbNKN_GeometryMask = 2,XkbNKN_DeviceIDMask = 4,};
enum MACRO_XkbPCF {XkbPCF_DetectableAutoRepeatMask = 1,XkbPCF_GrabsUseXKBStateMask = 2,XkbPCF_AutoResetControlsMask = 4,XkbPCF_LookupStateWhenGrabbed = 8,XkbPCF_SendEventUsesXKBState = 16,XkbPCF_AllFlagsMask = 31,};
enum MACRO_XvNone {XvNone = 0,};
enum MACRO_YPBIND {YPBIND_ERR_ERR = 1,YPBIND_ERR_NOSERV = 2,YPBIND_ERR_RESC = 3,};
enum MACRO_YPPROC {YPPROC_NULL = 0,YPPROC_DOMAIN = 1,YPPROC_DOMAIN_NONACK = 2,YPPROC_MATCH = 3,YPPROC_FIRST = 4,YPPROC_NEXT = 5,YPPROC_XFR = 6,YPPROC_CLEAR = 7,YPPROC_ALL = 8,YPPROC_MASTER = 9,YPPROC_ORDER = 10,YPPROC_MAPLIST = 11,};
enum MACRO_YPPROG {YPPROG = 100004,};
enum MACRO_YPPUSH {YPPUSH_XFRRESPPROG = 0x40000000,YPPUSH_XFRRESPVERS = 0x1,};
enum MACRO_YPVERS {YPVERS = 2,};
enum MACRO__CTYPE {_CTYPE_H = 1,_GETOPT_H = 1,};
enum MACRO__DLFCN {_DLFCN_H = 1,};
enum MACRO__ERRNO {_ERRNO_H = 1,};
enum MACRO__EVENT {_EVENT_LOG_DEBUG = 0,_EVENT_LOG_MSG = 1,_EVENT_LOG_WARN = 2,_EVENT_LOG_ERR = 3,};
enum MACRO__FSTAB {_FSTAB_H = 1,_FTS_H = 1,};
enum MACRO__GCONV {_GCONV_H = 1,};
enum MACRO__ICONV {_ICONV_H = 1,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,BUFSIZ = 8192,};
enum MACRO__LFS64 {_LFS64_STDIO = 1,};
enum MACRO__LINUX {_LINUX_QUOTA_VERSION = 2,};
enum MACRO__MKNOD {_MKNOD_VER_LINUX = 1,_MKNOD_VER_SVR4 = 2,_MKNOD_VER = 1,};
enum MACRO__NETDB {_NETDB_H = 1,_NETINET_IN_H = 1,};
enum MACRO__POSIX {_POSIX_AIO_LISTIO_MAX = 2,_POSIX_AIO_MAX = 1,_POSIX_ARG_MAX = 4096,_POSIX_CHILD_MAX = 25,_POSIX_DELAYTIMER_MAX = 32,_POSIX_HOST_NAME_MAX = 255,_POSIX_LINK_MAX = 8,_POSIX_LOGIN_NAME_MAX = 9,_POSIX_MAX_CANON = 255,_POSIX_MAX_INPUT = 255,_POSIX_MQ_OPEN_MAX = 8,_POSIX_MQ_PRIO_MAX = 32,_POSIX_NAME_MAX = 14,_POSIX_NGROUPS_MAX = 8,_POSIX_OPEN_MAX = 20,_POSIX_FD_SETSIZE = 20,_POSIX_PATH_MAX = 256,_POSIX_PIPE_BUF = 512,_POSIX_RE_DUP_MAX = 255,_POSIX_RTSIG_MAX = 8,_POSIX_SEM_NSEMS_MAX = 256,_POSIX_SEM_VALUE_MAX = 32767,_POSIX_SIGQUEUE_MAX = 32,_POSIX_SSIZE_MAX = 32767,_POSIX_STREAM_MAX = 8,_POSIX_SYMLINK_MAX = 255,_POSIX_SYMLOOP_MAX = 8,_POSIX_TIMER_MAX = 32,_POSIX_TTY_NAME_MAX = 9,_POSIX_TZNAME_MAX = 6,_POSIX_QLIMIT = 1,_POSIX_HIWAT = 512,_POSIX_UIO_MAXIOV = 16,_POSIX_CLOCKRES_MIN = 20000000,};
enum MACRO__REGEX {_REGEX_H = 1,};
enum MACRO__SPAWN {_SPAWN_H = 1,};
enum MACRO__STDIO {_STDIO_H = 1,};
enum MACRO__WCHAR {_WCHAR_H = 1,};
enum MACRO__XOPEN {_XOPEN_VERSION = 4,_XOPEN_XCU_VERSION = 4,_XOPEN_XPG2 = 1,_XOPEN_XPG3 = 1,_XOPEN_XPG4 = 1,_XOPEN_UNIX = 1,_XOPEN_CRYPT = 1,_XOPEN_ENH_I18N = 1,_XOPEN_LEGACY = 1,};
enum MACRO___BIND {__BIND = 19950621,};
enum MACRO___GLOB {__GLOB_FLAGS = 32511,};
enum MACRO___STDC {__STDC_IEC_559__ = 1,__STDC_IEC_559_COMPLEX__ = 1,__STDC_ISO_10646__ = 200009,};
enum MACRO___bool {__bool_true_false_are_defined = 1,};
enum MACRO___have {__have_sigval_t = 1,__have_siginfo_t = 1,};
enum MACRO___ldiv {__ldiv_t_defined = 1,};
enum MACRO_fsTrue {fsTrue = 1,};
enum MACRO_xFalse {xFalse = 0,ELFlagFocus = 1,ELFlagSameScreen = 2,};
typedef int Menu_Options;
typedef short ModifierMask;
typedef struct _MultiSinkRec MultiSinkRec;
typedef struct _MultiSrcPart MultiSrcPart;
typedef unsigned char NCURSES_BOOL;
typedef struct PS_DesignMap_ *PS_DesignMap;
typedef struct _PannerRec *PannerWidget;
typedef struct _ParamInfoRec ParamInfoRec;
typedef struct _E84BFE5D58BE41C003DC505783B004D5 PortholePart;
typedef struct _RectObjClassRec *RectObjClass;
typedef struct _19819260117A2122793EF6A7F838A8D8 *RectanglePtr;
typedef struct _19819260117A2122793EF6A7F838A8D8 RectangleRec;
typedef struct _0BD8AAF00E5AD5D601EEE168306C4453 RepeaterPart;
typedef struct _2E0E2C12F04118C9E52BAE749EE378FF ScreenFormat;
typedef struct _ScrollbarRec ScrollbarRec;
typedef struct _SimpleRec *SimpleWidget;
typedef struct _C4DC01CDDDF5A53B120EAA56060806A9 SmcCallbacks;
typedef struct _SmeBSBRec *SmeBSBObject;
typedef struct _SmeClassPart SmeClassPart;
typedef struct _SmeThreeDRec SmeThreeDRec;
typedef struct _2B2D277CB94E3786AC978CB982FDCC47 SmsCallbacks;
typedef struct _4D6CF402BE6604EF49AB6A1F1F900B99 *Substitution;
typedef struct _TMBranchHeadRec *TMBranchHead;
typedef struct _TMConvertRec TMConvertRec;
typedef struct _TMKeyContextRec *TMKeyContext;
typedef struct _82EB719490A0E9F110B2F30DF6A71FC1 TemplatePart;
typedef struct _TextClassRec TextClassRec;
typedef struct _AA339AC83CE9D84A9C74DA91D78C2A72 TextSinkPart;
typedef struct _ThreeDRec *ThreeDWidget;
typedef struct _EA67C4467E5D392AEC3890F142F1A94F TipClassPart;
typedef struct _ToggleRec *ToggleWidget;
typedef struct _TreeClassRec TreeClassRec;
typedef struct _ViewportPart ViewportPart;
typedef struct WBXMLEncoder_s WBXMLEncoder;
enum WBXMLError_e {WBXML_OK = 0x0,WBXML_NOT_ENCODED = 0x1,WBXML_ERROR_ATTR_TABLE_UNDEFINED = 0x2,WBXML_ERROR_BAD_DATETIME = 0x3,WBXML_ERROR_BAD_PARAMETER = 0x4,WBXML_ERROR_INTERNAL = 0x5,WBXML_ERROR_LANG_TABLE_UNDEFINED = 0x6,WBXML_ERROR_NOT_ENOUGH_MEMORY = 0x7,WBXML_ERROR_NOT_IMPLEMENTED = 0x8,WBXML_ERROR_TAG_TABLE_UNDEFINED = 0x9,WBXML_ERROR_B64_ENC = 0xA,WBXML_ERROR_ATTR_VALUE_TABLE_UNDEFINED = 0xB,WBXML_ERROR_BAD_LITERAL_INDEX = 0xC,WBXML_ERROR_BAD_NULL_TERMINATED_STRING_IN_STRING_TABLE = 0xD,WBXML_ERROR_BAD_OPAQUE_LENGTH = 0xE,WBXML_ERROR_EMPTY_WBXML = 0xF,WBXML_ERROR_END_OF_BUFFER = 0x10,WBXML_ERROR_ENTITY_CODE_OVERFLOW = 0x11,WBXML_ERROR_EXT_VALUE_TABLE_UNDEFINED = 0x12,WBXML_ERROR_INVALID_STRTBL_INDEX = 0x13,WBXML_ERROR_LITERAL_NOT_NULL_TERMINATED_IN_STRING_TABLE = 0x14,WBXML_ERROR_NOT_NULL_TERMINATED_INLINE_STRING = 0x15,WBXML_ERROR_NULL_PARSER = 0x16,WBXML_ERROR_NULL_STRING_TABLE = 0x17,WBXML_ERROR_STRING_EXPECTED = 0x18,WBXML_ERROR_STRTBL_LENGTH = 0x19,WBXML_ERROR_UNKNOWN_ATTR = 0x1A,WBXML_ERROR_UNKNOWN_ATTR_VALUE = 0x1B,WBXML_ERROR_UNKNOWN_EXTENSION_TOKEN = 0x1C,WBXML_ERROR_UNKNOWN_EXTENSION_VALUE = 0x1D,WBXML_ERROR_UNKNOWN_PUBLIC_ID = 0x1E,WBXML_ERROR_UNKNOWN_TAG = 0x1F,WBXML_ERROR_UNVALID_MBUINT32 = 0x20,WBXML_ERROR_ENCODER_APPEND_DATA = 0x21,WBXML_ERROR_STRTBL_DISABLED = 0x22,WBXML_ERROR_UNKNOWN_XML_LANGUAGE = 0x23,WBXML_ERROR_XML_NODE_NOT_ALLOWED = 0x24,WBXML_ERROR_XML_NULL_ATTR_NAME = 0x25,WBXML_ERROR_XML_PARSING_FAILED = 0x26,WBXML_ERROR_NO_XMLPARSER = 0x27,};
typedef struct _XAnyClassinfo *XAnyClassPtr;
typedef struct _XAxisInfo *XAxisInfoPtr;
typedef struct _C3DFAA9936722914B9C7944393FC310D XButtonEvent;
typedef struct _2B57C510C3935D29053A101D8FCA0A7C XButtonState;
typedef struct _7BA34DEC42B2BEB7846068E691B46F3F XDGAKeyEvent;
typedef struct _CF91FEEC29390B2E3A7754517937B585 XDeviceState;
typedef union _D8231012D0728EC3472C30FA3109CEFA XEDataObject;
typedef struct _518F0DEC427BFC57A6F8B4A0E681A1CE XETrapHeader;
typedef struct _2B0C7BC237EA785081DC8BB3BF49058B XETrapRepHdr;
typedef struct _8CF502427BECF149369724E71469A9A4 XExposeEvent;
typedef struct _4FFA9527088137D66D8D180D61C68358 XHostAddress;
typedef struct _8848BD856EE61894A9007CEF6791E684 XKeymapEvent;
typedef struct _64992689D90D12C17DC9EE3D4AA6EC53 XML_Encoding;
typedef struct xmesa_context *XMesaContext;
typedef struct _EF14843253DB275F4E3937D8BFD0A759 XMotionEvent;
typedef unsigned char XPAttributes;
typedef char *(*XPHinterProc)(void);
typedef struct _765B65D42894188272D96826C864A075 XPPrintEvent;
typedef struct _E55328F014D59CB8D8C2D56824FBB3BE XPPrinterRec;
typedef struct _XPointDouble XPointDouble;
typedef struct _4FA67FD0121DE61C8BBE74D0ECEE2878 XRecordRange;
typedef struct _FE40CA45A22CE2D2440EEC72EA923B6E XRecordState;
typedef struct _BF04F385087D384300B2A0AB26B803BF XRenderColor;
typedef struct _F172F94299C982F5FEAF6C4E72460A72 XSyncTrigger;
typedef struct _AF5FB4080A51E8992C2DCC85F9B13FAA XTestKeyInfo;
typedef struct _236D87147CED486A0AF93ED3996AECBD XawTextBlock;
typedef struct _XcursorImage XcursorImage;
typedef struct _1BE3EF8FAEFD838E59DA61E46CB3832E XdbeSwapInfo;
typedef struct _XftGlyphSpec XftGlyphSpec;
typedef struct _XkbAnyAction XkbAnyAction;
typedef struct _XkbBounds *XkbBoundsPtr;
typedef struct _XkbBounds XkbBoundsRec;
typedef union _XkbDoodad *XkbDoodadPtr;
typedef union _XkbDoodad XkbDoodadRec;
typedef struct _XkbISOAction XkbISOAction;
typedef struct _XkbModAction XkbModAction;
typedef struct _XkbPtrAction XkbPtrAction;
typedef struct _XkbSymMapRec *XkbSymMapPtr;
typedef struct _XkbSymMapRec XkbSymMapRec;
typedef struct _EDFC536A603B7BCAB77AE790F95C9CC5 XpmExtension;
typedef int *XrmQuarkList;
typedef struct _XtActionsRec *XtActionList;
typedef struct _XtActionsRec XtActionsRec;
typedef struct _XtAppStruct *XtAppContext;
typedef struct _XtEventRec *XtEventTable;
typedef unsigned int XtIntervalId;
typedef struct _XtPerDisplayStruct *XtPerDisplay;
typedef unsigned int XtWorkProcId;
typedef struct _FSExtent _FSExtension;
struct _FSXCharInfo {short left;short right;short width;short ascent;short descent;unsigned short attributes;};
enum _FcMatchKind {FcMatchPattern = 0x0,FcMatchFont = 0x1,FcMatchScan = 0x2,};
struct _FcObjectSet {int nobject;int sobject; char **objects;};
struct _FontRenders {int number;struct _FontRenders___FontRenderersElement *renderers;};
typedef struct _9AD92D66A9B7FE2D16898D79F4A40DAD _IceProtocol;
struct _XIndexValue {unsigned int pixel;unsigned short red;unsigned short green;unsigned short blue;unsigned short alpha;};
struct _XawTextUndo;
struct _XftFontInfo;
struct _XkbBehavior {unsigned char type;unsigned char data;};
struct _XkbProperty {char *name;char *value;};
struct _XkbRF_Group {int number;char *name;char *words;};
struct _XkbStateRec {unsigned char group;unsigned char locked_group;unsigned short base_group;unsigned short latched_group;unsigned char mods;unsigned char base_mods;unsigned char latched_mods;unsigned char locked_mods;unsigned char compat_state;unsigned char grab_mods;unsigned char compat_grab_mods;unsigned char lookup_mods;unsigned char compat_lookup_mods;unsigned short ptr_buttons;};
struct _XvMCQMatrix {int load_intra_quantiser_matrix;int load_non_intra_quantiser_matrix;int load_chroma_intra_quantiser_matrix;int load_chroma_non_intra_quantiser_matrix;unsigned char intra_quantiser_matrix[64];unsigned char non_intra_quantiser_matrix[64];unsigned char chroma_intra_quantiser_matrix[64];unsigned char chroma_non_intra_quantiser_matrix[64];};
typedef unsigned int __fsblkcnt_t;
typedef unsigned int __fsfilcnt_t;
typedef int (*__ftw_func_t)( char *filename,  struct stat *status, int flag);
enum __rusage_who {RUSAGE_SELF = 0x0,RUSAGE_CHILDREN = 0xFFFFFFFF,};
typedef int __t_scalar_t;
typedef unsigned int __useconds_t;
struct _ns_flagdata {int mask;int shift;};
typedef unsigned int active_reg_t;
typedef struct _2EA2B750C06C2344CAE427A9270EC33C ax25_address;
typedef struct BDFSTAT bdfFileState;
typedef unsigned long long bfd_uint64_t;
struct buffmem_desc {unsigned int *buffer;int size;};
struct console_font {unsigned int width;unsigned int height;unsigned int charcount;unsigned char *data;};
struct drand48_data {unsigned short __x[3];unsigned short __old_x[3];unsigned short __c;unsigned short __init;unsigned long long __a;};
typedef struct dyn_string *dyn_string_t;
struct elf_prpsinfo {char pr_state;char pr_sname;char pr_zomb;char pr_nice;unsigned int pr_flag;unsigned short pr_uid;unsigned short pr_gid;int pr_pid;int pr_ppid;int pr_pgrp;int pr_sid;char pr_fname[16];char pr_psargs[80];};
typedef union epoll_data epoll_data_t;
typedef void (*event_log_cb)(int severity,  char *msg);
typedef int fibheapkey_t;
typedef struct _4D0B2EE74E9FAFCBF56BDC59F25A7FDB fr_proto_pvc;
typedef struct _FCE16AE268B388C13B857015D638E9ED fsAllocError;
typedef struct _F059149F541946541B5DFE9F6EB20E96 fsPropOffset;
typedef struct _050D667D91EB5E6EF621582721732C5C fsRangeError;
typedef struct _048EDDC221AC6C2316AA6C5DA748547D fsResolution;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef int (*int_function)();
typedef signed char int_least8_t;
typedef int jas_clrspc_t;
typedef struct _F8FAE457CD964A2B19190AE0569FFFEA jas_cmprof_t;
typedef double jas_cmreal_t;
typedef struct _6C3EB73958973EBDA54A91099DFB92F6 jas_icchdr_t;
typedef struct _28AFE566BB5B37E66F132F7FE54BDDCF jas_icctxt_t;
typedef struct _16B3D492BF50C8DE24893282FFCDBBF0 jas_iccxyz_t;
typedef struct _7F0AD33161C1C735745BF21ED1DBE93E jas_matrix_t;
typedef struct _82CCEA45697413307268EF955876A1D9 jas_stream_t;
typedef struct _5CF04B6421DF2D20D24DDD28F16D3C2A lt_dlsymlist;
typedef void *lt_user_data;
typedef unsigned char mixer_record[128];
struct mt_tape_info {int t_type;char *t_name;};
struct mtconfiginfo {int mt_type;int ifc_type;unsigned short irqnr;unsigned short dmanr;unsigned short port;unsigned int debug;unsigned int have_dens : 1;unsigned int have_bsf : 1;unsigned int have_fsr : 1;unsigned int have_bsr : 1;unsigned int have_eod : 1;unsigned int have_seek : 1;unsigned int have_tell : 1;unsigned int have_ras1 : 1;unsigned int have_ras2 : 1;unsigned int have_ras3 : 1;unsigned int have_qfa : 1;unsigned int pad1 : 5;char reserved[10];};
struct parport_list {int portc;struct parport **portv;};
typedef struct po_filepos *po_filepos_t;
typedef struct po_message *po_message_t;
typedef unsigned int reg_syntax_t;
typedef struct _EDB85F966E4A638CA0FF7E75C4B94ACF rose_address;
struct st_instrinfo {char MIDInote;char MIDIlow;char MIDIhi;char loopmode;signed char nloops;};
struct stream_descr {char *end;char *current;char *value;};
enum tcp_ca_state {TCP_CA_Open = 0x0,TCP_CA_Disorder = 0x1,TCP_CA_CWR = 0x2,TCP_CA_Recovery = 0x3,TCP_CA_Loss = 0x4,};
typedef struct td_thrinfo td_thrinfo_t;
typedef struct _96852D299A3BC18B35313C48EFA48634 te1_settings;
typedef struct ternary_node_def ternary_node;
typedef struct ternary_node_def *ternary_tree;
typedef unsigned char uint_fast8_t;
typedef struct _xAnyClassinfo *xAnyClassPtr;
typedef struct _xAxisInfo *xAxisInfoPtr;
typedef struct _51727A972DDFA83BAA2CC416714856EF xButtonState;
typedef struct _0D0114D795552F54A79F202DB3226B55 xChangeGCReq;
typedef struct _3B81704CAFF80915670BCDC93E5E5502 xCopyAreaReq;
typedef struct _0340F183E3D57BA98D278D6E8F4BBAEC xCreateGCReq;
typedef struct _625DD72E42D2E4120693244DFAAD3348 xDPMSInfoReq;
typedef struct _DB64A8459715AF3CEFE23597C08B5967 xDeviceState;
typedef struct _4D2E0013E954DA651F15636ABC395F09 xFeedbackCtl;
typedef struct _FillPolyReq xFillPolyReq;
typedef struct GLXWaitX xGLXWaitXReq;
typedef struct _4DCAC2088B3F168EF4BFBCEA383ECFD2 xGetImageReq;
typedef struct _34681C3D6FB58953006C9844DC50C14F xKeymapEvent;
typedef struct _6136D91980F3ED417B16959F6289782F xLbxCharInfo;
typedef struct _LbxDelta xLbxDeltaReq;
typedef struct _0187150EB0144696EE5998F276804071 xLbxDiffItem;
typedef struct _20372CCC7895932BACE6325FD7981C66 xLbxFontInfo;
typedef struct _431497C136870E9873948068EF0F03D8 xOpenFontReq;
typedef struct _4C0A166D0FCB5B830093FB9F7D7DFC34 xPolyTextReq;
typedef struct _PutImageReq xPutImageReq;
typedef struct _F0B6F56018B35AE6D958AA393C56DA44 xRecordRange;
typedef struct _5EC6E86656B6684A0C8370E4CB53DCE1 xRenderColor;
typedef struct _A23F2D0A331F720D631E2B6171CC3ECA xResourceReq;
typedef struct _BE873DF30A0F36F7B74D63F54E76D60A xScreenSizes;
typedef struct _XDGASync xXDGASyncReq;
typedef struct _0C717C2A96F31E63806E7AEC00F2A098 xXTrapGetReq;
typedef struct _XagQuery xXagQueryReq;
typedef struct _XevieEnd xXevieEndReq;
enum xcb_family_t {XCB_FAMILY_INTERNET = 0x0,XCB_FAMILY_DECNET = 0x1,XCB_FAMILY_CHAOS = 0x2,XCB_FAMILY_SERVER_INTERPRETED = 0x5,XCB_FAMILY_INTERNET_6 = 0x6,};
enum xcb_glx_gc_t {XCB_GLX_GC_GL_CURRENT_BIT = 0x1,XCB_GLX_GC_GL_POINT_BIT = 0x2,XCB_GLX_GC_GL_LINE_BIT = 0x4,XCB_GLX_GC_GL_POLYGON_BIT = 0x8,XCB_GLX_GC_GL_POLYGON_STIPPLE_BIT = 0x10,XCB_GLX_GC_GL_PIXEL_MODE_BIT = 0x20,XCB_GLX_GC_GL_LIGHTING_BIT = 0x40,XCB_GLX_GC_GL_FOG_BIT = 0x80,XCB_GLX_GC_GL_DEPTH_BUFFER_BIT = 0x100,XCB_GLX_GC_GL_ACCUM_BUFFER_BIT = 0x200,XCB_GLX_GC_GL_STENCIL_BUFFER_BIT = 0x400,XCB_GLX_GC_GL_VIEWPORT_BIT = 0x800,XCB_GLX_GC_GL_TRANSFORM_BIT = 0x1000,XCB_GLX_GC_GL_ENABLE_BIT = 0x2000,XCB_GLX_GC_GL_COLOR_BUFFER_BIT = 0x4000,XCB_GLX_GC_GL_HINT_BIT = 0x8000,XCB_GLX_GC_GL_EVAL_BIT = 0x10000,XCB_GLX_GC_GL_LIST_BIT = 0x20000,XCB_GLX_GC_GL_TEXTURE_BIT = 0x40000,XCB_GLX_GC_GL_SCISSOR_BIT = 0x80000,XCB_GLX_GC_GL_ALL_ATTRIB_BITS = 0xFFFFFF,};
enum xcb_glx_rm_t {XCB_GLX_RM_GL_RENDER = 0x1C00,XCB_GLX_RM_GL_FEEDBACK = 0x1C01,XCB_GLX_RM_GL_SELECT = 0x1C02,};
enum xcb_motion_t {XCB_MOTION_NORMAL = 0x0,XCB_MOTION_HINT = 0x1,};
typedef struct _xkbGetMap xkbGetMapReq;
typedef struct _xkbMapNotify xkbMapNotify;
typedef struct _xkbSetMap xkbSetMapReq;
typedef struct _xkmPointDesc xkmPointDesc;
typedef struct _xkmShapeDesc xkmShapeDesc;
typedef struct amesa_buffer *AMesaBuffer;
typedef struct amesa_visual *AMesaVisual;
typedef struct _AsciiSrcRec AsciiSrcRec;
typedef struct _AsciiRec *AsciiWidget;
typedef struct _BoxClassRec BoxClassRec;
typedef struct _CharInfo *CharInfoPtr;
typedef struct _CharInfo CharInfoRec;
typedef struct _AAE88594007F457B798403BCEE2A7045 CommandPart;
typedef struct dmesa_buffer *DMesaBuffer;
typedef struct dmesa_visual *DMesaVisual;
typedef unsigned long long Elf32_Lword;
typedef union _6DF3DE276417BF858702C9AB9AD460CB Elf32_gptab;
typedef unsigned long long Elf64_Lword;
typedef struct _8AF8D50F7459E989F83B822632060AA0 Elf_Options;
typedef struct _EventSeqRec *EventSeqPtr;
typedef struct _EventSeqRec EventSeqRec;
typedef struct _ExifContent ExifContent;
typedef struct _FSXCharInfo FSXCharInfo;
typedef struct FTC_FontRec_ FTC_FontRec;
typedef struct FTC_ManagerRec_ *FTC_Manager;
typedef struct FTC_SBitRec_ FTC_SBitRec;
typedef struct FT_GlyphRec_ FT_GlyphRec;
typedef struct FT_ListNodeRec_ *FT_ListNode;
typedef struct FT_RendererRec_ *FT_Renderer;
typedef struct FT_SfntName_ FT_SfntName;
typedef struct FT_SubGlyphRec_ *FT_SubGlyph;
typedef struct FT_Var_Axis_ FT_Var_Axis;
typedef struct _FcGlobalCache FcFileCache;
typedef struct _FcObjectSet FcObjectSet;
typedef struct _FontInfo *FontInfoPtr;
typedef struct _FontInfo FontInfoRec;
typedef struct _FontName *FontNamePtr;
typedef struct _FontName FontNameRec;
typedef struct _FontProp *FontPropPtr;
typedef struct _FontProp FontPropRec;
typedef void (*GLFBDevProc)();
typedef struct GLUnurbs GLUnurbsObj;
typedef struct __GLXFBConfigRec *GLXFBConfig;
typedef struct _ED5182E24FA63E003AABD0C8CEC5D325 GLXPipeRect;
typedef unsigned int GLhandleARB;
struct Gpm_Connect {unsigned short eventMask;unsigned short defaultMask;unsigned short minMod;unsigned short maxMod;int pid;int vc;};
typedef int Gpm_Handler(Gpm_Event *event, void *clientdata);
typedef struct _HookObjPart HookObjPart;
typedef struct _103FEF2231D5EFB91E1851DC5DE2406C IjsRecvChan;
typedef struct _C3C653411B6E49EB349248421822EA60 IjsSendChan;
typedef struct _LabelRec *LabelWidget;
typedef struct _LangProcRec LangProcRec;
typedef struct _LockInfoRec *LockInfoPtr;
enum MACRO_ABORT {ABORT = 0x6,};
enum MACRO_ALLOW {ALLOW_MEDIUM_REMOVAL = 0x1E,};
enum MACRO_AMESA {AMESA_MAJOR_VERSION = 3,AMESA_MINOR_VERSION = 3,};
enum MACRO_APPLE {APPLE_WM_MAJOR_VERSION = 1,APPLE_WM_MINOR_VERSION = 0,APPLE_WM_PATCH_VERSION = 0,};
enum MACRO_ARPOP {ARPOP_REQUEST = 1,ARPOP_REPLY = 2,ARPOP_RREQUEST = 3,ARPOP_RREPLY = 4,ARPOP_InREQUEST = 8,ARPOP_InREPLY = 9,ARPOP_NAK = 10,};
enum MACRO_Above {Above = 0,Below = 1,TopIf = 2,};
enum MACRO_B1200 {B1200 = 0x9,};
enum MACRO_B1800 {B1800 = 0xA,};
enum MACRO_B2400 {B2400 = 0xB,};
enum MACRO_B4800 {B4800 = 0xC,};
enum MACRO_B9600 {B9600 = 0xD,};
enum MACRO_BLANK {BLANK_CHECK = 0x8,};
enum MACRO_BLOCK {BLOCK_SIZE = 1024,BLOCK_SIZE_BITS = 10,};
enum MACRO_BREAK {BREAK = 243,};
enum MACRO_BYTES {BYTES_PER_XDR_UNIT = 4,};
enum MACRO_BadGC {BadGC = 13,};
enum MACRO_BadIO {BadIO = 2,BadStatistics = 4,};
enum MACRO_CACHE {SYNCHRONIZE_CACHE = 0x35,LOCK_UNLOCK_CACHE = 0x36,};
enum MACRO_CHECK {CHECK_CONDITION = 0x1,};
enum MACRO_CILEN {CILEN_DEFLATE = 4,};
enum MACRO_CINTR {CINTR = 3,};
enum MACRO_CLGET {CLGET_SERVER_ADDR = 3,CLGET_FD = 6,CLGET_SVC_ADDR = 7,};
enum MACRO_CLOCK {CLOCK_REALTIME = 0,CLOCK_MONOTONIC = 1,CLOCK_PROCESS_CPUTIME_ID = 2,CLOCK_THREAD_CPUTIME_ID = 3,};
enum MACRO_CLONE {CLONE_VM = 0x100,CLONE_FS = 0x200,CLONE_FILES = 0x400,CLONE_SIGHAND = 0x800,CLONE_PTRACE = 0x2000,CLONE_VFORK = 0x4000,CLONE_PARENT = 0x8000,CLONE_THREAD = 0x10000,CLONE_NEWNS = 0x20000,CLONE_SYSVSEM = 0x40000,CLONE_SETTLS = 0x80000,CLONE_PARENT_SETTID = 0x100000,CLONE_CHILD_CLEARTID = 0x200000,CLONE_DETACHED = 0x400000,CLONE_UNTRACED = 0x800000,CLONE_CHILD_SETTID = 0x1000000,CLONE_STOPPED = 0x2000000,};
enum MACRO_CLSET {CLSET_FD_CLOSE = 8,CLSET_FD_NCLOSE = 9,};
enum MACRO_COLOR {COLOR_BLACK = 0,COLOR_RED = 1,COLOR_GREEN = 2,COLOR_YELLOW = 3,COLOR_BLUE = 4,COLOR_MAGENTA = 5,COLOR_CYAN = 6,COLOR_WHITE = 7,};
enum MACRO_COUNT {COUNT = 0,CREATE = 1,};
enum MACRO_CSTOP {CSTOP = 19,};
enum MACRO_CSUSP {CSUSP = 26,};
enum MACRO_CTIME {CTIME = 0,CDSUSP = 25,};
enum MACRO_DF_P1 {DF_P1_LAZYLOAD = 0x1,DF_P1_GROUPPERM = 0x2,};
enum MACRO_DMESA {DMESA_MAJOR_VERSION = 6,DMESA_MINOR_VERSION = 5,DMESA_GET_SCREEN_SIZE = 256,DMESA_GET_DRIVER_CAPS = 512,DMESA_GET_VIDEO_MODES = 768,DMESA_GET_BUFFER_ADDR = 1024,DMESA_DRIVER_DBL_BIT = 1,DMESA_DRIVER_YUP_BIT = 2,};
enum MACRO_DT_IA {DT_IA_64_PLT_RESERVE = 1879048192,DT_IA_64_NUM = 1,};
enum MACRO_DoRed {DoRed = 1,DoGreen = 2,DoBlue = 4,};
enum MACRO_EF_IA {EF_IA_64_MASKOS = 0xF,EF_IA_64_ABI64 = 0x10,EF_IA_64_ARCH = 0xFF000000,};
enum MACRO_ELF32 {ELF32_FSZ_ADDR = 4,ELF32_FSZ_HALF = 2,ELF32_FSZ_OFF = 4,ELF32_FSZ_SWORD = 4,ELF32_FSZ_WORD = 4,};
enum MACRO_ELF64 {ELF64_FSZ_ADDR = 8,ELF64_FSZ_HALF = 2,ELF64_FSZ_OFF = 8,ELF64_FSZ_SWORD = 4,ELF64_FSZ_WORD = 4,ELF64_FSZ_SXWORD = 8,ELF64_FSZ_XWORD = 8,};
enum MACRO_ELF_F {ELF_F_DIRTY = 0x1,ELF_F_LAYOUT = 0x4,};
enum MACRO_EPOLL {EPOLL_CTL_ADD = 1,EPOLL_CTL_DEL = 2,EPOLL_CTL_MOD = 3,};
enum MACRO_ERASE {ERASE = 0x19,};
enum MACRO_ERRNO {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EAGAIN = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EDEADLK = 35,ENAMETOOLONG = 36,ENOLCK = 37,ENOSYS = 38,ENOTEMPTY = 39,ELOOP = 40,EWOULDBLOCK = 11,ENOMSG = 42,EIDRM = 43,ECHRNG = 44,EL2NSYNC = 45,EL3HLT = 46,EL3RST = 47,ELNRNG = 48,EUNATCH = 49,ENOCSI = 50,EL2HLT = 51,EBADE = 52,EBADR = 53,EXFULL = 54,ENOANO = 55,EBADRQC = 56,EBADSLT = 57,EDEADLOCK = 35,EBFONT = 59,ENOSTR = 60,ENODATA = 61,ETIME = 62,ENOSR = 63,ENONET = 64,ENOPKG = 65,EREMOTE = 66,ENOLINK = 67,EADV = 68,ESRMNT = 69,ECOMM = 70,EPROTO = 71,EMULTIHOP = 72,EDOTDOT = 73,EBADMSG = 74,EOVERFLOW = 75,ENOTUNIQ = 76,EBADFD = 77,EREMCHG = 78,ELIBACC = 79,ELIBBAD = 80,ELIBSCN = 81,ELIBMAX = 82,ELIBEXEC = 83,EILSEQ = 84,ERESTART = 85,ESTRPIPE = 86,EUSERS = 87,ENOTSOCK = 88,EDESTADDRREQ = 89,EMSGSIZE = 90,EPROTOTYPE = 91,ENOPROTOOPT = 92,EPROTONOSUPPORT = 93,ESOCKTNOSUPPORT = 94,EOPNOTSUPP = 95,EPFNOSUPPORT = 96,EAFNOSUPPORT = 97,EADDRINUSE = 98,EADDRNOTAVAIL = 99,ENETDOWN = 100,ENETUNREACH = 101,ENETRESET = 102,ECONNABORTED = 103,ECONNRESET = 104,ENOBUFS = 105,EISCONN = 106,ENOTCONN = 107,ESHUTDOWN = 108,ETOOMANYREFS = 109,ETIMEDOUT = 110,ECONNREFUSED = 111,EHOSTDOWN = 112,EHOSTUNREACH = 113,EALREADY = 114,EINPROGRESS = 115,ESTALE = 116,EUCLEAN = 117,ENOTNAM = 118,ENAVAIL = 119,EISNAM = 120,EREMOTEIO = 121,EDQUOT = 122,ENOMEDIUM = 123,EMEDIUMTYPE = 124,ECANCELED = 125,ENOKEY = 126,EKEYEXPIRED = 127,EKEYREVOKED = 128,EKEYREJECTED = 129,EOWNERDEAD = 130,ENOTRECOVERABLE = 131,};
enum MACRO_ERROR {ERROR = 5,};
enum MACRO_ETHER {ETHER_ADDR_LEN = 6,ETHER_TYPE_LEN = 2,ETHER_CRC_LEN = 4,ETHER_HDR_LEN = 14,ETHER_MIN_LEN = 64,ETHER_MAX_LEN = 1518,};
enum MACRO_Expat {Expat_INCLUDED = 1,Expat_External_INCLUDED = 1,};
enum MACRO_FFDLY {FFDLY = 0x8000,};
enum MACRO_FONTX {GIO_FONTX = 0x4B6B,PIO_FONTX = 0x4B6C,};
enum MACRO_FOPEN {FOPEN_MAX = 16,};
enum MACRO_GPROF {GPROF_STATE = 0,GPROF_COUNT = 1,GPROF_FROMS = 2,GPROF_TOS = 3,GPROF_GMONPARAM = 4,};
enum MACRO_GXset {GXset = 0xF,};
enum MACRO_GXxor {GXxor = 0x6,};
enum MACRO_HWCAP {HWCAP_SPARC_FLUSH = 1,HWCAP_SPARC_STBAR = 2,HWCAP_SPARC_SWAP = 4,HWCAP_SPARC_MULDIV = 8,HWCAP_SPARC_V9 = 16,HWCAP_SPARC_ULTRA3 = 32,HWCAP_SPARC_BLKINIT = 64,};
enum MACRO_ICMP6 {ICMP6_FILTER = 1,ICMP6_FILTER_BLOCK = 1,ICMP6_FILTER_PASS = 2,ICMP6_FILTER_BLOCKOTHERS = 3,ICMP6_FILTER_PASSONLY = 4,ICMP6_DST_UNREACH = 1,ICMP6_PACKET_TOO_BIG = 2,ICMP6_TIME_EXCEEDED = 3,ICMP6_PARAM_PROB = 4,ICMP6_INFOMSG_MASK = 128,ICMP6_ECHO_REQUEST = 128,ICMP6_ECHO_REPLY = 129,};
enum MACRO_INDIR {INDIR_MASK = 192,};
enum MACRO_IPOPT {IPOPT_COPY = 0x80,IPOPT_CLASS_MASK = 0x60,IPOPT_NUMBER_MASK = 0x1F,IPOPT_CONTROL = 0x0,IPOPT_RESERVED1 = 0x20,IPOPT_DEBMEAS = 0x40,IPOPT_MEASUREMENT = 0x40,IPOPT_RESERVED2 = 0x60,IPOPT_EOL = 0x0,IPOPT_END = 0x0,IPOPT_NOP = 0x1,IPOPT_NOOP = 0x1,IPOPT_RR = 0x7,IPOPT_TS = 0x44,IPOPT_TIMESTAMP = 0x44,IPOPT_SECURITY = 0x82,IPOPT_SEC = 0x82,IPOPT_LSRR = 0x83,IPOPT_SATID = 0x88,IPOPT_SID = 0x88,IPOPT_SSRR = 0x89,IPOPT_RA = 0x94,IPOPT_OPTVAL = 0x0,IPOPT_OLEN = 0x1,IPOPT_OFFSET = 0x2,IPOPT_MINOFF = 0x4,};
enum MACRO_IPTOS {IPTOS_TOS_MASK = 0x1E,IPTOS_LOWDELAY = 0x10,IPTOS_THROUGHPUT = 0x8,IPTOS_RELIABILITY = 0x4,IPTOS_LOWCOST = 0x2,IPTOS_MINCOST = 0x2,IPTOS_PREC_MASK = 0xE0,IPTOS_PREC_NETCONTROL = 0xE0,IPTOS_PREC_INTERNETCONTROL = 0xC0,IPTOS_PREC_CRITIC_ECP = 0xA0,IPTOS_PREC_FLASHOVERRIDE = 0x80,IPTOS_PREC_FLASH = 0x60,IPTOS_PREC_IMMEDIATE = 0x40,IPTOS_PREC_PRIORITY = 0x20,IPTOS_PREC_ROUTINE = 0x0,};
enum MACRO_IP_RF {IP_RF = 0x8000,IP_DF = 0x4000,IP_MF = 0x2000,IP_OFFMASK = 0x1FFF,};
enum MACRO_KTYPE {KTYPE_UNKNOWN = 0,KTYPE_84KEY = 1,KTYPE_101KEY = 2,KTYPE_OTHER = 3,KTYPE_XQUEUE = 4,};
enum MACRO_LEAVE {LEAVE_INVITE = 0,};
enum MACRO_LFLOW {LFLOW_OFF = 0,LFLOW_ON = 1,LFLOW_RESTART_ANY = 2,LFLOW_RESTART_XON = 3,};
enum MACRO_LINUX {LINUX_VERSION_CODE = 132626,};
enum MACRO_L_SET {L_SET = 0,L_INCR = 1,L_XTND = 2,};
enum MACRO_MAGIC {_IO_MAGIC = 0xFBAD0000,_OLD_STDIO_MAGIC = 0xFABC0000,};
enum MACRO_MATCH {MIN_MATCH = 3,MAX_MATCH = 258,};
enum MACRO_MAXNS {MAXNS = 3,};
enum MACRO_MAXTC {MAXTC = 6,};
enum MACRO_MCAST {MCAST_JOIN_GROUP = 42,MCAST_BLOCK_SOURCE = 43,MCAST_UNBLOCK_SOURCE = 44,MCAST_LEAVE_GROUP = 45,MCAST_JOIN_SOURCE_GROUP = 46,MCAST_LEAVE_SOURCE_GROUP = 47,MCAST_MSFILTER = 48,MCAST_EXCLUDE = 0,MCAST_INCLUDE = 1,};
enum MACRO_MTBSS {MTBSS = 26,};
enum MACRO_MTEOM {MTEOM = 12,};
enum MACRO_MTFSR {MTFSR = 3,MTBSR = 4,};
enum MACRO_MTFSS {MTFSS = 25,};
enum MACRO_MTREW {MTREW = 6,};
enum MACRO_MTWSM {MTWSM = 27,};
enum MACRO_MTYPE {MTYPE_MICROSOFT = 0,MTYPE_MOUSESYS = 1,MTYPE_MMSERIES = 2,MTYPE_LOGITECH = 3,MTYPE_BUSMOUSE = 4,MTYPE_LOGIMAN = 5,MTYPE_PS_2 = 6,MTYPE_MMHIT = 7,MTYPE_GLIDEPOINT = 8,MTYPE_IMSERIAL = 9,MTYPE_THINKING = 10,MTYPE_IMPS2 = 11,MTYPE_THINKINGPS2 = 12,MTYPE_MMANPLUSPS2 = 13,MTYPE_GLIDEPOINTPS2 = 14,MTYPE_NETPS2 = 15,MTYPE_NETSCROLLPS2 = 16,MTYPE_SYSMOUSE = 17,MTYPE_AUTOMOUSE = 18,MTYPE_ACECAD = 19,MTYPE_EXPPS2 = 20,MTYPE_XQUEUE = 127,MTYPE_OSMOUSE = 126,MTYPE_UNKNOWN = 125,};
enum MACRO_NETDB {NETDB_INTERNAL = -1,NETDB_SUCCESS = 0,};
enum MACRO_NGREG {NGREG = 19,};
enum MACRO_NGRPS {NGRPS = 16,};
enum MACRO_OHWA0 {OHWA0_R4KEOP_CHECKED = 0x1,};
enum MACRO_OHWA1 {OHWA1_R4KEOP_CLEAN = 0x2,};
enum MACRO_OPOST {OPOST = 0x1,OLCUC = 0x2,ONLCR = 0x4,OCRNL = 0x8,ONOCR = 0x10,ONLRET = 0x20,OFILL = 0x40,OFDEL = 0x80,NLDLY = 0x100,};
enum MACRO_ORDER {__BYTE_ORDER = 1234,__FLOAT_WORD_ORDER = 1234,};
enum MACRO_PANED {PANED_ASK_CHILD = 0,PANED_GRIP_SIZE = 0,};
enum MACRO_PATCH {WAVE_PATCH = 0x4FD,GUS_PATCH = 0x4FD,WAVEFRONT_PATCH = 0x6FD,};
enum MACRO_PF_IA {PF_IA_64_NORECOV = 0x80000000,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_POSIX {POSIX_FADV_NORMAL = 0,POSIX_FADV_RANDOM = 1,POSIX_FADV_SEQUENTIAL = 2,POSIX_FADV_WILLNEED = 3,POSIX_FADV_DONTNEED = 4,POSIX_FADV_NOREUSE = 5,};
enum MACRO_PROOT {PROOT = 3,HEXKEYBYTES = 48,KEYSIZE = 192,};
enum MACRO_PROTO {PROTO_UNDEF = -1,};
enum MACRO_PT_HP {PT_HP_TLS = 0x60000000,PT_HP_CORE_NONE = 0x60000001,PT_HP_CORE_VERSION = 0x60000002,PT_HP_CORE_KERNEL = 0x60000003,PT_HP_CORE_COMM = 0x60000004,PT_HP_CORE_PROC = 0x60000005,PT_HP_CORE_LOADABLE = 0x60000006,PT_HP_CORE_STACK = 0x60000007,PT_HP_CORE_SHM = 0x60000008,PT_HP_CORE_MMF = 0x60000009,PT_HP_PARALLEL = 0x60000010,PT_HP_FASTBIND = 0x60000011,PT_HP_OPT_ANNOT = 0x60000012,PT_HP_HSL_ANNOT = 0x60000013,PT_HP_STACK = 0x60000014,PT_PARISC_ARCHEXT = 0x70000000,PT_PARISC_UNWIND = 0x70000001,};
enum MACRO_PT_IA {PT_IA_64_ARCHEXT = 1879048192,PT_IA_64_UNWIND = 1879048193,PT_IA_64_HP_OPT_ANOT = 1610612754,PT_IA_64_HP_HSL_ANOT = 1610612755,PT_IA_64_HP_STACK = 1610612756,};
enum MACRO_QUEUE {QUEUE_FULL = 0x14,};
enum MACRO_RANDR {RANDR_MAJOR = 1,RANDR_MINOR = 1,};
enum MACRO_RES_F {RES_F_VC = 0x1,RES_F_CONN = 0x2,RES_EXHAUSTIVE = 0x1,RES_INIT = 0x1,RES_DEBUG = 0x2,RES_AAONLY = 0x4,RES_USEVC = 0x8,RES_PRIMARY = 0x10,RES_IGNTC = 0x20,RES_RECURSE = 0x40,RES_DEFNAMES = 0x80,RES_STAYOPEN = 0x100,RES_DNSRCH = 0x200,RES_INSECURE1 = 0x400,RES_INSECURE2 = 0x800,RES_NOALIASES = 0x1000,RES_USE_INET6 = 0x2000,RES_ROTATE = 0x4000,RES_NOCHECKNAME = 0x8000,RES_KEEPTSIG = 0x10000,RES_BLAST = 0x20000,RES_USEBSTRING = 0x40000,RES_NOIP6DOTINT = 0x80000,RES_DEFAULT = 0x802C0,RES_PRF_STATS = 0x1,RES_PRF_UPDATE = 0x2,RES_PRF_CLASS = 0x4,RES_PRF_CMD = 0x8,RES_PRF_QUES = 0x10,RES_PRF_ANS = 0x20,RES_PRF_AUTH = 0x40,RES_PRF_ADD = 0x80,RES_PRF_HEAD1 = 0x100,RES_PRF_HEAD2 = 0x200,RES_PRF_TTLID = 0x400,RES_PRF_HEADX = 0x800,RES_PRF_QUERY = 0x1000,RES_PRF_REPLY = 0x2000,RES_PRF_INIT = 0x4000,};
enum MACRO_RNORM {RNORM = 0x0,RMSGD = 0x1,RMSGN = 0x2,RPROTDAT = 0x4,RPROTDIS = 0x8,RPROTNORM = 0x10,};
enum MACRO_RTMSG {RTMSG_NEWDEVICE = 0x11,RTMSG_DELDEVICE = 0x12,RTMSG_NEWROUTE = 0x21,RTMSG_DELROUTE = 0x22,RTMSG_NEWRULE = 0x31,RTMSG_DELRULE = 0x32,RTMSG_CONTROL = 0x40,RTMSG_AR_FAILED = 0x51,};
enum MACRO_RTSIG {RTSIG_MAX = 32,_POSIX_THREAD_KEYS_MAX = 128,PTHREAD_KEYS_MAX = 1024,};
enum MACRO_R_ARM {R_ARM_NONE = 0,R_ARM_PC24 = 1,R_ARM_ABS32 = 2,R_ARM_REL32 = 3,R_ARM_PC13 = 4,R_ARM_ABS16 = 5,R_ARM_ABS12 = 6,R_ARM_THM_ABS5 = 7,R_ARM_ABS8 = 8,R_ARM_SBREL32 = 9,R_ARM_THM_PC22 = 10,R_ARM_THM_PC8 = 11,R_ARM_AMP_VCALL9 = 12,R_ARM_SWI24 = 13,R_ARM_THM_SWI8 = 14,R_ARM_XPC25 = 15,R_ARM_THM_XPC22 = 16,R_ARM_TLS_DTPMOD32 = 17,R_ARM_TLS_DTPOFF32 = 18,R_ARM_TLS_TPOFF32 = 19,R_ARM_COPY = 20,R_ARM_GLOB_DAT = 21,R_ARM_JUMP_SLOT = 22,R_ARM_RELATIVE = 23,R_ARM_GOTOFF = 24,R_ARM_GOTPC = 25,R_ARM_GOT32 = 26,R_ARM_PLT32 = 27,R_ARM_ALU_PCREL_7_0 = 32,R_ARM_ALU_PCREL_15_8 = 33,R_ARM_ALU_PCREL_23_15 = 34,R_ARM_LDR_SBREL_11_0 = 35,R_ARM_ALU_SBREL_19_12 = 36,R_ARM_ALU_SBREL_27_20 = 37,R_ARM_GNU_VTENTRY = 100,R_ARM_GNU_VTINHERIT = 101,R_ARM_THM_PC11 = 102,R_ARM_THM_PC9 = 103,R_ARM_TLS_GD32 = 104,R_ARM_TLS_LDM32 = 105,R_ARM_TLS_LDO32 = 106,R_ARM_TLS_IE32 = 107,R_ARM_TLS_LE32 = 108,R_ARM_RXPC25 = 249,R_ARM_RSBREL32 = 250,R_ARM_THM_RPC22 = 251,R_ARM_RREL32 = 252,R_ARM_RABS22 = 253,R_ARM_RPC24 = 254,R_ARM_RBASE = 255,R_ARM_NUM = 256,};
enum MACRO_R_PPC {R_PPC_NONE = 0,R_PPC_ADDR32 = 1,R_PPC_ADDR24 = 2,R_PPC_ADDR16 = 3,R_PPC_ADDR16_LO = 4,R_PPC_ADDR16_HI = 5,R_PPC_ADDR16_HA = 6,R_PPC_ADDR14 = 7,R_PPC_ADDR14_BRTAKEN = 8,R_PPC_ADDR14_BRNTAKEN = 9,R_PPC_REL24 = 10,R_PPC_REL14 = 11,R_PPC_REL14_BRTAKEN = 12,R_PPC_REL14_BRNTAKEN = 13,R_PPC_GOT16 = 14,R_PPC_GOT16_LO = 15,R_PPC_GOT16_HI = 16,R_PPC_GOT16_HA = 17,R_PPC_PLTREL24 = 18,R_PPC_COPY = 19,R_PPC_GLOB_DAT = 20,R_PPC_JMP_SLOT = 21,R_PPC_RELATIVE = 22,R_PPC_LOCAL24PC = 23,R_PPC_UADDR32 = 24,R_PPC_UADDR16 = 25,R_PPC_REL32 = 26,R_PPC_PLT32 = 27,R_PPC_PLTREL32 = 28,R_PPC_PLT16_LO = 29,R_PPC_PLT16_HI = 30,R_PPC_PLT16_HA = 31,R_PPC_SDAREL16 = 32,R_PPC_SECTOFF = 33,R_PPC_SECTOFF_LO = 34,R_PPC_SECTOFF_HI = 35,R_PPC_SECTOFF_HA = 36,R_PPC_TLS = 67,R_PPC_DTPMOD32 = 68,R_PPC_TPREL16 = 69,R_PPC_TPREL16_LO = 70,R_PPC_TPREL16_HI = 71,R_PPC_TPREL16_HA = 72,R_PPC_TPREL32 = 73,R_PPC_DTPREL16 = 74,R_PPC_DTPREL16_LO = 75,R_PPC_DTPREL16_HI = 76,R_PPC_DTPREL16_HA = 77,R_PPC_DTPREL32 = 78,R_PPC_GOT_TLSGD16 = 79,R_PPC_GOT_TLSGD16_LO = 80,R_PPC_GOT_TLSGD16_HI = 81,R_PPC_GOT_TLSGD16_HA = 82,R_PPC_GOT_TLSLD16 = 83,R_PPC_GOT_TLSLD16_LO = 84,R_PPC_GOT_TLSLD16_HI = 85,R_PPC_GOT_TLSLD16_HA = 86,R_PPC_GOT_TPREL16 = 87,R_PPC_GOT_TPREL16_LO = 88,R_PPC_GOT_TPREL16_HI = 89,R_PPC_GOT_TPREL16_HA = 90,R_PPC_GOT_DTPREL16 = 91,R_PPC_GOT_DTPREL16_LO = 92,R_PPC_GOT_DTPREL16_HI = 93,R_PPC_GOT_DTPREL16_HA = 94,R_PPC_NUM = 95,R_PPC_EMB_NADDR32 = 101,R_PPC_EMB_NADDR16 = 102,R_PPC_EMB_NADDR16_LO = 103,R_PPC_EMB_NADDR16_HI = 104,R_PPC_EMB_NADDR16_HA = 105,R_PPC_EMB_SDAI16 = 106,R_PPC_EMB_SDA2I16 = 107,R_PPC_EMB_SDA2REL = 108,R_PPC_EMB_SDA21 = 109,R_PPC_EMB_MRKREF = 110,R_PPC_EMB_RELSEC16 = 111,R_PPC_EMB_RELST_LO = 112,R_PPC_EMB_RELST_HI = 113,R_PPC_EMB_RELST_HA = 114,R_PPC_EMB_BIT_FLD = 115,R_PPC_EMB_RELSDA = 116,R_PPC_DIAB_SDA21_LO = 180,R_PPC_DIAB_SDA21_HI = 181,R_PPC_DIAB_SDA21_HA = 182,R_PPC_DIAB_RELSDA_LO = 183,R_PPC_DIAB_RELSDA_HI = 184,R_PPC_DIAB_RELSDA_HA = 185,R_PPC_REL16 = 249,R_PPC_REL16_LO = 250,R_PPC_REL16_HI = 251,R_PPC_REL16_HA = 252,R_PPC_TOC16 = 255,};
enum MACRO_SCHED {SCHED_OTHER = 0,SCHED_FIFO = 1,SCHED_RR = 2,};
enum MACRO_SEVEN {SEVEN = 7,EIGHT = 8,};
enum MACRO_SHAPE {SHAPE_MAJOR_VERSION = 1,SHAPE_MINOR_VERSION = 1,};
enum MACRO_SOUND {SOUND_VERSION = 0x30802,};
enum MACRO_SPACE {SPACE = 0x11,};
enum MACRO_SPDIF {SPDIF_PRO = 0x1,SPDIF_N_AUD = 0x2,SPDIF_COPY = 0x4,SPDIF_PRE = 0x8,SPDIF_CC = 0x7F0,SPDIF_L = 0x800,SPDIF_DRS = 0x4000,SPDIF_V = 0x8000,};
enum MACRO_START {START_STOP = 0x1B,};
enum MACRO_SYNCH {SYNCH = 242,};
enum MACRO_SYNTH {SYNTH_TYPE_FM = 0,SYNTH_TYPE_SAMPLE = 1,SYNTH_TYPE_MIDI = 2,};
enum MACRO_SYSEX {SYSEX_PATCH = 0x5FD,MAUI_PATCH = 0x6FD,};
enum MACRO_SYSFS {SYSFS_PATH_MAX = 256,SYSFS_NAME_LEN = 64,SYSFS_BUS_ID_SIZE = 32,};
enum MACRO_SunXK {SunXK_FA_Grave = 0x1005FF00,SunXK_FA_Circum = 0x1005FF01,SunXK_FA_Tilde = 0x1005FF02,SunXK_FA_Acute = 0x1005FF03,SunXK_FA_Diaeresis = 0x1005FF04,SunXK_FA_Cedilla = 0x1005FF05,SunXK_F36 = 0x1005FF10,SunXK_F37 = 0x1005FF11,SunXK_Sys_Req = 0x1005FF60,SunXK_Print_Screen = 0xFF61,SunXK_Compose = 0xFF20,SunXK_AltGraph = 0xFF7E,SunXK_PageUp = 0xFF55,SunXK_PageDown = 0xFF56,SunXK_Undo = 0xFF65,SunXK_Again = 0xFF66,SunXK_Find = 0xFF68,SunXK_Stop = 0xFF69,SunXK_Props = 0x1005FF70,SunXK_Front = 0x1005FF71,SunXK_Copy = 0x1005FF72,SunXK_Open = 0x1005FF73,SunXK_Paste = 0x1005FF74,SunXK_Cut = 0x1005FF75,SunXK_PowerSwitch = 0x1005FF76,SunXK_AudioLowerVolume = 0x1005FF77,SunXK_AudioMute = 0x1005FF78,SunXK_AudioRaiseVolume = 0x1005FF79,SunXK_VideoDegauss = 0x1005FF7A,SunXK_VideoLowerBrightness = 0x1005FF7B,SunXK_VideoRaiseBrightness = 0x1005FF7C,SunXK_PowerSwitchShift = 0x1005FF7D,};
enum MACRO_TCION {TCION = 3,};
enum MACRO_THREE {THREE = 3,FOUR = 4,};
enum MACRO_TIMER {TIMER_ABSTIME = 1,};
enum MACRO_TIOCM {TIOCM_LE = 0x1,TIOCM_DTR = 0x2,TIOCM_RTS = 0x4,TIOCM_ST = 0x8,TIOCM_SR = 0x10,TIOCM_CTS = 0x20,TIOCM_CAR = 0x40,TIOCM_RNG = 0x80,TIOCM_DSR = 0x100,TIOCM_CD = 0x40,TIOCM_RI = 0x80,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_TRACE {TRACE_DISABLE = 0x0,TRACE_TIMES = 0x1,TRACE_TPUTS = 0x2,TRACE_UPDATE = 0x4,TRACE_MOVE = 0x8,TRACE_CHARPUT = 0x10,TRACE_ORDINARY = 0x1F,TRACE_CALLS = 0x20,TRACE_VIRTPUT = 0x40,TRACE_IEVENT = 0x80,TRACE_BITS = 0x100,TRACE_ICALLS = 0x200,TRACE_CCALLS = 0x400,TRACE_DATABASE = 0x800,TRACE_ATTRS = 0x1000,TRACE_SHIFT = 0xD,TRACE_MAXIMUM = 0x1FFF,};
enum MACRO_TREES {STATIC_TREES = 1,DYN_TREES = 2,};
enum MACRO_TSGID {TSGID = 0x400,};
enum MACRO_TSUID {TSUID = 0x800,};
enum MACRO_TSVTX {TSVTX = 0x200,};
enum MACRO_TTCAP {TTCAP_DOUBLE_STRIKE = 0x1,TTCAP_DOUBLE_STRIKE_MKBOLD_EDGE_LEFT = 0x2,TTCAP_DOUBLE_STRIKE_CORRECT_B_BOX_WIDTH = 0x8,TTCAP_IS_VERY_LAZY = 0x10,TTCAP_DISABLE_DEFAULT_VERY_LAZY = 0x20,TTCAP_FORCE_C_LSB_FLAG = 0x100,TTCAP_FORCE_C_RSB_FLAG = 0x200,TTCAP_FORCE_C_OUTSIDE = 0x400,TTCAP_MONO_CENTER = 0x800,};
enum MACRO_VINTR {VINTR = 0,VQUIT = 1,VERASE = 2,};
enum MACRO_VKILL {VKILL = 3,VEOF = 4,};
enum MACRO_VSTOP {VSTOP = 9,};
enum MACRO_VSUSP {VSUSP = 10,};
enum MACRO_VSWTC {VSWTC = 7,VSTART = 8,};
enum MACRO_VTDLY {VTDLY = 0x4000,};
enum MACRO_VTIME {VTIME = 5,};
enum MACRO_WBXML {WBXML_SWITCH_PAGE = 0x0,WBXML_END = 0x1,WBXML_ENTITY = 0x2,WBXML_STR_I = 0x3,WBXML_LITERAL = 0x4,WBXML_EXT_I_0 = 0x40,WBXML_EXT_I_1 = 0x41,WBXML_EXT_I_2 = 0x42,WBXML_PI = 0x43,WBXML_LITERAL_C = 0x44,WBXML_EXT_T_0 = 0x80,WBXML_EXT_T_1 = 0x81,WBXML_EXT_T_2 = 0x82,WBXML_STR_T = 0x83,WBXML_LITERAL_A = 0x84,WBXML_EXT_0 = 0xC0,WBXML_EXT_1 = 0xC1,WBXML_EXT_2 = 0xC2,WBXML_OPAQUE = 0xC3,WBXML_LITERAL_AC = 0xC4,WBXML_TOKEN_MASK = 0x3F,WBXML_TOKEN_WITH_ATTRS = 0x80,WBXML_TOKEN_WITH_CONTENT = 0x40,WBXML_PUBLIC_ID_UNKNOWN = 0x1,WBXML_PUBLIC_ID_WML10 = 0x2,WBXML_PUBLIC_ID_WTA10 = 0x3,WBXML_PUBLIC_ID_WML11 = 0x4,WBXML_PUBLIC_ID_SI10 = 0x5,WBXML_PUBLIC_ID_SL10 = 0x6,WBXML_PUBLIC_ID_CO10 = 0x7,WBXML_PUBLIC_ID_CHANNEL11 = 0x8,WBXML_PUBLIC_ID_WML12 = 0x9,WBXML_PUBLIC_ID_WML13 = 0xA,WBXML_PUBLIC_ID_PROV10 = 0xB,WBXML_PUBLIC_ID_WTAWML12 = 0xC,WBXML_PUBLIC_ID_CHANNEL12 = 0x1,WBXML_PUBLIC_ID_EMN10 = 0xD,WBXML_PUBLIC_ID_DRMREL10 = 0xE,WBXML_PUBLIC_ID_OTA_SETTINGS = 0x1,};
enum MACRO_WCHAR {WCHAR_MIN = -2147483648,WCHAR_MAX = 2147483647,};
enum MACRO_WRITE {WRITE_6 = 0xA,};
enum MACRO_XATOM {XATOM_H = 1,};
enum MACRO_XATTR {XATTR_NAME_MAX = 255,XATTR_SIZE_MAX = 65536,XATTR_LIST_MAX = 65536,};
enum MACRO_XCONN {XCONN_CHECK_FREQ = 256,};
enum MACRO_XEVIE {XEVIE_UNMODIFIED = 0,XEVIE_MODIFIED = 1,XEVIE_MAJOR_VERSION = 1,XEVIE_MINOR_VERSION = 0,};
enum MACRO_XFONT {XFONT_FREETYPE = 1,XFONT_CID = 1,XFONT_SPEEDO = 1,XFONT_BUILTINS = 1,XFONT_PCFFORMAT = 1,XFONT_BDFFORMAT = 1,XFONT_SNFFORMAT = 1,XFONT_BITMAP = 1,XFONT_FONTFILE = 1,XFONT_FC = 1,};
enum MACRO_XKBUI {XKBUI_H = 1,};
enum MACRO_XMESA {XMESA_MAJOR_VERSION = 6,XMESA_MINOR_VERSION = 3,XMESA_VERSION = 1,XMESA_EXTENSIONS = 2,XMESA_FX_WINDOW = 1,XMESA_FX_FULLSCREEN = 2,};
enum MACRO_XTABS {XTABS = 0xC00,CBAUD = 0x100F,};
enum MACRO_X_TCP {X_TCP_PORT = 6000,};
enum MACRO_XawBS {XawBS = 0x8,XawSP = 0x20,};
enum MACRO_XawCR {XawCR = 0xD,};
enum MACRO_XkbAX {XkbAX_SKPressFBMask = 1,XkbAX_SKAcceptFBMask = 2,XkbAX_FeatureFBMask = 4,XkbAX_SlowWarnFBMask = 8,XkbAX_IndicatorFBMask = 16,XkbAX_StickyKeysFBMask = 32,XkbAX_TwoKeysMask = 64,XkbAX_LatchToLockMask = 128,XkbAX_SKReleaseFBMask = 256,XkbAX_SKRejectFBMask = 512,XkbAX_BKRejectFBMask = 1024,XkbAX_DumbBellFBMask = 2048,XkbAX_FBOptionsMask = 3903,XkbAX_SKOptionsMask = 192,XkbAX_AllOptionsMask = 4095,};
enum MACRO_XkbBI {XkbBI_Info = 0,XkbBI_Warning = 1,XkbBI_MinorError = 2,XkbBI_MajorError = 3,XkbBI_BadValue = 4,XkbBI_InvalidLocation = 5,XkbBI_Question = 6,XkbBI_Start = 7,XkbBI_End = 8,XkbBI_Success = 9,XkbBI_Failure = 10,XkbBI_Wait = 11,XkbBI_Proceed = 12,XkbBI_Ignore = 13,XkbBI_Iconify = 14,XkbBI_Deiconify = 15,XkbBI_Open = 16,XkbBI_Close = 17,XkbBI_TerminalBell = 18,XkbBI_MarginBell = 19,XkbBI_CursorStuck = 20,XkbBI_NewMail = 21,XkbBI_LaunchApp = 22,XkbBI_AppDeath = 23,XkbBI_ImAlive = 24,XkbBI_ClockChimeHour = 25,XkbBI_ClockChimeHalf = 26,XkbBI_ClockChimeQuarter = 27,XkbBI_RepeatingLastBell = 28,XkbBI_ComposeFail = 29,XkbBI_AX_FeatureOn = 30,XkbBI_AX_FeatureOff = 31,XkbBI_AX_FeatureChange = 32,XkbBI_AX_IndicatorOn = 33,XkbBI_AX_IndicatorOff = 34,XkbBI_AX_IndicatorChange = 35,XkbBI_AX_SlowKeysWarning = 36,XkbBI_AX_SlowKeyPress = 37,XkbBI_AX_SlowKeyAccept = 38,XkbBI_AX_SlowKeyReject = 39,XkbBI_AX_SlowKeyRelease = 40,XkbBI_AX_BounceKeyReject = 41,XkbBI_AX_StickyLatch = 42,XkbBI_AX_StickyLock = 43,XkbBI_AX_StickyUnlock = 44,XkbBI_NumBells = 45,};
enum MACRO_XkbCF {XkbCF_Check = 0,XkbCF_Apply = 1,XkbCF_CleanUp = 2,XkbCF_Destroy = 3,XkbCF_MergeSet = 0,XkbCF_MergeAdd = 1,XkbCF_MergeRemove = 2,XkbCF_InitialMods = 1,XkbCF_InternalMods = 2,XkbCF_IgnoreLockMods = 4,XkbCF_InitialCtrls = 8,XkbCF_AccessXTimeout = 16,XkbCF_AccessXTimeoutCtrlsOn = 32,XkbCF_AccessXTimeoutCtrlsOff = 64,XkbCF_AccessXTimeoutOptsOn = 128,XkbCF_AccessXTimeoutOptsOff = 256,XkbCF_GroupsWrap = 512,XkbCF_InitialOpts = 1024,XkbCF_EOF = -1,XkbCF_Unknown = 0,XkbCF_EOL = 1,XkbCF_Semi = 2,XkbCF_Equals = 3,XkbCF_PlusEquals = 4,XkbCF_MinusEquals = 5,XkbCF_Plus = 6,XkbCF_Minus = 7,XkbCF_String = 10,XkbCF_Ident = 11,XkbCF_Integer = 12,XkbCF_UnterminatedString = 100,XkbCF_BadAlloc = 101,XkbCF_MissingIdent = 102,XkbCF_MissingEquals = 103,XkbCF_ExpectedEOS = 104,XkbCF_ExpectedBoolean = 105,XkbCF_ExpectedInteger = 106,XkbCF_ExpectedString = 107,XkbCF_ExpectedModifier = 108,XkbCF_ExpectedControl = 109,XkbCF_ExpectedAXOption = 110,XkbCF_ExpectedOperator = 111,XkbCF_ExpectedOORGroupBehavior = 112,};
enum MACRO_XkbDF {XkbDF_DisableLocks = 1,};
enum MACRO_XkbIM {XkbIM_NoExplicit = 128,XkbIM_NoAutomatic = 64,XkbIM_LEDDrivesKB = 32,XkbIM_UseBase = 1,XkbIM_UseLatched = 2,XkbIM_UseLocked = 4,XkbIM_UseEffective = 8,XkbIM_UseCompat = 16,XkbIM_UseNone = 0,XkbIM_UseAnyGroup = 15,XkbIM_UseAnyMods = 31,};
enum MACRO_XkbKB {XkbKB_Permanent = 0x80,XkbKB_OpMask = 0x7F,XkbKB_Default = 0x0,XkbKB_Lock = 0x1,XkbKB_RadioGroup = 0x2,XkbKB_Overlay1 = 0x3,XkbKB_Overlay2 = 0x4,XkbKB_RGAllowNone = 0x80,};
enum MACRO_XkbLC {XkbLC_Hidden = 1,XkbLC_Default = 2,XkbLC_Partial = 4,XkbLC_AlphanumericKeys = 256,XkbLC_ModifierKeys = 512,XkbLC_KeypadKeys = 1024,XkbLC_FunctionKeys = 2048,XkbLC_AlternateGroup = 4096,};
enum MACRO_XkbOD {XkbOD_Success = 0,XkbOD_BadLibraryVersion = 1,XkbOD_ConnectionRefused = 2,XkbOD_NonXkbServer = 3,XkbOD_BadServerVersion = 4,};
enum MACRO_XkbRF {XkbRF_PendingMatch = 2,XkbRF_Option = 4,XkbRF_Append = 8,XkbRF_Normal = 16,XkbRF_Invalid = 32,};
enum MACRO_XkbSA {XkbSA_ClearLocks = 1,XkbSA_LatchToLock = 2,XkbSA_LockNoLock = 1,XkbSA_LockNoUnlock = 2,XkbSA_UseModMapMods = 4,XkbSA_GroupAbsolute = 4,XkbSA_UseDfltButton = 0,XkbSA_NoAcceleration = 1,XkbSA_MoveAbsoluteX = 2,XkbSA_MoveAbsoluteY = 4,XkbSA_ISODfltIsGroup = 128,XkbSA_ISONoAffectMods = 64,XkbSA_ISONoAffectGroup = 32,XkbSA_ISONoAffectPtr = 16,XkbSA_ISONoAffectCtrls = 8,XkbSA_ISOAffectMask = 120,XkbSA_MessageOnPress = 1,XkbSA_MessageOnRelease = 2,XkbSA_MessageGenKeyEvent = 4,XkbSA_AffectDfltBtn = 1,XkbSA_DfltBtnAbsolute = 4,XkbSA_SwitchApplication = 1,XkbSA_SwitchAbsolute = 4,XkbSA_IgnoreVal = 0,XkbSA_SetValMin = 16,XkbSA_SetValCenter = 32,XkbSA_SetValMax = 48,XkbSA_SetValRelative = 64,XkbSA_SetValAbsolute = 80,XkbSA_ValOpMask = 112,XkbSA_ValScaleMask = 7,XkbSA_NoAction = 0,XkbSA_SetMods = 1,XkbSA_LatchMods = 2,XkbSA_LockMods = 3,XkbSA_SetGroup = 4,XkbSA_LatchGroup = 5,XkbSA_LockGroup = 6,XkbSA_MovePtr = 7,XkbSA_PtrBtn = 8,XkbSA_LockPtrBtn = 9,XkbSA_SetPtrDflt = 10,XkbSA_ISOLock = 11,XkbSA_Terminate = 12,XkbSA_SwitchScreen = 13,XkbSA_SetControls = 14,XkbSA_LockControls = 15,XkbSA_ActionMessage = 16,XkbSA_RedirectKey = 17,XkbSA_DeviceBtn = 18,XkbSA_LockDeviceBtn = 19,XkbSA_DeviceValuator = 20,XkbSA_LastAction = 20,XkbSA_NumActions = 21,XkbSA_XFree86Private = 134,XkbSA_BreakLatch = 1045249,};
enum MACRO_XkbSI {XkbSI_AutoRepeat = 1,XkbSI_LockingKey = 2,XkbSI_LevelOneOnly = 128,XkbSI_OpMask = 127,XkbSI_NoneOf = 0,XkbSI_AnyOfOrNone = 1,XkbSI_AnyOf = 2,XkbSI_AllOf = 3,XkbSI_Exactly = 4,};
enum MACRO_XkbUI {XkbUI_BackgroundMask = 1,XkbUI_ForegroundMask = 2,XkbUI_LabelModeMask = 4,XkbUI_ColorModeMask = 8,XkbUI_WidthMask = 16,XkbUI_HeightMask = 32,XkbUI_XOffsetMask = 64,XkbUI_YOffsetMask = 128,XkbUI_ColormapMask = 256,XkbUI_MarginWidthMask = 512,XkbUI_MarginHeightMask = 1024,XkbUI_SizeMask = 48,XkbUI_OffsetMask = 192,XkbUI_MarginMask = 1536,XkbUI_AllViewOptsMask = 2047,XkbUI_NoLabels = 0,XkbUI_KeyCodes = 1,XkbUI_KeyNames = 2,XkbUI_StateSyms = 3,XkbUI_MultiSyms = 4,XkbUI_Keys = 0,XkbUI_Indicators = 1,XkbUI_TextLabels = 2,XkbUI_SolidShapes = 3,XkbUI_Outlines = 4,XkbUI_Logos = 5,XkbUI_Sections = 6,XkbUI_KeysMask = 1,XkbUI_IndicatorsMask = 2,XkbUI_TextLabelsMask = 4,XkbUI_SolidShapesMask = 8,XkbUI_OutlinesMask = 16,XkbUI_LogosMask = 32,XkbUI_SectionsMask = 64,XkbUI_KeyDown = 1,XkbUI_Highlight = 2,};
enum MACRO_XkbXI {XkbXI_KeyboardsMask = 1,XkbXI_ButtonActionsMask = 2,XkbXI_IndicatorNamesMask = 4,XkbXI_IndicatorMapsMask = 8,XkbXI_IndicatorStateMask = 16,XkbXI_UnsupportedFeatureMask = 32768,XkbXI_AllFeaturesMask = 31,XkbXI_AllDeviceFeaturesMask = 30,XkbXI_IndicatorsMask = 28,};
enum MACRO_XvRGB {XvRGB = 0,XvYUV = 1,};
enum MACRO_YPERR {YPERR_SUCCESS = 0,YPERR_BADARGS = 1,YPERR_RPC = 2,YPERR_DOMAIN = 3,YPERR_MAP = 4,YPERR_KEY = 5,YPERR_YPERR = 6,YPERR_RESRC = 7,YPERR_NOMORE = 8,YPERR_PMAP = 9,YPERR_YPBIND = 10,YPERR_YPSERV = 11,YPERR_NODOM = 12,YPERR_BADDB = 13,YPERR_VERS = 14,YPERR_ACCESS = 15,YPERR_BUSY = 16,};
enum MACRO__ARGZ {_ARGZ_H = 1,_STRING_H = 1,};
enum MACRO__ARPA {_ARPA_FTP_H = 1,};
enum MACRO__BITS {_BITS_WCHAR_H = 1,};
enum MACRO__CPIO {_CPIO_H = 1,};
enum MACRO__ENVZ {_ENVZ_H = 1,_ERR_H = 1,_ERROR_H = 1,};
enum MACRO__FENV {_FENV_H = 1,};
enum MACRO__GLOB {_GLOB_H = 1,};
enum MACRO__HAVE {_HAVE_UT_TYPE = 1,_HAVE_UT_PID = 1,_HAVE_UT_ID = 1,_HAVE_UT_TV = 1,_HAVE_UT_HOST = 1,};
enum MACRO__LIBC {_LIBC_LIMITS_H_ = 1,};
enum MACRO__LINK {_LINK_H = 1,};
enum MACRO__MATH {_MATH_H = 1,};
enum MACRO__SCSI {_SCSI_SCSI_H = 1,};
enum MACRO__SIOC {_SIOC_NONE = 0,_SIOC_READ = 2,_SIOC_WRITE = 1,};
enum MACRO__STAT {_STAT_VER_LINUX_OLD = 1,_STAT_VER_KERNEL = 1,_STAT_VER_SVR4 = 2,_STAT_VER_LINUX = 3,_STAT_VER = 3,};
enum MACRO___BIT {__BIT_TYPES_DEFINED__ = 1,};
enum MACRO___CPU {__CPU_SETSIZE = 1024,};
enum MACRO___DES {__DES_CRYPT_H__ = 1,};
enum MACRO___ELF {__ELF_NATIVE_CLASS = 32,};
enum MACRO___GLE {__GLE_DOUBLE = 1,};
enum MACRO___GLX {__GLX_MIN_CONFIG_PROPS = 18,__GLX_MAX_CONFIG_PROPS = 500,__GLX_EXT_CONFIG_PROPS = 10,__GLX_TOTAL_CONFIG = 38,__GLX_TOTAL_FBCONFIG_PROPS = 35,};
enum MACRO___GNU {__GNU_LIBRARY__ = 6,};
enum MACRO___MAX {__MAX_BAUD = 4111,};
enum MACRO___NET {__NET_ETHERNET_H = 1,};
enum MACRO___RES {__RES = 19991006,};
enum MACRO___SID {__SID = 21248,};
enum MACRO___USE {__USE_ANSI = 1,};
enum MACRO_lbxsz {lbxsz_UnknownEvent = 32,};
enum MACRO_osfXK {osfXK_Copy = 0x1004FF02,osfXK_Cut = 0x1004FF03,osfXK_Paste = 0x1004FF04,osfXK_BackTab = 0x1004FF07,osfXK_BackSpace = 0x1004FF08,osfXK_Clear = 0x1004FF0B,osfXK_Escape = 0x1004FF1B,osfXK_AddMode = 0x1004FF31,osfXK_PrimaryPaste = 0x1004FF32,osfXK_QuickPaste = 0x1004FF33,osfXK_PageLeft = 0x1004FF40,osfXK_PageUp = 0x1004FF41,osfXK_PageDown = 0x1004FF42,osfXK_PageRight = 0x1004FF43,osfXK_Activate = 0x1004FF44,osfXK_MenuBar = 0x1004FF45,osfXK_Left = 0x1004FF51,osfXK_Up = 0x1004FF52,osfXK_Right = 0x1004FF53,osfXK_Down = 0x1004FF54,osfXK_EndLine = 0x1004FF57,osfXK_BeginLine = 0x1004FF58,osfXK_EndData = 0x1004FF59,osfXK_BeginData = 0x1004FF5A,osfXK_PrevMenu = 0x1004FF5B,osfXK_NextMenu = 0x1004FF5C,osfXK_PrevField = 0x1004FF5D,osfXK_NextField = 0x1004FF5E,osfXK_Select = 0x1004FF60,osfXK_Insert = 0x1004FF63,osfXK_Undo = 0x1004FF65,osfXK_Menu = 0x1004FF67,osfXK_Cancel = 0x1004FF69,osfXK_Help = 0x1004FF6A,osfXK_SelectAll = 0x1004FF71,osfXK_DeselectAll = 0x1004FF72,osfXK_Reselect = 0x1004FF73,osfXK_Extend = 0x1004FF74,osfXK_Restore = 0x1004FF78,osfXK_Delete = 0x1004FFFF,};
enum MACRO_xTrue {xTrue = 1,};
typedef struct _MultiSrcRec MultiSrcRec;
typedef struct _ObjectClassRec *ObjectClass;
typedef struct _PCFTable *PCFTablePtr;
typedef struct _PCFTable PCFTableRec;
typedef struct PS_BlendRec_ PS_BlendRec;
typedef struct PS_FontInfoRec *PS_FontInfo;
typedef struct _PanedRec *PanedWidget;
typedef struct _PortholeRec PortholeRec;
typedef struct _7FBA96F229FB301DA1D20C97214BF251 PropListRec;
typedef struct _A94EB43F2838EBEBCA936AD6F7EBA6B5 RECORDRANGE;
typedef struct _RectObjPart RectObjPart;
typedef struct _RepeaterRec RepeaterRec;
typedef struct _4FB432CAED1F3912A0288EBA807D24E6 SANE_Device;
typedef void *SANE_Handle;
typedef void (*SetPathFunc)(void);
typedef struct sg_req_info Sg_req_info;
typedef struct _984028CEBAA862490ACFAD72BCDE57E1 *ShellWidget;
typedef struct _A467143AA6DED7F9A689DDE9D5460EF6 SmPropValue;
typedef struct _SmeClassRec SmeClassRec;
typedef struct _E43B4FFA2E3C0DB794E5C488D88E145C SmeLinePart;
typedef PS_FontInfoRec T1_FontInfo;
typedef struct _TMGlobalRec TMGlobalRec;
typedef unsigned short TMShortCard;
typedef union _TMStateTreeRec *TMStateTree;
typedef struct _TMTypeMatchRec *TMTypeMatch;
typedef struct _TemplateRec TemplateRec;
typedef struct _F403E5F5616236146AF752723515CE63 *TextSinkExt;
typedef struct _TextSinkRec TextSinkRec;
typedef struct _4C17583A42DA2A5F9B3C30D47F076D0A TextSrcPart;
typedef struct _TipClassRec TipClassRec;
typedef struct _ViewportRec ViewportRec;
typedef struct WBXMLBuffer_s WBXMLBuffer;
struct WBXMLList_s;
typedef struct WBXMLParser_s WBXMLParser;
typedef struct _75F7E626134BF34BF20657FC27D19BCE WMShellPart;
typedef struct _WidgetClassRec *WidgetClass;
typedef struct _WorkProcRec WorkProcRec;
typedef struct _XAnimCursor XAnimCursor;
typedef struct _9C05987122A935634D9A0959094DDFFC XAssocTable;
typedef struct _XButtonInfo XButtonInfo;
typedef struct _53996C97E395EF20FC508697C3EEF92C XCharStruct;
typedef struct _XDeviceInfo XDeviceInfo;
typedef struct _C2A18E44A509FAD040F54243FD2340D8 XETrapDatum;
typedef struct _80BF1CA6AF87AF0DC64498AC611B3C23 XETrapFlags;
typedef struct _75655E49B9147F5ECABE2329F0193DCC XErrorEvent;
typedef unsigned int XEventClass;
typedef struct _B36C03EE0DB03800CDBEDA1CF8CFFD5F XFontStruct;
typedef struct _XGlyphElt16 XGlyphElt16;
typedef struct _XGlyphElt32 XGlyphElt32;
typedef struct _8FAAC4C6A9B09454B312C1AFE3312BB1 XICCallback;
typedef struct _E1655291D14CE59495117F42FECB583D XIMCallback;
typedef unsigned int XIMFeedback;
typedef struct _XIndexValue XIndexValue;
typedef struct _DCB8A1A5DF0C1422D7122422CAF2D078 XInputClass;
typedef struct _XKeyInfo *XKeyInfoPtr;
typedef struct XML_cp XML_Content;
typedef struct _FCE7B9AB8EE8DD1EB8924ED5C32F7044 XML_Feature;
enum XML_Parsing {XML_INITIALIZED = 0x0,XML_PARSING = 0x1,XML_FINISHED = 0x2,XML_SUSPENDED = 0x3,};
typedef struct xmesa_buffer *XMesaBuffer;
typedef struct xmesa_visual *XMesaVisual;
typedef struct _3E84D1386F10E26A4E3E4F22FDD3C8B8 XOMFontInfo;
typedef struct _XPointFixed XPointFixed;
typedef struct _648D5B97A5A1D2D2729A4C51B6643734 XTextItem16;
typedef struct _0B57ACDB47B389BE1AB4C5797C92E9F4 XUnmapEvent;
typedef struct _0118C954C4C10A412A94DFE5F40A710D XVisualInfo;
typedef struct _XawTextUndo XawTextUndo;
typedef int XcursorBool;
typedef struct _XcursorFile XcursorFile;
typedef unsigned int XcursorUInt;
typedef struct _XftCharSpec XftCharSpec;
typedef struct _XftFontInfo XftFontInfo;
typedef struct _XkbAnyEvent XkbAnyEvent;
typedef struct _XkbBehavior XkbBehavior;
typedef struct _XkbColor *XkbColorPtr;
typedef struct _XkbColor XkbColorRec;
typedef struct _XkbFileInfo XkbFileInfo;
typedef struct _XkbNamesRec *XkbNamesPtr;
typedef struct _XkbNamesRec XkbNamesRec;
typedef struct _XkbPoint *XkbPointPtr;
typedef struct _XkbPoint XkbPointRec;
typedef struct _XkbShape *XkbShapePtr;
typedef struct _XkbShape XkbShapeRec;
typedef struct _XkbStateRec *XkbStatePtr;
typedef struct _XkbStateRec XkbStateRec;
typedef struct _9C224668B7E64BE6AE9499E6FD772938 XmbTextItem;
typedef struct _XmuCvtCache XmuCvtCache;
typedef struct _XmuScanline XmuScanline;
typedef struct _4FE7A0243530ED5D54F44C34328C369B XpauContext;
typedef struct _5B111F5C4E48B86FA81A443B3B21CC9D *XpuPlexList;
typedef struct _XrmHashBucketRec *XrmDatabase;
typedef struct _0B741672733CFD1AAF50D1A5E3ACE892 XrmResource;
typedef struct _48974C792553FBFA318CEC22C625F222 *XrmValuePtr;
typedef struct _XtAppStruct XtAppStruct;
typedef int XtCacheType;
typedef struct _XtDeviceRec XtDeviceRec;
typedef char XtGeneology;
typedef unsigned int XtInputMask;
typedef struct _7768503639F77374B09C8CE2FF45E7E1 *XtPopdownID;
typedef unsigned int XtValueMask;
typedef struct _12CB43F8B5E82306BEFC9B5BEF52A53F XvAttribute;
typedef struct _EE65B23A4559DB1BF795CF28121204EB XvMCContext;
typedef struct _XvMCQMatrix XvMCQMatrix;
typedef struct _34E3615AA1F5E404F43F7626305BA1D6 XvMCSurface;
typedef struct _4D69B6347F056FE268056727CEA155AA XwcTextItem;
struct _DestroyRec;
struct _ExifLoader;
struct _FSPropInfo {unsigned int num_offsets;unsigned int data_len;};
typedef void (*_GLUfuncptr)();
typedef struct _15A7CADFA0C3B6AF2858DE2248F61F64 _G_fpos64_t;
typedef unsigned int _G_uint16_t;
typedef unsigned int _G_uint32_t;
typedef struct _XExten _XExtension;
struct _XGlyphInfo {unsigned short width;unsigned short height;short x;short y;short xOff;short yOff;};
struct _XSyncValue {int hi;unsigned int lo;};
struct _XkbRF_Rule {int number;int layout_num;int variant_num;char *model;char *layout;char *variant;char *option;char *keycodes;char *symbols;char *types;char *compat;char *geometry;char *keymap;unsigned int flags;};
struct _XmuSegment {int x1;int x2;struct _XmuSegment *next;};
typedef int __blksize_t;
typedef int __clockid_t;
struct __dirstream;
typedef unsigned short __ipc_pid_t;
typedef struct _1A16B277A945B8F62DE8883A2D91AFD9 __mbstate_t;
enum __ns_opcode {ns_o_query = 0x0,ns_o_iquery = 0x1,ns_o_status = 0x2,ns_o_notify = 0x4,ns_o_update = 0x5,ns_o_max = 0x6,};
typedef unsigned int __socklen_t;
struct _libc_fpreg {unsigned short significand[4];unsigned short exponent;};
struct _zlibbuffer {char *bufbase;char *bufend;char *bufptr;int bufcnt;};
enum accept_stat {SUCCESS = 0x0,PROG_UNAVAIL = 0x1,PROG_MISMATCH = 0x2,PROC_UNAVAIL = 0x3,GARBAGE_ARGS = 0x4,SYSTEM_ERR = 0x5,};
struct argp_option { char *name;int key; char *arg;int flags; char *doc;int group;};
typedef int bfd_boolean;
enum bfd_flavour {bfd_target_unknown_flavour = 0x0,bfd_target_aout_flavour = 0x1,bfd_target_coff_flavour = 0x2,bfd_target_ecoff_flavour = 0x3,bfd_target_xcoff_flavour = 0x4,bfd_target_elf_flavour = 0x5,bfd_target_ieee_flavour = 0x6,bfd_target_nlm_flavour = 0x7,bfd_target_oasys_flavour = 0x8,bfd_target_tekhex_flavour = 0x9,bfd_target_srec_flavour = 0xA,bfd_target_ihex_flavour = 0xB,bfd_target_som_flavour = 0xC,bfd_target_os9k_flavour = 0xD,bfd_target_versados_flavour = 0xE,bfd_target_msdos_flavour = 0xF,bfd_target_ovax_flavour = 0x10,bfd_target_evax_flavour = 0x11,bfd_target_mmo_flavour = 0x12,bfd_target_mach_o_flavour = 0x13,bfd_target_pef_flavour = 0x14,bfd_target_pef_xlib_flavour = 0x15,bfd_target_sym_flavour = 0x16,};
typedef long long bfd_int64_t;
typedef char *bp_fileid_t;
typedef struct _DE2D2D600621BF6A9A3C6AB05D887D2A cisco_proto;
struct copr_buffer {int command;int flags;int len;int offs;unsigned char data[4000];};
typedef struct _95F74D7453875C15752E25CB7F1BF0CB deviceFocus;
struct elf_siginfo {int si_signo;int si_code;int si_errno;};
struct error_table { char * *msgs;int base;int n_msgs;};
struct exit_status {short e_termination;short e_exit;};
typedef struct _875800A09C817D61F833D1479DE8ED86 fsConnSetup;
typedef struct _3BE679DC1FFA371624A790DBC1F4853A fsFontError;
typedef struct _FCE16AE268B388C13B857015D638E9ED fsNameError;
typedef struct _CCAFB83A0FC0BF591DA5D736B6BAF8AE fsXCharInfo;
typedef struct _8D66564F98126883EE28AC7CFF4C7324 iceErrorMsg;
typedef signed char int_fast8_t;
typedef struct _79997B0BE24A7D700C550979629A1B8E jas_image_t;
enum log_entry_t {LOG_NOP = 0x0,ADD_NAME = 0x1,REM_NAME = 0x2,MOD_NAME_OLD = 0x3,MOD_NAME_NEW = 0x4,ADD_IBASE = 0x5,REM_IBASE = 0x6,MOD_IBASE = 0x7,UPD_STAMP = 0x8,};
typedef struct lt_dlhandle_struct *lt_dlhandle;
struct lt_dlloader;
struct packet_mreq {int mr_ifindex;unsigned short mr_type;unsigned short mr_alen;unsigned char mr_address[8];};
typedef struct pcap_addr pcap_addr_t;
struct pcap_dumper;
enum reject_stat {RPC_MISMATCH = 0x0,AUTH_ERROR = 0x1,};
struct rex_ttysize {int ts_lines;int ts_cols;};
struct rrd_context {int len;int errlen;char *lib_errstr;char *rrd_error;};
typedef double rrd_value_t;
typedef unsigned short sa_family_t;
struct sched_param {int __sched_priority;};
typedef struct sg_io_hdr sg_io_hdr_t;
struct sg_req_info {char req_state;char orphan;char sg_io_owned;char problem;int pack_id;void *usr_ptr;unsigned int duration;int unused;};
struct sockaddr_ll {unsigned short sll_family;unsigned short sll_protocol;int sll_ifindex;unsigned short sll_hatype;unsigned char sll_pkttype;unsigned char sll_halen;unsigned char sll_addr[8];};
typedef struct _EE1B24C0A7B1D7D53B85F68543B9F050 st_effect_t;
typedef struct st_format st_format_t;
typedef struct _symbol_info symbol_info;
typedef struct td_notify td_notify_t;
struct td_ta_stats {int nthreads;int r_concurrency;int nrunnable_num;int nrunnable_den;int a_concurrency_num;int a_concurrency_den;int nlwps_num;int nlwps_den;int nidle_num;int nidle_den;};
struct td_thragent;
struct utmpidlearr {struct utmpidle **uia_arr;int uia_cnt;};
typedef struct _xButtonInfo xButtonInfo;
typedef struct _0C4B847EA89D426433C47107E0756204 xDMXSyncReq;
typedef struct _xDeviceInfo xDeviceInfo;
typedef struct _FEC8B8888F3B689040694BF1F630E941 xGrabKeyReq;
typedef struct _194914D9D4C0AE9A8FC55BCBB00ED166 xIndexValue;
typedef struct _xKeyInfo *xKeyInfoPtr;
typedef struct _FFDDF8AD41840F2444187795E69FE4AB xLbxSyncReq;
typedef struct _29CF6037BDB08BCCAAEBB0F049E81934 xPictScreen;
typedef struct _0CA5FB17303BD72ED823DD36CD7B7A7D xPictVisual;
typedef struct _0B4ED8A417FCECA210AD3881277BFA25 xPointFixed;
typedef struct _528C256D64E70EF258C44321FAFFDA35 xVisualType;
typedef struct _E0F65D5058ACC2BC5F9AF2EDFFAF29D1 xWindowRoot;
typedef struct _4C6601BAE3B7FB7226E40FC6ABCCD221 xXResClient;
enum xcb_allow_t {XCB_ALLOW_ASYNC_POINTER = 0x0,XCB_ALLOW_SYNC_POINTER = 0x1,XCB_ALLOW_REPLAY_POINTER = 0x2,XCB_ALLOW_ASYNC_KEYBOARD = 0x3,XCB_ALLOW_SYNC_KEYBOARD = 0x4,XCB_ALLOW_REPLAY_KEYBOARD = 0x5,XCB_ALLOW_ASYNC_BOTH = 0x6,XCB_ALLOW_SYNC_BOTH = 0x7,};
enum xcb_place_t {XCB_PLACE_ON_TOP = 0x0,XCB_PLACE_ON_BOTTOM = 0x1,};
typedef struct _xkbAnyEvent xkbAnyEvent;
typedef struct _xkmFileInfo xkmFileInfo;
typedef struct _xkmModsDesc xkmModsDesc;
typedef struct _ActionHookRec *ActionHook;
typedef struct _buffile *BufFilePtr;
typedef struct _buffile BufFileRec;
typedef struct _CommandRec CommandRec;
typedef struct _WidgetRec *CoreWidget;
typedef struct _DestroyRec DestroyRec;
typedef struct _DialogPart DialogPart;
typedef struct _160641F2D897670075418D2E6B733231 Elf32_Ehdr;
typedef struct _2A4C46EAAE865C05377B30846399D3D1 Elf32_Move;
typedef struct _8A4D2DD0535D3740C9D9302B62B9E8F3 Elf32_Nhdr;
typedef struct _74E95F720A863C1E402D38672975CCC6 Elf32_Phdr;
typedef struct _AAECD496E21460385AB9540869BF9C78 Elf32_Rela;
typedef struct _0F2B39C4889BFBA0BBC9C66D38A1F5D3 Elf32_Shdr;
typedef struct _31DC1A9A30C8BE83503485AFF4563DAB Elf64_Ehdr;
typedef struct _8D40ACCAC6057C8589735CF1D51B872E Elf64_Move;
typedef struct _CA18D99C52BF47BA3661A7BE783B3F23 Elf64_Nhdr;
typedef struct _9D24C8DB1BE3DD751F7CBDF214675376 Elf64_Phdr;
typedef struct _4664B325D7B1C568276997F8FB024EC2 Elf64_Rela;
typedef struct _6C157D281FCCF3AD18E5920BAFADC6E6 Elf64_Shdr;
typedef struct _ExifLoader ExifLoader;
typedef void *FIELD_CELL;
typedef struct _F0E4D660A9A04229E05BDCB7A8A9731A FSAnyEvent;
typedef struct _BEA3E970906BDE5578391186783FC521 FSExtCodes;
typedef struct _FSPropInfo FSPropInfo;
typedef struct FTC_FaceIDRec_ *FTC_FaceID;
typedef struct FTC_ScalerRec_ *FTC_Scaler;
struct FT_Bitmap_ {int rows;int width;int pitch;unsigned char *buffer;short num_grays;char pixel_mode;char palette_mode;void *palette;};
typedef struct FT_CharMapRec_ *FT_CharMap;
typedef signed int FT_F26Dot6;
typedef signed short FT_F2Dot14;
typedef struct FT_FaceRec_ FT_FaceRec;
typedef struct FT_Generic_ FT_Generic;
typedef struct FT_LibraryRec_ *FT_Library;
typedef struct FT_ListRec_ FT_ListRec;
typedef struct FT_MM_Axis_ FT_MM_Axis;
typedef struct FT_Outline_ FT_Outline;
typedef void *FT_Pointer;
typedef struct FT_SizeRec_ FT_SizeRec;
typedef struct FT_StrokerRec_ *FT_Stroker;
typedef struct _FcConstant FcConstant;
typedef struct _FontEnc *FontEncPtr;
typedef struct _FontEnc FontEncRec;
typedef struct _FontMap *FontMapPtr;
typedef struct _FontMap FontMapRec;
typedef struct _BBC1C953EE608EAB448834AFD8261F09 FontModule;
typedef struct _FormRec *FormWidget;
struct GLUquadric;
typedef struct __GLXcontextRec *GLXContext;
typedef unsigned int GLbitfield;
enum Gpm_Margin {GPM_TOP = 0x1,GPM_BOT = 0x2,GPM_LFT = 0x4,GPM_RGT = 0x8,};
typedef struct _GripRec *GripWidget;
typedef struct _HookObjRec HookObjRec;
typedef struct _HookObjRec *HookObject;
typedef void *IcePointer;
typedef struct _InputEvent InputEvent;
typedef struct _ListRec *ListWidget;
enum MACRO_ACCT {ACCT_COMM = 16,};
enum MACRO_AFMT {AFMT_QUERY = 0x0,AFMT_MU_LAW = 0x1,AFMT_A_LAW = 0x2,AFMT_IMA_ADPCM = 0x4,AFMT_U8 = 0x8,AFMT_S16_LE = 0x10,AFMT_S16_BE = 0x20,AFMT_S8 = 0x40,AFMT_U16_LE = 0x80,AFMT_U16_BE = 0x100,AFMT_MPEG = 0x200,AFMT_AC3 = 0x400,};
enum MACRO_ANSI {ANSI_PROTOTYPES = 1,};
enum MACRO_ANYP {ANYP = 0xC0,NLDELAY = 0x300,};
enum MACRO_ARGP {ARGP_ERR_UNKNOWN = 7,ARGP_KEY_ARG = 0,ARGP_KEY_ARGS = 16777222,ARGP_KEY_END = 16777217,ARGP_KEY_NO_ARGS = 16777218,ARGP_KEY_INIT = 16777219,ARGP_KEY_FINI = 16777223,ARGP_KEY_SUCCESS = 16777220,ARGP_KEY_ERROR = 16777221,ARGP_KEY_HELP_PRE_DOC = 33554433,ARGP_KEY_HELP_POST_DOC = 33554434,ARGP_KEY_HELP_HEADER = 33554435,ARGP_KEY_HELP_EXTRA = 33554436,ARGP_KEY_HELP_DUP_ARGS_NOTE = 33554437,ARGP_KEY_HELP_ARGS_DOC = 33554438,ARGP_PARSE_ARGV0 = 1,ARGP_NO_ERRS = 2,ARGP_NO_ARGS = 4,ARGP_IN_ORDER = 8,ARGP_NO_HELP = 16,ARGP_NO_EXIT = 32,ARGP_LONG_ONLY = 64,ARGP_SILENT = 50,ARGP_HELP_USAGE = 1,ARGP_HELP_SHORT_USAGE = 2,ARGP_HELP_SEE = 4,ARGP_HELP_LONG = 8,ARGP_HELP_PRE_DOC = 16,ARGP_HELP_POST_DOC = 32,ARGP_HELP_DOC = 48,ARGP_HELP_BUG_ADDR = 64,ARGP_HELP_LONG_ONLY = 128,ARGP_HELP_EXIT_ERR = 256,ARGP_HELP_EXIT_OK = 512,ARGP_HELP_STD_ERR = 260,ARGP_HELP_STD_USAGE = 262,ARGP_HELP_STD_HELP = 634,};
enum MACRO_ARPD {ARPD_UPDATE = 0x1,ARPD_LOOKUP = 0x2,ARPD_FLUSH = 0x3,};
enum MACRO_AUTH {AUTH_WHO_CLIENT = 0,AUTH_WHO_SERVER = 1,AUTH_WHO_MASK = 1,AUTH_HOW_ONE_WAY = 0,AUTH_HOW_MUTUAL = 2,AUTH_HOW_MASK = 2,};
enum MACRO_AX25 {AX25_WINDOW = 1,AX25_T1 = 2,AX25_T2 = 5,AX25_T3 = 4,AX25_N2 = 3,AX25_BACKOFF = 6,AX25_EXTSEQ = 7,AX25_PIDINCL = 8,AX25_IDLE = 9,AX25_PACLEN = 10,AX25_IPMAXQUEUE = 11,AX25_IAMDIGI = 12,AX25_KILL = 99,};
enum MACRO_B110 {B110 = 0x3,B134 = 0x4,};
enum MACRO_B150 {B150 = 0x5,};
enum MACRO_B200 {B200 = 0x6,};
enum MACRO_B300 {B300 = 0x7,B600 = 0x8,};
enum MACRO_BITS {BITS_PER_WORD = 32,};
enum MACRO_BOOL {TRUE = 1,FALSE = 0,};
enum MACRO_BUSY {BUSY = 0x4,};
enum MACRO_BYTE {BYTE_ORDER = 1234,};
enum MACRO_Bool {True = 1,False = 0,};
enum MACRO_CBRK {CBRK = 0,CRPRNT = 18,};
enum MACRO_CDDA {CDDA_MESSAGE_FORGETIT = 0,CDDA_MESSAGE_PRINTIT = 1,CDDA_MESSAGE_LOGIT = 2,};
enum MACRO_CEOF {CEOF = 4,};
enum MACRO_CEOL {CEOL = 0,CERASE = 127,};
enum MACRO_CEOT {CEOT = 4,};
enum MACRO_CMAP {GIO_CMAP = 0x4B70,PIO_CMAP = 0x4B71,};
enum MACRO_CMIN {CMIN = 1,CQUIT = 28,};
enum MACRO_COLL {COLL_WEIGHTS_MAX = 255,EXPR_NEST_MAX = 32,LINE_MAX = 2048,CHARCLASS_NAME_MAX = 2048,};
enum MACRO_COPY {COPY = 0x18,};
enum MACRO_CTRL {CTRL_PITCH_BENDER = 255,CTRL_PITCH_BENDER_RANGE = 254,CTRL_EXPRESSION = 253,CTRL_MAIN_VOLUME = 252,};
enum MACRO_DATA {DATA = 0x3,ACK = 0x4,};
enum MACRO_DF_1 {DF_1_NOW = 0x1,DF_1_GLOBAL = 0x2,DF_1_GROUP = 0x4,DF_1_NODELETE = 0x8,DF_1_LOADFLTR = 0x10,DF_1_INITFIRST = 0x20,DF_1_NOOPEN = 0x40,DF_1_ORIGIN = 0x80,DF_1_DIRECT = 0x100,DF_1_TRANS = 0x200,DF_1_INTERPOSE = 0x400,DF_1_NODEFLIB = 0x800,DF_1_NODUMP = 0x1000,DF_1_CONFALT = 0x2000,DF_1_ENDFILTEE = 0x4000,DF_1_DISPRELDNE = 0x8000,DF_1_DISPRELPND = 0x10000,};
enum MACRO_DMGL {DMGL_NO_OPTS = 0,DMGL_PARAMS = 1,DMGL_ANSI = 2,DMGL_JAVA = 4,DMGL_VERBOSE = 8,DMGL_TYPES = 16,DMGL_RET_POSTFIX = 32,DMGL_AUTO = 256,DMGL_GNU = 512,DMGL_LUCID = 1024,DMGL_ARM = 2048,DMGL_HP = 4096,DMGL_EDG = 8192,DMGL_GNU_V3 = 16384,DMGL_GNAT = 32768,DMGL_STYLE_MASK = 65284,};
enum MACRO_DONT {DONT = 254,};
enum MACRO_Dont {Dont_Check = 0,};
enum MACRO_EXEC {EXEC_P = 0x2,};
enum MACRO_EXIF {EXIF_TAG_GPS_VERSION_ID = 0x0,EXIF_TAG_GPS_LATITUDE_REF = 0x1,EXIF_TAG_GPS_LATITUDE = 0x2,EXIF_TAG_GPS_LONGITUDE_REF = 0x3,EXIF_TAG_GPS_LONGITUDE = 0x4,EXIF_TAG_GPS_ALTITUDE_REF = 0x5,EXIF_TAG_GPS_ALTITUDE = 0x6,EXIF_TAG_GPS_TIME_STAMP = 0x7,EXIF_TAG_GPS_SATELLITES = 0x8,EXIF_TAG_GPS_STATUS = 0x9,EXIF_TAG_GPS_MEASURE_MODE = 0xA,EXIF_TAG_GPS_DOP = 0xB,EXIF_TAG_GPS_SPEED_REF = 0xC,EXIF_TAG_GPS_SPEED = 0xD,EXIF_TAG_GPS_TRACK_REF = 0xE,EXIF_TAG_GPS_TRACK = 0xF,EXIF_TAG_GPS_IMG_DIRECTION_REF = 0x10,EXIF_TAG_GPS_IMG_DIRECTION = 0x11,EXIF_TAG_GPS_MAP_DATUM = 0x12,EXIF_TAG_GPS_DEST_LATITUDE_REF = 0x13,EXIF_TAG_GPS_DEST_LATITUDE = 0x14,EXIF_TAG_GPS_DEST_LONGITUDE_REF = 0x15,EXIF_TAG_GPS_DEST_LONGITUDE = 0x16,EXIF_TAG_GPS_DEST_BEARING_REF = 0x17,EXIF_TAG_GPS_DEST_BEARING = 0x18,EXIF_TAG_GPS_DEST_DISTANCE_REF = 0x19,EXIF_TAG_GPS_DEST_DISTANCE = 0x1A,EXIF_TAG_GPS_PROCESSING_METHOD = 0x1B,EXIF_TAG_GPS_AREA_INFORMATION = 0x1C,EXIF_TAG_GPS_DATE_STAMP = 0x1D,EXIF_TAG_GPS_DIFFERENTIAL = 0x1E,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EXTA {EXTA = 14,};
enum MACRO_EXTB {EXTB = 15,CSIZE = 48,};
enum MACRO_E_OK {E_OK = 0,E_SYSTEM_ERROR = -1,E_BAD_ARGUMENT = -2,E_POSTED = -3,E_CONNECTED = -4,E_BAD_STATE = -5,E_NO_ROOM = -6,E_NOT_POSTED = -7,E_UNKNOWN_COMMAND = -8,E_NO_MATCH = -9,E_NOT_SELECTABLE = -10,E_NOT_CONNECTED = -11,E_REQUEST_DENIED = -12,E_INVALID_FIELD = -13,E_CURRENT = -14,};
enum MACRO_FDDI {FDDI_K_ALEN = 6,FDDI_K_8022_HLEN = 16,FDDI_K_SNAP_HLEN = 21,FDDI_K_8022_ZLEN = 16,FDDI_K_SNAP_ZLEN = 21,FDDI_K_8022_DLEN = 4475,FDDI_K_SNAP_DLEN = 4470,FDDI_K_LLC_ZLEN = 13,FDDI_K_LLC_LEN = 4491,FDDI_FC_K_VOID = 0,FDDI_FC_K_NON_RESTRICTED_TOKEN = 128,FDDI_FC_K_RESTRICTED_TOKEN = 192,FDDI_FC_K_SMT_MIN = 65,FDDI_FC_K_SMT_MAX = 79,FDDI_FC_K_MAC_MIN = 193,FDDI_FC_K_MAC_MAX = 207,FDDI_FC_K_ASYNC_LLC_MIN = 80,FDDI_FC_K_ASYNC_LLC_DEF = 84,FDDI_FC_K_ASYNC_LLC_MAX = 95,FDDI_FC_K_SYNC_LLC_MIN = 208,FDDI_FC_K_SYNC_LLC_MAX = 215,FDDI_FC_K_IMPLEMENTOR_MIN = 96,FDDI_FC_K_IMPLEMENTOR_MAX = 111,FDDI_FC_K_RESERVED_MIN = 112,FDDI_FC_K_RESERVED_MAX = 127,FDDI_EXTENDED_SAP = 170,FDDI_UI_CMD = 3,FDDI_K_OUI_LEN = 3,};
enum MACRO_FIVE {FIVE = 5,};
enum MACRO_FONT {GIO_FONT = 0x4B60,PIO_FONT = 0x4B61,};
enum MACRO_FORM {FORM_N = 1,FORM_T = 2,FORM_C = 3,};
enum MACRO_FS_0 {FS = 9,};
enum MACRO_GDBM {GDBM_READER = 0,GDBM_WRITER = 1,GDBM_WRCREAT = 2,GDBM_NEWDB = 3,GDBM_FAST = 16,GDBM_SYNC = 32,GDBM_NOLOCK = 64,GDBM_INSERT = 0,GDBM_REPLACE = 1,GDBM_CACHESIZE = 1,GDBM_FASTMODE = 2,GDBM_SYNCMODE = 3,GDBM_CENTFREE = 4,GDBM_COALESCEBLKS = 5,GDBM_NO_ERROR = 0,GDBM_MALLOC_ERROR = 1,GDBM_BLOCK_SIZE_ERROR = 2,GDBM_FILE_OPEN_ERROR = 3,GDBM_FILE_WRITE_ERROR = 4,GDBM_FILE_SEEK_ERROR = 5,GDBM_FILE_READ_ERROR = 6,GDBM_BAD_MAGIC_NUMBER = 7,GDBM_EMPTY_DATABASE = 8,GDBM_CANT_BE_READER = 9,GDBM_CANT_BE_WRITER = 10,GDBM_READER_CANT_DELETE = 11,GDBM_READER_CANT_STORE = 12,GDBM_READER_CANT_REORGANIZE = 13,GDBM_UNKNOWN_UPDATE = 14,GDBM_ITEM_NOT_FOUND = 15,GDBM_REORGANIZE_FAILED = 16,GDBM_CANNOT_REPLACE = 17,GDBM_ILLEGAL_DATA = 18,GDBM_OPT_ALREADY_SET = 19,GDBM_OPT_ILLEGAL = 20,};
enum MACRO_GLOB {GLOB_ERR = 1,GLOB_MARK = 2,GLOB_NOSORT = 4,GLOB_DOOFFS = 8,GLOB_NOCHECK = 16,GLOB_APPEND = 32,GLOB_NOESCAPE = 64,GLOB_PERIOD = 128,GLOB_MAGCHAR = 256,GLOB_ALTDIRFUNC = 512,GLOB_BRACE = 1024,GLOB_NOMAGIC = 2048,GLOB_TILDE = 4096,GLOB_ONLYDIR = 8192,GLOB_TILDE_CHECK = 16384,};
enum MACRO_GMON {GMON_PROF_ON = 0,GMON_PROF_BUSY = 1,GMON_PROF_ERROR = 2,GMON_PROF_OFF = 3,};
enum MACRO_GOOD {GOOD = 0x0,};
enum MACRO_GXor {GXor = 0x7,GXnor = 0x8,};
enum MACRO_HARD {HARD_LOOKUP = 4,};
enum MACRO_HAVE {HAVE_TERMIOS_H = 1,HAVE_TCGETATTR = 1,};
enum MACRO_HOST {HOST_NOT_FOUND = 1,};
enum MACRO_HTAB {HTAB_EMPTY_ENTRY = 0,HTAB_DELETED_ENTRY = 1,};
enum MACRO_ICMP {ICMP_ECHOREPLY = 0,ICMP_DEST_UNREACH = 3,ICMP_SOURCE_QUENCH = 4,ICMP_REDIRECT = 5,ICMP_ECHO = 8,ICMP_TIME_EXCEEDED = 11,ICMP_PARAMETERPROB = 12,ICMP_TIMESTAMP = 13,ICMP_TIMESTAMPREPLY = 14,ICMP_INFO_REQUEST = 15,ICMP_INFO_REPLY = 16,ICMP_ADDRESS = 17,ICMP_ADDRESSREPLY = 18,};
enum MACRO_IGMP {IGMP_MINLEN = 8,IGMP_MEMBERSHIP_QUERY = 17,IGMP_V1_MEMBERSHIP_REPORT = 18,IGMP_V2_MEMBERSHIP_REPORT = 22,IGMP_V2_LEAVE_GROUP = 23,IGMP_DVMRP = 19,IGMP_PIM = 20,IGMP_TRACE = 21,IGMP_MTRACE_RESP = 30,IGMP_MTRACE = 31,IGMP_MAX_HOST_REPORT_DELAY = 10,IGMP_TIMER_SCALE = 10,IGMP_DELAYING_MEMBER = 1,IGMP_IDLE_MEMBER = 2,IGMP_LAZY_MEMBER = 3,IGMP_SLEEPING_MEMBER = 4,IGMP_AWAKENING_MEMBER = 5,IGMP_v1_ROUTER = 1,IGMP_v2_ROUTER = 2,IGMP_HOST_MEMBERSHIP_QUERY = 17,IGMP_HOST_MEMBERSHIP_REPORT = 18,IGMP_HOST_NEW_MEMBERSHIP_REPORT = 22,IGMP_HOST_LEAVE_MESSAGE = 23,};
enum MACRO_INSN {INSN_HAS_RELOC = 0x80000000,};
enum MACRO_IP6F {IP6F_OFF_MASK = 0xF8FF,IP6F_RESERVED_MASK = 0x600,IP6F_MORE_FRAG = 0x100,};
enum MACRO_IPV6 {IPV6_ADDRFORM = 1,IPV6_2292PKTINFO = 2,IPV6_2292HOPOPTS = 3,IPV6_2292DSTOPTS = 4,IPV6_2292RTHDR = 5,IPV6_2292PKTOPTIONS = 6,IPV6_CHECKSUM = 7,IPV6_2292HOPLIMIT = 8,IPV6_NEXTHOP = 9,IPV6_AUTHHDR = 10,IPV6_UNICAST_HOPS = 16,IPV6_MULTICAST_IF = 17,IPV6_MULTICAST_HOPS = 18,IPV6_MULTICAST_LOOP = 19,IPV6_JOIN_GROUP = 20,IPV6_LEAVE_GROUP = 21,IPV6_ROUTER_ALERT = 22,IPV6_MTU_DISCOVER = 23,IPV6_MTU = 24,IPV6_RECVERR = 25,IPV6_V6ONLY = 26,IPV6_JOIN_ANYCAST = 27,IPV6_LEAVE_ANYCAST = 28,IPV6_IPSEC_POLICY = 34,IPV6_XFRM_POLICY = 35,IPV6_RECVPKTINFO = 49,IPV6_PKTINFO = 50,IPV6_RECVHOPLIMIT = 51,IPV6_HOPLIMIT = 52,IPV6_RECVHOPOPTS = 53,IPV6_HOPOPTS = 54,IPV6_RTHDRDSTOPTS = 55,IPV6_RECVRTHDR = 56,IPV6_RTHDR = 57,IPV6_RECVDSTOPTS = 58,IPV6_DSTOPTS = 59,IPV6_RECVTCLASS = 66,IPV6_TCLASS = 67,IPV6_ADD_MEMBERSHIP = 20,IPV6_DROP_MEMBERSHIP = 21,IPV6_RXHOPOPTS = 54,IPV6_RXDSTOPTS = 59,IPV6_PMTUDISC_DONT = 0,IPV6_PMTUDISC_WANT = 1,IPV6_PMTUDISC_DO = 2,};
enum MACRO_IP_0 {IP = 244,};
enum MACRO_ISIG {ISIG = 0x1,ICANON = 0x2,XCASE = 0x4,ECHO = 0x8,ECHOE = 0x10,ECHOK = 0x20,ECHONL = 0x40,NOFLSH = 0x80000000,};
enum MACRO_JAWT {JAWT_VERSION_1_3 = 0x10003,JAWT_VERSION_1_4 = 0x10004,JAWT_LOCK_ERROR = 0x1,JAWT_LOCK_CLIP_CHANGED = 0x2,JAWT_LOCK_BOUNDS_CHANGED = 0x4,JAWT_LOCK_SURFACE_CHANGED = 0x8,};
enum MACRO_LIST {LIST_ALIASES_AND_TARGET_NAMES = 1,};
enum MACRO_LOCK {LOCK_SH = 1,LOCK_EX = 2,LOCK_NB = 4,LOCK_UN = 8,};
enum MACRO_LOCL {LOCL_STARTAUDIO = 1,};
enum MACRO_LONG {READ_LONG = 0x3E,WRITE_LONG = 0x3F,};
enum MACRO_LOOK {LOOK_UP = 1,};
enum MACRO_LTDL {LTDL_H = 1,};
enum MACRO_MADV {MADV_NORMAL = 0,MADV_RANDOM = 1,MADV_SEQUENTIAL = 2,MADV_WILLNEED = 3,MADV_DONTNEED = 4,MADV_REMOVE = 9,MADV_DONTFORK = 10,MADV_DOFORK = 11,};
enum MACRO_MASK {DRIVER_MASK = 0xF,SUGGEST_MASK = 0xF0,};
enum MACRO_MIDI {MIDI_TYPE_MPU401 = 0x401,};
enum MACRO_MODE {MODE_S = 1,MODE_B = 2,MODE_C = 3,};
enum MACRO_MORE {MORE_EVENTS = 0x80,};
enum MACRO_MOVE {MOVE_MEDIUM = 0xA5,};
enum MACRO_MPPE {CI_MPPE = 18,CILEN_MPPE = 6,};
enum MACRO_NAME {NAME_MAX = 255,PATH_MAX = 4096,};
enum MACRO_NBPG {NBPG = 4096,};
enum MACRO_NCCS {NCCS = 32,};
enum MACRO_NFS4 {NFS4_MAX_DOMAIN_LEN = 512,};
enum MACRO_NINE {NINE = 9,};
enum MACRO_NSIG {NSIG = 65,};
enum MACRO_NSLC {NSLC = 18,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_None {None = 0,ParentRelative = 1,};
enum MACRO_OKAY {OKAY = 0,};
enum MACRO_OK_0 {OK = 0,_SUBWIN = 1,_ENDLINE = 2,_FULLWIN = 4,_SCROLLWIN = 8,_ISPAD = 16,_HASMOVED = 32,_WRAPPED = 64,};
enum MACRO_OPAD {OPAD_PREFIX = 0x1,OPAD_POSTFIX = 0x2,OPAD_SYMBOL = 0x4,};
enum MACRO_ORIG {ORIG_EAX = 11,};
enum MACRO_PAGE {PAGE_SHIFT = 12,PAGE_SIZE = 4096,PAGE_MASK = -4096,};
enum MACRO_PCAP {PCAP_VERSION_MAJOR = 2,PCAP_VERSION_MINOR = 4,PCAP_ERRBUF_SIZE = 256,PCAP_IF_LOOPBACK = 1,};
enum MACRO_PCIE {PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_ALT1 = 0xF0,PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT1 = 0xF1,PCIE_DEVICE_ID_NVIDIA_GEFORCE_6600_ALT2 = 0xF2,PCIE_DEVICE_ID_NVIDIA_GEFORCE_6200_ALT1 = 0xF3,PCIE_DEVICE_ID_NVIDIA_GEFORCE_6800_GT = 0xF9,PCIE_DEVICE_ID_NVIDIA_QUADRO_NVS280 = 0xFD,};
enum MACRO_PIPE {PIPE_BUF = 4096,};
enum MACRO_PRIO {PRIO_MIN = -20,PRIO_MAX = 20,};
enum MACRO_PROG {CLGET_PROG = 14,CLSET_PROG = 15,};
enum MACRO_PROT {PROT_READ = 0x1,PROT_WRITE = 0x2,PROT_EXEC = 0x4,PROT_NONE = 0x0,PROT_GROWSDOWN = 0x1000000,PROT_GROWSUP = 0x2000000,};
enum MACRO_RAND {RAND_MAX = 2147483647,};
enum MACRO_READ {READ_BLOCK_LIMITS = 0x5,};
enum MACRO_REGS {REGS_UNALLOCATED = 0,REGS_REALLOCATE = 1,REGS_FIXED = 2,};
enum MACRO_RING {RING_WAIT = 30,};
enum MACRO_ROSE {ROSE_MTU = 251,ROSE_MAX_DIGIS = 6,ROSE_DEFER = 1,ROSE_T1 = 2,ROSE_T2 = 3,ROSE_T3 = 4,ROSE_IDLE = 5,ROSE_QBITINCL = 6,ROSE_HOLDBACK = 7,};
enum MACRO_RPBM {RPBM_MAGIC2 = 52,};
enum MACRO_RPGM {RPGM_MAGIC2 = 53,};
enum MACRO_RPPM {RPPM_MAGIC2 = 54,};
enum MACRO_RTCF {RTCF_VALVE = 0x200000,RTCF_MASQ = 0x400000,RTCF_NAT = 0x800000,RTCF_DOREDIRECT = 0x1000000,RTCF_LOG = 0x2000000,RTCF_DIRECTSRC = 0x4000000,};
enum MACRO_RTLD {RTLD_LAZY = 0x1,RTLD_NOW = 0x2,RTLD_BINDING_MASK = 0x3,RTLD_NOLOAD = 0x4,RTLD_DEEPBIND = 0x8,RTLD_GLOBAL = 0x100,RTLD_LOCAL = 0x0,RTLD_NODELETE = 0x1000,};
enum MACRO_SANE {SANE_CURRENT_MAJOR = 1,SANE_FALSE = 0,SANE_TRUE = 1,SANE_FIXED_SCALE_SHIFT = 16,SANE_CAP_SOFT_SELECT = 1,SANE_CAP_HARD_SELECT = 2,SANE_CAP_SOFT_DETECT = 4,SANE_CAP_EMULATED = 8,SANE_CAP_AUTOMATIC = 16,SANE_CAP_INACTIVE = 32,SANE_CAP_ADVANCED = 64,SANE_CAP_ALWAYS_SETTABLE = 128,SANE_INFO_INEXACT = 1,SANE_INFO_RELOAD_OPTIONS = 2,SANE_INFO_RELOAD_PARAMS = 4,SANE_MAX_USERNAME_LEN = 128,SANE_MAX_PASSWORD_LEN = 128,};
enum MACRO_SCSI {SCSI_IOCTL_GET_IDLUN = 0x5382,SCSI_IOCTL_TAGGED_ENABLE = 0x5383,SCSI_IOCTL_TAGGED_DISABLE = 0x5384,SCSI_IOCTL_PROBE_HOST = 0x5385,SCSI_IOCTL_GET_BUS_NUMBER = 0x5386,SCSI_IOCTL_SEND_COMMAND = 0x1,SCSI_IOCTL_TEST_UNIT_READY = 0x2,SCSI_IOCTL_BENCHMARK_COMMAND = 0x3,SCSI_IOCTL_SYNC = 0x4,SCSI_IOCTL_START_UNIT = 0x5,SCSI_IOCTL_STOP_UNIT = 0x6,SCSI_IOCTL_DOORLOCK = 0x5380,SCSI_IOCTL_DOORUNLOCK = 0x5381,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SEND {SEND_VOLUME_TAG = 0xB6,};
enum MACRO_SIOC {SIOC_OUT = 2147483648,SIOC_IN = 1073741824,SIOC_INOUT = 3221225472,};
enum MACRO_SIZE {SIZE_MAX = -1,};
enum MACRO_SOFT {SOFT_LOOKUP = 16384,};
enum MACRO_STDC {STDC_HEADERS = 1,};
enum MACRO_STRU {STRU_F = 1,STRU_R = 2,STRU_P = 3,};
enum MACRO_SUSP {SUSP = 237,};
enum MACRO_SWAP {SWAP_FLAG_PREFER = 0x8000,SWAP_FLAG_PRIO_MASK = 0x7FFF,SWAP_FLAG_PRIO_SHIFT = 0x0,};
enum MACRO_SYNC {SYNC_MAJOR_VERSION = 3,SYNC_MINOR_VERSION = 0,};
enum MACRO_TAB0 {TAB0 = 0x0,TAB1 = 0x400,TAB2 = 0x800,};
enum MACRO_TAB3 {TAB3 = 0x1800,BSDLY = 0x2000,};
enum MACRO_TALK {TALK_VERSION = 1,};
enum MACRO_TCPI {TCPI_OPT_TIMESTAMPS = 1,TCPI_OPT_SACK = 2,TCPI_OPT_WSCALE = 4,TCPI_OPT_ECN = 8,};
enum MACRO_TEST {TEST_INTERFACE = 2,};
enum MACRO_TIME {BOOT_TIME = 2,NEW_TIME = 3,OLD_TIME = 4,};
enum MACRO_TREE {TREE_INITIAL_DEPTH = 10,TREE_HORIZONTAL_DEFAULT_SPACING = 20,TREE_VERTICAL_DEFAULT_SPACING = 6,};
enum MACRO_TTAG {TTAG_avar = 1635148146,TTAG_BASE = 1111577413,TTAG_bdat = 1650745716,TTAG_BDF = 1111770656,TTAG_bhed = 1651008868,TTAG_bloc = 1651273571,TTAG_bsln = 1651731566,TTAG_CFF = 1128678944,TTAG_cmap = 1668112752,TTAG_cvar = 1668702578,TTAG_cvt = 1668707360,TTAG_DSIG = 1146308935,TTAG_EBDT = 1161970772,TTAG_EBLC = 1161972803,TTAG_EBSC = 1161974595,TTAG_feat = 1717920116,TTAG_fpgm = 1718642541,TTAG_fvar = 1719034226,TTAG_gasp = 1734439792,TTAG_GDEF = 1195656518,TTAG_glyf = 1735162214,TTAG_GPOS = 1196445523,TTAG_GSUB = 1196643650,TTAG_gvar = 1735811442,TTAG_hdmx = 1751412088,TTAG_head = 1751474532,TTAG_hhea = 1751672161,TTAG_hmtx = 1752003704,TTAG_JSTF = 1246975046,TTAG_just = 1786082164,TTAG_kern = 1801810542,TTAG_lcar = 1818452338,TTAG_loca = 1819239265,TTAG_LTSH = 1280594760,TTAG_maxp = 1835104368,TTAG_META = 1296389185,TTAG_MMFX = 1296909912,TTAG_MMSD = 1296913220,TTAG_mort = 1836020340,TTAG_morx = 1836020344,TTAG_name = 1851878757,TTAG_opbd = 1869636196,TTAG_OS2 = 1330851634,TTAG_OTTO = 1330926671,TTAG_PCLT = 1346587732,TTAG_post = 1886352244,TTAG_prep = 1886545264,TTAG_prop = 1886547824,TTAG_SING = 1397313095,TTAG_trak = 1953653099,TTAG_true = 1953658213,TTAG_ttc = 1953784608,TTAG_ttcf = 1953784678,TTAG_VDMX = 1447316824,TTAG_vhea = 1986553185,TTAG_vmtx = 1986884728,};
enum MACRO_TUBE {TUBE_JN_RAW = 0x1,TUBE_JN_ANGLE = 0x2,TUBE_JN_CUT = 0x3,TUBE_JN_ROUND = 0x4,TUBE_JN_MASK = 0xF,TUBE_JN_CAP = 0x10,TUBE_NORM_FACET = 0x100,TUBE_NORM_EDGE = 0x200,TUBE_NORM_PATH_EDGE = 0x400,TUBE_NORM_MASK = 0xF00,TUBE_CONTOUR_CLOSED = 0x1000,};
enum MACRO_TYPE {TYPE_A = 1,TYPE_E = 2,TYPE_I = 3,TYPE_L = 4,};
enum MACRO_UESP {UESP = 15,SS = 16,};
enum MACRO_UINT {UINT_LEAST8_MAX = 255,UINT_LEAST16_MAX = 65535,UINT_LEAST32_MAX = -1,UINT_LEAST64_MAX = -1,};
enum MACRO_UNIT {UNIT_ATTENTION = 0x6,};
enum MACRO_VEOL {VEOL = 11,};
enum MACRO_VERS {CLGET_VERS = 12,CLSET_VERS = 13,};
enum MACRO_VM86 {VM86_SIGNAL = 0,VM86_UNKNOWN = 1,VM86_INTx = 2,VM86_STI = 3,VM86_PICRETURN = 4,VM86_TRAP = 6,VM86_PLUS_INSTALL_CHECK = 0,VM86_ENTER = 1,VM86_ENTER_NO_BYPASS = 2,VM86_REQUEST_IRQ = 3,VM86_FREE_IRQ = 4,VM86_GET_IRQ_BITS = 5,VM86_GET_AND_RESET_IRQ = 6,VM86_SCREEN_BITMAP = 1,};
enum MACRO_VMIN {VMIN = 6,};
enum MACRO_WAIT {WAIT_ANY = -1,WAIT_MYPGRP = 0,};
enum MACRO_WAVE {WAVE_16_BITS = 0x1,WAVE_UNSIGNED = 0x2,WAVE_LOOPING = 0x4,WAVE_BIDIR_LOOP = 0x8,WAVE_LOOP_BACK = 0x10,WAVE_SUSTAIN_ON = 0x20,WAVE_ENVELOPES = 0x40,WAVE_FAST_RELEASE = 0x80,WAVE_VIBRATO = 0x10000,WAVE_TREMOLO = 0x20000,WAVE_SCALE = 0x40000,WAVE_FRACTIONS = 0x80000,WAVE_ROM = 0x40000000,WAVE_MULAW = 0x20000000,};
enum MACRO_WEOF {WEOF = 0xFFFFFFFF,};
enum MACRO_WILL {WILL = 251,};
enum MACRO_WINT {WINT_MIN = 0,WINT_MAX = -1,};
enum MACRO_WONT {WONT = 252,};
enum MACRO_XCUP {XCUP_MAJOR_VERSION = 1,XCUP_MINOR_VERSION = 0,};
enum MACRO_XDGA {XDGA_MAJOR_VERSION = 2,XDGA_MINOR_VERSION = 0,};
enum MACRO_XEVI {XEVI_TRANSPARENCY_NONE = 0,XEVI_TRANSPARENCY_PIXEL = 1,XEVI_TRANSPARENCY_MASK = 2,};
enum MACRO_XLFD {XLFD_NDIGITS = 3,};
enum MACRO_XRES {XRES_MAJOR_VERSION = 1,XRES_MINOR_VERSION = 0,};
enum MACRO_XVMC {XVMC_CHROMA_FORMAT_420 = 0x1,XVMC_CHROMA_FORMAT_422 = 0x2,XVMC_CHROMA_FORMAT_444 = 0x3,XVMC_OVERLAID_SURFACE = 0x1,XVMC_BACKEND_SUBPICTURE = 0x2,XVMC_SUBPICTURE_INDEPENDENT_SCALING = 0x4,XVMC_INTRA_UNSIGNED = 0x8,XVMC_MOCOMP = 0x0,XVMC_IDCT = 0x10000,XVMC_MPEG_1 = 0x1,XVMC_MPEG_2 = 0x2,XVMC_H263 = 0x3,XVMC_MPEG_4 = 0x4,XVMC_MB_TYPE_MOTION_FORWARD = 0x2,XVMC_MB_TYPE_MOTION_BACKWARD = 0x4,XVMC_MB_TYPE_PATTERN = 0x8,XVMC_MB_TYPE_INTRA = 0x10,XVMC_PREDICTION_FIELD = 0x1,XVMC_PREDICTION_FRAME = 0x2,XVMC_PREDICTION_DUAL_PRIME = 0x3,XVMC_PREDICTION_16x8 = 0x2,XVMC_PREDICTION_4MV = 0x4,XVMC_SELECT_FIRST_FORWARD = 0x1,XVMC_SELECT_FIRST_BACKWARD = 0x2,XVMC_SELECT_SECOND_FORWARD = 0x4,XVMC_SELECT_SECOND_BACKWARD = 0x8,XVMC_DCT_TYPE_FRAME = 0x0,XVMC_DCT_TYPE_FIELD = 0x1,XVMC_TOP_FIELD = 0x1,XVMC_BOTTOM_FIELD = 0x2,XVMC_FRAME_PICTURE = 0x3,XVMC_SECOND_FIELD = 0x4,XVMC_DIRECT = 0x1,XVMC_RENDERING = 0x1,XVMC_DISPLAYING = 0x2,XVMC_VLD = 0x20000,XVMC_PROGRESSIVE_SEQUENCE = 0x10,XVMC_ZIG_ZAG_SCAN = 0x0,XVMC_ALTERNATE_SCAN = 0x100,XVMC_PRED_DCT_FRAME = 0x40,XVMC_PRED_DCT_FIELD = 0x0,XVMC_TOP_FIELD_FIRST = 0x80,XVMC_BOTTOM_FIELD_FIRST = 0x0,XVMC_CONCEALMENT_MOTION_VECTORS = 0x200,XVMC_Q_SCALE_TYPE = 0x400,XVMC_INTRA_VLC_FORMAT = 0x800,XVMC_I_PICTURE = 0x1,XVMC_P_PICTURE = 0x2,XVMC_B_PICTURE = 0x3,};
enum MACRO_YPOP {YPOP_CHANGE = 1,YPOP_INSERT = 2,YPOP_DELETE = 3,YPOP_STORE = 4,};
enum MACRO_ZERO {ZERO = 0,ONE = 1,TWO = 2,};
enum MACRO_ZLIB {ZLIB_VERNUM = 0x1230,};
enum MACRO__ELF {_ELF_H = 1,};
enum MACRO__FPU {_FPU_CONTROL_H = 1,_FPU_MASK_IM = 1,_FPU_MASK_DM = 2,_FPU_MASK_ZM = 4,_FPU_MASK_OM = 8,_FPU_MASK_UM = 16,_FPU_MASK_PM = 32,_FPU_EXTENDED = 768,_FPU_DOUBLE = 512,_FPU_SINGLE = 0,_FPU_RC_NEAREST = 0,_FPU_RC_DOWN = 1024,_FPU_RC_UP = 2048,_FPU_RC_ZERO = 3072,_FPU_RESERVED = 61632,_FPU_DEFAULT = 895,_FPU_IEEE = 895,};
enum MACRO__FTW {_FTW_H = 1,};
enum MACRO__GNU {_GNU_VERSIONS_H = 1,_GNU_OBSTACK_INTERFACE_VERSION = 1,_GNU_REGEX_INTERFACE_VERSION = 1,_GNU_GLOB_INTERFACE_VERSION = 1,_GNU_GETOPT_INTERFACE_VERSION = 2,};
enum MACRO__GRP {_GRP_H = 1,};
enum MACRO__GUS {_GUS_NUMVOICES = 0x0,_GUS_VOICESAMPLE = 0x1,_GUS_VOICEON = 0x2,_GUS_VOICEOFF = 0x3,_GUS_VOICEMODE = 0x4,_GUS_VOICEBALA = 0x5,_GUS_VOICEFREQ = 0x6,_GUS_VOICEVOL = 0x7,_GUS_RAMPRANGE = 0x8,_GUS_RAMPRATE = 0x9,_GUS_RAMPMODE = 0xA,_GUS_RAMPON = 0xB,_GUS_RAMPOFF = 0xC,_GUS_VOICEFADE = 0xD,_GUS_VOLUME_SCALE = 0xE,_GUS_VOICEVOL2 = 0xF,_GUS_VOICE_POS = 0x10,};
enum MACRO__IOC {_IOC_NRBITS = 8,_IOC_TYPEBITS = 8,_IOC_SIZEBITS = 14,_IOC_DIRBITS = 2,_IOC_NRMASK = 255,_IOC_TYPEMASK = 255,_IOC_SIZEMASK = 16383,_IOC_DIRMASK = 3,_IOC_NRSHIFT = 0,_IOC_TYPESHIFT = 8,_IOC_SIZESHIFT = 16,_IOC_DIRSHIFT = 30,_IOC_NONE = 0,_IOC_WRITE = 1,_IOC_READ = 2,};
enum MACRO__IOS {_IOS_INPUT = 1,_IOS_OUTPUT = 2,_IOS_ATEND = 4,_IOS_APPEND = 8,_IOS_TRUNC = 16,_IOS_NOCREATE = 32,_IOS_NOREPLACE = 64,_IOS_BIN = 128,};
enum MACRO__NET {_NET_IF_ARP_H = 1,};
enum MACRO__NSS {_NSS_H = 1,_OBSTACK_H = 1,};
enum MACRO__PTY {_PTY_H = 1,_TERMIOS_H = 1,};
enum MACRO__PWD {_PWD_H = 1,};
enum MACRO__RPC {_RPC_NETDB_H = 1,};
enum MACRO__SEM {_SEM_SEMUN_UNDEFINED = 1,};
enum MACRO__SRC {_SRC_STSTDINT_H = 1,};
enum MACRO__SYS {_SYS_CDEFS_H = 1,};
enum MACRO__TAR {_TAR_H = 1,};
enum MACRO__X11 {_X11_EXTENSIONS_DPMS_H = 1,};
enum MACRO__XAW {_XAW_PRINT_H = 1,};
enum MACRO__XKB {_XKB_RF_NAMES_PROP_MAXLEN = 1024,};
enum MACRO___FD {__FD_SETSIZE = 1024,};
enum MACRO___SI {__SI_MAX_SIZE = 128,};
enum MACRO___UT {__UT_LINESIZE = 32,__UT_NAMESIZE = 32,__UT_HOSTSIZE = 256,};
enum MACRO__hex {_hex_array_size = 256,_hex_bad = 99,};
enum MACRO_apXK {apXK_LineDel = 0x1000FF00,apXK_CharDel = 0x1000FF01,apXK_Copy = 0x1000FF02,apXK_Cut = 0x1000FF03,apXK_Paste = 0x1000FF04,apXK_Move = 0x1000FF05,apXK_Grow = 0x1000FF06,apXK_Cmd = 0x1000FF07,apXK_Shell = 0x1000FF08,apXK_LeftBar = 0x1000FF09,apXK_RightBar = 0x1000FF0A,apXK_LeftBox = 0x1000FF0B,apXK_RightBox = 0x1000FF0C,apXK_UpBox = 0x1000FF0D,apXK_DownBox = 0x1000FF0E,apXK_Pop = 0x1000FF0F,apXK_Read = 0x1000FF10,apXK_Edit = 0x1000FF11,apXK_Save = 0x1000FF12,apXK_Exit = 0x1000FF13,apXK_Repeat = 0x1000FF14,apXK_KP_parenleft = 0x1000FFA8,apXK_KP_parenright = 0x1000FFA9,};
enum MACRO_bool {true = 1,false = 0,};
enum MACRO_hpXK {hpXK_ClearLine = 0x1000FF6F,hpXK_InsertLine = 0x1000FF70,hpXK_DeleteLine = 0x1000FF71,hpXK_InsertChar = 0x1000FF72,hpXK_DeleteChar = 0x1000FF73,hpXK_BackTab = 0x1000FF74,hpXK_KP_BackTab = 0x1000FF75,hpXK_Modelock1 = 0x1000FF48,hpXK_Modelock2 = 0x1000FF49,hpXK_Reset = 0x1000FF6C,hpXK_System = 0x1000FF6D,hpXK_User = 0x1000FF6E,hpXK_mute_acute = 0x100000A8,hpXK_mute_grave = 0x100000A9,hpXK_mute_asciicircum = 0x100000AA,hpXK_mute_diaeresis = 0x100000AB,hpXK_mute_asciitilde = 0x100000AC,hpXK_lira = 0x100000AF,hpXK_guilder = 0x100000BE,hpXK_Ydiaeresis = 0x100000EE,hpXK_IO = 0x100000EE,hpXK_longminus = 0x100000F6,hpXK_block = 0x100000FC,};
enum MACRO_xEOF {xEOF = 236,};
enum MACRO_xvmc {xvmc_QueryVersion = 0,xvmc_ListSurfaceTypes = 1,xvmc_CreateContext = 2,xvmc_DestroyContext = 3,xvmc_CreateSurface = 4,xvmc_DestroySurface = 5,xvmc_CreateSubpicture = 6,xvmc_DestroySubpicture = 7,xvmc_ListSubpictureTypes = 8,xvmc_GetDRInfo = 9,xvmc_LastRequest = 9,};
typedef struct _MultiPiece MultiPiece;
typedef void (*OSMESAproc)();
typedef struct _ObjectPart ObjectPart;
typedef struct _POINTBLOCK POINTBLOCK;
typedef struct PS_PrivateRec_ *PS_Private;
typedef struct _10BF8BFF208FC04E48FB9712D25FCBB7 PannerPart;
typedef unsigned int PictFormat;
typedef struct _RadioGroup RadioGroup;
typedef struct _RectObjRec RectObjRec;
typedef struct _RequestRec RequestRec;
typedef struct _7ACF4F4DA8290ABE25A6ADD1CFDA4216 SANE_Range;
typedef struct sg_scsi_id Sg_scsi_id;
typedef struct _798E7147B6C21289B5F0FC5985B127F4 SimplePart;
typedef struct _AA401E6E4181592548E0AAEFA6FE89CD SmeBSBPart;
typedef struct _SmeLineRec SmeLineRec;
typedef union _TMBindDataRec *TMBindData;
typedef unsigned char TMByteCard;
typedef struct _TMEventRec *TMEventPtr;
typedef struct _TMEventRec TMEventRec;
typedef struct _KeyCacheRec TMKeyCache;
typedef unsigned int TMLongCard;
typedef short TMShortInt;
typedef struct _TextSrcRec TextSrcRec;
typedef struct _TextRec *TextWidget;
typedef struct _F5EF5B284EA9B9A59B7A392BA3F2AA41 ThreeDPart;
typedef struct _1FE64A7A0C6AD5F0405EA84ACD580761 TogglePart;
typedef struct _TreeRec *TreeWidget;
typedef struct _DEB6ED3E3E48801FAB6806704D963455 WMShellRec;
typedef struct _WidgetInfo WidgetInfo;
typedef struct _23D39CEB96D177F7D0B7BFAD0D72AB23 XClassHint;
typedef struct _3A8E116D72DF0C8D49D51593D925AF55 XDGADevice;
typedef struct _4861D9BFE2A7E5E384D09A595EEA31C4 XETCValues;
typedef struct _B3807A7E298580816B8893D27A6B40D0 XEventList;
typedef struct _XGlyphElt8 XGlyphElt8;
typedef struct _XGlyphInfo XGlyphInfo;
typedef struct _F028EE1E7A219E794434525B0B591EF9 XKeyStatus;
typedef struct _XLineFixed XLineFixed;
typedef struct XML_ParserStruct *XML_Parser;
enum XML_Status {XML_STATUS_ERROR = 0x0,XML_STATUS_OK = 0x1,XML_STATUS_SUSPENDED = 0x2,};
typedef unsigned char XPSaveData;
typedef struct _CA1CD5B08005403884A7641019451813 XRectangle;
typedef struct _D3AF385DED024A0A11BBAE3B646E064C XResClient;
typedef struct _6B73A3115BC6C5DB52FFBC029452666C XSizeHints;
typedef struct _XSyncValue XSyncValue;
typedef struct _58058F4C4926147A1BF935BBE1E04307 XTimeCoord;
typedef struct _XTransform XTransform;
typedef struct _XTrapezoid XTrapezoid;
typedef struct _XcmsCCC XcmsCCCRec;
typedef struct _CCAEDA52B750854C25441FD25B4DA915 XcmsCIELab;
typedef struct _F2C3184CEEDD49A7FB665043E59AF1F0 XcmsCIELuv;
typedef struct _6CDBBC56673808DBC2DA2091B1C251E0 XcmsCIEXYZ;
typedef struct _1C989109A1E2AFEC30347169F1D74F63 XcmsCIEuvY;
typedef struct _3DDB46D984C469553E00D9B3BEA3349C XcmsCIExyY;
typedef struct _D484A87E94E3DD0BB42E942E2185E2EE XcmsTekHVC;
typedef struct _XkbDesc *XkbDescPtr;
typedef struct _XkbDesc XkbDescRec;
typedef struct _XkbMods *XkbModsPtr;
typedef struct _XkbMods XkbModsRec;
typedef struct _XmuSegment XmuSegment;
typedef struct _5B111F5C4E48B86FA81A443B3B21CC9D XpuPlexRec;
typedef struct _XtEventRec XtEventRec;
typedef struct _XtGrabRec *XtGrabList;
typedef struct _XtResource XtResource;
typedef unsigned int XtSignalId;
typedef struct _1E2A6A9B5EC919B5C597AB6887935210 XtTypedArg;
typedef struct _9EDEC9CDD32BA2E5983B8867B401ABD1 XvRational;
typedef struct _zlibbuffer ZlibBuffer;
struct _FSExtData {int number;struct _FSExtData *next;int (*free_private)(char *);char *private_data;};
struct _FcCharSet;
struct _FcLangSet;
struct _FcPattern;
enum _FcSetName {FcSetSystem = 0x0,FcSetApplication = 0x1,};
struct _FcStrList;
struct _FontNames {int nnames;int size;int *length;char **names;};
typedef union _F7A7EA8B301FD75068D384417C243F9B _G_iconv_t;
typedef int _G_int16_t;
typedef int _G_int32_t;
struct _IO_jump_t;
typedef void _IO_lock_t;
struct _IO_marker {struct _IO_marker *_next;struct _IO_FILE *_sbuf;int _pos;};
struct _XAxisInfo {int resolution;int min_value;int max_value;};
struct _XkbBounds {short x1;short y1;short x2;short y2;};
typedef int __blkcnt_t;
typedef unsigned int __cpu_mask;
typedef int __gwchar_t;
typedef int __intptr_t;
typedef struct __locale_struct *__locale_t;
enum __ns_class {ns_c_invalid = 0x0,ns_c_in = 0x1,ns_c_2 = 0x2,ns_c_chaos = 0x3,ns_c_hs = 0x4,ns_c_none = 0xFE,ns_c_any = 0xFF,ns_c_max = 0x10000,};
enum __ns_rcode {ns_r_noerror = 0x0,ns_r_formerr = 0x1,ns_r_servfail = 0x2,ns_r_nxdomain = 0x3,ns_r_notimpl = 0x4,ns_r_refused = 0x5,ns_r_yxdomain = 0x6,ns_r_yxrrset = 0x7,ns_r_nxrrset = 0x8,ns_r_notauth = 0x9,ns_r_notzone = 0xA,ns_r_max = 0xB,ns_r_badsig = 0x10,ns_r_badkey = 0x11,ns_r_badtime = 0x12,};
typedef struct _44840292B0FD4432816E14C2BB6B9957 __sigset_t;
typedef unsigned long long __u_quad_t;
typedef unsigned short __uint16_t;
typedef unsigned int __uint32_t;
typedef unsigned long long __uint64_t;
struct _alternate {int subset;char *name;};
struct _jmethodID;
enum bfd_endian {BFD_ENDIAN_BIG = 0x0,BFD_ENDIAN_LITTLE = 0x1,BFD_ENDIAN_UNKNOWN = 0x2,};
enum bfd_format {bfd_unknown = 0x0,bfd_object = 0x1,bfd_archive = 0x2,bfd_core = 0x3,bfd_type_end = 0x4,};
typedef struct _bfd_window bfd_window;
struct bufferDesc {unsigned int size;unsigned char *buffer;unsigned int *bytesTransferredP;};
struct completion;
struct count_info {int bytes;int blocks;int ptr;};
typedef char *domainname;
struct dyn_string {int allocated;int length;char *s;};
struct ecoff_extr;
typedef unsigned int elf_greg_t;
typedef void (*evbuffercb)(struct bufferevent *, void *);
struct event_base;
typedef struct _libc_fpstate *fpregset_t;
typedef struct _ECC0E2C5AD5080F3204655729300624A fsOffset32;
typedef struct _4543C93AEA47F6ED8C90F8F964657E96 fsPropInfo;
enum fsh_access {fsa_NONE = 0x0,fsa_R = 0x1,fsa_W = 0x2,fsa_RW = 0x3,};
typedef int gdbm_error;
enum gqr_status {Q_OK = 0x1,Q_NOQUOTA = 0x2,Q_EPERM = 0x3,};
typedef struct iw_priv_args iwprivargs;
struct kbd_repeat {int delay;int period;};
typedef struct _5B7C9E3DC72B13D6EDED508B1DAEEFE9 mcontext_t;
typedef char *netnamestr;
struct nlm_notify {char *name;int state;};
enum nss_status {NSS_STATUS_TRYAGAIN = 0xFFFFFFFE,NSS_STATUS_UNAVAIL = 0xFFFFFFFF,NSS_STATUS_NOTFOUND = 0x0,NSS_STATUS_SUCCESS = 0x1,NSS_STATUS_RETURN = 0x2,};
typedef struct _A84CE16FBD8B7EE0DD32EF223D545A98 optStruct2;
typedef struct _32330425E7850E17C6A7DFCDBBE04D6C optStruct3;
struct patch_info {unsigned short key;short device_no;short instr_no;unsigned int mode;int len;int loop_start;int loop_end;unsigned int base_freq;unsigned int base_note;unsigned int high_note;unsigned int low_note;int panning;int detuning;unsigned char env_rate[6];unsigned char env_offset[6];unsigned char tremolo_sweep;unsigned char tremolo_rate;unsigned char tremolo_depth;unsigned char vibrato_sweep;unsigned char vibrato_rate;unsigned char vibrato_depth;int scale_frequency;unsigned int scale_factor;int volume;int fractions;int reserved1;int spare[2];char data[1];};
typedef struct elf_prpsinfo prpsinfo_t;
typedef struct elf_prstatus prstatus_t;
typedef int register_t;
typedef struct _BD619B2F7AFF7BA6F06506AA27210664 regmatch_t;
enum reply_stat {MSG_ACCEPTED = 0x0,MSG_DENIED = 0x1,};
typedef struct sg_iovec sg_iovec_t;
struct sg_scsi_id {int host_no;int channel;int scsi_id;int lun;int scsi_type;short h_cmd_per_lun;short d_queue_depth;int unused[2];};
struct sigcontext {unsigned short gs;unsigned short __gsh;unsigned short fs;unsigned short __fsh;unsigned short es;unsigned short __esh;unsigned short ds;unsigned short __dsh;unsigned int edi;unsigned int esi;unsigned int ebp;unsigned int esp;unsigned int ebx;unsigned int edx;unsigned int ecx;unsigned int eax;unsigned int trapno;unsigned int err;unsigned int eip;unsigned short cs;unsigned short __csh;unsigned int eflags;unsigned int esp_at_signal;unsigned short ss;unsigned short __ssh;struct _fpstate *fpstate;unsigned int oldmask;unsigned int cr2;};
typedef struct sigevent sigevent_t;
typedef struct __jmp_buf_tag sigjmp_buf[1];
typedef struct splay_tree_s *splay_tree;
struct sysex_info {short key;short device_no;int len;unsigned char data[1];};
typedef struct tupleint **tupletable;
typedef struct ucontext ucontext_t;
struct unimapdesc {unsigned short entry_ct;struct unipair *entries;};
struct unimapinit {unsigned short advised_hashsize;unsigned short advised_hashstep;unsigned short advised_hashlevel;};
typedef struct _19DEE1C64F7EC3DDB040A3404BEC0D9F utmp_array;
struct vt_consize {unsigned short v_rows;unsigned short v_cols;unsigned short v_vlin;unsigned short v_clin;unsigned short v_vcol;unsigned short v_ccol;};
typedef struct _48A6A373861130075F8524D5C353FEE6 xColorItem;
typedef struct _F19CD3A20937CEF33F3E2EF5E2D906EF xConnSetup;
typedef struct _D4B7CCBA990A156E447947BB060E0786 xCopyGCReq;
typedef struct _256B6D485D886C7434E6D059DF9BE864 xDamageReq;
typedef struct _DB64A8459715AF3CEFE23597C08B5967 xDeviceCtl;
typedef struct _CC7B73821EC10F3655DDE5DAA21E5635 xGlyphInfo;
typedef struct _9B4395DE66E8574EC0897BBFC5E468E1 xHostEntry;
typedef struct _B4DBE4004D983CDD99352ECA92D175EF xLineFixed;
typedef struct _FD9EA5F23BD8EC0F64EDF9068C14C969 xPictDepth;
typedef struct _xRectangle xRectangle;
typedef struct _83A9560127C5CA1AF601DD4E7C3B278F xTimecoord;
typedef struct _0E70E9A2AD7D0637C6C018491CDB8CD9 xTrapezoid;
typedef struct _3DD3CD96FAD56E1211E0F63114C705EF xXFixesReq;
enum xcb_grab_t {XCB_GRAB_ANY = 0x0,};
enum xcb_kill_t {XCB_KILL_ALL_TEMPORARY = 0x0,};
typedef struct _xkbBell xkbBellReq;
typedef struct _xkmKeyDesc xkmKeyDesc;
typedef struct _xkmRowDesc xkmRowDesc;
typedef struct _7F79EDEFC3CE5D4824B190E83A46D022 xvRational;
typedef struct _ActionsRec *ActionPtr;
typedef struct _ActionsRec ActionRec;
typedef struct _24A706A694346F4C39DF8A9ADF3DF2AA AsciiPart;
typedef struct bitstream *BITSTREAM;
typedef struct _BlockHookRec *BlockHook;
typedef struct _BoxRec *BoxWidget;
typedef struct _Client *ClientPtr;
typedef void (*DMesaProc)();
typedef struct _DialogRec DialogRec;
typedef unsigned short Dimension;
typedef struct _0F3578149035D0CDE8FE9154071A721D Elf32_Cap;
typedef struct _9E389EF8DB18C75445DC45CE7C2FFB9B Elf32_Dyn;
typedef struct _45BD469DC424D3F368EE6E10DDB8D8EE Elf32_Lib;
typedef struct _C772EEB8BDF2D9B03BC2113DCD14FF9B Elf32_Rel;
typedef struct _F5D530A8B9C8144C513F035766B8BD9F Elf32_Sym;
typedef struct _7F4FA8E04F335CE1E911E9EDA6B28A3F Elf64_Cap;
typedef struct _8E3F17DF06268256B33C950219C36638 Elf64_Dyn;
typedef struct _00580D67DBBDE0DF5EC3B468D69A2E22 Elf64_Lib;
typedef struct _A313ED2DE25BE046A874D492CFBD731F Elf64_Rel;
typedef struct _7963ED2253978A4E491ADF870F9A304B Elf64_Sym;
typedef struct _B6DB448D25F6CB9AE733EFE1F4C4EFF9 Elf_Arhdr;
typedef struct _92C2B677F4D6F16C081E111A1354037E Elf_Arsym;
typedef unsigned int EventMask;
typedef char *ExifAscii;
typedef struct _ExifEntry ExifEntry;
typedef signed char ExifSByte;
typedef struct typenode FIELDTYPE;
typedef struct _FSExtData FSExtData;
typedef struct _FTFace *FTFacePtr;
typedef struct _FTFace FTFaceRec;
typedef struct _FTFont *FTFontPtr;
typedef struct _FTFont FTFontRec;
typedef struct FT_Bitmap_ FT_Bitmap;
typedef struct FT_DriverRec_ *FT_Driver;
typedef struct FT_MM_Var_ FT_MM_Var;
typedef struct FT_Matrix_ FT_Matrix;
typedef struct FT_MemoryRec_ *FT_Memory;
typedef struct FT_ModuleRec_ *FT_Module;
typedef struct FT_RasterRec_ *FT_Raster;
typedef struct FT_StreamRec_ *FT_Stream;
typedef char FT_String;
typedef unsigned short FT_UFWord;
typedef unsigned short FT_UInt16;
typedef unsigned int FT_UInt32;
typedef unsigned short FT_UShort;
typedef struct FT_Vector_ FT_Vector;
typedef struct _FcCharSet FcCharSet;
typedef struct _FcFontSet FcFontSet;
typedef struct _FcLangSet FcLangSet;
typedef struct _FcPattern FcPattern;
typedef struct _FcStrList FcStrList;
typedef struct _01C1C9E3C017E38AF79D67403D653E7E *GDBM_FILE;
typedef unsigned char GLboolean;
typedef char GLcharARB;
typedef unsigned short GLhalfARB;
enum Gpm_Etype {GPM_MOVE = 0x1,GPM_DRAG = 0x2,GPM_DOWN = 0x4,GPM_UP = 0x8,GPM_SINGLE = 0x10,GPM_DOUBLE = 0x20,GPM_TRIPLE = 0x40,GPM_MFLAG = 0x80,GPM_HARD = 0x100,GPM_ENTER = 0x200,GPM_LEAVE = 0x400,};
typedef struct _A41C32B76964981F2FE8CE9B9485A97F LabelPart;
enum MACRO_ADD {ADD_OVERWRITE = 256,};
enum MACRO_ADJ {ADJ_OFFSET = 0x1,ADJ_FREQUENCY = 0x2,ADJ_MAXERROR = 0x4,ADJ_ESTERROR = 0x8,ADJ_STATUS = 0x10,ADJ_TIMECONST = 0x20,ADJ_TICK = 0x4000,ADJ_OFFSET_SINGLESHOT = 0x8001,};
enum MACRO_AHZ {AHZ = 100,};
enum MACRO_ALL {ALL_MOUSE_EVENTS = 134217727,};
enum MACRO_APF {APF_NORMAL = 0,APF_NETWORK = 1,APF_CPUINTENS = 2,};
enum MACRO_ASH {ASH_CHANNEL_ANY = 0,ASH_CHANNEL_CONTROL = 1,ASH_CHANNEL_REALTIME = 2,};
enum MACRO_ATF {ATF_COM = 0x2,ATF_PERM = 0x4,ATF_PUBL = 0x8,ATF_USETRAILERS = 0x10,ATF_NETMASK = 0x20,ATF_DONTPUB = 0x40,ATF_MAGIC = 0x80,};
enum MACRO_AYT {AYT = 246,};
enum MACRO_BDF {BDF_GENPROPS = 6,};
enum MACRO_BFD {BFD_ARCH_SIZE = 64,BFD_DEFAULT_TARGET_SIZE = 32,BFD_HOST_64BIT_LONG = 0,BFD_HOST_LONG_LONG = 1,BFD_NO_FLAGS = 0,};
enum MACRO_BLK {BLK_EOR = 0x80,BLK_EOF = 0x40,BLK_ERRORS = 0x20,BLK_RESTART = 0x10,BLK_BYTECOUNT = 0x2,};
enum MACRO_BPF {BPF_RELEASE = 199606,BPF_MAXINSNS = 512,BPF_MAXBUFSIZE = 32768,BPF_MINBUFSIZE = 32,BPF_MAJOR_VERSION = 1,BPF_MINOR_VERSION = 1,};
enum MACRO_BS0 {BS0 = 0x0,BS1 = 0x8000,};
enum MACRO_BSD {BSD_CURRENT_VERSION = 1,BSD_MIN_BITS = 9,BSD_MAX_BITS = 15,};
enum MACRO_BSF {BSF_NO_FLAGS = 0x0,BSF_LOCAL = 0x1,BSF_GLOBAL = 0x2,BSF_EXPORT = 0x2,BSF_DEBUGGING = 0x8,BSF_FUNCTION = 0x10,BSF_KEEP = 0x20,BSF_KEEP_G = 0x40,BSF_WEAK = 0x80,BSF_SECTION_SYM = 0x100,BSF_OLD_COMMON = 0x200,};
enum MACRO_BUS {BUS_DEVICE_RESET = 0xC,};
enum MACRO_CAP {CAP_MATRIX = 0x1,CAP_CHARSUBSETTING = 0x2,};
enum MACRO_CCP {CCP_CONFREQ = 1,CCP_CONFACK = 2,CCP_TERMREQ = 5,CCP_TERMACK = 6,CCP_RESETREQ = 14,CCP_RESETACK = 15,CCP_MAX_OPTION_LENGTH = 32,CCP_HDRLEN = 4,CCP_OPT_MINLEN = 2,};
enum MACRO_CPF {CPF_NONE = 0x0,CPF_FIRST = 0x1,CPF_LAST = 0x2,};
enum MACRO_CPU {CPU_086 = 0,CPU_186 = 1,CPU_286 = 2,CPU_386 = 3,CPU_486 = 4,CPU_586 = 5,};
enum MACRO_CR0 {CR0 = 0x0,CR1 = 0x1000,CR2 = 0x2000,};
enum MACRO_CR3 {CR3 = 0x3000,};
enum MACRO_CS5 {CS5 = 0x0,CS6 = 0x10,CS7 = 0x20,};
enum MACRO_CS8 {CS8 = 0x30,CSTOPB = 0x40,CREAD = 0x80,PARENB = 0x100,PARODD = 0x200,HUPCL = 0x400,CLOCAL = 0x800,CBAUDEX = 0x1000,};
enum MACRO_CTL {CTL_BANK_SELECT = 0x0,CTL_MODWHEEL = 0x1,CTL_BREATH = 0x2,CTL_FOOT = 0x4,CTL_PORTAMENTO_TIME = 0x5,CTL_DATA_ENTRY = 0x6,CTL_MAIN_VOLUME = 0x7,CTL_BALANCE = 0x8,CTL_PAN = 0xA,CTL_EXPRESSION = 0xB,CTL_GENERAL_PURPOSE1 = 0x10,CTL_GENERAL_PURPOSE2 = 0x11,CTL_GENERAL_PURPOSE3 = 0x12,CTL_GENERAL_PURPOSE4 = 0x13,CTL_DAMPER_PEDAL = 0x40,CTL_SUSTAIN = 0x40,CTL_HOLD = 0x40,CTL_PORTAMENTO = 0x41,CTL_SOSTENUTO = 0x42,CTL_SOFT_PEDAL = 0x43,CTL_HOLD2 = 0x45,CTL_GENERAL_PURPOSE5 = 0x50,CTL_GENERAL_PURPOSE6 = 0x51,CTL_GENERAL_PURPOSE7 = 0x52,CTL_GENERAL_PURPOSE8 = 0x53,CTL_EXT_EFF_DEPTH = 0x5B,CTL_TREMOLO_DEPTH = 0x5C,CTL_CHORUS_DEPTH = 0x5D,CTL_DETUNE_DEPTH = 0x5E,CTL_CELESTE_DEPTH = 0x5E,CTL_PHASER_DEPTH = 0x5F,CTL_DATA_INCREMENT = 0x60,CTL_DATA_DECREMENT = 0x61,CTL_NONREG_PARM_NUM_LSB = 0x62,CTL_NONREG_PARM_NUM_MSB = 0x63,CTL_REGIST_PARM_NUM_LSB = 0x64,CTL_REGIST_PARM_NUM_MSB = 0x65,};
enum MACRO_CWX {CWX = 1,CWY = 2,CWWidth = 4,CWHeight = 8,CWBorderWidth = 16,CWSibling = 32,CWStackMode = 64,};
enum MACRO_DBM {DBM_INSERT = 0,DBM_REPLACE = 1,};
enum MACRO_DDP {DDP_MAXSZ = 587,DDP_MAXHOPS = 15,};
enum MACRO_DEF {DEF_WBITS = 15,DEF_MEM_LEVEL = 8,};
enum MACRO_DES {DES_MAXDATA = 8192,DES_DIRMASK = 1,DES_ENCRYPT = 0,DES_DECRYPT = 1,DES_DEVMASK = 2,DES_HW = 0,DES_SW = 2,};
enum MACRO_DEV {DEV_BSIZE = 512,};
enum MACRO_DID {DID_OK = 0x0,DID_NO_CONNECT = 0x1,DID_BUS_BUSY = 0x2,DID_TIME_OUT = 0x3,DID_BAD_TARGET = 0x4,DID_ABORT = 0x5,DID_PARITY = 0x6,DID_ERROR = 0x7,DID_RESET = 0x8,DID_BAD_INTR = 0x9,DID_PASSTHROUGH = 0xA,DID_SOFT_ERROR = 0xB,DID_IMM_RETRY = 0xC,DID_REQUEUE = 0xD,};
enum MACRO_DLT {DLT_NULL = 0,DLT_EN10MB = 1,DLT_EN3MB = 2,DLT_AX25 = 3,DLT_PRONET = 4,DLT_CHAOS = 5,DLT_IEEE802 = 6,DLT_ARCNET = 7,DLT_SLIP = 8,DLT_PPP = 9,DLT_FDDI = 10,DLT_ATM_RFC1483 = 11,DLT_RAW = 12,DLT_SLIP_BSDOS = 15,DLT_PPP_BSDOS = 16,DLT_ATM_CLIP = 19,DLT_REDBACK_SMARTEDGE = 32,DLT_PPP_SERIAL = 50,DLT_PPP_ETHER = 51,DLT_SYMANTEC_FIREWALL = 99,DLT_C_HDLC = 104,DLT_CHDLC = 104,DLT_IEEE802_11 = 105,DLT_FRELAY = 107,DLT_LOOP = 108,DLT_ENC = 109,DLT_LINUX_SLL = 113,DLT_LTALK = 114,DLT_ECONET = 115,DLT_IPFILTER = 116,DLT_PFLOG = 117,DLT_CISCO_IOS = 118,DLT_PRISM_HEADER = 119,DLT_AIRONET_HEADER = 120,DLT_HHDLC = 121,DLT_IP_OVER_FC = 122,DLT_SUNATM = 123,DLT_RIO = 124,DLT_PCI_EXP = 125,DLT_AURORA = 126,DLT_IEEE802_11_RADIO = 127,DLT_TZSP = 128,DLT_ARCNET_LINUX = 129,DLT_JUNIPER_MLPPP = 130,DLT_JUNIPER_MLFR = 131,DLT_JUNIPER_ES = 132,DLT_JUNIPER_GGSN = 133,DLT_JUNIPER_MFR = 134,DLT_JUNIPER_ATM2 = 135,DLT_JUNIPER_SERVICES = 136,DLT_JUNIPER_ATM1 = 137,DLT_APPLE_IP_OVER_IEEE1394 = 138,DLT_MTP2_WITH_PHDR = 139,DLT_MTP2 = 140,DLT_MTP3 = 141,DLT_SCCP = 142,DLT_DOCSIS = 143,DLT_LINUX_IRDA = 144,DLT_IBM_SP = 145,DLT_IBM_SN = 146,DLT_USER0 = 147,DLT_USER1 = 148,DLT_USER2 = 149,DLT_USER3 = 150,DLT_USER4 = 151,DLT_USER5 = 152,DLT_USER6 = 153,DLT_USER7 = 154,DLT_USER8 = 155,DLT_USER9 = 156,DLT_USER10 = 157,DLT_USER11 = 158,DLT_USER12 = 159,DLT_USER13 = 160,DLT_USER14 = 161,DLT_USER15 = 162,DLT_IEEE802_11_RADIO_AVS = 163,DLT_JUNIPER_MONITOR = 164,DLT_BACNET_MS_TP = 165,DLT_PPP_PPPD = 166,DLT_PPP_WITH_DIRECTION = 166,DLT_LINUX_PPP_WITHDIRECTION = 166,DLT_JUNIPER_PPPOE = 167,DLT_JUNIPER_PPPOE_ATM = 168,DLT_GPRS_LLC = 169,DLT_GPF_T = 170,DLT_GPF_F = 171,DLT_GCOM_T1E1 = 172,DLT_GCOM_SERIAL = 173,DLT_JUNIPER_PIC_PEER = 174,DLT_ERF_ETH = 175,DLT_ERF_POS = 176,DLT_LINUX_LAPD = 177,DLT_JUNIPER_ETHER = 178,DLT_JUNIPER_PPP = 179,DLT_JUNIPER_FRELAY = 180,DLT_JUNIPER_CHDLC = 181,};
enum MACRO_DMX {DMX_EXTENSION_MAJOR = 2,DMX_EXTENSION_MINOR = 2,DMX_EXTENSION_PATCH = 20040604,DMX_BAD_XINERAMA = 1001,DMX_BAD_VALUE = 1002,};
enum MACRO_DSP {DSP_CAP_REVISION = 0xFF,DSP_CAP_DUPLEX = 0x100,DSP_CAP_REALTIME = 0x200,DSP_CAP_BATCH = 0x400,DSP_CAP_COPROC = 0x800,DSP_CAP_TRIGGER = 0x1000,DSP_CAP_MMAP = 0x2000,DSP_CAP_MULTI = 0x4000,DSP_CAP_BIND = 0x8000,};
enum MACRO_DTF {DTF_1_PARINIT = 0x1,DTF_1_CONFEXP = 0x2,};
enum MACRO_DXK {DXK_ring_accent = 0x1000FEB0,DXK_circumflex_accent = 0x1000FE5E,DXK_cedilla_accent = 0x1000FE2C,DXK_acute_accent = 0x1000FE27,DXK_grave_accent = 0x1000FE60,DXK_tilde = 0x1000FE7E,DXK_diaeresis = 0x1000FE22,DXK_Remove = 0x1000FF00,};
enum MACRO_EAI {EAI_BADFLAGS = -1,EAI_NONAME = -2,EAI_AGAIN = -3,EAI_FAIL = -4,EAI_NODATA = -5,EAI_FAMILY = -6,EAI_SOCKTYPE = -7,EAI_SERVICE = -8,EAI_ADDRFAMILY = -9,EAI_MEMORY = -10,EAI_SYSTEM = -11,EAI_OVERFLOW = -12,};
enum MACRO_EAX {EAX = 6,};
enum MACRO_EBP {EBP = 5,};
enum MACRO_EBX {EBX = 0,ECX = 1,EDX = 2,};
enum MACRO_EFA {EFA_PARISC_1_0 = 0x20B,EFA_PARISC_1_1 = 0x210,EFA_PARISC_2_0 = 0x214,};
enum MACRO_EFL {EFL = 14,};
enum MACRO_EIP {EIP = 12,};
enum MACRO_ELF {ELF_INFO_TYPE_NONE = 0,ELF_INFO_TYPE_STABS = 1,ELF_INFO_TYPE_MERGE = 2,ELF_INFO_TYPE_EH_FRAME = 3,ELF_INFO_TYPE_JUST_SYMS = 4,};
enum MACRO_ENV {ENV_ESC = 2,ENV_USERVAR = 3,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EOR {EOR = 239,};
enum MACRO_ERR {ERR = -1,};
enum MACRO_ESI {ESI = 3,EDI = 4,};
enum MACRO_ETH {ETH_ALEN = 6,ETH_HLEN = 14,ETH_ZLEN = 60,ETH_DATA_LEN = 1500,ETH_FRAME_LEN = 1514,ETH_P_LOOP = 96,ETH_P_PUP = 512,ETH_P_PUPAT = 513,ETH_P_IP = 2048,ETH_P_X25 = 2053,ETH_P_ARP = 2054,ETH_P_BPQ = 2303,ETH_P_IEEEPUP = 2560,ETH_P_IEEEPUPAT = 2561,ETH_P_DEC = 24576,ETH_P_DNA_DL = 24577,ETH_P_DNA_RC = 24578,ETH_P_DNA_RT = 24579,ETH_P_LAT = 24580,ETH_P_DIAG = 24581,ETH_P_CUST = 24582,ETH_P_SCA = 24583,ETH_P_RARP = 32821,ETH_P_ATALK = 32923,ETH_P_AARP = 33011,ETH_P_8021Q = 33024,ETH_P_IPX = 33079,ETH_P_IPV6 = 34525,ETH_P_SLOW = 34825,ETH_P_WCCP = 34878,ETH_P_PPP_DISC = 34915,ETH_P_PPP_SES = 34916,ETH_P_MPLS_UC = 34887,ETH_P_MPLS_MC = 34888,ETH_P_ATMMPOA = 34892,ETH_P_ATMFATE = 34948,ETH_P_AOE = 34978,ETH_P_TIPC = 35018,ETH_P_802_3 = 1,ETH_P_AX25 = 2,ETH_P_ALL = 3,ETH_P_802_2 = 4,ETH_P_SNAP = 5,ETH_P_DDCMP = 6,ETH_P_WAN_PPP = 7,ETH_P_PPP_MP = 8,ETH_P_LOCALTALK = 9,ETH_P_PPPTALK = 16,ETH_P_TR_802_2 = 17,ETH_P_MOBITEX = 21,ETH_P_CONTROL = 22,ETH_P_IRDA = 23,ETH_P_ECONET = 24,ETH_P_HDLC = 25,ETH_P_ARCNET = 26,};
enum MACRO_FF0 {FF0 = 0x0,FF1 = 0x4000,};
enum MACRO_FLT {FLT_ROUNDS = 1,};
enum MACRO_FNM {FNM_PATHNAME = 1,FNM_NOESCAPE = 2,FNM_PERIOD = 4,FNM_NOMATCH = 1,};
enum MACRO_FTS {FTS_COMFOLLOW = 0x1,FTS_LOGICAL = 0x2,FTS_NOCHDIR = 0x4,FTS_NOSTAT = 0x8,FTS_PHYSICAL = 0x10,FTS_SEEDOT = 0x20,FTS_XDEV = 0x40,FTS_WHITEOUT = 0x80,FTS_OPTIONMASK = 0xFF,FTS_NAMEONLY = 0x100,FTS_STOP = 0x200,FTS_ROOTPARENTLEVEL = 0xFFFFFFFF,FTS_ROOTLEVEL = 0x0,FTS_D = 0x1,FTS_DC = 0x2,FTS_DEFAULT = 0x3,FTS_DNR = 0x4,FTS_DOT = 0x5,FTS_DP = 0x6,FTS_ERR = 0x7,FTS_F = 0x8,FTS_INIT = 0x9,FTS_NS = 0xA,FTS_NSOK = 0xB,FTS_SL = 0xC,FTS_SLNONE = 0xD,FTS_W = 0xE,FTS_DONTCHDIR = 0x1,FTS_SYMFOLLOW = 0x2,FTS_AGAIN = 0x1,FTS_FOLLOW = 0x2,FTS_NOINSTR = 0x3,FTS_SKIP = 0x4,};
enum MACRO_GFX {GFX_CACHE_SIZE = 15,};
enum MACRO_GLE {GLE_TEXTURE_ENABLE = 0x10000,GLE_TEXTURE_STYLE_MASK = 0xFF,GLE_TEXTURE_VERTEX_FLAT = 0x1,GLE_TEXTURE_NORMAL_FLAT = 0x2,GLE_TEXTURE_VERTEX_CYL = 0x3,GLE_TEXTURE_NORMAL_CYL = 0x4,GLE_TEXTURE_VERTEX_SPH = 0x5,GLE_TEXTURE_NORMAL_SPH = 0x6,GLE_TEXTURE_VERTEX_MODEL_FLAT = 0x7,GLE_TEXTURE_NORMAL_MODEL_FLAT = 0x8,GLE_TEXTURE_VERTEX_MODEL_CYL = 0x9,GLE_TEXTURE_NORMAL_MODEL_CYL = 0xA,GLE_TEXTURE_VERTEX_MODEL_SPH = 0xB,GLE_TEXTURE_NORMAL_MODEL_SPH = 0xC,};
enum MACRO_GLU {GLU_EXT_object_space_tess = 1,GLU_EXT_nurbs_tessellator = 1,GLU_FALSE = 0,GLU_TRUE = 1,GLU_VERSION_1_1 = 1,GLU_VERSION_1_2 = 1,GLU_VERSION_1_3 = 1,GLU_VERSION = 100800,GLU_EXTENSIONS = 100801,GLU_INVALID_ENUM = 100900,GLU_INVALID_VALUE = 100901,GLU_OUT_OF_MEMORY = 100902,GLU_INCOMPATIBLE_GL_VERSION = 100903,GLU_INVALID_OPERATION = 100904,GLU_OUTLINE_POLYGON = 100240,GLU_OUTLINE_PATCH = 100241,GLU_NURBS_ERROR = 100103,GLU_ERROR = 100103,GLU_NURBS_BEGIN = 100164,GLU_NURBS_BEGIN_EXT = 100164,GLU_NURBS_VERTEX = 100165,GLU_NURBS_VERTEX_EXT = 100165,GLU_NURBS_NORMAL = 100166,GLU_NURBS_NORMAL_EXT = 100166,GLU_NURBS_COLOR = 100167,GLU_NURBS_COLOR_EXT = 100167,GLU_NURBS_TEXTURE_COORD = 100168,GLU_NURBS_TEX_COORD_EXT = 100168,GLU_NURBS_END = 100169,GLU_NURBS_END_EXT = 100169,GLU_NURBS_BEGIN_DATA = 100170,GLU_NURBS_BEGIN_DATA_EXT = 100170,GLU_NURBS_VERTEX_DATA = 100171,GLU_NURBS_VERTEX_DATA_EXT = 100171,GLU_NURBS_NORMAL_DATA = 100172,GLU_NURBS_NORMAL_DATA_EXT = 100172,GLU_NURBS_COLOR_DATA = 100173,GLU_NURBS_COLOR_DATA_EXT = 100173,GLU_NURBS_TEXTURE_COORD_DATA = 100174,GLU_NURBS_TEX_COORD_DATA_EXT = 100174,GLU_NURBS_END_DATA = 100175,GLU_NURBS_END_DATA_EXT = 100175,GLU_NURBS_ERROR1 = 100251,GLU_NURBS_ERROR2 = 100252,GLU_NURBS_ERROR3 = 100253,GLU_NURBS_ERROR4 = 100254,GLU_NURBS_ERROR5 = 100255,GLU_NURBS_ERROR6 = 100256,GLU_NURBS_ERROR7 = 100257,GLU_NURBS_ERROR8 = 100258,GLU_NURBS_ERROR9 = 100259,GLU_NURBS_ERROR10 = 100260,GLU_NURBS_ERROR11 = 100261,GLU_NURBS_ERROR12 = 100262,GLU_NURBS_ERROR13 = 100263,GLU_NURBS_ERROR14 = 100264,GLU_NURBS_ERROR15 = 100265,GLU_NURBS_ERROR16 = 100266,GLU_NURBS_ERROR17 = 100267,GLU_NURBS_ERROR18 = 100268,GLU_NURBS_ERROR19 = 100269,GLU_NURBS_ERROR20 = 100270,GLU_NURBS_ERROR21 = 100271,GLU_NURBS_ERROR22 = 100272,GLU_NURBS_ERROR23 = 100273,GLU_NURBS_ERROR24 = 100274,GLU_NURBS_ERROR25 = 100275,GLU_NURBS_ERROR26 = 100276,GLU_NURBS_ERROR27 = 100277,GLU_NURBS_ERROR28 = 100278,GLU_NURBS_ERROR29 = 100279,GLU_NURBS_ERROR30 = 100280,GLU_NURBS_ERROR31 = 100281,GLU_NURBS_ERROR32 = 100282,GLU_NURBS_ERROR33 = 100283,GLU_NURBS_ERROR34 = 100284,GLU_NURBS_ERROR35 = 100285,GLU_NURBS_ERROR36 = 100286,GLU_NURBS_ERROR37 = 100287,GLU_AUTO_LOAD_MATRIX = 100200,GLU_CULLING = 100201,GLU_SAMPLING_TOLERANCE = 100203,GLU_DISPLAY_MODE = 100204,GLU_PARAMETRIC_TOLERANCE = 100202,GLU_SAMPLING_METHOD = 100205,GLU_U_STEP = 100206,GLU_V_STEP = 100207,GLU_NURBS_MODE = 100160,GLU_NURBS_MODE_EXT = 100160,GLU_NURBS_TESSELLATOR = 100161,GLU_NURBS_TESSELLATOR_EXT = 100161,GLU_NURBS_RENDERER = 100162,GLU_NURBS_RENDERER_EXT = 100162,GLU_OBJECT_PARAMETRIC_ERROR = 100208,GLU_OBJECT_PARAMETRIC_ERROR_EXT = 100208,GLU_OBJECT_PATH_LENGTH = 100209,GLU_OBJECT_PATH_LENGTH_EXT = 100209,GLU_PATH_LENGTH = 100215,GLU_PARAMETRIC_ERROR = 100216,GLU_DOMAIN_DISTANCE = 100217,GLU_MAP1_TRIM_2 = 100210,GLU_MAP1_TRIM_3 = 100211,GLU_POINT = 100010,GLU_LINE = 100011,GLU_FILL = 100012,GLU_SILHOUETTE = 100013,GLU_SMOOTH = 100000,GLU_FLAT = 100001,GLU_NONE = 100002,GLU_OUTSIDE = 100020,GLU_INSIDE = 100021,GLU_TESS_BEGIN = 100100,GLU_BEGIN = 100100,GLU_TESS_VERTEX = 100101,GLU_VERTEX = 100101,GLU_TESS_END = 100102,GLU_END = 100102,GLU_TESS_ERROR = 100103,GLU_TESS_EDGE_FLAG = 100104,GLU_EDGE_FLAG = 100104,GLU_TESS_COMBINE = 100105,GLU_TESS_BEGIN_DATA = 100106,GLU_TESS_VERTEX_DATA = 100107,GLU_TESS_END_DATA = 100108,GLU_TESS_ERROR_DATA = 100109,GLU_TESS_EDGE_FLAG_DATA = 100110,GLU_TESS_COMBINE_DATA = 100111,GLU_CW = 100120,GLU_CCW = 100121,GLU_INTERIOR = 100122,GLU_EXTERIOR = 100123,GLU_UNKNOWN = 100124,GLU_TESS_WINDING_RULE = 100140,GLU_TESS_BOUNDARY_ONLY = 100141,GLU_TESS_TOLERANCE = 100142,GLU_TESS_ERROR1 = 100151,GLU_TESS_ERROR2 = 100152,GLU_TESS_ERROR3 = 100153,GLU_TESS_ERROR4 = 100154,GLU_TESS_ERROR5 = 100155,GLU_TESS_ERROR6 = 100156,GLU_TESS_ERROR7 = 100157,GLU_TESS_ERROR8 = 100158,GLU_TESS_MISSING_BEGIN_POLYGON = 100151,GLU_TESS_MISSING_BEGIN_CONTOUR = 100152,GLU_TESS_MISSING_END_POLYGON = 100153,GLU_TESS_MISSING_END_CONTOUR = 100154,GLU_TESS_COORD_TOO_LARGE = 100155,GLU_TESS_NEED_COMBINE_CALLBACK = 100156,GLU_TESS_WINDING_ODD = 100130,GLU_TESS_WINDING_NONZERO = 100131,GLU_TESS_WINDING_POSITIVE = 100132,GLU_TESS_WINDING_NEGATIVE = 100133,GLU_TESS_WINDING_ABS_GEQ_TWO = 100134,};
enum MACRO_GLX {GLX_VERSION_1_1 = 1,GLX_VERSION_1_2 = 1,GLX_VERSION_1_3 = 1,GLX_VERSION_1_4 = 1,GLX_USE_GL = 1,GLX_BUFFER_SIZE = 2,GLX_LEVEL = 3,GLX_RGBA = 4,GLX_DOUBLEBUFFER = 5,GLX_STEREO = 6,GLX_AUX_BUFFERS = 7,GLX_RED_SIZE = 8,GLX_GREEN_SIZE = 9,GLX_BLUE_SIZE = 10,GLX_ALPHA_SIZE = 11,GLX_DEPTH_SIZE = 12,GLX_STENCIL_SIZE = 13,GLX_ACCUM_RED_SIZE = 14,GLX_ACCUM_GREEN_SIZE = 15,GLX_ACCUM_BLUE_SIZE = 16,GLX_ACCUM_ALPHA_SIZE = 17,GLX_BAD_SCREEN = 1,GLX_BAD_ATTRIBUTE = 2,GLX_NO_EXTENSION = 3,GLX_BAD_VISUAL = 4,GLX_BAD_CONTEXT = 5,GLX_BAD_VALUE = 6,GLX_BAD_ENUM = 7,GLX_VENDOR = 1,GLX_VERSION = 2,GLX_EXTENSIONS = 3,GLX_CONFIG_CAVEAT = 32,GLX_DONT_CARE = -1,GLX_X_VISUAL_TYPE = 34,GLX_TRANSPARENT_TYPE = 35,GLX_TRANSPARENT_INDEX_VALUE = 36,GLX_TRANSPARENT_RED_VALUE = 37,GLX_TRANSPARENT_GREEN_VALUE = 38,GLX_TRANSPARENT_BLUE_VALUE = 39,GLX_TRANSPARENT_ALPHA_VALUE = 40,GLX_WINDOW_BIT = 1,GLX_PIXMAP_BIT = 2,GLX_PBUFFER_BIT = 4,GLX_AUX_BUFFERS_BIT = 16,GLX_FRONT_LEFT_BUFFER_BIT = 1,GLX_FRONT_RIGHT_BUFFER_BIT = 2,GLX_BACK_LEFT_BUFFER_BIT = 4,GLX_BACK_RIGHT_BUFFER_BIT = 8,GLX_DEPTH_BUFFER_BIT = 32,GLX_STENCIL_BUFFER_BIT = 64,GLX_ACCUM_BUFFER_BIT = 128,GLX_NONE = 32768,GLX_SLOW_CONFIG = 32769,GLX_TRUE_COLOR = 32770,GLX_DIRECT_COLOR = 32771,GLX_PSEUDO_COLOR = 32772,GLX_STATIC_COLOR = 32773,GLX_GRAY_SCALE = 32774,GLX_STATIC_GRAY = 32775,GLX_TRANSPARENT_RGB = 32776,GLX_TRANSPARENT_INDEX = 32777,GLX_VISUAL_ID = 32779,GLX_SCREEN = 32780,GLX_NON_CONFORMANT_CONFIG = 32781,GLX_DRAWABLE_TYPE = 32784,GLX_RENDER_TYPE = 32785,GLX_X_RENDERABLE = 32786,GLX_FBCONFIG_ID = 32787,GLX_RGBA_TYPE = 32788,GLX_COLOR_INDEX_TYPE = 32789,GLX_MAX_PBUFFER_WIDTH = 32790,GLX_MAX_PBUFFER_HEIGHT = 32791,GLX_MAX_PBUFFER_PIXELS = 32792,GLX_PRESERVED_CONTENTS = 32795,GLX_LARGEST_PBUFFER = 32796,GLX_WIDTH = 32797,GLX_HEIGHT = 32798,GLX_EVENT_MASK = 32799,GLX_DAMAGED = 32800,GLX_SAVED = 32801,GLX_WINDOW = 32802,GLX_PBUFFER = 32803,GLX_PBUFFER_HEIGHT = 32832,GLX_PBUFFER_WIDTH = 32833,GLX_RGBA_BIT = 1,GLX_COLOR_INDEX_BIT = 2,GLX_PBUFFER_CLOBBER_MASK = 134217728,GLX_SAMPLE_BUFFERS = 100000,GLX_SAMPLES = 100001,GLX_GLXEXT_VERSION = 14,GLX_SAMPLE_BUFFERS_ARB = 100000,GLX_SAMPLES_ARB = 100001,GLX_RGBA_FLOAT_TYPE_ARB = 8377,GLX_RGBA_FLOAT_BIT_ARB = 4,GLX_SAMPLE_BUFFERS_SGIS = 100000,GLX_SAMPLES_SGIS = 100001,GLX_X_VISUAL_TYPE_EXT = 34,GLX_TRANSPARENT_TYPE_EXT = 35,GLX_TRANSPARENT_INDEX_VALUE_EXT = 36,GLX_TRANSPARENT_RED_VALUE_EXT = 37,GLX_TRANSPARENT_GREEN_VALUE_EXT = 38,GLX_TRANSPARENT_BLUE_VALUE_EXT = 39,GLX_TRANSPARENT_ALPHA_VALUE_EXT = 40,GLX_NONE_EXT = 32768,GLX_TRUE_COLOR_EXT = 32770,GLX_DIRECT_COLOR_EXT = 32771,GLX_PSEUDO_COLOR_EXT = 32772,GLX_STATIC_COLOR_EXT = 32773,GLX_GRAY_SCALE_EXT = 32774,GLX_STATIC_GRAY_EXT = 32775,GLX_TRANSPARENT_RGB_EXT = 32776,GLX_TRANSPARENT_INDEX_EXT = 32777,GLX_VISUAL_CAVEAT_EXT = 32,GLX_SLOW_VISUAL_EXT = 32769,GLX_NON_CONFORMANT_VISUAL_EXT = 32781,GLX_SHARE_CONTEXT_EXT = 32778,GLX_VISUAL_ID_EXT = 32779,GLX_SCREEN_EXT = 32780,GLX_WINDOW_BIT_SGIX = 1,GLX_PIXMAP_BIT_SGIX = 2,GLX_RGBA_BIT_SGIX = 1,GLX_COLOR_INDEX_BIT_SGIX = 2,GLX_DRAWABLE_TYPE_SGIX = 32784,GLX_RENDER_TYPE_SGIX = 32785,GLX_X_RENDERABLE_SGIX = 32786,GLX_FBCONFIG_ID_SGIX = 32787,GLX_RGBA_TYPE_SGIX = 32788,GLX_COLOR_INDEX_TYPE_SGIX = 32789,GLX_PBUFFER_BIT_SGIX = 4,GLX_BUFFER_CLOBBER_MASK_SGIX = 134217728,GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 1,GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 2,GLX_BACK_LEFT_BUFFER_BIT_SGIX = 4,GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 8,GLX_AUX_BUFFERS_BIT_SGIX = 16,GLX_DEPTH_BUFFER_BIT_SGIX = 32,GLX_STENCIL_BUFFER_BIT_SGIX = 64,GLX_ACCUM_BUFFER_BIT_SGIX = 128,GLX_SAMPLE_BUFFERS_BIT_SGIX = 256,GLX_MAX_PBUFFER_WIDTH_SGIX = 32790,GLX_MAX_PBUFFER_HEIGHT_SGIX = 32791,GLX_MAX_PBUFFER_PIXELS_SGIX = 32792,GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 32793,GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 32794,GLX_PRESERVED_CONTENTS_SGIX = 32795,GLX_LARGEST_PBUFFER_SGIX = 32796,GLX_WIDTH_SGIX = 32797,GLX_HEIGHT_SGIX = 32798,GLX_EVENT_MASK_SGIX = 32799,GLX_DAMAGED_SGIX = 32800,GLX_SAVED_SGIX = 32801,GLX_WINDOW_SGIX = 32802,GLX_PBUFFER_SGIX = 32803,GLX_SYNC_FRAME_SGIX = 0,GLX_SYNC_SWAP_SGIX = 1,GLX_DIGITAL_MEDIA_PBUFFER_SGIX = 32804,GLX_BLENDED_RGBA_SGIS = 32805,GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 32806,GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 32807,GLX_SAMPLE_BUFFERS_3DFX = 32848,GLX_SAMPLES_3DFX = 32849,GLX_3DFX_WINDOW_MODE_MESA = 1,GLX_3DFX_FULLSCREEN_MODE_MESA = 2,GLX_VISUAL_SELECT_GROUP_SGIX = 32808,GLX_SWAP_METHOD_OML = 32864,GLX_SWAP_EXCHANGE_OML = 32865,GLX_SWAP_COPY_OML = 32866,GLX_SWAP_UNDEFINED_OML = 32867,GLX_FLOAT_COMPONENTS_NV = 8368,GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = 80,GLX_BAD_HYPERPIPE_CONFIG_SGIX = 91,GLX_BAD_HYPERPIPE_SGIX = 92,GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = 1,GLX_HYPERPIPE_RENDER_PIPE_SGIX = 2,GLX_PIPE_RECT_SGIX = 1,GLX_PIPE_RECT_LIMITS_SGIX = 2,GLX_HYPERPIPE_STEREO_SGIX = 3,GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = 4,GLX_HYPERPIPE_ID_SGIX = 32816,GLX_ARB_get_proc_address = 1,GLX_ARB_multisample = 1,GLX_ARB_fbconfig_float = 1,GLX_SGIS_multisample = 1,GLX_EXT_visual_info = 1,GLX_SGI_swap_control = 1,GLX_SGI_video_sync = 1,GLX_SGI_make_current_read = 1,GLX_SGIX_video_source = 1,GLX_EXT_visual_rating = 1,GLX_EXT_import_context = 1,GLX_SGIX_fbconfig = 1,GLX_SGIX_pbuffer = 1,GLX_SGI_cushion = 1,GLX_SGIX_video_resize = 1,GLX_SGIX_dmbuffer = 1,GLX_SGIX_swap_group = 1,GLX_SGIX_swap_barrier = 1,GLX_SUN_get_transparent_index = 1,GLX_MESA_copy_sub_buffer = 1,GLX_MESA_pixmap_colormap = 1,GLX_MESA_release_buffers = 1,GLX_MESA_set_3dfx_mode = 1,GLX_SGIX_visual_select_group = 1,GLX_OML_swap_method = 1,GLX_OML_sync_control = 1,GLX_NV_float_buffer = 1,GLX_SGIX_hyperpipe = 1,GLX_MESA_agp_offset = 1,GLX_MESA_allocate_memory = 1,GLX_ARB_render_texture = 1,GLX_MESA_swap_frame_usage = 1,GLX_MESA_swap_control = 1,GLX_EXT_texture_from_pixmap = 1,GLX_BIND_TO_TEXTURE_RGB_EXT = 8400,GLX_BIND_TO_TEXTURE_RGBA_EXT = 8401,GLX_BIND_TO_MIPMAP_TEXTURE_EXT = 8402,GLX_BIND_TO_TEXTURE_TARGETS_EXT = 8403,GLX_Y_INVERTED_EXT = 8404,GLX_TEXTURE_FORMAT_EXT = 8405,GLX_TEXTURE_TARGET_EXT = 8406,GLX_MIPMAP_TEXTURE_EXT = 8407,GLX_TEXTURE_FORMAT_NONE_EXT = 8408,GLX_TEXTURE_FORMAT_RGB_EXT = 8409,GLX_TEXTURE_FORMAT_RGBA_EXT = 8410,GLX_TEXTURE_1D_BIT_EXT = 1,GLX_TEXTURE_2D_BIT_EXT = 2,GLX_TEXTURE_RECTANGLE_BIT_EXT = 4,GLX_TEXTURE_1D_EXT = 8411,GLX_TEXTURE_2D_EXT = 8412,GLX_TEXTURE_RECTANGLE_EXT = 8413,GLX_FRONT_LEFT_EXT = 8414,GLX_FRONT_RIGHT_EXT = 8415,GLX_BACK_LEFT_EXT = 8416,GLX_BACK_RIGHT_EXT = 8417,GLX_FRONT_EXT = 8414,GLX_BACK_EXT = 8416,GLX_AUX0_EXT = 8418,GLX_AUX1_EXT = 8419,GLX_AUX2_EXT = 8420,GLX_AUX3_EXT = 8421,GLX_AUX4_EXT = 8422,GLX_AUX5_EXT = 8423,GLX_AUX6_EXT = 8424,GLX_AUX7_EXT = 8425,GLX_AUX8_EXT = 8426,GLX_AUX9_EXT = 8427,};
enum MACRO_GPM {GPM_NODE_DIR_MODE = 0x1FD,GPM_B_DOWN = 0x20,GPM_B_UP = 0x10,GPM_B_FOURTH = 0x8,GPM_B_LEFT = 0x4,GPM_B_MIDDLE = 0x2,GPM_B_RIGHT = 0x1,GPM_B_NONE = 0x0,GPM_MAGIC = 0x47706D4C,};
enum MACRO_GRP {GRP_COMDAT = 0x1,};
enum MACRO_HAS {HAS_RELOC = 0x1,};
enum MACRO_IAC {IAC = 255,};
enum MACRO_ICE {ICE_Error = 0,ICE_ByteOrder = 1,ICE_ConnectionSetup = 2,ICE_AuthRequired = 3,ICE_AuthReply = 4,ICE_AuthNextPhase = 5,ICE_ConnectionReply = 6,ICE_ProtocolSetup = 7,ICE_ProtocolReply = 8,ICE_Ping = 9,ICE_PingReply = 10,ICE_WantToClose = 11,ICE_NoClose = 12,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_DEBUG = 0x4,IFF_LOOPBACK = 0x8,IFF_POINTOPOINT = 0x10,IFF_NOTRAILERS = 0x20,IFF_RUNNING = 0x40,IFF_NOARP = 0x80,IFF_PROMISC = 0x100,IFF_ALLMULTI = 0x200,IFF_MASTER = 0x400,IFF_SLAVE = 0x800,IFF_MULTICAST = 0x1000,IFF_PORTSEL = 0x2000,IFF_AUTOMEDIA = 0x4000,IFF_DYNAMIC = 0x8000,IFF_LOWER_UP = 0x10000,IFF_DORMANT = 0x20000,IFF_VOLATILE = 0x30C5A,IFF_802_1Q_VLAN = 0x1,IFF_EBRIDGE = 0x2,IFF_SLAVE_INACTIVE = 0x4,IFF_MASTER_8023AD = 0x8,IFF_MASTER_ALB = 0x10,};
enum MACRO_IIF {IIF_BGRACE = 1,IIF_IGRACE = 2,IIF_FLAGS = 4,IIF_ALL = 7,};
enum MACRO_IJS {IJS_VERSION = 35,IJS_EIO = -2,IJS_EPROTO = -3,IJS_ERANGE = -4,IJS_EINTERNAL = -5,IJS_ENYI = -6,IJS_ESYNTAX = -7,IJS_ECOLORSPACE = -8,IJS_EUNKPARAM = -9,IJS_EJOBID = -10,IJS_ETOOMANYJOBS = -11,IJS_EBUF = -12,};
enum MACRO_INT {INT_LEAST8_MIN = -128,INT_LEAST16_MIN = -32768,INT_LEAST32_MIN = -2147483648,INT_LEAST64_MIN = -9223372036854775808,INT_LEAST8_MAX = 127,INT_LEAST16_MAX = 32767,INT_LEAST32_MAX = 2147483647,INT_LEAST64_MAX = 9223372036854775807,};
enum MACRO_IOC {IOC_IN = 1073741824,IOC_OUT = 2147483648,IOC_INOUT = 3221225472,};
enum MACRO_IP6 {IP6_ALERT_MLD = 0x0,IP6_ALERT_RSVP = 0x100,IP6_ALERT_AN = 0x200,};
enum MACRO_IPC {IPC_CREAT = 0x200,IPC_EXCL = 0x400,IPC_NOWAIT = 0x800,IPC_RMID = 0x0,IPC_SET = 0x1,IPC_STAT = 0x2,IPC_PRIVATE = 0x0,};
enum MACRO_IPX {IPX_TYPE = 1,IPX_NODE_LEN = 6,IPX_MTU = 576,IPX_DLTITF = 0,IPX_CRTITF = 1,IPX_FRAME_NONE = 0,IPX_FRAME_SNAP = 1,IPX_FRAME_8022 = 2,IPX_FRAME_ETHERII = 3,IPX_FRAME_8023 = 4,IPX_FRAME_TR_8022 = 5,IPX_SPECIAL_NONE = 0,IPX_PRIMARY = 1,IPX_INTERNAL = 2,IPX_ROUTE_NO_ROUTER = 0,IPX_RT_SNAP = 8,IPX_RT_8022 = 4,IPX_RT_BLUEBOOK = 2,IPX_RT_ROUTED = 1,};
enum MACRO_JAS {JAS_CONFIGURE = 1,};
enum MACRO_JNI {JNI_TRUE = 1,JNI_FALSE = 0,JNI_VERSION_1_1 = 65537,JNI_VERSION_1_2 = 65538,JNI_VERSION_1_4 = 65540,JNI_COMMIT = 1,JNI_ABORT = 2,JNI_OK = 0,JNI_ERR = -1,JNI_EDETACHED = -2,JNI_EVERSION = -3,};
enum MACRO_KEY {KEY_CODE_YES = 0x100,KEY_MIN = 0x101,KEY_BREAK = 0x101,KEY_SRESET = 0x158,KEY_RESET = 0x159,KEY_DOWN = 0x102,KEY_UP = 0x103,KEY_LEFT = 0x104,KEY_RIGHT = 0x105,KEY_HOME = 0x106,KEY_BACKSPACE = 0x107,KEY_F0 = 0x108,KEY_DL = 0x148,KEY_IL = 0x149,KEY_DC = 0x14A,KEY_IC = 0x14B,KEY_EIC = 0x14C,KEY_CLEAR = 0x14D,KEY_EOS = 0x14E,KEY_EOL = 0x14F,KEY_SF = 0x150,KEY_SR = 0x151,KEY_NPAGE = 0x152,KEY_PPAGE = 0x153,KEY_STAB = 0x154,KEY_CTAB = 0x155,KEY_CATAB = 0x156,KEY_ENTER = 0x157,KEY_PRINT = 0x15A,KEY_LL = 0x15B,KEY_A1 = 0x15C,KEY_A3 = 0x15D,KEY_B2 = 0x15E,KEY_C1 = 0x15F,KEY_C3 = 0x160,KEY_BTAB = 0x161,KEY_BEG = 0x162,KEY_CANCEL = 0x163,KEY_CLOSE = 0x164,KEY_COMMAND = 0x165,KEY_COPY = 0x166,KEY_CREATE = 0x167,KEY_END = 0x168,KEY_EXIT = 0x169,KEY_FIND = 0x16A,KEY_HELP = 0x16B,KEY_MARK = 0x16C,KEY_MESSAGE = 0x16D,KEY_MOVE = 0x16E,KEY_NEXT = 0x16F,KEY_OPEN = 0x170,KEY_OPTIONS = 0x171,KEY_PREVIOUS = 0x172,KEY_REDO = 0x173,KEY_REFERENCE = 0x174,KEY_REFRESH = 0x175,KEY_REPLACE = 0x176,KEY_RESTART = 0x177,KEY_RESUME = 0x178,KEY_SAVE = 0x179,KEY_SBEG = 0x17A,KEY_SCANCEL = 0x17B,KEY_SCOMMAND = 0x17C,KEY_SCOPY = 0x17D,KEY_SCREATE = 0x17E,KEY_SDC = 0x17F,KEY_SDL = 0x180,KEY_SELECT = 0x181,KEY_SEND = 0x182,KEY_SEOL = 0x183,KEY_SEXIT = 0x184,KEY_SFIND = 0x185,KEY_SHELP = 0x186,KEY_SHOME = 0x187,KEY_SIC = 0x188,KEY_SLEFT = 0x189,KEY_SMESSAGE = 0x18A,KEY_SMOVE = 0x18B,KEY_SNEXT = 0x18C,KEY_SOPTIONS = 0x18D,KEY_SPREVIOUS = 0x18E,KEY_SPRINT = 0x18F,KEY_SREDO = 0x190,KEY_SREPLACE = 0x191,KEY_SRIGHT = 0x192,KEY_SRSUME = 0x193,KEY_SSAVE = 0x194,KEY_SSUSPEND = 0x195,KEY_SUNDO = 0x196,KEY_SUSPEND = 0x197,KEY_UNDO = 0x198,KEY_MOUSE = 0x199,KEY_RESIZE = 0x19A,KEY_EVENT = 0x19B,KEY_MAX = 0x1FF,};
enum MACRO_KLM {KLM_PROG = 100020,KLM_VERS = 1,KLM_TEST = 1,KLM_LOCK = 2,KLM_CANCEL = 3,KLM_UNLOCK = 4,};
enum MACRO_LBX {LBX_MAJOR_VERSION = 1,LBX_MINOR_VERSION = 0,};
enum MACRO_LED {LED_SCR = 0x1,LED_NUM = 0x2,LED_CAP = 0x4,};
enum MACRO_LLC {LLC_FRAME = 0x40,};
enum MACRO_LOG {LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,LOG_PRIMASK = 7,LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 72,LOG_AUTHPRIV = 80,LOG_FTP = 88,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,LOG_NFACILITIES = 24,LOG_FACMASK = 1016,LOG_PID = 1,LOG_CONS = 2,LOG_ODELAY = 4,LOG_NDELAY = 8,LOG_NOWAIT = 16,LOG_PERROR = 32,};
enum MACRO_MAP {MAP_SHARED = 0x1,MAP_PRIVATE = 0x2,MAP_TYPE = 0xF,MAP_FIXED = 0x10,MAP_FILE = 0x0,MAP_ANONYMOUS = 0x20,MAP_ANON = 0x20,MAP_GROWSDOWN = 0x100,MAP_DENYWRITE = 0x800,MAP_EXECUTABLE = 0x1000,MAP_LOCKED = 0x2000,MAP_NORESERVE = 0x4000,MAP_POPULATE = 0x8000,MAP_NONBLOCK = 0x10000,};
enum MACRO_MAX {INT8_MAX = 127,INT16_MAX = 32767,INT32_MAX = 2147483647,INT64_MAX = 9223372036854775807,UINT8_MAX = 255,UINT16_MAX = 65535,UINT32_MAX = -1,UINT64_MAX = -1,};
enum MACRO_MCL {MCL_CURRENT = 1,MCL_FUTURE = 2,};
enum MACRO_MIN {INT8_MIN = -128,INT16_MIN = -32768,INT32_MIN = -2147483648,INT64_MIN = -9223372036854775808,};
enum MACRO_MLD {MLD_LISTENER_QUERY = 130,MLD_LISTENER_REPORT = 131,MLD_LISTENER_REDUCTION = 132,};
enum MACRO_MOD {MOD_SAMEOBJ = 1024,};
enum MACRO_MSG {MSG_HIPRI = 0x1,MSG_ANY = 0x2,MSG_BAND = 0x4,};
enum MACRO_NCC {NCC = 8,};
enum MACRO_NEW {NEW_ENV_VAR = 0,NEW_ENV_VALUE = 1,};
enum MACRO_NFS {NFS_PROGRAM = 100003,NFS_PORT = 2049,NFS_MAXDATA = 8192,NFS_MAXPATHLEN = 1024,NFS_MAXNAMLEN = 255,NFS_MAXGROUPS = 16,NFS_FHSIZE = 32,NFS_COOKIESIZE = 4,NFS_FIFO_DEV = -1,};
enum MACRO_NIS {NIS_MAXSTRINGLEN = 255,NIS_MAXNAMELEN = 1024,NIS_MAXATTRNAME = 32,NIS_MAXATTRVAL = 2048,NIS_MAXCOLUMNS = 64,NIS_MAXATTR = 16,NIS_MAXPATH = 1024,NIS_MAXREPLICAS = 128,NIS_MAXLINKS = 16,NIS_PK_NONE = 0,NIS_PK_DH = 1,NIS_PK_RSA = 2,NIS_PK_KERB = 3,NIS_PK_DHEXT = 4,};
enum MACRO_NL0 {NL0 = 0x0,NL1 = 0x100,CRDLY = 0x600,};
enum MACRO_NL2 {NL2 = 0x200,};
enum MACRO_NL3 {NL3 = 0x300,TBDELAY = 0xC00,CRDELAY = 0x3000,VTDELAY = 0x4000,BSDELAY = 0x8000,CRTBS = 0x10000,PRTERA = 0x20000,CRTERA = 0x40000,TILDE = 0x80000,MDMBUF = 0x100000,LITOUT = 0x200000,NOHANG = 0x1000000,L001000 = 0x2000000,CRTKIL = 0x4000000,PASS8 = 0x8000000,CTLECH = 0x10000000,DECCTQ = 0x40000000,};
enum MACRO_NLM {NLM_PROG = 100021,NLM_VERS = 1,NLM_TEST = 1,NLM_LOCK = 2,NLM_CANCEL = 3,NLM_UNLOCK = 4,NLM_GRANTED = 5,NLM_TEST_MSG = 6,NLM_LOCK_MSG = 7,NLM_CANCEL_MSG = 8,NLM_UNLOCK_MSG = 9,NLM_GRANTED_MSG = 10,NLM_TEST_RES = 11,NLM_LOCK_RES = 12,NLM_CANCEL_RES = 13,NLM_UNLOCK_RES = 14,NLM_GRANTED_RES = 15,NLM_VERSX = 3,NLM_SHARE = 20,NLM_UNSHARE = 21,NLM_NM_LOCK = 22,NLM_FREE_ALL = 23,};
enum MACRO_NOP {NOP = 0x8,SE = 0xF0,};
enum MACRO_NOT {NOT_HERE = 1,};
enum MACRO_NSS {NSS_BUFLEN_GROUP = 1024,};
enum MACRO_ODK {ODK_NULL = 0,ODK_REGINFO = 1,ODK_EXCEPTIONS = 2,ODK_PAD = 3,ODK_HWPATCH = 4,ODK_FILL = 5,ODK_TAGS = 6,ODK_HWAND = 7,ODK_HWOR = 8,};
enum MACRO_OEX {OEX_FPU_MIN = 0x1F,OEX_FPU_MAX = 0x1F00,OEX_PAGE0 = 0x10000,OEX_SMM = 0x20000,OEX_FPDBUG = 0x40000,OEX_PRECISEFP = 0x40000,OEX_DISMISS = 0x80000,OEX_FPU_INVAL = 0x10,OEX_FPU_DIV0 = 0x8,OEX_FPU_OFLO = 0x4,OEX_FPU_UFLO = 0x2,OEX_FPU_INEX = 0x1,};
enum MACRO_OHW {OHW_R4KEOP = 0x1,OHW_R8KPFETCH = 0x2,OHW_R5KEOP = 0x4,OHW_R5KCVTL = 0x8,};
enum MACRO_OLD {OLD_ENV_VAR = 1,OLD_ENV_VALUE = 0,};
enum MACRO_OPT {OPT_CALLFUNC = 1,};
enum MACRO_OUT {OUT_OF_RANGE = -1,};
enum MACRO_PAM {PAM_BLACK = 0,PAM_BW_WHITE = 1,PAM_PBM_BLACK = 0,PAM_PBM_WHITE = 1,PAM_RED_PLANE = 0,PAM_GRN_PLANE = 1,PAM_BLU_PLANE = 2,PAM_TRN_PLANE = 3,PAM_GRAY_TRN_PLANE = 1,PAM_MAGIC1 = 80,PAM_MAGIC2 = 55,PAM_FORMAT = 20535,PAM_TYPE = 20535,};
enum MACRO_PBM {PBM_WHITE = 0,PBM_BLACK = 1,PBM_MAGIC1 = 80,PBM_MAGIC2 = 49,};
enum MACRO_PCF {PCF_FILE_VERSION = 1885562369,PCF_FORMAT_MASK = -256,PCF_DEFAULT_FORMAT = 0,PCF_INKBOUNDS = 512,PCF_ACCEL_W_INKBOUNDS = 256,PCF_COMPRESSED_METRICS = 256,PCF_GLYPH_PAD_MASK = 3,PCF_BYTE_MASK = 4,PCF_BIT_MASK = 8,PCF_SCAN_UNIT_MASK = 48,PCF_PROPERTIES = 1,PCF_ACCELERATORS = 2,PCF_METRICS = 4,PCF_BITMAPS = 8,PCF_INK_METRICS = 16,PCF_BDF_ENCODINGS = 32,PCF_SWIDTHS = 64,PCF_GLYPH_NAMES = 128,PCF_BDF_ACCELERATORS = 256,};
enum MACRO_PCI {PCI_VENDOR_ID = 0x0,PCI_DEVICE_ID = 0x2,PCI_COMMAND = 0x4,PCI_COMMAND_IO = 0x1,PCI_COMMAND_MEMORY = 0x2,PCI_COMMAND_MASTER = 0x4,PCI_COMMAND_SPECIAL = 0x8,PCI_COMMAND_INVALIDATE = 0x10,PCI_COMMAND_VGA_PALETTE = 0x20,PCI_COMMAND_PARITY = 0x40,PCI_COMMAND_WAIT = 0x80,PCI_COMMAND_SERR = 0x100,PCI_COMMAND_FAST_BACK = 0x200,PCI_COMMAND_INTX_DISABLE = 0x400,PCI_STATUS = 0x6,PCI_STATUS_CAP_LIST = 0x10,PCI_STATUS_66MHZ = 0x20,PCI_STATUS_UDF = 0x40,PCI_STATUS_FAST_BACK = 0x80,PCI_STATUS_PARITY = 0x100,PCI_STATUS_DEVSEL_MASK = 0x600,PCI_STATUS_DEVSEL_FAST = 0x0,PCI_STATUS_DEVSEL_MEDIUM = 0x200,PCI_STATUS_DEVSEL_SLOW = 0x400,PCI_STATUS_SIG_TARGET_ABORT = 0x800,PCI_STATUS_REC_TARGET_ABORT = 0x1000,PCI_STATUS_REC_MASTER_ABORT = 0x2000,PCI_STATUS_SIG_SYSTEM_ERROR = 0x4000,PCI_STATUS_DETECTED_PARITY = 0x8000,PCI_CLASS_REVISION = 0x8,PCI_REVISION_ID = 0x8,PCI_CLASS_PROG = 0x9,PCI_CLASS_DEVICE = 0xA,PCI_CACHE_LINE_SIZE = 0xC,PCI_LATENCY_TIMER = 0xD,PCI_HEADER_TYPE = 0xE,PCI_HEADER_TYPE_NORMAL = 0x0,PCI_HEADER_TYPE_BRIDGE = 0x1,PCI_HEADER_TYPE_CARDBUS = 0x2,PCI_BIST = 0xF,PCI_BIST_CODE_MASK = 0xF,PCI_BIST_START = 0x40,PCI_BIST_CAPABLE = 0x80,PCI_BASE_ADDRESS_0 = 0x10,PCI_BASE_ADDRESS_1 = 0x14,PCI_BASE_ADDRESS_2 = 0x18,PCI_BASE_ADDRESS_3 = 0x1C,PCI_BASE_ADDRESS_4 = 0x20,PCI_BASE_ADDRESS_5 = 0x24,PCI_BASE_ADDRESS_SPACE = 0x1,PCI_BASE_ADDRESS_SPACE_IO = 0x1,PCI_BASE_ADDRESS_SPACE_MEMORY = 0x0,PCI_BASE_ADDRESS_MEM_TYPE_MASK = 0x6,PCI_BASE_ADDRESS_MEM_TYPE_32 = 0x0,PCI_BASE_ADDRESS_MEM_TYPE_1M = 0x2,PCI_BASE_ADDRESS_MEM_TYPE_64 = 0x4,PCI_BASE_ADDRESS_MEM_PREFETCH = 0x8,PCI_BASE_ADDRESS_MEM_MASK = 0xFFFFFFF0,PCI_BASE_ADDRESS_IO_MASK = 0xFFFFFFFC,PCI_CARDBUS_CIS = 0x28,PCI_SUBSYSTEM_VENDOR_ID = 0x2C,PCI_SUBSYSTEM_ID = 0x2E,PCI_ROM_ADDRESS = 0x30,PCI_ROM_ADDRESS_ENABLE = 0x1,PCI_ROM_ADDRESS_MASK = 0xFFFFF800,PCI_CAPABILITY_LIST = 0x34,PCI_INTERRUPT_LINE = 0x3C,PCI_INTERRUPT_PIN = 0x3D,PCI_MIN_GNT = 0x3E,PCI_MAX_LAT = 0x3F,PCI_PRIMARY_BUS = 0x18,PCI_SECONDARY_BUS = 0x19,PCI_SUBORDINATE_BUS = 0x1A,PCI_SEC_LATENCY_TIMER = 0x1B,PCI_IO_BASE = 0x1C,PCI_IO_LIMIT = 0x1D,PCI_IO_RANGE_TYPE_MASK = 0xF,PCI_IO_RANGE_TYPE_16 = 0x0,PCI_IO_RANGE_TYPE_32 = 0x1,PCI_IO_RANGE_MASK = 0xFFFFFFF0,PCI_SEC_STATUS = 0x1E,PCI_MEMORY_BASE = 0x20,PCI_MEMORY_LIMIT = 0x22,PCI_MEMORY_RANGE_TYPE_MASK = 0xF,PCI_MEMORY_RANGE_MASK = 0xFFFFFFF0,PCI_PREF_MEMORY_BASE = 0x24,PCI_PREF_MEMORY_LIMIT = 0x26,PCI_PREF_RANGE_TYPE_MASK = 0xF,PCI_PREF_RANGE_TYPE_32 = 0x0,PCI_PREF_RANGE_TYPE_64 = 0x1,PCI_PREF_RANGE_MASK = 0xFFFFFFF0,PCI_PREF_BASE_UPPER32 = 0x28,PCI_PREF_LIMIT_UPPER32 = 0x2C,PCI_IO_BASE_UPPER16 = 0x30,PCI_IO_LIMIT_UPPER16 = 0x32,PCI_ROM_ADDRESS1 = 0x38,PCI_BRIDGE_CONTROL = 0x3E,PCI_BRIDGE_CTL_PARITY = 0x1,PCI_BRIDGE_CTL_SERR = 0x2,PCI_BRIDGE_CTL_NO_ISA = 0x4,PCI_BRIDGE_CTL_VGA = 0x8,PCI_BRIDGE_CTL_MASTER_ABORT = 0x20,PCI_BRIDGE_CTL_BUS_RESET = 0x40,PCI_BRIDGE_CTL_FAST_BACK = 0x80,PCI_CB_CAPABILITY_LIST = 0x14,PCI_CB_SEC_STATUS = 0x16,PCI_CB_PRIMARY_BUS = 0x18,PCI_CB_CARD_BUS = 0x19,PCI_CB_SUBORDINATE_BUS = 0x1A,PCI_CB_LATENCY_TIMER = 0x1B,PCI_CB_MEMORY_BASE_0 = 0x1C,PCI_CB_MEMORY_LIMIT_0 = 0x20,PCI_CB_MEMORY_BASE_1 = 0x24,PCI_CB_MEMORY_LIMIT_1 = 0x28,PCI_CB_IO_BASE_0 = 0x2C,PCI_CB_IO_BASE_0_HI = 0x2E,PCI_CB_IO_LIMIT_0 = 0x30,PCI_CB_IO_LIMIT_0_HI = 0x32,PCI_CB_IO_BASE_1 = 0x34,PCI_CB_IO_BASE_1_HI = 0x36,PCI_CB_IO_LIMIT_1 = 0x38,PCI_CB_IO_LIMIT_1_HI = 0x3A,PCI_CB_IO_RANGE_MASK = 0xFFFFFFFC,PCI_CB_BRIDGE_CONTROL = 0x3E,PCI_CB_BRIDGE_CTL_PARITY = 0x1,PCI_CB_BRIDGE_CTL_SERR = 0x2,PCI_CB_BRIDGE_CTL_ISA = 0x4,PCI_CB_BRIDGE_CTL_VGA = 0x8,PCI_CB_BRIDGE_CTL_MASTER_ABORT = 0x20,PCI_CB_BRIDGE_CTL_CB_RESET = 0x40,PCI_CB_BRIDGE_CTL_16BIT_INT = 0x80,PCI_CB_BRIDGE_CTL_PREFETCH_MEM0 = 0x100,PCI_CB_BRIDGE_CTL_PREFETCH_MEM1 = 0x200,PCI_CB_BRIDGE_CTL_POST_WRITES = 0x400,PCI_CB_SUBSYSTEM_VENDOR_ID = 0x40,PCI_CB_SUBSYSTEM_ID = 0x42,PCI_CB_LEGACY_MODE_BASE = 0x44,PCI_CAP_LIST_ID = 0x0,PCI_CAP_ID_PM = 0x1,PCI_CAP_ID_AGP = 0x2,PCI_CAP_ID_VPD = 0x3,PCI_CAP_ID_SLOTID = 0x4,PCI_CAP_ID_MSI = 0x5,PCI_CAP_ID_CHSWP = 0x6,PCI_CAP_ID_PCIX = 0x7,PCI_CAP_ID_HT_IRQCONF = 0x8,PCI_CAP_ID_VNDR = 0x9,PCI_CAP_ID_SHPC = 0xC,PCI_CAP_ID_EXP = 0x10,PCI_CAP_ID_MSIX = 0x11,PCI_CAP_LIST_NEXT = 0x1,PCI_CAP_FLAGS = 0x2,PCI_CAP_SIZEOF = 0x4,PCI_PM_PMC = 0x2,PCI_PM_CAP_VER_MASK = 0x7,PCI_PM_CAP_PME_CLOCK = 0x8,PCI_PM_CAP_RESERVED = 0x10,PCI_PM_CAP_DSI = 0x20,PCI_PM_CAP_AUX_POWER = 0x1C0,PCI_PM_CAP_D1 = 0x200,PCI_PM_CAP_D2 = 0x400,PCI_PM_CAP_PME = 0x800,PCI_PM_CAP_PME_MASK = 0xF800,PCI_PM_CAP_PME_D0 = 0x800,PCI_PM_CAP_PME_D1 = 0x1000,PCI_PM_CAP_PME_D2 = 0x2000,PCI_PM_CAP_PME_D3 = 0x4000,PCI_PM_CAP_PME_D3cold = 0x8000,PCI_PM_CTRL = 0x4,PCI_PM_CTRL_STATE_MASK = 0x3,PCI_PM_CTRL_NO_SOFT_RESET = 0x4,PCI_PM_CTRL_PME_ENABLE = 0x100,PCI_PM_CTRL_DATA_SEL_MASK = 0x1E00,PCI_PM_CTRL_DATA_SCALE_MASK = 0x6000,PCI_PM_CTRL_PME_STATUS = 0x8000,PCI_PM_PPB_EXTENSIONS = 0x6,PCI_PM_PPB_B2_B3 = 0x40,PCI_PM_BPCC_ENABLE = 0x80,PCI_PM_DATA_REGISTER = 0x7,PCI_PM_SIZEOF = 0x8,PCI_AGP_VERSION = 0x2,PCI_AGP_RFU = 0x3,PCI_AGP_STATUS = 0x4,PCI_AGP_STATUS_RQ_MASK = 0xFF000000,PCI_AGP_STATUS_SBA = 0x200,PCI_AGP_STATUS_64BIT = 0x20,PCI_AGP_STATUS_FW = 0x10,PCI_AGP_STATUS_RATE4 = 0x4,PCI_AGP_STATUS_RATE2 = 0x2,PCI_AGP_STATUS_RATE1 = 0x1,PCI_AGP_COMMAND = 0x8,PCI_AGP_COMMAND_RQ_MASK = 0xFF000000,PCI_AGP_COMMAND_SBA = 0x200,PCI_AGP_COMMAND_AGP = 0x100,PCI_AGP_COMMAND_64BIT = 0x20,PCI_AGP_COMMAND_FW = 0x10,PCI_AGP_COMMAND_RATE4 = 0x4,PCI_AGP_COMMAND_RATE2 = 0x2,PCI_AGP_COMMAND_RATE1 = 0x1,PCI_AGP_SIZEOF = 0xC,PCI_VPD_ADDR = 0x2,PCI_VPD_ADDR_MASK = 0x7FFF,PCI_VPD_ADDR_F = 0x8000,PCI_VPD_DATA = 0x4,PCI_SID_ESR = 0x2,PCI_SID_ESR_NSLOTS = 0x1F,PCI_SID_ESR_FIC = 0x20,PCI_SID_CHASSIS_NR = 0x3,PCI_MSI_FLAGS = 0x2,PCI_MSI_FLAGS_64BIT = 0x80,PCI_MSI_FLAGS_QSIZE = 0x70,PCI_MSI_FLAGS_QMASK = 0xE,PCI_MSI_FLAGS_ENABLE = 0x1,PCI_MSI_FLAGS_MASKBIT = 0x100,PCI_MSI_RFU = 0x3,PCI_MSI_ADDRESS_LO = 0x4,PCI_MSI_ADDRESS_HI = 0x8,PCI_MSI_DATA_32 = 0x8,PCI_MSI_DATA_64 = 0xC,PCI_MSI_MASK_BIT = 0x10,PCI_CHSWP_CSR = 0x2,PCI_CHSWP_DHA = 0x1,PCI_CHSWP_EIM = 0x2,PCI_CHSWP_PIE = 0x4,PCI_CHSWP_LOO = 0x8,PCI_CHSWP_PI = 0x30,PCI_CHSWP_EXT = 0x40,PCI_CHSWP_INS = 0x80,PCI_X_CMD = 0x2,PCI_X_CMD_DPERR_E = 0x1,PCI_X_CMD_ERO = 0x2,PCI_X_CMD_MAX_READ = 0xC,PCI_X_CMD_MAX_SPLIT = 0x70,PCI_X_STATUS = 0x4,PCI_X_STATUS_DEVFN = 0xFF,PCI_X_STATUS_BUS = 0xFF00,PCI_X_STATUS_64BIT = 0x10000,PCI_X_STATUS_133MHZ = 0x20000,PCI_X_STATUS_SPL_DISC = 0x40000,PCI_X_STATUS_UNX_SPL = 0x80000,PCI_X_STATUS_COMPLEX = 0x100000,PCI_X_STATUS_MAX_READ = 0x600000,PCI_X_STATUS_MAX_SPLIT = 0x3800000,PCI_X_STATUS_MAX_CUM = 0x1C000000,PCI_X_STATUS_SPL_ERR = 0x20000000,PCI_X_STATUS_266MHZ = 0x40000000,PCI_X_STATUS_533MHZ = 0x80000000,PCI_EXP_FLAGS = 0x2,PCI_EXP_FLAGS_VERS = 0xF,PCI_EXP_FLAGS_TYPE = 0xF0,PCI_EXP_TYPE_ENDPOINT = 0x0,PCI_EXP_TYPE_LEG_END = 0x1,PCI_EXP_TYPE_ROOT_PORT = 0x4,PCI_EXP_TYPE_UPSTREAM = 0x5,PCI_EXP_TYPE_DOWNSTREAM = 0x6,PCI_EXP_TYPE_PCI_BRIDGE = 0x7,PCI_EXP_FLAGS_SLOT = 0x100,PCI_EXP_FLAGS_IRQ = 0x3E00,PCI_EXP_DEVCAP = 0x4,PCI_EXP_DEVCAP_PAYLOAD = 0x7,PCI_EXP_DEVCAP_PHANTOM = 0x18,PCI_EXP_DEVCAP_EXT_TAG = 0x20,PCI_EXP_DEVCAP_L0S = 0x1C0,PCI_EXP_DEVCAP_L1 = 0xE00,PCI_EXP_DEVCAP_ATN_BUT = 0x1000,PCI_EXP_DEVCAP_ATN_IND = 0x2000,PCI_EXP_DEVCAP_PWR_IND = 0x4000,PCI_EXP_DEVCAP_PWR_VAL = 0x3FC0000,PCI_EXP_DEVCAP_PWR_SCL = 0xC000000,PCI_EXP_DEVCTL = 0x8,PCI_EXP_DEVCTL_CERE = 0x1,PCI_EXP_DEVCTL_NFERE = 0x2,PCI_EXP_DEVCTL_FERE = 0x4,PCI_EXP_DEVCTL_URRE = 0x8,PCI_EXP_DEVCTL_RELAX_EN = 0x10,PCI_EXP_DEVCTL_PAYLOAD = 0xE0,PCI_EXP_DEVCTL_EXT_TAG = 0x100,PCI_EXP_DEVCTL_PHANTOM = 0x200,PCI_EXP_DEVCTL_AUX_PME = 0x400,PCI_EXP_DEVCTL_NOSNOOP_EN = 0x800,PCI_EXP_DEVCTL_READRQ = 0x7000,PCI_EXP_DEVSTA = 0xA,PCI_EXP_DEVSTA_CED = 0x1,PCI_EXP_DEVSTA_NFED = 0x2,PCI_EXP_DEVSTA_FED = 0x4,PCI_EXP_DEVSTA_URD = 0x8,PCI_EXP_DEVSTA_AUXPD = 0x10,PCI_EXP_DEVSTA_TRPND = 0x20,PCI_EXP_LNKCAP = 0xC,PCI_EXP_LNKCTL = 0x10,PCI_EXP_LNKSTA = 0x12,PCI_EXP_SLTCAP = 0x14,PCI_EXP_SLTCTL = 0x18,PCI_EXP_SLTSTA = 0x1A,PCI_EXP_RTCTL = 0x1C,PCI_EXP_RTCTL_SECEE = 0x1,PCI_EXP_RTCTL_SENFEE = 0x2,PCI_EXP_RTCTL_SEFEE = 0x4,PCI_EXP_RTCTL_PMEIE = 0x8,PCI_EXP_RTCTL_CRSSVE = 0x10,PCI_EXP_RTCAP = 0x1E,PCI_EXP_RTSTA = 0x20,PCI_EXT_CAP_ID_ERR = 0x1,PCI_EXT_CAP_ID_VC = 0x2,PCI_EXT_CAP_ID_DSN = 0x3,PCI_EXT_CAP_ID_PWR = 0x4,PCI_ERR_UNCOR_STATUS = 0x4,PCI_ERR_UNC_TRAIN = 0x1,PCI_ERR_UNC_DLP = 0x10,PCI_ERR_UNC_POISON_TLP = 0x1000,PCI_ERR_UNC_FCP = 0x2000,PCI_ERR_UNC_COMP_TIME = 0x4000,PCI_ERR_UNC_COMP_ABORT = 0x8000,PCI_ERR_UNC_UNX_COMP = 0x10000,PCI_ERR_UNC_RX_OVER = 0x20000,PCI_ERR_UNC_MALF_TLP = 0x40000,PCI_ERR_UNC_ECRC = 0x80000,PCI_ERR_UNC_UNSUP = 0x100000,PCI_ERR_UNCOR_MASK = 0x8,PCI_ERR_UNCOR_SEVER = 0xC,PCI_ERR_COR_STATUS = 0x10,PCI_ERR_COR_RCVR = 0x1,PCI_ERR_COR_BAD_TLP = 0x40,PCI_ERR_COR_BAD_DLLP = 0x80,PCI_ERR_COR_REP_ROLL = 0x100,PCI_ERR_COR_REP_TIMER = 0x1000,PCI_ERR_COR_MASK = 0x14,PCI_ERR_CAP = 0x18,PCI_ERR_CAP_ECRC_GENC = 0x20,PCI_ERR_CAP_ECRC_GENE = 0x40,PCI_ERR_CAP_ECRC_CHKC = 0x80,PCI_ERR_CAP_ECRC_CHKE = 0x100,PCI_ERR_HEADER_LOG = 0x1C,PCI_ERR_ROOT_COMMAND = 0x2C,PCI_ERR_ROOT_CMD_COR_EN = 0x1,PCI_ERR_ROOT_CMD_NONFATAL_EN = 0x2,PCI_ERR_ROOT_CMD_FATAL_EN = 0x4,PCI_ERR_ROOT_STATUS = 0x30,PCI_ERR_ROOT_COR_RCV = 0x1,PCI_ERR_ROOT_MULTI_COR_RCV = 0x2,PCI_ERR_ROOT_UNCOR_RCV = 0x4,PCI_ERR_ROOT_MULTI_UNCOR_RCV = 0x8,PCI_ERR_ROOT_FIRST_FATAL = 0x10,PCI_ERR_ROOT_NONFATAL_RCV = 0x20,PCI_ERR_ROOT_FATAL_RCV = 0x40,PCI_ERR_ROOT_COR_SRC = 0x34,PCI_ERR_ROOT_SRC = 0x36,PCI_VC_PORT_REG1 = 0x4,PCI_VC_PORT_REG2 = 0x8,PCI_VC_PORT_CTRL = 0xC,PCI_VC_PORT_STATUS = 0xE,PCI_VC_RES_CAP = 0x10,PCI_VC_RES_CTRL = 0x14,PCI_VC_RES_STATUS = 0x1A,PCI_PWR_DSR = 0x4,PCI_PWR_DATA = 0x8,PCI_PWR_CAP = 0xC,PCI_CLASS_NOT_DEFINED = 0x0,PCI_CLASS_NOT_DEFINED_VGA = 0x1,PCI_BASE_CLASS_STORAGE = 0x1,PCI_CLASS_STORAGE_SCSI = 0x100,PCI_CLASS_STORAGE_IDE = 0x101,PCI_CLASS_STORAGE_FLOPPY = 0x102,PCI_CLASS_STORAGE_IPI = 0x103,PCI_CLASS_STORAGE_RAID = 0x104,PCI_CLASS_STORAGE_SAS = 0x107,PCI_CLASS_STORAGE_OTHER = 0x180,PCI_BASE_CLASS_NETWORK = 0x2,PCI_CLASS_NETWORK_ETHERNET = 0x200,PCI_CLASS_NETWORK_TOKEN_RING = 0x201,PCI_CLASS_NETWORK_FDDI = 0x202,PCI_CLASS_NETWORK_ATM = 0x203,PCI_CLASS_NETWORK_OTHER = 0x280,PCI_BASE_CLASS_DISPLAY = 0x3,PCI_CLASS_DISPLAY_VGA = 0x300,PCI_CLASS_DISPLAY_XGA = 0x301,PCI_CLASS_DISPLAY_3D = 0x302,PCI_CLASS_DISPLAY_OTHER = 0x380,PCI_BASE_CLASS_MULTIMEDIA = 0x4,PCI_CLASS_MULTIMEDIA_VIDEO = 0x400,PCI_CLASS_MULTIMEDIA_AUDIO = 0x401,PCI_CLASS_MULTIMEDIA_PHONE = 0x402,PCI_CLASS_MULTIMEDIA_OTHER = 0x480,PCI_BASE_CLASS_MEMORY = 0x5,PCI_CLASS_MEMORY_RAM = 0x500,PCI_CLASS_MEMORY_FLASH = 0x501,PCI_CLASS_MEMORY_OTHER = 0x580,PCI_BASE_CLASS_BRIDGE = 0x6,PCI_CLASS_BRIDGE_HOST = 0x600,PCI_CLASS_BRIDGE_ISA = 0x601,PCI_CLASS_BRIDGE_EISA = 0x602,PCI_CLASS_BRIDGE_MC = 0x603,PCI_CLASS_BRIDGE_PCI = 0x604,PCI_CLASS_BRIDGE_PCMCIA = 0x605,PCI_CLASS_BRIDGE_NUBUS = 0x606,PCI_CLASS_BRIDGE_CARDBUS = 0x607,PCI_CLASS_BRIDGE_RACEWAY = 0x608,PCI_CLASS_BRIDGE_OTHER = 0x680,PCI_BASE_CLASS_COMMUNICATION = 0x7,PCI_CLASS_COMMUNICATION_SERIAL = 0x700,PCI_CLASS_COMMUNICATION_PARALLEL = 0x701,PCI_CLASS_COMMUNICATION_MULTISERIAL = 0x702,PCI_CLASS_COMMUNICATION_MODEM = 0x703,PCI_CLASS_COMMUNICATION_OTHER = 0x780,PCI_BASE_CLASS_SYSTEM = 0x8,PCI_CLASS_SYSTEM_PIC = 0x800,PCI_CLASS_SYSTEM_PIC_IOAPIC = 0x80010,PCI_CLASS_SYSTEM_PIC_IOXAPIC = 0x80020,PCI_CLASS_SYSTEM_DMA = 0x801,PCI_CLASS_SYSTEM_TIMER = 0x802,PCI_CLASS_SYSTEM_RTC = 0x803,PCI_CLASS_SYSTEM_PCI_HOTPLUG = 0x804,PCI_CLASS_SYSTEM_SDHCI = 0x805,PCI_CLASS_SYSTEM_OTHER = 0x880,PCI_BASE_CLASS_INPUT = 0x9,PCI_CLASS_INPUT_KEYBOARD = 0x900,PCI_CLASS_INPUT_PEN = 0x901,PCI_CLASS_INPUT_MOUSE = 0x902,PCI_CLASS_INPUT_SCANNER = 0x903,PCI_CLASS_INPUT_GAMEPORT = 0x904,PCI_CLASS_INPUT_OTHER = 0x980,PCI_BASE_CLASS_DOCKING = 0xA,PCI_CLASS_DOCKING_GENERIC = 0xA00,PCI_CLASS_DOCKING_OTHER = 0xA80,PCI_BASE_CLASS_PROCESSOR = 0xB,PCI_CLASS_PROCESSOR_386 = 0xB00,PCI_CLASS_PROCESSOR_486 = 0xB01,PCI_CLASS_PROCESSOR_PENTIUM = 0xB02,PCI_CLASS_PROCESSOR_ALPHA = 0xB10,PCI_CLASS_PROCESSOR_POWERPC = 0xB20,PCI_CLASS_PROCESSOR_MIPS = 0xB30,PCI_CLASS_PROCESSOR_CO = 0xB40,PCI_BASE_CLASS_SERIAL = 0xC,PCI_CLASS_SERIAL_FIREWIRE = 0xC00,PCI_CLASS_SERIAL_ACCESS = 0xC01,PCI_CLASS_SERIAL_SSA = 0xC02,PCI_CLASS_SERIAL_USB = 0xC03,PCI_CLASS_SERIAL_USB_UHCI = 0xC0300,PCI_CLASS_SERIAL_USB_OHCI = 0xC0310,PCI_CLASS_SERIAL_USB_EHCI = 0xC0320,PCI_CLASS_SERIAL_FIBER = 0xC04,PCI_CLASS_SERIAL_SMBUS = 0xC05,PCI_BASE_CLASS_INTELLIGENT = 0xE,PCI_CLASS_INTELLIGENT_I2O = 0xE00,PCI_BASE_CLASS_SATELLITE = 0xF,PCI_CLASS_SATELLITE_TV = 0xF00,PCI_CLASS_SATELLITE_AUDIO = 0xF01,PCI_CLASS_SATELLITE_VOICE = 0xF03,PCI_CLASS_SATELLITE_DATA = 0xF04,PCI_BASE_CLASS_CRYPT = 0x10,PCI_CLASS_CRYPT_NETWORK = 0x1000,PCI_CLASS_CRYPT_ENTERTAINMENT = 0x1001,PCI_CLASS_CRYPT_OTHER = 0x1080,PCI_BASE_CLASS_SIGNAL_PROCESSING = 0x11,PCI_CLASS_SP_DPIO = 0x1100,PCI_CLASS_SP_OTHER = 0x1180,PCI_CLASS_OTHERS = 0xFF,PCI_VENDOR_ID_DYNALINK = 0x675,PCI_DEVICE_ID_DYNALINK_IS64PH = 0x1702,PCI_VENDOR_ID_BERKOM = 0x871,PCI_DEVICE_ID_BERKOM_A1T = 0xFFA1,PCI_DEVICE_ID_BERKOM_T_CONCEPT = 0xFFA2,PCI_DEVICE_ID_BERKOM_A4T = 0xFFA4,PCI_DEVICE_ID_BERKOM_SCITEL_QUADRO = 0xFFA8,PCI_VENDOR_ID_COMPAQ = 0xE11,PCI_DEVICE_ID_COMPAQ_TOKENRING = 0x508,PCI_DEVICE_ID_COMPAQ_TACHYON = 0xA0FC,PCI_DEVICE_ID_COMPAQ_SMART2P = 0xAE10,PCI_DEVICE_ID_COMPAQ_NETEL100 = 0xAE32,PCI_DEVICE_ID_COMPAQ_NETEL10 = 0xAE34,PCI_DEVICE_ID_COMPAQ_TRIFLEX_IDE = 0xAE33,PCI_DEVICE_ID_COMPAQ_NETFLEX3I = 0xAE35,PCI_DEVICE_ID_COMPAQ_NETEL100D = 0xAE40,PCI_DEVICE_ID_COMPAQ_NETEL100PI = 0xAE43,PCI_DEVICE_ID_COMPAQ_NETEL100I = 0xB011,PCI_DEVICE_ID_COMPAQ_CISS = 0xB060,PCI_DEVICE_ID_COMPAQ_CISSB = 0xB178,PCI_DEVICE_ID_COMPAQ_CISSC = 0x46,PCI_DEVICE_ID_COMPAQ_THUNDER = 0xF130,PCI_DEVICE_ID_COMPAQ_NETFLEX3B = 0xF150,PCI_VENDOR_ID_NCR = 0x1000,PCI_VENDOR_ID_LSI_LOGIC = 0x1000,PCI_DEVICE_ID_NCR_53C810 = 0x1,PCI_DEVICE_ID_NCR_53C820 = 0x2,PCI_DEVICE_ID_NCR_53C825 = 0x3,PCI_DEVICE_ID_NCR_53C815 = 0x4,PCI_DEVICE_ID_LSI_53C810AP = 0x5,PCI_DEVICE_ID_NCR_53C860 = 0x6,PCI_DEVICE_ID_LSI_53C1510 = 0xA,PCI_DEVICE_ID_NCR_53C896 = 0xB,PCI_DEVICE_ID_NCR_53C895 = 0xC,PCI_DEVICE_ID_NCR_53C885 = 0xD,PCI_DEVICE_ID_NCR_53C875 = 0xF,PCI_DEVICE_ID_NCR_53C1510 = 0x10,PCI_DEVICE_ID_LSI_53C895A = 0x12,PCI_DEVICE_ID_LSI_53C875A = 0x13,PCI_DEVICE_ID_LSI_53C1010_33 = 0x20,PCI_DEVICE_ID_LSI_53C1010_66 = 0x21,PCI_DEVICE_ID_LSI_53C1030 = 0x30,PCI_DEVICE_ID_LSI_1030_53C1035 = 0x32,PCI_DEVICE_ID_LSI_53C1035 = 0x40,PCI_DEVICE_ID_NCR_53C875J = 0x8F,PCI_DEVICE_ID_LSI_FC909 = 0x621,PCI_DEVICE_ID_LSI_FC929 = 0x622,PCI_DEVICE_ID_LSI_FC929_LAN = 0x623,PCI_DEVICE_ID_LSI_FC919 = 0x624,PCI_DEVICE_ID_LSI_FC919_LAN = 0x625,PCI_DEVICE_ID_LSI_FC929X = 0x626,PCI_DEVICE_ID_LSI_FC939X = 0x642,PCI_DEVICE_ID_LSI_FC949X = 0x640,PCI_DEVICE_ID_LSI_FC949ES = 0x646,PCI_DEVICE_ID_LSI_FC919X = 0x628,PCI_DEVICE_ID_NCR_YELLOWFIN = 0x701,PCI_DEVICE_ID_LSI_61C102 = 0x901,PCI_DEVICE_ID_LSI_63C815 = 0x1000,PCI_DEVICE_ID_LSI_SAS1064 = 0x50,PCI_DEVICE_ID_LSI_SAS1064R = 0x411,PCI_DEVICE_ID_LSI_SAS1066 = 0x5E,PCI_DEVICE_ID_LSI_SAS1068 = 0x54,PCI_DEVICE_ID_LSI_SAS1064A = 0x5C,PCI_DEVICE_ID_LSI_SAS1064E = 0x56,PCI_DEVICE_ID_LSI_SAS1066E = 0x5A,PCI_DEVICE_ID_LSI_SAS1068E = 0x58,PCI_DEVICE_ID_LSI_SAS1078 = 0x60,PCI_VENDOR_ID_ATI = 0x1002,PCI_DEVICE_ID_ATI_68800 = 0x4158,PCI_DEVICE_ID_ATI_215CT222 = 0x4354,PCI_DEVICE_ID_ATI_210888CX = 0x4358,PCI_DEVICE_ID_ATI_215ET222 = 0x4554,PCI_DEVICE_ID_ATI_215GB = 0x4742,PCI_DEVICE_ID_ATI_215GD = 0x4744,PCI_DEVICE_ID_ATI_215GI = 0x4749,PCI_DEVICE_ID_ATI_215GP = 0x4750,PCI_DEVICE_ID_ATI_215GQ = 0x4751,PCI_DEVICE_ID_ATI_215XL = 0x4752,PCI_DEVICE_ID_ATI_215GT = 0x4754,PCI_DEVICE_ID_ATI_215GTB = 0x4755,PCI_DEVICE_ID_ATI_215_IV = 0x4756,PCI_DEVICE_ID_ATI_215_IW = 0x4757,PCI_DEVICE_ID_ATI_215_IZ = 0x475A,PCI_DEVICE_ID_ATI_210888GX = 0x4758,PCI_DEVICE_ID_ATI_215_LB = 0x4C42,PCI_DEVICE_ID_ATI_215_LD = 0x4C44,PCI_DEVICE_ID_ATI_215_LG = 0x4C47,PCI_DEVICE_ID_ATI_215_LI = 0x4C49,PCI_DEVICE_ID_ATI_215_LM = 0x4C4D,PCI_DEVICE_ID_ATI_215_LN = 0x4C4E,PCI_DEVICE_ID_ATI_215_LR = 0x4C52,PCI_DEVICE_ID_ATI_215_LS = 0x4C53,PCI_DEVICE_ID_ATI_264_LT = 0x4C54,PCI_DEVICE_ID_ATI_264VT = 0x5654,PCI_DEVICE_ID_ATI_264VU = 0x5655,PCI_DEVICE_ID_ATI_264VV = 0x5656,PCI_DEVICE_ID_ATI_RAGE128_RE = 0x5245,PCI_DEVICE_ID_ATI_RAGE128_RF = 0x5246,PCI_DEVICE_ID_ATI_RAGE128_RG = 0x5247,PCI_DEVICE_ID_ATI_RAGE128_RK = 0x524B,PCI_DEVICE_ID_ATI_RAGE128_RL = 0x524C,PCI_DEVICE_ID_ATI_RAGE128_SE = 0x5345,PCI_DEVICE_ID_ATI_RAGE128_SF = 0x5346,PCI_DEVICE_ID_ATI_RAGE128_SG = 0x5347,PCI_DEVICE_ID_ATI_RAGE128_SH = 0x5348,PCI_DEVICE_ID_ATI_RAGE128_SK = 0x534B,PCI_DEVICE_ID_ATI_RAGE128_SL = 0x534C,PCI_DEVICE_ID_ATI_RAGE128_SM = 0x534D,PCI_DEVICE_ID_ATI_RAGE128_SN = 0x534E,PCI_DEVICE_ID_ATI_RAGE128_TF = 0x5446,PCI_DEVICE_ID_ATI_RAGE128_TL = 0x544C,PCI_DEVICE_ID_ATI_RAGE128_TR = 0x5452,PCI_DEVICE_ID_ATI_RAGE128_TS = 0x5453,PCI_DEVICE_ID_ATI_RAGE128_TT = 0x5454,PCI_DEVICE_ID_ATI_RAGE128_TU = 0x5455,PCI_DEVICE_ID_ATI_RAGE128_LE = 0x4C45,PCI_DEVICE_ID_ATI_RAGE128_LF = 0x4C46,PCI_DEVICE_ID_ATI_RAGE128_MF = 0x4D46,PCI_DEVICE_ID_ATI_RAGE128_ML = 0x4D4C,PCI_DEVICE_ID_ATI_RAGE128_PA = 0x5041,PCI_DEVICE_ID_ATI_RAGE128_PB = 0x5042,PCI_DEVICE_ID_ATI_RAGE128_PC = 0x5043,PCI_DEVICE_ID_ATI_RAGE128_PD = 0x5044,PCI_DEVICE_ID_ATI_RAGE128_PE = 0x5045,PCI_DEVICE_ID_ATI_RAGE128_PF = 0x5046,PCI_DEVICE_ID_ATI_RAGE128_PG = 0x5047,PCI_DEVICE_ID_ATI_RAGE128_PH = 0x5048,PCI_DEVICE_ID_ATI_RAGE128_PI = 0x5049,PCI_DEVICE_ID_ATI_RAGE128_PJ = 0x504A,PCI_DEVICE_ID_ATI_RAGE128_PK = 0x504B,PCI_DEVICE_ID_ATI_RAGE128_PL = 0x504C,PCI_DEVICE_ID_ATI_RAGE128_PM = 0x504D,PCI_DEVICE_ID_ATI_RAGE128_PN = 0x504E,PCI_DEVICE_ID_ATI_RAGE128_PO = 0x504F,PCI_DEVICE_ID_ATI_RAGE128_PP = 0x5050,PCI_DEVICE_ID_ATI_RAGE128_PQ = 0x5051,PCI_DEVICE_ID_ATI_RAGE128_PR = 0x5052,PCI_DEVICE_ID_ATI_RAGE128_PS = 0x5053,PCI_DEVICE_ID_ATI_RAGE128_PT = 0x5054,PCI_DEVICE_ID_ATI_RAGE128_PU = 0x5055,PCI_DEVICE_ID_ATI_RAGE128_PV = 0x5056,PCI_DEVICE_ID_ATI_RAGE128_PW = 0x5057,PCI_DEVICE_ID_ATI_RAGE128_PX = 0x5058,PCI_DEVICE_ID_ATI_RADEON_QD = 0x5144,PCI_DEVICE_ID_ATI_RADEON_QE = 0x5145,PCI_DEVICE_ID_ATI_RADEON_QF = 0x5146,PCI_DEVICE_ID_ATI_RADEON_QG = 0x5147,PCI_DEVICE_ID_ATI_RADEON_QY = 0x5159,PCI_DEVICE_ID_ATI_RADEON_QZ = 0x515A,PCI_DEVICE_ID_ATI_RADEON_QL = 0x514C,PCI_DEVICE_ID_ATI_RADEON_QN = 0x514E,PCI_DEVICE_ID_ATI_RADEON_QO = 0x514F,PCI_DEVICE_ID_ATI_RADEON_Ql = 0x516C,PCI_DEVICE_ID_ATI_RADEON_BB = 0x4242,PCI_DEVICE_ID_ATI_RADEON_QM = 0x514D,PCI_DEVICE_ID_ATI_RADEON_QW = 0x5157,PCI_DEVICE_ID_ATI_RADEON_QX = 0x5158,PCI_DEVICE_ID_ATI_RADEON_Id = 0x4964,PCI_DEVICE_ID_ATI_RADEON_Ie = 0x4965,PCI_DEVICE_ID_ATI_RADEON_If = 0x4966,PCI_DEVICE_ID_ATI_RADEON_Ig = 0x4967,PCI_DEVICE_ID_ATI_RADEON_Ya = 0x5961,PCI_DEVICE_ID_ATI_RADEON_Yd = 0x5964,PCI_DEVICE_ID_ATI_RADEON_ND = 0x4E44,PCI_DEVICE_ID_ATI_RADEON_NE = 0x4E45,PCI_DEVICE_ID_ATI_RADEON_NF = 0x4E46,PCI_DEVICE_ID_ATI_RADEON_NG = 0x4E47,PCI_DEVICE_ID_ATI_RADEON_LY = 0x4C59,PCI_DEVICE_ID_ATI_RADEON_LZ = 0x4C5A,PCI_DEVICE_ID_ATI_RADEON_LW = 0x4C57,PCI_DEVICE_ID_ATI_RADEON_LX = 0x4C58,PCI_DEVICE_ID_ATI_RADEON_Ld = 0x4C64,PCI_DEVICE_ID_ATI_RADEON_Le = 0x4C65,PCI_DEVICE_ID_ATI_RADEON_Lf = 0x4C66,PCI_DEVICE_ID_ATI_RADEON_Lg = 0x4C67,PCI_DEVICE_ID_ATI_RS100 = 0xCAB0,PCI_DEVICE_ID_ATI_RS200 = 0xCAB2,PCI_DEVICE_ID_ATI_RS200_B = 0xCBB2,PCI_DEVICE_ID_ATI_RS250 = 0xCAB3,PCI_DEVICE_ID_ATI_RS300_100 = 0x5830,PCI_DEVICE_ID_ATI_RS300_133 = 0x5831,PCI_DEVICE_ID_ATI_RS300_166 = 0x5832,PCI_DEVICE_ID_ATI_RS300_200 = 0x5833,PCI_DEVICE_ID_ATI_RS350_100 = 0x7830,PCI_DEVICE_ID_ATI_RS350_133 = 0x7831,PCI_DEVICE_ID_ATI_RS350_166 = 0x7832,PCI_DEVICE_ID_ATI_RS350_200 = 0x7833,PCI_DEVICE_ID_ATI_RS400_100 = 0x5A30,PCI_DEVICE_ID_ATI_RS400_133 = 0x5A31,PCI_DEVICE_ID_ATI_RS400_166 = 0x5A32,PCI_DEVICE_ID_ATI_RS400_200 = 0x5A33,PCI_DEVICE_ID_ATI_RS480 = 0x5950,PCI_DEVICE_ID_ATI_IXP200_IDE = 0x4349,PCI_DEVICE_ID_ATI_IXP200_SMBUS = 0x4353,PCI_DEVICE_ID_ATI_IXP300_SMBUS = 0x4363,PCI_DEVICE_ID_ATI_IXP300_IDE = 0x4369,PCI_DEVICE_ID_ATI_IXP300_SATA = 0x436E,PCI_DEVICE_ID_ATI_IXP400_SMBUS = 0x4372,PCI_DEVICE_ID_ATI_IXP400_IDE = 0x4376,PCI_DEVICE_ID_ATI_IXP400_SATA = 0x4379,PCI_DEVICE_ID_ATI_IXP400_SATA2 = 0x437A,PCI_DEVICE_ID_ATI_IXP600_SATA = 0x4380,PCI_DEVICE_ID_ATI_IXP600_SRAID = 0x4381,PCI_DEVICE_ID_ATI_IXP600_IDE = 0x438C,PCI_VENDOR_ID_VLSI = 0x1004,PCI_DEVICE_ID_VLSI_82C592 = 0x5,PCI_DEVICE_ID_VLSI_82C593 = 0x6,PCI_DEVICE_ID_VLSI_82C594 = 0x7,PCI_DEVICE_ID_VLSI_82C597 = 0x9,PCI_DEVICE_ID_VLSI_82C541 = 0xC,PCI_DEVICE_ID_VLSI_82C543 = 0xD,PCI_DEVICE_ID_VLSI_82C532 = 0x101,PCI_DEVICE_ID_VLSI_82C534 = 0x102,PCI_DEVICE_ID_VLSI_82C535 = 0x104,PCI_DEVICE_ID_VLSI_82C147 = 0x105,PCI_DEVICE_ID_VLSI_VAS96011 = 0x702,PCI_VENDOR_ID_ADL = 0x1005,PCI_DEVICE_ID_ADL_2301 = 0x2301,PCI_VENDOR_ID_NS = 0x100B,PCI_DEVICE_ID_NS_87415 = 0x2,PCI_DEVICE_ID_NS_87560_LIO = 0xE,PCI_DEVICE_ID_NS_87560_USB = 0x12,PCI_DEVICE_ID_NS_83815 = 0x20,PCI_DEVICE_ID_NS_83820 = 0x22,PCI_DEVICE_ID_NS_CS5535_ISA = 0x2B,PCI_DEVICE_ID_NS_CS5535_IDE = 0x2D,PCI_DEVICE_ID_NS_CS5535_AUDIO = 0x2E,PCI_DEVICE_ID_NS_CS5535_USB = 0x2F,PCI_DEVICE_ID_NS_CS5535_VIDEO = 0x30,PCI_DEVICE_ID_NS_SATURN = 0x35,PCI_DEVICE_ID_NS_SCx200_BRIDGE = 0x500,PCI_DEVICE_ID_NS_SCx200_SMI = 0x501,PCI_DEVICE_ID_NS_SCx200_IDE = 0x502,PCI_DEVICE_ID_NS_SCx200_AUDIO = 0x503,PCI_DEVICE_ID_NS_SCx200_VIDEO = 0x504,PCI_DEVICE_ID_NS_SCx200_XBUS = 0x505,PCI_DEVICE_ID_NS_SC1100_BRIDGE = 0x510,PCI_DEVICE_ID_NS_SC1100_SMI = 0x511,PCI_DEVICE_ID_NS_SC1100_XBUS = 0x515,PCI_DEVICE_ID_NS_87410 = 0xD001,PCI_DEVICE_ID_NS_CS5535_HOST_BRIDGE = 0x28,PCI_DEVICE_ID_NS_CS5535_ISA_BRIDGE = 0x2B,PCI_VENDOR_ID_TSENG = 0x100C,PCI_DEVICE_ID_TSENG_W32P_2 = 0x3202,PCI_DEVICE_ID_TSENG_W32P_b = 0x3205,PCI_DEVICE_ID_TSENG_W32P_c = 0x3206,PCI_DEVICE_ID_TSENG_W32P_d = 0x3207,PCI_DEVICE_ID_TSENG_ET6000 = 0x3208,PCI_VENDOR_ID_WEITEK = 0x100E,PCI_DEVICE_ID_WEITEK_P9000 = 0x9001,PCI_DEVICE_ID_WEITEK_P9100 = 0x9100,PCI_VENDOR_ID_DEC = 0x1011,PCI_DEVICE_ID_DEC_BRD = 0x1,PCI_DEVICE_ID_DEC_TULIP = 0x2,PCI_DEVICE_ID_DEC_TGA = 0x4,PCI_DEVICE_ID_DEC_TULIP_FAST = 0x9,PCI_DEVICE_ID_DEC_TGA2 = 0xD,PCI_DEVICE_ID_DEC_FDDI = 0xF,PCI_DEVICE_ID_DEC_TULIP_PLUS = 0x14,PCI_DEVICE_ID_DEC_21142 = 0x19,PCI_DEVICE_ID_DEC_21052 = 0x21,PCI_DEVICE_ID_DEC_21150 = 0x22,PCI_DEVICE_ID_DEC_21152 = 0x24,PCI_DEVICE_ID_DEC_21153 = 0x25,PCI_DEVICE_ID_DEC_21154 = 0x26,PCI_DEVICE_ID_DEC_21285 = 0x1065,PCI_DEVICE_ID_COMPAQ_42XX = 0x46,PCI_VENDOR_ID_CIRRUS = 0x1013,PCI_DEVICE_ID_CIRRUS_7548 = 0x38,PCI_DEVICE_ID_CIRRUS_5430 = 0xA0,PCI_DEVICE_ID_CIRRUS_5434_4 = 0xA4,PCI_DEVICE_ID_CIRRUS_5434_8 = 0xA8,PCI_DEVICE_ID_CIRRUS_5436 = 0xAC,PCI_DEVICE_ID_CIRRUS_5446 = 0xB8,PCI_DEVICE_ID_CIRRUS_5480 = 0xBC,PCI_DEVICE_ID_CIRRUS_5462 = 0xD0,PCI_DEVICE_ID_CIRRUS_5464 = 0xD4,PCI_DEVICE_ID_CIRRUS_5465 = 0xD6,PCI_DEVICE_ID_CIRRUS_6729 = 0x1100,PCI_DEVICE_ID_CIRRUS_6832 = 0x1110,PCI_DEVICE_ID_CIRRUS_7543 = 0x1202,PCI_DEVICE_ID_CIRRUS_4610 = 0x6001,PCI_DEVICE_ID_CIRRUS_4612 = 0x6003,PCI_DEVICE_ID_CIRRUS_4615 = 0x6004,PCI_VENDOR_ID_IBM = 0x1014,PCI_DEVICE_ID_IBM_TR = 0x18,PCI_DEVICE_ID_IBM_TR_WAKE = 0x3E,PCI_DEVICE_ID_IBM_CPC710_PCI64 = 0xFC,PCI_DEVICE_ID_IBM_SNIPE = 0x180,PCI_DEVICE_ID_IBM_CITRINE = 0x28C,PCI_DEVICE_ID_IBM_GEMSTONE = 0xB166,PCI_DEVICE_ID_IBM_OBSIDIAN = 0x2BD,PCI_DEVICE_ID_IBM_ICOM_DEV_ID_1 = 0x31,PCI_DEVICE_ID_IBM_ICOM_DEV_ID_2 = 0x219,PCI_DEVICE_ID_IBM_ICOM_V2_TWO_PORTS_RVX = 0x21A,PCI_DEVICE_ID_IBM_ICOM_V2_ONE_PORT_RVX_ONE_PORT_MDM = 0x251,PCI_DEVICE_ID_IBM_ICOM_FOUR_PORT_MODEL = 0x252,PCI_VENDOR_ID_COMPEX2 = 0x101A,PCI_DEVICE_ID_COMPEX2_100VG = 0x5,PCI_VENDOR_ID_WD = 0x101C,PCI_DEVICE_ID_WD_90C = 0xC24A,PCI_VENDOR_ID_AMI = 0x101E,PCI_DEVICE_ID_AMI_MEGARAID3 = 0x1960,PCI_DEVICE_ID_AMI_MEGARAID = 0x9010,PCI_DEVICE_ID_AMI_MEGARAID2 = 0x9060,PCI_VENDOR_ID_AMD = 0x1022,PCI_DEVICE_ID_AMD_K8_NB = 0x1100,PCI_DEVICE_ID_AMD_LANCE = 0x2000,PCI_DEVICE_ID_AMD_LANCE_HOME = 0x2001,PCI_DEVICE_ID_AMD_SCSI = 0x2020,PCI_DEVICE_ID_AMD_SERENADE = 0x36C0,PCI_DEVICE_ID_AMD_FE_GATE_7006 = 0x7006,PCI_DEVICE_ID_AMD_FE_GATE_7007 = 0x7007,PCI_DEVICE_ID_AMD_FE_GATE_700C = 0x700C,PCI_DEVICE_ID_AMD_FE_GATE_700E = 0x700E,PCI_DEVICE_ID_AMD_COBRA_7401 = 0x7401,PCI_DEVICE_ID_AMD_VIPER_7409 = 0x7409,PCI_DEVICE_ID_AMD_VIPER_740B = 0x740B,PCI_DEVICE_ID_AMD_VIPER_7410 = 0x7410,PCI_DEVICE_ID_AMD_VIPER_7411 = 0x7411,PCI_DEVICE_ID_AMD_VIPER_7413 = 0x7413,PCI_DEVICE_ID_AMD_VIPER_7440 = 0x7440,PCI_DEVICE_ID_AMD_OPUS_7441 = 0x7441,PCI_DEVICE_ID_AMD_OPUS_7443 = 0x7443,PCI_DEVICE_ID_AMD_VIPER_7443 = 0x7443,PCI_DEVICE_ID_AMD_OPUS_7445 = 0x7445,PCI_DEVICE_ID_AMD_8111_LPC = 0x7468,PCI_DEVICE_ID_AMD_8111_IDE = 0x7469,PCI_DEVICE_ID_AMD_8111_SMBUS2 = 0x746A,PCI_DEVICE_ID_AMD_8111_SMBUS = 0x746B,PCI_DEVICE_ID_AMD_8111_AUDIO = 0x746D,PCI_DEVICE_ID_AMD_8151_0 = 0x7454,PCI_DEVICE_ID_AMD_8131_BRIDGE = 0x7450,PCI_DEVICE_ID_AMD_8131_APIC = 0x7451,PCI_DEVICE_ID_AMD_CS5536_ISA = 0x2090,PCI_DEVICE_ID_AMD_CS5536_FLASH = 0x2091,PCI_DEVICE_ID_AMD_CS5536_AUDIO = 0x2093,PCI_DEVICE_ID_AMD_CS5536_OHC = 0x2094,PCI_DEVICE_ID_AMD_CS5536_EHC = 0x2095,PCI_DEVICE_ID_AMD_CS5536_UDC = 0x2096,PCI_DEVICE_ID_AMD_CS5536_UOC = 0x2097,PCI_DEVICE_ID_AMD_CS5536_IDE = 0x209A,PCI_DEVICE_ID_AMD_LX_VIDEO = 0x2081,PCI_DEVICE_ID_AMD_LX_AES = 0x2082,PCI_VENDOR_ID_TRIDENT = 0x1023,PCI_DEVICE_ID_TRIDENT_4DWAVE_DX = 0x2000,PCI_DEVICE_ID_TRIDENT_4DWAVE_NX = 0x2001,PCI_DEVICE_ID_TRIDENT_9320 = 0x9320,PCI_DEVICE_ID_TRIDENT_9388 = 0x9388,PCI_DEVICE_ID_TRIDENT_9397 = 0x9397,PCI_DEVICE_ID_TRIDENT_939A = 0x939A,PCI_DEVICE_ID_TRIDENT_9520 = 0x9520,PCI_DEVICE_ID_TRIDENT_9525 = 0x9525,PCI_DEVICE_ID_TRIDENT_9420 = 0x9420,PCI_DEVICE_ID_TRIDENT_9440 = 0x9440,PCI_DEVICE_ID_TRIDENT_9660 = 0x9660,PCI_DEVICE_ID_TRIDENT_9750 = 0x9750,PCI_DEVICE_ID_TRIDENT_9850 = 0x9850,PCI_DEVICE_ID_TRIDENT_9880 = 0x9880,PCI_DEVICE_ID_TRIDENT_8400 = 0x8400,PCI_DEVICE_ID_TRIDENT_8420 = 0x8420,PCI_DEVICE_ID_TRIDENT_8500 = 0x8500,PCI_VENDOR_ID_AI = 0x1025,PCI_DEVICE_ID_AI_M1435 = 0x1435,PCI_VENDOR_ID_DELL = 0x1028,PCI_DEVICE_ID_DELL_RACIII = 0x8,PCI_DEVICE_ID_DELL_RAC4 = 0x12,PCI_DEVICE_ID_DELL_PERC5 = 0x15,PCI_VENDOR_ID_MATROX = 0x102B,PCI_DEVICE_ID_MATROX_MGA_2 = 0x518,PCI_DEVICE_ID_MATROX_MIL = 0x519,PCI_DEVICE_ID_MATROX_MYS = 0x51A,PCI_DEVICE_ID_MATROX_MIL_2 = 0x51B,PCI_DEVICE_ID_MATROX_MYS_AGP = 0x51E,PCI_DEVICE_ID_MATROX_MIL_2_AGP = 0x51F,PCI_DEVICE_ID_MATROX_MGA_IMP = 0xD10,PCI_DEVICE_ID_MATROX_G100_MM = 0x1000,PCI_DEVICE_ID_MATROX_G100_AGP = 0x1001,PCI_DEVICE_ID_MATROX_G200_PCI = 0x520,PCI_DEVICE_ID_MATROX_G200_AGP = 0x521,PCI_DEVICE_ID_MATROX_G400 = 0x525,PCI_DEVICE_ID_MATROX_G550 = 0x2527,PCI_DEVICE_ID_MATROX_VIA = 0x4536,PCI_VENDOR_ID_CT = 0x102C,PCI_DEVICE_ID_CT_69000 = 0xC0,PCI_DEVICE_ID_CT_65545 = 0xD8,PCI_DEVICE_ID_CT_65548 = 0xDC,PCI_DEVICE_ID_CT_65550 = 0xE0,PCI_DEVICE_ID_CT_65554 = 0xE4,PCI_DEVICE_ID_CT_65555 = 0xE5,PCI_VENDOR_ID_MIRO = 0x1031,PCI_DEVICE_ID_MIRO_36050 = 0x5601,PCI_DEVICE_ID_MIRO_DC10PLUS = 0x7EFE,PCI_DEVICE_ID_MIRO_DC30PLUS = 0xD801,PCI_VENDOR_ID_NEC = 0x1033,PCI_DEVICE_ID_NEC_CBUS_1 = 0x1,PCI_DEVICE_ID_NEC_LOCAL = 0x2,PCI_DEVICE_ID_NEC_ATM = 0x3,PCI_DEVICE_ID_NEC_R4000 = 0x4,PCI_DEVICE_ID_NEC_486 = 0x5,PCI_DEVICE_ID_NEC_ACCEL_1 = 0x6,PCI_DEVICE_ID_NEC_UXBUS = 0x7,PCI_DEVICE_ID_NEC_ACCEL_2 = 0x8,PCI_DEVICE_ID_NEC_GRAPH = 0x9,PCI_DEVICE_ID_NEC_VL = 0x16,PCI_DEVICE_ID_NEC_STARALPHA2 = 0x2C,PCI_DEVICE_ID_NEC_CBUS_2 = 0x2D,PCI_DEVICE_ID_NEC_USB = 0x35,PCI_DEVICE_ID_NEC_CBUS_3 = 0x3B,PCI_DEVICE_ID_NEC_NAPCCARD = 0x3E,PCI_DEVICE_ID_NEC_PCX2 = 0x46,PCI_DEVICE_ID_NEC_NILE4 = 0x5A,PCI_DEVICE_ID_NEC_VRC5476 = 0x9B,PCI_DEVICE_ID_NEC_VRC4173 = 0xA5,PCI_DEVICE_ID_NEC_VRC5477_AC97 = 0xA6,PCI_DEVICE_ID_NEC_PC9821CS01 = 0x800C,PCI_DEVICE_ID_NEC_PC9821NRB06 = 0x800D,PCI_VENDOR_ID_FD = 0x1036,PCI_DEVICE_ID_FD_36C70 = 0x0,PCI_VENDOR_ID_SI = 0x1039,PCI_DEVICE_ID_SI_5591_AGP = 0x1,PCI_DEVICE_ID_SI_6202 = 0x2,PCI_DEVICE_ID_SI_503 = 0x8,PCI_DEVICE_ID_SI_ACPI = 0x9,PCI_DEVICE_ID_SI_SMBUS = 0x16,PCI_DEVICE_ID_SI_LPC = 0x18,PCI_DEVICE_ID_SI_5597_VGA = 0x200,PCI_DEVICE_ID_SI_6205 = 0x205,PCI_DEVICE_ID_SI_501 = 0x406,PCI_DEVICE_ID_SI_496 = 0x496,PCI_DEVICE_ID_SI_300 = 0x300,PCI_DEVICE_ID_SI_315H = 0x310,PCI_DEVICE_ID_SI_315 = 0x315,PCI_DEVICE_ID_SI_315PRO = 0x325,PCI_DEVICE_ID_SI_530 = 0x530,PCI_DEVICE_ID_SI_540 = 0x540,PCI_DEVICE_ID_SI_550 = 0x550,PCI_DEVICE_ID_SI_540_VGA = 0x5300,PCI_DEVICE_ID_SI_550_VGA = 0x5315,PCI_DEVICE_ID_SI_620 = 0x620,PCI_DEVICE_ID_SI_630 = 0x630,PCI_DEVICE_ID_SI_633 = 0x633,PCI_DEVICE_ID_SI_635 = 0x635,PCI_DEVICE_ID_SI_640 = 0x640,PCI_DEVICE_ID_SI_645 = 0x645,PCI_DEVICE_ID_SI_646 = 0x646,PCI_DEVICE_ID_SI_648 = 0x648,PCI_DEVICE_ID_SI_650 = 0x650,PCI_DEVICE_ID_SI_651 = 0x651,PCI_DEVICE_ID_SI_655 = 0x655,PCI_DEVICE_ID_SI_661 = 0x661,PCI_DEVICE_ID_SI_730 = 0x730,PCI_DEVICE_ID_SI_733 = 0x733,PCI_DEVICE_ID_SI_630_VGA = 0x6300,PCI_DEVICE_ID_SI_735 = 0x735,PCI_DEVICE_ID_SI_740 = 0x740,PCI_DEVICE_ID_SI_741 = 0x741,PCI_DEVICE_ID_SI_745 = 0x745,PCI_DEVICE_ID_SI_746 = 0x746,PCI_DEVICE_ID_SI_755 = 0x755,PCI_DEVICE_ID_SI_760 = 0x760,PCI_DEVICE_ID_SI_900 = 0x900,PCI_DEVICE_ID_SI_961 = 0x961,PCI_DEVICE_ID_SI_962 = 0x962,PCI_DEVICE_ID_SI_963 = 0x963,PCI_DEVICE_ID_SI_965 = 0x965,PCI_DEVICE_ID_SI_966 = 0x966,PCI_DEVICE_ID_SI_968 = 0x968,PCI_DEVICE_ID_SI_5511 = 0x5511,PCI_DEVICE_ID_SI_5513 = 0x5513,PCI_DEVICE_ID_SI_5517 = 0x5517,PCI_DEVICE_ID_SI_5518 = 0x5518,PCI_DEVICE_ID_SI_5571 = 0x5571,PCI_DEVICE_ID_SI_5581 = 0x5581,PCI_DEVICE_ID_SI_5582 = 0x5582,PCI_DEVICE_ID_SI_5591 = 0x5591,PCI_DEVICE_ID_SI_5596 = 0x5596,PCI_DEVICE_ID_SI_5597 = 0x5597,PCI_DEVICE_ID_SI_5598 = 0x5598,PCI_DEVICE_ID_SI_5600 = 0x5600,PCI_DEVICE_ID_SI_7012 = 0x7012,PCI_DEVICE_ID_SI_7013 = 0x7013,PCI_DEVICE_ID_SI_7016 = 0x7016,PCI_DEVICE_ID_SI_7018 = 0x7018,PCI_VENDOR_ID_HP = 0x103C,PCI_DEVICE_ID_HP_VISUALIZE_EG = 0x1005,PCI_DEVICE_ID_HP_VISUALIZE_FX6 = 0x1006,PCI_DEVICE_ID_HP_VISUALIZE_FX4 = 0x1008,PCI_DEVICE_ID_HP_VISUALIZE_FX2 = 0x100A,PCI_DEVICE_ID_HP_TACHYON = 0x1028,PCI_DEVICE_ID_HP_TACHLITE = 0x1029,PCI_DEVICE_ID_HP_J2585A = 0x1030,PCI_DEVICE_ID_HP_J2585B = 0x1031,PCI_DEVICE_ID_HP_J2973A = 0x1040,PCI_DEVICE_ID_HP_J2970A = 0x1042,PCI_DEVICE_ID_HP_DIVA = 0x1048,PCI_DEVICE_ID_HP_DIVA_TOSCA1 = 0x1049,PCI_DEVICE_ID_HP_DIVA_TOSCA2 = 0x104A,PCI_DEVICE_ID_HP_DIVA_MAESTRO = 0x104B,PCI_DEVICE_ID_HP_REO_IOC = 0x10F1,PCI_DEVICE_ID_HP_VISUALIZE_FXE = 0x108B,PCI_DEVICE_ID_HP_DIVA_HALFDOME = 0x1223,PCI_DEVICE_ID_HP_DIVA_KEYSTONE = 0x1226,PCI_DEVICE_ID_HP_DIVA_POWERBAR = 0x1227,PCI_DEVICE_ID_HP_ZX1_IOC = 0x122A,PCI_DEVICE_ID_HP_PCIX_LBA = 0x122E,PCI_DEVICE_ID_HP_SX1000_IOC = 0x127C,PCI_DEVICE_ID_HP_DIVA_EVEREST = 0x1282,PCI_DEVICE_ID_HP_DIVA_AUX = 0x1290,PCI_DEVICE_ID_HP_DIVA_RMP3 = 0x1301,PCI_DEVICE_ID_HP_DIVA_HURRICANE = 0x132A,PCI_DEVICE_ID_HP_CISSA = 0x3220,PCI_DEVICE_ID_HP_CISSC = 0x3230,PCI_DEVICE_ID_HP_CISSD = 0x3238,PCI_DEVICE_ID_HP_ZX2_IOC = 0x4031,PCI_VENDOR_ID_PCTECH = 0x1042,PCI_DEVICE_ID_PCTECH_RZ1000 = 0x1000,PCI_DEVICE_ID_PCTECH_RZ1001 = 0x1001,PCI_DEVICE_ID_PCTECH_SAMURAI_IDE = 0x3020,PCI_VENDOR_ID_ASUSTEK = 0x1043,PCI_DEVICE_ID_ASUSTEK_0675 = 0x675,PCI_VENDOR_ID_DPT = 0x1044,PCI_DEVICE_ID_DPT = 0xA400,PCI_VENDOR_ID_OPTI = 0x1045,PCI_DEVICE_ID_OPTI_82C558 = 0xC558,PCI_DEVICE_ID_OPTI_82C621 = 0xC621,PCI_DEVICE_ID_OPTI_82C700 = 0xC700,PCI_DEVICE_ID_OPTI_82C825 = 0xD568,PCI_VENDOR_ID_ELSA = 0x1048,PCI_DEVICE_ID_ELSA_MICROLINK = 0x1000,PCI_DEVICE_ID_ELSA_QS3000 = 0x3000,PCI_VENDOR_ID_BUSLOGIC = 0x104B,PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER_NC = 0x140,PCI_DEVICE_ID_BUSLOGIC_MULTIMASTER = 0x1040,PCI_DEVICE_ID_BUSLOGIC_FLASHPOINT = 0x8130,PCI_VENDOR_ID_TI = 0x104C,PCI_DEVICE_ID_TI_TVP4020 = 0x3D07,PCI_DEVICE_ID_TI_4450 = 0x8011,PCI_DEVICE_ID_TI_XX21_XX11 = 0x8031,PCI_DEVICE_ID_TI_XX21_XX11_SD = 0x8034,PCI_DEVICE_ID_TI_X515 = 0x8036,PCI_DEVICE_ID_TI_XX12 = 0x8039,PCI_DEVICE_ID_TI_1130 = 0xAC12,PCI_DEVICE_ID_TI_1031 = 0xAC13,PCI_DEVICE_ID_TI_1131 = 0xAC15,PCI_DEVICE_ID_TI_1250 = 0xAC16,PCI_DEVICE_ID_TI_1220 = 0xAC17,PCI_DEVICE_ID_TI_1221 = 0xAC19,PCI_DEVICE_ID_TI_1210 = 0xAC1A,PCI_DEVICE_ID_TI_1450 = 0xAC1B,PCI_DEVICE_ID_TI_1225 = 0xAC1C,PCI_DEVICE_ID_TI_1251A = 0xAC1D,PCI_DEVICE_ID_TI_1211 = 0xAC1E,PCI_DEVICE_ID_TI_1251B = 0xAC1F,PCI_DEVICE_ID_TI_4410 = 0xAC41,PCI_DEVICE_ID_TI_4451 = 0xAC42,PCI_DEVICE_ID_TI_4510 = 0xAC44,PCI_DEVICE_ID_TI_4520 = 0xAC46,PCI_DEVICE_ID_TI_7510 = 0xAC47,PCI_DEVICE_ID_TI_7610 = 0xAC48,PCI_DEVICE_ID_TI_7410 = 0xAC49,PCI_DEVICE_ID_TI_1410 = 0xAC50,PCI_DEVICE_ID_TI_1420 = 0xAC51,PCI_DEVICE_ID_TI_1451A = 0xAC52,PCI_DEVICE_ID_TI_1620 = 0xAC54,PCI_DEVICE_ID_TI_1520 = 0xAC55,PCI_DEVICE_ID_TI_1510 = 0xAC56,PCI_DEVICE_ID_TI_X620 = 0xAC8D,PCI_DEVICE_ID_TI_X420 = 0xAC8E,PCI_VENDOR_ID_SONY = 0x104D,PCI_VENDOR_ID_WINBOND2 = 0x1050,PCI_DEVICE_ID_WINBOND2_89C940F = 0x5A5A,PCI_DEVICE_ID_WINBOND2_6692 = 0x6692,PCI_VENDOR_ID_ANIGMA = 0x1051,PCI_DEVICE_ID_ANIGMA_MC145575 = 0x100,PCI_VENDOR_ID_EFAR = 0x1055,PCI_DEVICE_ID_EFAR_SLC90E66_1 = 0x9130,PCI_DEVICE_ID_EFAR_SLC90E66_3 = 0x9463,PCI_VENDOR_ID_MOTOROLA = 0x1057,PCI_DEVICE_ID_MOTOROLA_MPC105 = 0x1,PCI_DEVICE_ID_MOTOROLA_MPC106 = 0x2,PCI_DEVICE_ID_MOTOROLA_MPC107 = 0x4,PCI_DEVICE_ID_MOTOROLA_RAVEN = 0x4801,PCI_DEVICE_ID_MOTOROLA_FALCON = 0x4802,PCI_DEVICE_ID_MOTOROLA_HAWK = 0x4803,PCI_DEVICE_ID_MOTOROLA_HARRIER = 0x480B,PCI_DEVICE_ID_MOTOROLA_MPC5200 = 0x5803,PCI_DEVICE_ID_MOTOROLA_MPC5200B = 0x5809,PCI_VENDOR_ID_PROMISE = 0x105A,PCI_DEVICE_ID_PROMISE_20265 = 0xD30,PCI_DEVICE_ID_PROMISE_20267 = 0x4D30,PCI_DEVICE_ID_PROMISE_20246 = 0x4D33,PCI_DEVICE_ID_PROMISE_20262 = 0x4D38,PCI_DEVICE_ID_PROMISE_20263 = 0xD38,PCI_DEVICE_ID_PROMISE_20268 = 0x4D68,PCI_DEVICE_ID_PROMISE_20269 = 0x4D69,PCI_DEVICE_ID_PROMISE_20270 = 0x6268,PCI_DEVICE_ID_PROMISE_20271 = 0x6269,PCI_DEVICE_ID_PROMISE_20275 = 0x1275,PCI_DEVICE_ID_PROMISE_20276 = 0x5275,PCI_DEVICE_ID_PROMISE_20277 = 0x7275,PCI_VENDOR_ID_UMC = 0x1060,PCI_DEVICE_ID_UMC_UM8673F = 0x101,PCI_DEVICE_ID_UMC_UM8886BF = 0x673A,PCI_DEVICE_ID_UMC_UM8886A = 0x886A,PCI_VENDOR_ID_MYLEX = 0x1069,PCI_DEVICE_ID_MYLEX_DAC960_P = 0x1,PCI_DEVICE_ID_MYLEX_DAC960_PD = 0x2,PCI_DEVICE_ID_MYLEX_DAC960_PG = 0x10,PCI_DEVICE_ID_MYLEX_DAC960_LA = 0x20,PCI_DEVICE_ID_MYLEX_DAC960_LP = 0x50,PCI_DEVICE_ID_MYLEX_DAC960_BA = 0xBA56,PCI_DEVICE_ID_MYLEX_DAC960_GEM = 0xB166,PCI_VENDOR_ID_APPLE = 0x106B,PCI_DEVICE_ID_APPLE_BANDIT = 0x1,PCI_DEVICE_ID_APPLE_HYDRA = 0xE,PCI_DEVICE_ID_APPLE_UNI_N_FW = 0x18,PCI_DEVICE_ID_APPLE_UNI_N_AGP = 0x20,PCI_DEVICE_ID_APPLE_UNI_N_GMAC = 0x21,PCI_DEVICE_ID_APPLE_UNI_N_GMACP = 0x24,PCI_DEVICE_ID_APPLE_UNI_N_AGP_P = 0x27,PCI_DEVICE_ID_APPLE_UNI_N_AGP15 = 0x2D,PCI_DEVICE_ID_APPLE_UNI_N_PCI15 = 0x2E,PCI_DEVICE_ID_APPLE_UNI_N_GMAC2 = 0x32,PCI_DEVICE_ID_APPLE_UNI_N_ATA = 0x33,PCI_DEVICE_ID_APPLE_UNI_N_AGP2 = 0x34,PCI_DEVICE_ID_APPLE_IPID_ATA100 = 0x3B,PCI_DEVICE_ID_APPLE_K2_ATA100 = 0x43,PCI_DEVICE_ID_APPLE_U3_AGP = 0x4B,PCI_DEVICE_ID_APPLE_K2_GMAC = 0x4C,PCI_DEVICE_ID_APPLE_SH_ATA = 0x50,PCI_DEVICE_ID_APPLE_SH_SUNGEM = 0x51,PCI_DEVICE_ID_APPLE_U3L_AGP = 0x58,PCI_DEVICE_ID_APPLE_U3H_AGP = 0x59,PCI_DEVICE_ID_APPLE_IPID2_AGP = 0x66,PCI_DEVICE_ID_APPLE_IPID2_ATA = 0x69,PCI_DEVICE_ID_APPLE_IPID2_FW = 0x6A,PCI_DEVICE_ID_APPLE_IPID2_GMAC = 0x6B,PCI_DEVICE_ID_APPLE_TIGON3 = 0x1645,PCI_VENDOR_ID_YAMAHA = 0x1073,PCI_DEVICE_ID_YAMAHA_724 = 0x4,PCI_DEVICE_ID_YAMAHA_724F = 0xD,PCI_DEVICE_ID_YAMAHA_740 = 0xA,PCI_DEVICE_ID_YAMAHA_740C = 0xC,PCI_DEVICE_ID_YAMAHA_744 = 0x10,PCI_DEVICE_ID_YAMAHA_754 = 0x12,PCI_VENDOR_ID_QLOGIC = 0x1077,PCI_DEVICE_ID_QLOGIC_ISP10160 = 0x1016,PCI_DEVICE_ID_QLOGIC_ISP1020 = 0x1020,PCI_DEVICE_ID_QLOGIC_ISP1080 = 0x1080,PCI_DEVICE_ID_QLOGIC_ISP12160 = 0x1216,PCI_DEVICE_ID_QLOGIC_ISP1240 = 0x1240,PCI_DEVICE_ID_QLOGIC_ISP1280 = 0x1280,PCI_DEVICE_ID_QLOGIC_ISP2100 = 0x2100,PCI_DEVICE_ID_QLOGIC_ISP2200 = 0x2200,PCI_DEVICE_ID_QLOGIC_ISP2300 = 0x2300,PCI_DEVICE_ID_QLOGIC_ISP2312 = 0x2312,PCI_DEVICE_ID_QLOGIC_ISP2322 = 0x2322,PCI_DEVICE_ID_QLOGIC_ISP6312 = 0x6312,PCI_DEVICE_ID_QLOGIC_ISP6322 = 0x6322,PCI_DEVICE_ID_QLOGIC_ISP2422 = 0x2422,PCI_DEVICE_ID_QLOGIC_ISP2432 = 0x2432,PCI_DEVICE_ID_QLOGIC_ISP2512 = 0x2512,PCI_DEVICE_ID_QLOGIC_ISP2522 = 0x2522,PCI_DEVICE_ID_QLOGIC_ISP5422 = 0x5422,PCI_DEVICE_ID_QLOGIC_ISP5432 = 0x5432,PCI_VENDOR_ID_CYRIX = 0x1078,PCI_DEVICE_ID_CYRIX_5510 = 0x0,PCI_DEVICE_ID_CYRIX_PCI_MASTER = 0x1,PCI_DEVICE_ID_CYRIX_5520 = 0x2,PCI_DEVICE_ID_CYRIX_5530_LEGACY = 0x100,PCI_DEVICE_ID_CYRIX_5530_IDE = 0x102,PCI_DEVICE_ID_CYRIX_5530_AUDIO = 0x103,PCI_DEVICE_ID_CYRIX_5530_VIDEO = 0x104,PCI_VENDOR_ID_CONTAQ = 0x1080,PCI_DEVICE_ID_CONTAQ_82C693 = 0xC693,PCI_VENDOR_ID_OLICOM = 0x108D,PCI_DEVICE_ID_OLICOM_OC2325 = 0x12,PCI_DEVICE_ID_OLICOM_OC2183 = 0x13,PCI_DEVICE_ID_OLICOM_OC2326 = 0x14,PCI_VENDOR_ID_SUN = 0x108E,PCI_DEVICE_ID_SUN_EBUS = 0x1000,PCI_DEVICE_ID_SUN_HAPPYMEAL = 0x1001,PCI_DEVICE_ID_SUN_RIO_EBUS = 0x1100,PCI_DEVICE_ID_SUN_RIO_GEM = 0x1101,PCI_DEVICE_ID_SUN_RIO_1394 = 0x1102,PCI_DEVICE_ID_SUN_RIO_USB = 0x1103,PCI_DEVICE_ID_SUN_GEM = 0x2BAD,PCI_DEVICE_ID_SUN_SIMBA = 0x5000,PCI_DEVICE_ID_SUN_PBM = 0x8000,PCI_DEVICE_ID_SUN_SCHIZO = 0x8001,PCI_DEVICE_ID_SUN_SABRE = 0xA000,PCI_DEVICE_ID_SUN_HUMMINGBIRD = 0xA001,PCI_DEVICE_ID_SUN_TOMATILLO = 0xA801,PCI_DEVICE_ID_SUN_CASSINI = 0xABBA,PCI_VENDOR_ID_CMD = 0x1095,PCI_DEVICE_ID_CMD_643 = 0x643,PCI_DEVICE_ID_CMD_646 = 0x646,PCI_DEVICE_ID_CMD_648 = 0x648,PCI_DEVICE_ID_CMD_649 = 0x649,PCI_DEVICE_ID_SII_680 = 0x680,PCI_DEVICE_ID_SII_3112 = 0x3112,PCI_DEVICE_ID_SII_1210SA = 0x240,PCI_VENDOR_ID_BROOKTREE = 0x109E,PCI_DEVICE_ID_BROOKTREE_878 = 0x878,PCI_DEVICE_ID_BROOKTREE_879 = 0x879,PCI_VENDOR_ID_SGI = 0x10A9,PCI_DEVICE_ID_SGI_IOC3 = 0x3,PCI_DEVICE_ID_SGI_IOC4 = 0x100A,PCI_VENDOR_ID_SGI_LITHIUM = 0x1002,PCI_VENDOR_ID_WINBOND = 0x10AD,PCI_DEVICE_ID_WINBOND_82C105 = 0x105,PCI_DEVICE_ID_WINBOND_83C553 = 0x565,PCI_VENDOR_ID_PLX = 0x10B5,PCI_DEVICE_ID_PLX_R685 = 0x1030,PCI_DEVICE_ID_PLX_ROMULUS = 0x106A,PCI_DEVICE_ID_PLX_SPCOM800 = 0x1076,PCI_DEVICE_ID_PLX_1077 = 0x1077,PCI_DEVICE_ID_PLX_SPCOM200 = 0x1103,PCI_DEVICE_ID_PLX_DJINN_ITOO = 0x1151,PCI_DEVICE_ID_PLX_R753 = 0x1152,PCI_DEVICE_ID_PLX_OLITEC = 0x1187,PCI_DEVICE_ID_PLX_PCI200SYN = 0x3196,PCI_DEVICE_ID_PLX_9050 = 0x9050,PCI_DEVICE_ID_PLX_9080 = 0x9080,PCI_DEVICE_ID_PLX_GTEK_SERIAL2 = 0xA001,PCI_VENDOR_ID_MADGE = 0x10B6,PCI_DEVICE_ID_MADGE_MK2 = 0x2,PCI_VENDOR_ID_3COM = 0x10B7,PCI_DEVICE_ID_3COM_3C985 = 0x1,PCI_DEVICE_ID_3COM_3C940 = 0x1700,PCI_DEVICE_ID_3COM_3C339 = 0x3390,PCI_DEVICE_ID_3COM_3C359 = 0x3590,PCI_DEVICE_ID_3COM_3C940B = 0x80EB,PCI_DEVICE_ID_3COM_3CR990 = 0x9900,PCI_DEVICE_ID_3COM_3CR990_TX_95 = 0x9902,PCI_DEVICE_ID_3COM_3CR990_TX_97 = 0x9903,PCI_DEVICE_ID_3COM_3CR990B = 0x9904,PCI_DEVICE_ID_3COM_3CR990_FX = 0x9905,PCI_DEVICE_ID_3COM_3CR990SVR95 = 0x9908,PCI_DEVICE_ID_3COM_3CR990SVR97 = 0x9909,PCI_DEVICE_ID_3COM_3CR990SVR = 0x990A,PCI_VENDOR_ID_AL = 0x10B9,PCI_DEVICE_ID_AL_M1533 = 0x1533,PCI_DEVICE_ID_AL_M1535 = 0x1535,PCI_DEVICE_ID_AL_M1541 = 0x1541,PCI_DEVICE_ID_AL_M1563 = 0x1563,PCI_DEVICE_ID_AL_M1621 = 0x1621,PCI_DEVICE_ID_AL_M1631 = 0x1631,PCI_DEVICE_ID_AL_M1632 = 0x1632,PCI_DEVICE_ID_AL_M1641 = 0x1641,PCI_DEVICE_ID_AL_M1644 = 0x1644,PCI_DEVICE_ID_AL_M1647 = 0x1647,PCI_DEVICE_ID_AL_M1651 = 0x1651,PCI_DEVICE_ID_AL_M1671 = 0x1671,PCI_DEVICE_ID_AL_M1681 = 0x1681,PCI_DEVICE_ID_AL_M1683 = 0x1683,PCI_DEVICE_ID_AL_M1689 = 0x1689,PCI_DEVICE_ID_AL_M5219 = 0x5219,PCI_DEVICE_ID_AL_M5228 = 0x5228,PCI_DEVICE_ID_AL_M5229 = 0x5229,PCI_DEVICE_ID_AL_M5451 = 0x5451,PCI_DEVICE_ID_AL_M7101 = 0x7101,PCI_VENDOR_ID_NEOMAGIC = 0x10C8,PCI_DEVICE_ID_NEOMAGIC_NM256AV_AUDIO = 0x8005,PCI_DEVICE_ID_NEOMAGIC_NM256ZX_AUDIO = 0x8006,PCI_DEVICE_ID_NEOMAGIC_NM256XL_PLUS_AUDIO = 0x8016,PCI_VENDOR_ID_TCONRAD = 0x10DA,PCI_DEVICE_ID_TCONRAD_TOKENRING = 0x508,PCI_VENDOR_ID_NVIDIA = 0x10DE,PCI_DEVICE_ID_NVIDIA_TNT = 0x20,PCI_DEVICE_ID_NVIDIA_TNT2 = 0x28,PCI_DEVICE_ID_NVIDIA_UTNT2 = 0x29,PCI_DEVICE_ID_NVIDIA_TNT_UNKNOWN = 0x2A,PCI_DEVICE_ID_NVIDIA_VTNT2 = 0x2C,PCI_DEVICE_ID_NVIDIA_UVTNT2 = 0x2D,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SMBUS = 0x34,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_IDE = 0x35,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA = 0x36,PCI_DEVICE_ID_NVIDIA_NVENET_10 = 0x37,PCI_DEVICE_ID_NVIDIA_NVENET_11 = 0x38,PCI_DEVICE_ID_NVIDIA_NFORCE_MCP04_SATA2 = 0x3E,PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_ULTRA = 0x40,PCI_DEVICE_ID_NVIDIA_GEFORCE_6800 = 0x41,PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_LE = 0x42,PCI_DEVICE_ID_NVIDIA_GEFORCE_6800_GT = 0x45,PCI_DEVICE_ID_NVIDIA_QUADRO_FX_4000 = 0x4E,PCI_DEVICE_ID_NVIDIA_NFORCE4_SMBUS = 0x52,PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_IDE = 0x53,PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA = 0x54,PCI_DEVICE_ID_NVIDIA_NFORCE_CK804_SATA2 = 0x55,PCI_DEVICE_ID_NVIDIA_NVENET_8 = 0x56,PCI_DEVICE_ID_NVIDIA_NVENET_9 = 0x57,PCI_DEVICE_ID_NVIDIA_CK804_AUDIO = 0x59,PCI_DEVICE_ID_NVIDIA_CK804_PCIE = 0x5D,PCI_DEVICE_ID_NVIDIA_NFORCE2_SMBUS = 0x64,PCI_DEVICE_ID_NVIDIA_NFORCE2_IDE = 0x65,PCI_DEVICE_ID_NVIDIA_NVENET_2 = 0x66,PCI_DEVICE_ID_NVIDIA_MCP2_MODEM = 0x69,PCI_DEVICE_ID_NVIDIA_MCP2_AUDIO = 0x6A,PCI_DEVICE_ID_NVIDIA_NFORCE2S_SMBUS = 0x84,PCI_DEVICE_ID_NVIDIA_NFORCE2S_IDE = 0x85,PCI_DEVICE_ID_NVIDIA_NVENET_4 = 0x86,PCI_DEVICE_ID_NVIDIA_MCP2S_MODEM = 0x89,PCI_DEVICE_ID_NVIDIA_CK8_AUDIO = 0x8A,PCI_DEVICE_ID_NVIDIA_NVENET_5 = 0x8C,PCI_DEVICE_ID_NVIDIA_NFORCE2S_SATA = 0x8E,PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GT = 0x90,PCI_DEVICE_ID_NVIDIA_GEFORCE_7800_GTX = 0x91,PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800 = 0x98,PCI_DEVICE_ID_NVIDIA_GEFORCE_GO_7800_GTX = 0x99,PCI_DEVICE_ID_NVIDIA_ITNT2 = 0xA0,PCI_DEVICE_ID_GEFORCE_6800A = 0xC1,PCI_DEVICE_ID_GEFORCE_6800A_LE = 0xC2,PCI_DEVICE_ID_GEFORCE_GO_6800 = 0xC8,PCI_DEVICE_ID_GEFORCE_GO_6800_ULTRA = 0xC9,PCI_DEVICE_ID_QUADRO_FX_GO1400 = 0xCC,PCI_DEVICE_ID_QUADRO_FX_1400 = 0xCE,PCI_DEVICE_ID_NVIDIA_NFORCE3 = 0xD1,PCI_DEVICE_ID_NVIDIA_NFORCE3_SMBUS = 0xD4,PCI_DEVICE_ID_NVIDIA_NFORCE3_IDE = 0xD5,PCI_DEVICE_ID_NVIDIA_NVENET_3 = 0xD6,PCI_DEVICE_ID_NVIDIA_MCP3_MODEM = 0xD9,PCI_DEVICE_ID_NVIDIA_MCP3_AUDIO = 0xDA,PCI_DEVICE_ID_NVIDIA_NVENET_7 = 0xDF,PCI_DEVICE_ID_NVIDIA_NFORCE3S = 0xE1,PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA = 0xE3,PCI_DEVICE_ID_NVIDIA_NFORCE3S_SMBUS = 0xE4,PCI_DEVICE_ID_NVIDIA_NFORCE3S_IDE = 0xE5,PCI_DEVICE_ID_NVIDIA_NVENET_6 = 0xE6,PCI_DEVICE_ID_NVIDIA_CK8S_AUDIO = 0xEA,PCI_DEVICE_ID_NVIDIA_NFORCE3S_SATA2 = 0xEE,};
enum MACRO_PCM {PCM_ENABLE_INPUT = 0x1,PCM_ENABLE_OUTPUT = 0x2,};
enum MACRO_PEX {PEX_RECORD_TIMES = 0x1,PEX_USE_PIPES = 0x2,PEX_SAVE_TEMPS = 0x4,PEX_LAST = 0x1,PEX_SEARCH = 0x2,PEX_SUFFIX = 0x4,PEX_STDERR_TO_STDOUT = 0x8,PEX_BINARY_INPUT = 0x10,PEX_BINARY_OUTPUT = 0x20,};
enum MACRO_PGM {PGM_OVERALLMAXVAL = 65535,PGM_MAXMAXVAL = 255,PGM_MAGIC1 = 80,PGM_MAGIC2 = 50,};
enum MACRO_PIO {PIO_FONTRESET = 0x4B6D,};
enum MACRO_PNM {PNM_OVERALLMAXVAL = 65535,PNM_MAXMAXVAL = 255,};
enum MACRO_PPM {PPM_OVERALLMAXVAL = 65535,PPM_MAXMAXVAL = 255,PPM_MAGIC1 = 80,PPM_MAGIC2 = 51,};
enum MACRO_PPP {PPP_HDRLEN = 4,PPP_FCSLEN = 2,PPP_MRU = 1500,PPP_ALLSTATIONS = 255,PPP_UI = 3,PPP_FLAG = 126,PPP_ESCAPE = 125,PPP_TRANS = 32,PPP_IP = 33,PPP_AT = 41,PPP_IPX = 43,PPP_VJC_COMP = 45,PPP_VJC_UNCOMP = 47,PPP_MP = 61,PPP_IPV6 = 87,PPP_COMPFRAG = 251,PPP_COMP = 253,PPP_MPLS_UC = 641,PPP_MPLS_MC = 643,PPP_IPCP = 32801,PPP_ATCP = 32809,PPP_IPXCP = 32811,PPP_IPV6CP = 32855,PPP_CCPFRAG = 33019,PPP_CCP = 33021,PPP_MPLSCP = 33021,PPP_LCP = 49185,PPP_PAP = 49187,PPP_LQR = 49189,PPP_CHAP = 49699,PPP_CBCP = 49193,PPP_INITFCS = 65535,PPP_GOODFCS = 61624,};
enum MACRO_PRE {PRE_FETCH = 0x34,};
enum MACRO_QIF {QIF_BLIMITS = 1,QIF_SPACE = 2,QIF_ILIMITS = 4,QIF_INODES = 8,QIF_BTIME = 16,QIF_ITIME = 32,QIF_LIMITS = 5,QIF_USAGE = 10,QIF_TIMES = 48,QIF_ALL = 63,};
enum MACRO_RAW {RAW_MAJOR = 162,RAW_SETBIND = 44032,RAW_GETBIND = 44033,};
enum MACRO_REC {REC_ESC = -1,REC_EOR = 1,REC_EOF = 2,};
enum MACRO_REG {REG_EXTENDED = 1,REG_ICASE = 2,REG_NEWLINE = 4,REG_NOSUB = 8,REG_NOTBOL = 1,REG_NOTEOL = 2,REG_STARTEND = 4,};
enum MACRO_REM {REM_MULTIPLE = 512,};
enum MACRO_REP {REP_DEF_DECAY = 5,REP_DEF_INITIAL_DELAY = 200,REP_DEF_MINIMUM_DELAY = 10,REP_DEF_REPEAT_DELAY = 50,};
enum MACRO_REQ {REQ_NEXT_PAGE = 512,REQ_PREV_PAGE = 513,REQ_FIRST_PAGE = 514,REQ_LAST_PAGE = 515,REQ_NEXT_FIELD = 516,REQ_PREV_FIELD = 517,REQ_FIRST_FIELD = 518,REQ_LAST_FIELD = 519,REQ_SNEXT_FIELD = 520,REQ_SPREV_FIELD = 521,REQ_SFIRST_FIELD = 522,REQ_SLAST_FIELD = 523,REQ_LEFT_FIELD = 524,REQ_RIGHT_FIELD = 525,REQ_UP_FIELD = 526,REQ_DOWN_FIELD = 527,REQ_NEXT_CHAR = 528,REQ_PREV_CHAR = 529,REQ_NEXT_LINE = 530,REQ_PREV_LINE = 531,REQ_NEXT_WORD = 532,REQ_PREV_WORD = 533,REQ_BEG_FIELD = 534,REQ_END_FIELD = 535,REQ_BEG_LINE = 536,REQ_END_LINE = 537,REQ_LEFT_CHAR = 538,REQ_RIGHT_CHAR = 539,REQ_UP_CHAR = 540,REQ_DOWN_CHAR = 541,REQ_NEW_LINE = 542,REQ_INS_CHAR = 543,REQ_INS_LINE = 544,REQ_DEL_CHAR = 545,REQ_DEL_PREV = 546,REQ_DEL_LINE = 547,REQ_DEL_WORD = 548,REQ_CLR_EOL = 549,REQ_CLR_EOF = 550,REQ_CLR_FIELD = 551,REQ_OVL_MODE = 552,REQ_INS_MODE = 553,REQ_SCR_FLINE = 554,REQ_SCR_BLINE = 555,REQ_SCR_FPAGE = 556,REQ_SCR_BPAGE = 557,REQ_SCR_FHPAGE = 558,REQ_SCR_BHPAGE = 559,REQ_SCR_FCHAR = 560,REQ_SCR_BCHAR = 561,REQ_SCR_HFLINE = 562,REQ_SCR_HBLINE = 563,REQ_SCR_HFHALF = 564,REQ_SCR_HBHALF = 565,REQ_VALIDATION = 566,REQ_NEXT_CHOICE = 567,REQ_PREV_CHOICE = 568,};
enum MACRO_RES {RES_TIMEOUT = 5,};
enum MACRO_REX {REX_INTERACTIVE = 1,};
enum MACRO_RHF {RHF_NONE = 0,RHF_QUICKSTART = 1,RHF_NOTPOT = 2,RHF_NO_LIBRARY_REPLACEMENT = 4,RHF_NO_MOVE = 8,RHF_SGI_ONLY = 16,RHF_GUARANTEE_INIT = 32,RHF_DELTA_C_PLUS_PLUS = 64,RHF_GUARANTEE_START_INIT = 128,RHF_PIXIE = 256,RHF_DEFAULT_DELAY_LOAD = 512,RHF_REQUICKSTART = 1024,RHF_REQUICKSTARTED = 2048,RHF_CORD = 4096,RHF_NO_UNRES_UNDEF = 8192,RHF_RLD_ORDER_SAFE = 16384,};
enum MACRO_RPC {RPC_MSG_VERSION = 2,RPC_SERVICE_PORT = 2048,};
enum MACRO_RPM {RPM_PCO_ADD = 1,RPM_PCO_CHANGE = 2,RPM_PCO_SETGLOBAL = 3,};
enum MACRO_RRQ {RRQ = 0x1,WRQ = 0x2,};
enum MACRO_RTF {RTF_UP = 0x1,RTF_GATEWAY = 0x2,RTF_HOST = 0x4,RTF_REINSTATE = 0x8,RTF_DYNAMIC = 0x10,RTF_MODIFIED = 0x20,RTF_MTU = 0x40,RTF_MSS = 0x40,RTF_WINDOW = 0x80,RTF_IRTT = 0x100,RTF_REJECT = 0x200,RTF_STATIC = 0x400,RTF_XRESOLVE = 0x800,RTF_NOFORWARD = 0x1000,RTF_THROW = 0x2000,RTF_NOPMTUDISC = 0x4000,RTF_DEFAULT = 0x10000,RTF_ALLONLINK = 0x20000,RTF_ADDRCONF = 0x40000,RTF_LINKRT = 0x100000,RTF_NONEXTHOP = 0x200000,RTF_CACHE = 0x1000000,RTF_FLOW = 0x2000000,RTF_POLICY = 0x4000000,};
enum MACRO_RUN {RUN_LVL = 1,};
enum MACRO_SAM {SAM_STAT_GOOD = 0x0,SAM_STAT_CHECK_CONDITION = 0x2,SAM_STAT_CONDITION_MET = 0x4,SAM_STAT_BUSY = 0x8,SAM_STAT_INTERMEDIATE = 0x10,SAM_STAT_INTERMEDIATE_CONDITION_MET = 0x14,SAM_STAT_RESERVATION_CONFLICT = 0x18,SAM_STAT_COMMAND_TERMINATED = 0x22,SAM_STAT_TASK_SET_FULL = 0x28,SAM_STAT_ACA_ACTIVE = 0x30,SAM_STAT_TASK_ABORTED = 0x40,};
enum MACRO_SCM {SCM_TIMESTAMP = 29,};
enum MACRO_SEC {SEC_NO_FLAGS = 0x0,SEC_ALLOC = 0x1,SEC_LOAD = 0x2,SEC_RELOC = 0x4,SEC_READONLY = 0x8,SEC_CODE = 0x10,SEC_DATA = 0x20,SEC_ROM = 0x40,SEC_CONSTRUCTOR = 0x80,SEC_HAS_CONTENTS = 0x100,SEC_NEVER_LOAD = 0x200,SEC_THREAD_LOCAL = 0x400,SEC_HAS_GOT_REF = 0x800,SEC_IS_COMMON = 0x1000,SEC_DEBUGGING = 0x2000,SEC_IN_MEMORY = 0x4000,SEC_EXCLUDE = 0x8000,SEC_SORT_ENTRIES = 0x10000,SEC_LINK_ONCE = 0x20000,SEC_LINK_DUPLICATES = 0x40000,SEC_LINK_DUPLICATES_DISCARD = 0x0,SEC_LINK_DUPLICATES_ONE_ONLY = 0x80000,SEC_LINK_DUPLICATES_SAME_SIZE = 0x100000,SEC_LINK_DUPLICATES_SAME_CONTENTS = 0x180000,SEC_LINKER_CREATED = 0x200000,SEC_KEEP = 0x400000,SEC_SMALL_DATA = 0x800000,SEC_MERGE = 0x1000000,SEC_STRINGS = 0x2000000,SEC_GROUP = 0x4000000,SEC_COFF_SHARED_LIBRARY = 0x10000000,SEC_COFF_SHARED = 0x20000000,SEC_TIC54X_BLOCK = 0x40000000,SEC_TIC54X_CLINK = 0x80000000,};
enum MACRO_SEM {SEM_VALUE_MAX = 2147483647,};
enum MACRO_SEQ {SEQ_NOTEOFF = 0,SEQ_FMNOTEOFF = 0,SEQ_NOTEON = 1,SEQ_FMNOTEON = 1,SEQ_PGMCHANGE = 3,SEQ_FMPGMCHANGE = 3,SEQ_MIDIPUTC = 5,SEQ_DRUMON = 6,SEQ_DRUMOFF = 7,SEQ_AFTERTOUCH = 9,SEQ_CONTROLLER = 10,};
enum MACRO_SET {SET_WINDOW = 0x24,};
enum MACRO_SHF {SHF_WRITE = 1,SHF_ALLOC = 2,SHF_EXECINSTR = 4,SHF_MERGE = 16,SHF_STRINGS = 32,SHF_INFO_LINK = 64,SHF_LINK_ORDER = 128,SHF_OS_NONCONFORMING = 256,SHF_GROUP = 512,SHF_TLS = 1024,SHF_MASKOS = 267386880,SHF_MASKPROC = -268435456,SHF_ORDERED = 1073741824,SHF_EXCLUDE = -2147483648,};
enum MACRO_SHM {SHM_R = 0x100,SHM_W = 0x80,SHM_RDONLY = 0x1000,SHM_RND = 0x2000,SHM_REMAP = 0x4000,SHM_LOCK = 0xB,SHM_UNLOCK = 0xC,SHM_STAT = 0xD,SHM_INFO = 0xE,SHM_DEST = 0x200,SHM_LOCKED = 0x400,SHM_HUGETLB = 0x800,SHM_NORESERVE = 0x1000,};
enum MACRO_SHN {SHN_UNDEF = 0,SHN_LORESERVE = 65280,SHN_LOPROC = 65280,SHN_BEFORE = 65280,SHN_AFTER = 65281,SHN_HIPROC = 65311,SHN_LOOS = 65312,SHN_HIOS = 65343,SHN_ABS = 65521,SHN_COMMON = 65522,SHN_XINDEX = 65535,SHN_HIRESERVE = 65535,};
enum MACRO_SHT {SHT_NULL = 0,SHT_PROGBITS = 1,SHT_SYMTAB = 2,SHT_STRTAB = 3,SHT_RELA = 4,SHT_HASH = 5,SHT_DYNAMIC = 6,SHT_NOTE = 7,SHT_NOBITS = 8,SHT_REL = 9,SHT_SHLIB = 10,SHT_DYNSYM = 11,SHT_INIT_ARRAY = 14,SHT_FINI_ARRAY = 15,SHT_PREINIT_ARRAY = 16,SHT_GROUP = 17,SHT_SYMTAB_SHNDX = 18,SHT_NUM = 19,SHT_LOOS = 1610612736,SHT_GNU_HASH = 1879048182,SHT_GNU_LIBLIST = 1879048183,SHT_CHECKSUM = 1879048184,SHT_LOSUNW = 1879048180,SHT_SUNW_move = 1879048186,SHT_SUNW_COMDAT = 1879048187,SHT_SUNW_syminfo = 1879048188,SHT_GNU_verdef = 1879048189,SHT_GNU_verneed = 1879048190,SHT_GNU_versym = 1879048191,SHT_HISUNW = 1879048191,SHT_HIOS = 1879048191,SHT_LOPROC = 1879048192,SHT_HIPROC = 2147483647,SHT_LOUSER = -2147483648,SHT_HIUSER = -1879048193,};
enum MACRO_SIG {SIG_ATOMIC_MIN = -2147483648,SIG_ATOMIC_MAX = 2147483647,};
enum MACRO_SIX {SIX = 6,};
enum MACRO_SLC {SLC_SYNCH = 1,SLC_BRK = 2,SLC_IP = 3,SLC_AO = 4,SLC_AYT = 5,SLC_EOR = 6,SLC_ABORT = 7,SLC_EOF = 8,SLC_SUSP = 9,SLC_EC = 10,SLC_EL = 11,SLC_EW = 12,SLC_RP = 13,SLC_LNEXT = 14,SLC_XON = 15,SLC_XOFF = 16,SLC_FORW1 = 17,SLC_FORW2 = 18,};
enum MACRO_SOL {SOL_RAW = 255,SOL_DECNET = 261,SOL_X25 = 262,SOL_PACKET = 263,SOL_ATM = 264,SOL_AAL = 265,SOL_IRDA = 266,};
enum MACRO_SPC {SPC_SK_NO_SENSE = 0x0,SPC_SK_RECOVERED_ERROR = 0x1,SPC_SK_NOT_READY = 0x2,SPC_SK_MEDIUM_ERROR = 0x3,SPC_SK_HARDWARE_ERROR = 0x4,SPC_SK_ILLEGAL_REQUEST = 0x5,SPC_SK_UNIT_ATTENTION = 0x6,SPC_SK_DATA_PROTECT = 0x7,SPC_SK_BLANK_CHECK = 0x8,SPC_SK_COPY_ABORTED = 0xA,SPC_SK_ABORTED_COMMAND = 0xB,SPC_SK_VOLUME_OVERFLOW = 0xD,SPC_SK_MISCOMPARE = 0xE,};
enum MACRO_STA {STA_PLL = 0x1,STA_PPSFREQ = 0x2,STA_PPSTIME = 0x4,STA_FLL = 0x8,STA_INS = 0x10,STA_DEL = 0x20,STA_UNSYNC = 0x40,STA_FREQHOLD = 0x80,STA_PPSSIGNAL = 0x100,STA_PPSJITTER = 0x200,STA_PPSWANDER = 0x400,STA_PPSERROR = 0x800,STA_CLOCKERR = 0x1000,STA_RONLY = 0x1F00,};
enum MACRO_STB {STB_LOCAL = 0,STB_GLOBAL = 1,STB_WEAK = 2,STB_NUM = 3,STB_LOOS = 10,STB_HIOS = 12,STB_LOPROC = 13,STB_HIPROC = 15,};
enum MACRO_STN {STN_UNDEF = 0,};
enum MACRO_STO {STO_MIPS_DEFAULT = 0x0,STO_MIPS_INTERNAL = 0x1,STO_MIPS_HIDDEN = 0x2,STO_MIPS_PROTECTED = 0x3,STO_MIPS_SC_ALIGN_UNUSED = 0xFF,};
enum MACRO_STT {STT_NOTYPE = 0,STT_OBJECT = 1,STT_FUNC = 2,STT_SECTION = 3,STT_FILE = 4,STT_COMMON = 5,STT_TLS = 6,STT_NUM = 7,STT_LOOS = 10,STT_HIOS = 12,STT_LOPROC = 13,STT_HIPROC = 15,};
enum MACRO_STV {STV_DEFAULT = 0,STV_INTERNAL = 1,STV_HIDDEN = 2,STV_PROTECTED = 3,};
enum MACRO_TAG {TAG_DEBUG = 1,TAG_STATS = 2,TAG_GCACHE = 3,TAG_GCACHE_ALL = 3,TAG_DCACHE = 4,TAG_DCACHE_ONE = 4,TAG_OCACHE = 5,TAG_SECURE = 6,TAG_TCACHE_ONE = 7,TAG_DCACHE_ALL = 8,TAG_TCACHE_ALL = 9,TAG_GCACHE_ONE = 10,TAG_DCACHE_ONE_REFRESH = 11,TAG_READONLY = 12,TAG_READWRITE = 14,TAG_OPSTATS = 2048,TAG_THREADS = 2049,TAG_HEAP = 2050,TAG_UPDATES = 2051,TAG_VISIBLE = 2052,TAG_S_DCACHE = 2053,TAG_S_OCACHE = 2054,TAG_S_GCACHE = 2055,TAG_S_STORAGE = 2056,TAG_UPTIME = 2057,TAG_DIRLIST = 2058,TAG_NISCOMPAT = 2059,TAG_DNSFORWARDING = 2060,TAG_SECURITY_LEVEL = 2061,TAG_ROOTSERVER = 2062,};
enum MACRO_TCP {TCP_NODELAY = 1,TCP_MAXSEG = 2,TCP_CORK = 3,TCP_KEEPIDLE = 4,TCP_KEEPINTVL = 5,TCP_KEEPCNT = 6,TCP_SYNCNT = 7,TCP_LINGER2 = 8,TCP_DEFER_ACCEPT = 9,TCP_WINDOW_CLAMP = 10,TCP_INFO = 11,TCP_QUICKACK = 12,};
enum MACRO_TEN {TEN = 10,};
enum MACRO_TMP {TMP_MAX = 238328,FILENAME_MAX = 4096,};
enum MACRO_TMR {TMR_INTERNAL = 0x1,TMR_EXTERNAL = 0x2,TMR_MODE_MIDI = 0x10,TMR_MODE_FSK = 0x20,TMR_MODE_CLS = 0x40,TMR_MODE_SMPTE = 0x80,};
enum MACRO_TRY {TRY_AGAIN = 2,};
enum MACRO_TSP {TSP_ANY = 0,TSP_ADJTIME = 1,TSP_ACK = 2,TSP_MASTERREQ = 3,TSP_MASTERACK = 4,TSP_SETTIME = 5,TSP_MASTERUP = 6,TSP_SLAVEUP = 7,TSP_ELECTION = 8,TSP_ACCEPT = 9,TSP_REFUSE = 10,TSP_CONFLICT = 11,TSP_RESOLVE = 12,TSP_QUIT = 13,TSP_DATE = 14,TSP_DATEREQ = 15,TSP_DATEACK = 16,TSP_TRACEON = 17,TSP_TRACEOFF = 18,TSP_MSITE = 19,TSP_MSITEREQ = 20,TSP_TEST = 21,TSP_SETDATE = 22,TSP_SETDATEREQ = 23,TSP_LOOP = 24,};
enum MACRO_TTY {TTY_ON = 0x1,TTY_SECURE = 0x2,};
enum MACRO_UIO {UIO_MAXIOV = 1024,};
enum MACRO_UNI {UNI_DIRECT_BASE = 0xF000,UNI_DIRECT_MASK = 0x1FF,};
enum MACRO_USB {USB_CLASS_PER_INTERFACE = 0,USB_CLASS_AUDIO = 1,USB_CLASS_COMM = 2,USB_CLASS_HID = 3,USB_CLASS_PRINTER = 7,USB_CLASS_PTP = 6,USB_CLASS_MASS_STORAGE = 8,USB_CLASS_HUB = 9,USB_CLASS_DATA = 10,USB_CLASS_VENDOR_SPEC = 255,USB_DT_DEVICE = 1,USB_DT_CONFIG = 2,USB_DT_STRING = 3,USB_DT_INTERFACE = 4,USB_DT_ENDPOINT = 5,USB_DT_HID = 33,USB_DT_REPORT = 34,USB_DT_PHYSICAL = 35,USB_DT_HUB = 41,USB_DT_DEVICE_SIZE = 18,USB_DT_CONFIG_SIZE = 9,USB_DT_INTERFACE_SIZE = 9,USB_DT_ENDPOINT_SIZE = 7,USB_DT_ENDPOINT_AUDIO_SIZE = 9,USB_DT_HUB_NONVAR_SIZE = 7,USB_MAXENDPOINTS = 32,USB_ENDPOINT_ADDRESS_MASK = 15,USB_ENDPOINT_DIR_MASK = 128,USB_ENDPOINT_TYPE_MASK = 3,USB_ENDPOINT_TYPE_CONTROL = 0,USB_ENDPOINT_TYPE_ISOCHRONOUS = 1,USB_ENDPOINT_TYPE_BULK = 2,USB_ENDPOINT_TYPE_INTERRUPT = 3,USB_MAXINTERFACES = 32,USB_MAXALTSETTING = 128,USB_MAXCONFIG = 8,USB_REQ_GET_STATUS = 0,USB_REQ_CLEAR_FEATURE = 1,USB_REQ_SET_FEATURE = 3,USB_REQ_SET_ADDRESS = 5,USB_REQ_GET_DESCRIPTOR = 6,USB_REQ_SET_DESCRIPTOR = 7,USB_REQ_GET_CONFIGURATION = 8,USB_REQ_SET_CONFIGURATION = 9,USB_REQ_GET_INTERFACE = 10,USB_REQ_SET_INTERFACE = 11,USB_REQ_SYNCH_FRAME = 12,USB_TYPE_STANDARD = 0,USB_TYPE_CLASS = 32,USB_TYPE_VENDOR = 64,USB_TYPE_RESERVED = 96,USB_RECIP_DEVICE = 0,USB_RECIP_INTERFACE = 1,USB_RECIP_ENDPOINT = 2,USB_RECIP_OTHER = 3,USB_ENDPOINT_IN = 128,USB_ENDPOINT_OUT = 0,USB_ERROR_BEGIN = 500000,};
enum MACRO_USE {USE_DGRAM = 65536,};
enum MACRO_VER {VER_DEF_NONE = 0,VER_DEF_CURRENT = 1,VER_DEF_NUM = 2,VER_FLG_BASE = 1,VER_FLG_WEAK = 2,VER_NDX_LOCAL = 0,VER_NDX_GLOBAL = 1,VER_NDX_LORESERVE = 65280,VER_NDX_ELIMINATE = 65281,VER_NEED_NONE = 0,VER_NEED_CURRENT = 1,VER_NEED_NUM = 2,};
enum MACRO_VOL {VOL_METHOD_ADAGIO = 1,VOL_METHOD_LINEAR = 2,};
enum MACRO_VT0 {VT0 = 0x0,VT1 = 0x4000,};
enum MACRO_X86 {X86_FXSR_MAGIC = 0x0,};
enum MACRO_XAG {XAG_MAJOR_VERSION = 1,XAG_MINOR_VERSION = 0,};
enum MACRO_XAW {XAW_TENTF_HIDE = 0x1,XAW_TENTF_READ = 0x2,XAW_TENTF_REPLACE = 0x4,XAW_TPROP_FONT = 0x1,XAW_TPROP_FONTSET = 0x2,XAW_TPROP_FOREGROUND = 0x4,XAW_TPROP_BACKGROUND = 0x8,XAW_TPROP_FPIXMAP = 0x10,XAW_TPROP_BPIXMAP = 0x20,XAW_TPROP_UNDERLINE = 0x40,XAW_TPROP_OVERSTRIKE = 0x80,XAW_TPROP_SUBSCRIPT = 0x100,XAW_TPROP_SUPERSCRIPT = 0x200,XAW_TPROP_FOUNDRY = 0x1,XAW_TPROP_FAMILY = 0x2,XAW_TPROP_WEIGHT = 0x4,XAW_TPROP_SLANT = 0x8,XAW_TPROP_SETWIDTH = 0x10,XAW_TPROP_ADDSTYLE = 0x20,XAW_TPROP_PIXELSIZE = 0x40,XAW_TPROP_POINTSIZE = 0x80,XAW_TPROP_RESX = 0x100,XAW_TPROP_RESY = 0x200,XAW_TPROP_SPACING = 0x400,XAW_TPROP_AVGWIDTH = 0x800,XAW_TPROP_REGISTRY = 0x1000,XAW_TPROP_ENCODING = 0x2000,};
enum MACRO_XCB {XCB_KEY_PRESS = 2,XCB_KEY_RELEASE = 3,XCB_BUTTON_PRESS = 4,XCB_BUTTON_RELEASE = 5,XCB_MOTION_NOTIFY = 6,XCB_ENTER_NOTIFY = 7,XCB_LEAVE_NOTIFY = 8,XCB_FOCUS_IN = 9,XCB_FOCUS_OUT = 10,XCB_KEYMAP_NOTIFY = 11,XCB_EXPOSE = 12,XCB_GRAPHICS_EXPOSURE = 13,XCB_NO_EXPOSURE = 14,XCB_VISIBILITY_NOTIFY = 15,XCB_CREATE_NOTIFY = 16,XCB_DESTROY_NOTIFY = 17,XCB_UNMAP_NOTIFY = 18,XCB_MAP_NOTIFY = 19,XCB_MAP_REQUEST = 20,XCB_REPARENT_NOTIFY = 21,XCB_CONFIGURE_NOTIFY = 22,XCB_CONFIGURE_REQUEST = 23,XCB_GRAVITY_NOTIFY = 24,XCB_RESIZE_REQUEST = 25,XCB_CIRCULATE_NOTIFY = 26,XCB_CIRCULATE_REQUEST = 27,XCB_PROPERTY_NOTIFY = 28,XCB_SELECTION_CLEAR = 29,XCB_SELECTION_REQUEST = 30,XCB_SELECTION_NOTIFY = 31,XCB_COLORMAP_NOTIFY = 32,XCB_CLIENT_MESSAGE = 33,XCB_MAPPING_NOTIFY = 34,XCB_REQUEST = 1,XCB_VALUE = 2,XCB_WINDOW = 3,XCB_PIXMAP = 4,XCB_ATOM = 5,XCB_CURSOR = 6,XCB_FONT = 7,XCB_MATCH = 8,XCB_DRAWABLE = 9,XCB_ACCESS = 10,XCB_ALLOC = 11,XCB_COLORMAP = 12,XCB_G_CONTEXT = 13,XCB_ID_CHOICE = 14,XCB_NAME = 15,XCB_LENGTH = 16,XCB_IMPLEMENTATION = 17,XCB_CREATE_WINDOW = 1,XCB_CHANGE_WINDOW_ATTRIBUTES = 2,XCB_GET_WINDOW_ATTRIBUTES = 3,XCB_DESTROY_WINDOW = 4,XCB_DESTROY_SUBWINDOWS = 5,XCB_CHANGE_SAVE_SET = 6,XCB_REPARENT_WINDOW = 7,XCB_MAP_WINDOW = 8,XCB_MAP_SUBWINDOWS = 9,XCB_UNMAP_WINDOW = 10,XCB_UNMAP_SUBWINDOWS = 11,XCB_CONFIGURE_WINDOW = 12,XCB_CIRCULATE_WINDOW = 13,XCB_GET_GEOMETRY = 14,XCB_QUERY_TREE = 15,XCB_INTERN_ATOM = 16,XCB_GET_ATOM_NAME = 17,XCB_CHANGE_PROPERTY = 18,XCB_DELETE_PROPERTY = 19,XCB_GET_PROPERTY = 20,XCB_LIST_PROPERTIES = 21,XCB_SET_SELECTION_OWNER = 22,XCB_GET_SELECTION_OWNER = 23,XCB_CONVERT_SELECTION = 24,XCB_SEND_EVENT = 25,XCB_GRAB_POINTER = 26,XCB_UNGRAB_POINTER = 27,XCB_GRAB_BUTTON = 28,XCB_UNGRAB_BUTTON = 29,XCB_CHANGE_ACTIVE_POINTER_GRAB = 30,XCB_GRAB_KEYBOARD = 31,XCB_UNGRAB_KEYBOARD = 32,XCB_GRAB_KEY = 33,XCB_UNGRAB_KEY = 34,XCB_ALLOW_EVENTS = 35,XCB_GRAB_SERVER = 36,XCB_UNGRAB_SERVER = 37,XCB_QUERY_POINTER = 38,XCB_GET_MOTION_EVENTS = 39,XCB_TRANSLATE_COORDINATES = 40,XCB_WARP_POINTER = 41,XCB_SET_INPUT_FOCUS = 42,XCB_GET_INPUT_FOCUS = 43,XCB_QUERY_KEYMAP = 44,XCB_OPEN_FONT = 45,XCB_CLOSE_FONT = 46,XCB_QUERY_FONT = 47,XCB_QUERY_TEXT_EXTENTS = 48,XCB_LIST_FONTS = 49,XCB_LIST_FONTS_WITH_INFO = 50,XCB_SET_FONT_PATH = 51,XCB_GET_FONT_PATH = 52,XCB_CREATE_PIXMAP = 53,XCB_FREE_PIXMAP = 54,XCB_CREATE_GC = 55,XCB_CHANGE_GC = 56,XCB_COPY_GC = 57,XCB_SET_DASHES = 58,XCB_SET_CLIP_RECTANGLES = 59,XCB_FREE_GC = 60,XCB_CLEAR_AREA = 61,XCB_COPY_AREA = 62,XCB_COPY_PLANE = 63,XCB_POLY_POINT = 64,XCB_POLY_LINE = 65,XCB_POLY_SEGMENT = 66,XCB_POLY_RECTANGLE = 67,XCB_POLY_ARC = 68,XCB_FILL_POLY = 69,XCB_POLY_FILL_RECTANGLE = 70,XCB_POLY_FILL_ARC = 71,XCB_PUT_IMAGE = 72,XCB_GET_IMAGE = 73,XCB_POLY_TEXT_8 = 74,XCB_POLY_TEXT_16 = 75,XCB_IMAGE_TEXT_8 = 76,XCB_IMAGE_TEXT_16 = 77,XCB_CREATE_COLORMAP = 78,XCB_FREE_COLORMAP = 79,XCB_COPY_COLORMAP_AND_FREE = 80,XCB_INSTALL_COLORMAP = 81,XCB_UNINSTALL_COLORMAP = 82,XCB_LIST_INSTALLED_COLORMAPS = 83,XCB_ALLOC_COLOR = 84,XCB_ALLOC_NAMED_COLOR = 85,XCB_ALLOC_COLOR_CELLS = 86,XCB_ALLOC_COLOR_PLANES = 87,XCB_FREE_COLORS = 88,XCB_STORE_COLORS = 89,XCB_STORE_NAMED_COLOR = 90,XCB_QUERY_COLORS = 91,XCB_LOOKUP_COLOR = 92,XCB_CREATE_CURSOR = 93,XCB_CREATE_GLYPH_CURSOR = 94,XCB_FREE_CURSOR = 95,XCB_RECOLOR_CURSOR = 96,XCB_QUERY_BEST_SIZE = 97,XCB_QUERY_EXTENSION = 98,XCB_LIST_EXTENSIONS = 99,XCB_CHANGE_KEYBOARD_MAPPING = 100,XCB_GET_KEYBOARD_MAPPING = 101,XCB_CHANGE_KEYBOARD_CONTROL = 102,XCB_GET_KEYBOARD_CONTROL = 103,XCB_BELL = 104,XCB_CHANGE_POINTER_CONTROL = 105,XCB_GET_POINTER_CONTROL = 106,XCB_SET_SCREEN_SAVER = 107,XCB_GET_SCREEN_SAVER = 108,XCB_CHANGE_HOSTS = 109,XCB_LIST_HOSTS = 110,XCB_SET_ACCESS_CONTROL = 111,XCB_SET_CLOSE_DOWN_MODE = 112,XCB_KILL_CLIENT = 113,XCB_ROTATE_PROPERTIES = 114,XCB_FORCE_SCREEN_SAVER = 115,XCB_SET_POINTER_MAPPING = 116,XCB_GET_POINTER_MAPPING = 117,XCB_SET_MODIFIER_MAPPING = 118,XCB_GET_MODIFIER_MAPPING = 119,XCB_NO_OPERATION = 127,XCB_NONE = 0,XCB_COPY_FROM_PARENT = 0,XCB_CURRENT_TIME = 0,XCB_NO_SYMBOL = 0,XCB_BIGREQUESTS_MAJOR_VERSION = 0,XCB_BIGREQUESTS_MINOR_VERSION = 0,XCB_BIG_REQUESTS_ENABLE = 0,XCB_RENDER_MAJOR_VERSION = 0,XCB_RENDER_MINOR_VERSION = 10,XCB_RENDER_PICT_FORMAT = 0,XCB_RENDER_PICTURE = 1,XCB_RENDER_PICT_OP = 2,XCB_RENDER_GLYPH_SET = 3,XCB_RENDER_GLYPH = 4,XCB_RENDER_QUERY_VERSION = 0,XCB_RENDER_QUERY_PICT_FORMATS = 1,XCB_RENDER_QUERY_PICT_INDEX_VALUES = 2,XCB_RENDER_CREATE_PICTURE = 4,XCB_RENDER_CHANGE_PICTURE = 5,XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES = 6,XCB_RENDER_FREE_PICTURE = 7,XCB_RENDER_COMPOSITE = 8,XCB_RENDER_TRAPEZOIDS = 10,XCB_RENDER_TRIANGLES = 11,XCB_RENDER_TRI_STRIP = 12,XCB_RENDER_TRI_FAN = 13,XCB_RENDER_CREATE_GLYPH_SET = 17,XCB_RENDER_REFERENCE_GLYPH_SET = 18,XCB_RENDER_FREE_GLYPH_SET = 19,XCB_RENDER_ADD_GLYPHS = 20,XCB_RENDER_FREE_GLYPHS = 22,XCB_RENDER_COMPOSITE_GLYPHS_8 = 23,XCB_RENDER_COMPOSITE_GLYPHS_16 = 24,XCB_RENDER_COMPOSITE_GLYPHS_32 = 25,XCB_RENDER_FILL_RECTANGLES = 26,XCB_RENDER_CREATE_CURSOR = 27,XCB_RENDER_SET_PICTURE_TRANSFORM = 28,XCB_RENDER_QUERY_FILTERS = 29,XCB_RENDER_SET_PICTURE_FILTER = 30,XCB_RENDER_CREATE_ANIM_CURSOR = 31,XCB_RENDER_ADD_TRAPS = 32,XCB_RENDER_CREATE_SOLID_FILL = 33,XCB_RENDER_CREATE_LINEAR_GRADIENT = 34,XCB_RENDER_CREATE_RADIAL_GRADIENT = 35,XCB_RENDER_CREATE_CONICAL_GRADIENT = 36,XCB_SHAPE_MAJOR_VERSION = 1,XCB_SHAPE_MINOR_VERSION = 1,XCB_SHAPE_NOTIFY = 0,XCB_SHAPE_QUERY_VERSION = 0,XCB_SHAPE_RECTANGLES = 1,XCB_SHAPE_MASK = 2,XCB_SHAPE_COMBINE = 3,XCB_SHAPE_OFFSET = 4,XCB_SHAPE_QUERY_EXTENTS = 5,XCB_SHAPE_SELECT_INPUT = 6,XCB_SHAPE_INPUT_SELECTED = 7,XCB_SHAPE_GET_RECTANGLES = 8,XCB_XFIXES_MAJOR_VERSION = 4,XCB_XFIXES_MINOR_VERSION = 0,XCB_XFIXES_QUERY_VERSION = 0,XCB_XFIXES_CHANGE_SAVE_SET = 1,XCB_XFIXES_SELECTION_NOTIFY = 0,XCB_XFIXES_SELECT_SELECTION_INPUT = 2,XCB_XFIXES_CURSOR_NOTIFY = 1,XCB_XFIXES_SELECT_CURSOR_INPUT = 3,XCB_XFIXES_GET_CURSOR_IMAGE = 4,XCB_XFIXES_BAD_REGION = 0,XCB_XFIXES_CREATE_REGION = 5,XCB_XFIXES_CREATE_REGION_FROM_BITMAP = 6,XCB_XFIXES_CREATE_REGION_FROM_WINDOW = 7,XCB_XFIXES_CREATE_REGION_FROM_GC = 8,XCB_XFIXES_CREATE_REGION_FROM_PICTURE = 9,XCB_XFIXES_DESTROY_REGION = 10,XCB_XFIXES_SET_REGION = 11,XCB_XFIXES_COPY_REGION = 12,XCB_XFIXES_UNION_REGION = 13,XCB_XFIXES_INTERSECT_REGION = 14,XCB_XFIXES_SUBTRACT_REGION = 15,XCB_XFIXES_INVERT_REGION = 16,XCB_XFIXES_TRANSLATE_REGION = 17,XCB_XFIXES_REGION_EXTENTS = 18,XCB_XFIXES_FETCH_REGION = 19,XCB_XFIXES_SET_GC_CLIP_REGION = 20,XCB_XFIXES_SET_WINDOW_SHAPE_REGION = 21,XCB_XFIXES_SET_PICTURE_CLIP_REGION = 22,XCB_XFIXES_SET_CURSOR_NAME = 23,XCB_XFIXES_GET_CURSOR_NAME = 24,XCB_XFIXES_GET_CURSOR_IMAGE_AND_NAME = 25,XCB_XFIXES_CHANGE_CURSOR = 26,XCB_XFIXES_CHANGE_CURSOR_BY_NAME = 27,XCB_XFIXES_EXPAND_REGION = 28,XCB_XFIXES_HIDE_CURSOR = 29,XCB_XFIXES_SHOW_CURSOR = 30,XCB_COMPOSITE_MAJOR_VERSION = 0,XCB_COMPOSITE_MINOR_VERSION = 3,XCB_COMPOSITE_QUERY_VERSION = 0,XCB_COMPOSITE_REDIRECT_WINDOW = 1,XCB_COMPOSITE_REDIRECT_SUBWINDOWS = 2,XCB_COMPOSITE_UNREDIRECT_WINDOW = 3,XCB_COMPOSITE_UNREDIRECT_SUBWINDOWS = 4,XCB_COMPOSITE_CREATE_REGION_FROM_BORDER_CLIP = 5,XCB_COMPOSITE_NAME_WINDOW_PIXMAP = 6,XCB_COMPOSITE_GET_OVERLAY_WINDOW = 7,XCB_COMPOSITE_RELEASE_OVERLAY_WINDOW = 8,XCB_DAMAGE_MAJOR_VERSION = 1,XCB_DAMAGE_MINOR_VERSION = 0,XCB_DAMAGE_BAD_DAMAGE = 0,XCB_DAMAGE_QUERY_VERSION = 0,XCB_DAMAGE_CREATE = 1,XCB_DAMAGE_DESTROY = 2,XCB_DAMAGE_SUBTRACT = 3,XCB_DAMAGE_NOTIFY = 0,XCB_DPMS_MAJOR_VERSION = 0,XCB_DPMS_MINOR_VERSION = 0,XCB_DPMS_GET_VERSION = 0,XCB_DPMS_CAPABLE = 1,XCB_DPMS_GET_TIMEOUTS = 2,XCB_DPMS_SET_TIMEOUTS = 3,XCB_DPMS_ENABLE = 4,XCB_DPMS_DISABLE = 5,XCB_DPMS_FORCE_LEVEL = 6,XCB_DPMS_INFO = 7,XCB_GLX_MAJOR_VERSION = 1,XCB_GLX_MINOR_VERSION = 3,XCB_GLX_GENERIC = -1,XCB_GLX_BAD_CONTEXT = 0,XCB_GLX_BAD_CONTEXT_STATE = 1,XCB_GLX_BAD_DRAWABLE = 2,XCB_GLX_BAD_PIXMAP = 3,XCB_GLX_BAD_CONTEXT_TAG = 4,XCB_GLX_BAD_CURRENT_WINDOW = 5,XCB_GLX_BAD_RENDER_REQUEST = 6,XCB_GLX_BAD_LARGE_REQUEST = 7,XCB_GLX_UNSUPPORTED_PRIVATE_REQUEST = 8,XCB_GLX_BAD_FB_CONFIG = 9,XCB_GLX_BAD_PBUFFER = 10,XCB_GLX_BAD_CURRENT_DRAWABLE = 11,XCB_GLX_BAD_WINDOW = 12,XCB_GLX_PBUFFER_CLOBBER = 0,XCB_GLX_RENDER = 1,XCB_GLX_RENDER_LARGE = 2,XCB_GLX_CREATE_CONTEXT = 3,XCB_GLX_DESTROY_CONTEXT = 4,XCB_GLX_MAKE_CURRENT = 5,XCB_GLX_IS_DIRECT = 6,XCB_GLX_QUERY_VERSION = 7,XCB_GLX_WAIT_GL = 8,XCB_GLX_WAIT_X = 9,XCB_GLX_COPY_CONTEXT = 10,XCB_GLX_SWAP_BUFFERS = 11,XCB_GLX_USE_X_FONT = 12,XCB_GLX_CREATE_GLX_PIXMAP = 13,XCB_GLX_GET_VISUAL_CONFIGS = 14,XCB_GLX_DESTROY_GLX_PIXMAP = 15,XCB_GLX_VENDOR_PRIVATE = 16,XCB_GLX_VENDOR_PRIVATE_WITH_REPLY = 17,XCB_GLX_QUERY_EXTENSIONS_STRING = 18,XCB_GLX_QUERY_SERVER_STRING = 19,XCB_GLX_CLIENT_INFO = 20,XCB_GLX_GET_FB_CONFIGS = 21,XCB_GLX_CREATE_PIXMAP = 22,XCB_GLX_DESTROY_PIXMAP = 23,XCB_GLX_CREATE_NEW_CONTEXT = 24,XCB_GLX_QUERY_CONTEXT = 25,XCB_GLX_MAKE_CONTEXT_CURRENT = 26,XCB_GLX_CREATE_PBUFFER = 27,XCB_GLX_DESTROY_PBUFFER = 28,XCB_GLX_GET_DRAWABLE_ATTRIBUTES = 29,XCB_GLX_CHANGE_DRAWABLE_ATTRIBUTES = 30,XCB_GLX_CREATE_WINDOW = 31,XCB_GLX_DELETE_WINDOW = 32,XCB_GLX_NEW_LIST = 101,XCB_GLX_END_LIST = 102,XCB_GLX_DELETE_LISTS = 103,XCB_GLX_GEN_LISTS = 104,XCB_GLX_FEEDBACK_BUFFER = 105,XCB_GLX_SELECT_BUFFER = 106,XCB_GLX_RENDER_MODE = 107,XCB_GLX_FINISH = 108,XCB_GLX_PIXEL_STOREF = 109,XCB_GLX_PIXEL_STOREI = 110,XCB_GLX_READ_PIXELS = 111,XCB_GLX_GET_BOOLEANV = 112,XCB_GLX_GET_CLIP_PLANE = 113,XCB_GLX_GET_DOUBLEV = 114,XCB_GLX_GET_ERROR = 115,XCB_GLX_GET_FLOATV = 116,XCB_GLX_GET_INTEGERV = 117,XCB_GLX_GET_LIGHTFV = 118,XCB_GLX_GET_LIGHTIV = 119,XCB_GLX_GET_MAPDV = 120,XCB_GLX_GET_MAPFV = 121,XCB_GLX_GET_MAPIV = 122,XCB_GLX_GET_MATERIALFV = 123,XCB_GLX_GET_MATERIALIV = 124,XCB_GLX_GET_PIXEL_MAPFV = 125,XCB_GLX_GET_PIXEL_MAPUIV = 126,XCB_GLX_GET_PIXEL_MAPUSV = 127,XCB_GLX_GET_POLYGON_STIPPLE = 128,XCB_GLX_GET_STRING = 129,XCB_GLX_GET_TEX_ENVFV = 130,XCB_GLX_GET_TEX_ENVIV = 131,XCB_GLX_GET_TEX_GENDV = 132,XCB_GLX_GET_TEX_GENFV = 133,XCB_GLX_GET_TEX_GENIV = 134,XCB_GLX_GET_TEX_IMAGE = 135,XCB_GLX_GET_TEX_PARAMETERFV = 136,XCB_GLX_GET_TEX_PARAMETERIV = 137,XCB_GLX_GET_TEX_LEVEL_PARAMETERFV = 138,XCB_GLX_GET_TEX_LEVEL_PARAMETERIV = 139,XCB_GLX_IS_LIST = 141,XCB_GLX_FLUSH = 142,XCB_GLX_ARE_TEXTURES_RESIDENT = 143,XCB_GLX_DELETE_TEXTURES = 144,XCB_GLX_GEN_TEXTURES = 145,XCB_GLX_IS_TEXTURE = 146,XCB_GLX_GET_COLOR_TABLE = 147,XCB_GLX_GET_COLOR_TABLE_PARAMETERFV = 148,XCB_GLX_GET_COLOR_TABLE_PARAMETERIV = 149,XCB_GLX_GET_CONVOLUTION_FILTER = 150,XCB_GLX_GET_CONVOLUTION_PARAMETERFV = 151,XCB_GLX_GET_CONVOLUTION_PARAMETERIV = 152,XCB_GLX_GET_SEPARABLE_FILTER = 153,XCB_GLX_GET_HISTOGRAM = 154,XCB_GLX_GET_HISTOGRAM_PARAMETERFV = 155,XCB_GLX_GET_HISTOGRAM_PARAMETERIV = 156,XCB_GLX_GET_MINMAX = 157,XCB_GLX_GET_MINMAX_PARAMETERFV = 158,XCB_GLX_GET_MINMAX_PARAMETERIV = 159,XCB_GLX_GET_COMPRESSED_TEX_IMAGE_ARB = 160,XCB_GLX_DELETE_QUERIES_ARB = 161,XCB_GLX_GEN_QUERIES_ARB = 162,XCB_GLX_IS_QUERY_ARB = 163,XCB_GLX_GET_QUERYIV_ARB = 164,XCB_GLX_GET_QUERY_OBJECTIV_ARB = 165,XCB_GLX_GET_QUERY_OBJECTUIV_ARB = 166,XCB_RANDR_MAJOR_VERSION = 1,XCB_RANDR_MINOR_VERSION = 1,XCB_RANDR_QUERY_VERSION = 0,XCB_RANDR_SET_SCREEN_CONFIG = 2,XCB_RANDR_SELECT_INPUT = 4,XCB_RANDR_GET_SCREEN_INFO = 5,XCB_RANDR_SCREEN_CHANGE_NOTIFY = 0,XCB_RECORD_MAJOR_VERSION = 1,XCB_RECORD_MINOR_VERSION = 13,XCB_RECORD_BAD_CONTEXT = 0,XCB_RECORD_QUERY_VERSION = 0,XCB_RECORD_CREATE_CONTEXT = 1,XCB_RECORD_REGISTER_CLIENTS = 2,XCB_RECORD_UNREGISTER_CLIENTS = 3,XCB_RECORD_GET_CONTEXT = 4,XCB_RECORD_ENABLE_CONTEXT = 5,XCB_RECORD_DISABLE_CONTEXT = 6,XCB_RECORD_FREE_CONTEXT = 7,XCB_RES_MAJOR_VERSION = 1,XCB_RES_MINOR_VERSION = 0,XCB_RES_QUERY_VERSION = 0,XCB_RES_QUERY_CLIENTS = 1,XCB_RES_QUERY_CLIENT_RESOURCES = 2,XCB_RES_QUERY_CLIENT_PIXMAP_BYTES = 3,XCB_SCREENSAVER_MAJOR_VERSION = 1,XCB_SCREENSAVER_MINOR_VERSION = 1,XCB_SCREENSAVER_QUERY_VERSION = 0,XCB_SCREENSAVER_QUERY_INFO = 1,XCB_SCREENSAVER_SELECT_INPUT = 2,XCB_SCREENSAVER_SET_ATTRIBUTES = 3,XCB_SCREENSAVER_UNSET_ATTRIBUTES = 4,XCB_SCREENSAVER_SUSPEND = 5,XCB_SCREENSAVER_NOTIFY = 0,XCB_SHM_MAJOR_VERSION = 1,XCB_SHM_MINOR_VERSION = 1,XCB_SHM_COMPLETION = 0,XCB_SHM_BAD_SEG = 0,XCB_SHM_QUERY_VERSION = 0,XCB_SHM_ATTACH = 1,XCB_SHM_DETACH = 2,XCB_SHM_PUT_IMAGE = 3,XCB_SHM_GET_IMAGE = 4,XCB_SHM_CREATE_PIXMAP = 5,XCB_SYNC_MAJOR_VERSION = 3,XCB_SYNC_MINOR_VERSION = 0,XCB_SYNC_COUNTER = 0,XCB_SYNC_ALARM = 1,XCB_SYNC_INITIALIZE = 0,XCB_SYNC_LIST_SYSTEM_COUNTERS = 1,XCB_SYNC_CREATE_COUNTER = 2,XCB_SYNC_DESTROY_COUNTER = 6,XCB_SYNC_QUERY_COUNTER = 5,XCB_SYNC_AWAIT = 7,XCB_SYNC_CHANGE_COUNTER = 4,XCB_SYNC_SET_COUNTER = 3,XCB_SYNC_CREATE_ALARM = 8,XCB_SYNC_CHANGE_ALARM = 9,XCB_SYNC_DESTROY_ALARM = 11,XCB_SYNC_QUERY_ALARM = 10,XCB_SYNC_SET_PRIORITY = 12,XCB_SYNC_GET_PRIORITY = 13,XCB_SYNC_COUNTER_NOTIFY = 0,XCB_SYNC_ALARM_NOTIFY = 1,XCB_XCMISC_MAJOR_VERSION = 1,XCB_XCMISC_MINOR_VERSION = 1,XCB_XC_MISC_GET_VERSION = 0,XCB_XC_MISC_GET_XID_RANGE = 1,XCB_XC_MISC_GET_XID_LIST = 2,XCB_XEVIE_MAJOR_VERSION = 1,XCB_XEVIE_MINOR_VERSION = 0,XCB_XEVIE_QUERY_VERSION = 0,XCB_XEVIE_START = 1,XCB_XEVIE_END = 2,XCB_XEVIE_SEND = 3,XCB_XEVIE_SELECT_INPUT = 4,XCB_XF86DRI_MAJOR_VERSION = 4,XCB_XF86DRI_MINOR_VERSION = 1,XCB_XF86DRI_QUERY_VERSION = 0,XCB_XF86DRI_QUERY_DIRECT_RENDERING_CAPABLE = 1,XCB_XF86DRI_OPEN_CONNECTION = 2,XCB_XF86DRI_CLOSE_CONNECTION = 3,XCB_XF86DRI_GET_CLIENT_DRIVER_NAME = 4,XCB_XF86DRI_CREATE_CONTEXT = 5,XCB_XF86DRI_DESTROY_CONTEXT = 6,XCB_XF86DRI_CREATE_DRAWABLE = 7,XCB_XF86DRI_DESTROY_DRAWABLE = 8,XCB_XF86DRI_GET_DRAWABLE_INFO = 9,XCB_XF86DRI_GET_DEVICE_INFO = 10,XCB_XF86DRI_AUTH_CONNECTION = 11,XCB_XINERAMA_MAJOR_VERSION = 1,XCB_XINERAMA_MINOR_VERSION = 1,XCB_XINERAMA_QUERY_VERSION = 0,XCB_XINERAMA_GET_STATE = 1,XCB_XINERAMA_GET_SCREEN_COUNT = 2,XCB_XINERAMA_GET_SCREEN_SIZE = 3,XCB_XINERAMA_IS_ACTIVE = 4,XCB_XINERAMA_QUERY_SCREENS = 5,XCB_XPRINT_MAJOR_VERSION = 1,XCB_XPRINT_MINOR_VERSION = 0,XCB_X_PRINT_PRINT_QUERY_VERSION = 0,XCB_X_PRINT_PRINT_GET_PRINTER_LIST = 1,XCB_X_PRINT_PRINT_REHASH_PRINTER_LIST = 20,XCB_X_PRINT_CREATE_CONTEXT = 2,XCB_X_PRINT_PRINT_SET_CONTEXT = 3,XCB_X_PRINT_PRINT_GET_CONTEXT = 4,XCB_X_PRINT_PRINT_DESTROY_CONTEXT = 5,XCB_X_PRINT_PRINT_GET_SCREEN_OF_CONTEXT = 6,XCB_X_PRINT_PRINT_START_JOB = 7,XCB_X_PRINT_PRINT_END_JOB = 8,XCB_X_PRINT_PRINT_START_DOC = 9,XCB_X_PRINT_PRINT_END_DOC = 10,XCB_X_PRINT_PRINT_PUT_DOCUMENT_DATA = 11,XCB_X_PRINT_PRINT_GET_DOCUMENT_DATA = 12,XCB_X_PRINT_PRINT_START_PAGE = 13,XCB_X_PRINT_PRINT_END_PAGE = 14,XCB_X_PRINT_PRINT_SELECT_INPUT = 15,XCB_X_PRINT_PRINT_INPUT_SELECTED = 16,XCB_X_PRINT_PRINT_GET_ATTRIBUTES = 17,XCB_X_PRINT_PRINT_GET_ONE_ATTRIBUTES = 19,XCB_X_PRINT_PRINT_SET_ATTRIBUTES = 18,XCB_X_PRINT_PRINT_GET_PAGE_DIMENSIONS = 21,XCB_X_PRINT_PRINT_QUERY_SCREENS = 22,XCB_X_PRINT_PRINT_SET_IMAGE_RESOLUTION = 23,XCB_X_PRINT_PRINT_GET_IMAGE_RESOLUTION = 24,XCB_X_PRINT_NOTIFY = 0,XCB_X_PRINT_ATTRIBUT_NOTIFY = 1,XCB_X_PRINT_BAD_CONTEXT = 0,XCB_X_PRINT_BAD_SEQUENCE = 1,XCB_TEST_MAJOR_VERSION = 2,XCB_TEST_MINOR_VERSION = 1,XCB_TEST_GET_VERSION = 0,XCB_TEST_COMPARE_CURSOR = 1,XCB_TEST_FAKE_INPUT = 2,XCB_TEST_GRAB_CONTROL = 3,XCB_XV_MAJOR_VERSION = 2,XCB_XV_MINOR_VERSION = 2,XCB_XV_BAD_PORT = 0,XCB_XV_BAD_ENCODING = 1,XCB_XV_BAD_CONTROL = 2,XCB_XV_VIDEO_NOTIFY = 0,XCB_XV_PORT_NOTIFY = 1,XCB_XV_QUERY_EXTENSION = 0,XCB_XV_QUERY_ADAPTORS = 1,XCB_XV_QUERY_ENCODINGS = 2,XCB_XV_GRAB_PORT = 3,XCB_XV_UNGRAB_PORT = 4,XCB_XV_PUT_VIDEO = 5,XCB_XV_PUT_STILL = 6,XCB_XV_GET_VIDEO = 7,XCB_XV_GET_STILL = 8,XCB_XV_STOP_VIDEO = 9,XCB_XV_SELECT_VIDEO_NOTIFY = 10,XCB_XV_SELECT_PORT_NOTIFY = 11,XCB_XV_QUERY_BEST_SIZE = 12,XCB_XV_SET_PORT_ATTRIBUTE = 13,XCB_XV_GET_PORT_ATTRIBUTE = 14,XCB_XV_QUERY_PORT_ATTRIBUTES = 15,XCB_XV_LIST_IMAGE_FORMATS = 16,XCB_XV_QUERY_IMAGE_ATTRIBUTES = 17,XCB_XV_PUT_IMAGE = 18,XCB_XV_SHM_PUT_IMAGE = 19,XCB_XVMC_MAJOR_VERSION = 1,XCB_XVMC_MINOR_VERSION = 1,XCB_XVMC_QUERY_VERSION = 0,XCB_XVMC_LIST_SURFACE_TYPES = 1,XCB_XVMC_CREATE_CONTEXT = 2,XCB_XVMC_DESTROY_CONTEXT = 3,XCB_XVMC_CREATE_SURFACE = 4,XCB_XVMC_DESTROY_SURFACE = 5,XCB_XVMC_CREATE_SUBPICTURE = 6,XCB_XVMC_DESTROY_SUBPICTURE = 7,XCB_XVMC_LIST_SUBPICTURE_TYPES = 8,};
enum MACRO_XER {XER_NBBY = 8,};
enum MACRO_XFD {XFD_SETSIZE = 256,};
enum MACRO_XFT {XFT_MAJOR = 2,XFT_MINOR = 1,XFT_REVISION = 9,XFT_VERSION = 20109,};
enum MACRO_XID {CLGET_XID = 10,CLSET_XID = 11,};
enum MACRO_XKM {XKM_H = 1,};
enum MACRO_XMD {XMD_H = 1,};
enum MACRO_XML {XML_TRUE = 1,XML_FALSE = 0,XML_MAJOR_VERSION = 2,XML_MINOR_VERSION = 0,XML_MICRO_VERSION = 0,};
enum MACRO_XPM {XPM_MONO = 2,XPM_GREY4 = 3,XPM_GRAY4 = 3,XPM_GREY = 4,XPM_GRAY = 4,XPM_COLOR = 5,};
enum MACRO_XWD {XWD_FILE_VERSION = 7,};
enum MACRO_YPU {YPU_PROG = 100028,YPU_VERS = 1,YPU_CHANGE = 1,YPU_INSERT = 2,YPU_DELETE = 3,YPU_STORE = 4,};
enum MACRO_ZMH {ZMH_VC = 1,ZMH_DG = 2,ZMH_AUTH = 4,};
enum MACRO__AR {_AR_H = 1,};
enum MACRO__IO {_IO_HAVE_SYS_WAIT = 1,_IO_HAVE_ST_BLKSIZE = 0,_IO_BUFSIZ = 8192,_IO_UNIFIED_JUMPTABLES = 1,};
enum MACRO__RE {_RE_COMP_H = 1,};
enum MACRO__SS {_SS_SIZE = 128,};
enum MACRO___S {__S_IFMT = 0xF000,__S_IFDIR = 0x4000,__S_IFCHR = 0x2000,__S_IFBLK = 0x6000,__S_IFREG = 0x8000,__S_IFIFO = 0x1000,__S_IFLNK = 0xA000,__S_IFSOCK = 0xC000,__S_ISUID = 0x800,__S_ISGID = 0x400,__S_ISVTX = 0x200,__S_IREAD = 0x100,__S_IWRITE = 0x80,__S_IEXEC = 0x40,};
enum MACRO___W {__W_CONTINUED = 0xFFFF,};
enum MACRO_acs {acs_chars_index = 146,};
enum MACRO_bfd {bfd_mach_m68000 = 1,bfd_mach_m68008 = 2,bfd_mach_m68010 = 3,bfd_mach_m68020 = 4,bfd_mach_m68030 = 5,bfd_mach_m68040 = 6,bfd_mach_m68060 = 7,bfd_mach_cpu32 = 8,bfd_mach_mcf_isa_a_nodiv = 9,bfd_mach_mcf_isa_a = 10,bfd_mach_mcf_isa_a_mac = 11,bfd_mach_mcf_isa_a_emac = 12,bfd_mach_mcf_isa_aplus = 13,bfd_mach_mcf_isa_aplus_mac = 14,bfd_mach_mcf_isa_aplus_emac = 15,bfd_mach_mcf_isa_b_nousp = 16,bfd_mach_mcf_isa_b_nousp_mac = 17,bfd_mach_mcf_isa_b_nousp_emac = 18,bfd_mach_mcf_isa_b = 19,bfd_mach_mcf_isa_b_mac = 20,bfd_mach_mcf_isa_b_emac = 21,bfd_mach_mcf_isa_b_float = 22,bfd_mach_mcf_isa_b_float_mac = 23,bfd_mach_mcf_isa_b_float_emac = 24,bfd_mach_i960_core = 1,bfd_mach_i960_ka_sa = 2,bfd_mach_i960_kb_sb = 3,bfd_mach_i960_mc = 4,bfd_mach_i960_xa = 5,bfd_mach_i960_ca = 6,bfd_mach_i960_jx = 7,bfd_mach_i960_hx = 8,bfd_mach_sparc = 1,bfd_mach_sparc_sparclet = 2,bfd_mach_sparc_sparclite = 3,bfd_mach_sparc_v8plus = 4,bfd_mach_sparc_v8plusa = 5,bfd_mach_sparc_sparclite_le = 6,bfd_mach_sparc_v9 = 7,bfd_mach_sparc_v9a = 8,bfd_mach_sparc_v8plusb = 9,bfd_mach_sparc_v9b = 10,bfd_mach_mips3000 = 3000,bfd_mach_mips3900 = 3900,bfd_mach_mips4000 = 4000,bfd_mach_mips4010 = 4010,bfd_mach_mips4100 = 4100,bfd_mach_mips4111 = 4111,bfd_mach_mips4120 = 4120,bfd_mach_mips4300 = 4300,bfd_mach_mips4400 = 4400,bfd_mach_mips4600 = 4600,bfd_mach_mips4650 = 4650,bfd_mach_mips5000 = 5000,bfd_mach_mips5400 = 5400,bfd_mach_mips5500 = 5500,bfd_mach_mips6000 = 6000,bfd_mach_mips7000 = 7000,bfd_mach_mips8000 = 8000,bfd_mach_mips9000 = 9000,bfd_mach_mips10000 = 10000,bfd_mach_mips12000 = 12000,bfd_mach_mips16 = 16,bfd_mach_mips5 = 5,bfd_mach_mips_sb1 = 12310201,bfd_mach_mipsisa32 = 32,bfd_mach_mipsisa32r2 = 33,bfd_mach_mipsisa64 = 64,bfd_mach_mipsisa64r2 = 65,bfd_mach_i386_i386 = 1,bfd_mach_i386_i8086 = 2,bfd_mach_i386_i386_intel_syntax = 3,bfd_mach_x86_64 = 64,bfd_mach_x86_64_intel_syntax = 65,bfd_mach_h8300 = 1,bfd_mach_h8300h = 2,bfd_mach_h8300s = 3,bfd_mach_h8300hn = 4,bfd_mach_h8300sn = 5,bfd_mach_h8300sx = 6,bfd_mach_h8300sxn = 7,bfd_mach_ppc = 32,bfd_mach_ppc64 = 64,bfd_mach_ppc_403 = 403,bfd_mach_ppc_403gc = 4030,bfd_mach_ppc_505 = 505,bfd_mach_ppc_601 = 601,bfd_mach_ppc_602 = 602,bfd_mach_ppc_603 = 603,bfd_mach_ppc_ec603e = 6031,bfd_mach_ppc_604 = 604,bfd_mach_ppc_620 = 620,bfd_mach_ppc_630 = 630,bfd_mach_ppc_750 = 750,bfd_mach_ppc_860 = 860,bfd_mach_ppc_a35 = 35,bfd_mach_ppc_rs64ii = 642,bfd_mach_ppc_rs64iii = 643,bfd_mach_ppc_7400 = 7400,bfd_mach_ppc_e500 = 500,bfd_mach_rs6k = 6000,bfd_mach_rs6k_rs1 = 6001,bfd_mach_rs6k_rsc = 6003,bfd_mach_rs6k_rs2 = 6002,bfd_mach_hppa10 = 10,bfd_mach_hppa11 = 11,bfd_mach_hppa20 = 20,bfd_mach_hppa20w = 25,bfd_mach_d10v = 1,bfd_mach_d10v_ts2 = 2,bfd_mach_d10v_ts3 = 3,bfd_mach_m6812_default = 0,bfd_mach_m6812 = 1,bfd_mach_m6812s = 2,bfd_mach_z8001 = 1,bfd_mach_z8002 = 2,bfd_mach_sh = 1,bfd_mach_sh2 = 32,bfd_mach_sh_dsp = 45,bfd_mach_sh2a = 42,bfd_mach_sh2a_nofpu = 43,bfd_mach_sh2a_nofpu_or_sh4_nommu_nofpu = 673,bfd_mach_sh2a_nofpu_or_sh3_nommu = 674,bfd_mach_sh2a_or_sh4 = 675,bfd_mach_sh2a_or_sh3e = 676,bfd_mach_sh2e = 46,bfd_mach_sh3 = 48,bfd_mach_sh3_nommu = 49,bfd_mach_sh3_dsp = 61,bfd_mach_sh3e = 62,bfd_mach_sh4 = 64,bfd_mach_sh4_nofpu = 65,bfd_mach_sh4_nommu_nofpu = 66,bfd_mach_sh4a = 74,bfd_mach_sh4a_nofpu = 75,bfd_mach_sh4al_dsp = 77,bfd_mach_sh5 = 80,bfd_mach_alpha_ev4 = 16,bfd_mach_alpha_ev5 = 32,bfd_mach_alpha_ev6 = 48,bfd_mach_arm_unknown = 0,bfd_mach_arm_2 = 1,bfd_mach_arm_2a = 2,bfd_mach_arm_3 = 3,bfd_mach_arm_3M = 4,bfd_mach_arm_4 = 5,bfd_mach_arm_4T = 6,bfd_mach_arm_5 = 7,bfd_mach_arm_5T = 8,bfd_mach_arm_5TE = 9,bfd_mach_arm_XScale = 10,bfd_mach_arm_ep9312 = 11,bfd_mach_arm_iWMMXt = 12,bfd_mach_arm_iWMMXt2 = 13,bfd_mach_tic3x = 30,bfd_mach_tic4x = 40,bfd_mach_v850 = 1,bfd_mach_v850e = 69,bfd_mach_v850e1 = 49,bfd_mach_arc_5 = 5,bfd_mach_arc_6 = 6,bfd_mach_arc_7 = 7,bfd_mach_arc_8 = 8,bfd_mach_m16c = 117,bfd_mach_m32c = 120,bfd_mach_m32r = 1,bfd_mach_m32rx = 120,bfd_mach_m32r2 = 50,bfd_mach_mn10300 = 300,bfd_mach_am33 = 330,bfd_mach_am33_2 = 332,bfd_mach_fr30 = 1179792176,bfd_mach_frv = 1,bfd_mach_frvsimple = 2,bfd_mach_fr300 = 300,bfd_mach_fr400 = 400,bfd_mach_fr450 = 450,bfd_mach_frvtomcat = 499,bfd_mach_fr500 = 500,bfd_mach_fr550 = 550,bfd_mach_ia64_elf64 = 64,bfd_mach_ia64_elf32 = 32,bfd_mach_ip2022 = 1,bfd_mach_ip2022ext = 2,bfd_mach_iq2000 = 1,bfd_mach_iq10 = 2,bfd_mach_ms1 = 1,bfd_mach_mrisc2 = 2,bfd_mach_ms2 = 3,bfd_mach_avr1 = 1,bfd_mach_avr2 = 2,bfd_mach_avr3 = 3,bfd_mach_avr4 = 4,bfd_mach_avr5 = 5,bfd_mach_avr6 = 6,bfd_mach_bfin = 1,bfd_mach_cr16c = 1,bfd_mach_crx = 1,bfd_mach_cris_v0_v10 = 255,bfd_mach_cris_v32 = 32,bfd_mach_cris_v10_v32 = 1032,bfd_mach_s390_31 = 31,bfd_mach_s390_64 = 64,bfd_mach_xstormy16 = 1,bfd_mach_msp11 = 11,bfd_mach_msp110 = 110,bfd_mach_msp12 = 12,bfd_mach_msp13 = 13,bfd_mach_msp14 = 14,bfd_mach_msp15 = 15,bfd_mach_msp16 = 16,bfd_mach_msp21 = 21,bfd_mach_msp31 = 31,bfd_mach_msp32 = 32,bfd_mach_msp33 = 33,bfd_mach_msp41 = 41,bfd_mach_msp42 = 42,bfd_mach_msp43 = 43,bfd_mach_msp44 = 44,bfd_mach_xc16x = 1,bfd_mach_xc16xl = 2,bfd_mach_xc16xs = 3,bfd_mach_xtensa = 1,bfd_mach_maxq10 = 10,bfd_mach_maxq20 = 20,bfd_mach_z80strict = 1,bfd_mach_z80 = 3,bfd_mach_z80full = 7,bfd_mach_r800 = 11,};
typedef void (*Menu_Hook)(struct tagMENU *);
typedef unsigned int Modifiers;
typedef struct timeval **OSTimePtr;
typedef struct _ObjectRec ObjectRec;
typedef struct _PaneStack PaneStack;
typedef struct _BB9D9B590A605113A47DE84E848B0D17 PanedPart;
typedef struct _PannerRec PannerRec;
typedef struct _ParamInfoRec *ParamInfo;
typedef struct _19819260117A2122793EF6A7F838A8D8 RECTANGLE;
typedef unsigned char SANE_Byte;
typedef char SANE_Char;
typedef int SANE_Word;
typedef struct _SelectRec SelectRec;
typedef struct sg_io_hdr Sg_io_hdr;
typedef struct sg_io_vec Sg_io_vec;
typedef struct _65A7BC70F11250CC66A1AAC499DD4DF0 ShellPart;
typedef struct _SimpleRec SimpleRec;
typedef struct _SmeBSBRec SmeBSBRec;
typedef struct _SmeRec *SmeObject;
struct TTCapInfo {int flags;double autoItalic;double scaleWidth;double scaleBBoxWidth;double scaleBBoxHeight;int doubleStrikeShift;int adjustBBoxWidthByPixel;int adjustLeftSideBearingByPixel;int adjustRightSideBearingByPixel;double scaleBitmap;int forceConstantSpacingBegin;int forceConstantSpacingEnd;int force_c_adjust_width_by_pixel;int force_c_adjust_lsb_by_pixel;int force_c_adjust_rsb_by_pixel;int force_c_representative_metrics_char_code;double force_c_scale_b_box_width;double force_c_scale_b_box_height;double force_c_scale_lsb;double force_c_scale_rsb;double vl_slant;int lsbShiftOfBitmapAutoItalic;int rsbShiftOfBitmapAutoItalic;};
typedef struct TT_Header_ TT_Header;
typedef struct _ThreeDRec ThreeDRec;
typedef struct _TipRec *TipWidget;
typedef struct _ToggleRec ToggleRec;
typedef struct WBXMLList_s WBXMLList;
typedef struct WBXMLTree_s WBXMLTree;
typedef struct _WidgetRec WidgetRec;
typedef struct _11C917A64EBBC5D03EC5A08E1FB0008D XAnyEvent;
typedef struct _XAxisInfo XAxisInfo;
typedef union _569A3EBE48D59AD86C5994BFEDBCF6F2 XDGAEvent;
typedef struct _8F38FA1882FD1CDA04507844DB5B7464 XETrapCfg;
typedef struct _BEA3E970906BDE5578391186783FC521 XExtCodes;
typedef struct _A78408D38BF8EB20B5134CAF14D5F131 XFontProp;
typedef struct _5C358F5DC2F4F58C756854976C7F2ED0 XGCValues;
typedef struct _DD1A60F664AD301361B26C5800787B5E XIMStyles;
typedef struct _A386896A7A6A8667CB6DAB8066B01EA8 XIconSize;
typedef struct _D253512181A5FC719D07097CFD19CBCF XKeyEvent;
typedef struct _F028EE1E7A219E794434525B0B591EF9 XKeyState;
enum XML_Error {XML_ERROR_NONE = 0x0,XML_ERROR_NO_MEMORY = 0x1,XML_ERROR_SYNTAX = 0x2,XML_ERROR_NO_ELEMENTS = 0x3,XML_ERROR_INVALID_TOKEN = 0x4,XML_ERROR_UNCLOSED_TOKEN = 0x5,XML_ERROR_PARTIAL_CHAR = 0x6,XML_ERROR_TAG_MISMATCH = 0x7,XML_ERROR_DUPLICATE_ATTRIBUTE = 0x8,XML_ERROR_JUNK_AFTER_DOC_ELEMENT = 0x9,XML_ERROR_PARAM_ENTITY_REF = 0xA,XML_ERROR_UNDEFINED_ENTITY = 0xB,XML_ERROR_RECURSIVE_ENTITY_REF = 0xC,XML_ERROR_ASYNC_ENTITY = 0xD,XML_ERROR_BAD_CHAR_REF = 0xE,XML_ERROR_BINARY_ENTITY_REF = 0xF,XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF = 0x10,XML_ERROR_MISPLACED_XML_PI = 0x11,XML_ERROR_UNKNOWN_ENCODING = 0x12,XML_ERROR_INCORRECT_ENCODING = 0x13,XML_ERROR_UNCLOSED_CDATA_SECTION = 0x14,XML_ERROR_EXTERNAL_ENTITY_HANDLING = 0x15,XML_ERROR_NOT_STANDALONE = 0x16,XML_ERROR_UNEXPECTED_STATE = 0x17,XML_ERROR_ENTITY_DECLARED_IN_PE = 0x18,XML_ERROR_FEATURE_REQUIRES_XML_DTD = 0x19,XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING = 0x1A,XML_ERROR_UNBOUND_PREFIX = 0x1B,XML_ERROR_UNDECLARING_PREFIX = 0x1C,XML_ERROR_INCOMPLETE_PE = 0x1D,XML_ERROR_XML_DECL = 0x1E,XML_ERROR_TEXT_DECL = 0x1F,XML_ERROR_PUBLICID = 0x20,XML_ERROR_SUSPENDED = 0x21,XML_ERROR_NOT_SUSPENDED = 0x22,XML_ERROR_ABORTED = 0x23,XML_ERROR_FINISHED = 0x24,XML_ERROR_SUSPEND_PE = 0x25,XML_ERROR_RESERVED_PREFIX_XML = 0x26,XML_ERROR_RESERVED_PREFIX_XMLNS = 0x27,XML_ERROR_RESERVED_NAMESPACE_URI = 0x28,};
typedef int XML_Index;
typedef char XML_LChar;
typedef struct _D5990F2BF3086DF3C6E5843A4F6D2F9C XMapEvent;
typedef struct _636E06EF14FC653C9FA755BCE21D4A3F XTextItem;
typedef struct _XTriangle XTriangle;
typedef struct _XawIcPart XawIcPart;
typedef struct _XawImPart XawImPart;
typedef struct _CDF3BC70CBFC5069783BD7650BD44CEE XcmsColor;
typedef double XcmsFloat;
typedef unsigned char *XctString;
typedef union _XkbAction XkbAction;
typedef struct _XkbKey *XkbKeyPtr;
typedef struct _XkbKey XkbKeyRec;
typedef struct _XkbRow *XkbRowPtr;
typedef struct _XkbRow XkbRowRec;
typedef unsigned int XpauFlags;
typedef char *XrmString;
typedef struct _XtGrabRec XtGrabRec;
typedef int XtGravity;
typedef unsigned int XtInputId;
typedef void *XtPointer;
struct _FSChar2b {unsigned char high;unsigned char low;};
struct _FSOffset {unsigned int position;unsigned int length;};
struct _FcAtomic;
struct _FcBlanks;
struct _FcConfig;
struct _FcMatrix {double xx;double xy;double yx;double yy;};
enum _FcResult {FcResultMatch = 0x0,FcResultNoMatch = 0x1,FcResultTypeMismatch = 0x2,FcResultNoId = 0x3,FcResultOutOfMemory = 0x4,};
struct _FcStrSet;
struct _FontName {char *name;short length;short ndashes;};
struct _FontProp {int name;int value;};
typedef struct _9E637E3D30D4EE6DC2F7DCF094554036 _G_fpos_t;
struct _XFilters {int nfilter;char **filter;int nalias;short *alias;};
struct _XPrivate;
struct _XkbColor {unsigned int pixel;char *spec;};
struct _XkbPoint {short x;short y;};
typedef char *__caddr_t;
typedef int __clock_t;
typedef int __daddr_t;
typedef int __fd_mask;
typedef struct __gconv_info *__gconv_t;
typedef signed short __int16_t;
typedef signed int __int32_t;
typedef signed long long __int64_t;
typedef int __jmp_buf[6];
typedef unsigned int __nlink_t;
enum __ns_flag {ns_f_qr = 0x0,ns_f_opcode = 0x1,ns_f_aa = 0x2,ns_f_tc = 0x3,ns_f_rd = 0x4,ns_f_ra = 0x5,ns_f_z = 0x6,ns_f_ad = 0x7,ns_f_cd = 0x8,ns_f_rcode = 0x9,ns_f_max = 0xA,};
enum __ns_sect {ns_s_qd = 0x0,ns_s_zn = 0x0,ns_s_an = 0x1,ns_s_pr = 0x1,ns_s_ns = 0x2,ns_s_ud = 0x2,ns_s_ar = 0x3,ns_s_max = 0x4,};
enum __ns_type {ns_t_invalid = 0x0,ns_t_a = 0x1,ns_t_ns = 0x2,ns_t_md = 0x3,ns_t_mf = 0x4,ns_t_cname = 0x5,ns_t_soa = 0x6,ns_t_mb = 0x7,ns_t_mg = 0x8,ns_t_mr = 0x9,ns_t_null = 0xA,ns_t_wks = 0xB,ns_t_ptr = 0xC,ns_t_hinfo = 0xD,ns_t_minfo = 0xE,ns_t_mx = 0xF,ns_t_txt = 0x10,ns_t_rp = 0x11,ns_t_afsdb = 0x12,ns_t_x25 = 0x13,ns_t_isdn = 0x14,ns_t_rt = 0x15,ns_t_nsap = 0x16,ns_t_nsap_ptr = 0x17,ns_t_sig = 0x18,ns_t_key = 0x19,ns_t_px = 0x1A,ns_t_gpos = 0x1B,ns_t_aaaa = 0x1C,ns_t_loc = 0x1D,ns_t_nxt = 0x1E,ns_t_eid = 0x1F,ns_t_nimloc = 0x20,ns_t_srv = 0x21,ns_t_atma = 0x22,ns_t_naptr = 0x23,ns_t_kx = 0x24,ns_t_cert = 0x25,ns_t_a6 = 0x26,ns_t_dname = 0x27,ns_t_sink = 0x28,ns_t_opt = 0x29,ns_t_tsig = 0xFA,ns_t_ixfr = 0xFB,ns_t_axfr = 0xFC,ns_t_mailb = 0xFD,ns_t_maila = 0xFE,ns_t_any = 0xFF,ns_t_zxfr = 0x100,ns_t_max = 0x10000,};
typedef int __ssize_t;
typedef int __swblk_t;
typedef void *__timer_t;
typedef unsigned short __u_short;
typedef unsigned char __uint8_t;
struct _jfieldID;
enum auth_stat {AUTH_OK = 0x0,AUTH_BADCRED = 0x1,AUTH_REJECTEDCRED = 0x2,AUTH_BADVERF = 0x3,AUTH_REJECTEDVERF = 0x4,AUTH_TOOWEAK = 0x5,AUTH_INVALIDRESP = 0x6,AUTH_FAILED = 0x7,};
enum bfd_error {bfd_error_no_error = 0x0,bfd_error_system_call = 0x1,bfd_error_invalid_target = 0x2,bfd_error_wrong_format = 0x3,bfd_error_wrong_object_format = 0x4,bfd_error_invalid_operation = 0x5,bfd_error_no_memory = 0x6,bfd_error_no_symbols = 0x7,bfd_error_no_armap = 0x8,bfd_error_no_more_archived_files = 0x9,bfd_error_malformed_archive = 0xA,bfd_error_file_not_recognized = 0xB,bfd_error_file_ambiguously_recognized = 0xC,bfd_error_no_contents = 0xD,bfd_error_nonrepresentable_section = 0xE,bfd_error_no_debug_section = 0xF,bfd_error_bad_value = 0x10,bfd_error_file_truncated = 0x11,bfd_error_file_too_big = 0x12,bfd_error_invalid_error_code = 0x13,};
typedef char *bp_path_t;
typedef int bpf_int32;
typedef struct _7257EFC214C83636CC1C8B1684490891 bz_stream;
struct cacheinfo {int hits;int misshits;int purged;int usage;};
enum clnt_stat {RPC_SUCCESS = 0x0,RPC_CANTENCODEARGS = 0x1,RPC_CANTDECODERES = 0x2,RPC_CANTSEND = 0x3,RPC_CANTRECV = 0x4,RPC_TIMEDOUT = 0x5,RPC_VERSMISMATCH = 0x6,RPC_AUTHERROR = 0x7,RPC_PROGUNAVAIL = 0x8,RPC_PROGVERSMISMATCH = 0x9,RPC_PROCUNAVAIL = 0xA,RPC_CANTDECODEARGS = 0xB,RPC_SYSTEMERROR = 0xC,RPC_NOBROADCAST = 0x15,RPC_UNKNOWNHOST = 0xD,RPC_UNKNOWNPROTO = 0x11,RPC_UNKNOWNADDR = 0x13,RPC_RPCBFAILURE = 0xE,RPC_PROGNOTREGISTERED = 0xF,RPC_N2AXLATEFAILURE = 0x16,RPC_FAILED = 0x10,RPC_INTR = 0x12,RPC_TLIERROR = 0x14,RPC_UDERROR = 0x17,RPC_INPROGRESS = 0x18,RPC_STALERACHANDLE = 0x19,};
typedef struct _0FC95954E9672604C2E419500968ACC1 cpu_set_t;
typedef int errcode_t;
typedef void (*everrorcb)(struct bufferevent *, short what, void *);
struct exception {int type;char *name;double arg1;double arg2;double retval;};
typedef unsigned short fexcept_t;
typedef struct fibheap *fibheap_t;
typedef struct fibnode *fibnode_t;
typedef struct _FDFBD601B4BD2833D8A740F2A9550A80 fsFakeReq;
typedef double gleDouble;
typedef struct gz_header_s gz_header;
typedef unsigned int hashval_t;
typedef void (*htab_free)(void *);
typedef int (*htab_trav)(void **, void *);
typedef struct _AC1F0727205AA235F31FA7E4FBAB6931 imaxdiv_t;
struct ip_addr_t {char net;char host;char lh;char impno;};
typedef struct _609755D20E77E328DB0AAE27327A3AE9 jas_opt_t;
typedef struct _jmethodID *jmethodID;
struct kbkeycode {unsigned int scancode;unsigned int keycode;};
enum keystatus {KEY_SUCCESS = 0x0,KEY_NOSECRET = 0x1,KEY_UNKNOWN = 0x2,KEY_SYSTEMERR = 0x3,};
enum klm_stats {klm_granted = 0x0,klm_denied = 0x1,klm_denied_nolocks = 0x2,klm_working = 0x3,};
typedef struct _E7C62F5F3E0275B7F733491039FF6F2A lt_dlinfo;
typedef void *lt_module;
typedef struct mountbody *mountlist;
typedef unsigned int msgqnum_t;
enum nfs_ftype {NFNON = 0x0,NFREG = 0x1,NFDIR = 0x2,NFBLK = 0x3,NFCHR = 0x4,NFLNK = 0x5,NFSOCK = 0x6,NFBAD = 0x7,NFFIFO = 0x8,};
enum nis_error {NIS_SUCCESS = 0x0,NIS_S_SUCCESS = 0x1,NIS_NOTFOUND = 0x2,NIS_S_NOTFOUND = 0x3,NIS_CACHEEXPIRED = 0x4,NIS_NAMEUNREACHABLE = 0x5,NIS_UNKNOWNOBJ = 0x6,NIS_TRYAGAIN = 0x7,NIS_SYSTEMERROR = 0x8,NIS_CHAINBROKEN = 0x9,NIS_PERMISSION = 0xA,NIS_NOTOWNER = 0xB,NIS_NOT_ME = 0xC,NIS_NOMEMORY = 0xD,NIS_NAMEEXISTS = 0xE,NIS_NOTMASTER = 0xF,NIS_INVALIDOBJ = 0x10,NIS_BADNAME = 0x11,NIS_NOCALLBACK = 0x12,NIS_CBRESULTS = 0x13,NIS_NOSUCHNAME = 0x14,NIS_NOTUNIQUE = 0x15,NIS_IBMODERROR = 0x16,NIS_NOSUCHTABLE = 0x17,NIS_TYPEMISMATCH = 0x18,NIS_LINKNAMEERROR = 0x19,NIS_PARTIAL = 0x1A,NIS_TOOMANYATTRS = 0x1B,NIS_RPCERROR = 0x1C,NIS_BADATTRIBUTE = 0x1D,NIS_NOTSEARCHABLE = 0x1E,NIS_CBERROR = 0x1F,NIS_FOREIGNNS = 0x20,NIS_BADOBJECT = 0x21,NIS_NOTSAMEOBJ = 0x22,NIS_MODFAIL = 0x23,NIS_BADREQUEST = 0x24,NIS_NOTEMPTY = 0x25,NIS_COLDSTART_ERR = 0x26,NIS_RESYNC = 0x27,NIS_FAIL = 0x28,NIS_UNAVAIL = 0x29,NIS_RES2BIG = 0x2A,NIS_SRVAUTH = 0x2B,NIS_CLNTAUTH = 0x2C,NIS_NOFILESPACE = 0x2D,NIS_NOPROC = 0x2E,NIS_DUMPLATER = 0x2F,};
enum nlm_stats {nlm_granted = 0x0,nlm_denied = 0x1,nlm_denied_nolocks = 0x2,nlm_blocked = 0x3,nlm_denied_grace_period = 0x4,};
typedef struct _3E5DE56775B94BA308AA7A6C3C30E39A optStruct;
struct osockaddr {unsigned short sa_family;unsigned char sa_data[14];};
typedef struct partition_def *partition;
struct pcap_addr {struct pcap_addr *next;struct sockaddr *addr;struct sockaddr *netmask;struct sockaddr *broadaddr;struct sockaddr *dstaddr;};
typedef struct pcap_if pcap_if_t;
typedef struct po_file *po_file_t;
typedef unsigned int pthread_t;
typedef int ptrdiff_t;
typedef struct __res_state *res_state;
typedef char *rexstring;
typedef unsigned int rpcport_t;
typedef unsigned int rpcproc_t;
typedef unsigned int rpcprog_t;
typedef unsigned int rpcprot_t;
typedef unsigned int rpcvers_t;
typedef char scrnmap_t;
struct sg_header {int pack_len;int reply_len;int pack_id;int result;unsigned int twelve_byte : 1;unsigned int target_status : 5;unsigned int host_status : 8;unsigned int driver_status : 8;unsigned int other_flags : 10;unsigned char sense_buffer[16];};
struct sg_io_hdr {int interface_id;int dxfer_direction;unsigned char cmd_len;unsigned char mx_sb_len;unsigned short iovec_count;unsigned int dxfer_len;void *dxferp;unsigned char *cmdp;unsigned char *sbp;unsigned int timeout;unsigned int flags;int pack_id;void *usr_ptr;unsigned char status;unsigned char masked_status;unsigned char msg_status;unsigned char sb_len_wr;unsigned short host_status;unsigned short driver_status;int resid;unsigned int duration;unsigned int info;};
struct sg_io_vec;
typedef struct siginfo siginfo_t;
typedef struct stat stat_type;
struct str_mlist {char l_name[9];};
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long long u_int64_t;
typedef unsigned long long ufile_ptr;
typedef unsigned long long uintmax_t;
typedef unsigned int uintptr_t;
struct vm86_regs {int ebx;int ecx;int edx;int esi;int edi;int ebp;int eax;int __null_ds;int __null_es;int __null_fs;int __null_gs;int orig_eax;int eip;unsigned short cs;unsigned short __csh;int eflags;int esp;unsigned short ss;unsigned short __ssh;unsigned short es;unsigned short __esh;unsigned short ds;unsigned short __dsh;unsigned short fs;unsigned short __fsh;unsigned short gs;unsigned short __gsh;};
typedef struct _E1260AB78985DBC228459590506E4C92 wordexp_t;
typedef struct _xAxisInfo xAxisInfo;
typedef struct _7B203B1D6B17DB4D229BE0C85CFA6293 xCharInfo;
typedef struct _45DCCDFC0525EE913BAEBC241F6FB2DF xFontProp;
typedef struct _9F8356FA3F6B7BB65CCFE589AF8F3C28 xGlyphElt;
typedef struct _B58F2A65D6A08A32CD1EAF6D9DE3C432 xKeyState;
typedef struct _C8091AD492510FDF271EFEA57BB3787D xTriangle;
typedef struct _C4AF4D457027AFDE6D53E29D5E02871C xXResType;
typedef struct _B88A4CA2F1F645428AB97EBD99B32A47 xXTrapReq;
enum xprt_stat {XPRT_DIED = 0x0,XPRT_MOREREQS = 0x1,XPRT_IDLE = 0x2,};
enum ypxfrstat {YPXFR_SUCC = 0x1,YPXFR_AGE = 0x2,YPXFR_NOMAP = 0xFFFFFFFF,YPXFR_NODOM = 0xFFFFFFFE,YPXFR_RSRC = 0xFFFFFFFD,YPXFR_RPC = 0xFFFFFFFC,YPXFR_MADDR = 0xFFFFFFFB,YPXFR_YPERR = 0xFFFFFFFA,YPXFR_BADARGS = 0xFFFFFFF9,YPXFR_DBM = 0xFFFFFFF8,YPXFR_FILE = 0xFFFFFFF7,YPXFR_SKEW = 0xFFFFFFF6,YPXFR_CLEAR = 0xFFFFFFF5,YPXFR_FORCE = 0xFFFFFFF4,YPXFR_XFRERR = 0xFFFFFFF3,YPXFR_REFUSED = 0xFFFFFFF2,};
typedef struct _AsciiRec AsciiRec;
typedef unsigned int Cardinal;
typedef struct _CorePart CorePart;
typedef struct _6BC30673BAC263332B5478E8764DF6F2 Elf_Data;
typedef unsigned char ExifByte;
typedef struct _ExifData ExifData;
typedef struct _FSChar2b FSChar2b;
typedef struct _FSOffset FSOffset;
typedef struct _FSServer FSServer;
typedef struct FTC_NodeRec_ *FTC_Node;
typedef struct FTC_SBitRec_ *FTC_SBit;
struct FTSize_s;
typedef int FT_Error;
typedef signed short FT_FWord;
typedef signed int FT_Fixed;
typedef struct FT_GlyphRec_ *FT_Glyph;
typedef signed short FT_Int16;
typedef signed int FT_Int32;
typedef signed short FT_Short;
struct FT_Span_ {short x;unsigned short len;unsigned char coverage;};
typedef unsigned int FT_UFast;
typedef unsigned int FT_ULong;
typedef struct _FcAtomic FcAtomic;
typedef struct _FcBlanks FcBlanks;
typedef unsigned short FcChar16;
typedef unsigned int FcChar32;
typedef struct _FcConfig FcConfig;
typedef struct _FcMatrix FcMatrix;
typedef struct _FcStrSet FcStrSet;
typedef struct _BAC9482348E0E8493864B83901A477A6 FdStruct;
typedef struct _FormPart FormPart;
struct GLUnurbs;
typedef union __GLXEvent GLXEvent;
typedef double GLclampd;
typedef float GLclampf;
typedef double GLdouble;
typedef unsigned short GLhalfNV;
typedef unsigned short GLushort;
typedef unsigned int GlyphSet;
typedef struct _5076863A126F636DF3EACFE42235765C GripPart;
typedef int IjsJobId;
typedef void (*InitFont)(void);
typedef struct _LabelRec LabelRec;
typedef struct _877451DBD18072CBABC3B29349C46696 ListPart;
enum MACRO_AC {AC = 0x10,};
enum MACRO_AF {AF_UNSPEC = 0,AF_LOCAL = 1,AF_UNIX = 1,AF_FILE = 1,AF_INET = 2,AF_AX25 = 3,AF_IPX = 4,AF_APPLETALK = 5,AF_NETROM = 6,AF_BRIDGE = 7,AF_ATMPVC = 8,AF_X25 = 9,AF_INET6 = 10,AF_ROSE = 11,AF_DECnet = 12,AF_NETBEUI = 13,AF_SECURITY = 14,AF_KEY = 15,AF_NETLINK = 16,AF_ROUTE = 16,AF_PACKET = 17,AF_ASH = 18,AF_ECONET = 19,AF_ATMSVC = 20,AF_SNA = 22,AF_IRDA = 23,AF_PPPOX = 24,AF_WANPIPE = 25,AF_BLUETOOTH = 31,AF_MAX = 32,};
enum MACRO_AI {AI_PASSIVE = 0x1,AI_CANONNAME = 0x2,AI_NUMERICHOST = 0x4,AI_V4MAPPED = 0x8,AI_ALL = 0x10,AI_ADDRCONFIG = 0x20,AI_NUMERICSERV = 0x400,};
enum MACRO_AO {AO = 245,};
enum MACRO_AT {AT_NULL = 0,AT_IGNORE = 1,AT_EXECFD = 2,AT_PHDR = 3,AT_PHENT = 4,AT_PHNUM = 5,AT_PAGESZ = 6,AT_BASE = 7,AT_FLAGS = 8,AT_ENTRY = 9,AT_NOTELF = 10,AT_UID = 11,AT_EUID = 12,AT_GID = 13,AT_EGID = 14,AT_CLKTCK = 17,AT_PLATFORM = 15,AT_HWCAP = 16,AT_FPUCW = 18,AT_DCACHEBSIZE = 19,AT_ICACHEBSIZE = 20,AT_UCACHEBSIZE = 21,AT_IGNOREPPC = 22,AT_SECURE = 23,AT_SYSINFO = 32,AT_SYSINFO_EHDR = 33,AT_L1I_CACHESHAPE = 34,AT_L1D_CACHESHAPE = 35,AT_L2_CACHESHAPE = 36,AT_L3_CACHESHAPE = 37,};
enum MACRO_B0 {B0 = 0x0,B50 = 0x1,B75 = 0x2,};
enum MACRO_BC {BC_BASE_MAX = 99,BC_DIM_MAX = 2048,BC_SCALE_MAX = 99,BC_STRING_MAX = 1000,};
enum MACRO_BT {BT_UISHIFT = 5,BT_NBIPUI = 32,BT_UIMASK = 31,};
enum MACRO_BZ {BZ_RUN = 0,BZ_FLUSH = 1,BZ_FINISH = 2,BZ_OK = 0,BZ_RUN_OK = 1,BZ_FLUSH_OK = 2,BZ_FINISH_OK = 3,BZ_STREAM_END = 4,BZ_SEQUENCE_ERROR = -1,BZ_PARAM_ERROR = -2,BZ_MEM_ERROR = -3,BZ_DATA_ERROR = -4,BZ_DATA_ERROR_MAGIC = -5,BZ_IO_ERROR = -6,BZ_UNEXPECTED_EOF = -7,BZ_OUTBUFF_FULL = -8,BZ_CONFIG_ERROR = -9,BZ_MAX_UNUSED = 5000,};
enum MACRO_CA {CA_SUNW_NULL = 0,CA_SUNW_HW_1 = 1,CA_SUNW_SF_1 = 2,};
enum MACRO_CB {CB_PROG = 100302,CB_VERS = 1,};
enum MACRO_CD {CD_FRAMESIZE = 2048,CD_FRAMESIZE_RAW = 2352,CD_FRAMESAMPLES = 588,};
enum MACRO_CI {CI_DEFLATE = 26,CI_DEFLATE_DRAFT = 24,};
enum MACRO_CS {CS = 13,};
enum MACRO_DF {DF_ORIGIN = 0x1,DF_SYMBOLIC = 0x2,DF_TEXTREL = 0x4,DF_BIND_NOW = 0x8,DF_STATIC_TLS = 0x10,};
enum MACRO_DK {DK_NDRIVE = 4,};
enum MACRO_DM {DM = 242,};
enum MACRO_DO {DO = 253,};
enum MACRO_DR {DR_FIRSTADDR = 0,DR_LASTADDR = 3,DR_STATUS = 6,DR_CONTROL = 7,DR_TRAP0 = 1,DR_TRAP1 = 2,DR_TRAP2 = 4,DR_TRAP3 = 8,DR_STEP = 16384,DR_SWITCH = 32768,DR_CONTROL_SHIFT = 16,DR_CONTROL_SIZE = 4,DR_RW_EXECUTE = 0,DR_RW_WRITE = 1,DR_RW_READ = 3,DR_LEN_1 = 0,DR_LEN_2 = 4,DR_LEN_4 = 12,DR_LOCAL_ENABLE_SHIFT = 0,DR_GLOBAL_ENABLE_SHIFT = 1,DR_ENABLE_SIZE = 2,DR_LOCAL_ENABLE_MASK = 85,DR_GLOBAL_ENABLE_MASK = 170,DR_CONTROL_RESERVED = 64512,DR_LOCAL_SLOWDOWN = 256,DR_GLOBAL_SLOWDOWN = 512,};
enum MACRO_DS {DS = 7,ES = 8,};
enum MACRO_DT {DT_NULL = 0,DT_NEEDED = 1,DT_PLTRELSZ = 2,DT_PLTGOT = 3,DT_HASH = 4,DT_STRTAB = 5,DT_SYMTAB = 6,DT_RELA = 7,DT_RELASZ = 8,DT_RELAENT = 9,DT_STRSZ = 10,DT_SYMENT = 11,DT_INIT = 12,DT_FINI = 13,DT_SONAME = 14,DT_RPATH = 15,DT_SYMBOLIC = 16,DT_REL = 17,DT_RELSZ = 18,DT_RELENT = 19,DT_PLTREL = 20,DT_DEBUG = 21,DT_TEXTREL = 22,DT_JMPREL = 23,DT_BIND_NOW = 24,DT_INIT_ARRAY = 25,DT_FINI_ARRAY = 26,DT_INIT_ARRAYSZ = 27,DT_FINI_ARRAYSZ = 28,DT_RUNPATH = 29,DT_FLAGS = 30,DT_ENCODING = 32,DT_PREINIT_ARRAY = 32,DT_PREINIT_ARRAYSZ = 33,DT_NUM = 34,DT_LOOS = 1610612749,DT_HIOS = 1879044096,DT_LOPROC = 1879048192,DT_HIPROC = 2147483647,DT_VALRNGLO = 1879047424,DT_GNU_PRELINKED = 1879047669,DT_GNU_CONFLICTSZ = 1879047670,DT_GNU_LIBLISTSZ = 1879047671,DT_CHECKSUM = 1879047672,DT_PLTPADSZ = 1879047673,DT_MOVEENT = 1879047674,DT_MOVESZ = 1879047675,DT_FEATURE_1 = 1879047676,DT_POSFLAG_1 = 1879047677,DT_SYMINSZ = 1879047678,DT_SYMINENT = 1879047679,DT_VALRNGHI = 1879047679,DT_VALNUM = 12,DT_ADDRRNGLO = 1879047680,DT_GNU_HASH = 1879047925,DT_TLSDESC_PLT = 1879047926,DT_TLSDESC_GOT = 1879047927,DT_GNU_CONFLICT = 1879047928,DT_GNU_LIBLIST = 1879047929,DT_CONFIG = 1879047930,DT_DEPAUDIT = 1879047931,DT_AUDIT = 1879047932,DT_PLTPAD = 1879047933,DT_MOVETAB = 1879047934,DT_SYMINFO = 1879047935,DT_ADDRRNGHI = 1879047935,DT_ADDRNUM = 11,DT_VERSYM = 1879048176,DT_RELACOUNT = 1879048185,DT_RELCOUNT = 1879048186,DT_FLAGS_1 = 1879048187,DT_VERDEF = 1879048188,DT_VERDEFNUM = 1879048189,DT_VERNEED = 1879048190,DT_VERNEEDNUM = 1879048191,DT_VERSIONTAGNUM = 16,DT_SUSE_LO = 1824378928,DT_SUSE_HASHVALS = 1824378928,DT_SUSE_DIRECT = 1824378929,DT_SUSE_HI = 1824378944,DT_SUSENUM = 2,DT_AUXILIARY = 2147483645,DT_FILTER = 2147483647,DT_EXTRANUM = 3,};
enum MACRO_EC {EC = 247,};
enum MACRO_EF {EF_CPU32 = 0x810000,};
enum MACRO_EI {EI_NIDENT = 16,EI_MAG0 = 0,};
enum MACRO_EL {EL = 248,};
enum MACRO_EM {EM_NONE = 0,EM_M32 = 1,EM_SPARC = 2,EM_386 = 3,EM_68K = 4,EM_88K = 5,EM_860 = 7,EM_MIPS = 8,EM_S370 = 9,EM_MIPS_RS3_LE = 10,EM_PARISC = 15,EM_VPP500 = 17,EM_SPARC32PLUS = 18,EM_960 = 19,EM_PPC = 20,EM_PPC64 = 21,EM_S390 = 22,EM_V800 = 36,EM_FR20 = 37,EM_RH32 = 38,EM_RCE = 39,EM_ARM = 40,EM_FAKE_ALPHA = 41,EM_SH = 42,EM_SPARCV9 = 43,EM_TRICORE = 44,EM_ARC = 45,EM_H8_300 = 46,EM_H8_300H = 47,EM_H8S = 48,EM_H8_500 = 49,EM_IA_64 = 50,EM_MIPS_X = 51,EM_COLDFIRE = 52,EM_68HC12 = 53,EM_MMA = 54,EM_PCP = 55,EM_NCPU = 56,EM_NDR1 = 57,EM_STARCORE = 58,EM_ME16 = 59,EM_ST100 = 60,EM_TINYJ = 61,EM_X86_64 = 62,EM_PDSP = 63,EM_FX66 = 66,EM_ST9PLUS = 67,EM_ST7 = 68,EM_68HC16 = 69,EM_68HC11 = 70,EM_68HC08 = 71,EM_68HC05 = 72,EM_SVX = 73,EM_ST19 = 74,EM_VAX = 75,EM_CRIS = 76,EM_JAVELIN = 77,EM_FIREPATH = 78,EM_ZSP = 79,EM_MMIX = 80,EM_HUANY = 81,EM_PRISM = 82,EM_AVR = 83,EM_FR30 = 84,EM_D10V = 85,EM_D30V = 86,EM_V850 = 87,EM_M32R = 88,EM_MN10300 = 89,EM_MN10200 = 90,EM_PJ = 91,EM_OPENRISC = 92,EM_ARC_A5 = 93,EM_XTENSA = 94,EM_NUM = 95,EM_ALPHA = 36902,};
enum MACRO_EN {EN_BINARY = 1,EN_CRYPT = 2,EN_XDR = 4,EN_MODIFIED = 8,EN_ASN1 = 64,};
enum MACRO_ET {ET_NONE = 0,ET_REL = 1,ET_EXEC = 2,ET_DYN = 3,ET_CORE = 4,ET_NUM = 5,ET_LOOS = 65024,ET_HIOS = 65279,ET_LOPROC = 65280,ET_HIPROC = 65535,};
enum MACRO_EV {EV_NONE = 0,EV_CURRENT = 1,EV_NUM = 2,};
enum MACRO_EX {EX_OK = 0,EX__BASE = 64,EX_USAGE = 64,EX_DATAERR = 65,EX_NOINPUT = 66,EX_NOUSER = 67,EX_NOHOST = 68,EX_UNAVAILABLE = 69,EX_SOFTWARE = 70,EX_OSERR = 71,EX_OSFILE = 72,EX_CANTCREAT = 73,EX_IOERR = 74,EX_TEMPFAIL = 75,EX_PROTOCOL = 76,EX_NOPERM = 77,EX_CONFIG = 78,EX__MAX = 78,};
enum MACRO_FC {FC_MAJOR = 2,FC_MINOR = 4,FC_REVISION = 1,FC_VERSION = 20401,};
enum MACRO_FD {FD_SETSIZE = 1024,};
enum MACRO_FE {FE_DFL_ENV = -1,};
enum MACRO_FM {FM_PATCH = 0x1FD,OPL3_PATCH = 0x3FD,};
enum MACRO_FS {FS_RANDOMINIT = 0x1,FS_ALTERNATE = 0x2,};
enum MACRO_FT {FT_RENDER_POOL_SIZE = 16384,FT_MAX_MODULES = 32,};
enum MACRO_GA {GA = 249,};
enum MACRO_GL {GL_VERSION_1_1 = 1,GL_VERSION_1_2 = 1,GL_VERSION_1_3 = 1,GL_ARB_imaging = 1,GL_FALSE = 0,GL_TRUE = 1,GL_BYTE = 5120,GL_UNSIGNED_BYTE = 5121,GL_SHORT = 5122,GL_UNSIGNED_SHORT = 5123,GL_INT = 5124,GL_UNSIGNED_INT = 5125,GL_FLOAT = 5126,GL_2_BYTES = 5127,GL_3_BYTES = 5128,GL_4_BYTES = 5129,GL_DOUBLE = 5130,GL_POINTS = 0,GL_LINES = 1,GL_LINE_LOOP = 2,GL_LINE_STRIP = 3,GL_TRIANGLES = 4,GL_TRIANGLE_STRIP = 5,GL_TRIANGLE_FAN = 6,GL_QUADS = 7,GL_QUAD_STRIP = 8,GL_POLYGON = 9,GL_VERTEX_ARRAY = 32884,GL_NORMAL_ARRAY = 32885,GL_COLOR_ARRAY = 32886,GL_INDEX_ARRAY = 32887,GL_TEXTURE_COORD_ARRAY = 32888,GL_EDGE_FLAG_ARRAY = 32889,GL_VERTEX_ARRAY_SIZE = 32890,GL_VERTEX_ARRAY_TYPE = 32891,GL_VERTEX_ARRAY_STRIDE = 32892,GL_NORMAL_ARRAY_TYPE = 32894,GL_NORMAL_ARRAY_STRIDE = 32895,GL_COLOR_ARRAY_SIZE = 32897,GL_COLOR_ARRAY_TYPE = 32898,GL_COLOR_ARRAY_STRIDE = 32899,GL_INDEX_ARRAY_TYPE = 32901,GL_INDEX_ARRAY_STRIDE = 32902,GL_TEXTURE_COORD_ARRAY_SIZE = 32904,GL_TEXTURE_COORD_ARRAY_TYPE = 32905,GL_TEXTURE_COORD_ARRAY_STRIDE = 32906,GL_EDGE_FLAG_ARRAY_STRIDE = 32908,GL_VERTEX_ARRAY_POINTER = 32910,GL_NORMAL_ARRAY_POINTER = 32911,GL_COLOR_ARRAY_POINTER = 32912,GL_INDEX_ARRAY_POINTER = 32913,GL_TEXTURE_COORD_ARRAY_POINTER = 32914,GL_EDGE_FLAG_ARRAY_POINTER = 32915,GL_V2F = 10784,GL_V3F = 10785,GL_C4UB_V2F = 10786,GL_C4UB_V3F = 10787,GL_C3F_V3F = 10788,GL_N3F_V3F = 10789,GL_C4F_N3F_V3F = 10790,GL_T2F_V3F = 10791,GL_T4F_V4F = 10792,GL_T2F_C4UB_V3F = 10793,GL_T2F_C3F_V3F = 10794,GL_T2F_N3F_V3F = 10795,GL_T2F_C4F_N3F_V3F = 10796,GL_T4F_C4F_N3F_V4F = 10797,GL_MATRIX_MODE = 2976,GL_MODELVIEW = 5888,GL_PROJECTION = 5889,GL_TEXTURE = 5890,GL_POINT_SMOOTH = 2832,GL_POINT_SIZE = 2833,GL_POINT_SIZE_GRANULARITY = 2835,GL_POINT_SIZE_RANGE = 2834,GL_LINE_SMOOTH = 2848,GL_LINE_STIPPLE = 2852,GL_LINE_STIPPLE_PATTERN = 2853,GL_LINE_STIPPLE_REPEAT = 2854,GL_LINE_WIDTH = 2849,GL_LINE_WIDTH_GRANULARITY = 2851,GL_LINE_WIDTH_RANGE = 2850,GL_POINT = 6912,GL_LINE = 6913,GL_FILL = 6914,GL_CW = 2304,GL_CCW = 2305,GL_FRONT = 1028,GL_BACK = 1029,GL_POLYGON_MODE = 2880,GL_POLYGON_SMOOTH = 2881,GL_POLYGON_STIPPLE = 2882,GL_EDGE_FLAG = 2883,GL_CULL_FACE = 2884,GL_CULL_FACE_MODE = 2885,GL_FRONT_FACE = 2886,GL_POLYGON_OFFSET_FACTOR = 32824,GL_POLYGON_OFFSET_UNITS = 10752,GL_POLYGON_OFFSET_POINT = 10753,GL_POLYGON_OFFSET_LINE = 10754,GL_POLYGON_OFFSET_FILL = 32823,GL_COMPILE = 4864,GL_COMPILE_AND_EXECUTE = 4865,GL_LIST_BASE = 2866,GL_LIST_INDEX = 2867,GL_LIST_MODE = 2864,GL_NEVER = 512,GL_LESS = 513,GL_EQUAL = 514,GL_LEQUAL = 515,GL_GREATER = 516,GL_NOTEQUAL = 517,GL_GEQUAL = 518,GL_ALWAYS = 519,GL_DEPTH_TEST = 2929,GL_DEPTH_BITS = 3414,GL_DEPTH_CLEAR_VALUE = 2931,GL_DEPTH_FUNC = 2932,GL_DEPTH_RANGE = 2928,GL_DEPTH_WRITEMASK = 2930,GL_DEPTH_COMPONENT = 6402,GL_LIGHTING = 2896,GL_LIGHT0 = 16384,GL_LIGHT1 = 16385,GL_LIGHT2 = 16386,GL_LIGHT3 = 16387,GL_LIGHT4 = 16388,GL_LIGHT5 = 16389,GL_LIGHT6 = 16390,GL_LIGHT7 = 16391,GL_SPOT_EXPONENT = 4613,GL_SPOT_CUTOFF = 4614,GL_CONSTANT_ATTENUATION = 4615,GL_LINEAR_ATTENUATION = 4616,GL_QUADRATIC_ATTENUATION = 4617,GL_AMBIENT = 4608,GL_DIFFUSE = 4609,GL_SPECULAR = 4610,GL_SHININESS = 5633,GL_EMISSION = 5632,GL_POSITION = 4611,GL_SPOT_DIRECTION = 4612,GL_AMBIENT_AND_DIFFUSE = 5634,GL_COLOR_INDEXES = 5635,GL_LIGHT_MODEL_TWO_SIDE = 2898,GL_LIGHT_MODEL_LOCAL_VIEWER = 2897,GL_LIGHT_MODEL_AMBIENT = 2899,GL_FRONT_AND_BACK = 1032,GL_SHADE_MODEL = 2900,GL_FLAT = 7424,GL_SMOOTH = 7425,GL_COLOR_MATERIAL = 2903,GL_COLOR_MATERIAL_FACE = 2901,GL_COLOR_MATERIAL_PARAMETER = 2902,GL_NORMALIZE = 2977,GL_CLIP_PLANE0 = 12288,GL_CLIP_PLANE1 = 12289,GL_CLIP_PLANE2 = 12290,GL_CLIP_PLANE3 = 12291,GL_CLIP_PLANE4 = 12292,GL_CLIP_PLANE5 = 12293,GL_ACCUM_RED_BITS = 3416,GL_ACCUM_GREEN_BITS = 3417,GL_ACCUM_BLUE_BITS = 3418,GL_ACCUM_ALPHA_BITS = 3419,GL_ACCUM_CLEAR_VALUE = 2944,GL_ACCUM = 256,GL_ADD = 260,GL_LOAD = 257,GL_MULT = 259,GL_RETURN = 258,GL_ALPHA_TEST = 3008,GL_ALPHA_TEST_REF = 3010,GL_ALPHA_TEST_FUNC = 3009,GL_BLEND = 3042,GL_BLEND_SRC = 3041,GL_BLEND_DST = 3040,GL_ZERO = 0,GL_ONE = 1,GL_SRC_COLOR = 768,GL_ONE_MINUS_SRC_COLOR = 769,GL_SRC_ALPHA = 770,GL_ONE_MINUS_SRC_ALPHA = 771,GL_DST_ALPHA = 772,GL_ONE_MINUS_DST_ALPHA = 773,GL_DST_COLOR = 774,GL_ONE_MINUS_DST_COLOR = 775,GL_SRC_ALPHA_SATURATE = 776,GL_FEEDBACK = 7169,GL_RENDER = 7168,GL_SELECT = 7170,GL_2D = 1536,GL_3D = 1537,GL_3D_COLOR = 1538,GL_3D_COLOR_TEXTURE = 1539,GL_4D_COLOR_TEXTURE = 1540,GL_POINT_TOKEN = 1793,GL_LINE_TOKEN = 1794,GL_LINE_RESET_TOKEN = 1799,GL_POLYGON_TOKEN = 1795,GL_BITMAP_TOKEN = 1796,GL_DRAW_PIXEL_TOKEN = 1797,GL_COPY_PIXEL_TOKEN = 1798,GL_PASS_THROUGH_TOKEN = 1792,GL_FEEDBACK_BUFFER_POINTER = 3568,GL_FEEDBACK_BUFFER_SIZE = 3569,GL_FEEDBACK_BUFFER_TYPE = 3570,GL_SELECTION_BUFFER_POINTER = 3571,GL_SELECTION_BUFFER_SIZE = 3572,GL_FOG = 2912,GL_FOG_MODE = 2917,GL_FOG_DENSITY = 2914,GL_FOG_COLOR = 2918,GL_FOG_INDEX = 2913,GL_FOG_START = 2915,GL_FOG_END = 2916,GL_LINEAR = 9729,GL_EXP = 2048,GL_EXP2 = 2049,GL_LOGIC_OP = 3057,GL_INDEX_LOGIC_OP = 3057,GL_COLOR_LOGIC_OP = 3058,GL_LOGIC_OP_MODE = 3056,GL_CLEAR = 5376,GL_SET = 5391,GL_COPY = 5379,GL_COPY_INVERTED = 5388,GL_NOOP = 5381,GL_INVERT = 5386,GL_AND = 5377,GL_NAND = 5390,GL_OR = 5383,GL_NOR = 5384,GL_XOR = 5382,GL_EQUIV = 5385,GL_AND_REVERSE = 5378,GL_AND_INVERTED = 5380,GL_OR_REVERSE = 5387,GL_OR_INVERTED = 5389,GL_STENCIL_BITS = 3415,GL_STENCIL_TEST = 2960,GL_STENCIL_CLEAR_VALUE = 2961,GL_STENCIL_FUNC = 2962,GL_STENCIL_VALUE_MASK = 2963,GL_STENCIL_FAIL = 2964,GL_STENCIL_PASS_DEPTH_FAIL = 2965,GL_STENCIL_PASS_DEPTH_PASS = 2966,GL_STENCIL_REF = 2967,GL_STENCIL_WRITEMASK = 2968,GL_STENCIL_INDEX = 6401,GL_KEEP = 7680,GL_REPLACE = 7681,GL_INCR = 7682,GL_DECR = 7683,GL_NONE = 0,GL_LEFT = 1030,GL_RIGHT = 1031,GL_FRONT_LEFT = 1024,GL_FRONT_RIGHT = 1025,GL_BACK_LEFT = 1026,GL_BACK_RIGHT = 1027,GL_AUX0 = 1033,GL_AUX1 = 1034,GL_AUX2 = 1035,GL_AUX3 = 1036,GL_COLOR_INDEX = 6400,GL_RED = 6403,GL_GREEN = 6404,GL_BLUE = 6405,GL_ALPHA = 6406,GL_LUMINANCE = 6409,GL_LUMINANCE_ALPHA = 6410,GL_ALPHA_BITS = 3413,GL_RED_BITS = 3410,GL_GREEN_BITS = 3411,GL_BLUE_BITS = 3412,GL_INDEX_BITS = 3409,GL_SUBPIXEL_BITS = 3408,GL_AUX_BUFFERS = 3072,GL_READ_BUFFER = 3074,GL_DRAW_BUFFER = 3073,GL_DOUBLEBUFFER = 3122,GL_STEREO = 3123,GL_BITMAP = 6656,GL_COLOR = 6144,GL_DEPTH = 6145,GL_STENCIL = 6146,GL_DITHER = 3024,GL_RGB = 6407,GL_RGBA = 6408,GL_MAX_LIST_NESTING = 2865,GL_MAX_EVAL_ORDER = 3376,GL_MAX_LIGHTS = 3377,GL_MAX_CLIP_PLANES = 3378,GL_MAX_TEXTURE_SIZE = 3379,GL_MAX_PIXEL_MAP_TABLE = 3380,GL_MAX_ATTRIB_STACK_DEPTH = 3381,GL_MAX_MODELVIEW_STACK_DEPTH = 3382,GL_MAX_NAME_STACK_DEPTH = 3383,GL_MAX_PROJECTION_STACK_DEPTH = 3384,GL_MAX_TEXTURE_STACK_DEPTH = 3385,GL_MAX_VIEWPORT_DIMS = 3386,GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387,GL_ATTRIB_STACK_DEPTH = 2992,GL_CLIENT_ATTRIB_STACK_DEPTH = 2993,GL_COLOR_CLEAR_VALUE = 3106,GL_COLOR_WRITEMASK = 3107,GL_CURRENT_INDEX = 2817,GL_CURRENT_COLOR = 2816,GL_CURRENT_NORMAL = 2818,GL_CURRENT_RASTER_COLOR = 2820,GL_CURRENT_RASTER_DISTANCE = 2825,GL_CURRENT_RASTER_INDEX = 2821,GL_CURRENT_RASTER_POSITION = 2823,GL_CURRENT_RASTER_TEXTURE_COORDS = 2822,GL_CURRENT_RASTER_POSITION_VALID = 2824,GL_CURRENT_TEXTURE_COORDS = 2819,GL_INDEX_CLEAR_VALUE = 3104,GL_INDEX_MODE = 3120,GL_INDEX_WRITEMASK = 3105,GL_MODELVIEW_MATRIX = 2982,GL_MODELVIEW_STACK_DEPTH = 2979,GL_NAME_STACK_DEPTH = 3440,GL_PROJECTION_MATRIX = 2983,GL_PROJECTION_STACK_DEPTH = 2980,GL_RENDER_MODE = 3136,GL_RGBA_MODE = 3121,GL_TEXTURE_MATRIX = 2984,GL_TEXTURE_STACK_DEPTH = 2981,GL_VIEWPORT = 2978,GL_AUTO_NORMAL = 3456,GL_MAP1_COLOR_4 = 3472,GL_MAP1_INDEX = 3473,GL_MAP1_NORMAL = 3474,GL_MAP1_TEXTURE_COORD_1 = 3475,GL_MAP1_TEXTURE_COORD_2 = 3476,GL_MAP1_TEXTURE_COORD_3 = 3477,GL_MAP1_TEXTURE_COORD_4 = 3478,GL_MAP1_VERTEX_3 = 3479,GL_MAP1_VERTEX_4 = 3480,GL_MAP2_COLOR_4 = 3504,GL_MAP2_INDEX = 3505,GL_MAP2_NORMAL = 3506,GL_MAP2_TEXTURE_COORD_1 = 3507,GL_MAP2_TEXTURE_COORD_2 = 3508,GL_MAP2_TEXTURE_COORD_3 = 3509,GL_MAP2_TEXTURE_COORD_4 = 3510,GL_MAP2_VERTEX_3 = 3511,GL_MAP2_VERTEX_4 = 3512,GL_MAP1_GRID_DOMAIN = 3536,GL_MAP1_GRID_SEGMENTS = 3537,GL_MAP2_GRID_DOMAIN = 3538,GL_MAP2_GRID_SEGMENTS = 3539,GL_COEFF = 2560,GL_ORDER = 2561,GL_DOMAIN = 2562,GL_PERSPECTIVE_CORRECTION_HINT = 3152,GL_POINT_SMOOTH_HINT = 3153,GL_LINE_SMOOTH_HINT = 3154,GL_POLYGON_SMOOTH_HINT = 3155,GL_FOG_HINT = 3156,GL_DONT_CARE = 4352,GL_FASTEST = 4353,GL_NICEST = 4354,GL_SCISSOR_BOX = 3088,GL_SCISSOR_TEST = 3089,GL_MAP_COLOR = 3344,GL_MAP_STENCIL = 3345,GL_INDEX_SHIFT = 3346,GL_INDEX_OFFSET = 3347,GL_RED_SCALE = 3348,GL_RED_BIAS = 3349,GL_GREEN_SCALE = 3352,GL_GREEN_BIAS = 3353,GL_BLUE_SCALE = 3354,GL_BLUE_BIAS = 3355,GL_ALPHA_SCALE = 3356,GL_ALPHA_BIAS = 3357,GL_DEPTH_SCALE = 3358,GL_DEPTH_BIAS = 3359,GL_PIXEL_MAP_S_TO_S_SIZE = 3249,GL_PIXEL_MAP_I_TO_I_SIZE = 3248,GL_PIXEL_MAP_I_TO_R_SIZE = 3250,GL_PIXEL_MAP_I_TO_G_SIZE = 3251,GL_PIXEL_MAP_I_TO_B_SIZE = 3252,GL_PIXEL_MAP_I_TO_A_SIZE = 3253,GL_PIXEL_MAP_R_TO_R_SIZE = 3254,GL_PIXEL_MAP_G_TO_G_SIZE = 3255,GL_PIXEL_MAP_B_TO_B_SIZE = 3256,GL_PIXEL_MAP_A_TO_A_SIZE = 3257,GL_PIXEL_MAP_S_TO_S = 3185,GL_PIXEL_MAP_I_TO_I = 3184,GL_PIXEL_MAP_I_TO_R = 3186,GL_PIXEL_MAP_I_TO_G = 3187,GL_PIXEL_MAP_I_TO_B = 3188,GL_PIXEL_MAP_I_TO_A = 3189,GL_PIXEL_MAP_R_TO_R = 3190,GL_PIXEL_MAP_G_TO_G = 3191,GL_PIXEL_MAP_B_TO_B = 3192,GL_PIXEL_MAP_A_TO_A = 3193,GL_PACK_ALIGNMENT = 3333,GL_PACK_LSB_FIRST = 3329,GL_PACK_ROW_LENGTH = 3330,GL_PACK_SKIP_PIXELS = 3332,GL_PACK_SKIP_ROWS = 3331,GL_PACK_SWAP_BYTES = 3328,GL_UNPACK_ALIGNMENT = 3317,GL_UNPACK_LSB_FIRST = 3313,GL_UNPACK_ROW_LENGTH = 3314,GL_UNPACK_SKIP_PIXELS = 3316,GL_UNPACK_SKIP_ROWS = 3315,GL_UNPACK_SWAP_BYTES = 3312,GL_ZOOM_X = 3350,GL_ZOOM_Y = 3351,GL_TEXTURE_ENV = 8960,GL_TEXTURE_ENV_MODE = 8704,GL_TEXTURE_1D = 3552,GL_TEXTURE_2D = 3553,GL_TEXTURE_WRAP_S = 10242,GL_TEXTURE_WRAP_T = 10243,GL_TEXTURE_MAG_FILTER = 10240,GL_TEXTURE_MIN_FILTER = 10241,GL_TEXTURE_ENV_COLOR = 8705,GL_TEXTURE_GEN_S = 3168,GL_TEXTURE_GEN_T = 3169,GL_TEXTURE_GEN_MODE = 9472,GL_TEXTURE_BORDER_COLOR = 4100,GL_TEXTURE_WIDTH = 4096,GL_TEXTURE_HEIGHT = 4097,GL_TEXTURE_BORDER = 4101,GL_TEXTURE_COMPONENTS = 4099,GL_TEXTURE_RED_SIZE = 32860,GL_TEXTURE_GREEN_SIZE = 32861,GL_TEXTURE_BLUE_SIZE = 32862,GL_TEXTURE_ALPHA_SIZE = 32863,GL_TEXTURE_LUMINANCE_SIZE = 32864,GL_TEXTURE_INTENSITY_SIZE = 32865,GL_NEAREST_MIPMAP_NEAREST = 9984,GL_NEAREST_MIPMAP_LINEAR = 9986,GL_LINEAR_MIPMAP_NEAREST = 9985,GL_LINEAR_MIPMAP_LINEAR = 9987,GL_OBJECT_LINEAR = 9217,GL_OBJECT_PLANE = 9473,GL_EYE_LINEAR = 9216,GL_EYE_PLANE = 9474,GL_SPHERE_MAP = 9218,GL_DECAL = 8449,GL_MODULATE = 8448,GL_NEAREST = 9728,GL_REPEAT = 10497,GL_CLAMP = 10496,GL_S = 8192,GL_T = 8193,GL_R = 8194,GL_Q = 8195,GL_TEXTURE_GEN_R = 3170,GL_TEXTURE_GEN_Q = 3171,GL_VENDOR = 7936,GL_RENDERER = 7937,GL_VERSION = 7938,GL_EXTENSIONS = 7939,GL_NO_ERROR = 0,GL_INVALID_ENUM = 1280,GL_INVALID_VALUE = 1281,GL_INVALID_OPERATION = 1282,GL_STACK_OVERFLOW = 1283,GL_STACK_UNDERFLOW = 1284,GL_OUT_OF_MEMORY = 1285,GL_CURRENT_BIT = 1,GL_POINT_BIT = 2,GL_LINE_BIT = 4,GL_POLYGON_BIT = 8,GL_POLYGON_STIPPLE_BIT = 16,GL_PIXEL_MODE_BIT = 32,GL_LIGHTING_BIT = 64,GL_FOG_BIT = 128,GL_DEPTH_BUFFER_BIT = 256,GL_ACCUM_BUFFER_BIT = 512,GL_STENCIL_BUFFER_BIT = 1024,GL_VIEWPORT_BIT = 2048,GL_TRANSFORM_BIT = 4096,GL_ENABLE_BIT = 8192,GL_COLOR_BUFFER_BIT = 16384,GL_HINT_BIT = 32768,GL_EVAL_BIT = 65536,GL_LIST_BIT = 131072,GL_TEXTURE_BIT = 262144,GL_SCISSOR_BIT = 524288,GL_ALL_ATTRIB_BITS = 1048575,GL_PROXY_TEXTURE_1D = 32867,GL_PROXY_TEXTURE_2D = 32868,GL_TEXTURE_PRIORITY = 32870,GL_TEXTURE_RESIDENT = 32871,GL_TEXTURE_BINDING_1D = 32872,GL_TEXTURE_BINDING_2D = 32873,GL_TEXTURE_INTERNAL_FORMAT = 4099,GL_ALPHA4 = 32827,GL_ALPHA8 = 32828,GL_ALPHA12 = 32829,GL_ALPHA16 = 32830,GL_LUMINANCE4 = 32831,GL_LUMINANCE8 = 32832,GL_LUMINANCE12 = 32833,GL_LUMINANCE16 = 32834,GL_LUMINANCE4_ALPHA4 = 32835,GL_LUMINANCE6_ALPHA2 = 32836,GL_LUMINANCE8_ALPHA8 = 32837,GL_LUMINANCE12_ALPHA4 = 32838,GL_LUMINANCE12_ALPHA12 = 32839,GL_LUMINANCE16_ALPHA16 = 32840,GL_INTENSITY = 32841,GL_INTENSITY4 = 32842,GL_INTENSITY8 = 32843,GL_INTENSITY12 = 32844,GL_INTENSITY16 = 32845,GL_R3_G3_B2 = 10768,GL_RGB4 = 32847,GL_RGB5 = 32848,GL_RGB8 = 32849,GL_RGB10 = 32850,GL_RGB12 = 32851,GL_RGB16 = 32852,GL_RGBA2 = 32853,GL_RGBA4 = 32854,GL_RGB5_A1 = 32855,GL_RGBA8 = 32856,GL_RGB10_A2 = 32857,GL_RGBA12 = 32858,GL_RGBA16 = 32859,GL_CLIENT_PIXEL_STORE_BIT = 1,GL_CLIENT_VERTEX_ARRAY_BIT = 2,GL_ALL_CLIENT_ATTRIB_BITS = -1,GL_CLIENT_ALL_ATTRIB_BITS = -1,GL_RESCALE_NORMAL = 32826,GL_CLAMP_TO_EDGE = 33071,GL_MAX_ELEMENTS_VERTICES = 33000,GL_MAX_ELEMENTS_INDICES = 33001,GL_BGR = 32992,GL_BGRA = 32993,GL_UNSIGNED_BYTE_3_3_2 = 32818,GL_UNSIGNED_BYTE_2_3_3_REV = 33634,GL_UNSIGNED_SHORT_5_6_5 = 33635,GL_UNSIGNED_SHORT_5_6_5_REV = 33636,GL_UNSIGNED_SHORT_4_4_4_4 = 32819,GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637,GL_UNSIGNED_SHORT_5_5_5_1 = 32820,GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638,GL_UNSIGNED_INT_8_8_8_8 = 32821,GL_UNSIGNED_INT_8_8_8_8_REV = 33639,GL_UNSIGNED_INT_10_10_10_2 = 32822,GL_UNSIGNED_INT_2_10_10_10_REV = 33640,GL_LIGHT_MODEL_COLOR_CONTROL = 33272,GL_SINGLE_COLOR = 33273,GL_SEPARATE_SPECULAR_COLOR = 33274,GL_TEXTURE_MIN_LOD = 33082,GL_TEXTURE_MAX_LOD = 33083,GL_TEXTURE_BASE_LEVEL = 33084,GL_TEXTURE_MAX_LEVEL = 33085,GL_SMOOTH_POINT_SIZE_RANGE = 2834,GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835,GL_SMOOTH_LINE_WIDTH_RANGE = 2850,GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851,GL_ALIASED_POINT_SIZE_RANGE = 33901,GL_ALIASED_LINE_WIDTH_RANGE = 33902,GL_PACK_SKIP_IMAGES = 32875,GL_PACK_IMAGE_HEIGHT = 32876,GL_UNPACK_SKIP_IMAGES = 32877,GL_UNPACK_IMAGE_HEIGHT = 32878,GL_TEXTURE_3D = 32879,GL_PROXY_TEXTURE_3D = 32880,GL_TEXTURE_DEPTH = 32881,GL_TEXTURE_WRAP_R = 32882,GL_MAX_3D_TEXTURE_SIZE = 32883,GL_TEXTURE_BINDING_3D = 32874,GL_CONSTANT_COLOR = 32769,GL_ONE_MINUS_CONSTANT_COLOR = 32770,GL_CONSTANT_ALPHA = 32771,GL_ONE_MINUS_CONSTANT_ALPHA = 32772,GL_COLOR_TABLE = 32976,GL_POST_CONVOLUTION_COLOR_TABLE = 32977,GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978,GL_PROXY_COLOR_TABLE = 32979,GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980,GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981,GL_COLOR_TABLE_SCALE = 32982,GL_COLOR_TABLE_BIAS = 32983,GL_COLOR_TABLE_FORMAT = 32984,GL_COLOR_TABLE_WIDTH = 32985,GL_COLOR_TABLE_RED_SIZE = 32986,GL_COLOR_TABLE_GREEN_SIZE = 32987,GL_COLOR_TABLE_BLUE_SIZE = 32988,GL_COLOR_TABLE_ALPHA_SIZE = 32989,GL_COLOR_TABLE_LUMINANCE_SIZE = 32990,GL_COLOR_TABLE_INTENSITY_SIZE = 32991,GL_CONVOLUTION_1D = 32784,GL_CONVOLUTION_2D = 32785,GL_SEPARABLE_2D = 32786,GL_CONVOLUTION_BORDER_MODE = 32787,GL_CONVOLUTION_FILTER_SCALE = 32788,GL_CONVOLUTION_FILTER_BIAS = 32789,GL_REDUCE = 32790,GL_CONVOLUTION_FORMAT = 32791,GL_CONVOLUTION_WIDTH = 32792,GL_CONVOLUTION_HEIGHT = 32793,GL_MAX_CONVOLUTION_WIDTH = 32794,GL_MAX_CONVOLUTION_HEIGHT = 32795,GL_POST_CONVOLUTION_RED_SCALE = 32796,GL_POST_CONVOLUTION_GREEN_SCALE = 32797,GL_POST_CONVOLUTION_BLUE_SCALE = 32798,GL_POST_CONVOLUTION_ALPHA_SCALE = 32799,GL_POST_CONVOLUTION_RED_BIAS = 32800,GL_POST_CONVOLUTION_GREEN_BIAS = 32801,GL_POST_CONVOLUTION_BLUE_BIAS = 32802,GL_POST_CONVOLUTION_ALPHA_BIAS = 32803,GL_CONSTANT_BORDER = 33105,GL_REPLICATE_BORDER = 33107,GL_CONVOLUTION_BORDER_COLOR = 33108,GL_COLOR_MATRIX = 32945,GL_COLOR_MATRIX_STACK_DEPTH = 32946,GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947,GL_POST_COLOR_MATRIX_RED_SCALE = 32948,GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949,GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950,GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951,GL_POST_COLOR_MATRIX_RED_BIAS = 32952,GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953,GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954,GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955,GL_HISTOGRAM = 32804,GL_PROXY_HISTOGRAM = 32805,GL_HISTOGRAM_WIDTH = 32806,GL_HISTOGRAM_FORMAT = 32807,GL_HISTOGRAM_RED_SIZE = 32808,GL_HISTOGRAM_GREEN_SIZE = 32809,GL_HISTOGRAM_BLUE_SIZE = 32810,GL_HISTOGRAM_ALPHA_SIZE = 32811,GL_HISTOGRAM_LUMINANCE_SIZE = 32812,GL_HISTOGRAM_SINK = 32813,GL_MINMAX = 32814,GL_MINMAX_FORMAT = 32815,GL_MINMAX_SINK = 32816,GL_TABLE_TOO_LARGE = 32817,GL_BLEND_EQUATION = 32777,GL_MIN = 32775,GL_MAX = 32776,GL_FUNC_ADD = 32774,GL_FUNC_SUBTRACT = 32778,GL_FUNC_REVERSE_SUBTRACT = 32779,GL_BLEND_COLOR = 32773,GL_TEXTURE0 = 33984,GL_TEXTURE1 = 33985,GL_TEXTURE2 = 33986,GL_TEXTURE3 = 33987,GL_TEXTURE4 = 33988,GL_TEXTURE5 = 33989,GL_TEXTURE6 = 33990,GL_TEXTURE7 = 33991,GL_TEXTURE8 = 33992,GL_TEXTURE9 = 33993,GL_TEXTURE10 = 33994,GL_TEXTURE11 = 33995,GL_TEXTURE12 = 33996,GL_TEXTURE13 = 33997,GL_TEXTURE14 = 33998,GL_TEXTURE15 = 33999,GL_TEXTURE16 = 34000,GL_TEXTURE17 = 34001,GL_TEXTURE18 = 34002,GL_TEXTURE19 = 34003,GL_TEXTURE20 = 34004,GL_TEXTURE21 = 34005,GL_TEXTURE22 = 34006,GL_TEXTURE23 = 34007,GL_TEXTURE24 = 34008,GL_TEXTURE25 = 34009,GL_TEXTURE26 = 34010,GL_TEXTURE27 = 34011,GL_TEXTURE28 = 34012,GL_TEXTURE29 = 34013,GL_TEXTURE30 = 34014,GL_TEXTURE31 = 34015,GL_ACTIVE_TEXTURE = 34016,GL_CLIENT_ACTIVE_TEXTURE = 34017,GL_MAX_TEXTURE_UNITS = 34018,GL_NORMAL_MAP = 34065,GL_REFLECTION_MAP = 34066,GL_TEXTURE_CUBE_MAP = 34067,GL_TEXTURE_BINDING_CUBE_MAP = 34068,GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069,GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,GL_PROXY_TEXTURE_CUBE_MAP = 34075,GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076,GL_COMPRESSED_ALPHA = 34025,GL_COMPRESSED_LUMINANCE = 34026,GL_COMPRESSED_LUMINANCE_ALPHA = 34027,GL_COMPRESSED_INTENSITY = 34028,GL_COMPRESSED_RGB = 34029,GL_COMPRESSED_RGBA = 34030,GL_TEXTURE_COMPRESSION_HINT = 34031,GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464,GL_TEXTURE_COMPRESSED = 34465,GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466,GL_COMPRESSED_TEXTURE_FORMATS = 34467,GL_MULTISAMPLE = 32925,GL_SAMPLE_ALPHA_TO_COVERAGE = 32926,GL_SAMPLE_ALPHA_TO_ONE = 32927,GL_SAMPLE_COVERAGE = 32928,GL_SAMPLE_BUFFERS = 32936,GL_SAMPLES = 32937,GL_SAMPLE_COVERAGE_VALUE = 32938,GL_SAMPLE_COVERAGE_INVERT = 32939,GL_MULTISAMPLE_BIT = 536870912,GL_TRANSPOSE_MODELVIEW_MATRIX = 34019,GL_TRANSPOSE_PROJECTION_MATRIX = 34020,GL_TRANSPOSE_TEXTURE_MATRIX = 34021,GL_TRANSPOSE_COLOR_MATRIX = 34022,GL_COMBINE = 34160,GL_COMBINE_RGB = 34161,GL_COMBINE_ALPHA = 34162,GL_SOURCE0_RGB = 34176,GL_SOURCE1_RGB = 34177,GL_SOURCE2_RGB = 34178,GL_SOURCE0_ALPHA = 34184,GL_SOURCE1_ALPHA = 34185,GL_SOURCE2_ALPHA = 34186,GL_OPERAND0_RGB = 34192,GL_OPERAND1_RGB = 34193,GL_OPERAND2_RGB = 34194,GL_OPERAND0_ALPHA = 34200,GL_OPERAND1_ALPHA = 34201,GL_OPERAND2_ALPHA = 34202,GL_RGB_SCALE = 34163,GL_ADD_SIGNED = 34164,GL_INTERPOLATE = 34165,GL_SUBTRACT = 34023,GL_CONSTANT = 34166,GL_PRIMARY_COLOR = 34167,GL_PREVIOUS = 34168,GL_DOT3_RGB = 34478,GL_DOT3_RGBA = 34479,GL_CLAMP_TO_BORDER = 33069,GL_ARB_multitexture = 1,GL_TEXTURE0_ARB = 33984,GL_TEXTURE1_ARB = 33985,GL_TEXTURE2_ARB = 33986,GL_TEXTURE3_ARB = 33987,GL_TEXTURE4_ARB = 33988,GL_TEXTURE5_ARB = 33989,GL_TEXTURE6_ARB = 33990,GL_TEXTURE7_ARB = 33991,GL_TEXTURE8_ARB = 33992,GL_TEXTURE9_ARB = 33993,GL_TEXTURE10_ARB = 33994,GL_TEXTURE11_ARB = 33995,GL_TEXTURE12_ARB = 33996,GL_TEXTURE13_ARB = 33997,GL_TEXTURE14_ARB = 33998,GL_TEXTURE15_ARB = 33999,GL_TEXTURE16_ARB = 34000,GL_TEXTURE17_ARB = 34001,GL_TEXTURE18_ARB = 34002,GL_TEXTURE19_ARB = 34003,GL_TEXTURE20_ARB = 34004,GL_TEXTURE21_ARB = 34005,GL_TEXTURE22_ARB = 34006,GL_TEXTURE23_ARB = 34007,GL_TEXTURE24_ARB = 34008,GL_TEXTURE25_ARB = 34009,GL_TEXTURE26_ARB = 34010,GL_TEXTURE27_ARB = 34011,GL_TEXTURE28_ARB = 34012,GL_TEXTURE29_ARB = 34013,GL_TEXTURE30_ARB = 34014,GL_TEXTURE31_ARB = 34015,GL_ACTIVE_TEXTURE_ARB = 34016,GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017,GL_MAX_TEXTURE_UNITS_ARB = 34018,GL_GLEXT_VERSION = 34,GL_BLEND_DST_RGB = 32968,GL_BLEND_SRC_RGB = 32969,GL_BLEND_DST_ALPHA = 32970,GL_BLEND_SRC_ALPHA = 32971,GL_POINT_SIZE_MIN = 33062,GL_POINT_SIZE_MAX = 33063,GL_POINT_FADE_THRESHOLD_SIZE = 33064,GL_POINT_DISTANCE_ATTENUATION = 33065,GL_GENERATE_MIPMAP = 33169,GL_GENERATE_MIPMAP_HINT = 33170,GL_DEPTH_COMPONENT16 = 33189,GL_DEPTH_COMPONENT24 = 33190,GL_DEPTH_COMPONENT32 = 33191,GL_MIRRORED_REPEAT = 33648,GL_FOG_COORDINATE_SOURCE = 33872,GL_FOG_COORDINATE = 33873,GL_FRAGMENT_DEPTH = 33874,GL_CURRENT_FOG_COORDINATE = 33875,GL_FOG_COORDINATE_ARRAY_TYPE = 33876,GL_FOG_COORDINATE_ARRAY_STRIDE = 33877,GL_FOG_COORDINATE_ARRAY_POINTER = 33878,GL_FOG_COORDINATE_ARRAY = 33879,GL_COLOR_SUM = 33880,GL_CURRENT_SECONDARY_COLOR = 33881,GL_SECONDARY_COLOR_ARRAY_SIZE = 33882,GL_SECONDARY_COLOR_ARRAY_TYPE = 33883,GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884,GL_SECONDARY_COLOR_ARRAY_POINTER = 33885,GL_SECONDARY_COLOR_ARRAY = 33886,GL_MAX_TEXTURE_LOD_BIAS = 34045,GL_TEXTURE_FILTER_CONTROL = 34048,GL_TEXTURE_LOD_BIAS = 34049,GL_INCR_WRAP = 34055,GL_DECR_WRAP = 34056,GL_TEXTURE_DEPTH_SIZE = 34890,GL_DEPTH_TEXTURE_MODE = 34891,GL_TEXTURE_COMPARE_MODE = 34892,GL_TEXTURE_COMPARE_FUNC = 34893,GL_COMPARE_R_TO_TEXTURE = 34894,GL_BUFFER_SIZE = 34660,GL_BUFFER_USAGE = 34661,GL_QUERY_COUNTER_BITS = 34916,GL_CURRENT_QUERY = 34917,GL_QUERY_RESULT = 34918,GL_QUERY_RESULT_AVAILABLE = 34919,GL_ARRAY_BUFFER = 34962,GL_ELEMENT_ARRAY_BUFFER = 34963,GL_ARRAY_BUFFER_BINDING = 34964,GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965,GL_VERTEX_ARRAY_BUFFER_BINDING = 34966,GL_NORMAL_ARRAY_BUFFER_BINDING = 34967,GL_COLOR_ARRAY_BUFFER_BINDING = 34968,GL_INDEX_ARRAY_BUFFER_BINDING = 34969,GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970,GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971,GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972,GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973,GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974,GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975,GL_READ_ONLY = 35000,GL_WRITE_ONLY = 35001,GL_READ_WRITE = 35002,GL_BUFFER_ACCESS = 35003,GL_BUFFER_MAPPED = 35004,GL_BUFFER_MAP_POINTER = 35005,GL_STREAM_DRAW = 35040,GL_STREAM_READ = 35041,GL_STREAM_COPY = 35042,GL_STATIC_DRAW = 35044,GL_STATIC_READ = 35045,GL_STATIC_COPY = 35046,GL_DYNAMIC_DRAW = 35048,GL_DYNAMIC_READ = 35049,GL_DYNAMIC_COPY = 35050,GL_SAMPLES_PASSED = 35092,GL_FOG_COORD_SRC = 33872,GL_FOG_COORD = 33873,GL_CURRENT_FOG_COORD = 33875,GL_FOG_COORD_ARRAY_TYPE = 33876,GL_FOG_COORD_ARRAY_STRIDE = 33877,GL_FOG_COORD_ARRAY_POINTER = 33878,GL_FOG_COORD_ARRAY = 33879,GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973,GL_SRC0_RGB = 34176,GL_SRC1_RGB = 34177,GL_SRC2_RGB = 34178,GL_SRC0_ALPHA = 34184,GL_SRC1_ALPHA = 34185,GL_SRC2_ALPHA = 34186,GL_BLEND_EQUATION_RGB = 32777,GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338,GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339,GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340,GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341,GL_CURRENT_VERTEX_ATTRIB = 34342,GL_VERTEX_PROGRAM_POINT_SIZE = 34370,GL_VERTEX_PROGRAM_TWO_SIDE = 34371,GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373,GL_STENCIL_BACK_FUNC = 34816,GL_STENCIL_BACK_FAIL = 34817,GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818,GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819,GL_MAX_DRAW_BUFFERS = 34852,GL_DRAW_BUFFER0 = 34853,GL_DRAW_BUFFER1 = 34854,GL_DRAW_BUFFER2 = 34855,GL_DRAW_BUFFER3 = 34856,GL_DRAW_BUFFER4 = 34857,GL_DRAW_BUFFER5 = 34858,GL_DRAW_BUFFER6 = 34859,GL_DRAW_BUFFER7 = 34860,GL_DRAW_BUFFER8 = 34861,GL_DRAW_BUFFER9 = 34862,GL_DRAW_BUFFER10 = 34863,GL_DRAW_BUFFER11 = 34864,GL_DRAW_BUFFER12 = 34865,GL_DRAW_BUFFER13 = 34866,GL_DRAW_BUFFER14 = 34867,GL_DRAW_BUFFER15 = 34868,GL_BLEND_EQUATION_ALPHA = 34877,GL_POINT_SPRITE = 34913,GL_COORD_REPLACE = 34914,GL_MAX_VERTEX_ATTRIBS = 34921,GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922,GL_MAX_TEXTURE_COORDS = 34929,GL_MAX_TEXTURE_IMAGE_UNITS = 34930,GL_FRAGMENT_SHADER = 35632,GL_VERTEX_SHADER = 35633,GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657,GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658,GL_MAX_VARYING_FLOATS = 35659,GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660,GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661,GL_SHADER_TYPE = 35663,GL_FLOAT_VEC2 = 35664,GL_FLOAT_VEC3 = 35665,GL_FLOAT_VEC4 = 35666,GL_INT_VEC2 = 35667,GL_INT_VEC3 = 35668,GL_INT_VEC4 = 35669,GL_BOOL = 35670,GL_BOOL_VEC2 = 35671,GL_BOOL_VEC3 = 35672,GL_BOOL_VEC4 = 35673,GL_FLOAT_MAT2 = 35674,GL_FLOAT_MAT3 = 35675,GL_FLOAT_MAT4 = 35676,GL_SAMPLER_1D = 35677,GL_SAMPLER_2D = 35678,GL_SAMPLER_3D = 35679,GL_SAMPLER_CUBE = 35680,GL_SAMPLER_1D_SHADOW = 35681,GL_SAMPLER_2D_SHADOW = 35682,GL_DELETE_STATUS = 35712,GL_COMPILE_STATUS = 35713,GL_LINK_STATUS = 35714,GL_VALIDATE_STATUS = 35715,GL_INFO_LOG_LENGTH = 35716,GL_ATTACHED_SHADERS = 35717,GL_ACTIVE_UNIFORMS = 35718,GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719,GL_SHADER_SOURCE_LENGTH = 35720,GL_ACTIVE_ATTRIBUTES = 35721,GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722,GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723,GL_SHADING_LANGUAGE_VERSION = 35724,GL_CURRENT_PROGRAM = 35725,GL_POINT_SPRITE_COORD_ORIGIN = 36000,GL_LOWER_LEFT = 36001,GL_UPPER_LEFT = 36002,GL_STENCIL_BACK_REF = 36003,GL_STENCIL_BACK_VALUE_MASK = 36004,GL_STENCIL_BACK_WRITEMASK = 36005,GL_CURRENT_RASTER_SECONDARY_COLOR = 33887,GL_PIXEL_PACK_BUFFER = 35051,GL_PIXEL_UNPACK_BUFFER = 35052,GL_PIXEL_PACK_BUFFER_BINDING = 35053,GL_PIXEL_UNPACK_BUFFER_BINDING = 35055,GL_FLOAT_MAT2x3 = 35685,GL_FLOAT_MAT2x4 = 35686,GL_FLOAT_MAT3x2 = 35687,GL_FLOAT_MAT3x4 = 35688,GL_FLOAT_MAT4x2 = 35689,GL_FLOAT_MAT4x3 = 35690,GL_SRGB = 35904,GL_SRGB8 = 35905,GL_SRGB_ALPHA = 35906,GL_SRGB8_ALPHA8 = 35907,GL_SLUMINANCE_ALPHA = 35908,GL_SLUMINANCE8_ALPHA8 = 35909,GL_SLUMINANCE = 35910,GL_SLUMINANCE8 = 35911,GL_COMPRESSED_SRGB = 35912,GL_COMPRESSED_SRGB_ALPHA = 35913,GL_COMPRESSED_SLUMINANCE = 35914,GL_COMPRESSED_SLUMINANCE_ALPHA = 35915,GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019,GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 34020,GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 34021,GL_TRANSPOSE_COLOR_MATRIX_ARB = 34022,GL_MULTISAMPLE_ARB = 32925,GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926,GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927,GL_SAMPLE_COVERAGE_ARB = 32928,GL_SAMPLE_BUFFERS_ARB = 32936,GL_SAMPLES_ARB = 32937,GL_SAMPLE_COVERAGE_VALUE_ARB = 32938,GL_SAMPLE_COVERAGE_INVERT_ARB = 32939,GL_MULTISAMPLE_BIT_ARB = 536870912,GL_NORMAL_MAP_ARB = 34065,GL_REFLECTION_MAP_ARB = 34066,GL_TEXTURE_CUBE_MAP_ARB = 34067,GL_TEXTURE_BINDING_CUBE_MAP_ARB = 34068,GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069,GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070,GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071,GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072,GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073,GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074,GL_PROXY_TEXTURE_CUBE_MAP_ARB = 34075,GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076,GL_COMPRESSED_ALPHA_ARB = 34025,GL_COMPRESSED_LUMINANCE_ARB = 34026,GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027,GL_COMPRESSED_INTENSITY_ARB = 34028,GL_COMPRESSED_RGB_ARB = 34029,GL_COMPRESSED_RGBA_ARB = 34030,GL_TEXTURE_COMPRESSION_HINT_ARB = 34031,GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464,GL_TEXTURE_COMPRESSED_ARB = 34465,GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466,GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467,GL_CLAMP_TO_BORDER_ARB = 33069,GL_POINT_SIZE_MIN_ARB = 33062,GL_POINT_SIZE_MAX_ARB = 33063,GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064,GL_POINT_DISTANCE_ATTENUATION_ARB = 33065,GL_MAX_VERTEX_UNITS_ARB = 34468,GL_ACTIVE_VERTEX_UNITS_ARB = 34469,GL_WEIGHT_SUM_UNITY_ARB = 34470,GL_VERTEX_BLEND_ARB = 34471,GL_CURRENT_WEIGHT_ARB = 34472,GL_WEIGHT_ARRAY_TYPE_ARB = 34473,GL_WEIGHT_ARRAY_STRIDE_ARB = 34474,GL_WEIGHT_ARRAY_SIZE_ARB = 34475,GL_WEIGHT_ARRAY_POINTER_ARB = 34476,GL_WEIGHT_ARRAY_ARB = 34477,GL_MODELVIEW0_ARB = 5888,GL_MODELVIEW1_ARB = 34058,GL_MODELVIEW2_ARB = 34594,GL_MODELVIEW3_ARB = 34595,GL_MODELVIEW4_ARB = 34596,GL_MODELVIEW5_ARB = 34597,GL_MODELVIEW6_ARB = 34598,GL_MODELVIEW7_ARB = 34599,GL_MODELVIEW8_ARB = 34600,GL_MODELVIEW9_ARB = 34601,GL_MODELVIEW10_ARB = 34602,GL_MODELVIEW11_ARB = 34603,GL_MODELVIEW12_ARB = 34604,GL_MODELVIEW13_ARB = 34605,GL_MODELVIEW14_ARB = 34606,GL_MODELVIEW15_ARB = 34607,GL_MODELVIEW16_ARB = 34608,GL_MODELVIEW17_ARB = 34609,GL_MODELVIEW18_ARB = 34610,GL_MODELVIEW19_ARB = 34611,GL_MODELVIEW20_ARB = 34612,GL_MODELVIEW21_ARB = 34613,GL_MODELVIEW22_ARB = 34614,GL_MODELVIEW23_ARB = 34615,GL_MODELVIEW24_ARB = 34616,GL_MODELVIEW25_ARB = 34617,GL_MODELVIEW26_ARB = 34618,GL_MODELVIEW27_ARB = 34619,GL_MODELVIEW28_ARB = 34620,GL_MODELVIEW29_ARB = 34621,GL_MODELVIEW30_ARB = 34622,GL_MODELVIEW31_ARB = 34623,GL_MATRIX_PALETTE_ARB = 34880,GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881,GL_MAX_PALETTE_MATRICES_ARB = 34882,GL_CURRENT_PALETTE_MATRIX_ARB = 34883,GL_MATRIX_INDEX_ARRAY_ARB = 34884,GL_CURRENT_MATRIX_INDEX_ARB = 34885,GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 34886,GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 34887,GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888,GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 34889,GL_COMBINE_ARB = 34160,GL_COMBINE_RGB_ARB = 34161,GL_COMBINE_ALPHA_ARB = 34162,GL_SOURCE0_RGB_ARB = 34176,GL_SOURCE1_RGB_ARB = 34177,GL_SOURCE2_RGB_ARB = 34178,GL_SOURCE0_ALPHA_ARB = 34184,GL_SOURCE1_ALPHA_ARB = 34185,GL_SOURCE2_ALPHA_ARB = 34186,GL_OPERAND0_RGB_ARB = 34192,GL_OPERAND1_RGB_ARB = 34193,GL_OPERAND2_RGB_ARB = 34194,GL_OPERAND0_ALPHA_ARB = 34200,GL_OPERAND1_ALPHA_ARB = 34201,GL_OPERAND2_ALPHA_ARB = 34202,GL_RGB_SCALE_ARB = 34163,GL_ADD_SIGNED_ARB = 34164,GL_INTERPOLATE_ARB = 34165,GL_SUBTRACT_ARB = 34023,GL_CONSTANT_ARB = 34166,GL_PRIMARY_COLOR_ARB = 34167,GL_PREVIOUS_ARB = 34168,GL_DOT3_RGB_ARB = 34478,GL_DOT3_RGBA_ARB = 34479,GL_MIRRORED_REPEAT_ARB = 33648,GL_DEPTH_COMPONENT16_ARB = 33189,GL_DEPTH_COMPONENT24_ARB = 33190,GL_DEPTH_COMPONENT32_ARB = 33191,GL_TEXTURE_DEPTH_SIZE_ARB = 34890,GL_DEPTH_TEXTURE_MODE_ARB = 34891,GL_TEXTURE_COMPARE_MODE_ARB = 34892,GL_TEXTURE_COMPARE_FUNC_ARB = 34893,GL_COMPARE_R_TO_TEXTURE_ARB = 34894,GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959,GL_COLOR_SUM_ARB = 33880,GL_VERTEX_PROGRAM_ARB = 34336,GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338,GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339,GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340,GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341,GL_CURRENT_VERTEX_ATTRIB_ARB = 34342,GL_PROGRAM_LENGTH_ARB = 34343,GL_PROGRAM_STRING_ARB = 34344,GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350,GL_MAX_PROGRAM_MATRICES_ARB = 34351,GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368,GL_CURRENT_MATRIX_ARB = 34369,GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370,GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371,GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373,GL_PROGRAM_ERROR_POSITION_ARB = 34379,GL_PROGRAM_BINDING_ARB = 34423,GL_MAX_VERTEX_ATTRIBS_ARB = 34921,GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922,GL_PROGRAM_ERROR_STRING_ARB = 34932,GL_PROGRAM_FORMAT_ASCII_ARB = 34933,GL_PROGRAM_FORMAT_ARB = 34934,GL_PROGRAM_INSTRUCTIONS_ARB = 34976,GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977,GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978,GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979,GL_PROGRAM_TEMPORARIES_ARB = 34980,GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981,GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982,GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983,GL_PROGRAM_PARAMETERS_ARB = 34984,GL_MAX_PROGRAM_PARAMETERS_ARB = 34985,GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986,GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987,GL_PROGRAM_ATTRIBS_ARB = 34988,GL_MAX_PROGRAM_ATTRIBS_ARB = 34989,GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990,GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991,GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992,GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993,GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994,GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995,GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996,GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997,GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998,GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999,GL_MATRIX0_ARB = 35008,GL_MATRIX1_ARB = 35009,GL_MATRIX2_ARB = 35010,GL_MATRIX3_ARB = 35011,GL_MATRIX4_ARB = 35012,GL_MATRIX5_ARB = 35013,GL_MATRIX6_ARB = 35014,GL_MATRIX7_ARB = 35015,GL_MATRIX8_ARB = 35016,GL_MATRIX9_ARB = 35017,GL_MATRIX10_ARB = 35018,GL_MATRIX11_ARB = 35019,GL_MATRIX12_ARB = 35020,GL_MATRIX13_ARB = 35021,GL_MATRIX14_ARB = 35022,GL_MATRIX15_ARB = 35023,GL_MATRIX16_ARB = 35024,GL_MATRIX17_ARB = 35025,GL_MATRIX18_ARB = 35026,GL_MATRIX19_ARB = 35027,GL_MATRIX20_ARB = 35028,GL_MATRIX21_ARB = 35029,GL_MATRIX22_ARB = 35030,GL_MATRIX23_ARB = 35031,GL_MATRIX24_ARB = 35032,GL_MATRIX25_ARB = 35033,GL_MATRIX26_ARB = 35034,GL_MATRIX27_ARB = 35035,GL_MATRIX28_ARB = 35036,GL_MATRIX29_ARB = 35037,GL_MATRIX30_ARB = 35038,GL_MATRIX31_ARB = 35039,GL_FRAGMENT_PROGRAM_ARB = 34820,GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821,GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822,GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823,GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824,GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825,GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826,GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827,GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828,GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829,GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830,GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831,GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832,GL_MAX_TEXTURE_COORDS_ARB = 34929,GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930,GL_BUFFER_SIZE_ARB = 34660,GL_BUFFER_USAGE_ARB = 34661,GL_ARRAY_BUFFER_ARB = 34962,GL_ELEMENT_ARRAY_BUFFER_ARB = 34963,GL_ARRAY_BUFFER_BINDING_ARB = 34964,GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965,GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966,GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967,GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968,GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969,GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970,GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971,GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972,GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973,GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974,GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975,GL_READ_ONLY_ARB = 35000,GL_WRITE_ONLY_ARB = 35001,GL_READ_WRITE_ARB = 35002,GL_BUFFER_ACCESS_ARB = 35003,GL_BUFFER_MAPPED_ARB = 35004,GL_BUFFER_MAP_POINTER_ARB = 35005,GL_STREAM_DRAW_ARB = 35040,GL_STREAM_READ_ARB = 35041,GL_STREAM_COPY_ARB = 35042,GL_STATIC_DRAW_ARB = 35044,GL_STATIC_READ_ARB = 35045,GL_STATIC_COPY_ARB = 35046,GL_DYNAMIC_DRAW_ARB = 35048,GL_DYNAMIC_READ_ARB = 35049,GL_DYNAMIC_COPY_ARB = 35050,GL_QUERY_COUNTER_BITS_ARB = 34916,GL_CURRENT_QUERY_ARB = 34917,GL_QUERY_RESULT_ARB = 34918,GL_QUERY_RESULT_AVAILABLE_ARB = 34919,GL_SAMPLES_PASSED_ARB = 35092,GL_PROGRAM_OBJECT_ARB = 35648,GL_SHADER_OBJECT_ARB = 35656,GL_OBJECT_TYPE_ARB = 35662,GL_OBJECT_SUBTYPE_ARB = 35663,GL_FLOAT_VEC2_ARB = 35664,GL_FLOAT_VEC3_ARB = 35665,GL_FLOAT_VEC4_ARB = 35666,GL_INT_VEC2_ARB = 35667,GL_INT_VEC3_ARB = 35668,GL_INT_VEC4_ARB = 35669,GL_BOOL_ARB = 35670,GL_BOOL_VEC2_ARB = 35671,GL_BOOL_VEC3_ARB = 35672,GL_BOOL_VEC4_ARB = 35673,GL_FLOAT_MAT2_ARB = 35674,GL_FLOAT_MAT3_ARB = 35675,GL_FLOAT_MAT4_ARB = 35676,GL_SAMPLER_1D_ARB = 35677,GL_SAMPLER_2D_ARB = 35678,GL_SAMPLER_3D_ARB = 35679,GL_SAMPLER_CUBE_ARB = 35680,GL_SAMPLER_1D_SHADOW_ARB = 35681,GL_SAMPLER_2D_SHADOW_ARB = 35682,GL_SAMPLER_2D_RECT_ARB = 35683,GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684,GL_OBJECT_DELETE_STATUS_ARB = 35712,GL_OBJECT_COMPILE_STATUS_ARB = 35713,GL_OBJECT_LINK_STATUS_ARB = 35714,GL_OBJECT_VALIDATE_STATUS_ARB = 35715,GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716,GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717,GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718,GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719,GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720,GL_VERTEX_SHADER_ARB = 35633,GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658,GL_MAX_VARYING_FLOATS_ARB = 35659,GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660,GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661,GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721,GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722,GL_FRAGMENT_SHADER_ARB = 35632,GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657,GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723,GL_SHADING_LANGUAGE_VERSION_ARB = 35724,GL_POINT_SPRITE_ARB = 34913,GL_COORD_REPLACE_ARB = 34914,GL_MAX_DRAW_BUFFERS_ARB = 34852,GL_DRAW_BUFFER0_ARB = 34853,GL_DRAW_BUFFER1_ARB = 34854,GL_DRAW_BUFFER2_ARB = 34855,GL_DRAW_BUFFER3_ARB = 34856,GL_DRAW_BUFFER4_ARB = 34857,GL_DRAW_BUFFER5_ARB = 34858,GL_DRAW_BUFFER6_ARB = 34859,GL_DRAW_BUFFER7_ARB = 34860,GL_DRAW_BUFFER8_ARB = 34861,GL_DRAW_BUFFER9_ARB = 34862,GL_DRAW_BUFFER10_ARB = 34863,GL_DRAW_BUFFER11_ARB = 34864,GL_DRAW_BUFFER12_ARB = 34865,GL_DRAW_BUFFER13_ARB = 34866,GL_DRAW_BUFFER14_ARB = 34867,GL_DRAW_BUFFER15_ARB = 34868,GL_TEXTURE_RECTANGLE_ARB = 34037,GL_TEXTURE_BINDING_RECTANGLE_ARB = 34038,GL_PROXY_TEXTURE_RECTANGLE_ARB = 34039,GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040,GL_RGBA_FLOAT_MODE_ARB = 34848,GL_CLAMP_VERTEX_COLOR_ARB = 35098,GL_CLAMP_FRAGMENT_COLOR_ARB = 35099,GL_CLAMP_READ_COLOR_ARB = 35100,GL_FIXED_ONLY_ARB = 35101,GL_HALF_FLOAT_ARB = 5131,GL_TEXTURE_RED_TYPE_ARB = 35856,GL_TEXTURE_GREEN_TYPE_ARB = 35857,GL_TEXTURE_BLUE_TYPE_ARB = 35858,GL_TEXTURE_ALPHA_TYPE_ARB = 35859,GL_TEXTURE_LUMINANCE_TYPE_ARB = 35860,GL_TEXTURE_INTENSITY_TYPE_ARB = 35861,GL_TEXTURE_DEPTH_TYPE_ARB = 35862,GL_UNSIGNED_NORMALIZED_ARB = 35863,GL_RGBA32F_ARB = 34836,GL_RGB32F_ARB = 34837,GL_ALPHA32F_ARB = 34838,GL_INTENSITY32F_ARB = 34839,GL_LUMINANCE32F_ARB = 34840,GL_LUMINANCE_ALPHA32F_ARB = 34841,GL_RGBA16F_ARB = 34842,GL_RGB16F_ARB = 34843,GL_ALPHA16F_ARB = 34844,GL_INTENSITY16F_ARB = 34845,GL_LUMINANCE16F_ARB = 34846,GL_LUMINANCE_ALPHA16F_ARB = 34847,GL_PIXEL_PACK_BUFFER_ARB = 35051,GL_PIXEL_UNPACK_BUFFER_ARB = 35052,GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053,GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055,GL_ABGR_EXT = 32768,GL_CONSTANT_COLOR_EXT = 32769,GL_ONE_MINUS_CONSTANT_COLOR_EXT = 32770,GL_CONSTANT_ALPHA_EXT = 32771,GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 32772,GL_BLEND_COLOR_EXT = 32773,GL_POLYGON_OFFSET_EXT = 32823,GL_POLYGON_OFFSET_FACTOR_EXT = 32824,GL_POLYGON_OFFSET_BIAS_EXT = 32825,GL_ALPHA4_EXT = 32827,GL_ALPHA8_EXT = 32828,GL_ALPHA12_EXT = 32829,GL_ALPHA16_EXT = 32830,GL_LUMINANCE4_EXT = 32831,GL_LUMINANCE8_EXT = 32832,GL_LUMINANCE12_EXT = 32833,GL_LUMINANCE16_EXT = 32834,GL_LUMINANCE4_ALPHA4_EXT = 32835,GL_LUMINANCE6_ALPHA2_EXT = 32836,GL_LUMINANCE8_ALPHA8_EXT = 32837,GL_LUMINANCE12_ALPHA4_EXT = 32838,GL_LUMINANCE12_ALPHA12_EXT = 32839,GL_LUMINANCE16_ALPHA16_EXT = 32840,GL_INTENSITY_EXT = 32841,GL_INTENSITY4_EXT = 32842,GL_INTENSITY8_EXT = 32843,GL_INTENSITY12_EXT = 32844,GL_INTENSITY16_EXT = 32845,GL_RGB2_EXT = 32846,GL_RGB4_EXT = 32847,GL_RGB5_EXT = 32848,GL_RGB8_EXT = 32849,GL_RGB10_EXT = 32850,GL_RGB12_EXT = 32851,GL_RGB16_EXT = 32852,GL_RGBA2_EXT = 32853,GL_RGBA4_EXT = 32854,GL_RGB5_A1_EXT = 32855,GL_RGBA8_EXT = 32856,GL_RGB10_A2_EXT = 32857,GL_RGBA12_EXT = 32858,GL_RGBA16_EXT = 32859,GL_TEXTURE_RED_SIZE_EXT = 32860,GL_TEXTURE_GREEN_SIZE_EXT = 32861,GL_TEXTURE_BLUE_SIZE_EXT = 32862,GL_TEXTURE_ALPHA_SIZE_EXT = 32863,GL_TEXTURE_LUMINANCE_SIZE_EXT = 32864,GL_TEXTURE_INTENSITY_SIZE_EXT = 32865,GL_REPLACE_EXT = 32866,GL_PROXY_TEXTURE_1D_EXT = 32867,GL_PROXY_TEXTURE_2D_EXT = 32868,GL_TEXTURE_TOO_LARGE_EXT = 32869,GL_PACK_SKIP_IMAGES_EXT = 32875,GL_PACK_IMAGE_HEIGHT_EXT = 32876,GL_UNPACK_SKIP_IMAGES_EXT = 32877,GL_UNPACK_IMAGE_HEIGHT_EXT = 32878,GL_TEXTURE_3D_EXT = 32879,GL_PROXY_TEXTURE_3D_EXT = 32880,GL_TEXTURE_DEPTH_EXT = 32881,GL_TEXTURE_WRAP_R_EXT = 32882,GL_MAX_3D_TEXTURE_SIZE_EXT = 32883,GL_FILTER4_SGIS = 33094,GL_TEXTURE_FILTER4_SIZE_SGIS = 33095,GL_HISTOGRAM_EXT = 32804,GL_PROXY_HISTOGRAM_EXT = 32805,GL_HISTOGRAM_WIDTH_EXT = 32806,GL_HISTOGRAM_FORMAT_EXT = 32807,GL_HISTOGRAM_RED_SIZE_EXT = 32808,GL_HISTOGRAM_GREEN_SIZE_EXT = 32809,GL_HISTOGRAM_BLUE_SIZE_EXT = 32810,GL_HISTOGRAM_ALPHA_SIZE_EXT = 32811,GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 32812,GL_HISTOGRAM_SINK_EXT = 32813,GL_MINMAX_EXT = 32814,GL_MINMAX_FORMAT_EXT = 32815,GL_MINMAX_SINK_EXT = 32816,GL_TABLE_TOO_LARGE_EXT = 32817,GL_CONVOLUTION_1D_EXT = 32784,GL_CONVOLUTION_2D_EXT = 32785,GL_SEPARABLE_2D_EXT = 32786,GL_CONVOLUTION_BORDER_MODE_EXT = 32787,GL_CONVOLUTION_FILTER_SCALE_EXT = 32788,GL_CONVOLUTION_FILTER_BIAS_EXT = 32789,GL_REDUCE_EXT = 32790,GL_CONVOLUTION_FORMAT_EXT = 32791,GL_CONVOLUTION_WIDTH_EXT = 32792,GL_CONVOLUTION_HEIGHT_EXT = 32793,GL_MAX_CONVOLUTION_WIDTH_EXT = 32794,GL_MAX_CONVOLUTION_HEIGHT_EXT = 32795,GL_POST_CONVOLUTION_RED_SCALE_EXT = 32796,GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 32797,GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 32798,GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 32799,GL_POST_CONVOLUTION_RED_BIAS_EXT = 32800,GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 32801,GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 32802,GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 32803,GL_COLOR_MATRIX_SGI = 32945,GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946,GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947,GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948,GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949,GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950,GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951,GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952,GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953,GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954,GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955,GL_COLOR_TABLE_SGI = 32976,GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 32977,GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32978,GL_PROXY_COLOR_TABLE_SGI = 32979,GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 32980,GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32981,GL_COLOR_TABLE_SCALE_SGI = 32982,GL_COLOR_TABLE_BIAS_SGI = 32983,GL_COLOR_TABLE_FORMAT_SGI = 32984,GL_COLOR_TABLE_WIDTH_SGI = 32985,GL_COLOR_TABLE_RED_SIZE_SGI = 32986,GL_COLOR_TABLE_GREEN_SIZE_SGI = 32987,GL_COLOR_TABLE_BLUE_SIZE_SGI = 32988,GL_COLOR_TABLE_ALPHA_SIZE_SGI = 32989,GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 32990,GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 32991,GL_PIXEL_TEXTURE_SGIS = 33619,GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620,GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621,GL_PIXEL_GROUP_COLOR_SGIS = 33622,GL_PIXEL_TEX_GEN_SGIX = 33081,GL_PIXEL_TEX_GEN_MODE_SGIX = 33579,GL_PACK_SKIP_VOLUMES_SGIS = 33072,GL_PACK_IMAGE_DEPTH_SGIS = 33073,GL_UNPACK_SKIP_VOLUMES_SGIS = 33074,GL_UNPACK_IMAGE_DEPTH_SGIS = 33075,GL_TEXTURE_4D_SGIS = 33076,GL_PROXY_TEXTURE_4D_SGIS = 33077,GL_TEXTURE_4DSIZE_SGIS = 33078,GL_TEXTURE_WRAP_Q_SGIS = 33079,GL_MAX_4D_TEXTURE_SIZE_SGIS = 33080,GL_TEXTURE_4D_BINDING_SGIS = 33103,GL_TEXTURE_COLOR_TABLE_SGI = 32956,GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 32957,GL_CMYK_EXT = 32780,GL_CMYKA_EXT = 32781,GL_PACK_CMYK_HINT_EXT = 32782,GL_UNPACK_CMYK_HINT_EXT = 32783,GL_TEXTURE_PRIORITY_EXT = 32870,GL_TEXTURE_RESIDENT_EXT = 32871,GL_TEXTURE_1D_BINDING_EXT = 32872,GL_TEXTURE_2D_BINDING_EXT = 32873,GL_TEXTURE_3D_BINDING_EXT = 32874,GL_DETAIL_TEXTURE_2D_SGIS = 32917,GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 32918,GL_LINEAR_DETAIL_SGIS = 32919,GL_LINEAR_DETAIL_ALPHA_SGIS = 32920,GL_LINEAR_DETAIL_COLOR_SGIS = 32921,GL_DETAIL_TEXTURE_LEVEL_SGIS = 32922,GL_DETAIL_TEXTURE_MODE_SGIS = 32923,GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924,GL_LINEAR_SHARPEN_SGIS = 32941,GL_LINEAR_SHARPEN_ALPHA_SGIS = 32942,GL_LINEAR_SHARPEN_COLOR_SGIS = 32943,GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944,GL_UNSIGNED_BYTE_3_3_2_EXT = 32818,GL_UNSIGNED_SHORT_4_4_4_4_EXT = 32819,GL_UNSIGNED_SHORT_5_5_5_1_EXT = 32820,GL_UNSIGNED_INT_8_8_8_8_EXT = 32821,GL_UNSIGNED_INT_10_10_10_2_EXT = 32822,GL_TEXTURE_MIN_LOD_SGIS = 33082,GL_TEXTURE_MAX_LOD_SGIS = 33083,GL_TEXTURE_BASE_LEVEL_SGIS = 33084,GL_TEXTURE_MAX_LEVEL_SGIS = 33085,GL_MULTISAMPLE_SGIS = 32925,GL_SAMPLE_ALPHA_TO_MASK_SGIS = 32926,GL_SAMPLE_ALPHA_TO_ONE_SGIS = 32927,GL_SAMPLE_MASK_SGIS = 32928,GL_1PASS_SGIS = 32929,GL_2PASS_0_SGIS = 32930,GL_2PASS_1_SGIS = 32931,GL_4PASS_0_SGIS = 32932,GL_4PASS_1_SGIS = 32933,GL_4PASS_2_SGIS = 32934,GL_4PASS_3_SGIS = 32935,GL_SAMPLE_BUFFERS_SGIS = 32936,GL_SAMPLES_SGIS = 32937,GL_SAMPLE_MASK_VALUE_SGIS = 32938,GL_SAMPLE_MASK_INVERT_SGIS = 32939,GL_SAMPLE_PATTERN_SGIS = 32940,GL_RESCALE_NORMAL_EXT = 32826,GL_VERTEX_ARRAY_EXT = 32884,GL_NORMAL_ARRAY_EXT = 32885,GL_COLOR_ARRAY_EXT = 32886,GL_INDEX_ARRAY_EXT = 32887,GL_TEXTURE_COORD_ARRAY_EXT = 32888,GL_EDGE_FLAG_ARRAY_EXT = 32889,GL_VERTEX_ARRAY_SIZE_EXT = 32890,GL_VERTEX_ARRAY_TYPE_EXT = 32891,GL_VERTEX_ARRAY_STRIDE_EXT = 32892,GL_VERTEX_ARRAY_COUNT_EXT = 32893,GL_NORMAL_ARRAY_TYPE_EXT = 32894,GL_NORMAL_ARRAY_STRIDE_EXT = 32895,GL_NORMAL_ARRAY_COUNT_EXT = 32896,GL_COLOR_ARRAY_SIZE_EXT = 32897,GL_COLOR_ARRAY_TYPE_EXT = 32898,GL_COLOR_ARRAY_STRIDE_EXT = 32899,GL_COLOR_ARRAY_COUNT_EXT = 32900,GL_INDEX_ARRAY_TYPE_EXT = 32901,GL_INDEX_ARRAY_STRIDE_EXT = 32902,GL_INDEX_ARRAY_COUNT_EXT = 32903,GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904,GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905,GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906,GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907,GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908,GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909,GL_VERTEX_ARRAY_POINTER_EXT = 32910,GL_NORMAL_ARRAY_POINTER_EXT = 32911,GL_COLOR_ARRAY_POINTER_EXT = 32912,GL_INDEX_ARRAY_POINTER_EXT = 32913,GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914,GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915,GL_GENERATE_MIPMAP_SGIS = 33169,GL_GENERATE_MIPMAP_HINT_SGIS = 33170,GL_LINEAR_CLIPMAP_LINEAR_SGIX = 33136,GL_TEXTURE_CLIPMAP_CENTER_SGIX = 33137,GL_TEXTURE_CLIPMAP_FRAME_SGIX = 33138,GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 33139,GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140,GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141,GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 33142,GL_MAX_CLIPMAP_DEPTH_SGIX = 33143,GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144,GL_NEAREST_CLIPMAP_NEAREST_SGIX = 33869,GL_NEAREST_CLIPMAP_LINEAR_SGIX = 33870,GL_LINEAR_CLIPMAP_NEAREST_SGIX = 33871,GL_TEXTURE_COMPARE_SGIX = 33178,GL_TEXTURE_COMPARE_OPERATOR_SGIX = 33179,GL_TEXTURE_LEQUAL_R_SGIX = 33180,GL_TEXTURE_GEQUAL_R_SGIX = 33181,GL_CLAMP_TO_EDGE_SGIS = 33071,GL_CLAMP_TO_BORDER_SGIS = 33069,GL_FUNC_ADD_EXT = 32774,GL_MIN_EXT = 32775,GL_MAX_EXT = 32776,GL_BLEND_EQUATION_EXT = 32777,GL_FUNC_SUBTRACT_EXT = 32778,GL_FUNC_REVERSE_SUBTRACT_EXT = 32779,GL_INTERLACE_SGIX = 32916,GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086,GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087,GL_PIXEL_TILE_WIDTH_SGIX = 33088,GL_PIXEL_TILE_HEIGHT_SGIX = 33089,GL_PIXEL_TILE_GRID_WIDTH_SGIX = 33090,GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 33091,GL_PIXEL_TILE_GRID_DEPTH_SGIX = 33092,GL_PIXEL_TILE_CACHE_SIZE_SGIX = 33093,GL_DUAL_ALPHA4_SGIS = 33040,GL_DUAL_ALPHA8_SGIS = 33041,GL_DUAL_ALPHA12_SGIS = 33042,GL_DUAL_ALPHA16_SGIS = 33043,GL_DUAL_LUMINANCE4_SGIS = 33044,GL_DUAL_LUMINANCE8_SGIS = 33045,GL_DUAL_LUMINANCE12_SGIS = 33046,GL_DUAL_LUMINANCE16_SGIS = 33047,GL_DUAL_INTENSITY4_SGIS = 33048,GL_DUAL_INTENSITY8_SGIS = 33049,GL_DUAL_INTENSITY12_SGIS = 33050,GL_DUAL_INTENSITY16_SGIS = 33051,GL_DUAL_LUMINANCE_ALPHA4_SGIS = 33052,GL_DUAL_LUMINANCE_ALPHA8_SGIS = 33053,GL_QUAD_ALPHA4_SGIS = 33054,GL_QUAD_ALPHA8_SGIS = 33055,GL_QUAD_LUMINANCE4_SGIS = 33056,GL_QUAD_LUMINANCE8_SGIS = 33057,GL_QUAD_INTENSITY4_SGIS = 33058,GL_QUAD_INTENSITY8_SGIS = 33059,GL_DUAL_TEXTURE_SELECT_SGIS = 33060,GL_QUAD_TEXTURE_SELECT_SGIS = 33061,GL_SPRITE_SGIX = 33096,GL_SPRITE_MODE_SGIX = 33097,GL_SPRITE_AXIS_SGIX = 33098,GL_SPRITE_TRANSLATION_SGIX = 33099,GL_SPRITE_AXIAL_SGIX = 33100,GL_SPRITE_OBJECT_ALIGNED_SGIX = 33101,GL_SPRITE_EYE_ALIGNED_SGIX = 33102,GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070,GL_POINT_SIZE_MIN_EXT = 33062,GL_POINT_SIZE_MAX_EXT = 33063,GL_POINT_FADE_THRESHOLD_SIZE_EXT = 33064,GL_DISTANCE_ATTENUATION_EXT = 33065,GL_POINT_SIZE_MIN_SGIS = 33062,GL_POINT_SIZE_MAX_SGIS = 33063,GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 33064,GL_DISTANCE_ATTENUATION_SGIS = 33065,GL_INSTRUMENT_BUFFER_POINTER_SGIX = 33152,GL_INSTRUMENT_MEASUREMENTS_SGIX = 33153,GL_POST_TEXTURE_FILTER_BIAS_SGIX = 33145,GL_POST_TEXTURE_FILTER_SCALE_SGIX = 33146,GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147,GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148,GL_FRAMEZOOM_SGIX = 33163,GL_FRAMEZOOM_FACTOR_SGIX = 33164,GL_MAX_FRAMEZOOM_FACTOR_SGIX = 33165,GL_TEXTURE_DEFORMATION_BIT_SGIX = 1,GL_GEOMETRY_DEFORMATION_BIT_SGIX = 2,GL_GEOMETRY_DEFORMATION_SGIX = 33172,GL_TEXTURE_DEFORMATION_SGIX = 33173,GL_DEFORMATIONS_MASK_SGIX = 33174,GL_MAX_DEFORMATION_ORDER_SGIX = 33175,GL_REFERENCE_PLANE_SGIX = 33149,GL_REFERENCE_PLANE_EQUATION_SGIX = 33150,GL_DEPTH_COMPONENT16_SGIX = 33189,GL_DEPTH_COMPONENT24_SGIX = 33190,GL_DEPTH_COMPONENT32_SGIX = 33191,GL_FOG_FUNC_SGIS = 33066,GL_FOG_FUNC_POINTS_SGIS = 33067,GL_MAX_FOG_FUNC_POINTS_SGIS = 33068,GL_FOG_OFFSET_SGIX = 33176,GL_FOG_OFFSET_VALUE_SGIX = 33177,GL_IMAGE_SCALE_X_HP = 33109,GL_IMAGE_SCALE_Y_HP = 33110,GL_IMAGE_TRANSLATE_X_HP = 33111,GL_IMAGE_TRANSLATE_Y_HP = 33112,GL_IMAGE_ROTATE_ANGLE_HP = 33113,GL_IMAGE_ROTATE_ORIGIN_X_HP = 33114,GL_IMAGE_ROTATE_ORIGIN_Y_HP = 33115,GL_IMAGE_MAG_FILTER_HP = 33116,GL_IMAGE_MIN_FILTER_HP = 33117,GL_IMAGE_CUBIC_WEIGHT_HP = 33118,GL_CUBIC_HP = 33119,GL_AVERAGE_HP = 33120,GL_IMAGE_TRANSFORM_2D_HP = 33121,GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122,GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123,GL_IGNORE_BORDER_HP = 33104,GL_CONSTANT_BORDER_HP = 33105,GL_REPLICATE_BORDER_HP = 33107,GL_CONVOLUTION_BORDER_COLOR_HP = 33108,GL_TEXTURE_ENV_BIAS_SGIX = 32958,GL_VERTEX_DATA_HINT_PGI = 107050,GL_VERTEX_CONSISTENT_HINT_PGI = 107051,GL_MATERIAL_SIDE_HINT_PGI = 107052,GL_MAX_VERTEX_HINT_PGI = 107053,GL_COLOR3_BIT_PGI = 65536,GL_COLOR4_BIT_PGI = 131072,GL_EDGEFLAG_BIT_PGI = 262144,GL_INDEX_BIT_PGI = 524288,GL_MAT_AMBIENT_BIT_PGI = 1048576,GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152,GL_MAT_DIFFUSE_BIT_PGI = 4194304,GL_MAT_EMISSION_BIT_PGI = 8388608,GL_MAT_COLOR_INDEXES_BIT_PGI = 16777216,GL_MAT_SHININESS_BIT_PGI = 33554432,GL_MAT_SPECULAR_BIT_PGI = 67108864,GL_NORMAL_BIT_PGI = 134217728,GL_TEXCOORD1_BIT_PGI = 268435456,GL_TEXCOORD2_BIT_PGI = 536870912,GL_TEXCOORD3_BIT_PGI = 1073741824,GL_TEXCOORD4_BIT_PGI = -2147483648,GL_VERTEX23_BIT_PGI = 4,GL_VERTEX4_BIT_PGI = 8,GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000,GL_CONSERVE_MEMORY_HINT_PGI = 107005,GL_RECLAIM_MEMORY_HINT_PGI = 107006,GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010,GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011,GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012,GL_ALWAYS_FAST_HINT_PGI = 107020,GL_ALWAYS_SOFT_HINT_PGI = 107021,GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022,GL_ALLOW_DRAW_WIN_HINT_PGI = 107023,GL_ALLOW_DRAW_FRG_HINT_PGI = 107024,GL_ALLOW_DRAW_MEM_HINT_PGI = 107025,GL_STRICT_DEPTHFUNC_HINT_PGI = 107030,GL_STRICT_LIGHTING_HINT_PGI = 107031,GL_STRICT_SCISSOR_HINT_PGI = 107032,GL_FULL_STIPPLE_HINT_PGI = 107033,GL_CLIP_NEAR_HINT_PGI = 107040,GL_CLIP_FAR_HINT_PGI = 107041,GL_WIDE_LINE_HINT_PGI = 107042,GL_BACK_NORMALS_HINT_PGI = 107043,GL_COLOR_INDEX1_EXT = 32994,GL_COLOR_INDEX2_EXT = 32995,GL_COLOR_INDEX4_EXT = 32996,GL_COLOR_INDEX8_EXT = 32997,GL_COLOR_INDEX12_EXT = 32998,GL_COLOR_INDEX16_EXT = 32999,GL_TEXTURE_INDEX_SIZE_EXT = 33005,GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 33008,GL_LIST_PRIORITY_SGIX = 33154,GL_IR_INSTRUMENT1_SGIX = 33151,GL_CALLIGRAPHIC_FRAGMENT_SGIX = 33155,GL_TEXTURE_LOD_BIAS_S_SGIX = 33166,GL_TEXTURE_LOD_BIAS_T_SGIX = 33167,GL_TEXTURE_LOD_BIAS_R_SGIX = 33168,GL_SHADOW_AMBIENT_SGIX = 32959,GL_INDEX_MATERIAL_EXT = 33208,GL_INDEX_MATERIAL_PARAMETER_EXT = 33209,GL_INDEX_MATERIAL_FACE_EXT = 33210,GL_INDEX_TEST_EXT = 33205,GL_INDEX_TEST_FUNC_EXT = 33206,GL_INDEX_TEST_REF_EXT = 33207,GL_IUI_V2F_EXT = 33197,GL_IUI_V3F_EXT = 33198,GL_IUI_N3F_V2F_EXT = 33199,GL_IUI_N3F_V3F_EXT = 33200,GL_T2F_IUI_V2F_EXT = 33201,GL_T2F_IUI_V3F_EXT = 33202,GL_T2F_IUI_N3F_V2F_EXT = 33203,GL_T2F_IUI_N3F_V3F_EXT = 33204,GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192,GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193,GL_CULL_VERTEX_EXT = 33194,GL_CULL_VERTEX_EYE_POSITION_EXT = 33195,GL_CULL_VERTEX_OBJECT_POSITION_EXT = 33196,GL_YCRCB_422_SGIX = 33211,GL_YCRCB_444_SGIX = 33212,GL_FRAGMENT_LIGHTING_SGIX = 33792,GL_FRAGMENT_COLOR_MATERIAL_SGIX = 33793,GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794,GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795,GL_MAX_FRAGMENT_LIGHTS_SGIX = 33796,GL_MAX_ACTIVE_LIGHTS_SGIX = 33797,GL_CURRENT_RASTER_NORMAL_SGIX = 33798,GL_LIGHT_ENV_MODE_SGIX = 33799,GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800,GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801,GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802,GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803,GL_FRAGMENT_LIGHT0_SGIX = 33804,GL_FRAGMENT_LIGHT1_SGIX = 33805,GL_FRAGMENT_LIGHT2_SGIX = 33806,GL_FRAGMENT_LIGHT3_SGIX = 33807,GL_FRAGMENT_LIGHT4_SGIX = 33808,GL_FRAGMENT_LIGHT5_SGIX = 33809,GL_FRAGMENT_LIGHT6_SGIX = 33810,GL_FRAGMENT_LIGHT7_SGIX = 33811,GL_RASTER_POSITION_UNCLIPPED_IBM = 103010,GL_TEXTURE_LIGHTING_MODE_HP = 33127,GL_TEXTURE_POST_SPECULAR_HP = 33128,GL_TEXTURE_PRE_SPECULAR_HP = 33129,GL_MAX_ELEMENTS_VERTICES_EXT = 33000,GL_MAX_ELEMENTS_INDICES_EXT = 33001,GL_PHONG_WIN = 33002,GL_PHONG_HINT_WIN = 33003,GL_FOG_SPECULAR_TEXTURE_WIN = 33004,GL_FRAGMENT_MATERIAL_EXT = 33609,GL_FRAGMENT_NORMAL_EXT = 33610,GL_FRAGMENT_COLOR_EXT = 33612,GL_ATTENUATION_EXT = 33613,GL_SHADOW_ATTENUATION_EXT = 33614,GL_TEXTURE_APPLICATION_MODE_EXT = 33615,GL_TEXTURE_LIGHT_EXT = 33616,GL_TEXTURE_MATERIAL_FACE_EXT = 33617,GL_TEXTURE_MATERIAL_PARAMETER_EXT = 33618,GL_ALPHA_MIN_SGIX = 33568,GL_ALPHA_MAX_SGIX = 33569,GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 33156,GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 33157,GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 33158,GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 33159,GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 33160,GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 33161,GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 33162,GL_BGR_EXT = 32992,GL_BGRA_EXT = 32993,GL_ASYNC_MARKER_SGIX = 33577,GL_ASYNC_TEX_IMAGE_SGIX = 33628,GL_ASYNC_DRAW_PIXELS_SGIX = 33629,GL_ASYNC_READ_PIXELS_SGIX = 33630,GL_MAX_ASYNC_TEX_IMAGE_SGIX = 33631,GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 33632,GL_MAX_ASYNC_READ_PIXELS_SGIX = 33633,GL_ASYNC_HISTOGRAM_SGIX = 33580,GL_MAX_ASYNC_HISTOGRAM_SGIX = 33581,GL_PARALLEL_ARRAYS_INTEL = 33780,GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781,GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782,GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783,GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784,GL_OCCLUSION_TEST_HP = 33125,GL_OCCLUSION_TEST_RESULT_HP = 33126,GL_PIXEL_TRANSFORM_2D_EXT = 33584,GL_PIXEL_MAG_FILTER_EXT = 33585,GL_PIXEL_MIN_FILTER_EXT = 33586,GL_PIXEL_CUBIC_WEIGHT_EXT = 33587,GL_CUBIC_EXT = 33588,GL_AVERAGE_EXT = 33589,GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590,GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591,GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592,GL_SHARED_TEXTURE_PALETTE_EXT = 33275,GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 33272,GL_SINGLE_COLOR_EXT = 33273,GL_SEPARATE_SPECULAR_COLOR_EXT = 33274,GL_COLOR_SUM_EXT = 33880,GL_CURRENT_SECONDARY_COLOR_EXT = 33881,GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882,GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883,GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884,GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885,GL_SECONDARY_COLOR_ARRAY_EXT = 33886,GL_PERTURB_EXT = 34222,GL_TEXTURE_NORMAL_EXT = 34223,GL_FOG_COORDINATE_SOURCE_EXT = 33872,GL_FOG_COORDINATE_EXT = 33873,GL_FRAGMENT_DEPTH_EXT = 33874,GL_CURRENT_FOG_COORDINATE_EXT = 33875,GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876,GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877,GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878,GL_FOG_COORDINATE_ARRAY_EXT = 33879,GL_SCREEN_COORDINATES_REND = 33936,GL_INVERTED_SCREEN_W_REND = 33937,GL_TANGENT_ARRAY_EXT = 33849,GL_BINORMAL_ARRAY_EXT = 33850,GL_CURRENT_TANGENT_EXT = 33851,GL_CURRENT_BINORMAL_EXT = 33852,GL_TANGENT_ARRAY_TYPE_EXT = 33854,GL_TANGENT_ARRAY_STRIDE_EXT = 33855,GL_BINORMAL_ARRAY_TYPE_EXT = 33856,GL_BINORMAL_ARRAY_STRIDE_EXT = 33857,GL_TANGENT_ARRAY_POINTER_EXT = 33858,GL_BINORMAL_ARRAY_POINTER_EXT = 33859,GL_MAP1_TANGENT_EXT = 33860,GL_MAP2_TANGENT_EXT = 33861,GL_MAP1_BINORMAL_EXT = 33862,GL_MAP2_BINORMAL_EXT = 33863,GL_COMBINE_EXT = 34160,GL_COMBINE_RGB_EXT = 34161,GL_COMBINE_ALPHA_EXT = 34162,GL_RGB_SCALE_EXT = 34163,GL_ADD_SIGNED_EXT = 34164,GL_INTERPOLATE_EXT = 34165,GL_CONSTANT_EXT = 34166,GL_PRIMARY_COLOR_EXT = 34167,GL_PREVIOUS_EXT = 34168,GL_SOURCE0_RGB_EXT = 34176,GL_SOURCE1_RGB_EXT = 34177,GL_SOURCE2_RGB_EXT = 34178,GL_SOURCE0_ALPHA_EXT = 34184,GL_SOURCE1_ALPHA_EXT = 34185,GL_SOURCE2_ALPHA_EXT = 34186,GL_OPERAND0_RGB_EXT = 34192,GL_OPERAND1_RGB_EXT = 34193,GL_OPERAND2_RGB_EXT = 34194,GL_OPERAND0_ALPHA_EXT = 34200,GL_OPERAND1_ALPHA_EXT = 34201,GL_OPERAND2_ALPHA_EXT = 34202,GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224,GL_TRANSFORM_HINT_APPLE = 34225,GL_FOG_SCALE_SGIX = 33276,GL_FOG_SCALE_VALUE_SGIX = 33277,GL_UNPACK_CONSTANT_DATA_SUNX = 33237,GL_TEXTURE_CONSTANT_DATA_SUNX = 33238,GL_GLOBAL_ALPHA_SUN = 33241,GL_GLOBAL_ALPHA_FACTOR_SUN = 33242,GL_RESTART_SUN = 1,GL_REPLACE_MIDDLE_SUN = 2,GL_REPLACE_OLDEST_SUN = 3,GL_TRIANGLE_LIST_SUN = 33239,GL_REPLACEMENT_CODE_SUN = 33240,GL_REPLACEMENT_CODE_ARRAY_SUN = 34240,GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241,GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242,GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243,GL_R1UI_V3F_SUN = 34244,GL_R1UI_C4UB_V3F_SUN = 34245,GL_R1UI_C3F_V3F_SUN = 34246,GL_R1UI_N3F_V3F_SUN = 34247,GL_R1UI_C4F_N3F_V3F_SUN = 34248,GL_R1UI_T2F_V3F_SUN = 34249,GL_R1UI_T2F_N3F_V3F_SUN = 34250,GL_R1UI_T2F_C4F_N3F_V3F_SUN = 34251,GL_BLEND_DST_RGB_EXT = 32968,GL_BLEND_SRC_RGB_EXT = 32969,GL_BLEND_DST_ALPHA_EXT = 32970,GL_BLEND_SRC_ALPHA_EXT = 32971,GL_RED_MIN_CLAMP_INGR = 34144,GL_GREEN_MIN_CLAMP_INGR = 34145,GL_BLUE_MIN_CLAMP_INGR = 34146,GL_ALPHA_MIN_CLAMP_INGR = 34147,GL_RED_MAX_CLAMP_INGR = 34148,GL_GREEN_MAX_CLAMP_INGR = 34149,GL_BLUE_MAX_CLAMP_INGR = 34150,GL_ALPHA_MAX_CLAMP_INGR = 34151,GL_INTERLACE_READ_INGR = 34152,GL_INCR_WRAP_EXT = 34055,GL_DECR_WRAP_EXT = 34056,GL_422_EXT = 32972,GL_422_REV_EXT = 32973,GL_422_AVERAGE_EXT = 32974,GL_422_REV_AVERAGE_EXT = 32975,GL_NORMAL_MAP_NV = 34065,GL_REFLECTION_MAP_NV = 34066,GL_NORMAL_MAP_EXT = 34065,GL_REFLECTION_MAP_EXT = 34066,GL_TEXTURE_CUBE_MAP_EXT = 34067,GL_TEXTURE_BINDING_CUBE_MAP_EXT = 34068,GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 34069,GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 34070,GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 34071,GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 34072,GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 34073,GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 34074,GL_PROXY_TEXTURE_CUBE_MAP_EXT = 34075,GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 34076,GL_WRAP_BORDER_SUN = 33236,GL_MAX_TEXTURE_LOD_BIAS_EXT = 34045,GL_TEXTURE_FILTER_CONTROL_EXT = 34048,GL_TEXTURE_LOD_BIAS_EXT = 34049,GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046,GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047,GL_MODELVIEW0_STACK_DEPTH_EXT = 2979,GL_MODELVIEW1_STACK_DEPTH_EXT = 34050,GL_MODELVIEW0_MATRIX_EXT = 2982,GL_MODELVIEW1_MATRIX_EXT = 34054,GL_VERTEX_WEIGHTING_EXT = 34057,GL_MODELVIEW0_EXT = 5888,GL_MODELVIEW1_EXT = 34058,GL_CURRENT_VERTEX_WEIGHT_EXT = 34059,GL_VERTEX_WEIGHT_ARRAY_EXT = 34060,GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061,GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062,GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063,GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064,GL_MAX_SHININESS_NV = 34052,GL_MAX_SPOT_EXPONENT_NV = 34053,GL_VERTEX_ARRAY_RANGE_NV = 34077,GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 34078,GL_VERTEX_ARRAY_RANGE_VALID_NV = 34079,GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 34080,GL_VERTEX_ARRAY_RANGE_POINTER_NV = 34081,GL_REGISTER_COMBINERS_NV = 34082,GL_VARIABLE_A_NV = 34083,GL_VARIABLE_B_NV = 34084,GL_VARIABLE_C_NV = 34085,GL_VARIABLE_D_NV = 34086,GL_VARIABLE_E_NV = 34087,GL_VARIABLE_F_NV = 34088,GL_VARIABLE_G_NV = 34089,GL_CONSTANT_COLOR0_NV = 34090,GL_CONSTANT_COLOR1_NV = 34091,GL_PRIMARY_COLOR_NV = 34092,GL_SECONDARY_COLOR_NV = 34093,GL_SPARE0_NV = 34094,GL_SPARE1_NV = 34095,GL_DISCARD_NV = 34096,GL_E_TIMES_F_NV = 34097,GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 34098,GL_UNSIGNED_IDENTITY_NV = 34102,GL_UNSIGNED_INVERT_NV = 34103,GL_EXPAND_NORMAL_NV = 34104,GL_EXPAND_NEGATE_NV = 34105,GL_HALF_BIAS_NORMAL_NV = 34106,GL_HALF_BIAS_NEGATE_NV = 34107,GL_SIGNED_IDENTITY_NV = 34108,GL_SIGNED_NEGATE_NV = 34109,GL_SCALE_BY_TWO_NV = 34110,GL_SCALE_BY_FOUR_NV = 34111,GL_SCALE_BY_ONE_HALF_NV = 34112,GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113,GL_COMBINER_INPUT_NV = 34114,GL_COMBINER_MAPPING_NV = 34115,GL_COMBINER_COMPONENT_USAGE_NV = 34116,GL_COMBINER_AB_DOT_PRODUCT_NV = 34117,GL_COMBINER_CD_DOT_PRODUCT_NV = 34118,GL_COMBINER_MUX_SUM_NV = 34119,GL_COMBINER_SCALE_NV = 34120,GL_COMBINER_BIAS_NV = 34121,GL_COMBINER_AB_OUTPUT_NV = 34122,GL_COMBINER_CD_OUTPUT_NV = 34123,GL_COMBINER_SUM_OUTPUT_NV = 34124,GL_MAX_GENERAL_COMBINERS_NV = 34125,GL_NUM_GENERAL_COMBINERS_NV = 34126,GL_COLOR_SUM_CLAMP_NV = 34127,GL_COMBINER0_NV = 34128,GL_COMBINER1_NV = 34129,GL_COMBINER2_NV = 34130,GL_COMBINER3_NV = 34131,GL_COMBINER4_NV = 34132,GL_COMBINER5_NV = 34133,GL_COMBINER6_NV = 34134,GL_COMBINER7_NV = 34135,GL_FOG_DISTANCE_MODE_NV = 34138,GL_EYE_RADIAL_NV = 34139,GL_EYE_PLANE_ABSOLUTE_NV = 34140,GL_EMBOSS_LIGHT_NV = 34141,GL_EMBOSS_CONSTANT_NV = 34142,GL_EMBOSS_MAP_NV = 34143,GL_COMBINE4_NV = 34051,GL_SOURCE3_RGB_NV = 34179,GL_SOURCE3_ALPHA_NV = 34187,GL_OPERAND3_RGB_NV = 34195,GL_OPERAND3_ALPHA_NV = 34203,GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776,GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777,GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778,GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779,GL_CULL_VERTEX_IBM = 103050,GL_VERTEX_ARRAY_LIST_IBM = 103070,GL_NORMAL_ARRAY_LIST_IBM = 103071,GL_COLOR_ARRAY_LIST_IBM = 103072,GL_INDEX_ARRAY_LIST_IBM = 103073,GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074,GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075,GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076,GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077,GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080,GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081,GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082,GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083,GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084,GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085,GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086,GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087,GL_PACK_SUBSAMPLE_RATE_SGIX = 34208,GL_UNPACK_SUBSAMPLE_RATE_SGIX = 34209,GL_PIXEL_SUBSAMPLE_4444_SGIX = 34210,GL_PIXEL_SUBSAMPLE_2424_SGIX = 34211,GL_PIXEL_SUBSAMPLE_4242_SGIX = 34212,GL_YCRCB_SGIX = 33560,GL_YCRCBA_SGIX = 33561,GL_DEPTH_PASS_INSTRUMENT_SGIX = 33552,GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 33553,GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 33554,GL_COMPRESSED_RGB_FXT1_3DFX = 34480,GL_COMPRESSED_RGBA_FXT1_3DFX = 34481,GL_MULTISAMPLE_3DFX = 34482,GL_SAMPLE_BUFFERS_3DFX = 34483,GL_SAMPLES_3DFX = 34484,GL_MULTISAMPLE_BIT_3DFX = 536870912,GL_MULTISAMPLE_EXT = 32925,GL_SAMPLE_ALPHA_TO_MASK_EXT = 32926,GL_SAMPLE_ALPHA_TO_ONE_EXT = 32927,GL_SAMPLE_MASK_EXT = 32928,GL_1PASS_EXT = 32929,GL_2PASS_0_EXT = 32930,GL_2PASS_1_EXT = 32931,GL_4PASS_0_EXT = 32932,GL_4PASS_1_EXT = 32933,GL_4PASS_2_EXT = 32934,GL_4PASS_3_EXT = 32935,GL_SAMPLE_BUFFERS_EXT = 32936,GL_SAMPLES_EXT = 32937,GL_SAMPLE_MASK_VALUE_EXT = 32938,GL_SAMPLE_MASK_INVERT_EXT = 32939,GL_SAMPLE_PATTERN_EXT = 32940,GL_MULTISAMPLE_BIT_EXT = 536870912,GL_VERTEX_PRECLIP_SGIX = 33774,GL_VERTEX_PRECLIP_HINT_SGIX = 33775,GL_CONVOLUTION_HINT_SGIX = 33558,GL_PACK_RESAMPLE_SGIX = 33836,GL_UNPACK_RESAMPLE_SGIX = 33837,GL_RESAMPLE_REPLICATE_SGIX = 33838,GL_RESAMPLE_ZERO_FILL_SGIX = 33839,GL_RESAMPLE_DECIMATE_SGIX = 33840,GL_EYE_DISTANCE_TO_POINT_SGIS = 33264,GL_OBJECT_DISTANCE_TO_POINT_SGIS = 33265,GL_EYE_DISTANCE_TO_LINE_SGIS = 33266,GL_OBJECT_DISTANCE_TO_LINE_SGIS = 33267,GL_EYE_POINT_SGIS = 33268,GL_OBJECT_POINT_SGIS = 33269,GL_EYE_LINE_SGIS = 33270,GL_OBJECT_LINE_SGIS = 33271,GL_TEXTURE_COLOR_WRITEMASK_SGIS = 33263,GL_DOT3_RGB_EXT = 34624,GL_DOT3_RGBA_EXT = 34625,GL_MIRROR_CLAMP_ATI = 34626,GL_MIRROR_CLAMP_TO_EDGE_ATI = 34627,GL_ALL_COMPLETED_NV = 34034,GL_FENCE_STATUS_NV = 34035,GL_FENCE_CONDITION_NV = 34036,GL_MIRRORED_REPEAT_IBM = 33648,GL_EVAL_2D_NV = 34496,GL_EVAL_TRIANGULAR_2D_NV = 34497,GL_MAP_TESSELLATION_NV = 34498,GL_MAP_ATTRIB_U_ORDER_NV = 34499,GL_MAP_ATTRIB_V_ORDER_NV = 34500,GL_EVAL_FRACTIONAL_TESSELLATION_NV = 34501,GL_EVAL_VERTEX_ATTRIB0_NV = 34502,GL_EVAL_VERTEX_ATTRIB1_NV = 34503,GL_EVAL_VERTEX_ATTRIB2_NV = 34504,GL_EVAL_VERTEX_ATTRIB3_NV = 34505,GL_EVAL_VERTEX_ATTRIB4_NV = 34506,GL_EVAL_VERTEX_ATTRIB5_NV = 34507,GL_EVAL_VERTEX_ATTRIB6_NV = 34508,GL_EVAL_VERTEX_ATTRIB7_NV = 34509,GL_EVAL_VERTEX_ATTRIB8_NV = 34510,GL_EVAL_VERTEX_ATTRIB9_NV = 34511,GL_EVAL_VERTEX_ATTRIB10_NV = 34512,GL_EVAL_VERTEX_ATTRIB11_NV = 34513,GL_EVAL_VERTEX_ATTRIB12_NV = 34514,GL_EVAL_VERTEX_ATTRIB13_NV = 34515,GL_EVAL_VERTEX_ATTRIB14_NV = 34516,GL_EVAL_VERTEX_ATTRIB15_NV = 34517,GL_MAX_MAP_TESSELLATION_NV = 34518,GL_MAX_RATIONAL_EVAL_ORDER_NV = 34519,GL_DEPTH_STENCIL_NV = 34041,GL_UNSIGNED_INT_24_8_NV = 34042,GL_PER_STAGE_CONSTANTS_NV = 34101,GL_TEXTURE_RECTANGLE_NV = 34037,GL_TEXTURE_BINDING_RECTANGLE_NV = 34038,GL_PROXY_TEXTURE_RECTANGLE_NV = 34039,GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 34040,GL_OFFSET_TEXTURE_RECTANGLE_NV = 34380,GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 34381,GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 34382,GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 34521,GL_UNSIGNED_INT_S8_S8_8_8_NV = 34522,GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 34523,GL_DSDT_MAG_INTENSITY_NV = 34524,GL_SHADER_CONSISTENT_NV = 34525,GL_TEXTURE_SHADER_NV = 34526,GL_SHADER_OPERATION_NV = 34527,GL_CULL_MODES_NV = 34528,GL_OFFSET_TEXTURE_MATRIX_NV = 34529,GL_OFFSET_TEXTURE_SCALE_NV = 34530,GL_OFFSET_TEXTURE_BIAS_NV = 34531,GL_OFFSET_TEXTURE_2D_MATRIX_NV = 34529,GL_OFFSET_TEXTURE_2D_SCALE_NV = 34530,GL_OFFSET_TEXTURE_2D_BIAS_NV = 34531,GL_PREVIOUS_TEXTURE_INPUT_NV = 34532,GL_CONST_EYE_NV = 34533,GL_PASS_THROUGH_NV = 34534,GL_CULL_FRAGMENT_NV = 34535,GL_OFFSET_TEXTURE_2D_NV = 34536,GL_DEPENDENT_AR_TEXTURE_2D_NV = 34537,GL_DEPENDENT_GB_TEXTURE_2D_NV = 34538,GL_DOT_PRODUCT_NV = 34540,GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 34541,GL_DOT_PRODUCT_TEXTURE_2D_NV = 34542,GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 34544,GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 34545,GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 34546,GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 34547,GL_HILO_NV = 34548,GL_DSDT_NV = 34549,GL_DSDT_MAG_NV = 34550,GL_DSDT_MAG_VIB_NV = 34551,GL_HILO16_NV = 34552,GL_SIGNED_HILO_NV = 34553,GL_SIGNED_HILO16_NV = 34554,GL_SIGNED_RGBA_NV = 34555,GL_SIGNED_RGBA8_NV = 34556,GL_SIGNED_RGB_NV = 34558,GL_SIGNED_RGB8_NV = 34559,GL_SIGNED_LUMINANCE_NV = 34561,GL_SIGNED_LUMINANCE8_NV = 34562,GL_SIGNED_LUMINANCE_ALPHA_NV = 34563,GL_SIGNED_LUMINANCE8_ALPHA8_NV = 34564,GL_SIGNED_ALPHA_NV = 34565,GL_SIGNED_ALPHA8_NV = 34566,GL_SIGNED_INTENSITY_NV = 34567,GL_SIGNED_INTENSITY8_NV = 34568,GL_DSDT8_NV = 34569,GL_DSDT8_MAG8_NV = 34570,GL_DSDT8_MAG8_INTENSITY8_NV = 34571,GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 34572,GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 34573,GL_HI_SCALE_NV = 34574,GL_LO_SCALE_NV = 34575,GL_DS_SCALE_NV = 34576,GL_DT_SCALE_NV = 34577,GL_MAGNITUDE_SCALE_NV = 34578,GL_VIBRANCE_SCALE_NV = 34579,GL_HI_BIAS_NV = 34580,GL_LO_BIAS_NV = 34581,GL_DS_BIAS_NV = 34582,GL_DT_BIAS_NV = 34583,GL_MAGNITUDE_BIAS_NV = 34584,GL_VIBRANCE_BIAS_NV = 34585,GL_TEXTURE_BORDER_VALUES_NV = 34586,GL_TEXTURE_HI_SIZE_NV = 34587,GL_TEXTURE_LO_SIZE_NV = 34588,GL_TEXTURE_DS_SIZE_NV = 34589,GL_TEXTURE_DT_SIZE_NV = 34590,GL_TEXTURE_MAG_SIZE_NV = 34591,GL_DOT_PRODUCT_TEXTURE_3D_NV = 34543,GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 34099,GL_VERTEX_PROGRAM_NV = 34336,GL_VERTEX_STATE_PROGRAM_NV = 34337,GL_ATTRIB_ARRAY_SIZE_NV = 34339,GL_ATTRIB_ARRAY_STRIDE_NV = 34340,GL_ATTRIB_ARRAY_TYPE_NV = 34341,GL_CURRENT_ATTRIB_NV = 34342,GL_PROGRAM_LENGTH_NV = 34343,GL_PROGRAM_STRING_NV = 34344,GL_MODELVIEW_PROJECTION_NV = 34345,GL_IDENTITY_NV = 34346,GL_INVERSE_NV = 34347,GL_TRANSPOSE_NV = 34348,GL_INVERSE_TRANSPOSE_NV = 34349,GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350,GL_MAX_TRACK_MATRICES_NV = 34351,GL_MATRIX0_NV = 34352,GL_MATRIX1_NV = 34353,GL_MATRIX2_NV = 34354,GL_MATRIX3_NV = 34355,GL_MATRIX4_NV = 34356,GL_MATRIX5_NV = 34357,GL_MATRIX6_NV = 34358,GL_MATRIX7_NV = 34359,GL_CURRENT_MATRIX_STACK_DEPTH_NV = 34368,GL_CURRENT_MATRIX_NV = 34369,GL_VERTEX_PROGRAM_POINT_SIZE_NV = 34370,GL_VERTEX_PROGRAM_TWO_SIDE_NV = 34371,GL_PROGRAM_PARAMETER_NV = 34372,GL_ATTRIB_ARRAY_POINTER_NV = 34373,GL_PROGRAM_TARGET_NV = 34374,GL_PROGRAM_RESIDENT_NV = 34375,GL_TRACK_MATRIX_NV = 34376,GL_TRACK_MATRIX_TRANSFORM_NV = 34377,GL_VERTEX_PROGRAM_BINDING_NV = 34378,GL_PROGRAM_ERROR_POSITION_NV = 34379,GL_VERTEX_ATTRIB_ARRAY0_NV = 34384,GL_VERTEX_ATTRIB_ARRAY1_NV = 34385,GL_VERTEX_ATTRIB_ARRAY2_NV = 34386,GL_VERTEX_ATTRIB_ARRAY3_NV = 34387,GL_VERTEX_ATTRIB_ARRAY4_NV = 34388,GL_VERTEX_ATTRIB_ARRAY5_NV = 34389,GL_VERTEX_ATTRIB_ARRAY6_NV = 34390,GL_VERTEX_ATTRIB_ARRAY7_NV = 34391,GL_VERTEX_ATTRIB_ARRAY8_NV = 34392,GL_VERTEX_ATTRIB_ARRAY9_NV = 34393,GL_VERTEX_ATTRIB_ARRAY10_NV = 34394,GL_VERTEX_ATTRIB_ARRAY11_NV = 34395,GL_VERTEX_ATTRIB_ARRAY12_NV = 34396,GL_VERTEX_ATTRIB_ARRAY13_NV = 34397,GL_VERTEX_ATTRIB_ARRAY14_NV = 34398,GL_VERTEX_ATTRIB_ARRAY15_NV = 34399,GL_MAP1_VERTEX_ATTRIB0_4_NV = 34400,GL_MAP1_VERTEX_ATTRIB1_4_NV = 34401,GL_MAP1_VERTEX_ATTRIB2_4_NV = 34402,GL_MAP1_VERTEX_ATTRIB3_4_NV = 34403,GL_MAP1_VERTEX_ATTRIB4_4_NV = 34404,GL_MAP1_VERTEX_ATTRIB5_4_NV = 34405,GL_MAP1_VERTEX_ATTRIB6_4_NV = 34406,GL_MAP1_VERTEX_ATTRIB7_4_NV = 34407,GL_MAP1_VERTEX_ATTRIB8_4_NV = 34408,GL_MAP1_VERTEX_ATTRIB9_4_NV = 34409,GL_MAP1_VERTEX_ATTRIB10_4_NV = 34410,GL_MAP1_VERTEX_ATTRIB11_4_NV = 34411,GL_MAP1_VERTEX_ATTRIB12_4_NV = 34412,GL_MAP1_VERTEX_ATTRIB13_4_NV = 34413,GL_MAP1_VERTEX_ATTRIB14_4_NV = 34414,GL_MAP1_VERTEX_ATTRIB15_4_NV = 34415,GL_MAP2_VERTEX_ATTRIB0_4_NV = 34416,GL_MAP2_VERTEX_ATTRIB1_4_NV = 34417,GL_MAP2_VERTEX_ATTRIB2_4_NV = 34418,GL_MAP2_VERTEX_ATTRIB3_4_NV = 34419,GL_MAP2_VERTEX_ATTRIB4_4_NV = 34420,GL_MAP2_VERTEX_ATTRIB5_4_NV = 34421,GL_MAP2_VERTEX_ATTRIB6_4_NV = 34422,GL_MAP2_VERTEX_ATTRIB7_4_NV = 34423,GL_MAP2_VERTEX_ATTRIB8_4_NV = 34424,GL_MAP2_VERTEX_ATTRIB9_4_NV = 34425,GL_MAP2_VERTEX_ATTRIB10_4_NV = 34426,GL_MAP2_VERTEX_ATTRIB11_4_NV = 34427,GL_MAP2_VERTEX_ATTRIB12_4_NV = 34428,GL_MAP2_VERTEX_ATTRIB13_4_NV = 34429,GL_MAP2_VERTEX_ATTRIB14_4_NV = 34430,GL_MAP2_VERTEX_ATTRIB15_4_NV = 34431,GL_TEXTURE_MAX_CLAMP_S_SGIX = 33641,GL_TEXTURE_MAX_CLAMP_T_SGIX = 33642,GL_TEXTURE_MAX_CLAMP_R_SGIX = 33643,GL_SCALEBIAS_HINT_SGIX = 33570,GL_INTERLACE_OML = 35200,GL_INTERLACE_READ_OML = 35201,GL_FORMAT_SUBSAMPLE_24_24_OML = 35202,GL_FORMAT_SUBSAMPLE_244_244_OML = 35203,GL_PACK_RESAMPLE_OML = 35204,GL_UNPACK_RESAMPLE_OML = 35205,GL_RESAMPLE_REPLICATE_OML = 35206,GL_RESAMPLE_ZERO_FILL_OML = 35207,GL_RESAMPLE_AVERAGE_OML = 35208,GL_RESAMPLE_DECIMATE_OML = 35209,GL_DEPTH_STENCIL_TO_RGBA_NV = 34926,GL_DEPTH_STENCIL_TO_BGRA_NV = 34927,GL_BUMP_ROT_MATRIX_ATI = 34677,GL_BUMP_ROT_MATRIX_SIZE_ATI = 34678,GL_BUMP_NUM_TEX_UNITS_ATI = 34679,GL_BUMP_TEX_UNITS_ATI = 34680,GL_DUDV_ATI = 34681,GL_DU8DV8_ATI = 34682,GL_BUMP_ENVMAP_ATI = 34683,GL_BUMP_TARGET_ATI = 34684,GL_FRAGMENT_SHADER_ATI = 35104,GL_REG_0_ATI = 35105,GL_REG_1_ATI = 35106,GL_REG_2_ATI = 35107,GL_REG_3_ATI = 35108,GL_REG_4_ATI = 35109,GL_REG_5_ATI = 35110,GL_REG_6_ATI = 35111,GL_REG_7_ATI = 35112,GL_REG_8_ATI = 35113,GL_REG_9_ATI = 35114,GL_REG_10_ATI = 35115,GL_REG_11_ATI = 35116,GL_REG_12_ATI = 35117,GL_REG_13_ATI = 35118,GL_REG_14_ATI = 35119,GL_REG_15_ATI = 35120,GL_REG_16_ATI = 35121,GL_REG_17_ATI = 35122,GL_REG_18_ATI = 35123,GL_REG_19_ATI = 35124,GL_REG_20_ATI = 35125,GL_REG_21_ATI = 35126,GL_REG_22_ATI = 35127,GL_REG_23_ATI = 35128,GL_REG_24_ATI = 35129,GL_REG_25_ATI = 35130,GL_REG_26_ATI = 35131,GL_REG_27_ATI = 35132,GL_REG_28_ATI = 35133,GL_REG_29_ATI = 35134,GL_REG_30_ATI = 35135,GL_REG_31_ATI = 35136,GL_CON_0_ATI = 35137,GL_CON_1_ATI = 35138,GL_CON_2_ATI = 35139,GL_CON_3_ATI = 35140,GL_CON_4_ATI = 35141,GL_CON_5_ATI = 35142,GL_CON_6_ATI = 35143,GL_CON_7_ATI = 35144,GL_CON_8_ATI = 35145,GL_CON_9_ATI = 35146,GL_CON_10_ATI = 35147,GL_CON_11_ATI = 35148,GL_CON_12_ATI = 35149,GL_CON_13_ATI = 35150,GL_CON_14_ATI = 35151,GL_CON_15_ATI = 35152,GL_CON_16_ATI = 35153,GL_CON_17_ATI = 35154,GL_CON_18_ATI = 35155,GL_CON_19_ATI = 35156,GL_CON_20_ATI = 35157,GL_CON_21_ATI = 35158,GL_CON_22_ATI = 35159,GL_CON_23_ATI = 35160,GL_CON_24_ATI = 35161,GL_CON_25_ATI = 35162,GL_CON_26_ATI = 35163,GL_CON_27_ATI = 35164,GL_CON_28_ATI = 35165,GL_CON_29_ATI = 35166,GL_CON_30_ATI = 35167,GL_CON_31_ATI = 35168,GL_MOV_ATI = 35169,GL_ADD_ATI = 35171,GL_MUL_ATI = 35172,GL_SUB_ATI = 35173,GL_DOT3_ATI = 35174,GL_DOT4_ATI = 35175,GL_MAD_ATI = 35176,GL_LERP_ATI = 35177,GL_CND_ATI = 35178,GL_CND0_ATI = 35179,GL_DOT2_ADD_ATI = 35180,GL_SECONDARY_INTERPOLATOR_ATI = 35181,GL_NUM_FRAGMENT_REGISTERS_ATI = 35182,GL_NUM_FRAGMENT_CONSTANTS_ATI = 35183,GL_NUM_PASSES_ATI = 35184,GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 35185,GL_NUM_INSTRUCTIONS_TOTAL_ATI = 35186,GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187,GL_NUM_LOOPBACK_COMPONENTS_ATI = 35188,GL_COLOR_ALPHA_PAIRING_ATI = 35189,GL_SWIZZLE_STR_ATI = 35190,GL_SWIZZLE_STQ_ATI = 35191,GL_SWIZZLE_STR_DR_ATI = 35192,GL_SWIZZLE_STQ_DQ_ATI = 35193,GL_SWIZZLE_STRQ_ATI = 35194,GL_SWIZZLE_STRQ_DQ_ATI = 35195,GL_RED_BIT_ATI = 1,GL_GREEN_BIT_ATI = 2,GL_BLUE_BIT_ATI = 4,GL_2X_BIT_ATI = 1,GL_4X_BIT_ATI = 2,GL_8X_BIT_ATI = 4,GL_HALF_BIT_ATI = 8,GL_QUARTER_BIT_ATI = 16,GL_EIGHTH_BIT_ATI = 32,GL_SATURATE_BIT_ATI = 64,GL_COMP_BIT_ATI = 2,GL_NEGATE_BIT_ATI = 4,GL_BIAS_BIT_ATI = 8,GL_PN_TRIANGLES_ATI = 34800,GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801,GL_PN_TRIANGLES_POINT_MODE_ATI = 34802,GL_PN_TRIANGLES_NORMAL_MODE_ATI = 34803,GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804,GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805,GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806,GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807,GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808,GL_STATIC_ATI = 34656,GL_DYNAMIC_ATI = 34657,GL_PRESERVE_ATI = 34658,GL_DISCARD_ATI = 34659,GL_OBJECT_BUFFER_SIZE_ATI = 34660,GL_OBJECT_BUFFER_USAGE_ATI = 34661,GL_ARRAY_OBJECT_BUFFER_ATI = 34662,GL_ARRAY_OBJECT_OFFSET_ATI = 34663,GL_VERTEX_SHADER_EXT = 34688,GL_VERTEX_SHADER_BINDING_EXT = 34689,GL_OP_INDEX_EXT = 34690,GL_OP_NEGATE_EXT = 34691,GL_OP_DOT3_EXT = 34692,GL_OP_DOT4_EXT = 34693,GL_OP_MUL_EXT = 34694,GL_OP_ADD_EXT = 34695,GL_OP_MADD_EXT = 34696,GL_OP_FRAC_EXT = 34697,GL_OP_MAX_EXT = 34698,GL_OP_MIN_EXT = 34699,GL_OP_SET_GE_EXT = 34700,GL_OP_SET_LT_EXT = 34701,GL_OP_CLAMP_EXT = 34702,GL_OP_FLOOR_EXT = 34703,GL_OP_ROUND_EXT = 34704,GL_OP_EXP_BASE_2_EXT = 34705,GL_OP_LOG_BASE_2_EXT = 34706,GL_OP_POWER_EXT = 34707,GL_OP_RECIP_EXT = 34708,GL_OP_RECIP_SQRT_EXT = 34709,GL_OP_SUB_EXT = 34710,GL_OP_CROSS_PRODUCT_EXT = 34711,GL_OP_MULTIPLY_MATRIX_EXT = 34712,GL_OP_MOV_EXT = 34713,GL_OUTPUT_VERTEX_EXT = 34714,GL_OUTPUT_COLOR0_EXT = 34715,GL_OUTPUT_COLOR1_EXT = 34716,GL_OUTPUT_TEXTURE_COORD0_EXT = 34717,GL_OUTPUT_TEXTURE_COORD1_EXT = 34718,GL_OUTPUT_TEXTURE_COORD2_EXT = 34719,GL_OUTPUT_TEXTURE_COORD3_EXT = 34720,GL_OUTPUT_TEXTURE_COORD4_EXT = 34721,GL_OUTPUT_TEXTURE_COORD5_EXT = 34722,GL_OUTPUT_TEXTURE_COORD6_EXT = 34723,GL_OUTPUT_TEXTURE_COORD7_EXT = 34724,GL_OUTPUT_TEXTURE_COORD8_EXT = 34725,GL_OUTPUT_TEXTURE_COORD9_EXT = 34726,GL_OUTPUT_TEXTURE_COORD10_EXT = 34727,GL_OUTPUT_TEXTURE_COORD11_EXT = 34728,GL_OUTPUT_TEXTURE_COORD12_EXT = 34729,GL_OUTPUT_TEXTURE_COORD13_EXT = 34730,GL_OUTPUT_TEXTURE_COORD14_EXT = 34731,GL_OUTPUT_TEXTURE_COORD15_EXT = 34732,GL_OUTPUT_TEXTURE_COORD16_EXT = 34733,GL_OUTPUT_TEXTURE_COORD17_EXT = 34734,GL_OUTPUT_TEXTURE_COORD18_EXT = 34735,GL_OUTPUT_TEXTURE_COORD19_EXT = 34736,GL_OUTPUT_TEXTURE_COORD20_EXT = 34737,GL_OUTPUT_TEXTURE_COORD21_EXT = 34738,GL_OUTPUT_TEXTURE_COORD22_EXT = 34739,GL_OUTPUT_TEXTURE_COORD23_EXT = 34740,GL_OUTPUT_TEXTURE_COORD24_EXT = 34741,GL_OUTPUT_TEXTURE_COORD25_EXT = 34742,GL_OUTPUT_TEXTURE_COORD26_EXT = 34743,GL_OUTPUT_TEXTURE_COORD27_EXT = 34744,GL_OUTPUT_TEXTURE_COORD28_EXT = 34745,GL_OUTPUT_TEXTURE_COORD29_EXT = 34746,GL_OUTPUT_TEXTURE_COORD30_EXT = 34747,GL_OUTPUT_TEXTURE_COORD31_EXT = 34748,GL_OUTPUT_FOG_EXT = 34749,GL_SCALAR_EXT = 34750,GL_VECTOR_EXT = 34751,GL_MATRIX_EXT = 34752,GL_VARIANT_EXT = 34753,GL_INVARIANT_EXT = 34754,GL_LOCAL_CONSTANT_EXT = 34755,GL_LOCAL_EXT = 34756,GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757,GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 34758,GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759,GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760,GL_MAX_VERTEX_SHADER_LOCALS_EXT = 34761,GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762,GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763,GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764,GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765,GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766,GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 34767,GL_VERTEX_SHADER_VARIANTS_EXT = 34768,GL_VERTEX_SHADER_INVARIANTS_EXT = 34769,GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770,GL_VERTEX_SHADER_LOCALS_EXT = 34771,GL_VERTEX_SHADER_OPTIMIZED_EXT = 34772,GL_X_EXT = 34773,GL_Y_EXT = 34774,GL_Z_EXT = 34775,GL_W_EXT = 34776,GL_NEGATIVE_X_EXT = 34777,GL_NEGATIVE_Y_EXT = 34778,GL_NEGATIVE_Z_EXT = 34779,GL_NEGATIVE_W_EXT = 34780,GL_ZERO_EXT = 34781,GL_ONE_EXT = 34782,GL_NEGATIVE_ONE_EXT = 34783,GL_NORMALIZED_RANGE_EXT = 34784,GL_FULL_RANGE_EXT = 34785,GL_CURRENT_VERTEX_EXT = 34786,GL_MVP_MATRIX_EXT = 34787,GL_VARIANT_VALUE_EXT = 34788,GL_VARIANT_DATATYPE_EXT = 34789,GL_VARIANT_ARRAY_STRIDE_EXT = 34790,GL_VARIANT_ARRAY_TYPE_EXT = 34791,GL_VARIANT_ARRAY_EXT = 34792,GL_VARIANT_ARRAY_POINTER_EXT = 34793,GL_INVARIANT_VALUE_EXT = 34794,GL_INVARIANT_DATATYPE_EXT = 34795,GL_LOCAL_CONSTANT_VALUE_EXT = 34796,GL_LOCAL_CONSTANT_DATATYPE_EXT = 34797,GL_MAX_VERTEX_STREAMS_ATI = 34667,GL_VERTEX_STREAM0_ATI = 34668,GL_VERTEX_STREAM1_ATI = 34669,GL_VERTEX_STREAM2_ATI = 34670,GL_VERTEX_STREAM3_ATI = 34671,GL_VERTEX_STREAM4_ATI = 34672,GL_VERTEX_STREAM5_ATI = 34673,GL_VERTEX_STREAM6_ATI = 34674,GL_VERTEX_STREAM7_ATI = 34675,GL_VERTEX_SOURCE_ATI = 34676,GL_ELEMENT_ARRAY_ATI = 34664,GL_ELEMENT_ARRAY_TYPE_ATI = 34665,GL_ELEMENT_ARRAY_POINTER_ATI = 34666,GL_QUAD_MESH_SUN = 34324,GL_TRIANGLE_MESH_SUN = 34325,GL_SLICE_ACCUM_SUN = 34252,GL_MULTISAMPLE_FILTER_HINT_NV = 34100,GL_DEPTH_CLAMP_NV = 34383,GL_PIXEL_COUNTER_BITS_NV = 34916,GL_CURRENT_OCCLUSION_QUERY_ID_NV = 34917,GL_PIXEL_COUNT_NV = 34918,GL_PIXEL_COUNT_AVAILABLE_NV = 34919,GL_POINT_SPRITE_NV = 34913,GL_COORD_REPLACE_NV = 34914,GL_POINT_SPRITE_R_MODE_NV = 34915,GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 34896,GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 34897,GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34898,GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 34899,GL_OFFSET_HILO_TEXTURE_2D_NV = 34900,GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 34901,GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 34902,GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34903,GL_DEPENDENT_HILO_TEXTURE_2D_NV = 34904,GL_DEPENDENT_RGB_TEXTURE_3D_NV = 34905,GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 34906,GL_DOT_PRODUCT_PASS_THROUGH_NV = 34907,GL_DOT_PRODUCT_TEXTURE_1D_NV = 34908,GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 34909,GL_HILO8_NV = 34910,GL_SIGNED_HILO8_NV = 34911,GL_FORCE_BLUE_TO_ONE_NV = 34912,GL_STENCIL_TEST_TWO_SIDE_EXT = 35088,GL_ACTIVE_STENCIL_FACE_EXT = 35089,GL_TEXT_FRAGMENT_SHADER_ATI = 33280,GL_UNPACK_CLIENT_STORAGE_APPLE = 34226,GL_ELEMENT_ARRAY_APPLE = 34664,GL_ELEMENT_ARRAY_TYPE_APPLE = 34665,GL_ELEMENT_ARRAY_POINTER_APPLE = 34666,GL_DRAW_PIXELS_APPLE = 35338,GL_FENCE_APPLE = 35339,GL_VERTEX_ARRAY_BINDING_APPLE = 34229,GL_VERTEX_ARRAY_RANGE_APPLE = 34077,GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078,GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079,GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081,GL_STORAGE_CACHED_APPLE = 34238,GL_STORAGE_SHARED_APPLE = 34239,GL_YCBCR_422_APPLE = 34233,GL_UNSIGNED_SHORT_8_8_APPLE = 34234,GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235,GL_RGB_S3TC = 33696,GL_RGB4_S3TC = 33697,GL_RGBA_S3TC = 33698,GL_RGBA4_S3TC = 33699,GL_MAX_DRAW_BUFFERS_ATI = 34852,GL_DRAW_BUFFER0_ATI = 34853,GL_DRAW_BUFFER1_ATI = 34854,GL_DRAW_BUFFER2_ATI = 34855,GL_DRAW_BUFFER3_ATI = 34856,GL_DRAW_BUFFER4_ATI = 34857,GL_DRAW_BUFFER5_ATI = 34858,GL_DRAW_BUFFER6_ATI = 34859,GL_DRAW_BUFFER7_ATI = 34860,GL_DRAW_BUFFER8_ATI = 34861,GL_DRAW_BUFFER9_ATI = 34862,GL_DRAW_BUFFER10_ATI = 34863,GL_DRAW_BUFFER11_ATI = 34864,GL_DRAW_BUFFER12_ATI = 34865,GL_DRAW_BUFFER13_ATI = 34866,GL_DRAW_BUFFER14_ATI = 34867,GL_DRAW_BUFFER15_ATI = 34868,GL_TYPE_RGBA_FLOAT_ATI = 34848,GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 34869,GL_MODULATE_ADD_ATI = 34628,GL_MODULATE_SIGNED_ADD_ATI = 34629,GL_MODULATE_SUBTRACT_ATI = 34630,GL_RGBA_FLOAT32_ATI = 34836,GL_RGB_FLOAT32_ATI = 34837,GL_ALPHA_FLOAT32_ATI = 34838,GL_INTENSITY_FLOAT32_ATI = 34839,GL_LUMINANCE_FLOAT32_ATI = 34840,GL_LUMINANCE_ALPHA_FLOAT32_ATI = 34841,GL_RGBA_FLOAT16_ATI = 34842,GL_RGB_FLOAT16_ATI = 34843,GL_ALPHA_FLOAT16_ATI = 34844,GL_INTENSITY_FLOAT16_ATI = 34845,GL_LUMINANCE_FLOAT16_ATI = 34846,GL_LUMINANCE_ALPHA_FLOAT16_ATI = 34847,GL_FLOAT_R_NV = 34944,GL_FLOAT_RG_NV = 34945,GL_FLOAT_RGB_NV = 34946,GL_FLOAT_RGBA_NV = 34947,GL_FLOAT_R16_NV = 34948,GL_FLOAT_R32_NV = 34949,GL_FLOAT_RG16_NV = 34950,GL_FLOAT_RG32_NV = 34951,GL_FLOAT_RGB16_NV = 34952,GL_FLOAT_RGB32_NV = 34953,GL_FLOAT_RGBA16_NV = 34954,GL_FLOAT_RGBA32_NV = 34955,GL_TEXTURE_FLOAT_COMPONENTS_NV = 34956,GL_FLOAT_CLEAR_COLOR_VALUE_NV = 34957,GL_FLOAT_RGBA_MODE_NV = 34958,GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 34920,GL_FRAGMENT_PROGRAM_NV = 34928,GL_MAX_TEXTURE_COORDS_NV = 34929,GL_MAX_TEXTURE_IMAGE_UNITS_NV = 34930,GL_FRAGMENT_PROGRAM_BINDING_NV = 34931,GL_PROGRAM_ERROR_STRING_NV = 34932,GL_HALF_FLOAT_NV = 5131,GL_WRITE_PIXEL_DATA_RANGE_NV = 34936,GL_READ_PIXEL_DATA_RANGE_NV = 34937,GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938,GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939,GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940,GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 34941,GL_PRIMITIVE_RESTART_NV = 34136,GL_PRIMITIVE_RESTART_INDEX_NV = 34137,GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 34959,GL_STENCIL_BACK_FUNC_ATI = 34816,GL_STENCIL_BACK_FAIL_ATI = 34817,GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818,GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819,GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738,GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739,GL_DEPTH_BOUNDS_TEST_EXT = 34960,GL_DEPTH_BOUNDS_EXT = 34961,GL_MIRROR_CLAMP_EXT = 34626,GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627,GL_MIRROR_CLAMP_TO_BORDER_EXT = 35090,GL_BLEND_EQUATION_RGB_EXT = 32777,GL_BLEND_EQUATION_ALPHA_EXT = 34877,GL_PACK_INVERT_MESA = 34648,GL_UNSIGNED_SHORT_8_8_MESA = 34234,GL_UNSIGNED_SHORT_8_8_REV_MESA = 34235,GL_YCBCR_MESA = 34647,GL_PIXEL_PACK_BUFFER_EXT = 35051,GL_PIXEL_UNPACK_BUFFER_EXT = 35052,GL_PIXEL_PACK_BUFFER_BINDING_EXT = 35053,GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 35055,GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060,GL_MAX_PROGRAM_CALL_DEPTH_NV = 35061,GL_MAX_PROGRAM_IF_DEPTH_NV = 35062,GL_MAX_PROGRAM_LOOP_DEPTH_NV = 35063,GL_MAX_PROGRAM_LOOP_COUNT_NV = 35064,GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286,GL_MAX_RENDERBUFFER_SIZE_EXT = 34024,GL_FRAMEBUFFER_BINDING_EXT = 36006,GL_RENDERBUFFER_BINDING_EXT = 36007,GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048,GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049,GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050,GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051,GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052,GL_FRAMEBUFFER_COMPLETE_EXT = 36053,GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054,GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055,GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 36056,GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057,GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058,GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059,GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060,GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061,GL_MAX_COLOR_ATTACHMENTS_EXT = 36063,GL_COLOR_ATTACHMENT0_EXT = 36064,GL_COLOR_ATTACHMENT1_EXT = 36065,GL_COLOR_ATTACHMENT2_EXT = 36066,GL_COLOR_ATTACHMENT3_EXT = 36067,GL_COLOR_ATTACHMENT4_EXT = 36068,GL_COLOR_ATTACHMENT5_EXT = 36069,GL_COLOR_ATTACHMENT6_EXT = 36070,GL_COLOR_ATTACHMENT7_EXT = 36071,GL_COLOR_ATTACHMENT8_EXT = 36072,GL_COLOR_ATTACHMENT9_EXT = 36073,GL_COLOR_ATTACHMENT10_EXT = 36074,GL_COLOR_ATTACHMENT11_EXT = 36075,GL_COLOR_ATTACHMENT12_EXT = 36076,GL_COLOR_ATTACHMENT13_EXT = 36077,GL_COLOR_ATTACHMENT14_EXT = 36078,GL_COLOR_ATTACHMENT15_EXT = 36079,GL_DEPTH_ATTACHMENT_EXT = 36096,GL_STENCIL_ATTACHMENT_EXT = 36128,GL_FRAMEBUFFER_EXT = 36160,GL_RENDERBUFFER_EXT = 36161,GL_RENDERBUFFER_WIDTH_EXT = 36162,GL_RENDERBUFFER_HEIGHT_EXT = 36163,GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164,GL_STENCIL_INDEX1_EXT = 36166,GL_STENCIL_INDEX4_EXT = 36167,GL_STENCIL_INDEX8_EXT = 36168,GL_STENCIL_INDEX16_EXT = 36169,GL_RENDERBUFFER_RED_SIZE_EXT = 36176,GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177,GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178,GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179,GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180,GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181,GL_DEPTH_STENCIL_EXT = 34041,GL_UNSIGNED_INT_24_8_EXT = 34042,GL_DEPTH24_STENCIL8_EXT = 35056,GL_TEXTURE_STENCIL_SIZE_EXT = 35057,GL_STENCIL_TAG_BITS_EXT = 35058,GL_STENCIL_CLEAR_TAG_VALUE_EXT = 35059,GL_SRGB_EXT = 35904,GL_SRGB8_EXT = 35905,GL_SRGB_ALPHA_EXT = 35906,GL_SRGB8_ALPHA8_EXT = 35907,GL_SLUMINANCE_ALPHA_EXT = 35908,GL_SLUMINANCE8_ALPHA8_EXT = 35909,GL_SLUMINANCE_EXT = 35910,GL_SLUMINANCE8_EXT = 35911,GL_COMPRESSED_SRGB_EXT = 35912,GL_COMPRESSED_SRGB_ALPHA_EXT = 35913,GL_COMPRESSED_SLUMINANCE_EXT = 35914,GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915,GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,GL_READ_FRAMEBUFFER_EXT = 36008,GL_DRAW_FRAMEBUFFER_EXT = 36009,GL_READ_FRAMEBUFFER_BINDING_EXT = 36006,GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36010,GL_RENDERBUFFER_SAMPLES_EXT = 36011,GL_TEXTURE_1D_STACK_MESAX = 34649,GL_TEXTURE_2D_STACK_MESAX = 34650,GL_PROXY_TEXTURE_1D_STACK_MESAX = 34651,GL_PROXY_TEXTURE_2D_STACK_MESAX = 34652,GL_TEXTURE_1D_STACK_BINDING_MESAX = 34653,GL_TEXTURE_2D_STACK_BINDING_MESAX = 34654,GL_TIME_ELAPSED_EXT = 35007,GL_VERSION_1_4 = 1,GL_VERSION_1_5 = 1,GL_VERSION_2_0 = 1,GL_VERSION_2_1 = 1,GL_ARB_transpose_matrix = 1,GL_ARB_multisample = 1,GL_ARB_texture_env_add = 1,GL_ARB_texture_cube_map = 1,GL_ARB_texture_compression = 1,GL_ARB_texture_border_clamp = 1,GL_ARB_point_parameters = 1,GL_ARB_vertex_blend = 1,GL_ARB_matrix_palette = 1,GL_ARB_texture_env_combine = 1,GL_ARB_texture_env_crossbar = 1,GL_ARB_texture_env_dot3 = 1,GL_ARB_texture_mirrored_repeat = 1,GL_ARB_depth_texture = 1,GL_ARB_shadow = 1,GL_ARB_shadow_ambient = 1,GL_ARB_window_pos = 1,GL_ARB_vertex_program = 1,GL_ARB_fragment_program = 1,GL_ARB_vertex_buffer_object = 1,GL_ARB_occlusion_query = 1,GL_ARB_shader_objects = 1,GL_ARB_vertex_shader = 1,GL_ARB_fragment_shader = 1,GL_ARB_shading_language_100 = 1,GL_ARB_texture_non_power_of_two = 1,GL_ARB_point_sprite = 1,GL_ARB_fragment_program_shadow = 1,GL_ARB_draw_buffers = 1,GL_ARB_texture_rectangle = 1,GL_ARB_color_buffer_float = 1,GL_ARB_half_float_pixel = 1,GL_ARB_texture_float = 1,GL_ARB_pixel_buffer_object = 1,GL_EXT_abgr = 1,GL_EXT_blend_color = 1,GL_EXT_polygon_offset = 1,GL_EXT_texture = 1,GL_EXT_texture3D = 1,GL_SGIS_texture_filter4 = 1,GL_EXT_subtexture = 1,GL_EXT_copy_texture = 1,GL_EXT_histogram = 1,GL_EXT_convolution = 1,GL_SGI_color_matrix = 1,GL_SGI_color_table = 1,GL_SGIX_pixel_texture = 1,GL_SGIS_pixel_texture = 1,GL_SGIS_texture4D = 1,GL_SGI_texture_color_table = 1,GL_EXT_cmyka = 1,GL_EXT_texture_object = 1,GL_SGIS_detail_texture = 1,GL_SGIS_sharpen_texture = 1,GL_EXT_packed_pixels = 1,GL_SGIS_texture_lod = 1,GL_SGIS_multisample = 1,GL_EXT_rescale_normal = 1,GL_EXT_vertex_array = 1,GL_EXT_misc_attribute = 1,GL_SGIS_generate_mipmap = 1,GL_SGIX_clipmap = 1,GL_SGIX_shadow = 1,GL_SGIS_texture_edge_clamp = 1,GL_SGIS_texture_border_clamp = 1,GL_EXT_blend_minmax = 1,GL_EXT_blend_subtract = 1,GL_EXT_blend_logic_op = 1,GL_SGIX_interlace = 1,GL_SGIX_pixel_tiles = 1,GL_SGIX_texture_select = 1,GL_SGIX_sprite = 1,GL_SGIX_texture_multi_buffer = 1,GL_EXT_point_parameters = 1,GL_SGIS_point_parameters = 1,GL_SGIX_instruments = 1,GL_SGIX_texture_scale_bias = 1,GL_SGIX_framezoom = 1,GL_SGIX_tag_sample_buffer = 1,GL_SGIX_polynomial_ffd = 1,GL_SGIX_reference_plane = 1,GL_SGIX_flush_raster = 1,GL_SGIX_depth_texture = 1,GL_SGIS_fog_function = 1,GL_SGIX_fog_offset = 1,GL_HP_image_transform = 1,GL_HP_convolution_border_modes = 1,GL_SGIX_texture_add_env = 1,GL_EXT_color_subtable = 1,GL_PGI_vertex_hints = 1,GL_PGI_misc_hints = 1,GL_EXT_paletted_texture = 1,GL_EXT_clip_volume_hint = 1,GL_SGIX_list_priority = 1,GL_SGIX_ir_instrument1 = 1,GL_SGIX_calligraphic_fragment = 1,GL_SGIX_texture_lod_bias = 1,GL_SGIX_shadow_ambient = 1,GL_EXT_index_texture = 1,GL_EXT_index_material = 1,GL_EXT_index_func = 1,GL_EXT_index_array_formats = 1,GL_EXT_compiled_vertex_array = 1,GL_EXT_cull_vertex = 1,GL_SGIX_ycrcb = 1,GL_SGIX_fragment_lighting = 1,GL_IBM_rasterpos_clip = 1,GL_HP_texture_lighting = 1,GL_EXT_draw_range_elements = 1,GL_WIN_phong_shading = 1,GL_WIN_specular_fog = 1,GL_EXT_light_texture = 1,GL_SGIX_blend_alpha_minmax = 1,GL_EXT_bgra = 1,GL_SGIX_async = 1,GL_SGIX_async_pixel = 1,GL_SGIX_async_histogram = 1,GL_INTEL_parallel_arrays = 1,GL_HP_occlusion_test = 1,GL_EXT_pixel_transform = 1,GL_EXT_pixel_transform_color_table = 1,GL_EXT_shared_texture_palette = 1,GL_EXT_separate_specular_color = 1,GL_EXT_secondary_color = 1,GL_EXT_texture_perturb_normal = 1,GL_EXT_multi_draw_arrays = 1,GL_EXT_fog_coord = 1,GL_REND_screen_coordinates = 1,GL_EXT_coordinate_frame = 1,GL_EXT_texture_env_combine = 1,GL_APPLE_specular_vector = 1,GL_APPLE_transform_hint = 1,GL_SGIX_fog_scale = 1,GL_SUNX_constant_data = 1,GL_SUN_global_alpha = 1,GL_SUN_triangle_list = 1,GL_SUN_vertex = 1,GL_EXT_blend_func_separate = 1,GL_INGR_blend_func_separate = 1,GL_INGR_color_clamp = 1,GL_INGR_interlace_read = 1,GL_EXT_stencil_wrap = 1,GL_EXT_422_pixels = 1,GL_NV_texgen_reflection = 1,GL_SUN_convolution_border_modes = 1,GL_EXT_texture_env_add = 1,GL_EXT_texture_lod_bias = 1,GL_EXT_texture_filter_anisotropic = 1,GL_EXT_vertex_weighting = 1,GL_NV_light_max_exponent = 1,GL_NV_vertex_array_range = 1,GL_NV_register_combiners = 1,GL_NV_fog_distance = 1,GL_NV_texgen_emboss = 1,GL_NV_blend_square = 1,GL_NV_texture_env_combine4 = 1,GL_MESA_resize_buffers = 1,GL_MESA_window_pos = 1,GL_IBM_cull_vertex = 1,GL_IBM_multimode_draw_arrays = 1,GL_IBM_vertex_array_lists = 1,GL_SGIX_subsample = 1,GL_SGIX_ycrcba = 1,GL_SGIX_ycrcb_subsample = 1,GL_SGIX_depth_pass_instrument = 1,GL_3DFX_texture_compression_FXT1 = 1,GL_3DFX_multisample = 1,GL_3DFX_tbuffer = 1,GL_EXT_multisample = 1,GL_SGIX_vertex_preclip = 1,GL_SGIX_convolution_accuracy = 1,GL_SGIX_resample = 1,GL_SGIS_point_line_texgen = 1,GL_SGIS_texture_color_mask = 1,GL_SGIX_igloo_interface = 1,GL_EXT_texture_env_dot3 = 1,GL_ATI_texture_mirror_once = 1,GL_NV_fence = 1,GL_NV_evaluators = 1,GL_NV_packed_depth_stencil = 1,GL_NV_register_combiners2 = 1,GL_NV_texture_compression_vtc = 1,GL_NV_texture_rectangle = 1,GL_NV_texture_shader = 1,GL_NV_texture_shader2 = 1,GL_NV_vertex_array_range2 = 1,GL_NV_vertex_program = 1,GL_SGIX_texture_coordinate_clamp = 1,GL_SGIX_scalebias_hint = 1,GL_OML_interlace = 1,GL_OML_subsample = 1,GL_OML_resample = 1,GL_NV_copy_depth_to_color = 1,GL_ATI_envmap_bumpmap = 1,GL_ATI_fragment_shader = 1,GL_ATI_pn_triangles = 1,GL_ATI_vertex_array_object = 1,GL_EXT_vertex_shader = 1,GL_ATI_vertex_streams = 1,GL_ATI_element_array = 1,GL_SUN_mesh_array = 1,GL_SUN_slice_accum = 1,GL_NV_multisample_filter_hint = 1,GL_NV_depth_clamp = 1,GL_NV_occlusion_query = 1,GL_NV_point_sprite = 1,GL_NV_texture_shader3 = 1,GL_NV_vertex_program1_1 = 1,GL_EXT_shadow_funcs = 1,GL_EXT_stencil_two_side = 1,GL_ATI_text_fragment_shader = 1,GL_APPLE_client_storage = 1,GL_APPLE_element_array = 1,GL_APPLE_fence = 1,GL_APPLE_vertex_array_object = 1,GL_APPLE_vertex_array_range = 1,GL_APPLE_ycbcr_422 = 1,GL_S3_s3tc = 1,GL_ATI_draw_buffers = 1,GL_ATI_pixel_format_float = 1,GL_ATI_texture_env_combine3 = 1,GL_ATI_texture_float = 1,GL_NV_float_buffer = 1,GL_NV_fragment_program = 1,GL_NV_half_float = 1,GL_NV_pixel_data_range = 1,GL_NV_primitive_restart = 1,GL_NV_texture_expand_normal = 1,GL_NV_vertex_program2 = 1,GL_ATI_map_object_buffer = 1,GL_ATI_separate_stencil = 1,GL_ATI_vertex_attrib_array_object = 1,GL_OES_read_format = 1,GL_EXT_depth_bounds_test = 1,GL_EXT_texture_mirror_clamp = 1,GL_EXT_blend_equation_separate = 1,GL_MESA_pack_invert = 1,GL_MESA_ycbcr_texture = 1,GL_EXT_pixel_buffer_object = 1,GL_NV_fragment_program_option = 1,GL_NV_fragment_program2 = 1,GL_NV_vertex_program2_option = 1,GL_NV_vertex_program3 = 1,GL_EXT_framebuffer_object = 1,GL_GREMEDY_string_marker = 1,GL_EXT_packed_depth_stencil = 1,GL_EXT_stencil_clear_tag = 1,GL_EXT_texture_sRGB = 1,GL_EXT_framebuffer_blit = 1,GL_EXT_framebuffer_multisample = 1,GL_MESAX_texture_stack = 1,GL_EXT_timer_query = 1,GL_EXT_gpu_program_parameters = 1,GL_MESA_shader_debug = 1,GL_DEBUG_OBJECT_MESA = 34649,GL_DEBUG_PRINT_MESA = 34650,GL_DEBUG_ASSERT_MESA = 34651,GL_MESA_trace = 1,GL_TRACE_ALL_BITS_MESA = 65535,GL_TRACE_OPERATIONS_BIT_MESA = 1,GL_TRACE_PRIMITIVES_BIT_MESA = 2,GL_TRACE_ARRAYS_BIT_MESA = 4,GL_TRACE_TEXTURES_BIT_MESA = 8,GL_TRACE_PIXELS_BIT_MESA = 16,GL_TRACE_ERRORS_BIT_MESA = 32,GL_TRACE_MASK_MESA = 34645,GL_TRACE_NAME_MESA = 34646,GL_MESA_packed_depth_stencil = 1,GL_DEPTH_STENCIL_MESA = 34640,GL_UNSIGNED_INT_24_8_MESA = 34641,GL_UNSIGNED_INT_8_24_REV_MESA = 34642,GL_UNSIGNED_SHORT_15_1_MESA = 34643,GL_UNSIGNED_SHORT_1_15_REV_MESA = 34644,GL_MESA_program_debug = 1,GL_FRAGMENT_PROGRAM_POSITION_MESA = 35760,GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 35761,GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 35762,GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 35763,GL_VERTEX_PROGRAM_POSITION_MESA = 35764,GL_VERTEX_PROGRAM_CALLBACK_MESA = 35765,GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 35766,GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 35767,GL_ATI_blend_equation_separate = 1,GL_ALPHA_BLEND_EQUATION_ATI = 34877,};
enum MACRO_GS {GS = 10,};
enum MACRO_IF {IF_GET_IFACE = 0x1,IF_GET_PROTO = 0x2,IF_IFACE_V35 = 0x1000,IF_IFACE_V24 = 0x1001,IF_IFACE_X21 = 0x1002,IF_IFACE_T1 = 0x1003,IF_IFACE_E1 = 0x1004,IF_IFACE_SYNC_SERIAL = 0x1005,IF_IFACE_X21D = 0x1006,IF_PROTO_HDLC = 0x2000,IF_PROTO_PPP = 0x2001,IF_PROTO_CISCO = 0x2002,IF_PROTO_FR = 0x2003,IF_PROTO_FR_ADD_PVC = 0x2004,IF_PROTO_FR_DEL_PVC = 0x2005,IF_PROTO_X25 = 0x2006,IF_PROTO_HDLC_ETH = 0x2007,IF_PROTO_FR_ADD_ETH_PVC = 0x2008,IF_PROTO_FR_DEL_ETH_PVC = 0x2009,IF_PROTO_FR_PVC = 0x200A,IF_PROTO_FR_ETH_PVC = 0x200B,IF_PROTO_RAW = 0x200C,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,};
enum MACRO_IO {_LFS_ASYNCHRONOUS_IO = 1,_POSIX_PRIORITIZED_IO = 200112,_LFS64_ASYNCHRONOUS_IO = 1,};
enum MACRO_IP {IP_OPTIONS = 4,IP_HDRINCL = 3,IP_TOS = 1,IP_TTL = 2,IP_RECVOPTS = 6,IP_RETOPTS = 7,IP_MULTICAST_IF = 32,IP_MULTICAST_TTL = 33,IP_MULTICAST_LOOP = 34,IP_ADD_MEMBERSHIP = 35,IP_DROP_MEMBERSHIP = 36,IP_UNBLOCK_SOURCE = 37,IP_BLOCK_SOURCE = 38,IP_ADD_SOURCE_MEMBERSHIP = 39,IP_DROP_SOURCE_MEMBERSHIP = 40,IP_MSFILTER = 41,};
enum MACRO_IW {IW_PRIV_TYPE_MASK = 0x7000,IW_PRIV_TYPE_NONE = 0x0,IW_PRIV_TYPE_BYTE = 0x1000,IW_PRIV_TYPE_CHAR = 0x2000,IW_PRIV_TYPE_INT = 0x4000,IW_PRIV_TYPE_FLOAT = 0x5000,IW_PRIV_TYPE_ADDR = 0x6000,IW_PRIV_SIZE_FIXED = 0x800,IW_PRIV_SIZE_MASK = 0x7FF,IW_MAX_FREQUENCIES = 0x20,IW_MAX_BITRATES = 0x20,IW_MAX_TXPOWER = 0x8,IW_MAX_SPY = 0x8,IW_MAX_AP = 0x40,IW_ESSID_MAX_SIZE = 0x20,IW_MODE_AUTO = 0x0,IW_MODE_ADHOC = 0x1,IW_MODE_INFRA = 0x2,IW_MODE_MASTER = 0x3,IW_MODE_REPEAT = 0x4,IW_MODE_SECOND = 0x5,IW_MODE_MONITOR = 0x6,IW_QUAL_QUAL_UPDATED = 0x1,IW_QUAL_LEVEL_UPDATED = 0x2,IW_QUAL_NOISE_UPDATED = 0x4,IW_QUAL_ALL_UPDATED = 0x7,IW_QUAL_DBM = 0x8,IW_QUAL_QUAL_INVALID = 0x10,IW_QUAL_LEVEL_INVALID = 0x20,IW_QUAL_NOISE_INVALID = 0x40,IW_QUAL_ALL_INVALID = 0x70,IW_FREQ_AUTO = 0x0,IW_FREQ_FIXED = 0x1,IW_MAX_ENCODING_SIZES = 0x8,IW_ENCODING_TOKEN_MAX = 0x40,IW_ENCODE_INDEX = 0xFF,IW_ENCODE_FLAGS = 0xFF00,IW_ENCODE_MODE = 0xF000,IW_ENCODE_DISABLED = 0x8000,IW_ENCODE_ENABLED = 0x0,IW_ENCODE_RESTRICTED = 0x4000,IW_ENCODE_OPEN = 0x2000,IW_ENCODE_NOKEY = 0x800,IW_ENCODE_TEMP = 0x400,IW_POWER_ON = 0x0,IW_POWER_TYPE = 0xF000,IW_POWER_PERIOD = 0x1000,IW_POWER_TIMEOUT = 0x2000,IW_POWER_SAVING = 0x4000,IW_POWER_MODE = 0xF00,IW_POWER_UNICAST_R = 0x100,IW_POWER_MULTICAST_R = 0x200,IW_POWER_ALL_R = 0x300,IW_POWER_FORCE_S = 0x400,IW_POWER_REPEATER = 0x800,IW_POWER_MODIFIER = 0xF,IW_POWER_MIN = 0x1,IW_POWER_MAX = 0x2,IW_POWER_RELATIVE = 0x4,IW_TXPOW_TYPE = 0xFF,IW_TXPOW_DBM = 0x0,IW_TXPOW_MWATT = 0x1,IW_TXPOW_RELATIVE = 0x2,IW_TXPOW_RANGE = 0x1000,IW_RETRY_ON = 0x0,IW_RETRY_TYPE = 0xF000,IW_RETRY_LIMIT = 0x1000,IW_RETRY_LIFETIME = 0x2000,IW_RETRY_MODIFIER = 0xFF,IW_RETRY_MIN = 0x1,IW_RETRY_MAX = 0x2,IW_RETRY_RELATIVE = 0x4,IW_RETRY_SHORT = 0x10,IW_RETRY_LONG = 0x20,IW_SCAN_DEFAULT = 0x0,IW_SCAN_ALL_ESSID = 0x1,IW_SCAN_THIS_ESSID = 0x2,IW_SCAN_ALL_FREQ = 0x4,IW_SCAN_THIS_FREQ = 0x8,IW_SCAN_ALL_MODE = 0x10,IW_SCAN_THIS_MODE = 0x20,IW_SCAN_ALL_RATE = 0x40,IW_SCAN_THIS_RATE = 0x80,IW_SCAN_TYPE_ACTIVE = 0x0,IW_SCAN_TYPE_PASSIVE = 0x1,IW_SCAN_MAX_DATA = 0x1000,IW_CUSTOM_MAX = 0x100,IW_GENERIC_IE_MAX = 0x400,IW_MLME_DEAUTH = 0x0,IW_MLME_DISASSOC = 0x1,IW_AUTH_INDEX = 0xFFF,IW_AUTH_FLAGS = 0xF000,IW_AUTH_WPA_VERSION = 0x0,IW_AUTH_CIPHER_PAIRWISE = 0x1,IW_AUTH_CIPHER_GROUP = 0x2,IW_AUTH_KEY_MGMT = 0x3,IW_AUTH_TKIP_COUNTERMEASURES = 0x4,IW_AUTH_DROP_UNENCRYPTED = 0x5,IW_AUTH_80211_AUTH_ALG = 0x6,IW_AUTH_WPA_ENABLED = 0x7,IW_AUTH_RX_UNENCRYPTED_EAPOL = 0x8,IW_AUTH_ROAMING_CONTROL = 0x9,IW_AUTH_PRIVACY_INVOKED = 0xA,IW_AUTH_WPA_VERSION_DISABLED = 0x1,IW_AUTH_WPA_VERSION_WPA = 0x2,IW_AUTH_WPA_VERSION_WPA2 = 0x4,IW_AUTH_CIPHER_NONE = 0x1,IW_AUTH_CIPHER_WEP40 = 0x2,IW_AUTH_CIPHER_TKIP = 0x4,IW_AUTH_CIPHER_CCMP = 0x8,IW_AUTH_CIPHER_WEP104 = 0x10,IW_AUTH_KEY_MGMT_802_1X = 0x1,IW_AUTH_KEY_MGMT_PSK = 0x2,IW_AUTH_ALG_OPEN_SYSTEM = 0x1,IW_AUTH_ALG_SHARED_KEY = 0x2,IW_AUTH_ALG_LEAP = 0x4,IW_AUTH_ROAMING_ENABLE = 0x0,IW_AUTH_ROAMING_DISABLE = 0x1,IW_ENCODE_SEQ_MAX_SIZE = 0x8,IW_ENCODE_ALG_NONE = 0x0,IW_ENCODE_ALG_WEP = 0x1,IW_ENCODE_ALG_TKIP = 0x2,IW_ENCODE_ALG_CCMP = 0x3,IW_ENCODE_EXT_TX_SEQ_VALID = 0x1,IW_ENCODE_EXT_RX_SEQ_VALID = 0x2,IW_ENCODE_EXT_GROUP_KEY = 0x4,IW_ENCODE_EXT_SET_TX_KEY = 0x8,IW_MICFAILURE_KEY_ID = 0x3,IW_MICFAILURE_GROUP = 0x4,IW_MICFAILURE_PAIRWISE = 0x8,IW_MICFAILURE_STAKEY = 0x10,IW_MICFAILURE_COUNT = 0x60,IW_ENC_CAPA_WPA = 0x1,IW_ENC_CAPA_WPA2 = 0x2,IW_ENC_CAPA_CIPHER_TKIP = 0x4,IW_ENC_CAPA_CIPHER_CCMP = 0x8,IW_EVENT_CAPA_K_0 = 0x4000050,IW_EVENT_CAPA_K_1 = 0x400,IW_MODUL_ALL = 0x0,IW_MODUL_FH = 0x1,IW_MODUL_DS = 0x2,IW_MODUL_CCK = 0x4,IW_MODUL_11B = 0x6,IW_MODUL_PBCC = 0x8,IW_MODUL_OFDM_A = 0x10,IW_MODUL_11A = 0x10,IW_MODUL_11AB = 0x16,IW_MODUL_OFDM_G = 0x20,IW_MODUL_11G = 0x26,IW_MODUL_11AG = 0x36,IW_MODUL_TURBO = 0x40,IW_MODUL_CUSTOM = 0x40000000,IW_BITRATE_TYPE = 0xFF,IW_BITRATE_UNICAST = 0x1,IW_BITRATE_BROADCAST = 0x2,IW_PMKSA_ADD = 0x1,IW_PMKSA_REMOVE = 0x2,IW_PMKSA_FLUSH = 0x3,IW_PMKID_LEN = 0x10,IW_PMKID_CAND_PREAUTH = 0x1,};
enum MACRO_KB {KB_84 = 0x1,KB_101 = 0x2,KB_OTHER = 0x3,};
enum MACRO_KD {KD_TEXT = 0x0,KD_GRAPHICS = 0x1,KD_TEXT0 = 0x2,KD_TEXT1 = 0x3,};
enum MACRO_LL {LL_NONE = 0,LL_EXACT_MATCH = 1,LL_IGNORE_INT_VER = 2,LL_REQUIRE_MINOR = 4,LL_EXPORTS = 8,LL_DELAY_LOAD = 16,LL_DELTA = 32,};
enum MACRO_LM {LM_MODE = 1,LM_FORWARDMASK = 2,LM_SLC = 3,};
enum MACRO_LT {LT_EOS_CHAR = 0,LT_PATHSEP_CHAR = 58,};
enum MACRO_MB {MB_LEN_MAX = 16,};
enum MACRO_MF {MF_CLEAR_DTR = 1,MF_CLEAR_RTS = 2,MF_REOPEN = 128,};
enum MACRO_MM {MM_NULLLBL = 0,MM_NULLSEV = 0,MM_NULLTXT = 0,MM_NULLACT = 0,MM_NULLTAG = 0,};
enum MACRO_MS {MS_ASYNC = 1,MS_SYNC = 4,MS_INVALIDATE = 2,};
enum MACRO_MT {MT_ISUNKNOWN = 0x1,MT_ISQIC02 = 0x2,MT_ISWT5150 = 0x3,MT_ISARCHIVE_5945L2 = 0x4,MT_ISCMSJ500 = 0x5,MT_ISTDC3610 = 0x6,MT_ISARCHIVE_VP60I = 0x7,MT_ISARCHIVE_2150L = 0x8,MT_ISARCHIVE_2060L = 0x9,MT_ISARCHIVESC499 = 0xA,MT_ISQIC02_ALL_FEATURES = 0xF,MT_ISWT5099EEN24 = 0x11,MT_ISTEAC_MT2ST = 0x12,MT_ISEVEREX_FT40A = 0x32,MT_ISDDS1 = 0x51,MT_ISDDS2 = 0x52,MT_ISSCSI1 = 0x71,MT_ISSCSI2 = 0x72,MT_ISFTAPE_UNKNOWN = 0x800000,MT_ISFTAPE_FLAG = 0x800000,MT_ST_BLKSIZE_SHIFT = 0x0,MT_ST_BLKSIZE_MASK = 0xFFFFFF,MT_ST_DENSITY_SHIFT = 0x18,MT_ST_DENSITY_MASK = 0xFF000000,MT_ST_SOFTERR_SHIFT = 0x0,MT_ST_SOFTERR_MASK = 0xFFFF,MT_ST_OPTIONS = 0xF0000000,MT_ST_BOOLEANS = 0x10000000,MT_ST_SETBOOLEANS = 0x30000000,MT_ST_CLEARBOOLEANS = 0x40000000,MT_ST_WRITE_THRESHOLD = 0x20000000,MT_ST_DEF_BLKSIZE = 0x50000000,MT_ST_DEF_OPTIONS = 0x60000000,MT_ST_BUFFER_WRITES = 0x1,MT_ST_ASYNC_WRITES = 0x2,MT_ST_READ_AHEAD = 0x4,MT_ST_DEBUGGING = 0x8,MT_ST_TWO_FM = 0x10,MT_ST_FAST_MTEOM = 0x20,MT_ST_AUTO_LOCK = 0x40,MT_ST_DEF_WRITES = 0x80,MT_ST_CAN_BSR = 0x100,MT_ST_NO_BLKLIMS = 0x200,MT_ST_CAN_PARTITIONS = 0x400,MT_ST_SCSI2LOGICAL = 0x800,MT_ST_CLEAR_DEFAULT = 0xFFFFF,MT_ST_DEF_DENSITY = 0x60100000,MT_ST_DEF_COMPRESSION = 0x60200000,MT_ST_DEF_DRVBUFFER = 0x60300000,MT_ST_HPLOADER_OFFSET = 0x2710,};
enum MACRO_ND {ND_ROUTER_SOLICIT = 133,ND_ROUTER_ADVERT = 134,ND_NEIGHBOR_SOLICIT = 135,ND_NEIGHBOR_ADVERT = 136,ND_REDIRECT = 137,ND_RA_FLAG_MANAGED = 128,ND_RA_FLAG_OTHER = 64,ND_RA_FLAG_HOME_AGENT = 32,ND_NA_FLAG_ROUTER = 128,ND_NA_FLAG_SOLICITED = 64,ND_NA_FLAG_OVERRIDE = 32,ND_OPT_SOURCE_LINKADDR = 1,ND_OPT_TARGET_LINKADDR = 2,ND_OPT_PREFIX_INFORMATION = 3,ND_OPT_REDIRECTED_HEADER = 4,ND_OPT_MTU = 5,ND_OPT_RTR_ADV_INTERVAL = 7,ND_OPT_HOME_AGENT_INFO = 8,ND_OPT_PI_FLAG_ONLINK = 128,ND_OPT_PI_FLAG_AUTO = 64,ND_OPT_PI_FLAG_RADDR = 32,};
enum MACRO_NI {NI_MAXHOST = 1025,NI_MAXSERV = 32,NI_NUMERICHOST = 1,NI_NUMERICSERV = 2,NI_NOFQDN = 4,NI_NAMEREQD = 8,NI_DGRAM = 16,};
enum MACRO_NL {NL_SETD = 1,NL_CAT_LOCALE = 1,};
enum MACRO_NO {NO_JUSTIFICATION = 0,};
enum MACRO_NR {NR_ICMP_TYPES = 18,};
enum MACRO_NS {NS_PACKETSZ = 512,NS_MAXDNAME = 1025,NS_MAXCDNAME = 255,NS_MAXLABEL = 63,NS_HFIXEDSZ = 12,NS_QFIXEDSZ = 4,NS_RRFIXEDSZ = 10,NS_INT32SZ = 4,NS_INT16SZ = 2,NS_INT8SZ = 1,NS_INADDRSZ = 4,NS_IN6ADDRSZ = 16,NS_CMPRSFLGS = 192,NS_DEFAULTPORT = 53,NS_TSIG_FUDGE = 300,NS_TSIG_TCP_COUNT = 100,NS_TSIG_ERROR_NO_TSIG = -10,NS_TSIG_ERROR_NO_SPACE = -11,NS_TSIG_ERROR_FORMERR = -12,NS_KEY_TYPEMASK = 49152,NS_KEY_TYPE_AUTH_CONF = 0,NS_KEY_TYPE_CONF_ONLY = 32768,NS_KEY_TYPE_AUTH_ONLY = 16384,NS_KEY_TYPE_NO_KEY = 49152,NS_KEY_NO_AUTH = 32768,NS_KEY_NO_CONF = 16384,NS_KEY_RESERVED2 = 8192,NS_KEY_EXTENDED_FLAGS = 4096,NS_KEY_RESERVED4 = 2048,NS_KEY_RESERVED5 = 1024,NS_KEY_NAME_TYPE = 768,NS_KEY_NAME_USER = 0,NS_KEY_NAME_ENTITY = 512,NS_KEY_NAME_ZONE = 256,NS_KEY_NAME_RESERVED = 768,NS_KEY_RESERVED8 = 128,NS_KEY_RESERVED9 = 64,NS_KEY_RESERVED10 = 32,NS_KEY_RESERVED11 = 16,NS_KEY_SIGNATORYMASK = 15,NS_KEY_RESERVED_BITMASK = 11504,NS_KEY_RESERVED_BITMASK2 = 65535,NS_ALG_MD5RSA = 1,NS_ALG_DH = 2,NS_ALG_DSA = 3,NS_ALG_DSS = 3,NS_ALG_EXPIRE_ONLY = 253,NS_ALG_PRIVATE_OID = 254,NS_KEY_PROT_TLS = 1,NS_KEY_PROT_EMAIL = 2,NS_KEY_PROT_DNSSEC = 3,NS_KEY_PROT_IPSEC = 4,NS_KEY_PROT_ANY = 255,NS_MD5RSA_MIN_BITS = 512,NS_MD5RSA_MAX_BITS = 2552,NS_MD5RSA_MAX_BYTES = 5107,NS_MD5RSA_MAX_BASE64 = 6812,NS_MD5RSA_MIN_SIZE = 64,NS_MD5RSA_MAX_SIZE = 319,NS_DSA_SIG_SIZE = 41,NS_DSA_MIN_SIZE = 213,NS_DSA_MAX_BYTES = 405,NS_SIG_TYPE = 0,NS_SIG_ALG = 2,NS_SIG_LABELS = 3,NS_SIG_OTTL = 4,NS_SIG_EXPIR = 8,NS_SIG_SIGNED = 12,NS_SIG_FOOT = 16,NS_SIG_SIGNER = 18,NS_NXT_BITS = 8,NS_NXT_MAX = 127,};
enum MACRO_NT {NT_PRSTATUS = 1,NT_FPREGSET = 2,NT_PRPSINFO = 3,NT_PRXREG = 4,NT_TASKSTRUCT = 4,NT_PLATFORM = 5,NT_AUXV = 6,NT_GWINDOWS = 7,NT_ASRS = 8,NT_PSTATUS = 10,NT_PSINFO = 13,NT_PRCRED = 14,NT_UTSNAME = 15,NT_LWPSTATUS = 16,NT_LWPSINFO = 17,NT_PRFPXREG = 20,NT_VERSION = 1,};
enum MACRO_OK {R_OK = 4,W_OK = 2,X_OK = 1,F_OK = 0,};
enum MACRO_OS {OS_CODE = 0x3,};
enum MACRO_PA {PA_FLAG_MASK = 0xFF00,PA_FLAG_LONG_LONG = 0x100,PA_FLAG_LONG_DOUBLE = 0x100,PA_FLAG_LONG = 0x200,PA_FLAG_SHORT = 0x400,PA_FLAG_PTR = 0x800,};
enum MACRO_PF {PF_X = 1,PF_W = 2,PF_R = 4,PF_MASKOS = 267386880,PF_MASKPROC = -268435456,};
enum MACRO_PN {PN_XNUM = 0xFFFF,};
enum MACRO_PO {PO_SEVERITY_WARNING = 0,PO_SEVERITY_ERROR = 1,PO_SEVERITY_FATAL_ERROR = 2,};
enum MACRO_PR {PR_SET_PDEATHSIG = 1,PR_GET_PDEATHSIG = 2,PR_GET_DUMPABLE = 3,PR_SET_DUMPABLE = 4,PR_GET_UNALIGN = 5,PR_SET_UNALIGN = 6,PR_UNALIGN_NOPRINT = 1,PR_UNALIGN_SIGBUS = 2,PR_GET_KEEPCAPS = 7,PR_SET_KEEPCAPS = 8,PR_GET_FPEMU = 9,PR_SET_FPEMU = 10,PR_FPEMU_NOPRINT = 1,PR_FPEMU_SIGFPE = 2,PR_GET_FPEXC = 11,PR_SET_FPEXC = 12,PR_FP_EXC_SW_ENABLE = 128,PR_FP_EXC_DIV = 65536,PR_FP_EXC_OVF = 131072,PR_FP_EXC_UND = 262144,PR_FP_EXC_RES = 524288,PR_FP_EXC_INV = 1048576,PR_FP_EXC_DISABLED = 0,PR_FP_EXC_NONRECOV = 1,PR_FP_EXC_ASYNC = 2,PR_FP_EXC_PRECISE = 3,PR_GET_TIMING = 13,PR_SET_TIMING = 14,PR_TIMING_STATISTICAL = 0,PR_TIMING_TIMESTAMP = 1,PR_SET_NAME = 15,PR_GET_NAME = 16,PR_GET_ENDIAN = 19,PR_SET_ENDIAN = 20,PR_ENDIAN_BIG = 0,PR_ENDIAN_LITTLE = 1,PR_ENDIAN_PPC_LITTLE = 2,};
enum MACRO_PT {PT_NULL = 0,PT_LOAD = 1,PT_DYNAMIC = 2,PT_INTERP = 3,PT_NOTE = 4,PT_SHLIB = 5,PT_PHDR = 6,PT_TLS = 7,PT_NUM = 8,PT_LOOS = 1610612736,PT_GNU_EH_FRAME = 1685382480,PT_GNU_STACK = 1685382481,PT_GNU_RELRO = 1685382482,PT_LOSUNW = 1879048186,PT_SUNWBSS = 1879048186,PT_SUNWSTACK = 1879048187,PT_HISUNW = 1879048191,PT_HIOS = 1879048191,PT_LOPROC = 1879048192,PT_HIPROC = 2147483647,};
enum MACRO_RB {RB_AUTOBOOT = 0x1234567,RB_HALT_SYSTEM = 0xCDEF0123,RB_ENABLE_CAD = 0x89ABCDEF,RB_DISABLE_CAD = 0x0,RB_POWER_OFF = 0x4321FEDC,};
enum MACRO_RE {RE_SYNTAX_EMACS = 0,RE_DUP_MAX = 32767,};
enum MACRO_RQ {RQ_PATHLEN = 1024,};
enum MACRO_RR {RR_Rotate_0 = 1,RR_Rotate_90 = 2,RR_Rotate_180 = 4,RR_Rotate_270 = 8,RR_Reflect_X = 16,RR_Reflect_Y = 32,};
enum MACRO_RS {RS_HIPRI = 0x1,};
enum MACRO_RT {RT_CLASS_UNSPEC = 0,RT_CLASS_DEFAULT = 253,RT_CLASS_MAIN = 254,RT_CLASS_LOCAL = 255,RT_CLASS_MAX = 255,};
enum MACRO_SA {SA_NOCLDSTOP = 1,SA_NOCLDWAIT = 2,SA_SIGINFO = 4,SA_ONSTACK = 134217728,SA_RESTART = 268435456,SA_NODEFER = 1073741824,SA_RESETHAND = -2147483648,SA_INTERRUPT = 536870912,SA_NOMASK = 1073741824,SA_ONESHOT = -2147483648,SA_STACK = 134217728,};
enum MACRO_SB {SB = 250,};
enum MACRO_SG {SG_DXFER_NONE = -1,SG_DXFER_TO_DEV = -2,SG_DXFER_FROM_DEV = -3,SG_DXFER_TO_FROM_DEV = -4,SG_FLAG_DIRECT_IO = 1,SG_FLAG_LUN_INHIBIT = 2,SG_FLAG_NO_DXFER = 65536,SG_INFO_OK_MASK = 1,SG_INFO_OK = 0,SG_INFO_CHECK = 1,SG_INFO_DIRECT_IO_MASK = 6,SG_INFO_INDIRECT_IO = 0,SG_INFO_DIRECT_IO = 2,SG_INFO_MIXED_IO = 4,SG_EMULATED_HOST = 8707,SG_SET_TRANSFORM = 8708,SG_GET_TRANSFORM = 8709,SG_SET_RESERVED_SIZE = 8821,SG_GET_RESERVED_SIZE = 8818,SG_GET_SCSI_ID = 8822,SG_SET_FORCE_LOW_DMA = 8825,SG_GET_LOW_DMA = 8826,SG_SET_FORCE_PACK_ID = 8827,SG_GET_PACK_ID = 8828,SG_GET_NUM_WAITING = 8829,SG_GET_SG_TABLESIZE = 8831,SG_GET_VERSION_NUM = 8834,SG_SCSI_RESET = 8836,SG_SCSI_RESET_NOTHING = 0,SG_SCSI_RESET_DEVICE = 1,SG_SCSI_RESET_BUS = 2,SG_SCSI_RESET_HOST = 3,SG_IO = 8837,SG_GET_REQUEST_TABLE = 8838,SG_SET_KEEP_ORPHAN = 8839,SG_GET_KEEP_ORPHAN = 8840,SG_SCATTER_SZ = 32768,SG_DEFAULT_RETRIES = 1,SG_DEF_FORCE_LOW_DMA = 0,SG_DEF_FORCE_PACK_ID = 0,SG_DEF_KEEP_ORPHAN = 0,SG_DEF_RESERVED_SIZE = 32768,SG_MAX_QUEUE = 16,SG_BIG_BUFF = 32768,SG_MAX_SENSE = 16,SG_SET_TIMEOUT = 8705,SG_GET_TIMEOUT = 8706,SG_GET_COMMAND_Q = 8816,SG_SET_COMMAND_Q = 8817,SG_SET_DEBUG = 8830,SG_NEXT_CMD_LEN = 8835,SG_DEF_COMMAND_Q = 0,SG_DEF_UNDERRUN_FLAG = 0,SG_LIB_CAT_ILLEGAL_REQ_WITH_INFO = 17,SG_LIB_CAT_MEDIUM_HARD_WITH_INFO = 18,};
enum MACRO_SI {SI_LOAD_SHIFT = 16,};
enum MACRO_SM {SM_MAXSTRLEN = 1024,SM_PROG = 100024,SM_VERS = 1,SM_STAT = 1,SM_MON = 2,SM_UNMON = 3,SM_UNMON_ALL = 4,SM_SIMU_CRASH = 5,};
enum MACRO_SO {SO_DEBUG = 1,SO_REUSEADDR = 2,SO_TYPE = 3,SO_ERROR = 4,SO_DONTROUTE = 5,SO_BROADCAST = 6,SO_SNDBUF = 7,SO_RCVBUF = 8,SO_SNDBUFFORCE = 32,SO_RCVBUFFORCE = 33,SO_KEEPALIVE = 9,SO_OOBINLINE = 10,SO_NO_CHECK = 11,SO_PRIORITY = 12,SO_LINGER = 13,SO_PASSCRED = 16,SO_PEERCRED = 17,SO_RCVLOWAT = 18,SO_SNDLOWAT = 19,SO_RCVTIMEO = 20,SO_SNDTIMEO = 21,SO_SECURITY_AUTHENTICATION = 22,SO_SECURITY_ENCRYPTION_TRANSPORT = 23,SO_SECURITY_ENCRYPTION_NETWORK = 24,SO_BINDTODEVICE = 25,SO_ATTACH_FILTER = 26,SO_DETACH_FILTER = 27,SO_PEERNAME = 28,SO_TIMESTAMP = 29,};
enum MACRO_SS {SS_ET_SUBSYSTEM_ABORTED = 748800,SS_ET_VERSION_MISMATCH = 748801,SS_ET_NULL_INV = 748802,SS_ET_NO_INFO_DIR = 748803,SS_ET_COMMAND_NOT_FOUND = 748804,SS_ET_LINE_ABORTED = 748805,SS_ET_EOF = 748806,SS_ET_PERMISSION_DENIED = 748807,SS_ET_TABLE_NOT_FOUND = 748808,SS_ET_NO_HELP_FILE = 748809,SS_ET_ESCAPE_DISABLED = 748810,SS_ET_UNIMPLEMENTED = 748811,};
enum MACRO_ST {ST_LIB_VERSION_CODE = 0xC1201,ST_SAMPLE_MAX = 0x7FFFFFFF,ST_SAMPLE_MIN = 0x80000000,ST_SIZE_MAX = 0xFFFFFFFF,ST_SSIZE_MAX = 0x7FFFFFFF,ST_SSIZE_MIN = 0x80000000,ST_LOOP_NONE = 0x0,ST_LOOP_8 = 0x20,ST_LOOP_SUSTAIN_DECAY = 0x40,ST_MAX_FILE_PRIVSIZE = 0x3E8,ST_MAX_EFFECT_PRIVSIZE = 0x3E8,ST_MAX_NLOOPS = 0x8,ST_FILE_STEREO = 0x1,ST_FILE_LOOPS = 0x2,ST_FILE_INSTR = 0x4,ST_FILE_SEEK = 0x8,ST_FILE_NOSTDIO = 0x10,ST_SIZE_BYTE = 0x1,ST_SIZE_8BIT = 0x1,ST_SIZE_WORD = 0x2,ST_SIZE_16BIT = 0x2,ST_SIZE_24BIT = 0x3,ST_SIZE_DWORD = 0x4,ST_SIZE_32BIT = 0x4,ST_SIZE_DDWORD = 0x8,ST_SIZE_64BIT = 0x8,ST_INFO_SIZE_MAX = 0x8,ST_ENCODING_UNSIGNED = 0x1,ST_ENCODING_SIGN2 = 0x2,ST_ENCODING_ULAW = 0x3,ST_ENCODING_ALAW = 0x4,ST_ENCODING_FLOAT = 0x5,ST_ENCODING_ADPCM = 0x6,ST_ENCODING_IMA_ADPCM = 0x7,ST_ENCODING_GSM = 0x8,ST_ENCODING_INV_ULAW = 0x9,ST_ENCODING_INV_ALAW = 0xA,ST_ENCODING_MP3 = 0xB,ST_ENCODING_VORBIS = 0xC,ST_ENCODING_MAX = 0xC,ST_EFF_CHAN = 0x1,ST_EFF_RATE = 0x2,ST_EFF_MCHAN = 0x4,ST_EFF_REPORT = 0x8,ST_SEEK_SET = 0x0,ST_EOF = 0xFFFFFFFF,ST_SUCCESS = 0x0,ST_EHDR = 0x7D0,ST_EFMT = 0x7D1,ST_ERATE = 0x7D2,ST_ENOMEM = 0x7D3,ST_EPERM = 0x7D4,ST_ENOTSUP = 0x7D5,ST_EINVAL = 0x7D6,ST_EFFMT = 0x7D7,};
enum MACRO_SV {SV_ONSTACK = 1,SV_INTERRUPT = 2,SV_RESETHAND = 4,};
enum MACRO_T1 {T1_MAX_DICT_DEPTH = 5,T1_MAX_SUBRS_CALLS = 16,T1_MAX_CHARSTRINGS_OPERANDS = 256,};
enum MACRO_TA {TA_BINARY = 1,TA_CRYPT = 2,TA_XDR = 4,TA_SEARCHABLE = 8,TA_CASE = 16,TA_MODIFIED = 32,TA_ASN1 = 64,};
enum MACRO_TD {TD_THR_ANY_USER_FLAGS = 0xFFFFFFFF,TD_THR_LOWEST_PRIORITY = 0xFFFFFFEC,TD_SIGNO_MASK = 0x0,TD_EVENTSIZE = 0x2,};
enum MACRO_TF {TF_MASK = 0x100,IF_MASK = 0x200,IOPL_MASK = 0x3000,NT_MASK = 0x4000,VM_MASK = 0x0,AC_MASK = 0x40000,VIF_MASK = 0x80000,VIP_MASK = 0x100000,ID_MASK = 0x200000,};
enum MACRO_TM {TM_NO_MATCH = -2,};
enum MACRO_TR {TR_OK = 0,TR_EWRITE = 1,TR_EREAD = 2,TR_UNDERRUN = 3,TR_OVERRUN = 4,TR_ILLEGAL = 5,TR_MEDIUM = 6,TR_BUSY = 7,TR_NOTREADY = 8,TR_FAULT = 9,TR_UNKNOWN = 10,TR_STREAMING = 11,};
enum MACRO_TS {TS_Raw = 57,TS_Scaled = 58,};
enum MACRO_TT {TT_PLATFORM_APPLE_UNICODE = 0,TT_PLATFORM_MACINTOSH = 1,TT_PLATFORM_ISO = 2,TT_PLATFORM_MICROSOFT = 3,TT_PLATFORM_CUSTOM = 4,TT_PLATFORM_ADOBE = 7,TT_APPLE_ID_DEFAULT = 0,TT_APPLE_ID_UNICODE_1_1 = 1,TT_APPLE_ID_ISO_10646 = 2,TT_APPLE_ID_UNICODE_2_0 = 3,TT_APPLE_ID_UNICODE_32 = 4,TT_MAC_ID_ROMAN = 0,TT_MAC_ID_JAPANESE = 1,TT_MAC_ID_TRADITIONAL_CHINESE = 2,TT_MAC_ID_KOREAN = 3,TT_MAC_ID_ARABIC = 4,TT_MAC_ID_HEBREW = 5,TT_MAC_ID_GREEK = 6,TT_MAC_ID_RUSSIAN = 7,TT_MAC_ID_RSYMBOL = 8,TT_MAC_ID_DEVANAGARI = 9,TT_MAC_ID_GURMUKHI = 10,TT_MAC_ID_GUJARATI = 11,TT_MAC_ID_ORIYA = 12,TT_MAC_ID_BENGALI = 13,TT_MAC_ID_TAMIL = 14,TT_MAC_ID_TELUGU = 15,TT_MAC_ID_KANNADA = 16,TT_MAC_ID_MALAYALAM = 17,TT_MAC_ID_SINHALESE = 18,TT_MAC_ID_BURMESE = 19,TT_MAC_ID_KHMER = 20,TT_MAC_ID_THAI = 21,TT_MAC_ID_LAOTIAN = 22,TT_MAC_ID_GEORGIAN = 23,TT_MAC_ID_ARMENIAN = 24,TT_MAC_ID_MALDIVIAN = 25,TT_MAC_ID_SIMPLIFIED_CHINESE = 25,TT_MAC_ID_TIBETAN = 26,TT_MAC_ID_MONGOLIAN = 27,TT_MAC_ID_GEEZ = 28,TT_MAC_ID_SLAVIC = 29,TT_MAC_ID_VIETNAMESE = 30,TT_MAC_ID_SINDHI = 31,TT_MAC_ID_UNINTERP = 32,TT_ISO_ID_7BIT_ASCII = 0,TT_ISO_ID_10646 = 1,TT_ISO_ID_8859_1 = 2,TT_MS_ID_SYMBOL_CS = 0,TT_MS_ID_UNICODE_CS = 1,TT_MS_ID_SJIS = 2,TT_MS_ID_GB2312 = 3,TT_MS_ID_BIG_5 = 4,TT_MS_ID_WANSUNG = 5,TT_MS_ID_JOHAB = 6,TT_MS_ID_UCS_4 = 10,TT_ADOBE_ID_STANDARD = 0,TT_ADOBE_ID_EXPERT = 1,TT_ADOBE_ID_CUSTOM = 2,TT_ADOBE_ID_LATIN_1 = 3,TT_MAC_LANGID_ENGLISH = 0,TT_MAC_LANGID_FRENCH = 1,TT_MAC_LANGID_GERMAN = 2,TT_MAC_LANGID_ITALIAN = 3,TT_MAC_LANGID_DUTCH = 4,TT_MAC_LANGID_SWEDISH = 5,TT_MAC_LANGID_SPANISH = 6,TT_MAC_LANGID_DANISH = 7,TT_MAC_LANGID_PORTUGUESE = 8,TT_MAC_LANGID_NORWEGIAN = 9,TT_MAC_LANGID_HEBREW = 10,TT_MAC_LANGID_JAPANESE = 11,TT_MAC_LANGID_ARABIC = 12,TT_MAC_LANGID_FINNISH = 13,TT_MAC_LANGID_GREEK = 14,TT_MAC_LANGID_ICELANDIC = 15,TT_MAC_LANGID_MALTESE = 16,TT_MAC_LANGID_TURKISH = 17,TT_MAC_LANGID_CROATIAN = 18,TT_MAC_LANGID_CHINESE_TRADITIONAL = 19,TT_MAC_LANGID_URDU = 20,TT_MAC_LANGID_HINDI = 21,TT_MAC_LANGID_THAI = 22,TT_MAC_LANGID_KOREAN = 23,TT_MAC_LANGID_LITHUANIAN = 24,TT_MAC_LANGID_POLISH = 25,TT_MAC_LANGID_HUNGARIAN = 26,TT_MAC_LANGID_ESTONIAN = 27,TT_MAC_LANGID_LETTISH = 28,TT_MAC_LANGID_SAAMISK = 29,TT_MAC_LANGID_FAEROESE = 30,TT_MAC_LANGID_FARSI = 31,TT_MAC_LANGID_RUSSIAN = 32,TT_MAC_LANGID_CHINESE_SIMPLIFIED = 33,TT_MAC_LANGID_FLEMISH = 34,TT_MAC_LANGID_IRISH = 35,TT_MAC_LANGID_ALBANIAN = 36,TT_MAC_LANGID_ROMANIAN = 37,TT_MAC_LANGID_CZECH = 38,TT_MAC_LANGID_SLOVAK = 39,TT_MAC_LANGID_SLOVENIAN = 40,TT_MAC_LANGID_YIDDISH = 41,TT_MAC_LANGID_SERBIAN = 42,TT_MAC_LANGID_MACEDONIAN = 43,TT_MAC_LANGID_BULGARIAN = 44,TT_MAC_LANGID_UKRAINIAN = 45,TT_MAC_LANGID_BYELORUSSIAN = 46,TT_MAC_LANGID_UZBEK = 47,TT_MAC_LANGID_KAZAKH = 48,TT_MAC_LANGID_AZERBAIJANI = 49,TT_MAC_LANGID_AZERBAIJANI_CYRILLIC_SCRIPT = 49,TT_MAC_LANGID_AZERBAIJANI_ARABIC_SCRIPT = 50,TT_MAC_LANGID_ARMENIAN = 51,TT_MAC_LANGID_GEORGIAN = 52,TT_MAC_LANGID_MOLDAVIAN = 53,TT_MAC_LANGID_KIRGHIZ = 54,TT_MAC_LANGID_TAJIKI = 55,TT_MAC_LANGID_TURKMEN = 56,TT_MAC_LANGID_MONGOLIAN = 57,TT_MAC_LANGID_MONGOLIAN_MONGOLIAN_SCRIPT = 57,TT_MAC_LANGID_MONGOLIAN_CYRILLIC_SCRIPT = 58,TT_MAC_LANGID_PASHTO = 59,TT_MAC_LANGID_KURDISH = 60,TT_MAC_LANGID_KASHMIRI = 61,TT_MAC_LANGID_SINDHI = 62,TT_MAC_LANGID_TIBETAN = 63,TT_MAC_LANGID_NEPALI = 64,TT_MAC_LANGID_SANSKRIT = 65,TT_MAC_LANGID_MARATHI = 66,TT_MAC_LANGID_BENGALI = 67,TT_MAC_LANGID_ASSAMESE = 68,TT_MAC_LANGID_GUJARATI = 69,TT_MAC_LANGID_PUNJABI = 70,TT_MAC_LANGID_ORIYA = 71,TT_MAC_LANGID_MALAYALAM = 72,TT_MAC_LANGID_KANNADA = 73,TT_MAC_LANGID_TAMIL = 74,TT_MAC_LANGID_TELUGU = 75,TT_MAC_LANGID_SINHALESE = 76,TT_MAC_LANGID_BURMESE = 77,TT_MAC_LANGID_KHMER = 78,TT_MAC_LANGID_LAO = 79,TT_MAC_LANGID_VIETNAMESE = 80,TT_MAC_LANGID_INDONESIAN = 81,TT_MAC_LANGID_TAGALOG = 82,TT_MAC_LANGID_MALAY_ROMAN_SCRIPT = 83,TT_MAC_LANGID_MALAY_ARABIC_SCRIPT = 84,TT_MAC_LANGID_AMHARIC = 85,TT_MAC_LANGID_TIGRINYA = 86,TT_MAC_LANGID_GALLA = 87,TT_MAC_LANGID_SOMALI = 88,TT_MAC_LANGID_SWAHILI = 89,TT_MAC_LANGID_RUANDA = 90,TT_MAC_LANGID_RUNDI = 91,TT_MAC_LANGID_CHEWA = 92,TT_MAC_LANGID_MALAGASY = 93,TT_MAC_LANGID_ESPERANTO = 94,TT_MAC_LANGID_WELSH = 128,TT_MAC_LANGID_BASQUE = 129,TT_MAC_LANGID_CATALAN = 130,TT_MAC_LANGID_LATIN = 131,TT_MAC_LANGID_QUECHUA = 132,TT_MAC_LANGID_GUARANI = 133,TT_MAC_LANGID_AYMARA = 134,TT_MAC_LANGID_TATAR = 135,TT_MAC_LANGID_UIGHUR = 136,TT_MAC_LANGID_DZONGKHA = 137,TT_MAC_LANGID_JAVANESE = 138,TT_MAC_LANGID_SUNDANESE = 139,TT_MAC_LANGID_GALICIAN = 140,TT_MAC_LANGID_AFRIKAANS = 141,TT_MAC_LANGID_BRETON = 142,TT_MAC_LANGID_INUKTITUT = 143,TT_MAC_LANGID_SCOTTISH_GAELIC = 144,TT_MAC_LANGID_MANX_GAELIC = 145,TT_MAC_LANGID_IRISH_GAELIC = 146,TT_MAC_LANGID_TONGAN = 147,TT_MAC_LANGID_GREEK_POLYTONIC = 148,TT_MAC_LANGID_GREELANDIC = 149,TT_MAC_LANGID_AZERBAIJANI_ROMAN_SCRIPT = 150,TT_MS_LANGID_ARABIC_GENERAL = 1,TT_MS_LANGID_ARABIC_SAUDI_ARABIA = 1025,TT_MS_LANGID_ARABIC_IRAQ = 2049,TT_MS_LANGID_ARABIC_EGYPT = 3073,TT_MS_LANGID_ARABIC_LIBYA = 4097,TT_MS_LANGID_ARABIC_ALGERIA = 5121,TT_MS_LANGID_ARABIC_MOROCCO = 6145,TT_MS_LANGID_ARABIC_TUNISIA = 7169,TT_MS_LANGID_ARABIC_OMAN = 8193,TT_MS_LANGID_ARABIC_YEMEN = 9217,TT_MS_LANGID_ARABIC_SYRIA = 10241,TT_MS_LANGID_ARABIC_JORDAN = 11265,TT_MS_LANGID_ARABIC_LEBANON = 12289,TT_MS_LANGID_ARABIC_KUWAIT = 13313,TT_MS_LANGID_ARABIC_UAE = 14337,TT_MS_LANGID_ARABIC_BAHRAIN = 15361,TT_MS_LANGID_ARABIC_QATAR = 16385,TT_MS_LANGID_BULGARIAN_BULGARIA = 1026,TT_MS_LANGID_CATALAN_SPAIN = 1027,TT_MS_LANGID_CHINESE_GENERAL = 4,TT_MS_LANGID_CHINESE_TAIWAN = 1028,TT_MS_LANGID_CHINESE_PRC = 2052,TT_MS_LANGID_CHINESE_HONG_KONG = 3076,TT_MS_LANGID_CHINESE_SINGAPORE = 4100,TT_MS_LANGID_CHINESE_MACAU = 5124,TT_MS_LANGID_CZECH_CZECH_REPUBLIC = 1029,TT_MS_LANGID_DANISH_DENMARK = 1030,TT_MS_LANGID_GERMAN_GERMANY = 1031,TT_MS_LANGID_GERMAN_SWITZERLAND = 2055,TT_MS_LANGID_GERMAN_AUSTRIA = 3079,TT_MS_LANGID_GERMAN_LUXEMBOURG = 4103,TT_MS_LANGID_GERMAN_LIECHTENSTEI = 5127,TT_MS_LANGID_GREEK_GREECE = 1032,TT_MS_LANGID_ENGLISH_GENERAL = 9,TT_MS_LANGID_ENGLISH_UNITED_STATES = 1033,TT_MS_LANGID_ENGLISH_UNITED_KINGDOM = 2057,TT_MS_LANGID_ENGLISH_AUSTRALIA = 3081,TT_MS_LANGID_ENGLISH_CANADA = 4105,TT_MS_LANGID_ENGLISH_NEW_ZEALAND = 5129,TT_MS_LANGID_ENGLISH_IRELAND = 6153,TT_MS_LANGID_ENGLISH_SOUTH_AFRICA = 7177,TT_MS_LANGID_ENGLISH_JAMAICA = 8201,TT_MS_LANGID_ENGLISH_CARIBBEAN = 9225,TT_MS_LANGID_ENGLISH_BELIZE = 10249,TT_MS_LANGID_ENGLISH_TRINIDAD = 11273,TT_MS_LANGID_ENGLISH_ZIMBABWE = 12297,TT_MS_LANGID_ENGLISH_PHILIPPINES = 13321,TT_MS_LANGID_ENGLISH_INDONESIA = 14345,TT_MS_LANGID_ENGLISH_HONG_KONG = 15369,TT_MS_LANGID_ENGLISH_INDIA = 16393,TT_MS_LANGID_ENGLISH_MALAYSIA = 17417,TT_MS_LANGID_ENGLISH_SINGAPORE = 18441,TT_MS_LANGID_SPANISH_SPAIN_TRADITIONAL_SORT = 1034,TT_MS_LANGID_SPANISH_MEXICO = 2058,TT_MS_LANGID_SPANISH_SPAIN_INTERNATIONAL_SORT = 3082,TT_MS_LANGID_SPANISH_GUATEMALA = 4106,TT_MS_LANGID_SPANISH_COSTA_RICA = 5130,TT_MS_LANGID_SPANISH_PANAMA = 6154,TT_MS_LANGID_SPANISH_DOMINICAN_REPUBLIC = 7178,TT_MS_LANGID_SPANISH_VENEZUELA = 8202,TT_MS_LANGID_SPANISH_COLOMBIA = 9226,TT_MS_LANGID_SPANISH_PERU = 10250,TT_MS_LANGID_SPANISH_ARGENTINA = 11274,TT_MS_LANGID_SPANISH_ECUADOR = 12298,TT_MS_LANGID_SPANISH_CHILE = 13322,TT_MS_LANGID_SPANISH_URUGUAY = 14346,TT_MS_LANGID_SPANISH_PARAGUAY = 15370,TT_MS_LANGID_SPANISH_BOLIVIA = 16394,TT_MS_LANGID_SPANISH_EL_SALVADOR = 17418,TT_MS_LANGID_SPANISH_HONDURAS = 18442,TT_MS_LANGID_SPANISH_NICARAGUA = 19466,TT_MS_LANGID_SPANISH_PUERTO_RICO = 20490,TT_MS_LANGID_SPANISH_UNITED_STATES = 21514,TT_MS_LANGID_SPANISH_LATIN_AMERICA = 58378,TT_MS_LANGID_FINNISH_FINLAND = 1035,TT_MS_LANGID_FRENCH_FRANCE = 1036,TT_MS_LANGID_FRENCH_BELGIUM = 2060,TT_MS_LANGID_FRENCH_CANADA = 3084,TT_MS_LANGID_FRENCH_SWITZERLAND = 4108,TT_MS_LANGID_FRENCH_LUXEMBOURG = 5132,TT_MS_LANGID_FRENCH_MONACO = 6156,TT_MS_LANGID_FRENCH_WEST_INDIES = 7180,TT_MS_LANGID_FRENCH_REUNION = 8204,TT_MS_LANGID_FRENCH_CONGO = 9228,TT_MS_LANGID_FRENCH_ZAIRE = 9228,TT_MS_LANGID_FRENCH_SENEGAL = 10252,TT_MS_LANGID_FRENCH_CAMEROON = 11276,TT_MS_LANGID_FRENCH_COTE_D_IVOIRE = 12300,TT_MS_LANGID_FRENCH_MALI = 13324,TT_MS_LANGID_FRENCH_MOROCCO = 14348,TT_MS_LANGID_FRENCH_HAITI = 15372,TT_MS_LANGID_FRENCH_NORTH_AFRICA = 58380,TT_MS_LANGID_HEBREW_ISRAEL = 1037,TT_MS_LANGID_HUNGARIAN_HUNGARY = 1038,TT_MS_LANGID_ICELANDIC_ICELAND = 1039,TT_MS_LANGID_ITALIAN_ITALY = 1040,TT_MS_LANGID_ITALIAN_SWITZERLAND = 2064,TT_MS_LANGID_JAPANESE_JAPAN = 1041,TT_MS_LANGID_KOREAN_EXTENDED_WANSUNG_KOREA = 1042,TT_MS_LANGID_KOREAN_JOHAB_KOREA = 2066,TT_MS_LANGID_DUTCH_NETHERLANDS = 1043,TT_MS_LANGID_DUTCH_BELGIUM = 2067,TT_MS_LANGID_NORWEGIAN_NORWAY_BOKMAL = 1044,TT_MS_LANGID_NORWEGIAN_NORWAY_NYNORSK = 2068,TT_MS_LANGID_POLISH_POLAND = 1045,TT_MS_LANGID_PORTUGUESE_BRAZIL = 1046,TT_MS_LANGID_PORTUGUESE_PORTUGAL = 2070,TT_MS_LANGID_RHAETO_ROMANIC_SWITZERLAND = 1047,TT_MS_LANGID_ROMANIAN_ROMANIA = 1048,TT_MS_LANGID_MOLDAVIAN_MOLDAVIA = 2072,TT_MS_LANGID_RUSSIAN_RUSSIA = 1049,TT_MS_LANGID_RUSSIAN_MOLDAVIA = 2073,TT_MS_LANGID_CROATIAN_CROATIA = 1050,TT_MS_LANGID_SERBIAN_SERBIA_LATIN = 2074,TT_MS_LANGID_SERBIAN_SERBIA_CYRILLIC = 3098,TT_MS_LANGID_CROATIAN_BOSNIA_HERZEGOVINA = 4122,TT_MS_LANGID_BOSNIAN_BOSNIA_HERZEGOVINA = 5146,TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_LATIN = 6170,TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_CYRILLIC = 6170,TT_MS_LANGID_SLOVAK_SLOVAKIA = 1051,TT_MS_LANGID_ALBANIAN_ALBANIA = 1052,TT_MS_LANGID_SWEDISH_SWEDEN = 1053,TT_MS_LANGID_SWEDISH_FINLAND = 2077,TT_MS_LANGID_THAI_THAILAND = 1054,TT_MS_LANGID_TURKISH_TURKEY = 1055,TT_MS_LANGID_URDU_PAKISTAN = 1056,TT_MS_LANGID_URDU_INDIA = 2080,TT_MS_LANGID_INDONESIAN_INDONESIA = 1057,TT_MS_LANGID_UKRAINIAN_UKRAINE = 1058,TT_MS_LANGID_BELARUSIAN_BELARUS = 1059,TT_MS_LANGID_SLOVENE_SLOVENIA = 1060,TT_MS_LANGID_ESTONIAN_ESTONIA = 1061,TT_MS_LANGID_LATVIAN_LATVIA = 1062,TT_MS_LANGID_LITHUANIAN_LITHUANIA = 1063,TT_MS_LANGID_CLASSIC_LITHUANIAN_LITHUANIA = 2087,TT_MS_LANGID_TAJIK_TAJIKISTAN = 1064,TT_MS_LANGID_FARSI_IRAN = 1065,TT_MS_LANGID_VIETNAMESE_VIET_NAM = 1066,TT_MS_LANGID_ARMENIAN_ARMENIA = 1067,TT_MS_LANGID_AZERI_AZERBAIJAN_LATIN = 1068,TT_MS_LANGID_AZERI_AZERBAIJAN_CYRILLIC = 2092,TT_MS_LANGID_BASQUE_SPAIN = 1069,TT_MS_LANGID_SORBIAN_GERMANY = 1070,TT_MS_LANGID_MACEDONIAN_MACEDONIA = 1071,TT_MS_LANGID_SUTU_SOUTH_AFRICA = 1072,TT_MS_LANGID_TSONGA_SOUTH_AFRICA = 1073,TT_MS_LANGID_TSWANA_SOUTH_AFRICA = 1074,TT_MS_LANGID_VENDA_SOUTH_AFRICA = 1075,TT_MS_LANGID_XHOSA_SOUTH_AFRICA = 1076,TT_MS_LANGID_ZULU_SOUTH_AFRICA = 1077,TT_MS_LANGID_AFRIKAANS_SOUTH_AFRICA = 1078,TT_MS_LANGID_GEORGIAN_GEORGIA = 1079,TT_MS_LANGID_FAEROESE_FAEROE_ISLANDS = 1080,TT_MS_LANGID_HINDI_INDIA = 1081,TT_MS_LANGID_MALTESE_MALTA = 1082,TT_MS_LANGID_SAMI_NORTHERN_NORWAY = 1083,TT_MS_LANGID_SAMI_NORTHERN_SWEDEN = 2107,TT_MS_LANGID_SAMI_NORTHERN_FINLAND = 3131,TT_MS_LANGID_SAMI_LULE_NORWAY = 4155,TT_MS_LANGID_SAMI_LULE_SWEDEN = 5179,TT_MS_LANGID_SAMI_SOUTHERN_NORWAY = 6203,TT_MS_LANGID_SAMI_SOUTHERN_SWEDEN = 7227,TT_MS_LANGID_SAMI_SKOLT_FINLAND = 8251,TT_MS_LANGID_SAMI_INARI_FINLAND = 9275,TT_MS_LANGID_SAAMI_LAPONIA = 1083,TT_MS_LANGID_SCOTTISH_GAELIC_UNITED_KINGDOM = 2108,TT_MS_LANGID_IRISH_GAELIC_IRELAND = 1084,TT_MS_LANGID_YIDDISH_GERMANY = 1085,TT_MS_LANGID_MALAY_MALAYSIA = 1086,TT_MS_LANGID_MALAY_BRUNEI_DARUSSALAM = 2110,TT_MS_LANGID_KAZAK_KAZAKSTAN = 1087,TT_MS_LANGID_KIRGHIZ_KIRGHIZSTAN = 1088,TT_MS_LANGID_KIRGHIZ_KIRGHIZ_REPUBLIC = 1088,TT_MS_LANGID_SWAHILI_KENYA = 1089,TT_MS_LANGID_TURKMEN_TURKMENISTAN = 1090,TT_MS_LANGID_UZBEK_UZBEKISTAN_LATIN = 1091,TT_MS_LANGID_UZBEK_UZBEKISTAN_CYRILLIC = 2115,TT_MS_LANGID_TATAR_TATARSTAN = 1092,TT_MS_LANGID_BENGALI_INDIA = 1093,TT_MS_LANGID_BENGALI_BANGLADESH = 2117,TT_MS_LANGID_PUNJABI_INDIA = 1094,TT_MS_LANGID_PUNJABI_ARABIC_PAKISTAN = 2118,TT_MS_LANGID_GUJARATI_INDIA = 1095,TT_MS_LANGID_ORIYA_INDIA = 1096,TT_MS_LANGID_TAMIL_INDIA = 1097,TT_MS_LANGID_TELUGU_INDIA = 1098,TT_MS_LANGID_KANNADA_INDIA = 1099,TT_MS_LANGID_MALAYALAM_INDIA = 1100,TT_MS_LANGID_ASSAMESE_INDIA = 1101,TT_MS_LANGID_MARATHI_INDIA = 1102,TT_MS_LANGID_SANSKRIT_INDIA = 1103,TT_MS_LANGID_MONGOLIAN_MONGOLIA = 1104,TT_MS_LANGID_MONGOLIAN_MONGOLIA_MONGOLIAN = 2128,TT_MS_LANGID_TIBETAN_CHINA = 1105,TT_MS_LANGID_DZONGHKA_BHUTAN = 2129,TT_MS_LANGID_TIBETAN_BHUTAN = 2129,TT_MS_LANGID_WELSH_WALES = 1106,TT_MS_LANGID_KHMER_CAMBODIA = 1107,TT_MS_LANGID_LAO_LAOS = 1108,TT_MS_LANGID_BURMESE_MYANMAR = 1109,TT_MS_LANGID_GALICIAN_SPAIN = 1110,TT_MS_LANGID_KONKANI_INDIA = 1111,TT_MS_LANGID_MANIPURI_INDIA = 1112,TT_MS_LANGID_SINDHI_INDIA = 1113,TT_MS_LANGID_SINDHI_PAKISTAN = 2137,TT_MS_LANGID_SYRIAC_SYRIA = 1114,TT_MS_LANGID_SINHALESE_SRI_LANKA = 1115,TT_MS_LANGID_CHEROKEE_UNITED_STATES = 1116,TT_MS_LANGID_INUKTITUT_CANADA = 1117,TT_MS_LANGID_AMHARIC_ETHIOPIA = 1118,TT_MS_LANGID_TAMAZIGHT_MOROCCO = 1119,TT_MS_LANGID_TAMAZIGHT_MOROCCO_LATIN = 2143,TT_MS_LANGID_KASHMIRI_PAKISTAN = 1120,TT_MS_LANGID_KASHMIRI_SASIA = 2144,TT_MS_LANGID_KASHMIRI_INDIA = 2144,TT_MS_LANGID_NEPALI_NEPAL = 1121,TT_MS_LANGID_NEPALI_INDIA = 2145,TT_MS_LANGID_FRISIAN_NETHERLANDS = 1122,TT_MS_LANGID_PASHTO_AFGHANISTAN = 1123,TT_MS_LANGID_FILIPINO_PHILIPPINES = 1124,TT_MS_LANGID_DHIVEHI_MALDIVES = 1125,TT_MS_LANGID_DIVEHI_MALDIVES = 1125,TT_MS_LANGID_EDO_NIGERIA = 1126,TT_MS_LANGID_FULFULDE_NIGERIA = 1127,TT_MS_LANGID_HAUSA_NIGERIA = 1128,TT_MS_LANGID_IBIBIO_NIGERIA = 1129,TT_MS_LANGID_YORUBA_NIGERIA = 1130,TT_MS_LANGID_QUECHUA_BOLIVIA = 1131,TT_MS_LANGID_QUECHUA_ECUADOR = 2155,TT_MS_LANGID_QUECHUA_PERU = 3179,TT_MS_LANGID_SEPEDI_SOUTH_AFRICA = 1132,TT_MS_LANGID_SOTHO_SOUTHERN_SOUTH_AFRICA = 1132,TT_MS_LANGID_IGBO_NIGERIA = 1136,TT_MS_LANGID_KANURI_NIGERIA = 1137,TT_MS_LANGID_OROMO_ETHIOPIA = 1138,TT_MS_LANGID_TIGRIGNA_ETHIOPIA = 1139,TT_MS_LANGID_TIGRIGNA_ERYTHREA = 2163,TT_MS_LANGID_TIGRIGNA_ERYTREA = 2163,TT_MS_LANGID_GUARANI_PARAGUAY = 1140,TT_MS_LANGID_HAWAIIAN_UNITED_STATES = 1141,TT_MS_LANGID_LATIN = 1142,TT_MS_LANGID_SOMALI_SOMALIA = 1143,TT_MS_LANGID_YI_CHINA = 1144,TT_MS_LANGID_PAPIAMENTU_NETHERLANDS_ANTILLES = 1145,TT_MS_LANGID_UIGHUR_CHINA = 1152,TT_MS_LANGID_MAORI_NEW_ZEALAND = 1153,TT_NAME_ID_COPYRIGHT = 0,TT_NAME_ID_FONT_FAMILY = 1,TT_NAME_ID_FONT_SUBFAMILY = 2,TT_NAME_ID_UNIQUE_ID = 3,TT_NAME_ID_FULL_NAME = 4,TT_NAME_ID_VERSION_STRING = 5,TT_NAME_ID_PS_NAME = 6,TT_NAME_ID_TRADEMARK = 7,TT_NAME_ID_MANUFACTURER = 8,TT_NAME_ID_DESIGNER = 9,TT_NAME_ID_DESCRIPTION = 10,TT_NAME_ID_VENDOR_URL = 11,TT_NAME_ID_DESIGNER_URL = 12,TT_NAME_ID_LICENSE = 13,TT_NAME_ID_LICENSE_URL = 14,TT_NAME_ID_PREFERRED_FAMILY = 16,TT_NAME_ID_PREFERRED_SUBFAMILY = 17,TT_NAME_ID_MAC_FULL_NAME = 18,TT_NAME_ID_SAMPLE_TEXT = 19,TT_NAME_ID_CID_FINDFONT_NAME = 20,TT_UCR_BASIC_LATIN = 1,TT_UCR_LATIN1_SUPPLEMENT = 2,TT_UCR_LATIN_EXTENDED_A = 4,TT_UCR_LATIN_EXTENDED_B = 8,TT_UCR_IPA_EXTENSIONS = 16,TT_UCR_SPACING_MODIFIER = 32,TT_UCR_COMBINING_DIACRITICS = 64,TT_UCR_GREEK = 128,TT_UCR_CYRILLIC = 512,TT_UCR_ARMENIAN = 1024,TT_UCR_HEBREW = 2048,TT_UCR_ARABIC = 8192,TT_UCR_DEVANAGARI = 32768,TT_UCR_BENGALI = 65536,TT_UCR_GURMUKHI = 131072,TT_UCR_GUJARATI = 262144,TT_UCR_ORIYA = 524288,TT_UCR_TAMIL = 1048576,TT_UCR_TELUGU = 2097152,TT_UCR_KANNADA = 4194304,TT_UCR_MALAYALAM = 8388608,TT_UCR_THAI = 16777216,TT_UCR_LAO = 33554432,TT_UCR_GEORGIAN = 67108864,TT_UCR_HANGUL_JAMO = 268435456,TT_UCR_LATIN_EXTENDED_ADDITIONAL = 536870912,TT_UCR_GREEK_EXTENDED = 1073741824,TT_UCR_GENERAL_PUNCTUATION = 2147483648,TT_UCR_SUPERSCRIPTS_SUBSCRIPTS = 1,TT_UCR_CURRENCY_SYMBOLS = 2,TT_UCR_COMBINING_DIACRITICS_SYMB = 4,TT_UCR_LETTERLIKE_SYMBOLS = 8,TT_UCR_NUMBER_FORMS = 16,TT_UCR_ARROWS = 32,TT_UCR_MATHEMATICAL_OPERATORS = 64,TT_UCR_MISCELLANEOUS_TECHNICAL = 128,TT_UCR_CONTROL_PICTURES = 256,TT_UCR_OCR = 512,TT_UCR_ENCLOSED_ALPHANUMERICS = 1024,TT_UCR_BOX_DRAWING = 2048,TT_UCR_BLOCK_ELEMENTS = 4096,TT_UCR_GEOMETRIC_SHAPES = 8192,TT_UCR_MISCELLANEOUS_SYMBOLS = 16384,TT_UCR_DINGBATS = 32768,TT_UCR_CJK_SYMBOLS = 65536,TT_UCR_HIRAGANA = 131072,TT_UCR_KATAKANA = 262144,TT_UCR_BOPOMOFO = 524288,TT_UCR_HANGUL_COMPATIBILITY_JAMO = 1048576,TT_UCR_CJK_MISC = 2097152,TT_UCR_KANBUN = 2097152,TT_UCR_ENCLOSED_CJK_LETTERS_MONTHS = 4194304,TT_UCR_CJK_COMPATIBILITY = 8388608,TT_UCR_HANGUL = 16777216,TT_UCR_SURROGATES = 33554432,TT_UCR_CJK_UNIFIED_IDEOGRAPHS = 134217728,TT_UCR_PRIVATE_USE = 268435456,TT_UCR_CJK_COMPATIBILITY_IDEOGRAPHS = 536870912,TT_UCR_ALPHABETIC_PRESENTATION_FORMS = 1073741824,TT_UCR_ARABIC_PRESENTATIONS_A = 2147483648,TT_UCR_COMBINING_HALF_MARKS = 1,TT_UCR_CJK_COMPATIBILITY_FORMS = 2,TT_UCR_SMALL_FORM_VARIANTS = 4,TT_UCR_ARABIC_PRESENTATIONS_B = 8,TT_UCR_HALFWIDTH_FULLWIDTH_FORMS = 16,TT_UCR_SPECIALS = 32,TT_UCR_TIBETAN = 64,TT_UCR_SYRIAC = 128,TT_UCR_THAANA = 256,TT_UCR_SINHALA = 512,TT_UCR_MYANMAR = 1024,TT_UCR_ETHIOPIC = 2048,TT_UCR_CHEROKEE = 4096,TT_UCR_CANADIAN_ABORIGINAL_SYLLABICS = 8192,TT_UCR_OGHAM = 16384,TT_UCR_RUNIC = 32768,TT_UCR_KHMER = 65536,TT_UCR_MONGOLIAN = 131072,TT_UCR_BRAILLE = 262144,TT_UCR_YI = 524288,TT_UCR_PHILIPPINE = 1048576,TT_UCR_OLD_ITALIC = 2097152,TT_UCR_GOTHIC = 4194304,TT_UCR_DESERET = 8388608,TT_UCR_MUSICAL_SYMBOLS = 16777216,TT_UCR_MATH_ALPHANUMERIC_SYMBOLS = 33554432,TT_UCR_PRIVATE_USE_SUPPLEMENTARY = 67108864,TT_UCR_VARIATION_SELECTORS = 134217728,TT_UCR_TAGS = 268435456,TT_UCR_ARABIC_PRESENTATION_FORMS_A = 2147483648,TT_UCR_ARABIC_PRESENTATION_FORMS_B = 8,TT_UCR_COMBINING_DIACRITICAL_MARKS = 64,TT_UCR_COMBINING_DIACRITICAL_MARKS_SYMB = 4,};
enum MACRO_UI {UI_CMD = 0x3,};
enum MACRO_UT {UT_LINESIZE = 32,UT_NAMESIZE = 32,UT_HOSTSIZE = 256,};
enum MACRO_VT {VT_OPENQRY = 0x5600,VT_GETMODE = 0x5601,VT_SETMODE = 0x5602,VT_AUTO = 0x0,VT_PROCESS = 0x1,VT_ACKACQ = 0x2,VT_GETSTATE = 0x5603,VT_SENDSIG = 0x5604,VT_RELDISP = 0x5605,VT_ACTIVATE = 0x5606,VT_WAITACTIVE = 0x5607,VT_DISALLOCATE = 0x5608,VT_RESIZE = 0x5609,VT_RESIZEX = 0x560A,VT_LOCKSWITCH = 0x560B,VT_UNLOCKSWITCH = 0x560C,VT_GETHIFONTMASK = 0x560D,};
enum MACRO_WE {WE_VERSION = 21,WE_MAX_VERSION = 21,};
enum MACRO_WP {WP_TEXT = 0x80,};
enum MACRO_WT {WT_VERSION = 29,};
enum MACRO_XA {XA_PRIMARY = 1,XA_SECONDARY = 2,XA_ARC = 3,XA_ATOM = 4,XA_BITMAP = 5,XA_CARDINAL = 6,XA_COLORMAP = 7,XA_CURSOR = 8,XA_CUT_BUFFER0 = 9,XA_CUT_BUFFER1 = 10,XA_CUT_BUFFER2 = 11,XA_CUT_BUFFER3 = 12,XA_CUT_BUFFER4 = 13,XA_CUT_BUFFER5 = 14,XA_CUT_BUFFER6 = 15,XA_CUT_BUFFER7 = 16,XA_DRAWABLE = 17,XA_FONT = 18,XA_INTEGER = 19,XA_PIXMAP = 20,XA_POINT = 21,XA_RECTANGLE = 22,XA_RESOURCE_MANAGER = 23,XA_RGB_COLOR_MAP = 24,XA_RGB_BEST_MAP = 25,XA_RGB_BLUE_MAP = 26,XA_RGB_DEFAULT_MAP = 27,XA_RGB_GRAY_MAP = 28,XA_RGB_GREEN_MAP = 29,XA_RGB_RED_MAP = 30,XA_STRING = 31,XA_VISUALID = 32,XA_WINDOW = 33,XA_WM_COMMAND = 34,XA_WM_HINTS = 35,XA_WM_CLIENT_MACHINE = 36,XA_WM_ICON_NAME = 37,XA_WM_ICON_SIZE = 38,XA_WM_NAME = 39,XA_WM_NORMAL_HINTS = 40,XA_WM_SIZE_HINTS = 41,XA_WM_ZOOM_HINTS = 42,XA_MIN_SPACE = 43,XA_NORM_SPACE = 44,XA_MAX_SPACE = 45,XA_END_SPACE = 46,XA_SUPERSCRIPT_X = 47,XA_SUPERSCRIPT_Y = 48,XA_SUBSCRIPT_X = 49,XA_SUBSCRIPT_Y = 50,XA_UNDERLINE_POSITION = 51,XA_UNDERLINE_THICKNESS = 52,XA_STRIKEOUT_ASCENT = 53,XA_STRIKEOUT_DESCENT = 54,XA_ITALIC_ANGLE = 55,XA_X_HEIGHT = 56,XA_QUAD_WIDTH = 57,XA_WEIGHT = 58,XA_POINT_SIZE = 59,XA_RESOLUTION = 60,XA_COPYRIGHT = 61,XA_NOTICE = 62,XA_FONT_NAME = 63,XA_FAMILY_NAME = 64,XA_FULL_NAME = 65,XA_CAP_HEIGHT = 66,XA_WM_CLASS = 67,XA_WM_TRANSIENT_FOR = 68,XA_LAST_PREDEFINED = 68,};
enum MACRO_XC {XC_num_glyphs = 154,XC_X_cursor = 0,XC_arrow = 2,XC_based_arrow_down = 4,XC_based_arrow_up = 6,XC_boat = 8,XC_bogosity = 10,XC_bottom_left_corner = 12,XC_bottom_right_corner = 14,XC_bottom_side = 16,XC_bottom_tee = 18,XC_box_spiral = 20,XC_center_ptr = 22,XC_circle = 24,XC_clock = 26,XC_coffee_mug = 28,XC_cross = 30,XC_cross_reverse = 32,XC_crosshair = 34,XC_diamond_cross = 36,XC_dot = 38,XC_dotbox = 40,XC_double_arrow = 42,XC_draft_large = 44,XC_draft_small = 46,XC_draped_box = 48,XC_exchange = 50,XC_fleur = 52,XC_gobbler = 54,XC_gumby = 56,XC_hand1 = 58,XC_hand2 = 60,XC_heart = 62,XC_icon = 64,XC_iron_cross = 66,XC_left_ptr = 68,XC_left_side = 70,XC_left_tee = 72,XC_leftbutton = 74,XC_ll_angle = 76,XC_lr_angle = 78,XC_man = 80,XC_middlebutton = 82,XC_mouse = 84,XC_pencil = 86,XC_pirate = 88,XC_plus = 90,XC_question_arrow = 92,XC_right_ptr = 94,XC_right_side = 96,XC_right_tee = 98,XC_rightbutton = 100,XC_rtl_logo = 102,XC_sailboat = 104,XC_sb_down_arrow = 106,XC_sb_h_double_arrow = 108,XC_sb_left_arrow = 110,XC_sb_right_arrow = 112,XC_sb_up_arrow = 114,XC_sb_v_double_arrow = 116,XC_shuttle = 118,XC_sizing = 120,XC_spider = 122,XC_spraycan = 124,XC_star = 126,XC_target = 128,XC_tcross = 130,XC_top_left_arrow = 132,XC_top_left_corner = 134,XC_top_right_corner = 136,XC_top_side = 138,XC_top_tee = 140,XC_trek = 142,XC_ul_angle = 144,XC_umbrella = 146,XC_ur_angle = 148,XC_watch = 150,XC_xterm = 152,};
enum MACRO_XI {XI_Absent = 0,XI_Present = 1,XI_Initial_Release_Major = 1,XI_Initial_Release_Minor = 0,XI_Add_XDeviceBell_Major = 1,XI_Add_XDeviceBell_Minor = 1,XI_Add_XSetDeviceValuators_Major = 1,XI_Add_XSetDeviceValuators_Minor = 2,XI_Add_XChangeDeviceControl_Major = 1,XI_Add_XChangeDeviceControl_Minor = 3,};
enum MACRO_XK {XK_VoidSymbol = 0xFFFFFF,XK_BackSpace = 0xFF08,XK_Tab = 0xFF09,XK_Linefeed = 0xFF0A,XK_Clear = 0xFF0B,XK_Return = 0xFF0D,XK_Pause = 0xFF13,XK_Scroll_Lock = 0xFF14,XK_Sys_Req = 0xFF15,XK_Escape = 0xFF1B,XK_Delete = 0xFFFF,XK_Multi_key = 0xFF20,XK_Codeinput = 0xFF37,XK_SingleCandidate = 0xFF3C,XK_MultipleCandidate = 0xFF3D,XK_PreviousCandidate = 0xFF3E,XK_Kanji = 0xFF21,XK_Muhenkan = 0xFF22,XK_Henkan_Mode = 0xFF23,XK_Henkan = 0xFF23,XK_Romaji = 0xFF24,XK_Hiragana = 0xFF25,XK_Katakana = 0xFF26,XK_Hiragana_Katakana = 0xFF27,XK_Zenkaku = 0xFF28,XK_Hankaku = 0xFF29,XK_Zenkaku_Hankaku = 0xFF2A,XK_Touroku = 0xFF2B,XK_Massyo = 0xFF2C,XK_Kana_Lock = 0xFF2D,XK_Kana_Shift = 0xFF2E,XK_Eisu_Shift = 0xFF2F,XK_Eisu_toggle = 0xFF30,XK_Kanji_Bangou = 0xFF37,XK_Zen_Koho = 0xFF3D,XK_Mae_Koho = 0xFF3E,XK_Home = 0xFF50,XK_Left = 0xFF51,XK_Up = 0xFF52,XK_Right = 0xFF53,XK_Down = 0xFF54,XK_Prior = 0xFF55,XK_Page_Up = 0xFF55,XK_Next = 0xFF56,XK_Page_Down = 0xFF56,XK_End = 0xFF57,XK_Begin = 0xFF58,XK_Select = 0xFF60,XK_Print = 0xFF61,XK_Execute = 0xFF62,XK_Insert = 0xFF63,XK_Undo = 0xFF65,XK_Redo = 0xFF66,XK_Menu = 0xFF67,XK_Find = 0xFF68,XK_Cancel = 0xFF69,XK_Help = 0xFF6A,XK_Break = 0xFF6B,XK_Mode_switch = 0xFF7E,XK_script_switch = 0xFF7E,XK_Num_Lock = 0xFF7F,XK_KP_Space = 0xFF80,XK_KP_Tab = 0xFF89,XK_KP_Enter = 0xFF8D,XK_KP_F1 = 0xFF91,XK_KP_F2 = 0xFF92,XK_KP_F3 = 0xFF93,XK_KP_F4 = 0xFF94,XK_KP_Home = 0xFF95,XK_KP_Left = 0xFF96,XK_KP_Up = 0xFF97,XK_KP_Right = 0xFF98,XK_KP_Down = 0xFF99,XK_KP_Prior = 0xFF9A,XK_KP_Page_Up = 0xFF9A,XK_KP_Next = 0xFF9B,XK_KP_Page_Down = 0xFF9B,XK_KP_End = 0xFF9C,XK_KP_Begin = 0xFF9D,XK_KP_Insert = 0xFF9E,XK_KP_Delete = 0xFF9F,XK_KP_Equal = 0xFFBD,XK_KP_Multiply = 0xFFAA,XK_KP_Add = 0xFFAB,XK_KP_Separator = 0xFFAC,XK_KP_Subtract = 0xFFAD,XK_KP_Decimal = 0xFFAE,XK_KP_Divide = 0xFFAF,XK_KP_0 = 0xFFB0,XK_KP_1 = 0xFFB1,XK_KP_2 = 0xFFB2,XK_KP_3 = 0xFFB3,XK_KP_4 = 0xFFB4,XK_KP_5 = 0xFFB5,XK_KP_6 = 0xFFB6,XK_KP_7 = 0xFFB7,XK_KP_8 = 0xFFB8,XK_KP_9 = 0xFFB9,XK_F1 = 0xFFBE,XK_F2 = 0xFFBF,XK_F3 = 0xFFC0,XK_F4 = 0xFFC1,XK_F5 = 0xFFC2,XK_F6 = 0xFFC3,XK_F7 = 0xFFC4,XK_F8 = 0xFFC5,XK_F9 = 0xFFC6,XK_F10 = 0xFFC7,XK_F11 = 0xFFC8,XK_L1 = 0xFFC8,XK_F12 = 0xFFC9,XK_L2 = 0xFFC9,XK_F13 = 0xFFCA,XK_L3 = 0xFFCA,XK_F14 = 0xFFCB,XK_L4 = 0xFFCB,XK_F15 = 0xFFCC,XK_L5 = 0xFFCC,XK_F16 = 0xFFCD,XK_L6 = 0xFFCD,XK_F17 = 0xFFCE,XK_L7 = 0xFFCE,XK_F18 = 0xFFCF,XK_L8 = 0xFFCF,XK_F19 = 0xFFD0,XK_L9 = 0xFFD0,XK_F20 = 0xFFD1,XK_L10 = 0xFFD1,XK_F21 = 0xFFD2,XK_R1 = 0xFFD2,XK_F22 = 0xFFD3,XK_R2 = 0xFFD3,XK_F23 = 0xFFD4,XK_R3 = 0xFFD4,XK_F24 = 0xFFD5,XK_R4 = 0xFFD5,XK_F25 = 0xFFD6,XK_R5 = 0xFFD6,XK_F26 = 0xFFD7,XK_R6 = 0xFFD7,XK_F27 = 0xFFD8,XK_R7 = 0xFFD8,XK_F28 = 0xFFD9,XK_R8 = 0xFFD9,XK_F29 = 0xFFDA,XK_R9 = 0xFFDA,XK_F30 = 0xFFDB,XK_R10 = 0xFFDB,XK_F31 = 0xFFDC,XK_R11 = 0xFFDC,XK_F32 = 0xFFDD,XK_R12 = 0xFFDD,XK_F33 = 0xFFDE,XK_R13 = 0xFFDE,XK_F34 = 0xFFDF,XK_R14 = 0xFFDF,XK_F35 = 0xFFE0,XK_R15 = 0xFFE0,XK_Shift_L = 0xFFE1,XK_Shift_R = 0xFFE2,XK_Control_L = 0xFFE3,XK_Control_R = 0xFFE4,XK_Caps_Lock = 0xFFE5,XK_Shift_Lock = 0xFFE6,XK_Meta_L = 0xFFE7,XK_Meta_R = 0xFFE8,XK_Alt_L = 0xFFE9,XK_Alt_R = 0xFFEA,XK_Super_L = 0xFFEB,XK_Super_R = 0xFFEC,XK_Hyper_L = 0xFFED,XK_Hyper_R = 0xFFEE,XK_ISO_Lock = 0xFE01,XK_ISO_Level2_Latch = 0xFE02,XK_ISO_Level3_Shift = 0xFE03,XK_ISO_Level3_Latch = 0xFE04,XK_ISO_Level3_Lock = 0xFE05,XK_ISO_Level5_Shift = 0xFE11,XK_ISO_Level5_Latch = 0xFE12,XK_ISO_Level5_Lock = 0xFE13,XK_ISO_Group_Shift = 0xFF7E,XK_ISO_Group_Latch = 0xFE06,XK_ISO_Group_Lock = 0xFE07,XK_ISO_Next_Group = 0xFE08,XK_ISO_Next_Group_Lock = 0xFE09,XK_ISO_Prev_Group = 0xFE0A,XK_ISO_Prev_Group_Lock = 0xFE0B,XK_ISO_First_Group = 0xFE0C,XK_ISO_First_Group_Lock = 0xFE0D,XK_ISO_Last_Group = 0xFE0E,XK_ISO_Last_Group_Lock = 0xFE0F,XK_ISO_Left_Tab = 0xFE20,XK_ISO_Move_Line_Up = 0xFE21,XK_ISO_Move_Line_Down = 0xFE22,XK_ISO_Partial_Line_Up = 0xFE23,XK_ISO_Partial_Line_Down = 0xFE24,XK_ISO_Partial_Space_Left = 0xFE25,XK_ISO_Partial_Space_Right = 0xFE26,XK_ISO_Set_Margin_Left = 0xFE27,XK_ISO_Set_Margin_Right = 0xFE28,XK_ISO_Release_Margin_Left = 0xFE29,XK_ISO_Release_Margin_Right = 0xFE2A,XK_ISO_Release_Both_Margins = 0xFE2B,XK_ISO_Fast_Cursor_Left = 0xFE2C,XK_ISO_Fast_Cursor_Right = 0xFE2D,XK_ISO_Fast_Cursor_Up = 0xFE2E,XK_ISO_Fast_Cursor_Down = 0xFE2F,XK_ISO_Continuous_Underline = 0xFE30,XK_ISO_Discontinuous_Underline = 0xFE31,XK_ISO_Emphasize = 0xFE32,XK_ISO_Center_Object = 0xFE33,XK_ISO_Enter = 0xFE34,XK_dead_grave = 0xFE50,XK_dead_acute = 0xFE51,XK_dead_circumflex = 0xFE52,XK_dead_tilde = 0xFE53,XK_dead_macron = 0xFE54,XK_dead_breve = 0xFE55,XK_dead_abovedot = 0xFE56,XK_dead_diaeresis = 0xFE57,XK_dead_abovering = 0xFE58,XK_dead_doubleacute = 0xFE59,XK_dead_caron = 0xFE5A,XK_dead_cedilla = 0xFE5B,XK_dead_ogonek = 0xFE5C,XK_dead_iota = 0xFE5D,XK_dead_voiced_sound = 0xFE5E,XK_dead_semivoiced_sound = 0xFE5F,XK_dead_belowdot = 0xFE60,XK_dead_hook = 0xFE61,XK_dead_horn = 0xFE62,XK_dead_stroke = 0xFE63,XK_First_Virtual_Screen = 0xFED0,XK_Prev_Virtual_Screen = 0xFED1,XK_Next_Virtual_Screen = 0xFED2,XK_Last_Virtual_Screen = 0xFED4,XK_Terminate_Server = 0xFED5,XK_AccessX_Enable = 0xFE70,XK_AccessX_Feedback_Enable = 0xFE71,XK_RepeatKeys_Enable = 0xFE72,XK_SlowKeys_Enable = 0xFE73,XK_BounceKeys_Enable = 0xFE74,XK_StickyKeys_Enable = 0xFE75,XK_MouseKeys_Enable = 0xFE76,XK_MouseKeys_Accel_Enable = 0xFE77,XK_Overlay1_Enable = 0xFE78,XK_Overlay2_Enable = 0xFE79,XK_AudibleBell_Enable = 0xFE7A,XK_Pointer_Left = 0xFEE0,XK_Pointer_Right = 0xFEE1,XK_Pointer_Up = 0xFEE2,XK_Pointer_Down = 0xFEE3,XK_Pointer_UpLeft = 0xFEE4,XK_Pointer_UpRight = 0xFEE5,XK_Pointer_DownLeft = 0xFEE6,XK_Pointer_DownRight = 0xFEE7,XK_Pointer_Button_Dflt = 0xFEE8,XK_Pointer_Button1 = 0xFEE9,XK_Pointer_Button2 = 0xFEEA,XK_Pointer_Button3 = 0xFEEB,XK_Pointer_Button4 = 0xFEEC,XK_Pointer_Button5 = 0xFEED,XK_Pointer_DblClick_Dflt = 0xFEEE,XK_Pointer_DblClick1 = 0xFEEF,XK_Pointer_DblClick2 = 0xFEF0,XK_Pointer_DblClick3 = 0xFEF1,XK_Pointer_DblClick4 = 0xFEF2,XK_Pointer_DblClick5 = 0xFEF3,XK_Pointer_Drag_Dflt = 0xFEF4,XK_Pointer_Drag1 = 0xFEF5,XK_Pointer_Drag2 = 0xFEF6,XK_Pointer_Drag3 = 0xFEF7,XK_Pointer_Drag4 = 0xFEF8,XK_Pointer_Drag5 = 0xFEFD,XK_Pointer_EnableKeys = 0xFEF9,XK_Pointer_Accelerate = 0xFEFA,XK_Pointer_DfltBtnNext = 0xFEFB,XK_Pointer_DfltBtnPrev = 0xFEFC,XK_space = 0x20,XK_exclam = 0x21,XK_quotedbl = 0x22,XK_numbersign = 0x23,XK_dollar = 0x24,XK_percent = 0x25,XK_ampersand = 0x26,XK_apostrophe = 0x27,XK_quoteright = 0x27,XK_parenleft = 0x28,XK_parenright = 0x29,XK_asterisk = 0x2A,XK_plus = 0x2B,XK_comma = 0x2C,XK_minus = 0x2D,XK_period = 0x2E,XK_slash = 0x2F,XK_0 = 0x30,XK_1 = 0x31,XK_2 = 0x32,XK_3 = 0x33,XK_4 = 0x34,XK_5 = 0x35,XK_6 = 0x36,XK_7 = 0x37,XK_8 = 0x38,XK_9 = 0x39,XK_colon = 0x3A,XK_semicolon = 0x3B,XK_less = 0x3C,XK_equal = 0x3D,XK_greater = 0x3E,XK_question = 0x3F,XK_at = 0x40,XK_A = 0x41,XK_B = 0x42,XK_C = 0x43,XK_D = 0x44,XK_E = 0x45,XK_F = 0x46,XK_G = 0x47,XK_H = 0x48,XK_I = 0x49,XK_J = 0x4A,XK_K = 0x4B,XK_L = 0x4C,XK_M = 0x4D,XK_N = 0x4E,XK_O = 0x4F,XK_P = 0x50,XK_Q = 0x51,XK_R = 0x52,XK_S = 0x53,XK_T = 0x54,XK_U = 0x55,XK_V = 0x56,XK_W = 0x57,XK_X = 0x58,XK_Y = 0x59,XK_Z = 0x5A,XK_bracketleft = 0x5B,XK_backslash = 0x5C,XK_bracketright = 0x5D,XK_asciicircum = 0x5E,XK_underscore = 0x5F,XK_grave = 0x60,XK_quoteleft = 0x60,XK_a = 0x61,XK_b = 0x62,XK_c = 0x63,XK_d = 0x64,XK_e = 0x65,XK_f = 0x66,XK_g = 0x67,XK_h = 0x68,XK_i = 0x69,XK_j = 0x6A,XK_k = 0x6B,XK_l = 0x6C,XK_m = 0x6D,XK_n = 0x6E,XK_o = 0x6F,XK_p = 0x70,XK_q = 0x71,XK_r = 0x72,XK_s = 0x73,XK_t = 0x74,XK_u = 0x75,XK_v = 0x76,XK_w = 0x77,XK_x = 0x78,XK_y = 0x79,XK_z = 0x7A,XK_braceleft = 0x7B,XK_bar = 0x7C,XK_braceright = 0x7D,XK_asciitilde = 0x7E,XK_nobreakspace = 0xA0,XK_exclamdown = 0xA1,XK_cent = 0xA2,XK_sterling = 0xA3,XK_currency = 0xA4,XK_yen = 0xA5,XK_brokenbar = 0xA6,XK_section = 0xA7,XK_diaeresis = 0xA8,XK_copyright = 0xA9,XK_ordfeminine = 0xAA,XK_guillemotleft = 0xAB,XK_notsign = 0xAC,XK_hyphen = 0xAD,XK_registered = 0xAE,XK_macron = 0xAF,XK_degree = 0xB0,XK_plusminus = 0xB1,XK_twosuperior = 0xB2,XK_threesuperior = 0xB3,XK_acute = 0xB4,XK_mu = 0xB5,XK_paragraph = 0xB6,XK_periodcentered = 0xB7,XK_cedilla = 0xB8,XK_onesuperior = 0xB9,XK_masculine = 0xBA,XK_guillemotright = 0xBB,XK_onequarter = 0xBC,XK_onehalf = 0xBD,XK_threequarters = 0xBE,XK_questiondown = 0xBF,XK_Agrave = 0xC0,XK_Aacute = 0xC1,XK_Acircumflex = 0xC2,XK_Atilde = 0xC3,XK_Adiaeresis = 0xC4,XK_Aring = 0xC5,XK_AE = 0xC6,XK_Ccedilla = 0xC7,XK_Egrave = 0xC8,XK_Eacute = 0xC9,XK_Ecircumflex = 0xCA,XK_Ediaeresis = 0xCB,XK_Igrave = 0xCC,XK_Iacute = 0xCD,XK_Icircumflex = 0xCE,XK_Idiaeresis = 0xCF,XK_ETH = 0xD0,XK_Eth = 0xD0,XK_Ntilde = 0xD1,XK_Ograve = 0xD2,XK_Oacute = 0xD3,XK_Ocircumflex = 0xD4,XK_Otilde = 0xD5,XK_Odiaeresis = 0xD6,XK_multiply = 0xD7,XK_Oslash = 0xD8,XK_Ooblique = 0xD8,XK_Ugrave = 0xD9,XK_Uacute = 0xDA,XK_Ucircumflex = 0xDB,XK_Udiaeresis = 0xDC,XK_Yacute = 0xDD,XK_THORN = 0xDE,XK_Thorn = 0xDE,XK_ssharp = 0xDF,XK_agrave = 0xE0,XK_aacute = 0xE1,XK_acircumflex = 0xE2,XK_atilde = 0xE3,XK_adiaeresis = 0xE4,XK_aring = 0xE5,XK_ae = 0xE6,XK_ccedilla = 0xE7,XK_egrave = 0xE8,XK_eacute = 0xE9,XK_ecircumflex = 0xEA,XK_ediaeresis = 0xEB,XK_igrave = 0xEC,XK_iacute = 0xED,XK_icircumflex = 0xEE,XK_idiaeresis = 0xEF,XK_eth = 0xF0,XK_ntilde = 0xF1,XK_ograve = 0xF2,XK_oacute = 0xF3,XK_ocircumflex = 0xF4,XK_otilde = 0xF5,XK_odiaeresis = 0xF6,XK_division = 0xF7,XK_oslash = 0xF8,XK_ooblique = 0xF8,XK_ugrave = 0xF9,XK_uacute = 0xFA,XK_ucircumflex = 0xFB,XK_udiaeresis = 0xFC,XK_yacute = 0xFD,XK_thorn = 0xFE,XK_ydiaeresis = 0xFF,XK_Aogonek = 0x1A1,XK_breve = 0x1A2,XK_Lstroke = 0x1A3,XK_Lcaron = 0x1A5,XK_Sacute = 0x1A6,XK_Scaron = 0x1A9,XK_Scedilla = 0x1AA,XK_Tcaron = 0x1AB,XK_Zacute = 0x1AC,XK_Zcaron = 0x1AE,XK_Zabovedot = 0x1AF,XK_aogonek = 0x1B1,XK_ogonek = 0x1B2,XK_lstroke = 0x1B3,XK_lcaron = 0x1B5,XK_sacute = 0x1B6,XK_caron = 0x1B7,XK_scaron = 0x1B9,XK_scedilla = 0x1BA,XK_tcaron = 0x1BB,XK_zacute = 0x1BC,XK_doubleacute = 0x1BD,XK_zcaron = 0x1BE,XK_zabovedot = 0x1BF,XK_Racute = 0x1C0,XK_Abreve = 0x1C3,XK_Lacute = 0x1C5,XK_Cacute = 0x1C6,XK_Ccaron = 0x1C8,XK_Eogonek = 0x1CA,XK_Ecaron = 0x1CC,XK_Dcaron = 0x1CF,XK_Dstroke = 0x1D0,XK_Nacute = 0x1D1,XK_Ncaron = 0x1D2,XK_Odoubleacute = 0x1D5,XK_Rcaron = 0x1D8,XK_Uring = 0x1D9,XK_Udoubleacute = 0x1DB,XK_Tcedilla = 0x1DE,XK_racute = 0x1E0,XK_abreve = 0x1E3,XK_lacute = 0x1E5,XK_cacute = 0x1E6,XK_ccaron = 0x1E8,XK_eogonek = 0x1EA,XK_ecaron = 0x1EC,XK_dcaron = 0x1EF,XK_dstroke = 0x1F0,XK_nacute = 0x1F1,XK_ncaron = 0x1F2,XK_odoubleacute = 0x1F5,XK_udoubleacute = 0x1FB,XK_rcaron = 0x1F8,XK_uring = 0x1F9,XK_tcedilla = 0x1FE,XK_abovedot = 0x1FF,XK_Hstroke = 0x2A1,XK_Hcircumflex = 0x2A6,XK_Iabovedot = 0x2A9,XK_Gbreve = 0x2AB,XK_Jcircumflex = 0x2AC,XK_hstroke = 0x2B1,XK_hcircumflex = 0x2B6,XK_idotless = 0x2B9,XK_gbreve = 0x2BB,XK_jcircumflex = 0x2BC,XK_Cabovedot = 0x2C5,XK_Ccircumflex = 0x2C6,XK_Gabovedot = 0x2D5,XK_Gcircumflex = 0x2D8,XK_Ubreve = 0x2DD,XK_Scircumflex = 0x2DE,XK_cabovedot = 0x2E5,XK_ccircumflex = 0x2E6,XK_gabovedot = 0x2F5,XK_gcircumflex = 0x2F8,XK_ubreve = 0x2FD,XK_scircumflex = 0x2FE,XK_kra = 0x3A2,XK_kappa = 0x3A2,XK_Rcedilla = 0x3A3,XK_Itilde = 0x3A5,XK_Lcedilla = 0x3A6,XK_Emacron = 0x3AA,XK_Gcedilla = 0x3AB,XK_Tslash = 0x3AC,XK_rcedilla = 0x3B3,XK_itilde = 0x3B5,XK_lcedilla = 0x3B6,XK_emacron = 0x3BA,XK_gcedilla = 0x3BB,XK_tslash = 0x3BC,XK_ENG = 0x3BD,XK_eng = 0x3BF,XK_Amacron = 0x3C0,XK_Iogonek = 0x3C7,XK_Eabovedot = 0x3CC,XK_Imacron = 0x3CF,XK_Ncedilla = 0x3D1,XK_Omacron = 0x3D2,XK_Kcedilla = 0x3D3,XK_Uogonek = 0x3D9,XK_Utilde = 0x3DD,XK_Umacron = 0x3DE,XK_amacron = 0x3E0,XK_iogonek = 0x3E7,XK_eabovedot = 0x3EC,XK_imacron = 0x3EF,XK_ncedilla = 0x3F1,XK_omacron = 0x3F2,XK_kcedilla = 0x3F3,XK_uogonek = 0x3F9,XK_utilde = 0x3FD,XK_umacron = 0x3FE,XK_Babovedot = 0x1001E02,XK_babovedot = 0x1001E03,XK_Dabovedot = 0x1001E0A,XK_Wgrave = 0x1001E80,XK_Wacute = 0x1001E82,XK_dabovedot = 0x1001E0B,XK_Ygrave = 0x1001EF2,XK_Fabovedot = 0x1001E1E,XK_fabovedot = 0x1001E1F,XK_Mabovedot = 0x1001E40,XK_mabovedot = 0x1001E41,XK_Pabovedot = 0x1001E56,XK_wgrave = 0x1001E81,XK_pabovedot = 0x1001E57,XK_wacute = 0x1001E83,XK_Sabovedot = 0x1001E60,XK_ygrave = 0x1001EF3,XK_Wdiaeresis = 0x1001E84,XK_wdiaeresis = 0x1001E85,XK_sabovedot = 0x1001E61,XK_Wcircumflex = 0x1000174,XK_Tabovedot = 0x1001E6A,XK_Ycircumflex = 0x1000176,XK_wcircumflex = 0x1000175,XK_tabovedot = 0x1001E6B,XK_ycircumflex = 0x1000177,XK_OE = 0x13BC,XK_oe = 0x13BD,XK_Ydiaeresis = 0x13BE,XK_overline = 0x47E,XK_kana_fullstop = 0x4A1,XK_kana_openingbracket = 0x4A2,XK_kana_closingbracket = 0x4A3,XK_kana_comma = 0x4A4,XK_kana_conjunctive = 0x4A5,XK_kana_middledot = 0x4A5,XK_kana_WO = 0x4A6,XK_kana_a = 0x4A7,XK_kana_i = 0x4A8,XK_kana_u = 0x4A9,XK_kana_e = 0x4AA,XK_kana_o = 0x4AB,XK_kana_ya = 0x4AC,XK_kana_yu = 0x4AD,XK_kana_yo = 0x4AE,XK_kana_tsu = 0x4AF,XK_kana_tu = 0x4AF,XK_prolongedsound = 0x4B0,XK_kana_A = 0x4B1,XK_kana_I = 0x4B2,XK_kana_U = 0x4B3,XK_kana_E = 0x4B4,XK_kana_O = 0x4B5,XK_kana_KA = 0x4B6,XK_kana_KI = 0x4B7,XK_kana_KU = 0x4B8,XK_kana_KE = 0x4B9,XK_kana_KO = 0x4BA,XK_kana_SA = 0x4BB,XK_kana_SHI = 0x4BC,XK_kana_SU = 0x4BD,XK_kana_SE = 0x4BE,XK_kana_SO = 0x4BF,XK_kana_TA = 0x4C0,XK_kana_CHI = 0x4C1,XK_kana_TI = 0x4C1,XK_kana_TSU = 0x4C2,XK_kana_TU = 0x4C2,XK_kana_TE = 0x4C3,XK_kana_TO = 0x4C4,XK_kana_NA = 0x4C5,XK_kana_NI = 0x4C6,XK_kana_NU = 0x4C7,XK_kana_NE = 0x4C8,XK_kana_NO = 0x4C9,XK_kana_HA = 0x4CA,XK_kana_HI = 0x4CB,XK_kana_FU = 0x4CC,XK_kana_HU = 0x4CC,XK_kana_HE = 0x4CD,XK_kana_HO = 0x4CE,XK_kana_MA = 0x4CF,XK_kana_MI = 0x4D0,XK_kana_MU = 0x4D1,XK_kana_ME = 0x4D2,XK_kana_MO = 0x4D3,XK_kana_YA = 0x4D4,XK_kana_YU = 0x4D5,XK_kana_YO = 0x4D6,XK_kana_RA = 0x4D7,XK_kana_RI = 0x4D8,XK_kana_RU = 0x4D9,XK_kana_RE = 0x4DA,XK_kana_RO = 0x4DB,XK_kana_WA = 0x4DC,XK_kana_N = 0x4DD,XK_voicedsound = 0x4DE,XK_semivoicedsound = 0x4DF,XK_kana_switch = 0xFF7E,XK_Farsi_0 = 0x10006F0,XK_Farsi_1 = 0x10006F1,XK_Farsi_2 = 0x10006F2,XK_Farsi_3 = 0x10006F3,XK_Farsi_4 = 0x10006F4,XK_Farsi_5 = 0x10006F5,XK_Farsi_6 = 0x10006F6,XK_Farsi_7 = 0x10006F7,XK_Farsi_8 = 0x10006F8,XK_Farsi_9 = 0x10006F9,XK_Arabic_percent = 0x100066A,XK_Arabic_superscript_alef = 0x1000670,XK_Arabic_tteh = 0x1000679,XK_Arabic_peh = 0x100067E,XK_Arabic_tcheh = 0x1000686,XK_Arabic_ddal = 0x1000688,XK_Arabic_rreh = 0x1000691,XK_Arabic_comma = 0x5AC,XK_Arabic_fullstop = 0x10006D4,XK_Arabic_0 = 0x1000660,XK_Arabic_1 = 0x1000661,XK_Arabic_2 = 0x1000662,XK_Arabic_3 = 0x1000663,XK_Arabic_4 = 0x1000664,XK_Arabic_5 = 0x1000665,XK_Arabic_6 = 0x1000666,XK_Arabic_7 = 0x1000667,XK_Arabic_8 = 0x1000668,XK_Arabic_9 = 0x1000669,XK_Arabic_semicolon = 0x5BB,XK_Arabic_question_mark = 0x5BF,XK_Arabic_hamza = 0x5C1,XK_Arabic_maddaonalef = 0x5C2,XK_Arabic_hamzaonalef = 0x5C3,XK_Arabic_hamzaonwaw = 0x5C4,XK_Arabic_hamzaunderalef = 0x5C5,XK_Arabic_hamzaonyeh = 0x5C6,XK_Arabic_alef = 0x5C7,XK_Arabic_beh = 0x5C8,XK_Arabic_tehmarbuta = 0x5C9,XK_Arabic_teh = 0x5CA,XK_Arabic_theh = 0x5CB,XK_Arabic_jeem = 0x5CC,XK_Arabic_hah = 0x5CD,XK_Arabic_khah = 0x5CE,XK_Arabic_dal = 0x5CF,XK_Arabic_thal = 0x5D0,XK_Arabic_ra = 0x5D1,XK_Arabic_zain = 0x5D2,XK_Arabic_seen = 0x5D3,XK_Arabic_sheen = 0x5D4,XK_Arabic_sad = 0x5D5,XK_Arabic_dad = 0x5D6,XK_Arabic_tah = 0x5D7,XK_Arabic_zah = 0x5D8,XK_Arabic_ain = 0x5D9,XK_Arabic_ghain = 0x5DA,XK_Arabic_tatweel = 0x5E0,XK_Arabic_feh = 0x5E1,XK_Arabic_qaf = 0x5E2,XK_Arabic_kaf = 0x5E3,XK_Arabic_lam = 0x5E4,XK_Arabic_meem = 0x5E5,XK_Arabic_noon = 0x5E6,XK_Arabic_ha = 0x5E7,XK_Arabic_heh = 0x5E7,XK_Arabic_waw = 0x5E8,XK_Arabic_alefmaksura = 0x5E9,XK_Arabic_yeh = 0x5EA,XK_Arabic_fathatan = 0x5EB,XK_Arabic_dammatan = 0x5EC,XK_Arabic_kasratan = 0x5ED,XK_Arabic_fatha = 0x5EE,XK_Arabic_damma = 0x5EF,XK_Arabic_kasra = 0x5F0,XK_Arabic_shadda = 0x5F1,XK_Arabic_sukun = 0x5F2,XK_Arabic_madda_above = 0x1000653,XK_Arabic_hamza_above = 0x1000654,XK_Arabic_hamza_below = 0x1000655,XK_Arabic_jeh = 0x1000698,XK_Arabic_veh = 0x10006A4,XK_Arabic_keheh = 0x10006A9,XK_Arabic_gaf = 0x10006AF,XK_Arabic_noon_ghunna = 0x10006BA,XK_Arabic_heh_doachashmee = 0x10006BE,XK_Farsi_yeh = 0x10006CC,XK_Arabic_farsi_yeh = 0x10006CC,XK_Arabic_yeh_baree = 0x10006D2,XK_Arabic_heh_goal = 0x10006C1,XK_Arabic_switch = 0xFF7E,XK_Cyrillic_GHE_bar = 0x1000492,XK_Cyrillic_ghe_bar = 0x1000493,XK_Cyrillic_ZHE_descender = 0x1000496,XK_Cyrillic_zhe_descender = 0x1000497,XK_Cyrillic_KA_descender = 0x100049A,XK_Cyrillic_ka_descender = 0x100049B,XK_Cyrillic_KA_vertstroke = 0x100049C,XK_Cyrillic_ka_vertstroke = 0x100049D,XK_Cyrillic_EN_descender = 0x10004A2,XK_Cyrillic_en_descender = 0x10004A3,XK_Cyrillic_U_straight = 0x10004AE,XK_Cyrillic_u_straight = 0x10004AF,XK_Cyrillic_U_straight_bar = 0x10004B0,XK_Cyrillic_u_straight_bar = 0x10004B1,XK_Cyrillic_HA_descender = 0x10004B2,XK_Cyrillic_ha_descender = 0x10004B3,XK_Cyrillic_CHE_descender = 0x10004B6,XK_Cyrillic_che_descender = 0x10004B7,XK_Cyrillic_CHE_vertstroke = 0x10004B8,XK_Cyrillic_che_vertstroke = 0x10004B9,XK_Cyrillic_SHHA = 0x10004BA,XK_Cyrillic_shha = 0x10004BB,XK_Cyrillic_SCHWA = 0x10004D8,XK_Cyrillic_schwa = 0x10004D9,XK_Cyrillic_I_macron = 0x10004E2,XK_Cyrillic_i_macron = 0x10004E3,XK_Cyrillic_O_bar = 0x10004E8,XK_Cyrillic_o_bar = 0x10004E9,XK_Cyrillic_U_macron = 0x10004EE,XK_Cyrillic_u_macron = 0x10004EF,XK_Serbian_dje = 0x6A1,XK_Macedonia_gje = 0x6A2,XK_Cyrillic_io = 0x6A3,XK_Ukrainian_ie = 0x6A4,XK_Ukranian_je = 0x6A4,XK_Macedonia_dse = 0x6A5,XK_Ukrainian_i = 0x6A6,XK_Ukranian_i = 0x6A6,XK_Ukrainian_yi = 0x6A7,XK_Ukranian_yi = 0x6A7,XK_Cyrillic_je = 0x6A8,XK_Serbian_je = 0x6A8,XK_Cyrillic_lje = 0x6A9,XK_Serbian_lje = 0x6A9,XK_Cyrillic_nje = 0x6AA,XK_Serbian_nje = 0x6AA,XK_Serbian_tshe = 0x6AB,XK_Macedonia_kje = 0x6AC,XK_Ukrainian_ghe_with_upturn = 0x6AD,XK_Byelorussian_shortu = 0x6AE,XK_Cyrillic_dzhe = 0x6AF,XK_Serbian_dze = 0x6AF,XK_numerosign = 0x6B0,XK_Serbian_DJE = 0x6B1,XK_Macedonia_GJE = 0x6B2,XK_Cyrillic_IO = 0x6B3,XK_Ukrainian_IE = 0x6B4,XK_Ukranian_JE = 0x6B4,XK_Macedonia_DSE = 0x6B5,XK_Ukrainian_I = 0x6B6,XK_Ukranian_I = 0x6B6,XK_Ukrainian_YI = 0x6B7,XK_Ukranian_YI = 0x6B7,XK_Cyrillic_JE = 0x6B8,XK_Serbian_JE = 0x6B8,XK_Cyrillic_LJE = 0x6B9,XK_Serbian_LJE = 0x6B9,XK_Cyrillic_NJE = 0x6BA,XK_Serbian_NJE = 0x6BA,XK_Serbian_TSHE = 0x6BB,XK_Macedonia_KJE = 0x6BC,XK_Ukrainian_GHE_WITH_UPTURN = 0x6BD,XK_Byelorussian_SHORTU = 0x6BE,XK_Cyrillic_DZHE = 0x6BF,XK_Serbian_DZE = 0x6BF,XK_Cyrillic_yu = 0x6C0,XK_Cyrillic_a = 0x6C1,XK_Cyrillic_be = 0x6C2,XK_Cyrillic_tse = 0x6C3,XK_Cyrillic_de = 0x6C4,XK_Cyrillic_ie = 0x6C5,XK_Cyrillic_ef = 0x6C6,XK_Cyrillic_ghe = 0x6C7,XK_Cyrillic_ha = 0x6C8,XK_Cyrillic_i = 0x6C9,XK_Cyrillic_shorti = 0x6CA,XK_Cyrillic_ka = 0x6CB,XK_Cyrillic_el = 0x6CC,XK_Cyrillic_em = 0x6CD,XK_Cyrillic_en = 0x6CE,XK_Cyrillic_o = 0x6CF,XK_Cyrillic_pe = 0x6D0,XK_Cyrillic_ya = 0x6D1,XK_Cyrillic_er = 0x6D2,XK_Cyrillic_es = 0x6D3,XK_Cyrillic_te = 0x6D4,XK_Cyrillic_u = 0x6D5,XK_Cyrillic_zhe = 0x6D6,XK_Cyrillic_ve = 0x6D7,XK_Cyrillic_softsign = 0x6D8,XK_Cyrillic_yeru = 0x6D9,XK_Cyrillic_ze = 0x6DA,XK_Cyrillic_sha = 0x6DB,XK_Cyrillic_e = 0x6DC,XK_Cyrillic_shcha = 0x6DD,XK_Cyrillic_che = 0x6DE,XK_Cyrillic_hardsign = 0x6DF,XK_Cyrillic_YU = 0x6E0,XK_Cyrillic_A = 0x6E1,XK_Cyrillic_BE = 0x6E2,XK_Cyrillic_TSE = 0x6E3,XK_Cyrillic_DE = 0x6E4,XK_Cyrillic_IE = 0x6E5,XK_Cyrillic_EF = 0x6E6,XK_Cyrillic_GHE = 0x6E7,XK_Cyrillic_HA = 0x6E8,XK_Cyrillic_I = 0x6E9,XK_Cyrillic_SHORTI = 0x6EA,XK_Cyrillic_KA = 0x6EB,XK_Cyrillic_EL = 0x6EC,XK_Cyrillic_EM = 0x6ED,XK_Cyrillic_EN = 0x6EE,XK_Cyrillic_O = 0x6EF,XK_Cyrillic_PE = 0x6F0,XK_Cyrillic_YA = 0x6F1,XK_Cyrillic_ER = 0x6F2,XK_Cyrillic_ES = 0x6F3,XK_Cyrillic_TE = 0x6F4,XK_Cyrillic_U = 0x6F5,XK_Cyrillic_ZHE = 0x6F6,XK_Cyrillic_VE = 0x6F7,XK_Cyrillic_SOFTSIGN = 0x6F8,XK_Cyrillic_YERU = 0x6F9,XK_Cyrillic_ZE = 0x6FA,XK_Cyrillic_SHA = 0x6FB,XK_Cyrillic_E = 0x6FC,XK_Cyrillic_SHCHA = 0x6FD,XK_Cyrillic_CHE = 0x6FE,XK_Cyrillic_HARDSIGN = 0x6FF,XK_Greek_ALPHAaccent = 0x7A1,XK_Greek_EPSILONaccent = 0x7A2,XK_Greek_ETAaccent = 0x7A3,XK_Greek_IOTAaccent = 0x7A4,XK_Greek_IOTAdieresis = 0x7A5,XK_Greek_IOTAdiaeresis = 0x7A5,XK_Greek_OMICRONaccent = 0x7A7,XK_Greek_UPSILONaccent = 0x7A8,XK_Greek_UPSILONdieresis = 0x7A9,XK_Greek_OMEGAaccent = 0x7AB,XK_Greek_accentdieresis = 0x7AE,XK_Greek_horizbar = 0x7AF,XK_Greek_alphaaccent = 0x7B1,XK_Greek_epsilonaccent = 0x7B2,XK_Greek_etaaccent = 0x7B3,XK_Greek_iotaaccent = 0x7B4,XK_Greek_iotadieresis = 0x7B5,XK_Greek_iotaaccentdieresis = 0x7B6,XK_Greek_omicronaccent = 0x7B7,XK_Greek_upsilonaccent = 0x7B8,XK_Greek_upsilondieresis = 0x7B9,XK_Greek_upsilonaccentdieresis = 0x7BA,XK_Greek_omegaaccent = 0x7BB,XK_Greek_ALPHA = 0x7C1,XK_Greek_BETA = 0x7C2,XK_Greek_GAMMA = 0x7C3,XK_Greek_DELTA = 0x7C4,XK_Greek_EPSILON = 0x7C5,XK_Greek_ZETA = 0x7C6,XK_Greek_ETA = 0x7C7,XK_Greek_THETA = 0x7C8,XK_Greek_IOTA = 0x7C9,XK_Greek_KAPPA = 0x7CA,XK_Greek_LAMDA = 0x7CB,XK_Greek_LAMBDA = 0x7CB,XK_Greek_MU = 0x7CC,XK_Greek_NU = 0x7CD,XK_Greek_XI = 0x7CE,XK_Greek_OMICRON = 0x7CF,XK_Greek_PI = 0x7D0,XK_Greek_RHO = 0x7D1,XK_Greek_SIGMA = 0x7D2,XK_Greek_TAU = 0x7D4,XK_Greek_UPSILON = 0x7D5,XK_Greek_PHI = 0x7D6,XK_Greek_CHI = 0x7D7,XK_Greek_PSI = 0x7D8,XK_Greek_OMEGA = 0x7D9,XK_Greek_alpha = 0x7E1,XK_Greek_beta = 0x7E2,XK_Greek_gamma = 0x7E3,XK_Greek_delta = 0x7E4,XK_Greek_epsilon = 0x7E5,XK_Greek_zeta = 0x7E6,XK_Greek_eta = 0x7E7,XK_Greek_theta = 0x7E8,XK_Greek_iota = 0x7E9,XK_Greek_kappa = 0x7EA,XK_Greek_lamda = 0x7EB,XK_Greek_lambda = 0x7EB,XK_Greek_mu = 0x7EC,XK_Greek_nu = 0x7ED,XK_Greek_xi = 0x7EE,XK_Greek_omicron = 0x7EF,XK_Greek_pi = 0x7F0,XK_Greek_rho = 0x7F1,XK_Greek_sigma = 0x7F2,XK_Greek_finalsmallsigma = 0x7F3,XK_Greek_tau = 0x7F4,XK_Greek_upsilon = 0x7F5,XK_Greek_phi = 0x7F6,XK_Greek_chi = 0x7F7,XK_Greek_psi = 0x7F8,XK_Greek_omega = 0x7F9,XK_Greek_switch = 0xFF7E,XK_hebrew_doublelowline = 0xCDF,XK_hebrew_aleph = 0xCE0,XK_hebrew_bet = 0xCE1,XK_hebrew_beth = 0xCE1,XK_hebrew_gimel = 0xCE2,XK_hebrew_gimmel = 0xCE2,XK_hebrew_dalet = 0xCE3,XK_hebrew_daleth = 0xCE3,XK_hebrew_he = 0xCE4,XK_hebrew_waw = 0xCE5,XK_hebrew_zain = 0xCE6,XK_hebrew_zayin = 0xCE6,XK_hebrew_chet = 0xCE7,XK_hebrew_het = 0xCE7,XK_hebrew_tet = 0xCE8,XK_hebrew_teth = 0xCE8,XK_hebrew_yod = 0xCE9,XK_hebrew_finalkaph = 0xCEA,XK_hebrew_kaph = 0xCEB,XK_hebrew_lamed = 0xCEC,XK_hebrew_finalmem = 0xCED,XK_hebrew_mem = 0xCEE,XK_hebrew_finalnun = 0xCEF,XK_hebrew_nun = 0xCF0,XK_hebrew_samech = 0xCF1,XK_hebrew_samekh = 0xCF1,XK_hebrew_ayin = 0xCF2,XK_hebrew_finalpe = 0xCF3,XK_hebrew_pe = 0xCF4,XK_hebrew_finalzade = 0xCF5,XK_hebrew_finalzadi = 0xCF5,XK_hebrew_zade = 0xCF6,XK_hebrew_zadi = 0xCF6,XK_hebrew_qoph = 0xCF7,XK_hebrew_kuf = 0xCF7,XK_hebrew_resh = 0xCF8,XK_hebrew_shin = 0xCF9,XK_hebrew_taw = 0xCFA,XK_hebrew_taf = 0xCFA,XK_Hebrew_switch = 0xFF7E,XK_Thai_kokai = 0xDA1,XK_Thai_khokhai = 0xDA2,XK_Thai_khokhuat = 0xDA3,XK_Thai_khokhwai = 0xDA4,XK_Thai_khokhon = 0xDA5,XK_Thai_khorakhang = 0xDA6,XK_Thai_ngongu = 0xDA7,XK_Thai_chochan = 0xDA8,XK_Thai_choching = 0xDA9,XK_Thai_chochang = 0xDAA,XK_Thai_soso = 0xDAB,XK_Thai_chochoe = 0xDAC,XK_Thai_yoying = 0xDAD,XK_Thai_dochada = 0xDAE,XK_Thai_topatak = 0xDAF,XK_Thai_thothan = 0xDB0,XK_Thai_thonangmontho = 0xDB1,XK_Thai_thophuthao = 0xDB2,XK_Thai_nonen = 0xDB3,XK_Thai_dodek = 0xDB4,XK_Thai_totao = 0xDB5,XK_Thai_thothung = 0xDB6,XK_Thai_thothahan = 0xDB7,XK_Thai_thothong = 0xDB8,XK_Thai_nonu = 0xDB9,XK_Thai_bobaimai = 0xDBA,XK_Thai_popla = 0xDBB,XK_Thai_phophung = 0xDBC,XK_Thai_fofa = 0xDBD,XK_Thai_phophan = 0xDBE,XK_Thai_fofan = 0xDBF,XK_Thai_phosamphao = 0xDC0,XK_Thai_moma = 0xDC1,XK_Thai_yoyak = 0xDC2,XK_Thai_rorua = 0xDC3,XK_Thai_ru = 0xDC4,XK_Thai_loling = 0xDC5,XK_Thai_lu = 0xDC6,XK_Thai_wowaen = 0xDC7,XK_Thai_sosala = 0xDC8,XK_Thai_sorusi = 0xDC9,XK_Thai_sosua = 0xDCA,XK_Thai_hohip = 0xDCB,XK_Thai_lochula = 0xDCC,XK_Thai_oang = 0xDCD,XK_Thai_honokhuk = 0xDCE,XK_Thai_paiyannoi = 0xDCF,XK_Thai_saraa = 0xDD0,XK_Thai_maihanakat = 0xDD1,XK_Thai_saraaa = 0xDD2,XK_Thai_saraam = 0xDD3,XK_Thai_sarai = 0xDD4,XK_Thai_saraii = 0xDD5,XK_Thai_saraue = 0xDD6,XK_Thai_sarauee = 0xDD7,XK_Thai_sarau = 0xDD8,XK_Thai_sarauu = 0xDD9,XK_Thai_phinthu = 0xDDA,XK_Thai_maihanakat_maitho = 0xDDE,XK_Thai_baht = 0xDDF,XK_Thai_sarae = 0xDE0,XK_Thai_saraae = 0xDE1,XK_Thai_sarao = 0xDE2,XK_Thai_saraaimaimuan = 0xDE3,XK_Thai_saraaimaimalai = 0xDE4,XK_Thai_lakkhangyao = 0xDE5,XK_Thai_maiyamok = 0xDE6,XK_Thai_maitaikhu = 0xDE7,XK_Thai_maiek = 0xDE8,XK_Thai_maitho = 0xDE9,XK_Thai_maitri = 0xDEA,XK_Thai_maichattawa = 0xDEB,XK_Thai_thanthakhat = 0xDEC,XK_Thai_nikhahit = 0xDED,XK_Thai_leksun = 0xDF0,XK_Thai_leknung = 0xDF1,XK_Thai_leksong = 0xDF2,XK_Thai_leksam = 0xDF3,XK_Thai_leksi = 0xDF4,XK_Thai_lekha = 0xDF5,XK_Thai_lekhok = 0xDF6,XK_Thai_lekchet = 0xDF7,XK_Thai_lekpaet = 0xDF8,XK_Thai_lekkao = 0xDF9,XK_Hangul = 0xFF31,XK_Hangul_Start = 0xFF32,XK_Hangul_End = 0xFF33,XK_Hangul_Hanja = 0xFF34,XK_Hangul_Jamo = 0xFF35,XK_Hangul_Romaja = 0xFF36,XK_Hangul_Codeinput = 0xFF37,XK_Hangul_Jeonja = 0xFF38,XK_Hangul_Banja = 0xFF39,XK_Hangul_PreHanja = 0xFF3A,XK_Hangul_PostHanja = 0xFF3B,XK_Hangul_SingleCandidate = 0xFF3C,XK_Hangul_MultipleCandidate = 0xFF3D,XK_Hangul_PreviousCandidate = 0xFF3E,XK_Hangul_Special = 0xFF3F,XK_Hangul_switch = 0xFF7E,XK_Hangul_Kiyeog = 0xEA1,XK_Hangul_SsangKiyeog = 0xEA2,XK_Hangul_KiyeogSios = 0xEA3,XK_Hangul_Nieun = 0xEA4,XK_Hangul_NieunJieuj = 0xEA5,XK_Hangul_NieunHieuh = 0xEA6,XK_Hangul_Dikeud = 0xEA7,XK_Hangul_SsangDikeud = 0xEA8,XK_Hangul_Rieul = 0xEA9,XK_Hangul_RieulKiyeog = 0xEAA,XK_Hangul_RieulMieum = 0xEAB,XK_Hangul_RieulPieub = 0xEAC,XK_Hangul_RieulSios = 0xEAD,XK_Hangul_RieulTieut = 0xEAE,XK_Hangul_RieulPhieuf = 0xEAF,XK_Hangul_RieulHieuh = 0xEB0,XK_Hangul_Mieum = 0xEB1,XK_Hangul_Pieub = 0xEB2,XK_Hangul_SsangPieub = 0xEB3,XK_Hangul_PieubSios = 0xEB4,XK_Hangul_Sios = 0xEB5,XK_Hangul_SsangSios = 0xEB6,XK_Hangul_Ieung = 0xEB7,XK_Hangul_Jieuj = 0xEB8,XK_Hangul_SsangJieuj = 0xEB9,XK_Hangul_Cieuc = 0xEBA,XK_Hangul_Khieuq = 0xEBB,XK_Hangul_Tieut = 0xEBC,XK_Hangul_Phieuf = 0xEBD,XK_Hangul_Hieuh = 0xEBE,XK_Hangul_A = 0xEBF,XK_Hangul_AE = 0xEC0,XK_Hangul_YA = 0xEC1,XK_Hangul_YAE = 0xEC2,XK_Hangul_EO = 0xEC3,XK_Hangul_E = 0xEC4,XK_Hangul_YEO = 0xEC5,XK_Hangul_YE = 0xEC6,XK_Hangul_O = 0xEC7,XK_Hangul_WA = 0xEC8,XK_Hangul_WAE = 0xEC9,XK_Hangul_OE = 0xECA,XK_Hangul_YO = 0xECB,XK_Hangul_U = 0xECC,XK_Hangul_WEO = 0xECD,XK_Hangul_WE = 0xECE,XK_Hangul_WI = 0xECF,XK_Hangul_YU = 0xED0,XK_Hangul_EU = 0xED1,XK_Hangul_YI = 0xED2,XK_Hangul_I = 0xED3,XK_Hangul_J_Kiyeog = 0xED4,XK_Hangul_J_SsangKiyeog = 0xED5,XK_Hangul_J_KiyeogSios = 0xED6,XK_Hangul_J_Nieun = 0xED7,XK_Hangul_J_NieunJieuj = 0xED8,XK_Hangul_J_NieunHieuh = 0xED9,XK_Hangul_J_Dikeud = 0xEDA,XK_Hangul_J_Rieul = 0xEDB,XK_Hangul_J_RieulKiyeog = 0xEDC,XK_Hangul_J_RieulMieum = 0xEDD,XK_Hangul_J_RieulPieub = 0xEDE,XK_Hangul_J_RieulSios = 0xEDF,XK_Hangul_J_RieulTieut = 0xEE0,XK_Hangul_J_RieulPhieuf = 0xEE1,XK_Hangul_J_RieulHieuh = 0xEE2,XK_Hangul_J_Mieum = 0xEE3,XK_Hangul_J_Pieub = 0xEE4,XK_Hangul_J_PieubSios = 0xEE5,XK_Hangul_J_Sios = 0xEE6,XK_Hangul_J_SsangSios = 0xEE7,XK_Hangul_J_Ieung = 0xEE8,XK_Hangul_J_Jieuj = 0xEE9,XK_Hangul_J_Cieuc = 0xEEA,XK_Hangul_J_Khieuq = 0xEEB,XK_Hangul_J_Tieut = 0xEEC,XK_Hangul_J_Phieuf = 0xEED,XK_Hangul_J_Hieuh = 0xEEE,XK_Hangul_RieulYeorinHieuh = 0xEEF,XK_Hangul_SunkyeongeumMieum = 0xEF0,XK_Hangul_SunkyeongeumPieub = 0xEF1,XK_Hangul_PanSios = 0xEF2,XK_Hangul_KkogjiDalrinIeung = 0xEF3,XK_Hangul_SunkyeongeumPhieuf = 0xEF4,XK_Hangul_YeorinHieuh = 0xEF5,XK_Hangul_AraeA = 0xEF6,XK_Hangul_AraeAE = 0xEF7,XK_Hangul_J_PanSios = 0xEF8,XK_Hangul_J_KkogjiDalrinIeung = 0xEF9,XK_Hangul_J_YeorinHieuh = 0xEFA,XK_Korean_Won = 0xEFF,XK_Armenian_ligature_ew = 0x1000587,XK_Armenian_full_stop = 0x1000589,XK_Armenian_verjaket = 0x1000589,XK_Armenian_separation_mark = 0x100055D,XK_Armenian_but = 0x100055D,XK_Armenian_hyphen = 0x100058A,XK_Armenian_yentamna = 0x100058A,XK_Armenian_exclam = 0x100055C,XK_Armenian_amanak = 0x100055C,XK_Armenian_accent = 0x100055B,XK_Armenian_shesht = 0x100055B,XK_Armenian_question = 0x100055E,XK_Armenian_paruyk = 0x100055E,XK_Armenian_AYB = 0x1000531,XK_Armenian_ayb = 0x1000561,XK_Armenian_BEN = 0x1000532,XK_Armenian_ben = 0x1000562,XK_Armenian_GIM = 0x1000533,XK_Armenian_gim = 0x1000563,XK_Armenian_DA = 0x1000534,XK_Armenian_da = 0x1000564,XK_Armenian_YECH = 0x1000535,XK_Armenian_yech = 0x1000565,XK_Armenian_ZA = 0x1000536,XK_Armenian_za = 0x1000566,XK_Armenian_E = 0x1000537,XK_Armenian_e = 0x1000567,XK_Armenian_AT = 0x1000538,XK_Armenian_at = 0x1000568,XK_Armenian_TO = 0x1000539,XK_Armenian_to = 0x1000569,XK_Armenian_ZHE = 0x100053A,XK_Armenian_zhe = 0x100056A,XK_Armenian_INI = 0x100053B,XK_Armenian_ini = 0x100056B,XK_Armenian_LYUN = 0x100053C,XK_Armenian_lyun = 0x100056C,XK_Armenian_KHE = 0x100053D,XK_Armenian_khe = 0x100056D,XK_Armenian_TSA = 0x100053E,XK_Armenian_tsa = 0x100056E,XK_Armenian_KEN = 0x100053F,XK_Armenian_ken = 0x100056F,XK_Armenian_HO = 0x1000540,XK_Armenian_ho = 0x1000570,XK_Armenian_DZA = 0x1000541,XK_Armenian_dza = 0x1000571,XK_Armenian_GHAT = 0x1000542,XK_Armenian_ghat = 0x1000572,XK_Armenian_TCHE = 0x1000543,XK_Armenian_tche = 0x1000573,XK_Armenian_MEN = 0x1000544,XK_Armenian_men = 0x1000574,XK_Armenian_HI = 0x1000545,XK_Armenian_hi = 0x1000575,XK_Armenian_NU = 0x1000546,XK_Armenian_nu = 0x1000576,XK_Armenian_SHA = 0x1000547,XK_Armenian_sha = 0x1000577,XK_Armenian_VO = 0x1000548,XK_Armenian_vo = 0x1000578,XK_Armenian_CHA = 0x1000549,XK_Armenian_cha = 0x1000579,XK_Armenian_PE = 0x100054A,XK_Armenian_pe = 0x100057A,XK_Armenian_JE = 0x100054B,XK_Armenian_je = 0x100057B,XK_Armenian_RA = 0x100054C,XK_Armenian_ra = 0x100057C,XK_Armenian_SE = 0x100054D,XK_Armenian_se = 0x100057D,XK_Armenian_VEV = 0x100054E,XK_Armenian_vev = 0x100057E,XK_Armenian_TYUN = 0x100054F,XK_Armenian_tyun = 0x100057F,XK_Armenian_RE = 0x1000550,XK_Armenian_re = 0x1000580,XK_Armenian_TSO = 0x1000551,XK_Armenian_tso = 0x1000581,XK_Armenian_VYUN = 0x1000552,XK_Armenian_vyun = 0x1000582,XK_Armenian_PYUR = 0x1000553,XK_Armenian_pyur = 0x1000583,XK_Armenian_KE = 0x1000554,XK_Armenian_ke = 0x1000584,XK_Armenian_O = 0x1000555,XK_Armenian_o = 0x1000585,XK_Armenian_FE = 0x1000556,XK_Armenian_fe = 0x1000586,XK_Armenian_apostrophe = 0x100055A,XK_Georgian_an = 0x10010D0,XK_Georgian_ban = 0x10010D1,XK_Georgian_gan = 0x10010D2,XK_Georgian_don = 0x10010D3,XK_Georgian_en = 0x10010D4,XK_Georgian_vin = 0x10010D5,XK_Georgian_zen = 0x10010D6,XK_Georgian_tan = 0x10010D7,XK_Georgian_in = 0x10010D8,XK_Georgian_kan = 0x10010D9,XK_Georgian_las = 0x10010DA,XK_Georgian_man = 0x10010DB,XK_Georgian_nar = 0x10010DC,XK_Georgian_on = 0x10010DD,XK_Georgian_par = 0x10010DE,XK_Georgian_zhar = 0x10010DF,XK_Georgian_rae = 0x10010E0,XK_Georgian_san = 0x10010E1,XK_Georgian_tar = 0x10010E2,XK_Georgian_un = 0x10010E3,XK_Georgian_phar = 0x10010E4,XK_Georgian_khar = 0x10010E5,XK_Georgian_ghan = 0x10010E6,XK_Georgian_qar = 0x10010E7,XK_Georgian_shin = 0x10010E8,XK_Georgian_chin = 0x10010E9,XK_Georgian_can = 0x10010EA,XK_Georgian_jil = 0x10010EB,XK_Georgian_cil = 0x10010EC,XK_Georgian_char = 0x10010ED,XK_Georgian_xan = 0x10010EE,XK_Georgian_jhan = 0x10010EF,XK_Georgian_hae = 0x10010F0,XK_Georgian_he = 0x10010F1,XK_Georgian_hie = 0x10010F2,XK_Georgian_we = 0x10010F3,XK_Georgian_har = 0x10010F4,XK_Georgian_hoe = 0x10010F5,XK_Georgian_fi = 0x10010F6,XK_Xabovedot = 0x1001E8A,XK_Ibreve = 0x100012C,XK_Zstroke = 0x10001B5,XK_Gcaron = 0x10001E6,XK_Ocaron = 0x10001D1,XK_Obarred = 0x100019F,XK_xabovedot = 0x1001E8B,XK_ibreve = 0x100012D,XK_zstroke = 0x10001B6,XK_gcaron = 0x10001E7,XK_ocaron = 0x10001D2,XK_obarred = 0x1000275,XK_SCHWA = 0x100018F,XK_schwa = 0x1000259,XK_Lbelowdot = 0x1001E36,XK_lbelowdot = 0x1001E37,XK_Abelowdot = 0x1001EA0,XK_abelowdot = 0x1001EA1,XK_Ahook = 0x1001EA2,XK_ahook = 0x1001EA3,XK_Acircumflexacute = 0x1001EA4,XK_acircumflexacute = 0x1001EA5,XK_Acircumflexgrave = 0x1001EA6,XK_acircumflexgrave = 0x1001EA7,XK_Acircumflexhook = 0x1001EA8,XK_acircumflexhook = 0x1001EA9,XK_Acircumflextilde = 0x1001EAA,XK_acircumflextilde = 0x1001EAB,XK_Acircumflexbelowdot = 0x1001EAC,XK_acircumflexbelowdot = 0x1001EAD,XK_Abreveacute = 0x1001EAE,XK_abreveacute = 0x1001EAF,XK_Abrevegrave = 0x1001EB0,XK_abrevegrave = 0x1001EB1,XK_Abrevehook = 0x1001EB2,XK_abrevehook = 0x1001EB3,XK_Abrevetilde = 0x1001EB4,XK_abrevetilde = 0x1001EB5,XK_Abrevebelowdot = 0x1001EB6,XK_abrevebelowdot = 0x1001EB7,XK_Ebelowdot = 0x1001EB8,XK_ebelowdot = 0x1001EB9,XK_Ehook = 0x1001EBA,XK_ehook = 0x1001EBB,XK_Etilde = 0x1001EBC,XK_etilde = 0x1001EBD,XK_Ecircumflexacute = 0x1001EBE,XK_ecircumflexacute = 0x1001EBF,XK_Ecircumflexgrave = 0x1001EC0,XK_ecircumflexgrave = 0x1001EC1,XK_Ecircumflexhook = 0x1001EC2,XK_ecircumflexhook = 0x1001EC3,XK_Ecircumflextilde = 0x1001EC4,XK_ecircumflextilde = 0x1001EC5,XK_Ecircumflexbelowdot = 0x1001EC6,XK_ecircumflexbelowdot = 0x1001EC7,XK_Ihook = 0x1001EC8,XK_ihook = 0x1001EC9,XK_Ibelowdot = 0x1001ECA,XK_ibelowdot = 0x1001ECB,XK_Obelowdot = 0x1001ECC,XK_obelowdot = 0x1001ECD,XK_Ohook = 0x1001ECE,XK_ohook = 0x1001ECF,XK_Ocircumflexacute = 0x1001ED0,XK_ocircumflexacute = 0x1001ED1,XK_Ocircumflexgrave = 0x1001ED2,XK_ocircumflexgrave = 0x1001ED3,XK_Ocircumflexhook = 0x1001ED4,XK_ocircumflexhook = 0x1001ED5,XK_Ocircumflextilde = 0x1001ED6,XK_ocircumflextilde = 0x1001ED7,XK_Ocircumflexbelowdot = 0x1001ED8,XK_ocircumflexbelowdot = 0x1001ED9,XK_Ohornacute = 0x1001EDA,XK_ohornacute = 0x1001EDB,XK_Ohorngrave = 0x1001EDC,XK_ohorngrave = 0x1001EDD,XK_Ohornhook = 0x1001EDE,XK_ohornhook = 0x1001EDF,XK_Ohorntilde = 0x1001EE0,XK_ohorntilde = 0x1001EE1,XK_Ohornbelowdot = 0x1001EE2,XK_ohornbelowdot = 0x1001EE3,XK_Ubelowdot = 0x1001EE4,XK_ubelowdot = 0x1001EE5,XK_Uhook = 0x1001EE6,XK_uhook = 0x1001EE7,XK_Uhornacute = 0x1001EE8,XK_uhornacute = 0x1001EE9,XK_Uhorngrave = 0x1001EEA,XK_uhorngrave = 0x1001EEB,XK_Uhornhook = 0x1001EEC,XK_uhornhook = 0x1001EED,XK_Uhorntilde = 0x1001EEE,XK_uhorntilde = 0x1001EEF,XK_Uhornbelowdot = 0x1001EF0,XK_uhornbelowdot = 0x1001EF1,XK_Ybelowdot = 0x1001EF4,XK_ybelowdot = 0x1001EF5,XK_Yhook = 0x1001EF6,XK_yhook = 0x1001EF7,XK_Ytilde = 0x1001EF8,XK_ytilde = 0x1001EF9,XK_Ohorn = 0x10001A0,XK_ohorn = 0x10001A1,XK_Uhorn = 0x10001AF,XK_uhorn = 0x10001B0,XK_EcuSign = 0x10020A0,XK_ColonSign = 0x10020A1,XK_CruzeiroSign = 0x10020A2,XK_FFrancSign = 0x10020A3,XK_LiraSign = 0x10020A4,XK_MillSign = 0x10020A5,XK_NairaSign = 0x10020A6,XK_PesetaSign = 0x10020A7,XK_RupeeSign = 0x10020A8,XK_WonSign = 0x10020A9,XK_NewSheqelSign = 0x10020AA,XK_DongSign = 0x10020AB,XK_EuroSign = 0x20AC,XK_zerosuperior = 0x1002070,XK_foursuperior = 0x1002074,XK_fivesuperior = 0x1002075,XK_sixsuperior = 0x1002076,XK_sevensuperior = 0x1002077,XK_eightsuperior = 0x1002078,XK_ninesuperior = 0x1002079,XK_zerosubscript = 0x1002080,XK_onesubscript = 0x1002081,XK_twosubscript = 0x1002082,XK_threesubscript = 0x1002083,XK_foursubscript = 0x1002084,XK_fivesubscript = 0x1002085,XK_sixsubscript = 0x1002086,XK_sevensubscript = 0x1002087,XK_eightsubscript = 0x1002088,XK_ninesubscript = 0x1002089,XK_partdifferential = 0x1002202,XK_emptyset = 0x1002205,XK_elementof = 0x1002208,XK_notelementof = 0x1002209,XK_containsas = 0x100220B,XK_squareroot = 0x100221A,XK_cuberoot = 0x100221B,XK_fourthroot = 0x100221C,XK_dintegral = 0x100222C,XK_tintegral = 0x100222D,XK_because = 0x1002235,XK_approxeq = 0x1002248,XK_notapproxeq = 0x1002247,XK_notidentical = 0x1002262,XK_stricteq = 0x1002263,XK_braille_dot_1 = 0xFFF1,XK_braille_dot_2 = 0xFFF2,XK_braille_dot_3 = 0xFFF3,XK_braille_dot_4 = 0xFFF4,XK_braille_dot_5 = 0xFFF5,XK_braille_dot_6 = 0xFFF6,XK_braille_dot_7 = 0xFFF7,XK_braille_dot_8 = 0xFFF8,XK_braille_dot_9 = 0xFFF9,XK_braille_dot_10 = 0xFFFA,XK_braille_blank = 0x1002800,XK_braille_dots_1 = 0x1002801,XK_braille_dots_2 = 0x1002802,XK_braille_dots_12 = 0x1002803,XK_braille_dots_3 = 0x1002804,XK_braille_dots_13 = 0x1002805,XK_braille_dots_23 = 0x1002806,XK_braille_dots_123 = 0x1002807,XK_braille_dots_4 = 0x1002808,XK_braille_dots_14 = 0x1002809,XK_braille_dots_24 = 0x100280A,XK_braille_dots_124 = 0x100280B,XK_braille_dots_34 = 0x100280C,XK_braille_dots_134 = 0x100280D,XK_braille_dots_234 = 0x100280E,XK_braille_dots_1234 = 0x100280F,XK_braille_dots_5 = 0x1002810,XK_braille_dots_15 = 0x1002811,XK_braille_dots_25 = 0x1002812,XK_braille_dots_125 = 0x1002813,XK_braille_dots_35 = 0x1002814,XK_braille_dots_135 = 0x1002815,XK_braille_dots_235 = 0x1002816,XK_braille_dots_1235 = 0x1002817,XK_braille_dots_45 = 0x1002818,XK_braille_dots_145 = 0x1002819,XK_braille_dots_245 = 0x100281A,XK_braille_dots_1245 = 0x100281B,XK_braille_dots_345 = 0x100281C,XK_braille_dots_1345 = 0x100281D,XK_braille_dots_2345 = 0x100281E,XK_braille_dots_12345 = 0x100281F,XK_braille_dots_6 = 0x1002820,XK_braille_dots_16 = 0x1002821,XK_braille_dots_26 = 0x1002822,XK_braille_dots_126 = 0x1002823,XK_braille_dots_36 = 0x1002824,XK_braille_dots_136 = 0x1002825,XK_braille_dots_236 = 0x1002826,XK_braille_dots_1236 = 0x1002827,XK_braille_dots_46 = 0x1002828,XK_braille_dots_146 = 0x1002829,XK_braille_dots_246 = 0x100282A,XK_braille_dots_1246 = 0x100282B,XK_braille_dots_346 = 0x100282C,XK_braille_dots_1346 = 0x100282D,XK_braille_dots_2346 = 0x100282E,XK_braille_dots_12346 = 0x100282F,XK_braille_dots_56 = 0x1002830,XK_braille_dots_156 = 0x1002831,XK_braille_dots_256 = 0x1002832,XK_braille_dots_1256 = 0x1002833,XK_braille_dots_356 = 0x1002834,XK_braille_dots_1356 = 0x1002835,XK_braille_dots_2356 = 0x1002836,XK_braille_dots_12356 = 0x1002837,XK_braille_dots_456 = 0x1002838,XK_braille_dots_1456 = 0x1002839,XK_braille_dots_2456 = 0x100283A,XK_braille_dots_12456 = 0x100283B,XK_braille_dots_3456 = 0x100283C,XK_braille_dots_13456 = 0x100283D,XK_braille_dots_23456 = 0x100283E,XK_braille_dots_123456 = 0x100283F,XK_braille_dots_7 = 0x1002840,XK_braille_dots_17 = 0x1002841,XK_braille_dots_27 = 0x1002842,XK_braille_dots_127 = 0x1002843,XK_braille_dots_37 = 0x1002844,XK_braille_dots_137 = 0x1002845,XK_braille_dots_237 = 0x1002846,XK_braille_dots_1237 = 0x1002847,XK_braille_dots_47 = 0x1002848,XK_braille_dots_147 = 0x1002849,XK_braille_dots_247 = 0x100284A,XK_braille_dots_1247 = 0x100284B,XK_braille_dots_347 = 0x100284C,XK_braille_dots_1347 = 0x100284D,XK_braille_dots_2347 = 0x100284E,XK_braille_dots_12347 = 0x100284F,XK_braille_dots_57 = 0x1002850,XK_braille_dots_157 = 0x1002851,XK_braille_dots_257 = 0x1002852,XK_braille_dots_1257 = 0x1002853,XK_braille_dots_357 = 0x1002854,XK_braille_dots_1357 = 0x1002855,XK_braille_dots_2357 = 0x1002856,XK_braille_dots_12357 = 0x1002857,XK_braille_dots_457 = 0x1002858,XK_braille_dots_1457 = 0x1002859,XK_braille_dots_2457 = 0x100285A,XK_braille_dots_12457 = 0x100285B,XK_braille_dots_3457 = 0x100285C,XK_braille_dots_13457 = 0x100285D,XK_braille_dots_23457 = 0x100285E,XK_braille_dots_123457 = 0x100285F,XK_braille_dots_67 = 0x1002860,XK_braille_dots_167 = 0x1002861,XK_braille_dots_267 = 0x1002862,XK_braille_dots_1267 = 0x1002863,XK_braille_dots_367 = 0x1002864,XK_braille_dots_1367 = 0x1002865,XK_braille_dots_2367 = 0x1002866,XK_braille_dots_12367 = 0x1002867,XK_braille_dots_467 = 0x1002868,XK_braille_dots_1467 = 0x1002869,XK_braille_dots_2467 = 0x100286A,XK_braille_dots_12467 = 0x100286B,XK_braille_dots_3467 = 0x100286C,XK_braille_dots_13467 = 0x100286D,XK_braille_dots_23467 = 0x100286E,XK_braille_dots_123467 = 0x100286F,XK_braille_dots_567 = 0x1002870,XK_braille_dots_1567 = 0x1002871,XK_braille_dots_2567 = 0x1002872,XK_braille_dots_12567 = 0x1002873,XK_braille_dots_3567 = 0x1002874,XK_braille_dots_13567 = 0x1002875,XK_braille_dots_23567 = 0x1002876,XK_braille_dots_123567 = 0x1002877,XK_braille_dots_4567 = 0x1002878,XK_braille_dots_14567 = 0x1002879,XK_braille_dots_24567 = 0x100287A,XK_braille_dots_124567 = 0x100287B,XK_braille_dots_34567 = 0x100287C,XK_braille_dots_134567 = 0x100287D,XK_braille_dots_234567 = 0x100287E,XK_braille_dots_1234567 = 0x100287F,XK_braille_dots_8 = 0x1002880,XK_braille_dots_18 = 0x1002881,XK_braille_dots_28 = 0x1002882,XK_braille_dots_128 = 0x1002883,XK_braille_dots_38 = 0x1002884,XK_braille_dots_138 = 0x1002885,XK_braille_dots_238 = 0x1002886,XK_braille_dots_1238 = 0x1002887,XK_braille_dots_48 = 0x1002888,XK_braille_dots_148 = 0x1002889,XK_braille_dots_248 = 0x100288A,XK_braille_dots_1248 = 0x100288B,XK_braille_dots_348 = 0x100288C,XK_braille_dots_1348 = 0x100288D,XK_braille_dots_2348 = 0x100288E,XK_braille_dots_12348 = 0x100288F,XK_braille_dots_58 = 0x1002890,XK_braille_dots_158 = 0x1002891,XK_braille_dots_258 = 0x1002892,XK_braille_dots_1258 = 0x1002893,XK_braille_dots_358 = 0x1002894,XK_braille_dots_1358 = 0x1002895,XK_braille_dots_2358 = 0x1002896,XK_braille_dots_12358 = 0x1002897,XK_braille_dots_458 = 0x1002898,XK_braille_dots_1458 = 0x1002899,XK_braille_dots_2458 = 0x100289A,XK_braille_dots_12458 = 0x100289B,XK_braille_dots_3458 = 0x100289C,XK_braille_dots_13458 = 0x100289D,XK_braille_dots_23458 = 0x100289E,XK_braille_dots_123458 = 0x100289F,XK_braille_dots_68 = 0x10028A0,XK_braille_dots_168 = 0x10028A1,XK_braille_dots_268 = 0x10028A2,XK_braille_dots_1268 = 0x10028A3,XK_braille_dots_368 = 0x10028A4,XK_braille_dots_1368 = 0x10028A5,XK_braille_dots_2368 = 0x10028A6,XK_braille_dots_12368 = 0x10028A7,XK_braille_dots_468 = 0x10028A8,XK_braille_dots_1468 = 0x10028A9,XK_braille_dots_2468 = 0x10028AA,XK_braille_dots_12468 = 0x10028AB,XK_braille_dots_3468 = 0x10028AC,XK_braille_dots_13468 = 0x10028AD,XK_braille_dots_23468 = 0x10028AE,XK_braille_dots_123468 = 0x10028AF,XK_braille_dots_568 = 0x10028B0,XK_braille_dots_1568 = 0x10028B1,XK_braille_dots_2568 = 0x10028B2,XK_braille_dots_12568 = 0x10028B3,XK_braille_dots_3568 = 0x10028B4,XK_braille_dots_13568 = 0x10028B5,XK_braille_dots_23568 = 0x10028B6,XK_braille_dots_123568 = 0x10028B7,XK_braille_dots_4568 = 0x10028B8,XK_braille_dots_14568 = 0x10028B9,XK_braille_dots_24568 = 0x10028BA,XK_braille_dots_124568 = 0x10028BB,XK_braille_dots_34568 = 0x10028BC,XK_braille_dots_134568 = 0x10028BD,XK_braille_dots_234568 = 0x10028BE,XK_braille_dots_1234568 = 0x10028BF,XK_braille_dots_78 = 0x10028C0,XK_braille_dots_178 = 0x10028C1,XK_braille_dots_278 = 0x10028C2,XK_braille_dots_1278 = 0x10028C3,XK_braille_dots_378 = 0x10028C4,XK_braille_dots_1378 = 0x10028C5,XK_braille_dots_2378 = 0x10028C6,XK_braille_dots_12378 = 0x10028C7,XK_braille_dots_478 = 0x10028C8,XK_braille_dots_1478 = 0x10028C9,XK_braille_dots_2478 = 0x10028CA,XK_braille_dots_12478 = 0x10028CB,XK_braille_dots_3478 = 0x10028CC,XK_braille_dots_13478 = 0x10028CD,XK_braille_dots_23478 = 0x10028CE,XK_braille_dots_123478 = 0x10028CF,XK_braille_dots_578 = 0x10028D0,XK_braille_dots_1578 = 0x10028D1,XK_braille_dots_2578 = 0x10028D2,XK_braille_dots_12578 = 0x10028D3,XK_braille_dots_3578 = 0x10028D4,XK_braille_dots_13578 = 0x10028D5,XK_braille_dots_23578 = 0x10028D6,XK_braille_dots_123578 = 0x10028D7,XK_braille_dots_4578 = 0x10028D8,XK_braille_dots_14578 = 0x10028D9,XK_braille_dots_24578 = 0x10028DA,XK_braille_dots_124578 = 0x10028DB,XK_braille_dots_34578 = 0x10028DC,XK_braille_dots_134578 = 0x10028DD,XK_braille_dots_234578 = 0x10028DE,XK_braille_dots_1234578 = 0x10028DF,XK_braille_dots_678 = 0x10028E0,XK_braille_dots_1678 = 0x10028E1,XK_braille_dots_2678 = 0x10028E2,XK_braille_dots_12678 = 0x10028E3,XK_braille_dots_3678 = 0x10028E4,XK_braille_dots_13678 = 0x10028E5,XK_braille_dots_23678 = 0x10028E6,XK_braille_dots_123678 = 0x10028E7,XK_braille_dots_4678 = 0x10028E8,XK_braille_dots_14678 = 0x10028E9,XK_braille_dots_24678 = 0x10028EA,XK_braille_dots_124678 = 0x10028EB,XK_braille_dots_34678 = 0x10028EC,XK_braille_dots_134678 = 0x10028ED,XK_braille_dots_234678 = 0x10028EE,XK_braille_dots_1234678 = 0x10028EF,XK_braille_dots_5678 = 0x10028F0,XK_braille_dots_15678 = 0x10028F1,XK_braille_dots_25678 = 0x10028F2,XK_braille_dots_125678 = 0x10028F3,XK_braille_dots_35678 = 0x10028F4,XK_braille_dots_135678 = 0x10028F5,XK_braille_dots_235678 = 0x10028F6,XK_braille_dots_1235678 = 0x10028F7,XK_braille_dots_45678 = 0x10028F8,XK_braille_dots_145678 = 0x10028F9,XK_braille_dots_245678 = 0x10028FA,XK_braille_dots_1245678 = 0x10028FB,XK_braille_dots_345678 = 0x10028FC,XK_braille_dots_1345678 = 0x10028FD,XK_braille_dots_2345678 = 0x10028FE,XK_braille_dots_12345678 = 0x10028FF,};
enum MACRO_XP {XP_DONT_CHECK = 0,XP_INITIAL_RELEASE = 1,XP_PROTO_MAJOR = 1,XP_PROTO_MINOR = 0,XP_MAJOR_VERSION = 1,XP_MINOR_VERSION = 0,XP_ABSENT = 0,XP_PRESENT = 1,XP_ERRORS = 3,};
enum MACRO_XT {XT_CONVERT_FAIL = 0x80000001,XT_VERSION = 0xB,XT_REVISION = 0x6,};
enum MACRO__G {_G_config_h = 1,};
enum MACRO__K {_K_SS_MAXSIZE = 128,};
enum MACRO_ft {ft_outline_none = 0,ft_outline_owner = 1,ft_outline_even_odd_fill = 2,ft_outline_reverse_fill = 4,ft_outline_ignore_dropouts = 8,ft_outline_high_precision = 256,ft_outline_single_pass = 512,};
enum MACRO_ss {ss_err_base = 748800,};
enum MACRO_sz {sz_xGLXRenderReq = 8,};
enum MACRO_xv {xv_QueryExtension = 0,xv_QueryAdaptors = 1,xv_QueryEncodings = 2,xv_GrabPort = 3,xv_UngrabPort = 4,xv_PutVideo = 5,xv_PutStill = 6,xv_GetVideo = 7,xv_GetStill = 8,xv_StopVideo = 9,xv_SelectVideoNotify = 10,xv_SelectPortNotify = 11,xv_QueryBestSize = 12,xv_SetPortAttribute = 13,xv_GetPortAttribute = 14,xv_QueryPortAttributes = 15,xv_ListImageFormats = 16,xv_QueryImageAttributes = 17,xv_PutImage = 18,xv_ShmPutImage = 19,xv_LastRequest = 19,};
typedef struct PS_BlendRec_ *PS_Blend;
typedef struct _PanedRec PanedRec;
typedef struct _ParamRec ParamRec;
typedef short Position;
typedef struct _7FBA96F229FB301DA1D20C97214BF251 *PropList;
typedef unsigned char ResIdent;
typedef unsigned short Rotation;
typedef struct _984028CEBAA862490ACFAD72BCDE57E1 ShellRec;
typedef struct _XtStateRec *StatePtr;
typedef struct _XtStateRec StateRec;
typedef struct term TERMINAL;
typedef struct termtype TERMTYPE;
typedef struct _TextPart TextPart;
typedef struct _D03F7999BD0EFD0AEFB0AB94057876B9 TreePart;
typedef unsigned int VisualID;
typedef struct WBXMLTag_s WBXMLTag;
typedef int XContext;
typedef struct _DE22F0CCEF99DCE80683B5031CFFEACA XDGAMode;
typedef struct _A572CE7E5663FCA9F137B2D1D40B04E1 XETrapCB;
typedef struct _XExtData XExtData;
typedef struct _XFilters XFilters;
typedef struct _XOC *XFontSet;
typedef unsigned int XIMStyle;
typedef struct _XKeyInfo XKeyInfo;
typedef unsigned char XML_Bool;
typedef char XML_Char;
typedef unsigned int XML_Size;
typedef char *XPointer;
typedef struct _21F387D49C351711E6B876CB6DA7584F XResType;
typedef struct _335EDB02744B103283B800FF919FC940 XSegment;
typedef struct _XSpanFix XSpanFix;
typedef struct _48A6A373861130075F8524D5C353FEE6 XWDColor;
typedef struct _9DF042AED270B6910968D1A2BC70046F XWMHints;
typedef struct _389F741C4688F992C1DDC28AB9B68F46 XcmsRGBi;
typedef unsigned int XctFlags;
typedef struct _XftColor XftColor;
typedef union _XkbEvent XkbEvent;
typedef struct _26934E13CB11D4E3DDD70D95266A4A57 XpmColor;
typedef struct _1801593F65176DF1DA4677E119FA0B5C XpmImage;
typedef int XrmQuark;
typedef struct _48974C792553FBFA318CEC22C625F222 XrmValue;
typedef int XtArgVal;
typedef struct _XtDeviceRec *XtDevice;
typedef unsigned int XtGCMask;
typedef struct _ADF91E6B5301140E8711A6FF29415028 XvFormat;
struct ZlibInfo;
struct _ExifLog;
struct _ExifMem;
struct _FcCache;
typedef struct _XSQEvent _XQEvent;
struct _XftDraw;
struct _XkbMods {unsigned char mask;unsigned char real_mods;unsigned short vmods;};
typedef struct _9722585E737591D9DBBFC1CA80083F53 __fsid_t;
typedef signed char __int8_t;
typedef unsigned int __mode_t;
typedef long long __quad_t;
typedef unsigned int __rlim_t;
typedef int __time_t;
typedef unsigned char __u_char;
typedef unsigned int __u_long;
struct a2ps_job;
typedef struct bfd_section asection;
struct bandinfo {unsigned char bi_pri;int bi_flag;};
typedef unsigned char bfd_byte;
struct copr_msg {int len;unsigned char data[4000];};
typedef struct _6954A090FF674864C2EF0B367DFBE910 dgaEvent;
struct endpoint {char *uaddr;char *family;char *proto;};
typedef long long file_ptr;
typedef unsigned int flagword;
typedef struct _BAC7E67B0C2C05C40DFF67087D59816E fr_proto;
typedef struct _CE866585EA90BEF8E1777B84F5242003 fsChar2b;
enum fsh_mode {fsm_DN = 0x0,fsm_DR = 0x1,fsm_DW = 0x2,fsm_DRW = 0x3,};
struct gmon_hdr {char cookie[4];char version[4];char spare[12];};
typedef void (*htab_del)(void *);
typedef int ijs_bool;
typedef long long intmax_t;
typedef int intptr_t;
typedef unsigned char jboolean;
typedef struct _jfieldID *jfieldID;
struct kbsentry {unsigned char kb_func;unsigned char kb_string[512];};
struct mallinfo {int arena;int ordblks;int smblks;int hblks;int hblkhd;int usmblks;int fsmblks;int uordblks;int fordblks;int keepcost;};
enum msg_type {CALL = 0x0,REPLY = 0x1,};
typedef unsigned int msglen_t;
enum name_pos {SAME_NAME = 0x0,HIGHER_NAME = 0x1,LOWER_NAME = 0x2,NOT_SEQUENTIAL = 0x3,BAD_NAME = 0x4,};
enum nfs_stat {NFS_OK = 0x0,NFSERR_PERM = 0x1,NFSERR_NOENT = 0x2,NFSERR_IO = 0x5,NFSERR_NXIO = 0x6,NFSERR_EAGAIN = 0xB,NFSERR_ACCES = 0xD,NFSERR_EXIST = 0x11,NFSERR_XDEV = 0x12,NFSERR_NODEV = 0x13,NFSERR_NOTDIR = 0x14,NFSERR_ISDIR = 0x15,NFSERR_INVAL = 0x16,NFSERR_FBIG = 0x1B,NFSERR_NOSPC = 0x1C,NFSERR_ROFS = 0x1E,NFSERR_MLINK = 0x1F,NFSERR_OPNOTSUPP = 0x2D,NFSERR_NAMETOOLONG = 0x3F,NFSERR_NOTEMPTY = 0x42,NFSERR_DQUOT = 0x45,NFSERR_STALE = 0x46,NFSERR_REMOTE = 0x47,NFSERR_WFLUSH = 0x63,NFSERR_BADHANDLE = 0x2711,NFSERR_NOT_SYNC = 0x2712,NFSERR_BAD_COOKIE = 0x2713,NFSERR_NOTSUPP = 0x2714,NFSERR_TOOSMALL = 0x2715,NFSERR_SERVERFAULT = 0x2716,NFSERR_BADTYPE = 0x2717,NFSERR_JUKEBOX = 0x2718,NFSERR_SAME = 0x2719,NFSERR_DENIED = 0x271A,NFSERR_EXPIRED = 0x271B,NFSERR_LOCKED = 0x271C,NFSERR_GRACE = 0x271D,NFSERR_FHEXPIRED = 0x271E,NFSERR_SHARE_DENIED = 0x271F,NFSERR_WRONGSEC = 0x2720,NFSERR_CLID_INUSE = 0x2721,NFSERR_RESOURCE = 0x2722,NFSERR_MOVED = 0x2723,NFSERR_NOFILEHANDLE = 0x2724,NFSERR_MINOR_VERS_MISMATCH = 0x2725,NFSERR_STALE_CLIENTID = 0x2726,NFSERR_STALE_STATEID = 0x2727,NFSERR_OLD_STATEID = 0x2728,NFSERR_BAD_STATEID = 0x2729,NFSERR_BAD_SEQID = 0x272A,NFSERR_NOT_SAME = 0x272B,NFSERR_LOCK_RANGE = 0x272C,NFSERR_SYMLINK = 0x272D,NFSERR_RESTOREFH = 0x272E,NFSERR_LEASE_MOVED = 0x272F,NFSERR_ATTRNOTSUPP = 0x2730,NFSERR_NO_GRACE = 0x2731,NFSERR_RECLAIM_BAD = 0x2732,NFSERR_RECLAIM_CONFLICT = 0x2733,NFSERR_BAD_XDR = 0x2734,NFSERR_LOCKS_HELD = 0x2735,NFSERR_OPENMODE = 0x2736,NFSERR_BADOWNER = 0x2737,NFSERR_BADCHAR = 0x2738,NFSERR_BADNAME = 0x2739,NFSERR_BAD_RANGE = 0x273A,NFSERR_LOCK_NOTSUPP = 0x273B,NFSERR_OP_ILLEGAL = 0x273C,NFSERR_DEADLOCK = 0x273D,NFSERR_FILE_OPEN = 0x273E,NFSERR_ADMIN_REVOKED = 0x273F,NFSERR_CB_PATH_DOWN = 0x2740,NFSERR_REPLAY_ME = 0x2741,};
typedef char *nis_name;
struct objalloc {char *current_ptr;unsigned int current_space;void *chunks;};
typedef struct _D9BDF4B3DDC8B65752EAC3136B32DA96 optEntry;
typedef int (*out_func)(void *, unsigned char *, unsigned int);
typedef char *peername;
struct pex_time {unsigned int user_seconds;unsigned int user_microseconds;unsigned int system_seconds;unsigned int system_microseconds;};
struct protoent {char *p_name;char **p_aliases;int p_proto;};
typedef void *psaddr_t;
typedef int regoff_t;
struct shm_info {int used_ids;unsigned int shm_tot;unsigned int shm_rss;unsigned int shm_swp;unsigned int swap_attempts;unsigned int swap_successes;};
typedef unsigned int shmatt_t;
struct sigstack {void *ss_sp;int ss_onstack;};
typedef union sigval sigval_t;
typedef struct _101ED56796A31C5C092EFC61C0F81522 smDieMsg;
typedef struct _C9793B2A88A40550F3E6FCBE57C78800 sprayarr;
struct str_list {int sl_nmods;struct str_mlist *sl_modlist;};
struct strioctl {int ic_cmd;int ic_timout;int ic_len;char *ic_dp;};
typedef unsigned int symindex;
typedef unsigned long long symvalue;
typedef unsigned int tcflag_t;
struct termtype {char *term_names;char *str_table;char *Booleans;short *Numbers;char **Strings;char *ext_str_table;char **ext_Names;unsigned short num_Booleans;unsigned short num_Numbers;unsigned short num_Strings;unsigned short ext_Booleans;unsigned short ext_Numbers;unsigned short ext_Strings;};
struct timezone {int tz_minuteswest;int tz_dsttime;};
struct ttychars {char tc_erase;char tc_kill;char tc_intrc;char tc_quitc;char tc_startc;char tc_stopc;char tc_eofc;char tc_brkc;char tc_suspc;char tc_dsuspc;char tc_rprntc;char tc_flushc;char tc_werasc;char tc_lnextc;};
typedef unsigned char u_int8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
struct vt_sizes {unsigned short v_rows;unsigned short v_cols;unsigned short v_scrollsize;};
typedef unsigned int wctype_t;
typedef struct _94C04A488373DB802AA4CC07AF27941B xBellReq;
typedef struct _xKeyInfo xKeyInfo;
typedef struct _xSegment xSegment;
typedef struct _2A4E2A3E6DCC7FD4DDF34506A216CCE0 xSpanFix;
typedef struct _F1DC5359840258F1056D6AC9280CBC0A xTextElt;
enum xcb_cw_t {XCB_CW_BACK_PIXMAP = 0x1,XCB_CW_BACK_PIXEL = 0x2,XCB_CW_BORDER_PIXMAP = 0x4,XCB_CW_BORDER_PIXEL = 0x8,XCB_CW_BIT_GRAVITY = 0x10,XCB_CW_WIN_GRAVITY = 0x20,XCB_CW_BACKING_STORE = 0x40,XCB_CW_BACKING_PLANES = 0x80,XCB_CW_BACKING_PIXEL = 0x100,XCB_CW_OVERRIDE_REDIRECT = 0x200,XCB_CW_SAVE_UNDER = 0x400,XCB_CW_EVENT_MASK = 0x800,XCB_CW_DONT_PROPAGATE = 0x1000,XCB_CW_COLORMAP = 0x2000,XCB_CW_CURSOR = 0x4000,};
enum xcb_gc_t {XCB_GC_FUNCTION = 0x1,XCB_GC_PLANE_MASK = 0x2,XCB_GC_FOREGROUND = 0x4,XCB_GC_BACKGROUND = 0x8,XCB_GC_LINE_WIDTH = 0x10,XCB_GC_LINE_STYLE = 0x20,XCB_GC_CAP_STYLE = 0x40,XCB_GC_JOIN_STYLE = 0x80,XCB_GC_FILL_STYLE = 0x100,XCB_GC_FILL_RULE = 0x200,XCB_GC_TILE = 0x400,XCB_GC_STIPPLE = 0x800,XCB_GC_TILE_STIPPLE_ORIGIN_X = 0x1000,XCB_GC_TILE_STIPPLE_ORIGIN_Y = 0x2000,XCB_GC_FONT = 0x4000,XCB_GC_SUBWINDOW_MODE = 0x8000,XCB_GC_GRAPHICS_EXPOSURES = 0x10000,XCB_GC_CLIP_ORIGIN_X = 0x20000,XCB_GC_CLIP_ORIGIN_Y = 0x40000,XCB_GC_CLIP_MASK = 0x80000,XCB_GC_DASH_OFFSET = 0x100000,XCB_GC_DASH_LIST = 0x200000,XCB_GC_ARC_MODE = 0x400000,};
enum xcb_gx_t {XCB_GX_CLEAR = 0x0,XCB_GX_AND = 0x1,XCB_GX_AND_REVERSE = 0x2,XCB_GX_COPY = 0x3,XCB_GX_AND_INVERTED = 0x4,XCB_GX_NOOP = 0x5,XCB_GX_XOR = 0x6,XCB_GX_OR = 0x7,XCB_GX_NOR = 0x8,XCB_GX_EQUIV = 0x9,XCB_GX_INVERT = 0xA,XCB_GX_OR_REVERSE = 0xB,XCB_GX_COPY_INVERTED = 0xC,XCB_GX_OR_INVERTED = 0xD,XCB_GX_NAND = 0xE,XCB_GX_SET = 0xF,};
enum xcb_kb_t {XCB_KB_KEY_CLICK_PERCENT = 0x1,XCB_KB_BELL_PERCENT = 0x2,XCB_KB_BELL_PITCH = 0x4,XCB_KB_BELL_DURATION = 0x8,XCB_KB_LED = 0x10,XCB_KB_LED_MODE = 0x20,XCB_KB_KEY = 0x40,XCB_KB_AUTO_REPEAT_MODE = 0x80,};
typedef struct _xkbEvent xkbEvent;
typedef struct _09E69E0556021A33BB43607C87C36B45 xvFormat;
typedef struct z_stream_s z_stream;
typedef struct _C4D830AACD6CA9C030EA39190076ECCB *ArgList;
typedef struct _AtomRec *AtomPtr;
typedef char Boolean;
typedef struct _582D8074D4EFCBB1785B13940ECA4EF6 BoxPart;
typedef unsigned char BufChar;
typedef struct _7F1527F4980126EB9203A44DB3E05AC8 CTL_MSG;
typedef struct _WidgetRec CoreRec;
typedef struct dl_node DL_node;
typedef struct _XDisplay Display;
struct Elf_Scn;
typedef struct _ExifLog ExifLog;
typedef struct _ExifMem ExifMem;
typedef float FLOAT32;
typedef double FLOAT64;
typedef union _FSEvent FSEvent;
typedef struct _FSRange FSRange;
typedef struct FT_BBox_ FT_BBox;
typedef unsigned char FT_Bool;
typedef unsigned char FT_Byte;
typedef signed char FT_Char;
typedef struct FT_Data_ FT_Data;
typedef struct FT_FaceRec_ *FT_Face;
typedef int FT_Fast;
typedef struct FT_ListRec_ *FT_List;
typedef signed int FT_Long;
typedef struct FT_SizeRec_ *FT_Size;
typedef struct FT_Span_ FT_Span;
typedef unsigned int FT_UInt;
typedef struct _FcCache FcCache;
typedef unsigned char FcChar8;
typedef struct _FcValue FcValue;
typedef struct _Font *FontPtr;
typedef struct _Font FontRec;
typedef struct _FormRec FormRec;
typedef float GLfloat;
typedef short GLshort;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef struct _GripRec GripRec;
typedef struct _IceConn *IceConn;
typedef unsigned char KeyCode;
typedef struct _ListRec ListRec;
typedef struct _LockRec *LockPtr;
enum MACRO_A {A_NORMAL = 0,A_ATTRIBUTES = -256,A_CHARTEXT = 255,A_COLOR = 65280,A_STANDOUT = 65536,A_UNDERLINE = 131072,A_REVERSE = 262144,A_BLINK = 524288,A_DIM = 1048576,A_BOLD = 2097152,A_ALTCHARSET = 4194304,A_INVIS = 8388608,A_PROTECT = 16777216,A_HORIZONTAL = 33554432,A_LEFT = 67108864,A_LOW = 134217728,A_RIGHT = 268435456,A_TOP = 536870912,A_VERTICAL = 1073741824,};
enum MACRO_C {C_IRUSR = 0x100,C_IWUSR = 0x80,C_IXUSR = 0x40,C_IRGRP = 0x20,C_IWGRP = 0x10,C_IXGRP = 0x8,C_IROTH = 0x4,C_IWOTH = 0x2,C_IXOTH = 0x1,C_ISUID = 0x800,C_ISGID = 0x400,C_ISVTX = 0x200,C_ISBLK = 0x6000,C_ISCHR = 0x2000,C_ISDIR = 0x4000,C_ISFIFO = 0x1000,C_ISSOCK = 0xC000,C_ISLNK = 0xA000,C_ISCTG = 0x9000,C_ISREG = 0x8000,};
enum MACRO_D {D_PAGED = 0x100,};
enum MACRO_E {E_MIPS_ARCH_1 = 0x0,E_MIPS_ARCH_2 = 0x10000000,E_MIPS_ARCH_3 = 0x20000000,E_MIPS_ARCH_4 = 0x30000000,E_MIPS_ARCH_5 = 0x40000000,E_MIPS_ARCH_32 = 0x60000000,E_MIPS_ARCH_64 = 0x70000000,};
enum MACRO_F {F_DUPFD = 0,F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_GETLK = 5,F_SETLK = 6,F_SETLKW = 7,F_GETLK64 = 12,F_SETLK64 = 13,F_SETLKW64 = 14,F_SETOWN = 8,F_GETOWN = 9,};
enum MACRO_H {_STDINT_H = 1,_FEATURES_H = 1,};
enum MACRO_I {I_NREAD = 21249,I_PUSH = 21250,I_POP = 21251,I_LOOK = 21252,I_FLUSH = 21253,I_SRDOPT = 21254,I_GRDOPT = 21255,I_STR = 21256,I_SETSIG = 21257,I_GETSIG = 21258,I_FIND = 21259,I_LINK = 21260,I_UNLINK = 21261,I_PEEK = 21263,I_FDINSERT = 21264,I_SENDFD = 21265,I_RECVFD = 21262,I_SWROPT = 21267,I_GWROPT = 21268,I_LIST = 21269,I_PLINK = 21270,I_PUNLINK = 21271,I_FLUSHBAND = 21276,I_CKBAND = 21277,I_GETBAND = 21278,I_ATMARK = 21279,I_SETCLTIME = 21280,I_GETCLTIME = 21281,I_CANPUT = 21282,};
enum MACRO_K {K_RAW = 0x0,K_XLATE = 0x1,K_MEDIUMRAW = 0x2,K_UNICODE = 0x3,};
enum MACRO_L {L_tmpnam = 20,};
enum MACRO_M {M_MXFAST = 1,M_NLBLKS = 2,M_GRAIN = 3,M_KEEP = 4,M_TRIM_THRESHOLD = -1,M_TOP_PAD = -2,M_MMAP_THRESHOLD = -3,M_MMAP_MAX = -4,M_CHECK_ACTION = -5,M_PERTURB = -6,};
enum MACRO_N {N_TTY = 0,N_SLIP = 1,N_MOUSE = 2,N_PPP = 3,N_STRIP = 4,N_AX25 = 5,N_X25 = 6,N_6PACK = 7,N_MASC = 8,N_R3964 = 9,N_PROFIBUS_FDL = 10,N_IRDA = 11,N_SMSBLOCK = 12,N_HDLC = 13,N_SYNC_PPP = 14,N_HCI = 15,};
enum MACRO_O {O_ACCMODE = 0x3,O_RDONLY = 0x0,O_WRONLY = 0x1,O_RDWR = 0x2,O_CREAT = 0x40,O_EXCL = 0x80,O_NOCTTY = 0x100,O_TRUNC = 0x200,O_APPEND = 0x400,O_NONBLOCK = 0x800,O_NDELAY = 0x800,O_SYNC = 0x1000,O_FSYNC = 0x1000,O_ASYNC = 0x2000,O_DSYNC = 0x1000,O_RSYNC = 0x1000,};
enum MACRO_Q {Q_SYNC = 0x800001,Q_QUOTAON = 0x800002,Q_QUOTAOFF = 0x800003,Q_GETFMT = 0x800004,Q_GETINFO = 0x800005,Q_SETINFO = 0x800006,Q_GETQUOTA = 0x800007,Q_SETQUOTA = 0x800008,};
enum MACRO_R {R_68K_NONE = 0,R_68K_32 = 1,R_68K_16 = 2,R_68K_8 = 3,R_68K_PC32 = 4,R_68K_PC16 = 5,R_68K_PC8 = 6,R_68K_GOT32 = 7,R_68K_GOT16 = 8,R_68K_GOT8 = 9,R_68K_GOT32O = 10,R_68K_GOT16O = 11,R_68K_GOT8O = 12,R_68K_PLT32 = 13,R_68K_PLT16 = 14,R_68K_PLT8 = 15,R_68K_PLT32O = 16,R_68K_PLT16O = 17,R_68K_PLT8O = 18,R_68K_COPY = 19,R_68K_GLOB_DAT = 20,R_68K_JMP_SLOT = 21,R_68K_RELATIVE = 22,R_68K_NUM = 23,R_386_NONE = 0,R_386_32 = 1,R_386_PC32 = 2,R_386_GOT32 = 3,R_386_PLT32 = 4,R_386_COPY = 5,R_386_GLOB_DAT = 6,R_386_JMP_SLOT = 7,R_386_RELATIVE = 8,R_386_GOTOFF = 9,R_386_GOTPC = 10,R_386_32PLT = 11,R_386_TLS_TPOFF = 14,R_386_TLS_IE = 15,R_386_TLS_GOTIE = 16,R_386_TLS_LE = 17,R_386_TLS_GD = 18,R_386_TLS_LDM = 19,R_386_16 = 20,R_386_PC16 = 21,R_386_8 = 22,R_386_PC8 = 23,R_386_TLS_GD_32 = 24,R_386_TLS_GD_PUSH = 25,R_386_TLS_GD_CALL = 26,R_386_TLS_GD_POP = 27,R_386_TLS_LDM_32 = 28,R_386_TLS_LDM_PUSH = 29,R_386_TLS_LDM_CALL = 30,R_386_TLS_LDM_POP = 31,R_386_TLS_LDO_32 = 32,R_386_TLS_IE_32 = 33,R_386_TLS_LE_32 = 34,R_386_TLS_DTPMOD32 = 35,R_386_TLS_DTPOFF32 = 36,R_386_TLS_TPOFF32 = 37,R_386_NUM = 38,};
enum MACRO_S {S_IFMT = 61440,S_IFDIR = 16384,S_IFCHR = 8192,S_IFBLK = 24576,S_IFREG = 32768,S_IFIFO = 4096,S_IFLNK = 40960,S_IFSOCK = 49152,S_ISUID = 2048,S_ISGID = 1024,S_ISVTX = 512,S_IRUSR = 256,S_IWUSR = 128,S_IXUSR = 64,S_IRWXU = 448,S_IREAD = 256,S_IWRITE = 128,S_IEXEC = 64,S_IRGRP = 32,S_IWGRP = 16,S_IXGRP = 8,S_IRWXG = 56,S_IROTH = 4,S_IWOTH = 2,S_IXOTH = 1,S_IRWXO = 7,};
enum MACRO_X {X_PROTOCOL = 11,X_PROTOCOL_REVISION = 0,};
enum MACRO_Z {Z_NO_FLUSH = 0,Z_PARTIAL_FLUSH = 1,Z_SYNC_FLUSH = 2,Z_FULL_FLUSH = 3,Z_FINISH = 4,Z_BLOCK = 5,Z_OK = 0,Z_STREAM_END = 1,Z_NEED_DICT = 2,Z_ERRNO = -1,Z_STREAM_ERROR = -2,Z_DATA_ERROR = -3,Z_MEM_ERROR = -4,Z_BUF_ERROR = -5,Z_VERSION_ERROR = -6,Z_NO_COMPRESSION = 0,Z_BEST_SPEED = 1,Z_BEST_COMPRESSION = 9,Z_DEFAULT_COMPRESSION = -1,Z_FILTERED = 1,Z_HUFFMAN_ONLY = 2,Z_RLE = 3,Z_FIXED = 4,Z_DEFAULT_STRATEGY = 0,Z_BINARY = 0,Z_TEXT = 1,Z_ASCII = 1,Z_UNKNOWN = 2,Z_DEFLATED = 8,Z_NULL = 0,};
typedef unsigned int Picture;
typedef unsigned char *Pointer;
typedef struct _RectObjRec *RectObj;
typedef struct _RequestRec *Request;
typedef struct _B44A6AA5E65CF240A74FE9F706C0E430 SVCAUTH;
typedef struct _SmcConn *SmcConn;
typedef struct _A868A57034B7192D5EB80526E63380DD SmePart;
typedef struct _SmsConn *SmsConn;
typedef struct TT_PCLT_ TT_PCLT;
typedef struct _TextRec TextRec;
typedef struct _TipPart TipPart;
typedef struct _TreeRec TreeRec;
typedef struct _691123D744001B8BE68B84780CEE447C XChar2b;
typedef struct _XCircle XCircle;
typedef struct _488EF114463850BAC9987E879A5DF652 XDevice;
typedef double XDouble;
typedef struct _XIMText XIMText;
typedef struct _XcmsCCC *XcmsCCC;
typedef struct _DFC468A573BED393F8C22B677D1D24EF XcmsPad;
typedef struct _EBE355A101A506B8BB9BC1A4B6A6F5B0 XcmsRGB;
typedef struct _XctRec *XctData;
typedef struct _XftDraw XftDraw;
typedef struct _XftFont XftFont;
typedef struct _XmuArea XmuArea;
typedef struct _06742EBB9865A0CB782C1FF729D99154 XpmInfo;
typedef struct _XtTMRec XtTMRec;
typedef union _B4686A6782EA22417C8F11570D0281E7 XvEvent;
typedef struct _55878F909A460D750597EA530E338969 XvImage;
struct _Client;
enum _FcType {FcTypeVoid = 0x0,FcTypeInteger = 0x1,FcTypeDouble = 0x2,FcTypeString = 0x3,FcTypeBool = 0x4,FcTypeMatrix = 0x5,FcTypeCharSet = 0x6,FcTypeFTFace = 0x7,FcTypeLangSet = 0x8,};
typedef unsigned int __gid_t;
typedef unsigned int __ino_t;
typedef int __key_t;
typedef int __off_t;
typedef int __pid_t;
typedef unsigned int __u_int;
typedef unsigned int __uid_t;
struct _fpxreg {unsigned short significand[4];unsigned short exponent;unsigned short padding[3];};
struct _xmmreg {unsigned int element[4];};
typedef struct reloc_cache_entry arelent;
typedef struct bfd_symbol asymbol;
typedef unsigned long long bfd_vma;
enum desmode {CBC = 0x0,ECB = 0x1,};
typedef char *dirpath;
struct dl_node {struct dl_node *prev;struct dl_node *next;void *data;};
struct ec_addr {unsigned char station;unsigned char net;};
typedef int error_t;
struct et_list;
struct eventop {char *name;void *(*init)(void);int (*add)(void *, struct event *);int (*del)(void *, struct event *);int (*recalc)(struct event_base *, void *, int);int (*dispatch)(struct event_base *, void *, struct timeval *);};
typedef struct exportnode *exports;
typedef char fhandle[32];
typedef struct _FCE16AE268B388C13B857015D638E9ED fsError;
typedef struct _BE90B4AC206CC1F52CC4D15D587652C4 fsRange;
typedef union _12139D15327A66BC6BD2CA276E233382 fsReply;
struct hostent {char *h_name;char **h_aliases;int h_addrtype;int h_length;char **h_addr_list;};
typedef int (*htab_eq)( void *,  void *);
typedef void *iconv_t;
typedef unsigned int (*in_func)(void *, unsigned char **);
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef struct iw_param iwparam;
typedef struct iw_range iwrange;
typedef struct iw_statistics iwstats;
typedef double jdouble;
typedef struct __jmp_buf_tag jmp_buf[1];
typedef void *jobject;
struct kbdiacr {unsigned char diacr;unsigned char base;unsigned char result;};
struct kbentry {unsigned char kb_table;unsigned char kb_index;unsigned short kb_value;};
typedef char *mapname;
typedef unsigned int mmask_t;
struct mq_attr {int mq_flags;int mq_maxmsg;int mq_msgsize;int mq_curmsgs;int __pad[4];};
struct msginfo {int msgpool;int msgmap;int msgmax;int msgmnb;int msgmni;int msgssz;int msgtql;unsigned short msgseg;};
typedef void *nl_catd;
typedef int nl_item;
struct parport { char *name;unsigned int base_addr;unsigned int hibase_addr;void *priv; char *filename;};
typedef void *pointer;
typedef struct re_pattern_buffer regex_t;
struct res_sym {int number;char *name;char *humanname;};
struct ru_utmp {char ut_line[8];char ut_user[8];char ut_host[16];int ut_time;};
typedef int s_reg_t;
typedef float samplen;
typedef struct bfd_section *sec_ptr;
struct seminfo {int semmap;int semmni;int semmns;int semmnu;int semmsl;int semopm;int semume;int semusz;int semvmx;int semaem;};
struct servent {char *s_name;char **s_aliases;int s_port;char *s_proto;};
struct shminfo {unsigned int shmmax;unsigned int shmmin;unsigned int shmmni;unsigned int shmseg;unsigned int shmall;unsigned int __unused1;unsigned int __unused2;unsigned int __unused3;unsigned int __unused4;};
struct sm_name {char *mon_name;};
struct sm_stat {int state;};
typedef unsigned int speed_t;
typedef struct sigaltstack stack_t;
struct sysinfo {int uptime;unsigned int loads[3];unsigned int totalram;unsigned int freeram;unsigned int sharedram;unsigned int bufferram;unsigned int totalswap;unsigned int freeswap;unsigned short procs;unsigned short pad;unsigned int totalhigh;unsigned int freehigh;unsigned int mem_unit;char _f[8];};
typedef unsigned char uint8_t;
typedef unsigned short umode_t;
struct unipair {unsigned short unicode;unsigned short fontpos;};
struct utmparr {struct ru_utmp **uta_arr;int uta_cnt;};
struct utsname {char sysname[65];char nodename[65];char release[65];char version[65];char machine[65];char __domainname[65];};
struct vt_mode {char mode;char waitv;short relsig;short acqsig;short frsig;};
struct vt_stat {unsigned short v_active;unsigned short v_signal;unsigned short v_state;};
/// #define wchar_t  int ===DEFINED
struct winsize {unsigned short ws_row;unsigned short ws_col;unsigned short ws_xpixel;unsigned short ws_ypixel;};
typedef struct _345FECB84F456AF148A04283FEB93B5B xBigReq;
typedef struct _9E6A7A2F5B8444BF3F540E884EB664C9 xvEvent;
enum zotypes {BOGUS_OBJ = 0x0,NO_OBJ = 0x1,DIRECTORY_OBJ = 0x2,GROUP_OBJ = 0x3,TABLE_OBJ = 0x4,ENTRY_OBJ = 0x5,LINK_OBJ = 0x6,PRIVATE_OBJ = 0x7,NIS_BOGUS_OBJ = 0x0,NIS_NO_OBJ = 0x1,NIS_DIRECTORY_OBJ = 0x2,NIS_GROUP_OBJ = 0x3,NIS_TABLE_OBJ = 0x4,NIS_ENTRY_OBJ = 0x5,NIS_LINK_OBJ = 0x6,NIS_PRIVATE_OBJ = 0x7,};
typedef void BZFILE;
typedef struct _44E50AEC2878F8A6376C06FA64195504 *BoxPtr;
typedef struct _BoxRec BoxRec;
typedef unsigned short CARD16;
typedef unsigned int CARD32;
typedef unsigned long long CARD64;
typedef struct _ftsent FTSENT;
typedef signed int FT_Int;
typedef signed int FT_Pos;
typedef int FcBool;
typedef signed char GLbyte;
typedef char GLchar;
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef void GLvoid;
typedef struct _1FC9C4745BFE4A4C45A6D008A791D581 HEADER;
typedef  struct JNINativeInterface *JNIEnv;
typedef  struct JNIInvokeInterface *JavaVM;
typedef struct _AF39247D48CF164753A445931539035C MEVENT;
enum NPmode {NPMODE_PASS = 0x0,NPMODE_DROP = 0x1,NPMODE_ERROR = 0x2,NPMODE_QUEUE = 0x3,};
typedef struct _ObjectRec *Object;
typedef struct _XRegion REGION;
typedef struct _XRegion *Region;
typedef struct screen SCREEN;
typedef struct _7894C0B609BF7037CBFB2C6964164B94 Screen;
typedef struct _SelectRec *Select;
typedef unsigned int ShmSeg;
typedef unsigned short SizeID;
typedef struct _E99BC90019053CAF4DC18DC60688EDEF SmProp;
typedef struct _SmeRec SmeRec;
typedef char *String;
typedef struct TT_OS2_ TT_OS2;
typedef struct _TipRec TipRec;
typedef unsigned char *UByteP;
typedef struct _F87A538C433C2C2FB670457A634B5AF2 Vertex;
typedef struct _BC57A1630E59AFE2C540D0A45294CC64 Visual;
typedef struct _win_st WINDOW;
typedef struct _WidgetRec *Widget;
typedef struct _XAssoc XAssoc;
typedef struct _3DC652DCB514310A717FA1C1FDE5369A XColor;
typedef union _XEvent XEvent;
typedef int XFixed;
typedef struct _XImage XImage;
typedef struct _13C78DD7EDF1CF1C4AE9B0D54E891AA2 XPoint;
typedef unsigned char XtEnum;
typedef void (*XtProc)(void);
struct _ENTRY;
struct _XawDL;
typedef struct _IO_FILE __FILE;
typedef unsigned int __id_t;
struct _fpreg {unsigned short significand[4];unsigned short exponent;};
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
struct arphdr {unsigned short ar_hrd;unsigned short ar_pro;unsigned char ar_hln;unsigned char ar_pln;unsigned short ar_op;};
typedef int bool_t;
typedef unsigned int chtype;
enum desdir {ENCRYPT = 0x0,DECRYPT = 0x1,};
typedef int enum_t;
enum face_e {No_face = 0xFFFFFFFF,First_face = 0x0,Plain = 0x0,Keyword = 0x1,Keyword_strong = 0x2,Label = 0x3,Label_strong = 0x4,String = 0x5,Symbol = 0x6,Error = 0x7,Comment = 0x8,Comment_strong = 0x9,Last_face = 0x9,};
typedef struct _6ECA53571B8FCC125A3088582131FB6E fd_set;
typedef struct _CF61D8B6D31E4D5BDA17EA1156C41E64 fenv_t;
typedef struct _10993F2E9F3172E576B70C41387B5624 glob_t;
typedef int greg_t;
typedef struct groupnode *groups;
typedef struct htab *htab_t;
typedef struct _67E052DBE3D4216490A6D8B2745BB149 iceMsg;
typedef signed char int8_t;
typedef struct iw_freq iwfreq;
typedef struct iw_quality iwqual;
typedef float jfloat;
typedef short jshort;
typedef char keybuf[48];
typedef struct _5EDD4B4F882E321F07D8AFF023DDDD7D keydat;
typedef struct _979FA3DE6ECCF956231BFC297C4278E6 ldiv_t;
struct linger {int l_onoff;int l_linger;};
struct mntent {char *mnt_fsname;char *mnt_dir;char *mnt_type;char *mnt_opts;int mnt_freq;int mnt_passno;};
struct module;
typedef unsigned int nfds_t;
typedef struct __ns_msg ns_msg;
enum nstype {UNKNOWN = 0x0,NIS = 0x1,SUNYP = 0x2,IVY = 0x3,DNS = 0x4,X500 = 0x5,DNANS = 0x6,XCHS = 0x7,CDS = 0x8,};
struct option { char *name;int has_arg;int *flag;int val;};
typedef struct pcap pcap_t;
struct pollfd {int fd;short events;short revents;};
struct rpcent {char *r_name;char **r_aliases;int r_number;};
typedef unsigned int sample;
struct screen;
struct sembuf {unsigned short sem_num;short sem_op;short sem_flg;};
union sigval {int sival_int;void *sival_ptr;};
typedef unsigned int size_t;
struct status {char *mon_name;int state;char priv[16];};
struct strbuf {int maxlen;int len;char *buf;};
struct termio {unsigned short c_iflag;unsigned short c_oflag;unsigned short c_cflag;unsigned short c_lflag;unsigned char c_line;unsigned char c_cc[8];};
struct ttyent {char *ty_name;char *ty_getty;char *ty_type;int ty_status;char *ty_window;char *ty_comment;};
typedef unsigned short ushort;
typedef struct _0D364CBB4DE5622667695AC90920144B valdat;
typedef  void *voidpc;
typedef void *voidpf;
struct vtimes {int vm_utime;int vm_stime;unsigned int vm_idsrss;unsigned int vm_ixrss;int vm_maxrss;int vm_majflt;int vm_minflt;int vm_nswap;int vm_inblk;int vm_oublk;};
typedef unsigned int wint_t;
typedef struct _3B00234C5998E2ECB70FFF97A8C8B026 xDepth;
typedef struct _2A2BB2E6A1A637B547E2DF81ADC3376A xError;
typedef struct _xEvent xEvent;
typedef struct _xPoint xPoint;
typedef union _B20031452D9C70A13D819C8DDA3A0BA9 xReply;
enum xdr_op {XDR_ENCODE = 0x0,XDR_DECODE = 0x1,XDR_FREE = 0x2,};
typedef struct _149F28F052847359C6CBD46BA265755A yp_buf;
enum ypstat {YP_TRUE = 0x1,YP_NOMORE = 0x2,YP_FALSE = 0x0,YP_NOMAP = 0xFFFFFFFF,YP_NODOM = 0xFFFFFFFE,YP_NOKEY = 0xFFFFFFFD,YP_BADOP = 0xFFFFFFFC,YP_BADDB = 0xFFFFFFFB,YP_YPERR = 0xFFFFFFFA,YP_BADARGS = 0xFFFFFFF9,YP_VERS = 0xFFFFFFF8,};
typedef unsigned char CARD8;
typedef struct _470449F8043B0E95436C3AE3811CEA11 Depth;
typedef struct dlist Dlist;
enum E1284 {E1284_OK = 0x0,E1284_NOTIMPL = 0xFFFFFFFF,E1284_NOTAVAIL = 0xFFFFFFFE,E1284_TIMEDOUT = 0xFFFFFFFD,E1284_REJECTED = 0xFFFFFFFC,E1284_NEGFAILED = 0xFFFFFFFB,E1284_NOMEM = 0xFFFFFFFA,E1284_INIT = 0xFFFFFFF9,E1284_SYS = 0xFFFFFFF8,E1284_NOID = 0xFFFFFFF7,E1284_INVALIDPORT = 0xFFFFFFF6,};
typedef struct entry ENTRY;
typedef struct _EventRec Event;
typedef struct fieldnode FIELD;
typedef int GLint;
typedef unsigned int Glyph;
typedef short INT16;
typedef int INT32;
typedef struct panel PANEL;
typedef struct _ParamRec *Param;
typedef struct _Piece Piece;
typedef unsigned int Pixel;
typedef struct _XTrap XTrap;
typedef struct xauth Xauth;
typedef struct _648B167E5FE8430EFE8E72D1CD79C82D _PAGE;
typedef signed short __s16;
typedef signed int __s32;
typedef signed long long __s64;
typedef unsigned short __u16;
typedef unsigned int __u32;
typedef unsigned long long __u64;
typedef struct lineno_cache_entry alent;
typedef union _7AE8B4B46CA7ACE445000D141F00559C align;
typedef char charf;
typedef struct _D379431B13F78A36F2202C5AA386190E datum;
typedef struct _979FA3DE6ECCF956231BFC297C4278E6 div_t;
typedef struct st_effect *eff_t;
struct entry {char *key;void *data;};
typedef struct _F0D1009415F4F398C0AA24385D596C1B fsReq;
struct fstab {char *fs_spec;char *fs_file;char *fs_vfstype;char *fs_mntops; char *fs_type;int fs_freq;int fs_passno;};
struct glyph {int width;int height;int x;int y;int xadd; char *bmap;};
struct ifmap {unsigned int mem_start;unsigned int mem_end;unsigned short base_addr;unsigned char irq;unsigned char dma;unsigned char port;};
typedef signed char jbyte;
typedef unsigned short jchar;
typedef long long jlong;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;char __int_p_cs_precedes;char __int_p_sep_by_space;char __int_n_cs_precedes;char __int_n_sep_by_space;char __int_p_sign_posn;char __int_n_sign_posn;};
typedef int mqd_t;
struct mtpos {int mt_blkno;};
struct my_id {char *my_name;int my_prog;int my_vers;int my_proc;};
struct nlist {char *n_name;int n_value;short n_scnum;unsigned short n_type;char n_sclass;char n_numaux;};
typedef struct __ns_rr ns_rr;
typedef nis_object *obj_p;
typedef struct _2D810D1D3161CD7717A7A7CB85DAD1D6 pixel;
typedef union _F802AEB59326FE5752476AC56FC6EFE2 sem_t;
typedef unsigned int uLong;
typedef unsigned int ulong;
typedef void *voidp;
typedef struct _95C51ACBAA3B94C874709B766C465057 xTrap;
struct xauth {unsigned short family;unsigned short address_length;char *address;unsigned short number_length;char *number;unsigned short name_length;char *name;unsigned short data_length;char *data;};
typedef unsigned int Atom;
typedef unsigned char Byte;
typedef struct _IO_FILE FILE;
typedef struct formnode FORM;
typedef unsigned int FSID;
typedef struct _4D6107A0E0A129C018412AC817ADC559 Heap;
typedef signed char INT8;
typedef struct tagITEM ITEM;
typedef struct _JAWT JAWT;
typedef struct tagMENU MENU;
typedef unsigned int Mask;
typedef struct _PanedConstraintsPart *Pane;
typedef struct _0C41D669CC7829CF12B135747142967F TEXT;
typedef unsigned int Time;
typedef struct _3ACF1F82BEC6DEE83FE33E625399BBD7 XArc;
typedef struct _XETC XETC;
typedef struct _XtTMRec *XtTM;
struct __bb {int zero_word; char *filename;int *counts;int ncounts;struct __bb *next; unsigned int *addresses;};
typedef signed char __s8;
typedef unsigned char __u8;
typedef unsigned char cc_t;
struct file;
typedef struct st_soundstream *ft_t;
typedef unsigned int gray;
typedef int intf;
typedef int jint;
struct ldat;
struct mtop {short mt_op;int mt_count;};
typedef char *name;
struct pcap;
struct pmap {unsigned int pm_prog;unsigned int pm_vers;unsigned int pm_prot;unsigned int pm_port;};
struct spwd {char *sp_namp;char *sp_pwdp;int sp_lstchg;int sp_min;int sp_max;int sp_warn;int sp_inact;int sp_expire;unsigned int sp_flag;};
typedef unsigned int uInt;
typedef unsigned int uint;
typedef struct _xArc xArc;
typedef struct _xReq xReq;
typedef struct _CBA5F02AFFC4EA4A3305BB276E7E8CDE xrgb;
typedef struct _C4D830AACD6CA9C030EA39190076ECCB Arg;
typedef struct _44E50AEC2878F8A6376C06FA64195504 BOX;
typedef struct _44E50AEC2878F8A6376C06FA64195504 Box;
typedef struct _01C1C9E3C017E38AF79D67403D653E7E DBM;
typedef struct __dirstream DIR;
struct Elf;
typedef struct _53901533A28EEBC402C56245C1C7891C FTS;
typedef struct _XIC *XIC;
typedef unsigned int XID;
typedef struct _XIM *XIM;
typedef struct _XOC *XOC;
typedef struct _XOM *XOM;
typedef unsigned char bit;
enum res {stat_succ = 0x0,stat_fail = 0x1,};
typedef unsigned char uch;
typedef unsigned int ulg;
typedef unsigned short ush;
typedef struct _XGC *GC;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;int tm_gmtoff; char *tm_zone;};
struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___5321887C570BBFDBA75455701C3FC442 {struct bfd_link_hash_entry *next;struct bfd_link_hash_entry______5321887C570BBFDBA75455701C3FC442__bfd_link_hash_common_entry *p;bfd_size_type size;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___5E8E083A73AC38B15B41F0D6DF520976 {enum gnu_v3_dtor_kinds kind;struct demangle_component *name;};
struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___D1980AFFFC9687F94E18953A0671F132 {enum gnu_v3_ctor_kinds kind;struct demangle_component *name;};
struct bfd_link_hash_entry______5321887C570BBFDBA75455701C3FC442__bfd_link_hash_common_entry {unsigned int alignment_power;asection *section;};
struct bfd_link_order___F088814F1EB47C39F5059A2176155568___20472B6430190B13548BE45EDDAD6B8B {asection *section;};
struct bfd_link_order___F088814F1EB47C39F5059A2176155568___974A17A8BC5AF481D5F80CD1467CEB27 {unsigned int size;bfd_byte *contents;};
struct __res_state___E19F19286CA79C25813C29B2F37D7904___9F1FBFA3B280393606EA65BB64E9684F {u_int16_t nscount;u_int16_t nsmap[3];int nssocks[3];u_int16_t nscount6;u_int16_t nsinit;struct sockaddr_in6 *nsaddrs[3];unsigned int _initstamp[2];};
struct sigevent___C855B7F99D6435A8E40592C91F886A00___A6CCB415D22742E8ABADFD8EB2BAAD45 {void (*_function)(sigval_t);void *_attribute;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___0782806FB5FEE125636C30F93EC424E5 {CARD32 pad00;CARD32 time;CARD32 owner;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___210E680417EC90CA260E4854A6751754 {CARD32 pad00;CARD32 parent;CARD32 window;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___3F936A3A9A06092B5B70BD26A7DFD789 {CARD32 pad00;CARD32 event;CARD32 window;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___9E59406F0409BDE74EEED2CE1F683A76 {CARD32 pad00;CARD32 time;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___B56843D1A807D13D0FEC0C0069626892 {CARD32 pad00;CARD32 time;CARD32 window;CARD32 atom;};
struct icmphdr___44B9F435D952314818895718F3518D16___6EE1EE5693408D5F1EEE7E152919407C {u_int16_t id;u_int16_t sequence;};
struct icmphdr___44B9F435D952314818895718F3518D16___FAA42A1B1B50669B023341484BA7B095 {u_int16_t __unused;u_int16_t mtu;};
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___F43D85AC31CEBD8CC07B08111ABDF065 {int si_tid;int si_overrun;sigval_t si_sigval;};
struct icmp___EEC48C5976A17953B310258F40698883___18EAF2C5161535AE6831887B3FEB9817 {u_int32_t its_otime;u_int32_t its_rtime;u_int32_t its_ttime;};
union _1A16B277A945B8F62DE8883A2D91AFD9___0740F39446D5E828B16B7363880DB674 {wint_t __wch;char __wchb[4];};
struct _6105F69743B5F4DC3D2725A2474E8E7A___226E8492299A9657BCCDB2FD50B1B3D8 {__jmp_buf __cancel_jmp_buf;int __mask_was_saved;};
union _E8B6B3D679DDF9A2A9F1E31A29349D07___E20C8C1B4A7C82F1CEEE602013DD1F57 {uint64_t a_val;};
union _F9E7774477A9727B3397D0BE30B022B2___9A662A763779714768031DA711D3415F {uint32_t a_val;};
union _XIMStringConversionText___DE48A4CD3A06187C4ACE99002CF90FB4 {char *mbs;int *wcs;};
union _____pthread_mutex_s___30DFB618E49C377A3D62C6584A4CBE95 {int __spins;__pthread_slist_t __list;};
union bfd_link_order_reloc___B1652E1B2D42B7B6BC287CA32D4604B8 {asection *section; char *name;};
union lineno_cache_entry___7DFE706FE41FDD19EC190E8655BAC81D {struct bfd_symbol *sym;bfd_vma offset;};
struct _F85E194B51CBDC38F209555F4162D10C____pthread_mutex_s {int __lock;unsigned int __count;int __owner;int __kind;unsigned int __nusers;_____pthread_mutex_s___30DFB618E49C377A3D62C6584A4CBE95 __anonymous0;};
struct _75F7E626134BF34BF20657FC27D19BCE___OldXSizeHints {int flags;int x;int y;int width;int height;int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;struct ____OldXSizeHints___CDF557A927ED2BFF93B09908D4EFCA76 min_aspect;struct ____OldXSizeHints___CDF557A927ED2BFF93B09908D4EFCA76 max_aspect;};
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_idseq {u_int16_t icd_id;u_int16_t icd_seq;};
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_pmtu {u_int16_t ipm_void;u_int16_t ipm_nextmtu;};
union td_event_msg___93B01EC8B2A37DE149D5B3F5BB1472F3 {uintptr_t data;};
typedef void (*PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)( GLfloat *tc,  GLfloat *c,  GLfloat *n,  GLfloat *v);
typedef void (*PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)( GLfloat *tc,  GLfloat *c,  GLfloat *n,  GLfloat *v);
union __res_state___E19F19286CA79C25813C29B2F37D7904 {char pad[52];struct __res_state___E19F19286CA79C25813C29B2F37D7904___9F1FBFA3B280393606EA65BB64E9684F _ext;};
typedef void (*PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
union bfd_symbol___B9E77FD0681C1335DBAA9A65240EEB16 {void *p;bfd_vma i;};
union bp_address___3B940BBAFE206A608BBBF7EC1987BA49 {ip_addr_t ip_addr;};
struct _XDisplay___40E717ABED307E15FC65B9096F5C7074 {XPointer defaultCCCs;XPointer clientCmaps;XPointer perVisualIntensityMaps;};
struct des_block___8E96D37FBE99CA069DD91238980BB651 {u_int32_t high;u_int32_t low;};
union td_notify___143F0EF771439D241AFD6E8AB1506B64 {psaddr_t bptaddr;int syscallno;};
union _XIMText___8281806D2C2C5E9220BA18F83AF5F330 {char *multi_byte;int *wide_char;};
union fhstatus___5A86E21E7BD06EF982D138486E7C27D0 {fhandle fhs_fhandle;};
typedef void (*PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)(GLbitfield mask);
typedef void (*PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)( GLfloat *tc,  GLfloat *n,  GLfloat *v);
typedef void (*PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)( GLfloat *tc,  GLfloat *c,  GLfloat *v);
typedef void (*PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef int (*PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
union orl___8DF7BF4CA0F9B4BD4EF006267CE87BBB {file_ptr pos;bfd *abfd;};
typedef void (*PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
typedef void (*PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)(GLenum stream);
typedef void (*PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)( GLfloat *c,  GLfloat *n,  GLfloat *v);
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (*PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
typedef int (*PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)(Display *dpy, int hpId);
struct _XIMPreeditStateNotifyCallbackStruct {XIMPreeditState state;};
typedef void (*PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
struct _FontRenders___FontRenderersElement {FontRendererPtr renderer;int priority;};
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
typedef void (*PFNGLFRAGMENTCOLORMATERIALSGIXPROC)(GLenum face, GLenum mode);
typedef int (*PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
typedef GLXHyperpipeConfigSGIX *(*PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)(Display *dpy, int hpId, int *npipes);
typedef int (*PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)(Display *dpy, int screen, int *max);
struct _0127D00A1E42427D1F922D6E02BD29BF {XID c_class;int length;XID id;int int_to_display;};
struct _0187150EB0144696EE5998F276804071 {CARD8 offset;CARD8 diff;};
struct _033A15DA152AF22304FBDDC054A7A035 {CARD32 length;CARD32 opcode;CARD32 target;CARD32 level;CARD32 internalFormat;CARD32 width;CARD32 height;CARD32 depth;CARD32 border;CARD32 imageSize;};
struct _048EDDC221AC6C2316AA6C5DA748547D {CARD16 x_resolution;CARD16 y_resolution;CARD16 point_size;};
struct _0633EDD3133237A2FCFD0D477CC3F2C1 {XID c_class;int length;XID id;int percent;int pitch;int duration;};
struct _06742EBB9865A0CB782C1FF729D99154 {unsigned int valuemask;char *hints_cmt;char *colors_cmt;char *pixels_cmt;unsigned int x_hotspot;unsigned int y_hotspot;unsigned int nextensions;XpmExtension *extensions;};
struct _0A53A945C8DD0EF6031AEFE0D9D194A2 {CARD32 target;CARD32 level;CARD32 internalFormat;CARD32 width;CARD32 height;CARD32 depth;CARD32 border;CARD32 imageSize;};
struct _0B4ED8A417FCECA210AD3881277BFA25 {INT32 x;INT32 y;};
struct _0C21A611EFF1A0A24872DDA75B66705A {CARD8 c_class;CARD8 event_type_base;};
struct _0CA5FB17303BD72ED823DD36CD7B7A7D {CARD32 visual;CARD32 format;};
struct _0FC95954E9672604C2E419500968ACC1 {__cpu_mask __bits[32];};
struct _100578E431449C3F6D027CA87AB6407A {CARD32 length;CARD32 opcode;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 zoffset;CARD32 width;CARD32 height;CARD32 depth;CARD32 format;CARD32 imageSize;};
struct _10993F2E9F3172E576B70C41387B5624 {size_t gl_pathc;char **gl_pathv;size_t gl_offs;int gl_flags;void (*gl_closedir)(void *);void *(*gl_readdir)(void *);void *(*gl_opendir)( char *);int (*gl_lstat)( char *, void *);int (*gl_stat)( char *, void *);};
struct _1216BD7A426656BEB445C7268BAB0AB9 {XID c_class;int length;XID id;int click;int percent;int pitch;int duration;int led_mask;int led_value;int key;int auto_repeat_mode;};
struct _14C4DC63A35B6E2FD67711EA9BA1C1B3 {XID control;int length;};
struct _1801593F65176DF1DA4677E119FA0B5C {unsigned int width;unsigned int height;unsigned int cpp;unsigned int ncolors;XpmColor *colorTable;unsigned int *data;};
struct _1A16B277A945B8F62DE8883A2D91AFD9 {int __count;union _1A16B277A945B8F62DE8883A2D91AFD9___0740F39446D5E828B16B7363880DB674 __value;};
union _1C4035FDEAFFF0FCE26E66A96F6BBEB4 {struct _1C4035FDEAFFF0FCE26E66A96F6BBEB4___20EFCB5FAA72B851457C6BAA266EC02E __data;char __size[48];long long __align;};
struct _1C989109A1E2AFEC30347169F1D74F63 {XcmsFloat u_prime;XcmsFloat v_prime;XcmsFloat Y;};
struct _1DA914B8AB142FCB959C2D9AF0891F55 {int my_opcode;int my_auth_count;int *my_auth_indices;int auth_active;char my_auth_index;IcePointer my_auth_state;};
struct _21AD2773B4EF3639ECA7EA03A86E1290 {Time time;int *data;};
struct _21F387D49C351711E6B876CB6DA7584F {Atom resource_type;unsigned int count;};
struct _23589243830CB3BE7E2EA4E046E5A332 {Atom target;Atom property;};
struct _24A706A694346F4C39DF8A9ADF3DF2AA {int resource;XtPointer pad[4];};
struct _29CF6037BDB08BCCAAEBB0F049E81934 {CARD32 nDepth;CARD32 fallback;};
struct _2A4E2A3E6DCC7FD4DDF34506A216CCE0 {INT32 l;INT32 r;INT32 y;};
struct _2DDFDD5DD8CD88FDBBE41C4BA29EE9C7 {unsigned int num_blocks;XID context_id;void *privData;short *blocks;};
struct _2E0E2C12F04118C9E52BAE749EE378FF {XExtData *ext_data;int depth;int bits_per_pixel;int scanline_pad;};
struct _2EA2656FD07E452BFC8A303BAC941F0E {char *name;char *value;Pixel pixel;};
struct _32330425E7850E17C6A7DFCDBBE04D6C {unsigned char short_allowed;unsigned char allowNegNum;optEntry *opt_table;};
struct _346B3FD68C26438FA8B69D57DEBF0D40 {ShmSeg shmseg;int shmid;char *shmaddr;int readOnly;};
struct _34E3615AA1F5E404F43F7626305BA1D6 {XID surface_id;XID context_id;int surface_type_id;unsigned short width;unsigned short height;void *privData;};
struct _3508950B7FC9B81EB4123657631043D2 {unsigned int dotclock;unsigned short hdisplay;unsigned short hsyncstart;unsigned short hsyncend;unsigned short htotal;unsigned short hskew;unsigned short vdisplay;unsigned short vsyncstart;unsigned short vsyncend;unsigned short vtotal;unsigned int flags;int privsize;INT32 *c_private;};
struct _389F741C4688F992C1DDC28AB9B68F46 {XcmsFloat red;XcmsFloat green;XcmsFloat blue;};
struct _3D2747B906FBDDB46B196214774699C1 {CARD32 clientResource;CARD32 nRanges;};
struct _3DDB46D984C469553E00D9B3BEA3349C {XcmsFloat x;XcmsFloat y;XcmsFloat Y;};
struct _3E84D1386F10E26A4E3E4F22FDD3C8B8 {int num_font;XFontStruct **font_struct_list;char **font_name_list;};
struct _4351FBF019520AA1BFC0E4306B612802 {XID c_class;int length;XID id;};
struct _447FC71AB694A71F5F8338F97A6324BE {int auth_active;char my_auth_index;IcePointer my_auth_state;};
struct _4543C93AEA47F6ED8C90F8F964657E96 {CARD32 num_offsets;CARD32 data_len;};
struct _45DCCDFC0525EE913BAEBC241F6FB2DF {CARD32 name;CARD32 value;};
struct _46E98DFFB043B27551402CF21DCA7EF9 {CARD32 target;CARD32 level;CARD32 internalFormat;CARD32 width;CARD32 height;CARD32 border;CARD32 imageSize;};
struct _470449F8043B0E95436C3AE3811CEA11 {int depth;int nvisuals;Visual *visuals;};
struct _4742A0942DABEB0EF5B18B5595A3D286 {CARD32 length;CARD32 opcode;CARD32 numVertexes;CARD32 numComponents;CARD32 primType;};
struct _48974C792553FBFA318CEC22C625F222 {unsigned int size;XPointer addr;};
struct _4C6601BAE3B7FB7226E40FC6ABCCD221 {CARD32 resource_base;CARD32 resource_mask;};
struct _4D6CF402BE6604EF49AB6A1F1F900B99 {char match;String substitution;};
struct _51FA9807B1251E8577C033ECC63EDB35 {int numcmpts;jas_cmcmptfmt_t *cmptfmts;};
struct _522CF4EE19F54DFCAFCA34FCD3871800 {int purge_runs;int purge_stat;int balance;struct cacheinfo f;struct cacheinfo v;};
struct _55878F909A460D750597EA530E338969 {int id;int width;int height;int data_size;int num_planes;int *pitches;int *offsets;char *data;XPointer obdata;};
struct _58058F4C4926147A1BF935BBE1E04307 {Time time;short x;short y;};
struct _5839BF3C468A8421CDCDB8829E3FB660 {CARD16 length;CARD16 opcode;};
struct _5A262504CED8592D77CD10ACA44C3AD1 {int id;char *name;char *ext;char *desc;jas_image_fmtops_t ops;};
struct _5C0647BB1A627D9926272DE9A3EB3DF9 {void *(*malloc_fcn)(size_t size);void *(*realloc_fcn)(void *ptr, size_t size);void (*free_fcn)(void *ptr);};
struct _5E771194B47AF17C9267085CABF953C3 {CARD32 last_time;};
struct _5EC6E86656B6684A0C8370E4CB53DCE1 {CARD16 red;CARD16 green;CARD16 blue;CARD16 alpha;};
struct _6103EF8F75D1B3E3CA9BBD68F760DEDF {jas_cmreal_t *data;int size;};
struct _6105F69743B5F4DC3D2725A2474E8E7A {struct _6105F69743B5F4DC3D2725A2474E8E7A___226E8492299A9657BCCDB2FD50B1B3D8 __cancel_jmp_buf[1];void *__pad[4];};
struct _612E07375E3857AAAD72ABB386C90011 {unsigned char *value;Atom encoding;int format;unsigned int nitems;};
struct _6136D91980F3ED417B16959F6289782F {CARD32 metrics;};
struct _61E3B0A33819AD8DAE0C4234C1987B22 {XID c_class;int length;XID id;int resolution;int minVal;int maxVal;};
struct _6313E54CC161B7E5C4F7C30B4DF21654 {CARD8 low;CARD8 high;};
struct _64419251F3172C7227A52AC30EAD3C9D {int max_keypermod;KeyCode *modifiermap;};
struct _665F1ADE1952A58E13B5D78D0B8A3255 {VisualID visual;int depth;int perflevel;};
struct _6891B45CD5C184FEB200E38CDC4FE1A6 {XID control;int length;int first_valuator;int num_valuators;int *resolutions;};
struct _6B73A3115BC6C5DB52FFBC029452666C {int flags;int x;int y;int width;int height;int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;struct _6B73A3115BC6C5DB52FFBC029452666C___CDF557A927ED2BFF93B09908D4EFCA76 min_aspect;struct _6B73A3115BC6C5DB52FFBC029452666C___CDF557A927ED2BFF93B09908D4EFCA76 max_aspect;int base_width;int base_height;int win_gravity;};
struct _6BA9BAD34CD581FCA2A7610248080448 {XRectangle max_ink_extent;XRectangle max_logical_extent;};
struct _6CDBBC56673808DBC2DA2091B1C251E0 {XcmsFloat X;XcmsFloat Y;XcmsFloat Z;};
struct _6E603A4D6E053F4C38E194015FCDFC50 {Widget transient_for;};
struct _6ECA53571B8FCC125A3088582131FB6E {__fd_mask __fds_bits[32];};
struct _70DED5C9F2A29D27E550D747EFE3C2C4 {int numattrs;int maxattrs;jas_iccattr_t *attrs;};
union _738A8E8AC168E5B4B1A53622C9D7048F {struct _738A8E8AC168E5B4B1A53622C9D7048F___D6587128ED4C013AF36DCCA432989BD5 __data;char __size[32];int __align;};
struct _7768503639F77374B09C8CE2FF45E7E1 {Widget shell_widget;Widget enable_widget;};
struct _79210749048C5E17703F76300116C143 {unsigned int timeout;unsigned int trust_level;XID group;int event_mask;};
struct _794969DFB3CB8212888176F478F3AFCC {VisualID core_visual_id;int screen;int level;unsigned int transparency_type;unsigned int transparency_value;unsigned int min_hw_colormaps;unsigned int max_hw_colormaps;unsigned int num_colormap_conflicts;VisualID *colormap_conflicts;};
struct _79C6B1010639C7F2EBBCA0EF1CC49774 {XID c_class;int length;XID id;int accelNum;int accelDenom;int threshold;};
struct _7A3E8E29A57684CB97219B36FB039E49 {int (*read_)(jas_stream_obj_t *obj, char *buf, int cnt);int (*write_)(jas_stream_obj_t *obj, char *buf, int cnt);int (*seek_)(jas_stream_obj_t *obj, int offset, int origin);int (*close_)(jas_stream_obj_t *obj);};
struct _7ACF4F4DA8290ABE25A6ADD1CFDA4216 {SANE_Word min;SANE_Word max;SANE_Word quant;};
union _7AE8B4B46CA7ACE445000D141F00559C {int32_t al;char ac;};
struct _7B3408C53D543BF7CD2E93CFF0955DEB {XID c_class;int length;XID id;int led_values;int led_mask;};
struct _7F79EDEFC3CE5D4824B190E83A46D022 {INT32 numerator;INT32 denominator;};
struct _82207ABABC4EB421AD27F9EAB2AF6BD5 {VisualID visualid;int max_buffers;int depth;};
struct _834671796DFF06177BC2ADD32BAB03CC {XID c_class;int length;XID id;int led_mask;int led_values;};
struct _87651D9D31681607819E457EB5237059 {CARD8 c_class;CARD8 length;CARD8 num_valuators;CARD8 mode;};
struct _8790A95C9089D47EA8D4BDC2F4BAD9F8 {CARD16 xtrap_release;CARD16 xtrap_version;CARD16 xtrap_revision;CARD16 xtrap_protocol;};
struct _8BC4543EF695142B249D7CC5D558FED0 {CARD32 cursor;CARD32 delay;};
struct _92C2B677F4D6F16C081E111A1354037E {char *as_name;size_t as_off;unsigned int as_hash;};
struct _95C51ACBAA3B94C874709B766C465057 {xSpanFix top;xSpanFix bot;};
struct _991DB0B5CB0892F70B164889AA9E2739 {CARD16 first;CARD16 last;};
struct _9C05987122A935634D9A0959094DDFFC {XAssoc *buckets;int size;};
struct _9C224668B7E64BE6AE9499E6FD772938 {char *chars;int nchars;int delta;XFontSet font_set;};
struct _9DBA678C3E373C7A30D5EC7DD13ED3FC {CARD16 red;CARD16 redMask;CARD16 green;CARD16 greenMask;CARD16 blue;CARD16 blueMask;CARD16 alpha;CARD16 alphaMask;};
struct _9E48EF926CC337D4DD46A8B6E6B97304 {CARD32 length;CARD32 opcode;CARD32 target;CARD32 level;CARD32 internalFormat;CARD32 width;CARD32 height;CARD32 border;CARD32 imageSize;};
struct _9FD2D690B5466D0C81573B00EFBDAE2C {CARD32 length;CARD32 opcode;};
struct _A422162A3E9D4DF972C9311063D03360 {CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 zoffset;CARD32 width;CARD32 height;CARD32 depth;CARD32 format;CARD32 imageSize;};
struct _A78408D38BF8EB20B5134CAF14D5F131 {Atom name;unsigned int card32;};
struct _A7EE476123D6E02EF3E6172D8886EF01 {CARD32 numVertexes;CARD32 numComponents;CARD32 primType;};
struct _A84A6CEBE9E9E241ABAC9CFB04BBE1A2 {unsigned char *buf_;int bufsize_;int_fast32_t len_;int_fast32_t pos_;int growable_;int myalloc_;};
struct _A84CE16FBD8B7EE0DD32EF223D545A98 {unsigned char short_allowed;unsigned char allowNegNum;optStruct *opt_table;};
struct _A87B2475E9FE5E7737E5261AB6E50CE5 {int numinchans;int numoutchans;jas_cmpxformseq_t *pxformseq;};
struct _AD3E4B684969994001E04092A9466FB4 {int type;unsigned int serial;int synthetic;Display *display;int detail;unsigned int idx;unsigned char data[24];};
struct _AF39247D48CF164753A445931539035C {short id;int x;int y;int z;mmask_t bstate;};
struct _B1F3B1E8AC6C76EBFB982A13A87B6D55 {INT32 matrix11;INT32 matrix12;INT32 matrix13;INT32 matrix21;INT32 matrix22;INT32 matrix23;INT32 matrix31;INT32 matrix32;INT32 matrix33;};
struct _B4DBE4004D983CDD99352ECA92D175EF {xPointFixed p1;xPointFixed p2;};
struct _B676EA68DBBAD6DA98C0AF39E8F6E1CC {char *vendor;char *model;float EMPTY;unsigned char nhsync;XF86VidModeSyncRange *hsync;unsigned char nvsync;XF86VidModeSyncRange *vsync;};
struct _BAC9482348E0E8493864B83901A477A6 {fd_set rmask;fd_set wmask;fd_set emask;int nfds;};
struct _BD619B2F7AFF7BA6F06506AA27210664 {regoff_t rm_so;regoff_t rm_eo;};
struct _BD96F4C520841110C237EF8D06FD9BEE {int his_opcode;int my_opcode;int his_version_index;int my_version_index;char *his_vendor;char *his_release;char my_auth_index;IcePointer my_auth_state;int must_authenticate;};
struct _BE873DF30A0F36F7B74D63F54E76D60A {CARD16 widthInPixels;CARD16 heightInPixels;CARD16 widthInMillimeters;CARD16 heightInMillimeters;};
struct _BE90B4AC206CC1F52CC4D15D587652C4 {CARD8 min_char_high;CARD8 min_char_low;CARD8 max_char_high;CARD8 max_char_low;};
struct _C0A8173FD3695D4670457D810A0436B3 {XID subpicture_id;XID context_id;int xvimage_id;unsigned short width;unsigned short height;int num_palette_entries;int entry_bytes;char component_order[4];void *privData;};
struct _C1BC45A60F843B4624B9FAA35BF87512 {CARD32 requests[256];CARD32 events[7];CARD32 pad;};
struct _C4AF4D457027AFDE6D53E29D5E02871C {CARD32 resource_type;CARD32 count;};
struct _C8091AD492510FDF271EFEA57BB3787D {xPointFixed p1;xPointFixed p2;xPointFixed p3;};
struct _C82A39D70AC665D4F8B9F5FC885D2B73 {int numpxforms;int maxpxforms;jas_cmpxform_t **pxforms;};
struct _CBA5F02AFFC4EA4A3305BB276E7E8CDE {CARD16 red;CARD16 green;CARD16 blue;CARD16 pad;};
struct _CCAEDA52B750854C25441FD25B4DA915 {XcmsFloat L_star;XcmsFloat a_star;XcmsFloat b_star;};
struct _CD350D2F1F23C9E87696B3BB28EF6366 {CARD32 length;CARD32 opcode;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 width;CARD32 height;CARD32 format;CARD32 imageSize;};
struct _CE866585EA90BEF8E1777B84F5242003 {CARD8 high;CARD8 low;};
struct _D3AF385DED024A0A11BBAE3B646E064C {XID resource_base;XID resource_mask;};
struct _D484A87E94E3DD0BB42E942E2185E2EE {XcmsFloat H;XcmsFloat V;XcmsFloat C;};
struct _D4FB496F61D4660631FE604D96639DD9 {int his_version_index;int my_version_index;char *his_vendor;char *his_release;char my_auth_index;IcePointer my_auth_state;int must_authenticate;};
struct _D8169209A0BDD9CFFFA27C4AE6C5DFD0 {short x;short y;unsigned short width;unsigned short height;unsigned short xhot;unsigned short yhot;unsigned int cursor_serial;unsigned int *pixels;Atom atom; char *name;};
struct _DA4C8A7C662E901D031392A43A7446A0 {int count;XdbeVisualInfo *visinfo;};
struct _DB64A8459715AF3CEFE23597C08B5967 {CARD16 control;CARD16 length;};
struct _DD1A60F664AD301361B26C5800787B5E {unsigned short count_styles;XIMStyle *supported_styles;};
struct _DFC468A573BED393F8C22B677D1D24EF {XcmsFloat pad0;XcmsFloat pad1;XcmsFloat pad2;XcmsFloat pad3;};
struct _E1260AB78985DBC228459590506E4C92 {size_t we_wordc;char **we_wordv;size_t we_offs;};
struct _E8D0F98918C5E335D9AA76BE62A7C3B8 {CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 width;CARD32 height;CARD32 format;CARD32 imageSize;};
struct _E99BC90019053CAF4DC18DC60688EDEF {char *name;char *type;int num_vals;SmPropValue *vals;};
struct _EA67C4467E5D392AEC3890F142F1A94F {XtPointer extension;};
struct _EAACC5D9CCC471DA18A3EBF0220D3A4D {XID c_class;int length;XID id;int click;int percent;int pitch;int duration;int led_mask;int global_auto_repeat;char auto_repeats[32];};
struct _ECC0E2C5AD5080F3204655729300624A {CARD32 position;CARD32 length;};
struct _ED9B42DCB70FAF91CA1BE125EE068ABB {unsigned int sequence_of_request;int major_opcode_of_request;int minor_opcode_of_request;IcePointer reply;};
struct _EF1440E4CA89662D977D4B051E2FFAB7 {XID control;int length;int num_valuators;int *resolutions;int *min_resolutions;int *max_resolutions;};
struct _F0E4D660A9A04229E05BDCB7A8A9731A {int type;unsigned int serial;int send_event;FSServer *server;};
struct _F2C3184CEEDD49A7FB665043E59AF1F0 {XcmsFloat L_star;XcmsFloat u_star;XcmsFloat v_star;};
struct _F3B093D2CE3717F6C8DEE3DEA876E75D {unsigned short hdisplay;unsigned short hsyncstart;unsigned short hsyncend;unsigned short htotal;unsigned short hskew;unsigned short vdisplay;unsigned short vsyncstart;unsigned short vsyncend;unsigned short vtotal;unsigned int flags;int privsize;INT32 *c_private;};
struct _F47845C17C3A632D161D2E9D762DE912 { char *name;XVisualInfo visualinfo;};
struct _F61ACF7744F0F243EEA7ADCD8DB51D9E {void (*destroy)(struct jas_cmpxform_s *pxform);int (*apply)(struct jas_cmpxform_s *pxform, jas_cmreal_t *in, jas_cmreal_t *out, int cnt);void (*dump)(struct jas_cmpxform_s *pxform);};
union _F85E194B51CBDC38F209555F4162D10C {struct _F85E194B51CBDC38F209555F4162D10C____pthread_mutex_s __data;char __size[24];int __align;};
struct _F9A11BF5FCA53245437FD040CE8F0807 {CARD8 first;CARD8 last;};
struct _FE40CA45A22CE2D2440EEC72EA923B6E {int enabled;int datum_flags;unsigned int nclients;XRecordClientInfo **client_info;};
typedef void (*PFNGLBLENDEQUATIONSEPARATEATIPROC)(GLenum modeRGB, GLenum modeA);
typedef void (*PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (*PFNGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
typedef void (*PFNGLDELETEFRAGMENTSHADERATIPROC)(GLuint id);
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (*PFNGLLOADTRANSPOSEMATRIXDARBPROC)( GLdouble *m);
typedef void (*PFNGLLOADTRANSPOSEMATRIXFARBPROC)( GLfloat *m);
typedef void (*PFNGLMULTTRANSPOSEMATRIXDARBPROC)( GLdouble *m);
typedef void (*PFNGLMULTTRANSPOSEMATRIXFARBPROC)( GLfloat *m);
typedef void (*PFNGLPRIMITIVERESTARTINDEXNVPROC)(GLuint index);
typedef int (*PFNGLXQUERYCHANNELDELTASSGIXPROC)(Display *display, int screen, int channel, int *x, int *y, int *w, int *h);
typedef void (*XML_ProcessingInstructionHandler)(void *userData,  XML_Char *target,  XML_Char *data);
typedef void (*PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef GLhandleARB (*PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef void (*PFNGLGLOBALALPHAFACTORUBSUNPROC)(GLubyte factor);
typedef void (*PFNGLGLOBALALPHAFACTORUISUNPROC)(GLuint factor);
typedef void (*PFNGLGLOBALALPHAFACTORUSSUNPROC)(GLushort factor);
typedef void (*PFNGLTEXCOORD2FVERTEX3FVSUNPROC)( GLfloat *tc,  GLfloat *v);
typedef void (*PFNGLTEXCOORD4FVERTEX4FVSUNPROC)( GLfloat *tc,  GLfloat *v);
typedef void (*PFNGLBEGINOCCLUSIONQUERYNVPROC)(GLuint id);
typedef void (*PFNGLBINDFRAGMENTSHADERATIPROC)(GLuint id);
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (*PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (*PFNGLDELETEVERTEXSHADEREXTPROC)(GLuint id);
typedef void (*PFNGLFLUSHPIXELDATARANGENVPROC)(GLenum target);
typedef GLuint (*PFNGLGENFRAGMENTSHADERSATIPROC)(GLuint range);
typedef void (*PFNGLGLOBALALPHAFACTORBSUNPROC)(GLbyte factor);
typedef void (*PFNGLGLOBALALPHAFACTORDSUNPROC)(GLdouble factor);
typedef void (*PFNGLGLOBALALPHAFACTORFSUNPROC)(GLfloat factor);
typedef void (*PFNGLGLOBALALPHAFACTORISUNPROC)(GLint factor);
typedef void (*PFNGLGLOBALALPHAFACTORSSUNPROC)(GLshort factor);
typedef void (*PFNGLREPLACEMENTCODEUBVSUNPROC)( GLubyte *code);
typedef void (*PFNGLREPLACEMENTCODEUIVSUNPROC)( GLuint *code);
typedef void (*PFNGLREPLACEMENTCODEUSVSUNPROC)( GLushort *code);
typedef void (*PFNGLSECONDARYCOLOR3UBVEXTPROC)( GLubyte *v);
typedef void (*PFNGLSECONDARYCOLOR3UIVEXTPROC)( GLuint *v);
typedef void (*PFNGLSECONDARYCOLOR3USVEXTPROC)( GLushort *v);
typedef void (*PFNGLTEXCOORD2FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLTEXCOORD4FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef Display *(*PFNGLXGETCURRENTDISPLAYEXTPROC)(void);
typedef int (*PFNGLXQUERYCHANNELRECTSGIXPROC)(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
struct xcb_x_print_string8_iterator_t {xcb_x_print_string8_t *data;int rem;int index;};
typedef void (*PFNGLACTIVESTENCILFACEEXTPROC)(GLenum face);
typedef void (*PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (*PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (*PFNGLFINALCOMBINERINPUTNVPROC)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (*PFNGLLOADTRANSPOSEMATRIXDPROC)( GLdouble *m);
typedef void (*PFNGLLOADTRANSPOSEMATRIXFPROC)( GLfloat *m);
typedef void (*PFNGLMULTTRANSPOSEMATRIXDPROC)( GLdouble *m);
typedef void (*PFNGLMULTTRANSPOSEMATRIXFPROC)( GLfloat *m);
typedef void (*PFNGLNORMAL3FVERTEX3FVSUNPROC)( GLfloat *n,  GLfloat *v);
typedef void (*PFNGLREPLACEMENTCODEUBSUNPROC)(GLubyte code);
typedef void (*PFNGLREPLACEMENTCODEUISUNPROC)(GLuint code);
typedef void (*PFNGLREPLACEMENTCODEUSSUNPROC)(GLushort code);
typedef void (*PFNGLSECONDARYCOLOR3BVEXTPROC)( GLbyte *v);
typedef void (*PFNGLSECONDARYCOLOR3DVEXTPROC)( GLdouble *v);
typedef void (*PFNGLSECONDARYCOLOR3FVEXTPROC)( GLfloat *v);
typedef void (*PFNGLSECONDARYCOLOR3IVEXTPROC)( GLint *v);
typedef void (*PFNGLSECONDARYCOLOR3SVEXTPROC)( GLshort *v);
typedef void (*PFNGLSECONDARYCOLOR3UBEXTPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (*PFNGLSECONDARYCOLOR3UIEXTPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (*PFNGLSECONDARYCOLOR3USEXTPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (*PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (*PFNGLTEXTURECOLORMASKSGISPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (*PFNGLUNMAPOBJECTBUFFERATIPROC)(GLuint buffer);
typedef void (*PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index,  GLuint *v);
typedef int (*PFNGLXHYPERPIPEATTRIBSGIXPROC)(Display *dpy, int timeSlice, int attrib, int size, void *attribList);
typedef int (*PFNGLXHYPERPIPECONFIGSGIXPROC)(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
typedef void (*XML_StartNamespaceDeclHandler)(void *userData,  XML_Char *prefix,  XML_Char *uri);
typedef void (*XML_UnparsedEntityDeclHandler)(void *userData,  XML_Char *entityName,  XML_Char *base,  XML_Char *systemId,  XML_Char *publicId,  XML_Char *notationName);
struct _XIMPreeditDrawCallbackStruct {int caret;int chg_first;int chg_length;XIMText *text;};
typedef void (*_XawSinkClearToBackgroundProc)(Widget, int, int, unsigned int, unsigned int);
typedef void (*PFNGLBINDVERTEXSHADEREXTPROC)(GLuint id);
typedef void (*PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (*PFNGLCOLOR3FVERTEX3FVSUNPROC)( GLfloat *c,  GLfloat *v);
typedef void (*PFNGLFREEOBJECTBUFFERATIPROC)(GLuint buffer);
typedef GLuint (*PFNGLGENVERTEXSHADERSEXTPROC)(GLuint range);
typedef void (*PFNGLNORMAL3FVERTEX3FSUNPROC)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef GLint (*PFNGLPOLLINSTRUMENTSSGIXPROC)(GLint *marker_p);
typedef void (*PFNGLREADINSTRUMENTSSGIXPROC)(GLint marker);
typedef void (*PFNGLSECONDARYCOLOR3BEXTPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (*PFNGLSECONDARYCOLOR3DEXTPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (*PFNGLSECONDARYCOLOR3FEXTPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (*PFNGLSECONDARYCOLOR3HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLSECONDARYCOLOR3IEXTPROC)(GLint red, GLint green, GLint blue);
typedef void (*PFNGLSECONDARYCOLOR3SEXTPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (*PFNGLSTOPINSTRUMENTSSGIXPROC)(GLint marker);
typedef void (*PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void (*PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index,  GLuint *v);
typedef void (*ExifContentForeachEntryFunc)(ExifEntry *, void *user_data);
typedef void (*PFNGLCOLOR3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef GLint (*PFNGLGETINSTRUMENTSSGIXPROC)(void);
typedef void (*PFNGLREFERENCEPLANESGIXPROC)( GLdouble *equation);
typedef void (*PFNGLSECONDARYCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (*PFNGLSECONDARYCOLOR3UBVPROC)( GLubyte *v);
typedef void (*PFNGLSECONDARYCOLOR3UIVPROC)( GLuint *v);
typedef void (*PFNGLSECONDARYCOLOR3USVPROC)( GLushort *v);
typedef void (*PFNGLTEXTUREMATERIALEXTPROC)(GLenum face, GLenum mode);
typedef void (*PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef int (*PFNGLXBINDHYPERPIPESGIXPROC)(Display *dpy, int hpId);
typedef void (*XML_EndNamespaceDeclHandler)(void *userData,  XML_Char *prefix);
typedef void (*XML_StartDoctypeDeclHandler)(void *userData,  XML_Char *doctypeName,  XML_Char *sysid,  XML_Char *pubid, int has_internal_subset);
typedef enum _344761FA513CCF7CF08610AC23D40EDD XawPrintConfigureLayoutMode;
struct _FTNormalisedTransformation {double scale;int nonIdentity;FT_Matrix matrix;int xres;int yres;};
typedef uint8_t xcb_record_element_header_t;
struct xcb_xf86dri_drm_clip_rect_t {int16_t x1;int16_t y1;int16_t x2;int16_t x3;};
typedef void (*ExifDataForeachContentFunc)(ExifContent *, void *user_data);
struct FT_Incremental_MetricsRec_ {FT_Long bearing_x;FT_Long bearing_y;FT_Long advance;};
typedef void (*PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (*PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
typedef void (*PFNGLRESETHISTOGRAMEXTPROC)(GLenum target);
typedef void (*PFNGLSAMPLEPATTERNSGISPROC)(GLenum pattern);
typedef void (*PFNGLSECONDARYCOLOR3BVPROC)( GLbyte *v);
typedef void (*PFNGLSECONDARYCOLOR3DVPROC)( GLdouble *v);
typedef void (*PFNGLSECONDARYCOLOR3FVPROC)( GLfloat *v);
typedef void (*PFNGLSECONDARYCOLOR3IVPROC)( GLint *v);
typedef void (*PFNGLSECONDARYCOLOR3SVPROC)( GLshort *v);
typedef void (*PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (*PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (*PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (*PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index,  GLuint *v);
typedef void (*PFNGLVERTEXWEIGHTFVEXTPROC)( GLfloat *weight);
typedef unsigned int (*PFNGLXGETAGPOFFSETMESAPROC)( void *pointer);
typedef XDeviceButtonEvent XDeviceButtonReleasedEvent;
typedef void (*splay_tree_delete_value_fn)(splay_tree_value);
struct xcb_glx_float32_iterator_t {xcb_glx_float32_t *data;int rem;int index;};
struct xcb_glx_float64_iterator_t {xcb_glx_float64_t *data;int rem;int index;};
typedef void (*PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (*PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
typedef void (*PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void (*PFNGLFINISHFENCEAPPLEPROC)(GLuint fence);
typedef void (*PFNGLINDEXMATERIALEXTPROC)(GLenum face, GLenum mode);
typedef void (*PFNGLPOLYGONOFFSETEXTPROC)(GLfloat factor, GLfloat bias);
typedef void (*PFNGLSAMPLEPATTERNEXTPROC)(GLenum pattern);
typedef void (*PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (*PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (*PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (*PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (*PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (*PFNGLTEXTURENORMALEXTPROC)(GLenum mode);
typedef void (*PFNGLVERTEXATTRIB4UIVPROC)(GLuint index,  GLuint *v);
typedef void (*PFNGLVERTEXWEIGHTFEXTPROC)(GLfloat weight);
typedef void (*PFNGLVERTEXWEIGHTHVNVPROC)( GLhalfNV *weight);
typedef void (*PFNGLWINDOWPOS2DVMESAPROC)( GLdouble *v);
typedef void (*PFNGLWINDOWPOS2FVMESAPROC)( GLfloat *v);
typedef void (*PFNGLWINDOWPOS2IVMESAPROC)( GLint *v);
typedef void (*PFNGLWINDOWPOS2SVMESAPROC)( GLshort *v);
typedef void (*PFNGLWINDOWPOS3DVMESAPROC)( GLdouble *v);
typedef void (*PFNGLWINDOWPOS3FVMESAPROC)( GLfloat *v);
typedef void (*PFNGLWINDOWPOS3IVMESAPROC)( GLint *v);
typedef void (*PFNGLWINDOWPOS3SVMESAPROC)( GLshort *v);
typedef void (*PFNGLWINDOWPOS4DVMESAPROC)( GLdouble *v);
typedef void (*PFNGLWINDOWPOS4FVMESAPROC)( GLfloat *v);
typedef void (*PFNGLWINDOWPOS4IVMESAPROC)( GLint *v);
typedef void (*PFNGLWINDOWPOS4SVMESAPROC)( GLshort *v);
typedef int (*PFNGLXCHANNELRECTSGIXPROC)(Display *display, int screen, int channel, int x, int y, int w, int h);
typedef void (*WBXMLStartDocumentHandler)(void *ctx, int charset,  WBXMLLangEntry *lang);
typedef XDeviceButtonEvent XDeviceButtonPressedEvent;
struct xcb_keymap_notify_event_t {uint8_t response_type;uint8_t keys[31];};
struct xcb_randr_refresh_rates_t {uint16_t nRates;};
struct xcb_render_directformat_t {uint16_t red_shift;uint16_t red_mask;uint16_t green_shift;uint16_t green_mask;uint16_t blue_shift;uint16_t blue_mask;uint16_t alpha_shift;uint16_t alpha_mask;};
typedef FT_Incremental_InterfaceRec *FT_Incremental_Interface;
typedef enum _81CB9C9397203DD8391907B26844B7B6 IceProcessMessagesStatus;
typedef void (*PFNGLAPPLYTEXTUREEXTPROC)(GLenum mode);
typedef void (*PFNGLARRAYELEMENTEXTPROC)(GLint i);
typedef void (*PFNGLASYNCMARKERSGIXPROC)(GLuint marker);
typedef void (*PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void (*PFNGLCOMBINERINPUTNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void (*PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void (*PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (*PFNGLPIXELTEXGENSGIXPROC)(GLenum mode);
typedef void (*PFNGLTBUFFERMASK3DFXPROC)(GLuint mask);
typedef void (*PFNGLTEXTURELIGHTEXTPROC)(GLenum pname);
typedef void (*PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (*PFNGLVERTEXWEIGHTHNVPROC)(GLhalfNV weight);
typedef void (*PFNGLWINDOWPOS2DMESAPROC)(GLdouble x, GLdouble y);
typedef void (*PFNGLWINDOWPOS2DVARBPROC)( GLdouble *v);
typedef void (*PFNGLWINDOWPOS2FMESAPROC)(GLfloat x, GLfloat y);
typedef void (*PFNGLWINDOWPOS2FVARBPROC)( GLfloat *v);
typedef void (*PFNGLWINDOWPOS2IMESAPROC)(GLint x, GLint y);
typedef void (*PFNGLWINDOWPOS2IVARBPROC)( GLint *v);
typedef void (*PFNGLWINDOWPOS2SMESAPROC)(GLshort x, GLshort y);
typedef void (*PFNGLWINDOWPOS2SVARBPROC)( GLshort *v);
typedef void (*PFNGLWINDOWPOS3DMESAPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLWINDOWPOS3DVARBPROC)( GLdouble *v);
typedef void (*PFNGLWINDOWPOS3FMESAPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLWINDOWPOS3FVARBPROC)( GLfloat *v);
typedef void (*PFNGLWINDOWPOS3IMESAPROC)(GLint x, GLint y, GLint z);
typedef void (*PFNGLWINDOWPOS3IVARBPROC)( GLint *v);
typedef void (*PFNGLWINDOWPOS3SMESAPROC)(GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLWINDOWPOS3SVARBPROC)( GLshort *v);
typedef void (*PFNGLWINDOWPOS4DMESAPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLWINDOWPOS4FMESAPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLWINDOWPOS4IMESAPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (*PFNGLWINDOWPOS4SMESAPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (*XML_CharacterDataHandler)(void *userData,  XML_Char *s, int len);
typedef void (*XML_SkippedEntityHandler)(void *userData,  XML_Char *entityName, int is_parameter_entity);
typedef enum bfd_reloc_code_real bfd_reloc_code_real_type;
typedef void (*splay_tree_delete_key_fn)(splay_tree_key);
struct usb_interface_descriptor {u_int8_t bLength;u_int8_t bDescriptorType;u_int8_t bInterfaceNumber;u_int8_t bAlternateSetting;u_int8_t bNumEndpoints;u_int8_t bInterfaceClass;u_int8_t bInterfaceSubClass;u_int8_t bInterfaceProtocol;u_int8_t iInterface;struct usb_endpoint_descriptor *endpoint;unsigned char *extra;int extralen;};
typedef xLbxPolyPointReq xLbxPolyFillRectangleReq;
typedef xSetMappingReply xSetModifierMappingReply;
typedef uint32_t xcb_record_client_spec_t;
typedef void (*PFNGLBINORMAL3BVEXTPROC)( GLbyte *v);
typedef void (*PFNGLBINORMAL3DVEXTPROC)( GLdouble *v);
typedef void (*PFNGLBINORMAL3FVEXTPROC)( GLfloat *v);
typedef void (*PFNGLBINORMAL3IVEXTPROC)( GLint *v);
typedef void (*PFNGLBINORMAL3SVEXTPROC)( GLshort *v);
typedef void (*PFNGLDEPTHBOUNDSEXTPROC)(GLclampd zmin, GLclampd zmax);
typedef void (*PFNGLGETFOGFUNCSGISPROC)(GLfloat *points);
typedef void (*PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (*PFNGLRESETHISTOGRAMPROC)(GLenum target);
typedef void (*PFNGLRESETMINMAXEXTPROC)(GLenum target);
typedef void (*PFNGLVERTEXBLENDARBPROC)(GLint count);
typedef void (*PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
typedef void (*PFNGLWINDOWPOS2FARBPROC)(GLfloat x, GLfloat y);
typedef void (*PFNGLWINDOWPOS2IARBPROC)(GLint x, GLint y);
typedef void (*PFNGLWINDOWPOS2SARBPROC)(GLshort x, GLshort y);
typedef void (*PFNGLWINDOWPOS3DARBPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLWINDOWPOS3FARBPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLWINDOWPOS3IARBPROC)(GLint x, GLint y, GLint z);
typedef void (*PFNGLWINDOWPOS3SARBPROC)(GLshort x, GLshort y, GLshort z);
typedef XDeviceKeyEvent XDeviceKeyReleasedEvent;
typedef void (*XML_NotationDeclHandler)(void *userData,  XML_Char *notationName,  XML_Char *base,  XML_Char *systemId,  XML_Char *publicId);
typedef int (*XmuFreeDisplayQueueProc)(XmuDisplayQueue *queue);
typedef int (*__gconv_trans_query_fct)( char *,  char ***, size_t *);
typedef fsCatalogueChangeNotifyEvent fsFontChangeNotifyEvent;
typedef fsListFontsReq fsListFontsWithXInfoReq;
typedef int printf_arginfo_function( struct printf_info *info, size_t n, int *argtypes);
typedef xSetMappingReply xSetPointerMappingReply;
struct xcb_randr_screen_size_t {int16_t width;int16_t height;int16_t mwidth;int16_t mheight;};
typedef uint32_t xcb_render_pictformat_t;
typedef int (*FT_Outline_ConicToFunc)( FT_Vector *control,  FT_Vector *to, void *user);
typedef int (*FT_Outline_CubicToFunc)( FT_Vector *control1,  FT_Vector *control2,  FT_Vector *to, void *user);
typedef enum _C9547D9B9E214CE5EBD681A7EEC38B08 IceProtocolSetupStatus;
typedef void (*PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (*PFNGLBINORMAL3BEXTPROC)(GLbyte bx, GLbyte by, GLbyte bz);
typedef void (*PFNGLBINORMAL3DEXTPROC)(GLdouble bx, GLdouble by, GLdouble bz);
typedef void (*PFNGLBINORMAL3FEXTPROC)(GLfloat bx, GLfloat by, GLfloat bz);
typedef void (*PFNGLBINORMAL3IEXTPROC)(GLint bx, GLint by, GLint bz);
typedef void (*PFNGLBINORMAL3SEXTPROC)(GLshort bx, GLshort by, GLshort bz);
typedef void (*PFNGLBLENDCOLOREXTPROC)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef void (*PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (*PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
typedef void (*PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef GLuint (*PFNGLCREATEPROGRAMPROC)(void);
typedef void (*PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (*PFNGLFINISHFENCENVPROC)(GLuint fence);
typedef void (*PFNGLFOGCOORDDVEXTPROC)( GLdouble *coord);
typedef void (*PFNGLFOGCOORDFVEXTPROC)( GLfloat *coord);
typedef void (*PFNGLFRAMEZOOMSGIXPROC)(GLint factor);
typedef void (*PFNGLSETFENCEAPPLEPROC)(GLuint fence);
typedef void (*PFNGLTANGENT3BVEXTPROC)( GLbyte *v);
typedef void (*PFNGLTANGENT3DVEXTPROC)( GLdouble *v);
typedef void (*PFNGLTANGENT3FVEXTPROC)( GLfloat *v);
typedef void (*PFNGLTANGENT3IVEXTPROC)( GLint *v);
typedef void (*PFNGLTANGENT3SVEXTPROC)( GLshort *v);
typedef void (*PFNGLTEXCOORD1HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLTEXCOORD2HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLTEXCOORD3HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLTEXCOORD4HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLVARIANTUIVEXTPROC)(GLuint id,  GLuint *addr);
typedef enum WBXMLEncoderXMLGenType_e WBXMLEncoderXMLGenType;
typedef void (*WBXMLEndElementHandler)(void *ctx, WBXMLTag *localName, unsigned char empty);
typedef XDeviceKeyEvent XDeviceKeyPressedEvent;
typedef void (*XML_AttlistDeclHandler)(void *userData,  XML_Char *elname,  XML_Char *attname,  XML_Char *att_type,  XML_Char *dflt, int isrequired);
typedef void (*XawSme3dShadowDrawProc)(Widget);
typedef enum _A07DB15FC3F9C76A4500090AF467BC3A XawTextSelectionAction;
typedef void (*XtCreatePopupChildProc)(Widget);
struct _BitmapScalablePrivate {int numInstances;BitmapInstancePtr instances;};
struct _xkbOverlayKeyWireDesc {CARD8 over[4];CARD8 under[4];};
typedef fsQueryXBitmaps8Reply fsQueryXBitmaps16Reply;
typedef fsQueryXExtents8Reply fsQueryXExtents16Reply;
typedef uint32_t xcb_x_print_pcontext_t;
typedef int (*FT_Outline_LineToFunc)( FT_Vector *to, void *user);
typedef int (*FT_Outline_MoveToFunc)( FT_Vector *to, void *user);
typedef int (*FT_Raster_SetModeFunc)(FT_Raster raster, unsigned int mode, void *args);
typedef enum _09C860568073AF9B3326CA3F8EA2C049 FT_TrueTypeEngineType;
typedef int (*LIBMTP_progressfunc_t)( uint64_t sent,  uint64_t total,  void * data);
typedef void (*PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (*PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (*PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (*PFNGLFOGCOORDDEXTPROC)(GLdouble coord);
typedef void (*PFNGLFOGCOORDFEXTPROC)(GLfloat coord);
typedef void (*PFNGLFOGCOORDHVNVPROC)( GLhalfNV *fog);
typedef void (*PFNGLTANGENT3BEXTPROC)(GLbyte tx, GLbyte ty, GLbyte tz);
typedef void (*PFNGLTANGENT3DEXTPROC)(GLdouble tx, GLdouble ty, GLdouble tz);
typedef void (*PFNGLTANGENT3FEXTPROC)(GLfloat tx, GLfloat ty, GLfloat tz);
typedef void (*PFNGLTANGENT3IEXTPROC)(GLint tx, GLint ty, GLint tz);
typedef void (*PFNGLTANGENT3SEXTPROC)(GLshort tx, GLshort ty, GLshort tz);
typedef void (*PFNGLTEXCOORD1HNVPROC)(GLhalfNV s);
typedef void (*PFNGLTEXCOORD2HNVPROC)(GLhalfNV s, GLhalfNV t);
typedef void (*PFNGLTEXCOORD3HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (*PFNGLTEXCOORD4HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (*PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void (*PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void (*PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (*PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (*PFNGLWINDOWPOS2DVPROC)( GLdouble *v);
typedef void (*PFNGLWINDOWPOS2FVPROC)( GLfloat *v);
typedef void (*PFNGLWINDOWPOS2IVPROC)( GLint *v);
typedef void (*PFNGLWINDOWPOS2SVPROC)( GLshort *v);
typedef void (*PFNGLWINDOWPOS3DVPROC)( GLdouble *v);
typedef void (*PFNGLWINDOWPOS3FVPROC)( GLfloat *v);
typedef void (*PFNGLWINDOWPOS3IVPROC)( GLint *v);
typedef void (*PFNGLWINDOWPOS3SVPROC)( GLshort *v);
typedef void (*XML_EntityDeclHandler)(void *userData,  XML_Char *entityName, int is_parameter_entity,  XML_Char *value, int value_length,  XML_Char *base,  XML_Char *systemId,  XML_Char *publicId,  XML_Char *notationName);
struct _TMComplexBindDataRec {unsigned int isComplex : 1;struct _ATranslationData *accel_context;TMComplexBindProcsRec bindTbl[1];};
typedef int (*_XawSinkMaxHeightProc)(Widget, int);
struct _XawTextSelectionSalt {struct _XawTextSelectionSalt *next;XawTextSelection s;char *contents;int length;};
struct ax25_route_opt_struct {ax25_address port_addr;ax25_address dest_addr;int cmd;int arg;};
typedef enum bfd_print_symbol bfd_print_symbol_type;
typedef enum bfd_reloc_status bfd_reloc_status_type;
typedef fsResourceReq fsSetAuthorizationReq;
typedef int (*splay_tree_compare_fn)(splay_tree_key, splay_tree_key);
typedef int (*splay_tree_foreach_fn)(splay_tree_node, void *);
struct usb_descriptor_header {u_int8_t bLength;u_int8_t bDescriptorType;};
typedef xListFontsReq xListFontsWithInfoReq;
typedef xPolySegmentReq xPolyFillRectangleReq;
typedef uint32_t xcb_glx_context_tag_t;
struct xcb_record_range_16_t {uint16_t first;uint16_t last;};
typedef uint32_t xcb_render_glyphset_t;
struct xcb_x_print_printer_t {uint32_t nameLen;uint32_t descLen;};
typedef uint32_t xcb_xvmc_subpicture_t;
typedef void (*FT_Module_Destructor)(FT_Module module);
typedef enum FT_Size_Request_Type_ FT_Size_Request_Type;
typedef void (*PFNGLENDQUERYARBPROC)(GLenum target);
typedef void (*PFNGLFOGCOORDHNVPROC)(GLhalfNV fog);
typedef void (*PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (*PFNGLNORMAL3HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLRESETMINMAXPROC)(GLenum target);
typedef void (*PFNGLVERTEX2HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLVERTEX3HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLVERTEX4HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLWEIGHTIVARBPROC)(GLint size,  GLint *weights);
typedef void (*PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (*PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (*PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (*PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (*PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (*PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef enum _B4D60AD46407E27163A1AD596294B62F SANE_Constraint_Type;
struct WBXMLTreeAttribute_s {WBXMLAttribute *attr;struct WBXMLTreeAttribute_s *next;};
typedef XButtonEvent XButtonReleasedEvent;
typedef XDeviceFocusChangeEvent XDeviceFocusOutEvent;
typedef enum _22290B8E2C6A05087E308339D4352906 XawTextScanDirection;
typedef enum _9E1DF9A61974C4C1C54DE3F5F4FAD665 XawTextSelectionMode;
struct _PanedConstraintsRec {PanedConstraintsPart paned;};
struct _TMSimpleBindDataRec {unsigned int isComplex : 1;TMSimpleBindProcsRec bindTbl[1];};
struct _XawListReturnStruct {String string;int list_index;};
typedef int (*_XawSinkMaxLinesProc)(Widget, unsigned int);
struct __GLXvisualConfigRec {VisualID vid;int c_class;int rgba;int redSize;int greenSize;int blueSize;int alphaSize;unsigned int redMask;unsigned int greenMask;unsigned int blueMask;unsigned int alphaMask;int accumRedSize;int accumGreenSize;int accumBlueSize;int accumAlphaSize;int doubleBuffer;int stereo;int bufferSize;int depthSize;int stencilSize;int auxBuffers;int level;int visualRating;int transparentPixel;int transparentRed;int transparentGreen;int transparentBlue;int transparentAlpha;int transparentIndex;int multiSampleSize;int nMultiSampleBuffers;int visualSelectGroup;};
struct _xkbBehaviorWireDesc {CARD8 key;CARD8 type;CARD8 data;CARD8 pad;};
struct bfd_elf_dynamic_list {struct bfd_elf_version_expr_head head;struct bfd_elf_version_expr *(*match)(struct bfd_elf_version_expr_head *head, struct bfd_elf_version_expr *prev,  char *sym);};
struct bfd_elf_version_tree {struct bfd_elf_version_tree *next; char *name;unsigned int vernum;struct bfd_elf_version_expr_head globals;struct bfd_elf_version_expr_head locals;struct bfd_elf_version_deps *deps;unsigned int name_indx;int used;struct bfd_elf_version_expr *(*match)(struct bfd_elf_version_expr_head *head, struct bfd_elf_version_expr *prev,  char *sym);};
typedef fsQueryXBitmaps8Req fsQueryXBitmaps16Req;
typedef fsQueryXExtents8Req fsQueryXExtents16Req;
typedef int_fast32_t jas_image_cmpttype_t;
typedef int_fast16_t jas_image_colorspc_t;
typedef int_fast16_t jas_image_smpltype_t;
typedef xChangeModeReq xForceScreenSaverReq;
typedef xLbxPolyPointReq xLbxPolyRectangleReq;
typedef xChangeModeReq xSetAccessControlReq;
typedef xChangeModeReq xSetCloseDownModeReq;
typedef uint32_t xcb_record_context_t;
struct xcb_record_range_8_t {uint8_t first;uint8_t last;};
typedef uint32_t xcb_render_picture_t;
typedef FT_Pointer FT_Module_Interface;
typedef void (*FT_Raster_ResetFunc)(FT_Raster raster, unsigned char *pool_base, unsigned int pool_size);
typedef void (*FT_Stream_CloseFunc)(FT_Stream stream);
typedef enum _53FC39E43B7B453D6D6E6386D66C23EF FT_Stroker_LineJoin;
typedef void (*PFNGLBLENDCOLORPROC)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef void (*PFNGLCOLOR3HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLCOLOR4HVNVPROC)( GLhalfNV *v);
typedef void (*PFNGLDEFORMSGIXPROC)(GLbitfield mask);
typedef void (*PFNGLEVALMAPSNVPROC)(GLenum target, GLenum mode);
typedef void (*PFNGLFOGCOORDDVPROC)( GLdouble *coord);
typedef void (*PFNGLFOGCOORDFVPROC)( GLfloat *coord);
typedef void (*PFNGLNORMAL3HNVPROC)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
typedef void (*PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (*PFNGLVERTEX2HNVPROC)(GLhalfNV x, GLhalfNV y);
typedef void (*PFNGLVERTEX3HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (*PFNGLVERTEX4HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef CARD32 *RecordClientSpecPtr;
typedef XButtonEvent XButtonPressedEvent;
typedef XDeviceFocusChangeEvent XDeviceFocusInEvent;
typedef int (*XcmsParseStringProc)(char *, XcmsColor *);
struct _AsciiSinkClassPart {XtPointer extension;};
struct _FormConstraintsRec {FormConstraintsPart form;};
struct _MultiSinkClassPart {XtPointer extension;};
struct _TreeConstraintsRec {TreeConstraintsPart tree;};
typedef void (*_XawSinkSetTabsProc)(Widget, int, short *);
struct _XcursorChunkHeader {XcursorUInt header;XcursorUInt type;XcursorUInt subtype;XcursorUInt version;};
struct _XkbIndicatorDoodad {Atom name;unsigned char type;unsigned char priority;short top;short left;short angle;unsigned short shape_ndx;unsigned short on_color_ndx;unsigned short off_color_ndx;};
struct _XkbIndicatorMapRec {unsigned char flags;unsigned char which_groups;unsigned char groups;unsigned char which_mods;XkbModsRec mods;unsigned int ctrls;};
struct _XkbRF_DescribeVars {int sz_desc;int num_desc;XkbRF_VarDescPtr desc;};
struct ax25_bpqaddr_struct {char dev[16];ax25_address addr;};
typedef fsReq fsListExtensionsReq;
typedef void *(*htab_alloc_with_arg)(void *, size_t, size_t);
typedef int_fast32_t jas_iccs15fixed16_t;
typedef uint_fast32_t jas_iccu16fixed16_t;
typedef enum __ns_update_operation ns_update_operation;
typedef uint32_t xcb_damage_damage_t;
typedef uint32_t xcb_xfixes_region_t;
typedef enum FT_Glyph_BBox_Mode_ FT_Glyph_BBox_Mode;
typedef void (*FT_List_Destructor)(FT_Memory memory, void *data, void *user);
typedef void (*FT_Raster_DoneFunc)(FT_Raster raster);
typedef enum _0768B3C9B4531D32B9A04EBD4D0A7046 FT_Stroker_LineCap;
typedef XID GLXVideoSourceSGIX;
typedef void (*PFNGLCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void (*PFNGLCOLOR4HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
typedef void (*PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void (*PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void (*PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (*PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (*PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (*PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (*XML_CommentHandler)(void *userData,  XML_Char *data);
typedef void (*XML_DefaultHandler)(void *userData,  XML_Char *s, int len);
typedef void (*XML_XmlDeclHandler)(void *userData,  XML_Char *version,  XML_Char *encoding, int standalone);
typedef XMotionEvent XPointerMovedEvent;
typedef XProximityNotifyEvent XProximityOutEvent;
typedef enum _439B6CC11D067694C5AE104EBD065164 XawTextInsertState;
typedef enum _E6EAAA6568A176E748BE1EBE64072FDA XawTextJustifyMode;
typedef void (*XcmsScreenFreeProc)(XPointer);
typedef enum _D6648E7C00A5D72C8804EAE47C88934A XtCommandHighlight;
struct _AsciiSrcClassPart {XtPointer extension;};
struct _IceSavedReplyWait {IceReplyWaitInfo *reply_wait;int reply_ready;struct _IceSavedReplyWait *next;};
struct _MultiSrcClassPart {XtPointer extension;};
struct _XIMHotKeyTriggers {int num_hot_key;XIMHotKeyTrigger *key;};
struct _XkbConfigRtrnPriv {int cfg_id;XPointer priv;struct _XkbConfigRtrnPriv *next;};
struct _xkbActionWireDesc {CARD8 type;CARD8 data[7];};
struct ax25_routes_struct {ax25_address port_addr;ax25_address dest_addr;unsigned char digi_count;ax25_address digi_addr[8];};
typedef int (*disassembler_ftype)(bfd_vma, disassemble_info *);
typedef CARD32 fsBitmapFormatMask;
typedef fsReq fsGetCataloguesReq;
typedef fsReq fsGetResolutionReq;
struct lineno_cache_entry {unsigned int line_number;union lineno_cache_entry___7DFE706FE41FDD19EC190E8655BAC81D u;};
struct raw_config_request {int raw_minor;uint64_t block_major;uint64_t block_minor;};
struct sysfs_class_device {char name[64];char path[256];struct dlist *attrlist;char classname[64];struct sysfs_class_device *parent;struct sysfs_device *sysdevice;};
typedef xGrabPointerReply xGrabKeyboardReply;
typedef xLbxImageTextReq xLbxImageText16Req;
typedef xLbxPolyPointReq xLbxPolyFillArcReq;
typedef xLbxPolyPointReq xLbxPolySegmentReq;
typedef uint32_t xcb_glx_drawable_t;
typedef uint32_t xcb_glx_fbconfig_t;
struct xcb_render_color_t {uint16_t red;uint16_t green;uint16_t blue;uint16_t alpha;};
typedef int32_t xcb_render_fixed_t;
typedef uint32_t xcb_render_glyph_t;
typedef uint32_t xcb_sync_counter_t;
typedef uint32_t xcb_xvmc_context_t;
typedef uint32_t xcb_xvmc_surface_t;
typedef void (*FT_Glyph_DoneFunc)(FT_Glyph glyph);
struct FT_Glyph_Metrics_ {FT_Pos width;FT_Pos height;FT_Pos horiBearingX;FT_Pos horiBearingY;FT_Pos horiAdvance;FT_Pos vertBearingX;FT_Pos vertBearingY;FT_Pos vertAdvance;};
typedef int (*FT_Raster_NewFunc)(void *memory, FT_Raster *raster);
typedef XID GLXFBConfigIDSGIX;
typedef void (*IceIOErrorHandler)(IceConn);
typedef enum _BBCB981D413E493465A41117C60C00A1 LIBMTP_filetype_t;
typedef void (*PFNGLENDQUERYPROC)(GLenum target);
typedef  SANE_Char *SANE_String_Const;
typedef enum WBXMLTreeNodeType_e WBXMLTreeNodeType;
typedef XCrossingEvent XEnterWindowEvent;
typedef enum _21F5A3B15463AF72127F5499CB6EE2AC XICCEncodingStyle;
typedef enum _DB4B60BC3E5D47BB5823C48350265A79 XIMCaretDirection;
typedef enum _B539734676A04848B68060D6D483E0A0 XIMStatusDataType;
typedef XKeyEvent XKeyReleasedEvent;
typedef XCrossingEvent XLeaveWindowEvent;
typedef XProximityNotifyEvent XProximityInEvent;
typedef enum _BBF51B68E199C550B4BD602DD9A27574 XawTextResizeMode;
typedef enum _DDE587BC9507421E24019D1CDC2018E8 XawTextScrollMode;
typedef enum _D27D64ACA6BE44402370DBB31D47E682 XawTextSelectType;
typedef XrmQuark XrmRepresentation;
typedef void (*XtWidgetClassProc)(WidgetClass);
struct _ATranslationData {unsigned char hasBindings;unsigned char operation;struct _TranslationData *xlations;struct _ATranslationData *next;TMComplexBindProcsRec bindTbl[1];};
typedef enum _2BE422EB4B7233E8C58D6E03ADE8CB89 _LIB_VERSION_TYPE;
struct _ModToKeysymTable {Modifiers mask;int count;int idx;};
struct _SmeLineClassPart {XtPointer extension;};
struct _XkbComponentList {int num_keymaps;int num_keycodes;int num_types;int num_compat;int num_symbols;int num_geometry;XkbComponentNamePtr keymaps;XkbComponentNamePtr keycodes;XkbComponentNamePtr types;XkbComponentNamePtr compat;XkbComponentNamePtr symbols;XkbComponentNamePtr geometry;};
struct _XkbDeviceChanges {unsigned int changed;unsigned short first_btn;unsigned short num_btns;XkbDeviceLedChangesRec leds;};
typedef wint_t (*__gconv_btowc_fct)(struct __gconv_step *, unsigned char);
struct __gconv_step_data {unsigned char *__outbuf;unsigned char *__outbufend;int __flags;int __invocation_counter;int __internal_use;__mbstate_t *__statep;__mbstate_t __state;struct __gconv_trans_data *__trans;};
typedef int (*__gconv_trans_fct)(struct __gconv_step *, struct __gconv_step_data *, void *,  unsigned char *,  unsigned char **,  unsigned char *, unsigned char **, size_t *);
struct _ss_request_table {int version;ss_request_entry *requests;};
struct _xkbPointWireDesc {INT16 x;INT16 y;};
struct _xkmKeySymMapDesc {CARD8 width;CARD8 num_groups;CARD8 modifier_map;CARD8 flags;};
struct ax25_parms_struct {ax25_address port_addr;unsigned short values[20];};
typedef iceMsg iceWantToCloseMsg;
typedef int_fast32_t jas_image_coord_t;
typedef xLbxImageTextReq xLbxImageText8Req;
typedef xLbxPolyTextReq xLbxPolyText16Req;
typedef xPolySegmentReq xPolyRectangleReq;
typedef RECORD_CLIENT_INFO xRecordClientInfo;
typedef uint32_t xcb_glx_context_t;
typedef uint32_t xcb_glx_pbuffer_t;
struct xcb_xevie_event_t {uint8_t pad0[32];};
typedef uint32_t xcb_xv_encoding_t;
struct xcb_xv_rational_t {int32_t numerator;int32_t denominator;};
typedef enum BDF_PropertyType_ BDF_PropertyType;
typedef enum _854F96D2E86F06551DB8BCCBF3013A19 ExifSupportLevel;
typedef unsigned int (*FT_Stream_IoFunc)(FT_Stream stream, unsigned int offset, unsigned char *buffer, unsigned int count);
typedef enum _462DFD103CA4DED1B135CF601E36D04A FT_StrokerBorder;
typedef enum _35A689336FE0D24D3433A45C728BDA9A IceConnectStatus;
typedef CARD32 RecordClientSpec;
typedef XKeyEvent XKeyPressedEvent;
typedef enum _B9867847443BB25721460208505189B7 XtCallbackStatus;
typedef enum _7A6D1403076F33F26AB38429B1986DDD XtGeometryResult;
typedef enum _D6780478D9BE6E11BA44DDB700E1646F XtServerGrabType;
struct _FontPathElement {int name_length;char *name;int type;int refcount;pointer c_private;};
struct _MenuButtonClass {XtPointer extension;};
struct _RectObjClassRec {RectObjClassPart rect_class;};
struct _SmeBSBClassPart {XtPointer extension;};
struct _TMBranchHeadRec {unsigned int isSimple : 1;unsigned int hasActions : 1;unsigned int hasCycles : 1;unsigned int more : 13;TMShortCard typeIndex;TMShortCard modIndex;};
struct _XLinearGradient {XPointFixed p1;XPointFixed p2;};
struct _XRadialGradient {XCircle inner;XCircle outer;};
struct _XcursorComments {int ncomment;XcursorComment **comments;};
struct _XkbIndicatorRec {unsigned int phys_indicators;XkbIndicatorMapRec maps[32];};
struct _xwd_file_header {CARD32 header_size;CARD32 file_version;CARD32 pixmap_format;CARD32 pixmap_depth;CARD32 pixmap_width;CARD32 pixmap_height;CARD32 xoffset;CARD32 byte_order;CARD32 bitmap_unit;CARD32 bitmap_bit_order;CARD32 bitmap_pad;CARD32 bits_per_pixel;CARD32 bytes_per_line;CARD32 visual_class;CARD32 red_mask;CARD32 green_mask;CARD32 blue_mask;CARD32 bits_per_rgb;CARD32 colormap_entries;CARD32 ncolors;CARD32 window_width;CARD32 window_height;CARD32 window_x;CARD32 window_y;CARD32 window_bdrwidth;};
struct demangler_engine { char * demangling_style_name; enum demangling_styles demangling_style; char * demangling_style_doc;};
typedef int lt_dlloader_exit(lt_user_data loader_data);
typedef enum _0AA02EF7744A92D26B678F19DE8AD812 pcap_direction_t;
struct po_error_handler {void (*error)(int status, int errnum,  char *format, ...);void (*error_at_line)(int status, int errnum,  char *filename, unsigned int lineno,  char *format, ...);void (*multiline_warning)(char *prefix, char *message);void (*multiline_error)(char *prefix, char *message);};
struct sound_timer_info {char name[32];int caps;};
struct ternary_node_def {char splitchar;ternary_tree lokid;ternary_tree eqkid;ternary_tree hikid;};
typedef xLbxPolyTextReq xLbxPolyText8Req;
typedef uint32_t xcb_glx_bool32_t;
typedef uint32_t xcb_glx_pixmap_t;
typedef uint32_t xcb_glx_window_t;
struct xcb_res_client_t {uint32_t resource_base;uint32_t resource_mask;};
typedef uint8_t xcb_shape_kind_t;
typedef uint32_t xcb_sync_alarm_t;
typedef enum FT_Glyph_Format_ FT_Glyph_Format;
typedef enum FT_Kerning_Mode_ FT_Kerning_Mode;
struct FT_ListNodeRec_ {FT_ListNode prev;FT_ListNode next;void *data;};
typedef void *(*FT_Realloc_Func)(FT_Memory memory, int cur_size, int new_size, void *block);
typedef enum _A98D0825AA235C940E5A466593BCCCF2 GMON_Record_Tag;
typedef enum _4805EAB0B223F78A463BBC8BA0A6D5FF IceAcceptStatus;
typedef enum _DD7C7A6F7774314680C00686808A9C69 IcePaAuthStatus;
typedef enum _A3665E69DB87D7B6ED44928954CD85F4 IcePoAuthStatus;
typedef enum _F5967C7ED14E617C589EA5E59AAD7923 SANE_Value_Type;
typedef int (*XIOErrorHandler)(Display *);
typedef XVisualInfo *XMesaVisualInfo;
typedef enum _C25EDA2AFA4331EE1194B950D24C90A5 XSyncAlarmState;
typedef enum _A3E7C5F72761EBC037D2D2A236AE02A1 XawTextEditType;
typedef enum _CD18EE7D8E043705C6E91FECCDBD5439 XawTextScanType;
typedef enum _AEEDBE257A0664EDA892534EE275891B XawTextWrapMode;
typedef void (*XtBlockHookProc)(XtPointer);
struct _ConstraintPart {XtPointer mumble;};
struct _JAWT_Rectangle {jint x;jint y;jint width;jint height;};
struct _ObjectClassRec {ObjectClassPart object_class;};
struct _PanedClassPart {XtPointer extension;};
struct _WidgetClassRec {CoreClassPart core_class;};
struct _XComposeStatus {XPointer compose_ptr;int chars_matched;};
struct _XExtensionInfo {XExtDisplayInfo *head;XExtDisplayInfo *cur;int ndisplays;};
struct _XcursorAnimate {XcursorCursors *cursors;int sequence;};
struct _XcursorComment {XcursorUInt version;XcursorUInt comment_type;char *comment;};
struct _XcursorFileToc {XcursorUInt type;XcursorUInt subtype;XcursorUInt position;};
struct _XkbShapeDoodad {Atom name;unsigned char type;unsigned char priority;short top;short left;short angle;unsigned short color_ndx;unsigned short shape_ndx;};
struct _contextDataRec {Widget parent;Widget ve;};
struct _old_mixer_info {char id[16];char name[32];};
struct _xkmSectionInfo {CARD16 type;CARD16 format;CARD16 size;CARD16 offset;};
struct ax25_ctl_struct {ax25_address port_addr;ax25_address source_addr;ax25_address dest_addr;unsigned int cmd;unsigned int arg;unsigned char digi_count;ax25_address digi_addr[8];};
struct ax25_fwd_struct {ax25_address port_from;ax25_address port_to;};
typedef colorhist_list *colorhash_table;
struct event_watermark {size_t low;size_t high;};
struct fddi_8022_1_hdr {__u8 dsap;__u8 ssap;__u8 ctrl;};
struct fddi_8022_2_hdr {__u8 dsap;__u8 ssap;__u8 ctrl_1;__u8 ctrl_2;};
typedef fsResourceReq fsQueryXInfoReq;
typedef iceMsg icePingReplyMsg;
typedef int_fast32_t jas_iccsint32_t;
typedef uint_fast16_t jas_iccuint16_t;
typedef uint_fast32_t jas_iccuint32_t;
typedef uint_fast64_t jas_iccuint64_t;
struct mixer_vol_table {int num;char name[32];int levels[32];};
struct nr_route_struct {int type;ax25_address callsign;char device[16];unsigned int quality;char mnemonic[7];ax25_address neighbour;unsigned int obs_count;unsigned int ndigis;ax25_address digipeaters[8];};
typedef int printf_function(FILE *stream,  struct printf_info *info,  void * *args);
typedef enum _3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_sendhookact;
typedef xImageTextReq xImageText16Req;
typedef xLbxPolyPointReq xLbxPolyLineReq;
typedef xPolySegmentReq xPolyFillArcReq;
typedef uint32_t xcb_timestamp_t;
typedef enum _E203AC54CF4949A66D893C858D3FE04C EditresCommand;
typedef enum _BEA24FCA785E61799FFE1578A73CE71E ExifDataOption;
typedef enum _0932C92357F026C9D2319DBF48969F7A FT_Orientation;
typedef enum FT_Render_Mode_ FT_Render_Mode;
struct FT_UnitVector_ {FT_F2Dot14 x;FT_F2Dot14 y;};
typedef int (*FreeModmapType)(XModifierKeymap *);
typedef XID GLXPbufferSGIX;
typedef enum _524C077D957471F3061D228C9C236D67 IceCloseStatus;
typedef void (*IceIOErrorProc)(IceConn);
typedef enum _B9B1E3761F7AC9C80FCB354FC1070F12 SmcCloseStatus;
typedef enum _1675019C39AB41AE4A5425409D0013B8 T1_Blend_Flags;
typedef enum WBXMLValueType_e WBXMLValueType;
typedef XFocusChangeEvent XFocusOutEvent;
typedef enum _1245A1FB5F4A3D60B68851188167E7C1 XSyncValueType;
typedef enum _51FBBAA9F27BB943842F2245DA1E39C9 XpAuErrorValue;
typedef enum _5A773820A0D67B4336D2749C8D45D255 *XrmBindingList;
typedef void (*XtErrorHandler)(String);
typedef enum _C6DE0E8AF8221E8B7722BED8F4800537 XtListPosition;
struct _BitmapSources {FontPathElementPtr *fpe;int size;int count;};
struct _FontDirectory {char *directory;unsigned int dir_mtime;unsigned int alias_mtime;FontTableRec scalable;FontTableRec nonScalable;char *attributes;};
struct _TreeClassPart {XtPointer extension;};
struct _XAnyClassinfo {XID c_class;int length;};
struct _XImage__funcs {struct _XImage *(*create_image)(struct _XDisplay *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int);int (*destroy_image)(struct _XImage *);unsigned int (*get_pixel)(struct _XImage *, int, int);int (*put_pixel)(struct _XImage *, int, int, unsigned int);struct _XImage *(*sub_image)(struct _XImage *, int, int, unsigned int, unsigned int);int (*add_pixel)(struct _XImage *, int);};
struct _XawTextMargin {Position left;Position right;Position top;Position bottom;};
struct _XcursorImages {int nimage;XcursorImage **images;char *name;};
struct _XkbKTMapEntry {int active;unsigned char level;XkbModsRec mods;};
struct _XkbKeyNameRec {char name[4];};
struct _XkbLogoDoodad {Atom name;unsigned char type;unsigned char priority;short top;short left;short angle;unsigned short color_ndx;unsigned short shape_ndx;char *logo_name;};
struct _XkbMapChanges {unsigned short changed;KeyCode min_key_code;KeyCode max_key_code;unsigned char first_type;unsigned char num_types;KeyCode first_key_sym;unsigned char num_key_syms;KeyCode first_key_act;unsigned char num_key_acts;KeyCode first_key_behavior;unsigned char num_key_behaviors;KeyCode first_key_explicit;unsigned char num_key_explicit;KeyCode first_modmap_key;unsigned char num_modmap_keys;KeyCode first_vmodmap_key;unsigned char num_vmodmap_keys;unsigned char pad;unsigned short vmods;};
struct _XkbOverlayKey {XkbKeyNameRec over;XkbKeyNameRec under;};
struct _XkbOverlayRow {unsigned short row_under;unsigned short num_keys;unsigned short sz_keys;XkbOverlayKeyPtr keys;};
struct _XkbTextDoodad {Atom name;unsigned char type;unsigned char priority;short top;short left;short angle;short width;short height;unsigned short color_ndx;char *text;char *font;};
typedef __u_quad_t __fsblkcnt64_t;
typedef __u_quad_t __fsfilcnt64_t;
typedef __builtin_va_list __gnuc_va_list;
struct _xAnyClassinfo {CARD8 c_class;CARD8 length;};
struct _xkmActionDesc {CARD8 type;CARD8 data[7];};
typedef enum bfd_error bfd_error_type;
struct colorhist_item {pixel color;int value;};
typedef CARD32 fsBitmapFormat;
struct ip6_opt_router {uint8_t ip6or_type;uint8_t ip6or_len;uint8_t ip6or_value[2];};
struct ip6_opt_tunnel {uint8_t ip6ot_type;uint8_t ip6ot_len;uint8_t ip6ot_encap_limit;};
typedef uint_fast8_t jas_iccuint8_t;
struct sbi_instrument {unsigned short key;short device;int channel;sbi_instr_data operators;};
typedef enum _D4AB9A46DE65367CC0FF11AD6E77796A td_thr_state_e;
typedef xImageTextReq xImageText8Req;
typedef xLbxPolyPointReq xLbxPolyArcReq;
typedef xPolyTextReq xPolyText16Req;
typedef uint32_t xcb_colormap_t;
typedef uint32_t xcb_drawable_t;
typedef uint32_t xcb_fontable_t;
typedef uint32_t xcb_gcontext_t;
struct xcb_res_type_t {uint32_t resource_type;uint32_t count;};
typedef uint8_t xcb_shape_op_t;
typedef uint32_t xcb_visualid_t;
struct ypall_callback {int (*foreach)(int status, char *key, int keylen, char *val, int vallen, char *data);char *data;};
struct ypresp_maplist {ypstat stat;ypmaplist *maps;};
typedef XrmResource **CallbackTable;
typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;
typedef enum _D977E9F951F185655E8D10358B86BF77 ExifByteOrder;
typedef int (*FSSyncHandler)(FSServer *);
typedef void *(*FT_Alloc_Func)(FT_Memory memory, int size);
typedef enum FT_Pixel_Mode_ FT_Pixel_Mode;
typedef CARD32 GLXContextTag;
typedef XID GLXFBConfigID;
typedef ptrdiff_t GLsizeiptrARB;
struct La_i86_retval {uint32_t lrv_eax;uint32_t lrv_edx;long double lrv_st0;long double lrv_st1;};
typedef int (*NameCheckFunc)(char *name);
typedef void (*ThreadAppProc)(XtAppContext);
typedef enum WBXMLLanguage_e WBXMLLanguage;
typedef int (*WakeupFpeFunc)(FontPathElementPtr fpe, unsigned int *LastSelectMask);
typedef XFocusChangeEvent XFocusInEvent;
typedef enum _B64C39E2ADABB22C50C1D912F1D253CC XIMCaretStyle;
typedef enum _0112955827FC2F1F3D73B2DA97E42271 XSyncTestType;
typedef enum _223FFC458C10D7E132B773948B7A6063 XctHDirection;
typedef enum _405C8636DEE5D8D2C9F0466394C3E3EA XrmOptionKind;
typedef XID XserverRegion;
typedef enum _D2435FF4F3AAF25C455EAA2CA1747697 XtAddressMode;
typedef enum _E54E6D51CE7B5536353B8548369F9C7D XtOrientation;
typedef XtPointer XtVarArgsList;
struct _CommandClass {XtPointer extension;};
struct _FSPropOffset {FSOffset name;FSOffset value;unsigned char type;};
struct _FontScalable {int values_supplied;double pixel_matrix[4];double point_matrix[4];int pixel;int point;int x;int y;int width;char *xlfdName;int nranges;fsRange *ranges;};
struct _ParamInfoRec {unsigned int count;Param paramlist;};
struct _TMConvertRec {XtTranslations old;XtTranslations _new;};
struct _XPointDouble {XDouble x;XDouble y;};
struct _XftGlyphSpec {FT_UInt glyph;short x;short y;};
struct _XkbAnyDoodad {Atom name;unsigned char type;unsigned char priority;short top;short left;short angle;};
struct __sysctl_args {int *name;int nlen;void *oldval;size_t *oldlenp;void *newval;size_t newlen;unsigned int __unused[4];};
struct _libc_fpstate {unsigned int cw;unsigned int sw;unsigned int tag;unsigned int ipoff;unsigned int cssel;unsigned int dataoff;unsigned int datasel;struct _libc_fpreg _st[8];unsigned int status;};
struct _xkmPointDesc {INT16 x;INT16 y;};
struct _xkmShapeDesc {CARD8 num_outlines;CARD8 primary_ndx;CARD8 approx_ndx;CARD8 pad;};
typedef error_t (*argp_parser_t)(int key, char *arg, struct argp_state *state);
typedef elf_greg_t elf_gregset_t[17];
typedef enum _77F4E97EC64EB764A006B2CB38EEE544 highlightType;
typedef iceMsg iceNoCloseMsg;
struct ip6_opt_jumbo {uint8_t ip6oj_type;uint8_t ip6oj_len;uint8_t ip6oj_jumbo_len[4];};
typedef jobject jbooleanArray;
typedef enum __ns_cert_types ns_cert_types;
struct partition_def {int num_elements;struct partition_elem elements[1];};
typedef enum _0F8BABA1B48417FD3D523998AF2D6706 reg_errcode_t;
struct td_thr_events {uint32_t event_bits[2];};
typedef int td_thr_iter_f( td_thrhandle_t *, void *);
typedef enum _89FB60EA18EC68E58342D0F505790FD5 td_thr_type_e;
typedef xPolyTextReq xPolyText8Req;
typedef uint8_t xcb_keycode_t;
struct xcb_segment_t {int16_t x1;int16_t y1;int16_t x2;int16_t y2;};
typedef uint32_t xcb_shm_seg_t;
typedef uint32_t xcb_xv_port_t;
struct ypdelete_args {char *mapname;yp_buf key;};
struct ypupdate_args {char *mapname;yp_buf key;yp_buf datum;};
typedef CID_FaceDictRec CID_FontDict;
typedef enum _27E3653AFA52D5F7034BCEB849B66A6A DMXInputEnum;
typedef enum _0E64F95F8B8660ABA7845ADD323C20B1 EditResError;
typedef int64_t Elf32_Sxword;
typedef int64_t Elf64_Sxword;
typedef enum _B56A8FDB734905B01AAA83C795239EA3 ExifDataType;
typedef void (*FT_Free_Func)(FT_Memory memory, void *block);
typedef enum _FcLangResult FcLangResult;
typedef enum _038CC4C7C84F4F08B3B749DDF010BA25 FontEncoding;
typedef void (*FreeFuncType)(Display *);
typedef Elf64_Verdaux GElf_Verdaux;
typedef Elf64_Vernaux GElf_Vernaux;
typedef Elf64_Verneed GElf_Verneed;
typedef XID GLXContextID;
typedef int (*ResetFpeFunc)(FontPathElementPtr fpe);
typedef enum _E5174C28E2C76F79C438E7F3C344BC7A ResourceType;
typedef PS_DesignMapRec T1_DesignMap;
typedef enum WBXMLVersion_e WBXMLVersion;
typedef Display XMesaDisplay;
typedef enum _2ADC401C2E21ED1A63A0FE0B868E544D XOrientation;
typedef XID XSyncCounter;
typedef enum _0B9944DDAD0BA9038E29AF625CFDC62B XawAsciiType;
typedef XcursorUInt XcursorPixel;
typedef FcObjectSet XftObjectSet;
typedef XrmQuarkList XrmClassList;
typedef XrmHashBucket *XrmHashTable;
typedef void (*XtWidgetProc)(Widget);
typedef XID XvEncodingID;
struct _XButtonInfo {XID c_class;int length;short num_buttons;};
struct _XGlyphElt16 {GlyphSet glyphset; unsigned short *chars;int nchars;int xOff;int yOff;};
struct _XGlyphElt32 {GlyphSet glyphset; unsigned int *chars;int nchars;int xOff;int yOff;};
struct _XPointFixed {XFixed x;XFixed y;};
struct _XftCharSpec {FcChar32 ucs4;short x;short y;};
struct _XkbControls {unsigned char mk_dflt_btn;unsigned char num_groups;unsigned char groups_wrap;XkbModsRec internal;XkbModsRec ignore_lock;unsigned int enabled_ctrls;unsigned short repeat_delay;unsigned short repeat_interval;unsigned short slow_keys_delay;unsigned short debounce_delay;unsigned short mk_delay;unsigned short mk_interval;unsigned short mk_time_to_max;unsigned short mk_max_speed;short mk_curve;unsigned short ax_options;unsigned short ax_timeout;unsigned short axt_opts_mask;unsigned short axt_opts_values;unsigned int axt_ctrls_mask;unsigned int axt_ctrls_values;unsigned char per_key_repeat[32];};
struct _XkbFileInfo {unsigned int type;unsigned int defined;XkbDescPtr xkb;};
struct _XmuCvtCache {struct _XmuCvtCache___A3950F211C81DD2EE7118AB39C575077 string_to_bitmap;};
struct _XmuScanline {int y;XmuSegment *segment;struct _XmuScanline *next;};
typedef __quad_t __blkcnt64_t;
struct _symbol_info {symvalue value;char type; char *name;unsigned char stab_type;char stab_other;short stab_desc; char *stab_name;};
struct arpd_request {unsigned short req;u_int32_t ip;unsigned int dev;unsigned int stamp;unsigned int updated;unsigned char ha[7];};
struct icmp6_filter {uint32_t icmp6_filt[8];};
struct icmp_ra_addr {u_int32_t ira_addr;u_int32_t ira_preference;};
struct ip6_opt_nsap {uint8_t ip6on_type;uint8_t ip6on_len;uint8_t ip6on_src_nsap_len;uint8_t ip6on_dst_nsap_len;};
struct iw_discarded {__u32 nwid;__u32 code;__u32 fragment;__u32 retries;__u32 misc;};
typedef uint_fast32_t jas_iccsig_t;
typedef int_fast32_t jas_matent_t;
typedef int_fast32_t jas_seqent_t;
typedef jobject jdoubleArray;
typedef jobject jobjectArray;
typedef enum __ns_key_types ns_key_types;
typedef elf_fpregset_t prfpregset_t;
struct re_registers {unsigned int num_regs;regoff_t *start;regoff_t *end;};
struct relent_chain {arelent relent;struct relent_chain *next;};
typedef __sig_atomic_t sig_atomic_t;
struct sockaddr_ash {sa_family_t sash_family;int sash_ifindex;unsigned char sash_channel;unsigned int sash_plen;unsigned char sash_prefix[16];};
struct sockaddr_pkt {sa_family_t spkt_family;unsigned char spkt_device[14];unsigned short spkt_protocol;};
struct sysfs_device {char name[64];char path[256];struct dlist *attrlist;char bus_id[64];char bus[64];char driver_name[64];char subsystem[64];struct sysfs_device *parent;struct dlist *children;};
struct sysfs_driver {char name[64];char path[256];struct dlist *attrlist;char bus[64];struct sysfs_module *module;struct dlist *devices;};
struct sysfs_module {char name[64];char path[256];struct dlist *attrlist;struct dlist *parmlist;struct dlist *sections;};
typedef pthread_key_t thread_key_t;
typedef xPolyPointReq xPolyLineReq;
typedef uint8_t xcb_button_t;
struct xcb_char2b_t {uint8_t byte1;uint8_t byte2;};
typedef uint32_t xcb_cursor_t;
struct xcb_format_t {uint8_t depth;uint8_t bits_per_pixel;uint8_t scanline_pad;uint8_t pad0[5];};
typedef uint32_t xcb_keysym_t;
typedef uint32_t xcb_pixmap_t;
typedef uint32_t xcb_window_t;
typedef int32_t Elf32_Sword;
typedef uint64_t Elf32_Xword;
typedef int32_t Elf64_Sword;
typedef uint64_t Elf64_Xword;
typedef enum _EABC889922A50A303F6B4C71DAEB95C3 ExifLogCode;
typedef enum FT_Encoding_ FT_Encoding;
struct FT_Generic_ {void *data;FT_Generic_Finalizer finalizer;};
struct FT_ListRec_ {FT_ListNode head;FT_ListNode tail;};
struct FT_Outline_ {short n_contours;short n_points;FT_Vector *points;char *tags;short *contours;int flags;};
typedef enum _30552BE8D9C6A41A52D422625EC0E786 FT_Sfnt_Tag;
typedef void (*FT_SpanFunc)(int y, int count,  FT_Span *spans, void *user);
typedef enum _FcMatchKind FcMatchKind;
typedef BufFilePtr FontFilePtr;
typedef int (*FreeFpeFunc)(FontPathElementPtr fpe);
typedef Elf64_Sxword GElf_Sxword;
typedef Elf64_Verdef GElf_Verdef;
typedef XID GLXDrawable;
typedef ptrdiff_t GLintptrARB;
typedef uint64_t GLuint64EXT;
typedef int (*InitFpeFunc)(FontPathElementPtr fpe);
struct La_i86_regs {uint32_t lr_edx;uint32_t lr_ecx;uint32_t lr_eax;uint32_t lr_ebp;uint32_t lr_esp;};
typedef enum _2A9A0AD3137DAC1E7C7E9C93534584E8 LayoutState;
typedef XID Multibuffer;
typedef enum _5E1A04F015DD11A9DDD0863975C51122 SANE_Action;
typedef enum _0241768F8F0DCA008454E0B2C1E22666 SANE_Status;
typedef SANE_Char *SANE_String;
typedef enum _FCF7146F21D65165DF73AAE311CA591D XawEdgeType;
typedef XrmQuarkList XrmNameList;
typedef XtPointer XtRequestId;
struct _ExtentInfo {DrawDirection drawDirection;int fontAscent;int fontDescent;int overallAscent;int overallDescent;int overallWidth;int overallLeft;int overallRight;};
struct _FcConstant { FcChar8 *name; char *object;int value;};
struct _POINTBLOCK {XPoint pts[200];struct _POINTBLOCK *next;};
struct _RadioGroup {struct _RadioGroup *prev;struct _RadioGroup *next;Widget widget;};
struct _WidgetInfo {unsigned short num_widgets;unsigned int *ids;Widget real_widget;};
struct _XGlyphElt8 {GlyphSet glyphset; char *chars;int nchars;int xOff;int yOff;};
struct _XLineFixed {XPointFixed p1;XPointFixed p2;};
struct _XTransform {XFixed matrix[3][3];};
struct _XkbOutline {unsigned short num_points;unsigned short sz_points;unsigned short corner_radius;XkbPointPtr points;};
typedef int (*__gconv_fct)(struct __gconv_step *, struct __gconv_step_data *,  unsigned char **,  unsigned char *, unsigned char **, size_t *, int, int);
struct _bfd_window {void *data;bfd_size_type size;struct _bfd_window_internal *i;};
struct fddi_header {u_int8_t fddi_fc;u_int8_t fddi_dhost[6];u_int8_t fddi_shost[6];};
typedef fsResourceReq fsFreeACReq;
typedef CARD32 fsTimestamp;
typedef jas_matrix_t jas_seq2d_t;
typedef jobject jfloatArray;
typedef jobject jshortArray;
struct ns_tsig_key {char name[1025];char alg[1025];unsigned char *data;int len;};
typedef elf_gregset_t prgregset_t;
struct random_data {int32_t *fptr;int32_t *rptr;int32_t *state;int rand_type;int rand_deg;int rand_sep;int32_t *end_ptr;};
struct rpc_timeval {uint32_t tv_sec;uint32_t tv_usec;};
struct sigaltstack {void *ss_sp;int ss_flags;size_t ss_size;};
struct sm_stat_res {res res_stat;int state;};
struct sockaddr_un {sa_family_t sun_family;char sun_path[108];};
struct st_fileinfo {char *buf;size_t size;size_t count;size_t pos;unsigned char eof;};
typedef int32_t st_sample_t;
typedef __suseconds_t suseconds_t;
struct sysfs_class {char name[64];char path[256];struct dlist *attrlist;struct dlist *devices;};
typedef __t_uscalar_t t_uscalar_t;
typedef enum _E1B461D6ADC649FA7943809455C6C6EE td_notify_e;
typedef xPolySegmentReq xPolyArcReq;
struct xcb_point_t {int16_t x;int16_t y;};
typedef FSID AccContext;
typedef uint32_t Elf32_Addr;
typedef uint16_t Elf32_Half;
typedef uint32_t Elf32_Word;
typedef uint64_t Elf64_Addr;
typedef uint16_t Elf64_Half;
typedef uint32_t Elf64_Word;
typedef uint32_t Elf_Symndx;
typedef CARD8 EventFlags[4];
typedef enum _53CE12A658AFC896A02D6DAAB8B83B4C ExifFormat;
typedef int16_t ExifSShort;
struct FT_Matrix_ {FT_Fixed xx;FT_Fixed xy;FT_Fixed yx;FT_Fixed yy;};
typedef ptrdiff_t FT_PtrDist;
struct FT_Vector_ {FT_Pos x;FT_Pos y;};
typedef Elf64_Sword GElf_Sword;
typedef Elf64_Xword GElf_Xword;
typedef XID GLXPbuffer;
typedef int64_t GLint64EXT;
typedef ptrdiff_t GLsizeiptr;
typedef enum _E2BA145CAD3FA99800CF745E3AD6FBD8 IjsCommand;
typedef CARD16 KeyButMask;
typedef SANE_Word SANE_Fixed;
typedef enum _8BD9F521841EE507DA6CD23C5DEB68B8 SANE_Frame;
typedef PS_PrivateRec T1_Private;
typedef CARD32 VisualID32;
typedef enum WBXMLError_e WBXMLError;
typedef Widget *WidgetList;
typedef XColor XMesaColor;
typedef XImage XMesaImage;
typedef XPoint XMesaPoint;
typedef XID XSyncAlarm;
typedef XcursorUInt XcursorDim;
typedef FcFontSet XftFontSet;
typedef FcPattern XftPattern;
typedef enum _5A773820A0D67B4336D2749C8D45D255 XrmBinding;
typedef enum _3A62C614979A92BEB5F3FA9C72B43E27 XtGrabKind;
struct _FTMapping {int named;FT_CharMap cmap;int base;struct _FontMap *mapping;};
struct _FcFontSet {int nfont;int sfont;FcPattern **fonts;};
struct _FontTable {int used;int size;FontEntryPtr entries;int sorted;};
struct _LBXDeltas {unsigned short nDeltas;unsigned short maxDeltasize;LBXDeltaElemPtr deltas;unsigned short nextDelta;unsigned short activeDeltas;};
struct _ObjectRec {ObjectPart object;};
struct _PaneStack {struct _PaneStack *next;Pane pane;int start_size;};
struct _WidgetRec {CorePart core;};
struct _XLockPtrs {void (*lock_display)(Display *dpy);void (*unlock_display)(Display *dpy);};
struct _XTriangle {XPointFixed p1;XPointFixed p2;XPointFixed p3;};
union __GLXEvent {GLXPbufferClobberEvent glxpbufferclobber;int pad[24];};
typedef __u_quad_t __rlim64_t;
struct _xAxisInfo {CARD32 resolution;CARD32 min_value;CARD32 max_value;};
struct argp_state { struct argp *root_argp;int argc;char **argv;int next;unsigned int flags;unsigned int arg_num;int quoted;void *input;void **child_inputs;void *hook;char *name;FILE *err_stream;FILE *out_stream;void *pstate;};
struct bp_address {int address_type;union bp_address___3B940BBAFE206A608BBBF7EC1987BA49 bp_address_u;};
struct ether_addr {u_int8_t ether_addr_octet[6];};
typedef fsResourceReq fsCloseReq;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
typedef gz_header *gz_headerp;
typedef void *(*htab_alloc)(size_t, size_t);
typedef iceMsg icePingMsg;
struct iw_quality {__u8 qual;__u8 level;__u8 noise;__u8 updated;};
typedef jobject jbyteArray;
typedef jobject jcharArray;
typedef jobject jlongArray;
typedef jobject jthrowable;
struct mixer_info {char id[16];char name[32];int modify_counter;int fillers[10];};
struct nd_opt_hdr {uint8_t nd_opt_type;uint8_t nd_opt_len;};
typedef enum _C6409F74CDDB4F3B136154E2773784F4 optArgType;
struct rex_result {int rlt_stat;rexstring rlt_message;};
typedef int32_t st_ssize_t;
struct synth_info {char name[30];int device;int synth_type;int synth_subtype;int perc_mode;int nr_voices;int nr_drums;int instr_bank_size;unsigned int capabilities;int dummies[19];};
typedef enum _65CF98EECFB69F691B0631C04FBFD9D4 td_event_e;
typedef __useconds_t useconds_t;
typedef uint32_t xcb_atom_t;
typedef uint32_t xcb_font_t;
typedef XPointer CloseHook;
typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;
typedef int32_t ExifSLong;
typedef uint16_t ExifShort;
typedef size_t FT_Offset;
typedef enum _FcSetName FcSetName;
typedef void (*Form_Hook)(FORM *);
typedef Elf64_Addr GElf_Addr;
typedef Elf64_Ehdr GElf_Ehdr;
typedef Elf64_Half GElf_Half;
typedef Elf64_Phdr GElf_Phdr;
typedef Elf64_Rela GElf_Rela;
typedef Elf64_Shdr GElf_Shdr;
typedef Elf64_Word GElf_Word;
typedef XID GLXPixmap;
typedef XID GLXWindow;
typedef SANE_Word SANE_Bool;
typedef enum _19025816C28C84F41A389A9321401763 SANE_Unit;
typedef IcePointer SmPointer;
typedef XID XAppGroup;
typedef XID XPContext;
typedef enum _EE526AEE819F68457CE89197307C431F XctResult;
typedef FcChar16 XftChar16;
typedef FcChar32 XftChar32;
typedef FcMatrix XftMatrix;
typedef enum _CAA3FD00411B0A7D7F1344282CDE0D9F XtJustify;
struct _CharInfo {xCharInfo metrics;char *bits;};
struct _FSQEvent {struct _FSQEvent *next;FSEvent event;};
struct _PCFTable {CARD32 type;CARD32 format;CARD32 size;CARD32 offset;};
struct _ParamRec {Atom selection;Atom param;};
struct _XExtData {int number;struct _XExtData *next;int (*free_private)(struct _XExtData *extension);XPointer private_data;};
struct _XKeyInfo {XID c_class;int length;unsigned short min_keycode;unsigned short max_keycode;unsigned short num_keys;};
struct _XSQEvent {struct _XSQEvent *next;XEvent event;unsigned int qserial_num;};
struct _XSpanFix {XFixed left;XFixed right;XFixed y;};
struct _XftColor {unsigned int pixel;XRenderColor color;};
typedef __u_quad_t __ino64_t;
typedef __quad_t __off64_t;
typedef __quad_t *__qaddr_t;
struct _xSegment {INT16 x1;INT16 y1;INT16 x2;INT16 y2;};
typedef __clockid_t clockid_t;
union des_block {struct des_block___8E96D37FBE99CA069DD91238980BB651 key;char c[8];};
typedef void (*free_func)(voidpf opaque, voidpf address);
typedef fsReq fsNoopReq;
typedef gleDouble gleAffine[2][3];
typedef greg_t gregset_t[19];
typedef hashval_t (*htab_hash)( void *);
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
struct ip6_rthdr {uint8_t ip6r_nxt;uint8_t ip6r_len;uint8_t ip6r_type;uint8_t ip6r_segleft;};
struct iw_missed {__u32 beacon;};
typedef jas_matrix_t jas_seq_t;
typedef jobject jintArray;
typedef __mbstate_t mbstate_t;
struct midi_info {char name[30];int device;unsigned int capabilities;int dev_type;int dummies[18];};
typedef enum __ns_opcode ns_opcode;
typedef __socklen_t socklen_t;
typedef uint32_t st_rate_t;
typedef uint32_t st_size_t;
struct stab_info {struct bfd_strtab_hash *strings;struct bfd_hash_table includes;struct bfd_section *stabstr;};
struct sysfs_bus {char name[64];char path[256];struct dlist *attrlist;struct dlist *drivers;struct dlist *devices;};
struct table_col {char *tc_name;uint32_t tc_flags;uint32_t tc_rights;};
typedef tupleint_list *tuplehash;
typedef  __int32_t *wctrans_t;
struct xcb_str_t {uint8_t name_len;};
typedef bool_t (*xdrproc_t)(XDR *, void *, ...);
struct ypmaplist {mapname map;struct ypmaplist *next;};
typedef z_stream *z_streamp;
typedef CID_FaceInfoRec CID_Info;
typedef XID Colormap;
typedef XID Drawable;
typedef enum _401A9802811826260D9AA8000BA0BB75 Elf_Kind;
typedef enum _6EDDAF1AB37F2D63F8B7F83107C2123B Elf_Type;
typedef EventSeqPtr EventPtr;
typedef EventSeqRec EventRec;
typedef uint32_t ExifLong;
typedef FTC_FontRec *FTC_Font;
typedef FT_Fixed FT_Angle;
struct FT_BBox_ {FT_Pos xMin;FT_Pos yMin;FT_Pos xMax;FT_Pos yMax;};
typedef  FT_Byte *FT_Bytes;
typedef enum _E9E0E1DFB2F6F0EF0EA94C4F0D403FDA FcEndian;
typedef enum _FcResult FcResult;
typedef XID GContext;
typedef Elf64_Dyn GElf_Dyn;
typedef Elf64_Off GElf_Off;
typedef Elf64_Rel GElf_Rel;
typedef Elf64_Sym GElf_Sym;
typedef ptrdiff_t GLintptr;
typedef CARD8 ReqFlags[32];
typedef SANE_Word SANE_Int;
typedef PS_BlendRec T1_Blend;
typedef FcChar8 XftChar8;
typedef FcValue XftValue;
typedef XrmQuark XrmClass;
typedef enum _12BAAB26CA3655D1868224AB234A8625 XtRelief;
typedef XID XvPortID;
union _FSEvent {int type;FSAnyEvent fsany;};
struct _FSRange {FSChar2b min_char;FSChar2b max_char;};
struct _FontEnc {char *name;char **aliases;int size;int row_size;FontMapPtr mappings;struct _FontEnc *next;int first;int first_col;};
struct _FontMap {int type;int pid;int eid;unsigned int (*recode)(unsigned int, void *);char *(*name)(unsigned int, void *);void *client_data;struct _FontMap *next;struct _FontEnc *encoding;};
struct _XCircle {XFixed x;XFixed y;XFixed radius;};
struct _XRegion {int size;int numRects;BOX *rects;BOX extents;};
struct _XmuArea {XmuScanline *scanline;};
typedef __off64_t __loff_t;
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;socklen_t ai_addrlen;struct sockaddr *ai_addr;char *ai_canonname;struct addrinfo *ai_next;};
struct aliasent {char *alias_name;size_t alias_members_len;char **alias_members;int alias_local;};
typedef __blkcnt_t blkcnt_t;
struct compstat {__u32 unc_bytes;__u32 unc_packets;__u32 comp_bytes;__u32 comp_packets;__u32 inc_bytes;__u32 inc_packets;__u32 in_count;__u32 bytes_out;double ratio;};
typedef __u32 ext_accm[8];
typedef enum _891529C55A3D7F6C466AE0BA608A35EA idtype_t;
struct ip6_dest {uint8_t ip6d_nxt;uint8_t ip6d_len;};
struct iw_point {void *pointer;__u16 length;__u16 flags;};
struct kbdiacrs {unsigned int kb_cnt;struct kbdiacr kbdiacr[256];};
struct klm_stat {klm_stats stat;};
struct nlm_stat {nlm_stats stat;};
typedef enum __ns_class ns_class;
typedef enum __ns_rcode ns_rcode;
struct pmaplist {struct pmap pml_map;struct pmaplist *pml_next;};
struct sg_iovec {void *iov_base;size_t iov_len;};
typedef __sigset_t sigset_t;
struct sockaddr {sa_family_t sa_family;char sa_data[14];};
typedef enum _B66645BB19D3E41D07C841CC99076606 td_err_e;
typedef pthread_t thread_t;
struct timespec {__time_t tv_sec;int tv_nsec;};
typedef enum _EC76598FBB86ACEAD9C3AB7DF2C978D2 timetype;
struct typenode {unsigned short status;int ref;struct typenode *left;struct typenode *right;void *(*makearg)(va_list *);void *(*copyarg)( void *);void (*freearg)(void *);char (*fcheck)(FIELD *,  void *);char (*ccheck)(int,  void *);char (*next)(FIELD *,  void *);char (*prev)(FIELD *,  void *);};
typedef __u_quad_t u_quad_t;
struct utmpidle {struct ru_utmp ui_utmp;unsigned int ui_idle;};
typedef enum _48BC290D844A5089CFC155FB9F341232 Elf_Cmd;
typedef enum _570712C348BADE557832D140950F50BF ExifIfd;
typedef enum _6B58CDAFB112E83C3DE0007F6614EB2F ExifTag;
struct Gpm_Roi {short xMin;short xMax;short yMin;short yMax;unsigned short minMod;unsigned short maxMod;unsigned short eventMask;unsigned short owned;Gpm_Handler *handler;void *clientdata;struct Gpm_Roi *prev;struct Gpm_Roi *next;};
typedef CARD8 KEYCODE;
typedef GC XMesaGC;
typedef XrmQuark XrmName;
struct _XkbKey {XkbKeyNameRec name;short gap;unsigned char shape_ndx;unsigned char color_ndx;};
typedef __u_quad_t __dev_t;
struct _xPoint {INT16 x;INT16 y;};
typedef __caddr_t caddr_t;
typedef __clock_t clock_t;
struct cmsghdr {size_t cmsg_len;int cmsg_level;int cmsg_type;};
typedef __daddr_t daddr_t;
struct fd_args {nis_name dir_name;nis_name requester;};
typedef __fd_mask fd_mask;
struct fibheap {size_t nodes;struct fibnode *min;struct fibnode *root;};
struct fibnode {struct fibnode *parent;struct fibnode *child;struct fibnode *left;struct fibnode *right;fibheapkey_t key;void *data;unsigned int degree : 31;unsigned int mark : 1;};
typedef fsCatalogueChangeNotifyEvent fsEvent;
struct ifaddrs {struct ifaddrs *ifa_next;char *ifa_name;unsigned int ifa_flags;struct sockaddr *ifa_addr;struct sockaddr *ifa_netmask;union ifaddrs___5A9FB6B4293E0982D0D9C18B84AAF77B ifa_ifu;void *ifa_data;};
struct in_addr {in_addr_t s_addr;};
struct ip6_ext {uint8_t ip6e_nxt;uint8_t ip6e_len;};
struct ip6_hbh {uint8_t ip6h_nxt;uint8_t ip6h_len;};
struct ip6_opt {uint8_t ip6o_type;uint8_t ip6o_len;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
struct ip_opts {struct in_addr ip_dst;char ip_opts[40];};
typedef jobject jstring;
struct lastlog {__time_t ll_time;char ll_line[32];char ll_host[256];};
typedef __pid_t lwpid_t;
typedef u_int16_t n_short;
struct netinfo {struct sockaddr rip_dst;int rip_metric;};
struct nis_oid {uint32_t ctime;uint32_t mtime;};
struct nis_tag {uint32_t tag_type;char *tag_val;};
typedef __nlink_t nlink_t;
typedef enum __ns_flag ns_flag;
typedef enum __ns_sect ns_sect;
typedef enum __ns_type ns_type;
struct obstack {int chunk_size;struct _obstack_chunk *chunk;char *object_base;char *next_free;char *chunk_limit;union obstack___EB32574EB45F4F0470D0F374CAEC173A temp;int alignment_mask;struct _obstack_chunk *(*chunkfun)(void *, int);void (*freefun)(void *, struct _obstack_chunk *);void *extra_arg;unsigned int use_extra_arg : 1;unsigned int maybe_empty_object : 1;unsigned int alloc_failed : 1;};
struct pppstat {__u32 ppp_discards;__u32 ppp_ibytes;__u32 ppp_ioctects;__u32 ppp_ipackets;__u32 ppp_ierrors;__u32 ppp_ilqrs;__u32 ppp_obytes;__u32 ppp_ooctects;__u32 ppp_opackets;__u32 ppp_oerrors;__u32 ppp_olqrs;};
struct rtentry {unsigned int rt_pad1;struct sockaddr rt_dst;struct sockaddr rt_gateway;struct sockaddr rt_genmask;unsigned short rt_flags;short rt_pad2;unsigned int rt_pad3;unsigned char rt_tos;unsigned char rt_class;short rt_pad4;short rt_metric;char *rt_dev;unsigned int rt_mtu;unsigned int rt_window;unsigned short rt_irtt;};
typedef __ssize_t ssize_t;
struct tftphdr {short th_opcode;union tftphdr___AC1EF054FE947B275A5712C606118B7A th_u;char th_data[1];};
typedef __timer_t timer_t;
typedef __u_short u_short;
typedef uint32_t uint32n;
struct usb_bus {struct usb_bus *next;struct usb_bus *prev;char dirname[4097];struct usb_device *devices;u_int32_t location;struct usb_device *root_dev;};
struct utimbuf {__time_t actime;__time_t modtime;};
typedef enum _EDBA1914F16BC538415B0E0A3A3FD3BB ACTION;
typedef CARD16 BITS16;
typedef CARD32 BITS32;
struct CLIENT {AUTH *cl_auth;struct CLIENT__clnt_ops *cl_ops;caddr_t cl_private;};
typedef XID Cursor;
typedef XID Damage;
typedef FT_UInt32 FT_Tag;
typedef enum _FcType FcType;
typedef XID KeySym;
typedef XtPointer Opaque;
typedef XID Pixmap;
typedef XID Window;
struct _Piece {char *text;XawTextPosition used;struct _Piece *prev;struct _Piece *next;};
struct _XTrap {XSpanFix top;XSpanFix bottom;};
typedef __u16 __be16;
typedef __u32 __be32;
typedef __u64 __be64;
typedef __u16 __le16;
typedef __u32 __le32;
typedef __u64 __le64;
struct arpreq {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;struct sockaddr arp_netmask;char arp_dev[16];};
typedef chtype attr_t;
struct carsym {char *name;file_ptr file_offset;};
typedef u_int16_t comp_t;
struct ethhdr {unsigned char h_dest[6];unsigned char h_source[6];__be16 h_proto;};
typedef _G_fpos_t fpos_t;
typedef __fsid_t fsid_t;
typedef voidp gzFile;
struct ifconf {int ifc_len;union ifconf___FEA5AA0AF02382EAC1EF5698C9530A86 ifc_ifcu;};
typedef int32_t int32n;
typedef jobject jarray;
typedef jobject jclass;
typedef __loff_t loff_t;
typedef __mode_t mode_t;
struct mon_id {char *mon_name;struct my_id my_id;};
typedef u_int32_t n_long;
typedef u_int32_t n_time;
struct netent {char *n_name;char **n_aliases;int n_addrtype;uint32_t n_net;};
typedef gray pixval;
typedef __quad_t quad_t;
typedef __rlim_t rlim_t;
struct rlimit {rlim_t rlim_cur;rlim_t rlim_max;};
struct sigvec {__sighandler_t sv_handler;int sv_mask;int sv_flags;};
typedef __time_t time_t;
typedef samplen *tuplen;
typedef uLong uLongf;
typedef __u_char u_char;
typedef __u_long u_long;
struct udphdr {u_int16_t source;u_int16_t dest;u_int16_t len;u_int16_t check;};
struct vjstat {__u32 vjs_packets;__u32 vjs_compressed;__u32 vjs_searches;__u32 vjs_misses;__u32 vjs_uncompressedin;__u32 vjs_compressedin;__u32 vjs_errorin;__u32 vjs_tossed;};
typedef pixval xelval;
typedef CARD32 xwdval;
typedef Byte Bytef;
typedef enum _003F63A829E52477BDB4080710A1139D VISIT;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
struct group {char *gr_name;char *gr_passwd;__gid_t gr_gid;char **gr_mem;};
typedef __ino_t ino_t;
struct iovec {void *iov_base;size_t iov_len;};
typedef jint jsize;
typedef jobject jweak;
typedef __key_t key_t;
struct mtget {int mt_type;int mt_resid;int mt_dsreg;int mt_gstat;int mt_erreg;__daddr_t mt_fileno;__daddr_t mt_blkno;};
typedef __off_t off_t;
struct panel {WINDOW *win;struct panel *below;struct panel *above; void *user;};
typedef __pid_t pid_t;
typedef __sighandler_t sig_t;
struct timeb {time_t time;unsigned short millitm;short timezone;short dstflag;};
typedef sample *tuple;
typedef uInt uIntf;
typedef __u_int u_int;
typedef __uid_t uid_t;
typedef CARD8 BOOL;
typedef CARD8 BYTE;
typedef XID Font;
struct argp { struct argp_option *options;argp_parser_t parser; char *args_doc; char *doc; struct argp_child *children;char *(*help_filter)(int key,  char *text, void *input); char *argp_domain;};
typedef __id_t id_t;
struct prof {void *pr_base;size_t pr_size;size_t pr_off;unsigned int pr_scale;};
typedef uch uchf;
typedef ush ushf;
struct TOC {unsigned char bFlags;unsigned char bTrack;int32_t dwStartSector;};
struct mon {struct mon_id mon_id;char priv[16];};
struct orl {char **name;union orl___8DF7BF4CA0F9B4BD4EF006267CE87BBB u;int namidx;};
struct tms {clock_t tms_utime;clock_t tms_stime;clock_t tms_cutime;clock_t tms_cstime;};
typedef pixel xel;
struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___257C4BBE877DAACE468881AF3C3FD997 {struct bfd_link_hash_entry *next;asection *section;bfd_vma value;};
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___BFD7413E14FC21CAB05150D69A0647C0 {caddr_t where;xdrproc_t proc;};
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___B8AD833485FADDB6F1E0494B45611EC6 {CARD32 type;INT16 shorts0;INT16 shorts1;INT16 shorts2;INT16 shorts3;INT16 shorts4;INT16 shorts5;INT16 shorts6;INT16 shorts7;INT16 shorts8;INT16 shorts9;};
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FB6660946ED728575FB5339601D7D5BE {CARD32 type;INT8 bytes[20];};
struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FD3E7DCAA1FA6D37E77316D970071F0A {CARD32 type;INT32 longs0;INT32 longs1;INT32 longs2;INT32 longs3;INT32 longs4;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___5A60174FC6A07BE0049C674473C6C1C3 {CARD32 pad00;CARD32 window;CARD16 width;CARD16 height;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___99F5A2754EC45011AB028BB1CC2CE3C7 {CARD32 pad00;CARD32 window;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD16 count;CARD16 pad2;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___9C75AB6DDEADA42926A4005EFC1B4241 {CARD32 pad00;CARD32 event;CARD32 window;INT16 x;INT16 y;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___D4E6015299E8C3BAFA52E0C7400AB6A6 {CARD32 pad00;CARD32 window;BYTE mode;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___EDE3B33B7AF26E05A2A60AEE6589519E {CARD32 pad00;CARD32 event;CARD32 window;CARD32 parent;BYTE place;BYTE pad1;BYTE pad2;BYTE pad3;};
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___DDF278A5B88F81FEC3CBEE828E282CB3 {__pid_t si_pid;__uid_t si_uid;};
struct ____1C1E9EA25555F3A04518B10EE9DF4602___CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
struct ____4C8070B9675DF490D49D1F7749E052FB___CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
union _0F3578149035D0CDE8FE9154071A721D___9AAFAEFBCBBBF749C8CE72EB51A9C8A2 {Elf32_Word c_val;Elf32_Addr c_ptr;};
struct _10BF8BFF208FC04E48FB9712D25FCBB7___33BBEBA79D8C3D381AA595E08C13178B {Boolean doing;Boolean showing;Position startx;Position starty;Position dx;Position dy;Position x;Position y;};
union _7F4FA8E04F335CE1E911E9EDA6B28A3F___F5AEDB05CC685AEABDADED2A12BE7C9F {Elf64_Xword c_val;Elf64_Addr c_ptr;};
union _8E3F17DF06268256B33C950219C36638___933121F4FA1889599F702E16603DBB9F {Elf64_Xword d_val;Elf64_Addr d_ptr;};
union _9E389EF8DB18C75445DC45CE7C2FFB9B___2798575F521600C1E26DD161E22996D8 {Elf32_Word d_val;Elf32_Addr d_ptr;};
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)( GLuint *rc,  GLfloat *tc,  GLfloat *c,  GLfloat *n,  GLfloat *v);
union _XIMStatusDrawCallbackStruct___D9A2F521BD917AA4B9408853DE8DEFA7 {XIMText *text;Pixmap bitmap;};
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)( GLuint *rc,  GLfloat *tc,  GLfloat *n,  GLfloat *v);
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
union WBXMLAttributeName_s___FA40C9F21723DAAB428353CE1E5EA15A { WBXMLAttrEntry *token;WBXMLBuffer *literal;};
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)( GLuint *rc,  GLfloat *c,  GLfloat *n,  GLfloat *v);
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
union BDF_PropertyRec____70749040A902BEEB5B4A43154398F920 { char *atom;FT_Int32 integer;FT_UInt32 cardinal;};
struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_rtradv {u_int8_t irt_num_addrs;u_int8_t irt_wpa;u_int16_t irt_lifetime;};
struct xcb_x_print_print_get_screen_of_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)( GLuint *rc,  GLfloat *tc,  GLfloat *v);
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void (*PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
union authdes_verf___7A6CF749D39778C1B89693A36BA727C7 {struct rpc_timeval adv_ctime;des_block adv_xtime;};
struct xcb_x_print_print_rehash_printer_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
typedef void (*PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)( GLuint *rc,  GLfloat *n,  GLfloat *v);
struct __res_state___A41D3F045172AF5618492D381489FAF0 {struct in_addr addr;u_int32_t mask;};
struct xcb_xfixes_get_cursor_image_and_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
union ypbind_resp___CD49527FE086EB7F6D0E69C2C3AD50AC {u_int ypbind_error;ypbind_binding ypbind_bindinfo;};
typedef void (*PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)( GLuint *rc,  GLfloat *c,  GLfloat *v);
typedef void (*PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
union WBXMLTag_s___A183063E187A51A6887EEAA00767A090 { WBXMLTagEntry *token;WBXMLBuffer *literal;};
struct cback_data___8577E6F7A3DA394015609B473F63AD7B {u_int entries_len;obj_p *entries_val;};
typedef void (*PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
struct group_obj___6B1AF3D1F6DE7092D80225088D6E3A34 {u_int gr_members_len;nis_name *gr_members_val;};
struct rex_start___27D82728F37DDE14700CB9E3D9A87412 {u_int rst_env_len;rexstring *rst_env_val;};
struct rex_start___4E8F7DC4996D24194F1417703DE27DA2 {u_int rst_cmd_len;rexstring *rst_cmd_val;};
union sigaction___8A6CDC2F5AA8DF854CEC54DCAF095C68 {__sighandler_t sa_handler;void (*sa_sigaction)(int, siginfo_t *, void *);};
typedef void (*PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)(GLenum variable, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)(GLenum variable, GLenum pname, GLint *params);
union sigevent___C855B7F99D6435A8E40592C91F886A00 {int _pad[13];__pid_t _tid;struct sigevent___C855B7F99D6435A8E40592C91F886A00___A6CCB415D22742E8ABADFD8EB2BAAD45 _sigev_thread;};
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
struct xcb_x_print_print_query_screens_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_x_print_print_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
typedef void (*PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLint *params);
typedef void (*PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)( GLfloat *tc,  GLubyte *c,  GLfloat *v);
struct xcb_render_query_pict_formats_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_screensaver_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t client_major_version;uint8_t client_minor_version;uint8_t pad0[2];};
struct xcb_sync_list_system_counters_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_x_print_print_get_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
typedef void (*PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
typedef void (*PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname, GLfloat *params);
typedef void (*PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, GLint *params);
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)( GLuint *rc,  GLfloat *v);
typedef void (*PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname,  GLfloat *params);
typedef void (*PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname,  GLint *params);
typedef void (*PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)(GLuint dst,  GLfloat *value);
struct xcb_x_print_print_start_doc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t driver_mode;};
struct xcb_x_print_print_start_job_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t output_mode;};
struct xcb_xfixes_get_cursor_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
union ____2798575F521600C1E26DD161E22996D8 {Elf32_Word d_val;Elf32_Addr d_ptr;};
union ____933121F4FA1889599F702E16603DBB9F {Elf64_Xword d_val;Elf64_Addr d_ptr;};
typedef GLuint (*PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)(GLenum unit, GLenum value);
typedef void (*PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname,  GLfloat *params);
typedef void (*PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname,  GLint *params);
typedef void (*PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (*PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint param);
struct xcb_x_print_print_end_page_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t cancel;uint8_t pad0[3];};
struct xcb_xinerama_query_screens_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xinerama_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t major;uint8_t minor;};
typedef void (*PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname,  GLfloat *params);
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (*PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLIMAGETRANSFORMPARAMETERFHPPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (*PFNGLIMAGETRANSFORMPARAMETERIHPPROC)(GLenum target, GLenum pname, GLint param);
typedef void (*PFNGLPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname,  GLint *params);
typedef void (*PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)(GLenum pname, GLint param);
typedef GLXHyperpipeNetworkSGIX *(*PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)(Display *dpy, int *npipes);
struct xcb_x_print_print_end_doc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t cancel;};
struct xcb_x_print_print_end_job_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t cancel;};
struct xcb_xc_misc_get_xid_range_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xf86dri_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
typedef void (*PFNGLCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname,  GLfloat *params);
typedef void (*PFNGLCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname,  GLint *params);
typedef void (*PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname, GLint *params);
typedef void (*PFNGLPIXELTEXGENPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPIXELTEXGENPARAMETERISGISPROC)(GLenum pname, GLint param);
typedef void (*PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n,  GLuint *programs);
struct xcb_get_keyboard_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_get_modifier_mapping_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_list_fonts_with_info_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t max_names;uint16_t pattern_len;};
struct xcb_record_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_set_modifier_mapping_request_t {uint8_t major_opcode;uint8_t keycodes_per_modifier;uint16_t length;};
struct _0118C954C4C10A412A94DFE5F40A710D {Visual *visual;VisualID visualid;int screen;int depth;int c_class;unsigned int red_mask;unsigned int green_mask;unsigned int blue_mask;int colormap_size;int bits_per_rgb;};
struct _017021331B1CD62A1DE3CFBDC78C43A7 {int type;unsigned int serial;int send_event;Display *display;XPContext context;unsigned int available;};
struct _01F58A4EF10D36C3A582DC7631AF8C2B {int type;unsigned int serial;int send_event;Display *display;Window event;Window window;int x;int y;int width;int height;int border_width;Window above;int override_redirect;};
struct _02952D74399316BEFD2BE4AE2D13875D {int type;unsigned int serial;int send_event;Display *display;GLXDrawable drawable;int event_type;int draw_type;unsigned int mask;int x;int y;int width;int height;int count;};
struct _02B7C110B96F422043FD747664A5A945 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _07EFE3D70871BDBDCA74D2E21165F647 {int type;unsigned int serial;int send_event;Display *display;Window event;Window window;};
struct _0822494CA8335A3B81E4FAC70FD7E6A7 {unsigned int num_blocks;XID context_id;void *privData;XvMCMacroBlock *macro_blocks;};
struct _0A132E968BCCC0DBF60AFD92D1AD913D {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused1[2];CARD32 length;CARD8 saveType;CARD8 shutdown;CARD8 interactStyle;CARD8 fast;CARD8 unused2[4];};
struct _0B57ACDB47B389BE1AB4C5797C92E9F4 {int type;unsigned int serial;int send_event;Display *display;Window event;Window window;int from_configure;};
struct _0B741672733CFD1AAF50D1A5E3ACE892 {int xrm_name;int xrm_class;int xrm_type;Cardinal xrm_size;int xrm_offset;int xrm_default_type;XtPointer xrm_default_addr;};
struct _0C1A989C237847E9E0FEF5D20B714342 {CARD8 reqType;CARD8 nElts;CARD16 length;};
struct _0C4B847EA89D426433C47107E0756204 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;};
struct _0C717C2A96F31E63806E7AEC00F2A098 {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD16 protocol;CARD16 pad;};
struct _0E70E9A2AD7D0637C6C018491CDB8CD9 {INT32 top;INT32 bottom;xLineFixed left;xLineFixed right;};
struct _0F3578149035D0CDE8FE9154071A721D {Elf32_Word c_tag;union _0F3578149035D0CDE8FE9154071A721D___9AAFAEFBCBBBF749C8CE72EB51A9C8A2 c_un;};
struct _10184D3025615BB97A779285FBA6EAF5 {CARD8 reqType;CARD8 brReqType;CARD16 length;};
struct _101ED56796A31C5C092EFC61C0F81522 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused[2];CARD32 length;};
struct _11C917A64EBBC5D03EC5A08E1FB0008D {int type;unsigned int serial;int send_event;Display *display;Window window;};
struct _13745364EEA695BC65B7D4AAC1B24515 {td_thr_events_t eventmask;td_event_e eventnum;void *eventdata;};
struct _15A7CADFA0C3B6AF2858DE2248F61F64 {__off64_t __pos;__mbstate_t __state;};
struct _194914D9D4C0AE9A8FC55BCBB00ED166 {CARD32 pixel;CARD16 red;CARD16 green;CARD16 blue;CARD16 alpha;};
struct _1BE3EF8FAEFD838E59DA61E46CB3832E {Window swap_window;XdbeSwapAction swap_action;};
struct _1C5B76C096BE4E4273B6A3EEC40CE50E {Atom prop;Boolean avail;};
struct _1D4F7230B22579A4FD715C0E003DAA6E {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 protocolOpcode;CARD8 mustAuthenticate;CARD32 length;CARD8 versionCount;CARD8 authCount;CARD8 unused[6];};
struct _1DD0730E73CA0CCE248C91CD23CFA17D {String menu_name;XtPointer pad[4];};
struct _1DEEF64472AA4AF2F540A924A55E576B {int screen;Window window;XRectangle pos;XRectangle vis;};
struct _1E2A6A9B5EC919B5C597AB6887935210 {String name;String type;XtArgVal value;int size;};
struct _216A9F1C1CB18296D79DECC5D8B8E2C3 {Window window;int screen;int State;int width;int height;int ScreenCount;XID eventMask;};
struct _225FD46B7233514BB6E78EAEDC113C23 {jas_iccsig_t name;jas_iccattrval_t *val;};
struct _23528D99DB311AE570394A3CCFCAFAB2 {XETrapRepHdr hdr;CARD32 data_last_time;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _24BF153529F05C45F0A0621575016FCA {CARD8 c_class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;CARD16 accelNum;CARD16 accelDenom;CARD16 threshold;};
struct _24D066745D16D85385206417A709F2D6 {void (*destroy)(struct jas_iccattrval_s *);int (*copy)(struct jas_iccattrval_s *, struct jas_iccattrval_s *);int (*input)(struct jas_iccattrval_s *, jas_stream_t *, int);int (*output)(struct jas_iccattrval_s *, jas_stream_t *);int (*getsize)(struct jas_iccattrval_s *);void (*dump)(struct jas_iccattrval_s *, FILE *);};
struct _256B6D485D886C7434E6D059DF9BE864 {CARD8 reqType;CARD8 damageReqType;CARD16 length;};
struct _25D6574E7038479B9CA0BC4071594788 {int type;unsigned int serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;int override_redirect;};
struct _2696F812B3705C744CB9A8772F005405 {int type;unsigned int serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;Window above;int detail;unsigned int value_mask;};
struct _27480D859758915FF7183925E59D9D13 {jas_image_t *(*decode)(jas_stream_t *in, char *opts);int (*encode)(jas_image_t *image, jas_stream_t *out, char *opts);int (*validate)(jas_stream_t *in);};
struct _28183F13DB7442E77993ED2BEDDC9E43 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 firstKeyCode;CARD8 keySymsPerKeyCode;CARD8 keyCodes;};
struct _29DBA087DFE16744A29CB8F8CD68D43B {CARD32 length;CARD16 status;CARD16 pad;};
struct _2C268D9809C6E9DE2B818A0BB7518C2E {CARD16 control;CARD16 length;CARD32 num_valuators;};
struct _2FA8933AB233BEF1F551184322DF3360 {int (*change_sensitive)(Widget);XtPointer extension;};
struct _2FC2A6BC4D5C4BA98ABB1F848EBDDDCB {CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _31065A595C2624CF17F23189AD470066 {int mono;int order;int useluts;int usemat;jas_cmshapmatlut_t luts[3];jas_cmreal_t mat[3][4];};
struct _338644C2278094D31E58DDA0CC7454C7 {char *icon_name;Boolean iconic;Atom icon_name_encoding;};
struct _33EF72D568008DEC7E31A16B28F183D9 {int type;unsigned int serial;int send_event;Display *display;Window event;Window window;int place;};
struct _350BC2B23F9B41AFEB7D1AE3E404670A {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 versionIndex;CARD8 unused;CARD32 length;};
struct _355FFBAADB08B4CAA5BBFAF829DED10A {RECORD_RANGE8 majorCode;RECORD_RANGE16 minorCode;};
struct _35F39AB974A221D257EE41BCA2E719FF {int type;FSServer *server;FSID resourceid;unsigned int serial;unsigned char error_code;unsigned char request_code;unsigned char minor_code;};
struct _3A28C96D52FB29F9635C6203D2891B70 {size_t count;xcb_extension_t *ext;uint8_t opcode;uint8_t isvoid;};
struct _3A8E116D72DF0C8D49D51593D925AF55 {XDGAMode mode;unsigned char *data;Pixmap pixmap;};
struct _3AD473A9924D2058FA4FA6E47C9E79DE {XRecordRange8 ext_major;XRecordRange16 ext_minor;};
struct _3AD660D2DE6692ED5D5F4CBA114AA277 {int type;Display *display;XSyncCounter counter;unsigned int serial;unsigned char error_code;unsigned char request_code;unsigned char minor_code;};
struct _3B895FF4AB049C141C5F7C25E8036379 {CARD16 control;CARD16 length;CARD8 first_valuator;CARD8 num_valuators;CARD8 pad1;CARD8 pad2;};
struct _3BEEF239534EE9E2D4AD58999E56F197 {CARD8 reqType;CARD8 ReqType;CARD16 length;};
struct _3DD3CD96FAD56E1211E0F63114C705EF {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;};
struct _4489EB38A238A95680D8722B994EE839 {Elf64_Xword m_value;Elf64_Xword m_info;Elf64_Xword m_poffset;Elf64_Half m_repeat;Elf64_Half m_stride;};
struct _4496CBA88907C11C6361D9179E75F570 {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;};
struct _488EF114463850BAC9987E879A5DF652 {XID device_id;int num_classes;XInputClassInfo *classes;};
struct _488FF45B2B0EF525AA1AD13B1739492B {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;};
struct _49E0976F54CAA6C31E6EB46E11375E9B {XID c_class;int length;XID id;int max_symbols;int num_syms_supported;KeySym *syms_supported;};
struct _4B29FBEAFEB74D66435D912679576990 {CARD8 reqType;CARD8 miscReqType;CARD16 length;};
struct _4D2E0013E954DA651F15636ABC395F09 {CARD8 c_class;CARD8 id;CARD16 length;};
struct _4D69B6347F056FE268056727CEA155AA {int *chars;int nchars;int delta;XFontSet font_set;};
struct _4E78C26E658CAF0AD1368496874A57C9 {XETrapRepHdr hdr;XETrapGetAvailRep data;};
struct _4FA67FD0121DE61C8BBE74D0ECEE2878 {XRecordRange8 core_requests;XRecordRange8 core_replies;XRecordExtRange ext_requests;XRecordExtRange ext_replies;XRecordRange8 delivered_events;XRecordRange8 device_events;XRecordRange8 errors;int client_started;int client_died;};
struct _5076863A126F636DF3EACFE42235765C {XtCallbackList grip_action;XtPointer pad[4];};
struct _51727A972DDFA83BAA2CC416714856EF {CARD8 c_class;CARD8 length;CARD8 num_buttons;BYTE pad1;CARD8 buttons[32];};
struct _523CE37B1F7AC95341854764E619AB82 {CARD8 reqType;CARD8 renderReqType;CARD16 length;};
struct _53299512E10B7C26B66BF0D6C299D662 {CARD16 control;CARD16 length;CARD32 min_x;CARD32 max_x;CARD32 min_y;CARD32 max_y;CARD32 button_threshold;};
struct _5ADACAF53662BBE439937D75EA2CC10F {int type;unsigned int serial;int send_event;Display *display;Multibuffer buffer;};
struct _5B7C9E3DC72B13D6EDED508B1DAEEFE9 {gregset_t gregs;fpregset_t fpregs;unsigned int oldmask;unsigned int cr2;};
struct _5C0DD3C4E70CCCC9965B24A6BE5ED8FB {CARD8 depth;CARD8 bitsPerPixel;CARD8 scanLinePad;CARD8 pad1;CARD32 pad2;};
struct _5C358F5DC2F4F58C756854976C7F2ED0 {int function;unsigned int plane_mask;unsigned int foreground;unsigned int background;int line_width;int line_style;int cap_style;int join_style;int fill_style;int fill_rule;int arc_mode;Pixmap tile;Pixmap stipple;int ts_x_origin;int ts_y_origin;Font font;int subwindow_mode;int graphics_exposures;int clip_x_origin;int clip_y_origin;Pixmap clip_mask;int dash_offset;char dashes;};
struct _5C41C718BCBFD6CC2A68DF59D547D717 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 versionCount;CARD8 authCount;CARD32 length;CARD8 mustAuthenticate;CARD8 unused[7];};
struct _5CD0DDA75FC8A64FD62E45433429A157 {CARD8 reqType;CARD8 XTestReqType;CARD16 length;};
struct _5FA790A5D3D6F59615AEC79DB4A09862 {int type;unsigned int serial;int send_event;Display *display;Window window;int state;};
struct _625DD72E42D2E4120693244DFAAD3348 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;};
struct _648D5B97A5A1D2D2729A4C51B6643734 {XChar2b *chars;int nchars;int delta;Font font;};
struct _666210E100F3CB5D4A75782C69E711A8 {CARD8 header;CARD8 pad1;CARD16 jumpx;CARD16 jumpy;CARD16 delay_time;};
struct _673344A079D566E8DA83CACA09ADE8E3 {CARD32 datatype;INT32 numVals;CARD32 component;};
struct _67E052DBE3D4216490A6D8B2745BB149 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 data[2];CARD32 length;};
struct _68DA40E4D3A1CB1C47D4FE5C47C475EF {int type;unsigned int serial;int send_event;Display *display;XPContext context;int detail;};
struct _68F8387BCBDA9BD2024BB43F6B7187C6 {CARD16 length;CARD16 opcode;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 width;CARD32 height;CARD32 format;CARD32 imageSize;};
struct _694E7AF0BC9EE95CDB6E54249E923D7E {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 byteOrder;CARD8 unused;CARD32 length;};
struct _6B919F4E06D00F382C9963DC471D0B48 {int type;unsigned int serial;Display *display;int screen;Time time;unsigned int state;unsigned int button;};
struct _6C0DBE15692AB0301FA41806B271F811 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 cancelShutdown;CARD8 unused;CARD32 length;};
struct _6C34763ADB9205A5E9B577107C4B0C36 {XvEncodingID encoding_id;char *name;unsigned int width;unsigned int height;XvRational rate;unsigned int num_encodings;};
struct _6D6F1B3E2508C3E8FAF2245CB1C669E1 {XawTextPosition position;Position y;unsigned int textWidth;};
struct _6F8FCF8121BD236ABFC6904166324F66 {int type;unsigned int serial;int send_event;Display *display;Window window;int mode;int detail;};
struct _7086C2867C7D4B0306B00A1789D67F56 {CARD32 flags;INT32 min;INT32 max;CARD32 size;};
struct _70CE59A0CFDF5BD02F17410240B55142 {CARD8 c_class;CARD8 id;CARD16 length;CARD16 max_symbols;CARD16 num_syms_supported;};
struct _74689F94013354ABD1284F3BD5DCBEC8 {jas_iccuint32_t numents;jas_iccuint16_t *ents;};
struct _7545E18792FF2C20F9BB4220259E75A2 {CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD32 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct _75655E49B9147F5ECABE2329F0193DCC {int type;Display *display;XID resourceid;unsigned int serial;unsigned char error_code;unsigned char request_code;unsigned char minor_code;};
struct _75FD820D0CE6C215ACE04A8FAA270A6D {Elf64_Half vd_version;Elf64_Half vd_flags;Elf64_Half vd_ndx;Elf64_Half vd_cnt;Elf64_Word vd_hash;Elf64_Word vd_aux;Elf64_Word vd_next;};
struct _765B65D42894188272D96826C864A075 {int type;unsigned int serial;int send_event;Display *display;XPContext context;int cancel;int detail;};
struct _772FB43CCF21C0EB4D2EF861D4978150 {int type;unsigned int serial;int send_event;Display *display;Drawable drawable;int major_code;int minor_code;};
struct _797907A242F94DB9200676D3A724828B {CARD8 reqType;CARD8 ext_opcode;CARD16 length;};
struct _7B203B1D6B17DB4D229BE0C85CFA6293 {INT16 leftSideBearing;INT16 rightSideBearing;INT16 characterWidth;INT16 ascent;INT16 descent;CARD16 attributes;};
struct _7BA34DEC42B2BEB7846068E691B46F3F {int type;unsigned int serial;Display *display;int screen;Time time;unsigned int state;unsigned int keycode;};
struct _7CACD6175943F9295C4690CAF509C655 {CARD16 length;CARD16 opcode;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 zoffset;CARD32 width;CARD32 height;CARD32 depth;CARD32 format;CARD32 imageSize;};
struct _7D569909FEB0E294999F498DE699AF74 {CARD8 c_class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;CARD16 num_keysyms;};
struct _7F0AD33161C1C735745BF21ED1DBE93E {int flags_;int_fast32_t xstart_;int_fast32_t ystart_;int_fast32_t xend_;int_fast32_t yend_;int_fast32_t numrows_;int_fast32_t numcols_;jas_seqent_t **rows_;int_fast32_t maxrows_;jas_seqent_t *data_;int_fast32_t datasize_;};
struct _7F4FA8E04F335CE1E911E9EDA6B28A3F {Elf64_Xword c_tag;union _7F4FA8E04F335CE1E911E9EDA6B28A3F___F5AEDB05CC685AEABDADED2A12BE7C9F c_un;};
struct _82CCEA45697413307268EF955876A1D9 {int openmode_;int bufmode_;int flags_;unsigned char *bufbase_;unsigned char *bufstart_;int bufsize_;unsigned char *ptr_;int cnt_;unsigned char tinybuf_[17];jas_stream_ops_t *ops_;jas_stream_obj_t *obj_;int rwcnt_;int rwlimit_;};
struct _831449F56FD082F867F95B7A85E29B03 {XawTextPosition left;XawTextPosition right;XawTextBlock *block;};
struct _83A9560127C5CA1AF601DD4E7C3B278F {CARD32 time;INT16 x;INT16 y;};
struct _83EE9095BF164417D8EF1B0B9271645C {int type;unsigned int serial;int send_event;Display *display;Window window;int request;int first_keycode;int count;};
struct _859F20FF7BA8AA6321582CBACCA6F869 {XRecordClientSpec client;unsigned int nranges;XRecordRange **ranges;};
struct _875800A09C817D61F833D1479DE8ED86 {CARD16 status;CARD16 major_version;CARD16 minor_version;CARD8 num_alternates;CARD8 auth_index;CARD16 alternate_len;CARD16 auth_len;};
struct _87D722ECD21497B94ED1D7223FEC05F4 {String type;Widget widget;};
struct _8848BD856EE61894A9007CEF6791E684 {int type;unsigned int serial;int send_event;Display *display;Window window;char key_vector[32];};
struct _88FB39CD3802D019F63911908A8052EF {int type;Display *display;Window window;};
struct _8A0FC57137FB478736F2B9862ECE0EA6 {XmuArea *clip;XmuArea *hightabs;XawTextPaintStruct *paint;XawTextPaintStruct *bearings;};
struct _8AF8D50F7459E989F83B822632060AA0 {unsigned char kind;unsigned char size;Elf32_Section section;Elf32_Word info;};
struct _8CF502427BECF149369724E71469A9A4 {int type;unsigned int serial;int send_event;Display *display;Window window;int x;int y;int width;int height;int count;};
struct _8E3F17DF06268256B33C950219C36638 {Elf64_Sxword d_tag;union _8E3F17DF06268256B33C950219C36638___933121F4FA1889599F702E16603DBB9F d_un;};
struct _94DE3FD15F99ADB1828A8006E569663B {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused1[2];CARD32 length;CARD8 saveType;CARD8 shutdown;CARD8 interactStyle;CARD8 fast;CARD8 global;CARD8 unused2[3];};
struct _9AD92D66A9B7FE2D16898D79F4A40DAD {char *protocol_name;_IcePoProtocol *orig_client;_IcePaProtocol *accept_client;};
struct _9D6FB564ED57422FFB268B9144C446E8 {CARD8 type;CARD8 pad00;CARD16 sequenceNumber;CARD8 actions[28];};
struct _9DC1427BFA5A30405B067C9596620D04 {CARD32 length;CARD16 max_request_len;CARD16 vendor_len;CARD32 release_number;};
struct _9DE996CCF029E9EC8780697D99848B24 {int type;unsigned int serial;int send_event;Display *display;Window parent;Window window;int place;};
struct _9DFE28049B8EEB519566F0D7FE7040FC {int type;unsigned int serial;Display *display;int screen;Time time;unsigned int state;int dx;int dy;};
struct _9E0249E98289110ACA9F1289B33657CF {int type;unsigned int serial;int send_event;Display *display;Window event;Window window;int x;int y;};
struct _9E389EF8DB18C75445DC45CE7C2FFB9B {Elf32_Sword d_tag;union _9E389EF8DB18C75445DC45CE7C2FFB9B___2798575F521600C1E26DD161E22996D8 d_un;};
struct _9E637E3D30D4EE6DC2F7DCF094554036 {__off_t __pos;__mbstate_t __state;};
struct _9F86842B58D3B4811684B11871470FBD {int type;unsigned int serial;int send_event;Display *display;Window window;int width;int height;};
struct _A0565235DB0A025ED98270EC8F0003BF {Elf32_Half vd_version;Elf32_Half vd_flags;Elf32_Half vd_ndx;Elf32_Half vd_cnt;Elf32_Word vd_hash;Elf32_Word vd_aux;Elf32_Word vd_next;};
struct _A1602EFEF26A0DD20EAD389B18F82E81 {CARD8 reqType;CARD8 xtReqType;CARD16 length;CARD8 majorVersion;CARD8 pad;CARD16 minorVersion;};
struct _A2C7B4C52241BF95D2B2191B54C0B07A {int event_type;int draw_type;unsigned int serial;int send_event;Display *display;GLXDrawable drawable;unsigned int buffer_mask;unsigned int aux_buffer;int x;int y;int width;int height;int count;};
struct _A313ED2DE25BE046A874D492CFBD731F {Elf64_Addr r_offset;Elf64_Xword r_info;};
struct _A46BFD4B6B8C284ED478D587B5722CAB {Elf64_Word vna_hash;Elf64_Half vna_flags;Elf64_Half vna_other;Elf64_Word vna_name;Elf64_Word vna_next;};
struct _A4DBC252F7392490EC4C7D58273D4CD1 {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _A572CE7E5663FCA9F137B2D1D40B04E1 {void_function func;BYTE *data;};
struct _A952ABD3B0337785ED8C31FE9C2AE823 {int type;unsigned int serial;int send_event;Display *display;Multibuffer buffer;int state;};
struct _AAD257271AAA9A190B14D3482C45D035 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _ABE60368F0168DDE4E32B527D5287C6B {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 level;CARD16 pad0;};
struct _AE71E2F0BA42A771B72098AA93CA26BC {XID id_base;Time server_time;unsigned int client_seq;int category;int client_swapped;unsigned char *data;unsigned int data_len;};
struct _AF5FB4080A51E8992C2DCC85F9B13FAA {CARD8 header;CARD8 keycode;CARD16 delay_time;};
struct _B3807A7E298580816B8893D27A6B40D0 {XEventClass event_type;XID device;};
union _B4686A6782EA22417C8F11570D0281E7 {int type;XvVideoNotifyEvent xvvideo;XvPortNotifyEvent xvport;int pad[24];};
struct _B58F2A65D6A08A32CD1EAF6D9DE3C432 {CARD8 c_class;CARD8 length;CARD8 num_keys;BYTE pad1;CARD8 keys[32];};
struct _B6DB448D25F6CB9AE733EFE1F4C4EFF9 {char *ar_name;time_t ar_date;int ar_uid;int ar_gid;unsigned int ar_mode;off_t ar_size;char *ar_rawname;};
struct _B767383C4D9BDDC040C77011396CEA14 {CARD16 length;CARD16 opcode;CARD32 target;CARD32 level;CARD32 internalFormat;CARD32 width;CARD32 height;CARD32 depth;CARD32 border;CARD32 imageSize;};
struct _B863C2049EBF4C6B116A5513F43CF6D2 {enum XML_Parsing parsing;XML_Bool finalBuffer;};
struct _B8BE427FC8694D49638950F9AF5F05C2 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 success;CARD8 unused;CARD32 length;};
struct _BB279EA07E8836E412716D1B8B41E21D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 numKeyPerModifier;CARD16 pad1;};
struct _BBC1C953EE608EAB448834AFD8261F09 {InitFont initFunc;char *name;pointer module;};
struct _BC21E3DCA2DEF6CD8EB07ED07E074597 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 status;CARD8 unused;CARD32 length;};
struct _BC4B0D515307F8380CCAE7BF44CFA97C {Elf32_Word ri_gprmask;Elf32_Word ri_cprmask[4];Elf32_Sword ri_gp_value;};
struct _BC57A1630E59AFE2C540D0A45294CC64 {XExtData *ext_data;VisualID visualid;int c_class;unsigned int red_mask;unsigned int green_mask;unsigned int blue_mask;int bits_per_rgb;int map_entries;};
struct _BCC9C96203DDB6ECC5EFD83EB5D80763 {int type;unsigned int serial;int send_event;Display *display;Window parent;Window window;};
struct _BD3E200215DC355DB1AB2D6A05084309 {int type;unsigned int serial;int send_event;Display *display;XSecurityAuthorization auth_id;};
struct _BE4469CD69A158FEF141EB99E29DC657 {CARD32 surface_type_id;CARD16 chroma_format;CARD16 pad0;CARD16 max_width;CARD16 max_height;CARD16 subpicture_max_width;CARD16 subpicture_max_height;CARD32 mc_type;CARD32 flags;};
struct _C1314179BE3A0EB70B2FB159EDD63B8A {int type;unsigned int serial;int send_event;Display *display;Drawable drawable;int x;int y;int width;int height;int count;int major_code;int minor_code;};
struct _C1A5A3DCCCA94F161802FCE22321BD34 {CARD8 reqType;CARD8 miscReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct _C4D830AACD6CA9C030EA39190076ECCB {String name;XtArgVal value;};
struct _C552EBCACAEF1EC592A2129D44400B77 {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD16 minDelay;CARD16 maxDelay;};
struct _C65377E4DB536D1ADB016911E41EAEC0 {CARD16 length;CARD16 opcode;CARD32 numVertexes;CARD32 numComponents;CARD32 primType;};
struct _C76765155B02FA21702E864CD4488A00 {jas_iccuint32_t type;jas_iccattrvalops_t ops;};
struct _C772EEB8BDF2D9B03BC2113DCD14FF9B {Elf32_Addr r_offset;Elf32_Word r_info;};
struct _C7C2F9747408B8A39467CE13B3FC53FB {CARD16 length;CARD16 opcode;CARD32 target;CARD32 level;CARD32 internalFormat;CARD32 width;CARD32 height;CARD32 border;CARD32 imageSize;};
struct _CB86ED79A67F464A5E5DD7E35915D8C3 {char *option;char *specifier;XrmOptionKind argKind;XPointer value;};
struct _CC7B73821EC10F3655DDE5DAA21E5635 {CARD16 width;CARD16 height;INT16 x;INT16 y;INT16 xOff;INT16 yOff;};
struct _CCAFB83A0FC0BF591DA5D736B6BAF8AE {INT16 left;INT16 right;INT16 width;INT16 ascent;INT16 descent;CARD16 attributes;};
struct _CE2CC21A8DF6496E4E3BA1994C658522 {XSyncTrigger trigger;XSyncValue event_threshold;};
struct _CF91FEEC29390B2E3A7754517937B585 {XID device_id;int num_classes;XInputClass *data;};
struct _D2BC88768625D18EB51B5B1C4DF7633B {int type;unsigned int serial;int send_event;Display *display;Window event;Window window;Window parent;int x;int y;int override_redirect;};
struct _D4C8F552392F5332BDD78714AF7AFE61 {CARD8 type;CARD8 detail;CARD8 screen;CARD8 pad;INT16 x;INT16 y;};
struct _D5990F2BF3086DF3C6E5843A4F6D2F9C {int type;unsigned int serial;int send_event;Display *display;Window event;Window window;int override_redirect;};
struct _D8DA3DB8B551D92E16702FBF10C103DD {XawTextPosition top;int lines;int base_line;XawTextLineTableEntry *info;};
struct _DBDB4AF8E469679C3A4CD785AB502395 {Elf64_Half vn_version;Elf64_Half vn_cnt;Elf64_Word vn_file;Elf64_Word vn_aux;Elf64_Word vn_next;};
struct _DD90A90D33B6DCFC05E4E875B7D49A5E {CARD8 reqType;CARD8 mbufReqType;CARD16 length;};
struct _DDB9E5FBB16C40A976BC405025678C57 {Elf32_Half vn_version;Elf32_Half vn_cnt;Elf32_Word vn_file;Elf32_Word vn_aux;Elf32_Word vn_next;};
struct _DDF2E5A27F0B22B52D0F64042525F7F2 {int line_number;int column_number;XawTextPosition insert_position;XawTextPosition last_position;Boolean overwrite_mode;};
struct _DF35D159A1509306ACCF933DCAD10C10 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 versionIndex;CARD8 protocolOpcode;CARD32 length;};
struct _E59953A36063650DE92A1957B98E4A1B {CARD8 header;CARD8 motion_data;CARD16 delay_time;};
struct _E714B4690DCD4CE2097239CD07373860 {Elf32_Word vna_hash;Elf32_Half vna_flags;Elf32_Half vna_other;Elf32_Word vna_name;Elf32_Word vna_next;};
struct _E7AFD6532C2786B1E1EBCA6ADECADE75 {CARD8 reqType;CARD8 xvReqType;CARD16 length;};
struct _E84BFE5D58BE41C003DC505783B004D5 {XtCallbackList report_callbacks;XtPointer pad[4];};
struct _E8B6B3D679DDF9A2A9F1E31A29349D07 {uint64_t a_type;union _E8B6B3D679DDF9A2A9F1E31A29349D07___E20C8C1B4A7C82F1CEEE602013DD1F57 a_un;};
struct _EE0EBD6C29C148C8F36C0CC188CAC56F {int type;Display *display;XSyncAlarm alarm;unsigned int serial;unsigned char error_code;unsigned char request_code;unsigned char minor_code;};
struct _EE65B23A4559DB1BF795CF28121204EB {XID context_id;int surface_type_id;unsigned short width;unsigned short height;XvPortID port;int flags;void *privData;};
struct _EE831A901A5A464BF76892075612AE21 {XvPortID base_id;unsigned int num_ports;char type;char *name;unsigned int num_formats;XvFormat *formats;unsigned int num_adaptors;};
struct _EF15DCB28339270802C69A46485DD45C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 nbytes;CARD8 pad1;CARD8 pad2;};
struct _EF16C2CE2E165A35D2E9A200C63AE0C2 {jas_iccuint32_t numents;jas_icctagtabent_t *ents;};
struct _F0D1009415F4F398C0AA24385D596C1B {CARD8 reqType;CARD8 data;CARD16 length;};
struct _F1472F09D9F4F4B2B771740E265DAEF8 {CARD8 reqType;CARD8 numKeyPerModifier;CARD16 length;};
struct _F1DC5359840258F1056D6AC9280CBC0A {CARD8 len;INT8 delta;};
struct _F2F9B6351970DCB60CFA1FAEAB4D2E42 {INT16 x_org;INT16 y_org;CARD16 width;CARD16 height;};
struct _F571D10236F18BD99A11DF3B50D0C123 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 standby;CARD16 suspend;CARD16 off;CARD16 pad0;};
struct _F80E3F154E69694439090B67229FB6AA {CARD8 reqType;CARD8 keyCodes;CARD16 length;CARD8 firstKeyCode;CARD8 keySymsPerKeyCode;CARD16 pad1;};
struct _F8FAE457CD964A2B19190AE0569FFFEA {int clrspc;int numchans;int refclrspc;int numrefchans;jas_iccprof_t *iccprof;jas_cmpxformseq_t *pxformseqs[13];};
struct _F9E7774477A9727B3397D0BE30B022B2 {uint32_t a_type;union _F9E7774477A9727B3397D0BE30B022B2___9A662A763779714768031DA711D3415F a_un;};
struct _FC067DEDDE18A65B7B77DF0D808EC43F {unsigned int changed;Position slider_x;Position slider_y;Dimension slider_width;Dimension slider_height;Dimension canvas_width;Dimension canvas_height;};
struct _FC926E0FF1B4283F98DDB8B9F4E921D4 {XID c_class;int length;XID id;int num_keysyms;KeySym *syms_to_display;};
struct _FCE7B9AB8EE8DD1EB8924ED5C32F7044 {enum XML_FeatureEnum feature; XML_LChar *name;int value;};
struct _FD24C124EC918F75BF8194FC7995E204 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 dialogType;CARD8 unused;CARD32 length;};
struct _FFDDF8AD41840F2444187795E69FE4AB {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
typedef GLuint (*PFNGLBINDMATERIALPARAMETEREXTPROC)(GLenum face, GLenum value);
typedef void (*PFNGLCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname,  GLfloat *params);
typedef void (*PFNGLCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname,  GLint *params);
typedef void (*PFNGLCONVOLUTIONPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (*PFNGLCONVOLUTIONPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint params);
typedef void (*PFNGLDELETEOCCLUSIONQUERIESNVPROC)(GLsizei n,  GLuint *ids);
typedef void (*PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)(GLenum pname,  GLint *params);
typedef void (*PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETTEXBUMPPARAMETERFVATIPROC)(GLenum pname, GLfloat *param);
typedef void (*PFNGLGETTEXBUMPPARAMETERIVATIPROC)(GLenum pname, GLint *param);
typedef int (*PFNGLXBINDCHANNELTOWINDOWSGIXPROC)(Display *display, int screen, int channel, Window window);
struct xcb_big_requests_enable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_get_pointer_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_get_pointer_mapping_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_screensaver_suspend_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t suspend;uint8_t pad0[3];};
struct xcb_set_close_down_mode_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;};
struct xcb_set_pointer_mapping_request_t {uint8_t major_opcode;uint8_t map_len;uint16_t length;};
struct xcb_shape_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xc_misc_get_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t client_major_version;uint16_t client_minor_version;};
struct xcb_xevie_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t client_major_version;uint16_t client_minor_version;};
typedef void (*FT_Incremental_FreeGlyphDataFunc)(FT_Incremental incremental, FT_Data *data);
typedef void (*PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n,  GLuint *arrays);
typedef void (*PFNGLFRAGMENTLIGHTMODELFSGIXPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLFRAGMENTLIGHTMODELISGIXPROC)(GLenum pname, GLint param);
typedef void (*PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETCONVOLUTIONFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, GLvoid *image);
typedef void (*PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETMINMAXPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETMINMAXPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
typedef int (*PFNGLXBEGINFRAMETRACKINGMESAPROC)(Display *dpy, GLXDrawable drawable);
typedef int (*PFNGLXGETTRANSPARENTINDEXSUNPROC)(Display *dpy, Window overlay, Window underlay, int *pTransparentIndex);
typedef void (*SmsSaveYourselfPhase2RequestProc)(SmsConn, SmPointer);
struct xcb_force_screen_saver_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;};
struct xcb_set_access_control_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;};
struct xcb_x_print_bad_sequence_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_xinerama_is_active_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xv_query_extension_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xvmc_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
typedef GLuint (*PFNGLBINDTEXGENPARAMETEREXTPROC)(GLenum unit, GLenum coord, GLenum value);
typedef void (*PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname,  GLfloat *params);
typedef void (*PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname,  GLint *params);
typedef void (*PFNGLDELETEASYNCMARKERSSGIXPROC)(GLuint marker, GLsizei range);
typedef void (*PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n,  GLuint *renderbuffers);
typedef void (*PFNGLFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname,  GLfloat *params);
typedef void (*PFNGLFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname,  GLint *params);
typedef void (*PFNGLGETFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname, GLint *params);
typedef void (*PFNGLGETOCCLUSIONQUERYUIVNVPROC)(GLuint id, GLenum pname, GLuint *params);
typedef void (*PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (*PFNGLXDESTROYGLXPBUFFERSGIXPROC)(Display *dpy, GLXPbufferSGIX pbuf);
typedef int (*PFNGLXGETFBCONFIGATTRIBSGIXPROC)(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value);
struct xcb_dpms_get_timeouts_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_dpms_set_timeouts_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t standby_timeout;uint16_t suspend_timeout;uint16_t off_timeout;};
struct xcb_res_query_clients_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_res_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t client_major;uint8_t client_minor;};
struct xcb_shm_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_test_grab_control_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t impervious;uint8_t pad0[3];};
struct xcb_x_print_bad_context_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
typedef GLuint (*PFNGLBINDLIGHTPARAMETEREXTPROC)(GLenum light, GLenum value);
typedef void (*PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname,  GLfloat *params);
typedef void (*PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname,  GLint *params);
typedef void (*PFNGLCOMBINERPARAMETERFVNVPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLCOMBINERPARAMETERIVNVPROC)(GLenum pname,  GLint *params);
typedef void (*PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (*PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
typedef GLhandleARB (*PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef void (*PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n,  GLuint *framebuffers);
typedef void (*PFNGLFRAGMENTMATERIALFSGIXPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (*PFNGLFRAGMENTMATERIALISGIXPROC)(GLenum face, GLenum pname, GLint param);
typedef void (*PFNGLGENOCCLUSIONQUERIESNVPROC)(GLsizei n, GLuint *ids);
typedef void (*PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
typedef void (*PFNGLGETSEPARABLEFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
typedef void (*PFNGLGETSHARPENTEXFUNCSGISPROC)(GLenum target, GLfloat *points);
typedef void (*PFNGLINSTRUMENTSBUFFERSGIXPROC)(GLsizei size, GLint *buffer);
typedef void (*PFNGLSPRITEPARAMETERFVSGIXPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLSPRITEPARAMETERIVSGIXPROC)(GLenum pname,  GLint *params);
typedef void (*PFNGLTEXBUMPPARAMETERFVATIPROC)(GLenum pname,  GLfloat *param);
typedef void (*PFNGLTEXBUMPPARAMETERIVATIPROC)(GLenum pname,  GLint *param);
typedef int (*PFNGLXENDFRAMETRACKINGMESAPROC)(Display *dpy, GLXDrawable drawable);
typedef void (*PFNGLXGETSELECTEDEVENTSGIXPROC)(Display *dpy, GLXDrawable drawable, unsigned int *mask);
struct _XIMPreeditCaretCallbackStruct {int position;XIMCaretDirection direction;XIMCaretStyle style;};
struct xcb_dpms_force_level_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t power_level;};
struct xcb_dpms_get_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint16_t client_major_version;uint16_t client_minor_version;};
struct xcb_get_screen_saver_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_render_pict_format_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_test_get_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t major_version;uint8_t pad0;uint16_t minor_version;};
typedef void (*PFNGLCOLOR4UBVERTEX2FVSUNPROC)( GLubyte *c,  GLfloat *v);
typedef void (*PFNGLCOLOR4UBVERTEX3FVSUNPROC)( GLubyte *c,  GLfloat *v);
typedef void (*PFNGLCOMBINERPARAMETERFNVPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLCOMBINERPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (*PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint *arrays);
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, GLvoid **params);
typedef void (*PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLvoid *image);
typedef void (*PFNGLGETDETAILTEXFUNCSGISPROC)(GLenum target, GLfloat *points);
typedef void (*PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint *params);
typedef void (*PFNGLGETTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLfloat *weights);
typedef void (*PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLSPRITEPARAMETERFSGIXPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLSPRITEPARAMETERISGIXPROC)(GLenum pname, GLint param);
typedef void (*PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index,  GLubyte *v);
typedef void (*PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index,  GLushort *v);
typedef void (*PFNGLXBINDSWAPBARRIERSGIXPROC)(Display *dpy, GLXDrawable drawable, int barrier);
typedef int (*PFNGLXCHANNELRECTSYNCSGIXPROC)(Display *display, int screen, int channel, GLenum synctype);
typedef int (*PFNGLXQUERYCONTEXTINFOEXTPROC)(Display *dpy, GLXContext context, int attribute, int *value);
typedef int (*PFNGLXQUERYGLXPBUFFERSGIXPROC)(Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value);
struct xcb_damage_bad_damage_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_get_input_focus_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_list_extensions_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_query_extension_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t name_len;};
struct xcb_sync_initialize_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_xfixes_bad_region_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct FT_Incremental_InterfaceRec_ { FT_Incremental_FuncsRec *funcs;FT_Incremental object;};
typedef void (*PFNGLALPHAFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (*PFNGLALPHAFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (*PFNGLALPHAFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (*PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
typedef void (*PFNGLCOLOR4UBVERTEX2FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void (*PFNGLCOLOR4UBVERTEX3FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLCOLORFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void (*PFNGLCOLORFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void (*PFNGLCOLORFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void (*PFNGLDRAWELEMENTARRAYATIPROC)(GLenum mode, GLsizei count);
typedef void (*PFNGLEXTRACTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
typedef void (*PFNGLFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname,  GLfloat *params);
typedef void (*PFNGLFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname,  GLint *params);
typedef GLuint (*PFNGLGENASYNCMARKERSSGIXPROC)(GLsizei range);
typedef void (*PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint *renderbuffers);
typedef void (*PFNGLGETARRAYOBJECTFVATIPROC)(GLenum array, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETARRAYOBJECTIVATIPROC)(GLenum array, GLenum pname, GLint *params);
typedef void (*PFNGLGETMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, GLvoid *string);
typedef void (*PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (*PFNGLSTRINGMARKERGREMEDYPROC)(GLsizei len,  GLvoid *string);
typedef void (*PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index,  GLbyte *v);
typedef void (*PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index,  GLint *v);
typedef void (*PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (*PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index,  GLubyte *v);
typedef void (*PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index,  GLushort *v);
typedef void *(*PFNGLXALLOCATEMEMORYMESAPROC)(Display *dpy, int scrn, size_t size, float readfreq, float writefreq, float priority);
typedef GLXFBConfigSGIX *(*PFNGLXCHOOSEFBCONFIGSGIXPROC)(Display *dpy, int screen, int *attrib_list, int *nelements);
typedef int (*PFNGLXRELEASEBUFFERSMESAPROC)(Display *dpy, GLXDrawable drawable);
typedef int (*XML_ExternalEntityRefHandler)(XML_Parser parser,  XML_Char *context,  XML_Char *base,  XML_Char *systemId,  XML_Char *publicId);
struct _FontCacheGetCacheStatistics {CARD8 reqType;CARD8 fontcacheReqType;CARD16 length;};
struct _XF86VidModeGetGammaRampSize {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86VidModeSetClientVersion {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 major;CARD16 minor;};
struct _XIMStatusDrawCallbackStruct {XIMStatusDataType type;union _XIMStatusDrawCallbackStruct___D9A2F521BD917AA4B9408853DE8DEFA7 data;};
struct xcb_render_glyph_set_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
typedef void (*PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
typedef void (*PFNGLCULLPARAMETERDVEXTPROC)(GLenum pname, GLdouble *params);
typedef void (*PFNGLCULLPARAMETERFVEXTPROC)(GLenum pname, GLfloat *params);
typedef void (*PFNGLFRAGMENTLIGHTFSGIXPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (*PFNGLFRAGMENTLIGHTISGIXPROC)(GLenum light, GLenum pname, GLint param);
typedef void (*PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint *framebuffers);
typedef void (*PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
typedef void (*PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
typedef void (*PFNGLIGLOOINTERFACESGIXPROC)(GLenum pname,  GLvoid *params);
typedef void (*PFNGLINSERTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
typedef GLboolean (*PFNGLISOCCLUSIONQUERYNVPROC)(GLuint id);
typedef GLboolean (*PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
typedef GLvoid *(*PFNGLMAPOBJECTBUFFERATIPROC)(GLuint buffer);
typedef void (*PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void (*PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void (*PFNGLMULTITEXCOORD1HVNVPROC)(GLenum target,  GLhalfNV *v);
typedef void (*PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void (*PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void (*PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (*PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (*PFNGLMULTITEXCOORD2HVNVPROC)(GLenum target,  GLhalfNV *v);
typedef void (*PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void (*PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void (*PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (*PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (*PFNGLMULTITEXCOORD3HVNVPROC)(GLenum target,  GLhalfNV *v);
typedef void (*PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (*PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (*PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (*PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (*PFNGLMULTITEXCOORD4HVNVPROC)(GLenum target,  GLhalfNV *v);
typedef void (*PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (*PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (*PFNGLNORMALSTREAM3BVATIPROC)(GLenum stream,  GLbyte *coords);
typedef void (*PFNGLNORMALSTREAM3DVATIPROC)(GLenum stream,  GLdouble *coords);
typedef void (*PFNGLNORMALSTREAM3FVATIPROC)(GLenum stream,  GLfloat *coords);
typedef void (*PFNGLNORMALSTREAM3IVATIPROC)(GLenum stream,  GLint *coords);
typedef void (*PFNGLNORMALSTREAM3SVATIPROC)(GLenum stream,  GLshort *coords);
typedef void (*PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname,  GLint *params);
typedef void (*PFNGLSTENCILCLEARTAGEXTPROC)(GLsizei stencilTagBits, GLuint stencilClearTag);
typedef void (*PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index,  GLbyte *v);
typedef void (*PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index,  GLint *v);
typedef void (*PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index,  GLubyte *v);
typedef void (*PFNGLVERTEXBLENDENVFATIPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLVERTEXBLENDENVIATIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLVERTEXSTREAM1DVATIPROC)(GLenum stream,  GLdouble *coords);
typedef void (*PFNGLVERTEXSTREAM1FVATIPROC)(GLenum stream,  GLfloat *coords);
typedef void (*PFNGLVERTEXSTREAM1IVATIPROC)(GLenum stream,  GLint *coords);
typedef void (*PFNGLVERTEXSTREAM1SVATIPROC)(GLenum stream,  GLshort *coords);
typedef void (*PFNGLVERTEXSTREAM2DVATIPROC)(GLenum stream,  GLdouble *coords);
typedef void (*PFNGLVERTEXSTREAM2FVATIPROC)(GLenum stream,  GLfloat *coords);
typedef void (*PFNGLVERTEXSTREAM2IVATIPROC)(GLenum stream,  GLint *coords);
typedef void (*PFNGLVERTEXSTREAM2SVATIPROC)(GLenum stream,  GLshort *coords);
typedef void (*PFNGLVERTEXSTREAM3DVATIPROC)(GLenum stream,  GLdouble *coords);
typedef void (*PFNGLVERTEXSTREAM3FVATIPROC)(GLenum stream,  GLfloat *coords);
typedef void (*PFNGLVERTEXSTREAM3IVATIPROC)(GLenum stream,  GLint *coords);
typedef void (*PFNGLVERTEXSTREAM3SVATIPROC)(GLenum stream,  GLshort *coords);
typedef void (*PFNGLVERTEXSTREAM4DVATIPROC)(GLenum stream,  GLdouble *coords);
typedef void (*PFNGLVERTEXSTREAM4FVATIPROC)(GLenum stream,  GLfloat *coords);
typedef void (*PFNGLVERTEXSTREAM4IVATIPROC)(GLenum stream,  GLint *coords);
typedef void (*PFNGLVERTEXSTREAM4SVATIPROC)(GLenum stream,  GLshort *coords);
typedef void (*PFNGLXCOPYSUBBUFFERMESAPROC)(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height);
typedef int (*PFNGLXGETFRAMEUSAGEMESAPROC)(Display *dpy, GLXDrawable drawable, float *usage);
typedef __GLXextFuncPtr (*PFNGLXGETPROCADDRESSARBPROC)( GLubyte *procName);
typedef void (*PFNGLXJOINSWAPGROUPSGIXPROC)(Display *dpy, GLXDrawable drawable, GLXDrawable member);
typedef void (*_XawSinkGetCursorBoundsProc)(Widget, XRectangle *);
struct xcb_get_font_path_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_set_font_path_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t font_qty;};
struct xcb_ungrab_server_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_xv_bad_encoding_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct LIBMTP_device_entry_struct {char *name;uint16_t vendor_id;uint16_t product_id;uint32_t device_flags;};
typedef void (*PFNGLDELETEFENCESAPPLEPROC)(GLsizei n,  GLuint *fences);
typedef void (*PFNGLDELETEPROGRAMSARBPROC)(GLsizei n,  GLuint *programs);
typedef void (*PFNGLDELETETEXTURESEXTPROC)(GLsizei n,  GLuint *textures);
typedef void (*PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, GLvoid **params);
typedef void (*PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
typedef GLboolean (*PFNGLISASYNCMARKERSGIXPROC)(GLuint marker);
typedef GLboolean (*PFNGLISOBJECTBUFFERATIPROC)(GLuint buffer);
typedef GLboolean (*PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
typedef void (*PFNGLMATRIXINDEXUBVARBPROC)(GLint size,  GLubyte *indices);
typedef void (*PFNGLMATRIXINDEXUIVARBPROC)(GLint size,  GLuint *indices);
typedef void (*PFNGLMATRIXINDEXUSVARBPROC)(GLint size,  GLushort *indices);
typedef void (*PFNGLMULTITEXCOORD1HNVPROC)(GLenum target, GLhalfNV s);
typedef void (*PFNGLMULTITEXCOORD2HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t);
typedef void (*PFNGLMULTITEXCOORD3HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void (*PFNGLMULTITEXCOORD4HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void (*PFNGLNORMALSTREAM3BATIPROC)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (*PFNGLNORMALSTREAM3DATIPROC)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (*PFNGLNORMALSTREAM3FATIPROC)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (*PFNGLNORMALSTREAM3IATIPROC)(GLenum stream, GLint nx, GLint ny, GLint nz);
typedef void (*PFNGLNORMALSTREAM3SATIPROC)(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
typedef void (*PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (*PFNGLSAMPLECOVERAGEARBPROC)(GLclampf value, GLboolean invert);
typedef void (*PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void (*PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void (*PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB1HVNVPROC)(GLuint index,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void (*PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (*PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (*PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB2HVNVPROC)(GLuint index,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void (*PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB3HVNVPROC)(GLuint index,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB4HVNVPROC)(GLuint index,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index,  GLubyte *v);
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index,  GLushort *v);
typedef void (*PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (*PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (*PFNGLVERTEXSTREAM1DATIPROC)(GLenum stream, GLdouble x);
typedef void (*PFNGLVERTEXSTREAM1FATIPROC)(GLenum stream, GLfloat x);
typedef void (*PFNGLVERTEXSTREAM1IATIPROC)(GLenum stream, GLint x);
typedef void (*PFNGLVERTEXSTREAM1SATIPROC)(GLenum stream, GLshort x);
typedef void (*PFNGLVERTEXSTREAM2DATIPROC)(GLenum stream, GLdouble x, GLdouble y);
typedef void (*PFNGLVERTEXSTREAM2FATIPROC)(GLenum stream, GLfloat x, GLfloat y);
typedef void (*PFNGLVERTEXSTREAM2IATIPROC)(GLenum stream, GLint x, GLint y);
typedef void (*PFNGLVERTEXSTREAM2SATIPROC)(GLenum stream, GLshort x, GLshort y);
typedef void (*PFNGLVERTEXSTREAM3DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLVERTEXSTREAM3FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLVERTEXSTREAM3IATIPROC)(GLenum stream, GLint x, GLint y, GLint z);
typedef void (*PFNGLVERTEXSTREAM3SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLVERTEXSTREAM4DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLVERTEXSTREAM4FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLVERTEXSTREAM4IATIPROC)(GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void (*PFNGLVERTEXSTREAM4SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void *(*PFNGLXALLOCATEMEMORYNVPROC)(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
typedef void (*SmsSaveYourselfRequestProc)(SmsConn, SmPointer, int, int, int, int, int);
struct WBXMLConvWBXML2XMLParams_s {WBXMLEncoderXMLGenType gen_type;WBXMLLanguage lang;unsigned char indent;unsigned char keep_ignorable_ws;};
struct _FontCacheGetCacheSettings {CARD8 reqType;CARD8 fontcacheReqType;CARD16 length;};
struct _XF86VidModeLockModeSwitch {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 lock;};
struct xcb_change_hosts_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;uint8_t family;uint8_t pad0;uint16_t address_len;};
struct xcb_dpms_capable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_dpms_disable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_no_operation_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_query_keymap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_render_animcursorelt_t {xcb_cursor_t cursor;uint32_t delay;};
struct xcb_render_pict_op_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_render_picture_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_xinerama_screen_info_t {int16_t x_org;int16_t y_org;uint16_t width;uint16_t height;};
struct xcb_xv_bad_control_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
typedef GLuint (*PFNGLBINDPARAMETEREXTPROC)(GLenum value);
typedef void (*PFNGLCOMBINEROUTPUTNVPROC)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void (*PFNGLDELETEBUFFERSARBPROC)(GLsizei n,  GLuint *buffers);
typedef void (*PFNGLDELETEPROGRAMSNVPROC)(GLsizei n,  GLuint *programs);
typedef void (*PFNGLDELETEQUERIESARBPROC)(GLsizei n,  GLuint *ids);
typedef void (*PFNGLGETCOLORTABLEEXTPROC)(GLenum target, GLenum format, GLenum type, GLvoid *data);
typedef void (*PFNGLGETCOLORTABLESGIPROC)(GLenum target, GLenum format, GLenum type, GLvoid *table);
typedef GLboolean (*PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
typedef void (*PFNGLMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname,  GLfloat *params);
typedef void (*PFNGLMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname,  GLint *params);
typedef void (*PFNGLMULTITEXCOORD1DVPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD1FVPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD1IVPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD1SVPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLMULTITEXCOORD2DVPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD2FVPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD2IVPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD2SVPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLMULTITEXCOORD3DVPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD3FVPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD3IVPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD3SVPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLMULTITEXCOORD4DVPROC)(GLenum target,  GLdouble *v);
typedef void (*PFNGLMULTITEXCOORD4FVPROC)(GLenum target,  GLfloat *v);
typedef void (*PFNGLMULTITEXCOORD4IVPROC)(GLenum target,  GLint *v);
typedef void (*PFNGLMULTITEXCOORD4SVPROC)(GLenum target,  GLshort *v);
typedef void (*PFNGLPOINTPARAMETERFVPROC)(GLenum pname,  GLfloat *params);
typedef void (*PFNGLPOINTPARAMETERIVPROC)(GLenum pname,  GLint *params);
typedef void (*PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
typedef void (*PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
typedef void (*PFNGLVERTEXATTRIB1HNVPROC)(GLuint index, GLhalfNV x);
typedef void (*PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
typedef void (*PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (*PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (*PFNGLVERTEXATTRIB2HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y);
typedef void (*PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
typedef void (*PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLVERTEXATTRIB3HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void (*PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLVERTEXATTRIB4HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void (*PFNGLVERTEXATTRIB4NBVPROC)(GLuint index,  GLbyte *v);
typedef void (*PFNGLVERTEXATTRIB4NIVPROC)(GLuint index,  GLint *v);
typedef void (*PFNGLVERTEXATTRIB4NSVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (*PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (*PFNGLVERTEXATTRIB4UBVPROC)(GLuint index,  GLubyte *v);
typedef void (*PFNGLVERTEXATTRIB4USVPROC)(GLuint index,  GLushort *v);
typedef GLXContextID (*PFNGLXGETCONTEXTIDEXTPROC)( GLXContext context);
typedef void (*PFNGLXSELECTEVENTSGIXPROC)(Display *dpy, GLXDrawable drawable, unsigned int mask);
typedef void (*SmcSaveYourselfPhase2Proc)(SmcConn, SmPointer);
struct _WindowsWMSetFrontProcess {CARD8 reqType;CARD8 wmReqType;CARD16 length;};
struct _XF86MiscGetMouseSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XF86MiscSetClientVersion {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD16 major;CARD16 minor;};
struct _XF86RushUnlockAllPixmaps {CARD8 reqType;CARD8 rushReqType;CARD16 length;};
struct _XkbExtensionDeviceNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int reason;unsigned int supported;unsigned int unsupported;int first_btn;int num_btns;unsigned int leds_defined;unsigned int led_state;int led_class;int led_id;};
struct _xkbKTSetMapEntryWireDesc {CARD8 level;CARD8 realMods;CARD16 virtualMods;};
struct xcb_dpms_enable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_grab_server_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_intern_atom_request_t {uint8_t major_opcode;uint8_t only_if_exists;uint16_t length;uint16_t name_len;uint8_t pad0[2];};
typedef GLint (*PFNGLFINISHASYNCSGIXPROC)(GLuint *markerp);
typedef void (*PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint *params);
typedef void (*PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (*PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (*PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (*PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (*PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (*PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (*PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (*PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (*PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (*PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (*PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (*PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (*PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (*PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (*PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (*PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (*PFNGLPASSTEXCOORDATIPROC)(GLuint dst, GLuint coord, GLenum swizzle);
typedef void (*PFNGLPNTRIANGLESFATIPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPNTRIANGLESIATIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLVERTEXATTRIB1DVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB1FVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB1SVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB2DVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB2FVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB2SVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB3DVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB3FVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB3SVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIB4BVPROC)(GLuint index,  GLbyte *v);
typedef void (*PFNGLVERTEXATTRIB4DVPROC)(GLuint index,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIB4FVPROC)(GLuint index,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIB4IVPROC)(GLuint index,  GLint *v);
typedef void (*PFNGLVERTEXATTRIB4SVPROC)(GLuint index,  GLshort *v);
typedef void (*PFNGLXFREECONTEXTEXTPROC)(Display *dpy, GLXContext context);
typedef void (*PFNGLXFREEMEMORYMESAPROC)(Display *dpy, int scrn, void *pointer);
typedef void (*SmcShutdownCancelledProc)(SmcConn, SmPointer);
typedef void (*ThreadAppRestoreLockProc)(XtAppContext, int, Boolean *);
typedef void (*WBXMLStartElementHandler)(void *ctx, WBXMLTag *localName, WBXMLAttribute **atts, unsigned char empty);
typedef int (*XmuCloseDisplayQueueProc)(XmuDisplayQueue *queue, XmuDisplayQueueEntry *entry);
struct _JAWT_DrawingSurfaceInfo {void *platformInfo;struct _JAWT_DrawingSurface *ds;struct _JAWT_Rectangle bounds;jint clipSize;struct _JAWT_Rectangle *clip;};
struct _ScreenSaverQueryVersion {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD8 clientMajor;CARD8 clientMinor;CARD16 unused;};
struct _XF86BigfontQueryVersion {CARD8 reqType;CARD8 xf86bigfontReqType;CARD16 length;};
struct _XF86DGAQueryDirectVideo {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86RushAT3DDisableRegs {CARD8 reqType;CARD8 rushReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86RushStatusRegOffset {CARD8 reqType;CARD8 rushReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86VidModeGetGammaRamp {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 size;};
struct _XF86VidModeQueryVersion {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;};
struct _XF86VidModeSetGammaRamp {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 size;};
struct _XIMStringConversionText {unsigned short length;XIMStringConversionFeedback *feedback;int encoding_is_wchar;union _XIMStringConversionText___DE48A4CD3A06187C4ACE99002CF90FB4 string;};
typedef void (*_XInternalConnectionProc)(Display *, int, XPointer);
typedef void (*_XawSinkFindDistanceProc)(Widget, XawTextPosition, int, XawTextPosition, int *, XawTextPosition *, int *);
typedef void (*_XawSinkFindPositionProc)(Widget, XawTextPosition, int, int, int, XawTextPosition *, int *, int *);
typedef void (*_XawSinkInsertCursorProc)(Widget, int, int, XawTextInsertState);
struct _xSyncListSystemCounters {CARD8 reqType;CARD8 syncReqType;CARD16 length;};
struct xcb_list_fonts_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint16_t max_names;uint16_t pattern_len;};
struct xcb_list_hosts_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;};
struct xcb_record_client_info_t {xcb_record_client_spec_t client_resource;uint32_t num_ranges;};
struct xcb_render_glyph_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct xcb_setup_authenticate_t {uint8_t status;uint8_t pad0[5];uint16_t length;};
struct xcb_sync_await_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
typedef void (*IceProtocolActivateProc)(IceConn, IcePointer);
struct LIBMTP_mtpdevice_struct {uint8_t interface_number;void *params;void *usbinfo;uint32_t storage_id;uint8_t maximum_battery_level;uint32_t default_music_folder;uint32_t default_playlist_folder;uint32_t default_picture_folder;uint32_t default_video_folder;uint32_t default_organizer_folder;uint32_t default_zencast_folder;void *cd;};
typedef void (*PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (*PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
typedef void (*PFNGLDELETEFENCESNVPROC)(GLsizei n,  GLuint *fences);
typedef void (*PFNGLDRAWBUFFERSARBPROC)(GLsizei n,  GLenum *bufs);
typedef void (*PFNGLDRAWBUFFERSATIPROC)(GLsizei n,  GLenum *bufs);
typedef void (*PFNGLGENFENCESAPPLEPROC)(GLsizei n, GLuint *fences);
typedef void (*PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint *programs);
typedef void (*PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint *textures);
typedef void (*PFNGLGETPOINTERVEXTPROC)(GLenum pname, GLvoid **params);
typedef void (*PFNGLSAMPLECOVERAGEPROC)(GLclampf value, GLboolean invert);
typedef void (*PFNGLSAMPLEMASKSGISPROC)(GLclampf value, GLboolean invert);
typedef GLboolean (*PFNGLTESTFENCEAPPLEPROC)(GLuint fence);
typedef GLboolean (*PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef void (*PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (*PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (*PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (*PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (*PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (*PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (*PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (*SmsDeletePropertiesProc)(SmsConn, SmPointer, int, char **);
typedef void (*SmsSaveYourselfDoneProc)(SmsConn, SmPointer, int);
typedef void (*XML_StartElementHandler)(void *userData,  XML_Char *name,  XML_Char **atts);
struct _AppleWMSetFrontProcess {CARD8 reqType;CARD8 wmReqType;CARD16 length;};
struct _PrintRehashPrinterList {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _VendorShellExtClassRec {ObjectClassPart object_class;XawVendorShellExtClassPart vendor_shell_ext_class;};
struct _ViewportConstraintsRec {FormConstraintsPart form;ViewportConstraintsPart viewport;};
struct _XF86DGAGetViewPortSize {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86DGAViewPortChanged {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 n;};
struct _XF86MiscGetKbdSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XF86RushAT3DEnableRegs {CARD8 reqType;CARD8 rushReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86VidModeGetModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;};
typedef void (*_XawSinkDisplayTextProc)(Widget, int, int, XawTextPosition, XawTextPosition, int);
struct usb_endpoint_descriptor {u_int8_t bLength;u_int8_t bDescriptorType;u_int8_t bEndpointAddress;u_int8_t bmAttributes;u_int16_t wMaxPacketSize;u_int8_t bInterval;u_int8_t bRefresh;u_int8_t bSynchAddress;unsigned char *extra;int extralen;};
struct xcb_dpms_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;};
struct xcb_render_indexvalue_t {uint32_t pixel;uint16_t red;uint16_t green;uint16_t blue;uint16_t alpha;};
struct xcb_render_pictscreen_t {uint32_t num_depths;xcb_render_pictformat_t fallback;};
struct xcb_render_pictvisual_t {xcb_visualid_t visual;xcb_render_pictformat_t format;};
struct xcb_xv_attribute_info_t {uint32_t flags;int32_t min;int32_t max;uint32_t size;};
struct xcb_xv_bad_port_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;};
struct LIBMTP_playlist_struct {uint32_t playlist_id;char *name;uint32_t *tracks;uint32_t no_tracks;LIBMTP_playlist_t *next;};
typedef void (*PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
typedef void (*PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (*PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
typedef void (*PFNGLDELETEBUFFERSPROC)(GLsizei n,  GLuint *buffers);
typedef void (*PFNGLDELETEQUERIESPROC)(GLsizei n,  GLuint *ids);
typedef void (*PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint *buffers);
typedef void (*PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint *programs);
typedef void (*PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint *ids);
typedef GLuint (*PFNGLGENSYMBOLSEXTPROC)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef void (*PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLvoid *table);
typedef void (*PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (*PFNGLLIGHTENVISGIXPROC)(GLenum pname, GLint param);
typedef void (*PFNGLLOCKARRAYSEXTPROC)(GLint first, GLsizei count);
typedef GLint (*PFNGLPOLLASYNCSGIXPROC)(GLuint *markerp);
typedef void (*PFNGLSAMPLEMASKEXTPROC)(GLclampf value, GLboolean invert);
typedef void (*PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (*PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*PFNGLVARIANTUBVEXTPROC)(GLuint id,  GLubyte *addr);
typedef void (*PFNGLVARIANTUSVEXTPROC)(GLuint id,  GLushort *addr);
typedef void (*PFNGLXFREEMEMORYNVPROC)(GLvoid *pointer);
typedef void (*SmsCloseConnectionProc)(SmsConn, SmPointer, int, char **);
typedef void (*SmsInteractRequestProc)(SmsConn, SmPointer, int);
typedef void (*ThreadAppYieldLockProc)(XtAppContext, Boolean *, Boolean *, int *);
struct _FontCacheQueryVersion {CARD8 reqType;CARD8 fontcacheReqType;CARD16 length;};
struct _LbxGetModifierMapping {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _PanoramiXQueryVersion {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD8 clientMajor;CARD8 clientMinor;CARD16 unused;};
struct _WindowsWMQueryVersion {CARD8 reqType;CARD8 wmReqType;CARD16 length;};
struct _XF86VidModeSwitchMode {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 zoom;};
struct _xkbDeviceLedsWireDesc {CARD16 ledClass;CARD16 ledID;CARD32 namesPresent;CARD32 mapsPresent;CARD32 physIndicators;CARD32 state;};
struct _xkbOverlayRowWireDesc {CARD8 rowUnder;CARD8 nKeys;CARD16 pad1;};
struct rose_facilities_struct {rose_address source_addr;rose_address dest_addr;ax25_address source_call;ax25_address dest_call;unsigned char source_ndigis;unsigned char dest_ndigis;ax25_address source_digis[6];ax25_address dest_digis[6];unsigned int rand;rose_address fail_addr;ax25_address fail_call;};
struct xcb_record_ext_range_t {xcb_record_range_8_t major;xcb_record_range_16_t minor;};
struct xcb_render_glyphinfo_t {uint16_t width;uint16_t height;int16_t x;int16_t y;int16_t x_off;int16_t y_off;};
struct xcb_render_pictdepth_t {uint8_t depth;uint8_t pad0;uint16_t num_visuals;uint8_t pad1[4];};
typedef FT_Error (*FT_Module_Constructor)(FT_Module module);
typedef void (*GLprogramcallbackMESA)(GLenum target, GLvoid *data);
typedef GLuint (*PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB (*PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void (*PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
typedef void (*PFNGLINDEXFUNCEXTPROC)(GLenum func, GLclampf ref);
typedef GLboolean (*PFNGLISFENCEAPPLEPROC)(GLuint fence);
typedef GLboolean (*PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean (*PFNGLISTEXTUREEXTPROC)(GLuint texture);
typedef GLvoid *(*PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void (*PFNGLSAMPLEMAPATIPROC)(GLuint dst, GLuint interp, GLenum swizzle);
typedef void (*PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void (*PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (*PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (*PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (*PFNGLVARIANTBVEXTPROC)(GLuint id,  GLbyte *addr);
typedef void (*PFNGLVARIANTDVEXTPROC)(GLuint id,  GLdouble *addr);
typedef void (*PFNGLVARIANTFVEXTPROC)(GLuint id,  GLfloat *addr);
typedef void (*PFNGLVARIANTIVEXTPROC)(GLuint id,  GLint *addr);
typedef void (*PFNGLVARIANTSVEXTPROC)(GLuint id,  GLshort *addr);
typedef void (*PFNGLWEIGHTUBVARBPROC)(GLint size,  GLubyte *weights);
typedef void (*PFNGLWEIGHTUIVARBPROC)(GLint size,  GLuint *weights);
typedef void (*PFNGLWEIGHTUSVARBPROC)(GLint size,  GLushort *weights);
typedef int (*SmsRegisterClientProc)(SmsConn, SmPointer, char *);
typedef void (*XML_EndElementHandler)(void *userData,  XML_Char *name);
typedef void (*XtExtensionSelectProc)(Widget, int *, XtPointer *, int, XtPointer);
typedef void (*XtResourceDefaultProc)(Widget, int, XrmValue *);
struct _AppleWMSetWindowMenu {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD16 nitems;CARD16 pad1;};
struct _DialogConstraintsRec {FormConstraintsPart form;DialogConstraintsPart dialog;};
struct _ExtensionSelectorRec {XtExtensionSelectProc proc;int min;int max;XtPointer client_data;};
struct _QueuedRequestInfoRec {int count;Atom *selections;QueuedRequest *requests;};
struct _XDGASetClientVersion {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 major;CARD16 minor;};
struct _XF86MiscGetFilePaths {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XF86MiscQueryVersion {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;};
struct _XF86RushQueryVersion {CARD8 reqType;CARD8 rushReqType;CARD16 length;};
struct _XkbNewKeyboardNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;int old_device;int min_key_code;int max_key_code;int old_min_key_code;int old_max_key_code;unsigned int changed;char req_major;char req_minor;};
struct _XtCheckpointTokenRec {int save_type;int interact_style;Boolean shutdown;Boolean fast;Boolean cancel_shutdown;int phase;int interact_dialog_type;Boolean request_cancel;Boolean request_next_phase;Boolean save_success;int type;Widget widget;};
struct _xkbGetIndicatorState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;};
struct usb_config_descriptor {u_int8_t bLength;u_int8_t bDescriptorType;u_int16_t wTotalLength;u_int8_t bNumInterfaces;u_int8_t bConfigurationValue;u_int8_t iConfiguration;u_int8_t bmAttributes;u_int8_t MaxPower;struct usb_interface *interface;unsigned char *extra;int extralen;};
struct usb_device_descriptor {u_int8_t bLength;u_int8_t bDescriptorType;u_int16_t bcdUSB;u_int8_t bDeviceClass;u_int8_t bDeviceSubClass;u_int8_t bDeviceProtocol;u_int8_t bMaxPacketSize0;u_int16_t idVendor;u_int16_t idProduct;u_int16_t bcdDevice;u_int8_t iManufacturer;u_int8_t iProduct;u_int8_t iSerialNumber;u_int8_t bNumConfigurations;};
struct usb_string_descriptor {u_int8_t bLength;u_int8_t bDescriptorType;u_int16_t wData[1];};
typedef void (*FT_Glyph_GetBBoxFunc)(FT_Glyph glyph, FT_BBox *abbox);
typedef int (*FT_Raster_RenderFunc)(FT_Raster raster,  FT_Raster_Params *params);
typedef int (*IceProtocolSetupProc)(IceConn, int, int, char *, char *, IcePointer *, char **);
struct LIBMTP_folder_struct {uint32_t folder_id;uint32_t parent_id;char *name;LIBMTP_folder_t *sibling;LIBMTP_folder_t *child;};
struct LIBMTP_object_struct {uint32_t id;uint32_t parent;uint32_t type;uint32_t size;char *name;void *data;LIBMTP_object_t *sibling;LIBMTP_object_t *child;};
typedef void (*PFNGLDRAWBUFFERSPROC)(GLsizei n,  GLenum *bufs);
typedef void (*PFNGLFOGFUNCSGISPROC)(GLsizei n,  GLfloat *points);
typedef void (*PFNGLGENFENCESNVPROC)(GLsizei n, GLuint *fences);
typedef GLboolean (*PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean (*PFNGLISPROGRAMNVPROC)(GLuint id);
typedef GLboolean (*PFNGLTESTFENCENVPROC)(GLuint fence);
typedef GLboolean (*PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef void (*PFNGLWEIGHTBVARBPROC)(GLint size,  GLbyte *weights);
typedef void (*PFNGLWEIGHTDVARBPROC)(GLint size,  GLdouble *weights);
typedef void (*PFNGLWEIGHTFVARBPROC)(GLint size,  GLfloat *weights);
typedef void (*PFNGLWEIGHTSVARBPROC)(GLint size,  GLshort *weights);
typedef void (*PFNGLXCUSHIONSGIPROC)(Display *dpy, Window window, float cushion);
typedef void (*SmsGetPropertiesProc)(SmsConn, SmPointer);
struct WBXMLAttributeName_s {WBXMLValueType type;union WBXMLAttributeName_s___FA40C9F21723DAAB428353CE1E5EA15A u;};
typedef void (*XConnectionWatchProc)(Display *, XPointer, int, int, XPointer *);
typedef void (*XRecordInterceptProc)(XPointer, XRecordInterceptData *);
struct XawVendorShellExtRec {ObjectPart object;XawVendorShellExtPart vendor_ext;};
typedef int (*XcmsDDConversionProc)(XcmsCCC, XcmsColor *, unsigned int, int *);
typedef int (*XcmsDIConversionProc)(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
typedef void (*XtSignalCallbackProc)(XtPointer, XtSignalId *);
struct _AppleWMFrameGetRect {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD16 frame_class;CARD16 frame_rect;CARD16 ix;CARD16 iy;CARD16 iw;CARD16 ih;CARD16 ox;CARD16 oy;CARD16 ow;CARD16 oh;};
struct _AppleWMFrameHitTest {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD16 frame_class;CARD16 pad1;CARD16 px;CARD16 py;CARD16 ix;CARD16 iy;CARD16 iw;CARD16 ih;CARD16 ox;CARD16 oy;CARD16 ow;CARD16 oh;};
struct _AppleWMQueryVersion {CARD8 reqType;CARD8 wmReqType;CARD16 length;};
struct _LbxLargeRequestData {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _XF86DGAQueryVersion {CARD8 reqType;CARD8 dgaReqType;CARD16 length;};
struct _XF86MiscPassMessage {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD16 typelen;CARD16 vallen;CARD16 screen;CARD16 pad;};
struct _xkmSymInterpretDesc {CARD32 sym;CARD8 mods;CARD8 match;CARD8 virtualMod;CARD8 flags;CARD8 actionType;CARD8 actionData[7];};
typedef void (*BlockHandlerProcPtr)(pointer, OSTimePtr, pointer);
struct FT_OutlineGlyphRec_ {FT_GlyphRec root;FT_Outline outline;};
struct FT_Var_Named_Style_ {FT_Fixed *coords;FT_UInt strid;};
typedef void (*IcePaProcessMsgProc)(IceConn, IcePointer, int, unsigned int, int);
typedef void (*PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (*PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (*PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
typedef void (*PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
typedef void (*PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef GLboolean (*PFNGLISQUERYARBPROC)(GLuint id);
typedef void (*PFNGLSETFENCENVPROC)(GLuint fence, GLenum condition);
typedef void (*PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count,  GLint *value);
typedef void (*SmcSaveCompleteProc)(SmcConn, SmPointer);
typedef void (*SmcSaveYourselfProc)(SmcConn, SmPointer, int, int, int, int);
typedef void (*SmsInteractDoneProc)(SmsConn, SmPointer, int);
typedef int (*XcmsCompressionProc)(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
typedef Boolean (*XtEventDispatchProc)(XEvent *);
typedef void (*XtInputCallbackProc)(XtPointer, int *, XtInputId *);
typedef void (*XtLoseSelectionProc)(Widget, Atom *);
typedef void (*XtSelectionDoneProc)(Widget, Atom *, Atom *);
typedef void (*XtTimerCallbackProc)(XtPointer, XtIntervalId *);
struct _LbxEndLargeRequest {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _ScreenSaverSuspend {CARD8 reqType;CARD8 saverReqType;CARD16 length;int suspend;};
struct _XF86DGADirectVideo {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 enable;};
struct _XSyncSystemCounter {char *name;XSyncCounter counter;XSyncValue resolution;};
typedef void (*_XawSinkResolveProc)(Widget, XawTextPosition, int, int, XawTextPosition *);
struct _XkbCompatMapNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed_groups;int first_si;int num_si;int num_total_si;};
struct _XkbIndicatorNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;unsigned int state;};
struct _XkbSymInterpretRec {KeySym sym;unsigned char flags;unsigned char match;unsigned char mods;unsigned char virtual_mod;XkbAnyAction act;};
struct _xSyncWaitCondition {CARD32 counter;CARD32 value_type;INT32 wait_value_hi;CARD32 wait_value_lo;CARD32 test_type;INT32 event_threshold_hi;CARD32 event_threshold_lo;};
struct _xkbOutlineWireDesc {CARD8 nPoints;CARD8 cornerRadius;CARD16 pad;};
struct _xkbVModMapWireDesc {CARD8 key;CARD8 pad;CARD16 vmods;};
struct bfd_link_hash_table {struct bfd_hash_table table; bfd_target *creator;struct bfd_link_hash_entry *undefs;struct bfd_link_hash_entry *undefs_tail;enum bfd_link_hash_table_type type;};
struct colorhist_list_item {struct colorhist_item ch;colorhist_list next;};
union ieee854_long_double {long double d;struct ieee854_long_double___FB8E818610133F718AF156918955DD46 ieee;struct ieee854_long_double___301A90221CF54AA61D03B5601C453EBC ieee_nan;};
struct xcb_setup_request_t {uint8_t byte_order;uint8_t pad0;uint16_t protocol_major_version;uint16_t protocol_minor_version;uint16_t authorization_protocol_name_len;uint16_t authorization_protocol_data_len;};
struct JNIInvokeInterface {void *reserved0;void *reserved1;void *reserved2;jint (*DestroyJavaVM)(JavaVM *);jint (*AttachCurrentThread)(JavaVM *, void **, void *);jint (*DetachCurrentThread)(JavaVM *);jint (*GetEnv)(JavaVM *, void **, jint);jint (*AttachCurrentThreadAsDaemon)(JavaVM *, void **, void *);};
typedef GLboolean (*PFNGLISFENCENVPROC)(GLuint fence);
typedef GLboolean (*PFNGLISPROGRAMPROC)(GLuint program);
typedef GLvoid *(*PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void (*PFNGLMINMAXEXTPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (*PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (*PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (*PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (*PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (*SANE_Auth_Callback)(SANE_String_Const resource, SANE_Char *username, SANE_Char *password);
typedef int (*XcmsScreenInitProc)(Display *, int, XcmsPerScrnInfo *);
typedef char *(*XkbGetAtomNameFunc)(Display *, Atom);
typedef void (*XmuInitializerProc)(XtAppContext app_context, XPointer data);
struct _CompositeClassRec {CoreClassPart core_class;CompositeClassPart composite_class;};
struct _FontScalableEntry {FontRendererPtr renderer;char *fileName;FontScalableExtraPtr extra;};
struct _PrintQueryScreens {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _PrintQueryVersion {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _ShapeQueryVersion {CARD8 reqType;CARD8 shapeReqType;CARD16 length;};
struct _XF86DGAGetVidPage {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86DGAGetVideoLL {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;};
struct _XF86DGASetVidPage {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 vpage;};
struct _XcursorFileHeader {XcursorUInt magic;XcursorUInt header;XcursorUInt version;XcursorUInt ntoc;XcursorFileToc *tocs;};
struct _XevieQueryVersion {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD16 client_major_version;CARD16 client_minor_version;};
struct _contextErrDataRec {Widget widget;XIM xim;};
struct _xkbListComponents {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 maxNames;};
struct _xkbSymMapWireDesc {CARD8 ktIndex[4];CARD8 groupInfo;CARD8 width;CARD16 nSyms;};
struct _xkmKTMapEntryDesc {CARD8 level;CARD8 realMods;CARD16 virtualMods;};
struct _xkmOverlayRowDesc {CARD8 row_under;CARD8 num_keys;CARD16 pad;};
struct usb_hid_descriptor {u_int8_t bLength;u_int8_t bDescriptorType;u_int16_t bcdHID;u_int8_t bCountryCode;u_int8_t bNumDescriptors;};
struct xcb_setup_failed_t {uint8_t status;uint8_t reason_len;uint16_t protocol_major_version;uint16_t protocol_minor_version;uint16_t length;};
typedef FT_Error (*FT_Glyph_CopyFunc)(FT_Glyph source, FT_Glyph target);
typedef GLboolean (*PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (*PFNGLISSHADERPROC)(GLuint shader);
typedef Atom (*XkbInternAtomFunc)(Display *,  char *, int);
typedef void (*XtErrorMsgHandler)(String, String, String, String, String *, Cardinal *);
struct _TemplateClassRec {CoreClassPart core_class;TemplateClassPart template_class;};
struct _TextSinkClassRec {ObjectClassPart object_class;TextSinkClassPart text_sink_class;};
struct _XConicalGradient {XPointFixed center;XFixed angle;};
struct _XDGAQueryVersion {CARD8 reqType;CARD8 dgaReqType;CARD16 length;};
struct _XEVIQueryVersion {CARD8 reqType;CARD8 xeviReqType;CARD16 length;};
struct _XResQueryClients {CARD8 reqType;CARD8 XResReqType;CARD16 length;};
struct _XResQueryVersion {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD8 client_major;CARD8 client_minor;CARD16 unused;};
struct _XcupQueryVersion {CARD8 reqType;CARD8 xcupReqType;CARD16 length;CARD16 client_major_version;CARD16 client_minor_version;};
struct _XftGlyphFontSpec {XftFont *font;FT_UInt glyph;short x;short y;};
struct _XkbAccessXNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;int detail;int keycode;int sk_delay;int debounce_delay;};
struct _XkbDeviceLedInfo {unsigned short led_class;unsigned short led_id;unsigned int phys_indicators;unsigned int maps_present;unsigned int names_present;unsigned int state;Atom names[32];XkbIndicatorMapRec maps[32];};
struct _xkbSetDeviceInfo {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 firstBtn;CARD8 nBtns;CARD16 change;CARD16 nDeviceLedFBs;};
struct _xkbShapeWireDesc {CARD32 name;CARD8 nOutlines;CARD8 primaryNdx;CARD8 approxNdx;CARD8 pad;};
struct po_xerror_handler {void (*xerror)(int severity, po_message_t message,  char *filename, size_t lineno, size_t column, int multiline_p,  char *message_text);void (*xerror2)(int severity, po_message_t message1,  char *filename1, size_t lineno1, size_t column1, int multiline_p1,  char *message_text1, po_message_t message2,  char *filename2, size_t lineno2, size_t column2, int multiline_p2,  char *message_text2);};
struct re_pattern_buffer {unsigned char *buffer;unsigned int allocated;unsigned int used;reg_syntax_t syntax;char *fastmap;unsigned char *translate;size_t re_nsub;unsigned int can_be_null : 1;unsigned int regs_allocated : 2;unsigned int fastmap_accurate : 1;unsigned int no_sub : 1;unsigned int not_bol : 1;unsigned int not_eol : 1;unsigned int newline_anchor : 1;};
struct rose_route_struct {rose_address address;unsigned short mask;ax25_address neighbour;char device[16];unsigned char ndigis;ax25_address digipeaters[8];};
struct BDF_PropertyRec_ {BDF_PropertyType type;union BDF_PropertyRec____70749040A902BEEB5B4A43154398F920 u;};
typedef int (*CloseDisplayType)(Display *, XExtCodes *);
typedef FT_Error (*FT_List_Iterator)(FT_ListNode node, void *user);
struct FT_Multi_Master_ {FT_UInt num_axis;FT_UInt num_designs;FT_MM_Axis axis[4];};
typedef void (*IcePingReplyProc)(IceConn, IcePointer);
typedef int IjsQueryStatusCb(void *status_cb_data, IjsServerCtx *ctx, IjsJobId job_id);
struct JavaVMAttachArgs {jint version;char *name;jobject group;};
typedef void (*PFNGLHINTPGIPROC)(GLenum target, GLint mode);
typedef GLboolean (*PFNGLISQUERYPROC)(GLuint id);
struct SearchAndReplace {Boolean selection_changed;Widget search_popup;Widget label1;Widget label2;Widget left_toggle;Widget right_toggle;Widget rep_label;Widget rep_text;Widget search_text;Widget rep_one;Widget rep_all;Widget case_sensitive;};
struct WBXMLAttribute_s {WBXMLAttributeName *name;WBXMLBuffer *value;};
typedef void (*XkbFileAddOnFunc)(FILE *, XkbFileInfo *, int, int, int, void *);
typedef int (*XmuCloseHookProc)(Display *dpy, XPointer data);
typedef void (*XtDeallocateProc)(Widget, XtPointer);
struct _FontBitmapEntry {FontRendererPtr renderer;char *fileName;FontPtr pFont;};
struct _HookObjClassRec {ObjectClassPart object_class;HookObjClassPart hook_class;};
struct _LbxQueryVersion {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _PerDisplayTable {Display *dpy;XtPerDisplayStruct perDpy;struct _PerDisplayTable *next;};
struct _PrintGetContext {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _ShmQueryVersion {CARD8 reqType;CARD8 shmReqType;CARD16 length;};
struct _TextSrcClassRec {ObjectClassPart object_class;TextSrcClassPart textSrc_class;};
struct _XConnectionInfo {int fd;_XInternalConnectionProc read_callback;XPointer call_data;XPointer *watch_data;struct _XConnectionInfo *next;};
struct _XagQueryVersion {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD16 client_major_version;CARD16 client_minor_version;};
struct _XcmsPerScrnInfo {XcmsColor screenWhitePt;XPointer functionSet;XPointer screenData;unsigned char state;char pad[3];};
struct _XftCharFontSpec {XftFont *font;FcChar32 ucs4;short x;short y;};
struct _XkbServerMapRec {unsigned short num_acts;unsigned short size_acts;XkbAction *acts;XkbBehavior *behaviors;unsigned short *key_acts;unsigned char *explicit;unsigned char vmods[16];unsigned short *vmodmap;};
typedef Boolean (*_XtConditionProc)(XtPointer);
struct _XtServerGrabRec {struct _XtServerGrabRec *next;Widget widget;unsigned int ownerEvents : 1;unsigned int pointerMode : 1;unsigned int keyboardMode : 1;unsigned int hasExt : 1;unsigned int confineToIsWidgetWin : 1;KeyCode keybut;unsigned short modifiers;unsigned short eventMask;};
struct _xSyncInitialize {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD8 majorVersion;CARD8 minorVersion;CARD16 pad;};
struct _xkbModsWireDesc {CARD8 mask;CARD8 realMods;CARD16 virtualMods;};
struct _xkbSelectEvents {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 affectWhich;CARD16 clear;CARD16 selectAll;CARD16 affectMap;CARD16 map;};
struct _xkbUseExtension {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 wantedMajor;CARD16 wantedMinor;};
struct _xkmBehaviorDesc {CARD8 type;CARD8 data;CARD16 pad;};
struct _xkmGeometryDesc {CARD16 width_mm;CARD16 height_mm;CARD8 base_color_ndx;CARD8 label_color_ndx;CARD16 num_properties;CARD16 num_colors;CARD16 num_shapes;CARD16 num_sections;CARD16 num_doodads;CARD16 num_key_aliases;CARD16 pad1;};
struct authdes_fullname {char *name;des_block key;uint32_t window;};
struct sockaddr_storage {sa_family_t ss_family;__uint32_t __ss_align;char __ss_padding[120];};
struct xcb_sync_int64_t {int32_t hi;uint32_t lo;};
typedef void (*BeforeFlushType)(Display *, XExtCodes *,  char *, int);
typedef char *(*ErrorStringType)(Display *, int, XExtCodes *, char *, int);
struct FT_Bitmap_Size_ {FT_Short height;FT_Short width;FT_Pos size;FT_Pos x_ppem;FT_Pos y_ppem;};
typedef void (*IceErrorHandler)(IceConn, int, int, unsigned int, int, int, IcePointer);
typedef int IjsListParamsCb(void *list_cb_data, IjsServerCtx *ctx, IjsJobId job_id, char *val_buf, int val_size);
typedef void (*PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (*SmcErrorHandler)(SmcConn, int, int, unsigned int, int, int, SmPointer);
typedef void (*SmcInteractProc)(SmcConn, SmPointer);
typedef void (*SmsErrorHandler)(SmsConn, int, int, unsigned int, int, int, SmPointer);
typedef Boolean (*XtFilePredicate)(String);
struct _BitmapInstance {FontScalableRec vals;FontBitmapEntryPtr bitmap;};
struct _LbxInternAtoms {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD16 num;};
struct _SimpleClassRec {CoreClassPart core_class;SimpleClassPart simple_class;};
struct _XConnWatchInfo {XConnectionWatchProc fn;XPointer client_data;struct _XConnWatchInfo *next;};
struct _XcursorCursors {Display *dpy;int ref;int ncursor;Cursor *cursors;};
struct _XkbNamesNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;int first_type;int num_types;int first_lvl;int num_lvls;int num_aliases;int num_radio_groups;unsigned int changed_vmods;unsigned int changed_groups;unsigned int changed_indicators;int first_key;int num_keys;};
struct _XkbUI_ViewOpts {unsigned int present;unsigned int fg;unsigned int bg;unsigned int label_mode;unsigned int color_mode;XRectangle viewport;unsigned int margin_width;unsigned int margin_height;Colormap cmap;};
struct _xkbGetControls {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;};
struct _xkmKeyTypeDesc {CARD8 realMods;CARD8 numLevels;CARD16 virtualMods;CARD8 nMapEntries;CARD8 nLevelNames;CARD8 preserve;CARD8 pad;};
struct _xkmOutlineDesc {CARD8 num_points;CARD8 corner_radius;CARD16 pad;};
struct _xkmOverlayDesc {CARD8 num_rows;CARD8 pad1;CARD16 pad2;};
struct _xkmVModMapDesc {CARD8 key;CARD8 pad;CARD16 vmods;};
typedef int lt_module_close(lt_user_data loader_data, lt_module handle);
struct sysfs_attribute {char name[64];char path[256];char *value;unsigned short len;enum sysfs_attribute_method method;};
struct wireless_config {char name[17];int has_nwid;iwparam nwid;int has_freq;double freq;int freq_flags;int has_key;unsigned char key[64];int key_size;int key_flags;int has_essid;int essid_on;char essid[33];int has_mode;int mode;};
struct xcb_rectangle_t {int16_t x;int16_t y;uint16_t width;uint16_t height;};
struct xcb_timecoord_t {xcb_timestamp_t time;int16_t x;int16_t y;};
struct xcb_xv_format_t {xcb_visualid_t visual;uint8_t depth;};
typedef void (*ClientDiedFunc)(pointer client, FontPathElementPtr fpe);
typedef int IjsEnumParamCb(void *enum_cb_data, IjsServerCtx *ctx, IjsJobId job_id,  char *key, char *val_buf, int val_size);
struct JavaVMInitArgs {jint version;jint nOptions;JavaVMOption *options;jboolean ignoreUnrecognized;};
typedef int (*LoadGlyphsFunc)(pointer client, FontPtr pfont, int range_flag, unsigned int nchars, int item_size, unsigned char *data);
typedef void (*PrintErrorType)(Display *, XErrorEvent *, void *);
struct TT_MaxProfile_ {FT_Fixed version;FT_UShort numGlyphs;FT_UShort maxPoints;FT_UShort maxContours;FT_UShort maxCompositePoints;FT_UShort maxCompositeContours;FT_UShort maxZones;FT_UShort maxTwilightPoints;FT_UShort maxStorage;FT_UShort maxFunctionDefs;FT_UShort maxInstructionDefs;FT_UShort maxStackElements;FT_UShort maxSizeOfInstructions;FT_UShort maxComponentElements;FT_UShort maxComponentDepth;};
typedef void (*XtCallbackProc)(Widget, XtPointer, XtPointer);
struct _LbxStartProxy {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _LbxStreamOpts {LbxStreamCompHandle (*streamCompInit)(int fd, pointer arg);pointer streamCompArg;int (*streamCompStuffInput)(int fd, unsigned char *buf, int buflen);int (*streamCompInputAvail)(int fd);int (*streamCompFlush)(int fd);int (*streamCompRead)(int fd, unsigned char *buf, int buflen);int (*streamCompWriteV)(int fd, struct iovec *iov, int iovcnt);void (*streamCompOn)(int fd);void (*streamCompOff)(int fd);void (*streamCompFreeHandle)(LbxStreamCompHandle handle);};
struct _PrintStartDoc {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD8 type;CARD8 pad1;CARD16 pad2;};
struct _PrintStartJob {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD8 saveData;CARD8 pad1;CARD16 pad2;};
union _TMBindDataRec {TMSimpleBindDataRec simple;TMComplexBindDataRec complex;};
struct _XExtEventInfo {Mask mask;BYTE type;BYTE word;};
struct _XValuatorInfo {XID c_class;int length;unsigned char num_axes;unsigned char mode;unsigned int motion_buffer;XAxisInfoPtr axes;};
struct _XawTextAnchor {XawTextPosition position;XawTextEntity *entities;XawTextEntity *cache;};
struct _XtCallbackRec {XtCallbackProc callback;XtPointer closure;};
struct _xSyncAwaitReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;};
struct _xValuatorInfo {CARD8 c_class;CARD8 length;CARD8 num_axes;CARD8 mode;CARD32 motion_buffer_size;};
struct atalk_netrange {__u8 nr_phase;__be16 nr_firstnet;__be16 nr_lastnet;};
struct bp_getfile_arg {bp_machine_name_t client_name;bp_fileid_t file_id;};
union ieee754_double {double d;struct ieee754_double___D177F1DF27478B0248C6745F72EEAEB0 ieee;struct ieee754_double___DD584A325266113E3D0838C6650565BE ieee_nan;};
typedef lt_module lt_module_open(lt_user_data loader_data,  char *filename);
typedef res_sendhookact (*res_send_qhook)(struct sockaddr_in * *ns,  u_char **query, int *querylen, u_char *ans, int anssiz, int *resplen);
typedef res_sendhookact (*res_send_rhook)( struct sockaddr_in *ns,  u_char *query, int querylen, u_char *ans, int anssiz, int *resplen);
struct rrd_time_value {timetype type;int offset;struct tm tm;};
struct usb_ctrl_setup {u_int8_t bRequestType;u_int8_t bRequest;u_int16_t wValue;u_int16_t wIndex;u_int16_t wLength;};
struct xcb_charinfo_t {int16_t left_side_bearing;int16_t right_side_bearing;int16_t character_width;int16_t ascent;int16_t descent;uint16_t attributes;};
struct xcb_fontprop_t {xcb_atom_t name;uint32_t value;};
struct xcb_xv_image_t {uint32_t id;uint16_t width;uint16_t height;uint32_t data_size;uint32_t num_planes;};
struct yppushresp_xfr {u_int transid;yppush_status status;};
typedef void (*CloseFontFunc)(FontPathElementPtr fpe, FontPtr pFont);
struct FT_Parameter_ {FT_ULong tag;FT_Pointer data;};
typedef int IjsBeginJobCb(void *begin_cb_data, IjsServerCtx *ctx, IjsJobId job_id);
typedef int IjsGetParamCb(void *get_cb_data, IjsServerCtx *ctx, IjsJobId job_id,  char *key, char *val_buf, int val_size);
typedef int IjsSetParamCb(void *set_cb_data, IjsServerCtx *ctx, IjsJobId job_id,  char *key,  char *value, int value_size);
typedef int (*StartLfwiFunc)(pointer client, FontPathElementPtr fpe, char *pat, int len, int max, pointer *privatep);
typedef int (*XErrorHandler)(Display *, XErrorEvent *);
struct _CompositeRec {CorePart core;CompositePart composite;};
struct _LbxImageText {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;CARD8 nChars;};
struct _LbxPolyPoint {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;CARD8 padBytes;};
struct _LbxStopProxy {CARD8 reqType;CARD8 lbxReqType;CARD16 length;};
struct _SmeClassPart {XtWidgetProc highlight;XtWidgetProc unhighlight;XtWidgetProc notify;XtPointer extension;};
typedef __ssize_t __io_write_fn(void *cookie,  char *buf, size_t n);
struct __jmp_buf_tag {__jmp_buf __jmpbuf;int __mask_was_saved;__sigset_t __saved_mask;};
struct bfd_arch_info {int bits_per_word;int bits_per_address;int bits_per_byte;enum bfd_architecture arch;unsigned int mach; char *arch_name; char *printable_name;unsigned int section_align_power;bfd_boolean the_default; struct bfd_arch_info *(*compatible)( struct bfd_arch_info *a,  struct bfd_arch_info *b);bfd_boolean (*scan)( struct bfd_arch_info *,  char *); struct bfd_arch_info *next;};
struct bp_whoami_res {bp_machine_name_t client_name;bp_machine_name_t domain_name;bp_address router_address;};
struct fddi_snap_hdr {__u8 dsap;__u8 ssap;__u8 ctrl;__u8 oui[3];__u16 ethertype;};
union ieee754_float {float f;struct ieee754_float___CCFA8EFBEFBEB58ABED61A4627F05411 ieee;struct ieee754_float___C1CC197CEBD9377945A71E8A21F83EB1 ieee_nan;};
struct inotify_event {int wd;uint32_t mask;uint32_t cookie;uint32_t len;char name[];};
struct iw_pmkid_cand {__u32 flags;__u32 index;struct sockaddr bssid;};
struct pcap_etherent {u_char addr[6];char name[122];};
struct sockaddr_ax25 {sa_family_t sax25_family;ax25_address sax25_call;int sax25_ndigis;};
struct ypresp_master {ypstat stat;peername peer;};
struct FTC_FontRec_ {FTC_FaceID face_id;FT_UShort pix_width;FT_UShort pix_height;};
typedef void (*IceWatchProc)(IceConn, IcePointer, int, IcePointer *);
typedef void (*XtAlmostProc)(Widget, Widget, XtWidgetGeometry *, XtWidgetGeometry *);
typedef void (*XtStringProc)(Widget, String);
struct _FontBCEntry {FontScalableRec vals;FontEntryPtr entry;};
struct _IcePingWait {IcePingReplyProc ping_reply_proc;IcePointer client_data;struct _IcePingWait *next;};
struct _KeyCacheRec {unsigned char modifiers_return[256];KeyCode keycode[64];unsigned char modifiers[64];KeySym keysym[64];};
struct _LbxCopyArea {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 srcCache;CARD8 cacheEnts;};
struct _LbxPolyText {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;};
struct _LbxPutImage {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 compressionMethod;CARD8 cacheEnts;CARD8 bitPacked;};
struct _SmeClassRec {RectObjClassPart rect_class;SmeClassPart sme_class;};
struct _TemplateRec {CorePart core;TemplatePart template;};
struct _TextSinkRec {ObjectPart object;TextSinkPart text_sink;};
struct _TipClassRec {CoreClassPart core_class;TipClassPart tip_class;};
struct _XcursorFile {void *closure;int (*read)(XcursorFile *file, unsigned char *buf, int len);int (*write)(XcursorFile *file, unsigned char *buf, int len);int (*seek)(XcursorFile *file, int offset, int whence);};
struct _XkbAnyEvent {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;unsigned int device;};
struct _XtDeviceRec {XtServerGrabRec grab;XtServerGrabType grabType;};
struct __gconv_info {size_t __nsteps;struct __gconv_step *__steps;struct __gconv_step_data __data[];};
typedef __ssize_t __io_read_fn(void *cookie, char *buf, size_t nbytes);
struct _xButtonInfo {CARD8 c_class;CARD8 length;CARD16 num_buttons;};
struct _xDeviceInfo {CARD32 type;CARD8 id;CARD8 num_classes;CARD8 use;CARD8 pad1;};
struct _xkbGetState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;};
struct _xkmFileInfo {CARD8 type;CARD8 min_kc;CARD8 max_kc;CARD8 num_toc;CARD16 present;CARD16 pad;};
struct _xkmModsDesc {CARD8 realMods;CARD8 pad;CARD16 virtualMods;};
struct authdes_verf {union authdes_verf___7A6CF749D39778C1B89693A36BA727C7 adv_time_u;uint32_t adv_int_u;};
struct bfd_preserve {void *marker;void *tdata;flagword flags; struct bfd_arch_info *arch_info;struct bfd_section *sections;struct bfd_section *section_last;unsigned int section_count;struct bfd_hash_table section_htab;};
struct ether_header {u_int8_t ether_dhost[6];u_int8_t ether_shost[6];u_int16_t ether_type;};
struct group_filter {uint32_t gf_interface;struct sockaddr_storage gf_group;uint32_t gf_fmode;uint32_t gf_numsrc;struct sockaddr_storage gf_slist[1];};
struct ip_timestamp {u_int8_t ipt_code;u_int8_t ipt_len;u_int8_t ipt_ptr;unsigned int ipt_flg : 4;unsigned int ipt_oflw : 4;u_int32_t data[9];};
struct key_netstarg {keybuf st_priv_key;keybuf st_pub_key;netnamestr st_netname;};
typedef bool_t (*resultproc_t)(caddr_t resp, struct sockaddr_in *raddr);
struct td_thrhandle {td_thragent_t *th_ta_p;psaddr_t th_unique;};
struct ypresp_order {ypstat stat;u_int ordernum;};
typedef void (*ExifLogFunc)(ExifLog *log, ExifLogCode,  char *domain,  char *format, va_list args, void *data);
struct FT_MM_Axis_ {FT_String *name;FT_Long minimum;FT_Long maximum;};
typedef int IjsEndJobCb(void *end_cb_data, IjsServerCtx *ctx, IjsJobId job_id);
typedef int (*StartLaFunc)(pointer client, FontPathElementPtr fpe, char *pat, int len, int max, pointer *privatep);
struct WBXMLTree_s { WBXMLLangEntry *lang;WBXMLTreeNode *root;};
typedef void (*XtConverter)(XrmValue *, Cardinal *, XrmValue *, XrmValue *);
typedef Cardinal (*XtOrderProc)(Widget);
struct _GetBugMode {CARD8 reqType;CARD8 mitReqType;CARD16 length;};
struct _HookObjRec {ObjectPart object;HookObjPart hooks;};
struct _MultiPiece {int *text;XawTextPosition used;struct _MultiPiece *prev;struct _MultiPiece *next;};
struct _RectObjRec {ObjectPart object;RectObjPart rectangle;};
struct _TMEventRec {XEvent *xev;Event event;};
struct _TextSrcRec {ObjectPart object;TextSrcPart textSrc;};
struct _XFreeFuncs {FreeFuncType atoms;FreeModmapType modifiermap;FreeFuncType key_bindings;FreeFuncType context_db;FreeFuncType defaultCCCs;FreeFuncType clientCmaps;FreeFuncType intensityMaps;FreeFuncType im_filters;FreeFuncType xkb;};
struct _XTrapezoid {XFixed top;XFixed bottom;XLineFixed left;XLineFixed right;};
struct _xRectangle {INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct cdrom_drive {int opened;char *cdda_device_name;char *ioctl_device_name;int cdda_fd;int ioctl_fd;char *drive_model;int drive_type;int interface;int bigendianp;int nsectors;int cd_extra;int tracks;TOC disc_toc[100];int audio_first_sector;int audio_last_sector;int errordest;int messagedest;char *errorbuf;char *messagebuf;int (*enable_cdda)(struct cdrom_drive *d, int onoff);int (*read_toc)(struct cdrom_drive *d);int (*read_audio)(struct cdrom_drive *d, void *p, int begin, int sectors);int (*set_speed)(struct cdrom_drive *d, int speed);int error_retry;int report_all;int is_atapi;int is_mmc;unsigned char *sg;unsigned char *sg_buffer;unsigned char inqbytes[4];unsigned char density;unsigned char orgdens;unsigned int orgsize;int bigbuff;int adjust_ssize;int fua;int lun;sigset_t sigset;};
struct cryptkeyarg {netnamestr remotename;des_block deskey;};
struct epoll_event {uint32_t events;epoll_data_t data;};
struct floatformat {enum floatformat_byteorders byteorder;unsigned int totalsize;unsigned int sign_start;unsigned int exp_start;unsigned int exp_len;int exp_bias;unsigned int exp_nan;unsigned int man_start;unsigned int man_len;enum floatformat_intbit intbit; char *name;int (*is_valid)( struct floatformat *fmt,  void *from);};
struct ip_msfilter {struct in_addr imsf_multiaddr;struct in_addr imsf_interface;uint32_t imsf_fmode;uint32_t imsf_numsrc;struct in_addr imsf_slist[1];};
typedef void *lt_find_sym(lt_user_data loader_data, lt_module handle,  char *symbol);
struct ppm_fs_info {int *thisrederr;int *thisgreenerr;int *thisblueerr;int *nextrederr;int *nextgreenerr;int *nextblueerr;int lefttoright;int cols;pixval maxval;int flags;pixel *pixrow;int col_end;pixval red;pixval green;pixval blue;};
struct printf_info {int prec;int width;int spec;unsigned int is_long_double : 1;unsigned int is_short : 1;unsigned int is_long : 1;unsigned int alt : 1;unsigned int space : 1;unsigned int left : 1;unsigned int showsign : 1;unsigned int group : 1;unsigned int extra : 1;unsigned int is_char : 1;unsigned int wide : 1;unsigned int i18n : 1;int pad;};
struct sockaddr_ec {sa_family_t sec_family;unsigned char port;unsigned char cb;unsigned char type;struct ec_addr addr;unsigned int cookie;};
struct strfdinsert {struct strbuf ctlbuf;struct strbuf databuf;t_uscalar_t flags;int fildes;int offset;};
struct vm86_struct {struct vm86_regs regs;unsigned int flags;unsigned int screen_bitmap;unsigned int cpu_type;struct revectored_struct int_revectored;struct revectored_struct int21_revectored;};
struct xcb_depth_t {uint8_t depth;uint8_t pad0;uint16_t visuals_len;uint8_t pad1[4];};
struct ypbind_resp {ypbind_resptype ypbind_status;union ypbind_resp___CD49527FE086EB7F6D0E69C2C3AD50AC ypbind_resp_u;};
struct ypreq_nokey {domainname domain;mapname map;};
typedef int (*NextLaFunc)(pointer client, FontPathElementPtr fpe, char **namep, int *namelenp, char **resolvedp, int *resolvedlenp, pointer c_private);
typedef void (*SmcDieProc)(SmcConn, SmPointer);
struct WBXMLTag_s {WBXMLValueType type;union WBXMLTag_s___A183063E187A51A6887EEAA00767A090 u;};
typedef void (*XtCaseProc)(Display *, KeySym, KeySym *, KeySym *);
typedef Boolean (*XtWorkProc)(XtPointer);
struct _SimpleRec {CorePart core;SimplePart simple;};
struct _XtGrabRec {XtGrabList next;Widget widget;unsigned int exclusive : 1;unsigned int spring_loaded : 1;};
struct _xkbGetMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 full;CARD16 partial;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD16 virtualMods;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD16 pad1;};
struct _xkbSetMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 present;CARD16 flags;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD16 totalSyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD16 totalActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 totalKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 totalKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 totalModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD8 totalVModMapKeys;CARD16 virtualMods;};
typedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);
struct atalk_addr {__be16 s_net;__u8 s_node;};
union epoll_data {void *ptr;int fd;uint32_t u32;uint64_t u64;};
struct klm_holder {bool_t exclusive;int svid;u_int l_offset;u_int l_len;};
struct usb_device {struct usb_device *next;struct usb_device *prev;char filename[4097];struct usb_bus *bus;struct usb_device_descriptor descriptor;struct usb_config_descriptor *config;void *dev;u_int8_t devnum;unsigned char num_children;struct usb_device **children;};
struct xcb_host_t {uint8_t family;uint8_t pad0;uint16_t address_len;};
struct ypresp_val {ypstat stat;valdat val;};
struct ypresp_xfr {u_int transid;ypxfrstat xfrstat;};
struct Gpm_Event {unsigned char buttons;unsigned char modifiers;unsigned short vc;short dx;short dy;short x;short y;enum Gpm_Etype type;int clicks;enum Gpm_Margin margin;short wdx;short wdy;};
struct _ExifData {ExifContent *ifd[5];unsigned char *data;unsigned int size;ExifDataPrivate *priv;};
struct _FontInfo {unsigned short firstCol;unsigned short lastCol;unsigned short firstRow;unsigned short lastRow;unsigned short defaultCh;unsigned int noOverlap : 1;unsigned int terminalFont : 1;unsigned int constantMetrics : 1;unsigned int constantWidth : 1;unsigned int inkInside : 1;unsigned int inkMetrics : 1;unsigned int allExist : 1;unsigned int drawDirection : 2;unsigned int cachable : 1;unsigned int anamorphic : 1;short maxOverlap;short pad;xCharInfo maxbounds;xCharInfo minbounds;xCharInfo ink_maxbounds;xCharInfo ink_minbounds;short fontAscent;short fontDescent;int nprops;FontPropPtr props;char *isStringProp;};
struct _LbxDelta {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 diffs;CARD8 cindex;};
struct _xKeyInfo {CARD8 c_class;CARD8 length;CARD8 min_keycode;CARD8 max_keycode;CARD16 num_keys;CARD8 pad1;CARD8 pad2;};
struct cp_result {nis_error cp_status;uint32_t cp_zticks;uint32_t cp_dticks;};
struct ether_arp {struct arphdr ea_hdr;u_int8_t arp_sha[6];u_int8_t arp_spa[4];u_int8_t arp_tha[6];u_int8_t arp_tpa[4];};
struct gmonparam {int state;u_short *kcount;u_long kcountsize;u_long *froms;u_long fromssize;struct tostruct *tos;u_long tossize;int tolimit;u_long lowpc;u_long highpc;u_long textsize;u_long hashfraction;int log_hashfraction;};
struct group_obj {uint32_t gr_flags;struct group_obj___6B1AF3D1F6DE7092D80225088D6E3A34 gr_members;};
struct group_req {uint32_t gr_interface;struct sockaddr_storage gr_group;};
struct groupnode {name gr_name;groups gr_next;};
struct iw_thrspy {struct sockaddr addr;struct iw_quality qual;struct iw_quality low;struct iw_quality high;};
struct ping_args {nis_name dir;uint32_t stamp;};
struct ppp_stats {struct pppstat p;struct vjstat vj;};
struct sigaction {union sigaction___8A6CDC2F5AA8DF854CEC54DCAF095C68 __sigaction_handler;__sigset_t sa_mask;int sa_flags;void (*sa_restorer)(void);};
struct strrecvfd {int fd;uid_t uid;gid_t gid;char __fill[8];};
struct td_notify {td_notify_e type;union td_notify___143F0EF771439D241AFD6E8AB1506B64 u;};
struct timestamp {u_int8_t len;u_int8_t ptr;unsigned int flags : 4;unsigned int overflow : 4;u_int32_t data[9];};
struct xcb_arc_t {int16_t x;int16_t y;uint16_t width;uint16_t height;int16_t angle1;int16_t angle2;};
struct xcb_rgb_t {uint16_t red;uint16_t green;uint16_t blue;uint8_t pad0[2];};
struct FT_Data_ { FT_Byte *pointer;FT_Int length;};
struct _XIMText {unsigned short length;XIMFeedback *feedback;int encoding_is_wchar;union _XIMText___8281806D2C2C5E9220BA18F83AF5F330 string;};
struct _XftFont {int ascent;int descent;int height;int max_advance_width;FcCharSet *charset;FcPattern *pattern;};
struct _buffile {BufChar *bufp;int left;int eof;BufChar buffer[8192];int (*input)(BufFilePtr);int (*output)(int, BufFilePtr);int (*skip)(BufFilePtr, int);int (*close)(BufFilePtr, int);char *c_private;};
struct evbuffer {u_char *buffer;u_char *orig_buffer;size_t misalign;size_t totallen;size_t off;void (*cb)(struct evbuffer *, size_t, size_t, void *);void *cbarg;};
struct fhstatus {u_int fhs_status;union fhstatus___5A86E21E7BD06EF982D138486E7C27D0 fhstatus_u;};
struct link_map {Elf32_Addr l_addr;char *l_name;Elf32_Dyn *l_ld;struct link_map *l_next;struct link_map *l_prev;};
struct oar_mask {uint32_t oa_rights;zotypes oa_otype;};
struct sigevent {sigval_t sigev_value;int sigev_signo;int sigev_notify;union sigevent___C855B7F99D6435A8E40592C91F886A00 _sigev_un;};
struct tcp_info {u_int8_t tcpi_state;u_int8_t tcpi_ca_state;u_int8_t tcpi_retransmits;u_int8_t tcpi_probes;u_int8_t tcpi_backoff;u_int8_t tcpi_options;unsigned char tcpi_snd_wscale : 4;unsigned char tcpi_rcv_wscale : 4;u_int32_t tcpi_rto;u_int32_t tcpi_ato;u_int32_t tcpi_snd_mss;u_int32_t tcpi_rcv_mss;u_int32_t tcpi_unacked;u_int32_t tcpi_sacked;u_int32_t tcpi_lost;u_int32_t tcpi_retrans;u_int32_t tcpi_fackets;u_int32_t tcpi_last_data_sent;u_int32_t tcpi_last_ack_sent;u_int32_t tcpi_last_data_recv;u_int32_t tcpi_last_ack_recv;u_int32_t tcpi_pmtu;u_int32_t tcpi_rcv_ssthresh;u_int32_t tcpi_rtt;u_int32_t tcpi_rttvar;u_int32_t tcpi_snd_ssthresh;u_int32_t tcpi_snd_cwnd;u_int32_t tcpi_advmss;u_int32_t tcpi_reordering;};
struct tupleint {int value;sample tuple[1];};
struct BDFSTAT {int linenum;char *fileName;char fontName[1024];float pointSize;int resolution_x;int resolution_y;int digitCount;int digitWidths;int exHeight;FontPropPtr fontProp;FontPropPtr pointSizeProp;FontPropPtr resolutionXProp;FontPropPtr resolutionYProp;FontPropPtr resolutionProp;FontPropPtr xHeightProp;FontPropPtr weightProp;FontPropPtr quadWidthProp;BOOL haveFontAscent;BOOL haveFontDescent;BOOL haveDefaultCh;};
typedef int (*XICProc)(XIC, XPointer, XPointer);
typedef void (*XIDProc)(Display *, XPointer, XPointer);
typedef void (*XIMProc)(XIM, XPointer, XPointer);
struct _FTFace {char *filename;FT_Face face;int bitmap;FT_UInt num_hmetrics;struct _FTInstance *instances;struct _FTInstance *active_instance;struct _FTFace *next;};
struct _TipRec {CorePart core;TipPart tip;};
struct _XAssoc {struct _XAssoc *next;struct _XAssoc *prev;Display *display;XID x_id;char *data;};
struct _XImage {int width;int height;int xoffset;int format;char *data;int byte_order;int bitmap_unit;int bitmap_bit_order;int bitmap_pad;int depth;int bytes_per_line;int bits_per_pixel;unsigned int red_mask;unsigned int green_mask;unsigned int blue_mask;XPointer obdata;struct _XImage__funcs f;};
struct _XkbRow {short top;short left;unsigned short num_keys;unsigned short sz_keys;int vertical;XkbKeyPtr keys;XkbBoundsRec bounds;};
struct iw_mlme {__u16 cmd;__u16 reason_code;struct sockaddr addr;};
struct r_debug {int r_version;struct link_map *r_map;Elf32_Addr r_brk;enum r_debug___AF097615159EB3CBDA82C5A5C14EBA11 r_state;Elf32_Addr r_ldbase;};
struct statvfs {unsigned int f_bsize;unsigned int f_frsize;__fsblkcnt_t f_blocks;__fsblkcnt_t f_bfree;__fsblkcnt_t f_bavail;__fsfilcnt_t f_files;__fsfilcnt_t f_ffree;__fsfilcnt_t f_favail;unsigned int f_fsid;int __f_unused;unsigned int f_flag;unsigned int f_namemax;int __f_spare[6];};
struct strpeek {struct strbuf ctlbuf;struct strbuf databuf;t_uscalar_t flags;};
struct tagITEM {TEXT name;TEXT description;struct tagMENU *imenu;void *userptr;Item_Options opt;short index;short y;short x;char value;struct tagITEM *left;struct tagITEM *right;struct tagITEM *up;struct tagITEM *down;};
struct timeval {__time_t tv_sec;__suseconds_t tv_usec;};
struct trh_hdr {u_int8_t ac;u_int8_t fc;u_int8_t daddr[6];u_int8_t saddr[6];u_int16_t rcf;u_int16_t rseg[8];};
struct trn_hdr {u_int8_t trn_ac;u_int8_t trn_fc;u_int8_t trn_dhost[6];u_int8_t trn_shost[6];u_int16_t trn_rcf;u_int16_t trn_rseg[8];};
struct dirent {__ino_t d_ino;__off_t d_off;unsigned short d_reclen;unsigned char d_type;char d_name[256];};
struct dqinfo {u_int64_t dqi_bgrace;u_int64_t dqi_igrace;u_int32_t dqi_flags;u_int32_t dqi_valid;};
struct msghdr {void *msg_name;socklen_t msg_namelen;struct iovec *msg_iov;size_t msg_iovlen;void *msg_control;size_t msg_controllen;int msg_flags;};
struct passwd {char *pw_name;char *pw_passwd;__uid_t pw_uid;__gid_t pw_gid;char *pw_gecos;char *pw_dir;char *pw_shell;};
struct rquota {int rq_bsize;bool_t rq_active;u_int rq_bhardlimit;u_int rq_bsoftlimit;u_int rq_curblocks;u_int rq_fhardlimit;u_int rq_fsoftlimit;u_int rq_curfiles;u_int rq_btimeleft;u_int rq_ftimeleft;};
struct tcphdr {u_int16_t source;u_int16_t dest;u_int32_t seq;u_int32_t ack_seq;unsigned short res1 : 4;unsigned short doff : 4;unsigned short fin : 1;unsigned short syn : 1;unsigned short rst : 1;unsigned short psh : 1;unsigned short ack : 1;unsigned short urg : 1;unsigned short res2 : 2;u_int16_t window;u_int16_t check;u_int16_t urg_ptr;};
struct _xArc {INT16 x;INT16 y;CARD16 width;CARD16 height;INT16 angle1;INT16 angle2;};
struct _xReq {CARD8 reqType;CARD8 data;CARD16 length;};
struct dlist {DL_node *marker;unsigned int count;size_t data_size;void (*del_func)(void *);DL_node headnode;DL_node *head;};
struct dqblk {u_int64_t dqb_bhardlimit;u_int64_t dqb_bsoftlimit;u_int64_t dqb_curspace;u_int64_t dqb_ihardlimit;u_int64_t dqb_isoftlimit;u_int64_t dqb_curinodes;u_int64_t dqb_btime;u_int64_t dqb_itime;u_int32_t dqb_valid;};
struct flock {short l_type;short l_whence;__off_t l_start;__off_t l_len;__pid_t l_pid;};
struct tmask {Mask mask;Pointer dev;};
struct trllc {u_int8_t dsap;u_int8_t ssap;u_int8_t llc;u_int8_t protid[3];u_int16_t ethertype;};
struct ustat {__kernel_daddr_t f_tfree;__kernel_ino_t f_tinode;char f_fname[6];char f_fpack[6];};
struct font {int maxwidth;int maxheight;int x;int y;struct glyph *glyph[256];bit **oldfont;int fcols;int frows;};
struct user {struct user_regs_struct regs;int u_fpvalid;struct user_fpregs_struct i387;unsigned int u_tsize;unsigned int u_dsize;unsigned int u_ssize;unsigned int start_code;unsigned int start_stack;int signal;int reserved;struct user_regs_struct *u_ar0;struct user_fpregs_struct *u_fpstate;unsigned int magic;char u_comm[32];int u_debugreg[8];};
union wait {int w_status;struct wait___E9BF053A98CA6B253628237B5A23E48D __wait_terminated;struct wait___39CA23F4E14B66D514B108A5928EF219 __wait_stopped;};
struct pam {unsigned int size;unsigned int len;FILE *file;int format;unsigned int plainformat;int height;int width;unsigned int depth;sample maxval;unsigned int bytes_per_sample;char tuple_type[256];unsigned int allocation_depth;};
union _xEvent______F60DFC41729ECCA7C121C44CBFE60E95___82F47A5C57D4899F304609D6061CA549 {struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FD3E7DCAA1FA6D37E77316D970071F0A l;struct _xEvent_________82F47A5C57D4899F304609D6061CA549___B8AD833485FADDB6F1E0494B45611EC6 s;struct _xEvent_________82F47A5C57D4899F304609D6061CA549___FB6660946ED728575FB5339601D7D5BE b;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___0F73BC087B0175F837E61BF86166AB84 {CARD32 pad00;CARD32 window;CARD8 state;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___316B218C709051C178B3BB07E6B18196 {CARD32 pad00;CARD32 drawable;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD16 minorEvent;CARD16 count;BYTE majorEvent;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___3284E488B37AEC742A022E833068D497 {CARD32 pad00;CARD32 event;CARD32 window;BOOL override;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___40ECE1105C1C479EC11371480E0EAEEE {CARD32 pad00;CARD32 window;CARD32 atom;CARD32 time;BYTE state;BYTE pad1;CARD16 pad2;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___4C0CCDC0D2C41013B07E05B3A7C75551 {CARD32 pad00;CARD32 window;CARD32 colormap;BOOL c_new;BYTE state;BYTE pad1;BYTE pad2;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___4D6B1C2E2FE6C1124CAB2311E897D1AB {CARD32 pad00;CARD8 request;CARD8 firstKeyCode;CARD8 count;BYTE pad1;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___674F3E4AE65A41A1BBF2ACE37596CB1B {CARD32 pad00;CARD32 event;CARD32 window;BOOL fromConfigure;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___CF45A70F1381AC3E41639336F8DCFD08 {CARD32 pad00;CARD32 parent;CARD32 window;CARD32 sibling;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 valueMask;CARD32 pad1;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___E3E63ACF9DBDF6C56161A285CC120760 {CARD32 pad00;CARD32 drawable;CARD16 minorEvent;BYTE majorEvent;BYTE bpad;};
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___002955E8B5DE3B92E30DFEF7AB65BFE2 {__pid_t si_pid;__uid_t si_uid;sigval_t si_sigval;};
struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___353EAF26536A4016665766004ADC0BD6 {__pid_t si_pid;__uid_t si_uid;int si_status;__clock_t si_utime;__clock_t si_stime;};
struct ____1C1E9EA25555F3A04518B10EE9DF4602___5BEEE552B0DC6B217341171DE42CA55F {BYTE type;BYTE reason;CARD16 sequenceNumber;CARD32 time;CARD32 drawable;CARD32 port;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct ____4C8070B9675DF490D49D1F7749E052FB___554023DFD94A0D1F1DC623A35C397FCE {CARD32 pad0;CARD32 time;INT16 dx;INT16 dy;INT16 screen;CARD16 state;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
union _5D6EFF7AE4955960C2AFFE32FE5051B9___A6A66F05C578A4FA32694BF857B12B94 { SANE_String_Const *string_list; SANE_Word *word_list; SANE_Range *range;};
union _C2A18E44A509FAD040F54243FD2340D8___778EFE577D72BDC72296C1BA4B0B2E9A {xEvent event;xResourceReq req;xGenericReply reply;};
struct ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314__ip6_hdrctl {uint32_t ip6_un1_flow;uint16_t ip6_un1_plen;uint8_t ip6_un1_nxt;uint8_t ip6_un1_hlim;};
struct xcb_xf86dri_query_direct_rendering_capable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xf86dri_query_direct_rendering_capable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t is_capable;};
union bfd_link_order___F088814F1EB47C39F5059A2176155568 {struct bfd_link_order___F088814F1EB47C39F5059A2176155568___20472B6430190B13548BE45EDDAD6B8B indirect;struct bfd_link_order___F088814F1EB47C39F5059A2176155568___974A17A8BC5AF481D5F80CD1467CEB27 data;struct bfd_link_order___F088814F1EB47C39F5059A2176155568___CB20B2E56E1A0ADC543C65136DC1864E reloc;};
union jas_cmpxform_s___A0F1B4D3F69509C57B0549094C544A5C {double dummy;jas_cmshapmat_t shapmat;jas_cmshaplut_t shaplut;jas_cmclrspcconv_t clrspcconv;};
struct xcb_x_print_print_get_image_resolution_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;};
struct xcb_x_print_print_set_image_resolution_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint16_t image_resolution;};
struct xcb_x_print_print_get_page_dimensions_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;};
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)( GLuint *rc,  GLubyte *c,  GLfloat *v);
struct xcb_composite_release_overlay_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_x_print_print_get_image_resolution_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t image_resolution;};
struct xcb_x_print_print_set_image_resolution_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;uint16_t previous_resolutions;};
typedef void (*PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
struct xcb_composite_unredirect_subwindows_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_x_print_print_get_page_dimensions_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width;uint16_t height;uint16_t offset_x;uint16_t offset_y;uint16_t reproducible_width;uint16_t reproducible_height;};
union icmp6_hdr___85A0B7966B981BE593FDADBE0B8685D7 {uint32_t icmp6_un_data32[1];uint16_t icmp6_un_data16[2];uint8_t icmp6_un_data8[4];};
struct xcb_render_query_pict_index_values_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_pictformat_t format;};
struct xcb_x_print_print_get_one_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t valueLen;uint8_t pad1[20];};
struct xcb_x_print_print_get_printer_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t printerNameLen;uint32_t localeLen;};
struct xcb_xf86dri_get_client_driver_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
union in6_addr___485AE7EBE2507040E6A806129EC743D2 {uint8_t u6_addr8[16];uint16_t u6_addr16[8];uint32_t u6_addr32[4];};
struct xcb_composite_redirect_subwindows_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_res_query_client_pixmap_bytes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t xid;};
struct xcb_x_print_print_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context;};
struct xcb_x_print_print_get_document_data_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t status_code;uint32_t finished_flag;uint32_t dataLen;uint8_t pad1[12];};
union fddihdr___938C6FB260523AB5682B137AC0052733 {struct fddi_8022_1_hdr llc_8022_1;struct fddi_8022_2_hdr llc_8022_2;struct fddi_snap_hdr llc_snap;};
union icmphdr___44B9F435D952314818895718F3518D16 {struct icmphdr___44B9F435D952314818895718F3518D16___6EE1EE5693408D5F1EEE7E152919407C echo;u_int32_t gateway;struct icmphdr___44B9F435D952314818895718F3518D16___FAA42A1B1B50669B023341484BA7B095 frag;};
struct xcb_composite_get_overlay_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_render_query_pict_index_values_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_values;uint8_t pad1[20];};
struct xcb_screensaver_unset_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_x_print_print_get_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint8_t pool;uint8_t pad0[3];};
struct xcb_x_print_print_get_printer_list_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t listCount;uint8_t pad1[20];};
struct xcb_x_print_print_input_selected_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;};
struct xcb_xf86dri_get_client_driver_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t client_driver_major_version;uint32_t client_driver_minor_version;uint32_t client_driver_patch_version;uint32_t client_driver_name_len;uint8_t pad1[8];};
struct xcb_xfixes_change_cursor_by_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t src;uint16_t nbytes;uint8_t pad0[2];};
struct xcb_composite_unredirect_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_glx_get_drawable_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_drawable_t drawable;};
struct xcb_glx_query_extensions_string_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_glx_vendor_private_with_reply_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t retval;uint8_t data1[24];};
struct xcb_res_query_client_pixmap_bytes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t bytes;uint32_t bytes_overflow;};
typedef void (*PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)(GLuint index, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)(GLuint index, GLenum pname, GLint *params);
struct xcb_render_reference_glyph_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t gsid;xcb_render_glyphset_t existing;};
struct xcb_res_query_client_resources_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t xid;};
struct xcb_x_print_print_input_selected_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t event_mask;uint32_t all_events_mask;};
struct xcb_composite_redirect_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint8_t update;uint8_t pad0[3];};
struct xcb_glx_get_drawable_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_attribs;uint8_t pad1[20];uint32_t value_mask;};
struct xcb_glx_get_query_objectuiv_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint32_t datum;uint8_t pad2[12];};
struct xcb_glx_query_extensions_string_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint8_t pad2[16];};
struct xcb_render_create_anim_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cid;};
struct xcb_render_set_picture_filter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;uint16_t filter_len;};
struct xcb_x_print_print_query_screens_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t listCount;uint8_t pad1[20];};
struct xcb_x_print_print_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_x_print_print_set_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context;};
struct xcb_xf86dri_get_drawable_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t drawable;};
struct xcb_xinerama_get_screen_count_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble *params);
typedef void (*PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat *params);
struct xcb_list_installed_colormaps_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_res_query_client_resources_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_types;uint8_t pad1[20];};
struct xcb_x_print_print_start_page_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xf86dri_close_connection_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xf86dri_destroy_drawable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t drawable;};
struct xcb_xv_query_port_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;};
struct xcb_xvmc_list_subpicture_types_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num;uint8_t pad1[20];};
typedef GLXContext (*PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)(Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, int direct);
struct xcb_change_keyboard_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint32_t value_mask;};
struct xcb_change_keyboard_mapping_request_t {uint8_t major_opcode;uint8_t keycode_count;uint16_t length;xcb_keycode_t first_keycode;uint8_t keysyms_per_keycode;};
struct xcb_composite_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_glx_get_polygon_stipple_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint8_t lsb_first;};
struct xcb_glx_query_server_string_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t name;};
struct xcb_render_query_pict_formats_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_formats;uint32_t num_screens;uint32_t num_depths;uint32_t num_visuals;uint32_t num_subpixel;uint8_t pad1[4];};
struct xcb_screensaver_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;uint8_t pad1[20];};
struct xcb_sync_list_system_counters_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t counters_len;uint8_t pad1[20];};
struct xcb_x_print_print_get_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t context;};
struct xcb_xf86dri_auth_connection_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t magic;};
struct xcb_xf86dri_create_drawable_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t drawable;};
struct xcb_xf86dri_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t context;};
struct xcb_xf86dri_get_device_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xf86dri_open_connection_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_xfixes_intersect_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source1;xcb_xfixes_region_t source2;xcb_xfixes_region_t destination;};
struct xcb_xv_query_image_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_planes;uint32_t data_size;uint16_t width;uint16_t height;uint8_t pad1[12];};
struct xcb_xvmc_destroy_subpicture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_subpicture_t subpicture_id;};
struct xcb_xvmc_list_surface_types_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port_id;};
typedef void (*PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean *data);
typedef void (*PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint *data);
typedef void (*PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble *params);
typedef void (*PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat *params);
typedef void (*PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index,  GLdouble *params);
typedef void (*PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index,  GLfloat *params);
struct xcb_change_pointer_control_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;int16_t acceleration_numerator;int16_t acceleration_denominator;int16_t threshold;uint8_t do_acceleration;uint8_t do_threshold;};
struct xcb_copy_colormap_and_free_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t mid;xcb_colormap_t src_cmap;};
struct xcb_glx_destroy_glx_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_pixmap_t glx_pixmap;};
struct xcb_glx_get_visual_configs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_list_installed_colormaps_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t cmaps_len;uint8_t pad1[22];};
struct xcb_record_disable_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_screensaver_query_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_x_print_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t context_id;uint32_t printerNameLen;uint32_t localeLen;};
struct xcb_xf86dri_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t visual;uint32_t screen;uint32_t context;};
struct xcb_xfixes_change_save_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t mode;uint8_t target;uint8_t map;uint8_t pad0;xcb_window_t window;};
struct xcb_xfixes_get_cursor_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cursor;};
struct xcb_xfixes_set_cursor_name_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cursor;uint16_t nbytes;uint8_t pad0[2];};
struct xcb_xfixes_subtract_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source1;xcb_xfixes_region_t source2;xcb_xfixes_region_t destination;};
struct xcb_xv_query_port_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_attributes;uint32_t text_size;uint8_t pad1[16];};
struct xcb_xv_select_video_notify_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint8_t onoff;};
typedef void (*PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, GLvoid *pointer);
typedef void (*PFNGLGETVARIANTARRAYOBJECTFVATIPROC)(GLuint id, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETVARIANTARRAYOBJECTIVATIPROC)(GLuint id, GLenum pname, GLint *params);
typedef void (*PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)(GLenum mode,  GLint *first,  GLsizei *count, GLsizei primcount);
typedef void (*PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef GLXFBConfigSGIX (*PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)(Display *dpy, XVisualInfo *vis);
typedef XVisualInfo *(*PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)(Display *dpy, GLXFBConfigSGIX config);
struct _xSecurityAuthorizationRevokedEvent {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 authId;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct xcb_composite_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_get_window_attributes_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_glx_get_polygon_stipple_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_query_server_string_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t str_len;uint8_t pad2[16];};
struct xcb_randr_get_screen_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_record_enable_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_render_free_glyph_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t glyphset;};
struct xcb_x_print_attribut_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_x_print_pcontext_t context;};
struct xcb_xf86dri_auth_connection_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t authenticated;};
struct xcb_xf86dri_create_drawable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t hw_drawable_handle;};
struct xcb_xf86dri_get_device_info_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t framebuffer_handle_low;uint32_t framebuffer_handle_high;uint32_t framebuffer_origin_offset;uint32_t framebuffer_size;uint32_t framebuffer_stride;uint32_t device_private_size;};
struct xcb_xf86dri_open_connection_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t drm_client_key_low;uint32_t drm_client_key_high;uint32_t sarea_handle_low;uint32_t sarea_handle_high;uint32_t bus_id_len;uint8_t pad1[12];};
struct xcb_xfixes_destroy_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xfixes_region_extents_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_xfixes_region_t destination;};
struct xcb_xv_list_image_formats_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;};
struct xcb_xv_select_port_notify_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint8_t onoff;};
struct xcb_xvmc_list_surface_types_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num;uint8_t pad1[20];};
typedef void (*PFNGLGETLOCALCONSTANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat *data);
typedef void (*PFNGLGETMAPATTRIBPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETMAPATTRIBPARAMETERIVNVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
typedef void (*PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index,  GLdouble *params);
typedef void (*PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index,  GLfloat *params);
struct xcb_damage_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_get_keyboard_mapping_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_keycode_t first_keycode;uint8_t count;};
struct xcb_glx_get_visual_configs_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_visuals;uint32_t num_properties;uint8_t pad1[16];};
struct xcb_render_query_filters_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;};
struct xcb_render_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_shape_input_selected_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t destination_window;};
struct xcb_sync_destroy_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;};
struct xcb_xc_misc_get_xid_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t count;};
struct xcb_xf86dri_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t hw_context;};
struct xcb_xfixes_change_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t source;xcb_cursor_t destination;};
struct xcb_xfixes_create_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xfixes_expand_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_xfixes_region_t destination;uint16_t left;uint16_t right;uint16_t top;uint16_t bottom;};
struct xcb_xfixes_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t client_major_version;uint32_t client_minor_version;};
struct xcb_xinerama_query_screens_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t number;uint8_t pad1[20];};
struct xcb_xinerama_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major;uint16_t minor;};
struct xcb_xvmc_create_subpicture_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width_actual;uint16_t height_actual;uint16_t num_palette_entries;uint16_t entry_bytes;uint8_t component_order[4];uint8_t pad1[12];};
struct xcb_xvmc_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_context_t context_id;};
struct xcb_xvmc_destroy_surface_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_surface_t surface_id;};
struct _014A104DDA4E37509806F389081D67BC {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 components;CARD32 width;CARD32 height;CARD32 border;CARD32 format;CARD32 type;};
struct _019CECDD6753AAB6598130682127E88A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 accelNumerator;CARD16 accelDenominator;CARD16 threshold;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _01D78593398EF5D4C7B0D882F4AC2769 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD16 width_actual;CARD16 height_actual;CARD32 flags_return;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _0490893E281F28CD04BB03B56188F30F {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 cursor;};
struct _04D0ADC31935FE4C3A858C08EAEE2E45 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 padl2;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _069CA722659D31B5E21E1ACEADA10473 {CARD8 reqType;BYTE pad;CARD16 length;CARD16 nFonts;BYTE pad1;BYTE pad2;};
struct _0733D28D39B544C0D1FF9AB5A89F168E {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 event_mask;};
struct _07A0BBE0F3D6D0E97B5A30869B6D39C4 {CARD8 byteOrder;BYTE pad;CARD16 majorVersion;CARD16 minorVersion;CARD16 nbytesAuthProto;CARD16 nbytesAuthString;CARD16 pad2;};
struct _0894F55B6F728822A381396F6EE8B24B {BOOL success;BOOL changeType;CARD16 majorVersion;CARD16 minorVersion;CARD16 length;CARD32 tag;};
struct _091D8C0512871595A9DC831969F12B34 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 window;};
struct _092DD72AC6B9BBA1C79AF097B6F8E844 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 num_feedbacks;CARD16 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;CARD32 pad06;};
struct _095E6FF95FC66C44DDF436071BD80AA6 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numFormats;CARD32 numScreens;CARD32 numDepths;CARD32 numVisuals;CARD32 numSubpixel;CARD32 pad5;};
struct _09E69E0556021A33BB43607C87C36B45 {CARD32 visual;CARD8 depth;CARD8 pad1;CARD16 pad2;};
struct _0A270F69B196F9EFA6F2CD4624EE5655 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad2;CARD32 pixel;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _0A710E56E462CA6F472C6BEF95652ED5 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 window;};
struct _0CCE02F838D9CC63825202C012B6DAD4 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 window;CARD32 selection;CARD32 eventMask;};
struct _0D158C80ECE88D73A8DF0C6BE4079214 {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD32 authId;};
struct _0E536A4A735E73BADC27E9D377D18348 {CARD8 type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _0F2B39C4889BFBA0BBC9C66D38A1F5D3 {Elf32_Word sh_name;Elf32_Word sh_type;Elf32_Word sh_flags;Elf32_Addr sh_addr;Elf32_Off sh_offset;Elf32_Word sh_size;Elf32_Word sh_link;Elf32_Word sh_info;Elf32_Word sh_addralign;Elf32_Word sh_entsize;};
struct _113ADE3249D8CE9145901B23810AE272 {BYTE type;BYTE pad;CARD16 sequenceNumber;CARD32 length;CARD32 num_replies;CARD32 num_catalogues;};
struct _1206FECF9ACD3192A71AF1264343EAEE {XawTextPosition left;XawTextPosition right;XawTextSelectType type;Atom *selections;int atom_count;int array_size;};
union _12139D15327A66BC6BD2CA276E233382 {fsGenericReply generic;fsListExtensionsReply extensions;fsGetResolutionReply getres;};
struct _121BB16CF18BA8DCF6DED8D25AA283B5 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;};
struct _12C70FB380D888247B65F57E99B647A7 {CARD32 encoding;CARD16 name_size;CARD16 width;CARD16 height;xvRational rate;CARD16 pad;};
struct _14A823895445B846828F3D4F9D47C3C9 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 surface_id;CARD32 context_id;};
struct _176B59BEDA9B70C3FEBB155A23358FC4 {CARD8 type;CARD8 rotation;CARD16 sequenceNumber;CARD32 timestamp;CARD32 configTimestamp;CARD32 root;CARD32 window;CARD16 sizeID;CARD16 subpixelOrder;CARD16 widthInPixels;CARD16 heightInPixels;CARD16 widthInMillimeters;CARD16 heightInMillimeters;};
struct _1ACEBBD1BA76D1519A3D809460AEA55C {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _1B380CA5B169C2B25F5DE0AF08CB7E59 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _1C8B88A4B2A3D81E79624372BB131558 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 bitmap;};
struct _1E4927A029C92C0FD595CCC76CE8B139 {CARD8 header;CARD8 pad1;CARD16 pad2;CARD32 delay_time;};
struct _1EA155DB59F5BD48931EE1812AEA4515 {int type;unsigned int serial;int send_event;Display *display;Window window;Colormap colormap;int c_new;int state;};
struct _1F0742A31307BC27E4EE3AB33F15E494 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 window;CARD32 eventMask;};
struct _1F1AC3FACFBF0931A43D0CD999C4D927 {CARD8 reqType;CARD8 depth;CARD16 length;CARD32 pid;CARD32 drawable;CARD16 width;CARD16 height;};
struct _1FE64A7A0C6AD5F0405EA84ACD580761 {Widget widget;XtPointer radio_data;RadioGroup *radio_group;XtPointer pad[4];};
struct _221FB40353091864D31474CD79EAAEF6 {CARD8 reqType;CARD8 XTestReqType;CARD16 length;CARD32 ack;CARD8 action_list[64];};
struct _24F12A37FE1D1AEA7948B3C7A0452456 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;CARD32 mask;};
struct _27AC02CFF97A742F93959B98FA171589 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;BYTE map[32];};
struct _28432349E9E6DB3D22D342B43F161279 {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 window;};
struct _286A111ACEDB435E271A47289B65D34E {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 owner;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _292923DDD4ED46EE83D974C820DC3932 {CARD8 reqType;BYTE pad;CARD16 length;CARD16 maxNames;CARD16 nbytes;};
struct _29C593C589279C3E7D511580F3E78129 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 first_valuator;CARD8 num_valuators;BYTE pad1;};
struct _2A4C46EAAE865C05377B30846399D3D1 {Elf32_Lword m_value;Elf32_Word m_info;Elf32_Word m_poffset;Elf32_Half m_repeat;Elf32_Half m_stride;};
struct _2A5F331BE8D13DBE7F0EFE2DE0745FC4 {CARD8 type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 authId;CARD16 dataLength;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _2AC87F894EE3258143DDE890FCFACB0D {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 glyphset;};
struct _2B0C7BC237EA785081DC8BB3BF49058B {CARD8 type;CARD8 detail;CARD16 sequenceNumber;CARD32 length;};
struct _2C303F742F1AA0AC713FA8EB1EC01C89 {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 cmap;CARD32 pixel;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad;};
struct _2CBA644A081B49363F2046758E32CF0D {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 damage;};
struct _2E22270806C47E05D9B4938893A6CA7A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPixels;CARD16 nMasks;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _2E55BACA418C7D9DC01173D7FC9AB491 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD16 vid_w;CARD16 vid_h;CARD16 drw_w;CARD16 drw_h;CARD8 motion;CARD8 pad1;CARD16 pad2;};
struct _2E67F07AE07052B8E2E5530980B63AB8 {CARD8 type;CARD8 subtype;CARD16 sequenceNumber;CARD32 window;CARD32 cursorSerial;CARD32 timestamp;CARD32 name;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _2E772061F36030946C15A90398CEA89B {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 buffer;};
struct _2E963936DF2C8EEC00CED466180278DB {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 num_clients;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _31724D647FFD3CAE2535F1783448B15A {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source1;CARD32 source2;CARD32 destination;};
struct _32453B3EC12C1083BBBEA47A258ADABA {CARD8 reqType;BYTE pad;CARD16 length;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _32814486483B74398EA3D6D6C36E06C2 {BYTE type;BYTE data1;CARD16 sequenceNumber;CARD32 length;};
struct _32EEA813D9DAD40A14F6989D3C5227A8 {BYTE type;BYTE unused;CARD16 sequenceNumber;CARD32 buffer;CARD32 timeStamp;CARD32 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;CARD32 unused6;};
struct _3369594E17BD6DC3517892D04DD0216E {CARD8 reqType;CARD8 XTestReqType;CARD16 length;CARD32 mode;};
struct _33E0BD21BC9E25CB376AFEED9A297D0A {BYTE type;BYTE data1;CARD16 sequenceNumber;CARD32 length;CARD32 data00;CARD32 data01;CARD32 data02;CARD32 data03;CARD32 data04;CARD32 data05;};
struct _345FECB84F456AF148A04283FEB93B5B {CARD8 reqType;CARD8 data;CARD16 zero;CARD32 length;};
struct _36DE37CB51FE5E11DEB44C8315B704E8 {BYTE type;CARD8 deltaTime;INT8 deltaX;INT8 deltaY;};
struct _37A9DB4B311662424B6FA129E06762F1 {CARD8 reqType;CARD8 button;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD16 pad;};
struct _38BC431CF83E096863532D796A6E7F77 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 ndevices;CARD8 pad1;CARD8 pad2;CARD8 pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _395B269B2EB9353EDAC9E4036758953F {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 displayNameLength;CARD32 physicalScreen;CARD32 valueMask;};
struct _3B00234C5998E2ECB70FFF97A8C8B026 {CARD8 depth;CARD8 pad1;CARD16 nVisuals;CARD32 pad2;};
struct _3B80496DCDE561EAC81E803683D00588 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 authIndex;CARD8 unused1;CARD32 length;CARD16 authDataLength;CARD8 unused2[6];};
struct _3C4C38FC10522588E30AD31A846C8E7D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nColors;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _3C663E68C00512772EEEF9594AC2C00F {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 window;};
struct _3DC7B7400B12314EE6EFE34533277AB7 {u_char vers;u_char type;u_char answer;u_char pad;u_int32_t id_num;struct osockaddr addr;};
struct _3E53CB2ED1FED691C94CE793AD197BA2 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 cid;CARD32 src;CARD16 x;CARD16 y;};
struct _403017519C186A112CAA8988372FD914 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num_formats;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _408ECFFBDBCCAB2F4BE7BF225F1A7284 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 id;CARD16 width;CARD16 height;};
struct _425D596FFB295BDC9ECE8B5455A7138C {BYTE type;BYTE setOfRotations;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 timestamp;CARD32 configTimestamp;CARD16 nSizes;CARD16 sizeID;CARD16 rotation;CARD16 rate;CARD16 nrateEnts;CARD16 pad;};
struct _431023746282E83C34446CE1DCC859AA {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD16 actual_width;CARD16 actual_height;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _4361408BED2235647FC2AC23AD3C77FE {CARD8 type;CARD8 detail;CARD16 sequenceNumber;CARD32 idx;CARD8 data[24];};
struct _44921DDD4632BD4A3848A6F76E5AB5A7 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 major;CARD32 minor;CARD32 patchLevel;CARD32 nameLen;CARD32 busIDLen;CARD32 isLocal;};
struct _44989FB912D962B2DEA21D74F6F43DAE {BYTE byteOrder;CARD8 num_auths;CARD16 major_version;CARD16 minor_version;CARD16 auth_len;};
struct _44DBA8761062EA5D0E0445C058A5F0FB {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPixels;CARD16 pad2;CARD32 redMask;CARD32 greenMask;CARD32 blueMask;CARD32 pad3;CARD32 pad4;};
struct _4664B325D7B1C568276997F8FB024EC2 {Elf64_Addr r_offset;Elf64_Xword r_info;Elf64_Sxword r_addend;};
struct _4788A0C65CEF1424AE2DE816674E1913 {Elf32_Word p_type;Elf32_Off p_offset;Elf32_Addr p_vaddr;Elf32_Addr p_paddr;Elf32_Word p_filesz;Elf32_Word p_memsz;Elf32_Word p_flags;Elf32_Word p_align;};
struct _48A6A373861130075F8524D5C353FEE6 {CARD32 pixel;CARD16 red;CARD16 green;CARD16 blue;CARD8 flags;CARD8 pad;};
struct _49A9C69F1FAAE36175A766361397A248 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 drawable;CARD32 timestamp;CARD32 configTimestamp;CARD16 sizeID;CARD16 rotation;CARD16 rate;CARD16 pad;};
struct _4A5D5D546E7D786034D6559D1E5FBE4A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 majorVersion;CARD32 minorVersion;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _4E7073A36C65C782742204589C7C453B {CARD8 c_class;CARD8 id;CARD16 length;INT32 int_to_display;};
struct _50E42323027751282F1104957020037E {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 cmap;};
struct _528C256D64E70EF258C44321FAFFDA35 {CARD32 visualID;CARD8 c_class;CARD8 bitsPerRGB;CARD16 colormapEntries;CARD32 redMask;CARD32 greenMask;CARD32 blueMask;CARD32 pad;};
struct _53A84E5818A8BF56A6CBC41177A9FFE2 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 nEvents;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _55D1EED960AB10AAD38BEA1E9F59F1B6 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 context_id;};
struct _560A03400C719BC685F99AA3989F50DD {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 window;CARD8 updateAction;CARD8 updateHint;CARD16 unused;};
struct _56876A3CF1ED32735E0999A0D66A4738 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nColormaps;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
union _569A3EBE48D59AD86C5994BFEDBCF6F2 {int type;XDGAButtonEvent xbutton;XDGAKeyEvent xkey;XDGAMotionEvent xmotion;int pad[24];};
struct _56F965C4CB1B37CA1C9344E914749FD8 {CARD8 reqType;CARD8 direction;CARD16 length;CARD32 window;};
struct _57642C20A930BC40CC56BFA51EFC45F8 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nFonts;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _57E6A23A76D16D83EF023BCC9C7B7628 {CARD8 reqType;CARD8 pad;CARD16 length;CARD32 window;CARD16 mask;CARD16 pad2;};
struct _58C3F68DE6E766EC315A68C29D87018F {CARD8 reqType;BYTE nbytes;CARD16 length;};
struct _5EC50BA61A7AE0BB02D4340472A7D806 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;CARD32 destination;};
struct _5ED203E6BF1B06D8F06879722F6B66D4 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _5F1426FF167D9E06CE7F137AEA610D0C {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 success;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _5F5D7BEDB023FB83B7B8ABC973A4716F {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 width;CARD32 height;CARD32 format;CARD32 type;};
struct _60FD28E41E68D30D206D9EC072DAC7C8 {CARD8 reqType;CARD8 revertTo;CARD16 length;CARD32 focus;CARD32 time;};
struct _612EFEAF23CFF8A46AC5C5A26952ECB6 {int type;unsigned int serial;int send_event;Display *display;Drawable drawable;int major_code;int minor_code;ShmSeg shmseg;unsigned int offset;};
struct _613E1A502E66CA56B68C37497F252C25 {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 imageHeight;CARD32 imageDepth;CARD32 skipRows;CARD32 skipImages;CARD32 skipVolumes;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 internalformat;CARD32 width;CARD32 height;CARD32 depth;CARD32 size4d;CARD32 border;CARD32 format;CARD32 type;CARD32 nullimage;};
struct _625B72EC204AD184FA367A67F4C8645C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;};
struct _67223C7576264C1E3F5454254FA2FCB7 {CARD8 c_class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;INT16 num;INT16 denom;INT16 thresh;};
struct _6999C5F45A7509ACAEE4435BC7D6BE11 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 authLen;CARD32 length;};
struct _6B1E97362D63C40B98094F056DF5AEF5 {Elf32_Word st_name;Elf32_Addr st_value;Elf32_Word st_size;unsigned char st_info;unsigned char st_other;Elf32_Section st_shndx;};
struct _6BC30673BAC263332B5478E8764DF6F2 {void *d_buf;Elf_Type d_type;size_t d_size;off_t d_off;size_t d_align;unsigned int d_version;};
struct _6C8DA88AE0F795AA91A7651F5464995D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 firstKeyCode;CARD8 count;BYTE pad1;};
struct _6EB75DCF57D6784EE27228E47E167564 {BYTE type;BYTE lbxType;INT8 deltaX;INT8 deltaY;CARD16 deltaTime;CARD16 deltaSequence;};
struct _6ECE5F7C46F37A2EF909042FBC6F3E21 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;};
struct _70AE50C60636BA34AE17DCBE089831D2 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD16 server_major;CARD16 server_minor;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _71FB89AF527DBE05A40AF86E9AEEBBEA {jas_iccuint8_t numinchans;jas_iccuint8_t numoutchans;jas_iccsint32_t e[3][3];jas_iccuint8_t clutlen;jas_iccuint8_t *clut;jas_iccuint16_t numintabents;jas_iccuint8_t **intabs;jas_iccuint8_t *intabsbuf;jas_iccuint16_t numouttabents;jas_iccuint8_t **outtabs;jas_iccuint8_t *outtabsbuf;};
struct _72F0243C2EB87E20847F7DC0E66AC2E3 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 deviceId;};
struct _730B0A961A25B34AF2CAA3D5B8639BBB {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 buffer;CARD32 valueMask;};
struct _73B4058B96DB787648F70BEB3765CE40 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 pixel;CARD16 exactRed;CARD16 exactGreen;CARD16 exactBlue;CARD16 screenRed;CARD16 screenGreen;CARD16 screenBlue;CARD32 pad2;CARD32 pad3;};
struct _740C46A196F463FF63DE6C8E1A8E1740 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 context_id;CARD32 port;CARD32 surface_type_id;CARD16 width;CARD16 height;CARD32 flags;};
struct _74E95F720A863C1E402D38672975CCC6 {Elf32_Word __p_type;Elf32_Off p_offset;Elf32_Addr p_vaddr;Elf32_Addr p_paddr;Elf32_Word p_filesz;Elf32_Word p_memsz;Elf32_Word p_flags;Elf32_Word p_align;};
struct _75B48D098FE9EFE9C298E47B5B8F0BEC {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;};
struct _7801A91C37AF2AAC45BD7DD78FEE34EA {BYTE type;BYTE result;CARD16 sequenceNumber;CARD32 length;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _791AF81D366397FAE28AFC7E5E3FF4B5 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;CARD8 elementHeader;CARD8 pad;CARD16 pad0;CARD32 nClients;CARD32 nRanges;};
struct _79D3745B39F9E71262BFBA7985E1C7DE {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 exactRed;CARD16 exactGreen;CARD16 exactBlue;CARD16 screenRed;CARD16 screenGreen;CARD16 screenBlue;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _79F2479F433F63099A0390C39EAA789F {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num_attributes;CARD32 text_size;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _7A455DB3BD331D79AF16B3231F86E0C5 {CARD8 reqType;BOOL onlyIfExists;CARD16 length;CARD16 nbytes;CARD16 pad;};
struct _7ADB213CE3A416951231E877AA0F0D4C {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 imageHeight;CARD32 imageDepth;CARD32 skipRows;CARD32 skipImages;CARD32 skipVolumes;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 zoffset;CARD32 woffset;CARD32 width;CARD32 height;CARD32 depth;CARD32 size4d;CARD32 format;CARD32 type;CARD32 nullImage;};
struct _7BC974A8E90EFB1AB4A63682D9BB99C5 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num_planes;CARD32 data_size;CARD16 width;CARD16 height;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _7C0193CACD5E2992F63533D0F1598B1A {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _7CE69C85D0575A23F013545F3194CABE {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 region;CARD32 window;};
struct _7D1B644A0EEA2B09DD88F0E6B7E788D2 {XtAddressMode address_mode;XtPointer address_id;Cardinal size;};
struct _7E3EB1143DB1648EACC9B112CB231A1D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numIndexValues;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _7E7BC6786790AB56FAE456C8962F7E9D {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 format;};
struct _7E8BAC4262F9B7E47F22B721CB72642D {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 port;CARD32 surface_type_id;};
struct _7FBA96F229FB301DA1D20C97214BF251 {Display *dpy;Atom incr_atom;Atom indirect_atom;Atom timestamp_atom;int propCount;SelectionProp list;};
struct _7FFBF4E81BEBC201DEAF468EBD0F9AD5 {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;};
struct _80BF1CA6AF87AF0DC64498AC611B3C23 {CARD8 valid[4];CARD8 data[4];ReqFlags req;EventFlags event;};
struct _80FA3E9E2CB8CB94E88F4B4B7A4726B2 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 glyphset;CARD32 nglyphs;};
struct _819D62649EAF67B78691543FCA1EE6A8 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 attribute;};
struct _8215DDD75066012239D919FF6D1C96FC {CARD8 reqType;BYTE num_catalogues;CARD16 length;};
struct _8222826D686B50CB8E41460EE2275F07 {BYTE type;BYTE pad;CARD16 sequenceNumber;CARD16 event_type;CARD16 draw_type;CARD32 drawable;CARD32 buffer_mask;CARD16 aux_buffer;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD16 count;CARD32 unused2;};
struct _8350987D17B2947444B2D568F36850A0 {SANE_Frame format;SANE_Bool last_frame;SANE_Int bytes_per_line;SANE_Int pixels_per_line;SANE_Int lines;SANE_Int depth;};
struct _83DC73F186BDA0868BCE8C2AD62B1A32 {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 damage;CARD32 repair;CARD32 parts;};
struct _88C1685F053777CC7A3B1D0ED0ED52E3 {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 drawable;};
struct _88CB499CEF7C95AB64991FDC4A8C267A {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 keySymsPerKeyCode;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _895A6AA0EC03D09B638DC82C89B5E3C4 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 displayNameLength;CARD32 valueMask;};
struct _8973D72E68A3D7427BDE924AB847E810 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _897E4B831DB07A8CD8CF80172B9B47E8 {jas_icchdr_t hdr;jas_icctagtab_t tagtab;jas_iccattrtab_t *attrtab;};
struct _89ACFCE72F27CF3E8997F0C88CBC1FEF {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 window;CARD16 enable;CARD16 pad2;};
struct _89C19CA17CD4EE2490EC1EBDB53AA079 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 drawable;};
struct _8AC915922B7872008F9FA0F659707AB7 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 size_return;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _8B1EAF7AAA57F33F38F96E94C6EE2E44 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nameLength;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _8BD856D0EABB45DC0AE6203B505E4C05 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;CARD16 count;CARD16 pad00;};
struct _8BE617EABEB75C8FAB9CB9A4A240FEE3 {CARD8 reqType;CARD8 ext_opcode;CARD16 length;CARD32 event_mask;};
struct _8C544AC6C871408AE6573DA61B3B8C70 {BYTE type;BYTE status;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _8D276D88AE7A52B5A0CD113CDF9731AA {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 x;CARD16 y;CARD32 flags;};
struct _8D40ACCAC6057C8589735CF1D51B872E {Elf64_Lword m_value;Elf64_Xword m_info;Elf64_Xword m_poffset;Elf64_Half m_repeat;Elf64_Half m_stride;};
struct _8D66564F98126883EE28AC7CFF4C7324 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 errorClass;CARD32 length;CARD8 offendingMinorOpcode;CARD8 severity;CARD16 unused;CARD32 offendingSequenceNum;};
struct _8DAA3FFB6B33F31F5053448038813E4C {Boolean (*layout)(FormWidget, unsigned int, unsigned int, int);XtPointer extension;};
struct _8E1349AD4AC8D9A4F1DC84C54B0BE169 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPaths;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _8E8531482D4582E35E09D5AA05C855BB {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 width;CARD32 height;CARD32 format;CARD32 type;CARD32 nullImage;};
struct _8EB7145310D404E702198108260231E4 {jas_iccuint8_t numinchans;jas_iccuint8_t numoutchans;jas_iccsint32_t e[3][3];jas_iccuint8_t clutlen;jas_iccuint16_t *clut;jas_iccuint16_t numintabents;jas_iccuint16_t **intabs;jas_iccuint16_t *intabsbuf;jas_iccuint16_t numouttabents;jas_iccuint16_t **outtabs;jas_iccuint16_t *outtabsbuf;};
struct _8F38FA1882FD1CDA04507844DB5B7464 {XETrapFlags flags;CARD16 max_pkt_size;CARD8 cmd_key;CARD8 pad[1];};
struct _8FB2953F75CCF01072247179C715B36F {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 start;CARD32 count;CARD32 format;CARD32 type;};
struct _9081086C0126123317B5AEBA108CF51B {CARD8 type;CARD8 subtype;CARD16 sequenceNumber;CARD32 window;CARD32 owner;CARD32 selection;CARD32 timestamp;CARD32 selectionTimestamp;CARD32 pad2;CARD32 pad3;};
struct _90B3239242A1E7B072ABC9D9983310BF {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 this_client_count;CARD16 all_clients_count;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _93B69AC16094E7C5789E83029DFD84BC {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 window;CARD32 valueMask;};
struct _942EBE9ABD97793534DEB0950390C4AB {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 subpicture_id;CARD32 context_id;CARD32 xvimage_id;CARD16 width;CARD16 height;};
struct _94C04A488373DB802AA4CC07AF27941B {CARD8 reqType;INT8 percent;CARD16 length;};
struct _9522E807BA7B29263AAB53074ABFE969 {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 window;CARD8 update;CARD8 pad1;CARD16 pad2;};
struct _96264A6F4C8C04631D278E968D9BF4CE {int type;unsigned int serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;int mode;int detail;int same_screen;int focus;unsigned int state;};
struct _984028CEBAA862490ACFAD72BCDE57E1 {CorePart core;CompositePart composite;ShellPart shell;};
struct _9862706C0A5BB87114D8D1264CC215A3 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 unused;CARD32 length;};
struct _988632284A71C49D1170FC4598DEA165 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 count;CARD16 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _989300C65D48D4487CD63431A5B756B7 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;};
struct _9990F7522FA29648C94CCC0846165B95 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 width;CARD16 height;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _9A02475B75BDC9A6C1FC81F46F9E4217 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;};
struct _9A79A86C67FC8B79D589DEFE9BCD3BC9 {CARD8 reqType;BYTE pad;CARD16 length;CARD8 firstKeyCode;CARD8 count;CARD16 pad1;};
struct _9AF668561A3C9CA6386E91513092AD00 {int type;unsigned int serial;int send_event;Display *display;Window window;Time time;int kind;int arg;};
struct _9B4395DE66E8574EC0897BBFC5E468E1 {CARD8 family;BYTE pad;CARD16 length;};
struct _9B9FAE43572AF8916E11706D7ECE195D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 numAliases;CARD32 numFilters;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _9D0FB7664D5CF4633C4A9E9917855E92 {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 internalformat;CARD32 width;CARD32 format;CARD32 type;};
struct _9DF042AED270B6910968D1A2BC70046F {int flags;int input;int initial_state;Pixmap icon_pixmap;Window icon_window;int icon_x;int icon_y;Pixmap icon_mask;XID window_group;};
struct _9DF5225FB79C7EC3237B4B73EEC9C169 {CARD8 reqType;CARD8 key;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD16 pad;};
struct _9E1D181561E0D2ACA87E09ABA7C14355 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;CARD32 destination;CARD16 left;CARD16 right;CARD16 top;CARD16 bottom;};
struct _9F8356FA3F6B7BB65CCFE589AF8F3C28 {CARD8 len;CARD8 pad1;CARD16 pad2;INT16 deltax;INT16 deltay;};
struct _A0014DEEDBC3166AD27E11A70E9D3D79 {jas_image_coord_t tlx_;jas_image_coord_t tly_;jas_image_coord_t hstep_;jas_image_coord_t vstep_;jas_image_coord_t width_;jas_image_coord_t height_;int prec_;int sgnd_;jas_stream_t *stream_;int cps_;jas_image_cmpttype_t type_;};
struct _A0B32823B19A2A6438953816D84B0843 {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 imageHeight;CARD32 imageDepth;CARD32 skipRows;CARD32 skipImages;CARD32 skipVolumes;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 zoffset;CARD32 woffset;CARD32 width;CARD32 height;CARD32 depth;CARD32 size4d;CARD32 format;CARD32 type;CARD32 nullImage;};
struct _A112317F86DCB2DDC9FE57A6FC58C010 {int type;unsigned int serial;int send_event;Display *display;Window window;Time time;int kind;int arg;int x;int y;int w;int h;};
struct _A1A32FB2C00492E90944DE52B5668962 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 major;CARD32 minor;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _A42D6322032E0C7A7A9C932B10DA502C {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 screenCount;CARD32 maskCount;};
struct _A545D31055C82AF5215FB86F909CA367 {CARD8 reqType;BYTE num_resolutions;CARD16 length;};
struct _A6F99021C670370B88B165D4DC414CDD {int type;unsigned int serial;int send_event;Display *display;Window window;Window root;int state;int kind;int forced;Time time;};
struct _A868A57034B7192D5EB80526E63380DD {XtCallbackList callbacks;Boolean international;XtPointer pad[4];};
struct _A94EB43F2838EBEBCA936AD6F7EBA6B5 {RECORD_RANGE8 coreRequests;RECORD_RANGE8 coreReplies;RECORD_EXTRANGE extRequests;RECORD_EXTRANGE extReplies;RECORD_RANGE8 deliveredEvents;RECORD_RANGE8 deviceEvents;RECORD_RANGE8 errors;BOOL clientStarted;BOOL clientDied;};
struct _A9B1BAFFCE9059101A2CA55F4DE425B3 {CARD8 c_class;CARD8 id;CARD16 length;CARD32 led_mask;CARD32 led_values;};
struct _AAECD496E21460385AB9540869BF9C78 {Elf32_Addr r_offset;Elf32_Word r_info;Elf32_Sword r_addend;};
struct _AB98B12C01F884E8BC2DC3D07B35D622 {CARD8 reqType;CARD8 randrReqType;CARD16 length;CARD32 drawable;CARD32 timestamp;CARD32 configTimestamp;CARD16 sizeID;CARD16 rotation;};
struct _AC79B0E9D40EF6B7A4C8BE07CA2286DC {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t pad[7];uint32_t full_sequence;};
struct _AD58CDA99C93F34C31A743157D5C3E5C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 xaxis;CARD8 yaxis;CARD8 deviceid;BYTE pad1;};
struct _AF27679C824E3E5901AA7DC2B9114169 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 atom;CARD16 nbytes;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _B025004886C7FA591A1478EDE7E7D2F6 {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 width;CARD32 height;CARD32 format;CARD32 type;};
struct _B09B64BCB86C923CE64AD6544D183118 {CARD8 reqType;CARD8 xtReqType;CARD16 length;CARD32 window;CARD32 cursor;};
struct _B0A4657A0F832627789EEFA30E2C3FE8 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 port;};
struct _B16FC8566897364FB8F68A61B8D500EB {CARD8 type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _B1BFEFE2106F3BB5718738D899DB0721 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;CARD32 drawable;CARD32 format;CARD32 mask;};
struct _B269B0A5851D241ECE7A73512E496A13 {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _B2D1347A7314B3F7BD8A6C26E40DE0B3 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 keys[28];};
struct _B2D730F73A56FF96C6A7A740CAA96BFE {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 gc;};
struct _B366CC5B56440B0B1B4971EDF28ED7EF {CARD8 reqType;CARD8 damageReqType;CARD16 length;CARD32 damage;CARD32 drawable;CARD8 level;CARD8 pad1;CARD16 pad2;};
struct _B3BD77590CC72559D1303DD07BD38410 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 valueMask;};
struct _B4C695B0250A38B82AFFE65B8304A51A {short __flags;pid_t __pgrp;sigset_t __sd;sigset_t __ss;struct sched_param __sp;int __policy;int __pad[16];};
struct _B4E11D905D4614A9FACC9B78D32FE1E4 {int type;unsigned int serial;int send_event;Display *display;Window root;int state;int kind;int forced;Time time;};
struct _B4F2C86EC2AFA3B90E8AE0EA0F71367B {CARD8 reqType;BYTE pad;CARD16 length;};
struct _B700DEC12E3C3D556A5FC194447E1A6E {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 gsid;CARD32 format;};
struct _B88A4CA2F1F645428AB97EBD99B32A47 {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD32 pad;};
struct _BA7B5543ABAE7B9E6314E3F267492402 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;CARD16 nbytes;CARD16 pad;};
struct _BAE4AA77CC43BF06F4D3ADF31CFD29F5 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 cid;};
struct _BCAE7384F079FDFA9DD5F4EFBAB29817 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused1[2];CARD32 length;CARD16 authDataLength;CARD8 unused2[6];};
struct _BCDE0020825236A8F8A72B60AFA7374C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 control;CARD8 deviceid;BYTE pad0;};
struct _BD0CD7113069CF1296E061F976B1B743 {CARD8 reqType;CARD8 data;CARD16 length;CARD32 maxNames;CARD16 nbytes;CARD16 pad2;};
struct _BD577CFD808EB4E77A4E3752FBFBD993 {XSyncTrigger trigger;XSyncValue delta;int events;XSyncAlarmState state;};
struct _BD6B6A249F1B6C2CBC1F20B0596A95AC {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 bytes;CARD32 bytes_overflow;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _BDA8B21BBF344B8E23C198E46F24428F {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 physicalScreen;};
struct _BEDEF4614EC85AEAB08F01A1475BB3BD {Colormap colormap;unsigned int red_max;unsigned int red_mult;unsigned int green_max;unsigned int green_mult;unsigned int blue_max;unsigned int blue_mult;unsigned int base_pixel;VisualID visualid;XID killid;};
struct _BF2EA9C081140064A68778B10C033DD0 {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 components;CARD32 width;CARD32 height;CARD32 border;CARD32 format;CARD32 type;};
struct _C0A0DF669A9A28D262D6289CF39399F2 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 picture;};
struct _C16308A46254792F555119C61B977CA2 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 control;CARD8 deviceid;BYTE pad2;};
struct _C201FB0F2222C07B40D490F1CBB06D58 {BYTE type;BYTE ScreenCount;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _C260757490C306CA273BB590CB913883 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 surface_id;};
struct _C277CB81CBAA95C145BFA0CE4951774F {CARD32 id;CARD8 type;CARD8 byte_order;CARD16 pad1;CARD8 guid[16];CARD8 bpp;CARD8 num_planes;CARD16 pad2;CARD8 depth;CARD8 pad3;CARD16 pad4;CARD32 red_mask;CARD32 green_mask;CARD32 blue_mask;CARD8 format;CARD8 pad5;CARD16 pad6;CARD32 y_sample_bits;CARD32 u_sample_bits;CARD32 v_sample_bits;CARD32 horz_y_period;CARD32 horz_u_period;CARD32 horz_v_period;CARD32 vert_y_period;CARD32 vert_u_period;CARD32 vert_v_period;CARD8 comp_order[32];CARD8 scanline_order;CARD8 pad7;CARD16 pad8;CARD32 pad9;CARD32 pad10;};
struct _C3DFAA9936722914B9C7944393FC310D {int type;unsigned int serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int button;int same_screen;};
struct _C40F7F4DD1C7C26B2F1D3F03E611B28C {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 internalformat;CARD32 width;CARD32 height;CARD32 format;CARD32 type;};
struct _C61370466789CEEC8D7677AF1FE7B66E {Pixmap background_pixmap;unsigned int background_pixel;Pixmap border_pixmap;unsigned int border_pixel;int bit_gravity;int win_gravity;int backing_store;unsigned int backing_planes;unsigned int backing_pixel;int save_under;int event_mask;int do_not_propagate_mask;int override_redirect;Colormap colormap;Cursor cursor;};
struct _C65DFB72B3FBEEE777E9E71274DF712D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nProperties;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _C6945E03756C0EFF0E3D4BF179417A01 {XETrapRepHdr hdr;XETrapGetVersRep data;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _C785CF6C4EEFEB89ECBC9FAC0351909D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 map_length;BYTE pad1;BYTE pad2;};
struct _C78656F81DC45526E09FF6CEF1B798FB {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 internalformat;CARD32 width;CARD32 height;CARD32 format;CARD32 type;};
struct _CC986080033DF028379B0F24745BC29A {PictFormat id;int type;int depth;XRenderDirectFormat dirent;Colormap colormap;};
struct _CE845F89F9878C873199BB4116C12DE5 {Elf32_Xword m_value;Elf32_Word m_info;Elf32_Word m_poffset;Elf32_Half m_repeat;Elf32_Half m_stride;};
struct _D0A230E2822E6F114388A4393E99A918 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 numKeyPerModifier;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _D0F732F65C44B5672B29FFE38726918A {CARD32 base_id;CARD16 name_size;CARD16 num_ports;CARD16 num_formats;CARD8 type;CARD8 pad;};
struct _D1CC089C043B8A5C6F39977960C72D3D {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 num_types;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _D253512181A5FC719D07097CFD19CBCF {int type;unsigned int serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int keycode;int same_screen;};
struct _D293AA008B167A5482334DF4B9C04D8D {CARD8 c_class;CARD8 id;CARD16 length;CARD8 percent;BYTE pad1;BYTE pad2;BYTE pad3;CARD16 pitch;CARD16 duration;};
struct _D414AB5C490C563DD84DD380518CE003 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 cursor;CARD16 nbytes;CARD16 pad;};
struct _D467916C3587874006E0A38FD04B2C07 {BYTE type;BYTE state;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _D4E78A805D3B4AC5F724CECE1911262F {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 window;};
struct _D60B59C14E4F896E4A7591EB7765B14B {CARD8 success;BYTE lengthReason;CARD16 majorVersion;CARD16 minorVersion;CARD16 length;};
struct _D769135999DFEE6143DE1D9CD80B3AD5 {Widget old;Widget req;ArgList args;Cardinal num_args;};
struct _D7F0CB1571AAC0714CF3A2A9DC0827E7 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 following;CARD32 nFonts;};
struct _D91C2DCC69F66A043F2E243F7B809339 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 subpicture_id;};
struct _DAC170E456357DF80928C89F26405355 {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 start;CARD32 count;CARD32 format;CARD32 type;};
struct _DB14CFE2E08779D243D914BBAB2B5230 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _DC1F4185A69167B259A83E436A7DD097 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 window;};
struct _DDAC1D07D44FFC2E5C65864F60CCE1DF {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 parent;CARD16 nChildren;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _DE5295A524AE5E785ED4C88469459F67 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;};
struct _DEEBBF9E678AFA2413B9A4D363D90472 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 time;};
struct _DF2660A74F633C8EB56A7225DE8125F3 {CARD8 reqType;CARD8 xvmcReqType;CARD16 length;CARD32 port;CARD32 shmKey;CARD32 magic;};
struct _E1B611A0324DBC10371E6C5C458A41ED {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _E286A6BB4A6F2654A491CFFF4E402FC9 {CARD8 reqType;CARD8 dmxReqType;CARD16 length;CARD32 physicalId;};
struct _E2CAB82FD115FB5CD111E5D354459422 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 overlayWin;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _E38AF46511CCA77388BA66BB0D6EA6C9 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;CARD16 nbytes;CARD16 pad;};
struct _E52A8F32C8A3F3878A2B0A4A62B69464 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 gsid;CARD32 existing;};
struct _E6A7EC26390A1436F354D6A4637276C8 {CARD8 reqType;CARD8 c_class;CARD16 length;CARD32 drawable;CARD16 width;CARD16 height;};
struct _E6CAD5F58B0D02B91FD47A036636D1EC {CARD8 reqType;CARD8 compositeReqType;CARD16 length;CARD32 window;CARD32 pixmap;};
struct _E6E23F4F2E9628A3BBE27C1C5CFEEEE2 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;CARD32 window;CARD8 kind;CARD8 pad1;CARD16 pad2;};
struct _E997A7E9262D40FC83356A066D96F704 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;CARD32 nClients;};
struct _E9D9387C3B11BC3046AC632B5B502F37 {int type;Display *display;Window window;CARD8 actions[28];};
struct _EC67746570F1353AA5EB836736C244CA {jas_iccuint32_t asclen;char *ascdata;jas_iccuint32_t uclangcode;jas_iccuint32_t uclen;unsigned char *ucdata;jas_iccuint16_t sccode;jas_iccuint8_t maclen;unsigned char macdata[69];};
struct _EDCAE6FAA77F2844B16FB7E0B618EDD7 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 mode;BYTE pad1;BYTE pad2;};
struct _EE1B24C0A7B1D7D53B85F68543B9F050 {char *name;unsigned int flags;int (*getopts)(eff_t effp, int argc, char **argv);int (*start)(eff_t effp);int (*flow)(eff_t effp, st_sample_t *ibuf, st_sample_t *obuf, st_size_t *isamp, st_size_t *osamp);int (*drain)(eff_t effp, st_sample_t *obuf, st_size_t *osamp);int (*stop)(eff_t effp);};
struct _EEFF94D31B1553C87DFF230889E3822E {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 width;CARD32 height;CARD32 format;CARD32 type;CARD32 nullImage;};
struct _EF14843253DB275F4E3937D8BFD0A759 {int type;unsigned int serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;char is_hint;int same_screen;};
struct _F0B6F56018B35AE6D958AA393C56DA44 {CARD8 coreRequestsFirst;CARD8 coreRequestsLast;CARD8 coreRepliesFirst;CARD8 coreRepliesLast;CARD8 extRequestsMajorFirst;CARD8 extRequestsMajorLast;CARD16 extRequestsMinorFirst;CARD16 extRequestsMinorLast;CARD8 extRepliesMajorFirst;CARD8 extRepliesMajorLast;CARD16 extRepliesMinorFirst;CARD16 extRepliesMinorLast;CARD8 deliveredEventsFirst;CARD8 deliveredEventsLast;CARD8 deviceEventsFirst;CARD8 deviceEventsLast;CARD8 errorsFirst;CARD8 errorsLast;BOOL clientStarted;BOOL clientDied;};
struct _F134966C153EAA2FEEB175F7114F713D {CARD8 byte_order;CARD8 depth;CARD16 num;CARD16 bpp;CARD16 name_size;CARD32 vsync_num;CARD32 vsync_den;CARD32 flags;CARD16 image_width;CARD16 image_height;CARD16 pixmap_width;CARD16 pixmap_height;CARD32 bytes_per_scanline;CARD32 red_mask;CARD32 green_mask;CARD32 blue_mask;CARD16 visual_class;CARD16 pad1;CARD16 viewport_width;CARD16 viewport_height;CARD16 viewport_xstep;CARD16 viewport_ystep;CARD16 viewport_xmax;CARD16 viewport_ymax;CARD32 viewport_flags;CARD32 reserved1;CARD32 reserved2;};
struct _F13FDF1465C2A4EBCF0352D5A6933F7D {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 imageHeight;CARD32 imageDepth;CARD32 skipRows;CARD32 skipImages;CARD32 skipVolumes;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 internalformat;CARD32 width;CARD32 height;CARD32 depth;CARD32 size4d;CARD32 border;CARD32 format;CARD32 type;CARD32 nullimage;};
struct _F14124C6CA524F54899508FD11C59AF5 {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t pad[7];uint32_t full_sequence;};
struct _F19CD3A20937CEF33F3E2EF5E2D906EF {CARD32 release;CARD32 ridBase;CARD32 ridMask;CARD32 motionBufferSize;CARD16 nbytesVendor;CARD16 maxRequestSize;CARD8 numRoots;CARD8 numFormats;CARD8 imageByteOrder;CARD8 bitmapBitOrder;CARD8 bitmapScanlineUnit;CARD8 bitmapScanlinePad;CARD8 minKeyCode;CARD8 maxKeyCode;CARD32 pad2;};
struct _F1FFDF0E76C6F940FFACBA8A13B33CEB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 focus;CARD32 time;CARD8 revertTo;CARD8 device;CARD16 pad01;};
struct _F2ECD6480817AB9433FAAAFCD2A3757B {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD16 nbytesAuthProto;CARD16 nbytesAuthData;CARD32 valueMask;};
struct _F3EFAA27463B93CC96181BFE5F29A4C5 {CARD8 reqType;CARD8 mode;CARD16 length;CARD32 time;};
struct _F41DB5A7C32B97CBCEE09CBFE1E8FA57 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 mesglen;CARD16 pad2;CARD32 status;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _F466B234F46A211DC597B6DC6FDB33CA {CARD8 type;CARD8 pad00;CARD16 sequenceNumber;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;CARD32 pad06;CARD32 pad07;CARD32 pad08;};
struct _F4F17E25C7BB477B61B5A580F872EC7D {CARD32 counter;INT32 resolution_hi;CARD32 resolution_lo;CARD16 name_length;};
struct _F5D530A8B9C8144C513F035766B8BD9F {Elf32_Word st_name;Elf32_Addr st_value;Elf32_Word st_size;unsigned char st_info;unsigned char st_other;Elf32_Half st_shndx;};
struct _F7AEAB90CD1FFE3D56BEDD9E988BA465 {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 internalformat;CARD32 width;CARD32 format;CARD32 type;};
struct _F81C4DFCF4FD8DAD229D0D8C30F8406E {CARD8 reqType;CARD8 xtReqType;CARD16 length;BOOL impervious;CARD8 pad0;CARD8 pad1;CARD8 pad2;};
struct _F88DFF0D39F146217256B482FD360ACC {CARD8 reqType;BYTE mode;CARD16 length;};
struct _FA4FE0B2CA883E06053CBA1706060353 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 atom;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _FB619B5CE8E6B82A3D0938CCE57F62CA {CARD8 reqType;BYTE mode;CARD16 length;CARD8 hostFamily;BYTE pad;CARD16 hostLength;};
struct _FC3BB1A81303FA005E7D17D8401F89AB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 feedbackid;CARD8 feedbackclass;INT8 percent;};
struct _FCBFA738B12E671543F3DA36C81F300F {Widget focusKid;XtServerGrabPtr keyList;XtServerGrabPtr ptrList;Widget queryEventDescendant;unsigned int map_handler_added : 1;unsigned int realize_handler_added : 1;unsigned int active_handler_added : 1;unsigned int haveFocus : 1;XtGeneology focalPoint;};
struct _FD9EA5F23BD8EC0F64EDF9068C14C969 {CARD8 depth;CARD8 pad1;CARD16 nPictVisuals;CARD32 pad2;};
struct _FDFBD601B4BD2833D8A740F2A9550A80 {CARD8 reqType;CARD8 data;CARD16 length;CARD32 pad;};
struct _FE74AE40C36D9F9A6F621CCCBCB7D423 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD32 num;CARD32 padl2;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;};
struct _FF9246841A32B78E17B3644398C154C0 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 buttons[28];};
struct _FFD82B8BDC4823D2EC5A0D9DC75F48E0 {CARD8 reqType;CARD8 miscReqType;CARD16 length;CARD32 count;};
typedef void (*PFNGLDRAWRANGEELEMENTARRAYATIPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count);
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, GLvoid *img);
typedef void (*PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
struct xcb_get_selection_owner_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_atom_t selection;};
struct xcb_glx_destroy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;};
struct xcb_glx_destroy_pbuffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_pbuffer_t pbuffer;};
struct xcb_randr_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;};
struct xcb_record_free_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_render_free_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;};
struct xcb_shape_query_extents_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t destination_window;};
struct xcb_xc_misc_get_xid_range_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t start_id;uint32_t count;};
struct xcb_xf86dri_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t dri_major_version;uint16_t dri_minor_version;uint32_t dri_minor_patch;};
struct xcb_xfixes_fetch_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xfixes_union_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source1;xcb_xfixes_region_t source2;xcb_xfixes_region_t destination;};
struct xcb_xv_list_image_formats_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_formats;uint8_t pad1[20];};
struct GLXCreateGLXPixmapWithConfigSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 screen;CARD32 fbconfig;CARD32 pixmap;CARD32 glxpixmap;};
typedef void (*PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (*PFNGLGETINVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean *data);
typedef void (*PFNGLGETINVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint *data);
typedef void (*PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint *params);
typedef void (*PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble *params);
typedef void (*PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef int (*PFNGLXQUERYFRAMETRACKINGMESAPROC)(Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage);
struct xcb_alloc_color_planes_request_t {uint8_t major_opcode;uint8_t contiguous;uint16_t length;xcb_colormap_t cmap;uint16_t colors;uint16_t reds;uint16_t greens;uint16_t blues;};
struct xcb_damage_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_destroy_subwindows_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_get_keyboard_control_reply_t {uint8_t response_type;uint8_t global_auto_repeat;uint16_t sequence;uint32_t length;uint32_t led_mask;uint8_t key_click_percent;uint8_t bell_percent;uint16_t bell_pitch;uint16_t bell_duration;uint8_t pad0[2];uint8_t auto_repeats[32];};
struct xcb_get_keyboard_mapping_reply_t {uint8_t response_type;uint8_t keysyms_per_keycode;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_get_modifier_mapping_reply_t {uint8_t response_type;uint8_t keycodes_per_modifier;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_glx_destroy_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_pixmap_t glx_pixmap;};
struct xcb_glx_get_fb_configs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct xcb_glx_get_pixel_mapuiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_pixel_mapusv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint16_t datum;uint8_t pad2[16];};
struct xcb_query_text_extents_request_t {uint8_t major_opcode;uint8_t odd_length;uint16_t length;xcb_fontable_t font;};
struct xcb_randr_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint16_t enable;uint8_t pad0[2];};
struct xcb_record_get_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;};
struct xcb_record_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_render_free_glyphs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t glyphset;};
struct xcb_render_query_filters_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_aliases;uint32_t num_filters;uint8_t pad1[16];};
struct xcb_render_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_set_modifier_mapping_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_shape_get_rectangles_reply_t {uint8_t response_type;uint8_t ordering;uint16_t sequence;uint32_t length;uint32_t rectangles_len;};
struct xcb_shape_input_selected_reply_t {uint8_t response_type;uint8_t enabled;uint16_t sequence;uint32_t length;};
struct xcb_shape_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t destination_window;uint8_t enable;};
struct xcb_sync_destroy_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t alarm;};
struct xcb_sync_query_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;};
struct xcb_uninstall_colormap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_xc_misc_get_xid_list_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ids_len;uint8_t pad1[20];};
struct xcb_xevie_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t event_mask;};
struct xcb_xfixes_copy_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_xfixes_region_t destination;};
struct xcb_xfixes_hide_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xfixes_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_xfixes_show_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xinerama_get_state_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xv_query_best_size_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;uint16_t vid_w;uint16_t vid_h;uint16_t drw_w;uint16_t drw_h;uint8_t motion;};
struct xcb_xv_query_encodings_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;};
typedef GLboolean (*PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n,  GLuint *textures, GLboolean *residences);
typedef void (*PFNGLCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type,  GLvoid *image);
typedef void (*PFNGLCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,  GLvoid *image);
typedef void (*PFNGLEDGEFLAGPOINTERLISTIBMPROC)(GLint stride,  GLboolean **pointer, GLint ptrstride);
typedef void (*PFNGLGETLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, GLint *params);
typedef void (*PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64EXT *params);
typedef void (*PFNGLMULTIMODEDRAWARRAYSIBMPROC)( GLenum *mode,  GLint *first,  GLsizei *count, GLsizei primcount, GLint modestride);
typedef void (*PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLuint count,  GLdouble *v);
typedef void (*PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLuint count,  GLfloat *v);
typedef void (*PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
struct _XF86OldVidModeValidateModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _XcupGetReservedColormapEntries {CARD8 reqType;CARD8 xcupReqType;CARD16 length;CARD32 screen;};
struct xcb_alloc_color_cells_request_t {uint8_t major_opcode;uint8_t contiguous;uint16_t length;xcb_colormap_t cmap;uint16_t colors;uint16_t planes;};
struct xcb_alloc_named_color_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint16_t name_len;};
struct xcb_big_requests_enable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t maximum_request_length;};
struct xcb_get_pointer_control_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t acceleration_numerator;uint16_t acceleration_denominator;uint16_t threshold;};
struct xcb_get_pointer_mapping_reply_t {uint8_t response_type;uint8_t map_len;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_glx_delete_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_window_t glxwindow;};
struct xcb_glx_gen_queries_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_query_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;};
struct xcb_glx_query_version_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;};
struct xcb_randr_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_set_pointer_mapping_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_shape_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;};
struct xcb_sync_get_priority_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t id;};
struct xcb_test_compare_cursor_reply_t {uint8_t response_type;uint8_t same;uint16_t sequence;uint32_t length;};
struct xcb_xc_misc_get_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;};
struct xcb_xevie_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;uint8_t pad1[20];};
struct xcb_xfixes_set_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;};
struct xcb_xv_query_adaptors_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;};
struct xcb_xvmc_create_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width_actual;uint16_t height_actual;uint32_t flags_return;uint8_t pad1[20];};
struct xcb_xvmc_create_surface_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
typedef GLboolean (*PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n,  GLuint *programs, GLboolean *residences);
typedef void (*PFNGLDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (*PFNGLGETINVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat *data);
typedef void (*PFNGLGETOCCLUSIONQUERYIVNVPROC)(GLuint id, GLenum pname, GLint *params);
typedef void (*PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64EXT *params);
typedef void (*PFNGLGETVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean *data);
typedef void (*PFNGLGETVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint *data);
typedef void (*PFNGLGETVARIANTPOINTERVEXTPROC)(GLuint id, GLenum value, GLvoid **data);
typedef void (*PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n,  GLuint *textures,  GLclampf *priorities);
typedef void (*PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index,  GLdouble *v);
typedef void (*PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index,  GLfloat *v);
typedef void (*PFNGLVARIANTARRAYOBJECTATIPROC)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (*PFNGLVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, GLvoid *pointer);
typedef GLXPbufferSGIX (*PFNGLXCREATEGLXPBUFFERSGIXPROC)(Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list);
struct xcb_alloc_color_planes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t pixels_len;uint8_t pad1[2];uint32_t red_mask;uint32_t green_mask;uint32_t blue_mask;uint8_t pad2[8];};
struct xcb_circulate_window_request_t {uint8_t major_opcode;uint8_t direction;uint16_t length;xcb_window_t window;};
struct xcb_configure_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;uint16_t value_mask;};
struct xcb_glx_get_clip_plane_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_get_fb_configs_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_FB_configs;uint32_t num_properties;uint8_t pad1[16];};
struct xcb_install_colormap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_record_bad_context_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t invalid_record;};
struct xcb_set_screen_saver_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;int16_t timeout;int16_t interval;uint8_t prefer_blanking;uint8_t allow_exposures;};
struct xcb_sync_query_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t alarm;};
struct xcb_unmap_subwindows_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_xevie_select_input_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xinerama_is_active_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t state;};
struct xcb_xv_query_best_size_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t actual_width;uint16_t actual_height;};
struct xcb_xv_query_encodings_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_encodings;uint8_t pad1[22];};
struct xcb_xv_query_extension_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t major;uint16_t minor;};
struct xcb_xvmc_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major;uint32_t minor;};
struct GLXDestroyHyperpipeConfigSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 screen;CARD32 hpId;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
typedef void (*PFNGLCOPYCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLDEFORMATIONMAP3DSGIXPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder,  GLdouble *points);
typedef void (*PFNGLDEFORMATIONMAP3FSGIXPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder,  GLfloat *points);
typedef void (*PFNGLGETOBJECTBUFFERFVATIPROC)(GLuint buffer, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETOBJECTBUFFERIVATIPROC)(GLuint buffer, GLenum pname, GLint *params);
typedef void (*PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble *params);
typedef void (*PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint *params);
typedef void (*PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode,  GLsizei *count, GLenum type,  GLvoid **indices, GLsizei primcount);
typedef void (*PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLSEPARABLEFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,  GLvoid *row,  GLvoid *column);
typedef GLuint (*PFNGLXGETMEMORYOFFSETMESAPROC)(Display *dpy, int scrn,  void *pointer);
struct _FontCacheChangeCacheSettings {CARD8 reqType;CARD8 fontcacheReqType;CARD16 length;CARD32 himark;CARD32 lowmark;CARD32 balance;CARD32 reserve0;CARD32 reserve1;CARD32 reserve2;CARD32 reserve3;};
struct xcb_alloc_color_cells_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t pixels_len;uint16_t masks_len;uint8_t pad1[20];};
struct xcb_alloc_named_color_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t pixel;uint16_t exact_red;uint16_t exact_green;uint16_t exact_blue;uint16_t visual_red;uint16_t visual_green;uint16_t visual_blue;};
struct xcb_change_save_set_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;xcb_window_t window;};
struct xcb_dpms_get_timeouts_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t standby_timeout;uint16_t suspend_timeout;uint16_t off_timeout;};
struct xcb_get_motion_events_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t events_len;uint8_t pad1[20];};
struct xcb_glx_client_info_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t major_version;uint32_t minor_version;uint32_t str_len;};
struct xcb_glx_query_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_attributes;uint8_t pad1[20];uint32_t value_mask;};
struct xcb_glx_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t major_version;uint32_t minor_version;uint8_t pad1[16];};
struct xcb_graphics_exposure_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_drawable_t drawable;uint16_t x;uint16_t y;uint16_t width;uint16_t height;uint16_t minor_opcode;uint16_t count;uint8_t major_opcode;};
struct xcb_list_properties_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_query_best_size_request_t {uint8_t major_opcode;uint8_t _class;uint16_t length;xcb_drawable_t drawable;uint16_t width;uint16_t height;};
struct xcb_res_query_clients_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t num_clients;uint8_t pad1[20];};
struct xcb_res_query_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major;uint16_t server_minor;};
struct xcb_shm_query_version_reply_t {uint8_t response_type;uint8_t shared_pixmaps;uint16_t sequence;uint32_t length;uint16_t major_version;uint16_t minor_version;uint16_t uid;uint16_t gid;uint8_t pixmap_format;};
struct xcb_ungrab_keyboard_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_timestamp_t time;};
struct xcb_visibility_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;uint8_t state;};
struct xcb_xv_query_adaptors_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t num_adaptors;uint8_t pad1[22];};
struct GLXQueryHyperpipeNetworkSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 screen;};
typedef void (*PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type,  GLvoid *image);
typedef void (*PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,  GLvoid *image);
typedef void (*PFNGLELEMENTPOINTERAPPLEPROC)(GLenum type,  GLvoid *pointer);
typedef void (*PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint *params);
typedef void (*PFNGLGETVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat *data);
typedef void (*PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble *params);
typedef void (*PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint *params);
typedef GLboolean (*PFNGLISVARIANTENABLEDEXTPROC)(GLuint id, GLenum cap);
typedef void (*PFNGLLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname,  GLfloat *params);
typedef void (*PFNGLLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname,  GLint *params);
typedef void (*PFNGLNORMALPOINTERVINTELPROC)(GLenum type,  GLvoid **pointer);
typedef void (*PFNGLSETLOCALCONSTANTEXTPROC)(GLuint id, GLenum type,  GLvoid *addr);
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (*PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count,  GLubyte *v);
typedef int (*PFNGLXMAKECURRENTREADSGIPROC)(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
struct _XF86VidModeValidateModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct xcb_circulate_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;uint8_t pad1[4];uint8_t place;};
struct xcb_damage_destroy_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_damage_damage_t damage;};
struct xcb_destroy_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_dpms_get_version_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t server_major_version;uint16_t server_minor_version;};
struct xcb_get_screen_saver_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t timeout;uint16_t interval;uint8_t prefer_blanking;uint8_t allow_exposures;};
struct xcb_glx_gen_textures_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_get_booleanv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint8_t datum;uint8_t pad2[15];};
struct xcb_map_subwindows_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_recolor_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cursor;uint16_t fore_red;uint16_t fore_green;uint16_t fore_blue;uint16_t back_red;uint16_t back_green;uint16_t back_blue;};
struct xcb_test_get_version_reply_t {uint8_t response_type;uint8_t major_version;uint16_t sequence;uint32_t length;uint16_t minor_version;};
struct xcb_ungrab_pointer_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_timestamp_t time;};
struct GLXChangeDrawableAttributes {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 drawable;CARD32 numAttribs;};
struct GLXQueryHyperpipeConfigSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 screen;CARD32 hpId;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct GLXQueryMaxSwapBarriersSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 unused;CARD32 screen;};
typedef void (*PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index,  GLchar *name);
typedef void (*PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (*PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count,  GLboolean *pointer);
typedef void (*PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte *program);
typedef void (*PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
typedef void (*PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint *params);
typedef void (*PFNGLLISTPARAMETERFSGIXPROC)(GLuint list, GLenum pname, GLfloat param);
typedef void (*PFNGLLISTPARAMETERISGIXPROC)(GLuint list, GLenum pname, GLint param);
typedef void (*PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
typedef void (*PFNGLSHARPENTEXFUNCSGISPROC)(GLenum target, GLsizei n,  GLfloat *points);
typedef void (*PFNGLVERTEXARRAYRANGENVPROC)(GLsizei length,  GLvoid *pointer);
typedef void (*PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIBS1HVNVPROC)(GLuint index, GLsizei n,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIBS2HVNVPROC)(GLuint index, GLsizei n,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIBS3HVNVPROC)(GLuint index, GLsizei n,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count,  GLshort *v);
typedef void (*PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count,  GLdouble *v);
typedef void (*PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIBS4HVNVPROC)(GLuint index, GLsizei n,  GLhalfNV *v);
typedef void (*PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count,  GLshort *v);
typedef int64_t (*PFNGLXSWAPBUFFERSMSCOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
struct _ScreenSaverUnsetAttributes {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;};
struct _XResQueryClientPixmapBytes {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD32 xid;};
struct _xkbIndicatorDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 shapeNdx;CARD8 onColorNdx;CARD8 offColorNdx;CARD8 pad1;CARD32 pad2;};
struct xcb_free_colormap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_get_atom_name_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_atom_t atom;};
struct xcb_glx_get_error_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_is_direct_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;};
struct xcb_glx_read_pixels_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_render_mode_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ret_val;uint32_t n;uint32_t new_mode;uint8_t pad1[12];};
struct xcb_list_extensions_reply_t {uint8_t response_type;uint8_t names_len;uint16_t sequence;uint32_t length;uint8_t pad0[24];};
struct xcb_list_properties_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t atoms_len;uint8_t pad1[22];};
struct xcb_query_best_size_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t width;uint16_t height;};
struct xcb_query_extension_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t present;uint8_t major_opcode;uint8_t first_event;uint8_t first_error;};
struct xcb_query_pointer_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_sync_initialize_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t major_version;uint8_t minor_version;};
struct xcb_ungrab_button_request_t {uint8_t major_opcode;uint8_t button;uint16_t length;xcb_window_t grab_window;uint16_t modifiers;uint8_t pad0[2];};
typedef void (*PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLCOPYCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (*PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLDETAILTEXFUNCSGISPROC)(GLenum target, GLsizei n,  GLfloat *points);
typedef void (*PFNGLDRAWMESHARRAYSSUNPROC)(GLenum mode, GLint first, GLsizei count, GLsizei width);
typedef void (*PFNGLELEMENTPOINTERATIPROC)(GLenum type,  GLvoid *pointer);
typedef void (*PFNGLFINISHOBJECTAPPLEPROC)(GLenum object, GLint name);
typedef void (*PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (*PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
typedef void (*PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
typedef void (*PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
typedef void (*PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode,  GLsizei *count, GLenum type,  GLvoid **indices, GLsizei primcount);
typedef void (*PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type,  GLvoid *row,  GLvoid *column);
typedef void (*PFNGLTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLsizei n,  GLfloat *weights);
typedef void (*PFNGLVARIANTPOINTEREXTPROC)(GLuint id, GLenum type, GLuint stride,  GLvoid *addr);
typedef int (*PFNGLXGETSYNCVALUESOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef GLXContext (*PFNGLXIMPORTCONTEXTEXTPROC)(Display *dpy, GLXContextID contextID);
typedef int (*XML_UnknownEncodingHandler)(void *encodingHandlerData,  XML_Char *name, XML_Encoding *info);
struct _AppleWMSetWindowMenuCheck {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 index;};
struct _XF86OldVidModeAddModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;CARD32 after_dotclock;CARD16 after_hdisplay;CARD16 after_hsyncstart;CARD16 after_hsyncend;CARD16 after_htotal;CARD16 after_vdisplay;CARD16 after_vsyncstart;CARD16 after_vsyncend;CARD16 after_vtotal;CARD32 after_flags;};
struct _XF86OldVidModeModModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _xkbGetIndicatorStateReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 state;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct xcb_allow_events_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;xcb_timestamp_t time;};
struct xcb_destroy_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;};
struct xcb_get_geometry_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;};
struct xcb_glx_end_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_get_minmax_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_glx_get_string_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;uint8_t pad2[16];};
struct xcb_lookup_color_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint16_t name_len;};
struct xcb_mapping_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint8_t request;xcb_keycode_t first_keycode;uint8_t count;};
struct xcb_query_colors_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_resize_request_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;uint16_t width;uint16_t height;};
struct xcb_store_colors_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;};
struct xcb_unmap_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_x_print_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_x_print_pcontext_t context;uint8_t cancel;};
struct xcb_xv_image_format_info_t {uint32_t id;uint8_t type;uint8_t byte_order;uint16_t pad1;uint8_t guid[16];uint8_t bpp;uint8_t num_planes;uint16_t pad2;uint8_t depth;uint8_t pad3;uint16_t pad4;uint32_t red_mask;uint32_t green_mask;uint32_t blue_mask;uint8_t format;uint8_t pad5;uint16_t pad6;uint32_t y_sample_bits;uint32_t u_sample_bits;uint32_t v_sample_bits;uint32_t vhorz_y_period;uint32_t vhorz_u_period;uint32_t vhorz_v_period;uint32_t vvert_y_period;uint32_t vvert_u_period;uint32_t vvert_v_period;uint8_t vcomp_order[32];uint8_t vscanline_order;uint8_t vpad7;uint16_t vpad8;uint32_t vpad9;uint32_t vpad10;};
typedef void (*PFNGLCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type,  GLvoid *data);
typedef void (*PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id,  GLfloat *params);
typedef void (*PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
typedef void (*PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (*PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len,  GLvoid *string);
struct _XF86MiscSetGrabKeysState {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;BOOL enable;BOOL pad1;CARD16 pad2;};
struct _XRenderPictureAttributes {int repeat;Picture alpha_map;int alpha_x_origin;int alpha_y_origin;int clip_x_origin;int clip_y_origin;Pixmap clip_mask;int graphics_exposures;int subwindow_mode;int poly_edge;int poly_mode;Atom dither;int component_alpha;};
struct _XResQueryClientResources {CARD8 reqType;CARD8 XResReqType;CARD16 length;CARD32 xid;};
struct xcb_alloc_color_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint16_t red;uint16_t green;uint16_t blue;};
union xcb_client_message_data_t {uint8_t data8[20];uint16_t data16[10];uint32_t data32[5];};
struct xcb_free_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cursor;};
struct xcb_free_pixmap_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_pixmap_t pixmap;};
struct xcb_get_atom_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t name_len;uint8_t pad1[22];};
struct xcb_get_font_path_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t path_len;uint8_t pad1[22];};
struct xcb_glx_gen_lists_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t ret_val;};
struct xcb_glx_is_direct_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t is_direct;uint8_t pad1[23];};
struct xcb_glx_wait_gl_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_grab_keyboard_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_kill_client_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;uint32_t resource;};
struct xcb_xevie_start_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;};
struct GLXGetDrawableAttributes {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 drawable;};
struct GLXQueryExtensionsString {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;};
typedef void (*PFNGLGETHISTOGRAMEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void (*PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef void (*PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat *params);
typedef void (*PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
typedef void (*PFNGLSETINVARIANTEXTPROC)(GLuint id, GLenum type,  GLvoid *addr);
struct _PanoramiXGetScreenCount {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;};
struct _PrintGetImageResolution {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintSetImageResolution {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD16 imageRes;CARD16 pad1;};
struct _WindowsWMReenableUpdate {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 screen;};
struct _XDGACopyTransparentArea {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 srcx;CARD16 srcy;CARD16 width;CARD16 height;CARD16 dstx;CARD16 dsty;CARD32 key;};
struct _xkbGetIndicatorMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 which;CARD32 realIndicators;CARD8 nIndicators;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbIndicatorMapWireDesc {CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 mods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;};
struct _xkbSymInterpretWireDesc {CARD32 sym;CARD8 mods;CARD8 match;CARD8 virtualMod;CARD8 flags;xkbActionWireDesc act;};
struct xcb_close_font_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_font_t font;};
struct xcb_dpms_capable_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t capable;};
struct xcb_glx_finish_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_render_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_wait_x_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_grab_pointer_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;};
struct xcb_lookup_color_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t exact_red;uint16_t exact_green;uint16_t exact_blue;uint16_t visual_red;uint16_t visual_green;uint16_t visual_blue;};
struct xcb_map_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_query_colors_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t colors_len;uint8_t pad1[22];};
struct xcb_query_font_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_fontable_t font;};
struct xcb_query_keymap_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t keys[32];};
struct xcb_query_tree_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;};
struct xcb_set_dashes_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t gc;uint16_t dash_offset;uint16_t dashes_len;};
struct xcb_shm_detach_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shm_seg_t shmseg;};
struct xcb_sync_counter_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_counter;uint16_t minor_opcode;uint8_t major_opcode;};
struct xcb_sync_systemcounter_t {xcb_sync_counter_t counter;xcb_sync_int64_t resolution;uint16_t name_len;};
struct xcb_ungrab_key_request_t {uint8_t major_opcode;uint8_t key;uint16_t length;xcb_window_t grab_window;uint16_t modifiers;};
struct xcb_unmap_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;uint8_t from_configure;};
struct xcb_xv_grab_port_reply_t {uint8_t response_type;uint8_t result;uint16_t sequence;uint32_t length;};
typedef void (*FT_Renderer_GetCBoxFunc)(FT_Renderer renderer, FT_GlyphSlot slot, FT_BBox *cbox);
typedef void (*PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint *params);
typedef int (*PFNGLXGETMSCRATEOMLPROC)(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator);
typedef int (*PFNGLXWAITFORMSCOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef int (*PFNGLXWAITFORSBCOMLPROC)(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);
typedef void (*XtLoseSelectionIncrProc)(Widget, Atom *, XtPointer);
typedef void (*XtSelectionCallbackProc)(Widget, XtPointer, Atom *, Atom *, XtPointer, unsigned int *, int *);
struct _PanoramiXGetScreenSize {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;CARD32 screen;};
struct _PrintGetPageDimensions {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _ScreenSaverSelectInput {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;CARD32 eventMask;};
struct _WindowsWMDisableUpdate {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 screen;};
struct _WindowsWMFrameSetTitle {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 screen;CARD32 window;CARD32 title_length;};
struct _XF86DGAInstallColormap {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad2;CARD32 id;};
struct _XF86RushSetPixelStride {CARD8 reqType;CARD8 rushReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 PixelStride;};
struct _XF86VidModeAddModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;CARD32 after_dotclock;CARD16 after_hdisplay;CARD16 after_hsyncstart;CARD16 after_hsyncend;CARD16 after_htotal;CARD16 after_hskew;CARD16 after_vdisplay;CARD16 after_vsyncstart;CARD16 after_vsyncend;CARD16 after_vtotal;CARD16 pad2;CARD32 after_flags;CARD32 reserved4;CARD32 reserved5;CARD32 reserved6;};
struct _XF86VidModeModModeLine {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD32 screen;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad1;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct _XF86VidModeSetViewPort {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 x;CARD32 y;};
typedef void (*_XawSrcSetSelectionProc)(Widget, XawTextPosition, XawTextPosition, Atom);
struct _xSyncDestroyCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 counter;};
struct _xkbListComponentsReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 nKeymaps;CARD16 nKeycodes;CARD16 nTypes;CARD16 nCompatMaps;CARD16 nSymbols;CARD16 nGeometries;CARD16 extra;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbPerClientFlagsReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 supported;CARD32 value;CARD32 autoCtrls;CARD32 autoCtrlValues;CARD32 pad1;CARD32 pad2;};
struct xcb_alloc_color_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t red;uint16_t green;uint16_t blue;uint8_t pad1[2];uint32_t pixel;};
struct xcb_glx_flush_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;};
struct xcb_glx_generic_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_value;uint16_t minor_opcode;uint8_t major_opcode;uint8_t pad0[21];};
struct xcb_map_request_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t parent;xcb_window_t window;};
struct xcb_no_exposure_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_drawable_t drawable;uint16_t minor_opcode;uint8_t major_opcode;};
struct xcb_open_font_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_font_t fid;uint16_t name_len;};
struct xcb_xevie_end_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t cmap;};
struct xcb_xevie_start_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xvmc_surface_info_t {xcb_xvmc_surface_t id;uint16_t chroma_format;uint16_t pad0;uint16_t max_width;uint16_t max_height;uint16_t subpicture_max_width;uint16_t subpicture_max_height;uint32_t mc_type;uint32_t flags;};
typedef void (*FT_Glyph_TransformFunc)(FT_Glyph glyph,  FT_Matrix *matrix,  FT_Vector *delta);
struct GLXBindSwapBarrierSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 unused;CARD32 drawable;CARD32 barrier;};
struct GLXHyperpipeConfigSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 screen;CARD32 npipes;CARD32 networkId;CARD32 pad2;CARD32 pad3;};
struct GLXQueryContextInfoEXT {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 context;};
typedef void (*PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size,  GLvoid *data, GLenum usage);
typedef void (*PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type,  GLvoid *data);
typedef void (*PFNGLCOLORTABLEEXTPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type,  GLvoid *table);
typedef void (*PFNGLCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type,  GLvoid *table);
typedef void (*PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (*PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
typedef void (*PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef void (*PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef void (*PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef void (*PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef void (*XML_ElementDeclHandler)(void *userData,  XML_Char *name, XML_Content *model);
struct _AppleWMReenableUpdate {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 screen;};
struct _AppleWMSetWindowLevel {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 window;CARD32 level;};
struct _LbxGetKeyboardMapping {CARD8 reqType;CARD8 lbxReqType;CARD16 length;KeyCode firstKeyCode;CARD8 count;CARD16 pad1;};
struct _LbxInvalidateTagEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 tag;CARD32 tagType;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _PrintGetContextScreen {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _XDGAGetViewportStatus {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _xkbKTMapEntryWireDesc {BOOL active;CARD8 mask;CARD8 level;CARD8 realMods;CARD16 virtualMods;CARD16 pad;};
struct nd_opt_home_agent_info {uint8_t nd_opt_home_agent_info_type;uint8_t nd_opt_home_agent_info_len;uint16_t nd_opt_home_agent_info_reserved;int16_t nd_opt_home_agent_info_preference;uint16_t nd_opt_home_agent_info_lifetime;};
struct xcb_glx_finish_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;};
struct xcb_list_fonts_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t names_len;uint8_t pad1[22];};
struct xcb_list_hosts_reply_t {uint8_t response_type;uint8_t mode;uint16_t sequence;uint32_t length;uint16_t hosts_len;uint8_t pad0[22];};
struct xcb_map_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;uint8_t override_redirect;};
struct xcb_sync_alarm_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_alarm;uint16_t minor_opcode;uint8_t major_opcode;};
struct xcb_xevie_send_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xv_encoding_info_t {xcb_xv_encoding_t encoding;uint16_t name_size;uint16_t width;uint16_t height;xcb_xv_rational_t rate;};
typedef void (*PFNGLGETFENCEIVNVPROC)(GLuint fence, GLenum pname, GLint *params);
typedef void (*PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void (*PFNGLGETMINMAXEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void (*PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
typedef void (*PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
typedef void (*PFNGLHISTOGRAMEXTPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (*PFNGLSHADEROP1EXTPROC)(GLenum op, GLuint res, GLuint arg1);
typedef void (*PFNGLSHADEROP2EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void (*PFNGLSHADEROP3EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void (*PFNGLWRITEMASKEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
struct _AppleWMDisableUpdate {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 screen;};
struct _LbxBeginLargeRequest {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 largeReqLength;};
struct _LbxGetWinAttrAndGeom {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 id;};
struct _PrintGetDocumentData {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 maxBufferSize;};
struct _PrintGetOneAttribute {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 nameLen;CARD8 type;CARD8 pad1;CARD16 pad2;};
struct _PrintPutDocumentData {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 drawable;CARD32 len_data;CARD16 len_fmt;CARD16 len_options;};
struct _ScreenSaverQueryInfo {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;};
struct _TMSimpleStateTreeRec {unsigned int isSimple : 1;unsigned int isAccelerator : 1;unsigned int mappingNotifyInterest : 1;unsigned int refCount : 13;TMShortCard numBranchHeads;TMShortCard numQuarks;TMShortCard unused;TMBranchHeadRec *branchHeadTbl;XrmQuark *quarkTbl;};
struct _WindowsWMSelectInput {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 mask;};
struct _XDGACloseFramebuffer {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XEVIGetVisualInfoReq {CARD8 reqType;CARD8 xeviReqType;CARD16 length;CARD32 n_visual;};
struct _XF86BigfontQueryFont {CARD8 reqType;CARD8 xf86bigfontReqType;CARD16 length;CARD32 id;CARD32 flags;};
struct _XF86RushUnlockPixmap {CARD8 reqType;CARD8 rushReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 pixmap;};
struct _XmuDisplayQueueEntry {struct _XmuDisplayQueueEntry *prev;struct _XmuDisplayQueueEntry *next;Display *display;CloseHook closehook;XPointer data;};
struct _xPrintAttributeEvent {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 printContext;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _xSyncDestroyAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 alarm;};
struct _xSyncQueryCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 counter;};
struct _xkbAnyDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD32 pad2;CARD32 pad3;};
struct _xkbGetCompatMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 groups;CARD8 pad1;CARD16 firstSI;CARD16 nSI;CARD16 nTotalSI;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbGetNamedIndicator {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 ledClass;CARD16 ledID;CARD16 pad1;CARD32 indicator;};
struct _xkbSetDebuggingFlags {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 msgLength;CARD16 pad;CARD32 affectFlags;CARD32 flags;CARD32 affectCtrls;CARD32 ctrls;};
struct xcb_dpms_info_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint16_t power_level;uint8_t state;};
struct xcb_free_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t gc;};
struct xcb_xevie_end_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[24];};
struct xcb_xv_adaptor_info_t {xcb_xv_port_t base_id;uint16_t name_size;uint16_t num_ports;uint16_t num_formats;uint8_t type;uint8_t pad;};
typedef FT_Error (*FT_Glyph_PrepareFunc)(FT_Glyph glyph, FT_GlyphSlot slot);
struct FT_WinFNT_HeaderRec_ {FT_UShort version;FT_ULong file_size;FT_Byte copyright[60];FT_UShort file_type;FT_UShort nominal_point_size;FT_UShort vertical_resolution;FT_UShort horizontal_resolution;FT_UShort ascent;FT_UShort internal_leading;FT_UShort external_leading;FT_Byte italic;FT_Byte underline;FT_Byte strike_out;FT_UShort weight;FT_Byte charset;FT_UShort pixel_width;FT_UShort pixel_height;FT_Byte pitch_and_family;FT_UShort avg_width;FT_UShort max_width;FT_Byte first_char;FT_Byte last_char;FT_Byte default_char;FT_Byte break_char;FT_UShort bytes_per_row;FT_ULong device_offset;FT_ULong face_name_offset;FT_ULong bits_pointer;FT_ULong bits_offset;FT_Byte reserved;FT_ULong flags;FT_UShort A_space;FT_UShort B_space;FT_UShort C_space;FT_UShort color_table_offset;FT_ULong reserved1[4];};
struct GLXJoinSwapGroupSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 unused;CARD32 drawable;CARD32 member;};
struct GLXQueryServerString {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;CARD32 name;};
typedef void (*PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
typedef void (*SmsSetPropertiesProc)(SmsConn, SmPointer, int, SmProp **);
struct _JAWT_DrawingSurface {JNIEnv *env;jobject target;jint (*Lock)(struct _JAWT_DrawingSurface *);struct _JAWT_DrawingSurfaceInfo *(*GetDrawingSurfaceInfo)(struct _JAWT_DrawingSurface *);void (*FreeDrawingSurfaceInfo)(struct _JAWT_DrawingSurfaceInfo *);void (*Unlock)(struct _JAWT_DrawingSurface *);};
struct _LbxListenToAllEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _LbxListenToOneEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 client;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _LbxReleaseCmapEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 colormap;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _LbxSendTagDataEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 tag;CARD32 tagType;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _PrintDestroyContext {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintGetPrinterList {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printerNameLen;CARD32 localeLen;};
struct _XDGAInstallColormap {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 cmap;};
struct _XDGAOpenFramebuffer {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XF86RushSetCopyMode {CARD8 reqType;CARD8 rushReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 CopyMode;};
struct _XF86VidModeGetGamma {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _XF86VidModeSetGamma {CARD8 reqType;CARD8 xf86vidmodeReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 red;CARD32 green;CARD32 blue;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _XkbStateNotifyEvent {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;int group;int base_group;int latched_group;int locked_group;unsigned int mods;unsigned int base_mods;unsigned int latched_mods;unsigned int locked_mods;int compat_state;unsigned char grab_mods;unsigned char compat_grab_mods;unsigned char lookup_mods;unsigned char compat_lookup_mods;int ptr_buttons;KeyCode keycode;char event_type;char req_major;char req_minor;};
struct _xSyncChangeAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 alarm;CARD32 valueMask;};
struct _xSyncCreateAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 id;CARD32 valueMask;};
struct _xkmIndicatorMapDesc {CARD8 indicator;CARD8 flags;CARD8 which_mods;CARD8 real_mods;CARD16 vmods;CARD8 which_groups;CARD8 groups;CARD32 ctrls;};
struct bfd_link_order_reloc {bfd_reloc_code_real_type reloc;union bfd_link_order_reloc___B1652E1B2D42B7B6BC287CA32D4604B8 u;bfd_vma addend;};
struct iw_michaelmicfailure {__u32 flags;struct sockaddr src_addr;__u8 tsc[8];};
struct xcb_focus_in_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_window_t event;uint8_t mode;};
typedef FT_Module_Interface (*FT_Module_Requester)(FT_Module module,  char *name);
struct FT_Size_RequestRec_ {FT_Size_Request_Type type;FT_Long width;FT_Long height;FT_UInt horiResolution;FT_UInt vertResolution;};
struct GLXDestroyGLXPixmap {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 glxpixmap;};
struct GLXGetFBConfigsSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 screen;};
struct GLXGetVisualConfigs {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;};
typedef void (*IcePoProcessMsgProc)(IceConn, IcePointer, int, unsigned int, int, IceReplyWaitInfo *, int *);
typedef void (*PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size,  GLvoid *data, GLenum usage);
typedef void (*PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type,  GLvoid *table);
typedef void (*PFNGLSWIZZLEEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void (*PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef void (*PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef void (*PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef void (*PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count,  GLfloat *value);
typedef int (*XcmsWhiteAdjustProc)(XcmsCCC, XcmsColor *, XcmsColor *, XcmsColorFormat, XcmsColor *, unsigned int, int *);
typedef int (*XkbConfigFinishFunc)(XkbConfigFieldsPtr, XkbDescPtr, XkbConfigRtrnPtr, int);
struct _AppleWMSelectInput {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 mask;};
struct _ConstraintClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;};
struct _PrintCreateContext {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 contextID;CARD32 printerNameLen;CARD32 localeLen;};
struct _PrintGetAttributes {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD8 type;CARD8 pad1;CARD16 pad2;};
struct _PrintInputSelected {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintSetAttributes {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 stringLen;CARD8 type;CARD8 rule;CARD16 pad1;};
struct _ShapeGetRectangles {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;CARD8 kind;CARD8 junk1;CARD16 junk2;};
struct _ShapeInputSelected {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;};
struct _StripChartClassRec {CoreClassPart core_class;SimpleClassPart simple_class;StripChartClassPart strip_chart_class;};
struct _TMModifierMatchRec {TMLongCard modifiers;TMLongCard modifierMask;LateBindingsPtr lateModifiers;Boolean standard;};
struct _XDGACreateColormap {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 id;CARD32 mode;CARD8 alloc;CARD8 pad1;CARD16 pad2;};
struct _XF86DGASetViewPort {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 x;CARD32 y;};
struct _XF86RushLockPixmap {CARD8 reqType;CARD8 rushReqType;CARD16 length;CARD16 screen;CARD16 pad;CARD32 pixmap;};
struct _xSyncQueryAlarmReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 alarm;};
struct _xkbGetIndicatorMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 which;};
struct _xkbKeyTypeWireDesc {CARD8 mask;CARD8 realMods;CARD16 virtualMods;CARD8 numLevels;CARD8 nMapEntries;BOOL preserve;CARD8 pad;};
struct _xkbOverlayWireDesc {CARD32 name;CARD8 nRows;CARD8 pad1;CARD16 pad2;};
struct _xkbSetIndicatorMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;CARD32 which;};
struct nd_opt_adv_interval {uint8_t nd_opt_adv_interval_type;uint8_t nd_opt_adv_interval_len;uint16_t nd_opt_adv_interval_reserved;uint32_t nd_opt_adv_interval_ival;};
struct xcb_request_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_value;uint16_t minor_opcode;uint8_t major_opcode;};
struct FT_BitmapGlyphRec_ {FT_GlyphRec root;FT_Int left;FT_Int top;FT_Bitmap bitmap;};
struct GLXCreateGLXPixmap {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;CARD32 visual;CARD32 pixmap;CARD32 glxpixmap;};
typedef void (*PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void (*PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
struct _AppleWMSetCanQuit {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 state;};
struct _AsciiSinkClassRec {ObjectClassPart object_class;TextSinkClassPart text_sink_class;AsciiSinkClassPart ascii_sink_class;};
struct _FSXFontInfoHeader {int flags;FSRange char_range;unsigned int draw_direction;FSChar2b default_char;FSXCharInfo min_bounds;FSXCharInfo max_bounds;short font_ascent;short font_descent;};
struct _FontScalableExtra {FontScalableRec defaults;int numScaled;int sizeScaled;FontScaledPtr scaled;pointer c_private;};
struct _LbxFreeCellsEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 colormap;CARD32 pixelStart;CARD32 pixelEnd;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _LbxIncrementPixel {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 cmap;CARD32 pixel;};
struct _LbxModifySequence {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 adjust;};
struct _LbxQueryExtension {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 nbytes;};
struct _MultiSinkClassRec {ObjectClassPart object_class;TextSinkClassPart text_sink_class;MultiSinkClassPart multi_sink_class;};
struct _PanoramiXGetState {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;};
struct _ProcessContextRec {XtAppContext defaultAppContext;XtAppContext appContextList;ConverterTable globalConverterTable;LangProcRec globalLangProcRec;};
struct _ScrollbarClassRec {CoreClassPart core_class;SimpleClassPart simple_class;ScrollbarClassPart scrollbar_class;};
struct _ShapeQueryExtents {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;};
struct _SmeThreeDClassRec {RectObjClassPart rect_class;SmeClassPart sme_class;SmeThreeDClassPart sme_threeD_class;};
struct _XDGAFillRectangle {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD32 color;};
typedef int (*_XawSrcReplaceProc)(Widget, XawTextPosition, XawTextPosition, XawTextBlock *);
struct _XkbControlsNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed_ctrls;unsigned int enabled_ctrls;unsigned int enabled_ctrl_changes;int num_groups;KeyCode keycode;char event_type;char req_major;char req_minor;};
struct _XkbMapNotifyEvent {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;unsigned int flags;int first_type;int num_types;KeyCode min_key_code;KeyCode max_key_code;KeyCode first_key_sym;KeyCode first_key_act;KeyCode first_key_behavior;KeyCode first_key_explicit;KeyCode first_modmap_key;KeyCode first_vmodmap_key;int num_key_syms;int num_key_acts;int num_key_behaviors;int num_key_explicit;int num_modmap_keys;int num_vmodmap_keys;unsigned int vmods;};
struct __gconv_trans_data {__gconv_trans_fct __trans_fct;__gconv_trans_context_fct __trans_context_fct;__gconv_trans_end_fct __trans_end_fct;void *__data;struct __gconv_trans_data *__next;};
struct _xkbPerClientFlags {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;CARD32 change;CARD32 value;CARD32 ctrlsToChange;CARD32 autoCtrls;CARD32 autoCtrlValues;};
struct _xkmTextDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD16 width;CARD16 height;CARD8 color_ndx;CARD8 pad1;CARD16 pad2;};
struct full_sockaddr_rose {sa_family_t srose_family;rose_address srose_addr;ax25_address srose_call;unsigned int srose_ndigis;ax25_address srose_digis[6];};
struct xcb_bell_request_t {uint8_t major_opcode;int8_t percent;uint16_t length;};
struct xcb_expose_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;uint16_t x;uint16_t y;uint16_t width;uint16_t height;uint16_t count;};
struct xcb_record_range_t {xcb_record_range_8_t core_requests;xcb_record_range_8_t core_replies;xcb_record_ext_range_t ext_requests;xcb_record_ext_range_t ext_replies;xcb_record_range_8_t delivered_events;xcb_record_range_8_t device_events;xcb_record_range_8_t errors;uint8_t client_started;uint8_t client_died;};
struct FTC_ImageTypeRec_ {FTC_FaceID face_id;FT_Int width;FT_Int height;FT_Int32 flags;};
typedef FT_Error (*FT_Glyph_InitFunc)(FT_Glyph glyph, FT_GlyphSlot slot);
struct GLXDestroyContext {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 context;};
struct GLXDestroyPbuffer {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 pbuffer;};
struct WBXMLTreeClbCtx_s {WBXMLTree *tree;WBXMLTreeNode *current;WBXMLError error;unsigned int skip_lvl;int skip_start;unsigned char *input_buff;};
typedef int (*XpmAllocColorFunc)(Display *, Colormap, char *, XColor *, void *);
typedef int (*XpmFreeColorsFunc)(Display *, Colormap, Pixel *, int, void *);
typedef Boolean (*XtAcceptFocusProc)(Widget, Time *);
typedef XtGeometryResult (*XtGeometryHandler)(Widget, XtWidgetGeometry *, XtWidgetGeometry *);
struct _AppleWMFrameDraw {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 screen;CARD32 window;CARD16 frame_class;CARD16 frame_attr;CARD16 ix;CARD16 iy;CARD16 iw;CARD16 ih;CARD16 ox;CARD16 oy;CARD16 ow;CARD16 oh;CARD32 title_length;};
struct _AsciiSrcClassRec {ObjectClassPart object_class;TextSrcClassPart text_src_class;AsciiSrcClassPart ascii_src_class;};
struct _CaseConverterRec {KeySym start;KeySym stop;XtCaseProc proc;CaseConverterPtr next;};
struct _LbxInvalidateTag {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 tag;};
struct _MultiSrcClassRec {ObjectClassPart object_class;TextSrcClassPart text_src_class;MultiSrcClassPart multi_src_class;};
struct _PortholeClassRec {CoreClassPart core_class;CompositeClassPart composite_class;PortholeClassPart porthole_class;};
struct _PrintSelectInput {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 eventMask;};
struct _XevieSelectInput {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD32 event_mask;};
struct _XkbActionMessage {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;KeyCode keycode;int press;int key_event_follows;int group;unsigned int mods;char message[7];};
struct _xSyncGetPriority {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 id;};
struct _xkbGetDeviceInfo {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 wanted;BOOL allBtns;CARD8 firstBtn;CARD8 nBtns;CARD8 pad;CARD16 ledClass;CARD16 ledID;};
struct reloc_cache_entry {struct bfd_symbol **sym_ptr_ptr;bfd_size_type address;bfd_vma addend;reloc_howto_type *howto;};
struct splay_tree_node_s {splay_tree_key key;splay_tree_value value;splay_tree_node left;splay_tree_node right;};
struct xcb_value_error_t {uint8_t response_type;uint8_t error_code;uint16_t sequence;uint32_t bad_value;uint16_t minor_opcode;uint8_t major_opcode;};
struct FT_Size_Metrics_ {FT_UShort x_ppem;FT_UShort y_ppem;FT_Fixed x_scale;FT_Fixed y_scale;FT_Pos ascender;FT_Pos descender;FT_Pos height;FT_Pos max_advance;};
struct GLXCreatePbuffer {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;CARD32 fbconfig;CARD32 pbuffer;CARD32 numAttribs;};
struct GLXDestroyPixmap {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 glxpixmap;};
struct GLXDestroyWindow {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 glxwindow;};
typedef void (*SmcPropReplyProc)(SmcConn, SmPointer, int, SmProp **);
typedef int (*SmsNewClientProc)(SmsConn, SmPointer, unsigned int *, SmsCallbacks *, char **);
typedef void (*XtConvertArgProc)(Widget, Cardinal *, XrmValue *);
struct _PrintSetContext {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _ShmCreatePixmap {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 pid;CARD32 drawable;CARD16 width;CARD16 height;CARD8 depth;CARD8 pad0;CARD8 pad1;CARD8 pad2;CARD32 shmseg;CARD32 offset;};
struct _SmeLineClassRec {RectObjClassPart rect_class;SmeClassPart sme_class;SmeLineClassPart sme_line_class;};
struct _TranslationData {unsigned char hasBindings;unsigned char operation;TMShortCard numStateTrees;struct _TranslationData *composers[2];EventMask eventMask;TMStateTree stateTreeTbl[1];};
struct _XDGASelectInput {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 mask;};
struct _XDGASetViewport {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 x;CARD16 y;CARD32 flags;};
struct _XExtDisplayInfo {struct _XExtDisplayInfo *next;Display *display;XExtCodes *codes;XPointer data;};
struct _XagDestroyAssoc {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 window;};
struct _XawGripCallData {XEvent *event;String *params;Cardinal num_params;};
struct _XcmsFunctionSet {XcmsColorSpace **DDColorSpaces;XcmsScreenInitProc screenInitProc;XcmsScreenFreeProc screenFreeProc;};
struct _XcupStoreColors {CARD8 reqType;CARD8 xcupReqType;CARD16 length;CARD32 cmap;};
struct _XkbClientMapRec {unsigned char size_types;unsigned char num_types;XkbKeyTypePtr types;unsigned short size_syms;unsigned short num_syms;KeySym *syms;XkbSymMapPtr key_sym_map;unsigned char *modmap;};
struct _XkbCompatMapRec {XkbSymInterpretPtr sym_interpret;XkbModsRec groups[4];unsigned short num_si;unsigned short size_si;};
typedef Boolean (*_XtTraversalProc)(StatePtr, XtPointer);
struct _xkbGetCompatMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 groups;BOOL getAllSI;CARD16 firstSI;CARD16 nSI;};
struct _xkbGetKbdByName {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 need;CARD16 want;BOOL load;CARD8 pad;};
struct _xkbSetCompatMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 pad1;BOOL recomputeActions;BOOL truncateSI;CARD8 groups;CARD16 firstSI;CARD16 nSI;CARD16 pad2;};
struct GLXCreatePixmap {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;CARD32 fbconfig;CARD32 pixmap;CARD32 glxpixmap;CARD32 numAttribs;};
struct GLXCreateWindow {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;CARD32 fbconfig;CARD32 window;CARD32 glxwindow;CARD32 numAttribs;};
struct GLXGetFBConfigs {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 screen;};
struct GLXQueryContext {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 context;};
struct GLXQueryVersion {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 majorVersion;CARD32 minorVersion;};
struct _LbxAllowMotion {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 num;};
struct _LbxCloseClient {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 client;};
struct _LbxSwitchEvent {BYTE type;BYTE lbxType;CARD16 pad;CARD32 client;};
struct _PannerClassRec {CoreClassPart core_class;SimpleClassPart simple_class;PannerClassPart panner_class;};
struct _PrintStartPage {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 window;};
struct _SmeBSBClassRec {RectObjClassPart rect_class;SmeClassPart sme_class;SmeBSBClassPart sme_bsb_class;};
union _TMStateTreeRec {TMSimpleStateTreeRec simple;TMParseStateTreeRec parse;TMComplexStateTreeRec complex;};
struct _ThreeDClassRec {CoreClassPart core_class;SimpleClassPart simple_class;ThreeDClassPart threeD_class;};
struct _XDGAQueryModes {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XInternalAsync {struct _XInternalAsync *next;int (*handler)(Display *, xReply *, char *, int, XPointer);XPointer data;};
struct _XagCreateAssoc {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 window;CARD16 window_type;CARD16 system_window_len;};
typedef XawTextPosition (*_XawSrcReadProc)(Widget, XawTextPosition, XawTextBlock *, int);
struct _xkbGetGeometry {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 name;};
struct _xkbGetMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 pad1;CARD8 minKeyCode;CARD8 maxKeyCode;CARD16 present;CARD8 firstType;CARD8 nTypes;CARD8 totalTypes;CARD8 firstKeySym;CARD16 totalSyms;CARD8 nKeySyms;CARD8 firstKeyAct;CARD16 totalActs;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 totalKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 totalKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 totalModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD8 totalVModMapKeys;CARD8 pad2;CARD16 virtualMods;};
struct _xkbKeyWireDesc {CARD8 name[4];INT16 gap;CARD8 shapeNdx;CARD8 colorNdx;};
struct _xkbSetGeometry {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 nShapes;CARD8 nSections;CARD32 name;CARD16 widthMM;CARD16 heightMM;CARD16 nProperties;CARD16 nColors;CARD16 nDoodads;CARD16 nKeyAliases;CARD8 baseColorNdx;CARD8 labelColorNdx;CARD16 pad;};
struct _xkmSectionDesc {INT16 top;INT16 left;CARD16 width;CARD16 height;INT16 angle;CARD8 priority;CARD8 num_rows;CARD8 num_doodads;CARD8 num_overlays;CARD16 pad2;};
struct vm86plus_struct {struct vm86_regs regs;unsigned int flags;unsigned int screen_bitmap;unsigned int cpu_type;struct revectored_struct int_revectored;struct revectored_struct int21_revectored;struct vm86plus_info_struct vm86plus;};
struct xMbufBufferInfo {CARD32 visualID;CARD16 maxBuffers;CARD8 depth;CARD8 unused;};
struct xcb_coloritem_t {uint32_t pixel;uint16_t red;uint16_t green;uint16_t blue;uint8_t flags;uint8_t pad0;};
typedef int (*CreateFontType)(Display *, XFontStruct *, XExtCodes *);
struct FTC_ScalerRec_ {FTC_FaceID face_id;FT_UInt width;FT_UInt height;FT_Int pixel;FT_UInt x_res;FT_UInt y_res;};
struct FT_CharMapRec_ {FT_Face face;FT_Encoding encoding;FT_UShort platform_id;FT_UShort encoding_id;};
struct JDK1_1InitArgs {jint version;char **properties;jint checkSource;jint nativeStackSize;jint javaStackSize;jint minHeapSize;jint maxHeapSize;jint verifyMode; char *classpath;jint (*vfprintf)(FILE *file,  char *fmt, va_list args);void (*exit)(jint value);void (*abort)(void);jint enableClassGC;jint enableVerboseGC;jint disableAsyncGC;jint reserved0;jint reserved1;jint reserved2;};
struct TT_HoriHeader_ {FT_Fixed Version;FT_Short Ascender;FT_Short Descender;FT_Short Line_Gap;FT_UShort advance_Width_Max;FT_Short min_Left_Side_Bearing;FT_Short min_Right_Side_Bearing;FT_Short xMax_Extent;FT_Short caret_Slope_Rise;FT_Short caret_Slope_Run;FT_Short caret_Offset;FT_Short Reserved[4];FT_Short metric_Data_Format;FT_UShort number_Of_HMetrics;void *long_metrics;void *short_metrics;};
struct TT_Postscript_ {FT_Fixed FormatType;FT_Fixed italicAngle;FT_Short underlinePosition;FT_Short underlineThickness;FT_ULong isFixedPitch;FT_ULong minMemType42;FT_ULong maxMemType42;FT_ULong minMemType1;FT_ULong maxMemType1;};
struct TT_VertHeader_ {FT_Fixed Version;FT_Short Ascender;FT_Short Descender;FT_Short Line_Gap;FT_UShort advance_Height_Max;FT_Short min_Top_Side_Bearing;FT_Short min_Bottom_Side_Bearing;FT_Short yMax_Extent;FT_Short caret_Slope_Rise;FT_Short caret_Slope_Run;FT_Short caret_Offset;FT_Short Reserved[4];FT_Short metric_Data_Format;FT_UShort number_Of_VMetrics;void *long_metrics;void *short_metrics;};
typedef String (*XtLanguageProc)(Display *, String, XtPointer);
struct _CompositePart {WidgetList children;Cardinal num_children;Cardinal num_slots;XtOrderProc insert_position;};
struct _ConstraintRec {CorePart core;CompositePart composite;ConstraintPart constraint;};
struct _LabelClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;};
struct _LbxCloseEvent {BYTE type;BYTE lbxType;CARD16 sequenceNumber;CARD32 client;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _ShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;};
struct _ShmCompletion {BYTE type;BYTE bpad0;CARD16 sequenceNumber;CARD32 drawable;CARD16 minorEvent;BYTE majorEvent;BYTE bpad1;CARD32 shmseg;CARD32 offset;CARD32 pad0;CARD32 pad1;CARD32 pad2;};
struct _StripChartRec {CorePart core;SimplePart simple;StripChartPart strip_chart;};
struct _XkbConfigRtrn {unsigned int defined;int error;int line;int click_volume;int bell_volume;int bell_pitch;int bell_duration;int repeat_delay;int repeat_interval;char *rules_file;char *model;char *layout;char *variant;char *options;char *keymap;char *keycodes;char *geometry;char *phys_symbols;char *symbols;char *types;char *compat;int replace_initial_ctrls;unsigned int initial_ctrls;unsigned int initial_ctrls_clear;int replace_initial_opts;unsigned short initial_opts;unsigned short initial_opts_clear;XkbConfigModInfoRec initial_mods;XkbConfigModInfoRec internal_mods;XkbConfigModInfoRec ignore_lock_mods;short num_unbound_mods;short sz_unbound_mods;XkbConfigUnboundModPtr unbound_mods;int groups_wrap;int slow_keys_delay;int debounce_delay;int mk_delay;int mk_interval;int mk_time_to_max;int mk_max_speed;int mk_curve;int ax_timeout;int replace_axt_ctrls_on;int replace_axt_ctrls_off;unsigned int axt_ctrls_on;unsigned int axt_ctrls_off;unsigned int axt_ctrls_ignore;int replace_axt_opts_off;int replace_axt_opts_on;unsigned short axt_opts_off;unsigned short axt_opts_on;unsigned short axt_opts_ignore;XkbConfigRtrnPrivPtr priv;};
struct _XkbDeviceInfo {char *name;Atom type;unsigned short device_spec;int has_own_state;unsigned short supported;unsigned short unsupported;unsigned short num_btns;XkbAction *btn_acts;unsigned short sz_leds;unsigned short num_leds;unsigned short dflt_kbd_fb;unsigned short dflt_led_fb;XkbDeviceLedInfoPtr leds;};
struct bp_getfile_res {bp_machine_name_t server_name;bp_address server_address;bp_path_t server_path;};
struct ypresp_key_val {ypstat stat;valdat val;keydat key;};
struct FT_MemoryRec_ {void *user;FT_Alloc_Func alloc;FT_Free_Func free;FT_Realloc_Func realloc;};
struct GLXClientInfo {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 major;CARD32 minor;CARD32 numbytes;};
typedef IcePaAuthStatus (*IcePaAuthProc)(IceConn, IcePointer *, int, int, IcePointer, int *, IcePointer *, char **);
typedef IcePoAuthStatus (*IcePoAuthProc)(IceConn, IcePointer *, int, int, int, IcePointer, int *, IcePointer *, char **);
typedef int (*ListFontsFunc)(pointer client, FontPathElementPtr fpe, char *pat, int len, int max, FontNamesPtr names);
struct PS_DesignMap_ {FT_Byte num_points;FT_Long *design_points;FT_Fixed *blend_points;};
typedef void (*XtRealizeProc)(Widget, XtValueMask *, XSetWindowAttributes *);
struct _AsciiSinkRec {ObjectPart object;TextSinkPart text_sink;AsciiSinkPart ascii_sink;};
struct _BlockHookRec {struct _BlockHookRec *next;XtAppContext app;XtBlockHookProc proc;XtPointer closure;};
struct _GripClassRec {CoreClassPart core_class;SimpleClassPart simple_class;GripClassPart grip_class;};
struct _LbxCopyPlane {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 bitPlane;CARD8 srcCache;CARD8 cacheEnts;};
struct _LbxNewClient {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 client;};
struct _LbxQueryFont {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 fid;};
struct _ListClassRec {CoreClassPart core_class;SimpleClassPart simple_class;ListClassPart list_class;};
struct _MultiSinkRec {ObjectPart object;TextSinkPart text_sink;MultiSinkPart multi_sink;};
struct _PrintEndPage {CARD8 reqType;CARD8 printReqType;CARD16 length;BOOL cancel;CARD8 pad1;CARD16 pad2;};
struct _ScrollbarRec {CorePart core;SimplePart simple;ScrollbarPart scrollbar;};
struct _TextClassRec {CoreClassPart core_class;SimpleClassPart simple_class;TextClassPart text_class;};
struct _XDGACopyArea {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD16 srcx;CARD16 srcy;CARD16 width;CARD16 height;CARD16 dstx;CARD16 dsty;};
struct _XcursorImage {XcursorUInt version;XcursorDim size;XcursorDim width;XcursorDim height;XcursorDim xhot;XcursorDim yhot;XcursorUInt delay;XcursorPixel *pixels;};
struct _XkbUI_Select {unsigned int type;XkbSectionPtr section;XkbKeyPtr key;XkbDoodadPtr doodad;};
struct _XtGrabExtRec {Mask *pKeyButMask;Mask *pModifiersMask;Window confineTo;Cursor cursor;};
struct nd_opt_rd_hdr {uint8_t nd_opt_rh_type;uint8_t nd_opt_rh_len;uint16_t nd_opt_rh_reserved1;uint32_t nd_opt_rh_reserved2;};
struct sockaddr_rose {sa_family_t srose_family;rose_address srose_addr;ax25_address srose_call;int srose_ndigis;ax25_address srose_digi;};
struct wireless_scan {struct wireless_scan *next;int has_ap_addr;sockaddr ap_addr;struct wireless_config b;iwstats stats;int has_stats;};
struct ypbind_setdom {domainname ypsetdom_domain;ypbind_binding ypsetdom_binding;u_int ypsetdom_vers;};
typedef int (*CreateGCType)(Display *, GC, XExtCodes *);
struct FTC_SBitRec_ {FT_Byte width;FT_Byte height;FT_Char left;FT_Char top;FT_Byte format;FT_Byte max_grays;FT_Short pitch;FT_Char xadvance;FT_Char yadvance;FT_Byte *buffer;};
struct FT_SfntName_ {FT_UShort platform_id;FT_UShort encoding_id;FT_UShort language_id;FT_UShort name_id;FT_Byte *string;FT_UInt string_len;};
typedef int (*FreeFontType)(Display *, XFontStruct *, XExtCodes *);
typedef void (*XtExposeProc)(Widget, XEvent *, Region);
struct _AsciiSrcRec {ObjectPart object;TextSrcPart text_src;AsciiSrcPart ascii_src;};
struct _BitmapExtra {Atom *glyphNames;int *sWidths;CARD32 bitmapsSizes[4];FontInfoRec info;};
struct _BoxClassRec {CoreClassPart core_class;CompositeClassPart composite_class;BoxClassPart box_class;};
struct _ExifContent {ExifEntry **entries;unsigned int count;ExifData *parent;ExifContentPrivate *priv;};
struct _LbxFillPoly {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD8 cacheEnts;BYTE shape;CARD8 padBytes;};
struct _MultiSrcRec {ObjectPart object;TextSrcPart text_src;MultiSrcPart multi_src;};
struct _PortholeRec {CorePart core;CompositePart composite;PortholePart porthole;};
struct _PrintEndDoc {CARD8 reqType;CARD8 printReqType;CARD16 length;BOOL cancel;CARD8 pad1;CARD16 pad2;};
struct _PrintEndJob {CARD8 reqType;CARD8 printReqType;CARD16 length;BOOL cancel;CARD8 pad1;CARD16 pad2;};
struct _RectObjPart {Position x;Position y;Dimension width;Dimension height;Dimension border_width;Boolean managed;Boolean sensitive;Boolean ancestor_sensitive;};
struct _WorkProcRec {XtWorkProc proc;XtPointer closure;struct _WorkProcRec *next;XtAppContext app;};
struct _XDGASetMode {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;CARD32 mode;CARD32 pid;};
struct _XDeviceInfo {XID id;Atom type;char *name;int num_classes;int use;XAnyClassPtr inputclassinfo;};
struct _xkbGetNames {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 which;};
struct _xkbSetNames {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 virtualMods;CARD32 which;CARD8 firstType;CARD8 nTypes;CARD8 firstKTLevel;CARD8 nKTLevels;CARD32 indicators;CARD8 groupNames;CARD8 nRadioGroups;CARD8 firstKey;CARD8 nKeys;CARD8 nKeyAliases;CARD8 pad1;CARD16 totalKTLevelNames;};
struct authdes_cred {enum authdes_namekind adc_namekind;struct authdes_fullname adc_fullname;uint32_t adc_nickname;};
struct iw_priv_args {__u32 cmd;__u16 set_args;__u16 get_args;char name[16];};
struct td_event_msg {td_event_e event; td_thrhandle_t *th_p;union td_event_msg___93B01EC8B2A37DE149D5B3F5BB1472F3 msg;};
typedef int (*FlushGCType)(Display *, GC, XExtCodes *);
struct GLXIsDirect {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 context;};
struct _ActionsRec {int idx;String *params;Cardinal num_params;ActionPtr next;};
struct _BitmapFont {unsigned int version_num;int num_chars;int num_tables;CharInfoPtr metrics;xCharInfo *ink_metrics;char *bitmaps;CharInfoPtr **encoding;CharInfoPtr pDefault;BitmapExtraPtr bitmapExtra;};
struct _FontScaled {FontScalableRec vals;FontEntryPtr bitmap;FontPtr pFont;};
struct _LbxTagData {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 tag;CARD32 real_length;};
struct _XagDestroy {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;};
struct _XagGetAttr {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;};
struct _XevieStart {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD32 screen;};
struct _XtResource {String resource_name;String resource_class;String resource_type;Cardinal resource_size;Cardinal resource_offset;String default_type;XtPointer default_addr;};
struct _XtStateRec {unsigned int isCycleStart : 1;unsigned int isCycleEnd : 1;TMShortCard typeIndex;TMShortCard modIndex;ActionPtr actions;StatePtr nextLevel;};
struct _xkmKeyDesc {CARD8 name[4];INT16 gap;CARD8 shape_ndx;CARD8 color_ndx;};
struct gz_header_s {int text;uLong time;int xflags;int os;Bytef *extra;uInt extra_len;uInt extra_max;Bytef *name;uInt name_max;Bytef *comment;uInt comm_max;int hcrc;int done;};
struct opaque_auth {enum_t oa_flavor;caddr_t oa_base;u_int oa_length;};
struct rmtcallargs {u_long prog;u_long vers;u_long proc;u_long arglen;caddr_t args_ptr;xdrproc_t xdr_args;};
struct sockaddr_at {sa_family_t sat_family;__u8 sat_port;struct atalk_addr sat_addr;char sat_zero[8];};
struct sockaddr_in {sa_family_t sin_family;in_port_t sin_port;struct in_addr sin_addr;unsigned char sin_zero[8];};
typedef int (*CopyGCType)(Display *, GC, XExtCodes *);
struct FT_MM_Var_ {FT_UInt num_axis;FT_UInt num_designs;FT_UInt num_namedstyles;FT_Var_Axis *axis;FT_Var_Named_Style *namedstyle;};
typedef int (*FreeGCType)(Display *, GC, XExtCodes *);
typedef void (*XPSaveProc)(Display *display, XPContext context, unsigned char *data, unsigned int data_len, XPointer client_data);
typedef void (*XtArgsProc)(Widget, ArgList, Cardinal *);
typedef void (*XtInitProc)(Widget, Widget, ArgList, Cardinal *);
struct _LbxSwitch {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 client;};
struct _PannerRec {CorePart core;SimplePart simple;PannerPart panner;};
struct _ShmDetach {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 shmseg;};
struct _ThreeDRec {CorePart core;SimplePart simple;ThreeDPart threeD;};
struct _XagCreate {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;CARD32 attrib_mask;};
struct _XawIcPart {XIMStyle input_style;Boolean shared_ic;XawIcTableList shared_ic_table;XawIcTableList current_ic_table;XawIcTableList ic_table;};
struct bfd_symbol {struct bfd *the_bfd; char *name;symvalue value;flagword flags;struct bfd_section *section;union bfd_symbol___B9E77FD0681C1335DBAA9A65240EEB16 udata;};
struct exportnode {dirpath ex_dir;groups ex_groups;exports ex_next;};
struct nd_opt_mtu {uint8_t nd_opt_mtu_type;uint8_t nd_opt_mtu_len;uint16_t nd_opt_mtu_reserved;uint32_t nd_opt_mtu_mtu;};
struct rmtcallres {u_long *port_ptr;u_long resultslen;caddr_t results_ptr;xdrproc_t xdr_results;};
typedef int (*ErrorType)(Display *, xError *, XExtCodes *, int *);
struct GLXRender {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag contextTag;};
struct GLXSingle {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag contextTag;};
struct GLXWaitGL {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag contextTag;};
struct _FSExtent {struct _FSExtent *next;FSExtCodes codes;int (*close_server)(FSServer *, FSExtCodes *);int (*error)(FSServer *, fsError *, FSExtCodes *, int *);int (*error_string)(FSServer *, int, FSExtCodes *, char *, int);char *name;};
struct _LabelRec {CorePart core;SimplePart simple;LabelPart label;};
struct _XDGASync {CARD8 reqType;CARD8 dgaReqType;CARD16 length;CARD32 screen;};
struct _XagQuery {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 resource;};
struct _XevieEnd {CARD8 reqType;CARD8 xevieReqType;CARD16 length;CARD32 cmap;};
struct _XkbShape {Atom name;unsigned short num_outlines;unsigned short sz_outlines;XkbOutlinePtr outlines;XkbOutlinePtr approx;XkbOutlinePtr primary;XkbBoundsRec bounds;};
struct fieldnode {unsigned short status;short rows;short cols;short frow;short fcol;int drows;int dcols;int maxgrow;int nrow;short nbuf;short just;short page;short index;int pad;chtype fore;chtype back;Field_Options opts;struct fieldnode *snext;struct fieldnode *sprev;struct fieldnode *link;struct formnode *form;struct typenode *type;void *arg;FIELD_CELL *buf;void *usrptr;};
struct icmp6_hdr {uint8_t icmp6_type;uint8_t icmp6_code;uint16_t icmp6_cksum;union icmp6_hdr___85A0B7966B981BE593FDADBE0B8685D7 icmp6_dataun;};
struct mountbody {name ml_hostname;dirpath ml_directory;mountlist ml_next;};
struct ypreq_key {domainname domain;mapname map;keydat key;};
struct GLXWaitX {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag contextTag;};
struct _GripRec {CorePart core;SimplePart simple;GripPart grip;};
struct _ListRec {CorePart core;SimplePart simple;ListPart list;};
struct _TextRec {CorePart core;SimplePart simple;TextPart text;};
struct __ns_msg { u_char *_msg; u_char *_eom;u_int16_t _id;u_int16_t _flags;u_int16_t _counts[4]; u_char *_sections[4];ns_sect _sect;int _rrnum; u_char *_ptr;};
struct _fpstate {unsigned int cw;unsigned int sw;unsigned int tag;unsigned int ipoff;unsigned int cssel;unsigned int dataoff;unsigned int datasel;struct _fpreg _st[8];unsigned short status;unsigned short magic;unsigned int _fxsr_env[6];unsigned int mxcsr;unsigned int reserved;struct _fpxreg _fxsr_st[8];struct _xmmreg _xmm[8];unsigned int padding[56];};
struct bpf_insn {u_short code;u_char jt;u_char jf;bpf_int32 k;};
struct ip6_frag {uint8_t ip6f_nxt;uint8_t ip6f_reserved;uint16_t ip6f_offlg;uint32_t ip6f_ident;};
struct ipc_perm {__key_t __key;__uid_t uid;__gid_t gid;__uid_t cuid;__gid_t cgid;unsigned short mode;unsigned short __pad1;unsigned short __seq;unsigned short __pad2;unsigned int __unused1;unsigned int __unused2;};
struct iw_param {__s32 value;__u8 fixed;__u8 disabled;__u16 flags;};
struct iw_pmksa {__u32 cmd;struct sockaddr bssid;__u8 pmkid[16];};
struct _BoxRec {CorePart core;CompositePart composite;BoxPart box;};
struct _SmeRec {ObjectPart object;RectObjPart rectangle;SmePart sme;};
struct _XctRec {XctString total_string;int total_length;XctFlags flags;int version;int can_ignore_exts;XctString item;unsigned int item_length;int char_size;char *encoding;XctHDirection horizontal;unsigned int horz_depth;char *GL;char *GL_encoding;int GL_set_size;int GL_char_size;char *GR;char *GR_encoding;int GR_set_size;int GR_char_size;char *GLGR_encoding;struct _XctPriv *priv;};
struct icmphdr {u_int8_t type;u_int8_t code;u_int16_t checksum;union icmphdr___44B9F435D952314818895718F3518D16 un;};
struct iw_freq {__s32 m;__s16 e;__u8 i;__u8 flags;};
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;cc_t c_line;cc_t c_cc[32];speed_t c_ispeed;speed_t c_ospeed;};
struct statfs {int f_type;int f_bsize;__fsblkcnt_t f_blocks;__fsblkcnt_t f_bfree;__fsblkcnt_t f_bavail;__fsfilcnt_t f_files;__fsfilcnt_t f_ffree;__fsid_t f_fsid;int f_namelen;int f_frsize;int f_spare[5];};
struct _JAWT {jint version;struct _JAWT_DrawingSurface *(*GetDrawingSurface)(JNIEnv *, jobject);void (*FreeDrawingSurface)(struct _JAWT_DrawingSurface *);void (*Lock)(JNIEnv *);void (*Unlock)(JNIEnv *);jobject (*GetComponent)(JNIEnv *, void *);};
struct event {struct event___3F9DAFE875678DCD32E4C48DBA0B6DC5 ev_next;struct event___3F9DAFE875678DCD32E4C48DBA0B6DC5 ev_active_next;struct event___3F9DAFE875678DCD32E4C48DBA0B6DC5 ev_signal_next;struct event___DA694BA3E6A28DADAA3B1D9573205141 ev_timeout_node;struct event_base *ev_base;int ev_fd;short ev_events;short ev_ncalls;short *ev_pncalls;struct timeval ev_timeout;int ev_pri;void (*ev_callback)(int, short, void *arg);void *ev_arg;int ev_res;int ev_flags;};
struct iphdr {unsigned char ihl : 4;unsigned char version : 4;u_int8_t tos;u_int16_t tot_len;u_int16_t id;u_int16_t frag_off;u_int8_t ttl;u_int8_t protocol;u_int16_t check;u_int32_t saddr;u_int32_t daddr;};
struct ucred {pid_t pid;uid_t uid;gid_t gid;};
struct AUTH {struct opaque_auth ah_cred;struct opaque_auth ah_verf;union des_block ah_key;struct AUTH__auth_ops *ah_ops;caddr_t ah_private;};
struct _XGC {XExtData *ext_data;GContext gid;int rects;int dashes;unsigned int dirty;XGCValues values;};
struct acct {char ac_flag;u_int16_t ac_uid;u_int16_t ac_gid;u_int16_t ac_tty;u_int32_t ac_btime;comp_t ac_utime;comp_t ac_stime;comp_t ac_etime;comp_t ac_mem;comp_t ac_io;comp_t ac_rw;comp_t ac_minflt;comp_t ac_majflt;comp_t ac_swaps;u_int32_t ac_exitcode;char ac_comm[17];char ac_pad[10];};
struct igmp {u_int8_t igmp_type;u_int8_t igmp_code;u_int16_t igmp_cksum;struct in_addr igmp_group;};
struct XDR {enum xdr_op x_op;struct XDR__xdr_ops *x_ops;caddr_t x_public;caddr_t x_private;caddr_t x_base;u_int x_handy;};
struct ip {unsigned int ip_hl : 4;unsigned int ip_v : 4;u_int8_t ip_tos;u_short ip_len;u_short ip_id;u_short ip_off;u_int8_t ip_ttl;u_int8_t ip_p;u_short ip_sum;struct in_addr ip_src;struct in_addr ip_dst;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___B652DCB1C62512FA77E4252B8A422175 {CARD32 pad00;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BYTE mode;BYTE flags;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___C927E5D571B5CC43049437141E992D5C {CARD32 pad00;CARD32 event;CARD32 window;CARD32 parent;INT16 x;INT16 y;BOOL override;BYTE pad1;BYTE pad2;BYTE pad3;};
struct ____1C1E9EA25555F3A04518B10EE9DF4602___FA18AEC49CDA3F922B926DB83731E944 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 time;CARD32 port;CARD32 attribute;INT32 value;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
union bfd_link_hash_entry___7518C311B30939442257602FB0F48E63 {struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___41E103AEC814609D75F1D5A85352E48F undef;struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___257C4BBE877DAACE468881AF3C3FD997 def;struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___C0D47F044CB1E673F41B0FD513C7A3FC i;struct bfd_link_hash_entry___7518C311B30939442257602FB0F48E63___5321887C570BBFDBA75455701C3FC442 c;};
struct xcb_composite_create_region_from_border_clip_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_window_t window;};
struct xcb_render_set_picture_clip_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;int16_t clip_x_origin;int16_t clip_y_origin;};
struct xcb_x_print_print_get_screen_of_context_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t root;};
struct xcb_xfixes_create_region_from_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_render_picture_t picture;};
struct xcb_x_print_print_get_one_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t nameLen;uint8_t pool;uint8_t pad0[3];};
struct xcb_xfixes_create_region_from_bitmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_pixmap_t bitmap;};
struct xcb_glx_get_color_table_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_color_table_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_convolution_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_convolution_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_x_print_print_get_document_data_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t max_bytes;};
struct xcb_x_print_print_put_document_data_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t len_data;uint16_t len_fmt;uint16_t len_options;};
struct xcb_glx_change_drawable_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_drawable_t drawable;uint32_t num_attribs;uint32_t value_mask;};
struct xcb_glx_get_compressed_tex_image_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t size;uint8_t pad2[12];};
struct xcb_glx_get_color_table_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_color_table_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_convolution_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_convolution_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_histogram_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_histogram_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_vendor_private_with_reply_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t vendor_code;xcb_glx_context_tag_t context_tag;};
struct xcb_composite_name_window_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_pixmap_t pixmap;};
struct xcb_x_print_print_set_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t stringLen;uint8_t pool;uint8_t rule;uint8_t pad0[2];};
struct xcb_xfixes_create_region_from_gc_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_gcontext_t gc;};
struct xcb_glx_get_histogram_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_histogram_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_query_objectuiv_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t id;uint32_t pname;};
struct xcb_glx_get_tex_level_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_level_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
typedef void (*PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end,  GLint *first,  GLsizei *count, GLsizei primcount);
struct xcb_change_active_pointer_grab_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cursor;xcb_timestamp_t time;uint16_t event_mask;};
struct xcb_composite_get_overlay_window_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t overlay_win;uint8_t pad1[20];};
struct xcb_glx_get_convolution_filter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_glx_get_minmax_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_minmax_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_query_objectiv_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t id;uint32_t pname;};
struct xcb_x_print_print_get_attributes_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t stringLen;uint8_t pad1[20];xcb_x_print_string8_t attributes;};
struct xcb_x_print_print_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_x_print_pcontext_t context;uint32_t event_mask;};
struct xcb_xfixes_select_cursor_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;uint32_t event_mask;};
struct xcb_xvmc_list_subpicture_types_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port_id;xcb_xvmc_surface_t surface_id;};
typedef GLXPixmap (*PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)(Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap);
struct xcb_glx_are_textures_resident_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_record_unregister_clients_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;uint32_t num_client_specs;};
struct xcb_xv_query_image_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;uint32_t id;uint16_t width;uint16_t height;};
struct xcb_change_window_attributes_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;uint32_t value_mask;};
struct xcb_glx_get_convolution_filter_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;int32_t height;uint8_t pad2[8];};
struct xcb_glx_get_minmax_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_minmax_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_query_objectiv_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_separable_filter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_randr_screen_change_notify_event_t {uint8_t response_type;uint8_t rotation;uint16_t sequence;uint32_t timestamp;uint32_t config_timestamp;xcb_window_t root;xcb_window_t request_window;uint16_t sizeID;uint16_t subpixel_order;uint16_t width;uint16_t height;uint16_t mwidth;uint16_t mheight;};
struct xcb_render_create_solid_fill_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_color_t color;};
struct xcb_screensaver_select_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;uint32_t event_mask;};
typedef void (*PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count,  GLfloat *params);
typedef void (*PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride,  GLvoid **pointer, GLint ptrstride);
struct xcb_glx_are_textures_resident_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;uint8_t pad1[20];};
struct xcb_glx_get_tex_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_tex_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_render_create_glyph_set_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t gsid;xcb_render_pictformat_t format;};
struct xcb_xf86dri_get_drawable_info_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t drawable_table_index;uint32_t drawable_table_stamp;int16_t drawable_origin_X;int16_t drawable_origin_Y;int16_t drawable_size_W;int16_t drawable_size_H;uint32_t num_clip_rects;uint8_t pad1[4];};
struct xcb_xfixes_translate_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;int16_t dx;int16_t dy;};
struct xcb_xinerama_get_screen_count_reply_t {uint8_t response_type;uint8_t screen_count;uint16_t sequence;uint32_t length;xcb_window_t window;};
struct xcb_glx_delete_queries_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_get_separable_filter_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t row_w;int32_t col_h;uint8_t pad2[8];};
struct xcb_glx_make_context_current_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_context_tag_t context_tag;uint8_t pad1[20];};
struct xcb_render_fill_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t dst;xcb_render_color_t color;};
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, GLvoid **pointer);
typedef void (*PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count,  GLfloat *params);
struct xcb_glx_get_tex_parameterfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_parameteriv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_randr_set_screen_config_reply_t {uint8_t response_type;uint8_t status;uint16_t sequence;uint32_t length;uint32_t timestamp;uint32_t config_timestamp;xcb_window_t root;uint16_t subpixel_order;uint8_t pad0[10];};
struct xcb_render_change_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;uint32_t value_mask;};
struct xcb_translate_coordinates_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t src_window;xcb_window_t dst_window;int16_t src_x;int16_t src_y;};
struct xcb_xfixes_get_cursor_image_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t xhot;uint16_t yhot;uint32_t cursor_serial;uint8_t pad1[8];};
struct xcb_xv_get_port_attribute_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_atom_t attribute;};
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, GLvoid **pointer);
typedef void (*PFNGLREPLACEMENTCODEPOINTERSUNPROC)(GLenum type, GLsizei stride,  GLvoid **pointer);
struct _XIMStringConversionCallbackStruct {XIMStringConversionPosition position;XIMCaretDirection direction;XIMStringConversionOperation operation;unsigned short factor;XIMStringConversionText *text;};
struct xcb_glx_get_pixel_mapuiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t map;};
struct xcb_glx_get_pixel_mapusv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t map;};
struct xcb_render_create_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_cursor_t cid;xcb_render_picture_t source;uint16_t x;uint16_t y;};
struct xcb_screensaver_query_info_reply_t {uint8_t response_type;uint8_t state;uint16_t sequence;uint32_t length;xcb_window_t saver_window;uint32_t ms_until_server;uint32_t ms_since_user_input;uint32_t event_mask;uint8_t kind;uint8_t pad0[7];};
struct xcb_shape_get_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_shape_kind_t source_kind;};
struct xcb_xfixes_get_cursor_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_atom_t atom;uint16_t nbytes;uint8_t pad1[18];};
struct xcb_xfixes_invert_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t source;xcb_rectangle_t bounds;xcb_xfixes_region_t destination;};
struct _003ED5EBE9EDC5550508A3829E164254 {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;Time time;int request;int first_keycode;int count;};
struct _00F641E758640FAA883D4195ED0EFEE3 {CARD32 length;CARD32 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 width;CARD32 height;FLOAT32 xorig;FLOAT32 yorig;FLOAT32 xmove;FLOAT32 ymove;};
struct _01738E5109BD63F41ECBFCFB577D1A78 {XtCallbackList start_job_callback;XtCallbackList end_job_callback;XtCallbackList doc_setup_callback;XtCallbackList page_setup_callback;XtEnum layoutmode;unsigned short page_width;unsigned short page_height;Dimension min_x;Dimension min_y;Dimension max_x;Dimension max_y;unsigned int curr_doc_num_in_job;unsigned int curr_page_num_in_doc;unsigned int curr_page_num_in_job;unsigned short default_pixmap_resolution;int print_resolution;Boolean last_page_in_doc;Boolean last_page_in_job;};
struct _019B8CCB864AFF4771EC3D9E3020C8B5 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;BYTE mode;BYTE target;BYTE map;BYTE pad1;CARD32 window;};
struct _0340F183E3D57BA98D278D6E8F4BBAEC {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD32 drawable;CARD32 mask;};
struct _04E4DAE4A3CDECE9860BD3B57B108BDE {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD32 flags;CARD32 privsize;};
struct _0566ABB5D656E83D377732EE088CAE2E {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 physicalId;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _06385DA08CE18FAF207AB6F3372C4AC2 {CARD8 type;CARD8 level;CARD16 sequenceNumber;CARD32 drawable;CARD32 damage;CARD32 timestamp;xRectangle area;xRectangle geometry;};
struct _0702AFAE85E523028461380896C86760 {BYTE type;CARD8 numKeyPerModifier;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _085FAF82344F726CA3F577D24DE6B299 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 n;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _087D3754357485F048BF88A6E8C427F7 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 offset;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _089D19AFE35A3BB9549C0E2B9D96DA0E {BYTE type;CARD8 ununsed;CARD16 sequenceNumber;CARD32 length;CARD32 majorVersion;CARD32 minorVersion;CARD32 patchVersion;CARD32 pad0;CARD32 pad1;CARD32 pad2;};
struct _091A8121C3C792D8858188DBB434C01C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD32 planeMask;};
struct _091E54628E296745C34C39E0F9BDAA79 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 retval;CARD32 size;CARD32 newMode;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _0938F46EF6BF1A288D23C461D10040B7 {BYTE type;BOOL status;CARD16 sequenceNumber;CARD32 length;CARD16 prevRes;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _0BD8AAF00E5AD5D601EEE168306C4453 {int initial_delay;int repeat_delay;int minimum_delay;int decay;Boolean flash;XtCallbackList start_callbacks;XtCallbackList stop_callbacks;int next_delay;XtIntervalId timer;XtPointer pad[4];};
struct _0BFF5F3619172B7B9D3CD50426ED3418 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 dotclock;CARD16 hdisplay;CARD16 hsyncstart;CARD16 hsyncend;CARD16 htotal;CARD16 hskew;CARD16 vdisplay;CARD16 vsyncstart;CARD16 vsyncend;CARD16 vtotal;CARD16 pad2;CARD32 flags;CARD32 reserved1;CARD32 reserved2;CARD32 reserved3;CARD32 privsize;};
struct _0C5B3DDBD9AAB3637C3C3A1D41E42158 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;INT32 value;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _0CBB5A6AED43B7843759DE8BFE16890A {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 errorScreen;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _0D0114D795552F54A79F202DB3226B55 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD32 mask;};
struct _0D1FFF2FD08E009A212466AD439E256D {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 source;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 destination;};
struct _0DEEDF24E65D3751BB6E7763FD103A13 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 src;CARD32 mask;CARD32 dst;INT16 xSrc;INT16 ySrc;INT16 xMask;INT16 yMask;INT16 xDst;INT16 yDst;CARD16 width;CARD16 height;};
struct _0E6A401F8BD845D438E717B135D77D29 {BYTE type;CARD8 format;CARD16 sequenceNumber;CARD32 length;CARD32 propertyType;CARD32 bytesAfter;CARD32 nItems;CARD32 tag;CARD32 pad1;CARD32 pad2;};
struct _1296C23E7EDA709A08D87BF116515624 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD16 dashOffset;CARD16 nDashes;};
struct _1309DA1401AD871232334AF15910FB3C {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;CARD32 gc;CARD32 shmseg;CARD32 id;CARD32 offset;INT16 src_x;INT16 src_y;CARD16 src_w;CARD16 src_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;CARD16 width;CARD16 height;CARD8 send_event;CARD8 pad1;CARD16 pad2;};
struct _13470DA4B6A7AAE8ACC864F70C5FF73E {String type;Widget widget;XtPointer event_data;Cardinal num_event_data;};
struct _1463B1446DFC3BE3591F88FAF0B4315C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cursor;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;};
struct _150405F9C54B0D4890F2C395186D419E {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 numAttribs;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _160641F2D897670075418D2E6B733231 {unsigned char e_ident[16];Elf32_Half e_type;Elf32_Half e_machine;Elf32_Word e_version;Elf32_Addr e_entry;Elf32_Off e_phoff;Elf32_Off e_shoff;Elf32_Word e_flags;Elf32_Half e_ehsize;Elf32_Half e_phentsize;Elf32_Half e_phnum;Elf32_Half e_shentsize;Elf32_Half e_shnum;Elf32_Half e_shstrndx;};
struct _160BFFB979B4E4E895FB2627A5A1E75F {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 width;CARD16 height;CARD16 rx;CARD16 ry;CARD16 rwidth;CARD16 rheight;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _19958847318214F780EFE5EAB3B1A0C9 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 num_classes;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _1A68CE477B37BE31DCB043B6F4664E49 {CARD8 reqType;BYTE num_auths;CARD16 length;CARD32 acid;};
struct _1B5F367B5963C48BD3F34F9922AB12D3 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 src;CARD32 dst;CARD32 maskFormat;CARD32 glyphset;INT16 xSrc;INT16 ySrc;};
struct _1BDC7C7F49C92F644328BBE26F29D5DE {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD8 unused0;CARD8 unused1;CARD8 unused2;CARD8 depth;CARD32 wid;CARD32 parent;CARD32 left;CARD32 right;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 c_class;CARD32 visual;CARD32 mask;};
struct _1D1C51FD6E0EDC1C8CC0D22E01FA7C4E {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 x;CARD32 y;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _1D94229A8023420ECF1EF35EE55259C6 {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;int mode;int detail;Time time;};
struct _1E42E411FAE309B90570872BD6DA89F0 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 width;CARD32 height;CARD32 window;CARD32 screen;CARD32 pad2;CARD32 pad3;};
struct _1E68C84E6BE3B673D767CBEC47B3DECA {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 visual;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _2178B426BC8C8AE0F5D29E93EB059F03 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 maxNames;CARD16 nbytes;CARD16 pad2;};
struct _23254339BB91F737308FB37B0328931B {Widget parent;XawImPart im;XawIcPart ic;XtPointer pad[4];};
struct _2427DE1D26AE87CC436F1C07EF51166C {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 displayedBuffer;CARD8 updateAction;CARD8 updateHint;CARD8 windowMode;CARD8 unused0;CARD16 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;};
struct _242BB1C523CD001B2A53A1A084DAE0C6 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 src;CARD32 dst;CARD32 maskFormat;INT16 xSrc;INT16 ySrc;};
struct _246DDDA2B420E716CCF540DCDA3D282B {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _252B149599A3B883D834EF1777AA3852 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 width;CARD32 height;CARD32 pad5;CARD32 pad6;};
struct _26A9D8D4FC2ED17163FA6119A25D6DBF {int type;unsigned int serial;int send_event;Display *display;Drawable drawable;unsigned int reason;XvPortID port_id;Time time;};
struct _27D11525F5373DBAD314D9C96183D582 {int type;unsigned int serial;int send_event;Display *display;XvPortID port_id;Time time;Atom attribute;int value;};
struct _28142D6A19F8031FDF6344CC69CB9532 {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;int same_screen;unsigned int device_state;unsigned char axes_count;unsigned char first_axis;int axis_data[6];};
struct _2881F4C235E25C1F32ED86388B1D309E {int type;unsigned int serial;int send_event;Display *display;XSyncCounter counter;XSyncValue wait_value;XSyncValue counter_value;Time time;int count;int destroyed;};
struct _2A2BB2E6A1A637B547E2DF81ADC3376A {BYTE type;BYTE errorCode;CARD16 sequenceNumber;CARD32 resourceID;CARD16 minorCode;CARD8 majorCode;BYTE pad1;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _2C727585251F722E1CFA636B2B0D134C {XtPointer next_extension;XrmQuark record_type;int version;Cardinal record_size;Boolean accepts_objects;Boolean allows_change_managed_set;};
struct _2D59FDEE4261500A2FE9AC0FF5270F5C {CARD8 type;CARD8 category;CARD16 sequenceNumber;CARD32 length;CARD8 elementHeader;BOOL clientSwapped;CARD16 pad1;CARD32 idBase;CARD32 serverTime;CARD32 recordedSequenceNumber;CARD32 pad3;CARD32 pad4;};
struct _2D6D05448839E8D39EF22D0A7A7B9E49 {BYTE type;CARD8 present;CARD16 sequenceNumber;CARD32 length;CARD16 major_version;CARD16 minor_version;CARD8 major_opcode;CARD8 first_event;CARD8 num_events;CARD8 first_error;CARD8 num_errors;CARD8 pad1;CARD16 pad2;};
struct _2DE9659B7EEC2253521CC6BF2372B999 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 state;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _31DC1A9A30C8BE83503485AFF4563DAB {unsigned char e_ident[16];Elf64_Half e_type;Elf64_Half e_machine;Elf64_Word e_version;Elf64_Addr e_entry;Elf64_Off e_phoff;Elf64_Off e_shoff;Elf64_Word e_flags;Elf64_Half e_ehsize;Elf64_Half e_phentsize;Elf64_Half e_phnum;Elf64_Half e_shentsize;Elf64_Half e_shnum;Elf64_Half e_shstrndx;};
struct _3208E1BA8126707DC1A488F29A0DED72 {CARD8 type;BOOL enabled;CARD16 sequenceNumber;CARD32 length;CARD8 elementHeader;CARD8 pad;CARD16 pad0;CARD32 nClients;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _322E4D740D2A723112F8227414848916 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _33AF8112BACFF99F66629433CE03587D {CARD32 flags;CARD8 char_range_min_char_high;CARD8 char_range_min_char_low;CARD8 char_range_max_char_high;CARD8 char_range_max_char_low;CARD8 draw_direction;CARD8 pad;CARD8 default_char_high;CARD8 default_char_low;INT16 min_bounds_left;INT16 min_bounds_right;INT16 min_bounds_width;INT16 min_bounds_ascent;INT16 min_bounds_descent;CARD16 min_bounds_attributes;INT16 max_bounds_left;INT16 max_bounds_right;INT16 max_bounds_width;INT16 max_bounds_ascent;INT16 max_bounds_descent;CARD16 max_bounds_attributes;INT16 font_ascent;INT16 font_descent;};
struct _3578C73785DC808474EBF8D1E351F2D3 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 src;CARD32 dst;CARD32 colorScale;CARD32 alphaScale;INT16 xSrc;INT16 ySrc;INT16 xDst;INT16 yDst;CARD16 width;CARD16 height;};
struct _36DEF595F1A226E1F4FE3B5A16E1057B {int type;unsigned int serial;int send_event;Display *display;Window window;Atom selection;Time time;};
struct _38AB55CADF3218184FF2A828A7079C62 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD32 nEvents;CARD8 axes;CARD8 mode;BYTE pad1;BYTE pad2;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _394027BAA9AA8E82816E9F77F29CC265 {int x;int y;int width;int height;int border_width;int depth;Visual *visual;Window root;int c_class;int bit_gravity;int win_gravity;int backing_store;unsigned int backing_planes;unsigned int backing_pixel;int save_under;Colormap colormap;int map_installed;int map_state;int all_event_masks;int your_event_mask;int do_not_propagate_mask;int override_redirect;Screen *screen;};
struct _39A4136BB030D7809586100094537552 {CorePart core;CompositePart composite;ShellPart shell;OverrideShellPart override;};
struct _3C4960FCBBDB3233211578F053843777 {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 planeMask;CARD8 format;CARD8 pad1;CARD16 pad2;};
struct _3C68DE36615A2A96935F4E8A62136411 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 selection;CARD32 time;};
struct _3D278926CADFDD0A67AC279ACD531B59 {BYTE type;CARD8 keyspermod;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _3DA4CDB67EF3124D6BB6A4128B3FCD7C {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 xhot;CARD16 yhot;CARD32 cursorSerial;CARD32 pad2;CARD32 pad3;};
struct _3DAB27C0C642F6AD6A1592659EA9CCF3 {BYTE type;CARD8 status;CARD16 sequenceNumber;CARD32 length;CARD32 newTimestamp;CARD32 newConfigTimestamp;CARD32 root;CARD16 subpixelOrder;CARD16 pad4;CARD32 pad5;CARD32 pad6;};
struct _3E0CB53261D6AD0D2D8FF0EEA54E5912 {BYTE type;CARD8 success;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _3F2E090B53825C071BE42E5C77B221DD {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _3FC3C3386C6C3548296DFC9EB081B6FE {BYTE type;CARD8 ordering;CARD16 sequenceNumber;CARD32 length;CARD32 nrects;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _431497C136870E9873948068EF0F03D8 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 fid;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _44FE0B4DD8D897C404C5F698855C1F5D {int type;unsigned int serial;int send_event;Display *display;Window window;int subtype;unsigned int cursor_serial;Time timestamp;Atom cursor_name;};
struct _4856EFEBDD7E53CA21A9CBFC75FEF206 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _4861D9BFE2A7E5E384D09A595EEA31C4 {CARD8 tc_flags[2];XETrapCfg v;XETrapCB *req_cb;XETrapCB *evt_cb;CARD32 last_time;};
struct _4A647C60455AE07B29957B156A9865A4 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 imageRes;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _4C0A166D0FCB5B830093FB9F7D7DFC34 {CARD8 reqType;CARD8 pad;CARD16 length;CARD32 drawable;CARD32 gc;INT16 x;INT16 y;};
struct _4C25F4CCE77EB8ED613895749E258BA8 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 error;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _4C65BE1067297C4FADB11C7C25C29C00 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 stringLen;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _4CEF0DA0B6BB912CC29F60746948E744 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD8 majorVersion;CARD8 minorVersion;CARD16 pad;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _4D3786CE601BCE38E7C1926A41A4FA0B {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 max;CARD32 size;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _4DAB985EC804DF06DE833983110A4312 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 printContext;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _4DBA840A262C58E6AC422C7E2FFFF3EA {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 region;INT16 dx;INT16 dy;};
struct _4DCAC2088B3F168EF4BFBCEA383ECFD2 {CARD8 reqType;CARD8 format;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 planeMask;};
struct _4E2DFB9F6290197309D31FB10928FA58 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _4E3F1E4C1E1A83481E83EC5617B4D6E4 {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 internalformat;CARD32 width;CARD32 format;CARD32 type;};
struct _4E404080472975271550CB06928F4DCD {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 width;CARD32 height;CARD32 format;CARD32 type;CARD32 nullImage;};
struct _5017C5E321C1F8BFCB8C657324B6EA8C {BYTE type;BOOL pad;CARD16 sequenceNumber;CARD32 length;CARD16 size;CARD16 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _518F0DEC427BFC57A6F8B4A0E681A1CE {CARD32 count;CARD32 timestamp;CARD8 type;CARD8 screen;INT16 win_x;INT16 win_y;CARD16 client;};
struct _52CB3FFAB7580FFF5F815C5CB2D8B1B5 {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 components;CARD32 width;CARD32 height;CARD32 border;CARD32 format;CARD32 type;};
struct _52CBE65B67561D76877705E9E11130C9 {XtPointer next_extension;XrmQuark record_type;int version;Cardinal record_size;XtArgsProc get_values_hook;};
struct _546FDEDFB3946C28A5792DCE2825D685 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _54B79DB8E4CBEE2C88E3D67FC733EBBD {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 width;CARD32 height;CARD32 format;CARD32 type;};
struct _54EF5FF687867CC801B0E66E7A862080 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 n;CARD32 npipes;CARD32 hpId;CARD32 pad5;CARD32 pad6;};
struct _5588D47BF677798F0DBD9E168C93317B {BYTE type;CARD8 compression;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _55F7F426FEFBA4DDF34FBEE0D54465AF {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;};
struct _56236F995320E9550D01648098F1E75E {CARD8 reqType;CARD8 mode;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD8 format;BYTE pad[3];CARD32 nUnits;};
struct _5C2B60FA26E73A1BF39A96E97412C65C {CARD8 reqType;BOOL contiguous;CARD16 length;CARD32 cmap;CARD16 colors;CARD16 planes;};
struct _5C360CD6F7BDFED17568144DDDEE5A5E {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD16 width_actual;CARD16 height_actual;CARD16 num_palette_entries;CARD16 entry_bytes;CARD8 component_order[4];CARD32 padl5;CARD32 padl6;CARD32 padl7;};
struct _5C7A236BA0562DB05D77CA85FA8CD202 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 replies_hint;CARD32 num_chars;CARD32 nbytes;};
struct _5C8033F90A64FC4676BFB935617D1B44 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 configlen;CARD16 modulelen;CARD16 loglen;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _5CD4A96D42C01A4BC625F6F1B381D291 {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 picture;CARD32 region;INT16 xOrigin;INT16 yOrigin;};
struct _5CFC2639D93A82964D22ABF82B05BF7F {BYTE type;CARD8 majorVersion;CARD16 sequenceNumber;CARD32 length;CARD16 minorVersion;CARD16 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _5DD49376C74765CB7E96286DDB46181E {String type;Widget widget;XtGeometryMask changeMask;XWindowChanges changes;};
struct _5E5FECD46FC629FFA3831CFFFA8A0613 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 width;CARD32 height;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _5E8F645B7662834A694E868B27EBBB24 {BYTE type;CARD8 nExtensions;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _5F0218706A29D3B501048FD21A470406 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 inputCount;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _5FD5198515091F6F9684846B8D2DAFFB {BYTE type;CARD8 flags;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _604D81E4FA484317851D2FA1962E3052 {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;Time time;int request;};
struct _618D74B62491482EAF0B43D47E77026B {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int button;int same_screen;unsigned int device_state;unsigned char axes_count;unsigned char first_axis;int axis_data[6];};
struct _61B607A2274ED5109A268B0B2173104D {Elf64_Word p_type;Elf64_Word p_flags;Elf64_Off p_offset;Elf64_Addr p_vaddr;Elf64_Addr p_paddr;Elf64_Xword p_filesz;Elf64_Xword p_memsz;Elf64_Xword p_align;};
struct _621D16500987A711CC39A0AD4484DBF8 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 timeout;CARD16 interval;BOOL preferBlanking;BOOL allowExposures;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _624041EF38A3D722ECC431A5F82DF930 {BYTE type;CARD8 auth_index;CARD16 sequenceNumber;CARD32 length;CARD16 status;CARD16 pad;};
struct _62E4225A05F3FA192F1EADC1962F3FA7 {BYTE type;BYTE unused;CARD16 sequenceNumber;CARD32 buffer;BYTE state;CARD8 unused1;CARD16 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;CARD32 unused6;CARD32 unused7;};
struct _64A10EE371E893EA59638110B65879C5 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 number;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _65CC1628E84FE837888FBDC426B5411E {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 flags;CARD32 clocks;CARD32 maxclocks;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _67409BAD9025072768D801439602E625 {int reason;XEvent *event;XPContext context;Boolean last_page_in_doc;Boolean last_page_in_job;XtPointer detail;};
struct _67EB8B73AFD8C3C32B210944A0EE6A33 {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 lbxLength;CARD32 xLength;CARD32 visual;CARD8 compressionMethod;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _68EFEC536F03412D58850C40CDE6BAE5 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xRenderColor color;};
struct _6AA03524D3DE094A4520E6B853ADD0D3 {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 start;CARD32 count;CARD32 format;CARD32 type;};
struct _6B16D0CDF8A6D24951AF7FC52FCEB99B {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 vpage;CARD32 pad;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _6BBDD4222850636FE766E2CAFC28CB09 {XpuMediumSourceSizeRec *medium;XpuResolutionRec *resolution;XpuOrientationRec *orientation;XpuPlexRec *plex;};
struct _6C157D281FCCF3AD18E5920BAFADC6E6 {Elf64_Word sh_name;Elf64_Word sh_type;Elf64_Xword sh_flags;Elf64_Addr sh_addr;Elf64_Off sh_offset;Elf64_Xword sh_size;Elf64_Word sh_link;Elf64_Word sh_info;Elf64_Xword sh_addralign;Elf64_Xword sh_entsize;};
struct _6C531080E0330861B126A2833D727845 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cid;CARD32 source;CARD32 mask;CARD16 sourceChar;CARD16 maskChar;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;};
struct _6E58DE7E5977316D543695706C282257 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;BOOL onoff;CARD8 pad1;CARD16 pad2;};
struct _6FB552EA524F38554FA8528F506D34FD {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cid;CARD32 source;CARD32 mask;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;CARD16 x;CARD16 y;};
struct _702BBE03CA55F2529059C1331C136CB9 {int type;unsigned int serial;int send_event;Display *display;Window window;Atom message_type;int format;union _702BBE03CA55F2529059C1331C136CB9___BF437CD3F94558FA799CF6E0127CD317 data;};
struct _70E4CC7E54BA43D6E5622AB555079691 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad2;};
struct _7223AFE63A8123EF6F49E197890FAA10 {CARD8 reqType;BOOL range;CARD16 length;CARD32 fid;CARD32 num_ranges;};
struct _7286F01C0F25CC9697D9D7CFCD5C4B3B {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 standby;CARD16 suspend;CARD16 off;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _7374270A99571F2A61066392503F95BA {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;INT16 xOrigin;INT16 yOrigin;};
struct _748E6396DB81A71CC67026C5868B0A61 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 status;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _749257863A78ACF83BA10F9F553F4560 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 request;CARD8 firstKeyCode;CARD8 count;BYTE pad1;CARD32 time;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _75FC8135A7E79B969971564222AED43C {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;CARD32 gc;CARD32 id;INT16 src_x;INT16 src_y;CARD16 src_w;CARD16 src_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;CARD16 width;CARD16 height;};
struct _76C432023C30A60D6F0CA03B71EF1A2A {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD32 focus;CARD32 time;CARD8 revertTo;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;};
struct _775C8D8A4887E1FCC801B4D481FA4360 {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int keycode;int same_screen;unsigned int device_state;unsigned char axes_count;unsigned char first_axis;int axis_data[6];};
struct _77AFB732CE0E94178E86FE7589E57943 {int type;unsigned int serial;int send_event;Display *display;Window window;Atom atom;Time time;int state;};
struct _77B5DA89F8222E8D6D7C1ABF47542A30 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 drawable;CARD32 gc;};
struct _78B46019F679C5E70AAD7C2ED28277AC {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 mask;CARD8 deviceid;CARD8 feedbackid;BYTE pad1;BYTE pad2;};
struct _7905F1106D6192C786F48B3D63EB8F32 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;};
struct _7963ED2253978A4E491ADF870F9A304B {Elf64_Word st_name;unsigned char st_info;unsigned char st_other;Elf64_Half st_shndx;Elf64_Addr st_value;Elf64_Xword st_size;};
struct _79997B0BE24A7D700C550979629A1B8E {jas_image_coord_t tlx_;jas_image_coord_t tly_;jas_image_coord_t brx_;jas_image_coord_t bry_;int numcmpts_;int maxcmpts_;jas_image_cmpt_t **cmpts_;jas_clrspc_t clrspc_;jas_cmprof_t *cmprof_;char inmem_;};
struct _7A75335468D0F989B2CF91A04174818E {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD8 op;CARD8 pad1;CARD16 pad2;CARD32 dst;xRenderColor color;};
struct _7B1AACD52ED53B3363F77B2C48FE4393 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;CARD16 count;CARD8 mode;BYTE pad;};
struct _7CA3BFA0E2ACF16B623A64955922766D {CARD8 reqType;BYTE alloc;CARD16 length;CARD32 mid;CARD32 window;CARD32 visual;};
struct _7CC8751860F3412009ACB1FCC844661E {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 retval;CARD32 size;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _7D044E98E295B1AE6D053F4E096E3E34 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _7F1527F4980126EB9203A44DB3E05AC8 {u_char vers;u_char type;u_char answer;u_char pad;u_int32_t id_num;struct osockaddr addr;struct osockaddr ctl_addr;int32_t pid;char l_name[12];char r_name[12];char r_tty[16];};
struct _7F9CDB57B2273A7A35E8F17907E745D4 {XpuMediumSourceSizeRec *medium;XpuResolutionRec *resolution;XpuOrientationRec *orientation;XpuPlexRec *plex;int copies;};
struct _80262239D5DEFAC7F5C75EBAC6CCD93C {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 num_classes;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _82CA72D52CE6587547984538D976BD84 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 mousetype;CARD32 baudrate;CARD32 samplerate;CARD32 resolution;CARD32 buttons;BOOL emulate3buttons;BOOL chordmiddle;CARD16 pad2;CARD32 emulate3timeout;CARD32 flags;CARD32 devnamelen;};
struct _82D86B5B3C9D9E6A7BE98808A956EE82 {CARD8 reqType;BYTE coordMode;CARD16 length;CARD32 drawable;CARD32 gc;};
struct _832302596B16D7C435F01BD429ECA1F5 {XtPointer next_extension;XrmQuark record_type;int version;Cardinal record_size;XtGeometryHandler root_geometry_manager;};
struct _861FAFCB43E78E06EE70900C6267245C {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 width;CARD32 height;CARD32 depth;CARD32 pad6;};
struct _86549870A56B750901787CF4B94C9DDE {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 valueLen;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _884E74C734502FDAE5886BDFF852D3B6 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _896D23E0DCE5181A858CD1FDEDFC63B0 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 count;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _8BD108F1E7322F577EC46D8A34BD7229 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 purge_runs;CARD32 purge_stat;CARD32 balance;CARD32 reserve0;CARD32 f_hits;CARD32 f_misshits;CARD32 f_purged;CARD32 f_usage;CARD32 f_reserve0;CARD32 v_hits;CARD32 v_misshits;CARD32 v_purged;CARD32 v_usage;CARD32 v_reserve0;};
struct _8DDBCDCB4EEBED7E3946A9A0AA381214 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 mem1;CARD32 mem2;CARD32 size;CARD32 offset;CARD32 extra;CARD32 pad2;};
struct _8E9D6FDA341A5CD3E2BA41AECEFC8DB5 {BYTE type;CARD8 revertTo;CARD16 sequenceNumber;CARD32 length;CARD32 focus;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _8ED1EDE36117F631290006C3E9446427 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;INT16 xOff;INT16 yOff;};
struct _8ED815E5FBCF56EC30B814FDB5559582 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 xhot;CARD16 yhot;CARD32 cursorSerial;CARD32 cursorName;CARD16 nbytes;CARD16 pad;};
struct _90E70BB8598364AAEAF6E156E433A864 {BYTE type;CARD8 num_resolutions;CARD16 sequenceNumber;CARD32 length;};
struct _91B6CB490464A345E007449761AA48F2 {CARD8 reqType;BOOL contiguous;CARD16 length;CARD32 cmap;CARD16 colors;CARD16 red;CARD16 green;CARD16 blue;};
struct _91DA6C1759B9453440D37A912FAA4391 {BYTE type;BOOL onOff;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _925C5E9ADF13AF08F8E4BE2898EADC8C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 mask;};
struct _92C41753C7AFA0CB8157A9B4DAA6D4C8 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 picture;xRenderTransform transform;};
struct _932C98117C7FBC3E6D86F96BD678D2D1 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 number;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _95F74D7453875C15752E25CB7F1BF0CB {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 time;CARD32 window;BYTE mode;CARD8 deviceid;BYTE pad1;BYTE pad2;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;};
struct _975F191B774855E1091B820C10595CF2 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 x;CARD16 y;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _9763FFEA107F886AC733AD6B5D71CF1E {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _9B215D7B412F7706499A9C5F7AE2BF48 {CARD32 pf_ident;CARD16 xtrap_release;CARD16 xtrap_version;CARD16 xtrap_revision;CARD16 max_pkt_size;CARD8 valid[4];CARD32 major_opcode;CARD32 event_base;CARD32 pad0;CARD16 pad1;CARD16 pad2;CARD16 pad3;CARD16 xtrap_protocol;INT16 cur_x;INT16 cur_y;};
struct _9B8DBD56B2ADF437D63C1746D87B8C1A {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 physicalScreen;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _9C8855C5416F841FBC956426CB420C87 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 modifier_device;CARD8 key;CARD8 grabbed_device;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _9C9793AFB485CBCDC1723AA9DA7467C7 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 drawable;BOOL onoff;CARD8 pad1;CARD16 pad2;};
struct _9D085620EB695911E35E2B9DE84C0E07 {int type;unsigned int serial;int send_event;Display *display;Window window;int subtype;Window owner;Atom selection;Time timestamp;Time selection_timestamp;};
struct _9D24C8DB1BE3DD751F7CBDF214675376 {Elf64_Word __p_type;Elf64_Word p_flags;Elf64_Off p_offset;Elf64_Addr p_vaddr;Elf64_Addr p_paddr;Elf64_Xword p_filesz;Elf64_Xword p_memsz;Elf64_Xword p_align;};
struct _9D856B837113E1B9C553BEF8F42066D9 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;CARD32 gc;INT16 vid_x;INT16 vid_y;CARD16 vid_w;CARD16 vid_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;};
struct _9D9F8CC524C7DD4F9704759512315B2D {String type;Widget widget;ArgList args;Cardinal num_args;};
struct _9ED58EEAFF80161A60B7DFF5CDA307D2 {BYTE type;CARD8 keysperkeycode;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _9F409A22DE3AD0D94F719EC6F00E420F {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 ret;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _9FED812B80655AE33F3AD93E5626D145 {XtGeometryMask request_mode;Position x;Position y;Dimension width;Dimension height;Dimension border_width;Widget sibling;int stack_mode;};
struct _A03D8E09E1901FA73C4A77E2D3267500 {BYTE type;CARD8 nOpts;CARD16 sequenceNumber;CARD32 length;CARD32 optDataStart;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _A043DEDA58AACB0ED59B54E1362CDED0 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 max_request_size;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _A1AC26B3F52FABB6E699F530F015B0DD {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xPointFixed p1;xPointFixed p2;CARD32 nStops;};
struct _A23F2D0A331F720D631E2B6171CC3ECA {CARD8 reqType;BYTE pad;CARD16 length;CARD32 id;};
struct _A27B2EF13B029B6AC017266492BED372 {CARD8 reqType;BYTE pad;CARD16 length;INT16 timeout;INT16 interval;BYTE preferBlank;BYTE allowExpose;CARD16 pad2;};
struct _A27C0735E8A7EB8595B640D9B7BEF349 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD32 default_root;CARD32 root_visual;CARD32 default_colormap;CARD32 black_pixel;CARD32 white_pixel;BOOL single_screen;BOOL app_group_leader;CARD16 pad2;};
struct _A2FB221EC01549407EDCF016C4C0632F {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 status;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _A365B987896F695263E94A4D93A744FD {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 offset;CARD32 width;CARD32 bank_size;CARD32 ram_size;CARD32 pad4;CARD32 pad5;};
struct _A400BCBF43F87F2088946A887ADD242F {BYTE type;CARD8 nExtensions;CARD16 sequenceNumber;CARD32 length;};
struct _A47C75AE74EA14FC2F54815F4A8813BA {String type;Widget widget;XtWidgetGeometry *request;XtWidgetGeometry *reply;XtGeometryResult result;};
struct _A4A7C3BD565590D1E17F737ABF60719A {BYTE type;CARD8 capabilities;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 uid;CARD32 gid;CARD32 signature;CARD32 pad1;CARD32 pad2;};
struct _A56827FA99728A529A1C213E34F0D83D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 time;CARD8 mode;CARD8 deviceid;BYTE pad1;BYTE pad2;};
struct _A80CA2BDA095D60FE5AEEB62DEB4779D {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 patchVersion;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _A8C15E0CCC4F1BB7303BFAC73A97A837 {CARD8 type;BYTE state;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 tilOrSince;CARD32 idle;CARD32 eventMask;BYTE kind;CARD8 pad0;CARD16 pad1;CARD32 pad2;};
struct _AC93509FFB6B9C1B98C9154A5D973C79 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 modifier_device;CARD8 button;CARD8 grabbed_device;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _AEEA76D8CE49243D0419CEF55BCA8374 {BYTE type;BOOL pad;CARD16 sequenceNumber;CARD32 length;CARD32 red;CARD32 green;CARD32 blue;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _B030971557B6948BCB07CDE1436E426E {BYTE type;CARD8 enabled;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _B173786F760212F3DBD7C5A6C83676A6 {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 internalformat;CARD32 width;CARD32 height;CARD32 format;CARD32 type;};
struct _B2B69F9AD24016B318383C2A7C8A2E10 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 numFBConfigs;CARD32 numAttribs;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _B2F7B8A6150007A0765871980FCF4D2A {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 gc;CARD32 region;INT16 xOrigin;INT16 yOrigin;};
struct _B3154DDC89CC03C065CC7D94E90D12B0 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 start_id;CARD32 count;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _B36C03EE0DB03800CDBEDA1CF8CFFD5F {XExtData *ext_data;Font fid;unsigned int direction;unsigned int min_char_or_byte2;unsigned int max_char_or_byte2;unsigned int min_byte1;unsigned int max_byte1;int all_chars_exist;unsigned int default_char;int n_properties;XFontProp *properties;XCharStruct min_bounds;XCharStruct max_bounds;XCharStruct *per_char;int ascent;int descent;};
struct _B39400A659C1078B091D331E19541038 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD32 app_group;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _B4B234DF51BFD6860BC6DFAD9B63C9C2 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 result;CARD32 pad;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _B4FA891B630887EC538EB91F019A9C2C {CARD8 state_flags[2];CARD16 pad0;XETrapCfg config;CARD32 pad1;};
struct _B5E8E02F7A52D99CF4C865E96F59C543 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 attribute;INT32 value;};
struct _B8340C644CDB6E95F3781F01B22F6B41 {BYTE type;CARD8 num_catalogues;CARD16 sequenceNumber;CARD32 length;};
struct _BB307DE81D005F0ABA15BB97E20A0808 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 normalInfo;CARD16 stereoInfo;CARD32 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;};
struct _BC522D80D70F7E982D1D01F262D61B8C {int type;unsigned int serial;int send_event;Display *display;Window owner;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct _BD550A7A04DEFA8C16DE6F55E7178AE2 {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;char is_hint;int same_screen;unsigned int device_state;unsigned char axes_count;unsigned char first_axis;int axis_data[6];};
struct _BD71CB07C4DDF44AC99036AEC3635494 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD8 majorVersion;CARD8 minorVersion;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _BDC2BC4E1FC4E3665C531F87A904F1CB {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD32 time;CARD8 request;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _C1A851173DD816DDF7F0E0D062CEFEE2 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cursor;CARD32 time;CARD16 eventMask;CARD16 pad2;};
struct _C636080007C4706D90F0D4DC955336B1 {BYTE type;BOOL pad;CARD16 sequenceNumber;CARD32 length;CARD32 permissions;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _C7406CB336B739A87F2A2E6FB42BC742 {CARD8 reqType;CARD8 flags;CARD16 length;CARD32 cmap;CARD32 pixel;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct _C889EC8CC43E7C0CC7EDA4C569652F40 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 eventMask;CARD16 bufferIndex;CARD8 side;CARD8 unused0;CARD32 unused1;CARD32 unused2;CARD32 unused3;};
struct _C96B45266D904955FF5B1BE5BB2CC4AC {int type;unsigned int serial;int send_event;Display *display;Window window;XID deviceid;Time time;int num_classes;char data[64];};
struct _CBEB826488D526BABFC41413DDE1C327 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 modecount;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _CE94CBC997C090EAAC40968C8F5E3465 {BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 width;CARD32 height;FLOAT32 xorig;FLOAT32 yorig;FLOAT32 xmove;FLOAT32 ymove;};
struct _CF0026E7EC4F507009AD4F7D07FF93B8 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 n;CARD32 success;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _CF062F67C3439FCE826EEADEB80EF798 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 atomsStart;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _CFD68B7ADBC82BE7EABF4FDEA780590F {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 major_version;CARD16 minor_version;BOOL present;CARD8 pad1;CARD8 pad2;CARD8 pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct _D293DB0BD17AE7654E9C3A224EBA1B54 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 num_extents;};
struct _D498926E8696BF91244D867CE73FD66E {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 eventMask;CARD32 allEventsMask;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _D4B7CCBA990A156E447947BB060E0786 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcGC;CARD32 dstGC;CARD32 mask;};
struct _D70593ABB97D9ADE4A069324C98D63AE {BYTE type;CARD8 format;CARD16 sequenceNumber;CARD32 length;CARD32 propertyType;CARD32 bytesAfter;CARD32 nItems;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _D7CE09BF9A0F6F73C5A4D3330C0E16F2 {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 imageHeight;CARD32 imageDepth;CARD32 skipRows;CARD32 skipImages;CARD32 skipVolumes;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 internalformat;CARD32 width;CARD32 height;CARD32 depth;CARD32 size4d;CARD32 border;CARD32 format;CARD32 type;CARD32 nullimage;};
struct _D91B7973290C063AF6BE980DDFB9E8E4 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 addr;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _D9975735FE375B63E13B12CE4075213A {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 screenCount;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _DA4CA76774A2C175F5D0B77BF61D79A2 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _DA732864DAD897F0B587BCCAD8E078EE {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _DAEBDFCF6641BEDF5371E5E95CD6FE55 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 listCount;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _DB0E3B2132CB3BCDB478CD47716D7AA6 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 start;CARD32 stop;};
struct _DB0EFD4055EE50FF77A024DEFEA8EE37 {Elf64_Word st_name;unsigned char st_info;unsigned char st_other;Elf64_Section st_shndx;Elf64_Addr st_value;Elf64_Xword st_size;};
struct _DB2D4F6E439022CA547DF8AA2CE83D6E {CARD32 id;CARD8 type;CARD8 depth;CARD16 pad1;xDirectFormat dirent;CARD32 colormap;};
struct _DBE3D025CF6B61E7535360E73F7BAA3C {CARD8 type;CARD8 detail;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;XETrapGetStatsRep data;};
struct _DC32A0924BDC2649CEA8C5E8AC72EF13 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 mid;CARD32 srcCmap;};
struct _DEB6ED3E3E48801FAB6806704D963455 {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;};
struct _DF21E726BD65398407620C5BBBA9E08C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 property;};
struct _E0F65D5058ACC2BC5F9AF2EDFFAF29D1 {CARD32 windowId;CARD32 defaultColormap;CARD32 whitePixel;CARD32 blackPixel;CARD32 currentInputMask;CARD16 pixWidth;CARD16 pixHeight;CARD16 mmWidth;CARD16 mmHeight;CARD16 minInstalledMaps;CARD16 maxInstalledMaps;CARD32 rootVisualID;CARD8 backingStore;BOOL saveUnders;CARD8 rootDepth;CARD8 nDepths;};
struct _E253BFAEF58A5A0733BD8E7952BEDE5F {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 numberBuffer;CARD16 unused1;CARD32 unused2;CARD32 unused3;CARD32 unused4;CARD32 unused5;CARD32 unused6;};
struct _E5FCE84481A5DA4B542276D3CC112A29 {BYTE type;BYTE event_code;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;};
struct _E5FEC4B44082A4B8B21FC86BB58EB49C {BYTE type;CARD8 keySymsPerKeyCode;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _E63B05C5B736EEB1B492508D1A96BE3C {BYTE type;CARD8 pad;CARD16 sequenceNumber;CARD32 length;CARD32 tag;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _E8D391135C8469DFAA1B91EC6A7D7277 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 offset;CARD32 flags;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _E979E361A2908732FE24CBF47752810D {BYTE type;CARD8 otherid_valid;CARD16 sequenceNumber;CARD32 length;CARD32 otherid;BYTE cachable;BYTE pad1;CARD16 pad2;};
struct _E98D3537A10D6D7A36EB2CF02D2A733B {BYTE type;BOOL same;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _E99E267610E58315722078BC51216460 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD16 x;CARD16 y;CARD16 w;CARD16 h;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _E9CA16F3AD9E9F5B10D815E98DF6D9BD {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 n;CARD32 npipes;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _EC87D4E5EFECFC4D155F79244EABA9BB {CARD8 reqType;BYTE mode;CARD16 length;CARD32 window;};
struct _EDE17C06FAF221A5878FFED27CF569B6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD32 time;CARD16 event_count;CARD8 this_device_mode;CARD8 other_devices_mode;BOOL ownerEvents;CARD8 deviceid;CARD16 pad01;};
struct _EE866C64B9E084E52F8894370051FA3D {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 nElts;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct _EF54914952AB89C7E0EBAF949772487D {BYTE type;BOOL enabled;CARD16 sequenceNumber;CARD32 length;CARD16 nHosts;CARD16 pad1;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _EF7BB4E5444BE1EDC70E587EA13D8BB4 {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 imageHeight;CARD32 imageDepth;CARD32 skipRows;CARD32 skipImages;CARD32 skipVolumes;CARD32 skipPixels;CARD32 alignment;CARD32 target;CARD32 level;CARD32 xoffset;CARD32 yoffset;CARD32 zoffset;CARD32 woffset;CARD32 width;CARD32 height;CARD32 depth;CARD32 size4d;CARD32 format;CARD32 type;CARD32 nullImage;};
struct _EFD6C7D4777DD13E0B1CDD145692A98C {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD16 server_major_version;CARD16 server_minor_version;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _F059149F541946541B5DFE9F6EB20E96 {fsOffset32 name;fsOffset32 value;CARD8 type;BYTE pad0;CARD16 pad1;};
struct _F0BD037E525ACFEA0C1F272EFA8FD580 {CARD8 reqType;BOOL delete;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD32 longOffset;CARD32 longLength;};
struct _F172F94299C982F5FEAF6C4E72460A72 {XSyncCounter counter;XSyncValueType value_type;XSyncValue wait_value;XSyncTestType test_type;};
struct _F1CA5290AFDA1F8F382C2CF8549939AD {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 flags;CARD32 pad;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _F1E1BB7F23F71F625712F6F0DB53C50A {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _F21D8018CF145B47A329D27C35E96B99 {CARD8 reqType;BOOL oddLength;CARD16 length;CARD32 fid;};
struct _F2B759443FC190F802FE53FB7862F04C {CARD8 c_class;CARD8 id;CARD16 length;CARD32 resolution;INT32 min_value;INT32 max_value;};
struct _F38DCD124B444AE28722F96474B80F5D {BYTE type;CARD8 nElts;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _F464FEA7A4E5B570917C7E6E5C96B7A9 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 statusCode;CARD32 finishedFlag;CARD32 dataLen;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _F57445CCAF99E2554B974CAECD301767 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 time;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _F5921867A833B452F3779F1505474C7F {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 n;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _F5EF5DA862DE88FCCA82FCE0F474E907 {CARD8 reqType;CARD8 depth;CARD16 length;CARD32 wid;CARD32 parent;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 c_class;CARD32 visual;CARD32 mask;};
struct _F683121DA6B0B811B23B9D483FF7482A {CARD8 reqType;BYTE pad;CARD16 length;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;CARD32 time;};
struct _F6E4DA94E7160BC83621C4F78D7EDA8D {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 width;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _F8C87AC2A7BC3CC5A7E8B476E8E692C2 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 majorVersion;CARD32 minorVersion;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _FCBEDAD8A539FBE868C0633AE68719B3 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 rootWindow;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _FCC23D59EDC7C9AEBCA8416FDF631F7E {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 valueMask;};
struct _FD8FCB430836D04139012301F63EB9C6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 start;CARD32 stop;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _FD9483B813B6D6AD9C03ECC43231FAB9 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 himark;CARD32 lowmark;CARD32 balance;CARD32 reserve0;CARD32 reserve1;CARD32 reserve2;};
struct _FDC4E96304CD6EC3DE0DB0C9DA4747DA {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 numVisuals;CARD32 numProps;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _FE8C559F4B68F5A3A5D9DBCE5E9919CF {BYTE type;CARD8 success;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _FEE235D246429C26A250F47C5DFFA7E6 {int type;unsigned int serial;int send_event;Display *display;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct _FF07158C3282A916C3A4C5C72C8100CA {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD32 pad;XETrapInputReq input;};
struct _FF16F36C84D77908C186E6C9218E9417 {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD32 kbdtype;CARD32 rate;CARD32 delay;BOOL servnumlock;BOOL pad2;CARD16 pad3;CARD32 pad4;CARD32 pad5;};
typedef void (*PFNGLMULTIMODEDRAWELEMENTSIBMPROC)( GLenum *mode,  GLsizei *count, GLenum type,  GLvoid * *indices, GLsizei primcount, GLint modestride);
struct xcb_create_glyph_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cid;xcb_font_t source_font;xcb_font_t mask_font;uint16_t source_char;uint16_t mask_char;uint16_t fore_red;uint16_t fore_green;uint16_t fore_blue;uint16_t back_red;uint16_t back_green;uint16_t back_blue;};
struct xcb_glx_delete_textures_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_feedback_buffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t size;int32_t type;};
struct xcb_glx_gen_queries_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_get_color_table_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_glx_get_pixel_mapfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t map;};
struct xcb_glx_get_queryiv_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_poly_fill_rectangle_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_record_enable_context_reply_t {uint8_t response_type;uint8_t category;uint16_t sequence;uint32_t length;xcb_record_element_header_t element_header;uint8_t client_swapped;uint8_t pad0[2];uint32_t xid_base;uint32_t server_time;uint32_t rec_sequence_num;uint8_t pad1[8];};
struct xcb_set_clip_rectangles_request_t {uint8_t major_opcode;uint8_t ordering;uint16_t length;xcb_gcontext_t gc;int16_t clip_x_origin;int16_t clip_y_origin;};
struct xcb_sync_change_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;xcb_sync_int64_t amount;};
struct xcb_sync_create_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t id;xcb_sync_int64_t initial_value;};
struct xcb_test_compare_cursor_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_cursor_t cursor;};
struct xcb_translate_coordinates_reply_t {uint8_t response_type;uint8_t same_screen;uint16_t sequence;uint32_t length;xcb_window_t child;uint16_t dst_x;uint16_t dst_y;};
struct xcb_xv_get_port_attribute_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int32_t value;};
struct xcb_xvmc_create_surface_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_surface_t surface_id;xcb_xvmc_context_t context_id;};
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, GLvoid **pointer);
struct xcb_glx_get_clip_plane_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t plane;};
struct xcb_glx_get_materialfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t face;uint32_t pname;};
struct xcb_glx_get_materialiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t face;uint32_t pname;};
struct xcb_glx_vendor_private_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t vendor_code;xcb_glx_context_tag_t context_tag;};
typedef FT_Error (*FT_Incremental_GetGlyphDataFunc)(FT_Incremental incremental, FT_UInt glyph_index, FT_Data *adata);
typedef void (*PFNGLFOGCOORDPOINTERLISTIBMPROC)(GLenum type, GLint stride,  GLvoid **pointer, GLint ptrstride);
typedef void (*PFNGLTEXCOORDPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride,  GLvoid **pointer, GLint ptrstride);
typedef void (*PFNGLVERTEXWEIGHTPOINTEREXTPROC)(GLsizei size, GLenum type, GLsizei stride,  GLvoid *pointer);
struct xcb_get_motion_events_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;xcb_timestamp_t start;xcb_timestamp_t stop;};
struct xcb_get_selection_owner_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t owner;};
struct xcb_glx_get_color_table_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;uint8_t pad2[12];};
struct xcb_glx_get_histogram_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;uint8_t reset;};
struct xcb_glx_get_pixel_mapfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_queryiv_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_envfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_tex_enviv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t pname;};
struct xcb_glx_get_tex_gendv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t coord;uint32_t pname;};
struct xcb_glx_get_tex_genfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t coord;uint32_t pname;};
struct xcb_glx_get_tex_geniv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t coord;uint32_t pname;};
struct xcb_glx_pbuffer_clobber_event_t {uint8_t response_type;uint16_t event_type;uint16_t sequence;uint16_t draw_type;xcb_glx_drawable_t drawable;uint32_t b_mask;uint16_t aux_buffer;uint16_t x;uint16_t y;uint16_t width;uint16_t height;uint16_t count;uint8_t pad0[4];};
struct xcb_glx_select_buffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t size;};
struct xcb_render_add_glyphs_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_glyphset_t glyphset;uint32_t glyphs_len;};
struct xcb_rotate_properties_request_t {uint8_t major_opcode;xcb_window_t window;uint16_t length;uint16_t atoms_len;int16_t delta;};
struct xcb_shape_query_extents_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t bounding_shaped;uint8_t clip_shaped;uint8_t pad1[2];int16_t bounding_shape_extents_x;int16_t bounding_shape_extents_y;uint16_t bounding_shape_extents_width;uint16_t bounding_shape_extents_height;int16_t clip_shape_extents_x;int16_t clip_shape_extents_y;uint16_t clip_shape_extents_width;uint16_t clip_shape_extents_height;};
struct xcb_store_named_color_request_t {uint8_t major_opcode;uint8_t flags;uint16_t length;xcb_colormap_t cmap;uint32_t pixel;uint16_t name_len;};
struct xcb_sync_change_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t id;uint32_t value_mask;};
struct xcb_sync_create_alarm_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_alarm_t id;uint32_t value_mask;};
struct xcb_sync_set_priority_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t id;int32_t priority;};
struct xcb_xfixes_fetch_region_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_rectangle_t extents;uint8_t pad1[16];};
struct GLXCreateContextWithConfigSGIX {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;CARD32 pad1;CARD32 context;CARD32 fbconfig;CARD32 screen;CARD32 renderType;CARD32 shareList;BOOL isDirect;CARD8 reserved1;CARD16 reserved2;};
typedef void (*PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index,  GLcharARB *name);
typedef GLint (*PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj,  GLcharARB *name);
typedef void (*PFNGLTEXCOORDPOINTERVINTELPROC)(GLint size, GLenum type,  GLvoid **pointer);
struct xcb_glx_gen_textures_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t n;};
struct xcb_glx_get_booleanv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t pname;};
struct xcb_glx_get_integerv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;};
struct xcb_glx_get_materialfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_materialiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_is_query_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t id;};
struct xcb_glx_render_large_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint16_t request_num;uint16_t request_total;uint32_t data_len;};
struct xcb_glx_swap_buffers_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;xcb_glx_drawable_t drawable;};
struct xcb_record_get_context_reply_t {uint8_t response_type;uint8_t enabled;uint16_t sequence;uint32_t length;xcb_record_element_header_t element_header;uint8_t pad0[3];uint32_t num_intercepted_clients;uint8_t pad1[16];};
struct xcb_render_add_traps_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;int16_t x_off;int16_t y_off;};
struct xcb_render_composite_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t mask;xcb_render_picture_t dst;int16_t src_x;int16_t src_y;int16_t mask_x;int16_t mask_y;int16_t dst_x;int16_t dst_y;uint16_t width;uint16_t height;};
struct xcb_screensaver_notify_event_t {uint8_t response_type;uint8_t code;uint16_t sequence;uint8_t state;uint16_t sequence_number;xcb_timestamp_t time;xcb_window_t root;xcb_window_t window;uint8_t kind;uint8_t forced;uint8_t pad0[14];};
struct xcb_sync_query_counter_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_sync_int64_t counter_value;};
struct xcb_sync_set_counter_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_sync_counter_t counter;xcb_sync_int64_t value;};
struct xcb_xinerama_get_state_reply_t {uint8_t response_type;uint8_t state;uint16_t sequence;uint32_t length;xcb_window_t window;};
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize,  GLvoid *data);
typedef void (*PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type,  GLvoid *indices);
typedef GLint (*PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj,  GLcharARB *name);
typedef void (*PFNGLNORMALPOINTERLISTIBMPROC)(GLenum type, GLint stride,  GLvoid **pointer, GLint ptrstride);
typedef void (*PFNGLVERTEXPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride,  GLvoid **pointer, GLint ptrstride);
struct xcb_configure_request_event_t {uint8_t response_type;uint8_t stack_mode;uint16_t sequence;xcb_window_t parent;xcb_window_t window;xcb_window_t sibling;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint16_t value_mask;};
struct xcb_damage_subtract_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_damage_damage_t damage;xcb_xfixes_region_t repair;xcb_xfixes_region_t parts;};
struct xcb_delete_property_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;xcb_atom_t property;};
struct xcb_glx_get_doublev_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;};
struct xcb_glx_get_histogram_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;uint8_t pad2[12];};
struct xcb_glx_get_lightfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t light;uint32_t pname;};
struct xcb_glx_get_lightiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t light;uint32_t pname;};
struct xcb_glx_get_tex_envfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_enviv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_gendv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float64_t datum;uint8_t pad2[8];};
struct xcb_glx_get_tex_genfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_geniv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_tex_image_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[8];int32_t width;int32_t height;int32_t depth;uint8_t pad2[4];};
struct xcb_glx_render_mode_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t mode;};
struct xcb_reparent_window_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t window;xcb_window_t parent;int16_t x;int16_t y;};
struct xcb_set_input_focus_request_t {uint8_t major_opcode;uint8_t revert_to;uint16_t length;xcb_window_t focus;xcb_timestamp_t time;};
struct xcb_sync_get_priority_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int32_t priority;};
struct xcb_test_fake_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t type;uint8_t detail;uint8_t pad0[2];uint32_t time;xcb_window_t window;uint8_t pad1[8];uint16_t rootX;uint16_t rootY;uint8_t pad2[7];uint8_t deviceid;};
typedef void (*PFNGLCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride,  GLvoid **pointer, GLint ptrstride);
typedef void (*PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
typedef void (*PFNGLINDEXPOINTERLISTIBMPROC)(GLenum type, GLint stride,  GLvoid **pointer, GLint ptrstride);
typedef void (*PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLVERTEXPOINTERVINTELPROC)(GLint size, GLenum type,  GLvoid **pointer);
typedef void (*XtCancelConvertSelectionProc)(Widget, Atom *, Atom *, XtRequestId *, XtPointer);
struct xcb_configure_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;xcb_window_t above_sibling;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint8_t override_redirect;};
struct xcb_glx_get_floatv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;};
struct xcb_glx_get_integerv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_minmax_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t format;uint32_t type;uint8_t swap_bytes;uint8_t reset;};
struct xcb_glx_get_string_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t name;};
struct xcb_glx_is_query_arb_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;};
struct xcb_glx_is_texture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t texture;};
struct xcb_glx_make_current_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_context_tag_t context_tag;uint8_t pad1[20];};
struct xcb_poly_rectangle_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_xv_ungrab_port_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_timestamp_t time;};
typedef void (*PFNGLBINORMALPOINTEREXTPROC)(GLenum type, GLsizei stride,  GLvoid *pointer);
typedef void (*PFNGLCOLORPOINTERVINTELPROC)(GLint size, GLenum type,  GLvoid **pointer);
typedef void (*PFNGLFOGCOORDPOINTEREXTPROC)(GLenum type, GLsizei stride,  GLvoid *pointer);
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC)(GLuint program,  GLchar *name);
typedef void (*PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
union _FontEntry___FontEntryParts {FontScalableEntryRec scalable;FontBitmapEntryRec bitmap;FontAliasEntryRec alias;FontBCEntryRec bc;};
typedef Boolean (*_XawSrcConvertSelectionProc)(Widget, Atom *, Atom *, Atom *, XtPointer *, unsigned int *, int *);
struct xcb_colormap_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;xcb_colormap_t colormap;uint8_t _new;uint8_t state;};
struct xcb_create_cursor_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_cursor_t cid;xcb_pixmap_t source;xcb_pixmap_t mask;uint16_t fore_red;uint16_t fore_green;uint16_t fore_blue;uint16_t back_red;uint16_t back_green;uint16_t back_blue;uint16_t x;uint16_t y;};
struct xcb_create_pixmap_request_t {uint8_t major_opcode;uint8_t depth;uint16_t length;xcb_pixmap_t pid;xcb_drawable_t drawable;uint16_t width;uint16_t height;};
struct xcb_damage_create_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_damage_damage_t damage;xcb_drawable_t drawable;uint8_t level;uint8_t pad0[3];};
struct xcb_get_input_focus_reply_t {uint8_t response_type;uint8_t revert_to;uint16_t sequence;uint32_t length;xcb_window_t focus;};
struct xcb_glx_gen_lists_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t range;};
struct xcb_glx_get_doublev_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float64_t datum;uint8_t pad2[8];};
struct xcb_glx_get_lightfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_lightiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_mapdv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t query;};
struct xcb_glx_get_mapfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t query;};
struct xcb_glx_get_mapiv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;uint32_t query;};
struct xcb_grab_keyboard_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;xcb_timestamp_t time;uint8_t pointer_mode;uint8_t keyboard_mode;};
struct xcb_poly_fill_arc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_reparent_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;xcb_window_t parent;int16_t x;int16_t y;uint8_t override_redirect;};
struct xcb_xv_stop_video_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;};
typedef void (*PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type,  GLvoid *indices);
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC)(GLuint program,  GLchar *name);
typedef void (*PFNGLTANGENTPOINTEREXTPROC)(GLenum type, GLsizei stride,  GLvoid *pointer);
typedef void (*PFNGLTEXSUBIMAGE4DSGISPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type,  GLvoid *pixels);
struct _xkbSetDebuggingFlagsReply {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 currentFlags;CARD32 currentCtrls;CARD32 supportedFlags;CARD32 supportedCtrls;CARD32 pad1;CARD32 pad2;};
struct xcb_glx_get_floatv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_is_texture_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;};
struct xcb_glx_new_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t list;uint32_t mode;};
struct xcb_gravity_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t event;xcb_window_t window;int16_t x;int16_t y;};
struct xcb_poly_segment_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_warp_pointer_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t src_window;xcb_window_t dst_window;int16_t src_x;int16_t src_y;uint16_t src_width;uint16_t src_height;int16_t dst_x;int16_t dst_y;};
struct xcb_xv_grab_port_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_timestamp_t time;};
struct GLXVendorPrivateWithReply {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;GLXContextTag contextTag;};
typedef void (*PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size,  GLvoid *data);
typedef void (*PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
typedef void (*PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
typedef void (*PFNGLPIXELDATARANGENVPROC)(GLenum target, GLsizei length, GLvoid *pointer);
typedef void (*PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type,  GLvoid *pixels);
typedef void (*PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type,  GLvoid *pixels);
typedef void (*PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,  GLvoid *pixels);
typedef void (*PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
typedef void (*PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose,  GLfloat *value);
struct _XF86MiscSetMouseSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD32 mousetype;CARD32 baudrate;CARD32 samplerate;CARD32 resolution;CARD32 buttons;BOOL emulate3buttons;BOOL chordmiddle;CARD16 devnamelen;CARD32 emulate3timeout;CARD32 flags;};
struct _xkbExtensionDeviceNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 reason;CARD16 ledClass;CARD16 ledID;CARD32 ledsDefined;CARD32 ledState;CARD8 firstBtn;CARD8 nBtns;CARD16 supported;CARD16 unsupported;CARD16 pad3;};
struct xcb_create_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t parent;xcb_window_t window;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint8_t override_redirect;};
struct xcb_free_colors_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_colormap_t cmap;uint32_t plane_mask;};
struct xcb_glx_get_error_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int32_t error;};
struct xcb_glx_get_mapdv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float64_t datum;uint8_t pad2[8];};
struct xcb_glx_get_mapfv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;xcb_glx_float32_t datum;uint8_t pad2[12];};
struct xcb_glx_get_mapiv_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint8_t pad1[4];uint32_t n;int32_t datum;uint8_t pad2[12];};
struct xcb_glx_is_list_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t list;};
struct xcb_grab_button_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;uint16_t event_mask;uint8_t pointer_mode;uint8_t keyboard_mode;xcb_window_t confine_to;xcb_cursor_t cursor;uint8_t button;uint8_t pad0;uint16_t modifiers;};
struct xcb_render_pictforminfo_t {xcb_render_pictformat_t id;uint8_t type;uint8_t depth;uint8_t pad0[2];xcb_render_directformat_t dirent;xcb_colormap_t colormap;};
struct xcb_shm_get_image_reply_t {uint8_t response_type;uint8_t depth;uint16_t sequence;uint32_t length;xcb_visualid_t visual;uint32_t size;};
typedef void (*PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride,  GLvoid *pointer);
typedef void (*PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
typedef void (*PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count,  GLcharARB **string,  GLint *length);
typedef GLboolean (*PFNGLTESTOBJECTAPPLEPROC)(GLenum object, GLuint name);
struct xcb_clear_area_request_t {uint8_t major_opcode;uint8_t exposures;uint16_t length;xcb_window_t window;int16_t x;int16_t y;uint16_t width;uint16_t height;};
struct xcb_get_property_reply_t {uint8_t response_type;uint8_t format;uint16_t sequence;uint32_t length;xcb_atom_t type;uint32_t bytes_after;uint32_t value_len;uint8_t pad0[12];};
struct xcb_poly_point_request_t {uint8_t major_opcode;uint8_t coordinate_mode;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_send_event_request_t {uint8_t major_opcode;uint8_t propagate;uint16_t length;xcb_window_t destination;uint32_t event_mask;};
struct xcb_shm_attach_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shm_seg_t shmseg;uint32_t shmid;uint8_t read_only;};
struct xcb_xevie_send_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xevie_event_t event;uint32_t data_type;uint8_t pad0[64];};
typedef FT_Error (*FT_Renderer_SetModeFunc)(FT_Renderer renderer, FT_ULong mode_tag, FT_Pointer mode_ptr);
typedef void (*PFNGLARRAYOBJECTATIPROC)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void (*PFNGLTEXIMAGE4DSGISPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type,  GLvoid *pixels);
typedef void (*XtSelectionDoneIncrProc)(Widget, Atom *, Atom *, XtRequestId *, XtPointer);
struct _XEVIGetVisualInfoReply {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 n_info;CARD32 n_conflicts;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _XF86MiscSetKbdSettings {CARD8 reqType;CARD8 xf86miscReqType;CARD16 length;CARD32 kbdtype;CARD32 rate;CARD32 delay;BOOL servnumlock;BOOL pad1;CARD16 pad2;};
struct _xkbShapeDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 colorNdx;CARD8 shapeNdx;CARD16 pad1;CARD32 pad2;};
struct _xkmIndicatorDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;CARD8 shape_ndx;CARD8 on_color_ndx;CARD8 off_color_ndx;CARD8 pad1;CARD16 pad2;CARD32 pad3;};
struct xcb_change_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t gc;uint32_t value_mask;};
struct xcb_fill_poly_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;uint8_t shape;uint8_t coordinate_mode;};
struct xcb_glx_is_list_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_glx_bool32_t ret_val;};
struct xcb_intern_atom_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_atom_t atom;};
struct xcb_poly_line_request_t {uint8_t major_opcode;uint8_t coordinate_mode;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
typedef void (*PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size,  GLvoid *data);
typedef void (*PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len,  GLubyte *program);
typedef void (*PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type,  GLvoid *pixels);
typedef void (*PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,  GLvoid *pixels);
typedef Boolean (*XtConvertSelectionProc)(Widget, Atom *, Atom *, Atom *, XtPointer *, unsigned int *, int *);
struct _OverrideShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;OverrideShellClassPart override_shell_class;};
struct _TMComplexStateTreeRec {unsigned int isSimple : 1;unsigned int isAccelerator : 1;unsigned int mappingNotifyInterest : 1;unsigned int refCount : 13;TMShortCard numBranchHeads;TMShortCard numQuarks;TMShortCard numComplexBranchHeads;TMBranchHeadRec *branchHeadTbl;XrmQuark *quarkTbl;StatePtr *complexBranchHeadTbl;};
struct _WindowsWMFrameGetRect {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 frame_style;CARD32 frame_style_ex;CARD16 frame_rect;INT16 ix;INT16 iy;CARD16 iw;CARD16 ih;CARD16 pad1;};
struct _xSyncChangeCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 cid;INT32 value_hi;CARD32 value_lo;};
struct _xSyncCreateCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 cid;INT32 initial_value_hi;CARD32 initial_value_lo;};
struct _xkbGetDeviceInfoReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 present;CARD16 supported;CARD16 unsupported;CARD16 nDeviceLedFBs;CARD8 firstBtnWanted;CARD8 nBtnsWanted;CARD8 firstBtnRtrn;CARD8 nBtnsRtrn;CARD8 totalBtns;BOOL hasOwnState;CARD16 dfltKbdFB;CARD16 dfltLedFB;CARD16 pad;CARD32 devType;};
struct _xkbLogoDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 colorNdx;CARD8 shapeNdx;CARD16 pad1;CARD32 pad2;};
struct _xkbTextDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD16 width;CARD16 height;CARD8 colorNdx;CARD8 pad1;CARD16 pad2;};
struct xcb_grab_key_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;uint16_t modifiers;xcb_keycode_t key;uint8_t pointer_mode;uint8_t keyboard_mode;};
struct xcb_poly_arc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;};
struct xcb_query_tree_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_window_t root;xcb_window_t parent;uint16_t children_len;uint8_t pad1[14];};
struct GLXMakeContextCurrent {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag oldContextTag;CARD32 drawable;CARD32 readdrawable;CARD32 context;};
struct GLXMakeCurrentReadSGI {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;GLXContextTag oldContextTag;CARD32 drawable;CARD32 readable;CARD32 context;};
typedef void (*PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count,  GLchar **string,  GLint *length);
struct _PanedConstraintsPart {Dimension min;Dimension max;Boolean allow_resize;Boolean show_grip;Boolean skip_adjust;int position;Dimension preferred_size;Boolean resize_to_pref;Position delta;Position olddelta;Boolean paned_adjusted_me;Dimension wp_size;int size;Widget grip;};
struct _xkbGetKbdByNameReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 minKeyCode;CARD8 maxKeyCode;BOOL loaded;BOOL newKeyboard;CARD16 found;CARD16 reported;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbNewKeyboardNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 oldDeviceID;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 oldMinKeyCode;CARD8 oldMaxKeyCode;CARD8 requestMajor;CARD8 requestMinor;CARD16 changed;CARD8 detail;CARD8 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbSetNamedIndicator {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 ledClass;CARD16 ledID;CARD16 pad1;CARD32 indicator;BOOL setState;BOOL on;BOOL setMap;BOOL createMap;CARD8 pad2;CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;};
struct _xkbUseExtensionReply {BYTE type;BOOL supported;CARD16 sequenceNumber;CARD32 length;CARD16 serverMajor;CARD16 serverMinor;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct xcb_copy_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t src_gc;xcb_gcontext_t dst_gc;uint32_t value_mask;};
struct xcb_get_image_reply_t {uint8_t response_type;uint8_t depth;uint16_t sequence;uint32_t length;xcb_visualid_t visual;uint8_t pad0[20];};
struct XtPerDisplayInputRec {XtGrabList grabList;XtDeviceRec keyboard;XtDeviceRec pointer;KeyCode activatingKey;Widget *trace;int traceDepth;int traceMax;Widget focusWidget;};
struct _QueryEncodingsReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 num_encodings;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _QueryExtensionReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 version;CARD16 revision;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _TMParseStateTreeRec {unsigned int isSimple : 1;unsigned int isAccelerator : 1;unsigned int mappingNotifyInterest : 1;unsigned int isStackQuarks : 1;unsigned int isStackBranchHeads : 1;unsigned int isStackComplexBranchHeads : 1;unsigned int unused : 10;TMShortCard numBranchHeads;TMShortCard numQuarks;TMShortCard numComplexBranchHeads;TMBranchHeadRec *branchHeadTbl;XrmQuark *quarkTbl;StatePtr *complexBranchHeadTbl;TMShortCard branchHeadTblSize;TMShortCard quarkTblSize;TMShortCard complexBranchHeadTblSize;StatePtr head;};
struct _xExtendedVisualInfo {CARD32 core_visual_id;INT8 screen;INT8 level;CARD8 transparency_type;CARD8 pad0;CARD32 transparency_value;CARD8 min_hw_colormaps;CARD8 max_hw_colormaps;CARD16 num_colormap_conflicts;};
struct _xkbGetGeometryReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 name;BOOL found;CARD8 pad;CARD16 widthMM;CARD16 heightMM;CARD16 nProperties;CARD16 nColors;CARD16 nShapes;CARD16 nSections;CARD16 nDoodads;CARD16 nKeyAliases;CARD8 baseColorNdx;CARD8 labelColorNdx;};
struct GLXCreateNewContext {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 context;CARD32 fbconfig;CARD32 screen;CARD32 renderType;CARD32 shareList;BOOL isDirect;CARD8 reserved1;CARD16 reserved2;};
typedef void (*PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type,  GLvoid *pixels);
struct _QueryAdaptorsReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 num_adaptors;CARD16 pads3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _WindowsWMFrameDraw {CARD8 reqType;CARD8 wmReqType;CARD16 length;CARD32 screen;CARD32 window;CARD32 frame_style;CARD32 frame_style_ex;INT16 ix;INT16 iy;CARD16 iw;CARD16 ih;};
struct _xSyncSetCounterReq {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 cid;INT32 value_hi;CARD32 value_lo;};
struct _xkbCompatMapNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 changedGroups;CARD16 firstSI;CARD16 nSI;CARD16 nTotalSI;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbIndicatorNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 pad2;CARD32 state;CARD32 changed;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbSectionWireDesc {CARD32 name;INT16 top;INT16 left;CARD16 width;CARD16 height;INT16 angle;CARD8 priority;CARD8 nRows;CARD8 nDoodads;CARD8 nOverlays;CARD16 pad;};
struct _xkmShapeDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 color_ndx;CARD8 shape_ndx;CARD16 pad;CARD32 pad1;};
struct LIBMTP_file_struct {uint32_t item_id;uint32_t parent_id;char *filename;uint64_t filesize;LIBMTP_filetype_t filetype;LIBMTP_file_t *next;};
struct _AsciiTextClassRec {CoreClassPart core_class;SimpleClassPart simple_class;TextClassPart text_class;AsciiClassPart ascii_class;};
struct _LbxChangeProperty {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD8 format;CARD8 mode;BYTE pad[2];CARD32 nUnits;};
struct _ScreenSaverNotify {CARD8 type;BYTE state;CARD16 sequenceNumber;CARD32 timestamp;CARD32 root;CARD32 window;BYTE kind;BYTE forced;CARD16 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbControlsNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 numGroups;CARD16 pad1;CARD32 changedControls;CARD32 enabledControls;CARD32 enabledControlChanges;CARD8 keycode;CARD8 eventType;CARD8 requestMajor;CARD8 requestMinor;CARD32 pad2;};
struct _xkbLatchLockState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 affectModLocks;CARD8 modLocks;BOOL lockGroup;CARD8 groupLock;CARD8 affectModLatches;CARD8 modLatches;CARD8 pad;BOOL latchGroup;INT16 groupLatch;};
struct _xkmLogoDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 color_ndx;CARD8 shape_ndx;CARD16 pad;CARD32 pad1;};
struct icmp6_router_renum {struct icmp6_hdr rr_hdr;uint8_t rr_segnum;uint8_t rr_flags;uint16_t rr_maxdelay;uint32_t rr_reserved;};
struct xcb_sync_trigger_t {xcb_sync_counter_t counter;xcb_sync_valuetype_t wait_type;xcb_sync_int64_t wait_value;xcb_sync_testtype_t test_type;};
struct _ShapeSelectInput {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD32 window;BYTE enable;BYTE pad1;CARD16 pad2;};
struct _ShmGetImageReply {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 visual;CARD32 size;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
typedef XawTextPosition (*_XawSrcSearchProc)(Widget, XawTextPosition, XawTextScanDirection, XawTextBlock *);
struct _xSyncSetPriority {CARD8 reqType;CARD8 syncReqType;CARD16 length;CARD32 id;INT32 priority;};
struct _xkbAccessXNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 keycode;CARD16 detail;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbGetNamesReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 which;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 nTypes;CARD8 groupNames;CARD16 virtualMods;CARD8 firstKey;CARD8 nKeys;CARD32 indicators;CARD8 nRadioGroups;CARD8 nKeyAliases;CARD16 nKTLevels;CARD32 pad3;};
struct _xkmAnyDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct GLXCreateContext {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 context;CARD32 visual;CARD32 screen;CARD32 shareList;BOOL isDirect;CARD8 reserved1;CARD16 reserved2;};
struct GLXVendorPrivate {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 vendorCode;GLXContextTag contextTag;};
struct _CommandClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;};
struct _ShapeRectangles {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 op;CARD8 destKind;CARD8 ordering;CARD8 pad0;CARD32 dest;INT16 xOff;INT16 yOff;};
struct _TMKeyContextRec {XEvent *event;unsigned int serial;KeySym keysym;Modifiers modifiers;TMKeyCache keycache;};
struct _WMShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;};
struct _XmuDisplayQueue {int nentries;XmuDisplayQueueEntry *head;XmuDisplayQueueEntry *tail;XmuCloseDisplayQueueProc closefunc;XmuFreeDisplayQueueProc freefunc;XPointer data;};
struct __GLXFBConfigRec {int visualType;int transparentType;int transparentRed;int transparentGreen;int transparentBlue;int transparentAlpha;int transparentIndex;int visualCaveat;int associatedVisualId;int screen;int drawableType;int renderType;int maxPbufferWidth;int maxPbufferHeight;int maxPbufferPixels;int optimalPbufferWidth;int optimalPbufferHeight;int visualSelectGroup;unsigned int id;GLboolean rgbMode;GLboolean colorIndexMode;GLboolean doubleBufferMode;GLboolean stereoMode;GLboolean haveAccumBuffer;GLboolean haveDepthBuffer;GLboolean haveStencilBuffer;GLint accumRedBits;GLint accumGreenBits;GLint accumBlueBits;GLint accumAlphaBits;GLint depthBits;GLint stencilBits;GLint indexBits;GLint redBits;GLint greenBits;GLint blueBits;GLint alphaBits;GLuint redMask;GLuint greenMask;GLuint blueMask;GLuint alphaMask;GLuint multiSampleSize;GLuint nMultiSampleBuffers;GLint maxAuxBuffers;GLint level;GLboolean extendedRange;GLdouble minRed;GLdouble maxRed;GLdouble minGreen;GLdouble maxGreen;GLdouble minBlue;GLdouble maxBlue;GLdouble minAlpha;GLdouble maxAlpha;};
struct xcb_visualtype_t {xcb_visualid_t visual_id;uint8_t _class;uint8_t bits_per_rgb_value;uint16_t colormap_entries;uint32_t red_mask;uint32_t green_mask;uint32_t blue_mask;uint8_t pad0[4];};
struct SVCXPRT__xp_ops {bool_t (*xp_recv)(SVCXPRT *xprt, struct rpc_msg *msg);enum xprt_stat (*xp_stat)(SVCXPRT *xprt);bool_t (*xp_getargs)(SVCXPRT *xprt, xdrproc_t xdr_args, caddr_t args_ptr);bool_t (*xp_reply)(SVCXPRT *xprt, struct rpc_msg *msg);bool_t (*xp_freeargs)(SVCXPRT *xprt, xdrproc_t xdr_args, caddr_t args_ptr);void (*xp_destroy)(SVCXPRT *xprt);};
struct WBXMLTreeNode_s {WBXMLTreeNodeType type;WBXMLTag *name;WBXMLTreeAttribute *attrs;WBXMLBuffer *content;struct WBXMLTree_s *tree;struct WBXMLTreeNode_s *parent;struct WBXMLTreeNode_s *children;struct WBXMLTreeNode_s *next;struct WBXMLTreeNode_s *prev;};
typedef Boolean (*XtSetValuesFunc)(Widget, Widget, Widget, ArgList, Cardinal *);
struct _LbxGetProperty {CARD8 reqType;CARD8 lbxReqType;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD8 delete;BYTE pad[3];CARD32 longOffset;CARD32 longLength;};
struct _SignalEventRec {XtSignalCallbackProc se_proc;XtPointer se_closure;struct _SignalEventRec *se_next;XtAppContext app;Boolean se_notice;};
typedef XawTextPosition (*_XawSrcScanProc)(Widget, XawTextPosition, XawTextScanType, XawTextScanDirection, int, int);
struct _xkbNamesNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 changed;CARD8 firstType;CARD8 nTypes;CARD8 firstLevelName;CARD8 nLevelNames;CARD8 pad2;CARD8 nRadioGroups;CARD8 nAliases;CARD8 changedGroupNames;CARD16 changedVirtualMods;CARD8 firstKey;CARD8 nKeys;CARD32 changedIndicators;CARD32 pad3;};
struct _xkbRowWireDesc {INT16 top;INT16 left;CARD8 nKeys;BOOL vertical;CARD16 pad;};
struct GLXCopyContext {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 source;CARD32 dest;CARD32 mask;GLXContextTag contextTag;};
struct GLXMakeCurrent {CARD8 reqType;CARD8 glxCode;CARD16 length;CARD32 drawable;CARD32 context;GLXContextTag oldContextTag;};
struct GLXRenderLarge {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag contextTag;CARD16 requestNumber;CARD16 requestTotal;CARD32 dataBytes;};
struct GLXSwapBuffers {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag contextTag;CARD32 drawable;};
typedef void (*XtDoChangeProc)(Widget, WidgetList, Cardinal *, WidgetList, Cardinal *, XtPointer);
typedef void (*XtEventHandler)(Widget, XtPointer, XEvent *, Boolean *);
struct _AppleWMNotify {BYTE type;BYTE kind;CARD16 sequenceNumber;Time time;CARD16 pad1;CARD32 arg;CARD32 pad3;};
struct _PanedClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;PanedClassPart paned_class;};
struct _TimerEventRec {struct timeval te_timer_value;struct _TimerEventRec *te_next;XtTimerCallbackProc te_proc;XtAppContext app;XtPointer te_closure;};
struct _XkbBellNotify {int type;unsigned int serial;int send_event;Display *display;Time time;int xkb_type;int device;int percent;int pitch;int duration;int bell_class;int bell_id;Atom name;Window window;int event_only;};
struct _XmuWidgetNode {char *label;WidgetClass *widget_class_ptr;struct _XmuWidgetNode *superclass;struct _XmuWidgetNode *children;struct _XmuWidgetNode *siblings;char *lowered_label;char *lowered_classname;int have_resources;XtResourceList resources;struct _XmuWidgetNode **resourcewn;Cardinal nresources;XtResourceList constraints;struct _XmuWidgetNode **constraintwn;Cardinal nconstraints;XtPointer data;};
struct authunix_parms {u_long aup_time;char *aup_machname;__uid_t aup_uid;__gid_t aup_gid;u_int aup_len;__gid_t *aup_gids;};
struct bfd_link_order {struct bfd_link_order *next;enum bfd_link_order_type type;bfd_vma offset;bfd_size_type size;union bfd_link_order___F088814F1EB47C39F5059A2176155568 u;};
struct FT_StreamRec_ {unsigned char *base;unsigned int size;unsigned int pos;FT_StreamDesc descriptor;FT_StreamDesc pathname;FT_Stream_IoFunc read;FT_Stream_CloseFunc close;FT_Memory memory;unsigned char *cursor;unsigned char *limit;};
struct _FormClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;FormClassPart form_class;};
struct _ShapeCombine {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 op;CARD8 destKind;CARD8 srcKind;CARD8 junk;CARD32 dest;INT16 xOff;INT16 yOff;CARD32 src;};
struct _SmeThreeDRec {ObjectPart object;RectObjPart rectangle;SmePart sme;SmeThreeDPart sme_threeD;};
struct _TreeClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;TreeClassPart tree_class;};
struct _ViewportPart {Boolean forcebars;Boolean allowhoriz;Boolean allowvert;Boolean usebottom;Boolean useright;XtCallbackList report_callbacks;Widget clip;Widget child;Widget horiz_bar;Widget vert_bar;XtPointer pad[4];};
struct _xkbMapNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 ptrBtnActions;CARD16 changed;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD16 virtualMods;CARD16 pad1;};
struct iw_encode_ext {__u32 ext_flags;__u8 tx_seq[8];__u8 rx_seq[8];struct sockaddr addr;__u16 alg;__u16 key_len;__u8 key[];};
struct iw_statistics {__u16 status;struct iw_quality qual;struct iw_discarded discard;struct iw_missed miss;};
struct FT_GlyphRec_ {FT_Library library; FT_Glyph_Class *clazz;FT_Glyph_Format format;FT_Vector advance;};
struct FT_Var_Axis_ {FT_String *name;FT_Fixed minimum;FT_Fixed def;FT_Fixed maximum;FT_ULong tag;FT_UInt strid;};
typedef int (*NextLfwiFunc)(pointer client, FontPathElementPtr fpe, char **name, int *namelen, FontInfoPtr *info, int *numFonts, pointer c_private);
typedef void (*XPFinishProc)(Display *display, XPContext context, XPGetDocStatus status, XPointer client_data);
typedef void (*XtActionProc)(Widget, XEvent *, String *, Cardinal *);
typedef void (*XtDestructor)(XtAppContext, XrmValue *, XtPointer, XrmValue *, Cardinal *);
struct _EventSeqRec {Event event;StatePtr state;EventSeqPtr next;ActionPtr actions;};
struct _FillPolyReq {CARD8 reqType;BYTE pad;CARD16 length;CARD32 drawable;CARD32 gc;BYTE shape;BYTE coordMode;CARD16 pad1;};
struct _HookObjPart {XtCallbackList createhook_callbacks;XtCallbackList changehook_callbacks;XtCallbackList confighook_callbacks;XtCallbackList geometryhook_callbacks;XtCallbackList destroyhook_callbacks;WidgetList shells;Cardinal num_shells;Cardinal max_shells;Screen *screen;};
struct _PutImageReq {CARD8 reqType;CARD8 format;CARD16 length;CARD32 drawable;CARD32 gc;CARD16 width;CARD16 height;INT16 dstX;INT16 dstY;CARD8 leftPad;CARD8 depth;CARD16 pad;};
struct _ShapeNotify {BYTE type;BYTE kind;CARD16 sequenceNumber;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 time;BYTE shaped;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _ShapeOffset {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 destKind;CARD8 junk1;CARD16 junk2;CARD32 dest;INT16 xOff;INT16 yOff;};
struct _ShmGetImage {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 planeMask;CARD8 format;CARD8 pad0;CARD8 pad1;CARD8 pad2;CARD32 shmseg;CARD32 offset;};
struct _ShmPutImage {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 drawable;CARD32 gc;CARD16 totalWidth;CARD16 totalHeight;CARD16 srcX;CARD16 srcY;CARD16 srcWidth;CARD16 srcHeight;INT16 dstX;INT16 dstY;CARD8 depth;CARD8 format;CARD8 sendEvent;CARD8 bpad;CARD32 shmseg;CARD32 offset;};
struct _TMGlobalRec {TMTypeMatchRec **typeMatchSegmentTbl;TMShortCard numTypeMatches;TMShortCard numTypeMatchSegments;TMShortCard typeMatchSegmentTblSize;TMModifierMatchRec **modMatchSegmentTbl;TMShortCard numModMatches;TMShortCard numModMatchSegments;TMShortCard modMatchSegmentTblSize;Boolean newMatchSemantics;};
struct _XkbNamesRec {Atom keycodes;Atom geometry;Atom symbols;Atom types;Atom compat;Atom vmods[16];Atom indicators[32];Atom groups[4];XkbKeyNamePtr keys;XkbKeyAliasPtr key_aliases;Atom *radio_groups;Atom phys_symbols;unsigned char num_keys;unsigned char num_key_aliases;unsigned short num_rg;};
struct _XkbRF_Rules {XkbRF_DescribeVarsRec models;XkbRF_DescribeVarsRec layouts;XkbRF_DescribeVarsRec variants;XkbRF_DescribeVarsRec options;unsigned short sz_extra;unsigned short num_extra;char **extra_names;XkbRF_DescribeVarsPtr extra;unsigned short sz_rules;unsigned short num_rules;XkbRF_RulePtr rules;unsigned short sz_groups;unsigned short num_groups;XkbRF_GroupPtr groups;};
struct __gconv_step {struct __gconv_loaded_object *__shlib_handle; char *__modname;int __counter;char *__from_name;char *__to_name;__gconv_fct __fct;__gconv_btowc_fct __btowc_fct;__gconv_init_fct __init_fct;__gconv_end_fct __end_fct;int __min_needed_from;int __max_needed_from;int __min_needed_to;int __max_needed_to;int __stateful;void *__data;};
struct _xkbAnyEvent {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct elf_prstatus {struct elf_siginfo pr_info;short pr_cursig;unsigned int pr_sigpend;unsigned int pr_sighold;__pid_t pr_pid;__pid_t pr_ppid;__pid_t pr_pgrp;__pid_t pr_sid;struct timeval pr_utime;struct timeval pr_stime;struct timeval pr_cutime;struct timeval pr_cstime;elf_gregset_t pr_reg;int pr_fpvalid;};
struct sockaddr_ipx {sa_family_t sipx_family;u_int16_t sipx_port;u_int32_t sipx_network;unsigned char sipx_node[6];u_int8_t sipx_type;unsigned char sipx_zero;};
struct FT_SizeRec_ {FT_Face face;FT_Generic generic;FT_Size_Metrics metrics;FT_Size_Internal internal;};
struct GLXUseXFont {CARD8 reqType;CARD8 glxCode;CARD16 length;GLXContextTag contextTag;CARD32 font;CARD32 first;CARD32 count;CARD32 listBase;};
struct _CommandRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;};
struct _DialogPart {String label;String value;Pixmap icon;Widget iconW;Widget labelW;Widget valueW;XtPointer pad[4];};
struct _InputEvent {XtInputCallbackProc ie_proc;XtPointer ie_closure;struct _InputEvent *ie_next;struct _InputEvent *ie_oq;XtAppContext app;int ie_source;XtInputMask ie_condition;};
struct _SetBugMode {CARD8 reqType;CARD8 mitReqType;CARD16 length;BOOL onOff;BYTE pad0;CARD16 pad1;};
struct _SmeLineRec {ObjectPart object;RectObjPart rectangle;SmePart sme;SmeLinePart sme_line;};
struct _XkbKeyType {XkbModsRec mods;unsigned char num_levels;unsigned char map_count;XkbKTMapEntryPtr map;XkbModsPtr preserve;Atom name;Atom *level_names;};
struct _XkbOverlay {Atom name;XkbSectionPtr section_under;unsigned short num_rows;unsigned short sz_rows;XkbOverlayRowPtr rows;XkbBoundsPtr bounds;};
struct _XkbSection {Atom name;unsigned char priority;short top;short left;unsigned short width;unsigned short height;short angle;unsigned short num_rows;unsigned short num_doodads;unsigned short num_overlays;unsigned short sz_rows;unsigned short sz_doodads;unsigned short sz_overlays;XkbRowPtr rows;XkbDoodadPtr doodads;XkbBoundsRec bounds;struct _XkbOverlay *overlays;};
struct _XtEventRec {XtEventTable next;EventMask mask;XtEventHandler proc;XtPointer closure;unsigned int select : 1;unsigned int has_type_specifier : 1;unsigned int async : 1;};
struct _xkmRowDesc {INT16 top;INT16 left;CARD8 num_keys;BOOL vertical;CARD16 pad;};
struct bufferevent {struct event ev_read;struct event ev_write;struct evbuffer *input;struct evbuffer *output;struct event_watermark wm_read;struct event_watermark wm_write;evbuffercb readcb;evbuffercb writecb;everrorcb errorcb;void *cbarg;int timeout_read;int timeout_write;short enabled;};
struct iw_scan_req {__u8 scan_type;__u8 essid_len;__u8 num_channels;__u8 flags;struct sockaddr bssid;__u8 essid[32];__u32 min_channel_time;__u32 max_channel_time;struct iw_freq channel_list[32];};
struct xcb_setup_t {uint8_t status;uint8_t pad0;uint16_t protocol_major_version;uint16_t protocol_minor_version;uint16_t length;uint32_t release_number;uint32_t resource_id_base;uint32_t resource_id_mask;uint32_t motion_buffer_size;uint16_t vendor_len;uint16_t maximum_request_length;uint8_t roots_len;uint8_t pixmap_formats_len;uint8_t image_byte_order;uint8_t bitmap_format_bit_order;uint8_t bitmap_format_scanline_unit;uint8_t bitmap_format_scanline_pad;xcb_keycode_t min_keycode;xcb_keycode_t max_keycode;uint8_t pad1[4];};
struct ypmap_parms {domainname domain;mapname map;u_int ordernum;peername peer;};
struct TT_Header_ {FT_Fixed Table_Version;FT_Fixed Font_Revision;FT_Long CheckSum_Adjust;FT_Long Magic_Number;FT_UShort Flags;FT_UShort Units_Per_EM;FT_Long Created[2];FT_Long Modified[2];FT_Short xMin;FT_Short yMin;FT_Short xMax;FT_Short yMax;FT_UShort Mac_Style;FT_UShort Lowest_Rec_PPEM;FT_Short Font_Direction;FT_Short Index_To_Loc_Format;FT_Short Glyph_Data_Format;};
typedef Boolean (*XtArgsFunc)(Widget, ArgList, Cardinal *);
struct _ExifEntry {ExifTag tag;ExifFormat format;unsigned int components;unsigned char *data;unsigned int size;ExifContent *parent;ExifEntryPrivate *priv;};
struct _ShapeMask {CARD8 reqType;CARD8 shapeReqType;CARD16 length;CARD8 op;CARD8 destKind;CARD16 junk;CARD32 dest;INT16 xOff;INT16 yOff;CARD32 src;};
struct _SmeBSBRec {ObjectPart object;RectObjPart rectangle;SmePart sme;SmeBSBPart sme_bsb;};
struct _XevieSend {CARD8 reqType;CARD8 xevieReqType;CARD16 length;xEvent event;CARD32 dataType;};
typedef Boolean (*MatchProc)(TMTypeMatch typeMatch, TMModifierMatch modMatch, TMEventPtr eventSeq);
typedef void (*XtKeyProc)(Display *, KeyCode, Modifiers, Modifiers *, KeySym *);
struct _AsciiRec {CorePart core;SimplePart simple;TextPart text;AsciiPart ascii;};
struct _EventRec {TMLongCard modifiers;TMLongCard modifierMask;LateBindingsPtr lateModifiers;TMLongCard eventType;TMLongCard eventCode;TMLongCard eventCodeMask;MatchProc matchEvent;Boolean standard;};
struct _FormPart {int default_spacing;Dimension old_width;Dimension old_height;int no_refigure;Boolean needs_relayout;Boolean resize_in_layout;Dimension preferred_width;Dimension preferred_height;Boolean resize_is_no_op;XawDisplayList *display_list;XtPointer pad[4];};
struct _PanedRec {CorePart core;CompositePart composite;ConstraintPart constraint;PanedPart paned;};
struct rex_start {struct rex_start___4E8F7DC4996D24194F1417703DE27DA2 rst_cmd;rexstring rst_host;rexstring rst_fsname;rexstring rst_dirwithin;struct rex_start___27D82728F37DDE14700CB9E3D9A87412 rst_env;u_int rst_port0;u_int rst_port1;u_int rst_port2;u_int rst_flags;};
struct st_format {char **names;unsigned int flags;int (*startread)(ft_t ft);st_ssize_t (*read)(ft_t ft, st_sample_t *buf, st_ssize_t len);int (*stopread)(ft_t ft);int (*startwrite)(ft_t ft);st_ssize_t (*write)(ft_t ft, st_sample_t *buf, st_ssize_t len);int (*stopwrite)(ft_t ft);int (*seek)(ft_t ft, st_size_t offset);};
struct _FormRec {CorePart core;CompositePart composite;ConstraintPart constraint;FormPart form;};
struct _IO_FILE {int _flags;char *_IO_read_ptr;char *_IO_read_end;char *_IO_read_base;char *_IO_write_base;char *_IO_write_ptr;char *_IO_write_end;char *_IO_buf_base;char *_IO_buf_end;char *_IO_save_base;char *_IO_backup_base;char *_IO_save_end;struct _IO_marker *_markers;struct _IO_FILE *_chain;int _fileno;int _flags2;__off_t _old_offset;unsigned short _cur_column;signed char _vtable_offset;char _shortbuf[1];_IO_lock_t *_lock;__off64_t _offset;void *__pad1;void *__pad2;void *__pad3;void *__pad4;size_t __pad5;int _mode;char _unused2[40];};
struct _TreeRec {CorePart core;CompositePart composite;ConstraintPart constraint;TreePart tree;};
struct formnode {unsigned short status;short rows;short cols;int currow;int curcol;int toprow;int begincol;short maxfield;short maxpage;short curpage;Form_Options opts;WINDOW *win;WINDOW *sub;WINDOW *w;FIELD **field;FIELD *current;_PAGE *page;void *usrptr;void (*forminit)(struct formnode *);void (*formterm)(struct formnode *);void (*fieldinit)(struct formnode *);void (*fieldterm)(struct formnode *);};
struct ucontext {unsigned int uc_flags;struct ucontext *uc_link;stack_t uc_stack;mcontext_t uc_mcontext;__sigset_t uc_sigmask;struct _libc_fpstate __fpregs_mem;};
struct SVCXPRT {int xp_sock;u_short xp_port; struct SVCXPRT__xp_ops *xp_ops;int xp_addrlen;struct sockaddr_in xp_raddr;struct opaque_auth xp_verf;caddr_t xp_p1;caddr_t xp_p2;char xp_pad[256];};
struct __ns_rr {char name[1025];u_int16_t type;u_int16_t rr_class;u_int32_t ttl;u_int16_t rdlength; u_char *rdata;};
struct _ftsent {struct _ftsent *fts_cycle;struct _ftsent *fts_parent;struct _ftsent *fts_link;int fts_number;void *fts_pointer;char *fts_accpath;char *fts_path;int fts_errno;int fts_symfd;u_short fts_pathlen;u_short fts_namelen;ino_t fts_ino;dev_t fts_dev;nlink_t fts_nlink;short fts_level;u_short fts_info;u_short fts_flags;u_short fts_instr;struct stat *fts_statp;char fts_name[1];};
struct _win_st {short _cury;short _curx;short _maxy;short _maxx;short _begy;short _begx;short _flags;attr_t _attrs;chtype _bkgd;char _notimeout;char _clear;char _leaveok;char _scroll;char _idlok;char _idcok;char _immed;char _sync;char _use_keypad;int _delay;struct ldat *_line;short _regtop;short _regbottom;int _parx;int _pary;WINDOW *_parent;struct _win_st__pdat _pad;short _yoffset;};
struct XML_cp {enum XML_Content_Type type;enum XML_Content_Quant quant;XML_Char *name;unsigned int numchildren;XML_Content *children;};
struct aiocb {int aio_fildes;int aio_lio_opcode;int aio_reqprio;void *aio_buf;size_t aio_nbytes;struct sigevent aio_sigevent;struct aiocb *__next_prio;int __abs_prio;int __policy;int __error_code;__ssize_t __return_value;__off_t aio_offset;char __pad[4];char __unused[32];};
struct utmpx {short ut_type;__pid_t ut_pid;char ut_line[32];char ut_id[4];char ut_user[32];char ut_host[256];struct __exit_status ut_exit;int ut_session;struct timeval ut_tv;__int32_t ut_addr_v6[4];char __unused[20];};
struct utmp {short ut_type;pid_t ut_pid;char ut_line[32];char ut_id[4];char ut_user[32];char ut_host[256];struct exit_status ut_exit;int ut_session;struct timeval ut_tv;int32_t ut_addr_v6[4];char __unused[20];};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___06CC3EE1C785FF4C65A358F81D4770E3 {CARD32 pad00;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BOOL sameScreen;BYTE pad1;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F0E773388BCCF7D4D022A846E01785CC {CARD32 pad00;CARD32 event;CARD32 window;CARD32 aboveSibling;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BOOL override;BYTE bpad;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F0EDD24BB588AB1974F0CC5CC47343A0 {CARD32 pad00;CARD32 parent;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BOOL override;BYTE bpad;};
struct xcb_glx_get_compressed_tex_image_arb_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;};
struct xcb_xfixes_create_region_from_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xfixes_region_t region;xcb_window_t window;xcb_shape_kind_t kind;uint8_t pad0[3];};
struct xcb_xfixes_get_cursor_image_and_name_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t xhot;uint16_t yhot;uint32_t cursor_serial;xcb_atom_t cursor_atom;uint16_t nbytes;uint8_t pad1[2];};
struct xcb_xfixes_set_picture_clip_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_xfixes_region_t region;int16_t x_origin;int16_t y_origin;};
struct xcb_glx_get_tex_level_parameterfv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;uint32_t pname;};
struct xcb_glx_get_tex_level_parameteriv_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;uint32_t pname;};
struct xcb_xfixes_select_selection_input_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_atom_t selection;uint32_t event_mask;};
struct xcb_xfixes_set_gc_clip_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_gcontext_t gc;xcb_xfixes_region_t region;int16_t x_origin;int16_t y_origin;};
struct xcb_glx_make_context_current_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t old_context_tag;xcb_glx_drawable_t drawable;xcb_glx_drawable_t read_drawable;xcb_glx_context_t context;};
typedef void (*PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)(GLuint id, GLsizei len,  GLubyte *name, GLdouble *params);
typedef void (*PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)(GLuint id, GLsizei len,  GLubyte *name, GLfloat *params);
struct xcb_randr_set_screen_config_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t drawable;uint32_t timestamp;uint32_t config_timestamp;uint16_t sizeID;int16_t rotation;uint16_t refresh;uint8_t pad0[2];};
struct xcb_record_register_clients_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;xcb_record_element_header_t element_header;uint8_t pad0[3];uint32_t num_client_specs;uint32_t num_ranges;};
struct xcb_xvmc_create_subpicture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_subpicture_t subpicture_id;xcb_xvmc_context_t context;uint32_t xvimage_id;uint16_t width;uint16_t height;};
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)(GLuint id, GLsizei len,  GLubyte *name,  GLdouble *v);
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)(GLuint id, GLsizei len,  GLubyte *name,  GLfloat *v);
typedef void (*PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
struct xcb_record_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_record_context_t context;xcb_record_element_header_t element_header;uint8_t pad0[3];uint32_t num_client_specs;uint32_t num_ranges;};
struct xcb_xfixes_selection_notify_event_t {uint8_t response_type;uint8_t subtype;uint16_t sequence;xcb_window_t window;xcb_window_t owner;xcb_atom_t selection;xcb_timestamp_t timestamp;xcb_timestamp_t selection_timestamp;uint8_t pad0[8];};
struct xcb_xv_set_port_attribute_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_atom_t attribute;int32_t value;};
typedef FT_Error (*FT_Incremental_GetGlyphMetricsFunc)(FT_Incremental incremental, FT_UInt glyph_index, FT_Bool vertical, FT_Incremental_MetricsRec *ametrics);
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)(GLuint id, GLsizei len,  GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)(GLuint id, GLsizei len,  GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
struct _03C803DDC9061B143F519D4D73BD5571 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 eventMask;BYTE pointerMode;BYTE keyboardMode;CARD32 confineTo;CARD32 cursor;CARD8 button;BYTE pad;CARD16 modifiers;};
struct _0E8A98C555F38355A2FCB8E6352B37F5 {CARD16 length;CARD16 opcode;BOOL swapBytes;BOOL lsbFirst;CARD8 reserved0;CARD8 reserved1;CARD32 rowLength;CARD32 skipRows;CARD32 skipPixels;CARD32 alignment;CARD32 width;CARD32 height;FLOAT32 xorig;FLOAT32 yorig;FLOAT32 xmove;FLOAT32 ymove;};
struct _0F4B06D36BC906735A699C1D59FCE038 {BYTE type;BOOL sameScreen;CARD16 sequenceNumber;CARD32 length;CARD32 child;INT16 dstX;INT16 dstY;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _11DD07E0BD355014207FDEFC87674481 {CARD8 reqType;CARD8 mbufReqType;CARD16 length;CARD32 buffer;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD8 unused0;CARD8 unused1;CARD8 unused2;BOOL exposures;};
struct _15146D0240F64972E1BB855D6E1C4620 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT32 priority;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _1669416059A592B0B468DB2A6FC4CAE8 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;GLXContextTag contextTag;CARD32 writeVid;CARD32 writeType;CARD32 readVid;CARD32 readType;CARD32 pad6;};
struct _1BB85DE3512B339811D8B67FC16B212D {BYTE type;CARD8 deviceid;CARD16 sequenceNumber;KeyButMask device_state;CARD8 num_valuators;CARD8 first_valuator;INT32 valuator0;INT32 valuator1;INT32 valuator2;INT32 valuator3;INT32 valuator4;INT32 valuator5;};
struct _1CFFE104D7DFB51E74C0A01BE327DA92 {CARD8 reqType;BOOL range;CARD16 length;CARD32 fid;fsBitmapFormat format;CARD32 num_ranges;};
struct _1FC3FDECD71C050414C1CECD38620FB8 {int type;unsigned int serial;int send_event;Display *display;Drawable drawable;Damage damage;int level;int more;Time timestamp;XRectangle area;XRectangle geometry;};
struct _2A73BF0E4CA9808D683BEEEFEEB2900C {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 event_mask;};
struct _2A859DA02CD5E3593B5918B42FA7FFEB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 destination;CARD8 deviceid;BOOL propagate;CARD16 count;CARD8 num_events;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _326076F7099E6F08FACB2F19F051A23E {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD8 config_flags_valid[4];CARD8 config_flags_data[4];ReqFlags config_flags_req;EventFlags config_flags_event;CARD16 config_max_pkt_size;CARD8 config_cmd_key;CARD8 config_pad[1];CARD32 pad;};
struct _37BE2491590EE7EB76B44447C3CB76CA {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 root;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _37CF6FD3D8604C440825361FBCF768B5 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 event_count;CARD16 modifiers;CARD8 modifier_device;CARD8 grabbed_device;CARD8 key;BYTE this_device_mode;BYTE other_devices_mode;BOOL ownerEvents;BYTE pad1;BYTE pad2;};
struct _3B81704CAFF80915670BCDC93E5E5502 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcDrawable;CARD32 dstDrawable;CARD32 gc;INT16 srcX;INT16 srcY;INT16 dstX;INT16 dstY;CARD16 width;CARD16 height;};
struct _3BE679DC1FFA371624A790DBC1F4853A {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 fontid;};
struct _3D6C9E6FC2A1930EF06F70ECE24ED2E6 {BYTE type;CARD8 nameLength;CARD16 sequenceNumber;CARD32 length;CARD32 nReplies;CARD32 font_header_flags;CARD8 font_hdr_char_range_min_char_high;CARD8 font_hdr_char_range_min_char_low;CARD8 font_hdr_char_range_max_char_high;CARD8 font_hdr_char_range_max_char_low;CARD8 font_header_draw_direction;CARD8 font_header_pad;CARD8 font_header_default_char_high;CARD8 font_header_default_char_low;INT16 font_header_min_bounds_left;INT16 font_header_min_bounds_right;INT16 font_header_min_bounds_width;INT16 font_header_min_bounds_ascent;INT16 font_header_min_bounds_descent;CARD16 font_header_min_bounds_attributes;INT16 font_header_max_bounds_left;INT16 font_header_max_bounds_right;INT16 font_header_max_bounds_width;INT16 font_header_max_bounds_ascent;INT16 font_header_max_bounds_descent;CARD16 font_header_max_bounds_attributes;INT16 font_header_font_ascent;INT16 font_header_font_descent;};
struct _3E18A7AAF5D17F3F11EB968C0A78AED4 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 font_header_flags;CARD8 font_hdr_char_range_min_char_high;CARD8 font_hdr_char_range_min_char_low;CARD8 font_hdr_char_range_max_char_high;CARD8 font_hdr_char_range_max_char_low;CARD8 font_header_draw_direction;CARD8 font_header_pad;CARD8 font_header_default_char_high;CARD8 font_header_default_char_low;INT16 font_header_min_bounds_left;INT16 font_header_min_bounds_right;INT16 font_header_min_bounds_width;INT16 font_header_min_bounds_ascent;INT16 font_header_min_bounds_descent;CARD16 font_header_min_bounds_attributes;INT16 font_header_max_bounds_left;INT16 font_header_max_bounds_right;INT16 font_header_max_bounds_width;INT16 font_header_max_bounds_ascent;INT16 font_header_max_bounds_descent;CARD16 font_header_max_bounds_attributes;INT16 font_header_font_ascent;INT16 font_header_font_descent;};
struct _45331FD382D3B76DE50383933A2C35C9 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcDrawable;CARD32 dstDrawable;CARD32 gc;INT16 srcX;INT16 srcY;INT16 dstX;INT16 dstY;CARD16 width;CARD16 height;CARD32 bitPlane;};
struct _4F622AD2F1F50F32A9A86AA5D4320B7D {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xPointFixed inner;xPointFixed outer;INT32 inner_radius;INT32 outer_radius;CARD32 nStops;};
struct _53B2C5E872CF4691EFE90F887D66B7FD {CARD8 reqType;BOOL exposures;CARD16 length;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct _5763F2EC7349805D26B2ED34581CC2B6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD8 grabbed_device;CARD8 modifier_device;CARD16 event_count;CARD16 modifiers;BYTE this_device_mode;BYTE other_devices_mode;CARD8 button;BOOL ownerEvents;BYTE pad1;BYTE pad2;};
struct _582D8074D4EFCBB1785B13940ECA4EF6 {Dimension h_space;Dimension v_space;XtOrientation orientation;Dimension preferred_width;Dimension preferred_height;Dimension last_query_width;Dimension last_query_height;XtGeometryMask last_query_mode;XawDisplayList *display_list;XtPointer pad[4];};
struct _582DBE3FFCEAF5F2BDC86CE4805EFD64 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;GLXContextTag contextTag;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _5DA0449935C160E6A1371B1AEC9BA1E2 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;BOOL isDirect;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _5E29C5FF94304EAD83140C47151323A4 {CARD8 reqType;BYTE ordering;CARD16 length;CARD32 gc;INT16 xOrigin;INT16 yOrigin;};
struct _5F6963A5B3CCD1D3B53748FF8C021BB0 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT16 width;INT16 height;INT16 shiftX;INT16 shiftY;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _616DFE8EE921B679729534094133FEFF {BYTE type;BOOL sameScreen;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 child;INT16 rootX;INT16 rootY;INT16 winX;INT16 winY;CARD16 mask;CARD16 pad1;CARD32 pad;};
struct _65A7BC70F11250CC66A1AAC499DD4DF0 {char *geometry;XtCreatePopupChildProc create_popup_child_proc;XtGrabKind grab_kind;Boolean spring_loaded;Boolean popped_up;Boolean allow_shell_resize;Boolean client_specified;Boolean save_under;Boolean override_redirect;XtCallbackList popup_callback;XtCallbackList popdown_callback;Visual *visual;};
struct _67BA815F7CB0308CE8EF90A300D23A50 {CARD8 c_class;CARD8 id;CARD16 length;INT8 percent;BYTE pad1;BYTE pad2;BYTE pad3;INT16 pitch;INT16 duration;};
struct _69EBDB3A774B1AFC7F282884D9B780FC {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 bad_length;};
struct _6B88FAC29A9971BB7647F24C04F63FBE {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;CARD8 vendorLength;CARD8 modelLength;CARD8 nhsync;CARD8 nvsync;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _6B8E614C81B948CB69ED41556D403C37 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 displayNameLength;CARD32 logicalScreen;CARD16 screenWindowWidth;CARD16 screenWindowHeight;INT16 screenWindowXoffset;INT16 screenWindowYoffset;CARD16 rootWindowWidth;CARD16 rootWindowHeight;INT16 rootWindowXoffset;INT16 rootWindowYoffset;INT16 rootWindowXorigin;INT16 rootWindowYorigin;};
struct _6C3EB73958973EBDA54A91099DFB92F6 {jas_iccuint32_t size;jas_iccsig_t cmmtype;jas_iccuint32_t version;jas_iccsig_t clas;jas_iccsig_t colorspc;jas_iccsig_t refcolorspc;jas_icctime_t ctime;jas_iccsig_t magic;jas_iccsig_t platform;jas_iccuint32_t flags;jas_iccsig_t maker;jas_iccsig_t model;jas_iccuint64_t attr;jas_iccsig_t intent;jas_iccxyz_t illum;jas_iccsig_t creator;};
struct _7250734D77F79F0949305E641023FE62 {CARD8 reqType;BOOL propagate;CARD16 length;CARD32 destination;CARD32 eventMask;xEvent event;};
struct _79FC17A0C7A3F31E1105D33CC8C2AA30 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 eventMask;BYTE pointerMode;BYTE keyboardMode;CARD32 confineTo;CARD32 cursor;CARD32 time;};
struct _7AC6EBFF84C7D5C6D4B5835EAB8E1003 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 inputType;CARD32 physicalScreen;CARD32 physicalId;CARD32 nameLength;BOOL isCore;BOOL sendsCore;BOOL detached;CARD8 pad0;CARD32 pad1;};
struct _81227E6A2E975B2588700A3A20196845 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 power_level;BOOL state;CARD8 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _9260E9DF4F900591ED372CA82BEE9A23 {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 acid;};
struct _94FA839E2A2E2CDB2FF04022E6E0CAA1 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD32 time;BYTE pointerMode;BYTE keyboardMode;CARD16 pad;};
struct _9A76EF495F8378CE70D9AF691FDAC84A {BYTE type;BOOL pad1;CARD16 sequenceNumber;CARD32 length;INT16 x;INT16 y;CARD16 w;CARD16 h;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _A35F2E1A5E531ECFC152E2BA15F78A6A {BYTE type;BOOL globalAutoRepeat;CARD16 sequenceNumber;CARD32 length;CARD32 ledMask;CARD8 keyClickPercent;CARD8 bellPercent;CARD16 bellPitch;CARD16 bellDuration;CARD16 pad;BYTE map[32];};
struct _A55E8F963C5B6AC40AFF9FD81070CC8F {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD32 time;CARD8 num_keys;CARD8 num_buttons;CARD8 num_valuators;CARD8 classes_reported;CARD8 buttons[4];CARD8 keys[4];INT32 valuator0;INT32 valuator1;INT32 valuator2;};
struct _A7019015FC7C2C37D01376608F5D1FF2 {CARD8 c_class;CARD8 id;CARD16 length;CARD8 key;CARD8 auto_repeat_mode;INT8 click;INT8 percent;INT16 pitch;INT16 duration;CARD32 led_mask;CARD32 led_values;};
struct _AA339AC83CE9D84A9C74DA91D78C2A72 {Pixel foreground;Pixel background;Position *tabs;short *char_tabs;int tab_count;Pixel cursor_color;XawTextPropertyList *properties;XawTextPaintList *paint;XtPointer pad[2];};
struct _AAD518AFB58856180F72F894AD441DEE {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD8 boundingShaped;CARD8 clipShaped;CARD16 unused1;INT16 xBoundingShape;INT16 yBoundingShape;CARD16 widthBoundingShape;CARD16 heightBoundingShape;INT16 xClipShape;INT16 yClipShape;CARD16 widthClipShape;CARD16 heightClipShape;CARD32 pad1;};
struct _AE25578E94EB9DEB13D122608361EF67 {BYTE type;BOOL sharedPixmaps;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD16 uid;CARD16 gid;CARD8 pixmapFormat;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _B4654CD279B33E607B3273E64CC6A8CF {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT32 value_hi;CARD32 value_lo;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _B466B6127C4D0EA4542034CCB3136555 {CARD8 reqType;CARD8 renderReqType;CARD16 length;CARD32 pid;xPointFixed center;INT32 angle;CARD32 nStops;};
struct _B6C2B50A2126E272B3960EB4DC4F6604 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;BOOL capable;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _BC0C03DE100E0ADBA9BE7AF77D01715A {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcWid;CARD32 dstWid;INT16 srcX;INT16 srcY;};
struct _C19E6F380814408DFD31968534DDA3C5 {CARD8 reqType;BYTE pad;CARD16 length;INT16 accelNum;INT16 accelDenum;INT16 threshold;BOOL doAccel;BOOL doThresh;};
struct _C32D75228195D08F6D42072DC87ED14F {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;BOOL present;CARD8 major_opcode;CARD8 first_event;CARD8 first_error;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _D0A88ECD5B9151D3C71E69B7AE3ECA15 {BYTE type;CARD8 backingStore;CARD16 sequenceNumber;CARD32 length;CARD32 visualID;CARD16 c_class;CARD8 bitGravity;CARD8 winGravity;CARD32 backingBitPlanes;CARD32 backingPixel;BOOL saveUnder;BOOL mapInstalled;CARD8 mapState;BOOL override;CARD32 colormap;CARD32 allEventMasks;CARD32 yourEventMask;CARD16 doNotPropagateMask;CARD16 pad;};
struct _D53EE25F80C41C95CC04B700465E64D8 {CARD8 reqType;BYTE nChars;CARD16 length;CARD32 drawable;CARD32 gc;INT16 x;INT16 y;};
struct _E43B4FFA2E3C0DB794E5C488D88E145C {Pixel foreground;Pixmap stipple;Dimension line_width;GC gc;XtPointer pad[4];};
struct _E47C1379F192540C5AC97D7F222EBA5E {XExtData *ext_data;struct _XPrivate *private1;int fd;int private2;int proto_major_version;int proto_minor_version;char *vendor;XID private3;XID private4;XID private5;int private6;XID (*resource_alloc)(struct _XDisplay *);int byte_order;int bitmap_unit;int bitmap_pad;int bitmap_bit_order;int nformats;ScreenFormat *pixmap_format;int private8;int release;struct _XPrivate *private9;struct _XPrivate *private10;int qlen;unsigned int last_request_read;unsigned int request;XPointer private11;XPointer private12;XPointer private13;XPointer private14;unsigned int max_request_size;struct _XrmHashBucketRec *db;int (*private15)(struct _XDisplay *);char *display_name;int default_screen;int nscreens;Screen *screens;unsigned int motion_buffer;unsigned int private16;int min_keycode;int max_keycode;XPointer private17;XPointer private18;int private19;char *xdefaults;};
struct _E4C683071E34AD255F18B3FB82D2DFAE {int type;unsigned int serial;int send_event;Display *display;XSyncAlarm alarm;XSyncValue counter_value;XSyncValue alarm_value;Time time;XSyncAlarmState state;};
struct _E520267D12BF4FCD5BA9F753AB237D0B {CARD8 reqType;CARD8 xfixesReqType;CARD16 length;CARD32 dest;BYTE destKind;CARD8 pad1;CARD16 pad2;INT16 xOff;INT16 yOff;CARD32 region;};
struct _E77CCBE5D8B1F0833042AA57AE35DB28 {CARD8 reqType;CARD8 xtReqType;CARD16 length;BYTE type;BYTE detail;CARD16 pad0;CARD32 time;CARD32 root;CARD32 pad1;CARD32 pad2;INT16 rootX;INT16 rootY;CARD32 pad3;CARD16 pad4;CARD8 pad5;CARD8 deviceid;};
struct _E97BFE069D0E69649C7DF89B8901896C {BYTE type;BYTE event_code;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;BOOL added;BOOL deleted;CARD16 pad;};
struct _EF8F73C6C596F3380A5120BEC2D3F264 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;INT32 nCounters;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _F403E5F5616236146AF752723515CE63 {XtPointer next_extension;XrmQuark record_type;int version;Cardinal record_size;int (*BeginPaint)(Widget);void (*PreparePaint)(Widget, int, int, XawTextPosition, XawTextPosition, int);void (*DoPaint)(Widget);int (*EndPaint)(Widget);};
struct _F52D9FC92091A8183F87E95DDBDC622D {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcWid;CARD32 dstWid;INT16 srcX;INT16 srcY;CARD16 srcWidth;CARD16 srcHeight;INT16 dstX;INT16 dstY;};
struct _F8536B884003ADBD90188302B8AD267C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD16 nAtoms;INT16 nPositions;};
struct _F97BA04A84B56701784896B95A4002D0 {CARD8 c_class;CARD8 id;CARD16 length;CARD16 pitch;CARD16 duration;CARD32 led_mask;CARD32 led_values;BOOL global_auto_repeat;CARD8 click;CARD8 percent;BYTE pad;BYTE auto_repeats[32];};
struct _FCE16AE268B388C13B857015D638E9ED {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;};
struct _FE9896265ABA69989620FFBB2F6B5FBF {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;};
struct _FEC8B8888F3B689040694BF1F630E941 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 key;BYTE pointerMode;BYTE keyboardMode;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _FF2B271BD07173775CE163A4BE842405 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 parent;INT16 x;INT16 y;};
typedef void (*PFNGLSECONDARYCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride,  GLvoid *pointer);
struct xcb_get_window_attributes_reply_t {uint8_t response_type;uint8_t backing_store;uint16_t sequence;uint32_t length;xcb_visualid_t visual;uint16_t _class;uint8_t bit_gravity;uint8_t win_gravity;uint32_t backing_planes;uint32_t backing_pixel;uint8_t save_under;uint8_t map_is_installed;uint8_t map_state;uint8_t override_redirect;xcb_colormap_t colormap;uint32_t all_event_masks;uint32_t your_event_mask;uint16_t do_not_propagate_mask;};
struct xcb_randr_get_screen_info_reply_t {uint8_t response_type;uint8_t rotations;uint16_t sequence;uint32_t length;xcb_window_t root;uint32_t timestamp;uint32_t config_timestamp;uint16_t nSizes;uint16_t sizeID;int16_t rotation;uint16_t rate;uint16_t nInfo;uint8_t pad0[2];};
struct xcb_set_selection_owner_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t owner;xcb_atom_t selection;xcb_timestamp_t time;};
struct xcb_glx_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;xcb_visualid_t visual;uint32_t screen;xcb_glx_context_t share_list;uint8_t is_direct;uint8_t pad0[3];};
struct xcb_list_fonts_with_info_reply_t {uint8_t response_type;uint8_t name_len;uint16_t sequence;uint32_t length;xcb_charinfo_t min_bounds;uint8_t pad0[4];xcb_charinfo_t max_bounds;uint8_t pad1[4];uint16_t min_char_or_byte2;uint16_t max_char_or_byte2;uint16_t default_char;uint16_t properties_len;uint8_t draw_direction;uint8_t min_byte1;uint8_t max_byte1;uint8_t all_chars_exist;int16_t font_ascent;int16_t font_descent;uint32_t replies_hint;};
struct xcb_convert_selection_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_window_t requestor;xcb_atom_t selection;xcb_atom_t target;xcb_atom_t property;xcb_timestamp_t time;};
struct xcb_glx_create_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;uint32_t fbconfig;xcb_pixmap_t pixmap;xcb_glx_pixmap_t glx_pixmap;uint32_t num_attribs;};
struct xcb_glx_get_tex_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t target;int32_t level;uint32_t format;uint32_t type;uint8_t swap_bytes;};
struct xcb_render_trapezoids_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
struct xcb_sync_counter_notify_event_t {uint8_t response_type;uint8_t kind;uint16_t sequence;xcb_sync_counter_t counter;xcb_sync_int64_t wait_value;xcb_sync_int64_t counter_value;xcb_timestamp_t timestamp;uint16_t count;uint8_t destroyed;};
typedef void (*PFNGLGETMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
typedef void (*PFNGLMATRIXINDEXPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride,  GLvoid *pointer);
typedef void (*PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride,  GLvoid *pointer);
typedef void (*PFNGLUPDATEOBJECTBUFFERATIPROC)(GLuint buffer, GLuint offset, GLsizei size,  GLvoid *pointer, GLenum preserve);
struct xcb_glx_copy_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t src;xcb_glx_context_t dest;uint32_t mask;xcb_glx_context_tag_t src_context_tag;};
struct xcb_glx_delete_lists_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t list;int32_t range;};
struct xcb_glx_make_current_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_drawable_t drawable;xcb_glx_context_t context;xcb_glx_context_tag_t old_context_tag;};
struct xcb_glx_pixel_storef_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;xcb_glx_float32_t datum;};
struct xcb_glx_pixel_storei_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;uint32_t pname;int32_t datum;};
struct xcb_query_text_extents_reply_t {uint8_t response_type;uint8_t draw_direction;uint16_t sequence;uint32_t length;int16_t font_ascent;int16_t font_descent;int16_t overall_ascent;int16_t overall_descent;int32_t overall_width;int32_t overall_left;int32_t overall_right;};
struct xcb_render_tri_strip_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
struct xcb_render_triangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
typedef GLXPixmap (*PFNGLXCREATEGLXPIXMAPMESAPROC)(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
struct xcb_change_property_request_t {uint8_t major_opcode;uint8_t mode;uint16_t length;xcb_window_t window;xcb_atom_t property;xcb_atom_t type;uint8_t format;uint8_t pad0[3];uint32_t data_len;};
struct xcb_create_colormap_request_t {uint8_t major_opcode;uint8_t alloc;uint16_t length;xcb_colormap_t mid;xcb_window_t window;xcb_visualid_t visual;};
struct xcb_glx_read_pixels_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;int32_t x;int32_t y;int32_t width;int32_t height;uint32_t format;uint32_t type;uint8_t swap_bytes;uint8_t lsb_first;};
struct xcb_selection_request_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_window_t owner;xcb_window_t requestor;xcb_atom_t selection;xcb_atom_t target;xcb_atom_t property;};
struct xcb_sync_alarm_notify_event_t {uint8_t response_type;uint8_t kind;uint16_t sequence;xcb_sync_alarm_t alarm;xcb_sync_int64_t counter_value;xcb_sync_int64_t alarm_value;xcb_timestamp_t timestamp;};
struct xcb_glx_use_x_font_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_tag_t context_tag;xcb_font_t font;uint32_t first;uint32_t count;uint32_t list_base;};
struct xcb_render_tri_fan_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;int16_t src_x;int16_t src_y;};
struct xcb_selection_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_window_t requestor;xcb_atom_t selection;xcb_atom_t target;xcb_atom_t property;};
typedef GLuint (*PFNGLNEWOBJECTBUFFERATIPROC)(GLsizei size,  GLvoid *pointer, GLenum usage);
typedef void (*PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
struct xcb_image_text_16_request_t {uint8_t major_opcode;uint8_t string_len;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_property_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_window_t window;xcb_atom_t atom;xcb_timestamp_t time;uint8_t state;};
struct xcb_selection_clear_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_window_t owner;xcb_atom_t selection;};
struct xcb_xv_video_notify_event_t {uint8_t response_type;uint8_t reason;uint16_t sequence;xcb_timestamp_t time;xcb_drawable_t drawable;xcb_xv_port_t port;};
typedef Boolean (*XtConvertSelectionIncrProc)(Widget, Atom *, Atom *, Atom *, XtPointer *, unsigned int *, int *, unsigned int *, XtPointer, XtRequestId *);
struct _xkbGetNamedIndicatorReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 indicator;BOOL found;BOOL on;BOOL realIndicator;CARD8 ndx;CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 mods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;BOOL supported;CARD8 pad1;CARD16 pad2;};
struct xcb_client_message_event_t {uint8_t response_type;uint8_t format;uint16_t sequence;xcb_window_t window;xcb_atom_t type;xcb_client_message_data_t data;};
struct xcb_get_property_request_t {uint8_t major_opcode;uint8_t _delete;uint16_t length;xcb_window_t window;xcb_atom_t property;xcb_atom_t type;uint32_t long_offset;uint32_t long_length;};
struct xcb_grab_pointer_request_t {uint8_t major_opcode;uint8_t owner_events;uint16_t length;xcb_window_t grab_window;uint16_t event_mask;uint8_t pointer_mode;uint8_t keyboard_mode;xcb_window_t confine_to;xcb_cursor_t cursor;xcb_timestamp_t time;};
struct xcb_image_text_8_request_t {uint8_t major_opcode;uint8_t string_len;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_poly_text_16_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_shape_offset_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_kind_t destination_kind;uint8_t pad0[3];xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;};
struct xcb_shm_completion_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_drawable_t drawable;xcb_shm_seg_t shmseg;uint16_t minor_event;uint8_t major_event;uint8_t pad1;uint32_t offset;};
typedef FT_Error (*FT_Renderer_TransformFunc)(FT_Renderer renderer, FT_GlyphSlot slot,  FT_Matrix *matrix,  FT_Vector *delta);
typedef void (*PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
typedef void (*PFNGLWEIGHTPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride,  GLvoid *pointer);
struct _ScreenSaverSetAttributes {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BYTE c_class;CARD8 depth;CARD32 visualID;CARD32 mask;};
struct xcb_motion_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t same_screen;};
struct xcb_poly_text_8_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t x;int16_t y;};
struct xcb_query_pointer_reply_t {uint8_t response_type;uint8_t same_screen;uint16_t sequence;uint32_t length;xcb_window_t root;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t win_x;int16_t win_y;uint16_t mask;};
typedef void (*PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
struct _xSyncCounterNotifyEvent {BYTE type;BYTE kind;CARD16 sequenceNumber;CARD32 counter;INT32 wait_value_hi;CARD32 wait_value_lo;INT32 counter_value_hi;CARD32 counter_value_lo;CARD32 time;CARD16 count;BOOL destroyed;BYTE pad0;};
struct xcb_enter_notify_event_t {uint8_t response_type;uint8_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t mode;uint8_t same_screen_focus;};
struct xcb_get_geometry_reply_t {uint8_t response_type;uint8_t depth;uint16_t sequence;uint32_t length;xcb_window_t root;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;};
struct _LbxQueryExtensionReply {BYTE type;CARD8 numReqs;CARD16 sequenceNumber;CARD32 length;BOOL present;CARD8 major_opcode;CARD8 first_event;CARD8 first_error;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct xcb_copy_area_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t src_drawable;xcb_drawable_t dst_drawable;xcb_gcontext_t gc;int16_t src_x;int16_t src_y;int16_t dst_x;int16_t dst_y;uint16_t width;uint16_t height;};
struct xcb_create_gc_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_gcontext_t cid;xcb_drawable_t drawable;uint32_t value_mask;};
struct xcb_get_image_request_t {uint8_t major_opcode;uint8_t format;uint16_t length;xcb_drawable_t drawable;int16_t x;int16_t y;uint16_t width;uint16_t height;uint32_t plane_mask;};
struct xcb_put_image_request_t {uint8_t major_opcode;uint8_t format;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;uint16_t width;uint16_t height;int16_t dst_x;int16_t dst_y;uint8_t left_pad;uint8_t depth;};
typedef FT_Error (*FT_Renderer_RenderFunc)(FT_Renderer renderer, FT_GlyphSlot slot, FT_UInt mode,  FT_Vector *origin);
struct _xSyncAlarmNotifyEvent {BYTE type;BYTE kind;CARD16 sequenceNumber;CARD32 alarm;INT32 counter_value_hi;CARD32 counter_value_lo;INT32 alarm_value_hi;CARD32 alarm_value_lo;CARD32 time;CARD8 state;BYTE pad0;BYTE pad1;BYTE pad2;};
struct xcb_query_font_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_charinfo_t min_bounds;uint8_t pad1[4];xcb_charinfo_t max_bounds;uint8_t pad2[4];uint16_t min_char_or_byte2;uint16_t max_char_or_byte2;uint16_t default_char;uint16_t properties_len;uint8_t draw_direction;uint8_t min_byte1;uint8_t max_byte1;uint8_t all_chars_exist;int16_t font_ascent;int16_t font_descent;uint32_t char_infos_len;};
struct _TreeConstraintsPart {Widget parent;GC gc;Widget *children;int n_children;int max_children;Dimension bbsubwidth;Dimension bbsubheight;Dimension bbwidth;Dimension bbheight;Position x;Position y;XtPointer pad[2];};
struct _VendorShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;};
struct _xkbGetControlsReply {BYTE type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 mkDfltBtn;CARD8 numGroups;CARD8 groupsWrap;CARD8 internalMods;CARD8 ignoreLockMods;CARD8 internalRealMods;CARD8 ignoreLockRealMods;CARD8 pad1;CARD16 internalVMods;CARD16 ignoreLockVMods;CARD16 repeatDelay;CARD16 repeatInterval;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD16 mkDelay;CARD16 mkInterval;CARD16 mkTimeToMax;CARD16 mkMaxSpeed;INT16 mkCurve;CARD16 axOptions;CARD16 axTimeout;CARD16 axtOptsMask;CARD16 axtOptsValues;CARD16 pad2;CARD32 axtCtrlsMask;CARD32 axtCtrlsValues;CARD32 enabledCtrls;BYTE perKeyRepeat[32];};
struct LIBMTP_track_struct {uint32_t item_id;char *title;char *artist;char *genre;char *album;char *date;char *filename;uint16_t tracknumber;uint32_t duration;uint32_t samplerate;uint16_t nochannels;uint32_t wavecodec;uint32_t bitrate;uint16_t bitratetype;uint16_t rating;uint32_t usecount;uint64_t filesize;LIBMTP_filetype_t filetype;LIBMTP_track_t *next;};
struct _MenuButtonClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;MenuButtonClassPart menuButton_class;};
struct _SimpleMenuClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;OverrideShellClassPart override_shell_class;SimpleMenuClassPart simpleMenu_class;};
struct _XawTextPaintStruct {XawTextPaintStruct *next;int x;int y;int width;char *text;Cardinal length;XawTextProperty *property;int max_ascent;int max_descent;XmuArea *backtabs;Boolean highlight;};
typedef FT_Error (*FTC_Face_Requester)(FTC_FaceID face_id, FT_Library library, FT_Pointer request_data, FT_Face *aface);
typedef int (*XkbConfigParseFunc)(FILE *, XkbConfigFieldsPtr, XkbConfigFieldPtr, XkbDescPtr, XkbConfigRtrnPtr);
union _xkbDoodadWireDesc {xkbAnyDoodadWireDesc any;xkbShapeDoodadWireDesc shape;xkbTextDoodadWireDesc text;xkbIndicatorDoodadWireDesc indicator;xkbLogoDoodadWireDesc logo;};
struct FT_Outline_Funcs_ {FT_Outline_MoveToFunc move_to;FT_Outline_LineToFunc line_to;FT_Outline_ConicToFunc conic_to;FT_Outline_CubicToFunc cubic_to;int shift;FT_Pos delta;};
struct FT_Raster_Params_ { FT_Bitmap *target; void *source;int flags;FT_SpanFunc gray_spans;FT_SpanFunc black_spans;FT_Raster_BitTest_Func bit_test;FT_Raster_BitSet_Func bit_set;void *user;FT_BBox clip_box;};
struct _QueuedRequestRec {Atom selection;Atom target;Atom param;XtSelectionCallbackProc callback;XtPointer closure;Time time;Boolean incremental;};
struct _RepeaterClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;RepeaterClassPart repeater_class;};
struct _ViewportClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;FormClassPart form_class;ViewportClassPart viewport_class;};
struct _xPrintPrintEvent {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 printContext;BOOL cancel;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _xkbActionMessage {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 keycode;BOOL press;BOOL keyEventFollows;CARD8 mods;CARD8 group;CARD8 message[8];CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbGetStateReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 mods;CARD8 baseMods;CARD8 latchedMods;CARD8 lockedMods;CARD8 group;CARD8 lockedGroup;INT16 baseGroup;INT16 latchedGroup;CARD8 compatState;CARD8 grabMods;CARD8 compatGrabMods;CARD8 lookupMods;CARD8 compatLookupMods;CARD8 pad1;CARD16 ptrBtnState;CARD16 pad2;CARD32 pad3;};
typedef void (*XtActionHookProc)(Widget, XtPointer, String, XEvent *, String *, Cardinal *);
struct _XawTextProperty {XrmQuark identifier;XrmQuark code;unsigned int mask;XFontStruct *font;XFontSet fontset;Pixel foreground;Pixel background;Pixmap foreground_pixmap;Pixmap background_pixmap;XrmQuark xlfd;unsigned int xlfd_mask;XrmQuark foundry;XrmQuark family;XrmQuark weight;XrmQuark slant;XrmQuark setwidth;XrmQuark addstyle;XrmQuark pixel_size;XrmQuark point_size;XrmQuark res_x;XrmQuark res_y;XrmQuark spacing;XrmQuark avgwidth;XrmQuark registry;XrmQuark encoding;short underline_position;short underline_thickness;};
struct lt_user_dlloader { char *sym_prefix;lt_module_open *module_open;lt_module_close *module_close;lt_find_sym *find_sym;lt_dlloader_exit *dlloader_exit;lt_user_data dlloader_data;};
typedef Boolean (*XtTypeConverter)(Display *, XrmValue *, Cardinal *, XrmValue *, XrmValue *, XtPointer *);
struct _DialogClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;FormClassPart form_class;DialogClassPart dialog_class;};
struct _ToggleClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;ToggleClassPart toggle_class;};
struct _xkbSetControls {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 affectInternalMods;CARD8 internalMods;CARD8 affectIgnoreLockMods;CARD8 ignoreLockMods;CARD16 affectInternalVMods;CARD16 internalVMods;CARD16 affectIgnoreLockVMods;CARD16 ignoreLockVMods;CARD8 mkDfltBtn;CARD8 groupsWrap;CARD16 axOptions;CARD16 pad1;CARD32 affectEnabledCtrls;CARD32 enabledCtrls;CARD32 changeCtrls;CARD16 repeatDelay;CARD16 repeatInterval;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD16 mkDelay;CARD16 mkInterval;CARD16 mkTimeToMax;CARD16 mkMaxSpeed;INT16 mkCurve;CARD16 axTimeout;CARD32 axtCtrlsMask;CARD32 axtCtrlsValues;CARD16 axtOptsMask;CARD16 axtOptsValues;BYTE perKeyRepeat[32];};
struct _xkbStateNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 mods;CARD8 baseMods;CARD8 latchedMods;CARD8 lockedMods;CARD8 group;INT16 baseGroup;INT16 latchedGroup;CARD8 lockedGroup;CARD8 compatState;CARD8 grabMods;CARD8 compatGrabMods;CARD8 lookupMods;CARD8 compatLookupMods;CARD16 ptrBtnState;CARD16 changed;CARD8 keycode;CARD8 eventType;CARD8 requestMajor;CARD8 requestMinor;};
struct PS_FontInfoRec {FT_String *version;FT_String *notice;FT_String *full_name;FT_String *family_name;FT_String *weight;FT_Long italic_angle;FT_Bool is_fixed_pitch;FT_Short underline_position;FT_UShort underline_thickness;};
struct _MenuButtonRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;MenuButtonPart menu_button;};
struct _SimpleMenuRec {CorePart core;CompositePart composite;ShellPart shell;OverrideShellPart override;SimpleMenuPart simple_menu;};
struct _XawTextEntity {short type;short flags;XawTextEntity *next;XtPointer data;XawTextPosition offset;Cardinal length;XrmQuark property;};
struct _xkbBellNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 bellClass;CARD8 bellID;CARD8 percent;CARD16 pitch;CARD16 duration;CARD32 name;CARD32 window;BOOL eventOnly;CARD8 pad1;CARD16 pad2;CARD32 pad3;};
union _xkmDoodadDesc {xkmAnyDoodadDesc any;xkmShapeDoodadDesc shape;xkmTextDoodadDesc text;xkmIndicatorDoodadDesc indicator;xkmLogoDoodadDesc logo;};
struct _AsciiSrcPart {char *string;XawAsciiType type;XawTextPosition piece_size;Boolean data_compression;Boolean use_string_in_place;int ascii_length;Boolean is_tempfile;Boolean allocated_string;XawTextPosition length;Piece *first_piece;XtPointer pad[4];};
struct wireless_info {struct wireless_config b;int has_sens;iwparam sens;int has_nickname;char nickname[33];int has_ap_addr;sockaddr ap_addr;int has_bitrate;iwparam bitrate;int has_rts;iwparam rts;int has_frag;iwparam frag;int has_power;iwparam power;int has_txpower;iwparam txpower;int has_retry;iwparam retry;iwstats stats;int has_stats;iwrange range;int has_range;int auth_key_mgmt;int has_auth_key_mgmt;int auth_cipher_pairwise;int has_auth_cipher_pairwise;int auth_cipher_group;int has_auth_cipher_group;};
struct XDR__xdr_ops {bool_t (*x_getlong)(XDR *xdrs, int *lp);bool_t (*x_putlong)(XDR *xdrs,  int *lp);bool_t (*x_getbytes)(XDR *xdrs, caddr_t addr, u_int len);bool_t (*x_putbytes)(XDR *xdrs,  char *addr, u_int len);u_int (*x_getpostn)( XDR *xdrs);bool_t (*x_setpostn)(XDR *xdrs, u_int pos);int32_t *(*x_inline)(XDR *xdrs, u_int len);void (*x_destroy)(XDR *xdrs);bool_t (*x_getint32)(XDR *xdrs, int32_t *ip);bool_t (*x_putint32)(XDR *xdrs,  int32_t *ip);};
struct _RepeaterRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;RepeaterPart repeater;};
struct _ViewportRec {CorePart core;CompositePart composite;ConstraintPart constraint;FormPart form;ViewportPart viewport;};
struct _XkbChanges {unsigned short device_spec;unsigned short state_changes;XkbMapChangesRec map;XkbControlsChangesRec ctrls;XkbIndicatorChangesRec indicators;XkbNameChangesRec names;XkbCompatChangesRec compat;};
struct _DialogRec {CorePart core;CompositePart composite;ConstraintPart constraint;FormPart form;DialogPart dialog;};
struct _ShmAttach {CARD8 reqType;CARD8 shmReqType;CARD16 length;CARD32 shmseg;CARD32 shmid;BOOL readOnly;BYTE pad0;CARD16 pad1;};
struct _ToggleRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;TogglePart toggle;};
union _XkbDoodad {XkbAnyDoodadRec any;XkbShapeDoodadRec shape;XkbTextDoodadRec text;XkbIndicatorDoodadRec indicator;XkbLogoDoodadRec logo;};
struct TT_PCLT_ {FT_Fixed Version;FT_ULong FontNumber;FT_UShort Pitch;FT_UShort xHeight;FT_UShort Style;FT_UShort TypeFamily;FT_UShort CapHeight;FT_UShort SymbolSet;FT_Char TypeFace[16];FT_Char CharacterComplement[8];FT_Char FileName[6];FT_Char StrokeWeight;FT_Char WidthType;FT_Byte SerifStyle;FT_Byte Reserved;};
struct msqid_ds {struct ipc_perm msg_perm;__time_t msg_stime;unsigned int __unused1;__time_t msg_rtime;unsigned int __unused2;__time_t msg_ctime;unsigned int __unused3;unsigned int __msg_cbytes;msgqnum_t msg_qnum;msglen_t msg_qbytes;__pid_t msg_lspid;__pid_t msg_lrpid;unsigned int __unused4;unsigned int __unused5;};
struct shmid_ds {struct ipc_perm shm_perm;size_t shm_segsz;__time_t shm_atime;unsigned int __unused1;__time_t shm_dtime;unsigned int __unused2;__time_t shm_ctime;unsigned int __unused3;__pid_t shm_cpid;__pid_t shm_lpid;shmatt_t shm_nattch;unsigned int __unused4;unsigned int __unused5;};
struct TT_OS2_ {FT_UShort version;FT_Short xAvgCharWidth;FT_UShort usWeightClass;FT_UShort usWidthClass;FT_Short fsType;FT_Short ySubscriptXSize;FT_Short ySubscriptYSize;FT_Short ySubscriptXOffset;FT_Short ySubscriptYOffset;FT_Short ySuperscriptXSize;FT_Short ySuperscriptYSize;FT_Short ySuperscriptXOffset;FT_Short ySuperscriptYOffset;FT_Short yStrikeoutSize;FT_Short yStrikeoutPosition;FT_Short sFamilyClass;FT_Byte panose[10];FT_ULong ulUnicodeRange1;FT_ULong ulUnicodeRange2;FT_ULong ulUnicodeRange3;FT_ULong ulUnicodeRange4;FT_Char achVendID[4];FT_UShort fsSelection;FT_UShort usFirstCharIndex;FT_UShort usLastCharIndex;FT_Short sTypoAscender;FT_Short sTypoDescender;FT_Short sTypoLineGap;FT_UShort usWinAscent;FT_UShort usWinDescent;FT_ULong ulCodePageRange1;FT_ULong ulCodePageRange2;FT_Short sxHeight;FT_Short sCapHeight;FT_UShort usDefaultChar;FT_UShort usBreakChar;FT_UShort usMaxContext;};
struct _FTFont {FTInstancePtr instance;FTMappingRec mapping;unsigned int zero_idx;FontInfoPtr info;int nranges;CharInfoRec dummy_char;fsRange *ranges;};
struct svc_req {rpcprog_t rq_prog;rpcvers_t rq_vers;rpcproc_t rq_proc;struct opaque_auth rq_cred;caddr_t rq_clntcred;SVCXPRT *rq_xprt;};
struct tagMENU {short height;short width;short rows;short cols;short frows;short fcols;short arows;short namelen;short desclen;short marklen;short itemlen;short spc_desc;short spc_cols;short spc_rows;char *pattern;short pindex;WINDOW *win;WINDOW *sub;WINDOW *userwin;WINDOW *usersub;ITEM **items;short nitems;ITEM *curitem;short toprow;chtype fore;chtype back;chtype grey;unsigned char pad;Menu_Hook menuinit;Menu_Hook menuterm;Menu_Hook iteminit;Menu_Hook itemterm;void *userptr;char *mark;Menu_Options opt;unsigned short status;};
union jas_iccattrval_s___4E7A20EABC1986AAA015782F8F2C1C32 {jas_iccxyz_t xyz;jas_icccurv_t curv;jas_icctxtdesc_t txtdesc;jas_icctxt_t txt;jas_icclut8_t lut8;jas_icclut16_t lut16;};
struct xcb_xfixes_set_window_shape_region_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t dest;xcb_shape_kind_t dest_kind;uint8_t pad0[3];int16_t x_offset;int16_t y_offset;xcb_xfixes_region_t region;};
union _FcValue___4C90D9DC80941421F4625716AB95C5A2 { FcChar8 *s;int i;FcBool b;double d; FcMatrix *m; FcCharSet *c;void *f; FcPattern *p; FcLangSet *l;};
union siginfo___0A533C95F56D7198FDCBF4ED772C5A43 {int _pad[29];struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___DDF278A5B88F81FEC3CBEE828E282CB3 _kill;struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___F43D85AC31CEBD8CC07B08111ABDF065 _timer;struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___002955E8B5DE3B92E30DFEF7AB65BFE2 _rt;struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___353EAF26536A4016665766004ADC0BD6 _sigchld;struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___394784BEE55B7018BCA7354475FB2ABC _sigfault;struct siginfo___0A533C95F56D7198FDCBF4ED772C5A43___534EC22A0813C1325C3E7D3262B5A8D3 _sigpoll;};
struct xcb_render_composite_glyphs_16_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;xcb_render_glyphset_t glyphset;int16_t src_x;int16_t src_y;};
struct xcb_render_composite_glyphs_32_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;xcb_render_glyphset_t glyphset;int16_t src_x;int16_t src_y;};
struct xcb_screensaver_set_attributes_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint8_t _class;uint8_t depth;xcb_visualid_t visual;uint32_t value_mask;};
union icmp___893B68B5BC55935E15A63F398B6517AD {u_char ih_pptr;struct in_addr ih_gwaddr;struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_idseq ih_idseq;u_int32_t ih_void;struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_pmtu ih_pmtu;struct icmp___893B68B5BC55935E15A63F398B6517AD__ih_rtradv ih_rtradv;};
struct xcb_render_composite_glyphs_8_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint8_t op;uint8_t pad0[3];xcb_render_picture_t src;xcb_render_picture_t dst;xcb_render_pictformat_t mask_format;xcb_render_glyphset_t glyphset;int16_t src_x;int16_t src_y;};
struct xcb_glx_create_glx_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;uint32_t screen;xcb_visualid_t visual;xcb_pixmap_t pixmap;xcb_glx_pixmap_t glx_pixmap;};
struct xcb_render_create_picture_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t pid;xcb_drawable_t drawable;xcb_render_pictformat_t format;uint32_t value_mask;};
struct _050D667D91EB5E6EF621582721732C5C {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;fsRange range;};
struct _07B36B105D1522E7FC3538405AC1EE4D {int type;unsigned int serial;int send_event;Display *display;Window window;Window root;Time timestamp;Time config_timestamp;SizeID size_index;SubpixelOrder subpixel_order;Rotation rotation;int width;int height;int mwidth;int mheight;};
struct _0F63C52D50F31C01632B7951AEFCA4FD {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;fsResolution resolution;};
struct _20372CCC7895932BACE6325FD7981C66 {xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nCharInfos;};
struct _281923904974B9915ABD548A82CFE427 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 counter;CARD32 value_type;INT32 wait_value_hi;CARD32 wait_value_lo;CARD32 test_type;INT32 delta_hi;CARD32 delta_lo;BOOL events;BYTE state;BYTE pad0;BYTE pad1;};
struct _419D850E958B0F42F8B9D5E0BB3E2ED8 {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TransientShellPart transient;};
struct _54527827121C21F3031526454FE9C7A8 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 fid;fsBitmapFormatMask format_mask;fsBitmapFormat format_hint;};
struct _555515E43BC9CF64AF390C3AB1002B52 {XETrapRepHdr hdr;CARD8 data_state_flags[2];CARD16 data_pad0;CARD8 data_config_flags_valid[4];CARD8 data_config_flags_data[4];ReqFlags data_config_flags_req;EventFlags data_config_flags_event;CARD16 data_config_max_pkt_size;CARD8 data_config_cmd_key;CARD8 data_config_pad[1];CARD32 pad1;};
struct _5D6EFF7AE4955960C2AFFE32FE5051B9 {SANE_String_Const name;SANE_String_Const title;SANE_String_Const desc;SANE_Value_Type type;SANE_Unit unit;SANE_Int size;SANE_Int cap;SANE_Constraint_Type constraint_type;union _5D6EFF7AE4955960C2AFFE32FE5051B9___A6A66F05C578A4FA32694BF857B12B94 constraint;};
struct _75F7E626134BF34BF20657FC27D19BCE {char *title;int wm_timeout;Boolean wait_for_wm;Boolean transient;Boolean urgency;Widget client_leader;String window_role;struct _75F7E626134BF34BF20657FC27D19BCE___OldXSizeHints size_hints;XWMHints wm_hints;int base_width;int base_height;int win_gravity;Atom title_encoding;};
struct _7894C0B609BF7037CBFB2C6964164B94 {XExtData *ext_data;struct _XDisplay *display;Window root;int width;int height;int mwidth;int mheight;int ndepths;Depth *depths;int root_depth;Visual *root_visual;GC default_gc;Colormap cmap;unsigned int white_pixel;unsigned int black_pixel;int max_maps;int min_maps;int backing_store;int save_unders;int root_input_mask;};
struct _7A8BCDFD27D305719C6F21C05BF2348A {XFontStruct *font;Boolean echo;Boolean display_nonprinting;GC normgc;GC invgc;GC xorgc;XawTextPosition cursor_position;XawTextInsertState laststate;short cursor_x;short cursor_y;XtPointer pad[4];};
struct _7F541C22F3B2F8E6D7F24FB341D374C1 {Dimension shadow_width;Pixel top_shadow_pixel;Pixel bot_shadow_pixel;Pixmap top_shadow_pxmap;Pixmap bot_shadow_pxmap;int top_shadow_contrast;int bot_shadow_contrast;GC top_shadow_GC;GC bot_shadow_GC;GC erase_GC;XtPointer user_data;Boolean be_nice_to_cmap;Boolean shadowed;Boolean invert_border;};
struct _8AD7665855BDD9D58C16EA2008E774F8 {Pixel fgpixel;Pixel hipixel;GC fgGC;GC hiGC;int update;int scale;int min_scale;int interval;XPoint *points;double max_value;double valuedata[2048];XtIntervalId interval_id;XtCallbackList get_value;int jump_val;XtPointer pad[4];};
struct _8C2FD448F8CF6A602A866F997822A598 {BYTE type;CARD8 backingStore;CARD16 sequenceNumber;CARD32 length;CARD32 visualID;CARD16 c_class;CARD8 bitGravity;CARD8 winGravity;CARD32 backingBitPlanes;CARD32 backingPixel;BOOL saveUnder;BOOL mapInstalled;CARD8 mapState;BOOL override;CARD32 colormap;CARD32 allEventMasks;CARD32 yourEventMask;CARD16 doNotPropagateMask;CARD16 pad1;CARD32 root;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD8 depth;CARD8 pad2;};
struct _A6524737EEF8C4DE9F2A62890C064223 {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;};
struct _B17A026830C769E803D493B7F2598A70 {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;fsBitmapFormat format;};
struct _B76D2E1C695AB963EBB0451E02A66BD9 {Boolean echo;Boolean display_nonprinting;GC normgc;GC invgc;GC xorgc;XawTextPosition cursor_position;XawTextInsertState laststate;short cursor_x;short cursor_y;XFontSet fontset;XtPointer pad[4];};
struct _C30FF1240D2A8075F6967DECC9305E3F {BYTE type;CARD8 drawDirection;CARD16 sequenceNumber;CARD32 length;INT16 fontAscent;INT16 fontDescent;INT16 overallAscent;INT16 overallDescent;INT32 overallWidth;INT32 overallLeft;INT32 overallRight;CARD32 pad;};
struct _D08E3E427138D596819F8CEF4AEF4F32 {char *vendor;char *release;int version_count;IcePaVersionRec *version_recs;IceProtocolSetupProc protocol_setup_proc;IceProtocolActivateProc protocol_activate_proc;int auth_count;char **auth_names;IcePaAuthProc *auth_procs;IceHostBasedAuthProc host_based_auth_proc;IceIOErrorProc io_error_proc;};
union _D8231012D0728EC3472C30FA3109CEFA {Display *display;GC gc;Visual *visual;Screen *screen;ScreenFormat *pixmap_format;XFontStruct *font;};
struct xcb_xvmc_create_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xvmc_context_t context_id;xcb_xv_port_t port_id;xcb_xvmc_surface_t surface_id;uint16_t width;uint16_t height;uint32_t flags;};
struct xcb_xfixes_cursor_notify_event_t {uint8_t response_type;uint8_t subtype;uint16_t sequence;xcb_window_t window;uint32_t cursor_serial;xcb_timestamp_t timestamp;xcb_atom_t name;uint8_t pad0[12];};
struct xcb_shm_create_pixmap_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_pixmap_t pid;xcb_drawable_t drawable;uint16_t width;uint16_t height;uint8_t depth;uint8_t pad0[3];xcb_shm_seg_t shmseg;uint32_t offset;};
typedef void (*PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride,  GLvoid *pointer);
struct xcb_shape_rectangles_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_op_t operation;xcb_shape_kind_t destination_kind;uint8_t ordering;uint8_t pad0;xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;};
struct xcb_sync_query_alarm_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;xcb_sync_trigger_t trigger;xcb_sync_int64_t delta;uint8_t events;xcb_sync_alarmstate_t state;};
typedef void (*PFNGLMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed,  GLvoid *points);
struct xcb_create_window_request_t {uint8_t major_opcode;uint8_t depth;uint16_t length;xcb_window_t wid;xcb_window_t parent;int16_t x;int16_t y;uint16_t width;uint16_t height;uint16_t border_width;uint16_t _class;xcb_visualid_t visual;uint32_t value_mask;};
struct xcb_shape_combine_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_op_t operation;xcb_shape_kind_t destination_kind;xcb_shape_kind_t source_kind;uint8_t pad0;xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;xcb_window_t source_window;};
struct xcb_shm_get_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;int16_t x;int16_t y;uint16_t width;uint16_t height;uint32_t plane_mask;uint8_t format;uint8_t pad0[3];xcb_shm_seg_t shmseg;uint32_t offset;};
struct xcb_xv_get_still_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
struct xcb_xv_get_video_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
struct xcb_xv_port_notify_event_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;xcb_timestamp_t time;xcb_xv_port_t port;xcb_atom_t attribute;int32_t value;};
struct xcb_xv_put_still_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
struct xcb_xv_put_video_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;int16_t vid_x;int16_t vid_y;uint16_t vid_w;uint16_t vid_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;};
typedef void (*PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
struct xcb_damage_notify_event_t {uint8_t response_type;uint8_t level;uint16_t sequence;xcb_drawable_t drawable;xcb_damage_damage_t damage;xcb_timestamp_t timestamp;xcb_rectangle_t area;xcb_rectangle_t geometry;};
typedef void (*PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
struct xcb_button_press_event_t {uint8_t response_type;xcb_button_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t same_screen;};
struct xcb_copy_plane_request_t {uint8_t major_opcode;uint8_t pad0;uint16_t length;xcb_drawable_t src_drawable;xcb_drawable_t dst_drawable;xcb_gcontext_t gc;int16_t src_x;int16_t src_y;int16_t dst_x;int16_t dst_y;uint16_t width;uint16_t height;uint32_t bit_plane;};
struct xcb_shape_notify_event_t {uint8_t response_type;xcb_shape_kind_t shape_kind;uint16_t sequence;xcb_window_t affected_window;int16_t extents_x;int16_t extents_y;uint16_t extents_width;uint16_t extents_height;xcb_timestamp_t server_time;uint8_t shaped;};
struct _TransientShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TransientShellClassPart transient_shell_class;};
struct _TopLevelShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;};
struct WBXMLContentHandler_s {WBXMLStartDocumentHandler start_document_clb;WBXMLEndDocumentHandler end_document_clb;WBXMLStartElementHandler start_element_clb;WBXMLEndElementHandler end_element_clb;WBXMLCharactersHandler characters_clb;WBXMLProcessingInstructionHandler pi_clb;};
struct xcb_key_press_event_t {uint8_t response_type;xcb_keycode_t detail;uint16_t sequence;xcb_timestamp_t time;xcb_window_t root;xcb_window_t event;xcb_window_t child;int16_t root_x;int16_t root_y;int16_t event_x;int16_t event_y;uint16_t state;uint8_t same_screen;};
struct _ConstraintClassPart {XtResourceList resources;Cardinal num_resources;Cardinal constraint_size;XtInitProc initialize;XtWidgetProc destroy;XtSetValuesFunc set_values;XtPointer extension;};
struct _FormConstraintsPart {XawEdgeType top;XawEdgeType bottom;XawEdgeType left;XawEdgeType right;int dx;int dy;Widget horiz_base;Widget vert_base;Boolean allow_resize;short virtual_width;short virtual_height;Position new_x;Position new_y;LayoutState layout_state;Boolean deferred_resize;short virtual_x;short virtual_y;XtPointer pad[2];};
struct _XawTextPropertyList {XrmQuark identifier;Screen *screen;Colormap colormap;int depth;XawTextProperty **properties;Cardinal num_properties;XawTextPropertyList *next;};
struct reloc_howto_struct {unsigned int type;unsigned int rightshift;int size;unsigned int bitsize;bfd_boolean pc_relative;unsigned int bitpos;enum complain_overflow complain_on_overflow;bfd_reloc_status_type (*special_function)(bfd *, arelent *, struct bfd_symbol *, void *, asection *, bfd *, char **);char *name;bfd_boolean partial_inplace;bfd_vma src_mask;bfd_vma dst_mask;bfd_boolean pcrel_offset;};
struct CLIENT__clnt_ops {enum clnt_stat (*cl_call)(CLIENT *, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);void (*cl_abort)(void);void (*cl_geterr)(CLIENT *, struct rpc_err *);bool_t (*cl_freeres)(CLIENT *, xdrproc_t, caddr_t);void (*cl_destroy)(CLIENT *);bool_t (*cl_control)(CLIENT *, int, char *);};
struct FT_Raster_Funcs_ {FT_Glyph_Format glyph_format;FT_Raster_NewFunc raster_new;FT_Raster_ResetFunc raster_reset;FT_Raster_SetModeFunc raster_set_mode;FT_Raster_RenderFunc raster_render;FT_Raster_DoneFunc raster_done;};
struct _WindowsWMNotify {BYTE type;BYTE kind;CARD16 sequenceNumber;Window window;Time time;CARD16 pad1;CARD32 arg;INT16 x;INT16 y;CARD16 w;CARD16 h;};
typedef void (*XtAllocateProc)(WidgetClass, Cardinal *, Cardinal *, ArgList, Cardinal *, XtTypedArgList, Cardinal *, Widget *, XtPointer *);
struct _MultiSrcPart {XIC ic;XtPointer string;XawAsciiType type;XawTextPosition piece_size;Boolean data_compression;Boolean use_string_in_place;int multi_length;Boolean is_tempfile;Boolean allocated_string;XawTextPosition length;MultiPiece *first_piece;XtPointer pad[4];};
struct bfd_link_info {unsigned int relocatable : 1;unsigned int emitrelocations : 1;unsigned int task_link : 1;unsigned int shared : 1;unsigned int symbolic : 1;unsigned int direct : 1;unsigned int export_dynamic : 1;unsigned int static_link : 1;unsigned int traditional_format : 1;unsigned int optimize : 1;unsigned int hashvals : 1;unsigned int allow_multiple_definition : 1;unsigned int allow_undefined_version : 1;unsigned int create_default_symver : 1;unsigned int default_imported_symver : 1;unsigned int keep_memory : 1;unsigned int notice_all : 1;unsigned int nocopyreloc : 1;unsigned int new_dtags : 1;unsigned int combreloc : 1;unsigned int eh_frame_hdr : 1;unsigned int strip_discarded : 1;unsigned int pie : 1;unsigned int executable : 1;unsigned int execstack : 1;unsigned int noexecstack : 1;unsigned int relro : 1;unsigned int warn_shared_textrel : 1;unsigned int gc_sections : 1;unsigned int print_gc_sections : 1;unsigned int emit_hash : 1;unsigned int emit_gnu_hash : 1;unsigned int reduce_memory_overheads : 1;unsigned int dynsort : 1;enum report_method unresolved_syms_in_objects;enum report_method unresolved_syms_in_shared_libs;enum bfd_link_strip strip;enum bfd_link_discard discard;enum bfd_link_common_skip_ar_aymbols common_skip_ar_aymbols;char wrap_char; struct bfd_link_callbacks *callbacks;struct bfd_link_hash_table *hash;struct bfd_hash_table *keep_hash;struct bfd_hash_table *notice_hash;struct bfd_hash_table *wrap_hash;bfd *input_bfds;asection *create_object_symbols_section;struct bfd_sym_chain *gc_sym_list;void *base_file; char *init_function; char *fini_function;int relax_pass;int pei386_auto_import;int pei386_runtime_pseudo_reloc;unsigned int spare_dynamic_tags;bfd_vma flags;bfd_vma flags_1;bfd_vma relro_start;bfd_vma relro_end;struct bfd_elf_dynamic_list *dynamic;int dt_needed_index;};
struct splay_tree_s {splay_tree_node root;splay_tree_compare_fn comp;splay_tree_delete_key_fn delete_key;splay_tree_delete_value_fn delete_value;splay_tree_allocate_fn allocate;splay_tree_deallocate_fn deallocate;void *allocate_data;};
struct xcb_screen_t {xcb_window_t root;xcb_colormap_t default_colormap;uint32_t white_pixel;uint32_t black_pixel;uint32_t current_input_masks;uint16_t width_in_pixels;uint16_t height_in_pixels;uint16_t width_in_millimeters;uint16_t height_in_millimeters;uint16_t min_installed_maps;uint16_t max_installed_maps;xcb_visualid_t root_visual;uint8_t backing_stores;uint8_t save_unders;uint8_t root_depth;uint8_t allowed_depths_len;};
struct _ObjectPart {Widget self;WidgetClass widget_class;Widget parent;XrmName xrm_name;Boolean being_destroyed;XtCallbackList destroy_callbacks;XtPointer constraints;};
struct bfd_section { char *name;int id;int index;struct bfd_section *next;struct bfd_section *prev;flagword flags;unsigned int user_set_vma : 1;unsigned int linker_mark : 1;unsigned int linker_has_input : 1;unsigned int gc_mark : 1;unsigned int gc_mark_from_eh : 1;unsigned int segment_mark : 1;unsigned int sec_info_type : 3;unsigned int use_rela_p : 1;unsigned int has_tls_reloc : 1;unsigned int has_gp_reloc : 1;unsigned int need_finalize_relax : 1;unsigned int reloc_done : 1;bfd_vma vma;bfd_vma lma;bfd_size_type size;bfd_size_type rawsize;bfd_vma output_offset;struct bfd_section *output_section;unsigned int alignment_power;struct reloc_cache_entry *relocation;struct reloc_cache_entry **orelocation;unsigned int reloc_count;file_ptr filepos;file_ptr rel_filepos;file_ptr line_filepos;void *userdata;unsigned char *contents;alent *lineno;unsigned int lineno_count;unsigned int entsize;struct bfd_section *kept_section;file_ptr moving_line_filepos;int target_index;void *used_by_bfd;struct relent_chain *constructor_chain;bfd *owner;struct bfd_symbol *symbol;struct bfd_symbol **symbol_ptr_ptr;union bfd_section___9F836792AEA16A07FDA56DC7499E62B0 map_head;union bfd_section___9F836792AEA16A07FDA56DC7499E62B0 map_tail;};
struct _XawImPart {XIM xim;XrmResourceList resources;Cardinal num_resources;Boolean open_im;Boolean initialized;Dimension area_height;String input_method;String preedit_type;};
struct z_stream_s {Bytef *next_in;uInt avail_in;uLong total_in;Bytef *next_out;uInt avail_out;uLong total_out;char *msg;struct internal_state *state;alloc_func zalloc;free_func zfree;voidpf opaque;int data_type;uLong adler;uLong reserved;};
struct _xkbBell {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 bellClass;CARD16 bellID;INT8 percent;BOOL forceSound;BOOL eventOnly;CARD8 pad1;INT16 pitch;INT16 duration;CARD16 pad2;CARD32 name;CARD32 window;};
struct iw_range {__u32 throughput;__u32 min_nwid;__u32 max_nwid;__u16 old_num_channels;__u8 old_num_frequency;__u32 event_capa[6];__s32 sensitivity;struct iw_quality max_qual;struct iw_quality avg_qual;__u8 num_bitrates;__s32 bitrate[32];__s32 min_rts;__s32 max_rts;__s32 min_frag;__s32 max_frag;__s32 min_pmp;__s32 max_pmp;__s32 min_pmt;__s32 max_pmt;__u16 pmp_flags;__u16 pmt_flags;__u16 pm_capa;__u16 encoding_size[8];__u8 num_encoding_sizes;__u8 max_encoding_tokens;__u8 encoding_login_index;__u16 txpower_capa;__u8 num_txpower;__s32 txpower[8];__u8 we_version_compiled;__u8 we_version_source;__u16 retry_capa;__u16 retry_flags;__u16 r_time_flags;__s32 min_retry;__s32 max_retry;__s32 min_r_time;__s32 max_r_time;__u16 num_channels;__u8 num_frequency;struct iw_freq freq[32];__u32 enc_capa;__s32 min_pms;__s32 max_pms;__u16 pms_flags;__s32 modul_capa;__u32 bitrate_capa;};
union if_settings___26F75A7CF7D20622A142A8F9C6BB7EFD {raw_hdlc_proto *raw_hdlc;cisco_proto *cisco;fr_proto *fr;fr_proto_pvc *fr_pvc;fr_proto_pvc_info *fr_pvc_info;sync_serial_settings *sync;te1_settings *te1;};
struct _0DA2860FA9A69F203063D0028C53EA56 {BYTE swapped;BYTE detail;CARD16 sequenceNumber;Time time;Window root;Window event;Window child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BOOL sameScreen;};
struct _3982B52BB2F6F242AE0CDAAD29A77640 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nCharInfos;CARD32 nUniqCharInfos;CARD32 shmid;CARD32 shmsegoffset;};
struct _50D2B38DA8D5F7F9D092D3B0069535E8 {SmcConn connection;String session_id;String *restart_command;String *clone_command;String *discard_command;String *resign_command;String *shutdown_command;String *environment;String current_dir;String program_path;unsigned char restart_style;unsigned char checkpoint_state;Boolean join_session;XtCallbackList save_callbacks;XtCallbackList interact_callbacks;XtCallbackList cancel_callbacks;XtCallbackList save_complete_callbacks;XtCallbackList die_callbacks;XtCallbackList error_callbacks;XtSaveYourself save;XtInputId input_id;XtPointer ses20;XtPointer ses19;XtPointer ses18;XtPointer ses17;XtPointer ses16;XtPointer ses15;XtPointer ses14;XtPointer ses13;XtPointer ses12;XtPointer ses11;XtPointer ses10;XtPointer ses9;XtPointer ses8;XtPointer ses7;XtPointer ses6;XtPointer ses5;XtPointer ses4;XtPointer ses3;XtPointer ses2;XtPointer ses1;};
struct _798E7147B6C21289B5F0FC5985B127F4 {Cursor cursor;Pixmap insensitive_border;String cursor_name;Pixel pointer_fg;Pixel pointer_bg;Boolean international;XawDisplayList *display_list;String tip;XtPointer pad[3];};
struct _92276D725373BB3B16F8CB5C6778E662 {BYTE type;CARD8 nameLength;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nReplies;};
struct _A4EF4A77E40471EF410BD1BFBD9E090A {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 root_x;INT16 root_y;INT16 event_x;INT16 event_y;KeyButMask state;BOOL same_screen;CARD8 deviceid;};
struct _AAE88594007F457B798403BCEE2A7045 {Dimension highlight_thickness;XtCallbackList callbacks;Pixmap gray_pixmap;GC normal_GC;GC inverse_GC;Boolean set;XtCommandHighlight highlighted;int shape_style;Dimension corner_round;XtPointer pad[4];};
struct _CFC98DDC8C48D7D4D5B40C9CE62D3BBC {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;ApplicationShellPart application;};
struct _F5EF5B284EA9B9A59B7A392BA3F2AA41 {Dimension shadow_width;Pixel top_shadow_pixel;Pixel bot_shadow_pixel;Pixmap top_shadow_pxmap;Pixmap bot_shadow_pxmap;int top_shadow_contrast;int bot_shadow_contrast;GC top_shadow_GC;GC bot_shadow_GC;XtPointer user_data;Boolean be_nice_to_cmap;Boolean invert_border;XtRelief relief;};
typedef void (*PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride,  GLvoid *pointer);
struct xcb_glx_create_window_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_screen_t screen;xcb_glx_fbconfig_t fbconfig;xcb_window_t window;xcb_glx_window_t glx_window;uint32_t num_attribs;uint32_t value_mask;};
typedef void (*PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride,  GLvoid *pointer);
typedef void (*PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
struct xcb_shm_put_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_drawable_t drawable;xcb_gcontext_t gc;uint16_t total_width;uint16_t total_height;uint16_t src_x;uint16_t src_y;uint16_t src_width;uint16_t src_height;int16_t dst_x;int16_t dst_y;uint8_t depth;uint8_t format;uint8_t send_event;uint8_t pad0;xcb_shm_seg_t shmseg;uint32_t offset;};
struct xcb_xv_put_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;uint32_t id;int16_t src_x;int16_t src_y;uint16_t src_w;uint16_t src_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;uint16_t width;uint16_t height;};
struct _ApplicationShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;ApplicationShellClassPart application_shell_class;};
struct xcb_shape_mask_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_shape_op_t operation;xcb_shape_kind_t destination_kind;uint8_t pad0[2];xcb_window_t destination_window;int16_t x_offset;int16_t y_offset;xcb_pixmap_t source_bitmap;};
struct FT_Renderer_Class_ {FT_Module_Class root;FT_Glyph_Format glyph_format;FT_Renderer_RenderFunc render_glyph;FT_Renderer_TransformFunc transform_glyph;FT_Renderer_GetCBoxFunc get_glyph_cbox;FT_Renderer_SetModeFunc set_mode;FT_Raster_Funcs *raster_class;};
struct bfd_link_callbacks {bfd_boolean (*add_archive_element)(struct bfd_link_info *, bfd *abfd,  char *name);bfd_boolean (*multiple_definition)(struct bfd_link_info *,  char *name, bfd *obfd, asection *osec, bfd_vma oval, bfd *nbfd, asection *nsec, bfd_vma nval);bfd_boolean (*multiple_common)(struct bfd_link_info *,  char *name, bfd *obfd, enum bfd_link_hash_type otype, bfd_vma osize, bfd *nbfd, enum bfd_link_hash_type ntype, bfd_vma nsize);bfd_boolean (*add_to_set)(struct bfd_link_info *, struct bfd_link_hash_entry *entry, bfd_reloc_code_real_type reloc, bfd *abfd, asection *sec, bfd_vma value);bfd_boolean (*constructor)(struct bfd_link_info *, bfd_boolean constructor,  char *name, bfd *abfd, asection *sec, bfd_vma value);bfd_boolean (*warning)(struct bfd_link_info *,  char *warning,  char *symbol, bfd *abfd, asection *section, bfd_vma address);bfd_boolean (*undefined_symbol)(struct bfd_link_info *,  char *name, bfd *abfd, asection *section, bfd_vma address, bfd_boolean fatal);bfd_boolean (*reloc_overflow)(struct bfd_link_info *, struct bfd_link_hash_entry *entry,  char *name,  char *reloc_name, bfd_vma addend, bfd *abfd, asection *section, bfd_vma address);bfd_boolean (*reloc_dangerous)(struct bfd_link_info *,  char *message, bfd *abfd, asection *section, bfd_vma address);bfd_boolean (*unattached_reloc)(struct bfd_link_info *,  char *name, bfd *abfd, asection *section, bfd_vma address);bfd_boolean (*notice)(struct bfd_link_info *,  char *name, bfd *abfd, asection *section, bfd_vma address);void (*einfo)( char *fmt, ...);};
struct _TextSrcClassPart {_XawSrcReadProc Read;_XawSrcReplaceProc Replace;_XawSrcScanProc Scan;_XawSrcSearchProc Search;_XawSrcSetSelectionProc SetSelection;_XawSrcConvertSelectionProc ConvertSelection;XtPointer extension;};
struct CID_FaceInfoRec_ {FT_String *cid_font_name;FT_Fixed cid_version;FT_Int cid_font_type;FT_String *registry;FT_String *ordering;FT_Int supplement;PS_FontInfoRec font_info;FT_BBox font_bbox;FT_ULong uid_base;FT_Int num_xuid;FT_ULong xuid[16];FT_ULong cidmap_offset;FT_Int fd_bytes;FT_Int gd_bytes;FT_ULong cid_count;FT_Int num_dicts;CID_FaceDict font_dicts;FT_ULong data_offset;};
struct FT_Module_Class_ {FT_ULong module_flags;FT_Long module_size; FT_String *module_name;FT_Fixed module_version;FT_Fixed module_requires; void *module_interface;FT_Module_Constructor module_init;FT_Module_Destructor module_done;FT_Module_Requester get_interface;};
struct WBXMLLangEntry_s {WBXMLLanguage langID; WBXMLPublicIDEntry *publicID; WBXMLTagEntry *tagTable; WBXMLNameSpaceEntry *nsTable; WBXMLAttrEntry *attrTable; WBXMLAttrValueEntry *attrValueTable; WBXMLExtValueEntry *extValueTable;};
struct _XExtensionHooks {int (*create_gc)(Display *, GC, XExtCodes *);int (*copy_gc)(Display *, GC, XExtCodes *);int (*flush_gc)(Display *, GC, XExtCodes *);int (*free_gc)(Display *, GC, XExtCodes *);int (*create_font)(Display *, XFontStruct *, XExtCodes *);int (*free_font)(Display *, XFontStruct *, XExtCodes *);int (*close_display)(Display *, XExtCodes *);int (*wire_to_event)(Display *, XEvent *, xEvent *);int (*event_to_wire)(Display *, XEvent *, xEvent *);int (*error)(Display *, xError *, XExtCodes *, int *);char *(*error_string)(Display *, int, XExtCodes *, char *, int);};
struct _xQueryFontReply {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nCharInfos;};
struct PS_PrivateRec_ {FT_Int unique_id;FT_Int lenIV;FT_Byte num_blue_values;FT_Byte num_other_blues;FT_Byte num_family_blues;FT_Byte num_family_other_blues;FT_Short blue_values[14];FT_Short other_blues[10];FT_Short family_blues[14];FT_Short family_other_blues[10];FT_Fixed blue_scale;FT_Int blue_shift;FT_Int blue_fuzz;FT_UShort standard_width[1];FT_UShort standard_height[1];FT_Byte num_snap_widths;FT_Byte num_snap_heights;FT_Bool force_bold;FT_Bool round_stem_up;FT_Short snap_widths[13];FT_Short snap_heights[13];FT_Fixed expansion_factor;FT_Long language_group;FT_Long password;FT_Short min_feature[2];};
struct st_soundstream {st_signalinfo_t info;st_instrinfo_t instr;st_loopinfo_t loops[8];char swap;char seekable;char mode;st_size_t length;char *filename;char *filetype;char *comment;FILE *fp;st_fileinfo_t file;int st_errno;char st_errstr[256];st_format_t *h;double priv1;char priv[1000];};
struct _XkbGeometry {Atom name;unsigned short width_mm;unsigned short height_mm;char *label_font;XkbColorPtr label_color;XkbColorPtr base_color;unsigned short sz_properties;unsigned short sz_colors;unsigned short sz_shapes;unsigned short sz_sections;unsigned short sz_doodads;unsigned short sz_key_aliases;unsigned short num_properties;unsigned short num_colors;unsigned short num_shapes;unsigned short num_sections;unsigned short num_doodads;unsigned short num_key_aliases;XkbPropertyPtr properties;XkbColorPtr colors;XkbShapePtr shapes;XkbSectionPtr sections;XkbDoodadPtr doodads;XkbKeyAliasPtr key_aliases;};
union iwreq_data {char name[16];struct iw_point essid;struct iw_param nwid;struct iw_freq freq;struct iw_param sens;struct iw_param bitrate;struct iw_param txpower;struct iw_param rts;struct iw_param frag;__u32 mode;struct iw_param retry;struct iw_point encoding;struct iw_param power;struct iw_quality qual;struct sockaddr ap_addr;struct sockaddr addr;struct iw_param param;struct iw_point data;};
struct _FSServer {struct _FSServer *next;int fd;int proto_version;char *vendor;int byte_order;int vnumber;int release;int resource_id;struct _FSQEvent *head;struct _FSQEvent *tail;int qlen;unsigned int last_request_read;unsigned int request;char *last_req;char *buffer;char *bufptr;char *bufmax;unsigned int max_request_size;char *server_name;char *auth_data;AlternateServer *alternate_servers;int num_alternates;FSExtData *ext_data;_FSExtension *ext_procs;int ext_number;int (**event_vec)(FSServer *, FSEvent *, fsEvent *);int (**wire_vec)(FSServer *, FSEvent *, fsEvent *);char *scratch_buffer;unsigned int scratch_length;FSSyncHandler synchandler;unsigned int flags;struct _XtransConnInfo *trans_conn;};
struct _XcmsCCC {Display *dpy;int screenNumber;Visual *visual;XcmsColor clientWhitePt;XcmsCompressionProc gamutCompProc;XPointer gamutCompClientData;XcmsWhiteAdjustProc whitePtAdjProc;XPointer whitePtAdjClientData;XcmsPerScrnInfo *pPerScrnInfo;};
struct _4E230DA965C384CCE937FCE2A8CE1FCC {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;ApplicationShellPart application;SessionShellPart session;};
struct _4FE7A0243530ED5D54F44C34328C369B {Display *pdpy;XPContext pcontext;int xp_event_base;int xp_error_base;int inJob;int inDocument;int inPage;void *print_to_filehandle;Screen *pscreen;int pscreennumber;int document_dpi_x;int document_dpi_y;XpuSupportedFlags supported_job_attributes;XpuSupportedFlags supported_doc_attributes;XpuSupportedFlags supported_page_attributes;XpuMediumSourceSizeList medium_list;int medium_num_list_entries;XpuResolutionList resolution_list;int resolution_num_list_entries;XpuOrientationList orientation_list;int orientation_num_list_entries;XpuPlexList plex_list;int plex_num_list_entries;};
struct _8037B5CF1C7930037367B37388F05F8B {CARD8 reqType;CARD8 rushReqType;CARD16 length;XvPortID port;Drawable drawable;GContext gc;Pixmap pixmap;CARD32 id;INT16 src_x;INT16 src_y;CARD16 src_w;CARD16 src_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;};
struct _94144826E4178014C622990B92554F5C {unsigned int valuemask;Visual *visual;Colormap colormap;unsigned int depth;unsigned int width;unsigned int height;unsigned int x_hotspot;unsigned int y_hotspot;unsigned int cpp;Pixel *pixels;unsigned int npixels;XpmColorSymbol *colorsymbols;unsigned int numsymbols;char *rgb_fname;unsigned int nextensions;XpmExtension *extensions;unsigned int ncolors;XpmColor *colorTable;char *hints_cmt;char *colors_cmt;char *pixels_cmt;unsigned int mask_pixel;int exactColors;unsigned int closeness;unsigned int red_closeness;unsigned int green_closeness;unsigned int blue_closeness;int color_key;Pixel *alloc_pixels;int nalloc_pixels;int alloc_close_colors;int bitmap_format;XpmAllocColorFunc alloc_color;XpmFreeColorsFunc free_colors;void *color_closure;};
struct _D03F7999BD0EFD0AEFB0AB94057876B9 {Dimension hpad;Dimension vpad;Dimension line_width;Pixel foreground;XtGravity gravity;Boolean auto_reconfigure;GC gc;Widget tree_root;Dimension *largest;int n_largest;Dimension maxwidth;Dimension maxheight;XawDisplayList *display_list;XtPointer pad[4];};
struct xcb_xv_shm_put_image_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_xv_port_t port;xcb_drawable_t drawable;xcb_gcontext_t gc;xcb_shm_seg_t shmseg;uint32_t id;uint32_t offset;int16_t src_x;int16_t src_y;uint16_t src_w;uint16_t src_h;int16_t drw_x;int16_t drw_y;uint16_t drw_w;uint16_t drw_h;uint16_t width;uint16_t height;uint8_t send_event;};
struct XawPrintShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;ApplicationShellClassPart application_shell_class;XawPrintShellClassPart print_shell_class;};
struct _SessionShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;ApplicationShellClassPart application_shell_class;SessionShellClassPart session_shell_class;};
struct XawPrintShellRec {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;ApplicationShellPart application;XawPrintShellPart print;};
struct FT_Glyph_Class_ {FT_Long glyph_size;FT_Glyph_Format glyph_format;FT_Glyph_InitFunc glyph_init;FT_Glyph_DoneFunc glyph_done;FT_Glyph_CopyFunc glyph_copy;FT_Glyph_TransformFunc glyph_transform;FT_Glyph_GetBBoxFunc glyph_bbox;FT_Glyph_PrepareFunc glyph_prepare;};
struct _XawIcTablePart {Widget widget;XIC xic;XIMStyle input_style;unsigned int flg;unsigned int prev_flg;Boolean ic_focused;XFontSet font_set;Pixel foreground;Pixel background;Pixmap bg_pixmap;XawTextPosition cursor_position;unsigned int line_spacing;Boolean openic_error;struct _XawIcTablePart *next;};
struct FT_Open_Args_ {FT_UInt flags; FT_Byte *memory_base;FT_Long memory_size;FT_String *pathname;FT_Stream stream;FT_Module driver;FT_Int num_params;FT_Parameter *params;};
struct _FontRenderer {char *fileSuffix;int fileSuffixLen;int (*OpenBitmap)(FontPathElementPtr, FontPtr *, int, FontEntryPtr, char *, fsBitmapFormat, fsBitmapFormatMask, FontPtr);int (*OpenScalable)(FontPathElementPtr, FontPtr *, int, FontEntryPtr, char *, FontScalablePtr, fsBitmapFormat, fsBitmapFormatMask, FontPtr);int (*GetInfoBitmap)(FontPathElementPtr, FontInfoPtr, FontEntryPtr, char *);int (*GetInfoScalable)(FontPathElementPtr, FontInfoPtr, FontEntryPtr, FontNamePtr, char *, FontScalablePtr);int number;int capabilities;};
typedef int (*OpenFontFunc)(pointer client, FontPathElementPtr fpe, Mask flags, char *name, int namelen, fsBitmapFormat format, fsBitmapFormatMask fmask, XID id, FontPtr *pFont, char **aliasName, FontPtr non_cachable_font);
struct PS_BlendRec_ {FT_UInt num_designs;FT_UInt num_axis;FT_String *axis_names[4];FT_Fixed *design_pos[16];PS_DesignMapRec design_map[4];FT_Fixed *weight_vector;FT_Fixed *default_weight_vector;PS_FontInfo font_infos[17];PS_Private privates[17];FT_ULong blend_bitflags;FT_BBox *bboxes[17];FT_UInt default_design_vector[16];FT_UInt num_default_design_vector;};
struct _RequestRec {Select ctx;Widget widget;Window requestor;Atom property;Atom target;Atom type;int format;XtPointer value;unsigned int bytelength;unsigned int offset;XtIntervalId timeout;XSelectionRequestEvent event;Boolean allSent;};
struct __res_state {int retrans;int retry;u_long options;int nscount;struct sockaddr_in nsaddr_list[3];u_short id;char *dnsrch[7];char defdname[256];u_long pfcode;unsigned int ndots : 4;unsigned int nsort : 4;char unused[3];struct __res_state___A41D3F045172AF5618492D381489FAF0 sort_list[10];res_send_qhook qhook;res_send_rhook rhook;int res_h_errno;int _vcsock;u_int _flags;union __res_state___E19F19286CA79C25813C29B2F37D7904 _u;};
struct _IceConn {unsigned int io_ok : 1;unsigned int swap : 1;unsigned int waiting_for_byteorder : 1;unsigned int skip_want_to_close : 1;unsigned int want_to_close : 1;unsigned int free_asap : 1;unsigned int unused1 : 2;unsigned int unused2 : 8;IceConnectStatus connection_status;unsigned char my_ice_version_index;struct _XtransConnInfo *trans_conn;unsigned int send_sequence;unsigned int receive_sequence;char *connection_string;char *vendor;char *release;char *inbuf;char *inbufptr;char *inbufmax;char *outbuf;char *outbufptr;char *outbufmax;char *scratch;unsigned int scratch_size;int dispatch_level;IcePointer context;_IceProcessMsgInfo *process_msg_info;char his_min_opcode;char his_max_opcode;unsigned char open_ref_count;unsigned char proto_ref_count;IceListenObj listen_obj;_IceSavedReplyWait *saved_reply_waits;_IcePingWait *ping_waits;_IceConnectToYouInfo *connect_to_you;_IceProtoSetupToYouInfo *protosetup_to_you;_IceConnectToMeInfo *connect_to_me;_IceProtoSetupToMeInfo *protosetup_to_me;};
struct _XkbDesc {struct _XDisplay *dpy;unsigned short flags;unsigned short device_spec;KeyCode min_key_code;KeyCode max_key_code;XkbControlsPtr ctrls;XkbServerMapPtr server;XkbClientMapPtr map;XkbIndicatorPtr indicators;XkbNamesPtr names;XkbCompatMapPtr compat;XkbGeometryPtr geom;};
struct _Font {int refcnt;FontInfoRec info;char bit;char byte;char glyph;char scan;fsBitmapFormat format;int (*get_glyphs)(FontPtr, unsigned int, unsigned char *, FontEncoding, unsigned int *, CharInfoPtr *);int (*get_metrics)(FontPtr, unsigned int, unsigned char *, FontEncoding, unsigned int *, xCharInfo **);void (*unload_font)(FontPtr);void (*unload_glyphs)(FontPtr);FontPathElementPtr fpe;pointer svrPrivate;pointer fontPrivate;pointer fpePrivate;int maxPrivate;pointer *devPrivates;};
struct htab {htab_hash hash_f;htab_eq eq_f;htab_del del_f;void **entries;size_t size;size_t n_elements;size_t n_deleted;unsigned int searches;unsigned int collisions;htab_alloc alloc_f;htab_free free_f;void *alloc_arg;htab_alloc_with_arg alloc_with_arg_f;htab_free_with_arg free_with_arg_f;unsigned int size_prime_index;};
struct bfd {unsigned int id; char *filename; struct bfd_target *xvec;void *iostream; struct bfd_iovec *iovec;bfd_boolean cacheable;bfd_boolean target_defaulted;struct bfd *lru_prev;struct bfd *lru_next;ufile_ptr where;bfd_boolean opened_once;bfd_boolean mtime_set;int mtime;int ifd;bfd_format format;enum bfd__bfd_direction direction;flagword flags;ufile_ptr origin;bfd_boolean output_has_begun;struct bfd_hash_table section_htab;struct bfd_section *sections;struct bfd_section *section_last;unsigned int section_count;bfd_vma start_address;unsigned int symcount;struct bfd_symbol **outsymbols;unsigned int dynsymcount; struct bfd_arch_info *arch_info;bfd_boolean no_export;void *arelt_data;struct bfd *my_archive;struct bfd *next;struct bfd *archive_head;bfd_boolean has_armap;struct bfd *link_next;int archive_pass;union bfd___79E81F24FDD4E858974D117930D5B80D tdata;void *usrdata;void *memory;};
union _CDF3BC70CBFC5069783BD7650BD44CEE___199E9548C3C848AC2EFDDFCE03257421 {XcmsRGB RGB;XcmsRGBi RGBi;XcmsCIEXYZ CIEXYZ;XcmsCIEuvY CIEuvY;XcmsCIExyY CIExyY;XcmsCIELab CIELab;XcmsCIELuv CIELuv;XcmsTekHVC TekHVC;XcmsPad Pad;};
union demangle_component___BD38721DC8730D9720604E58D5DD62AB {struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___2B1610C43CB4355643BAC37269BF7BBD s_name;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___4D7B9F91797FDA1EDFB9ACCA9956D6AF s_operator;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___266F084FBD2DD430E7AFD348E031639B s_extended_operator;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___D1980AFFFC9687F94E18953A0671F132 s_ctor;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___5E8E083A73AC38B15B41F0D6DF520976 s_dtor;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___619292454ABA4BDF568AEF9D996941D4 s_builtin;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___EEECD32CAA16E098BD39A4A2C5E80212 s_string;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___53BFC109C2D88721EDDD2D191A43FEE2 s_number;struct demangle_component___BD38721DC8730D9720604E58D5DD62AB___AA2A6ECD71AC302E6CFCB957185D9CCF s_binary;};
struct _4C17583A42DA2A5F9B3C30D47F076D0A {XawTextEditType edit_mode;XrmQuark text_format;XtCallbackList callback;Boolean changed;Boolean enable_undo;Boolean undo_state;XawTextUndo *undo;WidgetList text;Cardinal num_text;XtCallbackList property_callback;XawTextAnchor **anchors;int num_anchors;XtPointer pad[1];};
struct _877451DBD18072CBABC3B29349C46696 {Pixel foreground;Dimension internal_width;Dimension internal_height;Dimension column_space;Dimension row_space;int default_cols;Boolean force_cols;Boolean paste;Boolean vertical_cols;int longest;int nitems;XFontStruct *font;XFontSet fontset;String *list;XtCallbackList callback;int is_highlighted;int highlight;int col_width;int row_height;int nrows;int ncols;GC normgc;GC revgc;GC graygc;int freedoms;int selected;Boolean show_current;char pad1[3];XtPointer pad2[2];};
struct _A5C97285B4EC7F28E1C14AA67E7E424B {Pixel foreground;XtOrientation orientation;XtCallbackList scrollProc;XtCallbackList thumbProc;XtCallbackList jumpProc;Pixmap thumb;Cursor upCursor;Cursor downCursor;Cursor leftCursor;Cursor rightCursor;Cursor verCursor;Cursor horCursor;float top;float shown;Dimension length;Dimension thickness;Dimension min_thumb;Cursor inactiveCursor;char direction;GC gc;Position topLoc;Dimension shownLength;XtPointer pad[4];};
struct _C9EFACD7AD111D54B2C71B18ED3A969D {XtSelectionCallbackProc *callbacks;XtPointer *req_closure;Atom property;Atom *target;Atom type;int format;char *value;int bytelength;int offset;XtIntervalId timeout;XtEventHandler proc;Widget widget;Time time;Select ctx;Boolean *incremental;int current;};
struct CID_FaceDictRec_ {PS_PrivateRec private_dict;FT_UInt len_buildchar;FT_Fixed forcebold_threshold;FT_Pos stroke_width;FT_Fixed expansion_factor;FT_Byte paint_type;FT_Byte font_type;FT_Matrix font_matrix;FT_Vector font_offset;FT_UInt num_subrs;FT_ULong subrmap_offset;FT_Int sd_bytes;};
struct _SimpleMenuPart {String label_string;SmeObject label;WidgetClass label_class;Dimension top_margin;Dimension bottom_margin;Dimension row_height;Cursor cursor;SmeObject popup_entry;Boolean menu_on_screen;int backing_store;Boolean recursive_set_values;Boolean menu_width;Boolean menu_height;SmeObject entry_set;Dimension left_margin;Dimension right_margin;XawDisplayList *display_list;Widget sub_menu;unsigned char state;XtPointer pad[4];};
struct _FTInstance {FTFacePtr face;FT_Size size;FTNormalisedTransformationRec transformation;FT_Int32 load_flags;FT_ULong strike_index;int spacing;double pixel_size;double pixel_width_unit_x;double pixel_width_unit_y;xCharInfo *charcellMetrics;int averageWidth;int rawAverageWidth;double advance;xCharInfo *forceConstantMetrics;FontBitmapFormatRec bmfmt;unsigned int nglyphs;CharInfoPtr *glyphs;int **available;struct TTCapInfo ttcap;int refcount;struct _FTInstance *next;};
struct td_thrinfo {td_thragent_t *ti_ta_p;unsigned int ti_user_flags;thread_t ti_tid;char *ti_tls;psaddr_t ti_startfunc;psaddr_t ti_stkbase;int ti_stksize;psaddr_t ti_ro_area;int ti_ro_size;td_thr_state_e ti_state;unsigned char ti_db_suspended;td_thr_type_e ti_type;intptr_t ti_pc;intptr_t ti_sp;short ti_flags;int ti_pri;lwpid_t ti_lid;sigset_t ti_sigmask;unsigned char ti_traceme;unsigned char ti_preemptflag;unsigned char ti_pirecflag;sigset_t ti_pending;td_thr_events_t ti_events;};
union jvalue {jboolean z;jbyte b;jchar c;jshort s;jint i;jlong j;jfloat f;jdouble d;jobject l;};
struct _XETC {struct _XETC *next;Display *dpy;INT32 eventBase;INT32 errorBase;INT32 extOpcode;BYTE *xbuff;CARD16 xmax_size;XExtData *ext_data;CARD16 release;CARD16 version;CARD16 revision;CARD16 protocol;unsigned int dirty;XETCValues values;Boolean (**eventFunc)(XETrapDataEvent *event, struct _XETC *tc);};
struct _10BF8BFF208FC04E48FB9712D25FCBB7 {XtCallbackList report_callbacks;Boolean allow_off;Boolean resize_to_pref;Pixel foreground;Pixel shadow_color;Dimension shadow_thickness;Dimension default_scale;Dimension line_width;Dimension canvas_width;Dimension canvas_height;Position slider_x;Position slider_y;Dimension slider_width;Dimension slider_height;Dimension internal_border;String stipple_name;GC slider_gc;GC shadow_gc;GC xor_gc;double haspect;double vaspect;Boolean rubber_band;struct _10BF8BFF208FC04E48FB9712D25FCBB7___33BBEBA79D8C3D381AA595E08C13178B tmp;Position knob_x;Position knob_y;Dimension knob_width;Dimension knob_height;Boolean shadow_valid;XRectangle shadow_rects[2];Position last_x;Position last_y;XtPointer pad[4];};
struct _A41C32B76964981F2FE8CE9B9485A97F {Pixel foreground;XFontStruct *font;XFontSet fontset;char *label;XtJustify justify;Dimension internal_width;Dimension internal_height;Pixmap pixmap;Boolean resize;unsigned char encoding;Pixmap left_bitmap;GC normal_GC;GC gray_GC;Pixmap stipple;Position label_x;Position label_y;Dimension label_width;Dimension label_height;Dimension label_len;int lbm_y;unsigned int lbm_width;unsigned int lbm_height;XtPointer pad[4];};
struct _AA401E6E4181592548E0AAEFA6FE89CD {String label;int vert_space;Pixmap left_bitmap;Pixmap right_bitmap;Dimension left_margin;Dimension right_margin;Pixel foreground;XFontStruct *font;XFontSet fontset;XtJustify justify;Boolean set_values_area_cleared;GC norm_gc;GC rev_gc;GC norm_gray_gc;GC invert_gc;Dimension left_bitmap_width;Dimension left_bitmap_height;Dimension right_bitmap_width;Dimension right_bitmap_height;String menu_name;XtPointer pad[4];};
struct _TipPart {Pixel foreground;XFontStruct *font;XFontSet fontset;Dimension top_margin;Dimension bottom_margin;Dimension left_margin;Dimension right_margin;int backing_store;int timeout;XawDisplayList *display_list;GC gc;XtIntervalId timer;String label;Boolean international;unsigned char encoding;XtPointer pad[4];};
struct stat {__dev_t st_dev;unsigned short __pad1;__ino_t st_ino;__mode_t st_mode;__nlink_t st_nlink;__uid_t st_uid;__gid_t st_gid;__dev_t st_rdev;unsigned short __pad2;__off_t st_size;__blksize_t st_blksize;__blkcnt_t st_blocks;struct timespec st_atim;struct timespec st_mtim;struct timespec st_ctim;unsigned int __unused4;unsigned int __unused5;};
struct _BB9D9B590A605113A47DE84E848B0D17 {Position grip_indent;Boolean refiguremode;XtTranslations grip_translations;Pixel internal_bp;Dimension internal_bw;XtOrientation orientation;Cursor cursor;Cursor grip_cursor;Cursor v_grip_cursor;Cursor h_grip_cursor;Cursor adjust_this_cursor;Cursor v_adjust_this_cursor;Cursor h_adjust_this_cursor;Cursor adjust_upper_cursor;Cursor adjust_lower_cursor;Cursor adjust_left_cursor;Cursor adjust_right_cursor;Boolean recursively_called;Boolean resize_children_to_pref;int start_loc;Widget whichadd;Widget whichsub;GC normgc;GC invgc;GC flipgc;int num_panes;PaneStack *stack;XtPointer pad[4];};
struct _TextSinkClassPart {_XawSinkDisplayTextProc DisplayText;_XawSinkInsertCursorProc InsertCursor;_XawSinkClearToBackgroundProc ClearToBackground;_XawSinkFindPositionProc FindPosition;_XawSinkFindDistanceProc FindDistance;_XawSinkResolveProc Resolve;_XawSinkMaxLinesProc MaxLines;_XawSinkMaxHeightProc MaxHeight;_XawSinkSetTabsProc SetTabs;_XawSinkGetCursorBoundsProc GetCursorBounds;TextSinkExt extension;};
struct disassemble_info {fprintf_ftype fprintf_func;void *stream;void *application_data;enum bfd_flavour flavour;enum bfd_architecture arch;unsigned int mach;enum bfd_endian endian;void *insn_sets;asection *section;asymbol **symbols;int num_symbols;unsigned int flags;void *private_data;int (*read_memory_func)(bfd_vma memaddr, bfd_byte *myaddr, unsigned int length, struct disassemble_info *info);void (*memory_error_func)(int status, bfd_vma memaddr, struct disassemble_info *info);void (*print_address_func)(bfd_vma addr, struct disassemble_info *info);int (*symbol_at_address_func)(bfd_vma addr, struct disassemble_info *info);bfd_boolean (*symbol_is_valid)(asymbol *, struct disassemble_info *info);bfd_byte *buffer;bfd_vma buffer_vma;unsigned int buffer_length;int bytes_per_line;int bytes_per_chunk;enum bfd_endian display_endian;unsigned int octets_per_byte;unsigned int skip_zeroes;unsigned int skip_zeroes_at_end;bfd_boolean disassembler_needs_relocs;char insn_info_valid;char branch_delay_insns;char data_size;enum dis_insn_type insn_type;bfd_vma target;bfd_vma target2;char *disassembler_options;};
struct _SelectRec {Atom selection;Display *dpy;Widget widget;Time time;unsigned int serial;XtConvertSelectionProc convert;XtLoseSelectionProc loses;XtSelectionDoneProc notify;XtCancelConvertSelectionProc owner_cancel;XtPointer owner_closure;PropList prop_list;Request req;int ref_count;unsigned int incremental : 1;unsigned int free_when_done : 1;unsigned int was_disowned : 1;};
union _xkbEvent___1A318C185F777B9ECB86573CC964DEF2 {xkbAnyEvent any;xkbNewKeyboardNotify new_kbd;xkbMapNotify map;xkbStateNotify state;xkbControlsNotify ctrls;xkbIndicatorNotify indicators;xkbNamesNotify names;xkbCompatMapNotify compat;xkbBellNotify bell;xkbActionMessage message;xkbAccessXNotify accessx;xkbExtensionDeviceNotify device;};
struct _XExten {struct _XExten *next;XExtCodes codes;CreateGCType create_GC;CopyGCType copy_GC;FlushGCType flush_GC;FreeGCType free_GC;CreateFontType create_Font;FreeFontType free_Font;CloseDisplayType close_display;ErrorType error;ErrorStringType error_string;char *name;PrintErrorType error_values;BeforeFlushType before_flush;struct _XExten *next_flush;};
union _XkbAction {XkbAnyAction any;XkbModAction mods;XkbGroupAction group;XkbISOAction iso;XkbPtrAction ptr;XkbPtrBtnAction btn;XkbPtrDfltAction dflt;XkbSwitchScreenAction screen;XkbCtrlsAction ctrls;XkbMessageAction msg;XkbRedirectKeyAction redirect;XkbDeviceBtnAction devbtn;XkbDeviceValuatorAction devval;unsigned char type;};
union _XkbEvent {int type;XkbAnyEvent any;XkbNewKeyboardNotifyEvent new_kbd;XkbMapNotifyEvent map;XkbStateNotifyEvent state;XkbControlsNotifyEvent ctrls;XkbIndicatorNotifyEvent indicators;XkbNamesNotifyEvent names;XkbCompatMapNotifyEvent compat;XkbBellNotifyEvent bell;XkbActionMessageEvent message;XkbAccessXNotifyEvent accessx;XkbExtensionDeviceNotifyEvent device;XEvent core;};
struct _XDisplay {XExtData *ext_data;struct _XFreeFuncs *free_funcs;int fd;int conn_checker;int proto_major_version;int proto_minor_version;char *vendor;XID resource_base;XID resource_mask;XID resource_id;int resource_shift;XID (*resource_alloc)(struct _XDisplay *);int byte_order;int bitmap_unit;int bitmap_pad;int bitmap_bit_order;int nformats;ScreenFormat *pixmap_format;int vnumber;int release;struct _XSQEvent *head;struct _XSQEvent *tail;int qlen;unsigned int last_request_read;unsigned int request;char *last_req;char *buffer;char *bufptr;char *bufmax;unsigned int max_request_size;struct _XrmHashBucketRec *db;int (*synchandler)(struct _XDisplay *);char *display_name;int default_screen;int nscreens;Screen *screens;unsigned int motion_buffer;unsigned int flags;int min_keycode;int max_keycode;KeySym *keysyms;XModifierKeymap *modifiermap;int keysyms_per_keycode;char *xdefaults;char *scratch_buffer;unsigned int scratch_length;int ext_number;struct _XExten *ext_procs;int (**event_vec)(Display *, XEvent *, xEvent *);int (**wire_vec)(Display *, XEvent *, xEvent *);KeySym lock_meaning;struct _XLockInfo *lock;struct _XInternalAsync *async_handlers;unsigned int bigreq_size;struct _XLockPtrs *lock_fns;void (*idlist_alloc)(Display *, XID *, int);struct _XKeytrans *key_bindings;Font cursor_font;struct _XDisplayAtoms *atoms;unsigned int mode_switch;unsigned int num_lock;struct _XContextDB *context_db;int (**error_vec)(Display *, XErrorEvent *, xError *);struct _XDisplay___40E717ABED307E15FC65B9096F5C7074 cms;struct _XIMFilter *im_filters;struct _XSQEvent *qfree;unsigned int next_event_serial_num;struct _XExten *flushes;struct _XConnectionInfo *im_fd_info;int im_fd_length;struct _XConnWatchInfo *conn_watchers;int watcher_count;XPointer filedes;int (*savedsynchandler)(Display *);XID resource_max;int xcmisc_opcode;struct _XkbInfoRec *xkb_info;struct _XtransConnInfo *trans_conn;};
struct FT_GlyphSlotRec_ {FT_Library library;FT_Face face;FT_GlyphSlot next;FT_UInt reserved;FT_Generic generic;FT_Glyph_Metrics metrics;FT_Fixed linearHoriAdvance;FT_Fixed linearVertAdvance;FT_Vector advance;FT_Glyph_Format format;FT_Bitmap bitmap;FT_Int bitmap_left;FT_Int bitmap_top;FT_Outline outline;FT_UInt num_subglyphs;FT_SubGlyph subglyphs;void *control_data;int control_len;FT_Pos lsb_delta;FT_Pos rsb_delta;void *other;FT_Slot_Internal internal;};
struct _FPEFunctions {NameCheckFunc name_check;InitFpeFunc init_fpe;ResetFpeFunc reset_fpe;FreeFpeFunc free_fpe;OpenFontFunc open_font;CloseFontFunc close_font;ListFontsFunc list_fonts;StartLaFunc start_list_fonts_and_aliases;NextLaFunc list_next_font_or_alias;StartLfwiFunc start_list_fonts_with_info;NextLfwiFunc list_next_font_with_info;WakeupFpeFunc wakeup_fpe;ClientDiedFunc client_died;LoadGlyphsFunc load_glyphs;SetPathFunc set_path_hook;};
struct _ObjectClassPart {WidgetClass superclass;String class_name;Cardinal widget_size;XtProc class_initialize;XtWidgetClassProc class_part_initialize;XtEnum class_inited;XtInitProc initialize;XtArgsProc initialize_hook;XtProc obj1;XtPointer obj2;Cardinal obj3;XtResourceList resources;Cardinal num_resources;XrmClass xrm_class;Boolean obj4;XtEnum obj5;Boolean obj6;Boolean obj7;XtWidgetProc destroy;XtProc obj8;XtProc obj9;XtSetValuesFunc set_values;XtArgsFunc set_values_hook;XtProc obj10;XtArgsProc get_values_hook;XtProc obj11;XtVersionType version;XtPointer callback_private;String obj12;XtProc obj13;XtProc obj14;XtPointer extension;};
struct FT_FaceRec_ {FT_Long num_faces;FT_Long face_index;FT_Long face_flags;FT_Long style_flags;FT_Long num_glyphs;FT_String *family_name;FT_String *style_name;FT_Int num_fixed_sizes;FT_Bitmap_Size *available_sizes;FT_Int num_charmaps;FT_CharMap *charmaps;FT_Generic generic;FT_BBox bbox;FT_UShort units_per_EM;FT_Short ascender;FT_Short descender;FT_Short height;FT_Short max_advance_width;FT_Short max_advance_height;FT_Short underline_position;FT_Short underline_thickness;FT_GlyphSlot glyph;FT_Size size;FT_CharMap charmap;FT_Driver driver;FT_Memory memory;FT_Stream stream;FT_ListRec sizes_list;FT_Generic autohint;void *extensions;FT_Face_Internal internal;};
struct _RectObjClassPart {WidgetClass superclass;String class_name;Cardinal widget_size;XtProc class_initialize;XtWidgetClassProc class_part_initialize;XtEnum class_inited;XtInitProc initialize;XtArgsProc initialize_hook;XtProc rect1;XtPointer rect2;Cardinal rect3;XtResourceList resources;Cardinal num_resources;XrmClass xrm_class;Boolean rect4;XtEnum rect5;Boolean rect6;Boolean rect7;XtWidgetProc destroy;XtWidgetProc resize;XtExposeProc expose;XtSetValuesFunc set_values;XtArgsFunc set_values_hook;XtAlmostProc set_values_almost;XtArgsProc get_values_hook;XtProc rect9;XtVersionType version;XtPointer callback_private;String rect10;XtGeometryHandler query_geometry;XtProc rect11;XtPointer extension;};
struct _CorePart {Widget self;WidgetClass widget_class;Widget parent;XrmName xrm_name;Boolean being_destroyed;XtCallbackList destroy_callbacks;XtPointer constraints;Position x;Position y;Dimension width;Dimension height;Dimension border_width;Boolean managed;Boolean sensitive;Boolean ancestor_sensitive;XtEventTable event_table;XtTMRec tm;XtTranslations accelerators;Pixel border_pixel;Pixmap border_pixmap;WidgetList popup_list;Cardinal num_popups;String name;Screen *screen;Colormap colormap;Window window;Cardinal depth;Pixel background_pixel;Pixmap background_pixmap;Boolean visible;Boolean mapped_when_managed;};
struct _TextPart {Widget source;Widget sink;XawTextPosition insertPos;XawTextSelection s;XawTextSelectType *sarray;XawTextSelectionSalt *salt;int left_margin;int dialog_horiz_offset;int dialog_vert_offset;Boolean display_caret;Boolean auto_fill;XawTextScrollMode scroll_vert;XawTextScrollMode scroll_horiz;XawTextWrapMode wrap;XawTextResizeMode resize;XawTextMargin r_margin;XtCallbackList position_callbacks;XawTextMargin margin;XawTextLineTable lt;XawTextScanDirection extendDir;XawTextSelection origSel;Time lasttime;Time time;Position ev_x;Position ev_y;Widget vbar;Widget hbar;struct SearchAndReplace *search;Widget file_insert;XmuTextUpdate *update;int line_number;short column_number;unsigned char kill_ring;Boolean selection_state;int from_left;XawTextPosition lastPos;GC gc;Boolean showposition;Boolean hasfocus;Boolean update_disabled;Boolean clear_to_eol;XawTextPosition old_insert;short mult;XawTextKillRing *kill_ring_ptr;Boolean redisplay_needed;XawTextSelectionSalt *salt2;char numeric;char source_changed;Boolean overwrite;short left_column;short right_column;XawTextJustifyMode justify;XtPointer pad[4];};
struct _XtPerDisplayStruct {InternalCallbackList destroy_callbacks;Region region;CaseConverterPtr case_cvt;XtKeyProc defaultKeycodeTranslator;XtAppContext appContext;unsigned int keysyms_serial;KeySym *keysyms;int keysyms_per_keycode;int min_keycode;int max_keycode;KeySym *modKeysyms;ModToKeysymTable *modsToKeysyms;unsigned char isModifier[32];KeySym lock_meaning;Modifiers mode_switch;Modifiers num_lock;Boolean being_destroyed;Boolean rv;XrmName name;XrmClass c_class;Heap heap;struct _GCrec *GClist;Drawable **pixmap_tab;String language;XEvent last_event;Time last_timestamp;int multi_click_time;struct _TMKeyContextRec *tm_context;InternalCallbackList mapping_callbacks;XtPerDisplayInputRec pdi;struct _WWTable *WWtable;XrmDatabase *per_screen_db;XrmDatabase cmd_db;XrmDatabase server_db;XtEventDispatchProc *dispatcher_list;ExtSelectRec *ext_select_list;int ext_select_count;Widget hook_object;Atom rcm_init;Atom rcm_data;};
struct _CoreClassPart {WidgetClass superclass;String class_name;Cardinal widget_size;XtProc class_initialize;XtWidgetClassProc class_part_initialize;XtEnum class_inited;XtInitProc initialize;XtArgsProc initialize_hook;XtRealizeProc realize;XtActionList actions;Cardinal num_actions;XtResourceList resources;Cardinal num_resources;XrmClass xrm_class;Boolean compress_motion;XtEnum compress_exposure;Boolean compress_enterleave;Boolean visible_interest;XtWidgetProc destroy;XtWidgetProc resize;XtExposeProc expose;XtSetValuesFunc set_values;XtArgsFunc set_values_hook;XtAlmostProc set_values_almost;XtArgsProc get_values_hook;XtAcceptFocusProc accept_focus;XtVersionType version;XtPointer callback_private;String tm_table;XtGeometryHandler query_geometry;XtStringProc display_accelerator;XtPointer extension;};
struct _XtAppStruct {XtAppContext next;ProcessContext process;InternalCallbackList destroy_callbacks;Display **list;TimerEventRec *timerQueue;WorkProcRec *workQueue;InputEvent **input_list;InputEvent *outstandingQueue;SignalEventRec *signalQueue;XrmDatabase errorDB;XtErrorMsgHandler errorMsgHandler;XtErrorMsgHandler warningMsgHandler;XtErrorHandler errorHandler;XtErrorHandler warningHandler;struct _ActionListRec *action_table;ConverterTable converterTable;unsigned int selectionTimeout;FdStruct fds;short count;short max;short last;short input_count;short input_max;Boolean sync;Boolean being_destroyed;Boolean error_inited;Boolean identify_windows;Heap heap;String *fallback_resources;struct _ActionHookRec *action_hook_list;struct _BlockHookRec *block_hook_list;int destroy_list_size;int destroy_count;int dispatch_level;DestroyRec *destroy_list;Widget in_phase2_destroy;LangProcRec langProcRec;struct _TMBindCacheRec *free_bindings;String display_name_tried;Display **dpy_destroy_list;int dpy_destroy_count;Boolean exit_flag;Boolean rebuild_fdlist;LockPtr lock_info;ThreadAppProc lock;ThreadAppProc unlock;ThreadAppYieldLockProc yield_lock;ThreadAppRestoreLockProc restore_lock;ThreadAppProc free_lock;};
struct bfd_target {char *name;enum bfd_flavour flavour;enum bfd_endian byteorder;enum bfd_endian header_byteorder;flagword object_flags;flagword section_flags;char symbol_leading_char;char ar_pad_char;unsigned short ar_max_namelen;bfd_uint64_t (*bfd_getx64)( void *);bfd_int64_t (*bfd_getx_signed_64)( void *);void (*bfd_putx64)(bfd_uint64_t, void *);bfd_vma (*bfd_getx32)( void *);bfd_signed_vma (*bfd_getx_signed_32)( void *);void (*bfd_putx32)(bfd_vma, void *);bfd_vma (*bfd_getx16)( void *);bfd_signed_vma (*bfd_getx_signed_16)( void *);void (*bfd_putx16)(bfd_vma, void *);bfd_uint64_t (*bfd_h_getx64)( void *);bfd_int64_t (*bfd_h_getx_signed_64)( void *);void (*bfd_h_putx64)(bfd_uint64_t, void *);bfd_vma (*bfd_h_getx32)( void *);bfd_signed_vma (*bfd_h_getx_signed_32)( void *);void (*bfd_h_putx32)(bfd_vma, void *);bfd_vma (*bfd_h_getx16)( void *);bfd_signed_vma (*bfd_h_getx_signed_16)( void *);void (*bfd_h_putx16)(bfd_vma, void *); struct bfd_target *(**_bfd_check_format)(bfd *);bfd_boolean (**_bfd_set_format)(bfd *);bfd_boolean (**_bfd_write_contents)(bfd *);bfd_boolean (*_close_and_cleanup)(bfd *);bfd_boolean (*_bfd_free_cached_info)(bfd *);bfd_boolean (*_new_section_hook)(bfd *, sec_ptr);bfd_boolean (*_bfd_get_section_contents)(bfd *, sec_ptr, void *, file_ptr, bfd_size_type);bfd_boolean (*_bfd_get_section_contents_in_window)(bfd *, sec_ptr, bfd_window *, file_ptr, bfd_size_type);bfd_boolean (*_bfd_copy_private_bfd_data)(bfd *, bfd *);bfd_boolean (*_bfd_merge_private_bfd_data)(bfd *, bfd *);bfd_boolean (*_bfd_init_private_section_data)(bfd *, sec_ptr, bfd *, sec_ptr, struct bfd_link_info *);bfd_boolean (*_bfd_copy_private_section_data)(bfd *, sec_ptr, bfd *, sec_ptr);bfd_boolean (*_bfd_copy_private_symbol_data)(bfd *, asymbol *, bfd *, asymbol *);bfd_boolean (*_bfd_copy_private_header_data)(bfd *, bfd *);bfd_boolean (*_bfd_set_private_flags)(bfd *, flagword);bfd_boolean (*_bfd_print_private_bfd_data)(bfd *, void *);char *(*_core_file_failing_command)(bfd *);int (*_core_file_failing_signal)(bfd *);bfd_boolean (*_core_file_matches_executable_p)(bfd *, bfd *);bfd_boolean (*_bfd_slurp_armap)(bfd *);bfd_boolean (*_bfd_slurp_extended_name_table)(bfd *);bfd_boolean (*_bfd_construct_extended_name_table)(bfd *, char **, bfd_size_type *,  char **);void (*_bfd_truncate_arname)(bfd *,  char *, char *);bfd_boolean (*write_armap)(bfd *, unsigned int, struct orl *, unsigned int, int);void *(*_bfd_read_ar_hdr_fn)(bfd *);bfd *(*openr_next_archived_file)(bfd *, bfd *);bfd *(*_bfd_get_elt_at_index)(bfd *, symindex);int (*_bfd_stat_arch_elt)(bfd *, struct stat *);bfd_boolean (*_bfd_update_armap_timestamp)(bfd *);int (*_bfd_get_symtab_upper_bound)(bfd *);int (*_bfd_canonicalize_symtab)(bfd *, struct bfd_symbol **);struct bfd_symbol *(*_bfd_make_empty_symbol)(bfd *);void (*_bfd_print_symbol)(bfd *, void *, struct bfd_symbol *, bfd_print_symbol_type);void (*_bfd_get_symbol_info)(bfd *, struct bfd_symbol *, symbol_info *);bfd_boolean (*_bfd_is_local_label_name)(bfd *,  char *);bfd_boolean (*_bfd_is_target_special_symbol)(bfd *, asymbol *);alent *(*_get_lineno)(bfd *, struct bfd_symbol *);bfd_boolean (*_bfd_find_nearest_line)(bfd *, struct bfd_section *, struct bfd_symbol **, bfd_vma,  char **,  char **, unsigned int *);bfd_boolean (*_bfd_find_line)(bfd *, struct bfd_symbol **, struct bfd_symbol *,  char **, unsigned int *);bfd_boolean (*_bfd_find_inliner_info)(bfd *,  char **,  char **, unsigned int *);asymbol *(*_bfd_make_debug_symbol)(bfd *, void *, unsigned int size);int (*_read_minisymbols)(bfd *, bfd_boolean, void **, unsigned int *);asymbol *(*_minisymbol_to_symbol)(bfd *, bfd_boolean,  void *, asymbol *);int (*_get_reloc_upper_bound)(bfd *, sec_ptr);int (*_bfd_canonicalize_reloc)(bfd *, sec_ptr, arelent **, struct bfd_symbol **);reloc_howto_type *(*reloc_type_lookup)(bfd *, bfd_reloc_code_real_type);bfd_boolean (*_bfd_set_arch_mach)(bfd *, enum bfd_architecture, unsigned int);bfd_boolean (*_bfd_set_section_contents)(bfd *, sec_ptr,  void *, file_ptr, bfd_size_type);int (*_bfd_sizeof_headers)(bfd *, struct bfd_link_info *);bfd_byte *(*_bfd_get_relocated_section_contents)(bfd *, struct bfd_link_info *, struct bfd_link_order *, bfd_byte *, bfd_boolean, struct bfd_symbol **);bfd_boolean (*_bfd_relax_section)(bfd *, struct bfd_section *, struct bfd_link_info *, bfd_boolean *);struct bfd_link_hash_table *(*_bfd_link_hash_table_create)(bfd *);void (*_bfd_link_hash_table_free)(struct bfd_link_hash_table *);bfd_boolean (*_bfd_link_add_symbols)(bfd *, struct bfd_link_info *);void (*_bfd_link_just_syms)(asection *, struct bfd_link_info *);bfd_boolean (*_bfd_final_link)(bfd *, struct bfd_link_info *);bfd_boolean (*_bfd_link_split_section)(bfd *, struct bfd_section *);bfd_boolean (*_bfd_gc_sections)(bfd *, struct bfd_link_info *);bfd_boolean (*_bfd_merge_sections)(bfd *, struct bfd_link_info *);bfd_boolean (*_bfd_is_group_section)(bfd *,  struct bfd_section *);bfd_boolean (*_bfd_discard_group)(bfd *, struct bfd_section *);void (*_section_already_linked)(bfd *, struct bfd_section *, struct bfd_link_info *);int (*_bfd_get_dynamic_symtab_upper_bound)(bfd *);int (*_bfd_canonicalize_dynamic_symtab)(bfd *, struct bfd_symbol **);int (*_bfd_get_synthetic_symtab)(bfd *, int, struct bfd_symbol **, int, struct bfd_symbol **, struct bfd_symbol **);int (*_bfd_get_dynamic_reloc_upper_bound)(bfd *);int (*_bfd_canonicalize_dynamic_reloc)(bfd *, arelent **, struct bfd_symbol **); struct bfd_target *alternative_target; void *backend_data;};
struct JNINativeInterface {void *reserved0;void *reserved1;void *reserved2;void *reserved3;jint (*GetVersion)(JNIEnv *);jclass (*DefineClass)(JNIEnv *,  char *, jobject,  jbyte *, jsize);jclass (*FindClass)(JNIEnv *,  char *);jmethodID (*FromReflectedMethod)(JNIEnv *, jobject);jfieldID (*FromReflectedField)(JNIEnv *, jobject);jobject (*ToReflectedMethod)(JNIEnv *, jclass, jmethodID, jboolean);jclass (*GetSuperclass)(JNIEnv *, jclass);jboolean (*IsAssignableFrom)(JNIEnv *, jclass, jclass);jobject (*ToReflectedField)(JNIEnv *, jclass, jfieldID, jboolean);jint (*Throw)(JNIEnv *, jthrowable);jint (*ThrowNew)(JNIEnv *, jclass,  char *);jthrowable (*ExceptionOccurred)(JNIEnv *);void (*ExceptionDescribe)(JNIEnv *);void (*ExceptionClear)(JNIEnv *);void (*FatalError)(JNIEnv *,  char *);jint (*PushLocalFrame)(JNIEnv *, jint);jobject (*PopLocalFrame)(JNIEnv *, jobject);jobject (*NewGlobalRef)(JNIEnv *, jobject);void (*DeleteGlobalRef)(JNIEnv *, jobject);void (*DeleteLocalRef)(JNIEnv *, jobject);jboolean (*IsSameObject)(JNIEnv *, jobject, jobject);jobject (*NewLocalRef)(JNIEnv *, jobject);jint (*EnsureLocalCapacity)(JNIEnv *, jint);jobject (*AllocObject)(JNIEnv *, jclass);jobject (*NewObject)(JNIEnv *, jclass, jmethodID, ...);jobject (*NewObjectV)(JNIEnv *, jclass, jmethodID, va_list);jobject (*NewObjectA)(JNIEnv *, jclass, jmethodID, jvalue *);jclass (*GetObjectClass)(JNIEnv *, jobject);jboolean (*IsInstanceOf)(JNIEnv *, jobject, jclass);jmethodID (*GetMethodID)(JNIEnv *, jclass,  char *,  char *);jobject (*CallObjectMethod)(JNIEnv *, jobject, jmethodID, ...);jobject (*CallObjectMethodV)(JNIEnv *, jobject, jmethodID, va_list);jobject (*CallObjectMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jboolean (*CallBooleanMethod)(JNIEnv *, jobject, jmethodID, ...);jboolean (*CallBooleanMethodV)(JNIEnv *, jobject, jmethodID, va_list);jboolean (*CallBooleanMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jbyte (*CallByteMethod)(JNIEnv *, jobject, jmethodID, ...);jbyte (*CallByteMethodV)(JNIEnv *, jobject, jmethodID, va_list);jbyte (*CallByteMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jchar (*CallCharMethod)(JNIEnv *, jobject, jmethodID, ...);jchar (*CallCharMethodV)(JNIEnv *, jobject, jmethodID, va_list);jchar (*CallCharMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jshort (*CallShortMethod)(JNIEnv *, jobject, jmethodID, ...);jshort (*CallShortMethodV)(JNIEnv *, jobject, jmethodID, va_list);jshort (*CallShortMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jint (*CallIntMethod)(JNIEnv *, jobject, jmethodID, ...);jint (*CallIntMethodV)(JNIEnv *, jobject, jmethodID, va_list);jint (*CallIntMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jlong (*CallLongMethod)(JNIEnv *, jobject, jmethodID, ...);jlong (*CallLongMethodV)(JNIEnv *, jobject, jmethodID, va_list);jlong (*CallLongMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jfloat (*CallFloatMethod)(JNIEnv *, jobject, jmethodID, ...);jfloat (*CallFloatMethodV)(JNIEnv *, jobject, jmethodID, va_list);jfloat (*CallFloatMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jdouble (*CallDoubleMethod)(JNIEnv *, jobject, jmethodID, ...);jdouble (*CallDoubleMethodV)(JNIEnv *, jobject, jmethodID, va_list);jdouble (*CallDoubleMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);void (*CallVoidMethod)(JNIEnv *, jobject, jmethodID, ...);void (*CallVoidMethodV)(JNIEnv *, jobject, jmethodID, va_list);void (*CallVoidMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jobject (*CallNonvirtualObjectMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jobject (*CallNonvirtualObjectMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jobject (*CallNonvirtualObjectMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jboolean (*CallNonvirtualBooleanMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jboolean (*CallNonvirtualBooleanMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jboolean (*CallNonvirtualBooleanMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jbyte (*CallNonvirtualByteMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jbyte (*CallNonvirtualByteMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jbyte (*CallNonvirtualByteMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jchar (*CallNonvirtualCharMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jchar (*CallNonvirtualCharMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jchar (*CallNonvirtualCharMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jshort (*CallNonvirtualShortMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jshort (*CallNonvirtualShortMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jshort (*CallNonvirtualShortMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jint (*CallNonvirtualIntMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jint (*CallNonvirtualIntMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jint (*CallNonvirtualIntMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jlong (*CallNonvirtualLongMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jlong (*CallNonvirtualLongMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jlong (*CallNonvirtualLongMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jfloat (*CallNonvirtualFloatMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jfloat (*CallNonvirtualFloatMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jfloat (*CallNonvirtualFloatMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jdouble (*CallNonvirtualDoubleMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jdouble (*CallNonvirtualDoubleMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jdouble (*CallNonvirtualDoubleMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);void (*CallNonvirtualVoidMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);void (*CallNonvirtualVoidMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);void (*CallNonvirtualVoidMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jfieldID (*GetFieldID)(JNIEnv *, jclass,  char *,  char *);jobject (*GetObjectField)(JNIEnv *, jobject, jfieldID);jboolean (*GetBooleanField)(JNIEnv *, jobject, jfieldID);jbyte (*GetByteField)(JNIEnv *, jobject, jfieldID);jchar (*GetCharField)(JNIEnv *, jobject, jfieldID);jshort (*GetShortField)(JNIEnv *, jobject, jfieldID);jint (*GetIntField)(JNIEnv *, jobject, jfieldID);jlong (*GetLongField)(JNIEnv *, jobject, jfieldID);jfloat (*GetFloatField)(JNIEnv *, jobject, jfieldID);jdouble (*GetDoubleField)(JNIEnv *, jobject, jfieldID);void (*SetObjectField)(JNIEnv *, jobject, jfieldID, jobject);void (*SetBooleanField)(JNIEnv *, jobject, jfieldID, jboolean);void (*SetByteField)(JNIEnv *, jobject, jfieldID, jbyte);void (*SetCharField)(JNIEnv *, jobject, jfieldID, jchar);void (*SetShortField)(JNIEnv *, jobject, jfieldID, jshort);void (*SetIntField)(JNIEnv *, jobject, jfieldID, jint);void (*SetLongField)(JNIEnv *, jobject, jfieldID, jlong);void (*SetFloatField)(JNIEnv *, jobject, jfieldID, jfloat);void (*SetDoubleField)(JNIEnv *, jobject, jfieldID, jdouble);jmethodID (*GetStaticMethodID)(JNIEnv *, jclass,  char *,  char *);jobject (*CallStaticObjectMethod)(JNIEnv *, jclass, jmethodID, ...);jobject (*CallStaticObjectMethodV)(JNIEnv *, jclass, jmethodID, va_list);jobject (*CallStaticObjectMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jboolean (*CallStaticBooleanMethod)(JNIEnv *, jclass, jmethodID, ...);jboolean (*CallStaticBooleanMethodV)(JNIEnv *, jclass, jmethodID, va_list);jboolean (*CallStaticBooleanMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jbyte (*CallStaticByteMethod)(JNIEnv *, jclass, jmethodID, ...);jbyte (*CallStaticByteMethodV)(JNIEnv *, jclass, jmethodID, va_list);jbyte (*CallStaticByteMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jchar (*CallStaticCharMethod)(JNIEnv *, jclass, jmethodID, ...);jchar (*CallStaticCharMethodV)(JNIEnv *, jclass, jmethodID, va_list);jchar (*CallStaticCharMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jshort (*CallStaticShortMethod)(JNIEnv *, jclass, jmethodID, ...);jshort (*CallStaticShortMethodV)(JNIEnv *, jclass, jmethodID, va_list);jshort (*CallStaticShortMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jint (*CallStaticIntMethod)(JNIEnv *, jclass, jmethodID, ...);jint (*CallStaticIntMethodV)(JNIEnv *, jclass, jmethodID, va_list);jint (*CallStaticIntMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jlong (*CallStaticLongMethod)(JNIEnv *, jclass, jmethodID, ...);jlong (*CallStaticLongMethodV)(JNIEnv *, jclass, jmethodID, va_list);jlong (*CallStaticLongMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jfloat (*CallStaticFloatMethod)(JNIEnv *, jclass, jmethodID, ...);jfloat (*CallStaticFloatMethodV)(JNIEnv *, jclass, jmethodID, va_list);jfloat (*CallStaticFloatMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jdouble (*CallStaticDoubleMethod)(JNIEnv *, jclass, jmethodID, ...);jdouble (*CallStaticDoubleMethodV)(JNIEnv *, jclass, jmethodID, va_list);jdouble (*CallStaticDoubleMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);void (*CallStaticVoidMethod)(JNIEnv *, jclass, jmethodID, ...);void (*CallStaticVoidMethodV)(JNIEnv *, jclass, jmethodID, va_list);void (*CallStaticVoidMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jfieldID (*GetStaticFieldID)(JNIEnv *, jclass,  char *,  char *);jobject (*GetStaticObjectField)(JNIEnv *, jclass, jfieldID);jboolean (*GetStaticBooleanField)(JNIEnv *, jclass, jfieldID);jbyte (*GetStaticByteField)(JNIEnv *, jclass, jfieldID);jchar (*GetStaticCharField)(JNIEnv *, jclass, jfieldID);jshort (*GetStaticShortField)(JNIEnv *, jclass, jfieldID);jint (*GetStaticIntField)(JNIEnv *, jclass, jfieldID);jlong (*GetStaticLongField)(JNIEnv *, jclass, jfieldID);jfloat (*GetStaticFloatField)(JNIEnv *, jclass, jfieldID);jdouble (*GetStaticDoubleField)(JNIEnv *, jclass, jfieldID);void (*SetStaticObjectField)(JNIEnv *, jclass, jfieldID, jobject);void (*SetStaticBooleanField)(JNIEnv *, jclass, jfieldID, jboolean);void (*SetStaticByteField)(JNIEnv *, jclass, jfieldID, jbyte);void (*SetStaticCharField)(JNIEnv *, jclass, jfieldID, jchar);void (*SetStaticShortField)(JNIEnv *, jclass, jfieldID, jshort);void (*SetStaticIntField)(JNIEnv *, jclass, jfieldID, jint);void (*SetStaticLongField)(JNIEnv *, jclass, jfieldID, jlong);void (*SetStaticFloatField)(JNIEnv *, jclass, jfieldID, jfloat);void (*SetStaticDoubleField)(JNIEnv *, jclass, jfieldID, jdouble);jstring (*NewString)(JNIEnv *,  jchar *, jsize);jsize (*GetStringLength)(JNIEnv *, jstring); jchar *(*GetStringChars)(JNIEnv *, jstring, jboolean *);void (*ReleaseStringChars)(JNIEnv *, jstring,  jchar *);jstring (*NewStringUTF)(JNIEnv *,  char *);jsize (*GetStringUTFLength)(JNIEnv *, jstring); char *(*GetStringUTFChars)(JNIEnv *, jstring, jboolean *);void (*ReleaseStringUTFChars)(JNIEnv *, jstring,  char *);jsize (*GetArrayLength)(JNIEnv *, jarray);jobjectArray (*NewObjectArray)(JNIEnv *, jsize, jclass, jobject);jobject (*GetObjectArrayElement)(JNIEnv *, jobjectArray, jsize);void (*SetObjectArrayElement)(JNIEnv *, jobjectArray, jsize, jobject);jbooleanArray (*NewBooleanArray)(JNIEnv *, jsize);jbyteArray (*NewByteArray)(JNIEnv *, jsize);jcharArray (*NewCharArray)(JNIEnv *, jsize);jshortArray (*NewShortArray)(JNIEnv *, jsize);jintArray (*NewIntArray)(JNIEnv *, jsize);jlongArray (*NewLongArray)(JNIEnv *, jsize);jfloatArray (*NewFloatArray)(JNIEnv *, jsize);jdoubleArray (*NewDoubleArray)(JNIEnv *, jsize);jboolean *(*GetBooleanArrayElements)(JNIEnv *, jbooleanArray, jboolean *);jbyte *(*GetByteArrayElements)(JNIEnv *, jbyteArray, jboolean *);jchar *(*GetCharArrayElements)(JNIEnv *, jcharArray, jboolean *);jshort *(*GetShortArrayElements)(JNIEnv *, jshortArray, jboolean *);jint *(*GetIntArrayElements)(JNIEnv *, jintArray, jboolean *);jlong *(*GetLongArrayElements)(JNIEnv *, jlongArray, jboolean *);jfloat *(*GetFloatArrayElements)(JNIEnv *, jfloatArray, jboolean *);jdouble *(*GetDoubleArrayElements)(JNIEnv *, jdoubleArray, jboolean *);void (*ReleaseBooleanArrayElements)(JNIEnv *, jbooleanArray, jboolean *, jint);void (*ReleaseByteArrayElements)(JNIEnv *, jbyteArray, jbyte *, jint);void (*ReleaseCharArrayElements)(JNIEnv *, jcharArray, jchar *, jint);void (*ReleaseShortArrayElements)(JNIEnv *, jshortArray, jshort *, jint);void (*ReleaseIntArrayElements)(JNIEnv *, jintArray, jint *, jint);void (*ReleaseLongArrayElements)(JNIEnv *, jlongArray, jlong *, jint);void (*ReleaseFloatArrayElements)(JNIEnv *, jfloatArray, jfloat *, jint);void (*ReleaseDoubleArrayElements)(JNIEnv *, jdoubleArray, jdouble *, jint);void (*GetBooleanArrayRegion)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *);void (*GetByteArrayRegion)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *);void (*GetCharArrayRegion)(JNIEnv *, jcharArray, jsize, jsize, jchar *);void (*GetShortArrayRegion)(JNIEnv *, jshortArray, jsize, jsize, jshort *);void (*GetIntArrayRegion)(JNIEnv *, jintArray, jsize, jsize, jint *);void (*GetLongArrayRegion)(JNIEnv *, jlongArray, jsize, jsize, jlong *);void (*GetFloatArrayRegion)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *);void (*GetDoubleArrayRegion)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *);void (*SetBooleanArrayRegion)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *);void (*SetByteArrayRegion)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *);void (*SetCharArrayRegion)(JNIEnv *, jcharArray, jsize, jsize, jchar *);void (*SetShortArrayRegion)(JNIEnv *, jshortArray, jsize, jsize, jshort *);void (*SetIntArrayRegion)(JNIEnv *, jintArray, jsize, jsize, jint *);void (*SetLongArrayRegion)(JNIEnv *, jlongArray, jsize, jsize, jlong *);void (*SetFloatArrayRegion)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *);void (*SetDoubleArrayRegion)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *);jint (*RegisterNatives)(JNIEnv *, jclass,  JNINativeMethod *, jint);jint (*UnregisterNatives)(JNIEnv *, jclass);jint (*MonitorEnter)(JNIEnv *, jobject);jint (*MonitorExit)(JNIEnv *, jobject);jint (*GetJavaVM)(JNIEnv *, JavaVM **);void (*GetStringRegion)(JNIEnv *, jstring, jsize, jsize, jchar *);void (*GetStringUTFRegion)(JNIEnv *, jstring, jsize, jsize, char *);void *(*GetPrimitiveArrayCritical)(JNIEnv *, jarray, jboolean *);void (*ReleasePrimitiveArrayCritical)(JNIEnv *, jarray, void *, jint); jchar *(*GetStringCritical)(JNIEnv *, jstring, jboolean *);void (*ReleaseStringCritical)(JNIEnv *, jstring,  jchar *);jweak (*NewWeakGlobalRef)(JNIEnv *, jobject);void (*DeleteWeakGlobalRef)(JNIEnv *, jweak);jboolean (*ExceptionCheck)(JNIEnv *);jobject (*NewDirectByteBuffer)(JNIEnv *, void *, jlong);void *(*GetDirectBufferAddress)(JNIEnv *, jobject);jlong (*GetDirectBufferCapacity)(JNIEnv *, jobject);};
union _XEvent {int type;XAnyEvent xany;XKeyEvent xkey;XButtonEvent xbutton;XMotionEvent xmotion;XCrossingEvent xcrossing;XFocusChangeEvent xfocus;XExposeEvent xexpose;XGraphicsExposeEvent xgraphicsexpose;XNoExposeEvent xnoexpose;XVisibilityEvent xvisibility;XCreateWindowEvent xcreatewindow;XDestroyWindowEvent xdestroywindow;XUnmapEvent xunmap;XMapEvent xmap;XMapRequestEvent xmaprequest;XReparentEvent xreparent;XConfigureEvent xconfigure;XGravityEvent xgravity;XResizeRequestEvent xresizerequest;XConfigureRequestEvent xconfigurerequest;XCirculateEvent xcirculate;XCirculateRequestEvent xcirculaterequest;XPropertyEvent xproperty;XSelectionClearEvent xselectionclear;XSelectionRequestEvent xselectionrequest;XSelectionEvent xselection;XColormapEvent xcolormap;XClientMessageEvent xclient;XMappingEvent xmapping;XErrorEvent xerror;XKeymapEvent xkeymap;int pad[24];};
union _B20031452D9C70A13D819C8DDA3A0BA9 {xGenericReply generic;xGetGeometryReply geom;xQueryTreeReply tree;xInternAtomReply atom;xGetAtomNameReply atomName;xGetPropertyReply property;xListPropertiesReply listProperties;xGetSelectionOwnerReply selection;xGrabPointerReply grabPointer;xGrabKeyboardReply grabKeyboard;xQueryPointerReply pointer;xGetMotionEventsReply motionEvents;xTranslateCoordsReply coords;xGetInputFocusReply inputFocus;xQueryTextExtentsReply textExtents;xListFontsReply fonts;xGetFontPathReply fontPath;xGetImageReply image;xListInstalledColormapsReply colormaps;xAllocColorReply allocColor;xAllocNamedColorReply allocNamedColor;xAllocColorCellsReply colorCells;xAllocColorPlanesReply colorPlanes;xQueryColorsReply colors;xLookupColorReply lookupColor;xQueryBestSizeReply bestSize;xQueryExtensionReply extension;xListExtensionsReply extensions;xSetModifierMappingReply setModifierMapping;xGetModifierMappingReply getModifierMapping;xSetPointerMappingReply setPointerMapping;xGetKeyboardMappingReply getKeyboardMapping;xGetPointerMappingReply getPointerMapping;xGetPointerControlReply pointerControl;xGetScreenSaverReply screenSaver;xListHostsReply hosts;xError error;xEvent event;};
struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct rejected_reply___D36433C375B856769A86CDA2CFADE497___C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct objdata___B3007D6063AF66DF722E8A0D3E39E00C___C5CA305DAC14A48247D92F909AB77E9C {u_int po_data_len;char *po_data_val;};
struct rpc_err___20A10790E27E739F57AC739A9EB3B2A2___C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct icmp___EEC48C5976A17953B310258F40698883___E13592CBDF627F773A21D4C55E8BB1FD {struct ip idi_ip;};
struct _6DF3DE276417BF858702C9AB9AD460CB___471377A4EE616195936A53166C2E8985 {Elf32_Word gt_g_value;Elf32_Word gt_bytes;};
struct _6DF3DE276417BF858702C9AB9AD460CB___C80D1A5D569DC2D014AF103056E679B8 {Elf32_Word gt_current_g_value;Elf32_Word gt_unused;};
struct directory_obj___1F9DB6EC5B4D38C4C9C3429D1A4D637D {u_int do_servers_len;nis_server *do_servers_val;};
struct directory_obj___C1C9E10248BAA10524C7D0EEA27D2609 {u_int do_armask_len;oar_mask *do_armask_val;};
union getquota_rslt___93D720EECC4BDA120269F9F7BB40A95B {rquota gqr_rquota;};
union key_netstres___2176196DCBB8522A9A1E300DB0535BE5 {key_netstarg knet;};
union klm_testrply___40F9D261D31BF2147C1606393BAB8476 {struct klm_holder holder;};
union cryptkeyres___EF36972044157FC290EE2FE4EF835697 {des_block deskey;};
struct nis_taglist___D5235F6F3B62BCE7910AF756FE53E6D0 {u_int tags_len;nis_tag *tags_val;};
struct ib_request___284138CD61DEACF1E3B0F8ADC9D2B817 {u_int ibr_srch_len;nis_attr *ibr_srch_val;};
struct ib_request___2D577313DCD2E74CD5A0055993933E3C {u_int ibr_cbhost_len;nis_server *ibr_cbhost_val;};
struct ib_request___BC4F227684F3C8C9122828D0FF4C6B30 {u_int ibr_obj_len;nis_object *ibr_obj_val;};
struct log_result___946B3E427CBAEF2C8E64E80E43621ACD {u_int lr_entries_len;log_entry *lr_entries_val;};
struct nis_result___4B6B45C3F1C3815D68D653B8D499AE33 {u_int objects_len;nis_object *objects_val;};
struct nis_server___DA92845B88BF4FFBAAA2281E50DC5AF5 {u_int ep_len;endpoint *ep_val;};
struct ns_request___C16B7AFEC0429C3BD747A37F4D827FFD {u_int ns_object_len;nis_object *ns_object_val;};
union ypresp_all___438EB5C0F713AEE99C9EADC1C626DC0A {ypresp_key_val val;};
union desparams___F38C3328E965CE3ADB16864418918AD0 {u_char UDES_data[16];u_char *UDES_buf;};
struct dump_args___00C533AE8545A66FA38641508A3DC473 {u_int da_cbhost_len;nis_server *da_cbhost_val;};
struct entry_col___E942B815045DEE9FABC14DA0AE6314FC {u_int ec_value_len;char *ec_value_val;};
struct entry_obj___9954B692FACAC347CBA764979909DFF4 {u_int en_cols_len;entry_col *en_cols_val;};
struct fd_result___864956CB4DA79F92CA310E20E4E9B271 {u_int signature_len;char *signature_val;};
struct fd_result___E188DDB4946479B1B04909415F6D7A2E {u_int dir_data_len;char *dir_data_val;};
struct log_entry___1E639176190539C4AF5A837E820AE922 {u_int le_attrs_len;nis_attr *le_attrs_val;};
struct table_obj___37F826B7C2AFF7B3E483E0E1EE89ED51 {u_int ta_cols_len;table_col *ta_cols_val;};
struct link_obj___6E2208C80A69EAD3D69988E63D048B29 {u_int li_attrs_len;nis_attr *li_attrs_val;};
struct nis_attr___F2081D9F3F0358B3A954C101A2B200CE {u_int zattr_val_len;char *zattr_val_val;};
struct unixcred___B86B6406BF4F2F34B5DC36D552B35DA0 {u_int gids_len;u_int *gids_val;};
union rip___AFFF135AAACB9FA320A59FAF8451ECA8 {struct netinfo ru_nets[1];char ru_tracefile[1];};
union tsp___E78A65B7E52D74DB905DCAA7AEC02B40 {struct timeval tspu_time;char tspu_hopcnt;};
struct xcb_record_element_header_iterator_t {xcb_record_element_header_t *data;int rem;int index;};
typedef GLXDrawable (*PFNGLXGETCURRENTREADDRAWABLESGIPROC)(void);
struct _00580D67DBBDE0DF5EC3B468D69A2E22 {Elf64_Word l_name;Elf64_Word l_time_stamp;Elf64_Word l_checksum;Elf64_Word l_version;Elf64_Word l_flags;};
struct _031200335061428091E44434635CEF4A {char *c_class;XrmClass xrm_class;int argc;char **argv;};
struct _0D364CBB4DE5622667695AC90920144B {u_int valdat_len;char *valdat_val;};
struct _12883A0710B467FBB4742064A9BE69DF {Elf32_Word vda_name;Elf32_Word vda_next;};
struct _149F28F052847359C6CBD46BA265755A {u_int yp_buf_len;char *yp_buf_val;};
struct _16B3D492BF50C8DE24893282FFCDBBF0 {jas_iccs15fixed16_t x;jas_iccs15fixed16_t y;jas_iccs15fixed16_t z;};
struct _19DEE1C64F7EC3DDB040A3404BEC0D9F {u_int utmp_array_len;rusers_utmp *utmp_array_val;};
struct _1AFD2E0C6FFD3A342E1E54CFD5D94B7E {Window window;int state;int kind;unsigned int til_or_since;unsigned int idle;unsigned int eventMask;};
struct _2D810D1D3161CD7717A7A7CB85DAD1D6 {pixval r;pixval g;pixval b;};
struct _2FC37C12F50461D7B99376C23209E757 {Elf64_Half si_boundto;Elf64_Half si_flags;};
struct _34681C3D6FB58953006C9844DC50C14F {BYTE type;BYTE map[31];};
struct _3E5DE56775B94BA308AA7A6C3C30E39A {char shortName; char *longName;optArgType type;void *arg;int flags;};
struct _3EBE077DD2A684AF0A86C02ED2B61EB1 {ExifSLong numerator;ExifSLong denominator;};
struct _45BD469DC424D3F368EE6E10DDB8D8EE {Elf32_Word l_name;Elf32_Word l_time_stamp;Elf32_Word l_checksum;Elf32_Word l_version;Elf32_Word l_flags;};
struct _46547E058388880E40CCFC83289F8447 {XawSme3dShadowDrawProc shadowdraw;};
struct _4FB432CAED1F3912A0288EBA807D24E6 {SANE_String_Const name;SANE_String_Const vendor;SANE_String_Const model;SANE_String_Const type;};
struct _53901533A28EEBC402C56245C1C7891C {struct _ftsent *fts_cur;struct _ftsent *fts_child;struct _ftsent **fts_array;dev_t fts_dev;char *fts_path;int fts_rfd;int fts_pathlen;int fts_nitems;int (*fts_compar)( void *,  void *);int fts_options;};
struct _5EDD4B4F882E321F07D8AFF023DDDD7D {u_int keydat_len;char *keydat_val;};
struct _636E06EF14FC653C9FA755BCE21D4A3F {char *chars;int nchars;int delta;Font font;};
struct _63BD57EE9DEAF718631DB9386FA8EB5E {ExifLong numerator;ExifLong denominator;};
struct _6532AF44D7211C2B9106181412036892 {jas_iccuint16_t year;jas_iccuint16_t month;jas_iccuint16_t day;jas_iccuint16_t hour;jas_iccuint16_t min;jas_iccuint16_t sec;};
struct _7501B521F09A6EDD43C68106808E09A6 {int displayed_index;int update_action;int update_hint;int window_mode;int nbuffers;Multibuffer *buffers;};
struct _8A4D2DD0535D3740C9D9302B62B9E8F3 {Elf32_Word n_namesz;Elf32_Word n_descsz;Elf32_Word n_type;};
struct _90F4279CED75C32CE4133781567FE5DA {Window window;};
struct _931DBA82A19B61CA267B848FC88C1541 {int major_version;int minor_version;IcePaProcessMsgProc process_msg_proc;};
struct _9375A326D5D02800B5E28ACECE8480CB {int num_orientation;XOrientation *orientation;};
struct _A467143AA6DED7F9A689DDE9D5460EF6 {int length;SmPointer value;};
struct _B14224ABEA533B24DFD259D862A6483B {jas_image_coord_t tlx;jas_image_coord_t tly;jas_image_coord_t hstep;jas_image_coord_t vstep;jas_image_coord_t width;jas_image_coord_t height;int prec;int sgnd;};
struct _B44A6AA5E65CF240A74FE9F706C0E430 {struct _B44A6AA5E65CF240A74FE9F706C0E430__svc_auth_ops *svc_ah_ops;caddr_t svc_ah_private;};
struct _BA1C9873524F37DFA28FC6E8B2A0BC7B {int x;int y;int width;int height;int border_width;Window sibling;int stack_mode;};
struct _C9793B2A88A40550F3E6FCBE57C78800 {u_int sprayarr_len;char *sprayarr_val;};
struct _CA18D99C52BF47BA3661A7BE783B3F23 {Elf64_Word n_namesz;Elf64_Word n_descsz;Elf64_Word n_type;};
struct _CD2774D7904D8BC0AB34D0D3977DB8FF {Window window;unsigned int event_mask;int buffer_index;int side;};
struct _D30E1CD2E9753287075FA3466243327C {Elf32_Word hwp_flags1;Elf32_Word hwp_flags2;};
struct _D758E79311354DDC9AF0CC7E7C22CD10 {Elf64_Word vda_name;Elf64_Word vda_next;};
struct _D9BDF4B3DDC8B65752EAC3136B32DA96 {char shortName; char *longName;optArgType type;void *arg;unsigned int *specified;int flags;};
struct _DEA6EB3579BA90947BB8CFA4C4EC84A1 {int major_version;int minor_version;IcePoProcessMsgProc process_msg_proc;};
struct _F913BEC784D3D8439A039A40A101A5CC {DMXInputEnum inputType;int physicalScreen;int physicalId;int isCore;int sendsCore; char *name;int detached;};
struct _FE43560485AD2DF497423A9D2646B91A {Elf32_Half si_boundto;Elf32_Half si_flags;};
struct xcb_record_client_spec_iterator_t {xcb_record_client_spec_t *data;int rem;int index;};
struct xcb_render_pictformat_iterator_t {xcb_render_pictformat_t *data;int rem;int index;};
struct xcb_x_print_pcontext_iterator_t {xcb_x_print_pcontext_t *data;int rem;int index;};
struct xcb_glx_context_tag_iterator_t {xcb_glx_context_tag_t *data;int rem;int index;};
struct xcb_render_glyphset_iterator_t {xcb_render_glyphset_t *data;int rem;int index;};
struct xcb_xvmc_subpicture_iterator_t {xcb_xvmc_subpicture_t *data;int rem;int index;};
struct xcb_record_context_iterator_t {xcb_record_context_t *data;int rem;int index;};
struct xcb_render_picture_iterator_t {xcb_render_picture_t *data;int rem;int index;};
struct xcb_damage_damage_iterator_t {xcb_damage_damage_t *data;int rem;int index;};
struct xcb_xfixes_region_iterator_t {xcb_xfixes_region_t *data;int rem;int index;};
struct xcb_glx_drawable_iterator_t {xcb_glx_drawable_t *data;int rem;int index;};
struct xcb_glx_fbconfig_iterator_t {xcb_glx_fbconfig_t *data;int rem;int index;};
struct xcb_render_fixed_iterator_t {xcb_render_fixed_t *data;int rem;int index;};
struct xcb_render_glyph_iterator_t {xcb_render_glyph_t *data;int rem;int index;};
struct xcb_sync_counter_iterator_t {xcb_sync_counter_t *data;int rem;int index;};
struct xcb_xvmc_context_iterator_t {xcb_xvmc_context_t *data;int rem;int index;};
struct xcb_xvmc_surface_iterator_t {xcb_xvmc_surface_t *data;int rem;int index;};
struct WBXMLConvXML2WBXMLParams_s {WBXMLVersion wbxml_version;unsigned char keep_ignorable_ws;unsigned char use_strtbl;};
struct xcb_glx_context_iterator_t {xcb_glx_context_t *data;int rem;int index;};
struct xcb_glx_pbuffer_iterator_t {xcb_glx_pbuffer_t *data;int rem;int index;};
struct xcb_xv_encoding_iterator_t {xcb_xv_encoding_t *data;int rem;int index;};
struct xcb_glx_bool32_iterator_t {xcb_glx_bool32_t *data;int rem;int index;};
struct xcb_glx_pixmap_iterator_t {xcb_glx_pixmap_t *data;int rem;int index;};
struct xcb_glx_window_iterator_t {xcb_glx_window_t *data;int rem;int index;};
struct xcb_shape_kind_iterator_t {xcb_shape_kind_t *data;int rem;int index;};
struct xcb_sync_alarm_iterator_t {xcb_sync_alarm_t *data;int rem;int index;};
struct xcb_timestamp_iterator_t {xcb_timestamp_t *data;int rem;int index;};
struct xcb_colormap_iterator_t {xcb_colormap_t *data;int rem;int index;};
struct xcb_drawable_iterator_t {xcb_drawable_t *data;int rem;int index;};
struct xcb_fontable_iterator_t {xcb_fontable_t *data;int rem;int index;};
struct xcb_gcontext_iterator_t {xcb_gcontext_t *data;int rem;int index;};
struct xcb_shape_op_iterator_t {xcb_shape_op_t *data;int rem;int index;};
struct xcb_visualid_iterator_t {xcb_visualid_t *data;int rem;int index;};
struct xcb_keycode_iterator_t {xcb_keycode_t *data;int rem;int index;};
struct xcb_render_transform_t {xcb_render_fixed_t matrix11;xcb_render_fixed_t matrix12;xcb_render_fixed_t matrix13;xcb_render_fixed_t matrix21;xcb_render_fixed_t matrix22;xcb_render_fixed_t matrix23;xcb_render_fixed_t matrix31;xcb_render_fixed_t matrix32;xcb_render_fixed_t matrix33;};
struct xcb_shm_seg_iterator_t {xcb_shm_seg_t *data;int rem;int index;};
struct xcb_xv_port_iterator_t {xcb_xv_port_t *data;int rem;int index;};
struct _TMSimpleBindProcsRec {XtActionProc *procs;};
struct xcb_button_iterator_t {xcb_button_t *data;int rem;int index;};
struct xcb_cursor_iterator_t {xcb_cursor_t *data;int rem;int index;};
struct xcb_keysym_iterator_t {xcb_keysym_t *data;int rem;int index;};
struct xcb_pixmap_iterator_t {xcb_pixmap_t *data;int rem;int index;};
struct xcb_render_pointfix_t {xcb_render_fixed_t x;xcb_render_fixed_t y;};
struct xcb_render_triangle_t {xcb_render_pointfix_t p1;xcb_render_pointfix_t p2;xcb_render_pointfix_t p3;};
struct xcb_window_iterator_t {xcb_window_t *data;int rem;int index;};
struct xcb_render_linefix_t {xcb_render_pointfix_t p1;xcb_render_pointfix_t p2;};
struct xcb_render_spanfix_t {xcb_render_fixed_t l;xcb_render_fixed_t r;xcb_render_fixed_t y;};
struct xcb_atom_iterator_t {xcb_atom_t *data;int rem;int index;};
struct xcb_font_iterator_t {xcb_font_t *data;int rem;int index;};
typedef void *(*ExifMemReallocFunc)(void *p, ExifLong s);
typedef XcmsDIConversionProc XcmsConversionProc;
struct jas_icctagtabent_s {jas_iccuint32_t tag;jas_iccuint32_t off;jas_iccuint32_t len;void *data;struct jas_icctagtabent_s *first;};
struct tupleint_list_item {struct tupleint_list_item *next;struct tupleint tupleint;};
struct _XIMHotKeyTrigger {KeySym keysym;int modifier;int modifier_mask;};
typedef jas_iccsig_t jas_iccattrname_t;
struct nd_router_solicit {struct icmp6_hdr nd_rs_hdr;};
struct xcb_render_trap_t {xcb_render_spanfix_t top;xcb_render_spanfix_t bot;};
typedef void *(*ExifMemAllocFunc)(ExifLong s);
typedef jas_iccsig_t jas_icctagtype_t;
typedef XcmsConversionProc *XcmsFuncListPtr;
typedef jas_iccsig_t jas_icctagsig_t;
struct short_hand_verf {struct opaque_auth new_cred;};
typedef Elf32_Addr Elf32_Conflict;
typedef Drawable XdbeBackBuffer;
typedef Opaque XtActionHookId;
typedef XtActionProc *XtBoundActions;
struct ip_mreq_source {struct in_addr imr_multiaddr;struct in_addr imr_interface;struct in_addr imr_sourceaddr;};
struct ppp_comp_stats {struct compstat c;struct compstat d;};
typedef Colormap XMesaColormap;
typedef Drawable XMesaDrawable;
typedef XrmHashTable XrmSearchList[];
struct _FcObjectType { char *object;FcType type;};
struct _LateBindings {unsigned int knot : 1;unsigned int pair : 1;unsigned short ref_count;KeySym keysym;};
typedef void (*__action_fn_t)( void *nodep, VISIT value, int level);
struct bp_whoami_arg {bp_address client_address;};
struct rstat_timeval {u_int tv_sec;u_int tv_usec;};
struct st_signalinfo {st_rate_t rate;signed char size;signed char encoding;signed char channels;char swap;};
typedef int td_key_iter_f(thread_key_t, void (*)(void *), void *);
typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;
struct _XAnimCursor {Cursor cursor;unsigned int delay;};
typedef int __io_seek_fn(void *cookie, __off64_t *pos, int w);
typedef void (*pcap_handler)(u_char *,  struct pcap_pkthdr *,  u_char *);
struct spraytimeval {u_int sec;u_int usec;};
typedef Pixmap XMesaPixmap;
typedef Window XMesaWindow;
struct bpf_program {u_int bf_len;struct bpf_insn *bf_insns;};
typedef u_int bpf_u_int32;
struct bpf_version {u_short bv_major;u_short bv_minor;};
struct if_settings {unsigned int type;unsigned int size;union if_settings___26F75A7CF7D20622A142A8F9C6BB7EFD ifs_ifsu;};
struct nis_taglist {struct nis_taglist___D5235F6F3B62BCE7910AF756FE53E6D0 tags;};
struct rusers_utmp {char *ut_user;char *ut_line;char *ut_host;int ut_type;int ut_time;u_int ut_idle;};
struct st_loopinfo {st_size_t start;st_size_t length;unsigned int count;signed char type;};
struct xdr_discrim {int value;xdrproc_t proc;};
typedef Opaque XtCacheRef;
struct argp_child { struct argp *argp;int flags; char *header;int group;};
struct arpreq_old {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;struct sockaddr arp_netmask;};
struct cback_data {struct cback_data___8577E6F7A3DA394015609B473F63AD7B entries;};
struct in_pktinfo {int ipi_ifindex;struct in_addr ipi_spec_dst;struct in_addr ipi_addr;};
struct itimerspec {struct timespec it_interval;struct timespec it_value;};
struct ntptimeval {struct timeval time;int maxerror;int esterror;};
typedef off_t pm_filepos;
typedef FcResult XftResult;
struct _xkbEvent {union _xkbEvent___1A318C185F777B9ECB86573CC964DEF2 u;};
struct entry_obj {char *en_type;struct entry_obj___9954B692FACAC347CBA764979909DFF4 en_cols;};
struct itimerval {struct timeval it_interval;struct timeval it_value;};
struct pamtuples {struct pam *pamP;tuple ***tuplesP;};
struct pcap_stat {u_int ps_recv;u_int ps_drop;u_int ps_ifdrop;};
struct in6_addr {union in6_addr___485AE7EBE2507040E6A806129EC743D2 in6_u;};
struct ip_mreqn {struct in_addr imr_multiaddr;struct in_addr imr_address;int imr_ifindex;};
struct nis_attr {char *zattr_ndx;struct nis_attr___F2081D9F3F0358B3A954C101A2B200CE zattr_val;};
struct ppp_idle {time_t xmit_idle;time_t recv_idle;};
struct tostruct {u_long selfpc;int count;u_long link;};
typedef FcType XftType;
struct ltchars {u_int six;char chars[6];u_int mode;};
struct pcap_if {struct pcap_if *next;char *name;char *description;struct pcap_addr *addresses;bpf_u_int32 flags;};
struct siginfo {int si_signo;int si_errno;int si_code;union siginfo___0A533C95F56D7198FDCBF4ED772C5A43 _sifields;};
struct netobj {u_int n_len;char *n_bytes;};
struct rawarc {u_long raw_frompc;u_long raw_selfpc;int raw_count;};
struct rusage {struct timeval ru_utime;struct timeval ru_stime;int ru_maxrss;int ru_ixrss;int ru_idrss;int ru_isrss;int ru_minflt;int ru_majflt;int ru_nswap;int ru_inblock;int ru_oublock;int ru_msgsnd;int ru_msgrcv;int ru_nsignals;int ru_nvcsw;int ru_nivcsw;};
struct sgttyb {u_int four;char chars[4];u_int flags;};
struct tchars {u_int six;char chars[6];};
struct stats {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;int if_opackets;};
struct timex {unsigned int modes;int offset;int freq;int maxerror;int esterror;int status;int constant;int precision;int tolerance;struct timeval time;int tick;int ppsfreq;int jitter;int shift;int stabil;int jitcnt;int calcnt;int errcnt;int stbcnt;int : 32;int : 32;int : 32;int : 32;int : 32;int : 32;int : 32;int : 32;int : 32;int : 32;int : 32;int : 32;};
struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F60DFC41729ECCA7C121C44CBFE60E95 {CARD32 pad00;CARD32 window;union _xEvent______F60DFC41729ECCA7C121C44CBFE60E95___82F47A5C57D4899F304609D6061CA549 u;};
union _1AA7F1335C4C6CFF07A82EACE5F12A97___334616D58205B64CBDE7625544988388 {IcePaProcessMsgProc accept_client;IcePoProcessMsgProc orig_client;};
struct _2B2D277CB94E3786AC978CB982FDCC47___0DD87E7D5067AFA6367924F4350962B4 {SmsSaveYourselfPhase2RequestProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___376D00C7E1B7A5ED22C80CA26753DCCE {SmsGetPropertiesProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___400BA39E42047056CF99A3263FA31D4C {SmsRegisterClientProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___57292DFCF470BDC3494EA7118CBCC8BD {SmsDeletePropertiesProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___73418DF873F0AEAE72664EE28475962B {SmsInteractRequestProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___85517BA59E6BA55FB4735AB48AC251E7 {SmsSaveYourselfRequestProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___9C9DDB14D1D289A980AAF2B4D6C80B7E {SmsCloseConnectionProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___EC5C984D1ABB44D79E844BA1925B0F8F {SmsSetPropertiesProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___F3FCB5F8AADE779F0358406CD1E720C8 {SmsInteractDoneProc callback;SmPointer manager_data;};
struct _2B2D277CB94E3786AC978CB982FDCC47___F5F34547B09E0E11024B1056985C8E5F {SmsSaveYourselfDoneProc callback;SmPointer manager_data;};
union _6954A090FF674864C2EF0B367DFBE910___4C8070B9675DF490D49D1F7749E052FB {struct ____4C8070B9675DF490D49D1F7749E052FB___CB6A6FBD4AABDC204CA09785462A5EAC u;struct ____4C8070B9675DF490D49D1F7749E052FB___554023DFD94A0D1F1DC623A35C397FCE event;};
struct _C4DC01CDDDF5A53B120EAA56060806A9___864F4118F25B9F87A90D9A329FD28BAF {SmcSaveCompleteProc callback;SmPointer client_data;};
struct _C4DC01CDDDF5A53B120EAA56060806A9___E2AA81D64E46956BF76D69C9998515AC {SmcDieProc callback;SmPointer client_data;};
struct _C4DC01CDDDF5A53B120EAA56060806A9___EAF5EEBD71EE8006EF9C111F1CEF53E0 {SmcSaveYourselfProc callback;SmPointer client_data;};
struct _C4DC01CDDDF5A53B120EAA56060806A9___EBB8E7C0FA976B86CC5F6009BBD5451F {SmcShutdownCancelledProc callback;SmPointer client_data;};
struct _F7A7EA8B301FD75068D384417C243F9B___D3E652E3315149915DD54C83778308C0 {struct __gconv_info __cd;struct __gconv_step_data __data;};
union accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023 {struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___C081DE2363A7D6E022ACDA68492DBB3F AR_versions;struct accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023___BFD7413E14FC21CAB05150D69A0647C0 AR_results;};
union rejected_reply___D36433C375B856769A86CDA2CFADE497 {struct rejected_reply___D36433C375B856769A86CDA2CFADE497___C081DE2363A7D6E022ACDA68492DBB3F RJ_versions;enum auth_stat RJ_why;};
union ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314 {struct ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314__ip6_hdrctl ip6_un1;uint8_t ip6_un2_vfc;};
struct _0BD9B7EE8D8D1BFD7DE9A4EB5AE97DA4 {int type;Display *display;XdbeBackBuffer buffer;unsigned int serial;unsigned char error_code;unsigned char request_code;unsigned char minor_code;};
union _6DF3DE276417BF858702C9AB9AD460CB {struct _6DF3DE276417BF858702C9AB9AD460CB___C80D1A5D569DC2D014AF103056E679B8 gt_header;struct _6DF3DE276417BF858702C9AB9AD460CB___471377A4EE616195936A53166C2E8985 gt_entry;};
struct _8FAAC4C6A9B09454B312C1AFE3312BB1 {XPointer client_data;XICProc callback;};
struct _C2A18E44A509FAD040F54243FD2340D8 {XETrapHeader hdr;union _C2A18E44A509FAD040F54243FD2340D8___778EFE577D72BDC72296C1BA4B0B2E9A u;};
struct _CDF3BC70CBFC5069783BD7650BD44CEE {union _CDF3BC70CBFC5069783BD7650BD44CEE___199E9548C3C848AC2EFDDFCE03257421 spec;unsigned int pixel;XcmsColorFormat format;};
struct _E1655291D14CE59495117F42FECB583D {XPointer client_data;XIMProc callback;};
union _F7A7EA8B301FD75068D384417C243F9B {struct __gconv_info __cd;struct _F7A7EA8B301FD75068D384417C243F9B___D3E652E3315149915DD54C83778308C0 __combined;};
struct xcb_sync_waitcondition_t {xcb_sync_trigger_t trigger;xcb_sync_int64_t event_threshold;};
struct xcb_render_trapezoid_t {xcb_render_fixed_t top;xcb_render_fixed_t bottom;xcb_render_linefix_t left;xcb_render_linefix_t right;};
struct nd_neighbor_solicit {struct icmp6_hdr nd_ns_hdr;struct in6_addr nd_ns_target;};
struct demangle_component {enum demangle_component_type type;union demangle_component___BD38721DC8730D9720604E58D5DD62AB u;};
struct full_sockaddr_ax25 {struct sockaddr_ax25 fsa_ax25;ax25_address fsa_digipeater[8];};
struct nd_neighbor_advert {struct icmp6_hdr nd_na_hdr;struct in6_addr nd_na_target;};
struct group_source_req {uint32_t gsr_interface;struct sockaddr_storage gsr_group;struct sockaddr_storage gsr_source;};
struct nd_router_advert {struct icmp6_hdr nd_ra_hdr;uint32_t nd_ra_reachable;uint32_t nd_ra_retransmit;};
struct _TMTypeMatchRec {TMLongCard eventType;TMLongCard eventCode;TMLongCard eventCodeMask;MatchProc matchEvent;};
struct jas_cmpxform_s {int refcnt;jas_cmpxformops_t *ops;int numinchans;int numoutchans;union jas_cmpxform_s___A0F1B4D3F69509C57B0549094C544A5C data;};
struct rejected_reply {enum reject_stat rj_stat;union rejected_reply___D36433C375B856769A86CDA2CFADE497 ru;};
struct _XtActionsRec {String string;XtActionProc proc;};
struct getquota_rslt {gqr_status status;union getquota_rslt___93D720EECC4BDA120269F9F7BB40A95B getquota_rslt_u;};
struct _LangProcRec {XtLanguageProc proc;XtPointer closure;};
struct _ToggleClass {XtActionProc Set;XtActionProc Unset;XtPointer extension;};
struct key_netstres {keystatus status;union key_netstres___2176196DCBB8522A9A1E300DB0535BE5 key_netstres_u;};
struct klm_testrply {klm_stats stat;union klm_testrply___40F9D261D31BF2147C1606393BAB8476 klm_testrply_u;};
struct nlm_shareres {netobj cookie;nlm_stats stat;int sequence;};
struct cryptkeyres {keystatus status;union cryptkeyres___EF36972044157FC290EE2FE4EF835697 cryptkeyres_u;};
struct nd_redirect {struct icmp6_hdr nd_rd_hdr;struct in6_addr nd_rd_target;struct in6_addr nd_rd_dst;};
struct pcap_pkthdr {struct timeval ts;bpf_u_int32 caplen;bpf_u_int32 len;};
struct _FontEntry {FontNameRec name;int type;union _FontEntry___FontEntryParts u;};
struct ip6_rthdr0 {uint8_t ip6r0_nxt;uint8_t ip6r0_len;uint8_t ip6r0_type;uint8_t ip6r0_segleft;uint8_t ip6r0_reserved;uint8_t ip6r0_slmap[3];struct in6_addr ip6r0_addr[];};
struct ns_request {nis_name ns_name;struct ns_request___C16B7AFEC0429C3BD747A37F4D827FFD ns_object;};
struct spraycumul {u_int counter;spraytimeval clock;};
struct statsswtch {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;u_int v_swtch;u_int avenrun[3];rstat_timeval boottime;int if_opackets;};
struct ypresp_all {bool_t more;union ypresp_all___438EB5C0F713AEE99C9EADC1C626DC0A ypresp_all_u;};
struct call_body {u_long cb_rpcvers;u_long cb_prog;u_long cb_vers;u_long cb_proc;struct opaque_auth cb_cred;struct opaque_auth cb_verf;};
struct entry_col {uint32_t ec_flags;struct entry_col___E942B815045DEE9FABC14DA0AE6314FC ec_value;};
struct statstime {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;u_int v_swtch;int avenrun[3];rstat_timeval boottime;rstat_timeval curtime;int if_opackets;};
struct table_obj {char *ta_type;int ta_maxcol;u_char ta_sep;struct table_obj___37F826B7C2AFF7B3E483E0E1EE89ED51 ta_cols;char *ta_path;};
struct ypreq_xfr {ypmap_parms map_parms;u_int transid;u_int prog;u_int port;};
struct _FcValue {FcType type;union _FcValue___4C90D9DC80941421F4625716AB95C5A2 u;};
struct _XtTMRec {XtTranslations translations;XtBoundActions proc_table;struct _XtStateRec *current_state;unsigned int lastEventTime;};
struct iw_event {__u16 len;__u16 cmd;union iwreq_data u;};
struct klm_lock {char *server_name;netobj fh;int pid;u_int l_offset;u_int l_len;};
struct nlm_lock {char *caller_name;netobj fh;netobj oh;int svid;u_int l_offset;u_int l_len;};
struct semid_ds {struct ipc_perm sem_perm;__time_t sem_otime;unsigned int __unused1;__time_t sem_ctime;unsigned int __unused2;unsigned int sem_nsems;unsigned int __unused3;unsigned int __unused4;};
struct unixcred {u_int uid;u_int gid;struct unixcred___B86B6406BF4F2F34B5DC36D552B35DA0 gids;};
struct fddihdr {__u8 fc;__u8 daddr[6];__u8 saddr[6];union fddihdr___938C6FB260523AB5682B137AC0052733 hdr;};
struct ip6_hdr {union ip6_hdr___BD1196ABBEDCD1C568FFAAAAE6BA5314 ip6_ctlun;struct in6_addr ip6_src;struct in6_addr ip6_dst;};
struct mld_hdr {struct icmp6_hdr mld_icmp6_hdr;struct in6_addr mld_addr;};
struct nlm_res {netobj cookie;nlm_stat stat;};
struct iwreq {union iwreq___4AF2B49FDDB54BAFABDFAE063E6E4A98 ifr_ifrn;union iwreq_data u;};
struct term {TERMTYPE type;short Filedes;struct termios Ottyb;struct termios Nttyb;int _baudrate;char *_termname;};
struct rip {u_char rip_cmd;u_char rip_vers;u_char rip_res1[2];union rip___AFFF135AAACB9FA320A59FAF8451ECA8 ripun;};
union _9E6A7A2F5B8444BF3F540E884EB664C9___1C1E9EA25555F3A04518B10EE9DF4602 {struct ____1C1E9EA25555F3A04518B10EE9DF4602___CB6A6FBD4AABDC204CA09785462A5EAC u;struct ____1C1E9EA25555F3A04518B10EE9DF4602___5BEEE552B0DC6B217341171DE42CA55F videoNotify;struct ____1C1E9EA25555F3A04518B10EE9DF4602___FA18AEC49CDA3F922B926DB83731E944 portNotify;};
union rpc_err___20A10790E27E739F57AC739A9EB3B2A2 {int RE_errno;enum auth_stat RE_why;struct rpc_err___20A10790E27E739F57AC739A9EB3B2A2___C081DE2363A7D6E022ACDA68492DBB3F RE_vers;struct rpc_err___20A10790E27E739F57AC739A9EB3B2A2___BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 RE_lb;};
union ifreq___E3B69D1AD22BDEC81E225954E969544B {struct sockaddr ifru_addr;struct sockaddr ifru_dstaddr;struct sockaddr ifru_broadaddr;struct sockaddr ifru_netmask;struct sockaddr ifru_hwaddr;short ifru_flags;int ifru_ivalue;int ifru_mtu;struct ifmap ifru_map;char ifru_slave[16];char ifru_newname[16];void *ifru_data;struct if_settings ifru_settings;};
struct _1AA7F1335C4C6CFF07A82EACE5F12A97 {int in_use;int my_opcode;_IceProtocol *protocol;IcePointer client_data;int accept_flag;union _1AA7F1335C4C6CFF07A82EACE5F12A97___334616D58205B64CBDE7625544988388 process_msg_proc;};
struct _C091F8996EF5667AFF510FF5B2E0143E {char *vendor;char *release;int version_count;IcePoVersionRec *version_recs;int auth_count;char **auth_names;IcePoAuthProc *auth_procs;IceIOErrorProc io_error_proc;};
struct FT_Incremental_FuncsRec_ {FT_Incremental_GetGlyphDataFunc get_glyph_data;FT_Incremental_FreeGlyphDataFunc free_glyph_data;FT_Incremental_GetGlyphMetricsFunc get_glyph_metrics;};
struct _TMComplexBindProcsRec {Widget widget;XtTranslations aXlations;XtActionProc *procs;};
struct _CompositeClassPart {XtGeometryHandler geometry_manager;XtWidgetProc change_managed;XtWidgetProc insert_child;XtWidgetProc delete_child;XtPointer extension;};
struct bfd_link_hash_entry {struct bfd_hash_entry root;enum bfd_link_hash_type type;union bfd_link_hash_entry___7518C311B30939442257602FB0F48E63 u;};
struct nd_opt_prefix_info {uint8_t nd_opt_pi_type;uint8_t nd_opt_pi_len;uint8_t nd_opt_pi_prefix_len;uint8_t nd_opt_pi_flags_reserved;uint32_t nd_opt_pi_valid_time;uint32_t nd_opt_pi_preferred_time;uint32_t nd_opt_pi_reserved2;struct in6_addr nd_opt_pi_prefix;};
struct jas_iccattrval_s {int refcnt;jas_iccsig_t type;jas_iccattrvalops_t *ops;union jas_iccattrval_s___4E7A20EABC1986AAA015782F8F2C1C32 data;};
struct pcap_file_header {bpf_u_int32 magic;u_short version_major;u_short version_minor;bpf_int32 thiszone;bpf_u_int32 sigfigs;bpf_u_int32 snaplen;bpf_u_int32 linktype;};
struct _XcmsColorSpace { char *prefix;XcmsColorFormat id;XcmsParseStringProc parseString;XcmsFuncListPtr to_CIEXYZ;XcmsFuncListPtr from_CIEXYZ;int inverse_flag;};
struct _ActionHookRec {struct _ActionHookRec *next;XtAppContext app;XtActionHookProc proc;XtPointer closure;};
struct accepted_reply {struct opaque_auth ar_verf;enum accept_stat ar_stat;union accepted_reply___A74D47F576A9520EEBD40CEAFF1DA023 ru;};
struct cryptkeyarg2 {netnamestr remotename;netobj remotekey;des_block deskey;};
struct nlm_cancargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm_lock alock;};
struct nlm_lockargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm_lock alock;bool_t reclaim;int state;};
struct nlm_testargs {netobj cookie;bool_t exclusive;struct nlm_lock alock;};
struct rr_pco_match {uint8_t rpm_code;uint8_t rpm_len;uint8_t rpm_ordinal;uint8_t rpm_matchlen;uint8_t rpm_minlen;uint8_t rpm_maxlen;uint16_t rpm_reserved;struct in6_addr rpm_prefix;};
struct log_result {nis_error lr_status;netobj lr_cookie;struct log_result___946B3E427CBAEF2C8E64E80E43621ACD lr_entries;};
struct nlm_holder {bool_t exclusive;int svid;netobj oh;u_int l_offset;u_int l_len;};
struct rr_pco_use {uint8_t rpu_uselen;uint8_t rpu_keeplen;uint8_t rpu_ramask;uint8_t rpu_raflags;uint32_t rpu_vltime;uint32_t rpu_pltime;uint32_t rpu_flags;struct in6_addr rpu_prefix;};
struct dump_args {nis_name da_dir;uint32_t da_time;struct dump_args___00C533AE8545A66FA38641508A3DC473 da_cbhost;};
struct in6_rtmsg {struct in6_addr rtmsg_dst;struct in6_addr rtmsg_src;struct in6_addr rtmsg_gateway;u_int32_t rtmsg_type;u_int16_t rtmsg_dst_len;u_int16_t rtmsg_src_len;u_int32_t rtmsg_metric;unsigned int rtmsg_info;u_int32_t rtmsg_flags;int rtmsg_ifindex;};
struct nlm_share {char *caller_name;netobj fh;netobj oh;fsh_mode mode;fsh_access access;};
struct link_obj {zotypes li_rtype;struct link_obj___6E2208C80A69EAD3D69988E63D048B29 li_attrs;nis_name li_name;};
struct tsp {u_char tsp_type;u_char tsp_vers;u_short tsp_seq;union tsp___E78A65B7E52D74DB905DCAA7AEC02B40 tsp_u;char tsp_name[64];};
struct xcb_render_set_picture_transform_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_transform_t transform;};
struct xcb_xinerama_get_screen_size_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_window_t window;xcb_screen_t screen;};
struct _C4DC01CDDDF5A53B120EAA56060806A9 {struct _C4DC01CDDDF5A53B120EAA56060806A9___EAF5EEBD71EE8006EF9C111F1CEF53E0 save_yourself;struct _C4DC01CDDDF5A53B120EAA56060806A9___E2AA81D64E46956BF76D69C9998515AC die;struct _C4DC01CDDDF5A53B120EAA56060806A9___864F4118F25B9F87A90D9A329FD28BAF save_complete;struct _C4DC01CDDDF5A53B120EAA56060806A9___EBB8E7C0FA976B86CC5F6009BBD5451F shutdown_cancelled;};
struct _XkbConfigFields {unsigned short cfg_id;unsigned short num_fields;XkbConfigFieldPtr fields;XkbConfigParseFunc parser;XkbConfigFinishFunc finish;XPointer priv;struct _XkbConfigFields *next;};
struct sockaddr_in6 {sa_family_t sin6_family;in_port_t sin6_port;uint32_t sin6_flowinfo;struct in6_addr sin6_addr;uint32_t sin6_scope_id;};
struct rex_ttymode {sgttyb basic;tchars more;ltchars yetmore;u_int andmore;};
struct nis_result {nis_error status;struct nis_result___4B6B45C3F1C3815D68D653B8D499AE33 objects;netobj cookie;uint32_t zticks;uint32_t dticks;uint32_t aticks;uint32_t cticks;};
struct nis_server {nis_name name;struct nis_server___DA92845B88BF4FFBAAA2281E50DC5AF5 ep;uint32_t key_type;netobj pkey;};
struct desparams {u_char des_key[8];enum desdir des_dir;enum desmode des_mode;u_char des_ivec[8];unsigned int des_len;union desparams___F38C3328E965CE3ADB16864418918AD0 UDES;};
struct fd_result {nis_error status;nis_name source;struct fd_result___E188DDB4946479B1B04909415F6D7A2E dir_data;struct fd_result___864956CB4DA79F92CA310E20E4E9B271 signature;};
struct rr_result {uint16_t rrr_flags;uint8_t rrr_ordinal;uint8_t rrr_matchedlen;uint32_t rrr_ifid;struct in6_addr rrr_prefix;};
struct st_effect {char *name;struct st_signalinfo ininfo;struct st_signalinfo outinfo;st_effect_t *h;st_sample_t *obuf;st_size_t odone;st_size_t olen;double priv1;char priv[1000];};
struct xcb_render_create_linear_gradient_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_pointfix_t p1;xcb_render_pointfix_t p2;uint32_t num_stops;};
union icmp___EEC48C5976A17953B310258F40698883 {struct icmp___EEC48C5976A17953B310258F40698883___18EAF2C5161535AE6831887B3FEB9817 id_ts;struct icmp___EEC48C5976A17953B310258F40698883___E13592CBDF627F773A21D4C55E8BB1FD id_ip;struct icmp_ra_addr id_radv;u_int32_t id_mask;u_int8_t id_data[1];};
struct xcb_glx_create_new_context_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_glx_context_t context;uint32_t fbconfig;xcb_screen_t screen;uint32_t render_type;uint32_t share_list;uint8_t is_direct;uint8_t reserved1;uint16_t reserved2;};
struct xcb_xinerama_get_screen_size_reply_t {uint8_t response_type;uint8_t pad0;uint16_t sequence;uint32_t length;uint32_t width;uint32_t height;xcb_window_t window;xcb_screen_t screen;};
struct _985C3B0B1950C24006043DC21969E304 {XtPointer next_extension;XrmQuark record_type;int version;Cardinal record_size;XtAllocateProc allocate;XtDeallocateProc deallocate;};
struct directory_obj {nis_name do_name;nstype do_type;struct directory_obj___1F9DB6EC5B4D38C4C9C3429D1A4D637D do_servers;uint32_t do_ttl;struct directory_obj___C1C9E10248BAA10524C7D0EEA27D2609 do_armask;};
struct xcb_render_create_conical_gradient_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_pointfix_t center;xcb_render_fixed_t angle;uint32_t num_stops;};
struct xcb_render_create_radial_gradient_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_render_picture_t picture;xcb_render_pointfix_t inner;xcb_render_pointfix_t outer;xcb_render_fixed_t inner_radius;xcb_render_fixed_t outer_radius;uint32_t num_stops;};
union objdata___B3007D6063AF66DF722E8A0D3E39E00C {struct directory_obj di_data;struct group_obj gr_data;struct table_obj ta_data;struct entry_obj en_data;struct link_obj li_data;struct objdata___B3007D6063AF66DF722E8A0D3E39E00C___C5CA305DAC14A48247D92F909AB77E9C po_data;};
struct xcb_glx_create_pbuffer_request_t {uint8_t major_opcode;uint8_t minor_opcode;uint16_t length;xcb_screen_t screen;xcb_glx_fbconfig_t fbconfig;xcb_glx_pbuffer_t pbuffer;uint32_t num_attribs;uint32_t value_mask;};
struct ib_request {nis_name ibr_name;struct ib_request___284138CD61DEACF1E3B0F8ADC9D2B817 ibr_srch;uint32_t ibr_flags;struct ib_request___BC4F227684F3C8C9122828D0FF4C6B30 ibr_obj;struct ib_request___2D577313DCD2E74CD5A0055993933E3C ibr_cbhost;u_int ibr_bufsize;netobj ibr_cookie;};
struct _2B2D277CB94E3786AC978CB982FDCC47 {struct _2B2D277CB94E3786AC978CB982FDCC47___400BA39E42047056CF99A3263FA31D4C register_client;struct _2B2D277CB94E3786AC978CB982FDCC47___73418DF873F0AEAE72664EE28475962B interact_request;struct _2B2D277CB94E3786AC978CB982FDCC47___F3FCB5F8AADE779F0358406CD1E720C8 interact_done;struct _2B2D277CB94E3786AC978CB982FDCC47___85517BA59E6BA55FB4735AB48AC251E7 save_yourself_request;struct _2B2D277CB94E3786AC978CB982FDCC47___0DD87E7D5067AFA6367924F4350962B4 save_yourself_phase2_request;struct _2B2D277CB94E3786AC978CB982FDCC47___F5F34547B09E0E11024B1056985C8E5F save_yourself_done;struct _2B2D277CB94E3786AC978CB982FDCC47___9C9DDB14D1D289A980AAF2B4D6C80B7E close_connection;struct _2B2D277CB94E3786AC978CB982FDCC47___EC5C984D1ABB44D79E844BA1925B0F8F set_properties;struct _2B2D277CB94E3786AC978CB982FDCC47___57292DFCF470BDC3494EA7118CBCC8BD delete_properties;struct _2B2D277CB94E3786AC978CB982FDCC47___376D00C7E1B7A5ED22C80CA26753DCCE get_properties;};
union _xEvent___9BB2AF36AA186CD40502B345642DDFAB {struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___CB6A6FBD4AABDC204CA09785462A5EAC u;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___06CC3EE1C785FF4C65A358F81D4770E3 keyButtonPointer;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___B652DCB1C62512FA77E4252B8A422175 enterLeave;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___D4E6015299E8C3BAFA52E0C7400AB6A6 focus;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___99F5A2754EC45011AB028BB1CC2CE3C7 expose;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___316B218C709051C178B3BB07E6B18196 graphicsExposure;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___E3E63ACF9DBDF6C56161A285CC120760 noExposure;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___0F73BC087B0175F837E61BF86166AB84 visibility;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F0EDD24BB588AB1974F0CC5CC47343A0 createNotify;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___3F936A3A9A06092B5B70BD26A7DFD789 destroyNotify;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___674F3E4AE65A41A1BBF2ACE37596CB1B unmapNotify;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___3284E488B37AEC742A022E833068D497 mapNotify;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___210E680417EC90CA260E4854A6751754 mapRequest;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___C927E5D571B5CC43049437141E992D5C reparent;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F0E773388BCCF7D4D022A846E01785CC configureNotify;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___CF45A70F1381AC3E41639336F8DCFD08 configureRequest;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___9C75AB6DDEADA42926A4005EFC1B4241 gravity;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___5A60174FC6A07BE0049C674473C6C1C3 resizeRequest;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___EDE3B33B7AF26E05A2A60AEE6589519E circulate;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___40ECE1105C1C479EC11371480E0EAEEE property;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___B56843D1A807D13D0FEC0C0069626892 selectionClear;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___0782806FB5FEE125636C30F93EC424E5 selectionRequest;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___9E59406F0409BDE74EEED2CE1F683A76 selectionNotify;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___4C0CCDC0D2C41013B07E05B3A7C75551 colormap;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___4D6B1C2E2FE6C1124CAB2311E897D1AB mappingNotify;struct _xEvent___9BB2AF36AA186CD40502B345642DDFAB___F60DFC41729ECCA7C121C44CBFE60E95 clientMessage;};
union nlm_testrply___25E723FE95144319ADEDD57F4FF59DDE {struct nlm_holder holder;};
union getcredres___C5134A0BDA290BA80D31944F899AB902 {unixcred cred;};
struct _6954A090FF674864C2EF0B367DFBE910 {union _6954A090FF674864C2EF0B367DFBE910___4C8070B9675DF490D49D1F7749E052FB u;};
struct _9E6A7A2F5B8444BF3F540E884EB664C9 {union _9E6A7A2F5B8444BF3F540E884EB664C9___1C1E9EA25555F3A04518B10EE9DF4602 u;};
struct klm_unlockargs {struct klm_lock alock;};
struct in6_pktinfo {struct in6_addr ipi6_addr;unsigned int ipi6_ifindex;};
struct compressor {int compress_proto;void *(*comp_alloc)(unsigned char *options, int opt_len);void (*comp_free)(void *state);int (*comp_init)(void *state, unsigned char *options, int opt_len, int unit, int opthdr, int debug);void (*comp_reset)(void *state);int (*compress)(void *state, unsigned char *rptr, unsigned char *obuf, int isize, int osize);void (*comp_stat)(void *state, struct compstat *stats);void *(*decomp_alloc)(unsigned char *options, int opt_len);void (*decomp_free)(void *state);int (*decomp_init)(void *state, unsigned char *options, int opt_len, int unit, int opthdr, int mru, int debug);void (*decomp_reset)(void *state);int (*decompress)(void *state, unsigned char *ibuf, int isize, unsigned char *obuf, int osize);void (*incomp)(void *state, unsigned char *ibuf, int icnt);void (*decomp_stat)(void *state, struct compstat *stats);struct module *owner;unsigned int comp_extra;};
struct ipv6_mreq {struct in6_addr ipv6mr_multiaddr;unsigned int ipv6mr_interface;};
struct _xEvent {union _xEvent___9BB2AF36AA186CD40502B345642DDFAB u;};
union reply_body___3176F759A4E4A0B30BE44C0FA3C218CC {struct accepted_reply RP_ar;struct rejected_reply RP_dr;};
struct nlm_unlockargs {netobj cookie;struct nlm_lock alock;};
struct klm_lockargs {bool_t block;bool_t exclusive;struct klm_lock alock;};
struct klm_testargs {bool_t exclusive;struct klm_lock alock;};
struct nlm_testrply {nlm_stats stat;union nlm_testrply___25E723FE95144319ADEDD57F4FF59DDE nlm_testrply_u;};
struct ip6_mtuinfo {struct sockaddr_in6 ip6m_addr;uint32_t ip6m_mtu;};
struct nlm_testres {netobj cookie;nlm_testrply stat;};
struct getcredres {keystatus status;union getcredres___C5134A0BDA290BA80D31944F899AB902 getcredres_u;};
struct reply_body {enum reply_stat rp_stat;union reply_body___3176F759A4E4A0B30BE44C0FA3C218CC ru;};
struct objdata {zotypes zo_type;union objdata___B3007D6063AF66DF722E8A0D3E39E00C objdata_u;};
struct rpc_err {enum clnt_stat re_status;union rpc_err___20A10790E27E739F57AC739A9EB3B2A2 ru;};
struct ifreq {union ifreq___4AF2B49FDDB54BAFABDFAE063E6E4A98 ifr_ifrn;union ifreq___E3B69D1AD22BDEC81E225954E969544B ifr_ifru;};
struct nlm_shareargs {netobj cookie;nlm_share share;bool_t reclaim;};
struct nis_object {nis_oid zo_oid;nis_name zo_name;nis_name zo_owner;nis_name zo_group;nis_name zo_domain;uint32_t zo_access;uint32_t zo_ttl;objdata zo_data;};
struct icmp {u_int8_t icmp_type;u_int8_t icmp_code;u_int16_t icmp_cksum;union icmp___893B68B5BC55935E15A63F398B6517AD icmp_hun;union icmp___EEC48C5976A17953B310258F40698883 icmp_dun;};
struct log_entry {uint32_t le_time;log_entry_t le_type;nis_name le_princp;nis_name le_name;struct log_entry___1E639176190539C4AF5A837E820AE922 le_attrs;nis_object le_object;};
union rpc_msg___7D774571B4FAB0E4BBD540829030FA52 {struct call_body RM_cmb;struct reply_body RM_rmb;};
struct rpc_createerr {enum clnt_stat cf_stat;struct rpc_err cf_error;};
struct rpc_msg {u_long rm_xid;enum msg_type rm_direction;union rpc_msg___7D774571B4FAB0E4BBD540829030FA52 ru;};



/// #endif ===true


