
#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\xnu_4903_x86.til.h"
/// #define HAVETYPE_Block_byref ===DEFINED

/// #define GHIDRA ===DEFINED

/// #ifndef INCLUDE_GUARD_xnu_4903_x86_til ===true

/// #define INCLUDE_GUARD_xnu_4903_x86_til ===DEFINED


#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\5_gengdt\.\..\..\..\IDAPlugins\idatil2c\common.h"


/// #define __int64  long long ===DEFINED
/// #define __int32  int ===DEFINED
/// #define __int16  short ===DEFINED
/// #define __int8  char ===DEFINED

/// #ifdef GHIDRA ===true

typedef struct {
    long long u1;
    long long u2;
} __int128;
typedef struct {
    unsigned long long u1;
    unsigned long long u2;
} __uint128;
/// #endif ===true


typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

/// #define _BYTE  uint8_t ===DEFINED
/// #define _WORD  uint16_t ===DEFINED
/// #define _QWORD  uint64_t ===DEFINED
/// #define _DWORD  uint32_t ===DEFINED



/// #ifndef HAVETYPE_bool ===true

/// #define bool  char ===DEFINED
/// #endif ===true


/// #ifndef HAVETYPE___u32 ===true

typedef uint32_t __u32;
/// #endif ===true

/// #ifndef HAVETYPE___u16 ===true

typedef uint16_t __u16;
/// #endif ===true

/// #ifndef HAVETYPE___u64 ===true

typedef uint64_t __u64;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_uid32_t ===true

typedef unsigned int __kernel_uid32_t;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_mqd_t ===true

typedef int __kernel_mqd_t;
/// #endif ===true



/// #define __fastcall ===DEFINED

/// #define __unaligned ===DEFINED

/// #define __stdcall ===DEFINED

/// #define __cppobj ===DEFINED

/// #define __declspec([x])   ===DEFINED
/// #define __hidden ===DEFINED

/// #define __cdecl ===DEFINED

/// #define __noreturn ===DEFINED


/// #define const ===DEFINED

/// #define this  _this ===DEFINED

typedef char _Mbstatet;

typedef void **va_list;





























 
#line 5: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\xnu_4903_x86.til.h"




union IOEthernetController__IOEthernetAVBIngressFilterElement___113E187999B5ED6651BE6E50E62C7960;
struct IOSCSIMultimediaCommandsDevice__IOSCSIMultimediaCommandsDeviceExpansionData;
struct BluetoothHCIEventReturnLinkKeysResults___D23A5AC893EF1B7E3F8BC90A104FF4A8;
struct IOSCSIPeripheralDeviceType05__IOSCSIPeripheralDeviceType05ExpansionData;
struct IOSCSIPrimaryCommandsDevice__IOSCSIPrimaryCommandsDeviceExpansionData;
struct IOHIDEventService__ExpansionData___55147C02C79D288B0DD9D19715B7B0A0;
struct IOHIDEventService__ExpansionData___5878CC0A81F7F241068F5530DC3A8E22;
struct IOHIDEventService__ExpansionData___ADF6E6FC50F1B00482339F12ECE9D118;
struct IOHIDEventService__ExpansionData___CA12AB0B7A60234CA66CAE85BD1D97D4;
struct IOHIDEventDriver__ExpansionData___0077C6F470F5DB5047486A4CC0CDEDE3;
struct IOHIDEventDriver__ExpansionData___0694E93C84545D8044F2995499636A6A;
struct IOHIDEventDriver__ExpansionData___1A4443270529141425FCA41A12FCC45F;
struct IOHIDEventDriver__ExpansionData___2EF3FA813E4388E2CFC46412C7E8E87B;
struct IOHIDEventDriver__ExpansionData___44C3ADFD398DAFD19B38D044B9B811CF;
struct IOHIDEventDriver__ExpansionData___58C67D5D7A6AEFD04FD596DA970D5162;
struct IOHIDEventDriver__ExpansionData___89C8BF0AC86979B14408913F907190AD;
struct IOHIDEventDriver__ExpansionData___B876227EC7A6E16B5B342210589B5E56;
struct IOHIDEventDriver__ExpansionData___C339D0D406B24A17F9B2B6287492FA39;
struct IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF;
struct StandardUSB__SuperSpeedPlusIsochronousEndpointCompanionDescriptor;
struct IOBlockStorageDriver__Context___9B9D5848614392AE3CDF006EAA69933A;
struct IOBlockStorageDriver__Context___BE415BD52B46893C87A5368B03BB692E;
union IOFireWireBus__DCLTaskInfoAux___00A0C683E8526E49FD7CE39739B2FE09;
struct __Request__host_register_well_known_mach_voucher_attr_manager_t;
struct IOSCSIProtocolInterface__IOSCSIProtocolInterfaceExpansionData;
struct __Reply__host_register_well_known_mach_voucher_attr_manager_t;
struct BluetoothHCIEnhancedAcceptSynchronousConnectionRequestParams;
union IOGeneralMemoryDescriptor___ECA04EF03DB1B5A22FBE2CCFAFA5CDF1;
struct IOSCSIProtocolServices__IOSCSIProtocolServicesExpansionData;
union __RequestUnion__receive_sysdiagnose_notification_subsystem;
struct __Request__mach_voucher_attr_control_create_mach_voucher_t;
struct BluetoothHCIEventLEReadRemoteUsedFeaturesCompleteResults;
union HIDButtonCapabilities___CF48DBD306996A2DDCB8A3B00B8AFEB9;
struct StandardUSB__SuperSpeedPlusUSBDeviceCapabilityDescriptor;
union __ReplyUnion__receive_sysdiagnose_notification_subsystem;
struct __Reply__mach_voucher_attr_control_create_mach_voucher_t;
union embedded_panic_header___2447379B7BF66221A3409CFDF4901523;
struct BluetoothHCIEventChangeConnectionLinkKeyCompleteResults;
union GTraceEntry__ArgsTag___725FD65D9BA5618575D30FB319A50E80;
union HIDValueCapabilities___CF48DBD306996A2DDCB8A3B00B8AFEB9;
struct IOEthernetController__IOEthernetAVBIngressFilterElement;
struct IOFireWireSerialBusProtocolTransport__SBP2ClientOrbData;
struct __Request__task_register_dyld_shared_cache_image_info_t;
union IOBlitSurfaceStruct___9F5F1817842B588D090C379943A470FF;
union IOTimingInformation___8835273DE2D8B8F8CED797132B704498;
union x86_exception_state___251411A5B45F799EBE3F14281E77BAD6;
struct BluetoothHCIEventSynchronousConnectionCompleteResults;
struct _NXTabletPointData___108B66EFEC9DC1D8651631AAAC2F520E;
struct __Reply__task_register_dyld_shared_cache_image_info_t;
struct BluetoothHCIAcceptSynchronousConnectionRequestParams;
struct BluetoothHCIEnhancedSetupSynchronousConnectionParams;
struct BluetoothHCIEventEncryptionKeyRefreshCompleteResults;
struct BluetoothHCIEventPageScanRepetitionModeChangeResults;
struct BluetoothHCIEventSynchronousConnectionChangedResults;
union GTraceEntry__Args___6D5E54D36E8AB60CED29166678469FE7;
struct IOEthernetController__IOEthernetControllerAVBSupport;
struct IOFWSimpleContiguousPhysicalAddressSpace_vtbl_layout;
struct IOFireWireSBP2ManagementORB__FWSBP2TaskManagementORB;
struct IOPCIAddressSpace___4F9D87D53F2F4789F1FC5701D66DF10F;
struct IOPCIAddressSpace___DB76E73CB46C23E6629E3D56B49010FE;
struct SCSICmd_INQUIRY_Page83_RelativeTargetPort_Identifier;
struct SCSICmd_INQUIRY_PageB2_Provisioning_Group_Descriptor;
struct StandardUSB__BillboardAltModeCapabilityCompatibility;
struct StandardUSB__SuperSpeedUSBDeviceCapabilityDescriptor;
struct __Request__host_register_mach_voucher_attr_manager_t;
struct __Request__mach_port_special_reply_port_reset_link_t;
struct BluetoothHCIEventReadRemoteSupportedFeaturesResults;
struct IOFireWireSerialBusProtocolTransport__ExpansionData;
union __RequestUnion__mach_voucher_attr_control_subsystem;
union dk_cd_read_toc_t___82E429FAE4C5BE047DD3225D7BE1DDF6;
union x86_avx512_state___66330E93180B8BDA73FDCEC8E5D967A8;
union x86_thread_state___D2D4D49B333AEF99596DF2F7E46595A4;
struct BluetoothHCIEventLEConnectionUpdateCompleteResults;
struct BluetoothHCIEventReadRemoteExtendedFeaturesResults;
struct IOUSBHostIOSource__tInternalDataTransferParameters;
struct SCSICmd_INQUIRY_Page83_LogicalUnitGroup_Identifier;
struct StandardUSB__SuperSpeedEndpointCompanionDescriptor;
struct __Reply__host_register_mach_voucher_attr_manager_t;
struct __Reply__mach_port_special_reply_port_reset_link_t;
struct __Request__mach_voucher_extract_all_attr_recipes_t;
struct _img4_interface___C240D8D11EA38401E37E80E4BCCF2546;
union ndrv_demux_desc___5E87C9BB192401A2CD612B3326A5C171;
union x86_debug_state___DE64C214EB37D0506E9F0452E3D9193B;
union x86_float_state___598376F8C40D36F3E63ABC99E645E7DC;
struct BluetoothL2CAPRetransmissionAndFlowControlOptions;
union HFSPlusBSDInfo___27AA93549C704A2FC0D1AB4BC35019DD;
union IOAudioControl___E4B6BB4F469ED8915E6AC36367D55D05;
union IOGTraceBuffer___9142E5316606A83F3B8F1466E3BF6E51;
struct SCSICmd_INQUIRY_Page83_TargetPortGroup_Identifier;
struct StandardUSB__BillboardAltModeCapabilityDescriptor;
union __ReplyUnion__mach_voucher_attr_control_subsystem;
struct __Request__mach_voucher_attr_control_get_values_t;
struct __Request__task_register_dyld_get_process_state_t;
union ccdigest_state___67175509AEF0CB0D0935ED80FD36639C;
struct BluetoothRemoteHostSupportedFeaturesNotification;
struct CDAudioStatus___3EF02E475673C285A8B037641EB32711;
union HIDButtonCaps___CF48DBD306996A2DDCB8A3B00B8AFEB9;
struct IOACPIAddress___D23480D2C05655CBB8386002CEAD6464;
struct IOFireWireSerialBusProtocolTransport_vtbl_layout;
union IOFramebuffer___CD9F169B95746E9B5ACA47AEEE44529F;
struct IOUSBHostPipe__tInternalControlRequestParameters;
struct SCSICmd_INQUIRY_Page83_Identification_Descriptor;
struct __Reply__mach_voucher_extract_all_attr_recipes_t;
union __RequestUnion__coalition_notification_subsystem;
union __RequestUnion__send_ktrace_background_subsystem;
union __RequestUnion__telemetry_notification_subsystem;
struct __Request__mach_exception_raise_state_identity_t;
struct __Request__memory_object_synchronize_completed_t;
union x86_avx_state___64432BC7CE1ECF60B467DA9EA06DC89E;
struct FndrFileInfo___41A11852923CA7CF3D1788B49D991E5B;
union HIDValueCaps___CF48DBD306996A2DDCB8A3B00B8AFEB9;
struct IOFireWireAVCAsynchronousCommand__ExpansionData;
struct IOFireWireMultiIsochReceiveListener_vtbl_layout;
struct StandardUSB__USB20ExtensionCapabilityDescriptor;
struct __Reply__mach_voucher_attr_control_get_values_t;
struct __Reply__task_register_dyld_get_process_state_t;
union __RequestUnion__memory_object_control_subsystem;
union __RequestUnion__memory_object_default_subsystem;
struct __Request__mach_memory_entry_purgable_control_t;
struct __Request__mach_memory_object_memory_entry_64_t;
union ccdigest_ctx___67175509AEF0CB0D0935ED80FD36639C;
struct BluetoothHCIEventAuthenticationCompleteResults;
struct BluetoothHCIReadExtendedInquiryResponseResults;
struct FndrDirInfo___0DCF4602959F8104318EED879205AAFA;
struct FndrDirInfo___6E74BEE3D2405F7C88221D37EC2C16A3;
union GTraceEntry___5FD22310585F2208134956ED9571B74A;
struct IOFireWireSBP2ManagementORB__FWSBP2StatusBlock;
struct NXEventData___1D72C273FCBCED44C35AFF60C0C1ABE4;
struct NXEventData___5862481EA8702BDE8B161E10452DA66B;
struct NXEventData___7B052CBECF2D89E41D9044FA68C50E97;
struct NXEventData___7E4F3FF8E98504DDC830440CAFA598B6;
struct NXEventData___7F18F8EED5D1248513E921492DDC6968;
struct NXEventData___AD0A8843087A97189913F2342161BC7B;
struct NXEventData___BF84A4FF1E8709A6CF398BBCF8859B4C;
struct NXEventData___E2ADF4E02465F36023F43A09CEA76884;
union __ReplyUnion__coalition_notification_subsystem;
union __ReplyUnion__send_ktrace_background_subsystem;
union __ReplyUnion__telemetry_notification_subsystem;
struct __Reply__mach_exception_raise_state_identity_t;
struct __Reply__memory_object_synchronize_completed_t;
union __RequestUnion__kextd_kernel_request_subsystem;
struct __Request__mach_memory_entry_access_tracking_t;
struct __Request__mach_voucher_extract_attr_content_t;
struct __Request__task_register_dyld_set_dyld_state_t;
union bpf_dltlist___B2A9ECBE22ED54CE1AF0CE51601F0A64;
struct BluetoothHCICurrentInquiryAccessCodesForWrite;
struct BluetoothHCIEventDisconnectionCompleteResults;
struct BluetoothHCIEventMasterLinkKeyCompleteResults;
struct BluetoothHCIEventReadRemoteVersionInfoResults;
struct BluetoothHCIEventReadSupportedFeaturesResults;
struct BluetoothHCIEventSimplePairingCompleteResults;
struct IOFWSimpleContiguousPhysicalAddressSpace_vtbl;
struct IOFireWireMultiIsochReceivePacket_vtbl_layout;
union __ReplyUnion__memory_object_control_subsystem;
union __ReplyUnion__memory_object_default_subsystem;
struct __Reply__mach_memory_entry_purgable_control_t;
struct __Reply__mach_memory_object_memory_entry_64_t;
struct __Request__host_virtual_physical_table_info_t;
struct __Request__mach_voucher_extract_attr_recipe_t;
struct __Request__task_unregister_dyld_image_infos_t;
union sadb_x_sa2___0B8F6C7C603ED8E5ADDF6AC271DF4C5E;
union sadb_x_sa2___BE0BF66556B3A07F217BF5ED388C8220;
struct sysctl_oid___BF306FC4453E1DFFB4E5D662FA87221D;
struct BluetoothHCIEventConnectionPacketTypeResults;
struct BluetoothHCIEventLEConnectionCompleteResults;
struct BluetoothHCIEventLELongTermKeyRequestResults;
struct BluetoothHCIEventReadExtendedFeaturesResults;
struct BluetoothHCISetupSynchronousConnectionParams;
struct IOFireWireAVCAsynchronousCommand_vtbl_layout;
struct StandardUSB__ContainerIDCapabilityDescriptor;
union __ReplyUnion__kextd_kernel_request_subsystem;
struct __Reply__mach_memory_entry_access_tracking_t;
struct __Reply__mach_voucher_extract_attr_content_t;
struct __Reply__task_register_dyld_set_dyld_state_t;
struct __Request__host_security_create_task_token_t;
struct __Request__host_set_multiuser_config_flags_t;
struct __Request__mach_memory_object_memory_entry_t;
struct __Request__mach_zone_info_for_largest_zone_t;
struct __Request__memory_object_change_attributes_t;
struct __Request__memory_object_super_upl_request_t;
union icmp6_hdr___D19D92B5F4F43A148CE7ABC3DA9CAAC9;
union in6_ifreq___ADBCDBFC1B38B66A5357934350D29B8E;
union sha1_ctxt___6586F9C709DE089D785AD2F99CD3AEEB;
union sha1_ctxt___A8BA7BDC1C910B178726D427455301E3;
union sha1_ctxt___FF46DB5CE0261698EDEAFF2E82501994;
union vfsioattr___A9423A550A2B08FFBBB5EADB024DFCFD;
struct BluetoothHCIEventLinkKeyNotificationResults;
struct IOFilterInterruptEventSource__ExpansionData;
struct StandardUSB__InterfaceAssociationDescriptor;
struct _NXEvent___8EFB465B4AD2107DC4501CE01DBC8D82;
struct __Reply__host_virtual_physical_table_info_t;
struct __Reply__mach_voucher_extract_attr_recipe_t;
struct __Reply__task_unregister_dyld_image_infos_t;
struct __Request__exception_raise_state_identity_t;
struct __Request__mach_gss_accept_sec_context_v2_t;
struct __Request__mach_port_request_notification_t;
struct __Request__task_register_dyld_image_infos_t;
union in6_addr___330434928707C706902F20BE7BA89EB4;
union nextvend___11E47F7002FDDFD33BA8C3E14C051ED1;
union nlist_64___4D543BF749BB09F4875D250FEC3C43C7;
struct xinpcb64___43BC994B9C4B2CE41AB688FB99430A6C;
struct xinpcb64___71E89AB7AAFF24B549168137682ADA36;
union xinpcb64___8484DCF5CF4707A7FE251BC9B24F4E7E;
union xinpcb64___C7595A3B4BE5971B51D33E1DD0735D09;
struct BluetoothEnhancedSynchronousConnectionInfo;
struct BluetoothHCIEventConnectionCompleteResults;
struct BluetoothHCIEventDataBufferOverflowResults;
struct BluetoothHCIEventPageScanModeChangeResults;
struct IOFWCompareAndSwapCommand__MemberVariables;
struct IOFWPhysicalAddressSpaceAux__ExpansionData;
struct IOFWPseudoAddressSpaceAux__MemberVariables;
struct IOFWSimplePhysicalAddressSpace_vtbl_layout;
struct IOFireWireController__pendingQ_vtbl_layout;
struct IOFireWireController__timeoutQ_vtbl_layout;
struct IOFireWireSBP2ManagementORB__ExpansionData;
struct IOSCSIMultimediaCommandsDevice_vtbl_layout;
struct IOSharedInterruptController__ExpansionData;
struct IOUSBInterfaceUserClientISOAsyncParamBlock;
struct IOUSBSuperSpeedEndpointCompanionDescriptor;
struct StandardUSB__BillboardCapabilityDescriptor;
struct __Reply__host_security_create_task_token_t;
struct __Reply__host_set_multiuser_config_flags_t;
struct __Reply__mach_memory_object_memory_entry_t;
struct __Reply__mach_zone_info_for_largest_zone_t;
struct __Reply__memory_object_change_attributes_t;
struct __Reply__memory_object_super_upl_request_t;
struct __Request__task_set_phys_footprint_limit_t;
union ip6_hdr___4B39ABADBFFE16DEF7AD006048FD8DAF;
struct receive_sysdiagnose_notification_subsystem;
struct BluetoothHCIEventConnectionRequestResults;
struct BluetoothHCIEventRemoteNameRequestResults;
struct IODVDServices__IODVDServicesExpansionData;
struct IOEthernetController__IOECTSCallbackEntry;
struct IOEthernetController__IOEthernetAVBPacket;
struct IOFireWireSerialBusProtocolTransport_vtbl;
struct IOInterleavedMemoryDescriptor_vtbl_layout;
struct OSKext___B04BEE30912BD7DFABC6ADC0D9AC5577;
struct StandardUSB__PlatformCapabilityDescriptor;
struct __Reply__exception_raise_state_identity_t;
struct __Reply__mach_gss_accept_sec_context_v2_t;
struct __Reply__mach_port_request_notification_t;
struct __Reply__task_register_dyld_image_infos_t;
struct __Request__host_security_set_task_token_t;
struct __Request__host_set_atm_diagnostic_flag_t;
struct __Request__mach_gss_init_sec_context_v2_t;
struct __Request__mach_gss_init_sec_context_v3_t;
struct __Request__memory_object_get_attributes_t;
struct __Request__processor_set_policy_control_t;
struct __Request__processor_set_policy_disable_t;
struct BluetoothHCIEventEncryptionChangeResults;
struct BluetoothHCIEventQoSSetupCompleteResults;
struct IOAudioTimeIntervalFilter__ExpansionData;
struct IOAudioTimeIntervalFilterFIR_vtbl_layout;
struct IOAudioTimeIntervalFilterIIR_vtbl_layout;
struct IOFWSimpleContiguousPhysicalAddressSpace;
struct IOFilterInterruptEventSource_vtbl_layout;
struct IOFireWireMultiIsochReceiveListener_vtbl;
struct IOSCSIPeripheralDeviceType05_vtbl_layout;
struct __Reply__task_set_phys_footprint_limit_t;
union __RequestUnion__audit_triggers_subsystem;
union __RequestUnion__catch_mach_exc_subsystem;
struct __Request__host_default_memory_manager_t;
struct __Request__ktrace_background_available_t;
struct __Request__mach_gss_accept_sec_context_t;
struct __Request__mach_zone_get_btlog_records_t;
struct __Request__memory_object_recover_named_t;
struct __Request__processor_set_policy_enable_t;
struct __Request__thread_swap_exception_ports_t;
union ifkpi___AB6F1404A19A5F7B793DBFB90D0477FB;
union ifreq___E0FC42874A550D533741D474A8188B08;
struct inpcb___0DE50EA4AC06AB542A6702F62E772B7B;
union inpcb___7D460B6C0767DE165AC6133441A5769E;
union inpcb___8484DCF5CF4707A7FE251BC9B24F4E7E;
union inpcb___C7595A3B4BE5971B51D33E1DD0735D09;
struct inpcb___D2EE53D6AFCE5D79378C56B75ED05C14;
struct inpcb___EBDA4B014B050CA99710A3A7596CC9CC;
struct lockf___33687FB5F797F8E3093244FBEFE29298;
union nlist___B0769016BEBE8869A66D0C48DBB1BF7C;
struct ucred___4023DC22796BF9904C7BAB93B96A6B26;
struct BluetoothHCIEventReadClockOffsetResults;
struct BluetoothHCIQualityOfServiceSetupParams;
struct FWMultiIsochReceiveListenerParamsStruct;
struct IOAudioControlUserClient__ExpansionData;
struct IOBDServices__IOBDServicesExpansionData;
struct IOBufferMemoryDescriptor__ExpansionData;
struct IOFWAsyncStreamCommand__MemberVariables;
struct IOFWPhysicalAddressSpaceAux_vtbl_layout;
struct IOFireWireAVCTargetSpace__ExpansionData;
struct IOFireWireDuplicateGUIDList_vtbl_layout;
struct IOFireWireSBP2Login__FWSBP2ReconnectORB;
struct IOFireWireSBP2ManagementORB_vtbl_layout;
struct IOSCSIPrimaryCommandsDevice_vtbl_layout;
struct IOSharedInterruptController_vtbl_layout;
struct IOUSBDeviceCapabilityBillboardAltConfig;
struct IOVideoDeviceUserClientInit_vtbl_layout;
struct StandardUSB__BillboardAltModeCapability;
struct StandardUSB__DeviceCapabilityDescriptor;
struct __Reply__host_security_set_task_token_t;
struct __Reply__host_set_atm_diagnostic_flag_t;
struct __Reply__mach_gss_init_sec_context_v2_t;
struct __Reply__mach_gss_init_sec_context_v3_t;
struct __Reply__memory_object_get_attributes_t;
struct __Reply__processor_set_policy_control_t;
struct __Reply__processor_set_policy_disable_t;
union __RequestUnion__host_security_subsystem;
union __RequestUnion__processor_set_subsystem;
struct __Request__mach_exception_raise_state_t;
struct __Request__mach_notify_port_destroyed_t;
struct __Request__mach_port_space_basic_info_t;
struct __Request__memory_object_cluster_size_t;
struct __Request__memory_object_lock_request_t;
struct __Request__memory_object_release_name_t;
struct __Request__processor_set_max_priority_t;
struct __Request__thread_get_exception_ports_t;
struct __Request__thread_set_exception_ports_t;
union icmp___B235664BFCA97AAED3CE94418077D709;
union icmp___C4DAEE47A1B4C5B2D295BC56AED6DB45;
struct wait___7577FAE843D32618A04985FDB883FD87;
struct wait___D2BE3D1E9784782BB73F97C8AEDA900E;
struct BluetoothHCIEventFlowSpecificationData;
struct BluetoothHCIEventMaxSlotsChangeResults;
struct BluetoothHCIEventReturnLinkKeysResults;
struct BluetoothHCIEventSniffSubratingResults;
struct BluetoothHCIEventVendorSpecificResults;
struct IOAudioEngineUserClient__ExpansionData;
struct IODVDBlockStorageDevice__ExpansionData;
struct IODVDBlockStorageDriver__ExpansionData;
struct IOFireWireControllerAux__ExpansionData;
struct IOFireWireIRMAllocation__ExpansionData;
struct IOFireWireMultiIsochReceivePacket_vtbl;
struct StandardUSB__DeviceQualifierDescriptor;
union __ReplyUnion__audit_triggers_subsystem;
union __ReplyUnion__catch_mach_exc_subsystem;
struct __Reply__host_default_memory_manager_t;
struct __Reply__ktrace_background_available_t;
struct __Reply__mach_gss_accept_sec_context_t;
struct __Reply__mach_zone_get_btlog_records_t;
struct __Reply__memory_object_recover_named_t;
struct __Reply__processor_set_policy_enable_t;
struct __Reply__thread_swap_exception_ports_t;
union __RequestUnion__mach_voucher_subsystem;
union __RequestUnion__memory_entry_subsystem;
struct __Request__host_request_notification_t;
struct __Request__host_swap_exception_ports_t;
struct __Request__mach_gss_init_sec_context_t;
struct __Request__mach_make_memory_entry_64_t;
struct __Request__mach_vm_machine_attribute_t;
struct __Request__mach_voucher_attr_command_t;
struct __Request__memory_object_upl_request_t;
struct __Request__processor_set_stack_usage_t;
struct __Request__task_get_dyld_image_infos_t;
struct __Request__task_get_emulation_vector_t;
struct __Request__task_set_emulation_vector_t;
struct __Request__task_swap_exception_ports_t;
union llc___DC63CC98741D9338AD6B09337B3BE31E;
struct BluetoothAFHHostChannelClassification;
struct BluetoothHCIAutomaticFlushTimeoutInfo;
struct BluetoothHCICurrentInquiryAccessCodes;
struct BluetoothHCIEventFlushOccurredResults;
struct BluetoothHCIEventHardwareErrorResults;
struct BluetoothL2CAPQualityOfServiceOptions;
struct IOApplePartitionScheme__ExpansionData;
struct IOAudioSelectorControl__ExpansionData;
struct IOAudioTimeIntervalFilter_vtbl_layout;
struct IOBDBlockStorageDevice__ExpansionData;
struct IOBDBlockStorageDriver__ExpansionData;
struct IOCDBlockStorageDevice__ExpansionData;
struct IOCDBlockStorageDriver__ExpansionData;
struct IODisplayParameterHandler_vtbl_layout;
struct IOFDiskPartitionScheme__ExpansionData;
struct IOFWCompareAndSwapCommand_vtbl_layout;
struct IOFWPseudoAddressSpace__ExpansionData;
struct IOFWPseudoAddressSpaceAux_vtbl_layout;
struct IOFireWireAVCAsynchronousCommand_vtbl;
struct IOFireWireLocalNodeAux__ExpansionData;
struct IOFireWirePowerManager__ExpansionData;
struct IOGeneralMemoryDescriptor_vtbl_layout;
struct IOInterruptEventSource__ExpansionData;
struct IOLocalConfigDirectory__ExpansionData;
struct IOMbufNaturalMemoryCursor_vtbl_layout;
struct IOPlatformExpertDevice__ExpansionData;
struct IOUSBDeviceCapabilityBillboardAltMode;
struct IOUSBDeviceCapabilityDescriptorHeader;
struct IOUSBHostDevice__tDescriptorSelectors;
struct IOUSBHostPipe__StandardUSBDescriptors;
union __ReplyUnion__host_security_subsystem;
union __ReplyUnion__processor_set_subsystem;
struct __Reply__mach_exception_raise_state_t;
struct __Reply__mach_notify_port_destroyed_t;
struct __Reply__mach_port_space_basic_info_t;
struct __Reply__memory_object_cluster_size_t;
struct __Reply__memory_object_lock_request_t;
struct __Reply__memory_object_release_name_t;
struct __Reply__processor_set_max_priority_t;
struct __Reply__thread_get_exception_ports_t;
struct __Reply__thread_set_exception_ports_t;
union __RequestUnion__clock_reply_subsystem;
union __RequestUnion__task_access_subsystem;
struct __Request__host_create_mach_voucher_t;
struct __Request__host_get_exception_ports_t;
struct __Request__host_set_exception_ports_t;
struct __Request__mach_notify_port_deleted_t;
struct __Request__mach_port_dnrequest_info_t;
struct __Request__mach_port_extract_member_t;
struct __Request__mach_port_get_attributes_t;
struct __Request__mach_port_get_set_status_t;
struct __Request__mach_port_set_attributes_t;
struct __Request__mach_vm_page_range_query_t;
struct __Request__mach_vm_purgable_control_t;
struct __Request__mach_zone_get_zlog_zones_t;
struct __Request__processor_get_assignment_t;
struct __Request__processor_set_statistics_t;
struct __Request__sysdiagnose_notification_t;
struct __Request__task_get_exception_ports_t;
struct __Request__task_set_exception_ports_t;
struct __Request__thread_swap_mach_voucher_t;
struct BluetoothHCIEventQoSViolationResults;
struct IOAudioControlUserClient_vtbl_layout;
struct IOBufferMemoryDescriptor_vtbl_layout;
struct IOFWAsyncPHYCommand__MemberVariables;
struct IOFWPhysicalAddressSpace_vtbl_layout;
struct IOFireWireAVCTargetSpace_vtbl_layout;
struct IOFireWireSBP2Login__FWSBP2LogoutORB;
struct IOFireWireSBP2UserClient_vtbl_layout;
struct IOFireWireSerialBusProtocolTransport;
struct IOGUIDPartitionScheme__ExpansionData;
struct IOInterruptController__ExpansionData;
struct IOMbufLittleMemoryCursor_vtbl_layout;
struct IOPMSystemCapabilityChangeParameters;
struct SCSICmd_INQUIRY_Page00_Header_SPC_16;
struct SCSICmd_INQUIRY_Page80_Header_SPC_16;
struct SCSICmd_INQUIRY_Page83_Header_SPC_16;
struct StandardUSB__ConfigurationDescriptor;
struct StandardUSB__DeviceRequestSetSELData;
struct StandardUSB__SuperSpeedHubDescriptor;
struct _AVCGetTargetPlugConnectionOutParams;
union __ReplyUnion__mach_voucher_subsystem;
union __ReplyUnion__memory_entry_subsystem;
struct __Reply__host_request_notification_t;
struct __Reply__host_swap_exception_ports_t;
struct __Reply__mach_gss_init_sec_context_t;
struct __Reply__mach_make_memory_entry_64_t;
struct __Reply__mach_vm_machine_attribute_t;
struct __Reply__mach_voucher_attr_command_t;
struct __Reply__memory_object_upl_request_t;
struct __Reply__processor_set_stack_usage_t;
struct __Reply__task_get_dyld_image_infos_t;
struct __Reply__task_get_emulation_vector_t;
struct __Reply__task_set_emulation_vector_t;
struct __Reply__task_swap_exception_ports_t;
union __RequestUnion__clock_priv_subsystem;
union __RequestUnion__lockd_mach_subsystem;
union __RequestUnion__thread_act_subsystem;
struct __Request___mach_make_memory_entry_t;
struct __Request__host_processor_set_priv_t;
struct __Request__mach_port_allocate_full_t;
struct __Request__mach_port_allocate_name_t;
struct __Request__mach_port_extract_right_t;
struct __Request__mach_port_insert_member_t;
struct __Request__mach_port_kernel_object_t;
struct __Request__mach_voucher_debug_info_t;
struct __Request__mach_zone_info_for_zone_t;
struct __Request__task_map_corpse_info_64_t;
struct __Request__thread_get_mach_voucher_t;
struct __Request__thread_get_special_port_t;
struct __Request__thread_set_mach_voucher_t;
struct __Request__thread_set_special_port_t;
struct BluetoothHCIExtendedInquiryResponse;
struct BluetoothHCIReadLocalOOBDataResults;
struct IOACPIPlatformDevice__ExpansionData;
struct IOACPIPlatformExpert__ExpansionData;
struct IOAudioEngineUserClient_vtbl_layout;
struct IOAudioToggleControl__ExpansionData;
struct IOBlockStorageDevice__ExpansionData;
struct IOBlockStorageDriver__ExpansionData;
struct IOBlockStorageProvisionDeviceExtent;
struct IOBluetoothHIDDriver__ExpansionData;
struct IODVDBlockStorageDevice_vtbl_layout;
struct IODVDBlockStorageDriver_vtbl_layout;
struct IOEthernetController__ExpansionData;
struct IOFWSimplePhysicalAddressSpace_vtbl;
struct IOFireWireAVCCommand__ExpansionData;
struct IOFireWireAVCSubUnit__ExpansionData;
struct IOFireWireController__ExpansionData;
struct IOFireWireController__pendingQ_vtbl;
struct IOFireWireController__timeoutQ_vtbl;
struct IOFireWireControllerAux_vtbl_layout;
struct IOFireWireIRMAllocation_vtbl_layout;
struct IOFireWireMultiIsochReceiveListener;
struct IOFireWireSBP2Login__FWSBP2LoginORB;
struct IOFireWireSBP2Target__ExpansionData;
struct IOModemSerialStreamSync_vtbl_layout;
struct IOMultiMemoryDescriptor_vtbl_layout;
struct IORS232SerialStreamSync_vtbl_layout;
struct IOSCSIMultimediaCommandsDevice_vtbl;
struct IOSCSIProtocolInterface_vtbl_layout;
struct IOUSBInterfaceAssociationDescriptor;
struct IOVideoDeviceUserClient_vtbl_layout;
struct _AVCGetTargetPlugConnectionInParams;
union __ReplyUnion__clock_reply_subsystem;
union __ReplyUnion__task_access_subsystem;
struct __Reply__host_create_mach_voucher_t;
struct __Reply__host_get_exception_ports_t;
struct __Reply__host_set_exception_ports_t;
struct __Reply__mach_notify_port_deleted_t;
struct __Reply__mach_port_dnrequest_info_t;
struct __Reply__mach_port_extract_member_t;
struct __Reply__mach_port_get_attributes_t;
struct __Reply__mach_port_get_set_status_t;
struct __Reply__mach_port_set_attributes_t;
struct __Reply__mach_vm_page_range_query_t;
struct __Reply__mach_vm_purgable_control_t;
struct __Reply__mach_zone_get_zlog_zones_t;
struct __Reply__processor_get_assignment_t;
struct __Reply__processor_set_statistics_t;
struct __Reply__sysdiagnose_notification_t;
struct __Reply__task_get_exception_ports_t;
struct __Reply__task_set_exception_ports_t;
struct __Reply__thread_swap_mach_voucher_t;
union __RequestUnion__catch_exc_subsystem;
union __RequestUnion__do_notify_subsystem;
union __RequestUnion__gssd_mach_subsystem;
union __RequestUnion__host_priv_subsystem;
union __RequestUnion__mach_host_subsystem;
union __RequestUnion__mach_port_subsystem;
union __RequestUnion__processor_subsystem;
struct __Request__coalition_notification_t;
struct __Request__host_get_clock_control_t;
struct __Request__host_get_clock_service_t;
struct __Request__mach_make_memory_entry_t;
struct __Request__mach_notify_no_senders_t;
struct __Request__mach_port_allocate_qos_t;
struct __Request__mach_port_insert_right_t;
struct __Request__mach_vm_read_overwrite_t;
struct __Request__mach_vm_region_info_64_t;
struct __Request__mach_vm_region_recurse_t;
struct __Request__memory_object_range_op_t;
struct __Request__task_swap_mach_voucher_t;
struct __Request__telemetry_notification_t;
struct ip_timestamp__ipt_timestamp__ipt_ta;
struct ATATimerEventSource__ExpansionData;
struct ApplePlatformExpert__ExpansionData;
struct BluetoothHCIEventModeChangeResults;
struct BluetoothHCIEventRoleChangeResults;
struct BluetoothHCIInquiryWithRSSIResults;
struct BluetoothHCILinkPolicySettingsInfo;
struct BluetoothHCILinkSupervisionTimeout;
struct BluetoothHCITransmitPowerLevelInfo;
struct BluetoothSynchronousConnectionInfo;
struct IOApplePartitionScheme_vtbl_layout;
struct IOAudioLevelControl__ExpansionData;
struct IOAudioSelectorControl_vtbl_layout;
struct IOBDBlockStorageDevice_vtbl_layout;
struct IOBDBlockStorageDriver_vtbl_layout;
struct IOCDBlockStorageDevice_vtbl_layout;
struct IOCDBlockStorageDriver_vtbl_layout;
struct IOCDPartitionScheme__ExpansionData;
struct IODVDMediaBSDClient__ExpansionData;
struct IOEthernetInterface__ExpansionData;
struct IOFDiskPartitionScheme_vtbl_layout;
struct IOFWAddressSpaceAux__ExpansionData;
struct IOFWAsyncStreamCommand_vtbl_layout;
struct IOFWPseudoAddressSpace_vtbl_layout;
struct IOFWUserObjectExporter_vtbl_layout;
struct IOFireWireDeviceAux__ExpansionData;
struct IOFireWireLocalNodeAux_vtbl_layout;
struct IOFireWirePowerManager_vtbl_layout;
struct IOFireWireSBP2Login__ExpansionData;
struct IOInterleavedMemoryDescriptor_vtbl;
struct IOInterruptEventSource_vtbl_layout;
struct IOKitDiagnosticsClient_vtbl_layout;
struct IOLocalConfigDirectory_vtbl_layout;
struct IONetworkController__ExpansionData;
struct IOPlatformExpertDevice_vtbl_layout;
struct IOSCSIProtocolServices_vtbl_layout;
struct IOTimeSyncEthernetInterfaceAdapter;
struct IOUSBDeviceCapabilitySuperSpeedUSB;
struct IOUSBDeviceCapabilityUSB2Extension;
struct IOUSBHostInterface__tExpansionData;
union __ReplyUnion__clock_priv_subsystem;
union __ReplyUnion__lockd_mach_subsystem;
union __ReplyUnion__thread_act_subsystem;
struct __Reply___mach_make_memory_entry_t;
struct __Reply__host_processor_set_priv_t;
struct __Reply__mach_port_allocate_full_t;
struct __Reply__mach_port_allocate_name_t;
struct __Reply__mach_port_extract_right_t;
struct __Reply__mach_port_insert_member_t;
struct __Reply__mach_port_kernel_object_t;
struct __Reply__mach_voucher_debug_info_t;
struct __Reply__mach_zone_info_for_zone_t;
struct __Reply__task_map_corpse_info_64_t;
struct __Reply__thread_get_mach_voucher_t;
struct __Reply__thread_get_special_port_t;
struct __Reply__thread_set_mach_voucher_t;
struct __Reply__thread_set_special_port_t;
union __RequestUnion__lock_set_subsystem;
struct __Request__exception_raise_state_t;
struct __Request__host_get_special_port_t;
struct __Request__host_set_special_port_t;
struct __Request__mach_notify_dead_name_t;
struct __Request__mach_notify_send_once_t;
struct __Request__mach_port_get_context_t;
struct __Request__mach_port_get_srights_t;
struct __Request__mach_port_move_member_t;
struct __Request__mach_port_set_context_t;
struct __Request__mach_port_set_mscount_t;
struct __Request__memory_object_destroy_t;
struct __Request__memory_object_page_op_t;
struct __Request__processor_set_default_t;
struct __Request__processor_set_destroy_t;
struct __Request__processor_set_threads_t;
struct __Request__task_get_mach_voucher_t;
struct __Request__task_get_special_port_t;
struct __Request__task_set_mach_voucher_t;
struct __Request__task_set_special_port_t;
struct __Request__thread_assign_default_t;
struct __Request__thread_create_running_t;
struct __Request__thread_get_assignment_t;
struct mach_port_destroyed_notification_t;
struct _08E176686D46517EB8AB40FFEFBBB9FF;
struct _108B66EFEC9DC1D8651631AAAC2F520E;
union _16C37BE43F73B60D5456A4D0F8F2ABA5;
struct _32A82CDB950F1A48B0FAEA7E2A340328;
struct _369286917136E2F70C2D38E7AE8006A5;
struct _3AFEBDF7A4FC08BFE9A431A2DA7430D4;
struct _3FEB4A13A9F7F8019DC60A4673C10B3A;
struct _4C928A861DF53AA82E61C4313B0554E4;
struct _58DDB36EAAB179E2C121504DB177F0DE;
struct _5F8C1396E33B95E0A1ABA60D21CE7376;
union _64883DA235470546DFCFEE5C08C7D090;
struct _664150227402B916DBC97EF360B4CE67;
struct _6B84C51D081AE912A4584AD6D505FC88;
struct _7008580425A2D9D299FFCC87FFBB188D;
struct _7AF841B63B3E7F4A9A49A44740BED81B;
struct _7B05A56910499893D795CEE646E4ED85;
struct _80170D750C6FB8D8ABC6B5D9BAC5E223;
struct _91B3B8FDADC1811899AE65C68A225D1C;
struct _95CE1D15F775F631DADC340D9ECE61FE;
struct _97FA55610E70EED36F23615CB8D37A51;
struct _9A571A51604F14638CF2B975761C43D6;
struct _9D11F6C6C0F86C3D22885A5E28854F4A;
struct _A019D19E0FE7C996C72A3F72FDBBF387;
struct _A3920816D4629CE8D4A8F0ADB219F5F7;
struct _C0E0325F155B7E7CE2BD0701CF49B8F1;
struct _C255F273D17FD18D4EDDE30A2FF3191C;
struct _D0AC4D4AA87A2DEF3381B9718ACFF2C3;
struct _D22B7EC2FFE3E379BCF7926C521C3184;
struct _D66CA102EDE5E62C512F01257BBA43A6;
struct _DA4E69B70BD9D876C7E6C9B85538FB9E;
struct _DAC77EA8E8A0BF31FD8675571F8AEEAD;
struct _DC3A9BB9D8D5998A73E3E2EEA2D25385;
struct _E3971B313FA2FA2BC7F914AF10E591CA;
struct _E59770B5AFE0FAA139FA7A9E130D8A27;
struct _F1E5C0A8677AE2D8B68EA797305E13C4;
struct _FDF8F008E07F47F1298732B413E31B44;
struct AVCCommandHandlerInfo_vtbl_layout;
struct BluetoothHCIEncryptionKeySizeInfo;
struct BluetoothHCIExtendedInquiryResult;
struct BluetoothHCIInquiryWithRSSIResult;
struct IOAppleLabelScheme__ExpansionData;
struct IOAudioClientBufferExtendedInfo64;
struct IOAudioTimeIntervalFilterFIR_vtbl;
struct IOAudioTimeIntervalFilterIIR_vtbl;
struct IOBDMediaBSDClient__ExpansionData;
struct IOCDMediaBSDClient__ExpansionData;
struct IODTPlatformExpert__ExpansionData;
struct IOFWAsyncCommand__MemberVariables;
struct IOFWLocalIsochPort__ExpansionData;
struct IOFWPHYPacketListener_vtbl_layout;
struct IOFilterInterruptEventSource_vtbl;
struct IOFireWireMultiIsochReceivePacket;
struct IOFireWirePCRSpace__ExpansionData;
struct IOGUIDPartitionScheme_vtbl_layout;
union IOGeneralMemoryDescriptor__Ranges;
struct IOHIKeyboardMapper__ExpansionData;
struct IOInterruptController_vtbl_layout;
struct IOMbufBigMemoryCursor_vtbl_layout;
struct IOMbufMemoryCursor__ExpansionData;
struct IONaturalMemoryCursor_vtbl_layout;
struct IONetworkInterface__ExpansionData;
struct IOSCSIPeripheralDeviceType05_vtbl;
struct IOSubMemoryDescriptor_vtbl_layout;
struct IOTimerEventSource__ExpansionData;
struct IOUSBHostIOSource__tExpansionData;
struct IOUSBHostIOSourceClientRecordLink;
struct IOUSBHostIOSourceClientRecordList;
struct IOUSBUserClientLegacy_vtbl_layout;
struct UserExportDCLSetTagSyncBitsStruct;
struct UserExportDCLTransferBufferStruct;
struct UserExportDCLTransferPacketStruct;
union __ReplyUnion__catch_exc_subsystem;
union __ReplyUnion__do_notify_subsystem;
union __ReplyUnion__gssd_mach_subsystem;
union __ReplyUnion__host_priv_subsystem;
union __ReplyUnion__mach_host_subsystem;
union __ReplyUnion__mach_port_subsystem;
union __ReplyUnion__processor_subsystem;
struct __Reply__coalition_notification_t;
struct __Reply__host_get_clock_control_t;
struct __Reply__host_get_clock_service_t;
struct __Reply__mach_make_memory_entry_t;
struct __Reply__mach_notify_no_senders_t;
struct __Reply__mach_port_allocate_qos_t;
struct __Reply__mach_port_insert_right_t;
struct __Reply__mach_vm_read_overwrite_t;
struct __Reply__mach_vm_region_info_64_t;
struct __Reply__mach_vm_region_recurse_t;
struct __Reply__memory_object_range_op_t;
struct __Reply__task_swap_mach_voucher_t;
struct __Reply__telemetry_notification_t;
union __RequestUnion__mach_vm_subsystem;
struct __Request__clock_get_attributes_t;
struct __Request__clock_set_attributes_t;
struct __Request__host_priv_statistics_t;
struct __Request__mach_exception_raise_t;
struct __Request__mach_gss_unhold_cred_t;
struct __Request__mach_port_deallocate_t;
struct __Request__mach_port_space_info_t;
struct __Request__mach_vm_behavior_set_t;
struct __Request__memory_object_create_t;
struct __Request__processor_set_create_t;
struct __Request__task_generate_corpse_t;
struct __Request__task_map_corpse_info_t;
struct __Request__thread_depress_abort_t;
struct __Request__vm_machine_attribute_t;
struct __Request__vm_map_exec_lockdown_t;
struct __Request__vm_mapped_pages_info_t;
struct __Request__vm_region_recurse_64_t;
struct crashinfo_proc_uniqidentifierinfo;
struct iog__OSSharedObject_GTraceBuffer_;
struct mach_msg_ool_ports_descriptor32_t;
struct mach_msg_ool_ports_descriptor64_t;
struct mach_send_possible_notification_t;
struct BluetoothHCIExtendedFeaturesInfo;
struct BluetoothHCIReadLMPHandleResults;
struct BluetoothHCISimplePairingOOBData;
struct BluetoothUserConfirmationRequest;
struct BluetoothUserPasskeyNotification;
struct DVDAuthenticationSuccessFlagInfo;
struct IOACPIPlatformDevice_vtbl_layout;
struct IOACPIPlatformExpert_vtbl_layout;
struct IOATAController__ataDoubleBuffer;
struct IOAudioToggleControl_vtbl_layout;
struct IOBlockStorageDevice_vtbl_layout;
struct IOBlockStorageDriver_vtbl_layout;
struct IOBluetoothHIDDriver_vtbl_layout;
struct IOConfigDirectory__ExpansionData;
struct IODCLTranslateListen_vtbl_layout;
struct IOEthernetController_vtbl_layout;
struct IOFWPhysicalAddressSpaceAux_vtbl;
struct IOFWWriteQuadCommand_vtbl_layout;
struct IOFireWireAVCAsynchronousCommand;
struct IOFireWireAVCCommand_vtbl_layout;
struct IOFireWireAVCSubUnit_vtbl_layout;
struct IOFireWireAVCUnit__ExpansionData;
struct IOFireWireController_vtbl_layout;
struct IOFireWireDuplicateGUIDList_vtbl;
struct IOFireWireSBP2LUN__ExpansionData;
struct IOFireWireSBP2ManagementORB_vtbl;
struct IOFireWireSBP2ORB__ExpansionData;
struct IOFireWireSBP2Target_vtbl_layout;
struct IOFireWireUnitAux__ExpansionData;
struct IOHIDEventService__ExpansionData;
struct IOLittleMemoryCursor_vtbl_layout;
struct IONDRVFramebuffer__ExpansionData;
struct IOPCIMessagedInterruptController;
struct IOPartitionScheme__ExpansionData;
struct IOSCSIPrimaryCommandsDevice_vtbl;
struct IOSharedDataQueue__ExpansionData;
struct IOSharedInterruptController_vtbl;
struct IOUSBDeviceCapabilityContainerID;
struct IOVideoDeviceNotificationMessage;
struct IOVideoDeviceUserClientInit_vtbl;
struct OSCollectionIterator_vtbl_layout;
struct StandardUSB30__tHubPortStatusExt;
struct StandardUSB__InterfaceDescriptor;
struct UserExportDCLUpdateDCLListStruct;
struct _IOAudioSampleIntervalDescriptor;
union __ReplyUnion__lock_set_subsystem;
struct __Reply__exception_raise_state_t;
struct __Reply__host_get_special_port_t;
struct __Reply__host_set_special_port_t;
struct __Reply__mach_notify_dead_name_t;
struct __Reply__mach_notify_send_once_t;
struct __Reply__mach_port_get_context_t;
struct __Reply__mach_port_get_srights_t;
struct __Reply__mach_port_move_member_t;
struct __Reply__mach_port_set_context_t;
struct __Reply__mach_port_set_mscount_t;
struct __Reply__memory_object_destroy_t;
struct __Reply__memory_object_page_op_t;
struct __Reply__processor_set_default_t;
struct __Reply__processor_set_destroy_t;
struct __Reply__processor_set_threads_t;
struct __Reply__task_get_mach_voucher_t;
struct __Reply__task_get_special_port_t;
struct __Reply__task_set_mach_voucher_t;
struct __Reply__task_set_special_port_t;
struct __Reply__thread_assign_default_t;
struct __Reply__thread_create_running_t;
struct __Reply__thread_get_assignment_t;
union __RequestUnion__vm_map_subsystem;
struct __Request__find_code_signature_t;
struct __Request__host_kernel_version_t;
struct __Request__host_lockgroup_info_t;
struct __Request__host_processor_info_t;
struct __Request__host_processor_sets_t;
struct __Request__lock_handoff_accept_t;
struct __Request__mach_port_construct_t;
struct __Request__mach_port_set_seqno_t;
struct __Request__mach_ports_register_t;
struct __Request__mach_vm_region_info_t;
struct __Request__processor_set_tasks_t;
struct __Request__task_assign_default_t;
struct __Request__task_get_assignment_t;
struct __Request__task_set_port_space_t;
struct __Request__thread_abort_safely_t;
struct __Request__vm_purgable_control_t;
struct coalition_notification_subsystem;
struct com_apple_iokit_KLog_vtbl_layout;
struct mach_port_deleted_notification_t;
struct telemetry_notification_subsystem;
struct ATATimerEventSource_vtbl_layout;
struct AVCConnectionRecord_vtbl_layout;
struct AppleMacIODevice__ExpansionData;
struct ApplePlatformExpert_vtbl_layout;
struct BluetoothHCIRequestCallbackInfo;
struct IOAudioClientBufferExtendedInfo;
struct IOAudioLevelControl_vtbl_layout;
struct IOCDPartitionScheme_vtbl_layout;
struct IODVDMediaBSDClient_vtbl_layout;
struct IODisplayConnect__ExpansionData;
struct IOEthernetInterface_vtbl_layout;
struct IOFWAddressSpace__ExpansionData;
struct IOFWAddressSpaceAux_vtbl_layout;
struct IOFWAsyncPHYCommand_vtbl_layout;
struct IOFWDelayCommand__ExpansionData;
struct IOFWIsochChannel__ExpansionData;
struct IOFWReadQuadCommand_vtbl_layout;
struct IOFireWireAVCProtocolUserClient;
struct IOFireWireBusAux__ExpansionData;
struct IOFireWireDevice__ExpansionData;
struct IOFireWireDeviceAux_vtbl_layout;
struct IOFireWireLocalNode_vtbl_layout;
struct IOFireWireNubAux__ExpansionData;
struct IOFireWireSBP2Login_vtbl_layout;
struct IOFireWireSessionRefOpaqueStuct;
struct IOFramebufferNotificationNotify;
struct IOHIDEventDriver__ExpansionData;
struct IOKernelDebugger__ExpansionData;
struct IOMediaBSDClient__ExpansionData;
struct IOMemoryCursor__PhysicalSegment;
struct IONetworkController_vtbl_layout;
struct IOPMPowerSourceList_vtbl_layout;
struct IOPlatformDevice__ExpansionData;
struct IOPlatformExpert__ExpansionData;
struct IORegistryIterator__IORegCursor;
struct IOUSBHostDevice__tExpansionData;
struct SCSICmd_INQUIRY_StandardDataAll;
struct StandardUSB__EndpointDescriptor;
struct UserExportDCLPtrTimeStampStruct;
struct _AVCConnectTargetPlugsOutParams;
union __ReplyUnion__mach_vm_subsystem;
struct __Reply__clock_get_attributes_t;
struct __Reply__clock_set_attributes_t;
struct __Reply__host_priv_statistics_t;
struct __Reply__mach_exception_raise_t;
struct __Reply__mach_gss_unhold_cred_t;
struct __Reply__mach_port_deallocate_t;
struct __Reply__mach_port_space_info_t;
struct __Reply__mach_vm_behavior_set_t;
struct __Reply__memory_object_create_t;
struct __Reply__processor_set_create_t;
struct __Reply__task_generate_corpse_t;
struct __Reply__task_map_corpse_info_t;
struct __Reply__thread_depress_abort_t;
struct __Reply__vm_machine_attribute_t;
struct __Reply__vm_map_exec_lockdown_t;
struct __Reply__vm_mapped_pages_info_t;
struct __Reply__vm_region_recurse_64_t;
union __RequestUnion__clock_subsystem;
struct __Request__host_get_UNDServer_t;
struct __Request__host_get_boot_info_t;
struct __Request__host_get_io_master_t;
struct __Request__host_set_UNDServer_t;
struct __Request__mach_gss_hold_cred_t;
struct __Request__mach_gss_log_error_t;
struct __Request__mach_port_allocate_t;
struct __Request__mach_port_destruct_t;
struct __Request__mach_port_get_refs_t;
struct __Request__mach_port_mod_refs_t;
struct __Request__mach_vm_deallocate_t;
struct __Request__mach_vm_page_query_t;
struct __Request__mach_zone_force_gc_t;
struct __Request__processor_set_info_t;
struct __Request__task_purgable_info_t;
struct __Request__task_set_emulation_t;
struct mach_msg_ool_ports_descriptor_t;
struct memory_object_default_subsystem;
struct BluetoothHCIEventLEMetaResults;
struct BluetoothHCIStoredLinkKeysInfo;
struct IOATABusCommand__ExpansionData;
struct IOATAController__ExpansionData;
struct IOAppleLabelScheme_vtbl_layout;
struct IOAudioTimeIntervalFilter_vtbl;
struct IOBDMediaBSDClient_vtbl_layout;
struct IOBacklightDisplay_vtbl_layout;
struct IOBasicOutputQueue_vtbl_layout;
struct IOCDMediaBSDClient_vtbl_layout;
struct IODCLTranslateTalk_vtbl_layout;
struct IODTPlatformExpert_vtbl_layout;
struct IODisplayParameterHandler_vtbl;
struct IOFWCompareAndSwapCommand_vtbl;
struct IOFWLocalIsochPort_vtbl_layout;
struct IOFWPseudoAddressSpaceAux_vtbl;
struct IOFWSimplePhysicalAddressSpace;
struct IOFireWireController__pendingQ;
struct IOFireWireController__timeoutQ;
struct IOFireWirePCRSpace_vtbl_layout;
struct IOGatedOutputQueue_vtbl_layout;
struct IOGeneralMemoryDescriptor_vtbl;
struct IOHIKeyboardMapper_vtbl_layout;
struct IOMbufMemoryCursor_vtbl_layout;
struct IOMbufNaturalMemoryCursor_vtbl;
struct IOMemoryDescriptor_vtbl_layout;
struct IONetworkInterface_vtbl_layout;
struct IONetworkMedium__ExpansionData;
struct IOPCI2PCIBridge__ExpansionData;
struct IOPowerStateChangeNotification;
struct IORegistryEntry__ExpansionData;
struct IORegistryIterator_vtbl_layout;
struct IOSCSIMultimediaCommandsDevice;
struct IOSerialDriverSync_vtbl_layout;
struct IOSerialStreamSync_vtbl_layout;
struct IOStreamUserClient_vtbl_layout;
struct IOTimerEventSource_vtbl_layout;
struct IOUSBDeviceCapabilityBillboard;
struct IOUSBDeviceQualifierDescriptor;
struct IOUSBHostInterface_vtbl_layout;
struct IOUSBHostIsochronousCompletion;
struct IOUSBUserClientAsyncParamBlock;
struct IOWatchDogTimer__ExpansionData;
struct _AVCConnectTargetPlugsInParams;
union __ReplyUnion__vm_map_subsystem;
struct __Reply__find_code_signature_t;
struct __Reply__host_kernel_version_t;
struct __Reply__host_lockgroup_info_t;
struct __Reply__host_processor_info_t;
struct __Reply__host_processor_sets_t;
struct __Reply__lock_handoff_accept_t;
struct __Reply__mach_port_construct_t;
struct __Reply__mach_port_set_seqno_t;
struct __Reply__mach_ports_register_t;
struct __Reply__mach_vm_region_info_t;
struct __Reply__processor_set_tasks_t;
struct __Reply__task_assign_default_t;
struct __Reply__task_get_assignment_t;
struct __Reply__task_set_port_space_t;
struct __Reply__thread_abort_safely_t;
struct __Reply__vm_purgable_control_t;
union __RequestUnion__task_subsystem;
struct __Request__check_task_access_t;
struct __Request__clock_alarm_reply_t;
struct __Request__etap_trace_thread_t;
struct __Request__host_statistics64_t;
struct __Request__mach_port_destroy_t;
struct __Request__mach_port_kobject_t;
struct __Request__mach_port_unguard_t;
struct __Request__mach_ports_lookup_t;
struct __Request__mach_vm_page_info_t;
struct __Request__mach_vm_read_list_t;
struct __Request__processor_control_t;
struct __Request__semaphore_destroy_t;
struct __Request__thread_policy_get_t;
struct __Request__thread_policy_set_t;
struct __Request__thread_set_policy_t;
struct __Request__vm_map_page_query_t;
struct __Request__vm_read_overwrite_t;
struct __Request__vm_region_recurse_t;
struct kern_work_interval_create_args;
struct mach_no_senders_notification_t;
struct vm_region_submap_short_info_64;
struct BluetoothEventFilterCondition;
struct BluetoothHCIFailedContactInfo;
struct BluetoothHCIInquiryAccessCode;
struct BluetoothHCISupportedCommands;
struct BluetoothHCISupportedFeatures;
struct BluetoothIOCapabilityResponse;
struct BluetoothKeypressNotification;
struct IOATABusCommand64_vtbl_layout;
struct IOATADevConfig__ExpansionData;
struct IOAudioControl__ExpansionData;
struct IOAudioControlUserClient_vtbl;
struct IOBigMemoryCursor_vtbl_layout;
struct IOBlockStorageDriver__Context;
struct IOBufferMemoryDescriptor_vtbl;
struct IOConfigDirectory_vtbl_layout;
struct IODetailedTimingInformationV1;
struct IODetailedTimingInformationV2;
struct IOFWBusCommand__ExpansionData;
struct IOFWPhysicalAddressSpace_vtbl;
struct IOFilterScheme__ExpansionData;
struct IOFireWireAVCTargetSpace_vtbl;
struct IOFireWireAVCUnit_vtbl_layout;
struct IOFireWireBus__DCLTaskInfoAux;
struct IOFireWireSBP2LUN_vtbl_layout;
struct IOFireWireSBP2ORB_vtbl_layout;
struct IOFireWireSBP2Target__LUNInfo;
struct IOFireWireSBP2UserClient_vtbl;
struct IOFireWireUnit__ExpansionData;
struct IOFireWireUnitAux_vtbl_layout;
struct IOFramebufferSharedUserClient;
struct IOHIDEventService_vtbl_layout;
struct IOHIDInterface__ExpansionData;
struct IOInterleavedMemoryDescriptor;
struct IOInterruptAccountingReporter;
struct IOMbufLittleMemoryCursor_vtbl;
struct IONDRVFramebuffer_vtbl_layout;
struct IONVRAMController_vtbl_layout;
struct IOPartitionScheme_vtbl_layout;
struct IOPowerConnection_vtbl_layout;
struct IOSharedDataQueue_vtbl_layout;
struct IOUSBHostIOSourceClientRecord;
struct IOUSBHostIOSource_vtbl_layout;
struct IOUSBLowLatencyIsocCompletion;
struct IOUSBNotification_vtbl_layout;
struct IOVideoStreamFormatDictionary;
struct SCSICmd_INQUIRY_Page00_Header;
struct SCSICmd_INQUIRY_Page80_Header;
struct SCSICmd_INQUIRY_Page83_Header;
struct SCSICmd_INQUIRY_PageCx_Header;
struct StandardUSB__DeviceDescriptor;
struct StandardUSB__StringDescriptor;
struct VDConfigurationFeatureListRec;
struct _IOAudioStreamFormatExtension;
union __ReplyUnion__clock_subsystem;
struct __Reply__host_get_UNDServer_t;
struct __Reply__host_get_boot_info_t;
struct __Reply__host_get_io_master_t;
struct __Reply__host_set_UNDServer_t;
struct __Reply__mach_gss_hold_cred_t;
struct __Reply__mach_gss_log_error_t;
struct __Reply__mach_port_allocate_t;
struct __Reply__mach_port_destruct_t;
struct __Reply__mach_port_get_refs_t;
struct __Reply__mach_port_mod_refs_t;
struct __Reply__mach_vm_deallocate_t;
struct __Reply__mach_vm_page_query_t;
struct __Reply__mach_zone_force_gc_t;
struct __Reply__processor_set_info_t;
struct __Reply__task_purgable_info_t;
struct __Reply__task_set_emulation_t;
union __RequestUnion__upl_subsystem;
struct __Request__lock_make_stable_t;
struct __Request__lock_set_destroy_t;
struct __Request__mach_memory_info_t;
struct __Request__mach_port_rename_t;
struct __Request__mach_vm_allocate_t;
struct __Request__processor_assign_t;
struct __Request__semaphore_create_t;
struct __Request__thread_get_state_t;
struct __Request__thread_set_state_t;
struct __Request__thread_terminate_t;
struct __Request__upl_commit_range_t;
struct in6_rrenumreq__irr_raflagmask;
struct mach_dead_name_notification_t;
struct mach_send_once_notification_t;
struct mach_voucher_attr_recipe_data;
struct proc_rlimit_control_wakeupmon;
struct thread_time_constraint_policy;
struct AppleMacIODevice_vtbl_layout;
struct AppleUSBHostRequestCompleter;
struct DVDAuthenticationGrantIDInfo;
struct DVDRegionPlaybackControlInfo;
struct IOACPIAddressSpaceDescriptor;
struct IOAudioDevice__ExpansionData;
struct IOAudioEngine__ExpansionData;
struct IOAudioEngineUserClient_vtbl;
struct IOAudioStream__ExpansionData;
struct IOAudioTimeIntervalFilterFIR;
struct IOAudioTimeIntervalFilterIIR;
struct IOCommandGate__ExpansionData;
struct IOCommandPool__ExpansionData;
struct IODMACommand__SegmentOptions;
struct IODMAEventSource_vtbl_layout;
struct IODVDBlockStorageDevice_vtbl;
struct IODVDBlockStorageDriver_vtbl;
struct IODisplayConnect_vtbl_layout;
struct IOEventSource__ExpansionData;
struct IOExtendedLBA__ExpansionData;
struct IOFWAddressSpace_vtbl_layout;
struct IOFWAsyncCommand_vtbl_layout;
struct IOFWCommand__MemberVariables;
struct IOFWDelayCommand_vtbl_layout;
struct IOFWIsochChannel_vtbl_layout;
struct IOFWSkipCycleDCL_vtbl_layout;
struct IOFWWriteCommand_vtbl_layout;
struct IOFilterInterruptEventSource;
struct IOFireWireAVCNub_vtbl_layout;
struct IOFireWireBusAux_vtbl_layout;
struct IOFireWireControllerAux_vtbl;
struct IOFireWireDevice_vtbl_layout;
struct IOFireWireIRMAllocation_vtbl;
struct IOFireWireNub__ExpansionData;
struct IOFireWireNubAux_vtbl_layout;
struct IOFireWireSBP2ORB__FWSBP2ORB;
struct IOFramebuffer__ExpansionData;
struct IOGraphicsDevice_vtbl_layout;
struct IOHIDEventDriver_vtbl_layout;
struct IOKernelDebugger_vtbl_layout;
struct IOKitDiagnostics_vtbl_layout;
struct IOMediaBSDClient_vtbl_layout;
struct IOModemSerialStreamSync_vtbl;
struct IOMultiMemoryDescriptor_vtbl;
struct IONetworkData__ExpansionData;
struct IOOutputQueue__ExpansionData;
struct IOPCIEventSource_vtbl_layout;
struct IOPacketQueue__ExpansionData;
struct IOPlatformDevice_vtbl_layout;
struct IOPlatformExpert_vtbl_layout;
struct IORS232SerialStreamSync_vtbl;
struct IORangeAllocator_vtbl_layout;
struct IOSCSIPeripheralDeviceType05;
struct IOSCSIProtocolInterface_vtbl;
struct IOUSBCompletionWithTimeStamp;
struct IOUSBConfigurationDescHeader;
struct IOUSBConfigurationDescriptor;
struct IOUSBHubPortReEnumerateParam;
struct IOVideoDevice__ExpansionData;
struct IOVideoDeviceUserClient_vtbl;
struct IOVideoStream__ExpansionData;
struct SCSICmd_INQUIRY_StandardData;
struct UserExportDCLTimeStampStruct;
struct VDHardwareCursorDrawStateRec;
struct _IOAudioBufferDataDescriptor;
struct _IOAudioStreamDataDescriptor;
union __ReplyUnion__task_subsystem;
struct __Reply__check_task_access_t;
struct __Reply__clock_alarm_reply_t;
struct __Reply__etap_trace_thread_t;
struct __Reply__host_statistics64_t;
struct __Reply__mach_port_destroy_t;
struct __Reply__mach_port_kobject_t;
struct __Reply__mach_port_unguard_t;
struct __Reply__mach_ports_lookup_t;
struct __Reply__mach_vm_page_info_t;
struct __Reply__mach_vm_read_list_t;
struct __Reply__processor_control_t;
struct __Reply__semaphore_destroy_t;
struct __Reply__thread_policy_get_t;
struct __Reply__thread_policy_set_t;
struct __Reply__thread_set_policy_t;
struct __Reply__vm_map_page_query_t;
struct __Reply__vm_read_overwrite_t;
struct __Reply__vm_region_recurse_t;
struct __Request__exception_raise_t;
struct __Request__host_processors_t;
struct __Request__host_statistics_t;
struct __Request__lock_set_create_t;
struct __Request__mach_gss_lookup_t;
struct __Request__mach_port_guard_t;
struct __Request__mach_port_names_t;
struct __Request__mach_vm_inherit_t;
struct __Request__mach_vm_protect_t;
struct __Request__processor_start_t;
struct __Request__task_policy_get_t;
struct __Request__task_policy_set_t;
struct __Request__task_set_policy_t;
struct __Request__task_set_ras_pc_t;
struct __Request__upl_abort_range_t;
struct __Request__vm_allocate_cpm_t;
struct __Request__vm_behavior_set_t;
struct codesigning_exit_reason_info;
struct sflt_filter__sflt_filter_ext;
struct thread_throughput_qos_policy;
struct ATADeviceNub__ExpansionData;
struct BluetoothHCILinkQualityInfo;
struct IOATABusCommand_vtbl_layout;
struct IOATABusInfo__ExpansionData;
struct IOATACommand__ExpansionData;
struct IOATAController__ataDevInfo;
struct IOATAController_vtbl_layout;
struct IOApplePartitionScheme_vtbl;
struct IOAudioSelectorControl_vtbl;
struct IOBDBlockStorageDevice_vtbl;
struct IOBDBlockStorageDriver_vtbl;
struct IOCDBlockStorageDevice_vtbl;
struct IOCDBlockStorageDriver_vtbl;
struct IOConditionLock_vtbl_layout;
struct IODCLProgram__ExpansionData;
struct IODCLTranslator_vtbl_layout;
struct IODMAController_vtbl_layout;
struct IODeviceMemory__InitElement;
struct IOFDiskPartitionScheme_vtbl;
struct IOFWAsyncStreamCommand_vtbl;
struct IOFWPhysicalAddressSpaceAux;
struct IOFWPseudoAddressSpace_vtbl;
struct IOFWReadCommand_vtbl_layout;
struct IOFWUserObjectExporter_vtbl;
struct IOFireWireDuplicateGUIDList;
struct IOFireWireLocalNodeAux_vtbl;
struct IOFireWirePowerManager_vtbl;
struct IOFireWireSBP2ManagementORB;
struct IOHIDElement__ExpansionData;
struct IOHIPointing__ExpansionData;
struct IOInterruptEventSource_vtbl;
struct IOKitDiagnosticsClient_vtbl;
struct IOLocalConfigDirectory_vtbl;
struct IONetworkMedium_vtbl_layout;
struct IOPCI2PCIBridge_vtbl_layout;
struct IOPMPowerSource_vtbl_layout;
struct IOPlatformExpertDevice_vtbl;
struct IOPwrController_vtbl_layout;
struct IORTCController_vtbl_layout;
struct IORegistryEntry_vtbl_layout;
struct IOSCSIPrimaryCommandsDevice;
struct IOSCSIProtocolServices_vtbl;
struct IOSharedInterruptController;
struct IOUSBHostDevice_vtbl_layout;
struct IOUSBHostStream_vtbl_layout;
struct IOUserClient__ExpansionData;
struct IOVideoDeviceUserClientInit;
struct IOWatchDogTimer_vtbl_layout;
struct OSDictionary__ExpansionData;
struct OSMetaClassBase_vtbl_layout;
struct OSOrderedSet__ExpansionData;
struct SCSICmd_INQUIRY_Page89_Data;
struct SCSICmd_INQUIRY_PageB0_Data;
struct SCSICmd_INQUIRY_PageB1_Data;
struct SCSICmd_INQUIRY_PageB2_Data;
struct SCSICmd_INQUIRY_PageC0_Data;
struct SCSICmd_INQUIRY_PageC1_Data;
struct UserExportDCLCallProcStruct;
struct VDSupportsHardwareCursorRec;
struct _IOAudioNotificationMessage;
union __ReplyUnion__upl_subsystem;
struct __Reply__lock_make_stable_t;
struct __Reply__lock_set_destroy_t;
struct __Reply__mach_memory_info_t;
struct __Reply__mach_port_rename_t;
struct __Reply__mach_vm_allocate_t;
struct __Reply__processor_assign_t;
struct __Reply__semaphore_create_t;
struct __Reply__thread_get_state_t;
struct __Reply__thread_set_state_t;
struct __Reply__thread_terminate_t;
struct __Reply__upl_commit_range_t;
struct __Request__audit_triggers_t;
struct __Request__clock_get_time_t;
struct __Request__clock_set_time_t;
struct __Request__host_page_size_t;
struct __Request__lockd_shutdown_t;
struct __Request__mach_port_peek_t;
struct __Request__mach_port_type_t;
struct __Request__mach_vm_region_t;
struct __Request__mach_zone_info_t;
struct __Request__processor_exit_t;
struct __Request__processor_info_t;
struct __Request__task_get_state_t;
struct __Request__task_set_state_t;
struct __Request__task_terminate_t;
struct __Request__task_zone_info_t;
struct __Request__thread_suspend_t;
struct _dyld_cache_image_text_info;
struct _loaded_kext_summary_header;
struct ifnet_attach_proto_param_v2;
union ip_timestamp__ipt_timestamp;
struct mach_msg_ool_descriptor32_t;
struct mach_msg_ool_descriptor64_t;
struct mach_msg_security_trailer_t;
struct user32_dyld_all_image_infos;
struct user64_dyld_all_image_infos;
struct AVCCommandHandlerInfo_vtbl;
struct AVCSubunitInfo_vtbl_layout;
struct BluetoothHCIInquiryResults;
struct FWSBP2LogoutCompleteParams;
struct IOAGPDevice__ExpansionData;
struct IOATADevConfig_vtbl_layout;
struct IOATADevice__ExpansionData;
struct IOAudioControl_vtbl_layout;
struct IOAudioPort__ExpansionData;
struct IOBlitCopyRectanglesStruct;
struct IOBlockStorageDeviceExtent;
struct IODeviceMemory_vtbl_layout;
struct IODisplayScalerInformation;
struct IOFBCursorControlAttribute;
struct IOFBDisplayModeDescription;
struct IOFWBusCommand_vtbl_layout;
struct IOFWPHYPacketListener_vtbl;
struct IOFWReceiveDCL_vtbl_layout;
struct IOFWUserReadQuadletCommand;
struct IOFilterScheme_vtbl_layout;
struct IOFireWireBus__DCLTaskInfo;
struct IOFireWirePCRSpace__Client;
struct IOFireWireUnit_vtbl_layout;
struct IOGUIDPartitionScheme_vtbl;
struct IOHIDDevice__ExpansionData;
struct IOHIDInterface_vtbl_layout;
struct IOHIDSystem__ExpansionData;
struct IOHardwareCursorDescriptor;
struct IOI2CInterface_vtbl_layout;
struct IOInterruptController_vtbl;
struct IOKitDiagnosticsParameters;
struct IOMbufBigMemoryCursor_vtbl;
struct IOMemoryCursor_vtbl_layout;
struct IOMemoryDescriptorReserved;
struct IONaturalMemoryCursor_vtbl;
struct IOPCIBridge__ExpansionData;
struct IOPMrootDomain_vtbl_layout;
struct IOServiceInterestContent64;
struct IOStreamBuffer_vtbl_layout;
struct IOSubMemoryDescriptor_vtbl;
struct IOUSBUserClientLegacy_vtbl;
struct LowLatencyUserBufferInfoV2;
struct LowLatencyUserBufferInfoV3;
struct StandardUSB__BOSDescriptor;
struct StandardUSB__DeviceRequest;
struct StandardUSB__HubDescriptor;
struct UserExportDCLCommandStruct;
struct __Reply__exception_raise_t;
struct __Reply__host_processors_t;
struct __Reply__host_statistics_t;
struct __Reply__lock_set_create_t;
struct __Reply__mach_gss_lookup_t;
struct __Reply__mach_port_guard_t;
struct __Reply__mach_port_names_t;
struct __Reply__mach_vm_inherit_t;
struct __Reply__mach_vm_protect_t;
struct __Reply__processor_start_t;
struct __Reply__task_policy_get_t;
struct __Reply__task_policy_set_t;
struct __Reply__task_set_policy_t;
struct __Reply__task_set_ras_pc_t;
struct __Reply__upl_abort_range_t;
struct __Reply__vm_allocate_cpm_t;
struct __Reply__vm_behavior_set_t;
struct __Request__act_get_state_t;
struct __Request__act_set_state_t;
struct __Request__kmod_get_info_t;
struct __Request__lockd_request_t;
struct __Request__mach_vm_msync_t;
struct __Request__mach_vm_remap_t;
struct __Request__mach_vm_write_t;
struct __Request__task_set_info_t;
struct __Request__task_suspend2_t;
struct __Request__thread_assign_t;
struct __Request__thread_create_t;
struct __Request__thread_policy_t;
struct __Request__thread_resume_t;
struct __Request__thread_sample_t;
struct __Request__vm_deallocate_t;
struct com_apple_iokit_KLogClient;
struct encryption_info_command_64;
struct host_can_has_debugger_info;
struct ifnet_stat_increment_param;
struct mach_msg_context_trailer_t;
struct mach_msg_port_descriptor_t;
struct mach_msg_type_descriptor_t;
struct rpc_routine_arg_descriptor;
struct AppleMacIO__ExpansionData;
struct BluetoothHCIInquiryResult;
struct FWSBP2LoginCompleteParams;
struct IOACPIPlatformDevice_vtbl;
struct IOACPIPlatformExpert_vtbl;
struct IOAccelSurfaceInformation;
struct IOAccelerator_vtbl_layout;
struct IOAudioDevice_vtbl_layout;
struct IOAudioEngine_vtbl_layout;
struct IOAudioFormatNotification;
struct IOAudioStream_vtbl_layout;
struct IOAudioTimeIntervalFilter;
struct IOAudioToggleControl_vtbl;
struct IOBlitCopyRectangleStruct;
struct IOBlockStorageDevice_vtbl;
struct IOBlockStorageDriver_vtbl;
struct IOBluetoothHIDDriver_vtbl;
struct IOCommandGate_vtbl_layout;
struct IOCommandPool_vtbl_layout;
struct IODCLTranslateListen_vtbl;
struct IODVDMedia__ExpansionData;
struct IODVDServices_vtbl_layout;
struct IODisplayParameterHandler;
struct IOEthernetController_vtbl;
struct IOEventSource_vtbl_layout;
struct IOExtendedLBA_vtbl_layout;
struct IOExternalMethodArguments;
struct IOFBCursorControlCallouts;
struct IOFWCompareAndSwapCommand;
struct IOFWIsochPort_vtbl_layout;
struct IOFWPseudoAddressSpaceAux;
struct IOFWUserPHYPacketListener;
struct IOFWWriteQuadCommand_vtbl;
struct IOFireWireAVCCommand_vtbl;
struct IOFireWireAVCSubUnit_vtbl;
struct IOFireWireBus_vtbl_layout;
struct IOFireWireController_vtbl;
struct IOFireWireNub_vtbl_layout;
struct IOFireWireSBP2Target_vtbl;
struct IOFramebuffer_vtbl_layout;
struct IOGeneralMemoryDescriptor;
struct IOHIDWorkLoop_vtbl_layout;
struct IOInterruptAccountingData;
struct IOLittleMemoryCursor_vtbl;
struct IOMbufNaturalMemoryCursor;
struct IONetworkData_vtbl_layout;
struct IOOutputQueue_vtbl_layout;
struct IOPacketBufferConstraints;
struct IOPacketQueue_vtbl_layout;
struct IOSimpleArrayReportValues;
struct IOUSBFindInterfaceRequest;
struct IOUSBHostIsochronousFrame;
struct IOUSBHostPipe_vtbl_layout;
struct IOUSBLowLatencyIsocStruct;
struct IOVideoDeviceNotification;
struct IOVideoDevice_vtbl_layout;
struct IOVideoStream_vtbl_layout;
struct IOWorkLoop__ExpansionData;
struct OSCollectionIterator_vtbl;
struct __Reply__audit_triggers_t;
struct __Reply__clock_get_time_t;
struct __Reply__clock_set_time_t;
struct __Reply__host_page_size_t;
struct __Reply__lockd_shutdown_t;
struct __Reply__mach_port_peek_t;
struct __Reply__mach_port_type_t;
struct __Reply__mach_vm_region_t;
struct __Reply__mach_zone_info_t;
struct __Reply__processor_exit_t;
struct __Reply__processor_info_t;
struct __Reply__task_get_state_t;
struct __Reply__task_set_state_t;
struct __Reply__task_terminate_t;
struct __Reply__task_zone_info_t;
struct __Reply__thread_suspend_t;
struct __Request__kext_request_t;
struct __Request__kmod_control_t;
struct __Request__kmod_destroy_t;
struct __Request__lock_acquire_t;
struct __Request__lock_handoff_t;
struct __Request__lock_release_t;
struct __Request__mach_vm_copy_t;
struct __Request__mach_vm_read_t;
struct __Request__mach_vm_wire_t;
struct __Request__task_inspect_t;
struct __Request__task_resume2_t;
struct __Request__task_suspend_t;
struct __Request__task_threads_t;
struct __Request__thread_abort_t;
struct __Request__vm_read_list_t;
struct __Request__vm_region_64_t;
struct auditpipe_ioctl_preselect;
struct com_apple_iokit_KLog_vtbl;
struct iog___OSSharedWeakCounter;
struct jetsam_coalition_snapshot;
struct kcdata_subtype_descriptor;
struct mach_msg_ool_descriptor_t;
struct memory_object_behave_info;
struct scattered_relocation_info;
struct stackshot_thread_waitinfo;
struct task_inspect_basic_counts;
struct thread_latency_qos_policy;
struct user32_fbootstraptransfer;
struct vDSP_biquadm_SetupStructD;
struct vnop_getattrlistbulk_args;
struct ATADeviceNub_vtbl_layout;
struct ATATimerEventSource_vtbl;
struct AVCConnectionRecord_vtbl;
struct ApplePlatformExpert_vtbl;
struct BluetoothHCILEBufferSize;
struct BluetoothHCIScanActivity;
struct GTraceBuffer_vtbl_layout;
struct IOATABusInfo_vtbl_layout;
struct IOATACommand_vtbl_layout;
struct IOATAIOReg16_vtbl_layout;
struct IOATAIOReg32_vtbl_layout;
struct IOAsyncCompletionContent;
struct IOAudioControlUserClient;
struct IOAudioLevelControl_vtbl;
struct IOBDMedia__ExpansionData;
struct IOBDServices_vtbl_layout;
struct IOBufferMemoryDescriptor;
struct IOCDMedia__ExpansionData;
struct IOCDPartitionScheme_vtbl;
struct IODCLProgram_vtbl_layout;
struct IODMACommand_vtbl_layout;
struct IODVDMediaBSDClient_vtbl;
struct IODisplayModeInformation;
struct IOEthernetInterface_vtbl;
struct IOExternalMethodDispatch;
struct IOFWAddressSpaceAux_vtbl;
struct IOFWAsyncPHYCommand_vtbl;
struct IOFWPhysicalAddressSpace;
struct IOFWReadQuadCommand_vtbl;
struct IOFireWireAVCTargetSpace;
struct IOFireWireDeviceAux_vtbl;
struct IOFireWireLocalNode_vtbl;
struct IOFireWireSBP2Login_vtbl;
struct IOFireWireSBP2UserClient;
struct IOHIDElement_vtbl_layout;
struct IOHIKeyboard_vtbl_layout;
struct IOHIPointing_vtbl_layout;
struct IOHistogramSegmentConfig;
struct IOMbufLittleMemoryCursor;
struct IONDRVFramebufferPrivate;
struct IONetworkController_vtbl;
struct IOPCIDeviceExpansionData;
struct IOPMPowerSourceList_vtbl;
struct IOService__ExpansionData;
struct IOServiceInterestContent;
struct IOStorage__ExpansionData;
struct IOStorageProvisionExtent;
struct IOStreamBufferQueueEntry;
struct IOUSBFindEndpointRequest;
struct IOUSBHubPortClearTTParam;
struct IOUSBInterfaceDescriptor;
struct IOUSBLowLatencyIsocFrame;
struct IOUserClient_vtbl_layout;
struct IOVideoControlDictionary;
struct IOVideoStreamDescription;
struct LowLatencyUserBufferInfo;
struct OSCollection_vtbl_layout;
struct OSDictionary_vtbl_layout;
struct OSOrderedSet_vtbl_layout;
struct OSSerializer_vtbl_layout;
struct OpaqueDTPropertyIterator;
struct UserExportDCLLabelStruct;
struct UserExportDCLNuDCLLeader;
struct VDPrivateSelectorDataRec;
struct VDVideoParametersInfoRec;
struct __Reply__act_get_state_t;
struct __Reply__act_set_state_t;
struct __Reply__kmod_get_info_t;
struct __Reply__lockd_request_t;
struct __Reply__mach_vm_msync_t;
struct __Reply__mach_vm_remap_t;
struct __Reply__mach_vm_write_t;
struct __Reply__task_set_info_t;
struct __Reply__task_suspend2_t;
struct __Reply__thread_assign_t;
struct __Reply__thread_create_t;
struct __Reply__thread_policy_t;
struct __Reply__thread_resume_t;
struct __Reply__thread_sample_t;
struct __Reply__vm_deallocate_t;
struct __Request__clock_alarm_t;
struct __Request__host_reboot_t;
struct __Request__kmod_create_t;
struct __Request__mach_vm_map_t;
struct __Request__task_assign_t;
struct __Request__task_create_t;
struct __Request__task_policy_t;
struct __Request__task_resume_t;
struct __Request__task_sample_t;
struct __Request__thread_info_t;
struct __Request__thread_wire_t;
struct __Request__vm_allocate_t;
struct _stickyKeys_ModifierInfo;
struct audit_triggers_subsystem;
struct catch_mach_exc_subsystem;
struct dk_dvd_read_rzone_info_t;
struct dyld_kernel_process_info;
struct host_preferred_user_arch;
struct ifnet_attach_proto_param;
struct ipc_voucher_attr_control;
struct ipc_voucher_attr_manager;
struct kauth_identity_extlookup;
struct mach_msg_audit_trailer_t;
struct mach_msg_seqno_trailer_t;
struct proc_regioninfo_internal;
struct proc_threadinfo_internal;
struct processor_set_basic_info;
struct thread_background_policy;
struct thread_delta_snapshot_v2;
struct thread_delta_snapshot_v3;
struct thread_group_snapshot_v2;
struct thread_precedence_policy;
struct vDSP_biquad_SetupStructD;
struct vDSP_biquadm_SetupStruct;
struct vc_progress_user_options;
struct vm_region_submap_info_64;
struct AppleNMI__ExpansionData;
struct AppleUSBDescriptorCache;
struct AppleUSBHostDeviceIdler;
struct BluetoothHCIVersionInfo;
struct DCLSetTagSyncBitsStruct;
struct DCLTransferBufferStruct;
struct DCLTransferPacketStruct;
struct GTraceEntry__ThreadInfo;
struct HFSMasterDirectoryBlock;
struct HFSPlusExtentDescriptor;
struct IOAGPDevice_vtbl_layout;
struct IOATADevice_vtbl_layout;
struct IOATAIOReg8_vtbl_layout;
struct IOAppleLabelScheme_vtbl;
struct IOAudioEngineUserClient;
struct IOAudioPort_vtbl_layout;
struct IOAudioStreamFormatDesc;
struct IOBDMediaBSDClient_vtbl;
struct IOBacklightDisplay_vtbl;
struct IOBasicOutputQueue_vtbl;
struct IOBluetoothL2CAPChannel;
struct IOCDMediaBSDClient_vtbl;
struct IOCatalogue_vtbl_layout;
struct IODCLTranslateTalk_vtbl;
struct IODMACommand__Segment32;
struct IODMACommand__Segment64;
struct IODTPlatformExpert_vtbl;
struct IODVDBlockStorageDevice;
struct IODVDBlockStorageDriver;
struct IODataQueue_vtbl_layout;
struct IOFWAsyncStreamListener;
struct IOFWAsyncStreamReceiver;
struct IOFWCommand_vtbl_layout;
struct IOFWDCLPool_vtbl_layout;
struct IOFWDuplicateGUIDStruct;
struct IOFWLocalIsochPort_vtbl;
struct IOFWSendDCL_vtbl_layout;
struct IOFireWireControllerAux;
struct IOFireWireIRMAllocation;
struct IOFireWirePCRSpace_vtbl;
struct IOFramebufferUserClient;
struct IOGatedOutputQueue_vtbl;
struct IOGraphicsEngineContext;
struct IOHIDDevice_vtbl_layout;
struct IOHIDSystem_vtbl_layout;
struct IOHIKeyboardMapper_vtbl;
struct IOHistogramReportValues;
struct IOMbufMemoryCursor_vtbl;
struct IOMemoryDescriptor_vtbl;
struct IOMemoryMap_vtbl_layout;
struct IOModemSerialStreamSync;
struct IOMultiMemoryDescriptor;
struct IONDRVControlParameters;
struct IONetworkInterface_vtbl;
struct IOPCIATA__ExpansionData;
struct IOPCIBridge_vtbl_layout;
struct IOPCIDevice_vtbl_layout;
struct IORS232SerialStreamSync;
struct IORangeAllocatorElement;
struct IORegistryIterator_vtbl;
struct IOSCSIProtocolInterface;
struct IOSerialDriverSync_vtbl;
struct IOSerialStreamSync_vtbl;
struct IOStreamUserClient_vtbl;
struct IOTimerEventSource_vtbl;
struct IOUSBEndpointDescriptor;
struct IOUSBEndpointProperties;
struct IOUSBHostInterface_vtbl;
struct IOVideoDeviceUserClient;
struct IOVideoStreamDictionary;
struct NXEventSystemDeviceList;
struct OSDictionary__dictEntry;
struct OSMetaClass_vtbl_layout;
struct OSNumber__ExpansionData;
struct OSSerialize_vtbl_layout;
struct StandardUSB__Descriptor;
struct UserExportDCLJumpStruct;
struct VDDisplayConnectInfoRec;
struct VDDisplayTimingRangeRec;
struct VDDrawHardwareCursorRec;
struct __Reply__kext_request_t;
struct __Reply__kmod_control_t;
struct __Reply__kmod_destroy_t;
struct __Reply__lock_acquire_t;
struct __Reply__lock_handoff_t;
struct __Reply__lock_release_t;
struct __Reply__mach_vm_copy_t;
struct __Reply__mach_vm_read_t;
struct __Reply__mach_vm_wire_t;
struct __Reply__task_inspect_t;
struct __Reply__task_resume2_t;
struct __Reply__task_suspend_t;
struct __Reply__task_threads_t;
struct __Reply__thread_abort_t;
struct __Reply__vm_read_list_t;
struct __Reply__vm_region_64_t;
struct __Request__kextd_ping_t;
struct __Request__lockd_ping_t;
struct __Request__upl_commit_t;
struct __Request__vm_inherit_t;
struct __Request__vm_protect_t;
struct _shared_file_mapping_np;
struct ccchacha20poly1305_info;
struct dk_bd_read_track_info_t;
struct dk_cd_read_track_info_t;
struct dk_dvd_read_disc_info_t;
struct dk_dvd_read_structure_t;
struct dylib_table_of_contents;
struct encryption_info_command;
struct fs_snapshot_revert_args;
struct kern_work_interval_args;
struct kpc_get_counters_remote;
struct memory_object_attr_info;
struct memory_object_perf_info;
struct processor_cpu_load_info;
struct processor_set_load_info;
struct stack_snapshot_stacktop;
struct user_fbootstraptransfer;
struct vDSP_biquad_SetupStruct;
struct vm_region_basic_info_64;
struct vm_region_extended_info;
struct vnop_kqfilt_remove_args;
struct AppleMacIO_vtbl_layout;
struct AppleUSBHostController;
struct BluetoothDeviceAddress;
struct BluetoothHCIBufferSize;
struct BluetoothReadClockInfo;
struct BluetoothTransportInfo;
struct DCLUpdateDCLListStruct;
struct DeviceTreeNodeProperty;
struct EventElementCollection;
struct IOATABusCommand64_vtbl;
struct IOATAReg16_vtbl_layout;
struct IOATAReg32_vtbl_layout;
struct IOAccelSurfaceReadData;
struct IOApplePartitionScheme;
struct IOAudioClientBufferSet;
struct IOAudioSelectorControl;
struct IOBDBlockStorageDevice;
struct IOBDBlockStorageDriver;
struct IOBigMemoryCursor_vtbl;
struct IOBlitCopyRegionStruct;
struct IOBlitRectanglesStruct;
struct IOCDBlockStorageDevice;
struct IOCDBlockStorageDriver;
struct IOConfigDirectory_vtbl;
struct IODVDMedia_vtbl_layout;
struct IOFDiskPartitionScheme;
struct IOFWAsyncStreamCommand;
struct IOFWPseudoAddressSpace;
struct IOFWSyncer_vtbl_layout;
struct IOFWUserObjectExporter;
struct IOFireWireAVCUnit_vtbl;
struct IOFireWireLocalNodeAux;
struct IOFireWirePowerManager;
struct IOFireWireSBP2LUN_vtbl;
struct IOFireWireSBP2ORB_vtbl;
struct IOFireWireUnitAux_vtbl;
struct IOHIDEventService_vtbl;
struct IOHIDevice_vtbl_layout;
struct IOInterruptEventSource;
struct IOKitDiagnosticsClient;
struct IOLocalConfigDirectory;
struct IOMedia__ExpansionData;
struct IONDRVFramebuffer_vtbl;
struct IONVRAMController_vtbl;
struct IONormDistReportValues;
struct IONotifier_vtbl_layout;
struct IOPartitionScheme_vtbl;
struct IOPlatformExpertDevice;
struct IOPowerConnection_vtbl;
struct IOSCSIProtocolServices;
struct IOSharedDataQueue_vtbl;
struct IOTrackingCallSiteInfo;
struct IOUSBHostIOSource_vtbl;
struct IOUSBNotification_vtbl;
struct IOWorkLoop_vtbl_layout;
struct OSArray__ExpansionData;
struct OSIterator_vtbl_layout;
struct OSNotificationHeader64;
struct SCSIMultimediaCommands;
struct VDCommunicationInfoRec;
struct VDSetHardwareCursorRec;
struct _NXTabletProximityData;
struct __Reply__clock_alarm_t;
struct __Reply__host_reboot_t;
struct __Reply__kmod_create_t;
struct __Reply__mach_vm_map_t;
struct __Reply__task_assign_t;
struct __Reply__task_create_t;
struct __Reply__task_policy_t;
struct __Reply__task_resume_t;
struct __Reply__task_sample_t;
struct __Reply__thread_info_t;
struct __Reply__thread_wire_t;
struct __Reply__vm_allocate_t;
struct __Request__host_info_t;
struct __Request__task_info_t;
struct __Request__task_wire_t;
struct __Request__upl_abort_t;
struct __Request__vm_map_64_t;
struct __Request__vm_region_t;
struct __throttle_info_handle;
struct _stickyKeys_ToggleInfo;
struct ccchacha20poly1305_ctx;
struct ccchacha20poly1305_fns;
struct ccdrbg_nisthmac_custom;
struct clock_frequency_info_t;
struct cpuid_arch_perf_leaf_t;
struct dk_bd_read_disc_info_t;
struct dk_bd_read_structure_t;
struct dk_cd_read_disc_info_t;
struct dk_error_description_t;
struct dk_format_capacities_t;
struct dyld_kernel_image_info;
struct fs_snapshot_mount_args;
struct instrs_cycles_snapshot;
struct kcdata_type_definition;
struct mach_msg_mac_trailer_t;
struct policy_timeshare_limit;
struct prebound_dylib_command;
struct proc_taskinfo_internal;
struct rpc_routine_descriptor;
struct shared_file_mapping_np;
struct shared_region_range_np;
struct source_version_command;
struct stack_snapshot_frame32;
struct stack_snapshot_frame64;
struct stackshot_cpu_times_v2;
struct task_absolutetime_info;
struct task_affinity_tag_info;
struct task_delta_snapshot_v2;
struct task_kernelmemory_info;
struct task_thread_times_info;
struct task_trace_memory_info;
struct thread_affinity_policy;
struct thread_extended_policy;
struct thread_identifier_info;
struct thread_standard_policy;
struct twolevel_hints_command;
struct user32_dyld_image_info;
struct user64_dyld_image_info;
struct AVCCommandHandlerInfo;
struct AppleMacIODevice_vtbl;
struct AppleUSBHostResources;
struct BluetoothSetEventMask;
struct DCLPtrTimeStampStruct;
struct DSPDoubleSplitComplex;
struct DVDPhysicalFormatInfo;
struct FWSBP2ReconnectParams;
struct HFSPlusAttrInlineData;
struct HIDButtonCapabilities;
struct IOATAReg8_vtbl_layout;
struct IOAccelSurfaceScaling;
struct IOAudioClientBuffer64;
struct IOAudioEnginePosition;
struct IOBDMedia_vtbl_layout;
struct IOBlitOperationStruct;
struct IOBlitRectangleStruct;
struct IOBlitScanlinesStruct;
struct IOCDMedia_vtbl_layout;
struct IOCommand_vtbl_layout;
struct IODMAEventSource_vtbl;
struct IODMAMapSpecification;
struct IODTNVRAM_vtbl_layout;
struct IODisplayConnect_vtbl;
struct IODisplay_vtbl_layout;
struct IOExternalAsyncMethod;
struct IOFWAddressSpace_vtbl;
struct IOFWAsyncCommand_vtbl;
struct IOFWDCL__InternalData;
struct IOFWDelayCommand_vtbl;
struct IOFWIsochChannel_vtbl;
struct IOFWPHYPacketListener;
struct IOFWSkipCycleDCL_vtbl;
struct IOFWUserVectorCommand;
struct IOFWWriteCommand_vtbl;
struct IOFireWireAVCNub_vtbl;
struct IOFireWireBusAux_vtbl;
struct IOFireWireDevice_vtbl;
struct IOFireWireNubAux_vtbl;
struct IOGUIDPartitionScheme;
struct IOGraphicsDevice_vtbl;
struct IOHIDAsyncReportQueue;
struct IOHIDEventDriver_vtbl;
struct IOInterruptController;
struct IOKernelDebugger_vtbl;
struct IOKitDiagnostics_vtbl;
struct IOMbufBigMemoryCursor;
struct IOMediaBSDClient_vtbl;
struct IONaturalMemoryCursor;
struct IOPCIEventSource_vtbl;
struct IOPlatformDevice_vtbl;
struct IOPlatformExpert_vtbl;
struct IORangeAllocator_vtbl;
struct IOReportElementValues;
struct IOService_vtbl_layout;
struct IOStorage_vtbl_layout;
struct IOSubMemoryDescriptor;
struct IOUSBDescriptorHeader;
struct IOUSBDeviceDescriptor;
struct IOUSBUserClientLegacy;
struct OSBoolean_vtbl_layout;
struct OSData__ExpansionData;
struct OpaqueDTEntryIterator;
struct VDMultiConnectInfoRec;
struct _AVCSubunitPlugRecord;
struct __Reply__kextd_ping_t;
struct __Reply__lockd_ping_t;
struct __Reply__upl_commit_t;
struct __Reply__vm_inherit_t;
struct __Reply__vm_protect_t;
struct __Request__lock_try_t;
struct __Request__vm_msync_t;
struct __Request__vm_remap_t;
struct __Request__vm_write_t;
struct build_version_command;
struct ccdrbg_nistctr_custom;
struct clock_reply_subsystem;
struct des3_ecb_key_schedule;
struct dk_corestorage_info_t;
struct dk_provision_extent_t;
struct dk_provision_status_t;
struct embedded_panic_header;
struct fs_snapshot_root_args;
struct kernel_resource_sizes;
struct linkedit_data_command;
struct linker_option_command;
union mach_msg_descriptor_t;
struct mach_msg_empty_send_t;
struct policy_timeshare_base;
struct policy_timeshare_info;
struct prebind_cksum_command;
struct stackshot_fault_stats;
struct sub_framework_command;
struct task_access_subsystem;
struct thread_group_snapshot;
struct user32_dyld_uuid_info;
struct user64_dyld_uuid_info;
struct vm_region_submap_info;
struct vnop_readdirattr_args;
struct vnop_removexattr_args;
struct vol_capabilities_attr;
struct x86_exception_state64;
struct AppleNMI_vtbl_layout;
struct BluetoothHCIRSSIInfo;
struct BluetoothHCIRoleInfo;
struct DVDManufacturingInfo;
struct FndrExtendedFileInfo;
struct GTraceEntry__ArgsTag;
struct HFSPlusCatalogFolder;
struct HFSPlusCatalogThread;
struct HIDValueCapabilities;
struct IOACPIPlatformDevice;
struct IOACPIPlatformExpert;
struct IOATABusCommand_vtbl;
struct IOATAController_vtbl;
struct IOAudioToggleControl;
struct IOBlitVerticesStruct;
struct IOBlockStorageDevice;
struct IOBlockStorageDriver;
struct IOBluetoothHIDDriver;
struct IOConditionLock_vtbl;
struct IODCLTranslateListen;
struct IODCLTranslator_vtbl;
struct IODMACommandInternal;
struct IODMAController_vtbl;
struct IODisplayTimingRange;
struct IOEthernetController;
struct IOFWCmdQ_vtbl_layout;
struct IOFWReadCommand_vtbl;
struct IOFWUserWriteCommand;
struct IOFWWriteQuadCommand;
struct IOFireWireAVCCommand;
struct IOFireWireAVCSubUnit;
struct IOFireWireController;
struct IOFireWireSBP2Target;
struct IOFireWireUserClient;
struct IOFramebufferPrivate;
struct IOHardwareCursorInfo;
struct IOLittleMemoryCursor;
struct IOMapper_vtbl_layout;
struct IONetworkMedium_vtbl;
struct IOPCI2PCIBridge_vtbl;
struct IOPCIATA_vtbl_layout;
struct IOPCIPhysicalAddress;
struct IOPMPowerSource_vtbl;
struct IOPwrController_vtbl;
struct IORTC__ExpansionData;
struct IORTCController_vtbl;
struct IORegistryEntry_vtbl;
struct IOReportInterestList;
struct IOSimpleReportValues;
struct IOStream_vtbl_layout;
struct IOUSBHostDevice_vtbl;
struct IOUSBHostStream_vtbl;
struct IOUSBLog_vtbl_layout;
struct IOWatchDogTimer_vtbl;
struct MasterAudioFunctions;
struct OSCollectionIterator;
struct OSMetaClassBase_vtbl;
struct OSNotificationHeader;
struct OSNumber_vtbl_layout;
struct OSObject_vtbl_layout;
struct OSSet__ExpansionData;
struct OSString_vtbl_layout;
struct OSSymbol_vtbl_layout;
struct VDConvolutionInfoRec;
struct VDPrivateSelectorRec;
struct _IOAudioEngineStatus;
struct _IOAudioStreamFormat;
struct _IODataQueueAppendix;
struct _NXParsedKeyMapping_;
struct __Reply__host_info_t;
struct __Reply__task_info_t;
struct __Reply__task_wire_t;
struct __Reply__upl_abort_t;
struct __Reply__vm_map_64_t;
struct __Reply__vm_region_t;
struct __Request__vm_copy_t;
struct __Request__vm_read_t;
struct __Request__vm_wire_t;
struct _loaded_kext_summary;
struct com_apple_iokit_KLog;
struct cpuid_thermal_leaf_t;
struct des_ecb_key_schedule;
struct dk_format_capacity_t;
struct dk_physical_extent_t;
struct dyld_uuid_info_64_v2;
struct exit_reason_snapshot;
struct i386_exception_state;
struct ipc_info_space_basic;
struct kev_in6_addrlifetime;
struct ledger_template_info;
struct mach_core_fileheader;
struct mach_msg_empty_rcv_t;
struct mach_task_basic_info;
struct priority_queue_entry;
struct processor_basic_info;
struct sub_umbrella_command;
struct task_category_policy;
struct task_wait_state_info;
struct thread_extended_info;
struct user32_fssearchblock;
struct user64_fssearchblock;
struct vm_extmod_statistics;
struct vm_region_basic_info;
struct vnop_kqfilt_add_args;
struct ATATimerEventSource;
struct AVCConnectionRecord;
struct AVCSubunitInfo_vtbl;
struct ApplePlatformExpert;
struct AppleUSBRequestPool;
struct BluetoothAFHResults;
struct DVDChallengeKeyInfo;
struct DigitizerTransducer;
struct FWSBP2LoginResponse;
struct FndrExtendedDirInfo;
struct HFSExtentDescriptor;
struct HFSPlusAttrForkData;
struct HFSPlusVolumeHeader;
struct IOATADevConfig_vtbl;
struct IOAccelDeviceRegion;
struct IOAudioClientBuffer;
struct IOAudioControl_vtbl;
struct IOAudioLevelControl;
struct IOBlitSurfaceStruct;
struct IOCDPartitionScheme;
struct IODVDMediaBSDClient;
struct IODeviceMemory_vtbl;
struct IOEthernetInterface;
struct IOFWAddressSpaceAux;
struct IOFWAsyncPHYCommand;
struct IOFWBusCommand_vtbl;
struct IOFWDCL_vtbl_layout;
struct IOFWReadQuadCommand;
struct IOFWReceiveDCL_vtbl;
struct IOFilterScheme_vtbl;
struct IOFireWireDeviceAux;
struct IOFireWireLocalNode;
struct IOFireWireSBP2Login;
struct IOFireWireUnit_vtbl;
struct IOHIDElementPrivate;
struct IOHIDInterface_vtbl;
struct IOHIDKeyboardDevice;
struct IOHIDPointingDevice;
struct IOI2CInterface_vtbl;
struct IOMedia_vtbl_layout;
struct IOMemoryCursor_vtbl;
struct IONetworkController;
struct IOPMPowerSourceList;
struct IOPMrootDomain_vtbl;
struct IOReportChannelList;
struct IOReportChannelType;
struct IOStateReportValues;
struct IOStorageAttributes;
struct IOStorageCompletion;
struct IOStreamBufferQueue;
struct IOStreamBuffer_vtbl;
struct IOTimingInformation;
struct IOUSB3HubDescriptor;
struct IOUSBDevRequestDesc;
struct IOUSBGetFrameStruct;
struct IOUSBHostCompletion;
struct IOUSBIsocCompletion;
struct NXEventSystemDevice;
struct OSArray_vtbl_layout;
struct OSKextActiveAccount;
struct OSKextGrabPgoStruct;
struct SCSIPrimaryCommands;
struct VDDetailedTimingRec;
struct VDResolutionInfoRec;
struct __Reply__lock_try_t;
struct __Reply__vm_msync_t;
struct __Reply__vm_remap_t;
struct __Reply__vm_write_t;
struct __Request__vm_map_t;
struct catch_exc_subsystem;
struct cl_direct_read_lock;
struct dk_dvd_report_key_t;
struct do_notify_subsystem;
struct entry_point_command;
struct ifmedia_description;
struct in6_prflags__prf_ra;
struct in6_prflags__prf_rr;
struct ip6_hdr__ip6_hdrctl;
struct mach_vm_info_region;
struct mach_zone_info_data;
struct mem_and_io_snapshot;
struct nd_neighbor_solicit;
struct routines_command_64;
struct sadb_x_ipsecrequest;
struct stackshot_cpu_times;
struct sub_library_command;
struct task_zone_info_data;
struct tcp_connection_info;
struct trust_cache_module0;
struct trust_cache_module1;
struct version_min_command;
struct vnodeopv_entry_desc;
struct vnop_clonefile_args;
struct vnop_listxattr_args;
struct vol_attributes_attr;
struct x86_exception_state;
struct Block_callbacks_RR;
struct Block_descriptor_1;
struct Block_descriptor_2;
struct Block_descriptor_3;
struct DCLTimeStampStruct;
struct FWSBP2NotifyParams;
struct HFSPlusAttrExtents;
struct HFSPlusCatalogFile;
struct IOAccelerator_vtbl;
struct IOAppleLabelScheme;
struct IOAudioDevice_vtbl;
struct IOAudioEngine_vtbl;
struct IOAudioStream_vtbl;
struct IOBDMediaBSDClient;
struct IOBacklightDisplay;
struct IOBasicOutputQueue;
struct IOBlitCursorStruct;
struct IOBlitVertexStruct;
struct IOCDMediaBSDClient;
struct IOCommandGate_vtbl;
struct IOCommandPool_vtbl;
struct IODCLTranslateTalk;
struct IODTPlatformExpert;
struct IODVDServices_vtbl;
struct IODot3RxExtraEntry;
struct IODot3TxExtraEntry;
struct IOEventSource_vtbl;
struct IOExtendedLBA_vtbl;
struct IOFWIsochPort_vtbl;
struct IOFWLocalIsochPort;
struct IOFireWireBus_vtbl;
struct IOFireWireNub_vtbl;
struct IOFireWirePCRSpace;
struct IOFireWireROMCache;
struct IOFramebuffer_vtbl;
struct IOGatedOutputQueue;
struct IOHIDReportHandler;
struct IOHIDWorkLoop_vtbl;
struct IOHIKeyboardMapper;
struct IOMbufMemoryCursor;
struct IOMemoryDescriptor;
struct IONetworkData_vtbl;
struct IONetworkInterface;
struct IOOutputQueueStats;
struct IOOutputQueue_vtbl;
struct IOPMCalendarStruct;
struct IOPacketQueue_vtbl;
struct IOPixelInformation;
struct IORegistryIterator;
struct IOSerialDriverSync;
struct IOSerialStreamSync;
struct IOStreamUserClient;
struct IOTimerEventSource;
struct IOUSBBOSDescriptor;
struct IOUSBDFUDescriptor;
struct IOUSBHIDDescriptor;
struct IOUSBHIDReportDesc;
struct IOUSBHostInterface;
struct IOUSBHostPipe_vtbl;
struct IOUSBHubDescriptor;
struct IOVideoDevice_vtbl;
struct IOVideoStream_vtbl;
struct OSData_vtbl_layout;
struct OSKext_vtbl_layout;
struct UCInfo_vtbl_layout;
struct VDCommunicationRec;
struct VDConfigurationRec;
struct VDRetrieveGammaRec;
struct _AVCUnitPlugRecord;
struct _IOAudioSampleRate;
struct _IODataQueueMemory;
struct _IOServiceNotifier;
struct _NXTabletPointData;
struct __Reply__vm_copy_t;
struct __Reply__vm_read_t;
struct __Reply__vm_wire_t;
struct _dyld_cache_header;
struct accessx_descriptor;
struct build_tool_version;
struct ccrng_system_state;
struct cpuid_cache_desc_t;
struct cpuid_mwait_leaf_t;
struct cpuid_xsave_leaf_t;
struct data_in_code_entry;
struct dk_bd_report_key_t;
struct dk_firmware_path_t;
struct fbootstraptransfer;
struct host_cpu_load_info;
struct host_priority_info;
struct icmp6_router_renum;
struct inpcb64_list_entry;
struct ipc_info_tree_name;
struct kpc_running_remote;
struct mach_msg_trailer_t;
struct mach_port_info_ext;
struct mach_timebase_info;
struct mach_vm_read_entry;
struct macos_panic_header;
struct mcontext_avx512_32;
struct mcontext_avx512_64;
struct nd_neighbor_advert;
struct nd_opt_prefix_info;
struct ndrv_protocol_desc;
struct routine_descriptor;
struct segment_command_64;
struct stackshot_duration;
struct sub_client_command;
struct task_basic_info_32;
struct task_basic_info_64;
struct task_power_info_v2;
struct thread_snapshot_v2;
struct thread_snapshot_v3;
struct thread_snapshot_v4;
struct trust_cache_entry1;
struct user32_fsignatures;
struct vm_page_info_basic;
struct vm_region_top_info;
struct vnop_allocate_args;
struct vnop_blktooff_args;
struct vnop_blockmap_args;
struct vnop_copyfile_args;
struct vnop_exchange_args;
struct vnop_getxattr_args;
struct vnop_inactive_args;
struct vnop_offtoblk_args;
struct vnop_pathconf_args;
struct vnop_readlink_args;
struct vnop_searchfs_args;
struct vnop_setlabel_args;
struct vnop_setxattr_args;
struct vnop_strategy_args;
struct vnop_whiteout_args;
struct x86_avx512_state64;
struct x86_thread_state64;
struct ATADeviceNub_vtbl;
struct AsyncPendingTrans;
struct DCLCallProcStruct;
struct DriverDescription;
struct DriverServiceInfo;
struct FWSBP2StatusBlock;
struct GTraceBuffer_vtbl;
struct GTraceEntry__Args;
union HFSPlusAttrRecord;
struct HFSPlusCatalogKey;
struct HIDCollectionNode;
struct IOATABusCommand64;
struct IOATABusInfo_vtbl;
struct IOATACommand_vtbl;
struct IOATAIOReg16_vtbl;
struct IOATAIOReg32_vtbl;
struct IOAudioUserClient;
struct IOBDServices_vtbl;
struct IOBigMemoryCursor;
struct IOBluetoothDevice;
struct IOConfigDirectory;
struct IODCLProgram_vtbl;
struct IODMACommand_vtbl;
struct IOEthernetAddress;
struct IOFBHDRMetaDataV1;
struct IOFireWireAVCUnit;
struct IOFireWireSBP2LUN;
struct IOFireWireSBP2ORB;
struct IOFireWireUnitAux;
struct IOHIDElement_vtbl;
struct IOHIDEventService;
struct IOHIKeyboard_vtbl;
struct IOHIPointing_vtbl;
struct IOInterruptSource;
struct IOInterruptVector;
struct IONDRVFramebuffer;
struct IONVRAMController;
struct IONVRAMDescriptor;
union IOPCIAddressSpace;
struct IOPCIConfigurator;
struct IOPartitionScheme;
struct IOPowerConnection;
struct IORTC_vtbl_layout;
struct IOSharedDataQueue;
struct IOStateReportInfo;
struct IOUSBDevRequestTO;
struct IOUSBHostIOSource;
struct IOUSBKeyboardData;
struct IOUSBNotification;
struct IOUserClient_vtbl;
struct OSCollection_vtbl;
struct OSDictionary_vtbl;
struct OSOrderedSet_vtbl;
struct OSSerializer_vtbl;
struct OSSet_vtbl_layout;
struct OpaqueIOCommandID;
struct SCSIBlockCommands;
struct UASPipeDescriptor;
struct VDGetGammaListRec;
struct _IOAudioSMPTETime;
struct _IOAudioTimeStamp;
struct _IODataQueueEntry;
struct _NXEventExtension;
struct __Reply__vm_map_t;
struct __lck_mtx_ext_t__;
struct _ccmode_ccm_nonce;
struct _img4_environment;
struct boot_icon_element;
struct dk_cd_read_isrc_t;
struct dk_dvd_send_key_t;
struct dyld_info_command;
struct dyld_uuid_info_32;
struct dyld_uuid_info_64;
struct evioSpecialKeyMsg;
struct evsioMouseScaling;
struct i386_avx512_state;
struct i386_thread_state;
struct ifnet_init_params;
struct ifnet_stats_param;
struct io_stats_snapshot;
struct ip_linklocal_stat;
struct kauth_cache_sizes;
struct kev_dl_proto_data;
struct kev_in_arpfailure;
struct kpc_config_remote;
struct ledger_entry_info;
struct ledger_limit_args;
struct mach_core_details;
struct mach_msg_header_t;
struct mach_port_options;
struct mig_reply_error_t;
struct nd_opt_route_info;
struct nd_router_solicit;
struct pal_efi_registers;
struct policy_fifo_limit;
struct proc_persona_info;
struct rusage_info_child;
struct splitKextLinkInfo;
struct thread_basic_info;
struct ucred__posix_cred;
struct user32_fcodeblobs;
struct user32_ntptimeval;
struct user64_fcodeblobs;
struct user64_ntptimeval;
struct vm_info_region_64;
struct vm_purgeable_info;
struct vm_purgeable_stat;
struct vnop_advlock_args;
struct vnop_generic_args;
struct vnop_getattr_args;
struct vnop_pageout_args;
struct vnop_readdir_args;
struct vnop_reclaim_args;
struct vnop_renamex_args;
struct vnop_setattr_args;
struct vnop_symlink_args;
struct x86_debug_state32;
struct x86_debug_state64;
struct x86_float_state64;
struct AppleMacIODevice;
struct AppleUSBHostPort;
struct BTNodeDescriptor;
struct BluetoothPINCode;
struct CDTEXTDescriptor;
struct DCLCommandStruct;
struct DSPDoubleComplex;
struct DVDCopyrightInfo;
struct HFSCatalogFolder;
struct HFSCatalogThread;
struct HFSPlusExtentKey;
struct IOAGPDevice_vtbl;
struct IOATADevice_vtbl;
struct IOATAIOReg8_vtbl;
struct IOAudioPort_vtbl;
struct IOCatalogue_vtbl;
struct IODMAEventSource;
struct IODMAMapPageList;
struct IODataQueue_vtbl;
struct IODisplayConnect;
struct IODot3StatsEntry;
struct IOExternalMethod;
struct IOFBDPLinkConfig;
struct IOFWAddressSpace;
struct IOFWAsyncCommand;
struct IOFWCommand_vtbl;
struct IOFWDCLPool_vtbl;
struct IOFWDelayCommand;
struct IOFWIsochChannel;
struct IOFWQEventSource;
struct IOFWSendDCL_vtbl;
struct IOFWSkipCycleDCL;
struct IOFWWriteCommand;
struct IOFireWireAVCNub;
struct IOFireWireBusAux;
struct IOFireWireDevice;
struct IOFireWireNubAux;
struct IOGraphicsDevice;
struct IOHIDDevice_vtbl;
struct IOHIDEventDriver;
struct IOHIDSystem_vtbl;
struct IOHistReportInfo;
struct IOKernelDebugger;
struct IOKitDiagnostics;
struct IOMediaBSDClient;
struct IOMemoryMap_vtbl;
struct IOPCIBridge_vtbl;
struct IOPCIDevice_vtbl;
struct IOPCIEventSource;
struct IOPlatformDevice;
struct IOPlatformExpert;
struct IORangeAllocator;
struct IOReportInterest;
struct IOUSBBulkPipeReq;
struct IOUSBDevReqOOLTO;
struct JournalInfoBlock;
struct OSMetaClass_vtbl;
struct OSSerialize_vtbl;
struct VDSetEntryRecord;
struct _IORecursiveLock;
struct __IOFixedPoint32;
struct __SC_GenericBlob;
struct __lck_grp_attr__;
struct _img4_custom_tag;
struct ataRegisterImage;
struct cpuid_tsc_leaf_t;
struct crypto_functions;
struct dk_bd_send_key_t;
struct dk_cd_read_mcn_t;
struct dk_cd_read_toc_t;
struct dk_synchronize_t;
struct dylinker_command;
struct dysymtab_command;
struct group_source_req;
struct hash_info_bucket;
struct i386_float_state;
struct icmp6_namelookup;
struct ifnet_demux_desc;
struct in6_addrlifetime;
struct kev_in_collision;
struct kev_in_portinuse;
struct mach_memory_info;
union mach_msg_empty_t;
struct mach_port_limits;
struct mach_port_status;
struct nd_router_advert;
struct policy_fifo_base;
struct policy_fifo_info;
struct routines_command;
struct sadb_x_kmprivate;
struct security_token_t;
struct so_np_extensions;
struct sockaddr_storage;
struct task_events_info;
struct task_extmod_info;
struct task_snapshot_v2;
struct user32_itimerval;
struct user64_itimerval;
struct user_fsignatures;
struct utun_stats_param;
struct vnop_access_args;
struct vnop_bwrite_args;
struct vnop_create_args;
struct vnop_lookup_args;
struct vnop_mnomap_args;
struct vnop_pagein_args;
struct vnop_remove_args;
struct vnop_rename_args;
struct vnop_revoke_args;
struct vnop_select_args;
struct x86_avx512_state;
struct x86_cpmu_state64;
struct x86_thread_state;
struct AppleMacIO_vtbl;
struct CDPMADescriptor;
struct CDTOCDescriptor;
struct DSPSplitComplex;
struct DVDTitleKeyInfo;
struct DriverOSRuntime;
struct DriverOSService;
struct FWAddressStruct;
struct GTraceEntry__ID;
struct HFSPlusAttrData;
struct HFSPlusForkData;
struct HIDCapabilities;
struct HIDUsageAndPage;
struct IOATABusCommand;
struct IOATAController;
struct IOATAReg16_vtbl;
struct IOATAReg32_vtbl;
struct IOConditionLock;
struct IODCLTranslator;
struct IODMAController;
struct IODVDMedia_vtbl;
struct IODisplayPMVars;
struct IODot3CollEntry;
struct IOEthernetStats;
union IOFBHDRMetaData;
struct IOFWReadCommand;
struct IOFWSyncer_vtbl;
struct IOHIDCompletion;
struct IOHIDDeviceShim;
struct IOHIDEventQueue;
struct IOHIDevice_vtbl;
struct IONetworkMedium;
struct IONotifier_vtbl;
struct IOPCI2PCIBridge;
struct IOPMPowerSource;
struct IOPhysicalRange;
struct IOPwrController;
struct IORTCController;
struct IORegistryEntry;
struct IORegistryPlane;
struct IOReportChannel;
struct IOReportElement;
struct IOStorageExtent;
struct IOUSBCompletion;
struct IOUSBDevRequest;
struct IOUSBHostDevice;
struct IOUSBHostStream;
struct IOUSBIsocStruct;
struct IOWatchDogTimer;
struct IOWorkLoop_vtbl;
struct OSIterator_vtbl;
struct OSMetaClassBase;
struct OpaqueFFTSetupD;
struct SCSI_Sense_Data;
struct ScrollAccelInfo;
struct VDPowerStateRec;
struct VDScalerInfoRec;
struct VDSwitchInfoRec;
struct VDTimingInfoRec;
struct __CodeDirectory;
struct __OSMallocTag__;
struct _img4_interface;
struct aes_decrypt_ctx;
struct aes_encrypt_ctx;
struct au_expire_after;
struct auditpinfo_addr;
struct dylib_module_64;
struct dylib_reference;
struct evsioKeymapping;
struct ftrimactivefile;
struct fvmfile_command;
struct gpu_energy_data;
struct host_basic_info;
struct host_sched_info;
struct hv_trap_table_t;
struct i386_cpu_info_t;
struct icmp__ih_rtradv;
struct kev_in_arpalive;
struct kev_vendor_code;
struct kmod_info_32_v1;
struct kmod_info_64_v1;
struct kxld_dependency;
struct ledger_template;
struct mach_msg_base_t;
struct mach_msg_body_t;
struct ndrv_demux_desc;
struct opaque_ipfilter;
struct policy_rr_limit;
struct relocation_info;
struct rusage_superset;
struct sadb_session_id;
struct segment_command;
struct stateChangeNote;
struct sysctl_oid_list;
struct task_basic_info;
struct task_flags_info;
struct task_power_info;
struct task_qos_policy;
struct thread_snapshot;
struct timebase_freq_t;
struct user32_fchecklv;
struct user32_msqid_ds;
struct user32_timespec;
struct user32_vfsidctl;
struct user64_msqid_ds;
struct user64_timespec;
struct user_fcodeblobs;
struct vm_statistics64;
struct vnop_close_args;
struct vnop_fsync_args;
struct vnop_ioctl_args;
struct vnop_mkdir_args;
struct vnop_mknod_args;
struct vnop_rmdir_args;
struct vnop_write_args;
struct x86_avx_state64;
struct x86_debug_state;
struct x86_float_state;
struct ATAPICmdPacket;
struct AVCSubunitInfo;
struct DCLLabelStruct;
struct DCLNuDCLLeader;
struct DVDDiscKeyInfo;
struct DebugKeyAction;
struct EfiMemoryRange;
struct FndrOpaqueInfo;
struct HFSCatalogFile;
struct HFSPlusAttrKey;
struct HFSPlusBSDInfo;
struct IOATADevConfig;
struct IOATAReg8_vtbl;
struct IOAddressRange;
struct IOAudioControl;
struct IOBDMedia_vtbl;
struct IOCDMedia_vtbl;
struct IOCommand_vtbl;
struct IODTNVRAM_vtbl;
struct IODeviceMemory;
struct IODisplay_vtbl;
struct IOExternalTrap;
struct IOFBController;
struct IOFWBusCommand;
struct IOFWReceiveDCL;
struct IOFilterScheme;
struct IOFireWireLink;
struct IOFireWireUnit;
struct IOFixedPoint64;
struct IOGTraceBuffer;
struct IOHIDInterface;
struct IOI2CBusTiming;
struct IOI2CInterface;
struct IOMemoryCursor;
struct IONetworkStack;
struct IONetworkStats;
struct IOPMPowerState;
struct IOPMrootDomain;
struct IOService_vtbl;
struct IOStorage_vtbl;
struct IOStreamBuffer;
struct IOUSBDevReqOOL;
struct IOUSBHubStatus;
struct IOUSBInterface;
struct IOUSBIsocFrame;
struct IOUSBMouseData;
struct IOVirtualRange;
struct OSBoolean_vtbl;
struct OpaqueFFTSetup;
struct TransducerData;
struct VDGammaInfoRec;
struct __SC_SuperBlob;
struct __ifnet_filter;
struct __ipc_perm_old;
struct __lck_spin_t__;
struct __msqid_ds_new;
struct __msqid_ds_old;
struct __semid_ds_new;
struct __semid_ds_old;
struct __shmid_ds_new;
struct __shmid_ds_old;
struct au_evclass_map;
struct auditinfo_addr;
struct ccchacha20_ctx;
struct ccdigest_state;
struct ccpoly1305_ctx;
struct ccrsa_full_ctx;
struct ccrsa_priv_ctx;
struct ctl_event_data;
struct fvmlib_command;
struct gpu_descriptor;
struct hfs_mount_args;
struct host_load_info;
struct hv_callbacks_t;
struct i386_avx_state;
struct icmp6_nodeinfo;
struct icmp__ih_idseq;
struct ifs_iso_8802_3;
struct in6_addrpolicy;
struct internal_state;
struct ip6_opt_router;
struct ip6_opt_tunnel;
struct ip_mreq_source;
struct ipc_info_space;
struct kauth_acl_eval;
struct kauth_listener;
struct kern_event_msg;
struct kmod_reference;
struct lockgroup_info;
struct mach_header_64;
struct mach_zone_name;
struct mcontext_avx32;
struct mcontext_avx64;
struct micro_snapshot;
struct net_event_data;
struct network_port_t;
struct policy_rr_base;
struct policy_rr_info;
struct priority_queue;
struct rusage_info_v0;
struct rusage_info_v1;
struct rusage_info_v2;
struct rusage_info_v3;
struct rusage_info_v4;
struct sadb_supported;
struct sockaddr_inarp;
struct symseg_command;
struct symtab_command;
struct task_dyld_info;
struct thread_command;
struct tlv_descriptor;
struct uint128_data_t;
union union_vfsidctl;
struct user32_sf_hdtr;
struct user32_timeval;
struct user64_sf_hdtr;
struct user64_timeval;
struct vm_info_object;
struct vm_info_region;
struct vnop_link_args;
struct vnop_mmap_args;
struct vnop_open_args;
struct vnop_read_args;
struct AppleNMI_vtbl;
struct Block_byref_2;
struct Block_byref_3;
struct CDAudioStatus;
struct DCLJumpStruct;
struct ExpansionData;
struct HFSCatalogKey;
struct HIDButtonCaps;
union IOACPIAddress;
struct IOAccelBounds;
struct IOAccelerator;
struct IOAudioDevice;
struct IOAudioEngine;
struct IOAudioStream;
struct IOCommandGate;
struct IOCommandPool;
struct IODVDServices;
struct IOEventSource;
struct IOExtendedLBA;
struct IOFWCmdQ_vtbl;
struct IOFWIsochPort;
struct IOFireWireBus;
struct IOFireWireIRM;
struct IOFireWireNub;
struct IOFramebuffer;
struct IOHIDConsumer;
struct IOHIDKeyboard;
struct IOHIDPointing;
struct IOHIDWorkLoop;
struct IOMapper_vtbl;
struct IONetworkData;
struct IOOutputQueue;
struct IOPCIATA__PRD;
struct IOPCIATA_vtbl;
struct IOPacketQueue;
struct IOStream_vtbl;
struct IOUSBHostPipe;
struct IOUSBLog_vtbl;
struct IOVideoDevice;
struct IOVideoStream;
struct OSKextAccount;
struct OSNumber_vtbl;
struct OSObject_vtbl;
struct OSString_vtbl;
struct OSSymbol_vtbl;
struct OpaqueDTEntry;
struct VDDDCBlockRec;
struct VDEntryRecord;
struct VDGammaRecord;
struct VDSyncInfoRec;
struct _AVCUnitPlugs;
struct _IOBlitMemory;
struct _IOSimpleLock;
struct _NXEQElStruct;
struct __ifmultiaddr;
struct __lck_mtx_t__;
struct __msfilterreq;
union __sigaction_u;
struct _img4_payload;
struct attribute_set;
struct attrreference;
struct audit_token_t;
struct ccdigest_info;
struct ccrsa_pub_ctx;
struct componentname;
struct dk_set_tier_t;
struct dylib_command;
struct fssearchblock;
struct icmp__ih_pmtu;
struct ident_command;
struct igmp_grouprec;
struct in6_prefixreq;
struct in6_rrenumreq;
struct io_stat_entry;
struct ip6_opt_jumbo;
struct ipc_info_name;
struct kauth_filesec;
struct kev_d_vectors;
struct mach_port_qos;
struct mach_timespec;
struct mb_class_stat;
struct mig_subsystem;
struct nd_opt_rd_hdr;
struct ni_reply_fqdn;
struct persona_token;
struct policy_limits;
struct processor_set;
struct rpath_command;
struct rpc_signature;
struct rpc_subsystem;
struct rslvmulti_req;
struct sadb_lifetime;
struct sadb_spirange;
struct sadb_x_policy;
struct sockaddr_ndrv;
struct symmetric_xts;
struct task_snapshot;
struct twolevel_hint;
struct upl_page_info;
struct user32_rusage;
struct user64_rusage;
struct user_fchecklv;
struct user_msqid_ds;
struct user_timespec;
struct user_vfsidctl;
struct vm_read_entry;
struct vm_statistics;
struct vnode_fsparam;
struct vnodeopv_desc;
struct work_interval;
struct x86_avx_state;
struct x86_state_hdr;
struct zone_btrecord;
struct ATADeviceNub;
struct Block_layout;
struct BluetoothIRK;
struct BluetoothKey;
struct Boot_VideoV1;
struct DTSavedScope;
struct DVDRZoneInfo;
struct FndrFileInfo;
struct GTraceBuffer;
struct GTraceHeader;
struct HFSExtentKey;
struct HFSUniStr255;
struct HIDValueCaps;
struct IOATABusInfo;
struct IOATACommand;
struct IOATAIOReg16;
struct IOATAIOReg32;
struct IOBDServices;
struct IOColorEntry;
struct IODCLProgram;
struct IODMACommand;
struct IOFWDCL_vtbl;
struct IOFWNodeScan;
struct IOFWWorkLoop;
struct IOHIDElement;
struct IOHIKeyboard;
struct IOHIPointing;
struct IOI2CRequest;
struct IOMedia_vtbl;
struct IONamedValue;
struct IOPCIAERRoot;
struct IOStatistics;
union IOUSBHIDData;
struct IOUserClient;
struct KeyAttribute;
struct KeyValueMask;
struct LittleSInt16;
struct LittleSInt32;
struct LittleSInt64;
struct LittleUInt16;
struct LittleUInt32;
struct LittleUInt64;
struct NDR_record_t;
struct OSArray_vtbl;
struct OSCollection;
struct OSDictionary;
struct OSOrderedSet;
struct OSSerializer;
struct StdFBShmem_t;
struct UnsignedWide;
struct VDFlagRecord;
struct VDGrayRecord;
struct __SC_Scatter;
struct __lck_attr__;
struct __lck_rw_t__;
struct _img4_crypto;
struct bootp_packet;
struct ccdigest_ctx;
struct ccdrbg_state;
struct dk_cd_read_t;
struct dylib_module;
struct ether_header;
struct flocktimeout;
struct icmp6_filter;
struct icmp6_ifstat;
struct icmp6errstat;
struct icmp_ra_addr;
struct if_family_id;
struct ifma_msghdr2;
struct image_params;
struct in6_aliasreq;
struct in_addr_4in6;
struct io_stat_info;
struct ip6_moptions;
struct ip6_opt_nsap;
struct ip_timestamp;
struct kern_ctl_reg;
struct kev_in6_data;
struct kxld_context;
struct load_command;
struct msg_labels_t;
struct msqid_kernel;
struct nd_opt_dnssl;
struct nd_opt_nonce;
struct nd_opt_rdnss;
struct netfs_status;
struct note_command;
struct policy_bases;
struct policy_infos;
struct rr_pco_match;
struct sa_endpoints;
struct sadb_address;
struct sockaddr_ctl;
struct sockaddr_in6;
struct sockaddr_sys;
struct task_vm_info;
struct thread_group;
struct user32_timex;
struct user64_timex;
struct user_sf_hdtr;
struct user_termios;
struct user_timeval;
struct uuid_command;
struct vnodeop_desc;
struct AnchorTable;
struct BDTrackInfo;
struct BTHeaderRec;
struct Block_byref;
struct CDTrackInfo;
struct DVDDiscInfo;
struct DVDKey1Info;
struct DVDKey2Info;
struct FndrDirInfo;
struct GTraceEntry;
struct IOAGPDevice;
struct IOATADevice;
struct IOATAIOReg8;
struct IOAccelSize;
struct IOAudioPort;
struct IOCatalogue;
struct IODataQueue;
struct IOFWCommand;
struct IOFWDCLPool;
struct IOFWSendDCL;
struct IOHIDDevice;
struct IOHIDSystem;
struct IOI2CBuffer;
struct IOMbufQueue;
struct IOMemoryMap;
struct IOPCIBridge;
struct IOPCIDevice;
struct IOServicePM;
struct IOUSBDevice;
struct IOWorkQueue;
union NXEventData;
struct OSData_vtbl;
struct OSKext_vtbl;
struct OSMetaClass;
struct OSSerialize;
struct UCInfo_vtbl;
struct VDMirrorRec;
struct VDScalerRec;
struct _NXEventExt;
struct _VSLService;
struct __BlobIndex;
struct __lck_grp__;
union __mbstate_t;
struct __sigaction;
struct ataTaskFile;
struct atomic_flag;
struct au_tid_addr;
struct audit_fstat;
struct bpf_dltlist;
struct bpf_program;
struct bpf_version;
struct ccccm_nonce;
struct ccdrbg_info;
struct cckprng_ctx;
struct ccmode_cfb8;
struct ccmode_omac;
struct ccrng_state;
struct ccxts_tweak;
struct console_ops;
struct dk_extent_t;
struct evioLLEvent;
struct fsignatures;
struct gz_header_s;
struct icmp__id_ip;
struct icmp__id_ts;
struct if_clonereq;
struct ifma_msghdr;
struct igmp_report;
struct igmpstat_v3;
struct in6_pktinfo;
struct in6_prflags;
struct in_aliasreq;
struct inpcbpolicy;
struct ip6_mtuinfo;
struct ip6_pktopts;
struct ip_moptions;
struct ipc_voucher;
struct ipf_pktopts;
struct kauth_scope;
struct kcdata_item;
struct kcdata_iter;
struct kev_in_data;
struct kev_request;
struct ledger_info;
struct mach_header;
struct nd_redirect;
struct queue_entry;
struct rsa_pub_ctx;
struct rt_addrinfo;
struct sadb_sastat;
struct searchstate;
struct sflt_filter;
struct sigaltstack;
struct sockaddr_dl;
struct sockaddr_in;
struct sockaddr_un;
struct thread_call;
struct vDSP_uint24;
struct vfs_context;
struct vfs_fsentry;
struct AppleMacIO;
struct BDDiscInfo;
struct Boot_Video;
struct CDDiscInfo;
struct DSPComplex;
struct DriverType;
struct IOATAReg16;
struct IOATAReg32;
struct IODVDMedia;
struct IOFWSyncer;
struct IOHIDEvent;
struct IOHIDevice;
struct IONotifier;
struct IOPCIEvent;
struct IOPCIRange;
struct IORTC_vtbl;
struct IOUSBMatch;
struct IOWorkLoop;
struct MinorTable;
struct NumVersion;
struct OSIterator;
struct OSSet_vtbl;
struct RegEntryID;
struct SHA256_CTX;
struct SHA512_CTX;
struct VDPageInfo;
struct VDSettings;
struct VDSizeInfo;
struct __if_clone;
struct _evGlobals;
struct _evOffsets;
struct _notifyMsg;
struct applelabel;
struct au_session;
struct audit_stat;
struct auditpinfo;
struct cccfb8_ctx;
struct cccmac_ctx;
struct cchmac_ctx;
struct ccmode_cbc;
struct ccmode_ccm;
struct ccmode_cfb;
struct ccmode_ctr;
struct ccmode_ecb;
struct ccmode_gcm;
struct ccmode_ofb;
struct ccmode_siv;
struct ccmode_xts;
struct ccomac_ctx;
struct ccrc4_info;
struct diskextent;
struct dk_unmap_t;
struct ether_addr;
struct fat_header;
struct fdisk_part;
struct fp_control;
struct fpunchhole;
struct if_msghdr2;
struct ifa_msghdr;
struct ifaliasreq;
struct iff_filter;
struct in6_ifstat;
struct in_pktinfo;
struct ip6_rthdr0;
struct ipc_object;
struct ipf_filter;
struct kd_event_t;
struct kevent64_s;
struct kpc_driver;
struct mcontext32;
struct mcontext64;
struct mig_symtab;
struct nd_opt_hdr;
struct nd_opt_mtu;
struct ntptimeval;
struct opmask_reg;
struct posix_cred;
struct reg_values;
struct rr_pco_use;
struct rt_metrics;
struct rt_msghdr2;
struct sadb_ident;
struct sadb_x_sa2;
struct section_64;
struct sf_mapping;
struct sysctl_oid;
struct sysctl_req;
struct time_value;
struct ucontext64;
struct vDSP_int24;
struct vfs_server;
struct vnode_attr;
struct z_stream_s;
struct BigSInt16;
struct BigSInt32;
struct BigSInt64;
struct BigUInt16;
struct BigUInt32;
struct BigUInt64;
struct ColorSpec;
struct Expansion;
struct FWSegment;
struct IOATAReg8;
struct IOBDMedia;
struct IOCDMedia;
struct IOCommand;
struct IODTNVRAM;
struct IODisplay;
struct IOGBounds;
struct IOService;
struct IOStorage;
struct IOTVector;
struct MinorSlot;
struct OSBoolean;
struct OpaqueRef;
struct VDDefMode;
struct _IORWLock;
struct __bufattr;
struct __double2;
struct __rtentry;
struct __siginfo;
struct __sockopt;
struct auditinfo;
struct boot_args;
struct call_gate;
struct cccbc_ctx;
struct ccccm_ctx;
struct cccfb_ctx;
struct ccctr_ctx;
struct ccecb_ctx;
struct ccgcm_ctx;
struct ccofb_ctx;
struct ccrc4_ctx;
struct ccsiv_ctx;
struct ccxts_ctx;
struct clockinfo;
struct coalition;
struct code_desc;
struct data_desc;
struct disk_blk0;
struct ecc_event;
struct ether_arp;
struct fp_status;
union gdt_entry;
struct group_req;
struct icmp6_hdr;
struct icmp6stat;
union idt_entry;
struct if_data64;
struct if_msghdr;
struct ifmibdata;
struct in6_ifreq;
struct inpcbinfo;
struct inpcbport;
struct intr_gate;
struct ip6_rthdr;
struct ipc_space;
struct ipsecstat;
struct ipv6_mreq;
struct itimerval;
struct kauth_ace;
struct kauth_acl;
struct kmod_info;
union ldt_entry;
struct list_head;
struct mbuf_stat;
struct mt_thread;
struct nameidata;
struct os_refcnt;
struct os_refgrp;
struct processor;
struct radvisory;
struct rr_result;
struct rt_msghdr;
struct sadb_comb;
struct sadb_prop;
struct sadb_sens;
struct semaphore;
struct sha1_ctxt;
struct sigaction;
struct sockproto;
struct task_gate;
struct termios32;
struct timeval32;
struct timeval64;
struct trap_gate;
struct vfsioattr;
struct vfsstatfs;
struct xsocket64;
struct zone_info;
struct zone_name;
struct AppleNMI;
union BTreeKey;
struct GammaTbl;
struct IOFWCmdQ;
struct IOGPoint;
struct IOMapper;
struct IOPCIATA;
struct IOStream;
struct IOSyncer;
struct IOUSBLog;
struct OSNumber;
struct OSObject;
struct OSOffset;
struct OSString;
struct OSSymbol;
struct PE_Video;
struct PE_state;
struct RGBColor;
struct SCSITask;
struct _Element;
struct _NXEvent;
struct __float2;
struct __ifaddr;
struct __pkthdr;
struct __socket;
struct _filesec;
struct attrlist;
struct au_qctrl;
struct au_token;
struct bpf_insn;
struct bpf_stat;
struct cccbc_iv;
struct cpu_data;
struct ctl_info;
struct direntry;
union dt_entry;
struct eventreq;
struct fat_arch;
struct fchecklv;
struct frmrinfo;
struct fsobj_id;
struct icmpstat;
struct ifdevmtu;
struct igmpstat;
struct in6_addr;
struct ip6_dest;
struct ip6_frag;
struct ip_mreqn;
struct ipc_perm;
struct ipc_port;
struct ldt_desc;
struct lock_set;
struct locklist;
struct log2phys;
struct mmst_reg;
struct nextvend;
struct nlist_64;
struct np_uid_t;
struct os_log_s;
struct pseminfo;
struct pshminfo;
struct reg_desc;
struct rip6stat;
struct sadb_alg;
struct sadb_ext;
struct sadb_key;
struct sadb_msg;
struct sigstack;
struct sockaddr;
struct specinfo;
struct statfs64;
struct tcpiphdr;
struct timespec;
struct timezone;
struct tss_desc;
struct ttychars;
struct ucontext;
struct udpiphdr;
struct vfs_attr;
struct vfsidctl;
struct vfsquery;
struct vfstable;
struct xinpcb64;
struct xsockbuf;
struct HIDCaps;
struct IOFWDCL;
struct IOGSize;
struct IOMedia;
struct MD5_CTX;
struct OSArray;
struct RomScan;
struct VPBlock;
struct _IOLock;
struct __NuDCL;
struct __ifnet;
struct aes_ctx;
struct arpstat;
struct au_mask;
struct bpf_hdr;
struct cczp_hd;
struct cmsghdr;
struct ctlname;
struct esptail;
struct gpt_ent;
struct gpt_hdr;
struct if_data;
struct ifqueue;
struct in_addr;
struct ip6_ext;
struct ip6_hbh;
struct ip6_hdr;
struct ip6_opt;
struct ip_mreq;
struct ip_opts;
struct kev_msg;
struct ltchars;
struct mb_stat;
struct mld_hdr;
struct msginfo;
struct mt_task;
struct ntsid_t;
struct ombstat;
struct sadb_sa;
struct section;
struct selinfo;
struct sf_hdtr;
struct termios;
struct timeval;
struct ttysize;
struct udpstat;
union vBool32;
union vDouble;
union vSInt16;
union vSInt32;
union vSInt64;
union vUInt16;
union vUInt32;
union vUInt64;
struct vfsconf;
struct vmmeter;
struct vmspace;
struct vmtotal;
struct winsize;
struct xinpgen;
struct xmm_reg;
struct xsocket;
struct xunpgen;
struct ymm_reg;
struct zmm_reg;
struct Block0;
struct CDATIP;
struct CDTEXT;
struct IONDRV;
struct OSData;
struct OSKext;
struct UCInfo;
struct __mbuf;
struct arphdr;
struct arpreq;
struct au_tid;
struct bdevsw;
struct cdevsw;
struct dirent;
struct fd_set;
struct fstore;
struct fvmlib;
struct guid_t;
struct ifstat;
struct igmpv3;
struct ipcomp;
struct ipovly;
struct ipstat;
struct kevent;
union lc_str;
struct ledger;
struct linger;
struct mbstat;
struct msghdr;
struct msgmap;
struct mt_cpu;
struct newesp;
struct rlimit;
struct rtstat;
struct rusage;
struct sastat;
struct sembuf;
struct sgttyb;
union sigval;
struct sigvec;
struct so_nke;
struct socket;
struct stat64;
struct statfs;
struct tchars;
struct tcphdr;
struct thread;
struct udphdr;
union vFloat;
union vSInt8;
union vUInt8;
struct vfsops;
struct xinpcb;
struct xucred;
struct CDMSF;
struct CDPMA;
struct CDTOC;
struct DDMap;
struct IORTC;
struct OSSet;
struct _img4;
struct alarm;
struct bootp;
struct cc_ws;
struct clock;
struct dylib;
struct flock;
struct ifdrv;
struct ifkpi;
struct ifnet;
struct ifreq;
struct inpcb;
struct iovec;
struct knote;
struct label;
struct lockf;
struct mount;
struct mymsg;
struct newah;
struct nlist;
struct ostat;
union semun;
struct timex;
struct ucred;
struct vnode;
struct PRNG;
struct Rect;
struct U128;
struct _cr0;
struct cczp;
struct dpme;
struct file;
struct fsid;
struct host;
struct icmp;
struct igmp;
struct mbuf;
struct pgrp;
struct proc;
struct sbuf;
struct stat;
struct task;
struct vend;
union wait;
struct Key;
struct buf;
struct esp;
struct llc;
struct msg;
struct sel;
struct sem;
struct tss;
struct tty;
struct uio;
struct ah;
struct ip;

struct IOSCSIPeripheralDeviceType05__IOSCSIPeripheralDeviceType05ExpansionData {};
struct IOHIDEventDriver__ExpansionData___0694E93C84545D8044F2995499636A6A {OSArray *childElements;OSArray *primaryElements;OSArray *pendingEvents;};
struct IOHIDEventDriver__ExpansionData___2EF3FA813E4388E2CFC46412C7E8E87B {IOHIDElement *gestureStateElement;OSArray *legacyElements;OSArray *gesturesCandidates;};
struct IOHIDEventDriver__ExpansionData___89C8BF0AC86979B14408913F907190AD {IOHIDElement *reportInterval;IOHIDElement *reportLatency;IOHIDElement *sniffControl;};
struct IOHIDEventDriver__ExpansionData___B876227EC7A6E16B5B342210589B5E56 {OSArray *elements;char disabled;};
struct IOHIDEventDriver__ExpansionData___C339D0D406B24A17F9B2B6287492FA39 {OSArray *cmElements;OSArray *tiltElements;};
struct IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF {OSArray *elements;};
struct IOSCSIProtocolInterface__IOSCSIProtocolInterfaceExpansionData {IOWorkLoop *fWorkLoop;};
enum BluetoothL2CAPConfigurationRetransmissionAndFlowControlFlags {kBluetoothL2CAPConfigurationBasicL2CAPModeFlag = 0x0,kBluetoothL2CAPConfigurationRetransmissionModeFlag = 0x1,kBluetoothL2CAPConfigurationFlowControlModeFlag = 0x2,kBluetoothL2CAPConfigurationEnhancedRetransmissionMode = 0x3,kBluetoothL2CAPConfigurationStreamingMode = 0x4,};
enum MACRO_kBluetoothHCIEventMaskFlowSpecificationCompleteEvent {kBluetoothHCIEventMaskFlowSpecificationCompleteEvent = 0x100000000,kBluetoothHCIEventMaskInquiryResultWithRSSIEvent = 0x200000000,kBluetoothHCIEventMaskReadRemoteExtendedFeaturesCompleteEvent = 0x400000000,kBluetoothHCIEventMaskSynchronousConnectionCompleteEvent = 0x80000000000,kBluetoothHCIEventMaskSynchronousConnectionChangedEvent = 0x100000000000,kBluetoothHCIEventMaskSniffSubratingEvent = 0x200000000000,kBluetoothHCIEventMaskExtendedInquiryResultEvent = 0x400000000000,};
enum IOEthernetController__IOEthernetAVBIngressFilterType {IOEthernetAVBIngressFilterTypeDestinationMAC = 0x0,IOEthernetAVBIngressFilterTypeEtherTypeVLANTag = 0x1,IOEthernetAVBIngressFilterTypeUDPv4Port = 0x2,IOEthernetAVBIngressFilterTypeUDPv6Port = 0x3,IOEthernetAVBIngressFilterTypeIPv4Tuple = 0x4,IOEthernetAVBIngressFilterTypeIPv6Tuple = 0x5,IOEthernetAVBIngressFilterTypeMPLSLabel = 0x6,IOEthernetAVBIngressFilterTypeByteMatch = 0x7,IOEthernetAVBIngressFilterTypeCompound = 0x8,};
enum IOFireWireSerialBusProtocolTransport__SBP2LoginState {kFirstTimeLoggingInState = 0x0,kLogginSucceededState = 0x1,kLogginFailedState = 0x2,};
struct IOPCIAddressSpace___4F9D87D53F2F4789F1FC5701D66DF10F {unsigned int registerNum : 8;unsigned int functionNum : 3;unsigned int deviceNum : 5;unsigned int busNum : 8;unsigned int registerNumExtended : 4;unsigned int resv : 4;};
struct IOPCIAddressSpace___DB76E73CB46C23E6629E3D56B49010FE {unsigned int registerNum : 8;unsigned int functionNum : 3;unsigned int deviceNum : 5;unsigned int busNum : 8;unsigned int space : 2;unsigned int resv : 3;unsigned int t : 1;unsigned int prefetch : 1;unsigned int reloc : 1;};
enum MACRO_kBluetoothHCIEventMaskIOCapabilityRequestEvent {kBluetoothHCIEventMaskIOCapabilityRequestEvent = 0x1000000000000,kBluetoothHCIEventMaskIOCapabilityRequestReplyEvent = 0x2000000000000,kBluetoothHCIEventMaskUserConfirmationRequestEvent = 0x4000000000000,kBluetoothHCIEventMaskUserPasskeyRequestEvent = 0x8000000000000,kBluetoothHCIEventMaskRemoteOOBDataRequestEvent = 0x10000000000000,kBluetoothHCIEventMaskSimplePairingCompleteEvent = 0x20000000000000,kBluetoothHCIEvnetMaskLinkSupervisionTimeoutChangedEvent = 0x80000000000000,kBluetoothHCIEvnetMaskEnhancedFlushCompleteEvent = 0x100000000000000,kBluetoothHCIEventMaskUserPasskeyNotificationEvent = 0x400000000000000,kBluetoothHCIEventMaskKeypressNotificationEvent = 0x800000000000000,kBluetoothHCIEventMaskRemoteHostSupportedFeaturesNotificationEvent = 0x1000000000000000,kBluetoothHCIEventMaskLEMetaEvent = 0x2000000000000000,};
typedef void (*IOFWUserObjectExporter__CleanupFunctionWithExporter)( OSObject *, IOFWUserObjectExporter *);
enum BluetoothLESecurityManagerKeypressNotificationType {kBluetoothLESecurityManagerNotificationTypePasskeyEntryStarted = 0x0,kBluetoothLESecurityManagerNotificationTypePasskeyDigitEntered = 0x1,kBluetoothLESecurityManagerNotificationTypePasskeyDigitErased = 0x2,kBluetoothLESecurityManagerNotificationTypePasskeyCleared = 0x3,kBluetoothLESecurityManagerNotificationTypePasskeyEntryCompleted = 0x4,kBluetoothLESecurityManagerNotificationTypeReservedStart = 0x5,kBluetoothLESecurityManagerNotificationTypeReservedEnd = 0xFF,};
enum BluetoothLESecurityManagerPairingFailedReasonCode {kBluetoothLESecurityManagerReasonCodeReserved = 0x0,kBluetoothLESecurityManagerReasonCodePasskeyEntryFailed = 0x1,kBluetoothLESecurityManagerReasonCodeOOBNotAvailbale = 0x2,kBluetoothLESecurityManagerReasonCodeAuthenticationRequirements = 0x3,kBluetoothLESecurityManagerReasonCodeConfirmValueFailed = 0x4,kBluetoothLESecurityManagerReasonCodePairingNotSupported = 0x5,kBluetoothLESecurityManagerReasonCodeEncryptionKeySize = 0x6,kBluetoothLESecurityManagerReasonCodeCommandNotSupported = 0x7,kBluetoothLESecurityManagerReasonCodeUnspecifiedReason = 0x8,kBluetoothLESecurityManagerReasonCodeRepeatedAttempts = 0x9,kBluetoothLESecurityManagerReasonCodeInvalidParameters = 0xA,kBluetoothLESecurityManagerReasonCodeDHKeyCheckFailed = 0xB,kBluetoothLESecurityManagerReasonCodeNumericComparisonFailed = 0xC,kBluetoothLESecurityManagerReasonCodeBREDRPairingInProgress = 0xD,kBluetoothLESecurityManagerReasonCodeCrossTransportKeyDerivationGenerationNotAllowed = 0xE,kBluetoothLESecurityManagerReasonCodeReservedStart = 0xF,kBluetoothLESecurityManagerReasonCodeReservedEnd = 0xFF,};
enum MACRO_kBluetoothHCIEventMaskEncryptionChangeEvent {kBluetoothHCIEventMaskEncryptionChangeEvent = 0x80,kBluetoothHCIEventMaskEncryptionKeyRefreshCompleteEvent = 0x800000000000,kBluetoothHCIEventMaskLinkSupervisionTimeoutChangedEvent = 0x80000000000000,kBluetoothHCIEventMaskEnhancedFlushCompleteEvent = 0x100000000000000,};
enum BluetoothAMPDisconnectPhysicalLinkResponseStatus {kBluetoothAMPManagerDisconnectPhysicalLinkResponseSuccess = 0x0,kBluetoothAMPManagerDisconnectPhysicalLinkResponseInvalidControllerID = 0x1,kBluetoothAMPManagerDisconnectPhysicalLinkResponseNoPhysicalLink = 0x2,};
struct IOACPIAddress___D23480D2C05655CBB8386002CEAD6464 {unsigned int offset : 16;unsigned int function : 3;unsigned int device : 5;unsigned int bus : 8;unsigned int segment : 16;unsigned int reserved : 16;};
enum BluetoothLESecurityManagerKeyDistributionFormat {kBluetoothLESecurityManagerEncryptionKey = 0x1,kBluetoothLESecurityManagerIDKey = 0x2,kBluetoothLESecurityManagerSignKey = 0x4,kBluetoothLESecurityManagerLinkKey = 0x8,};
struct IOFireWireAVCAsynchronousCommand__ExpansionData {};
struct IOFireWireMultiIsochReceiveListener_vtbl_layout; 
enum BluetoothLESecurityManagerUserOutputCapability {kBluetoothLESecurityManagerUserOutputCapabilityNoOutput = 0x1,kBluetoothLESecurityManagerUserOutputCapabilityNumericOutput = 0x2,};
enum MACRO_kIOAudioEngineCurrentStatusStructVersion {kIOAudioEngineCurrentStatusStructVersion = 2,};
enum StandardUSB___0A6C3FB56AA75178526F91E0D4BBA8C3 {kPingResponseTimeNs = 0x190,};
enum StandardUSB___1362827322C3A8EEBAFF972E29C7DFAD {kSuperSpeedPlusDeviceCapabilitySublinkSpeedAttrCount = 0x1F,kSuperSpeedPlusDeviceCapabilitySublinkSpeedAttrCountPhase = 0x0,kSuperSpeedPlusDeviceCapabilitySublinkSpeedIdCount = 0x1E0,kSuperSpeedPlusDeviceCapabilitySublinkSpeedIdCountPhase = 0x5,kSuperSpeedPlusDeviceCapabilitySublinkMinSpeedId = 0xF,kSuperSpeedPlusDeviceCapabilitySublinkMinSpeedIdPhase = 0x0,kSuperSpeedPlusDeviceCapabilityReserved = 0xF0,kSuperSpeedPlusDeviceCapabilityReservedPhase = 0x4,kSuperSpeedPlusDeviceCapabilityMinRxLaneCount = 0xF00,kSuperSpeedPlusDeviceCapabilityMinRxLaneCountPhase = 0x8,kSuperSpeedPlusDeviceCapabilityMinTxLaneCount = 0xF000,kSuperSpeedPlusDeviceCapabilityMinTxLaneCountPhase = 0xC,kSuperSpeedPlusDeviceCapabilitySublinkSpeedId = 0xF,kSuperSpeedPlusDeviceCapabilitySublinkSpeedIdPhase = 0x0,kSuperSpeedPlusDeviceCapabilitySublinkLSE = 0x30,kSuperSpeedPlusDeviceCapabilitySublinkLSEPhase = 0x4,kSuperSpeedPlusDeviceCapabilitySublinkLSEBits = 0x0,kSuperSpeedPlusDeviceCapabilitySublinkLSEKbits = 0x10,kSuperSpeedPlusDeviceCapabilitySublinkLSEMbits = 0x20,kSuperSpeedPlusDeviceCapabilitySublinkLSEGbits = 0x30,kSuperSpeedPlusDeviceCapabilitySublinkType = 0xC0,kSuperSpeedPlusDeviceCapabilitySublinkTypePhase = 0x6,kSuperSpeedPlusDeviceCapabilitySublinkSymmetry = 0x40,kSuperSpeedPlusDeviceCapabilitySublinkSymmetryPhase = 0x6,kSuperSpeedPlusDeviceCapabilitySublinkSymmetric = 0x0,kSuperSpeedPlusDeviceCapabilitySublinkAsymmetric = 0x40,kSuperSpeedPlusDeviceCapabilitySublinkDirection = 0x80,kSuperSpeedPlusDeviceCapabilitySublinkDirectionPhase = 0x7,kSuperSpeedPlusDeviceCapabilitySublinkDirectionRx = 0x0,kSuperSpeedPlusDeviceCapabilitySublinkDirectionTx = 0x80,kSuperSpeedPlusDeviceCapabilitySublinkReserved = 0x3F00,kSuperSpeedPlusDeviceCapabilitySublinkReservedPhase = 0x8,kSuperSpeedPlusDeviceCapabilitySublinkProtocol = 0xC000,kSuperSpeedPlusDeviceCapabilitySublinkProtocolPhase = 0xE,kSuperSpeedPlusDeviceCapabilitySublinkSpeedMantissa = 0xFFFF0000,kSuperSpeedPlusDeviceCapabilitySublinkSpeedMantissaPhase = 0x10,};
enum StandardUSB___1DA974A42EDB5502393795E1AD14FC55 {kDeviceFeatureSelectorRemoteWakeup = 0x1,kDeviceFeatureSelectorTestMode = 0x2,kDeviceFeatureSelectorU1Enable = 0x30,kDeviceFeatureSelectorU2Enable = 0x31,kDeviceFeatureSelectorLTMEnable = 0x32,kInterfaceFeatureSelectorSuspend = 0x0,kEndpointFeatureSelectorStall = 0x0,};
enum StandardUSB___238B56A943C2C8483381459DF0EFA8D7 {kEndpointDescriptorNumber = 0xF,kEndpointDescriptorEndpointAddressReserved = 0x70,kEndpointDescriptorDirection = 0x80,kEndpointDescriptorDirectionPhase = 0x7,kEndpointDescriptorDirectionOut = 0x0,kEndpointDescriptorDirectionIn = 0x80,kEndpointDescriptorTransferType = 0x3,kEndpointDescriptorTransferTypePhase = 0x0,kEndpointDescriptorTransferTypeControl = 0x0,kEndpointDescriptorTransferTypeIsochronous = 0x1,kEndpointDescriptorTransferTypeBulk = 0x2,kEndpointDescriptorTransferTypeInterrupt = 0x3,kEndpointDescriptorSynchronizationType = 0xC,kEndpointDescriptorSynchronizationTypeNone = 0x0,kEndpointDescriptorSynchronizationTypeAsynchronous = 0x4,kEndpointDescriptorSynchronizationTypeAdaptive = 0x8,kEndpointDescriptorSynchronizationTypeSynchronous = 0xC,kEndpointDescriptorUsageType = 0x30,kEndpointDescriptorUsageTypeInterruptPeriodic = 0x0,kEndpointDescriptorUsageTypeInterruptNotification = 0x10,kEndpointDescriptorUsageTypeInterruptReserved1 = 0x20,kEndpointDescriptorUsageTypeInterruptReserved2 = 0x30,kEndpointDescriptorUsageTypeIsocData = 0x0,kEndpointDescriptorUsageTypeIsocFeedback = 0x10,kEndpointDescriptorUsageTypeIsocImplicit = 0x20,kEndpointDescriptorUsageTypeIsocReserved = 0x30,kEndpointDescriptorPacketSize = 0x7FF,kEndpointDescriptorPacketSizePhase = 0x0,kEndpointDescriptorPacketSizeMult = 0x1800,kEndpointDescriptorPacketSizeMultPhase = 0xB,kEndpointDescriptorReserved = 0xE000,kEndpointDescriptorReservedPhase = 0xD,};
enum StandardUSB___2E1B19A7171995E7FA2FB423E4E69A16 {kDeviceStatusSelfPowered = 0x1,kDeviceStatusRemoteWakeEnable = 0x2,kDeviceStatusU1Enable = 0x4,kDeviceStatusU2Enable = 0x8,kDeviceStatusLTMEnable = 0x10,kInterfaceStatusRemoteWakeCapable = 0x1,kInterfaceStatusRemoteWakeEnable = 0x2,kEndpointStatusHalt = 0x1,};
enum StandardUSB___467B5DC58CD787AE268BC41BAEE4437B {kConfigurationDescriptorAttributeRemoteWakeCapable = 0x20,kConfigurationDescriptorAttributeSelfPowered = 0x40,};
enum StandardUSB___6B9D5034B8E1C74B3263A443A39ECE8E {kSuperSpeedEndpointCompanionDescriptorMaxBurst = 0x1F,kSuperSpeedEndpointCompanionDescriptorMaxBurstPhase = 0x0,kSuperSpeedEndpointCompanionDescriptorBulkMaxStreams = 0x1F,kSuperSpeedEndpointCompanionDescriptorBulkMaxStreamsPhase = 0x0,kSuperSpeedEndpointCompanionDescriptorBulkReserved = 0xE0,kSuperSpeedEndpointCompanionDescriptorBulkReservedPhase = 0x5,kSuperSpeedEndpointCompanionDescriptorIsocMult = 0x3,kSuperSpeedEndpointCompanionDescriptorIsocMultPhase = 0x0,kSuperSpeedEndpointCompanionDescriptorIsocReserved = 0x7C,kSuperSpeedEndpointCompanionDescriptorIsocReservedPhase = 0x2,kSuperSpeedEndpointCompanionDescriptorSSPIsocCompanion = 0x80,};
enum StandardUSB___73BAB748E5109974EF82D6ABFAF48FA1 {kSuperSpeedHubCharacteristicsPowerSwitchingMask = 0x3,kSuperSpeedHubCharacteristicsPowerSwitchingGanged = 0x0,kSuperSpeedHubCharacteristicsPowerSwitchingIndividual = 0x1,kSuperSpeedHubCharacteristicsCompoundDevice = 0x4,kSuperSpeedHubCharacteristicsOverCurrentMask = 0x18,kSuperSpeedHubCharacteristicsOverCurrentGlobal = 0x0,kSuperSpeedHubCharacteristicsOverCurrentIndividual = 0x8,kSuperSpeedHubCharacteristicsReserved = 0xFFE0,kSuperSpeedHubDecodeLatencyMax = 0xA,kSuperSpeedHubDelayMax = 0x190,};
enum StandardUSB___849B532473AC9B78848598CB63307244 {kDeviceRequestSize = 0x8,kDeviceRequestDirectionMask = 0x80,kDeviceRequestDirectionPhase = 0x7,kDeviceRequestDirectionOut = 0x0,kDeviceRequestDirectionIn = 0x80,kDeviceRequestTypeMask = 0x60,kDeviceRequestTypePhase = 0x5,kDeviceRequestTypeStandard = 0x0,kDeviceRequestTypeClass = 0x20,kDeviceRequestTypeVendor = 0x40,kDeviceRequestRecipientMask = 0x1F,kDeviceRequestRecipientPhase = 0x0,kDeviceRequestRecipientDevice = 0x0,kDeviceRequestRecipientInterface = 0x1,kDeviceRequestRecipientEndpoint = 0x2,kDeviceRequestRecipientOther = 0x3,};
enum StandardUSB___C86E6DAAEECD1D93E9A1C30744F11EB7 {kHubPort2PortExitLatencyNs = 0x3E8,kHubDelayNs = 0x190,};
enum StandardUSB___C8F8FBB54FD948B789DCE14F72EE9735 {kDeviceRequestGetStatus = 0x0,kDeviceRequestClearFeature = 0x1,kDeviceRequestGetState = 0x2,kDeviceRequestSetFeature = 0x3,kDeviceRequestSetAddress = 0x5,kDeviceRequestGetDescriptor = 0x6,kDeviceRequestSetDescriptor = 0x7,kDeviceRequestGetConfiguration = 0x8,kDeviceRequestSetConfiguration = 0x9,kDeviceRequestGetInterface = 0xA,kDeviceRequestSetInterface = 0xB,kDeviceRequestSynchFrame = 0xC,kDeviceRequestSetSel = 0x30,kDeviceRequestSetIsochronousDelay = 0x31,};
enum StandardUSB___CC88F4C0D39B15ACBF4FC4927E68BD8F {kUSB20ExtensionCapabilityLPM = 0x2,kUSB20ExtensionCapabilityBESLSupport = 0x4,kUSB20ExtensionCapabilityBESLValid = 0x8,kUSB20ExtensionCapabilityBESLDValid = 0x10,kUSB20ExtensionCapabilityBESL = 0xF00,kUSB20ExtensionCapabilityBESLPhase = 0x8,kUSB20ExtensionCapabilityBESLD = 0xF000,kUSB20ExtensionCapabilityBESLDPhase = 0xC,};
enum StandardUSB___DD11B06CA6589E7D8B917608439DC23B {kSuperSpeedDeviceCapabilityLTM = 0x2,kSuperSpeedDeviceCapabilityLowSpeed = 0x1,kSuperSpeedDeviceCapabilityFullSpeed = 0x2,kSuperSpeedDeviceCapabilityHighSpeed = 0x4,kSuperSpeedDeviceCapability5Gb = 0x8,kSuperSpeedDeviceCapabilitySupportLowSpeed = 0x0,kSuperSpeedDeviceCapabilitySupportFullSpeed = 0x1,kSuperSpeedDeviceCapabilitySupportHighSpeed = 0x2,kSuperSpeedDeviceCapabilitySupport5Gb = 0x3,kSuperSpeedDeviceCapabilityU1DevExitLatMax = 0xA,kSuperSpeedDeviceCapabilityU2DevExitLatMax = 0x7FF,};
enum StandardUSB___F6525B9A2FE61802D4A9C23F4F5FA4F0 {kInterfaceSuspendLowPower = 0x1,kInterfaceSuspendRemoteWakeEnable = 0x2,};
enum BluetoothL2CAPInformationExtendedFeaturesMask {kBluetoothL2CAPInformationNoExtendedFeatures = 0x0,kBluetoothL2CAPInformationFlowControlMode = 0x1,kBluetoothL2CAPInformationRetransmissionMode = 0x2,kBluetoothL2CAPInformationBidirectionalQoS = 0x4,kBluetoothL2CAPInformationEnhancedRetransmissionMode = 0x8,kBluetoothL2CAPInformationStreamingMode = 0x10,kBluetoothL2CAPInformationFCSOption = 0x20,kBluetoothL2CAPInformationExtendedFlowSpecification = 0x40,kBluetoothL2CAPInformationFixedChannels = 0x80,kBluetoothL2CAPInformationExtendedWindowSize = 0x100,kBluetoothL2CAPUnicastConnectionlessDataReception = 0x200,};
enum BluetoothLESecurityManagerUserInputCapability {kBluetoothLESecurityManagerUserInputCapabilityNoInput = 0x1,kBluetoothLESecurityManagerUserInputCapabilityYesNo = 0x2,kBluetoothLESecurityManagerUserInputCapabilityKeyboard = 0x3,};
struct IOFireWireMultiIsochReceivePacket_vtbl_layout; 
typedef IOUSBSuperSpeedEndpointCompanionDescriptor *IOUSBSuperSpeedEndpointCompanionDescriptorPtr;
enum MACRO_IODIRECTIONCOMPLETEWITHDATAVALIDDEFINED {IODIRECTIONCOMPLETEWITHDATAVALIDDEFINED = 1,};
enum MACRO_kIOPropertySCSIPeripheralDeviceTypeSize {kIOPropertySCSIPeripheralDeviceTypeSize = 8,};
struct sysctl_oid___BF306FC4453E1DFFB4E5D662FA87221D {sysctl_oid *sle_next;};
enum BluetoothAMPCreatePhysicalLinkResponseStatus {kBluetoothAMPManagerCreatePhysicalLinkResponseSuccess = 0x0,kBluetoothAMPManagerCreatePhysicalLinkResponseInvalidControllerID = 0x1,kBluetoothAMPManagerCreatePhysicalLinkResponseUnableToStartLinkCreation = 0x2,kBluetoothAMPManagerCreatePhysicalLinkResponseCollisionOccurred = 0x3,kBluetoothAMPManagerCreatePhysicalLinkResponseAMPDisconnectedPhysicalLinkRequestReceived = 0x4,kBluetoothAMPManagerCreatePhysicalLinkResponsePhysicalLinkAlreadyExists = 0x5,kBluetoothAMPManagerCreatePhysicalLinkResponseSecurityViolation = 0x6,};
enum BluetoothAMPDiscoverResponseControllerStatus {kBluetoothAMPManagerDiscoverResponseControllerStatusPoweredDown = 0x0,kBluetoothAMPManagerDiscoverResponseControllerStatusBluetoothOnly = 0x1,kBluetoothAMPManagerDiscoverResponseControllerStatusNoCapacity = 0x2,kBluetoothAMPManagerDiscoverResponseControllerStatusLowCapacity = 0x3,kBluetoothAMPManagerDiscoverResponseControllerStatusMediumCapacity = 0x4,kBluetoothAMPManagerDiscoverResponseControllerStatusHighCapacity = 0x5,kBluetoothAMPManagerDiscoverResponseControllerStatusFullCapacity = 0x6,};
enum BluetoothHCIExtendedInquiryResponseDataTypes {kBluetoothHCIExtendedInquiryResponseDataTypeFlags = 0x1,kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsWithMoreAvailable = 0x2,kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsCompleteList = 0x3,kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsWithMoreAvailable = 0x4,kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsCompleteList = 0x5,kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsWithMoreAvailable = 0x6,kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsCompleteList = 0x7,kBluetoothHCIExtendedInquiryResponseDataTypeShortenedLocalName = 0x8,kBluetoothHCIExtendedInquiryResponseDataTypeCompleteLocalName = 0x9,kBluetoothHCIExtendedInquiryResponseDataTypeTransmitPowerLevel = 0xA,kBluetoothHCIExtendedInquiryResponseDataTypeSSPOOBClassOfDevice = 0xD,kBluetoothHCIExtendedInquiryResponseDataTypeSSPOOBSimplePairingHashC = 0xE,kBluetoothHCIExtendedInquiryResponseDataTypeSSPOOBSimplePairingRandomizerR = 0xF,kBluetoothHCIExtendedInquiryResponseDataTypeDeviceID = 0x10,kBluetoothHCIExtendedInquiryResponseDataTypeSecurityManagerTKValue = 0x10,kBluetoothHCIExtendedInquiryResponseDataTypeSecurityManagerOOBFlags = 0x11,kBluetoothHCIExtendedInquiryResponseDataTypeSlaveConnectionIntervalRange = 0x12,kBluetoothHCIExtendedInquiryResponseDataTypeServiceSolicitation16BitUUIDs = 0x14,kBluetoothHCIExtendedInquiryResponseDataTypeServiceSolicitation128BitUUIDs = 0x15,kBluetoothHCIExtendedInquiryResponseDataTypeServiceData = 0x16,kBluetoothHCIExtendedInquiryResponseDataTypePublicTargetAddress = 0x17,kBluetoothHCIExtendedInquiryResponseDataTypeRandomTargetAddress = 0x18,kBluetoothHCIExtendedInquiryResponseDataTypeAppearance = 0x19,kBluetoothHCIExtendedInquiryResponseDataTypeAdvertisingInterval = 0x1A,kBluetoothHCIExtendedInquiryResponseDataTypeLEBluetoothDeviceAddress = 0x1B,kBluetoothHCIExtendedInquiryResponseDataTypeLERole = 0x1C,kBluetoothHCIExtendedInquiryResponseDataTypeSimplePairingHash = 0x1D,kBluetoothHCIExtendedInquiryResponseDataTypeSimplePairingRandomizer = 0x1E,kBluetoothHCIExtendedInquiryResponseDataTypeServiceSolicitation32BitUUIDs = 0x1F,kBluetoothHCIExtendedInquiryResponseDataTypeServiceData32BitUUID = 0x20,kBluetoothHCIExtendedInquiryResponseDataTypeServiceData128BitUUID = 0x21,kBluetoothHCIExtendedInquiryResponseDataTypeSecureConnectionsConfirmationValue = 0x22,kBluetoothHCIExtendedInquiryResponseDataTypeSecureConnectionsRandomValue = 0x23,kBluetoothHCIExtendedInquiryResponseDataTypeURI = 0x24,kBluetoothHCIExtendedInquiryResponseDataTypeIndoorPositioning = 0x25,kBluetoothHCIExtendedInquiryResponseDataTypeTransportDiscoveryData = 0x26,kBluetoothHCIExtendedInquiryResponseDataType3DInformationData = 0x3D,kBluetoothHCIExtendedInquiryResponseDataTypeManufacturerSpecificData = 0xFF,};
struct IOFireWireAVCAsynchronousCommand_vtbl_layout; 
enum IOUSBHostPipe__tGetEndpointDescriptorOptions {kGetEndpointDescriptorOriginal = 0x0,kGetEndpointDescriptorCurrentPolicy = 0x1,};
typedef void (*IOEthernetController__avb_packet_callback_t)(void *, IOEthernetController__IOEthernetAVBPacket *);
struct IOFilterInterruptEventSource__ExpansionData {};
enum MACRO_kBluetoothHCIInquiryResultsMaxResults {kBluetoothHCIInquiryResultsMaxResults = 50,};
enum IOFWAVCProtocolUserClientAsyncCommandCodes {kIOFWAVCProtocolUserClientSetAVCRequestCallback = 0x12,kIOFWAVCProtocolUserClientAllocateInputPlug = 0x13,kIOFWAVCProtocolUserClientAllocateOutputPlug = 0x14,kIOFWAVCProtocolUserClientInstallAVCCommandHandler = 0x15,kIOFWAVCProtocolUserClientAddSubunit = 0x16,kIOFWAVCProtocolUserClientNumAsyncCommands = 0x17,};
struct IOFWCompareAndSwapCommand__MemberVariables {IOMemoryDescriptor *fMemory;};
struct IOFWPhysicalAddressSpaceAux__ExpansionData {};
struct IOFireWireController__pendingQ_vtbl_layout; 
struct IOFireWireController__timeoutQ_vtbl_layout; 
struct IOFireWireSBP2ManagementORB__ExpansionData {char fInCriticalSection;};
struct IOSharedInterruptController__ExpansionData {};
typedef IOUSBDeviceCapabilityBillboardAltConfig *IOUSBDeviceCapabilityBillboardAltConfigPtr;
enum MACRO_IODIRECTIONPREPARENONCOHERENTDEFINED {IODIRECTIONPREPARENONCOHERENTDEFINED = 1,};
enum MACRO_kBluetoothHCIEventMaskLEDefault64Bit {kBluetoothHCIEventMaskLEDefault64Bit = 0x1F,};
enum MACRO_kMaxRangesPerMultiIsochReceivePacket {kMaxRangesPerMultiIsochReceivePacket = 6,};
typedef GTraceBuffer *iog__OSSharedObject_GTraceBuffer___pointer;
enum BluetoothAuthenticationRequirementsValues {kBluetoothAuthenticationRequirementsMITMProtectionNotRequired = 0x0,kBluetoothAuthenticationRequirementsMITMProtectionRequired = 0x1,kBluetoothAuthenticationRequirementsMITMProtectionNotRequiredNoBonding = 0x0,kBluetoothAuthenticationRequirementsMITMProtectionRequiredNoBonding = 0x1,kBluetoothAuthenticationRequirementsMITMProtectionNotRequiredDedicatedBonding = 0x2,kBluetoothAuthenticationRequirementsMITMProtectionRequiredDedicatedBonding = 0x3,kBluetoothAuthenticationRequirementsMITMProtectionNotRequiredGeneralBonding = 0x4,kBluetoothAuthenticationRequirementsMITMProtectionRequiredGeneralBonding = 0x5,};
struct IODVDServices__IODVDServicesExpansionData {};
struct IOEthernetController__IOECTSCallbackEntry;
typedef void *IOFilterInterruptEventSource__FilterBlock;
typedef void *IOServiceMatchingNotificationHandlerBlock;
enum MACRO_IODIRECTIONCOMPLETEWITHERRORDEFINED {IODIRECTIONCOMPLETEWITHERRORDEFINED = 1,};
enum MACRO_kAsyncCmdSharedBufInterimRespOffset {kAsyncCmdSharedBufInterimRespOffset = 0,kAsyncCmdSharedBufFinalRespOffset = 512,};
enum MACRO_kBluetoothLESMPMinEncryptionKeySize {kBluetoothLESMPMinEncryptionKeySize = 7,kBluetoothLESMPMaxEncryptionKeySize = 16,kInfoStringMaxLength = 35,};
enum MACRO_kStreamDataDescriptorInvalidVersion {kStreamDataDescriptorInvalidVersion = 0,kStreamDataDescriptorCurrentVersion = 1,kIOAudioControlNumCalls = 2,};
struct OSKext___B04BEE30912BD7DFABC6ADC0D9AC5577 {unsigned int loggingEnabled : 1;unsigned int hasAllDependencies : 1;unsigned int hasBleedthrough : 1;unsigned int interface : 1;unsigned int kernelComponent : 1;unsigned int prelinked : 1;unsigned int builtin : 1;unsigned int loaded : 1;unsigned int dtraceInitialized : 1;unsigned int starting : 1;unsigned int started : 1;unsigned int stopping : 1;unsigned int unloading : 1;unsigned int autounloadEnabled : 1;unsigned int delayAutounload : 1;unsigned int CPPInitialized : 1;unsigned int jettisonLinkeditSeg : 1;};
struct IOAudioTimeIntervalFilter__ExpansionData {};
typedef void (*IOFireWireAVCAsynchronousCommandCallback)(void *, IOFireWireAVCAsynchronousCommand *);
struct IOFireWireMultiIsochReceiveListener_vtbl; 
typedef IOUSBDeviceCapabilityBillboardAltMode *IOUSBDeviceCapabilityBillboardAltModePtr;
typedef IOUSBDeviceCapabilityDescriptorHeader *IOUSBDeviceCapabilityDescriptorHeaderPtr;
enum MACRO_kBluetoothHCIEventMaskDefault64Bit {kBluetoothHCIEventMaskDefault64Bit = 0x1FFFFFFFFFFF,};
struct inpcb___0DE50EA4AC06AB542A6702F62E772B7B {inpcb *le_next;inpcb **le_prev;};
struct lockf___33687FB5F797F8E3093244FBEFE29298 {lockf *tqe_next;lockf **tqe_prev;};
struct ucred___4023DC22796BF9904C7BAB93B96A6B26 {ucred *tqe_next;ucred **tqe_prev;};
enum BluetoothHCITransmitReadPowerLevelTypes {kReadCurrentTransmitPowerLevel = 0x0,kReadMaximumTransmitPowerLevel = 0x1,};
enum BluetoothL2CAPSegmentationAndReassembly {kBluetoothL2CAPSegmentationAndReassemblyUnsegmentedSDU = 0x0,kBluetoothL2CAPSegmentationAndReassemblyStartOfSDU = 0x1,kBluetoothL2CAPSegmentationAndReassemblyEndOfSDU = 0x2,kBluetoothL2CAPSegmentationAndReassemblyContinuationOfSDU = 0x3,};
struct IOAudioControlUserClient__ExpansionData {};
struct IOBDServices__IOBDServicesExpansionData {};
struct IOBufferMemoryDescriptor__ExpansionData {IOMemoryMap *map;};
struct IOFWAsyncStreamCommand__MemberVariables {};
typedef void (*IOFWUserObjectExporter__CleanupFunction)( OSObject *);
struct IOFireWireAVCTargetSpace__ExpansionData {};
struct IOFireWireDuplicateGUIDList_vtbl_layout; 
struct wait___7577FAE843D32618A04985FDB883FD87 {unsigned int w_Termsig : 7;unsigned int w_Coredump : 1;unsigned int w_Retcode : 8;unsigned int w_Filler : 16;};
struct wait___D2BE3D1E9784782BB73F97C8AEDA900E {unsigned int w_Stopval : 8;unsigned int w_Stopsig : 8;unsigned int w_Filler : 16;};
enum BluetoothLESecurityManagerIOCapability {kBluetoothLESecurityManagerIOCapabilityDisplayOnly = 0x0,kBluetoothLESecurityManagerIOCapabilityDisplayYesNo = 0x1,kBluetoothLESecurityManagerIOCapabilityKeyboardOnly = 0x2,kBluetoothLESecurityManagerIOCapabilityNoInputNoOutput = 0x3,kBluetoothLESecurityManagerIOCapabilityKeyboardDisplay = 0x4,kBluetoothLESecurityManagerIOCapabilityReservedStart = 0x5,kBluetoothLESecurityManagerIOCapabilityReservedEnd = 0xFF,};
enum IOAudioControl__ValueChangeHandlerType {kIntValueChangeHandler = 0x0,kDataValueChangeHandler = 0x1,kObjectValueChangeHandler = 0x2,};
struct IODVDBlockStorageDevice__ExpansionData {};
struct IODVDBlockStorageDriver__ExpansionData {};
enum IOEthernetControllerAVBTimeSyncSupport {kIOEthernetControllerAVBTimeSyncSupportNone = 0x0,kIOEthernetControllerAVBTimeSyncSupportHardware = 0x1,kIOEthernetControllerAVBTimeSyncSupportInterrupt = 0x2,kIOEthernetControllerAVBTimeSyncSupportSoftware = 0x3,};
struct IOFireWireControllerAux__ExpansionData {};
struct IOFireWireIRMAllocation__ExpansionData {};
struct IOFireWireMultiIsochReceivePacket_vtbl; 
typedef IOUSBInterfaceAssociationDescriptor *IOUSBInterfaceAssociationDescriptorPtr;
enum MACRO_kCurrentGraphicsInterfaceVersion {kCurrentGraphicsInterfaceVersion = 1,kCurrentGraphicsInterfaceRevision = 2,LLEQSIZE = 240,};
enum MACRO_kIOHIDLastCompatibleShmemVersion {kIOHIDLastCompatibleShmemVersion = 3,};
enum MACRO_kIOPMMessageSleepWakeUUIDCleared {kIOPMMessageSleepWakeUUIDCleared = 0,};
enum SDPAttributeDeviceIdentificationRecord {kBluetoothSDPAttributeDeviceIdentifierServiceDescription = 0x1,kBluetoothSDPAttributeDeviceIdentifierDocumentationURL = 0xA,kBluetoothSDPAttributeDeviceIdentifierClientExecutableURL = 0xB,kBluetoothSDPAttributeDeviceIdentifierSpecificationID = 0x200,kBluetoothSDPAttributeDeviceIdentifierVendorID = 0x201,kBluetoothSDPAttributeDeviceIdentifierProductID = 0x202,kBluetoothSDPAttributeDeviceIdentifierVersion = 0x203,kBluetoothSDPAttributeDeviceIdentifierPrimaryRecord = 0x204,kBluetoothSDPAttributeDeviceIdentifierVendorIDSource = 0x205,kBluetoothSDPAttributeDeviceIdentifierReservedRangeStart = 0x206,kBluetoothSDPAttributeDeviceIdentifierReservedRangeEnd = 0x2FF,};
enum StandardUSB30__tDeviceNotificationType {kDeviceNotificationTypeFunctionWake = 0x1,kDeviceNotificationTypeLatencyTolerance = 0x2,kDeviceNotificationTypeBusIntervalAdjustment = 0x3,kDeviceNotificationTypeHostRoleRequest = 0x4,kDeviceNotificationTypeSublinkSpeed = 0x5,};
enum BluetoothHCIAFHChannelAssessmentModes {kAFHChannelAssessmentModeDisabled = 0x0,kAFHChannelAssessmentModeEnabled = 0x1,};
enum BluetoothHCIRetransmissionEffortTypes {kHCIRetransmissionEffortTypeNone = 0x0,kHCIRetransmissionEffortTypeAtLeastOneAndOptimizeForPower = 0x1,kHCIRetransmissionEffortTypeAtLeastOneAndOptimizeLinkQuality = 0x2,kHCIRetransmissionEffortTypeDontCare = 0xFF,};
enum BluetoothLESecurityManagerCommandCode {kBluetoothLESecurityManagerCommandCodeReserved = 0x0,kBluetoothLESecurityManagerCommandCodePairingRequest = 0x1,kBluetoothLESecurityManagerCommandCodePairingResponse = 0x2,kBluetoothLESecurityManagerCommandCodePairingConfirm = 0x3,kBluetoothLESecurityManagerCommandCodePairingRandom = 0x4,kBluetoothLESecurityManagerCommandCodePairingFailed = 0x5,kBluetoothLESecurityManagerCommandCodeEncryptionInfo = 0x6,kBluetoothLESecurityManagerCommandCodeMasterIdentification = 0x7,kBluetoothLESecurityManagerCommandCodeIdentityInfo = 0x8,kBluetoothLESecurityManagerCommandCodeIdentityAddressInfo = 0x9,kBluetoothLESecurityManagerCommandCodeSigningInfo = 0xA,kBluetoothLESecurityManagerCommandCodeSecurityRequest = 0xB,kBluetoothLESecurityManagerCommandCodePairingPublicKey = 0xC,kBluetoothLESecurityManagerCommandCodePairingDHKeyCheck = 0xD,kBluetoothLESecurityManagerCommandCodePairingKeypressNotification = 0xE,kBluetoothLESecurityManagerCommandCodeReservedStart = 0xF,kBluetoothLESecurityManagerCommandCodeReservedEnd = 0xFF,};
struct IOApplePartitionScheme__ExpansionData {};
struct IOAudioSelectorControl__ExpansionData {};
struct IOBDBlockStorageDevice__ExpansionData {};
struct IOBDBlockStorageDriver__ExpansionData {};
struct IOCDBlockStorageDevice__ExpansionData {};
struct IOFDiskPartitionScheme__ExpansionData {};
enum IOFWAVCProtocolUserClientCommandCodes {kIOFWAVCProtocolUserClientSendAVCResponse = 0x0,kIOFWAVCProtocolUserClientFreeInputPlug = 0x1,kIOFWAVCProtocolUserClientReadInputPlug = 0x2,kIOFWAVCProtocolUserClientUpdateInputPlug = 0x3,kIOFWAVCProtocolUserClientFreeOutputPlug = 0x4,kIOFWAVCProtocolUserClientReadOutputPlug = 0x5,kIOFWAVCProtocolUserClientUpdateOutputPlug = 0x6,kIOFWAVCProtocolUserClientReadOutputMasterPlug = 0x7,kIOFWAVCProtocolUserClientUpdateOutputMasterPlug = 0x8,kIOFWAVCProtocolUserClientReadInputMasterPlug = 0x9,kIOFWAVCProtocolUserClientUpdateInputMasterPlug = 0xA,kIOFWAVCProtocolUserClientPublishAVCUnitDirectory = 0xB,kIOFWAVCProtocolUserClientSetSubunitPlugSignalFormat = 0xC,kIOFWAVCProtocolUserClientGetSubunitPlugSignalFormat = 0xD,kIOFWAVCProtocolUserClientConnectTargetPlugs = 0xE,kIOFWAVCProtocolUserClientDisconnectTargetPlugs = 0xF,kIOFWAVCProtocolUserClientGetTargetPlugConnection = 0x10,kIOFWAVCProtocolUserClientAVCRequestNotHandled = 0x11,kIOFWAVCProtocolUserClientNumCommands = 0x12,};
struct IOFWPseudoAddressSpace__ExpansionData {};
struct IOFireWireAVCAsynchronousCommand_vtbl; 
struct IOFireWireLocalNodeAux__ExpansionData {};
struct IOFireWirePowerManager__ExpansionData {};
struct IOInterruptEventSource__ExpansionData {IOInterruptAccountingData *statistics;};
struct IOLocalConfigDirectory__ExpansionData {};
struct IOPlatformExpertDevice__ExpansionData {};
typedef IOUSBDeviceCapabilitySuperSpeedUSB *IOUSBDeviceCapabilitySuperSpeedUSBPtr;
typedef IOUSBDeviceCapabilityUSB2Extension *IOUSBDeviceCapabilityUSB2ExtensionPtr;
enum MACRO_kIOPMUndefinedDriverAssertionID {kIOPMUndefinedDriverAssertionID = 0,};
typedef vm_region_submap_short_info_64 vm_region_submap_short_info_data_64_t;
enum BluetoothHCIDeleteStoredLinkKeyFlags {kDeleteKeyForSpecifiedDeviceOnly = 0x0,kDeleteAllStoredLinkKeys = 0x1,};
enum BluetoothHCIGeneralFlowControlStates {kHostControllerToHostFlowControlOff = 0x0,kHCIACLDataPacketsOnHCISCODataPacketsOff = 0x1,kHCIACLDataPacketsOffHCISCODataPacketsOn = 0x2,kHCIACLDataPacketsOnHCISCODataPacketsOn = 0x3,};
enum BluetoothHCILinkPolicySettingsValues {kDisableAllLMModes = 0x0,kEnableMasterSlaveSwitch = 0x1,kEnableHoldMode = 0x2,kEnableSniffMode = 0x4,kEnableParkMode = 0x8,kReservedForFutureUse = 0x10,};
enum BluetoothL2CAPSupervisoryFuctionType {kBluetoothL2CAPSupervisoryFuctionTypeReceiverReady = 0x0,kBluetoothL2CAPSupervisoryFuctionTypeReject = 0x1,kBluetoothL2CAPSupervisoryFuctionTypeReceiverNotReady = 0x2,kBluetoothL2CAPSupervisoryFuctionTypeSelectiveReject = 0x3,};
struct IOFWAsyncPHYCommand__MemberVariables {};
typedef char (*IOFilterInterruptEventSource__Filter)(OSObject *, IOFilterInterruptEventSource *);
struct IOGUIDPartitionScheme__ExpansionData {};
struct IOInterruptController__ExpansionData {};
typedef char (*IOServiceMatchingNotificationHandler)(void *, void *, IOService *, IONotifier *);
enum MACRO_kBluetoothHCIEventMaskAll64Bit {kBluetoothHCIEventMaskAll64Bit = 0xFFFFFFFF,};
enum MACRO_kBroadcastChannelInitialValues {kBroadcastChannelInitialValues = 0x8000001F,};
enum MACRO_kFormatExtensionInvalidVersion {kFormatExtensionInvalidVersion = 0,kFormatExtensionCurrentVersion = 1,};
typedef thread_time_constraint_policy thread_time_constraint_policy_data_t;
enum virtual_memory_guard_exception_codes {kGUARD_EXC_DEALLOC_GAP = 0x1,};
typedef _AVCGetTargetPlugConnectionOutParams AVCGetTargetPlugConnectionOutParams;
enum BluetoothHCIReadStoredLinkKeysFlags {kReturnLinkKeyForSpecifiedDeviceOnly = 0x0,kReadAllStoredLinkKeys = 0x1,};
struct IOACPIPlatformDevice__ExpansionData {};
struct IOACPIPlatformExpert__ExpansionData {};
struct IOAudioToggleControl__ExpansionData {};
struct IOBlockStorageDevice__ExpansionData {};
struct IOFireWireAVCCommand__ExpansionData {char fStarted;char fSyncWakeupSignaled;};
struct IOFireWireAVCSubUnit__ExpansionData {};
struct IOFireWireController__ExpansionData {};
struct IOFireWireController__pendingQ_vtbl; 
struct IOFireWireController__timeoutQ_vtbl; 
enum IOFireWireDevice__RegistrationState {kDeviceRegistered = 0x0,kDeviceNeedsRegisterService = 0x1,kDeviceNotRegistered = 0x2,};
typedef void *IOInterruptEventSource__ActionBlock;
typedef IOUSBDeviceCapabilityContainerID *IOUSBDeviceCapabilityContainerIDPtr;
enum MACRO_MACH_VOUCHER_ATTR_PTHPRIORITY {MACH_VOUCHER_ATTR_PTHPRIORITY_NULL = 701,MACH_VOUCHER_ATTR_PTHPRIORITY_CREATE = 710,};
enum MACRO_kBSKernelMonitor2Notification {kBSKernelMonitor2Notification = 1651731250,};
enum MACRO_kIOFBSetGammaSyncNotSpecified {kIOFBSetGammaSyncNotSpecified = -1,};
typedef thread_throughput_qos_policy thread_throughput_qos_policy_data_t;
struct ATATimerEventSource__ExpansionData {};
typedef _AVCGetTargetPlugConnectionInParams AVCGetTargetPlugConnectionInParams;
struct ApplePlatformExpert__ExpansionData {};
enum BluetoothAMPGetAssocResponseStatus {kBluetoothAMPManagerGetAssocResponseSuccess = 0x0,kBluetoothAMPManagerGetAssocResponseInvalidControllerID = 0x1,};
enum BluetoothHCIHoldModeActivityStates {kMaintainCurrentPowerState = 0x0,kSuspendPageScan = 0x1,kSuspendInquiryScan = 0x2,kSuspendPeriodicInquiries = 0x3,};
enum BluetoothKeypressNotificationTypes {kBluetoothKeypressNotificationTypePasskeyEntryStarted = 0x0,kBluetoothKeypressNotificationTypePasskeyDigitEntered = 0x1,kBluetoothKeypressNotificationTypePasskeyDigitErased = 0x2,kBluetoothKeypressNotificationTypePasskeyCleared = 0x3,kBluetoothKeypressNotificationTypePasskeyEntryCompleted = 0x4,};
struct IOAudioLevelControl__ExpansionData {};
struct IOCDPartitionScheme__ExpansionData {};
struct IODVDMediaBSDClient__ExpansionData {};
enum IOFWAVCUserClientAsyncCommandCodes {kIOFWAVCUserClientInstallAsyncAVCCommandCallback = 0x10,kIOFWAVCUserClientNumAsyncCommands = 0x11,};
struct IOFWAddressSpaceAux__ExpansionData {};
struct IOFWUserObjectExporter_vtbl_layout; 
struct IOFireWireDeviceAux__ExpansionData {};
struct IOFireWireSBP2Login__ExpansionData {};
struct IONetworkController__ExpansionData {};
struct IOTimeSyncEthernetInterfaceAdapter;
enum MACRO_kAVCAnyAvailableExternalPlug {kAVCAnyAvailableExternalPlug = 0xFF,};
enum MACRO_kIOFireWireSBP2LibConnection {kIOFireWireSBP2LibConnection = 12,};
enum MACRO_kIOPMDriverAssertionLevelOff {kIOPMDriverAssertionLevelOff = 0,kIOPMDriverAssertionLevelOn = 255,};
enum MACRO_kIOPMMessageSleepWakeUUIDSet {kIOPMMessageSleepWakeUUIDSet = 1,};
enum MACRO_kMaxIOEthernetReltimeEntries {kMaxIOEthernetReltimeEntries = 4,};
enum MACRO_kUSBBillboardVConnNoPowerReq {kUSBBillboardVConnNoPowerReq = 15,};
enum StandardUSB__tDeviceCapabilityType {kDeviceCapabilityTypeWireless = 0x1,kDeviceCapabilityTypeUSB20Extension = 0x2,kDeviceCapabilityTypeSuperSpeed = 0x3,kDeviceCapabilityTypeContainerID = 0x4,kDeviceCapabilityTypePlatform = 0x5,kDeviceCapabilityTypePowerDelivery = 0x6,kDeviceCapabilityTypeBatteryInfo = 0x7,kDeviceCapabilityTypePdConsumerPort = 0x8,kDeviceCapabilityTypePdProviderPort = 0x9,kDeviceCapabilityTypeSuperSpeedPlus = 0xA,kDeviceCapabilityTypePrecisionMeasurement = 0xB,kDeviceCapabilityTypeWirelessExt = 0xC,kDeviceCapabilityTypeBillboard = 0xD,kDeviceCapabilityTypeBillboardAltMode = 0xF,};
enum _004A446673CE72B3FFC8D0F79861941F {kIOServiceFamilyCloseOptions = 0xFFFF0000,};
enum _012B18B348B266CF993B5AC99EEEF85B {kKeyMaskCtrl = 0x1,kKeyMaskShift = 0x2,kKeyMaskAlt = 0x4,kKeyMaskCommand = 0x8,kKeyMaskPeriod = 0x10,kKeyMaskComma = 0x20,kKeyMaskSlash = 0x40,kKeyMaskEsc = 0x80,kKeyMaskFn = 0x100,kKeyMaskUnknown = 0x80000000,};
enum _018694580DAE424DF9B658C20B5E845B {kClearHubFeature = 0x120,kClearPortFeature = 0x123,kGetPortState = 0x2A3,kGetHubDescriptor = 0x6A0,kGetHub3Descriptor = 0x6A0,kGetHubStatus = 0xA0,kGetPortStatus = 0xA3,kSetHubDescriptor = 0x620,kSetHubFeature = 0x320,kSetPortFeature = 0x323,};
enum _02549E6376D61F1DD654571EBDF37D04 {kFWAVCProducerMode_SEND = 0x5,kFWAVCProducerMode_TOSS = 0x7,};
enum _02E652C68C5EE7328B8A38BA565576A8 {CCERR_OK = 0x0,CCERR_INTERNAL = 0xFFFFFFFF,CCERR_INTEGRITY = 0xFFFFFFFE,CCERR_DEVICE = 0xFFFFFFFD,CCERR_INTERRUPTS = 0xFFFFFFFC,CCERR_CRYPTO_CONFIG = 0xFFFFFFFB,CCERR_PERMS = 0xFFFFFFFA,CCERR_PARAMETER = 0xFFFFFFF9,CCERR_MEMORY = 0xFFFFFFF8,CCERR_FILEDESC = 0xFFFFFFF7,CCERR_OUT_OF_ENTROPY = 0xFFFFFFF6,CCERR_ATFORK = 0xFFFFFFF5,CCERR_OVERFLOW = 0xFFFFFFF4,CCERR_MEMORY_ALLOC_FAIL = 0xFFFFFFF3,CCEC_GENERATE_KEY_DEFAULT_ERR = 0xFFFFFFF2,CCEC_GENERATE_KEY_TOO_MANY_TRIES = 0xFFFFFFF1,CCEC_GENERATE_KEY_MULT_FAIL = 0xFFFFFFF0,CCEC_GENERATE_KEY_AFF_FAIL = 0xFFFFFFEF,CCEC_GENERATE_KEY_CONSISTENCY = 0xFFFFFFEE,CCEC_GENERATE_NOT_ON_CURVE = 0xFFFFFFED,CCEC_GENERATE_NOT_ENOUGH_ENTROPY = 0xFFFFFFEC,CCEC_GENERATE_NOT_SUPPORTED = 0xFFFFFFEB,CCEC_GENERATE_INVALID_INPUT = 0xFFFFFFEA,CCRSA_INVALID_INPUT = 0xFFFFFFE9,CCRSA_INVALID_CONFIG = 0xFFFFFFE8,CCRSA_ENCODING_ERROR = 0xFFFFFFE7,CCRSA_DECODING_ERROR = 0xFFFFFFE6,CCRSA_PRIVATE_OP_ERROR = 0xFFFFFFE5,CCRSA_KEY_ERROR = 0xFFFFFFE4,CCRSA_KEYGEN_PRIME_NOT_FOUND = 0xFFFFFFE3,CCRSA_KEYGEN_PRIME_NEED_NEW_SEED = 0xFFFFFFE2,CCRSA_KEYGEN_PRIME_TOO_MANY_ITERATIONS = 0xFFFFFFE1,CCRSA_KEYGEN_PRIME_SEED_GENERATION_ERROR = 0xFFFFFFE0,CCRSA_KEYGEN_MODULUS_CRT_INV_ERROR = 0xFFFFFFDF,CCRSA_KEYGEN_NEXT_PRIME_ERROR = 0xFFFFFFDE,CCRSA_KEYGEN_SEED_X_ERROR = 0xFFFFFFDD,CCRSA_KEYGEN_SEED_r_ERROR = 0xFFFFFFDC,CCRSA_KEYGEN_KEYGEN_CONSISTENCY_FAIL = 0xFFFFFFDB,CCRSA_KEYGEN_R1R2_SIZE_ERROR = 0xFFFFFFDA,CCRSA_KEYGEN_PQ_DELTA_ERROR = 0xFFFFFFD9,CCRSA_FIPS_KEYGEN_DISABLED = 0xFFFFFFD8,CCZP_INV_ERROR = 0xFFFFFFD7,CCZP_INV_NO_INVERSE = 0xFFFFFFD6,CCZP_INV_INVALID_INPUT = 0xFFFFFFD5,CCZ_INVALID_INPUT_ERROR = 0xFFFFFFD4,CCZ_INVALID_RADIX_ERROR = 0xFFFFFFD3,CCDH_ERROR_DEFAULT = 0xFFFFFFD2,CCDH_GENERATE_KEY_TOO_MANY_TRIES = 0xFFFFFFD1,CCDH_NOT_SUPPORTED_CONFIGURATION = 0xFFFFFFD0,CCDH_SAFETY_CHECK = 0xFFFFFFCF,CCDH_PUBLIC_KEY_MISSING = 0xFFFFFFCE,CCDH_INVALID_DOMAIN_PARAMETER = 0xFFFFFFCD,CCDH_INVALID_INPUT = 0xFFFFFFCC,CCDH_DOMAIN_PARAMETER_MISMATCH = 0xFFFFFFCB,CCDH_GENERATE_KEY_CONSISTENCY = 0xFFFFFFCA,CCSRP_ERROR_DEFAULT = 0xFFFFFFC9,CCSRP_GENERATE_KEY_TOO_MANY_TRIES = 0xFFFFFFC8,CCSRP_NOT_SUPPORTED_CONFIGURATION = 0xFFFFFFC7,CCSRP_SAFETY_CHECK = 0xFFFFFFC6,CCSRP_PUBLIC_KEY_MISSING = 0xFFFFFFC5,CCSRP_INVALID_DOMAIN_PARAMETER = 0xFFFFFFC4,CCDRBG_STATUS_ERROR = 0xFFFFFFC3,CCDRBG_STATUS_NEED_RESEED = 0xFFFFFFC2,CCDRBG_STATUS_PARAM_ERROR = 0xFFFFFFC1,CCDRBG_STATUS_ABORT = 0xFFFFFFC0,CCKPRNG_NEED_ENTROPY = 0xFFFFFFBF,CCKPRNG_ABORT = 0xFFFFFFBE,CCMODE_INVALID_INPUT = 0xFFFFFFBD,CCMODE_INVALID_CALL_SEQUENCE = 0xFFFFFFBC,CCMODE_INTEGRITY_FAILURE = 0xFFFFFFBB,CCMODE_NOT_SUPPORTED = 0xFFFFFFBA,CCMODE_INTERNAL_ERROR = 0xFFFFFFB9,CCPOST_GENERIC_FAILURE = 0xFFFFFFB8,CCPOST_LIBRARY_ERROR = 0xFFFFFFB7,CCPOST_INTEGRITY_ERROR = 0xFFFFFFB6,CCPOST_KAT_FAILURE = 0xFFFFFFB5,};
enum _033F35D9D1518A99BA91D96B16A7D6FD {kIOMapAnywhere = 0x1,kIOMapCacheMask = 0x700,kIOMapCacheShift = 0x8,kIOMapDefaultCache = 0x0,kIOMapInhibitCache = 0x100,kIOMapWriteThruCache = 0x200,kIOMapCopybackCache = 0x300,kIOMapWriteCombineCache = 0x400,kIOMapCopybackInnerCache = 0x500,kIOMapPostedWrite = 0x600,kIOMapUserOptionsMask = 0xFFF,kIOMapReadOnly = 0x1000,kIOMapStatic = 0x1000000,kIOMapReference = 0x2000000,kIOMapUnique = 0x4000000,kIOMapPrefault = 0x10000000,kIOMapOverwrite = 0x20000000,};
enum _04473DA05CCF895832E735BC593AE069 {sock_evt_connecting = 0x1,sock_evt_connected = 0x2,sock_evt_disconnecting = 0x3,sock_evt_disconnected = 0x4,sock_evt_flush_read = 0x5,sock_evt_shutdown = 0x6,sock_evt_cantrecvmore = 0x7,sock_evt_cantsendmore = 0x8,sock_evt_closing = 0x9,sock_evt_bound = 0xA,};
enum _04559EBD4841E5884DFBF248F632AF57 {kIOOutputStatusMask = 0xFF,kIOOutputStatusAccepted = 0x0,kIOOutputStatusDropped = 0x1,kIOOutputStatusRetry = 0x2,};
enum _046A341C144E7E21EFDEA7659D43B95E {kSCSICDBSize_Maximum = 0x10,kSCSICDBSize_6Byte = 0x6,kSCSICDBSize_10Byte = 0xA,kSCSICDBSize_12Byte = 0xC,kSCSICDBSize_16Byte = 0x10,};
enum _0487286D1CF2D11E4EE166404CF9305B {noErr = 0x0,};
enum _0510114CEB5236E5273CDF69A5D394CE {kIOExternalMethodScalarInputCountMax = 0x10,kIOExternalMethodScalarOutputCountMax = 0x10,};
enum _0567F55FE6227CE1F671B997EF8445B4 {kBluetoothDeviceNameMaxLength = 0xF8,};
enum _0572058E12A6144DBD2E6A977F90917A {kIOFBNotifyEvent_None = 0x0,kIOFBNotifyEvent_DisplayModeChange = 0x1,kIOFBNotifyEvent_SleepWake = 0x2,kIOFBNotifyEvent_PowerOnOff = 0x4,kIOFBNotifyEvent_ChangeSpeed = 0x8,kIOFBNotifyEvent_ClamshellChange = 0x10,kIOFBNotifyEvent_CaptureChange = 0x20,kIOFBNotifyEvent_OnlineChange = 0x40,kIOFBNotifyEvent_DisplayDimsChange = 0x80,kIOFBNotifyEvent_Probed = 0x100,kIOFBNotifyEvent_VRAMReady = 0x200,kIOFBNotifyEvent_Notify = 0x400,kIOFBNotifyEvent_WSAADefer = 0x800,kIOFBNotifyEvent_Terminated = 0x1000,kIOFBNotifyEvent_All = 0x1FFF,};
enum _059194D3983F6182DCF38E07F6105305 {kIOStorageSynchronizeOptionNone = 0x0,kIOStorageSynchronizeOptionBarrier = 0x2,kIOStorageSynchronizeOptionReserved = 0xFFFFFFFD,};
enum _05AD55F1888B196DCBDEFEA5DA28C5FC {kUSBDeviceUserClientOpen = 0x0,kUSBDeviceUserClientClose = 0x1,kUSBDeviceUserClientSetConfig = 0x2,kUSBDeviceUserClientGetConfig = 0x3,kUSBDeviceUserClientGetConfigDescriptor = 0x4,kUSBDeviceUserClientGetFrameNumber = 0x5,kUSBDeviceUserClientDeviceRequestOut = 0x6,kUSBDeviceUserClientDeviceRequestIn = 0x7,kUSBDeviceUserClientCreateInterfaceIterator = 0x8,kUSBDeviceUserClientResetDevice = 0x9,kUSBDeviceUserClientSuspend = 0xA,kUSBDeviceUserClientAbortPipeZero = 0xB,kUSBDeviceUserClientReEnumerateDevice = 0xC,kUSBDeviceUserClientGetMicroFrameNumber = 0xD,kUSBDeviceUserClientGetFrameNumberWithTime = 0xE,kUSBDeviceUserClientSetAsyncPort = 0xF,kUSBDeviceUserClientGetDeviceInformation = 0x10,kUSBDeviceUserClientRequestExtraPower = 0x11,kUSBDeviceUserClientReturnExtraPower = 0x12,kUSBDeviceUserClientGetExtraPowerAllocated = 0x13,kUSBDeviceUserClientGetBandwidthAvailableForDevice = 0x14,kUSBDeviceUserClientSetConfigurationV2 = 0x15,kUSBDeviceUserClientRegisterForNotification = 0x16,kUSBDeviceUserClientUnregisterNotification = 0x17,kUSBDeviceUserClientAcknowledgeNotification = 0x18,kIOUSBLibDeviceUserClientNumCommands = 0x19,};
enum _060DF038822EB990CCD873DC298BB9BA {VFS_RENAME_SECLUDE = 0x1,VFS_RENAME_SWAP = 0x2,VFS_RENAME_EXCL = 0x4,VFS_RENAME_FLAGS_MASK = 0x7,};
enum _062DA39E86C3AE84A631D48FE7FD5784 {kIOVideoBooleanControlClassIDJack = 0x6A61636B,kIOVideoBooleanControlClassIDDirection = 0x64697265,};
enum _068204FF07B0D3483088EBFD51388AD2 {kKUNCDefaultResponse = 0x0,kKUNCAlternateResponse = 0x1,kKUNCOtherResponse = 0x2,kKUNCCancelResponse = 0x3,};
enum _06A0BEF2D977D8EED6E203E98BDB6DE0 {kIOHIDGlobalMemory = 0x0,};
enum _06A91BAFA207998382AEBC2D73756849 {kRangeSupportsSignal_0700_0300_Bit = 0x0,kRangeSupportsSignal_0714_0286_Bit = 0x1,kRangeSupportsSignal_1000_0400_Bit = 0x2,kRangeSupportsSignal_0700_0000_Bit = 0x3,kRangeSupportsSignal_0700_0300_Mask = 0x1,kRangeSupportsSignal_0714_0286_Mask = 0x2,kRangeSupportsSignal_1000_0400_Mask = 0x4,kRangeSupportsSignal_0700_0000_Mask = 0x8,};
enum _06D36A06964C1EB7F288CBEA33889D07 {kIOVideoControlScopeGlobal = 0x676C6F62,kIOVideoControlScopeInput = 0x696E7074,kIOVideoControlScopeOutput = 0x6F757470,kIOVideoControlScopePlayThrough = 0x70747275,kIOVideoControlElementMaster = 0x0,};
enum _06E71388B4B31295A6A1AAA0247E3C93 {kIOHIDCapsLockState = 0x1,kIOHIDNumLockState = 0x2,kIOHIDActivityUserIdle = 0x3,kIOHIDActivityDisplayOn = 0x4,};
enum _06F708EAA1FE7AAB123E69A039E33176 {kIOPMSubclassPolicy = 0x0,kIOPMSuperclassPolicy1 = 0x1,};
enum _0784E9FAAAE46ECA86EE246E98F59B28 {kUnknownConnect = 0x1,kPanelConnect = 0x2,kPanelTFTConnect = 0x2,kFixedModeCRTConnect = 0x3,kMultiModeCRT1Connect = 0x4,kMultiModeCRT2Connect = 0x5,kMultiModeCRT3Connect = 0x6,kMultiModeCRT4Connect = 0x7,kModelessConnect = 0x8,kFullPageConnect = 0x9,kVGAConnect = 0xA,kNTSCConnect = 0xB,kPALConnect = 0xC,kHRConnect = 0xD,kPanelFSTNConnect = 0xE,kMonoTwoPageConnect = 0xF,kColorTwoPageConnect = 0x10,kColor16Connect = 0x11,kColor19Connect = 0x12,kGenericCRT = 0x13,kGenericLCD = 0x14,kDDCConnect = 0x15,kNoConnect = 0x16,};
enum _07AF80835FABD29B19304E81197D2107 {BPF_MODE_DISABLED = 0x0,BPF_MODE_INPUT = 0x1,BPF_MODE_OUTPUT = 0x2,BPF_MODE_INPUT_OUTPUT = 0x3,};
enum _07E32129EB724C00BB4F27088730E96A {kMMCPowerStateSystemSleep = 0x0,kMMCPowerStateSleep = 0x1,kMMCPowerStateStandby = 0x2,kMMCPowerStateIdle = 0x3,kMMCPowerStateActive = 0x4,kMMCNumPowerStates = 0x5,};
enum _0829500903C5F88B3EFB150C76F1566C {kUSBControllerUserClientOpen = 0x0,kUSBControllerUserClientClose = 0x1,kUSBControllerUserClientEnableLogger = 0x2,kUSBControllerUserClientSetDebuggingLevel = 0x3,kUSBControllerUserClientSetDebuggingType = 0x4,kUSBControllerUserClientGetDebuggingLevel = 0x5,kUSBControllerUserClientGetDebuggingType = 0x6,kUSBControllerUserClientSetTestMode = 0x7,kUSBControllerUserClientReadRegister = 0x8,kUSBControllerUserClientWriteRegister = 0x9,kUSBControllerUserClientMessageController = 0xA,kNumUSBControllerMethods = 0xB,};
enum _089CD3DBEEB420D8E8FC3A2BF1B78578 {kHFSRootParentID = 0x1,kHFSRootFolderID = 0x2,kHFSExtentsFileID = 0x3,kHFSCatalogFileID = 0x4,kHFSBadBlockFileID = 0x5,kHFSAllocationFileID = 0x6,kHFSStartupFileID = 0x7,kHFSAttributesFileID = 0x8,kHFSAttributeDataFileID = 0xD,kHFSRepairCatalogFileID = 0xE,kHFSBogusExtentFileID = 0xF,kHFSFirstUserCatalogNodeID = 0x10,};
enum _08B0590EA23E01E26342C991F8AF8730 {kINQUIRY_Page83_IdentifierTypeVendorSpecific = 0x0,kINQUIRY_Page83_IdentifierTypeVendorID = 0x1,kINQUIRY_Page83_IdentifierTypeIEEE_EUI64 = 0x2,kINQUIRY_Page83_IdentifierTypeNAAIdentifier = 0x3,kINQUIRY_Page83_IdentifierTypeRelativePortIdentifier = 0x4,kINQUIRY_Page83_IdentifierTypeTargetPortGroup = 0x5,kINQUIRY_Page83_IdentifierTypeLogicalUnitGroup = 0x6,kINQUIRY_Page83_IdentifierTypeMD5LogicalUnitIdentifier = 0x7,kINQUIRY_Page83_IdentifierTypeSCSINameString = 0x8,kINQUIRY_Page83_IdentifierTypeMask = 0xF,kINQUIRY_Page83_ProtocolIdentifierValidBit = 0x7,kINQUIRY_Page83_ProtocolIdentifierValidMask = 0x80,};
enum _09066DFDDB8B42DD5B4B1CD3D302BE02 {kBluetoothAirModeULawLog = 0x0,kBluetoothAirModeALawLog = 0x1,kBluetoothAirModeCVSD = 0x2,kBluetoothAirModeTransparentData = 0x3,};
enum _091CE5C90C712B66AB990091469A767A {kHFSFolderRecord = 0x100,kHFSFileRecord = 0x200,kHFSFolderThreadRecord = 0x300,kHFSFileThreadRecord = 0x400,kHFSPlusFolderRecord = 0x1,kHFSPlusFileRecord = 0x2,kHFSPlusFolderThreadRecord = 0x3,kHFSPlusFileThreadRecord = 0x4,};
enum _09DB68D886C9E9CFCB8354822FD37CD4 {kFWAckTimeout = 0xFFFFFFFF,kFWAckComplete = 0x1,kFWAckPending = 0x2,kFWAckBusyX = 0x4,kFWAckBusyA = 0x5,kFWAckBusyB = 0x6,kFWAckDataError = 0xD,kFWAckTypeError = 0xE,};
enum _0A291242D24855F6055A41112F465DA0 {kKernelDebugOutputIOLogType = 0x1,kKernelDebugOutputKextLoggerType = 0x2,};
enum _0A361D622D4EBD1A35C25892E8E3CC1B {kMirrorSameDepthOnlyMirrorMask = 0x1,kMirrorSameSizeOnlyMirrorMask = 0x2,kMirrorSameTimingOnlyMirrorMask = 0x4,kMirrorCommonGammaMask = 0x8,};
enum _0AD3D5D9A0766EA3575829F9E96E00CB {kPEWaitForInput = 0x1,kPERawInput = 0x2,};
enum _0AE3377B864A6C8A63F90103E9E66FD6 {kSCSIProtocolLayerPowerStateOff = 0x0,kSCSIProtocolLayerPowerStateOn = 0x1,kSCSIProtocolLayerNumDefaultStates = 0x2,};
enum _0B092D3D80EFF586BBE54F0B3D46DEAB {bATABusy = 0x7,bATADriveReady = 0x6,bATAWriteFault = 0x5,bATASeekComplete = 0x4,bATADataRequest = 0x3,bATADataCorrected = 0x2,bATAIndex = 0x1,bATAError = 0x0,mATABusy = 0x80,mATADriveReady = 0x40,mATAWriteFault = 0x20,mATASeekComplete = 0x10,mATADataRequest = 0x8,mATADataCorrected = 0x4,mATAIndex = 0x2,mATAError = 0x1,};
enum _0B4EC9E3B3D7D203915B2A7F454110D0 {kIOPMPSLocationLeft = 0x3E9,kIOPMPSLocationRight = 0x3EA,};
enum _0C58B26A019E99004EB244946E39F61A {kIOInterruptTypePCIMessaged = 0x10000,};
enum _0D0D0E76830083F79ED4691F36EA1C71 {kDDCBlockSize = 0x80,};
enum _0D3692DE084B13C5C65A638D54FF5CE5 {kFWSBP2NormalCommandStatus = 0x6,kFWSBP2NormalCommandTimeout = 0x7,kFWSBP2UnsolicitedStatus = 0x8,kFWSBP2NormalCommandReset = 0x9,};
enum _0D9952D8226CC98DE85454535BC0CAFC {kDVDKeyClassCSS_CPPM_CPRM = 0x0,kDVDKeyClassRSSA = 0x1,};
enum _0E5D5312C464A10039F716FDDF1C1A2A {kIOStreamMemoryTypeOutputQueue = 0x10000000,kIOStreamMemoryTypeInputQueue = 0x20000000,kIOStreamMemoryTypeBufferData = 0x30000000,kIOStreamMemoryTypeBufferControl = 0x40000000,kIOStreamBufferIDMask = 0xFFFFFFF,kIOStreamMemoryTypeMask = 0xF0000000,};
enum _0F2297881157A9320A83FDFD2D667F4A {kRSCZero = 0x0,kRSCOne = 0x1,kRSCTwo = 0x2,kRSCThree = 0x3,kRSCFour = 0x4,kRSCFive = 0x5,kRSCSix = 0x6,kRSCSeven = 0x7,};
enum _0F47A2965B57E74B22967592DC2784B0 {kFWIsochChannelUnknownCondition = 0x0,kFWIsochChannelNotEnoughBandwidth = 0x1,kFWIsochChannelChannelNotAvailable = 0x2,};
enum _102EED13B824F0E66C835861CFE0D77F {kIOFBLinkPreEmphasisLevel0 = 0x0,kIOFBLinkPreEmphasisLevel1 = 0x1,kIOFBLinkPreEmphasisLevel2 = 0x2,kIOFBLinkPreEmphasisLevel3 = 0x3,};
enum _10B214377949A5A081878427C99E3128 {kHIDRqGetReport = 0x1,kHIDRqGetIdle = 0x2,kHIDRqGetProtocol = 0x3,kHIDRqSetReport = 0x9,kHIDRqSetIdle = 0xA,kHIDRqSetProtocol = 0xB,};
enum _10D99C2A6FFBE400B0437BBD3EF78A58 {kOSAsyncRefCount = 0x8,kOSAsyncRefSize = 0x20,};
enum _116817846DF744F3E8B67F1AF362CF8A {kIODetailedTimingValid = 0x80000000,kIOScalingInfoValid = 0x40000000,};
enum _123F81BBC2991CAE218AD825C1363C15 {kBluetoothSDPDataElementTypeNil = 0x0,kBluetoothSDPDataElementTypeUnsignedInt = 0x1,kBluetoothSDPDataElementTypeSignedInt = 0x2,kBluetoothSDPDataElementTypeUUID = 0x3,kBluetoothSDPDataElementTypeString = 0x4,kBluetoothSDPDataElementTypeBoolean = 0x5,kBluetoothSDPDataElementTypeDataElementSequence = 0x6,kBluetoothSDPDataElementTypeDataElementAlternative = 0x7,kBluetoothSDPDataElementTypeURL = 0x8,kBluetoothSDPDataElementTypeReservedStart = 0x9,kBluetoothSDPDataElementTypeReservedEnd = 0x1F,};
enum _12600C2630704E09CEBE9A8823E89268 {kHubSupportsGangPower = 0x0,kHubSupportsIndividualPortPower = 0x1,kHubPortSetPowerOff = 0x0,kHubPortSetPowerOn = 0x1,};
enum _1291494DADD8E0C6FF4FC840A41BC91C {kPEHaltCPU = 0x0,kPERestartCPU = 0x1,kPEHangCPU = 0x2,kPEUPSDelayHaltCPU = 0x3,kPEPanicRestartCPU = 0x4,kPEPanicSync = 0x5,kPEPagingOff = 0x6,kPEPanicBegin = 0x7,kPEPanicEnd = 0x8,kPEPanicDiskShutdown = 0x9,};
enum _12B2E8DA1F4B1F0338345A0A32443DB0 {kHIDUsage_Ord_Instance1 = 0x1,kHIDUsage_Ord_Instance2 = 0x2,kHIDUsage_Ord_Instance3 = 0x3,kHIDUsage_Ord_Instance4 = 0x4,kHIDUsage_Ord_Instance65535 = 0xFFFF,};
enum _12BAD4ED8EC29AB15B2FCFD715EF2C94 {kSENSE_RESPONSE_CODE_Current_Errors = 0x70,kSENSE_RESPONSE_CODE_Deferred_Errors = 0x71,kSENSE_RESPONSE_CODE_Mask = 0x7F,};
enum _12CC6D3D91801B2188803716C5131AC9 {kIOUSBAnyClass = 0xFFFF,kIOUSBAnySubClass = 0xFFFF,kIOUSBAnyProtocol = 0xFFFF,kIOUSBAnyVendor = 0xFFFF,kIOUSBAnyProduct = 0xFFFF,};
enum _133B1EC76217CD19BB310FD28EF3EC51 {kDVDRZoneInfoAddressTypeLBA = 0x0,kDVDRZoneInfoAddressTypeRZoneNumber = 0x1,kDVDRZoneInfoAddressTypeBorderNumber = 0x2,};
enum _13528FA08150D1212F4D746E3098C36E {kConfigTextualDescriptorKey = 0x1,kConfigBusDependentInfoKey = 0x2,kConfigModuleVendorIdKey = 0x3,kConfigModuleHwVersionKey = 0x4,kConfigModuleSpecIdKey = 0x5,kConfigModuleSwVersionKey = 0x6,kConfigModuleDependentInfoKey = 0x7,kConfigNodeVendorIdKey = 0x8,kConfigNodeHwVersionKey = 0x9,kConfigNodeSpecIdKey = 0xA,kConfigNodeSwVersionKey = 0xB,kConfigNodeCapabilitiesKey = 0xC,kConfigNodeUniqueIdKey = 0xD,kConfigNodeUnitsExtentKey = 0xE,kConfigNodeMemoryExtentKey = 0xF,kConfigNodeDependentInfoKey = 0x10,kConfigUnitDirectoryKey = 0x11,kConfigUnitSpecIdKey = 0x12,kConfigUnitSwVersionKey = 0x13,kConfigUnitDependentInfoKey = 0x14,kConfigUnitLocationKey = 0x15,kConfigUnitPollMaskKey = 0x16,kConfigModelIdKey = 0x17,kConfigGenerationKey = 0x38,kConfigRootDirectoryKey = 0xFFFF,};
enum _13E435A0531BAC2A602C6025BBD694EA {kIOAudioClockSelectorTypeInternal = 0x696E7420,kIOAudioClockSelectorTypeExternal = 0x65787420,kIOAudioClockSelectorTypeAESEBU = 0x61736275,kIOAudioClockSelectorTypeTOSLink = 0x746F736C,kIOAudioClockSelectorTypeSPDIF = 0x73706466,kIOAudioClockSelectorTypeADATOptical = 0x6164746F,kIOAudioClockSelectorTypeADAT9Pin = 0x61647439,kIOAudioClockSelectorTypeSMPTE = 0x736D7074,kIOAudioClockSelectorTypeVideo = 0x7664656F,kIOAudioClockSelectorTypeControl = 0x636E726C,kIOAudioClockSelectorTypeOther = 0x6F746872,};
enum _146407F53B058176035016242FDA9AAA {kIOACPIAddressSpaceIDSystemMemory = 0x0,kIOACPIAddressSpaceIDSystemIO = 0x1,kIOACPIAddressSpaceIDPCIConfiguration = 0x2,kIOACPIAddressSpaceIDEmbeddedController = 0x3,kIOACPIAddressSpaceIDSMBus = 0x4,};
enum _153704619D960E9907FF0BBE816903FA {kRangeSupportsSeperateSyncsBit = 0x0,kRangeSupportsSyncOnGreenBit = 0x1,kRangeSupportsCompositeSyncBit = 0x2,kRangeSupportsVSyncSerrationBit = 0x3,kRangeSupportsSeperateSyncsMask = 0x1,kRangeSupportsSyncOnGreenMask = 0x2,kRangeSupportsCompositeSyncMask = 0x4,kRangeSupportsVSyncSerrationMask = 0x8,};
enum _15B11327A4503AA0ED5BB0C42B1DC7C1 {kFBDisplayUsablePowerState = 0x80000000,kFBDisplayPowerStateMask = 0xFFFF,};
enum _15DE62C0D69123E3586561D6E3BDCF8D {kATAcmdWORetry = 0x1,kATAcmdNOP = 0x0,kATAcmdRecal = 0x10,kATAcmdRead = 0x20,kATAcmdReadLong = 0x22,kATAcmdReadExtended = 0x24,kATAcmdReadDMAExtended = 0x25,kATAcmdWrite = 0x30,kATAcmdWriteLong = 0x32,kATAcmdWriteExtended = 0x34,kATAcmdWriteDMAExtended = 0x35,kATAcmdWriteVerify = 0x3C,kATAcmdReadVerify = 0x40,kATAcmdFormatTrack = 0x50,kATAcmdSeek = 0x70,kATAcmdDiagnostic = 0x90,kATAcmdInitDrive = 0x91,kATAcmdReadMultiple = 0xC4,kATAcmdWriteMultiple = 0xC5,kATAcmdSetRWMultiple = 0xC6,kATAcmdReadDMA = 0xC8,kATAcmdWriteDMA = 0xCA,kATAcmdMCAcknowledge = 0xDB,kATAcmdDoorLock = 0xDE,kATAcmdDoorUnlock = 0xDF,kATAcmdStandbyImmed = 0xE0,kATAcmdIdleImmed = 0xE1,kATAcmdStandby = 0xE2,kATAcmdIdle = 0xE3,kATAcmdReadBuffer = 0xE4,kATAcmdCheckPowerMode = 0xE5,kATAcmdSleep = 0xE6,kATAcmdFlushCache = 0xE7,kATAcmdWriteBuffer = 0xE8,kATAcmdWriteSame = 0xE9,kATAcmdFlushCacheExtended = 0xEA,kATAcmdDriveIdentify = 0xEC,kATAcmdMediaEject = 0xED,kATAcmdSetFeatures = 0xEF,};
enum _16A792B701F549C789635E8C8868DE06 {TELEPHONY_UNDEFINED = 0x500,TELEPHONY_PHONE_LINE = 0x501,TELEPHONY_TELEPHONE = 0x502,TELEPHONY_DOWN_LINE_PHONE = 0x503,};
enum _16B0A897CF0B8F3E981C62F624C037CC {kBluetoothVoiceSettingInputCodingMask = 0x300,kBluetoothVoiceSettingInputCodingLinearInputCoding = 0x0,kBluetoothVoiceSettingInputCodingULawInputCoding = 0x100,kBluetoothVoiceSettingInputCodingALawInputCoding = 0x200,};
enum _16C3AD9CBCD398CB22F1EE9A97328F1D {kIOFBHDCPLimit_AllowAll = 0x0,kIOFBHDCPLimit_NoHDCP1x = 0x1,kIOFBHDCPLimit_NoHDCP20Type0 = 0x2,kIOFBHDCPLimit_NoHDCP20Type1 = 0x4,};
enum _16D09EF66AE5F6694E50D40232F162A0 {kBluetoothDontAllowRoleSwitch = 0x0,kBluetoothAllowRoleSwitch = 0x1,};
enum _17F4BEF9043574CE5E2FACAD37895F40 {kPCIPMCPMESupportFromD3Cold = 0x8000,kPCIPMCPMESupportFromD3Hot = 0x4000,kPCIPMCPMESupportFromD2 = 0x2000,kPCIPMCPMESupportFromD1 = 0x1000,kPCIPMCPMESupportFromD0 = 0x800,kPCIPMCD2Support = 0x400,kPCIPMCD1Support = 0x200,kPCIPMCD3Support = 0x1,};
enum _187A6172B143646A1F5E5F713FCD69B8 {kUSBNoUserNotificationType = 0x0,kUSBNotEnoughPowerNotificationType = 0x1,kUSBIndividualOverCurrentNotificationType = 0x2,kUSBGangOverCurrentNotificationType = 0x3,kUSBiOSDeviceNotEnoughPowerNotificationType = 0x4,kUSBNotEnoughPowerNoACNotificationType = 0x5,kUSBDeviceCountExceededNotificationType = 0x6,kUSBEndpointCountExceededNotificationType = 0x7,kUSBUnsupportedNotificationType = 0x8,kUSBHubCountExceededNotificationType = 0x9,kUSBTDMLowBatteryType = 0xA,kUSBCTBNotEnoughPowerNotificationType = 0xB,kUSBCTBUnsupportedNotificationType = 0xC,kUSBCUnsupportedTBPortNotificationType = 0xD,kUSBCUnsupportedTBCableNotificationType = 0xE,};
enum _189CBD287D3EB50C9B0A05883DCE0BC4 {kIOFBCursorImageNew = 0x1,kIOFBCursorHWCapable = 0x2,};
enum _18F58E2B6D49D84F36BD7A02FE0DF649 {kUSBBillboardUnspecifiedError = 0x0,kUSBBillboardConfigNotAttempted = 0x1,kUSBBillboardConfigUnsuccessful = 0x2,kUSBBillboardAltModeConfigSuccess = 0x3,};
enum _1928EAE6D1444AC32E9EFCE8F431D3D7 {BLOCK_DEALLOCATING = 0x1,BLOCK_REFCOUNT_MASK = 0xFFFE,BLOCK_NEEDS_FREE = 0x1000000,BLOCK_HAS_COPY_DISPOSE = 0x2000000,BLOCK_HAS_CTOR = 0x4000000,BLOCK_IS_GC = 0x8000000,BLOCK_IS_GLOBAL = 0x10000000,BLOCK_USE_STRET = 0x20000000,BLOCK_HAS_SIGNATURE = 0x40000000,BLOCK_HAS_EXTENDED_LAYOUT = 0x80000000,};
enum _1939A67FC7692FDE66F4632C28492004 {kIOFBAVSignalTypeUnknown = 0x0,kIOFBAVSignalTypeVGA = 0x1,kIOFBAVSignalTypeDVI = 0x2,kIOFBAVSignalTypeHDMI = 0x8,kIOFBAVSignalTypeDP = 0x10,};
enum _1980F88069B11ED55EFEDFCD2D7E33A6 {kIOPMMaxPerformance = 0x4000,kIOPMPassThrough = 0x100,kIOPMAuxPowerOn = 0x20,kIOPMNotAttainable = 0x1,kIOPMContextRetained = 0x2000,kIOPMConfigRetained = 0x1000,kIOPMStaticPowerValid = 0x800,kIOPMSoftSleep = 0x400,kIOPMCapabilitiesMask = 0xF086,};
enum _199E85B7AA785D1A61CC165FA2EA4798 {kIOStorageUnmapOptionReserved = 0xFFFFFFFF,};
enum _19AD1DED3269657D0E82CD343B4F3782 {kSCSIUntaggedTaskIdentifier = 0x0,};
enum _19ADAF2C7EFB53DDA7F8C293450436BD {kIOCatalogModuleUnload = 0x1,kIOCatalogModuleTerminate = 0x2,kIOCatalogServiceTerminate = 0x3,};
enum _19AFBE0CD15DA5951EEEC0A9DE7B7C4B {kIOUSBVendorIDAppleComputer = 0x5AC,kIOUSBVendorIDApple = 0x5AC,};
enum _1A8B0E1BA6A92E9DF47D3252374F56E2 {kINQUIRY_Byte5_SCCS_Bit = 0x7,kINQUIRY_Byte5_ACC_Bit = 0x6,kINQUIRY_Byte5_ExplicitTPGS_Bit = 0x5,kINQUIRY_Byte5_ImplicitTPGS_Bit = 0x4,kINQUIRY_Byte5_3PC_Bit = 0x3,kINQUIRY_Byte5_PROTECT_Bit = 0x0,kINQUIRY_Byte5_SCCS_Mask = 0x80,kINQUIRY_Byte5_ACC_Mask = 0x40,kINQUIRY_Byte5_ExplicitTPGS_Mask = 0x20,kINQUIRY_Byte5_ImplicitTPGS_Mask = 0x10,kINQUIRY_Byte5_3PC_Mask = 0x8,kINQUIRY_Byte5_PROTECT_Mask = 0x1,};
enum _1AB89FD39F61641BE12A9F650378D914 {CSMAGIC_REQUIREMENT = 0xFADE0C00,CSMAGIC_REQUIREMENTS = 0xFADE0C01,CSMAGIC_CODEDIRECTORY = 0xFADE0C02,CSMAGIC_EMBEDDED_SIGNATURE = 0xFADE0CC0,CSMAGIC_EMBEDDED_SIGNATURE_OLD = 0xFADE0B02,CSMAGIC_EMBEDDED_ENTITLEMENTS = 0xFADE7171,CSMAGIC_DETACHED_SIGNATURE = 0xFADE0CC1,CSMAGIC_BLOBWRAPPER = 0xFADE0B01,CS_SUPPORTSSCATTER = 0x20100,CS_SUPPORTSTEAMID = 0x20200,CS_SUPPORTSCODELIMIT64 = 0x20300,CS_SUPPORTSEXECSEG = 0x20400,CSSLOT_CODEDIRECTORY = 0x0,CSSLOT_INFOSLOT = 0x1,CSSLOT_REQUIREMENTS = 0x2,CSSLOT_RESOURCEDIR = 0x3,CSSLOT_APPLICATION = 0x4,CSSLOT_ENTITLEMENTS = 0x5,CSSLOT_ALTERNATE_CODEDIRECTORIES = 0x1000,CSSLOT_ALTERNATE_CODEDIRECTORY_MAX = 0x5,CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT = 0x1005,CSSLOT_SIGNATURESLOT = 0x10000,CSSLOT_IDENTIFICATIONSLOT = 0x10001,CSSLOT_TICKETSLOT = 0x10002,CSTYPE_INDEX_REQUIREMENTS = 0x2,CSTYPE_INDEX_ENTITLEMENTS = 0x5,CS_HASHTYPE_SHA1 = 0x1,CS_HASHTYPE_SHA256 = 0x2,CS_HASHTYPE_SHA256_TRUNCATED = 0x3,CS_HASHTYPE_SHA384 = 0x4,CS_SHA1_LEN = 0x14,CS_SHA256_LEN = 0x20,CS_SHA256_TRUNCATED_LEN = 0x14,CS_CDHASH_LEN = 0x14,CS_HASH_MAX_SIZE = 0x30,CS_SIGNER_TYPE_UNKNOWN = 0x0,CS_SIGNER_TYPE_LEGACYVPN = 0x5,};
enum _1ACD0970B388A80CF69666CC63752A7C {kIOWSAA_Unaccelerated = 0x0,kIOWSAA_Accelerated = 0x1,kIOWSAA_From_Accelerated = 0x2,kIOWSAA_To_Accelerated = 0x3,kIOWSAA_Sleep = 0x4,kIOWSAA_Hibernate = 0x4,kIOWSAA_DriverOpen = 0x5,kIOWSAA_StateMask = 0xF,kIOWSAA_Transactional = 0x10,kIOWSAA_DeferStart = 0x100,kIOWSAA_DeferEnd = 0x200,kIOWSAA_NonConsoleDevice = 0x400,kIOWSAA_Reserved = 0xF0000000,};
enum _1AF55D75E5F67CE22EF3E2680B4B0AF1 {CCASN1_EOL = 0x0,CCASN1_BOOLEAN = 0x1,CCASN1_INTEGER = 0x2,CCASN1_BIT_STRING = 0x3,CCASN1_OCTET_STRING = 0x4,CCASN1_NULL = 0x5,CCASN1_OBJECT_IDENTIFIER = 0x6,CCASN1_OBJECT_DESCRIPTOR = 0x7,CCASN1_REAL = 0x9,CCASN1_ENUMERATED = 0xA,CCASN1_EMBEDDED_PDV = 0xB,CCASN1_UTF8_STRING = 0xC,CCASN1_SEQUENCE = 0x10,CCASN1_SET = 0x11,CCASN1_NUMERIC_STRING = 0x12,CCASN1_PRINTABLE_STRING = 0x13,CCASN1_T61_STRING = 0x14,CCASN1_VIDEOTEX_STRING = 0x15,CCASN1_IA5_STRING = 0x16,CCASN1_UTC_TIME = 0x17,CCASN1_GENERALIZED_TIME = 0x18,CCASN1_GRAPHIC_STRING = 0x19,CCASN1_VISIBLE_STRING = 0x1A,CCASN1_GENERAL_STRING = 0x1B,CCASN1_UNIVERSAL_STRING = 0x1C,CCASN1_BMP_STRING = 0x1E,CCASN1_HIGH_TAG_NUMBER = 0x1F,CCASN1_TELETEX_STRING = 0x14,CCASN1_TAG_MASK = 0xFF,CCASN1_TAGNUM_MASK = 0x1F,CCASN1_METHOD_MASK = 0x20,CCASN1_PRIMITIVE = 0x0,CCASN1_CONSTRUCTED = 0x20,CCASN1_CLASS_MASK = 0xC0,CCASN1_UNIVERSAL = 0x0,CCASN1_APPLICATION = 0x40,CCASN1_CONTEXT_SPECIFIC = 0x80,CCASN1_PRIVATE = 0xC0,CCASN1_CONSTRUCTED_SET = 0x31,CCASN1_CONSTRUCTED_SEQUENCE = 0x30,};
enum _1B024B3FD29CA262A200FC4B7C451734 {kFWSelfIDPortStatusChild = 0x3,kFWSelfIDPortStatusParent = 0x2,kFWSelfIDPortStatusNotConnected = 0x1,kFWSelfIDPortStatusNotPresent = 0x0,kFWSelfIDNoPower = 0x0,kFWSelfIDSelfPowered15W = 0x1,kFWSelfIDSelfPowered30W = 0x2,kFWSelfIDSelfPowered45W = 0x3,kFWSelfIDBusPowered1W = 0x4,kFWSelfIDBusPowered3W = 0x5,kFWSelfIDBusPowered6W = 0x6,kFWSelfIDBusPowered10W = 0x7,kFWSelfIDPhyID = 0x3F000000,kFWSelfIDPhyIDPhase = 0x18,kFWSelfIDM = 0x1,kFWSelfID0L = 0x400000,kFWSelfID0GapCnt = 0x3F0000,kFWSelfID0GapCntPhase = 0x10,kFWSelfID0SP = 0xC000,kFWSelfID0SPPhase = 0xE,kFWSelfID0Del = 0x3000,kFWSelfID0DelPhase = 0xC,kFWSelfID0C = 0x800,kFWSelfID0Pwr = 0x700,kFWSelfID0PwrPhase = 0x8,kFWSelfID0P0 = 0xC0,kFWSelfID0P0Phase = 0x6,kFWSelfID0P1 = 0x30,kFWSelfID0P1Phase = 0x4,kFWSelfID0P2 = 0xC,kFWSelfID0P2Phase = 0x2,kFWSelfID0I = 0x2,kFWSelfIDPacketType = 0x800000,kFWSelfIDNN = 0x700000,kFWSelfIDNNPhase = 0x14,kFWSelfIDNPa = 0x30000,kFWSelfIDNPaPhase = 0x10,kFWSelfIDNPb = 0xC000,kFWSelfIDNPbPhase = 0xE,kFWSelfIDNPc = 0x3000,kFWSelfIDNPcPhase = 0xC,kFWSelfIDNPd = 0xC00,kFWSelfIDNPdPhase = 0xA,kFWSelfIDNPe = 0x300,kFWSelfIDNPePhase = 0x8,kFWSelfIDNPf = 0xC0,kFWSelfIDNPfPhase = 0x6,kFWSelfIDNPg = 0x30,kFWSelfIDNPgPhase = 0x4,kFWSelfIDNPh = 0xC,kFWSelfIDNPhPhase = 0x2,kFWSelfIDMore = 0x1,};
enum _1B0874B457CFE22A4FC5E4B0220D4CDB {kConnectionFlags = 0x666C6773,kConnectionSyncEnable = 0x73796E63,kConnectionSyncFlags = 0x73796366,kConnectionSupportsAppleSense = 0x61736E73,kConnectionSupportsLLDDCSense = 0x6C646463,kConnectionSupportsHLDDCSense = 0x68646463,kConnectionEnable = 0x656E6162,kConnectionCheckEnable = 0x63656E61,kConnectionProbe = 0x70726F62,kConnectionIgnore = 0x696772,kConnectionChanged = 0x63686E67,kConnectionPower = 0x706F7772,kConnectionPostWake = 0x7077616B,kConnectionDisplayParameterCount = 0x70636E74,kConnectionDisplayParameters = 0x7061726D,kConnectionOverscan = 0x6F73636E,kConnectionVideoBest = 0x76627374,kConnectionRedGammaScale = 0x72677363,kConnectionGreenGammaScale = 0x67677363,kConnectionBlueGammaScale = 0x62677363,kConnectionGammaScale = 0x67736320,kConnectionFlushParameters = 0x666C7573,kConnectionVBLMultiplier = 0x76626C6D,kConnectionHandleDisplayPortEvent = 0x64706972,kConnectionPanelTimingDisable = 0x706E6C74,kConnectionColorMode = 0x63797576,kConnectionColorModesSupported = 0x636F6C72,kConnectionColorDepthsSupported = 0x20627063,kConnectionControllerDepthsSupported = 0x677264,kConnectionControllerColorDepth = 0x647064,kConnectionControllerDitherControl = 0x676463,kConnectionDisplayFlags = 0x64666C67,kConnectionEnableAudio = 0x61756420,kConnectionAudioStreaming = 0x61756473,kConnectionStartOfFrameTime = 0x736F6674,};
enum _1B702F1085FC0406762F51974EEF410A {kDTMaxEntryNameLength = 0x3F,};
enum _1C0097922B2390254DB1D20918E08555 {kIOAudioControlUsageOutput = 0x6F757470,kIOAudioControlUsageInput = 0x696E7074,kIOAudioControlUsagePassThru = 0x70617373,kIOAudioControlUsageCoreAudioProperty = 0x70726F70,};
enum _1CA510EA231E6F8AF774DC4017962002 {kIOPowerEmergencyLevel = 0x3E8,};
enum _1CEEEA5AD39BD5A70286FB8064326DFA {kBluetoothGAPAppearanceUnknown = 0x0,kBluetoothGAPAppearanceGenericPhone = 0x40,kBluetoothGAPAppearanceGenericComputer = 0x80,kBluetoothGAPAppearanceGenericWatch = 0xC0,kBluetoothGAPAppearanceGenericClock = 0x100,kBluetoothGAPAppearanceGenericDisplay = 0x140,kBluetoothGAPAppearanceGenericRemoteControl = 0x180,kBluetoothGAPAppearanceGenericEyeGlasses = 0x1C0,kBluetoothGAPAppearanceGenericTag = 0x200,kBluetoothGAPAppearanceGenericKeyring = 0x240,kBluetoothGAPAppearanceGenericMediaPlayer = 0x280,kBluetoothGAPAppearanceGenericBarcodeScanner = 0x2C0,kBluetoothGAPAppearanceGenericThermometer = 0x300,kBluetoothGAPAppearanceGenericHeartrateSensor = 0x340,kBluetoothGAPAppearanceGenericBloodPressure = 0x380,kBluetoothGAPAppearanceGenericHumanInterfaceDevice = 0x3C0,kBluetoothGAPAppearanceHumanInterfaceDeviceKeyboard = 0x3C1,kBluetoothGAPAppearanceHumanInterfaceDeviceMouse = 0x3C2,kBluetoothGAPAppearanceHumanInterfaceDeviceJoystick = 0x3C3,kBluetoothGAPAppearanceHumanInterfaceDeviceGamepad = 0x3C4,kBluetoothGAPAppearanceHumanInterfaceDeviceDigitizerTablet = 0x3C5,kBluetoothGAPAppearanceHumanInterfaceDeviceCardReader = 0x3C6,kBluetoothGAPAppearanceHumanInterfaceDeviceDigitalPen = 0x3C7,kBluetoothGAPAppearanceHumanInterfaceDeviceBarcodeScanner = 0x3C8,kBluetoothGAPAppearanceGenericGlucoseMeter = 0x400,kBluetoothGAPAppearanceGenericRunningWalkingSensor = 0x440,kBluetoothGAPAppearanceGenericCycling = 0x480,};
enum _1D95FAD92B399AB34F5535CB63E92644 {kIOHIDServerConnectType = 0x0,kIOHIDParamConnectType = 0x1,kIOHIDEventSystemConnectType = 0x3,};
enum _1DC3C5F43280BACC9BEADC6F5BE2A7D1 {kIOMirrorDefault = 0x1,kIOMirrorForced = 0x2,};
enum _1DE88472FA6516066358E6ADBAFFA51F {kIOMemoryDirectionMask = 0x7,kIOMemoryTypeVirtual = 0x10,kIOMemoryTypePhysical = 0x20,kIOMemoryTypeUPL = 0x30,kIOMemoryTypePersistentMD = 0x40,kIOMemoryTypeUIO = 0x50,kIOMemoryTypeVirtual64 = 0x60,kIOMemoryTypePhysical64 = 0x70,kIOMemoryTypeMask = 0xF0,kIOMemoryAsReference = 0x100,kIOMemoryBufferPageable = 0x400,kIOMemoryMapperNone = 0x800,kIOMemoryHostOnly = 0x1000,kIOMemoryPersistent = 0x10000,kIOMemoryMapCopyOnWrite = 0x20000,kIOMemoryRemote = 0x40000,kIOMemoryThreadSafe = 0x100000,kIOMemoryClearEncrypt = 0x200000,kIOMemoryUseReserve = 0x800000,};
enum _1ED9766E275A12D1AE711AAFB07DC0BF {kFWCSRStateGone = 0x8000,kFWCSRStateLinkOff = 0x200,kFWCSRStateCMstr = 0x100,};
enum _1F1BF5FB7529F18358EA20A45ABC8183 {kNilOptions = 0x0,};
enum _1F9E0F517BD490CF6FE0E23F60F7AD67 {kHIDUsage_Sim_FlightSimulationDevice = 0x1,kHIDUsage_Sim_AutomobileSimulationDevice = 0x2,kHIDUsage_Sim_TankSimulationDevice = 0x3,kHIDUsage_Sim_SpaceshipSimulationDevice = 0x4,kHIDUsage_Sim_SubmarineSimulationDevice = 0x5,kHIDUsage_Sim_SailingSimulationDevice = 0x6,kHIDUsage_Sim_MotorcycleSimulationDevice = 0x7,kHIDUsage_Sim_SportsSimulationDevice = 0x8,kHIDUsage_Sim_AirplaneSimulationDevice = 0x9,kHIDUsage_Sim_HelicopterSimulationDevice = 0xA,kHIDUsage_Sim_MagicCarpetSimulationDevice = 0xB,kHIDUsage_Sim_BicycleSimulationDevice = 0xC,kHIDUsage_Sim_FlightControlStick = 0x20,kHIDUsage_Sim_FlightStick = 0x21,kHIDUsage_Sim_CyclicControl = 0x22,kHIDUsage_Sim_CyclicTrim = 0x23,kHIDUsage_Sim_FlightYoke = 0x24,kHIDUsage_Sim_TrackControl = 0x25,kHIDUsage_Sim_Aileron = 0xB0,kHIDUsage_Sim_AileronTrim = 0xB1,kHIDUsage_Sim_AntiTorqueControl = 0xB2,kHIDUsage_Sim_AutopilotEnable = 0xB3,kHIDUsage_Sim_ChaffRelease = 0xB4,kHIDUsage_Sim_CollectiveControl = 0xB5,kHIDUsage_Sim_DiveBrake = 0xB6,kHIDUsage_Sim_ElectronicCountermeasures = 0xB7,kHIDUsage_Sim_Elevator = 0xB8,kHIDUsage_Sim_ElevatorTrim = 0xB9,kHIDUsage_Sim_Rudder = 0xBA,kHIDUsage_Sim_Throttle = 0xBB,kHIDUsage_Sim_FlightCommunications = 0xBC,kHIDUsage_Sim_FlareRelease = 0xBD,kHIDUsage_Sim_LandingGear = 0xBE,kHIDUsage_Sim_ToeBrake = 0xBF,kHIDUsage_Sim_Trigger = 0xC0,kHIDUsage_Sim_WeaponsArm = 0xC1,kHIDUsage_Sim_Weapons = 0xC2,kHIDUsage_Sim_WingFlaps = 0xC3,kHIDUsage_Sim_Accelerator = 0xC4,kHIDUsage_Sim_Brake = 0xC5,kHIDUsage_Sim_Clutch = 0xC6,kHIDUsage_Sim_Shifter = 0xC7,kHIDUsage_Sim_Steering = 0xC8,kHIDUsage_Sim_TurretDirection = 0xC9,kHIDUsage_Sim_BarrelElevation = 0xCA,kHIDUsage_Sim_DivePlane = 0xCB,kHIDUsage_Sim_Ballast = 0xCC,kHIDUsage_Sim_BicycleCrank = 0xCD,kHIDUsage_Sim_HandleBars = 0xCE,kHIDUsage_Sim_FrontBrake = 0xCF,kHIDUsage_Sim_RearBrake = 0xD0,kHIDUsage_Sim_Reserved = 0xFFFF,};
enum _1FCF3A00493E526B60C7CAECAED5901F {kIOFBMainCursorIndex = 0x0,kIOFBWaitCursorIndex = 0x1,kIOFBNumCursorIndex = 0x4,kIOFBMaxCursorDepth = 0x20,kIOFBMaxCursorWidth = 0x100,kIOFBMaxCursorFrames = 0x20,};
enum _1FDF46912519EFBEDAD3927C8F862716 {kPCIPMCSPMEStatus = 0x8000,kPCIPMCSPMEEnable = 0x100,kPCIPMCSPowerStateMask = 0x3,kPCIPMCSPowerStateD3 = 0x3,kPCIPMCSPowerStateD2 = 0x2,kPCIPMCSPowerStateD1 = 0x1,kPCIPMCSPowerStateD0 = 0x0,kPCIPMCSDefaultEnableBits = 0xFFFFFFFF,kPCIPMCSPMEDisableInS3 = 0x10000,kPCIPMCSPMEWakeReason = 0x20000,};
enum _1FE84A94802919B37ED6709E45A08EE7 {kIOBlitSynchronizeWaitBeamExit = 0x1,kIOBlitSynchronizeFlushHostWrites = 0x2,};
enum _20164242D58CD7267A90A5ED64D0CDC0 {kBluetoothHCIEventInquiryComplete = 0x1,kBluetoothHCIEventInquiryResult = 0x2,kBluetoothHCIEventConnectionComplete = 0x3,kBluetoothHCIEventConnectionRequest = 0x4,kBluetoothHCIEventDisconnectionComplete = 0x5,kBluetoothHCIEventAuthenticationComplete = 0x6,kBluetoothHCIEventRemoteNameRequestComplete = 0x7,kBluetoothHCIEventEncryptionChange = 0x8,kBluetoothHCIEventChangeConnectionLinkKeyComplete = 0x9,kBluetoothHCIEventMasterLinkKeyComplete = 0xA,kBluetoothHCIEventReadRemoteSupportedFeaturesComplete = 0xB,kBluetoothHCIEventReadRemoteVersionInformationComplete = 0xC,kBluetoothHCIEventQoSSetupComplete = 0xD,kBluetoothHCIEventCommandComplete = 0xE,kBluetoothHCIEventCommandStatus = 0xF,kBluetoothHCIEventHardwareError = 0x10,kBluetoothHCIEventFlushOccurred = 0x11,kBluetoothHCIEventRoleChange = 0x12,kBluetoothHCIEventNumberOfCompletedPackets = 0x13,kBluetoothHCIEventModeChange = 0x14,kBluetoothHCIEventReturnLinkKeys = 0x15,kBluetoothHCIEventPINCodeRequest = 0x16,kBluetoothHCIEventLinkKeyRequest = 0x17,kBluetoothHCIEventLinkKeyNotification = 0x18,kBluetoothHCIEventLoopbackCommand = 0x19,kBluetoothHCIEventDataBufferOverflow = 0x1A,kBluetoothHCIEventMaxSlotsChange = 0x1B,kBluetoothHCIEventReadClockOffsetComplete = 0x1C,kBluetoothHCIEventConnectionPacketType = 0x1D,kBluetoothHCIEventQoSViolation = 0x1E,kBluetoothHCIEventPageScanModeChange = 0x1F,kBluetoothHCIEventPageScanRepetitionModeChange = 0x20,kBluetoothHCIEventFlowSpecificationComplete = 0x21,kBluetoothHCIEventInquiryResultWithRSSI = 0x22,kBluetoothHCIEventReadRemoteExtendedFeaturesComplete = 0x23,kBluetoothHCIEventSynchronousConnectionComplete = 0x2C,kBluetoothHCIEventSynchronousConnectionChanged = 0x2D,kBluetoothHCIEventSniffSubrating = 0x2E,kBluetoothHCIEventExtendedInquiryResult = 0x2F,kBluetoothHCIEventEncryptionKeyRefreshComplete = 0x30,kBluetoothHCIEventIOCapabilityRequest = 0x31,kBluetoothHCIEventIOCapabilityResponse = 0x32,kBluetoothHCIEventUserConfirmationRequest = 0x33,kBluetoothHCIEventUserPasskeyRequest = 0x34,kBluetoothHCIEventRemoteOOBDataRequest = 0x35,kBluetoothHCIEventSimplePairingComplete = 0x36,kBluetoothHCIEventLinkSupervisionTimeoutChanged = 0x38,kBluetoothHCIEventEnhancedFlushComplete = 0x39,kBluetoothHCIEventUserPasskeyNotification = 0x3B,kBluetoothHCIEventKeypressNotification = 0x3C,kBluetoothHCIEventRemoteHostSupportedFeaturesNotification = 0x3D,kBluetoothHCIEventLEMetaEvent = 0x3E,kBluetoothHCISubEventLEConnectionComplete = 0x1,kBluetoothHCISubEventLEAdvertisingReport = 0x2,kBluetoothHCISubEventLEConnectionUpdateComplete = 0x3,kBluetoothHCISubEventLEReadRemoteUsedFeaturesComplete = 0x4,kBluetoothHCISubEventLELongTermKeyRequest = 0x5,kBluetoothHCISubEventLERemoteConnectionParameterRequest = 0x6,kBluetoothHCISubEventLEDataLengthChange = 0x7,kBluetoothHCISubEventLEReadLocalP256PublicKeyComplete = 0x8,kBluetoothHCISubEventLEGenerateDHKeyComplete = 0x9,kBluetoothHCISubEventLEEnhancedConnectionComplete = 0xA,kBluetoothHCISubEventLEDirectAdvertisingReport = 0xB,kBluetoothHCISubEventLEPhyUpdateComplete = 0xC,kBluetoothHCISubEventLEExtendedAdvertising = 0xD,kBluetoothHCISubEventLEPeriodicAdvertisingSyncEstablished = 0xE,kBluetoothHCISubEventLEPeriodicAdvertisingReport = 0xF,kBluetoothHCISubEventLEPeriodicAdvertisingSyncLost = 0x10,kBluetoothHCISubEventLEScanTimeout = 0x11,kBluetoothHCISubEventLEAdvertisingSetTerminated = 0x12,kBluetoothHCISubEventLEScanRequestReceived = 0x13,kBluetoothHCISubEventLEChannelSelectionAlgorithm = 0x14,LE_EXTENDED_ADVERTISING_REPORT_SUBEVENT = 0xD,LE_PERIODIC_ADVERTISING_SYNC_ESTABLISHED_SUBEVENT = 0xE,LE_PERIODIC_ADVERTISING_REPORT_SUBEVENT = 0xF,LE_PERIODIC_ADVERTISING_SYNC_LOST_SUBEVENT = 0x10,LE_SCAN_TIMEOUT_SUBEVENT = 0x11,LE_ADVERTISING_SET_TERMINATED_SUBEVENT = 0x12,LE_SCAN_REQUEST_RECEIVED_SUBEVENT = 0x13,LE_CHANNEL_SELECTION_ALGORITHM_SUBEVENT = 0x14,kBluetoothHCIEventPhysicalLinkComplete = 0x40,kBluetoothHCIEventChannelSelected = 0x41,kBluetoothHCIEventDisconnectionPhysicalLinkComplete = 0x42,kBluetoothHCIEventPhysicalLinkLossEarlyWarning = 0x43,kBluetoothHCIEventPhysicalLinkRecovery = 0x44,kBluetoothHCIEventLogicalLinkComplete = 0x45,kBluetoothHCIEventDisconnectionLogicalLinkComplete = 0x46,kBluetoothHCIEventFlowSpecModifyComplete = 0x47,kBluetoothHCIEventNumberOfCompletedDataBlocks = 0x48,kBluetoothHCIEventShortRangeModeChangeComplete = 0x4C,kBluetoothHCIEventAMPStatusChange = 0x4D,kBluetoothHCIEventAMPStartTest = 0x49,kBluetoothHCIEventAMPTestEnd = 0x4A,kBluetoothHCIEventAMPReceiverReport = 0x4B,kBluetoothHCIEventLogoTesting = 0xFE,kBluetoothHCIEventVendorSpecific = 0xFF,};
enum _20A12FA4178518C591B57973266CC88E {kUSBBillboardAdditinalInfoNoPower = 0x1,kUSBBillboardAdditinalInfoNoUSBPD = 0x2,};
enum _20B9A2FBAEDFAF71286083A7D726EB30 {kUSBDevice = 0x0,kUSBInterface = 0x1,kUSBEndpoint = 0x2,kUSBOther = 0x3,};
enum _2119A771ACA28711A9C20F0D40B0F5D4 {kXHCISSRootHubAddress = 0x80,kXHCIUSB2RootHubAddress = 0x81,kSuperSpeedBusBitMask = 0x1000000,};
enum _215FBF23D34CD98CFB40CCDD29C5A5E7 {cscGetMode = 0x2,cscGetEntries = 0x3,cscGetPageCnt = 0x4,cscGetPages = 0x4,cscGetPageBase = 0x5,cscGetBaseAddr = 0x5,cscGetGray = 0x6,cscGetInterrupt = 0x7,cscGetGamma = 0x8,cscGetDefaultMode = 0x9,cscGetCurMode = 0xA,cscGetSync = 0xB,cscGetConnection = 0xC,cscGetModeTiming = 0xD,cscGetModeBaseAddress = 0xE,cscGetScanProc = 0xF,cscGetPreferredConfiguration = 0x10,cscGetNextResolution = 0x11,cscGetVideoParameters = 0x12,cscGetGammaInfoList = 0x14,cscRetrieveGammaTable = 0x15,cscSupportsHardwareCursor = 0x16,cscGetHardwareCursorDrawState = 0x17,cscGetConvolution = 0x18,cscGetPowerState = 0x19,cscPrivateStatusCall = 0x1A,cscGetDDCBlock = 0x1B,cscGetMultiConnect = 0x1C,cscGetClutBehavior = 0x1D,cscGetTimingRanges = 0x1E,cscGetDetailedTiming = 0x1F,cscGetCommunicationInfo = 0x20,cscGetScalerInfo = 0x23,cscGetScaler = 0x24,cscGetMirror = 0x25,cscGetFeatureConfiguration = 0x26,cscGetFeatureList = 0x27,};
enum _216450BBAB56E6F055533C1B5239022D {kINQUIRY_StandardDataHeaderSize = 0x5,kINQUIRY_MaximumDataSize = 0xFF,};
enum _219A9F38A66307CD49DFB0A61EA9244C {SFLT_GLOBAL = 0x1,SFLT_PROG = 0x2,SFLT_EXTENDED = 0x4,SFLT_EXTENDED_REGISTRY = 0x8,};
enum _21BA4AC2705DB5AB34DC9D8A2FB0F59A {kPrdRootHubApple = 0x8005,kPrdRootHubAppleE = 0x8006,kPrdRootHubAppleSS = 0x8007,kUSBRootHubPollingRate = 0x20,};
enum _2203690896F972A9D3CC0EE9B8B6A97B {BLOCK_BYREF_LAYOUT_MASK = 0xF0000000,BLOCK_BYREF_LAYOUT_EXTENDED = 0x10000000,BLOCK_BYREF_LAYOUT_NON_OBJECT = 0x20000000,BLOCK_BYREF_LAYOUT_STRONG = 0x30000000,BLOCK_BYREF_LAYOUT_WEAK = 0x40000000,BLOCK_BYREF_LAYOUT_UNRETAINED = 0x50000000,BLOCK_BYREF_IS_GC = 0x8000000,BLOCK_BYREF_HAS_COPY_DISPOSE = 0x2000000,BLOCK_BYREF_NEEDS_FREE = 0x1000000,};
enum _227ABB699291828DA62D09DD8BF78461 {kIOAudioSelectorControlSelectionValueNone = 0x6E6F6E65,kIOAudioSelectorControlSelectionValueInternalSpeaker = 0x6973706B,kIOAudioSelectorControlSelectionValueExternalSpeaker = 0x6573706B,kIOAudioSelectorControlSelectionValueHeadphones = 0x6864706E,kIOAudioSelectorControlSelectionValueInternalMicrophone = 0x696D6963,kIOAudioSelectorControlSelectionValueExternalMicrophone = 0x656D6963,kIOAudioSelectorControlSelectionValueCD = 0x63642020,kIOAudioSelectorControlSelectionValueLine = 0x6C696E65,kIOAudioSelectorControlSelectionValueSPDIF = 0x73706466,};
enum _2332725978EC653980548ABAE05D5720 {kIONetworkDataBufferTypeInternal = 0x0,kIONetworkDataBufferTypeExternal = 0x1,kIONetworkDataBufferTypeNone = 0x2,};
enum _23C38E905DA2AC4D2DD87A61517CEE99 {kJIJournalInFSMask = 0x1,kJIJournalOnOtherDeviceMask = 0x2,kJIJournalNeedInitMask = 0x4,};
enum _23D5E15D0D4FCE853B5687AD6DBA52AA {kIOPSFamilyCodeDisconnected = 0x0,kIOPSFamilyCodeUnsupported = 0xE00002C7,kIOPSFamilyCodeFirewire = 0xE0008000,kIOPSFamilyCodeUSBHost = 0xE0004000,kIOPSFamilyCodeUSBHostSuspended = 0xE0004001,kIOPSFamilyCodeUSBDevice = 0xE0004002,kIOPSFamilyCodeUSBAdapter = 0xE0004003,kIOPSFamilyCodeUSBChargingPortDedicated = 0xE0004004,kIOPSFamilyCodeUSBChargingPortDownstream = 0xE0004005,kIOPSFamilyCodeUSBChargingPort = 0xE0004006,kIOPSFamilyCodeUSBUnknown = 0xE0004007,kIOPSFamilyCodeUSBCBrick = 0xE0004008,kIOPSFamilyCodeUSBCTypeC = 0xE0004009,kIOPSFamilyCodeUSBCPD = 0xE000400A,kIOPSFamilyCodeAC = 0xE0024000,kIOPSFamilyCodeExternal = 0xE0024001,kIOPSFamilyCodeExternal2 = 0xE0024002,kIOPSFamilyCodeExternal3 = 0xE0024003,kIOPSFamilyCodeExternal4 = 0xE0024004,kIOPSFamilyCodeExternal5 = 0xE0024005,};
enum _2414B82DB72B2EC1A10947613C146619 {kIORangeSupportsInterlacedCEATiming = 0x4,kIORangeSupportsInterlacedCEATimingWithConfirm = 0x8,};
enum _247FA61D87A53360EEFB7F834A18B86E {kHubPortIndicatorAutomatic = 0x0,kHubPortIndicatorAmber = 0x1,kHubPortIndicatorGreen = 0x2,kHubPortIndicatorOff = 0x3,};
enum _24DAADA4E6223F6B3F3326817DFA44DB {kBluetoothHCIEventMaskNone = 0x0,kBluetoothHCIEventMaskInquiryComplete = 0x1,kBluetoothHCIEventMaskInquiryResult = 0x2,kBluetoothHCIEventMaskConnectionComplete = 0x4,kBluetoothHCIEventMaskConnectionRequest = 0x8,kBluetoothHCIEventMaskDisconnectionComplete = 0x10,kBluetoothHCIEventMaskAuthenticationComplete = 0x20,kBluetoothHCIEventMaskRemoteNameRequestComplete = 0x40,kBluetoothHCIEventMaskEncryptionChange = 0x80,kBluetoothHCIEventMaskChangeConnectionLinkKeyComplete = 0x100,kBluetoothHCIEventMaskMasterLinkKeyComplete = 0x200,kBluetoothHCIEventMaskReadRemoteSupportedFeaturesComplete = 0x400,kBluetoothHCIEventMaskReadRemoteVersionInformationComplete = 0x800,kBluetoothHCIEventMaskQoSSetupComplete = 0x1000,kBluetoothHCIEventMaskCommandComplete = 0x2000,kBluetoothHCIEventMaskCommandStatus = 0x4000,kBluetoothHCIEventMaskHardwareError = 0x8000,kBluetoothHCIEventMaskFlushOccurred = 0x10000,kBluetoothHCIEventMaskRoleChange = 0x20000,kBluetoothHCIEventMaskNumberOfCompletedPackets = 0x40000,kBluetoothHCIEventMaskModeChange = 0x80000,kBluetoothHCIEventMaskReturnLinkKeys = 0x100000,kBluetoothHCIEventMaskPINCodeRequest = 0x200000,kBluetoothHCIEventMaskLinkKeyRequest = 0x400000,kBluetoothHCIEventMaskLinkKeyNotification = 0x800000,kBluetoothHCIEventMaskLoopbackCommand = 0x1000000,kBluetoothHCIEventMaskDataBufferOverflow = 0x2000000,kBluetoothHCIEventMaskMaxSlotsChange = 0x4000000,kBluetoothHCIEventMaskReadClockOffsetComplete = 0x8000000,kBluetoothHCIEventMaskConnectionPacketTypeChanged = 0x10000000,kBluetoothHCIEventMaskQoSViolation = 0x20000000,kBluetoothHCIEventMaskPageScanModeChange = 0x40000000,kBluetoothHCIEventMaskPageScanRepetitionModeChange = 0x80000000,kBluetoothHCIEventMaskAll = 0xFFFFFFFF,kBluetoothHCIEventMaskDefault = 0xFFFFFFFF,};
enum _251D84BDD680EF1CDA00F7FE968104DA {kIOI2CUseSubAddressCommFlag = 0x2,};
enum _259AFB33C6B96AE53B2CF2C619DF3ACC {kIONDRVOpenCommand = 0x80,kIONDRVCloseCommand = 0x81,kIONDRVReadCommand = 0x82,kIONDRVWriteCommand = 0x83,kIONDRVControlCommand = 0x84,kIONDRVStatusCommand = 0x85,kIONDRVKillIOCommand = 0x86,kIONDRVInitializeCommand = 0x87,kIONDRVFinalizeCommand = 0x88,kIONDRVReplaceCommand = 0x89,kIONDRVSupersededCommand = 0x8A,};
enum _26B494A3031B2FE72AC69CD2B9B31B6E {kIODynamicRangeNotSupported = 0x0,kIODynamicRangeSDR = 0x1,kIODynamicRangeHDR10 = 0x2,kIODynamicRangeDolbyNormalMode = 0x4,kIODynamicRangeDolbyTunnelMode = 0x8,kIODynamicRangeTraditionalGammaHDR = 0x10,};
enum _26D80DD3384FCD8DBFA23BA7B2C00A54 {kINQUIRY_VENDOR_IDENTIFICATION_Length = 0x8,kINQUIRY_PRODUCT_IDENTIFICATION_Length = 0x10,kINQUIRY_PRODUCT_REVISION_LEVEL_Length = 0x4,};
enum _2793FD2EAC7102D58D5D08F81C8FAE54 {kIOVideoSelectorControlClassIDDataSource = 0x64737263,kIOVideoSelectorControlClassIDDataDestination = 0x64657374,};
enum _27B53B19F7A4DF76FE9AD815D8E4144A {kUSBFullSpeedMicrosecondsInFrame = 0x3E8,kUSBHighSpeedMicrosecondsInFrame = 0x7D,};
enum _27D4CDDD4ED5A07EB211E9F4FE80514D {FFT_RADIX2 = 0x0,FFT_RADIX3 = 0x1,FFT_RADIX5 = 0x2,};
enum _27F7A84BA929A897DBAAF45684365083 {kUSBLowLatencyIsochTransferKey = 0x6C6C6974,};
enum _281CB5EBF661E6BDF0F88D055321A086 {kIOPCICapabilityIDOffset = 0x0,kIOPCINextCapabilityOffset = 0x1,kIOPCIPowerManagementCapability = 0x1,kIOPCIAGPCapability = 0x2,kIOPCIVitalProductDataCapability = 0x3,kIOPCISlotIDCapability = 0x4,kIOPCIMSICapability = 0x5,kIOPCICPCIHotswapCapability = 0x6,kIOPCIPCIXCapability = 0x7,kIOPCILDTCapability = 0x8,kIOPCIVendorSpecificCapability = 0x9,kIOPCIDebugPortCapability = 0xA,kIOPCICPCIResourceControlCapability = 0xB,kIOPCIHotplugCapability = 0xC,kIOPCIAGP8Capability = 0xE,kIOPCISecureCapability = 0xF,kIOPCIPCIExpressCapability = 0x10,kIOPCIMSIXCapability = 0x11,kIOPCIFPBCapability = 0x15,kIOPCIExpressErrorReportingCapability = 0xFFFFFFFF,kIOPCIExpressVirtualChannelCapability = 0xFFFFFFFE,kIOPCIExpressDeviceSerialNumberCapability = 0xFFFFFFFD,kIOPCIExpressPowerBudgetCapability = 0xFFFFFFFC,kIOPCIExpressLatencyTolerenceReportingCapability = 0xFFFFFFE8,kIOPCIExpressL1PMSubstatesCapability = 0xFFFFFFE2,};
enum _283D60A84160908A732509382BEDFD09 {kUSBSpeed_Mask = 0x3,kUSBSpeed_Shift = 0x0,kUSBAddress_Mask = 0xFF00,kUSBAddress_Shift = 0x8,};
enum _2862423C6E64CE1B4C377C68A7D60CB8 {kFWMaxBusses = 0x3FF,kFWMaxNodesPerBus = 0x3F,kFWMaxNodeHops = 0x10,};
enum _28731036AE9E194A616E2B30C7836417 {kIOPacketFilterUnicast = 0x1,kIOPacketFilterBroadcast = 0x2,kIOPacketFilterMulticast = 0x10,kIOPacketFilterMulticastAll = 0x20,kIOPacketFilterPromiscuous = 0x100,kIOPacketFilterPromiscuousAll = 0x200,};
enum _28890F1C2BF46999445AC46AF2B690A7 {kIOAudioLevelControlNegativeInfinity = 0xFFFFFFFF,};
enum _28A06CB710366B3C9A5BA1DFCDF2809A {kIOPixelEncodingNotSupported = 0x0,kIOPixelEncodingRGB444 = 0x1,kIOPixelEncodingYCbCr444 = 0x2,kIOPixelEncodingYCbCr422 = 0x4,kIOPixelEncodingYCbCr420 = 0x8,};
enum _28BA5EE1D15794BBE0128DCC3DE87DE1 {kResolutionHasMultipleDepthSizes = 0x0,};
enum _28F17D04D576900CB12449ADDA1C9F80 {kCDFeaturesAnalogAudioMask = 0x1,kCDFeaturesReadStructuresMask = 0x2,kCDFeaturesWriteOnceMask = 0x4,kCDFeaturesReWriteableMask = 0x8,kCDFeaturesCDDAStreamAccurateMask = 0x10,kCDFeaturesPacketWriteMask = 0x20,kCDFeaturesTAOWriteMask = 0x40,kCDFeaturesSAOWriteMask = 0x80,kCDFeaturesRawWriteMask = 0x100,kCDFeaturesTestWriteMask = 0x200,kCDFeaturesBUFWriteMask = 0x400,};
enum _2915A9FF1049F0A4DACEC88CBE0E7D8E {kUSBDefaultControlNoDataTimeoutMS = 0x1388,kUSBDefaultControlCompletionTimeoutMS = 0x0,};
enum _2962120AAD6AC733EBF40B140CEE13B1 {kHIDDispatchOptionScrollNoAcceleration = 0x1,kHIDDispatchOptionScrollMomentumAny = 0xE,kHIDDispatchOptionScrollMomentumContinue = 0x2,kHIDDispatchOptionScrollMomentumStart = 0x4,kHIDDispatchOptionScrollMomentumEnd = 0x8,kHIDDispatchOptionPhaseAny = 0xFF0,kHIDDispatchOptionPhaseBegan = 0x10,kHIDDispatchOptionPhaseChanged = 0x20,kHIDDispatchOptionPhaseEnded = 0x40,kHIDDispatchOptionPhaseCanceled = 0x80,kHIDDispatchOptionPhaseMayBegin = 0x800,kHIDDispatchOptionDeliveryNotificationForce = 0x1000,kHIDDispatchOptionDeliveryNotificationSuppress = 0x2000,};
enum _296C2FB0ACE99606556185BEF23B26B4 {dot3ChipSetDigitalDC21040 = 0x1,dot3ChipSetDigitalDC21140 = 0x2,dot3ChipSetDigitalDC21041 = 0x3,dot3ChipSetDigitalDC21140A = 0x4,dot3ChipSetDigitalDC21142 = 0x5,};
enum _29C9B1C14FD855FA8B5F11337B2E2DFA {kIOTrackingGetTracking = 0x1,kIOTrackingGetMappings = 0x2,kIOTrackingResetTracking = 0x3,kIOTrackingStartCapture = 0x4,kIOTrackingStopCapture = 0x5,kIOTrackingSetMinCaptureSize = 0x6,kIOTrackingLeaks = 0x7,kIOTrackingInvalid = 0xFFFFFFFE,};
enum _2A0D697BB615CE157106FE0C0574EE84 {kIOPMUndefinedValue = 0x0,kIOPMPoorValue = 0x1,kIOPMFairValue = 0x2,kIOPMGoodValue = 0x3,};
enum _2A70056337896E2077B8D86F65D5DE7A {kHIDUsage_Button_1 = 0x1,kHIDUsage_Button_2 = 0x2,kHIDUsage_Button_3 = 0x3,kHIDUsage_Button_4 = 0x4,kHIDUsage_Button_65535 = 0xFFFF,};
enum _2A94D7F63386D8154CDCA92FB6AA3127 {kSSHubPortStatusConnectionBit = 0x0,kSSHubPortStatusEnabledBit = 0x1,kSSHubPortStatusOverCurrentBit = 0x3,kSSHubPortStatusResetBit = 0x4,kSSHubPortStatusLinkStateShift = 0x5,kSSHubPortStatusPowerBit = 0x9,kSSHubPortStatusSpeedShift = 0xA,kSSHubPortChangeBHResetBit = 0x5,kSSHubPortChangePortLinkStateBit = 0x6,kSSHubPortChangePortConfigErrBit = 0x7,kHubPortConnection = 0x1,kHubPortEnabled = 0x2,kHubPortSuspend = 0x4,kHubPortOverCurrent = 0x8,kHubPortBeingReset = 0x10,kHubPortPower = 0x100,kHubPortLowSpeed = 0x200,kHubPortHighSpeed = 0x400,kHubPortTestMode = 0x800,kHubPortIndicator = 0x1000,kHubPortSuperSpeed = 0x2000,kHubPortBit14 = 0x4000,kHubPortDebouncing = 0x8000,kSSHubPortStatusConnectionMask = 0x1,kSSHubPortStatusEnabledMask = 0x2,kSSHubPortStatusOverCurrentMask = 0x8,kSSHubPortStatusBeingResetMask = 0x10,kSSHubPortStatusLinkStateMask = 0x1E0,kSSHubPortStatusPowerMask = 0x200,kSSHubPortStatusSpeedMask = 0x1C00,kSSHubPortChangeBHResetMask = 0x20,kSSHubPortChangePortLinkStateMask = 0x40,kSSHubPortChangePortConfigErrMask = 0x80,kHubPortSuperSpeedStateChangeMask = 0xDF,kHubPortStateChangeMask = 0x1F,};
enum _2A9996383DC03C99477C5F886B43B2CA {kUSBCapsLockKey = 0x39,kUSBNumLockKey = 0x53,kUSBScrollLockKey = 0x47,};
enum _2AF12C08A94DC4EBBE66A232D08788C4 {kINQUIRY_Byte56_Offset = 0x38,kINQUIRY_Byte56_IUS_Bit = 0x0,kINQUIRY_Byte56_QAS_Bit = 0x1,kINQUIRY_Byte56_IUS_Mask = 0x1,kINQUIRY_Byte56_QAS_Mask = 0x2,kINQUIRY_Byte56_CLOCKING_Mask = 0xC,kINQUIRY_Byte56_CLOCKING_ONLY_ST = 0x0,kINQUIRY_Byte56_CLOCKING_ONLY_DT = 0x4,kINQUIRY_Byte56_CLOCKING_ST_AND_DT = 0xC,};
enum _2AFE5179E666C23DBD5AB345050C1311 {kFramebufferSupportsCopybackCache = 0x10000,kFramebufferSupportsWritethruCache = 0x20000,kFramebufferSupportsGammaCorrection = 0x40000,kFramebufferDisableAltivecAccess = 0x80000,};
enum _2B11C95E8A531B03E4E957883722762C {kSelfIDPacketSize = 0x8,kMaxSelfIDs = 0x4,};
enum _2BA1F3D97A8A229110DC9FFD209A753F {kHIDUsage_Csmr_ConsumerControl = 0x1,kHIDUsage_Csmr_NumericKeyPad = 0x2,kHIDUsage_Csmr_ProgrammableButtons = 0x3,kHIDUsage_Csmr_Microphone = 0x4,kHIDUsage_Csmr_Headphone = 0x5,kHIDUsage_Csmr_GraphicEqualizer = 0x6,kHIDUsage_Csmr_Plus10 = 0x20,kHIDUsage_Csmr_Plus100 = 0x21,kHIDUsage_Csmr_AMOrPM = 0x22,kHIDUsage_Csmr_Power = 0x30,kHIDUsage_Csmr_Reset = 0x31,kHIDUsage_Csmr_Sleep = 0x32,kHIDUsage_Csmr_SleepAfter = 0x33,kHIDUsage_Csmr_SleepMode = 0x34,kHIDUsage_Csmr_Illumination = 0x35,kHIDUsage_Csmr_FunctionButtons = 0x36,kHIDUsage_Csmr_Menu = 0x40,kHIDUsage_Csmr_MenuPick = 0x41,kHIDUsage_Csmr_MenuUp = 0x42,kHIDUsage_Csmr_MenuDown = 0x43,kHIDUsage_Csmr_MenuLeft = 0x44,kHIDUsage_Csmr_MenuRight = 0x45,kHIDUsage_Csmr_MenuEscape = 0x46,kHIDUsage_Csmr_MenuValueIncrease = 0x47,kHIDUsage_Csmr_MenuValueDecrease = 0x48,kHIDUsage_Csmr_DataOnScreen = 0x60,kHIDUsage_Csmr_ClosedCaption = 0x61,kHIDUsage_Csmr_ClosedCaptionSelect = 0x62,kHIDUsage_Csmr_VCROrTV = 0x63,kHIDUsage_Csmr_BroadcastMode = 0x64,kHIDUsage_Csmr_Snapshot = 0x65,kHIDUsage_Csmr_Still = 0x66,kHIDUsage_Csmr_PictureInPictureToggle = 0x67,kHIDUsage_Csmr_PictureInPictureSwap = 0x68,kHIDUsage_Csmr_RedMenuButton = 0x69,kHIDUsage_Csmr_GreenMenuButton = 0x6A,kHIDUsage_Csmr_BlueMenuButton = 0x6B,kHIDUsage_Csmr_YellowMenuButton = 0x6C,kHIDUsage_Csmr_Aspect = 0x6D,kHIDUsage_Csmr_3DModeSelect = 0x6E,kHIDUsage_Csmr_DisplayBrightnessIncrement = 0x6F,kHIDUsage_Csmr_DisplayBrightnessDecrement = 0x70,kHIDUsage_Csmr_DisplayBrightness = 0x71,kHIDUsage_Csmr_DisplayBacklightToggle = 0x72,kHIDUsage_Csmr_DisplayBrightnessMinimum = 0x73,kHIDUsage_Csmr_DisplayBrightnessMaximum = 0x74,kHIDUsage_Csmr_DisplayBrightnessSetAutoBrightness = 0x75,kHIDUsage_Csmr_Selection = 0x80,kHIDUsage_Csmr_Assign = 0x81,kHIDUsage_Csmr_ModeStep = 0x82,kHIDUsage_Csmr_RecallLast = 0x83,kHIDUsage_Csmr_EnterChannel = 0x84,kHIDUsage_Csmr_OrderMovie = 0x85,kHIDUsage_Csmr_Channel = 0x86,kHIDUsage_Csmr_MediaSelection = 0x87,kHIDUsage_Csmr_MediaSelectComputer = 0x88,kHIDUsage_Csmr_MediaSelectTV = 0x89,kHIDUsage_Csmr_MediaSelectWWW = 0x8A,kHIDUsage_Csmr_MediaSelectDVD = 0x8B,kHIDUsage_Csmr_MediaSelectTelephone = 0x8C,kHIDUsage_Csmr_MediaSelectProgramGuide = 0x8D,kHIDUsage_Csmr_MediaSelectVideoPhone = 0x8E,kHIDUsage_Csmr_MediaSelectGames = 0x8F,kHIDUsage_Csmr_MediaSelectMessages = 0x90,kHIDUsage_Csmr_MediaSelectCD = 0x91,kHIDUsage_Csmr_MediaSelectVCR = 0x92,kHIDUsage_Csmr_MediaSelectTuner = 0x93,kHIDUsage_Csmr_Quit = 0x94,kHIDUsage_Csmr_Help = 0x95,kHIDUsage_Csmr_MediaSelectTape = 0x96,kHIDUsage_Csmr_MediaSelectCable = 0x97,kHIDUsage_Csmr_MediaSelectSatellite = 0x98,kHIDUsage_Csmr_MediaSelectSecurity = 0x99,kHIDUsage_Csmr_MediaSelectHome = 0x9A,kHIDUsage_Csmr_MediaSelectCall = 0x9B,kHIDUsage_Csmr_ChannelIncrement = 0x9C,kHIDUsage_Csmr_ChannelDecrement = 0x9D,kHIDUsage_Csmr_Media = 0x9E,kHIDUsage_Csmr_VCRPlus = 0xA0,kHIDUsage_Csmr_Once = 0xA1,kHIDUsage_Csmr_Daily = 0xA2,kHIDUsage_Csmr_Weekly = 0xA3,kHIDUsage_Csmr_Monthly = 0xA4,kHIDUsage_Csmr_Play = 0xB0,kHIDUsage_Csmr_Pause = 0xB1,kHIDUsage_Csmr_Record = 0xB2,kHIDUsage_Csmr_FastForward = 0xB3,kHIDUsage_Csmr_Rewind = 0xB4,kHIDUsage_Csmr_ScanNextTrack = 0xB5,kHIDUsage_Csmr_ScanPreviousTrack = 0xB6,kHIDUsage_Csmr_Stop = 0xB7,kHIDUsage_Csmr_Eject = 0xB8,kHIDUsage_Csmr_RandomPlay = 0xB9,kHIDUsage_Csmr_SelectDisc = 0xBA,kHIDUsage_Csmr_EnterDisc = 0xBB,kHIDUsage_Csmr_Repeat = 0xBC,kHIDUsage_Csmr_Tracking = 0xBD,kHIDUsage_Csmr_TrackNormal = 0xBE,kHIDUsage_Csmr_SlowTracking = 0xBF,kHIDUsage_Csmr_FrameForward = 0xC0,kHIDUsage_Csmr_FrameBack = 0xC1,kHIDUsage_Csmr_Mark = 0xC2,kHIDUsage_Csmr_ClearMark = 0xC3,kHIDUsage_Csmr_RepeatFromMark = 0xC4,kHIDUsage_Csmr_ReturnToMark = 0xC5,kHIDUsage_Csmr_SearchMarkForward = 0xC6,kHIDUsage_Csmr_SearchMarkBackwards = 0xC7,kHIDUsage_Csmr_CounterReset = 0xC8,kHIDUsage_Csmr_ShowCounter = 0xC9,kHIDUsage_Csmr_TrackingIncrement = 0xCA,kHIDUsage_Csmr_TrackingDecrement = 0xCB,kHIDUsage_Csmr_StopOrEject = 0xCC,kHIDUsage_Csmr_PlayOrPause = 0xCD,kHIDUsage_Csmr_PlayOrSkip = 0xCE,kHIDUsage_Csmr_VoiceCommand = 0xCF,kHIDUsage_Csmr_Volume = 0xE0,kHIDUsage_Csmr_Balance = 0xE1,kHIDUsage_Csmr_Mute = 0xE2,kHIDUsage_Csmr_Bass = 0xE3,kHIDUsage_Csmr_Treble = 0xE4,kHIDUsage_Csmr_BassBoost = 0xE5,kHIDUsage_Csmr_SurroundMode = 0xE6,kHIDUsage_Csmr_Loudness = 0xE7,kHIDUsage_Csmr_MPX = 0xE8,kHIDUsage_Csmr_VolumeIncrement = 0xE9,kHIDUsage_Csmr_VolumeDecrement = 0xEA,kHIDUsage_Csmr_Speed = 0xF0,kHIDUsage_Csmr_PlaybackSpeed = 0xF1,kHIDUsage_Csmr_StandardPlay = 0xF2,kHIDUsage_Csmr_LongPlay = 0xF3,kHIDUsage_Csmr_ExtendedPlay = 0xF4,kHIDUsage_Csmr_Slow = 0xF5,kHIDUsage_Csmr_FanEnable = 0x100,kHIDUsage_Csmr_FanSpeed = 0x101,kHIDUsage_Csmr_LightEnable = 0x102,kHIDUsage_Csmr_LightIlluminationLevel = 0x103,kHIDUsage_Csmr_ClimateControlEnable = 0x104,kHIDUsage_Csmr_RoomTemperature = 0x105,kHIDUsage_Csmr_SecurityEnable = 0x106,kHIDUsage_Csmr_FireAlarm = 0x107,kHIDUsage_Csmr_PoliceAlarm = 0x108,kHIDUsage_Csmr_Proximity = 0x109,kHIDUsage_Csmr_Motion = 0x10A,kHIDUsage_Csmr_DuressAlarm = 0x10B,kHIDUsage_Csmr_HoldupAlarm = 0x10C,kHIDUsage_Csmr_MedicalAlarm = 0x10D,kHIDUsage_Csmr_BalanceRight = 0x150,kHIDUsage_Csmr_BalanceLeft = 0x151,kHIDUsage_Csmr_BassIncrement = 0x152,kHIDUsage_Csmr_BassDecrement = 0x153,kHIDUsage_Csmr_TrebleIncrement = 0x154,kHIDUsage_Csmr_TrebleDecrement = 0x155,kHIDUsage_Csmr_SpeakerSystem = 0x160,kHIDUsage_Csmr_ChannelLeft = 0x161,kHIDUsage_Csmr_ChannelRight = 0x162,kHIDUsage_Csmr_ChannelCenter = 0x163,kHIDUsage_Csmr_ChannelFront = 0x164,kHIDUsage_Csmr_ChannelCenterFront = 0x165,kHIDUsage_Csmr_ChannelSide = 0x166,kHIDUsage_Csmr_ChannelSurround = 0x167,kHIDUsage_Csmr_ChannelLowFrequencyEnhancement = 0x168,kHIDUsage_Csmr_ChannelTop = 0x169,kHIDUsage_Csmr_ChannelUnknown = 0x16A,kHIDUsage_Csmr_SubChannel = 0x170,kHIDUsage_Csmr_SubChannelIncrement = 0x171,kHIDUsage_Csmr_SubChannelDecrement = 0x172,kHIDUsage_Csmr_AlternateAudioIncrement = 0x173,kHIDUsage_Csmr_AlternateAudioDecrement = 0x174,kHIDUsage_Csmr_ApplicationLaunchButtons = 0x180,kHIDUsage_Csmr_ALLaunchButtonConfigurationTool = 0x181,kHIDUsage_Csmr_ALProgrammableButtonConfiguration = 0x182,kHIDUsage_Csmr_ALConsumerControlConfiguration = 0x183,kHIDUsage_Csmr_ALWordProcessor = 0x184,kHIDUsage_Csmr_ALTextEditor = 0x185,kHIDUsage_Csmr_ALSpreadsheet = 0x186,kHIDUsage_Csmr_ALGraphicsEditor = 0x187,kHIDUsage_Csmr_ALPresentationApp = 0x188,kHIDUsage_Csmr_ALDatabaseApp = 0x189,kHIDUsage_Csmr_ALEmailReader = 0x18A,kHIDUsage_Csmr_ALNewsreader = 0x18B,kHIDUsage_Csmr_ALVoicemail = 0x18C,kHIDUsage_Csmr_ALContactsOrAddressBook = 0x18D,kHIDUsage_Csmr_ALCalendarOrSchedule = 0x18E,kHIDUsage_Csmr_ALTaskOrProjectManager = 0x18F,kHIDUsage_Csmr_ALLogOrJournalOrTimecard = 0x190,kHIDUsage_Csmr_ALCheckbookOrFinance = 0x191,kHIDUsage_Csmr_ALCalculator = 0x192,kHIDUsage_Csmr_ALAOrVCaptureOrPlayback = 0x193,kHIDUsage_Csmr_ALLocalMachineBrowser = 0x194,kHIDUsage_Csmr_ALLANOrWANBrowser = 0x195,kHIDUsage_Csmr_ALInternetBrowser = 0x196,kHIDUsage_Csmr_ALRemoteNetworkingOrISPConnect = 0x197,kHIDUsage_Csmr_ALNetworkConference = 0x198,kHIDUsage_Csmr_ALNetworkChat = 0x199,kHIDUsage_Csmr_ALTelephonyOrDialer = 0x19A,kHIDUsage_Csmr_ALLogon = 0x19B,kHIDUsage_Csmr_ALLogoff = 0x19C,kHIDUsage_Csmr_ALLogonOrLogoff = 0x19D,kHIDUsage_Csmr_ALTerminalLockOrScreensaver = 0x19E,kHIDUsage_Csmr_ALControlPanel = 0x19F,kHIDUsage_Csmr_ALCommandLineProcessorOrRun = 0x1A0,kHIDUsage_Csmr_ALProcessOrTaskManager = 0x1A1,kHIDUsage_Csmr_AL = 0x1A2,kHIDUsage_Csmr_ALNextTaskOrApplication = 0x1A3,kHIDUsage_Csmr_ALPreviousTaskOrApplication = 0x1A4,kHIDUsage_Csmr_ALPreemptiveHaltTaskOrApplication = 0x1A5,kHIDUsage_Csmr_ALIntegratedHelpCenter = 0x1A6,kHIDUsage_Csmr_ALDocuments = 0x1A7,kHIDUsage_Csmr_ALThesaurus = 0x1A8,kHIDUsage_Csmr_ALDictionary = 0x1A9,kHIDUsage_Csmr_ALDesktop = 0x1AA,kHIDUsage_Csmr_ALSpellCheck = 0x1AB,kHIDUsage_Csmr_ALGrammerCheck = 0x1AC,kHIDUsage_Csmr_ALWirelessStatus = 0x1AD,kHIDUsage_Csmr_ALKeyboardLayout = 0x1AE,kHIDUsage_Csmr_ALVirusProtection = 0x1AF,kHIDUsage_Csmr_ALEncryption = 0x1B0,kHIDUsage_Csmr_ALScreenSaver = 0x1B1,kHIDUsage_Csmr_ALAlarms = 0x1B2,kHIDUsage_Csmr_ALClock = 0x1B3,kHIDUsage_Csmr_ALFileBrowser = 0x1B4,kHIDUsage_Csmr_ALPowerStatus = 0x1B5,kHIDUsage_Csmr_ALImageBrowser = 0x1B6,kHIDUsage_Csmr_ALAudioBrowser = 0x1B7,kHIDUsage_Csmr_ALMovieBrowser = 0x1B8,kHIDUsage_Csmr_ALDigitalRightsManager = 0x1B9,kHIDUsage_Csmr_ALDigitalWallet = 0x1BA,kHIDUsage_Csmr_ALInstantMessaging = 0x1BC,kHIDUsage_Csmr_ALOEMFeatureBrowser = 0x1BD,kHIDUsage_Csmr_ALOEMHelp = 0x1BE,kHIDUsage_Csmr_ALOnlineCommunity = 0x1BF,kHIDUsage_Csmr_ALEntertainmentContentBrowser = 0x1C0,kHIDUsage_Csmr_ALOnlineShoppingBrowswer = 0x1C1,kHIDUsage_Csmr_ALSmartCardInformationOrHelp = 0x1C2,kHIDUsage_Csmr_ALMarketMonitorOrFinanceBrowser = 0x1C3,kHIDUsage_Csmr_ALCustomizedCorporateNewsBrowser = 0x1C4,kHIDUsage_Csmr_ALOnlineActivityBrowswer = 0x1C5,kHIDUsage_Csmr_ALResearchOrSearchBrowswer = 0x1C6,kHIDUsage_Csmr_ALAudioPlayer = 0x1C7,kHIDUsage_Csmr_ALNavigation = 0x1C8,kHIDUsage_Csmr_GenericGUIApplicationControls = 0x200,kHIDUsage_Csmr_ACNew = 0x201,kHIDUsage_Csmr_ACOpen = 0x202,kHIDUsage_Csmr_ACClose = 0x203,kHIDUsage_Csmr_ACExit = 0x204,kHIDUsage_Csmr_ACMaximize = 0x205,kHIDUsage_Csmr_ACMinimize = 0x206,kHIDUsage_Csmr_ACSave = 0x207,kHIDUsage_Csmr_ACPrint = 0x208,kHIDUsage_Csmr_ACProperties = 0x209,kHIDUsage_Csmr_ACUndo = 0x21A,kHIDUsage_Csmr_ACCopy = 0x21B,kHIDUsage_Csmr_ACCut = 0x21C,kHIDUsage_Csmr_ACPaste = 0x21D,kHIDUsage_Csmr_AC = 0x21E,kHIDUsage_Csmr_ACFind = 0x21F,kHIDUsage_Csmr_ACFindandReplace = 0x220,kHIDUsage_Csmr_ACSearch = 0x221,kHIDUsage_Csmr_ACGoTo = 0x222,kHIDUsage_Csmr_ACHome = 0x223,kHIDUsage_Csmr_ACBack = 0x224,kHIDUsage_Csmr_ACForward = 0x225,kHIDUsage_Csmr_ACStop = 0x226,kHIDUsage_Csmr_ACRefresh = 0x227,kHIDUsage_Csmr_ACPreviousLink = 0x228,kHIDUsage_Csmr_ACNextLink = 0x229,kHIDUsage_Csmr_ACBookmarks = 0x22A,kHIDUsage_Csmr_ACHistory = 0x22B,kHIDUsage_Csmr_ACSubscriptions = 0x22C,kHIDUsage_Csmr_ACZoomIn = 0x22D,kHIDUsage_Csmr_ACZoomOut = 0x22E,kHIDUsage_Csmr_ACZoom = 0x22F,kHIDUsage_Csmr_ACFullScreenView = 0x230,kHIDUsage_Csmr_ACNormalView = 0x231,kHIDUsage_Csmr_ACViewToggle = 0x232,kHIDUsage_Csmr_ACScrollUp = 0x233,kHIDUsage_Csmr_ACScrollDown = 0x234,kHIDUsage_Csmr_ACScroll = 0x235,kHIDUsage_Csmr_ACPanLeft = 0x236,kHIDUsage_Csmr_ACPanRight = 0x237,kHIDUsage_Csmr_ACPan = 0x238,kHIDUsage_Csmr_ACNewWindow = 0x239,kHIDUsage_Csmr_ACTileHorizontally = 0x23A,kHIDUsage_Csmr_ACTileVertically = 0x23B,kHIDUsage_Csmr_ACFormat = 0x23C,kHIDUsage_Csmr_ACEdit = 0x23D,kHIDUsage_Csmr_ACBold = 0x23E,kHIDUsage_Csmr_ACItalics = 0x23F,kHIDUsage_Csmr_ACUnderline = 0x240,kHIDUsage_Csmr_ACStrikethrough = 0x241,kHIDUsage_Csmr_ACSubscript = 0x242,kHIDUsage_Csmr_ACSuperscript = 0x243,kHIDUsage_Csmr_ACAllCaps = 0x244,kHIDUsage_Csmr_ACRotate = 0x245,kHIDUsage_Csmr_ACResize = 0x246,kHIDUsage_Csmr_ACFlipHorizontal = 0x247,kHIDUsage_Csmr_ACFlipVertical = 0x248,kHIDUsage_Csmr_ACMirrorHorizontal = 0x249,kHIDUsage_Csmr_ACMirrorVertical = 0x24A,kHIDUsage_Csmr_ACFontSelect = 0x24B,kHIDUsage_Csmr_ACFontColor = 0x24C,kHIDUsage_Csmr_ACFontSize = 0x24D,kHIDUsage_Csmr_ACJustifyLeft = 0x24E,kHIDUsage_Csmr_ACJustifyCenterH = 0x24F,kHIDUsage_Csmr_ACJustifyRight = 0x250,kHIDUsage_Csmr_ACJustifyBlockH = 0x251,kHIDUsage_Csmr_ACJustifyTop = 0x252,kHIDUsage_Csmr_ACJustifyCenterV = 0x253,kHIDUsage_Csmr_ACJustifyBottom = 0x254,kHIDUsage_Csmr_ACJustifyBlockV = 0x255,kHIDUsage_Csmr_ACIndentyDecrease = 0x256,kHIDUsage_Csmr_ACIndentyIncrease = 0x257,kHIDUsage_Csmr_ACNumberedList = 0x258,kHIDUsage_Csmr_ACRestartNumbering = 0x259,kHIDUsage_Csmr_ACBulletedList = 0x25A,kHIDUsage_Csmr_ACPromote = 0x25B,kHIDUsage_Csmr_ACDemote = 0x25C,kHIDUsage_Csmr_ACYes = 0x25D,kHIDUsage_Csmr_ACNo = 0x25E,kHIDUsage_Csmr_ACCancel = 0x25F,kHIDUsage_Csmr_ACCatalog = 0x260,kHIDUsage_Csmr_ACBuyOrCheckout = 0x261,kHIDUsage_Csmr_ACAddToCart = 0x262,kHIDUsage_Csmr_ACExpand = 0x263,kHIDUsage_Csmr_ACExpandAll = 0x264,kHIDUsage_Csmr_ACCollapse = 0x265,kHIDUsage_Csmr_ACCollapseAll = 0x266,kHIDUsage_Csmr_ACPrintPreview = 0x267,kHIDUsage_Csmr_ACPasteSpecial = 0x268,kHIDUsage_Csmr_ACInsertMode = 0x269,kHIDUsage_Csmr_ACDelete = 0x26A,kHIDUsage_Csmr_ACLock = 0x26B,kHIDUsage_Csmr_ACUnlock = 0x26C,kHIDUsage_Csmr_ACProtect = 0x26D,kHIDUsage_Csmr_ACUnprotect = 0x26E,kHIDUsage_Csmr_ACAttachComment = 0x26F,kHIDUsage_Csmr_ACDetachComment = 0x270,kHIDUsage_Csmr_ACViewComment = 0x271,kHIDUsage_Csmr_ACSelectWord = 0x272,kHIDUsage_Csmr_ACSelectSentence = 0x273,kHIDUsage_Csmr_ACSelectParagraph = 0x274,kHIDUsage_Csmr_ACSelectColumn = 0x275,kHIDUsage_Csmr_ACSelectRow = 0x276,kHIDUsage_Csmr_ACSelectTable = 0x277,kHIDUsage_Csmr_ACSelectObject = 0x278,kHIDUsage_Csmr_ACRedoOrRepeat = 0x279,kHIDUsage_Csmr_ACSort = 0x27A,kHIDUsage_Csmr_ACSortAscending = 0x27B,kHIDUsage_Csmr_ACSortDescending = 0x27C,kHIDUsage_Csmr_ACFilter = 0x27D,kHIDUsage_Csmr_ACSetClock = 0x27E,kHIDUsage_Csmr_ACViewClock = 0x27F,kHIDUsage_Csmr_ACSelectTimeZone = 0x280,kHIDUsage_Csmr_ACEditTimeZones = 0x281,kHIDUsage_Csmr_ACSetAlarm = 0x282,kHIDUsage_Csmr_ACClearAlarm = 0x283,kHIDUsage_Csmr_ACSnoozeAlarm = 0x284,kHIDUsage_Csmr_ACResetAlarm = 0x285,kHIDUsage_Csmr_ACSynchronize = 0x286,kHIDUsage_Csmr_ACSendOrReceive = 0x287,kHIDUsage_Csmr_ACSendTo = 0x288,kHIDUsage_Csmr_ACReply = 0x289,kHIDUsage_Csmr_ACReplyAll = 0x28A,kHIDUsage_Csmr_ACForwardMessage = 0x28B,kHIDUsage_Csmr_ACSend = 0x28C,kHIDUsage_Csmr_ACAttachFile = 0x28D,kHIDUsage_Csmr_ACUpload = 0x28E,kHIDUsage_Csmr_ACDownload = 0x28F,kHIDUsage_Csmr_ACSetBorders = 0x290,kHIDUsage_Csmr_ACInsertRow = 0x291,kHIDUsage_Csmr_ACInsertColumn = 0x292,kHIDUsage_Csmr_ACInsertFile = 0x293,kHIDUsage_Csmr_ACInsertPicture = 0x294,kHIDUsage_Csmr_ACInsertObject = 0x295,kHIDUsage_Csmr_ACInsertSymbol = 0x296,kHIDUsage_Csmr_ACSaveAndClose = 0x297,kHIDUsage_Csmr_ACRename = 0x298,kHIDUsage_Csmr_ACMerge = 0x299,kHIDUsage_Csmr_ACSplit = 0x29A,kHIDUsage_Csmr_ACDistributeH = 0x29B,kHIDUsage_Csmr_ACDistributeV = 0x29C,kHIDUsage_Csmr_ACKeyboardLayoutSelect = 0x29D,kHIDUsage_Csmr_ACNavigationGuidance = 0x29E,kHIDUsage_Csmr_Reserved = 0xFFFF,};
enum _2C05BA5F4D760E236D0B19E8BD8BE9F6 {kHubSuperSpeedProtocol = 0x3,kHIDNoInterfaceProtocol = 0x0,kHIDKeyboardInterfaceProtocol = 0x1,kHIDMouseInterfaceProtocol = 0x2,kUSBVendorSpecificProtocol = 0xFF,kUSB2ComplianceDeviceProtocol = 0x1,kUSBBluetoothProgrammingInterfaceProtocol = 0x1,KUSBInterfaceAssociationDescriptorProtocol = 0x1,kMSCProtocolControlBulkInterrupt = 0x0,kMSCProtocolControlBulk = 0x1,kMSCProtocolBulkOnly = 0x50,kMSCProtocolUSBAttachedSCSI = 0x62,};
enum _2C05F1B6461A0344AF6016F6BD3C953B {kAnalogSignalLevel_0700_0300 = 0x0,kAnalogSignalLevel_0714_0286 = 0x1,kAnalogSignalLevel_1000_0400 = 0x2,kAnalogSignalLevel_0700_0000 = 0x3,};
enum _2C31E9C80B58F1BCD8E04F99B7DFA84C {kBluetoothPageScanPeriodModeP0 = 0x0,kBluetoothPageScanPeriodModeP1 = 0x1,kBluetoothPageScanPeriodModeP2 = 0x2,};
enum _2C581D61AA0A1CC7CE5F993AD5AECFD5 {kIOFBServerConnectType = 0x0,kIOFBSharedConnectType = 0x1,kIOGDiagnoseConnectType = 0x9758,};
enum _2CA69755E15282603B08EA6060B08ABB {kIOI2CBusTypeI2C = 0x1,kIOI2CBusTypeDisplayPort = 0x2,};
enum _2DD2D7F6354DC98A6F8863DCE8F7DC1C {kUSB20ExtensionLPMSupported = 0x1,kUSBSuperSpeedLTMCapable = 0x1,kUSBSuperSpeedSupportsLS = 0x0,kUSBSuperSpeedSupportsFS = 0x1,kUSBSuperSpeedSupportsHS = 0x2,kUSBSuperSpeedSupportsSS = 0x3,};
enum _2E410D62E12602C5B1C7E5468B1BE461 {kIOCatalogResetDefault = 0x1,};
enum _2ECA4E00EF8B52B1274DDBAC4E0A5724 {kIOBlitFramebufferDestination = 0x0,kIOBlitSurfaceDestination = 0x1,};
enum _2EFBE6CBE56D931F30D1955E5CD5AC4C {kIOPMPowerOn = 0x2,kIOPMDeviceUsable = 0x8000,kIOPMLowPower = 0x10000,kIOPMPreventIdleSleep = 0x40,kIOPMSleepCapability = 0x4,kIOPMRestartCapability = 0x80,kIOPMSleep = 0x1,kIOPMRestart = 0x80,kIOPMInitialDeviceState = 0x100,kIOPMRootDomainState = 0x200,};
enum _2F5D9B254B80799EC044093958B503F3 {kINQUIRY_Byte7_Offset = 0x7,kINQUIRY_Byte7_VS_Bit = 0x0,kINQUIRY_Byte7_CMDQUE_Bit = 0x1,kINQUIRY_Byte7_TRANDIS_Bit = 0x2,kINQUIRY_Byte7_LINKED_Bit = 0x3,kINQUIRY_Byte7_SYNC_Bit = 0x4,kINQUIRY_Byte7_WBUS16_Bit = 0x5,kINQUIRY_Byte7_RELADR_Bit = 0x7,kINQUIRY_Byte7_VS_Mask = 0x1,kINQUIRY_Byte7_CMDQUE_Mask = 0x2,kINQUIRY_Byte7_TRANDIS_Mask = 0x4,kINQUIRY_Byte7_LINKED_Mask = 0x8,kINQUIRY_Byte7_SYNC_Mask = 0x10,kINQUIRY_Byte7_WBUS16_Mask = 0x20,kINQUIRY_Byte7_RELADR_Mask = 0x80,};
enum _2F69AED91973BE520C7D059F262CB602 {kSetClutAtSetEntries = 0x0,kSetClutAtVBL = 0x1,};
enum _2F8600AB70B79B7623FAF95D0232978F {BPF_TAP_DISABLE = 0x0,BPF_TAP_INPUT = 0x1,BPF_TAP_OUTPUT = 0x2,BPF_TAP_INPUT_OUTPUT = 0x3,};
enum _304D471FDF7DCF7B5F7A5337619F3EC6 {kBluetoothDeviceClassMinorComputerUnclassified = 0x0,kBluetoothDeviceClassMinorComputerDesktopWorkstation = 0x1,kBluetoothDeviceClassMinorComputerServer = 0x2,kBluetoothDeviceClassMinorComputerLaptop = 0x3,kBluetoothDeviceClassMinorComputerHandheld = 0x4,kBluetoothDeviceClassMinorComputerPalmSized = 0x5,kBluetoothDeviceClassMinorComputerWearable = 0x6,kBluetoothDeviceClassMinorPhoneUnclassified = 0x0,kBluetoothDeviceClassMinorPhoneCellular = 0x1,kBluetoothDeviceClassMinorPhoneCordless = 0x2,kBluetoothDeviceClassMinorPhoneSmartPhone = 0x3,kBluetoothDeviceClassMinorPhoneWiredModemOrVoiceGateway = 0x4,kBluetoothDeviceClassMinorPhoneCommonISDNAccess = 0x5,kBluetoothDeviceClassMinorAudioUnclassified = 0x0,kBluetoothDeviceClassMinorAudioHeadset = 0x1,kBluetoothDeviceClassMinorAudioHandsFree = 0x2,kBluetoothDeviceClassMinorAudioReserved1 = 0x3,kBluetoothDeviceClassMinorAudioMicrophone = 0x4,kBluetoothDeviceClassMinorAudioLoudspeaker = 0x5,kBluetoothDeviceClassMinorAudioHeadphones = 0x6,kBluetoothDeviceClassMinorAudioPortable = 0x7,kBluetoothDeviceClassMinorAudioCar = 0x8,kBluetoothDeviceClassMinorAudioSetTopBox = 0x9,kBluetoothDeviceClassMinorAudioHiFi = 0xA,kBluetoothDeviceClassMinorAudioVCR = 0xB,kBluetoothDeviceClassMinorAudioVideoCamera = 0xC,kBluetoothDeviceClassMinorAudioCamcorder = 0xD,kBluetoothDeviceClassMinorAudioVideoMonitor = 0xE,kBluetoothDeviceClassMinorAudioVideoDisplayAndLoudspeaker = 0xF,kBluetoothDeviceClassMinorAudioVideoConferencing = 0x10,kBluetoothDeviceClassMinorAudioReserved2 = 0x11,kBluetoothDeviceClassMinorAudioGamingToy = 0x12,kBluetoothDeviceClassMinorPeripheral1Keyboard = 0x10,kBluetoothDeviceClassMinorPeripheral1Pointing = 0x20,kBluetoothDeviceClassMinorPeripheral1Combo = 0x30,kBluetoothDeviceClassMinorPeripheral2Unclassified = 0x0,kBluetoothDeviceClassMinorPeripheral2Joystick = 0x1,kBluetoothDeviceClassMinorPeripheral2Gamepad = 0x2,kBluetoothDeviceClassMinorPeripheral2RemoteControl = 0x3,kBluetoothDeviceClassMinorPeripheral2SensingDevice = 0x4,kBluetoothDeviceClassMinorPeripheral2DigitizerTablet = 0x5,kBluetoothDeviceClassMinorPeripheral2CardReader = 0x6,kBluetoothDeviceClassMinorPeripheral2DigitalPen = 0x7,kBluetoothDeviceClassMinorPeripheral2HandheldScanner = 0x8,kBluetoothDeviceClassMinorPeripheral2GesturalInputDevice = 0x9,kBluetoothDeviceClassMinorPeripheral2AnyPointing = 0x706F696E,kBluetoothDeviceClassMinorImaging1Display = 0x4,kBluetoothDeviceClassMinorImaging1Camera = 0x8,kBluetoothDeviceClassMinorImaging1Scanner = 0x10,kBluetoothDeviceClassMinorImaging1Printer = 0x20,kBluetoothDeviceClassMinorImaging2Unclassified = 0x0,kBluetoothDeviceClassMinorWearableWristWatch = 0x1,kBluetoothDeviceClassMinorWearablePager = 0x2,kBluetoothDeviceClassMinorWearableJacket = 0x3,kBluetoothDeviceClassMinorWearableHelmet = 0x4,kBluetoothDeviceClassMinorWearableGlasses = 0x5,kBluetoothDeviceClassMinorToyRobot = 0x1,kBluetoothDeviceClassMinorToyVehicle = 0x2,kBluetoothDeviceClassMinorToyDollActionFigure = 0x3,kBluetoothDeviceClassMinorToyController = 0x4,kBluetoothDeviceClassMinorToyGame = 0x5,kBluetoothDeviceClassMinorHealthUndefined = 0x0,kBluetoothDeviceClassMinorHealthBloodPressureMonitor = 0x1,kBluetoothDeviceClassMinorHealthThermometer = 0x2,kBluetoothDeviceClassMinorHealthScale = 0x3,kBluetoothDeviceClassMinorHealthGlucoseMeter = 0x4,kBluetoothDeviceClassMinorHealthPulseOximeter = 0x5,kBluetoothDeviceClassMinorHealthHeartRateMonitor = 0x6,kBluetoothDeviceClassMinorHealthDataDisplay = 0x7,kBluetoothDeviceClassMinorAny = 0x2A2A2A2A,kBluetoothDeviceClassMinorNone = 0x6E6F6E65,kBluetoothDeviceClassMinorEnd = 0x6E6F6E66,};
enum _30A12EC4D0670339431F3F5ABFE1FB58 {kDDCForceReadBit = 0x0,kDDCForceReadMask = 0x1,};
enum _30A626022F01E3BD97B7655ADE073BA9 {kIOFBSystemAperture = 0x0,};
enum _30BA33955E1E0B4C4FBB0FCC94A32E13 {kIOPCIUncorrectableErrorBitDataLinkProtocol = 0x4,kIOPCIUncorrectableErrorBitSurpriseDown = 0x5,kIOPCIUncorrectableErrorBitPoisonedTLP = 0xC,kIOPCIUncorrectableErrorBitFlowControlProtocol = 0xD,kIOPCIUncorrectableErrorBitCompletionTimeout = 0xE,kIOPCIUncorrectableErrorBitCompleterAbort = 0xF,kIOPCIUncorrectableErrorBitUnexpectedCompletion = 0x10,kIOPCIUncorrectableErrorBitReceiverOverflow = 0x11,kIOPCIUncorrectableErrorBitMalformedTLP = 0x12,kIOPCIUncorrectableErrorBitECRC = 0x13,kIOPCIUncorrectableErrorBitUnsupportedRequest = 0x14,kIOPCIUncorrectableErrorBitACSViolation = 0x15,kIOPCIUncorrectableErrorBitInternal = 0x16,kIOPCIUncorrectableErrorBitMCBlockedTLP = 0x17,kIOPCIUncorrectableErrorBitAtomicOpEgressBlocked = 0x18,kIOPCIUncorrectableErrorBitTLPPrefixBlocked = 0x19,};
enum _316CBFE855B56C49986DE0632306E8D3 {kIOFBNS_Rendezvous = 0x87654321,kIOFBNS_MessageMask = 0xF,kIOFBNS_Sleep = 0x0,kIOFBNS_Wake = 0x1,kIOFBNS_Doze = 0x2,kIOFBNS_Dim = 0x3,kIOFBNS_UnDim = 0x4,kIOFBNS_DisplayStateMask = 0xF00,kIOFBNS_DisplayStateShift = 0x8,kIOFBNS_GenerationMask = 0x7FFF0000,kIOFBNS_GenerationShift = 0x10,};
enum _31AF2E724D91C7095089809D069575B1 {kBluetoothVoiceSettingAirCodingFormatMask = 0x3,kBluetoothVoiceSettingAirCodingFormatCVSD = 0x0,kBluetoothVoiceSettingAirCodingFormatULaw = 0x1,kBluetoothVoiceSettingAirCodingFormatALaw = 0x2,kBluetoothVoiceSettingAirCodingFormatTransparentData = 0x3,};
enum _3219131B5FFA9447064CAF62E6D59F22 {kIOServiceInactiveState = 0x1,kIOServiceRegisteredState = 0x2,kIOServiceMatchedState = 0x4,kIOServiceFirstPublishState = 0x8,kIOServiceFirstMatchState = 0x10,};
enum _323A1C7E7B497BCFEBCFF514EEE128ED {kFWSBP2MaxPageClusterSize = 0xF000,};
enum _33B7B32E6F6F74DE1A8E7933395DB71D {kFWExtendedTCodeMaskSwap = 0x1,kFWExtendedTCodeCompareSwap = 0x2,kFWExtendedTCodeFetchAdd = 0x3,kFWExtendedTCodeLittleAdd = 0x4,kFWExtendedTCodeBoundedAdd = 0x5,kFWExtendedTCodeWrapAdd = 0x6,kFWExtendedTCodeVendorDependent = 0x7,};
enum _33CF40545351B49475A3C4BBDC0ECDA2 {kBluetoothKeyTypeCombination = 0x0,kBluetoothKeyTypeLocalUnit = 0x1,kBluetoothKeyTypeRemoteUnit = 0x2,kBluetoothKeyTypeDebugCombination = 0x3,kBluetoothKeyTypeUnauthenticatedCombination = 0x4,kBluetoothKeyTypeAuthenticatedCombination = 0x5,kBluetoothKeyTypeChangedCombination = 0x6,};
enum _3406C0CFF79FA0131F6DEEF4CF7EDFB8 {kKernelDebugInfoLevel = 0x3E8,kKernelDebugRareInfoLevel = 0x7D0,kKernelDebugAllowedErrorLevel = 0xBB8,kKernelDebugAssertLevel = 0xFA0,kKernelDebugRequireLevel = 0x1388,kKernelDebugErrorLevel = 0x1770,kKernelDebugCriticalErrorLevel = 0x1B58,kKernelDebugTragicErrorLevel = 0x1F40,kKernelDebugAnyLevel = 0x0,};
enum _344819ED05C5CC33DD806714EAA3121D {kIORangePixelEncodingNotSupported = 0x0,kIORangePixelEncodingRGB444 = 0x1,kIORangePixelEncodingYCbCr444 = 0x2,kIORangePixelEncodingYCbCr422 = 0x4,kIORangePixelEncodingYCbCr420 = 0x8,};
enum _34DB2C00E362903515E024FCCD3F7AB0 {kIOScaleStretchOnly = 0x1,kIOScaleCanUpSamplePixels = 0x2,kIOScaleCanDownSamplePixels = 0x4,kIOScaleCanScaleInterlaced = 0x8,kIOScaleCanSupportInset = 0x10,kIOScaleCanRotate = 0x20,kIOScaleCanBorderInsetOnly = 0x40,};
enum _353082C6157FCA39C281ED7A681D3D92 {kIOPMSystemCapabilityCPU = 0x1,kIOPMSystemCapabilityGraphics = 0x2,kIOPMSystemCapabilityAudio = 0x4,kIOPMSystemCapabilityNetwork = 0x8,};
enum _35A0481BCB67B22637C9A85AE284D384 {kBluetoothHCICommandPacketHeaderSize = 0x3,kBluetoothHCICommandPacketMaxDataSize = 0xFF,kBluetoothHCIMaxCommandPacketSize = 0x102,kBluetoothHCIEventPacketHeaderSize = 0x2,kBluetoothHCIEventPacketMaxDataSize = 0xFF,kBluetoothHCIMaxEventPacketSize = 0x101,kBluetoothHCIDataPacketHeaderSize = 0x4,kBluetoothHCIDataPacketMaxDataSize = 0xFFFF,kBluetoothHCIMaxDataPacketSize = 0x10003,};
enum _362927E3DD93CB8E785E85FBE2687B30 {kIOPCIStatusInterrupt = 0x8,kIOPCIStatusCapabilities = 0x10,kIOPCIStatusPCI66 = 0x20,kIOPCIStatusUDF = 0x40,kIOPCIStatusFastBack2Back = 0x80,kIOPCIStatusDevSel0 = 0x0,kIOPCIStatusDevSel1 = 0x200,kIOPCIStatusDevSel2 = 0x400,kIOPCIStatusDevSel3 = 0x600,kIOPCIStatusTargetAbortCapable = 0x800,kIOPCIStatusTargetAbortActive = 0x1000,kIOPCIStatusMasterAbortActive = 0x2000,kIOPCIStatusSERRActive = 0x4000,kIOPCIStatusParityErrActive = 0x8000,};
enum _368793D881F191B5EEF10A15383EC3B6 {MBUF_WAITOK = 0x0,MBUF_DONTWAIT = 0x1,};
enum _36924745259F5A1ED7F030686ACFB6E2 {kRootDomainSleepNotSupported = 0x0,kRootDomainSleepSupported = 0x1,kFrameBufferDeepSleepSupported = 0x2,kPCICantSleep = 0x4,};
enum _38325D9BC4BC78B5BF32331A83235797 {kIOI2CNoTransactionType = 0x0,kIOI2CSimpleTransactionType = 0x1,kIOI2CDDCciReplyTransactionType = 0x2,kIOI2CCombinedTransactionType = 0x3,kIOI2CDisplayPortNativeTransactionType = 0x4,};
enum _38ECCCEC9635C216B48A04C98EEFAF25 {kINQUIRY_VERSION_DESCRIPTOR_SAT = 0x1EA0,};
enum _3971850A007C2529695CEFDFBE695B42 {kSENSE_ILI_Set = 0x20,kSENSE_ILI_Not_Set = 0x0,kSENSE_ILI_Mask = 0x20,};
enum _3984F639BC5082BC61D42B9C3FC2373C {kIOACPIFixedEventPMTimer = 0x0,kIOACPIFixedEventPowerButton = 0x2,kIOACPIFixedEventSleepButton = 0x3,kIOACPIFixedEventRealTimeClock = 0x4,};
enum _3A1B3F24E86C4375A7A943AF194F04E5 {kSENSE_EOM_Set = 0x40,kSENSE_EOM_Not_Set = 0x0,kSENSE_EOM_Mask = 0x40,};
enum _3B2FC6B443B7BD918649C484A9D65B12 {kIODisplayModeIDBootProgrammable = 0xFFFFFFFB,kIODisplayModeIDReservedBase = 0x80000000,};
enum _3B8C8FD8D53FF3292213C67F46BA8005 {kIOBlitBeamSync = 0x1,kIOBlitBeamSyncAlways = 0x2,kIOBlitBeamSyncSpin = 0x4,kIOBlitAllOptions = 0xFFFFFFFF,};
enum _3BC89F5245E68EC7D0AD11A5180BCBF2 {kOneSecondTimeoutInMS = 0x3E8,kTenSecondTimeoutInMS = 0x2710,kThirtySecondTimeoutInMS = 0x7530,kFortyFiveSecondTimeoutInMS = 0xAFC8,};
enum _3BF029DF5297A489DC14CA1B07342B1C {kHIDUsage_Dig_Digitizer = 0x1,kHIDUsage_Dig_Pen = 0x2,kHIDUsage_Dig_LightPen = 0x3,kHIDUsage_Dig_TouchScreen = 0x4,kHIDUsage_Dig_TouchPad = 0x5,kHIDUsage_Dig_WhiteBoard = 0x6,kHIDUsage_Dig_CoordinateMeasuringMachine = 0x7,kHIDUsage_Dig_3DDigitizer = 0x8,kHIDUsage_Dig_StereoPlotter = 0x9,kHIDUsage_Dig_ArticulatedArm = 0xA,kHIDUsage_Dig_Armature = 0xB,kHIDUsage_Dig_MultiplePointDigitizer = 0xC,kHIDUsage_Dig_FreeSpaceWand = 0xD,kHIDUsage_Dig_DeviceConfiguration = 0xE,kHIDUsage_Dig_Stylus = 0x20,kHIDUsage_Dig_Puck = 0x21,kHIDUsage_Dig_Finger = 0x22,kHIDUsage_Dig_DeviceSettings = 0x23,kHIDUsage_Dig_GestureCharacter = 0x24,kHIDUsage_Dig_TipPressure = 0x30,kHIDUsage_Dig_BarrelPressure = 0x31,kHIDUsage_Dig_InRange = 0x32,kHIDUsage_Dig_Touch = 0x33,kHIDUsage_Dig_Untouch = 0x34,kHIDUsage_Dig_Tap = 0x35,kHIDUsage_Dig_Quality = 0x36,kHIDUsage_Dig_DataValid = 0x37,kHIDUsage_Dig_TransducerIndex = 0x38,kHIDUsage_Dig_TabletFunctionKeys = 0x39,kHIDUsage_Dig_ProgramChangeKeys = 0x3A,kHIDUsage_Dig_BatteryStrength = 0x3B,kHIDUsage_Dig_Invert = 0x3C,kHIDUsage_Dig_XTilt = 0x3D,kHIDUsage_Dig_YTilt = 0x3E,kHIDUsage_Dig_Azimuth = 0x3F,kHIDUsage_Dig_Altitude = 0x40,kHIDUsage_Dig_Twist = 0x41,kHIDUsage_Dig_TipSwitch = 0x42,kHIDUsage_Dig_SecondaryTipSwitch = 0x43,kHIDUsage_Dig_BarrelSwitch = 0x44,kHIDUsage_Dig_Eraser = 0x45,kHIDUsage_Dig_TabletPick = 0x46,kHIDUsage_Dig_TouchValid = 0x47,kHIDUsage_Dig_Width = 0x48,kHIDUsage_Dig_Height = 0x49,kHIDUsage_Dig_ContactIdentifier = 0x51,kHIDUsage_Dig_DeviceMode = 0x52,kHIDUsage_Dig_DeviceIdentifier = 0x53,kHIDUsage_Dig_ContactCount = 0x54,kHIDUsage_Dig_ContactCountMaximum = 0x55,kHIDUsage_Dig_GestureCharacterEnable = 0x60,kHIDUsage_Dig_GestureCharacterQuality = 0x61,kHIDUsage_Dig_GestureCharacterDataLength = 0x62,kHIDUsage_Dig_GestureCharacterData = 0x63,kHIDUsage_Dig_GestureCharacterEncoding = 0x64,kHIDUsage_Dig_GestureCharacterEncodingUTF8 = 0x65,kHIDUsage_Dig_GestureCharacterEncodingUTF16LE = 0x66,kHIDUsage_Dig_GestureCharacterEncodingUTF16BE = 0x67,kHIDUsage_Dig_GestureCharacterEncodingUTF32LE = 0x68,kHIDUsage_Dig_GestureCharacterEncodingUTF32BE = 0x69,kHIDUsage_Dig_Reserved = 0xFFFF,};
enum _3C4EE3D33A7329C058D872AA0B871927 {kHFSUnusedNodesFixDate = 0xC5EF2480,};
enum _3CD2CC902A2EFF171D1FCB5B5C32B648 {kIOPCIProbeOptionDone = 0x80000000,kIOPCIProbeOptionEject = 0x100000,kIOPCIProbeOptionNeedsScan = 0x200000,};
enum _3E12145016C0E94213A3D9757D2ABD37 {mATAHeadNumber = 0xF,mATASectorSize = 0xA0,mATADriveSelect = 0x10,mATALBASelect = 0x40,};
enum _3E229C431D6799AB421373349AE7D24C {kUSBMaxFSIsocEndpointReqCount = 0x3FF,kUSBMaxHSIsocEndpointReqCount = 0xC00,kUSBMaxHSIsocFrameCount = 0x1C00,};
enum _3EB3ECD3FF7177F06AF075B3CBDC64EC {kBluetoothHCIErrorPowerIsOFF = 0x41,};
enum _3EE3B3C4D8DC90138219D2017099FEA7 {kFWSBP2ConstraintForceDoubleBuffer = 0x1,};
enum _3F582DC69A27A561AFA2E47641382907 {kSENSE_KEY_NO_SENSE = 0x0,kSENSE_KEY_RECOVERED_ERROR = 0x1,kSENSE_KEY_NOT_READY = 0x2,kSENSE_KEY_MEDIUM_ERROR = 0x3,kSENSE_KEY_HARDWARE_ERROR = 0x4,kSENSE_KEY_ILLEGAL_REQUEST = 0x5,kSENSE_KEY_UNIT_ATTENTION = 0x6,kSENSE_KEY_DATA_PROTECT = 0x7,kSENSE_KEY_BLANK_CHECK = 0x8,kSENSE_KEY_VENDOR_SPECIFIC = 0x9,kSENSE_KEY_COPY_ABORTED = 0xA,kSENSE_KEY_ABORTED_COMMAND = 0xB,kSENSE_KEY_VOLUME_OVERFLOW = 0xD,kSENSE_KEY_MISCOMPARE = 0xE,kSENSE_KEY_Mask = 0xF,};
enum _3F5FBBBBE6B5778E2E0908A70C434917 {kIODefaultCache = 0x0,kIOInhibitCache = 0x1,kIOWriteThruCache = 0x2,kIOCopybackCache = 0x3,kIOWriteCombineCache = 0x4,kIOCopybackInnerCache = 0x5,kIOPostedWrite = 0x6,};
enum _40463AA2BCFA128AED27FAD5AF5FCA82 {kDTMaxPropertyNameLength = 0x1F,};
enum _405CFB41ACA8B9045D3FD9073750A17A {kHIDUsage_BCS_Undefined = 0x0,kHIDUsage_BCS_BadgeReader = 0x1,kHIDUsage_BCS_BarCodeScanner = 0x2,kHIDUsage_BCS_DumbBarCodeScanner = 0x3,kHIDUsage_BCS_CordlessScannerBase = 0x4,kHIDUsage_BCS_BarCodeScannerCradle = 0x5,kHIDUsage_BCS_AttributeReport = 0x10,kHIDUsage_BCS_SettingsReport = 0x11,kHIDUsage_BCS_ScannedDataReport = 0x12,kHIDUsage_BCS_RawScannedDataReport = 0x13,kHIDUsage_BCS_TriggerReport = 0x14,kHIDUsage_BCS_StatusReport = 0x15,kHIDUsage_BCS_UPC_EANControlReport = 0x16,kHIDUsage_BCS_EAN2_3LabelControlReport = 0x17,kHIDUsage_BCS_Code39ControlReport = 0x18,kHIDUsage_BCS_Interleaved2of5ControlReport = 0x19,kHIDUsage_BCS_Standard2of5ControlReport = 0x1A,kHIDUsage_BCS_MSIPlesseyControlReport = 0x1B,kHIDUsage_BCS_CodabarControlReport = 0x1C,kHIDUsage_BCS_Code128ControlReport = 0x1D,kHIDUsage_BCS_Misc1DControlReport = 0x1E,kHIDUsage_BCS_2DControlReport = 0x1F,kHIDUsage_BCS_Aiming_PointerMide = 0x30,kHIDUsage_BCS_BarCodePresentSensor = 0x31,kHIDUsage_BCS_Class1ALaser = 0x32,kHIDUsage_BCS_Class2Laser = 0x33,kHIDUsage_BCS_HeaterPresent = 0x34,kHIDUsage_BCS_ContactScanner = 0x35,kHIDUsage_BCS_ElectronicArticleSurveillanceNotification = 0x36,kHIDUsage_BCS_ConstantElectronicArticleSurveillance = 0x37,kHIDUsage_BCS_ErrorIndication = 0x38,kHIDUsage_BCS_FixedBeeper = 0x39,kHIDUsage_BCS_GoodDecodeIndication = 0x3A,kHIDUsage_BCS_HandsFreeScanning = 0x3B,kHIDUsage_BCS_IntrinsicallySafe = 0x3C,kHIDUsage_BCS_KlasseEinsLaser = 0x3D,kHIDUsage_BCS_LongRangeScanner = 0x3E,kHIDUsage_BCS_MirrorSpeedControl = 0x3F,kHIDUsage_BCS_NotOnFileIndication = 0x40,kHIDUsage_BCS_ProgrammableBeeper = 0x41,kHIDUsage_BCS_Triggerless = 0x42,kHIDUsage_BCS_Wand = 0x43,kHIDUsage_BCS_WaterResistant = 0x44,kHIDUsage_BCS_MultiRangeScanner = 0x45,kHIDUsage_BCS_ProximitySensor = 0x46,kHIDUsage_BCS_FragmentDecoding = 0x4D,kHIDUsage_BCS_ScannerReadConfidence = 0x4E,kHIDUsage_BCS_DataPrefix = 0x4F,kHIDUsage_BCS_PrefixAIMI = 0x50,kHIDUsage_BCS_PrefixNone = 0x51,kHIDUsage_BCS_PrefixProprietary = 0x52,kHIDUsage_BCS_ActiveTime = 0x55,kHIDUsage_BCS_AimingLaserPattern = 0x56,kHIDUsage_BCS_BarCodePresent = 0x57,kHIDUsage_BCS_BeeperState = 0x58,kHIDUsage_BCS_LaserOnTime = 0x59,kHIDUsage_BCS_LaserState = 0x5A,kHIDUsage_BCS_LockoutTime = 0x5B,kHIDUsage_BCS_MotorState = 0x5C,kHIDUsage_BCS_MotorTimeout = 0x5D,kHIDUsage_BCS_PowerOnResetScanner = 0x5E,kHIDUsage_BCS_PreventReadOfBarcodes = 0x5F,kHIDUsage_BCS_InitiateBarcodeRead = 0x60,kHIDUsage_BCS_TriggerState = 0x61,kHIDUsage_BCS_TriggerMode = 0x62,kHIDUsage_BCS_TriggerModeBlinkingLaserOn = 0x63,kHIDUsage_BCS_TriggerModeContinuousLaserOn = 0x64,kHIDUsage_BCS_TriggerModeLaserOnWhilePulled = 0x65,kHIDUsage_BCS_TriggerModeLaserStaysOnAfterTriggerRelease = 0x66,kHIDUsage_BCS_CommitParametersToNVM = 0x6D,kHIDUsage_BCS_ParameterScanning = 0x6E,kHIDUsage_BCS_ParametersChanged = 0x6F,kHIDUsage_BCS_SetParameterDefaultValues = 0x70,kHIDUsage_BCS_ScannerInCradle = 0x75,kHIDUsage_BCS_ScannerInRange = 0x76,kHIDUsage_BCS_AimDuration = 0x7A,kHIDUsage_BCS_GoodReadLampDuration = 0x7B,kHIDUsage_BCS_GoodReadLampIntensity = 0x7C,kHIDUsage_BCS_GoodReadLED = 0x7D,kHIDUsage_BCS_GoodReadToneFrequency = 0x7E,kHIDUsage_BCS_GoodReadToneLength = 0x7F,kHIDUsage_BCS_GoodReadToneVolume = 0x80,kHIDUsage_BCS_NoReadMessage = 0x82,kHIDUsage_BCS_NotOnFileVolume = 0x83,kHIDUsage_BCS_PowerupBeep = 0x84,kHIDUsage_BCS_SoundErrorBeep = 0x85,kHIDUsage_BCS_SoundGoodReadBeep = 0x86,kHIDUsage_BCS_SoundNotOnFileBeep = 0x87,kHIDUsage_BCS_GoodReadWhenToWrite = 0x88,kHIDUsage_BCS_GRWTIAfterDecode = 0x89,kHIDUsage_BCS_GRWTIBeep_LampAfterTransmit = 0x8A,kHIDUsage_BCS_GRWTINoBeep_LampUseAtAll = 0x8B,kHIDUsage_BCS_BooklandEAN = 0x91,kHIDUsage_BCS_ConvertEAN8To13Type = 0x92,kHIDUsage_BCS_ConvertUPCAToEAN_13 = 0x93,kHIDUsage_BCS_ConvertUPC_EToA = 0x94,kHIDUsage_BCS_EAN_13 = 0x95,kHIDUsage_BCS_EAN_8 = 0x96,kHIDUsage_BCS_EAN_99_128_Mandatory = 0x97,kHIDUsage_BCS_EAN_99_P5_128_Optional = 0x98,kHIDUsage_BCS_UPC_EAN = 0x9A,kHIDUsage_BCS_UPC_EANCouponCode = 0x9B,kHIDUsage_BCS_UPC_EANPeriodicals = 0x9C,kHIDUsage_BCS_UPC_A = 0x9D,kHIDUsage_BCS_UPC_AWith128Mandatory = 0x9E,kHIDUsage_BCS_UPC_AWith128Optical = 0x9F,kHIDUsage_BCS_UPC_AWithP5Optional = 0xA0,kHIDUsage_BCS_UPC_E = 0xA1,kHIDUsage_BCS_UPC_E1 = 0xA2,kHIDUsage_BCS_Periodical = 0xA9,kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus2 = 0xAA,kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus2 = 0xAB,kHIDUsage_BCS_PeriodicalIgnorePlus2 = 0xAC,kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus5 = 0xAD,kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus5 = 0xAE,kHIDUsage_BCS_PeriodicalIgnorePlus5 = 0xAF,kHIDUsage_BCS_Check = 0xB0,kHIDUsage_BCS_CheckDisablePrice = 0xB1,kHIDUsage_BCS_CheckEnable4DigitPrice = 0xB2,kHIDUsage_BCS_CheckEnable5DigitPrice = 0xB3,kHIDUsage_BCS_CheckEnableEuropean4DigitPrice = 0xB4,kHIDUsage_BCS_CheckEnableEuropean5DigitPrice = 0xB5,kHIDUsage_BCS_EANTwoLabel = 0xB7,kHIDUsage_BCS_EANThreeLabel = 0xB8,kHIDUsage_BCS_EAN8FlagDigit1 = 0xB9,kHIDUsage_BCS_EAN8FlagDigit2 = 0xBA,kHIDUsage_BCS_EAN8FlagDigit3 = 0xBB,kHIDUsage_BCS_EAN13FlagDigit1 = 0xBC,kHIDUsage_BCS_EAN13FlagDigit2 = 0xBD,kHIDUsage_BCS_EAN13FlagDigit3 = 0xBE,kHIDUsage_BCS_AddEAN2_3LabelDefinition = 0xBF,kHIDUsage_BCS_ClearAllEAN2_3LabelDefinitions = 0xC0,kHIDUsage_BCS_Codabar = 0xC3,kHIDUsage_BCS_Code128 = 0xC4,kHIDUsage_BCS_Code39 = 0xC7,kHIDUsage_BCS_Code93 = 0xC8,kHIDUsage_BCS_FullASCIIConversion = 0xC9,kHIDUsage_BCS_Interleaved2of5 = 0xCA,kHIDUsage_BCS_ItalianPharmacyCode = 0xCB,kHIDUsage_BCS_MSI_Plessey = 0xCC,kHIDUsage_BCS_Standard2of5IATA = 0xCD,kHIDUsage_BCS_Standard2of5 = 0xCE,kHIDUsage_BCS_TransmitStart_Stop = 0xD3,kHIDUsage_BCS_TriOptic = 0xD4,kHIDUsage_BCS_UCC_EAN_128 = 0xD5,kHIDUsage_BCS_CheckDigit = 0xD6,kHIDUsage_BCS_CheckDigitDisable = 0xD7,kHIDUsage_BCS_CheckDigitEnableInterleaved2of5OPCC = 0xD8,kHIDUsage_BCS_CheckDigitEnableInterleaved2of5USS = 0xD9,kHIDUsage_BCS_CheckDigitEnableStandard2of5OPCC = 0xD8,kHIDUsage_BCS_CheckDigitEnableStandard2of5USS = 0xD9,kHIDUsage_BCS_CheckDigitEnableOneMSIPlessey = 0xDC,kHIDUsage_BCS_CheckDigitEnableTwoMSIPlessey = 0xDD,kHIDUsage_BCS_CheckDigitCodabarEnable = 0xDE,kHIDUsage_BCS_CheckDigitCode99Enable = 0xDF,kHIDUsage_BCS_TransmitCheckDigit = 0xF0,kHIDUsage_BCS_DisableCheckDigitTransmit = 0xF1,kHIDUsage_BCS_EnableCheckDigitTransmit = 0xF2,kHIDUsage_BCS_SymbologyIdentifier1 = 0xFB,kHIDUsage_BCS_SymbologyIdentifier2 = 0xFC,kHIDUsage_BCS_SymbologyIdentifier3 = 0xFD,kHIDUsage_BCS_DecodedData = 0xFE,kHIDUsage_BCS_DecodeDataContinued = 0xFF,kHIDUsage_BCS_BarSpaceData = 0x100,kHIDUsage_BCS_ScannerDataAccuracy = 0x101,kHIDUsage_BCS_RawDataPolarity = 0x102,kHIDUsage_BCS_PolarityInvertedBarCode = 0x103,kHIDUsage_BCS_PolarityNormalBarCode = 0x103,kHIDUsage_BCS_MinimumLengthToDecode = 0x106,kHIDUsage_BCS_MaximumLengthToDecode = 0x107,kHIDUsage_BCS_FirstDiscreteLengthToDecode = 0x108,kHIDUsage_BCS_SecondDiscreteLengthToDecode = 0x109,kHIDUsage_BCS_DataLengthMethod = 0x10A,kHIDUsage_BCS_DLMethodReadAny = 0x10B,kHIDUsage_BCS_DLMethodCheckInRange = 0x10C,kHIDUsage_BCS_DLMethodCheckForDiscrete = 0x10D,kHIDUsage_BCS_AztecCode = 0x110,kHIDUsage_BCS_BC412 = 0x111,kHIDUsage_BCS_ChannelCode = 0x112,kHIDUsage_BCS_Code16 = 0x113,kHIDUsage_BCS_Code32 = 0x114,kHIDUsage_BCS_Code49 = 0x115,kHIDUsage_BCS_CodeOne = 0x116,kHIDUsage_BCS_Colorcode = 0x117,kHIDUsage_BCS_DataMatrix = 0x118,kHIDUsage_BCS_MaxiCode = 0x119,kHIDUsage_BCS_MicroPDF = 0x11A,kHIDUsage_BCS_PDF_417 = 0x11B,kHIDUsage_BCS_PosiCode = 0x11C,kHIDUsage_BCS_QRCode = 0x11D,kHIDUsage_BCS_SuperCode = 0x11E,kHIDUsage_BCS_UltraCode = 0x11F,kHIDUsage_BCS_USB_5_SlugCode = 0x120,kHIDUsage_BCS_VeriCode = 0x121,};
enum _4060A7F89D4E94A7F03187722DC18477 {kIOEthernetWakeOnMagicPacket = 0x1,kIOEthernetWakeOnPacketAddressMatch = 0x2,};
enum _40632F24D04E333739CD45CB00931832 {kCDTrackInfoAddressTypeLBA = 0x0,kCDTrackInfoAddressTypeTrackNumber = 0x1,kCDTrackInfoAddressTypeSessionNumber = 0x2,};
enum _4084909D57EC2EADE71D5C4A3AC694F3 {timingApple12 = 0x82,timingApple12x = 0x87,timingApple13 = 0x8C,timingApple13x = 0x91,timingAppleVGA = 0x96,timingApple15 = 0xA0,timingApple15x = 0xA5,timingApple16 = 0xAA,timingAppleSVGA = 0xB4,timingApple1Ka = 0xBE,timingApple1Kb = 0xC8,timingApple19 = 0xD2,timingApple21 = 0xDC,timingSony_1900x1200_74hz = 0x212,timingSony_1900x1200_76hz = 0x21C,};
enum _40B8B22CA7BF92B23F8965323060D76F {eNoteReapDeprecated = 0x10000000,};
enum _411211C5617A4929137C8D4D0402403F {kIOVideoDevicePortTypeNotification = 0x0,kIOVideoDevicePortTypeOutput = 0x1,kIOVideoDevicePortTypeInput = 0x2,};
enum _4161E4591C983C76064C8F6BD9B2ED9D {mBaseOffset = 0x1,mRowBytes = 0x2,mBounds = 0x3,mVersion = 0x4,mHRes = 0x5,mVRes = 0x6,mPixelType = 0x7,mPixelSize = 0x8,mCmpCount = 0x9,mCmpSize = 0xA,mPlaneBytes = 0xB,mVertRefRate = 0xE,mVidParams = 0x1,mTable = 0x2,mPageCnt = 0x3,mDevType = 0x4,oneBitMode = 0x80,twoBitMode = 0x81,fourBitMode = 0x82,eightBitMode = 0x83,};
enum _4172C288E22EC0452CBBB95F7A05A7FC {IFNET_FAMILY_ANY = 0x0,IFNET_FAMILY_LOOPBACK = 0x1,IFNET_FAMILY_ETHERNET = 0x2,IFNET_FAMILY_SLIP = 0x3,IFNET_FAMILY_TUN = 0x4,IFNET_FAMILY_VLAN = 0x5,IFNET_FAMILY_PPP = 0x6,IFNET_FAMILY_PVC = 0x7,IFNET_FAMILY_DISC = 0x8,IFNET_FAMILY_MDECAP = 0x9,IFNET_FAMILY_GIF = 0xA,IFNET_FAMILY_FAITH = 0xB,IFNET_FAMILY_STF = 0xC,IFNET_FAMILY_FIREWIRE = 0xD,IFNET_FAMILY_BOND = 0xE,IFNET_FAMILY_CELLULAR = 0xF,};
enum _41C4F3A6AC753FBCE0FCB66D1E9D815A {kHIDUsage_Snsr_Undefined = 0x0,kHIDUsage_Snsr_Sensor = 0x1,kHIDUsage_Snsr_Biometric = 0x10,kHIDUsage_Snsr_Biometric_HumanPresence = 0x11,kHIDUsage_Snsr_Biometric_HumanProximity = 0x12,kHIDUsage_Snsr_Biometric_HumanTouch = 0x13,kHIDUsage_Snsr_Electrical = 0x20,kHIDUsage_Snsr_Electrical_Capacitance = 0x21,kHIDUsage_Snsr_Electrical_Current = 0x22,kHIDUsage_Snsr_Electrical_Power = 0x23,kHIDUsage_Snsr_Electrical_Inductance = 0x24,kHIDUsage_Snsr_Electrical_Resistance = 0x25,kHIDUsage_Snsr_Electrical_Voltage = 0x26,kHIDUsage_Snsr_Electrical_Potentiometer = 0x27,kHIDUsage_Snsr_Electrical_Frequency = 0x28,kHIDUsage_Snsr_Electrical_Period = 0x29,kHIDUsage_Snsr_Environmental = 0x30,kHIDUsage_Snsr_Environmental_AtmosphericPressure = 0x31,kHIDUsage_Snsr_Environmental_Humidity = 0x32,kHIDUsage_Snsr_Environmental_Temperature = 0x33,kHIDUsage_Snsr_Environmental_WindDirection = 0x34,kHIDUsage_Snsr_Environmental_WindSpeed = 0x35,kHIDUsage_Snsr_Light = 0x40,kHIDUsage_Snsr_Light_AmbientLight = 0x41,kHIDUsage_Snsr_Light_ConsumerInfrared = 0x42,kHIDUsage_Snsr_Location = 0x50,kHIDUsage_Snsr_Location_Broadcast = 0x51,kHIDUsage_Snsr_Location_DeadReckoning = 0x52,kHIDUsage_Snsr_Location_GPS = 0x53,kHIDUsage_Snsr_Location_Lookup = 0x54,kHIDUsage_Snsr_Location_Other = 0x55,kHIDUsage_Snsr_Location_Static = 0x56,kHIDUsage_Snsr_Location_Triangulation = 0x57,kHIDUsage_Snsr_Mechanical = 0x60,kHIDUsage_Snsr_Mechanical_BooleanSwitch = 0x61,kHIDUsage_Snsr_Mechanical_BooleanSwitchArray = 0x62,kHIDUsage_Snsr_Mechanical_MultivalueSwitch = 0x63,kHIDUsage_Snsr_Mechanical_Force = 0x64,kHIDUsage_Snsr_Mechanical_Pressure = 0x65,kHIDUsage_Snsr_Mechanical_Strain = 0x66,kHIDUsage_Snsr_Mechanical_Weight = 0x67,kHIDUsage_Snsr_Mechanical_HapticVibrator = 0x68,kHIDUsage_Snsr_Mechanical_HallEffectSwitch = 0x69,kHIDUsage_Snsr_Motion = 0x70,kHIDUsage_Snsr_Motion_Accelerometer1D = 0x71,kHIDUsage_Snsr_Motion_Accelerometer2D = 0x72,kHIDUsage_Snsr_Motion_Accelerometer3D = 0x73,kHIDUsage_Snsr_Motion_Gyrometer1D = 0x74,kHIDUsage_Snsr_Motion_Gyrometer2D = 0x75,kHIDUsage_Snsr_Motion_Gyrometer3D = 0x76,kHIDUsage_Snsr_Motion_MotionDetector = 0x77,kHIDUsage_Snsr_Motion_Speedometer = 0x78,kHIDUsage_Snsr_Motion_Accelerometer = 0x79,kHIDUsage_Snsr_Motion_Gyrometer = 0x7A,kHIDUsage_Snsr_Orientation = 0x80,kHIDUsage_Snsr_Orientation_Compass1D = 0x81,kHIDUsage_Snsr_Orientation_Compass2D = 0x82,kHIDUsage_Snsr_Orientation_Compass3D = 0x83,kHIDUsage_Snsr_Orientation_Inclinometer1D = 0x84,kHIDUsage_Snsr_Orientation_Inclinometer2D = 0x85,kHIDUsage_Snsr_Orientation_Inclinometer3D = 0x86,kHIDUsage_Snsr_Orientation_Distance1D = 0x87,kHIDUsage_Snsr_Orientation_Distance2D = 0x88,kHIDUsage_Snsr_Orientation_Distance3D = 0x89,kHIDUsage_Snsr_Orientation_DeviceOrientation = 0x8A,kHIDUsage_Snsr_Orientation_CompassD = 0x8B,kHIDUsage_Snsr_Orientation_InclinometerD = 0x8C,kHIDUsage_Snsr_Orientation_DistanceD = 0x8D,kHIDUsage_Snsr_Scanner = 0x90,kHIDUsage_Snsr_Scanner_Barcode = 0x91,kHIDUsage_Snsr_Scanner_RFID = 0x92,kHIDUsage_Snsr_Scanner_NFC = 0x93,kHIDUsage_Snsr_Time = 0xA0,kHIDUsage_Snsr_Time_AlarmTimer = 0xA1,kHIDUsage_Snsr_Time_RealTimeClock = 0xA2,kHIDUsage_Snsr_Other = 0xE0,kHIDUsage_Snsr_Other_Custom = 0xE1,kHIDUsage_Snsr_Other_Generic = 0xE2,kHIDUsage_Snsr_Other_GenericEnumerator = 0xE3,kHIDUsage_Snsr_Modifier_None = 0x0,kHIDUsage_Snsr_Modifier_ChangeSensitivityAbsolute = 0x1,kHIDUsage_Snsr_Modifier_Max = 0x2,kHIDUsage_Snsr_Modifier_Min = 0x3,kHIDUsage_Snsr_Modifier_Accuracy = 0x4,kHIDUsage_Snsr_Modifier_Resolution = 0x5,kHIDUsage_Snsr_Modifier_ThresholdHigh = 0x6,kHIDUsage_Snsr_Modifier_ThresholdLow = 0x7,kHIDUsage_Snsr_Modifier_CalibrationOffset = 0x8,kHIDUsage_Snsr_Modifier_CalibrationMultiplier = 0x9,kHIDUsage_Snsr_Modifier_ReportInterval = 0xA,kHIDUsage_Snsr_Modifier_FrequencyMax = 0xB,kHIDUsage_Snsr_Modifier_PeriodMax = 0xC,kHIDUsage_Snsr_Modifier_ChangeSensitivityPercentRange = 0xD,kHIDUsage_Snsr_Modifier_ChangeSensitivityPercentRelative = 0xE,kHIDUsage_Snsr_Modifier_VendorDefined = 0xF,kHIDUsage_Snsr_Event = 0x200,kHIDUsage_Snsr_Event_SensorState = 0x201,kHIDUsage_Snsr_Event_SensorEvent = 0x202,kHIDUsage_Snsr_Event_SensorState_Undefined = 0x800,kHIDUsage_Snsr_Event_SensorState_Ready = 0x801,kHIDUsage_Snsr_Event_SensorState_NotAvailable = 0x802,kHIDUsage_Snsr_Event_SensorState_NoData = 0x803,kHIDUsage_Snsr_Event_SensorState_Initializing = 0x804,kHIDUsage_Snsr_Event_SensorState_AccessDenied = 0x805,kHIDUsage_Snsr_Event_SensorState_Error = 0x806,kHIDUsage_Snsr_Event_SensorEvent_Unknown = 0x810,kHIDUsage_Snsr_Event_SensorEvent_StateChanged = 0x811,kHIDUsage_Snsr_Event_SensorEvent_PropertyChanged = 0x812,kHIDUsage_Snsr_Event_SensorEvent_DataUpdated = 0x813,kHIDUsage_Snsr_Event_SensorEvent_PollResponse = 0x814,kHIDUsage_Snsr_Event_SensorEvent_ChangeSensitivity = 0x815,kHIDUsage_Snsr_Event_SensorEvent_RangeMaxReached = 0x816,kHIDUsage_Snsr_Event_SensorEvent_RangeMinReached = 0x817,kHIDUsage_Snsr_Event_SensorEvent_HighThresholdCrossUp = 0x818,kHIDUsage_Snsr_Event_SensorEvent_HighThresholdCrossDown = 0x819,kHIDUsage_Snsr_Event_SensorEvent_LowThresholdCrossUp = 0x81A,kHIDUsage_Snsr_Event_SensorEvent_LowThresholdCrossDown = 0x81B,kHIDUsage_Snsr_Event_SensorEvent_ZeroThresholdCrossUp = 0x81C,kHIDUsage_Snsr_Event_SensorEvent_ZeroThresholdCrossDown = 0x81D,kHIDUsage_Snsr_Event_SensorEvent_PeriodExceeded = 0x81E,kHIDUsage_Snsr_Event_SensorEvent_FrequencyExceeded = 0x81F,kHIDUsage_Snsr_Event_SensorEvent_ComplexTrigger = 0x820,kHIDUsage_Snsr_Property = 0x300,kHIDUsage_Snsr_Property_FriendlyName = 0x301,kHIDUsage_Snsr_Property_PersistentUniqueID = 0x302,kHIDUsage_Snsr_Property_SensorStatus = 0x303,kHIDUsage_Snsr_Property_MinimumReportInterval = 0x304,kHIDUsage_Snsr_Property_Manufacturer = 0x305,kHIDUsage_Snsr_Property_Model = 0x306,kHIDUsage_Snsr_Property_SerialNumber = 0x307,kHIDUsage_Snsr_Property_Description = 0x308,kHIDUsage_Snsr_Property_ConnectionType = 0x309,kHIDUsage_Snsr_Property_DevicePath = 0x30A,kHIDUsage_Snsr_Property_HardwareRevision = 0x30B,kHIDUsage_Snsr_Property_FirmwareVersion = 0x30C,kHIDUsage_Snsr_Property_ReleaseData = 0x30D,kHIDUsage_Snsr_Property_ReportInterval = 0x30E,kHIDUsage_Snsr_Property_ChangeSensitivityAbsolute = 0x30F,kHIDUsage_Snsr_Property_ChangeSensitivityPercentRange = 0x310,kHIDUsage_Snsr_Property_ChangeSensitivityPercentRelative = 0x311,kHIDUsage_Snsr_Property_Accuracy = 0x312,kHIDUsage_Snsr_Property_Resolution = 0x313,kHIDUsage_Snsr_Property_Maximum = 0x314,kHIDUsage_Snsr_Property_Minimum = 0x315,kHIDUsage_Snsr_Property_ReportingState = 0x316,kHIDUsage_Snsr_Property_SamplingRate = 0x317,kHIDUsage_Snsr_Property_ResponseCurve = 0x318,kHIDUsage_Snsr_Property_PowerState = 0x319,kHIDUsage_Snsr_Property_ReportLatency = 0x31B,kHIDUsage_Snsr_Property_ConnectionType_Integrated = 0x830,kHIDUsage_Snsr_Property_ConnectionType_Attached = 0x831,kHIDUsage_Snsr_Property_ConnectionType_External = 0x832,kHIDUsage_Snsr_Property_ReportingState_NoEvents = 0x840,kHIDUsage_Snsr_Property_ReportingState_AllEvents = 0x841,kHIDUsage_Snsr_Property_ReportingState_ThresholdEvents = 0x842,kHIDUsage_Snsr_Property_ReportingState_WakeNoEvents = 0x843,kHIDUsage_Snsr_Property_ReportingState_WakeAllEvents = 0x844,kHIDUsage_Snsr_Property_ReportingState_WakeThresholdEvents = 0x845,kHIDUsage_Snsr_Property_PowerState_Undefined = 0x850,kHIDUsage_Snsr_Property_PowerState_D0_FullPower = 0x851,kHIDUsage_Snsr_Property_PowerState_D1_LowPower = 0x852,kHIDUsage_Snsr_Property_PowerState_D2_Standby = 0x853,kHIDUsage_Snsr_Property_PowerState_D3_Sleep = 0x854,kHIDUsage_Snsr_Property_PowerState_D4_PowerOff = 0x855,kHIDUsage_Snsr_Light_Illuminance = 0x4D1,kHIDUsage_Snsr_Data_Location = 0x400,kHIDUsage_Snsr_Data_Location_Reserved = 0x401,kHIDUsage_Snsr_Data_Location_AltitudeAntennaSeaLevel = 0x402,kHIDUsage_Snsr_Data_Location_DifferentialReferenceStationID = 0x403,kHIDUsage_Snsr_Data_Location_AltitudeEllipsoidError = 0x404,kHIDUsage_Snsr_Data_Location_AltitudeEllipsoid = 0x405,kHIDUsage_Snsr_Data_Location_AltitudeSeaLevelError = 0x406,kHIDUsage_Snsr_Data_Location_AltitudeSeaLevel = 0x407,kHIDUsage_Snsr_Data_Location_DifferentialGPSDataAge = 0x408,kHIDUsage_Snsr_Data_Location_ErrorRadius = 0x409,kHIDUsage_Snsr_Data_Location_FixQuality = 0x40A,kHIDUsage_Snsr_Data_Location_FixQualityNoFix = 0x870,kHIDUsage_Snsr_Data_Location_FixQualityGPS = 0x871,kHIDUsage_Snsr_Data_Location_FixQualityDGPS = 0x872,kHIDUsage_Snsr_Data_Location_FixType = 0x40B,kHIDUsage_Snsr_Data_Location_FixTypeNoFix = 0x880,kHIDUsage_Snsr_Data_Location_FixTypeGPSSPSMode = 0x881,kHIDUsage_Snsr_Data_Location_FixTypeDGPSSPSMode = 0x882,kHIDUsage_Snsr_Data_Location_FixTypeGPSPPSMode = 0x883,kHIDUsage_Snsr_Data_Location_FixTypeRealTimeKinematic = 0x884,kHIDUsage_Snsr_Data_Location_FixTypeFloatRTK = 0x885,kHIDUsage_Snsr_Data_Location_FixTypeEstimated = 0x886,kHIDUsage_Snsr_Data_Location_FixTypeManualInputMode = 0x887,kHIDUsage_Snsr_Data_Location_FixTypeSimulatorMode = 0x888,kHIDUsage_Snsr_Data_Location_GeoidalSeparation = 0x40C,kHIDUsage_Snsr_Data_Location_GPSOperationMode = 0x40D,kHIDUsage_Snsr_Data_Location_GPSOperationModeManual = 0x890,kHIDUsage_Snsr_Data_Location_GPSOperationModeAutomatic = 0x891,kHIDUsage_Snsr_Data_Location_GPSSelectionMode = 0x40E,kHIDUsage_Snsr_Data_Location_GPSSelectionModeAutonomous = 0x8A0,kHIDUsage_Snsr_Data_Location_GPSSelectionModeDGPS = 0x8A1,kHIDUsage_Snsr_Data_Location_GPSSelectionModeEstimated = 0x8A2,kHIDUsage_Snsr_Data_Location_GPSSelectionModeManualInput = 0x8A3,kHIDUsage_Snsr_Data_Location_GPSSelectionModeSimulator = 0x8A4,kHIDUsage_Snsr_Data_Location_GPSSelectionModeDataNotValid = 0x8A5,kHIDUsage_Snsr_Data_Location_GPSStatus = 0x40F,kHIDUsage_Snsr_Data_Location_GPSStatusDataValid = 0x8B0,kHIDUsage_Snsr_Data_Location_GPSStatusDataNotValid = 0x8B1,kHIDUsage_Snsr_Data_Location_PositionDilutionOfPrecision = 0x410,kHIDUsage_Snsr_Data_Location_HorizontalDilutionOfPrecision = 0x411,kHIDUsage_Snsr_Data_Location_VerticalDilutionOfPrecision = 0x412,kHIDUsage_Snsr_Data_Location_Latitude = 0x413,kHIDUsage_Snsr_Data_Location_Longitude = 0x414,kHIDUsage_Snsr_Data_Location_TrueHeading = 0x415,kHIDUsage_Snsr_Data_Location_MagneticHeading = 0x416,kHIDUsage_Snsr_Data_Location_MagneticVariation = 0x417,kHIDUsage_Snsr_Data_Location_Speed = 0x418,kHIDUsage_Snsr_Data_Location_SatellitesInView = 0x419,kHIDUsage_Snsr_Data_Location_SatellitesInViewAzimuth = 0x41A,kHIDUsage_Snsr_Data_Location_SatellitesInViewElevation = 0x41B,kHIDUsage_Snsr_Data_Location_SatellitesInViewIDs = 0x41C,kHIDUsage_Snsr_Data_Location_SatellitesInViewPRNs = 0x41D,kHIDUsage_Snsr_Data_Location_SatellitesInViewSNRatios = 0x41E,kHIDUsage_Snsr_Data_Location_SatellitesUsedCount = 0x41F,kHIDUsage_Snsr_Data_Location_SatellitesUsedPRNs = 0x420,kHIDUsage_Snsr_Data_Location_NMEASentence = 0x421,kHIDUsage_Snsr_Data_Location_AddressLine1 = 0x422,kHIDUsage_Snsr_Data_Location_AddressLine2 = 0x423,kHIDUsage_Snsr_Data_Location_City = 0x424,kHIDUsage_Snsr_Data_Location_StateOrProvince = 0x425,kHIDUsage_Snsr_Data_Location_CountryOrRegion = 0x426,kHIDUsage_Snsr_Data_Location_PostalCode = 0x427,kHIDUsage_Snsr_Property_Location = 0x42A,kHIDUsage_Snsr_Property_Location_DesiredAccuracy = 0x42B,kHIDUsage_Snsr_Property_Location_AccuracyDefault = 0x860,kHIDUsage_Snsr_Property_Location_AccuracyHigh = 0x861,kHIDUsage_Snsr_Property_Location_AccuracyMedium = 0x862,kHIDUsage_Snsr_Property_Location_AccuracyLow = 0x863,kHIDUsage_Snsr_Data_Environmental = 0x430,kHIDUsage_Snsr_Data_Environmental_AtmosphericPressure = 0x431,kHIDUsage_Snsr_Data_Environmental_Reserved = 0x432,kHIDUsage_Snsr_Data_Environmental_RelativeHumidity = 0x433,kHIDUsage_Snsr_Data_Environmental_Temperature = 0x434,kHIDUsage_Snsr_Data_Environmental_WindDirection = 0x435,kHIDUsage_Snsr_Data_Environmental_WindSpeed = 0x436,kHIDUsage_Snsr_Property_Environmental = 0x440,kHIDUsage_Snsr_Property_Environmental_ReferencePressure = 0x441,kHIDUsage_Snsr_Data_Motion = 0x450,kHIDUsage_Snsr_Data_Motion_State = 0x451,kHIDUsage_Snsr_Data_Motion_Acceleration = 0x452,kHIDUsage_Snsr_Data_Motion_AccelerationAxisX = 0x453,kHIDUsage_Snsr_Data_Motion_AccelerationAxisY = 0x454,kHIDUsage_Snsr_Data_Motion_AccelerationAxisZ = 0x455,kHIDUsage_Snsr_Data_Motion_AngularVelocity = 0x456,kHIDUsage_Snsr_Data_Motion_AngularVelocityXAxis = 0x457,kHIDUsage_Snsr_Data_Motion_AngularVelocityYAxis = 0x458,kHIDUsage_Snsr_Data_Motion_AngularVelocityZAxis = 0x459,kHIDUsage_Snsr_Data_Motion_AngularPosition = 0x45A,kHIDUsage_Snsr_Data_Motion_AngularPositionXAxis = 0x45B,kHIDUsage_Snsr_Data_Motion_AngularPositionYAxis = 0x45C,kHIDUsage_Snsr_Data_Motion_AngularPositionZAxis = 0x45D,kHIDUsage_Snsr_Data_Motion_Speed = 0x45E,kHIDUsage_Snsr_Data_Motion_Intensity = 0x45F,kHIDUsage_Snsr_Data_Orientation = 0x470,kHIDUsage_Snsr_Data_Orientation_Heading = 0x471,kHIDUsage_Snsr_Data_Orientation_HeadingXAxis = 0x472,kHIDUsage_Snsr_Data_Orientation_HeadingYAxis = 0x473,kHIDUsage_Snsr_Data_Orientation_HeadingZAxis = 0x474,kHIDUsage_Snsr_Data_Orientation_HeadingCompensatedMagneticNorth = 0x475,kHIDUsage_Snsr_Data_Orientation_HeadingCompensatedTrueNorth = 0x476,kHIDUsage_Snsr_Data_Orientation_HeadingMagneticNorth = 0x477,kHIDUsage_Snsr_Data_Orientation_HeadingTrueNorth = 0x478,kHIDUsage_Snsr_Data_Orientation_Distance = 0x479,kHIDUsage_Snsr_Data_Orientation_DistanceXAxis = 0x47A,kHIDUsage_Snsr_Data_Orientation_DistanceYAxis = 0x47B,kHIDUsage_Snsr_Data_Orientation_DistanceZAxis = 0x47C,kHIDUsage_Snsr_Data_Orientation_DistanceOutOfRange = 0x47D,kHIDUsage_Snsr_Data_Orientation_Tilt = 0x47E,kHIDUsage_Snsr_Data_Orientation_TiltXAxis = 0x47F,kHIDUsage_Snsr_Data_Orientation_TiltYAxis = 0x480,kHIDUsage_Snsr_Data_Orientation_TiltZAxis = 0x481,kHIDUsage_Snsr_Data_Orientation_RotationMatrix = 0x482,kHIDUsage_Snsr_Data_Orientation_Quaternion = 0x483,kHIDUsage_Snsr_Data_Orientation_MagneticFlux = 0x484,kHIDUsage_Snsr_Data_Orientation_MagneticFluxXAxis = 0x485,kHIDUsage_Snsr_Data_Orientation_MagneticFluxYAxis = 0x486,kHIDUsage_Snsr_Data_Orientation_MagneticFluxZAxis = 0x487,kHIDUsage_Snsr_Data_Mechanical = 0x490,kHIDUsage_Snsr_Data_Mechanical_BooleanSwitchState = 0x491,kHIDUsage_Snsr_Data_Mechanical_BooleanSwitchArrayStates = 0x492,kHIDUsage_Snsr_Data_Mechanical_MultivalueSwitchValue = 0x493,kHIDUsage_Snsr_Data_Mechanical_Force = 0x494,kHIDUsage_Snsr_Data_Mechanical_AbsolutePressure = 0x495,kHIDUsage_Snsr_Data_Mechanical_GaugePressure = 0x496,kHIDUsage_Snsr_Data_Mechanical_Strain = 0x497,kHIDUsage_Snsr_Data_Mechanical_Weight = 0x498,kHIDUsage_Snsr_Property_Mechanical = 0x4A0,kHIDUsage_Snsr_Property_Mechanical_VibrationState = 0x4A1,kHIDUsage_Snsr_Property_Mechanical_ForwardVibrationSpeed = 0x4A2,kHIDUsage_Snsr_Property_Mechanical_BackwardVibrationSpeed = 0x4A3,kHIDUsage_Snsr_Data_Biometric = 0x4B0,kHIDUsage_Snsr_Data_Biometric_HumanPresence = 0x4B1,kHIDUsage_Snsr_Data_Biometric_HumanProximityRange = 0x4B2,kHIDUsage_Snsr_Data_Biometric_HumanProximityOutOfRange = 0x4B3,kHIDUsage_Snsr_Data_Biometric_HumanTouchState = 0x4B4,kHIDUsage_Snsr_Data_Light = 0x4D0,kHIDUsage_Snsr_Data_Light_Illuminance = 0x4D1,kHIDUsage_Snsr_Data_Light_ColorTemperature = 0x4D2,kHIDUsage_Snsr_Data_Light_Chromaticity = 0x4D3,kHIDUsage_Snsr_Data_Light_ChromaticityX = 0x4D4,kHIDUsage_Snsr_Data_Light_ChromaticityY = 0x4D5,kHIDUsage_Snsr_Data_Light_ConsumerIRSentenceReceive = 0x4D6,kHIDUsage_Snsr_Property_Light = 0x4E0,kHIDUsage_Snsr_Property_Light_ConsumerIRSentenceSend = 0x4E1,kHIDUsage_Snsr_Data_Scanner = 0x4F0,kHIDUsage_Snsr_Data_Scanner_RFIDTag40Bit = 0x4F1,kHIDUsage_Snsr_Data_Scanner_NFCSentenceReceive = 0x4F2,kHIDUsage_Snsr_Property_Scanner = 0x4F8,kHIDUsage_Snsr_Property_Scanner_NFCSentenceSend = 0xF49,kHIDUsage_Snsr_Data_Electrical = 0x500,kHIDUsage_Snsr_Data_Electrical_Capacitance = 0x501,kHIDUsage_Snsr_Data_Electrical_Current = 0x502,kHIDUsage_Snsr_Data_Electrical_ElectricalPower = 0x503,kHIDUsage_Snsr_Data_Electrical_Inductance = 0x504,kHIDUsage_Snsr_Data_Electrical_Resistance = 0x505,kHIDUsage_Snsr_Data_Electrical_Voltage = 0x506,kHIDUsage_Snsr_Data_Electrical_Frequency = 0x507,kHIDUsage_Snsr_Data_Electrical_Period = 0x508,kHIDUsage_Snsr_Data_Electrical_PercentOfRange = 0x509,kHIDUsage_Snsr_Data_Time = 0x520,kHIDUsage_Snsr_Data_Time_Year = 0x521,kHIDUsage_Snsr_Data_Time_Month = 0x522,kHIDUsage_Snsr_Data_Time_Day = 0x523,kHIDUsage_Snsr_Data_Time_DayOfWeek = 0x524,kHIDUsage_Snsr_Data_Time_DayOfWeekSunday = 0x8C0,kHIDUsage_Snsr_Data_Time_DayOfWeekMonday = 0x8C1,kHIDUsage_Snsr_Data_Time_DayOfWeekTuesday = 0x8C2,kHIDUsage_Snsr_Data_Time_DayOfWeekWednesday = 0x8C3,kHIDUsage_Snsr_Data_Time_DayOfWeekThursday = 0x8C4,kHIDUsage_Snsr_Data_Time_DayOfWeekFriday = 0x8C5,kHIDUsage_Snsr_Data_Time_DayOfWeekSaturday = 0x8C6,kHIDUsage_Snsr_Data_Time_Hour = 0x525,kHIDUsage_Snsr_Data_Time_Minute = 0x526,kHIDUsage_Snsr_Data_Time_Second = 0x527,kHIDUsage_Snsr_Data_Time_Millisecond = 0x528,kHIDUsage_Snsr_Data_Time_Timestamp = 0x529,kHIDUsage_Snsr_Data_Time_JulianDayOfYear = 0x52A,kHIDUsage_Snsr_Property_Time = 0x530,kHIDUsage_Snsr_Property_Time_TimeZoneOffsetFromUTC = 0x531,kHIDUsage_Snsr_Property_Time_TimeZoneName = 0x532,kHIDUsage_Snsr_Property_Time_DaylightSavingsTimeObserved = 0x533,kHIDUsage_Snsr_Property_Time_TimeTrimAdjustment = 0x534,kHIDUsage_Snsr_Property_Time_ArmAlarm = 0x535,kHIDUsage_Snsr_Data_Custom = 0x540,kHIDUsage_Snsr_Data_Custom_Usage = 0x541,kHIDUsage_Snsr_Data_Custom_BooleanArray = 0x542,kHIDUsage_Snsr_Data_Custom_Value = 0x543,kHIDUsage_Snsr_Data_Custom_Value1 = 0x544,kHIDUsage_Snsr_Data_Custom_Value2 = 0x545,kHIDUsage_Snsr_Data_Custom_Value3 = 0x546,kHIDUsage_Snsr_Data_Custom_Value4 = 0x547,kHIDUsage_Snsr_Data_Custom_Value5 = 0x548,kHIDUsage_Snsr_Data_Custom_Value6 = 0x549,};
enum _42416C69E7D1CFF0E81B7CC03A25966C {kIOPCICorrectableErrorBitReceiver = 0x0,kIOPCICorrectableErrorBitBadTLP = 0x6,kIOPCICorrectableErrorBitBadDLLP = 0x7,kIOPCICorrectableErrorBitReplayNumRollover = 0x8,kIOPCICorrectableErrorBitReplayTimerTimeout = 0xC,kIOPCICorrectableErrorBitAdvisoryNonFatal = 0xD,kIOPCICorrectableErrorBitCorrectedInternal = 0xE,kIOPCICorrectableErrorBitHeaderLogOverflow = 0xF,};
enum _429FC199D0D3B822E0830E749F0E8ADE {kIODisplayPowerStateOff = 0x0,kIODisplayPowerStateMinUsable = 0x1,kIODisplayPowerStateOn = 0x2,};
enum _42FA6AEBACD228BF297AF0FECAB3A930 {kUSBControl = 0x0,kUSBIsoc = 0x1,kUSBBulk = 0x2,kUSBInterrupt = 0x3,kUSBAnyType = 0xFF,};
enum _4311FBDC2577465EEC2916AB872A8875 {kSyncPositivePolarityBit = 0x0,kSyncPositivePolarityMask = 0x1,};
enum _4320A90E8CD68AE4E971F5EE9913FF04 {kFWSBP2CommandCompleteNotify = 0x1,kFWSBP2CommandTransferDataFromTarget = 0x2,kFWSBP2CommandImmediate = 0x4,kFWSBP2CommandNormalORB = 0x20,kFWSBP2CommandReservedORB = 0x40,kFWSBP2CommandVendorORB = 0x80,kFWSBP2CommandDummyORB = 0x100,kFWSBP2CommandCheckGeneration = 0x200,kFWSBP2CommandFixedSize = 0x400,kFWSBP2CommandVirtualORBs = 0x800,};
enum _436331CCA4AA865D654C5A39CBFC7146 {kHardwareCursorInfoMajorVersion = 0x1,kHardwareCursorInfoMinorVersion = 0x0,};
enum _460FEF131873D85B62CA194B513C34CA {kUSB_SSCompDesc_Bulk_MaxStreams_Mask = 0x1F,kUSB_SSCompDesc_Bulk_MaxStreams_Shift = 0x0,kUSB_SSCompDesc_Isoc_Mult_Mask = 0x3,kUSB_SSCompDesc_Isoc_Mult_Shift = 0x0,};
enum _4645CECEAAE40815B53C07098CBB20D7 {kIOUCTypeMask = 0xF,kIOUCScalarIScalarO = 0x0,kIOUCScalarIStructO = 0x2,kIOUCStructIStructO = 0x3,kIOUCScalarIStructI = 0x4,kIOUCForegroundOnly = 0x10,};
enum _4650964472F70635ADB6A5D9E3633368 {kGetConnectionCount = 0xFFFFFFFF,kActivateConnection = 0x0,kDeactivateConnection = 0x200,};
enum _470A85D07F6F9FEE650BAF461323AD49 {kFWBusManagerArbitrationTimeoutDuration = 0x271,};
enum _4730E76D5BC021BF38D263B5FC1377BF {kIOHSyncDisable = 0x1,kIOVSyncDisable = 0x2,kIOCSyncDisable = 0x4,kIONoSeparateSyncControl = 0x40,kIOTriStateSyncs = 0x80,kIOSyncOnBlue = 0x8,kIOSyncOnGreen = 0x10,kIOSyncOnRed = 0x20,};
enum _47436EDA255B249026E95824F62965AF {addPacketShift = 0xB,};
enum _474BF342E22B2A7995960B0385BBCF67 {kVideoNoTransactionType = 0x0,kVideoNoTransactionTypeMask = 0x1,kVideoSimpleI2CType = 0x1,kVideoSimpleI2CTypeMask = 0x2,kVideoDDCciReplyType = 0x2,kVideoDDCciReplyTypeMask = 0x4,kVideoCombinedI2CType = 0x3,kVideoCombinedI2CTypeMask = 0x8,kVideoDisplayPortNativeType = 0x4,kVideoDisplayPortNativeTypeMask = 0x10,};
enum _475ED5A0E2BFEA40A213D760F44754DA {kIOAnalogSignalLevel_0700_0300 = 0x0,kIOAnalogSignalLevel_0714_0286 = 0x1,kIOAnalogSignalLevel_1000_0400 = 0x2,kIOAnalogSignalLevel_0700_0000 = 0x3,};
enum _476FB8036AB1E218B03000B3B903EC53 {kInitialDriverDescriptor = 0x0,kVersionOneDriverDescriptor = 0x1,};
enum _483A5C7ABA64A6B3D0D0E36880EE8B8E {OUTPUT_UNDEFINED = 0x300,OUTPUT_SPEAKER = 0x301,OUTPUT_HEADPHONES = 0x302,OUTPUT_HEAD_MOUNTED_DISPLAY_AUDIO = 0x303,OUTPUT_DESKTOP_SPEAKER = 0x304,OUTPUT_ROOM_SPEAKER = 0x305,OUTPUT_COMMUNICATION_SPEAKER = 0x306,OUTPUT_LOW_FREQUENCY_EFFECTS_SPEAKER = 0x307,};
enum _490F7B5E696CDE26516C256347A51198 {kIOPMSleepNow = 0x1,kIOPMAllowSleep = 0x2,kIOPMPreventSleep = 0x4,kIOPMPowerButton = 0x8,kIOPMClamshellClosed = 0x10,kIOPMPowerEmergency = 0x20,kIOPMDisableClamshell = 0x40,kIOPMEnableClamshell = 0x80,kIOPMProcessorSpeedChange = 0x100,kIOPMOverTemp = 0x200,kIOPMClamshellOpened = 0x400,kIOPMDWOverTemp = 0x800,};
enum _49258F05406C0060A1E164513D4B52B7 {kIOSyncPositivePolarity = 0x1,};
enum _49293FF487180EB2AC1EE5A38B5C67FD {kIOStreamEnqueueInputTrap = 0x0,kIOStreamEnqueueInputSyncTrap = 0x1,};
enum _498CD397712D75EC65611E47DF3D7E78 {kIOAGPGartIdleInvalidate = 0x1,kIOAGPDisablePageSpans = 0x2,kIOAGPDisableAGPWrites = 0x4,kIOAGPDisablePCIReads = 0x8,kIOAGPDisablePCIWrites = 0x10,kIOAGPDisableUnaligned = 0x20,kIOAGPDisableFeature6 = 0x40,kIOAGPDisableFeature7 = 0x80,kIOAGPDisableFeature8 = 0x100,kIOAGPDisableFeature9 = 0x200,};
enum _499051968B8209EA7FBA63DA800515BD {kIORangeColorimetryNotSupported = 0x0,kIORangeColorimetryNativeRGB = 0x1,kIORangeColorimetrysRGB = 0x2,kIORangeColorimetryDCIP3 = 0x4,kIORangeColorimetryAdobeRGB = 0x8,kIORangeColorimetryxvYCC = 0x10,kIORangeColorimetryWGRGB = 0x20,kIORangeColorimetryBT601 = 0x40,kIORangeColorimetryBT709 = 0x80,kIORangeColorimetryBT2020 = 0x100,kIORangeColorimetryBT2100 = 0x200,};
enum _49C9B8BF1FC9F1F37FCF310746C55104 {kSCSIServicesNotification_Suspend = 0x69000080,kSCSIServicesNotification_Resume = 0x69000090,};
enum _4AFC229077C67461192CE16E95FE2ED6 {kBluetoothLEMaxTXTimeMin = 0x148,kBluetoothLEMaxTXTimeDefault = 0x1B,kBluetoothLEMaxTXTimeMax = 0x848,kBluetoothLEMaxTXOctetsMin = 0x1B,kBluetoothLEMaxTXOctetsDefault = 0x80,kBluetoothLEMaxTXOctetsMax = 0xFB,};
enum _4B5FCA3AD88398EB7B998A436680C9EE {kIOFBUserRequestProbe = 0x1,};
enum _4D311711DC1C9852D3E3007ACA2DEC38 {kRegMaxPropertyNameLength = 0x1F,};
enum _4D92B693FCFB756F364F4B30A21B36B5 {kDisplayModeSafetyFlags = 0x7,kDisplayModeAlwaysShowFlag = 0x8,kDisplayModeNeverShowFlag = 0x80,kDisplayModeNotResizeFlag = 0x10,kDisplayModeRequiresPanFlag = 0x20,kDisplayModeInterlacedFlag = 0x40,kDisplayModeSimulscanFlag = 0x100,kDisplayModeBuiltInFlag = 0x400,kDisplayModeNotPresetFlag = 0x200,kDisplayModeStretchedFlag = 0x800,kDisplayModeNotGraphicsQualityFlag = 0x1000,kDisplayModeValidateAgainstDisplay = 0x2000,kDisplayModeTelevisionFlag = 0x100000,kDisplayModeValidForMirroringFlag = 0x200000,kDisplayModeAcceleratorBackedFlag = 0x400000,kDisplayModeValidForHiResFlag = 0x800000,kDisplayModeValidForAirPlayFlag = 0x1000000,kDisplayModeNativeFlag = 0x2000000,};
enum _4DD43DCD08ECBE4F6527EEAA64813FA1 {kHIDUsage_KeyboardErrorRollOver = 0x1,kHIDUsage_KeyboardPOSTFail = 0x2,kHIDUsage_KeyboardErrorUndefined = 0x3,kHIDUsage_KeyboardA = 0x4,kHIDUsage_KeyboardB = 0x5,kHIDUsage_KeyboardC = 0x6,kHIDUsage_KeyboardD = 0x7,kHIDUsage_KeyboardE = 0x8,kHIDUsage_KeyboardF = 0x9,kHIDUsage_KeyboardG = 0xA,kHIDUsage_KeyboardH = 0xB,kHIDUsage_KeyboardI = 0xC,kHIDUsage_KeyboardJ = 0xD,kHIDUsage_KeyboardK = 0xE,kHIDUsage_KeyboardL = 0xF,kHIDUsage_KeyboardM = 0x10,kHIDUsage_KeyboardN = 0x11,kHIDUsage_KeyboardO = 0x12,kHIDUsage_KeyboardP = 0x13,kHIDUsage_KeyboardQ = 0x14,kHIDUsage_KeyboardR = 0x15,kHIDUsage_KeyboardS = 0x16,kHIDUsage_KeyboardT = 0x17,kHIDUsage_KeyboardU = 0x18,kHIDUsage_KeyboardV = 0x19,kHIDUsage_KeyboardW = 0x1A,kHIDUsage_KeyboardX = 0x1B,kHIDUsage_KeyboardY = 0x1C,kHIDUsage_KeyboardZ = 0x1D,kHIDUsage_Keyboard1 = 0x1E,kHIDUsage_Keyboard2 = 0x1F,kHIDUsage_Keyboard3 = 0x20,kHIDUsage_Keyboard4 = 0x21,kHIDUsage_Keyboard5 = 0x22,kHIDUsage_Keyboard6 = 0x23,kHIDUsage_Keyboard7 = 0x24,kHIDUsage_Keyboard8 = 0x25,kHIDUsage_Keyboard9 = 0x26,kHIDUsage_Keyboard0 = 0x27,kHIDUsage_KeyboardReturnOrEnter = 0x28,kHIDUsage_KeyboardEscape = 0x29,kHIDUsage_KeyboardDeleteOrBackspace = 0x2A,kHIDUsage_KeyboardTab = 0x2B,kHIDUsage_KeyboardSpacebar = 0x2C,kHIDUsage_KeyboardHyphen = 0x2D,kHIDUsage_KeyboardEqualSign = 0x2E,kHIDUsage_KeyboardOpenBracket = 0x2F,kHIDUsage_KeyboardCloseBracket = 0x30,kHIDUsage_KeyboardBackslash = 0x31,kHIDUsage_KeyboardNonUSPound = 0x32,kHIDUsage_KeyboardSemicolon = 0x33,kHIDUsage_KeyboardQuote = 0x34,kHIDUsage_KeyboardGraveAccentAndTilde = 0x35,kHIDUsage_KeyboardComma = 0x36,kHIDUsage_KeyboardPeriod = 0x37,kHIDUsage_KeyboardSlash = 0x38,kHIDUsage_KeyboardCapsLock = 0x39,kHIDUsage_KeyboardF1 = 0x3A,kHIDUsage_KeyboardF2 = 0x3B,kHIDUsage_KeyboardF3 = 0x3C,kHIDUsage_KeyboardF4 = 0x3D,kHIDUsage_KeyboardF5 = 0x3E,kHIDUsage_KeyboardF6 = 0x3F,kHIDUsage_KeyboardF7 = 0x40,kHIDUsage_KeyboardF8 = 0x41,kHIDUsage_KeyboardF9 = 0x42,kHIDUsage_KeyboardF10 = 0x43,kHIDUsage_KeyboardF11 = 0x44,kHIDUsage_KeyboardF12 = 0x45,kHIDUsage_KeyboardPrintScreen = 0x46,kHIDUsage_KeyboardScrollLock = 0x47,kHIDUsage_KeyboardPause = 0x48,kHIDUsage_KeyboardInsert = 0x49,kHIDUsage_KeyboardHome = 0x4A,kHIDUsage_KeyboardPageUp = 0x4B,kHIDUsage_KeyboardDeleteForward = 0x4C,kHIDUsage_KeyboardEnd = 0x4D,kHIDUsage_KeyboardPageDown = 0x4E,kHIDUsage_KeyboardRightArrow = 0x4F,kHIDUsage_KeyboardLeftArrow = 0x50,kHIDUsage_KeyboardDownArrow = 0x51,kHIDUsage_KeyboardUpArrow = 0x52,kHIDUsage_KeypadNumLock = 0x53,kHIDUsage_KeypadSlash = 0x54,kHIDUsage_KeypadAsterisk = 0x55,kHIDUsage_KeypadHyphen = 0x56,kHIDUsage_KeypadPlus = 0x57,kHIDUsage_KeypadEnter = 0x58,kHIDUsage_Keypad1 = 0x59,kHIDUsage_Keypad2 = 0x5A,kHIDUsage_Keypad3 = 0x5B,kHIDUsage_Keypad4 = 0x5C,kHIDUsage_Keypad5 = 0x5D,kHIDUsage_Keypad6 = 0x5E,kHIDUsage_Keypad7 = 0x5F,kHIDUsage_Keypad8 = 0x60,kHIDUsage_Keypad9 = 0x61,kHIDUsage_Keypad0 = 0x62,kHIDUsage_KeypadPeriod = 0x63,kHIDUsage_KeyboardNonUSBackslash = 0x64,kHIDUsage_KeyboardApplication = 0x65,kHIDUsage_KeyboardPower = 0x66,kHIDUsage_KeypadEqualSign = 0x67,kHIDUsage_KeyboardF13 = 0x68,kHIDUsage_KeyboardF14 = 0x69,kHIDUsage_KeyboardF15 = 0x6A,kHIDUsage_KeyboardF16 = 0x6B,kHIDUsage_KeyboardF17 = 0x6C,kHIDUsage_KeyboardF18 = 0x6D,kHIDUsage_KeyboardF19 = 0x6E,kHIDUsage_KeyboardF20 = 0x6F,kHIDUsage_KeyboardF21 = 0x70,kHIDUsage_KeyboardF22 = 0x71,kHIDUsage_KeyboardF23 = 0x72,kHIDUsage_KeyboardF24 = 0x73,kHIDUsage_KeyboardExecute = 0x74,kHIDUsage_KeyboardHelp = 0x75,kHIDUsage_KeyboardMenu = 0x76,kHIDUsage_KeyboardSelect = 0x77,kHIDUsage_KeyboardStop = 0x78,kHIDUsage_KeyboardAgain = 0x79,kHIDUsage_KeyboardUndo = 0x7A,kHIDUsage_KeyboardCut = 0x7B,kHIDUsage_KeyboardCopy = 0x7C,kHIDUsage_KeyboardPaste = 0x7D,kHIDUsage_KeyboardFind = 0x7E,kHIDUsage_KeyboardMute = 0x7F,kHIDUsage_KeyboardVolumeUp = 0x80,kHIDUsage_KeyboardVolumeDown = 0x81,kHIDUsage_KeyboardLockingCapsLock = 0x82,kHIDUsage_KeyboardLockingNumLock = 0x83,kHIDUsage_KeyboardLockingScrollLock = 0x84,kHIDUsage_KeypadComma = 0x85,kHIDUsage_KeypadEqualSignAS400 = 0x86,kHIDUsage_KeyboardInternational1 = 0x87,kHIDUsage_KeyboardInternational2 = 0x88,kHIDUsage_KeyboardInternational3 = 0x89,kHIDUsage_KeyboardInternational4 = 0x8A,kHIDUsage_KeyboardInternational5 = 0x8B,kHIDUsage_KeyboardInternational6 = 0x8C,kHIDUsage_KeyboardInternational7 = 0x8D,kHIDUsage_KeyboardInternational8 = 0x8E,kHIDUsage_KeyboardInternational9 = 0x8F,kHIDUsage_KeyboardLANG1 = 0x90,kHIDUsage_KeyboardLANG2 = 0x91,kHIDUsage_KeyboardLANG3 = 0x92,kHIDUsage_KeyboardLANG4 = 0x93,kHIDUsage_KeyboardLANG5 = 0x94,kHIDUsage_KeyboardLANG6 = 0x95,kHIDUsage_KeyboardLANG7 = 0x96,kHIDUsage_KeyboardLANG8 = 0x97,kHIDUsage_KeyboardLANG9 = 0x98,kHIDUsage_KeyboardAlternateErase = 0x99,kHIDUsage_KeyboardSysReqOrAttention = 0x9A,kHIDUsage_KeyboardCancel = 0x9B,kHIDUsage_KeyboardClear = 0x9C,kHIDUsage_KeyboardPrior = 0x9D,kHIDUsage_KeyboardReturn = 0x9E,kHIDUsage_KeyboardSeparator = 0x9F,kHIDUsage_KeyboardOut = 0xA0,kHIDUsage_KeyboardOper = 0xA1,kHIDUsage_KeyboardClearOrAgain = 0xA2,kHIDUsage_KeyboardCrSelOrProps = 0xA3,kHIDUsage_KeyboardExSel = 0xA4,kHIDUsage_KeyboardLeftControl = 0xE0,kHIDUsage_KeyboardLeftShift = 0xE1,kHIDUsage_KeyboardLeftAlt = 0xE2,kHIDUsage_KeyboardLeftGUI = 0xE3,kHIDUsage_KeyboardRightControl = 0xE4,kHIDUsage_KeyboardRightShift = 0xE5,kHIDUsage_KeyboardRightAlt = 0xE6,kHIDUsage_KeyboardRightGUI = 0xE7,kHIDUsage_Keyboard_Reserved = 0xFFFF,};
enum _4DFEF644A16CAF87D4E9A2775D8A1A96 {kIODDCLow = 0x0,kIODDCHigh = 0x1,kIODDCTristate = 0x2,};
enum _4E6C33DD1BBBEF8A424AB426C6BB7A27 {kIOACPIAddressSpaceOpRead = 0x0,kIOACPIAddressSpaceOpWrite = 0x1,};
enum _4F0F4956A22D170005F09C54111EF344 {inUseErr = 0xFFFFEFC0,notFoundErr = 0xFFFFEFBF,timeoutErr = 0xFFFFEFBE,busReconfiguredErr = 0xFFFFEFBD,invalidIDTypeErr = 0xFFFFEFBA,alreadyRegisteredErr = 0xFFFFEFB8,disconnectedErr = 0xFFFFEFB7,retryExceededErr = 0xFFFFEFB6,addressRangeErr = 0xFFFFEFB5,addressAlignmentErr = 0xFFFFEFB4,multipleTalkerErr = 0xFFFFEFAC,channelActiveErr = 0xFFFFEFAB,noListenerOrTalkerErr = 0xFFFFEFAA,noChannelsAvailableErr = 0xFFFFEFA9,channelNotAvailableErr = 0xFFFFEFA8,invalidIsochPortIDErr = 0xFFFFEFA7,invalidFWReferenceTypeErr = 0xFFFFEFA6,separateBusErr = 0xFFFFEFA5,badSelfIDsErr = 0xFFFFEFA4,cableVoltageTooLowErr = 0xFFFFEFA2,cablePowerInsufficientErr = 0xFFFFEFA1,};
enum _4F4BDE623FE43459E8417B0B2DEBC107 {kPEReadTOD = 0x0,kPEWriteTOD = 0x1,};
enum _4FD10667A3B6C2EA831CAC056B4ABEAC {kIOVideoFeatureControlClassIDBlackLevel = 0x626B6C76,kIOVideoFeatureControlClassIDWhiteLevel = 0x77686C76,kIOVideoFeatureControlClassIDHue = 0x68756520,kIOVideoFeatureControlClassIDSaturation = 0x73617475,kIOVideoFeatureControlClassIDContrast = 0x63747374,kIOVideoFeatureControlClassIDSharpness = 0x73687270,kIOVideoFeatureControlClassIDBrightness = 0x62726974,kIOVideoFeatureControlClassIDGain = 0x6761696E,kIOVideoFeatureControlClassIDIris = 0x69726973,kIOVideoFeatureControlClassIDShutter = 0x73687472,kIOVideoFeatureControlClassIDExposure = 0x78707372,kIOVideoFeatureControlClassIDWhiteBalanceU = 0x77686275,kIOVideoFeatureControlClassIDWhiteBalanceV = 0x77686276,kIOVideoFeatureControlClassIDGamma = 0x676D6D61,kIOVideoFeatureControlClassIDTemperature = 0x74656D70,kIOVideoFeatureControlClassIDZoom = 0x7A6F6F6D,kIOVideoFeatureControlClassIDFocus = 0x66637573,kIOVideoFeatureControlClassIDPan = 0x70616E20,kIOVideoFeatureControlClassIDTilt = 0x74696C74,kIOVideoFeatureControlClassIDOpticalFilter = 0x6F706674,kIOVideoFeatureControlClassIDBacklightCompensation = 0x626B6C74,kIOVideoFeatureControlClassIDPowerLineFrequency = 0x70776671,};
enum _4FED909E704A601CA8A084BF13A2D1AB {kBluetoothServiceClassMajorLimitedDiscoverableMode = 0x1,kBluetoothServiceClassMajorReserved1 = 0x2,kBluetoothServiceClassMajorReserved2 = 0x4,kBluetoothServiceClassMajorPositioning = 0x8,kBluetoothServiceClassMajorNetworking = 0x10,kBluetoothServiceClassMajorRendering = 0x20,kBluetoothServiceClassMajorCapturing = 0x40,kBluetoothServiceClassMajorObjectTransfer = 0x80,kBluetoothServiceClassMajorAudio = 0x100,kBluetoothServiceClassMajorTelephony = 0x200,kBluetoothServiceClassMajorInformation = 0x400,kBluetoothServiceClassMajorAny = 0x2A2A2A2A,kBluetoothServiceClassMajorNone = 0x6E6F6E65,kBluetoothServiceClassMajorEnd = 0x6E6F6E66,};
enum _502C4E2E530071025D87BDFB6D3AAC08 {kOrConnections = 0xFFFFFFE,kAndConnections = 0xFFFFFFD,};
enum _50B68111B237B4F015CF97FB878E3917 {kIOTrackingExcludeNames = 0x1,};
enum _50FB011DEDCAEDE62CDBCDF596B21824 {IOPMNotAttainable = 0x1,IOPMPowerOn = 0x2,IOPMClockNormal = 0x4,IOPMClockRunning = 0x8,IOPMAuxPowerOn = 0x20,IOPMDeviceUsable = 0x8000,IOPMMaxPerformance = 0x4000,IOPMContextRetained = 0x2000,IOPMConfigRetained = 0x1000,IOPMNotPowerManaged = 0x800,IOPMSoftSleep = 0x400,};
enum _512B25B58B90D1DA0F80C2928D89C76B {kDVDBookTypeROM = 0x0,kDVDBookTypeRAM = 0x1,kDVDBookTypeR = 0x2,kDVDBookTypeRW = 0x3,kDVDBookTypeHDROM = 0x4,kDVDBookTypeHDRAM = 0x5,kDVDBookTypeHDR = 0x6,kDVDBookTypeHDRW = 0x7,kDVDBookTypePlusRW = 0x9,kDVDBookTypePlusR = 0xA,kDVDBookTypePlusRWDoubleLayer = 0xD,kDVDBookTypePlusRDoubleLayer = 0xE,};
enum _512D542AED8D09AF9350642B5F0C7D28 {kIO16LE4444PixelFormat = 0x4C343434,kIO16BE4444PixelFormat = 0x42343434,kIO64BGRAPixelFormat = 0x42313649,kIO64RGBAFloatPixelFormat = 0x42313646,kIO128RGBAFloatPixelFormat = 0x42333246,};
enum _5224102E86E9C39A2818EF48B4F1BDD4 {timingInvalid = 0x0,timingInvalid_SM_T24 = 0x8,timingApple_FixedRateLCD = 0x2A,timingApple_512x384_60hz = 0x82,timingApple_560x384_60hz = 0x87,timingApple_640x480_67hz = 0x8C,timingApple_640x400_67hz = 0x91,timingVESA_640x480_60hz = 0x96,timingVESA_640x480_72hz = 0x98,timingVESA_640x480_75hz = 0x9A,timingVESA_640x480_85hz = 0x9E,timingGTF_640x480_120hz = 0x9F,timingApple_640x870_75hz = 0xA0,timingApple_640x818_75hz = 0xA5,timingApple_832x624_75hz = 0xAA,timingVESA_800x600_56hz = 0xB4,timingVESA_800x600_60hz = 0xB6,timingVESA_800x600_72hz = 0xB8,timingVESA_800x600_75hz = 0xBA,timingVESA_800x600_85hz = 0xBC,timingVESA_1024x768_60hz = 0xBE,timingVESA_1024x768_70hz = 0xC8,timingVESA_1024x768_75hz = 0xCC,timingVESA_1024x768_85hz = 0xD0,timingApple_1024x768_75hz = 0xD2,timingApple_1152x870_75hz = 0xDC,timingAppleNTSC_ST = 0xE6,timingAppleNTSC_FF = 0xE8,timingAppleNTSC_STconv = 0xEA,timingAppleNTSC_FFconv = 0xEC,timingApplePAL_ST = 0xEE,timingApplePAL_FF = 0xF0,timingApplePAL_STconv = 0xF2,timingApplePAL_FFconv = 0xF4,timingVESA_1280x960_75hz = 0xFA,timingVESA_1280x960_60hz = 0xFC,timingVESA_1280x960_85hz = 0xFE,timingVESA_1280x1024_60hz = 0x104,timingVESA_1280x1024_75hz = 0x106,timingVESA_1280x1024_85hz = 0x10C,timingVESA_1600x1200_60hz = 0x118,timingVESA_1600x1200_65hz = 0x11A,timingVESA_1600x1200_70hz = 0x11C,timingVESA_1600x1200_75hz = 0x11E,timingVESA_1600x1200_80hz = 0x120,timingVESA_1600x1200_85hz = 0x121,timingVESA_1792x1344_60hz = 0x128,timingVESA_1792x1344_75hz = 0x12A,timingVESA_1856x1392_60hz = 0x12C,timingVESA_1856x1392_75hz = 0x12E,timingVESA_1920x1440_60hz = 0x130,timingVESA_1920x1440_75hz = 0x132,timingSMPTE240M_60hz = 0x190,timingFilmRate_48hz = 0x19A,timingSony_1600x1024_76hz = 0x1F4,timingSony_1920x1080_60hz = 0x1FE,timingSony_1920x1080_72hz = 0x208,timingSony_1920x1200_76hz = 0x21C,timingApple_0x0_0hz_Offline = 0x226,};
enum _52CDDD236A3AAFB6FCE89F33DCDE0693 {kBluetoothHCITransportUSBClassCode = 0xE0,kBluetoothHCITransportUSBSubClassCode = 0x1,kBluetoothHCITransportUSBProtocolCode = 0x1,};
enum _5317C9985DB00932C1663B1F9DF0227B {kIOFWSpecID_AAPL = 0xA27,kIOFWSWVers_KPF = 0x40,};
enum _53265C1E14243CFDD57D0CB53EDADC81 {kFWAddressBusID = 0xFFC00000,kFWAddressBusIDPhase = 0x16,kFWAddressNodeID = 0x3F0000,kFWAddressNodeIDPhase = 0x10,kFWLocalBusID = 0x3FF,kFWBroadcastNodeID = 0x3F,kFWBadNodeID = 0xFFFF,kFWLocalBusAddress = 0xFFFFFFFFFFC00000,kFWBroadcastAddress = 0x3F0000,};
enum _53A97989A8CB222012549F894CB7BA7E {kHFSMaxAttrNameLen = 0x7F,};
enum _53FD9CEF92E31B1D3A283751459AD6B4 {kDriverIsLoadedUponDiscovery = 0x1,kDriverIsOpenedUponLoad = 0x2,kDriverIsUnderExpertControl = 0x4,kDriverIsConcurrent = 0x8,kDriverQueuesIOPB = 0x10,kDriverIsLoadedAtBoot = 0x20,kDriverIsForVirtualDevice = 0x40,kDriverSupportDMSuspendAndResume = 0x80,};
enum _5439892CB844EA334AC77FC876F97044 {kBluetoothL2CAPFlushTimeoutUseExisting = 0x0,kBluetoothL2CAPFlushTimeoutImmediate = 0x1,kBluetoothL2CAPFlushTimeoutForever = 0xFFFF,kBluetoothL2CAPFlushTimeoutEnd = 0x10000,};
enum _547D53EA96B1DED4CB42545F48CAE466 {kHIDUsage_Undefined = 0x0,};
enum _54DE389A364D1ACBFADCFCF707EC995F {kUSBFeatureEndpointStall = 0x0,kUSBFeatureDeviceRemoteWakeup = 0x1,kUSBFeatureTestMode = 0x2,kUSBFeatureFunctionSuspend = 0x0,kUSBFeatureU1Enable = 0x30,kUSBFeatureU2Enable = 0x31,kUSBFeatureLTMEnable = 0x32,};
enum _5576BD848EE6081646D7E440DDC18898 {kHIDUsage_MSR_Undefined = 0x0,kHIDUsage_MSR_DeviceReadOnly = 0x1,kHIDUsage_MSR_Track1Length = 0x11,kHIDUsage_MSR_Track2Length = 0x12,kHIDUsage_MSR_Track3Length = 0x13,kHIDUsage_MSR_TrackJISLength = 0x14,kHIDUsage_MSR_TrackData = 0x20,kHIDUsage_MSR_Track1Data = 0x21,kHIDUsage_MSR_Track2Data = 0x22,kHIDUsage_MSR_Track3Data = 0x23,kHIDUsage_MSR_TrackJISData = 0x24,};
enum _55A8317DEBEA73FF1550586A0197130C {kUSBHubDescriptorType = 0x29,kUSB3HubDescriptorType = 0x2A,};
enum _55B5302228D89F9AD7994B56741E6B37 {kAppleVendorID = 0x5AC,};
enum _562EDD8C30E9EB5F1E6495D71B508646 {kUSPrintingClassGetDeviceID = 0x0,kUSPrintingClassGePortStatus = 0x1,kUSPrintingClassSoftReset = 0x2,};
enum _570DE297257B5EF2AAF710E0731D3242 {kIOPCIResourceTypeMemory = 0x0,kIOPCIResourceTypePrefetchMemory = 0x1,kIOPCIResourceTypeIO = 0x2,kIOPCIResourceTypeBusNumber = 0x3,kIOPCIResourceTypeCount = 0x4,};
enum _571D820828368D0843220D830F200232 {kFWDebugIgnoreNodeNone = 0xFFFFFFFF,};
enum _5824060BADBA9CBDEDE3B2286DEF93E8 {kINQUIRY_ISO_IEC_VERSION_Mask = 0xC0,kINQUIRY_ECMA_VERSION_Mask = 0x38,kINQUIRY_ANSI_VERSION_NoClaimedConformance = 0x0,kINQUIRY_ANSI_VERSION_SCSI_1_Compliant = 0x1,kINQUIRY_ANSI_VERSION_SCSI_2_Compliant = 0x2,kINQUIRY_ANSI_VERSION_SCSI_SPC_Compliant = 0x3,kINQUIRY_ANSI_VERSION_SCSI_SPC_2_Compliant = 0x4,kINQUIRY_ANSI_VERSION_SCSI_SPC_3_Compliant = 0x5,kINQUIRY_ANSI_VERSION_Mask = 0x7,};
enum _597690E1594C0C7B9220BC020786F273 {kSCSIProtocolNotification_DeviceRemoved = 0x69000010,kSCSIProtocolNotification_VerifyDeviceState = 0x69000020,kSCSIServicesNotification_ExclusivityChanged = 0x69000030,};
enum _59860CB275B60917FF7B68B6FBF6FCCD {kCDFeaturesAnalogAudioBit = 0x0,kCDFeaturesReadStructuresBit = 0x1,kCDFeaturesWriteOnceBit = 0x2,kCDFeaturesReWriteableBit = 0x3,kCDFeaturesCDDAStreamAccurateBit = 0x4,kCDFeaturesPacketWriteBit = 0x5,kCDFeaturesTAOWriteBit = 0x6,kCDFeaturesSAOWriteBit = 0x7,kCDFeaturesRawWriteBit = 0x8,kCDFeaturesTestWriteBit = 0x9,kCDFeaturesBUFWriteBit = 0xA,};
enum _5A30E4BF77E5AC2CAFBFB152FC996CE6 {kIOMediaStateOffline = 0x0,kIOMediaStateOnline = 0x1,kIOMediaStateBusy = 0x2,};
enum _5A3F7505A584B27532D79D72EA38DB4F {kTransparentEncoding = 0x0,kInvertingEncoding = 0x1,};
enum _5A5F37D165ED37DD92F1A443596608E4 {kIOHIDValueScaleTypeCalibrated = 0x0,kIOHIDValueScaleTypePhysical = 0x1,kIOHIDValueScaleTypeExponent = 0x2,};
enum _5ADD51DA73DBA61CDE5467576E98E5E0 {kBluetoothL2CAPMaxPacketSize = 0xFFFF,kBluetoothACLLogicalChannelReserved = 0x0,kBluetoothACLLogicalChannelL2CAPContinue = 0x1,kBluetoothACLLogicalChannelL2CAPStart = 0x2,kBluetoothACLLogicalChannelLMP = 0x3,};
enum _5AF1577C83C4C367A7597D6BE570EC1F {kSCSIProtocolIdentifier_FibreChannel = 0x0,kSCSIProtocolIdentifier_ParallelSCSI = 0x1,kSCSIProtocolIdentifier_SSA = 0x2,kSCSIProtocolIdentifier_FireWire = 0x3,kSCSIProtocolIdentifier_RDMA = 0x4,kSCSIProtocolIdentifier_iSCSI = 0x5,kSCSIProtocolIdentifier_SAS = 0x6,kSCSIProtocolIdentifier_ADT = 0x7,kSCSIProtocolIdentifier_ATAPI = 0x8,kSCSIProtocolIdentifier_None = 0xF,};
enum _5AF9EEFACAAFD6A2F12A4E10F5234673 {kFWIsochDataLength = 0xFFFF0000,kFWIsochDataLengthPhase = 0x10,kFWIsochTag = 0xC000,kFWIsochTagPhase = 0xE,kFWIsochChanNum = 0x3F00,kFWIsochChanNumPhase = 0x8,kFWIsochTCode = 0xF0,kFWIsochTCodePhase = 0x4,kFWIsochSy = 0xF,kFWIsochSyPhase = 0x0,};
enum _5B5D2CB270DB70612FFD94D1FB6A4E50 {kIOMaxPixelBits = 0x40,};
enum _5BD69A7D0761C96DF1A48B01FFF99429 {kIOServiceSeize = 0x1,kIOServiceFamilyOpenOptions = 0xFFFF0000,};
enum _5BDA80868B32F8AAD884D0C31253C69D {kIOAudioTimeStampSampleTimeValid = 0x1,kIOAudioTimeStampHostTimeValid = 0x2,kIOAudioTimeStampRateScalarValid = 0x4,kIOAudioTimeStampWordClockTimeValid = 0x8,kIOAudioTimeStampSMPTETimeValid = 0x10,};
enum _5C56CC6D6DDC07C66B5AAF0A5064C746 {kATAEnableWriteCache = 0x2,kATASetTransferMode = 0x3,kATAEnableAPM = 0x5,kATASetPIOMode = 0x8,kATADisableWriteCache = 0x82,kATAEnableReadAhead = 0xAA,};
enum _5C687BFB470F9C0568628D36415157A5 {kUSBHSHubCommandAddHub = 0x1,kUSBHSHubCommandRemoveHub = 0x2,kUSBHSHubFlagsMultiTTMask = 0x1,kUSBHSHubFlagsMoreInfoMask = 0x2,kUSBHSHubFlagsTTThinkTimeShift = 0x2,kUSBHSHubFlagsTTThinkTimeMask = 0xC,kUSBHSHubFlagsNumPortsShift = 0x4,kUSBHSHubFlagsNumPortsMask = 0xF0,};
enum _5C77DB18C99BE443EACFC103038D4F1D {kFWAVCAsyncPlug0 = 0xA0,kFWAVCAsyncPlug1 = 0xA1,kFWAVCAsyncPlug2 = 0xA2,kFWAVCAsyncPlug3 = 0xA3,kFWAVCAsyncPlug4 = 0xA4,kFWAVCAsyncPlug5 = 0xA5,kFWAVCAsyncPlug6 = 0xA6,kFWAVCAsyncPlug7 = 0xA7,kFWAVCAsyncPlug8 = 0xA8,kFWAVCAsyncPlug9 = 0xA9,kFWAVCAsyncPlug10 = 0xA1,kFWAVCAsyncPlug11 = 0xAB,kFWAVCAsyncPlug12 = 0xAC,kFWAVCAsyncPlug13 = 0xAD,kFWAVCAsyncPlug14 = 0xAE,kFWAVCAsyncPlug15 = 0xAF,kFWAVCAsyncPlug16 = 0xB0,kFWAVCAsyncPlug17 = 0xB1,kFWAVCAsyncPlug18 = 0xB2,kFWAVCAsyncPlug19 = 0xB3,kFWAVCAsyncPlug20 = 0xB4,kFWAVCAsyncPlug21 = 0xB5,kFWAVCAsyncPlug22 = 0xB6,kFWAVCAsyncPlug23 = 0xB7,kFWAVCAsyncPlug24 = 0xB8,kFWAVCAsyncPlug25 = 0xB9,kFWAVCAsyncPlug26 = 0xBA,kFWAVCAsyncPlug27 = 0xBB,kFWAVCAsyncPlug28 = 0xBC,kFWAVCAsyncPlug29 = 0xBD,kFWAVCAsyncPlug30 = 0xBE,kFWAVCAsyncPlugAny = 0xBF,};
enum _5CCB5F85C90932F5331A407170B253E6 {kBluetoothSynchronousConnectionPacketTypeNone = 0x0,kBluetoothSynchronousConnectionPacketTypeHV1 = 0x1,kBluetoothSynchronousConnectionPacketTypeHV2 = 0x2,kBluetoothSynchronousConnectionPacketTypeHV3 = 0x4,kBluetoothSynchronousConnectionPacketTypeEV3 = 0x8,kBluetoothSynchronousConnectionPacketTypeEV4 = 0x10,kBluetoothSynchronousConnectionPacketTypeEV5 = 0x20,kBluetoothSynchronousConnectionPacketType2EV3Omit = 0x40,kBluetoothSynchronousConnectionPacketType3EV3Omit = 0x80,kBluetoothSynchronousConnectionPacketType2EV5Omit = 0x100,kBluetoothSynchronousConnectionPacketType3EV5Omit = 0x200,kBluetoothSynchronousConnectionPacketTypeFutureUse = 0xFC00,kBluetoothSynchronousConnectionPacketTypeAll = 0xFFFF,kBluetoothSynchronousConnectionPacketTypeEnd = 0x10000,};
enum _5D4D11713044375556CB67373ACCE82A {kIODMAMapReadAccess = 0x1,kIODMAMapWriteAccess = 0x2,kIODMAMapPhysicallyContiguous = 0x10,kIODMAMapDeviceMemory = 0x20,kIODMAMapPagingPath = 0x40,kIODMAMapIdentityMap = 0x80,kIODMAMapPageListFullyOccupied = 0x100,kIODMAMapFixedAddress = 0x200,};
enum _5D8CF4F071FC066C91FB6491E61E4B6E {kIONetworkLinkValid = 0x1,kIONetworkLinkActive = 0x2,kIONetworkLinkNoNetworkChange = 0x4,};
enum _5E0258993B66685A209AF400463D2D33 {kIOHIDValueOptionsFlagRelativeSimple = 0x1,kIOHIDValueOptionsFlagPrevious = 0x2,kIOHIDValueOptionsUpdateElementValues = 0x4,};
enum _5E66A2F3E8D2925F6CDD8E8277BA33F3 {kFWPhyPacketID = 0xC0000000,kFWPhyPacketIDPhase = 0x1E,kFWPhyPacketPhyID = 0x3F000000,kFWPhyPacketPhyIDPhase = 0x18,};
enum _5E6ACBCE1DDAE21E37AD147C03B86811 {kHIDUsage_BS_Undefined = 0x0,kHIDUsage_BS_SMBBatteryMode = 0x1,kHIDUsage_BS_SMBBatteryStatus = 0x2,kHIDUsage_BS_SMBAlarmWarning = 0x3,kHIDUsage_BS_SMBChargerMode = 0x4,kHIDUsage_BS_SMBChargerStatus = 0x5,kHIDUsage_BS_SMBChargerSpecInfo = 0x6,kHIDUsage_BS_SMBSelectorState = 0x7,kHIDUsage_BS_SMBSelectorPresets = 0x8,kHIDUsage_BS_SMBSelectorInfo = 0x9,kHIDUsage_BS_OptionalMfgFunction1 = 0x10,kHIDUsage_BS_OptionalMfgFunction2 = 0x11,kHIDUsage_BS_OptionalMfgFunction3 = 0x12,kHIDUsage_BS_OptionalMfgFunction4 = 0x13,kHIDUsage_BS_OptionalMfgFunction5 = 0x14,kHIDUsage_BS_ConnectionToSMBus = 0x15,kHIDUsage_BS_OutputConnection = 0x16,kHIDUsage_BS_ChargerConnection = 0x17,kHIDUsage_BS_BatteryInsertion = 0x18,kHIDUsage_BS_Usenext = 0x19,kHIDUsage_BS_OKToUse = 0x1A,kHIDUsage_BS_BatterySupported = 0x1B,kHIDUsage_BS_SelectorRevision = 0x1C,kHIDUsage_BS_ChargingIndicator = 0x1D,kHIDUsage_BS_ManufacturerAccess = 0x28,kHIDUsage_BS_RemainingCapacityLimit = 0x29,kHIDUsage_BS_RemainingTimeLimit = 0x2A,kHIDUsage_BS_AtRate = 0x2B,kHIDUsage_BS_CapacityMode = 0x2C,kHIDUsage_BS_BroadcastToCharger = 0x2D,kHIDUsage_BS_PrimaryBattery = 0x2E,kHIDUsage_BS_ChargeController = 0x2F,kHIDUsage_BS_TerminateCharge = 0x40,kHIDUsage_BS_TerminateDischarge = 0x41,kHIDUsage_BS_BelowRemainingCapacityLimit = 0x42,kHIDUsage_BS_RemainingTimeLimitExpired = 0x43,kHIDUsage_BS_Charging = 0x44,kHIDUsage_BS_Discharging = 0x45,kHIDUsage_BS_FullyCharged = 0x46,kHIDUsage_BS_FullyDischarged = 0x47,kHIDUsage_BS_ConditioningFlag = 0x48,kHIDUsage_BS_AtRateOK = 0x49,kHIDUsage_BS_SMBErrorCode = 0x4A,kHIDUsage_BS_NeedReplacement = 0x4B,kHIDUsage_BS_AtRateTimeToFull = 0x60,kHIDUsage_BS_AtRateTimeToEmpty = 0x61,kHIDUsage_BS_AverageCurrent = 0x62,kHIDUsage_BS_Maxerror = 0x63,kHIDUsage_BS_RelativeStateOfCharge = 0x64,kHIDUsage_BS_AbsoluteStateOfCharge = 0x65,kHIDUsage_BS_RemainingCapacity = 0x66,kHIDUsage_BS_FullChargeCapacity = 0x67,kHIDUsage_BS_RunTimeToEmpty = 0x68,kHIDUsage_BS_AverageTimeToEmpty = 0x69,kHIDUsage_BS_AverageTimeToFull = 0x6A,kHIDUsage_BS_CycleCount = 0x6B,kHIDUsage_BS_BattPackModelLevel = 0x80,kHIDUsage_BS_InternalChargeController = 0x81,kHIDUsage_BS_PrimaryBatterySupport = 0x82,kHIDUsage_BS_DesignCapacity = 0x83,kHIDUsage_BS_SpecificationInfo = 0x84,kHIDUsage_BS_ManufacturerDate = 0x85,kHIDUsage_BS_SerialNumber = 0x86,kHIDUsage_BS_iManufacturerName = 0x87,kHIDUsage_BS_iDevicename = 0x88,kHIDUsage_BS_iDeviceChemistry = 0x89,kHIDUsage_BS_ManufacturerData = 0x8A,kHIDUsage_BS_Rechargable = 0x8B,kHIDUsage_BS_WarningCapacityLimit = 0x8C,kHIDUsage_BS_CapacityGranularity1 = 0x8D,kHIDUsage_BS_CapacityGranularity2 = 0x8E,kHIDUsage_BS_iOEMInformation = 0x8F,kHIDUsage_BS_InhibitCharge = 0xC0,kHIDUsage_BS_EnablePolling = 0xC1,kHIDUsage_BS_ResetToZero = 0xC2,kHIDUsage_BS_ACPresent = 0xD0,kHIDUsage_BS_BatteryPresent = 0xD1,kHIDUsage_BS_PowerFail = 0xD2,kHIDUsage_BS_AlarmInhibited = 0xD3,kHIDUsage_BS_ThermistorUnderRange = 0xD4,kHIDUsage_BS_ThermistorHot = 0xD5,kHIDUsage_BS_ThermistorCold = 0xD6,kHIDUsage_BS_ThermistorOverRange = 0xD7,kHIDUsage_BS_VoltageOutOfRange = 0xD8,kHIDUsage_BS_CurrentOutOfRange = 0xD9,kHIDUsage_BS_CurrentNotRegulated = 0xDA,kHIDUsage_BS_VoltageNotRegulated = 0xDB,kHIDUsage_BS_MasterMode = 0xDC,kHIDUsage_BS_ChargerSelectorSupport = 0xF0,kHIDUsage_BS_ChargerSpec = 0xF1,kHIDUsage_BS_Level2 = 0xF2,kHIDUsage_BS_Level3 = 0xF3,};
enum _5EB8FF591907DAABF05D6876D6AD31A5 {kEfiReservedMemoryType = 0x0,kEfiLoaderCode = 0x1,kEfiLoaderData = 0x2,kEfiBootServicesCode = 0x3,kEfiBootServicesData = 0x4,kEfiRuntimeServicesCode = 0x5,kEfiRuntimeServicesData = 0x6,kEfiConventionalMemory = 0x7,kEfiUnusableMemory = 0x8,kEfiACPIReclaimMemory = 0x9,kEfiACPIMemoryNVS = 0xA,kEfiMemoryMappedIO = 0xB,kEfiMemoryMappedIOPortSpace = 0xC,kEfiPalCode = 0xD,kEfiMaxMemoryType = 0xE,};
struct _5F8C1396E33B95E0A1ABA60D21CE7376 {IOMemoryMap *bufferMemoryMap;IOWorkLoop *workloop;};
enum _60976FBDF250672F3A2D78F32FD2F58F {kDVDCPRMRegion1 = 0xFE,kDVDCPRMRegion2 = 0xFD,kDVDCPRMRegion3 = 0xFB,kDVDCPRMRegion4 = 0xF7,kDVDCPRMRegion5 = 0xEF,kDVDCPRMRegion6 = 0xDF,};
enum _609997FF064D105DDBC11B13EF8B6B7D {kPEScaleFactorUnknown = 0x0,kPEScaleFactor1x = 0x1,kPEScaleFactor2x = 0x2,};
enum _612DF551689BF5BA1C12386817DF2B74 {kINQUIRY_Byte3_HISUP_Bit = 0x4,kINQUIRY_Byte3_NORMACA_Bit = 0x5,kINQUIRY_Byte3_AERC_Bit = 0x7,kINQUIRY_RESPONSE_DATA_FORMAT_Mask = 0xF,kINQUIRY_Byte3_HISUP_Mask = 0x10,kINQUIRY_Byte3_NORMACA_Mask = 0x20,kINQUIRY_Byte3_AERC_Mask = 0x80,};
enum _616B50C9B8C0B08214EA673BBD716FEE {kIOFBNotifyPriority_Min = 0xFFFF8000,kIOFBNotifyPriority_Max = 0x7FFF,};
enum _61B80F97B33AE63BD4286413BF76EAF5 {BIDIRECTIONAL_UNDEFINED = 0x400,BIDIRECTIONAL_HANDSET = 0x401,BIDIRECTIONAL_HEADSET = 0x402,BIDIRECTIONAL_SPEAKERPHONE_NO_ECHO_REDX = 0x403,BIDIRECTIONAL_ECHO_SUPPRESSING_SPEAKERPHONE = 0x404,BIDIRECTIONAL_ECHO_CANCELING_SPEAKERPHONE = 0x405,};
enum _6263F2765B03C752AB1EEF8EE5EC3E25 {kIOBlitSourceDefault = 0x0,kIOBlitSourceFramebuffer = 0x1000,kIOBlitSourceMemory = 0x2000,kIOBlitSourceOOLMemory = 0x3000,kIOBlitSourcePattern = 0x4000,kIOBlitSourceOOLPattern = 0x5000,kIOBlitSourceSolid = 0x6000,kIOBlitSourceCGSSurface = 0x7000,kIOBlitSourceIsSame = 0x80000000,};
enum _627B77BA2364328740CF777C3B90401B {kIOStreamPortTypeOutput = 0x0,kIOStreamPortTypeInput = 0x1,};
enum _627E95A552D73511A39333F6D0B43CC8 {kIOKitDiagnosticsClientType = 0x99000002,};
enum _62FD89F2D5B1D019D47F6522ACFF86A5 {kHIDUsage_LED_NumLock = 0x1,kHIDUsage_LED_CapsLock = 0x2,kHIDUsage_LED_ScrollLock = 0x3,kHIDUsage_LED_Compose = 0x4,kHIDUsage_LED_Kana = 0x5,kHIDUsage_LED_Power = 0x6,kHIDUsage_LED_Shift = 0x7,kHIDUsage_LED_DoNotDisturb = 0x8,kHIDUsage_LED_Mute = 0x9,kHIDUsage_LED_ToneEnable = 0xA,kHIDUsage_LED_HighCutFilter = 0xB,kHIDUsage_LED_LowCutFilter = 0xC,kHIDUsage_LED_EqualizerEnable = 0xD,kHIDUsage_LED_SoundFieldOn = 0xE,kHIDUsage_LED_SurroundOn = 0xF,kHIDUsage_LED_Repeat = 0x10,kHIDUsage_LED_Stereo = 0x11,kHIDUsage_LED_SamplingRateDetect = 0x12,kHIDUsage_LED_Spinning = 0x13,kHIDUsage_LED_CAV = 0x14,kHIDUsage_LED_CLV = 0x15,kHIDUsage_LED_RecordingFormatDetect = 0x16,kHIDUsage_LED_OffHook = 0x17,kHIDUsage_LED_Ring = 0x18,kHIDUsage_LED_MessageWaiting = 0x19,kHIDUsage_LED_DataMode = 0x1A,kHIDUsage_LED_BatteryOperation = 0x1B,kHIDUsage_LED_BatteryOK = 0x1C,kHIDUsage_LED_BatteryLow = 0x1D,kHIDUsage_LED_Speaker = 0x1E,kHIDUsage_LED_HeadSet = 0x1F,kHIDUsage_LED_Hold = 0x20,kHIDUsage_LED_Microphone = 0x21,kHIDUsage_LED_Coverage = 0x22,kHIDUsage_LED_NightMode = 0x23,kHIDUsage_LED_SendCalls = 0x24,kHIDUsage_LED_CallPickup = 0x25,kHIDUsage_LED_Conference = 0x26,kHIDUsage_LED_StandBy = 0x27,kHIDUsage_LED_CameraOn = 0x28,kHIDUsage_LED_CameraOff = 0x29,kHIDUsage_LED_OnLine = 0x2A,kHIDUsage_LED_OffLine = 0x2B,kHIDUsage_LED_Busy = 0x2C,kHIDUsage_LED_Ready = 0x2D,kHIDUsage_LED_PaperOut = 0x2E,kHIDUsage_LED_PaperJam = 0x2F,kHIDUsage_LED_Remote = 0x30,kHIDUsage_LED_Forward = 0x31,kHIDUsage_LED_Reverse = 0x32,kHIDUsage_LED_Stop = 0x33,kHIDUsage_LED_Rewind = 0x34,kHIDUsage_LED_FastForward = 0x35,kHIDUsage_LED_Play = 0x36,kHIDUsage_LED_Pause = 0x37,kHIDUsage_LED_Record = 0x38,kHIDUsage_LED_Error = 0x39,kHIDUsage_LED_Usage = 0x3A,kHIDUsage_LED_UsageInUseIndicator = 0x3B,kHIDUsage_LED_UsageMultiModeIndicator = 0x3C,kHIDUsage_LED_IndicatorOn = 0x3D,kHIDUsage_LED_IndicatorFlash = 0x3E,kHIDUsage_LED_IndicatorSlowBlink = 0x3F,kHIDUsage_LED_IndicatorFastBlink = 0x40,kHIDUsage_LED_IndicatorOff = 0x41,kHIDUsage_LED_FlashOnTime = 0x42,kHIDUsage_LED_SlowBlinkOnTime = 0x43,kHIDUsage_LED_SlowBlinkOffTime = 0x44,kHIDUsage_LED_FastBlinkOnTime = 0x45,kHIDUsage_LED_FastBlinkOffTime = 0x46,kHIDUsage_LED_UsageIndicatorColor = 0x47,kHIDUsage_LED_IndicatorRed = 0x48,kHIDUsage_LED_IndicatorGreen = 0x49,kHIDUsage_LED_IndicatorAmber = 0x4A,kHIDUsage_LED_GenericIndicator = 0x4B,kHIDUsage_LED_SystemSuspend = 0x4C,kHIDUsage_LED_ExternalPowerConnected = 0x4D,kHIDUsage_LED_PlayerIndicator = 0x4E,kHIDUsage_LED_Player1 = 0x4F,kHIDUsage_LED_Player2 = 0x50,kHIDUsage_LED_Player3 = 0x51,kHIDUsage_LED_Player4 = 0x52,kHIDUsage_LED_Player5 = 0x53,kHIDUsage_LED_Player6 = 0x54,kHIDUsage_LED_Player7 = 0x55,kHIDUsage_LED_Player8 = 0x56,kHIDUsage_LED_Reserved = 0xFFFF,};
enum _6314D64D06D21A4B318DC44E37FD24F7 {MBUF_TSO_IPV4 = 0x100000,MBUF_TSO_IPV6 = 0x200000,};
enum _632C686D654D232CE951A57D6879B872 {kBluetoothLESecurityManagerNoBonding = 0x0,kBluetoothLESecurityManagerBonding = 0x1,kBluetoothLESecurityManagerReservedStart = 0x2,kBluetoothLESecurityManagerReservedEnd = 0x3,};
enum _635979C31A1EE13CC552DFEE26F63B14 {kScaleStretchOnlyMask = 0x1,kScaleCanUpSamplePixelsMask = 0x2,kScaleCanDownSamplePixelsMask = 0x4,kScaleCanScaleInterlacedMask = 0x8,kScaleCanSupportInsetMask = 0x10,kScaleCanRotateMask = 0x20,kScaleCanBorderInsetOnlyMask = 0x40,};
enum _6374E74750844DB1045E6C5CF911F97A {vDSP_HALF_WINDOW = 0x1,vDSP_HANN_DENORM = 0x0,vDSP_HANN_NORM = 0x2,};
enum _64051C284EAFBBFE0A6BC55B419388FE {kDVDFeaturesCSSBit = 0x0,kDVDFeaturesReadStructuresBit = 0x1,kDVDFeaturesWriteOnceBit = 0x2,kDVDFeaturesRandomWriteableBit = 0x3,kDVDFeaturesReWriteableBit = 0x4,kDVDFeaturesTestWriteBit = 0x5,kDVDFeaturesBUFWriteBit = 0x6,kDVDFeaturesPlusRBit = 0x7,kDVDFeaturesPlusRWBit = 0x8,kDVDFeaturesHDReadBit = 0x9,kDVDFeaturesHDRBit = 0xA,kDVDFeaturesHDRAMBit = 0xB,kDVDFeaturesHDRWBit = 0xC,};
enum _64097D5EE9063B87C8DCBC60FE49D2B1 {kINQUIRY_Page00_PageCode = 0x0,kINQUIRY_Page80_PageCode = 0x80,kINQUIRY_Page83_PageCode = 0x83,kINQUIRY_Page89_PageCode = 0x89,kINQUIRY_PageB0_PageCode = 0xB0,kINQUIRY_PageB1_PageCode = 0xB1,kINQUIRY_PageB2_PageCode = 0xB2,kINQUIRY_PageC0_PageCode = 0xC0,kINQUIRY_PageC1_PageCode = 0xC1,};
enum _640D559C8233127C6715AFEFAC6E0F4B {kIOPMUnknown = 0xFFFF,};
enum _6494E0D21687E3A3081728F63AF9492E {kIOVideoDeviceNotificationID_ControlValueChanged = 0x6376616C,kIOVideoDeviceNotificationID_ControlRangeChanged = 0x63726E67,};
enum _64E96FC0D39EAB4147C75C168821070E {kUSBRqGetStatus = 0x0,kUSBRqClearFeature = 0x1,kUSBRqGetState = 0x2,kUSBRqSetFeature = 0x3,kUSBRqReserved2 = 0x4,kUSBRqSetAddress = 0x5,kUSBRqGetDescriptor = 0x6,kUSBRqSetDescriptor = 0x7,kUSBRqGetConfig = 0x8,kUSBRqSetConfig = 0x9,kUSBRqGetInterface = 0xA,kUSBRqSetInterface = 0xB,kUSBRqSyncFrame = 0xC,kUSBSetSel = 0x30,kUSBSetIsochDelay = 0x31,};
enum _65AF50DF0D7673B4F7C923B41C1E5AC7 {kPCI2PCIPrimaryBus = 0x18,kPCI2PCISecondaryBus = 0x19,kPCI2PCISubordinateBus = 0x1A,kPCI2PCISecondaryLT = 0x1B,kPCI2PCIIORange = 0x1C,kPCI2PCIMemoryRange = 0x20,kPCI2PCIPrefetchMemoryRange = 0x24,kPCI2PCIPrefetchUpperBase = 0x28,kPCI2PCIPrefetchUpperLimit = 0x2C,kPCI2PCIUpperIORange = 0x30,kPCI2PCIBridgeControl = 0x3E,};
enum _65AF9E325498903222DA5B5E72B3DE34 {kUSBAudioClass = 0x1,kUSBAudioInterfaceClass = 0x1,kUSBCommunicationControlInterfaceClass = 0x2,kUSBCommunicationDataInterfaceClass = 0xA,kUSBHIDClass = 0x3,kUSBHIDInterfaceClass = 0x3,kUSBPhysicalInterfaceClass = 0x5,kUSBImageInterfaceClass = 0x6,kUSBPrintingClass = 0x7,kUSBPrintingInterfaceClass = 0x7,kUSBMassStorageClass = 0x8,kUSBMassStorageInterfaceClass = 0x8,kUSBChipSmartCardInterfaceClass = 0xB,kUSBContentSecurityInterfaceClass = 0xD,kUSBVideoInterfaceClass = 0xE,kUSBPersonalHealthcareInterfaceClass = 0xF,kUSBDiagnosticDeviceInterfaceClass = 0xDC,kUSBWirelessControllerInterfaceClass = 0xE0,kUSBApplicationSpecificInterfaceClass = 0xFE,kUSBVendorSpecificInterfaceClass = 0xFF,};
enum _65D095BD55C2FE82F0A30DE53E248A24 {kVSLClamshellStateGestaltType = 0x636C616D,};
enum _6614AEEF1048F0923C6A5B8A61574432 {kMessageTrayStateChangeRequestAccepted = 0x0,kMessageTrayStateChangeRequestRejected = 0x1,};
enum _670BC6276EB5A641CFFFFB85AD930D75 {kIOPCIConfigAGPStatusOffset = 0x4,kIOPCIConfigAGPCommandOffset = 0x8,};
enum _676D39DAA0B1E212FC31E8F5FFCC79EE {IOPMNextHigherState = 0x1,IOPMHighestState = 0x2,IOPMNextLowerState = 0x3,IOPMLowestState = 0x4,};
enum _67D51605EE58D00121F4771C1A0637EB {kHIDInputReport = 0x1,kHIDOutputReport = 0x2,kHIDFeatureReport = 0x3,kHIDUnknownReport = 0xFF,};
enum _68914A1430153AC8D8BEA6B6612585EC {kIODDCBlockTypeEDID = 0x0,};
enum _68D0CAC4148F0A253E177235B7679138 {kIODisplayColorMode = 0x63797576,};
enum _690D24BEF65786360131AF340D3AC26A {kBluetoothSDPUUID16Base = 0x0,kBluetoothSDPUUID16SDP = 0x1,kBluetoothSDPUUID16UDP = 0x2,kBluetoothSDPUUID16RFCOMM = 0x3,kBluetoothSDPUUID16TCP = 0x4,kBluetoothSDPUUID16TCSBIN = 0x5,kBluetoothSDPUUID16TCSAT = 0x6,kBluetoothSDPUUID16ATT = 0x7,kBluetoothSDPUUID16OBEX = 0x8,kBluetoothSDPUUID16IP = 0x9,kBluetoothSDPUUID16FTP = 0xA,kBluetoothSDPUUID16HTTP = 0xC,kBluetoothSDPUUID16WSP = 0xE,kBluetoothSDPUUID16BNEP = 0xF,kBluetoothSDPUUID16UPNP = 0x10,kBluetoothSDPUUID16HIDP = 0x11,kBluetoothSDPUUID16HardcopyControlChannel = 0x12,kBluetoothSDPUUID16HardcopyDataChannel = 0x14,kBluetoothSDPUUID16HardcopyNotification = 0x16,kBluetoothSDPUUID16AVCTP = 0x17,kBluetoothSDPUUID16AVDTP = 0x19,kBluetoothSDPUUID16CMPT = 0x1B,kBluetoothSDPUUID16UDI_C_Plane = 0x1D,kBluetoothSDPUUID16MCAPControlChannel = 0x1E,kBluetoothSDPUUID16MCAPDataChannel = 0x1F,kBluetoothSDPUUID16L2CAP = 0x100,};
enum _6934CFA53E714270409F429813D818F8 {kIOAudioDeviceCanBeDefaultNothing = 0x0,kIOAudioDeviceCanBeDefaultInput = 0x1,kIOAudioDeviceCanBeDefaultOutput = 0x2,kIOAudioDeviceCanBeSystemOutput = 0x4,};
enum _696F7EA2CD4E589D150C39CE6FB14008 {kIOStorageAccessNone = 0x0,kIOStorageAccessReader = 0x1,kIOStorageAccessReaderWriter = 0x3,kIOStorageAccessSharedLock = 0x4,kIOStorageAccessExclusiveLock = 0x8,};
enum _69DC68BF714BA586345672C61675AEFF {kVariableLengthArray = 0x1,};
enum _6A25C459A4D3593178CEE734268F4FCF {kDepthMode1 = 0x80,kDepthMode2 = 0x81,kDepthMode3 = 0x82,kDepthMode4 = 0x83,kDepthMode5 = 0x84,kDepthMode6 = 0x85,};
enum _6B03F19C696199B9184B5D08D4DC89ED {kIOAudioBuiltInSystemClockDomain = 0x737973,kIOAudioNewClockDomain = 0xFFFFFFFF,};
enum _6B4356F0C8533DB40843BD7D8C07414C {kIODisplayRGBColorComponentBitsUnknown = 0x0,kIODisplayRGBColorComponentBits6 = 0x1,kIODisplayRGBColorComponentBits8 = 0x2,kIODisplayRGBColorComponentBits10 = 0x4,kIODisplayRGBColorComponentBits12 = 0x8,kIODisplayRGBColorComponentBits14 = 0x10,kIODisplayRGBColorComponentBits16 = 0x20,kIODisplayYCbCr444ColorComponentBitsUnknown = 0x0,kIODisplayYCbCr444ColorComponentBits6 = 0x100,kIODisplayYCbCr444ColorComponentBits8 = 0x200,kIODisplayYCbCr444ColorComponentBits10 = 0x400,kIODisplayYCbCr444ColorComponentBits12 = 0x800,kIODisplayYCbCr444ColorComponentBits14 = 0x1000,kIODisplayYCbCr444ColorComponentBits16 = 0x2000,kIODisplayYCbCr422ColorComponentBitsUnknown = 0x0,kIODisplayYCbCr422ColorComponentBits6 = 0x10000,kIODisplayYCbCr422ColorComponentBits8 = 0x20000,kIODisplayYCbCr422ColorComponentBits10 = 0x40000,kIODisplayYCbCr422ColorComponentBits12 = 0x80000,kIODisplayYCbCr422ColorComponentBits14 = 0x100000,kIODisplayYCbCr422ColorComponentBits16 = 0x200000,};
enum _6C1C398DFF3B7E01E8C6D184A0210E6E {kGammaTableIDFindFirst = 0xFFFFFFFE,kGammaTableIDNoMoreTables = 0xFFFFFFFD,kGammaTableIDSpecific = 0x0,};
enum _6CABF27346F69FD706511D62F0404C6A {kIOPCICommandIOSpace = 0x1,kIOPCICommandMemorySpace = 0x2,kIOPCICommandBusMaster = 0x4,kIOPCICommandSpecialCycles = 0x8,kIOPCICommandMemWrInvalidate = 0x10,kIOPCICommandPaletteSnoop = 0x20,kIOPCICommandParityError = 0x40,kIOPCICommandAddressStepping = 0x80,kIOPCICommandSERR = 0x100,kIOPCICommandFastBack2Back = 0x200,kIOPCICommandInterruptDisable = 0x400,};
enum _6CBF330FBD3058505E6916903985D2F4 {kBluetoothHCIOpCodeNoOp = 0x0,kBluetoothHCICommandGroupNoOp = 0x0,kBluetoothHCICommandNoOp = 0x0,kBluetoothHCICommandGroupLinkControl = 0x1,kBluetoothHCICommandInquiry = 0x1,kBluetoothHCICommandInquiryCancel = 0x2,kBluetoothHCICommandPeriodicInquiryMode = 0x3,kBluetoothHCICommandExitPeriodicInquiryMode = 0x4,kBluetoothHCICommandCreateConnection = 0x5,kBluetoothHCICommandDisconnect = 0x6,kBluetoothHCICommandAddSCOConnection = 0x7,kBluetoothHCICommandCreateConnectionCancel = 0x8,kBluetoothHCICommandAcceptConnectionRequest = 0x9,kBluetoothHCICommandRejectConnectionRequest = 0xA,kBluetoothHCICommandLinkKeyRequestReply = 0xB,kBluetoothHCICommandLinkKeyRequestNegativeReply = 0xC,kBluetoothHCICommandPINCodeRequestReply = 0xD,kBluetoothHCICommandPINCodeRequestNegativeReply = 0xE,kBluetoothHCICommandChangeConnectionPacketType = 0xF,kBluetoothHCICommandAuthenticationRequested = 0x11,kBluetoothHCICommandSetConnectionEncryption = 0x13,kBluetoothHCICommandChangeConnectionLinkKey = 0x15,kBluetoothHCICommandMasterLinkKey = 0x17,kBluetoothHCICommandRemoteNameRequest = 0x19,kBluetoothHCICommandReadRemoteSupportedFeatures = 0x1B,kBluetoothHCICommandReadRemoteExtendedFeatures = 0x1C,kBluetoothHCICommandReadRemoteVersionInformation = 0x1D,kBluetoothHCICommandReadClockOffset = 0x1F,kBluetoothHCICommandRemoteNameRequestCancel = 0x1A,kBluetoothHCICommandReadLMPHandle = 0x20,kBluetoothHCICommandSetupSynchronousConnection = 0x28,kBluetoothHCICommandAcceptSynchronousConnectionRequest = 0x29,kBluetoothHCICommandRejectSynchronousConnectionRequest = 0x2A,kBluetoothHCICommandIOCapabilityRequestReply = 0x2B,kBluetoothHCICommandUserConfirmationRequestReply = 0x2C,kBluetoothHCICommandUserConfirmationRequestNegativeReply = 0x2D,kBluetoothHCICommandUserPasskeyRequestReply = 0x2E,kBluetoothHCICommandUserPasskeyRequestNegativeReply = 0x2F,kBluetoothHCICommandRemoteOOBDataRequestReply = 0x30,kBluetoothHCICommandRemoteOOBDataRequestNegativeReply = 0x33,kBluetoothHCICommandIOCapabilityRequestNegativeReply = 0x34,kBluetoothHCICommandEnhancedSetupSynchronousConnection = 0x3D,kBluetoothHCICommandEnhancedAcceptSynchronousConnectionRequest = 0x3E,kBluetoothHCICommandTruncatedPage = 0x3F,kBluetoothHCICommandTruncatedPageCancel = 0x40,kBluetoothHCICommandSetConnectionlessSlaveBroadcast = 0x41,kBluetoothHCICommandSetConnectionlessSlaveBroadcastReceive = 0x42,kBluetoothHCICommandStartSynchronizationTrain = 0x43,kBluetoothHCICommandReceiveSynchronizationTrain = 0x44,kBluetoothHCICommandRemoteOOBExtendedDataRequestReply = 0x45,kBluetoothHCICommandGroupLinkPolicy = 0x2,kBluetoothHCICommandHoldMode = 0x1,kBluetoothHCICommandSniffMode = 0x3,kBluetoothHCICommandExitSniffMode = 0x4,kBluetoothHCICommandParkMode = 0x5,kBluetoothHCICommandExitParkMode = 0x6,kBluetoothHCICommandQoSSetup = 0x7,kBluetoothHCICommandRoleDiscovery = 0x9,kBluetoothHCICommandSwitchRole = 0xB,kBluetoothHCICommandReadLinkPolicySettings = 0xC,kBluetoothHCICommandWriteLinkPolicySettings = 0xD,kBluetoothHCICommandReadDefaultLinkPolicySettings = 0xE,kBluetoothHCICommandWriteDefaultLinkPolicySettings = 0xF,kBluetoothHCICommandFlowSpecification = 0x10,kBluetoothHCICommandSniffSubrating = 0x11,kBluetoothHCICommandAcceptSniffRequest = 0x31,kBluetoothHCICommandRejectSniffRequest = 0x32,kBluetoothHCICommandGroupHostController = 0x3,kBluetoothHCICommandSetEventMask = 0x1,kBluetoothHCICommandReset = 0x3,kBluetoothHCICommandSetEventFilter = 0x5,kBluetoothHCICommandFlush = 0x8,kBluetoothHCICommandReadPINType = 0x9,kBluetoothHCICommandWritePINType = 0xA,kBluetoothHCICommandCreateNewUnitKey = 0xB,kBluetoothHCICommandReadStoredLinkKey = 0xD,kBluetoothHCICommandWriteStoredLinkKey = 0x11,kBluetoothHCICommandDeleteStoredLinkKey = 0x12,kBluetoothHCICommandChangeLocalName = 0x13,kBluetoothHCICommandReadLocalName = 0x14,kBluetoothHCICommandReadConnectionAcceptTimeout = 0x15,kBluetoothHCICommandWriteConnectionAcceptTimeout = 0x16,kBluetoothHCICommandReadPageTimeout = 0x17,kBluetoothHCICommandWritePageTimeout = 0x18,kBluetoothHCICommandReadScanEnable = 0x19,kBluetoothHCICommandWriteScanEnable = 0x1A,kBluetoothHCICommandReadPageScanActivity = 0x1B,kBluetoothHCICommandWritePageScanActivity = 0x1C,kBluetoothHCICommandReadInquiryScanActivity = 0x1D,kBluetoothHCICommandWriteInquiryScanActivity = 0x1E,kBluetoothHCICommandReadAuthenticationEnable = 0x1F,kBluetoothHCICommandWriteAuthenticationEnable = 0x20,kBluetoothHCICommandReadEncryptionMode = 0x21,kBluetoothHCICommandWriteEncryptionMode = 0x22,kBluetoothHCICommandReadClassOfDevice = 0x23,kBluetoothHCICommandWriteClassOfDevice = 0x24,kBluetoothHCICommandReadVoiceSetting = 0x25,kBluetoothHCICommandWriteVoiceSetting = 0x26,kBluetoothHCICommandReadAutomaticFlushTimeout = 0x27,kBluetoothHCICommandWriteAutomaticFlushTimeout = 0x28,kBluetoothHCICommandReadNumberOfBroadcastRetransmissions = 0x29,kBluetoothHCICommandWriteNumberOfBroadcastRetransmissions = 0x2A,kBluetoothHCICommandReadHoldModeActivity = 0x2B,kBluetoothHCICommandWriteHoldModeActivity = 0x2C,kBluetoothHCICommandReadTransmitPowerLevel = 0x2D,kBluetoothHCICommandReadSCOFlowControlEnable = 0x2E,kBluetoothHCICommandWriteSCOFlowControlEnable = 0x2F,kBluetoothHCICommandSetHostControllerToHostFlowControl = 0x31,kBluetoothHCICommandHostBufferSize = 0x33,kBluetoothHCICommandHostNumberOfCompletedPackets = 0x35,kBluetoothHCICommandReadLinkSupervisionTimeout = 0x36,kBluetoothHCICommandWriteLinkSupervisionTimeout = 0x37,kBluetoothHCICommandReadNumberOfSupportedIAC = 0x38,kBluetoothHCICommandReadCurrentIACLAP = 0x39,kBluetoothHCICommandWriteCurrentIACLAP = 0x3A,kBluetoothHCICommandReadPageScanPeriodMode = 0x3B,kBluetoothHCICommandWritePageScanPeriodMode = 0x3C,kBluetoothHCICommandReadPageScanMode = 0x3D,kBluetoothHCICommandWritePageScanMode = 0x3E,kBluetoothHCICommandSetAFHClassification = 0x3F,kBluetoothHCICommandReadInquiryScanType = 0x42,kBluetoothHCICommandWriteInquiryScanType = 0x43,kBluetoothHCICommandReadInquiryMode = 0x44,kBluetoothHCICommandWriteInquiryMode = 0x45,kBluetoothHCICommandReadPageScanType = 0x46,kBluetoothHCICommandWritePageScanType = 0x47,kBluetoothHCICommandReadAFHChannelAssessmentMode = 0x48,kBluetoothHCICommandWriteAFHChannelAssessmentMode = 0x49,kBluetoothHCICommandReadExtendedInquiryResponse = 0x51,kBluetoothHCICommandWriteExtendedInquiryResponse = 0x52,kBluetoothHCICommandRefreshEncryptionKey = 0x53,kBluetoothHCICommandReadSimplePairingMode = 0x55,kBluetoothHCICommandWriteSimplePairingMode = 0x56,kBluetoothHCICommandReadLocalOOBData = 0x57,kBluetoothHCICommandReadInquiryResponseTransmitPower = 0x58,kBluetoothHCICommandWriteInquiryResponseTransmitPower = 0x59,kBluetoothHCICommandSendKeypressNotification = 0x60,kBluetoothHCICommandReadDefaultErroneousDataReporting = 0x5A,kBluetoothHCICommandWriteDefaultErroneousDataReporting = 0x5B,kBluetoothHCICommandEnhancedFlush = 0x5F,kBluetoothHCICommandReadLogicalLinkAcceptTimeout = 0x61,kBluetoothHCICommandWriteLogicalLinkAcceptTimeout = 0x62,kBluetoothHCICommandSetEventMaskPageTwo = 0x63,kBluetoothHCICommandReadLocationData = 0x64,kBluetoothHCICommandWriteLocationData = 0x65,kBluetoothHCICommandReadFlowControlMode = 0x66,kBluetoothHCICommandWriteFlowControlMode = 0x67,kBluetoothHCICommandReadEnhancedTransmitPowerLevel = 0x68,kBluetoothHCICommandReadBestEffortFlushTimeout = 0x69,kBluetoothHCICommandWriteBestEffortFlushTimeout = 0x6A,kBluetoothHCICommandShortRangeMode = 0x6B,kBluetoothHCICommandReadLEHostSupported = 0x6C,kBluetoothHCICommandWriteLEHostSupported = 0x6D,kBluetoothHCICommandSetMWSChannelParameters = 0x6E,kBluetoothHCICommandSetExternalFrameConfiguration = 0x6F,kBluetoothHCICommandSetMWSSignaling = 0x70,kBluetoothHCICommandSetMWSTransportLayer = 0x71,kBluetoothHCICommandSetMWSScanFrequencyTable = 0x72,kBluetoothHCICommandSetMWSPATTERNConfiguration = 0x73,kBluetoothHCICommandSetReservedLTADDR = 0x74,kBluetoothHCICommandDeleteReservedLTADDR = 0x75,kBluetoothHCICommandSetConnectionlessSlaveBroadcastData = 0x76,kBluetoothHCICommandReadSynchronizationTrainParameters = 0x77,kBluetoothHCICommandWriteSynchronizationTrainParameters = 0x78,kBluetoothHCICommandReadSecureConnectionsHostSupport = 0x79,kBluetoothHCICommandWriteSecureConnectionsHostSupport = 0x7A,kBluetoothHCICommandReadAuthenticatedPayloadTimeout = 0x7B,kBluetoothHCICommandWriteAuthenticatedPayloadTimeout = 0x7C,kBluetoothHCICommandReadLocalOOBExtendedData = 0x7D,kBluetoothHCICommandReadExtendedPageTimeout = 0x7E,kBluetoothHCICommandWriteExtendedPageTimeout = 0x7F,kBluetoothHCICommandReadExtendedInquiryLength = 0x80,kBluetoothHCICommandWriteExtendedInquiryLength = 0x81,kBluetoothHCICommandGroupInformational = 0x4,kBluetoothHCICommandReadLocalVersionInformation = 0x1,kBluetoothHCICommandReadLocalSupportedCommands = 0x2,kBluetoothHCICommandReadLocalSupportedFeatures = 0x3,kBluetoothHCICommandReadLocalExtendedFeatures = 0x4,kBluetoothHCICommandReadBufferSize = 0x5,kBluetoothHCICommandReadCountryCode = 0x7,kBluetoothHCICommandReadDeviceAddress = 0x9,kBluetoothHCICommandReadDataBlockSize = 0xA,kBluetoothHCICommandReadLocalSupportedCodecs = 0xB,kBluetoothHCICommandGroupStatus = 0x5,kBluetoothHCICommandReadFailedContactCounter = 0x1,kBluetoothHCICommandResetFailedContactCounter = 0x2,kBluetoothHCICommandGetLinkQuality = 0x3,kBluetoothHCICommandReadRSSI = 0x5,kBluetoothHCICommandReadAFHMappings = 0x6,kBluetoothHCICommandReadClock = 0x7,kBluetoothHCICommandReadEncryptionKeySize = 0x8,kBluetoothHCICommandReadLocalAMPInfo = 0x9,kBluetoothHCICommandReadLocalAMPASSOC = 0xA,kBluetoothHCICommandWriteRemoteAMPASSOC = 0xB,kBluetoothHCICommandGetMWSTransportLayerConfiguration = 0xC,kBluetoothHCICommandSetTriggeredClockCapture = 0xD,kBluetoothHCICommandGroupTesting = 0x6,kBluetoothHCICommandReadLoopbackMode = 0x1,kBluetoothHCICommandWriteLoopbackMode = 0x2,kBluetoothHCICommandEnableDeviceUnderTestMode = 0x3,kBluetoothHCICommandWriteSimplePairingDebugMode = 0x4,kBluetoothHCICommandEnableAMPReceiverReports = 0x7,kBluetoothHCICommandAMPTestEnd = 0x8,kBluetoothHCICommandAMPTest = 0x9,kBluetoothHCICommandGroupLowEnergy = 0x8,kBluetoothHCICommandLESetEventMask = 0x1,kBluetoothHCICommandLEReadBufferSize = 0x2,kBluetoothHCICommandLEReadLocalSupportedFeatures = 0x3,kBluetoothHCICommandLESetRandomAddress = 0x5,kBluetoothHCICommandLESetAdvertisingParameters = 0x6,kBluetoothHCICommandLEReadAdvertisingChannelTxPower = 0x7,kBluetoothHCICommandLESetAdvertisingData = 0x8,kBluetoothHCICommandLESetScanResponseData = 0x9,kBluetoothHCICommandLESetAdvertiseEnable = 0xA,kBluetoothHCICommandLESetScanParameters = 0xB,kBluetoothHCICommandLESetScanEnable = 0xC,kBluetoothHCICommandLECreateConnection = 0xD,kBluetoothHCICommandLECreateConnectionCancel = 0xE,kBluetoothHCICommandLEReadWhiteListSize = 0xF,kBluetoothHCICommandLEClearWhiteList = 0x10,kBluetoothHCICommandLEAddDeviceToWhiteList = 0x11,kBluetoothHCICommandLERemoveDeviceFromWhiteList = 0x12,kBluetoothHCICommandLEConnectionUpdate = 0x13,kBluetoothHCICommandLESetHostChannelClassification = 0x14,kBluetoothHCICommandLEReadChannelMap = 0x15,kBluetoothHCICommandLEReadRemoteUsedFeatures = 0x16,kBluetoothHCICommandLEEncrypt = 0x17,kBluetoothHCICommandLERand = 0x18,kBluetoothHCICommandLEStartEncryption = 0x19,kBluetoothHCICommandLELongTermKeyRequestReply = 0x1A,kBluetoothHCICommandLELongTermKeyRequestNegativeReply = 0x1B,kBluetoothHCICommandLEReadSupportedStates = 0x1C,kBluetoothHCICommandLEReceiverTest = 0x1D,kBluetoothHCICommandLETransmitterTest = 0x1E,kBluetoothHCICommandLETestEnd = 0x1F,kBluetoothHCICommandLERemoteConnectionParameterRequestReply = 0x20,kBluetoothHCICommandLERemoteConnectionParameterRequestNegativeReply = 0x21,kBluetoothHCICommandLESetDataLength = 0x22,kBluetoothHCICommandLEReadSuggestedDefaultDataLength = 0x23,kBluetoothHCICommandLEWriteSuggestedDefaultDataLength = 0x24,kBluetoothHCICommandLEReadLocalP256PublicKey = 0x25,kBluetoothHCICommandLEGenerateDHKey = 0x26,kBluetoothHCICommandLEAddDeviceToResolvingList = 0x27,kBluetoothHCICommandLERemoveDeviceFromResolvingList = 0x28,kBluetoothHCICommandLEClearResolvingList = 0x29,kBluetoothHCICommandLEReadResolvingListSize = 0x2A,kBluetoothHCICommandLEReadPeerResolvableAddress = 0x2B,kBluetoothHCICommandLEReadLocalResolvableAddress = 0x2C,kBluetoothHCICommandLESetAddressResolutionEnable = 0x2D,kBluetoothHCICommandLESetResolvablePrivateAddressTimeout = 0x2E,kBluetoothHCICommandLEReadMaximumDataLength = 0x2F,kBluetoothHCICommandLEReadPhy = 0x30,kBluetoothHCICommandLESetDefaultPhy = 0x31,kBluetoothHCICommandLESetPhy = 0x32,kBluetoothHCICommandLEEnhancedReceiverTest = 0x33,kBluetoothHCICommandLEEnhancedTransmitterTest = 0x34,kBluetoothHCICommandGroupLogoTesting = 0x3E,kBluetoothHCICommandGroupVendorSpecific = 0x3F,kBluetoothHCICommandGroupMax = 0x40,kBluetoothHCICommandMax = 0x3FF,};
enum _6CFB1AB7BF03C62CD8B7A21B2EDE4173 {kTransparentEncodingShift = 0x0,kTransparentEncodedPixel = 0x1,kInvertingEncodingShift = 0x2,kInvertingEncodedPixel = 0x4,};
enum _6D38736C23F8852A3CC064B61ADF56C8 {kIOAudioStreamNumericRepresentationSignedInt = 0x73696E74,kIOAudioStreamNumericRepresentationUnsignedInt = 0x75696E74,kIOAudioStreamNumericRepresentationIEEE754Float = 0x666C6F74,};
enum _6D4A374810F34EF74EB6571DAD243252 {kHIDUsage_PID_PhysicalInterfaceDevice = 0x1,kHIDUsage_PID_Normal = 0x20,kHIDUsage_PID_SetEffectReport = 0x21,kHIDUsage_PID_EffectBlockIndex = 0x22,kHIDUsage_PID_ParamBlockOffset = 0x23,kHIDUsage_PID_ROM_Flag = 0x24,kHIDUsage_PID_EffectType = 0x25,kHIDUsage_PID_ET_ConstantForce = 0x26,kHIDUsage_PID_ET_Ramp = 0x27,kHIDUsage_PID_ET_CustomForceData = 0x28,kHIDUsage_PID_ET_Square = 0x30,kHIDUsage_PID_ET_Sine = 0x31,kHIDUsage_PID_ET_Triangle = 0x32,kHIDUsage_PID_ET_SawtoothUp = 0x33,kHIDUsage_PID_ET_SawtoothDown = 0x34,kHIDUsage_PID_ET_Spring = 0x40,kHIDUsage_PID_ET_Damper = 0x41,kHIDUsage_PID_ET_Inertia = 0x42,kHIDUsage_PID_ET_Friction = 0x43,kHIDUsage_PID_Duration = 0x50,kHIDUsage_PID_SamplePeriod = 0x51,kHIDUsage_PID_Gain = 0x52,kHIDUsage_PID_TriggerButton = 0x53,kHIDUsage_PID_TriggerRepeatInterval = 0x54,kHIDUsage_PID_AxesEnable = 0x55,kHIDUsage_PID_DirectionEnable = 0x56,kHIDUsage_PID_Direction = 0x57,kHIDUsage_PID_TypeSpecificBlockOffset = 0x58,kHIDUsage_PID_BlockType = 0x59,kHIDUsage_PID_SetEnvelopeReport = 0x5A,kHIDUsage_PID_AttackLevel = 0x5B,kHIDUsage_PID_AttackTime = 0x5C,kHIDUsage_PID_FadeLevel = 0x5D,kHIDUsage_PID_FadeTime = 0x5E,kHIDUsage_PID_SetConditionReport = 0x5F,kHIDUsage_PID_CP_Offset = 0x60,kHIDUsage_PID_PositiveCoefficient = 0x61,kHIDUsage_PID_NegativeCoefficient = 0x62,kHIDUsage_PID_PositiveSaturation = 0x63,kHIDUsage_PID_NegativeSaturation = 0x64,kHIDUsage_PID_DeadBand = 0x65,kHIDUsage_PID_DownloadForceSample = 0x66,kHIDUsage_PID_IsochCustomForceEnable = 0x67,kHIDUsage_PID_CustomForceDataReport = 0x68,kHIDUsage_PID_CustomForceData = 0x69,kHIDUsage_PID_CustomForceVendorDefinedData = 0x6A,kHIDUsage_PID_SetCustomForceReport = 0x6B,kHIDUsage_PID_CustomForceDataOffset = 0x6C,kHIDUsage_PID_SampleCount = 0x6D,kHIDUsage_PID_SetPeriodicReport = 0x6E,kHIDUsage_PID_Offset = 0x6F,kHIDUsage_PID_Magnitude = 0x70,kHIDUsage_PID_Phase = 0x71,kHIDUsage_PID_Period = 0x72,kHIDUsage_PID_SetConstantForceReport = 0x73,kHIDUsage_PID_SetRampForceReport = 0x74,kHIDUsage_PID_RampStart = 0x75,kHIDUsage_PID_RampEnd = 0x76,kHIDUsage_PID_EffectOperationReport = 0x77,kHIDUsage_PID_EffectOperation = 0x78,kHIDUsage_PID_OpEffectStart = 0x79,kHIDUsage_PID_OpEffectStartSolo = 0x7A,kHIDUsage_PID_OpEffectStop = 0x7B,kHIDUsage_PID_LoopCount = 0x7C,kHIDUsage_PID_DeviceGainReport = 0x7D,kHIDUsage_PID_DeviceGain = 0x7E,kHIDUsage_PID_PoolReport = 0x7F,kHIDUsage_PID_RAM_PoolSize = 0x80,kHIDUsage_PID_ROM_PoolSize = 0x81,kHIDUsage_PID_ROM_EffectBlockCount = 0x82,kHIDUsage_PID_SimultaneousEffectsMax = 0x83,kHIDUsage_PID_PoolAlignment = 0x84,kHIDUsage_PID_PoolMoveReport = 0x85,kHIDUsage_PID_MoveSource = 0x86,kHIDUsage_PID_MoveDestination = 0x87,kHIDUsage_PID_MoveLength = 0x88,kHIDUsage_PID_BlockLoadReport = 0x89,kHIDUsage_PID_BlockLoadStatus = 0x8B,kHIDUsage_PID_BlockLoadSuccess = 0x8C,kHIDUsage_PID_BlockLoadFull = 0x8D,kHIDUsage_PID_BlockLoadError = 0x8E,kHIDUsage_PID_BlockHandle = 0x8F,kHIDUsage_PID_BlockFreeReport = 0x90,kHIDUsage_PID_TypeSpecificBlockHandle = 0x91,kHIDUsage_PID_StateReport = 0x92,kHIDUsage_PID_EffectPlaying = 0x94,kHIDUsage_PID_DeviceControlReport = 0x95,kHIDUsage_PID_DeviceControl = 0x96,kHIDUsage_PID_DC_EnableActuators = 0x97,kHIDUsage_PID_DC_DisableActuators = 0x98,kHIDUsage_PID_DC_StopAllEffects = 0x99,kHIDUsage_PID_DC_DeviceReset = 0x9A,kHIDUsage_PID_DC_DevicePause = 0x9B,kHIDUsage_PID_DC_DeviceContinue = 0x9C,kHIDUsage_PID_DevicePaused = 0x9F,kHIDUsage_PID_ActuatorsEnabled = 0xA0,kHIDUsage_PID_SafetySwitch = 0xA4,kHIDUsage_PID_ActuatorOverrideSwitch = 0xA5,kHIDUsage_PID_ActuatorPower = 0xA6,kHIDUsage_PID_StartDelay = 0xA7,kHIDUsage_PID_ParameterBlockSize = 0xA8,kHIDUsage_PID_DeviceManagedPool = 0xA9,kHIDUsage_PID_SharedParameterBlocks = 0xAA,kHIDUsage_PID_CreateNewEffectReport = 0xAB,kHIDUsage_PID_RAM_PoolAvailable = 0xAC,kHIDUsage_PID_Reserved = 0xFFFF,};
enum _6D98AC9833C3D7E853FA06F1465838AC {kIOACPIMemoryRange = 0x0,kIOACPIIORange = 0x1,kIOACPIBusNumberRange = 0x2,};
enum _6E185CDBC942354112EAF4417E1A2E3D {kIOMemoryIncoherentIOFlush = 0x1,kIOMemoryIncoherentIOStore = 0x2,kIOMemoryClearEncrypted = 0x32,kIOMemorySetEncrypted = 0x33,};
enum _6E9E62562C47A7E24CBE4AE31E6AA143 {kINQUIRY_PERIPHERAL_TYPE_DirectAccessSBCDevice = 0x0,kINQUIRY_PERIPHERAL_TYPE_SequentialAccessSSCDevice = 0x1,kINQUIRY_PERIPHERAL_TYPE_PrinterSSCDevice = 0x2,kINQUIRY_PERIPHERAL_TYPE_ProcessorSPCDevice = 0x3,kINQUIRY_PERIPHERAL_TYPE_WriteOnceSBCDevice = 0x4,kINQUIRY_PERIPHERAL_TYPE_CDROM_MMCDevice = 0x5,kINQUIRY_PERIPHERAL_TYPE_ScannerSCSI2Device = 0x6,kINQUIRY_PERIPHERAL_TYPE_OpticalMemorySBCDevice = 0x7,kINQUIRY_PERIPHERAL_TYPE_MediumChangerSMCDevice = 0x8,kINQUIRY_PERIPHERAL_TYPE_CommunicationsSSCDevice = 0x9,kINQUIRY_PERIPHERAL_TYPE_StorageArrayControllerSCC2Device = 0xC,kINQUIRY_PERIPHERAL_TYPE_EnclosureServicesSESDevice = 0xD,kINQUIRY_PERIPHERAL_TYPE_SimplifiedDirectAccessRBCDevice = 0xE,kINQUIRY_PERIPHERAL_TYPE_OpticalCardReaderOCRWDevice = 0xF,kINQUIRY_PERIPHERAL_TYPE_ObjectBasedStorageDevice = 0x11,kINQUIRY_PERIPHERAL_TYPE_AutomationDriveInterface = 0x12,kINQUIRY_PERIPHERAL_TYPE_WellKnownLogicalUnit = 0x1E,kINQUIRY_PERIPHERAL_TYPE_UnknownOrNoDeviceType = 0x1F,kINQUIRY_PERIPHERAL_TYPE_Mask = 0x1F,};
enum _6F22BFBFE92439A6A5A7EB8107D07552 {kSecondsPerHour = 0xE10,kTenMinutesInSeconds = 0x258,};
enum _6F2FA4AFA4AF4564E2F96BE08C62C42A {kUSB100mAAvailable = 0x32,kUSB500mAAvailable = 0xFA,kUSB100mA = 0x32,kUSBAtrBusPowered = 0x80,kUSBAtrSelfPowered = 0x40,kUSBAtrRemoteWakeup = 0x20,kUSB2MaxPowerPerPort = 0x1F4,kUSB150mAAvailable = 0x4B,kUSB900mAAvailable = 0x1C2,kUSB150mA = 0x4B,kUSB3MaxPowerPerPort = 0x384,};
enum _6F51167027A5CDCA703EAF5AA6C07BD2 {kRegCStrMaxEntryNameLength = 0x2F,};
enum _6F83D5D41E03C4C6BDA61CEBE42B6F33 {kBluetoothPageScanModeMandatory = 0x0,kBluetoothPageScanModeOptional1 = 0x1,kBluetoothPageScanModeOptional2 = 0x2,kBluetoothPageScanModeOptional3 = 0x3,};
enum _6FC73A53D9188162402671ED5351065A {kHFSMaxVolumeNameChars = 0x1B,kHFSMaxFileNameChars = 0x1F,kHFSPlusMaxFileNameChars = 0xFF,};
enum _6FF2FB43450AE299077F6C8D1D4C47AB {kBluetoothSDPErrorCodeSuccess = 0x0,kBluetoothSDPErrorCodeReserved = 0x0,kBluetoothSDPErrorCodeInvalidSDPVersion = 0x1,kBluetoothSDPErrorCodeInvalidServiceRecordHandle = 0x2,kBluetoothSDPErrorCodeInvalidRequestSyntax = 0x3,kBluetoothSDPErrorCodeInvalidPDUSize = 0x4,kBluetoothSDPErrorCodeInvalidContinuationState = 0x5,kBluetoothSDPErrorCodeInsufficientResources = 0x6,kBluetoothSDPErrorCodeReservedStart = 0x7,kBluetoothSDPErrorCodeReservedEnd = 0xFFFF,};
enum _7030D58540BEADC51AFAB6813BB4F439 {kATAErrUnknownType = 0xFFFFFFFF,kATANoErr = 0x0,kATAQueueEmpty = 0x1,kATAUnknownOpcode = 0x2,kATATimeoutErr = 0x3,kATAInvalidDevID = 0x4,kATAErrDevBusy = 0x5,kATAModeNotSupported = 0x6,kATADevIntNoCmd = 0x7,kATADeviceError = 0x8,kATADMAErr = 0x9,};
enum _7078EF2F3EF9844A05555E422BB96EF4 {kIOScaleStretchToFit = 0x1,kIOScaleRotateFlags = 0xF0,kIOScaleSwapAxes = 0x10,kIOScaleInvertX = 0x20,kIOScaleInvertY = 0x40,kIOScaleRotate0 = 0x0,kIOScaleRotate90 = 0x30,kIOScaleRotate180 = 0x60,kIOScaleRotate270 = 0x50,};
enum _71207CD9F2CD60BCB5EA6D7443E09242 {kIODDCForceRead = 0x1,};
enum _71881645BB17C8D71998BE4ADE99C186 {kIOMediumEthernet = 0x20,kIOMediumEthernetAuto = 0x20,kIOMediumEthernetManual = 0x21,kIOMediumEthernetNone = 0x22,kIOMediumEthernet10BaseT = 0x23,kIOMediumEthernet10Base2 = 0x24,kIOMediumEthernet10Base5 = 0x25,kIOMediumEthernet100BaseTX = 0x26,kIOMediumEthernet100BaseFX = 0x27,kIOMediumEthernet100BaseT4 = 0x28,kIOMediumEthernet100BaseVG = 0x29,kIOMediumEthernet100BaseT2 = 0x2A,kIOMediumEthernet1000BaseSX = 0x2B,kIOMediumEthernet10BaseSTP = 0x2C,kIOMediumEthernet10BaseFL = 0x2D,kIOMediumEthernet1000BaseLX = 0x2E,kIOMediumEthernet1000BaseCX = 0x2F,kIOMediumEthernet1000BaseTX = 0x30,kIOMediumEthernet1000BaseT = 0x30,kIOMediumEthernetHomePNA1 = 0x31,kIOMediumEthernet10GBaseSR = 0x32,kIOMediumEthernet10GBaseLR = 0x33,kIOMediumEthernet10GBaseCX4 = 0x34,kIOMediumEthernet10GBaseT = 0x35,kIOMediumEthernet2500BaseT = 0x36,kIOMediumEthernet5000BaseT = 0x37,};
enum _72253F8C3C5ED76F69228A342BB138A6 {kDVIPowerSwitchFeature = 0x1,kDVIPowerSwitchSupportMask = 0x1,kDVIPowerSwitchActiveMask = 0x1,};
enum _72428A7A7CD1CC688744ABA0D6C4BF88 {kRegIterRoot = 0x2,kRegIterParents = 0x3,kRegIterChildren = 0x4,kRegIterSubTrees = 0x5,kRegIterDescendants = 0x5,kRegIterSibling = 0x6,kRegIterContinue = 0x1,};
enum _724F3C2DDEB91B90704BB86EDDCA9B2F {kBootROMTypeOldWorld = 0x0,kBootROMTypeNewWorld = 0x1,};
enum _727AFADFF8A41AF92396D6ACB64D0D29 {kFFTDirection_Forward = 0x1,kFFTDirection_Inverse = 0xFFFFFFFF,};
enum _7299DE3ABCF591CE492F9D209E1904EB {kUSBbEndpointAddressMask = 0xF,kUSBbEndpointDirectionBit = 0x7,kUSBbEndpointDirectionMask = 0x80,kUSBEndpointDirectionOut = 0x0,kUSBEndpointDirectionIn = 0x80,kUSBEndpointbmAttributesTransferTypeMask = 0x3,kUSBEndpointbmAttributesSynchronizationTypeMask = 0xC,kUSBEndpointbmAttributesSynchronizationTypeShift = 0x2,kUSBEndpointbmAttributesUsageTypeMask = 0x30,kUSBEndpointbmAttributesUsageTypeShift = 0x4,kUSBPeriodicInterruptUsageType = 0x0,kUSBNotificationInterruptUsageType = 0x1,kUSBNoSynchronizationIsocSyncType = 0x0,kUSBAsynchronousIsocSyncType = 0x1,kUSBAdaptiveIsocSyncType = 0x2,kUSBSynchronousIsocSyncType = 0x3,kUSBDataIsocUsageType = 0x0,kUSBFeedbackIsocUsageType = 0x1,kUSBImplicitFeedbackDataIsocUsageType = 0x2,};
enum _73F5902458198BB9A722414F2D6FCD34 {kIODigitalSignal = 0x1,kIOAnalogSetupExpected = 0x2,kIOInterlacedCEATiming = 0x4,kIONTSCTiming = 0x8,kIOPALTiming = 0x10,};
enum _74317E78E7ADB82CB4BED579FAF5CBD3 {kDisabledInterruptState = 0x0,kEnabledInterruptState = 0x1,};
enum _7488EBE3F0F8E3494B17B7B8EB081543 {kIOConnectMethodVarOutputSize = 0xFFFFFFFD,};
enum _76110B612FE58B5C8E0A2B8C21C58CE1 {kIOConnectionBuiltIn = 0x800,kIOConnectionStereoSync = 0x8000,};
enum _761C12FE5C37C41B5803CD49D40730C2 {kDVDStructureFormatPhysicalFormatInfo = 0x0,kDVDStructureFormatCopyrightInfo = 0x1,kDVDStructureFormatDiscKeyInfo = 0x2,kDVDStructureFormatManufacturingInfo = 0x4,};
enum _7682548C84549B22821F96282AA1072C {kBluetoothHCIErrorSuccess = 0x0,kBluetoothHCIErrorUnknownHCICommand = 0x1,kBluetoothHCIErrorNoConnection = 0x2,kBluetoothHCIErrorHardwareFailure = 0x3,kBluetoothHCIErrorPageTimeout = 0x4,kBluetoothHCIErrorAuthenticationFailure = 0x5,kBluetoothHCIErrorKeyMissing = 0x6,kBluetoothHCIErrorMemoryFull = 0x7,kBluetoothHCIErrorConnectionTimeout = 0x8,kBluetoothHCIErrorMaxNumberOfConnections = 0x9,kBluetoothHCIErrorMaxNumberOfSCOConnectionsToADevice = 0xA,kBluetoothHCIErrorACLConnectionAlreadyExists = 0xB,kBluetoothHCIErrorCommandDisallowed = 0xC,kBluetoothHCIErrorHostRejectedLimitedResources = 0xD,kBluetoothHCIErrorHostRejectedSecurityReasons = 0xE,kBluetoothHCIErrorHostRejectedRemoteDeviceIsPersonal = 0xF,kBluetoothHCIErrorHostTimeout = 0x10,kBluetoothHCIErrorUnsupportedFeatureOrParameterValue = 0x11,kBluetoothHCIErrorInvalidHCICommandParameters = 0x12,kBluetoothHCIErrorOtherEndTerminatedConnectionUserEnded = 0x13,kBluetoothHCIErrorOtherEndTerminatedConnectionLowResources = 0x14,kBluetoothHCIErrorOtherEndTerminatedConnectionAboutToPowerOff = 0x15,kBluetoothHCIErrorConnectionTerminatedByLocalHost = 0x16,kBluetoothHCIErrorRepeatedAttempts = 0x17,kBluetoothHCIErrorPairingNotAllowed = 0x18,kBluetoothHCIErrorUnknownLMPPDU = 0x19,kBluetoothHCIErrorUnsupportedRemoteFeature = 0x1A,kBluetoothHCIErrorSCOOffsetRejected = 0x1B,kBluetoothHCIErrorSCOIntervalRejected = 0x1C,kBluetoothHCIErrorSCOAirModeRejected = 0x1D,kBluetoothHCIErrorInvalidLMPParameters = 0x1E,kBluetoothHCIErrorUnspecifiedError = 0x1F,kBluetoothHCIErrorUnsupportedLMPParameterValue = 0x20,kBluetoothHCIErrorRoleChangeNotAllowed = 0x21,kBluetoothHCIErrorLMPResponseTimeout = 0x22,kBluetoothHCIErrorLMPErrorTransactionCollision = 0x23,kBluetoothHCIErrorLMPPDUNotAllowed = 0x24,kBluetoothHCIErrorEncryptionModeNotAcceptable = 0x25,kBluetoothHCIErrorUnitKeyUsed = 0x26,kBluetoothHCIErrorQoSNotSupported = 0x27,kBluetoothHCIErrorInstantPassed = 0x28,kBluetoothHCIErrorPairingWithUnitKeyNotSupported = 0x29,kBluetoothHCIErrorHostRejectedUnacceptableDeviceAddress = 0xF,kBluetoothHCIErrorDifferentTransactionCollision = 0x2A,kBluetoothHCIErrorQoSUnacceptableParameter = 0x2C,kBluetoothHCIErrorQoSRejected = 0x2D,kBluetoothHCIErrorChannelClassificationNotSupported = 0x2E,kBluetoothHCIErrorInsufficientSecurity = 0x2F,kBluetoothHCIErrorParameterOutOfMandatoryRange = 0x30,kBluetoothHCIErrorRoleSwitchPending = 0x31,kBluetoothHCIErrorReservedSlotViolation = 0x34,kBluetoothHCIErrorRoleSwitchFailed = 0x35,kBluetoothHCIErrorExtendedInquiryResponseTooLarge = 0x36,kBluetoothHCIErrorSecureSimplePairingNotSupportedByHost = 0x37,kBluetoothHCIErrorHostBusyPairing = 0x38,kBluetoothHCIErrorConnectionRejectedDueToNoSuitableChannelFound = 0x39,kBluetoothHCIErrorControllerBusy = 0x3A,kBluetoothHCIErrorUnacceptableConnectionInterval = 0x3B,kBluetoothHCIErrorDirectedAdvertisingTimeout = 0x3C,kBluetoothHCIErrorConnectionTerminatedDueToMICFailure = 0x3D,kBluetoothHCIErrorConnectionFailedToBeEstablished = 0x3E,kBluetoothHCIErrorMACConnectionFailed = 0x3F,kBluetoothHCIErrorCoarseClockAdjustmentRejected = 0x40,kBluetoothHCIErrorMax = 0x40,};
enum _76B09F24B696FF4655179F25EF8D7E7C {kIOAGPRequestQueueMask = 0xFF000000,kIOAGPSideBandAddresssing = 0x200,kIOAGPEnable = 0x100,kIOAGP4GbAddressing = 0x20,kIOAGPFastWrite = 0x10,kIOAGP4xDataRate = 0x4,kIOAGP2xDataRate = 0x2,kIOAGP1xDataRate = 0x1,};
enum _76C3D9C2054DE0F0C159EF7D190DE5AD {kIOFBLinkDownspreadNone = 0x0,kIOFBLinkDownspreadMax = 0x1,};
enum _7782BEF56FC3B9D23457E97D55A27A0B {kFWConfigurationPacketID = 0x0,kFWLinkOnPacketID = 0x1,kFWSelfIDPacketID = 0x2,};
enum _77866B97CCDFFDBB0EAD7B0B7CE321D2 {kConfigSBP2LUN = 0x14,kConfigSBP2Revision = 0x21,kConfigSBP2MAO = 0x54,};
enum _7797DAEFC85EBDB4E42BC0557CEFDF89 {kIOPSAdapterErrorFlagNoErrors = 0x0,kIOPSAdapterErrorFlagInsufficientAvailablePower = 0x2,kIOPSAdapterErrorFlagForeignObjectDetected = 0x4,kIOPSAdapterErrorFlagDeviceNeedsToBeRepositioned = 0x8,};
enum _77FE6B40013ED20FA341129ED482F701 {kIOMirrorIsPrimary = 0x80000000,kIOMirrorHWClipped = 0x40000000,kIOMirrorIsMirrored = 0x20000000,};
enum _7880AF050EB67D56DE125B735B1A3530 {IFNET_WAKE_ON_MAGIC_PACKET = 0x1,};
enum _788DD760068E048D301BC3EA8E292ED5 {kIORegistryIterateRecursively = 0x1,kIORegistryIterateParents = 0x2,};
enum _78EC4BBF9881AC7D01B6AED3540EAD41 {kRegNoModifiers = 0x0,kRegUniversalModifierMask = 0xFFFF,kRegNameSpaceModifierMask = 0xFF0000,kRegModifierMask = 0xFF000000,};
enum _791B8A392A60E761188C72A14EB9F4EA {kTimingChangeRestrictedErr = 0xFFFFD54E,kVideoI2CReplyPendingErr = 0xFFFFD54D,kVideoI2CTransactionErr = 0xFFFFD54C,kVideoI2CBusyErr = 0xFFFFD54B,kVideoI2CTransactionTypeErr = 0xFFFFD54A,kVideoBufferSizeErr = 0xFFFFD549,kVideoCannotMirrorErr = 0xFFFFD548,};
enum _79B648C3A9803415CC3F5C34260EB9B4 {kIOServiceExclusive = 0x1,kIOServiceRequired = 0x1,kIOServiceTerminate = 0x4,kIOServiceSynchronous = 0x2,kIOServiceAsynchronous = 0x8,};
enum _79EA5E6CB0B0137AD506CAAEBDB36B08 {sockopt_get = 0x1,sockopt_set = 0x2,};
enum _7A08352BAF80C8340B522A8B88977FF3 {kFWResponseComplete = 0x0,kFWResponseConflictError = 0x4,kFWResponseDataError = 0x5,kFWResponseTypeError = 0x6,kFWResponseAddressError = 0x7,kFWResponseBusResetError = 0x10,kFWResponsePending = 0x11,};
enum _7A2315A70BD66FE4F38F33650BC4F321 {kIOPCIConfigSpace = 0x0,kIOPCIIOSpace = 0x1,kIOPCI32BitMemorySpace = 0x2,kIOPCI64BitMemorySpace = 0x3,};
enum _7A3DB4292358FD574BFED7DEB9B63DF1 {MBUF_CSUM_REQ_IP = 0x1,MBUF_CSUM_REQ_TCP = 0x2,MBUF_CSUM_REQ_UDP = 0x4,MBUF_CSUM_REQ_TCPIPV6 = 0x20,MBUF_CSUM_REQ_UDPIPV6 = 0x40,};
enum _7B2DE6D47E2B7116215F87ED19376647 {kDisableHorizontalSyncBit = 0x0,kDisableVerticalSyncBit = 0x1,kDisableCompositeSyncBit = 0x2,kEnableSyncOnBlue = 0x3,kEnableSyncOnGreen = 0x4,kEnableSyncOnRed = 0x5,kNoSeparateSyncControlBit = 0x6,kTriStateSyncBit = 0x7,kHorizontalSyncMask = 0x1,kVerticalSyncMask = 0x2,kCompositeSyncMask = 0x4,kDPMSSyncMask = 0x7,kTriStateSyncMask = 0x80,kSyncOnBlueMask = 0x8,kSyncOnGreenMask = 0x10,kSyncOnRedMask = 0x20,kSyncOnMask = 0x38,};
enum _7B356EB6EC7B8201568806B830EC6121 {dot3ChipSetWesternDigital83C690 = 0x1,dot3ChipSetWesternDigital83C790 = 0x2,};
enum _7BBBBDE61834C853D13FE00B9453B4A8 {kIOPMBroadcastAggressiveness = 0x1,kIOPMUnidleDevice = 0x2,};
enum _7BF802DC7A7FE2FAD8272108711ADCDB {kUSBNotificationPreForcedSuspendBit = 0x0,kUSBNotificationPostForcedSuspendBit = 0x1,kUSBNotificationPreForcedResumeBit = 0x2,kUSBNotificationPostForcedResumeBit = 0x3,};
enum _7D7D27426D68EC3192668C7CC2ABF3AC {kIOPCIConfigVendorID = 0x0,kIOPCIConfigDeviceID = 0x2,kIOPCIConfigCommand = 0x4,kIOPCIConfigStatus = 0x6,kIOPCIConfigRevisionID = 0x8,kIOPCIConfigClassCode = 0x9,kIOPCIConfigCacheLineSize = 0xC,kIOPCIConfigLatencyTimer = 0xD,kIOPCIConfigHeaderType = 0xE,kIOPCIConfigBIST = 0xF,kIOPCIConfigBaseAddress0 = 0x10,kIOPCIConfigBaseAddress1 = 0x14,kIOPCIConfigBaseAddress2 = 0x18,kIOPCIConfigBaseAddress3 = 0x1C,kIOPCIConfigBaseAddress4 = 0x20,kIOPCIConfigBaseAddress5 = 0x24,kIOPCIConfigCardBusCISPtr = 0x28,kIOPCIConfigSubSystemVendorID = 0x2C,kIOPCIConfigSubSystemID = 0x2E,kIOPCIConfigExpansionROMBase = 0x30,kIOPCIConfigCapabilitiesPtr = 0x34,kIOPCIConfigInterruptLine = 0x3C,kIOPCIConfigInterruptPin = 0x3D,kIOPCIConfigMinimumGrant = 0x3E,kIOPCIConfigMaximumLatency = 0x3F,};
enum _7E727B01F9B60A3974E174801E7081C4 {kIOFBLinkVoltageLevel0 = 0x0,kIOFBLinkVoltageLevel1 = 0x1,kIOFBLinkVoltageLevel2 = 0x2,kIOFBLinkVoltageLevel3 = 0x3,};
enum _7E730FAD05B2EC6C257354545510EC1E {kRegPathNameSeparator = 0x3A,kRegEntryNameTerminator = 0x0,kRegPathNameTerminator = 0x0,};
enum _7E7ADD354FB60292950CEE5AD50C1342 {kHIDFlag_StrictErrorChecking = 0x1,};
enum _7EE2FC379347C8D8AF59BE5A2FBAFB2C {dot3ChipSetIntel82586 = 0x1,dot3ChipSetIntel82596 = 0x2,dot3ChipSetIntel82557 = 0x3,};
enum _7EE70FEEEBD22D3722851F8BB7D01FC6 {kBluetoothHCILoopbackModeOff = 0x0,kBluetoothHCILoopbackModeLocal = 0x1,kBluetoothHCILoopbackModeRemote = 0x2,};
enum _7F3BE1C35AF83A267F9779676A0EF33E {clutType = 0x0,fixedType = 0x1,directType = 0x2,RGBDirect = 0x10,};
enum _7FEE79DDD19E552A0F1B0C7C5603EE96 {kINQUIRY_Page83_CodeSetReserved = 0x0,kINQUIRY_Page83_CodeSetBinaryData = 0x1,kINQUIRY_Page83_CodeSetASCIIData = 0x2,kINQUIRY_Page83_CodeSetUTF8Data = 0x3,kINQUIRY_Page83_CodeSetMask = 0xF,};
enum _800BC53DDA3951D263A171E02AE8DC1E {kIOPMPowerStateVersion1 = 0x1,kIOPMPowerStateVersion2 = 0x2,};
struct _80170D750C6FB8D8ABC6B5D9BAC5E223 {IOMemoryMap *bufferMemoryMap;};
enum _80BB9550114365FE0829682ED387E65B {kINQUIRY_PageB1_Page_Length = 0x3C,};
enum _8140E751F90B6D192A0D49878D8A7D1D {kSENSE_DATA_VALID = 0x80,kSENSE_NOT_DATA_VALID = 0x0,kSENSE_DATA_VALID_Mask = 0x80,};
enum _81832DF929A7EF2703B27C90C01BB8C9 {kModePageControlCurrentValues = 0x0,kModePageControlChangeableValues = 0x1,kModePageControlDefaultValues = 0x2,kModePageControlSavedValues = 0x3,};
enum _81C32ED138FAF6C81036665E672AAED0 {kBluetoothGeneralInquiryAccessCodeIndex = 0x0,kBluetoothGeneralInquiryAccessCodeLAPValue = 0x9E8B33,kBluetoothLimitedInquiryAccessCodeIndex = 0x1,kBluetoothLimitedInquiryAccessCodeLAPValue = 0x9E8B00,kBluetoothLimitedInquiryAccessCodeEnd = 0x9E8B01,};
enum _81E1C816FEA73A17ED48CC911F2CF4B8 {kIOBlitColorSpaceTypes = 0x63737063,};
enum _81F9FE88C65AD7CE133B2AFC6CC8287F {kNumPortBytes = 0x9,};
enum _8218F0DB1AE35ADBC5A0ED11E125F610 {kBluetoothPacketTypeReserved1 = 0x1,kBluetoothPacketType2DH1Omit = 0x2,kBluetoothPacketType3DH1Omit = 0x4,kBluetoothPacketTypeDM1 = 0x8,kBluetoothPacketTypeDH1 = 0x10,kBluetoothPacketTypeHV1 = 0x20,kBluetoothPacketTypeHV2 = 0x40,kBluetoothPacketTypeHV3 = 0x80,kBluetoothPacketTypeDV = 0x100,kBluetoothPacketType2DH3Omit = 0x100,kBluetoothPacketType3DH3Omit = 0x200,kBluetoothPacketTypeAUX = 0x200,kBluetoothPacketTypeDM3 = 0x400,kBluetoothPacketTypeDH3 = 0x800,kBluetoothPacketType2DH5Omit = 0x1000,kBluetoothPacketType3DM5Omit = 0x2000,kBluetoothPacketTypeDM5 = 0x4000,kBluetoothPacketTypeDH5 = 0x8000,kBluetoothPacketTypeEnd = 0x8001,};
enum _822FF767213174380A10D34DB6A5567B {kHIDUsage_WD_Undefined = 0x0,kHIDUsage_WD_WeighingDevice = 0x1,kHIDUsage_WD_ScaleScaleDevice = 0x20,kHIDUsage_WD_ScaleScaleClassIMetricCL = 0x21,kHIDUsage_WD_ScaleScaleClassIMetric = 0x22,kHIDUsage_WD_ScaleScaleClassIIMetric = 0x23,kHIDUsage_WD_ScaleScaleClassIIIMetric = 0x24,kHIDUsage_WD_ScaleScaleClassIIILMetric = 0x25,kHIDUsage_WD_ScaleScaleClassIVMetric = 0x26,kHIDUsage_WD_ScaleScaleClassIIIEnglish = 0x27,kHIDUsage_WD_ScaleScaleClassIIILEnglish = 0x28,kHIDUsage_WD_ScaleScaleClassIVEnglish = 0x29,kHIDUsage_WD_ScaleScaleClassGeneric = 0x2A,kHIDUsage_WD_ScaleAtrributeReport = 0x30,kHIDUsage_WD_ScaleControlReport = 0x31,kHIDUsage_WD_ScaleDataReport = 0x32,kHIDUsage_WD_ScaleStatusReport = 0x33,kHIDUsage_WD_ScaleWeightLimitReport = 0x34,kHIDUsage_WD_ScaleStatisticsReport = 0x35,kHIDUsage_WD_DataWeight = 0x40,kHIDUsage_WD_DataScaling = 0x41,kHIDUsage_WD_WeightUnit = 0x50,kHIDUsage_WD_WeightUnitMilligram = 0x51,kHIDUsage_WD_WeightUnitGram = 0x52,kHIDUsage_WD_WeightUnitKilogram = 0x53,kHIDUsage_WD_WeightUnitCarats = 0x54,kHIDUsage_WD_WeightUnitTaels = 0x55,kHIDUsage_WD_WeightUnitGrains = 0x56,kHIDUsage_WD_WeightUnitPennyweights = 0x57,kHIDUsage_WD_WeightUnitMetricTon = 0x58,kHIDUsage_WD_WeightUnitAvoirTon = 0x59,kHIDUsage_WD_WeightUnitTroyOunce = 0x5A,kHIDUsage_WD_WeightUnitOunce = 0x5B,kHIDUsage_WD_WeightUnitPound = 0x5C,kHIDUsage_WD_CalibrationCount = 0x60,kHIDUsage_WD_RezeroCount = 0x61,kHIDUsage_WD_ScaleStatus = 0x70,kHIDUsage_WD_ScaleStatusFault = 0x71,kHIDUsage_WD_ScaleStatusStableAtZero = 0x72,kHIDUsage_WD_ScaleStatusInMotion = 0x73,kHIDUsage_WD_ScaleStatusWeightStable = 0x74,kHIDUsage_WD_ScaleStatusUnderZero = 0x75,kHIDUsage_WD_ScaleStatusOverWeightLimit = 0x76,kHIDUsage_WD_ScaleStatusRequiresCalibration = 0x77,kHIDUsage_WD_ScaleStatusRequiresRezeroing = 0x78,kHIDUsage_WD_ZeroScale = 0x80,kHIDUsage_WD_EnforcedZeroReturn = 0x81,};
enum _82D377B6D57DB6FE6B551814F20650CB {kIOCatalogAddDrivers = 0x1,kIOCatalogAddDriversNoMatch = 0x2,kIOCatalogRemoveDrivers = 0x3,kIOCatalogRemoveDriversNoMatch = 0x4,kIOCatalogStartMatching = 0x5,kIOCatalogRemoveKernelLinker = 0x6,kIOCatalogKextdActive = 0x7,kIOCatalogKextdFinishedLaunching = 0x8,kIOCatalogResetDrivers = 0x9,kIOCatalogResetDriversNoMatch = 0xA,};
enum _82DBEDE205CB8DF30AF98DE9401AC685 {kIOOutputCommandMask = 0xFF00,kIOOutputCommandNone = 0x0,kIOOutputCommandStall = 0x100,};
enum _82DEBEC4224339770F928BE16675518F {kIOMediaAttributeEjectableMask = 0x1,kIOMediaAttributeRemovableMask = 0x2,kIOMediaAttributeReservedMask = 0xFFFFFFFC,};
enum _83244C53E9402239B0685D60F0775F37 {kFWAVCConsumerMode_MORE = 0x1,kFWAVCConsumerMode_LAST = 0x4,kFWAVCConsumerMode_LESS = 0x5,kFWAVCConsumerMode_JUNK = 0x6,kFWAVCConsumerMode_LOST = 0x7,};
enum _8329030A7A8A1FB7E7892B4BF820FEA5 {kBluetoothPageScanRepetitionModeR0 = 0x0,kBluetoothPageScanRepetitionModeR1 = 0x1,kBluetoothPageScanRepetitionModeR2 = 0x2,};
enum _8338F009812DFDBC297158B84D49ECA4 {kHIDUsage_GD_Pointer = 0x1,kHIDUsage_GD_Mouse = 0x2,kHIDUsage_GD_Joystick = 0x4,kHIDUsage_GD_GamePad = 0x5,kHIDUsage_GD_Keyboard = 0x6,kHIDUsage_GD_Keypad = 0x7,kHIDUsage_GD_MultiAxisController = 0x8,kHIDUsage_GD_TabletPCSystemControls = 0x9,kHIDUsage_GD_AssistiveControl = 0xA,kHIDUsage_GD_X = 0x30,kHIDUsage_GD_Y = 0x31,kHIDUsage_GD_Z = 0x32,kHIDUsage_GD_Rx = 0x33,kHIDUsage_GD_Ry = 0x34,kHIDUsage_GD_Rz = 0x35,kHIDUsage_GD_Slider = 0x36,kHIDUsage_GD_Dial = 0x37,kHIDUsage_GD_Wheel = 0x38,kHIDUsage_GD_Hatswitch = 0x39,kHIDUsage_GD_CountedBuffer = 0x3A,kHIDUsage_GD_ByteCount = 0x3B,kHIDUsage_GD_MotionWakeup = 0x3C,kHIDUsage_GD_Start = 0x3D,kHIDUsage_GD_Select = 0x3E,kHIDUsage_GD_Vx = 0x40,kHIDUsage_GD_Vy = 0x41,kHIDUsage_GD_Vz = 0x42,kHIDUsage_GD_Vbrx = 0x43,kHIDUsage_GD_Vbry = 0x44,kHIDUsage_GD_Vbrz = 0x45,kHIDUsage_GD_Vno = 0x46,kHIDUsage_GD_SystemControl = 0x80,kHIDUsage_GD_SystemPowerDown = 0x81,kHIDUsage_GD_SystemSleep = 0x82,kHIDUsage_GD_SystemWakeUp = 0x83,kHIDUsage_GD_SystemContextMenu = 0x84,kHIDUsage_GD_SystemMainMenu = 0x85,kHIDUsage_GD_SystemAppMenu = 0x86,kHIDUsage_GD_SystemMenuHelp = 0x87,kHIDUsage_GD_SystemMenuExit = 0x88,kHIDUsage_GD_SystemMenuSelect = 0x89,kHIDUsage_GD_SystemMenu = 0x89,kHIDUsage_GD_SystemMenuRight = 0x8A,kHIDUsage_GD_SystemMenuLeft = 0x8B,kHIDUsage_GD_SystemMenuUp = 0x8C,kHIDUsage_GD_SystemMenuDown = 0x8D,kHIDUsage_GD_DPadUp = 0x90,kHIDUsage_GD_DPadDown = 0x91,kHIDUsage_GD_DPadRight = 0x92,kHIDUsage_GD_DPadLeft = 0x93,kHIDUsage_GD_Reserved = 0xFFFF,};
enum _83ABABC9FDFBC96D7CEC0DA31688683D {kBluetoothL2CAPPSMSDP = 0x1,kBluetoothL2CAPPSMRFCOMM = 0x3,kBluetoothL2CAPPSMTCS_BIN = 0x5,kBluetoothL2CAPPSMTCS_BIN_Cordless = 0x7,kBluetoothL2CAPPSMBNEP = 0xF,kBluetoothL2CAPPSMHIDControl = 0x11,kBluetoothL2CAPPSMHIDInterrupt = 0x13,kBluetoothL2CAPPSMAVCTP = 0x17,kBluetoothL2CAPPSMAVDTP = 0x19,kBluetoothL2CAPPSMAVCTP_Browsing = 0x1B,kBluetoothL2CAPPSMUID_C_Plane = 0x1D,kBluetoothL2CAPPSMATT = 0x1F,kBluetoothL2CAPPSMReservedStart = 0x1,kBluetoothL2CAPPSMReservedEnd = 0x1000,kBluetoothL2CAPPSMDynamicStart = 0x1001,kBluetoothL2CAPPSMAACP = 0x1001,kBluetoothL2CAPPSMD2D = 0x100F,kBluetoothL2CAPPSMDynamicEnd = 0xFFFF,kBluetoothL2CAPPSMNone = 0x0,};
enum _843C2D0A59B146910D76E9690269F14C {kDVDKeyFormatAGID_CSS = 0x0,kDVDKeyFormatChallengeKey = 0x1,kDVDKeyFormatKey1 = 0x2,kDVDKeyFormatKey2 = 0x3,kDVDKeyFormatTitleKey = 0x4,kDVDKeyFormatASF = 0x5,kDVDKeyFormatSetRegion = 0x6,kDVDKeyFormatRegionState = 0x8,kDVDKeyFormatAGID_CSS2 = 0x10,kDVDKeyFormatAGID_CPRM = 0x11,kDVDKeyFormatAGID_Invalidate = 0x3F,};
enum _8483B9F7E35241B7C70AAAC89819F929 {kBluetoothL2CAPConfigurationOptionMTULength = 0x2,kBluetoothL2CAPConfigurationOptionFlushTimeoutLength = 0x2,kBluetoothL2CAPConfigurationOptionQoSLength = 0x16,kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControlLength = 0x9,};
enum _84B0EB580EC026B510C821FC70509E99 {kIOTimerEventSourceOptionsPriorityMask = 0xFF,kIOTimerEventSourceOptionsPriorityHigh = 0x0,kIOTimerEventSourceOptionsPriorityKernelHigh = 0x1,kIOTimerEventSourceOptionsPriorityKernel = 0x2,kIOTimerEventSourceOptionsPriorityUser = 0x3,kIOTimerEventSourceOptionsPriorityLow = 0x4,kIOTimerEventSourceOptionsPriorityWorkLoop = 0xFF,kIOTimerEventSourceOptionsAllowReenter = 0x100,kIOTimerEventSourceOptionsDefault = 0x1,};
enum _85DD19B487B43855FA79C15C9E7EE8F3 {kIOAGPGartInvalidate = 0x1,};
enum _866468D8A27B1BFA3C737E4EA942CE05 {kBDFeaturesReadMask = 0x1,kBDFeaturesWriteMask = 0x2,};
enum _8671234625A39CB361BAFC749571F81A {kTheDescriptionSignature = 0x6D74656A,kDriverDescriptionSignature = 0x70646573,};
enum _86EFAE8ED1FEEB96DF05F79AD3F5A881 {kHIDUsage_AD_AlphanumericDisplay = 0x1,kHIDUsage_AD_DisplayAttributesReport = 0x20,kHIDUsage_AD_ASCIICharacterSet = 0x21,kHIDUsage_AD_DataReadBack = 0x22,kHIDUsage_AD_FontReadBack = 0x23,kHIDUsage_AD_DisplayControlReport = 0x24,kHIDUsage_AD_ClearDisplay = 0x25,kHIDUsage_AD_DisplayEnable = 0x26,kHIDUsage_AD_ScreenSaverDelay = 0x27,kHIDUsage_AD_ScreenSaverEnable = 0x28,kHIDUsage_AD_VerticalScroll = 0x29,kHIDUsage_AD_HorizontalScroll = 0x2A,kHIDUsage_AD_CharacterReport = 0x2B,kHIDUsage_AD_DisplayData = 0x2C,kHIDUsage_AD_DisplayStatus = 0x2D,kHIDUsage_AD_StatNotReady = 0x2E,kHIDUsage_AD_StatReady = 0x2F,kHIDUsage_AD_ErrNotaloadablecharacter = 0x30,kHIDUsage_AD_ErrFontdatacannotberead = 0x31,kHIDUsage_AD_CursorPositionReport = 0x32,kHIDUsage_AD_Row = 0x33,kHIDUsage_AD_Column = 0x34,kHIDUsage_AD_Rows = 0x35,kHIDUsage_AD_Columns = 0x36,kHIDUsage_AD_CursorPixelPositioning = 0x37,kHIDUsage_AD_CursorMode = 0x38,kHIDUsage_AD_CursorEnable = 0x39,kHIDUsage_AD_CursorBlink = 0x3A,kHIDUsage_AD_FontReport = 0x3B,kHIDUsage_AD_FontData = 0x3C,kHIDUsage_AD_CharacterWidth = 0x3D,kHIDUsage_AD_CharacterHeight = 0x3E,kHIDUsage_AD_CharacterSpacingHorizontal = 0x3F,kHIDUsage_AD_CharacterSpacingVertical = 0x40,kHIDUsage_AD_UnicodeCharacterSet = 0x41,kHIDUsage_AD_Reserved = 0xFFFF,};
enum _87181E73094603D3814E4DB85B3A3B64 {kUSBDeviceIDShift = 0x7,kUSBMaxDevices = 0x80,kUSBMaxDevice = 0x7F,kUSBDeviceIDMask = 0x7F,kUSBTooManyDevicesAddress = 0xFFFE,kUSBPipeIDMask = 0xF,kUSBMaxPipes = 0x20,kUSBInterfaceIDShift = 0x8,kUSBMaxInterfaces = 0x100,kUSBInterfaceIDMask = 0xFF,kUSBEndPtShift = 0x7,kUSBDeviceMask = 0x7F,kUSBNoPipeIdx = 0xFFFFFFFFFFFFFFFF,kUSBUCRequestWithoutUSBNotificationMask = 0x40000000,kUSBEndpointTransferTypeUCMask = 0x80,kUSBStream0 = 0x0,kUSBMaxStream = 0xFFFD,kUSBPRimeStream = 0xFFFE,kUSBNoStream = 0xFFFF,kUSBAllStreams = 0xFFFFFFFF,kUSBStreamIDMask = 0xFFFF,kUSBStreamIDAllStreamsMask = 0xFFFFFFFF80000000,};
enum _871F8BE690E80EA36FE8BFDEC6D17B33 {kIOPCIConfigShadowPermanent = 0x80000000,};
enum _87C941E1AF7C67CA6025B50BCE91ADF1 {kSCSIPort_StatusOnline = 0x0,kSCSIPort_StatusOffline = 0x1,kSCSIPort_StatusFailure = 0x2,};
enum _87FF13A99321A96DDE06BD665646F0A6 {kIOTrackingCallSiteBTs = 0x10,};
enum _8955AD19E95D76FBC75FC1B17BECF8F2 {kIOTraceInterrupts = 0x1,kIOTraceWorkLoops = 0x2,kIOTraceEventSources = 0x4,kIOTraceIntEventSource = 0x8,kIOTraceCommandGates = 0x10,kIOTraceTimers = 0x20,kIOTracePowerMgmt = 0x400,kIOTraceIOService = 0x80000,kIOTraceCompatBootArgs = 0x80400,};
enum _8A4007CC11226217CE5CB3D8FFB7E65A {sixteenBitMode = 0x84,thirtyTwoBitMode = 0x85,firstVidMode = 0x80,secondVidMode = 0x81,thirdVidMode = 0x82,fourthVidMode = 0x83,fifthVidMode = 0x84,sixthVidMode = 0x85,spGammaDir = 0x40,spVidNamesDir = 0x41,};
enum _8ADE30CA486A54246A7B521468AD6F6F {kBluetoothConnectionHandleNone = 0xFFFF,};
enum _8B04544802EFAC59812C379A614904DC {kDVDFeaturesCSSMask = 0x1,kDVDFeaturesReadStructuresMask = 0x2,kDVDFeaturesWriteOnceMask = 0x4,kDVDFeaturesRandomWriteableMask = 0x8,kDVDFeaturesReWriteableMask = 0x10,kDVDFeaturesTestWriteMask = 0x20,kDVDFeaturesBUFWriteMask = 0x40,kDVDFeaturesPlusRMask = 0x80,kDVDFeaturesPlusRWMask = 0x100,kDVDFeaturesHDReadMask = 0x200,kDVDFeaturesHDRMask = 0x400,kDVDFeaturesHDRAMMask = 0x800,kDVDFeaturesHDRWMask = 0x1000,};
enum _8B948515F6728070ECFF4EE31E8801C7 {kCSRNodeID = 0xFFFF0000,kCSRNodeIDPhase = 0x10,kCSRInitialMemorySpaceBaseAddressHi = 0x0,kCSRInitialMemorySpaceBaseAddressLo = 0x0,kCSRPrivateSpaceBaseAddressHi = 0xFFFF,kCSRPrivateSpaceBaseAddressLo = 0xE0000000,kCSRRegisterSpaceBaseAddressHi = 0xFFFF,kCSRRegisterSpaceBaseAddressLo = 0xF0000000,kCSRCoreRegistersBaseAddress = 0xF0000000,kCSRStateClearAddress = 0xF0000000,kCSRStateSetAddress = 0xF0000004,kCSRNodeIDsAddress = 0xF0000008,kCSRResetStartAddress = 0xF000000C,kCSRIndirectAddressAddress = 0xF0000010,kCSRIndirectDataAddress = 0xF0000014,kCSRSplitTimeoutHiAddress = 0xF0000018,kCSRSplitTimeoutLoAddress = 0xF000001C,kCSRArgumentHiAddress = 0xF0000020,kCSRArgumentLoAddress = 0xF0000024,kCSRTestStartAddress = 0xF0000028,kCSRTestStatusAddress = 0xF000002C,kCSRUnitsBaseHiAddress = 0xF0000030,kCSRUnitsBaseLoAddress = 0xF0000034,kCSRUnitsBoundHiAddress = 0xF0000038,kCSRUnitsBoundLoAddress = 0xF000003C,kCSRMemoryBaseHiAddress = 0xF0000040,kCSRMemoryBaseLoAddress = 0xF0000044,kCSRMemoryBoundHiAddress = 0xF0000048,kCSRMemoryBoundLoAddress = 0xF000004C,kCSRInterruptTargetAddress = 0xF0000050,kCSRInterruptMaskAddress = 0xF0000054,kCSRClockValueHiAddress = 0xF0000058,kCSRClockValueMidAddress = 0xF000005C,kCSRClockTickPeriodMidAddress = 0xF0000060,kCSRClockTickPeriodLoAddress = 0xF0000064,kCSRClockStrobeArrivedHiAddress = 0xF0000068,kCSRClockStrobeArrivedMidAddress = 0xF000006C,kCSRClockInfo0Address = 0xF0000070,kCSRClockInfo1Address = 0xF0000074,kCSRClockInfo2Address = 0xF0000078,kCSRClockInfo3Address = 0xF000007C,kCSRMessageRequestAddress = 0xF0000080,kCSRMessageResponseAddress = 0xF00000C0,kCSRErrorLogBufferAddress = 0xF0000180,kCSRBusDependentRegistersBaseAddress = 0xF0000200,kCSRBusyTimeout = 0xF0000210,kCSRBusManagerID = 0xF000021C,kCSRBandwidthAvailable = 0xF0000220,kCSRChannelsAvailable31_0 = 0xF0000224,kCSRChannelsAvailable63_32 = 0xF0000228,kCSRBroadcastChannel = 0xF0000234,kConfigROMBaseAddress = 0xF0000400,kConfigBIBHeaderAddress = 0xF0000400,kConfigBIBBusNameAddress = 0xF0000404,kPCRBaseAddress = 0xF0000900,kFCPCommandAddress = 0xF0000B00,kFCPResponseAddress = 0xF0000D00,};
enum _8BF5F72C76CC8C93A115E27F65C48BD8 {kSymLinkFileType = 0x736C6E6B,kSymLinkCreator = 0x72686170,};
enum _8C4982325A2392C0F057B5E5CC2FF0DD {kBluetoothL2CAPTCICommandReserved = 0x0,kBluetoothL2CAPTCICommandL2CA_ConnectReq = 0x1,kBluetoothL2CAPTCICommandL2CA_DisconnectReq = 0x2,kBluetoothL2CAPTCICommandL2CA_ConfigReq = 0x3,kBluetoothL2CAPTCICommandL2CA_DisableCLT = 0x4,kBluetoothL2CAPTCICommandL2CA_EnableCLT = 0x5,kBluetoothL2CAPTCICommandL2CA_GroupCreate = 0x6,kBluetoothL2CAPTCICommandL2CA_GroupClose = 0x7,kBluetoothL2CAPTCICommandL2CA_GroupAddMember = 0x8,kBluetoothL2CAPTCICommandL2CA_GroupRemoveMember = 0x9,kBluetoothL2CAPTCICommandL2CA_GroupMembership = 0xA,kBluetoothL2CAPTCICommandL2CA_WriteData = 0xB,kBluetoothL2CAPTCICommandL2CA_ReadData = 0xC,kBluetoothL2CAPTCICommandL2CA_Ping = 0xD,kBluetoothL2CAPTCICommandL2CA_GetInfo = 0xE,kBluetoothL2CAPTCICommandL2CA_Reserved1 = 0xF,kBluetoothL2CAPTCICommandL2CA_Reserved2 = 0x10,kBluetoothL2CAPTCICommandL2CA_ConnectResp = 0x11,kBluetoothL2CAPTCICommandL2CA_DisconnectResp = 0x12,kBluetoothL2CAPTCICommandL2CA_ConfigResp = 0x13,};
enum _8CBF61A71745D3631FDC7695B0D634A1 {kIONetworkFeatureNoBSDWait = 0x1,kIONetworkFeatureHardwareVlan = 0x2,kIONetworkFeatureSoftwareVlan = 0x4,kIONetworkFeatureMultiPages = 0x8,kIONetworkFeatureTSOIPv4 = 0x10,kIONetworkFeatureTSOIPv6 = 0x20,kIONetworkFeatureTransmitCompletionStatus = 0x40,kIONetworkFeatureHWTimeStamp = 0x80,kIONetworkFeatureSWTimeStamp = 0x100,};
enum _8CC006B7847C51ADB232F1CC224A4695 {sock_data_filt_flag_oob = 0x1,sock_data_filt_flag_record = 0x2,};
enum _8CDD1FC92E0286AF190B41E2FD4FFB48 {STACKSHOT_GET_DQ = 0x1,STACKSHOT_SAVE_LOADINFO = 0x2,STACKSHOT_GET_GLOBAL_MEM_STATS = 0x4,STACKSHOT_SAVE_KEXT_LOADINFO = 0x8,STACKSHOT_GET_MICROSTACKSHOT = 0x10,STACKSHOT_GLOBAL_MICROSTACKSHOT_ENABLE = 0x20,STACKSHOT_GLOBAL_MICROSTACKSHOT_DISABLE = 0x40,STACKSHOT_SET_MICROSTACKSHOT_MARK = 0x80,STACKSHOT_ACTIVE_KERNEL_THREADS_ONLY = 0x100,STACKSHOT_GET_BOOT_PROFILE = 0x200,STACKSHOT_SAVE_IMP_DONATION_PIDS = 0x2000,STACKSHOT_SAVE_IN_KERNEL_BUFFER = 0x4000,STACKSHOT_RETRIEVE_EXISTING_BUFFER = 0x8000,STACKSHOT_KCDATA_FORMAT = 0x10000,STACKSHOT_ENABLE_BT_FAULTING = 0x20000,STACKSHOT_COLLECT_DELTA_SNAPSHOT = 0x40000,STACKSHOT_COLLECT_SHAREDCACHE_LAYOUT = 0x80000,STACKSHOT_TRYLOCK = 0x100000,STACKSHOT_ENABLE_UUID_FAULTING = 0x200000,STACKSHOT_FROM_PANIC = 0x400000,STACKSHOT_NO_IO_STATS = 0x800000,STACKSHOT_THREAD_WAITINFO = 0x1000000,STACKSHOT_THREAD_GROUP = 0x2000000,STACKSHOT_SAVE_JETSAM_COALITIONS = 0x4000000,STACKSHOT_INSTRS_CYCLES = 0x8000000,STACKSHOT_ASID = 0x10000000,STACKSHOT_PAGE_TABLES = 0x20000000,};
enum _8CF10C2BD5FDA37DEC6A6C4EE4D805B3 {kScaleStretchToFitMask = 0x1,kScaleRotateFlagsMask = 0xF0,kScaleSwapAxesMask = 0x10,kScaleInvertXMask = 0x20,kScaleInvertYMask = 0x40,kScaleRotate0Mask = 0x0,kScaleRotate90Mask = 0x30,kScaleRotate180Mask = 0x60,kScaleRotate270Mask = 0x50,};
enum _8E2B7713454EE18E53E2C4CBDD98953D {kIOPCIDevicePowerStateCount = 0x4,kIOPCIDeviceOffState = 0x0,kIOPCIDeviceDozeState = 0x1,kIOPCIDeviceOnState = 0x2,kIOPCIDevicePausedState = 0x3,};
enum _8E7CEB297CFCA49C7CA103118032E6CE {kIOFWSBP2FailsOnAckBusy = 0x1,kIOFWSBP2FailsOnBusResetsDuringIO = 0x2,kIOFWSBP2DontUsePTPacketLimit = 0x4,};
enum _8F5D417B66C895A7F0B1806A86A2F7F5 {kIOStreamOptionOpenExclusive = 0x10000,kIOStreamOptionOpenShared = 0x20000,};
enum _8FC103F1A02F56B71562ED85F06566FF {kIOAudioControlTypeLevel = 0x6C65766C,kIOAudioControlTypeToggle = 0x746F676C,kIOAudioControlTypeJack = 0x6A61636B,kIOAudioControlTypeSelector = 0x736C6374,};
enum _8FCD2821E0EDA42715029F50C285CD7E {kIOAudioStreamByteOrderBigEndian = 0x0,kIOAudioStreamByteOrderLittleEndian = 0x1,};
enum _9065DDF3B99BFDBA963FC6F237280D10 {kIOAccelPrivateID = 0x1,};
enum _91090B1AEA9710E8C9546753B2FA6210 {BLOCK_ALL_COPY_DISPOSE_FLAGS = 0x9F,};
enum _9151E5A70224D9DD4470FE88FFF310B2 {kExtInt9_NMIIntSource = 0x800506E0,kNMIIntLevelMask = 0x4000,kNMIIntMask = 0x80,};
enum _919C5A819B6A3C4B0910ABCC4046BE7F {kHIDUsage_CC_Undefined = 0x0,kHIDUsage_CC_Autofocus = 0x20,kHIDUsage_CC_Shutter = 0x21,};
enum _91A62623CCCEDE51E3EBE5F98C68E482 {kIOHIDStandardTypeANSI = 0x0,kIOHIDStandardTypeISO = 0x1,kIOHIDStandardTypeJIS = 0x2,};
enum _91B6C428B5EFE67D4DB7D4158AAD6D49 {kIO1MonochromePixelFormat = 0x1,kIO2IndexedPixelFormat = 0x2,kIO4IndexedPixelFormat = 0x4,kIO8IndexedPixelFormat = 0x8,kIO16BE555PixelFormat = 0x10,kIO24RGBPixelFormat = 0x18,kIO32ARGBPixelFormat = 0x20,kIO1IndexedGrayPixelFormat = 0x21,kIO2IndexedGrayPixelFormat = 0x22,kIO4IndexedGrayPixelFormat = 0x24,kIO8IndexedGrayPixelFormat = 0x28,};
enum _91BC0966DE283F53F5870B25A144592F {kMessageDeterminingMediaPresence = 0x0,kMessageFoundMedia = 0x1,kMessageMediaTypeDetermined = 0x2,};
enum _91C8CBC9596B99737B1E4D7B95E5C50B {kSSHubPortLinkStateU0 = 0x0,kSSHubPortLinkStateU1 = 0x1,kSSHubPortLinkStateU2 = 0x2,kSSHubPortLinkStateU3 = 0x3,kSSHubPortLinkStateSSDisabled = 0x4,kSSHubPortLinkStateRxDetect = 0x5,kSSHubPortLinkStateSSInactive = 0x6,kSSHubPortLinkStatePolling = 0x7,kSSHubPortLinkStateRecovery = 0x8,kSSHubPortLinkStateHotReset = 0x9,kSSHubPortLinkStateComplianceMode = 0xA,kSSHubPortLinkStateLoopBack = 0xB,kSSHubPortSpeed5Gbps = 0x0,};
enum _930750D61CE30347AC9A0BDA9FE69AE5 {kFirstIOKitNotificationType = 0x64,kIOServicePublishNotificationType = 0x64,kIOServiceMatchedNotificationType = 0x65,kIOServiceTerminatedNotificationType = 0x66,kIOAsyncCompletionNotificationType = 0x96,kIOServiceMessageNotificationType = 0xA0,kLastIOKitNotificationType = 0xC7,kIOKitNoticationTypeMask = 0xFFF,kIOKitNoticationTypeSizeAdjShift = 0x1E,kIOKitNoticationMsgSizeMask = 0x3,};
enum _9352EFE3001226E6242DC3743011B612 {kIOKitDebugUserOptions = 0xC0970FFF,};
enum _9378928DBB116C26883557B0AAC14080 {kHIDUsage_Game_3DGameController = 0x1,kHIDUsage_Game_PinballDevice = 0x2,kHIDUsage_Game_GunDevice = 0x3,kHIDUsage_Game_PointofView = 0x20,kHIDUsage_Game_TurnRightOrLeft = 0x21,kHIDUsage_Game_PitchUpOrDown = 0x22,kHIDUsage_Game_RollRightOrLeft = 0x23,kHIDUsage_Game_MoveRightOrLeft = 0x24,kHIDUsage_Game_MoveForwardOrBackward = 0x25,kHIDUsage_Game_MoveUpOrDown = 0x26,kHIDUsage_Game_LeanRightOrLeft = 0x27,kHIDUsage_Game_LeanForwardOrBackward = 0x28,kHIDUsage_Game_HeightOfPOV = 0x29,kHIDUsage_Game_Flipper = 0x2A,kHIDUsage_Game_SecondaryFlipper = 0x2B,kHIDUsage_Game_Bump = 0x2C,kHIDUsage_Game_NewGame = 0x2D,kHIDUsage_Game_ShootBall = 0x2E,kHIDUsage_Game_Player = 0x2F,kHIDUsage_Game_GunBolt = 0x30,kHIDUsage_Game_GunClip = 0x31,kHIDUsage_Game_Gun = 0x32,kHIDUsage_Game_GunSingleShot = 0x33,kHIDUsage_Game_GunBurst = 0x34,kHIDUsage_Game_GunAutomatic = 0x35,kHIDUsage_Game_GunSafety = 0x36,kHIDUsage_Game_GamepadFireOrJump = 0x37,kHIDUsage_Game_GamepadTrigger = 0x39,kHIDUsage_Game_GamepadFormFitting_Compatibility = 0x39,kHIDUsage_Game_GamepadFormFitting = 0x3A,kHIDUsage_Game_Reserved = 0xFFFF,};
enum _93C7EB3D8A3DF1741E969377ADA2CE52 {kIOACPIDevicePowerStateD0 = 0x0,kIOACPIDevicePowerStateD1 = 0x1,kIOACPIDevicePowerStateD2 = 0x2,kIOACPIDevicePowerStateD3 = 0x3,kIOACPIDevicePowerStateCount = 0x4,};
enum _93C84F6ED22A84497B3E0539980E41EE {kDPMSSyncOn = 0x0,kDPMSSyncStandby = 0x1,kDPMSSyncSuspend = 0x2,kDPMSSyncOff = 0x7,};
enum _93C95DEDF9748F418031601C87CCFB38 {kMediaStateUnlocked = 0x0,kMediaStateLocked = 0x1,};
enum _94033649EC1647473C79AD70FA22E592 {kIOHIDElementFlagsConstantMask = 0x1,kIOHIDElementFlagsVariableMask = 0x2,kIOHIDElementFlagsRelativeMask = 0x4,kIOHIDElementFlagsWrapMask = 0x8,kIOHIDElementFlagsNonLinearMask = 0x10,kIOHIDElementFlagsNoPreferredMask = 0x20,kIOHIDElementFlagsNullStateMask = 0x40,kIOHIDElementFlagsVolativeMask = 0x80,kIOHIDElementFlagsBufferedByteMask = 0x100,};
enum _94198010479624651E10FCA254F159E7 {kOSNotificationMessageID = 0x35,kOSAsyncCompleteMessageID = 0x39,kMaxAsyncArgs = 0x10,};
enum _950DD70E8E486C0D93B6EAD5ED97C5CB {kIONDRVSynchronousIOCommandKind = 0x1,kIONDRVAsynchronousIOCommandKind = 0x2,kIONDRVImmediateIOCommandKind = 0x4,};
enum _9572D4F0F67A33C6C85DEE682B1F9CFB {kHubLocalPowerStatus = 0x1,kHubOverCurrentIndicator = 0x2,kHubLocalPowerStatusChange = 0x1,kHubOverCurrentIndicatorChange = 0x2,};
enum _9606682C7B066F0F1DF68E8674F3562D {kHFSCaseFolding = 0xCF,kHFSBinaryCompare = 0xBC,};
enum _9683E668F29284CD116DB40FF49A5D2C {kUSBCompositeClass = 0x0,kUSBCommClass = 0x2,kUSBCommunicationClass = 0x2,kUSBHubClass = 0x9,kUSBDataClass = 0xA,kUSBPersonalHealthcareClass = 0xF,kUSBBillBoardClass = 0x11,kUSBDiagnosticClass = 0xDC,kUSBWirelessControllerClass = 0xE0,kUSBMiscellaneousClass = 0xEF,kUSBApplicationSpecificClass = 0xFE,kUSBVendorSpecificClass = 0xFF,};
enum _96E1C52BD4911E7AEA7BD9D18F79103A {kIORangeDynamicRangeNotSupported = 0x0,kIORangeDynamicRangeSDR = 0x1,kIORangeDynamicRangeHDR10 = 0x2,kIORangeDynamicRangeDolbyNormalMode = 0x4,kIORangeDynamicRangeDolbyTunnelMode = 0x8,kIORangeDynamicRangeTraditionalGammaHDR = 0x10,};
enum _97DD992807B3275AFA1CFA59D970D720 {kIOUserNotifyMaxMessageSize = 0x40,};
enum _98B991ED415ABF95C51AE5DB162BD430 {kIOPCILatencySnooped = 0x1,kIOPCILatencyUnsnooped = 0x2,};
enum _990FC9240A59718C41DDDDC5701B94B1 {kVideoBusTypeInvalid = 0x0,kVideoBusTypeI2C = 0x1,kVideoBusTypeDisplayPort = 0x2,};
enum _998241A322BC776F08A9AC173CECBC88 {kUSBCompositeSubClass = 0x0,kUSBHubSubClass = 0x0,kUSBAudioControlSubClass = 0x1,kUSBAudioStreamingSubClass = 0x2,kUSBMIDIStreamingSubClass = 0x3,kUSBDFUSubClass = 0x1,kUSBIrDABridgeSubClass = 0x2,kUSBTestMeasurementSubClass = 0x3,kUSBMassStorageRBCSubClass = 0x1,kUSBMassStorageATAPISubClass = 0x2,kUSBMassStorageQIC157SubClass = 0x3,kUSBMassStorageUFISubClass = 0x4,kUSBMassStorageSFF8070iSubClass = 0x5,kUSBMassStorageSCSISubClass = 0x6,kUSBHIDBootInterfaceSubClass = 0x1,kUSBCommDirectLineSubClass = 0x1,kUSBCommAbstractSubClass = 0x2,kUSBCommTelephoneSubClass = 0x3,kUSBCommMultiChannelSubClass = 0x4,kUSBCommCAPISubClass = 0x5,kUSBCommEthernetNetworkingSubClass = 0x6,kUSBATMNetworkingSubClass = 0x7,kUSBReprogrammableDiagnosticSubClass = 0x1,kUSBRFControllerSubClass = 0x1,kUSBCommonClassSubClass = 0x2,kUSBVideoControlSubClass = 0x1,kUSBVideoStreamingSubClass = 0x2,kUSBVideoInterfaceCollectionSubClass = 0x3,};
enum _9A444FD3B16E94B926FA0AA6E95898FD {bATAPIuseDMA = 0x0,mATAPIuseDMA = 0x1,};
enum _9A4765F1F55A5674EE0FA8182A2F6477 {MBUF_EXT = 0x1,MBUF_PKTHDR = 0x2,MBUF_EOR = 0x4,MBUF_LOOP = 0x40,MBUF_BCAST = 0x100,MBUF_MCAST = 0x200,MBUF_FRAG = 0x400,MBUF_FIRSTFRAG = 0x800,MBUF_LASTFRAG = 0x1000,MBUF_PROMISC = 0x2000,MBUF_HASFCS = 0x4000,};
struct _9A571A51604F14638CF2B975761C43D6 {unsigned char *_bm34To35SampleTable;unsigned char *_bm35To34SampleTable;unsigned int *_bm256To38SampleTable;unsigned char *_bm38To256SampleTable;};
enum _9A7C6E314A6F478EA8928D142EC5A38E {kIO16LE555PixelFormat = 0x4C353535,kIO16LE5551PixelFormat = 0x35353531,kIO16BE565PixelFormat = 0x42353635,kIO16LE565PixelFormat = 0x4C353635,kIO24BGRPixelFormat = 0x32344247,kIO32BGRAPixelFormat = 0x42475241,kIO32ABGRPixelFormat = 0x41424752,kIO32RGBAPixelFormat = 0x52474241,kIOYUVSPixelFormat = 0x79757673,kIOYUVUPixelFormat = 0x79757675,kIOYVU9PixelFormat = 0x59565539,kIOYUV411PixelFormat = 0x59343131,kIOYVYU422PixelFormat = 0x59565955,kIOUYVY422PixelFormat = 0x55595659,kIOYUV211PixelFormat = 0x59323131,kIO2vuyPixelFormat = 0x32767579,};
enum _9A88AE836DF926138931245EE5613826 {kVideoReplyMicroSecDelayBit = 0x0,kVideoReplyMicroSecDelayMask = 0x1,kVideoUsageAddrSubAddrBit = 0x1,kVideoUsageAddrSubAddrMask = 0x2,};
enum _9AC19380D50E1D622B4F4F53486173CF {kIOAudioSMPTETimeValid = 0x1,kIOAudioSMPTETimeRunning = 0x2,};
enum _9AFE1600DBA4C98971B0D847740132E8 {kIOPMNextHigherState = 0x1,kIOPMHighestState = 0x2,kIOPMNextLowerState = 0x3,kIOPMLowestState = 0x4,};
enum _9B05058640DB0B07AE93E7AA209DABF7 {kIOAudioOutputPortSubTypeInternalSpeaker = 0x6973706B,kIOAudioOutputPortSubTypeExternalSpeaker = 0x6573706B,kIOAudioOutputPortSubTypeHeadphones = 0x6864706E,kIOAudioOutputPortSubTypeLine = 0x6C696E65,kIOAudioOutputPortSubTypeSPDIF = 0x73706466,kIOAudioInputPortSubTypeInternalMicrophone = 0x696D6963,kIOAudioInputPortSubTypeExternalMicrophone = 0x656D6963,kIOAudioInputPortSubTypeCD = 0x63642020,kIOAudioInputPortSubTypeLine = 0x6C696E65,kIOAudioInputPortSubTypeSPDIF = 0x73706466,};
enum _9B50E32BE6ED5C59F2E77D80D2C3AF00 {kINQUIRY_Byte6_Offset = 0x6,kINQUIRY_Byte6_ADDR16_Bit = 0x0,kINQUIRY_Byte6_MCHNGR_Bit = 0x3,kINQUIRY_Byte6_MULTIP_Bit = 0x4,kINQUIRY_Byte6_VS_Bit = 0x5,kINQUIRY_Byte6_ENCSERV_Bit = 0x6,kINQUIRY_Byte6_BQUE_Bit = 0x7,kINQUIRY_Byte6_ADDR16_Mask = 0x1,kINQUIRY_Byte6_MCHNGR_Mask = 0x8,kINQUIRY_Byte6_MULTIP_Mask = 0x10,kINQUIRY_Byte6_VS_Mask = 0x20,kINQUIRY_Byte6_ENCSERV_Mask = 0x40,kINQUIRY_Byte6_BQUE_Mask = 0x80,};
enum _9B745C094C0C2E0574ACDDC98B77B5ED {kHFSPlusExtentKeyMaximumLength = 0xA,kHFSExtentKeyMaximumLength = 0x7,kHFSPlusCatalogKeyMaximumLength = 0x204,kHFSPlusCatalogKeyMinimumLength = 0x6,kHFSCatalogKeyMaximumLength = 0x25,kHFSCatalogKeyMinimumLength = 0x6,kHFSPlusCatalogMinNodeSize = 0x1000,kHFSPlusExtentMinNodeSize = 0x200,kHFSPlusAttrMinNodeSize = 0x1000,};
enum _9C19F3E2DFAE2A965639A4F67B3FD3EE {kIOMediumIEEE80211 = 0x80,kIOMediumIEEE80211Auto = 0x80,kIOMediumIEEE80211Manual = 0x81,kIOMediumIEEE80211None = 0x82,kIOMediumIEEE80211FH1 = 0x83,kIOMediumIEEE80211FH2 = 0x84,kIOMediumIEEE80211DS2 = 0x85,kIOMediumIEEE80211DS5 = 0x86,kIOMediumIEEE80211DS11 = 0x87,kIOMediumIEEE80211DS1 = 0x88,kIOMediumIEEE80211OptionAdhoc = 0x100,};
enum _9C224DDD729A9891852391B37C6C42FF {kClearDeviceFeature = 0x100,kClearInterfaceFeature = 0x101,kClearEndpointFeature = 0x102,kGetConfiguration = 0x880,kGetDescriptor = 0x680,kGetInterface = 0xA81,kGetDeviceStatus = 0x80,kGetInterfaceStatus = 0x81,kGetEndpointStatus = 0x82,kSetAddress = 0x500,kSetConfiguration = 0x900,kSetDescriptor = 0x700,kSetDeviceFeature = 0x300,kSetInterfaceFeature = 0x301,kSetEndpointFeature = 0x302,kSetInterface = 0xB01,kSyncFrame = 0xC82,};
enum _9CCD2F92C54C6D019863B8DEA4DE6859 {kFWSBP2DontSynchronizeMgmtAgent = 0x1,kFWSBP2ExclusiveLogin = 0x20,};
enum _9D0845D0866F8BC5C55F9CF613AFA853 {kIOUSBMessageControllerDoGPIOReset = 0x1,kIOUSBMessageControllerDoPrintACPI = 0x2,kIOUSBMessageControllerDumpQueues = 0x3,kIOUSBMessageControllerDumpQueuesMask = 0xFFFF,kIOUSBMessageControllerDumpQueuesOptionsMask = 0xFFFF0000,kIOUSBMessageControllerDumpQueuesPrintSkippedOptionMask = 0x10000,kIOUSBMessageControllerDumpQueuesPrintTDsMask = 0x20000,kIOUSBMessageControllerDumpQueuesPrintDoneQueue = 0x40000,};
struct _9D11F6C6C0F86C3D22885A5E28854F4A {unsigned long long eph_x86_power_state : 8;unsigned long long eph_x86_efi_boot_state : 8;unsigned long long eph_x86_system_state : 8;unsigned long long eph_x86_unused_bits : 40;};
enum _9DFA11BB9109E34C733FC9218876AC2C {OUTPUT_NULL = 0x100,INPUT_NULL = 0x101,};
enum _9E5CCD54E1FE89397C1FCC08D4B40844 {kPEOptionKey = 0x3A,kPECommandKey = 0x37,kPEControlKey = 0x36,kPEShiftKey = 0x38,};
enum _9FC395EE457C32E9545CED31A69A3282 {kUSBDeviceSpeedLow = 0x0,kUSBDeviceSpeedFull = 0x1,kUSBDeviceSpeedHigh = 0x2,kUSBDeviceSpeedSuper = 0x3,kUSBDeviceSpeedSuperPlus = 0x4,};
enum _A0049B8B8772E5ABC8228EE4BF4EA678 {kAVPowerOff = 0x0,kAVPowerStandby = 0x1,kAVPowerSuspend = 0x2,kAVPowerOn = 0x3,kHardwareSleep = 0x80,kHardwareWake = 0x81,kHardwareWakeFromSuspend = 0x82,kHardwareWakeToDoze = 0x83,kHardwareWakeToDozeFromSuspend = 0x84,kHardwarePark = 0x85,kHardwareDrive = 0x86,};
enum _A01C1507AD422280711A3963C0966833 {kSetHubDepth = 0xC20,kGetPortErrorCount = 0xDA3,};
enum _A094B3AC1B70BFB67B0C06B636E23CEF {kFWSBP2QueryLogins = 0x1,kFWSBP2AbortTask = 0xB,kFWSBP2AbortTaskSet = 0xC,kFWSBP2LogicalUnitReset = 0xE,kFWSBP2TargetReset = 0xF,};
enum _A0D2E72A6A284A93257C5F09051FBB41 {developStage = 0x20,alphaStage = 0x40,betaStage = 0x60,finalStage = 0x80,};
enum _A167A1C8211AA1B41680079E436718DC {kIORangeSupportsSeparateSyncs = 0x1,kIORangeSupportsSyncOnGreen = 0x2,kIORangeSupportsCompositeSync = 0x4,kIORangeSupportsVSyncSerration = 0x8,};
enum _A1F2F17C0EA5E8180CB2DE019B64E42F {kIONetworkEventTypeDLIL = 0xFF000001,kIONetworkEventTypeLinkUp = 0xFF000002,kIONetworkEventTypeLinkDown = 0xFF000003,kIONetworkEventWakeOnLANSupportChanged = 0xFF000004,kIONetworkEventTypeLinkSpeedChange = 0xFF000005,};
enum _A243A1FBC40B50DF99FD5E6DE612321D {kOSAsyncRef64Count = 0x8,kOSAsyncRef64Size = 0x40,};
enum _A2E3D6EE768247F657BAC1BB2A041C97 {kIOAudioTimeStampSampleHostTimeValid = 0x3,};
enum _A556054A543E18EB23ACC51A3B1BE4C8 {kOFVariableTypeBoolean = 0x1,kOFVariableTypeNumber = 0x2,kOFVariableTypeString = 0x3,kOFVariableTypeData = 0x4,};
enum _A6D7B89D35064A53B99AF81407A9C402 {kIODefaultMemoryType = 0x0,};
enum _A6F6D4833A80382A407D22E23A1F9D24 {kIODPEventStart = 0x1,kIODPEventIdle = 0x2,kIODPEventForceRetrain = 0x3,kIODPEventRemoteControlCommandPending = 0x100,kIODPEventAutomatedTestRequest = 0x101,kIODPEventContentProtection = 0x102,kIODPEventMCCS = 0x103,kIODPEventSinkSpecific = 0x104,};
enum _A7DF3003DBC31B4EF7F56C32DF8B48BE {kSCSIPort_NotificationStatusChange = 0x68000001,};
enum _A7F251DBB9D9B36A2D4B0A02ADB75A33 {kIOBlitWaitContext = 0x0,kIOBlitWaitAll2D = 0x1,kIOBlitWaitGlobal = 0x1,kIOBlitWaitAll = 0x2,kIOBlitWaitCheck = 0x80,kIOBlitFlushWithSwap = 0x10000,};
enum _A81390A20948313EE5407F1224058B71 {kDisplayModeValidFlag = 0x1,kDisplayModeSafeFlag = 0x2,kDisplayModeDefaultFlag = 0x4,};
enum _A84172E88431A5F0EE53775A9B3A66E7 {kDisplayVendorIDUnknown = 0x756E6B6E,kDisplayProductIDGeneric = 0x717,};
enum _A8D932376866BCC4C7513924394B8486 {kDebugTypeNone = 0x0,kDebugTypeDisplay = 0x1,kDebugTypeSerial = 0x2,};
enum _A97832C06DA35155D18284342EBCB5B1 {kBluetoothVoiceSettingInputDataFormatMask = 0xC0,kBluetoothVoiceSettingInputDataFormat1sComplement = 0x0,kBluetoothVoiceSettingInputDataFormat2sComplement = 0x40,kBluetoothVoiceSettingInputDataFormatSignMagnitude = 0x80,kBluetoothVoiceSettingInputDataFormatUnsigned = 0xC0,};
enum _A9860B4C74FFDF6587DAA0752BB995C8 {kUSBBillboardVConn1Watt = 0x0,kUSBBillboardVConn1P5Watt = 0x1,kUSBBillboardVConn2Watt = 0x2,kUSBBillboardVConn3Watt = 0x3,kUSBBillboardVConn4Watt = 0x4,kUSBBillboardVConn5Watt = 0x5,kUSBBillboardVConn6Watt = 0x6,kUSBBillboardVConnReserved = 0x7,};
enum _A99B122533FED9A808D6A127D48F262C {kIOFWDisablePhysicalAccess = 0x1,kIOFWDisableAllPhysicalAccess = 0x2,kIOFWEnableRetryOnAckD = 0x4,kIOFWLimitAsyncPacketSize = 0x8,kIOFWDisablePhyOnSleep = 0x10,kIOFWMustBeRoot = 0x20,kIOFWMustNotBeRoot = 0x40,kIOFWMustHaveGap63 = 0x80,};
enum _A9FC3FCC7A03AEB5987A434903601D5F {kPowerStateNeedsRefresh = 0x0,kPowerStateSleepAwareBit = 0x1,kPowerStateSleepForbiddenBit = 0x2,kPowerStateSleepCanPowerOffBit = 0x3,kPowerStateSleepNoDPMSBit = 0x4,kPowerStateSleepWaketoDozeBit = 0x5,kPowerStateSleepWakeNeedsProbeBit = 0x6,kPowerStateNeedsRefreshMask = 0x1,kPowerStateSleepAwareMask = 0x2,kPowerStateSleepForbiddenMask = 0x4,kPowerStateSleepCanPowerOffMask = 0x8,kPowerStateSleepNoDPMSMask = 0x10,kPowerStateSleepWaketoDozeMask = 0x20,kPowerStateSleepWakeNeedsProbeMask = 0x40,kPowerStateSupportsReducedPower1Bit = 0xA,kPowerStateSupportsReducedPower2Bit = 0xB,kPowerStateSupportsReducedPower3Bit = 0xC,kPowerStateSupportsReducedPower1BitMask = 0x400,kPowerStateSupportsReducedPower2BitMask = 0x800,kPowerStateSupportsReducedPower3BitMask = 0x1000,};
enum _AA26547FC506D36E9140C4D8F8CF50F5 {nrLockedErr = 0xFFFFF618,nrNotEnoughMemoryErr = 0xFFFFF617,nrInvalidNodeErr = 0xFFFFF616,nrNotFoundErr = 0xFFFFF615,nrNotCreatedErr = 0xFFFFF614,nrNameErr = 0xFFFFF613,nrNotSlotDeviceErr = 0xFFFFF612,nrDataTruncatedErr = 0xFFFFF611,nrPowerErr = 0xFFFFF610,nrPowerSwitchAbortErr = 0xFFFFF60F,nrTypeMismatchErr = 0xFFFFF60E,nrNotModifiedErr = 0xFFFFF60D,nrOverrunErr = 0xFFFFF60C,nrResultCodeBase = 0xFFFFF60B,nrPathNotFound = 0xFFFFF60A,nrPathBufferTooSmall = 0xFFFFF609,nrInvalidEntryIterationOp = 0xFFFFF608,nrPropertyAlreadyExists = 0xFFFFF607,nrIterationDone = 0xFFFFF606,nrExitedIteratorScope = 0xFFFFF605,nrTransactionAborted = 0xFFFFF604,gestaltUndefSelectorErr = 0xFFFFEA51,};
enum _AA2DAAC107A4A763C7EA8CDFEA8D0B96 {kIOPMSupportedOnAC = 0x1,kIOPMSupportedOnBatt = 0x2,kIOPMSupportedOnUPS = 0x4,};
enum _AAAAB72325C54F6AE15DFB7FED3F0C44 {FFT_FORWARD = 0x1,FFT_INVERSE = 0xFFFFFFFF,};
enum _AAB997ACF7A909B44646F9795CC3BAE9 {kIOHIDOptionsTypeNone = 0x0,kIOHIDOptionsTypeSeizeDevice = 0x1,};
enum _AB1CD22DFBDC467D5B586976C4924B47 {kBluetoothEncryptionEnableOff = 0x0,kBluetoothEncryptionEnableOn = 0x1,kBluetoothEncryptionEnableBREDRE0 = 0x1,kBluetoothEncryptionEnableLEAESCCM = 0x1,kBluetoothEncryptionEnableBREDRAESCCM = 0x2,};
enum _AC55B7AAE1CD625587576ED35A7B2400 {kUSBOut = 0x0,kUSBIn = 0x1,kUSBNone = 0x2,kUSBAnyDirn = 0x3,};
enum _AC56BF8E2878CAE8051EDE962BBED257 {MBUF_CSUM_DID_IP = 0x100,MBUF_CSUM_IP_GOOD = 0x200,MBUF_CSUM_DID_DATA = 0x400,MBUF_CSUM_PSEUDO_HDR = 0x800,};
enum _AC95BA666936F59CF4BB6CF3E7467C79 {EXTERNAL_UNDEFINED = 0x600,EXTERNAL_ANALOG_CONNECTOR = 0x601,EXTERNAL_DIGITAL_AUDIO_INTERFACE = 0x602,EXTERNAL_LINE_CONNECTOR = 0x603,EXTERNAL_LEGACY_AUDIO_CONNECTOR = 0x604,EXTERNAL_SPDIF_INTERFACE = 0x605,EXTERNAL_1394_DA_STREAM = 0x606,EXTERNAL_1394_DV_STREAM_SOUNDTRACK = 0x607,EXTERNAL_ADAT = 0x608,EXTERNAL_TDIF = 0x609,EXTERNAL_MADI = 0x60A,};
enum _AD0FF80A98149C05FE7DFA0E3E56B300 {kHIDDispatchOptionKeyboardNoRepeat = 0x1,};
enum _ADD59A46699E74925A57327CD1894798 {kUSBFunctionRemoteWakeCapableBit = 0x0,kUSBFunctionRemoteWakeupBit = 0x1,kUSBLowPowerSuspendStateBit = 0x0,kUSBFunctionRemoteWakeEnableBit = 0x1,};
enum _ADF009FC30AC700981ECCC8057D496F2 {kSENSE_FILEMARK_Set = 0x80,kSENSE_FILEMARK_Not_Set = 0x0,kSENSE_FILEMARK_Mask = 0x80,};
enum _AE0EBC714545EB564B9D7CEA3DFA1B8D {kSetCLUTByValue = 0x1,kSetCLUTImmediately = 0x2,kSetCLUTWithLuminance = 0x4,};
enum _AE3411F53B1779396C569C5D4E1FE5E7 {kConvolved = 0x0,kLiveVideoPassThru = 0x1,kConvolvedMask = 0x1,kLiveVideoPassThruMask = 0x2,};
enum _AE51F87785598675CCA0B5805F299043 {kChipSetTypePowerSurge = 0x0,kChipSetTypePowerStar = 0x1,kChipSetTypeGossamer = 0x2,kChipSetTypePowerExpress = 0x3,kChipSetTypeCore99 = 0x4,kChipSetTypeCore2001 = 0x5,};
enum _AEA446386F80E69CD555C88252DAA30D {cscReset = 0x0,cscKillIO = 0x1,cscSetMode = 0x2,cscSetEntries = 0x3,cscSetGamma = 0x4,cscGrayPage = 0x5,cscGrayScreen = 0x5,cscSetGray = 0x6,cscSetInterrupt = 0x7,cscDirectSetEntries = 0x8,cscSetDefaultMode = 0x9,cscSwitchMode = 0xA,cscSetSync = 0xB,cscSavePreferredConfiguration = 0x10,cscSetHardwareCursor = 0x16,cscDrawHardwareCursor = 0x17,cscSetConvolution = 0x18,cscSetPowerState = 0x19,cscPrivateControlCall = 0x1A,cscSetMultiConnect = 0x1C,cscSetClutBehavior = 0x1D,cscSetDetailedTiming = 0x1F,cscDoCommunication = 0x21,cscProbeConnection = 0x22,cscSetScaler = 0x24,cscSetMirror = 0x25,cscSetFeatureConfiguration = 0x26,cscUnusedCall = 0x7F,};
enum _AECF7D8A283837C96FB0143828D38844 {kIOAsyncReservedIndex = 0x0,kIOAsyncReservedCount = 0x1,kIOAsyncCalloutFuncIndex = 0x1,kIOAsyncCalloutRefconIndex = 0x2,kIOAsyncCalloutCount = 0x3,kIOMatchingCalloutFuncIndex = 0x1,kIOMatchingCalloutRefconIndex = 0x2,kIOMatchingCalloutCount = 0x3,kIOInterestCalloutFuncIndex = 0x1,kIOInterestCalloutRefconIndex = 0x2,kIOInterestCalloutServiceIndex = 0x3,kIOInterestCalloutCount = 0x4,};
enum _AF499B72CB0792CE43071EB345192DEE {kHIDDispatchOptionPointerNoAcceleration = 0x1,kHIDDispatchOptionPointerDisplayIntegrated = 0x2,kHIDDispatchOptionPointerAffixToScreen = 0x2,kHIDDispatchOptionPointerAbsolutToRelative = 0x4,};
enum _AF802D48E7B7A5F039108068A2CB3CD8 {kMirrorCanMirrorMask = 0x1,kMirrorAreMirroredMask = 0x2,kMirrorUnclippedMirrorMask = 0x4,kMirrorHAlignCenterMirrorMask = 0x8,kMirrorVAlignCenterMirrorMask = 0x10,kMirrorCanChangePixelFormatMask = 0x20,kMirrorCanChangeTimingMask = 0x40,kMirrorClippedMirrorMask = 0x80,};
enum _AF981EC43CB98EEE983D0FE0F353C10E {kIODTInterruptShared = 0x1,};
enum _AFEBF6D8F178E899D26BEF9A833601E5 {kVideoDefaultBus = 0x0,};
enum _AFF65E8320D8287FC806117C8F352B7D {kDiscStatusEmpty = 0x0,kDiscStatusIncomplete = 0x1,kDiscStatusComplete = 0x2,kDiscStatusOther = 0x3,kDiscStatusMask = 0x3,kDiscStatusErasableMask = 0x10,};
enum _AFF9DE6CE7630C55F74811F3EC71BC25 {kBTLeafNode = 0xFFFFFFFF,kBTIndexNode = 0x0,kBTHeaderNode = 0x1,kBTMapNode = 0x2,};
enum _AFFE4E282B31213D4274B39ABE8E8A7B {dot3ChipSetNational8390 = 0x1,dot3ChipSetNationalSonic = 0x2,};
enum _B00BA3377593543BAFC5D777404125D0 {kUSBDeviceCapabilityWirelessUSB = 0x1,kUSBDeviceCapabilityUSB20Extension = 0x2,kUSBDeviceCapabilitySuperSpeedUSB = 0x3,kUSBDeviceCapabilityContainerID = 0x4,kUSBDeviceCapabilityBillboard = 0xD,kUSBDeviceCapabilityBillboardAltMode = 0xF,};
enum _B01C3669C98B8979EC24BC301DF3887F {kIOGraphicsEngineContextVersion = 0x1,};
enum _B0563F7428AFC5FFBF8320A3067C1C19 {kIOGraphicsEngineContext = 0x64,};
enum _B056D7209126E609EBD532040C00DD12 {kIOAudioDeviceTransportTypeBuiltIn = 0x626C746E,kIOAudioDeviceTransportTypePCI = 0x70636920,kIOAudioDeviceTransportTypeUSB = 0x75736220,kIOAudioDeviceTransportTypeFireWire = 0x31333934,kIOAudioDeviceTransportTypeNetwork = 0x6E74776B,kIOAudioDeviceTransportTypeWireless = 0x77726C73,kIOAudioDeviceTransportTypeOther = 0x6F746872,kIOAudioDeviceTransportTypeBluetooth = 0x626C7565,kIOAudioDeviceTransportTypeVirtual = 0x76697274,kIOAudioDeviceTransportTypeDisplayPort = 0x64707274,kIOAudioDeviceTransportTypeHdmi = 0x68646D69,kIOAudioDeviceTransportTypeAVB = 0x65617662,kIOAudioDeviceTransportTypeThunderbolt = 0x7468756E,};
enum _B1B1BBB44003BA63DE75D63B8ACD1B61 {kIODefaultProbeScore = 0x0,};
enum _B20BDD95A4840251C8F5D33ACE876BE5 {kBluetoothLETXTimeMin = 0x148,kBluetoothLETXTimeDefault = 0x148,kBluetoothLETXTimeMax = 0x848,kBluetoothLETXOctetsMin = 0x1B,kBluetoothLETXOctetsDefault = 0x1B,kBluetoothLETXOctetsMax = 0xFB,};
enum _B3413AC3351D7CD97476D02B26B42C3C {kHardLinkFileType = 0x686C6E6B,kHFSPlusCreator = 0x6866732B,};
enum _B39AC0538B415E9CD540D6E89F51CD7E {kIOFBBitRateRBR = 0x6,kIOFBBitRateHBR = 0xA,kIOFBBitRateHBR2 = 0x14,};
enum _B51C3CAC7E366E6F721B37C8886EE8EA {kIOPacketBufferAlign1 = 0x1,kIOPacketBufferAlign2 = 0x2,kIOPacketBufferAlign4 = 0x4,kIOPacketBufferAlign8 = 0x8,kIOPacketBufferAlign16 = 0x10,kIOPacketBufferAlign32 = 0x20,};
enum _B5A7A61F0943EB7C5194459B1B4A96F6 {kUSBHostVendorSpecificClass = 0xFF,kUSBHostHubClass = 0x9,kUSBHostMaxDevices = 0x80,kUSBHostMaxPipes = 0x20,kUSBHostMaxCountFullSpeedIsochronous = 0x3FF,kUSBHostVendorIDAppleComputer = 0x5AC,};
enum _B5CEDDA1597C19AE804C970F37D6D42A {kModifier_DidPerformModifiy = 0x1,kModifier_DidKeyUp = 0x2,kModifier_Locked = 0x4,};
enum _B64BBEA7F39B6FE4DF5B9B7067494FD8 {kIOUSBFindInterfaceDontCare = 0xFFFF,};
enum _B6AF379D3FAACC5BBA1B4FA5105A8B44 {kUSBStandard = 0x0,kUSBClass = 0x1,kUSBVendor = 0x2,};
enum _B73F5E2C93BFC62F9A055EB319ECE218 {kIOAccelVolatileSurface = 0x1,};
enum _B7A69D7E4906BCF1AB780AC9CF28C223 {kBluetoothDeviceClassMajorMiscellaneous = 0x0,kBluetoothDeviceClassMajorComputer = 0x1,kBluetoothDeviceClassMajorPhone = 0x2,kBluetoothDeviceClassMajorLANAccessPoint = 0x3,kBluetoothDeviceClassMajorAudio = 0x4,kBluetoothDeviceClassMajorPeripheral = 0x5,kBluetoothDeviceClassMajorImaging = 0x6,kBluetoothDeviceClassMajorWearable = 0x7,kBluetoothDeviceClassMajorToy = 0x8,kBluetoothDeviceClassMajorHealth = 0x9,kBluetoothDeviceClassMajorUnclassified = 0x1F,kBluetoothDeviceClassMajorAny = 0x2A2A2A2A,kBluetoothDeviceClassMajorNone = 0x6E6F6E65,kBluetoothDeviceClassMajorEnd = 0x6E6F6E66,};
enum _B7F23095B526402909CE2BF33C9CF3AA {OSUnknownByteOrder = 0x0,OSLittleEndian = 0x1,OSBigEndian = 0x2,};
enum _B81578F76D45A738B313DAD8B3DF50BD {durationMicrosecond = 0xFFFFFFFF,durationMillisecond = 0x1,durationSecond = 0x3E8,durationMinute = 0xEA60,durationHour = 0x36EE80,durationDay = 0x5265C00,durationNoWait = 0x0,durationForever = 0x7FFFFFFF,};
enum _B841142629BC709DDD9480108BAE5487 {BLOCK_FIELD_IS_OBJECT = 0x3,BLOCK_FIELD_IS_BLOCK = 0x7,BLOCK_FIELD_IS_BYREF = 0x8,BLOCK_FIELD_IS_WEAK = 0x10,BLOCK_BYREF_CALLER = 0x80,};
enum _B898797D9805B8D1FECA814160C57436 {kIOMemoryPurgeableKeepCurrent = 0x1,kIOMemoryPurgeableNonVolatile = 0x2,kIOMemoryPurgeableVolatile = 0x3,kIOMemoryPurgeableEmpty = 0x4,kIOMemoryPurgeableVolatileGroup0 = 0x0,kIOMemoryPurgeableVolatileGroup1 = 0x100,kIOMemoryPurgeableVolatileGroup2 = 0x200,kIOMemoryPurgeableVolatileGroup3 = 0x300,kIOMemoryPurgeableVolatileGroup4 = 0x400,kIOMemoryPurgeableVolatileGroup5 = 0x500,kIOMemoryPurgeableVolatileGroup6 = 0x600,kIOMemoryPurgeableVolatileGroup7 = 0x700,kIOMemoryPurgeableVolatileBehaviorFifo = 0x0,kIOMemoryPurgeableVolatileBehaviorLifo = 0x40,kIOMemoryPurgeableVolatileOrderingObsolete = 0x20,kIOMemoryPurgeableVolatileOrderingNormal = 0x0,kIOMemoryPurgeableFaultOnAccess = 0x2000,};
enum _B8B0CB9074ED9ED743D1A3F5E749870C {kState_Disabled_Flag = 0x1,kState_ShiftActivates_Flag = 0x2,kState_On = 0x4,kState_On_ModifiersDown = 0x8,kState_Mask = 0xFF,};
enum _B8E2466840C8C75A3E2170B27AA94E3B {kSenseDefaultSize = 0x12,};
enum _B9076B6603A650A08AEDC1D881AE4E1D {kUSBDFUAttributesMask = 0x7,kUSBDFUCanDownloadBit = 0x0,kUSBDFUCanUploadBit = 0x1,kUSBDFUManifestationTolerantBit = 0x2,};
enum _B90EFB487CFD125445A566EEB40089E8 {kUSB3LPMMaxU1SEL = 0xFF,kUSB3LPMMaxU1PEL = 0xFF,kUSB3LPMMaxU2SEL = 0xFFFF,kUSB3LPMMaxU2PEL = 0xFFFF,kUSB3LPMMaxU1Timeout = 0x7F,kUSB3LPMU1Disabled = 0x0,kUSB3LPMU1AcceptOnly = 0xFF,kUSB3LPMMaxU2Timeout = 0xFE00,kUSB3LPMU2Disabled = 0x0,kUSB3LPMU2AcceptOnly = 0xFF00,kUSB3LPMMaxT3SEL = 0x64,kUSB3LPMMaxHostSchDelay = 0x3E8,kUSB3LPMExtraDeviceEL = 0xFA0,kUSB2LPMMaxL1Timeout = 0xFF00,};
enum _BA6E06B7CE46E4A20FEED48D29DBCA5D {kIOMemoryPhysicallyContiguous = 0x10,kIOMemoryPageable = 0x20,kIOMemoryPurgeable = 0x40,kIOMemoryHostPhysicallyContiguous = 0x80,kIOMemorySharingTypeMask = 0xF0000,kIOMemoryUnshared = 0x0,kIOMemoryKernelUserShared = 0x10000,kIOBufferDescriptorMemoryFlags = 0xB00807,};
enum _BA76CA72E976212F65660C694E8E85C5 {kIOPMSystemCapabilityWillChange = 0x1,kIOPMSystemCapabilityDidChange = 0x2,};
enum _BB9E28E24C852B46D193CA31FF5B365B {kIOUSBInterfaceOpenAlt = 0x10000,kIOUSBInterfaceOpenAlternateInterfaceBit = 0x10,kUSBOptionBitOpenExclusivelyBit = 0x11,kIOUSBInterfaceOpenAlternateInterfaceMask = 0x10000,kUSBOptionBitOpenExclusivelyMask = 0x20000,};
enum _BBA8A171448F93A1D8A5F86CAD7E0C71 {kIOPMNoErr = 0x0,kIOPMAckImplied = 0x0,kIOPMWillAckLater = 0x1,kIOPMBadSpecification = 0x4,kIOPMNoSuchState = 0x5,kIOPMCannotRaisePower = 0x6,kIOPMParameterError = 0x7,kIOPMNotYetInitialized = 0x8,IOPMNoErr = 0x0,IOPMAckImplied = 0x0,IOPMWillAckLater = 0x1,IOPMBadSpecification = 0x4,IOPMNoSuchState = 0x5,IOPMCannotRaisePower = 0x6,IOPMParameterError = 0x7,IOPMNotYetInitialized = 0x8,};
enum _BC0A5F7E34035174C02B74D8976C62EF {THREAD_CALL_OPTIONS_ONCE = 0x1,};
enum _BC339D02FAAC027E6F79D74FDBC1FC5B {kUSBHubRqSetHubDepth = 0xC,kUSBHubRqGetPortErrorCount = 0xD,};
enum _BC3CF2FE4AB95905133A2A456CAD197F {kUSBHostConnectionSpeedLow = 0x0,kUSBHostConnectionSpeedFull = 0x1,kUSBHostConnectionSpeedHigh = 0x2,kUSBHostConnectionSpeedSuper = 0x3,kUSBHostConnectionSpeedSuperPlus = 0x4,kUSBHostConnectionSpeedCount = 0x5,};
enum _BC6939CD585CD55E8224312C32AFD7D6 {kNdrvTypeIsGeneric = 0x67656E72,kNdrvTypeIsVideo = 0x7669646F,kNdrvTypeIsBlockStorage = 0x626C6F6B,kNdrvTypeIsNetworking = 0x6E657477,kNdrvTypeIsSerial = 0x7365726C,kNdrvTypeIsParallel = 0x7061726C,kNdrvTypeIsSound = 0x736F6E64,kNdrvTypeIsBusBridge = 0x62726467,};
enum _BCAA7E8F1D30C0C4FDCCFED4719C3BC3 {kIOFBLinkScramblerNormal = 0x0,kIOFBLinkScramblerAlternate = 0x1,};
enum _BCBA45A32BF7BA309458AD866E871D88 {kBluetoothL2CAPInfoTypeMaxConnectionlessMTUSize = 0x1,};
enum _BCDAA40244923E60C5DEEC4B209708EF {kIOFBShmemVersionMask = 0xFF,kIOFBTenPtOneShmemVersion = 0x2,kIOFBTenPtTwoShmemVersion = 0x3,kIOFBCurrentShmemVersion = 0x2,kIOFBShmemCursorNumFramesMask = 0xFF0000,kIOFBShmemCursorNumFramesShift = 0x10,kIOFBCursorMemory = 0x64,};
enum _BD57A1A1630FC65AABCCC70F5D3AD427 {kIOReportEnable = 0x1,kIOReportGetDimensions = 0x2,kIOReportDisable = 0x0,kIOReportNotifyHubOnChange = 0x10,kIOReportTraceOnChange = 0x20,};
enum _BE12D2788138261EFDB12B2CD15211B3 {kIOBlitUnlockWithSwap = 0x80000000,};
enum _BEAD6E6FF72CC6AD963E6E89BBCA8422 {kIORangeBitsPerColorComponentNotSupported = 0x0,kIORangeBitsPerColorComponent6 = 0x1,kIORangeBitsPerColorComponent8 = 0x2,kIORangeBitsPerColorComponent10 = 0x4,kIORangeBitsPerColorComponent12 = 0x8,kIORangeBitsPerColorComponent16 = 0x10,};
enum _BFE68677536012F7E25E7329F32425D9 {kIOHIDOpenedByEventSystem = 0x10000,kIOHIDOpenedByFastPathClient = 0x20000,};
enum _C028BF1EFF9AF7A8F880FD2ECB171C3B {kSOFTRESET = 0x8,kPACKET = 0xA0,kID_DRIVE = 0xA1,};
enum _C04198B35113D434B4D0DDA754A35685 {paramErr = 0xFFFFFFCE,noHardwareErr = 0xFFFFFF38,notEnoughHardwareErr = 0xFFFFFF37,userCanceledErr = 0xFFFFFF80,qErr = 0xFFFFFFFF,vTypErr = 0xFFFFFFFE,corErr = 0xFFFFFFFD,unimpErr = 0xFFFFFFFC,SlpTypeErr = 0xFFFFFFFB,seNoDB = 0xFFFFFFF8,controlErr = 0xFFFFFFEF,statusErr = 0xFFFFFFEE,readErr = 0xFFFFFFED,writErr = 0xFFFFFFEC,badUnitErr = 0xFFFFFFEB,unitEmptyErr = 0xFFFFFFEA,openErr = 0xFFFFFFE9,closErr = 0xFFFFFFE8,dRemovErr = 0xFFFFFFE7,dInstErr = 0xFFFFFFE6,badCksmErr = 0xFFFFFFBB,};
enum _C15273C77F46877BD745AEF8DFCB8FA1 {kHFSExtentDensity = 0x3,kHFSPlusExtentDensity = 0x8,};
enum _C22B7E577DAE88A14675BDCAF7A896E8 {kSCSIProtocolPowerStateOff = 0x0,kSCSIProtocolPowerStateOn = 0x1,};
enum _C29D57A6597932D2340A206F45B536CD {kIODisplayDitherDisable = 0x0,kIODisplayDitherSpatial = 0x1,kIODisplayDitherTemporal = 0x2,kIODisplayDitherFrameRateControl = 0x4,kIODisplayDitherDefault = 0x80,kIODisplayDitherAll = 0xFF,kIODisplayDitherRGBShift = 0x0,kIODisplayDitherYCbCr444Shift = 0x8,kIODisplayDitherYCbCr422Shift = 0x10,};
enum _C2EED1D528C4167A74D25B6AE5157E2F {kBootDriverTypeInvalid = 0x0,kBootDriverTypeKEXT = 0x1,kBootDriverTypeMKEXT = 0x2,};
enum _C30A4A168BEC08534E567F2C5F36886A {kFWAsynchSpd = 0x30000,kFWAsynchSpdPhase = 0x10,kFWAsynchTLabel = 0xFC00,kFWAsynchTLabelPhase = 0xA,kFWAsynchTTotal = 0x40,kFWAsynchRt = 0x300,kFWAsynchRtPhase = 0x8,kFWAsynchNew = 0x0,kFWAsynchRetryA = 0x2,kTIAsycnhRetryB = 0x3,kFWAsynchPriority = 0xF,kFWAsynchPriorityPhase = 0x0,kFWAsynchDestinationID = 0xFFFF0000,kFWAsynchDestinationIDPhase = 0x10,kFWAsynchSourceID = 0xFFFF0000,kFWAsynchSourceIDPhase = 0x10,kFWAsynchDestinationOffsetHigh = 0xFFFF,kFWAsynchDestinationOffsetHighPhase = 0x0,kFWAsynchDestinationOffsetLow = 0xFFFFFFFF,kFWAsynchDestinationOffsetLowPhase = 0x0,kFWAsynchDataLength = 0xFFFF0000,kFWAsynchDataLengthPhase = 0x10,kFWAsynchExtendedTCode = 0xFFFF,kFWAsynchExtendedTCodePhase = 0x0,kFWAsynchAckSent = 0xF,kFWAsynchAckSentPhase = 0x0,kFWAsynchRCode = 0xF000,kFWAsynchRCodePhase = 0xC,};
enum _C36C490F53CF826E50DFE6D4363200EA {kPowerStateReducedPowerMask = 0x300,kPowerStateFullPower = 0x0,kPowerStateReducedPower1 = 0x100,kPowerStateReducedPower2 = 0x200,kPowerStateReducedPower3 = 0x300,};
enum _C388ACEE793517CB1F8AF58A00123C45 {kUSBInterfaceUserClientOpen = 0x0,kUSBInterfaceUserClientClose = 0x1,kUSBInterfaceUserClientGetDevice = 0x2,kUSBInterfaceUserClientSetAlternateInterface = 0x3,kUSBInterfaceUserClientGetFrameNumber = 0x4,kUSBInterfaceUserClientGetPipeProperties = 0x5,kUSBInterfaceUserClientReadPipe = 0x6,kUSBInterfaceUserClientWritePipe = 0x7,kUSBInterfaceUserClientGetPipeStatus = 0x8,kUSBInterfaceUserClientAbortPipe = 0x9,kUSBInterfaceUserClientResetPipe = 0xA,kUSBInterfaceUserClientClearPipeStall = 0xB,kUSBInterfaceUserClientControlRequestOut = 0xC,kUSBInterfaceUserClientControlRequestIn = 0xD,kUSBInterfaceUserClientSetPipePolicy = 0xE,kUSBInterfaceUserClientGetBandwidthAvailable = 0xF,kUSBInterfaceUserClientGetEndpointProperties = 0x10,kUSBInterfaceUserClientLowLatencyPrepareBuffer = 0x11,kUSBInterfaceUserClientLowLatencyReleaseBuffer = 0x12,kUSBInterfaceUserClientGetMicroFrameNumber = 0x13,kUSBInterfaceUserClientGetFrameListTime = 0x14,kUSBInterfaceUserClientGetFrameNumberWithTime = 0x15,kUSBInterfaceUserClientSetAsyncPort = 0x16,kUSBInterfaceUserClientReadIsochPipe = 0x17,kUSBInterfaceUserClientWriteIsochPipe = 0x18,kUSBInterfaceUserClientLowLatencyReadIsochPipe = 0x19,kUSBInterfaceUserClientLowLatencyWriteIsochPipe = 0x1A,kUSBInterfaceUserClientGetConfigDescriptor = 0x1B,kUSBInterfaceUserClientGetPipePropertiesV2 = 0x1C,kUSBInterfaceUserClientGetPipePropertiesV3 = 0x1D,kUSBInterfaceUserClientGetEndpointPropertiesV3 = 0x1E,kUSBInterfaceUserClientSupportsStreams = 0x1F,kUSBInterfaceUserClientCreateStreams = 0x20,kUSBInterfaceUserClientGetConfiguredStreams = 0x21,kUSBInterfaceUserClientReadStreamsPipe = 0x22,kUSBInterfaceUserClientWriteStreamsPipe = 0x23,kUSBInterfaceUserClientAbortStreamsPipe = 0x24,kUSBInterfaceUserClientRegisterForNotification = 0x25,kUSBInterfaceUserClientUnregisterNotification = 0x26,kUSBInterfaceUserClientAcknowledgeNotification = 0x27,kUSBInterfaceUserClientRegisterDriver = 0x28,kUSBInterfaceUserClientSetDeviceIdlePolicy = 0x29,kUSBInterfaceUserClientSetPipeIdlePolicy = 0x2A,kIOUSBLibInterfaceUserClientNumCommands = 0x2B,};
enum _C3C0FF0F74B6089AE5D7AE91370F1B1B {kBluetoothKeyFlagSemiPermanent = 0x0,kBluetoothKeyFlagTemporary = 0x1,};
enum _C3FA9AE882789FEBFA4B6ED4DC232C09 {kHFSVolumeHardwareLockBit = 0x7,kHFSVolumeUnmountedBit = 0x8,kHFSVolumeSparedBlocksBit = 0x9,kHFSVolumeNoCacheRequiredBit = 0xA,kHFSBootVolumeInconsistentBit = 0xB,kHFSCatalogNodeIDsReusedBit = 0xC,kHFSVolumeJournaledBit = 0xD,kHFSVolumeInconsistentBit = 0xE,kHFSVolumeSoftwareLockBit = 0xF,kHFSUnusedNodeFixBit = 0x1F,kHFSContentProtectionBit = 0x1E,kHFSVolumeHardwareLockMask = 0x80,kHFSVolumeUnmountedMask = 0x100,kHFSVolumeSparedBlocksMask = 0x200,kHFSVolumeNoCacheRequiredMask = 0x400,kHFSBootVolumeInconsistentMask = 0x800,kHFSCatalogNodeIDsReusedMask = 0x1000,kHFSVolumeJournaledMask = 0x2000,kHFSVolumeInconsistentMask = 0x4000,kHFSVolumeSoftwareLockMask = 0x8000,kHFSContentProtectionMask = 0x40000000,kHFSUnusedNodeFixMask = 0x80000000,kHFSMDBAttributesMask = 0x8380,};
enum _C45E375BBFF6E2567DCA48C21F44D77C {kFWPacketTCode = 0xF0,kFWPacketTCodePhase = 0x4,};
enum _C49FAA805452CDAD80F7D964C7484AAA {kInflowForciblyEnabledBit = 0x1,};
enum _C4E43E216A0FA59EA90BDE6598230955 {kDDCBlockTypeEDID = 0x0,};
enum _C524BB600D9A75BEC1D1D36A4B72319A {kIOAudioLevelControlSubTypeVolume = 0x766C6D65,kIOAudioLevelControlSubTypeLFEVolume = 0x73756276,kIOAudioLevelControlSubTypePRAMVolume = 0x7072616D,kIOAudioToggleControlSubTypeMute = 0x6D757465,kIOAudioToggleControlSubTypeSolo = 0x736F6C6F,kIOAudioToggleControlSubTypeLFEMute = 0x7375626D,kIOAudioToggleControlSubTypeiSubAttach = 0x61746368,kIOAudioToggleControlSubTypePhantomPower = 0x7068616E,kIOAudioToggleControlSubTypePhaseInvert = 0x70687369,kIOAudioSelectorControlSubTypeOutput = 0x6F757470,kIOAudioSelectorControlSubTypeInput = 0x696E7074,kIOAudioSelectorControlSubTypeClockSource = 0x636C636B,kIOAudioSelectorControlSubTypeDestination = 0x64657374,kIOAudioSelectorControlSubTypeChannelNominalLineLevel = 0x6E6C6576,kIOAudioSelectorControlSubTypeChannelLevelPlus4dBu = 0x34646275,kIOAudioSelectorControlSubTypeChannelLevelMinus10dBV = 0x31306462,kIOAudioSelectorControlSubTypeChannelLevelMinus20dBV = 0x32306462,kIOAudioSelectorControlSubTypeChannelLevelMicLevel = 0x6D69636C,kIOAudioSelectorControlSubTypeChannelLevelInstrumentLevel = 0x6973746C,kIOAudioSelectorControlSubTypeChannelHighPassFilter = 0x68697066,};
enum _C53DDBF6AE065E6B2D7DA30321F3A327 {kFWBIBHeaderAddress = 0xF0000400,kFWBIBBusNameAddress = 0xF0000404,kFWBIBNodeCapabilitiesAddress = 0xF0000408,kFWBIBNodeUniqueIDHiAddress = 0xF000040C,kFWBIBNodeUniqueIDLoAddress = 0xF0000410,kFWBIBBusName = 0x31333934,kFWBIBIrmc = 0xFFFFFFFF80000000,kFWBIBCmc = 0x40000000,kFWBIBIsc = 0x20000000,kFWBIBBmc = 0x10000000,kFWBIBCycClkAcc = 0xFF0000,kFWBIBCycClkAccPhase = 0x10,kFWBIBMaxRec = 0xF000,kFWBIBMaxRecPhase = 0xC,kFWBIBMaxROM = 0xC00,kFWBIBMaxROMPhase = 0xA,kFWBIBGeneration = 0xF0,kFWBIBGenerationPhase = 0x4,kFWBIBLinkSpeed = 0x7,kFWBIBLinkSpeedPhase = 0x0,};
enum _C568BD130161D469D874F0E5C68C4077 {kPMGeneralAggressiveness = 0x0,kPMMinutesToDim = 0x1,kPMMinutesToSpinDown = 0x2,kPMMinutesToSleep = 0x3,kPMEthernetWakeOnLANSettings = 0x4,kPMSetProcessorSpeed = 0x5,kPMPowerSource = 0x6,kPMMotionSensor = 0x7,kPMLastAggressivenessType = 0x8,};
enum _C58644F7F9BE869E6595E00F2A7516E3 {kBluetoothRoleBecomeMaster = 0x0,kBluetoothRoleRemainSlave = 0x1,};
enum _C6161833D4BF89F6832AB85CA08C07FD {kFWPhyConfigurationR = 0x800000,kFWPhyConfigurationT = 0x400000,kFWPhyConfigurationGapCnt = 0x3F0000,kFWPhyConfigurationGapCntPhase = 0x10,};
enum _C71A0164542244FA5D631A8AAB45B011 {kINQUIRY_PERIPHERAL_QUALIFIER_Connected = 0x0,kINQUIRY_PERIPHERAL_QUALIFIER_SupportedButNotConnected = 0x20,kINQUIRY_PERIPHERAL_QUALIFIER_NotSupported = 0x60,kINQUIRY_PERIPHERAL_QUALIFIER_Mask = 0xE0,};
enum _C7B1808D5339115796ED52D1DE2A5ED6 {kRegMaximumPropertyNameLength = 0x1F,kRegPropertyNameTerminator = 0x0,};
enum _C7DC09B7128A1CCACD30B7B95B9BB411 {kIODisplayNumPowerStates = 0x4,kIODisplayMaxPowerState = 0x3,};
enum _C834B1911E287FEC2428A89A6CD406BA {kIOStreamMethodOpen = 0x0,kIOStreamMethodClose = 0x1,kIOStreamMethodStart = 0x2,kIOStreamMethodStop = 0x3,kIOStreamMethodSuspend = 0x4,kIOStreamMethodGetMode = 0x5,kIOStreamMethodSetMode = 0x6,kIOStreamMethodGetBufferCount = 0x7,};
enum _C84B9FBF13999D0364B7443F312F7542 {dot3ChipSetAMD7990 = 0x1,dot3ChipSetAMD79900 = 0x2,dot3ChipSetAMD79C940 = 0x3,};
enum _C89492F12BB4D90C7592DA509B91DC73 {kIOReportQuantityUndefined = 0x0,kIOReportQuantityTime = 0x1,kIOReportQuantityPower = 0x2,kIOReportQuantityEnergy = 0x3,kIOReportQuantityCurrent = 0x4,kIOReportQuantityVoltage = 0x5,kIOReportQuantityCapacitance = 0x6,kIOReportQuantityInductance = 0x7,kIOReportQuantityFrequency = 0x8,kIOReportQuantityData = 0x9,kIOReportQuantityTemperature = 0xA,kIOReportQuantityEventCount = 0x64,kIOReportQuantityPacketCount = 0x65,kIOReportQuantityCPUInstrs = 0x66,};
enum _C8970ACAB10539B5BB6CA8D0EECB3C04 {kFWIsochChannelDefaultFlags = 0x0,kFWIsochChannelDoNotResumeOnWake = 0x2,};
enum _C913958874BA9D1665050A14D4940245 {kClamshellStateBit = 0x1,kClamshellSleepBit = 0x2,};
enum _C98CF3A87EB53CBA3DC97DEB2346F858 {kBDMediaTypeUnknown = 0x300,kBDMediaTypeROM = 0x302,kBDMediaTypeRE = 0x303,kBDMediaTypeR = 0x304,kBDMediaTypeMin = 0x300,kBDMediaTypeMax = 0x3FF,};
enum _C9C4AC23BD3DAF6B0BC6AF7400689080 {kIOAudioStreamSampleFormatLinearPCM = 0x6C70636D,kIOAudioStreamSampleFormatIEEEFloat = 0x69656565,kIOAudioStreamSampleFormatALaw = 0x616C6177,kIOAudioStreamSampleFormatMuLaw = 0x756C6177,kIOAudioStreamSampleFormatMPEG = 0x6D706567,kIOAudioStreamSampleFormatAC3 = 0x61632D33,kIOAudioStreamSampleFormat1937AC3 = 0x63616333,kIOAudioStreamSampleFormat1937MPEG1 = 0x6D706731,kIOAudioStreamSampleFormat1937MPEG2 = 0x6D706732,kIOAudioStreamSampleFormatTimeCode = 0x74696D65,};
enum _CA69A142AFCBB60176CB2AFD0837DA63 {kHIDBootProtocolValue = 0x0,kHIDReportProtocolValue = 0x1,};
enum _CA96E4DBF48D9F27254DCEE60EF71134 {kIOPMThermalLevelNormal = 0x0,kIOPMThermalLevelDanger = 0x5,kIOPMThermalLevelCritical = 0xA,kIOPMThermalLevelWarning = 0x64,kIOPMThermalLevelTrap = 0x6E,kIOPMThermalLevelUnknown = 0xFF,};
enum _CB13091650436C26F475C862C02E44AF {kIOReportInvalidFormat = 0x0,kIOReportFormatSimple = 0x1,kIOReportFormatState = 0x2,kIOReportFormatHistogram = 0x3,kIOReportFormatSimpleArray = 0x4,};
enum _CB9C3FD8B7BF4716A6E49B1F3FD3E873 {kIOHIDEventNotification = 0x0,};
enum _CC2C9FFE73BA2094F8B32939916544A3 {kBluetoothL2CAPPacketHeaderSize = 0x4,};
enum _CC6B6D618E37C1DA764FE079B700F359 {kIOAudioStreamAlignmentLowByte = 0x0,kIOAudioStreamAlignmentHighByte = 0x1,};
enum _CD1968A003382C73823FAA8C5F24ED6F {kHFSPlusAttrInlineData = 0x10,kHFSPlusAttrForkData = 0x20,kHFSPlusAttrExtents = 0x30,};
enum _CDB22F8CEB6C666A63092CB1DB784C7E {kServiceCategoryDisplay = 0x64697370,kServiceCategoryOpenTransport = 0x6F74616E,kServiceCategoryBlockStorage = 0x626C6F6B,kServiceCategoryNdrvDriver = 0x6E647276,kServiceCategoryScsiSIM = 0x73637369,kServiceCategoryFileManager = 0x66696C65,kServiceCategoryIDE = 0x6964652D,kServiceCategoryADB = 0x6164622D,kServiceCategoryPCI = 0x7063692D,kServiceCategoryDFM = 0x64666D2D,kServiceCategoryMotherBoard = 0x6D726264,kServiceCategoryKeyboard = 0x6B796264,kServiceCategoryPointing = 0x706F6974,kServiceCategoryRTC = 0x7274632D,kServiceCategoryNVRAM = 0x6E72616D,kServiceCategorySound = 0x736F6E64,kServiceCategoryPowerMgt = 0x70676D74,kServiceCategoryGeneric = 0x67656E72,};
enum _CDE04E7F3EA3EE2ED73090F37E9E8934 {kRegPropertyValueIsSavedToNVRAM = 0x20,kRegPropertyValueIsSavedToDisk = 0x40,};
enum _CE2923B796DAAB8A1A4954121890FA1B {kINQUIRY_VERSION_DESCRIPTOR_NVME = 0x8080,};
enum _CE6233900EBEFCFF3477809D0AC7C472 {kIOBitsPerColorComponentNotSupported = 0x0,kIOBitsPerColorComponent6 = 0x1,kIOBitsPerColorComponent8 = 0x2,kIOBitsPerColorComponent10 = 0x4,kIOBitsPerColorComponent12 = 0x8,kIOBitsPerColorComponent16 = 0x10,};
enum _CE79705E5B1F9FDC499986201B745281 {kFirstDepthMode = 0x80,kSecondDepthMode = 0x81,kThirdDepthMode = 0x82,kFourthDepthMode = 0x83,kFifthDepthMode = 0x84,kSixthDepthMode = 0x85,};
enum _CE94A254E26646A169D5625DCB95169F {kMachineTypeUnknown = 0x0,};
enum _CF2FC024B258EBCE0D9A6D7AA39C43FA {kModeValid = 0x0,kModeSafe = 0x1,kModeDefault = 0x2,kModeShowNow = 0x3,kModeNotResize = 0x4,kModeRequiresPan = 0x5,kModeInterlaced = 0x6,kModeShowNever = 0x7,kModeSimulscan = 0x8,kModeNotPreset = 0x9,kModeBuiltIn = 0xA,kModeStretched = 0xB,kModeNotGraphicsQuality = 0xC,kModeValidateAgainstDisplay = 0xD,};
enum _CF77BA3C82D1020C7418FAC0676B2A13 {kIOHIDQueueOptionsTypeNone = 0x0,kIOHIDQueueOptionsTypeEnqueueAll = 0x1,};
enum _CFCB3103950C28F6B00383D461B51065 {kHIDUsage_GenDevControls_BackgroundControls = 0x1,};
enum _CFDB021E32D983F3383E4220995CD2A5 {kHFSSigWord = 0x4244,kHFSPlusSigWord = 0x482B,kHFSXSigWord = 0x4858,kHFSPlusVersion = 0x4,kHFSXVersion = 0x5,kHFSPlusMountVersion = 0x31302E30,kHFSJMountVersion = 0x4846534A,kFSKMountVersion = 0x46534B21,};
enum _D07D134C3FC0BDB581EF61C3994D34ED {kIOVideoControlBaseClassIDBoolean = 0x746F676C,kIOVideoControlBaseClassIDSelector = 0x736C6374,kIOVideoControlBaseClassIDFeature = 0x66746374,};
enum _D0F21C0BC42F99AA58822B0184EE7A6B {dot3ChipSetFujitsu86950 = 0x1,};
enum _D232332712541B74EF9A7E3A97A5C113 {kIOPMMaxPowerStates = 0xA,IOPMMaxPowerStates = 0xA,};
enum _D261A74885C960DE5C3414EE69335353 {kIOExternalMethodArgumentsCurrentVersion = 0x2,};
enum _D27A0DF5FDD76201EF7BB86FACC42156 {kIOBatteryInstalled = 0x4,kIOBatteryCharge = 0x2,kIOBatteryChargerConnect = 0x1,};
enum _D30CEE506A62E917525424C93DF6D68E {kFWTCodeWriteQuadlet = 0x0,kFWTCodeWriteBlock = 0x1,kFWTCodeWriteResponse = 0x2,kFWTCodeReadQuadlet = 0x4,kFWTCodeReadBlock = 0x5,kFWTCodeReadQuadletResponse = 0x6,kFWTCodeReadBlockResponse = 0x7,kFWTCodeCycleStart = 0x8,kFWTCodeLock = 0x9,kFWTCodeIsochronousBlock = 0xA,kFWTCodeLockResponse = 0xB,kFWTCodePHYPacket = 0xE,};
enum _D373E93E347F82DB0B379CEEF0AD13B4 {kBluetoothL2CAPChannelNull = 0x0,kBluetoothL2CAPChannelSignalling = 0x1,kBluetoothL2CAPChannelConnectionLessData = 0x2,kBluetoothL2CAPChannelAMPManagerProtocol = 0x3,kBluetoothL2CAPChannelAttributeProtocol = 0x4,kBluetoothL2CAPChannelLESignalling = 0x5,kBluetoothL2CAPChannelSecurityManager = 0x6,kBluetoothL2CAPChannelReservedStart = 0x7,kBluetoothL2CAPChannelLEAP = 0x2A,kBluetoothL2CAPChannelLEAS = 0x2B,kBluetoothL2CAPChannelMagicPairing = 0x30,kBluetoothL2CAPChannelMagnet = 0x3A,kBluetoothL2CAPChannelReservedEnd = 0x3F,kBluetoothL2CAPChannelDynamicStart = 0x40,kBluetoothL2CAPChannelDynamicEnd = 0xFFFF,kBluetoothL2CAPChannelEnd = 0xFFFF,};
enum _D3F1613D5240A096DFCF747207F473D6 {PROCESSOR_UNDEFINED = 0x800,PROCESSOR_GENERAL = 0x801,};
enum _D5C9635BB8F47659F49DA0D688253553 {kDigitalSignalBit = 0x0,kAnalogSetupExpectedBit = 0x1,kInterlacedCEA861SyncModeBit = 0x2,kDigitalSignalMask = 0x1,kAnalogSetupExpectedMask = 0x2,kInterlacedCEA861SyncModeMask = 0x4,};
enum _D5D99F18585038E1ABEFC476743F6CAD {kHIDUsage_VR_Belt = 0x1,kHIDUsage_VR_BodySuit = 0x2,kHIDUsage_VR_Flexor = 0x3,kHIDUsage_VR_Glove = 0x4,kHIDUsage_VR_HeadTracker = 0x5,kHIDUsage_VR_HeadMountedDisplay = 0x6,kHIDUsage_VR_HandTracker = 0x7,kHIDUsage_VR_Oculometer = 0x8,kHIDUsage_VR_Vest = 0x9,kHIDUsage_VR_AnimatronicDevice = 0xA,kHIDUsage_VR_StereoEnable = 0x20,kHIDUsage_VR_DisplayEnable = 0x21,kHIDUsage_VR_Reserved = 0xFFFF,};
enum _D6237AAD2DBEE20600367C22232BFAEA {kIOHibernatePreviewActive = 0x1,kIOHibernatePreviewUpdates = 0x2,};
enum _D6470DEEDB02DBF9EEEA08E7777BCE17 {kFWAVCStateBusSuspended = 0x0,kFWAVCStateBusResumed = 0x1,kFWAVCStatePlugReconnected = 0x2,kFWAVCStatePlugDisconnected = 0x3,kFWAVCStateDeviceRemoved = 0x4,};
enum _D76313333DABCC95124C7B093FBA3C84 {kESCZero21Inch = 0x0,kESCOnePortraitMono = 0x14,kESCTwo12Inch = 0x21,kESCThree21InchRadius = 0x31,kESCThree21InchMonoRadius = 0x34,kESCThree21InchMono = 0x35,kESCFourNTSC = 0xA,kESCFivePortrait = 0x1E,kESCSixMSB1 = 0x3,kESCSixMSB2 = 0xB,kESCSixMSB3 = 0x23,kESCSixStandard = 0x2B,kESCSevenPAL = 0x0,kESCSevenNTSC = 0x14,kESCSevenVGA = 0x17,kESCSeven16Inch = 0x2D,kESCSevenPALAlternate = 0x30,kESCSeven19Inch = 0x3A,kESCSevenDDC = 0x3E,kESCSevenNoDisplay = 0x3F,};
enum _D7882CE84E7C6052099E549CB25B6674 {kUSBProcessNotificationRegisterNotification = 0x1,kUSBProcessNotificationUnregisterNotification = 0x2,kUSBProcessNotificationAcknowledgeNotification = 0x3,};
enum _D8926274E371D39E71725DF689F1C54E {kIOAudioPortTypeOutput = 0x6F757470,kIOAudioPortTypeInput = 0x696E7074,kIOAudioPortTypeMixer = 0x6D697872,kIOAudioPortTypePassThru = 0x70617373,kIOAudioPortTypeProcessing = 0x70726F63,};
enum _D9EF875543D45771F187B3BAD569F1FC {kDVDRegionalPlaybackControlSchemePhase1 = 0x0,kDVDRegionalPlaybackControlSchemePhase2 = 0x1,};
enum _DA081B061153990F2DB7496AD8938B3F {kIOPowerStateAttribute = 0x70777273,kIOPowerAttribute = 0x706F7772,kIODriverPowerAttribute = 0x64706F77,kIOHardwareCursorAttribute = 0x63727372,kIOMirrorAttribute = 0x6D697272,kIOMirrorDefaultAttribute = 0x6D726466,kIOCapturedAttribute = 0x63617064,kIOCursorControlAttribute = 0x63727363,kIOSystemPowerAttribute = 0x73707772,kIOWindowServerActiveAttribute = 0x77737276,kIOVRAMSaveAttribute = 0x76727376,kIODeferCLUTSetAttribute = 0x76636C74,kIOClamshellStateAttribute = 0x636C616D,kIOFBDisplayPortTrainingAttribute = 0x64707461,kIOFBDisplayState = 0x64737474,kIOFBVariableRefreshRate = 0x7672723F,kIOFBLimitHDCPAttribute = 0x68646370,kIOFBLimitHDCPStateAttribute = 0x73484443,kIOFBStop = 0x73746F70,kIOFBRedGammaScaleAttribute = 0x67736C72,kIOFBGreenGammaScaleAttribute = 0x67736C67,kIOFBBlueGammaScaleAttribute = 0x67736C62,kIOFBHDRMetaDataAttribute = 0x6864726D,};
enum _DA5B28EF25C6B93461707FB533C1649A {kIOFBVBLInterruptType = 0x76626C20,kIOFBHBLInterruptType = 0x68626C20,kIOFBFrameInterruptType = 0x6672616D,kIOFBConnectInterruptType = 0x64636920,kIOFBChangedInterruptType = 0x63686E67,kIOFBOfflineInterruptType = 0x72656D76,kIOFBOnlineInterruptType = 0x61646420,kIOFBDisplayPortInterruptType = 0x64706972,kIOFBDisplayPortLinkChangeInterruptType = 0x64706C6B,kIOFBMCCSInterruptType = 0x6D636373,kIOFBWakeInterruptType = 0x7677616B,};
enum _DA7C3C15E600E86F6FF3226A5D82722C {kIODTRecursive = 0x1,kIODTExclusive = 0x2,};
enum _DABC384D96F2B9D3ABBD5A6A43B3E088 {BLOCK_LAYOUT_ESCAPE = 0x0,BLOCK_LAYOUT_NON_OBJECT_BYTES = 0x1,BLOCK_LAYOUT_NON_OBJECT_WORDS = 0x2,BLOCK_LAYOUT_STRONG = 0x3,BLOCK_LAYOUT_BYREF = 0x4,BLOCK_LAYOUT_WEAK = 0x5,BLOCK_LAYOUT_UNRETAINED = 0x6,BLOCK_LAYOUT_UNKNOWN_WORDS_7 = 0x7,BLOCK_LAYOUT_UNKNOWN_WORDS_8 = 0x8,BLOCK_LAYOUT_UNKNOWN_WORDS_9 = 0x9,BLOCK_LAYOUT_UNKNOWN_WORDS_A = 0xA,BLOCK_LAYOUT_UNUSED_B = 0xB,BLOCK_LAYOUT_UNUSED_C = 0xC,BLOCK_LAYOUT_UNUSED_D = 0xD,BLOCK_LAYOUT_UNUSED_E = 0xE,BLOCK_LAYOUT_UNUSED_F = 0xF,};
enum _DB21512F1DAC5443928F7413672FF695 {kUSBEndpointPropertiesVersion3 = 0x3,};
enum _DB9744EE99DDD6841EC7ACDE83F1EAAB {IFNET_CSUM_IP = 0x1,IFNET_CSUM_TCP = 0x2,IFNET_CSUM_UDP = 0x4,IFNET_CSUM_FRAGMENT = 0x8,IFNET_IP_FRAGMENT = 0x10,IFNET_CSUM_TCPIPV6 = 0x20,IFNET_CSUM_UDPIPV6 = 0x40,IFNET_IPV6_FRAGMENT = 0x80,IFNET_VLAN_TAGGING = 0x10000,IFNET_VLAN_MTU = 0x20000,IFNET_MULTIPAGES = 0x100000,IFNET_TSO_IPV4 = 0x200000,IFNET_TSO_IPV6 = 0x400000,IFNET_TX_STATUS = 0x800000,IFNET_HW_TIMESTAMP = 0x1000000,IFNET_SW_TIMESTAMP = 0x2000000,};
enum _DBA0E629504ABC979D111BEB7FF53DAC {kBluetoothL2CAPTCIEventIDReserved = 0x0,kBluetoothL2CAPTCIEventIDL2CA_ConnectInd = 0x1,kBluetoothL2CAPTCIEventIDL2CA_ConfigInd = 0x2,kBluetoothL2CAPTCIEventIDL2CA_DisconnectInd = 0x3,kBluetoothL2CAPTCIEventIDL2CA_QoSViolationInd = 0x4,kBluetoothL2CAPTCIEventIDL2CA_TimeOutInd = 0x5,};
enum _DC4D04FF1BB39EE0089164B79A3B016C {kIOPMACInstalled = 0x1,kIOPMBatteryCharging = 0x2,kIOPMBatteryInstalled = 0x4,kIOPMUPSInstalled = 0x8,kIOPMBatteryAtWarn = 0x10,kIOPMBatteryDepleted = 0x20,kIOPMACnoChargeCapability = 0x40,kIOPMRawLowBattery = 0x80,kIOPMForceLowSpeed = 0x100,kIOPMClosedClamshell = 0x200,kIOPMClamshellStateOnWake = 0x400,};
enum _DC6832018F10C6C354556D872F8AAD2B {kHIDUsage_Tfon_Phone = 0x1,kHIDUsage_Tfon_AnsweringMachine = 0x2,kHIDUsage_Tfon_MessageControls = 0x3,kHIDUsage_Tfon_Handset = 0x4,kHIDUsage_Tfon_Headset = 0x5,kHIDUsage_Tfon_TelephonyKeyPad = 0x6,kHIDUsage_Tfon_ProgrammableButton = 0x7,kHIDUsage_Tfon_HookSwitch = 0x20,kHIDUsage_Tfon_Flash = 0x21,kHIDUsage_Tfon_Feature = 0x22,kHIDUsage_Tfon_Hold = 0x23,kHIDUsage_Tfon_Redial = 0x24,kHIDUsage_Tfon_Transfer = 0x25,kHIDUsage_Tfon_Drop = 0x26,kHIDUsage_Tfon_Park = 0x27,kHIDUsage_Tfon_ForwardCalls = 0x28,kHIDUsage_Tfon_AlternateFunction = 0x29,kHIDUsage_Tfon_Line = 0x2A,kHIDUsage_Tfon_SpeakerPhone = 0x2B,kHIDUsage_Tfon_Conference = 0x2C,kHIDUsage_Tfon_RingEnable = 0x2D,kHIDUsage_Tfon_Ring = 0x2E,kHIDUsage_Tfon_PhoneMute = 0x2F,kHIDUsage_Tfon_CallerID = 0x30,kHIDUsage_Tfon_SpeedDial = 0x50,kHIDUsage_Tfon_StoreNumber = 0x51,kHIDUsage_Tfon_RecallNumber = 0x52,kHIDUsage_Tfon_PhoneDirectory = 0x53,kHIDUsage_Tfon_VoiceMail = 0x70,kHIDUsage_Tfon_ScreenCalls = 0x71,kHIDUsage_Tfon_DoNotDisturb = 0x72,kHIDUsage_Tfon_Message = 0x73,kHIDUsage_Tfon_AnswerOnOrOff = 0x74,kHIDUsage_Tfon_InsideDialTone = 0x90,kHIDUsage_Tfon_OutsideDialTone = 0x91,kHIDUsage_Tfon_InsideRingTone = 0x92,kHIDUsage_Tfon_OutsideRingTone = 0x93,kHIDUsage_Tfon_PriorityRingTone = 0x94,kHIDUsage_Tfon_InsideRingback = 0x95,kHIDUsage_Tfon_PriorityRingback = 0x96,kHIDUsage_Tfon_LineBusyTone = 0x97,kHIDUsage_Tfon_ReorderTone = 0x98,kHIDUsage_Tfon_CallWaitingTone = 0x99,kHIDUsage_Tfon_ConfirmationTone1 = 0x9A,kHIDUsage_Tfon_ConfirmationTone2 = 0x9B,kHIDUsage_Tfon_TonesOff = 0x9C,kHIDUsage_Tfon_OutsideRingback = 0x9D,kHIDUsage_Tfon_PhoneKey0 = 0xB0,kHIDUsage_Tfon_PhoneKey1 = 0xB1,kHIDUsage_Tfon_PhoneKey2 = 0xB2,kHIDUsage_Tfon_PhoneKey3 = 0xB3,kHIDUsage_Tfon_PhoneKey4 = 0xB4,kHIDUsage_Tfon_PhoneKey5 = 0xB5,kHIDUsage_Tfon_PhoneKey6 = 0xB6,kHIDUsage_Tfon_PhoneKey7 = 0xB7,kHIDUsage_Tfon_PhoneKey8 = 0xB8,kHIDUsage_Tfon_PhoneKey9 = 0xB9,kHIDUsage_Tfon_PhoneKeyStar = 0xBA,kHIDUsage_Tfon_PhoneKeyPound = 0xBB,kHIDUsage_Tfon_PhoneKeyA = 0xBC,kHIDUsage_Tfon_PhoneKeyB = 0xBD,kHIDUsage_Tfon_PhoneKeyC = 0xBE,kHIDUsage_Tfon_PhoneKeyD = 0xBF,kHIDUsage_TFon_Reserved = 0xFFFF,};
enum _DC830C78578586A9266FF00D9ED3EC51 {kSCSIDataTransfer_NoDataTransfer = 0x0,kSCSIDataTransfer_FromInitiatorToTarget = 0x1,kSCSIDataTransfer_FromTargetToInitiator = 0x2,};
enum _DE5BAF7FCCA2335CAD39E57603FF065A {kDMSModeReady = 0x0,kDMSModeNotReady = 0x1,kDMSModeFree = 0x2,};
enum _DE88419ED4F6DB586B73DF943C6725EE {EMBEDDED_UNDEFINED = 0x700,EMBEDDED_LEVEL_CALIBRATION_NOISE_SOURCE = 0x701,EMBEDDED_EQUALIZATION_NOISE = 0x702,EMBEDDED_CD_PLAYER = 0x703,EMBEDDED_DAT = 0x704,EMBEDDED_DCC = 0x705,EMBEDDED_MINIDISK = 0x706,EMBEDDED_ANALOG_TAPE = 0x707,EMBEDDED_PHONOGRAPH = 0x708,EMBEDDED_VCR_AUDIO = 0x709,EMBEDDED_VIDEO_DISC_AUDIO = 0x70A,EMBEDDED_DVD_AUDIO = 0x70B,EMBEDDED_TV_TUNER_AUDIO = 0x70C,EMBEDDED_SATELLITE_RECEIVER_AUDIO = 0x70D,EMBEDDED_CABLE_TUNER_AUDIO = 0x70E,EMBEDDED_DSS_AUDIO = 0x70F,EMBEDDED_RADIO_RECEIVER = 0x710,EMBEDDED_RADIO_TRANSMITTER = 0x711,EMBEDDED_MULTITRACK_RECORDER = 0x712,EMBEDDED_SYNTHESIZER = 0x713,};
enum _DEB53DE4672CCED3FA39EEEA11034D16 {kIOAudioChannelLabel_Unknown = 0xFFFFFFFF,kIOAudioChannelLabel_Unused = 0x0,kIOAudioChannelLabel_UseCoordinates = 0x64,kIOAudioChannelLabel_Left = 0x1,kIOAudioChannelLabel_Right = 0x2,kIOAudioChannelLabel_Center = 0x3,kIOAudioChannelLabel_LFEScreen = 0x4,kIOAudioChannelLabel_LeftSurround = 0x5,kIOAudioChannelLabel_RightSurround = 0x6,kIOAudioChannelLabel_LeftCenter = 0x7,kIOAudioChannelLabel_RightCenter = 0x8,kIOAudioChannelLabel_CenterSurround = 0x9,kIOAudioChannelLabel_LeftSurroundDirect = 0xA,kIOAudioChannelLabel_RightSurroundDirect = 0xB,kIOAudioChannelLabel_TopCenterSurround = 0xC,kIOAudioChannelLabel_VerticalHeightLeft = 0xD,kIOAudioChannelLabel_VerticalHeightCenter = 0xE,kIOAudioChannelLabel_VerticalHeightRight = 0xF,kIOAudioChannelLabel_TopBackLeft = 0x10,kIOAudioChannelLabel_TopBackCenter = 0x11,kIOAudioChannelLabel_TopBackRight = 0x12,kIOAudioChannelLabel_RearSurroundLeft = 0x21,kIOAudioChannelLabel_RearSurroundRight = 0x22,kIOAudioChannelLabel_LeftWide = 0x23,kIOAudioChannelLabel_RightWide = 0x24,kIOAudioChannelLabel_LFE2 = 0x25,kIOAudioChannelLabel_LeftTotal = 0x26,kIOAudioChannelLabel_RightTotal = 0x27,kIOAudioChannelLabel_HearingImpaired = 0x28,kIOAudioChannelLabel_Narration = 0x29,kIOAudioChannelLabel_Mono = 0x2A,kIOAudioChannelLabel_DialogCentricMix = 0x2B,kIOAudioChannelLabel_CenterSurroundDirect = 0x2C,kIOAudioChannelLabel_Haptic = 0x2D,kIOAudioChannelLabel_Ambisonic_W = 0xC8,kIOAudioChannelLabel_Ambisonic_X = 0xC9,kIOAudioChannelLabel_Ambisonic_Y = 0xCA,kIOAudioChannelLabel_Ambisonic_Z = 0xCB,kIOAudioChannelLabel_MS_Mid = 0xCC,kIOAudioChannelLabel_MS_Side = 0xCD,kIOAudioChannelLabel_XY_X = 0xCE,kIOAudioChannelLabel_XY_Y = 0xCF,kIOAudioChannelLabel_HeadphonesLeft = 0x12D,kIOAudioChannelLabel_HeadphonesRight = 0x12E,kIOAudioChannelLabel_ClickTrack = 0x130,kIOAudioChannelLabel_ForeignLanguage = 0x131,kIOAudioChannelLabel_Discrete = 0x190,kIOAudioChannelLabel_Discrete_0 = 0x10000,kIOAudioChannelLabel_Discrete_1 = 0x10001,kIOAudioChannelLabel_Discrete_2 = 0x10002,kIOAudioChannelLabel_Discrete_3 = 0x10003,kIOAudioChannelLabel_Discrete_4 = 0x10004,kIOAudioChannelLabel_Discrete_5 = 0x10005,kIOAudioChannelLabel_Discrete_6 = 0x10006,kIOAudioChannelLabel_Discrete_7 = 0x10007,kIOAudioChannelLabel_Discrete_8 = 0x10008,kIOAudioChannelLabel_Discrete_9 = 0x10009,kIOAudioChannelLabel_Discrete_10 = 0x1000A,kIOAudioChannelLabel_Discrete_11 = 0x1000B,kIOAudioChannelLabel_Discrete_12 = 0x1000C,kIOAudioChannelLabel_Discrete_13 = 0x1000D,kIOAudioChannelLabel_Discrete_14 = 0x1000E,kIOAudioChannelLabel_Discrete_15 = 0x1000F,kIOAudioChannelLabel_Discrete_65535 = 0x1FFFF,};
enum _DEBB174E97509F91C9BA33FD476076F6 {kUSBRqDirnShift = 0x7,kUSBRqDirnMask = 0x1,kUSBRqTypeShift = 0x5,kUSBRqTypeMask = 0x3,kUSBRqRecipientMask = 0x1F,};
enum _DEDC38511CAA515300D79DE115178AA0 {kDeclROMtables = 0x6465636C,kDetailedTimingFormat = 0x61726261,};
enum _DEF2474059FE6FD969AA04190DD8A3A0 {kIOFBNotifyGroupID_Legacy = 0x1,kIOFBNotifyGroupID_IODisplay = 0x10,kIOFBNotifyGroupID_AppleGraphicsDevicePolicy = 0x100,kIOFBNotifyGroupID_AppleGraphicsMGPUPowerControl = 0x110,kIOFBNotifyGroupID_AppleGraphicsMUXControl = 0x120,kIOFBNotifyGroupID_AppleGraphicsControl = 0x130,kIOFBNotifyGroupID_AppleGraphicsDisplayPolicy = 0x140,kIOFBNotifyGroupID_AppleGraphicsPowerManagement = 0x150,kIOFBNotifyGroupID_AppleHDAController = 0x160,kIOFBNotifyGroupID_AppleIOAccelDisplayPipe = 0x170,kIOFBNotifyGroupID_AppleMCCSControl = 0x180,kIOFBNotifyGroupID_VendorIntel = 0x200,kIOFBNotifyGroupID_VendorNVIDIA = 0x300,kIOFBNotifyGroupID_VendorAMD = 0x400,kIOFBNotifyGroupID_ThirdParty = 0x8000,kIOFBNotifyGroupID_Count = 0xF,};
enum _DF2392D237FCA27281D731DF13E88BD0 {kIOAGPDefaultStatus = 0x0,};
enum _DFC9F2AE672B271EF1193721A9BCDABD {kIORangeSupportsSignal_0700_0300 = 0x1,kIORangeSupportsSignal_0714_0286 = 0x2,kIORangeSupportsSignal_1000_0400 = 0x4,kIORangeSupportsSignal_0700_0000 = 0x8,};
enum _E04DE6B08C40D7EEF27C94F526C884A0 {kBluetoothL2CAPMTULowEnergyDefault = 0x1B,kBluetoothL2CAPMTULowEnergyMax = 0xFB,kBluetoothL2CAPMTUMinimum = 0x30,kBluetoothL2CAPMTUDefault = 0x3F9,kBluetoothL2CAPMTUMaximum = 0xFFFF,kBluetoothL2CAPMTUStart = 0x7FFF,kBluetoothL2CAPMTUSIG = 0x30,kBluetoothL2CAPFlushTimeoutDefault = 0xFFFF,kBluetoothL2CAPQoSFlagsDefault = 0x0,kBluetoothL2CAPQoSTypeDefault = 0x1,kBluetoothL2CAPQoSTokenRateDefault = 0x0,kBluetoothL2CAPQoSTokenBucketSizeDefault = 0x0,kBluetoothL2CAPQoSPeakBandwidthDefault = 0x0,kBluetoothL2CAPQoSLatencyDefault = 0xFFFFFFFF,kBluetoothL2CAPQoSDelayVariationDefault = 0xFFFFFFFF,};
enum _E0BECEAA16220652E83406BFFFD2BC66 {kIOReturnOutputSuccess = 0x0,kIOReturnOutputDropped = 0x1,kIOReturnOutputStall = 0x102,};
enum _E1F8020EB82EAC183862EF766F16CCFC {kIOHIDEventQueueTypeKernel = 0x0,kIOHIDEventQueueTypeUser = 0x1,};
enum _E21C0558E48035D4E8ED9270BB84E032 {kUSBDisplayClass = 0x4,};
enum _E27CD3AB7527120BA110A4CD8D145270 {kHIDPage_Undefined = 0x0,kHIDPage_GenericDesktop = 0x1,kHIDPage_Simulation = 0x2,kHIDPage_VR = 0x3,kHIDPage_Sport = 0x4,kHIDPage_Game = 0x5,kHIDPage_GenericDeviceControls = 0x6,kHIDPage_KeyboardOrKeypad = 0x7,kHIDPage_LEDs = 0x8,kHIDPage_Button = 0x9,kHIDPage_Ordinal = 0xA,kHIDPage_Telephony = 0xB,kHIDPage_Consumer = 0xC,kHIDPage_Digitizer = 0xD,kHIDPage_PID = 0xF,kHIDPage_Unicode = 0x10,kHIDPage_AlphanumericDisplay = 0x14,kHIDPage_Sensor = 0x20,kHIDPage_Monitor = 0x80,kHIDPage_MonitorEnumerated = 0x81,kHIDPage_MonitorVirtual = 0x82,kHIDPage_MonitorReserved = 0x83,kHIDPage_PowerDevice = 0x84,kHIDPage_BatterySystem = 0x85,kHIDPage_PowerReserved = 0x86,kHIDPage_PowerReserved2 = 0x87,kHIDPage_BarCodeScanner = 0x8C,kHIDPage_WeighingDevice = 0x8D,kHIDPage_Scale = 0x8D,kHIDPage_MagneticStripeReader = 0x8E,kHIDPage_CameraControl = 0x90,kHIDPage_Arcade = 0x91,kHIDPage_VendorDefinedStart = 0xFF00,};
enum _E2AE3346BFB5C42C8087887DA2F4BA67 {kHIDUsage_PD_Undefined = 0x0,kHIDUsage_PD_iName = 0x1,kHIDUsage_PD_PresentStatus = 0x2,kHIDUsage_PD_ChangedStatus = 0x3,kHIDUsage_PD_UPS = 0x4,kHIDUsage_PD_PowerSupply = 0x5,kHIDUsage_PD_PeripheralDevice = 0x6,kHIDUsage_PD_BatterySystem = 0x10,kHIDUsage_PD_BatterySystemID = 0x11,kHIDUsage_PD_Battery = 0x12,kHIDUsage_PD_BatteryID = 0x13,kHIDUsage_PD_Charger = 0x14,kHIDUsage_PD_ChargerID = 0x15,kHIDUsage_PD_PowerConverter = 0x16,kHIDUsage_PD_PowerConverterID = 0x17,kHIDUsage_PD_OutletSystem = 0x18,kHIDUsage_PD_OutletSystemID = 0x19,kHIDUsage_PD_Input = 0x1A,kHIDUsage_PD_InputID = 0x1B,kHIDUsage_PD_Output = 0x1C,kHIDUsage_PD_OutputID = 0x1D,kHIDUsage_PD_Flow = 0x1E,kHIDUsage_PD_FlowID = 0x1F,kHIDUsage_PD_Outlet = 0x20,kHIDUsage_PD_OutletID = 0x21,kHIDUsage_PD_Gang = 0x22,kHIDUsage_PD_GangID = 0x23,kHIDUsage_PD_PowerSummary = 0x24,kHIDUsage_PD_PowerSummaryID = 0x25,kHIDUsage_PD_Voltage = 0x30,kHIDUsage_PD_Current = 0x31,kHIDUsage_PD_Frequency = 0x32,kHIDUsage_PD_ApparentPower = 0x33,kHIDUsage_PD_ActivePower = 0x34,kHIDUsage_PD_PercentLoad = 0x35,kHIDUsage_PD_Temperature = 0x36,kHIDUsage_PD_Humidity = 0x37,kHIDUsage_PD_BadCount = 0x38,kHIDUsage_PD_ConfigVoltage = 0x40,kHIDUsage_PD_ConfigCurrent = 0x41,kHIDUsage_PD_ConfigFrequency = 0x42,kHIDUsage_PD_ConfigApparentPower = 0x43,kHIDUsage_PD_ConfigActivePower = 0x44,kHIDUsage_PD_ConfigPercentLoad = 0x45,kHIDUsage_PD_ConfigTemperature = 0x46,kHIDUsage_PD_ConfigHumidity = 0x47,kHIDUsage_PD_SwitchOnControl = 0x50,kHIDUsage_PD_SwitchOffControl = 0x51,kHIDUsage_PD_ToggleControl = 0x52,kHIDUsage_PD_LowVoltageTransfer = 0x53,kHIDUsage_PD_HighVoltageTransfer = 0x54,kHIDUsage_PD_DelayBeforeReboot = 0x55,kHIDUsage_PD_DelayBeforeStartup = 0x56,kHIDUsage_PD_DelayBeforeShutdown = 0x57,kHIDUsage_PD_Test = 0x58,kHIDUsage_PD_ModuleReset = 0x59,kHIDUsage_PD_AudibleAlarmControl = 0x5A,kHIDUsage_PD_Present = 0x60,kHIDUsage_PD_Good = 0x61,kHIDUsage_PD_InternalFailure = 0x62,kHIDUsage_PD_VoltageOutOfRange = 0x63,kHIDUsage_PD_FrequencyOutOfRange = 0x64,kHIDUsage_PD_Overload = 0x65,kHIDUsage_PD_OverCharged = 0x66,kHIDUsage_PD_OverTemperature = 0x67,kHIDUsage_PD_ShutdownRequested = 0x68,kHIDUsage_PD_ShutdownImminent = 0x69,kHIDUsage_PD_SwitchOnOff = 0x6B,kHIDUsage_PD_Switchable = 0x6C,kHIDUsage_PD_Used = 0x6D,kHIDUsage_PD_Boost = 0x6E,kHIDUsage_PD_Buck = 0x6F,kHIDUsage_PD_Initialized = 0x70,kHIDUsage_PD_Tested = 0x71,kHIDUsage_PD_AwaitingPower = 0x72,kHIDUsage_PD_CommunicationLost = 0x73,kHIDUsage_PD_iManufacturer = 0xFD,kHIDUsage_PD_iProduct = 0xFE,kHIDUsage_PD_iserialNumber = 0xFF,};
enum _E3364228E99C5A9356983C9B35E976FE {kCDTOCFormatTOC = 0x2,kCDTOCFormatPMA = 0x3,kCDTOCFormatATIP = 0x4,kCDTOCFormatTEXT = 0x5,};
enum _E35F68734AFAA716662BC00434A96963 {kIOBlitTypeVerbMask = 0xFF,kIOBlitTypeRects = 0x0,kIOBlitTypeCopyRects = 0x1,kIOBlitTypeLines = 0x2,kIOBlitTypeScanlines = 0x3,kIOBlitTypeCopyRegion = 0x4,kIOBlitTypeMoveCursor = 0x5,kIOBlitTypeShowCursor = 0x6,kIOBlitTypeHideCursor = 0x7,kIOBlitTypeMonoExpand = 0x100,kIOBlitTypeColorSpaceConvert = 0x200,kIOBlitTypeScale = 0x400,kIOBlitTypeSourceKeyColorModeMask = 0x3000,kIOBlitTypeDestKeyColorModeMask = 0xC000,kIOBlitTypeSourceKeyColorEqual = 0x1000,kIOBlitTypeSourceKeyColorNotEqual = 0x2000,kIOBlitTypeDestKeyColorEqual = 0x4000,kIOBlitTypeDestKeyColorNotEqual = 0x8000,kIOBlitTypeOperationMask = 0xFFF0000,kIOBlitTypeOperationShift = 0x10,kIOBlitTypeOperationTypeMask = 0xF000000,kIOBlitTypeOperationType0 = 0x0,kIOBlitCopyOperation = 0x0,kIOBlitOrOperation = 0x10000,kIOBlitXorOperation = 0x20000,kIOBlitBlendOperation = 0x30000,kIOBlitHighlightOperation = 0x40000,};
enum _E37DA35CBEA7FE82E3F09022B48AE036 {kIOFBHardwareCursorActive = 0x1,kIOFBHardwareCursorInVRAM = 0x2,};
enum _E48EE12844B1695B882A8E7F55B7D7D4 {kIOColorimetryNotSupported = 0x0,kIOColorimetryNativeRGB = 0x1,kIOColorimetrysRGB = 0x2,kIOColorimetryDCIP3 = 0x4,kIOColorimetryAdobeRGB = 0x8,kIOColorimetryxvYCC = 0x10,kIOColorimetryWGRGB = 0x20,kIOColorimetryBT601 = 0x40,kIOColorimetryBT709 = 0x80,kIOColorimetryBT2020 = 0x100,kIOColorimetryBT2100 = 0x200,};
enum _E4AFF9FB48FC86C1F0C2A7A9267A1BBC {kBluetoothHCIErroneousDataReportingDisabled = 0x0,kBluetoothHCIErroneousDataReportingEnabled = 0x1,kBluetoothHCIErroneousDataReportingReservedStart = 0x2,kBluetoothHCIErroneousDataReportingReservedEnd = 0xFF,};
enum _E59C63ECBDAB5E4301899C449AA28048 {kIONetworkInterfaceRegisteredState = 0x1,kIONetworkInterfaceOpenedState = 0x2,kIONetworkInterfaceDisabledState = 0x4,};
enum _E5B3F494B892DB5EEA22A039311DB58A {kIOAGPStateEnabled = 0x1,kIOAGPStateEnablePending = 0x10000,};
enum _E6122A7FD5A4328599C19E5A034E02C3 {kBluetoothVoiceSettingPCMBitPositionMask = 0x1C,};
enum _E61437A776277E1A17548FF62CBA60FB {kIOVideoDeviceMethodOpen = 0x0,kIOVideoDeviceMethodClose = 0x1,kIOVideoDeviceMethodGetMode = 0x2,kIOVideoDeviceMethodSetMode = 0x3,kIOVideoDeviceMethodSetControlValue = 0x4,kIOVideoDeviceMethodOpenStream = 0x5,kIOVideoDeviceMethodCloseStream = 0x6,kIOVideoDeviceMethodSetStreamFormat = 0x7,kIOVideoDeviceMethodStartStream = 0x8,kIOVideoDeviceMethodStopStream = 0x9,kIOVideoDeviceMethodSuspendStream = 0xA,kIOVideoDeviceMethodCount = 0xB,};
enum _E6439A4F88AFEA6C2F7BB6C9A095D875 {kSCSIProtocolFeature_ACA = 0x1,kSCSIProtocolFeature_CPUInDiskMode = 0x2,kSCSIProtocolFeature_ProtocolSpecificPolling = 0x3,kSCSIProtocolFeature_ProtocolSpecificSleepCommand = 0x4,kSCSIProtocolFeature_GetMaximumLogicalUnitNumber = 0x5,kSCSIProtocolFeature_MaximumReadBlockTransferCount = 0x6,kSCSIProtocolFeature_MaximumWriteBlockTransferCount = 0x7,kSCSIProtocolFeature_MaximumReadTransferByteCount = 0x8,kSCSIProtocolFeature_MaximumWriteTransferByteCount = 0x9,kSCSIProtocolFeature_SubmitDefaultInquiryData = 0xA,kSCSIProtocolFeature_ProtocolAlwaysReportsAutosenseData = 0xB,kSCSIProtocolFeature_ProtocolSpecificPowerOff = 0xC,kSCSIProtocolFeature_ProtocolSpecificPowerControl = 0xD,kSCSIProtocolFeature_ProtocolSpecificAsyncNotification = 0xE,kSCSIProtocolFeature_HierarchicalLogicalUnits = 0xF,kSCSIProtocolFeature_MultiPathing = 0x10,};
enum _E68A9F40834512FAF64C83220EB07A5C {kBTBadCloseMask = 0x1,kBTBigKeysMask = 0x2,kBTVariableIndexKeysMask = 0x4,};
enum _E6E3DEEBE2723225489303EDC1934DC9 {kCDMediaTypeUnknown = 0x100,kCDMediaTypeROM = 0x102,kCDMediaTypeR = 0x104,kCDMediaTypeRW = 0x105,kCDMediaTypeMin = 0x100,kCDMediaTypeMax = 0x1FF,};
enum _E72BCAD83F923269DD8A7FDF0D327638 {kIOPCIEventCorrectableError = 0x1,kIOPCIEventNonFatalError = 0x2,kIOPCIEventFatalError = 0x3,kIOPCIEventLinkEnableChange = 0x4,};
enum _E79625A5D6B0184602F078BEED820296 {kFWDCLOpDynamicFlag = 0x10000,kFWDCLOpVendorDefinedFlag = 0x20000,kFWDCLOpFlagMask = 0xFFFF0000,kFWDCLOpFlagPhase = 0x10,};
enum _E7B9A180C022A2CB8BB68AE63F00277E {kBDFeaturesReadBit = 0x0,kBDFeaturesWriteBit = 0x1,};
enum _E80FA55F6B1BE98BDBC9576427AEF21A {kIOPMDriverAssertionCPUBit = 0x1,kIOPMDriverAssertionUSBExternalDeviceBit = 0x4,kIOPMDriverAssertionBluetoothHIDDevicePairedBit = 0x8,kIOPMDriverAssertionExternalMediaMountedBit = 0x10,kIOPMDriverAssertionReservedBit5 = 0x20,kIOPMDriverAssertionPreventDisplaySleepBit = 0x40,kIOPMDriverAssertionReservedBit7 = 0x80,kIOPMDriverAssertionMagicPacketWakeEnabledBit = 0x100,kIOPMDriverAssertionNetworkKeepAliveActiveBit = 0x200,};
enum _E9434340993CEA659D2349B76F4A14A4 {eNoteExitReparentedDeprecated = 0x80000,};
enum _E94554148B95F4CFD4ACAFFB4A709D1E {kIONetworkDataAccessTypeRead = 0x1,kIONetworkDataAccessTypeWrite = 0x2,kIONetworkDataAccessTypeReset = 0x4,kIONetworkDataAccessTypeSerialize = 0x8,kIONetworkDataAccessTypeMask = 0xFF,};
enum _E97BE8EB35B80AD101E0AA614BE5D9AF {kDTPathNameSeparator = 0x2F,};
enum _EA2ACB6BC078B2A7BBCDBEDD15BBBCEA {kSyncInterlaceMask = 0x80,kSyncAnalogCompositeMask = 0x0,kSyncAnalogCompositeSerrateMask = 0x4,kSyncAnalogCompositeRGBSyncMask = 0x2,kSyncAnalogBipolarMask = 0x8,kSyncAnalogBipolarSerrateMask = 0x4,kSyncAnalogBipolarSRGBSyncMask = 0x2,kSyncDigitalCompositeMask = 0x10,kSyncDigitalCompositeSerrateMask = 0x4,kSyncDigitalCompositeMatchHSyncMask = 0x4,kSyncDigitalSeperateMask = 0x18,kSyncDigitalVSyncPositiveMask = 0x4,kSyncDigitalHSyncPositiveMask = 0x2,};
enum _EA469B774E5A0758B45DA0E1C229C64F {kIOPMClockNormal = 0x4,kIOPMClockRunning = 0x8,kIOPMPreventSystemSleep = 0x10,kIOPMDoze = 0x400,kIOPMChildClamp = 0x80,kIOPMChildClamp2 = 0x200,kIOPMNotPowerManaged = 0x800,};
enum _EAE8771DA2F2356D0564C26F9201CC3F {kIODTNVRAMImageSize = 0x2000,kIODTNVRAMXPRAMSize = 0x100,kIODTNVRAMNameRegistrySize = 0x400,};
enum _EAFA8423A74A62C788BB2F212075830D {kHIDRtInputReport = 0x1,kHIDRtOutputReport = 0x2,kHIDRtFeatureReport = 0x3,};
enum _EB9BC0D804121F7BBE0898DE35B5E8B7 {kConfigUnitSpecAppleA27 = 0xA27,kConfigUnitSpec1394TA1 = 0xA02D,kConfigUnitSWVersMacintosh10 = 0xA,kConfigUnitSWVersIIDC100 = 0x100,kConfigUnitSWVersIIDC101 = 0x101,kConfigUnitSWVersIIDC102 = 0x102,};
enum _EBB1ED37DB6BB9E2693B5F4E89ECC3F8 {INPUT_UNDEFINED = 0x200,INPUT_MICROPHONE = 0x201,INPUT_DESKTOP_MICROPHONE = 0x202,INPUT_PERSONAL_MICROPHONE = 0x203,INPUT_OMNIDIRECTIONAL_MICROPHONE = 0x204,INPUT_MICROPHONE_ARRAY = 0x205,INPUT_PROCESSING_MICROPHONE_ARRAY = 0x206,INPUT_MODEM_AUDIO = 0x207,};
enum _EC431C0571BC01777386668D36C01429 {kINQUIRY_PERIPHERAL_RMB_MediumFixed = 0x0,kINQUIRY_PERIPHERAL_RMB_MediumRemovable = 0x80,kINQUIRY_PERIPHERAL_RMB_BitMask = 0x80,};
enum _ECC68CEAF2E02DBCF2F676AA5DF3AB86 {kDVDMediaTypeUnknown = 0x200,kDVDMediaTypeROM = 0x202,kDVDMediaTypeRAM = 0x203,kDVDMediaTypeR = 0x204,kDVDMediaTypeRW = 0x205,kDVDMediaTypePlusRW = 0x206,kDVDMediaTypePlusR = 0x207,kDVDMediaTypeHDROM = 0x212,kDVDMediaTypeHDRAM = 0x213,kDVDMediaTypeHDR = 0x214,kDVDMediaTypeHDRW = 0x215,kDVDMediaTypeMin = 0x200,kDVDMediaTypeMax = 0x2FF,};
enum _ED18DE758DC47ADB658DF34C9461353C {kUSBAnyDesc = 0x0,kUSBDeviceDesc = 0x1,kUSBConfDesc = 0x2,kUSBStringDesc = 0x3,kUSBInterfaceDesc = 0x4,kUSBEndpointDesc = 0x5,kUSBDeviceQualifierDesc = 0x6,kUSBOtherSpeedConfDesc = 0x7,kUSBInterfacePowerDesc = 0x8,kUSBOnTheGoDesc = 0x9,kUSDebugDesc = 0xA,kUSBInterfaceAssociationDesc = 0xB,kUSBBOSDescriptor = 0xF,kUSBDeviceCapability = 0x10,kUSBSuperSpeedEndpointCompanion = 0x30,kUSB3HUBDesc = 0x2A,kUSBHIDDesc = 0x21,kUSBReportDesc = 0x22,kUSBPhysicalDesc = 0x23,kUSBHUBDesc = 0x29,};
enum _ED735B1566EFDFAA41B930C49A8810B1 {kIOStorageProvisionTypeMapped = 0x0,kIOStorageProvisionTypeDeallocated = 0x1,kIOStorageProvisionTypeAnchored = 0x2,};
enum _EDE2DDFDF8FA9712F58A3ECCA18669BE {kOFVariablePermRootOnly = 0x0,kOFVariablePermUserRead = 0x1,kOFVariablePermUserWrite = 0x2,kOFVariablePermKernelOnly = 0x3,};
enum _EE26AB826566BB0A596D8524286D8E47 {kDCLInvalidOp = 0x0,kDCLSendPacketStartOp = 0x1,kDCLSendPacketOp = 0x3,kDCLSendBufferOp = 0x4,kDCLReceivePacketStartOp = 0x5,kDCLReceivePacketOp = 0x6,kDCLReceiveBufferOp = 0x7,kDCLCallProcOp = 0x8,kDCLLabelOp = 0x9,kDCLJumpOp = 0xA,kDCLSetTagSyncBitsOp = 0xB,kDCLUpdateDCLListOp = 0xC,kDCLTimeStampOp = 0xD,kDCLPtrTimeStampOp = 0xE,kDCLSkipCycleOp = 0xF,kDCLNuDCLLeaderOp = 0x14,};
enum _EEAF613092620B80B043AD3AEECD25F9 {kIOReportCopyChannelData = 0x1,kIOReportTraceChannelData = 0x2,};
enum _EF23159F406BABF31224F6B28709CE82 {kIOTimingIDInvalid = 0x0,kIOTimingIDApple_FixedRateLCD = 0x2A,kIOTimingIDApple_512x384_60hz = 0x82,kIOTimingIDApple_560x384_60hz = 0x87,kIOTimingIDApple_640x480_67hz = 0x8C,kIOTimingIDApple_640x400_67hz = 0x91,kIOTimingIDVESA_640x480_60hz = 0x96,kIOTimingIDVESA_640x480_72hz = 0x98,kIOTimingIDVESA_640x480_75hz = 0x9A,kIOTimingIDVESA_640x480_85hz = 0x9E,kIOTimingIDGTF_640x480_120hz = 0x9F,kIOTimingIDApple_640x870_75hz = 0xA0,kIOTimingIDApple_640x818_75hz = 0xA5,kIOTimingIDApple_832x624_75hz = 0xAA,kIOTimingIDVESA_800x600_56hz = 0xB4,kIOTimingIDVESA_800x600_60hz = 0xB6,kIOTimingIDVESA_800x600_72hz = 0xB8,kIOTimingIDVESA_800x600_75hz = 0xBA,kIOTimingIDVESA_800x600_85hz = 0xBC,kIOTimingIDVESA_1024x768_60hz = 0xBE,kIOTimingIDVESA_1024x768_70hz = 0xC8,kIOTimingIDVESA_1024x768_75hz = 0xCC,kIOTimingIDVESA_1024x768_85hz = 0xD0,kIOTimingIDApple_1024x768_75hz = 0xD2,kIOTimingIDVESA_1152x864_75hz = 0xD7,kIOTimingIDApple_1152x870_75hz = 0xDC,kIOTimingIDAppleNTSC_ST = 0xE6,kIOTimingIDAppleNTSC_FF = 0xE8,kIOTimingIDAppleNTSC_STconv = 0xEA,kIOTimingIDAppleNTSC_FFconv = 0xEC,kIOTimingIDApplePAL_ST = 0xEE,kIOTimingIDApplePAL_FF = 0xF0,kIOTimingIDApplePAL_STconv = 0xF2,kIOTimingIDApplePAL_FFconv = 0xF4,kIOTimingIDVESA_1280x960_75hz = 0xFA,kIOTimingIDVESA_1280x960_60hz = 0xFC,kIOTimingIDVESA_1280x960_85hz = 0xFE,kIOTimingIDVESA_1280x1024_60hz = 0x104,kIOTimingIDVESA_1280x1024_75hz = 0x106,kIOTimingIDVESA_1280x1024_85hz = 0x10C,kIOTimingIDVESA_1600x1200_60hz = 0x118,kIOTimingIDVESA_1600x1200_65hz = 0x11A,kIOTimingIDVESA_1600x1200_70hz = 0x11C,kIOTimingIDVESA_1600x1200_75hz = 0x11E,kIOTimingIDVESA_1600x1200_80hz = 0x120,kIOTimingIDVESA_1600x1200_85hz = 0x121,kIOTimingIDVESA_1792x1344_60hz = 0x128,kIOTimingIDVESA_1792x1344_75hz = 0x12A,kIOTimingIDVESA_1856x1392_60hz = 0x12C,kIOTimingIDVESA_1856x1392_75hz = 0x12E,kIOTimingIDVESA_1920x1440_60hz = 0x130,kIOTimingIDVESA_1920x1440_75hz = 0x132,kIOTimingIDSMPTE240M_60hz = 0x190,kIOTimingIDFilmRate_48hz = 0x19A,kIOTimingIDSony_1600x1024_76hz = 0x1F4,kIOTimingIDSony_1920x1080_60hz = 0x1FE,kIOTimingIDSony_1920x1080_72hz = 0x208,kIOTimingIDSony_1920x1200_76hz = 0x21C,kIOTimingIDApple_0x0_0hz_Offline = 0x226,kIOTimingIDVESA_848x480_60hz = 0x23A,kIOTimingIDVESA_1360x768_60hz = 0x24E,};
enum _EF3B0F60C30703BFB39E43A5D498AE92 {kDepthDependent = 0x0,kDepthDependentMask = 0x1,};
enum _EF79D6721A78CD1C4B04A1BB99A949C2 {MBUF_TYPE_FREE = 0x0,MBUF_TYPE_DATA = 0x1,MBUF_TYPE_HEADER = 0x2,MBUF_TYPE_SOCKET = 0x3,MBUF_TYPE_PCB = 0x4,MBUF_TYPE_RTABLE = 0x5,MBUF_TYPE_HTABLE = 0x6,MBUF_TYPE_ATABLE = 0x7,MBUF_TYPE_SONAME = 0x8,MBUF_TYPE_SOOPTS = 0xA,MBUF_TYPE_FTABLE = 0xB,MBUF_TYPE_RIGHTS = 0xC,MBUF_TYPE_IFADDR = 0xD,MBUF_TYPE_CONTROL = 0xE,MBUF_TYPE_OOBDATA = 0xF,};
enum _EF8F14D2C5E271D8D39823EDBD46B31B {kBluetoothVoiceSettingInputSampleSizeMask = 0x20,kBluetoothVoiceSettingInputSampleSize8Bit = 0x0,kBluetoothVoiceSettingInputSampleSize16Bit = 0x20,};
enum _EF922A25C06D2B6C177566D8FA464E4E {kIOStoragePriorityHigh = 0x3F,kIOStoragePriorityDefault = 0x7F,kIOStoragePriorityLow = 0xBF,kIOStoragePriorityBackground = 0xFF,};
enum _F03BAF937F751D7E7ACE2205C01E8241 {kHIDUsage_Sprt_BaseballBat = 0x1,kHIDUsage_Sprt_GolfClub = 0x2,kHIDUsage_Sprt_RowingMachine = 0x3,kHIDUsage_Sprt_Treadmill = 0x4,kHIDUsage_Sprt_Oar = 0x30,kHIDUsage_Sprt_Slope = 0x31,kHIDUsage_Sprt_Rate = 0x32,kHIDUsage_Sprt_StickSpeed = 0x33,kHIDUsage_Sprt_StickFaceAngle = 0x34,kHIDUsage_Sprt_StickHeelOrToe = 0x35,kHIDUsage_Sprt_StickFollowThrough = 0x36,kHIDUsage_Sprt_StickTempo = 0x37,kHIDUsage_Sprt_StickType = 0x38,kHIDUsage_Sprt_StickHeight = 0x39,kHIDUsage_Sprt_Putter = 0x50,kHIDUsage_Sprt_1Iron = 0x51,kHIDUsage_Sprt_2Iron = 0x52,kHIDUsage_Sprt_3Iron = 0x53,kHIDUsage_Sprt_4Iron = 0x54,kHIDUsage_Sprt_5Iron = 0x55,kHIDUsage_Sprt_6Iron = 0x56,kHIDUsage_Sprt_7Iron = 0x57,kHIDUsage_Sprt_8Iron = 0x58,kHIDUsage_Sprt_9Iron = 0x59,kHIDUsage_Sprt_10Iron = 0x5A,kHIDUsage_Sprt_11Iron = 0x5B,kHIDUsage_Sprt_SandWedge = 0x5C,kHIDUsage_Sprt_LoftWedge = 0x5D,kHIDUsage_Sprt_PowerWedge = 0x5E,kHIDUsage_Sprt_1Wood = 0x5F,kHIDUsage_Sprt_3Wood = 0x60,kHIDUsage_Sprt_5Wood = 0x61,kHIDUsage_Sprt_7Wood = 0x62,kHIDUsage_Sprt_9Wood = 0x63,kHIDUsage_Sprt_Reserved = 0xFFFF,};
enum _F03FDFE5DC4760B8B8C7D68FF3AE09D2 {kFWDCLImmediateEvent = 0x0,kFWDCLCycleEvent = 0x1,kFWDCLSyBitsEvent = 0x2,};
enum _F04A22B81CBE2180B312581AD7890ADE {kIOHIDReportOptionNotInterrupt = 0x100,kIOHIDReportOptionVariableSize = 0x200,};
enum _F059CA9E1956E52119D3D97441AF825B {kError = 0xFFFFFFFF,kIterationDone = 0x0,kSuccess = 0x1,};
enum _F0B04B1C26700B4D1B6B23C1FB1A95CD {kNanosecondScale = 0x1,kMicrosecondScale = 0x3E8,kMillisecondScale = 0xF4240,kSecondScale = 0x3B9ACA00,kTickScale = 0x989680,};
enum _F0CC476EC5996455CD103F45FB223ADA {kHIDSuccess = 0x0,kHIDBaseError = 0xFFFFC982,kHIDNullStateErr = 0xFFFFC983,kHIDBufferTooSmallErr = 0xFFFFC984,kHIDValueOutOfRangeErr = 0xFFFFC985,kHIDUsageNotFoundErr = 0xFFFFC986,kHIDNotValueArrayErr = 0xFFFFC987,kHIDInvalidPreparsedDataErr = 0xFFFFC988,kHIDIncompatibleReportErr = 0xFFFFC989,kHIDBadLogPhysValuesErr = 0xFFFFC98A,kHIDInvalidReportTypeErr = 0xFFFFC98B,kHIDInvalidReportLengthErr = 0xFFFFC98C,kHIDNullPointerErr = 0xFFFFC98D,kHIDBadParameterErr = 0xFFFFC98E,kHIDNotEnoughMemoryErr = 0xFFFFC98F,kHIDEndOfDescriptorErr = 0xFFFFC990,kHIDUsagePageZeroErr = 0xFFFFC991,kHIDBadLogicalMinimumErr = 0xFFFFC992,kHIDBadLogicalMaximumErr = 0xFFFFC993,kHIDInvertedLogicalRangeErr = 0xFFFFC994,kHIDInvertedPhysicalRangeErr = 0xFFFFC995,kHIDUnmatchedUsageRangeErr = 0xFFFFC996,kHIDInvertedUsageRangeErr = 0xFFFFC997,kHIDUnmatchedStringRangeErr = 0xFFFFC998,kHIDUnmatchedDesignatorRangeErr = 0xFFFFC999,kHIDReportSizeZeroErr = 0xFFFFC99A,kHIDReportCountZeroErr = 0xFFFFC99B,kHIDReportIDZeroErr = 0xFFFFC99C,kHIDInvalidRangePageErr = 0xFFFFC99D,kHIDDeviceNotReady = 0xFFFFC9AA,kHIDVersionIncompatibleErr = 0xFFFFC9AB,};
enum _F0F0131800CDFF9212DA9084C49CB5E7 {kIOPreparationIDUnprepared = 0x0,kIOPreparationIDUnsupported = 0x1,kIOPreparationIDAlwaysPrepared = 0x2,};
enum _F13B17F4E980A04603DA5142146885EF {kIOLogAttach = 0x1,kIOLogProbe = 0x2,kIOLogStart = 0x4,kIOLogRegister = 0x8,kIOLogMatch = 0x10,kIOLogConfig = 0x20,kIOLogYield = 0x40,kIOLogPower = 0x80,kIOLogMapping = 0x100,kIOLogCatalogue = 0x200,kIOLogTracePower = 0x400,kIOLogDebugPower = 0x800,kIOLogServiceTree = 0x1000,kIOLogDTree = 0x2000,kIOLogMemory = 0x4000,kIOLogKextMemory = 0x8000,kOSLogRegistryMods = 0x10000,kIOLogPMRootDomain = 0x20000,kOSRegistryModsMode = 0x40000,kIOLogHibernate = 0x100000,kIOStatistics = 0x4000000,kIOSleepWakeWdogOff = 0x40000000,kIOKextSpinDump = 0x80000000,kIONoFreeObjects = 0x100000,kIOTracking = 0x400000,kIOWaitQuietPanics = 0x800000,kIOWaitQuietBeforeRoot = 0x1000000,kIOTrackingBoot = 0x2000000,_kIODebugTopFlag = 0x8000000000000000,};
enum _F13D04666FCA9CF9D625B8DE6A2A1364 {kIOAGPIdle = 0x1,kIOAGPInvalidGARTEntry = 0x2,kIOAGPAccessOutOfRange = 0x4,};
enum _F16FD49A88A3029201E4B3FE30A96F29 {kIOMediumOptionFullDuplex = 0x100000,kIOMediumOptionHalfDuplex = 0x200000,kIOMediumOptionFlowControl = 0x400000,kIOMediumOptionEEE = 0x800000,kIOMediumOptionFlag0 = 0x1000000,kIOMediumOptionFlag1 = 0x2000000,kIOMediumOptionFlag2 = 0x4000000,kIOMediumOptionLoopback = 0x8000000,};
enum _F1D36498F0818AF0E25DF520BC106614 {bATADCROne = 0x3,bATADCRReset = 0x2,bATADCRnIntEnable = 0x1,mATADCROne = 0x8,mATADCRReset = 0x4,mATADCRnIntEnable = 0x2,};
struct _F1E5C0A8677AE2D8B68EA797305E13C4 {unsigned int left;unsigned int right;};
enum _F2032E2838FCBFD548604221919BEF9A {kVBLInterruptServiceType = 0x76626C20,kHBLInterruptServiceType = 0x68626C20,kFrameInterruptServiceType = 0x6672616D,kConnectInterruptServiceType = 0x64636920,kFBConnectInterruptServiceType = 0x64636920,kFBChangedInterruptServiceType = 0x63686E67,kFBOfflineInterruptServiceType = 0x72656D76,kFBOnlineInterruptServiceType = 0x61646420,};
enum _F20860660247033DECC489B324838694 {kMaximumNumberOfInquiryAccessCodes = 0x40,};
enum _F4E72464708EE664F33EF030080984FF {kIOCLUTPixels = 0x0,kIOFixedCLUTPixels = 0x1,kIORGBDirectPixels = 0x2,kIOMonoDirectPixels = 0x3,kIOMonoInverseDirectPixels = 0x4,kIORGBSignedDirectPixels = 0x5,kIORGBSignedFloatingPointPixels = 0x6,};
enum _F4FDB28CC67AF4CB42032ADF993B6F23 {kIOBlitHasCGSSurface = 0x1,kIOBlitFixedSource = 0x2,kIOBlitBeamSyncSwaps = 0x4,kIOBlitReferenceSource = 0x8,};
enum _F508ED14CA271D42A770C6038A55BE8C {kIODMAMapOptionMapped = 0x0,kIODMAMapOptionBypassed = 0x1,kIODMAMapOptionNonCoherent = 0x2,kIODMAMapOptionUnmapped = 0x3,kIODMAMapOptionTypeMask = 0xF,kIODMAMapOptionNoCacheStore = 0x10,kIODMAMapOptionOnChip = 0x20,kIODMAMapOptionIterateOnly = 0x40,};
enum _F5168A3EDEA075C29106741F8D6CC96C {kUSBHostSetAddressTimeout = 0x3E8,kUSBHostStandardRequestNoDataTimeout = 0x0,kUSBHostStandardRequestCompletionTimeout = 0x1388,kUSBHostStandardRequestSimpleCompletionTimeout = 0x3E8,kUSBHostClassRequestNoDataTimeout = 0x0,kUSBHostClassRequestCompletionTimeout = 0x1388,kUSBHostVendorRequestNoDataTimeout = 0x0,kUSBHostVendorRequestCompletionTimeout = 0x1388,kUSBHostDefaultControlNoDataTimeoutMS = 0x0,kUSBHostDefaultControlCompletionTimeoutMS = 0x1388,};
enum _F5B2D058A72BAC91259ED5AD9890D03C {kIOUCVariableStructureSize = 0xFFFFFFFF,};
enum _F5D18A4D7C675247AE392B6F5F6E1711 {kIOFBNotifyDisplayModeWillChange = 0x1,kIOFBNotifyDisplayModeDidChange = 0x2,kIOFBNotifyWillSleep = 0x3,kIOFBNotifyDidWake = 0x4,kIOFBNotifyDidPowerOff = 0x5,kIOFBNotifyWillPowerOn = 0x6,kIOFBNotifyDidSleep = 0x5,kIOFBNotifyWillWake = 0x6,kIOFBNotifyWillPowerOff = 0x7,kIOFBNotifyDidPowerOn = 0x8,kIOFBNotifyWillChangeSpeed = 0x9,kIOFBNotifyDidChangeSpeed = 0xA,kIOFBNotifyClamshellChange = 0x14,kIOFBNotifyCaptureChange = 0x1E,kIOFBNotifyOnlineChange = 0x28,kIOFBNotifyDisplayDimsChange = 0x32,kIOFBNotifyProbed = 0x3C,kIOFBNotifyVRAMReady = 0x46,kIOFBNotifyWillNotify = 0x50,kIOFBNotifyDidNotify = 0x51,kIOFBNotifyWSAAWillEnterDefer = 0x5A,kIOFBNotifyWSAAWillExitDefer = 0x5B,kIOFBNotifyWSAADidEnterDefer = 0x5C,kIOFBNotifyWSAADidExitDefer = 0x5D,kIOFBNotifyWSAAEnterDefer = 0x5A,kIOFBNotifyWSAAExitDefer = 0x5B,kIOFBNotifyTerminated = 0x64,};
enum _F5E1E92A9D288A3C5E71838E285CEAE7 {kBluetoothSDPPDUIDReserved = 0x0,kBluetoothSDPPDUIDErrorResponse = 0x1,kBluetoothSDPPDUIDServiceSearchRequest = 0x2,kBluetoothSDPPDUIDServiceSearchResponse = 0x3,kBluetoothSDPPDUIDServiceAttributeRequest = 0x4,kBluetoothSDPPDUIDServiceAttributeResponse = 0x5,kBluetoothSDPPDUIDServiceSearchAttributeRequest = 0x6,kBluetoothSDPPDUIDServiceSearchAttributeResponse = 0x7,};
enum _F6BB108DDBF2BC8DF36E353824BA49CA {kDisplaySubPixelLayoutUndefined = 0x0,kDisplaySubPixelLayoutRGB = 0x1,kDisplaySubPixelLayoutBGR = 0x2,kDisplaySubPixelLayoutQuadGBL = 0x3,kDisplaySubPixelLayoutQuadGBR = 0x4,kDisplaySubPixelConfigurationUndefined = 0x0,kDisplaySubPixelConfigurationDelta = 0x1,kDisplaySubPixelConfigurationStripe = 0x2,kDisplaySubPixelConfigurationStripeOffset = 0x3,kDisplaySubPixelConfigurationQuad = 0x4,kDisplaySubPixelShapeUndefined = 0x0,kDisplaySubPixelShapeRound = 0x1,kDisplaySubPixelShapeSquare = 0x2,kDisplaySubPixelShapeRectangular = 0x3,kDisplaySubPixelShapeOval = 0x4,kDisplaySubPixelShapeElliptical = 0x5,};
enum _F71873F0DCEE5741415DA9A9A379497A {kAllModesValid = 0x0,kAllModesSafe = 0x1,kReportsTagging = 0x2,kHasDirectConnection = 0x3,kIsMonoDev = 0x4,kUncertainConnection = 0x5,kTaggingInfoNonStandard = 0x6,kReportsDDCConnection = 0x7,kHasDDCConnection = 0x8,kConnectionInactive = 0x9,kDependentConnection = 0xA,kBuiltInConnection = 0xB,kOverrideConnection = 0xC,kFastCheckForDDC = 0xD,kReportsHotPlugging = 0xE,kStereoSyncConnection = 0xF,};
enum _F72ED8DAE63E0364D0C5279532556AAE {kIOAudioControlChannelNumberInactive = 0xFFFFFFFF,kIOAudioControlChannelIDAll = 0x0,kIOAudioControlChannelIDDefaultLeft = 0x1,kIOAudioControlChannelIDDefaultRight = 0x2,kIOAudioControlChannelIDDefaultCenter = 0x3,kIOAudioControlChannelIDDefaultLeftRear = 0x4,kIOAudioControlChannelIDDefaultRightRear = 0x5,kIOAudioControlChannelIDDefaultSub = 0x6,kIOAudioControlChannelIDDefaultFrontLeftCenter = 0x7,kIOAudioControlChannelIDDefaultFrontRightCenter = 0x8,kIOAudioControlChannelIDDefaultRearCenter = 0x9,kIOAudioControlChannelIDDefaultSurroundLeft = 0xA,kIOAudioControlChannelIDDefaultSurroundRight = 0xB,};
enum _F7F22DF1D514F3C3EAE1989D19377E6C {kPerPortSwitchingBit = 0x1,kNoPowerSwitchingBit = 0x2,kCompoundDeviceBit = 0x4,kPerPortOverCurrentBit = 0x8,kNoOverCurrentBit = 0x10,kUSBHubOvercurrentMask = 0x18,kUSBHubOvercurrentShift = 0x3,kHubTTThinkTimeMask = 0x60,kHubTTThinkTimeShift = 0x5,kHubPortIndicatorBit = 0x7,kHubPortIndicatorMask = 0x80,};
enum _F87E6BD694A5DC61B6A103B5DEC84DCD {kIOPMInternalPower = 0x1,kIOPMExternalPower = 0x2,};
enum _F94CCD552A7E402C4C59E6DA0F9A934A {kHardwareCursorDescriptorMajorVersion = 0x1,kHardwareCursorDescriptorMinorVersion = 0x0,};
enum _F99D8DBC93D3B3A9B8B1E9375E1CED77 {kIOStorageOptionNone = 0x0,kIOStorageOptionForceUnitAccess = 0x1,kIOStorageOptionIsEncrypted = 0x10,kIOStorageOptionIsStatic = 0x20,kIOStorageOptionReserved = 0xFFCE,};
enum _F9A2B62ED3FBCE7CF14DC7391B7369E3 {kIOBlitMemoryRequiresHostFlush = 0x1,};
enum _FA2450DC797969ECCA856C9F6AA339A2 {kCSRStateUnitDepend = 0xFFFF0000,kCSRStateUnitDependPhase = 0x10,kCSRStateBusDepend = 0xFF00,kCSRStateBusDependPhase = 0x8,kCSRStateLost = 0x80,kCSRStateDReq = 0x40,kCSRStateELog = 0x10,kCSRStateAtn = 0x8,kCSRStateOff = 0x4,kCSRStateState = 0x3,kCSRStateStatePhase = 0x0,kCSRStateStateRunning = 0x0,kCSRStateStateInitializing = 0x1,kCSRStateStateTesting = 0x2,kCSRStateStateDead = 0x3,};
enum _FAC8470F19C25C1A0CC8AD2327DB3325 {kIOAudioSMPTETimeType24 = 0x0,kIOAudioSMPTETimeType25 = 0x1,kIOAudioSMPTETimeType30Drop = 0x2,kIOAudioSMPTETimeType30 = 0x3,kIOAudioSMPTETimeType2997 = 0x4,kIOAudioSMPTETimeType2997Drop = 0x5,kIOAudioSMPTETimeType60 = 0x6,kIOAudioSMPTETimeType5994 = 0x7,kIOAudioSMPTETimeType60Drop = 0x8,kIOAudioSMPTETimeType5994Drop = 0x9,kIOAudioSMPTETimeType50 = 0xA,kIOAudioSMPTETimeType2398 = 0xB,};
enum _FAD93919E4E55F13E9C55F0965FC32AC {kIOCatalogGetContents = 0x1,kIOCatalogGetModuleDemandList = 0x2,kIOCatalogGetCacheMissList = 0x3,kIOCatalogGetROMMkextList = 0x4,};
enum _FB204A0640E2588EA4E019E4DD9BE2E9 {kIOFBDisplayState_AlreadyActive = 0x1,kIOFBDisplayState_RestoredProfile = 0x2,kIOFBDisplayState_PipelineBlack = 0x4,kIOFBDisplayState_Mask = 0x7,};
enum _FB5AF07D6205D0D429F65C4D0C748ED6 {kIOTimeOptionsWithLeeway = 0x20,kIOTimeOptionsContinuous = 0x100,};
enum _FB8272726A2C35A604A93BFB55FF41D5 {kFFTRadix2 = 0x0,kFFTRadix3 = 0x1,kFFTRadix5 = 0x2,};
enum _FC017BB96D855034C1F45AB3FE6E2FF2 {kNVRAMProperty = 0x20,};
enum _FC41627E47B7BC63E034C1A66F065B7A {kDisplayModeIDCurrent = 0x0,kDisplayModeIDInvalid = 0xFFFFFFFF,kDisplayModeIDFindFirstResolution = 0xFFFFFFFE,kDisplayModeIDNoMoreResolutions = 0xFFFFFFFD,kDisplayModeIDFindFirstProgrammable = 0xFFFFFFFC,kDisplayModeIDBootProgrammable = 0xFFFFFFFB,kDisplayModeIDReservedBase = 0x80000000,};
enum _FCCF7EC5F06B34AFFDB7F01BE25951DA {kConfigBusInfoBlockLength = 0xFF000000,kConfigBusInfoBlockLengthPhase = 0x18,kConfigROMCRCLength = 0xFF0000,kConfigROMCRCLengthPhase = 0x10,kConfigROMCRCValue = 0xFFFF,kConfigROMCRCValuePhase = 0x0,kConfigEntryKeyType = 0xC0000000,kConfigEntryKeyTypePhase = 0x1E,kConfigEntryKeyValue = 0x3F000000,kConfigEntryKeyValuePhase = 0x18,kConfigEntryValue = 0xFFFFFF,kConfigEntryValuePhase = 0x0,kConfigLeafDirLength = 0xFFFF0000,kConfigLeafDirLengthPhase = 0x10,kConfigLeafDirCRC = 0xFFFF,kConfigLeafDirCRCPhase = 0x0,};
enum _FD19BC685AECB4240D6AA84AB6F75264 {bATABadBlock = 0x7,bATAUncorrectable = 0x6,bATAMediaChanged = 0x5,bATAIDNotFound = 0x4,bATAMediaChangeReq = 0x3,bATACommandAborted = 0x2,bATATrack0NotFound = 0x1,bATAAddressNotFound = 0x0,mATABadBlock = 0x80,mATAUncorrectable = 0x40,mATAMediaChanged = 0x20,mATAIDNotFound = 0x10,mATAMediaChangeReq = 0x8,mATACommandAborted = 0x4,mATATrack0NotFound = 0x2,mATAAddressNotFound = 0x1,};
enum _FD69F2CFD52716B323B489AB67F89985 {kUSBRel10 = 0x100,kUSBRel11 = 0x110,kUSBRel20 = 0x200,kUSBRel30 = 0x300,};
enum _FDD177917A8EB0AFEFD0381E2E884166 {kIOEnetPromiscuousModeOff = 0x0,kIOEnetPromiscuousModeOn = 0x1,kIOEnetPromiscuousModeAll = 0x1,kIOEnetMulticastModeOff = 0x0,kIOEnetMulticastModeFilter = 0x1,};
enum _FDE78A72FCB5AB4AB04C134E6D35371E {kUSB_EPDesc_bmAttributes_TranType_Mask = 0x3,kUSB_EPDesc_bmAttributes_TranType_Shift = 0x0,kUSB_EPDesc_bmAttributes_SyncType_Mask = 0xC,kUSB_EPDesc_bmAttributes_SyncType_Shift = 0x2,kUSB_EPDesc_bmAttributes_UsageType_Mask = 0x30,kUSB_EPDesc_bmAttributes_UsageType_Shift = 0x4,kUSB_EPDesc_wMaxPacketSize_MPS_Mask = 0x7FF,kUSB_EPDesc_wMaxPacketSize_MPS_Shift = 0x0,kUSB_EPDesc_MaxMPS = 0x400,kUSB_HSFSEPDesc_wMaxPacketSize_Mult_Mask = 0x1800,kUSB_HSFSEPDesc_wMaxPacketSize_Mult_Shift = 0xB,};
enum _FE1CE995AF504F65E45D21733901DD3B {kIOUserNotifyOptionCanDrop = 0x1,};
enum _FE6A156851BEC85D1ACB7552E4464077 {kC0DataMaxStringLen = 0x20,};
enum _FE74EB41B23F67A35AA21D5636632963 {kINQUIRY_Page83_AssociationLogicalUnit = 0x0,kINQUIRY_Page83_AssociationDevice = 0x0,kINQUIRY_Page83_AssociationTargetPort = 0x10,kINQUIRY_Page83_AssociationTargetDevice = 0x20,kINQUIRY_Page83_AssociationMask = 0x30,kINQUIRY_Page83_AssociationShift = 0x4,};
enum _FE9E8225040982F6C6765DE3B5266E19 {kIODisplayNeedsCEAUnderscan = 0x1,};
enum _FED3B7DE604C2B0A5CEED3117F8F6EF7 {kHFSFileLockedBit = 0x0,kHFSFileLockedMask = 0x1,kHFSThreadExistsBit = 0x1,kHFSThreadExistsMask = 0x2,kHFSHasAttributesBit = 0x2,kHFSHasAttributesMask = 0x4,kHFSHasSecurityBit = 0x3,kHFSHasSecurityMask = 0x8,kHFSHasFolderCountBit = 0x4,kHFSHasFolderCountMask = 0x10,kHFSHasLinkChainBit = 0x5,kHFSHasLinkChainMask = 0x20,kHFSHasChildLinkBit = 0x6,kHFSHasChildLinkMask = 0x40,kHFSHasDateAddedBit = 0x7,kHFSHasDateAddedMask = 0x80,kHFSFastDevPinnedBit = 0x8,kHFSFastDevPinnedMask = 0x100,kHFSDoNotFastDevPinBit = 0x9,kHFSDoNotFastDevPinMask = 0x200,kHFSFastDevCandidateBit = 0xA,kHFSFastDevCandidateMask = 0x400,kHFSAutoCandidateBit = 0xB,kHFSAutoCandidateMask = 0x800,};
enum _FEE201BC7372C23F920FCB78BFA59B79 {kATADefaultSectorSize = 0x200,};
enum _FF74CDD77D966C0B7B8DD6A9E1F41C6D {kOSStringNoCopy = 0x1,};
enum _FFBCCD6D512B326B0EF64A6800E7F445 {kVCDarkReboot = 0x1,kVCAcquireImmediate = 0x2,kVCUsePosition = 0x4,kVCDarkBackground = 0x8,kVCLightBackground = 0x10,};
enum _FFFBEEAA32A13B7A30CA01C572C5948C {kUSBHubLocalPowerChangeFeature = 0x0,kUSBHubOverCurrentChangeFeature = 0x1,kUSBHubPortConnectionFeature = 0x0,kUSBHubPortEnableFeature = 0x1,kUSBHubPortSuspendFeature = 0x2,kUSBHubPortOverCurrentFeature = 0x3,kUSBHubPortResetFeature = 0x4,kUSBHubPortPowerFeature = 0x8,kUSBHubPortLowSpeedFeature = 0x9,kUSBHubPortConnectionChangeFeature = 0x10,kUSBHubPortEnableChangeFeature = 0x11,kUSBHubPortSuspendChangeFeature = 0x12,kUSBHubPortOverCurrentChangeFeature = 0x13,kUSBHubPortResetChangeFeature = 0x14,kUSBHubPortTestFeature = 0x15,kUSBHubPortIndicatorFeature = 0x16,kUSBHubPortLinkStateFeature = 0x5,kUSBHubPortU1TimeoutFeature = 0x17,kUSBHubPortU2TimeoutFeature = 0x18,kUSBHubPortLinkStateChangeFeature = 0x19,kUSBHubPortConfigErrorChangeFeature = 0x1A,kUSBHubPortRemoteWakeMaskFeature = 0x1B,kUSBHubPortBHPortResetFeature = 0x1C,kUSBHubPortBHResetChangeFeature = 0x1D,kUSBHubPortForceLinkPMAcceptFeature = 0x1E,};
struct AVCCommandHandlerInfo_vtbl_layout; 
enum BluetoothAMPGetInfoResponseStatus {kBluetoothAMPManagerGetInfoResponseSuccess = 0x0,kBluetoothAMPManagerGetInfoResponseInvalidControllerID = 0x1,};
enum BluetoothHCIAuthentionEnableModes {kAuthenticationDisabled = 0x0,kAuthenticationEnabled = 0x1,};
enum BluetoothL2CAPCommandRejectReason {kBluetoothL2CAPCommandRejectReasonCommandNotUnderstood = 0x0,kBluetoothL2CAPCommandRejectReasonSignallingMTUExceeded = 0x1,kBluetoothL2CAPCommandRejectReasonInvalidCIDInRequest = 0x2,};
enum BluetoothL2CAPConfigurationOption {kBluetoothL2CAPConfigurationOptionMTU = 0x1,kBluetoothL2CAPConfigurationOptionFlushTimeout = 0x2,kBluetoothL2CAPConfigurationOptionQoS = 0x3,kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControl = 0x4,kBluetoothL2CAPConfigurationOptionFrameCheckSequence = 0x5,kBluetoothL2CAPConfigurationOptionExtendedFlowSpecification = 0x6,kBluetoothL2CAPConfigurationOptionExtendedWindowSize = 0x7,};
enum BluetoothL2CAPConfigurationResult {kBluetoothL2CAPConfigurationResultSuccess = 0x0,kBluetoothL2CAPConfigurationResultUnacceptableParams = 0x1,kBluetoothL2CAPConfigurationResultRejected = 0x2,kBluetoothL2CAPConfigurationResultUnknownOptions = 0x3,};
enum BluetoothLESecurityManagerOOBData {kBluetoothLESecurityManagerOOBAuthenticationDataNotPresent = 0x0,kBluetoothLESecurityManagerOOBAuthenticationDataPresent = 0x1,kBluetoothLESecurityManagerOOBDataReservedStart = 0x2,kBluetoothLESecurityManagerOOBDataReservedEnd = 0xFF,};
typedef FWMultiIsochReceiveListenerParamsStruct FWMultiIsochReceiveListenerParams;
struct IOAppleLabelScheme__ExpansionData {};
struct IOBDMediaBSDClient__ExpansionData {};
struct IOCDMediaBSDClient__ExpansionData {};
struct IODTPlatformExpert__ExpansionData {};
enum IOEthernetControllerAVBStateEvent {kIOEthernetControllerAVBStateEventDisable = 0x0,kIOEthernetControllerAVBStateEventEnable = 0x1,kIOEthernetControllerAVBStateEventStartTimeSync = 0x2,kIOEthernetControllerAVBStateEventStopTimeSync = 0x3,kIOEthernetControllerAVBStateEventStartStreaming = 0x4,kIOEthernetControllerAVBStateEventStopStreaming = 0x5,};
struct IOFWLocalIsochPort__ExpansionData {};
struct IOFireWirePCRSpace__ExpansionData {};
union IOGeneralMemoryDescriptor__Ranges {IOVirtualRange *v;IOAddressRange *v64;IOPhysicalRange *p;void *uio;};
struct IOMbufMemoryCursor__ExpansionData {};
typedef IOUSBDeviceCapabilityBillboard *IOUSBDeviceCapabilityBillboardPtr;
typedef IOUSBDeviceQualifierDescriptor *IOUSBDeviceQualifierDescriptorPtr;
struct IOUSBHostIOSourceClientRecordLink {IOUSBHostIOSourceClientRecord *le_next;IOUSBHostIOSourceClientRecord **le_prev;};
struct IOUSBHostIOSourceClientRecordList {IOUSBHostIOSourceClientRecord *lh_first;};
enum MACRO_kAVCAnyAvailableSubunitPlug {kAVCAnyAvailableSubunitPlug = 0xFF,};
enum MACRO_kIOFireWireAVCLibConnection {kIOFireWireAVCLibConnection = 13,};
enum MACRO_kIOMessageMediaAccessChange {kIOMessageMediaAccessChange = 0x69000036,};
enum MACRO_kVendorIDSourceBluetoothSIG {kVendorIDSourceBluetoothSIG = 0x1,kVendorIDSourceUSBIF = 0x2,};
enum StandardUSB30__tHubPortStatusCode {tHubPortStatusCodeStandard = 0x0,tHubPortStatusCodePD = 0x1,tHubPortStatusCodeExt = 0x2,tHubPortStatusCodeCount = 0x3,};
typedef host_can_has_debugger_info host_can_has_debugger_info_data_t;
enum BluetoothHCIPageScanEnableStates {kNoScansEnabled = 0x0,kInquiryScanEnabledPageScanDisabled = 0x1,kInquiryScanDisabledPageScanEnabled = 0x2,kInquiryScanEnabledPageScanEnabled = 0x3,};
enum BluetoothHCISCOFlowControlStates {kSCOFlowControlDisabled = 0x0,kSCOFlowControlEnabled = 0x1,};
enum BluetoothSimplePairingDebugModes {kBluetoothHCISimplePairingDebugModeDisabled = 0x0,kBluetoothHCISimplePairingDebugModeEnabled = 0x1,};
enum IOBlockStorageDriver__Statistics {kStatisticsReads = 0x0,kStatisticsBytesRead = 0x1,kStatisticsTotalReadTime = 0x2,kStatisticsLatentReadTime = 0x3,kStatisticsReadRetries = 0x4,kStatisticsReadErrors = 0x5,kStatisticsWrites = 0x6,kStatisticsSingleBlockWrites = 0x7,kStatisticsBytesWritten = 0x8,kStatisticsTotalWriteTime = 0x9,kStatisticsLatentWriteTime = 0xA,kStatisticsWriteRetries = 0xB,kStatisticsWriteErrors = 0xC,};
struct IOConfigDirectory__ExpansionData {};
struct IOFireWireAVCUnit__ExpansionData {OSArray *fAVCAsyncCommands;IOFireWireController *fControl;char enableRobustAVCCommandResponseMatching;};
enum IOFireWireController__ResetState {kResetStateResetting = 0x0,kResetStateDisabled = 0x1,kResetStateArbitrated = 0x2,};
struct IOFireWireDuplicateGUIDList_vtbl; 
struct IOFireWireSBP2LUN__ExpansionData {};
struct IOFireWireSBP2ORB__ExpansionData {};
struct IOFireWireUnitAux__ExpansionData {};
struct IONDRVFramebuffer__ExpansionData {};
struct IOPCIMessagedInterruptController;
struct IOPartitionScheme__ExpansionData {};
enum MACRO_kAVCPlugSignalFormatMPEGTS {kAVCPlugSignalFormatMPEGTS = 0xA0000000,};
enum MACRO_kBootArgsFlagRebootOnPanic {kBootArgsFlagRebootOnPanic = 1,kBootArgsFlagHiDPI = 2,kBootArgsFlagBlack = 4,kBootArgsFlagCSRActiveConfig = 8,kBootArgsFlagCSRConfigMode = 16,kBootArgsFlagCSRBoot = 32,kBootArgsFlagBlackBg = 64,kBootArgsFlagLoginUI = 128,kBootArgsFlagInstallUI = 256,};
enum MACRO_kBroadcastChannelValidMask {kBroadcastChannelValidMask = 0x40000000,};
enum MACRO_kOSKextLogVerboseFlagsMask {kOSKextLogVerboseFlagsMask = 0xFF0,kOSKextLogConfigMask = 0xF0000000,};
enum MACRO_kPMSleepWakeWatchdogEnable {kPMSleepWakeWatchdogEnable = 13,};
struct OSCollectionIterator_vtbl_layout; 
enum StandardUSB30__tLinkStateTimeout {kLinkStateSSInactiveQuietTimeout = 0xC,kLinkStateRxDetectQuietTimeout = 0xC,kLinkStatePollingLFPSTimeout = 0x168,kLinkStatePollingActiveTimeout = 0xC,kLinkStatePollingConfigurationTimeout = 0xC,kLinkStatePollingIdleTimeout = 0x2,kLinkStateU0RecoveryTimeout = 0x1,kLinkStateU0LTimeout = 0x0,kLinkStateU1NoLFPSResponseTimeout = 0x2,kLinkStateU1PingTimeout = 0x12C,kLinkStateU2NoLFPSResponseTimeout = 0x2,kLinKStateU2RxDetectDelay = 0x64,kLinkStateU3NoLFPSResponseTimeout = 0xA,kLinkStateU3WakeupRetryDelay = 0x64,kLinkStateU3RxDetectDelay = 0x64,kLinkStateRecoveryActiveTimeout = 0xC,kLinkStateRecoveryConfigurationTimeout = 0x6,kLinkStateRecoveryIdleTimeout = 0x2,kLinkStateLoopbackExitTimeout = 0x2,kLinkStateHotResetActiveTimeout = 0xC,kLinkStateHotResetExistTimeout = 0x2,kLinkStatePollingDeadline = 0x183,kLinkStateSSResumeDeadline = 0x1E,};
enum StandardUSB30__tTimingParameters {kTimingParameterBELTDefaultNs = 0xF4240,kTimingParameterBELTMinNs = 0x1E848,};
typedef VDConfigurationFeatureListRec *VDConfigurationFeatureListRecPtr;
typedef memory_object_behave_info memory_object_behave_info_data_t;
typedef task_inspect_basic_counts task_inspect_basic_counts_data_t;
typedef thread_latency_qos_policy thread_latency_qos_policy_data_t;
typedef vm_region_submap_short_info_64 *vm_region_submap_short_info_64_t;
struct AVCConnectionRecord_vtbl_layout; 
struct AppleMacIODevice__ExpansionData {};
enum BluetoothAMPCommandRejectReason {kBluetoothAMPManagerCommandRejectReasonCommandNotRecognized = 0x0,};
typedef BluetoothHCISupportedFeatures BluetoothHCILESupportedFeatures;
enum BluetoothHCIPageScanPeriodModes {kP0Mode = 0x0,kP1Mode = 0x1,kP2Mode = 0x2,};
enum BluetoothL2CAPInformationResult {kBluetoothL2CAPInformationResultSuccess = 0x0,kBluetoothL2CAPInformationResultNotSupported = 0x1,};
typedef _IOAudioSampleIntervalDescriptor IOAudioSampleIntervalDescriptor;
struct IODisplayConnect__ExpansionData {};
struct IOFWAddressSpace__ExpansionData {IOFWAddressSpaceAux *fAuxiliary;};
struct IOFWDelayCommand__ExpansionData {};
struct IOFWIsochChannel__ExpansionData {};
struct IOFireWireAVCProtocolUserClient;
struct IOFireWireBusAux__ExpansionData {};
struct IOFireWireDevice__ExpansionData {};
struct IOFireWireNubAux__ExpansionData {};
struct IOFireWireSessionRefOpaqueStuct;
struct IOMediaBSDClient__ExpansionData {};
struct IOPMPowerSourceList_vtbl_layout; 
struct IOPlatformDevice__ExpansionData {};
struct IOPlatformExpert__ExpansionData {};
struct IORegistryIterator__IORegCursor {IORegistryIterator__IORegCursor *next;IORegistryEntry *current;OSIterator *iter;};
typedef void *IOTimerEventSource__ActionBlock;
typedef IOUSBConfigurationDescHeader *IOUSBConfigurationDescHeaderPtr;
typedef IOUSBConfigurationDescriptor *IOUSBConfigurationDescriptorPtr;
enum IOUSBHostDevice__tIdleAssertion {kIdleAssertionInhibit = 0x0,kIdleAssertionPermit = 0x1,};
enum MACRO_IOMEMORYUSERESERVEDEFINED {IOMEMORYUSERESERVEDEFINED = 1,};
enum MACRO_IOTIMEREVENTSOURCEOPTIONS {IOTIMEREVENTSOURCEOPTIONS_DEFINED = 1,};
enum MACRO__IOBUFFERMEMORYDESCRIPTOR {_IOBUFFERMEMORYDESCRIPTOR_INTASKWITHOPTIONS_ = 1,_IOBUFFERMEMORYDESCRIPTOR_HOSTPHYSICALLYCONTIGUOUS_ = 1,};
enum MACRO_kAVCAnyAvailableIsochPlug {kAVCAnyAvailableIsochPlug = 0x7F,};
enum MACRO_kAVCPlugSignalFormatPalDV {kAVCPlugSignalFormatPalDV = 0x80800000,};
enum MACRO_kCDAudioStatusUnsupported {kCDAudioStatusUnsupported = 0x0,kCDAudioStatusActive = 0x11,};
enum MACRO_kGTraceMaximumBufferCount {kGTraceMaximumBufferCount = 32,};
enum MACRO_kIOACPIInterruptTypeValid {kIOACPIInterruptTypeValid = 2,};
enum MACRO_kIOHIDCurrentShmemVersion {kIOHIDCurrentShmemVersion = 4,};
enum MACRO_kIOMessageTrayStateChange {kIOMessageTrayStateChange = 0x69000035,};
enum MACRO_kPMSetClamshellSleepState {kPMSetClamshellSleepState = 12,};
enum MACRO_kPMSetUserAssertionLevels {kPMSetUserAssertionLevels = 9,};
typedef SCSICmd_INQUIRY_StandardData *SCSICmd_INQUIRY_StandardDataPtr;
typedef host_preferred_user_arch host_preferred_user_arch_data_t;
enum mach_port_guard_exception_codes {kGUARD_EXC_DESTROY = 0x1,kGUARD_EXC_MOD_REFS = 0x2,kGUARD_EXC_SET_CONTEXT = 0x4,kGUARD_EXC_UNGUARDED = 0x8,kGUARD_EXC_INCORRECT_GUARD = 0x10,kGUARD_EXC_INVALID_RIGHT = 0x100,kGUARD_EXC_INVALID_NAME = 0x200,kGUARD_EXC_INVALID_VALUE = 0x400,kGUARD_EXC_INVALID_ARGUMENT = 0x800,kGUARD_EXC_RIGHT_EXISTS = 0x1000,kGUARD_EXC_KERN_NO_SPACE = 0x2000,kGUARD_EXC_KERN_FAILURE = 0x4000,kGUARD_EXC_KERN_RESOURCE = 0x8000,kGUARD_EXC_SEND_INVALID_REPLY = 0x10000,kGUARD_EXC_SEND_INVALID_VOUCHER = 0x10000,kGUARD_EXC_SEND_INVALID_RIGHT = 0x20000,kGUARD_EXC_RCV_INVALID_NAME = 0x40000,kGUARD_EXC_RCV_INVALID_NOTIFY = 0x80000,};
typedef mach_voucher_attr_recipe_data mach_voucher_attr_recipe_data_t;
typedef processor_set_basic_info processor_set_basic_info_data_t;
typedef thread_background_policy thread_background_policy_data_t;
typedef thread_precedence_policy thread_precedence_policy_data_t;
typedef thread_time_constraint_policy *thread_time_constraint_policy_t;
typedef vm_region_submap_info_64 vm_region_submap_info_data_64_t;
typedef _AVCConnectTargetPlugsOutParams AVCConnectTargetPlugsOutParams;
enum BluetoothHCISimplePairingModes {kBluetoothHCISimplePairingModeNotSet = 0x0,kBluetoothHCISimplePairingModeEnabled = 0x1,};
enum BluetoothL2CAPConnectionResult {kBluetoothL2CAPConnectionResultSuccessful = 0x0,kBluetoothL2CAPConnectionResultPending = 0x1,kBluetoothL2CAPConnectionResultRefusedPSMNotSupported = 0x2,kBluetoothL2CAPConnectionResultRefusedSecurityBlock = 0x3,kBluetoothL2CAPConnectionResultRefusedNoResources = 0x4,kBluetoothL2CAPConnectionResultRefusedReserved = 0x5,kBluetoothL2CAPConnectionResultRefusedInvalidSourceCID = 0x6,kBluetoothL2CAPConnectionResultRefusedSourceCIDAlreadyAllocated = 0x7,};
enum BluetoothL2CAPConnectionStatus {kBluetoothL2CAPConnectionStatusNoInfoAvailable = 0x0,kBluetoothL2CAPConnectionStatusAuthenticationPending = 0x1,kBluetoothL2CAPConnectionStatusAuthorizationPending = 0x2,};
enum BluetoothLEScanDuplicateFilter {BluetoothLEScanDuplicateFilterDisable = 0x0,BluetoothLEScanDuplicateFilterEnable = 0x1,};
enum BluetoothOOBDataPresenceValues {kBluetoothOOBAuthenticationDataNotPresent = 0x0,kBluetoothOOBAuthenticationDataFromRemoteDevicePresent = 0x1,};
struct IOATABusCommand__ExpansionData {};
struct IOATAController__ExpansionData {IOBufferMemoryDescriptor *_doubleBufferDesc;};
enum IOFWSBP2UserClientCommandCodes {kIOFWSBP2UserClientOpen = 0x0,kIOFWSBP2UserClientClose = 0x1,kIOFWSBP2UserClientCreateLogin = 0x2,kIOFWSBP2UserClientReleaseLogin = 0x3,kIOFWSBP2UserClientSubmitLogin = 0x4,kIOFWSBP2UserClientSubmitLogout = 0x5,kIOFWSBP2UserClientSetLoginFlags = 0x6,kIOFWSBP2UserClientGetMaxCommandBlockSize = 0x7,kIOFWSBP2UserClientGetLoginID = 0x8,kIOFWSBP2UserClientSetReconnectTime = 0x9,kIOFWSBP2UserClientSetMaxPayloadSize = 0xA,kIOFWSBP2UserClientCreateORB = 0xB,kIOFWSBP2UserClientReleaseORB = 0xC,kIOFWSBP2UserClientSubmitORB = 0xD,kIOFWSBP2UserClientSetCommandFlags = 0xE,kIOFWSBP2UserClientSetMaxORBPayloadSize = 0xF,kIOFWSBP2UserClientSetCommandTimeout = 0x10,kIOFWSBP2UserClientSetCommandGeneration = 0x11,kIOFWSBP2UserClientSetToDummy = 0x12,kIOFWSBP2UserClientSetCommandBuffersAsRanges = 0x13,kIOFWSBP2UserClientReleaseCommandBuffers = 0x14,kIOFWSBP2UserClientSetCommandBlock = 0x15,kIOFWSBP2UserClientCreateMgmtORB = 0x16,kIOFWSBP2UserClientReleaseMgmtORB = 0x17,kIOFWSBP2UserClientSubmitMgmtORB = 0x18,kIOFWSBP2UserClientMgmtORBSetCommandFunction = 0x19,kIOFWSBP2UserClientMgmtORBSetManageeORB = 0x1A,kIOFWSBP2UserClientMgmtORBSetManageeLogin = 0x1B,kIOFWSBP2UserClientMgmtORBSetResponseBuffer = 0x1C,kIOFWSBP2UserClientLSIWorkaroundSetCommandBuffersAsRanges = 0x1D,kIOFWSBP2UserClientMgmtORBLSIWorkaroundSyncBuffersForOutput = 0x1E,kIOFWSBP2UserClientMgmtORBLSIWorkaroundSyncBuffersForInput = 0x1F,kIOFWSBP2UserClientOpenWithSessionRef = 0x20,kIOFWSBP2UserClientGetSessionRef = 0x21,kIOFWSBP2UserClientRingDoorbell = 0x22,kIOFWSBP2UserClientEnableUnsolicitedStatus = 0x23,kIOFWSBP2UserClientSetBusyTimeoutRegisterValue = 0x24,kIOFWSBP2UserClientSetORBRefCon = 0x25,kIOFWSBP2UserClientSetPassword = 0x26,kIOFWSBP2UserClientSetMessageCallback = 0x27,kIOFWSBP2UserClientSetLoginCallback = 0x28,kIOFWSBP2UserClientSetLogoutCallback = 0x29,kIOFWSBP2UserClientSetUnsolicitedStatusNotify = 0x2A,kIOFWSBP2UserClientSetStatusNotify = 0x2B,kIOFWSBP2UserClientSetMgmtORBCallback = 0x2C,kIOFWSBP2UserClientSubmitFetchAgentReset = 0x2D,kIOFWSBP2UserClientSetFetchAgentWriteCompletion = 0x2E,kIOFWSBP2UserClientNumCommands = 0x2F,};
enum IOFireWireController__busState {kStarting = 0x0,kAsleep = 0x1,kWaitingBusReset = 0x2,kWaitingSelfIDs = 0x3,kWaitingScan = 0x4,kScanning = 0x5,kWaitingPrune = 0x6,kRunning = 0x7,kWaitingBusResetStart = 0x8,};
typedef void (*IOInterruptEventSource__Action)(OSObject *, IOInterruptEventSource *, int);
struct IONetworkMedium__ExpansionData {};
struct IOPCI2PCIBridge__ExpansionData {};
struct IORegistryEntry__ExpansionData;
typedef void (*IORegistryEntryApplierFunction)(IORegistryEntry *, void *);
struct IORegistryIterator_vtbl_layout; 
struct IOWatchDogTimer__ExpansionData {};
enum MACRO_kIOEthernetMaxPacketSize {kIOEthernetMaxPacketSize = 1518,};
enum MACRO_kIOEthernetMinPacketSize {kIOEthernetMinPacketSize = 64,};
enum MACRO_kIOStreamBufferIDInvalid {kIOStreamBufferIDInvalid = -1,};
enum MACRO_kOSKextRequestTagInvalid {kOSKextRequestTagInvalid = 4294967295,};
typedef memory_object_attr_info memory_object_attr_info_data_t;
typedef memory_object_perf_info memory_object_perf_info_data_t;
typedef processor_cpu_load_info processor_cpu_load_info_data_t;
typedef processor_set_load_info processor_set_load_info_data_t;
typedef thread_throughput_qos_policy *thread_throughput_qos_policy_t;
typedef vm_region_basic_info_64 vm_region_basic_info_data_64_t;
typedef vm_region_extended_info vm_region_extended_info_data_t;
typedef _AVCConnectTargetPlugsInParams AVCConnectTargetPlugsInParams;
enum BluetoothHCIFECRequiredValues {kBluetoothHCIFECRequired = 0x0,kBluetoothHCIFECNotRequired = 0x1,};
enum BluetoothL2CAPInformationType {kBluetoothL2CAPInformationTypeConnectionlessMTU = 0x1,kBluetoothL2CAPInformationTypeExtendedFeatures = 0x2,kBluetoothL2CAPInformationTypeFixedChannelsSupported = 0x3,};
enum BluetoothLEConnectionInterval {BluetoothLEConnectionIntervalMin = 0x6,BluetoothLEConnectionIntervalMax = 0xC80,};
typedef FWSBP2LogoutCompleteParams *FWSBP2LogoutCompleteParamsPtr;
struct IOATADevConfig__ExpansionData {};
enum IOFWAVCUserClientCommandCodes {kIOFWAVCUserClientOpen = 0x0,kIOFWAVCUserClientClose = 0x1,kIOFWAVCUserClientOpenWithSessionRef = 0x2,kIOFWAVCUserClientGetSessionRef = 0x3,kIOFWAVCUserClientAVCCommand = 0x4,kIOFWAVCUserClientAVCCommandInGen = 0x5,kIOFWAVCUserClientUpdateAVCCommandTimeout = 0x6,kIOFWAVCUserClientMakeP2PInputConnection = 0x7,kIOFWAVCUserClientBreakP2PInputConnection = 0x8,kIOFWAVCUserClientMakeP2POutputConnection = 0x9,kIOFWAVCUserClientBreakP2POutputConnection = 0xA,kIOFWAVCUserClientCreateAsyncAVCCommand = 0xB,kIOFWAVCUserClientSubmitAsyncAVCCommand = 0xC,kIOFWAVCUserClientCancelAsyncAVCCommand = 0xD,kIOFWAVCUserClientReleaseAsyncAVCCommand = 0xE,kIOFWAVCUserClientReinitAsyncAVCCommand = 0xF,kIOFWAVCUserClientNumCommands = 0x10,};
struct IOFWBusCommand__ExpansionData {};
struct IOFilterScheme__ExpansionData {};
struct IOFireWireUnit__ExpansionData {};
struct IOFramebufferSharedUserClient;
struct IOInterruptAccountingReporter;
typedef void *IOServiceInterestHandlerBlock;
struct IOUSBNotification_vtbl_layout; 
struct IOVideoStreamFormatDictionary {};
enum MACRO_EV_DEFAULTINITIALREPEAT {EV_DEFAULTINITIALREPEAT = 500000000,EV_DEFAULTKEYREPEAT = 83333333,EV_MINKEYREPEAT = 16700000,EV_DEFAULTPOINTERACCELLEVEL = 45056,EV_DEFAULTSCROLLACCELLEVEL = 20480,};
enum MACRO_IOMULTIMEMORYDESCRIPTOR {IOMULTIMEMORYDESCRIPTOR_SUPPORTS_GETPAGECOUNTS = 1,};
enum MACRO_kACPIInterruptTypeValid {kACPIInterruptTypeValid = 2,kUSBHostTransferLimit = 1024,};
enum MACRO_kIOFBSetGammaSyncNoSync {kIOFBSetGammaSyncNoSync = 0,kIOFBSetGammaSyncVerticalBlankSync = 1,};
enum MACRO_kIOHistogramScaleLinear {kIOHistogramScaleLinear = 0,kIOHistogramScaleExponential = 1,};
enum MACRO_kIOPropertyTPGSInfoSize {kIOPropertyTPGSInfoSize = 8,};
enum MACRO_kIOReportScaleConstMask {kIOReportScaleConstMask = 0x7FFFFFFF,kIOReportScaleOneOver = 0x80000000,};
enum MACRO_kOSKextLogExplicitLevel {kOSKextLogExplicitLevel = 0x0,kOSKextLogErrorLevel = 0x1,kOSKextLogWarningLevel = 0x2,};
enum MACRO_kOSKextVersionMaxLength {kOSKextVersionMaxLength = 20,};
enum MACRO_kOSKextVersionUndefined {kOSKextVersionUndefined = 0,kOSKextLoadedKextSummaryVersion = 2,};
typedef _loaded_kext_summary_header OSKextLoadedKextSummaryHeader;
typedef SCSICmd_INQUIRY_PageCx_Header SCSICmd_INQUIRY_PAGECx_Header;
typedef void (*ccdes_key_set_odd_parity_fn_t)(void *, unsigned int);
struct in6_rrenumreq__irr_raflagmask {unsigned char onlink : 1;unsigned char autonomous : 1;unsigned char reserved : 6;};
typedef int memory_object_copy_strategy_t;
typedef policy_timeshare_limit policy_timeshare_limit_data_t;
typedef task_absolutetime_info task_absolutetime_info_data_t;
typedef task_affinity_tag_info task_affinity_tag_info_data_t;
typedef task_kernelmemory_info task_kernelmemory_info_data_t;
typedef task_thread_times_info task_thread_times_info_data_t;
typedef task_trace_memory_info task_trace_memory_info_data_t;
typedef thread_affinity_policy thread_affinity_policy_data_t;
typedef thread_extended_policy thread_extended_policy_data_t;
typedef thread_identifier_info thread_identifier_info_data_t;
typedef thread_standard_policy thread_standard_policy_data_t;
struct AppleUSBHostRequestCompleter;
enum BluetoothHCIInquiryScanTypes {kBluetoothHCIInquiryScanTypeStandard = 0x0,kBluetoothHCIInquiryScanTypeInterlaced = 0x1,kBluetoothHCIInquiryScanTypeReservedStart = 0x2,kBluetoothHCIInquiryScanTypeReservedEnd = 0xFF,};
typedef void (*FWAsyncStreamReceiveCallback)(void *,  void *);
typedef FWSBP2LoginCompleteParams *FWSBP2LoginCompleteParamsPtr;
struct IOAudioDevice__ExpansionData {unsigned long long idleSleepDelayTime;IOTimerEventSource *idleTimer;};
typedef _IOAudioStreamFormatExtension IOAudioStreamFormatExtension;
struct IOCommandGate__ExpansionData {};
struct IOCommandPool__ExpansionData {};
enum IODMACommand__MappingOptions {kMapped = 0x0,kBypassed = 0x1,kNonCoherent = 0x2,kUnmapped = 0x3,kTypeMask = 0xF,kNoCacheStore = 0x10,kOnChip = 0x20,kIterateOnly = 0x40,};
enum IOEthernetControllerAVBState {kIOEthernetControllerAVBStateDisabled = 0x0,kIOEthernetControllerAVBStateActivated = 0x1,kIOEthernetControllerAVBStateTimeSyncEnabled = 0x2,kIOEthernetControllerAVBStateAVBEnabled = 0x3,};
struct IOEventSource__ExpansionData {void *iokitstatsReserved;};
struct IOExtendedLBA__ExpansionData {};
typedef void (*IOFWARxReqIntCompleteHandler)(void *);
struct IOFireWireNub__ExpansionData {};
struct IOFramebuffer__ExpansionData {};
struct IOKitDiagnostics_vtbl_layout; 
struct IONetworkData__ExpansionData {};
struct IOOutputQueue__ExpansionData {};
struct IOPacketQueue__ExpansionData {};
typedef char (*IOServiceNotificationHandler)(void *, void *, IOService *);
enum IOUSBHostDevice__tPowerState {kPowerStateOff = 0x0,kPowerStateSuspended = 0x1,kPowerStateOn = 0x2,kPowerStateCount = 0x3,};
struct IOVideoDevice__ExpansionData {};
struct IOVideoStream__ExpansionData {};
typedef void (*KUNCUserNotificationCallBack)(int, int,  void *);
enum MACRO_MACH_VOUCHER_ATTR_BANK {MACH_VOUCHER_ATTR_BANK_NULL = 601,MACH_VOUCHER_ATTR_BANK_CREATE = 610,MACH_VOUCHER_BANK_CONTENT_SIZE = 500,};
enum MACRO_SECTION_ATTRIBUTES_SYS {SECTION_ATTRIBUTES_SYS = 0xFFFF00,};
enum MACRO_kAVCAllSubunitsAndUnit {kAVCAllSubunitsAndUnit = 0xEE,};
enum MACRO_kBluetoothLESMPTimeout {kBluetoothLESMPTimeout = 30,};
enum MACRO_kFWCmdIncreasedRetries {kFWCmdIncreasedRetries = 6,};
enum MACRO_kIOEthernetAddressSize {kIOEthernetAddressSize = 6,};
enum MACRO_kIOReportCardinalShift {kIOReportCardinalShift = 48,kIOReportCardinalMask = 71776119061217280,};
enum MACRO_kIOReportCategoryPower {kIOReportCategoryPower = 2,kIOReportCategoryTraffic = 4,kIOReportCategoryPerformance = 8,kIOReportCategoryPeripheral = 16,kIOReportCategoryField = 256,kIOReportCategoryDebug = 32768,};
enum MACRO_kIOReportScaleIECShift {kIOReportScaleIECShift = 40,kIOReportScaleIECMask = 280375465082880,};
enum MACRO_kOSKextLogSilentFilter {kOSKextLogSilentFilter = 0x0,kOSKextLogShowAllFilter = 0xFFFFFF7,};
enum MACRO_kPERefreshBootGraphics {kPERefreshBootGraphics = 9,};
enum MACRO_kSCSICmdFieldMask10Bit {kSCSICmdFieldMask10Bit = 0x3FF,};
enum MACRO_kSCSICmdFieldMask11Bit {kSCSICmdFieldMask11Bit = 0x7FF,};
enum MACRO_kSCSICmdFieldMask12Bit {kSCSICmdFieldMask12Bit = 0xFFF,};
enum MACRO_kSCSICmdFieldMask13Bit {kSCSICmdFieldMask13Bit = 0x1FFF,};
enum MACRO_kSCSICmdFieldMask14Bit {kSCSICmdFieldMask14Bit = 0x3FFF,};
enum MACRO_kSCSICmdFieldMask15Bit {kSCSICmdFieldMask15Bit = 0x7FFF,};
enum MACRO_kSCSICmdFieldMask17Bit {kSCSICmdFieldMask17Bit = 0x1FFFF,};
enum MACRO_kSCSICmdFieldMask18Bit {kSCSICmdFieldMask18Bit = 0x3FFFF,};
enum MACRO_kSCSICmdFieldMask19Bit {kSCSICmdFieldMask19Bit = 0x7FFFF,};
enum MACRO_kSCSICmdFieldMask1Byte {kSCSICmdFieldMask1Byte = 0xFF,};
enum MACRO_kSCSICmdFieldMask20Bit {kSCSICmdFieldMask20Bit = 0xFFFFF,};
enum MACRO_kSCSICmdFieldMask21Bit {kSCSICmdFieldMask21Bit = 0x1FFFFF,};
enum MACRO_kSCSICmdFieldMask22Bit {kSCSICmdFieldMask22Bit = 0x3FFFFF,};
enum MACRO_kSCSICmdFieldMask23Bit {kSCSICmdFieldMask23Bit = 0x7FFFFF,};
enum MACRO_kSCSICmdFieldMask25Bit {kSCSICmdFieldMask25Bit = 0x1FFFFFF,};
enum MACRO_kSCSICmdFieldMask26Bit {kSCSICmdFieldMask26Bit = 0x3FFFFFF,};
enum MACRO_kSCSICmdFieldMask27Bit {kSCSICmdFieldMask27Bit = 0x7FFFFFF,};
enum MACRO_kSCSICmdFieldMask28Bit {kSCSICmdFieldMask28Bit = 0xFFFFFFF,};
enum MACRO_kSCSICmdFieldMask29Bit {kSCSICmdFieldMask29Bit = 0x1FFFFFFF,};
enum MACRO_kSCSICmdFieldMask2Byte {kSCSICmdFieldMask2Byte = 0xFFFF,};
enum MACRO_kSCSICmdFieldMask30Bit {kSCSICmdFieldMask30Bit = 0x3FFFFFFF,};
enum MACRO_kSCSICmdFieldMask31Bit {kSCSICmdFieldMask31Bit = 0x7FFFFFFF,};
enum MACRO_kSCSICmdFieldMask33Bit {kSCSICmdFieldMask33Bit = 0x1FFFFFFFF,};
enum MACRO_kSCSICmdFieldMask34Bit {kSCSICmdFieldMask34Bit = 0x3FFFFFFFF,};
enum MACRO_kSCSICmdFieldMask35Bit {kSCSICmdFieldMask35Bit = 0x7FFFFFFFF,};
enum MACRO_kSCSICmdFieldMask36Bit {kSCSICmdFieldMask36Bit = 0xFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask37Bit {kSCSICmdFieldMask37Bit = 0x1FFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask38Bit {kSCSICmdFieldMask38Bit = 0x3FFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask39Bit {kSCSICmdFieldMask39Bit = 0x7FFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask3Byte {kSCSICmdFieldMask3Byte = 0xFFFFFF,};
enum MACRO_kSCSICmdFieldMask41Bit {kSCSICmdFieldMask41Bit = 0x1FFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask42Bit {kSCSICmdFieldMask42Bit = 0x3FFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask43Bit {kSCSICmdFieldMask43Bit = 0x7FFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask44Bit {kSCSICmdFieldMask44Bit = 0xFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask45Bit {kSCSICmdFieldMask45Bit = 0x1FFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask46Bit {kSCSICmdFieldMask46Bit = 0x3FFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask47Bit {kSCSICmdFieldMask47Bit = 0x7FFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask49Bit {kSCSICmdFieldMask49Bit = 0x1FFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask4Byte {kSCSICmdFieldMask4Byte = 0xFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask50Bit {kSCSICmdFieldMask50Bit = 0x3FFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask51Bit {kSCSICmdFieldMask51Bit = 0x7FFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask52Bit {kSCSICmdFieldMask52Bit = 0xFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask53Bit {kSCSICmdFieldMask53Bit = 0x1FFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask54Bit {kSCSICmdFieldMask54Bit = 0x3FFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask55Bit {kSCSICmdFieldMask55Bit = 0x7FFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask57Bit {kSCSICmdFieldMask57Bit = 0x1FFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask58Bit {kSCSICmdFieldMask58Bit = 0x3FFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask59Bit {kSCSICmdFieldMask59Bit = 0x7FFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask5Byte {kSCSICmdFieldMask5Byte = 0xFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask60Bit {kSCSICmdFieldMask60Bit = 0xFFFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask61Bit {kSCSICmdFieldMask61Bit = 0x1FFFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask62Bit {kSCSICmdFieldMask62Bit = 0x3FFFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask63Bit {kSCSICmdFieldMask63Bit = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask6Byte {kSCSICmdFieldMask6Byte = 0xFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask7Byte {kSCSICmdFieldMask7Byte = 0xFFFFFFFFFFFFFF,};
enum MACRO_kSCSICmdFieldMask8Byte {kSCSICmdFieldMask8Byte = 0xFFFFFFFF,};
enum StandardUSB30__tHubExtStatus {kHubExtStatusRxSublinkSpeedID = 0xF,kHubExtStatusRxSublinkSpeedIDPhase = 0x0,kHubExtStatusTxSublinkSpeedID = 0xF0,kHubExtStatusTxSublinkSpeedIDPhase = 0x4,kHubExtStatusRxLaneCount = 0xF00,kHubExtStatusRxLaneCountPhase = 0x8,kHubExtStatusTxLaneCount = 0xF000,kHubExtStatusTxLaneCountPhase = 0xC,};
enum StandardUSB30__tResetTimeout {kResetMinimumTimeout = 0x50,kResetTypicalTimeout = 0x64,kResetMaximumTimeout = 0x78,kResetMaximumWithMarginTimeout = 0x96,};
enum StandardUSB__tDescriptorSize {kDescriptorSize = 0x2,kDescriptorSizeDevice = 0x12,kDescriptorSizeConfiguration = 0x9,kDescriptorSizeInterface = 0x9,kDescriptorSizeEndpoint = 0x7,kDescriptorSizeStringMinimum = 0x2,kDescriptorSizeStringMaximum = 0xFF,kDescriptorSizeDeviceQualifier = 0xA,kDescriptorSizeInterfaceAssociation = 0x8,kDescriptorSizeBOS = 0x5,kDescriptorSizeDeviceCapability = 0x3,kDescriptorSizeUSB20ExtensionCapability = 0x7,kDescriptorSizeSuperSpeedUSBDeviceCapability = 0xA,kDescriptorSizeContainerIDCapability = 0x14,kDescriptorSizeHubMinimum = 0x9,kDescriptorSizeHubMaximum = 0x15,kDescriptorSizeSuperSpeedHub = 0xC,kDescriptorSizeSuperSpeedUSBEndpointCompanion = 0x6,kDescriptorSizeSuperSpeedPlusIsochronousEndpointCompanion = 0x8,kDescriptorSizeBillboardDeviceMinimum = 0x2C,kDescriptorSizeBillboardDeviceMaximum = 0x100,kDescriptorSizePlatformECIDCapability = 0x1C,};
enum StandardUSB__tDescriptorType {kDescriptorTypeDevice = 0x1,kDescriptorTypeConfiguration = 0x2,kDescriptorTypeString = 0x3,kDescriptorTypeInterface = 0x4,kDescriptorTypeEndpoint = 0x5,kDescriptorTypeDeviceQualifier = 0x6,kDescriptorTypeOtherSpeedConfiguration = 0x7,kDescriptorTypeInterfacePower = 0x8,kDescriptorTypeOTG = 0x9,kDescriptorTypeDebug = 0xA,kDescriptorTypeInterfaceAssociation = 0xB,kDescriptorTypeBOS = 0xF,kDescriptorTypeDeviceCapability = 0x10,kDescriptorTypeHub = 0x29,kDescriptorTypeSuperSpeedHub = 0x2A,kDescriptorTypeSuperSpeedUSBEndpointCompanion = 0x30,kDescriptorTypeSuperSpeedPlusIsochronousEndpointCompanion = 0x31,};
typedef VDHardwareCursorDrawStateRec *VDHardwareCursorDrawStatePtr;
enum _IOAudioControlNotifications {kIOAudioControlValueChangeNotification = 0x0,kIOAudioControlRangeChangeNotification = 0x1,};
typedef char _img4_payload_opaque_data_32[316];
typedef char _img4_payload_opaque_data_64[488];
typedef host_can_has_debugger_info *host_can_has_debugger_info_t;
typedef kernel_resource_sizes kernel_resource_sizes_data_t;
typedef mach_msg_type_descriptor_t *mig_routine_arg_descriptor_t;
typedef policy_timeshare_base policy_timeshare_base_data_t;
typedef policy_timeshare_info policy_timeshare_info_data_t;
typedef rpc_routine_arg_descriptor *rpc_routine_arg_descriptor_t;
typedef vm_region_submap_info vm_region_submap_info_data_t;
struct ATADeviceNub__ExpansionData {};
enum BluetoothHCIConnectionModes {kConnectionActiveMode = 0x0,kConnectionHoldMode = 0x1,kConnectionSniffMode = 0x2,kConnectionParkMode = 0x3,kConnectionModeReservedForFutureUse = 0x4,};
enum BluetoothHCIEncryptionModes {kEncryptionDisabled = 0x0,kEncryptionOnlyForPointToPointPackets = 0x1,kEncryptionForBothPointToPointAndBroadcastPackets = 0x2,};
typedef IOHardwareCursorDescriptor HardwareCursorDescriptorRec;
struct IOATABusInfo__ExpansionData {};
struct IOATACommand__ExpansionData {IOExtendedLBA *extLBA;};
enum IOATAController__transState {kATAInitial = 0x0,kATAStarted = 0x1,kATAPICmd = 0x2,kATADataTx = 0x3,kATAStatus = 0x4,kATAComplete = 0x5,kATADone = 0x6,};
typedef _IOAudioBufferDataDescriptor IOAudioBufferDataDescriptor;
typedef _IOAudioStreamDataDescriptor IOAudioStreamDataDescriptor;
struct IOConditionLock_vtbl_layout; 
typedef IODetailedTimingInformationV2 IODetailedTimingInformation;
struct IOFWUserObjectExporter_vtbl; 
struct IOHIDElement__ExpansionData {};
struct IOHIPointing__ExpansionData;
typedef IOUSBInterfaceDescriptor *IOUSBInterfaceDescriptorPtr;
struct IOUserClient__ExpansionData {void *iokitstatsReserved;};
enum MACRO_MACH_VOUCHER_ATTR_ATM {MACH_VOUCHER_ATTR_ATM_NULL = 501,MACH_VOUCHER_ATTR_ATM_CREATE = 510,MACH_VOUCHER_ATTR_ATM_REGISTER = 511,};
enum MACRO_MACH_VOUCHER_SELECTOR {MACH_VOUCHER_SELECTOR_CURRENT = 0,MACH_VOUCHER_SELECTOR_EFFECTIVE = 1,MACH_VOUCHER_ATTR_KEY_ALL = 4294967295,MACH_VOUCHER_ATTR_KEY_NONE = 0,MACH_VOUCHER_ATTR_KEY_ATM = 1,MACH_VOUCHER_ATTR_KEY_IMPORTANCE = 2,MACH_VOUCHER_ATTR_KEY_BANK = 3,MACH_VOUCHER_ATTR_KEY_PTHPRIORITY = 4,MACH_VOUCHER_ATTR_KEY_USER_DATA = 7,MACH_VOUCHER_ATTR_KEY_TEST = 8,MACH_VOUCHER_ATTR_NOOP = 0,MACH_VOUCHER_ATTR_COPY = 1,MACH_VOUCHER_ATTR_REMOVE = 2,MACH_VOUCHER_ATTR_SET_VALUE_HANDLE = 3,MACH_VOUCHER_ATTR_AUTO_REDEEM = 4,MACH_VOUCHER_ATTR_SEND_PREPROCESS = 5,MACH_VOUCHER_ATTR_REDEEM = 10,MACH_VOUCHER_ATTR_IMPORTANCE_SELF = 200,MACH_VOUCHER_ATTR_USER_DATA_STORE = 211,MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE = 5120,MACH_VOUCHER_TRAP_STACK_LIMIT = 256,MACH_VOUCHER_ATTR_MANAGER_NULL = 0,MACH_VOUCHER_ATTR_CONTROL_NULL = 0,};
enum MACRO_kCDAudioStatusFailure {kCDAudioStatusFailure = 0x14,};
enum MACRO_kCDAudioStatusSuccess {kCDAudioStatusSuccess = 0x13,};
enum MACRO_kEHCIIsochMaxBusStall {kEHCIIsochMaxBusStall = 25000,};
enum MACRO_kEnTrActKernSockWrite {kEnTrActKernSockWrite = 3,};
enum MACRO_kIOReportChannelIDIdx {kIOReportChannelIDIdx = 0,kIOReportChannelTypeIdx = 1,kIOReportChannelNameIdx = 2,};
enum MACRO_kIOReportScaleSIShift {kIOReportScaleSIShift = 32,kIOReportScaleSIMask = 1095216660480,};
enum MACRO_kNoIdleAudioPowerDown {kNoIdleAudioPowerDown = 0xFFFFFFFF,};
enum MACRO_kOHCIIsochMaxBusStall {kOHCIIsochMaxBusStall = 25000,};
enum MACRO_kOSKextInvalidLoadTag {kOSKextInvalidLoadTag = 4294967295,};
enum MACRO_kOSKextLogDetailLevel {kOSKextLogDetailLevel = 0x6,};
enum MACRO_kPMGetSystemSleepType {kPMGetSystemSleepType = 11,};
enum MACRO_kPMSleepSystemOptions {kPMSleepSystemOptions = 7,kPMSetMaintenanceWakeCalendar = 8,};
enum MACRO_kPMSleepWakeDebugTrig {kPMSleepWakeDebugTrig = 14,};
enum MACRO_kSCSICmdFieldMask1Bit {kSCSICmdFieldMask1Bit = 0x1,};
enum MACRO_kSCSICmdFieldMask2Bit {kSCSICmdFieldMask2Bit = 0x3,};
enum MACRO_kSCSICmdFieldMask3Bit {kSCSICmdFieldMask3Bit = 0x7,};
enum MACRO_kSCSICmdFieldMask4Bit {kSCSICmdFieldMask4Bit = 0xF,};
enum MACRO_kSCSICmdFieldMask5Bit {kSCSICmdFieldMask5Bit = 0x1F,};
enum MACRO_kSCSICmdFieldMask6Bit {kSCSICmdFieldMask6Bit = 0x3F,};
enum MACRO_kSCSICmdFieldMask7Bit {kSCSICmdFieldMask7Bit = 0x7F,};
enum MACRO_kSCSICmdFieldMask9Bit {kSCSICmdFieldMask9Bit = 0x1FF,};
enum MACRO_kUHCIIsochMaxBusStall {kUHCIIsochMaxBusStall = 10000,};
enum MACRO_kXHCIIsochMaxBusStall {kXHCIIsochMaxBusStall = 25000,};
struct OSDictionary__ExpansionData {};
struct OSMetaClassBase_vtbl_layout; 
struct OSOrderedSet__ExpansionData {};
enum SDPAttributeIdentifierCodes {kBluetoothSDPAttributeIdentifierServiceRecordHandle = 0x0,kBluetoothSDPAttributeIdentifierServiceClassIDList = 0x1,kBluetoothSDPAttributeIdentifierServiceRecordState = 0x2,kBluetoothSDPAttributeIdentifierServiceID = 0x3,kBluetoothSDPAttributeIdentifierProtocolDescriptorList = 0x4,kBluetoothSDPAttributeIdentifierBrowseGroupList = 0x5,kBluetoothSDPAttributeIdentifierLanguageBaseAttributeIDList = 0x6,kBluetoothSDPAttributeIdentifierServiceInfoTimeToLive = 0x7,kBluetoothSDPAttributeIdentifierServiceAvailability = 0x8,kBluetoothSDPAttributeIdentifierBluetoothProfileDescriptorList = 0x9,kBluetoothSDPAttributeIdentifierDocumentationURL = 0xA,kBluetoothSDPAttributeIdentifierClientExecutableURL = 0xB,kBluetoothSDPAttributeIdentifierIconURL = 0xC,kBluetoothSDPAttributeIdentifierAdditionalProtocolsDescriptorList = 0xD,kBluetoothSDPAttributeIdentifierVersionNumberList = 0x200,kBluetoothSDPAttributeIdentifierServiceDatabaseState = 0x201,kBluetoothSDPAttributeIdentifierGroupID = 0x200,kBluetoothSDPAttributeIdentifierIPSubnet = 0x200,kBluetoothSDPAttributeIdentifierHIDReleaseNumber = 0x200,kBluetoothSDPAttributeIdentifierHIDParserVersion = 0x201,kBluetoothSDPAttributeIdentifierHIDDeviceSubclass = 0x202,kBluetoothSDPAttributeIdentifierHIDCountryCode = 0x203,kBluetoothSDPAttributeIdentifierHIDVirtualCable = 0x204,kBluetoothSDPAttributeIdentifierHIDReconnectInitiate = 0x205,kBluetoothSDPAttributeIdentifierHIDDescriptorList = 0x206,kBluetoothSDPAttributeIdentifierHIDLangIDBaseList = 0x207,kBluetoothSDPAttributeIdentifierHIDSDPDisable = 0x208,kBluetoothSDPAttributeIdentifierHIDBatteryPower = 0x209,kBluetoothSDPAttributeIdentifierHIDRemoteWake = 0x20A,kBluetoothSDPAttributeIdentifierHIDProfileVersion = 0x20B,kBluetoothSDPAttributeIdentifierHIDSupervisionTimeout = 0x20C,kBluetoothSDPAttributeIdentifierHIDNormallyConnectable = 0x20D,kBluetoothSDPAttributeIdentifierHIDBootDevice = 0x20E,kBluetoothSDPAttributeIdentifierHIDSSRHostMaxLatency = 0x20F,kBluetoothSDPAttributeIdentifierHIDSSRHostMinTimeout = 0x210,kBluetoothSDPAttributeIdentifierServiceVersion = 0x300,kBluetoothSDPAttributeIdentifierExternalNetwork = 0x301,kBluetoothSDPAttributeIdentifierNetwork = 0x301,kBluetoothSDPAttributeIdentifierSupportedDataStoresList = 0x301,kBluetoothSDPAttributeIdentifierFaxClass1Support = 0x302,kBluetoothSDPAttributeIdentifierRemoteAudioVolumeControl = 0x302,kBluetoothSDPAttributeIdentifierFaxClass2_0Support = 0x303,kBluetoothSDPAttributeIdentifierSupporterFormatsList = 0x303,kBluetoothSDPAttributeIdentifierFaxClass2Support = 0x304,kBluetoothSDPAttributeIdentifierAudioFeedbackSupport = 0x305,kBluetoothSDPAttributeIdentifierNetworkAddress = 0x306,kBluetoothSDPAttributeIdentifierWAPGateway = 0x307,kBluetoothSDPAttributeIdentifierHomepageURL = 0x308,kBluetoothSDPAttributeIdentifierWAPStackType = 0x309,kBluetoothSDPAttributeIdentifierSecurityDescription = 0x30A,kBluetoothSDPAttributeIdentifierNetAccessType = 0x30B,kBluetoothSDPAttributeIdentifierMaxNetAccessRate = 0x30C,kBluetoothSDPAttributeIdentifierSupportedCapabilities = 0x310,kBluetoothSDPAttributeIdentifierSupportedFeatures = 0x311,kBluetoothSDPAttributeIdentifierSupportedFunctions = 0x312,kBluetoothSDPAttributeIdentifierTotalImagingDataCapacity = 0x313,kBluetoothSDPAttributeIdentifierServiceName = 0x0,kBluetoothSDPAttributeIdentifierServiceDescription = 0x1,kBluetoothSDPAttributeIdentifierProviderName = 0x2,};
typedef UserExportDCLSetTagSyncBitsStruct UserExportDCLSetTagSyncBits;
typedef UserExportDCLTransferBufferStruct UserExportDCLTransferBuffer;
typedef UserExportDCLTransferPacketStruct UserExportDCLTransferPacket;
typedef VDSupportsHardwareCursorRec *VDSupportsHardwareCursorPtr;
enum _IOAudioEngineNotifications {kIOAudioEngineAllNotifications = 0x0,kIOAudioEngineStreamFormatChangeNotification = 0x1,kIOAudioEngineChangeNotification = 0x2,kIOAudioEngineStartedNotification = 0x3,kIOAudioEngineStoppedNotification = 0x4,kIOAudioEnginePausedNotification = 0x5,kIOAudioEngineResumedNotification = 0x6,};
typedef kcdata_subtype_descriptor *kcdata_subtype_descriptor_t;
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;
typedef mach_task_basic_info mach_task_basic_info_data_t;
typedef memory_object_behave_info *memory_object_behave_info_t;
typedef void *priority_queue_compare_fn_t;
typedef processor_basic_info processor_basic_info_data_t;
typedef task_category_policy task_category_policy_data_t;
typedef task_inspect_basic_counts *task_inspect_basic_counts_t;
typedef task_wait_state_info task_wait_state_info_data_t;
typedef thread_extended_info thread_extended_info_data_t;
typedef thread_latency_qos_policy *thread_latency_qos_policy_t;
typedef user32_fbootstraptransfer user32_fbootstraptransfer_t;
typedef vm_extmod_statistics vm_extmod_statistics_data_t;
typedef vm_region_basic_info vm_region_basic_info_data_t;
typedef int *vm_region_recurse_info_64_t;
struct AVCCommandHandlerInfo_vtbl; 
struct AVCSubunitInfo_vtbl_layout; 
enum BluetoothCompanyIdentifers {kBluetoothCompanyIdentiferEricssonTechnologyLicensing = 0x0,kBluetoothCompanyIdentiferNokiaMobilePhones = 0x1,kBluetoothCompanyIdentiferIntel = 0x2,kBluetoothCompanyIdentiferIBM = 0x3,kBluetoothCompanyIdentiferToshiba = 0x4,kBluetoothCompanyIdentifer3Com = 0x5,kBluetoothCompanyIdentiferMicrosoft = 0x6,kBluetoothCompanyIdentiferLucent = 0x7,kBluetoothCompanyIdentiferMotorola = 0x8,kBluetoothCompanyIdentiferInfineonTechnologiesAG = 0x9,kBluetoothCompanyIdentiferCambridgeSiliconRadio = 0xA,kBluetoothCompanyIdentiferSiliconWave = 0xB,kBluetoothCompanyIdentiferDigianswerAS = 0xC,kBluetoothCompanyIdentiferTexasInstruments = 0xD,kBluetoothCompanyIdentiferParthusTechnologies = 0xE,kBluetoothCompanyIdentiferBroadcom = 0xF,kBluetoothCompanyIdentiferMitelSemiconductor = 0x10,kBluetoothCompanyIdentiferWidcomm = 0x11,kBluetoothCompanyIdentiferZeevo = 0x12,kBluetoothCompanyIdentiferAtmel = 0x13,kBluetoothCompanyIdentiferMistubishiElectric = 0x14,kBluetoothCompanyIdentiferRTXTelecom = 0x15,kBluetoothCompanyIdentiferKCTechnology = 0x16,kBluetoothCompanyIdentiferNewlogic = 0x17,kBluetoothCompanyIdentiferTransilica = 0x18,kBluetoothCompanyIdentiferRohdeandSchwarz = 0x19,kBluetoothCompanyIdentiferTTPCom = 0x1A,kBluetoothCompanyIdentiferSigniaTechnologies = 0x1B,kBluetoothCompanyIdentiferConexantSystems = 0x1C,kBluetoothCompanyIdentiferQualcomm = 0x1D,kBluetoothCompanyIdentiferInventel = 0x1E,kBluetoothCompanyIdentiferAVMBerlin = 0x1F,kBluetoothCompanyIdentiferBandspeed = 0x20,kBluetoothCompanyIdentiferMansella = 0x21,kBluetoothCompanyIdentiferNEC = 0x22,kBluetoothCompanyIdentiferWavePlusTechnology = 0x23,kBluetoothCompanyIdentiferAlcatel = 0x24,kBluetoothCompanyIdentiferPhilipsSemiconductor = 0x25,kBluetoothCompanyIdentiferCTechnologies = 0x26,kBluetoothCompanyIdentiferOpenInterface = 0x27,kBluetoothCompanyIdentiferRFCMicroDevices = 0x28,kBluetoothCompanyIdentiferHitachi = 0x29,kBluetoothCompanyIdentiferSymbolTechnologies = 0x2A,kBluetoothCompanyIdentiferTenovis = 0x2B,kBluetoothCompanyIdentiferMacronixInternational = 0x2C,kBluetoothCompanyIdentiferGCTSemiconductor = 0x2D,kBluetoothCompanyIdentiferNorwoodSystems = 0x2E,kBluetoothCompanyIdentiferMewTelTechnology = 0x2F,kBluetoothCompanyIdentiferSTMicroelectronics = 0x30,kBluetoothCompanyIdentiferSynopsys = 0x31,kBluetoothCompanyIdentiferRedMCommunications = 0x32,kBluetoothCompanyIdentiferCommil = 0x33,kBluetoothCompanyIdentiferCATC = 0x34,kBluetoothCompanyIdentiferEclipse = 0x35,kBluetoothCompanyIdentiferRenesasTechnology = 0x36,kBluetoothCompanyIdentiferMobilian = 0x37,kBluetoothCompanyIdentiferTerax = 0x38,kBluetoothCompanyIdentiferIntegratedSystemSolution = 0x39,kBluetoothCompanyIdentiferMatsushitaElectricIndustrial = 0x3A,kBluetoothCompanyIdentiferGennum = 0x3B,kBluetoothCompanyIdentiferResearchInMotion = 0x3C,kBluetoothCompanyIdentiferIPextreme = 0x3D,kBluetoothCompanyIdentiferSystemsAndChips = 0x3E,kBluetoothCompanyIdentiferBluetoothSIG = 0x3F,kBluetoothCompanyIdentiferSeikoEpson = 0x40,kBluetoothCompanyIdentiferIntegratedSiliconSolution = 0x41,kBluetoothCompanyIdentiferCONWISETechnology = 0x42,kBluetoothCompanyIdentiferParrotSA = 0x43,kBluetoothCompanyIdentiferSocketCommunications = 0x44,kBluetoothCompanyIdentiferAtherosCommunications = 0x45,kBluetoothCompanyIdentiferMediaTek = 0x46,kBluetoothCompanyIdentiferBluegiga = 0x47,kBluetoothCompanyIdentiferMarvellTechnologyGroup = 0x48,kBluetoothCompanyIdentifer3DSP = 0x49,kBluetoothCompanyIdentiferAccelSemiconductor = 0x4A,kBluetoothCompanyIdentiferContinentialAutomotiveSystems = 0x4B,kBluetoothCompanyIdentiferApple = 0x4C,kBluetoothCompanyIdentiferStaccatoCommunications = 0x4D,kBluetoothCompanyIdentiferAvagoTechnologies = 0x4E,kBluetoothCompanyIdentiferAPT = 0x4F,kBluetoothCompanyIdentiferSiRFTechnology = 0x50,kBluetoothCompanyIdentiferTZeroTechnologies = 0x51,kBluetoothCompanyIdentiferJandM = 0x52,kBluetoothCompanyIdentiferFree2Move = 0x53,kBluetoothCompanyIdentifer3DiJoy = 0x54,kBluetoothCompanyIdentiferPlantronics = 0x55,kBluetoothCompanyIdentiferSonyEricssonMobileCommunications = 0x56,kBluetoothCompanyIdentiferHarmonInternational = 0x57,kBluetoothCompanyIdentiferVisio = 0x58,kBluetoothCompanyIdentiferNordicSemiconductor = 0x59,kBluetoothCompanyIdentiferEMMicroElectronicMarin = 0x5A,kBluetoothCompanyIdentiferRalinkTechnology = 0x5B,kBluetoothCompanyIdentiferBelkinInternational = 0x5C,kBluetoothCompanyIdentiferRealtekSemiconductor = 0x5D,kBluetoothCompanyIdentiferStonestreetOne = 0x5E,kBluetoothCompanyIdentiferWicentric = 0x5F,kBluetoothCompanyIdentiferRivieraWaves = 0x60,kBluetoothCompanyIdentiferRDAMicroelectronics = 0x61,kBluetoothCompanyIdentiferGibsonGuitars = 0x62,kBluetoothCompanyIdentiferMiCommand = 0x63,kBluetoothCompanyIdentiferBandXIInternational = 0x64,kBluetoothCompanyIdentiferHewlettPackard = 0x65,kBluetoothCompanyIdentifer9SolutionsOy = 0x66,kBluetoothCompanyIdentiferGNNetcom = 0x67,kBluetoothCompanyIdentiferGeneralMotors = 0x68,kBluetoothCompanyIdentiferAAndDEngineering = 0x69,kBluetoothCompanyIdentiferMindTree = 0x6A,kBluetoothCompanyIdentiferPolarElectroOY = 0x6B,kBluetoothCompanyIdentiferBeautifulEnterprise = 0x6C,kBluetoothCompanyIdentiferBriarTek = 0x6D,kBluetoothCompanyIdentiferSummitDataCommunications = 0x6E,kBluetoothCompanyIdentiferSoundID = 0x6F,kBluetoothCompanyIdentiferMonster = 0x70,kBluetoothCompanyIdentiferConnectBlueAB = 0x71,kBluetoothCompanyIdentiferShangHaiSuperSmartElectronics = 0x72,kBluetoothCompanyIdentiferGroupSense = 0x73,kBluetoothCompanyIdentiferZomm = 0x74,kBluetoothCompanyIdentiferSamsungElectronics = 0x75,kBluetoothCompanyIdentiferCreativeTechnology = 0x76,kBluetoothCompanyIdentiferLairdTechnologies = 0x77,kBluetoothCompanyIdentiferNike = 0x78,kBluetoothCompanyIdentiferLessWire = 0x79,kBluetoothCompanyIdentiferMStarTechnologies = 0x7A,kBluetoothCompanyIdentiferHanlynnTechnologies = 0x7B,kBluetoothCompanyIdentiferAAndRCambridge = 0x7C,kBluetoothCompanyIdentiferSeersTechnology = 0x7D,kBluetoothCompanyIdentiferSportsTrackingTechnologies = 0x7E,kBluetoothCompanyIdentiferAutonetMobile = 0x7F,kBluetoothCompanyIdentiferDeLormePublishingCompany = 0x80,kBluetoothCompanyIdentiferWuXiVimicro = 0x81,kBluetoothCompanyIdentiferSennheiserCommunications = 0x82,kBluetoothCompanyIdentiferTimeKeepingSystems = 0x83,kBluetoothCompanyIdentiferLudusHelsinki = 0x84,kBluetoothCompanyIdentiferBlueRadios = 0x85,kBluetoothCompanyIdentiferEquinux = 0x86,kBluetoothCompanyIdentiferGarminInternational = 0x87,kBluetoothCompanyIdentiferEcotest = 0x88,kBluetoothCompanyIdentiferGNResound = 0x89,kBluetoothCompanyIdentiferJawbone = 0x8A,kBluetoothCompanyIdentiferTopconPositioningSystems = 0x8B,kBluetoothCompanyIdentiferGimbal = 0x8C,kBluetoothCompanyIdentiferZscanSoftware = 0x8D,kBluetoothCompanyIdentiferQuintic = 0x8E,kBluetoothCompanyIdentiferTelitWirelessSolutions = 0x8F,kBluetoothCompanyIdentiferFunaiElectric = 0x90,kBluetoothCompanyIdentiferAdvancedPANMOBILSystems = 0x91,kBluetoothCompanyIdentiferThinkOptics = 0x92,kBluetoothCompanyIdentiferUniversalElectriconics = 0x93,kBluetoothCompanyIdentiferAirohaTechnology = 0x94,kBluetoothCompanyIdentiferNECLightning = 0x95,kBluetoothCompanyIdentiferODMTechnology = 0x96,kBluetoothCompanyIdentiferConnecteDevice = 0x97,kBluetoothCompanyIdentiferZero1TV = 0x98,kBluetoothCompanyIdentiferITechDynamicGlobalDistribution = 0x99,kBluetoothCompanyIdentiferAlpwise = 0x9A,kBluetoothCompanyIdentiferJiangsuToppowerAutomotiveElectronics = 0x9B,kBluetoothCompanyIdentiferColorfy = 0x9C,kBluetoothCompanyIdentiferGeoforce = 0x9D,kBluetoothCompanyIdentiferBose = 0x9E,kBluetoothCompanyIdentiferSuuntoOy = 0x9F,kBluetoothCompanyIdentiferKensingtonComputerProductsGroup = 0xA0,kBluetoothCompanyIdentiferSRMedizinelektronik = 0xA1,kBluetoothCompanyIdentiferVertu = 0xA2,kBluetoothCompanyIdentiferMetaWatch = 0xA3,kBluetoothCompanyIdentiferLinak = 0xA4,kBluetoothCompanyIdentiferOTLDynamics = 0xA5,kBluetoothCompanyIdentiferPandaOcean = 0xA6,kBluetoothCompanyIdentiferVisteon = 0xA7,kBluetoothCompanyIdentiferARPDevicesUnlimited = 0xA8,kBluetoothCompanyIdentiferMagnetiMarelli = 0xA9,kBluetoothCompanyIdentiferCaenRFID = 0xAA,kBluetoothCompanyIdentiferIngenieurSystemgruppeZahn = 0xAB,kBluetoothCompanyIdentiferGreenThrottleGames = 0xAC,kBluetoothCompanyIdentiferPeterSystemtechnik = 0xAD,kBluetoothCompanyIdentiferOmegawave = 0xAE,kBluetoothCompanyIdentiferCinetix = 0xAF,kBluetoothCompanyIdentiferPassifSemiconductor = 0xB0,kBluetoothCompanyIdentiferSarisCyclingGroup = 0xB1,kBluetoothCompanyIdentiferBekey = 0xB2,kBluetoothCompanyIdentiferClarinoxTechnologies = 0xB3,kBluetoothCompanyIdentiferBDETechnology = 0xB4,kBluetoothCompanyIdentiferSwirlNetworks = 0xB5,kBluetoothCompanyIdentiferMesoInternational = 0xB6,kBluetoothCompanyIdentiferTreLab = 0xB7,kBluetoothCompanyIdentiferQualcommInnovationCenter = 0xB8,kBluetoothCompanyIdentiferJohnsonControls = 0xB9,kBluetoothCompanyIdentiferStarkeyLaboratories = 0xBA,kBluetoothCompanyIdentiferSPowerElectronics = 0xBB,kBluetoothCompanyIdentiferAceSensor = 0xBC,kBluetoothCompanyIdentiferAplix = 0xBD,kBluetoothCompanyIdentiferAAMPofAmerica = 0xBE,kBluetoothCompanyIdentiferStalmartTechnology = 0xBF,kBluetoothCompanyIdentiferAMICCOMElectronics = 0xC0,kBluetoothCompanyIdentiferShenzhenExcelsecuDataTechnology = 0xC1,kBluetoothCompanyIdentiferGeneq = 0xC2,kBluetoothCompanyIdentiferAdidas = 0xC3,kBluetoothCompanyIdentiferLGElectronics = 0xC4,kBluetoothCompanyIdentiferOnsetComputer = 0xC5,kBluetoothCompanyIdentiferSelflyBV = 0xC6,kBluetoothCompanyIdentiferQuupa = 0xC7,kBluetoothCompanyIdentiferGeLo = 0xC8,kBluetoothCompanyIdentiferEvluma = 0xC9,kBluetoothCompanyIdentiferMC10 = 0xCA,kBluetoothCompanyIdentiferBinauricSE = 0xCB,kBluetoothCompanyIdentiferBeatsElectronics = 0xCC,kBluetoothCompanyIdentiferMicrochipTechnology = 0xCD,kBluetoothCompanyIdentiferElgatoSystems = 0xCE,kBluetoothCompanyIdentiferARCHOS = 0xCF,kBluetoothCompanyIdentiferDexcom = 0xD0,kBluetoothCompanyIdentiferPolarElectroEurope = 0xD1,kBluetoothCompanyIdentiferDialogSemiconductor = 0xD2,kBluetoothCompanyIdentiferTaixingbangTechnology = 0xD3,kBluetoothCompanyIdentiferKawantech = 0xD4,kBluetoothCompanyIdentiferAustcoCommunicationsSystems = 0xD5,kBluetoothCompanyIdentiferTimexGroup = 0xD6,kBluetoothCompanyIdentiferQualcommTechnologies = 0xD7,kBluetoothCompanyIdentiferQualcommConnectedExperiences = 0xD8,kBluetoothCompanyIdentiferVoyetraTurtleBeach = 0xD9,kBluetoothCompanyIdentifertxtrGMBH = 0xDA,kBluetoothCompanyIdentiferBiosentronics = 0xDB,kBluetoothCompanyIdentiferProctorAndGamble = 0xDC,kBluetoothCompanyIdentiferHosiden = 0xDD,kBluetoothCompanyIdentiferMusik = 0xDE,kBluetoothCompanyIdentiferMisfitWearables = 0xDF,kBluetoothCompanyIdentiferGoogle = 0xE0,kBluetoothCompanyIdentiferDanlers = 0xE1,kBluetoothCompanyIdentiferSemilink = 0xE2,kBluetoothCompanyIdentiferInMusicBrands = 0xE3,kBluetoothCompanyIdentiferLSResearch = 0xE4,kBluetoothCompanyIdentiferEdenSoftwareConsultants = 0xE5,kBluetoothCompanyIdentiferFreshtemp = 0xE6,kBluetoothCompanyIdentiferKSTechnologies = 0xE7,kBluetoothCompanyIdentiferACTSTechnologies = 0xE8,kBluetoothCompanyIdentiferVtrackSystems = 0xE9,kBluetoothCompanyIdentiferNielsenKellerman = 0xEA,kBluetoothCompanyIdentiferServerTechnology = 0xEB,kBluetoothCompanyIdentiferBioResearchAssociates = 0xEC,kBluetoothCompanyIdentiferJollyLogic = 0xED,kBluetoothCompanyIdentiferAboveAverageOutcomes = 0xEE,kBluetoothCompanyIdentiferBitsplitters = 0xEF,kBluetoothCompanyIdentiferPayPal = 0xF0,kBluetoothCompanyIdentiferWitronTechnology = 0xF1,kBluetoothCompanyIdentiferMorseProject = 0xF2,kBluetoothCompanyIdentiferKentDisplays = 0xF3,kBluetoothCompanyIdentiferNautilus = 0xF4,kBluetoothCompanyIdentiferSmartifier = 0xF5,kBluetoothCompanyIdentiferElcometer = 0xF6,kBluetoothCompanyIdentiferVSNTechnologies = 0xF7,kBluetoothCompanyIdentiferAceUni = 0xF8,kBluetoothCompanyIdentiferStickNFind = 0xF9,kBluetoothCompanyIdentiferCrystalCode = 0xFA,kBluetoothCompanyIdentiferKOUKAMM = 0xFB,kBluetoothCompanyIdentiferDelphi = 0xFC,kBluetoothCompanyIdentiferValenceTech = 0xFD,kBluetoothCompanyIdentiferStanleyBlackAndDecker = 0xFE,kBluetoothCompanyIdentiferTypeProducts = 0xFF,kBluetoothCompanyIdentiferTomTomInternational = 0x100,kBluetoothCompanyIdentiferFuGoo = 0x101,kBluetoothCompanyIdentiferKeiser = 0x102,kBluetoothCompanyIdentiferBangAndOlufson = 0x103,kBluetoothCompanyIdentiferPLUSLocationSystems = 0x104,kBluetoothCompanyIdentiferUbiquitousComputingTechnology = 0x105,kBluetoothCompanyIdentiferInnovativeYachtterSolutions = 0x106,kBluetoothCompanyIdentiferWilliamDemantHolding = 0x107,kBluetoothCompanyIdentiferInteropIdentifier = 0xFFFF,};
typedef BluetoothHCISupportedFeatures BluetoothHCILEUsedFeatures;
enum BluetoothLEAdvertisingType {BluetoothLEAdvertisingTypeConnectableUndirected = 0x0,BluetoothLEAdvertisingTypeConnectableDirected = 0x1,BluetoothLEAdvertisingTypeDiscoverableUndirected = 0x2,BluetoothLEAdvertisingTypeNonConnectableUndirected = 0x3,BluetoothLEAdvertisingTypeScanResponse = 0x4,};
struct IOAGPDevice__ExpansionData {};
struct IOATADevice__ExpansionData {};
typedef _IOAudioNotificationMessage IOAudioNotificationMessage;
struct IOAudioPort__ExpansionData {};
typedef void *IOEventSource__ActionBlock;
enum IOFWAVCSubunitPlugMessages {kIOFWAVCSubunitPlugMsgConnected = 0x0,kIOFWAVCSubunitPlugMsgDisconnected = 0x1,kIOFWAVCSubunitPlugMsgConnectedPlugModified = 0x2,kIOFWAVCSubunitPlugMsgSignalFormatModified = 0x3,};
struct IOFWUserReadQuadletCommand;
enum IOHIDElementCollectionType {kIOHIDElementCollectionTypePhysical = 0x0,kIOHIDElementCollectionTypeApplication = 0x1,kIOHIDElementCollectionTypeLogical = 0x2,kIOHIDElementCollectionTypeReport = 0x3,kIOHIDElementCollectionTypeNamedArray = 0x4,kIOHIDElementCollectionTypeUsageSwitch = 0x5,kIOHIDElementCollectionTypeUsageModifier = 0x6,};
struct IOHIDSystem__ExpansionData;
struct IOMemoryDescriptorReserved;
struct IOPCIBridge__ExpansionData {IOPCIRange *rangeLists[4];IOPCIMessagedInterruptController *messagedInterruptController;};
typedef void (*IOTimerEventSource__Action)(OSObject *, IOTimerEventSource *);
typedef IOUSBEndpointDescriptor *IOUSBEndpointDescriptorPtr;
typedef IOUSBEndpointProperties *IOUSBEndpointPropertiesPtr;
enum MACRO_kCDAudioStatusPaused {kCDAudioStatusPaused = 0x12,};
enum MACRO_kEnTrFlagNonBlocking {kEnTrFlagNonBlocking = 1,kEnTrFlagNoWork = 2,};
enum MACRO_kFWCmdDefaultRetries {kFWCmdDefaultRetries = 3,};
enum MACRO_kIOAudioChannelLabel {kIOAudioChannelLabel_Discrete_field_ba = 16,};
enum MACRO_kIOInterruptTypeEdge {kIOInterruptTypeEdge = 0,kIOInterruptTypeLevel = 1,};
enum MACRO_kMaxChannelIDPerSide {kMaxChannelIDPerSide = 31,};
enum MACRO_kOSKextLogBasicLevel {kOSKextLogBasicLevel = 0x3,kOSKextLogProgressLevel = 0x4,};
enum MACRO_kOSKextLogDebugLevel {kOSKextLogDebugLevel = 0x7,kOSKextLogGeneralFlag = 0x10,kOSKextLogLoadFlag = 0x20,kOSKextLogIPCFlag = 0x40,kOSKextLogArchiveFlag = 0x80,kOSKextLogValidationFlag = 0x1000,kOSKextLogAuthenticationFlag = 0x2000,kOSKextLogDependenciesFlag = 0x4000,kOSKextLogDirectoryScanFlag = 0x10000,kOSKextLogFileAccessFlag = 0x20000,kOSKextLogKextBookkeepingFlag = 0x40000,kOSKextLogLinkFlag = 0x100000,kOSKextLogPatchFlag = 0x200000,};
enum MACRO_kOpenApplicationPath {kOpenApplicationPath = 0,kOpenPreferencePanel = 1,kOpenApplication = 2,};
enum MACRO_kPMSetAggressiveness {kPMSetAggressiveness = 0,kPMGetAggressiveness = 1,kPMSleepSystem = 2,};
enum MACRO_kPMSetDisplayPowerOn {kPMSetDisplayPowerOn = 15,kNumPMMethods = 16,};
enum StandardUSB20__tBusCurrent {};
enum StandardUSB30__tBusCurrent {kBusCurrentMinimum = 0x96,kBusCurrentDefault = 0x384,kBusCurrentMaxPowerUnits = 0x8,};
typedef UserExportDCLUpdateDCLListStruct UserExportDCLUpdateDCLList;
struct com_apple_iokit_KLogClient;
typedef dyld_kernel_process_info dyld_kernel_process_info_t;
enum eIOAccelSurfaceMemoryTypes {kIOAccelNumSurfaceMemoryTypes = 0x0,};
typedef host_preferred_user_arch *host_preferred_user_arch_t;
typedef ipc_voucher_attr_control *ipc_voucher_attr_control_t;
typedef ipc_voucher_attr_manager *ipc_voucher_attr_manager_t;
typedef unsigned int mach_msg_descriptor_type_t;
typedef processor_set_basic_info *processor_set_basic_info_t;
typedef thread_background_policy *thread_background_policy_t;
typedef thread_precedence_policy *thread_precedence_policy_t;
enum thread_snapshot_wait_flags {kThreadWaitNone = 0x0,kThreadWaitKernelMutex = 0x1,kThreadWaitPortReceive = 0x2,kThreadWaitPortSetReceive = 0x3,kThreadWaitPortSend = 0x4,kThreadWaitPortSendInTransit = 0x5,kThreadWaitSemaphore = 0x6,kThreadWaitKernelRWLockRead = 0x7,kThreadWaitKernelRWLockWrite = 0x8,kThreadWaitKernelRWLockUpgrade = 0x9,kThreadWaitUserLock = 0xA,kThreadWaitPThreadMutex = 0xB,kThreadWaitPThreadRWLockRead = 0xC,kThreadWaitPThreadRWLockWrite = 0xD,kThreadWaitPThreadCondVar = 0xE,kThreadWaitParkedWorkQueue = 0xF,kThreadWaitWorkloopSyncWait = 0x10,kThreadWaitOnProcess = 0x11,};
typedef int vm_machine_attribute_val_t;
typedef vm_region_submap_info_64 *vm_region_submap_info_64_t;
struct AppleMacIO__ExpansionData {};
typedef void (*BlockByrefDestroyFunction)(Block_byref *);
enum BluetoothHCIPageScanModes {kMandatoryPageScanMode = 0x0,kOptionalPageScanMode1 = 0x1,kOptionalPageScanMode2 = 0x2,kOptionalPageScanMode3 = 0x3,};
enum BluetoothHCIPageScanTypes {kBluetoothHCIPageScanTypeStandard = 0x0,kBluetoothHCIPageScanTypeInterlaced = 0x1,kBluetoothHCIPageScanTypeReservedStart = 0x2,kBluetoothHCIPageScanTypeReservedEnd = 0xFF,};
enum BluetoothHCITimeoutValues {kDefaultPageTimeout = 0x2710,};
enum BluetoothL2CAPCommandCode {kBluetoothL2CAPCommandCodeReserved = 0x0,kBluetoothL2CAPCommandCodeCommandReject = 0x1,kBluetoothL2CAPCommandCodeConnectionRequest = 0x2,kBluetoothL2CAPCommandCodeConnectionResponse = 0x3,kBluetoothL2CAPCommandCodeConfigureRequest = 0x4,kBluetoothL2CAPCommandCodeConfigureResponse = 0x5,kBluetoothL2CAPCommandCodeDisconnectionRequest = 0x6,kBluetoothL2CAPCommandCodeDisconnectionResponse = 0x7,kBluetoothL2CAPCommandCodeEchoRequest = 0x8,kBluetoothL2CAPCommandCodeEchoResponse = 0x9,kBluetoothL2CAPCommandCodeInformationRequest = 0xA,kBluetoothL2CAPCommandCodeInformationResponse = 0xB,kBluetoothL2CAPCommandCodeCreateChannelRequest = 0xC,kBluetoothL2CAPCommandCodeCreateChannelResponse = 0xD,kBluetoothL2CAPCommandCodeMoveChannelRequest = 0xE,kBluetoothL2CAPCommandCodeMoveChannelResponse = 0xF,kBluetoothL2CAPCommandCodeMoveChannelConfirmation = 0x10,kBluetoothL2CAPCommandCodeMoveChannelConfirmationResponse = 0x11,kBluetoothL2CAPCommandCodeConnectionParameterUpdateRequest = 0x12,kBluetoothL2CAPCommandCodeConnectionParameterUpdateResponse = 0x13,kBluetoothL2CAPCommandCodeLECreditBasedConnectionRequest = 0x14,kBluetoothL2CAPCommandCodeLECreditBasedConnectionResponse = 0x15,kBluetoothL2CAPCommandCodeLEFlowControlCredit = 0x16,};
enum BluetoothRFCOMMLineStatus {BluetoothRFCOMMLineStatusNoError = 0x0,BluetoothRFCOMMLineStatusOverrunError = 0x1,BluetoothRFCOMMLineStatusParityError = 0x2,BluetoothRFCOMMLineStatusFramingError = 0x3,};
enum BluetoothRFCOMMParityType {kBluetoothRFCOMMParityTypeNoParity = 0x0,kBluetoothRFCOMMParityTypeOddParity = 0x1,kBluetoothRFCOMMParityTypeEvenParity = 0x2,kBluetoothRFCOMMParityTypeMaxParity = 0x3,};
typedef BluetoothTransportInfo *BluetoothTransportInfoPtr;
typedef iog__OSSharedObject_GTraceBuffer_ GTraceBuffer__shared_type;
typedef void (*IOAudioDevice__TimerEvent)(OSObject *, IOAudioDevice *);
struct IOAudioFormatNotification;
struct IODVDMedia__ExpansionData {};
struct IOFWUserPHYPacketListener;
struct IOInterruptAccountingData;
enum IOUSBHostIOSource__tState {kStateReady = 0x0,kStateRunningCompletions = 0x1,kStateAborting = 0x2,kStateInactive = 0x3,kStateDestroyed = 0x4,};
enum MACRO_kIOReportScaleUnity {kIOReportScaleUnity = 0,};
enum MACRO_kNXEventDataVersion {kNXEventDataVersion = 2,};
enum MACRO_kOSKextLogLevelMask {kOSKextLogLevelMask = 0x7,kOSKextLogKextOrGlobalMask = 0x8,kOSKextLogFlagsMask = 0xFFFFFF0,};
enum MACRO_kOSKextLogStepLevel {kOSKextLogStepLevel = 0x5,};
enum MACRO_kPMAllowPowerChange {kPMAllowPowerChange = 3,kPMCancelPowerChange = 4,};
enum MACRO_kUSB30Bitrate10Gbps {kUSB30Bitrate10Gbps = 10000000000,};
struct OSCollectionIterator_vtbl; 
typedef UserExportDCLPtrTimeStampStruct UserExportDCLPtrTimeStamp;
enum eIOAcceleratorClientTypes {kIOAccelSurfaceClientType = 0x0,kIOAccelNumClientTypes = 0x1,kIOAccelSurface2ClientType = 0x20,};
typedef host_cpu_load_info host_cpu_load_info_data_t;
typedef host_priority_info host_priority_info_data_t;
typedef vm_purgeable_info host_purgable_info_data_t;
typedef mach_timebase_info mach_timebase_info_data_t;
typedef memory_object_attr_info *memory_object_attr_info_t;
typedef int memory_object_info_data_t[1024];
typedef memory_object_perf_info *memory_object_perf_info_t;
typedef processor_cpu_load_info *processor_cpu_load_info_t;
typedef processor_set_load_info *processor_set_load_info_t;
typedef task_basic_info_32 task_basic_info_32_data_t;
typedef task_basic_info_64 task_basic_info_64_data_t;
typedef task_power_info_v2 task_power_info_v2_data_t;
typedef user_fbootstraptransfer user_fbootstraptransfer_t;
struct vDSP_biquadm_SetupStructD;
typedef vm_page_info_basic vm_page_info_basic_data_t;
typedef vm_region_basic_info_64 *vm_region_basic_info_64_t;
typedef vm_region_extended_info *vm_region_extended_info_t;
typedef vm_region_top_info vm_region_top_info_data_t;
struct AVCConnectionRecord_vtbl; 
enum BluetoothHCIInquiryModes {kBluetoothHCIInquiryModeResultFormatStandard = 0x0,kBluetoothHCIInquiryModeResultFormatWithRSSI = 0x1,kBluetoothHCIInquiryModeResultFormatWithRSSIOrExtendedInquiryResultFormat = 0x2,};
typedef FWSBP2ReconnectParams *FWSBP2ReconnectParamsPtr;
struct GTraceBuffer_vtbl_layout; 
typedef HIDButtonCapabilities *HIDButtonCapabilitiesPtr;
struct IOATABusInfo_vtbl_layout; 
struct IOBDMedia__ExpansionData {};
struct IOCDMedia__ExpansionData {};
typedef char (*IODebuggerSetModeHandler)(IOService *, char);
enum IOFWAVCAsyncCommandState {kAVCAsyncCommandStatePendingRequest = 0x0,kAVCAsyncCommandStateRequestSent = 0x1,kAVCAsyncCommandStateRequestFailed = 0x2,kAVCAsyncCommandStateWaitingForResponse = 0x3,kAVCAsyncCommandStateReceivedInterimResponse = 0x4,kAVCAsyncCommandStateReceivedFinalResponse = 0x5,kAVCAsyncCommandStateTimeOutBeforeResponse = 0x6,kAVCAsyncCommandStateBusReset = 0x7,kAVCAsyncCommandStateOutOfMemory = 0x8,kAVCAsyncCommandStateCanceled = 0x9,};
struct IONDRVFramebufferPrivate;
struct IOPCIDeviceExpansionData;
typedef void (*IOPCIEventSource__Action)(OSObject *, IOPCIEventSource *,  IOPCIEvent *);
struct IOPMPowerSourceList_vtbl; 
typedef void (*IOServiceApplierFunction)(IOService *, void *);
struct IOStorage__ExpansionData {};
typedef IOUSBDescriptorHeader *IOUSBDescriptorHeaderPtr;
typedef IOUSBDeviceDescriptor *IOUSBDeviceDescriptorPtr;
struct IOVideoControlDictionary {};
enum MACRO_CCCHACHA20POLY1305 {CCCHACHA20POLY1305_STATE_SETNONCE = 1,CCCHACHA20POLY1305_STATE_AAD = 2,CCCHACHA20POLY1305_STATE_ENCRYPT = 3,CCCHACHA20POLY1305_STATE_DECRYPT = 4,CCCHACHA20POLY1305_STATE_FINAL = 5,};
enum MACRO_IN_LINKLOCALNETNUM {IN_LINKLOCALNETNUM = 2851995648,IN_LOOPBACKNET = 127,};
enum MACRO_IOMEMORYDESCRIPTOR {IOMEMORYDESCRIPTOR_SUPPORTS_DMACOMMAND = 1,};
enum MACRO_IO_SampleTypeAlpha {IO_SampleTypeAlpha = 65,IO_SampleTypeSkip = 45,};
enum MACRO_SECTION_ATTRIBUTES {SECTION_ATTRIBUTES_USR = 0xFF000000,};
enum MACRO___DARWIN_MAXNAMLEN {__DARWIN_MAXNAMLEN = 255,__DARWIN_MAXPATHLEN = 1024,};
enum MACRO_kBootArgsEfiMode32 {kBootArgsEfiMode32 = 32,kBootArgsEfiMode64 = 64,};
enum MACRO_kBootArgsRevision2 {kBootArgsRevision2_0 = 0,};
enum MACRO_kCDAudioStatusNone {kCDAudioStatusNone = 0x15,};
enum MACRO_kDefaultRetryCount {kDefaultRetryCount = 4,};
enum MACRO_kEnTrActKernKQWait {kEnTrActKernKQWait = 12,kEnTrEvUnblocked = 256,};
enum MACRO_kEnTrActKernSelect {kEnTrActKernSelect = 11,};
enum MACRO_kEnTrActKernSocket {kEnTrActKernSocket = 1,kEnTrActKernSockRead = 2,};
enum MACRO_kIOEthernetCRCSize {kIOEthernetCRCSize = 4,};
enum MACRO_kOSKextExcludeNone {kOSKextExcludeNone = 0,kOSKextExcludeKext = 1,kOSKextExcludeAll = 2,};
enum MACRO_kUSB30Bitrate5Gbps {kUSB30Bitrate5Gbps = 5000000000,};
enum MACRO_pseudo_AF_HDRCMPLT {pseudo_AF_HDRCMPLT = 35,};
typedef _NXTabletProximityData *NXTabletProximityDataPtr;
struct OSCollection_vtbl_layout; 
struct OSDictionary_vtbl_layout; 
struct OSSerializer_vtbl_layout; 
enum StandardUSB__tBusVoltage {kBusVoltageDefault = 0x5,};
enum StandardUSB__tLanguageID {kLanguageIDEnglishUS = 0x409,};
enum USBDeviceInformationBits {kUSBInformationDeviceIsCaptiveBit = 0x0,kUSBInformationDeviceIsAttachedToRootHubBit = 0x1,kUSBInformationDeviceIsInternalBit = 0x2,kUSBInformationDeviceIsConnectedBit = 0x3,kUSBInformationDeviceIsEnabledBit = 0x4,kUSBInformationDeviceIsSuspendedBit = 0x5,kUSBInformationDeviceIsInResetBit = 0x6,kUSBInformationDeviceOvercurrentBit = 0x7,kUSBInformationDevicePortIsInTestModeBit = 0x8,kUSBInformationDeviceIsRootHub = 0x9,kUSBInformationRootHubisBuiltIn = 0xA,kUSBInformationRootHubIsBuiltInBit = 0xA,kUSBInformationDeviceIsRemote = 0xB,kUSBInformationDeviceIsAttachedToEnclosure = 0xC,kUSBInformationDeviceIsOnThunderboltBit = 0xD,kUSBInformationDeviceIsCaptiveMask = 0x1,kUSBInformationDeviceIsAttachedToRootHubMask = 0x2,kUSBInformationDeviceIsInternalMask = 0x4,kUSBInformationDeviceIsConnectedMask = 0x8,kUSBInformationDeviceIsEnabledMask = 0x10,kUSBInformationDeviceIsSuspendedMask = 0x20,kUSBInformationDeviceIsInResetMask = 0x40,kUSBInformationDeviceOvercurrentMask = 0x80,kUSBInformationDevicePortIsInTestModeMask = 0x100,kUSBInformationDeviceIsRootHubMask = 0x200,kUSBInformationRootHubisBuiltInMask = 0x400,kUSBInformationRootHubIsBuiltInMask = 0x400,kUSBInformationDeviceIsRemoteMask = 0x800,kUSBInformationDeviceIsAttachedToEnclosureMask = 0x1000,kUSBInformationDeviceIsOnThunderboltMask = 0x2000,};
typedef void (*UpdateEventFlagsCallback)(OSObject *, unsigned int, OSObject *, void *);
typedef VDVideoParametersInfoRec *VDVideoParametersInfoPtr;
enum _IOAudioDevicePowerState {kIOAudioDeviceSleep = 0x0,kIOAudioDeviceIdle = 0x1,kIOAudioDeviceActive = 0x2,};
typedef  ccchacha20poly1305_fns *ccchacha20poly1305_fns_t;
typedef dyld_kernel_image_info dyld_kernel_image_info_t;
enum eIOAccelSurfaceScaleBits {kIOAccelSurfaceBeamSyncSwaps = 0x1,kIOAccelSurfaceFixedSource = 0x2,kIOAccelSurfaceFiltering = 0xF0,kIOAccelSurfaceFilterDefault = 0x0,kIOAccelSurfaceFilterNone = 0x10,kIOAccelSurfaceFilterLinear = 0x20,};
enum eIOAccelSurfaceShapeBits {kIOAccelSurfaceShapeNone = 0x0,kIOAccelSurfaceShapeNonBlockingBit = 0x1,kIOAccelSurfaceShapeNonSimpleBit = 0x2,kIOAccelSurfaceShapeIdentityScaleBit = 0x4,kIOAccelSurfaceShapeFrameSyncBit = 0x8,kIOAccelSurfaceShapeBeamSyncBit = 0x10,kIOAccelSurfaceShapeStaleBackingBit = 0x20,kIOAccelSurfaceShapeAssemblyBit = 0x40,kIOAccelSurfaceShapeWaitEnabledBit = 0x80,kIOAccelSurfaceShapeBlockingBit = 0x1,};
enum eIOAccelSurfaceStateBits {kIOAccelSurfaceStateNone = 0x0,kIOAccelSurfaceStateIdleBit = 0x1,};
struct ipc_voucher_attr_control;
struct ipc_voucher_attr_manager;
typedef segment_command kernel_segment_command_t;
typedef policy_fifo_limit policy_fifo_limit_data_t;
typedef policy_timeshare_limit *policy_timeshare_limit_t;
struct processor_set_basic_info {int processor_count;int default_policy;};
typedef mach_msg_type_descriptor_t *routine_arg_descriptor_t;
typedef rpc_routine_descriptor *rpc_routine_descriptor_t;
typedef task_absolutetime_info *task_absolutetime_info_t;
typedef task_affinity_tag_info *task_affinity_tag_info_t;
typedef task_kernelmemory_info *task_kernelmemory_info_t;
typedef task_thread_times_info *task_thread_times_info_t;
typedef task_trace_memory_info *task_trace_memory_info_t;
typedef thread_affinity_policy *thread_affinity_policy_t;
typedef thread_basic_info thread_basic_info_data_t;
typedef thread_extended_policy *thread_extended_policy_t;
typedef thread_identifier_info *thread_identifier_info_t;
typedef thread_standard_policy *thread_standard_policy_t;
struct vDSP_biquad_SetupStructD;
struct vDSP_biquadm_SetupStruct;
typedef int *vm_region_recurse_info_t;
struct AppleNMI__ExpansionData {};
struct AppleUSBDescriptorCache;
struct AppleUSBHostDeviceIdler;
enum BluetoothAMPManagerCode {kBluetoothAMPManagerCodeReserved = 0x0,kBluetoothAMPManagerCodeAMPCommandReject = 0x1,kBluetoothAMPManagerCodeAMPDiscoverRequest = 0x2,kBluetoothAMPManagerCodeAMPDiscoverResponse = 0x3,kBluetoothAMPManagerCodeAMPChangeNotify = 0x4,kBluetoothAMPManagerCodeAMPChangeResponse = 0x5,kBluetoothAMPManagerCodeAMPGetInfoRequest = 0x6,kBluetoothAMPManagerCodeAMPGetInfoResponse = 0x7,kBluetoothAMPManagerCodeAMPGetAssocRequest = 0x8,kBluetoothAMPManagerCodeAMPGetAssocResponse = 0x9,kBluetoothAMPManagerCodeAMPCreatePhysicalLinkRequest = 0xA,kBluetoothAMPManagerCodeAMPCreatePhysicalLinkResponse = 0xB,kBluetoothAMPManagerCodeAMPDisconnectPhysicalLinkRequest = 0xC,kBluetoothAMPManagerCodeAMPDisconnectPhysicalLinkResponse = 0xD,};
enum BluetoothIOCapabilities {kBluetoothCapabilityTypeDisplayOnly = 0x0,kBluetoothCapabilityTypeDisplayYesNo = 0x1,kBluetoothCapabilityTypeKeyboardOnly = 0x2,kBluetoothCapabilityTypeNoInputNoOutput = 0x3,};
enum BluetoothTransportTypes {kBluetoothTransportTypeUSB = 0x1,kBluetoothTransportTypePCCard = 0x2,kBluetoothTransportTypePCICard = 0x3,kBluetoothTransportTypeUART = 0x4,kBluetoothTransportTypePCIe = 0x5,};
typedef HIDValueCapabilities *HIDValueCapabilitiesPtr;
typedef void IOATACompletionFunction(IOATACommand *);
struct IOAudioStreamFormatDesc;
struct IOBluetoothL2CAPChannel;
struct IOCatalogue_vtbl_layout; 
struct IOFWAsyncStreamListener;
struct IOFWAsyncStreamReceiver;
enum IOFWDCLNotificationType {kFWDCLInvalidNotification = 0x0,kFWDCLUpdateNotification = 0x1,kFWDCLModifyNotification = 0x2,kFWNuDCLModifyNotification = 0x3,kFWNuDCLModifyJumpNotification = 0x4,kFWNuDCLUpdateNotification = 0x5,};
struct IOFramebufferUserClient;
typedef int IOInterruptVectorNumber;
struct IOPCIATA__ExpansionData {IOBufferMemoryDescriptor *_prdBuffer;};
struct IORangeAllocatorElement;
struct IORegistryIterator_vtbl; 
struct IOVideoStreamDictionary {};
typedef void *IOWorkLoop__ActionBlock;
enum MACRO_EXCEPTION_DEFAULT {EXCEPTION_DEFAULT = 1,EXCEPTION_STATE = 2,EXCEPTION_STATE_IDENTITY = 3,};
enum MACRO_MACH_VOUCHER_ATTR {MACH_VOUCHER_ATTR_VALUE_MAX_NESTED = 4,MACH_VOUCHER_ATTR_VALUE_FLAGS_NONE = 0,MACH_VOUCHER_ATTR_VALUE_FLAGS_PERSIST = 1,MACH_VOUCHER_ATTR_CONTROL_FLAGS_NONE = 0,MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL = 1,MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL = 2,MACH_ACTIVITY_ID_COUNT_MAX = 16,};
enum MACRO_MAXTHREADNAMESIZE {MAXTHREADNAMESIZE = 64,};
enum MACRO_TURNSTILE_PREPARE {TURNSTILE_PREPARE = 0x1,TURNSTILE_COMPLETE = 0x2,};
enum MACRO_kAVCMultiplePlugs {kAVCMultiplePlugs = 0xFD,};
enum MACRO_kAppleOnboardGUID {kAppleOnboardGUID = 0x610000000000000,};
enum MACRO_kBootArgsRevision {kBootArgsRevision = 0,kBootArgsVersion = 2,};
enum MACRO_kBootArgsVersion1 {kBootArgsVersion1 = 1,kBootArgsVersion2 = 2,};
enum MACRO_kEnTrModAssociate {kEnTrModAssociate = 268435456,};
enum MACRO_kFWCmdZeroRetries {kFWCmdZeroRetries = 0,kFWCmdReducedRetries = 2,};
enum MACRO_kPMActivityTickle {kPMActivityTickle = 10,};
enum MACRO_kPMShutdownSystem {kPMShutdownSystem = 5,};
typedef void (*OSData__DeallocFunction)(void *, unsigned int);
struct OSDictionary__dictEntry { OSSymbol *key; OSMetaClassBase *value;};
typedef _loaded_kext_summary OSKextLoadedKextSummary;
typedef void (*OSMetaClassBase___ptf_t)(void);
struct OSMetaClass_vtbl_layout; 
struct OSNumber__ExpansionData {};
typedef void (*OSObjectApplierFunction)(OSObject *, void *);
struct OSSerialize_vtbl_layout; 
typedef _stickyKeys_ModifierInfo StickyKeys_ModifierInfo;
enum USBLowLatencyBufferType {kUSBLowLatencyWriteBuffer = 0x0,kUSBLowLatencyReadBuffer = 0x1,kUSBLowLatencyFrameListBuffer = 0x2,};
typedef VDDisplayConnectInfoRec *VDDisplayConnectInfoPtr;
typedef VDDisplayTimingRangeRec *VDDisplayTimingRangePtr;
typedef VDDrawHardwareCursorRec *VDDrawHardwareCursorPtr;
enum _IOAudioStreamDirection {kIOAudioStreamDirectionOutput = 0x0,kIOAudioStreamDirectionInput = 0x1,};
struct ccchacha20poly1305_info {};
enum dir_clone_authorizer_op {OP_AUTHORIZE = 0x0,OP_VATTR_SETUP = 0x1,OP_VATTR_CLEANUP = 0x2,};
enum eIOAccelSurfaceLockBits {kIOAccelSurfaceLockInBacking = 0x0,kIOAccelSurfaceLockInAccel = 0x1,kIOAccelSurfaceLockInDontCare = 0x2,kIOAccelSurfaceLockInMask = 0x3,};
enum eIOAccelSurfaceModeBits {kIOAccelSurfaceModeColorDepth1555 = 0x3,kIOAccelSurfaceModeColorDepth8888 = 0x4,kIOAccelSurfaceModeColorDepthYUV = 0x6,kIOAccelSurfaceModeColorDepthYUV9 = 0x7,kIOAccelSurfaceModeColorDepthYUV12 = 0x8,kIOAccelSurfaceModeColorDepthYUV2 = 0x9,kIOAccelSurfaceModeColorDepthBGRA32 = 0xA,kIOAccelSurfaceModeColorDepth2101010 = 0xF,kIOAccelSurfaceModeColorDepthBits = 0xF,kIOAccelSurfaceModeStereoBit = 0x10,kIOAccelSurfaceModeWindowedBit = 0x20,kIOAccelSurfaceModeSurface2 = 0x4000,kIOAccelSurfaceModeBeamSync = 0x8000,};
struct fs_snapshot_revert_args {componentname *sr_cnp;};
typedef kernel_resource_sizes *kernel_resource_sizes_t;
typedef unsigned int mach_msg_copy_options_t;
typedef char *mach_msg_trailer_info_t;
typedef unsigned int mach_msg_trailer_size_t;
typedef unsigned int mach_msg_trailer_type_t;
typedef policy_fifo_base policy_fifo_base_data_t;
typedef policy_fifo_info policy_fifo_info_data_t;
typedef policy_timeshare_base *policy_timeshare_base_t;
typedef policy_timeshare_info *policy_timeshare_info_t;
struct processor_cpu_load_info {unsigned int cpu_ticks[4];};
typedef processor_set *processor_set_control_t;
enum tDeviceRequestDirection {kRequestDirectionOut = 0x0,kRequestDirectionIn = 0x1,};
enum tDeviceRequestRecipient {kRequestRecipientDevice = 0x0,kRequestRecipientInterface = 0x1,kRequestRecipientEndpoint = 0x2,kRequestRecipientOther = 0x3,};
enum tUSBHostConnectionSpeed {kUSBHostPortConnectionSpeedNone = 0x0,kUSBHostPortConnectionSpeedFull = 0x1,kUSBHostPortConnectionSpeedLow = 0x2,kUSBHostPortConnectionSpeedHigh = 0x3,kUSBHostPortConnectionSpeedSuper = 0x4,kUSBHostPortConnectionSpeedSuperPlus = 0x5,kUSBHostPortConnectionSpeedCount = 0x6,};
enum tUSBHostPortConnectable {kUSBHostPortNotConnectable = 0x0,kUSBHostPortConnectable = 0x1,};
enum tUSBHostPowerSourceType {kUSBHostPowerSourceTypeStaticPool = 0x0,kUSBHostPowerSourceTypeSMC = 0x1,kUSBHostPowerSourceTypeHardware = 0x2,};
typedef task_events_info task_events_info_data_t;
typedef task_extmod_info task_extmod_info_data_t;
typedef task *task_suspension_token_t;
struct vDSP_biquad_SetupStruct;
typedef vm_region_submap_info *vm_region_submap_info_t;
typedef vol_capabilities_attr vol_capabilities_attr_t;
typedef i386_exception_state x86_exception_state32_t;
typedef x86_exception_state64 x86_exception_state64_t;
struct AppleUSBHostController;
typedef void (*BlockByrefKeepFunction)(Block_byref *, Block_byref *);
enum BluetoothHCIPowerState {kBluetoothHCIPowerStateON = 0x1,kBluetoothHCIPowerStateOFF = 0x0,kBluetoothHCIPowerStateUnintialized = 0xFF,};
enum BluetoothLEAddressType {BluetoothLEAddressTypePublic = 0x0,BluetoothLEAddressTypeRandom = 0x1,};
enum BluetoothLEFeatureBits {kBluetoothLEFeatureLEEncryption = 0x1,kBluetoothLEFeatureConnectionParamsRequestProcedure = 0x2,kBluetoothLEFeatureExtendedRejectIndication = 0x4,kBluetoothLEFeatureSlaveInitiatedFeaturesExchange = 0x8,kBluetoothLEFeatureLEPing = 0x10,kBluetoothLEFeatureLEDataPacketLengthExtension = 0x20,kBluetoothLEFeatureLLPrivacy = 0x40,kBluetoothLEFeatureExtendedScannerFilterPolicies = 0x80,};
typedef  HFSUniStr255 *ConstHFSUniStr255Param;
struct EventElementCollection;
typedef FWSBP2LoginResponse *FWSBP2LoginResponsePtr;
struct IOAudioClientBufferSet;
enum IOFWIsochResourceFlags {kFWNeverMultiMode = 0x0,kFWAllowMultiMode = 0x1,kFWSuggestMultiMode = 0x2,kFWAlwaysMultiMode = 0x3,kFWDefaultIsochResourceFlags = 0x0,};
enum IOFWPhysicalAccessMode {kIOFWPhysicalAccessEnabled = 0x0,kIOFWPhysicalAccessDisabled = 0x1,kIOFWPhysicalAccessDisabledForGeneration = 0x2,};
typedef void (*IOI2CRequestCompletion)(IOI2CRequest *);
typedef void *IOInterruptActionBlock;
struct IOMedia__ExpansionData {};
struct IONotifier_vtbl_layout; 
struct IOUSBNotification_vtbl; 
typedef _VSLService *InterruptServiceIDType;
enum MACRO_ECB_CTX_MAX_SIZE {DES_ECB_CTX_MAX_SIZE = 256,DES3_ECB_CTX_MAX_SIZE = 768,};
enum MACRO_F_ALLOCATECONTIG {F_ALLOCATECONTIG = 0x2,F_ALLOCATEALL = 0x4,F_PEOFPOSMODE = 0x3,F_VOLPOSMODE = 0x4,};
enum MACRO_ICMP6_MEMBERSHIP {ICMP6_MEMBERSHIP_QUERY = 130,ICMP6_MEMBERSHIP_REPORT = 131,ICMP6_MEMBERSHIP_REDUCTION = 132,};
enum MACRO_IPC_VOUCHER_ATTR {IPC_VOUCHER_ATTR_MANAGER_NULL = 0,IPC_VOUCHER_ATTR_CONTROL_NULL = 0,};
enum MACRO_IPV6_2292PKTINFO {IPV6_2292PKTINFO = 19,IPV6_2292HOPLIMIT = 20,IPV6_2292NEXTHOP = 21,IPV6_2292HOPOPTS = 22,IPV6_2292DSTOPTS = 23,IPV6_2292RTHDR = 24,IPV6_2292PKTOPTIONS = 25,IPV6_CHECKSUM = 26,IPV6_V6ONLY = 27,IPV6_IPSEC_POLICY = 28,IPV6_FAITH = 29,IPV6_FW_ADD = 30,IPV6_FW_DEL = 31,IPV6_FW_FLUSH = 32,IPV6_FW_ZERO = 33,IPV6_FW_GET = 34,IPV6_RECVTCLASS = 35,IPV6_TCLASS = 36,IPV6_BOUND_IF = 125,IPV6_RTHDR_LOOSE = 0,IPV6_RTHDR_STRICT = 1,IPV6_RTHDR_TYPE_0 = 0,IPV6_DEFAULT_MULTICAST_HOPS = 1,IPV6_DEFAULT_MULTICAST_LOOP = 1,IPV6_MIN_MEMBERSHIPS = 31,IPV6_MAX_MEMBERSHIPS = 4095,IPV6_MAX_GROUP_SRC_FILTER = 512,IPV6_MAX_SOCK_SRC_FILTER = 128,IPV6_PORTRANGE_DEFAULT = 0,IPV6_PORTRANGE_HIGH = 1,IPV6_PORTRANGE_LOW = 2,};
enum MACRO_STACKSHOT_THREAD {STACKSHOT_THREAD_SNAPSHOT_MAGIC = 0xFEEDFACE,STACKSHOT_TASK_SNAPSHOT_MAGIC = 0xDECAFBAD,STACKSHOT_MEM_AND_IO_SNAPSHOT_MAGIC = 0xBFCABCDE,STACKSHOT_MICRO_SNAPSHOT_MAGIC = 0x31C54011,};
enum MACRO_TCPOLEN_FASTOPEN {TCPOLEN_FASTOPEN_REQ = 2,};
enum MACRO_TCPOPT_SIGNATURE {TCPOPT_SIGNATURE = 19,TCPOLEN_SIGNATURE = 18,};
enum MACRO___MigPackStructs {__MigPackStructs = 1,};
enum MACRO_kCDISRCMaxLength {kCDISRCMaxLength = 12,};
enum MACRO_kEnTrActKernPoll {kEnTrActKernPoll = 10,};
enum MACRO_kIOReportExpBase {kIOReportExpBase = -127,};
enum MACRO_kMaxBusStall10uS {kMaxBusStall10uS = 10000,};
enum MACRO_kMaxBusStall25uS {kMaxBusStall25uS = 25000,};
enum MACRO_kPEDisableScreen {kPEDisableScreen = 7,kPEBaseAddressChange = 8,};
enum MACRO_kPEReleaseScreen {kPEReleaseScreen = 5,};
enum MACRO_kPMRestartSystem {kPMRestartSystem = 6,};
struct OSArray__ExpansionData {};
struct OSIterator_vtbl_layout; 
struct SCSIMultimediaCommands;
typedef void (*UpdateEventFlagsAction)(OSObject *, unsigned int);
typedef UserExportDCLTimeStampStruct UserExportDCLTimeStamp;
typedef VDCommunicationInfoRec *VDCommunicationInfoPtr;
typedef VDSetHardwareCursorRec *VDSetHardwareCursorPtr;
typedef char __darwin_uuid_string_t[37];
struct __throttle_info_handle;
typedef int (*ccdes_key_is_weak_fn_t)(void *, unsigned int);
struct ccdrbg_nisthmac_custom { ccdigest_info *di;int strictFIPS;};
typedef void (*ccpad_xts_decrypt_fn_t)( ccmode_xts *, ccxts_ctx *, unsigned int,  void *, void *);
typedef void (*ccpad_xts_encrypt_fn_t)( ccmode_xts *, ccxts_ctx *, unsigned int,  void *, void *);
struct clock_frequency_info_t {unsigned int bus_clock_rate_hz;unsigned int cpu_clock_rate_hz;unsigned int dec_clock_rate_hz;unsigned int bus_clock_rate_num;unsigned int bus_clock_rate_den;unsigned int bus_to_cpu_rate_num;unsigned int bus_to_cpu_rate_den;unsigned int bus_to_dec_rate_num;unsigned int bus_to_dec_rate_den;unsigned int timebase_frequency_hz;unsigned int timebase_frequency_num;unsigned int timebase_frequency_den;unsigned long long bus_frequency_hz;unsigned long long bus_frequency_min_hz;unsigned long long bus_frequency_max_hz;unsigned long long cpu_frequency_hz;unsigned long long cpu_frequency_min_hz;unsigned long long cpu_frequency_max_hz;unsigned long long prf_frequency_hz;unsigned long long prf_frequency_min_hz;unsigned long long prf_frequency_max_hz;unsigned long long mem_frequency_hz;unsigned long long mem_frequency_min_hz;unsigned long long mem_frequency_max_hz;unsigned long long fix_frequency_hz;};
enum eIOAccelSurfaceMethods {kIOAccelSurfaceReadLockOptions = 0x0,kIOAccelSurfaceReadUnlockOptions = 0x1,kIOAccelSurfaceGetState = 0x2,kIOAccelSurfaceWriteLockOptions = 0x3,kIOAccelSurfaceWriteUnlockOptions = 0x4,kIOAccelSurfaceRead = 0x5,kIOAccelSurfaceSetShapeBacking = 0x6,kIOAccelSurfaceSetIDMode = 0x7,kIOAccelSurfaceSetScale = 0x8,kIOAccelSurfaceSetShape = 0x9,kIOAccelSurfaceFlush = 0xA,kIOAccelSurfaceQueryLock = 0xB,kIOAccelSurfaceReadLock = 0xC,kIOAccelSurfaceReadUnlock = 0xD,kIOAccelSurfaceWriteLock = 0xE,kIOAccelSurfaceWriteUnlock = 0xF,kIOAccelSurfaceControl = 0x10,kIOAccelSurfaceSetShapeBackingAndLength = 0x11,kIOAccelNumSurfaceMethods = 0x12,};
enum generic_snapshot_flags {kUser64_p = 0x1,kKernel64_p = 0x2,};
typedef host_basic_info host_basic_info_data_t;
typedef host_sched_info host_sched_info_data_t;
typedef i386_exception_state i386_exception_state_t;
typedef  ccdigest_info *(*img4_crypto_selector_t)(void);
typedef ipc_info_space_basic ipc_info_space_basic_t;
typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;
typedef mach_task_basic_info *mach_task_basic_info_t;
typedef int memory_object_flavor_t;
typedef unsigned long long memory_object_offset_t;
typedef int memory_object_return_t;
typedef routine_descriptor mig_routine_descriptor;
typedef policy_rr_limit policy_rr_limit_data_t;
typedef priority_queue_entry *priority_queue_entry_t;
typedef processor_basic_info *processor_basic_info_t;
typedef int processor_set_flavor_t;
typedef mach_msg_type_descriptor_t routine_arg_descriptor;
typedef task_basic_info task_basic_info_data_t;
typedef task_category_policy *task_category_policy_t;
typedef task_flags_info task_flags_info_data_t;
typedef task_power_info task_power_info_data_t;
typedef task_wait_state_info *task_wait_state_info_t;
enum thread_call_priority_t {THREAD_CALL_PRIORITY_HIGH = 0x0,THREAD_CALL_PRIORITY_KERNEL = 0x1,THREAD_CALL_PRIORITY_USER = 0x2,THREAD_CALL_PRIORITY_LOW = 0x3,THREAD_CALL_PRIORITY_KERNEL_HIGH = 0x4,};
typedef thread_extended_info *thread_extended_info_t;
typedef __throttle_info_handle *throttle_info_handle_t;
typedef void (*timebase_callback_func)(timebase_freq_t *);
typedef vm_extmod_statistics *vm_extmod_statistics_t;
typedef unsigned int vm_machine_attribute_t;
typedef vm_region_basic_info *vm_region_basic_info_t;
typedef vm_statistics64 vm_statistics64_data_t;
typedef int wait_timeout_urgency_t;
struct AppleUSBHostResources;
enum BluetoothL2CAPQoSType {kBluetoothL2CAPQoSTypeNoTraffic = 0x0,kBluetoothL2CAPQoSTypeBestEffort = 0x1,kBluetoothL2CAPQoSTypeGuaranteed = 0x2,};
enum BluetoothLEScanFilter {BluetoothLEScanFilterNone = 0x0,BluetoothLEScanFilterWhitelist = 0x1,};
struct DSPDoubleSplitComplex {double *realp;double *imagp;};
typedef FWSBP2NotifyParams *FWSBP2NotifyParamsPtr;
typedef IOHardwareCursorInfo HardwareCursorInfoRec;
struct IOCommand_vtbl_layout; 
typedef char IOEnetPromiscuousMode;
typedef void (*IOEventSource__Action)(OSObject *, ...);
struct IOFWDCL__InternalData {IOFWDCL *lastBranch;};
struct IOFWUserVectorCommand;
struct IOHIDAsyncReportQueue;
struct IOKitDiagnostics_vtbl; 
typedef IOUSBBOSDescriptor *IOUSBBOSDescriptorPtr;
typedef IOUSBDFUDescriptor *IOUSBDFUDescriptorPtr;
typedef IOUSBDevRequest *IOUSBDeviceRequestPtr;
typedef IOUSBHIDDescriptor *IOUSBHIDDescriptorPtr;
typedef IOUSBHIDReportDesc *IOUSBHIDReportDescPtr;
enum MACRO_BANK_ORIGINATOR {BANK_ORIGINATOR_PID = 0x1,BANK_PERSONA_TOKEN = 0x2,};
enum MACRO_ENOTRECOVERABLE {ENOTRECOVERABLE = 104,};
enum MACRO_EPROTONOSUPPORT {EPROTONOSUPPORT = 43,};
enum MACRO_ESOCKTNOSUPPORT {ESOCKTNOSUPPORT = 44,};
enum MACRO_GUARD_TYPE_NONE {GUARD_TYPE_NONE = 0x0,GUARD_TYPE_FD = 0x2,GUARD_TYPE_USER = 0x3,GUARD_TYPE_VN = 0x4,};
enum MACRO_ICMP6_RR_PCOUSE {ICMP6_RR_PCOUSE_RAFLAGS_ONLINK = 0x80,ICMP6_RR_PCOUSE_RAFLAGS_AUTO = 0x40,ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME = 0x80,ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME = 0x40,ICMP6_RR_RESULT_FLAGS_OOB = 0x200,ICMP6_RR_RESULT_FLAGS_FORBIDDEN = 0x100,};
enum MACRO_ICMPV6CTL_STATS {ICMPV6CTL_STATS = 1,ICMPV6CTL_REDIRACCEPT = 2,ICMPV6CTL_REDIRTIMEOUT = 3,ICMPV6CTL_ND6_PRUNE = 6,ICMPV6CTL_ND6_DELAY = 8,ICMPV6CTL_ND6_UMAXTRIES = 9,ICMPV6CTL_ND6_MMAXTRIES = 10,ICMPV6CTL_ND6_USELOOPBACK = 11,ICMPV6CTL_NODEINFO = 13,ICMPV6CTL_ERRPPSLIMIT = 14,ICMPV6CTL_ND6_MAXNUDHINT = 15,ICMPV6CTL_MTUDISC_HIWAT = 16,ICMPV6CTL_MTUDISC_LOWAT = 17,ICMPV6CTL_ND6_DEBUG = 18,ICMPV6CTL_ND6_DRLIST = 19,ICMPV6CTL_ND6_PRLIST = 20,ICMPV6CTL_MLD_MAXSRCFILTER = 21,ICMPV6CTL_MLD_SOMAXSRC = 22,ICMPV6CTL_MLD_VERSION = 23,ICMPV6CTL_ND6_MAXQLEN = 24,ICMPV6CTL_ND6_ACCEPT_6TO4 = 25,ICMPV6CTL_ND6_OPTIMISTIC_DAD = 26,ICMPV6CTL_MAXID = 27,};
enum MACRO_INADDR_LOOPBACK {INADDR_LOOPBACK = 2130706433,INADDR_UNSPEC_GROUP = 3758096384,INADDR_ALLHOSTS_GROUP = 3758096385,INADDR_ALLRTRS_GROUP = 3758096386,INADDR_ALLRPTS_GROUP = 3758096406,INADDR_CARP_GROUP = 3758096402,INADDR_PFSYNC_GROUP = 3758096624,INADDR_ALLMDNS_GROUP = 3758096635,INADDR_MAX_LOCAL_GROUP = 3758096639,};
enum MACRO_IOGRAPHICSTYPES {IOGRAPHICSTYPES_REV = 67,};
enum MACRO_IOPM_ROOTDOMAIN {IOPM_ROOTDOMAIN_REV = 2,};
enum MACRO_IOREGISTRYENTRY {IOREGISTRYENTRY_NAME_STRING = 1,IOREGISTRYENTRY_NAME = 2,};
enum MACRO_KDEBUG_COMMPAGE {KDEBUG_COMMPAGE_ENABLE_TRACE = 0x1,KDEBUG_COMMPAGE_ENABLE_TYPEFILTER = 0x2,};
enum MACRO_MCAST_UNDEFINED {MCAST_UNDEFINED = 0,MCAST_INCLUDE = 1,MCAST_EXCLUDE = 2,};
enum MACRO_SOCK_MAXADDRLEN {SOCK_MAXADDRLEN = 255,};
enum MACRO_TCPOPT_FASTOPEN {TCPOPT_FASTOPEN = 34,};
enum MACRO_THREAD_EXTENDED {THREAD_EXTENDED_INFO = 5,};
enum MACRO_TURNSTILE_ADDED {TURNSTILE_ADDED_TO_TURNSTILE_HEAP = 0x4,TURNSTILE_REMOVED_FROM_TURNSTILE_HEAP = 0x5,TURNSTILE_MOVED_IN_TURNSTILE_HEAP = 0x6,TURNSTILE_ADDED_TO_THREAD_HEAP = 0x7,TURNSTILE_REMOVED_FROM_THREAD_HEAP = 0x8,TURNSTILE_MOVED_IN_THREAD_HEAP = 0x9,TURNSTILE_UPDATE_STOPPED_BY_LIMIT = 0xA,};
enum MACRO___DARWIN_IPPORT {__DARWIN_IPPORT_RESERVED = 1024,};
enum MACRO___DARWIN_LITTLE {__DARWIN_LITTLE_ENDIAN = 1234,__DARWIN_BIG_ENDIAN = 4321,__DARWIN_PDP_ENDIAN = 3412,__DARWIN_FD_SETSIZE = 1024,__DARWIN_NBBY = 8,};
enum MACRO_kAVCInvalidPlug {kAVCInvalidPlug = 0xFE,};
enum MACRO_kAVCMaxNumPlugs {kAVCMaxNumPlugs = 31,};
enum MACRO_kAVCUnitAddress {kAVCUnitAddress = 0xFF,kAVCPlugSignalFormatNTSCDV = 0x80000000,};
enum MACRO_kCDMCNMaxLength {kCDMCNMaxLength = 13,};
enum MACRO_kEnTrCompKernel {kEnTrCompKernel = 2,};
enum MACRO_kIOMapperSystem {kIOMapperSystem = 0,};
enum MACRO_kNXEventVersion {kNXEventVersion = 2,};
enum MACRO_kPEEnableScreen {kPEEnableScreen = 6,};
enum MACRO_kPEGraphicsMode {kPEGraphicsMode = 1,kPETextMode = 2,};
enum MACRO_kPropNameLength {kPropNameLength = 32,};
typedef int NXEventSystemInfoData[1024];
typedef int *NXEventSystemInfoType;
typedef _NXTabletProximityData NXTabletProximityData;
struct OSBoolean_vtbl_layout; 
struct OSData__ExpansionData;
typedef _stickyKeys_ToggleInfo StickyKeys_ToggleInfo;
enum USBReEnumerateOptions {kUSBAddExtraResetTimeBit = 0x1F,kUSBReEnumerateCaptureDeviceBit = 0x1E,kUSBReEnumerateReleaseDeviceBit = 0x1D,kUSBAddExtraResetTimeMask = 0x80000000,kUSBReEnumerateCaptureDeviceMask = 0x40000000,kUSBReEnumerateReleaseDeviceMask = 0x20000000,};
typedef UserExportDCLCallProcStruct UserExportDCLCallProc;
typedef VDMultiConnectInfoRec *VDMultiConnectInfoPtr;
typedef short atomic_uint_least16_t;
typedef int atomic_uint_least32_t;
typedef long long atomic_uint_least64_t;
typedef struct cl_direct_read_lock cl_direct_read_lock_t;
struct fs_snapshot_root_args {componentname *sr_cnp;};
typedef host_load_info host_load_info_data_t;
enum kUSBHostConnectorType {kUSBTypeAConnector = 0x0,kUSBTypeMiniABConnector = 0x1,kUSBTypeExpressCard = 0x2,kUSB3TypeStdAConnector = 0x3,kUSB3TypeStdBConnector = 0x4,kUSB3TypeMicroBConnector = 0x5,kUSB3TypeMicroABConnector = 0x6,kUSB3TypePowerBConnector = 0x7,kUSBProprietaryConnector = 0xFF,};
typedef int kmod_control_flavor_t;
typedef mach_vm_info_region mach_vm_info_region_t;
typedef policy_rr_base policy_rr_base_data_t;
typedef policy_rr_info policy_rr_info_data_t;
enum tUSBHostConnectorType {kUSBHostConnectorTypeA = 0x0,kUSBHostConnectorTypeMiniAB = 0x1,kUSBHostConnectorTypeExpressCard = 0x2,kUSBHostConnectorTypeUSB3A = 0x3,kUSBHostConnectorTypeUSB3B = 0x4,kUSBHostConnectorTypeUSB3MicroB = 0x5,kUSBHostConnectorTypeUSB3MicroAB = 0x6,kUSBHostConnectorTypeUSB3PowerB = 0x7,kUSBHostConnectorTypeUSBTypeC = 0x9,kUSBHostConnectorTypeUnknown = 0xFE,kUSBHostConnectorTypeProprietary = 0xFF,};
typedef kcdata_item *task_crashinfo_item_t;
typedef task_dyld_info task_dyld_info_data_t;
enum thread_snapshot_flags {kHasDispatchSerial = 0x4,kStacksPCOnly = 0x8,kThreadDarwinBG = 0x10,kThreadIOPassive = 0x20,kThreadSuspended = 0x40,kThreadTruncatedBT = 0x80,kGlobalForcedIdle = 0x100,kThreadFaultedBT = 0x200,kThreadTriedFaultBT = 0x400,kThreadOnCore = 0x800,kThreadIdleWorker = 0x1000,kThreadMain = 0x2000,};
typedef int thread_state_flavor_t;
typedef int vm_page_info_flavor_t;
typedef int vm_region_info_data_t[1024];
typedef vol_attributes_attr vol_attributes_attr_t;
typedef x86_exception_state x86_exception_state_t;
typedef _AVCSubunitPlugRecord AVCSubunitPlugRecord;
typedef void (*BlockDisposeFunction)( void *);
enum BluetoothFeatureBits {kBluetoothFeatureThreeSlotPackets = 0x1,kBluetoothFeatureFiveSlotPackets = 0x2,kBluetoothFeatureEncryption = 0x4,kBluetoothFeatureSlotOffset = 0x8,kBluetoothFeatureTimingAccuracy = 0x10,kBluetoothFeatureSwitchRoles = 0x20,kBluetoothFeatureHoldMode = 0x40,kBluetoothFeatureSniffMode = 0x80,kBluetoothFeatureParkMode = 0x1,kBluetoothFeatureRSSI = 0x2,kBluetoothFeaturePowerControlRequests = 0x2,kBluetoothFeatureChannelQuality = 0x4,kBluetoothFeatureSCOLink = 0x8,kBluetoothFeatureHV2Packets = 0x10,kBluetoothFeatureHV3Packets = 0x20,kBluetoothFeatureULawLog = 0x40,kBluetoothFeatureALawLog = 0x80,kBluetoothFeatureCVSD = 0x1,kBluetoothFeaturePagingScheme = 0x2,kBluetoothFeaturePowerControl = 0x4,kBluetoothFeatureTransparentSCOData = 0x8,kBluetoothFeatureFlowControlLagBit0 = 0x10,kBluetoothFeatureFlowControlLagBit1 = 0x20,kBluetoothFeatureFlowControlLagBit2 = 0x40,kBluetoothFeatureBroadcastEncryption = 0x80,kBluetoothFeatureScatterMode = 0x1,kBluetoothFeatureEnhancedDataRateACL2MbpsMode = 0x2,kBluetoothFeatureEnhancedDataRateACL3MbpsMode = 0x4,kBluetoothFeatureEnhancedInquiryScan = 0x8,kBluetoothFeatureInterlacedInquiryScan = 0x10,kBluetoothFeatureInterlacedPageScan = 0x20,kBluetoothFeatureRSSIWithInquiryResult = 0x40,kBluetoothFeatureExtendedSCOLink = 0x80,kBluetoothFeatureEV4Packets = 0x1,kBluetoothFeatureEV5Packets = 0x2,kBluetoothFeatureAbsenceMasks = 0x4,kBluetoothFeatureAFHCapableSlave = 0x8,kBluetoothFeatureAFHClassificationSlave = 0x10,kBluetoothFeatureAliasAuhentication = 0x20,kBluetoothFeatureLESupportedController = 0x40,kBluetoothFeature3SlotEnhancedDataRateACLPackets = 0x80,kBluetoothFeature5SlotEnhancedDataRateACLPackets = 0x1,kBluetoothFeatureSniffSubrating = 0x2,kBluetoothFeaturePauseEncryption = 0x4,kBluetoothFeatureAFHCapableMaster = 0x8,kBluetoothFeatureAFHClassificationMaster = 0x10,kBluetoothFeatureEnhancedDataRateeSCO2MbpsMode = 0x20,kBluetoothFeatureEnhancedDataRateeSCO3MbpsMode = 0x40,kBluetoothFeature3SlotEnhancedDataRateeSCOPackets = 0x80,kBluetoothFeatureExtendedInquiryResponse = 0x1,kBluetoothFeatureSecureSimplePairing = 0x8,kBluetoothFeatureEncapsulatedPDU = 0x10,kBluetoothFeatureErroneousDataReporting = 0x20,kBluetoothFeatureNonFlushablePacketBoundaryFlag = 0x40,kBluetoothFeatureLinkSupervisionTimeoutChangedEvent = 0x1,kBluetoothFeatureInquiryTransmissionPowerLevel = 0x2,kBluetoothFeatureExtendedFeatures = 0x80,kBluetoothFeatureSimpleSecurePairingHostMode = 0x1,};
enum BluetoothHCIVersions {kBluetoothHCIVersionCoreSpecification1_0b = 0x0,kBluetoothHCIVersionCoreSpecification1_1 = 0x1,kBluetoothHCIVersionCoreSpecification1_2 = 0x2,kBluetoothHCIVersionCoreSpecification2_0EDR = 0x3,kBluetoothHCIVersionCoreSpecification2_1EDR = 0x4,kBluetoothHCIVersionCoreSpecification3_0HS = 0x5,kBluetoothHCIVersionCoreSpecification4_0 = 0x6,kBluetoothHCIVersionCoreSpecification4_1 = 0x7,kBluetoothHCIVersionCoreSpecification4_2 = 0x8,kBluetoothHCIVersionCoreSpecification5_0 = 0x9,};
enum BluetoothLMPVersions {kBluetoothLMPVersionCoreSpecification1_0b = 0x0,kBluetoothLMPVersionCoreSpecification1_1 = 0x1,kBluetoothLMPVersionCoreSpecification1_2 = 0x2,kBluetoothLMPVersionCoreSpecification2_0EDR = 0x3,kBluetoothLMPVersionCoreSpecification2_1EDR = 0x4,kBluetoothLMPVersionCoreSpecification3_0HS = 0x5,kBluetoothLMPVersionCoreSpecification4_0 = 0x6,kBluetoothLMPVersionCoreSpecification4_1 = 0x7,kBluetoothLMPVersionCoreSpecification4_2 = 0x8,kBluetoothLMPVersionCoreSpecification5_0 = 0x9,};
typedef DSPDoubleSplitComplex DOUBLE_COMPLEX_SPLIT;
typedef DriverDescription *DriverDescriptionPtr;
typedef DriverServiceInfo *DriverServiceInfoPtr;
typedef HIDCollectionNode *HIDCollectionNodePtr;
enum IOAVCCommandResponse {kAVCControlCommand = 0x0,kAVCStatusInquiryCommand = 0x1,kAVCSpecificInquiryCommand = 0x2,kAVCNotifyCommand = 0x3,kAVCGeneralInquiryCommand = 0x4,kAVCNotImplementedStatus = 0x8,kAVCAcceptedStatus = 0x9,kAVCRejectedStatus = 0xA,kAVCInTransitionStatus = 0xB,kAVCImplementedStatus = 0xC,kAVCChangedStatus = 0xD,kAVCInterimStatus = 0xF,};
typedef IOBlitCopyRectanglesStruct IOBlitCopyRectangles;
struct IOConditionLock_vtbl; 
struct IODMACommandInternal;
struct IOFWCmdQ_vtbl_layout; 
typedef IOFWDuplicateGUIDStruct IOFWDuplicateGUIDRec;
enum IOFWIsochPortOptions {kFWIsochPortDefaultOptions = 0x0,kFWIsochPortUseSeparateKernelThread = 0x2,kFWIsochEnableRobustness = 0x4,kFWIsochBigEndianUpdates = 0x8,kFWIsochRequireLastContext = 0x10,};
struct IOFWUserWriteCommand;
typedef IOFireWireSessionRefOpaqueStuct *IOFireWireSessionRef;
struct IOFireWireUserClient;
struct IOFramebufferPrivate;
struct IORTC__ExpansionData {};
typedef IOUSBKeyboardData *IOUSBKeyboardDataPtr;
enum KCDATA_SUBTYPE_TYPES {KC_ST_CHAR = 0x1,KC_ST_INT8 = 0x2,KC_ST_UINT8 = 0x3,KC_ST_INT16 = 0x4,KC_ST_UINT16 = 0x5,KC_ST_INT32 = 0x6,KC_ST_UINT32 = 0x7,KC_ST_INT64 = 0x8,KC_ST_UINT64 = 0x9,};
enum MACRO_B_ADAPTORSHIFT {B_ADAPTORSHIFT = 24,B_ADAPTORMASK = 15,B_CONTROLLERSHIFT = 20,B_CONTROLLERMASK = 15,B_UNITSHIFT = 16,B_UNITMASK = 255,B_PARTITIONSHIFT = 8,B_PARTITIONMASK = 255,B_TYPESHIFT = 0,B_TYPEMASK = 255,B_MAGICMASK = -268435456,B_DEVMAGIC = -1610612736,};
enum MACRO_CCSHA256_BLOCK {CCSHA256_BLOCK_SIZE = 64,CCSHA256_OUTPUT_SIZE = 32,CCSHA256_STATE_SIZE = 32,};
enum MACRO_DOT3COMPLIANCE {DOT3COMPLIANCE_STATS = 1,DOT3COMPLIANCE_COLLS = 2,};
enum MACRO_MACH_EXCEPTION {MACH_EXCEPTION_CODES = 0x80000000,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 256,};
enum MACRO_MICROSTACKSHOT {MICROSTACKSHOT_RECORD = 0x0,MICROSTACKSHOT_GATHER = 0x1,};
enum MACRO_NX_NUMKEYCODES {NX_NUMKEYCODES = 256,NX_NUMSEQUENCES = 128,NX_NUMMODIFIERS = 16,NX_BYTE_CODES = 0,NX_WHICHMODMASK = 15,NX_MODMASK = 16,NX_CHARGENMASK = 32,NX_SPECIALKEYMASK = 64,NX_KEYSTATEMASK = 128,NX_NOSPECIALKEY = 65535,NX_KEYTYPE_SOUND_UP = 0,NX_KEYTYPE_SOUND_DOWN = 1,NX_KEYTYPE_BRIGHTNESS_UP = 2,NX_KEYTYPE_BRIGHTNESS_DOWN = 3,NX_KEYTYPE_CAPS_LOCK = 4,NX_KEYTYPE_HELP = 5,NX_POWER_KEY = 6,NX_KEYTYPE_MUTE = 7,NX_UP_ARROW_KEY = 8,NX_DOWN_ARROW_KEY = 9,NX_KEYTYPE_NUM_LOCK = 10,NX_KEYTYPE_CONTRAST_UP = 11,NX_KEYTYPE_CONTRAST_DOWN = 12,NX_KEYTYPE_LAUNCH_PANEL = 13,NX_KEYTYPE_EJECT = 14,NX_KEYTYPE_VIDMIRROR = 15,NX_KEYTYPE_PLAY = 16,NX_KEYTYPE_NEXT = 17,NX_KEYTYPE_PREVIOUS = 18,NX_KEYTYPE_FAST = 19,NX_KEYTYPE_REWIND = 20,NX_KEYTYPE_ILLUMINATION_UP = 21,NX_KEYTYPE_ILLUMINATION_DOWN = 22,NX_KEYTYPE_ILLUMINATION_TOGGLE = 23,NX_NUMSPECIALKEYS = 24,NX_NUM_SCANNED_SPECIALKEYS = 24,NX_KEYTYPE_MENU = 25,NX_MODIFIERKEY_ALPHALOCK = 0,NX_MODIFIERKEY_SHIFT = 1,NX_MODIFIERKEY_CONTROL = 2,NX_MODIFIERKEY_ALTERNATE = 3,NX_MODIFIERKEY_COMMAND = 4,NX_MODIFIERKEY_NUMERICPAD = 5,NX_MODIFIERKEY_HELP = 6,NX_MODIFIERKEY_SECONDARYFN = 7,NX_MODIFIERKEY_NUMLOCK = 8,NX_MODIFIERKEY_RSHIFT = 9,NX_MODIFIERKEY_RCONTROL = 10,NX_MODIFIERKEY_RALTERNATE = 11,NX_MODIFIERKEY_RCOMMAND = 12,NX_MODIFIERKEY_ALPHALOCK_STATELESS = 13,NX_MODIFIERKEY_LAST_KEY = 13,};
enum MACRO_RLIMIT_WAKEUPS {RLIMIT_WAKEUPS_MONITOR = 0x1,RLIMIT_CPU_USAGE_MONITOR = 0x2,RLIMIT_THREAD_CPULIMITS = 0x3,RLIMIT_FOOTPRINT_INTERVAL = 0x4,};
enum MACRO_SACK_PERMITTED {TCPOPT_SACK_PERMITTED = 4,TCPOLEN_SACK_PERMITTED = 2,};
enum MACRO_THREAD_WAITING {THREAD_WAITING = -1,THREAD_AWAKENED = 0,THREAD_TIMED_OUT = 1,THREAD_INTERRUPTED = 2,THREAD_RESTART = 3,THREAD_NOT_WAITING = 10,THREAD_CONTINUE_NULL = 0,THREAD_UNINT = 0,THREAD_INTERRUPTIBLE = 1,THREAD_ABORTSAFE = 2,THREAD_WAIT_NOREPORT_KERNEL = -2147483648,THREAD_WAIT_NOREPORT_USER = 1073741824,};
enum MACRO___AVAILABILITY {__AVAILABILITY_MACROS_USES_AVAILABILITY = 1,};
enum MACRO___MigTypeCheck {__MigTypeCheck = 1,};
enum MACRO_kAVCAllOpcodes {kAVCAllOpcodes = 0xFF,};
enum MACRO_kOpenAppAsRoot {kOpenAppAsRoot = 0,kOpenAppAsConsoleUser = 1,};
typedef _NXTabletPointData *NXTabletPointDataPtr;
struct OSMetaClassBase_vtbl; 
struct OSNumber_vtbl_layout; 
struct OSObject_vtbl_layout; 
typedef char (*OSSerializerCallback)(void *, void *, OSSerialize *);
struct OSSet__ExpansionData {};
struct OSString_vtbl_layout; 
struct OSSymbol_vtbl_layout; 
typedef UASPipeDescriptor *UASPipeDescriptorPtr;
enum USBClassSpecificDesc {kUSBClassSpecificDescriptor = 0x24,};
enum USBNotificationTypes {kUSBNotificationPreForcedSuspend = 0x1,kUSBNotificationPostForcedSuspend = 0x2,kUSBNotificationPreForcedResume = 0x4,kUSBNotificationPostForcedResume = 0x8,};
enum USBPowerRequestTypes {kUSBPowerDuringSleep = 0x0,kUSBPowerDuringWake = 0x1,kUSBPowerRequestWakeRelease = 0x2,kUSBPowerRequestSleepRelease = 0x3,kUSBPowerRequestWakeReallocate = 0x4,kUSBPowerRequestSleepReallocate = 0x5,kUSBPowerDuringWakeRevocable = 0x6,kUSBPowerDuringWakeUSB3 = 0x7,};
typedef UserExportDCLCommandStruct UserExportDCLCommand;
typedef VDConvolutionInfoRec *VDConvolutionInfoPtr;
enum _IOAudioControlCalls {kIOAudioControlCallSetValue = 0x0,kIOAudioControlCallGetValue = 0x1,};
enum _IOAudioEngineMemory {kIOAudioStatusBuffer = 0x0,kIOAudioSampleBuffer = 0x1,kIOAudioMixBuffer = 0x2,kIOAudioBytesInInputBuffer = 0x3,kIOAudioBytesInOutputBuffer = 0x4,};
struct _NXParsedKeyMapping_ {short shorts;char keyBits[256];int maxMod;unsigned char *modDefs[16];int numDefs;unsigned char *keyDefs[256];int numSeqs;unsigned char *seqDefs[128];int numSpecialKeys;unsigned short specialKeys[24]; unsigned char *mapping;int mappingLen;};
typedef char _img4_opaque_data_32[476];
typedef char _img4_opaque_data_64[656];
typedef short atomic_int_least16_t;
typedef int atomic_int_least32_t;
typedef long long atomic_int_least64_t;
typedef short atomic_uint_fast16_t;
typedef int atomic_uint_fast32_t;
typedef long long atomic_uint_fast64_t;
typedef char atomic_uint_least8_t;
typedef ccchacha20poly1305_ctx chacha20poly1305_ctx;
enum evsioEVSIOCCSIndices {EVSIOCCS_X = 0x0,EVSIOCCS_Y = 0x1,};
enum evsioEVSIOSCSIndices {EVSIOSCS_X = 0x0,EVSIOSCS_Y = 0x1,};
typedef int exception_behavior_t;
typedef fbootstraptransfer fbootstraptransfer_t;
typedef host_cpu_load_info *host_cpu_load_info_t;
typedef host_priority_info *host_priority_info_t;
typedef vm_purgeable_info *host_purgable_info_t;
typedef ipc_info_tree_name ipc_info_tree_name_t;
typedef mach_header kernel_mach_header_t;
struct ledger_template_info {char lti_name[32];char lti_group[32];char lti_units[32];};
typedef unsigned int mach_msg_type_name_t;
typedef mach_port_info_ext mach_port_info_ext_t;
typedef mach_timebase_info *mach_timebase_info_t;
typedef mach_vm_read_entry mach_vm_read_entry_t[256];
enum mbuf_traffic_class_t {MBUF_TC_BE = 0x0,MBUF_TC_BK = 0x1,MBUF_TC_VI = 0x2,MBUF_TC_VO = 0x3,};
typedef int *memory_object_info_t;
typedef unsigned long long memory_object_size_t;
enum micro_snapshot_flags {kInterruptRecord = 0x1,kTimerArmingRecord = 0x2,kUserMode = 0x4,kIORecord = 0x8,kPMIRecord = 0x10,};
enum priority_queue_flags {PRIORITY_QUEUE_BUILTIN_KEY = 0x0,PRIORITY_QUEUE_GENERIC_KEY = 0x1,PRIORITY_QUEUE_MAX_HEAP = 0x0,PRIORITY_QUEUE_MIN_HEAP = 0x2,};
typedef routine_descriptor *routine_descriptor_t;
typedef task_basic_info_32 *task_basic_info_32_t;
typedef task_basic_info_64 *task_basic_info_64_t;
typedef task_power_info_v2 *task_power_info_v2_t;
typedef vm_purgeable_info task_purgable_info_t;
typedef user32_fsignatures user32_fsignatures_t;
typedef vm_page_info_basic *vm_page_info_basic_t;
typedef vm_region_top_info *vm_region_top_info_t;
typedef vm_statistics vm_statistics_data_t;
typedef i386_avx512_state x86_avx512_state32_t;
typedef x86_avx512_state64 x86_avx512_state64_t;
typedef i386_thread_state x86_thread_state32_t;
typedef x86_thread_state64 x86_thread_state64_t;
struct AVCSubunitInfo_vtbl; 
struct AppleUSBRequestPool;
typedef void (*BlockInvokeFunction)(void *, ...);
enum BluetoothLEScanType {BluetoothLEScanTypePassive = 0x0,BluetoothLEScanTypeActive = 0x1,};
struct DigitizerTransducer;
typedef HFSPlusExtentDescriptor HFSPlusExtentRecord[8];
typedef void *HIDPreparsedDataRef;
typedef _IOAudioEngineStatus IOAudioEngineStatus;
typedef _IOAudioStreamFormat IOAudioStreamFormat;
typedef IOBlitCopyRectangleStruct IOBlitCopyRectangle;
typedef _IODataQueueAppendix IODataQueueAppendix;
enum IODebuggerLockState {kIODebuggerLockTaken = 0x1,};
typedef char IOEnetMulticastMode;
struct IOHIDElementPrivate;
struct IOHIDKeyboardDevice;
struct IOHIDPointingDevice;
enum MACRO_AUDIT_CTLMODE {AUDIT_CTLMODE_NORMAL = 1,AUDIT_CTLMODE_EXTERNAL = 2,AUDIT_EXPIRE_OP_AND = 0,AUDIT_EXPIRE_OP_OR = 1,};
enum MACRO_CCN_DEDICATED {CCN_DEDICATED_SQR = 1,CCN_MUL_KARATSUBA = 1,CCN_ADD_ASM = 1,CCN_SUB_ASM = 1,CCN_MUL_ASM = 1,CCN_CMP_ASM = 0,CCN_N_ASM = 0,CCN_SHIFT_RIGHT_ASM = 0,CCN_ADDMUL1_ASM = 0,CCN_MUL1_ASM = 0,CCN_ADD1_ASM = 0,CCN_SUB1_ASM = 0,CCN_SET_ASM = 0,};
enum MACRO_EADDRNOTAVAIL {EADDRNOTAVAIL = 49,};
enum MACRO_EPROGMISMATCH {EPROGMISMATCH = 75,};
enum MACRO_ICMP6_MAXTYPE {ICMP6_MAXTYPE = 201,ICMP6_DST_UNREACH_NOROUTE = 0,ICMP6_DST_UNREACH_ADMIN = 1,ICMP6_DST_UNREACH_NOTNEIGHBOR = 2,ICMP6_DST_UNREACH_BEYONDSCOPE = 2,ICMP6_DST_UNREACH_ADDR = 3,ICMP6_DST_UNREACH_NOPORT = 4,ICMP6_TIME_EXCEED_TRANSIT = 0,ICMP6_TIME_EXCEED_REASSEMBLY = 1,ICMP6_PARAMPROB_HEADER = 0,ICMP6_PARAMPROB_NEXTHEADER = 1,ICMP6_PARAMPROB_OPTION = 2,ICMP6_INFOMSG_MASK = 128,ICMP6_NI_SUBJ_IPV6 = 0,ICMP6_NI_SUBJ_FQDN = 1,ICMP6_NI_SUBJ_IPV4 = 2,ICMP6_NI_SUCCESS = 0,ICMP6_NI_REFUSED = 1,ICMP6_NI_UNKNOWN = 2,ICMP6_ROUTER_RENUMBERING_COMMAND = 0,ICMP6_ROUTER_RENUMBERING_RESULT = 1,ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET = 255,};
enum MACRO_IFMIB_IFCOUNT {IFMIB_IFCOUNT = 1,};
enum MACRO_IOAUDIOENGINE {IOAUDIOENGINE_DEFAULT_NUM_ERASES_PER_BUFFER = 4,};
enum MACRO_IOFRAMEBUFFER {IOFRAMEBUFFER_REV = 6,};
enum MACRO_IPPORT_BOOTPS {IPPORT_BOOTPS = 67,IPPORT_BOOTPC = 68,};
enum MACRO_IPV6CTL_MAXID {IPV6CTL_MAXID = 51,};
enum MACRO_MAXDOMNAMELEN {MAXDOMNAMELEN = 256,NBPG = 4096,};
enum MACRO_MAX_TCPOPTLEN {MAX_TCPOPTLEN = 40,};
enum MACRO_NDRV_PROTOCOL {NDRV_PROTOCOL_DESC_VERS = 1,NDRV_DELDMXSPEC = 2,NDRV_SETDMXSPEC = 4,NDRV_ADDMULTICAST = 5,NDRV_DELMULTICAST = 6,NDRV_DMUX_MAX_DESCR = 1024,};
enum MACRO_PROCESSOR_SET {PROCESSOR_SET_BASIC_INFO = 5,PROCESSOR_SET_LOAD_INFO = 4,};
enum MACRO_SHARED_REGION {SHARED_REGION_BASE_I386 = 0x90000000,SHARED_REGION_SIZE_I386 = 0x20000000,SHARED_REGION_NESTING_BASE_I386 = 0x90000000,SHARED_REGION_NESTING_SIZE_I386 = 0x20000000,SHARED_REGION_NESTING_MIN_I386 = 0x200000,SHARED_REGION_NESTING_MAX_I386 = 0xFFE00000,SHARED_REGION_BASE_X86_64 = 0x7FFF00000000,SHARED_REGION_SIZE_X86_64 = 0xFFE00000,SHARED_REGION_NESTING_BASE_X86_64 = 0x7FFF00000000,SHARED_REGION_NESTING_SIZE_X86_64 = 0xFFE00000,SHARED_REGION_NESTING_MIN_X86_64 = 0x200000,SHARED_REGION_NESTING_MAX_X86_64 = 0xFFFFFFFFFFE00000,SHARED_REGION_BASE_PPC = 0x90000000,SHARED_REGION_SIZE_PPC = 0x20000000,SHARED_REGION_NESTING_BASE_PPC = 0x90000000,SHARED_REGION_NESTING_SIZE_PPC = 0x10000000,SHARED_REGION_NESTING_MIN_PPC = 0x10000000,SHARED_REGION_NESTING_MAX_PPC = 0x10000000,SHARED_REGION_BASE_PPC64 = 0x7FFF60000000,SHARED_REGION_SIZE_PPC64 = 0xA0000000,SHARED_REGION_NESTING_BASE_PPC64 = 0x7FFF60000000,SHARED_REGION_NESTING_SIZE_PPC64 = 0xA0000000,SHARED_REGION_NESTING_MIN_PPC64 = 0x10000000,SHARED_REGION_NESTING_MAX_PPC64 = 0x10000000,SHARED_REGION_BASE_ARM = 0x1A000000,SHARED_REGION_SIZE_ARM = 0x26000000,SHARED_REGION_NESTING_BASE_ARM = 0x1A000000,SHARED_REGION_NESTING_SIZE_ARM = 0x26000000,SHARED_REGION_BASE_ARM64 = 0x180000000,SHARED_REGION_SIZE_ARM64 = 0x100000000,SHARED_REGION_NESTING_BASE_ARM64 = 0x180000000,SHARED_REGION_NESTING_SIZE_ARM64 = 0x100000000,};
enum MACRO_TIME_ABSOLUTE {TIME_ABSOLUTE = 0x0,TIME_RELATIVE = 0x1,};
enum MACRO_VM_PROT_SLIDE {VM_PROT_SLIDE = 0x20,};
enum MACRO_VM_USRSTACK32 {VM_USRSTACK32 = 0xC0000000,VM_MAX_ADDRESS = 0xFFE00000,};
enum MACRO_VNG_ARMV7NEON {CCSHA1_VNG_ARMV7NEON = 0,CCSHA2_VNG_ARMV7NEON = 0,};
enum MACRO__IOUSERCLIENT {_IOUSERCLIENT_SENDASYNCRESULT64WITHOPTIONS_ = 1,};
enum MACRO__POSIX_THREAD {_POSIX_THREAD_KEYS_MAX = 128,};
enum MACRO___DARWIN_NSIG {__DARWIN_NSIG = 32,};
enum MACRO_kPETextScreen {kPETextScreen = 3,kPEAcquireScreen = 4,};
enum MACRO_pseudo_AF_KEY {pseudo_AF_KEY = 29,};
enum MACRO_pseudo_AF_PIP {pseudo_AF_PIP = 25,};
struct NXEventSystemDevice {int interface;int interface_addr;int dev_type;int id;};
struct OSArray_vtbl_layout; 
struct OSKextActiveAccount;
typedef void *OSSerialize__Editor;
typedef char RegCStrEntryNameBuf[48];
typedef char *RegCStrEntryNamePtr;
struct SCSIPrimaryCommands;
enum SCSIServiceResponse {kSCSIServiceResponse_Request_In_Process = 0x0,kSCSIServiceResponse_SERVICE_DELIVERY_OR_TARGET_FAILURE = 0x1,kSCSIServiceResponse_TASK_COMPLETE = 0x2,kSCSIServiceResponse_LINK_COMMAND_COMPLETE = 0x3,kSCSIServiceResponse_FUNCTION_COMPLETE = 0x4,kSCSIServiceResponse_FUNCTION_REJECTED = 0x5,};
typedef VDDetailedTimingRec *VDDetailedTimingPtr;
typedef VDResolutionInfoRec *VDResolutionInfoPtr;
enum _IOAudioEngineCalls {kIOAudioEngineCallRegisterClientBuffer = 0x0,kIOAudioEngineCallUnregisterClientBuffer = 0x1,kIOAudioEngineCallGetConnectionID = 0x2,kIOAudioEngineCallStart = 0x3,kIOAudioEngineCallStop = 0x4,kIOAudioEngineCallGetNearestStartTime = 0x5,};
enum _IOAudioEngineState {kIOAudioEngineStopped = 0x0,kIOAudioEngineRunning = 0x1,kIOAudioEnginePaused = 0x2,kIOAudioEngineResumed = 0x3,};
enum _IOAudioEngineTraps {kIOAudioEngineTrapPerformClientIO = 0x0,};
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef short atomic_int_fast16_t;
typedef int atomic_int_fast32_t;
typedef long long atomic_int_fast64_t;
typedef char atomic_int_least8_t;
typedef char atomic_uint_fast8_t;
struct cl_direct_read_lock;
typedef evioSpecialKeyMsg *evioSpecialKeyMsg_t;
enum hv_volatile_state_t {HV_DEBUG_STATE = 0x0,};
typedef i386_thread_state i386_thread_state_t;
struct ifmedia_description {int ifmt_word; char *ifmt_string;};
struct in6_prflags__prf_ra {unsigned char onlink : 1;unsigned char autonomous : 1;unsigned char reserved : 6;};
struct in6_prflags__prf_rr {unsigned char decrvalid : 1;unsigned char decrprefd : 1;unsigned char reserved : 6;};
typedef ipc_space *ipc_space_inspect_t;
typedef void *kcdata_descriptor_t;
enum kxld_allocate_flags {kKxldAllocateDefault = 0x0,kKxldAllocateWritable = 0x1,};
typedef unsigned int mach_msg_priority_t;
typedef mach_port_options mach_port_options_t;
typedef unsigned int mach_port_srights_t;
typedef policy_fifo_limit *policy_fifo_limit_t;
typedef policy_limits policy_limit_data_t;
typedef rusage_info_v4 rusage_info_current;
enum tUSBDeviceLPMStatus {kUSBDeviceLPMStatusDefault = 0x0,kUSBDeviceLPMStatusDisabled = 0x1,kUSBDeviceLPMStatusEnabled = 0x2,};
enum task_inspect_flavor {TASK_INSPECT_BASIC_COUNTS = 0x1,};
enum task_snapshot_flags {kTaskRsrcFlagged = 0x4,kTerminatedSnapshot = 0x8,kPidSuspended = 0x10,kFrozen = 0x20,kTaskDarwinBG = 0x40,kTaskExtDarwinBG = 0x80,kTaskVisVisible = 0x100,kTaskVisNonvisible = 0x200,kTaskIsForeground = 0x400,kTaskIsBoosted = 0x800,kTaskIsSuppressed = 0x1000,kTaskIsTimerThrottled = 0x2000,kTaskIsImpDonor = 0x4000,kTaskIsLiveImpDonor = 0x8000,kTaskIsDirty = 0x10000,kTaskWqExceededConstrainedThreadLimit = 0x20000,kTaskWqExceededTotalThreadLimit = 0x40000,kTaskWqFlagsAvailable = 0x80000,kTaskUUIDInfoFaultedIn = 0x100000,kTaskUUIDInfoMissing = 0x200000,kTaskUUIDInfoTriedFault = 0x400000,kTaskSharedRegionInfoUnavailable = 0x800000,kTaskTALEngaged = 0x1000000,kTaskIsDirtyTracked = 0x4000000,kTaskAllowIdleExit = 0x8000000,};
typedef int task_special_port_t;
enum task_throughput_qos {THROUGHPUT_QOS_TIER_UNSPECIFIED = 0x0,THROUGHPUT_QOS_TIER_0 = 0xFE0001,THROUGHPUT_QOS_TIER_1 = 0xFE0002,THROUGHPUT_QOS_TIER_2 = 0xFE0003,THROUGHPUT_QOS_TIER_3 = 0xFE0004,THROUGHPUT_QOS_TIER_4 = 0xFE0005,THROUGHPUT_QOS_TIER_5 = 0xFE0006,};
typedef task_vm_info task_vm_info_data_t;
typedef thread_basic_info *thread_basic_info_t;
typedef void *thread_call_param_t;
typedef user32_fcodeblobs user32_fcodeblobs_t;
typedef user64_fcodeblobs user64_fcodeblobs_t;
typedef vDSP_biquadm_SetupStructD *vDSP_biquadm_SetupD;
typedef vm_info_region_64 vm_info_region_64_t;
typedef int vm_page_info_data_t[];
typedef vm_purgeable_info *vm_purgeable_info_t;
typedef vm_purgeable_stat vm_purgeable_stat_t;
typedef int *vm_region_info_64_t;
struct vnodeopv_entry_desc {vnodeop_desc *opve_op;int (*opve_impl)(void *);};
typedef x86_debug_state32 x86_debug_state32_t;
typedef x86_debug_state64 x86_debug_state64_t;
typedef i386_float_state x86_float_state32_t;
typedef x86_float_state64 x86_float_state64_t;
struct Block_descriptor_3 { char *signature; char *layout;};
enum BluetoothLinkTypes {kBluetoothSCOConnection = 0x0,kBluetoothACLConnection = 0x1,kBluetoothESCOConnection = 0x2,kBluetoothLinkTypeNone = 0xFF,};
typedef OpaqueDTPropertyIterator *DTPropertyIterator;
typedef void (*DebugKeyActionProc)(IOHIDEventService *, void *);
typedef DriverOSRuntime *DriverOSRuntimePtr;
typedef DriverOSService *DriverOSServicePtr;
typedef HIDCapabilities *HIDCapabilitiesPtr;
typedef HIDUsageAndPage *HIDUsageAndPagePtr;
struct IOFireWireROMCache;
typedef void *IOHIDElementCookie;
struct IOHIDReportHandler;
typedef void (*IOInterruptHandler)(void *, void *, void *, int);
typedef IOUSBHubStatus IOUSBHubPortStatus;
enum MACRO_ABSOLUTETIME {ABSOLUTETIME_SCALAR_TYPE = 1,};
enum MACRO_CTLTYPE_NODE {CTLTYPE_NODE = 1,CTLTYPE_INT = 2,CTLTYPE_STRING = 3,CTLTYPE_QUAD = 4,CTLTYPE_OPAQUE = 5,};
enum MACRO_EAFNOSUPPORT {EAFNOSUPPORT = 47,};
enum MACRO_ECONNABORTED {ECONNABORTED = 53,};
enum MACRO_ECONNREFUSED {ECONNREFUSED = 61,};
enum MACRO_EDESTADDRREQ {EDESTADDRREQ = 39,};
enum MACRO_EHOSTUNREACH {EHOSTUNREACH = 65,};
enum MACRO_ENAMETOOLONG {ENAMETOOLONG = 63,EHOSTDOWN = 64,};
enum MACRO_EPFNOSUPPORT {EPFNOSUPPORT = 46,};
enum MACRO_EPROCUNAVAIL {EPROCUNAVAIL = 76,};
enum MACRO_EPROGUNAVAIL {EPROGUNAVAIL = 74,};
enum MACRO_ERPCMISMATCH {ERPCMISMATCH = 73,};
enum MACRO_ETOOMANYREFS {ETOOMANYREFS = 59,};
enum MACRO_FUNENCRYPTED {FUNENCRYPTED = 0x10000000,};
enum MACRO_ICMP6_ROUTER {ICMP6_ROUTER_RENUMBERING = 138,ICMP6_WRUREQUEST = 139,ICMP6_WRUREPLY = 140,ICMP6_FQDN_QUERY = 139,ICMP6_FQDN_REPLY = 140,ICMP6_NI_QUERY = 139,ICMP6_NI_REPLY = 140,};
enum MACRO_IPV6_MAXHLIM {IPV6_MAXHLIM = 255,IPV6_DEFHLIM = 64,IPV6_FRAGTTL = 60,IPV6_HLIMDEC = 1,IPV6_MMTU = 1280,IPV6_MAXPACKET = 65535,IPV6_MAXOPTHDR = 2048,};
enum MACRO_IPV6_VERSION {IPV6_VERSION = 0x60,IPV6_VERSION_MASK = 0xF0,IPV6_FLOWINFO_MASK = 0xFFFFFF0F,IPV6_FLOWLABEL_MASK = 0xFFFF0F00,IPV6_FLOW_ECN_MASK = 0x3000,};
enum MACRO_IP_PORTRANGE {IP_PORTRANGE_DEFAULT = 0,IP_PORTRANGE_HIGH = 1,IP_PORTRANGE_LOW = 2,};
enum MACRO_KEV_SNDSPACE {KEV_SNDSPACE = 4096,KEV_RECVSPACE = 32768,KEV_ANY_VENDOR = 0,KEV_ANY_CLASS = 0,KEV_ANY_SUBCLASS = 0,KEV_VENDOR_APPLE = 1,KEV_NETWORK_CLASS = 1,KEV_IOKIT_CLASS = 2,KEV_SYSTEM_CLASS = 3,KEV_APPLESHARE_CLASS = 4,KEV_FIREWALL_CLASS = 5,KEV_IEEE80211_CLASS = 6,KEV_VENDOR_CODE_MAX_STR_LEN = 200,};
enum MACRO_MACH_VOUCHER {MACH_VOUCHER_NULL = 0,MACH_VOUCHER_NAME_NULL = 0,MACH_VOUCHER_NAME_ARRAY_NULL = 0,};
enum MACRO_MAXAUDITDATA {MAXAUDITDATA = 0x7FFF,};
enum MACRO_MAX_IPOPTLEN {MAX_IPOPTLEN = 40,};
enum MACRO_NAME_MAX_LEN {ZONE_NAME_MAX_LEN = 80,MACH_ZONE_NAME_MAX_LEN = 80,MACH_MEMORY_INFO_NAME_MAX_LEN = 80,};
enum MACRO_NX_NULLEVENT {NX_NULLEVENT = 0,NX_LMOUSEDOWN = 1,NX_LMOUSEUP = 2,NX_RMOUSEDOWN = 3,NX_RMOUSEUP = 4,NX_MOUSEMOVED = 5,NX_LMOUSEDRAGGED = 6,NX_RMOUSEDRAGGED = 7,NX_MOUSEENTERED = 8,NX_MOUSEEXITED = 9,NX_OMOUSEDOWN = 25,NX_OMOUSEUP = 26,NX_OMOUSEDRAGGED = 27,NX_KEYDOWN = 10,NX_KEYUP = 11,NX_FLAGSCHANGED = 12,NX_KITDEFINED = 13,NX_SYSDEFINED = 14,NX_APPDEFINED = 15,NX_SCROLLWHEELMOVED = 22,NX_ZOOM = 28,NX_TABLETPOINTER = 23,NX_TABLETPROXIMITY = 24,NX_FIRSTEVENT = 0,NX_LASTEVENT = 28,NX_ALLEVENTS = -1,NX_SUBTYPE_DEFAULT = 0,NX_SUBTYPE_TABLET_POINT = 1,NX_SUBTYPE_TABLET_PROXIMITY = 2,NX_SUBTYPE_MOUSE_TOUCH = 3,NX_SUBTYPE_POWER_KEY = 1,NX_SUBTYPE_AUX_MOUSE_BUTTONS = 7,NX_SUBTYPE_AUX_CONTROL_BUTTONS = 8,NX_SUBTYPE_EJECT_KEY = 10,NX_SUBTYPE_SLEEP_EVENT = 11,NX_SUBTYPE_RESTART_EVENT = 12,NX_SUBTYPE_SHUTDOWN_EVENT = 13,NX_SUBTYPE_MENU = 16,NX_SUBTYPE_ACCESSIBILITY = 17,NX_SUBTYPE_STICKYKEYS_ON = 100,NX_SUBTYPE_STICKYKEYS_OFF = 101,NX_SUBTYPE_STICKYKEYS_SHIFT = 102,NX_SUBTYPE_STICKYKEYS_CONTROL = 103,NX_SUBTYPE_STICKYKEYS_ALTERNATE = 104,NX_SUBTYPE_STICKYKEYS_COMMAND = 105,NX_SUBTYPE_STICKYKEYS_RELEASE = 106,NX_SUBTYPE_STICKYKEYS_TOGGLEMOUSEDRIVING = 107,NX_SUBTYPE_STICKYKEYS_SHIFT_DOWN = 110,NX_SUBTYPE_STICKYKEYS_CONTROL_DOWN = 111,NX_SUBTYPE_STICKYKEYS_ALTERNATE_DOWN = 112,NX_SUBTYPE_STICKYKEYS_COMMAND_DOWN = 113,NX_SUBTYPE_STICKYKEYS_FN_DOWN = 114,NX_SUBTYPE_STICKYKEYS_SHIFT_LOCK = 120,NX_SUBTYPE_STICKYKEYS_CONTROL_LOCK = 121,NX_SUBTYPE_STICKYKEYS_ALTERNATE_LOCK = 122,NX_SUBTYPE_STICKYKEYS_COMMAND_LOCK = 123,NX_SUBTYPE_STICKYKEYS_FN_LOCK = 124,NX_SUBTYPE_STICKYKEYS_SHIFT_UP = 130,NX_SUBTYPE_STICKYKEYS_CONTROL_UP = 131,NX_SUBTYPE_STICKYKEYS_ALTERNATE_UP = 132,NX_SUBTYPE_STICKYKEYS_COMMAND_UP = 133,NX_SUBTYPE_STICKYKEYS_FN_UP = 134,NX_SUBTYPE_SLOWKEYS_START = 200,NX_SUBTYPE_SLOWKEYS_ABORT = 201,NX_SUBTYPE_SLOWKEYS_END = 202,NX_SUBTYPE_HIDPARAMETER_MODIFIED = 210,NX_ALPHASHIFTMASK = 65536,NX_SHIFTMASK = 131072,NX_CONTROLMASK = 262144,NX_ALTERNATEMASK = 524288,NX_COMMANDMASK = 1048576,NX_NUMERICPADMASK = 2097152,NX_HELPMASK = 4194304,NX_SECONDARYFNMASK = 8388608,NX_ALPHASHIFT_STATELESS_MASK = 16777216,NX_DEVICELCTLKEYMASK = 1,NX_DEVICELSHIFTKEYMASK = 2,NX_DEVICERSHIFTKEYMASK = 4,NX_DEVICELCMDKEYMASK = 8,NX_DEVICERCMDKEYMASK = 16,NX_DEVICELALTKEYMASK = 32,NX_DEVICERALTKEYMASK = 64,NX_DEVICE_ALPHASHIFT_STATELESS_MASK = 128,NX_DEVICERCTLKEYMASK = 8192,NX_STYLUSPROXIMITYMASK = 128,NX_NONCOALSESCEDMASK = 256,NX_ASCIISET = 0,NX_SYMBOLSET = 1,NX_DINGBATSSET = 2,NX_TABLET_BUTTON_PENTIPMASK = 1,NX_TABLET_BUTTON_PENLOWERSIDEMASK = 2,NX_TABLET_BUTTON_PENUPPERSIDEMASK = 4,NX_TABLET_CAPABILITY_DEVICEIDMASK = 1,NX_TABLET_CAPABILITY_ABSXMASK = 2,NX_TABLET_CAPABILITY_ABSYMASK = 4,NX_TABLET_CAPABILITY_VENDOR1MASK = 8,NX_TABLET_CAPABILITY_VENDOR2MASK = 16,NX_TABLET_CAPABILITY_VENDOR3MASK = 32,NX_TABLET_CAPABILITY_BUTTONSMASK = 64,NX_TABLET_CAPABILITY_TILTXMASK = 128,NX_TABLET_CAPABILITY_TILTYMASK = 256,NX_TABLET_CAPABILITY_ABSZMASK = 512,NX_TABLET_CAPABILITY_PRESSUREMASK = 1024,NX_TABLET_CAPABILITY_TANGENTIALPRESSUREMASK = 2048,NX_TABLET_CAPABILITY_ORIENTINFOMASK = 4096,NX_TABLET_CAPABILITY_ROTATIONMASK = 8192,NX_TABLET_POINTER_UNKNOWN = 0,NX_TABLET_POINTER_PEN = 1,NX_TABLET_POINTER_CURSOR = 2,NX_TABLET_POINTER_ERASER = 3,};
enum MACRO_RLIM_NLIMITS {RLIM_NLIMITS = 9,};
enum MACRO_SF_SUPPORTED {SF_SUPPORTED = 0x1F0000,SF_SETTABLE = 0xFFFF0000,SF_ARCHIVED = 0x10000,SF_IMMUTABLE = 0x20000,SF_APPEND = 0x40000,SF_RESTRICTED = 0x80000,SF_NOUNLINK = 0x100000,};
enum MACRO_SI_MOUNTEDON {SI_MOUNTEDON = 0x1,SI_ALIASED = 0x2,};
enum MACRO_THREAD_ADDED {THREAD_ADDED_TO_TURNSTILE_WAITQ = 0x1,THREAD_REMOVED_FROM_TURNSTILE_WAITQ = 0x2,THREAD_MOVED_IN_TURNSTILE_WAITQ = 0x3,};
enum MACRO_THREAD_DEBUG {THREAD_DEBUG_INFO_INTERNAL = 6,};
enum MACRO_THREAD_SCHED {THREAD_SCHED_TIMESHARE_INFO = 10,THREAD_SCHED_RR_INFO = 11,THREAD_SCHED_FIFO_INFO = 12,THREAD_STANDARD_POLICY = 1,THREAD_STANDARD_POLICY_COUNT = 0,THREAD_EXTENDED_POLICY = 1,THREAD_TIME_CONSTRAINT_POLICY = 2,THREAD_PRECEDENCE_POLICY = 3,THREAD_AFFINITY_POLICY = 4,THREAD_AFFINITY_TAG_NULL = 0,THREAD_BACKGROUND_POLICY = 5,THREAD_BACKGROUND_POLICY_DARWIN_BG = 4096,THREAD_LATENCY_QOS_POLICY = 7,THREAD_THROUGHPUT_QOS_POLICY = 8,THREAD_KERNEL_PORT = 1,};
enum MACRO_THREAD_STATE {THREAD_STATE_FLAVOR_LIST = 0,THREAD_STATE_FLAVOR_LIST_NEW = 128,THREAD_STATE_FLAVOR_LIST_10_9 = 129,THREAD_STATE_FLAVOR_LIST_10_13 = 130,};
enum MACRO_VNODE_REMOVE {VNODE_REMOVE_NODELETEBUSY = 0x1,VNODE_REMOVE_SKIP_NAMESPACE_EVENT = 0x2,VNODE_REMOVE_NO_AUDIT_PATH = 0x4,VNODE_READDIR_EXTENDED = 0x1,VNODE_READDIR_REQSEEKOFF = 0x2,VNODE_READDIR_SEEKOFF32 = 0x4,VNODE_READDIR_NAMEMAX = 0x8,VNODE_CLONEFILE_DEFAULT = 0x0,VNODE_CLONEFILE_NOOWNERCOPY = 0x1,};
enum MACRO___DARWIN_CLK {__DARWIN_CLK_TCK = 100,};
enum MACRO_kDVDSpeedMax {kDVDSpeedMax = 0xFFFF,};
enum MACRO_kDVDSpeedMin {kDVDSpeedMin = 0x546,};
typedef _NXParsedKeyMapping_ NXParsedKeyMapping;
enum ProtocolParameters {kBluetoothSDPProtocolParameterL2CAPPSM = 0x1,kBluetoothSDPProtocolParameterRFCOMMChannel = 0x1,kBluetoothSDPProtocolParameterTCPPort = 0x1,kBluetoothSDPProtocolParameterUDPPort = 0x1,kBluetoothSDPProtocolParameterBNEPVersion = 0x1,kBluetoothSDPProtocolParameterBNEPSupportedNetworkPacketTypeList = 0x2,};
typedef char RegPropertyNameBuf[32];
typedef char *RegPropertyNamePtr;
typedef OSObject *SCSITaskIdentifier;
struct UCInfo_vtbl_layout; 
enum USBHubClassRequest {kUSBHubRqGetStatus = 0x0,kUSBHubRqClearFeature = 0x1,kUSBHubRqGetState = 0x2,kUSBHubRqSetFeature = 0x3,kUSBHubRqReserved2 = 0x4,kUSBHubRqSetAddress = 0x5,kUSBHubRqGetDescriptor = 0x6,kUSBHubRqSetDescriptor = 0x7,kUSBHubRqGetConfig = 0x8,kUSBHubRqSetConfig = 0x9,kUSBHubRqGetInterface = 0xA,kUSBHubRqSetInterface = 0xB,};
typedef UserExportDCLLabelStruct UserExportDCLLabel;
typedef VDCommunicationRec *VDCommunicationPtr;
typedef VDConfigurationRec *VDConfigurationPtr;
typedef VDRetrieveGammaRec *VDRetrieveGammaPtr;
struct _IOServiceNotifier;
typedef int __darwin_ct_rune_t;
typedef __mbstate_t __darwin_mbstate_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_ptrdiff_t;
struct accessx_descriptor {unsigned int ad_name_offset;int ad_flags;int ad_pad[2];};
typedef char atomic_int_fast8_t;
typedef void (*ccpbkdf2_hmac_fn_t)( ccdigest_info *, unsigned int,  void *, unsigned int,  void *, unsigned int, unsigned int, void *);
enum coprocessor_type_t {kCoprocessorVersionNone = 0x0,kCoprocessorVersion1 = 0x10000,kCoprocessorVersion2 = 0x20000,};
typedef crypto_functions *crypto_functions_t;
struct dk_firmware_path_t {char path[128];};
typedef hash_info_bucket hash_info_bucket_t;
typedef i386_float_state i386_float_state_t;
typedef _img4_environment img4_environment_t;
typedef __ifnet_filter *interface_filter_t;
typedef int io_scalar_inband_t[16];
typedef char io_string_inband_t[4096];
typedef char io_struct_inband_t[4096];
typedef char kernel_boot_info_t[4096];
enum kxld_log_subsystem {kKxldLogLinking = 0x0,kKxldLogPatching = 0x1,};
typedef unsigned int lck_sleep_action_t;
typedef mach_memory_info mach_memory_info_t;
typedef int mach_port_flavor_t;
typedef mach_port_limits mach_port_limits_t;
typedef mach_port_status mach_port_status_t;
typedef void (*mig_stub_routine_t)(mach_msg_header_t *, mach_msg_header_t *);
typedef void *os_trace_payload_t;
typedef policy_bases policy_base_data_t;
typedef policy_fifo_base *policy_fifo_base_t;
typedef policy_fifo_info *policy_fifo_info_t;
typedef policy_infos policy_info_data_t;
typedef int processor_flavor_t;
enum reloc_type_generic {GENERIC_RELOC_VANILLA = 0x0,GENERIC_RELOC_PAIR = 0x1,GENERIC_RELOC_SECTDIFF = 0x2,GENERIC_RELOC_PB_LA_PTR = 0x3,GENERIC_RELOC_LOCAL_SECTDIFF = 0x4,GENERIC_RELOC_TLV = 0x5,};
typedef unsigned int routine_arg_offset;
enum tDeviceRequestType {kRequestTypeStandard = 0x0,kRequestTypeClass = 0x1,kRequestTypeVendor = 0x2,};
enum tEndpointDirection {kEndpointDirectionOut = 0x0,kEndpointDirectionIn = 0x1,kEndpointDirectionUnknown = 0x2,};
enum tUSBCTypeCableType {kUSBTypeCCableTypeNone = 0x0,kUSBTypeCCableTypeUSB = 0x1,};
enum tUSBHostPortStatus {kUSBHostPortStatusPortTypeMask = 0xF,kUSBHostPortStatusPortTypePhase = 0x0,kUSBHostPortStatusPortTypeStandard = 0x0,kUSBHostPortStatusPortTypeCaptive = 0x1,kUSBHostPortStatusPortTypeInternal = 0x2,kUSBHostPortStatusPortTypeAccessory = 0x3,kUSBHostPortStatusPortTypeReserved = 0xF0,kUSBHostPortStatusConnectedSpeedMask = 0x700,kUSBHostPortStatusConnectedSpeedPhase = 0x8,kUSBHostPortStatusConnectedSpeedNone = 0x0,kUSBHostPortStatusConnectedSpeedFull = 0x100,kUSBHostPortStatusConnectedSpeedLow = 0x200,kUSBHostPortStatusConnectedSpeedHigh = 0x300,kUSBHostPortStatusConnectedSpeedSuper = 0x400,kUSBHostPortStatusConnectedSpeedSuperPlus = 0x500,kUSBHostPortStatusResetting = 0x800,kUSBHostPortStatusEnabled = 0x1000,kUSBHostPortStatusSuspended = 0x2000,kUSBHostPortStatusOvercurrent = 0x4000,kUSBHostPortStatusTestMode = 0x8000,};
enum tUSBLPMExitLatency {kDescriptorExitLatency = 0x0,kDeviceExitLatency = 0x1,kSystemExitLatency = 0x2,kMaxExitLatency = 0x3,kBestEffortServiceLatency = 0x4,kBestEffortServiceLatencyDeep = 0x5,kDefaultBestEffortServiceLatency = 0x6,kDefaultBestEffortServiceLatencyDeep = 0x7,kMaxL1BaseExitLatency = 0x8,kMaxL1DeepExitLatency = 0x9,};
typedef task_events_info *task_events_info_t;
typedef task_extmod_info *task_extmod_info_t;
enum thread_group_flags {kThreadGroupEfficient = 0x1,kThreadGroupUIApp = 0x2,};
typedef user_fsignatures user_fsignatures_t;
typedef vDSP_biquad_SetupStructD *vDSP_biquad_SetupD;
typedef vDSP_biquadm_SetupStruct *vDSP_biquadm_Setup;
typedef unsigned int vfs_rename_flags_t;
typedef int vm_region_flavor_t;
struct vm_region_top_info {unsigned int obj_id;unsigned int ref_count;unsigned int private_pages_resident;unsigned int shared_pages_resident;unsigned char share_mode;};
struct vnop_strategy_args {vnodeop_desc *a_desc;buf *a_bp;};
typedef x86_avx512_state x86_avx512_state_t;
typedef x86_thread_state x86_thread_state_t;
typedef _AVCUnitPlugRecord AVCUnitPlugRecord;
struct AsyncPendingTrans {IOFWAsyncCommand *fHandler;IOFWCommand *fAltHandler;int fTCode;char fInUse;};
typedef void (*BlockCopyFunction)(void *,  void *);
enum BluetoothHCIRoles {kBluetoothHCIMasterRole = 0x0,kBluetoothHCISlaveRole = 0x1,};
typedef DCLSetTagSyncBitsStruct DCLSetTagSyncBits;
typedef DCLTransferBufferStruct DCLTransferBuffer;
typedef DCLTransferPacketStruct DCLTransferPacket;
typedef char DTPropertyNameBuf[32];
typedef void *FWClientCommandID;
struct GTraceBuffer_vtbl; 
struct IOATABusInfo_vtbl; 
typedef _IOAudioSampleRate IOAudioSampleRate;
struct IOAudioUserClient;
struct IOBluetoothDevice;
typedef _IODataQueueMemory IODataQueueMemory;
typedef void (*IOFBInterruptProc)(OSObject *, void *);
typedef void (*IOFWDCL__Callback)(void *);
typedef void *IOFWRequestRefCon;
typedef void (*IOInterruptAction)(OSObject *, void *, IOService *, int);
struct IOInterruptSource {IOInterruptController *interruptController;OSData *vectorData;};
struct __attribute__((packed)) __attribute__((aligned(2))) IONVRAMDescriptor {unsigned int format : 4;unsigned int marker : 1;unsigned int bridgeCount : 3;unsigned int busNum : 2;unsigned int bridgeDevices : 30;unsigned int functionNum : 3;unsigned int deviceNum : 5;};
typedef void *IONotificationRef;
struct IOPCIConfigurator;
typedef IOUSBHubStatus *IOUSBHubStatusPtr;
typedef IOUSBMouseData *IOUSBMouseDataPtr;
enum MACRO_AF_RESERVED {AF_RESERVED_36 = 36,AF_IEEE80211 = 37,AF_UTUN = 38,AF_MAX = 40,};
enum MACRO_BANK_SETTLE {BANK_SETTLE_CPU_TIME = 0x1,BANK_SECURE_ORIGINATOR_CHANGED = 0x2,BANK_SETTLE_ENERGY = 0x3,};
enum MACRO_BOOTREQUEST {BOOTREQUEST = 1,BOOTREPLY = 2,};
enum MACRO_CCAES_BLOCK {CCAES_BLOCK_SIZE = 16,CCAES_KEY_SIZE_128 = 16,CCAES_KEY_SIZE_192 = 24,CCAES_KEY_SIZE_256 = 32,CCAES_CTR_MAX_PARALLEL_NBLOCKS = 8,};
enum MACRO_CC_FIPSPOST {CC_FIPSPOST_TRACE = 0,};
enum MACRO_CTL_MAXNAME {CTL_MAXNAME = 12,};
enum MACRO_DEBUG_LEVEL {DEBUG_LEVEL_PRODUCTION = 0,DEBUG_LEVEL_DEVELOPMENT = 1,DEBUG_LEVEL_ALPHA = 2,DEBUG_LEVEL_BETA = 3,};
enum MACRO_EINPROGRESS {EINPROGRESS = 36,};
enum MACRO_EJUSTRETURN {EJUSTRETURN = -2,};
enum MACRO_ENETUNREACH {ENETUNREACH = 51,};
enum MACRO_ENOPROTOOPT {ENOPROTOOPT = 42,};
enum MACRO_FWASWRITTEN {FWASWRITTEN = 0x10000,};
enum MACRO_GPACKNODATA {GPACKNODATA = 0,kGTraceHeaderEntries = 2,kGTraceMaxBreadcrumbSize = 16384,};
enum MACRO_HOST_REBOOT {HOST_REBOOT_HALT = 0x8,HOST_REBOOT_UPSDELAY = 0x100,HOST_REBOOT_DEBUGGER = 0x1000,};
enum MACRO_I386_THREAD {I386_THREAD_STATE_MAX = 614,};
enum MACRO_IO_EXTERNAL {IO_EXTERNAL_METHOD_ARGUMENTS_CURRENT_VERSION = 2,};
enum MACRO_IO_THROTTLE {IO_THROTTLE_DISABLE = 0x3,IO_TIER_UPL_MISMATCH = 0x4,};
enum MACRO_IPC_VOUCHER {IPC_VOUCHER_NULL = 0,};
enum MACRO_KCDATA_TYPE {KCDATA_TYPE_INVALID = 0x0,KCDATA_TYPE_STRING_DESC = 0x1,KCDATA_TYPE_UINT32_DESC = 0x2,KCDATA_TYPE_UINT64_DESC = 0x3,KCDATA_TYPE_INT32_DESC = 0x4,KCDATA_TYPE_INT64_DESC = 0x5,KCDATA_TYPE_BINDATA_DESC = 0x6,KCDATA_TYPE_ARRAY = 0x11,KCDATA_TYPE_TYPEDEFINTION = 0x12,KCDATA_TYPE_CONTAINER_BEGIN = 0x13,KCDATA_TYPE_CONTAINER_END = 0x14,KCDATA_TYPE_ARRAY_PAD0 = 0x20,KCDATA_TYPE_ARRAY_PAD1 = 0x21,KCDATA_TYPE_ARRAY_PAD2 = 0x22,KCDATA_TYPE_ARRAY_PAD3 = 0x23,KCDATA_TYPE_ARRAY_PAD4 = 0x24,KCDATA_TYPE_ARRAY_PAD5 = 0x25,KCDATA_TYPE_ARRAY_PAD6 = 0x26,KCDATA_TYPE_ARRAY_PAD7 = 0x27,KCDATA_TYPE_ARRAY_PAD8 = 0x28,KCDATA_TYPE_ARRAY_PAD9 = 0x29,KCDATA_TYPE_ARRAY_PADa = 0x2A,KCDATA_TYPE_ARRAY_PADb = 0x2B,KCDATA_TYPE_ARRAY_PADc = 0x2C,KCDATA_TYPE_ARRAY_PADd = 0x2D,KCDATA_TYPE_ARRAY_PADe = 0x2E,KCDATA_TYPE_ARRAY_PADf = 0x2F,KCDATA_TYPE_LIBRARY_LOADINFO = 0x30,KCDATA_TYPE_LIBRARY_LOADINFO64 = 0x31,KCDATA_TYPE_TIMEBASE = 0x32,KCDATA_TYPE_MACH_ABSOLUTE_TIME = 0x33,KCDATA_TYPE_TIMEVAL = 0x34,KCDATA_TYPE_USECS_SINCE_EPOCH = 0x35,KCDATA_TYPE_PID = 0x36,KCDATA_TYPE_PROCNAME = 0x37,KCDATA_TYPE_NESTED_KCDATA = 0x38,KCDATA_TYPE_BUFFER_END = 0xF19158ED,KCDATA_BUFFER_BEGIN_CRASHINFO = 0xDEADF157,KCDATA_BUFFER_BEGIN_STACKSHOT = 0x59A25807,KCDATA_BUFFER_BEGIN_DELTA_STACKSHOT = 0xDE17A59A,KCDATA_BUFFER_BEGIN_OS_REASON = 0x53A20900,KCDATA_BUFFER_BEGIN_XNUPOST_CONFIG = 0x1E21C09F,};
enum MACRO_LEDGER_INFO {LEDGER_INFO = 0,LEDGER_ENTRY_INFO = 1,LEDGER_TEMPLATE_INFO = 2,LEDGER_LIMIT = 3,LEDGER_NAME_MAX = 32,};
enum MACRO_M16KCLSHIFT {M16KCLSHIFT = 14,};
enum MACRO_MACH_ASSERT {MACH_ASSERT = 1,};
enum MACRO_MACH_NOTIFY {MACH_NOTIFY_FIRST = 0x40,};
enum MACRO_MAXSYMLINKS {MAXSYMLINKS = 32,};
enum MACRO_MAX_DISPLAY {MAX_DISPLAY_STR = 128,MAX_PRINC_STR = 1024,};
enum MACRO_MBIGCLSHIFT {MBIGCLSHIFT = 12,};
enum MACRO_MINSIGSTKSZ {MINSIGSTKSZ = 32768,SIGSTKSZ = 131072,};
enum MACRO_MIN_ADDRESS {MACH_VM_MIN_ADDRESS = 0,VM_MIN_ADDRESS = 0,};
enum MACRO_MSG_NOERROR {MSG_NOERROR = 0x1000,};
enum MACRO_ND_REDIRECT {ND_REDIRECT_ONLINK = 0,ND_REDIRECT_ROUTER = 1,ND_RA_FLAG_MANAGED = 128,ND_RA_FLAG_OTHER = 64,ND_RA_FLAG_HA = 32,ND_RA_FLAG_RTPREF_MASK = 24,ND_RA_FLAG_RTPREF_HIGH = 8,ND_RA_FLAG_RTPREF_MEDIUM = 0,ND_RA_FLAG_RTPREF_LOW = 24,ND_RA_FLAG_RTPREF_RSV = 16,ND_NA_FLAG_ROUTER = 128,ND_NA_FLAG_SOLICITED = 64,ND_NA_FLAG_OVERRIDE = 32,ND_OPT_SOURCE_LINKADDR = 1,ND_OPT_TARGET_LINKADDR = 2,ND_OPT_PREFIX_INFORMATION = 3,ND_OPT_REDIRECTED_HEADER = 4,ND_OPT_MTU = 5,ND_OPT_NONCE = 14,ND_OPT_RDNSS = 25,ND_OPT_DNSSL = 31,ND_OPT_ROUTE_INFO = 200,ND_OPT_PI_FLAG_ONLINK = 128,ND_OPT_PI_FLAG_AUTO = 64,ND_OPT_NONCE_LEN = 6,};
enum MACRO_NX_NOWINDOW {NX_NOWINDOW = -1,NX_BYTYPE = 0,NX_BROADCAST = 1,NX_TOPWINDOW = 2,NX_FIRSTWINDOW = 3,NX_MOUSEWINDOW = 4,NX_NEXTWINDOW = 5,NX_LASTLEFT = 6,NX_LASTRIGHT = 7,NX_LASTKEY = 8,NX_EXPLICIT = 9,NX_TRANSMIT = 10,NX_BYPSCONTEXT = 11,NX_EVENT_EXTENSION_LOCATION_INVALID = 1,NX_EVENT_EXTENSION_LOCATION_TYPE_FLOAT = 2,NX_EVENT_EXTENSION_LOCATION_DEVICE_SCALED = 4,NX_EVENT_EXTENSION_MOUSE_DELTA_TYPE_FLOAT = 8,NX_EVENT_EXTENSION_AUDIT_TOKEN = 16,};
enum MACRO_OS_SPINLOCK {OS_SPINLOCK_INIT = 0,};
enum MACRO_O_DIRECTORY {O_DIRECTORY = 0x100000,O_SYMLINK = 0x200000,};
enum MACRO_POSIX_SPAWN {POSIX_SPAWN_RESETIDS = 0x1,POSIX_SPAWN_SETPGROUP = 0x2,POSIX_SPAWN_SETSIGDEF = 0x4,POSIX_SPAWN_SETSIGMASK = 0x8,POSIX_SPAWN_SETEXEC = 0x40,POSIX_SPAWN_START_SUSPENDED = 0x80,POSIX_SPAWN_CLOEXEC_DEFAULT = 0x4000,POSIX_SPAWN_PCONTROL_NONE = 0x0,POSIX_SPAWN_PCONTROL_THROTTLE = 0x1,POSIX_SPAWN_PCONTROL_SUSPEND = 0x2,POSIX_SPAWN_PCONTROL_KILL = 0x3,};
enum MACRO_PREALLOCATE {PREALLOCATE = 0x1,ALLOCATECONTIG = 0x2,ALLOCATEALL = 0x4,FREEREMAINDER = 0x8,ALLOCATEFROMPEOF = 0x10,ALLOCATEFROMVOL = 0x20,};
enum MACRO_PROC_RESUME {PROC_RESUME = 0x40,};
enum MACRO_RB_AUTOBOOT {RB_AUTOBOOT = 0,RB_ASKNAME = 1,RB_SINGLE = 2,RB_NOSYNC = 4,RB_HALT = 8,RB_INITNAME = 16,RB_DFLTROOT = 32,RB_ALTBOOT = 64,RB_UNIPROC = 128,RB_SAFEBOOT = 256,RB_UPSDELAY = 512,RB_QUICK = 1024,RB_PANIC = 2048,RB_PANIC_ZPRINT = 4096,};
enum MACRO_RTM_VERSION {RTM_VERSION = 5,RTM_ADD = 1,RTM_DELETE = 2,RTM_CHANGE = 3,RTM_GET = 4,RTM_LOSING = 5,RTM_REDIRECT = 6,RTM_MISS = 7,RTM_LOCK = 8,RTM_OLDADD = 9,RTM_OLDDEL = 10,RTM_RESOLVE = 11,RTM_NEWADDR = 12,RTM_DELADDR = 13,RTM_IFINFO = 14,RTM_NEWMADDR = 15,RTM_DELMADDR = 16,RTM_IFINFO2 = 18,RTM_NEWMADDR2 = 19,RTM_GET2 = 20,};
enum MACRO_SYSDIAGNOSE {SYSDIAGNOSE_NOTIFY_USER = 0x0,SYSDIAGNOSE_FULL = 0x1,SYSDIAGNOSE_STACKSHOT = 0x2,SYSDIAGNOSE_TAILSPIN = 0x3,};
enum MACRO_S_ATTR_SOME {S_ATTR_SOME_INSTRUCTIONS = 0x400,S_ATTR_EXT_RELOC = 0x200,S_ATTR_LOC_RELOC = 0x100,};
enum MACRO_TASK_KERNEL {TASK_KERNEL_PORT = 1,TASK_HOST_PORT = 2,TASK_NAME_PORT = 3,TASK_BOOTSTRAP_PORT = 4,TASK_SEATBELT_PORT = 7,TASK_ACCESS_PORT = 9,TASK_DEBUG_CONTROL_PORT = 10,TASK_RESOURCE_NOTIFY_PORT = 11,};
enum MACRO_TCP_NSTATES {TCP_NSTATES = 11,};
enum MACRO_THREAD_INFO {THREAD_INFO_MAX = 32,THREAD_BASIC_INFO = 3,THREAD_IDENTIFIER_INFO = 4,};
enum MACRO_THREAD_NULL {THREAD_NULL = 0,THREAD_INSPECT_NULL = 0,};
enum MACRO_VM_PRESSURE {VM_PRESSURE_TIME_WINDOW = 5,};
enum MACRO_VM_PROT_COW {VM_PROT_COW = 0x8,VM_PROT_ZF = 0x10,};
enum MACRO_VNODE_ASYNC {VNODE_ASYNC_THROTTLE = 15,VNODE_UPDATE_PARENT = 1,VNODE_UPDATE_NAME = 2,VNODE_UPDATE_CACHE = 4,VNODE_UPDATE_PURGE = 8,VNODE_LOOKUP_NOFOLLOW = 1,VNODE_LOOKUP_NOCROSSMOUNT = 2,VNODE_LOOKUP_CROSSMOUNTNOWAIT = 4,VNODE_RELOAD = 1,VNODE_WAIT = 2,VNODE_WRITEABLE = 4,VNODE_WITHID = 8,VNODE_NOLOCK_INTERNAL = 16,VNODE_NODEAD = 32,VNODE_NOSUSPEND = 64,VNODE_ITERATE_ALL = 128,VNODE_ITERATE_ACTIVE = 256,VNODE_ITERATE_INACTIVE = 512,VNODE_RETURNED = 0,VNODE_RETURNED_DONE = 1,VNODE_CLAIMED = 2,VNODE_CLAIMED_DONE = 3,};
enum MACRO___DARWIN_NO {__DARWIN_NO_LONG_LONG = 0,};
enum MACRO_kBDSpeedMax {kBDSpeedMax = 0xFFFF,};
enum MACRO_kBDSpeedMin {kBDSpeedMin = 0x1126,};
enum MACRO_kCDSpeedMax {kCDSpeedMax = 0xFFFF,};
enum MACRO_kCDSpeedMin {kCDSpeedMin = 0xB0,};
enum MACRO_sysdiagnose {sysdiagnose_notification_MSG_COUNT = 1,};
enum MACRO_task_access {task_access_MSG_COUNT = 2,telemetry_notification_MSG_COUNT = 1,upl_MSG_COUNT = 4,};
typedef _NXTabletPointData NXTabletPointData;
struct OSCollection_vtbl; 
struct OSDictionary_vtbl; 
typedef void *OSSerializerBlock;
struct OSSerializer_vtbl; 
struct OSSet_vtbl_layout; 
struct OpaqueIOCommandID;
struct SCSIBlockCommands;
enum SCSITaskAttribute {kSCSITask_SIMPLE = 0x0,kSCSITask_ORDERED = 0x1,kSCSITask_HEAD_OF_QUEUE = 0x2,kSCSITask_ACA = 0x3,};
enum SDPServiceClasses {kBluetoothSDPUUID16ServiceClassServiceDiscoveryServer = 0x1000,kBluetoothSDPUUID16ServiceClassBrowseGroupDescriptor = 0x1001,kBluetoothSDPUUID16ServiceClassPublicBrowseGroup = 0x1002,kBluetoothSDPUUID16ServiceClassSerialPort = 0x1101,kBluetoothSDPUUID16ServiceClassLANAccessUsingPPP = 0x1102,kBluetoothSDPUUID16ServiceClassDialupNetworking = 0x1103,kBluetoothSDPUUID16ServiceClassIrMCSync = 0x1104,kBluetoothSDPUUID16ServiceClassOBEXObjectPush = 0x1105,kBluetoothSDPUUID16ServiceClassOBEXFileTransfer = 0x1106,kBluetoothSDPUUID16ServiceClassIrMCSyncCommand = 0x1107,kBluetoothSDPUUID16ServiceClassHeadset = 0x1108,kBluetoothSDPUUID16ServiceClassCordlessTelephony = 0x1109,kBluetoothSDPUUID16ServiceClassAudioSource = 0x110A,kBluetoothSDPUUID16ServiceClassAudioSink = 0x110B,kBluetoothSDPUUID16ServiceClassAVRemoteControlTarget = 0x110C,kBluetoothSDPUUID16ServiceClassAdvancedAudioDistribution = 0x110D,kBluetoothSDPUUID16ServiceClassAVRemoteControl = 0x110E,kBluetoothSDPUUID16ServiceClassAVRemoteControlController = 0x110F,kBluetoothSDPUUID16ServiceClassIntercom = 0x1110,kBluetoothSDPUUID16ServiceClassFax = 0x1111,kBluetoothSDPUUID16ServiceClassHeadsetAudioGateway = 0x1112,kBluetoothSDPUUID16ServiceClassWAP = 0x1113,kBluetoothSDPUUID16ServiceClassWAPClient = 0x1114,kBluetoothSDPUUID16ServiceClassPANU = 0x1115,kBluetoothSDPUUID16ServiceClassNAP = 0x1116,kBluetoothSDPUUID16ServiceClassGN = 0x1117,kBluetoothSDPUUID16ServiceClassDirectPrinting = 0x1118,kBluetoothSDPUUID16ServiceClassReferencePrinting = 0x1119,kBluetoothSDPUUID16ServiceClassImaging = 0x111A,kBluetoothSDPUUID16ServiceClassImagingResponder = 0x111B,kBluetoothSDPUUID16ServiceClassImagingAutomaticArchive = 0x111C,kBluetoothSDPUUID16ServiceClassImagingReferencedObjects = 0x111D,kBluetoothSDPUUID16ServiceClassHandsFree = 0x111E,kBluetoothSDPUUID16ServiceClassHandsFreeAudioGateway = 0x111F,kBluetoothSDPUUID16ServiceClassDirectPrintingReferenceObjectsService = 0x1120,kBluetoothSDPUUID16ServiceClassReflectedUI = 0x1121,kBluetoothSDPUUID16ServiceClassBasicPrinting = 0x1122,kBluetoothSDPUUID16ServiceClassPrintingStatus = 0x1123,kBluetoothSDPUUID16ServiceClassHumanInterfaceDeviceService = 0x1124,kBluetoothSDPUUID16ServiceClassHardcopyCableReplacement = 0x1125,kBluetoothSDPUUID16ServiceClassHCR_Print = 0x1126,kBluetoothSDPUUID16ServiceClassHCR_Scan = 0x1127,kBluetoothSDPUUID16ServiceClassCommonISDNAccess = 0x1128,kBluetoothSDPUUID16ServiceClassVideoConferencingGW = 0x1129,kBluetoothSDPUUID16ServiceClassUDI_MT = 0x112A,kBluetoothSDPUUID16ServiceClassUDI_TA = 0x112B,kBluetoothSDPUUID16ServiceClassAudioVideo = 0x112C,kBluetoothSDPUUID16ServiceClassSIM_Access = 0x112D,kBluetoothSDPUUID16ServiceClassPhonebookAccess_PCE = 0x112E,kBluetoothSDPUUID16ServiceClassPhonebookAccess_PSE = 0x112F,kBluetoothSDPUUID16ServiceClassPhonebookAccess = 0x1130,kBluetoothSDPUUID16ServiceClassHeadset_HS = 0x1131,kBluetoothSDPUUID16ServiceClassMessageAccessServer = 0x1132,kBluetoothSDPUUID16ServiceClassMessageNotificationServer = 0x1133,kBluetoothSDPUUID16ServiceClassMessageAccessProfile = 0x1134,kBluetoothSDPUUID16ServiceClassGlobalNavigationSatelliteSystem = 0x1135,kBluetoothSDPUUID16ServiceClassGlobalNavigationSatelliteSystemServer = 0x1136,kBluetoothSDPUUID16ServiceClassPnPInformation = 0x1200,kBluetoothSDPUUID16ServiceClassGenericNetworking = 0x1201,kBluetoothSDPUUID16ServiceClassGenericFileTransfer = 0x1202,kBluetoothSDPUUID16ServiceClassGenericAudio = 0x1203,kBluetoothSDPUUID16ServiceClassGenericTelephony = 0x1204,kBluetoothSDPUUID16ServiceClassVideoSource = 0x1303,kBluetoothSDPUUID16ServiceClassVideoSink = 0x1304,kBluetoothSDPUUID16ServiceClassVideoDistribution = 0x1305,kBluetoothSDPUUID16ServiceClassHealthDevice = 0x1400,kBluetoothSDPUUID16ServiceClassHealthDeviceSource = 0x1401,kBluetoothSDPUUID16ServiceClassHealthDeviceSink = 0x1402,kBluetoothSDPUUID16ServiceClassGATT = 0x1801,};
typedef UserExportDCLJumpStruct UserExportDCLJump;
typedef VDGetGammaListRec *VDGetGammaListPtr;
typedef char *__builtin_va_list;
typedef int __darwin_intptr_t;
struct __lck_mtx_ext_t__;
typedef au_expire_after au_expire_after_t;
typedef auditpinfo_addr auditpinfo_addr_t;
struct boot_icon_element {unsigned int width;unsigned int height;int y_offset_from_center;unsigned int data_size;unsigned int __reserved1[4];};
typedef int (*ccgcm_inc_iv_fn_t)( ccmode_gcm *, ccgcm_ctx *, void *);
struct evsioMouseScaling {int numScaleLevels;short scaleThresholds[20];short scaleFactors[20];};
typedef ftrimactivefile ftrimactivefile_t;
typedef gpu_energy_data *gpu_energy_data_t;
typedef host_basic_info *host_basic_info_t;
typedef host_sched_info *host_sched_info_t;
struct i386_thread_state {unsigned int eax;unsigned int ebx;unsigned int ecx;unsigned int edx;unsigned int edi;unsigned int esi;unsigned int ebp;unsigned int esp;unsigned int ss;unsigned int eflags;unsigned int eip;unsigned int cs;unsigned int ds;unsigned int es;unsigned int fs;unsigned int gs;};
typedef _img4_custom_tag img4_custom_tag_t;
typedef kmod_info_32_v1 kmod_info_32_v1_t;
typedef kmod_info_64_v1 kmod_info_64_v1_t;
typedef ledger_template *ledger_template_t;
typedef void (*net_init_func_ptr)(void);
typedef policy_rr_limit *policy_rr_limit_t;
enum reloc_type_x86_64 {X86_64_RELOC_UNSIGNED = 0x0,X86_64_RELOC_SIGNED = 0x1,X86_64_RELOC_BRANCH = 0x2,X86_64_RELOC_GOT_LOAD = 0x3,X86_64_RELOC_GOT = 0x4,X86_64_RELOC_SUBTRACTOR = 0x5,X86_64_RELOC_SIGNED_1 = 0x6,X86_64_RELOC_SIGNED_2 = 0x7,X86_64_RELOC_SIGNED_4 = 0x8,X86_64_RELOC_TLV = 0x9,};
typedef task_basic_info *task_basic_info_t;
typedef task_flags_info *task_flags_info_t;
typedef task_power_info *task_power_info_t;
typedef task_qos_policy *task_qos_policy_t;
typedef stackshot_thread_waitinfo thread_waitinfo_t;
typedef user32_fchecklv user32_fchecklv_t;
typedef user_fcodeblobs user_fcodeblobs_t;
typedef vDSP_biquad_SetupStruct *vDSP_biquad_Setup;
typedef vm_statistics64 *vm_statistics64_t;
struct vnop_generic_args {vnodeop_desc *a_desc;};
typedef i386_avx_state x86_avx_state32_t;
typedef x86_avx_state64 x86_avx_state64_t;
struct x86_debug_state32 {unsigned int dr0;unsigned int dr1;unsigned int dr2;unsigned int dr3;unsigned int dr4;unsigned int dr5;unsigned int dr6;unsigned int dr7;};
typedef x86_debug_state x86_debug_state_t;
typedef x86_float_state x86_float_state_t;
struct AppleUSBHostPort;
typedef __CodeDirectory CS_CodeDirectory;
typedef void (*CursorRemoveProc)(IOFramebuffer *, void *, unsigned char *, unsigned int, int, int);
typedef DCLUpdateDCLListStruct DCLUpdateDCLList;
struct DSPDoubleComplex {double real;double imag;};
typedef HIDButtonCaps *HIDButtonCapsPtr;
enum IOAVCFrameFields {kAVCCommandResponse = 0x0,kAVCAddress = 0x1,kAVCOpcode = 0x2,kAVCOperand0 = 0x3,kAVCOperand1 = 0x4,kAVCOperand2 = 0x5,kAVCOperand3 = 0x6,kAVCOperand4 = 0x7,kAVCOperand5 = 0x8,kAVCOperand6 = 0x9,kAVCOperand7 = 0xA,kAVCOperand8 = 0xB,};
typedef _IOAudioSMPTETime IOAudioSMPTETime;
typedef _IOAudioTimeStamp IOAudioTimeStamp;
typedef IOBlitCopyRegionStruct IOBlitCopyRegion;
typedef IOBlitRectanglesStruct IOBlitRectangles;
struct IOCatalogue_vtbl; 
typedef _IODataQueueEntry IODataQueueEntry;
enum IOFWAVCPlugTypes {IOFWAVCPlugSubunitSourceType = 0x0,IOFWAVCPlugSubunitDestType = 0x1,IOFWAVCPlugIsochInputType = 0x2,IOFWAVCPlugIsochOutputType = 0x3,IOFWAVCPlugAsynchInputType = 0x4,IOFWAVCPlugAsynchOutputType = 0x5,IOFWAVCPlugExternalInputType = 0x6,IOFWAVCPlugExternalOutputType = 0x7,};
struct IOFWQEventSource;
enum IOFWSecurityMode {kIOFWSecurityModeNormal = 0x0,kIOFWSecurityModeSecure = 0x1,kIOFWSecurityModeSecurePermanent = 0x2,};
enum IOHIDButtonModes {kIOHIDButtonMode_BothLeftClicks = 0x0,kIOHIDButtonMode_ReverseLeftRightClicks = 0x1,kIOHIDButtonMode_EnableRightClick = 0x2,};
enum IOHIDElementType {kIOHIDElementTypeInput_Misc = 0x1,kIOHIDElementTypeInput_Button = 0x2,kIOHIDElementTypeInput_Axis = 0x3,kIOHIDElementTypeInput_ScanCodes = 0x4,kIOHIDElementTypeOutput = 0x81,kIOHIDElementTypeFeature = 0x101,kIOHIDElementTypeCollection = 0x201,};
struct IOHistReportInfo {int bucketWidth;};
typedef int IOInterruptState;
enum MACRO_APPLE_KEXT {APPLE_KEXT_VTABLE_PADDING = 1,APPLE_KEXT_LEGACY_ABI = 1,};
enum MACRO_ATM_ACTION {ATM_ACTION_DISCARD = 0x1,ATM_ACTION_COLLECT = 0x2,ATM_ACTION_LOGFAIL = 0x3,ATM_FIND_MIN_SUB_AID = 0x4,ATM_ACTION_UNREGISTER = 0x5,ATM_ACTION_REGISTER = 0x6,ATM_ACTION_GETSUBAID = 0x7,ATM_TRACE_DISABLE = 0x100,ATM_TRACE_OFF = 0x400,ATM_ENABLE_LEGACY_LOGGING = 0x20000000,};
enum MACRO_AUDIT_HARD {AUDIT_HARD_LIMIT_FREE_BLOCKS = 4,AUDIT_TRIGGER_MIN = 1,AUDIT_TRIGGER_LOW_SPACE = 1,AUDIT_TRIGGER_ROTATE_KERNEL = 2,AUDIT_TRIGGER_READ_FILE = 3,AUDIT_TRIGGER_CLOSE_AND_DIE = 4,AUDIT_TRIGGER_NO_SPACE = 5,AUDIT_TRIGGER_ROTATE_USER = 6,AUDIT_TRIGGER_INITIALIZE = 7,AUDIT_TRIGGER_EXPIRE_TRAILS = 8,AUDIT_TRIGGER_MAX = 8,};
enum MACRO_CCCHACHA20 {CCCHACHA20_KEY_NBYTES = 32,CCCHACHA20_BLOCK_NBYTES = 64,CCCHACHA20_NONCE_NBYTES = 12,};
enum MACRO_CC_USE_ASM {CC_USE_ASM = 1,};
enum MACRO_CLSIZELOG2 {CLSIZELOG2 = 0,MSIZESHIFT = 8,};
enum MACRO_CORECRYPTO {CORECRYPTO_SIMULATE_POSIX_ENVIRONMENT = 0,CORECRYPTO_SIMULATE_WINDOWS_ENVIRONMENT = 0,CORECRYPTO_HACK_FOR_WINDOWS_DEVELOPMENT = 0,CORECRYPTO_DEBUG = 0,CORECRYPTO_DEBUG_ENABLE_CC_REQUIRE_PRINTS = 0,};
enum MACRO_DBG_DAEMON {DBG_DAEMON_COREDUET = 0x1,DBG_DAEMON_POWERD = 0x2,DBG_UMALLOC_EXTERNAL = 0x1,DBG_UMALLOC_INTERNAL = 0x2,};
enum MACRO_EADDRINUSE {EADDRINUSE = 48,};
enum MACRO_ECONNRESET {ECONNRESET = 54,};
enum MACRO_EOPNOTSUPP {EOPNOTSUPP = 102,};
enum MACRO_EOWNERDEAD {EOWNERDEAD = 105,};
enum MACRO_EPROTOTYPE {EPROTOTYPE = 41,};
enum MACRO_ESHLIBVERS {ESHLIBVERS = 87,};
enum MACRO_EV_SPECIAL {EV_SPECIAL_KEY_MSG_ID = 1399547257,EV_AUDIO_MIN_VOLUME = 0,EV_AUDIO_MAX_VOLUME = 64,};
enum MACRO_FENCRYPTED {FENCRYPTED = 0x2000000,};
enum MACRO_GUARD_TYPE {GUARD_TYPE_VIRT_MEMORY = 0x5,};
enum MACRO_IFQ_TARGET {IFQ_TARGET_DELAY = 10000000,IFQ_UPDATE_INTERVAL = 100000000,};
enum MACRO_IOPhysSize {IOPhysSize = 32,};
enum MACRO_IO_DISPLAY {IO_DISPLAY_CAN_FILL = 0x40,IO_DISPLAY_CAN_BLIT = 0x20,IO_24BPP_TRANSFER_TABLE_SIZE = 0x100,IO_15BPP_TRANSFER_TABLE_SIZE = 0x100,IO_8BPP_TRANSFER_TABLE_SIZE = 0x100,IO_12BPP_TRANSFER_TABLE_SIZE = 0x100,IO_2BPP_TRANSFER_TABLE_SIZE = 0x100,};
enum MACRO_IPC_OBJECT {IPC_OBJECT_NULL = 0,IPC_OBJECT_DEAD = -1,};
enum MACRO_IP_DEFAULT {IP_DEFAULT_MULTICAST_TTL = 1,IP_DEFAULT_MULTICAST_LOOP = 1,IP_MIN_MEMBERSHIPS = 31,IP_MAX_MEMBERSHIPS = 4095,IP_MAX_GROUP_SRC_FILTER = 512,IP_MAX_SOCK_SRC_FILTER = 128,IP_MAX_SOCK_MUTE_FILTER = 128,};
enum MACRO_MACH_EPOCH {MACH_EPOCH_CHANGE = 0x0,};
enum MACRO_MACH_SCHED {MACH_SCHED = 0x0,MACH_STACK_ATTACH = 0x1,MACH_STACK_HANDOFF = 0x2,MACH_CALL_CONT = 0x3,MACH_CALLOUT = 0x4,MACH_STACK_DETACH = 0x5,MACH_MAKE_RUNNABLE = 0x6,MACH_PROMOTE = 0x7,MACH_DEMOTE = 0x8,MACH_IDLE = 0x9,MACH_STACK_DEPTH = 0xA,MACH_MOVED = 0xB,MACH_PSET_LOAD_AVERAGE = 0xC,MACH_AMP_DEBUG = 0xD,MACH_FAILSAFE = 0xE,MACH_BLOCK = 0xF,MACH_WAIT = 0x10,MACH_GET_URGENCY = 0x14,MACH_URGENCY = 0x15,MACH_REDISPATCH = 0x16,MACH_REMOTE_AST = 0x17,MACH_SCHED_CHOOSE_PROCESSOR = 0x18,MACH_DEEP_IDLE = 0x19,MACH_CPU_THROTTLE_DISABLE = 0x1B,MACH_RW_PROMOTE = 0x1C,MACH_RW_DEMOTE = 0x1D,MACH_SCHED_MAINTENANCE = 0x1F,MACH_DISPATCH = 0x20,MACH_QUANTUM_HANDOFF = 0x21,MACH_MULTIQ_DEQUEUE = 0x22,MACH_SCHED_THREAD_SWITCH = 0x23,MACH_SCHED_SMT_BALANCE = 0x24,MACH_REMOTE_DEFERRED_AST = 0x25,MACH_REMOTE_CANCEL_AST = 0x26,MACH_SCHED_CHANGE_PRIORITY = 0x27,MACH_SCHED_UPDATE_REC_CORES = 0x28,MACH_STACK_WAIT = 0x29,MACH_THREAD_BIND = 0x2A,MACH_WAITQ_PROMOTE = 0x2B,MACH_WAITQ_DEMOTE = 0x2C,MACH_SCHED_LOAD = 0x2D,MACH_REC_CORES_FAILSAFE = 0x2E,MACH_SCHED_QUANTUM_EXPIRED = 0x2F,MACH_EXEC_PROMOTE = 0x30,MACH_EXEC_DEMOTE = 0x31,MACH_AMP_SIGNAL_SPILL = 0x32,MACH_AMP_STEAL = 0x33,MACH_SCHED_LOAD_EFFECTIVE = 0x34,MACH_PROMOTED = 0x35,MACH_UNPROMOTED = 0x36,MACH_PROMOTED_UPDATE = 0x37,MACH_QUIESCENT_COUNTER = 0x38,MACH_MULTIQ_BOUND = 0x1,MACH_MULTIQ_GROUP = 0x2,MACH_MULTIQ_GLOBAL = 0x3,};
enum MACRO_MAP_FAILED {MAP_FAILED = -1,};
enum MACRO_MAP_SHARED {MAP_SHARED = 0x1,MAP_PRIVATE = 0x2,MAP_FIXED = 0x10,MAP_RENAME = 0x20,MAP_NORESERVE = 0x40,MAP_RESERVED0080 = 0x80,MAP_NOEXTEND = 0x100,MAP_HASSEMAPHORE = 0x200,MAP_NOCACHE = 0x400,MAP_JIT = 0x800,MAP_FILE = 0x0,MAP_ANON = 0x1000,MAP_RESILIENT_CODESIGN = 0x2000,MAP_RESILIENT_MEDIA = 0x4000,};
enum MACRO_MAXLOGNAME {MAXLOGNAME = 255,NOFILE = 256,};
enum MACRO_MAX_ZTRACE {MAX_ZTRACE_DEPTH = 15,};
enum MACRO_MFSNAMELEN {MFSNAMELEN = 15,MFSTYPENAMELEN = 16,};
enum MACRO_MLD_MTRACE {MLD_MTRACE_RESP = 200,MLD_MTRACE = 201,};
enum MACRO_MSG_LOCKED {MSG_LOCKED = 0x200,};
enum MACRO_NANOSECOND {NANOSECOND = 1000000000,};
enum MACRO_O_NONBLOCK {O_NONBLOCK = 0x4,O_APPEND = 0x8,O_SHLOCK = 0x10,O_EXLOCK = 0x20,O_ASYNC = 0x40,O_NOFOLLOW = 0x100,O_CREAT = 0x200,O_TRUNC = 0x400,O_EXCL = 0x800,};
enum MACRO_PSEMNAMLEN {PSEMNAMLEN = 31,};
enum MACRO_PSHMNAMLEN {PSHMNAMLEN = 31,};
enum MACRO_REFERENCED {REFERENCED_DYNAMICALLY = 0x10,};
enum MACRO_SERIALMODE {SERIALMODE_OUTPUT = 0x1,SERIALMODE_INPUT = 0x2,SERIALMODE_SYNCDRAIN = 0x4,};
enum MACRO_SKIPSYSTEM {SKIPSYSTEM = 0x1,FORCECLOSE = 0x2,WRITECLOSE = 0x4,SKIPSWAP = 0x8,SKIPROOT = 0x10,};
enum MACRO_SS_ONSTACK {SS_ONSTACK = 0x1,SS_DISABLE = 0x4,};
enum MACRO_TASK_DEBUG {TASK_DEBUG_INFO_INTERNAL = 29,TASK_SCHED_TIMESHARE_INFO = 10,TASK_SCHED_RR_INFO = 11,TASK_SCHED_FIFO_INFO = 12,TASK_SCHED_INFO = 14,TASK_CATEGORY_POLICY = 1,TASK_SUPPRESSION_POLICY = 3,TASK_POLICY_STATE = 4,TASK_BASE_QOS_POLICY = 8,TASK_OVERRIDE_QOS_POLICY = 9,TASK_BASE_LATENCY_QOS_POLICY = 10,TASK_BASE_THROUGHPUT_QOS_POLICY = 11,};
enum MACRO_TCPOLEN_CC {TCPOLEN_CC = 6,};
enum MACRO_TCP_MAXWIN {TCP_MAXWIN = 65535,};
enum MACRO_THREAD_NOT {THREAD_NOT_WAITING_ON_TURNSTILE = 0xB,};
enum MACRO_UNKNOWNGID {UNKNOWNGID = 99,};
enum MACRO_UNKNOWNUID {UNKNOWNUID = 99,};
enum MACRO_VFS_IOATTR {VFS_IOATTR_FLAGS_FUA = 0x1,VFS_IOATTR_FLAGS_UNMAP = 0x2,VFS_IOATTR_FLAGS_SWAPPIN_SUPPORTED = 0x10,VFS_TBLTHREADSAFE = 0x1,VFS_TBLFSNODELOCK = 0x2,VFS_TBLNOTYPENUM = 0x8,VFS_TBLLOCALVOL = 0x10,VFS_TBL64BITREADY = 0x20,VFS_TBLNATIVEXATTR = 0x40,VFS_TBLDIRLINKS = 0x80,VFS_TBLUNMOUNT_PREFLIGHT = 0x100,VFS_TBLGENERICMNTARGS = 0x200,VFS_TBLREADDIR_EXTENDED = 0x400,VFS_TBLNOMACLABEL = 0x1000,VFS_TBLVNOP_PAGEINV2 = 0x2000,VFS_TBLVNOP_PAGEOUTV2 = 0x4000,VFS_TBLVNOP_NOUPDATEID_RENAME = 0x8000,VFS_TBLVNOP_SECLUDE_RENAME = 0x10000,VFS_TBLCANMOUNTROOT = 0x20000,VFS_RETURNED = 0x0,VFS_RETURNED_DONE = 0x1,VFS_CLAIMED = 0x2,VFS_CLAIMED_DONE = 0x3,};
enum MACRO_VM_INHERIT {VM_INHERIT_SHARE = 0,VM_INHERIT_COPY = 1,VM_INHERIT_NONE = 2,VM_INHERIT_DONATE_COPY = 3,VM_PURGABLE_SET_STATE = 0,VM_PURGABLE_GET_STATE = 1,VM_PURGABLE_PURGE_ALL = 2,VM_PURGABLE_SET_STATE_FROM_KERNEL = 3,VM_PURGABLE_NO_AGING_SHIFT = 16,VM_PURGABLE_DEBUG_SHIFT = 12,VM_VOLATILE_GROUP_SHIFT = 8,VM_PURGABLE_BEHAVIOR_SHIFT = 6,VM_PURGABLE_ORDERING_SHIFT = 5,VM_VOLATILE_ORDER_SHIFT = 4,VM_PURGABLE_STATE_MIN = 0,VM_PURGABLE_STATE_MAX = 3,VM_PURGABLE_STATE_MASK = 3,VM_PURGABLE_NONVOLATILE = 0,VM_PURGABLE_VOLATILE = 1,VM_PURGABLE_EMPTY = 2,VM_PURGABLE_DENY = 3,VM_BEHAVIOR_DEFAULT = 0,VM_BEHAVIOR_RANDOM = 1,VM_BEHAVIOR_SEQUENTIAL = 2,VM_BEHAVIOR_RSEQNTL = 3,VM_BEHAVIOR_WILLNEED = 4,VM_BEHAVIOR_DONTNEED = 5,VM_BEHAVIOR_FREE = 6,VM_BEHAVIOR_ZERO_WIRED_PAGES = 7,VM_BEHAVIOR_REUSABLE = 8,VM_BEHAVIOR_REUSE = 9,VM_BEHAVIOR_CAN_REUSE = 10,VM_BEHAVIOR_PAGEOUT = 11,VM_REGION_INFO_MAX = 1024,VM_REGION_BASIC_INFO_64 = 9,VM_REGION_BASIC_INFO = 10,};
enum MACRO_VNODE_ATTR {VNODE_ATTR_va_rdev = 1,VNODE_ATTR_va_nlink = 2,VNODE_ATTR_va_total_size = 4,VNODE_ATTR_va_total_alloc = 8,VNODE_ATTR_va_data_size = 16,VNODE_ATTR_va_data_alloc = 32,VNODE_ATTR_va_iosize = 64,VNODE_ATTR_va_uid = 128,VNODE_ATTR_va_gid = 256,VNODE_ATTR_va_mode = 512,VNODE_ATTR_va_flags = 1024,VNODE_ATTR_va_acl = 2048,VNODE_ATTR_va_create_time = 4096,VNODE_ATTR_va_access_time = 8192,VNODE_ATTR_va_modify_time = 16384,VNODE_ATTR_va_change_time = 32768,VNODE_ATTR_va_backup_time = 65536,VNODE_ATTR_va_fileid = 131072,VNODE_ATTR_va_linkid = 262144,VNODE_ATTR_va_parentid = 524288,VNODE_ATTR_va_fsid = 1048576,VNODE_ATTR_va_filerev = 2097152,VNODE_ATTR_va_gen = 4194304,VNODE_ATTR_va_encoding = 8388608,VNODE_ATTR_va_type = 16777216,VNODE_ATTR_va_name = 33554432,VNODE_ATTR_va_uuuid = 67108864,VNODE_ATTR_va_guuid = 134217728,VNODE_ATTR_va_nchildren = 268435456,VNODE_ATTR_va_dirlinkcount = 536870912,VNODE_ATTR_va_addedtime = 1073741824,VNODE_ATTR_va_dataprotect_class = 2147483648,VNODE_ATTR_va_dataprotect_flags = 4294967296,VNODE_ATTR_va_document_id = 8589934592,VNODE_ATTR_va_devid = 17179869184,VNODE_ATTR_va_objtype = 34359738368,VNODE_ATTR_va_objtag = 68719476736,VNODE_ATTR_va_user_access = 137438953472,VNODE_ATTR_va_finderinfo = 274877906944,VNODE_ATTR_va_rsrc_length = 549755813888,VNODE_ATTR_va_rsrc_alloc = 1099511627776,VNODE_ATTR_va_fsid64 = 2199023255552,VNODE_ATTR_va_write_gencount = 4398046511104,VNODE_ATTR_va_private_size = 8796093022208,};
enum MACRO___WORDSIZE {__WORDSIZE = 32,};
enum MACRO_ccoid_sha1 {ccoid_sha1_len = 7,};
enum MACRO_kInvalidID {kInvalidID = 0,kIOAudioEngineNumCalls = 6,};
typedef char (*MasterMuteUpdate)(void);
typedef _NXEventExtension NXEventExtension;
struct OSMetaClass_vtbl; 
struct OSSerialize_vtbl; 
typedef void (*RTC_tick_handler)(IOService *);
typedef char RegCStrEntryName;
typedef void *RegPropertyValue;
enum TerminationState {kNotTerminated = 0x0,kNeedsTermination = 0x1,kTerminated = 0x2,};
struct _IORecursiveLock;
typedef unsigned int __darwin_clock_t;
typedef int __darwin_ssize_t;
typedef int __darwin_wchar_t;
struct __lck_grp_attr__;
typedef int atomic_ptrdiff_t;
typedef long long atomic_uintmax_t;
typedef int atomic_uintptr_t;
typedef au_evclass_map au_evclass_map_t;
typedef auditinfo_addr auditinfo_addr_t;
typedef ccdigest_state *ccdigest_state_t;
typedef ccrsa_full_ctx *ccrsa_full_ctx_t;
typedef ccrsa_priv_ctx *ccrsa_priv_ctx_t;
enum cpuid_register_t {eax = 0x0,ebx = 0x1,ecx = 0x2,edx = 0x3,};
typedef des_ecb_key_schedule des_key_schedule[1];
typedef unsigned int exception_mask_t;
typedef int exception_type_t;
typedef gpu_descriptor *gpu_descriptor_t;
enum gtrace_command_t {kGTraceCmdFetch = 0x46746368,};
typedef host_load_info *host_load_info_t;
typedef _img4_interface img4_interface_t;
typedef ipc_info_space ipc_info_space_t;
typedef kauth_acl_eval *kauth_acl_eval_t;
typedef kauth_listener *kauth_listener_t;
typedef section kernel_section_t;
typedef user32_dyld_uuid_info kernel_uuid_info;
typedef char kernel_version_t[512];
typedef kmod_reference kmod_reference_t;
typedef lockgroup_info lockgroup_info_t;
typedef mach_zone_info_data mach_zone_info_t;
typedef mach_zone_name mach_zone_name_t;
typedef policy_rr_base *policy_rr_base_t;
typedef policy_rr_info *policy_rr_info_t;
typedef unsigned int routine_arg_size;
typedef unsigned int routine_arg_type;
struct security_token_t {unsigned int val[2];};
typedef int (*sysctl_handler_t)(sysctl_oid *, void *, int, sysctl_req *);
enum tUSBHostPortType {kUSBHostPortTypeStandard = 0x0,kUSBHostPortTypeCaptive = 0x1,kUSBHostPortTypeInternal = 0x2,kUSBHostPortTypeAccessory = 0x3,kUSBHostPortTypeExpressCard = 0x4,kUSBHostPortTypeCount = 0x5,};
typedef task_dyld_info *task_dyld_info_t;
enum task_latency_qos {LATENCY_QOS_TIER_UNSPECIFIED = 0x0,LATENCY_QOS_TIER_0 = 0xFF0001,LATENCY_QOS_TIER_1 = 0xFF0002,LATENCY_QOS_TIER_2 = 0xFF0003,LATENCY_QOS_TIER_3 = 0xFF0004,LATENCY_QOS_TIER_4 = 0xFF0005,LATENCY_QOS_TIER_5 = 0xFF0006,};
typedef task_zone_info_data task_zone_info_t;
typedef thread *thread_inspect_t;
typedef char *user_subsystem_t;
typedef vm_info_object vm_info_object_t;
typedef vm_info_region vm_info_region_t;
typedef int *vm_region_info_t;
typedef int wait_interrupt_t;
enum BluetoothLEScan {BluetoothLEScanDisable = 0x0,BluetoothLEScanEnable = 0x1,};
typedef DCLPtrTimeStampStruct DCLPtrTimeStamp;
struct DSPSplitComplex {float *realp;float *imagp;};
typedef OpaqueDTEntryIterator *DTEntryIterator;
typedef DTSavedScope *DTSavedScopePtr;
typedef HFSExtentDescriptor HFSExtentRecord[3];
typedef HIDValueCaps *HIDValueCapsPtr;
typedef _IOBlitMemory *IOBlitMemoryRef;
typedef IOBlitOperationStruct IOBlitOperation;
typedef IOBlitRectangleStruct IOBlitRectangle;
typedef IOBlitScanlinesStruct IOBlitScanlines;
enum IOConfigKeyType {kConfigImmediateKeyType = 0x0,kConfigOffsetKeyType = 0x1,kConfigLeafKeyType = 0x2,kConfigDirectoryKeyType = 0x3,kInvalidConfigROMEntryType = 0xFF,};
struct IODisplayPMVars;
struct IOHIDDeviceShim;
struct IOHIDEventQueue;
enum IOHIDReportType {kIOHIDReportTypeInput = 0x0,kIOHIDReportTypeOutput = 0x1,kIOHIDReportTypeFeature = 0x2,kIOHIDReportTypeCount = 0x3,};
struct IONotifier_vtbl; 
typedef char IOPixelEncoding[64];
typedef struct _IORecursiveLock IORecursiveLock;
struct IORegistryPlane;
typedef IOUSBHIDData *IOUSBHIDDataPtr;
enum MACRO_AF_UNSPEC {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_ISO = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_ROUTE = 17,AF_LINK = 18,};
enum MACRO_ALTERNATE {ALTERNATE_LOAD_SITE = 0x1,};
enum MACRO_AUDITPIPE {AUDITPIPE_PRESELECT_MODE_TRAIL = 1,AUDITPIPE_PRESELECT_MODE_LOCAL = 2,};
enum MACRO_AUDIT_CNT {AUDIT_CNT = 0x1,AUDIT_AHLT = 0x2,AUDIT_ARGV = 0x4,AUDIT_ARGE = 0x8,AUDIT_SEQ = 0x10,AUDIT_WINDATA = 0x20,AUDIT_USER = 0x40,AUDIT_GROUP = 0x80,AUDIT_TRAIL = 0x100,AUDIT_PATH = 0x200,AUDIT_SCNT = 0x400,AUDIT_PUBLIC = 0x800,AUDIT_ZONENAME = 0x1000,AUDIT_PERZONE = 0x2000,};
enum MACRO_CCEC25519 {CCEC25519_CURVE25519DONNA_64BIT = 0,};
enum MACRO_CHARCLASS {CHARCLASS_NAME_MAX = 14,COLL_WEIGHTS_MAX = 2,EQUIV_CLASS_MAX = 2,EXPR_NEST_MAX = 32,LINE_MAX = 2048,RE_DUP_MAX = 255,};
enum MACRO_CLOCK_GET {CLOCK_GET_TIME_RES = 1,CLOCK_ALARM_CURRES = 3,CLOCK_ALARM_MINRES = 4,CLOCK_ALARM_MAXRES = 5,};
enum MACRO_CPUFAMILY {CPUFAMILY_UNKNOWN = 0,CPUFAMILY_POWERPC_G3 = -823913143,CPUFAMILY_POWERPC_G4 = 2009171118,CPUFAMILY_POWERPC_G5 = -310978390,CPUFAMILY_INTEL_6_13 = -1439483605,CPUFAMILY_INTEL_PENRYN = 2028621756,CPUFAMILY_INTEL_NEHALEM = 1801080018,CPUFAMILY_INTEL_WESTMERE = 1463508716,CPUFAMILY_INTEL_SANDYBRIDGE = 1418770316,CPUFAMILY_INTEL_IVYBRIDGE = 526772277,CPUFAMILY_INTEL_HASWELL = 280134364,CPUFAMILY_INTEL_BROADWELL = 1479463068,CPUFAMILY_INTEL_SKYLAKE = 939270559,CPUFAMILY_INTEL_KABYLAKE = 260141638,CPUFAMILY_ARM_9 = -416119890,CPUFAMILY_ARM_11 = -1879695144,CPUFAMILY_ARM_XSCALE = 1404044789,CPUFAMILY_ARM_12 = -1122301207,CPUFAMILY_ARM_13 = 214503012,CPUFAMILY_ARM_14 = -1777893647,CPUFAMILY_ARM_15 = -1471079478,CPUFAMILY_ARM_SWIFT = 506291073,CPUFAMILY_ARM_CYCLONE = 933271106,CPUFAMILY_ARM_TYPHOON = 747742334,CPUFAMILY_ARM_TWISTER = -1829029944,CPUFAMILY_ARM_HURRICANE = 1741614739,CPUFAMILY_ARM_MONSOON_MISTRAL = -400654602,};
enum MACRO_DBG_NETIP {DBG_NETIP = 1,DBG_NETARP = 2,DBG_NETUDP = 3,DBG_NETTCP = 4,DBG_NETICMP = 5,DBG_NETIGMP = 6,DBG_NETRIP = 7,DBG_NETOSPF = 8,DBG_NETISIS = 9,DBG_NETSNMP = 10,DBG_NETSOCK = 11,DBG_NETAARP = 100,DBG_NETDDP = 101,DBG_NETNBP = 102,DBG_NETZIP = 103,DBG_NETADSP = 104,DBG_NETATP = 105,DBG_NETASP = 106,DBG_NETAFP = 107,DBG_NETRTMP = 108,DBG_NETAURP = 109,DBG_NETIPSEC = 128,DBG_NETVMNET = 129,DBG_IOINTC = 0,DBG_IOWORKLOOP = 1,DBG_IOINTES = 2,DBG_IOCLKES = 3,DBG_IOCMDQ = 4,DBG_IOMCURS = 5,DBG_IOMDESC = 6,DBG_IOPOWER = 7,DBG_IOSERVICE = 8,DBG_IOREGISTRY = 9,DBG_IOSTORAGE = 32,DBG_IONETWORK = 33,DBG_IOKEYBOARD = 34,DBG_IOHID = 35,DBG_IOAUDIO = 36,DBG_IOSERIAL = 37,DBG_IOTTY = 38,DBG_IOSAM = 39,DBG_IOPARALLELATA = 40,DBG_IOPARALLELSCSI = 41,DBG_IOSATA = 42,DBG_IOSAS = 43,DBG_IOFIBRECHANNEL = 44,DBG_IOUSB = 45,DBG_IOBLUETOOTH = 46,DBG_IOFIREWIRE = 47,DBG_IOINFINIBAND = 48,DBG_IOCPUPM = 49,DBG_IOGRAPHICS = 50,DBG_HIBERNATE = 51,DBG_IOTHUNDERBOLT = 52,DBG_BOOTER = 53,DBG_DRVSTORAGE = 1,DBG_DRVNETWORK = 2,DBG_DRVKEYBOARD = 3,DBG_DRVHID = 4,DBG_DRVAUDIO = 5,DBG_DRVSERIAL = 7,DBG_DRVSAM = 8,DBG_DRVPARALLELATA = 9,DBG_DRVPARALLELSCSI = 10,DBG_DRVSATA = 11,DBG_DRVSAS = 12,DBG_DRVFIBRECHANNEL = 13,DBG_DRVUSB = 14,DBG_DRVBLUETOOTH = 15,DBG_DRVFIREWIRE = 16,DBG_DRVINFINIBAND = 17,DBG_DRVGRAPHICS = 18,DBG_DRVSD = 19,DBG_DRVNAND = 20,DBG_SSD = 21,DBG_DRVSPI = 22,DBG_DRVWLAN_802_11 = 23,DBG_DRVSSM = 24,DBG_DRVSMC = 25,DBG_DRVMACEFIMANAGER = 26,DBG_DRVANE = 27,DBG_DLIL_STATIC = 1,DBG_DLIL_PR_MOD = 2,DBG_DLIL_IF_MOD = 3,DBG_DLIL_PR_FLT = 4,DBG_DLIL_IF_FLT = 5,DBG_FSRW = 1,DBG_DKRW = 2,DBG_FSVN = 3,DBG_FSLOOOKUP = 4,DBG_JOURNAL = 5,DBG_IOCTL = 6,DBG_BOOTCACHE = 7,DBG_HFS = 8,DBG_APFS = 9,DBG_SMB = 10,DBG_MOUNT = 11,DBG_EXFAT = 14,DBG_MSDOS = 15,DBG_ACFS = 16,DBG_THROTTLE = 17,DBG_DECMP = 18,DBG_CONTENT_PROT = 207,DBG_HFS_UPDATE_ACCTIME = 1,DBG_HFS_UPDATE_MODTIME = 2,DBG_HFS_UPDATE_CHGTIME = 4,DBG_HFS_UPDATE_MODIFIED = 8,DBG_HFS_UPDATE_FORCE = 16,DBG_HFS_UPDATE_DATEADDED = 32,DBG_HFS_UPDATE_MINOR = 64,DBG_HFS_UPDATE_SKIPPED = 128,DBG_BSD_PROC = 1,DBG_BSD_MEMSTAT = 2,DBG_BSD_KEVENT = 3,DBG_BSD_EXCP_SC = 12,DBG_BSD_AIO = 13,DBG_BSD_SC_EXTENDED_INFO = 14,DBG_BSD_SC_EXTENDED_INFO2 = 15,DBG_BSD_KDEBUG_TEST = 255,};
enum MACRO_DBG_TRACE {DBG_TRACE_DATA = 0,DBG_TRACE_STRING = 1,DBG_TRACE_INFO = 2,DBG_CS_IO = 0,DBG_SEC_KERNEL = 0,DBG_SEC_SANDBOX = 1,DBG_MT_INSTRS_CYCLES = 1,DBG_MT_DEBUG = 2,DBG_MT_TMPTH = 254,DBG_MT_TMPCPU = 255,DBG_EVENT = 16,DBG_MISC_LAYOUT = 26,DBG_BUFFER = 32,DBG_DYLD_UUID = 5,DBG_DYLD_UUID_MAP_A = 0,DBG_DYLD_UUID_MAP_B = 1,DBG_DYLD_UUID_MAP_32_A = 2,DBG_DYLD_UUID_MAP_32_B = 3,DBG_DYLD_UUID_MAP_32_C = 4,DBG_DYLD_UUID_UNMAP_A = 5,DBG_DYLD_UUID_UNMAP_B = 6,DBG_DYLD_UUID_UNMAP_32_A = 7,DBG_DYLD_UUID_UNMAP_32_B = 8,DBG_DYLD_UUID_UNMAP_32_C = 9,DBG_DYLD_UUID_SHARED_CACHE_A = 10,DBG_DYLD_UUID_SHARED_CACHE_B = 11,DBG_DYLD_UUID_SHARED_CACHE_32_A = 12,DBG_DYLD_UUID_SHARED_CACHE_32_B = 13,DBG_DYLD_UUID_SHARED_CACHE_32_C = 14,};
enum MACRO_DPISTRLEN {DPISTRLEN = 32,};
enum MACRO_EBADMACHO {EBADMACHO = 88,};
enum MACRO_ECANCELED {ECANCELED = 89,};
enum MACRO_EMULTIHOP {EMULTIHOP = 95,};
enum MACRO_ENEEDAUTH {ENEEDAUTH = 81,};
enum MACRO_ENETRESET {ENETRESET = 52,};
enum MACRO_ENOPOLICY {ENOPOLICY = 103,};
enum MACRO_ENOTEMPTY {ENOTEMPTY = 66,};
enum MACRO_EOVERFLOW {EOVERFLOW = 84,};
enum MACRO_ESHUTDOWN {ESHUTDOWN = 58,};
enum MACRO_ETHERTYPE {ETHERTYPE_PUP = 0x200,ETHERTYPE_IP = 0x800,ETHERTYPE_ARP = 0x806,ETHERTYPE_REVARP = 0x8035,ETHERTYPE_VLAN = 0x8100,ETHERTYPE_IPV6 = 0x86DD,ETHERTYPE_PAE = 0x888E,ETHERTYPE_RSN_PREAUTH = 0x88C7,ETHERTYPE_PTP = 0x88F7,ETHERTYPE_LOOPBACK = 0x9000,ETHERTYPE_TRAIL = 0x1000,ETHERTYPE_NTRAILER = 0x10,};
enum MACRO_ETIMEDOUT {ETIMEDOUT = 60,};
enum MACRO_EXCEPTION {EXCEPTION_CODE_MAX = 2,};
enum MACRO_FNODIRECT {FNODIRECT = 0x800000,};
enum MACRO_FOOTPRINT {FOOTPRINT_INTERVAL_RESET = 0x1,};
enum MACRO_GPU_NCMDS {GPU_NCMDS_VALID = 0x1,GPU_NOUTSTANDING_VALID = 0x2,GPU_BUSY_VALID = 0x4,GPU_CYCLE_COUNT_VALID = 0x8,GPU_MISC_VALID = 0x10,};
enum MACRO_ICMP6_DST {ICMP6_DST_UNREACH = 1,ICMP6_PACKET_TOO_BIG = 2,ICMP6_TIME_EXCEEDED = 3,ICMP6_PARAM_PROB = 4,ICMP6_ECHO_REQUEST = 128,ICMP6_ECHO_REPLY = 129,};
enum MACRO_ICMPV6CTL {ICMPV6CTL_ND6_ONLINKNSRFC4861 = 50,};
enum MACRO_IFSTATMAX {IFSTATMAX = 800,};
enum MACRO_IF_MINMTU {IF_MINMTU = 72,IF_MAXMTU = 65535,};
enum MACRO_IOSERVICE {IOSERVICE_BUSY = 1,IOSERVICE_NONBUSY = 2,IOSERVICE_MODULESTALL = 3,IOSERVICE_MODULEUNSTALL = 4,IOSERVICE_TERMINATE_PHASE1 = 5,IOSERVICE_TERMINATE_REQUEST_OK = 6,IOSERVICE_TERMINATE_REQUEST_FAIL = 7,IOSERVICE_TERMINATE_SCHEDULE_STOP = 8,IOSERVICE_TERMINATE_SCHEDULE_FINALIZE = 9,IOSERVICE_TERMINATE_WILL = 10,IOSERVICE_TERMINATE_DID = 11,IOSERVICE_TERMINATE_DID_DEFER = 12,IOSERVICE_TERMINATE_FINALIZE = 13,IOSERVICE_TERMINATE_STOP = 14,IOSERVICE_TERMINATE_STOP_NOP = 15,IOSERVICE_TERMINATE_STOP_DEFER = 16,IOSERVICE_TERMINATE_DONE = 17,IOSERVICE_KEXTD_ALIVE = 18,IOSERVICE_KEXTD_READY = 19,IOSERVICE_REGISTRY_QUIET = 20,IOSERVICE_TERM_SET_INACTIVE = 21,IOSERVICE_TERM_SCHED_PHASE2 = 22,IOSERVICE_TERM_START_PHASE2 = 23,IOSERVICE_TERM_TRY_PHASE2 = 24,IOSERVICE_TERM_UC_DEFER = 25,IOSERVICE_DETACH = 26,};
enum MACRO_IO_MEDIUM {IO_MEDIUM_ROTATING = 0x0,IO_MEDIUM_SOLID_STATE = 0x1,IO_PRIORITY_LOW = 0x100,IO_PRIORITY_PREDICTIVE = 0x10000,};
enum MACRO_IO_OBJECT {IO_OBJECT_NULL = 0,};
enum MACRO_IPC_CREAT {IPC_CREAT = 0x200,IPC_EXCL = 0x400,IPC_NOWAIT = 0x800,IPC_PRIVATE = 0x0,IPC_RMID = 0x0,IPC_SET = 0x1,IPC_STAT = 0x2,IPC_R = 0x100,IPC_W = 0x80,IPC_M = 0x1000,};
enum MACRO_IPFRAGTTL {IPFRAGTTL = 30,};
enum MACRO_IPVERSION {IPVERSION = 4,};
enum MACRO_KAUTH_UID {KAUTH_UID_NONE = -101,KAUTH_GID_NONE = -101,KAUTH_NTSID_MAX_AUTHORITIES = 16,KAUTH_NTSID_HDRSIZE = 8,KAUTH_EXTLOOKUP_SUCCESS = 0,KAUTH_EXTLOOKUP_BADRQ = 1,KAUTH_EXTLOOKUP_FAILURE = 2,KAUTH_EXTLOOKUP_FATAL = 3,KAUTH_EXTLOOKUP_INPROG = 100,KAUTH_EXTLOOKUP_VALID_UID = 1,KAUTH_EXTLOOKUP_VALID_UGUID = 2,KAUTH_EXTLOOKUP_VALID_USID = 4,KAUTH_EXTLOOKUP_VALID_GID = 8,KAUTH_EXTLOOKUP_VALID_GGUID = 16,KAUTH_EXTLOOKUP_VALID_GSID = 32,KAUTH_EXTLOOKUP_WANT_UID = 64,KAUTH_EXTLOOKUP_WANT_UGUID = 128,KAUTH_EXTLOOKUP_WANT_USID = 256,KAUTH_EXTLOOKUP_WANT_GID = 512,KAUTH_EXTLOOKUP_WANT_GGUID = 1024,KAUTH_EXTLOOKUP_WANT_GSID = 2048,KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = 4096,KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = 8192,KAUTH_EXTLOOKUP_ISMEMBER = 16384,KAUTH_EXTLOOKUP_VALID_PWNAM = 32768,KAUTH_EXTLOOKUP_WANT_PWNAM = 65536,KAUTH_EXTLOOKUP_VALID_GRNAM = 131072,KAUTH_EXTLOOKUP_WANT_GRNAM = 262144,KAUTH_EXTLOOKUP_VALID_SUPGRPS = 524288,KAUTH_EXTLOOKUP_WANT_SUPGRPS = 1048576,KAUTH_EXTLOOKUP_REGISTER = 0,KAUTH_EXTLOOKUP_RESULT = 1,KAUTH_EXTLOOKUP_WORKER = 2,KAUTH_EXTLOOKUP_DEREGISTER = 4,KAUTH_GET_CACHE_SIZES = 8,KAUTH_SET_CACHE_SIZES = 16,KAUTH_CLEAR_CACHES = 32,KAUTH_ACE_KINDMASK = 15,KAUTH_ACE_PERMIT = 1,KAUTH_ACE_DENY = 2,KAUTH_ACE_AUDIT = 3,KAUTH_ACE_ALARM = 4,KAUTH_ACE_INHERITED = 16,KAUTH_ACE_FILE_INHERIT = 32,KAUTH_ACE_DIRECTORY_INHERIT = 64,KAUTH_ACE_LIMIT_INHERIT = 128,KAUTH_ACE_ONLY_INHERIT = 256,KAUTH_ACE_SUCCESS = 512,KAUTH_ACE_FAILURE = 1024,KAUTH_ACE_GENERIC_ALL = 2097152,KAUTH_ACE_GENERIC_EXECUTE = 4194304,KAUTH_ACE_GENERIC_WRITE = 8388608,KAUTH_ACE_GENERIC_READ = 16777216,KAUTH_ACL_MAX_ENTRIES = 128,KAUTH_ACL_FLAGS_PRIVATE = 65535,KAUTH_ACL_DEFER_INHERIT = 65536,KAUTH_ACL_NO_INHERIT = 131072,KAUTH_FILESEC_NOACL = 4294967295,KAUTH_FILESEC_MAGIC = 19710317,KAUTH_FILESEC_NONE = 0,KAUTH_FILESEC_WANTED = 1,KAUTH_ENDIAN_HOST = 1,KAUTH_ENDIAN_DISK = 2,KAUTH_RESULT_ALLOW = 1,KAUTH_RESULT_DENY = 2,KAUTH_RESULT_DEFER = 3,KAUTH_AEVAL_IS_OWNER = 1,KAUTH_AEVAL_IN_GROUP = 2,KAUTH_AEVAL_IN_GROUP_UNKNOWN = 4,KAUTH_GENERIC_ISSUSER = 1,KAUTH_PROCESS_CANSIGNAL = 1,KAUTH_PROCESS_CANTRACE = 2,KAUTH_FILEOP_OPEN = 1,KAUTH_FILEOP_CLOSE = 2,KAUTH_FILEOP_RENAME = 3,KAUTH_FILEOP_EXCHANGE = 4,KAUTH_FILEOP_LINK = 5,KAUTH_FILEOP_EXEC = 6,KAUTH_FILEOP_DELETE = 7,KAUTH_FILEOP_WILL_RENAME = 8,KAUTH_FILEOP_CLOSE_MODIFIED = 2,KAUTH_VNODE_READ_DATA = 2,KAUTH_VNODE_WRITE_DATA = 4,KAUTH_VNODE_EXECUTE = 8,KAUTH_VNODE_DELETE = 16,KAUTH_VNODE_APPEND_DATA = 32,KAUTH_VNODE_DELETE_CHILD = 64,KAUTH_VNODE_READ_ATTRIBUTES = 128,KAUTH_VNODE_WRITE_ATTRIBUTES = 256,KAUTH_VNODE_READ_EXTATTRIBUTES = 512,KAUTH_VNODE_WRITE_EXTATTRIBUTES = 1024,KAUTH_VNODE_READ_SECURITY = 2048,KAUTH_VNODE_WRITE_SECURITY = 4096,KAUTH_VNODE_TAKE_OWNERSHIP = 8192,KAUTH_VNODE_SYNCHRONIZE = 1048576,KAUTH_VNODE_LINKTARGET = 33554432,KAUTH_VNODE_CHECKIMMUTABLE = 67108864,KAUTH_VNODE_ACCESS = 2147483648,KAUTH_VNODE_NOIMMUTABLE = 1073741824,KAUTH_VNODE_SEARCHBYANYONE = 536870912,KAUTH_INVALIDATE_CACHED_RIGHTS = -1,};
enum MACRO_KDBG_FLAG {KDBG_FLAG_FILTERED = 0x1,KDBG_FLAG_NOPROCFILT = 0x2,};
enum MACRO_KERN_CODE {KERN_CODE_SELECTOR = 0x8,KERN_DATA_SELECTOR = 0x10,};
enum MACRO_LOCKGROUP {LOCKGROUP_MAX_NAME = 64,LOCKGROUP_ATTR_STAT = 1,};
enum MACRO_MACH_CORE {MACH_CORE_FILEHEADER_SIGNATURE = 0x63614D20646152,MACH_CORE_FILEHEADER_MAXFILES = 0x10,MACH_CORE_FILEHEADER_NAMELEN = 0x10,};
enum MACRO_MACH_TASK {MACH_TASK_SUSPEND = 0x0,MACH_TASK_RESUME = 0x1,MACH_THREAD_SET_VOUCHER = 0x2,MACH_IPC_MSG_SEND = 0x3,MACH_IPC_MSG_RECV = 0x4,MACH_IPC_MSG_RECV_VOUCHER_REFUSED = 0x5,MACH_IPC_KMSG_FREE = 0x6,MACH_IPC_VOUCHER_CREATE = 0x7,MACH_IPC_VOUCHER_CREATE_ATTR_DATA = 0x8,MACH_IPC_VOUCHER_DESTROY = 0x9,MACH_IPC_KMSG_INFO = 0xA,MACH_IPC_KMSG_LINK = 0xB,MACH_IPC_PORT_ENTRY_MODIFY = 0xC,MACH_THREAD_GROUP_NEW = 0x0,MACH_THREAD_GROUP_FREE = 0x1,MACH_THREAD_GROUP_SET = 0x2,MACH_THREAD_GROUP_NAME = 0x3,MACH_THREAD_GROUP_NAME_FREE = 0x4,MACH_THREAD_GROUP_FLAGS = 0x5,MACH_COALITION_NEW = 0x0,MACH_COALITION_FREE = 0x1,MACH_COALITION_ADOPT = 0x2,MACH_COALITION_REMOVE = 0x3,MACH_COALITION_THREAD_GROUP_SET = 0x4,};
enum MACRO_MAXPHYSIO {MAXPHYSIO_WIRED = 16777216,};
enum MACRO_MAX_AUDIT {MAX_AUDIT_RECORDS = 20,};
enum MACRO_MAX_CANON {MAX_CANON = 1024,MAX_INPUT = 1024,};
enum MACRO_MINBUCKET {MINBUCKET = 4,FSHIFT = 11,};
enum MACRO_MIN_AUDIT {MIN_AUDIT_FILE_SIZE = 524288,};
enum MACRO_MSG_COUNT {exc_MSG_COUNT = 3,host_priv_MSG_COUNT = 26,};
enum MACRO_NDRVPROTO {NDRVPROTO_NDRV = 0,};
enum MACRO_NVMAXTEXT {NVMAXTEXT = 55,};
enum MACRO_OSVERSIZE {OSVERSIZE = 256,};
enum MACRO_OS_OBJECT {OS_OBJECT_HAVE_OBJC_SUPPORT = 0,OS_OBJECT_USE_OBJC_RETAIN_RELEASE = 0,};
enum MACRO_OS_REFCNT {OS_REFCNT_DEBUG = 0,OS_REFCNT_HAS_GROUP = 1,};
enum MACRO_O_CLOEXEC {O_CLOEXEC = 0x1000000,};
enum MACRO_O_CLOFORK {O_CLOFORK = 0x8000000,};
enum MACRO_O_EVTONLY {O_EVTONLY = 0x8000,};
enum MACRO_PROCESSOR {PROCESSOR_INFO_MAX = 1024,PROCESSOR_SET_INFO_MAX = 1024,PROCESSOR_BASIC_INFO = 1,PROCESSOR_CPU_LOAD_INFO = 2,PROCESSOR_PM_REGS_INFO = 268435457,PROCESSOR_TEMPERATURE = 268435458,};
enum MACRO_REFERENCE {REFERENCE_TYPE = 0x7,REFERENCE_FLAG_UNDEFINED_NON_LAZY = 0x0,REFERENCE_FLAG_UNDEFINED_LAZY = 0x1,REFERENCE_FLAG_DEFINED = 0x2,REFERENCE_FLAG_PRIVATE_DEFINED = 0x3,REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY = 0x4,REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY = 0x5,};
enum MACRO_REVOKEALL {REVOKEALL = 0x1,};
enum MACRO_SEEK_HOLE {SEEK_HOLE = 3,SEEK_DATA = 4,};
enum MACRO_SFI_CLASS {SFI_CLASS_DEFINITIONS = 20140526,SFI_CLASS_DARWIN_BG = 1,SFI_CLASS_APP_NAP = 2,SFI_CLASS_MANAGED_FOCAL = 3,SFI_CLASS_MANAGED_NONFOCAL = 4,SFI_CLASS_DEFAULT_FOCAL = 5,SFI_CLASS_DEFAULT_NONFOCAL = 6,SFI_CLASS_KERNEL = 7,SFI_CLASS_OPTED_OUT = 8,SFI_CLASS_UTILITY = 9,SFI_CLASS_LEGACY_FOCAL = 10,SFI_CLASS_LEGACY_NONFOCAL = 11,SFI_CLASS_USER_INITIATED_FOCAL = 12,SFI_CLASS_USER_INITIATED_NONFOCAL = 13,SFI_CLASS_USER_INTERACTIVE_FOCAL = 14,SFI_CLASS_USER_INTERACTIVE_NONFOCAL = 15,SFI_CLASS_MAINTENANCE = 16,};
enum MACRO_SIGNATURE {BLOCK0_SIGNATURE = 0x4552,DPME_SIGNATURE = 0x504D,};
enum MACRO_SIGVTALRM {SIGVTALRM = 26,};
enum MACRO_SOL_LOCAL {SOL_LOCAL = 0,};
enum MACRO_SOMAXCONN {SOMAXCONN = 128,};
enum MACRO_SO_NETSVC {SO_NETSVC_MARKING_LEVEL = 0x1119,};
enum MACRO_STACKSHOT {STACKSHOT_IO_NUM_PRIORITIES = 4,STACKSHOT_MAX_THREAD_NAME_SIZE = 64,STACKSHOT_KCTYPE_IOSTATS = 2305,STACKSHOT_KCTYPE_GLOBAL_MEM_STATS = 2306,STACKSHOT_KCCONTAINER_TASK = 2307,STACKSHOT_KCCONTAINER_THREAD = 2308,STACKSHOT_KCTYPE_TASK_SNAPSHOT = 2309,STACKSHOT_KCTYPE_THREAD_SNAPSHOT = 2310,STACKSHOT_KCTYPE_DONATING_PIDS = 2311,STACKSHOT_KCTYPE_SHAREDCACHE_LOADINFO = 2312,STACKSHOT_KCTYPE_THREAD_NAME = 2313,STACKSHOT_KCTYPE_KERN_STACKFRAME = 2314,STACKSHOT_KCTYPE_KERN_STACKFRAME64 = 2315,STACKSHOT_KCTYPE_USER_STACKFRAME = 2316,STACKSHOT_KCTYPE_USER_STACKFRAME64 = 2317,STACKSHOT_KCTYPE_BOOTARGS = 2318,STACKSHOT_KCTYPE_OSVERSION = 2319,STACKSHOT_KCTYPE_KERN_PAGE_SIZE = 2320,STACKSHOT_KCTYPE_JETSAM_LEVEL = 2321,STACKSHOT_KCTYPE_DELTA_SINCE_TIMESTAMP = 2322,STACKSHOT_KCTYPE_KERN_STACKLR = 2323,STACKSHOT_KCTYPE_KERN_STACKLR64 = 2324,STACKSHOT_KCTYPE_USER_STACKLR = 2325,STACKSHOT_KCTYPE_USER_STACKLR64 = 2326,STACKSHOT_KCTYPE_NONRUNNABLE_TIDS = 2327,STACKSHOT_KCTYPE_NONRUNNABLE_TASKS = 2328,STACKSHOT_KCTYPE_CPU_TIMES = 2329,STACKSHOT_KCTYPE_STACKSHOT_DURATION = 2330,STACKSHOT_KCTYPE_STACKSHOT_FAULT_STATS = 2331,STACKSHOT_KCTYPE_KERNELCACHE_LOADINFO = 2332,STACKSHOT_KCTYPE_THREAD_WAITINFO = 2333,STACKSHOT_KCTYPE_THREAD_GROUP_SNAPSHOT = 2334,STACKSHOT_KCTYPE_THREAD_GROUP = 2335,STACKSHOT_KCTYPE_JETSAM_COALITION_SNAPSHOT = 2336,STACKSHOT_KCTYPE_JETSAM_COALITION = 2337,STACKSHOT_KCTYPE_THREAD_POLICY_VERSION = 2338,STACKSHOT_KCTYPE_INSTRS_CYCLES = 2339,STACKSHOT_KCTYPE_USER_STACKTOP = 2340,STACKSHOT_KCTYPE_ASID = 2341,STACKSHOT_KCTYPE_PAGE_TABLES = 2342,STACKSHOT_KCTYPE_SYS_SHAREDCACHE_LAYOUT = 2343,STACKSHOT_KCTYPE_TASK_DELTA_SNAPSHOT = 2368,STACKSHOT_KCTYPE_THREAD_DELTA_SNAPSHOT = 2369,};
enum MACRO_SUPERPAGE {SUPERPAGE_NONE = 0,SUPERPAGE_SIZE_ANY = 1,};
enum MACRO_SWAP_FILE {SWAP_FILE_CREATION_ERROR = 0x80,};
enum MACRO_S_BLKSIZE {S_BLKSIZE = 512,};
enum MACRO_TASK_INFO {TASK_INFO_MAX = 1024,TASK_BASIC_INFO_32 = 4,TASK_BASIC2_INFO_32 = 6,TASK_BASIC_INFO_64 = 5,TASK_EVENTS_INFO = 2,TASK_THREAD_TIMES_INFO = 3,TASK_ABSOLUTETIME_INFO = 1,TASK_KERNELMEMORY_INFO = 7,TASK_SECURITY_TOKEN = 13,TASK_AUDIT_TOKEN = 15,TASK_AFFINITY_TAG_INFO = 16,TASK_DYLD_INFO = 17,TASK_DYLD_ALL_IMAGE_INFO_32 = 0,TASK_DYLD_ALL_IMAGE_INFO_64 = 1,TASK_EXTMOD_INFO = 19,};
enum MACRO_TASK_NULL {TASK_NULL = 0,TASK_NAME_NULL = 0,TASK_INSPECT_NULL = 0,};
enum MACRO_TASK_PORT {TASK_PORT_REGISTER_MAX = 3,};
enum MACRO_TCPOPT_CC {TCPOPT_CC = 11,TCPOPT_CCNEW = 12,TCPOPT_CCECHO = 13,};
enum MACRO_TELEMETRY {TELEMETRY_CMD_TIMER_EVENT = 1,TELEMETRY_CMD_VOUCHER_NAME = 2,TELEMETRY_CMD_PMI_SETUP = 3,};
enum MACRO_TIMESTAMP {TCPOPT_TIMESTAMP = 8,TCPOLEN_TIMESTAMP = 10,};
enum MACRO_TURNSTILE {TURNSTILE_HEAP_OPERATIONS = 0x10,TURNSTILE_PRIORITY_OPERATIONS = 0x20,TURNSTILE_FREELIST_OPERATIONS = 0x30,};
enum MACRO_USER_CODE {USER_CODE_SELECTOR = 0x17,USER_DATA_SELECTOR = 0x1F,};
enum MACRO_VM_MEMORY {VM_MEMORY_MALLOC = 1,VM_MEMORY_MALLOC_SMALL = 2,VM_MEMORY_MALLOC_LARGE = 3,VM_MEMORY_MALLOC_HUGE = 4,VM_MEMORY_SBRK = 5,VM_MEMORY_REALLOC = 6,VM_MEMORY_MALLOC_TINY = 7,VM_MEMORY_MALLOC_LARGE_REUSABLE = 8,VM_MEMORY_MALLOC_LARGE_REUSED = 9,VM_MEMORY_ANALYSIS_TOOL = 10,VM_MEMORY_MALLOC_NANO = 11,VM_MEMORY_MACH_MSG = 20,VM_MEMORY_IOKIT = 21,VM_MEMORY_STACK = 30,VM_MEMORY_GUARD = 31,VM_MEMORY_SHARED_PMAP = 32,VM_MEMORY_DYLIB = 33,VM_MEMORY_OBJC_DISPATCHERS = 34,VM_MEMORY_UNSHARED_PMAP = 35,VM_MEMORY_APPKIT = 40,VM_MEMORY_FOUNDATION = 41,VM_MEMORY_COREGRAPHICS = 42,VM_MEMORY_CORESERVICES = 43,VM_MEMORY_JAVA = 44,VM_MEMORY_COREDATA = 45,VM_MEMORY_COREDATA_OBJECTIDS = 46,VM_MEMORY_ATS = 50,VM_MEMORY_LAYERKIT = 51,VM_MEMORY_CGIMAGE = 52,VM_MEMORY_TCMALLOC = 53,VM_MEMORY_COREGRAPHICS_DATA = 54,VM_MEMORY_COREGRAPHICS_SHARED = 55,VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS = 56,VM_MEMORY_COREGRAPHICS_BACKINGSTORES = 57,VM_MEMORY_COREGRAPHICS_XALLOC = 58,VM_MEMORY_DYLD = 60,VM_MEMORY_DYLD_MALLOC = 61,VM_MEMORY_SQLITE = 62,VM_MEMORY_JAVASCRIPT_CORE = 63,VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR = 64,VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE = 65,VM_MEMORY_GLSL = 66,VM_MEMORY_OPENCL = 67,VM_MEMORY_COREIMAGE = 68,VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS = 69,VM_MEMORY_IMAGEIO = 70,VM_MEMORY_COREPROFILE = 71,VM_MEMORY_ASSETSD = 72,VM_MEMORY_OS_ALLOC_ONCE = 73,VM_MEMORY_LIBDISPATCH = 74,VM_MEMORY_ACCELERATE = 75,VM_MEMORY_COREUI = 76,VM_MEMORY_COREUIFILE = 77,VM_MEMORY_GENEALOGY = 78,VM_MEMORY_RAWCAMERA = 79,VM_MEMORY_CORPSEINFO = 80,VM_MEMORY_ASL = 81,VM_MEMORY_SWIFT_RUNTIME = 82,VM_MEMORY_SWIFT_METADATA = 83,VM_MEMORY_DHMM = 84,VM_MEMORY_SCENEKIT = 86,VM_MEMORY_SKYWALK = 87,VM_MEMORY_IOSURFACE = 88,VM_MEMORY_LIBNETWORK = 89,VM_MEMORY_AUDIO = 90,VM_MEMORY_VIDEOBITSTREAM = 91,VM_MEMORY_CM_XPC = 92,VM_MEMORY_CM_RPC = 93,VM_MEMORY_CM_MEMORYPOOL = 94,VM_MEMORY_CM_READCACHE = 95,VM_MEMORY_CM_CRABS = 96,VM_MEMORY_QUICKLOOK_THUMBNAILS = 97,VM_MEMORY_ACCOUNTS = 98,VM_MEMORY_APPLICATION_SPECIFIC_1 = 240,VM_MEMORY_APPLICATION_SPECIFIC_16 = 255,};
enum MACRO_VM_OBJECT {VM_OBJECT_TRACKING = 0,};
enum MACRO_VM_REGION {VM_REGION_EXTENDED_INFO = 13,VM_REGION_TOP_INFO = 12,VM_MAP_ENTRY_MAX = 256,VM_PAGE_INFO_BASIC = 1,};
enum MACRO_VNG_INTEL {CCSHA1_VNG_INTEL = 1,CCSHA2_VNG_INTEL = 1,};
enum MACRO_WAT_ALERT {HI_WAT_ALERT = 0x1,LO_WAT_ALERT = 0x2,};
enum MACRO__WSTOPPED {_WSTOPPED = 0x7F,};
enum MACRO___WATCHOS {__WATCHOS_1_0 = 10000,__WATCHOS_2_0 = 20000,__WATCHOS_3_0 = 30000,__WATCHOS_3_1 = 30100,__WATCHOS_3_1_1 = 30101,__WATCHOS_3_2 = 30200,};
enum MACRO_pseudo_AF {pseudo_AF_RTIP = 22,};
typedef unsigned long long NXSwappedDouble;
struct OSIterator_vtbl; 
struct OSMetaClassBase {OSMetaClassBase_vtbl *__vftable ;};
struct OpaqueFFTSetupD;
typedef void *PhysicalAddress;
typedef char RegCStrPathName;
typedef OSIterator *RegPropertyIter;
typedef char RegPropertyName;
struct ScrollAccelInfo;
typedef VDPowerStateRec *VDPowerStatePtr;
typedef VDScalerInfoRec *VDScalerInfoPtr;
typedef VDSwitchInfoRec *VDSwitchInfoPtr;
typedef VDTimingInfoRec *VDTimingInfoPtr;
struct __OSMallocTag__;
typedef unsigned int __darwin_size_t;
typedef int __darwin_time_t;
typedef unsigned char __darwin_uuid_t[16];
typedef int __darwin_wint_t;
typedef short atomic_char16_t;
typedef int atomic_char32_t;
typedef long long atomic_intmax_t;
typedef int atomic_intptr_t;
typedef attribute_set attribute_set_t;
typedef attrreference attrreference_t;
typedef ccrsa_pub_ctx *ccrsa_pub_ctx_t;
enum coalition_flags {kCoalitionTermRequested = 0x1,kCoalitionTerminated = 0x2,kCoalitionReaped = 0x4,kCoalitionPrivileged = 0x8,};
struct dylib_reference {unsigned int isym : 24;unsigned int flags : 8;};
struct evsioKeymapping {int size;char *mapping;};
typedef host *host_security_t;
typedef ipc_info_name ipc_info_name_t;
typedef void (*ipf_detach_func)(void *);
enum kUSBConnectable {kUSBPortNotConnectable = 0x0,kUSBPortConnectable = 0x1,};
typedef kauth_filesec *kauth_filesec_t;
struct ledger_template;
typedef unsigned int mach_msg_bits_t;
typedef mach_port_qos mach_port_qos_t;
typedef mach_timespec mach_timespec_t;
typedef mb_class_stat mb_class_stat_t;
typedef mig_subsystem *mig_subsystem_t;
struct opaque_ipfilter;
typedef processor_set *processor_set_t;
typedef rpc_subsystem *rpc_subsystem_t;
struct sysctl_oid_list {sysctl_oid *slh_first;};
struct timebase_freq_t {unsigned int timebase_num;unsigned int timebase_den;};
typedef upl_page_info upl_page_info_t;
typedef user_fchecklv user_fchecklv_t;
typedef vm_read_entry vm_read_entry_t[256];
typedef vm_statistics *vm_statistics_t;
typedef x86_avx_state x86_avx_state_t;
typedef x86_state_hdr x86_state_hdr_t;
typedef zone_btrecord zone_btrecord_t;
enum BTreeKeyLimits {kMaxKeyLength = 0x208,};
typedef __SC_GenericBlob CS_GenericBlob;
typedef void (*CursorBlitProc)(IOFramebuffer *, void *, unsigned char *, unsigned int, unsigned int, unsigned int, int, int);
typedef DSPDoubleComplex DOUBLE_COMPLEX;
typedef char DTEntryNameBuf[64];
typedef OpaqueDTEntry DeviceTreeNode;
enum IOAVCUnitTypes {kAVCVideoMonitor = 0x0,kAVCAudio = 0x1,kAVCPrinter = 0x2,kAVCDiskRecorder = 0x3,kAVCTapeRecorder = 0x4,kAVCTuner = 0x5,kAVCVideoCamera = 0x7,kAVCCameraStorage = 0xB,kAVCVendorUnique = 0x1C,kAVCNumSubUnitTypes = 0x20,};
typedef IOBlitVerticesStruct IOBlitVertices;
struct IOCommand_vtbl; 
struct IOFBController;
enum IOFWWriteFlags {kIOFWWriteFlagsNone = 0x0,kIOFWWriteFlagsDeferredNotify = 0x1,kIOFWWriteFastRetryOnBusy = 0x2,kIOFWWriteBlockRequest = 0x4,};
struct IOFireWireLink;
typedef __IOFixedPoint32 IOFixedPoint32;
struct IOFixedPoint64;
struct IONetworkStack;
typedef _58DDB36EAAB179E2C121504DB177F0DE IOOutputAction;
typedef unsigned int IOPMPowerFlags;
struct IOUSBInterface;
typedef kxld_dependency KXLDDependency;
typedef void *LogicalAddress;
enum MACRO_AF_INET6 {AF_INET6 = 30,AF_NATM = 31,AF_SYSTEM = 32,AF_NETBIOS = 33,AF_PPP = 34,};
enum MACRO_ALRMTYPE {ALRMTYPE = 0xFF,};
enum MACRO_APPLE_IF {APPLE_IF_FAM_LOOPBACK = 1,APPLE_IF_FAM_ETHERNET = 2,APPLE_IF_FAM_SLIP = 3,APPLE_IF_FAM_TUN = 4,APPLE_IF_FAM_VLAN = 5,APPLE_IF_FAM_PPP = 6,APPLE_IF_FAM_PVC = 7,APPLE_IF_FAM_DISC = 8,APPLE_IF_FAM_MDECAP = 9,APPLE_IF_FAM_GIF = 10,APPLE_IF_FAM_FAITH = 11,APPLE_IF_FAM_STF = 12,APPLE_IF_FAM_FIREWIRE = 13,APPLE_IF_FAM_BOND = 14,};
enum MACRO_ATTR_CMN {ATTR_CMN_NAME = 0x1,ATTR_CMN_DEVID = 0x2,ATTR_CMN_FSID = 0x4,ATTR_CMN_OBJTYPE = 0x8,ATTR_CMN_OBJTAG = 0x10,ATTR_CMN_OBJID = 0x20,ATTR_CMN_OBJPERMANENTID = 0x40,ATTR_CMN_PAROBJID = 0x80,ATTR_CMN_SCRIPT = 0x100,ATTR_CMN_CRTIME = 0x200,ATTR_CMN_MODTIME = 0x400,ATTR_CMN_CHGTIME = 0x800,ATTR_CMN_ACCTIME = 0x1000,ATTR_CMN_BKUPTIME = 0x2000,ATTR_CMN_FNDRINFO = 0x4000,ATTR_CMN_OWNERID = 0x8000,ATTR_CMN_GRPID = 0x10000,ATTR_CMN_ACCESSMASK = 0x20000,ATTR_CMN_FLAGS = 0x40000,ATTR_CMN_GEN_COUNT = 0x80000,ATTR_CMN_DOCUMENT_ID = 0x100000,ATTR_CMN_USERACCESS = 0x200000,ATTR_CMN_EXTENDED_SECURITY = 0x400000,ATTR_CMN_UUID = 0x800000,ATTR_CMN_GRPUUID = 0x1000000,ATTR_CMN_FILEID = 0x2000000,ATTR_CMN_PARENTID = 0x4000000,ATTR_CMN_FULLPATH = 0x8000000,ATTR_CMN_ADDEDTIME = 0x10000000,ATTR_CMN_ERROR = 0x20000000,ATTR_CMN_DATA_PROTECT_FLAGS = 0x40000000,ATTR_CMN_RETURNED_ATTRS = 0x80000000,ATTR_CMN_VALIDMASK = 0xFFFFFFFF,ATTR_CMN_SETMASK = 0x51C7FF00,ATTR_CMN_VOLSETMASK = 0x6700,ATTR_VOL_FSTYPE = 0x1,ATTR_VOL_SIGNATURE = 0x2,ATTR_VOL_SIZE = 0x4,ATTR_VOL_SPACEFREE = 0x8,ATTR_VOL_SPACEAVAIL = 0x10,ATTR_VOL_MINALLOCATION = 0x20,ATTR_VOL_ALLOCATIONCLUMP = 0x40,ATTR_VOL_IOBLOCKSIZE = 0x80,ATTR_VOL_OBJCOUNT = 0x100,ATTR_VOL_FILECOUNT = 0x200,ATTR_VOL_DIRCOUNT = 0x400,ATTR_VOL_MAXOBJCOUNT = 0x800,ATTR_VOL_MOUNTPOINT = 0x1000,ATTR_VOL_NAME = 0x2000,ATTR_VOL_MOUNTFLAGS = 0x4000,ATTR_VOL_MOUNTEDDEVICE = 0x8000,ATTR_VOL_ENCODINGSUSED = 0x10000,ATTR_VOL_CAPABILITIES = 0x20000,ATTR_VOL_UUID = 0x40000,ATTR_VOL_QUOTA_SIZE = 0x10000000,ATTR_VOL_RESERVED_SIZE = 0x20000000,ATTR_VOL_ATTRIBUTES = 0x40000000,ATTR_VOL_INFO = 0x80000000,ATTR_VOL_VALIDMASK = 0xF007FFFF,ATTR_VOL_SETMASK = 0x80002000,ATTR_DIR_LINKCOUNT = 0x1,ATTR_DIR_ENTRYCOUNT = 0x2,ATTR_DIR_MOUNTSTATUS = 0x4,ATTR_DIR_ALLOCSIZE = 0x8,ATTR_DIR_IOBLOCKSIZE = 0x10,ATTR_DIR_DATALENGTH = 0x20,};
enum MACRO_ATTR_DIR {ATTR_DIR_VALIDMASK = 0x3F,ATTR_DIR_SETMASK = 0x0,ATTR_FILE_LINKCOUNT = 0x1,ATTR_FILE_TOTALSIZE = 0x2,ATTR_FILE_ALLOCSIZE = 0x4,ATTR_FILE_IOBLOCKSIZE = 0x8,ATTR_FILE_DEVTYPE = 0x20,ATTR_FILE_FORKCOUNT = 0x80,ATTR_FILE_FORKLIST = 0x100,ATTR_FILE_DATALENGTH = 0x200,ATTR_FILE_DATAALLOCSIZE = 0x400,ATTR_FILE_RSRCLENGTH = 0x1000,ATTR_FILE_RSRCALLOCSIZE = 0x2000,ATTR_FILE_VALIDMASK = 0x37FF,ATTR_FILE_SETMASK = 0x20,ATTR_CMNEXT_RELPATH = 0x4,ATTR_CMNEXT_PRIVATESIZE = 0x8,ATTR_CMNEXT_LINKID = 0x10,ATTR_CMNEXT_VALIDMASK = 0x1C,ATTR_CMNEXT_SETMASK = 0x0,ATTR_FORK_TOTALSIZE = 0x1,ATTR_FORK_ALLOCSIZE = 0x2,ATTR_FORK_RESERVED = 0xFFFFFFFF,ATTR_FORK_VALIDMASK = 0x3,ATTR_FORK_SETMASK = 0x0,ATTR_CMN_NAMEDATTRCOUNT = 0x80000,ATTR_CMN_NAMEDATTRLIST = 0x100000,ATTR_FILE_CLUMPSIZE = 0x10,ATTR_FILE_FILETYPE = 0x40,ATTR_FILE_DATAEXTENTS = 0x800,ATTR_FILE_RSRCEXTENTS = 0x4000,};
enum MACRO_ATTR_MAX {ATTR_MAX_BUFFER = 8192,};
enum MACRO_AT_FDCWD {AT_FDCWD = -2,AT_EACCESS = 16,AT_SYMLINK_NOFOLLOW = 32,AT_SYMLINK_FOLLOW = 64,AT_REMOVEDIR = 128,};
enum MACRO_CCN_LOG2 {CCN_LOG2_BITS_PER_UNIT = 5,CCN_UNIT_MASK = 4294967295,};
enum MACRO_CCSHA224 {CCSHA224_OUTPUT_SIZE = 28,CCSHA512_BLOCK_SIZE = 128,CCSHA512_OUTPUT_SIZE = 64,CCSHA512_STATE_SIZE = 64,CCSHA384_OUTPUT_SIZE = 48,};
enum MACRO_CCSHA256 {CCSHA256_ARMV6M_ASM = 0,};
enum MACRO_CHAR_MIN {CHAR_MIN = -128,};
enum MACRO_CONS_OPS {SERIAL_CONS_OPS = 0,VC_CONS_OPS = 1,};
enum MACRO_CS_TRUST {CS_TRUST_CACHE_AMFID = 0x1,};
enum MACRO_DBG_ZERO {DBG_ZERO_FILL_FAULT = 1,DBG_PAGEIN_FAULT = 2,DBG_COW_FAULT = 3,DBG_CACHE_HIT_FAULT = 4,DBG_NZF_PAGE_FAULT = 5,DBG_GUARD_FAULT = 6,DBG_PAGEINV_FAULT = 7,DBG_PAGEIND_FAULT = 8,DBG_COMPRESSOR_FAULT = 9,DBG_COMPRESSOR_SWAPIN_FAULT = 10,};
enum MACRO_EALREADY {EALREADY = 37,};
enum MACRO_EBADARCH {EBADARCH = 86,};
enum MACRO_EBADEXEC {EBADEXEC = 85,};
enum MACRO_EMBEDDED {EMBEDDED_PANIC_HEADER_FLAG_COREDUMP_COMPLETE = 0x1,EMBEDDED_PANIC_HEADER_FLAG_STACKSHOT_SUCCEEDED = 0x2,EMBEDDED_PANIC_HEADER_FLAG_STACKSHOT_FAILED_DEBUGGERSYNC = 0x4,EMBEDDED_PANIC_HEADER_FLAG_STACKSHOT_FAILED_ERROR = 0x8,EMBEDDED_PANIC_HEADER_FLAG_STACKSHOT_FAILED_INCOMPLETE = 0x10,EMBEDDED_PANIC_HEADER_FLAG_STACKSHOT_FAILED_NESTED = 0x20,EMBEDDED_PANIC_HEADER_FLAG_NESTED_PANIC = 0x40,EMBEDDED_PANIC_HEADER_FLAG_BUTTON_RESET_PANIC = 0x80,EMBEDDED_PANIC_HEADER_FLAG_COPROC_INITIATED_PANIC = 0x100,EMBEDDED_PANIC_HEADER_FLAG_COREDUMP_FAILED = 0x200,EMBEDDED_PANIC_HEADER_CURRENT_VERSION = 0x2,EMBEDDED_PANIC_MAGIC = 0x46554E4B,};
enum MACRO_EMSGSIZE {EMSGSIZE = 40,};
enum MACRO_ENETDOWN {ENETDOWN = 50,};
enum MACRO_ENOTCONN {ENOTCONN = 57,};
enum MACRO_ENOTSOCK {ENOTSOCK = 38,};
enum MACRO_EPROCLIM {EPROCLIM = 67,};
enum MACRO_ERESTART {ERESTART = -1,};
enum MACRO_EXC_I386 {EXC_I386_INVOP = 1,EXC_I386_DIV = 1,EXC_I386_INTO = 2,EXC_I386_NOEXT = 3,EXC_I386_EXTOVR = 4,EXC_I386_EXTERR = 5,EXC_I386_EMERR = 6,EXC_I386_BOUND = 7,EXC_I386_SSEEXTERR = 8,EXC_I386_SGL = 1,EXC_I386_BPT = 2,EXC_I386_DIVERR = 0,EXC_I386_SGLSTP = 1,EXC_I386_NMIFLT = 2,EXC_I386_BPTFLT = 3,EXC_I386_INTOFLT = 4,EXC_I386_BOUNDFLT = 5,EXC_I386_INVOPFLT = 6,EXC_I386_NOEXTFLT = 7,EXC_I386_DBLFLT = 8,EXC_I386_EXTOVRFLT = 9,EXC_I386_INVTSSFLT = 10,EXC_I386_SEGNPFLT = 11,EXC_I386_STKFLT = 12,EXC_I386_GPFLT = 13,EXC_I386_PGFLT = 14,EXC_I386_EXTERRFLT = 16,EXC_I386_ALIGNFLT = 17,EXC_I386_ENDPERR = 33,EXC_I386_ENOEXTFLT = 32,EXC_MASK_MACHINE = 0,EXC_BAD_ACCESS = 1,EXC_BAD_INSTRUCTION = 2,EXC_ARITHMETIC = 3,EXC_EMULATION = 4,EXC_SOFTWARE = 5,EXC_BREAKPOINT = 6,EXC_SYSCALL = 7,EXC_MACH_SYSCALL = 8,EXC_RPC_ALERT = 9,EXC_CRASH = 10,EXC_RESOURCE = 11,EXC_GUARD = 12,EXC_CORPSE_NOTIFY = 13,EXC_CORPSE_VARIANT_BIT = 256,};
enum MACRO_EXC_SOFT {EXC_SOFT_SIGNAL = 0x10003,EXC_MACF_MIN = 0x20000,EXC_MACF_MAX = 0x2FFFF,};
enum MACRO_FNOCACHE {FNOCACHE = 0x40000,FNORDAHEAD = 0x80000,};
enum MACRO_HFSFSMNT {HFSFSMNT_NOXONFILES = 0x1,HFSFSMNT_WRAPPER = 0x2,HFSFSMNT_EXTENDED_ARGS = 0x4,};
enum MACRO_ICMP6_RR {ICMP6_RR_FLAGS_TEST = 0x80,ICMP6_RR_FLAGS_REQRESULT = 0x40,ICMP6_RR_FLAGS_FORCEAPPLY = 0x20,ICMP6_RR_FLAGS_SPECSITE = 0x10,ICMP6_RR_FLAGS_PREVDONE = 0x8,};
enum MACRO_IFNAMSIZ {IFNAMSIZ = 16,};
enum MACRO_INDIRECT {INDIRECT_SYMBOL_LOCAL = 0x80000000,INDIRECT_SYMBOL_ABS = 0x40000000,};
enum MACRO_IPDEFTTL {IPDEFTTL = 64,};
enum MACRO_IPTTLDEC {IPTTLDEC = 1,};
enum MACRO_IPV6PORT {IPV6PORT_RESERVED = 1024,IPV6PORT_ANONMIN = 49152,IPV6PORT_ANONMAX = 65535,IPV6PORT_RESERVEDMIN = 600,};
enum MACRO_KEV_INET {KEV_INET_SUBCLASS = 1,KEV_INET_NEW_ADDR = 1,KEV_INET_CHANGED_ADDR = 2,KEV_INET_ADDR_DELETED = 3,KEV_INET_SIFDSTADDR = 4,KEV_INET_SIFBRDADDR = 5,KEV_INET_SIFNETMASK = 6,KEV_INET_ARPCOLLISION = 7,KEV_INET_PORTINUSE = 8,KEV_INET_ARPRTRFAILURE = 9,KEV_INET_ARPRTRALIVE = 10,KEV_DL_SUBCLASS = 2,KEV_DL_SIFFLAGS = 1,KEV_DL_SIFMETRICS = 2,KEV_DL_SIFMTU = 3,KEV_DL_SIFPHYS = 4,KEV_DL_SIFMEDIA = 5,KEV_DL_SIFGENERIC = 6,KEV_DL_ADDMULTI = 7,KEV_DL_DELMULTI = 8,KEV_DL_IF_ATTACHED = 9,KEV_DL_IF_DETACHING = 10,KEV_DL_IF_DETACHED = 11,KEV_DL_LINK_OFF = 12,KEV_DL_LINK_ON = 13,KEV_DL_PROTO_ATTACHED = 14,KEV_DL_PROTO_DETACHED = 15,KEV_DL_LINK_ADDRESS_CHANGED = 16,KEV_DL_WAKEFLAGS_CHANGED = 17,KEV_DL_IF_IDLE_ROUTE_REFCNT = 18,KEV_DL_IFCAP_CHANGED = 19,KEV_DL_LINK_QUALITY_METRIC_CHANGED = 20,KEV_DL_NODE_PRESENCE = 21,KEV_DL_NODE_ABSENCE = 22,KEV_DL_MASTER_ELECTED = 23,KEV_DL_ISSUES = 24,KEV_DL_IFDELEGATE_CHANGED = 25,KEV_DL_AWDL_RESTRICTED = 26,KEV_DL_AWDL_UNRESTRICTED = 27,KEV_DL_RRC_STATE_CHANGED = 28,KEV_DL_QOS_MODE_CHANGED = 29,KEV_DL_LOW_POWER_MODE_CHANGED = 30,KEV_INET6_SUBCLASS = 6,KEV_INET6_NEW_USER_ADDR = 1,KEV_INET6_CHANGED_ADDR = 2,KEV_INET6_ADDR_DELETED = 3,KEV_INET6_NEW_LL_ADDR = 4,KEV_INET6_NEW_RTADV_ADDR = 5,KEV_INET6_DEFROUTER = 6,KEV_INET6_REQUEST_NAT64_PREFIX = 7,};
enum MACRO_LOCKLEAF {LOCKLEAF = 0x4,LOCKPARENT = 0x8,WANTPARENT = 0x10,};
enum MACRO_MACH_MSG {MACH_MSG_TIMEOUT_NONE = 0,MACH_MSGH_BITS_ZERO = 0,MACH_MSGH_BITS_REMOTE_MASK = 31,MACH_MSGH_BITS_LOCAL_MASK = 7936,MACH_MSGH_BITS_VOUCHER_MASK = 2031616,MACH_MSGH_BITS_COMPLEX = -2147483648,MACH_MSGH_BITS_USER = -2145444065,MACH_MSGH_BITS_RAISEIMP = 536870912,MACH_MSGH_BITS_IMPHOLDASRT = 268435456,MACH_MSGH_BITS_CIRCULAR = 268435456,MACH_MSGH_BITS_USED = -1340137697,MACH_MSG_SIZE_NULL = 0,MACH_MSG_PRIORITY_UNSPECIFIED = 0,MACH_MSG_TYPE_MOVE_RECEIVE = 16,MACH_MSG_TYPE_MOVE_SEND = 17,MACH_MSG_TYPE_MOVE_SEND_ONCE = 18,MACH_MSG_TYPE_COPY_SEND = 19,MACH_MSG_TYPE_MAKE_SEND = 20,MACH_MSG_TYPE_MAKE_SEND_ONCE = 21,MACH_MSG_TYPE_COPY_RECEIVE = 22,MACH_MSG_TYPE_DISPOSE_RECEIVE = 24,MACH_MSG_TYPE_DISPOSE_SEND = 25,MACH_MSG_TYPE_DISPOSE_SEND_ONCE = 26,MACH_MSG_PHYSICAL_COPY = 0,MACH_MSG_VIRTUAL_COPY = 1,MACH_MSG_ALLOCATE = 2,MACH_MSG_OVERWRITE = 3,MACH_MSG_PORT_DESCRIPTOR = 0,MACH_MSG_OOL_DESCRIPTOR = 1,MACH_MSG_OOL_PORTS_DESCRIPTOR = 2,MACH_MSG_OOL_VOLATILE_DESCRIPTOR = 3,MACH_MSG_BODY_NULL = 0,MACH_MSG_DESCRIPTOR_NULL = 0,MACH_MSG_NULL = 0,MACH_MSG_TRAILER_FORMAT_0 = 0,MACH_MSG_SIZE_MAX = 4294967295,MACH_MSG_SIZE_RELIABLE = 262144,MACH_MSGH_KIND_NORMAL = 0,MACH_MSGH_KIND_NOTIFICATION = 1,MACH_MSG_TYPE_PORT_NONE = 0,MACH_MSG_TYPE_PORT_NAME = 15,MACH_MSG_TYPE_LAST = 22,MACH_MSG_TYPE_POLYMORPHIC = 4294967295,MACH_MSG_OPTION_NONE = 0,MACH_SEND_MSG = 1,MACH_RCV_MSG = 2,MACH_RCV_LARGE = 4,MACH_RCV_LARGE_IDENTITY = 8,MACH_SEND_TIMEOUT = 16,MACH_SEND_OVERRIDE = 32,MACH_SEND_INTERRUPT = 64,MACH_SEND_NOTIFY = 128,MACH_SEND_ALWAYS = 65536,MACH_SEND_TRAILER = 131072,MACH_SEND_NOIMPORTANCE = 262144,MACH_SEND_IMPORTANCE = 524288,MACH_SEND_SYNC_OVERRIDE = 1048576,MACH_SEND_PROPAGATE_QOS = 2097152,MACH_SEND_KERNEL = 4194304,MACH_RCV_TIMEOUT = 256,MACH_RCV_NOTIFY = 512,MACH_RCV_INTERRUPT = 1024,MACH_RCV_VOUCHER = 2048,MACH_RCV_OVERWRITE = 4096,MACH_RCV_SYNC_WAIT = 16384,MACH_RCV_TRAILER_NULL = 0,MACH_RCV_TRAILER_SEQNO = 1,MACH_RCV_TRAILER_SENDER = 2,MACH_RCV_TRAILER_AUDIT = 3,MACH_RCV_TRAILER_CTX = 4,MACH_RCV_TRAILER_AV = 7,MACH_RCV_TRAILER_LABELS = 8,MACH_RCV_TRAILER_MASK = 251658240,MACH_MSG_SUCCESS = 0,MACH_MSG_MASK = 15872,MACH_MSG_IPC_SPACE = 8192,MACH_MSG_VM_SPACE = 4096,MACH_MSG_IPC_KERNEL = 2048,MACH_MSG_VM_KERNEL = 1024,MACH_SEND_IN_PROGRESS = 268435457,MACH_SEND_INVALID_DATA = 268435458,MACH_SEND_INVALID_DEST = 268435459,MACH_SEND_TIMED_OUT = 268435460,MACH_SEND_INVALID_VOUCHER = 268435461,MACH_SEND_INTERRUPTED = 268435463,MACH_SEND_MSG_TOO_SMALL = 268435464,MACH_SEND_INVALID_REPLY = 268435465,MACH_SEND_INVALID_RIGHT = 268435466,MACH_SEND_INVALID_NOTIFY = 268435467,MACH_SEND_INVALID_MEMORY = 268435468,MACH_SEND_NO_BUFFER = 268435469,MACH_SEND_TOO_LARGE = 268435470,MACH_SEND_INVALID_TYPE = 268435471,MACH_SEND_INVALID_HEADER = 268435472,MACH_SEND_INVALID_TRAILER = 268435473,MACH_SEND_INVALID_RT_OOL_SIZE = 268435477,MACH_RCV_IN_PROGRESS = 268451841,MACH_RCV_INVALID_NAME = 268451842,MACH_RCV_TIMED_OUT = 268451843,MACH_RCV_TOO_LARGE = 268451844,MACH_RCV_INTERRUPTED = 268451845,MACH_RCV_PORT_CHANGED = 268451846,MACH_RCV_INVALID_NOTIFY = 268451847,MACH_RCV_INVALID_DATA = 268451848,MACH_RCV_PORT_DIED = 268451849,MACH_RCV_IN_SET = 268451850,MACH_RCV_HEADER_ERROR = 268451851,MACH_RCV_BODY_ERROR = 268451852,MACH_RCV_INVALID_TYPE = 268451853,MACH_RCV_SCATTER_SMALL = 268451854,MACH_RCV_INVALID_TRAILER = 268451855,MACH_RCV_IN_PROGRESS_TIMED = 268451857,};
enum MACRO_MAXDEPTH {MAXDEPTH = 50,};
enum MACRO_MAXPHASE {MAXPHASE = 500000000,};
enum MACRO_MAXUSERS {MAXUSERS = 5,kMaxStatusBufSize = 8192,};
enum MACRO_MAX_IPv4 {MAX_IPv4_STR_LEN = 16,MAX_IPv6_STR_LEN = 64,};
enum MACRO_MAX_KCTL {MAX_KCTL_NAME = 96,};
enum MACRO_MAX_MBUF {MAX_MBUF_CNAME = 15,};
enum MACRO_MAX_SACK {MAX_SACK_BLKS = 6,};
enum MACRO_MCLSHIFT {MCLSHIFT = 11,};
enum MACRO_MIN_SYNC {MIN_SYNC_NOW_INTERVAL = 900,};
enum MACRO_MNAMELEN {MNAMELEN = 90,};
enum MACRO_MNT_WAIT {MNT_WAIT = 1,MNT_NOWAIT = 2,MNT_DWAIT = 4,};
enum MACRO_NSEC_PER {NSEC_PER_MSEC = 1000000,};
enum MACRO_NeXTBSD4 {NeXTBSD4_0 = 0,};
enum MACRO_OS_TRACE {OS_TRACE_TYPE_RELEASE = 1,OS_TRACE_TYPE_DEBUG = 2,OS_TRACE_TYPE_INFO = 4,OS_TRACE_TYPE_ERROR = 65,OS_TRACE_TYPE_FAULT = 193,};
enum MACRO_OTTYDISC {OTTYDISC = 0,NETLDISC = 1,NTTYDISC = 2,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_OVERRIDE {OVERRIDE_UNKNOWN_PERMISSIONS = 0,};
enum MACRO_O_NOCTTY {O_NOCTTY = 0x20000,};
enum MACRO_PD_RS232 {PD_RS232_PARITY_DEFAULT = 0,PD_RS232_PARITY_NONE = 1,PD_RS232_PARITY_ODD = 2,PD_RS232_PARITY_EVEN = 3,PD_RS232_PARITY_MARK = 4,PD_RS232_PARITY_SPACE = 5,PD_RS232_PARITY_ANY = 6,PD_RS232_S_MASK = 65535,PD_RS232_S_SHIFT = 0,PD_RS232_D_MASK = -65536,PD_RS232_D_SHIFT = 16,PD_RS232_A_MASK = 65535,PD_RS232_A_SHIFT = 0,PD_RS232_N_MASK = -65536,PD_RS232_N_SHIFT = 16,PD_RS232_S_BRK = 2048,PD_RS232_S_LOOP = 4096,PD_RS232_S_TXQ = 8192,PD_RS232_S_RXQ = 16384,PD_RS232_A_XANY = 1024,};
enum MACRO_PLATFORM {PLATFORM_MACOS = 1,PLATFORM_IOS = 2,PLATFORM_TVOS = 3,PLATFORM_WATCHOS = 4,};
enum MACRO_PRIORITY {PRIORITY_QUEUE_KEY_NONE = 0,PRIORITY_QUEUE_ROOT_FLAGS_MASK = 3,};
enum MACRO_RESOURCE {RESOURCE_TYPE_CPU = 1,RESOURCE_TYPE_WAKEUPS = 2,RESOURCE_TYPE_MEMORY = 3,RESOURCE_TYPE_IO = 4,RESOURCE_TYPE_THREADS = 5,};
enum MACRO_SEARCHFS {SEARCHFS_MAX_SEARCHPARMS = 4096,};
enum MACRO_SIGWINCH {SIGWINCH = 28,};
enum MACRO_SYSPROTO {SYSPROTO_EVENT = 1,SYSPROTO_CONTROL = 2,};
enum MACRO_VDISCARD {VDISCARD = 15,VMIN = 16,};
enum MACRO_VFS_USER {VFS_USER_EVENT = 0,VFS_KERNEL_EVENT = 1,};
enum MACRO_VNCREATE {VNCREATE_FLAVOR = 0,};
enum MACRO_VREPRINT {VREPRINT = 6,VINTR = 8,};
enum MACRO___ASSERT {__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES = 1,};
enum MACRO___DARWIN {__DARWIN_ONLY_64_BIT_INO_T = 0,__DARWIN_ONLY_UNIX_CONFORMANCE = 0,__DARWIN_ONLY_VERS_1050 = 0,__DARWIN_UNIX03 = 0,__DARWIN_64_BIT_INO_T = 0,__DARWIN_VERS_1050 = 0,__DARWIN_NON_CANCELABLE = 0,__DARWIN_C_ANSI = 4096,__DARWIN_C_FULL = 900000,};
enum MACRO___IPHONE {__IPHONE_2_0 = 20000,__IPHONE_2_1 = 20100,__IPHONE_2_2 = 20200,__IPHONE_3_0 = 30000,__IPHONE_3_1 = 30100,__IPHONE_3_2 = 30200,__IPHONE_4_0 = 40000,__IPHONE_4_1 = 40100,__IPHONE_4_2 = 40200,__IPHONE_4_3 = 40300,__IPHONE_5_0 = 50000,__IPHONE_5_1 = 50100,__IPHONE_6_0 = 60000,__IPHONE_6_1 = 60100,__IPHONE_7_0 = 70000,__IPHONE_7_1 = 70100,__IPHONE_8_0 = 80000,__IPHONE_8_1 = 80100,__IPHONE_8_2 = 80200,__IPHONE_8_3 = 80300,__IPHONE_8_4 = 80400,__IPHONE_9_0 = 90000,__IPHONE_9_1 = 90100,__IPHONE_9_2 = 90200,__IPHONE_9_3 = 90300,__IPHONE_10_0 = 100000,__IPHONE_10_1 = 100100,__IPHONE_10_2 = 100200,__IPHONE_10_3 = 100300,};
enum MACRO_kDEFAULT {kDEFAULT_SHIFTEXPIREINTERVAL = 30000,};
enum MACRO_kINQUIRY {kINQUIRY_VERSION_DESCRIPTOR_MaxCount = 8,};
typedef evsioMouseScaling NXMouseScaling;
typedef unsigned int NXSwappedFloat;
struct OSBoolean_vtbl; 
struct OpaqueFFTSetup;
enum SCSITaskStatus {kSCSITaskStatus_GOOD = 0x0,kSCSITaskStatus_CHECK_CONDITION = 0x2,kSCSITaskStatus_CONDITION_MET = 0x4,kSCSITaskStatus_BUSY = 0x8,kSCSITaskStatus_INTERMEDIATE = 0x10,kSCSITaskStatus_INTERMEDIATE_CONDITION_MET = 0x14,kSCSITaskStatus_RESERVATION_CONFLICT = 0x18,kSCSITaskStatus_TASK_SET_FULL = 0x28,kSCSITaskStatus_ACA_ACTIVE = 0x30,kSCSITaskStatus_TaskTimeoutOccurred = 0x1,kSCSITaskStatus_ProtocolTimeoutOccurred = 0x2,kSCSITaskStatus_DeviceNotResponding = 0x3,kSCSITaskStatus_DeviceNotPresent = 0x4,kSCSITaskStatus_DeliveryFailure = 0x5,kSCSITaskStatus_No_Status = 0xFF,};
struct TransducerData;
typedef VDGammaInfoRec *VDGammaInfoPtr;
struct __ifnet_filter;
struct __lck_spin_t__;
typedef int atomic_wchar_t;
typedef ccdigest_ctx *ccdigest_ctx_t;
typedef int clock_flavor_t;
typedef ether_header ether_header_t;
struct hv_callbacks_t {void (*dispatch)(void *);void (*preempt)(void *);void (*suspend)(void);void (*thread_destroy)(void *);void (*task_destroy)(void *);void (*volatile_state)(void *, int);void (*memory_pressure)(void);};
enum hv_trap_type_t {HV_TASK_TRAP = 0x0,HV_THREAD_TRAP = 0x1,};
typedef _img4_payload img4_payload_t;
enum img4_section_t {IMG4_SECTION_MANIFEST = 0x0,IMG4_SECTION_OBJECT = 0x1,IMG4_SECTION_RESTOREINFO = 0x2,};
struct internal_state {int dummy;};
typedef io_stat_info *io_stat_info_t;
typedef int iog__nullptr_t;
typedef int kauth_action_t;
struct kauth_listener;
typedef nlist kernel_nlist_t;
struct kmod_reference {kmod_reference *next;kmod_info *info;};
enum kxld_log_level {kKxldLogExplicit = 0x0,kKxldLogErr = 0x1,kKxldLogWarn = 0x2,kKxldLogBasic = 0x3,kKxldLogDetail = 0x4,kKxldLogDebug = 0x5,};
typedef struct __lck_grp_attr__ lck_grp_attr_t;
struct mach_zone_name {char mzn_name[80];};
struct priority_queue {unsigned int pq_root_packed;};
typedef sa_endpoints sa_endpoints_t;
typedef void strategy_fcn_t(buf *);
typedef task *task_inspect_t;
typedef task_vm_info *task_vm_info_t;
struct tlv_descriptor {void *(*thunk)(tlv_descriptor *);unsigned int key;unsigned int offset;};
typedef unsigned long long vm_object_id_t;
typedef int *vm_page_info_t;
struct Block_byref_3 { char *layout;};
typedef DSPSplitComplex COMPLEX_SPLIT;
typedef DriverType *DriverTypePtr;
struct ExpansionData;
typedef IOATAReg16 *IOATARegPtr16;
typedef IOATAReg32 *IOATARegPtr32;
typedef _32A82CDB950F1A48B0FAEA7E2A340328 IOAsyncMethod;
typedef IOBlitSurfaceStruct IOBlitSurface;
typedef void *IOFBCursorRef;
struct IOFWCmdQ_vtbl; 
enum IOFWReadFlags {kIOFWReadFlagsNone = 0x0,kIOFWReadBlockRequest = 0x4,kIOFWReadPingTime = 0x8,};
struct IOFireWireIRM;
struct IOHIDConsumer;
struct IOHIDKeyboard;
struct IOHIDPointing;
enum MACRO_ACCESSX {ACCESSX_MAX_DESCRIPTORS = 100,ACCESSX_MAX_TABLESIZE = 16384,};
enum MACRO_AF_COIP {AF_COIP = 20,AF_CNT = 21,};
enum MACRO_AF_NDRV {AF_NDRV = 27,AF_ISDN = 28,};
enum MACRO_ATM_MIN {ATM_MIN_CALLED = 0x1,ATM_LINK_LIST_TRIM = 0x2,ATM_VALUE_REPLACED = 0x1,ATM_VALUE_ADDED = 0x2,ATM_VALUE_UNREGISTERED = 0x1,ATM_VALUE_DIFF_MAILBOX = 0x2,};
enum MACRO_B115200 {B115200 = 115200,};
enum MACRO_B230400 {B230400 = 230400,};
enum MACRO_CCKPRNG {CCKPRNG_ENTROPY_INTERVAL = 16384,CCKPRNG_RESEED_NTICKS = 50,};
enum MACRO_CCN_USE {CCN_USE_BUILTIN_CLZ = 0,};
enum MACRO_CIGNORE {CIGNORE = 0x1,CSIZE = 0x300,};
enum MACRO_CLOEXEC {F_DUPFD_CLOEXEC = 67,FD_CLOEXEC = 1,};
enum MACRO_CONNECT {CONNECT_RESUME_ON_READ_WRITE = 0x1,CONNECT_DATA_IDEMPOTENT = 0x2,CONNECT_DATA_AUTHENTICATED = 0x4,};
enum MACRO_CTLFLAG {CTLFLAG_RD = 0x80000000,CTLFLAG_WR = 0x40000000,CTLFLAG_NOLOCK = 0x20000000,CTLFLAG_ANYBODY = 0x10000000,CTLFLAG_SECURE = 0x8000000,CTLFLAG_MASKED = 0x4000000,CTLFLAG_NOAUTO = 0x2000000,CTLFLAG_KERN = 0x1000000,CTLFLAG_LOCKED = 0x800000,CTLFLAG_OID2 = 0x400000,};
enum MACRO_CTLTYPE {CTLTYPE = 0xF,};
enum MACRO_DBG_APP {DBG_APP_LOGINWINDOW = 0x3,DBG_APP_AUDIO = 0x4,DBG_APP_SYSTEMUI = 0x5,DBG_APP_SIGNPOST = 0xA,DBG_APP_APPKIT = 0xC,DBG_APP_UIKIT = 0xD,DBG_APP_DFR = 0xE,DBG_APP_LAYOUT = 0xF,DBG_APP_SAMBA = 0x80,DBG_APP_EOSSUPPORT = 0x81,DBG_APP_MACEFIMANAGER = 0x82,};
enum MACRO_DEFINED {IOPCIPMCSPMEDISABLEINS3_DEFINED = 1,IOPCIPMCSPMEWAKEREASON_DEFINED = 1,};
enum MACRO_DFLCSIZ {DFLCSIZ = 0,};
enum MACRO_DFLSSIZ {DFLSSIZ = 8388608,MAXSSIZ = 67108864,};
enum MACRO_DOCLOSE {DOCLOSE = 0x8,};
enum MACRO_EBADMSG {EBADMSG = 94,};
enum MACRO_EBADRPC {EBADRPC = 72,};
enum MACRO_EDEADLK {EDEADLK = 11,};
enum MACRO_EDEVERR {EDEVERR = 83,};
enum MACRO_EISCONN {EISCONN = 56,};
enum MACRO_ENOATTR {ENOATTR = 93,};
enum MACRO_ENOBUFS {ENOBUFS = 55,};
enum MACRO_ENODATA {ENODATA = 96,};
enum MACRO_ENOLINK {ENOLINK = 97,};
enum MACRO_ENOTBLK {ENOTBLK = 15,EBUSY = 16,};
enum MACRO_ENOTDIR {ENOTDIR = 20,};
enum MACRO_ENOTSUP {ENOTSUP = 45,};
enum MACRO_EPWROFF {EPWROFF = 82,};
enum MACRO_EREMOTE {EREMOTE = 71,};
enum MACRO_ETXTBSY {ETXTBSY = 26,};
enum MACRO_FSINGLE {FSINGLE_WRITER = 0x4000000,};
enum MACRO_F_RDLCK {F_RDLCK = 1,F_UNLCK = 2,F_WRLCK = 3,F_WAIT = 16,F_FLOCK = 32,F_POSIX = 64,F_PROV = 128,F_WAKE1_SAFE = 256,F_ABORT = 512,F_OFD_LOCK = 1024,};
enum MACRO_GETNCNT {GETNCNT = 3,GETPID = 4,};
enum MACRO_GETZCNT {GETZCNT = 7,SETVAL = 8,};
enum MACRO_ICMPCTL {ICMPCTL_MASKREPL = 1,ICMPCTL_STATS = 2,ICMPCTL_ICMPLIM = 3,ICMPCTL_TIMESTAMP = 4,ICMPCTL_MAXID = 5,};
enum MACRO_IFRTYPE {IFRTYPE_FUNCTIONAL_UNKNOWN = 0,IFRTYPE_FUNCTIONAL_LOOPBACK = 1,IFRTYPE_FUNCTIONAL_WIRED = 2,IFRTYPE_FUNCTIONAL_WIFI_INFRA = 3,IFRTYPE_FUNCTIONAL_WIFI_AWDL = 4,IFRTYPE_FUNCTIONAL_CELLULAR = 5,IFRTYPE_FUNCTIONAL_INTCOPROC = 6,IFRTYPE_FUNCTIONAL_LAST = 6,};
enum MACRO_IF_WAKE {IF_WAKE_ON_MAGIC_PACKET = 0x1,};
enum MACRO_IGMPCTL {IGMPCTL_STATS = 1,IGMPCTL_MAXID = 2,};
enum MACRO_IN6_IFF {IN6_IFF_ANYCAST = 0x1,IN6_IFF_TENTATIVE = 0x2,IN6_IFF_DUPLICATED = 0x4,IN6_IFF_DETACHED = 0x8,IN6_IFF_DEPRECATED = 0x10,IN6_IFF_NODAD = 0x20,IN6_IFF_AUTOCONF = 0x40,IN6_IFF_TEMPORARY = 0x80,IN6_IFF_DYNAMIC = 0x100,IN6_IFF_OPTIMISTIC = 0x200,IN6_IFF_SECURED = 0x400,IN6_IFF_CLAT46 = 0x1000,IN6_IFF_NOPFX = 0x8000,};
enum MACRO_IOACCEL {IOACCEL_TYPES_REV = 12,};
enum MACRO_IOBTHID {IOBTHID_HANDSHAKE_HEADER = 0x0,IOBTHID_HID_CONTROL_HEADER = 0x10,IOBTHID_GET_REPORT_HEADER = 0x40,IOBTHID_SET_REPORT_HEADER = 0x50,IOBTHID_GET_PROTOCOL_HEADER = 0x60,IOBTHID_SET_PROTOCOL_HEADER = 0x70,IOBTHID_GET_IDLE_HEADER = 0x80,IOBTHID_SET_IDLE_HEADER = 0x90,IOBTHID_DATA_HEADER = 0xA0,IOBTHID_DATC_HEADER = 0xB0,IOBTHID_HANDSHAKE_SUCCESSFUL = 0x0,IOBTHID_HANDSHAKE_NOT_READY = 0x1,IOBTHID_HANDSHAKE_INVALID_REPORT_ID = 0x2,IOBTHID_HANDSHAKE_UNSUPPORTED_REQUEST = 0x3,IOBTHID_HANDSHAKE_INVALID_PARAMETER = 0x4,IOBTHID_HANDSHAKE_ERR_UNKNOWN = 0xD,IOBTHID_HANDSHAKE_ERR_FATAL = 0xF,IOBTHID_CONTROL_NOP = 0x0,IOBTHID_CONTROL_HARD_RESET = 0x1,IOBTHID_CONTROL_SOFT_RESET = 0x2,IOBTHID_CONTROL_SUSPEND = 0x3,IOBTHID_CONTROL_EXIT_SUSPEND = 0x4,IOBTHID_CONTROL_VC_UNPLUG = 0x5,IOBTHID_BOOT_PROTOCOL = 0x0,IOBTHID_REPORT_PROTOCOL = 0x1,IOBTHID_RESERVED_REPORT = 0x0,IOBTHID_OTHER_REPORT = 0x0,IOBTHID_INPUT_REPORT = 0x1,IOBTHID_OUTPUT_REPORT = 0x2,IOBTHID_FEATURE_REPORT = 0x3,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x1FFF,};
enum MACRO_IOINTES {IOINTES_CLIENT = 1,IOINTES_LAT = 2,IOINTES_SEMA = 3,IOINTES_INTCTXT = 4,IOINTES_INTFLTR = 5,IOINTES_ACTION = 6,IOINTES_FILTER = 7,};
enum MACRO_IOTIMES {IOTIMES_CLIENT = 1,IOTIMES_LAT = 2,IOTIMES_SEMA = 3,IOTIMES_ACTION = 4,};
enum MACRO_IO_UNIT {IO_UNIT = 0x1,IO_APPEND = 0x2,IO_SYNC = 0x4,IO_NODELOCKED = 0x8,IO_NDELAY = 0x10,IO_NOZEROFILL = 0x20,IO_TAILZEROFILL = 0x40,IO_HEADZEROFILL = 0x80,IO_NOZEROVALID = 0x100,IO_NOZERODIRTY = 0x200,IO_CLOSE = 0x400,IO_NOCACHE = 0x800,IO_RAOFF = 0x1000,IO_DEFWRITE = 0x2000,IO_PASSIVE = 0x4000,IO_NOAUTH = 0x8000,IO_NODIRECT = 0x10000,IO_ENCRYPTED = 0x20000,IO_RETURN_ON_THROTTLE = 0x40000,IO_SINGLE_WRITER = 0x80000,IO_SYSCALL_DISPATCH = 0x100000,IO_SWAP_DISPATCH = 0x200000,IO_SKIP_ENCRYPTION = 0x400000,IO_EVTONLY = 0x800000,};
enum MACRO_IP6FLOW {IP6FLOW_DSCP_MASK = 0xFC00000,IP6FLOW_DSCP_SHIFT = 0x16,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_HOPOPTS = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_IPV4 = 4,IPPROTO_TCP = 6,IPPROTO_ST = 7,IPPROTO_EGP = 8,IPPROTO_PIGP = 9,IPPROTO_RCCMON = 10,IPPROTO_NVPII = 11,IPPROTO_PUP = 12,IPPROTO_ARGUS = 13,IPPROTO_EMCON = 14,IPPROTO_XNET = 15,IPPROTO_CHAOS = 16,IPPROTO_UDP = 17,IPPROTO_MUX = 18,IPPROTO_MEAS = 19,IPPROTO_HMP = 20,IPPROTO_PRM = 21,IPPROTO_IDP = 22,IPPROTO_TRUNK1 = 23,IPPROTO_TRUNK2 = 24,IPPROTO_LEAF1 = 25,IPPROTO_LEAF2 = 26,IPPROTO_RDP = 27,IPPROTO_IRTP = 28,IPPROTO_TP = 29,IPPROTO_BLT = 30,IPPROTO_NSP = 31,IPPROTO_INP = 32,IPPROTO_SEP = 33,IPPROTO_3PC = 34,IPPROTO_IDPR = 35,IPPROTO_XTP = 36,IPPROTO_DDP = 37,IPPROTO_CMTP = 38,IPPROTO_TPXX = 39,IPPROTO_IL = 40,IPPROTO_IPV6 = 41,IPPROTO_SDRP = 42,IPPROTO_ROUTING = 43,IPPROTO_FRAGMENT = 44,IPPROTO_IDRP = 45,IPPROTO_RSVP = 46,IPPROTO_GRE = 47,IPPROTO_MHRP = 48,IPPROTO_BHA = 49,IPPROTO_ESP = 50,IPPROTO_AH = 51,IPPROTO_INLSP = 52,IPPROTO_SWIPE = 53,IPPROTO_NHRP = 54,IPPROTO_ICMPV6 = 58,IPPROTO_NONE = 59,IPPROTO_DSTOPTS = 60,IPPROTO_AHIP = 61,IPPROTO_CFTP = 62,IPPROTO_HELLO = 63,IPPROTO_SATEXPAK = 64,IPPROTO_KRYPTOLAN = 65,IPPROTO_RVD = 66,IPPROTO_IPPC = 67,IPPROTO_ADFS = 68,IPPROTO_SATMON = 69,IPPROTO_VISA = 70,IPPROTO_IPCV = 71,IPPROTO_CPNX = 72,IPPROTO_CPHB = 73,IPPROTO_WSN = 74,IPPROTO_PVP = 75,IPPROTO_BRSATMON = 76,IPPROTO_ND = 77,IPPROTO_WBMON = 78,IPPROTO_WBEXPAK = 79,IPPROTO_EON = 80,IPPROTO_VMTP = 81,IPPROTO_SVMTP = 82,IPPROTO_VINES = 83,IPPROTO_TTP = 84,IPPROTO_IGP = 85,IPPROTO_DGP = 86,IPPROTO_TCF = 87,IPPROTO_IGRP = 88,IPPROTO_OSPFIGP = 89,IPPROTO_SRPC = 90,IPPROTO_LARP = 91,IPPROTO_MTP = 92,IPPROTO_AX25 = 93,IPPROTO_IPEIP = 94,IPPROTO_MICP = 95,IPPROTO_SCCSP = 96,IPPROTO_ETHERIP = 97,IPPROTO_ENCAP = 98,IPPROTO_APES = 99,IPPROTO_GMTP = 100,IPPROTO_PIM = 103,IPPROTO_IPCOMP = 108,IPPROTO_PGM = 113,IPPROTO_SCTP = 132,IPPROTO_DIVERT = 254,IPPROTO_RAW = 255,IPPROTO_MAX = 256,IPPROTO_DONE = 257,};
enum MACRO_IPV6CTL {IPV6CTL_FORWARDING = 1,IPV6CTL_SENDREDIRECTS = 2,IPV6CTL_DEFHLIM = 3,IPV6CTL_FORWSRCRT = 5,IPV6CTL_STATS = 6,IPV6CTL_MRTSTATS = 7,IPV6CTL_MRTPROTO = 8,IPV6CTL_MAXFRAGPACKETS = 9,IPV6CTL_SOURCECHECK = 10,IPV6CTL_SOURCECHECK_LOGINT = 11,IPV6CTL_ACCEPT_RTADV = 12,IPV6CTL_KEEPFAITH = 13,IPV6CTL_LOG_INTERVAL = 14,IPV6CTL_HDRNESTLIMIT = 15,IPV6CTL_DAD_COUNT = 16,IPV6CTL_AUTO_FLOWLABEL = 17,IPV6CTL_DEFMCASTHLIM = 18,IPV6CTL_GIF_HLIM = 19,IPV6CTL_KAME_VERSION = 20,IPV6CTL_USE_DEPRECATED = 21,IPV6CTL_RR_PRUNE = 22,IPV6CTL_V6ONLY = 24,IPV6CTL_RTEXPIRE = 25,IPV6CTL_RTMINEXPIRE = 26,IPV6CTL_RTMAXCACHE = 27,IPV6CTL_USETEMPADDR = 32,IPV6CTL_TEMPPLTIME = 33,IPV6CTL_TEMPVLTIME = 34,IPV6CTL_AUTO_LINKLOCAL = 35,IPV6CTL_RIP6STATS = 36,IPV6CTL_PREFER_TEMPADDR = 37,IPV6CTL_ADDRCTLPOLICY = 38,IPV6CTL_USE_DEFAULTZONE = 39,IPV6CTL_MAXFRAGS = 41,IPV6CTL_MCAST_PMTU = 44,IPV6CTL_NEIGHBORGCTHRESH = 46,IPV6CTL_MAXIFPREFIXES = 47,IPV6CTL_MAXIFDEFROUTERS = 48,IPV6CTL_MAXDYNROUTES = 49,};
enum MACRO_MAXFRAG {MAXFRAG = 8,};
enum MACRO_MAXFREQ {MAXFREQ = 500000,};
enum MACRO_MAXPHYS {MAXPHYS = 131072,};
enum MACRO_MAX_MEM {MAX_MEM_LEVEL = 9,MAX_WBITS = 15,};
enum MACRO_MINCORE {MINCORE_INCORE = 0x1,MINCORE_REFERENCED = 0x2,MINCORE_MODIFIED = 0x4,MINCORE_REFERENCED_OTHER = 0x8,MINCORE_MODIFIED_OTHER = 0x10,MINCORE_PAGED_OUT = 0x20,MINCORE_COPIED = 0x40,MINCORE_ANONYMOUS = 0x80,};
enum MACRO_MIN_SFI {MIN_SFI_WINDOW_USEC = 500,};
enum MACRO_MT_FREE {MT_FREE = 0,MT_DATA = 1,MT_HEADER = 2,MT_SOCKET = 3,MT_PCB = 4,MT_RTABLE = 5,MT_HTABLE = 6,MT_ATABLE = 7,MT_SONAME = 8,MT_SOOPTS = 10,MT_FTABLE = 11,MT_RIGHTS = 12,MT_IFADDR = 13,MT_CONTROL = 14,MT_OOBDATA = 15,MT_TAG = 16,MT_MAX = 32,};
enum MACRO_NETLINK {NETLINK_GENERIC = 0,};
enum MACRO_NOGROUP {NOGROUP = 65535,};
enum MACRO_NeXTBSD {NeXTBSD = 1995064,};
enum MACRO_ORDINAL {SELF_LIBRARY_ORDINAL = 0x0,MAX_LIBRARY_ORDINAL = 0xFD,DYNAMIC_LOOKUP_ORDINAL = 0xFE,EXECUTABLE_ORDINAL = 0xFF,};
enum MACRO_OSTYPES {OSTYPES_K64_REV = 2,};
enum MACRO_O_POPUP {O_POPUP = 0x80000000,O_ALERT = 0x20000000,};
enum MACRO_PERSIST {PERSIST_TIMEOUT = 0x40,};
enum MACRO_PER_SEC {USEC_PER_SEC = 1000000,NSEC_PER_SEC = 1000000000,};
enum MACRO_PFKEYV2 {PFKEYV2_REVISION = 199806,};
enum MACRO_PGSHIFT {PGSHIFT = 12,};
enum MACRO_PPPDISC {PPPDISC = 5,};
enum MACRO_PRIMASK {PRIMASK = 0xFF,PCATCH = 0x100,PTTYBLOCK = 0x200,PDROP = 0x400,PSPIN = 0x800,};
enum MACRO_PROCESS {PROCESS_THROTTLED = 0x2,};
enum MACRO_PR_ORIG {PR_ORIG_RA = 0,PR_ORIG_RR = 1,PR_ORIG_STATIC = 2,PR_ORIG_KERNEL = 3,};
enum MACRO_SECTION {SECTION_TYPE = 0xFF,SECTION_ATTRIBUTES = 0xFFFFFF00,};
enum MACRO_SIGABRT {SIGABRT = 6,};
enum MACRO_SIGALRM {SIGALRM = 14,};
enum MACRO_SIGCHLD {SIGCHLD = 20,};
enum MACRO_SIGCONT {SIGCONT = 19,};
enum MACRO_SIGINFO {SIGINFO = 29,};
enum MACRO_SIGKILL {SIGKILL = 9,};
enum MACRO_SIGPIPE {SIGPIPE = 13,};
enum MACRO_SIGPROF {SIGPROF = 27,};
enum MACRO_SIGQUIT {SIGQUIT = 3,SIGILL = 4,};
enum MACRO_SIGSEGV {SIGSEGV = 11,};
enum MACRO_SIGSTOP {SIGSTOP = 17,};
enum MACRO_SIGTERM {SIGTERM = 15,SIGURG = 16,};
enum MACRO_SIGTRAP {SIGTRAP = 5,};
enum MACRO_SIGTSTP {SIGTSTP = 18,};
enum MACRO_SIGTTIN {SIGTTIN = 21,};
enum MACRO_SIGTTOU {SIGTTOU = 22,};
enum MACRO_SIGUSR1 {SIGUSR1 = 30,};
enum MACRO_SIGUSR2 {SIGUSR2 = 31,};
enum MACRO_SIGXCPU {SIGXCPU = 24,};
enum MACRO_SIGXFSZ {SIGXFSZ = 25,};
enum MACRO_SPECHSZ {SPECHSZ = 64,};
enum MACRO_S_IFIFO {S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFDIR = 0x4000,S_IFBLK = 0x6000,S_IFREG = 0x8000,S_IFLNK = 0xA000,S_IFSOCK = 0xC000,S_IFWHT = 0xE000,S_IRWXU = 0x1C0,S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IRWXG = 0x38,S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,S_ISUID = 0x800,S_ISGID = 0x400,S_ISVTX = 0x200,};
enum MACRO_TASK_VM {TASK_VM_INFO_PURGEABLE = 23,TASK_TRACE_MEMORY_INFO = 24,TASK_WAIT_STATE_INFO = 25,TASK_POWER_INFO_V2 = 26,TASK_VM_INFO_PURGEABLE_ACCOUNT = 27,TASK_FLAGS_INFO = 28,};
enum MACRO_TCPOLEN {TCPOLEN_MAXSEG = 4,};
enum MACRO_TCP_MAX {TCP_MAX_WINSHIFT = 14,TCP_MAXHLEN = 60,TCP_NODELAY = 1,TCP_MAXSEG = 2,TCP_NOPUSH = 4,TCP_NOOPT = 8,TCP_KEEPALIVE = 16,TCP_CONNECTIONTIMEOUT = 32,};
enum MACRO_TCP_RXT {TCP_RXT_CONNDROPTIME = 0x80,TCP_RXT_FINDROP = 0x100,TCP_KEEPINTVL = 0x101,TCP_KEEPCNT = 0x102,TCP_SENDMOREACKS = 0x103,TCP_ENABLE_ECN = 0x104,TCP_FASTOPEN = 0x105,TCP_CONNECTION_INFO = 0x106,TCP_NOTSENT_LOWAT = 0x201,};
enum MACRO_TCSANOW {TCSANOW = 0,TCSADRAIN = 1,TCSAFLUSH = 2,TCSASOFT = 16,};
enum MACRO_TF_NONE {TF_NONE = 0,TF_LRETURNWAIT = 256,TF_LRETURNWAITER = 512,};
enum MACRO_TIMEOUT {TIMEOUT_URGENCY_SYS_NORMAL = 0x0,TIMEOUT_URGENCY_SYS_CRITICAL = 0x1,TIMEOUT_URGENCY_SYS_BACKGROUND = 0x2,TIMEOUT_URGENCY_USER_MASK = 0x10,TIMEOUT_URGENCY_USER_NORMAL = 0x10,TIMEOUT_URGENCY_USER_CRITICAL = 0x11,TIMEOUT_URGENCY_USER_BACKGROUND = 0x12,TIMEOUT_URGENCY_MASK = 0x13,TIMEOUT_URGENCY_LEEWAY = 0x20,TIMEOUT_URGENCY_FIRST_AVAIL = 0x40,TIMEOUT_URGENCY_RATELIMITED = 0x80,TIMEOUT_NO_LEEWAY = 0x0,TIMEOUT_WAIT_FOREVER = 0x0,};
enum MACRO_TIME_OK {TIME_OK = 0,TIME_INS = 1,TIME_DEL = 2,TIME_OOP = 3,TIME_WAIT = 4,TIME_ERROR = 5,};
enum MACRO_TIOCPKT {TIOCPKT_DATA = 0x0,TIOCPKT_FLUSHREAD = 0x1,TIOCPKT_FLUSHWRITE = 0x2,TIOCPKT_STOP = 0x4,TIOCPKT_START = 0x8,TIOCPKT_NOSTOP = 0x10,TIOCPKT_DOSTOP = 0x20,TIOCPKT_IOCTL = 0x40,};
enum MACRO_TTYDISC {TTYDISC = 0,TABLDISC = 3,SLIPDISC = 4,};
enum MACRO_USE_NON {USE_NON_APPLE_STANDARD_DATATYPES = 1,};
enum MACRO_VERSION {VERSION_MAJOR = 18,VERSION_MINOR = 2,VERSION_REVISION = 0,VERSION_STAGE_DEV = 32,VERSION_STAGE_ALPHA = 64,VERSION_STAGE_BETA = 96,VERSION_STAGE_RELEASE = 128,VERSION_PRERELEASE_LEVEL = 0,};
enum MACRO_VFSATTR {VFSATTR_f_objcount = 1,VFSATTR_f_filecount = 2,VFSATTR_f_dircount = 4,VFSATTR_f_maxobjcount = 8,VFSATTR_f_bsize = 16,VFSATTR_f_iosize = 32,VFSATTR_f_blocks = 64,VFSATTR_f_bfree = 128,VFSATTR_f_bavail = 256,VFSATTR_f_bused = 512,VFSATTR_f_files = 1024,VFSATTR_f_ffree = 2048,VFSATTR_f_fsid = 4096,VFSATTR_f_owner = 8192,VFSATTR_f_capabilities = 16384,VFSATTR_f_attributes = 32768,VFSATTR_f_create_time = 65536,VFSATTR_f_modify_time = 131072,VFSATTR_f_access_time = 262144,VFSATTR_f_backup_time = 524288,VFSATTR_f_fssubtype = 1048576,VFSATTR_f_vol_name = 2097152,VFSATTR_f_signature = 4194304,VFSATTR_f_carbon_fsid = 8388608,VFSATTR_f_uuid = 16777216,VFSATTR_f_quota = 33554432,VFSATTR_f_reserved = 67108864,};
enum MACRO_VFS_CTL {VFS_CTL_VERS1 = 0x1,VFS_CTL_STATFS = 0x10001,VFS_CTL_UMOUNT = 0x10002,VFS_CTL_QUERY = 0x10003,VFS_CTL_NEWADDR = 0x10004,VFS_CTL_TIMEO = 0x10005,VFS_CTL_NOLOCKS = 0x10006,VFS_CTL_SADDR = 0x10007,VFS_CTL_DISC = 0x10008,VFS_CTL_SERVERINFO = 0x10009,VFS_CTL_NSTATUS = 0x1000A,};
enum MACRO_VM_PAGE {VM_PAGE_QUERY_PAGE_PRESENT = 0x1,VM_PAGE_QUERY_PAGE_FICTITIOUS = 0x2,VM_PAGE_QUERY_PAGE_REF = 0x4,VM_PAGE_QUERY_PAGE_DIRTY = 0x8,VM_PAGE_QUERY_PAGE_PAGED_OUT = 0x10,VM_PAGE_QUERY_PAGE_COPIED = 0x20,VM_PAGE_QUERY_PAGE_SPECULATIVE = 0x40,VM_PAGE_QUERY_PAGE_EXTERNAL = 0x80,VM_PAGE_QUERY_PAGE_CS_VALIDATED = 0x100,VM_PAGE_QUERY_PAGE_CS_TAINTED = 0x200,VM_PAGE_QUERY_PAGE_CS_NX = 0x400,VM_FLAGS_FIXED = 0x0,VM_FLAGS_ANYWHERE = 0x1,VM_FLAGS_PURGABLE = 0x2,VM_FLAGS_4GB_CHUNK = 0x4,VM_FLAGS_RANDOM_ADDR = 0x8,VM_FLAGS_NO_CACHE = 0x10,VM_FLAGS_RESILIENT_CODESIGN = 0x20,VM_FLAGS_RESILIENT_MEDIA = 0x40,VM_FLAGS_OVERWRITE = 0x4000,VM_FLAGS_SUPERPAGE_MASK = 0x70000,VM_FLAGS_RETURN_DATA_ADDR = 0x100000,VM_FLAGS_RETURN_4K_DATA_ADDR = 0x800000,VM_FLAGS_ALIAS_MASK = 0xFF000000,VM_FLAGS_SUPERPAGE_SHIFT = 0x10,};
enum MACRO_VM_PROT {VM_PROT_NONE = 0x0,VM_PROT_READ = 0x1,VM_PROT_WRITE = 0x2,VM_PROT_EXECUTE = 0x4,VM_PROT_NO_CHANGE = 0x8,VM_PROT_COPY = 0x10,VM_PROT_WANTS_COPY = 0x10,VM_PROT_IS_MASK = 0x40,VM_PROT_STRIP_READ = 0x80,VM_SYNC_ASYNCHRONOUS = 0x1,VM_SYNC_SYNCHRONOUS = 0x2,VM_SYNC_INVALIDATE = 0x4,VM_SYNC_KILLPAGES = 0x8,VM_SYNC_DEACTIVATE = 0x10,VM_SYNC_CONTIGUOUS = 0x20,VM_SYNC_REUSABLEPAGES = 0x40,};
enum MACRO_VOL_CAP {VOL_CAP_FMT_PERSISTENTOBJECTIDS = 0x1,VOL_CAP_FMT_SYMBOLICLINKS = 0x2,VOL_CAP_FMT_HARDLINKS = 0x4,VOL_CAP_FMT_JOURNAL = 0x8,VOL_CAP_FMT_JOURNAL_ACTIVE = 0x10,VOL_CAP_FMT_NO_ROOT_TIMES = 0x20,VOL_CAP_FMT_SPARSE_FILES = 0x40,VOL_CAP_FMT_ZERO_RUNS = 0x80,VOL_CAP_FMT_CASE_SENSITIVE = 0x100,VOL_CAP_FMT_CASE_PRESERVING = 0x200,VOL_CAP_FMT_FAST_STATFS = 0x400,VOL_CAP_FMT_2TB_FILESIZE = 0x800,VOL_CAP_FMT_OPENDENYMODES = 0x1000,VOL_CAP_FMT_HIDDEN_FILES = 0x2000,VOL_CAP_FMT_PATH_FROM_ID = 0x4000,VOL_CAP_FMT_NO_VOLUME_SIZES = 0x8000,VOL_CAP_FMT_DECMPFS_COMPRESSION = 0x10000,VOL_CAP_FMT_64BIT_OBJECT_IDS = 0x20000,VOL_CAP_FMT_DIR_HARDLINKS = 0x40000,VOL_CAP_FMT_DOCUMENT_ID = 0x80000,VOL_CAP_FMT_WRITE_GENERATION_COUNT = 0x100000,VOL_CAP_FMT_NO_IMMUTABLE_FILES = 0x200000,VOL_CAP_FMT_NO_PERMISSIONS = 0x400000,VOL_CAP_INT_SEARCHFS = 0x1,VOL_CAP_INT_ATTRLIST = 0x2,VOL_CAP_INT_NFSEXPORT = 0x4,VOL_CAP_INT_READDIRATTR = 0x8,VOL_CAP_INT_EXCHANGEDATA = 0x10,VOL_CAP_INT_COPYFILE = 0x20,VOL_CAP_INT_ALLOCATE = 0x40,VOL_CAP_INT_VOL_RENAME = 0x80,VOL_CAP_INT_ADVLOCK = 0x100,VOL_CAP_INT_FLOCK = 0x200,VOL_CAP_INT_EXTENDED_SECURITY = 0x400,VOL_CAP_INT_USERACCESS = 0x800,VOL_CAP_INT_MANLOCK = 0x1000,VOL_CAP_INT_NAMEDSTREAMS = 0x2000,VOL_CAP_INT_EXTENDED_ATTR = 0x4000,VOL_CAP_INT_CLONE = 0x10000,VOL_CAP_INT_SNAPSHOT = 0x20000,VOL_CAP_INT_RENAME_SWAP = 0x40000,VOL_CAP_INT_RENAME_EXCL = 0x80000,};
enum MACRO_VSTATUS {VSTATUS = 18,};
enum MACRO_WAKEMON {WAKEMON_ENABLE = 0x1,WAKEMON_DISABLE = 0x2,WAKEMON_GET_PARAMS = 0x4,WAKEMON_SET_DEFAULTS = 0x8,WAKEMON_MAKE_FATAL = 0x10,};
enum MACRO_WEXITED {WEXITED = 0x4,WCONTINUED = 0x10,WNOWAIT = 0x20,};
enum MACRO_WNOHANG {WNOHANG = 0x1,WUNTRACED = 0x2,WCOREFLAG = 0x80,};
enum MACRO_XNUPOST {XNUPOST_KCTYPE_TESTCONFIG = 0x1040,};
enum MACRO__RLIMIT {_RLIMIT_POSIX_FLAG = 0x1000,};
enum MACRO___PFKEY {__PFKEY_V2_H = 1,};
enum MACRO_err_max {err_max_system = 0x3F,};
enum MACRO_kGTRACE {kGTRACE_ARGUMENT_Reserved1 = 0x1000,kGTRACE_ARGUMENT_STRING = 0x2000,kGTRACE_ARGUMENT_BESTRING = 0x4000,kGTRACE_ARGUMENT_POINTER = 0x8000,kGTRACE_ARGUMENT_MASK = 0xF000,};
enum MACRO_x86_AVX {x86_AVX_STATE32 = 16,x86_AVX512_STATE32 = 19,};
enum NXMouseButton {NX_OneButton = 0x0,NX_LeftButton = 0x1,NX_RightButton = 0x2,};
struct OSKextAccount;
typedef __OSMallocTag__ *OSMallocTag_t;
struct OSNumber_vtbl; 
struct OSObject_vtbl; 
struct OSString_vtbl; 
struct OSSymbol_vtbl; 
typedef RegEntryID *RegEntryIDPtr;
enum SCSITaskState {kSCSITaskState_NEW_TASK = 0x0,kSCSITaskState_ENABLED = 0x1,kSCSITaskState_BLOCKED = 0x2,kSCSITaskState_DORMANT = 0x3,kSCSITaskState_ENDED = 0x4,};
typedef VDDDCBlockRec *VDDDCBlockPtr;
typedef VDSetEntryRecord *VDSetEntryPtr;
typedef VDSettings *VDSettingsPtr;
typedef VDSyncInfoRec *VDSyncInfoPtr;
struct _IOBlitMemory;
struct _IOSimpleLock;
struct __ifmultiaddr;
struct __lck_mtx_t__;
union __sigaction_u {void (*__sa_handler)(int);void (*__sa_sigaction)(int, __siginfo *, void *);};
enum ataDeviceType {kUnknownATADeviceType = 0x0,kATADeviceType = 0x1,kATAPIDeviceType = 0x2,};
enum ataSocketType {kUnknownSocket = 0x0,kInternalATASocket = 0x1,kMediaBaySocket = 0x2,kPCCardSocket = 0x3,kInternalSATA = 0x4,kSATABay = 0x5,kInternalSATA2 = 0x6,kSATA2Bay = 0x7,};
typedef int atomic_size_t;
typedef long long atomic_ullong;
typedef short atomic_ushort;
typedef au_tid_addr au_tid_addr_t;
struct audit_token_t {unsigned int val[8];};
typedef void (*ccdigest_fn_t)( ccdigest_info *, unsigned int,  void *, void *);
typedef cckprng_ctx *cckprng_ctx_t;
typedef fsignatures fsignatures_t;
enum gssd_mechtype {GSSD_NO_MECH = 0xFFFFFFFF,GSSD_KRB5_MECH = 0x0,GSSD_SPNEGO_MECH = 0x1,GSSD_NTLM_MECH = 0x2,GSSD_IAKERB_MECH = 0x3,};
enum gssd_nametype {GSSD_STRING_NAME = 0x0,GSSD_EXPORT = 0x1,GSSD_ANONYMOUS = 0x2,GSSD_HOSTBASED = 0x3,GSSD_USER = 0x4,GSSD_MACHINE_UID = 0x5,GSSD_STRING_UID = 0x6,GSSD_KRB5_PRINCIPAL = 0x7,GSSD_KRB5_REFERRAL = 0x8,GSSD_NTLM_PRINCIPAL = 0x9,GSSD_NTLM_BLOB = 0xA,GSSD_UUID = 0xB,};
typedef unsigned short i386_ioport_t;
typedef __ifmultiaddr *ifmultiaddr_t;
typedef _img4_crypto img4_crypto_t;
typedef ipc_voucher *ipc_voucher_t;
typedef ipf_pktopts *ipf_pktopts_t;
typedef kauth_scope *kauth_scope_t;
typedef kcdata_item *kcdata_item_t;
typedef kcdata_iter kcdata_iter_t;
typedef void (*kdp_receive_t)(void *, unsigned int *, unsigned int);
typedef int kern_return_t;
typedef struct __lck_mtx_ext_t__ lck_mtx_ext_t;
typedef unsigned int lck_rw_type_t;
typedef void (*os_function_t)(void *);
enum os_log_type_t {OS_LOG_TYPE_DEFAULT = 0x0,OS_LOG_TYPE_INFO = 0x1,OS_LOG_TYPE_DEBUG = 0x2,OS_LOG_TYPE_ERROR = 0x10,OS_LOG_TYPE_FAULT = 0x11,};
struct processor_set;
typedef queue_entry queue_chain_t;
typedef queue_entry *queue_entry_t;
struct rslvmulti_req {sockaddr *sa;sockaddr **llsa;};
typedef void *rusage_info_t;
typedef IOPowerStateChangeNotification sleepWakeNote;
struct sockaddr_ndrv {unsigned char snd_len;unsigned char snd_family;unsigned char snd_name[16];};
typedef char symtab_name_t[32];
typedef int sync_policy_t;
enum tEndpointType {kEndpointTypeControl = 0x0,kEndpointTypeIsochronous = 0x1,kEndpointTypeBulk = 0x2,kEndpointTypeInterrupt = 0x3,};
enum tUSBLinkState {kLinkStateU0 = 0x0,kLinkStateU1 = 0x1,kLinkStateU2 = 0x2,kLinkStateU3 = 0x3,kLinkStateL0 = 0x0,kLinkStateL1 = 0x1,kLinkStateL2 = 0x2,kLinkStateL3 = 0x3,};
enum telemetry_pmi {TELEMETRY_PMI_NONE = 0x0,TELEMETRY_PMI_INSTRS = 0x1,TELEMETRY_PMI_CYCLES = 0x2,};
typedef thread_call *thread_call_t;
typedef void (*timeout_fcn_t)(void *);
struct twolevel_hint {unsigned int isub_image : 8;unsigned int itoc : 24;};
struct upl_page_info {unsigned int opaque[2];};
typedef vfs_context *vfs_context_t;
typedef int vm_behavior_t;
typedef int vm_purgable_t;
struct vnodeopv_desc {int (***opv_desc_vector_p)(void *);vnodeopv_entry_desc *opv_desc_ops;};
typedef int wait_result_t;
struct work_interval;
typedef _AVCUnitPlugs AVCUnitPlugs;
enum CDSectorArea {kCDSectorAreaSync = 0x80,kCDSectorAreaHeader = 0x20,kCDSectorAreaSubHeader = 0x40,kCDSectorAreaUser = 0x10,kCDSectorAreaAuxiliary = 0x8,kCDSectorAreaErrorFlags = 0x2,kCDSectorAreaSubChannel = 0x1,kCDSectorAreaSubChannelQ = 0x4,};
enum CDSectorSize {kCDSectorSizeCDDA = 0x930,kCDSectorSizeMode1 = 0x800,kCDSectorSizeMode2 = 0x920,kCDSectorSizeMode2Form1 = 0x800,kCDSectorSizeMode2Form2 = 0x918,kCDSectorSizeWhole = 0x930,};
enum CDSectorType {kCDSectorTypeUnknown = 0x0,kCDSectorTypeCDDA = 0x1,kCDSectorTypeMode1 = 0x2,kCDSectorTypeMode2 = 0x3,kCDSectorTypeMode2Form1 = 0x4,kCDSectorTypeMode2Form2 = 0x5,kCDSectorTypeCount = 0x6,};
typedef __BlobIndex CS_BlobIndex;
typedef __SC_SuperBlob CS_SuperBlob;
typedef ColorSpec *ColorSpecPtr;
typedef DCLTimeStampStruct DCLTimeStamp;
typedef int FFTDirection;
typedef FWAddressStruct *FWAddressPtr;
typedef unsigned int FourCharCode;
typedef IOATAReg8 *IOATARegPtr8;
enum IOAVCOpcodes {kAVCPlugInfoOpcode = 0x2,kAVCOutputPlugSignalFormatOpcode = 0x18,kAVCInputPlugSignalFormatOpcode = 0x19,kAVCUnitInfoOpcode = 0x30,kAVCSubunitInfoOpcode = 0x31,kAVCConnectionsOpcode = 0x22,kAVCConnectOpcode = 0x24,kAVCDisconnectOpcode = 0x25,kAVCPowerOpcode = 0xB2,kAVCSignalSourceOpcode = 0x1A,kAVCVendorDependentOpcode = 0x0,kAVCOutputSignalModeOpcode = 0x78,kAVCInputSignalModeOpcode = 0x79,kAVCSignalModeSD525_60 = 0x0,kAVCSignalModeSDL525_60 = 0x4,kAVCSignalModeHD1125_60 = 0x8,kAVCSignalModeSD625_50 = 0x80,kAVCSignalModeSDL625_50 = 0x84,kAVCSignalModeHD1250_50 = 0x88,kAVCSignalModeDVCPro525_60 = 0x78,kAVCSignalModeDVCPro625_50 = 0xF8,kAVCSignalModeDummyOperand = 0xFF,kAVCSignalModeMask_50 = 0x80,kAVCSignalModeMask_STYPE = 0x7C,kAVCSignalModeMask_SDL = 0x4,kAVCSignalModeMask_DVCPro25 = 0x78,};
typedef IOBlitCursorStruct IOBlitCursor;
typedef IOBlitVertexStruct IOBlitVertex;
enum IOCSRKeyType {kCSRImmediateKeyType = 0x0,kCSROffsetKeyType = 0x1,kCSRLeafKeyType = 0x2,kCSRDirectoryKeyType = 0x3,kInvalidCSRROMEntryType = 0xFF,};
struct IOFWWorkLoop;
struct IONamedValue {int value; char *name;};
struct IOPCIAERRoot;
typedef struct _IOSimpleLock IOSimpleLock;
struct IOStatistics {};
enum IOStreamMode {kIOStreamModeInput = 0x0,kIOStreamModeOutput = 0x1,kIOStreamModeInputOutput = 0x2,};
typedef void (*IOThreadFunc)(void *);
enum MACRO_AF_IPX {AF_IPX = 23,AF_SIP = 24,};
enum MACRO_ARPHRD {ARPHRD_ETHER = 1,ARPHRD_IEEE802 = 6,ARPHRD_FRELAY = 15,ARPHRD_IEEE1394 = 24,ARPHRD_IEEE1394_EUI64 = 27,};
enum MACRO_B14400 {B14400 = 14400,};
enum MACRO_B19200 {B19200 = 19200,};
enum MACRO_B28800 {B28800 = 28800,};
enum MACRO_B38400 {B38400 = 38400,};
enum MACRO_B57600 {B57600 = 57600,};
enum MACRO_B76800 {B76800 = 76800,};
enum MACRO_BLKDEV {BLKDEV_IOSIZE = 2048,};
enum MACRO_BPF_LD {BPF_LD = 0x0,BPF_LDX = 0x1,BPF_ST = 0x2,BPF_STX = 0x3,BPF_ALU = 0x4,BPF_JMP = 0x5,BPF_RET = 0x6,BPF_MISC = 0x7,BPF_W = 0x0,BPF_H = 0x8,BPF_B = 0x10,BPF_IMM = 0x0,BPF_ABS = 0x20,BPF_IND = 0x40,BPF_MEM = 0x60,BPF_LEN = 0x80,BPF_MSH = 0xA0,BPF_ADD = 0x0,BPF_SUB = 0x10,BPF_MUL = 0x20,BPF_DIV = 0x30,BPF_OR = 0x40,BPF_AND = 0x50,BPF_LSH = 0x60,BPF_RSH = 0x70,BPF_NEG = 0x80,BPF_JA = 0x0,BPF_JEQ = 0x10,BPF_JGT = 0x20,BPF_JGE = 0x30,BPF_JSET = 0x40,BPF_K = 0x0,BPF_X = 0x8,BPF_A = 0x10,BPF_TAX = 0x0,BPF_TXA = 0x80,BPF_MEMWORDS = 0x10,};
enum MACRO_CACHED {CACHED_RIGHT_INFINITE_TTL = -1,};
enum MACRO_CBLOCK {CBLOCK = 64,MAXBSIZE = 1048576,};
enum MACRO_CCDRBG {CCDRBG_MAX_ENTROPY_SIZE = 65536,CCDRBG_MAX_ADDITIONALINPUT_SIZE = 65536,CCDRBG_MAX_PSINPUT_SIZE = 65536,CCDRBG_MAX_REQUEST_SIZE = 65536,CCDRBG_RESEED_INTERVAL = 1073741824,};
enum MACRO_CCMODE {CCMODE_GCM_DECRYPTOR = 78647,CCMODE_GCM_ENCRYPTOR = 4073947,};
enum MACRO_CCSHA1 {CCSHA1_BLOCK_SIZE = 64,CCSHA1_OUTPUT_SIZE = 20,CCSHA1_STATE_SIZE = 20,};
enum MACRO_CC_USE {CC_USE_HEAP_FOR_WORKSPACE = 1,CC_HAS_MEMSET_S = 1,CC_DISABLE_RSAKEYGEN = 0,};
enum MACRO_CERASE {CERASE = 0x7F,};
enum MACRO_CHANGE {TURNSTILE_PRIORITY_CHANGE = 0x1,THREAD_USER_PROMOTION_CHANGE = 0x2,};
enum MACRO_CLSIZE {CLSIZE = 1,};
enum MACRO_CPUMON {CPUMON_MAKE_FATAL = 0x1000,};
enum MACRO_DEVICE {DEVICE_PAGER_GUARDED = 0x1,DEVICE_PAGER_COHERENT = 0x2,DEVICE_PAGER_CACHE_INHIB = 0x4,DEVICE_PAGER_WRITE_THROUGH = 0x8,DEVICE_PAGER_EARLY_ACK = 0x20,DEVICE_PAGER_CONTIGUOUS = 0x100,DEVICE_PAGER_NOPHYSCACHE = 0x200,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,};
enum MACRO_EACCES {EACCES = 13,};
enum MACRO_EAGAIN {EAGAIN = 35,};
enum MACRO_ECHILD {ECHILD = 10,};
enum MACRO_ECHOKE {ECHOKE = 0x1,ECHOE = 0x2,ECHOK = 0x4,ECHONL = 0x10,ECHOPRT = 0x20,ECHOCTL = 0x40,ISIG = 0x80,ICANON = 0x100,ALTWERASE = 0x200,IEXTEN = 0x400,EXTPROC = 0x800,NOKERNINFO = 0x2000000,};
enum MACRO_EDQUOT {EDQUOT = 69,};
enum MACRO_EEXIST {EEXIST = 17,};
enum MACRO_EFAULT {EFAULT = 14,};
enum MACRO_EFTYPE {EFTYPE = 79,};
enum MACRO_EILSEQ {EILSEQ = 92,};
enum MACRO_EINVAL {EINVAL = 22,};
enum MACRO_EISDIR {EISDIR = 21,};
enum MACRO_EMFILE {EMFILE = 24,};
enum MACRO_EMLINK {EMLINK = 31,EPIPE = 32,};
enum MACRO_ENFILE {ENFILE = 23,};
enum MACRO_ENODEV {ENODEV = 19,};
enum MACRO_ENOLCK {ENOLCK = 77,};
enum MACRO_ENOMEM {ENOMEM = 12,};
enum MACRO_ENOMSG {ENOMSG = 91,};
enum MACRO_ENOSPC {ENOSPC = 28,};
enum MACRO_ENOSTR {ENOSTR = 99,};
enum MACRO_ENOSYS {ENOSYS = 78,};
enum MACRO_ENOTTY {ENOTTY = 25,};
enum MACRO_EPROTO {EPROTO = 100,};
enum MACRO_EQFULL {EQFULL = 106,};
enum MACRO_ERANGE {ERANGE = 34,};
enum MACRO_ESPIPE {ESPIPE = 29,};
enum MACRO_ESTALE {ESTALE = 70,};
enum MACRO_EUSERS {EUSERS = 68,};
enum MACRO_EVFILT {EVFILT_READ = -1,EVFILT_WRITE = -2,EVFILT_AIO = -3,EVFILT_VNODE = -4,EVFILT_PROC = -5,EVFILT_SIGNAL = -6,EVFILT_TIMER = -7,EVFILT_MACHPORT = -8,EVFILT_FS = -9,EVFILT_USER = -10,EVFILT_VM = -12,EVFILT_EXCEPT = -15,EVFILT_SYSCOUNT = 17,};
enum MACRO_EV_ADD {EV_ADD = 0x1,EV_DELETE = 0x2,EV_ENABLE = 0x4,EV_DISABLE = 0x8,EV_ONESHOT = 0x10,EV_CLEAR = 0x20,EV_RECEIPT = 0x40,EV_DISPATCH = 0x80,EV_UDATA_SPECIFIC = 0x100,EV_VANISHED = 0x200,EV_SYSFLAGS = 0xF000,EV_FLAG0 = 0x1000,EV_FLAG1 = 0x2000,EV_EOF = 0x8000,EV_ERROR = 0x4000,};
enum MACRO_EXPORT {EXPORT_SYMBOL_FLAGS_KIND_MASK = 0x3,EXPORT_SYMBOL_FLAGS_KIND_REGULAR = 0x0,EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL = 0x1,EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION = 0x4,EXPORT_SYMBOL_FLAGS_REEXPORT = 0x8,EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER = 0x10,};
enum MACRO_EXTENT {ARG1_EXTENT = 1,ARGS2_EXTENT = 2,ARGS3_EXTENT = 4,ARGS4_EXTENT = 4,ARGS5_EXTENT = 8,ARGS6_EXTENT = 8,ARGS7_EXTENT = 8,ARGS8_EXTENT = 8,ARGS9_EXTENT = 12,ARGS10_EXTENT = 12,};
enum MACRO_FLAVOR {FLAVOR_CPU_MONITOR = 1,FLAVOR_CPU_MONITOR_FATAL = 2,FLAVOR_WAKEUPS_MONITOR = 1,FLAVOR_HIGH_WATERMARK = 1,FLAVOR_IO_PHYSICAL_WRITES = 1,FLAVOR_IO_LOGICAL_WRITES = 2,FLAVOR_THREADS_HIGH_WATERMARK = 1,};
enum MACRO_FP_NAN {FP_NAN = 1,FP_INFINITE = 2,FP_ZERO = 3,FP_NORMAL = 4,FP_SUBNORMAL = 5,FP_SUPERNORMAL = 6,FP_ILOGB0 = -2147483648,FP_ILOGBNAN = -2147483648,};
enum MACRO_GETALL {GETALL = 6,};
enum MACRO_GETVAL {GETVAL = 5,};
enum MACRO_GLOBAL {GLOBAL_SHARED_TEXT_SEGMENT = 0x90000000,GLOBAL_SHARED_DATA_SEGMENT = 0xA0000000,GLOBAL_SHARED_SEGMENT_MASK = 0xF0000000,};
enum MACRO_GTRACE {GTRACE_REVISION = 0x2,};
enum MACRO_Gstack {Gstack = 0,};
enum MACRO_ICMPV6 {ICMPV6_PLD_MAXLEN = 1232,};
enum MACRO_IFDATA {IFDATA_GENERAL = 1,IFDATA_LINKSPECIFIC = 2,IFDATA_ADDRS = 3,IFDATA_MULTIADDRS = 4,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,PARMRK = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IXON = 0x200,IXOFF = 0x400,IXANY = 0x800,IMAXBEL = 0x2000,IUTF8 = 0x4000,};
enum MACRO_INADDR {INADDR_ANY = 0,INADDR_BROADCAST = 4294967295,};
enum MACRO_IOBASE {AUDITPIPE_IOBASE = 65,AUDITSDEV_IOBASE = 83,};
enum MACRO_IOCMDQ {IOCMDQ_CLIENT = 1,IOCMDQ_LAT = 2,IOCMDQ_SEMA = 3,IOCMDQ_PSEMA = 4,IOCMDQ_PLOCK = 5,IOCMDQ_ACTION = 6,};
enum MACRO_IOINTC {IOINTC_HANDLER = 1,IOINTC_SPURIOUS = 2,};
enum MACRO_IP6OPT {IP6OPT_PAD1 = 0x0,IP6OPT_PADN = 0x1,IP6OPT_JUMBO = 0xC2,IP6OPT_NSAP_ADDR = 0xC3,IP6OPT_TUNNEL_LIMIT = 0x4,IP6OPT_RTALERT = 0x5,IP6OPT_ROUTER_ALERT = 0x5,IP6OPT_RTALERT_LEN = 0x4,IP6OPT_RTALERT_MLD = 0x0,IP6OPT_RTALERT_RSVP = 0x1,IP6OPT_RTALERT_ACTNET = 0x2,IP6OPT_MINLEN = 0x2,IP6OPT_EID = 0x8A,IP6OPT_TYPE_SKIP = 0x0,IP6OPT_TYPE_DISCARD = 0x40,IP6OPT_TYPE_FORCEICMP = 0x80,IP6OPT_TYPE_ICMP = 0xC0,IP6OPT_MUTABLE = 0x20,IP6OPT_JUMBO_LEN = 0x6,};
enum MACRO_IP6TOS {IP6TOS_CE = 0x1,IP6TOS_ECT = 0x2,};
enum MACRO_IPCOMP {IPCOMP_OUI = 1,IPCOMP_DEFLATE = 2,IPCOMP_LZS = 3,IPCOMP_MAX = 4,IPCOMP_CPI_NEGOTIATE_MIN = 256,};
enum MACRO_IPPORT {IPPORT_USERRESERVED = 5000,IPPORT_HIFIRSTAUTO = 49152,IPPORT_HILASTAUTO = 65535,IPPORT_RESERVEDSTART = 600,};
enum MACRO_IP_MSS {IP_MSS = 576,};
enum MACRO_ITIMER {ITIMER_REAL = 0,ITIMER_VIRTUAL = 1,ITIMER_PROF = 2,};
enum MACRO_KCDATA {KCDATA_DESC_MAXLEN = 32,KCDATA_FLAGS_STRUCT_PADDING_MASK = 15,KCDATA_FLAGS_STRUCT_HAS_PADDING = 128,KCDATA_ALIGNMENT_SIZE = 16,};
enum MACRO_KDEBUG {KDEBUG_ENABLE_TRACE = 1,KDEBUG_ENABLE_ENTROPY = 2,KDEBUG_ENABLE_CHUD = 4,KDEBUG_ENABLE_PPT = 8,KDEBUG_ENABLE_SERIAL = 16,KDEBUG_LEVEL_NONE = 0,KDEBUG_LEVEL_IST = 1,KDEBUG_LEVEL_STANDARD = 2,KDEBUG_LEVEL_FULL = 3,};
enum MACRO_KERNEL {KERNEL_HAVE_CS_CODEDIRECTORY = 1,KERNEL_CS_CODEDIRECTORY_HAVE_PLATFORM = 1,KERNEL_HAVE_CS_GENERICBLOB = 1,};
enum MACRO_KEVENT {KEVENT_FLAG_NONE = 0x0,KEVENT_FLAG_IMMEDIATE = 0x1,KEVENT_FLAG_ERROR_EVENTS = 0x2,};
enum MACRO_LEDGER {LEDGER_ITEM_INFINITY = 4294967295,LEDGER_LIMIT_INFINITY = 9223372036854775807,};
enum MACRO_LOOKUP {LOOKUP = 0,CREATE = 1,DELETE = 2,};
enum MACRO_MAXPRI {MAXPRI = 127,};
enum MACRO_MAXTTL {MAXTTL = 255,};
enum MACRO_MEMORY {MEMORY_OBJECT_NULL = 0,MEMORY_OBJECT_CONTROL_NULL = 0,MEMORY_OBJECT_NAME_NULL = 0,MEMORY_OBJECT_DEFAULT_NULL = 0,MEMORY_OBJECT_COPY_NONE = 0,MEMORY_OBJECT_COPY_CALL = 1,MEMORY_OBJECT_COPY_DELAY = 2,MEMORY_OBJECT_COPY_TEMPORARY = 3,MEMORY_OBJECT_COPY_SYMMETRIC = 4,MEMORY_OBJECT_COPY_INVALID = 5,MEMORY_OBJECT_RETURN_NONE = 0,MEMORY_OBJECT_RETURN_DIRTY = 1,MEMORY_OBJECT_RETURN_ALL = 2,MEMORY_OBJECT_RETURN_ANYTHING = 3,MEMORY_OBJECT_DATA_FLUSH = 1,MEMORY_OBJECT_DATA_NO_CHANGE = 2,MEMORY_OBJECT_DATA_PURGE = 4,MEMORY_OBJECT_COPY_SYNC = 8,MEMORY_OBJECT_DATA_SYNC = 16,MEMORY_OBJECT_IO_SYNC = 32,MEMORY_OBJECT_DATA_FLUSH_ALL = 64,MEMORY_OBJECT_INFO_MAX = 1024,MEMORY_OBJECT_PERFORMANCE_INFO = 11,MEMORY_OBJECT_ATTRIBUTE_INFO = 14,MEMORY_OBJECT_BEHAVIOR_INFO = 15,MEMORY_OBJECT_TERMINATE_IDLE = 1,MEMORY_OBJECT_RESPECT_CACHE = 2,MEMORY_OBJECT_RELEASE_NO_OP = 4,};
enum MACRO_MINSEC {MINSEC = 256,MAXSEC = 2048,};
enum MACRO_MSGMNB {MSGMNB = 2048,};
enum MACRO_MSGMNI {MSGMNI = 40,};
enum MACRO_MSGSSZ {MSGSSZ = 8,MSGSEG = 2048,};
enum MACRO_MSGTQL {MSGTQL = 40,};
enum MACRO_NBYTES {CCPOLY1305_TAG_NBYTES = 16,CCCHACHA20POLY1305_TEXT_MAX_NBYTES = 274877906880,};
enum MACRO_NETSVC {NETSVC_MRKNG_UNKNOWN = 0,NETSVC_MRKNG_LVL_L2 = 1,NETSVC_MRKNG_LVL_L3L2_ALL = 2,NETSVC_MRKNG_LVL_L3L2_BK = 3,};
enum MACRO_NET_RT {NET_RT_DUMP = 1,NET_RT_FLAGS = 2,NET_RT_IFLIST = 3,NET_RT_STAT = 4,NET_RT_TRASH = 5,NET_RT_IFLIST2 = 6,NET_RT_DUMP2 = 7,NET_RT_FLAGS_PRIV = 10,NET_RT_MAXID = 11,};
enum MACRO_NOCRED {NOCRED = 0,FSCRED = -1,};
enum MACRO_OPMASK {OPMASK = 3,FOLLOW = 64,ISDOTDOT = 8192,MAKEENTRY = 16384,ISLASTCN = 32768,};
enum MACRO_PF_KEY {PF_KEY_V2 = 2,};
enum MACRO_POLICY {POLICY_NULL = 0,POLICY_TIMESHARE = 1,POLICY_RR = 2,POLICY_FIFO = 4,};
enum MACRO_PPAUSE {PPAUSE = 40,};
enum MACRO_PRAGMA {PRAGMA_STRUCT_ALIGN = 1,};
enum MACRO_REBASE {REBASE_TYPE_POINTER = 1,REBASE_TYPE_TEXT_ABSOLUTE32 = 2,REBASE_TYPE_TEXT_PCREL32 = 3,REBASE_OPCODE_MASK = 240,REBASE_IMMEDIATE_MASK = 15,REBASE_OPCODE_DONE = 0,REBASE_OPCODE_SET_TYPE_IMM = 16,REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 32,REBASE_OPCODE_ADD_ADDR_ULEB = 48,REBASE_OPCODE_ADD_ADDR_IMM_SCALED = 64,REBASE_OPCODE_DO_REBASE_IMM_TIMES = 80,REBASE_OPCODE_DO_REBASE_ULEB_TIMES = 96,REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB = 112,REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB = 128,};
enum MACRO_RENAME {RENAME = 3,};
enum MACRO_RLIMIT {RLIMIT_CPU = 0,RLIMIT_FSIZE = 1,RLIMIT_DATA = 2,RLIMIT_STACK = 3,RLIMIT_CORE = 4,RLIMIT_AS = 5,RLIMIT_MEMLOCK = 6,RLIMIT_NPROC = 7,RLIMIT_NOFILE = 8,};
enum MACRO_RUSAGE {RUSAGE_SELF = 0,RUSAGE_CHILDREN = -1,RUSAGE_INFO_V0 = 0,RUSAGE_INFO_V1 = 1,RUSAGE_INFO_V2 = 2,RUSAGE_INFO_V3 = 3,RUSAGE_INFO_V4 = 4,};
enum MACRO_SCOPE6 {SCOPE6_ID_MAX = 16,};
enum MACRO_SETALL {SETALL = 9,};
enum MACRO_SHARED {SHARED_TEXT_REGION_SIZE = 0x10000000,SHARED_DATA_REGION_SIZE = 0x10000000,SHARED_ALTERNATE_LOAD_BASE = 0x9000000,SHARED_TEXT_REGION_MASK = 0xFFFFFFF,SHARED_DATA_REGION_MASK = 0xFFFFFFF,};
enum MACRO_SHMLBA {SHMLBA = 4096,};
enum MACRO_SIGBUS {SIGBUS = 10,};
enum MACRO_SIGEMT {SIGEMT = 7,SIGFPE = 8,};
enum MACRO_SIGHUP {SIGHUP = 1,SIGINT = 2,};
enum MACRO_SIGSYS {SIGSYS = 12,};
enum MACRO_SRCHFS {SRCHFS_START = 0x1,SRCHFS_MATCHPARTIALNAMES = 0x2,SRCHFS_MATCHDIRS = 0x4,SRCHFS_MATCHFILES = 0x8,SRCHFS_SKIPLINKS = 0x10,SRCHFS_SKIPINVISIBLE = 0x20,SRCHFS_SKIPPACKAGES = 0x40,SRCHFS_SKIPINAPPROPRIATE = 0x80,SRCHFS_NEGATEPARAMS = 0x80000000,SRCHFS_VALIDOPTIONSMASK = 0x800000FF,};
enum MACRO_SYSCTL {SYSCTL_OID_VERSION = 1,SYSCTL_SKMEM = 0,};
enum MACRO_SYSTEM {SYSTEM_REGION_BACKED = 0x2,};
enum MACRO_S_ATTR {S_ATTR_PURE_INSTRUCTIONS = 0x80000000,S_ATTR_NO_TOC = 0x40000000,S_ATTR_STRIP_STATIC_SYMS = 0x20000000,S_ATTR_NO_DEAD_STRIP = 0x10000000,S_ATTR_LIVE_SUPPORT = 0x8000000,S_ATTR_SELF_MODIFYING_CODE = 0x4000000,S_ATTR_DEBUG = 0x2000000,};
enum MACRO_TANDEM {TANDEM = 0x1,CBREAK = 0x2,LCASE = 0x4,ECHO = 0x8,CRMOD = 0x10,RAW = 0x20,ODDP = 0x40,EVENP = 0x80,};
enum MACRO_TCPOPT {TCPOPT_EOL = 0,TCPOPT_NOP = 1,TCPOPT_MAXSEG = 2,};
enum MACRO_THREAD {THREAD_STATE_NONE = 13,};
enum MACRO_TH_FIN {TH_FIN = 0x1,TH_SYN = 0x2,TH_RST = 0x4,TH_PUSH = 0x8,TH_ACK = 0x10,TH_URG = 0x20,TH_ECE = 0x40,TH_CWR = 0x80,};
enum MACRO_UDPCTL {UDPCTL_CHECKSUM = 1,UDPCTL_STATS = 2,UDPCTL_MAXDGRAM = 3,UDPCTL_RECVSPACE = 4,UDPCTL_PCBLIST = 5,UDPCTL_MAXID = 6,};
enum MACRO_ULLONG {ULLONG_MAX = 0xFFFFFFFFFFFFFFFF,LLONG_MAX = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_VDSUSP {VDSUSP = 11,};
enum MACRO_VERASE {VERASE = 3,VWERASE = 4,};
enum MACRO_VLNEXT {VLNEXT = 14,};
enum MACRO_VM_MAP {VM_MAP_NULL = 0,UPL_NULL = 0,VM_NAMED_ENTRY_NULL = 0,};
enum MACRO_VNOVAL {VNOVAL = -1,};
enum MACRO_VSTART {VSTART = 12,};
enum MACRO_VWRITE {VWRITE = 0x80,};
enum MACRO_WINDOW {TCPOPT_WINDOW = 3,TCPOLEN_WINDOW = 3,};
enum MACRO_XUCRED {XUCRED_VERSION = 0,};
enum MACRO_ZALLOC {ZALLOC_ZCRAM = 0x0,};
enum MACRO__POSIX {_POSIX_VERSION = 200112,_POSIX2_VERSION = 200112,};
enum MACRO___GNUC {__GNUC_VA_LIST = 1,};
enum MACRO___IMG4 {__IMG4_INDIRECT = 1,};
enum MACRO___STDC {__STDC_WANT_LIB_EXT1__ = 1,};
enum MACRO___TVOS {__TVOS_9_0 = 90000,__TVOS_9_1 = 90100,__TVOS_9_2 = 90200,__TVOS_10_0 = 100000,__TVOS_10_0_1 = 100001,__TVOS_10_1 = 100100,__TVOS_10_2 = 100200,};
enum MACRO___bool {__bool_true_false_are_defined = 1,};
enum MACRO_ktrace {ktrace_background_MSG_COUNT = 1,};
enum MACRO_memory {memory_entry_MSG_COUNT = 2,memory_object_control_MSG_COUNT = 12,memory_object_default_MSG_COUNT = 1,};
enum MACRO_pseudo {pseudo_AF_XTP = 19,};
struct NDR_record_t {unsigned char mig_vers;unsigned char if_vers;unsigned char reserved1;unsigned char mig_encoding;unsigned char int_rep;unsigned char char_rep;unsigned char float_rep;unsigned char reserved2;};
typedef evsioKeymapping NXKeyMapping;
struct OSArray_vtbl; 
typedef IORegistryIterator *RegEntryIter;
enum SCSITaskMode {kSCSITaskMode_CommandExecution = 0x1,kSCSITaskMode_Autosense = 0x2,};
typedef VDDefMode *VDDefModePtr;
typedef VDFlagRecord *VDFlagRecPtr;
struct __lck_attr__;
struct __lck_rw_t__;
typedef int alarm_type_t;
enum ataEventCode {kATANullEvent = 0x0,kATAOnlineEvent = 0x1,kATAOfflineEvent = 0x2,kATARemovedEvent = 0x3,kATAResetEvent = 0x4,kATAOfflineRequest = 0x5,kATAEjectRequest = 0x6,kATAPIResetEvent = 0x7,kATAReservedEvent = 0x80,};
typedef long long atomic_llong;
typedef char atomic_schar;
typedef short atomic_short;
typedef char atomic_uchar;
typedef int atomic_ulong;
typedef unsigned char au_ctlmode_t;
typedef au_session au_session_t;
typedef auditpinfo auditpinfo_t;
enum cache_type_t {Lnone = 0x0,L1I = 0x1,L1D = 0x2,L2U = 0x3,L3U = 0x4,LCACHE_MAX = 0x5,};
typedef cccmac_ctx *cccmac_ctx_t;
struct ccdrbg_state;
typedef cchmac_ctx *cchmac_ctx_t;
typedef  cczp *cczp_const_t;
typedef int *clock_attr_t;
typedef clock *clock_ctrl_t;
typedef clock *clock_serv_t;
typedef ether_addr ether_addr_t;
typedef diskextent extentrecord[8];
typedef fp_control fp_control_t;
typedef fpunchhole fpunchhole_t;
typedef char *gssd_dstring;
enum img4_flags_t {I4F_INIT = 0x0,I4F_TRUST_MANIFEST = 0x1,I4F_FORCE_MIXNMATCH = 0x2,};
typedef char *io_buf_ptr_t;
struct ip6_moptions;
typedef ipc_object *ipc_object_t;
typedef ucred *kauth_cred_t;
typedef void *kern_ctl_ref;
struct kxld_context;
enum memory_order {memory_order_relaxed = 0x0,memory_order_consume = 0x1,memory_order_acquire = 0x2,memory_order_release = 0x3,memory_order_acq_rel = 0x4,memory_order_seq_cst = 0x5,};
typedef mig_symtab mig_symtab_t;
typedef posix_cred *posix_cred_t;
typedef queue_entry queue_head_t;
typedef sf_mapping sf_mapping_t;
typedef int sig_atomic_t;
typedef int sleep_type_t;
typedef thread *thread_act_t;
struct thread_group;
typedef time_value time_value_t;
typedef ucontext64 ucontext64_t;
typedef unsigned int vm_inherit_t;
struct vnodeop_desc;
typedef void *xpc_object_t;
struct AnchorTable;
typedef DCLCallProcStruct DCLCallProc;
typedef GammaTbl *GammaTblPtr;
typedef unsigned int IOAlignment;
typedef OpaqueIOCommandID *IOCommandID;
enum IODirection {kIODirectionNone = 0x0,kIODirectionIn = 0x1,kIODirectionOut = 0x2,kIODirectionOutIn = 0x3,kIODirectionInOut = 0x3,kIODirectionPrepareToPhys32 = 0x4,kIODirectionPrepareNoFault = 0x8,kIODirectionPrepareReserved1 = 0x10,kIODirectionPrepareNonCoherent = 0x20,kIODirectionCompleteWithError = 0x40,kIODirectionCompleteWithDataValid = 0x80,};
struct IOI2CBuffer;
enum IOLockState {kIOLockStateUnlocked = 0x0,kIOLockStateLocked = 0x1,};
struct IOMbufQueue;
struct IOServicePM;
struct IOUSBDevice;
struct IOWorkQueue;
typedef struct kxld_context KXLDContext;
enum MACRO_APPLE {APPLE_KEXT_ASSERTIONS = 0,};
enum MACRO_ARPOP {ARPOP_REQUEST = 1,ARPOP_REPLY = 2,ARPOP_REVREQUEST = 3,ARPOP_REVREPLY = 4,ARPOP_INVREQUEST = 8,ARPOP_INVREPLY = 9,};
enum MACRO_AUDIT {AUDIT_RECORD_MAGIC = 0x828A0F1B,};
enum MACRO_AU_FS {AU_FS_MINFREE = 20,AU_IPv4 = 4,AU_IPv6 = 16,AU_CLASS_MASK_RESERVED = 268435456,};
enum MACRO_B1200 {B1200 = 1200,};
enum MACRO_B1800 {B1800 = 1800,};
enum MACRO_B2400 {B2400 = 2400,};
enum MACRO_B4800 {B4800 = 4800,};
enum MACRO_B7200 {B7200 = 7200,};
enum MACRO_B9600 {B9600 = 9600,};
enum MACRO_BLOCK {BLOCK_DESCRIPTOR_1 = 1,BLOCK_DESCRIPTOR_2 = 1,BLOCK_DESCRIPTOR_3 = 1,};
enum MACRO_BOOTP {BOOTP_MIN_BACKOFF = 0x7FF,BOOTP_MAX_BACKOFF = 0xFFFF,BOOTP_RETRY = 0x6,};
enum MACRO_BSD_0 {BSD = 199506,};
enum MACRO_CCAES {CCAES_ARM_ASM = 0,CCAES_INTEL_ASM = 1,CCAES_MUX = 0,};
enum MACRO_CCDER {CCDER_MULTIBYTE_TAGS = 1,CCDER_TAG_MASK = 4294967295,};
enum MACRO_CCDES {CCDES_BLOCK_SIZE = 8,CCDES_KEY_SIZE = 8,};
enum MACRO_CCGCM {CCGCM_IV_NBYTES = 12,CCGCM_BLOCK_NBYTES = 16,CCGCM_TEXT_MAX_NBYTES = 68719476704,};
enum MACRO_CCMD5 {CCMD5_BLOCK_SIZE = 64,CCMD5_OUTPUT_SIZE = 16,CCMD5_STATE_SIZE = 16,};
enum MACRO_CCRSA {CCRSA_KEYGEN_MAX_NBITS = 8192,CCRSA_PKCS1_PAD_SIGN = 1,CCRSA_PKCS1_PAD_ENCRYPT = 2,};
enum MACRO_CLOCK {SYSTEM_CLOCK = 0,CALENDAR_CLOCK = 1,REALTIME_CLOCK = 0,};
enum MACRO_CMASK {CMASK = 0x12,};
enum MACRO_COUNT {host_security_MSG_COUNT = 2,lock_set_MSG_COUNT = 6,mach_exc_MSG_COUNT = 3,mach_host_MSG_COUNT = 35,mach_port_MSG_COUNT = 37,notify_MSG_COUNT = 9,processor_MSG_COUNT = 6,processor_set_MSG_COUNT = 10,};
enum MACRO_CPUID {CPUID_CACHE_SIZE = 16,CPUID_MODEL_PENRYN = 23,CPUID_MODEL_NEHALEM = 26,CPUID_MODEL_FIELDS = 30,CPUID_MODEL_DALES = 31,CPUID_MODEL_NEHALEM_EX = 46,CPUID_MODEL_DALES_32NM = 37,CPUID_MODEL_WESTMERE = 44,CPUID_MODEL_WESTMERE_EX = 47,CPUID_MODEL_SANDYBRIDGE = 42,CPUID_MODEL_JAKETOWN = 45,CPUID_MODEL_IVYBRIDGE = 58,CPUID_MODEL_IVYBRIDGE_EP = 62,CPUID_MODEL_CRYSTALWELL = 70,CPUID_MODEL_HASWELL = 60,CPUID_MODEL_HASWELL_EP = 63,CPUID_MODEL_HASWELL_ULT = 69,CPUID_MODEL_BROADWELL = 61,CPUID_MODEL_BROADWELL_ULX = 61,CPUID_MODEL_BROADWELL_ULT = 61,CPUID_MODEL_BRYSTALWELL = 71,CPUID_MODEL_SKYLAKE = 78,CPUID_MODEL_SKYLAKE_ULT = 78,CPUID_MODEL_SKYLAKE_ULX = 78,CPUID_MODEL_SKYLAKE_DT = 94,CPUID_MODEL_SKYLAKE_W = 85,CPUID_MODEL_KABYLAKE = 142,CPUID_MODEL_KABYLAKE_ULT = 142,CPUID_MODEL_KABYLAKE_ULX = 142,CPUID_MODEL_KABYLAKE_DT = 158,CPUID_VMM_FAMILY_UNKNOWN = 0,CPUID_VMM_FAMILY_VMWARE = 1,CPUID_VMM_FAMILY_PARALLELS = 2,};
enum MACRO_CTIME {CTIME = 0,};
enum MACRO_DEBUG {DEBUG_LEVEL = 3,};
enum MACRO_DEVFS {DEVFS_CHAR = 0,DEVFS_BLOCK = 1,DEVFS_CLONE_ALLOC = 1,DEVFS_CLONE_FREE = 0,};
enum MACRO_E2BIG {E2BIG = 7,ENOEXEC = 8,};
enum MACRO_EAUTH {EAUTH = 80,};
enum MACRO_EBADF {EBADF = 9,};
enum MACRO_EFBIG {EFBIG = 27,};
enum MACRO_EIDRM {EIDRM = 90,};
enum MACRO_ELAST {ELAST = 106,};
enum MACRO_ELOOP {ELOOP = 62,};
enum MACRO_ENOSR {ENOSR = 98,};
enum MACRO_ENXIO {ENXIO = 6,};
enum MACRO_EPERM {EPERM = 1,ENOENT = 2,};
enum MACRO_EROFS {EROFS = 30,};
enum MACRO_ESRCH {ESRCH = 3,EINTR = 4,};
enum MACRO_ETHER {ETHER_ADDR_LEN = 6,ETHER_TYPE_LEN = 2,ETHER_CRC_LEN = 4,ETHER_MIN_LEN = 64,ETHER_MAX_LEN = 1518,ETHER_ALIGN = 2,};
enum MACRO_ETIME {ETIME = 101,};
enum MACRO_EVENT {EVENT_SYSTEM_VERSION = 2,};
enum MACRO_EV_FD {EV_FD = 1,EV_RE = 1,EV_WR = 2,EV_EX = 4,EV_RM = 8,EV_MASK = 15,EV_RBYTES = 256,EV_WBYTES = 512,EV_RCLOSED = 1024,EV_RCONN = 2048,EV_WCLOSED = 4096,EV_WCONN = 8192,EV_OOB = 16384,EV_FIN = 32768,EV_RESET = 65536,EV_TIMEOUT = 131072,EV_DMASK = -256,};
enum MACRO_EXDEV {EXDEV = 18,};
enum MACRO_FALSE {FALSE = 0,};
enum MACRO_FCNTL {FCNTL_FS_SPECIFIC_BASE = 0x10000,};
enum MACRO_FIRST {FIRST_EXCEPTION = 1,};
enum MACRO_FMARK {FMARK = 0x1000,FDEFER = 0x2000,FHASLOCK = 0x4000,};
enum MACRO_FP_NO {FP_NO = 0,FP_SOFT = 1,FP_287 = 2,FP_387 = 3,FP_FXSR = 4,};
enum MACRO_FREAD {FREAD = 0x1,FWRITE = 0x2,};
enum MACRO_FSOPT {FSOPT_NOFOLLOW = 0x1,FSOPT_NOINMEMUPDATE = 0x2,FSOPT_REPORT_FULLSIZE = 0x4,FSOPT_PACK_INVAL_ATTRS = 0x8,FSOPT_ATTR_CMN_EXTENDED = 0x20,};
enum MACRO_GUARD {GUARD_TYPE_MACH_PORT = 0x1,};
enum MACRO_ICMP6 {ICMP6_FILTER = 18,};
enum MACRO_IFCAP {IFCAP_RXCSUM = 0x1,IFCAP_TXCSUM = 0x2,IFCAP_VLAN_MTU = 0x4,IFCAP_VLAN_HWTAGGING = 0x8,IFCAP_JUMBO_MTU = 0x10,IFCAP_TSO4 = 0x20,IFCAP_TSO6 = 0x40,IFCAP_LRO = 0x80,IFCAP_AV = 0x100,IFCAP_TXSTATUS = 0x200,IFCAP_SKYWALK = 0x400,IFCAP_HW_TIMESTAMP = 0x800,IFCAP_SW_TIMESTAMP = 0x1000,IFCAP_CSUM_PARTIAL = 0x2000,IFCAP_CSUM_ZERO_INVERT = 0x4000,};
enum MACRO_IFLOW {CRTS_IFLOW = 0x20000,CDTR_IFLOW = 0x40000,};
enum MACRO_IFMIB {IFMIB_SYSTEM = 1,IFMIB_IFDATA = 2,IFMIB_IFALLDATA = 3,};
enum MACRO_IFNET {IFNET_SLOWHZ = 1,};
enum MACRO_IMGPF {IMGPF_NONE = 0x0,IMGPF_INTERPRET = 0x1,IMGPF_RESERVED = 0x2,IMGPF_WAS_64BIT_ADDR = 0x4,IMGPF_IS_64BIT_ADDR = 0x8,IMGPF_SPAWN = 0x10,IMGPF_DISABLE_ASLR = 0x20,IMGPF_ALLOW_DATA_EXEC = 0x40,IMGPF_VFORK_EXEC = 0x80,IMGPF_EXEC = 0x100,IMGPF_HIGH_BITS_ASLR = 0x200,IMGPF_IS_64BIT_DATA = 0x400,};
enum MACRO_INET6 {INET6_ADDRSTRLEN = 46,};
enum MACRO_IOKIT {IOKIT = 1,};
enum MACRO_IOPOL {IOPOL_TYPE_DISK = 0,IOPOL_TYPE_VFS_ATIME_UPDATES = 2,IOPOL_SCOPE_PROCESS = 0,IOPOL_SCOPE_THREAD = 1,IOPOL_SCOPE_DARWIN_BG = 2,IOPOL_DEFAULT = 0,IOPOL_IMPORTANT = 1,IOPOL_PASSIVE = 2,IOPOL_THROTTLE = 3,IOPOL_UTILITY = 4,IOPOL_STANDARD = 5,IOPOL_ATIME_UPDATES_DEFAULT = 0,IOPOL_ATIME_UPDATES_OFF = 1,};
enum MACRO_IPCTL {IPCTL_FORWARDING = 1,IPCTL_SENDREDIRECTS = 2,IPCTL_DEFTTL = 3,IPCTL_RTEXPIRE = 5,IPCTL_RTMINEXPIRE = 6,IPCTL_RTMAXCACHE = 7,IPCTL_SOURCEROUTE = 8,IPCTL_DIRECTEDBROADCAST = 9,IPCTL_INTRQMAXLEN = 10,IPCTL_INTRQDROPS = 11,IPCTL_STATS = 12,IPCTL_ACCEPTSOURCEROUTE = 13,IPCTL_FASTFORWARDING = 14,IPCTL_KEEPFAITH = 15,IPCTL_GIF_TTL = 16,IPCTL_MAXID = 17,};
enum MACRO_IPOPT {IPOPT_CONTROL = 0x0,IPOPT_RESERVED1 = 0x20,IPOPT_DEBMEAS = 0x40,IPOPT_RESERVED2 = 0x60,IPOPT_EOL = 0x0,IPOPT_NOP = 0x1,IPOPT_RR = 0x7,IPOPT_TS = 0x44,IPOPT_SECURITY = 0x82,IPOPT_LSRR = 0x83,IPOPT_SATID = 0x88,IPOPT_SSRR = 0x89,IPOPT_RA = 0x94,IPOPT_OPTVAL = 0x0,IPOPT_OLEN = 0x1,IPOPT_OFFSET = 0x2,IPOPT_MINOFF = 0x4,IPOPT_TS_TSONLY = 0x0,IPOPT_TS_TSANDADDR = 0x1,IPOPT_TS_PRESPEC = 0x3,IPOPT_SECUR_UNCLASS = 0x0,IPOPT_SECUR_CONFID = 0xF135,IPOPT_SECUR_EFTO = 0x789A,IPOPT_SECUR_MMMM = 0xBC4D,IPOPT_SECUR_RESTR = 0xAF13,IPOPT_SECUR_SECRET = 0xD788,IPOPT_SECUR_TOPSECRET = 0x6BC5,};
enum MACRO_IPPOF {IPPOF_MCAST_OPTS = 0x1,};
enum MACRO_IPSEC {IPSEC_PORT_ANY = 0,IPSEC_ULPROTO_ANY = 255,IPSEC_PROTO_ANY = 255,IPSEC_MODE_ANY = 0,IPSEC_MODE_TRANSPORT = 1,IPSEC_MODE_TUNNEL = 2,IPSEC_DIR_ANY = 0,IPSEC_DIR_INBOUND = 1,IPSEC_DIR_OUTBOUND = 2,IPSEC_DIR_MAX = 3,IPSEC_DIR_INVALID = 4,IPSEC_POLICY_DISCARD = 0,IPSEC_POLICY_NONE = 1,IPSEC_POLICY_IPSEC = 2,IPSEC_POLICY_ENTRUST = 3,IPSEC_POLICY_BYPASS = 4,IPSEC_POLICY_GENERATE = 5,IPSEC_LEVEL_DEFAULT = 0,IPSEC_LEVEL_USE = 1,IPSEC_LEVEL_REQUIRE = 2,IPSEC_LEVEL_UNIQUE = 3,IPSEC_MANUAL_REQID_MAX = 16383,IPSEC_REPLAYWSIZE = 32,};
enum MACRO_IPTOS {IPTOS_LOWDELAY = 0x10,IPTOS_THROUGHPUT = 0x8,IPTOS_RELIABILITY = 0x4,IPTOS_MINCOST = 0x2,IPTOS_CE = 0x1,IPTOS_ECT = 0x2,IPTOS_DSCP_SHIFT = 0x2,IPTOS_ECN_NOTECT = 0x0,IPTOS_ECN_ECT1 = 0x1,IPTOS_ECN_ECT0 = 0x2,IPTOS_ECN_CE = 0x3,IPTOS_ECN_MASK = 0x3,IPTOS_PREC_NETCONTROL = 0xE0,IPTOS_PREC_INTERNETCONTROL = 0xC0,IPTOS_PREC_CRITIC_ECP = 0xA0,IPTOS_PREC_FLASHOVERRIDE = 0x80,IPTOS_PREC_FLASH = 0x60,IPTOS_PREC_IMMEDIATE = 0x40,IPTOS_PREC_PRIORITY = 0x20,IPTOS_PREC_ROUTINE = 0x0,};
enum MACRO_IP_RF {IP_RF = 0x8000,IP_DF = 0x4000,IP_MF = 0x2000,IP_OFFMASK = 0x1FFF,IP_MAXPACKET = 0xFFFF,};
enum MACRO_KAUTH {KAUTH_GUID_SIZE = 16,};
enum MACRO_KPERF {KPERF_PET_DEFAULT_IDLE_RATE = 15,};
enum MACRO_LLONG {LLONG_MIN = 0x8000000000000000,};
enum MACRO_LOCAL {LOCAL_PEERCRED = 0x1,LOCAL_PEERPID = 0x2,LOCAL_PEEREPID = 0x3,LOCAL_PEERUUID = 0x4,LOCAL_PEEREUUID = 0x5,};
enum MACRO_MACOS {MACOS_PANIC_HEADER_CURRENT_VERSION = 2,MACOS_PANIC_MAGIC = 1145390404,MACOS_PANIC_HEADER_FLAG_NESTED_PANIC = 1,MACOS_PANIC_HEADER_FLAG_COPROC_INITIATED_PANIC = 2,MACOS_PANIC_HEADER_FLAG_STACKSHOT_SUCCEEDED = 4,MACOS_PANIC_HEADER_FLAG_STACKSHOT_DATA_COMPRESSED = 8,MACOS_PANIC_HEADER_FLAG_STACKSHOT_FAILED_DEBUGGERSYNC = 16,MACOS_PANIC_HEADER_FLAG_STACKSHOT_FAILED_ERROR = 32,MACOS_PANIC_HEADER_FLAG_STACKSHOT_FAILED_INCOMPLETE = 64,MACOS_PANIC_HEADER_FLAG_STACKSHOT_FAILED_NESTED = 128,MACOS_PANIC_HEADER_FLAG_COREDUMP_COMPLETE = 256,MACOS_PANIC_HEADER_FLAG_COREDUMP_FAILED = 512,MACOS_PANIC_HEADER_FLAG_STACKSHOT_KERNEL_ONLY = 1024,};
enum MACRO_MATTR {MATTR_CACHE = 1,MATTR_MIGRATE = 2,MATTR_REPLICATE = 4,MATTR_VAL_OFF = 0,MATTR_VAL_ON = 1,MATTR_VAL_GET = 2,MATTR_VAL_CACHE_FLUSH = 6,MATTR_VAL_DCACHE_FLUSH = 7,MATTR_VAL_ICACHE_FLUSH = 8,MATTR_VAL_CACHE_SYNC = 9,MATTR_VAL_GET_INFO = 10,};
enum MACRO_MAXTC {MAXTC = 10,};
enum MACRO_MCAST {MCAST_JOIN_GROUP = 80,MCAST_LEAVE_GROUP = 81,MCAST_JOIN_SOURCE_GROUP = 82,MCAST_LEAVE_SOURCE_GROUP = 83,MCAST_BLOCK_SOURCE = 84,MCAST_UNBLOCK_SOURCE = 85,};
enum MACRO_MLDV2 {MLDV2_LISTENER_REPORT = 143,};
enum MACRO_NFSV3 {NFSV3_MAX_FH_SIZE = 64,};
enum MACRO_NODEV {NODEV = -1,};
enum MACRO_NZERO {NZERO = 0,MAXCOMLEN = 16,MAXINTERP = 64,};
enum MACRO_N_KEV {N_KEV_VECTORS = 5,};
enum MACRO_OFLOW {CDSR_OFLOW = 0x80000,CCAR_OFLOW = 0x100000,};
enum MACRO_OPOST {OPOST = 0x1,ONLCR = 0x2,OXTABS = 0x4,ONOEOT = 0x8,OCRNL = 0x10,ONOCR = 0x20,ONLRET = 0x40,OFILL = 0x80,NLDLY = 0x300,TABDLY = 0xC04,CRDLY = 0x3000,FFDLY = 0x4000,BSDLY = 0x8000,VTDLY = 0x10000,OFDEL = 0x20000,};
enum MACRO_PANIC {PANIC_FLUSH_BOUNDARY = 16,};
enum MACRO_PFKEY {PFKEY_SOFT_LIFETIME_RATE = 80,};
enum MACRO_PLOCK {PLOCK = 36,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_POSIX {POSIX_MADV_NORMAL = 0,POSIX_MADV_RANDOM = 1,POSIX_MADV_SEQUENTIAL = 2,POSIX_MADV_WILLNEED = 3,POSIX_MADV_DONTNEED = 4,};
enum MACRO_PSOCK {PSOCK = 24,PWAIT = 32,};
enum MACRO_PUSER {PUSER = 50,};
enum MACRO_PZERO {PZERO = 22,};
enum MACRO_QUERY {QUERY_IS_SYSTEM_REGION = 0x4,};
enum MACRO_SCALE {SCALE_PPM = 65,};
enum MACRO_SCHAR {SCHAR_MIN = -128,};
enum MACRO_SIGEV {SIGEV_NONE = 0,SIGEV_SIGNAL = 1,SIGEV_THREAD = 3,};
enum MACRO_SIGIO {SIGIO = 23,};
enum MACRO_SONPX {SONPX_SETOPTSHUT = 0x1,};
enum MACRO_SPLAY {SPLAY_NEGINF = -1,SPLAY_INF = 1,};
enum MACRO_STACK {STACK_INCR = 4,};
enum MACRO_STDFB {STDFB_BM256_TO_BM38_MAP_SIZE = 256,STDFB_BM38_TO_BM256_MAP_SIZE = 256,STDFB_4BPS_TO_5BPS_MAP_SIZE = 16,STDFB_5BPS_TO_4BPS_MAP_SIZE = 32,};
enum MACRO_TCPCI {TCPCI_OPT_TIMESTAMPS = 0x1,TCPCI_OPT_SACK = 0x2,TCPCI_OPT_WSCALE = 0x4,TCPCI_OPT_ECN = 0x8,TCPCI_FLAG_LOSSRECOVERY = 0x1,TCPCI_FLAG_REORDERING_DETECTED = 0x2,};
enum MACRO_TIOCM {TIOCM_LE = 0x1,TIOCM_DTR = 0x2,TIOCM_RTS = 0x4,TIOCM_ST = 0x8,TIOCM_SR = 0x10,TIOCM_CTS = 0x20,TIOCM_CAR = 0x40,TIOCM_RNG = 0x80,TIOCM_DSR = 0x100,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_UCHAR {UCHAR_MAX = 255,CHAR_MAX = 127,};
enum MACRO_UINT8 {UINT8_MAX = 255,UINT16_MAX = 65535,UINT32_MAX = -1,UINT64_MAX = -1,};
enum MACRO_ULONG {ULONG_MAX = 0xFFFFFFFF,LONG_MAX = 0x7FFFFFFF,};
enum MACRO_USHRT {USHRT_MAX = 65535,SHRT_MAX = 32767,};
enum MACRO_VEXEC {VEXEC = 0x40,};
enum MACRO_VKILL {VKILL = 5,};
enum MACRO_VNODE {VNODE_READ = 0x1,VNODE_WRITE = 0x2,VNODE_BLOCKMAP_NO_TRACK = 0x4,};
enum MACRO_VQUIT {VQUIT = 9,};
enum MACRO_VREAD {VREAD = 0x100,};
enum MACRO_VSGID {VSGID = 0x400,};
enum MACRO_VSTOP {VSTOP = 13,};
enum MACRO_VSUID {VSUID = 0x800,};
enum MACRO_VSUSP {VSUSP = 10,};
enum MACRO_VSVTX {VSVTX = 0x200,};
enum MACRO_VTIME {VTIME = 17,};
enum MACRO_XATTR {XATTR_NOFOLLOW = 0x1,XATTR_CREATE = 0x2,XATTR_REPLACE = 0x4,XATTR_NOSECURITY = 0x8,XATTR_NODEFAULT = 0x10,XATTR_SHOWCOMPRESSION = 0x20,XATTR_MAXNAMELEN = 0x7F,};
enum MACRO_XTABS {XTABS = 0xC00,CRDELAY = 0x3000,VTDELAY = 0x4000,BSDELAY = 0x8000,};
enum MACRO__NeXT {_NeXT_MACH_EVENT_DRIVER_ = 1,};
enum MACRO__QUAD {_QUAD_HIGHWORD = 1,_QUAD_LOWWORD = 0,};
enum MACRO___MAC {__MAC_10_0 = 1000,__MAC_10_1 = 1010,__MAC_10_2 = 1020,__MAC_10_3 = 1030,__MAC_10_4 = 1040,__MAC_10_5 = 1050,__MAC_10_6 = 1060,__MAC_10_7 = 1070,__MAC_10_8 = 1080,__MAC_10_9 = 1090,__MAC_10_10 = 101000,__MAC_10_10_2 = 101002,__MAC_10_10_3 = 101003,__MAC_10_11 = 101100,__MAC_10_11_2 = 101102,__MAC_10_11_3 = 101103,__MAC_10_11_4 = 101104,__MAC_10_12 = 101200,__MAC_10_12_1 = 101201,__MAC_10_12_2 = 101202,__MAC_10_12_4 = 101204,};
enum MACRO___NDR {__NDR_convert__ = 0,__NDR_convert__char_rep__ = 0,__NDR_convert__float_rep__ = 0,};
enum MACRO___OLD {__OLD_NX_EVS_DEVICE_INFO = 1,};
enum MACRO___SMP {__SMP__ = 1,};
enum MACRO_audit {audit_triggers_MSG_COUNT = 1,coalition_notification_MSG_COUNT = 1,};
enum MACRO_ccn32 {ccn32_32_null = 0,};
enum MACRO_ccoid {ccoid_sha224_len = 11,ccoid_sha256_len = 11,ccoid_sha384_len = 11,ccoid_sha512_len = 11,};
enum MACRO_clock {clock_MSG_COUNT = 3,clock_priv_MSG_COUNT = 2,clock_reply_MSG_COUNT = 1,};
enum MACRO_kextd {kextd_kernel_request_MSG_COUNT = 1,};
enum MACRO_lockd {lockd_mach_MSG_COUNT = 3,};
enum NXByteOrder {NX_UnknownByteOrder = 0x0,NX_LittleEndian = 0x1,NX_BigEndian = 0x2,};
typedef _NXEQElStruct NXEQElement;
typedef __OSMallocTag__ *OSMallocTag;
typedef RGBColor *RGBColorPtr;
struct UCInfo_vtbl; 
typedef VDEntryRecord *VDEntRecPtr;
typedef VDGammaRecord *VDGamRecPtr;
typedef VDMirrorRec *VDMirrorPtr;
typedef VDPageInfo *VDPgInfoPtr;
typedef VDScalerRec *VDScalerPtr;
typedef VDSizeInfo *VDSzInfoPtr;
struct _VSLService;
struct __lck_grp__;
union __mbstate_t {char __mbstate8[128];long long _mbstateL;};
enum atapiConfig {kATAPIDRQSlow = 0x0,kATAPIIRQPacket = 0x1,kATAPIDRQFast = 0x10,kATAPIUnknown = 0x11,};
typedef char atomic_bool;
typedef char atomic_char;
typedef int atomic_long;
typedef int atomic_uint;
typedef auditinfo auditinfo_t;
typedef call_gate call_gate_t;
typedef void (*cchmac_fn_t)( ccdigest_info *, unsigned int,  void *, unsigned int,  void *, unsigned char *);
typedef int clock_res_t;
typedef coalition *coalition_t;
typedef code_desc code_desc_t;
typedef data_desc data_desc_t;
enum dot3Vendors {dot3VendorAMD = 0x1,dot3VendorIntel = 0x2,dot3VendorNational = 0x4,dot3VendorFujitsu = 0x5,dot3VendorDigital = 0x6,dot3VendorWesternDigital = 0x7,};
typedef fp_status fp_status_t;
typedef gdt_entry gdt_entry_t;
typedef char *gssd_string;
typedef host *host_priv_t;
typedef idt_entry idt_entry_t;
struct if_clonereq {int ifcr_total;int ifcr_count;char *ifcr_buffer;};
struct ifma_msghdr {unsigned short ifmam_msglen;unsigned char ifmam_version;unsigned char ifmam_type;int ifmam_addrs;int ifmam_flags;unsigned short ifmam_index;};
struct inpcbpolicy;
typedef intr_gate intr_gate_t;
typedef OSObject *io_object_t;
typedef char io_string_t[512];
struct ip6_pktopts;
struct ip_moptions;
typedef ipc_space *ipc_space_t;
struct ipc_voucher;
typedef kauth_ace *kauth_ace_t;
typedef kauth_acl *kauth_acl_t;
struct kauth_scope;
enum kdp_event_t {KDP_EVENT_ENTER = 0x0,KDP_EVENT_EXIT = 0x1,KDP_EVENT_PANICLOG = 0x2,};
typedef void *kmod_args_t;
typedef kmod_info kmod_info_t;
typedef ldt_entry ldt_entry_t;
typedef os_refcnt os_refcnt_t;
typedef processor *processor_t;
enum ptrauth_key {ptrauth_key_asia = 0x0,ptrauth_key_asib = 0x1,ptrauth_key_asda = 0x2,ptrauth_key_asdb = 0x3,ptrauth_key_process_independent_code = 0x0,ptrauth_key_process_dependent_code = 0x1,ptrauth_key_process_independent_data = 0x2,ptrauth_key_process_dependent_data = 0x3,ptrauth_key_function_pointer = 0x0,ptrauth_key_return_address = 0x1,ptrauth_key_frame_pointer = 0x3,ptrauth_key_block_function = 0x0,ptrauth_key_cxx_vtable_pointer = 0x2,};
struct queue_entry {queue_entry *next;queue_entry *prev;};
typedef int reset_fcn_t(int);
struct rt_addrinfo {int rti_addrs;sockaddr *rti_info[8];};
typedef semaphore *semaphore_t;
typedef task_gate task_gate_t;
typedef task *task_name_t;
struct thread_call;
typedef trap_gate trap_gate_t;
typedef unsigned int vDSP_Length;
typedef int vDSP_Stride;
struct vfs_context;
typedef zone_info zone_info_t;
typedef zone_name zone_name_t;
typedef DCLCommandStruct DCLCommand;
struct DSPComplex {float real;float imag;};
typedef HIDCaps *HIDCapsPtr;
struct IOHIDEvent;
struct IOPCIRange;
enum MACRO_ANON {ANON_MAX_SIZE = 0xFFFFF000,ANON_CHUNK_SIZE = 0x8000000,};
enum MACRO_ANYP {ANYP = 0xC0,NLDELAY = 0x300,TBDELAY = 0xC00,};
enum MACRO_ATTR {ATTR_BIT_MAP_COUNT = 5,};
enum MACRO_B110 {B110 = 110,};
enum MACRO_B134 {B134 = 134,};
enum MACRO_B150 {B150 = 150,};
enum MACRO_B200 {B200 = 200,};
enum MACRO_B300 {B300 = 300,};
enum MACRO_B600 {B600 = 600,};
enum MACRO_BANK {BANK_ACCOUNT_INFO = 0x10,BANK_TASK_INFO = 0x11,};
enum MACRO_BIND {BIND_TYPE_POINTER = 1,BIND_TYPE_TEXT_ABSOLUTE32 = 2,BIND_TYPE_TEXT_PCREL32 = 3,BIND_SPECIAL_DYLIB_SELF = 0,BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE = -1,BIND_SPECIAL_DYLIB_FLAT_LOOKUP = -2,BIND_SYMBOL_FLAGS_WEAK_IMPORT = 1,BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION = 8,BIND_OPCODE_MASK = 240,BIND_IMMEDIATE_MASK = 15,BIND_OPCODE_DONE = 0,BIND_OPCODE_SET_DYLIB_ORDINAL_IMM = 16,BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB = 32,BIND_OPCODE_SET_DYLIB_SPECIAL_IMM = 48,BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM = 64,BIND_OPCODE_SET_TYPE_IMM = 80,BIND_OPCODE_SET_ADDEND_SLEB = 96,BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 112,BIND_OPCODE_ADD_ADDR_ULEB = 128,BIND_OPCODE_DO_BIND = 144,BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB = 160,BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED = 176,BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB = 192,};
enum MACRO_BOOT {BOOT_LINE_LENGTH = 1024,};
enum MACRO_BPOP {BPOP_OK = 0,BPOP_QUERY = 1,BPOP_QUERY_NE = 2,BPOP_ERROR = 3,};
enum MACRO_BSD4 {BSD4_3 = 1,BSD4_4 = 1,};
enum MACRO_BYTE {BYTE_SIZE = 8,};
enum MACRO_CCTS {CCTS_OFLOW = 0x10000,};
enum MACRO_CEOL {CEOL = 0xFF,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CMAC {CMAC_BLOCKSIZE = 16,};
enum MACRO_CMIN {CMIN = 1,CQUIT = 28,};
enum MACRO_DESC {DESC_CODE_EXEC = 0x18,DESC_CODE_READ = 0x1A,DESC_CODE_16B = 0x0,DESC_CODE_32B = 0x1,DESC_GRAN_BYTE = 0x0,DESC_GRAN_PAGE = 0x1,DESC_DATA_RONLY = 0x10,DESC_DATA_WRITE = 0x12,DESC_DATA_16B = 0x0,DESC_DATA_32B = 0x1,DESC_LDT = 0x2,DESC_CALL_GATE = 0xC,DESC_TRAP_GATE = 0xF,DESC_INTR_GATE = 0xE,DESC_TSS = 0x9,DESC_TASK_GATE = 0x5,DESC_TBL_MAX = 0x2000,};
enum MACRO_DICE {DICE_KIND_DATA = 0x1,DICE_KIND_JUMP_TABLE8 = 0x2,DICE_KIND_JUMP_TABLE16 = 0x3,DICE_KIND_JUMP_TABLE32 = 0x4,DICE_KIND_ABS_JUMP_TABLE32 = 0x5,};
enum MACRO_DISK {DISK_BOOTSZ = 446,DISK_NPART = 4,DISK_SIGNATURE = 43605,};
enum MACRO_DKIO {DKIO_DONE = 0x1,DKIO_READ = 0x2,DKIO_ASYNC = 0x4,DKIO_META = 0x8,DKIO_PAGING = 0x10,DKIO_THROTTLE = 0x20,DKIO_PASSIVE = 0x40,DKIO_NOCACHE = 0x80,DKIO_TIER_MASK = 0xF00,DKIO_TIER_SHIFT = 0x8,DKIO_TIER_UPGRADE = 0x1000,};
enum MACRO_DLIL {DLIL_DESC_ETYPE2 = 4,DLIL_DESC_SAP = 5,DLIL_DESC_SNAP = 6,};
enum MACRO_DPME {DPME_FLAGS_VALID = 0x1,DPME_FLAGS_ALLOCATED = 0x2,DPME_FLAGS_IN_USE = 0x4,DPME_FLAGS_BOOTABLE = 0x8,DPME_FLAGS_READABLE = 0x10,DPME_FLAGS_WRITABLE = 0x20,DPME_FLAGS_OS_PIC_CODE = 0x40,DPME_FLAGS_OS_SPECIFIC_2 = 0x80,DPME_FLAGS_OS_SPECIFIC_1 = 0x100,DPME_FLAGS_RESERVED_2 = 0xFFFFFE00,};
enum MACRO_DYLD {DYLD_ALL_IMAGE_INFOS_ADDRESS_MINIMUM_VERSION = 9,DYLD_ALL_IMAGE_INFOS_TIMESTAMP_MINIMUM_VERSION = 15,};
enum MACRO_EDOM {EDOM = 33,};
enum MACRO_EXIT {EXIT_REASON_SNAPSHOT = 0x1001,EXIT_REASON_USER_DESC = 0x1002,EXIT_REASON_USER_PAYLOAD = 0x1003,EXIT_REASON_CODESIGNING_INFO = 0x1004,EXIT_REASON_WORKLOOP_ID = 0x1005,EXIT_REASON_DISPATCH_QUEUE_NO = 0x1006,EXIT_REASON_CODESIG_PATH_MAX = 0x400,EXIT_REASON_USER_DESC_MAX_LEN = 0x400,EXIT_REASON_PAYLOAD_MAX_LEN = 0x800,};
enum MACRO_EXTA {EXTA = 19200,};
enum MACRO_EXTB {EXTB = 38400,};
enum MACRO_GSSD {GSSD_DELEG_FLAG = 1,GSSD_MUTUAL_FLAG = 2,GSSD_REPLAY_FLAG = 4,GSSD_SEQUENCE_FLAG = 8,GSSD_CONF_FLAG = 16,GSSD_INTEG_FLAG = 32,GSSD_ANON_FLAG = 64,GSSD_PROT_FLAG = 128,GSSD_TRANS_FLAG = 256,GSSD_DELEG_POLICY_FLAG = 32768,GSSD_NO_DEFAULT = 1,GSSD_NO_CANON = 2,GSSD_HOME_ACCESS_OK = 4,GSSD_GUEST_ONLY = 8,GSSD_RESTART = 16,GSSD_NFS_1DES = 64,GSSD_WIN2K_HACK = 128,GSSD_LUCID_CONTEXT = 256,};
enum MACRO_HOST {HOST_BASIC_INFO = 1,HOST_SCHED_INFO = 3,HOST_RESOURCE_SIZES = 4,HOST_PRIORITY_INFO = 5,HOST_SEMAPHORE_TRAPS = 7,HOST_MACH_MSG_TRAP = 8,HOST_VM_PURGABLE = 9,HOST_DEBUG_INFO_INTERNAL = 10,HOST_CAN_HAS_DEBUGGER = 11,HOST_PREFERRED_USER_ARCH = 12,HOST_LOAD_INFO = 1,HOST_VM_INFO = 2,HOST_CPU_LOAD_INFO = 3,HOST_VM_INFO64 = 4,HOST_EXTMOD_INFO64 = 5,HOST_EXPIRED_TASK_INFO = 6,HOST_NOTIFY_CALENDAR_CHANGE = 0,HOST_NOTIFY_CALENDAR_SET = 1,HOST_NOTIFY_TYPE_MAX = 1,HOST_CALENDAR_CHANGED_REPLYID = 950,HOST_CALENDAR_SET_REPLYID = 951,HOST_SECURITY_PORT = 0,HOST_PORT = 1,HOST_PRIV_PORT = 2,HOST_IO_MASTER_PORT = 3,HOST_MAX_SPECIAL_KERNEL_PORT = 7,HOST_LOCAL_NODE = -1,};
enum MACRO_I386 {I386_PGBYTES = 4096,I386_PGSHIFT = 12,I386_LPGBYTES = 2097152,I386_LPGSHIFT = 21,};
enum MACRO_ICMP {ICMP_MINLEN = 8,ICMP_MASKLEN = 12,ICMP_ECHOREPLY = 0,ICMP_UNREACH = 3,ICMP_UNREACH_NET = 0,ICMP_UNREACH_HOST = 1,ICMP_UNREACH_PROTOCOL = 2,ICMP_UNREACH_PORT = 3,ICMP_UNREACH_NEEDFRAG = 4,ICMP_UNREACH_SRCFAIL = 5,ICMP_UNREACH_NET_UNKNOWN = 6,ICMP_UNREACH_HOST_UNKNOWN = 7,ICMP_UNREACH_ISOLATED = 8,ICMP_UNREACH_NET_PROHIB = 9,ICMP_UNREACH_HOST_PROHIB = 10,ICMP_UNREACH_TOSNET = 11,ICMP_UNREACH_TOSHOST = 12,ICMP_UNREACH_FILTER_PROHIB = 13,ICMP_UNREACH_HOST_PRECEDENCE = 14,ICMP_UNREACH_PRECEDENCE_CUTOFF = 15,ICMP_SOURCEQUENCH = 4,ICMP_REDIRECT = 5,ICMP_REDIRECT_NET = 0,ICMP_REDIRECT_HOST = 1,ICMP_REDIRECT_TOSNET = 2,ICMP_REDIRECT_TOSHOST = 3,ICMP_ALTHOSTADDR = 6,ICMP_ECHO = 8,ICMP_ROUTERADVERT = 9,ICMP_ROUTERADVERT_NORMAL = 0,ICMP_ROUTERADVERT_NOROUTE_COMMON = 16,ICMP_ROUTERSOLICIT = 10,ICMP_TIMXCEED = 11,ICMP_TIMXCEED_INTRANS = 0,ICMP_TIMXCEED_REASS = 1,ICMP_PARAMPROB = 12,ICMP_PARAMPROB_ERRATPTR = 0,ICMP_PARAMPROB_OPTABSENT = 1,ICMP_PARAMPROB_LENGTH = 2,ICMP_TSTAMP = 13,ICMP_TSTAMPREPLY = 14,ICMP_IREQ = 15,ICMP_IREQREPLY = 16,ICMP_MASKREQ = 17,ICMP_MASKREPLY = 18,ICMP_TRACEROUTE = 30,ICMP_DATACONVERR = 31,ICMP_MOBILE_REDIRECT = 32,ICMP_IPV6_WHEREAREYOU = 33,ICMP_IPV6_IAMHERE = 34,ICMP_MOBILE_REGREQUEST = 35,ICMP_MOBILE_REGREPLY = 36,ICMP_SKIP = 39,ICMP_PHOTURIS = 40,ICMP_PHOTURIS_UNKNOWN_INDEX = 1,ICMP_PHOTURIS_AUTH_FAILED = 2,ICMP_PHOTURIS_DECRYPT_FAILED = 3,ICMP_MAXTYPE = 40,};
enum MACRO_IGMP {IGMP_MINLEN = 8,IGMP_V3_QUERY_MINLEN = 12,IGMP_V3_QUERY_MAX_SRCS = 366,IGMP_GRPREC_HDRLEN = 8,IGMP_V3_REPORT_MINLEN = 8,IGMP_V3_REPORT_MAXRECS = 65535,IGMP_HOST_MEMBERSHIP_QUERY = 17,IGMP_v1_HOST_MEMBERSHIP_REPORT = 18,IGMP_DVMRP = 19,IGMP_PIM = 20,IGMP_v2_HOST_MEMBERSHIP_REPORT = 22,IGMP_HOST_LEAVE_MESSAGE = 23,IGMP_MTRACE_REPLY = 30,IGMP_MTRACE_QUERY = 31,IGMP_v3_HOST_MEMBERSHIP_REPORT = 34,IGMP_DO_NOTHING = 0,IGMP_MODE_IS_INCLUDE = 1,IGMP_MODE_IS_EXCLUDE = 2,IGMP_CHANGE_TO_INCLUDE_MODE = 3,IGMP_CHANGE_TO_EXCLUDE_MODE = 4,IGMP_ALLOW_NEW_SOURCES = 5,IGMP_BLOCK_OLD_SOURCES = 6,IGMP_V3_GENERAL_QUERY = 1,IGMP_V3_GROUP_QUERY = 2,IGMP_V3_GROUP_SOURCE_QUERY = 3,IGMP_V1V2_MAX_RI = 10,IGMP_TIMER_SCALE = 10,};
enum MACRO_IGPS {IGPS_VERSION_3 = 3,IGPS_VERSION3_LEN = 168,};
enum MACRO_IMG4 {IMG4_API_VERSION = 20180112,IMG4_ENVIRONMENT_VERSION = 0,IMG4_INTERFACE_VERSION = 1,};
enum MACRO_IN6P {IN6P_IPV6_V6ONLY = 0x8000,IN6P_BINDV6ONLY = 0x1000000,};
enum MACRO_INET {INET_ADDRSTRLEN = 16,};
enum MACRO_INFO {MACH_TASK_BASIC_INFO = 20,TASK_POWER_INFO = 21,TASK_VM_INFO = 22,};
enum MACRO_IOFB {IOFB_ARBITRARY_FRAMES_CURSOR = 1,};
enum MACRO_IOPM {IOPM_POWER_SOURCE_REV = 2,};
enum MACRO_IOWL {IOWL_CLIENT = 1,IOWL_WORK = 2,};
enum MACRO_IP6F {IP6F_OFF_MASK = 0xF8FF,IP6F_RESERVED_MASK = 0x600,IP6F_MORE_FRAG = 0x100,};
enum MACRO_IPV6 {IPV6_ADDR_INT32_ONE = 0x1000000,IPV6_ADDR_INT32_TWO = 0x2000000,IPV6_ADDR_INT32_MNL = 0x1FF,IPV6_ADDR_INT32_MLL = 0x2FF,IPV6_ADDR_INT32_SMP = 0xFFFF0000,IPV6_ADDR_INT16_ULL = 0x80FE,IPV6_ADDR_INT16_USL = 0xC0FE,IPV6_ADDR_INT16_MLL = 0x2FF,IPV6_ADDR_SCOPE_NODELOCAL = 0x1,IPV6_ADDR_SCOPE_INTFACELOCAL = 0x1,IPV6_ADDR_SCOPE_LINKLOCAL = 0x2,IPV6_ADDR_SCOPE_SITELOCAL = 0x5,IPV6_ADDR_SCOPE_ORGLOCAL = 0x8,IPV6_ADDR_SCOPE_GLOBAL = 0xE,IPV6_SOCKOPT_RESERVED1 = 0x3,IPV6_UNICAST_HOPS = 0x4,IPV6_MULTICAST_IF = 0x9,IPV6_MULTICAST_HOPS = 0xA,IPV6_MULTICAST_LOOP = 0xB,IPV6_JOIN_GROUP = 0xC,IPV6_LEAVE_GROUP = 0xD,IPV6_PORTRANGE = 0xE,};
enum MACRO_KDBG {KDBG_CLASS_MASK = 0xFF000000,KDBG_CLASS_OFFSET = 0x18,KDBG_CLASS_MAX = 0xFF,KDBG_SUBCLASS_MASK = 0xFF0000,KDBG_SUBCLASS_OFFSET = 0x10,KDBG_SUBCLASS_MAX = 0xFF,KDBG_CSC_MASK = 0xFFFF0000,KDBG_CSC_MAX = 0xFFFF,KDBG_CODE_MASK = 0xFFFC,KDBG_CODE_OFFSET = 0x2,KDBG_CODE_MAX = 0x3FFF,KDBG_EVENTID_MASK = 0xFFFFFFFC,KDBG_FUNC_MASK = 0x3,};
enum MACRO_KERN {KERN_SUCCESS = 0,KERN_INVALID_ADDRESS = 1,KERN_PROTECTION_FAILURE = 2,KERN_NO_SPACE = 3,KERN_INVALID_ARGUMENT = 4,KERN_FAILURE = 5,KERN_RESOURCE_SHORTAGE = 6,KERN_NOT_RECEIVER = 7,KERN_NO_ACCESS = 8,KERN_MEMORY_FAILURE = 9,KERN_MEMORY_ERROR = 10,KERN_ALREADY_IN_SET = 11,KERN_NOT_IN_SET = 12,KERN_NAME_EXISTS = 13,KERN_ABORTED = 14,KERN_INVALID_NAME = 15,KERN_INVALID_TASK = 16,KERN_INVALID_RIGHT = 17,KERN_INVALID_VALUE = 18,KERN_UREFS_OVERFLOW = 19,KERN_INVALID_CAPABILITY = 20,KERN_RIGHT_EXISTS = 21,KERN_INVALID_HOST = 22,KERN_MEMORY_PRESENT = 23,KERN_MEMORY_DATA_MOVED = 24,KERN_MEMORY_RESTART_COPY = 25,KERN_INVALID_PROCESSOR_SET = 26,KERN_POLICY_LIMIT = 27,KERN_INVALID_POLICY = 28,KERN_INVALID_OBJECT = 29,KERN_ALREADY_WAITING = 30,KERN_DEFAULT_SET = 31,KERN_EXCEPTION_PROTECTED = 32,KERN_INVALID_LEDGER = 33,KERN_INVALID_MEMORY_CONTROL = 34,KERN_INVALID_SECURITY = 35,KERN_NOT_DEPRESSED = 36,KERN_TERMINATED = 37,KERN_LOCK_SET_DESTROYED = 38,KERN_LOCK_UNSTABLE = 39,KERN_LOCK_OWNED = 40,KERN_LOCK_OWNED_SELF = 41,KERN_SEMAPHORE_DESTROYED = 42,KERN_RPC_SERVER_TERMINATED = 43,KERN_RPC_TERMINATE_ORPHAN = 44,KERN_RPC_CONTINUE_ORPHAN = 45,KERN_NOT_SUPPORTED = 46,KERN_NODE_DOWN = 47,KERN_NOT_WAITING = 48,KERN_OPERATION_TIMED_OUT = 49,KERN_CODESIGN_ERROR = 50,KERN_POLICY_STATIC = 51,KERN_INSUFFICIENT_BUFFER_SIZE = 52,KERN_RETURN_MAX = 256,};
enum MACRO_KMOD {KMOD_MAX_NAME = 64,KMOD_INFO_VERSION = 1,};
enum MACRO_KXLD {KXLD_USER_OR_ILP32 = 1,KXLD_USER_OR_I386 = 1,KXLD_USER_OR_COMMON = 1,KXLD_USER_OR_STRICT_PATCHING = 1,KXLD_USER_OR_OBJECT = 1,KXLD_USER_OR_BUNDLE = 1,KXLD_USER_OR_GOT = 0,};
enum MACRO_LOAD {LOAD_SCALE = 1000,};
enum MACRO_LOCK {LOCK_SH = 0x1,LOCK_EX = 0x2,LOCK_NB = 0x4,LOCK_UN = 0x8,};
enum MACRO_LONG {LONG_MIN = -2147483648,};
enum MACRO_MACH {MACH_PORT_NULL = 0,MACH_PORT_DEAD = 4294967295,MACH_PORT_RIGHT_SEND = 0,MACH_PORT_RIGHT_RECEIVE = 1,MACH_PORT_RIGHT_SEND_ONCE = 2,MACH_PORT_RIGHT_PORT_SET = 3,MACH_PORT_RIGHT_DEAD_NAME = 4,MACH_PORT_RIGHT_LABELH = 5,MACH_PORT_RIGHT_NUMBER = 6,MACH_PORT_TYPE_NONE = 0,MACH_PORT_TYPE_DNREQUEST = -2147483648,MACH_PORT_TYPE_SPREQUEST = 1073741824,MACH_PORT_TYPE_SPREQUEST_DELAYED = 536870912,MACH_PORT_SRIGHTS_NONE = 0,MACH_PORT_SRIGHTS_PRESENT = 1,MACH_PORT_QLIMIT_ZERO = 0,MACH_PORT_QLIMIT_BASIC = 5,MACH_PORT_QLIMIT_SMALL = 16,MACH_PORT_QLIMIT_LARGE = 1024,MACH_PORT_QLIMIT_KERNEL = 65534,MACH_PORT_STATUS_FLAG_TEMPOWNER = 1,MACH_PORT_STATUS_FLAG_GUARDED = 2,MACH_PORT_STATUS_FLAG_STRICT_GUARD = 4,MACH_PORT_STATUS_FLAG_IMP_DONATION = 8,MACH_PORT_STATUS_FLAG_REVIVE = 16,MACH_PORT_STATUS_FLAG_TASKPTR = 32,MACH_PORT_LIMITS_INFO = 1,MACH_PORT_RECEIVE_STATUS = 2,MACH_PORT_DNREQUESTS_SIZE = 3,MACH_PORT_TEMPOWNER = 4,MACH_PORT_IMPORTANCE_RECEIVER = 5,MACH_PORT_DENAP_RECEIVER = 6,MACH_PORT_INFO_EXT = 7,MACH_PORT_DNREQUESTS_SIZE_COUNT = 1,};
enum MACRO_MADV {MADV_FREE = 5,MADV_ZERO_WIRED_PAGES = 6,MADV_FREE_REUSABLE = 7,MADV_FREE_REUSE = 8,MADV_CAN_REUSE = 9,MADV_PAGEOUT = 10,};
enum MACRO_MASK {kGTRACE_COMPONENT_MASK = 0xFFFFFFFF,kTHREAD_ID_MASK = 0xFFFFFF,kGTRACE_REGISTRYID_MASK = 0xFFFFFFFF,};
enum MACRO_MATH {MATH_ERRNO = 1,MATH_ERREXCEPT = 2,};
enum MACRO_MBUF {MBUF_COPYALL = 1000000000,};
enum MACRO_MODE {GRAPHICS_MODE = 1,FB_TEXT_MODE = 2,};
enum MACRO_NAME {NAME_MAX = 255,NGROUPS_MAX = 16,UID_MAX = 2147483647,OPEN_MAX = 10240,PATH_MAX = 1024,};
enum MACRO_NCCS {NCCS = 20,};
enum MACRO_NDRV {NDRV_DEMUXTYPE_ETHERTYPE = 4,NDRV_DEMUXTYPE_SAP = 5,NDRV_DEMUXTYPE_SNAP = 6,};
enum MACRO_NOTE {NOTE_TRIGGER = 0x1000000,NOTE_FFNOP = 0x0,NOTE_FFAND = 0x40000000,NOTE_FFOR = 0x80000000,NOTE_FFCOPY = 0xC0000000,NOTE_FFCTRLMASK = 0xC0000000,NOTE_FFLAGSMASK = 0xFFFFFF,NOTE_LOWAT = 0x1,NOTE_OOB = 0x2,NOTE_DELETE = 0x1,NOTE_WRITE = 0x2,NOTE_EXTEND = 0x4,NOTE_ATTRIB = 0x8,NOTE_LINK = 0x10,NOTE_RENAME = 0x20,NOTE_REVOKE = 0x40,NOTE_NONE = 0x80,NOTE_FUNLOCK = 0x100,NOTE_EXIT = 0x80000000,NOTE_FORK = 0x40000000,NOTE_EXEC = 0x20000000,NOTE_SIGNAL = 0x8000000,NOTE_EXITSTATUS = 0x4000000,NOTE_EXIT_DETAIL = 0x2000000,NOTE_PDATAMASK = 0xFFFFF,NOTE_EXIT_DETAIL_MASK = 0x70000,NOTE_EXIT_DECRYPTFAIL = 0x10000,NOTE_EXIT_MEMORY = 0x20000,NOTE_EXIT_CSERROR = 0x40000,NOTE_VM_PRESSURE = 0x80000000,NOTE_VM_PRESSURE_TERMINATE = 0x40000000,NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 0x20000000,NOTE_VM_ERROR = 0x10000000,NOTE_SECONDS = 0x1,NOTE_USECONDS = 0x2,NOTE_NSECONDS = 0x4,NOTE_ABSOLUTE = 0x8,NOTE_LEEWAY = 0x10,NOTE_CRITICAL = 0x20,NOTE_BACKGROUND = 0x40,NOTE_MACH_CONTINUOUS_TIME = 0x80,NOTE_MACHTIME = 0x100,NOTE_TRACK = 0x1,NOTE_TRACKERR = 0x2,NOTE_CHILD = 0x4,};
enum MACRO_NRDV {NRDV_MULTICAST_ADDRS_PER_SOCK = 1,};
enum MACRO_NSEC {NSEC_PER_USEC = 1000,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_N_NO {N_NO_DEAD_STRIP = 0x20,N_DESC_DISCARDED = 0x20,N_WEAK_REF = 0x40,N_WEAK_DEF = 0x80,N_REF_TO_WEAK = 0x80,N_ARM_THUMB_DEF = 0x8,N_SYMBOL_RESOLVER = 0x100,N_ALT_ENTRY = 0x200,};
enum MACRO_OPEN {OPEN_THROTTLE_WINDOW = 0x1,};
enum MACRO_OSMT {OSMT_DEFAULT = 0x0,OSMT_PAGEABLE = 0x1,};
enum MACRO_O_DP {O_DP_GETRAWENCRYPTED = 0x1,O_DP_GETRAWUNENCRYPTED = 0x2,};
enum MACRO_PIPE {PIPE_BUF = 512,};
enum MACRO_PMAP {PMAP__CREATE = 0x0,PMAP__DESTROY = 0x1,PMAP__PROTECT = 0x2,PMAP__PAGE_PROTECT = 0x3,PMAP__ENTER = 0x4,PMAP__REMOVE = 0x5,PMAP__NEST = 0x6,PMAP__UNNEST = 0x7,PMAP__FLUSH_TLBS = 0x8,PMAP__UPDATE_INTERRUPT = 0x9,PMAP__ATTRIBUTE_CLEAR = 0xA,PMAP__REUSABLE = 0xB,PMAP__QUERY_RESIDENT = 0xC,PMAP__FLUSH_KERN_TLBS = 0xD,PMAP__FLUSH_DELAYED_TLBS = 0xE,PMAP__FLUSH_TLBS_TO = 0xF,PMAP__FLUSH_EPT = 0x10,PMAP__FAST_FAULT = 0x11,PMAP__SWITCH = 0x12,PMAP__TTE = 0x13,PMAP__SWITCH_USER_TTB = 0x14,};
enum MACRO_POLL {POLL_IN = 1,POLL_OUT = 2,POLL_MSG = 3,POLL_ERR = 4,POLL_PRI = 5,POLL_HUP = 6,};
enum MACRO_PORT {PORT_NULL = 0,PORT_DEAD = -1,};
enum MACRO_PRIO {PRIO_PROCESS = 0,PRIO_PGRP = 1,PRIO_USER = 2,PRIO_DARWIN_THREAD = 3,PRIO_DARWIN_PROCESS = 4,PRIO_MIN = -20,PRIO_MAX = 20,PRIO_DARWIN_BG = 4096,PRIO_DARWIN_NONUI = 4097,};
enum MACRO_PRIV {KERN_PRIV = 0,USER_PRIV = 3,};
enum MACRO_PROC {PROC_FLAG_DARWINBG = 0x8000,PROC_FLAG_EXT_DARWINBG = 0x10000,PROC_FLAG_IOS_APPLEDAEMON = 0x20000,PROC_FLAG_IOS_IMPPROMOTION = 0x80000,PROC_FLAG_ADAPTIVE = 0x100000,PROC_FLAG_ADAPTIVE_IMPORTANT = 0x200000,PROC_FLAG_IMPORTANCE_DONOR = 0x400000,PROC_FLAG_SUPPRESSED = 0x800000,PROC_FLAG_APPLICATION = 0x1000000,};
enum MACRO_PROT {PROT_NONE = 0x0,PROT_READ = 0x1,PROT_WRITE = 0x2,PROT_EXEC = 0x4,};
enum MACRO_PSEM {PSEM_NONE = 1,PSEM_DEFINED = 2,PSEM_ALLOCATED = 4,PSEM_MAPPED = 8,PSEM_INUSE = 16,PSEM_REMOVED = 32,PSEM_INCREATE = 64,PSEM_INDELETE = 128,};
enum MACRO_PSHM {PSHM_NONE = 1,PSHM_DEFINED = 2,PSHM_ALLOCATED = 4,PSHM_MAPPED = 8,PSHM_INUSE = 16,PSHM_REMOVED = 32,PSHM_INCREATE = 64,PSHM_INDELETE = 128,};
enum MACRO_PSWP {PSWP = 0,PVM = 4,PINOD = 8,PRIBIO = 16,};
enum MACRO_PVFS {PVFS = 20,};
enum MACRO_RLIM {RLIM_INFINITY = 9223372036854775807,};
enum MACRO_RMON {RMON_ENABLE_CPUUSAGE_MONITOR = 0x1,RMON_CPUUSAGE_VIOLATED = 0x2,RMON_CPUUSAGE_SUSPENDED = 0x3,RMON_CPUUSAGE_VIOLATED_K32A = 0x4,RMON_CPUUSAGE_VIOLATED_K32B = 0x5,RMON_CPUUSAGE_RESUMED = 0x6,RMON_DISABLE_CPUUSAGE_MONITOR = 0xF,RMON_ENABLE_CPUWAKES_MONITOR = 0x11,RMON_CPUWAKES_VIOLATED = 0x12,RMON_CPUWAKES_VIOLATED_K32A = 0x14,RMON_CPUWAKES_VIOLATED_K32B = 0x15,RMON_DISABLE_CPUWAKES_MONITOR = 0x1F,RMON_ENABLE_IO_MONITOR = 0x21,RMON_LOGWRITES_VIOLATED = 0x22,RMON_PHYSWRITES_VIOLATED = 0x23,RMON_LOGWRITES_VIOLATED_K32A = 0x24,RMON_LOGWRITES_VIOLATED_K32B = 0x25,RMON_DISABLE_IO_MONITOR = 0x2F,};
enum MACRO_RTAX {RTAX_DST = 0,RTAX_GATEWAY = 1,RTAX_NETMASK = 2,RTAX_GENMASK = 3,RTAX_IFP = 4,RTAX_IFA = 5,RTAX_AUTHOR = 6,RTAX_BRD = 7,RTAX_MAX = 8,};
enum MACRO_SACK {TCPOPT_SACK = 5,TCPOLEN_SACK = 8,};
enum MACRO_SADB {SADB_RESERVED = 0,SADB_GETSPI = 1,SADB_UPDATE = 2,SADB_ADD = 3,SADB_DELETE = 4,SADB_GET = 5,SADB_ACQUIRE = 6,SADB_REGISTER = 7,SADB_EXPIRE = 8,SADB_FLUSH = 9,SADB_DUMP = 10,SADB_X_PROMISC = 11,SADB_X_PCHANGE = 12,SADB_X_SPDUPDATE = 13,SADB_X_SPDADD = 14,SADB_X_SPDDELETE = 15,SADB_X_SPDGET = 16,SADB_X_SPDACQUIRE = 17,SADB_X_SPDDUMP = 18,SADB_X_SPDFLUSH = 19,SADB_X_SPDSETIDX = 20,SADB_X_SPDEXPIRE = 21,SADB_X_SPDDELETE2 = 22,SADB_GETSASTAT = 23,SADB_X_SPDENABLE = 24,SADB_X_SPDDISABLE = 25,SADB_MIGRATE = 26,SADB_MAX = 26,SADB_EXT_RESERVED = 0,SADB_EXT_SA = 1,SADB_EXT_LIFETIME_CURRENT = 2,SADB_EXT_LIFETIME_HARD = 3,SADB_EXT_LIFETIME_SOFT = 4,SADB_EXT_ADDRESS_SRC = 5,SADB_EXT_ADDRESS_DST = 6,SADB_EXT_ADDRESS_PROXY = 7,SADB_EXT_KEY_AUTH = 8,SADB_EXT_KEY_ENCRYPT = 9,SADB_EXT_IDENTITY_SRC = 10,SADB_EXT_IDENTITY_DST = 11,SADB_EXT_SENSITIVITY = 12,SADB_EXT_PROPOSAL = 13,SADB_EXT_SUPPORTED_AUTH = 14,SADB_EXT_SUPPORTED_ENCRYPT = 15,SADB_EXT_SPIRANGE = 16,SADB_X_EXT_KMPRIVATE = 17,SADB_X_EXT_POLICY = 18,SADB_X_EXT_SA2 = 19,SADB_EXT_SESSION_ID = 20,SADB_EXT_SASTAT = 21,SADB_X_EXT_IPSECIF = 22,SADB_X_EXT_ADDR_RANGE_SRC_START = 23,SADB_X_EXT_ADDR_RANGE_SRC_END = 24,SADB_X_EXT_ADDR_RANGE_DST_START = 25,SADB_X_EXT_ADDR_RANGE_DST_END = 26,SADB_EXT_MIGRATE_ADDRESS_SRC = 27,SADB_EXT_MIGRATE_ADDRESS_DST = 28,SADB_X_EXT_MIGRATE_IPSECIF = 29,SADB_EXT_MAX = 29,SADB_SATYPE_UNSPEC = 0,SADB_SATYPE_AH = 2,SADB_SATYPE_ESP = 3,SADB_SATYPE_RSVP = 5,SADB_SATYPE_OSPFV2 = 6,SADB_SATYPE_RIPV2 = 7,SADB_SATYPE_MIP = 8,SADB_X_SATYPE_IPCOMP = 9,SADB_X_SATYPE_POLICY = 10,SADB_SATYPE_MAX = 11,SADB_SASTATE_LARVAL = 0,SADB_SASTATE_MATURE = 1,SADB_SASTATE_DYING = 2,SADB_SASTATE_DEAD = 3,SADB_SASTATE_MAX = 3,SADB_SAFLAGS_PFS = 1,SADB_AALG_NONE = 0,SADB_AALG_MD5HMAC = 1,SADB_AALG_SHA1HMAC = 2,SADB_AALG_MAX = 8,SADB_X_AALG_SHA2_256 = 6,SADB_X_AALG_SHA2_384 = 7,SADB_X_AALG_SHA2_512 = 8,SADB_X_AALG_MD5 = 3,SADB_X_AALG_SHA = 4,SADB_X_AALG_NULL = 5,SADB_EALG_NONE = 0,SADB_EALG_DESCBC = 1,SADB_EALG_3DESCBC = 2,SADB_EALG_NULL = 3,SADB_EALG_MAX = 12,SADB_X_EALG_CAST128CBC = 5,SADB_X_EALG_BLOWFISHCBC = 4,SADB_X_EALG_RIJNDAELCBC = 12,SADB_X_EALG_AESCBC = 12,SADB_X_EALG_AES = 12,SADB_X_EALG_AES_GCM = 13,SADB_X_EALG_CHACHA20POLY1305 = 14,SADB_X_CALG_NONE = 0,SADB_X_CALG_OUI = 1,SADB_X_CALG_DEFLATE = 2,SADB_X_CALG_LZS = 3,SADB_X_CALG_MAX = 4,SADB_IDENTTYPE_RESERVED = 0,SADB_IDENTTYPE_PREFIX = 1,SADB_IDENTTYPE_FQDN = 2,SADB_IDENTTYPE_USERFQDN = 3,SADB_X_IDENTTYPE_ADDR = 4,SADB_IDENTTYPE_MAX = 4,SADB_X_EXT_NONE = 0,SADB_X_EXT_OLD = 1,SADB_X_EXT_IV4B = 16,SADB_X_EXT_DERIV = 32,SADB_X_EXT_CYCSEQ = 64,SADB_X_EXT_PSEQ = 0,SADB_X_EXT_PRAND = 256,SADB_X_EXT_PZERO = 512,SADB_X_EXT_PMASK = 768,SADB_X_EXT_IIV = 1024,SADB_X_EXT_RAWCPI = 128,SADB_KEY_FLAGS_MAX = 32767,SADB_X_LIFETIME_ALLOCATIONS = 0,SADB_X_LIFETIME_BYTES = 1,SADB_X_LIFETIME_ADDTIME = 2,SADB_X_LIFETIME_USETIME = 3,};
enum MACRO_SBUF {SBUF_FIXEDLEN = 0x0,SBUF_AUTOEXTEND = 0x1,SBUF_USRFLAGMSK = 0xFFFF,SBUF_DYNAMIC = 0x10000,SBUF_FINISHED = 0x20000,SBUF_OVERFLOWED = 0x40000,SBUF_DYNSTRUCT = 0x80000,};
enum MACRO_SECT {NO_SECT = 0,MAX_SECT = 255,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SEGV {SEGV_NOOP = 0,SEGV_MAPERR = 1,SEGV_ACCERR = 2,};
enum MACRO_SHRT {SHRT_MIN = -32768,};
enum MACRO_SHUT {SHUT_RD = 0,SHUT_WR = 1,SHUT_RDWR = 2,};
enum MACRO_SIZE {EVSIOSB_SIZE = 1,EVSIOSADB_SIZE = 1,EVSIORKBD_SIZE = 1,EVSIOCKML_SIZE = 1,EVSIOSKM_SIZE = 4096,EVSIOCKM_SIZE = 4096,EVSIOSMS_SIZE = 1,EVSIOCMS_SIZE = 1,EVSIOSADS_SIZE = 1,EVSIORMS_SIZE = 1,EVSIOCADS_SIZE = 1,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SWAP {SWAP_ENCRYPT_ON = 0x4,SWAP_ENCRYPT_OFF = 0x8,SWAP_COMPACT_DISABLE = 0x10,SWAP_COMPACT_ENABLE = 0x20,};
enum MACRO_SYNC {SYNC_POLICY_FIFO = 0x0,SYNC_POLICY_FIXED_PRIORITY = 0x1,SYNC_POLICY_REVERSED = 0x2,SYNC_POLICY_ORDER_MASK = 0x3,SYNC_POLICY_MAX = 0x7,};
enum MACRO_TAB0 {TAB0 = 0x0,TAB1 = 0x400,TAB2 = 0x800,};
enum MACRO_TASK {TASK_CRASHINFO_EXTMODINFO = 0x801,TASK_CRASHINFO_BSDINFOWITHUNIQID = 0x802,TASK_CRASHINFO_TASKDYLD_INFO = 0x803,TASK_CRASHINFO_UUID = 0x804,TASK_CRASHINFO_PID = 0x805,TASK_CRASHINFO_PPID = 0x806,TASK_CRASHINFO_RUSAGE = 0x807,TASK_CRASHINFO_RUSAGE_INFO = 0x808,TASK_CRASHINFO_PROC_NAME = 0x809,TASK_CRASHINFO_PROC_STARTTIME = 0x80B,TASK_CRASHINFO_USERSTACK = 0x80C,TASK_CRASHINFO_ARGSLEN = 0x80D,TASK_CRASHINFO_EXCEPTION_CODES = 0x80E,TASK_CRASHINFO_PROC_PATH = 0x80F,TASK_CRASHINFO_PROC_CSFLAGS = 0x810,TASK_CRASHINFO_PROC_STATUS = 0x811,TASK_CRASHINFO_UID = 0x812,TASK_CRASHINFO_GID = 0x813,TASK_CRASHINFO_PROC_ARGC = 0x814,TASK_CRASHINFO_PROC_FLAGS = 0x815,TASK_CRASHINFO_CPUTYPE = 0x816,TASK_CRASHINFO_WORKQUEUEINFO = 0x817,TASK_CRASHINFO_RESPONSIBLE_PID = 0x818,TASK_CRASHINFO_DIRTY_FLAGS = 0x819,TASK_CRASHINFO_CRASHED_THREADID = 0x81A,TASK_CRASHINFO_COALITION_ID = 0x81B,TASK_CRASHINFO_UDATA_PTRS = 0x81C,TASK_CRASHINFO_MEMORY_LIMIT = 0x81D,TASK_CRASHINFO_LEDGER_INTERNAL = 0x81E,TASK_CRASHINFO_LEDGER_INTERNAL_COMPRESSED = 0x81F,TASK_CRASHINFO_LEDGER_IOKIT_MAPPED = 0x820,TASK_CRASHINFO_LEDGER_ALTERNATE_ACCOUNTING = 0x821,TASK_CRASHINFO_LEDGER_ALTERNATE_ACCOUNTING_COMPRESSED = 0x822,TASK_CRASHINFO_LEDGER_PURGEABLE_NONVOLATILE = 0x823,TASK_CRASHINFO_LEDGER_PURGEABLE_NONVOLATILE_COMPRESSED = 0x824,TASK_CRASHINFO_LEDGER_PAGE_TABLE = 0x825,TASK_CRASHINFO_LEDGER_PHYS_FOOTPRINT = 0x826,TASK_CRASHINFO_LEDGER_PHYS_FOOTPRINT_LIFETIME_MAX = 0x827,TASK_CRASHINFO_LEDGER_NETWORK_NONVOLATILE = 0x828,TASK_CRASHINFO_LEDGER_NETWORK_NONVOLATILE_COMPRESSED = 0x829,TASK_CRASHINFO_LEDGER_WIRED_MEM = 0x82A,};
enum MACRO_TCP6 {TCP6_MSS = 1024,};
enum MACRO_TCPS {TCPS_CLOSED = 0,TCPS_LISTEN = 1,TCPS_SYN_SENT = 2,TCPS_SYN_RECEIVED = 3,TCPS_ESTABLISHED = 4,TCPS_CLOSE_WAIT = 5,TCPS_FIN_WAIT_1 = 6,TCPS_CLOSING = 7,TCPS_LAST_ACK = 8,TCPS_FIN_WAIT_2 = 9,TCPS_TIME_WAIT = 10,};
enum MACRO_TCPT {TCPT_NTIMERS_EXT = 4,TCPT_REXMT = 0,TCPT_PERSIST = 1,TCPT_KEEP = 2,TCPT_2MSL = 3,TCPT_DELACK = 4,TCPT_MAX = 4,};
enum MACRO_TIME {TIME_MICROS_MAX = 1000000,HOST_INFO_MAX = 1024,KERNEL_VERSION_MAX = 512,KERNEL_BOOT_INFO_MAX = 4096,};
enum MACRO_TOOL {TOOL_CLANG = 1,TOOL_SWIFT = 2,TOOL_LD = 3,};
enum MACRO_TRAP {TRAP_BRKPT = 1,TRAP_TRACE = 2,};
enum MACRO_TRUE {TRUE = 1,};
enum MACRO_TTCP {TTCP_CLIENT_SND_WND = 4096,};
enum MACRO_UINT {UINT_MAX = 0xFFFFFFFF,INT_MAX = 0x7FFFFFFF,};
enum MACRO_USER {USER_ADDR_NULL = 0,};
enum MACRO_UTUN {UTUN_OPT_FLAGS = 1,UTUN_OPT_IFNAME = 2,UTUN_OPT_EXT_IFDATA_STATS = 3,UTUN_OPT_INC_IFDATA_STATS_IN = 4,UTUN_OPT_INC_IFDATA_STATS_OUT = 5,UTUN_OPT_SET_DELEGATE_INTERFACE = 15,UTUN_OPT_MAX_PENDING_PACKETS = 16,UTUN_OPT_ENABLE_CHANNEL = 17,UTUN_OPT_GET_CHANNEL_UUID = 18,UTUN_OPT_ENABLE_FLOWSWITCH = 19,UTUN_OPT_ENABLE_NETIF = 20,UTUN_OPT_SLOT_SIZE = 21,UTUN_OPT_NETIF_RING_SIZE = 22,UTUN_OPT_TX_FSW_RING_SIZE = 23,UTUN_OPT_RX_FSW_RING_SIZE = 24,UTUN_FLAGS_NO_OUTPUT = 1,UTUN_FLAGS_NO_INPUT = 2,UTUN_FLAGS_ENABLE_PROC_UUID = 4,};
enum MACRO_VEOF {VEOF = 0,VEOL = 1,VEOL2 = 2,};
enum MACRO_VNFS {VNFS_NOCACHE = 0x1,VNFS_CANTCACHE = 0x2,VNFS_ADDFSREF = 0x4,};
enum MACRO_WAIT {WAIT_ANY = -1,WAIT_MYPGRP = 0,};
enum MACRO_ZLIB {ZLIB_VERNUM = 0x1230,};
enum MACRO__DVD {_DVD_USE_DATA_CACHING_ = 1,};
enum MACRO___CC {__CC_HAS_FIX_FOR_11468135__ = 1,};
enum MACRO_code {code_emask = 0x3FFF,};
enum MACRO_gssd {gssd_mach_MSG_COUNT = 9,};
enum MACRO_i386 {i386_THREAD_STATE = 1,i386_FLOAT_STATE = 2,i386_EXCEPTION_STATE = 3,};
enum MACRO_kMAX {kMAX_MODIFIERS = 5,};
enum MACRO_kNUM {kNUM_SHIFTS_TO_ACTIVATE = 5,};
enum MACRO_mach {mach_vm_MSG_COUNT = 21,mach_voucher_MSG_COUNT = 5,mach_voucher_attr_control_MSG_COUNT = 2,};
enum MACRO_task {task_MSG_COUNT = 52,thread_act_MSG_COUNT = 28,vm_map_MSG_COUNT = 32,};
enum MACRO_vDSP {vDSP_Version0 = 671,vDSP_Version1 = 250,};
struct MinorTable;
typedef _NXEventExt NXEventExt;
typedef _NXEvent *NXEventPtr;
enum NuDCLFlags {kNuDCLDynamic = 0x2,kNuDCLUpdateBeforeCallback = 0x4,};
struct OSSet_vtbl; 
typedef PE_state PE_state_t;
struct RegEntryID {void *opaque[4];};
typedef __SC_Scatter SC_Scatter;
typedef SHA512_CTX SHA384_CTX;
typedef char SignedByte;
typedef char *UNDMessage;
typedef VPBlock *VPBlockPtr;
typedef evioLLEvent _NXLLEvent;
struct __if_clone;
typedef unsigned short __uint16_t;
typedef unsigned int __uint32_t;
typedef unsigned long long __uint64_t;
struct _evOffsets {int evGlobalsOffset;int evShmemOffset;};
enum ataRegMask {bATAAltSDevCValid = 0xE,bATAStatusCmdValid = 0x7,bATASDHValid = 0x6,bATACylinderHiValid = 0x5,bATACylinderLoValid = 0x4,bATASectorNumValid = 0x3,bATASectorCntValid = 0x2,bATAErrFeaturesValid = 0x1,bATADataValid = 0x0,mATAAltSDevCValid = 0x4000,mATAStatusCmdValid = 0x80,mATASDHValid = 0x40,mATACylinderHiValid = 0x20,mATACylinderLoValid = 0x10,mATASectorNumValid = 0x8,mATASectorCntValid = 0x4,mATAErrFeaturesValid = 0x2,mATADataValid = 0x1,};
typedef int atomic_int;
typedef audit_fstat au_fstat_t;
typedef au_qctrl au_qctrl_t;
struct audit_stat {unsigned int as_version;unsigned int as_numevent;int as_generated;int as_nonattrib;int as_kernel;int as_audit;int as_auditctl;int as_enqueue;int as_written;int as_wblocked;int as_rblocked;int as_dropped;int as_totalsize;unsigned int as_memused;};
typedef ccrng_state *(*ccrng_fn_t)(int *);
typedef int clock_id_t;
typedef unsigned char des_cblock[8];
typedef dt_entry dt_entry_t;
typedef int dump_fcn_t(void);
typedef fchecklv fchecklv_t;
struct fp_control {unsigned short invalid : 1;unsigned short denorm : 1;unsigned short zdiv : 1;unsigned short ovrfl : 1;unsigned short undfl : 1;unsigned short precis : 1;unsigned short : 2;unsigned short pc : 2;unsigned short rc : 2;unsigned short : 1;unsigned short : 3;};
typedef fsobj_id fsobj_id_t;
typedef __if_clone *if_clone_t;
struct ifa_msghdr {unsigned short ifam_msglen;unsigned char ifam_version;unsigned char ifam_type;int ifam_addrs;int ifam_flags;unsigned short ifam_index;int ifam_metric;};
typedef in6_addr in6_addr_t;
struct ipc_object;
typedef ipc_port *ipc_port_t;
typedef opaque_ipfilter *ipfilter_t;
typedef void (*kdp_send_t)(void *, unsigned int);
enum kxld_flags {kKxldFlagDefault = 0x0,kKXLDFlagIncludeRelocs = 0x1,};
typedef char *labelstr_t;
typedef struct __lck_attr__ lck_attr_t;
typedef struct __lck_spin_t__ lck_spin_t;
typedef ldt_desc ldt_desc_t;
typedef lock_set *lock_set_t;
typedef mcontext32 *mcontext_t;
struct mig_symtab {char *ms_routine_name;int ms_routine_number;void (*ms_routine)(void);};
typedef int mmap_fcn_t(void);
struct opmask_reg {char opmask_reg[8];};
typedef void *os_block_t;
struct posix_cred;
struct reg_values {unsigned int rv_value;char *rv_name;};
typedef int stop_fcn_t(tty *, int);
typedef tss_desc tss_desc_t;
typedef ucontext ucontext_t;
typedef vfstable *vfstable_t;
typedef _evGlobals EvGlobals;
typedef _evOffsets EvOffsets;
struct Expansion;
typedef OpaqueFFTSetupD *FFTSetupD;
typedef FWAddressStruct FWAddress;
enum IOFWSpeed {kFWSpeed100MBit = 0x0,kFWSpeed200MBit = 0x1,kFWSpeed400MBit = 0x2,kFWSpeed800MBit = 0x3,kFWSpeedReserved = 0x3,kFWSpeedUnknownMask = 0x80,kFWSpeedMaximum = 0x7FFFFFFF,kFWSpeedInvalid = 0x80000000,};
enum IOHIDKind {kHIUnknownDevice = 0x0,kHIKeyboardDevice = 0x1,kHIRelativePointingDevice = 0x2,};
enum MACRO_AES {AES_BLOCK_SIZE = 16,};
enum MACRO_API {API_TO_BE_DEPRECATED = 100000,};
enum MACRO_ARG {ARG_MAX = 262144,CHILD_MAX = 266,GID_MAX = 2147483647,LINK_MAX = 32767,};
enum MACRO_AST {AST_KEVENT_RETURN_TO_KERNEL = 0x1,AST_KEVENT_REDRIVE_THREADREQ = 0x2,};
enum MACRO_ATF {ATF_INUSE = 0x1,ATF_COM = 0x2,ATF_PERM = 0x4,ATF_PUBL = 0x8,ATF_USETRAILERS = 0x10,};
enum MACRO_ATM {ATM_SUBAID_INFO = 0x10,ATM_GETVALUE_INFO = 0x20,ATM_UNREGISTER_INFO = 0x30,};
enum MACRO_AUC {AUC_UNSET = 0,AUC_AUDITING = 1,AUC_NOAUDIT = 2,AUC_DISABLED = -1,};
enum MACRO_B75 {B75 = 75,};
enum MACRO_BIT {LONG_BIT = 32,WORD_BIT = 32,};
enum MACRO_BLK {BLK_READ = 0x1,BLK_WRITE = 0x2,BLK_META = 0x10,BLK_ONLYVALID = 0x80000000,};
enum MACRO_BPF {BPF_ALIGN = 0,BPF_RELEASE = 199606,BPF_MAXINSNS = 512,BPF_MAXBUFSIZE = 524288,BPF_MINBUFSIZE = 32,BPF_MAJOR_VERSION = 1,BPF_MINOR_VERSION = 1,};
enum MACRO_BS0 {BS0 = 0x0,BS1 = 0x8000,CRTBS = 0x10000,PRTERA = 0x20000,CRTERA = 0x40000,TILDE = 0x80000,MDMBUF = 0x100000,LITOUT = 0x200000,TOSTOP = 0x400000,FLUSHO = 0x800000,NOHANG = 0x1000000,L001000 = 0x2000000,CRTKIL = 0x4000000,PASS8 = 0x8000000,CTLECH = 0x10000000,PENDIN = 0x20000000,DECCTQ = 0x40000000,NOFLSH = 0x80000000,};
enum MACRO_BSD {BSD_PROC_EXIT = 1,BSD_PROC_FRCEXIT = 2,BSD_PROC_EXEC = 3,BSD_PROC_EXITREASON_CREATE = 4,BSD_PROC_EXITREASON_COMMIT = 5,BSD_MEMSTAT_SCAN = 1,BSD_MEMSTAT_JETSAM = 2,BSD_MEMSTAT_JETSAM_HIWAT = 3,BSD_MEMSTAT_FREEZE = 4,BSD_MEMSTAT_LATENCY_COALESCE = 5,BSD_MEMSTAT_UPDATE = 6,BSD_MEMSTAT_IDLE_DEMOTE = 7,BSD_MEMSTAT_CLEAR_ERRORS = 8,BSD_MEMSTAT_DIRTY_TRACK = 9,BSD_MEMSTAT_DIRTY_SET = 10,BSD_MEMSTAT_DIRTY_CLEAR = 11,BSD_MEMSTAT_FAST_JETSAM = 15,BSD_KEVENT_KQ_PROCESS_BEGIN = 1,BSD_KEVENT_KQ_PROCESS_END = 2,BSD_KEVENT_KQWQ_PROCESS_BEGIN = 3,BSD_KEVENT_KQWQ_PROCESS_END = 4,BSD_KEVENT_KQWQ_BIND = 5,BSD_KEVENT_KQWQ_UNBIND = 6,BSD_KEVENT_KQWQ_THREQUEST = 7,BSD_KEVENT_KQWL_PROCESS_BEGIN = 8,BSD_KEVENT_KQWL_PROCESS_END = 9,BSD_KEVENT_KQWL_THREQUEST = 10,BSD_KEVENT_KQWL_THADJUST = 11,BSD_KEVENT_KQ_REGISTER = 12,BSD_KEVENT_KQWQ_REGISTER = 13,BSD_KEVENT_KQWL_REGISTER = 14,BSD_KEVENT_KNOTE_ACTIVATE = 15,BSD_KEVENT_KQ_PROCESS = 16,BSD_KEVENT_KQWQ_PROCESS = 17,BSD_KEVENT_KQWL_PROCESS = 18,BSD_KEVENT_KQWL_BIND = 19,BSD_KEVENT_KQWL_UNBIND = 20,BSD_KEVENT_KNOTE_ENABLE = 21,BSD_KEVENT_KNOTE_VANISHED = 22,};
enum MACRO_BUF {BUF_WAIT = 0x1,BUF_WRITE_DATA = 0x1,BUF_SKIP_META = 0x2,BUF_INVALIDATE_LOCKED = 0x4,BUF_SKIP_NONLOCKED = 0x1,BUF_SKIP_LOCKED = 0x2,BUF_SCAN_CLEAN = 0x4,BUF_SCAN_DIRTY = 0x8,BUF_NOTIFY_BUSY = 0x10,BUF_RETURNED = 0x0,BUF_RETURNED_DONE = 0x1,BUF_CLAIMED = 0x2,BUF_CLAIMED_DONE = 0x3,};
enum MACRO_BUS {BUS_NOOP = 0,BUS_ADRALN = 1,BUS_ADRERR = 2,BUS_OBJERR = 3,};
enum MACRO_CCN {CCN_UNIT_SIZE = 4,CCN_UINT128_SUPPORT_FOR_64BIT_ARCH = 1,CCN_IOS = 0,CCN_OSX = 1,};
enum MACRO_CLD {CLD_NOOP = 0,CLD_EXITED = 1,CLD_KILLED = 2,CLD_DUMPED = 3,CLD_TRAPPED = 4,CLD_STOPPED = 5,CLD_CONTINUED = 6,};
enum MACRO_CPF {CPF_OVERWRITE = 0x1,CPF_IGNORE_MODE = 0x2,};
enum MACRO_CPU {CPU_STATE_MAX = 4,CPU_STATE_USER = 0,CPU_STATE_SYSTEM = 1,CPU_STATE_IDLE = 2,CPU_STATE_NICE = 3,CPU_ARCH_MASK = -16777216,CPU_ARCH_ABI64 = 16777216,CPU_TYPE_ANY = -1,CPU_TYPE_VAX = 1,CPU_TYPE_MC680x0 = 6,CPU_TYPE_X86 = 7,CPU_TYPE_MC98000 = 10,CPU_TYPE_HPPA = 11,CPU_TYPE_ARM = 12,CPU_TYPE_MC88000 = 13,CPU_TYPE_SPARC = 14,CPU_TYPE_I860 = 15,CPU_TYPE_POWERPC = 18,CPU_SUBTYPE_MASK = -16777216,CPU_SUBTYPE_LIB64 = -2147483648,CPU_SUBTYPE_MULTIPLE = -1,CPU_SUBTYPE_LITTLE_ENDIAN = 0,CPU_SUBTYPE_BIG_ENDIAN = 1,CPU_THREADTYPE_NONE = 0,CPU_SUBTYPE_VAX_ALL = 0,CPU_SUBTYPE_VAX780 = 1,CPU_SUBTYPE_VAX785 = 2,CPU_SUBTYPE_VAX750 = 3,CPU_SUBTYPE_VAX730 = 4,CPU_SUBTYPE_UVAXI = 5,CPU_SUBTYPE_UVAXII = 6,CPU_SUBTYPE_VAX8200 = 7,CPU_SUBTYPE_VAX8500 = 8,CPU_SUBTYPE_VAX8600 = 9,CPU_SUBTYPE_VAX8650 = 10,CPU_SUBTYPE_VAX8800 = 11,CPU_SUBTYPE_UVAXIII = 12,CPU_SUBTYPE_MC680x0_ALL = 1,CPU_SUBTYPE_MC68030 = 1,CPU_SUBTYPE_MC68040 = 2,CPU_SUBTYPE_MC68030_ONLY = 3,CPU_SUBTYPE_INTEL_FAMILY_MAX = 15,CPU_SUBTYPE_INTEL_MODEL_ALL = 0,CPU_SUBTYPE_X86_ALL = 3,CPU_SUBTYPE_X86_64_ALL = 3,CPU_SUBTYPE_X86_ARCH1 = 4,CPU_SUBTYPE_X86_64_H = 8,CPU_THREADTYPE_INTEL_HTT = 1,CPU_SUBTYPE_MIPS_ALL = 0,CPU_SUBTYPE_MIPS_R2300 = 1,CPU_SUBTYPE_MIPS_R2600 = 2,CPU_SUBTYPE_MIPS_R2800 = 3,CPU_SUBTYPE_MIPS_R2000a = 4,CPU_SUBTYPE_MIPS_R2000 = 5,CPU_SUBTYPE_MIPS_R3000a = 6,CPU_SUBTYPE_MIPS_R3000 = 7,CPU_SUBTYPE_MC98000_ALL = 0,CPU_SUBTYPE_MC98601 = 1,CPU_SUBTYPE_HPPA_ALL = 0,CPU_SUBTYPE_HPPA_7100 = 0,CPU_SUBTYPE_HPPA_7100LC = 1,CPU_SUBTYPE_MC88000_ALL = 0,CPU_SUBTYPE_MC88100 = 1,CPU_SUBTYPE_MC88110 = 2,CPU_SUBTYPE_SPARC_ALL = 0,CPU_SUBTYPE_I860_ALL = 0,CPU_SUBTYPE_I860_860 = 1,CPU_SUBTYPE_POWERPC_ALL = 0,CPU_SUBTYPE_POWERPC_601 = 1,CPU_SUBTYPE_POWERPC_602 = 2,CPU_SUBTYPE_POWERPC_603 = 3,CPU_SUBTYPE_POWERPC_603e = 4,CPU_SUBTYPE_POWERPC_603ev = 5,CPU_SUBTYPE_POWERPC_604 = 6,CPU_SUBTYPE_POWERPC_604e = 7,CPU_SUBTYPE_POWERPC_620 = 8,CPU_SUBTYPE_POWERPC_750 = 9,CPU_SUBTYPE_POWERPC_7400 = 10,CPU_SUBTYPE_POWERPC_7450 = 11,CPU_SUBTYPE_POWERPC_970 = 100,CPU_SUBTYPE_ARM_ALL = 0,CPU_SUBTYPE_ARM_V4T = 5,CPU_SUBTYPE_ARM_V6 = 6,CPU_SUBTYPE_ARM_V5TEJ = 7,CPU_SUBTYPE_ARM_XSCALE = 8,CPU_SUBTYPE_ARM_V7 = 9,CPU_SUBTYPE_ARM_V7F = 10,CPU_SUBTYPE_ARM_V7S = 11,CPU_SUBTYPE_ARM_V7K = 12,CPU_SUBTYPE_ARM_V6M = 14,CPU_SUBTYPE_ARM_V7M = 15,CPU_SUBTYPE_ARM_V7EM = 16,CPU_SUBTYPE_ARM_V8 = 13,CPU_SUBTYPE_ARM64_ALL = 0,CPU_SUBTYPE_ARM64_V8 = 1,};
enum MACRO_CR0 {CR0 = 0x0,CR1 = 0x1000,CR2 = 0x2000,};
enum MACRO_CR3 {CR3 = 0x3000,};
enum MACRO_CRF {CRF_NOMEMBERD = 0x1,CRF_MAC_ENFORCE = 0x2,};
enum MACRO_CS5 {CS5 = 0x0,CS6 = 0x100,CS7 = 0x200,};
enum MACRO_CS8 {CS8 = 0x300,CSTOPB = 0x400,CREAD = 0x800,PARENB = 0x1000,PARODD = 0x2000,HUPCL = 0x4000,CLOCAL = 0x8000,};
enum MACRO_CTL {CTL_FLAG_PRIVILEGED = 0x1,CTL_FLAG_REG_ID_UNIT = 0x2,CTL_FLAG_REG_SOCK_STREAM = 0x4,CTL_DATA_NOWAKEUP = 0x1,CTL_DATA_EOR = 0x2,};
enum MACRO_DBG {DBG_FUNC_START = 1,DBG_FUNC_END = 2,DBG_FUNC_NONE = 0,DBG_MACH = 1,DBG_NETWORK = 2,DBG_FSYSTEM = 3,DBG_BSD = 4,DBG_IOKIT = 5,DBG_DRIVERS = 6,DBG_TRACE = 7,DBG_DLIL = 8,DBG_PTHREAD = 9,DBG_CORESTORAGE = 10,DBG_CG = 11,DBG_MONOTONIC = 12,DBG_MISC = 20,DBG_SECURITY = 30,DBG_DYLD = 31,DBG_QT = 32,DBG_APPS = 33,DBG_LAUNCHD = 34,DBG_PERF = 37,DBG_IMPORTANCE = 38,DBG_BANK = 40,DBG_XPC = 41,DBG_ATM = 42,DBG_ARIADNE = 43,DBG_DAEMON = 44,DBG_ENERGYTRACE = 45,DBG_DISPATCH = 46,DBG_IMG = 49,DBG_UMALLOC = 51,DBG_TURNSTILE = 53,DBG_MIG = 255,DBG_MACH_EXCP_KTRAP_x86 = 2,DBG_MACH_EXCP_DFLT = 3,DBG_MACH_EXCP_IFLT = 4,DBG_MACH_EXCP_INTR = 5,DBG_MACH_EXCP_ALNG = 6,DBG_MACH_EXCP_UTRAP_x86 = 7,DBG_MACH_EXCP_FP = 8,DBG_MACH_EXCP_DECI = 9,DBG_MACH_CHUD = 10,DBG_MACH_SIGNPOST = 10,DBG_MACH_EXCP_SC = 12,DBG_MACH_EXCP_TRACE = 13,DBG_MACH_EXCP_EMUL = 14,DBG_MACH_IHDLR = 16,DBG_MACH_IPC = 32,DBG_MACH_RESOURCE = 37,DBG_MACH_VM = 48,DBG_MACH_LEAKS = 49,DBG_MACH_WORKINGSET = 50,DBG_MACH_SCHED = 64,DBG_MACH_MSGID_INVALID = 80,DBG_MACH_LOCKS = 96,DBG_MACH_PMAP = 112,DBG_MACH_CLOCK = 128,DBG_MACH_MP = 144,DBG_MACH_VM_PRESSURE = 160,DBG_MACH_STACKSHOT = 161,DBG_MACH_SFI = 162,DBG_MACH_ENERGY_PERF = 163,DBG_MACH_SYSDIAGNOSE = 164,DBG_MACH_ZALLOC = 165,DBG_MACH_THREAD_GROUP = 166,DBG_MACH_COALITION = 167,DBG_MACH_SHAREDREGION = 168,DBG_INTR_TYPE_UNKNOWN = 0,DBG_INTR_TYPE_IPI = 1,DBG_INTR_TYPE_TIMER = 2,DBG_INTR_TYPE_OTHER = 3,DBG_INTR_TYPE_PMI = 4,};
enum MACRO_DES {DES_ENCRYPT = 1,DES_DECRYPT = 0,};
enum MACRO_DEV {DEV_BSIZE = 512,DEV_BSHIFT = 9,};
enum MACRO_DIR {DIR_MNTSTATUS_MNTPOINT = 0x1,DIR_MNTSTATUS_TRIGGER = 0x2,};
enum MACRO_DLT {DLT_NULL = 0,DLT_EN10MB = 1,DLT_EN3MB = 2,DLT_AX25 = 3,DLT_PRONET = 4,DLT_CHAOS = 5,DLT_IEEE802 = 6,DLT_ARCNET = 7,DLT_SLIP = 8,DLT_PPP = 9,DLT_FDDI = 10,DLT_ATM_RFC1483 = 11,DLT_RAW = 12,DLT_SLIP_BSDOS = 15,DLT_PPP_BSDOS = 16,DLT_PFSYNC = 18,DLT_ATM_CLIP = 19,DLT_PPP_SERIAL = 50,DLT_PPP_ETHER = 51,DLT_SYMANTEC_FIREWALL = 99,DLT_MATCHING_MIN = 104,DLT_C_HDLC = 104,DLT_IEEE802_11 = 105,DLT_FRELAY = 107,DLT_LOOP = 108,DLT_ENC = 109,DLT_LINUX_SLL = 113,DLT_LTALK = 114,DLT_ECONET = 115,DLT_IPFILTER = 116,DLT_PFLOG = 117,DLT_CISCO_IOS = 118,DLT_PRISM_HEADER = 119,DLT_AIRONET_HEADER = 120,DLT_HHDLC = 121,DLT_IP_OVER_FC = 122,DLT_SUNATM = 123,DLT_RIO = 124,DLT_PCI_EXP = 125,DLT_AURORA = 126,DLT_IEEE802_11_RADIO = 127,DLT_TZSP = 128,DLT_ARCNET_LINUX = 129,DLT_JUNIPER_MLPPP = 130,DLT_JUNIPER_MLFR = 131,DLT_JUNIPER_ES = 132,DLT_JUNIPER_GGSN = 133,DLT_JUNIPER_MFR = 134,DLT_JUNIPER_ATM2 = 135,DLT_JUNIPER_SERVICES = 136,DLT_JUNIPER_ATM1 = 137,DLT_APPLE_IP_OVER_IEEE1394 = 138,DLT_MTP2_WITH_PHDR = 139,DLT_MTP2 = 140,DLT_MTP3 = 141,DLT_SCCP = 142,DLT_DOCSIS = 143,DLT_LINUX_IRDA = 144,DLT_IBM_SP = 145,DLT_IBM_SN = 146,DLT_USER0 = 147,DLT_USER1 = 148,DLT_USER2 = 149,DLT_USER3 = 150,DLT_USER4 = 151,DLT_USER5 = 152,DLT_USER6 = 153,DLT_USER7 = 154,DLT_USER8 = 155,DLT_USER9 = 156,DLT_USER10 = 157,DLT_USER11 = 158,DLT_USER12 = 159,DLT_USER13 = 160,DLT_USER14 = 161,DLT_USER15 = 162,DLT_IEEE802_11_RADIO_AVS = 163,DLT_JUNIPER_MONITOR = 164,DLT_BACNET_MS_TP = 165,DLT_PPP_PPPD = 166,DLT_JUNIPER_PPPOE = 167,DLT_JUNIPER_PPPOE_ATM = 168,DLT_GPRS_LLC = 169,DLT_GPF_T = 170,DLT_GPF_F = 171,DLT_GCOM_T1E1 = 172,DLT_GCOM_SERIAL = 173,DLT_JUNIPER_PIC_PEER = 174,DLT_ERF_ETH = 175,DLT_ERF_POS = 176,DLT_LINUX_LAPD = 177,DLT_JUNIPER_ETHER = 178,DLT_JUNIPER_PPP = 179,DLT_JUNIPER_FRELAY = 180,DLT_JUNIPER_CHDLC = 181,DLT_MFR = 182,DLT_JUNIPER_VP = 183,DLT_A429 = 184,DLT_A653_ICM = 185,DLT_USB = 186,DLT_BLUETOOTH_HCI_H4 = 187,DLT_IEEE802_16_MAC_CPS = 188,DLT_USB_LINUX = 189,DLT_CAN20B = 190,DLT_IEEE802_15_4_LINUX = 191,DLT_PPI = 192,DLT_IEEE802_16_MAC_CPS_RADIO = 193,DLT_JUNIPER_ISM = 194,DLT_IEEE802_15_4 = 195,DLT_SITA = 196,DLT_ERF = 197,DLT_RAIF1 = 198,DLT_IPMB = 199,DLT_JUNIPER_ST = 200,DLT_BLUETOOTH_HCI_H4_WITH_PHDR = 201,DLT_AX25_KISS = 202,DLT_LAPD = 203,DLT_PPP_WITH_DIR = 204,DLT_C_HDLC_WITH_DIR = 205,DLT_FRELAY_WITH_DIR = 206,DLT_LAPB_WITH_DIR = 207,DLT_IPMB_LINUX = 209,DLT_FLEXRAY = 210,DLT_MOST = 211,DLT_LIN = 212,DLT_X2E_SERIAL = 213,DLT_X2E_XORAYA = 214,DLT_IEEE802_15_4_NONASK_PHY = 215,DLT_LINUX_EVDEV = 216,DLT_GSMTAP_UM = 217,DLT_GSMTAP_ABIS = 218,DLT_MPLS = 219,DLT_USB_LINUX_MMAPPED = 220,DLT_DECT = 221,DLT_AOS = 222,DLT_WIHART = 223,DLT_FC_2 = 224,DLT_FC_2_WITH_FRAME_DELIMS = 225,DLT_IPNET = 226,DLT_CAN_SOCKETCAN = 227,DLT_IPV4 = 228,DLT_IPV6 = 229,DLT_IEEE802_15_4_NOFCS = 230,DLT_DBUS = 231,DLT_JUNIPER_VS = 232,DLT_JUNIPER_SRX_E2E = 233,DLT_JUNIPER_FIBRECHANNEL = 234,DLT_DVB_CI = 235,DLT_MUX27010 = 236,DLT_STANAG_5066_D_PDU = 237,DLT_JUNIPER_ATM_CEMIC = 238,DLT_NFLOG = 239,DLT_NETANALYZER = 240,DLT_NETANALYZER_TRANSPARENT = 241,DLT_IPOIB = 242,DLT_MPEG_2_TS = 243,DLT_NG40 = 244,DLT_NFC_LLCP = 245,DLT_USB_DARWIN = 266,DLT_MATCHING_MAX = 266,};
enum MACRO_DST {DST_NONE = 0,DST_USA = 1,DST_AUST = 2,DST_WET = 3,DST_MET = 4,DST_EET = 5,DST_CAN = 6,};
enum MACRO_ECC {ECC_EVENT_INFO_DATA_ENTRIES = 8,};
enum MACRO_EFL {EFL_CF = 0x1,EFL_PF = 0x4,EFL_AF = 0x10,EFL_ZF = 0x40,EFL_SF = 0x80,EFL_TF = 0x100,EFL_IF = 0x200,EFL_DF = 0x400,EFL_OF = 0x800,EFL_IOPL = 0x3000,EFL_IOPL_KERNEL = 0x0,EFL_IOPL_USER = 0x3000,EFL_NT = 0x4000,EFL_RF = 0x10000,EFL_VM = 0x20000,EFL_AC = 0x40000,EFL_VIF = 0x80000,EFL_VIP = 0x100000,EFL_ID = 0x200000,EFL_CLR = 0xFFF88028,EFL_SET = 0x2,};
enum MACRO_EIO {EIO = 5,};
enum MACRO_ERR {ERR_SUCCESS = 0,ERR_ROUTINE_NIL = 0,};
enum MACRO_EVK {EVK_BITS_PER_UNIT = 32,EVK_BITS_MASK = 31,EVK_BITS_SHIFT = 5,};
enum MACRO_EXC {EXC_TYPES_COUNT = 14,};
enum MACRO_FAT {FAT_MAGIC = 0xCAFEBABE,FAT_CIGAM = 0xBEBAFECA,};
enum MACRO_FF0 {FF0 = 0x0,FF1 = 0x4000,};
enum MACRO_FPC {FPC_IE = 0x1,FPC_DE = 0x2,FPC_ZE = 0x4,FPC_OE = 0x8,FPC_UE = 0x10,FPC_PE = 0x20,FPC_PC = 0x300,FPC_PC_24 = 0x0,FPC_PC_53 = 0x200,FPC_PC_64 = 0x300,FPC_RC = 0xC00,FPC_RC_RN = 0x0,FPC_RC_RD = 0x400,FPC_RC_RU = 0x800,FPC_RC_CHOP = 0xC00,FPC_IC = 0x1000,FPC_IC_PROJ = 0x0,FPC_IC_AFF = 0x1000,};
enum MACRO_FPE {FPE_NOOP = 0,FPE_FLTDIV = 1,FPE_FLTOVF = 2,FPE_FLTUND = 3,FPE_FLTRES = 4,FPE_FLTINV = 5,FPE_FLTSUB = 6,FPE_INTDIV = 7,FPE_INTOVF = 8,};
enum MACRO_FPS {FPS_IE = 0x1,FPS_DE = 0x2,FPS_ZE = 0x4,FPS_OE = 0x8,FPS_UE = 0x10,FPS_PE = 0x20,FPS_SF = 0x40,FPS_ES = 0x80,FPS_C0 = 0x100,FPS_C1 = 0x200,FPS_C2 = 0x400,FPS_TOS = 0x3800,FPS_TOS_SHIFT = 0xB,FPS_C3 = 0x4000,FPS_BUSY = 0x8000,};
enum MACRO_FST {FST_EOF = -1,};
enum MACRO_GID {GID_WHEEL = 0,GID_KMEM = 2,GID_TTY = 4,GID_OPERATOR = 5,GID_BIN = 7,GID_GAMES = 13,GID_DIALER = 68,GID_WINDOWSERVER = 88,};
enum MACRO_GPT {GPT_HDR_REVISION = 0x10000,GPT_ENT_ATTR_PLATFORM = 0x1,};
enum MACRO_GPU {GPU_SCOPE_CURRENT_THREAD = 0x1,GPU_SCOPE_MISC = 0x2,};
enum MACRO_HAS {HAS_AGDCGTRACETOKEN = 1,};
enum MACRO_HFS {HFS_ENCODINGBIAS = 1,HFS_EXTEND_FS = 2,HFS_ENABLE_JOURNALING = 534889,HFS_DISABLE_JOURNALING = 201330,HFS_REPLAY_JOURNAL = 1785621618,HFS_ENABLE_RESIZE_DEBUG = 4,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_DEBUG = 0x4,IFF_LOOPBACK = 0x8,IFF_POINTOPOINT = 0x10,IFF_NOTRAILERS = 0x20,IFF_RUNNING = 0x40,IFF_NOARP = 0x80,IFF_PROMISC = 0x100,IFF_ALLMULTI = 0x200,IFF_OACTIVE = 0x400,IFF_SIMPLEX = 0x800,IFF_LINK0 = 0x1000,IFF_LINK1 = 0x2000,IFF_LINK2 = 0x4000,IFF_MULTICAST = 0x8000,};
enum MACRO_IFM {IFM_ETHER = 0x20,IFM_10_T = 0x3,IFM_10_2 = 0x4,IFM_10_5 = 0x5,IFM_100_TX = 0x6,IFM_100_FX = 0x7,IFM_100_T4 = 0x8,IFM_100_VG = 0x9,IFM_100_T2 = 0xA,IFM_1000_SX = 0xB,IFM_10_STP = 0xC,IFM_10_FL = 0xD,IFM_1000_LX = 0xE,IFM_1000_CX = 0xF,IFM_1000_T = 0x10,IFM_HPNA_1 = 0x11,IFM_10G_SR = 0x12,IFM_10G_LR = 0x13,IFM_10G_CX4 = 0x14,IFM_10G_T = 0x15,IFM_2500_T = 0x16,IFM_5000_T = 0x17,IFM_TOKEN = 0x40,IFM_TOK_STP4 = 0x3,IFM_TOK_STP16 = 0x4,IFM_TOK_UTP4 = 0x5,IFM_TOK_UTP16 = 0x6,IFM_TOK_STP100 = 0x7,IFM_TOK_UTP100 = 0x8,IFM_TOK_ETR = 0x200,IFM_TOK_SRCRT = 0x400,IFM_TOK_ALLR = 0x800,IFM_TOK_DTR = 0x2000,IFM_TOK_CLASSIC = 0x4000,IFM_TOK_AUTO = 0x8000,IFM_FDDI = 0x60,IFM_FDDI_SMF = 0x3,IFM_FDDI_MMF = 0x4,IFM_FDDI_UTP = 0x5,IFM_FDDI_DA = 0x100,IFM_IEEE80211 = 0x80,IFM_IEEE80211_FH1 = 0x3,IFM_IEEE80211_FH2 = 0x4,IFM_IEEE80211_DS2 = 0x5,IFM_IEEE80211_DS5 = 0x6,IFM_IEEE80211_DS11 = 0x7,IFM_IEEE80211_DS1 = 0x8,IFM_IEEE80211_DS22 = 0x9,IFM_IEEE80211_ADHOC = 0x100,IFM_AUTO = 0x0,IFM_MANUAL = 0x1,IFM_NONE = 0x2,IFM_FDX = 0x100000,IFM_HDX = 0x200000,IFM_FLOW = 0x400000,IFM_EEE = 0x800000,IFM_FLAG0 = 0x1000000,IFM_FLAG1 = 0x2000000,IFM_FLAG2 = 0x4000000,IFM_LOOP = 0x8000000,IFM_NMASK = 0xE0,IFM_TMASK = 0x1F,IFM_IMASK = 0xF0000000,IFM_ISHIFT = 0x1C,IFM_OMASK = 0xFF00,IFM_GMASK = 0xFF00000,IFM_AVALID = 0x1,IFM_ACTIVE = 0x2,IFM_WAKESAMENET = 0x4,};
enum MACRO_IFQ {IFQ_MAXLEN = 128,};
enum MACRO_IFT {IFT_OTHER = 0x1,IFT_1822 = 0x2,IFT_HDH1822 = 0x3,IFT_X25DDN = 0x4,IFT_X25 = 0x5,IFT_ETHER = 0x6,IFT_ISO88023 = 0x7,IFT_ISO88024 = 0x8,IFT_ISO88025 = 0x9,IFT_ISO88026 = 0xA,IFT_STARLAN = 0xB,IFT_P10 = 0xC,IFT_P80 = 0xD,IFT_HY = 0xE,IFT_FDDI = 0xF,IFT_LAPB = 0x10,IFT_SDLC = 0x11,IFT_T1 = 0x12,IFT_CEPT = 0x13,IFT_ISDNBASIC = 0x14,IFT_ISDNPRIMARY = 0x15,IFT_PTPSERIAL = 0x16,IFT_PPP = 0x17,IFT_LOOP = 0x18,IFT_EON = 0x19,IFT_XETHER = 0x1A,IFT_NSIP = 0x1B,IFT_SLIP = 0x1C,IFT_ULTRA = 0x1D,IFT_DS3 = 0x1E,IFT_SIP = 0x1F,IFT_FRELAY = 0x20,IFT_RS232 = 0x21,IFT_PARA = 0x22,IFT_ARCNET = 0x23,IFT_ARCNETPLUS = 0x24,IFT_ATM = 0x25,IFT_MIOX25 = 0x26,IFT_SONET = 0x27,IFT_X25PLE = 0x28,IFT_ISO88022LLC = 0x29,IFT_LOCALTALK = 0x2A,IFT_SMDSDXI = 0x2B,IFT_FRELAYDCE = 0x2C,IFT_V35 = 0x2D,IFT_HSSI = 0x2E,IFT_HIPPI = 0x2F,IFT_MODEM = 0x30,IFT_AAL5 = 0x31,IFT_SONETPATH = 0x32,IFT_SONETVT = 0x33,IFT_SMDSICIP = 0x34,IFT_PROPVIRTUAL = 0x35,IFT_PROPMUX = 0x36,IFT_GIF = 0x37,IFT_FAITH = 0x38,IFT_STF = 0x39,IFT_L2VLAN = 0x87,IFT_IEEE8023ADLAG = 0x88,IFT_IEEE1394 = 0x90,IFT_BRIDGE = 0xD1,IFT_ENC = 0xF4,IFT_PFLOG = 0xF5,IFT_PFSYNC = 0xF6,IFT_CARP = 0xF8,IFT_PKTAP = 0xFE,IFT_CELLULAR = 0xFF,};
enum MACRO_ILL {ILL_NOOP = 0,ILL_ILLOPC = 1,ILL_ILLTRP = 2,ILL_PRVOPC = 3,ILL_ILLOPN = 4,ILL_ILLADR = 5,ILL_PRVREG = 6,ILL_COPROC = 7,ILL_BADSTK = 8,};
enum MACRO_IMG {IMG_SHSIZE = 512,};
enum MACRO_IMP {IMP_ASSERTION = 0x10,IMP_BOOST = 0x11,IMP_MSG = 0x12,IMP_WATCHPORT = 0x13,IMP_TASK_SUPPRESSION = 0x17,IMP_TASK_APPTYPE = 0x18,IMP_UPDATE = 0x19,IMP_USYNCH_QOS_OVERRIDE = 0x1A,IMP_DONOR_CHANGE = 0x1B,IMP_MAIN_THREAD_QOS = 0x1C,IMP_SYNC_IPC_QOS = 0x1D,IMP_HOLD = 0x2,IMP_DROP = 0x4,IMP_EXTERN = 0x8,IMP_BOOSTED = 0x1,IMP_UNBOOSTED = 0x2,IMP_MSG_SEND = 0x1,IMP_MSG_DELV = 0x2,IMP_UPDATE_TASK_CREATE = 0x1,IMP_USYNCH_ADD_OVERRIDE = 0x0,IMP_USYNCH_REMOVE_OVERRIDE = 0x1,IMP_DONOR_UPDATE_LIVE_DONOR_STATE = 0x0,IMP_DONOR_INIT_DONOR_STATE = 0x1,IMP_SYNC_IPC_QOS_APPLIED = 0x0,IMP_SYNC_IPC_QOS_REMOVED = 0x1,IMP_SYNC_IPC_QOS_OVERFLOW = 0x2,IMP_SYNC_IPC_QOS_UNDERFLOW = 0x3,};
enum MACRO_IN6 {IN6_PREFIX_ND = 1,IN6_PREFIX_RR = 2,};
enum MACRO_INP {INP_IPV4 = 0x1,INP_IPV6 = 0x2,INP_ANONPORT = 0x40,};
enum MACRO_INT {INT_MIN = -2147483648,};
enum MACRO_IOC {IOC_VOID = 536870912,IOC_OUT = 1073741824,IOC_IN = 2147483648,IOC_DIRMASK = 3758096384,};
enum MACRO_IOR {IOR_VALUES_PER_ELEMENT = 4,};
enum MACRO_IP6 {IP6_ALERT_MLD = 0x0,IP6_ALERT_RSVP = 0x100,IP6_ALERT_AN = 0x200,};
enum MACRO_IPC {IPC_PORT_NULL = 0,IPC_PORT_DEAD = -1,};
enum MACRO_KCS {KCS_SUBTYPE_FLAGS_NONE = 0x0,KCS_SUBTYPE_FLAGS_ARRAY = 0x1,KCS_SUBTYPE_FLAGS_STRUCT = 0x2,KCS_SUBTYPE_FLAGS_MERGE = 0x4,};
enum MACRO_KEV {KEV_CTL_SUBCLASS = 2,KEV_CTL_REGISTERED = 1,KEV_CTL_DEREGISTERED = 2,};
enum MACRO_KPC {KPC_MAX_COUNTERS = 32,KPC_X86_64_FIXED_CONFIGS = 1,KPC_CLASS_FIXED = 0,KPC_CLASS_CONFIGURABLE = 1,KPC_CLASS_POWER = 2,KPC_CLASS_RAWPMU = 3,KPC_PMU_ERROR = 0,KPC_PMU_INTEL_V3 = 1,KPC_PMU_ARM_APPLE = 2,KPC_PMU_INTEL_V2 = 3,KPC_PMU_ARM_V2 = 4,KPC_ALL_CPUS = 2147483648,};
enum MACRO_KPI {KPI_INTERFACE_EMBEDDED = 0,};
enum MACRO_LCK {LCK_SLEEP_DEFAULT = 0x0,LCK_SLEEP_UNLOCK = 0x1,LCK_SLEEP_SHARED = 0x2,LCK_SLEEP_EXCLUSIVE = 0x4,LCK_SLEEP_SPIN = 0x8,LCK_SLEEP_PROMOTED_PRI = 0x10,LCK_SLEEP_SPIN_ALWAYS = 0x20,LCK_SLEEP_MASK = 0x3F,LCK_ASSERT_OWNED = 0x1,LCK_ASSERT_NOTOWNED = 0x2,LCK_RW_TYPE_SHARED = 0x1,LCK_RW_TYPE_EXCLUSIVE = 0x2,};
enum MACRO_LLC {LLC_ISFRAMELEN = 4,LLC_UFRAMELEN = 3,LLC_FRMRLEN = 7,LLC_SNAPFRAMELEN = 8,LLC_UI = 3,LLC_UI_P = 19,LLC_DISC = 67,LLC_DISC_P = 83,LLC_UA = 99,LLC_UA_P = 115,LLC_TEST = 227,LLC_TEST_P = 243,LLC_FRMR = 135,LLC_FRMR_P = 151,LLC_DM = 15,LLC_DM_P = 31,LLC_XID = 175,LLC_XID_P = 191,LLC_SABME = 111,LLC_SABME_P = 127,LLC_RR = 1,LLC_RNR = 5,LLC_REJ = 9,LLC_INFO = 0,LLC_8021D_LSAP = 66,LLC_X25_LSAP = 126,LLC_SNAP_LSAP = 170,LLC_ISO_LSAP = 254,LLC_XID_FORMAT_BASIC = 129,LLC_XID_CLASS_I = 1,LLC_XID_CLASS_II = 3,LLC_XID_CLASS_III = 5,LLC_XID_CLASS_IV = 7,};
enum MACRO_LOG {LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,LOG_PRIMASK = 7,LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 72,LOG_AUTHPRIV = 80,LOG_FTP = 88,LOG_NETINFO = 96,LOG_REMOTEAUTH = 104,LOG_INSTALL = 112,LOG_RAS = 120,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,LOG_LAUNCHD = 192,LOG_NFACILITIES = 25,LOG_FACMASK = 1016,LOG_PRINTF = -1,LOG_PID = 1,LOG_CONS = 2,LOG_ODELAY = 4,LOG_NDELAY = 8,LOG_NOWAIT = 16,LOG_PERROR = 32,};
enum MACRO_MAC {MAC_OS_X_VERSION_10_0 = 1000,MAC_OS_X_VERSION_10_1 = 1010,MAC_OS_X_VERSION_10_2 = 1020,MAC_OS_X_VERSION_10_3 = 1030,MAC_OS_X_VERSION_10_4 = 1040,MAC_OS_X_VERSION_10_5 = 1050,MAC_OS_X_VERSION_10_6 = 1060,MAC_OS_X_VERSION_10_7 = 1070,MAC_OS_X_VERSION_10_8 = 1080,MAC_OS_X_VERSION_10_9 = 1090,MAC_OS_X_VERSION_10_10 = 101000,MAC_OS_X_VERSION_10_10_2 = 101002,MAC_OS_X_VERSION_10_10_3 = 101003,MAC_OS_X_VERSION_10_11 = 101100,MAC_OS_X_VERSION_10_11_2 = 101102,MAC_OS_X_VERSION_10_11_3 = 101103,MAC_OS_X_VERSION_10_11_4 = 101104,MAC_OS_X_VERSION_10_12 = 101200,MAC_OS_X_VERSION_10_12_1 = 101201,MAC_OS_X_VERSION_10_12_2 = 101202,MAC_OS_X_VERSION_10_12_4 = 101204,};
enum MACRO_MAP {MAP_MEM_NOOP = 0,MAP_MEM_COPYBACK = 1,MAP_MEM_IO = 2,MAP_MEM_WTHRU = 3,MAP_MEM_WCOMB = 4,MAP_MEM_INNERWBACK = 5,MAP_MEM_POSTED = 6,MAP_MEM_LEDGER_TAG_NETWORK = 8192,MAP_MEM_PURGABLE_KERNEL_ONLY = 16384,MAP_MEM_GRAB_SECLUDED = 32768,MAP_MEM_ONLY = 65536,MAP_MEM_NAMED_CREATE = 131072,MAP_MEM_PURGABLE = 262144,MAP_MEM_NAMED_REUSE = 524288,MAP_MEM_USE_DATA_ADDR = 1048576,MAP_MEM_VM_COPY = 2097152,MAP_MEM_VM_SHARE = 4194304,MAP_MEM_4K_DATA_ADDR = 8388608,MAP_MEM_FLAGS_MASK = 16776960,};
enum MACRO_MAX {INT8_MAX = 127,INT16_MAX = 32767,INT32_MAX = 2147483647,INT64_MAX = 9223372036854775807,};
enum MACRO_MCL {MCL_CURRENT = 0x1,MCL_FUTURE = 0x2,};
enum MACRO_MCS {MCS_DISABLED = 0,MCS_ONLINE = 1,MCS_PURGING = 2,MCS_OFFLINE = 3,};
enum MACRO_MD5 {MD5_DIGEST_LENGTH = 16,};
enum MACRO_MIG {MIG_ROUTINE_ARG_DESCRIPTOR_NULL = 0,MIG_ROUTINE_DESCRIPTOR_NULL = 0,MIG_SUBSYSTEM_NULL = 0,MIG_TYPE_ERROR = -300,MIG_REPLY_MISMATCH = -301,MIG_REMOTE_ERROR = -302,MIG_BAD_ID = -303,MIG_BAD_ARGUMENTS = -304,MIG_NO_REPLY = -305,MIG_EXCEPTION = -306,MIG_ARRAY_TOO_LARGE = -307,MIG_SERVER_DIED = -308,MIG_TRAILER_ERROR = -309,};
enum MACRO_MIN {INT8_MIN = -128,INT16_MIN = -32768,};
enum MACRO_MLD {MLD_LISTENER_QUERY = 130,MLD_LISTENER_REPORT = 131,MLD_LISTENER_DONE = 132,};
enum MACRO_MNT {MNT_RDONLY = 0x1,MNT_SYNCHRONOUS = 0x2,MNT_NOEXEC = 0x4,MNT_NOSUID = 0x8,MNT_NODEV = 0x10,MNT_UNION = 0x20,MNT_ASYNC = 0x40,MNT_CPROTECT = 0x80,MNT_EXPORTED = 0x100,MNT_QUARANTINE = 0x400,MNT_LOCAL = 0x1000,MNT_QUOTA = 0x2000,MNT_ROOTFS = 0x4000,MNT_DOVOLFS = 0x8000,MNT_DONTBROWSE = 0x100000,MNT_IGNORE_OWNERSHIP = 0x200000,MNT_AUTOMOUNTED = 0x400000,MNT_JOURNALED = 0x800000,MNT_NOUSERXATTR = 0x1000000,MNT_DEFWRITE = 0x2000000,MNT_MULTILABEL = 0x4000000,MNT_NOATIME = 0x10000000,MNT_SNAPSHOT = 0x40000000,MNT_UPDATE = 0x10000,MNT_NOBLOCK = 0x20000,MNT_RELOAD = 0x40000,MNT_FORCE = 0x80000,};
enum MACRO_MOD {MOD_OFFSET = 0x1,MOD_FREQUENCY = 0x2,MOD_MAXERROR = 0x4,MOD_ESTERROR = 0x8,MOD_STATUS = 0x10,MOD_TIMECONST = 0x20,MOD_PPSMAX = 0x40,MOD_TAI = 0x80,MOD_MICRO = 0x1000,MOD_NANO = 0x2000,MOD_CLKB = 0x4000,MOD_CLKA = 0x8000,};
enum MACRO_MPO {MPO_CONTEXT_AS_GUARD = 0x1,MPO_QLIMIT = 0x2,MPO_TEMPOWNER = 0x4,MPO_IMPORTANCE_RECEIVER = 0x8,MPO_INSERT_SEND_RIGHT = 0x10,MPO_STRICT = 0x20,MPO_DENAP_RECEIVER = 0x40,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_EOR = 0x8,MSG_TRUNC = 0x10,MSG_CTRUNC = 0x20,MSG_WAITALL = 0x40,MSG_DONTWAIT = 0x80,MSG_EOF = 0x100,MSG_WAITSTREAM = 0x200,MSG_FLUSH = 0x400,MSG_HOLD = 0x800,MSG_SEND = 0x1000,MSG_HAVEMORE = 0x2000,MSG_RCVMORE = 0x4000,MSG_NEEDSA = 0x10000,MSG_USEUPCALL = 0x80000000,};
enum MACRO_NDR {NDR_PROTOCOL_2_0 = 0,NDR_INT_BIG_ENDIAN = 0,NDR_INT_LITTLE_ENDIAN = 1,NDR_FLOAT_IEEE = 0,NDR_FLOAT_VAX = 1,NDR_FLOAT_CRAY = 2,NDR_FLOAT_IBM = 3,NDR_CHAR_ASCII = 0,NDR_CHAR_EBCDIC = 1,};
enum MACRO_NET {NET_SERVICE_TYPE_BE = 0,NET_SERVICE_TYPE_BK = 1,NET_SERVICE_TYPE_SIG = 2,NET_SERVICE_TYPE_VI = 3,NET_SERVICE_TYPE_VO = 4,NET_SERVICE_TYPE_RV = 5,NET_SERVICE_TYPE_AV = 6,NET_SERVICE_TYPE_OAM = 7,NET_SERVICE_TYPE_RD = 8,};
enum MACRO_NEW {NEW_LOCAL_SHARED_REGIONS = 0x2,};
enum MACRO_NFF {NFF_BEFORE = 0x1,NFF_AFTER = 0x2,};
enum MACRO_NKE {NKE_OK = 0,NKE_REMOVE = -1,};
enum MACRO_NL0 {NL0 = 0x0,NL1 = 0x100,NL2 = 0x200,};
enum MACRO_NL3 {NL3 = 0x300,};
enum MACRO_NTP {NTP_API = 4,};
enum MACRO_OID {OID_AUTO = -1,OID_AUTO_START = 100,};
enum MACRO_PAL {PAL_HIBERNATE_MAGIC_1 = 0xFEEDFACEDEADBEEF,PAL_HIBERNATE_MAGIC_2 = 0x41B312133714,};
enum MACRO_PRC {PRC_IFDOWN = 0,PRC_ROUTEDEAD = 1,PRC_IFUP = 2,PRC_QUENCH2 = 3,PRC_QUENCH = 4,PRC_MSGSIZE = 5,PRC_HOSTDEAD = 6,PRC_HOSTUNREACH = 7,PRC_UNREACH_NET = 8,PRC_UNREACH_HOST = 9,PRC_UNREACH_PROTOCOL = 10,PRC_UNREACH_PORT = 11,PRC_UNREACH_SRCFAIL = 13,PRC_REDIRECT_NET = 14,PRC_REDIRECT_HOST = 15,PRC_REDIRECT_TOSNET = 16,PRC_REDIRECT_TOSHOST = 17,PRC_TIMXCEED_INTRANS = 18,PRC_TIMXCEED_REASS = 19,PRC_PARAMPROB = 20,PRC_UNREACH_ADMIN_PROHIB = 21,PRC_NCMDS = 22,};
enum MACRO_RPC {RPC_SIGBUF_SIZE = 8,RPC_SUBSYSTEM_NULL = 0,};
enum MACRO_RPM {RPM_PCO_ADD = 1,RPM_PCO_CHANGE = 2,RPM_PCO_SETGLOBAL = 3,RPM_PCO_MAX = 4,};
enum MACRO_RSA {RSA_MAX_KEY_BITSIZE = 4096,};
enum MACRO_RTA {RTA_DST = 0x1,RTA_GATEWAY = 0x2,RTA_NETMASK = 0x4,RTA_GENMASK = 0x8,RTA_IFP = 0x10,RTA_IFA = 0x20,RTA_AUTHOR = 0x40,RTA_BRD = 0x80,};
enum MACRO_RTF {RTF_UP = 0x1,RTF_GATEWAY = 0x2,RTF_HOST = 0x4,RTF_REJECT = 0x8,RTF_DYNAMIC = 0x10,RTF_MODIFIED = 0x20,RTF_DONE = 0x40,RTF_DELCLONE = 0x80,RTF_CLONING = 0x100,RTF_XRESOLVE = 0x200,RTF_LLINFO = 0x400,RTF_LLDATA = 0x400,RTF_STATIC = 0x800,RTF_BLACKHOLE = 0x1000,RTF_NOIFREF = 0x2000,RTF_PROTO2 = 0x4000,RTF_PROTO1 = 0x8000,RTF_PRCLONING = 0x10000,RTF_WASCLONED = 0x20000,RTF_PROTO3 = 0x40000,RTF_PINNED = 0x100000,RTF_LOCAL = 0x200000,RTF_BROADCAST = 0x400000,RTF_MULTICAST = 0x800000,RTF_IFSCOPE = 0x1000000,RTF_CONDEMNED = 0x2000000,RTF_IFREF = 0x4000000,RTF_PROXY = 0x8000000,RTF_ROUTER = 0x10000000,RTF_DEAD = 0x20000000,};
enum MACRO_RTM {RTM_RTTUNIT = 1000000,};
enum MACRO_RTV {RTV_MTU = 0x1,RTV_HOPCOUNT = 0x2,RTV_EXPIRE = 0x4,RTV_RPIPE = 0x8,RTV_SPIPE = 0x10,RTV_SSTHRESH = 0x20,RTV_RTT = 0x40,RTV_RTTVAR = 0x80,};
enum MACRO_SAE {SAE_ASSOCID_ANY = 0,SAE_ASSOCID_ALL = 4294967295,SAE_CONNID_ANY = 0,SAE_CONNID_ALL = 4294967295,};
enum MACRO_SCM {SCM_RIGHTS = 0x1,SCM_TIMESTAMP = 0x2,SCM_CREDS = 0x3,SCM_TIMESTAMP_MONOTONIC = 0x4,};
enum MACRO_SEL {SEL_GDT = 0,SEL_LDT = 1,};
enum MACRO_SEM {SEM_UNDO = 0x1000,SEM_A = 0x80,SEM_R = 0x100,};
enum MACRO_SFI {SFI_SET_WINDOW = 0x0,SFI_CANCEL_WINDOW = 0x1,SFI_SET_CLASS_OFFTIME = 0x2,SFI_CANCEL_CLASS_OFFTIME = 0x3,SFI_THREAD_DEFER = 0x4,SFI_OFF_TIMER = 0x5,SFI_ON_TIMER = 0x6,SFI_WAIT_CANCELED = 0x7,SFI_PID_SET_MANAGED = 0x8,SFI_PID_CLEAR_MANAGED = 0x9,SFI_GLOBAL_DEFER = 0xA,};
enum MACRO_SHA {SHA_DIGEST_LENGTH = 20,};
enum MACRO_SHM {SHM_RDONLY = 0x1000,SHM_RND = 0x2000,};
enum MACRO_SIG {SIG_BLOCK = 1,SIG_UNBLOCK = 2,SIG_SETMASK = 3,};
enum MACRO_SIN {SIN_PROXY = 0x1,SIN_ROUTER = 0x2,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_STA {STA_PLL = 0x1,STA_PPSFREQ = 0x2,STA_PPSTIME = 0x4,STA_FLL = 0x8,STA_INS = 0x10,STA_DEL = 0x20,STA_UNSYNC = 0x40,STA_FREQHOLD = 0x80,STA_PPSSIGNAL = 0x100,STA_PPSJITTER = 0x200,STA_PPSWANDER = 0x400,STA_PPSERROR = 0x800,STA_CLOCKERR = 0x1000,STA_NANO = 0x2000,STA_MODE = 0x4000,STA_CLK = 0x8000,};
enum MACRO_SYS {SYS_syscall = 0,SYS_exit = 1,SYS_fork = 2,SYS_read = 3,SYS_write = 4,SYS_open = 5,SYS_close = 6,SYS_wait4 = 7,SYS_link = 9,SYS_unlink = 10,SYS_chdir = 12,SYS_fchdir = 13,SYS_mknod = 14,SYS_chmod = 15,SYS_chown = 16,SYS_getfsstat = 18,SYS_getpid = 20,SYS_setuid = 23,SYS_getuid = 24,SYS_geteuid = 25,SYS_ptrace = 26,SYS_recvmsg = 27,SYS_sendmsg = 28,SYS_recvfrom = 29,SYS_accept = 30,SYS_getpeername = 31,SYS_getsockname = 32,SYS_access = 33,SYS_chflags = 34,SYS_fchflags = 35,SYS_sync = 36,SYS_kill = 37,SYS_getppid = 39,SYS_dup = 41,SYS_pipe = 42,SYS_getegid = 43,SYS_sigaction = 46,SYS_getgid = 47,SYS_sigprocmask = 48,SYS_getlogin = 49,SYS_setlogin = 50,SYS_acct = 51,SYS_sigpending = 52,SYS_sigaltstack = 53,SYS_ioctl = 54,SYS_reboot = 55,SYS_revoke = 56,SYS_symlink = 57,SYS_readlink = 58,SYS_execve = 59,SYS_umask = 60,SYS_chroot = 61,SYS_msync = 65,SYS_vfork = 66,SYS_munmap = 73,SYS_mprotect = 74,SYS_madvise = 75,SYS_mincore = 78,SYS_getgroups = 79,SYS_setgroups = 80,SYS_getpgrp = 81,SYS_setpgid = 82,SYS_setitimer = 83,SYS_swapon = 85,SYS_getitimer = 86,SYS_getdtablesize = 89,SYS_dup2 = 90,SYS_fcntl = 92,SYS_select = 93,SYS_fsync = 95,SYS_setpriority = 96,SYS_socket = 97,SYS_connect = 98,SYS_getpriority = 100,SYS_bind = 104,SYS_setsockopt = 105,SYS_listen = 106,SYS_sigsuspend = 111,SYS_gettimeofday = 116,SYS_getrusage = 117,SYS_getsockopt = 118,SYS_readv = 120,SYS_writev = 121,SYS_settimeofday = 122,SYS_fchown = 123,SYS_fchmod = 124,SYS_setreuid = 126,SYS_setregid = 127,SYS_rename = 128,SYS_flock = 131,SYS_mkfifo = 132,SYS_sendto = 133,SYS_shutdown = 134,SYS_socketpair = 135,SYS_mkdir = 136,SYS_rmdir = 137,SYS_utimes = 138,SYS_futimes = 139,SYS_adjtime = 140,SYS_gethostuuid = 142,SYS_setsid = 147,SYS_getpgid = 151,SYS_setprivexec = 152,SYS_pread = 153,SYS_pwrite = 154,SYS_nfssvc = 155,SYS_statfs = 157,SYS_fstatfs = 158,SYS_unmount = 159,SYS_getfh = 161,SYS_quotactl = 165,SYS_mount = 167,SYS_csops = 169,SYS_csops_audittoken = 170,SYS_waitid = 173,SYS_kdebug_typefilter = 177,SYS_kdebug_trace_string = 178,SYS_kdebug_trace64 = 179,SYS_kdebug_trace = 180,SYS_setgid = 181,SYS_setegid = 182,SYS_seteuid = 183,SYS_sigreturn = 184,SYS_thread_selfcounts = 186,SYS_fdatasync = 187,SYS_stat = 188,SYS_fstat = 189,SYS_lstat = 190,SYS_pathconf = 191,SYS_fpathconf = 192,SYS_getrlimit = 194,SYS_setrlimit = 195,SYS_getdirentries = 196,SYS_mmap = 197,SYS_lseek = 199,SYS_truncate = 200,SYS_ftruncate = 201,SYS_sysctl = 202,SYS_mlock = 203,SYS_munlock = 204,SYS_undelete = 205,SYS_open_dprotected_np = 216,SYS_getattrlist = 220,SYS_setattrlist = 221,SYS_getdirentriesattr = 222,SYS_exchangedata = 223,SYS_searchfs = 225,SYS_delete = 226,SYS_copyfile = 227,SYS_fgetattrlist = 228,SYS_fsetattrlist = 229,SYS_poll = 230,SYS_watchevent = 231,SYS_waitevent = 232,SYS_modwatch = 233,SYS_getxattr = 234,SYS_fgetxattr = 235,SYS_setxattr = 236,SYS_fsetxattr = 237,SYS_removexattr = 238,SYS_fremovexattr = 239,SYS_listxattr = 240,SYS_flistxattr = 241,SYS_fsctl = 242,SYS_initgroups = 243,SYS_posix_spawn = 244,SYS_ffsctl = 245,SYS_nfsclnt = 247,SYS_fhopen = 248,SYS_minherit = 250,SYS_semsys = 251,SYS_msgsys = 252,SYS_shmsys = 253,SYS_semctl = 254,SYS_semget = 255,SYS_semop = 256,SYS_msgctl = 258,SYS_msgget = 259,SYS_msgsnd = 260,SYS_msgrcv = 261,SYS_shmat = 262,SYS_shmctl = 263,SYS_shmdt = 264,SYS_shmget = 265,SYS_shm_open = 266,SYS_shm_unlink = 267,SYS_sem_open = 268,SYS_sem_close = 269,SYS_sem_unlink = 270,SYS_sem_wait = 271,SYS_sem_trywait = 272,SYS_sem_post = 273,SYS_sysctlbyname = 274,SYS_open_extended = 277,SYS_umask_extended = 278,SYS_stat_extended = 279,SYS_lstat_extended = 280,SYS_fstat_extended = 281,SYS_chmod_extended = 282,SYS_fchmod_extended = 283,SYS_access_extended = 284,SYS_settid = 285,SYS_gettid = 286,SYS_setsgroups = 287,SYS_getsgroups = 288,SYS_setwgroups = 289,SYS_getwgroups = 290,SYS_mkfifo_extended = 291,SYS_mkdir_extended = 292,SYS_identitysvc = 293,SYS_shared_region_check_np = 294,SYS_vm_pressure_monitor = 296,SYS_psynch_rw_longrdlock = 297,SYS_psynch_rw_yieldwrlock = 298,SYS_psynch_rw_downgrade = 299,SYS_psynch_rw_upgrade = 300,SYS_psynch_mutexwait = 301,SYS_psynch_mutexdrop = 302,SYS_psynch_cvbroad = 303,SYS_psynch_cvsignal = 304,SYS_psynch_cvwait = 305,SYS_psynch_rw_rdlock = 306,SYS_psynch_rw_wrlock = 307,SYS_psynch_rw_unlock = 308,SYS_psynch_rw_unlock2 = 309,SYS_getsid = 310,SYS_settid_with_pid = 311,SYS_psynch_cvclrprepost = 312,SYS_aio_fsync = 313,SYS_aio_return = 314,SYS_aio_suspend = 315,SYS_aio_cancel = 316,SYS_aio_error = 317,SYS_aio_read = 318,SYS_aio_write = 319,SYS_lio_listio = 320,SYS_iopolicysys = 322,SYS_process_policy = 323,SYS_mlockall = 324,SYS_munlockall = 325,SYS_issetugid = 327,SYS___pthread_kill = 328,SYS___pthread_sigmask = 329,SYS___sigwait = 330,SYS___disable_threadsignal = 331,SYS___pthread_markcancel = 332,SYS___pthread_canceled = 333,SYS___semwait_signal = 334,SYS_proc_info = 336,SYS_sendfile = 337,SYS_stat64 = 338,SYS_fstat64 = 339,SYS_lstat64 = 340,SYS_stat64_extended = 341,SYS_lstat64_extended = 342,SYS_fstat64_extended = 343,SYS_getdirentries64 = 344,SYS_statfs64 = 345,SYS_fstatfs64 = 346,SYS_getfsstat64 = 347,SYS___pthread_chdir = 348,SYS___pthread_fchdir = 349,SYS_audit = 350,SYS_auditon = 351,SYS_getauid = 353,SYS_setauid = 354,SYS_getaudit_addr = 357,SYS_setaudit_addr = 358,SYS_auditctl = 359,SYS_bsdthread_create = 360,SYS_bsdthread_terminate = 361,SYS_kqueue = 362,SYS_kevent = 363,SYS_lchown = 364,SYS_bsdthread_register = 366,SYS_workq_open = 367,SYS_workq_kernreturn = 368,SYS_kevent64 = 369,SYS___old_semwait_signal = 370,SYS___old_semwait_signal_nocancel = 371,SYS_thread_selfid = 372,SYS_ledger = 373,SYS_kevent_qos = 374,SYS_kevent_id = 375,SYS___mac_execve = 380,SYS___mac_syscall = 381,SYS___mac_get_file = 382,SYS___mac_set_file = 383,SYS___mac_get_link = 384,SYS___mac_set_link = 385,SYS___mac_get_proc = 386,SYS___mac_set_proc = 387,SYS___mac_get_fd = 388,SYS___mac_set_fd = 389,SYS___mac_get_pid = 390,SYS_pselect = 394,SYS_pselect_nocancel = 395,SYS_read_nocancel = 396,SYS_write_nocancel = 397,SYS_open_nocancel = 398,SYS_close_nocancel = 399,SYS_wait4_nocancel = 400,SYS_recvmsg_nocancel = 401,SYS_sendmsg_nocancel = 402,SYS_recvfrom_nocancel = 403,SYS_accept_nocancel = 404,SYS_msync_nocancel = 405,SYS_fcntl_nocancel = 406,SYS_select_nocancel = 407,SYS_fsync_nocancel = 408,SYS_connect_nocancel = 409,SYS_sigsuspend_nocancel = 410,SYS_readv_nocancel = 411,SYS_writev_nocancel = 412,SYS_sendto_nocancel = 413,SYS_pread_nocancel = 414,SYS_pwrite_nocancel = 415,SYS_waitid_nocancel = 416,SYS_poll_nocancel = 417,SYS_msgsnd_nocancel = 418,SYS_msgrcv_nocancel = 419,SYS_sem_wait_nocancel = 420,SYS_aio_suspend_nocancel = 421,SYS___sigwait_nocancel = 422,SYS___semwait_signal_nocancel = 423,SYS___mac_mount = 424,SYS___mac_get_mount = 425,SYS___mac_getfsstat = 426,SYS_fsgetpath = 427,SYS_audit_session_self = 428,SYS_audit_session_join = 429,SYS_fileport_makeport = 430,SYS_fileport_makefd = 431,SYS_audit_session_port = 432,SYS_pid_suspend = 433,SYS_pid_resume = 434,SYS_pid_hibernate = 435,SYS_pid_shutdown_sockets = 436,SYS_shared_region_map_and_slide_np = 438,SYS_kas_info = 439,SYS_memorystatus_control = 440,SYS_guarded_open_np = 441,SYS_guarded_close_np = 442,SYS_guarded_kqueue_np = 443,SYS_change_fdguard_np = 444,SYS_usrctl = 445,SYS_proc_rlimit_control = 446,SYS_connectx = 447,SYS_disconnectx = 448,SYS_peeloff = 449,SYS_socket_delegate = 450,SYS_telemetry = 451,SYS_proc_uuid_policy = 452,SYS_memorystatus_get_level = 453,SYS_system_override = 454,SYS_vfs_purge = 455,SYS_sfi_ctl = 456,SYS_sfi_pidctl = 457,SYS_coalition = 458,SYS_coalition_info = 459,SYS_necp_match_policy = 460,SYS_getattrlistbulk = 461,SYS_clonefileat = 462,SYS_openat = 463,SYS_openat_nocancel = 464,SYS_renameat = 465,SYS_faccessat = 466,SYS_fchmodat = 467,SYS_fchownat = 468,SYS_fstatat = 469,SYS_fstatat64 = 470,SYS_linkat = 471,SYS_unlinkat = 472,SYS_readlinkat = 473,SYS_symlinkat = 474,SYS_mkdirat = 475,SYS_getattrlistat = 476,SYS_proc_trace_log = 477,SYS_bsdthread_ctl = 478,SYS_openbyid_np = 479,SYS_recvmsg_x = 480,SYS_sendmsg_x = 481,SYS_thread_selfusage = 482,SYS_csrctl = 483,SYS_guarded_open_dprotected_np = 484,SYS_guarded_write_np = 485,SYS_guarded_pwrite_np = 486,SYS_guarded_writev_np = 487,SYS_renameatx_np = 488,SYS_mremap_encrypted = 489,SYS_netagent_trigger = 490,SYS_stack_snapshot_with_config = 491,SYS_microstackshot = 492,SYS_grab_pgo_data = 493,SYS_persona = 494,SYS_work_interval_ctl = 499,SYS_getentropy = 500,SYS_necp_open = 501,SYS_necp_client_action = 502,SYS_ulock_wait = 515,SYS_ulock_wake = 516,SYS_fclonefileat = 517,SYS_fs_snapshot = 518,SYS_terminate_with_payload = 520,SYS_abort_with_payload = 521,SYS_necp_session_open = 522,SYS_necp_session_action = 523,SYS_setattrlistat = 524,SYS_net_qos_guideline = 525,SYS_fmount = 526,SYS_ntp_adjtime = 527,SYS_ntp_gettime = 528,SYS_os_fault_with_payload = 529,SYS_kqueue_workloop_ctl = 530,SYS_MAXSYSCALL = 532,SYS_invalid = 63,};
enum MACRO_TCP {TCP_MAX_SACK = 4,TCP_MSS = 512,TCP_MINMSS = 216,};
enum MACRO_TID {TID_NULL = 0,THR_ACT_NULL = 0,IPC_SPACE_NULL = 0,IPC_SPACE_INSPECT_NULL = 0,COALITION_NULL = 0,HOST_NULL = 0,HOST_PRIV_NULL = 0,HOST_SECURITY_NULL = 0,PROCESSOR_SET_NULL = 0,PROCESSOR_NULL = 0,SEMAPHORE_NULL = 0,LOCK_SET_NULL = 0,LEDGER_NULL = 0,ALARM_NULL = 0,CLOCK_NULL = 0,UND_SERVER_NULL = 0,};
enum MACRO_TLB {TLB_INST = 0,TLB_DATA = 1,TLB_SMALL = 0,TLB_LARGE = 1,};
enum MACRO_TPF {TPF_NONE = 0,TPF_EXEC_COPY = 2,};
enum MACRO_UBC {UBC_PUSHDIRTY = 0x1,UBC_PUSHALL = 0x2,UBC_INVALIDATE = 0x4,UBC_SYNC = 0x8,};
enum MACRO_UDP {UDP_NOCKSUM = 0x1,};
enum MACRO_UID {UID_ROOT = 0,UID_BIN = 3,UID_UUCP = 66,};
enum MACRO_UIO {UIO_MAXIOV = 1024,UIO_SMALLIOV = 8,};
enum MACRO_UND {UND_REPLY_NULL = 0,XML_DATA_NULL = 0,};
enum MACRO_UPL {UPL_FLAGS_NONE = 0x0,UPL_COPYOUT_FROM = 0x1,UPL_PRECIOUS = 0x2,UPL_NO_SYNC = 0x4,UPL_CLEAN_IN_PLACE = 0x8,UPL_NOBLOCK = 0x10,UPL_RET_ONLY_DIRTY = 0x20,UPL_SET_INTERNAL = 0x40,UPL_QUERY_OBJECT_TYPE = 0x80,UPL_RET_ONLY_ABSENT = 0x100,UPL_FILE_IO = 0x200,UPL_SET_LITE = 0x400,UPL_SET_INTERRUPTIBLE = 0x800,UPL_SET_IO_WIRE = 0x1000,UPL_FOR_PAGEOUT = 0x2000,UPL_WILL_BE_DUMPED = 0x4000,UPL_FORCE_DATA_SYNC = 0x8000,UPL_PAGE_TICKET_MASK = 0xF0000,UPL_PAGE_TICKET_SHIFT = 0x10,UPL_BLOCK_ACCESS = 0x100000,UPL_ENCRYPT = 0x200000,UPL_NOZEROFILL = 0x400000,UPL_WILL_MODIFY = 0x800000,UPL_NEED_32BIT_ADDR = 0x1000000,UPL_UBC_MSYNC = 0x2000000,UPL_UBC_PAGEOUT = 0x4000000,UPL_UBC_PAGEIN = 0x8000000,UPL_REQUEST_SET_DIRTY = 0x10000000,UPL_REQUEST_NO_FAULT = 0x20000000,UPL_NOZEROFILLIO = 0x40000000,UPL_REQUEST_FORCE_COHERENCY = 0x80000000,UPL_VALID_FLAGS = 0xFFFFFFFFFF,UPL_ABORT_RESTART = 0x1,UPL_ABORT_UNAVAILABLE = 0x2,UPL_ABORT_ERROR = 0x4,UPL_ABORT_FREE_ON_EMPTY = 0x8,UPL_ABORT_DUMP_PAGES = 0x10,UPL_ABORT_NOTIFY_EMPTY = 0x20,UPL_ABORT_REFERENCE = 0x80,UPL_CHECK_DIRTY = 0x1,UPL_IOSYNC = 0x1,UPL_NOCOMMIT = 0x2,UPL_NORDAHEAD = 0x4,UPL_VNODE_PAGER = 0x8,UPL_MSYNC = 0x10,UPL_PAGING_ENCRYPTED = 0x20,UPL_KEEPCACHED = 0x40,UPL_NESTED_PAGEOUT = 0x80,UPL_IOSTREAMING = 0x100,UPL_IGNORE_VALID_PAGE_CHECK = 0x200,UPL_COMMIT_FREE_ON_EMPTY = 0x1,UPL_COMMIT_CLEAR_DIRTY = 0x2,UPL_COMMIT_SET_DIRTY = 0x4,UPL_COMMIT_INACTIVATE = 0x8,UPL_COMMIT_NOTIFY_EMPTY = 0x10,UPL_COMMIT_CS_VALIDATED = 0x40,UPL_COMMIT_CLEAR_PRECIOUS = 0x80,UPL_COMMIT_SPECULATE = 0x100,UPL_COMMIT_FREE_ABSENT = 0x200,UPL_COMMIT_WRITTEN_BY_KERNEL = 0x400,UPL_DEV_MEMORY = 0x1,UPL_PHYS_CONTIG = 0x2,UPL_POP_DIRTY = 0x1,UPL_POP_PAGEOUT = 0x2,UPL_POP_PRECIOUS = 0x4,UPL_POP_ABSENT = 0x8,UPL_POP_BUSY = 0x10,UPL_POP_PHYSICAL = 0x10000000,UPL_POP_DUMP = 0x20000000,UPL_POP_SET = 0x40000000,UPL_POP_CLR = 0xFFFFFFFF80000000,UPL_ROP_ABSENT = 0x1,UPL_ROP_PRESENT = 0x2,UPL_ROP_DUMP = 0x4,};
enum MACRO_USE {USE_EMERGENCY_SWAP_FILE_FIRST = 0x100,};
enum MACRO_UTF {UTF_REVERSE_ENDIAN = 0x1,UTF_NO_NULL_TERM = 0x2,UTF_DECOMPOSED = 0x4,UTF_PRECOMPOSED = 0x8,UTF_ESCAPE_ILLEGAL = 0x10,UTF_SFM_CONVERSIONS = 0x20,};
enum MACRO_VFS {VFS_GENERIC = 0,VFS_NUMMNTOPS = 1,VFS_MAXTYPENUM = 1,VFS_CONF = 2,};
enum MACRO_VOL {VOL_CAPABILITIES_FORMAT = 0,VOL_CAPABILITIES_INTERFACES = 1,VOL_CAPABILITIES_RESERVED1 = 2,VOL_CAPABILITIES_RESERVED2 = 3,};
enum MACRO_ZOP {ZOP_ALLOC = 1,ZOP_FREE = 0,};
enum MACRO__CS {_CS_PATH = 1,};
enum MACRO__PC {_PC_LINK_MAX = 1,_PC_MAX_CANON = 2,_PC_MAX_INPUT = 3,_PC_NAME_MAX = 4,_PC_PATH_MAX = 5,_PC_PIPE_BUF = 6,_PC_CHOWN_RESTRICTED = 7,_PC_NO_TRUNC = 8,_PC_VDISABLE = 9,_PC_NAME_CHARS_MAX = 10,_PC_CASE_SENSITIVE = 11,_PC_CASE_PRESERVING = 12,_PC_EXTENDED_SECURITY_NP = 13,_PC_AUTH_OPAQUE_NP = 14,_PC_2_SYMLINKS = 15,_PC_ALLOC_SIZE_MIN = 16,_PC_ASYNC_IO = 17,_PC_FILESIZEBITS = 18,_PC_PRIO_IO = 19,_PC_REC_INCR_XFER_SIZE = 20,_PC_REC_MAX_XFER_SIZE = 21,_PC_REC_MIN_XFER_SIZE = 22,_PC_REC_XFER_ALIGN = 23,_PC_SYMLINK_MAX = 24,_PC_SYNC_IO = 25,_PC_XATTR_SIZE_BITS = 26,_PC_MIN_HOLE_SIZE = 27,};
enum MACRO__SS {_SS_MAXSIZE = 128,};
enum MACRO_aes {aes_good = 0,aes_error = -1,};
enum MACRO_err {err_none = 0,};
enum MACRO_x86 {x86_THREAD_STATE32 = 1,x86_FLOAT_STATE32 = 2,x86_EXCEPTION_STATE32 = 3,x86_THREAD_STATE64 = 4,x86_FLOAT_STATE64 = 5,x86_EXCEPTION_STATE64 = 6,x86_THREAD_STATE = 7,x86_FLOAT_STATE = 8,x86_EXCEPTION_STATE = 9,x86_DEBUG_STATE32 = 10,x86_DEBUG_STATE64 = 11,x86_DEBUG_STATE = 12,};
struct MinorSlot;
struct OpaqueRef;
typedef VDGrayRecord *VDGrayPtr;
struct _IORWLock;
struct __bufattr;
struct __double2 {double __sinval;double __cosval;};
typedef short __int16_t;
typedef int __int32_t;
typedef long long __int64_t;
struct __rtentry;
struct __sockopt;
typedef unsigned char __uint8_t;
enum ataOpcode {kATANoOp = 0x0,kATAFnExecIO = 0x1,kATAPIFnExecIO = 0x2,kATAFnRegAccess = 0x3,kATAFnQFlush = 0x4,kATAFnBusReset = 0x5,};
enum ataUnitID {kATAInvalidDeviceID = 0xFFFFFFFF,kATADevice0DeviceID = 0x0,kATADevice1DeviceID = 0x1,};
typedef au_mask au_mask_t;
typedef audit_stat au_stat_t;
typedef int boolean_t;
typedef __bufattr *bufattr_t;
typedef unsigned int ccder_tag;
struct clockinfo {int hz;int tick;int tickadj;int stathz;int profhz;};
struct coalition;
struct code_desc {unsigned short limit00;unsigned short base00;unsigned char base16;unsigned char type : 5;unsigned char dpl : 2;unsigned char present : 1;unsigned char limit16 : 4;unsigned char : 2;unsigned char opsz : 1;unsigned char granular : 1;unsigned char base24;};
struct data_desc {unsigned short limit00;unsigned short base00;unsigned char base16;unsigned char type : 5;unsigned char dpl : 2;unsigned char present : 1;unsigned char limit16 : 4;unsigned char : 2;unsigned char stksz : 1;unsigned char granular : 1;unsigned char base24;};
typedef _filesec *filesec_t;
struct fp_status {unsigned short invalid : 1;unsigned short denorm : 1;unsigned short zdiv : 1;unsigned short ovrfl : 1;unsigned short undfl : 1;unsigned short precis : 1;unsigned short stkflt : 1;unsigned short errsumm : 1;unsigned short c0 : 1;unsigned short c1 : 1;unsigned short c2 : 1;unsigned short tos : 3;unsigned short c3 : 1;unsigned short busy : 1;};
typedef gz_header_s gz_header;
struct inpcbinfo;
struct inpcbport;
typedef int integer_t;
typedef unsigned short io_addr_t;
typedef char io_name_t[128];
struct ipc_space;
typedef struct __lck_grp__ lck_grp_t;
typedef struct __lck_mtx_t__ lck_mtx_t;
struct list_head {list_head *prev;list_head *next;};
typedef mb_stat mb_stat_t;
typedef unsigned int msgqnum_t;
typedef void (*mt_pmi_fn)(char, void *);
struct nameidata;
struct os_refcnt {int ref_count;os_refgrp *ref_group;};
struct os_refgrp;
struct processor;
typedef int ptrdiff_t;
struct semaphore;
typedef __siginfo siginfo_t;
typedef __sockopt *sockopt_t;
struct task_gate {unsigned short : 16;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} tss;unsigned int : 8;unsigned int type : 5;unsigned int dpl : 2;unsigned int present : 1;unsigned int : 16;};
enum task_role {TASK_RENICED = 0xFFFFFFFF,TASK_UNSPECIFIED = 0x0,TASK_FOREGROUND_APPLICATION = 0x1,TASK_BACKGROUND_APPLICATION = 0x2,TASK_CONTROL_APPLICATION = 0x3,TASK_GRAPHICS_SERVER = 0x4,TASK_THROTTLE_APPLICATION = 0x5,TASK_NONUI_APPLICATION = 0x6,TASK_DEFAULT_APPLICATION = 0x7,TASK_DARWINBG_APPLICATION = 0x8,};
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long long u_int64_t;
typedef unsigned long long uintmax_t;
typedef unsigned int uintptr_t;
typedef int vm_prot_t;
typedef unsigned int vm_sync_t;
typedef  char *xmlData_t;
struct zone_name {char zn_name[80];};
typedef int (*BPF_FUNC)(ifnet *, mbuf *);
typedef DCLLabelStruct DCLLabel;
typedef int FFTRadix;
typedef OpaqueFFTSetup *FFTSetup;
struct GammaTbl {short gVersion;short gType;short gFormulaSize;short gChanCnt;short gDataCnt;short gDataWidth;short gFormulaData[1];};
struct IOFWCmdQ {IOFWCmdQ_vtbl *__vftable ;IOFWCommand *fHead;IOFWCommand *fTail;};
typedef _D22B7EC2FFE3E379BCF7926C521C3184 IOMethod;
typedef struct _IORWLock IORWLock;
struct IOSyncer;
typedef OpaqueRef *KernelID;
enum MACRO_AF {AF_SYS_CONTROL = 2,};
enum MACRO_AL {AL_MAGIC = 0x414C,AL_TYPE_DEFAULT = 0x0,AL_FLAG_DEFAULT = 0x0,};
enum MACRO_AQ {AQ_HIWATER = 100,AQ_MAXHIGH = 10000,AQ_LOWATER = 10,AQ_MAXBUFSZ = 1048576,};
enum MACRO_AT {AT_IPC_MSG = 1,AT_IPC_SEM = 2,AT_IPC_SHM = 3,};
enum MACRO_AU {AU_DEFAUDITID = 4294967295,AU_DEFAUDITSID = 0,AU_ASSIGN_ASID = -1,};
enum MACRO_B0 {B0 = 0,B50 = 50,};
enum MACRO_BC {BC_BASE_MAX = 99,BC_DIM_MAX = 2048,BC_SCALE_MAX = 99,BC_STRING_MAX = 1000,};
enum MACRO_CC {CC_KERNEL = 1,CC_LINUX = 0,CC_USE_L4 = 0,CC_RTKIT = 0,CC_RTKITROM = 0,CC_USE_SEPROM = 0,CC_USE_S3 = 0,CC_BASEBAND = 0,CC_EFI = 0,CC_IBOOT = 0,CC_XNU_KERNEL_PRIVATE = 0,CC_SMALL_CODE = 0,CC_XNU_KERNEL_AVAILABLE = 1,};
enum MACRO_CS {CS_VALID = 0x1,CS_ADHOC = 0x2,CS_GET_TASK_ALLOW = 0x4,CS_INSTALLER = 0x8,CS_FORCED_LV = 0x10,CS_INVALID_ALLOWED = 0x20,CS_HARD = 0x100,CS_KILL = 0x200,CS_CHECK_EXPIRATION = 0x400,CS_RESTRICT = 0x800,CS_ENFORCEMENT = 0x1000,CS_REQUIRE_LV = 0x2000,CS_ENTITLEMENTS_VALIDATED = 0x4000,CS_NVRAM_UNRESTRICTED = 0x8000,CS_RUNTIME = 0x10000,CS_EXEC_SET_HARD = 0x100000,CS_EXEC_SET_KILL = 0x200000,CS_EXEC_SET_ENFORCEMENT = 0x400000,CS_EXEC_INHERIT_SIP = 0x800000,CS_KILLED = 0x1000000,CS_DYLD_PLATFORM = 0x2000000,CS_PLATFORM_BINARY = 0x4000000,CS_PLATFORM_PATH = 0x8000000,CS_DEBUGGED = 0x10000000,CS_SIGNED = 0x20000000,CS_DEV_CODE = 0x40000000,CS_DATAVAULT_CONTROLLER = 0x80000000,CS_EXECSEG_MAIN_BINARY = 0x1,CS_EXECSEG_ALLOW_UNSIGNED = 0x10,CS_EXECSEG_DEBUGGER = 0x20,CS_EXECSEG_JIT = 0x40,CS_EXECSEG_SKIP_LV = 0x80,CS_EXECSEG_CAN_LOAD_CDHASH = 0x100,CS_EXECSEG_CAN_EXEC_CDHASH = 0x200,};
enum MACRO_DK {DK_FEATURE_BARRIER = 0x2,DK_FEATURE_PRIORITY = 0x4,DK_FEATURE_UNMAP = 0x10,DK_SYNCHRONIZE_OPTION_BARRIER = 0x2,DK_CORESTORAGE_PIN_YOUR_METADATA = 0x1,DK_CORESTORAGE_ENABLE_HOTFILES = 0x2,DK_CORESTORAGE_PIN_YOUR_SWAPFILE = 0x4,DK_PROVISION_TYPE_MAPPED = 0x0,DK_PROVISION_TYPE_DEALLOCATED = 0x1,DK_PROVISION_TYPE_ANCHORED = 0x2,DK_FEATURE_FORCE_UNIT_ACCESS = 0x1,DK_ENCRYPTION_TYPE_AES_CBC = 0x1,DK_ENCRYPTION_TYPE_AES_XEX = 0x2,DK_ENCRYPTION_TYPE_AES_XTS = 0x3,DK_TIER_MASK = 0xC0,DK_TIER_SHIFT = 0x6,};
enum MACRO_DT {DT_UNKNOWN = 0,DT_FIFO = 1,DT_CHR = 2,DT_DIR = 4,DT_BLK = 6,DT_REG = 8,DT_LNK = 10,DT_SOCK = 12,DT_WHT = 14,};
enum MACRO_EV {EV_SCREEN_MIN_BRIGHTNESS = 0,EV_SCREEN_MAX_BRIGHTNESS = 64,EV_TICK_TIME = 16,EV_RB = 1,EV_LB = 4,EV_MINPRESSURE = 0,EV_MAXPRESSURE = 255,EV_CURSOR_WIDTH = 16,EV_CURSOR_HEIGHT = 16,};
enum MACRO_FP {FP_PREC_24B = 0,FP_PREC_53B = 2,FP_PREC_64B = 3,FP_RND_NEAR = 0,FP_RND_DOWN = 1,FP_RND_UP = 2,FP_CHOP = 3,FP_STATE_BYTES = 512,};
enum MACRO_IF {IF_NAMESIZE = 16,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IO {IO_NUM_PRIORITIES = 4,};
enum MACRO_IP {IP_OPTIONS = 1,IP_HDRINCL = 2,IP_TOS = 3,IP_TTL = 4,IP_RECVOPTS = 5,IP_RECVRETOPTS = 6,IP_RECVDSTADDR = 7,IP_RETOPTS = 8,IP_MULTICAST_IF = 9,IP_MULTICAST_TTL = 10,IP_MULTICAST_LOOP = 11,IP_ADD_MEMBERSHIP = 12,IP_DROP_MEMBERSHIP = 13,IP_MULTICAST_VIF = 14,IP_RSVP_ON = 15,IP_RSVP_OFF = 16,IP_RSVP_VIF_ON = 17,IP_RSVP_VIF_OFF = 18,IP_PORTRANGE = 19,IP_RECVIF = 20,IP_IPSEC_POLICY = 21,IP_FAITH = 22,IP_STRIPHDR = 23,IP_RECVTTL = 24,IP_BOUND_IF = 25,IP_PKTINFO = 26,IP_RECVTOS = 27,IP_FW_ADD = 40,IP_FW_DEL = 41,IP_FW_FLUSH = 42,IP_FW_ZERO = 43,IP_FW_GET = 44,IP_FW_RESETLOG = 45,IP_OLD_FW_ADD = 50,IP_OLD_FW_DEL = 51,IP_OLD_FW_FLUSH = 52,IP_OLD_FW_ZERO = 53,IP_OLD_FW_GET = 54,IP_NAT__XXX = 55,IP_OLD_FW_RESETLOG = 56,IP_DUMMYNET_CONFIGURE = 60,IP_DUMMYNET_DEL = 61,IP_DUMMYNET_FLUSH = 62,IP_DUMMYNET_GET = 64,IP_TRAFFIC_MGT_BACKGROUND = 65,IP_MULTICAST_IFINDEX = 66,IP_ADD_SOURCE_MEMBERSHIP = 70,IP_DROP_SOURCE_MEMBERSHIP = 71,IP_BLOCK_SOURCE = 72,IP_UNBLOCK_SOURCE = 73,IP_MSFILTER = 74,};
enum MACRO_KF {KF_INITIALIZED = 0x1,KF_SERIAL_OVRD = 0x2,KF_PMAPV_OVRD = 0x4,KF_MATV_OVRD = 0x8,KF_STACKSHOT_OVRD = 0x10,KF_COMPRSV_OVRD = 0x20,};
enum MACRO_LC {LC_REQ_DYLD = 0x80000000,LC_SEGMENT = 0x1,LC_SYMTAB = 0x2,LC_SYMSEG = 0x3,LC_THREAD = 0x4,LC_UNIXTHREAD = 0x5,LC_LOADFVMLIB = 0x6,LC_IDFVMLIB = 0x7,LC_IDENT = 0x8,LC_FVMFILE = 0x9,LC_PREPAGE = 0xA,LC_DYSYMTAB = 0xB,LC_LOAD_DYLIB = 0xC,LC_ID_DYLIB = 0xD,LC_LOAD_DYLINKER = 0xE,LC_ID_DYLINKER = 0xF,LC_PREBOUND_DYLIB = 0x10,LC_ROUTINES = 0x11,LC_SUB_FRAMEWORK = 0x12,LC_SUB_UMBRELLA = 0x13,LC_SUB_CLIENT = 0x14,LC_SUB_LIBRARY = 0x15,LC_TWOLEVEL_HINTS = 0x16,LC_PREBIND_CKSUM = 0x17,LC_SEGMENT_64 = 0x19,LC_ROUTINES_64 = 0x1A,LC_UUID = 0x1B,LC_CODE_SIGNATURE = 0x1D,LC_SEGMENT_SPLIT_INFO = 0x1E,LC_LAZY_LOAD_DYLIB = 0x20,LC_ENCRYPTION_INFO = 0x21,LC_DYLD_INFO = 0x22,LC_VERSION_MIN_MACOSX = 0x24,LC_VERSION_MIN_IPHONEOS = 0x25,LC_FUNCTION_STARTS = 0x26,LC_DYLD_ENVIRONMENT = 0x27,LC_DATA_IN_CODE = 0x29,LC_SOURCE_VERSION = 0x2A,LC_DYLIB_CODE_SIGN_DRS = 0x2B,LC_ENCRYPTION_INFO_64 = 0x2C,LC_LINKER_OPTION = 0x2D,LC_LINKER_OPTIMIZATION_HINT = 0x2E,LC_VERSION_MIN_TVOS = 0x2F,LC_VERSION_MIN_WATCHOS = 0x30,LC_NOTE = 0x31,LC_BUILD_VERSION = 0x32,};
enum MACRO_LK {LK_NOWAIT = 1,};
enum MACRO_MB {MB_LEN_MAX = 6,SCHAR_MAX = 127,};
enum MACRO_MH {MH_MAGIC = 0xFEEDFACE,MH_CIGAM = 0xCEFAEDFE,MH_MAGIC_64 = 0xFEEDFACF,MH_CIGAM_64 = 0xCFFAEDFE,MH_OBJECT = 0x1,MH_EXECUTE = 0x2,MH_FVMLIB = 0x3,MH_CORE = 0x4,MH_PRELOAD = 0x5,MH_DYLIB = 0x6,MH_DYLINKER = 0x7,MH_BUNDLE = 0x8,MH_DYLIB_STUB = 0x9,MH_DSYM = 0xA,MH_KEXT_BUNDLE = 0xB,MH_NOUNDEFS = 0x1,MH_INCRLINK = 0x2,MH_DYLDLINK = 0x4,MH_BINDATLOAD = 0x8,MH_PREBOUND = 0x10,MH_SPLIT_SEGS = 0x20,MH_LAZY_INIT = 0x40,MH_TWOLEVEL = 0x80,MH_FORCE_FLAT = 0x100,MH_NOMULTIDEFS = 0x200,MH_NOFIXPREBINDING = 0x400,MH_PREBINDABLE = 0x800,MH_ALLMODSBOUND = 0x1000,MH_SUBSECTIONS_VIA_SYMBOLS = 0x2000,MH_CANONICAL = 0x4000,MH_WEAK_DEFINES = 0x8000,MH_BINDS_TO_WEAK = 0x10000,MH_ALLOW_STACK_EXECUTION = 0x20000,MH_ROOT_SAFE = 0x40000,MH_SETUID_SAFE = 0x80000,MH_NO_REEXPORTED_DYLIBS = 0x100000,MH_PIE = 0x200000,MH_DEAD_STRIPPABLE_DYLIB = 0x400000,MH_HAS_TLV_DESCRIPTORS = 0x800000,MH_NO_HEAP_EXECUTION = 0x1000000,MH_APP_EXTENSION_SAFE = 0x2000000,};
enum MACRO_MS {MS_ASYNC = 0x1,MS_INVALIDATE = 0x2,MS_SYNC = 0x10,MS_KILLPAGES = 0x4,MS_DEACTIVATE = 0x8,};
enum MACRO_MT {MT_NDEVS = 1,MT_CORE_NFIXED = 3,MT_CORE_INSTRS = 0,MT_CORE_CYCLES = 1,MT_CORE_REFCYCLES = 2,};
enum MACRO_ND {ND_ROUTER_SOLICIT = 133,ND_ROUTER_ADVERT = 134,ND_NEIGHBOR_SOLICIT = 135,ND_NEIGHBOR_ADVERT = 136,ND_REDIRECT = 137,};
enum MACRO_NI {NI_QTYPE_NOOP = 0,NI_QTYPE_SUPTYPES = 1,NI_QTYPE_FQDN = 2,NI_QTYPE_DNSNAME = 2,NI_QTYPE_NODEADDR = 3,NI_QTYPE_IPV4ADDR = 4,NI_SUPTYPE_FLAG_COMPRESS = 256,NI_FQDN_FLAG_VALIDTTL = 256,NI_NODEADDR_FLAG_TRUNCATE = 256,NI_NODEADDR_FLAG_ALL = 512,NI_NODEADDR_FLAG_COMPAT = 1024,NI_NODEADDR_FLAG_LINKLOCAL = 2048,NI_NODEADDR_FLAG_SITELOCAL = 4096,NI_NODEADDR_FLAG_GLOBAL = 8192,NI_NODEADDR_FLAG_ANYCAST = 16384,};
enum MACRO_NO {NO_EVENT = 0,NO_EVENT64 = 0,};
enum MACRO_NX {NX_MAXMOUSESCALINGS = 20,NX_EVS_INFO_MAX = 1024,NX_EVS_DEVICE_MAX = 16,NX_EVS_DEVICE_INTERFACE_OTHER = 0,NX_EVS_DEVICE_INTERFACE_NeXT = 1,NX_EVS_DEVICE_INTERFACE_ADB = 2,NX_EVS_DEVICE_INTERFACE_ACE = 3,NX_EVS_DEVICE_INTERFACE_SERIAL_ACE = 4,NX_EVS_DEVICE_INTERFACE_BUS_ACE = 5,NX_EVS_DEVICE_INTERFACE_HIL = 6,NX_EVS_DEVICE_INTERFACE_TYPE5 = 7,NX_EVS_DEVICE_TYPE_OTHER = 0,NX_EVS_DEVICE_TYPE_KEYBOARD = 1,NX_EVS_DEVICE_TYPE_MOUSE = 2,NX_EVS_DEVICE_TYPE_TABLET = 3,};
enum MACRO_OK {F_OK = 0,X_OK = 1,W_OK = 2,R_OK = 4,_READ_OK = 512,_WRITE_OK = 1024,_EXECUTE_OK = 2048,_DELETE_OK = 4096,_APPEND_OK = 8192,_RMFILE_OK = 16384,_RATTR_OK = 32768,_WATTR_OK = 65536,_REXT_OK = 131072,_WEXT_OK = 262144,_RPERM_OK = 524288,_WPERM_OK = 1048576,_CHOWN_OK = 2097152,};
enum MACRO_OS {OS_OBJECT_USE_OBJC = 0,};
enum MACRO_PD {PD_DATA_MASK = 0x3,PD_DATA_VOID = 0x0,PD_DATA_BYTE = 0x1,PD_DATA_WORD = 0x2,PD_DATA_LONG = 0x3,PD_S_MASK = 0xFFFF0000,PD_S_RX_OFFSET = 0x7,PD_S_ACQUIRED = 0x80000000,PD_S_ACTIVE = 0x40000000,PD_S_TX_ENABLE = 0x20000000,PD_S_TX_BUSY = 0x10000000,PD_S_TX_EVENT = 0x8000000,PD_S_TXQ_EMPTY = 0x4000000,PD_S_TXQ_LOW_WATER = 0x2000000,PD_S_TXQ_HIGH_WATER = 0x1000000,PD_S_TXQ_FULL = 0x800000,};
enum MACRO_PF {PF_VLAN = 1986814318,PF_BOND = 1651469924,};
enum MACRO_PR {PR_SLOWHZ = 2,};
enum MACRO_RB {RB_BLACK = 0,RB_RED = 1,RB_COLOR_MASK = 1,RB_NEGINF = -1,RB_INF = 1,};
enum MACRO_SA {SA_ONSTACK = 0x1,SA_RESTART = 0x2,SA_RESETHAND = 0x4,SA_NOCLDSTOP = 0x8,SA_NODEFER = 0x10,SA_NOCLDWAIT = 0x20,SA_SIGINFO = 0x40,SA_USERTRAMP = 0x100,SA_64REGSET = 0x200,};
enum MACRO_SF {SF_PREV_LOADED = 0x1,};
enum MACRO_SG {SG_HIGHVM = 0x1,SG_FVMLIB = 0x2,SG_NORELOC = 0x4,SG_PROTECTED_VERSION_1 = 0x8,};
enum MACRO_SI {SI_USER = 0x10001,SI_QUEUE = 0x10002,SI_TIMER = 0x10003,SI_ASYNCIO = 0x10004,SI_MESGQ = 0x10005,};
enum MACRO_SM {SM_COW = 1,SM_PRIVATE = 2,SM_EMPTY = 3,SM_SHARED = 4,SM_TRUESHARED = 5,SM_PRIVATE_ALIASED = 6,SM_SHARED_ALIASED = 7,SM_LARGE_PAGE = 8,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_REUSEPORT = 0x200,SO_TIMESTAMP = 0x400,SO_TIMESTAMP_MONOTONIC = 0x800,SO_DONTTRUNC = 0x2000,SO_WANTMORE = 0x4000,SO_WANTOOBFLAG = 0x8000,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_LABEL = 0x1010,SO_PEERLABEL = 0x1011,SO_NREAD = 0x1020,SO_NKE = 0x1021,SO_NOSIGPIPE = 0x1022,SO_NOADDRERR = 0x1023,SO_NWRITE = 0x1024,SO_REUSESHAREUID = 0x1025,SO_NOTIFYCONFLICT = 0x1026,SO_UPCALLCLOSEWAIT = 0x1027,SO_LINGER_SEC = 0x1080,SO_RANDOMPORT = 0x1082,SO_NP_EXTENSIONS = 0x1083,SO_NUMRCVPKT = 0x1112,SO_NET_SERVICE_TYPE = 0x1116,};
enum MACRO_SS {SS_TH_WAIT = 0x1,SS_TH_SUSP = 0x2,SS_TH_RUN = 0x4,SS_TH_UNINT = 0x8,SS_TH_TERMINATE = 0x10,SS_TH_TERMINATE2 = 0x20,SS_TH_IDLE = 0x80,};
enum MACRO_TC {TC_LOOKUP_HASH_TYPE_SHIFT = 16,TC_LOOKUP_FLAGS_SHIFT = 8,TC_LOOKUP_FLAGS_MASK = 65280,TC_LOOKUP_RESULT_SHIFT = 0,TC_LOOKUP_RESULT_MASK = 255,TC_LOOKUP_FOUND = 1,TC_LOOKUP_FALLBACK = 2,};
enum MACRO_TF {TF_LP64 = 0x1,TF_64B_DATA = 0x2,};
enum MACRO_TH {TH_USAGE_SCALE = 1000,TH_STATE_RUNNING = 1,TH_STATE_STOPPED = 2,TH_STATE_WAITING = 3,TH_STATE_UNINTERRUPTIBLE = 4,TH_STATE_HALTED = 5,TH_FLAGS_SWAPPED = 1,TH_FLAGS_IDLE = 2,TH_FLAGS_GLOBAL_FORCED_IDLE = 4,};
enum MACRO_UF {UF_SETTABLE = 0xFFFF,UF_NODUMP = 0x1,UF_IMMUTABLE = 0x2,UF_APPEND = 0x4,UF_OPAQUE = 0x8,UF_COMPRESSED = 0x20,UF_TRACKED = 0x40,UF_DATAVAULT = 0x80,UF_HIDDEN = 0x8000,};
enum MACRO_VA {VA_UTIMES_NULL = 0x10000,VA_EXCLUSIVE = 0x20000,VA_NOINHERIT = 0x40000,VA_NOAUTH = 0x80000,VA_64BITOBJIDS = 0x100000,};
enum MACRO_VF {VF_PCBOOT = 1,VF_HELP = 2,};
enum MACRO_VM {VM_MIN_ADDRESS64 = 0x0,VM_USRSTACK64 = 0x7FFEEFC00000,VM_DYLD64 = 0x7FFF5FC00000,VM_LIB64_SHR_DATA = 0x7FFF60000000,VM_LIB64_SHR_TEXT = 0x7FFF80000000,VM_MAX_PAGE_ADDRESS = 0x7FFFFFE00000,VM_MAX_USER_PAGE_ADDRESS = 0x7FFFFFFFF000,};
enum MACRO_VQ {VQ_NOTRESP = 0x1,VQ_NEEDAUTH = 0x2,VQ_LOWDISK = 0x4,VQ_MOUNT = 0x8,VQ_UNMOUNT = 0x10,VQ_DEAD = 0x20,VQ_ASSIST = 0x40,VQ_NOTRESPLOCK = 0x80,VQ_UPDATE = 0x100,VQ_VERYLOWDISK = 0x200,VQ_SYNCEVENT = 0x400,VQ_SERVEREVENT = 0x800,VQ_QUOTA = 0x1000,VQ_NEARLOWDISK = 0x2000,VQ_DESIRED_DISK = 0x4000,VQ_FLAG8000 = 0x8000,};
typedef __NuDCL *NuDCLRef;
struct OSOffset;
struct PE_Video {unsigned int v_baseAddr;unsigned int v_rowBytes;unsigned int v_width;unsigned int v_height;unsigned int v_depth;unsigned int v_display;char v_pixelFormat[64];unsigned int v_offset;unsigned int v_length;unsigned char v_rotate;unsigned char v_scale;char reserved1[2];int v_baseAddrHigh;};
struct RGBColor {unsigned short red;unsigned short green;unsigned short blue;};
struct SCSITask;
typedef sha1_ctxt SHA1_CTX;
typedef char *UNDLabel;
struct _Element;
struct __float2 {float __sinval;float __cosval;};
struct __ifaddr;
typedef char __int8_t;
struct __pkthdr;
struct __socket;
struct _filesec;
enum ataFlags {bATAFlagQuiesce = 0x14,bATAFlagNoIRQ = 0x13,bATAFlag48BitLBA = 0x12,bATAFlagDMAQueued = 0x11,bATAFlagOverlapped = 0x10,bATAFlagUseConfigSpeed = 0xF,bATAFlagByteSwap = 0xE,bATAFlagIORead = 0xD,bATAFlagIOWrite = 0xC,bATAFlagTFAccessResult = 0x8,bATAFlagUseDMA = 0x7,bATAFlagProtocolATAPI = 0x5,bATAFlagImmediate = 0x1,bATAFlagTFAccess = 0x0,mATAFlagQuiesce = 0x100000,mATAFlagUseNoIRQ = 0x80000,mATAFlag48BitLBA = 0x40000,mATAFlagDMAQueued = 0x20000,mATAFlagOverlapped = 0x10000,mATAFlagUseConfigSpeed = 0x8000,mATAFlagByteSwap = 0x4000,mATAFlagIORead = 0x2000,mATAFlagIOWrite = 0x1000,mATAFlagTFAccessResult = 0x100,mATAFlagUseDMA = 0x80,mATAFlagProtocolATAPI = 0x20,mATAFlagImmediate = 0x2,mATAFlagTFAccess = 0x1,};
struct au_qctrl {int aq_hiwater;int aq_lowater;int aq_bufsz;int aq_delay;int aq_minfree;};
typedef au_tid au_tid_t;
struct au_token;
typedef long long bitmap_t;
struct cpu_data;
typedef void *cpu_id_t;
typedef double double_t;
struct eventreq {int er_type;int er_handle;void *er_data;int er_rcnt;int er_wcnt;int er_ecnt;int er_eventbits;};
typedef fstore fstore_t;
enum idtype_t {P_ALL = 0x0,P_PID = 0x1,P_PGID = 0x2,};
typedef __ifaddr *ifaddr_t;
struct ifdevmtu {int ifdm_current;int ifdm_min;int ifdm_max;};
typedef long long intmax_t;
typedef unsigned short io_len_t;
struct ipc_port;
typedef struct __lck_rw_t__ lck_rw_t;
struct ldt_desc {unsigned short limit00;unsigned short base00;unsigned char base16;unsigned char type : 5;unsigned char : 2;unsigned char present : 1;unsigned char limit16 : 4;unsigned char : 3;unsigned char granular : 1;unsigned char base24;};
typedef ledger *ledger_t;
struct lock_set;
struct locklist {lockf *tqh_first;lockf **tqh_last;};
struct mmst_reg {char mmst_reg[10];char mmst_rsrv[6];};
typedef unsigned int msglen_t;
struct np_uid_t {int np_uid_high;int np_uid_low;};
struct os_log_s;
typedef os_log_s *os_log_t;
typedef int (*out_func)(void *, unsigned char *, unsigned int);
typedef __pkthdr *pkthdr_t;
typedef int policy_t;
struct reg_desc {unsigned int rd_mask;int rd_shift;char *rd_name;char *rd_format;reg_values *rd_values;};
typedef unsigned short shmatt_t;
struct sigstack {char *ss_sp;int ss_onstack;};
typedef __socket *socket_t;
typedef unsigned int tcflag_t;
typedef thread *thread_t;
struct timezone {int tz_minuteswest;int tz_dsttime;};
struct tss_desc {unsigned short limit00;unsigned short base00;unsigned char base16;unsigned char type : 5;unsigned char dpl : 2;unsigned char present : 1;unsigned char limit16 : 4;unsigned char : 3;unsigned char granular : 1;unsigned char base24;};
struct ttychars {char tc_erase;char tc_kill;char tc_intrc;char tc_quitc;char tc_startc;char tc_stopc;char tc_eofc;char tc_brkc;char tc_suspc;char tc_dsuspc;char tc_rprntc;char tc_flushc;char tc_werasc;char tc_lnextc;};
typedef unsigned char u_int8_t;
struct vfstable;
enum vtagtype {VT_NON = 0x0,VT_UFS = 0x1,VT_NFS = 0x2,VT_MFS = 0x3,VT_MSDOSFS = 0x4,VT_LFS = 0x5,VT_LOFS = 0x6,VT_FDESC = 0x7,VT_PORTAL = 0x8,VT_NULL = 0x9,VT_UMAP = 0xA,VT_KERNFS = 0xB,VT_PROCFS = 0xC,VT_AFS = 0xD,VT_ISOFS = 0xE,VT_MOCKFS = 0xF,VT_HFS = 0x10,VT_ZFS = 0x11,VT_DEVFS = 0x12,VT_WEBDAV = 0x13,VT_UDF = 0x14,VT_AFP = 0x15,VT_CDDA = 0x16,VT_CIFS = 0x17,VT_OTHER = 0x18,VT_APFS = 0x19,};
typedef z_stream_s z_stream;
typedef unsigned char Boolean;
typedef DSPComplex COMPLEX;
typedef DCLJumpStruct DCLJump;
typedef OpaqueDTEntry *DTEntry;
typedef float Float32;
typedef double Float64;
enum MACRO_A {A_OLDGETPOLICY = 2,A_OLDSETPOLICY = 3,A_GETKMASK = 4,A_SETKMASK = 5,A_OLDGETQCTRL = 6,A_OLDSETQCTRL = 7,A_GETCWD = 8,A_GETCAR = 9,A_GETSTAT = 12,A_SETSTAT = 13,A_SETUMASK = 14,A_SETSMASK = 15,A_OLDGETCOND = 20,A_OLDSETCOND = 21,A_GETCLASS = 22,A_SETCLASS = 23,A_GETPINFO = 24,A_SETPMASK = 25,A_SETFSIZE = 26,A_GETFSIZE = 27,A_GETPINFO_ADDR = 28,A_GETKAUDIT = 29,A_SETKAUDIT = 30,A_SENDTRIGGER = 31,A_GETSINFO_ADDR = 32,A_GETPOLICY = 33,A_SETPOLICY = 34,A_GETQCTRL = 35,A_SETQCTRL = 36,A_GETCOND = 37,A_SETCOND = 38,A_GETSFLAGS = 39,A_SETSFLAGS = 40,A_GETCTLMODE = 41,A_SETCTLMODE = 42,A_GETEXPAFTER = 43,A_SETEXPAFTER = 44,};
enum MACRO_B {B_WRITE = 0x0,B_READ = 0x1,B_ASYNC = 0x2,B_NOCACHE = 0x4,B_DELWRI = 0x8,B_LOCKED = 0x10,B_PHYS = 0x20,B_CLUSTER = 0x40,B_PAGEIO = 0x80,B_META = 0x100,B_RAW = 0x200,B_FUA = 0x400,B_PASSIVE = 0x800,B_IOSTREAMING = 0x1000,B_THROTTLED_IO = 0x2000,B_ENCRYPTED_IO = 0x4000,B_STATICCONTENT = 0x8000,};
enum MACRO_D {D_TAPE = 1,D_DISK = 2,D_TTY = 3,};
enum MACRO_F {F_DUPFD = 0,F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_GETOWN = 5,F_SETOWN = 6,F_GETLK = 7,F_SETLK = 8,F_SETLKW = 9,F_SETLKWTIMEOUT = 10,F_FLUSH_DATA = 40,F_CHKCLEAN = 41,F_PREALLOCATE = 42,F_SETSIZE = 43,F_RDADVISE = 44,F_RDAHEAD = 45,F_NOCACHE = 48,F_LOG2PHYS = 49,F_GETPATH = 50,F_FULLFSYNC = 51,F_PATHPKG_CHECK = 52,F_FREEZE_FS = 53,F_THAW_FS = 54,F_GLOBAL_NOCACHE = 55,F_ADDSIGS = 59,F_ADDFILESIGS = 61,F_NODIRECT = 62,F_GETPROTECTIONCLASS = 63,F_SETPROTECTIONCLASS = 64,F_LOG2PHYS_EXT = 65,F_GETLKPID = 66,F_SETBACKINGSTORE = 70,F_GETPATH_MTMINFO = 71,F_GETCODEDIR = 72,F_SETNOSIGPIPE = 73,F_GETNOSIGPIPE = 74,F_TRANSCODEKEY = 75,F_SINGLE_WRITER = 76,F_GETPROTECTIONLEVEL = 77,F_FINDSIGS = 78,F_ADDFILESIGS_FOR_DYLD_SIM = 83,F_BARRIERFSYNC = 85,F_ADDFILESIGS_RETURN = 97,F_CHECK_LV = 98,F_PUNCHHOLE = 99,F_TRIM_ACTIVE_FILE = 100,};
enum MACRO_M {M_WAITOK = 0x0,M_NOWAIT = 0x1,M_ZERO = 0x4,M_NULL = 0x8,M_RTABLE = 0x5,M_IFADDR = 0x9,M_LOCKF = 0x28,M_TEMP = 0x50,M_KAUTH = 0x64,M_SONAME = 0xB,M_PCB = 0x4,M_UDFNODE = 0x54,M_UDFMNT = 0x55,};
enum MACRO_N {N_STAB = 0xE0,N_PEXT = 0x10,N_TYPE = 0xE,N_EXT = 0x1,N_UNDF = 0x0,N_ABS = 0x2,N_SECT = 0xE,N_PBUD = 0xC,N_INDR = 0xA,};
enum MACRO_O {O_RDONLY = 0x0,O_WRONLY = 0x1,O_RDWR = 0x2,O_ACCMODE = 0x3,};
enum MACRO_R {R_ABS = 0,R_SCATTERED = -2147483648,};
enum MACRO_S {S_REGULAR = 0x0,S_ZEROFILL = 0x1,S_CSTRING_LITERALS = 0x2,S_4BYTE_LITERALS = 0x3,S_8BYTE_LITERALS = 0x4,S_LITERAL_POINTERS = 0x5,S_NON_LAZY_SYMBOL_POINTERS = 0x6,S_LAZY_SYMBOL_POINTERS = 0x7,S_SYMBOL_STUBS = 0x8,S_MOD_INIT_FUNC_POINTERS = 0x9,S_MOD_TERM_FUNC_POINTERS = 0xA,S_COALESCED = 0xB,S_GB_ZEROFILL = 0xC,S_INTERPOSING = 0xD,S_16BYTE_LITERALS = 0xE,S_DTRACE_DOF = 0xF,S_LAZY_DYLIB_SYMBOL_POINTERS = 0x10,S_THREAD_LOCAL_REGULAR = 0x11,S_THREAD_LOCAL_ZEROFILL = 0x12,S_THREAD_LOCAL_VARIABLES = 0x13,S_THREAD_LOCAL_VARIABLE_POINTERS = 0x14,S_THREAD_LOCAL_INIT_FUNCTION_POINTERS = 0x15,};
enum MACRO_V {V_SAVE = 0x1,V_SAVEMETA = 0x2,};
enum MACRO_Z {Z_NO_FLUSH = 0,Z_PARTIAL_FLUSH = 1,Z_SYNC_FLUSH = 3,Z_FULL_FLUSH = 4,Z_FINISH = 5,Z_BLOCK = 6,Z_OK = 0,Z_STREAM_END = 1,Z_NEED_DICT = 2,Z_ERRNO = -1,Z_STREAM_ERROR = -2,Z_DATA_ERROR = -3,Z_MEM_ERROR = -4,Z_BUF_ERROR = -5,Z_VERSION_ERROR = -6,Z_NO_COMPRESSION = 0,Z_BEST_SPEED = 1,Z_BEST_COMPRESSION = 9,Z_DEFAULT_COMPRESSION = -1,Z_FILTERED = 1,Z_HUFFMAN_ONLY = 2,Z_RLE = 3,Z_FIXED = 4,Z_DEFAULT_STRATEGY = 0,Z_BINARY = 0,Z_TEXT = 1,Z_UNKNOWN = 2,Z_DEFLATED = 8,Z_NULL = 0,};
typedef _NXEvent NXEvent;
typedef PRNG *PrngRef;
typedef Rect *RectPtr;
struct RomScan;
typedef char *UNDPath;
typedef unsigned int WK_word;
struct _IOLock;
struct __NuDCL;
struct __ifnet;
typedef alarm *alarm_t;
struct au_mask {unsigned int am_success;unsigned int am_failure;};
typedef char *caddr_t;
typedef cc_ws *cc_ws_t;
typedef  unsigned char *ccoid_t;
struct ctlname {char *ctl_name;int ctl_type;};
typedef int errno_t;
typedef void *event_t;
typedef float float_t;
typedef __ifnet *ifnet_t;
struct ifqueue {void *ifq_head;void *ifq_tail;int ifq_len;int ifq_maxlen;int ifq_drops;};
typedef unsigned int (*in_func)(void *, unsigned char **);
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
struct ltchars {char t_suspc;char t_dsuspc;char t_rprntc;char t_flushc;char t_werasc;char t_lnextc;};
typedef mount *mount_t;
struct msginfo {int msgmax;int msgmni;int msgmnb;int msgtql;int msgssz;int msgseg;};
typedef queue_entry *queue_t;
typedef __rtentry *route_t;
struct selinfo;
typedef semun semun_t;
struct sf_hdtr {iovec *headers;int hdr_cnt;iovec *trailers;int trl_cnt;};
typedef unsigned int speed_t;
typedef sigaltstack stack_t;
typedef struct au_token token_t;
struct ttysize {unsigned short ts_lines;unsigned short ts_cols;unsigned short ts_xxx;unsigned short ts_yyy;};
typedef unsigned short u_short;
typedef ucred *ucred_t;
enum uio_seg {UIO_USERSPACE = 0x0,UIO_SYSSPACE = 0x2,UIO_USERSPACE32 = 0x5,UIO_USERSPACE64 = 0x8,UIO_SYSSPACE32 = 0xB,};
union __attribute__((aligned(16))) vBool32 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vDouble {double f64[2];};
union __attribute__((aligned(16))) vSInt16 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vSInt32 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vSInt64 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vUInt16 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vUInt32 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vUInt64 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
struct vmmeter {unsigned int v_swtch;unsigned int v_trap;unsigned int v_syscall;unsigned int v_intr;unsigned int v_soft;unsigned int v_faults;unsigned int v_lookups;unsigned int v_hits;unsigned int v_vm_faults;unsigned int v_cow_faults;unsigned int v_swpin;unsigned int v_swpout;unsigned int v_pswpin;unsigned int v_pswpout;unsigned int v_pageins;unsigned int v_pageouts;unsigned int v_pgpgin;unsigned int v_pgpgout;unsigned int v_intrans;unsigned int v_reactivated;unsigned int v_rev;unsigned int v_scan;unsigned int v_dfree;unsigned int v_pfree;unsigned int v_zfod;unsigned int v_nzfod;unsigned int v_page_size;unsigned int v_kernel_pages;unsigned int v_free_target;unsigned int v_free_min;unsigned int v_free_count;unsigned int v_wire_count;unsigned int v_active_count;unsigned int v_inactive_target;unsigned int v_inactive_count;};
typedef vnode *vnode_t;
struct winsize {unsigned short ws_row;unsigned short ws_col;unsigned short ws_xpixel;unsigned short ws_ypixel;};
struct xmm_reg {char xmm_reg[16];};
struct ymm_reg {char ymm_reg[32];};
struct zmm_reg {char zmm_reg[64];};
typedef IOGBounds Bounds;
typedef char CDISRC[13];
typedef struct _IOLock IOLock;
struct IONDRV;
typedef _D22B7EC2FFE3E379BCF7926C521C3184 IOTrap;
typedef short SInt16;
typedef int SInt32;
typedef long long SInt64;
typedef unsigned short UInt16;
typedef unsigned int UInt32;
typedef unsigned long long UInt64;
typedef char *UNDKey;
struct __mbuf;
typedef cczp *cczp_t;
typedef file *file_t;
typedef fsid fsid_t;
struct guid_t {unsigned char g_guid[16];};
typedef host *host_t;
struct ifstat {char ifs_name[16];char ascii[801];};
typedef _img4 img4_t;
typedef char int8_t;
typedef int kmod_t;
struct ledger;
struct linger {int l_onoff;int l_linger;};
typedef __mbuf *mbuf_t;
struct msgmap {short next;};
typedef proc *proc_t;
struct rtstat {short rts_badredirect;short rts_dynamic;short rts_newgateway;short rts_unreach;short rts_wildcard;short rts_badrtgwroute;};
struct sembuf {unsigned short sem_num;short sem_op;short sem_flg;};
struct sgttyb {char sg_ispeed;char sg_ospeed;char sg_erase;char sg_kill;short sg_flags;};
union sigval {int sival_int;void *sival_ptr;};
struct sigvec {void (*sv_handler)(int);int sv_mask;int sv_flags;};
struct socket;
typedef task *task_t;
struct tchars {char t_intrc;char t_quitc;char t_startc;char t_stopc;char t_eofc;char t_brkc;};
struct thread;
typedef unsigned char u_char;
typedef unsigned int u_long;
enum uio_rw {UIO_READ = 0x0,UIO_WRITE = 0x1,};
typedef unsigned short ushort;
union __attribute__((aligned(16))) vFloat {float f32[4];char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vSInt8 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
union __attribute__((aligned(16))) vUInt8 {char i8[16];short i16[8];int i32[4];long long i64[2];unsigned char u8[16];unsigned short u16[8];unsigned int u32[4];unsigned long long u64[2];};
typedef  void *voidpc;
typedef void *voidpf;
typedef char CDMCN[14];
enum EvCmd {EVNOP = 0x0,EVHIDE = 0x1,EVSHOW = 0x2,EVMOVE = 0x3,EVLEVEL = 0x4,};
typedef short OSErr;
typedef IOGPoint Point;
typedef char SInt8;
typedef unsigned char Str31[32];
typedef unsigned char UInt8;
struct alarm;
typedef buf *buf_t;
typedef char charf;
struct clock;
typedef _cr0 cr0_t;
struct ifnet;
struct knote;
struct label;
struct mount;
struct mymsg {int mtype;char mtext[1];};
typedef sel sel_t;
union semun {int val;__semid_ds_new *buf;unsigned short *array;};
typedef void (*sig_t)(int);
struct timex {unsigned int modes;int offset;int freq;int maxerror;int esterror;int status;int constant;int precision;int tolerance;int ppsfreq;int jitter;int shift;int stabil;int jitcnt;int calcnt;int errcnt;int stbcnt;};
typedef tss tss_t;
typedef unsigned int uLong;
typedef unsigned int u_int;
typedef uio *uio_t;
struct vnode;
typedef void *voidp;
enum vtype {VNON = 0x0,VREG = 0x1,VDIR = 0x2,VBLK = 0x3,VCHR = 0x4,VLNK = 0x5,VSOCK = 0x6,VFIFO = 0x7,VBAD = 0x8,VSTR = 0x9,VCPLX = 0xA,};
typedef unsigned char Byte;
typedef dpme DPME;
struct PRNG;
struct Rect {short top;short left;short bottom;short right;};
typedef int SInt;
typedef unsigned int UInt;
struct _cr0 {unsigned int pe : 1;unsigned int mp : 1;unsigned int em : 1;unsigned int ts : 1;unsigned int : 1;unsigned int ne : 1;unsigned int : 10;unsigned int wp : 1;unsigned int : 1;unsigned int am : 1;unsigned int : 10;unsigned int nw : 1;unsigned int cd : 1;unsigned int pg : 1;};
typedef unsigned char cc_t;
typedef eventreq *er_t;
struct file;
struct host;
typedef int intf;
struct mbuf;
struct pgrp;
struct proc;
struct sbuf {char *s_buf;void *s_unused;int s_size;int s_len;int s_flags;};
struct task;
typedef unsigned int uInt;
typedef unsigned int uint;
typedef char *Ptr;
struct buf;
struct sel {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;};
struct tty;
struct uio;
struct IOHIDEventService__ExpansionData___5878CC0A81F7F241068F5530DC3A8E22 {UInt32 buttonState;};
struct IOHIDEventDriver__ExpansionData___0077C6F470F5DB5047486A4CC0CDEDE3 {OSArray *elements;UInt8 bootMouseData[4];char appleVendorSupported;};
struct _NXTabletPointData___108B66EFEC9DC1D8651631AAAC2F520E {SInt16 x;SInt16 y;};
struct SCSICmd_INQUIRY_Page83_RelativeTargetPort_Identifier {UInt16 OBSOLETE;UInt16 RELATIVE_TARGET_PORT_IDENTIFIER;};
struct SCSICmd_INQUIRY_PageB2_Provisioning_Group_Descriptor {UInt8 DESIGNATION_DESCRIPTOR[20];UInt8 RESERVED[18];};
struct IOFireWireSerialBusProtocolTransport__ExpansionData {IOCommandPool *fCommandPool;IOCommandPool *fSubmitQueue;IOFireWireSerialBusProtocolTransport__SBP2LoginState fLoginState;char fLUNResetPathFlag;int fLUNResetCount;char fAlwaysSetSenseData;char fAutonomousSpinDownWorkAround;};
struct SCSICmd_INQUIRY_Page83_LogicalUnitGroup_Identifier {UInt16 RESERVED;UInt16 LOGICAL_UNIT_GROUP;};
struct _img4_interface___C240D8D11EA38401E37E80E4BCCF2546 { img4_environment_t *environment_platform;};
union HFSPlusBSDInfo___27AA93549C704A2FC0D1AB4BC35019DD {u_int32_t iNodeNum;u_int32_t linkCount;u_int32_t rawDevice;};
struct SCSICmd_INQUIRY_Page83_TargetPortGroup_Identifier {UInt16 RESERVED;UInt16 TARGET_PORT_GROUP;};
struct SCSICmd_INQUIRY_Page83_Identification_Descriptor {UInt8 CODE_SET;UInt8 IDENTIFIER_TYPE;UInt8 RESERVED;UInt8 IDENTIFIER_LENGTH;UInt8 IDENTIFIER;};
struct FndrFileInfo___41A11852923CA7CF3D1788B49D991E5B {int16_t v;int16_t h;};
struct FndrDirInfo___0DCF4602959F8104318EED879205AAFA {u_int16_t v;u_int16_t h;};
struct FndrDirInfo___6E74BEE3D2405F7C88221D37EC2C16A3 {int16_t top;int16_t left;int16_t bottom;int16_t right;};
union sadb_x_sa2___0B8F6C7C603ED8E5ADDF6AC271DF4C5E {u_int16_t sadb_x_sa2_reserved2;};
union sadb_x_sa2___BE0BF66556B3A07F217BF5ED388C8220 {u_int8_t sadb_x_sa2_reserved1;};
union vfsioattr___A9423A550A2B08FFBBB5EADB024DFCFD {int64_t io_max_swappin_available;void *io_reserved[2];};
typedef UInt32 IOHIDEventService__DigitizerOrientationType;
struct _NXEvent___8EFB465B4AD2107DC4501CE01DBC8D82 {SInt32 x;SInt32 y;};
struct xinpcb64___43BC994B9C4B2CE41AB688FB99430A6C {u_char inp4_ip_tos;};
typedef void (*IOEthernetController__avb_state_callback_t)(void *, IOEthernetControllerAVBState, IOEthernetControllerAVBState);
struct IOFWPseudoAddressSpaceAux__MemberVariables {IOFWARxReqIntCompleteHandler fARxReqIntCompleteHandler;void *fARxReqIntCompleteHandlerRefcon;};
typedef UInt32 IOHIDEventService__DigitizerTransducerType;
union ifkpi___AB6F1404A19A5F7B793DBFB90D0477FB {void *ifk_ptr;int ifk_value;u_int64_t ifk_ptr64;};
union inpcb___7D460B6C0767DE165AC6133441A5769E {u_char inp4_route[20];u_char inp6_route[32];};
struct inpcb___EBDA4B014B050CA99710A3A7596CC9CC {u_char inp4_ip_tos;mbuf *inp4_options;ip_moptions *inp4_moptions;};
struct FWMultiIsochReceiveListenerParamsStruct {UInt32 maxLatencyInFireWireCycles;UInt32 expectedStreamBitRate;UInt32 clientPacketReturnLatencyInFireWireCycles;};
struct IOFWPhysicalAddressSpaceAux_vtbl_layout; 
typedef UInt32 IOHIDEventService__UnicodeEncodingType;
struct IOCDBlockStorageDriver__ExpansionData {UInt32 minBlockNumberAudio;UInt32 maxBlockNumberAudio;};
struct IOUSBDeviceCapabilityDescriptorHeader {UInt8 bLength;UInt8 bDescriptorType;UInt8 bDevCapabilityType;UInt8 bNumDeviceCaps;};
struct IOFireWireSBP2Target__ExpansionData {char fStarted;OSArray *fPendingMgtAgentCommands;UInt32 fNumberPendingMgtAgentOrbs;UInt32 fNumLUNs;};
struct IOUSBInterfaceAssociationDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt8 bFirstInterface;UInt8 bInterfaceCount;UInt8 bFunctionClass;UInt8 bFunctionSubClass;UInt8 bFunctionProtocol;UInt8 iFunction;};
typedef UInt64 IOStorageGetProvisionStatusOptions;
struct _108B66EFEC9DC1D8651631AAAC2F520E {SInt16 x;SInt16 y;};
struct _3AFEBDF7A4FC08BFE9A431A2DA7430D4 {u_int8_t control;u_int8_t format_id;u_int8_t class_id;u_int8_t window_x2;};
struct _4C928A861DF53AA82E61C4313B0554E4 {u_char NV1_opcode;u_char NV1_xid;u_char NV1_text[55];u_char NV1_null;};
struct _91B3B8FDADC1811899AE65C68A225D1C {u_int8_t control;u_int8_t num_rcv_x2;};
struct _A3920816D4629CE8D4A8F0ADB219F5F7 {u_int8_t num_snd_x2;u_int8_t num_rcv_x2;};
struct _C255F273D17FD18D4EDDE30A2FF3191C {u_int8_t control;u_int8_t frmr_rej_pdu0;u_int8_t frmr_rej_pdu1;u_int8_t frmr_control;u_int8_t frmr_control_ext;u_int8_t frmr_cause;};
struct _D0AC4D4AA87A2DEF3381B9718ACFF2C3 {u_int8_t control;u_int8_t control_ext;};
struct _DC3A9BB9D8D5998A73E3E2EEA2D25385 {IOMemoryMap *bufferMemoryMap;IOWorkLoop *workloop;IOFWIsochPortOptions options;};
struct IOFWAsyncCommand__MemberVariables {void *fSubclassMembers;int fMaxSpeed;int fAckCode;UInt32 fResponseCode;UInt32 fFastRetryCount;int fResponseSpeed;char fForceBlockRequests;};
struct IOTimerEventSource__ExpansionData {SInt32 calloutGeneration;SInt32 calloutGenerationSignaled;IOWorkLoop *workLoop;};
struct IOUSBHostIOSource__tExpansionData {IOUSBHostIOSourceClientRecordList _ioRecordList;};
struct iog__OSSharedObject_GTraceBuffer_ {iog___OSSharedWeakCounter *fControl;iog__OSSharedObject_GTraceBuffer___pointer fTypedObj;};
struct DVDAuthenticationSuccessFlagInfo {UInt8 dataLength[2];UInt8 reserved[2];UInt8 reserved2[3];unsigned char successFlag : 1;unsigned char reservedBits : 7;};
typedef UInt8 DVDRegionalPlaybackControlScheme;
struct IOFWPhysicalAddressSpaceAux_vtbl; 
struct IOSharedDataQueue__ExpansionData {UInt32 queueSize;};
struct IOUSBDeviceCapabilityContainerID {UInt8 bLength;UInt8 bDescriptorType;UInt8 bDevCapabilityType;UInt8 bReservedID;UInt8 containerID[16];};
struct _IOAudioSampleIntervalDescriptor {UInt32 sampleIntervalHi;UInt32 sampleIntervalLo;};
struct IOAudioClientBufferExtendedInfo {UInt32 bufferSetID;void *paramBuffer;IOMemoryDescriptor *paramBufferDescriptor;IOMemoryMap *paramBufferMap;void *unmappedParamBuffer;IOAudioClientBufferExtendedInfo *mNextExtended;};
struct IOFWAddressSpaceAux_vtbl_layout; 
typedef UInt32 IOFireWireLib__UserObjectHandle;
typedef void (*IOMemoryCursor__SegmentFunction)(IOMemoryCursor__PhysicalSegment, void *, UInt32);
struct IOUSBHostDevice__tExpansionData {OSDictionary *_lpmLatencyCache;tUSBDeviceLPMStatus _lpmU1Status;tUSBDeviceLPMStatus _lpmU2Status;tUSBDeviceLPMStatus _lpmL1Status;};
struct _AVCConnectTargetPlugsOutParams {UInt32 sourcePlugNum;UInt32 destPlugNum;};
typedef SInt8 BluetoothHCITransmitPowerLevel;
struct IOFireWireController__pendingQ { IOFWCmdQ cppsuper0;IOFWQEventSource *fSource;};
struct IOFireWireController__timeoutQ { IOFWCmdQ cppsuper0;IOTimerEventSource *fTimer;};
struct IOPowerStateChangeNotification {void *powerRef;unsigned int returnValue;unsigned int stateNumber;IOPMPowerFlags stateFlags;};
typedef dyld_kernel_image_info_t *dyld_kernel_image_info_array_t;
typedef char (*IODMACommand__SegmentFunction)(IODMACommand *, IODMACommand__Segment64, void *, UInt32);
struct IODetailedTimingInformationV1 {UInt32 pixelClock;UInt32 horizontalActive;UInt32 horizontalBlanking;UInt32 horizontalBorder;UInt32 horizontalSyncOffset;UInt32 horizontalSyncWidth;UInt32 verticalActive;UInt32 verticalBlanking;UInt32 verticalBorder;UInt32 verticalSyncOffset;UInt32 verticalSyncWidth;};
struct IOFireWireSBP2Target__LUNInfo {UInt32 cmdSpecID;UInt32 cmdSet;UInt32 vendorID;UInt32 softwareRev;UInt32 firmwareRev;UInt32 lun;UInt32 devType;UInt32 unitCharacteristics;UInt32 managementOffset;UInt32 revision;char fastStartSupported;UInt32 fastStart;};
struct IOHIDInterface__ExpansionData {UInt32 reportInterval;};
typedef SInt32 (*OSOrderedSet__OSOrderFunction)( OSMetaClassBase *,  OSMetaClassBase *, void *);
struct SCSICmd_INQUIRY_Page00_Header {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt8 RESERVED;UInt8 PAGE_LENGTH;};
struct SCSICmd_INQUIRY_Page80_Header {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt8 RESERVED;UInt8 PAGE_LENGTH;UInt8 PRODUCT_SERIAL_NUMBER;};
struct SCSICmd_INQUIRY_Page83_Header {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt8 RESERVED;UInt8 PAGE_LENGTH;};
struct SCSICmd_INQUIRY_PageCx_Header {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt8 RESERVED;UInt8 PAGE_LENGTH;};
struct _IOAudioStreamFormatExtension {UInt32 fVersion;UInt32 fFlags;UInt32 fFramesPerPacket;UInt32 fBytesPerPacket;};
struct DVDAuthenticationGrantIDInfo {UInt8 dataLength[2];UInt8 reserved[2];UInt8 reserved2[3];unsigned char reservedBits : 6;unsigned char grantID : 2;};
struct IOPCIEventSource_vtbl_layout; 
struct IOUSBHubPortReEnumerateParam {UInt32 portNumber;UInt32 options;};
struct SCSICmd_INQUIRY_StandardData {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 RMB;UInt8 VERSION;UInt8 RESPONSE_DATA_FORMAT;UInt8 ADDITIONAL_LENGTH;UInt8 SCCSReserved;UInt8 flags1;UInt8 flags2;char VENDOR_IDENTIFICATION[8];char PRODUCT_IDENTIFICATION[16];char PRODUCT_REVISION_LEVEL[4];};
typedef void UserExportDCLCallCommandProc(UserExportDCLCommand *);
struct _IOAudioStreamDataDescriptor {UInt32 fVersion;UInt32 fNumberOfStreams;UInt32 fStreamLength[1];};
typedef processor_set_t processor_set_control_port_t;
typedef HardwareCursorDescriptorRec *HardwareCursorDescriptorPtr;
typedef _IOAudioControlNotifications IOAudioControlNotifications;
struct IODCLProgram__ExpansionData {IOFWIsochResourceFlags resourceFlags;IODMACommand *fDMACommand;};
typedef UInt32 (*IODebuggerLinkStatusHandler)(IOService *);
typedef UInt32 IOStorageSynchronizeOptions;
struct VDSupportsHardwareCursorRec {UInt32 csSupportsHardwareCursor;UInt32 csReserved1;UInt32 csReserved2;};
typedef u_int32_t mbuf_csum_performed_flags_t;
typedef uintptr_t ptrauth_generic_signature_t;
typedef thread_state_flavor_t *thread_state_flavor_array_t;
typedef _IOAudioEngineNotifications IOAudioEngineNotifications;
struct IOBlockStorageDeviceExtent {UInt64 blockStart;UInt64 blockCount;};
struct IOFBCursorControlAttribute {void *inst;void *ref; IOFBCursorControlCallouts *callouts;UInt32 reserved[29];};
typedef UInt8 SCSICommandDescriptorBlock[16];
typedef exception_behavior_t *exception_behavior_array_t;
struct host_can_has_debugger_info {boolean_t can_has_debugger;};
struct ifnet_stat_increment_param {u_int32_t packets_in;u_int32_t bytes_in;u_int32_t errors_in;u_int32_t packets_out;u_int32_t bytes_out;u_int32_t errors_out;u_int32_t collisions;u_int32_t dropped;};
typedef ipc_info_tree_name_t *ipc_info_tree_name_array_t;
typedef int64_t mach_exception_data_type_t;
typedef mach_voucher_attr_recipe_data_t *mach_voucher_attr_recipe_t;
typedef processor_set_t *processor_set_name_array_t;
struct IOBlitCopyRectangleStruct {SInt32 sourceX;SInt32 sourceY;SInt32 x;SInt32 y;SInt32 width;SInt32 height;};
struct IOEventSource_vtbl_layout; 
struct IOPacketBufferConstraints {UInt32 alignStart;UInt32 alignLength;UInt32 reserved[6];};
struct __attribute__((packed)) IOSimpleArrayReportValues {int64_t simple_values[4];};
struct IOUSBFindInterfaceRequest {UInt16 bInterfaceClass;UInt16 bInterfaceSubClass;UInt16 bInterfaceProtocol;UInt16 bAlternateSetting;};
typedef UInt32 KernelDebuggingOutputType;
typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef dir_clone_authorizer_op dir_clone_authorizer_op_t;
struct iog___OSSharedWeakCounter {OSObject *fObj;os_refcnt fUseCount;os_refcnt fWeakCount;};
typedef u_int32_t mbuf_csum_request_flags_t;
typedef integer_t processor_set_info_data_t[1024];
typedef processor_set_t processor_set_name_port_t;
struct scattered_relocation_info {unsigned int r_address : 24;unsigned int r_type : 4;unsigned int r_length : 2;unsigned int r_pcrel : 1;unsigned int r_scattered : 1;int32_t r_value;};
struct IOATAIOReg16_vtbl_layout; 
struct IOFWAddressSpaceAux_vtbl; 
struct IOUSBHubPortClearTTParam {UInt32 portNumber;UInt32 options;};
struct IOUSBInterfaceDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt8 bInterfaceNumber;UInt8 bAlternateSetting;UInt8 bNumEndpoints;UInt8 bInterfaceClass;UInt8 bInterfaceSubClass;UInt8 bInterfaceProtocol;UInt8 iInterface;};
struct IOVideoStreamDescription {UInt32 mVideoCodecType;UInt32 mVideoCodecFlags;UInt32 mWidth;UInt32 mHeight;UInt32 mReserved1;UInt32 mReserved2;};
typedef UInt64 SCSITaggedTaskIdentifier;
struct _stickyKeys_ModifierInfo {UInt8 key;UInt8 state;UInt8 leftModBit;};
typedef thread_state_flavor_t *exception_flavor_array_t;
typedef hash_info_bucket_t *hash_info_bucket_array_t;
typedef mach_exception_data_type_t mach_exception_subcode_t;
typedef mach_memory_info_t *mach_memory_info_array_t;
typedef u_int32_t mbuf_tso_request_flags_t;
typedef mig_routine_descriptor *mig_routine_descriptor_t;
struct thread_background_policy {integer_t priority;};
struct thread_precedence_policy {integer_t importance;};
typedef UInt8 DVDRZoneInfoAddressType;
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusExtentDescriptor {u_int32_t startBlock;u_int32_t blockCount;};
typedef _IOAudioDevicePowerState IOAudioDevicePowerState;
struct IODMACommand__Segment32 {UInt32 fIOVMAddr;UInt32 fLength;};
struct IODMACommand__Segment64 {UInt64 fIOVMAddr;UInt64 fLength;};
struct NXEventSystemDeviceList {NXEventSystemDevice dev[16];};
typedef mach_port_options_t *mach_port_options_ptr_t;
struct processor_set_load_info {int task_count;int thread_count;integer_t load_average;integer_t mach_factor;};
typedef integer_t thread_throughput_qos_t;
struct vm_region_extended_info {vm_prot_t protection;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned short shadow_depth;unsigned char external_pager;unsigned char share_mode;unsigned int pages_reusable;};
typedef UInt8 CDTrackInfoAddressType;
struct IOATAReg16_vtbl_layout; 
struct IOATAReg32_vtbl_layout; 
typedef _IOAudioStreamDirection IOAudioStreamDirection;
typedef uintptr_t KUNCUserNotificationID;
typedef UInt32 SCSIProtocolPowerState;
struct VDSetHardwareCursorRec {void *csCursorRef;UInt32 csReserved1;UInt32 csReserved2;};
typedef exception_mask_t *exception_mask_array_t;
struct fs_snapshot_mount_args {mount_t sm_mp;componentname *sm_cnp;};
typedef lockgroup_info_t *lockgroup_info_array_t;
typedef mach_zone_info_t *mach_zone_info_array_t;
typedef mach_zone_name_t *mach_zone_name_array_t;
struct policy_timeshare_limit {integer_t max_priority;};
typedef priority_queue_flags priority_queue_flags_t;
typedef integer_t *processor_info_array_t;
struct task_affinity_tag_info {integer_t set_count;integer_t min;integer_t max;integer_t task_count;};
struct task_thread_times_info {time_value_t user_time;time_value_t system_time;};
typedef task_zone_info_t *task_zone_info_array_t;
struct thread_affinity_policy {integer_t affinity_tag;};
struct thread_extended_policy {boolean_t timeshare;};
typedef vm_info_object_t *vm_info_object_array_t;
typedef u_int32_t vol_capabilities_set_t[4];
typedef SInt8 BluetoothHCIRSSIValue;
struct DVDPhysicalFormatInfo {UInt8 dataLength[2];UInt8 reserved[2];unsigned char partVersion : 4;unsigned char bookType : 4;unsigned char minimumRate : 4;unsigned char discSize : 4;unsigned char layerType : 4;unsigned char trackPath : 1;unsigned char numberOfLayers : 2;unsigned char reserved2 : 1;unsigned char trackDensity : 4;unsigned char linearDensity : 4;UInt8 zero1;UInt8 startingPhysicalSectorNumberOfDataArea[3];UInt8 zero2;UInt8 endPhysicalSectorNumberOfDataArea[3];UInt8 zero3;UInt8 endSectorNumberInLayerZero[3];unsigned char reserved1 : 7;unsigned char bcaFlag : 1;UInt8 mediaSpecific[2031];};
typedef HardwareCursorInfoRec *HardwareCursorInfoPtr;
struct IOATAReg8_vtbl_layout; 
struct IOAudioEnginePosition {UInt32 fSampleFrame;UInt32 fLoopCount;};
struct IOBlitRectangleStruct {SInt32 x;SInt32 y;SInt32 width;SInt32 height;};
struct IOPCIEventSource_vtbl; 
typedef UInt32 IOStorageUnmapOptions;
struct IOUSBDescriptorHeader {UInt8 bLength;UInt8 bDescriptorType;};
typedef InterruptServiceIDType *InterruptServiceIDPtr;
typedef NuDCLRef NuDCLReceivePacketRef;
typedef UInt64 SCSILogicalUnitNumber;
struct _AVCSubunitPlugRecord {UInt32 plugSignalFormat;UInt32 connectionCount;};
typedef integer_t exception_data_type_t;
typedef ipc_info_name_t *ipc_info_name_array_t;
typedef mach_exception_data_type_t mach_exception_code_t;
typedef mach_exception_data_type_t *mach_exception_data_t;
struct policy_timeshare_base {integer_t base_priority;};
typedef integer_t processor_info_data_t[1024];
typedef processor_set_t *processor_set_array_t;
typedef integer_t task_throughput_qos_t;
typedef upl_page_info_t *upl_page_info_array_t;
struct vol_capabilities_attr {vol_capabilities_set_t capabilities;vol_capabilities_set_t valid;};
typedef zone_btrecord_t *zone_btrecord_array_t;
typedef DCLSetTagSyncBits *DCLSetTagSyncBitsPtr;
typedef DCLTransferBuffer *DCLTransferBufferPtr;
typedef DCLTransferPacket *DCLTransferPacketPtr;
struct DVDManufacturingInfo {UInt8 dataLength[2];UInt8 reserved[2];UInt8 discManufacturingInfo[2048];};
typedef void (*FWSBP2LogoutCallback)(void *, FWSBP2LogoutCompleteParamsPtr);
typedef void (*FWSBP2NotifyCallback)(void *, FWSBP2NotifyParamsPtr);
typedef UInt32 IOACPIAddressSpaceID;
typedef UInt32 IOMediaAttributeMask;
typedef UInt16 LittleSInt16__UValue;
typedef UInt32 LittleSInt32__UValue;
typedef UInt64 LittleSInt64__UValue;
typedef UInt16 LittleUInt16__UValue;
typedef UInt32 LittleUInt32__UValue;
typedef UInt64 LittleUInt64__UValue;
typedef UInt32 RegPropertyValueSize;
typedef UInt64 SCSIDeviceIdentifier;
typedef UInt8 SCSILogicalUnitBytes[8];
typedef SCSIDeviceIdentifier SCSITargetIdentifier;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __int32_t __darwin_suseconds_t;
typedef void (*ccdigest_update_fn_t)( ccdigest_info *, ccdigest_ctx_t, unsigned int,  void *);
struct kev_in6_addrlifetime {u_int32_t ia6t_expire;u_int32_t ia6t_preferred;u_int32_t ia6t_vltime;u_int32_t ia6t_pltime;};
typedef integer_t *processor_set_info_t;
typedef processor_set_t processor_set_name_t;
typedef processor_set_t processor_set_port_t;
typedef uintptr_t ptrauth_extra_data_t;
typedef integer_t thread_latency_qos_t;
struct __attribute__((aligned(8))) vm_extmod_statistics {int64_t task_for_pid_count;int64_t task_for_pid_caller_count;int64_t thread_creation_count;int64_t thread_creation_caller_count;int64_t thread_set_state_count;int64_t thread_set_state_caller_count;};
struct vnop_kqfilt_add_args {vnodeop_desc *a_desc;vnode *a_vp;knote *a_kn;vfs_context_t a_context;};
typedef UInt32 DCLCallProcDataType;
typedef UInt32 DCLCompilerDataType;
typedef DCLUpdateDCLList *DCLUpdateDCLListPtr;
struct DVDChallengeKeyInfo {UInt8 dataLength[2];UInt8 reserved[2];UInt8 challengeKeyValue[10];UInt8 reserved2[2];};
typedef void (*FWPHYPacketCallback)(void *, UInt32, UInt32);
typedef void (*FWSBP2LoginCallback)(void *, FWSBP2LoginCompleteParamsPtr);
struct __attribute__((packed)) __attribute__((aligned(2))) HFSExtentDescriptor {u_int16_t startBlock;u_int16_t blockCount;};
typedef _IOAudioControlCalls IOAudioControlCalls;
typedef _IOAudioEngineMemory IOAudioEngineMemory;
typedef void (*IODebuggerRxHandler)(IOService *, void *, UInt32 *, UInt32);
typedef void (*IODebuggerTxHandler)(IOService *, void *, UInt32);
typedef UInt32 IOPhysicalAddress32;
typedef UInt64 IOPhysicalAddress64;
struct IOStreamBufferQueue {UInt32 entryCount;UInt32 headIndex;UInt32 tailIndex;UInt32 reserved;};
typedef SInt16 LittleSInt16__Value;
typedef SInt32 LittleSInt32__Value;
typedef SInt64 LittleSInt64__Value;
typedef UInt16 LittleUInt16__Value;
typedef UInt32 LittleUInt32__Value;
typedef UInt64 LittleUInt64__Value;
typedef UInt32 SCSIProtocolFeature;
typedef __uint32_t __darwin_useconds_t;
typedef void (*ccdigest_final_fn_t)( ccdigest_info *, ccdigest_ctx_t, void *);
typedef void (*ifnet_detached_func)(ifnet_t);
typedef io_object_t io_registry_entry_t;
typedef int (*sf_getpeername_func)(void *, socket_t, sockaddr **);
typedef int (*sf_getsockname_func)(void *, socket_t, sockaddr **);
typedef integer_t *task_inspect_info_t;
typedef upl_page_info_array_t upl_page_list_ptr_t;
struct vol_attributes_attr {attribute_set_t validattr;attribute_set_t nativeattr;};
struct Block_descriptor_1 {uintptr_t reserved;uintptr_t size;};
typedef void DCLCallCommandProc(DCLCommand *);
typedef DCLPtrTimeStamp *DCLPtrTimeStampPtr;
typedef UInt8 DVDStructureFormat;
struct FWSBP2NotifyParams {void *commandObject;UInt32 notificationEvent; void *message;UInt32 length;UInt32 generation;};
typedef _IOAudioEngineCalls IOAudioEngineCalls;
typedef _IOAudioEngineState IOAudioEngineState;
typedef _IOAudioEngineTraps IOAudioEngineTraps;
struct IOBlitVertexStruct {SInt32 x;SInt32 y;};
typedef void (*IODTNVLocationFunc)(IORegistryEntry *, UInt8 *, UInt8 *, UInt8 *);
typedef UInt32 IODisplayProductID;
struct IODot3RxExtraEntry {UInt32 overruns;UInt32 watchdogTimeouts;UInt32 frameTooShorts;UInt32 collisionErrors;UInt32 phyErrors;UInt32 timeouts;UInt32 interrupts;UInt32 resets;UInt32 resourceErrors;UInt32 reserved[4];};
struct IODot3TxExtraEntry {UInt32 underruns;UInt32 jabbers;UInt32 phyErrors;UInt32 timeouts;UInt32 interrupts;UInt32 resets;UInt32 resourceErrors;UInt32 reserved[4];};
struct IOEventSource_vtbl; 
struct IOOutputQueueStats {UInt32 capacity;UInt32 size;UInt32 peakSize;UInt32 dropCount;UInt32 outputCount;UInt32 retryCount;UInt32 stallCount;UInt32 reserved[4];};
typedef UInt32 IOPhysicalLength32;
typedef UInt64 IOPhysicalLength64;
struct IOUSBHIDReportDesc {UInt8 hidDescriptorType;UInt8 hidDescriptorLengthLo;UInt8 hidDescriptorLengthHi;};
typedef UInt16 (*MasterVolumeUpdate)(void);
typedef NuDCLRef NuDCLSendPacketRef;
struct OSData_vtbl_layout; 
typedef void (*SCSITaskCompletion)(SCSITaskIdentifier);
struct _AVCUnitPlugRecord {UInt32 connectionCount;};
struct _IOAudioSampleRate {UInt32 whole;UInt32 fraction;};
typedef __int32_t __darwin_blksize_t;
typedef __uint32_t __darwin_socklen_t;
typedef void (*ccdigest_init_fn_t)( ccdigest_info *, ccdigest_ctx_t);
typedef void (*cchmac_update_fn_t)( ccdigest_info *, cchmac_ctx_t, unsigned int,  void *);
struct cpuid_cache_desc_t {unsigned char value;cache_type_t type;unsigned int size;unsigned int linesize; char *description;};
struct host_priority_info {integer_t kernel_priority;integer_t system_priority;integer_t server_priority;integer_t user_priority;integer_t depress_priority;integer_t idle_priority;integer_t minimum_priority;integer_t maximum_priority;};
struct inpcb64_list_entry {u_int64_t le_next;u_int64_t le_prev;};
typedef u_int32_t kauth_ace_rights_t;
typedef integer_t mach_msg_options_t;
typedef kern_return_t (*mig_impl_routine_t)(void);
struct ndrv_protocol_desc {u_int32_t version;u_int32_t protocol_family;u_int32_t demux_count;ndrv_demux_desc *demux_list;};
typedef integer_t task_latency_qos_t;
typedef thread_act_t *thread_act_array_t;
typedef void (*thread_call_func_t)(thread_call_param_t, thread_call_param_t);
typedef integer_t thread_info_data_t[32];
struct vnop_setlabel_args {vnodeop_desc *a_desc;vnode *a_vp;label *a_vl;vfs_context_t a_context;};
struct x86_thread_state64 {__uint64_t rax;__uint64_t rbx;__uint64_t rcx;__uint64_t rdx;__uint64_t rdi;__uint64_t rsi;__uint64_t rbp;__uint64_t rsp;__uint64_t r8;__uint64_t r9;__uint64_t r10;__uint64_t r11;__uint64_t r12;__uint64_t r13;__uint64_t r14;__uint64_t r15;__uint64_t rip;__uint64_t rflags;__uint64_t cs;__uint64_t fs;__uint64_t gs;};
typedef UInt16 BigSInt16__UValue;
typedef UInt32 BigSInt32__UValue;
typedef UInt64 BigSInt64__UValue;
typedef UInt16 BigUInt16__UValue;
typedef UInt32 BigUInt32__UValue;
typedef UInt64 BigUInt64__UValue;
typedef UInt8 DVDCPRMRegionCode;
typedef UInt32 DriverDescVersion;
typedef UInt8 ExtendedSenseCode;
struct IOATAIOReg16_vtbl; 
typedef UInt32 IODisplayVendorID;
struct IOEthernetAddress {UInt8 bytes[6];};
typedef IOPhysicalAddress32 IOPhysicalAddress;
typedef UInt8 IOStoragePriority;
struct IOUSBKeyboardData {UInt16 keycount;UInt16 usbkeycode[32];};
typedef kxld_allocate_flags KXLDAllocateFlags;
typedef NuDCLRef NuDCLSkipCycleRef;
typedef UInt16 SCSICmdField10Bit;
typedef UInt16 SCSICmdField11Bit;
typedef UInt16 SCSICmdField12Bit;
typedef UInt16 SCSICmdField13Bit;
typedef UInt16 SCSICmdField14Bit;
typedef UInt16 SCSICmdField15Bit;
typedef UInt32 SCSICmdField17Bit;
typedef UInt32 SCSICmdField18Bit;
typedef UInt32 SCSICmdField19Bit;
typedef UInt8 SCSICmdField1Byte;
typedef UInt32 SCSICmdField20Bit;
typedef UInt32 SCSICmdField21Bit;
typedef UInt32 SCSICmdField22Bit;
typedef UInt32 SCSICmdField23Bit;
typedef UInt32 SCSICmdField25Bit;
typedef UInt32 SCSICmdField26Bit;
typedef UInt32 SCSICmdField27Bit;
typedef UInt32 SCSICmdField28Bit;
typedef UInt32 SCSICmdField29Bit;
typedef UInt16 SCSICmdField2Byte;
typedef UInt32 SCSICmdField30Bit;
typedef UInt32 SCSICmdField31Bit;
typedef UInt64 SCSICmdField33Bit;
typedef UInt64 SCSICmdField34Bit;
typedef UInt64 SCSICmdField35Bit;
typedef UInt64 SCSICmdField36Bit;
typedef UInt64 SCSICmdField37Bit;
typedef UInt64 SCSICmdField38Bit;
typedef UInt64 SCSICmdField39Bit;
typedef UInt32 SCSICmdField3Byte;
typedef UInt64 SCSICmdField41Bit;
typedef UInt64 SCSICmdField42Bit;
typedef UInt64 SCSICmdField43Bit;
typedef UInt64 SCSICmdField44Bit;
typedef UInt64 SCSICmdField45Bit;
typedef UInt64 SCSICmdField46Bit;
typedef UInt64 SCSICmdField47Bit;
typedef UInt64 SCSICmdField49Bit;
typedef UInt32 SCSICmdField4Byte;
typedef UInt64 SCSICmdField50Bit;
typedef UInt64 SCSICmdField51Bit;
typedef UInt64 SCSICmdField52Bit;
typedef UInt64 SCSICmdField53Bit;
typedef UInt64 SCSICmdField54Bit;
typedef UInt64 SCSICmdField55Bit;
typedef UInt64 SCSICmdField57Bit;
typedef UInt64 SCSICmdField58Bit;
typedef UInt64 SCSICmdField59Bit;
typedef UInt64 SCSICmdField5Byte;
typedef UInt64 SCSICmdField60Bit;
typedef UInt64 SCSICmdField61Bit;
typedef UInt64 SCSICmdField62Bit;
typedef UInt64 SCSICmdField63Bit;
typedef UInt64 SCSICmdField6Byte;
typedef UInt64 SCSICmdField7Byte;
typedef UInt64 SCSICmdField8Byte;
typedef SInt8 TransmissionPower;
struct UASPipeDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt8 bPipeID;UInt8 bReserved;};
typedef __int64_t __darwin_blkcnt_t;
typedef __uint32_t __darwin_sigset_t;
typedef void (*cchmac_final_fn_t)( ccdigest_info *, cchmac_ctx_t, unsigned char *);
typedef clock_ctrl_t clock_ctrl_port_t;
typedef clock_serv_t clock_serv_port_t;
typedef void (*iff_detached_func)(void *, ifnet_t);
struct ifnet_stats_param {u_int64_t packets_in;u_int64_t bytes_in;u_int64_t multicasts_in;u_int64_t errors_in;u_int64_t packets_out;u_int64_t bytes_out;u_int64_t multicasts_out;u_int64_t errors_out;u_int64_t collisions;u_int64_t dropped;u_int64_t no_protocol;};
struct ip_linklocal_stat {u_int32_t iplls_in_total;u_int32_t iplls_in_badttl;u_int32_t iplls_out_total;u_int32_t iplls_out_badttl;};
struct kauth_cache_sizes {u_int32_t kcs_group_size;u_int32_t kcs_id_size;};
typedef kmod_info_t *kmod_info_array_t;
typedef kern_return_t kmod_start_func_t(kmod_info *, void *);
typedef integer_t mach_msg_option_t;
typedef kern_return_t mach_msg_return_t;
typedef integer_t mach_port_delta_t;
struct policy_fifo_limit {integer_t max_priority;};
typedef processor_t *processor_array_t;
typedef u_int32_t protocol_family_t;
typedef thread_act_t thread_act_port_t;
typedef void (*thread_continue_t)(void *, wait_result_t);
struct vm_purgeable_info {vm_purgeable_stat_t fifo_data[8];vm_purgeable_stat_t obsolete_data;vm_purgeable_stat_t lifo_data[8];};
struct x86_debug_state64 {__uint64_t dr0;__uint64_t dr1;__uint64_t dr2;__uint64_t dr3;__uint64_t dr4;__uint64_t dr5;__uint64_t dr6;__uint64_t dr7;};
typedef zone_info_t *zone_info_array_t;
typedef zone_name_t *zone_name_array_t;
typedef SInt16 BigSInt16__Value;
typedef SInt32 BigSInt32__Value;
typedef SInt64 BigSInt64__Value;
typedef UInt16 BigUInt16__Value;
typedef UInt32 BigUInt32__Value;
typedef UInt64 BigUInt64__Value;
struct CDTEXTDescriptor {UInt8 packType;UInt8 trackNumber;UInt8 sequenceNumber;unsigned char characterPosition : 4;unsigned char blockNumber : 3;unsigned char doubleByteCharacterCode : 1;UInt8 textData[12];UInt8 reserved[2];};
typedef UInt32 IOBlitSourceType;
typedef UInt16 IOColorComponent;
struct IODot3StatsEntry {UInt32 alignmentErrors;UInt32 fcsErrors;UInt32 singleCollisionFrames;UInt32 multipleCollisionFrames;UInt32 sqeTestErrors;UInt32 deferredTransmissions;UInt32 lateCollisions;UInt32 excessiveCollisions;UInt32 internalMacTransmitErrors;UInt32 carrierSenseErrors;UInt32 frameTooLongs;UInt32 internalMacReceiveErrors;UInt32 etherChipSet;UInt32 missedFrames;};
typedef IOPhysicalLength32 IOPhysicalLength;
typedef UInt16 IOStorageOptions;
typedef UInt32 IOStreamBufferID;
struct IOUSBBulkPipeReq {UInt32 pipeRef;void *buf;UInt32 size;UInt32 noDataTimeout;UInt32 completionTimeout;};
typedef kxld_log_subsystem KXLDLogSubsystem;
typedef UInt32 KernelDebugLevel;
typedef UInt8 SCSICmdField1Bit;
typedef UInt8 SCSICmdField2Bit;
typedef UInt8 SCSICmdField3Bit;
typedef UInt8 SCSICmdField4Bit;
typedef UInt8 SCSICmdField5Bit;
typedef UInt8 SCSICmdField6Bit;
typedef UInt8 SCSICmdField7Bit;
typedef UInt16 SCSICmdField9Bit;
typedef UInt16 USBDeviceAddress;
struct VDSetEntryRecord {ColorSpec *csTable;SInt16 csStart;SInt16 csCount;};
struct __IOFixedPoint32 {int32_t x;int32_t y;};
typedef __uint64_t __darwin_ino64_t;
typedef __builtin_va_list __darwin_va_list;
typedef void (*cchmac_init_fn_t)( ccdigest_info *, cchmac_ctx_t, unsigned int,  void *);
typedef integer_t cpu_threadtype_t;
typedef exception_data_type_t *exception_data_t;
typedef integer_t host_info_data_t[1024];
typedef host_t host_name_port_t;
struct ifnet_demux_desc {u_int32_t type;void *data;u_int32_t datalen;};
typedef void (*ifnet_event_func)(ifnet_t,  kev_msg *);
typedef ipc_space_t ipc_space_port_t;
typedef KCDATA_SUBTYPE_TYPES kctype_subtype_t;
typedef void (*kdp_callout_fn_t)(void *, kdp_event_t);
typedef kern_return_t kmod_stop_func_t(kmod_info *, void *);
typedef void (*kpc_pm_handler_t)(boolean_t);
typedef integer_t *mach_port_info_t;
struct policy_fifo_base {integer_t base_priority;};
typedef integer_t *processor_info_t;
typedef processor_t processor_port_t;
typedef semaphore_t semaphore_port_t;
typedef u_int32_t sflt_data_flag_t;
struct so_np_extensions {u_int32_t npx_flags;u_int32_t npx_mask;};
struct task_events_info {integer_t faults;integer_t pageins;integer_t cow_faults;integer_t messages_sent;integer_t messages_received;integer_t syscalls_mach;integer_t syscalls_unix;integer_t csw;};
struct task_extmod_info {unsigned char task_uuid[16];vm_extmod_statistics_data_t extmod_statistics;};
typedef integer_t task_info_data_t[1024];
struct utun_stats_param {u_int64_t utsp_packets;u_int64_t utsp_bytes;u_int64_t utsp_errors;};
struct vnop_bwrite_args {vnodeop_desc *a_desc;buf_t a_bp;};
struct x86_cpmu_state64 {__uint64_t ctrs[16];};
typedef UInt64 CSRNodeUniqueID;
typedef DCLTimeStamp *DCLTimeStampPtr;
struct DVDTitleKeyInfo {UInt8 dataLength[2];UInt8 reserved[2];unsigned char CP_MOD : 4;unsigned char CGMS : 2;unsigned char CP_SEC : 1;unsigned char CPM : 1;UInt8 titleKeyValue[5];UInt8 reserved2[2];};
struct IOATAReg16_vtbl; 
struct IOATAReg32_vtbl; 
typedef UInt32 IOAppleTimingID;
typedef SInt32 IODisplayModeID;
struct IODot3CollEntry {UInt32 collFrequencies[16];};
typedef UInt32 IOStorageAccess;
struct IOStorageExtent {UInt64 byteStart;UInt64 byteCount;};
typedef UInt32 RegPathNameSize;
struct SCSI_Sense_Data {UInt8 VALID_RESPONSE_CODE;UInt8 SEGMENT_NUMBER;UInt8 SENSE_KEY;UInt8 INFORMATION_1;UInt8 INFORMATION_2;UInt8 INFORMATION_3;UInt8 INFORMATION_4;UInt8 ADDITIONAL_SENSE_LENGTH;UInt8 COMMAND_SPECIFIC_INFORMATION_1;UInt8 COMMAND_SPECIFIC_INFORMATION_2;UInt8 COMMAND_SPECIFIC_INFORMATION_3;UInt8 COMMAND_SPECIFIC_INFORMATION_4;UInt8 ADDITIONAL_SENSE_CODE;UInt8 ADDITIONAL_SENSE_CODE_QUALIFIER;UInt8 FIELD_REPLACEABLE_UNIT_CODE;UInt8 SKSV_SENSE_KEY_SPECIFIC_MSB;UInt8 SENSE_KEY_SPECIFIC_MID;UInt8 SENSE_KEY_SPECIFIC_LSB;};
struct VDScalerInfoRec {UInt32 csScalerInfoSize;UInt32 csScalerInfoVersion;UInt32 csReserved1;UInt32 csReserved2;UInt32 csScalerFeatures;UInt32 csMaxHorizontalPixels;UInt32 csMaxVerticalPixels;UInt32 csReserved3;UInt32 csReserved4;UInt32 csReserved5;UInt32 csReserved6;UInt32 csReserved7;};
typedef UInt32 VideoDeviceType;
typedef __uint16_t __darwin_mode_t;
typedef __darwin_wchar_t __darwin_rune_t;
typedef  ccdigest_info *ccdigest_lookup(ccoid_t);
typedef int32_t *gssd_etype_list;
struct host_sched_info {integer_t min_timeout;integer_t min_quantum;};
typedef u_int32_t ifnet_offload_t;
typedef io_object_t io_enumerator_t;
struct kev_vendor_code {u_int32_t vendor_code;char vendor_string[200];};
typedef int64_t ledger_amount_t;
typedef lock_set_t lock_set_port_t;
typedef u_int16_t mbuf_tag_type_t;
struct policy_rr_limit {integer_t max_priority;};
struct relocation_info {int32_t r_address;unsigned int r_symbolnum : 24;unsigned int r_pcrel : 1;unsigned int r_length : 2;unsigned int r_extern : 1;unsigned int r_type : 4;};
struct stateChangeNote {IOPMPowerFlags stateFlags;unsigned int stateNum;void *powerRef;};
typedef u_int32_t text_encoding_t;
typedef integer_t *thread_policy_t;
struct ATAPICmdPacket {UInt16 atapiPacketSize;UInt16 atapiCommandByte[8];};
typedef DCLCallProc *DCLCallProcPtr;
struct DVDDiscKeyInfo {UInt8 dataLength[2];UInt8 reserved[2];UInt8 discKeyStructures[2048];};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrOpaqueInfo {int8_t opaque[16];};
struct IOATAReg8_vtbl; 
struct IOExternalTrap {IOService *object;IOTrap func;};
typedef UInt32 IOFourCharCode;
struct IONetworkStats {UInt32 inputPackets;UInt32 inputErrors;UInt32 outputPackets;UInt32 outputErrors;UInt32 collisions;};
struct IOPMPowerState {unsigned int version;IOPMPowerFlags capabilityFlags;IOPMPowerFlags outputPowerCharacter;IOPMPowerFlags inputPowerRequirement;unsigned int staticPower;unsigned int stateOrder;unsigned int powerToAttain;unsigned int timeToAttain;unsigned int settleUpTime;unsigned int timeToLower;unsigned int settleDownTime;unsigned int powerDomainBudget;};
struct IOUSBHubStatus {UInt16 statusFlags;UInt16 changeFlags;};
typedef UInt32 RegIterationOp;
typedef UInt32 SCSIPortStatus;
typedef UInt32 VDClutBehavior;
typedef __int32_t __darwin_dev_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_ino_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_uid_t;
typedef __builtin_va_list __gnuc_va_list;
struct ctl_event_data {u_int32_t ctl_id;u_int32_t ctl_unit;};
struct host_load_info {integer_t avenrun[3];integer_t mach_factor[3];};
typedef u_int32_t ifnet_family_t;
struct ifs_iso_8802_3 {u_int32_t dot3StatsAlignmentErrors;u_int32_t dot3StatsFCSErrors;u_int32_t dot3StatsSingleCollisionFrames;u_int32_t dot3StatsMultipleCollisionFrames;u_int32_t dot3StatsSQETestErrors;u_int32_t dot3StatsDeferredTransmissions;u_int32_t dot3StatsLateCollisions;u_int32_t dot3StatsExcessiveCollisions;u_int32_t dot3StatsInternalMacTransmitErrors;u_int32_t dot3StatsCarrierSenseErrors;u_int32_t dot3StatsFrameTooLongs;u_int32_t dot3StatsInternalMacReceiveErrors;u_int32_t dot3StatsEtherChipSet;u_int32_t dot3StatsMissedFrames;u_int32_t dot3StatsCollFrequencies[16];u_int32_t dot3Compliance;};
typedef void (*img4_destroy_t)(img4_t *);
struct __attribute__((packed)) ip6_opt_router {u_int8_t ip6or_type;u_int8_t ip6or_len;u_int8_t ip6or_value[2];};
struct __attribute__((packed)) ip6_opt_tunnel {u_int8_t ip6ot_type;u_int8_t ip6ot_len;u_int8_t ip6ot_encap_limit;};
struct kern_event_msg {u_int32_t total_size;u_int32_t vendor_code;u_int32_t kev_class;u_int32_t kev_subclass;u_int32_t id;u_int32_t event_code;u_int32_t event_data[1];};
typedef ledger_t *ledger_array_t;
struct net_event_data {u_int32_t if_family;u_int32_t if_unit;char if_name[16];};
typedef integer_t *policy_limit_t;
struct policy_rr_base {integer_t base_priority;integer_t quantum;};
typedef void (*sf_detach_func)(void *, socket_t);
typedef thread_t *thread_array_t;
typedef __int32_t user32_ssize_t;
typedef __uint32_t user32_ulong_t;
typedef __int64_t user64_ssize_t;
typedef __uint64_t user64_ulong_t;
typedef DCLCommand *DCLCommandPtr;
typedef IODisplayModeID DisplayModeID;
typedef UInt32 HIDReportType;
struct IOAccelBounds {SInt16 x;SInt16 y;SInt16 w;SInt16 h;};
typedef UInt32 IOByteCount32;
typedef UInt64 IOByteCount64;
typedef UInt32 IOCommandCode;
typedef UInt32 IOCommandKind;
typedef void (*NuDCLCallback)(void *, NuDCLRef);
typedef int64_t OSKextVersion;
struct VDEntryRecord {Ptr csTable;};
struct VDGammaRecord {Ptr csGTable;};
struct VDSyncInfoRec {UInt8 csMode;UInt8 csFlags;};
typedef __uint32_t __darwin_id_t;
struct _img4_payload {_img4_payload_opaque_data_32 __opaque;};
typedef integer_t cpu_subtype_t;
typedef u_int32_t fsfile_type_t;
typedef integer_t host_flavor_t;
typedef integer_t *host_info64_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef io_object_t io_iterator_t;
struct __attribute__((packed)) ip6_opt_jumbo {u_int8_t ip6oj_type;u_int8_t ip6oj_len;u_int8_t ip6oj_jumbo_len[4];};
struct kev_d_vectors {u_int32_t data_length;void *data_ptr;};
typedef ledger_t ledger_port_t;
typedef integer_t mach_msg_id_t;
struct mach_timespec {unsigned int tv_sec;clock_res_t tv_nsec;};
typedef u_int32_t mbuf_tag_id_t;
typedef mig_stub_routine_t mig_routine_t;
typedef integer_t *policy_base_t;
typedef integer_t *policy_info_t;
typedef __uint32_t sae_associd_t;
typedef u_int64_t syscall_arg_t;
typedef integer_t *task_policy_t;
typedef integer_t *thread_info_t;
typedef thread_t thread_port_t;
typedef __uint32_t user32_addr_t;
typedef __int32_t user32_long_t;
typedef __uint32_t user32_size_t;
typedef __int32_t user32_time_t;
typedef __uint64_t user64_addr_t;
typedef __int64_t user64_long_t;
typedef __uint64_t user64_size_t;
typedef __int64_t user64_time_t;
typedef __uint64_t user_tcflag_t;
typedef __darwin_uuid_string_t uuid_string_t;
typedef UInt64 AbsoluteTime;
typedef UInt8 DVDKeyFormat;
typedef UInt32 DVDMediaType;
typedef UInt32 GammaTableID;
struct __attribute__((packed)) __attribute__((aligned(2))) HFSUniStr255 {u_int16_t length;u_int16_t unicode[255];};
typedef IOBlitSurface IOBlitMemory;
typedef UInt32 IOMediaState;
typedef UInt32 IOMediumType;
typedef UInt32 IOOptionBits;
typedef kxld_log_level KXLDLogLevel;
struct LittleSInt16 {LittleSInt16__UValue mValue;};
struct LittleSInt32 {LittleSInt32__UValue mValue;};
struct LittleSInt64 {LittleSInt64__UValue mValue;};
struct LittleUInt16 {LittleUInt16__UValue mValue;};
struct LittleUInt32 {LittleUInt32__UValue mValue;};
struct LittleUInt64 {LittleUInt64__UValue mValue;};
typedef UInt8 RawSenseCode;
typedef UInt32 RegModifiers;
typedef UInt32 ServiceCount;
struct UnsignedWide {UInt32 lo;UInt32 hi;};
struct VDFlagRecord {SInt8 csMode;SInt8 filler;};
typedef alarm_t alarm_port_t;
typedef thread_snapshot_wait_flags block_hint_t;
typedef u_int32_t bpf_tap_mode;
typedef u_int32_t fsobj_type_t;
struct icmp6_filter {u_int32_t icmp6_filt[8];};
struct icmp_ra_addr {u_int32_t ira_addr;u_int32_t ira_preference;};
struct if_family_id {u_int32_t iffmid_len;u_int32_t iffmid_id;char iffmid_str[1];};
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef int8_t int_least8_t;
typedef io_object_t io_connect_t;
typedef io_object_t io_service_t;
struct __attribute__((packed)) ip6_opt_nsap {u_int8_t ip6on_type;u_int8_t ip6on_len;u_int8_t ip6on_src_nsap_len;u_int8_t ip6on_dst_nsap_len;};
typedef UInt32 *kbdBitVector;
typedef kern_return_t mach_error_t;
typedef u_int32_t mbuf_flags_t;
struct __attribute__((packed)) nd_opt_nonce {u_int8_t nd_opt_nonce_type;u_int8_t nd_opt_nonce_len;u_int8_t nd_opt_nonce[6];};
typedef __uint32_t sae_connid_t;
typedef u_int32_t sflt_event_t;
typedef task_t *task_array_t;
typedef __int64_t user32_off_t;
typedef __int64_t user64_off_t;
typedef __uint64_t user_speed_t;
typedef int64_t user_ssize_t;
typedef u_int64_t user_ulong_t;
typedef UInt32 BDMediaType;
typedef UInt32 CDMediaType;
typedef UInt8 CDTOCFormat;
typedef DCLLabel *DCLLabelPtr;
typedef UInt8 DVDBookType;
typedef UInt32 DVDFeatures;
struct DVDKey1Info {UInt8 dataLength[2];UInt8 reserved[2];UInt8 key1Value[5];UInt8 reserved2[3];};
struct DVDKey2Info {UInt8 dataLength[2];UInt8 reserved[2];UInt8 key2Value[5];UInt8 reserved2[3];};
typedef UInt8 DVDKeyClass;
struct IOAccelSize {SInt16 w;SInt16 h;};
typedef IOByteCount32 IOByteCount;
typedef UInt32 IOCacheMode;
typedef UInt32 IOFixed1616;
typedef UInt32 IOItemCount;
struct OSData_vtbl; 
struct OSMetaClass { OSMetaClassBase cppsuper0;ExpansionData *reserved; OSMetaClass *superClassLink; OSSymbol *className;unsigned int classSize;unsigned int instanceCount;};
typedef RGBColorPtr *RGBColorHdl;
typedef DeviceTreeNode *RealDTEntry;
struct ataTaskFile {UInt8 ataTFFeatures;UInt8 ataTFCount;UInt8 ataTFSector;UInt8 ataTFCylLo;UInt8 ataTFCylHigh;UInt8 ataTFSDH;UInt8 ataTFCommand;};
struct atomic_flag {atomic_bool _Value;};
typedef u_int32_t attrgroup_t;
typedef u_int64_t au_asflgs_t;
struct audit_fstat {u_int64_t af_filesz;u_int64_t af_currsz;};
struct bpf_program {u_int bf_len;bpf_insn *bf_insns;};
typedef u_int32_t bpf_u_int32;
struct bpf_version {u_short bv_major;u_short bv_minor;};
struct console_ops {void (*putc)(int, int, int);int (*getc)(int, int, boolean_t, boolean_t);};
typedef u_int32_t fsobj_tag_t;
typedef integer_t *host_info_t;
typedef host_t host_name_t;
typedef int8_t int_fast8_t;
struct kcdata_iter {kcdata_item_t item;void *end;};
struct kev_request {u_int32_t vendor_code;u_int32_t kev_class;u_int32_t kev_subclass;};
struct ledger_info {char li_name[32];int64_t li_id;int64_t li_entries;};
typedef ipc_port_t mach_port_t;
typedef u_int32_t mbuf_type_t;
typedef __uint8_t sa_family_t;
typedef u_int32_t sflt_handle;
struct sigaltstack {void *ss_sp;__darwin_size_t ss_size;int ss_flags;};
typedef void (*sock_upcall)(socket_t, void *, int);
struct sockaddr_un {unsigned char sun_len;sa_family_t sun_family;char sun_path[104];};
typedef u_int8_t sockopt_dir;
typedef __darwin_suseconds_t suseconds_t;
typedef integer_t *task_info_t;
typedef task_t task_port_t;
typedef integer_t task_role_t;
typedef u_int64_t user_addr_t;
typedef int64_t user_long_t;
typedef u_int64_t user_size_t;
typedef int64_t user_time_t;
typedef UInt32 BDFeatures;
typedef UInt32 CDFeatures;
typedef DCLJump *DCLJumpPtr;
typedef UInt32 IOBlitType;
struct IOUSBMatch {UInt16 usbClass;UInt16 usbSubClass;UInt16 usbProtocol;UInt16 usbVendor;UInt16 usbProduct;};
struct NumVersion {UInt8 majorRev;UInt8 minorAndBugRev;UInt8 stage;UInt8 nonRelRev;};
typedef SInt32 OSSpinLock;
typedef UInt32 OptionBits;
struct VDSettings {SInt16 csParamCnt;SInt16 csBrightMax;SInt16 csBrightDef;SInt16 csBrightVal;SInt16 csCntrstMax;SInt16 csCntrstDef;SInt16 csCntrstVal;SInt16 csTintMax;SInt16 csTintDef;SInt16 csTintVal;SInt16 csHueMax;SInt16 csHueDef;SInt16 csHueVal;SInt16 csHorizDef;SInt16 csHorizVal;SInt16 csHorizMax;SInt16 csVertDef;SInt16 csVertVal;SInt16 csVertMax;};
struct VDSizeInfo {SInt16 csHSize;SInt16 csHPos;SInt16 csVSize;SInt16 csVPos;};
typedef u_int32_t au_class_t;
typedef u_int16_t au_event_t;
typedef integer_t cpu_type_t;
struct diskextent {u_int32_t startblock;u_int32_t blockcount;};
struct ether_addr {u_char octet[6];};
typedef __darwin_fsblkcnt_t fsblkcnt_t;
typedef __darwin_fsfilcnt_t fsfilcnt_t;
typedef gz_header *gz_headerp;
typedef u_int32_t mbuf_how_t;
struct __attribute__((packed)) nd_opt_hdr {u_int8_t nd_opt_type;u_int8_t nd_opt_len;};
typedef int32_t register_t;
typedef u_int32_t sflt_flags;
struct sysctl_oid {sysctl_oid_list *oid_parent;sysctl_oid___BF306FC4453E1DFFB4E5D662FA87221D oid_link;int oid_number;int oid_kind;void *oid_arg1;int oid_arg2; char *oid_name;int (*oid_handler)(sysctl_oid *, void *, int, sysctl_req *); char *oid_fmt; char *oid_descr;int oid_version;int oid_refcnt;};
struct time_value {integer_t seconds;integer_t microseconds;};
typedef __darwin_useconds_t useconds_t;
typedef int64_t user_off_t;
struct BigSInt16 {BigSInt16__UValue mValue;};
struct BigSInt32 {BigSInt32__UValue mValue;};
struct BigSInt64 {BigSInt64__UValue mValue;};
struct BigUInt16 {BigUInt16__UValue mValue;};
struct BigUInt32 {BigUInt32__UValue mValue;};
struct BigUInt64 {BigUInt64__UValue mValue;};
typedef IOByteCount ByteCount;
struct ColorSpec {short value;RGBColor rgb;};
typedef UInt16 DepthMode;
typedef SInt32 IOAccelID;
struct IOGBounds {SInt16 minx;SInt16 maxx;SInt16 miny;SInt16 maxy;};
typedef UInt32 IOMessage;
struct IOTVector {void *pc;UInt32 toc;};
typedef UInt32 IOVersion;
typedef IOItemCount ItemCount;
typedef UInt32 KLogLevel;
typedef kxld_flags KXLDFlags;
typedef UInt32 PBVersion;
typedef UInt32 *UInt32Ptr;
typedef UInt16 USBStatus;
typedef u_int16_t au_emod_t;
typedef __darwin_blksize_t blksize_t;
typedef int32_t bpf_int32;
struct call_gate {unsigned short offset00;sel_t seg;unsigned int argcnt : 5;unsigned int : 3;unsigned int type : 5;unsigned int dpl : 2;unsigned int present : 1;unsigned int offset16 : 16;};
typedef __darwin_ct_rune_t ct_rune_t;
typedef int64_t daddr64_t;
typedef void (*free_func)(voidpf, voidpf);
typedef u_int32_t fsvolid_t;
typedef __uint32_t in_addr_t;
typedef __uint16_t in_port_t;
struct intr_gate {unsigned short offset00;sel_t seg;unsigned int : 8;unsigned int type : 5;unsigned int dpl : 2;unsigned int present : 1;unsigned int offset16 : 16;};
struct __attribute__((packed)) ip6_rthdr {u_int8_t ip6r_nxt;u_int8_t ip6r_len;u_int8_t ip6r_type;u_int8_t ip6r_segleft;};
typedef __darwin_mbstate_t mbstate_t;
typedef __darwin_natural_t natural_t;
typedef __darwin_socklen_t socklen_t;
struct sockproto {__uint16_t sp_family;__uint16_t sp_protocol;};
struct timeval32 {__int32_t tv_sec;__int32_t tv_usec;};
struct timeval64 {__int64_t tv_sec;__int64_t tv_usec;};
struct trap_gate {unsigned short offset00;sel_t seg;unsigned int : 8;unsigned int type : 5;unsigned int dpl : 2;unsigned int present : 1;unsigned int offset16 : 16;};
typedef natural_t vm_size_t;
typedef z_stream *z_streamp;
typedef UInt32 AVIDType;
typedef SInt32 Duration;
typedef UInt32 HIDUsage;
struct IOGPoint {SInt16 x;SInt16 y;};
typedef kern_return_t IOReturn;
typedef UInt32 IOSelect;
typedef thread_t IOThread;
struct OSObject { OSMetaClassBase cppsuper0;int retainCount;};
typedef kern_return_t OSReturn;
typedef SInt32 OSStatus;
struct OSString { OSObject cppsuper0;char *string;unsigned int flags;unsigned int length;};
struct OSSymbol { OSString cppsuper0;};
typedef __darwin_blkcnt_t blkcnt_t;
struct bpf_stat {u_int bs_recv;u_int bs_drop;};
struct ctl_info {u_int32_t ctl_id;char ctl_name[96];};
struct __attribute__((packed)) frmrinfo {u_int8_t frmr_rej_pdu0;u_int8_t frmr_rej_pdu1;u_int8_t frmr_control;u_int8_t frmr_control_ext;u_int8_t frmr_cause;};
struct fsobj_id {u_int32_t fid_objno;u_int32_t fid_generation;};
struct icmpstat {u_int32_t icps_error;u_int32_t icps_oldshort;u_int32_t icps_oldicmp;u_int32_t icps_outhist[41];u_int32_t icps_badcode;u_int32_t icps_tooshort;u_int32_t icps_checksum;u_int32_t icps_badlen;u_int32_t icps_reflect;u_int32_t icps_inhist[41];u_int32_t icps_bmcastecho;u_int32_t icps_bmcasttstamp;};
struct igmpstat {u_int igps_rcv_total;u_int igps_rcv_tooshort;u_int igps_rcv_badsum;u_int igps_rcv_queries;u_int igps_rcv_badqueries;u_int igps_rcv_reports;u_int igps_rcv_badreports;u_int igps_rcv_ourreports;u_int igps_snd_reports;};
typedef __darwin_intptr_t intptr_t;
struct __attribute__((packed)) ip6_dest {u_int8_t ip6d_nxt;u_int8_t ip6d_len;};
struct sadb_ext {u_int16_t sadb_ext_len;u_int16_t sadb_ext_type;};
struct sadb_key {u_int16_t sadb_key_len;u_int16_t sadb_key_exttype;u_int16_t sadb_key_bits;u_int16_t sadb_key_reserved;};
typedef __darwin_sigset_t sigset_t;
struct timespec {__darwin_time_t tv_sec;int tv_nsec;};
typedef u_int64_t u_quad_t;
typedef u_int16_t uint16_t;
typedef u_int32_t uint32_t;
typedef u_int64_t uint64_t;
struct vfsquery {u_int32_t vq_flags;u_int32_t vq_spare[31];};
typedef mach_port_t vm_map_t;
typedef UInt8 *BytePtr;
typedef SInt32 IOFixed;
struct IOGSize {SInt16 width;SInt16 height;};
typedef SInt32 IOIndex;
typedef UInt32 KLogTag;
struct MD5_CTX {u_int32_t state[4];u_int32_t count[2];unsigned char buffer[64];};
typedef FourCharCode ResType;
typedef UInt16 UniChar;
struct arpstat {uint32_t txrequests;uint32_t txreplies;uint32_t txannounces;uint32_t rxrequests;uint32_t rxreplies;uint32_t received;uint32_t txconflicts;uint32_t invalidreqs;uint32_t reqnobufs;uint32_t dropped;uint32_t purged;uint32_t timeouts;uint32_t dupips;uint32_t inuse;uint32_t txurequests;uint32_t held;};
typedef int64_t cc_dint;
typedef uint32_t cc_unit;
typedef cc_unit *ccnp1_t;
typedef __darwin_clock_t clock_t;
struct cmsghdr {socklen_t cmsg_len;int cmsg_level;int cmsg_type;};
typedef int32_t daddr_t;
struct esptail {u_int8_t esp_padlen;u_int8_t esp_nxt;};
typedef __int32_t fd_mask;
typedef u_int32_t fixpt_t;
struct in_addr {in_addr_t s_addr;};
typedef __darwin_ino64_t ino64_t;
struct __attribute__((packed)) ip6_ext {u_int8_t ip6e_nxt;u_int8_t ip6e_len;};
struct __attribute__((packed)) ip6_hbh {u_int8_t ip6h_nxt;u_int8_t ip6h_len;};
struct __attribute__((packed)) ip6_opt {u_int8_t ip6o_type;u_int8_t ip6o_len;};
struct ip_mreq {in_addr imr_multiaddr;in_addr imr_interface;};
struct ip_opts {in_addr ip_dst;char ip_opts[40];};
struct mt_task {uint64_t mtk_counts[3];};
typedef __uint16_t n_short;
typedef __uint16_t nlink_t;
typedef uint32_t ppnum_t;
typedef uint32_t reg64_t;
typedef __darwin_size_t rsize_t;
struct section {char sectname[16];char segname[16];uint32_t addr;uint32_t size;uint32_t offset;uint32_t align;uint32_t reloff;uint32_t nreloc;uint32_t flags;uint32_t reserved1;uint32_t reserved2;};
typedef int32_t segsz_t;
typedef __darwin_ssize_t ssize_t;
typedef int32_t swblk_t;
typedef __uint32_t tcp_seq;
struct udpstat {u_int32_t udps_ipackets;u_int32_t udps_hdrops;u_int32_t udps_badsum;u_int32_t udps_badlen;u_int32_t udps_noport;u_int32_t udps_noportbcast;u_int32_t udps_fullsock;u_int32_t udpps_pcbcachemiss;u_int32_t udpps_pcbhashmiss;u_int32_t udps_opackets;u_int32_t udps_fastout;u_int32_t udps_nosum;u_int32_t udps_noportmcast;u_int32_t udps_filtermcast;u_int32_t udps_rcv_swcsum;u_int32_t udps_rcv_swcsum_bytes;u_int32_t udps_rcv6_swcsum;u_int32_t udps_rcv6_swcsum_bytes;u_int32_t udps_snd_swcsum;u_int32_t udps_snd_swcsum_bytes;u_int32_t udps_snd6_swcsum;u_int32_t udps_snd6_swcsum_bytes;};
typedef u_int8_t uint8_t;
struct vfsconf {uint32_t vfc_reserved1;char vfc_name[15];int vfc_typenum;int vfc_refcount;int vfc_flags;uint32_t vfc_reserved2;uint32_t vfc_reserved3;};
typedef Ptr *Handle;
struct OSData { OSObject cppsuper0;void *data;unsigned int length;unsigned int capacity;unsigned int capacityIncrement;OSData__ExpansionData *reserved;};
typedef FourCharCode OSType;
struct UCInfo { OSObject cppsuper0;IOFireWireAVCProtocolUserClient *fUserClient;};
typedef cc_unit *cc2n_t;
typedef int32_t cc_int;
struct fd_set {__int32_t fds_bits[32];};
struct ipstat {u_int32_t ips_total;u_int32_t ips_badsum;u_int32_t ips_tooshort;u_int32_t ips_toosmall;u_int32_t ips_badhlen;u_int32_t ips_badlen;u_int32_t ips_fragments;u_int32_t ips_fragdropped;u_int32_t ips_fragtimeout;u_int32_t ips_forward;u_int32_t ips_fastforward;u_int32_t ips_cantforward;u_int32_t ips_redirectsent;u_int32_t ips_noproto;u_int32_t ips_delivered;u_int32_t ips_localout;u_int32_t ips_odropped;u_int32_t ips_reassembled;u_int32_t ips_fragmented;u_int32_t ips_ofragments;u_int32_t ips_cantfrag;u_int32_t ips_badoptions;u_int32_t ips_noroute;u_int32_t ips_badvers;u_int32_t ips_rawout;u_int32_t ips_toolong;u_int32_t ips_notmember;u_int32_t ips_nogif;u_int32_t ips_badaddr;u_int32_t ips_pktdropcntrl;u_int32_t ips_rcv_swcsum;u_int32_t ips_rcv_swcsum_bytes;u_int32_t ips_snd_swcsum;u_int32_t ips_snd_swcsum_bytes;u_int32_t ips_adj;u_int32_t ips_adj_hwcsum_clr;u_int32_t ips_rxc_collisions;u_int32_t ips_rxc_chained;u_int32_t ips_rxc_notchain;u_int32_t ips_rxc_chainsz_gt2;u_int32_t ips_rxc_chainsz_gt4;u_int32_t ips_rxc_notlist;u_int32_t ips_raw_sappend_fail;u_int32_t ips_necp_policy_drop;};
union lc_str {uint32_t offset;char *ptr;};
typedef __darwin_mode_t mode_t;
struct msghdr {void *msg_name;socklen_t msg_namelen;iovec *msg_iov;int msg_iovlen;void *msg_control;socklen_t msg_controllen;int msg_flags;};
struct mt_cpu {uint64_t mtc_snaps[3];uint64_t mtc_counts[3];uint64_t mtc_counts_last[3];};
typedef __uint32_t n_long;
typedef __uint32_t n_time;
struct newesp {u_int32_t esp_spi;u_int32_t esp_seq;};
typedef mach_port_t port_t;
typedef int64_t quad_t;
typedef __uint64_t rlim_t;
struct rlimit {rlim_t rlim_cur;rlim_t rlim_max;};
typedef __darwin_rune_t rune_t;
typedef __darwin_size_t size_t;
struct so_nke {unsigned int nke_handle;unsigned int nke_where;int nke_flags;u_int32_t reserved[4];};
typedef __uint32_t tcp_cc;
struct tcphdr {unsigned short th_sport;unsigned short th_dport;tcp_seq th_seq;tcp_seq th_ack;unsigned int th_x2 : 4;unsigned int th_off : 4;unsigned char th_flags;unsigned short th_win;unsigned short th_sum;unsigned short th_urp;};
typedef __darwin_time_t time_t;
typedef uLong uLongf;
struct udphdr {u_short uh_sport;u_short uh_dport;u_short uh_ulen;u_short uh_sum;};
typedef __darwin_uuid_t uuid_t;
typedef __darwin_wint_t wint_t;
typedef Byte Bytef;
struct CDMSF {UInt8 minute;UInt8 second;UInt8 frame;};
typedef UInt32 Fixed;
typedef UInt32 Fract;
struct _img4 {_img4_opaque_data_32 __opaque;};
typedef uint64_t aid_t;
struct cc_ws {cc_unit *start;cc_unit *end;};
typedef cc_unit *ccn_t;
typedef __darwin_dev_t dev_t;
typedef gdt_entry_t gdt_t;
typedef __darwin_gid_t gid_t;
typedef idt_entry_t idt_t;
struct ifdrv {char ifd_name[16];unsigned int ifd_cmd;size_t ifd_len;void *ifd_data;};
struct ifkpi {unsigned int ifk_module_id;unsigned int ifk_type;ifkpi___AB6F1404A19A5F7B793DBFB90D0477FB ifk_data;};
typedef __darwin_ino_t ino_t;
struct iovec {void *iov_base;size_t iov_len;};
typedef __int32_t key_t;
typedef ldt_entry_t ldt_t;
typedef __darwin_off_t off_t;
typedef __darwin_pid_t pid_t;
typedef uInt uIntf;
typedef __darwin_uid_t uid_t;
typedef mach_port_t upl_t;
typedef uint32_t xcred[19];
typedef size_t Size;
struct U128 {uint64_t lo;uint64_t hi;};
struct fsid {int32_t val[2];};
typedef __darwin_id_t id_t;
struct Key {uint64_t _value;char _modified;};
struct esp {u_int32_t esp_spi;};
struct msg {msg *msg_next;int msg_type;unsigned short msg_ts;short msg_spot;label *label;};
struct sem {unsigned short semval;pid_t sempid;unsigned short semncnt;unsigned short semzcnt;};
struct tss {sel_t oldtss;unsigned int : 0;unsigned int esp0;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} ss0;unsigned int : 0;unsigned int esp1;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} ss1;unsigned int : 0;unsigned int esp2;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} ss2;unsigned int : 0;unsigned int cr3;unsigned int eip;unsigned int eflags;unsigned int eax;unsigned int ecx;unsigned int edx;unsigned int ebx;unsigned int esp;unsigned int ebp;unsigned int esi;unsigned int edi;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} es;unsigned int : 0;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} cs;unsigned int : 0;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} ss;unsigned int : 0;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} ds;unsigned int : 0;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} fs;unsigned int : 0;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} gs;unsigned int : 0;struct {unsigned short rpl : 2;unsigned short ti : 1;unsigned short index : 13;} ldt;unsigned int : 0;unsigned int t : 1;unsigned int : 15;unsigned int io_bmap : 16;};
struct IOSCSIMultimediaCommandsDevice__IOSCSIMultimediaCommandsDeviceExpansionData {IONotifier *fPowerDownNotifier;char fDeviceSupportsPowerOff;BDFeatures fSupportedBDFeatures;char fDeviceSupportsAsyncNotification;char fDeviceSupportsFastSpindown;UInt8 fCDLoadingMechanism;char fDoNotLockMedia;};
struct IOHIDEventService__ExpansionData___55147C02C79D288B0DD9D19715B7B0A0 {Key pressedKeys[10];UInt32 pressedKeysMask;char appleVendorSupported;};
struct IOHIDEventService__ExpansionData___CA12AB0B7A60234CA66CAE85BD1D97D4 {UInt32 deviceID;char range;char touch;SInt32 x;SInt32 y;SInt32 z;};
struct IOBlockStorageDriver__Context___BE415BD52B46893C87A5368B03BB692E {UInt32 size;UInt8 type;UInt8 typeSub[3];};
union embedded_panic_header___2447379B7BF66221A3409CFDF4901523 {_9D11F6C6C0F86C3D22885A5E28854F4A __anonymous0;uint64_t eph_x86_do_not_use;};
union GTraceEntry__ArgsTag___725FD65D9BA5618575D30FB319A50E80 {uint16_t fTarg[4];uint64_t fTag64;};
union IOBlitSurfaceStruct___9F5F1817842B588D090C379943A470FF {UInt8 *bytes;IOBlitMemoryRef ref;};
union x86_exception_state___251411A5B45F799EBE3F14281E77BAD6 {x86_exception_state32_t es32;x86_exception_state64_t es64;};
struct IOEthernetController__IOEthernetControllerAVBSupport {IOEthernetControllerAVBTimeSyncSupport timeSyncSupport;uint32_t numberOfRealtimeTransmitQueues;uint32_t numberOfRealtimeReceiveQueues;char realtimeMulticastIsAllowed;IOMapper *packetMapper;};
struct IOFireWireSBP2ManagementORB__FWSBP2TaskManagementORB {UInt32 orbOffsetHi;UInt32 orbOffsetLo;UInt32 reserved1[2];UInt16 options;UInt16 loginID;UInt32 reserved2;UInt32 statusFIFOAddressHi;UInt32 statusFIFOAddressLo;};
union x86_avx512_state___66330E93180B8BDA73FDCEC8E5D967A8 {x86_avx512_state32_t as32;x86_avx512_state64_t as64;};
union x86_thread_state___D2D4D49B333AEF99596DF2F7E46595A4 {x86_thread_state32_t ts32;x86_thread_state64_t ts64;};
struct IOUSBHostIOSource__tInternalDataTransferParameters {IOMemoryDescriptor *dataBuffer;uint32_t dataBufferLength;uint32_t *bytesTransferred;IOUSBHostCompletion *completion;uint32_t completionTimeoutMs;IOUSBHostIsochronousFrame *frameList;uint32_t frameListCount;uint64_t firstFrameNumber;IOUSBHostIsochronousCompletion *isochronousCompletion;};
union ndrv_demux_desc___5E87C9BB192401A2CD612B3326A5C171 {u_int16_t ether_type;u_int8_t sap[3];u_int8_t snap[5];u_int8_t other[28];};
union x86_debug_state___DE64C214EB37D0506E9F0452E3D9193B {x86_debug_state32_t ds32;x86_debug_state64_t ds64;};
union x86_float_state___598376F8C40D36F3E63ABC99E645E7DC {x86_float_state32_t fs32;x86_float_state64_t fs64;};
struct BluetoothL2CAPRetransmissionAndFlowControlOptions {uint8_t flags;uint8_t txWindowSize;uint8_t maxTransmit;uint16_t retransmissionTimeout;uint16_t monitorTimeout;uint16_t maxPDUPayloadSize;};
union IOFramebuffer___CD9F169B95746E9B5ACA47AEEE44529F {_9A571A51604F14638CF2B975761C43D6 t;UInt8 *tables[4];};
union x86_avx_state___64432BC7CE1ECF60B467DA9EA06DC89E {x86_avx_state32_t as32;x86_avx_state64_t as64;};
struct NXEventData___AD0A8843087A97189913F2342161BC7B {SInt16 deltaAxis1;SInt16 deltaAxis2;SInt16 deltaAxis3;SInt16 reserved1;SInt32 fixedDeltaAxis1;SInt32 fixedDeltaAxis2;SInt32 fixedDeltaAxis3;SInt32 pointDeltaAxis1;SInt32 pointDeltaAxis2;SInt32 pointDeltaAxis3;SInt32 reserved8[4];};
struct NXEventData___E2ADF4E02465F36023F43A09CEA76884 {SInt16 reserved;SInt16 eventNum;SInt32 trackingNum;SInt32 userData;SInt32 reserved1;SInt32 reserved2;SInt32 reserved3;SInt32 reserved4;SInt32 reserved5;SInt32 reserved6[4];};
union bpf_dltlist___B2A9ECBE22ED54CE1AF0CE51601F0A64 {u_int32_t *bflu_list;u_int64_t bflu_pad;};
union sha1_ctxt___A8BA7BDC1C910B178726D427455301E3 {u_int8_t b8[64];u_int32_t b32[16];};
union sha1_ctxt___FF46DB5CE0261698EDEAFF2E82501994 {u_int8_t b8[20];u_int32_t b32[5];};
typedef IOReturn IOFWIsochChannel__ForceStopNotificationProc(void *, IOFWIsochChannel *, UInt32);
union nextvend___11E47F7002FDDFD33BA8C3E14C051ED1 {u_char NV0[58];_4C928A861DF53AA82E61C4313B0554E4 NV1;};
struct xinpcb64___71E89AB7AAFF24B549168137682ADA36 {u_int8_t inp6_hlim;int inp6_cksum;u_short inp6_ifindex;short inp6_hops;};
struct IOUSBSuperSpeedEndpointCompanionDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt8 bMaxBurst;UInt8 bmAttributes;UInt16 wBytesPerInterval;};
struct BluetoothHCIQualityOfServiceSetupParams {uint8_t flags;uint8_t serviceType;uint32_t tokenRate;uint32_t peakBandwidth;uint32_t latency;uint32_t delayVariation;};
struct IOFireWireSBP2Login__FWSBP2ReconnectORB {UInt32 reserved1[4];UInt16 options;UInt16 loginID;UInt32 reserved2;UInt32 statusFIFOAddressHi;UInt32 statusFIFOAddressLo;};
struct IOUSBDeviceCapabilityBillboardAltConfig {UInt16 wSVID;UInt8 bAltenateMode;UInt8 iAlternateModeString;};
struct __attribute__((packed)) StandardUSB__BillboardAltModeCapability {uint16_t wSVID;uint8_t bAlternateMode;uint8_t iAlternateModeString;};
typedef IOReturn (*IOAudioControl__DataValueChangeHandler)(OSObject *, IOAudioControl *,  void *, UInt32,  void *, UInt32);
struct IOAudioEngineUserClient__ExpansionData {IOAudioClientBufferExtendedInfo64 *extendedInfo;UInt32 classicMode;UInt32 commandGateStatus;SInt32 commandGateUsage;UInt32 connectionID;};
struct BluetoothL2CAPQualityOfServiceOptions {uint8_t flags;uint8_t serviceType;uint32_t tokenRate;uint32_t tokenBucketSize;uint32_t peakBandwidth;uint32_t latency;uint32_t delayVariation;};
typedef IOReturn (*IOAudioControl__IntValueChangeHandler)(OSObject *, IOAudioControl *, SInt32, SInt32);
typedef IOReturn (*IODMACommand__InternalSegmentFunction)(void *, IODMACommand *, IODMACommand__Segment64, void *, UInt32);
struct IOFWPseudoAddressSpaceAux_vtbl_layout; 
struct IOUSBDeviceCapabilityBillboardAltMode {uint8_t bLength;uint8_t bDescriptorType;uint8_t bDevCapabilityType;uint8_t bIndex;uint16_t dwAlternateModeVdo;};
struct IOFireWireSBP2Login__FWSBP2LogoutORB {UInt32 reserved1[4];UInt16 options;UInt16 loginID;UInt32 reserved2;UInt32 statusFIFOAddressHi;UInt32 statusFIFOAddressLo;};
struct SCSICmd_INQUIRY_Page00_Header_SPC_16 {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt16 PAGE_LENGTH;};
struct SCSICmd_INQUIRY_Page80_Header_SPC_16 {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt16 PAGE_LENGTH;UInt8 PRODUCT_SERIAL_NUMBER;};
struct SCSICmd_INQUIRY_Page83_Header_SPC_16 {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt16 PAGE_LENGTH;};
struct __attribute__((packed)) StandardUSB__DeviceRequestSetSELData {uint8_t u1Sel;uint8_t u1Pel;uint16_t u2Sel;uint16_t u2Pel;};
struct IOBlockStorageProvisionDeviceExtent {UInt64 blockStart;UInt64 blockCount;UInt8 provisionType;UInt8 reserved[7];};
struct IOFireWireSBP2Login__FWSBP2LoginORB {UInt32 password[2];UInt32 loginResponseAddressHi;UInt32 loginResponseAddressLo;UInt16 options;UInt16 lun;UInt16 passwordLength;UInt16 loginResponseLength;UInt32 statusFIFOAddressHi;UInt32 statusFIFOAddressLo;};
struct _AVCGetTargetPlugConnectionInParams {UInt32 subunitTypeAndID;IOFWAVCPlugTypes plugType;UInt32 plugNum;};
struct ip_timestamp__ipt_timestamp__ipt_ta {in_addr ipt_addr;n_long ipt_time;};
struct IOFireWirePowerManager_vtbl_layout; 
struct IOInterruptEventSource_vtbl_layout; 
struct IOUSBDeviceCapabilitySuperSpeedUSB {UInt8 bLength;UInt8 bDescriptorType;UInt8 bDevCapabilityType;UInt8 bmAttributes;UInt16 wSpeedsSupported;UInt8 bFunctionalitySupport;UInt8 bU1DevExitLat;UInt16 wU2DevExitLat;};
struct IOUSBDeviceCapabilityUSB2Extension {UInt8 bLength;UInt8 bDescriptorType;UInt8 bDevCapabilityType;UInt32 bmAttributes;};
union _16C37BE43F73B60D5456A4D0F8F2ABA5 {NXTabletPointData point;NXTabletProximityData proximity;};
union _64883DA235470546DFCFEE5C08C7D090 {float F[11];SInt32 L[11];SInt16 S[22];char C[44];};
struct _664150227402B916DBC97EF360B4CE67 {uint8_t sourceAddress[16];uint8_t sourceAddressMask[16];uint8_t destinationAddress[16];uint8_t destinationAddressMask[16];uint16_t sourcePort;uint16_t sourcePortMask;uint16_t destinationPort;uint16_t destinationPortMask;uint8_t protocol;};
struct _7008580425A2D9D299FFCC87FFBB188D {u_int8_t control;u_int8_t org_code[3];u_int16_t ether_type;};
struct _97FA55610E70EED36F23615CB8D37A51 {UInt8 index;UInt8 number;CDMSF time;};
struct _D22B7EC2FFE3E379BCF7926C521C3184 {IOReturn (*ptr)(void *, void *, void *, void *, void *, void *);size_t adj;};
struct _D66CA102EDE5E62C512F01257BBA43A6 {HIDUsage usage;HIDUsage reserved1;UInt32 stringIndex;UInt32 reserved2;UInt32 designatorIndex;UInt32 reserved3;};
struct _DAC77EA8E8A0BF31FD8675571F8AEEAD {HIDUsage usageMin;HIDUsage usageMax;UInt32 stringMin;UInt32 stringMax;UInt32 designatorMin;UInt32 designatorMax;};
struct __attribute__((packed)) crashinfo_proc_uniqidentifierinfo {uint8_t p_uuid[16];uint64_t p_uniqueid;uint64_t p_puniqueid;uint64_t p_reserve2;uint64_t p_reserve3;uint64_t p_reserve4;};
typedef IOReturn (*IOFramebufferNotificationHandler)(OSObject *, void *, IOFramebuffer *, IOIndex, void *);
typedef void (*IOHIDInterface__CompletionAction)(OSObject *, void *, IOReturn, UInt32);
struct __attribute__((packed)) StandardUSB30__tHubPortStatusExt {uint16_t wPortStatus;uint16_t wPortChange;uint32_t dwExtPortStatus;};
struct IOMemoryCursor__PhysicalSegment {IOPhysicalAddress location;IOPhysicalLength length;};
struct SCSICmd_INQUIRY_StandardDataAll {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 RMB;UInt8 VERSION;UInt8 RESPONSE_DATA_FORMAT;UInt8 ADDITIONAL_LENGTH;UInt8 SCCSReserved;UInt8 flags1;UInt8 flags2;char VENDOR_IDENTIFICATION[8];char PRODUCT_IDENTIFICATION[16];char PRODUCT_REVISION_LEVEL[4];UInt8 VendorSpecific1[20];UInt8 flags3;UInt8 Reserved1;UInt16 VERSION_DESCRIPTOR[8];UInt8 Reserved2[22];UInt8 VendorSpecific2[160];};
struct IOFWPseudoAddressSpaceAux_vtbl; 
struct IOUSBDeviceCapabilityBillboard {UInt8 bLength;UInt8 bDescriptorType;UInt8 bDevCapabilityType;UInt8 iAdditionalInfoURL;UInt8 bNumberOfAlternateModes;UInt8 bPreferredAlternateMode;UInt16 vCONNPower;UInt8 bmConfigured[32];UInt16 bcdVersion;UInt8 bAdditionalFailureInfo;UInt8 bReserved;};
struct IOUSBDeviceQualifierDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt16 bcdUSB;UInt8 bDeviceClass;UInt8 bDeviceSubClass;UInt8 bDeviceProtocol;UInt8 bMaxPacketSize0;UInt8 bNumConfigurations;UInt8 bReserved;};
struct kern_work_interval_create_args {uint64_t wica_id;uint32_t wica_port;uint32_t wica_create_flags;};
typedef IOReturn (*GTraceBuffer__breadcrumb_func)(void *, void *, uint16_t *);
struct IOAudioControl__ExpansionData {IOAudioEngine *providerEngine;OSArray *notificationQueue;UInt32 commandGateStatus;SInt32 commandGateUsage;};
typedef IOReturn (*IOPMSettingControllerCallback)(OSObject *,  OSSymbol *, OSObject *, uintptr_t);
struct IOUSBHostIOSourceClientRecord {IOService *forClient;UInt32 outstandingIO;IOUSBHostIOSourceClientRecordLink link;};
struct proc_rlimit_control_wakeupmon {uint32_t wm_flags;int32_t wm_rate;};
struct thread_time_constraint_policy {uint32_t period;uint32_t computation;uint32_t constraint;boolean_t preemptible;};
struct IOACPIAddressSpaceDescriptor {UInt32 resourceType;UInt32 generalFlags;UInt32 typeSpecificFlags;UInt32 reserved1;UInt64 granularity;UInt64 minAddressRange;UInt64 maxAddressRange;UInt64 translationOffset;UInt64 addressLength;UInt64 reserved2;UInt64 reserved3;UInt64 reserved4;};
struct IOAudioEngine__ExpansionData {UInt32 pauseCount;IOBufferMemoryDescriptor *statusDescriptor;IOBufferMemoryDescriptor *bytesInInputBufferArrayDescriptor;IOBufferMemoryDescriptor *bytesInOutputBufferArrayDescriptor;UInt32 mixClipOverhead;OSArray *streams;UInt32 inputSampleOffset;UInt32 commandGateStatus;SInt32 commandGateUsage;};
struct IOFWCommand__MemberVariables {void *fFWIMRefCon;IOReturn fCompletionStatus;char fSubmitTimeLatched;AbsoluteTime fSubmitTime;char fFlush;};
struct IOFireWireSBP2ORB__FWSBP2ORB {UInt32 nextORBAddressHi;UInt32 nextORBAddressLo;UInt32 dataDescriptorHi;UInt32 dataDescriptorLo;UInt16 options;UInt16 dataSize;UInt32 commandBlock[1];};
struct IOUSBConfigurationDescHeader {UInt8 bLength;UInt8 bDescriptorType;UInt16 wTotalLength;};
struct IOUSBConfigurationDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt16 wTotalLength;UInt8 bNumInterfaces;UInt8 bConfigurationValue;UInt8 iConfiguration;UInt8 bmAttributes;UInt8 MaxPower;};
typedef void (*KeyboardSpecialEventCallback)(OSObject *, unsigned int, unsigned int, unsigned int, unsigned int, UInt64, char, AbsoluteTime, OSObject *, void *);
struct VDHardwareCursorDrawStateRec {SInt32 csCursorX;SInt32 csCursorY;UInt32 csCursorVisible;UInt32 csCursorSet;UInt32 csReserved1;UInt32 csReserved2;};
struct _IOAudioBufferDataDescriptor {UInt32 fActualDataByteSize;UInt32 fActualNumSampleFrames;UInt32 fTotalDataByteSize;UInt32 fNominalDataByteSize;UInt8 fData[1];};
struct IOATAController__ataDevInfo {ataDeviceType type;atapiConfig packetSend;};
struct IOFireWireDuplicateGUIDList { OSObject cppsuper0;IOFWDuplicateGUIDRec *fFirstGUID;};
struct IOFireWirePowerManager_vtbl; 
struct IOInterruptEventSource_vtbl; 
struct SCSICmd_INQUIRY_PageB1_Data {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt8 Reserved;UInt8 PAGE_LENGTH;UInt16 MEDIUM_ROTATION_RATE;UInt8 Reserved2[58];};
struct SCSICmd_INQUIRY_PageB2_Data {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt16 PAGE_LENGTH;UInt8 THRESHOLD_EXPONENT;UInt8 LBP_FLAGS;UInt8 MINIMUM_PERCENTAGE;UInt8 THRESHOLD_PERCENTAGE;};
typedef errno_t (*img4_environment_get_bool_t)( img4_environment_t *, char *,  void *);
union ip_timestamp__ipt_timestamp {n_long ipt_time[1];ip_timestamp__ipt_timestamp__ipt_ta ipt_ta[1];};
struct FWSBP2LogoutCompleteParams {IOFireWireSBP2Login *login;UInt32 generation;IOReturn status;FWSBP2StatusBlock *statusBlock;UInt32 statusBlockLength;};
struct IOATADevConfig_vtbl_layout; 
typedef SInt32 (*IODTCompareAddressCellFunc)(UInt32,UInt32 *       , UInt32[]);
struct IODisplayScalerInformation {UInt32 __reservedA[1];UInt32 version;UInt32 __reservedB[2];IOOptionBits scalerFeatures;UInt32 maxHorizontalPixels;UInt32 maxVerticalPixels;UInt32 __reservedC[5];};
struct IOHardwareCursorDescriptor {UInt16 majorVersion;UInt16 minorVersion;UInt32 height;UInt32 width;UInt32 bitDepth;UInt32 maskBitDepth;UInt32 numColors;UInt32 *colorEncodings;UInt32 flags;UInt32 supportedSpecialEncodings;UInt32 specialEncodings[16];};
typedef void (*KeyboardSpecialEventAction)(OSObject *, unsigned int, unsigned int, unsigned int, unsigned int, UInt64, char, AbsoluteTime);
struct __attribute__((packed)) StandardUSB__DeviceRequest {uint8_t bmRequestType;uint8_t bRequest;uint16_t wValue;uint16_t wIndex;uint16_t wLength;};
struct IOCommandPool_vtbl_layout; 
struct IOPacketQueue_vtbl_layout; 
typedef void (*IOStorageCompletionAction)(void *, void *, IOReturn, UInt64);
typedef void (*IOUSBHostCompletionAction)(void *, void *, IOReturn, uint32_t);
struct IOUSBLowLatencyIsocStruct {UInt32 fPipe;UInt32 fBufSize;UInt64 fStartFrame;UInt32 fNumFrames;UInt32 fUpdateFrequency;UInt32 fDataBufferCookie;UInt32 fDataBufferOffset;UInt32 fFrameListBufferCookie;UInt32 fFrameListBufferOffset;};
struct IOVideoDeviceNotification {UInt32 mObjectID;UInt32 mNotificationID;UInt32 mNotificationArgument1;UInt32 mNotificationArgument2;UInt64 mNotificationArgument3;UInt64 mNotificationArgument4;};
struct IOWorkLoop__ExpansionData {IOOptionBits options;IOEventSource *passiveEventChain;void *iokitstatsReserved;uint64_t lockInterval;uint64_t lockTime;};
struct memory_object_behave_info {memory_object_copy_strategy_t copy_strategy;boolean_t temporary;boolean_t invalidate;boolean_t silent_overwrite;boolean_t advisory_pageout;};
struct __attribute__((packed)) stackshot_thread_waitinfo {uint64_t owner;uint64_t waiter;uint64_t context;uint8_t wait_type;};
struct BluetoothHCILEBufferSize {uint16_t ACLDataPacketLength;uint8_t totalNumACLDataPackets;};
struct IOATAIOReg32_vtbl_layout; 
struct IOService__ExpansionData {uint64_t authorizationID;IOLock *interruptStatisticsLock;IOInterruptAccountingReporter *interruptStatisticsArray;int interruptStatisticsArrayCount;};
struct IOStorageProvisionExtent {UInt64 byteStart;UInt64 byteCount;UInt8 provisionType;UInt8 reserved[7];};
struct IOStreamBufferQueueEntry {IOStreamBufferID bufferID;UInt32 dataOffset;UInt32 dataLength;UInt32 controlOffset;UInt32 controlLength;UInt32 reserved[3];};
struct IOUSBFindEndpointRequest {UInt8 type;UInt8 direction;UInt16 maxPacketSize;UInt8 interval;};
struct OSOrderedSet_vtbl_layout; 
struct VDPrivateSelectorDataRec {LogicalAddress privateParameters;ByteCount privateParametersSize;LogicalAddress privateResults;ByteCount privateResultsSize;};
struct host_preferred_user_arch {cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;};
struct proc_regioninfo_internal {uint32_t pri_protection;uint32_t pri_max_protection;uint32_t pri_inheritance;uint32_t pri_flags;uint64_t pri_offset;uint32_t pri_behavior;uint32_t pri_user_wired_count;uint32_t pri_user_tag;uint32_t pri_pages_resident;uint32_t pri_pages_shared_now_private;uint32_t pri_pages_swapped_out;uint32_t pri_pages_dirtied;uint32_t pri_ref_count;uint32_t pri_shadow_depth;uint32_t pri_share_mode;uint32_t pri_private_pages_resident;uint32_t pri_shared_pages_resident;uint32_t pri_obj_id;uint32_t pri_depth;uint64_t pri_address;uint64_t pri_size;};
struct proc_threadinfo_internal {uint64_t pth_user_time;uint64_t pth_system_time;int32_t pth_cpu_usage;int32_t pth_policy;int32_t pth_run_state;int32_t pth_flags;int32_t pth_sleep_time;int32_t pth_curpri;int32_t pth_priority;int32_t pth_maxpriority;char pth_name[64];};
struct IOATAIOReg8_vtbl_layout; 
struct __attribute__((packed)) IOHistogramReportValues {uint64_t bucket_hits;int64_t bucket_min;int64_t bucket_max;int64_t bucket_sum;};
struct IONDRVControlParameters {UInt8 __reservedA[26];UInt16 code;void *params;UInt8 __reservedB[18];};
struct IOUSBEndpointDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt8 bEndpointAddress;UInt8 bmAttributes;UInt16 wMaxPacketSize;UInt8 bInterval;};
struct IOUSBEndpointProperties {UInt8 bVersion;UInt8 bAlternateSetting;UInt8 bDirection;UInt8 bEndpointNumber;UInt8 bTransferType;UInt8 bUsageType;UInt8 bSyncType;UInt8 bInterval;UInt16 wMaxPacketSize;UInt8 bMaxBurst;UInt8 bMaxStreams;UInt8 bMult;UInt16 wBytesPerInterval;};
struct VDDrawHardwareCursorRec {SInt32 csCursorX;SInt32 csCursorY;UInt32 csCursorVisible;UInt32 csReserved1;UInt32 csReserved2;};
struct dk_dvd_read_disc_info_t {uint8_t reserved0000[10];uint16_t bufferLength;void *buffer;};
struct kpc_get_counters_remote {uint32_t classes;uint32_t nb_counters;uint32_t buf_stride;uint64_t *buf;};
struct stack_snapshot_stacktop {uint64_t sp;uint8_t stack_contents[8];};
struct vnop_kqfilt_remove_args {vnodeop_desc *a_desc;vnode *a_vp;uintptr_t a_ident;vfs_context_t a_context;};
struct BluetoothHCIBufferSize {uint16_t ACLDataPacketLength;uint8_t SCODataPacketLength;uint16_t totalNumACLDataPackets;uint16_t totalNumSCODataPackets;};
struct BluetoothTransportInfo {uint32_t productID;uint32_t vendorID;uint32_t type;char productName[35];char vendorName[35];uint64_t totalDataBytesSent;uint64_t totalSCOBytesSent;uint64_t totalDataBytesReceived;uint64_t totalSCOBytesReceived;};
struct IOBlitCopyRegionStruct {IOBlitOperation operation;SInt32 deltaX;SInt32 deltaY;IOAccelDeviceRegion *region;};
struct IOFireWirePowerManager { OSObject cppsuper0;IOFireWirePowerManager__ExpansionData *reserved;IOFireWireController *fControl;UInt32 fMaximumDeciwatts;UInt32 fAllocatedDeciwatts;};
struct VDCommunicationInfoRec {SInt32 csBusID;UInt32 csBusType;SInt32 csMinBus;SInt32 csMaxBus;UInt32 csSupportedTypes;UInt32 csSupportedCommFlags;UInt32 csReserved2;UInt32 csReserved3;UInt32 csReserved4;UInt32 csReserved5;UInt32 csReserved6;UInt32 csReserved7;};
struct _stickyKeys_ToggleInfo {IOByteCount size;unsigned int toggleModifier;unsigned int repetitionsToToggle;AbsoluteTime expireInterval;unsigned int currentCount;AbsoluteTime deadlines[1];};
struct ccchacha20poly1305_fns { ccchacha20poly1305_info *(*info)(void);int (*init)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *,  uint8_t *);int (*reset)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *);int (*setnonce)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *,  uint8_t *);int (*incnonce)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, uint8_t *);int (*aad)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, size_t,  void *);int (*encrypt)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, size_t,  void *, void *);int (*finalize)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, uint8_t *);int (*decrypt)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, size_t,  void *, void *);int (*verify)( ccchacha20poly1305_info *, ccchacha20poly1305_ctx *,  uint8_t *);};
struct cpuid_arch_perf_leaf_t {uint8_t version;uint8_t number;uint8_t width;uint8_t events_number;uint32_t events;uint8_t fixed_number;uint8_t fixed_width;};
struct dk_bd_read_disc_info_t {uint8_t reserved0000[14];uint16_t bufferLength;void *buffer;};
struct dk_cd_read_disc_info_t {uint8_t reserved0000[10];uint16_t bufferLength;void *buffer;};
struct dk_format_capacities_t {dk_format_capacity_t *capacities;uint32_t capacitiesCount;uint8_t reserved0064[8];};
struct prebound_dylib_command {uint32_t cmd;uint32_t cmdsize;lc_str name;uint32_t nmodules;lc_str linked_modules;};
struct proc_taskinfo_internal {uint64_t pti_virtual_size;uint64_t pti_resident_size;uint64_t pti_total_user;uint64_t pti_total_system;uint64_t pti_threads_user;uint64_t pti_threads_system;int32_t pti_policy;int32_t pti_faults;int32_t pti_pageins;int32_t pti_cow_faults;int32_t pti_messages_sent;int32_t pti_messages_received;int32_t pti_syscalls_mach;int32_t pti_syscalls_unix;int32_t pti_csw;int32_t pti_threadnum;int32_t pti_numrunning;int32_t pti_priority;};
struct source_version_command {uint32_t cmd;uint32_t cmdsize;uint64_t version;};
struct __attribute__((packed)) task_delta_snapshot_v2 {uint64_t tds_unique_pid;uint64_t tds_ss_flags;uint64_t tds_user_time_in_terminated_threads;uint64_t tds_system_time_in_terminated_threads;uint64_t tds_task_size;uint64_t tds_max_resident_size;uint32_t tds_suspend_count;uint32_t tds_faults;uint32_t tds_pageins;uint32_t tds_cow_faults;uint32_t tds_was_throttled;uint32_t tds_did_throttle;uint32_t tds_latency_qos;};
struct user32_dyld_image_info {user32_addr_t imageLoadAddress;user32_addr_t imageFilePath;user32_ulong_t imageFileModDate;};
struct user64_dyld_image_info {user64_addr_t imageLoadAddress;user64_addr_t imageFilePath;user64_ulong_t imageFileModDate;};
struct FWSBP2ReconnectParams {IOFireWireSBP2Login *login;UInt32 generation;IOReturn status;void *reconnectStatusBlock;UInt32 reconnectStatusBlockLength;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrInlineData {u_int32_t recordType;u_int32_t reserved;u_int32_t logicalSize;u_int8_t userData[2];};
struct IOBlitOperationStruct {UInt32 color0;UInt32 color1;SInt32 offsetX;SInt32 offsetY;UInt32 sourceKeyColor;UInt32 destKeyColor;UInt32 specific[16];};
struct IOFWPHYPacketListener { OSObject cppsuper0;IOFireWireController *fControl;FWPHYPacketCallback fCallback;void *fRefCon;};
typedef void (*IOFireWirePCRCallback)(void *, UInt16, UInt32, UInt32, UInt32);
typedef void (*IOHIDCompletionAction)(void *, void *, IOReturn, UInt32);
typedef IOReturn (*IONetworkData__Action)(void *, void *, IONetworkData *, UInt32, void *, UInt32 *, UInt32);
typedef void (*IOUSBCompletionAction)(void *, void *, IOReturn, UInt32);
struct IOUSBDeviceDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt16 bcdUSB;UInt8 bDeviceClass;UInt8 bDeviceSubClass;UInt8 bDeviceProtocol;UInt8 bMaxPacketSize0;UInt16 idVendor;UInt16 idProduct;UInt16 bcdDevice;UInt8 iManufacturer;UInt8 iProduct;UInt8 iSerialNumber;UInt8 bNumConfigurations;};
struct OpaqueDTEntryIterator {RealDTEntry outerScope;RealDTEntry currentScope;RealDTEntry currentEntry;DTSavedScopePtr savedScope;unsigned int currentIndex;};
struct dk_provision_extent_t {uint64_t offset;uint64_t length;uint8_t provisionType;uint8_t reserved[7];};
struct dk_provision_status_t {uint64_t offset;uint64_t length;uint64_t options;uint32_t reserved;uint32_t extentsCount;dk_provision_extent_t *extents;};
struct policy_timeshare_info {integer_t max_priority;integer_t base_priority;integer_t cur_priority;boolean_t depressed;integer_t depress_priority;};
typedef void (*proto_unplumb_handler)(ifnet_t, protocol_family_t);
struct sub_framework_command {uint32_t cmd;uint32_t cmdsize;lc_str umbrella;};
struct user32_dyld_uuid_info {uint32_t imageLoadAddress;uuid_t imageUUID;};
struct user64_dyld_uuid_info {uint64_t imageLoadAddress;uuid_t imageUUID;};
struct vnop_removexattr_args {vnodeop_desc *a_desc;vnode_t a_vp; char *a_name;int a_options;vfs_context_t a_context;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrExtendedFileInfo {u_int32_t document_id;u_int32_t date_added;u_int16_t extended_flags;u_int16_t reserved2;u_int32_t write_gen_counter;};
struct __attribute__((packed)) IOSimpleReportValues {int64_t simple_value;uint64_t reserved1;uint64_t reserved2;uint64_t reserved3;};
struct MasterAudioFunctions {MasterVolumeUpdate incrementMasterVolume;MasterVolumeUpdate decrementMasterVolume;MasterMuteUpdate toggleMasterMute;};
struct VDPrivateSelectorRec {UInt32 reserved;VDPrivateSelectorDataRec data[1];};
struct _IOAudioEngineStatus {UInt32 fVersion;UInt32 fCurrentLoopCount;AbsoluteTime fLastLoopTime;UInt32 fEraseHeadSampleFrame;};
struct _IOAudioStreamFormat {UInt32 fNumChannels;UInt32 fSampleFormat;UInt32 fNumericRepresentation;UInt8 fBitDepth;UInt8 fBitWidth;UInt8 fAlignment;UInt8 fByteOrder;UInt8 fIsMixable;UInt32 fDriverTag;};
struct cpuid_thermal_leaf_t {boolean_t sensor;boolean_t dynamic_acceleration;boolean_t invariant_APIC_timer;boolean_t core_power_limits;boolean_t fine_grain_clock_mod;boolean_t package_thermal_intr;uint32_t thresholds;boolean_t ACNT_MCNT;boolean_t hardware_feedback;boolean_t energy_policy;};
struct dyld_uuid_info_64_v2 {uint64_t imageLoadAddress;uuid_t imageUUID;uint64_t imageSlidBaseAddress;};
struct __attribute__((packed)) exit_reason_snapshot {uint32_t ers_namespace;uint64_t ers_code;uint64_t ers_flags;};
struct i386_exception_state {__uint16_t trapno;__uint16_t cpu;__uint32_t err;__uint32_t faultvaddr;};
struct sub_umbrella_command {uint32_t cmd;uint32_t cmdsize;lc_str sub_umbrella;};
struct task_wait_state_info {uint64_t total_wait_state_time;uint64_t total_wait_sfi_state_time;uint32_t _reserved[4];};
struct thread_extended_info {uint64_t pth_user_time;uint64_t pth_system_time;int32_t pth_cpu_usage;int32_t pth_policy;int32_t pth_run_state;int32_t pth_flags;int32_t pth_sleep_time;int32_t pth_curpri;int32_t pth_priority;int32_t pth_maxpriority;char pth_name[64];};
struct FWSBP2LoginResponse {UInt16 length;UInt16 loginID;UInt32 commandBlockAgentAddressHi;UInt32 commandBlockAgentAddressLo;UInt16 reserved;UInt16 reconnectHold;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrExtendedDirInfo {u_int32_t document_id;u_int32_t date_added;u_int16_t extended_flags;u_int16_t reserved3;u_int32_t write_gen_counter;};
struct IOATADevConfig_vtbl; 
struct IOAccelDeviceRegion {UInt32 num_rects;IOAccelBounds bounds;};
struct IOUSB3HubDescriptor {UInt8 length;UInt8 hubType;UInt8 numPorts;__attribute__((packed)) UInt16 characteristics;UInt8 powerOnToGood;UInt8 hubCurrent;UInt8 hubHdrDecLat;__attribute__((packed)) UInt16 hubDelay;UInt8 removablePortFlags[9];UInt8 pwrCtlPortFlags[9];};
struct IOUSBGetFrameStruct {UInt64 frame;AbsoluteTime timeStamp;};
typedef void (*KXLDLoggingCallback)(KXLDLogSubsystem, KXLDLogLevel,  char *, va_list, void *);
struct OSKextGrabPgoStruct {char metadata;uint64_t *pSize;char *pBuffer;uint64_t bufferSize;int err;list_head list_head;};
struct entry_point_command {uint32_t cmd;uint32_t cmdsize;uint64_t entryoff;uint64_t stacksize;};
struct routines_command_64 {uint32_t cmd;uint32_t cmdsize;uint64_t init_address;uint64_t init_module;uint64_t reserved1;uint64_t reserved2;uint64_t reserved3;uint64_t reserved4;uint64_t reserved5;uint64_t reserved6;};
struct sadb_x_ipsecrequest {u_int16_t sadb_x_ipsecrequest_len;u_int16_t sadb_x_ipsecrequest_proto;u_int8_t sadb_x_ipsecrequest_mode;u_int8_t sadb_x_ipsecrequest_level;u_int16_t sadb_x_ipsecrequest_reqid;};
typedef errno_t (*sf_connect_out_func)(void *, socket_t,  sockaddr *);
struct sub_library_command {uint32_t cmd;uint32_t cmdsize;lc_str sub_library;};
struct __attribute__((packed)) trust_cache_module0 {uint32_t version;uuid_t uuid;uint32_t num_hashes;};
struct __attribute__((packed)) trust_cache_module1 {uint32_t version;uuid_t uuid;uint32_t num_entries;};
struct x86_exception_state {x86_state_hdr_t esh;x86_exception_state___251411A5B45F799EBE3F14281E77BAD6 ues;};
struct Block_descriptor_2 {BlockCopyFunction copy;BlockDisposeFunction dispose;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrExtents {u_int32_t recordType;u_int32_t reserved;HFSPlusExtentRecord extents;};
struct IOBlitCursorStruct {IOBlitOperation operation;IOBlitRectangle rect;};
struct IOCommandPool_vtbl; 
struct IOHIKeyboardMapper { OSObject cppsuper0;IOHIKeyboard *_delegate;char _mappingShouldBeFreed;NXParsedKeyMapping _parsedMapping;IOHIKeyboardMapper__ExpansionData *_reserved;};
struct IOPMCalendarStruct {UInt32 year;UInt8 month;UInt8 day;UInt8 hour;UInt8 minute;UInt8 second;UInt8 selector;};
struct IOPacketQueue_vtbl; 
struct IOPixelInformation {UInt32 bytesPerRow;UInt32 bytesPerPlane;UInt32 bitsPerPixel;UInt32 pixelType;UInt32 componentCount;UInt32 bitsPerComponent;UInt32 componentMasks[16];IOPixelEncoding pixelFormat;UInt32 flags;UInt32 activeWidth;UInt32 activeHeight;UInt32 reserved[2];};
struct IOUSBBOSDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt16 wTotalLength;UInt8 bNumDeviceCaps;};
struct IOUSBDFUDescriptor {UInt8 bLength;UInt8 bDescriptorType;UInt8 bmAttributes;UInt16 wDetachTimeout;UInt16 wTransferSize;};
struct IOUSBHIDDescriptor {UInt8 descLen;UInt8 descType;UInt16 descVersNum;UInt8 hidCountryCode;UInt8 hidNumDescriptors;UInt8 hidDescriptorType;UInt8 hidDescriptorLengthLo;UInt8 hidDescriptorLengthHi;};
struct IOUSBHubDescriptor {UInt8 length;UInt8 hubType;UInt8 numPorts;__attribute__((packed)) UInt16 characteristics;UInt8 powerOnToGood;UInt8 hubCurrent;UInt8 removablePortFlags[9];UInt8 pwrCtlPortFlags[9];};
struct VDConfigurationRec {UInt32 csConfigFeature;UInt32 csConfigSupport;uintptr_t csConfigValue;uintptr_t csReserved1;uintptr_t csReserved2;};
struct _IODataQueueMemory {UInt32 queueSize;UInt32 head;UInt32 tail;IODataQueueEntry queue[1];};
struct data_in_code_entry {uint32_t offset;uint16_t length;uint16_t kind;};
struct fbootstraptransfer {off_t fbt_offset;size_t fbt_length;void *fbt_buffer;};
typedef uint64_t (*gpu_set_fceiling_t)(uint32_t, uint64_t);
struct kpc_running_remote {uint32_t classes;uint64_t cfg_target_mask;uint64_t cfg_state_mask;};
struct mach_msg_trailer_t {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;};
struct __attribute__((packed)) macos_panic_header {uint32_t mph_magic;uint32_t mph_crc;uint32_t mph_version;uint32_t mph_padding;uint64_t mph_panic_flags;uint32_t mph_panic_log_offset;uint32_t mph_panic_log_len;uint32_t mph_stackshot_offset;uint32_t mph_stackshot_len;uint32_t mph_other_log_offset;uint32_t mph_other_log_len;};
typedef errno_t (*sf_connect_in_func)(void *, socket_t,  sockaddr *);
struct sub_client_command {uint32_t cmd;uint32_t cmdsize;lc_str client;};
struct vm_page_info_basic {int disposition;int ref_count;vm_object_id_t object_id;memory_object_offset_t offset;int depth;int __pad;};
struct vnop_copyfile_args {vnodeop_desc *a_desc;vnode_t a_fvp;vnode_t a_tdvp;vnode_t a_tvp;componentname *a_tcnp;int a_mode;int a_flags;vfs_context_t a_context;};
struct vnop_exchange_args {vnodeop_desc *a_desc;vnode_t a_fvp;vnode_t a_tvp;int a_options;vfs_context_t a_context;};
struct vnop_inactive_args {vnodeop_desc *a_desc;vnode_t a_vp;vfs_context_t a_context;};
struct vnop_readlink_args {vnodeop_desc *a_desc;vnode_t a_vp;uio *a_uio;vfs_context_t a_context;};
struct vnop_whiteout_args {vnodeop_desc *a_desc;vnode_t a_dvp;componentname *a_cnp;int a_flags;vfs_context_t a_context;};
struct DriverServiceInfo {OSType serviceCategory;OSType serviceType;NumVersion serviceVersion;};
struct HIDCollectionNode {HIDUsage collectionUsage;HIDUsage collectionUsagePage;UInt32 parent;UInt32 numberOfChildren;UInt32 nextSibling;UInt32 firstChild;};
struct IOATAIOReg32_vtbl; 
struct IOFBHDRMetaDataV1 {uint16_t displayPrimary_X0;uint16_t displayPrimary_Y0;uint16_t displayPrimary_X1;uint16_t displayPrimary_Y1;uint16_t displayPrimary_X2;uint16_t displayPrimary_Y2;uint16_t displayPrimary_X;uint16_t displayPrimary_Y;uint16_t desiredLuminance_Max;uint16_t desiredLuminance_Min;uint16_t desiredLightLevel_Avg;uint16_t desiredLightLevel_Max;uint64_t __reservedA[5];};
struct IOInterruptVector {char interruptActive;char interruptDisabledSoft;char interruptDisabledHard;char interruptRegistered;IOLock *interruptLock;IOService *nub;int source;void *target;IOInterruptHandler handler;void *refCon;IOSharedInterruptController *sharedController;};
struct IOStateReportInfo {uint16_t curr_state;uint64_t update_ts;};
struct OSOrderedSet_vtbl; 
struct VDGetGammaListRec {GammaTableID csPreviousGammaTableID;GammaTableID csGammaTableID;UInt32 csGammaTableSize;char *csGammaTableName;};
struct _IOAudioSMPTETime {SInt16 fSubframes;SInt16 fSubframeDivisor;UInt32 fCounter;UInt32 fType;UInt32 fFlags;SInt16 fHours;SInt16 fMinutes;SInt16 fSeconds;SInt16 fFrames;};
struct _IODataQueueEntry {UInt32 size;UInt8 data[4];};
struct _NXEventExtension {UInt32 flags;audit_token_t audit;};
struct dk_cd_read_isrc_t {CDISRC isrc;uint8_t track;uint8_t reserved0112[2];};
struct dk_dvd_send_key_t {uint8_t format;uint8_t keyClass;uint8_t reserved0016[6];uint8_t grantID;uint8_t reserved0072[1];uint16_t bufferLength;void *buffer;};
struct dyld_uuid_info_32 {uint32_t imageLoadAddress;uuid_t imageUUID;};
struct dyld_uuid_info_64 {uint64_t imageLoadAddress;uuid_t imageUUID;};
typedef errno_t (*ifnet_check_multi)(ifnet_t,  sockaddr *);
struct kev_dl_proto_data {net_event_data link_data;u_int32_t proto_family;u_int32_t proto_remaining_count;};
struct ledger_entry_info {int64_t lei_balance;int64_t lei_credit;int64_t lei_debit;uint64_t lei_limit;uint64_t lei_refill_period;uint64_t lei_last_refill;};
struct __attribute__((packed)) nd_opt_route_info {u_int8_t nd_opt_rti_type;u_int8_t nd_opt_rti_len;u_int8_t nd_opt_rti_prefixlen;u_int8_t nd_opt_rti_flags;u_int32_t nd_opt_rti_lifetime;};
typedef void (*proto_media_event)(ifnet_t, protocol_family_t,  kev_msg *);
struct ucred__posix_cred {uid_t cr_uid;uid_t cr_ruid;uid_t cr_svuid;short cr_ngroups;gid_t cr_groups[16];gid_t cr_rgid;gid_t cr_svgid;uid_t cr_gmuid;int cr_flags;};
struct user32_fcodeblobs {user32_addr_t f_cd_hash;user32_size_t f_hash_size;user32_addr_t f_cd_buffer;user32_size_t f_cd_size;user32_addr_t f_out_size;int f_arch;};
struct user64_fcodeblobs {user64_addr_t f_cd_hash;user64_size_t f_hash_size;user64_addr_t f_cd_buffer;user64_size_t f_cd_size;user64_addr_t f_out_size;int f_arch;int __padding;};
struct vnop_getattr_args {vnodeop_desc *a_desc;vnode_t a_vp;vnode_attr *a_vap;vfs_context_t a_context;};
struct vnop_readdir_args {vnodeop_desc *a_desc;vnode_t a_vp;uio *a_uio;int a_flags;int *a_eofflag;int *a_numdirent;vfs_context_t a_context;};
struct vnop_reclaim_args {vnodeop_desc *a_desc;vnode_t a_vp;vfs_context_t a_context;};
struct vnop_setattr_args {vnodeop_desc *a_desc;vnode_t a_vp;vnode_attr *a_vap;vfs_context_t a_context;};
struct vnop_symlink_args {vnodeop_desc *a_desc;vnode_t a_dvp;vnode_t *a_vpp;componentname *a_cnp;vnode_attr *a_vap;char *a_target;vfs_context_t a_context;};
struct DCLCommandStruct {DCLCommandStruct *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;UInt32 operands[1];};
struct DVDCopyrightInfo {UInt8 dataLength[2];UInt8 reserved[2];UInt8 copyrightProtectionSystemType;DVDCPRMRegionCode regionMask;UInt8 reserved2[2];};
struct IOATAIOReg8_vtbl; 
struct IODMAMapPageList {uint32_t pageOffset;uint32_t pageListCount; upl_page_info_t *pageList;};
struct IOFBDPLinkConfig {uint16_t version;uint8_t bitRate;uint8_t __reservedA[1];uint16_t t1Time;uint16_t t2Time;uint16_t t3Time;uint8_t idlePatterns;uint8_t laneCount;uint8_t voltage;uint8_t preEmphasis;uint8_t downspread;uint8_t scrambler;uint8_t maxBitRate;uint8_t maxLaneCount;uint8_t maxDownspread;uint8_t __reservedB[9];};
struct IOFireWireNubAux { OSObject cppsuper0;IOFireWireNub *fPrimary;TerminationState fTerminationState;IOFireWireNubAux__ExpansionData *reserved;};
typedef errno_t (*ctl_connect_func)(kern_ctl_ref, sockaddr_ctl *, void **);
struct dk_bd_send_key_t {uint8_t format;uint8_t keyClass;uint8_t reserved0016[6];uint8_t grantID;uint8_t reserved0072[5];uint16_t bufferLength;void *buffer;};
struct dk_cd_read_mcn_t {CDMCN mcn;uint8_t reserved0112[2];};
struct dylinker_command {uint32_t cmd;uint32_t cmdsize;lc_str name;};
typedef errno_t (*ifnet_ioctl_func)(ifnet_t, unsigned int, void *);
struct in6_addrlifetime {time_t ia6t_expire;time_t ia6t_preferred;u_int32_t ia6t_vltime;u_int32_t ia6t_pltime;};
struct kev_in_portinuse {u_int16_t port;u_int32_t req_pid;u_int32_t reserved[2];};
struct mach_memory_info {uint64_t flags;uint64_t site;uint64_t size;uint64_t free;uint64_t largest;uint64_t collectable_bytes;uint64_t mapped;uint64_t peak;uint16_t tag;uint16_t zone;uint16_t _resvA[2];uint64_t _resv[3];char name[80];};
struct policy_fifo_info {integer_t max_priority;integer_t base_priority;boolean_t depressed;integer_t depress_priority;};
struct sadb_x_kmprivate {u_int16_t sadb_x_kmprivate_len;u_int16_t sadb_x_kmprivate_exttype;u_int32_t sadb_x_kmprivate_reserved;};
struct vnop_access_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_action;vfs_context_t a_context;};
struct vnop_create_args {vnodeop_desc *a_desc;vnode_t a_dvp;vnode_t *a_vpp;componentname *a_cnp;vnode_attr *a_vap;vfs_context_t a_context;};
struct vnop_lookup_args {vnodeop_desc *a_desc;vnode_t a_dvp;vnode_t *a_vpp;componentname *a_cnp;vfs_context_t a_context;};
struct vnop_mnomap_args {vnodeop_desc *a_desc;vnode_t a_vp;vfs_context_t a_context;};
struct vnop_remove_args {vnodeop_desc *a_desc;vnode_t a_dvp;vnode_t a_vp;componentname *a_cnp;int a_flags;vfs_context_t a_context;};
struct vnop_rename_args {vnodeop_desc *a_desc;vnode_t a_fdvp;vnode_t a_fvp;componentname *a_fcnp;vnode_t a_tdvp;vnode_t a_tvp;componentname *a_tcnp;vfs_context_t a_context;};
struct vnop_revoke_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_flags;vfs_context_t a_context;};
struct vnop_select_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_which;int a_fflags;void *a_wql;vfs_context_t a_context;};
struct x86_avx512_state {x86_state_hdr_t ash;x86_avx512_state___66330E93180B8BDA73FDCEC8E5D967A8 ufs;};
struct x86_thread_state {x86_state_hdr_t tsh;x86_thread_state___D2D4D49B333AEF99596DF2F7E46595A4 uts;};
struct CDPMADescriptor {UInt8 reserved;unsigned char control : 4;unsigned char adr : 4;UInt8 tno;UInt8 point;CDMSF address;UInt8 zero;CDMSF p;};
struct CDTOCDescriptor {UInt8 session;unsigned char control : 4;unsigned char adr : 4;UInt8 tno;UInt8 point;CDMSF address;UInt8 zero;CDMSF p;};
struct DriverOSService {ServiceCount nServices;DriverServiceInfo service[1];};
struct FWAddressStruct {UInt16 nodeID;UInt16 addressHi;UInt32 addressLo;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrData {u_int32_t recordType;u_int32_t reserved[2];u_int32_t attrSize;u_int8_t attrData[2];};
struct IOConditionLock { OSObject cppsuper0;IOLock *cond_interlock;int condition;IOLock *sleep_interlock;unsigned char interruptible;char want_lock;char waiting;};
struct IOPhysicalRange {IOPhysicalAddress address;IOByteCount length;};
struct IOUSBIsocStruct {UInt32 fPipe;void *fBuffer;UInt32 fBufSize;UInt64 fStartFrame;UInt32 fNumFrames;IOUSBIsocFrame *fFrameCounts;};
struct VDPowerStateRec {UInt32 powerState;UInt32 powerFlags;uintptr_t powerReserved1;uintptr_t powerReserved2;};
struct au_expire_after {time_t age;size_t size;unsigned char op_type;};
struct dylib_module_64 {uint32_t module_name;uint32_t iextdefsym;uint32_t nextdefsym;uint32_t irefsym;uint32_t nrefsym;uint32_t ilocalsym;uint32_t nlocalsym;uint32_t iextrel;uint32_t nextrel;uint32_t iinit_iterm;uint32_t ninit_nterm;uint32_t objc_module_info_size;uint64_t objc_module_info_addr;};
struct fvmfile_command {uint32_t cmd;uint32_t cmdsize;lc_str name;uint32_t header_addr;};
struct icmp__ih_rtradv {u_char irt_num_addrs;u_char irt_wpa;u_int16_t irt_lifetime;};
struct ndrv_demux_desc {u_int16_t type;u_int16_t length;ndrv_demux_desc___5E87C9BB192401A2CD612B3326A5C171 data;};
struct __attribute__((aligned(8))) sadb_session_id {u_int16_t sadb_session_id_len;u_int16_t sadb_session_id_exttype;u_int64_t sadb_session_id_v[2];};
struct segment_command {uint32_t cmd;uint32_t cmdsize;char segname[16];uint32_t vmaddr;uint32_t vmsize;uint32_t fileoff;uint32_t filesize;vm_prot_t maxprot;vm_prot_t initprot;uint32_t nsects;uint32_t flags;};
struct task_qos_policy {task_latency_qos_t task_latency_qos_tier;task_throughput_qos_t task_throughput_qos_tier;};
struct user32_timespec {user32_time_t tv_sec;user32_long_t tv_nsec;};
struct user64_timespec {user64_time_t tv_sec;user64_long_t tv_nsec;};
struct user_fcodeblobs {user_addr_t f_cd_hash;user_size_t f_hash_size;user_addr_t f_cd_buffer;user_size_t f_cd_size;user_addr_t f_out_size;int f_arch;};
struct __attribute__((aligned(8))) vm_statistics64 {natural_t free_count;natural_t active_count;natural_t inactive_count;natural_t wire_count;uint64_t zero_fill_count;uint64_t reactivations;uint64_t pageins;uint64_t pageouts;uint64_t faults;uint64_t cow_faults;uint64_t lookups;uint64_t hits;uint64_t purges;natural_t purgeable_count;natural_t speculative_count;uint64_t decompressions;uint64_t compressions;uint64_t swapins;uint64_t swapouts;natural_t compressor_page_count;natural_t throttled_count;natural_t external_page_count;natural_t internal_page_count;uint64_t total_uncompressed_pages_in_compressor;};
struct vnop_close_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_fflag;vfs_context_t a_context;};
struct vnop_fsync_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_waitfor;vfs_context_t a_context;};
struct vnop_mkdir_args {vnodeop_desc *a_desc;vnode_t a_dvp;vnode_t *a_vpp;componentname *a_cnp;vnode_attr *a_vap;vfs_context_t a_context;};
struct vnop_mknod_args {vnodeop_desc *a_desc;vnode_t a_dvp;vnode_t *a_vpp;componentname *a_cnp;vnode_attr *a_vap;vfs_context_t a_context;};
struct vnop_rmdir_args {vnodeop_desc *a_desc;vnode_t a_dvp;vnode_t a_vp;componentname *a_cnp;vfs_context_t a_context;};
struct vnop_write_args {vnodeop_desc *a_desc;vnode_t a_vp;uio *a_uio;int a_ioflag;vfs_context_t a_context;};
struct x86_debug_state {x86_state_hdr_t dsh;x86_debug_state___DE64C214EB37D0506E9F0452E3D9193B uds;};
struct x86_float_state {x86_state_hdr_t fsh;x86_float_state___598376F8C40D36F3E63ABC99E645E7DC ufs;};
struct DebugKeyAction {uint32_t mask;DebugKeyActionProc action;void *parameter;};
struct EfiMemoryRange {uint32_t Type;uint32_t Pad;uint64_t PhysicalStart;uint64_t VirtualStart;uint64_t NumberOfPages;uint64_t Attribute;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrKey {u_int16_t keyLength;u_int16_t pad;u_int32_t fileID;u_int32_t startBlock;u_int16_t attrNameLen;u_int16_t attrName[127];};
struct IOI2CBusTiming {AbsoluteTime bitTimeout;AbsoluteTime byteTimeout;AbsoluteTime acknowledgeTimeout;AbsoluteTime startTimeout;AbsoluteTime holdTime;AbsoluteTime riseFallTime;UInt32 __reservedA[8];};
struct IOUSBIsocFrame {IOReturn frStatus;UInt16 frReqCount;UInt16 frActCount;};
struct IOUSBMouseData {UInt16 buttons;SInt16 XDelta;SInt16 YDelta;};
struct au_evclass_map {au_event_t ec_number;au_class_t ec_class;};
typedef void (*iff_event_func)(void *, ifnet_t, protocol_family_t,  kev_msg *);
struct policy_rr_info {integer_t max_priority;integer_t base_priority;integer_t quantum;boolean_t depressed;integer_t depress_priority;};
struct rusage_info_v0 {uint8_t ri_uuid[16];uint64_t ri_user_time;uint64_t ri_system_time;uint64_t ri_pkg_idle_wkups;uint64_t ri_interrupt_wkups;uint64_t ri_pageins;uint64_t ri_wired_size;uint64_t ri_resident_size;uint64_t ri_phys_footprint;uint64_t ri_proc_start_abstime;uint64_t ri_proc_exit_abstime;};
struct rusage_info_v1 {uint8_t ri_uuid[16];uint64_t ri_user_time;uint64_t ri_system_time;uint64_t ri_pkg_idle_wkups;uint64_t ri_interrupt_wkups;uint64_t ri_pageins;uint64_t ri_wired_size;uint64_t ri_resident_size;uint64_t ri_phys_footprint;uint64_t ri_proc_start_abstime;uint64_t ri_proc_exit_abstime;uint64_t ri_child_user_time;uint64_t ri_child_system_time;uint64_t ri_child_pkg_idle_wkups;uint64_t ri_child_interrupt_wkups;uint64_t ri_child_pageins;uint64_t ri_child_elapsed_abstime;};
struct rusage_info_v2 {uint8_t ri_uuid[16];uint64_t ri_user_time;uint64_t ri_system_time;uint64_t ri_pkg_idle_wkups;uint64_t ri_interrupt_wkups;uint64_t ri_pageins;uint64_t ri_wired_size;uint64_t ri_resident_size;uint64_t ri_phys_footprint;uint64_t ri_proc_start_abstime;uint64_t ri_proc_exit_abstime;uint64_t ri_child_user_time;uint64_t ri_child_system_time;uint64_t ri_child_pkg_idle_wkups;uint64_t ri_child_interrupt_wkups;uint64_t ri_child_pageins;uint64_t ri_child_elapsed_abstime;uint64_t ri_diskio_bytesread;uint64_t ri_diskio_byteswritten;};
struct rusage_info_v3 {uint8_t ri_uuid[16];uint64_t ri_user_time;uint64_t ri_system_time;uint64_t ri_pkg_idle_wkups;uint64_t ri_interrupt_wkups;uint64_t ri_pageins;uint64_t ri_wired_size;uint64_t ri_resident_size;uint64_t ri_phys_footprint;uint64_t ri_proc_start_abstime;uint64_t ri_proc_exit_abstime;uint64_t ri_child_user_time;uint64_t ri_child_system_time;uint64_t ri_child_pkg_idle_wkups;uint64_t ri_child_interrupt_wkups;uint64_t ri_child_pageins;uint64_t ri_child_elapsed_abstime;uint64_t ri_diskio_bytesread;uint64_t ri_diskio_byteswritten;uint64_t ri_cpu_time_qos_default;uint64_t ri_cpu_time_qos_maintenance;uint64_t ri_cpu_time_qos_background;uint64_t ri_cpu_time_qos_utility;uint64_t ri_cpu_time_qos_legacy;uint64_t ri_cpu_time_qos_user_initiated;uint64_t ri_cpu_time_qos_user_interactive;uint64_t ri_billed_system_time;uint64_t ri_serviced_system_time;};
struct rusage_info_v4 {uint8_t ri_uuid[16];uint64_t ri_user_time;uint64_t ri_system_time;uint64_t ri_pkg_idle_wkups;uint64_t ri_interrupt_wkups;uint64_t ri_pageins;uint64_t ri_wired_size;uint64_t ri_resident_size;uint64_t ri_phys_footprint;uint64_t ri_proc_start_abstime;uint64_t ri_proc_exit_abstime;uint64_t ri_child_user_time;uint64_t ri_child_system_time;uint64_t ri_child_pkg_idle_wkups;uint64_t ri_child_interrupt_wkups;uint64_t ri_child_pageins;uint64_t ri_child_elapsed_abstime;uint64_t ri_diskio_bytesread;uint64_t ri_diskio_byteswritten;uint64_t ri_cpu_time_qos_default;uint64_t ri_cpu_time_qos_maintenance;uint64_t ri_cpu_time_qos_background;uint64_t ri_cpu_time_qos_utility;uint64_t ri_cpu_time_qos_legacy;uint64_t ri_cpu_time_qos_user_initiated;uint64_t ri_cpu_time_qos_user_interactive;uint64_t ri_billed_system_time;uint64_t ri_serviced_system_time;uint64_t ri_logical_writes;uint64_t ri_lifetime_max_phys_footprint;uint64_t ri_instructions;uint64_t ri_cycles;uint64_t ri_billed_energy;uint64_t ri_serviced_energy;uint64_t ri_interval_max_phys_footprint;uint64_t ri_unused[1];};
struct sadb_supported {u_int16_t sadb_supported_len;u_int16_t sadb_supported_exttype;u_int32_t sadb_supported_reserved;};
typedef errno_t (*sf_accept_func)(void *, socket_t, socket_t,  sockaddr *,  sockaddr *);
typedef errno_t (*sf_attach_func)(void **, socket_t);
typedef errno_t (*sf_listen_func)(void *, socket_t);
typedef void (*sf_notify_func)(void *, socket_t, sflt_event_t, void *);
struct user32_timeval {user32_time_t tv_sec;__int32_t tv_usec;};
struct user64_timeval {user64_time_t tv_sec;__int32_t tv_usec;};
struct vnop_link_args {vnodeop_desc *a_desc;vnode_t a_vp;vnode_t a_tdvp;componentname *a_cnp;vfs_context_t a_context;};
struct vnop_mmap_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_fflags;vfs_context_t a_context;};
struct vnop_open_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_mode;vfs_context_t a_context;};
struct vnop_read_args {vnodeop_desc *a_desc;vnode_t a_vp;uio *a_uio;int a_ioflag;vfs_context_t a_context;};
struct Block_byref_2 {BlockByrefKeepFunction byref_keep;BlockByrefDestroyFunction byref_destroy;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogKey {u_int8_t keyLength;u_int8_t reserved;u_int32_t parentID;u_int8_t nodeName[32];};
union IOACPIAddress {UInt64 addr64;IOACPIAddress___D23480D2C05655CBB8386002CEAD6464 pci;};
struct IOEventSource { OSObject cppsuper0;IOEventSource *eventChainNext;OSObject *owner;IOEventSource__Action action;char enabled;IOWorkLoop *workLoop;void *refcon;IOEventSource__ExpansionData *reserved;};
struct IOExtendedLBA { OSObject cppsuper0;IOExtendedLBA__ExpansionData *reserved;IOATACommand *owner;UInt16 lbaLow;UInt16 lbaMid;UInt16 lbaHigh;UInt16 sectorCount;UInt16 features;UInt16 device;UInt16 command;};
struct IOOutputQueue { OSObject cppsuper0;thread_call_t _callEntry;IOOutputQueue__ExpansionData *_reserved;};
struct IOPCIATA__PRD {UInt32 bufferPtr;UInt16 byteCount;UInt16 flags;};
struct IOPacketQueue { OSObject cppsuper0;IOMbufQueue *_queue;IOSimpleLock *_lock;IOPacketQueue__ExpansionData *_reserved;};
struct _AVCUnitPlugs {UInt32 numIsochInPlugs;UInt32 numIsochOutPlugs;UInt32 numExternalInPlugs;UInt32 numExternalOutPlugs;AVCUnitPlugRecord isochInPlugRecord[31];AVCUnitPlugRecord isochOutPlugRecord[31];AVCUnitPlugRecord externalInPlugRecord[31];AVCUnitPlugRecord externalOutPlugRecord[31];};
struct _NXEQElStruct {int next;OSSpinLock sema;NXEvent event;};
struct attrreference {int32_t attr_dataoffset;u_int32_t attr_length;};
struct dk_set_tier_t {dk_extent_t *extents;uint32_t extentsCount;uint8_t tier;uint8_t reserved0072[7];};
struct mb_class_stat {char mbcl_cname[16];u_int32_t mbcl_size;u_int32_t mbcl_total;u_int32_t mbcl_active;u_int32_t mbcl_infree;u_int32_t mbcl_slab_cnt;u_int32_t mbcl_pad;u_int64_t mbcl_alloc_cnt;u_int64_t mbcl_free_cnt;u_int64_t mbcl_notified;u_int64_t mbcl_purge_cnt;u_int64_t mbcl_fail_cnt;u_int32_t mbcl_ctotal;u_int32_t mbcl_release_cnt;u_int32_t mbcl_mc_state;u_int32_t mbcl_mc_cached;u_int32_t mbcl_mc_waiter_cnt;u_int32_t mbcl_mc_wretry_cnt;u_int32_t mbcl_mc_nwretry_cnt;u_int32_t mbcl_peak_reported;u_int32_t mbcl_reserved[7];};
struct __attribute__((packed)) ni_reply_fqdn {u_int32_t ni_fqdn_ttl;u_int8_t ni_fqdn_namelen;u_int8_t ni_fqdn_name[3];};
struct rpath_command {uint32_t cmd;uint32_t cmdsize;lc_str path;};
struct sadb_spirange {u_int16_t sadb_spirange_len;u_int16_t sadb_spirange_exttype;u_int32_t sadb_spirange_min;u_int32_t sadb_spirange_max;u_int32_t sadb_spirange_reserved;};
typedef errno_t (*sf_ioctl_func)(void *, socket_t, unsigned int,  char *);
struct user32_rusage {user32_timeval ru_utime;user32_timeval ru_stime;user32_long_t ru_maxrss;user32_long_t ru_ixrss;user32_long_t ru_idrss;user32_long_t ru_isrss;user32_long_t ru_minflt;user32_long_t ru_majflt;user32_long_t ru_nswap;user32_long_t ru_inblock;user32_long_t ru_oublock;user32_long_t ru_msgsnd;user32_long_t ru_msgrcv;user32_long_t ru_nsignals;user32_long_t ru_nvcsw;user32_long_t ru_nivcsw;};
struct user64_rusage {user64_timeval ru_utime;user64_timeval ru_stime;user64_long_t ru_maxrss;user64_long_t ru_ixrss;user64_long_t ru_idrss;user64_long_t ru_isrss;user64_long_t ru_minflt;user64_long_t ru_majflt;user64_long_t ru_nswap;user64_long_t ru_inblock;user64_long_t ru_oublock;user64_long_t ru_msgsnd;user64_long_t ru_msgrcv;user64_long_t ru_nsignals;user64_long_t ru_nvcsw;user64_long_t ru_nivcsw;};
struct user_timespec {user_time_t tv_sec;user_long_t tv_nsec;};
struct x86_avx_state {x86_state_hdr_t ash;x86_avx_state___64432BC7CE1ECF60B467DA9EA06DC89E ufs;};
struct zone_btrecord {uint32_t ref_count;uint32_t operation_type;uint64_t bt[15];};
struct Block_layout {void *isa;int32_t flags;int32_t reserved;BlockInvokeFunction invoke;Block_descriptor_1 *descriptor;};
struct IOColorEntry {UInt16 index;IOColorComponent red;IOColorComponent green;IOColorComponent blue;};
struct IOFWNodeScan {IOFireWireController *fControl;FWAddress fAddr;UInt32 fBuf[5];UInt32 *fSelfIDs;int fNumSelfIDs;int fROMSize;int fRead;IOFWReadQuadCommand *fCmd;IOFWCompareAndSwapCommand *fLockCmd;UInt32 generation;UInt32 fIRMBitBucketOld;UInt32 fIRMBitBucketNew;char fIRMisBad;char speedChecking;char fContenderNeedsChecking;char fIRMCheckingRead;char fIRMCheckingLock;int fRetriesBumped;char fMustNotBeRoot;};
union IOUSBHIDData {IOUSBKeyboardData kbd;IOUSBMouseData mouse;};
struct KeyValueMask {Key key;uint32_t mask;};
struct OSSerializer { OSObject cppsuper0;void *target;void *ref;OSSerializerCallback callback;};
struct VDGrayRecord {Boolean csMode;SInt8 filler;};
struct __SC_Scatter {uint32_t count;uint32_t base;uint64_t targetOffset;uint64_t spare;};
struct _img4_crypto { char *i4c_name;img4_crypto_selector_t i4c_select;uint32_t i4c_hash_len;uint32_t i4c_truncated_hash_len; void *__opaque;};
struct ether_header {u_char ether_dhost[6];u_char ether_shost[6];u_short ether_type;};
struct in_addr_4in6 {u_int32_t ia46_pad32[3];in_addr ia46_addr4;};
struct ip_timestamp {u_char ipt_code;u_char ipt_len;u_char ipt_ptr;unsigned int ipt_flg : 4;unsigned int ipt_oflw : 4;ip_timestamp__ipt_timestamp ipt_timestamp;};
struct netfs_status {u_int32_t ns_status;char ns_mountopts[512];uint32_t ns_waittime;uint32_t ns_threadcount;};
struct note_command {uint32_t cmd;uint32_t cmdsize;char data_owner[16];uint64_t offset;uint64_t size;};
struct sadb_address {u_int16_t sadb_address_len;u_int16_t sadb_address_exttype;u_int8_t sadb_address_proto;u_int8_t sadb_address_prefixlen;u_int16_t sadb_address_reserved;};
typedef errno_t (*sf_bind_func)(void *, socket_t,  sockaddr *);
struct user_timeval {user_time_t tv_sec;__int32_t tv_usec;};
struct uuid_command {uint32_t cmd;uint32_t cmdsize;uint8_t uuid[16];};
struct Block_byref {void *isa;Block_byref *forwarding;int32_t flags;uint32_t size;};
struct DVDDiscInfo {UInt16 dataLength;unsigned char discStatus : 2;unsigned char stateOfLastBorder : 2;unsigned char erasable : 1;unsigned char reserved : 3;UInt8 reserved2;UInt8 numberOfBordersLSB;UInt8 firstRZoneNumberInLastBorderLSB;UInt8 lastRZoneNumberInLastBorderLSB;unsigned char reserved3 : 5;unsigned char unrestrictedUse : 1;unsigned char discBarCodeValid : 1;unsigned char reserved4 : 1;UInt8 reserved5;UInt8 numberOfBordersMSB;UInt8 firstRZoneNumberInLastBorderMSB;UInt8 lastRZoneNumberInLastBorderMSB;UInt8 reserved6[4];UInt8 reserved7[4];UInt8 reserved8[4];UInt8 discBarCode[8];UInt8 reserved9;UInt8 numberOfOPCTableEntries;};
struct IODataQueue { OSObject cppsuper0;IODataQueueMemory *dataQueue;void *notifyMsg;};
struct OSSerialize { OSObject cppsuper0;char *data;unsigned int length;unsigned int capacity;unsigned int capacityIncrement;OSArray *tags;char binary;char endCollection;OSSerialize__Editor editor;void *editRef;};
struct VDMirrorRec {UInt32 csMirrorSize;UInt32 csMirrorVersion;RegEntryID csMirrorRequestID;RegEntryID csMirrorResultID;UInt32 csMirrorFeatures;UInt32 csMirrorSupportedFlags;UInt32 csMirrorFlags;UInt32 csReserved1;UInt32 csReserved2;UInt32 csReserved3;UInt32 csReserved4;UInt32 csReserved5;};
struct VDScalerRec {UInt32 csScalerSize;UInt32 csScalerVersion;UInt32 csReserved1;UInt32 csReserved2;DisplayModeID csDisplayModeID;UInt32 csDisplayModeSeed;UInt32 csDisplayModeState;UInt32 csReserved3;UInt32 csScalerFlags;UInt32 csHorizontalPixels;UInt32 csVerticalPixels;UInt32 csHorizontalInset;UInt32 csVerticalInset;UInt32 csReserved6;UInt32 csReserved7;UInt32 csReserved8;};
struct _NXEventExt {NXEvent payload;NXEventExtension extension;};
struct au_tid_addr {dev_t at_port;u_int32_t at_type;u_int32_t at_addr[4];};
struct bpf_dltlist {u_int32_t bfl_len;bpf_dltlist___B2A9ECBE22ED54CE1AF0CE51601F0A64 bfl_u;};
struct cckprng_ctx {PrngRef prng;uint64_t bytes_since_entropy;uint64_t bytes_generated;};
struct fsignatures {off_t fs_file_start;void *fs_blob_start;size_t fs_blob_size;};
struct igmp_report {u_char ir_type;u_char ir_rsv1;u_short ir_cksum;u_short ir_rsv2;u_short ir_numgrps;};
struct __attribute__((aligned(8))) igmpstat_v3 {uint32_t igps_version;uint32_t igps_len;uint64_t igps_rcv_total;uint64_t igps_rcv_tooshort;uint64_t igps_rcv_badttl;uint64_t igps_rcv_badsum;uint64_t igps_rcv_v1v2_queries;uint64_t igps_rcv_v3_queries;uint64_t igps_rcv_badqueries;uint64_t igps_rcv_gen_queries;uint64_t igps_rcv_group_queries;uint64_t igps_rcv_gsr_queries;uint64_t igps_drop_gsr_queries;uint64_t igps_rcv_reports;uint64_t igps_rcv_badreports;uint64_t igps_rcv_ourreports;uint64_t igps_rcv_nora;uint64_t igps_snd_reports;uint64_t __igps_pad[4];};
struct kcdata_item {uint32_t type;uint32_t size;uint64_t flags;};
struct __attribute__((aligned(8))) sadb_sastat {u_int16_t sadb_sastat_len;u_int16_t sadb_sastat_exttype;u_int32_t sadb_sastat_dir;u_int32_t sadb_sastat_reserved;u_int32_t sadb_sastat_list_len;};
struct __attribute__((packed)) searchstate {uint32_t ss_union_flags;uint32_t ss_union_layer;u_char ss_fsstate[548];};
struct sockaddr_dl {u_char sdl_len;u_char sdl_family;u_short sdl_index;u_char sdl_type;u_char sdl_nlen;u_char sdl_alen;u_char sdl_slen;char sdl_data[12];};
struct BDDiscInfo {UInt16 dataLength;unsigned char discStatus : 2;unsigned char stateOfLastSession : 2;unsigned char erasable : 1;unsigned char dataType : 3;UInt8 reserved2;UInt8 numberOfSessionsLSB;UInt8 firstTrackNumberInLastSessionLSB;UInt8 lastTrackNumberInLastSessionLSB;UInt8 reserved4[2];UInt8 numberOfSessionsMSB;UInt8 firstTrackNumberInLastSessionMSB;UInt8 lastTrackNumberInLastSessionMSB;UInt8 reserved6[22];};
struct Boot_Video {uint32_t v_display;uint32_t v_rowBytes;uint32_t v_width;uint32_t v_height;uint32_t v_depth;uint32_t v_resv[7];uint64_t v_baseAddr;};
struct DriverType {Str31 nameInfoStr;NumVersion version;};
typedef voidpf (*alloc_func)(voidpf, uInt, uInt);
struct au_session {auditinfo_addr_t *as_aia_p;au_mask_t as_mask;};
struct __attribute__((aligned(8))) cccmac_ctx {uint8_t k1[16];uint8_t k2[16];uint8_t block[16];size_t block_nbytes;size_t cumulated_nbytes; ccmode_cbc *cbc;uint8_t ctx[8];};
struct ccmode_siv {size_t size;size_t block_size;int (*init)( ccmode_siv *, ccsiv_ctx *, size_t,  uint8_t *);int (*set_nonce)(ccsiv_ctx *, size_t,  uint8_t *);int (*auth)(ccsiv_ctx *, size_t,  uint8_t *);int (*crypt)(ccsiv_ctx *, size_t,  uint8_t *, uint8_t *);int (*reset)(ccsiv_ctx *); ccmode_cbc *cbc; ccmode_ctr *ctr;};
struct dk_unmap_t {dk_extent_t *extents;uint32_t extentsCount;uint32_t options;uint8_t reserved0096[4];};
struct fdisk_part {UInt8 bootid;UInt8 beghead;UInt8 begsect;UInt8 begcyl;UInt8 systid;UInt8 endhead;UInt8 endsect;UInt8 endcyl;UInt32 relsect;UInt32 numsect;};
struct rt_metrics {u_int32_t rmx_locks;u_int32_t rmx_mtu;u_int32_t rmx_hopcount;int32_t rmx_expire;u_int32_t rmx_recvpipe;u_int32_t rmx_sendpipe;u_int32_t rmx_ssthresh;u_int32_t rmx_rtt;u_int32_t rmx_rttvar;u_int32_t rmx_pksent;u_int32_t rmx_state;u_int32_t rmx_filler[3];};
struct sadb_ident {u_int16_t sadb_ident_len;u_int16_t sadb_ident_exttype;u_int16_t sadb_ident_type;u_int16_t sadb_ident_reserved;u_int64_t sadb_ident_id;};
struct section_64 {char sectname[16];char segname[16];uint64_t addr;uint64_t size;uint32_t offset;uint32_t align;uint32_t reloff;uint32_t nreloc;uint32_t flags;uint32_t reserved1;uint32_t reserved2;uint32_t reserved3;};
struct sysctl_req {proc *p;int lock;user_addr_t oldptr;size_t oldlen;size_t oldidx;int (*oldfunc)(sysctl_req *,  void *, size_t);user_addr_t newptr;size_t newlen;size_t newidx;int (*newfunc)(sysctl_req *, void *, size_t);};
struct vfs_server {int32_t vs_minutes;u_int8_t vs_server_name[768];};
struct FWSegment {FWAddress address;UInt32 length;};
struct IOCommand { OSObject cppsuper0;queue_chain_t fCommandChain;};
struct VDDefMode {UInt8 csID;SInt8 filler;};
struct ecc_event {uint8_t id;uint8_t count;__attribute__((aligned(8))) uint64_t data[8];};
typedef kern_return_t (*hv_trap_t)(void *, uint64_t);
struct mbuf_stat {u_int32_t mbufs;u_int32_t clusters;u_int32_t clfree;u_int32_t drops;u_int32_t wait;u_int32_t drain;u_short mtypes[256];u_int32_t mcfail;u_int32_t mpfail;u_int32_t msize;u_int32_t mclbytes;u_int32_t minclsize;u_int32_t mlen;u_int32_t mhlen;u_int32_t bigclusters;u_int32_t bigclfree;u_int32_t bigmclbytes;};
struct sadb_prop {u_int16_t sadb_prop_len;u_int16_t sadb_prop_exttype;u_int8_t sadb_prop_replay;u_int8_t sadb_prop_reserved[3];};
struct sigaction {__sigaction_u __sigaction_u;sigset_t sa_mask;int sa_flags;};
struct termios32 {__uint32_t c_iflag;__uint32_t c_oflag;__uint32_t c_cflag;__uint32_t c_lflag;cc_t c_cc[20];__uint32_t c_ispeed;__uint32_t c_ospeed;};
struct vfsioattr {u_int32_t io_maxreadcnt;u_int32_t io_maxwritecnt;u_int32_t io_segreadcnt;u_int32_t io_segwritecnt;u_int32_t io_maxsegreadsize;u_int32_t io_maxsegwritesize;u_int32_t io_devblocksize;u_int32_t io_flags;vfsioattr___A9423A550A2B08FFBBB5EADB024DFCFD __anonymous0;};
struct zone_info {integer_t zi_count;vm_size_t zi_cur_size;vm_size_t zi_max_size;vm_size_t zi_elem_size;vm_size_t zi_alloc_size;integer_t zi_pageable;integer_t zi_sleepable;integer_t zi_exhaustible;integer_t zi_collectable;};
union BTreeKey {u_int8_t length8;u_int16_t length16;u_int8_t rawData[522];};
struct PE_state {boolean_t initialized;PE_Video video;void *deviceTreeHead;void *bootArgs;};
struct fchecklv {off_t lv_file_start;size_t lv_error_message_size;void *lv_error_message;};
struct nextvend {u_char nv_magic[4];u_char nv_version;unsigned short : 0;union {u_char NV0[58];_4C928A861DF53AA82E61C4313B0554E4 NV1;} nv_U;};
struct sadb_alg {u_int8_t sadb_alg_id;u_int8_t sadb_alg_ivlen;u_int16_t sadb_alg_minbits;u_int16_t sadb_alg_maxbits;u_int16_t sadb_alg_reserved;};
struct sockaddr {__uint8_t sa_len;sa_family_t sa_family;char sa_data[14];};
struct xsockbuf {u_int32_t sb_cc;u_int32_t sb_hiwat;u_int32_t sb_mbcnt;u_int32_t sb_mbmax;int32_t sb_lowat;short sb_flags;short sb_timeo;};
struct kev_msg {u_int32_t vendor_code;u_int32_t kev_class;u_int32_t kev_subclass;u_int32_t event_code;kev_d_vectors dv[5];};
struct mb_stat {u_int32_t mbs_cnt;u_int32_t mbs_pad;mb_class_stat_t mbs_class[1];};
struct ntsid_t {u_int8_t sid_kind;u_int8_t sid_authcount;u_int8_t sid_authority[6];u_int32_t sid_authorities[16];};
struct ombstat {u_int32_t m_mbufs;u_int32_t m_clusters;u_int32_t m_spare;u_int32_t m_clfree;u_int32_t m_drops;u_int32_t m_wait;u_int32_t m_drain;u_short m_mtypes[256];u_int32_t m_mcfail;u_int32_t m_mpfail;u_int32_t m_msize;u_int32_t m_mclbytes;u_int32_t m_minclsize;u_int32_t m_mlen;u_int32_t m_mhlen;};
struct timeval {__darwin_time_t tv_sec;__darwin_suseconds_t tv_usec;};
struct vmspace {int32_t dummy;caddr_t dummy2;int32_t dummy3[5];caddr_t dummy4[3];};
struct vmtotal {int16_t t_rq;int16_t t_dw;int16_t t_pw;int16_t t_sl;int16_t t_sw;int32_t t_vm;int32_t t_avm;int32_t t_rm;int32_t t_arm;int32_t t_vmshr;int32_t t_avmshr;int32_t t_rmshr;int32_t t_armshr;int32_t t_free;};
struct CDTEXT {UInt16 dataLength;UInt8 reserved;UInt8 reserved2;};
struct arphdr {u_short ar_hrd;u_short ar_pro;u_char ar_hln;u_char ar_pln;u_short ar_op;};
struct au_tid {dev_t port;u_int32_t machine;};
struct fvmlib {lc_str name;uint32_t minor_version;uint32_t header_addr;};
struct ipcomp {u_int8_t comp_nxt;u_int8_t comp_flags;u_int16_t comp_cpi;};
struct mbstat {u_int32_t m_mbufs;u_int32_t m_clusters;u_int32_t m_spare;u_int32_t m_clfree;u_int32_t m_drops;u_int32_t m_wait;u_int32_t m_drain;u_short m_mtypes[256];u_int32_t m_mcfail;u_int32_t m_mpfail;u_int32_t m_msize;u_int32_t m_mclbytes;u_int32_t m_minclsize;u_int32_t m_mlen;u_int32_t m_mhlen;u_int32_t m_bigclusters;u_int32_t m_bigclfree;u_int32_t m_bigmclbytes;};
struct statfs {short f_otype;short f_oflags;int f_bsize;int f_iosize;int f_blocks;int f_bfree;int f_bavail;int f_files;int f_ffree;fsid_t f_fsid;uid_t f_owner;short f_reserved1;short f_type;int f_flags;int f_reserved2[2];char f_fstypename[15];char f_mntonname[90];char f_mntfromname[90];char f_reserved3;int f_reserved4[4];};
struct CDPMA {UInt16 dataLength;UInt8 reserved;UInt8 reserved2;};
struct CDTOC {UInt16 length;UInt8 sessionFirst;UInt8 sessionLast;};
struct DDMap {UInt32 ddBlock;UInt16 ddSize;UInt16 ddType;};
struct dylib {lc_str name;uint32_t timestamp;uint32_t current_version;uint32_t compatibility_version;};
struct flock {off_t l_start;off_t l_len;pid_t l_pid;short l_type;short l_whence;};
struct vend {u_char v_magic[4];u_int32_t v_flags;u_char v_unused[56];};
union wait {int w_status;wait___7577FAE843D32618A04985FDB883FD87 w_T;wait___D2BE3D1E9784782BB73F97C8AEDA900E w_S;};
struct IOHIDEventService__ExpansionData___ADF6E6FC50F1B00482339F12ECE9D118 {IOFixed x;IOFixed y;IOFixed z;IOFixed rX;IOFixed rY;IOFixed rZ;UInt32 buttonState;IOOptionBits options;IOTimerEventSource *timer;};
struct IOHIDEventDriver__ExpansionData___1A4443270529141425FCA41A12FCC45F {OSArray *elements;UInt32 capable;UInt32 sendingReportID;IOFixed axis[6];UInt32 buttonState;IOOptionBits options;char disabled;};
union IOFireWireBus__DCLTaskInfoAux___00A0C683E8526E49FD7CE39739B2FE09 {_80170D750C6FB8D8ABC6B5D9BAC5E223 v0;_5F8C1396E33B95E0A1ABA60D21CE7376 v1;_DC3A9BB9D8D5998A73E3E2EEA2D25385 v2;};
struct IOSCSIProtocolServices__IOSCSIProtocolServicesExpansionData {UInt32 fSemaphore;char fRequiresAutosenseDescriptor;SCSITaskCompletion fCompletionRoutine;queue_head_t fTaskQueueHead;queue_head_t fAutoSenseQueueHead;};
struct IOFireWireSerialBusProtocolTransport__SBP2ClientOrbData {IOFireWireSBP2ORB *orb;SCSITaskIdentifier scsiTask;SCSIServiceResponse serviceResponse;SCSITaskStatus taskStatus;IOBufferMemoryDescriptor *quadletAlignedBuffer;};
struct BluetoothHCIAcceptSynchronousConnectionRequestParams {uint32_t transmitBandwidth;uint32_t receiveBandwidth;uint16_t maxLatency;uint16_t contentFormat;uint8_t retransmissionEffort;uint16_t packetType;};
struct __attribute__((packed)) StandardUSB__BillboardAltModeCapabilityCompatibility {uint16_t wSVID;uint32_t dwAlternateMode;uint8_t iAlternateModeString;};
struct IOFireWireSBP2ManagementORB__FWSBP2StatusBlock {UInt8 details;UInt8 sbpStatus;UInt16 orbOffsetHi;UInt32 orbOffsetLo;UInt32 status[6];};
struct NXEventData___1D72C273FCBCED44C35AFF60C0C1ABE4 {SInt32 dx;SInt32 dy;UInt8 subx;UInt8 suby;UInt8 subType;UInt8 reserved1;SInt32 reserved2;_16C37BE43F73B60D5456A4D0F8F2ABA5 tablet;};
struct BluetoothHCISetupSynchronousConnectionParams {uint32_t transmitBandwidth;uint32_t receiveBandwidth;uint16_t maxLatency;uint16_t voiceSetting;uint8_t retransmissionEffort;uint16_t packetType;};
union icmp6_hdr___D19D92B5F4F43A148CE7ABC3DA9CAAC9 {u_int32_t icmp6_un_data32[1];u_int16_t icmp6_un_data16[2];u_int8_t icmp6_un_data8[4];};
union sha1_ctxt___6586F9C709DE089D785AD2F99CD3AEEB {u_int8_t b8[8];u_int32_t b32[2];u_int64_t b64[1];};
union in6_addr___330434928707C706902F20BE7BA89EB4 {__uint8_t __u6_addr8[16];__uint16_t __u6_addr16[8];__uint32_t __u6_addr32[4];};
typedef void (*IOFireWireAVCTargetCommandHandlerCallback)( AVCCommandHandlerInfo *, UInt32, UInt16,  void *, UInt32, IOFWSpeed *, UInt32);
struct IOFilterInterruptEventSource_vtbl_layout; 
struct inpcb___D2EE53D6AFCE5D79378C56B75ED05C14 {mbuf *inp6_options;u_int8_t inp6_hlim;u_int8_t unused_uint8_1;ushort unused_uint16_1;ip6_pktopts *inp6_outputopts;ip6_moptions *inp6_moptions;icmp6_filter *inp6_icmp6filt;int inp6_cksum;u_short inp6_ifindex;short inp6_hops;};
typedef void (*IOHIDInterface__InterruptReportAction)(OSObject *, AbsoluteTime, IOMemoryDescriptor *, IOHIDReportType, UInt32, void *);
struct _AVCGetTargetPlugConnectionOutParams {UInt32 connectedSubunitTypeAndID;IOFWAVCPlugTypes connectedPlugType;UInt32 connectedPlugNum;Boolean lockConnection;Boolean permConnection;};
struct IOBlockStorageDriver__ExpansionData {UInt64 reserved0000;UInt64 maxReadBlockTransfer;UInt64 maxWriteBlockTransfer;IONotifier *powerEventNotifier;UInt32 deblockRequestWriteLockCount;UInt64 maxReadSegmentTransfer;UInt64 maxWriteSegmentTransfer;UInt64 maxReadSegmentByteTransfer;UInt64 maxWriteSegmentByteTransfer;UInt64 minSegmentAlignmentByteTransfer;UInt64 maxSegmentWidthByteTransfer;IOBlockStorageDriver__Context *contexts;IOSimpleLock *contextsLock;UInt32 contextsCount;UInt32 contextsMaxCount;};
struct IOEthernetInterface__ExpansionData {UInt32 altMTU;UInt32 publishedFeatureID;uint32_t supportedWakeFilters;OSNumber *disabledWakeFilters;uint64_t wompEnabledAssertionID;};
typedef void (*IOUSBCompletionActionWithTimeStamp)(void *, void *, IOReturn, UInt32, AbsoluteTime);
struct _58DDB36EAAB179E2C121504DB177F0DE {UInt32 (*ptr)(mbuf_t, void *);size_t adj;};
struct _E59770B5AFE0FAA139FA7A9E130D8A27 {uint32_t sourceAddress;uint32_t sourceAddressMask;uint32_t destinationAddress;uint32_t destinationAddressMask;uint16_t sourcePort;uint16_t sourcePortMask;uint16_t destinationPort;uint16_t destinationPortMask;uint8_t protocol;};
struct IOFWPHYPacketListener_vtbl_layout; 
struct IOFilterInterruptEventSource_vtbl; 
struct IOHIKeyboardMapper__ExpansionData {kbdBitVector cached_KeyBits;UInt32 specialKeyModifierFlags;SInt32 modifierSwap_Modifiers[16];unsigned char *cachedAlphaLockModDefs;};
typedef IOReturn (*IOAudioStream__AudioIOFunction)( void *, void *, UInt32, UInt32,  IOAudioStreamFormat *, IOAudioStream *);
struct _AVCConnectTargetPlugsInParams {UInt32 sourceSubunitTypeAndID;IOFWAVCPlugTypes sourcePlugType;UInt32 sourcePlugNum;UInt32 destSubunitTypeAndID;IOFWAVCPlugTypes destPlugType;UInt32 destPlugNum;Boolean lockConnection;Boolean permConnection;};
struct IODetailedTimingInformationV2 {UInt32 __reservedA[3];UInt32 horizontalScaledInset;UInt32 verticalScaledInset;UInt32 scalerFlags;UInt32 horizontalScaled;UInt32 verticalScaled;UInt32 signalConfig;UInt32 signalLevels;UInt64 pixelClock;UInt64 minPixelClock;UInt64 maxPixelClock;UInt32 horizontalActive;UInt32 horizontalBlanking;UInt32 horizontalSyncOffset;UInt32 horizontalSyncPulseWidth;UInt32 verticalActive;UInt32 verticalBlanking;UInt32 verticalSyncOffset;UInt32 verticalSyncPulseWidth;UInt32 horizontalBorderLeft;UInt32 horizontalBorderRight;UInt32 verticalBorderTop;UInt32 verticalBorderBottom;UInt32 horizontalSyncConfig;UInt32 horizontalSyncLevel;UInt32 verticalSyncConfig;UInt32 verticalSyncLevel;UInt32 numLinks;UInt32 verticalBlankingExtension;UInt16 pixelEncoding;UInt16 bitsPerColorComponent;UInt16 colorimetry;UInt16 dynamicRange;UInt32 __reservedB[4];};
struct VDConfigurationFeatureListRec {OSType *csConfigFeatureList;ItemCount csNumConfigFeatures;uintptr_t csReserved1;uintptr_t csReserved2;};
typedef errno_t (*img4_environment_get_crypto_t)( img4_environment_t *,  img4_crypto_t **,  void *);
typedef errno_t (*img4_environment_get_uint32_t)( img4_environment_t *, uint32_t *,  void *);
typedef errno_t (*img4_environment_get_uint64_t)( img4_environment_t *, uint64_t *,  void *);
typedef void (*img4_set_custom_tag_handler_t)(img4_t *,  img4_custom_tag_t *, size_t);
struct DVDRegionPlaybackControlInfo {UInt8 dataLength[2];UInt8 reserved[2];unsigned char numberUserResets : 3;unsigned char numberVendorResets : 3;unsigned char typeCode : 2;DVDCPRMRegionCode driveRegion;DVDRegionalPlaybackControlScheme rpcScheme;UInt8 reserved2;};
struct IOAudioStream__ExpansionData {IOAudioStreamFormatExtension streamFormatExtension;UInt32 mSampleFramesReadByEngine;IOReturn mClipOutputStatus;unsigned int mStreamErrorCounts[6];char mStreamErrorCountsUpdated;};
struct IODMACommand__SegmentOptions {uint8_t fStructSize;uint8_t fNumAddressBits;uint64_t fMaxSegmentSize;uint64_t fMaxTransferSize;uint32_t fAlignment;uint32_t fAlignmentLength;uint32_t fAlignmentInternalSegments;};
struct __attribute__((packed)) codesigning_exit_reason_info {uint64_t ceri_virt_addr;uint64_t ceri_file_offset;char ceri_pathname[1024];char ceri_filename[1024];uint64_t ceri_codesig_modtime_secs;uint64_t ceri_codesig_modtime_nsecs;uint64_t ceri_page_modtime_secs;uint64_t ceri_page_modtime_nsecs;uint8_t ceri_path_truncated;uint8_t ceri_object_codesigned;uint8_t ceri_page_codesig_validated;uint8_t ceri_page_codesig_tainted;uint8_t ceri_page_codesig_nx;uint8_t ceri_page_wpmapped;uint8_t ceri_page_slid;uint8_t ceri_page_dirty;uint32_t ceri_page_shadow_depth;};
struct IODeviceMemory__InitElement {IOPhysicalAddress start;IOPhysicalLength length;IOOptionBits tag;};
struct IONetworkMedium_vtbl_layout; 
struct SCSICmd_INQUIRY_Page89_Data {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt16 PAGE_LENGTH;UInt32 Reserved;UInt8 SAT_VENDOR_IDENTIFICATION[8];UInt8 SAT_PRODUCT_IDENTIFICATION[16];UInt8 SAT_PRODUCT_REVISION_LEVEL[4];UInt8 ATA_DEVICE_SIGNATURE[20];UInt8 COMMAND_CODE;UInt8 Reserved2[3];UInt8 IDENTIFY_DATA[512];};
struct _dyld_cache_image_text_info {uuid_t uuid;uint64_t loadAddress;uint32_t textSegmentSize;uint32_t pathOffset;};
struct IOBlitCopyRectanglesStruct {IOBlitOperation operation;IOItemCount count;IOBlitCopyRectangle rects[1];};
struct IOFWPHYPacketListener_vtbl; 
struct IOKitDiagnosticsParameters {size_t size;uint64_t value;uint32_t options;uint32_t tag;uint32_t zsize;uint32_t reserved[8];};
struct IOStreamBuffer_vtbl_layout; 
struct LowLatencyUserBufferInfoV2 {UInt32 cookie;void *bufferAddress;IOByteCount bufferSize;UInt32 bufferType;Boolean isPrepared;void *mappedUHCIAddress;LowLatencyUserBufferInfoV2 *nextBuffer;};
typedef int (*ccrsa_verify_pkcs1v15_fn_t)(ccrsa_pub_ctx_t,  uint8_t *, size_t,  uint8_t *, size_t,  uint8_t *, char *);
struct rpc_routine_arg_descriptor {routine_arg_type type;routine_arg_size size;routine_arg_size count;routine_arg_offset offset;};
struct FWSBP2LoginCompleteParams {IOFireWireSBP2Login *login;UInt32 generation;IOReturn status;FWSBP2LoginResponsePtr loginResponse;FWSBP2StatusBlock *statusBlock;UInt32 statusBlockLength;};
typedef IOReturn (*IOACPIAddressSpaceHandler)(UInt32, IOACPIAddress, UInt64 *, UInt32, UInt32, void *);
struct IONetworkData_vtbl_layout; 
struct IOUSBHostIsochronousFrame {IOReturn status;uint32_t requestCount;uint32_t completeCount;AbsoluteTime timeStamp;};
struct kcdata_subtype_descriptor {uint8_t kcs_flags;uint8_t kcs_elem_type;uint16_t kcs_elem_offset;uint32_t kcs_elem_size;char kcs_name[32];};
typedef errno_t (*proto_media_resolve_multi)(ifnet_t,  sockaddr *, sockaddr_dl *, size_t);
struct user32_fbootstraptransfer {off_t fbt_offset;user32_size_t fbt_length;user32_addr_t fbt_buffer;};
typedef void (*IODMAEventSource__Action)(OSObject *, IODMAEventSource *, IODMACommand *, IOReturn, IOByteCount, AbsoluteTime);
typedef IOReturn (*IOPCIDeviceConfigHandler)(void *, IOMessage, IOPCIDevice *, uint32_t);
typedef IOReturn (*IOServiceInterestHandler)(void *, void *, UInt32, IOService *, void *, vm_size_t);
struct IOUSBLowLatencyIsocFrame {IOReturn frStatus;UInt16 frReqCount;UInt16 frActCount;AbsoluteTime frTimeStamp;};
struct LowLatencyUserBufferInfo {UInt32 cookie;void *bufferAddress;IOByteCount bufferSize;UInt32 bufferType;Boolean isPrepared;LowLatencyUserBufferInfo *nextBuffer;};
typedef void (*ScrollWheelEventCallback)(OSObject *, short, short, short, IOFixed, IOFixed, IOFixed, SInt32, SInt32, SInt32, SInt32, AbsoluteTime, OSObject *, void *);
struct dk_dvd_read_rzone_info_t {uint8_t reserved0000[4];uint32_t address;uint8_t addressType;uint8_t reserved0072[1];uint16_t bufferLength;void *buffer;};
struct DCLTransferPacketStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;void *buffer;UInt32 size;};
struct IODataQueue_vtbl_layout; 
struct IOFWDuplicateGUIDStruct {IOFWDuplicateGUIDRec *fNextGUID;CSRNodeUniqueID fGUID;UInt32 fLastGenSeen;};
struct dk_bd_read_track_info_t {uint8_t reserved0000[4];uint32_t address;uint8_t addressType;uint8_t reserved0072[5];uint16_t bufferLength;void *buffer;};
struct dk_cd_read_track_info_t {uint8_t reserved0000[4];uint32_t address;uint8_t addressType;uint8_t reserved0072[1];uint16_t bufferLength;void *buffer;};
struct dk_dvd_read_structure_t {uint8_t format;uint8_t reserved0008[3];uint32_t address;uint8_t grantID;uint8_t layer;uint16_t bufferLength;void *buffer;};
struct kern_work_interval_args {uint64_t work_interval_id;uint64_t start;uint64_t finish;uint64_t deadline;uint64_t next_start;uint32_t notify_flags;uint32_t create_flags;uint16_t urgency;};
struct user_fbootstraptransfer {off_t fbt_offset;user_size_t fbt_length;user_addr_t fbt_buffer;};
struct DCLUpdateDCLListStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;DCLCommand **dclCommandList;UInt32 numDCLCommands;};
struct IOBlitRectanglesStruct {IOBlitOperation operation;IOItemCount count;IOBlitRectangle rects[1];};
struct IOFWUserObjectExporter { OSObject cppsuper0;unsigned int fCapacity;unsigned int fObjectCount; OSObject **fObjects;IOFWUserObjectExporter__CleanupFunctionWithExporter *fCleanupFunctions;IOLock *fLock;OSObject *fOwner;};
struct dk_bd_read_structure_t {uint8_t format;uint8_t reserved0008[3];uint32_t address;uint8_t grantID;uint8_t layer;uint8_t reserved0080[4];uint16_t bufferLength;void *buffer;};
typedef int (*kauth_scope_callback_t)(kauth_cred_t, void *, kauth_action_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
struct rpc_routine_descriptor {mig_impl_routine_t impl_routine;mig_stub_routine_t stub_routine;unsigned int argc;unsigned int descr_count;rpc_routine_arg_descriptor_t arg_descr;unsigned int max_reply_msg;};
struct DCLPtrTimeStampStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;UInt32 *timeStampPtr;};
struct IOAccelSurfaceScaling {IOAccelBounds buffer;IOAccelSize source;UInt32 reserved[8];};
struct IOBlitScanlinesStruct {IOBlitOperation operation;IOItemCount count;SInt32 y;SInt32 height;SInt32 x[2];};
struct IODMAMapSpecification {uint64_t alignment;IOService *device;uint32_t options;uint8_t numAddressBits;uint8_t resvA[3];uint32_t resvB[4];};
struct IOExternalAsyncMethod {IOService *object;IOAsyncMethod func;IOOptionBits flags;IOByteCount count0;IOByteCount count1;};
struct __attribute__((packed)) embedded_panic_header {uint32_t eph_magic;uint32_t eph_crc;uint32_t eph_version;uint64_t eph_panic_flags;uint32_t eph_panic_log_offset;uint32_t eph_panic_log_len;uint32_t eph_stackshot_offset;uint32_t eph_stackshot_len;uint32_t eph_other_log_offset;uint32_t eph_other_log_len;embedded_panic_header___2447379B7BF66221A3409CFDF4901523 __anonymous0;};
typedef int (*hfs_to_unicode_func_t)( uint8_t *       , uint16_t *, u_int32_t, u_int32_t *);
struct __attribute__((packed)) stackshot_fault_stats {uint32_t sfs_pages_faulted_in;uint64_t sfs_time_spent_faulting;uint64_t sfs_system_max_fault_time;uint8_t sfs_stopped_faulting;};
typedef int (*unicode_to_hfs_func_t)(uint16_t *, u_int32_t,uint8_t *       );
struct vnop_readdirattr_args {vnodeop_desc *a_desc;vnode_t a_vp;attrlist *a_alist;uio *a_uio;uint32_t a_maxcount;uint32_t a_options;uint32_t *a_newstate;int *a_eofflag;uint32_t *a_actualcount;vfs_context_t a_context;};
struct x86_exception_state64 {__uint16_t trapno;__uint16_t cpu;__uint32_t err;__uint64_t faultvaddr;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogThread {int16_t recordType;int16_t reserved;u_int32_t parentID;HFSUniStr255 nodeName;};
struct IOBlitVerticesStruct {IOBlitOperation operation;IOItemCount count;IOBlitVertex vertices[2];};
struct IOHardwareCursorInfo {UInt16 majorVersion;UInt16 minorVersion;UInt32 cursorHeight;UInt32 cursorWidth;IOColorEntry *colorMap;UInt8 *hardwareCursorData;UInt16 cursorHotSpotX;UInt16 cursorHotSpotY;UInt32 reserved[5];};
struct IONetworkMedium_vtbl; 
struct VDConvolutionInfoRec {DisplayModeID csDisplayModeID;DepthMode csDepthMode;UInt32 csPage;UInt32 csFlags;UInt32 csReserved;};
struct _loaded_kext_summary {char name[64];uuid_t uuid;uint64_t address;uint64_t size;uint64_t version;uint32_t loadTag;uint32_t flags;uint64_t reference_list;};
struct dk_format_capacity_t {uint64_t blockCount;uint32_t blockSize;uint8_t reserved0096[4];};
struct dk_physical_extent_t {uint64_t offset;uint64_t length;uint8_t reserved0128[12];dev_t dev;};
typedef errno_t (*ifnet_del_proto_func)(ifnet_t, protocol_family_t);
struct processor_basic_info {cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;boolean_t running;int slot_num;boolean_t is_master;};
typedef errno_t (*proto_media_detached)(ifnet_t, protocol_family_t);
typedef errno_t (*proto_media_send_arp)(ifnet_t, u_short,  sockaddr_dl *,  sockaddr *,  sockaddr_dl *,  sockaddr *);
struct AVCConnectionRecord { OSObject cppsuper0;UInt32 sourceSubunitTypeAndID;IOFWAVCPlugTypes sourcePlugType;UInt32 sourcePlugNum;UInt32 destSubunitTypeAndID;IOFWAVCPlugTypes destPlugType;UInt32 destPlugNum;char lockConnection;char permConnection;};
struct IOAudioClientBuffer {IOAudioEngineUserClient *userClient;IOAudioStream *audioStream;void *sourceBuffer;IOMemoryDescriptor *sourceBufferDescriptor;IOMemoryMap *sourceBufferMap;void *unmappedSourceBuffer;UInt32 numSampleFrames;UInt32 numChannels;IOAudioEnginePosition mixedPosition;IOAudioClientBuffer *mNextBuffer32;IOAudioClientBuffer *nextClip;IOAudioClientBuffer *previousClip;IOAudioClientBuffer *nextClient;IOAudioBufferDataDescriptor *bufferDataDescriptor;};
struct __attribute__((packed)) IOReportChannelType {uint8_t report_format;uint8_t reserved;uint16_t categories;uint16_t nelements;int16_t element_idx;};
struct IOStreamBuffer_vtbl; 
struct IOUSBDevRequestDesc {UInt8 bmRequestType;UInt8 bRequest;UInt16 wValue;UInt16 wIndex;UInt16 wLength;IOMemoryDescriptor *pData;UInt32 wLenDone;};
struct VDDetailedTimingRec {UInt32 csTimingSize;UInt32 csTimingType;UInt32 csTimingVersion;UInt32 csTimingReserved;DisplayModeID csDisplayModeID;UInt32 csDisplayModeSeed;UInt32 csDisplayModeState;UInt32 csDisplayModeAlias;UInt32 csSignalConfig;UInt32 csSignalLevels;UInt64 csPixelClock;UInt64 csMinPixelClock;UInt64 csMaxPixelClock;UInt32 csHorizontalActive;UInt32 csHorizontalBlanking;UInt32 csHorizontalSyncOffset;UInt32 csHorizontalSyncPulseWidth;UInt32 csVerticalActive;UInt32 csVerticalBlanking;UInt32 csVerticalSyncOffset;UInt32 csVerticalSyncPulseWidth;UInt32 csHorizontalBorderLeft;UInt32 csHorizontalBorderRight;UInt32 csVerticalBorderTop;UInt32 csVerticalBorderBottom;UInt32 csHorizontalSyncConfig;UInt32 csHorizontalSyncLevel;UInt32 csVerticalSyncConfig;UInt32 csVerticalSyncLevel;UInt32 csNumLinks;UInt32 csReserved2;UInt32 csReserved3;UInt32 csReserved4;UInt32 csReserved5;UInt32 csReserved6;UInt32 csReserved7;UInt32 csReserved8;};
typedef int (*ccrsa_make_pub_fn_t)(ccrsa_pub_ctx_t, size_t,  uint8_t *, size_t,  uint8_t *);
typedef errno_t (*ctl_disconnect_func)(kern_ctl_ref, u_int32_t, void *);
struct dk_dvd_report_key_t {uint8_t format;uint8_t keyClass;uint8_t blockCount;uint8_t reserved0024[1];uint32_t address;uint8_t grantID;uint8_t reserved0072[1];uint16_t bufferLength;void *buffer;};
struct ip6_hdr__ip6_hdrctl {u_int32_t ip6_un1_flow;u_int16_t ip6_un1_plen;u_int8_t ip6_un1_nxt;u_int8_t ip6_un1_hlim;};
struct __attribute__((packed)) mem_and_io_snapshot {uint32_t snapshot_magic;uint32_t free_pages;uint32_t active_pages;uint32_t inactive_pages;uint32_t purgeable_pages;uint32_t wired_pages;uint32_t speculative_pages;uint32_t throttled_pages;uint32_t filebacked_pages;uint32_t compressions;uint32_t decompressions;uint32_t compressor_size;int32_t busy_buffer_count;uint32_t pages_wanted;uint32_t pages_reclaimed;uint8_t pages_wanted_reclaimed_valid;};
typedef errno_t (*proto_plumb_handler)(ifnet_t, protocol_family_t);
struct tcp_connection_info {u_int8_t tcpi_state;u_int8_t tcpi_snd_wscale;u_int8_t tcpi_rcv_wscale;u_int8_t __pad1;u_int32_t tcpi_options;u_int32_t tcpi_flags;u_int32_t tcpi_rto;u_int32_t tcpi_maxseg;u_int32_t tcpi_snd_ssthresh;u_int32_t tcpi_snd_cwnd;u_int32_t tcpi_snd_wnd;u_int32_t tcpi_snd_sbbytes;u_int32_t tcpi_rcv_wnd;u_int32_t tcpi_rttcur;u_int32_t tcpi_srtt;u_int32_t tcpi_rttvar;unsigned int tcpi_tfo_cookie_req : 1;unsigned int tcpi_tfo_cookie_rcv : 1;unsigned int tcpi_tfo_syn_loss : 1;unsigned int tcpi_tfo_syn_data_sent : 1;unsigned int tcpi_tfo_syn_data_acked : 1;unsigned int tcpi_tfo_syn_data_rcv : 1;unsigned int tcpi_tfo_cookie_req_rcv : 1;unsigned int tcpi_tfo_cookie_sent : 1;unsigned int tcpi_tfo_cookie_invalid : 1;unsigned int tcpi_tfo_cookie_wrong : 1;unsigned int tcpi_tfo_no_cookie_rcv : 1;unsigned int tcpi_tfo_heuristics_disable : 1;unsigned int tcpi_tfo_send_blackhole : 1;unsigned int tcpi_tfo_recv_blackhole : 1;unsigned int tcpi_tfo_onebyte_proxy : 1;unsigned int __pad2 : 17;__attribute__((aligned(8))) u_int64_t tcpi_txpackets;__attribute__((aligned(8))) u_int64_t tcpi_txbytes;__attribute__((aligned(8))) u_int64_t tcpi_txretransmitbytes;__attribute__((aligned(8))) u_int64_t tcpi_rxpackets;__attribute__((aligned(8))) u_int64_t tcpi_rxbytes;__attribute__((aligned(8))) u_int64_t tcpi_rxoutoforderbytes;__attribute__((aligned(8))) u_int64_t tcpi_txretransmitpackets;};
struct DCLTimeStampStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;UInt32 timeStamp;};
struct IONetworkData_vtbl; 
struct _dyld_cache_header {char magic[16];uint32_t mappingOffset;uint32_t mappingCount;uint32_t imagesOffset;uint32_t imagesCount;uint64_t dyldBaseAddress;uint64_t codeSignatureOffset;uint64_t codeSignatureSize;uint64_t slideInfoOffset;uint64_t slideInfoSize;uint64_t localSymbolsOffset;uint64_t localSymbolsSize;uint8_t uuid[16];uint64_t cacheType;uint32_t branchPoolsOffset;uint32_t branchPoolsCount;uint64_t accelerateInfoAddr;uint64_t accelerateInfoSize;uint64_t imagesTextOffset;uint64_t imagesTextCount;uint64_t dylibsImageGroupAddr;uint64_t dylibsImageGroupSize;uint64_t otherImageGroupAddr;uint64_t otherImageGroupSize;uint64_t progClosuresAddr;uint64_t progClosuresSize;uint64_t progClosuresTrieAddr;uint64_t progClosuresTrieSize;uint32_t platform;unsigned int formatVersion : 8;unsigned int dylibsExpectedOnDisk : 1;unsigned int simulator : 1;unsigned int locallyBuiltCache : 1;unsigned int padding : 21;};
struct dk_bd_report_key_t {uint8_t format;uint8_t keyClass;uint8_t blockCount;uint8_t reserved0024[1];uint32_t address;uint8_t grantID;uint8_t reserved0072[5];uint16_t bufferLength;void *buffer;};
struct routine_descriptor {mig_impl_routine_t impl_routine;mig_stub_routine_t stub_routine;unsigned int argc;unsigned int descr_count;routine_arg_descriptor_t arg_descr;unsigned int max_reply_msg;};
struct segment_command_64 {uint32_t cmd;uint32_t cmdsize;char segname[16];uint64_t vmaddr;uint64_t vmsize;uint64_t fileoff;uint64_t filesize;vm_prot_t maxprot;vm_prot_t initprot;uint32_t nsects;uint32_t flags;};
struct user32_fsignatures {off_t fs_file_start;user32_addr_t fs_blob_start;user32_size_t fs_blob_size;};
struct vnop_blktooff_args {vnodeop_desc *a_desc;vnode_t a_vp;daddr64_t a_lblkno;off_t *a_offset;};
struct vnop_offtoblk_args {vnodeop_desc *a_desc;vnode_t a_vp;off_t a_offset;daddr64_t *a_lblkno;};
struct vnop_pathconf_args {vnodeop_desc *a_desc;vnode_t a_vp;int a_name;int32_t *a_retval;vfs_context_t a_context;};
struct vnop_searchfs_args {vnodeop_desc *a_desc;vnode_t a_vp;void *a_searchparams1;void *a_searchparams2;attrlist *a_searchattrs;uint32_t a_maxmatches;timeval *a_timelimit;attrlist *a_returnattrs;uint32_t *a_nummatches;uint32_t a_scriptcode;uint32_t a_options;uio *a_uio;searchstate *a_searchstate;vfs_context_t a_context;};
struct vnop_setxattr_args {vnodeop_desc *a_desc;vnode_t a_vp; char *a_name;uio_t a_uio;int a_options;vfs_context_t a_context;};
struct FWSBP2StatusBlock {UInt8 details;UInt8 sbpStatus;UInt16 orbOffsetHi;UInt32 orbOffsetLo;UInt32 status[6];};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogKey {u_int16_t keyLength;u_int32_t parentID;HFSUniStr255 nodeName;};
union IOPCIAddressSpace {UInt32 bits;IOPCIAddressSpace___DB76E73CB46C23E6629E3D56B49010FE s;IOPCIAddressSpace___4F9D87D53F2F4789F1FC5701D66DF10F es;};
struct IOUSBDevRequestTO {UInt8 bmRequestType;UInt8 bRequest;UInt16 wValue;UInt16 wIndex;UInt16 wLength;void *pData;UInt32 wLenDone;UInt32 noDataTimeout;UInt32 completionTimeout;};
struct _IOAudioTimeStamp {UInt64 fSampleTime;UInt64 fHostTime;UInt64 fRateScalar;UInt64 fWordClockTime;IOAudioSMPTETime fSMPTETime;UInt32 fFlags;UInt32 fReserved;};
struct _ccmode_ccm_nonce {unsigned char A_i[16];unsigned char B_i[16];unsigned char MAC[16];unsigned char buf[16];uint32_t mode;uint32_t buflen;uint32_t b_i_len;size_t nonce_size;size_t mac_size;};
typedef errno_t (*ifnet_framer_func)(ifnet_t, mbuf_t *,  sockaddr *,  char *,  char *);
typedef errno_t (*ifnet_output_func)(ifnet_t, mbuf_t);
struct mach_port_options {uint32_t flags;mach_port_limits_t mpl;uint64_t reserved[2];};
typedef errno_t (*proto_media_ioctl)(ifnet_t, protocol_family_t, unsigned int, void *);
typedef errno_t (*sf_getoption_func)(void *, socket_t, sockopt_t);
typedef errno_t (*sf_setoption_func)(void *, socket_t, sockopt_t);
struct thread_basic_info {time_value_t user_time;time_value_t system_time;integer_t cpu_usage;policy_t policy;integer_t run_state;integer_t flags;integer_t suspend_count;integer_t sleep_time;};
struct user32_ntptimeval {user32_timespec time;user32_long_t maxerror;user32_long_t esterror;user32_long_t tai;__int32_t time_state;};
struct user64_ntptimeval {user64_timespec time;user64_long_t maxerror;user64_long_t esterror;user64_long_t tai;__int64_t time_state;};
struct vnop_advlock_args {vnodeop_desc *a_desc;vnode_t a_vp;caddr_t a_id;int a_op;flock *a_fl;int a_flags;vfs_context_t a_context;timespec *a_timeout;};
struct vnop_renamex_args {vnodeop_desc *a_desc;vnode_t a_fdvp;vnode_t a_fvp;componentname *a_fcnp;vnode_t a_tdvp;vnode_t a_tvp;componentname *a_tcnp;vnode_attr *a_vap;vfs_rename_flags_t a_flags;vfs_context_t a_context;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusExtentKey {u_int16_t keyLength;u_int8_t forkType;u_int8_t pad;u_int32_t fileID;u_int32_t startBlock;};
struct IODataQueue_vtbl; 
struct IOExternalMethod {IOService *object;IOMethod func;IOOptionBits flags;IOByteCount count0;IOByteCount count1;};
struct IOPCIEventSource { IOEventSource cppsuper0;queue_chain_t fQ;IOPCI2PCIBridge *fRoot;IOPCIDevice *fDevice;uint8_t fReadIndex;uint8_t fWriteIndex;IOPCIEvent *fEvents;};
struct IOUSBDevReqOOLTO {UInt8 bmRequestType;UInt8 bRequest;UInt16 wValue;UInt16 wIndex;UInt16 wLength;void *pData;UInt32 wLenDone;UInt8 pipeRef;UInt32 noDataTimeout;UInt32 completionTimeout;};
struct __attribute__((packed)) __attribute__((aligned(2))) JournalInfoBlock {u_int32_t flags;u_int32_t device_signature[8];u_int64_t offset;u_int64_t size;uuid_string_t ext_jnl_uuid;char machine_serial_num[48];char reserved[43];};
struct ataRegisterImage {ataTaskFile taskFile;UInt16 ataDataRegister;UInt8 ataAltSDevCReg;};
struct dk_synchronize_t {uint64_t offset;uint64_t length;uint32_t options;uint8_t reserved0160[4];};
struct kev_in_collision {net_event_data link_data;in_addr ia_ipaddr;u_char hw_len;};
struct sockaddr_storage {__uint8_t ss_len;sa_family_t ss_family;char __ss_pad1[6];__int64_t __ss_align;char __ss_pad2[112];};
struct __attribute__((packed)) task_snapshot_v2 {uint64_t ts_unique_pid;uint64_t ts_ss_flags;uint64_t ts_user_time_in_terminated_threads;uint64_t ts_system_time_in_terminated_threads;uint64_t ts_p_start_sec;uint64_t ts_task_size;uint64_t ts_max_resident_size;uint32_t ts_suspend_count;uint32_t ts_faults;uint32_t ts_pageins;uint32_t ts_cow_faults;uint32_t ts_was_throttled;uint32_t ts_did_throttle;uint32_t ts_latency_qos;int32_t ts_pid;char ts_p_comm[32];};
struct user_fsignatures {off_t fs_file_start;user_addr_t fs_blob_start;user_size_t fs_blob_size;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusForkData {u_int64_t logicalSize;u_int32_t clumpSize;u_int32_t totalBlocks;HFSPlusExtentRecord extents;};
struct HIDCapabilities {HIDUsage usage;HIDUsage usagePage;IOByteCount inputReportByteLength;IOByteCount outputReportByteLength;IOByteCount featureReportByteLength;UInt32 numberCollectionNodes;UInt32 numberInputButtonCaps;UInt32 numberInputValueCaps;UInt32 numberOutputButtonCaps;UInt32 numberOutputValueCaps;UInt32 numberFeatureButtonCaps;UInt32 numberFeatureValueCaps;};
struct IOUSBDevRequest {UInt8 bmRequestType;UInt8 bRequest;UInt16 wValue;UInt16 wIndex;UInt16 wLength;void *pData;UInt32 wLenDone;};
struct VDTimingInfoRec {DisplayModeID csTimingMode;uintptr_t csTimingReserved;UInt32 csTimingFormat;UInt32 csTimingData;UInt32 csTimingFlags;};
struct __CodeDirectory {uint32_t magic;uint32_t length;uint32_t version;uint32_t flags;uint32_t hashOffset;uint32_t identOffset;uint32_t nSpecialSlots;uint32_t nCodeSlots;uint32_t codeLimit;uint8_t hashSize;uint8_t hashType;uint8_t platform;uint8_t pageSize;uint32_t spare2;uint32_t scatterOffset;uint32_t teamOffset;uint32_t spare3;uint64_t codeLimit64;uint64_t execSegBase;uint64_t execSegLimit;uint64_t execSegFlags;};
typedef errno_t (*bpf_packet_func)(ifnet_t, mbuf_t);
typedef errno_t (*ipf_output_func)(void *, mbuf_t *, ipf_pktopts_t);
struct kmod_info_32_v1 {uint32_t next_addr;int32_t info_version;uint32_t id;uint8_t name[64];uint8_t version[64];int32_t reference_count;uint32_t reference_list_addr;uint32_t address;uint32_t size;uint32_t hdr_size;uint32_t start_addr;uint32_t stop_addr;};
struct kxld_dependency {u_char *kext;u_long kext_size;char *kext_name;u_char *interface;u_long interface_size;char *interface_name;boolean_t is_direct_dependency;};
struct __attribute__((packed)) thread_snapshot {uint32_t snapshot_magic;uint32_t nkern_frames;uint32_t nuser_frames;uint64_t wait_event;uint64_t continuation;uint64_t thread_id;uint64_t user_time;uint64_t system_time;int32_t state;int32_t priority;int32_t sched_pri;int32_t sched_flags;char ss_flags;char ts_qos;char ts_rqos;char ts_rqos_override;char io_tier;char _reserved[3];uint64_t disk_reads_count;uint64_t disk_reads_size;uint64_t disk_writes_count;uint64_t disk_writes_size;uint64_t io_priority_count[4];uint64_t io_priority_size[4];uint64_t paging_count;uint64_t paging_size;uint64_t non_paging_count;uint64_t non_paging_size;uint64_t data_count;uint64_t data_size;uint64_t metadata_count;uint64_t metadata_size;uint64_t voucher_identifier;uint64_t total_syscalls;char pth_name[64];};
struct user32_fchecklv {user32_off_t lv_file_start;user32_size_t lv_error_message_size;user32_addr_t lv_error_message;};
struct DCLLabelStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;};
struct DCLNuDCLLeader {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;void *program;};
struct IOMemoryCursor { OSObject cppsuper0;IOMemoryCursor__SegmentFunction outSeg;IOPhysicalLength maxSegmentSize;IOPhysicalLength maxTransferSize;IOPhysicalLength alignMask;};
struct IOStreamBuffer { OSObject cppsuper0;IOMemoryDescriptor *_dataBuffer;IOMemoryDescriptor *_controlBuffer;IOStreamBufferID _bufferID;OSArray *_clientMemoryMaps;SInt32 _clientReferenceCount;};
struct IOUSBDevReqOOL {UInt8 bmRequestType;UInt8 bRequest;UInt16 wValue;UInt16 wIndex;UInt16 wLength;void *pData;UInt32 wLenDone;UInt8 pipeRef;};
struct VDGammaInfoRec {GammaTableID csLastGammaID;GammaTableID csNextGammaID;Ptr csGammaPtr;uintptr_t csReserved;};
struct __ipc_perm_old {__uint16_t cuid;__uint16_t cgid;__uint16_t uid;__uint16_t gid;mode_t mode;__uint16_t seq;key_t key;};
struct __semid_ds_old {__ipc_perm_old sem_perm;__int32_t sem_base;unsigned short sem_nsems;time_t sem_otime;__int32_t sem_pad1;time_t sem_ctime;__int32_t sem_pad2;__int32_t sem_pad3[4];};
struct ccchacha20_ctx {uint32_t state[16];uint8_t buffer[64];size_t leftover;};
typedef errno_t (*iff_ioctl_func)(void *, ifnet_t, protocol_family_t, unsigned int, void *);
typedef errno_t (*ipf_input_func)(void *, mbuf_t *, int, u_int8_t);
struct kauth_acl_eval {kauth_ace_t ae_acl;int ae_count;kauth_ace_rights_t ae_requested;kauth_ace_rights_t ae_residual;int ae_result;boolean_t ae_found_deny;int ae_options;kauth_ace_rights_t ae_exp_gall;kauth_ace_rights_t ae_exp_gread;kauth_ace_rights_t ae_exp_gwrite;kauth_ace_rights_t ae_exp_gexec;};
struct mach_header_64 {uint32_t magic;cpu_type_t cputype;cpu_subtype_t cpusubtype;uint32_t filetype;uint32_t ncmds;uint32_t sizeofcmds;uint32_t flags;uint32_t reserved;};
struct sockaddr_inarp {u_char sin_len;u_char sin_family;u_short sin_port;in_addr sin_addr;in_addr sin_srcaddr;u_short sin_tos;u_short sin_other;};
struct IOCommandPool { OSObject cppsuper0;queue_head_t fQueueHead;UInt32 fSleepers;IOCommandGate *fSerializer;IOCommandPool__ExpansionData *reserved;};
struct IONetworkData { OSObject cppsuper0; OSSymbol *_key;UInt32 _access;void *_buffer;UInt32 _bufType;UInt32 _size;void *_tapTarget;IONetworkData__Action _tapAction;void *_tapParam;IONetworkData__ExpansionData *_reserved;};
struct VDDDCBlockRec {UInt32 ddcBlockNumber;ResType ddcBlockType;UInt32 ddcFlags;UInt32 ddcReserved;Byte ddcBlockData[128];};
struct ccdigest_info {size_t output_size;size_t state_size;size_t block_size;size_t oid_size; unsigned char *oid; void *initial_state;void (*compress)(ccdigest_state_t, size_t,  void *);void (*final)( ccdigest_info *, ccdigest_ctx_t, unsigned char *);};
struct igmp_grouprec {u_char ig_type;u_char ig_datalen;u_short ig_numsrc;in_addr ig_group;};
struct __attribute__((packed)) nd_opt_rd_hdr {u_int8_t nd_opt_rh_type;u_int8_t nd_opt_rh_len;u_int16_t nd_opt_rh_reserved1;u_int32_t nd_opt_rh_reserved2;};
struct policy_limits {policy_timeshare_limit_data_t ts;policy_rr_limit_data_t rr;policy_fifo_limit_data_t fifo;};
struct sadb_lifetime {u_int16_t sadb_lifetime_len;u_int16_t sadb_lifetime_exttype;u_int32_t sadb_lifetime_allocations;u_int64_t sadb_lifetime_bytes;u_int64_t sadb_lifetime_addtime;u_int64_t sadb_lifetime_usetime;};
struct sadb_x_policy {u_int16_t sadb_x_policy_len;u_int16_t sadb_x_policy_exttype;u_int16_t sadb_x_policy_type;u_int8_t sadb_x_policy_dir;u_int8_t sadb_x_policy_reserved;u_int32_t sadb_x_policy_id;u_int32_t sadb_x_policy_reserved2;};
struct user_fchecklv {off_t lv_file_start;user_size_t lv_error_message_size;user_addr_t lv_error_message;};
struct DVDRZoneInfo {UInt16 dataLength;UInt8 rzoneNumberLSB;UInt8 borderNumberLSB;UInt8 reserved;unsigned char reserved2 : 4;unsigned char copy : 1;unsigned char damage : 1;unsigned char reserved3 : 2;unsigned char reserved4 : 4;unsigned char restrictedOverwrite : 1;unsigned char incremental : 1;unsigned char blank : 1;unsigned char reservedRZone : 1;unsigned char nextWritableAddressValid : 1;unsigned char lastRecordedAddressValid : 1;unsigned char reserved5 : 6;UInt32 rzoneStartAddress;UInt32 nextWritableAddress;UInt32 freeBlocks;UInt32 blockingFactor;UInt32 rzoneSize;UInt32 lastRecordedAddress;UInt8 rzoneNumberMSB;UInt8 borderNumberMSB;UInt8 reserved6;UInt8 reserved7;};
struct GTraceHeader {uint64_t fDecoderName[4];uint64_t fBufferName[4];uint64_t fCreationTime;uint32_t fBufferID;uint32_t fBufferSize;uint32_t fTokenLine;uint16_t fVersion;uint16_t fBufferIndex;uint16_t fTokensMask;uint16_t fBreadcrumbTokens;uint16_t fTokensCopied;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSExtentKey {u_int8_t keyLength;u_int8_t forkType;u_int32_t fileID;u_int16_t startBlock;};
typedef void (*ccmod_func_t)(cc_ws_t, cczp_const_t, cc_unit *,  cc_unit *);
struct dk_cd_read_t {uint64_t offset;uint8_t sectorArea;uint8_t sectorType;uint8_t reserved0080[6];uint32_t bufferLength;void *buffer;};
struct ifma_msghdr2 {u_short ifmam_msglen;u_char ifmam_version;u_char ifmam_type;int ifmam_addrs;int ifmam_flags;u_short ifmam_index;int32_t ifmam_refcount;};
struct __attribute__((packed)) nd_opt_dnssl {u_int8_t nd_opt_dnssl_type;u_int8_t nd_opt_dnssl_len;u_int16_t nd_opt_dnssl_reserved;u_int32_t nd_opt_dnssl_lifetime;u_int8_t nd_opt_dnssl_domains[8];};
struct policy_bases {policy_timeshare_base_data_t ts;policy_rr_base_data_t rr;policy_fifo_base_data_t fifo;};
struct policy_infos {policy_timeshare_info_data_t ts;policy_rr_info_data_t rr;policy_fifo_info_data_t fifo;};
struct sockaddr_ctl {u_char sc_len;u_char sc_family;u_int16_t ss_sysaddr;u_int32_t sc_id;u_int32_t sc_unit;u_int32_t sc_reserved[5];};
struct sockaddr_sys {u_char ss_len;u_char ss_family;u_int16_t ss_sysaddr;u_int32_t ss_reserved[7];};
struct user32_timex {u_int32_t modes;user32_long_t offset;user32_long_t freq;user32_long_t maxerror;user32_long_t esterror;__int32_t status;user32_long_t constant;user32_long_t precision;user32_long_t tolerance;user32_long_t ppsfreq;user32_long_t jitter;__int32_t shift;user32_long_t stabil;user32_long_t jitcnt;user32_long_t calcnt;user32_long_t errcnt;user32_long_t stbcnt;};
struct user64_timex {u_int32_t modes;user64_long_t offset;user64_long_t freq;user64_long_t maxerror;user64_long_t esterror;__int32_t status;user64_long_t constant;user64_long_t precision;user64_long_t tolerance;user64_long_t ppsfreq;user64_long_t jitter;__int32_t shift;user64_long_t stabil;user64_long_t jitcnt;user64_long_t calcnt;user64_long_t errcnt;user64_long_t stbcnt;};
struct user_termios {user_tcflag_t c_iflag;user_tcflag_t c_oflag;user_tcflag_t c_cflag;user_tcflag_t c_lflag;cc_t c_cc[20];__attribute__((aligned(8))) user_speed_t c_ispeed;user_speed_t c_ospeed;};
struct BDTrackInfo {UInt16 dataLength;UInt8 trackNumberLSB;UInt8 sessionNumberLSB;UInt8 reserved;unsigned char reserved2 : 5;unsigned char damage : 1;unsigned char reserved3 : 2;unsigned char reserved4 : 6;unsigned char blank : 1;unsigned char reservedTrack : 1;unsigned char nextWritableAddressValid : 1;unsigned char lastRecordedAddressValid : 1;unsigned char reserved5 : 6;UInt32 trackStartAddress;UInt32 nextWritableAddress;UInt32 freeBlocks;UInt32 clusterSize;UInt32 trackSize;UInt32 lastRecordedAddress;UInt8 trackNumberMSB;UInt8 sessionNumberMSB;UInt8 reserved6;UInt8 reserved7;};
struct __attribute__((packed)) __attribute__((aligned(2))) BTHeaderRec {u_int16_t treeDepth;u_int32_t rootNode;u_int32_t leafRecords;u_int32_t firstLeafNode;u_int32_t lastLeafNode;u_int16_t nodeSize;u_int16_t maxKeyLength;u_int32_t totalNodes;u_int32_t freeNodes;u_int16_t reserved1;u_int32_t clumpSize;u_int8_t btreeType;u_int8_t keyCompareType;u_int32_t attributes;u_int32_t reserved3[16];};
struct CDTrackInfo {UInt16 dataLength;UInt8 trackNumberLSB;UInt8 sessionNumberLSB;UInt8 reserved;unsigned char trackMode : 4;unsigned char copy : 1;unsigned char damage : 1;unsigned char reserved3 : 2;unsigned char dataMode : 4;unsigned char fixedPacket : 1;unsigned char packet : 1;unsigned char blank : 1;unsigned char reservedTrack : 1;unsigned char nextWritableAddressValid : 1;unsigned char lastRecordedAddressValid : 1;unsigned char reserved5 : 6;UInt32 trackStartAddress;UInt32 nextWritableAddress;UInt32 freeBlocks;UInt32 fixedPacketSize;UInt32 trackSize;UInt32 lastRecordedAddress;UInt8 trackNumberMSB;UInt8 sessionNumberMSB;UInt8 reserved6;UInt8 reserved7;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrDirInfo {FndrDirInfo___6E74BEE3D2405F7C88221D37EC2C16A3 frRect;unsigned short frFlags;FndrDirInfo___0DCF4602959F8104318EED879205AAFA frLocation;int16_t opaque;};
struct IOCatalogue { OSObject cppsuper0;IORWLock *lock;SInt32 generation;OSDictionary *personalities;};
struct IOFWDCLPool { OSObject cppsuper0;Expansion *fReserved;IOFireWireLink *fLink;UInt8 fCurrentTag;UInt8 fCurrentSync;OSArray *fProgram;DCLNuDCLLeader fLeader;};
struct __sigaction {__sigaction_u __sigaction_u;void (*sa_tramp)(void *, int, int, siginfo_t *, void *);sigset_t sa_mask;int sa_flags;};
struct gz_header_s {int text;uLong time;int xflags;int os;Bytef *extra;uInt extra_len;uInt extra_max;Bytef *name;uInt name_max;Bytef *comment;uInt comm_max;int hcrc;int done;};
typedef int ioctl_fcn_t(dev_t, u_long, caddr_t, int, proc *);
struct ipf_pktopts {u_int32_t ippo_flags;ifnet_t ippo_mcast_ifnet;int ippo_mcast_loop;u_int8_t ippo_mcast_ttl;};
struct kev_in_data {net_event_data link_data;in_addr ia_addr;u_int32_t ia_net;u_int32_t ia_netmask;u_int32_t ia_subnet;u_int32_t ia_subnetmask;in_addr ia_netbroadcast;in_addr ia_dstaddr;};
struct mach_header {uint32_t magic;cpu_type_t cputype;cpu_subtype_t cpusubtype;uint32_t filetype;uint32_t ncmds;uint32_t sizeofcmds;uint32_t flags;};
struct IOFWSyncer { OSObject cppsuper0;IOSimpleLock *guardLock;char threadMustStop;IOReturn fResult;};
struct ipf_filter {void *cookie; char *name;ipf_input_func ipf_input;ipf_output_func ipf_output;ipf_detach_func ipf_detach;};
struct __attribute__((packed)) nd_opt_mtu {u_int8_t nd_opt_mtu_type;u_int8_t nd_opt_mtu_len;u_int16_t nd_opt_mtu_reserved;u_int32_t nd_opt_mtu_mtu;};
struct ucontext64 {int uc_onstack;__darwin_sigset_t uc_sigmask;sigaltstack uc_stack;ucontext64 *uc_link;__darwin_size_t uc_mcsize;mcontext64 *uc_mcontext64;};
struct __siginfo {int si_signo;int si_errno;int si_code;pid_t si_pid;uid_t si_uid;int si_status;void *si_addr;sigval si_value;int si_band;unsigned int __pad[7];};
struct disk_blk0 {UInt8 bootcode[446];fdisk_part parts[4];UInt16 signature;};
struct __attribute__((packed)) icmp6_hdr {u_int8_t icmp6_type;u_int8_t icmp6_code;u_int16_t icmp6_cksum;icmp6_hdr___D19D92B5F4F43A148CE7ABC3DA9CAAC9 icmp6_dataun;};
union idt_entry {trap_gate_t trap_gate;intr_gate_t intr_gate;task_gate_t task_gate;};
struct kauth_ace {guid_t ace_applicable;u_int32_t ace_flags;kauth_ace_rights_t ace_rights;};
struct sadb_sens {u_int16_t sadb_sens_len;u_int16_t sadb_sens_exttype;u_int32_t sadb_sens_dpd;u_int8_t sadb_sens_sens_level;u_int8_t sadb_sens_sens_len;u_int8_t sadb_sens_integ_level;u_int8_t sadb_sens_integ_len;u_int32_t sadb_sens_reserved;};
struct attrlist {u_short bitmapcount;u_int16_t reserved;attrgroup_t commonattr;attrgroup_t volattr;attrgroup_t dirattr;attrgroup_t fileattr;attrgroup_t forkattr;};
struct bpf_insn {u_short code;u_char jt;u_char jf;bpf_u_int32 k;};
struct direntry {__uint64_t d_ino;__uint64_t d_seekoff;__uint16_t d_reclen;__uint16_t d_namlen;__uint8_t d_type;char d_name[1024];};
struct fat_arch {cpu_type_t cputype;cpu_subtype_t cpusubtype;uint32_t offset;uint32_t size;uint32_t align;};
struct __attribute__((packed)) ip6_frag {u_int8_t ip6f_nxt;u_int8_t ip6f_reserved;u_int16_t ip6f_offlg;u_int32_t ip6f_ident;};
struct sadb_msg {u_int8_t sadb_msg_version;u_int8_t sadb_msg_type;u_int8_t sadb_msg_errno;u_int8_t sadb_msg_satype;u_int16_t sadb_msg_len;u_int16_t sadb_msg_reserved;u_int32_t sadb_msg_seq;u_int32_t sadb_msg_pid;};
struct ucontext {int uc_onstack;__darwin_sigset_t uc_sigmask;sigaltstack uc_stack;ucontext *uc_link;__darwin_size_t uc_mcsize;mcontext32 *uc_mcontext;};
struct vfsidctl {int vc_vers;fsid_t vc_fsid;void *vc_ptr;size_t vc_len;u_int32_t vc_spare[12];};
struct HIDCaps {HIDUsage usage;HIDUsage usagePage;IOByteCount inputReportByteLength;IOByteCount outputReportByteLength;IOByteCount featureReportByteLength;UInt32 numberCollectionNodes;UInt32 numberInputButtonCaps;UInt32 numberInputValueCaps;UInt32 numberOutputButtonCaps;UInt32 numberOutputValueCaps;UInt32 numberFeatureButtonCaps;UInt32 numberFeatureValueCaps;};
struct IOFWDCL { OSObject cppsuper0;IOFWDCL *fBranch;IOFWDCL__Callback fCallback;UInt32 *fTimeStampPtr;UInt32 fRangeCount;IOVirtualRange *fRanges;OSSet *fUpdateList;OSIterator *fUpdateIterator;UInt32 *fUserStatusPtr;void *fRefcon;UInt32 fFlags;IOFWDCL__InternalData *fLoLevel;};
struct VPBlock {UInt32 vpBaseOffset;SInt16 vpRowBytes;Rect vpBounds;SInt16 vpVersion;SInt16 vpPackType;UInt32 vpPackSize;UInt32 vpHRes;UInt32 vpVRes;SInt16 vpPixelType;SInt16 vpPixelSize;SInt16 vpCmpCount;SInt16 vpCmpSize;UInt32 vpPlaneBytes;};
struct bpf_hdr {timeval bh_tstamp;bpf_u_int32 bh_caplen;bpf_u_int32 bh_datalen;u_short bh_hdrlen;};
struct gpt_ent {uuid_t ent_type;uuid_t ent_uuid;uint64_t ent_lba_start;uint64_t ent_lba_end;uint64_t ent_attr;uint16_t ent_name[36];};
struct if_data {u_char ifi_type;u_char ifi_typelen;u_char ifi_physical;u_char ifi_addrlen;u_char ifi_hdrlen;u_char ifi_recvquota;u_char ifi_xmitquota;u_char ifi_unused1;u_int32_t ifi_mtu;u_int32_t ifi_metric;u_int32_t ifi_baudrate;u_int32_t ifi_ipackets;u_int32_t ifi_ierrors;u_int32_t ifi_opackets;u_int32_t ifi_oerrors;u_int32_t ifi_collisions;u_int32_t ifi_ibytes;u_int32_t ifi_obytes;u_int32_t ifi_imcasts;u_int32_t ifi_omcasts;u_int32_t ifi_iqdrops;u_int32_t ifi_noproto;u_int32_t ifi_recvtiming;u_int32_t ifi_xmittiming;timeval ifi_lastchange;u_int32_t ifi_unused2;u_int32_t ifi_hwassist;u_int32_t ifi_reserved1;u_int32_t ifi_reserved2;};
struct sadb_sa {u_int16_t sadb_sa_len;u_int16_t sadb_sa_exttype;u_int32_t sadb_sa_spi;u_int8_t sadb_sa_replay;u_int8_t sadb_sa_state;u_int8_t sadb_sa_auth;u_int8_t sadb_sa_encrypt;u_int32_t sadb_sa_flags;};
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;cc_t c_cc[20];speed_t c_ispeed;speed_t c_ospeed;};
struct CDATIP {UInt16 dataLength;UInt8 reserved[2];unsigned char referenceSpeed : 3;unsigned char reserved3 : 1;unsigned char indicativeTargetWritingPower : 3;unsigned char reserved2 : 1;unsigned char reserved5 : 6;unsigned char unrestrictedUse : 1;unsigned char reserved4 : 1;unsigned char a3Valid : 1;unsigned char a2Valid : 1;unsigned char a1Valid : 1;unsigned char discSubType : 3;unsigned char discType : 1;unsigned char reserved6 : 1;UInt8 reserved7;CDMSF startTimeOfLeadIn;UInt8 reserved8;CDMSF lastPossibleStartTimeOfLeadOut;UInt8 reserved9;UInt8 a1[3];UInt8 reserved10;UInt8 a2[3];UInt8 reserved11;UInt8 a3[3];UInt8 reserved12;};
struct dirent {ino_t d_ino;__uint16_t d_reclen;__uint8_t d_type;__uint8_t d_namlen;char d_name[256];};
struct igmpv3 {u_char igmp_type;u_char igmp_code;u_short igmp_cksum;in_addr igmp_group;u_char igmp_misc;u_char igmp_qqi;u_short igmp_numsrc;};
struct ipovly {u_char ih_x1[9];u_char ih_pr;u_short ih_len;in_addr ih_src;in_addr ih_dst;};
struct xucred {u_int cr_version;uid_t cr_uid;short cr_ngroups;gid_t cr_groups[16];};
struct newah {u_int8_t ah_nxt;u_int8_t ah_len;u_int16_t ah_reserve;u_int32_t ah_spi;u_int32_t ah_seq;};
struct dpme {UInt16 dpme_signature;UInt16 dpme_reserved_1;UInt32 dpme_map_entries;UInt32 dpme_pblock_start;UInt32 dpme_pblocks;char dpme_name[32];char dpme_type[32];UInt32 dpme_lblock_start;UInt32 dpme_lblocks;UInt32 dpme_flags;UInt32 dpme_boot_block;UInt32 dpme_boot_bytes;UInt32 dpme_load_addr;UInt32 dpme_load_addr_2;UInt32 dpme_goto_addr;UInt32 dpme_goto_addr_2;UInt32 dpme_checksum;UInt8 dpme_process_id[16];UInt32 dpme_reserved_2[32];UInt32 dpme_reserved_3[62];};
struct igmp {u_char igmp_type;u_char igmp_code;u_short igmp_cksum;in_addr igmp_group;};
struct ah {u_int8_t ah_nxt;u_int8_t ah_len;u_int16_t ah_reserve;u_int32_t ah_spi;};
struct ip {unsigned int ip_hl : 4;unsigned int ip_v : 4;u_char ip_tos;u_short ip_len;u_short ip_id;u_short ip_off;u_char ip_ttl;u_char ip_p;u_short ip_sum;in_addr ip_src;in_addr ip_dst;};
struct IOSCSIPrimaryCommandsDevice__IOSCSIPrimaryCommandsDeviceExpansionData {IONotifier *fKeySwitchNotifier;UInt8 fANSIVersion;UInt32 fReadTimeoutDuration;UInt32 fWriteTimeoutDuration;char fCMDQUE;SCSITaggedTaskIdentifier fTaskID;IOSimpleLock *fTaskIDLock;UInt32 fRetryCount;UInt32 fNumCommandsExecuting;int fMaxPollRetries;int fPollDebounceRetriesLeft;};
struct BluetoothHCIEnhancedAcceptSynchronousConnectionRequestParams {uint32_t transmitBandwidth;uint32_t receiveBandwidth;uint64_t transmitCodingFormat;uint64_t receiveCodingFormat;uint16_t transmitCodecFrameSize;uint16_t receiveCodecFrameSize;uint32_t inputBandwidth;uint32_t outputBandwidth;uint64_t inputCodingFormat;uint64_t outputCodingFormat;uint16_t inputCodedDataSize;uint16_t outputCodedDataSize;uint8_t inputPCMDataFormat;uint8_t outputPCMDataFormat;uint8_t inputPCMSamplePayloadMSBPosition;uint8_t outputPCMSamplePayloadMSBPosition;uint8_t inputDataPath;uint8_t outputDataPath;uint8_t inputTransportUnitSize;uint8_t outputTransportUnitSize;uint16_t maxLatency;uint16_t packetType;uint8_t retransmissionEffort;};
struct BluetoothHCIEnhancedSetupSynchronousConnectionParams {uint32_t transmitBandwidth;uint32_t receiveBandwidth;uint64_t transmitCodingFormat;uint64_t receiveCodingFormat;uint16_t transmitCodecFrameSize;uint16_t receiveCodecFrameSize;uint32_t inputBandwidth;uint32_t outputBandwidth;uint64_t inputCodingFormat;uint64_t outputCodingFormat;uint16_t inputCodedDataSize;uint16_t outputCodedDataSize;uint8_t inputPCMDataFormat;uint8_t outputPCMDataFormat;uint8_t inputPCMSamplePayloadMSBPosition;uint8_t outputPCMSamplePayloadMSBPosition;uint8_t inputDataPath;uint8_t outputDataPath;uint8_t inputTransportUnitSize;uint8_t outputTransportUnitSize;uint16_t maxLatency;uint16_t packetType;uint8_t retransmissionEffort;};
union GTraceEntry__Args___6D5E54D36E8AB60CED29166678469FE7 {uint64_t fU64s[4];uint32_t fU32s[8];uint16_t fU16s[16];uint8_t fU8s[32];char fStr[32];};
union ccdigest_state___67175509AEF0CB0D0935ED80FD36639C {uint8_t u8;uint32_t u32;uint64_t u64;cc_unit ccn;};
union ccdigest_ctx___67175509AEF0CB0D0935ED80FD36639C {uint8_t u8;uint32_t u32;uint64_t u64;cc_unit ccn;};
struct NXEventData___7B052CBECF2D89E41D9044FA68C50E97 {UInt8 subx;UInt8 suby;SInt16 eventNum;SInt32 click;UInt8 pressure;UInt8 buttonNumber;UInt8 subType;UInt8 reserved2;SInt32 reserved3;_16C37BE43F73B60D5456A4D0F8F2ABA5 tablet;};
struct NXEventData___7E4F3FF8E98504DDC830440CAFA598B6 {SInt32 x;SInt32 y;SInt32 z;UInt16 buttons;UInt16 pressure;_108B66EFEC9DC1D8651631AAAC2F520E tilt;UInt16 rotation;SInt16 tangentialPressure;UInt16 deviceID;SInt16 vendor1;SInt16 vendor2;SInt16 vendor3;SInt32 reserved[4];};
struct NXEventData___BF84A4FF1E8709A6CF398BBCF8859B4C {UInt16 origCharSet;SInt16 repeat;UInt16 charSet;UInt16 charCode;UInt16 keyCode;UInt16 origCharCode;SInt32 reserved1;UInt32 keyboardType;SInt32 reserved2;SInt32 reserved3;SInt32 reserved4;SInt32 reserved5[4];};
struct IOAudioTimeIntervalFilterFIR_vtbl_layout; 
typedef void (*IOFireWireAVCSubunitPlugHandlerCallback)( AVCSubunitInfo *, IOFWAVCSubunitPlugMessages, IOFWAVCPlugTypes, UInt32, UInt32, UInt32, UInt16);
struct IOAudioTimeIntervalFilter_vtbl_layout; 
struct IOMbufNaturalMemoryCursor_vtbl_layout; 
struct IOUSBHostDevice__tDescriptorSelectors {uint8_t index;uint16_t languageID;tDeviceRequestType requestType;tDeviceRequestRecipient requestRecipient;};
struct IOMbufLittleMemoryCursor_vtbl_layout; 
struct IOFireWireLocalNodeAux_vtbl_layout; 
struct IOLocalConfigDirectory_vtbl_layout; 
struct IOAudioTimeIntervalFilterFIR_vtbl; 
struct IOMbufBigMemoryCursor_vtbl_layout; 
struct IONaturalMemoryCursor_vtbl_layout; 
struct IOLittleMemoryCursor_vtbl_layout; 
struct IOFireWireDeviceAux_vtbl_layout; 
struct IOKernelDebugger__ExpansionData {thread_call_t activationChangeThreadCall;UInt32 stateVars[2];IONotifier *interfaceNotifier;IODebuggerLinkStatusHandler linkStatusHandler;IODebuggerSetModeHandler setModeHandler;};
struct IOAudioTimeIntervalFilter_vtbl; 
struct IOMbufMemoryCursor_vtbl_layout; 
struct IOMbufNaturalMemoryCursor_vtbl; 
struct IOBigMemoryCursor_vtbl_layout; 
struct IOConfigDirectory_vtbl_layout; 
struct IOFireWireUnitAux_vtbl_layout; 
struct IOMbufLittleMemoryCursor_vtbl; 
struct IOSharedDataQueue_vtbl_layout; 
struct IOFWIsochChannel_vtbl_layout; 
struct IOFireWireNubAux_vtbl_layout; 
struct IOFireWireLocalNodeAux_vtbl; 
struct IOLocalConfigDirectory_vtbl; 
struct SCSICmd_INQUIRY_PageB0_Data {UInt8 PERIPHERAL_DEVICE_TYPE;UInt8 PAGE_CODE;UInt16 PAGE_LENGTH;UInt8 WSNZ;UInt8 MAXIMUM_COMPARE_AND_WRITE_LENGTH;UInt16 OPTIMAL_TRANSFER_LENGTH_GRANULARITY;UInt32 MAXIMUM_TRANSFER_LENGTH;UInt32 OPTIMAL_TRANSFER_LENGTH;UInt32 MAXIMUM_PREFETCH_LENGTH;UInt32 MAXIMUM_UNMAP_LBA_COUNT;UInt32 MAXIMUM_UNMAP_BLOCK_DESCRIPTOR_COUNT;UInt32 OPTIMAL_UNMAP_GRANULARITY;UInt32 UNMAP_GRANULARITY_ALIGNMENT;UInt64 MAXIMUM_WRITE_SAME_LENGTH;UInt32 MAXIMUM_ATOMIC_TRANSFER_LENGTH;UInt32 ATOMIC_ALIGNMENT;UInt32 ATOMIC_TRANSFER_LENGTH_GRANULARITY;UInt32 MAXIMUM_ATOMIC_TRANSFER_LENGTH_WITH_ATOMIC_BOUNDARY;UInt32 MAXIMUM_ATOMIC_BOUNDARY_SIZE;};
struct SCSICmd_INQUIRY_PageC1_Data {SCSICmd_INQUIRY_PAGECx_Header fHeader;UInt8 fTdmPowerRequirementsPageVersion;UInt8 fReserved1;UInt16 fReserved2;UInt32 fPowerRequired;};
typedef errno_t (*img4_environment_get_data_t)( img4_environment_t *, uint8_t *, uint32_t *,  void *);
struct IOMbufBigMemoryCursor_vtbl; 
struct IOMemoryCursor_vtbl_layout; 
struct IONaturalMemoryCursor_vtbl; 
struct IOAudioTimeIntervalFilter { OSObject cppsuper0;IOAudioTimeIntervalFilter__ExpansionData *reserved;uint32_t mExpectedInterval;uint32_t mMultiIntervalCount;uint64_t *mIntervalTimeHistory;int mIntervalTimeHistoryPointer;uint64_t mFilterCount;IOLock *timeIntervalLock;};
struct IOExtendedLBA_vtbl_layout; 
struct IOFBCursorControlCallouts {IOReturn (*setCursorImage)(void *, void *, IOHardwareCursorDescriptor *, IOFBCursorRef);IOReturn (*setCursorState)(void *, void *, SInt32, SInt32, char);UInt32 reserved[30];};
struct IOFWIsochPort_vtbl_layout; 
struct IOLittleMemoryCursor_vtbl; 
struct IOOutputQueue_vtbl_layout; 
struct vnop_getattrlistbulk_args {vnodeop_desc *a_desc;vnode_t a_vp;attrlist *a_alist;vnode_attr *a_vap;uio *a_uio;void *a_private;uint64_t a_options;int32_t *a_eofflag;int32_t *a_actualcount;vfs_context_t a_context;};
struct IODisplayModeInformation {UInt32 nominalWidth;UInt32 nominalHeight;IOFixed1616 refreshRate;IOIndex maxDepthIndex;UInt32 flags;UInt16 imageWidth;UInt16 imageHeight;UInt32 reserved[3];};
struct IOFireWireDeviceAux_vtbl; 
struct __attribute__((packed)) thread_delta_snapshot_v2 {uint64_t tds_thread_id;uint64_t tds_voucher_identifier;uint64_t tds_ss_flags;uint64_t tds_last_made_runnable_time;uint32_t tds_state;uint32_t tds_sched_flags;int16_t tds_base_priority;int16_t tds_sched_priority;uint8_t tds_eqos;uint8_t tds_rqos;uint8_t tds_rqos_override;uint8_t tds_io_tier;};
struct __attribute__((packed)) thread_delta_snapshot_v3 {uint64_t tds_thread_id;uint64_t tds_voucher_identifier;uint64_t tds_ss_flags;uint64_t tds_last_made_runnable_time;uint32_t tds_state;uint32_t tds_sched_flags;int16_t tds_base_priority;int16_t tds_sched_priority;uint8_t tds_eqos;uint8_t tds_rqos;uint8_t tds_rqos_override;uint8_t tds_io_tier;uint64_t tds_requested_policy;uint64_t tds_effective_policy;};
struct DCLSetTagSyncBitsStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;UInt16 tagBits;UInt16 syncBits;};
struct DCLTransferBufferStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;void *buffer;UInt32 size;UInt16 packetSize;UInt16 reserved;UInt32 bufferOffset;};
struct IOGraphicsEngineContext {OSSpinLock contextLock;IOOptionBits state;void *owner;UInt32 version;IOByteCount structSize;UInt32 reserved[8];};
struct IOMbufMemoryCursor_vtbl; 
struct VDDisplayConnectInfoRec {UInt16 csDisplayType;UInt8 csConnectTaggedType;UInt8 csConnectTaggedData;UInt32 csConnectFlags;uintptr_t csDisplayComponent;uintptr_t csConnectReserved;};
struct VDDisplayTimingRangeRec {UInt32 csRangeSize;UInt32 csRangeType;UInt32 csRangeVersion;UInt32 csRangeReserved;UInt32 csRangeBlockIndex;UInt32 csRangeGroup;UInt32 csRangeBlockCount;UInt32 csRangeFlags;UInt64 csMinPixelClock;UInt64 csMaxPixelClock;UInt32 csMaxPixelError;UInt32 csTimingRangeSyncFlags;UInt32 csTimingRangeSignalLevels;UInt32 csTimingRangeSupportedSignalConfigs;UInt32 csMinFrameRate;UInt32 csMaxFrameRate;UInt32 csMinLineRate;UInt32 csMaxLineRate;UInt32 csMaxHorizontalTotal;UInt32 csMaxVerticalTotal;UInt32 csMaxTotalReserved1;UInt32 csMaxTotalReserved2;UInt8 csCharSizeHorizontalActive;UInt8 csCharSizeHorizontalBlanking;UInt8 csCharSizeHorizontalSyncOffset;UInt8 csCharSizeHorizontalSyncPulse;UInt8 csCharSizeVerticalActive;UInt8 csCharSizeVerticalBlanking;UInt8 csCharSizeVerticalSyncOffset;UInt8 csCharSizeVerticalSyncPulse;UInt8 csCharSizeHorizontalBorderLeft;UInt8 csCharSizeHorizontalBorderRight;UInt8 csCharSizeVerticalBorderTop;UInt8 csCharSizeVerticalBorderBottom;UInt8 csCharSizeHorizontalTotal;UInt8 csCharSizeVerticalTotal;UInt16 csCharSizeReserved1;UInt32 csMinHorizontalActiveClocks;UInt32 csMaxHorizontalActiveClocks;UInt32 csMinHorizontalBlankingClocks;UInt32 csMaxHorizontalBlankingClocks;UInt32 csMinHorizontalSyncOffsetClocks;UInt32 csMaxHorizontalSyncOffsetClocks;UInt32 csMinHorizontalPulseWidthClocks;UInt32 csMaxHorizontalPulseWidthClocks;UInt32 csMinVerticalActiveClocks;UInt32 csMaxVerticalActiveClocks;UInt32 csMinVerticalBlankingClocks;UInt32 csMaxVerticalBlankingClocks;UInt32 csMinVerticalSyncOffsetClocks;UInt32 csMaxVerticalSyncOffsetClocks;UInt32 csMinVerticalPulseWidthClocks;UInt32 csMaxVerticalPulseWidthClocks;UInt32 csMinHorizontalBorderLeft;UInt32 csMaxHorizontalBorderLeft;UInt32 csMinHorizontalBorderRight;UInt32 csMaxHorizontalBorderRight;UInt32 csMinVerticalBorderTop;UInt32 csMaxVerticalBorderTop;UInt32 csMinVerticalBorderBottom;UInt32 csMaxVerticalBorderBottom;UInt32 csMaxNumLinks;UInt32 csMinLink0PixelClock;UInt32 csMaxLink0PixelClock;UInt32 csMinLink1PixelClock;UInt32 csMaxLink1PixelClock;UInt32 csReserved6;UInt32 csReserved7;UInt32 csReserved8;};
struct IOBigMemoryCursor_vtbl; 
struct IOConfigDirectory_vtbl; 
struct IOFireWireUnitAux_vtbl; 
struct IOSharedDataQueue_vtbl; 
struct dyld_kernel_image_info {uuid_t uuid;fsobj_id_t fsobjid;fsid_t fsid;uint64_t load_addr;};
struct IOFWIsochChannel_vtbl; 
struct IOFireWireNubAux_vtbl; 
struct IODisplayTimingRange {UInt32 __reservedA[2];UInt32 version;UInt32 __reservedB[5];UInt64 minPixelClock;UInt64 maxPixelClock;UInt32 maxPixelError;UInt32 supportedSyncFlags;UInt32 supportedSignalLevels;UInt32 supportedSignalConfigs;UInt32 minFrameRate;UInt32 maxFrameRate;UInt32 minLineRate;UInt32 maxLineRate;UInt32 maxHorizontalTotal;UInt32 maxVerticalTotal;UInt32 __reservedD[2];UInt8 charSizeHorizontalActive;UInt8 charSizeHorizontalBlanking;UInt8 charSizeHorizontalSyncOffset;UInt8 charSizeHorizontalSyncPulse;UInt8 charSizeVerticalActive;UInt8 charSizeVerticalBlanking;UInt8 charSizeVerticalSyncOffset;UInt8 charSizeVerticalSyncPulse;UInt8 charSizeHorizontalBorderLeft;UInt8 charSizeHorizontalBorderRight;UInt8 charSizeVerticalBorderTop;UInt8 charSizeVerticalBorderBottom;UInt8 charSizeHorizontalTotal;UInt8 charSizeVerticalTotal;UInt16 __reservedE;UInt32 minHorizontalActiveClocks;UInt32 maxHorizontalActiveClocks;UInt32 minHorizontalBlankingClocks;UInt32 maxHorizontalBlankingClocks;UInt32 minHorizontalSyncOffsetClocks;UInt32 maxHorizontalSyncOffsetClocks;UInt32 minHorizontalPulseWidthClocks;UInt32 maxHorizontalPulseWidthClocks;UInt32 minVerticalActiveClocks;UInt32 maxVerticalActiveClocks;UInt32 minVerticalBlankingClocks;UInt32 maxVerticalBlankingClocks;UInt32 minVerticalSyncOffsetClocks;UInt32 maxVerticalSyncOffsetClocks;UInt32 minVerticalPulseWidthClocks;UInt32 maxVerticalPulseWidthClocks;UInt32 minHorizontalBorderLeft;UInt32 maxHorizontalBorderLeft;UInt32 minHorizontalBorderRight;UInt32 maxHorizontalBorderRight;UInt32 minVerticalBorderTop;UInt32 maxVerticalBorderTop;UInt32 minVerticalBorderBottom;UInt32 maxVerticalBorderBottom;UInt32 maxNumLinks;UInt32 minLink0PixelClock;UInt32 maxLink0PixelClock;UInt32 minLink1PixelClock;UInt32 maxLink1PixelClock;UInt16 supportedPixelEncoding;UInt16 supportedBitsPerColorComponent;UInt16 supportedColorimetryModes;UInt16 supportedDynamicRangeModes;UInt32 __reservedF[1];};
typedef errno_t (*ifnet_add_proto_func)(ifnet_t, protocol_family_t,  ifnet_demux_desc *, u_int32_t);
typedef errno_t (*proto_media_input_v2)(ifnet_t, protocol_family_t, mbuf_t);
struct IOFireWireDeviceAux { IOFireWireNubAux cppsuper0;UInt32 fUnitCount;IOFWSpeed fMaxSpeed;OSSet *fOpenUnitSet;AbsoluteTime fResumeTime;IOFireWireDeviceAux__ExpansionData *reserved;};
struct IOMemoryCursor_vtbl; 
struct vnop_listxattr_args {vnodeop_desc *a_desc;vnode_t a_vp;uio_t a_uio;size_t *a_size;int a_options;vfs_context_t a_context;};
struct IOBasicOutputQueue { IOOutputQueue cppsuper0;OSObject *_target;IOOutputAction _action;UInt32 _priorities;IOOutputQueueStats *_stats;IONetworkData *_statsData;IOLock *_queueLock;IOMbufQueue *_inQueues;IOMbufQueue *_primaryQueues;IOMbufQueue *_shadowQueues;char _waitDequeueDone;UInt32 _state;UInt32 _serviceCount;};
struct IOExtendedLBA_vtbl; 
struct IOFWIsochPort_vtbl; 
struct IOOutputQueue_vtbl; 
struct VDCommunicationRec {SInt32 csBusID;UInt32 csCommFlags;UInt32 csMinReplyDelay;UInt32 csReserved2;UInt32 csSendAddress;UInt32 csSendType;LogicalAddress csSendBuffer;ByteCount csSendSize;UInt32 csReplyAddress;UInt32 csReplyType;LogicalAddress csReplyBuffer;ByteCount csReplySize;UInt32 csReserved3;UInt32 csReserved4;UInt32 csReserved5;UInt32 csReserved6;};
struct _NXTabletPointData {SInt32 x;SInt32 y;SInt32 z;UInt16 buttons;UInt16 pressure;_NXTabletPointData___108B66EFEC9DC1D8651631AAAC2F520E tilt;UInt16 rotation;SInt16 tangentialPressure;UInt16 deviceID;SInt16 vendor1;SInt16 vendor2;SInt16 vendor3;};
struct __attribute__((packed)) icmp6_router_renum {icmp6_hdr rr_hdr;u_int8_t rr_segnum;u_int8_t rr_flags;u_int16_t rr_maxdelay;u_int32_t rr_reserved;};
typedef errno_t (*proto_media_preout)(ifnet_t, protocol_family_t, mbuf_t *,  sockaddr *, void *, char *, char *);
struct task_basic_info_32 {integer_t suspend_count;natural_t virtual_size;natural_t resident_size;time_value_t user_time;time_value_t system_time;policy_t policy;};
struct __attribute__((packed)) thread_snapshot_v2 {uint64_t ths_thread_id;uint64_t ths_wait_event;uint64_t ths_continuation;uint64_t ths_total_syscalls;uint64_t ths_voucher_identifier;uint64_t ths_dqserialnum;uint64_t ths_user_time;uint64_t ths_sys_time;uint64_t ths_ss_flags;uint64_t ths_last_run_time;uint64_t ths_last_made_runnable_time;uint32_t ths_state;uint32_t ths_sched_flags;int16_t ths_base_priority;int16_t ths_sched_priority;uint8_t ths_eqos;uint8_t ths_rqos;uint8_t ths_rqos_override;uint8_t ths_io_tier;};
struct __attribute__((packed)) thread_snapshot_v3 {uint64_t ths_thread_id;uint64_t ths_wait_event;uint64_t ths_continuation;uint64_t ths_total_syscalls;uint64_t ths_voucher_identifier;uint64_t ths_dqserialnum;uint64_t ths_user_time;uint64_t ths_sys_time;uint64_t ths_ss_flags;uint64_t ths_last_run_time;uint64_t ths_last_made_runnable_time;uint32_t ths_state;uint32_t ths_sched_flags;int16_t ths_base_priority;int16_t ths_sched_priority;uint8_t ths_eqos;uint8_t ths_rqos;uint8_t ths_rqos_override;uint8_t ths_io_tier;uint64_t ths_thread_t;};
struct __attribute__((packed)) thread_snapshot_v4 {uint64_t ths_thread_id;uint64_t ths_wait_event;uint64_t ths_continuation;uint64_t ths_total_syscalls;uint64_t ths_voucher_identifier;uint64_t ths_dqserialnum;uint64_t ths_user_time;uint64_t ths_sys_time;uint64_t ths_ss_flags;uint64_t ths_last_run_time;uint64_t ths_last_made_runnable_time;uint32_t ths_state;uint32_t ths_sched_flags;int16_t ths_base_priority;int16_t ths_sched_priority;uint8_t ths_eqos;uint8_t ths_rqos;uint8_t ths_rqos_override;uint8_t ths_io_tier;uint64_t ths_thread_t;uint64_t ths_requested_policy;uint64_t ths_effective_policy;};
struct vnop_allocate_args {vnodeop_desc *a_desc;vnode_t a_vp;off_t a_length;u_int32_t a_flags;off_t *a_bytesallocated;off_t a_offset;vfs_context_t a_context;};
struct vnop_getxattr_args {vnodeop_desc *a_desc;vnode_t a_vp; char *a_name;uio_t a_uio;size_t *a_size;int a_options;vfs_context_t a_context;};
struct IOFireWireSBP2ORB { IOCommand cppsuper0;IOFireWireSBP2ORB__ExpansionData *reserved;IOFireWireSBP2Login *fLogin;IOFireWireSBP2LUN *fLUN;IOFireWireUnit *fUnit;IOFireWireController *fControl;IODMACommand *fDMACommand;void *fUnused2;UInt32 fCommandFlags;UInt32 fMaxPayloadSize;UInt32 fTimeoutDuration;UInt32 fGeneration;UInt64 fRefCon;IOMemoryDescriptor *fORBDescriptor;IOFireWireSBP2ORB__FWSBP2ORB *fORBBuffer;FWAddress fORBPseudoAddress;IOFWAddressSpace *fORBPseudoAddressSpace;IOFWAddressSpace *fORBPhysicalAddressSpace;FWAddress fORBPhysicalAddress;UInt32 fPageTableSize;IOBufferMemoryDescriptor *fPageTableDescriptor;IOFWAddressSpace *fPageTablePhysicalAddressSpace;FWAddress fPageTablePhysicalAddress;UInt32 fPageTablePhysicalLength;IOFWAddressSpace *fPageTablePseudoAddressSpace;FWAddress fPageTablePseudoAddress;IOFWAddressSpace *fBufferAddressSpace;char fBufferAddressSpaceAllocated;IOMemoryDescriptor *fBufferDescriptor;IOFWDelayCommand *fTimeoutCommand;char fTimeoutTimerSet;char fInProgress;char fIsAppended;UInt32 fFetchAgentWriteRetries;UInt32 fPTECount;UInt32 fFetchAgentWriteRetryInterval;UInt32 fConstraintOptions;};
struct IOUSBHostIOSource { OSObject cppsuper0;AppleUSBHostController *_controller;IOUSBHostDevice *_device;IOWorkLoop *_workloop;IOCommandGate *_commandGate;IOTimerEventSource *_timer;AppleUSBRequestPool *_requestPool;IOUSBHostIOSource__tState _state;UInt32 _outstandingIO;UInt32 _completionRunning;IOUSBHostIOSource__tExpansionData *_expansionData;uint32_t _debugLoggingMask;};
typedef errno_t (*ifnet_set_bpf_tap)(ifnet_t, bpf_tap_mode, bpf_packet_func);
struct proc_persona_info {uint64_t unique_pid;int32_t pid;uint32_t flags;uint32_t pidversion;uint32_t persona_id;uint32_t uid;uint32_t gid;uint8_t macho_uuid[16];};
typedef errno_t (*proto_media_input)(ifnet_t, protocol_family_t, mbuf_t, char *);
struct splitKextLinkInfo {u_char *kextExecutable;size_t kextSize;u_char *linkedKext;size_t linkedKextSize;uint64_t vmaddr_TEXT;uint64_t vmaddr_TEXT_EXEC;uint64_t vmaddr_DATA;uint64_t vmaddr_DATA_CONST;uint64_t vmaddr_LINKEDIT;uint64_t vmaddr_LLVM_COV;uint32_t kaslr_offsets_count;uint32_t *kaslr_offsets;};
struct __attribute__((packed)) __attribute__((aligned(2))) BTNodeDescriptor {u_int32_t fLink;u_int32_t bLink;int8_t kind;u_int8_t height;u_int16_t numRecords;u_int16_t reserved;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogThread {int16_t recordType;int32_t reserved[2];u_int32_t parentID;u_int8_t nodeName[32];};
typedef errno_t (*ifnet_demux_func)(ifnet_t, mbuf_t, char *, protocol_family_t *);
typedef errno_t (*sf_data_out_func)(void *, socket_t,  sockaddr *, mbuf_t *, mbuf_t *, sflt_data_flag_t);
struct IOEthernetStats {IODot3StatsEntry dot3StatsEntry;IODot3CollEntry dot3CollEntry;IODot3RxExtraEntry dot3RxExtraEntry;IODot3TxExtraEntry dot3TxExtraEntry;};
struct IONetworkMedium { OSObject cppsuper0;IOMediumType _type;UInt32 _flags;UInt64 _speed;UInt32 _index; OSSymbol *_name;IONetworkMedium__ExpansionData *_reserved;};
typedef errno_t (*ctl_getopt_func)(kern_ctl_ref, u_int32_t, void *, int, void *, size_t *);
typedef errno_t (*ctl_setopt_func)(kern_ctl_ref, u_int32_t, void *, int, void *, size_t);
typedef errno_t (*iff_output_func)(void *, ifnet_t, protocol_family_t, mbuf_t *);
struct kmod_info_64_v1 {uint64_t next_addr;int32_t info_version;uint32_t id;uint8_t name[64];uint8_t version[64];int32_t reference_count;uint64_t reference_list_addr;uint64_t address;uint64_t size;uint64_t hdr_size;uint64_t start_addr;uint64_t stop_addr;};
typedef errno_t (*sf_data_in_func)(void *, socket_t,  sockaddr *, mbuf_t *, mbuf_t *, sflt_data_flag_t);
struct task_basic_info {integer_t suspend_count;vm_size_t virtual_size;vm_size_t resident_size;time_value_t user_time;time_value_t system_time;policy_t policy;};
struct user32_vfsidctl {int vc_vers;fsid_t vc_fsid;user32_addr_t vc_ptr;user32_size_t vc_len;u_int32_t vc_spare[12];};
struct vnop_ioctl_args {vnodeop_desc *a_desc;vnode_t a_vp;u_long a_command;caddr_t a_data;int a_fflag;vfs_context_t a_context;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusBSDInfo {u_int32_t ownerID;u_int32_t groupID;u_int8_t adminFlags;u_int8_t ownerFlags;u_int16_t fileMode;HFSPlusBSDInfo___27AA93549C704A2FC0D1AB4BC35019DD special;};
struct IOATADevConfig { OSObject cppsuper0;atapiConfig _atapiIRQForPacket;UInt8 _ataPIOMode;UInt16 _ataPIOCycleTime;UInt8 _ataMultiDMAMode;UInt16 _ataMultiCycleTime;UInt8 _ataUltraDMAMode;IOATADevConfig__ExpansionData *reserved;};
struct ccpoly1305_ctx {uint32_t r0;uint32_t r1;uint32_t r2;uint32_t r3;uint32_t r4;uint32_t s1;uint32_t s2;uint32_t s3;uint32_t s4;uint32_t h0;uint32_t h1;uint32_t h2;uint32_t h3;uint32_t h4;uint8_t buf[16];size_t buf_used;uint8_t key[16];};
typedef errno_t (*iff_input_func)(void *, ifnet_t, protocol_family_t, mbuf_t *, char **);
struct __attribute__((packed)) micro_snapshot {uint32_t snapshot_magic;uint32_t ms_cpu;uint64_t ms_time;uint64_t ms_time_microsecs;uint8_t ms_flags;uint16_t ms_opaque_flags;};
struct vm_info_region {natural_t vir_start;natural_t vir_end;natural_t vir_object;natural_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
struct DCLJumpStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;DCLLabel *pJumpDCLLabel;};
typedef errno_t (*bpf_send_func)(ifnet_t, u_int32_t, mbuf_t);
typedef errno_t (*ctl_send_func)(kern_ctl_ref, u_int32_t, void *, mbuf_t, int);
struct fssearchblock {attrlist *returnattrs;void *returnbuffer;size_t returnbuffersize;u_long maxmatches;timeval timelimit;void *searchparams1;size_t sizeofsearchparams1;void *searchparams2;size_t sizeofsearchparams2;attrlist searchattrs;};
struct __attribute__((packed)) task_snapshot {uint32_t snapshot_magic;int32_t pid;uint64_t uniqueid;uint64_t user_time_in_terminated_threads;uint64_t system_time_in_terminated_threads;uint8_t shared_cache_identifier[16];uint64_t shared_cache_slide;uint32_t nloadinfos;int suspend_count;int task_size;int faults;int pageins;int cow_faults;uint32_t ss_flags;uint64_t p_start_sec;uint64_t p_start_usec;char p_comm[17];uint32_t was_throttled;uint32_t did_throttle;uint32_t latency_qos;uint64_t disk_reads_count;uint64_t disk_reads_size;uint64_t disk_writes_count;uint64_t disk_writes_size;uint64_t io_priority_count[4];uint64_t io_priority_size[4];uint64_t paging_count;uint64_t paging_size;uint64_t non_paging_count;uint64_t non_paging_size;uint64_t data_count;uint64_t data_size;uint64_t metadata_count;uint64_t metadata_size;uint32_t donating_pid_count;};
struct user_vfsidctl {int vc_vers;fsid_t vc_fsid;__attribute__((aligned(8))) user_addr_t vc_ptr;user_size_t vc_len;u_int32_t vc_spare[12];};
struct vnode_fsparam {mount *vnfs_mp;vtype vnfs_vtype; char *vnfs_str;vnode *vnfs_dvp;void *vnfs_fsnode;int (**vnfs_vops)(void *);int vnfs_markroot;int vnfs_marksystem;dev_t vnfs_rdev;off_t vnfs_filesize;componentname *vnfs_cnp;uint32_t vnfs_flags;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrFileInfo {u_int32_t fdType;u_int32_t fdCreator;u_int16_t fdFlags;FndrFileInfo___41A11852923CA7CF3D1788B49D991E5B fdLocation;int16_t opaque;};
struct IOATABusInfo { OSObject cppsuper0;UInt8 _PIOModes;UInt8 _MultiDMAModes;UInt8 _UltraDMAModes;char _ExtendedLBA;char _Overlapped;char _DMAQueued;ataSocketType _SocketType;UInt8 _numUnits;UInt16 _maxBlocksExtended;IOATABusInfo__ExpansionData *reserved;};
typedef errno_t (*bpf_tap_func)(ifnet_t, u_int32_t, bpf_tap_mode);
struct IOFWSendDCL { IOFWDCL cppsuper0;UInt32 *fUserHeaderPtr;UInt32 *fUserHeaderMaskPtr;IOFWDCL *fSkipBranchDCL;IOFWDCL__Callback fSkipCallback;void *fSkipRefcon;UInt8 fSync;UInt8 fTag;};
struct in6_prflags {in6_prflags__prf_ra prf_ra;u_char prf_reserved1;u_short prf_reserved2;in6_prflags__prf_rr prf_rr;u_char prf_reserved3;u_short prf_reserved4;};
struct sockaddr_in {__uint8_t sin_len;sa_family_t sin_family;in_port_t sin_port;in_addr sin_addr;char sin_zero[8];};
struct CDDiscInfo {UInt16 dataLength;unsigned char discStatus : 2;unsigned char stateOfLastSession : 2;unsigned char erasable : 1;unsigned char reserved : 3;UInt8 numberOfFirstTrack;UInt8 numberOfSessionsLSB;UInt8 firstTrackNumberInLastSessionLSB;UInt8 lastTrackNumberInLastSessionLSB;unsigned char reserved3 : 5;unsigned char unrestrictedUse : 1;unsigned char discBarCodeValid : 1;unsigned char discIdentificationValid : 1;UInt8 discType;UInt8 numberOfSessionsMSB;UInt8 firstTrackNumberInLastSessionMSB;UInt8 lastTrackNumberInLastSessionMSB;UInt32 discIdentification;UInt8 reserved7;CDMSF lastSessionLeadInStartTime;UInt8 reserved8;CDMSF lastPossibleStartTimeOfLeadOut;UInt8 discBarCode[8];UInt8 reserved9;UInt8 numberOfOPCTableEntries;};
struct IOWorkLoop { OSObject cppsuper0;IORecursiveLock *gateLock;IOEventSource *eventChain;IOCommandGate *controlG;IOSimpleLock *workToDoLock;IOThread workThread;char workToDo;char loopRestart;IOWorkLoop__ExpansionData *reserved;};
struct VDPageInfo {DepthMode csMode;DisplayModeID csData;SInt16 csPage;Ptr csBaseAddr;};
struct applelabel {uint8_t al_boot0[416];uint16_t al_magic;uint16_t al_type;uint32_t al_flags;uint64_t al_offset;uint32_t al_size;uint32_t al_checksum;uint8_t al_boot1[72];};
struct if_data64 {u_char ifi_type;u_char ifi_typelen;u_char ifi_physical;u_char ifi_addrlen;u_char ifi_hdrlen;u_char ifi_recvquota;u_char ifi_xmitquota;u_char ifi_unused1;u_int32_t ifi_mtu;u_int32_t ifi_metric;u_int64_t ifi_baudrate;u_int64_t ifi_ipackets;u_int64_t ifi_ierrors;u_int64_t ifi_opackets;u_int64_t ifi_oerrors;u_int64_t ifi_collisions;u_int64_t ifi_ibytes;u_int64_t ifi_obytes;u_int64_t ifi_imcasts;u_int64_t ifi_omcasts;u_int64_t ifi_iqdrops;u_int64_t ifi_noproto;u_int32_t ifi_recvtiming;u_int32_t ifi_xmittiming;timeval ifi_lastchange;};
union ldt_entry {code_desc_t code;data_desc_t data;call_gate_t call_gate;task_gate_t task_gate;};
struct sadb_comb {u_int8_t sadb_comb_auth;u_int8_t sadb_comb_encrypt;u_int16_t sadb_comb_flags;u_int16_t sadb_comb_auth_minbits;u_int16_t sadb_comb_auth_maxbits;u_int16_t sadb_comb_encrypt_minbits;u_int16_t sadb_comb_encrypt_maxbits;u_int32_t sadb_comb_reserved;u_int32_t sadb_comb_soft_allocations;u_int32_t sadb_comb_hard_allocations;u_int64_t sadb_comb_soft_bytes;u_int64_t sadb_comb_hard_bytes;u_int64_t sadb_comb_soft_addtime;u_int64_t sadb_comb_hard_addtime;u_int64_t sadb_comb_soft_usetime;u_int64_t sadb_comb_hard_usetime;};
struct sha1_ctxt {sha1_ctxt___FF46DB5CE0261698EDEAFF2E82501994 h;sha1_ctxt___6586F9C709DE089D785AD2F99CD3AEEB c;sha1_ctxt___A8BA7BDC1C910B178726D427455301E3 m;u_int8_t count;};
struct ipc_perm {uid_t uid;gid_t gid;uid_t cuid;gid_t cgid;mode_t mode;unsigned short _seq;key_t _key;};
struct pshminfo {unsigned int pshm_flags;unsigned int pshm_usecount;off_t pshm_length;mode_t pshm_mode;uid_t pshm_uid;gid_t pshm_gid;char pshm_name[32];void *pshm_memobject;label *pshm_label;};
struct gpt_hdr {uint8_t hdr_sig[8];uint32_t hdr_revision;uint32_t hdr_size;uint32_t hdr_crc_self;uint32_t __reserved;uint64_t hdr_lba_self;uint64_t hdr_lba_alt;uint64_t hdr_lba_start;uint64_t hdr_lba_end;uuid_t hdr_uuid;uint64_t hdr_lba_table;uint32_t hdr_entries;uint32_t hdr_entsz;uint32_t hdr_crc_table;uint32_t padding;};
struct Block0 {UInt16 sbSig;UInt16 sbBlkSize;UInt32 sbBlkCount;UInt16 sbDevType;UInt16 sbDevId;UInt32 sbDrvrData;UInt16 sbDrvrCount;DDMap sbDrvrMap[8];UInt8 sbReserved[430];};
struct bootp {u_char bp_op;u_char bp_htype;u_char bp_hlen;u_char bp_hops;u_int32_t bp_xid;u_short bp_secs;u_short bp_unused;in_addr bp_ciaddr;in_addr bp_yiaddr;in_addr bp_siaddr;in_addr bp_giaddr;u_char bp_chaddr[16];u_char bp_sname[64];u_char bp_file[128];u_char bp_vend[64];};
struct lockf {short lf_flags;short lf_type;off_t lf_start;off_t lf_end;caddr_t lf_id;lockf **lf_head;vnode *lf_vnode;lockf *lf_next;locklist lf_blkhd;lockf___33687FB5F797F8E3093244FBEFE29298 lf_block;proc *lf_owner;};
struct ucred {ucred___4023DC22796BF9904C7BAB93B96A6B26 cr_link;u_long cr_ref;ucred__posix_cred cr_posix;label *cr_label;au_session cr_audit;};
union ifreq___E0FC42874A550D533741D474A8188B08 {sockaddr ifru_addr;sockaddr ifru_dstaddr;sockaddr ifru_broadaddr;short ifru_flags;int ifru_metric;int ifru_mtu;int ifru_phys;int ifru_media;int ifru_intval;caddr_t ifru_data;ifdevmtu ifru_devmtu;ifkpi ifru_kpi;u_int32_t ifru_wake_flags;u_int32_t ifru_route_refcnt;int ifru_cap[2];u_int32_t ifru_functional_type;};
struct IOFireWireControllerAux_vtbl_layout; 
struct IOFireWireAVCCommand_vtbl_layout; 
struct IOHIDEventService__ExpansionData {IOService *provider;IOWorkLoop *workLoop;OSArray *deviceUsagePairs;IOCommandGate *commandGate;OSDictionary *clientDict;IOHIDEventService__ExpansionData___CA12AB0B7A60234CA66CAE85BD1D97D4 digitizer;IOHIDEventService__ExpansionData___55147C02C79D288B0DD9D19715B7B0A0 keyboard;IOHIDEventService__ExpansionData___ADF6E6FC50F1B00482339F12ECE9D118 multiAxis;IOHIDEventService__ExpansionData___5878CC0A81F7F241068F5530DC3A8E22 relativePointer;IOHIDEventService__ExpansionData___5878CC0A81F7F241068F5530DC3A8E22 absolutePointer;int keyboardShim;UInt32 debugMask;};
struct IOBasicOutputQueue_vtbl_layout; 
struct IOGatedOutputQueue_vtbl_layout; 
struct IOHIKeyboardMapper_vtbl_layout; 
struct IOFireWireBusAux_vtbl_layout; 
struct IOFireWireControllerAux_vtbl; 
struct SCSICmd_INQUIRY_PageC0_Data {SCSICmd_INQUIRY_PAGECx_Header fHeader;UInt8 fTdmPageVersion;UInt8 fTdmProtocolVersion;UInt8 fReserved1;UInt8 fReserved2;UInt8 fMacModelId[32];UInt8 fSerialNumber[32];UInt32 fMaxReadSize;UInt32 fMaxWriteSize;UInt32 fNativeBlockSize;UInt32 fPreferredIOSize;UInt64 fFeatures;UInt64 fWorkArounds;UInt16 fEncryptionType;UInt8 fReserved3[2];};
struct IOFireWireAVCCommand_vtbl; 
struct VDVideoParametersInfoRec {DisplayModeID csDisplayModeID;DepthMode csDepthMode;VPBlockPtr csVPBlockPtr;UInt32 csPageCount;VideoDeviceType csDeviceType;UInt32 csDepthFlags;};
struct dyld_kernel_process_info {dyld_kernel_image_info cache_image_info;uint64_t timestamp;uint32_t imageCount;uint32_t initialImageCount;uint8_t dyldState;boolean_t no_cache;boolean_t private_cache;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSMasterDirectoryBlock {u_int16_t drSigWord;u_int32_t drCrDate;u_int32_t drLsMod;u_int16_t drAtrb;u_int16_t drNmFls;u_int16_t drVBMSt;u_int16_t drAllocPtr;u_int16_t drNmAlBlks;u_int32_t drAlBlkSiz;u_int32_t drClpSiz;u_int16_t drAlBlSt;u_int32_t drNxtCNID;u_int16_t drFreeBks;u_int8_t drVN[28];u_int32_t drVolBkUp;u_int16_t drVSeqNum;u_int32_t drWrCnt;u_int32_t drXTClpSiz;u_int32_t drCTClpSiz;u_int16_t drNmRtDirs;u_int32_t drFilCnt;u_int32_t drDirCnt;u_int32_t drFndrInfo[8];u_int16_t drEmbedSigWord;HFSExtentDescriptor drEmbedExtent;u_int32_t drXTFlSize;HFSExtentRecord drXTExtRec;u_int32_t drCTFlSize;HFSExtentRecord drCTExtRec;};
struct IOBasicOutputQueue_vtbl; 
struct IOGatedOutputQueue_vtbl; 
struct IOHIKeyboardMapper_vtbl; 
struct vm_region_basic_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;boolean_t shared;boolean_t reserved;memory_object_offset_t offset;vm_behavior_t behavior;unsigned short user_wired_count;};
struct _NXTabletProximityData {UInt16 vendorID;UInt16 tabletID;UInt16 pointerID;UInt16 deviceID;UInt16 systemTabletID;UInt16 vendorPointerType;UInt32 pointerSerialNumber;__attribute__((packed)) UInt64 uniqueID;UInt32 capabilityMask;UInt8 pointerType;UInt8 enterProximity;SInt16 reserved1;};
struct IOFireWireBusAux_vtbl; 
struct user32_fssearchblock {user32_addr_t returnattrs;user32_addr_t returnbuffer;user32_size_t returnbuffersize;user32_ulong_t maxmatches;user32_timeval timelimit;user32_addr_t searchparams1;user32_size_t sizeofsearchparams1;user32_addr_t searchparams2;user32_size_t sizeofsearchparams2;attrlist searchattrs;};
struct user64_fssearchblock {user64_addr_t returnattrs;user64_addr_t returnbuffer;user64_size_t returnbuffersize;user64_ulong_t maxmatches;user64_timeval timelimit;user64_addr_t searchparams1;user64_size_t sizeofsearchparams1;user64_addr_t searchparams2;user64_size_t sizeofsearchparams2;attrlist searchattrs;};
struct vm_region_basic_info {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;boolean_t shared;boolean_t reserved;uint32_t offset;vm_behavior_t behavior;unsigned short user_wired_count;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusVolumeHeader {u_int16_t signature;u_int16_t version;u_int32_t attributes;u_int32_t lastMountedVersion;u_int32_t journalInfoBlock;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;u_int32_t checkedDate;u_int32_t fileCount;u_int32_t folderCount;u_int32_t blockSize;u_int32_t totalBlocks;u_int32_t freeBlocks;u_int32_t nextAllocation;u_int32_t rsrcClumpSize;u_int32_t dataClumpSize;u_int32_t nextCatalogID;u_int32_t writeCount;u_int64_t encodingsBitmap;u_int8_t finderInfo[32];HFSPlusForkData allocationFile;HFSPlusForkData extentsFile;HFSPlusForkData catalogFile;HFSPlusForkData attributesFile;HFSPlusForkData startupFile;};
struct VDResolutionInfoRec {DisplayModeID csPreviousDisplayModeID;DisplayModeID csDisplayModeID;UInt32 csHorizontalPixels;UInt32 csVerticalLines;Fixed csRefreshRate;DepthMode csMaxDepthMode;UInt32 csResolutionFlags;uintptr_t csReserved;};
struct vnop_blockmap_args {vnodeop_desc *a_desc;vnode_t a_vp;off_t a_foffset;size_t a_size;daddr64_t *a_bpn;size_t *a_run;void *a_poff;int a_flags;vfs_context_t a_context;};
struct DCLCallProcStruct {DCLCommand *pNextDCLCommand;DCLCompilerDataType compilerData;UInt32 opcode;DCLCallCommandProc *proc;DCLCallProcDataType procData;};
struct vm_info_region_64 {natural_t vir_start;natural_t vir_end;natural_t vir_object;memory_object_offset_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogFolder {int16_t recordType;u_int16_t flags;u_int16_t valence;u_int32_t folderID;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;FndrDirInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t reserved[4];};
struct IODMAEventSource { IOEventSource cppsuper0;IOService *dmaProvider;IODMAController *dmaController;UInt32 dmaIndex;queue_head_t dmaCommandsCompleted;IOSimpleLock *dmaCommandsCompletedLock;IODMAEventSource__Action dmaCompletionAction;IODMAEventSource__Action dmaNotificationAction;char dmaSynchBusy;};
struct IOFWIsochChannel { OSObject cppsuper0;IOFireWireController *fControl;IOFWIsochChannel__ForceStopNotificationProc *fStopProc;void *fStopRefCon;IOFWIsochPort *fTalker;OSSet *fListeners;char fDoIRM;UInt32 fBandwidth;UInt32 fPacketSize;IOFWSpeed fPrefSpeed;IOFWSpeed fSpeed;UInt32 fChannel;IOFWReadQuadCommand *fReadCmd;IOFWCompareAndSwapCommand *fLockCmd;UInt32 fGeneration;IOLock *fLock;IOFWIsochChannel__ExpansionData *reserved;};
typedef UInt32 (*FWWriteCallback)(void *, UInt16, IOFWSpeed *, FWAddress, UInt32,  void *, IOFWRequestRefCon);
struct VDSwitchInfoRec {DepthMode csMode;DisplayModeID csData;UInt16 csPage;Ptr csBaseAddr;uintptr_t csReserved;};
struct __shmid_ds_new {ipc_perm shm_perm;size_t shm_segsz;pid_t shm_lpid;pid_t shm_cpid;shmatt_t shm_nattch;time_t shm_atime;time_t shm_dtime;time_t shm_ctime;void *shm_internal;};
struct __shmid_ds_old {__ipc_perm_old shm_perm;size_t shm_segsz;pid_t shm_lpid;pid_t shm_cpid;shmatt_t shm_nattch;time_t shm_atime;time_t shm_dtime;time_t shm_ctime;void *shm_internal;};
struct hfs_mount_args {uid_t hfs_uid;gid_t hfs_gid;mode_t hfs_mask;u_int32_t hfs_encoding;timezone hfs_timezone;int flags;int journal_tbuffer_size;int journal_flags;int journal_disable;};
struct IODMACommand { IOCommand cppsuper0;void *fRefCon;UInt64 fMaxSegmentSize;UInt64 fMaxTransferSize;UInt32 fAlignMaskLength;UInt32 fAlignMaskInternalSegments;IOMapper *fMapper; IOMemoryDescriptor *fMemory;IODMACommand__SegmentFunction fOutSeg;UInt32 fAlignMask;UInt32 fNumAddressBits;UInt32 fNumSegments;uint32_t fMappingOptions;UInt32 fActive;IODMACommandInternal *reserved;};
struct StdFBShmem_t {OSSpinLock cursorSema;int frame;char cursorShow;char cursorObscured;char shieldFlag;char shielded;IOGBounds saveRect;IOGBounds shieldRect;IOGPoint cursorLoc;IOGBounds cursorRect;IOGBounds oldCursorRect;IOGBounds screenBounds;int version;int structSize;AbsoluteTime vblTime;AbsoluteTime vblDelta;unsigned long long vblCount;unsigned long long vblDrift;unsigned long long vblDeltaMeasured;AbsoluteTime vblDeltaReal;unsigned int reservedC[22];unsigned char hardwareCursorCapable;unsigned char hardwareCursorActive;unsigned char hardwareCursorShields;unsigned char reservedB[1];IOGSize cursorSize[4];IOGPoint hotSpot[4];};
struct IOFWCommand { IOCommand cppsuper0;IOReturn fStatus;IOFireWireController *fControl;IOFWCommand *fQueuePrev;IOFWCommand *fQueueNext;IOFWCmdQ *fQueue;UInt32 fTimeout;AbsoluteTime fDeadline;IOFWSyncer *fSyncWakeup;UInt8 fSync;UInt8 fCancelOnReset;UInt8 spare[2];IOFWCommand__MemberVariables *fMembers;};
struct _evGlobals {OSSpinLock cursorSema;int eNum;int buttons;int eventFlags;int VertRetraceClock;IOGPoint cursorLoc;int frame;IOGBounds workBounds;IOGBounds mouseRect;int version;int structSize;int lastFrame;IOFixedPoint32 screenCursorFixed;IOFixedPoint32 desktopCursorFixed;unsigned int reservedA[27];unsigned int reserved : 25;unsigned int updateCursorPositionFromFixed : 1;unsigned int logCursorUpdates : 1;unsigned int wantPressure : 1;unsigned int wantPrecision : 1;unsigned int dontWantCoalesce : 1;unsigned int dontCoalesce : 1;unsigned int mouseRectValid : 1;int movedMask;OSSpinLock waitCursorSema;int AALastEventSent;int AALastEventConsumed;int waitCursorUp;char ctxtTimedOut;char waitCursorEnabled;char globalWaitCursorEnabled;int waitThreshold;int LLEHead;int LLETail;int LLELast;NXEQElement lleq[240];};
struct kevent64_s {uint64_t ident;int16_t filter;uint16_t flags;uint32_t fflags;int64_t data;uint64_t udata;uint64_t ext[2];};
struct rt_msghdr2 {u_short rtm_msglen;u_char rtm_version;u_char rtm_type;u_short rtm_index;int rtm_flags;int rtm_addrs;int32_t rtm_refcnt;int rtm_parentflags;int rtm_reserved;int rtm_use;u_int32_t rtm_inits;rt_metrics rtm_rmx;};
struct sadb_x_sa2 {u_int16_t sadb_x_sa2_len;u_int16_t sadb_x_sa2_exttype;u_int8_t sadb_x_sa2_mode;sadb_x_sa2___BE0BF66556B3A07F217BF5ED388C8220 __anonymous0;sadb_x_sa2___0B8F6C7C603ED8E5ADDF6AC271DF4C5E __anonymous1;u_int32_t sadb_x_sa2_sequence;u_int32_t sadb_x_sa2_reqid;};
struct rt_msghdr {u_short rtm_msglen;u_char rtm_version;u_char rtm_type;u_short rtm_index;int rtm_flags;int rtm_addrs;pid_t rtm_pid;int rtm_seq;int rtm_errno;int rtm_use;u_int32_t rtm_inits;rt_metrics rtm_rmx;};
struct vfsstatfs {uint32_t f_bsize;size_t f_iosize;uint64_t f_blocks;uint64_t f_bfree;uint64_t f_bavail;uint64_t f_bused;uint64_t f_files;uint64_t f_ffree;fsid_t f_fsid;uid_t f_owner;uint64_t f_flags;char f_fstypename[16];char f_mntonname[1024];char f_mntfromname[1024];uint32_t f_fssubtype;void *f_reserved[2];};
struct pseminfo {unsigned int psem_flags;unsigned int psem_usecount;mode_t psem_mode;uid_t psem_uid;gid_t psem_gid;char psem_name[32];void *psem_semobject;label *psem_label;pid_t psem_creator_pid;uint64_t psem_creator_uniqueid;};
struct statfs64 {uint32_t f_bsize;int32_t f_iosize;uint64_t f_blocks;uint64_t f_bfree;uint64_t f_bavail;uint64_t f_files;uint64_t f_ffree;fsid_t f_fsid;uid_t f_owner;uint32_t f_type;uint32_t f_flags;uint32_t f_fssubtype;char f_fstypename[16];char f_mntonname[1024];char f_mntfromname[1024];uint32_t f_reserved[8];};
struct kevent {uintptr_t ident;int16_t filter;uint16_t flags;uint32_t fflags;intptr_t data;void *udata;};
struct NXEventData___7F18F8EED5D1248513E921492DDC6968 {UInt16 vendorID;UInt16 tabletID;UInt16 pointerID;UInt16 deviceID;UInt16 systemTabletID;UInt16 vendorPointerType;UInt32 pointerSerialNumber;__attribute__((packed)) UInt64 uniqueID;UInt32 capabilityMask;UInt8 pointerType;UInt8 enterProximity;SInt16 reserved1;SInt32 reserved2[4];};
struct IOAudioTimeIntervalFilterIIR_vtbl_layout; 
union llc___DC63CC98741D9338AD6B09337B3BE31E {_3AFEBDF7A4FC08BFE9A431A2DA7430D4 type_u;_A3920816D4629CE8D4A8F0ADB219F5F7 type_i;_91B3B8FDADC1811899AE65C68A225D1C type_s;_C255F273D17FD18D4EDDE30A2FF3191C type_frmr;__attribute__((packed)) _7008580425A2D9D299FFCC87FFBB188D type_snap;_D0AC4D4AA87A2DEF3381B9718ACFF2C3 type_raw;};
typedef errno_t (*img4_get_trusted_external_payload_t)(img4_t *, img4_payload_t *,  img4_environment_t *, void *,  uint8_t **, size_t *);
struct IOAudioTimeIntervalFilterIIR_vtbl; 
struct IOFireWireAVCAsynchronousCommand { IOCommand cppsuper0;IOFireWireAVCAsynchronousCommand__ExpansionData *reserved;IOFWAVCAsyncCommandState cmdState;void *pRefCon;UInt8 *pCommandBuf;UInt32 cmdLen;UInt8 *pInterimResponseBuf;UInt32 interimResponseLen;UInt8 *pFinalResponseBuf;UInt32 finalResponseLen;IOFireWireAVCAsynchronousCommandCallback fCallback;IOFireWireAVCUnit *fAVCUnit;IOMemoryDescriptor *fMem;IOFWCommand *fWriteCmd;IOFWDelayCommand *fDelayCmd;UInt16 fWriteNodeID;UInt32 fWriteGen;};
struct IOFWLocalIsochPort_vtbl_layout; 
struct IOFireWireSBP2ORB_vtbl_layout; 
struct IOUSBHostIOSource_vtbl_layout; 
struct IOUSBHostStream_vtbl_layout; 
struct IOFWLocalIsochPort_vtbl; 
struct IOFireWireSBP2ORB_vtbl; 
struct IOUSBHostIOSource_vtbl; 
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogFolder {int16_t recordType;u_int16_t flags;u_int32_t valence;u_int32_t folderID;u_int32_t createDate;u_int32_t contentModDate;u_int32_t attributeModDate;u_int32_t accessDate;u_int32_t backupDate;HFSPlusBSDInfo bsdInfo;FndrDirInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t textEncoding;u_int32_t folderCount;};
struct IOUSBHostStream_vtbl; 
struct IOBlitSurfaceStruct {IOBlitSurfaceStruct___9F5F1817842B588D090C379943A470FF memory;IOFourCharCode pixelFormat;IOBlitRectangle size;UInt32 rowBytes;UInt32 byteOffset;UInt32 *palette;IOOptionBits accessFlags;IOBlitMemoryRef interfaceRef;UInt32 more[14];};
struct IOStorageAttributes {IOStorageOptions options;IOStoragePriority priority;UInt8 reserved0024;UInt32 reserved0032;UInt64 reserved0064;UInt64 adjustedOffset;bufattr_t bufattr;};
struct vnop_clonefile_args {vnodeop_desc *a_desc;vnode_t a_fvp;vnode_t a_dvp;vnode_t *a_vpp;componentname *a_cnp;vnode_attr *a_vap;uint32_t a_flags;vfs_context_t a_context;int (*a_dir_clone_authorizer)(vnode_attr *, kauth_action_t, vnode_attr *, vnode_t, mount_t, dir_clone_authorizer_op_t, uint32_t, vfs_context_t, void *);void *a_reserved;};
struct IOMemoryDescriptor { OSObject cppsuper0;IOMemoryDescriptorReserved *reserved;OSSet *_mappings;IOOptionBits _flags;void *__iomd_reserved5;uint16_t __iomd_reserved1[4];uintptr_t __iomd_reserved2;uintptr_t __iomd_reserved3;uintptr_t __iomd_reserved4;IODirection _direction;IOByteCount _length;IOOptionBits _tag;};
struct host_basic_info {integer_t max_cpus;integer_t avail_cpus;natural_t memory_size;cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;cpu_threadtype_t cpu_threadtype;integer_t physical_cpu;integer_t physical_cpu_max;integer_t logical_cpu;integer_t logical_cpu_max;uint64_t max_mem;};
typedef UInt32 (*FWReadCallback)(void *, UInt16, IOFWSpeed *, FWAddress, UInt32, IOMemoryDescriptor **, IOByteCount *, IOFWRequestRefCon);
struct __msqid_ds_new {ipc_perm msg_perm;__int32_t msg_first;__int32_t msg_last;msglen_t msg_cbytes;msgqnum_t msg_qnum;msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;time_t msg_stime;__int32_t msg_pad1;time_t msg_rtime;__int32_t msg_pad2;time_t msg_ctime;__int32_t msg_pad3;__int32_t msg_pad4[4];};
struct __msqid_ds_old {__ipc_perm_old msg_perm;__int32_t msg_first;__int32_t msg_last;msglen_t msg_cbytes;msgqnum_t msg_qnum;msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;time_t msg_stime;__int32_t msg_pad1;time_t msg_rtime;__int32_t msg_pad2;time_t msg_ctime;__int32_t msg_pad3;__int32_t msg_pad4[4];};
struct image_params {user_addr_t ip_user_fname;user_addr_t ip_user_argv;user_addr_t ip_user_envv;int ip_seg;vnode *ip_vp;vnode_attr *ip_vattr;vnode_attr *ip_origvattr;cpu_type_t ip_origcputype;cpu_subtype_t ip_origcpusubtype;char *ip_vdata;int ip_flags;int ip_argc;int ip_envc;int ip_applec;char *ip_startargv;char *ip_endargv;char *ip_endenvv;char *ip_strings;char *ip_strendp;int ip_argspace;int ip_strspace;user_size_t ip_arch_offset;user_size_t ip_arch_size;char ip_interp_buffer[512];int ip_interp_sugid_fd;vfs_context *ip_vfs_context;nameidata *ip_ndp;thread_t ip_new_thread;label *ip_execlabelp;label *ip_scriptlabelp;vnode *ip_scriptvp;unsigned int ip_csflags;int ip_mac_return;void *ip_px_sa;void *ip_px_sfa;void *ip_px_spa;void *ip_px_smpx;void *ip_px_persona;void *ip_cs_error;uint64_t ip_dyld_fsid;uint64_t ip_dyld_fsobjid;};
struct kern_ctl_reg {char ctl_name[96];u_int32_t ctl_id;u_int32_t ctl_unit;u_int32_t ctl_flags;u_int32_t ctl_sendsize;u_int32_t ctl_recvsize;ctl_connect_func ctl_connect;ctl_disconnect_func ctl_disconnect;ctl_send_func ctl_send;ctl_setopt_func ctl_setopt;ctl_getopt_func ctl_getopt;};
struct iff_filter {void *iff_cookie; char *iff_name;protocol_family_t iff_protocol;iff_input_func iff_input;iff_output_func iff_output;iff_event_func iff_event;iff_ioctl_func iff_ioctl;iff_detached_func iff_detached;};
struct z_stream_s {Bytef *next_in;uInt avail_in;uLong total_in;Bytef *next_out;uInt avail_out;uLong total_out;char *msg;internal_state *state;alloc_func zalloc;free_func zfree;voidpf opaque;int data_type;uLong adler;uLong reserved;};
union gdt_entry {code_desc_t code;data_desc_t data;ldt_desc_t ldt;call_gate_t call_gate;task_gate_t task_gate;tss_desc_t task_state;};
struct xsocket64 {u_int32_t xso_len;u_int64_t xso_so;short so_type;short so_options;short so_linger;short so_state;u_int64_t so_pcb;int xso_protocol;int xso_family;short so_qlen;short so_incqlen;short so_qlimit;short so_timeo;u_short so_error;pid_t so_pgid;u_int32_t so_oobmark;xsockbuf so_rcv;xsockbuf so_snd;uid_t so_uid;};
struct xsocket {u_int32_t xso_len;socket *xso_so;short so_type;short so_options;short so_linger;short so_state;caddr_t so_pcb;int xso_protocol;int xso_family;short so_qlen;short so_incqlen;short so_qlimit;short so_timeo;u_short so_error;pid_t so_pgid;u_int32_t so_oobmark;xsockbuf so_rcv;xsockbuf so_snd;uid_t so_uid;};
struct IOTimerEventSource_vtbl_layout; 
struct kauth_identity_extlookup {u_int32_t el_seqno;u_int32_t el_result;u_int32_t el_flags;__darwin_pid_t el_info_pid;u_int64_t el_extend;u_int32_t el_info_reserved_1;uid_t el_uid;guid_t el_uguid;u_int32_t el_uguid_valid;ntsid_t el_usid;u_int32_t el_usid_valid;gid_t el_gid;guid_t el_gguid;u_int32_t el_gguid_valid;ntsid_t el_gsid;u_int32_t el_gsid_valid;u_int32_t el_member_valid;u_int32_t el_sup_grp_cnt;gid_t el_sup_groups[16];};
struct IOTimerEventSource_vtbl; 
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogFile {int16_t recordType;u_int16_t flags;u_int32_t reserved1;u_int32_t fileID;u_int32_t createDate;u_int32_t contentModDate;u_int32_t attributeModDate;u_int32_t accessDate;u_int32_t backupDate;HFSPlusBSDInfo bsdInfo;FndrFileInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t textEncoding;u_int32_t reserved2;HFSPlusForkData dataFork;HFSPlusForkData resourceFork;};
struct x86_float_state64 {int fpu_reserved[2];fp_control fpu_fcw;fp_status fpu_fsw;__uint8_t fpu_ftw;__uint8_t fpu_rsrv1;__uint16_t fpu_fop;__uint32_t fpu_ip;__uint16_t fpu_cs;__uint16_t fpu_rsrv2;__uint32_t fpu_dp;__uint16_t fpu_ds;__uint16_t fpu_rsrv3;__uint32_t fpu_mxcsr;__uint32_t fpu_mxcsrmask;mmst_reg fpu_stmm0;mmst_reg fpu_stmm1;mmst_reg fpu_stmm2;mmst_reg fpu_stmm3;mmst_reg fpu_stmm4;mmst_reg fpu_stmm5;mmst_reg fpu_stmm6;mmst_reg fpu_stmm7;xmm_reg fpu_xmm0;xmm_reg fpu_xmm1;xmm_reg fpu_xmm2;xmm_reg fpu_xmm3;xmm_reg fpu_xmm4;xmm_reg fpu_xmm5;xmm_reg fpu_xmm6;xmm_reg fpu_xmm7;xmm_reg fpu_xmm8;xmm_reg fpu_xmm9;xmm_reg fpu_xmm10;xmm_reg fpu_xmm11;xmm_reg fpu_xmm12;xmm_reg fpu_xmm13;xmm_reg fpu_xmm14;xmm_reg fpu_xmm15;char fpu_rsrv4[96];int fpu_reserved1;};
struct i386_float_state {int fpu_reserved[2];fp_control fpu_fcw;fp_status fpu_fsw;__uint8_t fpu_ftw;__uint8_t fpu_rsrv1;__uint16_t fpu_fop;__uint32_t fpu_ip;__uint16_t fpu_cs;__uint16_t fpu_rsrv2;__uint32_t fpu_dp;__uint16_t fpu_ds;__uint16_t fpu_rsrv3;__uint32_t fpu_mxcsr;__uint32_t fpu_mxcsrmask;mmst_reg fpu_stmm0;mmst_reg fpu_stmm1;mmst_reg fpu_stmm2;mmst_reg fpu_stmm3;mmst_reg fpu_stmm4;mmst_reg fpu_stmm5;mmst_reg fpu_stmm6;mmst_reg fpu_stmm7;xmm_reg fpu_xmm0;xmm_reg fpu_xmm1;xmm_reg fpu_xmm2;xmm_reg fpu_xmm3;xmm_reg fpu_xmm4;xmm_reg fpu_xmm5;xmm_reg fpu_xmm6;xmm_reg fpu_xmm7;char fpu_rsrv4[224];int fpu_reserved1;};
struct x86_avx_state64 {int fpu_reserved[2];fp_control fpu_fcw;fp_status fpu_fsw;__uint8_t fpu_ftw;__uint8_t fpu_rsrv1;__uint16_t fpu_fop;__uint32_t fpu_ip;__uint16_t fpu_cs;__uint16_t fpu_rsrv2;__uint32_t fpu_dp;__uint16_t fpu_ds;__uint16_t fpu_rsrv3;__uint32_t fpu_mxcsr;__uint32_t fpu_mxcsrmask;mmst_reg fpu_stmm0;mmst_reg fpu_stmm1;mmst_reg fpu_stmm2;mmst_reg fpu_stmm3;mmst_reg fpu_stmm4;mmst_reg fpu_stmm5;mmst_reg fpu_stmm6;mmst_reg fpu_stmm7;xmm_reg fpu_xmm0;xmm_reg fpu_xmm1;xmm_reg fpu_xmm2;xmm_reg fpu_xmm3;xmm_reg fpu_xmm4;xmm_reg fpu_xmm5;xmm_reg fpu_xmm6;xmm_reg fpu_xmm7;xmm_reg fpu_xmm8;xmm_reg fpu_xmm9;xmm_reg fpu_xmm10;xmm_reg fpu_xmm11;xmm_reg fpu_xmm12;xmm_reg fpu_xmm13;xmm_reg fpu_xmm14;xmm_reg fpu_xmm15;char fpu_rsrv4[96];int fpu_reserved1;char avx_reserved1[64];xmm_reg fpu_ymmh0;xmm_reg fpu_ymmh1;xmm_reg fpu_ymmh2;xmm_reg fpu_ymmh3;xmm_reg fpu_ymmh4;xmm_reg fpu_ymmh5;xmm_reg fpu_ymmh6;xmm_reg fpu_ymmh7;xmm_reg fpu_ymmh8;xmm_reg fpu_ymmh9;xmm_reg fpu_ymmh10;xmm_reg fpu_ymmh11;xmm_reg fpu_ymmh12;xmm_reg fpu_ymmh13;xmm_reg fpu_ymmh14;xmm_reg fpu_ymmh15;};
struct i386_avx_state {int fpu_reserved[2];fp_control fpu_fcw;fp_status fpu_fsw;__uint8_t fpu_ftw;__uint8_t fpu_rsrv1;__uint16_t fpu_fop;__uint32_t fpu_ip;__uint16_t fpu_cs;__uint16_t fpu_rsrv2;__uint32_t fpu_dp;__uint16_t fpu_ds;__uint16_t fpu_rsrv3;__uint32_t fpu_mxcsr;__uint32_t fpu_mxcsrmask;mmst_reg fpu_stmm0;mmst_reg fpu_stmm1;mmst_reg fpu_stmm2;mmst_reg fpu_stmm3;mmst_reg fpu_stmm4;mmst_reg fpu_stmm5;mmst_reg fpu_stmm6;mmst_reg fpu_stmm7;xmm_reg fpu_xmm0;xmm_reg fpu_xmm1;xmm_reg fpu_xmm2;xmm_reg fpu_xmm3;xmm_reg fpu_xmm4;xmm_reg fpu_xmm5;xmm_reg fpu_xmm6;xmm_reg fpu_xmm7;char fpu_rsrv4[224];int fpu_reserved1;char avx_reserved1[64];xmm_reg fpu_ymmh0;xmm_reg fpu_ymmh1;xmm_reg fpu_ymmh2;xmm_reg fpu_ymmh3;xmm_reg fpu_ymmh4;xmm_reg fpu_ymmh5;xmm_reg fpu_ymmh6;xmm_reg fpu_ymmh7;};
struct ostat {__uint16_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;__uint16_t st_uid;__uint16_t st_gid;__uint16_t st_rdev;__int32_t st_size;timespec st_atimespec;timespec st_mtimespec;timespec st_ctimespec;__int32_t st_blksize;__int32_t st_blocks;__uint32_t st_flags;__uint32_t st_gen;};
struct IOFWPhysicalAddressSpace_vtbl_layout; 
struct IOEthernetController__ExpansionData {IOEthernetControllerAVBTimeSyncSupport fTimeSyncSupport;char fRealtimeMulticastAllowed;IOMapper *fAVBPacketMapper;uint32_t fNumberOfRealtimeTransmitQueues;uint64_t *fTransmitQueuePacketLatency;uint64_t *fTransmitQueuePrefetchDelay;uint32_t fNumberOfRealtimeReceiveQueues;IOEthernetControllerAVBState fAVBControllerState;int32_t fTimeSyncEnabled;int32_t fAVBEnabled;IOLock *fStateLock;OSArray *fStateChangeNotifiers;IOLock *fStateChangeNotifiersLock;OSArray *fTimeSyncReceiveHandlers;IOLock *fTimeSyncReceiveHandlersLock;OSArray *fTimeSyncTransmitHandlers;IOLock *fTimeSyncTransmitHandlersLock;uint32_t fNextTimeSyncTransmitCallbackID;char fHasTimeSyncTransmitCallbackIDAvailable;IOEthernetController__IOECTSCallbackEntry *fTimeSyncTransmitCallbackQueue;IOLock *fTimeSyncTransmitCallbackQueueLock;IOEthernetController__IOECTSCallbackEntry *fTimeSyncReceiveCallbackQueue;IOLock *fTimeSyncReceiveCallbackQueueLock;char fTimeSyncCallbackThreadShouldKeepRunning;char fTimeSyncCallbackThreadIsRunning;thread_t fTimeSyncCallbackThread;semaphore_t fTimeSyncCallbackStartSemaphore;semaphore_t fTimeSyncCallbackStopSemaphore;semaphore_t fTimeSyncCallbackQueueSemaphore;uint64_t fTimeSyncCallbackTimeoutTime;char fgPTPPresent;};
struct IODCLTranslateListen_vtbl_layout; 
struct ATATimerEventSource_vtbl_layout; 
struct IODCLTranslateTalk_vtbl_layout; 
struct IOFWPhysicalAddressSpace_vtbl; 
struct IOFWAddressSpace_vtbl_layout; 
struct IODCLTranslator_vtbl_layout; 
struct ifnet_attach_proto_param_v2 {ifnet_demux_desc *demux_array;u_int32_t demux_count;proto_media_input_v2 input;proto_media_preout pre_output;proto_media_event event;proto_media_ioctl ioctl;proto_media_detached detached;proto_media_resolve_multi resolve;proto_media_send_arp send_arp;};
struct IODCLTranslateListen_vtbl; 
struct ATATimerEventSource_vtbl; 
struct IODCLProgram_vtbl_layout; 
struct ifnet_attach_proto_param {ifnet_demux_desc *demux_array;u_int32_t demux_count;proto_media_input input;proto_media_preout pre_output;proto_media_event event;proto_media_ioctl ioctl;proto_media_detached detached;proto_media_resolve_multi resolve;proto_media_send_arp send_arp;};
struct IODCLTranslateTalk_vtbl; 
struct IOFWAddressSpace_vtbl; 
struct IODCLTranslator_vtbl; 
struct IODCLProgram_vtbl; 
union dt_entry {code_desc_t code;data_desc_t data;ldt_desc_t ldt;tss_desc_t task_state;call_gate_t call_gate;trap_gate_t trap_gate;intr_gate_t intr_gate;task_gate_t task_gate;};
struct specinfo {vnode **si_hashchain;vnode *si_specnext;int si_flags;dev_t si_rdev;int32_t si_opencount;daddr_t si_size;daddr64_t si_lastr;u_int64_t si_devsize;u_int8_t si_initted;u_int8_t si_throttleable;u_int16_t si_isssd;u_int32_t si_devbsdunit;u_int64_t si_throttle_mask;};
struct IODMAEventSource_vtbl_layout; 
struct IOATACommand_vtbl_layout; 
struct IODMAEventSource_vtbl; 
struct IOATACommand_vtbl; 
struct i386_avx512_state {int fpu_reserved[2];fp_control fpu_fcw;fp_status fpu_fsw;__uint8_t fpu_ftw;__uint8_t fpu_rsrv1;__uint16_t fpu_fop;__uint32_t fpu_ip;__uint16_t fpu_cs;__uint16_t fpu_rsrv2;__uint32_t fpu_dp;__uint16_t fpu_ds;__uint16_t fpu_rsrv3;__uint32_t fpu_mxcsr;__uint32_t fpu_mxcsrmask;mmst_reg fpu_stmm0;mmst_reg fpu_stmm1;mmst_reg fpu_stmm2;mmst_reg fpu_stmm3;mmst_reg fpu_stmm4;mmst_reg fpu_stmm5;mmst_reg fpu_stmm6;mmst_reg fpu_stmm7;xmm_reg fpu_xmm0;xmm_reg fpu_xmm1;xmm_reg fpu_xmm2;xmm_reg fpu_xmm3;xmm_reg fpu_xmm4;xmm_reg fpu_xmm5;xmm_reg fpu_xmm6;xmm_reg fpu_xmm7;char fpu_rsrv4[224];int fpu_reserved1;char avx_reserved1[64];xmm_reg fpu_ymmh0;xmm_reg fpu_ymmh1;xmm_reg fpu_ymmh2;xmm_reg fpu_ymmh3;xmm_reg fpu_ymmh4;xmm_reg fpu_ymmh5;xmm_reg fpu_ymmh6;xmm_reg fpu_ymmh7;opmask_reg fpu_k0;opmask_reg fpu_k1;opmask_reg fpu_k2;opmask_reg fpu_k3;opmask_reg fpu_k4;opmask_reg fpu_k5;opmask_reg fpu_k6;opmask_reg fpu_k7;ymm_reg fpu_zmmh0;ymm_reg fpu_zmmh1;ymm_reg fpu_zmmh2;ymm_reg fpu_zmmh3;ymm_reg fpu_zmmh4;ymm_reg fpu_zmmh5;ymm_reg fpu_zmmh6;ymm_reg fpu_zmmh7;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogFile {int16_t recordType;u_int8_t flags;int8_t fileType;FndrFileInfo userInfo;u_int32_t fileID;u_int16_t dataStartBlock;int32_t dataLogicalSize;int32_t dataPhysicalSize;u_int16_t rsrcStartBlock;int32_t rsrcLogicalSize;int32_t rsrcPhysicalSize;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;FndrOpaqueInfo finderInfo;u_int16_t clumpSize;HFSExtentRecord dataExtents;HFSExtentRecord rsrcExtents;u_int32_t reserved;};
struct vfsops {int (*vfs_mount)(mount *, vnode_t, user_addr_t, vfs_context_t);int (*vfs_start)(mount *, int, vfs_context_t);int (*vfs_unmount)(mount *, int, vfs_context_t);int (*vfs_root)(mount *, vnode **, vfs_context_t);int (*vfs_quotactl)(mount *, int, uid_t, caddr_t, vfs_context_t);int (*vfs_getattr)(mount *, vfs_attr *, vfs_context_t);int (*vfs_sync)(mount *, int, vfs_context_t);int (*vfs_vget)(mount *, ino64_t, vnode **, vfs_context_t);int (*vfs_fhtovp)(mount *, int, unsigned char *, vnode **, vfs_context_t);int (*vfs_vptofh)(vnode *, int *, unsigned char *, vfs_context_t);int (*vfs_init)(vfsconf *);int (*vfs_sysctl)(int *, u_int, user_addr_t, size_t *, user_addr_t, size_t, vfs_context_t);int (*vfs_setattr)(mount *, vfs_attr *, vfs_context_t);int (*vfs_ioctl)(mount *, u_long, caddr_t, int, vfs_context_t);int (*vfs_vget_snapdir)(mount *, vnode **, vfs_context_t);void *vfs_reserved5;void *vfs_reserved4;void *vfs_reserved3;void *vfs_reserved2;void *vfs_reserved1;};
struct IOFWSimpleContiguousPhysicalAddressSpace_vtbl_layout; 
struct IOFWSimpleContiguousPhysicalAddressSpace_vtbl; 
struct IOFWSimplePhysicalAddressSpace_vtbl_layout; 
struct IOFWSimplePhysicalAddressSpace_vtbl; 
struct IOFWPseudoAddressSpace_vtbl_layout; 
struct IOATABusCommand64_vtbl_layout; 
struct IOATABusCommand_vtbl_layout; 
struct IOFWPseudoAddressSpace_vtbl; 
struct IODMACommand_vtbl_layout; 
struct IOATABusCommand64_vtbl; 
struct IOATABusCommand_vtbl; 
struct x86_avx512_state64 {int fpu_reserved[2];fp_control fpu_fcw;fp_status fpu_fsw;__uint8_t fpu_ftw;__uint8_t fpu_rsrv1;__uint16_t fpu_fop;__uint32_t fpu_ip;__uint16_t fpu_cs;__uint16_t fpu_rsrv2;__uint32_t fpu_dp;__uint16_t fpu_ds;__uint16_t fpu_rsrv3;__uint32_t fpu_mxcsr;__uint32_t fpu_mxcsrmask;mmst_reg fpu_stmm0;mmst_reg fpu_stmm1;mmst_reg fpu_stmm2;mmst_reg fpu_stmm3;mmst_reg fpu_stmm4;mmst_reg fpu_stmm5;mmst_reg fpu_stmm6;mmst_reg fpu_stmm7;xmm_reg fpu_xmm0;xmm_reg fpu_xmm1;xmm_reg fpu_xmm2;xmm_reg fpu_xmm3;xmm_reg fpu_xmm4;xmm_reg fpu_xmm5;xmm_reg fpu_xmm6;xmm_reg fpu_xmm7;xmm_reg fpu_xmm8;xmm_reg fpu_xmm9;xmm_reg fpu_xmm10;xmm_reg fpu_xmm11;xmm_reg fpu_xmm12;xmm_reg fpu_xmm13;xmm_reg fpu_xmm14;xmm_reg fpu_xmm15;char fpu_rsrv4[96];int fpu_reserved1;char avx_reserved1[64];xmm_reg fpu_ymmh0;xmm_reg fpu_ymmh1;xmm_reg fpu_ymmh2;xmm_reg fpu_ymmh3;xmm_reg fpu_ymmh4;xmm_reg fpu_ymmh5;xmm_reg fpu_ymmh6;xmm_reg fpu_ymmh7;xmm_reg fpu_ymmh8;xmm_reg fpu_ymmh9;xmm_reg fpu_ymmh10;xmm_reg fpu_ymmh11;xmm_reg fpu_ymmh12;xmm_reg fpu_ymmh13;xmm_reg fpu_ymmh14;xmm_reg fpu_ymmh15;opmask_reg fpu_k0;opmask_reg fpu_k1;opmask_reg fpu_k2;opmask_reg fpu_k3;opmask_reg fpu_k4;opmask_reg fpu_k5;opmask_reg fpu_k6;opmask_reg fpu_k7;ymm_reg fpu_zmmh0;ymm_reg fpu_zmmh1;ymm_reg fpu_zmmh2;ymm_reg fpu_zmmh3;ymm_reg fpu_zmmh4;ymm_reg fpu_zmmh5;ymm_reg fpu_zmmh6;ymm_reg fpu_zmmh7;ymm_reg fpu_zmmh8;ymm_reg fpu_zmmh9;ymm_reg fpu_zmmh10;ymm_reg fpu_zmmh11;ymm_reg fpu_zmmh12;ymm_reg fpu_zmmh13;ymm_reg fpu_zmmh14;ymm_reg fpu_zmmh15;zmm_reg fpu_zmm16;zmm_reg fpu_zmm17;zmm_reg fpu_zmm18;zmm_reg fpu_zmm19;zmm_reg fpu_zmm20;zmm_reg fpu_zmm21;zmm_reg fpu_zmm22;zmm_reg fpu_zmm23;zmm_reg fpu_zmm24;zmm_reg fpu_zmm25;zmm_reg fpu_zmm26;zmm_reg fpu_zmm27;zmm_reg fpu_zmm28;zmm_reg fpu_zmm29;zmm_reg fpu_zmm30;zmm_reg fpu_zmm31;};
struct IODMACommand_vtbl; 
struct vfs_attr {uint64_t f_supported;uint64_t f_active;uint64_t f_objcount;uint64_t f_filecount;uint64_t f_dircount;uint64_t f_maxobjcount;uint32_t f_bsize;size_t f_iosize;uint64_t f_blocks;uint64_t f_bfree;uint64_t f_bavail;uint64_t f_bused;uint64_t f_files;uint64_t f_ffree;fsid_t f_fsid;uid_t f_owner;vol_capabilities_attr_t f_capabilities;vol_attributes_attr_t f_attributes;timespec f_create_time;timespec f_modify_time;timespec f_access_time;timespec f_backup_time;uint32_t f_fssubtype;char *f_vol_name;uint16_t f_signature;uint16_t f_carbon_fsid;uuid_t f_uuid;uint64_t f_quota;uint64_t f_reserved;};
struct IONetworkInterface__ExpansionData {int unit;int type;int mtu;int flags;int eflags;int addrlen;int hdrlen;int32_t loggingLevel;uint32_t outputQueueModel;IONetworkStats driverStats;IONetworkStats lastDriverStats;ifnet_stat_increment_param inputDeltas;IORecursiveLock *publicLock;char *remote_NMI_pattern;unsigned int remote_NMI_len;IONetworkController *controller;uint32_t configFlags;uint32_t txRingSize;uint32_t txPullOptions;uint32_t txQueueSize;uint32_t txSchedulingModel;uint32_t txTargetQdelay;uint32_t txThreadState;UInt32 txThreadFlags;uint32_t txThreadSignal;uint32_t txThreadSignalLast;thread_t txStartThread;void *txStartAction;IOWorkLoop *txWorkLoop;uint32_t rxRingSize;uint32_t rxPollOptions;uint32_t rxPollModel;void *rxPollAction;void *rxCtlAction;uint64_t rxPollEmpty;uint64_t rxPollTotal;uint16_t txStartDelayQueueLength;uint16_t txStartDelayTimeout;IOOptionBits clientBehavior;thread_call_t inputEventThreadCall;};
struct IOFireWirePCRSpace_vtbl_layout; 
struct IOFireWirePCRSpace_vtbl; 
struct IOATACommand { IOCommand cppsuper0;void *refCon;void *refCon2;ataOpcode _opCode;UInt32 _flags;ataRegisterImage _taskFile;ATAPICmdPacket _packet;ataUnitID _unit;UInt32 _timeoutMS;IOMemoryDescriptor *_desc;IOByteCount _position;IOByteCount _byteCount;IOByteCount _logicalChunkSize;ataRegMask _regMask;IOATACompletionFunction *_callback;IOReturn _result;IOByteCount _actualByteCount;UInt8 _status;UInt8 _errReg;char _inUse;IOATACommand__ExpansionData *fExpansionData;};
struct vnode_attr {uint64_t va_supported;uint64_t va_active;int va_vaflags;dev_t va_rdev;uint64_t va_nlink;uint64_t va_total_size;uint64_t va_total_alloc;uint64_t va_data_size;uint64_t va_data_alloc;uint32_t va_iosize;uid_t va_uid;gid_t va_gid;mode_t va_mode;uint32_t va_flags;kauth_acl *va_acl;timespec va_create_time;timespec va_access_time;timespec va_modify_time;timespec va_change_time;timespec va_backup_time;uint64_t va_fileid;uint64_t va_linkid;uint64_t va_parentid;uint32_t va_fsid;uint64_t va_filerev;uint32_t va_gen;uint32_t va_encoding;vtype va_type;char *va_name;guid_t va_uuuid;guid_t va_guuid;uint64_t va_nchildren;uint64_t va_dirlinkcount;void *va_reserved1;timespec va_addedtime;uint32_t va_dataprotect_class;uint32_t va_dataprotect_flags;uint32_t va_document_id;uint32_t va_devid;uint32_t va_objtype;uint32_t va_objtag;uint32_t va_user_access;uint8_t va_finderinfo[32];uint64_t va_rsrc_length;uint64_t va_rsrc_alloc;fsid_t va_fsid64;uint32_t va_write_gencount;uint64_t va_private_size;};
struct ifnet_init_params { void *uniqueid;u_int32_t uniqueid_len; char *name;u_int32_t unit;ifnet_family_t family;u_int32_t type;ifnet_output_func output;ifnet_demux_func demux;ifnet_add_proto_func add_proto;ifnet_del_proto_func del_proto;ifnet_check_multi check_multi;ifnet_framer_func framer;void *softc;ifnet_ioctl_func ioctl;ifnet_set_bpf_tap set_bpf_tap;ifnet_detached_func detach;ifnet_event_func event; void *broadcast_addr;u_int32_t broadcast_len;};
struct stat64 {dev_t st_dev;mode_t st_mode;nlink_t st_nlink;__darwin_ino64_t st_ino;uid_t st_uid;gid_t st_gid;dev_t st_rdev;timespec st_atimespec;timespec st_mtimespec;timespec st_ctimespec;timespec st_birthtimespec;off_t st_size;blkcnt_t st_blocks;blksize_t st_blksize;__uint32_t st_flags;__uint32_t st_gen;__int32_t st_lspare;__int64_t st_qspare[2];};
struct stat {dev_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;uid_t st_uid;gid_t st_gid;dev_t st_rdev;timespec st_atimespec;timespec st_mtimespec;timespec st_ctimespec;off_t st_size;blkcnt_t st_blocks;blksize_t st_blksize;__uint32_t st_flags;__uint32_t st_gen;__int32_t st_lspare;__int64_t st_qspare[2];};
struct IOHIDEventDriver__ExpansionData___58C67D5D7A6AEFD04FD596DA970D5162 {IOHIDElement *deviceModeElement;OSArray *transducers;IOHIDElement *touchCancelElement;char native;char collectionDispatch;IOFixed centroidX;IOFixed centroidY;};
typedef IOReturn (*IOFireWireIRMAllocation__AllocationLostNotificationProc)(void *, IOFireWireIRMAllocation *);
union dk_cd_read_toc_t___82E429FAE4C5BE047DD3225D7BE1DDF6 {uint8_t session;uint8_t track;};
struct IOUSBHostPipe__tInternalControlRequestParameters {IOService *forClient;StandardUSB__DeviceRequest *request;void *rawBuffer;IOMemoryDescriptor *descriptorBuffer;uint32_t *bytesTransferred;IOUSBHostCompletion *completion;uint32_t completionTimeoutMs;};
typedef uint8_t BluetoothHCIOutputPCMSamplePayloadMSBPosition;
typedef uint8_t BluetoothHCIInputPCMSamplePayloadMSBPosition;
typedef uint8_t BluetoothHCIExtendedInquiryResponseDataType;
union nlist_64___4D543BF749BB09F4875D250FEC3C43C7 {uint32_t n_strx;};
typedef IOFWIsochChannel__ForceStopNotificationProc *FWIsochChannelForceStopNotificationProcPtr;
typedef IOReturn (*IOAudioControl__ObjectValueChangeHandler)(OSObject *, IOAudioControl *, OSObject *, OSObject *);
union nlist___B0769016BEBE8869A66D0C48DBB1BF7C {char *n_name;uint32_t n_strx;};
typedef uint8_t BluetoothHCINumBroadcastRetransmissions;
typedef IOFWIsochChannel__ForceStopNotificationProc FWIsochChannelForceStopNotificationProc;
struct BluetoothHCIEventVendorSpecificResults {uint8_t length;uint8_t data[255];};
struct BluetoothAFHHostChannelClassification {uint8_t data[10];};
typedef uint8_t BluetoothSDPDataElementSizeDescriptor;
typedef uint8_t BluetoothSDPDataElementTypeDescriptor;
struct IOUSBHostPipe__StandardUSBDescriptors {uint16_t bcdUSB; StandardUSB__EndpointDescriptor *descriptor; StandardUSB__SuperSpeedEndpointCompanionDescriptor *ssCompanionDescriptor; StandardUSB__SuperSpeedPlusIsochronousEndpointCompanionDescriptor *sspCompanionDescriptor;};
typedef uint8_t BluetoothHCIAFHChannelAssessmentMode;
struct IOPMSystemCapabilityChangeParameters {uint32_t notifyRef;uint32_t maxWaitForReply;uint32_t changeFlags;uint32_t __reserved1;uint32_t fromCapabilities;uint32_t toCapabilities;uint32_t __reserved2[4];};
typedef void (*IOUSBHostIsochronousCompletionAction)(void *, void *, IOReturn, IOUSBHostIsochronousFrame *);
typedef uint8_t BluetoothAuthenticationRequirements;
typedef uint16_t BluetoothHCIConnectionAcceptTimeout;
typedef uint8_t BluetoothHCIDeleteStoredLinkKeyFlag;
struct BluetoothHCIExtendedInquiryResponse {uint8_t data[240];};
typedef uint8_t BluetoothHCIOutputTransportUnitSize;
typedef IOReturn (*FWMultiIsochReceiveListenerCallback)(void *, IOFireWireMultiIsochReceivePacket *);
typedef void (*IOUSBLowLatencyIsocCompletionAction)(void *, void *, IOReturn, IOUSBLowLatencyIsocFrame *);
typedef uint32_t mach_voucher_attr_value_reference_t;
typedef uint8_t BluetoothHCIErroneousDataReporting;
typedef uint8_t BluetoothHCIInputTransportUnitSize;
typedef uint8_t BluetoothHCIInquiryAccessCodeCount;
typedef uint16_t BluetoothHCIParkModeBeaconInterval;
typedef uint8_t BluetoothHCIReadStoredLinkKeysFlag;
typedef uint16_t BluetoothHCITransmitCodecFrameSize;
typedef uint8_t BluetoothHCITransmitPowerLevelType;
struct IOUSBHostInterface__tExpansionData {uint16_t _persistentOutEndpointMask;uint16_t _persistentInEndpointMask;};
typedef uint32_t mach_voucher_attr_recipe_command_t;
struct _08E176686D46517EB8AB40FFEFBBB9FF {uint32_t elementCount;IOEthernetController__IOEthernetAVBIngressFilterElement *elements;};
struct _369286917136E2F70C2D38E7AE8006A5 {IOFixed l1;IOFixed l2;IOFixed r1;IOFixed r2;};
struct _3FEB4A13A9F7F8019DC60A4673C10B3A {IOFixed x;IOFixed y;IOFixed a;IOFixed b;};
struct _6B84C51D081AE912A4584AD6D505FC88 {uint16_t etherType;uint16_t etherTypeMask;uint16_t vlanTag;uint16_t vlanTagMask;};
struct _7AF841B63B3E7F4A9A49A44740BED81B {uint32_t label;uint32_t labelMask;};
struct _7B05A56910499893D795CEE646E4ED85 {uint8_t patternOffset;uint8_t patternLength;uint8_t pattern[128];uint8_t patternMask[128];};
struct _95CE1D15F775F631DADC340D9ECE61FE {IOFixed up;IOFixed down;IOFixed left;IOFixed right;};
struct _A019D19E0FE7C996C72A3F72FDBBF387 {uint8_t macAddress[6];uint8_t macAddressMask[6];};
struct _C0E0325F155B7E7CE2BD0701CF49B8F1 {void (*ptr)(void);size_t adj;};
struct _E3971B313FA2FA2BC7F914AF10E591CA {uint16_t sourcePort;uint16_t sourcePortMask;uint16_t destinationPort;uint16_t destinationPortMask;};
struct _FDF8F008E07F47F1298732B413E31B44 {IOFixed x;IOFixed y;IOFixed z;IOFixed rz;};
typedef uint16_t BluetoothHCIAutomaticFlushTimeout;
typedef uint16_t BluetoothHCIReceiveCodecFrameSize;
typedef uint32_t BluetoothHCIVendorCommandSelector;
typedef uint8_t BluetoothKeypressNotificationType;
typedef IOOptionBits IOMemoryDescriptor__DMACommandOps;
typedef uint32_t mach_voucher_attr_control_flags_t;
typedef uint32_t mach_voucher_attr_importance_refs;
typedef uint8_t BluetoothHCIAuthenticationEnable;
typedef uint16_t BluetoothHCICommandOpCodeCommand;
typedef uint8_t BluetoothHCIRetransmissionEffort;
struct BluetoothHCISimplePairingOOBData {uint8_t data[16];};
typedef uint64_t BluetoothHCITransmitCodingFormat;
typedef uint32_t mach_voucher_attr_content_size_t;
typedef uint64_t mach_voucher_attr_value_handle_t;
typedef uint16_t BluetoothHCIOutputCodedDataSize;
typedef uint8_t BluetoothHCIOutputPCMDataFormat;
typedef uint8_t BluetoothHCIPageScanEnableState;
typedef uint64_t BluetoothHCIReceiveCodingFormat;
typedef uint8_t BluetoothPageScanRepetitionMode;
typedef uint32_t BluetoothSDPServiceRecordHandle;
typedef uint8_t BluetoothSimplePairingDebugMode;
struct IOFramebufferNotificationNotify {IOIndex event;void *info;};
typedef uint32_t mach_voucher_attr_value_flags_t;
typedef processor_set_array_t processor_set_name_port_array_t;
typedef uint8_t BluetoothHCICommandOpCodeGroup;
struct BluetoothHCIEventLEMetaResults {uint8_t length;uint8_t data[255];};
typedef uint16_t BluetoothHCIFailedContactCount;
typedef uint16_t BluetoothHCIInputCodedDataSize;
typedef uint8_t BluetoothHCIInputPCMDataFormat;
typedef uint16_t BluetoothHCILinkPolicySettings;
typedef uint16_t BluetoothHCINumLinkKeysDeleted;
typedef uint8_t BluetoothHCINumLinkKeysToWrite;
typedef uint64_t BluetoothHCIOutputCodingFormat;
typedef uint8_t BluetoothHCIPageScanPeriodMode;
struct BluetoothHCIStoredLinkKeysInfo {uint16_t numLinkKeysRead;uint16_t maxNumLinkKeysAllowedInDevice;};
typedef uint32_t BluetoothHCITransportCommandID;
typedef uint16_t BluetoothL2CAPCommandByteCount;
typedef uint16_t BluetoothSDPServiceAttributeID;
struct IOUSBHostIsochronousCompletion {void *owner;IOUSBHostIsochronousCompletionAction action;void *parameter;};
typedef uint8_t *mach_voucher_attr_raw_recipe_t;
struct BluetoothEventFilterCondition {uint8_t data[7];};
typedef uint8_t BluetoothHCIEncryptionKeySize;
typedef uint64_t BluetoothHCIInputCodingFormat;
struct BluetoothHCIInquiryAccessCode {uint8_t data[3];};
typedef uint8_t BluetoothHCISimplePairingMode;
typedef uint16_t BluetoothHCISniffAttemptCount;
struct BluetoothHCISupportedCommands {uint8_t data[64];};
struct BluetoothHCISupportedFeatures {uint8_t data[8];};
typedef uint32_t BluetoothHCITransmitBandwidth;
typedef void (*FWSBP2FetchAgentWriteCallback)(void *, IOReturn, IOFireWireSBP2ORB *);
struct IOFireWireBus__DCLTaskInfoAux {unsigned int version;IOFireWireBus__DCLTaskInfoAux___00A0C683E8526E49FD7CE39739B2FE09 u;};
struct IOUSBLowLatencyIsocCompletion {void *target;IOUSBLowLatencyIsocCompletionAction action;void *parameter;};
typedef void (*AbsolutePointerEventCallback)(OSObject *, int, IOGPoint *, IOGBounds *, char, int, int, AbsoluteTime, OSObject *, void *);
typedef uint16_t BluetoothHCIACLDataByteCount;
typedef uint8_t BluetoothHCIFlowControlState;
typedef uint8_t BluetoothHCIHoldModeActivity;
typedef uint32_t BluetoothHCIReceiveBandwidth;
typedef uint8_t BluetoothHCISCODataByteCount;
struct IOUSBCompletionWithTimeStamp {void *target;IOUSBCompletionActionWithTimeStamp action;void *parameter;};
typedef void (*RelativePointerEventCallback)(OSObject *, int, int, int, AbsoluteTime, OSObject *, void *);
typedef uint32_t ipc_pthread_priority_value_t;
typedef natural_t memory_object_cluster_size_t;
struct sflt_filter__sflt_filter_ext {unsigned int sf_ext_len;sf_accept_func sf_ext_accept;void *sf_ext_rsvd[5];};
struct thread_throughput_qos_policy {thread_throughput_qos_t thread_throughput_qos_tier;};
typedef uint8_t BluetoothHCIInquiryScanType;
typedef uint32_t BluetoothHCIOutputBandwidth;
typedef uint8_t BluetoothPageScanPeriodMode;
typedef IOReturn (*IONetworkController__Action)(void *, void *, void *, void *, void *);
struct _loaded_kext_summary_header {uint32_t version;uint32_t entry_size;uint32_t numSummaries;uint32_t reserved;};
typedef uint32_t mach_voucher_attr_command_t;
typedef uint8_t *mach_voucher_attr_content_t;
typedef mach_port_t mach_voucher_attr_control_t;
typedef mach_port_t mach_voucher_attr_manager_t;
typedef void (*AbsolutePointerEventAction)(OSObject *, int, IOGPoint *, IOGBounds *, char, int, int, AbsoluteTime);
typedef uint8_t BluetoothHCIConnectionMode;
typedef uint8_t BluetoothHCIEncryptionMode;
typedef uint32_t BluetoothHCIInputBandwidth;
typedef uint8_t BluetoothHCIOutputDataPath;
typedef uint8_t BluetoothHCIParamByteCount;
typedef uint16_t BluetoothL2CAPFlushTimeout;
typedef uint32_t BluetoothServiceClassMajor;
struct IOFireWirePCRSpace__Client {IOFireWirePCRCallback func;void *refcon;};
struct IOHIDDevice__ExpansionData {OSSet *clientSet;IOService *seizedClient;AbsoluteTime eventDeadline;OSArray *inputInterruptElementArray;char performTickle;char performWakeTickle;OSArray *interfaceNubs;IOHIDElementPrivate *rollOverElement;OSArray *hierarchElements;OSArray *interfaceElementArrays;IOHIDAsyncReportQueue *asyncReportQueue;IOWorkLoop *workLoop;IOEventSource *eventSource;IONotifier *deviceNotify;};
typedef void (*RelativePointerEventAction)(OSObject *, int, int, int, AbsoluteTime);
struct encryption_info_command_64 {uint32_t cmd;uint32_t cmdsize;uint32_t cryptoff;uint32_t cryptsize;uint32_t cryptid;uint32_t pad;};
typedef natural_t *memory_object_fault_info_t;
typedef uint16_t BluetoothConnectionHandle;
typedef uint32_t BluetoothDeviceClassMajor;
typedef uint32_t BluetoothDeviceClassMinor;
typedef uint8_t BluetoothEncryptionEnable;
typedef uint16_t BluetoothHCICommandOpCode;
typedef uint16_t BluetoothHCIContentFormat;
typedef uint8_t BluetoothHCIInputDataPath;
typedef uint8_t BluetoothHCIInquiryLength;
typedef uint8_t BluetoothHCIResponseCount;
typedef uint16_t BluetoothL2CAPLinkTimeout;
typedef uint16_t BluetoothManufacturerName;
typedef uint16_t BluetoothSDPTransactionID;
typedef void (*IOHIDEventService__Action)(OSObject *, OSObject *, void *, OSObject *, IOOptionBits);
typedef void (*IOUSBIsocCompletionAction)(void *, void *, IOReturn, IOUSBIsocFrame *);
typedef uint64_t (*io_rate_update_callback_t)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
struct __attribute__((packed)) jetsam_coalition_snapshot {uint64_t jcs_id;uint64_t jcs_flags;uint64_t jcs_thread_group;uint64_t jcs_leader_task_uniqueid;};
struct task_inspect_basic_counts {uint64_t instructions;uint64_t cycles;};
struct thread_latency_qos_policy {thread_latency_qos_t thread_latency_qos_tier;};
typedef uint8_t BluetoothAllowRoleSwitch;
typedef uint8_t BluetoothHCILoopbackMode;
typedef uint16_t BluetoothHCIModeInterval;
typedef uint8_t BluetoothHCIPageScanMode;
typedef uint8_t BluetoothHCIPageScanType;
struct BluetoothHCIScanActivity {uint16_t scanInterval;uint16_t scanWindow;};
typedef uint16_t BluetoothHCISniffTimeout;
typedef uint8_t BluetoothHCISupportedIAC;
typedef uint16_t BluetoothHCIVoiceSetting;
typedef uint8_t BluetoothOOBDataPresence;
typedef uint8_t BluetoothRFCOMMChannelID;
typedef void (*FWSBP2ManagementCallback)(void *, IOReturn, IOFireWireSBP2ManagementORB *);
struct IOAsyncCompletionContent {IOReturn result;};
struct __attribute__((packed)) IOHistogramSegmentConfig {uint32_t base_bucket_width;uint32_t scale_flag;uint32_t segment_idx;uint32_t segment_bucket_count;};
typedef uint32_t IOPMDriverAssertionLevel;
struct IOServiceInterestContent {natural_t messageType;void *messageArgument[1];};
struct OpaqueDTPropertyIterator {RealDTEntry entry;DeviceTreeNodeProperty *currentProperty;unsigned int currentIndex;};
struct __attribute__((packed)) thread_group_snapshot_v2 {uint64_t tgs_id;char tgs_name[16];uint64_t tgs_flags;};
struct vc_progress_user_options {uint32_t options;uint32_t x_pos;uint32_t y_pos;uint32_t resv[8];};
typedef uint8_t BluetoothHCICountryCode;
typedef uint8_t BluetoothHCIEventStatus;
typedef uint8_t BluetoothHCIFECRequired;
typedef uint8_t BluetoothHCIInquiryMode;
typedef uint8_t BluetoothHCILinkQuality;
typedef uint32_t BluetoothHCIOperationID;
typedef uint16_t BluetoothHCIPageTimeout;
typedef uint32_t BluetoothHCITransportID;
typedef uint16_t BluetoothL2CAPByteCount;
typedef uint16_t BluetoothL2CAPChannelID;
typedef uint8_t BluetoothL2CAPCommandID;
struct GTraceEntry__ThreadInfo {uint64_t fTi;};
struct IOFWCommand_vtbl_layout; 
typedef uint32_t IOHIDBiometricEventType;
typedef uint64_t IOPMDriverAssertionType;
typedef IOReturn (*IORegistryEntry__Action)(OSObject *, void *, void *, void *, void *);
typedef uint32_t IOReportConfigureAction;
typedef SCSIDeviceIdentifier SCSIInitiatorIdentifier;
struct __attribute__((packed)) StandardUSB__Descriptor {uint8_t bLength;uint8_t bDescriptorType;};
typedef mach_port_t atm_memory_descriptor_t;
typedef uint64_t *atm_memory_size_array_t;
typedef int (*ccgcm_init_with_iv_fn_t)( ccmode_gcm *, ccgcm_ctx *, size_t,  void *,  void *);
struct dylib_table_of_contents {uint32_t symbol_index;uint32_t module_index;};
struct encryption_info_command {uint32_t cmd;uint32_t cmdsize;uint32_t cryptoff;uint32_t cryptsize;uint32_t cryptid;};
typedef uint32_t mach_voucher_attr_key_t;
typedef uint32_t mach_voucher_selector_t;
typedef mach_port_t memory_object_control_t;
typedef mach_port_t memory_object_default_t;
typedef thread_act_array_t thread_act_port_array_t;
typedef uint32_t BluetoothClassOfDevice;
struct BluetoothDeviceAddress {uint8_t data[6];};
typedef uint16_t BluetoothHCIMaxLatency;
typedef uint8_t BluetoothHCIPageNumber;
typedef uint16_t BluetoothLMPSubversion;
struct DeviceTreeNodeProperty {char name[32];uint32_t length;};
typedef IOReturn (*IOExternalMethodAction)(OSObject *, void *, IOExternalMethodArguments *);
struct IOFireWireLocalNodeAux { IOFireWireNubAux cppsuper0;IOFireWireLocalNodeAux__ExpansionData *reserved;};
struct IOInterruptEventSource { IOEventSource cppsuper0;IOService *provider;int intIndex;unsigned int producerCount;unsigned int consumerCount;char autoDisable;char explicitDisable;IOInterruptEventSource__ExpansionData *reserved;};
struct __attribute__((packed)) IONormDistReportValues {uint64_t samples;uint64_t mean;uint64_t variance;uint64_t reserved;};
typedef void (*ScrollWheelEventAction)(OSObject *, short, short, short, AbsoluteTime);
struct dk_error_description_t {uint64_t options;uint64_t reserved;uint64_t description_size;char *description;};
typedef mach_port_t *exception_port_array_t;
struct __attribute__((packed)) instrs_cycles_snapshot {uint64_t ics_instructions;uint64_t ics_cycles;};
struct kcdata_type_definition {uint32_t kct_type_identifier;uint32_t kct_num_elements;char kct_name[32];};
typedef natural_t mach_msg_type_number_t;
typedef processor_array_t processor_port_array_t;
struct stack_snapshot_frame32 {uint32_t lr;uint32_t sp;};
struct stack_snapshot_frame64 {uint64_t lr;uint64_t sp;};
struct __attribute__((packed)) stackshot_cpu_times_v2 {uint64_t user_usec;uint64_t system_usec;uint64_t runnable_usec;};
struct task_absolutetime_info {uint64_t total_user;uint64_t total_system;uint64_t threads_user;uint64_t threads_system;};
struct task_kernelmemory_info {uint64_t total_palloc;uint64_t total_pfree;uint64_t total_salloc;uint64_t total_sfree;};
struct task_trace_memory_info {uint64_t user_memory_address;uint64_t buffer_size;uint64_t mailbox_array_size;};
struct thread_identifier_info {uint64_t thread_id;uint64_t thread_handle;uint64_t dispatch_qaddr;};
typedef natural_t thread_policy_flavor_t;
struct thread_standard_policy {natural_t no_data;};
struct twolevel_hints_command {uint32_t cmd;uint32_t cmdsize;uint32_t offset;uint32_t nhints;};
typedef uint8_t BluetoothHCIEventCode;
typedef uint64_t BluetoothHCIEventMask;
typedef uint32_t BluetoothHCIRequestID;
typedef uint8_t BluetoothIOCapability;
typedef BluetoothL2CAPChannelID BluetoothL2CAPGroupID;
typedef uint32_t BluetoothNumericValue;
typedef uint8_t BluetoothPageScanMode;
typedef uint16_t BluetoothSDPErrorCode;
struct BluetoothSetEventMask {uint8_t data[8];};
typedef DCLCallCommandProc *DCLCallCommandProcPtr;
typedef void (*FWAsyncStreamCallback)(void *, IOReturn, IOFireWireBus *, IOFWAsyncStreamCommand *);
typedef IOReturn (*IOCommandGate__Action)(OSObject *, void *, void *, void *, void *);
typedef uint32_t IOHIDQueueOptionsType;
struct IONaturalMemoryCursor { IOMemoryCursor cppsuper0;};
typedef uint64_t IOPMDriverAssertionID;
struct __attribute__((packed)) IOReportElementValues {uint64_t v[4];};
typedef void (*KeyboardEventCallback)(OSObject *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char, AbsoluteTime, OSObject *, void *);
struct build_version_command {uint32_t cmd;uint32_t cmdsize;uint32_t platform;uint32_t minos;uint32_t sdk;uint32_t ntools;};
struct ccdrbg_nistctr_custom { ccmode_ctr *ctr_info;size_t keylen;int strictFIPS;int use_df;};
typedef size_t (*ccpad_cts3_crypt_fn_t)( ccmode_cbc *, cccbc_ctx *, cccbc_iv *, size_t,  void *, void *);
struct dk_corestorage_info_t {uint64_t flags;uint64_t hotfile_size;uint64_t hibernate_minsize;uint64_t swapfile_pinning;uint64_t padding[4];};
typedef uint16_t img4_struct_version_t;
struct kernel_resource_sizes {natural_t task;natural_t thread;natural_t port;natural_t memory_region;natural_t memory_object;};
struct linkedit_data_command {uint32_t cmd;uint32_t cmdsize;uint32_t dataoff;uint32_t datasize;};
struct linker_option_command {uint32_t cmd;uint32_t cmdsize;uint32_t count;};
typedef mach_port_t mem_entry_name_port_t;
struct prebind_cksum_command {uint32_t cmd;uint32_t cmdsize;uint32_t cksum;};
typedef uint16_t tUSBHostDeviceAddress;
typedef natural_t task_inspect_flavor_t;
typedef uint32_t thread_call_options_t;
struct __attribute__((packed)) thread_group_snapshot {uint64_t tgs_id;char tgs_name[16];};
typedef uint16_t BluetoothClockOffset;
typedef uint8_t BluetoothHCIQoSFlags;
typedef uint32_t BluetoothHCISignalID;
typedef void (*FWSBP2StatusCallback)(void *, IOReturn);
struct GTraceEntry__ArgsTag {GTraceEntry__ArgsTag___725FD65D9BA5618575D30FB319A50E80 __anonymous0;};
struct IOLittleMemoryCursor { IOMemoryCursor cppsuper0;};
struct IOReportInterestList {uint32_t ninterests;};
typedef uint32_t IOReportUpdateAction;
typedef ResType InterruptServiceType;
typedef RegModifiers RegPropertyModifiers;
typedef uint32_t USBPhysicalAddress32;
typedef uint64_t atm_mailbox_offset_t;
struct ipc_info_space_basic {natural_t iisb_genno_mask;natural_t iisb_table_size;natural_t iisb_table_next;natural_t iisb_table_inuse;natural_t iisb_reserved[2];};
typedef natural_t mach_msg_type_size_t;
typedef natural_t mach_port_msgcount_t;
typedef mach_port_t memory_object_name_t;
typedef mig_routine_t (*mig_server_routine_t)(mach_msg_header_t *);
typedef uint8_t priority_queue_key_t;
typedef void (*sf_unregistered_func)(sflt_handle);
struct task_category_policy {task_role_t role;};
typedef natural_t task_policy_flavor_t;
typedef uint8_t BluetoothDeviceName[248];
typedef uint32_t BluetoothHCIEventID;
typedef uint8_t BluetoothLMPVersion;
typedef uint16_t BluetoothPacketType;
typedef uint8_t BluetoothReasonCode;
struct IOFWAddressSpaceAux { OSObject cppsuper0;IOFWAddressSpace *fPrimary;IOFireWireController *fControl;OSSet *fTrustedNodeSet;OSIterator *fTrustedNodeSetIterator;char fExclusive;IOFWAddressSpaceAux__ExpansionData *reserved;};
typedef uint32_t IOHIDValueScaleType;
struct IOPMPowerSourceList { OSObject cppsuper0;IOPMPowerSource *firstItem;unsigned int length;};
struct IOReportChannelList {uint32_t nchannels;};
typedef uint64_t IOReportScaleFactor;
struct __attribute__((packed)) IOStateReportValues {uint64_t state_id;uint64_t intransitions;uint64_t upticks;uint64_t last_intransition;};
struct IOStorageCompletion {void *target;IOStorageCompletionAction action;void *parameter;};
struct IOUSBHostCompletion {void *owner;IOUSBHostCompletionAction action;void *parameter;};
struct IOUSBIsocCompletion {void *target;IOUSBIsocCompletionAction action;void *parameter;};
typedef void (*KeyboardEventAction)(OSObject *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char, AbsoluteTime);
typedef RegIterationOp RegEntryIterationOp;
typedef mach_port_t exception_handler_t;
typedef uint64_t io_user_reference_t;
typedef ledger_array_t ledger_port_array_t;
typedef natural_t mach_port_mscount_t;
struct mach_zone_info_data {uint64_t mzi_count;uint64_t mzi_cur_size;uint64_t mzi_max_size;uint64_t mzi_elem_size;uint64_t mzi_alloc_size;uint64_t mzi_sum_size;uint64_t mzi_exhaustible;uint64_t mzi_collectable;};
struct __attribute__((packed)) stackshot_cpu_times {uint64_t user_usec;uint64_t system_usec;};
struct task_zone_info_data {uint64_t tzi_count;uint64_t tzi_cur_size;uint64_t tzi_max_size;uint64_t tzi_elem_size;uint64_t tzi_alloc_size;uint64_t tzi_sum_size;uint64_t tzi_exhaustible;uint64_t tzi_collectable;uint64_t tzi_caller_acct;uint64_t tzi_task_alloc;uint64_t tzi_task_free;};
typedef thread_array_t thread_port_array_t;
typedef natural_t thread_state_data_t[614];
typedef uint64_t upl_control_flags_t;
struct version_min_command {uint32_t cmd;uint32_t cmdsize;uint32_t version;uint32_t sdk;};
struct Block_callbacks_RR {size_t size;void (*retain)( void *);void (*release)( void *);void (*destructInstance)( void *);};
typedef uint32_t BluetoothHCIDataID;
typedef uint8_t BluetoothHCIStatus;
typedef uint8_t BluetoothLMPHandle;
typedef uint16_t BluetoothRFCOMMMTU;
typedef uint16_t BluetoothSDPUUID16;
typedef uint32_t BluetoothSDPUUID32;
typedef void (*FWAsyncPHYCallback)(void *, IOReturn, IOFireWireBus *, IOFWAsyncPHYCommand *);
struct IOGatedOutputQueue { IOBasicOutputQueue cppsuper0;IOCommandGate *_gate;IOInterruptEventSource *_interruptSrc;};
typedef uint16_t IOReportCategories;
typedef IOReturn (*IOWorkLoop__Action)(OSObject *, void *, void *, void *, void *);
typedef io_user_reference_t OSAsyncReference64[8];
typedef uint8_t OSKextExcludeLevel;
struct VDRetrieveGammaRec {GammaTableID csGammaTableID;GammaTbl *csGammaTablePtr;};
struct build_tool_version {uint32_t tool;uint32_t version;};
struct ccrng_system_state {int (*generate)(ccrng_state *, size_t, void *);int fd;};
struct cpuid_mwait_leaf_t {uint32_t linesize_min;uint32_t linesize_max;uint32_t extensions;uint32_t sub_Cstates;};
struct cpuid_xsave_leaf_t {uint32_t extended_state[4];};
struct host_cpu_load_info {natural_t cpu_ticks[4];};
typedef natural_t mach_msg_timeout_t;
typedef natural_t mach_port_rights_t;
struct mach_timebase_info {uint32_t numer;uint32_t denom;};
struct __attribute__((packed)) stackshot_duration {uint64_t stackshot_duration;uint64_t stackshot_duration_outer;};
struct __attribute__((packed)) trust_cache_entry1 {uint8_t cdhash[20];uint8_t hash_type;uint8_t flags;};
typedef uint64_t vm_object_offset_t;
typedef uint16_t BluetoothL2CAPMTU;
typedef uint16_t BluetoothL2CAPPSM;
typedef uint8_t BluetoothLinkType;
typedef uint8_t BluetoothMaxSlots;
typedef uint8_t BluetoothSDPPDUID;
struct GTraceEntry__Args {GTraceEntry__Args___6D5E54D36E8AB60CED29166678469FE7 __anonymous0;};
struct IOBigMemoryCursor { IOMemoryCursor cppsuper0;};
struct IOConfigDirectory { OSObject cppsuper0;int fStart;int fType;int fNumEntries;IOConfigDirectory__ExpansionData *reserved;};
struct IOFireWireUnitAux { IOFireWireNubAux cppsuper0;IOFireWireUnitAux__ExpansionData *reserved;};
typedef uint32_t IOHIDElementFlags;
typedef uint32_t IOHIDStandardType;
typedef uint32_t IOHIDValueOptions;
struct IOSharedDataQueue { IODataQueue cppsuper0;IOSharedDataQueue__ExpansionData *_reserved;};
typedef RegModifiers RegEntryModifiers;
typedef VDClutBehavior *VDClutBehaviorPtr;
struct dyld_info_command {uint32_t cmd;uint32_t cmdsize;uint32_t rebase_off;uint32_t rebase_size;uint32_t bind_off;uint32_t bind_size;uint32_t weak_bind_off;uint32_t weak_bind_size;uint32_t lazy_bind_off;uint32_t lazy_bind_size;uint32_t export_off;uint32_t export_size;};
typedef void (*img4_destructor_t)(void *, size_t);
struct __attribute__((packed)) io_stats_snapshot {uint64_t ss_disk_reads_count;uint64_t ss_disk_reads_size;uint64_t ss_disk_writes_count;uint64_t ss_disk_writes_size;uint64_t ss_io_priority_count[4];uint64_t ss_io_priority_size[4];uint64_t ss_paging_count;uint64_t ss_paging_size;uint64_t ss_non_paging_count;uint64_t ss_non_paging_size;uint64_t ss_data_count;uint64_t ss_data_size;uint64_t ss_metadata_count;uint64_t ss_metadata_size;};
struct kev_in_arpfailure {net_event_data link_data;};
struct ledger_limit_args {char lla_name[32];uint64_t lla_limit;uint64_t lla_refill_period;};
typedef uint64_t mach_atm_subaid_t;
struct mach_core_details {uint64_t gzip_offset;uint64_t gzip_length;char core_name[16];};
typedef mach_port_t *mach_port_array_t;
typedef natural_t mach_port_right_t;
typedef natural_t mach_port_seqno_t;
typedef natural_t mach_port_urefs_t;
typedef uint64_t mach_vm_address_t;
struct __attribute__((packed)) nd_router_solicit {icmp6_hdr nd_rs_hdr;};
struct pal_efi_registers {uint64_t rcx;uint64_t rdx;uint64_t r8;uint64_t r9;uint64_t rax;};
struct rusage_info_child {uint64_t ri_child_user_time;uint64_t ri_child_system_time;uint64_t ri_child_pkg_idle_wkups;uint64_t ri_child_interrupt_wkups;uint64_t ri_child_pageins;uint64_t ri_child_elapsed_abstime;};
typedef task_array_t task_port_array_t;
typedef uint8_t trust_cache_hash0[20];
struct vm_purgeable_stat {uint64_t count;uint64_t size;};
typedef uint8_t BluetoothAFHMode;
typedef uint8_t BluetoothAirMode;
typedef uint8_t BluetoothHCIRole;
typedef uint8_t BluetoothKeyFlag;
typedef uint8_t BluetoothKeyType;
struct BluetoothPINCode {uint8_t data[16];};
typedef uint8_t BluetoothPINType;
typedef uint32_t BluetoothPasskey;
typedef void (*FWDeviceCallback)(void *, IOReturn, IOFireWireNub *, IOFWCommand *);
struct IOFWAddressSpace { OSObject cppsuper0;IOFireWireController *fControl;IOFWAddressSpace__ExpansionData *fIOFWAddressSpaceExpansion;};
struct IOFWCommand_vtbl; 
struct IOFWSkipCycleDCL { IOFWDCL cppsuper0;};
struct IOFireWireBusAux { OSObject cppsuper0;IOFireWireBusAux__ExpansionData *reserved;};
typedef uint32_t IOHIDOptionsType;
struct IOKitDiagnostics { OSObject cppsuper0;};
typedef uint8_t IOReportQuantity;
typedef natural_t OSAsyncReference[8];
typedef uint32_t OSKextRequestTag;
struct __SC_GenericBlob {uint32_t magic;uint32_t length;};
struct cpuid_tsc_leaf_t {uint32_t numerator;uint32_t denominator;};
struct dysymtab_command {uint32_t cmd;uint32_t cmdsize;uint32_t ilocalsym;uint32_t nlocalsym;uint32_t iextdefsym;uint32_t nextdefsym;uint32_t iundefsym;uint32_t nundefsym;uint32_t tocoff;uint32_t ntoc;uint32_t modtaboff;uint32_t nmodtab;uint32_t extrefsymoff;uint32_t nextrefsyms;uint32_t indirectsymoff;uint32_t nindirectsyms;uint32_t extreloff;uint32_t nextrel;uint32_t locreloff;uint32_t nlocrel;};
typedef exception_handler_t exception_port_t;
typedef uint8_t *gssd_byte_buffer;
struct hash_info_bucket {natural_t hib_count;};
typedef io_user_reference_t io_async_ref64_t[8];
typedef uint64_t io_user_scalar_t;
struct mach_port_limits {mach_port_msgcount_t mpl_qlimit;};
typedef natural_t mach_port_name_t;
typedef natural_t mach_port_type_t;
typedef uint64_t mach_vm_offset_t;
typedef uint64_t mailbox_offset_t;
typedef int open_close_fcn_t(dev_t, int, int, proc *);
typedef int read_write_fcn_t(dev_t, uio *, int);
struct routines_command {uint32_t cmd;uint32_t cmdsize;uint32_t init_address;uint32_t init_module;uint32_t reserved1;uint32_t reserved2;uint32_t reserved3;uint32_t reserved4;uint32_t reserved5;uint32_t reserved6;};
struct user32_itimerval {user32_timeval it_interval;user32_timeval it_value;};
typedef user32_ulong_t user32_msgqnum_t;
struct user64_itimerval {user64_timeval it_interval;user64_timeval it_value;};
typedef user64_ulong_t user64_msgqnum_t;
typedef uint32_t vm32_object_id_t;
typedef uint64_t vm_map_address_t;
typedef mach_port_t vm_named_entry_t;
typedef uint64_t vm_object_size_t;
struct GTraceEntry__ID {uint64_t fID;};
struct HIDUsageAndPage {HIDUsage usage;HIDUsage usagePage;};
union IOFBHDRMetaData {IOFBHDRMetaDataV1 v1;};
struct IOHIDCompletion {void *target;IOHIDCompletionAction action;void *parameter;};
typedef IOIndex IOPixelAperture;
struct IORegistryEntry { OSObject cppsuper0;IORegistryEntry__ExpansionData *reserved;OSDictionary *fRegistryTable;OSDictionary *fPropertyTable;};
struct IOUSBCompletion {void *target;IOUSBCompletionAction action;void *parameter;};
struct ftrimactivefile {off_t fta_offset;off_t fta_length;};
struct gpu_energy_data {uint64_t task_gpu_utilisation;uint64_t task_gpu_stat_reserved0;uint64_t task_gpu_stat_reserved1;uint64_t task_gpu_stat_reserved2;};
struct hv_trap_table_t { hv_trap_t *traps;unsigned int trap_count;};
struct kev_in_arpalive {net_event_data link_data;};
typedef mach_error_t (*mach_error_fn_t)(void);
typedef natural_t mach_msg_size_t;
typedef mach_port_t memory_object_t;
struct task_flags_info {uint32_t flags;};
struct task_power_info {uint64_t total_user;uint64_t total_system;uint64_t task_interrupt_wakeups;uint64_t task_platform_idle_wakeups;uint64_t task_timer_wakeups_bin_1;uint64_t task_timer_wakeups_bin_2;};
typedef natural_t thread_flavor_t;
typedef user32_ulong_t user32_msglen_t;
typedef user64_ulong_t user64_msglen_t;
typedef uint64_t vm_map_offset_t;
typedef mach_port_t vm_task_entry_t;
struct IODeviceMemory { IOMemoryDescriptor cppsuper0;};
typedef uint32_t IOHIDEventType;
typedef uint8_t IOReportFormat;
typedef IOOptionBits RuntimeOptions;
struct __SC_SuperBlob {uint32_t magic;uint32_t length;uint32_t count;};
typedef uint32_t atm_subaid32_t;
struct __attribute__((aligned(8))) ccdigest_state {ccdigest_state___67175509AEF0CB0D0935ED80FD36639C state;};
struct gpu_descriptor {uint32_t gpu_id;uint32_t gpu_max_domains;};
struct icmp__ih_idseq {n_short icd_id;n_short icd_seq;};
typedef natural_t io_async_ref_t[8];
struct ip_mreq_source {in_addr imr_multiaddr;in_addr imr_sourceaddr;in_addr imr_interface;};
struct ipc_info_space {natural_t iis_genno_mask;natural_t iis_table_size;natural_t iis_table_next;natural_t iis_tree_size;natural_t iis_tree_small;natural_t iis_tree_hash;};
struct lockgroup_info {char lockgroup_name[64];uint64_t lockgroup_attr;uint64_t lock_spin_cnt;uint64_t lock_spin_util_cnt;uint64_t lock_spin_held_cnt;uint64_t lock_spin_miss_cnt;uint64_t lock_spin_held_max;uint64_t lock_spin_held_cum;uint64_t lock_mtx_cnt;uint64_t lock_mtx_util_cnt;uint64_t lock_mtx_held_cnt;uint64_t lock_mtx_miss_cnt;uint64_t lock_mtx_wait_cnt;uint64_t lock_mtx_held_max;uint64_t lock_mtx_held_cum;uint64_t lock_mtx_wait_max;uint64_t lock_mtx_wait_cum;uint64_t lock_rw_cnt;uint64_t lock_rw_util_cnt;uint64_t lock_rw_held_cnt;uint64_t lock_rw_miss_cnt;uint64_t lock_rw_wait_cnt;uint64_t lock_rw_held_max;uint64_t lock_rw_held_cum;uint64_t lock_rw_wait_max;uint64_t lock_rw_wait_cum;};
typedef uint64_t mach_vm_size_t;
typedef mach_port_t mach_voucher_t;
typedef uint32_t os_ref_count_t;
typedef uint32_t sfi_class_id_t;
struct symseg_command {uint32_t cmd;uint32_t cmdsize;uint32_t offset;uint32_t size;};
struct symtab_command {uint32_t cmd;uint32_t cmdsize;uint32_t symoff;uint32_t nsyms;uint32_t stroff;uint32_t strsize;};
struct thread_command {uint32_t cmd;uint32_t cmdsize;};
typedef natural_t *thread_state_t;
struct uint128_data_t {uint64_t high;uint64_t low;};
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
struct user32_sf_hdtr {user32_addr_t headers;int hdr_cnt;user32_addr_t trailers;int trl_cnt;};
struct user64_sf_hdtr {user64_addr_t headers;int hdr_cnt;user64_addr_t trailers;int trl_cnt;};
typedef user_ulong_t user_msgqnum_t;
typedef uint8_t BluetoothRole;
typedef AVIDType DisplayIDType;
typedef void (*FWBusCallback)(void *, IOReturn, IOFireWireBus *, IOFWBusCommand *);
struct IOCommandGate { IOEventSource cppsuper0;IOCommandGate__ExpansionData *reserved;};
struct IOFWIsochPort { OSObject cppsuper0;};
typedef IOByteCount IORangeScalar;
typedef uint64_t IOReportUnits;
typedef uint32_t OSKextLoadTag;
typedef uint32_t OSKextLogSpec;
struct OpaqueDTEntry {uint32_t nProperties;uint32_t nChildren;};
struct attribute_set {attrgroup_t commonattr;attrgroup_t volattr;attrgroup_t dirattr;attrgroup_t fileattr;attrgroup_t forkattr;};
typedef uint32_t bank_action_t;
typedef mach_port_t clock_reply_t;
struct componentname {uint32_t cn_nameiop;uint32_t cn_flags;void *cn_reserved1;void *cn_reserved2;char *cn_pnbuf;int cn_pnlen;char *cn_nameptr;int cn_namelen;uint32_t cn_hash;uint32_t cn_consume;};
typedef uint32_t *gssd_gid_list;
struct icmp__ih_pmtu {n_short ipm_void;n_short ipm_nextmtu;};
struct ident_command {uint32_t cmd;uint32_t cmdsize;};
struct io_stat_entry {uint64_t count;uint64_t size;};
typedef natural_t ledger_item_t;
struct mach_port_qos {unsigned int name : 1;unsigned int prealloc : 1;int pad1 : 30;natural_t len;};
typedef mach_port_t notify_port_t;
struct persona_token {proc_persona_info originator;proc_persona_info proximate;};
typedef natural_t task_flavor_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
typedef uint8_t uint_least8_t;
typedef user_ulong_t user_msglen_t;
typedef uint64_t vm_map_size_t;
struct vm_statistics {natural_t free_count;natural_t active_count;natural_t inactive_count;natural_t wire_count;natural_t zero_fill_count;natural_t reactivations;natural_t pageins;natural_t pageouts;natural_t faults;natural_t cow_faults;natural_t lookups;natural_t hits;natural_t purgeable_count;natural_t purges;natural_t speculative_count;};
struct x86_state_hdr {uint32_t flavor;uint32_t count;};
struct BluetoothIRK {uint8_t data[16];};
struct BluetoothKey {uint8_t data[16];};
typedef uint32_t BluetoothLAP;
struct Boot_VideoV1 {uint32_t v_baseAddr;uint32_t v_display;uint32_t v_rowBytes;uint32_t v_width;uint32_t v_height;uint32_t v_depth;};
struct DTSavedScope {DTSavedScope *nextScope;RealDTEntry scope;RealDTEntry entry;unsigned int index;};
struct GTraceBuffer { OSObject cppsuper0;};
struct IODCLProgram { OSObject cppsuper0;void *reserved0;void *reserved1;void *reserved2;void *reserved3;IOMemoryMap *fBufferMem;void *reserved5;IODCLProgram__ExpansionData *fExpansionData;};
typedef uint64_t IOReportUnit;
struct KeyAttribute {uint32_t _flags;};
struct OSCollection { OSObject cppsuper0;unsigned int updateStamp;unsigned int fOptions;};
struct OSDictionary { OSCollection cppsuper0;OSDictionary__dictEntry *dictionary;unsigned int count;unsigned int capacity;unsigned int capacityIncrement;OSDictionary__ExpansionData *reserved;};
typedef mach_port_t UNDServerRef;
typedef USBStatus *USBStatusPtr;
typedef uint32_t atm_action_t;
struct __attribute__((aligned(8))) ccdigest_ctx {ccdigest_ctx___67175509AEF0CB0D0935ED80FD36639C state;};
typedef uint32_t clock_nsec_t;
typedef uint32_t clock_usec_t;
typedef tty *d_devtotty_t(dev_t);
struct dylib_module {uint32_t module_name;uint32_t iextdefsym;uint32_t nextdefsym;uint32_t irefsym;uint32_t nrefsym;uint32_t ilocalsym;uint32_t nlocalsym;uint32_t iextrel;uint32_t nextrel;uint32_t iinit_iterm;uint32_t ninit_nterm;uint32_t objc_module_info_addr;uint32_t objc_module_info_size;};
struct icmp6_ifstat {u_quad_t ifs6_in_msg;u_quad_t ifs6_in_error;u_quad_t ifs6_in_dstunreach;u_quad_t ifs6_in_adminprohib;u_quad_t ifs6_in_timeexceed;u_quad_t ifs6_in_paramprob;u_quad_t ifs6_in_pkttoobig;u_quad_t ifs6_in_echo;u_quad_t ifs6_in_echoreply;u_quad_t ifs6_in_routersolicit;u_quad_t ifs6_in_routeradvert;u_quad_t ifs6_in_neighborsolicit;u_quad_t ifs6_in_neighboradvert;u_quad_t ifs6_in_redirect;u_quad_t ifs6_in_mldquery;u_quad_t ifs6_in_mldreport;u_quad_t ifs6_in_mlddone;u_quad_t ifs6_out_msg;u_quad_t ifs6_out_error;u_quad_t ifs6_out_dstunreach;u_quad_t ifs6_out_adminprohib;u_quad_t ifs6_out_timeexceed;u_quad_t ifs6_out_paramprob;u_quad_t ifs6_out_pkttoobig;u_quad_t ifs6_out_echo;u_quad_t ifs6_out_echoreply;u_quad_t ifs6_out_routersolicit;u_quad_t ifs6_out_routeradvert;u_quad_t ifs6_out_neighborsolicit;u_quad_t ifs6_out_neighboradvert;u_quad_t ifs6_out_redirect;u_quad_t ifs6_out_mldquery;u_quad_t ifs6_out_mldreport;u_quad_t ifs6_out_mlddone;};
struct icmp6errstat {u_quad_t icp6errs_dst_unreach_noroute;u_quad_t icp6errs_dst_unreach_admin;u_quad_t icp6errs_dst_unreach_beyondscope;u_quad_t icp6errs_dst_unreach_addr;u_quad_t icp6errs_dst_unreach_noport;u_quad_t icp6errs_packet_too_big;u_quad_t icp6errs_time_exceed_transit;u_quad_t icp6errs_time_exceed_reassembly;u_quad_t icp6errs_paramprob_header;u_quad_t icp6errs_paramprob_nextheader;u_quad_t icp6errs_paramprob_option;u_quad_t icp6errs_redirect;u_quad_t icp6errs_unknown;};
struct io_stat_info {io_stat_entry disk_reads;io_stat_entry io_priority[4];io_stat_entry paging;io_stat_entry metadata;io_stat_entry total_io;};
typedef uint64_t kpc_config_t;
struct load_command {uint32_t cmd;uint32_t cmdsize;};
struct msg_labels_t {mach_port_name_t sender;};
struct sa_endpoints {unsigned int sae_srcif; sockaddr *sae_srcaddr;socklen_t sae_srcaddrlen; sockaddr *sae_dstaddr;socklen_t sae_dstaddrlen;};
typedef int select_fcn_t(dev_t, int, void *, proc *);
typedef uint32_t sock_storage[32];
typedef uint8_t uint_fast8_t;
typedef uint32_t upl_offset_t;
struct user_sf_hdtr {user_addr_t headers;int hdr_cnt;user_addr_t trailers;int trl_cnt;};
struct IOMemoryMap { OSObject cppsuper0;};
typedef mach_port_t UNDReplyRef;
struct __BlobIndex {uint32_t type;uint32_t offset;};
typedef uint64_t atm_guard_t;
typedef mach_port_t bootstrap_t;
typedef  cc_unit *cc2np2_in_t;
struct __attribute__((aligned(16))) ccccm_nonce {uint8_t b[16];};
struct ccdrbg_info {size_t size;int (*init)( ccdrbg_info *, ccdrbg_state *, size_t,  void *, size_t,  void *, size_t,  void *);int (*reseed)(ccdrbg_state *, size_t,  void *, size_t,  void *);int (*generate)(ccdrbg_state *, size_t, void *, size_t,  void *);void (*done)(ccdrbg_state *); void *custom;};
struct ccmode_cfb8 {size_t size;size_t block_size;int (*init)( ccmode_cfb8 *, cccfb8_ctx *, size_t,  void *,  void *);int (*cfb8)(cccfb8_ctx *, size_t,  void *, void *); void *custom;};
struct ccmode_omac {size_t size;size_t block_size;int (*init)( ccmode_omac *, ccomac_ctx *, size_t, size_t,  void *);int (*omac)(ccomac_ctx *, size_t,  void *,  void *, void *); void *custom;};
struct ccrng_state {int (*generate)(ccrng_state *, size_t, void *);};
struct __attribute__((aligned(16))) ccxts_tweak {uint8_t b[16];};
typedef uint32_t clock_sec_t;
struct dk_extent_t {uint64_t offset;uint64_t length;};
struct icmp__id_ip {ip idi_ip;};
struct icmp__id_ts {n_time its_otime;n_time its_rtime;n_time its_ttime;};
struct in_aliasreq {char ifra_name[16];sockaddr_in ifra_addr;sockaddr_in ifra_broadaddr;sockaddr_in ifra_mask;};
typedef mach_port_t io_master_t;
typedef uint32_t kxld_addr_t;
typedef uint32_t kxld_size_t;
typedef mach_port_name_t port_name_t;
typedef int psize_fcn_t(dev_t);
struct vDSP_uint24 {uint8_t bytes[3];};
struct vfs_fsentry {vfsops *vfe_vfsops;int vfe_vopcnt;vnodeopv_desc **vfe_opvdescs;int vfe_fstypenum;char vfe_fsname[15];uint32_t vfe_flags;void *vfe_reserv[2];};
typedef natural_t vm_offset_t;
struct IOATAReg16 { OSObject cppsuper0;};
struct IOATAReg32 { OSObject cppsuper0;};
struct IONotifier { OSObject cppsuper0;};
struct IOPCIEvent {IOPCIDevice *reporter;uint32_t event;uint32_t data[5];};
struct OSIterator { OSObject cppsuper0;};
typedef ResType *ResTypePtr;
struct SHA256_CTX {ccdigest_ctx ctx[14];};
struct SHA512_CTX {ccdigest_ctx ctx[26];};
struct __attribute__((aligned(16))) cccfb8_ctx {uint8_t b[16];};
struct __attribute__((aligned(8))) cchmac_ctx {uint8_t b[8];};
struct ccmode_cbc {size_t size;size_t block_size;int (*init)( ccmode_cbc *, cccbc_ctx *, size_t,  void *);int (*cbc)( cccbc_ctx *, cccbc_iv *, size_t,  void *, void *); void *custom;};
struct ccmode_ccm {size_t size;size_t nonce_size;size_t block_size;int (*init)( ccmode_ccm *, ccccm_ctx *, size_t,  void *);int (*set_iv)(ccccm_ctx *, ccccm_nonce *, size_t,  void *, size_t, size_t, size_t);int (*cbcmac)(ccccm_ctx *, ccccm_nonce *, size_t,  void *);int (*ccm)(ccccm_ctx *, ccccm_nonce *, size_t,  void *, void *);int (*finalize)(ccccm_ctx *, ccccm_nonce *, void *);int (*reset)(ccccm_ctx *, ccccm_nonce *); void *custom;};
struct ccmode_cfb {size_t size;size_t block_size;int (*init)( ccmode_cfb *, cccfb_ctx *, size_t,  void *,  void *);int (*cfb)(cccfb_ctx *, size_t,  void *, void *); void *custom;};
struct ccmode_ctr {size_t size;size_t block_size;size_t ecb_block_size;int (*init)( ccmode_ctr *, ccctr_ctx *, size_t,  void *,  void *);int (*setctr)( ccmode_ctr *, ccctr_ctx *,  void *);int (*ctr)(ccctr_ctx *, size_t,  void *, void *); void *custom;};
struct ccmode_ecb {size_t size;size_t block_size;int (*init)( ccmode_ecb *, ccecb_ctx *, size_t,  void *);int (*ecb)( ccecb_ctx *, size_t,  void *, void *);};
struct ccmode_gcm {size_t size;int encdec;size_t block_size;int (*init)( ccmode_gcm *, ccgcm_ctx *, size_t,  void *);int (*set_iv)(ccgcm_ctx *, size_t,  void *);int (*gmac)(ccgcm_ctx *, size_t,  void *);int (*gcm)(ccgcm_ctx *, size_t,  void *, void *);int (*finalize)(ccgcm_ctx *, size_t, void *);int (*reset)(ccgcm_ctx *); void *custom;};
struct ccmode_ofb {size_t size;size_t block_size;int (*init)( ccmode_ofb *, ccofb_ctx *, size_t,  void *,  void *);int (*ofb)(ccofb_ctx *, size_t,  void *, void *); void *custom;};
struct ccmode_xts {size_t size;size_t tweak_size;size_t block_size;int (*init)( ccmode_xts *, ccxts_ctx *, size_t,  void *,  void *);void (*key_sched)( ccmode_xts *, ccxts_ctx *, size_t,  void *,  void *);int (*set_tweak)( ccxts_ctx *, ccxts_tweak *,  void *);void *(*xts)( ccxts_ctx *, ccxts_tweak *, size_t,  void *, void *); void *custom; void *custom1;};
typedef  cc_unit *ccnp1_in_t;
struct __attribute__((aligned(16))) ccomac_ctx {uint8_t b[16];};
struct ccrc4_info {size_t size;void (*init)(ccrc4_ctx *, size_t,  void *);void (*crypt)(ccrc4_ctx *, size_t,  void *, void *);};
struct fat_header {uint32_t magic;uint32_t nfat_arch;};
struct fpunchhole {unsigned int fp_flags;unsigned int reserved;off_t fp_offset;off_t fp_length;};
struct ifaliasreq {char ifra_name[16];sockaddr ifra_addr;sockaddr ifra_broadaddr;sockaddr ifra_mask;};
typedef uint32_t img4_tag_t;
struct in6_ifstat {u_quad_t ifs6_in_receive;u_quad_t ifs6_in_hdrerr;u_quad_t ifs6_in_toobig;u_quad_t ifs6_in_noroute;u_quad_t ifs6_in_addrerr;u_quad_t ifs6_in_protounknown;u_quad_t ifs6_in_truncated;u_quad_t ifs6_in_discard;u_quad_t ifs6_in_deliver;u_quad_t ifs6_out_forward;u_quad_t ifs6_out_request;u_quad_t ifs6_out_discard;u_quad_t ifs6_out_fragok;u_quad_t ifs6_out_fragfail;u_quad_t ifs6_out_fragcreat;u_quad_t ifs6_reass_reqd;u_quad_t ifs6_reass_ok;u_quad_t ifs6_atmfrag_rcvd;u_quad_t ifs6_reass_fail;u_quad_t ifs6_in_mcast;u_quad_t ifs6_out_mcast;u_quad_t ifs6_cantfoward_icmp6;u_quad_t ifs6_addr_expiry_cnt;u_quad_t ifs6_pfx_expiry_cnt;u_quad_t ifs6_defrtr_expiry_cnt;};
struct in_pktinfo {unsigned int ipi_ifindex;in_addr ipi_spec_dst;in_addr ipi_addr;};
struct kd_event_t {uint32_t id; char *name;};
typedef uint8_t nfs_handle[64];
struct ntptimeval {timespec time;int maxerror;int esterror;int tai;int time_state;};
typedef uint32_t upl_size_t;
struct vDSP_int24 {uint8_t bytes[3];};
struct IOATAReg8 { OSObject cppsuper0;};
struct OSBoolean { OSObject cppsuper0;char value;};
typedef OSType *OSTypePtr;
typedef uint64_t atm_aid_t;
typedef pid_t au_asid_t;
typedef  cc_unit *cc2n_in_t;
struct __attribute__((aligned(16))) cccbc_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccccm_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) cccfb_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccctr_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccecb_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccgcm_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccofb_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccrc4_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccsiv_ctx {uint8_t b[16];};
struct __attribute__((aligned(16))) ccxts_ctx {uint8_t b[16];};
typedef uint8_t dyld_bool;
typedef uint64_t event64_t;
typedef uint64_t gssd_cred;
struct if_msghdr {unsigned short ifm_msglen;unsigned char ifm_version;unsigned char ifm_type;int ifm_addrs;int ifm_flags;unsigned short ifm_index;if_data ifm_data;};
struct ifmibdata {char ifmd_name[16];unsigned int ifmd_pcount;unsigned int ifmd_flags;unsigned int ifmd_snd_len;unsigned int ifmd_snd_maxlen;unsigned int ifmd_snd_drops;unsigned int ifmd_filler[4];if_data64 ifmd_data;};
typedef u_quad_t inp_gen_t;
struct ipsecstat {__attribute__((aligned(8))) u_quad_t in_success;__attribute__((aligned(8))) u_quad_t in_polvio;__attribute__((aligned(8))) u_quad_t in_nosa;__attribute__((aligned(8))) u_quad_t in_inval;__attribute__((aligned(8))) u_quad_t in_nomem;__attribute__((aligned(8))) u_quad_t in_badspi;__attribute__((aligned(8))) u_quad_t in_ahreplay;__attribute__((aligned(8))) u_quad_t in_espreplay;__attribute__((aligned(8))) u_quad_t in_ahauthsucc;__attribute__((aligned(8))) u_quad_t in_ahauthfail;__attribute__((aligned(8))) u_quad_t in_espauthsucc;__attribute__((aligned(8))) u_quad_t in_espauthfail;__attribute__((aligned(8))) u_quad_t in_esphist[256];__attribute__((aligned(8))) u_quad_t in_ahhist[256];__attribute__((aligned(8))) u_quad_t in_comphist[256];__attribute__((aligned(8))) u_quad_t out_success;__attribute__((aligned(8))) u_quad_t out_polvio;__attribute__((aligned(8))) u_quad_t out_nosa;__attribute__((aligned(8))) u_quad_t out_inval;__attribute__((aligned(8))) u_quad_t out_nomem;__attribute__((aligned(8))) u_quad_t out_noroute;__attribute__((aligned(8))) u_quad_t out_esphist[256];__attribute__((aligned(8))) u_quad_t out_ahhist[256];__attribute__((aligned(8))) u_quad_t out_comphist[256];};
struct itimerval {timeval it_interval;timeval it_value;};
struct mt_thread {long long mth_gen;uint64_t mth_counts[3];};
typedef uint32_t netaddr_t;
typedef vm_offset_t pointer_t;
struct radvisory {off_t ra_offset;int ra_count;};
typedef u_quad_t unp_gen_t;
typedef Fixed *FixedPtr;
typedef Fract *FractPtr;
struct OSNumber { OSObject cppsuper0;unsigned long long value;unsigned int size;OSNumber__ExpansionData *reserved;};
typedef uint64_t addr64_t;
typedef cc_unit *cc2np2_t;
typedef uint64_t cc_dunit;
struct __attribute__((aligned(16))) cccbc_iv {uint8_t b[16];};
typedef  cc_unit *ccn_in_t;
typedef uint64_t gssd_ctx;
struct in6_addr {in6_addr___330434928707C706902F20BE7BA89EB4 __u6_addr;};
struct ip_mreqn {in_addr imr_multiaddr;in_addr imr_address;int imr_ifindex;};
struct log2phys {unsigned int l2p_flags;off_t l2p_contigbytes;off_t l2p_devoffset;};
struct rip6stat {u_quad_t rip6s_ipackets;u_quad_t rip6s_isum;u_quad_t rip6s_badsum;u_quad_t rip6s_nosock;u_quad_t rip6s_nosockmcast;u_quad_t rip6s_fullsock;u_quad_t rip6s_opackets;};
typedef u_quad_t so_gen_t;
typedef uint64_t subaid_t;
struct OSArray { OSCollection cppsuper0; OSMetaClassBase **array;unsigned int count;unsigned int capacity;unsigned int capacityIncrement;OSArray__ExpansionData *reserved;};
typedef uid_t au_id_t;
typedef uint8_t cc_byte;
typedef size_t cc_size;
typedef quad_t *qaddr_t;
struct arpreq {sockaddr arp_pa;sockaddr arp_ha;int arp_flags;};
struct fstore {unsigned int fst_flags;int fst_posmode;off_t fst_offset;off_t fst_length;off_t fst_bytesalloc;};
struct rusage {timeval ru_utime;timeval ru_stime;int ru_maxrss;int ru_ixrss;int ru_idrss;int ru_isrss;int ru_minflt;int ru_majflt;int ru_nswap;int ru_inblock;int ru_oublock;int ru_msgsnd;int ru_msgrcv;int ru_nsignals;int ru_nvcsw;int ru_nivcsw;};
struct OSSet { OSCollection cppsuper0;OSArray *members;OSSet__ExpansionData *reserved;};
struct ifreq {char ifr_name[16];ifreq___E0FC42874A550D533741D474A8188B08 ifr_ifru;};
struct BluetoothHCIEventReturnLinkKeysResults___D23A5AC893EF1B7E3F8BC90A104FF4A8 {BluetoothDeviceAddress deviceAddress;BluetoothKey linkKey;};
struct __attribute__((packed)) BluetoothHCIEventLEReadRemoteUsedFeaturesCompleteResults {BluetoothConnectionHandle connectionHandle;BluetoothHCISupportedFeatures usedFeatures;};
union HIDButtonCapabilities___CF48DBD306996A2DDCB8A3B00B8AFEB9 {_DAC77EA8E8A0BF31FD8675571F8AEEAD range;_D66CA102EDE5E62C512F01257BBA43A6 notRange;};
union HIDValueCapabilities___CF48DBD306996A2DDCB8A3B00B8AFEB9 {_DAC77EA8E8A0BF31FD8675571F8AEEAD range;_D66CA102EDE5E62C512F01257BBA43A6 notRange;};
union IOTimingInformation___8835273DE2D8B8F8CED797132B704498 {IODetailedTimingInformationV1 v1;IODetailedTimingInformationV2 v2;};
struct BluetoothHCIEventPageScanRepetitionModeChangeResults {BluetoothDeviceAddress deviceAddress;BluetoothPageScanRepetitionMode pageScanRepetitionMode;};
struct __attribute__((packed)) BluetoothHCIEventLEConnectionUpdateCompleteResults {BluetoothConnectionHandle connectionHandle;uint16_t connInterval;uint16_t connLatency;uint16_t supervisionTimeout;};
struct BluetoothRemoteHostSupportedFeaturesNotification {BluetoothDeviceAddress deviceAddress;BluetoothHCISupportedFeatures hostSupportedFeatures;};
struct CDAudioStatus___3EF02E475673C285A8B037641EB32711 {CDMSF time;_97FA55610E70EED36F23615CB8D37A51 track;};
union HIDButtonCaps___CF48DBD306996A2DDCB8A3B00B8AFEB9 {_DAC77EA8E8A0BF31FD8675571F8AEEAD range;_D66CA102EDE5E62C512F01257BBA43A6 notRange;};
union HIDValueCaps___CF48DBD306996A2DDCB8A3B00B8AFEB9 {_DAC77EA8E8A0BF31FD8675571F8AEEAD range;_D66CA102EDE5E62C512F01257BBA43A6 notRange;};
struct BluetoothHCIReadExtendedInquiryResponseResults {BluetoothHCIFECRequired outFECRequired;BluetoothHCIExtendedInquiryResponse extendedInquiryResponse;};
struct NXEventData___5862481EA8702BDE8B161E10452DA66B {SInt16 reserved;SInt16 subType;_64883DA235470546DFCFEE5C08C7D090 misc;};
struct BluetoothHCICurrentInquiryAccessCodesForWrite {BluetoothHCIInquiryAccessCodeCount count;uint8_t codes[192];};
struct BluetoothHCIEventDisconnectionCompleteResults {BluetoothConnectionHandle connectionHandle;BluetoothReasonCode reason;};
struct BluetoothHCIEventMasterLinkKeyCompleteResults {BluetoothConnectionHandle connectionHandle;BluetoothKeyFlag keyFlag;};
struct BluetoothHCIEventReadSupportedFeaturesResults {BluetoothConnectionHandle connectionHandle;BluetoothHCISupportedFeatures supportedFeatures;};
struct BluetoothHCIEventConnectionPacketTypeResults {BluetoothConnectionHandle connectionHandle;BluetoothPacketType packetType;};
struct __attribute__((packed)) StandardUSB__InterfaceAssociationDescriptor : StandardUSB__Descriptor {uint8_t bFirstInterface;uint8_t bInterfaceCount;uint8_t bFunctionClass;uint8_t bFunctionSubClass;uint8_t bFunctionProtocol;uint8_t iFunction;};
union xinpcb64___8484DCF5CF4707A7FE251BC9B24F4E7E {in_addr_4in6 inp46_foreign;in6_addr inp6_foreign;};
union xinpcb64___C7595A3B4BE5971B51D33E1DD0735D09 {in_addr_4in6 inp46_local;in6_addr inp6_local;};
struct BluetoothHCIEventPageScanModeChangeResults {BluetoothDeviceAddress deviceAddress;BluetoothPageScanMode pageScanMode;};
union ip6_hdr___4B39ABADBFFE16DEF7AD006048FD8DAF {ip6_hdr__ip6_hdrctl ip6_un1;u_int8_t ip6_un2_vfc;};
struct BluetoothHCIEventRemoteNameRequestResults {BluetoothDeviceAddress deviceAddress;BluetoothDeviceName deviceName;};
struct BluetoothHCIEventEncryptionChangeResults {BluetoothConnectionHandle connectionHandle;BluetoothEncryptionEnable enable;};
struct BluetoothHCIEventQoSSetupCompleteResults {BluetoothConnectionHandle connectionHandle;BluetoothHCIQualityOfServiceSetupParams setupParams;};
union inpcb___8484DCF5CF4707A7FE251BC9B24F4E7E {in_addr_4in6 inp46_foreign;in6_addr inp6_foreign;};
union inpcb___C7595A3B4BE5971B51D33E1DD0735D09 {in_addr_4in6 inp46_local;in6_addr inp6_local;};
struct BluetoothHCIEventReadClockOffsetResults {BluetoothConnectionHandle connectionHandle;BluetoothClockOffset clockOffset;};
struct __attribute__((packed)) StandardUSB__DeviceCapabilityDescriptor : StandardUSB__Descriptor {uint8_t bDevCapabilityType;};
struct BluetoothHCIEventMaxSlotsChangeResults {BluetoothConnectionHandle connectionHandle;BluetoothMaxSlots maxSlots;};
struct BluetoothHCIEventReturnLinkKeysResults {uint8_t numLinkKeys;BluetoothHCIEventReturnLinkKeysResults___D23A5AC893EF1B7E3F8BC90A104FF4A8 linkKeys[1];};
struct BluetoothHCIEventSniffSubratingResults {BluetoothConnectionHandle connectionHandle;uint16_t maxTransmitLatency;uint16_t maxReceiveLatency;uint16_t minRemoteTimeout;uint16_t minLocalTimeout;};
struct BluetoothHCIAutomaticFlushTimeoutInfo {BluetoothConnectionHandle handle;BluetoothHCIAutomaticFlushTimeout timeout;};
struct BluetoothHCILinkPolicySettingsInfo {BluetoothHCILinkPolicySettings settings;BluetoothConnectionHandle handle;};
struct BluetoothHCILinkSupervisionTimeout {BluetoothConnectionHandle handle;uint16_t timeout;};
struct BluetoothHCITransmitPowerLevelInfo {BluetoothConnectionHandle handle;BluetoothHCITransmitPowerLevel level;};
typedef char (*img4_get_object_entitlement_bool_t)(img4_t *, img4_tag_t, img4_tag_t);
struct BluetoothHCIEncryptionKeySizeInfo {BluetoothConnectionHandle handle;BluetoothHCIEncryptionKeySize keySize;};
struct IOAudioClientBufferExtendedInfo64 {IOAudioClientBufferExtendedInfo mAudioClientBufferExtended32;mach_vm_address_t mUnmappedParamBuffer64;IOAudioClientBufferExtendedInfo64 *mNextExtended64;};
struct mach_msg_ool_ports_descriptor32_t {uint32_t address;mach_msg_size_t count;int deallocate : 8;unsigned int copy : 8;unsigned int disposition : 8;unsigned int type : 8;};
struct mach_msg_ool_ports_descriptor64_t {uint64_t address;int deallocate : 8;unsigned int copy : 8;unsigned int disposition : 8;unsigned int type : 8;mach_msg_size_t count;};
struct BluetoothHCIExtendedFeaturesInfo {BluetoothHCIPageNumber page;BluetoothHCIPageNumber maxPage;uint8_t data[8];};
struct BluetoothUserConfirmationRequest {BluetoothDeviceAddress deviceAddress;BluetoothNumericValue numericValue;};
struct BluetoothUserPasskeyNotification {BluetoothDeviceAddress deviceAddress;BluetoothPasskey passkey;};
struct __attribute__((packed)) StandardUSB__InterfaceDescriptor : StandardUSB__Descriptor {uint8_t bInterfaceNumber;uint8_t bAlternateSetting;uint8_t bNumEndpoints;uint8_t bInterfaceClass;uint8_t bInterfaceSubClass;uint8_t bInterfaceProtocol;uint8_t iInterface;};
struct mach_msg_ool_ports_descriptor_t {void *address;mach_msg_size_t count;int deallocate : 8;unsigned int copy : 8;unsigned int disposition : 8;unsigned int type : 8;uint32_t pad_end;};
struct BluetoothHCIFailedContactInfo {BluetoothHCIFailedContactCount count;BluetoothConnectionHandle handle;};
struct BluetoothKeypressNotification {BluetoothDeviceAddress deviceAddress;BluetoothKeypressNotificationType notificationType;};
struct __attribute__((packed)) StandardUSB__StringDescriptor : StandardUSB__Descriptor {uint8_t bString[1];};
struct IOFilterInterruptEventSource { IOInterruptEventSource cppsuper0;IOFilterInterruptEventSource__Filter filterAction;IOFilterInterruptEventSource__ExpansionData *reserved;};
struct BluetoothHCILinkQualityInfo {BluetoothConnectionHandle handle;BluetoothHCILinkQuality qualityValue;};
typedef char (*img4_get_entitlement_bool_t)(img4_t *, img4_tag_t);
struct mach_msg_ool_descriptor32_t {uint32_t address;mach_msg_size_t size;int deallocate : 8;unsigned int copy : 8;unsigned int pad1 : 8;unsigned int type : 8;};
struct mach_msg_ool_descriptor64_t {uint64_t address;int deallocate : 8;unsigned int copy : 8;unsigned int pad1 : 8;unsigned int type : 8;mach_msg_size_t size;};
struct IOFWBusCommand_vtbl_layout; 
struct IOServiceInterestContent64 {natural_t messageType;io_user_reference_t messageArgument[1];};
struct mach_msg_type_descriptor_t {natural_t pad1;mach_msg_size_t pad2;unsigned int pad3 : 24;unsigned int type : 8;};
struct auditpipe_ioctl_preselect {au_id_t aip_auid;au_mask_t aip_mask;};
struct mach_msg_ool_descriptor_t {void *address;mach_msg_size_t size;int deallocate : 8;unsigned int copy : 8;unsigned int pad1 : 8;unsigned int type : 8;uint32_t pad_end;};
struct IOExternalMethodDispatch {IOExternalMethodAction function;uint32_t checkScalarInputCount;uint32_t checkStructureInputSize;uint32_t checkScalarOutputCount;uint32_t checkStructureOutputSize;};
struct IOFWPhysicalAddressSpace { IOFWAddressSpace cppsuper0;IOMemoryDescriptor *fMem;vm_size_t fLen;};
struct IOMultiMemoryDescriptor { IOMemoryDescriptor cppsuper0;IOMemoryDescriptor **_descriptors;UInt32 _descriptorsCount;char _descriptorsIsAllocated;};
struct memory_object_perf_info {memory_object_cluster_size_t cluster_size;boolean_t may_cache;};
struct IOFWSyncer_vtbl_layout; 
struct IOLocalConfigDirectory { IOConfigDirectory cppsuper0;OSArray *fEntries;OSData *fROM;UInt32 fHeader;IOLocalConfigDirectory__ExpansionData *reserved;};
struct shared_region_range_np {mach_vm_address_t srr_address;mach_vm_size_t srr_size;};
struct IOAudioClientBuffer64 {IOAudioClientBuffer mAudioClientBuffer32;mach_vm_address_t mUnmappedSourceBuffer64;IOAudioClientBuffer64 *mNextBuffer64;};
struct IOSubMemoryDescriptor { IOMemoryDescriptor cppsuper0;IOMemoryDescriptor *_parent;IOByteCount _start;};
struct VDMultiConnectInfoRec {UInt32 csDisplayCountOrNumber;VDDisplayConnectInfoRec csConnectInfo;};
struct BluetoothHCIRSSIInfo {BluetoothConnectionHandle handle;BluetoothHCIRSSIValue RSSIValue;};
struct BluetoothHCIRoleInfo {uint8_t role;BluetoothConnectionHandle handle;};
struct IOPCIPhysicalAddress {IOPCIAddressSpace physHi;UInt32 physMid;UInt32 physLo;UInt32 lengthHi;UInt32 lengthLo;};
struct mach_core_fileheader {uint64_t signature;uint64_t log_offset;uint64_t log_length;uint64_t num_files;mach_core_details files[16];};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrForkData {u_int32_t recordType;u_int32_t reserved;HFSPlusForkData theFork;};
struct IOFWBusCommand_vtbl; 
struct __attribute__((packed)) nd_neighbor_solicit {icmp6_hdr nd_ns_hdr;in6_addr nd_ns_target;};
struct IOMbufMemoryCursor { IOMemoryCursor cppsuper0;UInt32 maxNumSegments;UInt32 coalesceCount;UInt32 packetTooBigErrors;IOMbufMemoryCursor__ExpansionData *reserved;};
struct IOTimerEventSource { IOEventSource cppsuper0;void *calloutEntry;AbsoluteTime abstime;IOTimerEventSource__ExpansionData *reserved;};
struct ipc_info_tree_name {ipc_info_name_t iitn_name;mach_port_name_t iitn_lchild;mach_port_name_t iitn_rchild;};
struct mach_vm_read_entry {mach_vm_address_t address;mach_vm_size_t size;};
struct __attribute__((packed)) nd_neighbor_advert {icmp6_hdr nd_na_hdr;in6_addr nd_na_target;};
struct group_source_req {uint32_t gsr_interface;sockaddr_storage gsr_group;sockaddr_storage gsr_source;};
struct __attribute__((packed)) nd_router_advert {icmp6_hdr nd_ra_hdr;u_int32_t nd_ra_reachable;u_int32_t nd_ra_retransmit;};
struct IOFWSyncer_vtbl; 
struct IOReportChannel {uint64_t channel_id;IOReportChannelType channel_type;};
struct IOUSBHostStream { IOUSBHostIOSource cppsuper0;IOUSBHostPipe *_pipe;uint32_t _streamID;};
struct rusage_superset {rusage ru;rusage_info_current ri;};
struct IOAddressRange {mach_vm_address_t address;mach_vm_size_t length;};
struct IOFWBusCommand { IOFWCommand cppsuper0;FWBusCallback fComplete;void *fRefCon;IOFWBusCommand__ExpansionData *reserved;};
struct IOFWReceiveDCL { IOFWDCL cppsuper0;UInt8 fHeaderBytes;char fWait;};
struct fvmlib_command {uint32_t cmd;uint32_t cmdsize;fvmlib fvmlib;};
struct __attribute__((packed)) icmp6_nodeinfo {icmp6_hdr icmp6_ni_hdr;u_int8_t icmp6_ni_nonce[8];};
struct network_port_t {netaddr_t np_receiver;netaddr_t np_owner;np_uid_t np_puid;np_uid_t np_sid;};
union union_vfsidctl {user32_vfsidctl vc32;user_vfsidctl vc64;};
struct CDAudioStatus {UInt8 status;CDAudioStatus___3EF02E475673C285A8B037641EB32711 position;};
struct IOHIDWorkLoop { IOWorkLoop cppsuper0;lck_grp_t *fLockGroup;};
struct __msfilterreq {uint32_t msfr_ifindex;uint32_t msfr_fmode;uint32_t msfr_nsrcs;uint32_t __msfr_align;sockaddr_storage msfr_group;sockaddr_storage *msfr_srcs;};
struct dylib_command {uint32_t cmd;uint32_t cmdsize;dylib dylib;};
struct rpc_signature {rpc_routine_descriptor rd;rpc_routine_arg_descriptor rad[1];};
struct IOATAIOReg16 { IOATAReg16 cppsuper0;UInt16 _address;};
struct IOATAIOReg32 { IOATAReg32 cppsuper0;UInt16 _address;};
struct OSOrderedSet { OSCollection cppsuper0;_Element *array;OSOrderedSet__OSOrderFunction ordering;void *orderingRef;unsigned int count;unsigned int capacity;unsigned int capacityIncrement;OSOrderedSet__ExpansionData *reserved;};
struct flocktimeout {flock fl;timespec timeout;};
struct IOATAIOReg8 { IOATAReg8 cppsuper0;UInt16 _address;};
struct __attribute__((packed)) nd_redirect {icmp6_hdr nd_rd_hdr;in6_addr nd_rd_target;in6_addr nd_rd_dst;};
struct __attribute__((packed)) ip6_rthdr0 {u_int8_t ip6r0_nxt;u_int8_t ip6r0_len;u_int8_t ip6r0_type;u_int8_t ip6r0_segleft;u_int8_t ip6r0_reserved;u_int8_t ip6r0_slmap[3];in6_addr ip6r0_addr[1];};
struct ether_arp {arphdr ea_hdr;u_char arp_sha[6];u_char arp_spa[4];u_char arp_tha[6];u_char arp_tpa[4];};
struct group_req {uint32_t gr_interface;sockaddr_storage gr_group;};
struct icmp6stat {u_quad_t icp6s_error;u_quad_t icp6s_canterror;u_quad_t icp6s_toofreq;u_quad_t icp6s_outhist[256];u_quad_t icp6s_badcode;u_quad_t icp6s_tooshort;u_quad_t icp6s_checksum;u_quad_t icp6s_badlen;u_quad_t icp6s_reflect;u_quad_t icp6s_inhist[256];u_quad_t icp6s_nd_toomanyopt;icmp6errstat icp6s_outerrhist;u_quad_t icp6s_pmtuchg;u_quad_t icp6s_nd_badopt;u_quad_t icp6s_badns;u_quad_t icp6s_badna;u_quad_t icp6s_badrs;u_quad_t icp6s_badra;u_quad_t icp6s_badredirect;u_quad_t icp6s_rfc6980_drop;};
struct kauth_acl {u_int32_t acl_entrycount;u_int32_t acl_flags;kauth_ace acl_ace[1];};
struct tcpiphdr {ipovly ti_i;tcphdr ti_t;};
struct udpiphdr {ipovly ui_i;udphdr ui_u;};
struct __attribute__((packed)) ip6_hdr {ip6_hdr___4B39ABADBFFE16DEF7AD006048FD8DAF ip6_ctlun;in6_addr ip6_src;in6_addr ip6_dst;};
struct __attribute__((packed)) mld_hdr {icmp6_hdr mld_icmp6_hdr;in6_addr mld_addr;};
struct sastat {u_int32_t spi;u_int32_t created;sadb_lifetime lft_c;};
struct __attribute__((packed)) llc {u_int8_t llc_dsap;u_int8_t llc_ssap;llc___DC63CC98741D9338AD6B09337B3BE31E llc_un;};
struct __attribute__((packed)) StandardUSB__SuperSpeedPlusIsochronousEndpointCompanionDescriptor : StandardUSB__Descriptor {uint16_t wReserved;uint32_t dwBytesPerInterval;};
struct IOBlockStorageDriver__Context___9B9D5848614392AE3CDF006EAA69933A {UInt64 byteStart;IOMemoryDescriptor *buffer;IOStorageAttributes attributes;IOStorageCompletion completion;};
struct BluetoothHCIEventSynchronousConnectionChangedResults {BluetoothConnectionHandle connectionHandle;uint8_t transmissionInterval;uint8_t retransmissionWindow;uint16_t receivePacketLength;uint16_t transmitPacketLength;};
struct __attribute__((packed)) StandardUSB__SuperSpeedUSBDeviceCapabilityDescriptor : StandardUSB__DeviceCapabilityDescriptor {uint8_t bmAttributes;uint16_t wSpeedsSupported;uint8_t bFunctionalitySupport;uint8_t bU1DevExitLat;uint16_t bU2DevExitLat;};
struct BluetoothHCIEventReadRemoteSupportedFeaturesResults {BluetoothHCIStatus error;BluetoothConnectionHandle connectionHandle;BluetoothHCISupportedFeatures lmpFeatures;};
struct __attribute__((packed)) StandardUSB__SuperSpeedEndpointCompanionDescriptor : StandardUSB__Descriptor {uint8_t bMaxBurst;uint8_t bmAttributes;uint16_t wBytesPerInterval;};
union IOAudioControl___E4B6BB4F469ED8915E6AC36367D55D05 {IOAudioControl__IntValueChangeHandler intHandler;IOAudioControl__DataValueChangeHandler dataHandler;IOAudioControl__ObjectValueChangeHandler objectHandler;};
struct __attribute__((packed)) StandardUSB__BillboardAltModeCapabilityDescriptor : StandardUSB__DeviceCapabilityDescriptor {uint8_t bIndex;uint16_t dwAlternateModeVdo;};
struct BluetoothHCIEventLELongTermKeyRequestResults {BluetoothConnectionHandle connectionHandle;uint8_t randomNumber[8];uint16_t ediv;};
struct __attribute__((packed)) StandardUSB__ContainerIDCapabilityDescriptor : StandardUSB__DeviceCapabilityDescriptor {uint8_t bReserved;uint32_t containerID[4];};
struct BluetoothHCIEventLinkKeyNotificationResults {BluetoothDeviceAddress deviceAddress;BluetoothKey linkKey;BluetoothKeyType keyType;};
struct __attribute__((packed)) StandardUSB__BillboardCapabilityDescriptor : StandardUSB__DeviceCapabilityDescriptor {uint8_t iAddtionalInfoURL;uint8_t bNumberOfAlternateModes;uint8_t bPreferredAlternateMode;uint16_t VCONNPower;uint8_t bmConfigured[32];uint16_t bcdVersion;uint8_t bAdditonalFailureInfo;uint8_t bReserved;};
struct BluetoothHCIEventConnectionRequestResults {BluetoothDeviceAddress deviceAddress;BluetoothClassOfDevice classOfDevice;BluetoothLinkType linkType;};
struct __attribute__((packed)) StandardUSB__PlatformCapabilityDescriptor : StandardUSB__DeviceCapabilityDescriptor {uint8_t bReserved;uuid_t PlatformCapabilityUUID;};
struct BluetoothHCIEventFlowSpecificationData {BluetoothConnectionHandle connectionHandle;uint8_t flags;uint8_t flowDirection;uint8_t serviceType;uint32_t tokenRate;uint32_t tokenBucketSize;uint32_t peakBandwidth;uint32_t accessLatency;};
struct __attribute__((packed)) StandardUSB__DeviceQualifierDescriptor : StandardUSB__Descriptor {uint16_t bcdUSB;uint8_t bDeviceClass;uint8_t bDeviceSubClass;uint8_t bDeviceProtocol;uint8_t bMaxPacketSize0;uint8_t bNumConfigurations;uint8_t bReserved;};
struct __attribute__((packed)) StandardUSB__ConfigurationDescriptor : StandardUSB__Descriptor {uint16_t wTotalLength;uint8_t bNumInterfaces;uint8_t bConfigurationValue;uint8_t iConfiguration;uint8_t bmAttributes;uint8_t bMaxPower;};
struct __attribute__((packed)) StandardUSB__SuperSpeedHubDescriptor : StandardUSB__Descriptor {uint8_t bNumberPorts;uint16_t wHubCharacteristics;uint8_t bPowerOnToPowerGood;uint8_t bHubControllerCurrent;uint8_t bHubDecodeLatency;uint16_t wHubDelay;uint16_t deviceRemovable;};
struct BluetoothHCIEventModeChangeResults {BluetoothConnectionHandle connectionHandle;BluetoothHCIConnectionMode mode;BluetoothHCIModeInterval modeInterval;};
struct BluetoothHCIEventRoleChangeResults {BluetoothConnectionHandle connectionHandle;BluetoothDeviceAddress deviceAddress;BluetoothRole role;};
struct IOFWAsyncStreamCommand_vtbl_layout; 
struct _32A82CDB950F1A48B0FAEA7E2A340328 {IOReturn (*ptr)(OSAsyncReference, void *, void *, void *, void *, void *, void *);size_t adj;};
struct IOFireWireMultiIsochReceivePacket { OSObject cppsuper0;IOAddressRange ranges[6];UInt32 numRanges;UInt32 numClientReferences;void *elements[6];IOFireWireController *fControl;};
struct __attribute__((packed)) UserExportDCLTransferPacketStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;mach_vm_address_t buffer;UInt32 size;};
struct BluetoothHCIReadLMPHandleResults {BluetoothConnectionHandle handle;BluetoothLMPHandle lmp_handle;uint32_t reserved;};
struct __attribute__((packed)) UserExportDCLUpdateDCLListStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;mach_vm_address_t dclCommandList;UInt32 numDCLCommands;};
struct IOFWAsyncPHYCommand_vtbl_layout; 
struct __attribute__((packed)) StandardUSB__EndpointDescriptor : StandardUSB__Descriptor {uint8_t bEndpointAddress;uint8_t bmAttributes;uint16_t wMaxPacketSize;uint8_t bInterval;};
struct __attribute__((packed)) UserExportDCLPtrTimeStampStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;mach_vm_address_t timeStampPtr;};
struct IOUSBUserClientAsyncParamBlock {OSAsyncReference64 fAsyncRef;uint32_t fAsyncCount;uint32_t fMax;IOMemoryDescriptor *fMem;IOUSBDevRequestDesc req;};
struct IOInterleavedMemoryDescriptor { IOMemoryDescriptor cppsuper0;IOByteCount _descriptorCapacity;UInt32 _descriptorCount;IOMemoryDescriptor **_descriptors;IOByteCount *_descriptorOffsets;IOByteCount *_descriptorLengths;char _descriptorPrepared;};
typedef void (*OSKextRequestResourceCallback)(OSKextRequestTag, OSReturn,  void *, uint32_t, void *);
struct __attribute__((packed)) StandardUSB__DeviceDescriptor : StandardUSB__Descriptor {uint16_t bcdUSB;uint8_t bDeviceClass;uint8_t bDeviceSubClass;uint8_t bDeviceProtocol;uint8_t bMaxPacketSize0;uint16_t idVendor;uint16_t idProduct;uint16_t bcdDevice;uint8_t iManufacturer;uint8_t iProduct;uint8_t iSerialNumber;uint8_t bNumConfigurations;};
struct IOAudioTimeIntervalFilterFIR { IOAudioTimeIntervalFilter cppsuper0;uint64_t *mCoeffs;uint64_t *mDataOffsetHistory;uint64_t *mDataHistory;uint32_t mNumCoeffs;uint32_t mFilterScale;uint32_t mFilterWritePointer;};
struct IOAudioTimeIntervalFilterIIR { IOAudioTimeIntervalFilter cppsuper0;U128 mFilteredSnapshot;U128 mFilteredOffset;uint16_t mIIRCoef;};
struct IOFWDelayCommand_vtbl_layout; 
struct IORangeAllocator_vtbl_layout; 
struct __attribute__((packed)) UserExportDCLTimeStampStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;UInt32 timeStamp;};
struct IOFWAsyncStreamCommand_vtbl; 
struct __attribute__((packed)) UserExportDCLCallProcStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;mach_vm_address_t proc;uint64_t procData;};
struct LowLatencyUserBufferInfoV3 {uint64_t cookie;mach_vm_address_t bufferAddress;mach_vm_size_t bufferSize;uint64_t bufferType;uint64_t isPrepared;mach_vm_address_t mappedUHCIAddress;LowLatencyUserBufferInfoV3 *nextBuffer;};
struct __attribute__((packed)) StandardUSB__BOSDescriptor : StandardUSB__Descriptor {uint16_t wTotalLength;uint8_t bNumDeviceCaps;};
struct __attribute__((packed)) StandardUSB__HubDescriptor : StandardUSB__Descriptor {uint8_t bNumberPorts;uint16_t wHubCharacteristics;uint8_t bPowerOnToPowerGood;uint8_t bHubControllerCurrent;uint8_t deviceRemovable[2];uint8_t reserved[2];};
struct __attribute__((packed)) UserExportDCLCommandStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;UInt32 operands[1];};
struct mach_msg_port_descriptor_t {mach_port_t name;mach_msg_size_t pad1;unsigned int pad2 : 16;unsigned int disposition : 8;unsigned int type : 8;uint32_t pad_end;};
typedef errno_t (*img4_custom_tag_handler_t)(img4_tag_t, img4_section_t, void *);
struct IOFWAsyncPHYCommand_vtbl; 
struct __attribute__((packed)) UserExportDCLLabelStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;};
struct __attribute__((packed)) UserExportDCLNuDCLLeader {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;mach_vm_address_t program;};
struct mach_msg_seqno_trailer_t {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;};
struct IOFireWireControllerAux { IOFireWireBusAux cppsuper0;IOFireWireController *fPrimary;UInt8 fMaxRec;UInt8 fPadding;UInt16 fPadding2;IOFWUserObjectExporter *fSessionRefExporter;IOFireWireControllerAux__ExpansionData *reserved;};
struct __attribute__((packed)) UserExportDCLJumpStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;mach_vm_address_t pJumpDCLLabel;};
struct memory_object_attr_info {memory_object_copy_strategy_t copy_strategy;memory_object_cluster_size_t cluster_size;boolean_t may_cache_object;boolean_t temporary;};
struct BluetoothReadClockInfo {BluetoothConnectionHandle handle;uint32_t clock;uint16_t accuracy;};
struct IOAccelSurfaceReadData {SInt32 x;SInt32 y;SInt32 w;SInt32 h;mach_vm_address_t client_addr;UInt32 client_row_bytes;};
struct IOFWAsyncStreamCommand { IOFWCommand cppsuper0;FWAsyncStreamCallback fComplete;void *fRefCon;IOMemoryDescriptor *fMemDesc;int fSpeed;int fSize;int fCurRetries;int fMaxRetries;int fChannel;int fSyncBits;int fTag;UInt32 fGeneration;char fFailOnReset;IOFWAsyncStreamCommand__MemberVariables *fMembers;};
struct OSNotificationHeader64 {mach_msg_size_t size;natural_t type;OSAsyncReference64 reference;};
struct IOFWDelayCommand_vtbl; 
struct IORangeAllocator_vtbl; 
typedef kxld_addr_t (*KXLDAllocateCallback)(size_t, KXLDAllocateFlags *, void *);
struct OSNotificationHeader {mach_msg_size_t size;natural_t type;OSAsyncReference reference;};
struct BluetoothAFHResults {BluetoothConnectionHandle handle;BluetoothAFHMode mode;uint8_t afhMap[10];};
struct IOFWAsyncPHYCommand { IOFWCommand cppsuper0;AsyncPendingTrans *fTrans;FWAsyncPHYCallback fComplete;void *fRefCon;int fCurRetries;int fMaxRetries;UInt32 fGeneration;char fFailOnReset;UInt32 fData1;UInt32 fData2;int fAckCode;UInt32 fResponseCode;IOFWAsyncPHYCommand__MemberVariables *fMembers;};
struct IOTimingInformation {IOAppleTimingID appleTimingID;UInt32 flags;IOTimingInformation___8835273DE2D8B8F8CED797132B704498 detailedInfo;};
struct IORegistryIterator { OSIterator cppsuper0;IORegistryIterator__IORegCursor start;IORegistryIterator__IORegCursor *where;IORegistryEntry *root;OSOrderedSet *done; IORegistryPlane *plane;IOOptionBits options;};
struct mach_port_info_ext {mach_port_status_t mpie_status;mach_port_msgcount_t mpie_boost_cnt;uint32_t reserved[6];};
struct mcontext_avx512_32 {i386_exception_state es;i386_thread_state ss;i386_avx512_state fs;};
struct mcontext_avx512_64 {x86_exception_state64 es;x86_thread_state64 ss;x86_avx512_state64 fs;};
struct __attribute__((packed)) nd_opt_prefix_info {u_int8_t nd_opt_pi_type;u_int8_t nd_opt_pi_len;u_int8_t nd_opt_pi_prefix_len;u_int8_t nd_opt_pi_flags_reserved;u_int32_t nd_opt_pi_valid_time;u_int32_t nd_opt_pi_preferred_time;u_int32_t nd_opt_pi_reserved2;in6_addr nd_opt_pi_prefix;};
struct task_power_info_v2 {task_power_info_data_t cpu_energy;gpu_energy_data gpu_energy;uint64_t task_ptime;uint64_t task_pset_switches;};
struct IOUSBNotification { OSObject cppsuper0;IOUserClient *fpIOUserClient;IOUSBDevice *fpIOUSBDevice;IOUSBInterface *fpIOUSBInterface;UInt64 fbmNotificationMask;OSAsyncReference64 fAsyncRef;UInt64 fToken;};
struct kpc_config_remote {uint32_t classes;kpc_config_t *configv;uint64_t pmc_mask;};
struct _img4_custom_tag {img4_tag_t i4ct_tag;img4_section_t i4ct_section;img4_custom_tag_handler_t i4ct_handler;};
struct dk_cd_read_toc_t {uint8_t format;uint8_t formatAsTime;uint8_t reserved0016[5];dk_cd_read_toc_t___82E429FAE4C5BE047DD3225D7BE1DDF6 address;uint8_t reserved0064[2];uint16_t bufferLength;void *buffer;};
struct __attribute__((packed)) icmp6_namelookup {icmp6_hdr icmp6_nl_hdr;u_int8_t icmp6_nl_nonce[8];int32_t icmp6_nl_ttl;};
struct DriverOSRuntime {RuntimeOptions driverRuntime;Str31 driverName;UInt32 driverDescReserved[8];};
struct IOATABusCommand { IOATACommand cppsuper0;queue_chain_t queueChain;UInt32 state;IOSyncer *syncer;IOATABusCommand__ExpansionData *reserved;};
struct __attribute__((packed)) IOReportElement {uint64_t provider_id;uint64_t channel_id;IOReportChannelType channel_type;uint64_t timestamp;IOReportElementValues values;};
struct __semid_ds_new {ipc_perm sem_perm;__int32_t sem_base;unsigned short sem_nsems;time_t sem_otime;__int32_t sem_pad1;time_t sem_ctime;__int32_t sem_pad2;__int32_t sem_pad3[4];};
struct __attribute__((aligned(4))) ccrsa_full_ctx {cc_size pb_n;cc_unit pb_options;ccmod_func_t pb_mod_prime;};
struct __attribute__((aligned(4))) ccrsa_priv_ctx {cc_size pv_n;cc_unit pv_options;ccmod_func_t pv_mod_prime;};
struct mcontext_avx32 {i386_exception_state es;i386_thread_state ss;i386_avx_state fs;};
struct mcontext_avx64 {x86_exception_state64 es;x86_thread_state64 ss;x86_avx_state64 fs;};
struct task_dyld_info {mach_vm_address_t all_image_info_addr;mach_vm_size_t all_image_info_size;integer_t all_image_info_format;};
struct __attribute__((aligned(4))) ccrsa_pub_ctx {cc_size pb_n;cc_unit pb_options;ccmod_func_t pb_mod_prime;};
struct kauth_filesec {u_int32_t fsec_magic;guid_t fsec_owner;guid_t fsec_group;kauth_acl fsec_acl;};
struct bootp_packet {ip bp_ip;udphdr bp_udp;bootp bp_bootp;};
struct __attribute__((packed)) rr_pco_match {u_int8_t rpm_code;u_int8_t rpm_len;u_int8_t rpm_ordinal;u_int8_t rpm_matchlen;u_int8_t rpm_minlen;u_int8_t rpm_maxlen;u_int16_t rpm_reserved;in6_addr rpm_prefix;};
struct task_vm_info {mach_vm_size_t virtual_size;integer_t region_count;integer_t page_size;mach_vm_size_t resident_size;mach_vm_size_t resident_size_peak;mach_vm_size_t device;mach_vm_size_t device_peak;mach_vm_size_t internal;mach_vm_size_t internal_peak;mach_vm_size_t external;mach_vm_size_t external_peak;mach_vm_size_t reusable;mach_vm_size_t reusable_peak;mach_vm_size_t purgeable_volatile_pmap;mach_vm_size_t purgeable_volatile_resident;mach_vm_size_t purgeable_volatile_virtual;mach_vm_size_t compressed;mach_vm_size_t compressed_peak;mach_vm_size_t compressed_lifetime;mach_vm_size_t phys_footprint;mach_vm_address_t min_address;mach_vm_address_t max_address;};
struct if_msghdr2 {u_short ifm_msglen;u_char ifm_version;u_char ifm_type;int ifm_addrs;int ifm_flags;u_short ifm_index;int ifm_snd_len;int ifm_snd_maxlen;int ifm_snd_drops;int ifm_timer;if_data64 ifm_data;};
struct mcontext32 {i386_exception_state es;i386_thread_state ss;i386_float_state fs;};
struct mcontext64 {x86_exception_state64 es;x86_thread_state64 ss;x86_float_state64 fs;};
struct __attribute__((packed)) rr_pco_use {u_int8_t rpu_uselen;u_int8_t rpu_keeplen;u_int8_t rpu_ramask;u_int8_t rpu_raflags;u_int32_t rpu_vltime;u_int32_t rpu_pltime;u_int32_t rpu_flags;in6_addr rpu_prefix;};
struct sf_mapping {vm_offset_t mapping_offset;vm_size_t size;vm_offset_t file_offset;vm_prot_t protection;vm_offset_t cksum;};
struct __attribute__((aligned(4))) cczp_hd {cc_size n;cc_unit options;ccmod_func_t mod_prime;};
struct __attribute__((aligned(4))) cczp {cc_size n;cc_unit options;ccmod_func_t mod_prime;};
struct __attribute__((packed)) StandardUSB__SuperSpeedPlusUSBDeviceCapabilityDescriptor : StandardUSB__DeviceCapabilityDescriptor {uint8_t bReserved;uint32_t bmAttributes;uint16_t wFunctionalitySupport;uint16_t wReserved;uint32_t bmSublinkSpeedAttr[1];};
struct BluetoothHCIEventReadRemoteExtendedFeaturesResults {BluetoothHCIStatus error;BluetoothConnectionHandle connectionHandle;BluetoothHCIPageNumber page;BluetoothHCIPageNumber maxPage;BluetoothHCISupportedFeatures lmpFeatures;};
struct BluetoothHCIEventReadRemoteVersionInfoResults {BluetoothConnectionHandle connectionHandle;BluetoothLMPVersion lmpVersion;BluetoothManufacturerName manufacturerName;BluetoothLMPSubversion lmpSubversion;};
struct __attribute__((packed)) BluetoothHCIEventLEConnectionCompleteResults {BluetoothConnectionHandle connectionHandle;uint8_t role;uint8_t peerAddressType;BluetoothDeviceAddress peerAddress;uint16_t connInterval;uint16_t connLatency;uint16_t supervisionTimeout;uint8_t masterClockAccuracy;};
struct BluetoothHCIEventConnectionCompleteResults {BluetoothConnectionHandle connectionHandle;BluetoothDeviceAddress deviceAddress;BluetoothLinkType linkType;BluetoothHCIEncryptionMode encryptionMode;};
union icmp___B235664BFCA97AAED3CE94418077D709 {icmp__id_ts id_ts;icmp__id_ip id_ip;icmp_ra_addr id_radv;u_int32_t id_mask;char id_data[1];};
struct IOFWCompareAndSwapCommand_vtbl_layout; 
struct IOFireWireMultiIsochReceiveListener { OSObject cppsuper0;IOFireWireController *fControl;UInt32 fChannel;FWMultiIsochReceiveListenerCallback fClientCallback;void *fClientCallbackRefCon;char fActivated;FWMultiIsochReceiveListenerParams *fListenerParams;};
struct __attribute__((packed)) UserExportDCLSetTagSyncBitsStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;UInt16 tagBits;UInt16 syncBits;};
struct __attribute__((packed)) UserExportDCLTransferBufferStruct {mach_vm_address_t pClientDCLStruct;mach_vm_address_t pNextDCLCommand;uint64_t compilerData;UInt32 opcode;mach_vm_address_t buffer;UInt32 size;UInt16 packetSize;UInt16 reserved;UInt32 bufferOffset;};
struct IOFWWriteQuadCommand_vtbl_layout; 
struct IOFWReadQuadCommand_vtbl_layout; 
struct IOFWCompareAndSwapCommand_vtbl; 
struct BluetoothIOCapabilityResponse {BluetoothDeviceAddress deviceAddress;BluetoothIOCapability ioCapability;BluetoothOOBDataPresence OOBDataPresence;BluetoothAuthenticationRequirements authenticationRequirements;};
struct IOBlockStorageDriver__Context {IOBlockStorageDriver__Context___9B9D5848614392AE3CDF006EAA69933A request;IOBlockStorageDriver__Context___BE415BD52B46893C87A5368B03BB692E block;AbsoluteTime timeStart;UInt64 reserved0704;UInt64 reserved0768;UInt64 reserved0832;UInt64 reserved0896;IOBlockStorageDriver__Context *next;};
struct IOFWAsyncCommand_vtbl_layout; 
struct IOFWWriteCommand_vtbl_layout; 
struct IOFWReadCommand_vtbl_layout; 
struct IORegistryEntry_vtbl_layout; 
struct mach_msg_security_trailer_t {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;};
struct IOAccelSurfaceInformation {mach_vm_address_t address[4];UInt32 rowBytes;UInt32 width;UInt32 height;UInt32 pixelFormat;IOOptionBits flags;IOFixed colorTemperature[4];UInt32 typeDependent[4];};
struct IOExternalMethodArguments {uint32_t version;uint32_t selector;mach_port_t asyncWakePort;io_user_reference_t *asyncReference;uint32_t asyncReferenceCount; uint64_t *scalarInput;uint32_t scalarInputCount; void *structureInput;uint32_t structureInputSize;IOMemoryDescriptor *structureInputDescriptor;uint64_t *scalarOutput;uint32_t scalarOutputCount;void *structureOutput;uint32_t structureOutputSize;IOMemoryDescriptor *structureOutputDescriptor;uint32_t structureOutputDescriptorSize;uint32_t __reservedA;OSObject **structureVariableOutputData;uint32_t __reserved[30];};
struct IOFWWriteQuadCommand_vtbl; 
struct IOFWReadQuadCommand_vtbl; 
struct _shared_file_mapping_np {mach_vm_address_t sfm_address;mach_vm_size_t sfm_size;mach_vm_offset_t sfm_file_offset;vm_prot_t sfm_max_prot;vm_prot_t sfm_init_prot;};
struct IOTrackingCallSiteInfo {uint32_t count;pid_t addressPID;mach_vm_address_t address;mach_vm_size_t size[2];pid_t btPID;mach_vm_address_t bt[2][16];};
struct ccchacha20poly1305_ctx {ccchacha20_ctx chacha20_ctx;ccpoly1305_ctx poly1305_ctx;uint64_t aad_nbytes;uint64_t text_nbytes;uint8_t state;};
struct shared_file_mapping_np {mach_vm_address_t sfm_address;mach_vm_size_t sfm_size;mach_vm_offset_t sfm_file_offset;vm_prot_t sfm_max_prot;vm_prot_t sfm_init_prot;};
struct IOFWAsyncCommand_vtbl; 
struct IOFWWriteCommand_vtbl; 
union mach_msg_descriptor_t {mach_msg_port_descriptor_t port;mach_msg_ool_descriptor_t out_of_line;mach_msg_ool_ports_descriptor_t ool_ports;mach_msg_type_descriptor_t type;};
struct IOFWReadCommand_vtbl; 
struct IOFireWireAVCCommand { IOFWCommand cppsuper0;IOFWCommand *fWriteCmd;IOMemoryDescriptor *fMem; UInt8 *fCommand;UInt32 fCmdLen;UInt8 *fResponse;UInt32 *fResponseLen;int fCurRetries;int fMaxRetries;UInt32 fWriteGen;UInt16 fWriteNodeID;char bypassRobustCommandResponseMatching;IOFireWireAVCCommand__ExpansionData *fIOFireWireAVCCommandExpansion;};
struct IORegistryEntry_vtbl; 
struct mach_task_basic_info {mach_vm_size_t virtual_size;mach_vm_size_t resident_size;mach_vm_size_t resident_size_max;time_value_t user_time;time_value_t system_time;policy_t policy;integer_t suspend_count;};
struct task_basic_info_64 {integer_t suspend_count;mach_vm_size_t virtual_size;mach_vm_size_t resident_size;time_value_t user_time;time_value_t system_time;policy_t policy;};
struct IORangeAllocator { OSObject cppsuper0;UInt32 numElements;UInt32 capacity;UInt32 capacityIncrement;IORangeScalar defaultAlignmentMask;IOOptionBits options;IORangeAllocatorElement *elements;};
struct vm_info_object {natural_t vio_object;natural_t vio_size;unsigned int vio_ref_count;unsigned int vio_resident_page_count;unsigned int vio_absent_count;natural_t vio_copy;natural_t vio_shadow;natural_t vio_shadow_offset;natural_t vio_paging_offset;memory_object_copy_strategy_t vio_copy_strategy;vm_offset_t vio_last_alloc;unsigned int vio_paging_in_progress;boolean_t vio_pager_created;boolean_t vio_pager_initialized;boolean_t vio_pager_ready;boolean_t vio_can_persist;boolean_t vio_internal;boolean_t vio_temporary;boolean_t vio_alive;boolean_t vio_purgable;boolean_t vio_purgable_volatile;};
struct __attribute__((packed)) nd_opt_rdnss {u_int8_t nd_opt_rdnss_type;u_int8_t nd_opt_rdnss_len;u_int16_t nd_opt_rdnss_reserved;u_int32_t nd_opt_rdnss_lifetime;in6_addr nd_opt_rdnss_addr[1];};
struct kpc_driver {uint32_t (*get_classes)(void);uint32_t (*get_running)(void);int (*set_running)(uint32_t);int (*get_cpu_counters)(boolean_t, uint32_t, int *, uint64_t *);int (*get_curthread_counters)(uint32_t *, uint64_t *);uint32_t (*get_counter_count)(uint32_t);uint32_t (*get_config_count)(uint32_t);int (*get_config)(uint32_t, kpc_config_t *);int (*set_config)(uint32_t, kpc_config_t *);int (*get_period)(uint32_t, uint64_t *);int (*set_period)(uint32_t, uint64_t *);};
struct IOService { IORegistryEntry cppsuper0;IOService__ExpansionData *reserved;IOService *__provider;SInt32 __providerGeneration;IOService *__owner;IOOptionBits __state[2];uint64_t __timeBusy;uint64_t __accumBusy;IOServicePM *pwrMgt;char initialized;void *pm_vars;int _numInterruptSources;IOInterruptSource *_interruptSources;};
struct auditinfo {au_id_t ai_auid;au_mask_t ai_mask;au_tid_t ai_termid;au_asid_t ai_asid;};
struct __attribute__((packed)) rr_result {u_int16_t rrr_flags;u_int8_t rrr_ordinal;u_int8_t rrr_matchedlen;u_int32_t rrr_ifid;in6_addr rrr_prefix;};
struct IOStream { IOService cppsuper0;OSArray *_buffers;IOItemCount _queueCount;IOMemoryDescriptor *_inputQueueDescriptor;IOMemoryMap *_inputQueueMap;IOMemoryDescriptor *_outputQueueDescriptor;IOMemoryMap *_outputQueueMap;IOStreamBufferQueue *_outputQueue;IOStreamBufferQueue *_inputQueue;mach_port_t _outputPort;mach_port_t _inputPort;OSArray *_memoryMaps;IOStreamMode _streamMode;};
struct nlist_64 {nlist_64___4D543BF749BB09F4875D250FEC3C43C7 n_un;uint8_t n_type;uint8_t n_sect;uint16_t n_desc;uint64_t n_value;};
struct xinpgen {u_int32_t xig_len;u_int xig_count;inp_gen_t xig_gen;so_gen_t xig_sogen;};
struct xunpgen {u_int32_t xug_len;u_int xug_count;unp_gen_t xug_gen;so_gen_t xug_sogen;};
struct nlist {nlist___B0769016BEBE8869A66D0C48DBB1BF7C n_un;uint8_t n_type;uint8_t n_sect;int16_t n_desc;uint32_t n_value;};
struct IOUSBInterfaceUserClientISOAsyncParamBlock {OSAsyncReference64 fAsyncRef;uint32_t fAsyncCount;mach_vm_size_t frameLen;mach_vm_address_t frameBase;IOMemoryDescriptor *dataMem;IOMemoryDescriptor *countMem;uint64_t numFrames;uint64_t startFrame;uint64_t options;};
union icmp___C4DAEE47A1B4C5B2D295BC56AED6DB45 {u_char ih_pptr;in_addr ih_gwaddr;icmp__ih_idseq ih_idseq;int ih_void;icmp__ih_pmtu ih_pmtu;icmp__ih_rtradv ih_rtradv;};
struct IOBluetoothHIDDriver__ExpansionData {OSArray *_sendQueue;uint8_t *interruptBuffer;uint32_t interruptBufferUsed;uint8_t *controlBuffer;uint32_t controlBufferUsed;uint8_t deviceSupportsSuspend;uint32_t getReportTimeoutMS;uint32_t setReportTimeoutMS;uint32_t outstandingMemoryBlockCount;char waitingForMemoryBlockCount;IOPMrootDomain *fRootDomain;IOPMDriverAssertionID fNoDeepSleepAssertionId;char mCommandGateCreated;char mCommandGateAdded;char mControlChannelRetained;char mWorkLoopRetained;char mCloseDownServicesCalled;char mGotNoDeepSleepAssertionID;OSString *disconnectionNotificationString;OSString *connectionNotificationString;IOTimerEventSource *deviceConnectTimer;char mNeedToDropData;UInt32 mWakeTime;UInt32 mDriverLoadTime;IOTimerEventSource *mReadyToSleepTimer;char mHandleStopBeingCalled;char mHandleStartCompleted;char mHIDSuspendSent;IOReturn mExitHIDSuspendResult;};
struct IOFireWireIRMAllocation_vtbl_layout; 
struct _DA4E69B70BD9D876C7E6C9B85538FB9E {uint64_t fTimestamp;GTraceEntry__ID fID;GTraceEntry__ThreadInfo fThreadInfo;GTraceEntry__ArgsTag fArgsTag;GTraceEntry__Args fArgs;};
struct IOFireWireIRMAllocation_vtbl; 
struct IOCommandGate_vtbl_layout; 
struct IOHIDWorkLoop_vtbl_layout; 
struct mach_msg_audit_trailer_t {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;audit_token_t msgh_audit;};
struct BluetoothHCIVersionInfo {BluetoothManufacturerName manufacturerName;BluetoothLMPVersion lmpVersion;BluetoothLMPSubversion lmpSubVersion;uint8_t hciVersion;uint16_t hciRevision;};
struct IOFWPseudoAddressSpace { IOFWAddressSpace cppsuper0;IOMemoryDescriptor *fDesc;void *fRefCon;FWReadCallback fReader;FWWriteCallback fWriter;FWAddress fBase;UInt32 fLen;IOFWPseudoAddressSpace__ExpansionData *reserved;};
struct IOWorkLoop_vtbl_layout; 
struct AVCCommandHandlerInfo { OSObject cppsuper0;IOFireWireAVCProtocolUserClient *userClient;IOFireWireAVCTargetCommandHandlerCallback callBack;OSAsyncReference64 asyncRef;UInt32 subUnitTypeAndID;UInt32 opCode;uint64_t userCallBack;uint64_t userRefCon;};
struct HIDButtonCapabilities {HIDUsage usagePage;UInt32 reportID;UInt32 bitField;UInt32 collection;HIDUsage collectionUsage;HIDUsage collectionUsagePage;Boolean isRange;Boolean isStringRange;Boolean isDesignatorRange;Boolean isAbsolute;SInt32 unitExponent;SInt32 units;SInt32 startBit;UInt32 pbVersion;HIDButtonCapabilities___CF48DBD306996A2DDCB8A3B00B8AFEB9 u;};
struct HIDValueCapabilities {HIDUsage usagePage;UInt32 reportID;UInt32 bitField;UInt32 collection;HIDUsage collectionUsage;HIDUsage collectionUsagePage;Boolean isRange;Boolean isStringRange;Boolean isDesignatorRange;Boolean isAbsolute;UInt32 bitSize;UInt32 reportCount;SInt32 logicalMin;SInt32 logicalMax;SInt32 physicalMin;SInt32 physicalMax;SInt32 unitExponent;SInt32 units;SInt32 startBit;UInt32 pbVersion;HIDValueCapabilities___CF48DBD306996A2DDCB8A3B00B8AFEB9 u;};
struct IOCommandGate_vtbl; 
struct IOHIDWorkLoop_vtbl; 
struct DriverDescription {OSType driverDescSignature;DriverDescVersion driverDescVersion;DriverType driverType;DriverOSRuntime driverOSRuntimeInfo;DriverOSService driverServices;};
union HFSPlusAttrRecord {u_int32_t recordType;HFSPlusAttrInlineData inlineData;HFSPlusAttrData attrData;HFSPlusAttrForkData forkData;HFSPlusAttrExtents overflowExtents;};
struct mach_msg_header_t {mach_msg_bits_t msgh_bits;mach_msg_size_t msgh_size;mach_port_t msgh_remote_port;mach_port_t msgh_local_port;mach_port_name_t msgh_voucher_port;mach_msg_id_t msgh_id;};
struct IOFWAsyncCommand { IOFWCommand cppsuper0;IOFireWireNub *fDevice;FWDeviceCallback fComplete;void *fRefCon;IOMemoryDescriptor *fMemDesc;AsyncPendingTrans *fTrans;UInt32 fAddressHi;UInt32 fAddressLo;IOByteCount fBytesTransferred;int fSize;int fSpeed;int fMaxPack;int fCurRetries;int fMaxRetries;UInt32 fGeneration;UInt16 fNodeID;char fFailOnReset;char fWrite;IOFWAsyncCommand__MemberVariables *fMembers;};
struct IOWorkLoop_vtbl; 
struct auditinfo_addr {au_id_t ai_auid;au_mask_t ai_mask;au_tid_addr_t ai_termid;au_asid_t ai_asid;au_asflgs_t ai_flags;};
struct HIDButtonCaps {HIDUsage usagePage;UInt32 reportID;UInt32 bitField;UInt32 collection;HIDUsage collectionUsage;HIDUsage collectionUsagePage;Boolean isRange;Boolean isStringRange;Boolean isDesignatorRange;Boolean isAbsolute;SInt32 startBit;HIDButtonCaps___CF48DBD306996A2DDCB8A3B00B8AFEB9 u;};
struct IOFireWireNub { IOService cppsuper0;int fDeviceSpeed;int fCommsSpeed;UInt16 fNodeID;UInt16 fLocalNodeID;UInt32 fGeneration;CSRNodeUniqueID fUniqueID;mach_timespec_t fAsyncTimeout;int fMaxReadPackLog;int fMaxWritePackLog;int fMaxReadROMPackLog;IOFireWireController *fControl;IOConfigDirectory *fDirectory;UInt32 fNodeFlags;OSSet *fConfigDirectorySet;IOFireWireNubAux *fAuxiliary;IOFireWireNub__ExpansionData *reserved;};
struct ipc_info_name {mach_port_name_t iin_name;integer_t iin_collision;mach_port_type_t iin_type;mach_port_urefs_t iin_urefs;natural_t iin_object;natural_t iin_next;natural_t iin_hash;};
struct HIDValueCaps {HIDUsage usagePage;UInt32 reportID;UInt32 bitField;UInt32 collection;HIDUsage collectionUsage;HIDUsage collectionUsagePage;Boolean isRange;Boolean isStringRange;Boolean isDesignatorRange;Boolean isAbsolute;UInt32 startBit;UInt32 bitSize;UInt32 reportCount;SInt32 logicalMin;SInt32 logicalMax;SInt32 physicalMin;SInt32 physicalMax;HIDValueCaps___CF48DBD306996A2DDCB8A3B00B8AFEB9 u;};
struct sockaddr_in6 {__uint8_t sin6_len;sa_family_t sin6_family;in_port_t sin6_port;__uint32_t sin6_flowinfo;in6_addr sin6_addr;__uint32_t sin6_scope_id;};
struct auditpinfo {pid_t ap_pid;au_id_t ap_auid;au_mask_t ap_mask;au_tid_t ap_termid;au_asid_t ap_asid;};
struct IODTNVRAM { IOService cppsuper0;IONVRAMController *_nvramController; OSSymbol *_registryPropertiesKey;UInt8 *_nvramImage;char _nvramImageDirty;UInt32 _ofPartitionOffset;UInt32 _ofPartitionSize;UInt8 *_ofImage;char _ofImageDirty;OSDictionary *_ofDict;OSDictionary *_nvramPartitionOffsets;OSDictionary *_nvramPartitionLengths;UInt32 _resv0;UInt32 _resv1;IOLock *_ofLock;UInt32 _resv2;UInt32 _resv3;UInt8 *_resv4;UInt32 _piPartitionOffset;UInt32 _piPartitionSize;UInt8 *_piImage;char _systemPaniced;SInt32 _lastDeviceSync;char _freshInterval;char _isProxied;};
struct bdevsw {open_close_fcn_t *d_open;open_close_fcn_t *d_close;strategy_fcn_t *d_strategy;ioctl_fcn_t *d_ioctl;dump_fcn_t *d_dump;psize_fcn_t *d_psize;int d_type;};
struct IOHIDEventDriver__ExpansionData___44C3ADFD398DAFD19B38D044B9B811CF {char extended;char formFitting;OSArray *elements;UInt32 capable;UInt32 sendingReportID;_95CE1D15F775F631DADC340D9ECE61FE dpad;_3FEB4A13A9F7F8019DC60A4673C10B3A face;_FDF8F008E07F47F1298732B413E31B44 joystick;_369286917136E2F70C2D38E7AE8006A5 shoulder;_F1E5C0A8677AE2D8B68EA797305E13C4 thumbstick;};
struct BluetoothHCIEventSynchronousConnectionCompleteResults {BluetoothConnectionHandle connectionHandle;BluetoothDeviceAddress deviceAddress;BluetoothLinkType linkType;uint8_t transmissionInterval;uint8_t retransmissionWindow;uint16_t receivePacketLength;uint16_t transmitPacketLength;BluetoothAirMode airMode;};
struct __Request__memory_object_super_upl_request_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_offset_t offset;upl_size_t size;upl_size_t super_size;mach_msg_type_number_t page_listCnt;integer_t cntrl_flags;integer_t tag;};
union in6_ifreq___ADBCDBFC1B38B66A5357934350D29B8E {sockaddr_in6 ifru_addr;sockaddr_in6 ifru_dstaddr;int ifru_flags;int ifru_flags6;int ifru_metric;int ifru_intval;caddr_t ifru_data;in6_addrlifetime ifru_lifetime;in6_ifstat ifru_stat;icmp6_ifstat ifru_icmp6stat;u_int32_t ifru_scope_id[16];};
struct __Request__processor_set_policy_control_t {mach_msg_header_t Head;NDR_record_t NDR;processor_set_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[5];boolean_t change;};
struct __Request__mach_exception_raise_state_t {mach_msg_header_t Head;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;int64_t code[2];int flavor;mach_msg_type_number_t old_stateCnt;natural_t old_state[614];};
struct __Request__mach_vm_machine_attribute_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_machine_attribute_t attribute;vm_machine_attribute_val_t value;};
struct __Request__mach_voucher_attr_command_t {mach_msg_header_t Head;NDR_record_t NDR;mach_voucher_attr_key_t key;mach_voucher_attr_command_t command;mach_msg_type_number_t in_contentCnt;uint8_t in_content[4096];mach_msg_type_number_t out_contentCnt;};
struct __Request__memory_object_upl_request_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_offset_t offset;upl_size_t size;mach_msg_type_number_t page_listCnt;integer_t cntrl_flags;integer_t tag;};
struct __Reply__memory_object_cluster_size_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;memory_object_offset_t start;vm_size_t length;uint32_t io_streaming;};
struct __Request__mach_port_set_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_flavor_t flavor;mach_msg_type_number_t port_infoCnt;integer_t port_info[17];};
struct BluetoothSynchronousConnectionInfo {BluetoothHCITransmitBandwidth transmitBandWidth;BluetoothHCIReceiveBandwidth receiveBandWidth;BluetoothHCIMaxLatency maxLatency;BluetoothHCIVoiceSetting voiceSetting;BluetoothHCIRetransmissionEffort retransmissionEffort;BluetoothPacketType packetType;};
struct __Request__exception_raise_state_t {mach_msg_header_t Head;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;integer_t code[2];int flavor;mach_msg_type_number_t old_stateCnt;natural_t old_state[614];};
struct BluetoothHCIInquiryWithRSSIResult {BluetoothDeviceAddress deviceAddress;BluetoothPageScanRepetitionMode pageScanRepetitionMode;uint8_t reserved;BluetoothClassOfDevice classOfDevice;BluetoothClockOffset clockOffset;BluetoothHCIRSSIValue RSSIValue;};
struct vm_region_submap_short_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;memory_object_offset_t offset;unsigned int user_tag;unsigned int ref_count;unsigned short shadow_depth;unsigned char external_pager;unsigned char share_mode;boolean_t is_submap;vm_behavior_t behavior;vm32_object_id_t object_id;unsigned short user_wired_count;};
struct __Reply__thread_policy_get_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];boolean_t get_default;};
struct __Request__mach_vm_protect_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;boolean_t set_maximum;vm_prot_t new_protection;};
struct __Request__mach_port_peek_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_msg_trailer_type_t trailer_type;mach_port_seqno_t request_seqnop;mach_msg_type_number_t trailer_infopCnt;};
struct user32_dyld_all_image_infos {uint32_t version;uint32_t infoArrayCount;user32_addr_t infoArray;user32_addr_t notification;dyld_bool processDetachedFromSharedRegion;dyld_bool libSystemInitialized;user32_addr_t dyldImageLoadAddress;user32_addr_t jitInfo;user32_addr_t dyldVersion;user32_addr_t errorMessage;user32_addr_t terminationFlags;user32_addr_t coreSymbolicationShmPage;user32_addr_t systemOrderFlag;user32_size_t uuidArrayCount;user32_addr_t uuidArray;user32_addr_t dyldAllImageInfosAddress;user32_addr_t initialImageCount;user32_addr_t errorKind;user32_addr_t errorClientOfDylibPath;user32_addr_t errorTargetDylibPath;user32_addr_t errorSymbol;user32_addr_t sharedCacheSlide;uint8_t sharedCacheUUID[16];user32_addr_t sharedCacheBaseAddress;uint64_t timestamp;user32_addr_t reserved[14];user32_addr_t compact_dyld_image_info_addr;user32_size_t compact_dyld_image_info_size;};
struct user64_dyld_all_image_infos {uint32_t version;uint32_t infoArrayCount;user64_addr_t infoArray;user64_addr_t notification;dyld_bool processDetachedFromSharedRegion;dyld_bool libSystemInitialized;user64_addr_t dyldImageLoadAddress;user64_addr_t jitInfo;user64_addr_t dyldVersion;user64_addr_t errorMessage;user64_addr_t terminationFlags;user64_addr_t coreSymbolicationShmPage;user64_addr_t systemOrderFlag;user64_size_t uuidArrayCount;user64_addr_t uuidArray;user64_addr_t dyldAllImageInfosAddress;user64_addr_t initialImageCount;user64_addr_t errorKind;user64_addr_t errorClientOfDylibPath;user64_addr_t errorTargetDylibPath;user64_addr_t errorSymbol;user64_addr_t sharedCacheSlide;uint8_t sharedCacheUUID[16];user64_addr_t sharedCacheBaseAddress;uint64_t timestamp;user64_addr_t reserved[14];user64_addr_t compact_dyld_image_info_addr;user64_size_t compact_dyld_image_info_size;};
struct __Reply__task_policy_get_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];boolean_t get_default;};
struct __Request__thread_policy_t {mach_msg_header_t Head;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];boolean_t set_limit;};
typedef errno_t (*img4_get_trusted_payload_t)(img4_t *, img4_tag_t,  img4_environment_t *, void *,  uint8_t **, size_t *);
struct BluetoothHCIInquiryResult {BluetoothDeviceAddress deviceAddress;BluetoothPageScanRepetitionMode pageScanRepetitionMode;BluetoothHCIPageScanPeriodMode pageScanPeriodMode;BluetoothHCIPageScanMode pageScanMode;BluetoothClassOfDevice classOfDevice;BluetoothClockOffset clockOffset;};
struct __Request__task_policy_t {mach_msg_header_t Head;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];boolean_t set_limit;boolean_t change;};
struct vm_region_submap_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;memory_object_offset_t offset;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned short shadow_depth;unsigned char external_pager;unsigned char share_mode;boolean_t is_submap;vm_behavior_t behavior;vm32_object_id_t object_id;unsigned short user_wired_count;unsigned int pages_reusable;};
struct IOFireWireIRMAllocation { OSObject cppsuper0;IOFireWireIRMAllocation__ExpansionData *reserved;IOFireWireIRMAllocation__AllocationLostNotificationProc fAllocationLostProc;void *fLostProcRefCon;Boolean fReleaseIRMResourcesOnFree;UInt8 fIsochChannel;UInt32 fBandwidthUnits;UInt32 fAllocationGeneration;IORecursiveLock *fLock;IOFireWireController *fControl;Boolean isAllocated;};
struct vm_region_submap_info {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;uint32_t offset;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned short shadow_depth;unsigned char external_pager;unsigned char share_mode;boolean_t is_submap;vm_behavior_t behavior;vm32_object_id_t object_id;unsigned short user_wired_count;};
struct IONetworkController { IOService cppsuper0;IOWorkLoop *_workLoop;IOCommandGate *_cmdGate;IOOutputQueue *_outputQueue;OSSet *_clientSet;OSCollectionIterator *_clientSetIter;OSObject *_cmdClient;UInt32 _alignStart;UInt32 _alignLength;UInt32 _alignPadding;char _propertiesPublished;IOLock *_mediumLock;IODebuggerLockState _debugLockState;SInt32 _debugLockCount;OSNumber *_linkStatus;OSNumber *_linkSpeed; OSData *_lastLinkData; OSSymbol *_lastActiveMediumName; OSSymbol *_lastCurrentMediumName;mbuf_t _freeList;IONetworkController__ExpansionData *_reserved;};
struct mach_vm_info_region {mach_vm_offset_t vir_start;mach_vm_offset_t vir_end;mach_vm_offset_t vir_object;memory_object_offset_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
struct IONetworkInterface { IOService cppsuper0;IONetworkController *_driver;ifnet_t _backingIfnet;IOLock *_privateLock;OSSet *_clientSet;OSNumber *_stateBits;bpf_packet_func _inputFilterFunc;bpf_packet_func _outputFilterFunc;OSObject *_outTarget;IOOutputAction _outAction;UInt32 _clientVar[4];OSDictionary *_dataDict;IOMbufQueue *_inputPushQueue;void *_unused1;UInt32 _unused2;IONetworkInterface__ExpansionData *_reserved;};
struct _img4_environment {img4_struct_version_t i4e_version; char *i4e_name;img4_environment_get_crypto_t i4e_crypto;img4_environment_get_uint32_t i4e_cert_epoch;img4_environment_get_uint32_t i4e_board_id;img4_environment_get_uint32_t i4e_chip_id;img4_environment_get_uint64_t i4e_ecid;img4_environment_get_uint32_t i4e_security_domain;img4_environment_get_bool_t i4e_cert_prod;img4_environment_get_bool_t i4e_cert_security;img4_environment_get_data_t i4e_ap_nonce_hash;img4_environment_get_bool_t i4e_prevent_mixnmatch;img4_environment_get_data_t i4e_boot_manifest_hash;img4_environment_get_bool_t i4e_eff_prod;img4_environment_get_bool_t i4e_eff_security;img4_environment_get_bool_t i4e_ap_nonce_trust;};
struct vnop_pageout_args {vnodeop_desc *a_desc;vnode_t a_vp;upl_t a_pl;upl_offset_t a_pl_offset;off_t a_f_offset;size_t a_size;int a_flags;vfs_context_t a_context;};
struct mach_port_status {mach_port_rights_t mps_pset;mach_port_seqno_t mps_seqno;mach_port_mscount_t mps_mscount;mach_port_msgcount_t mps_qlimit;mach_port_msgcount_t mps_msgcount;mach_port_rights_t mps_sorights;boolean_t mps_srights;boolean_t mps_pdrequest;boolean_t mps_nsrequest;natural_t mps_flags;};
struct vnop_pagein_args {vnodeop_desc *a_desc;vnode_t a_vp;upl_t a_pl;upl_offset_t a_pl_offset;off_t a_f_offset;size_t a_size;int a_flags;vfs_context_t a_context;};
struct auditpinfo_addr {pid_t ap_pid;au_id_t ap_auid;au_mask_t ap_mask;au_tid_addr_t ap_termid;au_asid_t ap_asid;au_asflgs_t ap_flags;};
struct user32_msqid_ds {ipc_perm msg_perm;__int32_t msg_first;__int32_t msg_last;user32_msglen_t msg_cbytes;user32_msgqnum_t msg_qnum;user32_msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;user32_time_t msg_stime;__int32_t msg_pad1;user32_time_t msg_rtime;__int32_t msg_pad2;user32_time_t msg_ctime;__int32_t msg_pad3;__int32_t msg_pad4[4];};
struct __attribute__((packed)) user64_msqid_ds {ipc_perm msg_perm;__int32_t msg_first;__int32_t msg_last;user64_msglen_t msg_cbytes;user64_msgqnum_t msg_qnum;user64_msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;user64_time_t msg_stime;__int32_t msg_pad1;user64_time_t msg_rtime;__int32_t msg_pad2;user64_time_t msg_ctime;__int32_t msg_pad3;__int32_t msg_pad4[4];};
struct AVCSubunitInfo { OSObject cppsuper0;IOFireWireAVCProtocolUserClient *userClient;IOFireWireAVCSubunitPlugHandlerCallback callBack;OSAsyncReference64 asyncRef;UInt32 subunitTypeAndID;UInt32 numSourcePlugs;UInt32 numDestPlugs;uint64_t userCallBack;uint64_t userRefCon;AVCSubunitPlugRecord *sourcePlugRecords;AVCSubunitPlugRecord *destPlugRecords;};
struct IOAudioEngine { IOService cppsuper0;UInt32 numSampleFramesPerBuffer;IOAudioSampleRate sampleRate;UInt32 numErasesPerBuffer;char runEraseHead;IOAudioEnginePosition audioEngineStopPosition;char isRegistered;char configurationChangeInProgress;IOAudioEngineState state;IOAudioEngineStatus *status;IOAudioDevice *audioDevice;IOWorkLoop *workLoop;IOCommandGate *commandGate;OSOrderedSet *inputStreams;UInt32 maxNumInputChannels;OSOrderedSet *outputStreams;UInt32 maxNumOutputChannels;OSSet *userClients;OSSet *defaultAudioControls;UInt32 numActiveUserClients;UInt32 sampleOffset;UInt32 index;char duringStartup;char deviceStartedAudioEngine;IOAudioEngine__ExpansionData *reserved;};
struct IOUSBHostPipe { IOUSBHostIOSource cppsuper0;UInt8 _speed;IOUSBHostInterface *_interface; StandardUSB__EndpointDescriptor *_descriptor; StandardUSB__SuperSpeedEndpointCompanionDescriptor *_companionDescriptor; StandardUSB__SuperSpeedPlusIsochronousEndpointCompanionDescriptor *_sspCompanionDescriptor;StandardUSB__EndpointDescriptor _currentPolicyDescriptor;StandardUSB__SuperSpeedEndpointCompanionDescriptor _currentPolicyCompanionDescriptor;StandardUSB__SuperSpeedPlusIsochronousEndpointCompanionDescriptor _currentPolicySSPCompanionDescriptor;UInt32 _maxPacketSize;UInt32 _burstSize;UInt32 _ioIdleTimeout;IOUSBHostStream **_streamArray;char _streamsEnabled;};
struct user_msqid_ds {ipc_perm msg_perm;msg *msg_first;msg *msg_last;user_msglen_t msg_cbytes;user_msgqnum_t msg_qnum;user_msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;user_time_t msg_stime;__int32_t msg_pad1;user_time_t msg_rtime;__int32_t msg_pad2;user_time_t msg_ctime;__int32_t msg_pad3;__int32_t msg_pad4[4];};
typedef errno_t (*img4_init_t)(img4_t *, img4_flags_t,  uint8_t *, size_t, img4_destructor_t);
struct boot_args {uint16_t Revision;uint16_t Version;uint8_t efiMode;uint8_t debugMode;uint16_t flags;char CommandLine[1024];uint32_t MemoryMap;uint32_t MemoryMapSize;uint32_t MemoryMapDescriptorSize;uint32_t MemoryMapDescriptorVersion;Boot_VideoV1 VideoV1;uint32_t deviceTreeP;uint32_t deviceTreeLength;uint32_t kaddr;uint32_t ksize;uint32_t efiRuntimeServicesPageStart;uint32_t efiRuntimeServicesPageCount;uint64_t efiRuntimeServicesVirtualPageStart;uint32_t efiSystemTable;uint32_t kslide;uint32_t performanceDataStart;uint32_t performanceDataSize;uint32_t keyStoreDataStart;uint32_t keyStoreDataSize;uint64_t bootMemStart;uint64_t bootMemSize;uint64_t PhysicalMemorySize;uint64_t FSBFrequency;uint64_t pciConfigSpaceBaseAddress;uint32_t pciConfigSpaceStartBusNumber;uint32_t pciConfigSpaceEndBusNumber;uint32_t csrActiveConfig;uint32_t csrCapabilities;uint32_t boot_SMC_plimit;uint16_t bootProgressMeterStart;uint16_t bootProgressMeterEnd;Boot_Video Video;uint32_t apfsDataStart;uint32_t apfsDataSize;uint32_t __reserved4[710];};
struct IOFireWireSBP2ManagementORB_vtbl_layout; 
struct __Request__memory_object_lock_request_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_offset_t offset;memory_object_size_t size;memory_object_return_t should_return;integer_t flags;vm_prot_t lock_value;};
struct BluetoothHCIExtendedInquiryResult {uint8_t numberOfReponses;BluetoothDeviceAddress deviceAddress;BluetoothPageScanRepetitionMode pageScanRepetitionMode;uint8_t reserved;BluetoothClassOfDevice classOfDevice;BluetoothClockOffset clockOffset;BluetoothHCIRSSIValue RSSIValue;BluetoothHCIExtendedInquiryResponse extendedInquiryResponse;};
struct __Reply__mach_vm_region_recurse_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t address;mach_vm_size_t size;natural_t nesting_depth;mach_msg_type_number_t infoCnt;int info[19];};
struct IOFireWireSBP2ManagementORB_vtbl; 
struct __Request__upl_commit_range_t {mach_msg_header_t Head;NDR_record_t NDR;upl_offset_t offset;upl_size_t size;integer_t cntrl_flags;mach_msg_type_number_t page_listCnt;upl_page_info_t page_list[256];};
struct IOFireWireSBP2ManagementORB { IOFWCommand cppsuper0;IOFireWireSBP2ManagementORB__ExpansionData *fExpansionData;IOFireWireSBP2LUN *fLUN;IOFireWireUnit *fUnit;UInt32 fManagementOffset;UInt32 fManagementTimeout;UInt32 fFunction;OSObject *fManageeCommand;IOFireWireSBP2ManagementORB__FWSBP2TaskManagementORB fManagementORB;IOFWAddressSpace *fManagementORBAddressSpace;FWAddress fManagementORBAddress;IOFWWriteCommand *fWriteCommand;IOMemoryDescriptor *fWriteCommandMemory;IOFWCommand *fTimeoutCommand;char fTimeoutTimerSet;IOFireWireSBP2ManagementORB__FWSBP2StatusBlock fStatusBlock;IOFWAddressSpace *fStatusBlockAddressSpace;FWAddress fStatusBlockAddress;void *fResponseBuf;UInt32 fResponseLen;IOFWAddressSpace *fResponseAddressSpace;FWAddress fResponseAddress;FWSBP2ManagementCallback fCompletionCallback;void *fCompletionRefCon;OSAsyncReference64 fCallbackAsyncRef;IOMemoryMap *fResponseMap;char fCompleting;};
struct __Reply__mach_port_peek_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_seqno_t request_seqnop;mach_msg_size_t msg_sizep;mach_msg_id_t msg_idp;mach_msg_type_number_t trailer_infopCnt;char trailer_infop[68];};
struct IOAudioStream { IOService cppsuper0;IOAudioEngine *audioEngine;IOWorkLoop *workLoop;IOCommandGate *commandGate;IORecursiveLock *streamIOLock;UInt32 numClients;IOAudioStreamDirection direction;IOAudioStreamFormat format;IOAudioStreamFormatDesc *availableFormats;OSArray *availableFormatDictionaries;UInt32 numAvailableFormats;UInt32 startingChannelID;UInt32 maxNumChannels;void *sampleBuffer;UInt32 sampleBufferSize;void *mixBuffer;UInt32 mixBufferSize;char streamAllocatedMixBuffer;IOAudioStream__AudioIOFunction *audioIOFunctions;UInt32 numIOFunctions;char streamAvailable;OSSet *defaultAudioControls;IOAudioEnginePosition startingPosition;IOAudioEnginePosition clippedPosition;IOAudioClientBuffer *clientBufferListStart;IOAudioClientBuffer *clientBufferListEnd;IOAudioClientBuffer *userClientList;IOAudioStream__ExpansionData *reserved;};
union IOEthernetController__IOEthernetAVBIngressFilterElement___113E187999B5ED6651BE6E50E62C7960 {_A019D19E0FE7C996C72A3F72FDBBF387 destinationMAC;_6B84C51D081AE912A4584AD6D505FC88 etherTypeVLANTag;_E3971B313FA2FA2BC7F914AF10E591CA udpPort;_E59770B5AFE0FAA139FA7A9E130D8A27 ipv4Tuple;_664150227402B916DBC97EF360B4CE67 ipv6Tuple;_7AF841B63B3E7F4A9A49A44740BED81B mplsLabel;_7B05A56910499893D795CEE646E4ED85 byteMatch;_08E176686D46517EB8AB40FFEFBBB9FF compound;};
struct IODCLTranslator { IODCLProgram cppsuper0;DCLLabel fStartLabel;DCLTransferPacket fTransfers[1000];DCLCallProc fCalls[2];DCLJump fJumpToStart;UInt8 fBuffer[1000000];IODCLProgram *fHWProgram;DCLCommand *fToInterpret;DCLCommand *fCurrentDCLCommand;int fPingCount;UInt32 fPacketHeader;};
union NXEventData {NXEventData___7B052CBECF2D89E41D9044FA68C50E97 mouse;NXEventData___1D72C273FCBCED44C35AFF60C0C1ABE4 mouseMove;NXEventData___BF84A4FF1E8709A6CF398BBCF8859B4C key;NXEventData___E2ADF4E02465F36023F43A09CEA76884 tracking;NXEventData___AD0A8843087A97189913F2342161BC7B scrollWheel;NXEventData___AD0A8843087A97189913F2342161BC7B zoom;NXEventData___5862481EA8702BDE8B161E10452DA66B compound;NXEventData___7E4F3FF8E98504DDC830440CAFA598B6 tablet;NXEventData___7F18F8EED5D1248513E921492DDC6968 proximity;};
struct OSKext { OSObject cppsuper0;OSDictionary *infoDict; OSSymbol *bundleID;OSString *path;OSString *executableRelPath;OSKextVersion version;OSKextVersion compatibleVersion;OSKextLoadTag loadTag;kmod_info_t *kmod_info;OSArray *dependencies;OSData *linkedExecutable;OSSet *metaClasses;OSData *interfaceUUID;OSKext___B04BEE30912BD7DFABC6ADC0D9AC5577 flags;list_head pendingPgoHead;uuid_t instance_uuid;OSKextAccount *account;uint32_t builtinKmodIdx;};
struct cdevsw {open_close_fcn_t *d_open;open_close_fcn_t *d_close;read_write_fcn_t *d_read;read_write_fcn_t *d_write;ioctl_fcn_t *d_ioctl;stop_fcn_t *d_stop;reset_fcn_t *d_reset;tty **d_ttys;select_fcn_t *d_select;mmap_fcn_t *d_mmap;strategy_fcn_t *d_strategy;void *d_reserved_1;void *d_reserved_2;int d_type;};
struct __Request__lockd_request_t {mach_msg_header_t Head;NDR_record_t NDR;uint32_t vers;uint32_t flags;uint64_t xid;int64_t flk_start;int64_t flk_len;int32_t flk_pid;int32_t flk_type;int32_t flk_whence;sock_storage sock_address;xcred cred;uint32_t fh_len;nfs_handle fh;};
struct IOHIDElement_vtbl_layout; 
struct OSKext_vtbl_layout; 
struct IOHIDElement_vtbl; 
struct _img4_interface { uint32_t i4if_version; img4_init_t i4if_init; img4_set_custom_tag_handler_t i4if_set_custom_tag_handler; img4_get_trusted_payload_t i4if_get_trusted_payload; img4_get_trusted_external_payload_t i4if_get_trusted_external_payload; img4_get_entitlement_bool_t i4if_get_entitlement_bool; img4_get_object_entitlement_bool_t i4if_get_object_entitlement_bool; img4_destroy_t i4if_destroy;_img4_interface___C240D8D11EA38401E37E80E4BCCF2546 i4if_v1;void *__reserved[23];};
struct OSKext_vtbl; 
struct IOUSBHostDevice { IOService cppsuper0;int32_t _terminationPending;AppleUSBHostResources *_resources;AppleUSBHostController *_controller;AppleUSBHostPort *_port;OSSet *_clients;IOWorkLoop *_workLoop;IOCommandGate *_commandGate;char _allowUpdateIdlePolicy;char _forcePowerInProgress;IOLock *_powerChildrenLock;OSSet *_powerChildren;OSSet *_activePowerChildren;IOPMDriverAssertionID _externalDevicePowerAssertion;IOUSBHostDevice__tPowerState _currentPowerState;char _powerOffPending;char _getDescriptorInProgress;AppleUSBDescriptorCache *_descriptorCache;AppleUSBHostRequestCompleter *_requestCompleter;AppleUSBHostDeviceIdler *_deviceIdler;tUSBHostDeviceAddress _address;IOUSBHostPipe *_pipeZero;UInt8 _speed;StandardUSB__EndpointDescriptor _endpointZero;IOBufferMemoryDescriptor **_configList;uint32_t _configListCount;uint8_t _currentConfigValue;char _setConfigurationInProgress;uint32_t _configurationBusCurrent;uint32_t _allocatedWakeBusCurrent;uint32_t _allocatedSleepBusCurrent;uint32_t _pendingCloseCount;uint32_t _debugLoggingMask;uint32_t _locationID;IOUSBHostDevice__tExpansionData *_expansionData;};
struct i386_cpu_info_t {char cpuid_vendor[16];char cpuid_brand_string[48]; char *cpuid_model_string;cpu_type_t cpuid_type;uint8_t cpuid_family;uint8_t cpuid_model;uint8_t cpuid_extmodel;uint8_t cpuid_extfamily;uint8_t cpuid_stepping;uint64_t cpuid_features;uint64_t cpuid_extfeatures;uint32_t cpuid_signature;uint8_t cpuid_brand;uint8_t cpuid_processor_flag;uint32_t cache_size[5];uint32_t cache_linesize;uint8_t cache_info[64];uint32_t cpuid_cores_per_package;uint32_t cpuid_logical_per_package;uint32_t cache_sharing[5];uint32_t cache_partitions[5];cpu_type_t cpuid_cpu_type;cpu_subtype_t cpuid_cpu_subtype;cpuid_mwait_leaf_t cpuid_mwait_leaf;cpuid_thermal_leaf_t cpuid_thermal_leaf;cpuid_arch_perf_leaf_t cpuid_arch_perf_leaf;uint32_t unused[4];uint32_t cpuid_cache_linesize;uint32_t cpuid_cache_L2_associativity;uint32_t cpuid_cache_size;uint32_t cpuid_address_bits_physical;uint32_t cpuid_address_bits_virtual;uint32_t cpuid_microcode_version;uint32_t cpuid_tlb[2][2][2];uint32_t cpuid_stlb;uint32_t core_count;uint32_t thread_count;uint32_t cpuid_max_basic;uint32_t cpuid_max_ext;uint32_t cpuid_cpufamily;cpuid_mwait_leaf_t *cpuid_mwait_leafp;cpuid_thermal_leaf_t *cpuid_thermal_leafp;cpuid_arch_perf_leaf_t *cpuid_arch_perf_leafp;cpuid_xsave_leaf_t *cpuid_xsave_leafp;uint64_t cpuid_leaf7_features;cpuid_tsc_leaf_t cpuid_tsc_leaf;cpuid_xsave_leaf_t cpuid_xsave_leaf[2];};
struct IOHIDSystem { IOService cppsuper0;IOHIDWorkLoop *workLoop;IOTimerEventSource *periodicES;IOInterruptEventSource *keyboardEQES;IOCommandGate *cmdGate;IONotifier *publishNotify;void *eventMsg;void *stackShotMsg;IOBufferMemoryDescriptor *globalMemory;uintptr_t shmem_addr;vm_size_t shmem_size;EvGlobals *evg;int lleqSize;vm_size_t evScreenSize;void *evScreen;int screens;UInt32 cursorScreens;UInt32 cursorPinScreen;IOGBounds cursorPin;IOGBounds workSpace;IOHIDSystem__ExpansionData *_privateData;IOGPoint clickLoc;IOGPoint clickSpaceThresh;char evOpenCalled;char evInitialized;char evStateChanging;char eventsOpen;char cursorStarted;char cursorEnabled;char cursorCoupled;char cursorPinned;uint64_t clickTime;uint64_t clickTimeThresh;uint64_t lastEventTime;uint64_t lastUndimEvent;uint64_t lastSetCursorTime;uint64_t lastShowCursorTime;uint64_t lastHideCursorTime;uint64_t lastChangeCursorTime;uint64_t lastMoveCursorTime;IOService *displayManager;IOPMPowerFlags displayState;IOService *rootDomain;AbsoluteTime displayStateChangeDeadline;AbsoluteTime displaySleepWakeupDeadline;UInt32 powerState;OSDictionary *savedParameters;UInt32 maxWaitCursorFrame;UInt32 firstWaitCursorFrame;IOHIDPointingDevice *_hidPointingDevice;IOHIDKeyboardDevice *_hidKeyboardDevice;OSObject *lastSender;char setParamPropertiesInProgress;OSSet *dataQueueSet;};
struct IOUSBHostPipe_vtbl_layout; 
struct IOUSBHostPipe_vtbl; 
struct IOFireWireSBP2Login_vtbl_layout; 
struct IOHIDEventDriver__ExpansionData {SInt32 absoluteAxisRemovalPercentage;SInt32 preferredAxisRemovalPercentage;IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF led;IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF scroll;IOHIDEventDriver__ExpansionData___B876227EC7A6E16B5B342210589B5E56 relative;IOHIDEventDriver__ExpansionData___0077C6F470F5DB5047486A4CC0CDEDE3 keyboard;IOHIDEventDriver__ExpansionData___58C67D5D7A6AEFD04FD596DA970D5162 digitizer;IOHIDEventDriver__ExpansionData___1A4443270529141425FCA41A12FCC45F multiAxis;IOHIDEventDriver__ExpansionData___2EF3FA813E4388E2CFC46412C7E8E87B unicode;IOHIDEventDriver__ExpansionData___44C3ADFD398DAFD19B38D044B9B811CF gameController;IOHIDEventDriver__ExpansionData___0694E93C84545D8044F2995499636A6A vendorMessage;IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF biometric;IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF accel;IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF gyro;IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF compass;IOHIDEventDriver__ExpansionData___ED5890116FBECA69C314AD95370C3ACF temperature;IOHIDEventDriver__ExpansionData___89C8BF0AC86979B14408913F907190AD sensorProperty;IOHIDEventDriver__ExpansionData___C339D0D406B24A17F9B2B6287492FA39 orientation;UInt64 lastReportTime;IOWorkLoop *workLoop;IOCommandGate *commandGate;};
struct IOFireWireSBP2Login_vtbl; 
struct xinpcb64 {u_int64_t xi_len;u_int64_t xi_inpp;u_short inp_fport;u_short inp_lport;inpcb64_list_entry inp_list;u_int64_t inp_ppcb;u_int64_t inp_pcbinfo;inpcb64_list_entry inp_portlist;u_int64_t inp_phd;inp_gen_t inp_gencnt;int inp_flags;u_int32_t inp_flow;u_char inp_vflag;u_char inp_ip_ttl;u_char inp_ip_p;xinpcb64___8484DCF5CF4707A7FE251BC9B24F4E7E inp_dependfaddr;xinpcb64___C7595A3B4BE5971B51D33E1DD0735D09 inp_dependladdr;xinpcb64___43BC994B9C4B2CE41AB688FB99430A6C inp_depend4;xinpcb64___71E89AB7AAFF24B549168137682ADA36 inp_depend6;xsocket64 xi_socket;u_quad_t xi_alignment_hack;};
struct inpcb {inpcb___0DE50EA4AC06AB542A6702F62E772B7B inp_hash;in_addr reserved1;in_addr reserved2;u_short inp_fport;u_short inp_lport;inpcb___0DE50EA4AC06AB542A6702F62E772B7B inp_list;caddr_t inp_ppcb;inpcbinfo *inp_pcbinfo;void *inp_socket;u_char nat_owner;u_int32_t nat_cookie;inpcb___0DE50EA4AC06AB542A6702F62E772B7B inp_portlist;inpcbport *inp_phd;inp_gen_t inp_gencnt;int inp_flags;u_int32_t inp_flow;u_char inp_vflag;u_char inp_ip_ttl;u_char inp_ip_p;inpcb___8484DCF5CF4707A7FE251BC9B24F4E7E inp_dependfaddr;inpcb___C7595A3B4BE5971B51D33E1DD0735D09 inp_dependladdr;inpcb___7D460B6C0767DE165AC6133441A5769E inp_dependroute;inpcb___EBDA4B014B050CA99710A3A7596CC9CC inp_depend4;inpcb___D2EE53D6AFCE5D79378C56B75ED05C14 inp_depend6;int hash_element;caddr_t inp_saved_ppcb;inpcbpolicy *inp_sp;u_int32_t reserved[3];};
struct IOFireWireSBP2Login { OSObject cppsuper0;IOFireWireSBP2Login__ExpansionData *reserved;IOFireWireSBP2LUN *fLUN;IOFireWireUnit *fUnit;IOFireWireController *fControl;IOCommandGate *fGate;FWSBP2LoginCallback fLoginCompletionCallback;void *fLoginCompletionRefCon;FWSBP2LogoutCallback fLogoutCompletionCallback;void *fLogoutCompletionRefCon;FWSBP2NotifyCallback fStatusNotifyCallback;void *fStatusNotifyRefCon;FWSBP2NotifyCallback fUnsolicitedStatusNotifyCallback;void *fUnsolicitedStatusNotifyRefCon;UInt32 fLoginFlags;UInt32 fReconnectTime;UInt32 fLoginState;UInt32 fManagementOffset;UInt32 fManagementTimeout;UInt32 fMaxORBSize;UInt32 fMaxCommandBlockSize;UInt16 fLoginNodeID;UInt32 fLoginGeneration;UInt32 fLoginID;UInt32 fReconnectHold;UInt32 fMaxPayloadSize;void *fRefCon;IOFireWireSBP2Login__FWSBP2LoginORB fLoginORB;IOFWAddressSpace *fLoginORBAddressSpace;FWAddress fLoginORBAddress;FWSBP2LoginResponse fLoginResponse;IOFWAddressSpace *fLoginResponseAddressSpace;FWAddress fLoginResponseAddress;IOFireWireSBP2Login__FWSBP2ReconnectORB fReconnectORB;IOFWAddressSpace *fReconnectORBAddressSpace;FWAddress fReconnectORBAddress;FWSBP2StatusBlock fStatusBlock;IOFWAddressSpace *fStatusBlockAddressSpace;FWAddress fStatusBlockAddress;FWSBP2StatusBlock fReconnectStatusBlock;IOFWAddressSpace *fReconnectStatusBlockAddressSpace;FWAddress fReconnectStatusBlockAddress;IOFireWireSBP2Login__FWSBP2LogoutORB fLogoutORB;IOFWAddressSpace *fLogoutORBAddressSpace;FWAddress fLogoutORBAddress;char fLogoutPending;IOFWWriteCommand *fLoginWriteCommand;IOMemoryDescriptor *fLoginWriteCommandMemory;char fLoginWriteInProgress;IOFWWriteCommand *fReconnectWriteCommand;IOMemoryDescriptor *fReconnectWriteCommandMemory;char fReconnectWriteInProgress;char fReconnectWriteInterrupted;IOFWWriteCommand *fLogoutWriteCommand;IOMemoryDescriptor *fLogoutWriteCommandMemory;char fLogoutWriteInProgress;IOFWCommand *fLoginTimeoutCommand;char fLoginTimeoutTimerSet;IOFWDelayCommand *fReconnectTimeoutCommand;char fReconnectTimeoutTimerSet;IOFWCommand *fLogoutTimeoutCommand;char fLogoutTimeoutTimerSet;FWAddress fFetchAgentAddress;IOMemoryDescriptor *fFetchAgentWriteCommandMemory;FWAddress fLastORBAddress;IOFireWireSBP2ORB *fLastORB;IOFWWriteCommand *fFetchAgentWriteCommand;char fFetchAgentWriteCommandInUse;FWSBP2FetchAgentWriteCallback fFetchAgentWriteCompletion;void *fFetchAgentWriteRefCon;IOFireWireSBP2ORB *fORBToWrite;OSSet *fORBSet;OSIterator *fORBSetIterator;void *fPasswordBuf;UInt32 fPasswordLen;IOFWAddressSpace *fPasswordAddressSpace;FWAddress fPasswordAddress;IOMemoryDescriptor *fPasswordDescriptor;char fSuspended;UInt32 fLoginRetryDelay;UInt32 fLoginRetryCount;UInt32 fLoginRetryMax;IOFWDelayCommand *fLoginRetryTimeoutCommand;char fLoginRetryTimeoutTimerSet;IOFireWireSBP2Target *fTarget;char fUnsolicitedStatusEnableRequested;IOFWDelayCommand *fReconnectRetryTimeoutCommand;char fReconnectRetryTimeoutTimerSet;int fCriticalSectionCount;char fFetchAgentResetInProgress;UInt32 fFetchAgentResetBuffer;FWAddress fFetchAgentResetAddress;IOFWWriteQuadCommand *fFetchAgentResetCommand;void *fFetchAgentResetRefCon;FWSBP2StatusCallback fFetchAgentResetCompletion;char fDoorbellInProgress;char fDoorbellRingAgain;UInt32 fDoorbellBuffer;FWAddress fDoorbellAddress;IOFWWriteQuadCommand *fDoorbellCommand;char fUnsolicitedStatusEnableInProgress;UInt32 fUnsolicitedStatusEnableBuffer;FWAddress fUnsolicitedStatusEnableAddress;IOFWWriteQuadCommand *fUnsolicitedStatusEnableCommand;char fSetBusyTimeoutInProgress;UInt32 fSetBusyTimeoutBuffer;FWAddress fSetBusyTimeoutAddress;IOFWWriteQuadCommand *fSetBusyTimeoutCommand;char fInCriticalSection;UInt16 fLocalNodeID;char fFastStartSupported;UInt32 fFastStartOffset;UInt32 fFastStartMaxPayload;UInt32 fUserLoginGeneration;char fUserLoginGenerationSet;IOFWDelayCommand *fFetchAgentRetryTimerCommand;char fFetchAgentRetryTimerSet;UInt32 fARDMAMax;char fPhysicalAccessEnabled;char fLoginStatusReceived;FWSBP2StatusBlock fLoginStatusBlock;UInt32 fLoginStatusBlockLen;};
struct sflt_filter {sflt_handle sf_handle;int sf_flags;char *sf_name;sf_unregistered_func sf_unregistered;sf_attach_func sf_attach;sf_detach_func sf_detach;sf_notify_func sf_notify;sf_getpeername_func sf_getpeername;sf_getsockname_func sf_getsockname;sf_data_in_func sf_data_in;sf_data_out_func sf_data_out;sf_connect_in_func sf_connect_in;sf_connect_out_func sf_connect_out;sf_bind_func sf_bind;sf_setoption_func sf_setoption;sf_getoption_func sf_getoption;sf_listen_func sf_listen;sf_ioctl_func sf_ioctl;sflt_filter__sflt_filter_ext sf_ext;};
struct IOVideoDeviceUserClientInit_vtbl_layout; 
struct IODisplayParameterHandler_vtbl_layout; 
struct IOFireWireAVCTargetSpace_vtbl_layout; 
struct IOPlatformExpertDevice_vtbl_layout; 
struct IOFireWireSBP2Target_vtbl_layout; 
struct IOVideoDeviceUserClientInit_vtbl; 
struct IODisplayParameterHandler_vtbl; 
struct IOFireWireAVCTargetSpace_vtbl; 
struct IOPowerConnection_vtbl_layout; 
struct AppleMacIODevice_vtbl_layout; 
struct IOGraphicsDevice_vtbl_layout; 
struct IOPlatformDevice_vtbl_layout; 
struct IOPMPowerSource_vtbl_layout; 
struct IOPlatformExpertDevice_vtbl; 
struct IOPwrController_vtbl_layout; 
struct IOWatchDogTimer_vtbl_layout; 
struct IOI2CInterface_vtbl_layout; 
struct IOAccelerator_vtbl_layout; 
struct IOFireWireSBP2Target_vtbl; 
struct IOAudioPort_vtbl_layout; 
struct AppleMacIO_vtbl_layout; 
struct IOPowerConnection_vtbl; 
struct AppleMacIODevice_vtbl; 
struct IOGraphicsDevice_vtbl; 
struct IOPlatformDevice_vtbl; 
struct IOService_vtbl_layout; 
struct AppleNMI_vtbl_layout; 
struct IOPMPowerSource_vtbl; 
struct IOPwrController_vtbl; 
struct IOUSBLog_vtbl_layout; 
struct IOWatchDogTimer_vtbl; 
struct IOI2CInterface_vtbl; 
struct IOAccelerator_vtbl; 
struct IOAudioPort_vtbl; 
struct AppleMacIO_vtbl; 
struct IOService_vtbl; 
struct AppleNMI_vtbl; 
struct IOUSBLog_vtbl; 
struct IOModemSerialStreamSync_vtbl_layout; 
struct IORS232SerialStreamSync_vtbl_layout; 
struct IOFireWireAVCSubUnit_vtbl_layout; 
struct IOSerialDriverSync_vtbl_layout; 
struct IOSerialStreamSync_vtbl_layout; 
struct IOFireWireAVCUnit_vtbl_layout; 
struct IOFireWireSBP2LUN_vtbl_layout; 
struct IOFireWireAVCNub_vtbl_layout; 
struct IOModemSerialStreamSync_vtbl; 
struct IORS232SerialStreamSync_vtbl; 
struct IOPMrootDomain_vtbl_layout; 
struct IOFireWireAVCSubUnit_vtbl; 
struct IOHIDSystem_vtbl_layout; 
struct IOSerialDriverSync_vtbl; 
struct IOSerialStreamSync_vtbl; 
struct IOFireWireAVCUnit_vtbl; 
struct IOFireWireSBP2LUN_vtbl; 
struct IOFireWireAVCNub_vtbl; 
struct IOPMrootDomain_vtbl; 
struct IOHIDSystem_vtbl; 
struct crypto_functions {ccdigest_init_fn_t ccdigest_init_fn;ccdigest_update_fn_t ccdigest_update_fn;ccdigest_final_fn_t ccdigest_final_fn;ccdigest_fn_t ccdigest_fn; ccdigest_info *ccmd5_di; ccdigest_info *ccsha1_di; ccdigest_info *ccsha256_di; ccdigest_info *ccsha384_di; ccdigest_info *ccsha512_di;cchmac_init_fn_t cchmac_init_fn;cchmac_update_fn_t cchmac_update_fn;cchmac_final_fn_t cchmac_final_fn;cchmac_fn_t cchmac_fn; ccmode_ecb *ccaes_ecb_encrypt; ccmode_ecb *ccaes_ecb_decrypt; ccmode_cbc *ccaes_cbc_encrypt; ccmode_cbc *ccaes_cbc_decrypt; ccmode_ctr *ccaes_ctr_crypt; ccmode_xts *ccaes_xts_encrypt; ccmode_xts *ccaes_xts_decrypt; ccmode_gcm *ccaes_gcm_encrypt; ccmode_gcm *ccaes_gcm_decrypt;ccgcm_init_with_iv_fn_t ccgcm_init_with_iv_fn;ccgcm_inc_iv_fn_t ccgcm_inc_iv_fn;ccchacha20poly1305_fns_t ccchacha20poly1305_fns; ccmode_ecb *ccdes_ecb_encrypt; ccmode_ecb *ccdes_ecb_decrypt; ccmode_cbc *ccdes_cbc_encrypt; ccmode_cbc *ccdes_cbc_decrypt; ccmode_ecb *cctdes_ecb_encrypt; ccmode_ecb *cctdes_ecb_decrypt; ccmode_cbc *cctdes_cbc_encrypt; ccmode_cbc *cctdes_cbc_decrypt; ccrc4_info *ccrc4_info; ccmode_ecb *ccblowfish_ecb_encrypt; ccmode_ecb *ccblowfish_ecb_decrypt; ccmode_ecb *cccast_ecb_encrypt; ccmode_ecb *cccast_ecb_decrypt;ccdes_key_is_weak_fn_t ccdes_key_is_weak_fn;ccdes_key_set_odd_parity_fn_t ccdes_key_set_odd_parity_fn;ccpad_xts_encrypt_fn_t ccpad_xts_encrypt_fn;ccpad_xts_decrypt_fn_t ccpad_xts_decrypt_fn;ccpad_cts3_crypt_fn_t ccpad_cts3_encrypt_fn;ccpad_cts3_crypt_fn_t ccpad_cts3_decrypt_fn;ccrng_fn_t ccrng_fn;ccrsa_make_pub_fn_t ccrsa_make_pub_fn;ccrsa_verify_pkcs1v15_fn_t ccrsa_verify_pkcs1v15_fn;};
struct IOSharedInterruptController_vtbl_layout; 
struct IOInterruptController_vtbl_layout; 
struct IOSharedInterruptController_vtbl; 
struct IOBacklightDisplay_vtbl_layout; 
struct IONVRAMController_vtbl_layout; 
struct IORTCController_vtbl_layout; 
struct IOInterruptController_vtbl; 
struct IOAudioDevice_vtbl_layout; 
struct ATADeviceNub_vtbl_layout; 
struct IOATADevice_vtbl_layout; 
struct IOBacklightDisplay_vtbl; 
struct IOHIDDevice_vtbl_layout; 
struct IOHIDevice_vtbl_layout; 
struct IONVRAMController_vtbl; 
struct IODisplay_vtbl_layout; 
struct IOMapper_vtbl_layout; 
struct IORTCController_vtbl; 
struct IOAudioDevice_vtbl; 
struct ATADeviceNub_vtbl; 
struct IOATADevice_vtbl; 
struct IOHIDDevice_vtbl; 
struct IOHIDevice_vtbl; 
struct IODisplay_vtbl; 
struct IOMapper_vtbl; 
struct com_apple_iokit_KLog_vtbl_layout; 
struct IODisplayConnect_vtbl_layout; 
struct IOVideoDevice_vtbl_layout; 
struct com_apple_iokit_KLog_vtbl; 
struct IODTNVRAM_vtbl_layout; 
struct IODisplayConnect_vtbl; 
struct IOVideoDevice_vtbl; 
struct IODTNVRAM_vtbl; 
struct IOAudioSelectorControl_vtbl_layout; 
struct IOAudioToggleControl_vtbl_layout; 
struct ApplePlatformExpert_vtbl_layout; 
struct IONetworkController_vtbl_layout; 
struct IODTPlatformExpert_vtbl_layout; 
struct IOKernelDebugger_vtbl_layout; 
struct IOPlatformExpert_vtbl_layout; 
struct IOAudioSelectorControl_vtbl; 
struct IODMAController_vtbl_layout; 
struct IOAudioControl_vtbl_layout; 
struct IOHIDInterface_vtbl_layout; 
struct IOAudioToggleControl_vtbl; 
struct IOVideoStream_vtbl_layout; 
struct ApplePlatformExpert_vtbl; 
struct IONetworkController_vtbl; 
struct IODTPlatformExpert_vtbl; 
struct IOPCIDevice_vtbl_layout; 
struct IOKernelDebugger_vtbl; 
struct IOPlatformExpert_vtbl; 
struct IODMAController_vtbl; 
struct IOStream_vtbl_layout; 
struct IOAudioControl_vtbl; 
struct IOHIDInterface_vtbl; 
struct IOVideoStream_vtbl; 
struct IORTC_vtbl_layout; 
struct IOPCIDevice_vtbl; 
struct IOStream_vtbl; 
struct IORTC_vtbl; 
struct BluetoothEnhancedSynchronousConnectionInfo {BluetoothHCITransmitBandwidth transmitBandWidth;BluetoothHCIReceiveBandwidth receiveBandWidth;BluetoothHCITransmitCodingFormat transmitCodingFormat;BluetoothHCIReceiveCodingFormat receiveCodingFormat;BluetoothHCITransmitCodecFrameSize transmitCodecFrameSize;BluetoothHCIReceiveCodecFrameSize receiveCodecFrameSize;BluetoothHCIInputBandwidth inputBandwidth;BluetoothHCIOutputBandwidth outputBandwidth;BluetoothHCIInputCodingFormat inputCodingFormat;BluetoothHCIOutputCodingFormat outputCodingFormat;BluetoothHCIInputCodedDataSize inputCodedDataSize;BluetoothHCIOutputCodedDataSize outputCodedDataSize;BluetoothHCIInputPCMDataFormat inputPCMDataFormat;BluetoothHCIOutputPCMDataFormat outputPCMDataFormat;BluetoothHCIInputPCMSamplePayloadMSBPosition inputPCMSampelPayloadMSBPosition;BluetoothHCIOutputPCMSamplePayloadMSBPosition outputPCMSampelPayloadMSBPosition;BluetoothHCIInputDataPath inputDataPath;BluetoothHCIOutputDataPath outputDataPath;BluetoothHCIInputTransportUnitSize inputTransportUnitSize;BluetoothHCIOutputTransportUnitSize outputTransportUnitSize;BluetoothHCIMaxLatency maxLatency;BluetoothHCIVoiceSetting voiceSetting;BluetoothHCIRetransmissionEffort retransmissionEffort;BluetoothPacketType packetType;};
struct IOSCSIProtocolInterface_vtbl_layout; 
struct IOBlockStorageDevice_vtbl_layout; 
struct IOBluetoothHIDDriver_vtbl_layout; 
struct IOAudioLevelControl_vtbl_layout; 
struct IODVDMediaBSDClient_vtbl_layout; 
struct IOEthernetInterface_vtbl_layout; 
struct IOBDMediaBSDClient_vtbl_layout; 
struct IOCDMediaBSDClient_vtbl_layout; 
struct IONetworkInterface_vtbl_layout; 
struct IOUSBHostInterface_vtbl_layout; 
struct IOMediaBSDClient_vtbl_layout; 
struct IOSCSIProtocolInterface_vtbl; 
struct IOFireWireUnit_vtbl_layout; 
struct IOAudioStream_vtbl_layout; 
struct IOBlockStorageDevice_vtbl; 
struct IOBluetoothHIDDriver_vtbl; 
struct IOFireWireNub_vtbl_layout; 
struct IOAudioLevelControl_vtbl; 
struct IODVDMediaBSDClient_vtbl; 
struct IOEthernetInterface_vtbl; 
struct IOHIKeyboard_vtbl_layout; 
struct IOBDMediaBSDClient_vtbl; 
struct IOCDMediaBSDClient_vtbl; 
struct IONetworkInterface_vtbl; 
struct IOUSBHostInterface_vtbl; 
struct IOMediaBSDClient_vtbl; 
struct IOFireWireUnit_vtbl; 
struct IOAudioStream_vtbl; 
struct IOFireWireNub_vtbl; 
struct IOHIKeyboard_vtbl; 
struct IOApplePartitionScheme_vtbl_layout; 
struct IOFDiskPartitionScheme_vtbl_layout; 
struct IOSCSIProtocolServices_vtbl_layout; 
struct IOGUIDPartitionScheme_vtbl_layout; 
struct IOACPIPlatformDevice_vtbl_layout; 
struct IOFireWireLocalNode_vtbl_layout; 
struct IOAppleLabelScheme_vtbl_layout; 
struct IOPartitionScheme_vtbl_layout; 
struct IOApplePartitionScheme_vtbl; 
struct IOFDiskPartitionScheme_vtbl; 
struct IOSCSIProtocolServices_vtbl; 
struct IOFilterScheme_vtbl_layout; 
struct IOGUIDPartitionScheme_vtbl; 
struct IOACPIPlatformDevice_vtbl; 
struct IOFireWireLocalNode_vtbl; 
struct IOHIPointing_vtbl_layout; 
struct IOAGPDevice_vtbl_layout; 
struct IOAppleLabelScheme_vtbl; 
struct IOPartitionScheme_vtbl; 
struct IOStorage_vtbl_layout; 
struct IOFilterScheme_vtbl; 
struct IOHIPointing_vtbl; 
struct IOAGPDevice_vtbl; 
struct IOStorage_vtbl; 
struct IOFireWireSerialBusProtocolTransport_vtbl_layout; 
struct IOFireWireSerialBusProtocolTransport_vtbl; 
struct IOCDPartitionScheme_vtbl_layout; 
struct IOFireWireDevice_vtbl_layout; 
struct IOCDPartitionScheme_vtbl; 
struct IOFireWireDevice_vtbl; 
struct IOMedia_vtbl_layout; 
struct IOMedia_vtbl; 
struct IOACPIPlatformExpert_vtbl_layout; 
struct IOBlockStorageDriver_vtbl_layout; 
struct IOEthernetController_vtbl_layout; 
struct IOHIDEventService_vtbl_layout; 
struct IOACPIPlatformExpert_vtbl; 
struct IOBlockStorageDriver_vtbl; 
struct IOEthernetController_vtbl; 
struct IOHIDEventService_vtbl; 
struct IOHIDEventDriver_vtbl_layout; 
struct IOAudioEngine_vtbl_layout; 
struct IOBDMedia_vtbl_layout; 
struct IOHIDEventDriver_vtbl; 
struct IOAudioEngine_vtbl; 
struct IOBDMedia_vtbl; 
struct IOFireWireBus_vtbl_layout; 
struct IOFireWireBus_vtbl; 
struct IOPCI2PCIBridge_vtbl_layout; 
struct IOPCIBridge_vtbl_layout; 
struct IOPCI2PCIBridge_vtbl; 
struct IOPCIBridge_vtbl; 
struct IOFramebuffer_vtbl_layout; 
struct IOFramebuffer_vtbl; 
struct IODVDMedia_vtbl_layout; 
struct IODVDMedia_vtbl; 
struct IOCDBlockStorageDevice_vtbl_layout; 
struct IONDRVFramebuffer_vtbl_layout; 
struct IOCDBlockStorageDevice_vtbl; 
struct IOUSBHostDevice_vtbl_layout; 
struct IONDRVFramebuffer_vtbl; 
struct IOUSBHostDevice_vtbl; 
struct IOSCSIPrimaryCommandsDevice_vtbl_layout; 
struct IOSCSIPrimaryCommandsDevice_vtbl; 
struct IOCDMedia_vtbl_layout; 
struct IOCDMedia_vtbl; 
struct IOCDBlockStorageDriver_vtbl_layout; 
struct IOCDBlockStorageDriver_vtbl; 
struct IODVDBlockStorageDevice_vtbl_layout; 
struct IOBDBlockStorageDevice_vtbl_layout; 
struct IODVDBlockStorageDevice_vtbl; 
struct IOBDBlockStorageDevice_vtbl; 
struct IOFireWireController_vtbl_layout; 
struct IODVDServices_vtbl_layout; 
struct IOFireWireController_vtbl; 
struct IOBDServices_vtbl_layout; 
struct IODVDServices_vtbl; 
struct IOBDServices_vtbl; 
struct IODVDBlockStorageDriver_vtbl_layout; 
struct IOBDBlockStorageDriver_vtbl_layout; 
struct IODVDBlockStorageDriver_vtbl; 
struct IOBDBlockStorageDriver_vtbl; 
struct IOSCSIMultimediaCommandsDevice_vtbl_layout; 
struct IOSCSIPeripheralDeviceType05_vtbl_layout; 
struct IOSCSIMultimediaCommandsDevice_vtbl; 
struct IOSCSIPeripheralDeviceType05_vtbl; 
struct BluetoothHCIEventChangeConnectionLinkKeyCompleteResults {BluetoothConnectionHandle connectionHandle;};
struct BluetoothHCIEventEncryptionKeyRefreshCompleteResults {BluetoothConnectionHandle connectionHandle;};
struct __Request__task_register_dyld_get_process_state_t {mach_msg_header_t Head;};
struct BluetoothHCIEventAuthenticationCompleteResults {BluetoothConnectionHandle connectionHandle;};
struct BluetoothHCIEventSimplePairingCompleteResults {BluetoothDeviceAddress deviceAddress;};
struct __Request__host_virtual_physical_table_info_t {mach_msg_header_t Head;};
struct __Request__mach_zone_info_for_largest_zone_t {mach_msg_header_t Head;};
typedef mach_msg_type_number_t mach_voucher_attr_value_handle_array_size_t;
struct BluetoothHCIEventDataBufferOverflowResults {BluetoothLinkType linkType;};
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_array_size_t;
struct __Request__ktrace_background_available_t {mach_msg_header_t Head;};
typedef mach_voucher_attr_recipe_command_t *mach_voucher_attr_recipe_command_array_t;
struct __Request__mach_port_space_basic_info_t {mach_msg_header_t Head;};
struct __Request__processor_set_stack_usage_t {mach_msg_header_t Head;};
struct __Request__task_get_dyld_image_infos_t {mach_msg_header_t Head;};
struct __Request__task_get_emulation_vector_t {mach_msg_header_t Head;};
typedef mach_voucher_attr_value_handle_t *mach_voucher_attr_value_handle_array_t;
struct BluetoothHCICurrentInquiryAccessCodes {BluetoothHCIInquiryAccessCodeCount count;BluetoothHCIInquiryAccessCode *codes;};
struct BluetoothHCIEventFlushOccurredResults {BluetoothConnectionHandle connectionHandle;};
struct BluetoothHCIEventHardwareErrorResults {BluetoothHCIStatus error;};
struct __Request__mach_zone_get_zlog_zones_t {mach_msg_header_t Head;};
struct __Request__processor_get_assignment_t {mach_msg_header_t Head;};
struct BluetoothHCIEventQoSViolationResults {BluetoothConnectionHandle connectionHandle;};
typedef mach_voucher_attr_raw_recipe_t mach_voucher_attr_raw_recipe_array_t;
struct BluetoothHCIReadLocalOOBDataResults {BluetoothHCISimplePairingOOBData hash;BluetoothHCISimplePairingOOBData randomizer;};
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_size_t;
struct __Request__mach_notify_send_once_t {mach_msg_header_t Head;};
struct __Request__processor_set_default_t {mach_msg_header_t Head;};
struct __Request__processor_set_destroy_t {mach_msg_header_t Head;};
struct __Request__processor_set_threads_t {mach_msg_header_t Head;};
struct __Request__thread_assign_default_t {mach_msg_header_t Head;};
struct __Request__thread_get_assignment_t {mach_msg_header_t Head;};
struct __Request__mach_port_space_info_t {mach_msg_header_t Head;};
struct __Request__processor_set_create_t {mach_msg_header_t Head;};
struct __Request__task_generate_corpse_t {mach_msg_header_t Head;};
struct __Request__thread_depress_abort_t {mach_msg_header_t Head;};
struct __Request__vm_map_exec_lockdown_t {mach_msg_header_t Head;};
struct __Request__vm_mapped_pages_info_t {mach_msg_header_t Head;};
struct __Request__host_kernel_version_t {mach_msg_header_t Head;};
struct __Request__host_lockgroup_info_t {mach_msg_header_t Head;};
struct __Request__host_processor_sets_t {mach_msg_header_t Head;};
struct __Request__processor_set_tasks_t {mach_msg_header_t Head;};
struct __Request__task_get_assignment_t {mach_msg_header_t Head;};
struct __Request__thread_abort_safely_t {mach_msg_header_t Head;};
struct BluetoothHCIRequestCallbackInfo {mach_vm_address_t userCallback;mach_vm_address_t userRefCon;mach_vm_address_t internalRefCon;mach_vm_address_t asyncIDRefCon;mach_vm_address_t reserved;};
struct __Request__host_get_UNDServer_t {mach_msg_header_t Head;};
struct __Request__host_get_boot_info_t {mach_msg_header_t Head;};
struct __Request__host_get_io_master_t {mach_msg_header_t Head;};
struct __Request__mach_zone_force_gc_t {mach_msg_header_t Head;};
struct __Request__task_purgable_info_t {mach_msg_header_t Head;};
typedef mach_msg_type_number_t mach_voucher_attr_recipe_size_t;
struct IOFWSimplePhysicalAddressSpace { IOFWPhysicalAddressSpace cppsuper0;void *fSimplePhysSpaceMembers;};
struct __Request__mach_ports_lookup_t {mach_msg_header_t Head;};
struct __Request__mach_memory_info_t {mach_msg_header_t Head;};
struct __Request__thread_terminate_t {mach_msg_header_t Head;};
typedef atm_memory_descriptor_t *atm_memory_descriptor_array_t;
typedef mach_voucher_attr_key_t *mach_voucher_attr_key_array_t;
struct __Request__host_processors_t {mach_msg_header_t Head;};
struct __Request__mach_port_names_t {mach_msg_header_t Head;};
struct __Request__processor_start_t {mach_msg_header_t Head;};
struct IOFWPhysicalAddressSpaceAux { IOFWAddressSpaceAux cppsuper0;IOFWPhysicalAddressSpaceAux__ExpansionData *reserved;IODMACommand *fDMACommand;char fDMACommandPrepared;};
struct IOVideoDeviceUserClientInit { IOService cppsuper0;};
struct __Request__clock_get_time_t {mach_msg_header_t Head;};
struct __Request__host_page_size_t {mach_msg_header_t Head;};
struct __Request__lockd_shutdown_t {mach_msg_header_t Head;};
struct __Request__mach_zone_info_t {mach_msg_header_t Head;};
struct __Request__processor_exit_t {mach_msg_header_t Head;};
struct __Request__task_terminate_t {mach_msg_header_t Head;};
struct __Request__task_zone_info_t {mach_msg_header_t Head;};
struct __Request__thread_suspend_t {mach_msg_header_t Head;};
struct __Request__kmod_get_info_t {mach_msg_header_t Head;};
struct __Request__task_suspend2_t {mach_msg_header_t Head;};
struct __Request__thread_create_t {mach_msg_header_t Head;};
struct __Request__thread_resume_t {mach_msg_header_t Head;};
struct IODisplayParameterHandler { IOService cppsuper0;};
struct IOFWPseudoAddressSpaceAux { IOFWAddressSpaceAux cppsuper0;IOFWPseudoAddressSpaceAux__MemberVariables *fMembers;};
struct IOMbufNaturalMemoryCursor { IOMbufMemoryCursor cppsuper0;};
struct __Request__task_resume2_t {mach_msg_header_t Head;};
struct __Request__task_suspend_t {mach_msg_header_t Head;};
struct __Request__task_threads_t {mach_msg_header_t Head;};
struct __Request__thread_abort_t {mach_msg_header_t Head;};
typedef exception_handler_t *exception_handler_array_t;
struct IOMbufLittleMemoryCursor { IOMbufMemoryCursor cppsuper0;};
struct __Request__task_resume_t {mach_msg_header_t Head;};
struct __Request__kextd_ping_t {mach_msg_header_t Head;};
struct __Request__lockd_ping_t {mach_msg_header_t Head;};
typedef exception_handler_array_t exception_port_arrary_t;
struct IOPlatformExpertDevice { IOService cppsuper0;IOWorkLoop *workLoop;IOPlatformExpertDevice__ExpansionData *ioped_reserved;};
typedef mach_port_name_t *mach_port_name_array_t;
typedef mach_port_type_t *mach_port_type_array_t;
struct IOMbufBigMemoryCursor { IOMbufMemoryCursor cppsuper0;};
struct des3_ecb_key_schedule {ccecb_ctx enc[48];ccecb_ctx dec[48];};
struct mach_msg_empty_send_t {mach_msg_header_t header;};
typedef memory_object_t *memory_object_array_t;
struct IOBlockStorageDevice { IOService cppsuper0;IOBlockStorageDevice__ExpansionData *_expansionData;};
struct IODCLTranslateListen { IODCLTranslator cppsuper0;};
struct IOEthernetController { IONetworkController cppsuper0;IOEthernetController__ExpansionData *_reserved;};
struct OSCollectionIterator { OSIterator cppsuper0; OSCollection *collection;void *collIterator;unsigned int initialUpdateStamp;char valid;};
struct des_ecb_key_schedule {ccecb_ctx enc[16];ccecb_ctx dec[16];};
typedef io_user_scalar_t io_scalar_inband64_t[16];
typedef vm_offset_t *page_address_array_t;
struct priority_queue_entry {priority_queue_entry *next;priority_queue_entry *prev;int child;priority_queue_key_t key;};
struct IOFireWireLocalNode { IOFireWireNub cppsuper0;OSSet *fOpenClients;};
typedef mach_vm_address_t mach_port_context_t;
typedef mach_port_name_t mach_voucher_name_t;
struct IODCLTranslateTalk { IODCLTranslator cppsuper0;};
struct IOFWLocalIsochPort { IOFWIsochPort cppsuper0;IOFireWireController *fControl;IODCLProgram *fProgram;IOFWLocalIsochPort__ExpansionData *fExpansion;};
struct IOSerialDriverSync { IOService cppsuper0;};
struct IOSerialStreamSync { IOService cppsuper0;IOSerialDriverSync *fProvider;void *fRefCon;};
typedef mach_vm_offset_t *emulation_vector_t;
struct IOATABusCommand64 { IOATABusCommand cppsuper0;IODMACommand *_dmaCmd;};
struct IONVRAMController { IOService cppsuper0;};
struct evioSpecialKeyMsg {mach_msg_header_t Head;int key;int direction;int flags;int level;};
typedef mach_port_name_t *port_name_array_t;
struct AppleMacIODevice { IOService cppsuper0;AppleMacIODevice__ExpansionData *reserved;};
struct IOFWDelayCommand { IOFWBusCommand cppsuper0;IOFWDelayCommand__ExpansionData *reserved;};
struct IOFWWriteCommand { IOFWAsyncCommand cppsuper0;int fPackSize;};
struct IOFireWireAVCNub { IOService cppsuper0;IOFireWireNub *fDevice;};
struct IOGraphicsDevice { IOService cppsuper0;};
struct IOPlatformDevice { IOService cppsuper0;IOPlatformDevice__ExpansionData *iopd_reserved;};
struct IOPlatformExpert { IOService cppsuper0;int _peBootROMType;int _peChipSetType;int _peMachineType;IOPMrootDomain *root;int _pePMFeatures;int _pePrivPMFeatures;int _peNumBatteriesSupported;OSArray *thePowerTree;char searchingForAdditionalParents;OSNumber *multipleParentKeyValue;int numInstancesRegistered;IOPlatformExpert__ExpansionData *iope_reserved;};
struct IODMAController { IOService cppsuper0;IOService *_provider; OSSymbol *_dmaControllerName;};
struct IOFWReadCommand { IOFWAsyncCommand cppsuper0;};
struct IOPMPowerSource { IOService cppsuper0;char settingsChangedSinceUpdate;OSDictionary *properties; OSSymbol *externalConnectedKey; OSSymbol *externalChargeCapableKey; OSSymbol *batteryInstalledKey; OSSymbol *chargingKey; OSSymbol *warnLevelKey; OSSymbol *criticalLevelKey; OSSymbol *currentCapacityKey; OSSymbol *maxCapacityKey; OSSymbol *timeRemainingKey; OSSymbol *amperageKey; OSSymbol *voltageKey; OSSymbol *cycleCountKey; OSSymbol *adapterInfoKey; OSSymbol *locationKey; OSSymbol *errorConditionKey; OSSymbol *manufacturerKey; OSSymbol *modelKey; OSSymbol *serialKey; OSSymbol *batteryInfoKey;IOPMPowerSource *nextInList;};
struct IOPwrController { IOService cppsuper0;};
struct IORTCController { IOService cppsuper0;};
struct IOWatchDogTimer { IOService cppsuper0;IONotifier *notifier;IOWatchDogTimer__ExpansionData *reserved;};
struct aes_decrypt_ctx {cccbc_ctx ctx[18];};
struct aes_encrypt_ctx {cccbc_ctx ctx[18];};
struct mach_msg_body_t {mach_msg_size_t msgh_descriptor_count;};
struct IOFireWireUnit { IOFireWireNub cppsuper0;IOFireWireDevice *fDevice;IOFireWireUnit__ExpansionData *reserved;};
struct IOPMrootDomain { IOService cppsuper0;};
struct IOAccelerator { IOService cppsuper0;};
struct IOFireWireBus { IOService cppsuper0;IOFireWireBusAux *fAuxiliary;};
struct symmetric_xts {ccxts_ctx enc[66];ccxts_ctx dec[66];};
struct IOHIDElement { OSCollection cppsuper0;IOHIDElement__ExpansionData *_reserved;};
struct IOUserClient { IOService cppsuper0;IOUserClient__ExpansionData *reserved;void *__reserved[9];};
typedef vm_offset_t vm_address_t;
struct IOAudioPort { IOService cppsuper0;IOAudioDevice *audioDevice;OSSet *audioControls;char isRegistered;IOAudioPort__ExpansionData *reserved;};
struct IOPCIBridge { IOService cppsuper0;void *__reserved1;void *__reserved2;IOPCIBridge__ExpansionData *reserved;};
struct in6_pktinfo {in6_addr ipi6_addr;unsigned int ipi6_ifindex;};
struct rsa_pub_ctx {ccrsa_pub_ctx key[130];};
struct AppleMacIO { IOService cppsuper0;IOService *fNub;IOMemoryMap *fMemory;AppleMacIO__ExpansionData *fReserved;};
struct IOHIDevice { IOService cppsuper0;};
struct _notifyMsg {mach_msg_header_t h;};
struct IOStorage { IOService cppsuper0;IOStorage__ExpansionData *_expansionData;};
struct in6_ifreq {char ifr_name[16];in6_ifreq___ADBCDBFC1B38B66A5357934350D29B8E ifr_ifru;};
struct ipv6_mreq {in6_addr ipv6mr_multiaddr;unsigned int ipv6mr_interface;};
struct AppleNMI { IOService cppsuper0;char enable_debugger;char mask_NMI;AppleNMI__ExpansionData *reserved;IOService *rootDomain;};
struct IOUSBLog { IOService cppsuper0;};
struct IORTC { IOService cppsuper0;IORTC__ExpansionData *iortc_reserved;};
struct IOEthernetController__IOEthernetAVBIngressFilterElement {IOEthernetController__IOEthernetAVBIngressFilterType filterType;IOEthernetController__IOEthernetAVBIngressFilterElement___113E187999B5ED6651BE6E50E62C7960 filter;};
struct __attribute__((packed)) StandardUSB__USB20ExtensionCapabilityDescriptor : StandardUSB__DeviceCapabilityDescriptor {uint32_t bmAttributes;};
union GTraceEntry___5FD22310585F2208134956ED9571B74A {_DA4E69B70BD9D876C7E6C9B85538FB9E __anonymous0;uint64_t fEntry[8];};
struct __Request__mach_memory_entry_access_tracking_t {mach_msg_header_t Head;NDR_record_t NDR;int access_tracking;};
struct BluetoothHCIEventReadExtendedFeaturesResults {BluetoothConnectionHandle connectionHandle;BluetoothHCIExtendedFeaturesInfo supportedFeaturesInfo;};
struct __Request__task_set_phys_footprint_limit_t {mach_msg_header_t Head;NDR_record_t NDR;int new_limit;};
struct __Request__processor_set_policy_enable_t {mach_msg_header_t Head;NDR_record_t NDR;int policy;};
struct __Request__thread_get_special_port_t {mach_msg_header_t Head;NDR_record_t NDR;int which_port;};
struct BluetoothHCIInquiryWithRSSIResults {BluetoothHCIInquiryWithRSSIResult results[50];IOItemCount count;};
struct __Request__host_get_special_port_t {mach_msg_header_t Head;NDR_record_t NDR;int node;int which;};
struct __Request__task_get_special_port_t {mach_msg_header_t Head;NDR_record_t NDR;int which_port;};
struct __Request__lock_handoff_accept_t {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct __Request__task_set_port_space_t {mach_msg_header_t Head;NDR_record_t NDR;int table_entries;};
struct __Request__lock_make_stable_t {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct __Request__semaphore_create_t {mach_msg_header_t Head;NDR_record_t NDR;int policy;int value;};
struct mach_send_once_notification_t {mach_msg_header_t not_header;mach_msg_format_0_trailer_t trailer;};
struct __Request__lock_set_create_t {mach_msg_header_t Head;NDR_record_t NDR;int n_ulocks;int policy;};
struct _IOAudioNotificationMessage {mach_msg_header_t messageHeader;UInt32 type;UInt32 ref;void *sender;};
struct __Request__audit_triggers_t {mach_msg_header_t Head;NDR_record_t NDR;int flags;};
struct BluetoothHCIInquiryResults {BluetoothHCIInquiryResult results[50];IOItemCount count;};
struct IOFBDisplayModeDescription {IODisplayModeInformation info;IOTimingInformation timingInfo;};
struct IOFWCompareAndSwapCommand { IOFWAsyncCommand cppsuper0;UInt32 fInputVals[4];UInt32 fOldVal[2];IOFWCompareAndSwapCommand__MemberVariables *fMembers;};
struct __Request__lock_acquire_t {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct __Request__lock_handoff_t {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct __Request__lock_release_t {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct __Request__host_reboot_t {mach_msg_header_t Head;NDR_record_t NDR;int options;};
struct IOVideoDeviceUserClient { IOUserClient cppsuper0; IOExternalMethodDispatch *mExternalMethods;IOVideoDevice *mDevice;task_t mTask;};
struct IOInterruptController { IOService cppsuper0;IOInterruptVector *vectors;IOSimpleLock *controllerLock;IOInterruptController__ExpansionData *ioic_reserved;};
struct __Request__lock_try_t {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct IOACPIPlatformDevice { IOPlatformDevice cppsuper0;void *_deviceHandle;UInt32 _deviceType;UInt32 _powerFlags;UInt32 *_powerStateFlags;UInt32 _sleepPowerState;IOService *_acpiParent;IOACPIPlatformExpert *_platform;IOACPIPlatformDevice__ExpansionData *reserved;};
struct IOFWWriteQuadCommand { IOFWAsyncCommand cppsuper0;UInt32 fQuads[8];UInt32 *fQPtr;int fPackSize;};
struct IOFireWireSBP2Target { IOService cppsuper0;IOFireWireSBP2Target__ExpansionData *fExpansionData;char fOpenFromTarget;UInt32 fOpenFromLUNCount;IOFireWireUnit *fProviderUnit;UInt32 fFlags;IOFireWireController *fControl;UInt32 fIOCriticalSectionCount;};
struct _IODataQueueAppendix {UInt32 version;mach_msg_header_t msgh;};
struct mach_msg_empty_rcv_t {mach_msg_header_t header;mach_msg_trailer_t trailer;};
struct ATATimerEventSource { IOTimerEventSource cppsuper0;UInt32 hasExpired;ATATimerEventSource__ExpansionData *reserved;};
struct IOFWReadQuadCommand { IOFWAsyncCommand cppsuper0;UInt32 *fQuads;};
struct IOStreamUserClient { IOUserClient cppsuper0;IOStream *_owner;task_t _task;};
struct IOUSBHostInterface { IOService cppsuper0;IOCommandGate *_commandGate;IOWorkLoop *_workLoop;uint32_t _deviceIdleTimeout;IOUSBHostPipe *_pipeList[32];char _pipeLock; StandardUSB__ConfigurationDescriptor *_configurationDescriptor; StandardUSB__InterfaceDescriptor *_interfaceDescriptor;IOUSBHostDevice *_device;uint32_t _debugLoggingMask;uint32_t _locationID;IOUSBHostInterface__tExpansionData *_expansionData;};
struct IOFireWireSBP2LUN { IOService cppsuper0;IOFireWireSBP2LUN__ExpansionData *reserved;IOFireWireSBP2Target *fProviderTarget;UInt32 fLUNumber;OSSet *fLoginSet;OSIterator *fLoginSetIterator;IOCommandGate *fGate;OSSet *fORBSet;OSIterator *fORBSetIterator;OSObject *fDiagnostics;};
struct IOHIDEventService { IOService cppsuper0;IOHIDKeyboard *_keyboardNub;IOHIDPointing *_pointingNub;IOHIDConsumer *_consumerNub;IONotifier *_publishNotify;IORecursiveLock *_nubLock;void *_reserved0;char _readyForInputReports;IOHIDEventService__ExpansionData *_reserved;};
struct IOPartitionScheme { IOStorage cppsuper0;IOPartitionScheme__ExpansionData *_expansionData;IOStorageAccess _openLevel;OSSet *_openReaders;OSSet *_openReaderWriters;};
struct IOPowerConnection { IOService cppsuper0;char stateKnown;IOPMPowerFlags currentPowerFlags;unsigned int desiredDomainState;char requestFlag;unsigned int preventIdleSleepFlag;unsigned int preventSystemSleepFlag;char awaitingAck;char readyFlag;};
struct IODisplayConnect { IOService cppsuper0;IOIndex connection;IODisplayConnect__ExpansionData *reserved;};
struct IOHIDEventDriver { IOHIDEventService cppsuper0;IOHIDInterface *_interface;void *_reservedVoid[3];OSArray *_supportedElements;UInt32 _bootSupport;char _multipleReports;char _authenticatedDevice;char _reservedBool;UInt32 _reservedUInt32;char _reservedBool1;IOHIDEventDriver__ExpansionData *_reserved;};
struct IOMediaBSDClient { IOService cppsuper0;IOMediaBSDClient__ExpansionData *_expansionData;AnchorTable *_anchors;UInt32 _reserved0064;UInt32 _reserved0096;MinorTable *_minors;UInt32 _reserved0160;};
struct IOReportInterest {uint64_t provider_id;IOReportChannel channel;};
union mach_msg_empty_t {mach_msg_empty_send_t send;mach_msg_empty_rcv_t rcv;};
struct mach_msg_base_t {mach_msg_header_t header;mach_msg_body_t body;};
struct IOI2CInterface { IOService cppsuper0;UInt64 fID;};
struct in6_addrpolicy {sockaddr_in6 addr;sockaddr_in6 addrmask;int preced;int label;u_quad_t use;};
struct IOVideoDevice { IOService cppsuper0;OSArray *mStreams;IOVideoDeviceNotificationMessage *mNotificationMessage;UInt32 mMaxNumberNotifications;UInt32 mOutstandingConfigChangeRequests;IOVideoDevice__ExpansionData *mReserved;};
struct IOVideoStream { IOStream cppsuper0;IOStreamMode mStreamMode;IOVideoStream__ExpansionData *mReserved;};
struct vm_read_entry {vm_address_t address;vm_size_t size;};
struct in6_aliasreq {char ifra_name[16];sockaddr_in6 ifra_addr;sockaddr_in6 ifra_broadaddr;sockaddr_in6 ifra_prefixmask;int ifra_flags;in6_addrlifetime ifra_lifetime;};
struct msqid_kernel {user_msqid_ds u;label *label;};
struct evioLLEvent {int setCursor;int type;IOGPoint location;NXEventData data;int setFlags;int flags;};
struct ip6_mtuinfo {sockaddr_in6 ip6m_addr;uint32_t ip6m_mtu;};
struct IODisplay { IOService cppsuper0;IODisplayConnect *fConnection;IODisplayParameterHandler *fParameterHandler;void *__resv;IONotifier *fNotifier;IODisplayPMVars *fDisplayPMVars;uintptr_t fWSAADeferState;void *_IODisplay_reserved[31];};
struct IOMapper { IOService cppsuper0;uint64_t __reserved[8];char fIsSystem;};
struct aes_ctx {aes_decrypt_ctx decrypt;aes_encrypt_ctx encrypt;};
struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_attr_control;};
struct __Reply__mach_voucher_attr_control_create_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t voucher;};
struct __Reply__task_register_dyld_shared_cache_image_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__mach_port_special_reply_port_reset_link_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_voucher_extract_all_attr_recipes_t {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t recipesCnt;};
struct __Request__mach_memory_entry_purgable_control_t {mach_msg_header_t Head;NDR_record_t NDR;vm_purgable_t control;int state;};
struct __Reply__memory_object_synchronize_completed_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__task_register_dyld_set_dyld_state_t {mach_msg_header_t Head;NDR_record_t NDR;uint8_t dyld_state;char dyld_statePad[3];};
struct __Reply__mach_memory_entry_purgable_control_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int state;};
struct __Reply__mach_memory_object_memory_entry_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t entry_handle;};
struct __Reply__task_register_dyld_set_dyld_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__host_set_multiuser_config_flags_t {mach_msg_header_t Head;NDR_record_t NDR;uint32_t multiuser_flags;};
struct __Reply__task_unregister_dyld_image_infos_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__host_security_create_task_token_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_task;};
struct __Reply__host_set_multiuser_config_flags_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_memory_object_memory_entry_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t entry_handle;};
struct __Reply__memory_object_change_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_request_notification_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t previous;};
struct __Reply__task_register_dyld_image_infos_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__host_set_atm_diagnostic_flag_t {mach_msg_header_t Head;NDR_record_t NDR;uint32_t diagnostic_flag;};
struct __Request__processor_set_policy_disable_t {mach_msg_header_t Head;NDR_record_t NDR;int policy;boolean_t change_threads;};
struct __Reply__task_set_phys_footprint_limit_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int old_limit;};
struct __Request__mach_zone_get_btlog_records_t {mach_msg_header_t Head;NDR_record_t NDR;mach_zone_name_t name;};
struct __Request__memory_object_recover_named_t {mach_msg_header_t Head;NDR_record_t NDR;boolean_t wait_on_terminating;};
struct __Reply__host_security_set_task_token_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__host_set_atm_diagnostic_flag_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_set_policy_control_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_set_policy_disable_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__mach_notify_port_destroyed_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t rights;};
struct __Request__memory_object_cluster_size_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_fault_info_t fault_info;};
struct __Request__memory_object_release_name_t {mach_msg_header_t Head;NDR_record_t NDR;integer_t flags;};
struct __Request__processor_set_max_priority_t {mach_msg_header_t Head;NDR_record_t NDR;int max_priority;boolean_t change_threads;};
struct __Request__thread_get_exception_ports_t {mach_msg_header_t Head;NDR_record_t NDR;exception_mask_t exception_mask;};
struct __Reply__host_default_memory_manager_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_manager;};
struct __Reply__ktrace_background_available_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__memory_object_recover_named_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_set_policy_enable_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_notify_port_destroyed_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__memory_object_release_name_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_set_max_priority_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_set_exception_ports_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__host_get_exception_ports_t {mach_msg_header_t Head;NDR_record_t NDR;exception_mask_t exception_mask;};
struct __Request__mach_notify_port_deleted_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_port_dnrequest_info_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_port_extract_member_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_name_t pset;};
struct __Request__mach_port_get_set_status_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__sysdiagnose_notification_t {mach_msg_header_t Head;NDR_record_t NDR;uint32_t flags;};
struct __Request__task_get_exception_ports_t {mach_msg_header_t Head;NDR_record_t NDR;exception_mask_t exception_mask;};
struct __Request__thread_swap_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_voucher;mach_msg_port_descriptor_t old_voucher;};
struct __Reply__host_request_notification_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_emulation_vector_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
union __RequestUnion__lockd_mach_subsystem {__Request__lockd_request_t Request_lockd_request;__Request__lockd_ping_t Request_lockd_ping;__Request__lockd_shutdown_t Request_lockd_shutdown;};
struct __Request__host_processor_set_priv_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t set_name;};
struct __Request__mach_port_insert_member_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_name_t pset;};
struct __Request__mach_port_kernel_object_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_zone_info_for_zone_t {mach_msg_header_t Head;NDR_record_t NDR;mach_zone_name_t name;};
struct __Request__task_map_corpse_info_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t corspe_task;};
struct __Request__thread_get_mach_voucher_t {mach_msg_header_t Head;NDR_record_t NDR;mach_voucher_selector_t which;};
struct __Request__thread_set_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t voucher;};
struct __Reply__host_create_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t voucher;};
struct __Reply__host_set_exception_ports_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_notify_port_deleted_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_dnrequest_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int dnr_total;unsigned int dnr_used;};
struct __Reply__mach_port_extract_member_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_set_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_purgable_control_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int state;};
struct __Reply__processor_get_assignment_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t assigned_set;};
struct __Reply__sysdiagnose_notification_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_exception_ports_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_swap_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_voucher;};
struct __Request__host_get_clock_control_t {mach_msg_header_t Head;NDR_record_t NDR;clock_id_t clock_id;};
struct __Request__host_get_clock_service_t {mach_msg_header_t Head;NDR_record_t NDR;clock_id_t clock_id;};
struct __Request__mach_notify_no_senders_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_mscount_t mscount;};
struct __Request__mach_vm_region_info_64_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;};
struct __Request__task_swap_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_voucher;mach_msg_port_descriptor_t old_voucher;};
struct __Request__telemetry_notification_t {mach_msg_header_t Head;NDR_record_t NDR;uint32_t flags;};
struct __Reply__host_processor_set_priv_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t set;};
struct __Reply__mach_port_allocate_name_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_extract_right_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t poly;};
struct __Reply__mach_port_insert_member_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_kernel_object_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int object_type;unsigned int object_addr;};
struct __Reply__thread_get_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t voucher;};
struct __Reply__thread_get_special_port_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;};
struct __Reply__thread_set_mach_voucher_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_set_special_port_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__mach_notify_dead_name_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_port_get_context_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_port_get_srights_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_port_move_member_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t member;mach_port_name_t after;};
struct __Request__memory_object_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t reason;};
struct __Request__task_get_mach_voucher_t {mach_msg_header_t Head;NDR_record_t NDR;mach_voucher_selector_t which;};
struct __Request__task_set_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t voucher;};
struct __Reply__coalition_notification_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__host_get_clock_control_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t clock_ctrl;};
struct __Reply__host_get_clock_service_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t clock_serv;};
struct __Reply__mach_notify_no_senders_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_insert_right_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_swap_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_voucher;};
struct __Reply__telemetry_notification_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__mach_port_deallocate_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__memory_object_create_t {mach_msg_header_t Head;NDR_record_t NDR;vm_size_t new_memory_object_size;};
struct __Request__task_map_corpse_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t corspe_task;};
struct IOVideoDeviceNotificationMessage {mach_msg_header_t mMessageHeader;UInt32 mClientData;UInt32 mNumberNotifications;IOVideoDeviceNotification mNotifications[1];};
struct __Reply__host_get_special_port_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port;};
struct __Reply__host_set_special_port_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_notify_dead_name_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_notify_send_once_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_move_member_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_set_context_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_set_mscount_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__memory_object_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_set_default_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_set;};
struct __Reply__processor_set_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_get_mach_voucher_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t voucher;};
struct __Reply__task_get_special_port_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;};
struct __Reply__task_set_mach_voucher_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_special_port_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_assign_default_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_create_running_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_act;};
struct __Reply__thread_get_assignment_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t assigned_set;};
struct __Request__find_code_signature_t {mach_msg_header_t Head;NDR_record_t NDR;int32_t new_pid;};
struct __Request__host_processor_info_t {mach_msg_header_t Head;NDR_record_t NDR;processor_flavor_t flavor;};
struct __Request__mach_vm_region_info_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;};
struct __Request__task_assign_default_t {mach_msg_header_t Head;NDR_record_t NDR;boolean_t assign_threads;};
struct __Reply__clock_set_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_exception_raise_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_deallocate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_behavior_set_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__memory_object_create_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_memory_object;};
struct __Reply__processor_set_create_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;mach_msg_port_descriptor_t new_name;};
struct __Reply__task_generate_corpse_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t corpse_task_port;};
struct __Reply__thread_depress_abort_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_map_exec_lockdown_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__host_set_UNDServer_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t server;};
struct __Request__mach_port_allocate_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;};
struct __Request__mach_vm_page_query_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_offset_t offset;};
struct __Request__processor_set_info_t {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t info_outCnt;};
struct __Request__task_set_emulation_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t routine_entry_pt;int routine_number;};
struct __Reply__find_code_signature_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lock_handoff_accept_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_set_seqno_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_ports_register_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_assign_default_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_get_assignment_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t assigned_set;};
struct __Reply__task_set_port_space_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_abort_safely_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_purgable_control_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int state;};
struct __Request__etap_trace_thread_t {mach_msg_header_t Head;NDR_record_t NDR;boolean_t trace_status;};
struct __Request__mach_port_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_port_kobject_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__semaphore_destroy_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t semaphore;};
struct __Request__vm_map_page_query_t {mach_msg_header_t Head;NDR_record_t NDR;vm_offset_t offset;};
struct __Reply__host_get_UNDServer_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t server;};
struct __Reply__host_get_io_master_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t io_master;};
struct __Reply__host_set_UNDServer_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_gss_log_error_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_destruct_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_mod_refs_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_deallocate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_zone_force_gc_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_emulation_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__lock_set_destroy_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t lock_set;};
struct __Request__mach_port_rename_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t old_name;mach_port_name_t new_name;};
struct __Reply__check_task_access_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__clock_alarm_reply_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__etap_trace_thread_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_unguard_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_control_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__semaphore_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_policy_set_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_set_policy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__task_set_ras_pc_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t basepc;vm_address_t boundspc;};
struct __Reply__lock_make_stable_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lock_set_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_port_rename_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_assign_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__semaphore_create_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t semaphore;};
struct __Reply__thread_set_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_terminate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__clock_set_time_t {mach_msg_header_t Head;NDR_record_t NDR;mach_timespec_t new_time;};
struct __Request__mach_port_type_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct IOFireWireBus__DCLTaskInfo {task_t unused0;vm_address_t unused1;UInt32 unused2;vm_address_t unused3;UInt32 unused4;void (*unused5)(void);IOFireWireBus__DCLTaskInfoAux *auxInfo;};
struct __Reply__exception_raise_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lock_set_create_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_lock_set;};
struct __Reply__mach_gss_lookup_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t gssd_session_port;};
struct __Reply__mach_port_guard_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_inherit_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_protect_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_start_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_policy_set_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_policy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_ras_pc_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_behavior_set_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__act_get_state_t {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t old_stateCnt;};
struct __Request__thread_assign_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;};
struct __Request__thread_sample_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t reply;};
struct __Reply__audit_triggers_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__clock_set_time_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lockd_shutdown_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__processor_exit_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_terminate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_suspend_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__kmod_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kmod_t module;};
struct IOAudioControlUserClient { IOUserClient cppsuper0;task_t clientTask;IOAudioControl *audioControl;IOAudioNotificationMessage *notificationMessage;IOAudioControlUserClient__ExpansionData *reserved;};
struct __Reply__act_set_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lockd_request_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_msync_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_write_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_set_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_suspend2_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t suspend_token;};
struct __Reply__thread_assign_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_create_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_act;};
struct __Reply__thread_policy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_resume_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_sample_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_deallocate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__kmod_create_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t info;};
struct __Request__task_sample_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t reply;};
struct IOSCSIProtocolInterface { IOService cppsuper0;IOSCSIProtocolInterface__IOSCSIProtocolInterfaceExpansionData *fIOSCSIProtocolInterfaceReserved;thread_call_t fPowerManagementThread;IOCommandGate *fCommandGate;UInt32 fCurrentPowerState;UInt32 fProposedPowerState;char fPowerTransitionInProgress;char fPowerAckInProgress;char fPowerManagementInitialized;char fUserClientExclusiveControlled;IOService *fUserClient;};
struct __Reply__kmod_destroy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lock_acquire_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lock_handoff_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lock_release_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_copy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__mach_vm_wire_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_resume2_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_suspend_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_abort_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__clock_alarm_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__host_reboot_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_assign_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_create_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_task;};
struct __Reply__task_policy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_resume_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_sample_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__thread_wire_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Request__task_wire_t {mach_msg_header_t Head;NDR_record_t NDR;boolean_t must_wire;};
struct __Request__upl_abort_t {mach_msg_header_t Head;NDR_record_t NDR;integer_t abort_cond;};
struct __Reply__kextd_ping_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__lockd_ping_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__upl_commit_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_inherit_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_protect_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__task_wire_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__upl_abort_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct com_apple_iokit_KLog { IOService cppsuper0;com_apple_iokit_KLogClient *mClientPtr[6];unsigned char *mMsgBuffer;UInt8 mClientCount;UInt8 mMsgSize;char mErrFlag;timeval *mTimeVal;IOLock *mLogLock;};
struct IOEthernetInterface { IONetworkInterface cppsuper0;thread_call_t _inputEventThreadCall;UInt32 _mcAddrCount;char _ctrEnabled;OSDictionary *_supportedFilters;OSDictionary *_requiredFilters;OSDictionary *_activeFilters;char _controllerLostPower;IOEthernetInterface__ExpansionData *_reserved;};
struct __Reply__lock_try_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_msync_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_write_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct IOFireWirePCRSpace { IOFWPseudoAddressSpace cppsuper0;UInt32 fBuf[64];IOFireWirePCRSpace__Client fClients[64];UInt32 fActivations;IOFireWireAVCTargetSpace *fAVCTargetSpace;IONotifier *fNotifier;IOFireWirePCRSpace__ExpansionData *reserved;};
struct __Reply__vm_copy_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct __Reply__vm_wire_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct IOFireWireAVCUnit { IOFireWireAVCNub cppsuper0;IOFWPseudoAddressSpace *fFCPResponseSpace;IOLock *avcLock;IOFireWireAVCCommand *fCommand;UInt8 fSubUnitCount[32];char fStarted;IOLock *cmdLock;IOFireWireAVCUnit__ExpansionData *fIOFireWireAVCUnitExpansion;};
struct mig_reply_error_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct IOKernelDebugger { IOService cppsuper0;IOService *_target;IODebuggerTxHandler _txHandler;IODebuggerRxHandler _rxHandler;IOService *_client;char _pmDisabled;IOKernelDebugger__ExpansionData *_reserved;};
struct IOATADevice { IOService cppsuper0;IOATAController *_provider;ataUnitID _unitNumber;ataDeviceType _deviceType;IOATADevice__ExpansionData *reserved;};
struct IOHIDDevice { IOService cppsuper0;OSArray *_elementArray;UInt32 _dataElementIndex;IORecursiveLock *_elementLock;IOHIDReportHandler *_reportHandlers;IOBufferMemoryDescriptor *_elementValuesDescriptor;char _readyForInputReports;UInt32 _reportCount;UInt32 _maxInputReportSize;UInt32 _maxOutputReportSize;UInt32 _maxFeatureReportSize;IOHIDDevice__ExpansionData *_reserved;};
struct IOPCIDevice { IOService cppsuper0;IOPCIBridge *parent;IOMemoryMap *ioMap;OSObject *slotNameProperty;IOPCIDeviceExpansionData *reserved;IOPCIAddressSpace space;UInt32 *savedConfig;};
struct __Request__mach_voucher_attr_control_create_mach_voucher_t {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t recipesCnt;uint8_t recipes[5120];};
struct __Request__task_register_dyld_shared_cache_image_info_t {mach_msg_header_t Head;NDR_record_t NDR;dyld_kernel_image_info_t dyld_cache_image;boolean_t no_cache;boolean_t private_cache;};
struct __Reply__mach_port_special_reply_port_reset_link_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;boolean_t srp_lost_link;};
struct __Request__memory_object_synchronize_completed_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_offset_t offset;memory_object_size_t length;};
struct __Reply__task_register_dyld_get_process_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;dyld_kernel_process_info_t dyld_process_state;};
struct __Request__mach_voucher_extract_attr_content_t {mach_msg_header_t Head;NDR_record_t NDR;mach_voucher_attr_key_t key;mach_msg_type_number_t contentCnt;};
struct __Request__mach_voucher_extract_attr_recipe_t {mach_msg_header_t Head;NDR_record_t NDR;mach_voucher_attr_key_t key;mach_msg_type_number_t recipeCnt;};
struct __Reply__mach_memory_entry_access_tracking_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int access_tracking;uint32_t access_tracking_reads;uint32_t access_tracking_writes;};
struct __Request__memory_object_change_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_flavor_t flavor;mach_msg_type_number_t attributesCnt;int attributes[6];};
struct receive_sysdiagnose_notification_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[1];};
struct __Request__memory_object_get_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_flavor_t flavor;mach_msg_type_number_t attributesCnt;};
struct __Reply__memory_object_get_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t attributesCnt;int attributes[6];};
struct __Reply__mach_port_space_basic_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;ipc_info_space_basic_t basic_info;};
struct __Request__host_create_mach_voucher_t {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t recipesCnt;uint8_t recipes[5120];};
struct __Request__mach_vm_purgable_control_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;vm_purgable_t control;int state;};
struct __Request__processor_set_statistics_t {mach_msg_header_t Head;NDR_record_t NDR;processor_set_flavor_t flavor;mach_msg_type_number_t info_outCnt;};
struct __Reply__mach_vm_machine_attribute_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_machine_attribute_val_t value;};
struct __Request__mach_port_allocate_name_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;mach_port_name_t name;};
struct __Request__mach_port_extract_right_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_msg_type_name_t msgt_name;};
struct __Request__mach_voucher_debug_info_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t voucher_name;mach_msg_type_number_t recipesCnt;};
struct __Request__thread_set_special_port_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;NDR_record_t NDR;int which_port;};
struct __Reply__mach_vm_page_range_query_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_size_t dispositions_count;};
struct __Request__coalition_notification_t {mach_msg_header_t Head;NDR_record_t NDR;uint64_t id;uint32_t flags;};
struct __Request__mach_port_allocate_qos_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;mach_port_qos_t qos;};
struct __Request__mach_vm_read_overwrite_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;mach_vm_address_t data;};
struct __Request__memory_object_range_op_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_offset_t offset_beg;memory_object_offset_t offset_end;integer_t ops;};
struct __Reply__mach_zone_info_for_zone_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_zone_info_t info;};
struct __Request__host_set_special_port_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port;NDR_record_t NDR;int which;};
struct __Request__mach_port_set_context_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_vm_address_t context;};
struct __Request__mach_port_set_mscount_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_mscount_t mscount;};
struct __Request__memory_object_page_op_t {mach_msg_header_t Head;NDR_record_t NDR;memory_object_offset_t offset;integer_t ops;};
struct __Request__task_set_special_port_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;NDR_record_t NDR;int which_port;};
struct mach_port_destroyed_notification_t {mach_msg_header_t not_header;mach_msg_body_t not_body;mach_msg_port_descriptor_t not_port;mach_msg_format_0_trailer_t trailer;};
struct __Reply__mach_vm_read_overwrite_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_size_t outsize;};
struct __Reply__memory_object_range_op_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;integer_t range;};
struct __Request__clock_get_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;clock_flavor_t flavor;mach_msg_type_number_t clock_attrCnt;};
struct __Request__clock_set_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;clock_flavor_t flavor;mach_msg_type_number_t clock_attrCnt;int clock_attr[1];};
struct __Request__host_priv_statistics_t {mach_msg_header_t Head;NDR_record_t NDR;host_flavor_t flavor;mach_msg_type_number_t host_info_outCnt;};
struct mach_send_possible_notification_t {mach_msg_header_t not_header;NDR_record_t NDR;mach_port_name_t not_port;mach_msg_format_0_trailer_t trailer;};
struct __Reply__mach_port_get_context_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t context;};
struct __Reply__mach_port_get_srights_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_rights_t srights;};
struct __Request__mach_port_set_seqno_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_seqno_t seqno;};
struct __Request__vm_purgable_control_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_purgable_t control;int state;};
struct coalition_notification_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[1];};
struct mach_port_deleted_notification_t {mach_msg_header_t not_header;NDR_record_t NDR;mach_port_name_t not_port;mach_msg_format_0_trailer_t trailer;};
struct telemetry_notification_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[1];};
struct __Reply__clock_get_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t clock_attrCnt;int clock_attr[1];};
struct __Reply__mach_gss_unhold_cred_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;uint32_t major_stat;uint32_t minor_stat;};
struct __Reply__vm_machine_attribute_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_machine_attribute_val_t value;};
struct __Request__mach_gss_log_error_t {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t mntOffset;mach_msg_type_number_t mntCnt;char mnt[1024];uint32_t uid;mach_msg_type_number_t sourceOffset;mach_msg_type_number_t sourceCnt;char source[1024];uint32_t major_stat;uint32_t minor_stat;};
struct __Request__mach_port_get_refs_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_right_t right;};
struct __Request__mach_vm_deallocate_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;};
struct memory_object_default_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[1];};
struct __Reply__host_kernel_version_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t kernel_versionOffset;mach_msg_type_number_t kernel_versionCnt;char kernel_version[512];};
struct __Reply__mach_port_construct_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_name_t name;};
struct __Request__check_task_access_t {mach_msg_header_t Head;NDR_record_t NDR;int32_t calling_pid;uint32_t calling_gid;int32_t target_pid;};
struct __Request__host_statistics64_t {mach_msg_header_t Head;NDR_record_t NDR;host_flavor_t flavor;mach_msg_type_number_t host_info64_outCnt;};
struct __Request__mach_port_unguard_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;uint64_t guard;};
struct __Request__mach_vm_read_list_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_read_entry_t data_list;natural_t count;};
struct __Request__processor_control_t {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t processor_cmdCnt;integer_t processor_cmd[12];};
struct __Request__vm_read_overwrite_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t data;};
struct mach_no_senders_notification_t {mach_msg_header_t not_header;NDR_record_t NDR;mach_msg_type_number_t not_count;mach_msg_format_0_trailer_t trailer;};
struct __Reply__host_get_boot_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t boot_infoOffset;mach_msg_type_number_t boot_infoCnt;char boot_info[4096];};
struct __Reply__mach_gss_hold_cred_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;uint32_t major_stat;uint32_t minor_stat;};
struct __Reply__mach_port_allocate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_name_t name;};
struct __Reply__mach_port_get_refs_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_urefs_t refs;};
struct __Reply__mach_vm_page_query_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;integer_t disposition;integer_t ref_count;};
struct __Reply__task_purgable_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;task_purgable_info_t stats;};
struct __Request__mach_vm_allocate_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;int flags;};
struct __Request__thread_get_state_t {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t old_stateCnt;};
struct mach_dead_name_notification_t {mach_msg_header_t not_header;NDR_record_t NDR;mach_port_name_t not_port;mach_msg_format_0_trailer_t trailer;};
struct mach_voucher_attr_recipe_data {mach_voucher_attr_key_t key;mach_voucher_attr_recipe_command_t command;mach_voucher_name_t previous_voucher;mach_voucher_attr_content_size_t content_size;};
struct __Reply__mach_vm_page_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t infoCnt;int info[32];};
struct __Reply__mach_vm_read_list_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_read_entry_t data_list;};
struct __Reply__vm_map_page_query_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;integer_t disposition;integer_t ref_count;};
struct __Reply__vm_read_overwrite_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_size_t outsize;};
struct __Request__host_statistics_t {mach_msg_header_t Head;NDR_record_t NDR;host_flavor_t flavor;mach_msg_type_number_t host_info_outCnt;};
struct __Request__mach_gss_lookup_t {mach_msg_header_t Head;NDR_record_t NDR;uint32_t uid;int32_t asid;};
struct __Reply__mach_vm_allocate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t address;};
struct __Reply__upl_commit_range_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;boolean_t empty;};
struct __Request__processor_info_t {mach_msg_header_t Head;NDR_record_t NDR;processor_flavor_t flavor;mach_msg_type_number_t processor_info_outCnt;};
struct __Request__task_get_state_t {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t old_stateCnt;};
struct __Reply__upl_abort_range_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;boolean_t empty;};
struct __Reply__vm_allocate_cpm_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;};
struct __Request__act_set_state_t {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
struct __Request__vm_deallocate_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;};
struct __Reply__clock_get_time_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_timespec_t cur_time;};
struct __Reply__host_page_size_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_size_t out_page_size;};
struct __Reply__mach_port_type_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_type_t ptype;};
struct __Request__mach_vm_copy_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t source_address;mach_vm_size_t size;mach_vm_address_t dest_address;};
struct __Request__mach_vm_read_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;};
struct __Request__task_inspect_t {mach_msg_header_t Head;NDR_record_t NDR;task_inspect_flavor_t flavor;mach_msg_type_number_t info_outCnt;};
struct __Request__vm_read_list_t {mach_msg_header_t Head;NDR_record_t NDR;vm_read_entry_t data_list;natural_t count;};
struct IOFireWireAVCTargetSpace { IOFWPseudoAddressSpace cppsuper0;UInt32 fBuf[512];UInt32 fActivations;IOFireWireController *fController;IOLocalConfigDirectory *fAVCLocalConfigDirectory;OSArray *fUserClients;OSArray *fCommandHandlers;OSArray *fSubunits;OSArray *fConnectionRecords;AVCUnitPlugs fUnitPlugs;IORecursiveLock *fLock;IOFireWireAVCTargetSpace__ExpansionData *reserved;};
struct __Request__thread_info_t {mach_msg_header_t Head;NDR_record_t NDR;thread_flavor_t flavor;mach_msg_type_number_t thread_info_outCnt;};
struct __Request__vm_allocate_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;int flags;};
struct audit_triggers_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[1];};
struct catch_mach_exc_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[3];};
struct __Reply__vm_read_list_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_read_entry_t data_list;};
struct __Request__upl_commit_t {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t page_listCnt;upl_page_info_t page_list[256];};
struct __Reply__kmod_create_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;kmod_t module;};
struct __Reply__mach_vm_map_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t address;};
struct __Reply__vm_allocate_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;};
struct __Request__host_info_t {mach_msg_header_t Head;NDR_record_t NDR;host_flavor_t flavor;mach_msg_type_number_t host_info_outCnt;};
struct __Request__task_info_t {mach_msg_header_t Head;NDR_record_t NDR;task_flavor_t flavor;mach_msg_type_number_t task_info_outCnt;};
struct clock_reply_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[1];};
struct task_access_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[2];};
struct __Reply__vm_map_64_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;};
struct __Request__vm_copy_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t source_address;vm_size_t size;vm_address_t dest_address;};
struct __Request__vm_read_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;};
struct catch_exc_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[3];};
struct do_notify_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t reserved;routine_descriptor routine[9];};
struct __Reply__vm_map_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;};
struct IOFireWireDevice { IOFireWireNub cppsuper0;IOFireWireROMCache *fDeviceROM;char fOpenFromDevice;UInt32 fOpenFromUnitCount;UInt32 fROMGeneration;IORecursiveLock *fROMLock;IOFireWireDevice__RegistrationState fRegistrationState;UInt32 fROMReadRetry;IOFireWireDevice__ExpansionData *reserved;};
struct IOAudioControl { IOService cppsuper0;IOWorkLoop *workLoop;IOCommandGate *commandGate;char isStarted;UInt32 controlID;UInt32 channelID;UInt32 type;UInt32 subType;UInt32 usage;OSObject *value;IOAudioControl__ValueChangeHandlerType valueChangeHandlerType;IOAudioControl___E4B6BB4F469ED8915E6AC36367D55D05 valueChangeHandler;OSObject *valueChangeTarget;OSSet *userClients;IOAudioControl__ExpansionData *reserved;};
struct IOHIDInterface { IOService cppsuper0;IOHIDDevice *_owner;OSArray *_elementArray;IOHIDInterface__InterruptReportAction _interruptAction;void *_interruptRefCon;OSObject *_interruptTarget;OSString *_transportString;OSString *_manufacturerString;OSString *_productString;OSString *_serialNumberString;UInt32 _locationID;UInt32 _vendorID;UInt32 _vendorIDSource;UInt32 _productID;UInt32 _version;UInt32 _countryCode;IOByteCount _maxReportSize[3];IOHIDInterface__ExpansionData *_reserved;};
struct IOAudioDevice { IOService cppsuper0;IOWorkLoop *workLoop;IOCommandGate *commandGate;IOTimerEventSource *timerEventSource;char duringStartup;char familyManagePower;char asyncPowerStateChangeInProgress;UInt32 numRunningAudioEngines;IOAudioDevicePowerState currentPowerState;IOAudioDevicePowerState pendingPowerState;OSArray *audioEngines;OSDictionary *timerEvents;OSSet *audioPorts;AbsoluteTime minimumInterval;AbsoluteTime previousTimerFire;IOAudioDevice__ExpansionData *reserved;};
struct in6_prefixreq {char ipr_name[16];u_char ipr_origin;u_char ipr_plen;u_int32_t ipr_vltime;u_int32_t ipr_pltime;in6_prflags ipr_flags;sockaddr_in6 ipr_prefix;};
struct rpc_subsystem {void *reserved;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t base_addr;rpc_routine_descriptor routine[1];rpc_routine_arg_descriptor arg_descriptor[1];};
struct IOMedia { IOStorage cppsuper0;IOMedia__ExpansionData *_expansionData;UInt32 _attributes;char _isWhole;char _isWritable;UInt64 _mediaBase;UInt64 _mediaSize;IOStorageAccess _openLevel;OSDictionary *_openClients;UInt32 _reserved0320;UInt64 _preferredBlockSize;};
struct xinpcb {u_int32_t xi_len;inpcb xi_inp;xsocket xi_socket;u_quad_t xi_alignment_hack;};
struct icmp {u_char icmp_type;u_char icmp_code;u_short icmp_cksum;icmp___C4DAEE47A1B4C5B2D295BC56AED6DB45 icmp_hun;icmp___B235664BFCA97AAED3CE94418077D709 icmp_dun;};
struct __Request__host_register_mach_voucher_attr_manager_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t attr_manager;NDR_record_t NDR;mach_voucher_attr_value_handle_t default_value;};
struct __Reply__host_register_mach_voucher_attr_manager_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_attr_control;NDR_record_t NDR;mach_voucher_attr_key_t new_key;};
struct __Request__mach_voucher_attr_control_get_values_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t voucher;NDR_record_t NDR;mach_msg_type_number_t value_handlesCnt;};
struct __Reply__mach_voucher_extract_all_attr_recipes_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t recipesCnt;uint8_t recipes[5120];};
struct __Reply__mach_voucher_attr_control_get_values_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t value_handlesCnt;mach_voucher_attr_value_handle_t value_handles[4];};
struct __Reply__mach_exception_raise_state_identity_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
struct __Request__task_unregister_dyld_image_infos_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t dyld_images;NDR_record_t NDR;mach_msg_type_number_t dyld_imagesCnt;};
struct __Reply__mach_voucher_extract_attr_content_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t contentCnt;uint8_t content[4096];};
struct __Reply__host_virtual_physical_table_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t info;NDR_record_t NDR;mach_msg_type_number_t infoCnt;};
struct __Reply__mach_voucher_extract_attr_recipe_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t recipeCnt;uint8_t recipe[4096];};
struct __Request__task_register_dyld_image_infos_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t dyld_images;NDR_record_t NDR;mach_msg_type_number_t dyld_imagesCnt;};
struct __Reply__mach_zone_info_for_largest_zone_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_zone_name_t name;mach_zone_info_t info;};
struct __Reply__exception_raise_state_identity_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
struct __Request__host_default_memory_manager_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_manager;NDR_record_t NDR;memory_object_cluster_size_t cluster_size;};
struct __Reply__mach_zone_get_btlog_records_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t recs;NDR_record_t NDR;mach_msg_type_number_t recsCnt;};
union __RequestUnion__mach_voucher_subsystem {__Request__mach_voucher_extract_attr_content_t Request_mach_voucher_extract_attr_content;__Request__mach_voucher_extract_attr_recipe_t Request_mach_voucher_extract_attr_recipe;__Request__mach_voucher_extract_all_attr_recipes_t Request_mach_voucher_extract_all_attr_recipes;__Request__mach_voucher_attr_command_t Request_mach_voucher_attr_command;__Request__mach_voucher_debug_info_t Request_mach_voucher_debug_info;};
struct __Request__host_request_notification_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t notify_port;NDR_record_t NDR;host_flavor_t notify_type;};
struct __Request__task_set_emulation_vector_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t emulation_vector;NDR_record_t NDR;int vector_start;mach_msg_type_number_t emulation_vectorCnt;};
struct __Reply__mach_exception_raise_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
struct __Reply__memory_object_lock_request_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;memory_object_offset_t resid_offset;integer_t io_errno;};
struct __Request__mach_port_get_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_flavor_t flavor;mach_msg_type_number_t port_info_outCnt;};
struct __Request__mach_vm_page_range_query_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_offset_t address;mach_vm_size_t size;mach_vm_address_t dispositions;mach_vm_size_t dispositions_count;};
struct __Reply__mach_make_memory_entry_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_handle;NDR_record_t NDR;memory_object_size_t size;};
struct __Reply__mach_voucher_attr_command_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t out_contentCnt;uint8_t out_content[4096];};
struct __Reply__processor_set_stack_usage_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int ltotal;vm_size_t space;vm_size_t resident;vm_size_t maxusage;vm_offset_t maxstack;};
struct __Reply__task_get_dyld_image_infos_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t dyld_images;NDR_record_t NDR;mach_msg_type_number_t dyld_imagesCnt;};
struct __Reply__task_get_emulation_vector_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t emulation_vector;NDR_record_t NDR;int vector_start;mach_msg_type_number_t emulation_vectorCnt;};
struct __Reply__mach_port_get_attributes_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t port_info_outCnt;integer_t port_info_out[17];};
struct __Reply__mach_port_get_set_status_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t members;NDR_record_t NDR;mach_msg_type_number_t membersCnt;};
struct __Reply__mach_zone_get_zlog_zones_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;NDR_record_t NDR;mach_msg_type_number_t namesCnt;};
struct __Reply__processor_set_statistics_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t info_outCnt;integer_t info_out[5];};
union __RequestUnion__do_notify_subsystem {__Request__mach_notify_port_deleted_t Request_mach_notify_port_deleted;__Request__mach_notify_port_destroyed_t Request_mach_notify_port_destroyed;__Request__mach_notify_no_senders_t Request_mach_notify_no_senders;__Request__mach_notify_send_once_t Request_mach_notify_send_once;__Request__mach_notify_dead_name_t Request_mach_notify_dead_name;};
struct __Request__mach_port_insert_right_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t poly;NDR_record_t NDR;mach_port_name_t name;};
struct __Request__mach_vm_region_recurse_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;natural_t nesting_depth;mach_msg_type_number_t infoCnt;};
struct __Reply___mach_make_memory_entry_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_handle;NDR_record_t NDR;memory_object_size_t size;};
struct __Reply__mach_port_allocate_full_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_qos_t qos;mach_port_name_t name;};
struct __Reply__mach_voucher_debug_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t recipesCnt;uint8_t recipes[5120];};
struct __Reply__task_map_corpse_info_64_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t kcd_addr_begin;mach_vm_size_t kcd_size;};
struct __Request__thread_create_running_t {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
union __ReplyUnion__do_notify_subsystem {__Reply__mach_notify_port_deleted_t Reply_mach_notify_port_deleted;__Reply__mach_notify_port_destroyed_t Reply_mach_notify_port_destroyed;__Reply__mach_notify_no_senders_t Reply_mach_notify_no_senders;__Reply__mach_notify_send_once_t Reply_mach_notify_send_once;__Reply__mach_notify_dead_name_t Reply_mach_notify_dead_name;};
struct __Reply__mach_make_memory_entry_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_handle;NDR_record_t NDR;vm_size_t size;};
struct __Reply__mach_port_allocate_qos_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_qos_t qos;mach_port_name_t name;};
struct __Request__mach_vm_behavior_set_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_behavior_t new_behavior;};
struct __Request__vm_region_recurse_64_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;natural_t nesting_depth;mach_msg_type_number_t infoCnt;};
struct __Reply__exception_raise_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
struct __Reply__memory_object_page_op_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;uint32_t phys_entry;integer_t flags;};
struct __Reply__processor_set_threads_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t thread_list;NDR_record_t NDR;mach_msg_type_number_t thread_listCnt;};
struct __Request__mach_port_construct_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t options;NDR_record_t NDR;uint64_t context;};
struct __Request__mach_ports_register_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t init_port_set;NDR_record_t NDR;mach_msg_type_number_t init_port_setCnt;};
struct __Reply__host_priv_statistics_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t host_info_outCnt;integer_t host_info_out[68];};
struct __Reply__task_map_corpse_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t kcd_addr_begin;uint32_t kcd_size;};
struct __Reply__vm_mapped_pages_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t pages;NDR_record_t NDR;mach_msg_type_number_t pagesCnt;};
struct __Request__mach_port_destruct_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_delta_t srdelta;uint64_t guard;};
struct __Request__mach_port_mod_refs_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_right_t right;mach_port_delta_t delta;};
struct __Reply__host_lockgroup_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t lockgroup_info;NDR_record_t NDR;mach_msg_type_number_t lockgroup_infoCnt;};
struct __Reply__host_processor_sets_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t processor_sets;NDR_record_t NDR;mach_msg_type_number_t processor_setsCnt;};
struct __Reply__processor_set_tasks_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t task_list;NDR_record_t NDR;mach_msg_type_number_t task_listCnt;};
struct __Request__clock_alarm_reply_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t alarm_code;alarm_type_t alarm_type;mach_timespec_t alarm_time;};
struct __Request__mach_vm_page_info_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;vm_page_info_flavor_t flavor;mach_msg_type_number_t infoCnt;};
struct __Request__thread_policy_get_t {mach_msg_header_t Head;NDR_record_t NDR;thread_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;boolean_t get_default;};
struct __Request__thread_policy_set_t {mach_msg_header_t Head;NDR_record_t NDR;thread_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];};
struct __Request__vm_region_recurse_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;natural_t nesting_depth;mach_msg_type_number_t infoCnt;};
struct __Request__processor_assign_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;NDR_record_t NDR;boolean_t wait;};
struct __Request__thread_set_state_t {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
struct __Reply__host_statistics64_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t host_info64_outCnt;integer_t host_info64_out[256];};
struct __Reply__mach_port_kobject_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;natural_t object_type;mach_vm_address_t object_addr;};
struct __Reply__mach_ports_lookup_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t init_port_set;NDR_record_t NDR;mach_msg_type_number_t init_port_setCnt;};
struct __Request__mach_port_guard_t {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;uint64_t guard;boolean_t strict;};
struct __Request__mach_vm_inherit_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_inherit_t new_inheritance;};
struct __Request__task_policy_get_t {mach_msg_header_t Head;NDR_record_t NDR;task_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;boolean_t get_default;};
struct __Request__task_policy_set_t {mach_msg_header_t Head;NDR_record_t NDR;task_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];};
struct __Request__upl_abort_range_t {mach_msg_header_t Head;NDR_record_t NDR;upl_offset_t offset;upl_size_t size;integer_t abort_cond;};
struct __Request__vm_behavior_set_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_behavior_t new_behavior;};
struct __Reply__mach_memory_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t info;mach_msg_ool_descriptor_t memory_info;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t infoCnt;mach_msg_type_number_t memory_infoCnt;};
struct __Reply__thread_get_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t old_stateCnt;natural_t old_state[614];};
struct __Request__mach_vm_region_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;vm_region_flavor_t flavor;mach_msg_type_number_t infoCnt;};
struct __Request__task_set_state_t {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[614];};
struct __Reply__host_processors_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t out_processor_list;NDR_record_t NDR;mach_msg_type_number_t out_processor_listCnt;};
struct __Reply__host_statistics_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t host_info_outCnt;integer_t host_info_out[68];};
struct __Reply__mach_port_names_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t types;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t typesCnt;};
struct __Request__mach_vm_msync_t {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_sync_t sync_flags;};
struct __Request__task_set_info_t {mach_msg_header_t Head;NDR_record_t NDR;task_flavor_t flavor;mach_msg_type_number_t task_info_inCnt;integer_t task_info_in[52];};
struct __Reply__mach_zone_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t info;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t infoCnt;};
struct __Reply__task_get_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t old_stateCnt;natural_t old_state[614];};
struct __Reply__task_zone_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t info;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t infoCnt;};
struct __Request__vm_region_64_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_region_flavor_t flavor;mach_msg_type_number_t infoCnt;};
struct __Reply__act_get_state_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t old_stateCnt;natural_t old_state[614];};
struct __Reply__kmod_get_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t modules;NDR_record_t NDR;mach_msg_type_number_t modulesCnt;};
struct __Reply__mach_vm_remap_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t target_address;vm_prot_t cur_protection;vm_prot_t max_protection;};
struct __Request__task_assign_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;NDR_record_t NDR;boolean_t assign_threads;};
struct __Request__thread_wire_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;NDR_record_t NDR;boolean_t wired;};
struct __Reply__kmod_control_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;mach_msg_type_number_t dataCnt;};
struct __Reply__mach_vm_read_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;mach_msg_type_number_t dataCnt;};
struct __Reply__task_inspect_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t info_outCnt;integer_t info_out[4];};
struct __Reply__task_threads_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t act_list;NDR_record_t NDR;mach_msg_type_number_t act_listCnt;};
struct __Request__vm_inherit_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_inherit_t new_inheritance;};
struct __Reply__thread_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t thread_info_outCnt;integer_t thread_info_out[32];};
struct __Request__vm_region_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_region_flavor_t flavor;mach_msg_type_number_t infoCnt;};
struct IOUSBUserClientLegacy { IOUserClient cppsuper0;IOService *_provider;task_t _task;void *_securityToken;mach_port_t _wakePort;IOCommandGate *_commandGate;IOWorkLoop *_workLoop;char _entitled;char _authorized;char _privileged;uint64_t _pivilegedDeviceRequests[20];uint32_t _numPrivilegedRequests;uint32_t _debugLoggingMask;};
struct __Request__vm_msync_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_sync_t sync_flags;};
struct IOBlockStorageDriver { IOStorage cppsuper0;IOBlockStorageDriver__ExpansionData *_expansionData;OSSet *_openClients;OSNumber *_statistics[13];IOLock *_deblockRequestWriteLock;UInt64 _reserved1024;char _removable;char _ejectable;UInt16 _reserved1104;UInt32 _openAssertions;IOMedia *_mediaObject;UInt32 _mediaType;char _solidState;char _writeProtected;UInt16 _reserved1264;UInt64 _reserved1280;UInt64 _mediaBlockSize;UInt64 _maxBlockNumber;UInt64 _maxReadByteTransfer;UInt64 _maxWriteByteTransfer;};
struct IOBluetoothHIDDriver { IOHIDDevice cppsuper0;IOWorkLoop *_workLoop;IOCommandGate *_commandGate;IOWorkQueue *_desyncWorkQueue;IOBluetoothL2CAPChannel *_controlChannel;IOBluetoothL2CAPChannel *_interruptChannel;IOBluetoothDevice *_device;IOMemoryDescriptor *_memDescriptor;IOMemoryDescriptor *_getReportDescriptor;IONotifier *_interruptOpenNotification;IOTimerEventSource *_timer;IONotifier *_sleepWakeNotifier;char _deviceReady;UInt8 _expectedReportID;UInt8 _expectedReportType;UInt8 _handshake;OSDictionary *_deviceProperties;UInt16 _vendorIDSource;UInt16 _vendorID;UInt16 _productID;UInt16 _deviceVersion;uint32_t _classOfDevice;UInt16 _countryCode;BluetoothDeviceAddress _deviceAddress;char _deviceAddressString[20];uint32_t _outstandingIO;char _sendOutstanding;UInt8 _verboseLevel;char _logPackets;char _decodePackets;char _logOutstandingIO;char _suppressDisconnectNotifications;char _suppressSetProtocol;char _driverIsAwake;char _reservedFlag4;UInt8 _reservedByte;IOBluetoothHIDDriver__ExpansionData *_expansionData;};
struct __Reply__host_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t host_info_outCnt;integer_t host_info_out[68];};
struct __Reply__task_info_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t task_info_outCnt;integer_t task_info_out[52];};
struct __Reply__vm_remap_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t target_address;vm_prot_t cur_protection;vm_prot_t max_protection;};
struct __Reply__vm_read_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;mach_msg_type_number_t dataCnt;};
struct in6_rrenumreq {char irr_name[16];u_char irr_origin;u_char irr_m_len;u_char irr_m_minlen;u_char irr_m_maxlen;u_char irr_u_uselen;u_char irr_u_keeplen;in6_rrenumreq__irr_raflagmask irr_raflagmask;u_int32_t irr_vltime;u_int32_t irr_pltime;in6_prflags irr_flags;sockaddr_in6 irr_matchprefix;sockaddr_in6 irr_useprefix;};
struct mig_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;mach_msg_size_t maxsize;vm_address_t reserved;mig_routine_descriptor routine[1];};
struct kev_in6_data {net_event_data link_data;sockaddr_in6 ia_addr;sockaddr_in6 ia_net;sockaddr_in6 ia_dstaddr;sockaddr_in6 ia_prefixmask;u_int32_t ia_plen;u_int32_t ia6_flags;kev_in6_addrlifetime ia_lifetime;uint8_t ia_mac[6];};
struct _NXEvent {SInt32 type;_NXEvent___8EFB465B4AD2107DC4501CE01DBC8D82 location;__attribute__((packed)) UInt64 time;SInt32 flags;UInt32 window;__attribute__((packed)) UInt64 service_id;SInt32 ext_pid;NXEventData data;};
struct __Request__host_register_well_known_mach_voucher_attr_manager_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t attr_manager;NDR_record_t NDR;mach_voucher_attr_value_handle_t default_value;mach_voucher_attr_key_t key;};
struct __Reply__memory_object_super_upl_request_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t upl;NDR_record_t NDR;mach_msg_type_number_t page_listCnt;upl_page_info_t page_list[256];};
struct __Request__host_security_set_task_token_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t target_task;mach_msg_port_descriptor_t host;NDR_record_t NDR;security_token_t sec_token;audit_token_t audit_token;};
struct __Reply__memory_object_upl_request_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t upl;NDR_record_t NDR;mach_msg_type_number_t page_listCnt;upl_page_info_t page_list[256];};
union __RequestUnion__processor_subsystem {__Request__processor_start_t Request_processor_start;__Request__processor_exit_t Request_processor_exit;__Request__processor_info_t Request_processor_info;__Request__processor_control_t Request_processor_control;__Request__processor_assign_t Request_processor_assign;__Request__processor_get_assignment_t Request_processor_get_assignment;};
union __RequestUnion__lock_set_subsystem {__Request__lock_acquire_t Request_lock_acquire;__Request__lock_release_t Request_lock_release;__Request__lock_try_t Request_lock_try;__Request__lock_make_stable_t Request_lock_make_stable;__Request__lock_handoff_t Request_lock_handoff;__Request__lock_handoff_accept_t Request_lock_handoff_accept;};
struct __Reply__mach_vm_region_info_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t objects;NDR_record_t NDR;vm_info_region_64_t region;mach_msg_type_number_t objectsCnt;};
struct __Request__vm_machine_attribute_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_machine_attribute_t attribute;vm_machine_attribute_val_t value;};
union __ReplyUnion__lock_set_subsystem {__Reply__lock_acquire_t Reply_lock_acquire;__Reply__lock_release_t Reply_lock_release;__Reply__lock_try_t Reply_lock_try;__Reply__lock_make_stable_t Reply_lock_make_stable;__Reply__lock_handoff_t Reply_lock_handoff;__Reply__lock_handoff_accept_t Reply_lock_handoff_accept;};
struct __Reply__mach_port_space_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t table_info;mach_msg_ool_descriptor_t tree_info;NDR_record_t NDR;ipc_info_space_t space_info;mach_msg_type_number_t table_infoCnt;mach_msg_type_number_t tree_infoCnt;};
struct __Reply__host_processor_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t out_processor_info;NDR_record_t NDR;natural_t out_processor_count;mach_msg_type_number_t out_processor_infoCnt;};
struct __Reply__mach_vm_region_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t objects;NDR_record_t NDR;vm_info_region_t region;mach_msg_type_number_t objectsCnt;};
struct __Reply__processor_set_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t host;NDR_record_t NDR;mach_msg_type_number_t info_outCnt;integer_t info_out[5];};
struct __Request__vm_allocate_cpm_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;vm_address_t address;vm_size_t size;int flags;};
struct __Request__mach_vm_write_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;mach_vm_address_t address;mach_msg_type_number_t dataCnt;};
struct mach_msg_context_trailer_t {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;audit_token_t msgh_audit;mach_port_context_t msgh_context;};
struct __Reply__processor_info_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t host;NDR_record_t NDR;mach_msg_type_number_t processor_info_outCnt;integer_t processor_info_out[12];};
struct __Request__kext_request_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t request_data;NDR_record_t NDR;uint32_t user_log_flags;mach_msg_type_number_t request_dataCnt;};
struct IOFireWireSBP2UserClient { IOUserClient cppsuper0;char fOpened;char fStarted;IOFireWireSBP2Login *fLogin;task_t fTask;IOFireWireSBP2LUN *fProviderLUN;OSAsyncReference64 fMessageCallbackAsyncRef;OSAsyncReference64 fLoginCallbackAsyncRef;OSAsyncReference64 fLogoutCallbackAsyncRef;OSAsyncReference64 fUnsolicitedStatusNotifyAsyncRef;OSAsyncReference64 fStatusNotifyAsyncRef;OSAsyncReference64 fFetchAgentResetAsyncRef;OSAsyncReference64 fFetchAgentWriteAsyncRef;IOFWUserObjectExporter *fExporter;IOFireWireLib__UserObjectHandle fSessionRef;IOLock *fUserClientLock;uint32_t checkScalarInputCount;uint32_t checkStructureInputSize;uint32_t checkScalarOutputCount;uint32_t checkStructureOutputSize;};
struct __Request__clock_alarm_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t alarm_port;NDR_record_t NDR;alarm_type_t alarm_type;mach_timespec_t alarm_time;};
struct __Request__task_create_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t ledgers;NDR_record_t NDR;mach_msg_type_number_t ledgersCnt;boolean_t inherit_memory;};
struct __Reply__kext_request_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t response_data;mach_msg_ool_descriptor_t log_data;NDR_record_t NDR;mach_msg_type_number_t response_dataCnt;mach_msg_type_number_t log_dataCnt;kern_return_t op_result;};
struct __Request__vm_protect_t {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;boolean_t set_maximum;vm_prot_t new_protection;};
struct __Request__vm_write_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;vm_address_t address;mach_msg_type_number_t dataCnt;};
struct IOPCI2PCIBridge { IOPCIBridge cppsuper0;IOFilterInterruptEventSource *fBridgeInterruptSource;IOPCIDevice *fBridgeDevice;IOTimerEventSource *fTimerProbeES;IOWorkLoop *fWorkLoop;IOPMDriverAssertionID fPMAssertion;IOSimpleLock *fISRLock;IOPCIAERRoot *fAERRoot;uint32_t __resvA[6];int32_t fTunnelL1EnableCount;uint32_t fHotplugCount;uint8_t _resvA[3];uint8_t fHotPlugInts;uint8_t fIntsPending;uint8_t fIsAERRoot;uint8_t fPresence;uint8_t fWaitingLinkEnable;uint8_t fLinkChangeOnly;uint8_t fBridgeInterruptEnablePending;uint8_t fNeedProbe;uint8_t fPresenceInt;uint8_t fBridgeMSI;uint8_t fNoDevice;uint8_t fLinkControlWithPM;uint8_t fPowerState;char fLogName[32];IOPCI2PCIBridge__ExpansionData *reserved;};
struct __Request__mach_memory_object_memory_entry_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pager;NDR_record_t NDR;boolean_t internal;memory_object_size_t size;vm_prot_t permission;};
struct __Request__mach_memory_object_memory_entry_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pager;NDR_record_t NDR;boolean_t internal;vm_size_t size;vm_prot_t permission;};
struct __Request__mach_port_request_notification_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t notify;NDR_record_t NDR;mach_port_name_t name;mach_msg_id_t msgid;mach_port_mscount_t sync;};
struct __Request__thread_swap_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
struct __Request__thread_set_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
struct __Request__host_swap_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
struct __Request__mach_make_memory_entry_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_entry;NDR_record_t NDR;memory_object_size_t size;memory_object_offset_t offset;vm_prot_t permission;};
struct __Request__task_swap_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
struct __Request__host_set_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
struct __Request__task_set_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
struct __Request___mach_make_memory_entry_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_handle;NDR_record_t NDR;memory_object_size_t size;memory_object_offset_t offset;vm_prot_t permission;};
struct __Request__mach_port_allocate_full_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t proto;NDR_record_t NDR;mach_port_right_t right;mach_port_qos_t qos;mach_port_name_t name;};
struct __Request__mach_make_memory_entry_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_entry;NDR_record_t NDR;vm_size_t size;vm_offset_t offset;vm_prot_t permission;};
struct __Request__mach_exception_raise_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;mach_msg_port_descriptor_t task;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;int64_t code[2];};
struct __Request__mach_gss_unhold_cred_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t princ;NDR_record_t NDR;gssd_mechtype mech;gssd_nametype nt;mach_msg_type_number_t princCnt;};
struct __Reply__vm_region_recurse_64_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;vm_size_t size;natural_t nesting_depth;mach_msg_type_number_t infoCnt;int info[19];};
struct __Request__mach_gss_hold_cred_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t princ;NDR_record_t NDR;gssd_mechtype mech;gssd_nametype nt;mach_msg_type_number_t princCnt;};
struct __Request__thread_set_policy_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pset;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];mach_msg_type_number_t limitCnt;integer_t limit[1];};
struct __Reply__vm_region_recurse_t {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;vm_size_t size;natural_t nesting_depth;mach_msg_type_number_t infoCnt;int info[19];};
struct __Request__exception_raise_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;mach_msg_port_descriptor_t task;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;integer_t code[2];};
struct __Reply__mach_vm_region_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_name;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;mach_msg_type_number_t infoCnt;int info[10];};
struct __Request__kmod_control_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;kmod_t module;kmod_control_flavor_t flavor;mach_msg_type_number_t dataCnt;};
struct __Request__mach_vm_wire_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_prot_t desired_access;};
struct IOAudioEngineUserClient { IOUserClient cppsuper0;IOAudioEngine *audioEngine;IOWorkLoop *workLoop;IOCommandGate *commandGate;IOExternalMethod old_methods[5];IOExternalTrap trap;task_t clientTask;UInt32 numSampleFrames;IOAudioClientBufferSet *clientBufferSetList;IORecursiveLock *clientBufferLock;IOAudioNotificationMessage *notificationMessage;char online;IOAudioEngineUserClient__ExpansionData *reserved;};
struct __Reply__vm_region_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_name;NDR_record_t NDR;vm_address_t address;vm_size_t size;mach_msg_type_number_t infoCnt;int info[10];};
struct mach_msg_mac_trailer_t {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;audit_token_t msgh_audit;mach_port_context_t msgh_context;int msgh_ad;msg_labels_t msgh_labels;};
struct __Reply__vm_region_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_name;NDR_record_t NDR;vm_address_t address;vm_size_t size;mach_msg_type_number_t infoCnt;int info[10];};
struct __Request__vm_wire_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_prot_t desired_access;};
struct IOI2CRequest {IOOptionBits sendTransactionType;IOOptionBits replyTransactionType;uint32_t sendAddress;uint32_t replyAddress;uint8_t sendSubAddress;uint8_t replySubAddress;uint8_t __reservedA[2];uint64_t minReplyDelay;IOReturn result;IOOptionBits commFlags;vm_address_t sendBuffer;uint32_t sendBytes;uint32_t __reservedB[2];vm_address_t replyBuffer;uint32_t replyBytes;IOI2CRequestCompletion completion;uint32_t __padC[5];uint32_t __reservedC[10];};
struct kmod_info {kmod_info *next;int32_t info_version;uint32_t id;char name[64];char version[64];int32_t reference_count;kmod_reference_t *reference_list;vm_address_t address;vm_size_t size;vm_size_t hdr_size;kmod_start_func_t *start;kmod_stop_func_t *stop;};
struct __Request__mach_exception_raise_state_identity_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;mach_msg_port_descriptor_t task;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;int64_t code[2];int flavor;mach_msg_type_number_t old_stateCnt;natural_t old_state[614];};
struct __Request__exception_raise_state_identity_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;mach_msg_port_descriptor_t task;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;integer_t code[2];int flavor;mach_msg_type_number_t old_stateCnt;natural_t old_state[614];};
struct __Reply__mach_gss_accept_sec_context_v2_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t key;mach_msg_ool_descriptor_t outtoken;NDR_record_t NDR;uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;uint32_t flags;uint32_t uid;mach_msg_type_number_t gidsCnt;uint32_t gids[16];mach_msg_type_number_t keyCnt;mach_msg_type_number_t outtokenCnt;uint32_t major_stat;uint32_t minor_stat;};
struct __Request__mach_gss_accept_sec_context_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t intoken;NDR_record_t NDR;mach_msg_type_number_t intokenCnt;mach_msg_type_number_t svc_namestrOffset;mach_msg_type_number_t svc_namestrCnt;char svc_namestr[1024];uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;};
struct __Reply__mach_gss_init_sec_context_v2_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t key;mach_msg_ool_descriptor_t outtoken;NDR_record_t NDR;uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;uint32_t ret_flags;mach_msg_type_number_t keyCnt;mach_msg_type_number_t outtokenCnt;mach_msg_type_number_t displaynameOffset;mach_msg_type_number_t displaynameCnt;char displayname[128];uint32_t major_stat;uint32_t minor_stat;};
struct __Reply__mach_gss_init_sec_context_v3_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t key;mach_msg_ool_descriptor_t outtoken;NDR_record_t NDR;uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;uint32_t ret_flags;mach_msg_type_number_t keyCnt;mach_msg_type_number_t outtokenCnt;mach_msg_type_number_t displaynameOffset;mach_msg_type_number_t displaynameCnt;char displayname[128];uint32_t major_stat;uint32_t minor_stat;};
struct __Reply__mach_gss_accept_sec_context_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t key;mach_msg_ool_descriptor_t outtoken;NDR_record_t NDR;gssd_ctx context;gssd_cred cred_handle;uint32_t flags;uint32_t uid;mach_msg_type_number_t gidsCnt;uint32_t gids[16];mach_msg_type_number_t keyCnt;mach_msg_type_number_t outtokenCnt;uint32_t major_stat;uint32_t minor_stat;};
struct __Reply__thread_swap_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlers[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct __Reply__thread_get_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlers[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct __Reply__host_swap_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlerss[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct __Reply__mach_gss_init_sec_context_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t key;mach_msg_ool_descriptor_t outtoken;NDR_record_t NDR;gssd_ctx context;gssd_cred cred_handle;uint32_t ret_flags;mach_msg_type_number_t keyCnt;mach_msg_type_number_t outtokenCnt;uint32_t major_stat;uint32_t minor_stat;};
struct __Reply__task_swap_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlerss[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct __Reply__host_get_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlers[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct __Reply__task_get_exception_ports_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlers[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct __Request__task_set_policy_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pset;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];mach_msg_type_number_t limitCnt;integer_t limit[1];boolean_t change;};
struct __Request__vm_remap_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t src_task;NDR_record_t NDR;vm_address_t target_address;vm_size_t size;vm_address_t mask;int flags;vm_address_t src_address;boolean_t copy;vm_inherit_t inheritance;};
struct __Request__host_security_create_task_token_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_task;mach_msg_port_descriptor_t host;mach_msg_ool_ports_descriptor_t ledgers;NDR_record_t NDR;security_token_t sec_token;audit_token_t audit_token;mach_msg_type_number_t ledgersCnt;boolean_t inherit_memory;};
struct __Request__mach_gss_accept_sec_context_v2_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t intoken;mach_msg_ool_descriptor_t svc_princ;NDR_record_t NDR;mach_msg_type_number_t intokenCnt;gssd_nametype svc_nt;mach_msg_type_number_t svc_princCnt;uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;};
struct __Request__mach_gss_init_sec_context_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t intoken;NDR_record_t NDR;gssd_mechtype mech;mach_msg_type_number_t intokenCnt;uint32_t uid;mach_msg_type_number_t princ_namestrOffset;mach_msg_type_number_t princ_namestrCnt;char princ_namestr[1024];mach_msg_type_number_t svc_namestrOffset;mach_msg_type_number_t svc_namestrCnt;char svc_namestr[1024];uint32_t flags;uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;};
union __ReplyUnion__gssd_mach_subsystem {__Reply__mach_gss_init_sec_context_t Reply_mach_gss_init_sec_context;__Reply__mach_gss_accept_sec_context_t Reply_mach_gss_accept_sec_context;__Reply__mach_gss_log_error_t Reply_mach_gss_log_error;__Reply__mach_gss_init_sec_context_v2_t Reply_mach_gss_init_sec_context_v2;__Reply__mach_gss_accept_sec_context_v2_t Reply_mach_gss_accept_sec_context_v2;__Reply__mach_gss_init_sec_context_v3_t Reply_mach_gss_init_sec_context_v3;__Reply__mach_gss_hold_cred_t Reply_mach_gss_hold_cred;__Reply__mach_gss_unhold_cred_t Reply_mach_gss_unhold_cred;__Reply__mach_gss_lookup_t Reply_mach_gss_lookup;};
struct __Request__mach_vm_remap_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t src_task;NDR_record_t NDR;mach_vm_address_t target_address;mach_vm_size_t size;mach_vm_offset_t mask;int flags;mach_vm_address_t src_address;boolean_t copy;vm_inherit_t inheritance;};
struct IOHIPointing { IOHIDevice cppsuper0;IOLock *_deviceLock;int _buttonMode;IOFixed _acceleration;char _convertAbsoluteToRelative;char _contactToMove;char _hadContact;IOGPoint _previousLocation;UInt8 _pressureThresholdToClick;void *_scaleSegments;IOItemCount _scaleSegCount;IOFixed _fractX;IOFixed _fractY;OSObject *_relativePointerEventTarget;RelativePointerEventAction _relativePointerEventAction;OSObject *_absolutePointerEventTarget;AbsolutePointerEventAction _absolutePointerEventAction;OSObject *_scrollWheelEventTarget;ScrollWheelEventAction _scrollWheelEventAction;IOHIPointing__ExpansionData *_reserved;};
struct __Request__mach_gss_init_sec_context_v2_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t intoken;mach_msg_ool_descriptor_t clnt_princ;mach_msg_ool_descriptor_t svc_princ;NDR_record_t NDR;gssd_mechtype mech;mach_msg_type_number_t intokenCnt;uint32_t uid;gssd_nametype clnt_nt;mach_msg_type_number_t clnt_princCnt;gssd_nametype svc_nt;mach_msg_type_number_t svc_princCnt;uint32_t flags;uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;};
union __RequestUnion__processor_set_subsystem {__Request__processor_set_statistics_t Request_processor_set_statistics;__Request__processor_set_destroy_t Request_processor_set_destroy;__Request__processor_set_max_priority_t Request_processor_set_max_priority;__Request__processor_set_policy_enable_t Request_processor_set_policy_enable;__Request__processor_set_policy_disable_t Request_processor_set_policy_disable;__Request__processor_set_tasks_t Request_processor_set_tasks;__Request__processor_set_threads_t Request_processor_set_threads;__Request__processor_set_policy_control_t Request_processor_set_policy_control;__Request__processor_set_stack_usage_t Request_processor_set_stack_usage;__Request__processor_set_info_t Request_processor_set_info;};
union __ReplyUnion__processor_set_subsystem {__Reply__processor_set_statistics_t Reply_processor_set_statistics;__Reply__processor_set_destroy_t Reply_processor_set_destroy;__Reply__processor_set_max_priority_t Reply_processor_set_max_priority;__Reply__processor_set_policy_enable_t Reply_processor_set_policy_enable;__Reply__processor_set_policy_disable_t Reply_processor_set_policy_disable;__Reply__processor_set_tasks_t Reply_processor_set_tasks;__Reply__processor_set_threads_t Reply_processor_set_threads;__Reply__processor_set_policy_control_t Reply_processor_set_policy_control;__Reply__processor_set_stack_usage_t Reply_processor_set_stack_usage;__Reply__processor_set_info_t Reply_processor_set_info;};
struct __Request__vm_map_64_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t mask;int flags;memory_object_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
struct __Request__vm_map_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t mask;int flags;vm_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
struct IOFramebuffer { IOGraphicsDevice cppsuper0;IOFramebuffer__ExpansionData *reserved;StdFBShmem_t *priv;int shmemClientVersion;IOBufferMemoryDescriptor *sharedCursor;IOFramebuffer___CD9F169B95746E9B5ACA47AEEE44529F colorConvert;CursorBlitProc cursorBlitProc;CursorRemoveProc cursorRemoveProc;IOGSize maxCursorSize;void *_IOFramebuffer_reservedE[6];uint32_t _IOFramebuffer_reservedF;uint32_t thisNameLen; char *thisName;unsigned char *cursorSave;unsigned int white;IOGPoint nextCursorLoc;int nextCursorFrame;SInt32 connectChange;semaphore_t vblSemaphore;unsigned char *fFrameBuffer;unsigned int fTotalWidth;unsigned int rowBytes;unsigned int bytesPerPixel;IOMemoryMap *fVramMap;IOByteCount fVramMapOffset;OSArray *userAccessRanges;unsigned int suspended : 1;unsigned int captured : 1;unsigned int sleepConnectCheck : 1;unsigned int messaged : 1;unsigned int cursorEnable : 1;unsigned int _IOFramebuffer_reservedC : 27;IOFramebuffer *nextDependent;OSArray *fFBNotifications;IOFramebufferUserClient *fServerConnect;IOFramebufferSharedUserClient *fSharedConnect;unsigned int opened : 1;unsigned int dead : 1;unsigned int configPending : 1;unsigned int doNotUseServerNotified : 1;unsigned int doNotUseServerState : 1;unsigned int doNotUseServerPendingAck : 1;unsigned int isUsable : 1;unsigned int mirrored : 1;unsigned int pendingPowerState : 4;unsigned int pendingPowerChange : 1;unsigned int pagingState : 1;unsigned int mirrorPrimary : 1;unsigned int mirrorSWCursor : 1;char clutValid;char currentMono;char needCursorService;char haveVBLService;char haveHWCursor;char hwCursorLoaded;void *serverMsg;IOInterruptEventSource *deferredEvents;int _IOFramebuffer_reserved[5];IOFramebufferPrivate *__private;};
struct IOHIKeyboard { IOHIDevice cppsuper0;IOLock *_deviceLock;IOHIKeyboardMapper *_keyMap;UInt32 _interfaceType;UInt32 _deviceType;UInt32 *_keyState;IOByteCount _keyStateSize;unsigned int _eventFlags;char _alphaLock;char _numLock;char _charKeyActive;char _isRepeat;unsigned int _codeToRepeat;char _calloutPending;AbsoluteTime _lastEventTime;AbsoluteTime _downRepeatTime;AbsoluteTime _keyRepeat;AbsoluteTime _initialKeyRepeat;UInt64 _guid;OSObject *_keyboardEventTarget;KeyboardEventAction _keyboardEventAction;OSObject *_keyboardSpecialEventTarget;KeyboardSpecialEventAction _keyboardSpecialEventAction;OSObject *_updateEventFlagsTarget;UpdateEventFlagsAction _updateEventFlagsAction;UInt16 _lastUsagePage;UInt16 _lastUsage;};
struct __Request__mach_gss_init_sec_context_v3_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t intoken;mach_msg_ool_descriptor_t clnt_princ;mach_msg_ool_descriptor_t svc_princ;NDR_record_t NDR;gssd_mechtype mech;mach_msg_type_number_t intokenCnt;uint32_t uid;gssd_nametype clnt_nt;mach_msg_type_number_t clnt_princCnt;gssd_nametype svc_nt;mach_msg_type_number_t svc_princCnt;uint32_t flags;mach_msg_type_number_t etypesCnt;int32_t etypes[64];uint32_t gssd_flags;gssd_ctx context;gssd_cred cred_handle;};
struct __Request__mach_vm_map_t {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;mach_vm_offset_t mask;int flags;memory_object_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
union __RequestUnion__memory_object_control_subsystem {__Request__memory_object_get_attributes_t Request_memory_object_get_attributes;__Request__memory_object_change_attributes_t Request_memory_object_change_attributes;__Request__memory_object_synchronize_completed_t Request_memory_object_synchronize_completed;__Request__memory_object_lock_request_t Request_memory_object_lock_request;__Request__memory_object_destroy_t Request_memory_object_destroy;__Request__memory_object_upl_request_t Request_memory_object_upl_request;__Request__memory_object_super_upl_request_t Request_memory_object_super_upl_request;__Request__memory_object_cluster_size_t Request_memory_object_cluster_size;__Request__memory_object_page_op_t Request_memory_object_page_op;__Request__memory_object_recover_named_t Request_memory_object_recover_named;__Request__memory_object_release_name_t Request_memory_object_release_name;__Request__memory_object_range_op_t Request_memory_object_range_op;};
union __ReplyUnion__memory_object_control_subsystem {__Reply__memory_object_get_attributes_t Reply_memory_object_get_attributes;__Reply__memory_object_change_attributes_t Reply_memory_object_change_attributes;__Reply__memory_object_synchronize_completed_t Reply_memory_object_synchronize_completed;__Reply__memory_object_lock_request_t Reply_memory_object_lock_request;__Reply__memory_object_destroy_t Reply_memory_object_destroy;__Reply__memory_object_upl_request_t Reply_memory_object_upl_request;__Reply__memory_object_super_upl_request_t Reply_memory_object_super_upl_request;__Reply__memory_object_cluster_size_t Reply_memory_object_cluster_size;__Reply__memory_object_page_op_t Reply_memory_object_page_op;__Reply__memory_object_recover_named_t Reply_memory_object_recover_named;__Reply__memory_object_release_name_t Reply_memory_object_release_name;__Reply__memory_object_range_op_t Reply_memory_object_range_op;};
struct IOFireWireController { IOFireWireBus cppsuper0;IOFireWireLink *fFWIM;IOFWWorkLoop *fWorkLoop;IOTimerEventSource *fTimer;OSSet *fLocalAddresses;OSIterator *fSpaceIterator;OSSet *fAllocatedChannels;OSIterator *fAllocChannelIterator;OSSet *fIRMAllocations;OSIterator *fIRMAllocationsIterator;OSSet *fIRMAllocationsAllocated;AbsoluteTime fResetTime;UInt32 fBusGeneration;UInt16 fLocalNodeID;UInt16 fRootNodeID;UInt16 fIRMNodeID;char fBusMgr;IORegistryEntry *fNodes[63];UInt32 *fNodeIDs[64];UInt32 fGapCount;UInt8 fSpeedVector[2016];IOFireWireController__busState fBusState;int fNumROMReads;int fNumSelfIDs;UInt32 fSelfIDs[252];UInt32 fROMHeader[5];IOLocalConfigDirectory *fRootDir;int fMaxSendLog;int fMaxRecvLog;IOFWAddressSpace *fROMAddrSpace;IOMemoryDescriptor *fBadReadResponse;AsyncPendingTrans fTrans[64];int fLastTrans;IOFireWireController__timeoutQ fTimeoutQ;IOFireWireController__pendingQ fPendingQ;IOFWCmdQ fAfterResetHandledQ;IOFWDelayCommand *fDelayedStateChangeCmd;char fDelayedStateChangeCmdNeedAbort;UInt32 fDelayedPhyPacket;char fBusResetScheduled;IOFireWireController__ResetState fBusResetState;IOFWDelayCommand *fBusResetStateChangeCmd;UInt32 fBusResetDisabledCount;void *fFireLogPublisher;OSData *fAllocatedAddresses;UInt32 fDevicePruneDelay;IOFWPhysicalAccessMode fPhysicalAccessMode;IOFWSecurityMode fSecurityMode;IONotifier *fKeyswitchNotifier;IOFireWireIRM *fIRM;IOFireWirePowerManager *fBusPowerManager;char fGapCountMismatch;char fUseHalfSizePackets;char fRequestedHalfSizePackets;IOFWNodeScan *fScans[63];IOFireWireDuplicateGUIDList *fGUIDDups;char fDelegateCycleMaster;char fBadIRMsKnown;UInt32 fPreviousGap;UInt32 fOutOfTLabels;UInt32 fOutOfTLabels10S;UInt32 fOutOfTLabelsThreshold;char fStarted;UInt32 fIOCriticalSectionCount;UInt32 fHubPort;UInt32 fDebugIgnoreNode;OSSet *fLocalAsyncStreamReceivers;OSIterator *fAsyncStreamReceiverIterator;char fInstantiated;IOReturn fStartStatus;UInt32 fWaitingForSelfID;UInt32 fForcedRootNodeID;char fNodeMustBeRootFlag;char fNodeMustNotBeRootFlag;UInt32 fForcedGapCount;char fForcedGapFlag;OSSet *fPHYPacketListeners;OSIterator *fPHYPacketListenersIterator;char fDSLimited;IONotifier *fConsoleLockNotifier;IOFireWireLocalNode *fLocalNode;IOFireWireController__ExpansionData *reserved;};
union __RequestUnion__mach_vm_subsystem {__Request__mach_vm_allocate_t Request_mach_vm_allocate;__Request__mach_vm_deallocate_t Request_mach_vm_deallocate;__Request__mach_vm_protect_t Request_mach_vm_protect;__Request__mach_vm_inherit_t Request_mach_vm_inherit;__Request__mach_vm_read_t Request_mach_vm_read;__Request__mach_vm_read_list_t Request_mach_vm_read_list;__Request__mach_vm_write_t Request_mach_vm_write;__Request__mach_vm_copy_t Request_mach_vm_copy;__Request__mach_vm_read_overwrite_t Request_mach_vm_read_overwrite;__Request__mach_vm_msync_t Request_mach_vm_msync;__Request__mach_vm_behavior_set_t Request_mach_vm_behavior_set;__Request__mach_vm_map_t Request_mach_vm_map;__Request__mach_vm_machine_attribute_t Request_mach_vm_machine_attribute;__Request__mach_vm_remap_t Request_mach_vm_remap;__Request__mach_vm_page_query_t Request_mach_vm_page_query;__Request__mach_vm_region_recurse_t Request_mach_vm_region_recurse;__Request__mach_vm_region_t Request_mach_vm_region;__Request___mach_make_memory_entry_t Request__mach_make_memory_entry;__Request__mach_vm_purgable_control_t Request_mach_vm_purgable_control;__Request__mach_vm_page_info_t Request_mach_vm_page_info;__Request__mach_vm_page_range_query_t Request_mach_vm_page_range_query;};
union __ReplyUnion__mach_vm_subsystem {__Reply__mach_vm_allocate_t Reply_mach_vm_allocate;__Reply__mach_vm_deallocate_t Reply_mach_vm_deallocate;__Reply__mach_vm_protect_t Reply_mach_vm_protect;__Reply__mach_vm_inherit_t Reply_mach_vm_inherit;__Reply__mach_vm_read_t Reply_mach_vm_read;__Reply__mach_vm_read_list_t Reply_mach_vm_read_list;__Reply__mach_vm_write_t Reply_mach_vm_write;__Reply__mach_vm_copy_t Reply_mach_vm_copy;__Reply__mach_vm_read_overwrite_t Reply_mach_vm_read_overwrite;__Reply__mach_vm_msync_t Reply_mach_vm_msync;__Reply__mach_vm_behavior_set_t Reply_mach_vm_behavior_set;__Reply__mach_vm_map_t Reply_mach_vm_map;__Reply__mach_vm_machine_attribute_t Reply_mach_vm_machine_attribute;__Reply__mach_vm_remap_t Reply_mach_vm_remap;__Reply__mach_vm_page_query_t Reply_mach_vm_page_query;__Reply__mach_vm_region_recurse_t Reply_mach_vm_region_recurse;__Reply__mach_vm_region_t Reply_mach_vm_region;__Reply___mach_make_memory_entry_t Reply__mach_make_memory_entry;__Reply__mach_vm_purgable_control_t Reply_mach_vm_purgable_control;__Reply__mach_vm_page_info_t Reply_mach_vm_page_info;__Reply__mach_vm_page_range_query_t Reply_mach_vm_page_range_query;};
union __RequestUnion__host_priv_subsystem {__Request__host_get_boot_info_t Request_host_get_boot_info;__Request__host_reboot_t Request_host_reboot;__Request__host_priv_statistics_t Request_host_priv_statistics;__Request__host_default_memory_manager_t Request_host_default_memory_manager;__Request__vm_wire_t Request_vm_wire;__Request__thread_wire_t Request_thread_wire;__Request__vm_allocate_cpm_t Request_vm_allocate_cpm;__Request__host_processors_t Request_host_processors;__Request__host_get_clock_control_t Request_host_get_clock_control;__Request__kmod_create_t Request_kmod_create;__Request__kmod_destroy_t Request_kmod_destroy;__Request__kmod_control_t Request_kmod_control;__Request__host_get_special_port_t Request_host_get_special_port;__Request__host_set_special_port_t Request_host_set_special_port;__Request__host_set_exception_ports_t Request_host_set_exception_ports;__Request__host_get_exception_ports_t Request_host_get_exception_ports;__Request__host_swap_exception_ports_t Request_host_swap_exception_ports;__Request__mach_vm_wire_t Request_mach_vm_wire;__Request__host_processor_sets_t Request_host_processor_sets;__Request__host_processor_set_priv_t Request_host_processor_set_priv;__Request__host_set_UNDServer_t Request_host_set_UNDServer;__Request__host_get_UNDServer_t Request_host_get_UNDServer;__Request__kext_request_t Request_kext_request;};
union __ReplyUnion__host_priv_subsystem {__Reply__host_get_boot_info_t Reply_host_get_boot_info;__Reply__host_reboot_t Reply_host_reboot;__Reply__host_priv_statistics_t Reply_host_priv_statistics;__Reply__host_default_memory_manager_t Reply_host_default_memory_manager;__Reply__vm_wire_t Reply_vm_wire;__Reply__thread_wire_t Reply_thread_wire;__Reply__vm_allocate_cpm_t Reply_vm_allocate_cpm;__Reply__host_processors_t Reply_host_processors;__Reply__host_get_clock_control_t Reply_host_get_clock_control;__Reply__kmod_create_t Reply_kmod_create;__Reply__kmod_destroy_t Reply_kmod_destroy;__Reply__kmod_control_t Reply_kmod_control;__Reply__host_get_special_port_t Reply_host_get_special_port;__Reply__host_set_special_port_t Reply_host_set_special_port;__Reply__host_set_exception_ports_t Reply_host_set_exception_ports;__Reply__host_get_exception_ports_t Reply_host_get_exception_ports;__Reply__host_swap_exception_ports_t Reply_host_swap_exception_ports;__Reply__mach_vm_wire_t Reply_mach_vm_wire;__Reply__host_processor_sets_t Reply_host_processor_sets;__Reply__host_processor_set_priv_t Reply_host_processor_set_priv;__Reply__host_set_UNDServer_t Reply_host_set_UNDServer;__Reply__host_get_UNDServer_t Reply_host_get_UNDServer;__Reply__kext_request_t Reply_kext_request;};
union __RequestUnion__thread_act_subsystem {__Request__thread_terminate_t Request_thread_terminate;__Request__act_get_state_t Request_act_get_state;__Request__act_set_state_t Request_act_set_state;__Request__thread_get_state_t Request_thread_get_state;__Request__thread_set_state_t Request_thread_set_state;__Request__thread_suspend_t Request_thread_suspend;__Request__thread_resume_t Request_thread_resume;__Request__thread_abort_t Request_thread_abort;__Request__thread_abort_safely_t Request_thread_abort_safely;__Request__thread_depress_abort_t Request_thread_depress_abort;__Request__thread_get_special_port_t Request_thread_get_special_port;__Request__thread_set_special_port_t Request_thread_set_special_port;__Request__thread_info_t Request_thread_info;__Request__thread_set_exception_ports_t Request_thread_set_exception_ports;__Request__thread_get_exception_ports_t Request_thread_get_exception_ports;__Request__thread_swap_exception_ports_t Request_thread_swap_exception_ports;__Request__thread_policy_t Request_thread_policy;__Request__thread_policy_set_t Request_thread_policy_set;__Request__thread_policy_get_t Request_thread_policy_get;__Request__thread_sample_t Request_thread_sample;__Request__etap_trace_thread_t Request_etap_trace_thread;__Request__thread_assign_t Request_thread_assign;__Request__thread_assign_default_t Request_thread_assign_default;__Request__thread_get_assignment_t Request_thread_get_assignment;__Request__thread_set_policy_t Request_thread_set_policy;__Request__thread_get_mach_voucher_t Request_thread_get_mach_voucher;__Request__thread_set_mach_voucher_t Request_thread_set_mach_voucher;__Request__thread_swap_mach_voucher_t Request_thread_swap_mach_voucher;};
union __RequestUnion__mach_host_subsystem {__Request__host_info_t Request_host_info;__Request__host_kernel_version_t Request_host_kernel_version;__Request__host_page_size_t Request_host_page_size;__Request__mach_memory_object_memory_entry_t Request_mach_memory_object_memory_entry;__Request__host_processor_info_t Request_host_processor_info;__Request__host_get_io_master_t Request_host_get_io_master;__Request__host_get_clock_service_t Request_host_get_clock_service;__Request__kmod_get_info_t Request_kmod_get_info;__Request__host_virtual_physical_table_info_t Request_host_virtual_physical_table_info;__Request__processor_set_default_t Request_processor_set_default;__Request__processor_set_create_t Request_processor_set_create;__Request__mach_memory_object_memory_entry_64_t Request_mach_memory_object_memory_entry_64;__Request__host_statistics_t Request_host_statistics;__Request__host_request_notification_t Request_host_request_notification;__Request__host_lockgroup_info_t Request_host_lockgroup_info;__Request__host_statistics64_t Request_host_statistics64;__Request__mach_zone_info_t Request_mach_zone_info;__Request__mach_zone_force_gc_t Request_mach_zone_force_gc;__Request__host_create_mach_voucher_t Request_host_create_mach_voucher;__Request__host_register_mach_voucher_attr_manager_t Request_host_register_mach_voucher_attr_manager;__Request__host_register_well_known_mach_voucher_attr_manager_t Request_host_register_well_known_mach_voucher_attr_manager;__Request__host_set_atm_diagnostic_flag_t Request_host_set_atm_diagnostic_flag;__Request__mach_memory_info_t Request_mach_memory_info;__Request__host_set_multiuser_config_flags_t Request_host_set_multiuser_config_flags;__Request__mach_zone_info_for_zone_t Request_mach_zone_info_for_zone;__Request__mach_zone_info_for_largest_zone_t Request_mach_zone_info_for_largest_zone;__Request__mach_zone_get_zlog_zones_t Request_mach_zone_get_zlog_zones;__Request__mach_zone_get_btlog_records_t Request_mach_zone_get_btlog_records;};
union __ReplyUnion__thread_act_subsystem {__Reply__thread_terminate_t Reply_thread_terminate;__Reply__act_get_state_t Reply_act_get_state;__Reply__act_set_state_t Reply_act_set_state;__Reply__thread_get_state_t Reply_thread_get_state;__Reply__thread_set_state_t Reply_thread_set_state;__Reply__thread_suspend_t Reply_thread_suspend;__Reply__thread_resume_t Reply_thread_resume;__Reply__thread_abort_t Reply_thread_abort;__Reply__thread_abort_safely_t Reply_thread_abort_safely;__Reply__thread_depress_abort_t Reply_thread_depress_abort;__Reply__thread_get_special_port_t Reply_thread_get_special_port;__Reply__thread_set_special_port_t Reply_thread_set_special_port;__Reply__thread_info_t Reply_thread_info;__Reply__thread_set_exception_ports_t Reply_thread_set_exception_ports;__Reply__thread_get_exception_ports_t Reply_thread_get_exception_ports;__Reply__thread_swap_exception_ports_t Reply_thread_swap_exception_ports;__Reply__thread_policy_t Reply_thread_policy;__Reply__thread_policy_set_t Reply_thread_policy_set;__Reply__thread_policy_get_t Reply_thread_policy_get;__Reply__thread_sample_t Reply_thread_sample;__Reply__etap_trace_thread_t Reply_etap_trace_thread;__Reply__thread_assign_t Reply_thread_assign;__Reply__thread_assign_default_t Reply_thread_assign_default;__Reply__thread_get_assignment_t Reply_thread_get_assignment;__Reply__thread_set_policy_t Reply_thread_set_policy;__Reply__thread_get_mach_voucher_t Reply_thread_get_mach_voucher;__Reply__thread_set_mach_voucher_t Reply_thread_set_mach_voucher;__Reply__thread_swap_mach_voucher_t Reply_thread_swap_mach_voucher;};
union __ReplyUnion__mach_host_subsystem {__Reply__host_info_t Reply_host_info;__Reply__host_kernel_version_t Reply_host_kernel_version;__Reply__host_page_size_t Reply_host_page_size;__Reply__mach_memory_object_memory_entry_t Reply_mach_memory_object_memory_entry;__Reply__host_processor_info_t Reply_host_processor_info;__Reply__host_get_io_master_t Reply_host_get_io_master;__Reply__host_get_clock_service_t Reply_host_get_clock_service;__Reply__kmod_get_info_t Reply_kmod_get_info;__Reply__host_virtual_physical_table_info_t Reply_host_virtual_physical_table_info;__Reply__processor_set_default_t Reply_processor_set_default;__Reply__processor_set_create_t Reply_processor_set_create;__Reply__mach_memory_object_memory_entry_64_t Reply_mach_memory_object_memory_entry_64;__Reply__host_statistics_t Reply_host_statistics;__Reply__host_request_notification_t Reply_host_request_notification;__Reply__host_lockgroup_info_t Reply_host_lockgroup_info;__Reply__host_statistics64_t Reply_host_statistics64;__Reply__mach_zone_info_t Reply_mach_zone_info;__Reply__mach_zone_force_gc_t Reply_mach_zone_force_gc;__Reply__host_create_mach_voucher_t Reply_host_create_mach_voucher;__Reply__host_register_mach_voucher_attr_manager_t Reply_host_register_mach_voucher_attr_manager;__Reply__host_register_well_known_mach_voucher_attr_manager_t Reply_host_register_well_known_mach_voucher_attr_manager;__Reply__host_set_atm_diagnostic_flag_t Reply_host_set_atm_diagnostic_flag;__Reply__mach_memory_info_t Reply_mach_memory_info;__Reply__host_set_multiuser_config_flags_t Reply_host_set_multiuser_config_flags;__Reply__mach_zone_info_for_zone_t Reply_mach_zone_info_for_zone;__Reply__mach_zone_info_for_largest_zone_t Reply_mach_zone_info_for_largest_zone;__Reply__mach_zone_get_zlog_zones_t Reply_mach_zone_get_zlog_zones;__Reply__mach_zone_get_btlog_records_t Reply_mach_zone_get_btlog_records;};
union __RequestUnion__vm_map_subsystem {__Request__vm_region_t Request_vm_region;__Request__vm_allocate_t Request_vm_allocate;__Request__vm_deallocate_t Request_vm_deallocate;__Request__vm_protect_t Request_vm_protect;__Request__vm_inherit_t Request_vm_inherit;__Request__vm_read_t Request_vm_read;__Request__vm_read_list_t Request_vm_read_list;__Request__vm_write_t Request_vm_write;__Request__vm_copy_t Request_vm_copy;__Request__vm_read_overwrite_t Request_vm_read_overwrite;__Request__vm_msync_t Request_vm_msync;__Request__vm_behavior_set_t Request_vm_behavior_set;__Request__vm_map_t Request_vm_map;__Request__vm_machine_attribute_t Request_vm_machine_attribute;__Request__vm_remap_t Request_vm_remap;__Request__task_wire_t Request_task_wire;__Request__mach_make_memory_entry_t Request_mach_make_memory_entry;__Request__vm_map_page_query_t Request_vm_map_page_query;__Request__mach_vm_region_info_t Request_mach_vm_region_info;__Request__vm_mapped_pages_info_t Request_vm_mapped_pages_info;__Request__vm_region_recurse_t Request_vm_region_recurse;__Request__vm_region_recurse_64_t Request_vm_region_recurse_64;__Request__mach_vm_region_info_64_t Request_mach_vm_region_info_64;__Request__vm_region_64_t Request_vm_region_64;__Request__mach_make_memory_entry_64_t Request_mach_make_memory_entry_64;__Request__vm_map_64_t Request_vm_map_64;__Request__vm_purgable_control_t Request_vm_purgable_control;__Request__vm_map_exec_lockdown_t Request_vm_map_exec_lockdown;};
union __ReplyUnion__vm_map_subsystem {__Reply__vm_region_t Reply_vm_region;__Reply__vm_allocate_t Reply_vm_allocate;__Reply__vm_deallocate_t Reply_vm_deallocate;__Reply__vm_protect_t Reply_vm_protect;__Reply__vm_inherit_t Reply_vm_inherit;__Reply__vm_read_t Reply_vm_read;__Reply__vm_read_list_t Reply_vm_read_list;__Reply__vm_write_t Reply_vm_write;__Reply__vm_copy_t Reply_vm_copy;__Reply__vm_read_overwrite_t Reply_vm_read_overwrite;__Reply__vm_msync_t Reply_vm_msync;__Reply__vm_behavior_set_t Reply_vm_behavior_set;__Reply__vm_map_t Reply_vm_map;__Reply__vm_machine_attribute_t Reply_vm_machine_attribute;__Reply__vm_remap_t Reply_vm_remap;__Reply__task_wire_t Reply_task_wire;__Reply__mach_make_memory_entry_t Reply_mach_make_memory_entry;__Reply__vm_map_page_query_t Reply_vm_map_page_query;__Reply__mach_vm_region_info_t Reply_mach_vm_region_info;__Reply__vm_mapped_pages_info_t Reply_vm_mapped_pages_info;__Reply__vm_region_recurse_t Reply_vm_region_recurse;__Reply__vm_region_recurse_64_t Reply_vm_region_recurse_64;__Reply__mach_vm_region_info_64_t Reply_mach_vm_region_info_64;__Reply__vm_region_64_t Reply_vm_region_64;__Reply__mach_make_memory_entry_64_t Reply_mach_make_memory_entry_64;__Reply__vm_map_64_t Reply_vm_map_64;__Reply__vm_purgable_control_t Reply_vm_purgable_control;__Reply__vm_map_exec_lockdown_t Reply_vm_map_exec_lockdown;};
union __RequestUnion__mach_port_subsystem {__Request__mach_port_names_t Request_mach_port_names;__Request__mach_port_type_t Request_mach_port_type;__Request__mach_port_rename_t Request_mach_port_rename;__Request__mach_port_allocate_name_t Request_mach_port_allocate_name;__Request__mach_port_allocate_t Request_mach_port_allocate;__Request__mach_port_destroy_t Request_mach_port_destroy;__Request__mach_port_deallocate_t Request_mach_port_deallocate;__Request__mach_port_get_refs_t Request_mach_port_get_refs;__Request__mach_port_mod_refs_t Request_mach_port_mod_refs;__Request__mach_port_peek_t Request_mach_port_peek;__Request__mach_port_set_mscount_t Request_mach_port_set_mscount;__Request__mach_port_get_set_status_t Request_mach_port_get_set_status;__Request__mach_port_move_member_t Request_mach_port_move_member;__Request__mach_port_request_notification_t Request_mach_port_request_notification;__Request__mach_port_insert_right_t Request_mach_port_insert_right;__Request__mach_port_extract_right_t Request_mach_port_extract_right;__Request__mach_port_set_seqno_t Request_mach_port_set_seqno;__Request__mach_port_get_attributes_t Request_mach_port_get_attributes;__Request__mach_port_set_attributes_t Request_mach_port_set_attributes;__Request__mach_port_allocate_qos_t Request_mach_port_allocate_qos;__Request__mach_port_allocate_full_t Request_mach_port_allocate_full;__Request__task_set_port_space_t Request_task_set_port_space;__Request__mach_port_get_srights_t Request_mach_port_get_srights;__Request__mach_port_space_info_t Request_mach_port_space_info;__Request__mach_port_dnrequest_info_t Request_mach_port_dnrequest_info;__Request__mach_port_kernel_object_t Request_mach_port_kernel_object;__Request__mach_port_insert_member_t Request_mach_port_insert_member;__Request__mach_port_extract_member_t Request_mach_port_extract_member;__Request__mach_port_get_context_t Request_mach_port_get_context;__Request__mach_port_set_context_t Request_mach_port_set_context;__Request__mach_port_kobject_t Request_mach_port_kobject;__Request__mach_port_construct_t Request_mach_port_construct;__Request__mach_port_destruct_t Request_mach_port_destruct;__Request__mach_port_guard_t Request_mach_port_guard;__Request__mach_port_unguard_t Request_mach_port_unguard;__Request__mach_port_space_basic_info_t Request_mach_port_space_basic_info;__Request__mach_port_special_reply_port_reset_link_t Request_mach_port_special_reply_port_reset_link;};
union __ReplyUnion__mach_port_subsystem {__Reply__mach_port_names_t Reply_mach_port_names;__Reply__mach_port_type_t Reply_mach_port_type;__Reply__mach_port_rename_t Reply_mach_port_rename;__Reply__mach_port_allocate_name_t Reply_mach_port_allocate_name;__Reply__mach_port_allocate_t Reply_mach_port_allocate;__Reply__mach_port_destroy_t Reply_mach_port_destroy;__Reply__mach_port_deallocate_t Reply_mach_port_deallocate;__Reply__mach_port_get_refs_t Reply_mach_port_get_refs;__Reply__mach_port_mod_refs_t Reply_mach_port_mod_refs;__Reply__mach_port_peek_t Reply_mach_port_peek;__Reply__mach_port_set_mscount_t Reply_mach_port_set_mscount;__Reply__mach_port_get_set_status_t Reply_mach_port_get_set_status;__Reply__mach_port_move_member_t Reply_mach_port_move_member;__Reply__mach_port_request_notification_t Reply_mach_port_request_notification;__Reply__mach_port_insert_right_t Reply_mach_port_insert_right;__Reply__mach_port_extract_right_t Reply_mach_port_extract_right;__Reply__mach_port_set_seqno_t Reply_mach_port_set_seqno;__Reply__mach_port_get_attributes_t Reply_mach_port_get_attributes;__Reply__mach_port_set_attributes_t Reply_mach_port_set_attributes;__Reply__mach_port_allocate_qos_t Reply_mach_port_allocate_qos;__Reply__mach_port_allocate_full_t Reply_mach_port_allocate_full;__Reply__task_set_port_space_t Reply_task_set_port_space;__Reply__mach_port_get_srights_t Reply_mach_port_get_srights;__Reply__mach_port_space_info_t Reply_mach_port_space_info;__Reply__mach_port_dnrequest_info_t Reply_mach_port_dnrequest_info;__Reply__mach_port_kernel_object_t Reply_mach_port_kernel_object;__Reply__mach_port_insert_member_t Reply_mach_port_insert_member;__Reply__mach_port_extract_member_t Reply_mach_port_extract_member;__Reply__mach_port_get_context_t Reply_mach_port_get_context;__Reply__mach_port_set_context_t Reply_mach_port_set_context;__Reply__mach_port_kobject_t Reply_mach_port_kobject;__Reply__mach_port_construct_t Reply_mach_port_construct;__Reply__mach_port_destruct_t Reply_mach_port_destruct;__Reply__mach_port_guard_t Reply_mach_port_guard;__Reply__mach_port_unguard_t Reply_mach_port_unguard;__Reply__mach_port_space_basic_info_t Reply_mach_port_space_basic_info;__Reply__mach_port_special_reply_port_reset_link_t Reply_mach_port_special_reply_port_reset_link;};
union __RequestUnion__task_subsystem {__Request__task_create_t Request_task_create;__Request__task_terminate_t Request_task_terminate;__Request__task_threads_t Request_task_threads;__Request__mach_ports_register_t Request_mach_ports_register;__Request__mach_ports_lookup_t Request_mach_ports_lookup;__Request__task_info_t Request_task_info;__Request__task_set_info_t Request_task_set_info;__Request__task_suspend_t Request_task_suspend;__Request__task_resume_t Request_task_resume;__Request__task_get_special_port_t Request_task_get_special_port;__Request__task_set_special_port_t Request_task_set_special_port;__Request__thread_create_t Request_thread_create;__Request__thread_create_running_t Request_thread_create_running;__Request__task_set_exception_ports_t Request_task_set_exception_ports;__Request__task_get_exception_ports_t Request_task_get_exception_ports;__Request__task_swap_exception_ports_t Request_task_swap_exception_ports;__Request__lock_set_create_t Request_lock_set_create;__Request__lock_set_destroy_t Request_lock_set_destroy;__Request__semaphore_create_t Request_semaphore_create;__Request__semaphore_destroy_t Request_semaphore_destroy;__Request__task_policy_set_t Request_task_policy_set;__Request__task_policy_get_t Request_task_policy_get;__Request__task_sample_t Request_task_sample;__Request__task_policy_t Request_task_policy;__Request__task_set_emulation_t Request_task_set_emulation;__Request__task_get_emulation_vector_t Request_task_get_emulation_vector;__Request__task_set_emulation_vector_t Request_task_set_emulation_vector;__Request__task_set_ras_pc_t Request_task_set_ras_pc;__Request__task_zone_info_t Request_task_zone_info;__Request__task_assign_t Request_task_assign;__Request__task_assign_default_t Request_task_assign_default;__Request__task_get_assignment_t Request_task_get_assignment;__Request__task_set_policy_t Request_task_set_policy;__Request__task_get_state_t Request_task_get_state;__Request__task_set_state_t Request_task_set_state;__Request__task_set_phys_footprint_limit_t Request_task_set_phys_footprint_limit;__Request__task_suspend2_t Request_task_suspend2;__Request__task_resume2_t Request_task_resume2;__Request__task_purgable_info_t Request_task_purgable_info;__Request__task_get_mach_voucher_t Request_task_get_mach_voucher;__Request__task_set_mach_voucher_t Request_task_set_mach_voucher;__Request__task_swap_mach_voucher_t Request_task_swap_mach_voucher;__Request__task_generate_corpse_t Request_task_generate_corpse;__Request__task_map_corpse_info_t Request_task_map_corpse_info;__Request__task_register_dyld_image_infos_t Request_task_register_dyld_image_infos;__Request__task_unregister_dyld_image_infos_t Request_task_unregister_dyld_image_infos;__Request__task_get_dyld_image_infos_t Request_task_get_dyld_image_infos;__Request__task_register_dyld_shared_cache_image_info_t Request_task_register_dyld_shared_cache_image_info;__Request__task_register_dyld_set_dyld_state_t Request_task_register_dyld_set_dyld_state;__Request__task_register_dyld_get_process_state_t Request_task_register_dyld_get_process_state;__Request__task_map_corpse_info_64_t Request_task_map_corpse_info_64;__Request__task_inspect_t Request_task_inspect;};
union __ReplyUnion__task_subsystem {__Reply__task_create_t Reply_task_create;__Reply__task_terminate_t Reply_task_terminate;__Reply__task_threads_t Reply_task_threads;__Reply__mach_ports_register_t Reply_mach_ports_register;__Reply__mach_ports_lookup_t Reply_mach_ports_lookup;__Reply__task_info_t Reply_task_info;__Reply__task_set_info_t Reply_task_set_info;__Reply__task_suspend_t Reply_task_suspend;__Reply__task_resume_t Reply_task_resume;__Reply__task_get_special_port_t Reply_task_get_special_port;__Reply__task_set_special_port_t Reply_task_set_special_port;__Reply__thread_create_t Reply_thread_create;__Reply__thread_create_running_t Reply_thread_create_running;__Reply__task_set_exception_ports_t Reply_task_set_exception_ports;__Reply__task_get_exception_ports_t Reply_task_get_exception_ports;__Reply__task_swap_exception_ports_t Reply_task_swap_exception_ports;__Reply__lock_set_create_t Reply_lock_set_create;__Reply__lock_set_destroy_t Reply_lock_set_destroy;__Reply__semaphore_create_t Reply_semaphore_create;__Reply__semaphore_destroy_t Reply_semaphore_destroy;__Reply__task_policy_set_t Reply_task_policy_set;__Reply__task_policy_get_t Reply_task_policy_get;__Reply__task_sample_t Reply_task_sample;__Reply__task_policy_t Reply_task_policy;__Reply__task_set_emulation_t Reply_task_set_emulation;__Reply__task_get_emulation_vector_t Reply_task_get_emulation_vector;__Reply__task_set_emulation_vector_t Reply_task_set_emulation_vector;__Reply__task_set_ras_pc_t Reply_task_set_ras_pc;__Reply__task_zone_info_t Reply_task_zone_info;__Reply__task_assign_t Reply_task_assign;__Reply__task_assign_default_t Reply_task_assign_default;__Reply__task_get_assignment_t Reply_task_get_assignment;__Reply__task_set_policy_t Reply_task_set_policy;__Reply__task_get_state_t Reply_task_get_state;__Reply__task_set_state_t Reply_task_set_state;__Reply__task_set_phys_footprint_limit_t Reply_task_set_phys_footprint_limit;__Reply__task_suspend2_t Reply_task_suspend2;__Reply__task_resume2_t Reply_task_resume2;__Reply__task_purgable_info_t Reply_task_purgable_info;__Reply__task_get_mach_voucher_t Reply_task_get_mach_voucher;__Reply__task_set_mach_voucher_t Reply_task_set_mach_voucher;__Reply__task_swap_mach_voucher_t Reply_task_swap_mach_voucher;__Reply__task_generate_corpse_t Reply_task_generate_corpse;__Reply__task_map_corpse_info_t Reply_task_map_corpse_info;__Reply__task_register_dyld_image_infos_t Reply_task_register_dyld_image_infos;__Reply__task_unregister_dyld_image_infos_t Reply_task_unregister_dyld_image_infos;__Reply__task_get_dyld_image_infos_t Reply_task_get_dyld_image_infos;__Reply__task_register_dyld_shared_cache_image_info_t Reply_task_register_dyld_shared_cache_image_info;__Reply__task_register_dyld_set_dyld_state_t Reply_task_register_dyld_set_dyld_state;__Reply__task_register_dyld_get_process_state_t Reply_task_register_dyld_get_process_state;__Reply__task_map_corpse_info_64_t Reply_task_map_corpse_info_64;__Reply__task_inspect_t Reply_task_inspect;};
union __RequestUnion__receive_sysdiagnose_notification_subsystem {__Request__sysdiagnose_notification_t Request_sysdiagnose_notification;};
union __ReplyUnion__receive_sysdiagnose_notification_subsystem {__Reply__sysdiagnose_notification_t Reply_sysdiagnose_notification;};
union __RequestUnion__coalition_notification_subsystem {__Request__coalition_notification_t Request_coalition_notification;};
union __RequestUnion__send_ktrace_background_subsystem {__Request__ktrace_background_available_t Request_send_ktrace_background_available;};
union __RequestUnion__telemetry_notification_subsystem {__Request__telemetry_notification_t Request_telemetry_notification;};
union __RequestUnion__memory_object_default_subsystem {__Request__memory_object_create_t Request_memory_object_create;};
union __ReplyUnion__coalition_notification_subsystem {__Reply__coalition_notification_t Reply_coalition_notification;};
union __ReplyUnion__send_ktrace_background_subsystem {__Reply__ktrace_background_available_t Reply_send_ktrace_background_available;};
union __ReplyUnion__telemetry_notification_subsystem {__Reply__telemetry_notification_t Reply_telemetry_notification;};
union __RequestUnion__kextd_kernel_request_subsystem {__Request__kextd_ping_t Request_kextd_ping;};
union __ReplyUnion__memory_object_default_subsystem {__Reply__memory_object_create_t Reply_memory_object_create;};
union __ReplyUnion__kextd_kernel_request_subsystem {__Reply__kextd_ping_t Reply_kextd_ping;};
struct IOFWSimpleContiguousPhysicalAddressSpace { IOFWSimplePhysicalAddressSpace cppsuper0;void *fSimpleContigPhysSpaceMembers;};
union __RequestUnion__audit_triggers_subsystem {__Request__audit_triggers_t Request_audit_triggers;};
union __ReplyUnion__audit_triggers_subsystem {__Reply__audit_triggers_t Reply_audit_triggers;};
union __RequestUnion__clock_reply_subsystem {__Request__clock_alarm_reply_t Request_clock_alarm_reply;};
union __ReplyUnion__clock_reply_subsystem {__Reply__clock_alarm_reply_t Reply_clock_alarm_reply;};
struct IOSharedInterruptController { IOInterruptController cppsuper0;IOService *provider;int numVectors;int vectorsRegistered;int vectorsEnabled;int controllerDisabled;char sourceIsLevel;IOSharedInterruptController__ExpansionData *iosic_reserved;};
typedef mach_voucher_name_t *mach_voucher_name_array_t;
struct IOModemSerialStreamSync { IOSerialStreamSync cppsuper0;};
struct IORS232SerialStreamSync { IOSerialStreamSync cppsuper0;};
struct IOApplePartitionScheme { IOPartitionScheme cppsuper0;IOApplePartitionScheme__ExpansionData *_expansionData;OSSet *_partitions;};
struct IOAudioSelectorControl { IOAudioControl cppsuper0;OSArray *availableSelections;IOAudioSelectorControl__ExpansionData *reserved;};
struct IOCDBlockStorageDevice { IOBlockStorageDevice cppsuper0;IOCDBlockStorageDevice__ExpansionData *_expansionData;};
struct IOFDiskPartitionScheme { IOPartitionScheme cppsuper0;IOFDiskPartitionScheme__ExpansionData *_expansionData;OSSet *_partitions;};
struct IOKitDiagnosticsClient { IOUserClient cppsuper0;};
struct IOGUIDPartitionScheme { IOPartitionScheme cppsuper0;IOGUIDPartitionScheme__ExpansionData *_expansionData;OSSet *_partitions;};
struct IOAudioToggleControl { IOAudioControl cppsuper0;IOAudioToggleControl__ExpansionData *reserved;};
struct IOFireWireAVCSubUnit { IOFireWireAVCNub cppsuper0;IOFireWireAVCUnit *fAVCUnit;IOFireWireAVCSubUnit__ExpansionData *reserved;};
struct IOCDPartitionScheme { IOPartitionScheme cppsuper0;IOCDPartitionScheme__ExpansionData *_expansionData;OSSet *_partitions;};
struct IODVDMediaBSDClient { IOMediaBSDClient cppsuper0;IODVDMediaBSDClient__ExpansionData *_expansionData;};
struct IOBDMediaBSDClient { IOMediaBSDClient cppsuper0;IOBDMediaBSDClient__ExpansionData *_expansionData;};
struct IOBacklightDisplay { IODisplay cppsuper0;};
struct IOCDMediaBSDClient { IOMediaBSDClient cppsuper0;IOCDMediaBSDClient__ExpansionData *_expansionData;};
struct IODTPlatformExpert { IOPlatformExpert cppsuper0;IODTNVRAM *dtNVRAM;IODTPlatformExpert__ExpansionData *iodtpe_reserved;};
typedef vm_address_t IOVirtualAddress;
struct IOFilterScheme { IOStorage cppsuper0;IOFilterScheme__ExpansionData *_expansionData;};
struct GTraceEntry {GTraceEntry___5FD22310585F2208134956ED9571B74A __anonymous0;};
struct IODVDMedia { IOMedia cppsuper0;IODVDMedia__ExpansionData *_expansionData;};
struct IOBDMedia { IOMedia cppsuper0;IOBDMedia__ExpansionData *_expansionData;};
struct IOCDMedia { IOMedia cppsuper0;IOCDMedia__ExpansionData *_expansionData;};
union __RequestUnion__mach_voucher_attr_control_subsystem {__Request__mach_voucher_attr_control_get_values_t Request_mach_voucher_attr_control_get_values;__Request__mach_voucher_attr_control_create_mach_voucher_t Request_mach_voucher_attr_control_create_mach_voucher;};
union IOGTraceBuffer___9142E5316606A83F3B8F1466E3BF6E51 {GTraceHeader fHeader;GTraceEntry _padding[2];};
union __ReplyUnion__mach_voucher_attr_control_subsystem {__Reply__mach_voucher_attr_control_get_values_t Reply_mach_voucher_attr_control_get_values;__Reply__mach_voucher_attr_control_create_mach_voucher_t Reply_mach_voucher_attr_control_create_mach_voucher;};
union __RequestUnion__host_security_subsystem {__Request__host_security_create_task_token_t Request_host_security_create_task_token;__Request__host_security_set_task_token_t Request_host_security_set_task_token;};
union __RequestUnion__memory_entry_subsystem {__Request__mach_memory_entry_purgable_control_t Request_mach_memory_entry_purgable_control;__Request__mach_memory_entry_access_tracking_t Request_mach_memory_entry_access_tracking;};
union __ReplyUnion__host_security_subsystem {__Reply__host_security_create_task_token_t Reply_host_security_create_task_token;__Reply__host_security_set_task_token_t Reply_host_security_set_task_token;};
union __RequestUnion__task_access_subsystem {__Request__check_task_access_t Request_check_task_access;__Request__find_code_signature_t Request_find_code_signature;};
union __ReplyUnion__memory_entry_subsystem {__Reply__mach_memory_entry_purgable_control_t Reply_mach_memory_entry_purgable_control;__Reply__mach_memory_entry_access_tracking_t Reply_mach_memory_entry_access_tracking;};
union __RequestUnion__clock_priv_subsystem {__Request__clock_set_time_t Request_clock_set_time;__Request__clock_set_attributes_t Request_clock_set_attributes;};
union __ReplyUnion__task_access_subsystem {__Reply__check_task_access_t Reply_check_task_access;__Reply__find_code_signature_t Reply_find_code_signature;};
union __ReplyUnion__clock_priv_subsystem {__Reply__clock_set_time_t Reply_clock_set_time;__Reply__clock_set_attributes_t Reply_clock_set_attributes;};
struct IOCDBlockStorageDriver { IOBlockStorageDriver cppsuper0;IOCDBlockStorageDriver__ExpansionData *_expansionData;UInt32 _reserved0032;CDTOC *_toc;UInt32 _tocSize;};
struct IOSCSIProtocolServices { IOSCSIProtocolInterface cppsuper0;SCSITask *fSCSITaskQueueHead;IOSimpleLock *fQueueLock;char fAllowServiceRequests;IOSCSIProtocolServices__IOSCSIProtocolServicesExpansionData *fIOSCSIProtocolServicesReserved;};
struct ApplePlatformExpert { IODTPlatformExpert cppsuper0;SInt32 _timeToGMT;ApplePlatformExpert__ExpansionData *reserved;};
struct IOVirtualRange {IOVirtualAddress address;IOByteCount length;};
struct ATADeviceNub { IOATADevice cppsuper0;UInt8 *buffer;ATADeviceNub__ExpansionData *reserved;};
union __RequestUnion__catch_mach_exc_subsystem {__Request__mach_exception_raise_t Request_mach_exception_raise;__Request__mach_exception_raise_state_t Request_mach_exception_raise_state;__Request__mach_exception_raise_state_identity_t Request_mach_exception_raise_state_identity;};
union __ReplyUnion__catch_mach_exc_subsystem {__Reply__mach_exception_raise_t Reply_mach_exception_raise;__Reply__mach_exception_raise_state_t Reply_mach_exception_raise_state;__Reply__mach_exception_raise_state_identity_t Reply_mach_exception_raise_state_identity;};
struct IOFireWireSerialBusProtocolTransport { IOSCSIProtocolServices cppsuper0;IOFireWireUnit *fUnit;IOFireWireSBP2LUN *fSBPTarget;IOFireWireSBP2Login *fLogin;IOFireWireSBP2ORB *fORB;IOFireWireSBP2ManagementORB *fLUNResetORB;IOSimpleLock *fQueueLock;UInt32 fLoginRetryCount;char fDeferRegisterService;char fNeedLogin;char fPhysicallyConnected;UInt32 fReconnectCount;char fLoggedIn;IOFireWireSerialBusProtocolTransport__ExpansionData *reserved;char fObjectIsOpen;};
union __RequestUnion__catch_exc_subsystem {__Request__exception_raise_t Request_exception_raise;__Request__exception_raise_state_t Request_exception_raise_state;__Request__exception_raise_state_identity_t Request_exception_raise_state_identity;};
union __ReplyUnion__lockd_mach_subsystem {__Reply__lockd_request_t Reply_lockd_request;__Reply__lockd_ping_t Reply_lockd_ping;__Reply__lockd_shutdown_t Reply_lockd_shutdown;};
union __ReplyUnion__catch_exc_subsystem {__Reply__exception_raise_t Reply_exception_raise;__Reply__exception_raise_state_t Reply_exception_raise_state;__Reply__exception_raise_state_identity_t Reply_exception_raise_state_identity;};
union __RequestUnion__clock_subsystem {__Request__clock_get_time_t Request_clock_get_time;__Request__clock_get_attributes_t Request_clock_get_attributes;__Request__clock_alarm_t Request_clock_alarm;};
union __ReplyUnion__clock_subsystem {__Reply__clock_get_time_t Reply_clock_get_time;__Reply__clock_get_attributes_t Reply_clock_get_attributes;__Reply__clock_alarm_t Reply_clock_alarm;};
struct IOSCSIPrimaryCommandsDevice { IOSCSIProtocolInterface cppsuper0;IOSCSIProtocolInterface *fProtocolDriver;char fProtocolAccessEnabled;char fDeviceAccessEnabled;char fDeviceAccessSuspended;IOSCSIPrimaryCommandsDevice__IOSCSIPrimaryCommandsDeviceExpansionData *fIOSCSIPrimaryCommandsDeviceReserved;UInt8 fDefaultInquiryCount;OSDictionary *fDeviceCharacteristicsDictionary;UInt32 fNumCommandsOutstanding;char fDeviceSupportsPowerConditions;};
struct IOFWDCLPool_vtbl_layout; 
struct IOAudioLevelControl { IOAudioControl cppsuper0;SInt32 minValue;SInt32 maxValue;IOFixed minDB;IOFixed maxDB;OSArray *ranges;IOAudioLevelControl__ExpansionData *reserved;};
struct IOFWDCLPool_vtbl; 
struct IOAGPDevice { IOPCIDevice cppsuper0;IOAGPDevice__ExpansionData *reserved;UInt32 masterState;UInt8 masterAGPRegisters;};
union __RequestUnion__upl_subsystem {__Request__upl_abort_t Request_upl_abort;__Request__upl_abort_range_t Request_upl_abort_range;__Request__upl_commit_t Request_upl_commit;__Request__upl_commit_range_t Request_upl_commit_range;};
union __ReplyUnion__upl_subsystem {__Reply__upl_abort_t Reply_upl_abort;__Reply__upl_abort_range_t Reply_upl_abort_range;__Reply__upl_commit_t Reply_upl_commit;__Reply__upl_commit_range_t Reply_upl_commit_range;};
union __ReplyUnion__mach_voucher_subsystem {__Reply__mach_voucher_extract_attr_content_t Reply_mach_voucher_extract_attr_content;__Reply__mach_voucher_extract_attr_recipe_t Reply_mach_voucher_extract_attr_recipe;__Reply__mach_voucher_extract_all_attr_recipes_t Reply_mach_voucher_extract_all_attr_recipes;__Reply__mach_voucher_attr_command_t Reply_mach_voucher_attr_command;__Reply__mach_voucher_debug_info_t Reply_mach_voucher_debug_info;};
struct IOFWSkipCycleDCL_vtbl_layout; 
struct IOFWReceiveDCL_vtbl_layout; 
struct IOFWSendDCL_vtbl_layout; 
struct IOFWSkipCycleDCL_vtbl; 
struct IOFWDCL_vtbl_layout; 
struct IOFWReceiveDCL_vtbl; 
struct IOFWSendDCL_vtbl; 
struct IOFWDCL_vtbl; 
struct IOEthernetController__IOEthernetAVBPacket {int structVersion;int numberOfEntries;IOVirtualRange virtualRanges[4];IOPhysicalRange physicalRanges[4];uint64_t packetTimestamp;char timestampValid;uint32_t transmittedTimeSyncCallbackRef;uint16_t vlanTag;void *desc_buffer;void *desc_dma;void *completion_context;IOEthernetController__avb_packet_callback_t completion_callback;void *reservedAVBStack;void *reservedFamily;};
union __ReplyUnion__processor_subsystem {__Reply__processor_start_t Reply_processor_start;__Reply__processor_exit_t Reply_processor_exit;__Reply__processor_info_t Reply_processor_info;__Reply__processor_control_t Reply_processor_control;__Reply__processor_assign_t Reply_processor_assign;__Reply__processor_get_assignment_t Reply_processor_get_assignment;};
struct IOSCSIMultimediaCommandsDevice { IOSCSIPrimaryCommandsDevice cppsuper0;IOSCSIMultimediaCommandsDevice__IOSCSIMultimediaCommandsDeviceExpansionData *fIOSCSIMultimediaCommandsDeviceReserved;CDFeatures fSupportedCDFeatures;DVDFeatures fSupportedDVDFeatures;UInt16 fCurrentDiscSpeed;char fMediaChanged;char fMediaPresent;UInt32 fMediaBlockSize;UInt32 fMediaBlockCount;char fMediaIsRemovable;char fMediaIsWriteProtected;UInt32 fMediaType;thread_call_t fPollingThread;char fDeviceSupportsLowPowerPolling;char fLowPowerPollingEnabled;UInt32 fPollingMode;};
struct IOMemoryMap_vtbl_layout; 
struct IOMemoryMap_vtbl; 
union __RequestUnion__gssd_mach_subsystem {__Request__mach_gss_init_sec_context_t Request_mach_gss_init_sec_context;__Request__mach_gss_accept_sec_context_t Request_mach_gss_accept_sec_context;__Request__mach_gss_log_error_t Request_mach_gss_log_error;__Request__mach_gss_init_sec_context_v2_t Request_mach_gss_init_sec_context_v2;__Request__mach_gss_accept_sec_context_v2_t Request_mach_gss_accept_sec_context_v2;__Request__mach_gss_init_sec_context_v3_t Request_mach_gss_init_sec_context_v3;__Request__mach_gss_hold_cred_t Request_mach_gss_hold_cred;__Request__mach_gss_unhold_cred_t Request_mach_gss_unhold_cred;__Request__mach_gss_lookup_t Request_mach_gss_lookup;};
struct IONDRVFramebuffer { IOFramebuffer cppsuper0;IONDRVFramebuffer__ExpansionData *reserved;IOService *fNub;IONDRV *fNdrv;IODisplayModeID currentDisplayMode;IOIndex currentDepth;IOIndex currentPage;UInt8 __reservedE;IOPhysicalAddress __resv_was_physicalFramebuffer;IOMemoryDescriptor *vramRange;UInt8 gammaWidth;UInt8 __reservedD;UInt8 lastGrayMode;VDClutBehavior lastClutSetting;UInt8 __reservedC;char consoleDevice;UInt32 powerState;UInt32 ndrvState;SInt32 ndrvEnter;OSArray *detailedTimings;UInt32 detailedTimingsSeed;UInt32 *detailedTimingsCurrent;IODeviceMemory *vramMemory;VDResolutionInfoRec cachedVDResolution;_VSLService *vslServices;UInt32 accessFlags;unsigned int shouldDoI2CPower : 1;unsigned int online : 1;unsigned int avJackState : 1;unsigned int grayMode : 1;unsigned int platformSleep : 1;unsigned int forceReadEDID : 1;unsigned int supportsProbe : 1;unsigned int __reservedB : 25;IOService *fDevice;UInt32 __reservedA[29];IONDRVFramebufferPrivate *__private;};
struct IOInterleavedMemoryDescriptor_vtbl_layout; 
struct IOGeneralMemoryDescriptor_vtbl_layout; 
struct IOMultiMemoryDescriptor_vtbl_layout; 
struct IOInterleavedMemoryDescriptor_vtbl; 
struct IOSubMemoryDescriptor_vtbl_layout; 
struct IOGeneralMemoryDescriptor_vtbl; 
struct IOMemoryDescriptor_vtbl_layout; 
struct IOMultiMemoryDescriptor_vtbl; 
struct IODeviceMemory_vtbl_layout; 
struct IOSubMemoryDescriptor_vtbl; 
struct IOMemoryDescriptor_vtbl; 
struct IODeviceMemory_vtbl; 
struct IOBufferMemoryDescriptor_vtbl_layout; 
struct IOBufferMemoryDescriptor_vtbl; 
struct IOAudioControlUserClient_vtbl_layout; 
struct IOKitDiagnosticsClient_vtbl_layout; 
struct IOAudioControlUserClient_vtbl; 
struct IOKitDiagnosticsClient_vtbl; 
struct IOUserClient_vtbl_layout; 
struct IOUserClient_vtbl; 
struct IOVideoDeviceUserClient_vtbl_layout; 
struct IOStreamUserClient_vtbl_layout; 
struct IOVideoDeviceUserClient_vtbl; 
struct IOStreamUserClient_vtbl; 
struct IOFireWireSBP2UserClient_vtbl_layout; 
struct IOAudioEngineUserClient_vtbl_layout; 
struct IOUSBUserClientLegacy_vtbl_layout; 
struct IOFireWireSBP2UserClient_vtbl; 
struct IOAudioEngineUserClient_vtbl; 
struct IOUSBUserClientLegacy_vtbl; 
struct IOSCSIPeripheralDeviceType05 { IOSCSIMultimediaCommandsDevice cppsuper0;IOSCSIPeripheralDeviceType05__IOSCSIPeripheralDeviceType05ExpansionData *fIOSCSIPeripheralDeviceType05Reserved;};
struct IODVDBlockStorageDevice { IOCDBlockStorageDevice cppsuper0;IODVDBlockStorageDevice__ExpansionData *_expansionData;};
struct IODVDBlockStorageDriver { IOCDBlockStorageDriver cppsuper0;IODVDBlockStorageDriver__ExpansionData *_expansionData;};
struct IOBDBlockStorageDevice { IODVDBlockStorageDevice cppsuper0;IOBDBlockStorageDevice__ExpansionData *_expansionData;};
struct IOBDBlockStorageDriver { IODVDBlockStorageDriver cppsuper0;IOBDBlockStorageDriver__ExpansionData *_expansionData;};
struct IOACPIPlatformExpert { IODTPlatformExpert cppsuper0;IOACPIPlatformExpert__ExpansionData *reserved;};
struct IOAppleLabelScheme { IOFilterScheme cppsuper0;IOAppleLabelScheme__ExpansionData *_expansionData;IOMedia *_content;};
typedef IOVirtualAddress IOLogicalAddress;
struct IOGTraceBuffer {IOGTraceBuffer___9142E5316606A83F3B8F1466E3BF6E51 __anonymous0;};
struct IOBDServices { IOBDBlockStorageDevice cppsuper0;OSSet *fClients;IOSCSIPeripheralDeviceType05 *fProvider;IOBDServices__IOBDServicesExpansionData *fIOBDServicesReserved;};
union IOGeneralMemoryDescriptor___ECA04EF03DB1B5A22FBE2CCFAFA5CDF1 {IOVirtualRange v;IOPhysicalRange p;};
struct IOATAController__ataDoubleBuffer {IOPhysicalAddress physicalBuffer;IOLogicalAddress logicalBuffer;IOByteCount bufferSize;};
struct IODVDServices { IODVDBlockStorageDevice cppsuper0;char fUseDataCache;UInt8 *fDataCacheStorage;UInt32 fDataCacheStartBlock;UInt32 fDataCacheBlockCount;IOSimpleLock *fDataCacheLock;OSSet *fClients;IOSCSIPeripheralDeviceType05 *fProvider;IODVDServices__IODVDServicesExpansionData *fIODVDServicesReserved;};
struct IOATAController { IOService cppsuper0;IOService *_provider;IOWorkLoop *_workLoop;IOCommandGate *_cmdGate;ATATimerEventSource *_timer;queue_head_t _commandQueue;IOATABusCommand *_currentCommand;UInt32 _busState;UInt32 _queueState;UInt32 _immediateGate;ataUnitID _selectedUnit;IOATAController__ataDevInfo _devInfo[2];IOATADevice *_nub[2];IOATAController__ataDoubleBuffer _doubleBuffer;IOATARegPtr8 _tfFeatureReg;IOATARegPtr8 _tfSCountReg;IOATARegPtr8 _tfSectorNReg;IOATARegPtr8 _tfCylLoReg;IOATARegPtr8 _tfCylHiReg;IOATARegPtr8 _tfSDHReg;IOATARegPtr8 _tfStatusCmdReg;IOATARegPtr16 _tfDataReg;IOATARegPtr8 _tfAltSDevCReg;IOATAController__ExpansionData *reserved;};
struct IOGeneralMemoryDescriptor { IOMemoryDescriptor cppsuper0;IOGeneralMemoryDescriptor__Ranges _ranges;unsigned int _rangesCount;char _rangesIsAllocated;task_t _task;IOGeneralMemoryDescriptor___ECA04EF03DB1B5A22FBE2CCFAFA5CDF1 _singleRange;unsigned int _wireCount;uintptr_t _cachedVirtualAddress;IOPhysicalAddress _cachedPhysicalAddress;char _initialized;OSData *_memoryEntries;unsigned int _pages;ppnum_t _highestPage;uint32_t __iomd_reservedA;uint32_t __iomd_reservedB;IOLock *_prepareLock;};
struct IOATAController_vtbl_layout; 
struct IOATAController_vtbl; 
struct IOPCIATA_vtbl_layout; 
struct IOPCIATA_vtbl; 
struct IOBufferMemoryDescriptor { IOGeneralMemoryDescriptor cppsuper0;IOBufferMemoryDescriptor__ExpansionData *reserved;void *_buffer;vm_size_t _capacity;vm_offset_t _alignment;IOOptionBits _options;uintptr_t _internalReserved;unsigned int _internalFlags;};
struct IOPCIATA { IOATAController cppsuper0;IOATARegPtr8 _bmCommandReg;IOATARegPtr8 _bmStatusReg;IOATARegPtr32 _bmPRDAddresReg;UInt32 _dmaState;IOPCIATA__PRD *_prdTable;IOPhysicalAddress _prdTablePhysical;IONaturalMemoryCursor *_DMACursor;IOPCIATA__ExpansionData *reserved;};



/// #endif ===true


