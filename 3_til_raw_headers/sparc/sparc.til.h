enum $003F63A829E52477BDB4080710A1139D {preorder = 0x0,postorder = 0x1,endorder = 0x2,leaf = 0x3,};
struct $00ED80C671E56402DFDA98FF57A0F9A3 {__int16 nmethods;__int16 ndefined;char *(*nl_langinfo)(_LC_time_t *, nl_item);size_t (*strftime)(_LC_time_t *, char *, size_t, const char *, const struct tm *);char *(*strptime)(_LC_time_t *, const char *, const char *, struct tm *);struct tm *(*getdate)(_LC_time_t *, const char *);size_t (*__wcsftime_xpg5)(_LC_time_t *, wchar_t *, size_t, const char *, const struct tm *);_LC_methods_func_t placeholders[5];};
struct $0113267646EB0A9CEC05668EA2201D53 {int ick_magic;int ick_split;int ick_split_align;int ick_xmit;};
enum $014516C156DA5201E9C0253C2C7BF2C9 {ELF_C_NULL = 0x0,ELF_C_READ = 0x1,ELF_C_WRITE = 0x2,ELF_C_CLR = 0x3,ELF_C_SET = 0x4,ELF_C_FDDONE = 0x5,ELF_C_FDREAD = 0x6,ELF_C_RDWR = 0x7,ELF_C_WRIMAGE = 0x8,ELF_C_IMAGE = 0x9,ELF_C_NUM = 0xA,};
struct $01BD53472F26B36476AF1B984D5B2841 {pppProtocol_t protocol;};
struct $029C14C2128B1475759967EB9FDC7B4A {struct in_addr in_prefix_addr;unsigned int in_prefix_len;};
struct $03B9D2AB7EC31E7B5953C0F06C8B7AA9 {t_uscalar_t dl_qos_type;t_scalar_t dl_rcv_throughput;t_scalar_t dl_rcv_trans_delay;t_scalar_t dl_xmt_throughput;t_scalar_t dl_xmt_trans_delay;t_scalar_t dl_priority;t_scalar_t dl_protection;t_scalar_t dl_residual_error;dl_resilience_t dl_resilience;};
enum $03CC775CEF2B1D596517FD882262439F {DMA_OTYP_VADDR = 0x0,DMA_OTYP_PAGES = 0x1,DMA_OTYP_PADDR = 0x2,};
enum $041E3D91F6E47CF820A5EC5BE234707E {SLP_LIFETIME_DEFAULT = 0x2A30,SLP_LIFETIME_MAXIMUM = 0xFFFF,};
struct $04DE162F931BF1138370E48C46D0BB8C {t_uscalar_t dl_primitive;t_uscalar_t dl_correlation;t_uscalar_t dl_status;};
struct $062E89D0DC7E46D06DD8F412839F5BDD {uint_t protocol;uchar_t papPeerIdLen;uchar_t papPeerId[255];uchar_t papPasswdLen;uchar_t papPasswd[255];};
enum $062E8AE2261C719812C59BB6BEB13941 {FN_SYNTAX_STANDARD_DIRECTION_FLAT = 0x0,FN_SYNTAX_STANDARD_DIRECTION_LTR = 0x1,FN_SYNTAX_STANDARD_DIRECTION_RTL = 0x2,};
struct $066FE788D2AC1D75EE490E561209D556 {int cmd;int reserved[4];};
struct $06CAB5296C39900A9CE51DBF4F560AD6 {int val[2];};
struct $06F14C8D328ECA5949F7DFEA2A047922 {uint_t dmao_size;ddi_dma_atyp_t dmao_type;ddi_dma_aobj_t dmao_obj;};
enum $0975BDD6F157BDBA4D69597495967F12 {LclTypeDisplay = 0x0,LclTypeInComingStream = 0x1,LclTypeOutGoingStream = 0x2,LclTypeFile = 0x3,LclTypeApp = 0x4,LclTypeOther = 0x5,};
enum $09E8BCDC574BDBEF68A1C2F08AD7DBBF {TNFCTL_BUF_OK = 0x0,TNFCTL_BUF_NONE = 0x1,TNFCTL_BUF_BROKEN = 0x2,};
struct $0A0885A099C43036865B53B70EA12DCA {char *ar_name;time_t ar_date;uid_t ar_uid;gid_t ar_gid;mode_t ar_mode;off_t ar_size;char *ar_rawname;};
struct $0A17130E4CE82B668D029EC1E9F64ADD {unsigned int format;size_t length;void *contents;};
struct $0C787AC3F519F07F1A30A3F49C54BEF6 {uint_t yp_buf_len;char *yp_buf_val;};
enum $0C8CCBCA03C364CB9C340F4C94668308 {_PC_EUC = 0x0,_PC_DENSE = 0x1,_PC_UCS4 = 0x2,};
struct $0F2B39C4889BFBA0BBC9C66D38A1F5D3 {Elf32_Word sh_name;Elf32_Word sh_type;Elf32_Word sh_flags;Elf32_Addr sh_addr;Elf32_Off sh_offset;Elf32_Word sh_size;Elf32_Word sh_link;Elf32_Word sh_info;Elf32_Word sh_addralign;Elf32_Word sh_entsize;};
struct $0F6DEF3B8E99612FFBC8A726FE9B31C3 {size_t length;void *contents;};
struct $1095822099D52E0E523F071FF4F33828 {t_scalar_t dl_target_value;t_scalar_t dl_accept_value;};
struct $1186758DF1720BB7F25A7D498E851913 {caddr_t lc_wchan0;caddr_t lc_wchan;};
struct $12883A0710B467FBB4742064A9BE69DF {Elf32_Word vda_name;Elf32_Word vda_next;};
enum $1323AA4975EEFDF9DDFDA31CD873A283 {NSS_SUCCESS = 0x0,NSS_NOTFOUND = 0x1,NSS_UNAVAIL = 0x2,NSS_TRYAGAIN = 0x3,NSS_NISSERVDNS_TRYAGAIN = 0x4,};
struct $13471B52BA0ED10EDFBC0B01A6831312 {enum fp_class_type fpclass;int sign;int exponent;decimal_string ds;int more;int ndigits;};
enum $13C394361E9AC5CA038584373CF0D1BD {TNF_ERR_NONE = 0x0,TNF_ERR_NOTTNF = 0x400,TNF_ERR_BADDATUM = 0x401,TNF_ERR_TYPEMISMATCH = 0x402,TNF_ERR_BADINDEX = 0x403,TNF_ERR_BADSLOT = 0x404,TNF_ERR_BADREFTYPE = 0x405,TNF_ERR_ALLOCFAIL = 0x406,TNF_ERR_BADTNF = 0x407,TNF_ERR_INTERNAL = 0x408,};
struct $13EF98051BCCC3A7BE0C6290BDC374BA {uint_t message;pppProtocol_t protocol;};
struct $140052591CB0062D1DDFF0A358260292 {t_uscalar_t dl_primitive;t_uscalar_t dl_max_sdu;t_uscalar_t dl_min_sdu;t_uscalar_t dl_addr_length;t_uscalar_t dl_mac_type;t_uscalar_t dl_reserved;t_uscalar_t dl_current_state;t_scalar_t dl_sap_length;t_uscalar_t dl_service_mode;t_uscalar_t dl_qos_length;t_uscalar_t dl_qos_offset;t_uscalar_t dl_qos_range_length;t_uscalar_t dl_qos_range_offset;t_uscalar_t dl_provider_style;t_uscalar_t dl_addr_offset;t_uscalar_t dl_version;t_uscalar_t dl_brdcst_addr_length;t_uscalar_t dl_brdcst_addr_offset;t_uscalar_t dl_growth;};
enum $14C8EF536CF000E9A9D5F5EF83AA29EC {LMB_PENDING = 0x0,LMB_BLOCKED = 0x1,LMB_GRANTED = 0x2,};
struct $151922ADF64B06A7DAF3138A8711D7E7 {t_uscalar_t dl_primitive;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;t_uscalar_t dl_src_addr_length;t_uscalar_t dl_src_addr_offset;t_uscalar_t dl_priority;t_uscalar_t dl_service_class;};
struct $160641F2D897670075418D2E6B733231 {unsigned __int8 e_ident[16];Elf32_Half e_type;Elf32_Half e_machine;Elf32_Word e_version;Elf32_Addr e_entry;Elf32_Off e_phoff;Elf32_Off e_shoff;Elf32_Word e_flags;Elf32_Half e_ehsize;Elf32_Half e_phentsize;Elf32_Half e_phnum;Elf32_Half e_shentsize;Elf32_Half e_shnum;Elf32_Half e_shstrndx;};
enum $16117E4F5BF7AAA0A2A7EB6F15A0B87C {_LC_TAG_UNDEF = 0x0,_LC_TAG_TRANS = 0x1,_LC_TAG_CCLASS = 0x2,};
struct $16D4A1559E041DBB68E7A1F4F9CBF232 {int pi_state;char pi_processor_type[16];char pi_fputypes[32];int pi_clock;};
enum $176E06A90436C16DD1EC2E1A345EFA40 {RD_ERR = 0x0,RD_OK = 0x1,RD_NOCAPAB = 0x2,RD_DBERR = 0x3,RD_NOBASE = 0x4,RD_NODYNAM = 0x5,RD_NOMAPS = 0x6,};
struct $17DB385B90B304C8609CE6820D4849CB {kstat_named_t cache_hit;kstat_named_t cache_miss;kstat_named_t active_pages;kstat_named_t cached_pages;kstat_named_t purge_count;};
struct $187C6244C967198C5905B382B0BFB5FB {t_uscalar_t dl_primitive;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;dl_priority_t dl_priority;};
enum $18F4D073277E58FDDB2C169A72F1FC3C {PCTX_NULL_EVENT = 0x0,PCTX_SYSC_EXEC_EVENT = 0x1,PCTX_SYSC_FORK_EVENT = 0x2,PCTX_SYSC_EXIT_EVENT = 0x3,PCTX_SYSC_LWP_CREATE_EVENT = 0x4,PCTX_INIT_LWP_EVENT = 0x5,PCTX_FINI_LWP_EVENT = 0x6,PCTX_SYSC_LWP_EXIT_EVENT = 0x7,};
struct $192236FE3311D06A1856619BA2C00C00 {LayoutId name;LayoutValue value;};
struct $19DEE1C64F7EC3DDB040A3404BEC0D9F {u_int utmp_array_len;rusers_utmp *utmp_array_val;};
struct $19E1246DE095363392431173B011D54A {uint_t msg;enum ipd_iftype iftype;uint_t ifunit;struct sockaddr sa;struct timeval timeout;struct timeval act_time;};
struct $1C7EDB14D495611F6D5B778EE61996F1 {t_uscalar_t dl_primitive;t_uscalar_t dl_correlation;t_uscalar_t dl_resp_token;t_uscalar_t dl_qos_length;t_uscalar_t dl_qos_offset;t_uscalar_t dl_growth;};
struct $1E4540432FE6FCBAA14615B1753B1498 {t_uscalar_t dl_qos_type;t_scalar_t dl_trans_delay;t_scalar_t dl_priority;t_scalar_t dl_protection;t_scalar_t dl_residual_error;};
struct $1F097835C705A71A99785C5F8D94F01C {t_uscalar_t dl_primitive;t_uscalar_t dl_level;};
struct $1FF34CFEF9C2EB17EF4167068BB24E21 {t_uscalar_t dl_primitive;t_uscalar_t dl_correlation;t_uscalar_t dl_src_addr_length;t_uscalar_t dl_src_addr_offset;};
struct $2051B98100A0C61393C608F0D7B8F621 {t_uscalar_t dl_primitive;t_uscalar_t dl_token;};
struct $20B967FD53182EA0ACEED1B6ABCFD823 {t_uscalar_t dl_primitive;t_uscalar_t dl_subs_sap_offset;t_uscalar_t dl_subs_sap_length;};
struct $211BFD783D8D84C3D8E218C4E6F77865 {int (*door_create)();int (*door_revoke)();int (*door_info)();int (*door_cred)();int (*door_call)();int (*door_return)();};
struct $21B5ADE7931223AA804E41EE15A82D4B {unsigned int re_mask;unsigned int re_flags;unsigned __int8 re_fsize;unsigned __int8 re_bshift;unsigned __int8 re_sigbits;};
enum $23CD138AFBA10A16D770AC92A674B7D9 {AP_COND_UNKNOWN = 0x0,AP_COND_OK = 0x1,AP_COND_FAILING = 0x2,AP_COND_FAILED = 0x3,AP_COND_UNUSABLE = 0x4,};
struct $250291EC3BC74262394306E05299BF94 {seg_skiplist *ssls[4];};
struct $2533481BB5519C9B22079276CD47D0A2 {int pmin;int pmax;int smin;int smax;};
struct $256FEEFA99C080BE07F3A81A96D4694C {__int16 _eucw1;__int16 _eucw2;__int16 _eucw3;__int16 _scrw1;__int16 _scrw2;__int16 _scrw3;__int16 _pcw;char _multibyte;};
struct $26B314697E7266AC176F51890C474785 {uchar_t nothing;};
enum $27EF52B7EDF945EB8F92BA945907B559 {LclTypeOneway = 0x0,LclTypeBothway = 0x1,};
enum $29D01D9311FDD83E67B17289D334DF0B {FC_TYPE_UNCATEGORIZED = 0x0,FC_TYPE_DATA = 0x1,FC_TYPE_UNSOL_CONTROL = 0x2,FC_TYPE_SOLICITED_CONTROL = 0x3,FC_TYPE_UNSOL_DATA = 0x4,FC_TYPE_XFER_RDY = 0x5,FC_TYPE_COMMAND = 0x6,FC_TYPE_RESPONSE = 0x7,};
struct $2A4C46EAAE865C05377B30846399D3D1 {Elf32_Lword m_value;Elf32_Word m_info;Elf32_Word m_poffset;Elf32_Half m_repeat;Elf32_Half m_stride;};
enum $2A9D6F0D138547ECB8E62D5BF66B49C5 {CFGA_OK = 0x0,CFGA_NACK = 0x1,CFGA_NOTSUPP = 0x2,CFGA_OPNOTSUPP = 0x3,CFGA_PRIV = 0x4,CFGA_BUSY = 0x5,CFGA_SYSTEM_BUSY = 0x6,CFGA_DATA_ERROR = 0x7,CFGA_LIB_ERROR = 0x8,CFGA_NO_LIB = 0x9,CFGA_INSUFFICENT_CONDITION = 0xA,CFGA_INVAL = 0xB,CFGA_ERROR = 0xC,CFGA_APID_NOEXIST = 0xD,CFGA_ATTR_INVAL = 0xE,};
enum $2C30E1479128C3D76FE2B7FD5491F04B {FN_SUCCESS = 0x1,FN_E_LINK_ERROR = 0x2,FN_E_CONFIGURATION_ERROR = 0x3,FN_E_NAME_NOT_FOUND = 0x4,FN_E_NOT_A_CONTEXT = 0x5,FN_E_LINK_LOOP_LIMIT = 0x6,FN_E_MALFORMED_LINK = 0x7,FN_E_ILLEGAL_NAME = 0x8,FN_E_CTX_NO_PERMISSION = 0x9,FN_E_NAME_IN_USE = 0xA,FN_E_OPERATION_NOT_SUPPORTED = 0xB,FN_E_COMMUNICATION_FAILURE = 0xC,FN_E_CTX_UNAVAILABLE = 0xD,FN_E_NO_SUPPORTED_ADDRESS = 0xE,FN_E_MALFORMED_REFERENCE = 0xF,FN_E_AUTHENTICATION_FAILURE = 0x10,FN_E_INSUFFICIENT_RESOURCES = 0x11,FN_E_CTX_NOT_EMPTY = 0x12,FN_E_NO_SUCH_ATTRIBUTE = 0x13,FN_E_INVALID_ATTR_IDENTIFIER = 0x14,FN_E_INVALID_ATTR_VALUE = 0x15,FN_E_TOO_MANY_ATTR_VALUES = 0x16,FN_E_ATTR_VALUE_REQUIRED = 0x17,FN_E_ATTR_NO_PERMISSION = 0x18,FN_E_PARTIAL_RESULT = 0x19,FN_E_INVALID_ENUM_HANDLE = 0x1A,FN_E_SYNTAX_NOT_SUPPORTED = 0x1B,FN_E_INVALID_SYNTAX_ATTRS = 0x1C,FN_E_INCOMPATIBLE_CODE_SETS = 0x1D,FN_E_CONTINUE = 0x1E,FN_E_UNSPECIFIED_ERROR = 0x1F,FN_E_NO_EQUIVALENT_NAME = 0x20,FN_E_ATTR_IN_USE = 0x21,FN_E_SEARCH_INVALID_FILTER = 0x22,FN_E_SEARCH_INVALID_OP = 0x23,FN_E_SEARCH_INVALID_OPTION = 0x24,FN_E_INCOMPATIBLE_LOCALES = 0x25,};
struct $2D2DEA9E8B1723DA9627F35ADE64BFFE {t_uscalar_t dl_qos_type;dl_transdelay_t dl_trans_delay;dl_priority_t dl_priority;dl_protect_t dl_protection;t_scalar_t dl_residual_error;};
struct $2ED74837B10F4575EAFC3A6A8D0E8399 {__int16 nmethods;__int16 ndefined;_LC_methods_func_t methods[1];};
enum $2FA655DF3B517FACB7949C2D644DAB43 {rpc_gss_svc_default = 0x0,rpc_gss_svc_none = 0x1,rpc_gss_svc_integrity = 0x2,rpc_gss_svc_privacy = 0x3,};
struct $2FC37C12F50461D7B99376C23209E757 {Elf64_Half si_boundto;Elf64_Half si_flags;};
struct $2FF20837F70D0E9E2C94D4E9C91813B8 {uint_t version;char *mechanism;char *qop;rpc_gss_principal_t client_principal;char *svc_principal;rpc_gss_service_t service;};
struct $318570FC7384B19A4DCAD3D835569F28 {t_scalar_t dl_min;t_scalar_t dl_max;};
enum $3186EC298029A051CEE1BF271F72D5DD {LctNUnused = 0x0,LctNSourceType = 0x1,LctNSourceForm = 0x2,LctNKeepReference = 0x3,LctNMsgText = 0x4,LctNPlainText = 0x5,LctNTaggedText = 0x6,LctNSeparatedTaggedText = 0x7,LctNSourceUnknown = 0x8,LctNKeepByValue = 0x9,LctNKeepByReference = 0xA,LctNDisplayForm = 0xB,LctNInComingStreamForm = 0xC,LctNOutGoingStreamForm = 0xD,LctNOutGoingStreamForm_V3 = 0xE,LctNOutGoingStreamForm_V3_Attach = 0xF,LctNFileForm = 0x10,LctNAppForm = 0x11,LctNPrintForm = 0x12,LctNUnknownForm = 0x13,LctNHeaderCharset = 0x14,LctNHeaderCharsetList = 0x15,LctNHeaderPossibleCharsetList = 0x16,LctNHeaderSegment = 0x17,LctNHeaderEncoding = 0x18,LctNHeaderCharsetEncoding = 0x19,LctNBodyCharset = 0x1A,LctNBodyCharsetList = 0x1B,LctNBodyPossibleCharsetList = 0x1C,LctNBodySegment = 0x1D,LctNBodyEncoding = 0x1E,LctNBodyCharsetEncoding = 0x1F,LctNTaggedTextCharset = 0x20,LctNTaggedTextCharsetList = 0x21,LctNTaggedTextPossibleCharsetList = 0x22,LctNTaggedTextSegment = 0x23,LctNTaggedTextEncoding = 0x24,LctNPlainTextCharset = 0x25,LctNPlainTextCharsetList = 0x26,LctNPlainTextPossibleCharsetList = 0x27,LctNPlainTextSegment = 0x28,LctNPlainTextEncoding = 0x29,LctNMailType = 0x2A,LctNAddHeader = 0x2B,LctNContentOfHeaderSegment = 0x2C,LctNBodyCharsetMailName = 0x2D,LctNContentOfTaggedTextSegment = 0x2E,LctNQuerySourceType = 0x2F,LclNVaNextedList = 0x30,};
struct $31AE19E04776D95D90F1AA36D4709208 {int media_type;int outputdest;int tracelevel;int debuglevel;int ifid;};
struct $31DC1A9A30C8BE83503485AFF4563DAB {unsigned __int8 e_ident[16];Elf64_Half e_type;Elf64_Half e_machine;Elf64_Word e_version;Elf64_Addr e_entry;Elf64_Off e_phoff;Elf64_Off e_shoff;Elf64_Word e_flags;Elf64_Half e_ehsize;Elf64_Half e_phentsize;Elf64_Half e_phnum;Elf64_Half e_shentsize;Elf64_Half e_shnum;Elf64_Half e_shstrndx;};
struct $3242DF98F1AD6AB2AF4D4F9FD3432406 {__int16 nmethods;__int16 ndefined;wctype_t (*wctype)(_LC_ctype_t *, const char *);int (*iswctype)(_LC_ctype_t *, wchar_t, wctype_t);wint_t (*towupper)(_LC_ctype_t *, wint_t);wint_t (*towlower)(_LC_ctype_t *, wint_t);wchar_t (*_trwctype)(_LC_ctype_t *, wchar_t, int);wctrans_t (*wctrans)(_LC_ctype_t *, const char *);wint_t (*towctrans)(_LC_ctype_t *, wint_t, wctrans_t);_LC_methods_func_t placeholders[5];};
struct $32C08F122C9B6B5AD3095757A88A96E6 {t_uscalar_t dl_primitive;t_uscalar_t dl_addr_length;t_uscalar_t dl_addr_offset;};
enum $34D0A9496006982FFAE833C372B85A0C {RD_NOSTATE = 0x0,RD_CONSISTENT = 0x1,RD_ADD = 0x2,RD_DELETE = 0x3,};
enum $354CCF684609FF657B26F0F4A65DC75F {ISDN_PATH_NOCHANGE = 0x0,ISDN_PATH_DISCONNECT = 0x1,ISDN_PATH_ONEWAY = 0x2,ISDN_PATH_TWOWAY = 0x3,};
enum $370C3B42DAEBA43C9084EF8E4345E8A7 {FN_SEARCH_ONE_CONTEXT = 0x0,FN_SEARCH_NAMED_OBJECT = 0x1,FN_SEARCH_SUBTREE = 0x2,FN_SEARCH_CONSTRAINED_SUBTREE = 0x3,};
struct $3747F54EBF0E40BCD04B6F28DE7EFCF2 {t_uscalar_t dl_primitive;t_uscalar_t dl_reason;t_uscalar_t dl_correlation;};
enum $37901662FEBD63C2ABBFAC806A9B9F40 {PM_SYSTEM_PM_ENABLED = 0x0,PM_SYSTEM_PM_DISABLED = 0x1,PM_NO_PM_COMPONENTS = 0x2,PM_CREATE_COMPONENTS = 0x3,PM_AUTOPM = 0x4,PM_DEFAULT_THRESHOLD = 0x5,PM_DEVICE_THRESHOLD = 0x6,PM_COMPONENT_THRESHOLD = 0x7,PM_OLD_THRESHOLD = 0x8,PM_DIRECTLY_MANAGED = 0x9,};
enum $3797F07133CAA59E79BE5E41B8631F21 {TNF_UNKNOWN = 0x0,TNF_INT32 = 0x1,TNF_UINT32 = 0x2,TNF_INT64 = 0x3,TNF_UINT64 = 0x4,TNF_FLOAT32 = 0x5,TNF_FLOAT64 = 0x6,TNF_STRING = 0x7,TNF_ARRAY = 0x8,TNF_STRUCT = 0x9,TNF_OPAQUE = 0xA,};
struct $37DC3B712C7ED020EE15F9E8AA85032C {int32_t tcp_pipe;tcp_seq tcp_fack;tcp_seq tcp_sack_snxt;int32_t tcp_max_sack_blk;int32_t tcp_num_sack_blk;sack_blk_t tcp_sack_list[5];int32_t tcp_num_notsack_blk;uint32_t tcp_cnt_notsack_list;notsack_blk_t *tcp_notsack_list;};
enum $38ED0C2ADD2BD878794BFE6293F393A9 {CV_DEFAULT = 0x0,CV_DRIVER = 0x1,};
enum $39FEE29CB19F6AB95D833477CB3CFB16 {FC_CLASS_OUTBOUND = 0x0,FC_CLASS_INBOUND = 0x1,FC_CLASS_SIMPLE = 0x2,FC_CLASS_IO_WRITE = 0x3,FC_CLASS_IO_READ = 0x4,FC_CLASS_OFFLINE = 0x5,FC_CLASS_UNSOLICITED = 0x6,};
struct $3A667C09CA9B6E1FC0A4AC3D89CABEC7 {ushort_t pppLinkControlIndex;uchar_t pppLinkMaxRestarts;uint_t pppLinkRestartTimerValue;uint_t pppLinkMediaType;uint_t pppLinkAllowMRU;uint_t pppLinkAllowHdrComp;uint_t pppLinkAllowPAComp;uint_t pppLinkAllowACC;uint_t pppLinkAllowAddr;uint_t pppLinkAllowAuth;uint_t pppLinkAllowQual;uint_t pppLinkAllowMagic;uint_t pppLinkLocalMRU;uint_t pppLinkRemoteMRU;uint_t pppLinkLocalACCMap;ipaddr_t pppIPLocalAddr;ipaddr_t pppIPRemoteAddr;uint_t pppLinkMaxLoopCount;clock_t pppLinkMaxNoFlagTime;};
struct $3BD9E21EDFC7EA3B12DCBE973656A8B8 {_LC_object_t hdr;_LC_collate_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_collate_t *user_api;_LC_methods_collate_t *native_api;void *data;};
union $3C540F5A14E02DF258E6208309F9E315 {volatile struct $3C540F5A14E02DF258E6208309F9E315::$DCB49AB78C587BA8794D1A369764EF9D r;volatile struct $3C540F5A14E02DF258E6208309F9E315::$BA6BFB51A1B47E4DD1A444CD784794AC n;};
struct $3C540F5A14E02DF258E6208309F9E315::$BA6BFB51A1B47E4DD1A444CD784794AC {unsigned int sts;unsigned int intr;unsigned int pio;unsigned int tst_mode;unsigned __int32 : 32;unsigned __int32 : 32;unsigned __int32 : 32;unsigned __int32 : 32;unsigned __int32 cmdqp : 32;unsigned __int32 intrqp : 32;};
struct $3C540F5A14E02DF258E6208309F9E315::$DCB49AB78C587BA8794D1A369764EF9D {unsigned int reg0;unsigned int reg1;unsigned int reg2;unsigned int reg3;unsigned __int32 : 32;unsigned __int32 : 32;unsigned __int32 : 32;unsigned __int32 : 32;unsigned __int32 reg8 : 32;unsigned __int32 reg9 : 32;};
union $3C8E0388BDDD5F7551C53EF0F32B4233 {unsigned int ba_val;void *ba_ptr;};
enum $3C9CBA2A05837AB5EE7067EF57B45517 {MDB_TYPE_STRING = 0x0,MDB_TYPE_IMMEDIATE = 0x1,MDB_TYPE_CHAR = 0x2,};
struct $3CF515CC911B8F03DF4F355C5ACD22AD {void *result;char *buffer;int buflen;};
enum $3EACBFB1F6A69D9CA6E99CE3BA7C8589 {res_goahead = 0x0,res_nextns = 0x1,res_modified = 0x2,res_done = 0x3,res_error = 0x4,};
enum $3EC23EC6F0FDADF0EEC41EBD5A8B52ED {PM_SCHEDULE = 0x0,PM_GET_IDLE_TIME = 0x1,PM_GET_NUM_CMPTS = 0x2,PM_GET_THRESHOLD = 0x3,PM_SET_THRESHOLD = 0x4,PM_GET_NORM_PWR = 0x5,PM_SET_CUR_PWR = 0x6,PM_GET_CUR_PWR = 0x7,PM_GET_NUM_DEPS = 0x8,PM_GET_DEP = 0x9,PM_ADD_DEP = 0xA,PM_REM_DEP = 0xB,PM_REM_DEVICE = 0xC,PM_REM_DEVICES = 0xD,PM_REPARSE_PM_PROPS = 0xE,PM_DISABLE_AUTOPM = 0xF,PM_REENABLE_AUTOPM = 0x10,PM_SET_NORM_PWR = 0x11,PM_SET_DEVICE_THRESHOLD = 0x12,PM_GET_SYSTEM_THRESHOLD = 0x13,PM_SET_SYSTEM_THRESHOLD = 0x14,PM_START_PM = 0x15,PM_STOP_PM = 0x16,PM_RESET_PM = 0x17,PM_GET_STATS = 0x18,PM_GET_DEVICE_THRESHOLD = 0x19,PM_GET_POWER_NAME = 0x1A,PM_GET_POWER_LEVELS = 0x1B,PM_GET_NUM_COMPONENTS = 0x1C,PM_GET_COMPONENT_NAME = 0x1D,PM_GET_NUM_POWER_LEVELS = 0x1E,PM_GET_STATE_CHANGE = 0x1F,PM_GET_STATE_CHANGE_WAIT = 0x20,PM_DIRECT_PM = 0x21,PM_RELEASE_DIRECT_PM = 0x22,PM_DIRECT_NOTIFY = 0x23,PM_DIRECT_NOTIFY_WAIT = 0x24,PM_RESET_DEVICE_THRESHOLD = 0x25,PM_GET_PM_STATE = 0x26,PM_GET_DEVICE_TYPE = 0x27,PM_SET_COMPONENT_THRESHOLDS = 0x28,PM_GET_COMPONENT_THRESHOLDS = 0x29,PM_IDLE_DOWN = 0x2A,PM_GET_DEVICE_THRESHOLD_BASIS = 0x2B,PM_SET_CURRENT_POWER = 0x2C,PM_GET_CURRENT_POWER = 0x2D,PM_GET_FULL_POWER = 0x2E,PM_ADD_DEPENDENT = 0x2F,PM_GET_TIME_IDLE = 0x30,PM_GET_DEFAULT_SYSTEM_THRESHOLD = 0x31,};
enum $3F61DD0375CBC1F37C02B00929A813F6 {DDI_PROP_CMD_GET_ESIZE = 0x0,DDI_PROP_CMD_GET_DSIZE = 0x1,DDI_PROP_CMD_DECODE = 0x2,DDI_PROP_CMD_ENCODE = 0x3,DDI_PROP_CMD_SKIP = 0x4,};
enum $3F8C702D250B5DC330EA07867C0DE268 {LclContentUnknown = 0x0,LclContentText = 0x1,LclContentBinary = 0x2,};
enum $401A9802811826260D9AA8000BA0BB75 {ELF_K_NONE = 0x0,ELF_K_AR = 0x1,ELF_K_COFF = 0x2,ELF_K_ELF = 0x3,ELF_K_NUM = 0x4,};
enum $414A75941736CF17FAE8ED5C32E2DBBB {EO_NONE = 0x0,EO_GROUP = 0x1,EO_ITEM = 0x2,};
struct $4205C709627503FCC3E7DAAF0DB99385 {_LC_object_t hdr;_LC_messages_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_messages_t *user_api;_LC_methods_messages_t *native_api;void *data;};
enum $43B36F08FB889DFA872E3981C7EFED93 {SLP_LAST_CALL = 0x1,SLP_OK = 0x0,SLP_LANGUAGE_NOT_SUPPORTED = 0xFFFFFFFF,SLP_PARSE_ERROR = 0xFFFFFFFE,SLP_INVALID_REGISTRATION = 0xFFFFFFFD,SLP_SCOPE_NOT_SUPPORTED = 0xFFFFFFFC,SLP_AUTHENTICATION_ABSENT = 0xFFFFFFFA,SLP_AUTHENTICATION_FAILED = 0xFFFFFFF9,SLP_INVALID_UPDATE = 0xFFFFFFF3,SLP_NOT_IMPLEMENTED = 0xFFFFFFEF,SLP_BUFFER_OVERFLOW = 0xFFFFFFEE,SLP_NETWORK_TIMED_OUT = 0xFFFFFFED,SLP_NETWORK_INIT_FAILED = 0xFFFFFFEC,SLP_MEMORY_ALLOC_FAILED = 0xFFFFFFEB,SLP_PARAMETER_BAD = 0xFFFFFFEA,SLP_NETWORK_ERROR = 0xFFFFFFE9,SLP_INTERNAL_SYSTEM_ERROR = 0xFFFFFFE8,SLP_HANDLE_IN_USE = 0xFFFFFFE7,SLP_TYPE_ERROR = 0xFFFFFFE6,SLP_SECURITY_UNAVAILABLE = 0xFFFFFF80,};
enum $43D49273C3852A9CF5015CF659B9A833 {TNFCTL_EVENT_EINTR = 0x0,TNFCTL_EVENT_TARGGONE = 0x1,TNFCTL_EVENT_DLOPEN = 0x2,TNFCTL_EVENT_DLCLOSE = 0x3,TNFCTL_EVENT_EXEC = 0x4,TNFCTL_EVENT_FORK = 0x5,TNFCTL_EVENT_EXIT = 0x6,};
struct $43F9318D896FF98D6032380AA4C8DE55 {unsigned int obj_id;unsigned __int32 : 16;unsigned __int32 subencid : 8;unsigned __int32 elem_type : 8;};
enum $45009653CDC2001856F06EFDA9E04C5E {DDI_CTLOPS_DMAPMAPC = 0x0,DDI_CTLOPS_INITCHILD = 0x1,DDI_CTLOPS_UNINITCHILD = 0x2,DDI_CTLOPS_REPORTDEV = 0x3,DDI_CTLOPS_REPORTINT = 0x4,DDI_CTLOPS_REGSIZE = 0x5,DDI_CTLOPS_NREGS = 0x6,DDI_CTLOPS_NINTRS = 0x7,DDI_CTLOPS_SIDDEV = 0x8,DDI_CTLOPS_SLAVEONLY = 0x9,DDI_CTLOPS_AFFINITY = 0xA,DDI_CTLOPS_IOMIN = 0xB,DDI_CTLOPS_PTOB = 0xC,DDI_CTLOPS_BTOP = 0xD,DDI_CTLOPS_BTOPR = 0xE,DDI_CTLOPS_POKE_INIT = 0xF,DDI_CTLOPS_POKE_FLUSH = 0x10,DDI_CTLOPS_POKE_FINI = 0x11,DDI_CTLOPS_INTR_HILEVEL = 0x12,DDI_CTLOPS_XLATE_INTRS = 0x13,DDI_CTLOPS_DVMAPAGESIZE = 0x14,DDI_CTLOPS_POWER = 0x15,DDI_CTLOPS_ATTACH = 0x16,DDI_CTLOPS_DETACH = 0x17,};
struct $458B8F1C203FF7E73654EA82F46BE387 {__int16 nmethods;__int16 ndefined;char *(*nl_langinfo)(_LC_monetary_t *, nl_item);ssize_t (*strfmon)(_LC_monetary_t *, char *, size_t, const char *, va_list);_LC_methods_func_t placeholders[5];};
struct $45AA4025EE1954AFBFB3DA359E0D02DB {__int16 nmethods;__int16 ndefined;char *(*nl_langinfo)(_LC_messages_t *, nl_item);_LC_methods_func_t placeholders[5];};
struct $45D3B8D1F0A0E1A15D8490524663D915 {struct netconfig **nc_head;struct netconfig **nc_curr;};
struct $45D578D1CAA1736E8819435F592D8C84 {uint_t msg;enum ipd_iftype iftype;uint_t ifunit;};
struct $4664B325D7B1C568276997F8FB024EC2 {Elf64_Addr r_offset;Elf64_Xword r_info;Elf64_Sxword r_addend;};
struct $4675A006519F4470174748AEB7610016 {t_scalar_t dl_disc_prob;t_scalar_t dl_reset_prob;};
struct $4788A0C65CEF1424AE2DE816674E1913 {Elf32_Word p_type;Elf32_Off p_offset;Elf32_Addr p_vaddr;Elf32_Addr p_paddr;Elf32_Word p_filesz;Elf32_Word p_memsz;Elf32_Word p_flags;Elf32_Word p_align;};
enum $4889CC838EABD4A4DF267BE559C2BCD8 {ISDN_PARAM_NONE = 0x0,ISDN_PARAM_NT_T101 = 0x1,ISDN_PARAM_NT_T102 = 0x2,ISDN_PARAM_TE_T103 = 0x3,ISDN_PARAM_TE_T104 = 0x4,ISDN_PARAM_end_of_timers = 0x63,ISDN_PARAM_MAINT = 0x64,ISDN_PARAM_ASMB = 0x65,ISDN_PARAM_POWER = 0x66,ISDN_PARAM_PAUSE = 0x67,ISDN_PARAM_vendor = 0x3E8,};
struct $488DA2D57F3DEC7D8F8D2973FF098AA5 {int front;int back;};
struct $490D5F12417668765212E4CF5D599182 {uint_t ppp_message;uint_t code;uint_t errlen;uchar_t errdata[255];};
struct $4965EEC990952D9E46AE6A5DEA6146E6 {Elf32_Sword eb_tag;union $4965EEC990952D9E46AE6A5DEA6146E6::$6E85EC2AA6609A2A5C09ADACFEBAAD54 eb_un;};
union $4965EEC990952D9E46AE6A5DEA6146E6::$6E85EC2AA6609A2A5C09ADACFEBAAD54 {Elf32_Word eb_val;Elf32_Addr eb_ptr;Elf32_Off eb_off;};
struct $4DAB4BE26238A65C4840EC4623134811 {uint_t db_next_desc_len;char *db_next_desc_val;};
struct $4DE03E8ED1D3CAFD22EDD6A1211D4CC8 {_LC_object_t hdr;_LC_time_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_time_t *user_api;_LC_methods_time_t *native_api;void *data;};
enum $4E1F7E6004833A901F098B2E39E9859C {FN_STRING_CASE_INSENSITIVE = 0x0,FN_STRING_CASE_SENSITIVE = 0x1,};
struct $4F7711BDAF281951A6E73987538C1D62 {char *dmap_devname;char *dmap_devtype;char *dmap_devlist;};
struct $4F78B3A32EAF514EACC363DCB345C490 {hme_ioc_hdr_t hdr;int mode;int speed;};
struct $501B9B174B09982FAB310FE6A591F791 {uint_t ppa;uint_t cmd;uchar_t sap;ushort_t con;llc_con_parms_t parms;};
struct $50A8F2CBF9209E81C59E0189B8E8717A {const char *ce_sym;_LC_weight_t ce_wgt;};
enum $5215702A02A06E3D32B9006B2E703D72 {FN_SPI_SINGLE_COMPONENT = 0x1,FN_SPI_MULTIPLE_COMPONENT = 0x2,};
struct $52996A3AC8C68F1BEA5587A21EB91746 {t_uscalar_t dl_primitive;t_uscalar_t dl_qos_length;t_uscalar_t dl_qos_offset;};
union $5396904C4F40B9D23631641FAE141A5A {struct $5396904C4F40B9D23631641FAE141A5A::$EE37C16298BD5C3A4BE5EB624F81227B f;struct $5396904C4F40B9D23631641FAE141A5A::$D98A3E97B5AFC2C9BD51B1758E1EE0CE code_cmdi;struct dbri_code_sbri code_sbri;struct $5396904C4F40B9D23631641FAE141A5A::$01B336851ED8000991E8C2192EBE3996 code_fxdt;struct dbri_code_chil code_chil;struct dbri_code_rex code_rex;uint32_t word;};
struct $5396904C4F40B9D23631641FAE141A5A::$01B336851ED8000991E8C2192EBE3996 {unsigned __int32 : 12;unsigned __int32 changed_data : 20;};
struct $5396904C4F40B9D23631641FAE141A5A::$D98A3E97B5AFC2C9BD51B1758E1EE0CE {unsigned __int32 : 12;unsigned __int32 opcode : 4;unsigned __int32 value : 16;};
struct $5396904C4F40B9D23631641FAE141A5A::$EE37C16298BD5C3A4BE5EB624F81227B {unsigned __int32 ibits : 2;unsigned __int32 channel : 6;unsigned __int32 code : 4;unsigned __int32 field : 20;};
struct $53F0EB4E985DBC87B1B2326D8BF9D556 {Elf64_Xword d_tag;union $53F0EB4E985DBC87B1B2326D8BF9D556::$933121F4FA1889599F702E16603DBB9F d_un;};
union $53F0EB4E985DBC87B1B2326D8BF9D556::$933121F4FA1889599F702E16603DBB9F {Elf64_Xword d_val;Elf64_Addr d_ptr;};
struct $54EC9098503BC20AC050B3CB62F30CBC {t_uscalar_t dl_primitive;};
struct $551C78EEC93CDF0108C003355B4DC50B {t_uscalar_t dl_primitive;t_uscalar_t dl_flag;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;t_uscalar_t dl_src_addr_length;t_uscalar_t dl_src_addr_offset;};
enum $5558F65A0FB6A68FD1548EA96864D077 {FN_DESCRIPTION_MINIMAL = 0x0,FN_DESCRIPTION_COMPLETE = 0xA,};
struct $56A66AEB305BDFFF6669B4BC9F04D8CC {t_uscalar_t dl_primitive;t_uscalar_t dl_stat_length;t_uscalar_t dl_stat_offset;};
enum $57BAE6CEF194EFB5132205D2FB8A3C5F {FN_ID_STRING = 0x0,FN_ID_DCE_UUID = 0x1,FN_ID_ISO_OID_STRING = 0x2,};
struct $57D8EEF26067F90BF74ECA27AA5A03F5 {int a_type;union $57D8EEF26067F90BF74ECA27AA5A03F5::$9E371396825061504C3ADBBA51EB32E4 a_un;};
union $57D8EEF26067F90BF74ECA27AA5A03F5::$9E371396825061504C3ADBBA51EB32E4 {int a_val;void *a_ptr;void (*a_fcn)();};
struct $57DBDB9F9E69733D408CC307EF34A958 {unsigned int __sigbits[4];};
struct $58179321A8150557048736423AF6F76C {_LC_object_t hdr;_LC_locale_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_locale_t *user_api;_LC_methods_locale_t *native_api;void *data;};
struct $596FCBE93D83B7A9B9C02E2997D81DA7 {struct termio *attr;int baud;int speed;char *line;char *telno;int modem;char *device;int dev_len;};
struct $59C2F8BE822F39E0857CE77037A0F7B3 {Elf64_Xword eb_tag;union $59C2F8BE822F39E0857CE77037A0F7B3::$8DBE08BFF46A6256412FDD0D3B09651A eb_un;};
union $59C2F8BE822F39E0857CE77037A0F7B3::$8DBE08BFF46A6256412FDD0D3B09651A {Elf64_Xword eb_val;Elf64_Addr eb_ptr;Elf64_Off eb_off;};
struct $5A96F9ADF207CF237355020FDA0EFEF5 {uchar_t enctype;uchar_t subenclosure;unsigned __int16 svalid : 1;unsigned __int16 priv : 15;uchar_t encstat[4];};
struct $5A986AD36714D9EA4A4C301E327B6C4C {t_uscalar_t dl_primitive;t_uscalar_t dl_originator;t_uscalar_t dl_reason;};
enum $5B09411ABF7AF89741BC688D36351F9B {RW_WRITER = 0x0,RW_READER = 0x1,};
enum $5CAC3459AD204328D83E0EB10D8F388D {LM_UP = 0x0,LM_SHUTTING_DOWN = 0x1,LM_DOWN = 0x2,};
struct $5D176D33403591159BBBEF445356E214 {unsigned int __sigbits[2];};
enum $5DF0ED3184972A3C527030570D523F44 {FN_OP_SUPERCEDE = 0x0,FN_OP_EXCLUSIVE = 0x1,};
struct $5F20F5A0DF59391F86268A875D1DFCE5 {t_uscalar_t dl_primitive;t_uscalar_t dl_subs_sap_offset;t_uscalar_t dl_subs_sap_length;t_uscalar_t dl_subs_bind_class;};
struct $5F450950E4D1D1BEF117F0FECB7D4E7F {t_uscalar_t dl_primitive;t_uscalar_t dl_addr_type;};
struct $5F5854608C3B35F56B7E671DFC3D4679 {t_uscalar_t dl_primitive;t_uscalar_t dl_flag;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;};
struct $5F8D13B29616A56F84BD15B89191A8F7 {const char *name;unsigned int mask;};
union $5FF073EC236C3BFF212C817E6EDD9CDF {struct $5FF073EC236C3BFF212C817E6EDD9CDF::$9FDBFB16591870EEECD4F897E60320A7 idu;uint_t idev_softint;};
struct $5FF073EC236C3BFF212C817E6EDD9CDF::$9FDBFB16591870EEECD4F897E60320A7 {ushort_t _idev_vector;ushort_t _idev_priority;};
struct $601AB9009B78F952A53B6D0C69238ED9 {LctNEAttribute attribute;unsigned int error_code;void *detail;};
struct $60F784A34F5D801B175C2936E7100D6B {uint_t msg;enum ipd_iftype iftype;uint_t ifunit;struct sockaddr sa;uint_t error;};
struct $61B607A2274ED5109A268B0B2173104D {Elf64_Word p_type;Elf64_Word p_flags;Elf64_Off p_offset;Elf64_Addr p_vaddr;Elf64_Addr p_paddr;Elf64_Xword p_filesz;Elf64_Xword p_memsz;Elf64_Xword p_align;};
enum $628604CA069736C17E916A575687F61F {ISDN_LOOPBACK_B1 = 0x1,ISDN_LOOPBACK_B2 = 0x2,ISDN_LOOPBACK_D = 0x4,ISDN_LOOPBACK_E_ZERO = 0x8,ISDN_LOOPBACK_S = 0x10,ISDN_LOOPBACK_Q = 0x20,};
struct $631FA0442200650F637355090EEC1282 {_LC_object_t hdr;_LC_monetary_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_monetary_t *user_api;_LC_methods_monetary_t *native_api;void *data;};
enum $635420CA75E4368650FCB176130922B4 {SEMA_DEFAULT = 0x0,SEMA_DRIVER = 0x1,};
struct $647FE789D073DDA1115A25D9160A600C {_LC_weight_t ss_act;const char *ss_src;const char *ss_tgt;};
enum $65CF98EECFB69F691B0631C04FBFD9D4 {TD_ALL_EVENTS = 0x0,TD_EVENT_NONE = 0x0,TD_READY = 0x1,TD_SLEEP = 0x2,TD_SWITCHTO = 0x3,TD_SWITCHFROM = 0x4,TD_LOCK_TRY = 0x5,TD_CATCHSIG = 0x6,TD_IDLE = 0x7,TD_CREATE = 0x8,TD_DEATH = 0x9,TD_PREEMPT = 0xA,TD_PRI_INHERIT = 0xB,TD_REAP = 0xC,TD_CONCURRENCY = 0xD,TD_TIMEOUT = 0xE,TD_MIN_EVENT_NUM = 0x1,TD_MAX_EVENT_NUM = 0xE,TD_EVENTS_ENABLE = 0x1F,};
struct $6601AD8F8068B3BD81BCD4072DAC7812 {t_uscalar_t dl_primitive;t_uscalar_t dl_resp_addr_length;t_uscalar_t dl_resp_addr_offset;t_uscalar_t dl_qos_length;t_uscalar_t dl_qos_offset;t_uscalar_t dl_growth;};
struct $66B76CCBD7517A35749D93819776E291 {lagreg_t lr_esp;lagreg_t lr_ebp;};
enum $67B0C970003978024F26F3A7D9A4CAE6 {FN_STRING_INDEX_NONE = 0xFFFFFFFF,FN_STRING_INDEX_FIRST = 0x0,FN_STRING_INDEX_LAST = 0x7FFFFFFF,};
struct $68E4A9C261F68D94E3C41D4B3B334942 {Elf32_Sword d_tag;union $68E4A9C261F68D94E3C41D4B3B334942::$B21EF9EB666022D3B04E309DD56686B1 d_un;};
union $68E4A9C261F68D94E3C41D4B3B334942::$B21EF9EB666022D3B04E309DD56686B1 {Elf32_Word d_val;Elf32_Addr d_ptr;Elf32_Off d_off;};
struct $69B63B591732E05C41D6CC17B4FA972F {ulong_t probenum;int enabled;int traced;int attrsize;};
struct $6C157D281FCCF3AD18E5920BAFADC6E6 {Elf64_Word sh_name;Elf64_Word sh_type;Elf64_Xword sh_flags;Elf64_Addr sh_addr;Elf64_Off sh_offset;Elf64_Xword sh_size;Elf64_Word sh_link;Elf64_Word sh_info;Elf64_Xword sh_addralign;Elf64_Xword sh_entsize;};
enum $6C240A0F2C531038D6945D09C29C55E6 {DACF_OPID_ERROR = 0xFFFFFFFF,DACF_OPID_END = 0x0,DACF_OPID_POSTATTACH = 0x1,DACF_OPID_PREDETACH = 0x2,};
struct $6F34A6491CA243DAC3BD57A8740A9A28 {t_uscalar_t dl_primitive;t_uscalar_t dl_ppa;};
union $722BC7DC76932F8652A49C80584F2606 {struct $722BC7DC76932F8652A49C80584F2606::$437BBD4FFAE2830BB41C5AD6BD388D5E r;ushort_t word16[2];uint_t word32;};
struct $722BC7DC76932F8652A49C80584F2606::$437BBD4FFAE2830BB41C5AD6BD388D5E {unsigned __int8 om1 : 1;unsigned __int8 om0 : 1;unsigned __int8 lo : 6;unsigned __int8 : 1;unsigned __int8 sm : 1;unsigned __int8 ro : 6;unsigned __int8 pio : 2;unsigned __int8 ovr : 1;unsigned __int8 is : 1;unsigned __int8 lg : 4;unsigned __int8 ma : 4;unsigned __int8 rg : 4;};
struct $725E3ED3C7EFF3B90CE6F33C2B731462 {int llc_ack_timer;int llc_poll_timer;int llc_rej_timer;int llc_busy_timer;int llc_inac_timer;int llc_ackdelay_timer;int llc_l2_timer;int llc_rnr_limit_timer;int llc_ackdelay_max;int llc_maxretry;int llc_l2_maxretry;int llc_xmitwindow;int llc_flag;};
struct $734E31BBDA3A31A5E7F21845616A11EB {LayoutDesc inp;LayoutDesc out;};
struct $750EEDBB3ABCF24E6FC38F698DC1AE07 {const char *bindname;_LC_bind_tag_t bindtag;_LC_bind_value_t bindvalue;};
struct $75BAE6E6D7E8D7271432449CBE6780E8 {int (*softc_init)(ses_softc_t *, int);int (*init_enc)(ses_softc_t *);int (*get_encstat)(ses_softc_t *, int);int (*set_encstat)(ses_softc_t *, uchar_t, int);int (*get_objstat)(ses_softc_t *, ses_objarg *, int);int (*set_objstat)(ses_softc_t *, ses_objarg *, int);};
struct $75FD820D0CE6C215ACE04A8FAA270A6D {Elf64_Half vd_version;Elf64_Half vd_flags;Elf64_Half vd_ndx;Elf64_Half vd_cnt;Elf64_Word vd_hash;Elf64_Word vd_aux;Elf64_Word vd_next;};
enum $7763C6F5F90D633510BBD051BDA06E4F {TD_OK = 0x0,TD_ERR = 0x1,TD_NOTHR = 0x2,TD_NOSV = 0x3,TD_NOLWP = 0x4,TD_BADPH = 0x5,TD_BADTH = 0x6,TD_BADSH = 0x7,TD_BADTA = 0x8,TD_BADKEY = 0x9,TD_NOMSG = 0xA,TD_NOFPREGS = 0xB,TD_NOLIBTHREAD = 0xC,TD_NOEVENT = 0xD,TD_NOCAPAB = 0xE,TD_DBERR = 0xF,TD_NOAPLIC = 0x10,TD_NOTSD = 0x11,TD_MALLOC = 0x12,TD_PARTIALREG = 0x13,TD_NOXREGS = 0x14,};
enum $780B979F0B1070C2A1BEC9CE8B44076A {RD_RESOLVE_NONE = 0x0,RD_RESOLVE_STEP = 0x1,RD_RESOLVE_TARGET = 0x2,RD_RESOLVE_TARGET_STEP = 0x3,};
enum $7948EC45DEF305B61169931C8DCDB649 {FN_ATTR_OP_ADD = 0x1,FN_ATTR_OP_ADD_EXCLUSIVE = 0x2,FN_ATTR_OP_REMOVE = 0x3,FN_ATTR_OP_ADD_VALUES = 0x4,FN_ATTR_OP_REMOVE_VALUES = 0x5,};
struct $7963ED2253978A4E491ADF870F9A304B {Elf64_Word st_name;unsigned __int8 st_info;unsigned __int8 st_other;Elf64_Half st_shndx;Elf64_Addr st_value;Elf64_Xword st_size;};
struct $7A20DF675792E830F977E1284BC7C2E2 {ushort_t pppLinkErrorsIndex;ushort_t pppLinkLastUnknownProtocol;uint_t pppLinkBadAddresses;uint_t pppLinkBadControls;ushort_t pppLinkLastInvalidProtocol;uchar_t pppLinkLastBadControl;uchar_t pppLinkLastBadAddress;uint_t pppLinkInvalidProtocols;uint_t pppLinkUnknownProtocols;uint_t pppLinkPacketTooLongs;uint_t pppLinkPacketTooShorts;uint_t pppLinkHeaderTooShorts;uint_t pppLinkBadCRCs;uint_t pppLinkConfigTimeouts;uint_t pppLinkTerminateTimeouts;};
struct $7B7425BDB71A818A922A1DDC8B4A1BCA {const char *rm_sp;const char *rm_ep;regoff_t rm_so;regoff_t rm_eo;int rm_ss;int rm_es;};
struct $7B9922258B8A0A4B0B5326F3B4359CE8 {t_uscalar_t dl_primitive;t_uscalar_t dl_correlation;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;t_uscalar_t dl_src_addr_length;t_uscalar_t dl_src_addr_offset;t_uscalar_t dl_priority;t_uscalar_t dl_service_class;};
struct $7C2C393CADA02B1A2D153D5E661EE10D {uint_t msg;enum ipd_iftype iftype;uint_t ifunit;struct sockaddr sa;uint_t timeout;};
struct $7DF901F2330FED44ED065D8472D22EDC {struct $7DF901F2330FED44ED065D8472D22EDC::svc_auth_ops svc_ah_ops;caddr_t svc_ah_private;svc_rpc_gss_parms_t svc_gss_parms;rpc_gss_rawcred_t raw_cred;};
struct $7DF901F2330FED44ED065D8472D22EDC::svc_auth_ops {int (*svc_ah_wrap)();int (*svc_ah_unwrap)();};
struct $7E515F46519A2C03149F8E5448716EB7 {caddr_t who;int select;int level;caddr_t dependent;int size;};
enum $800308667964E9594463B69B6CCFCE10 {MUTEX_ADAPTIVE = 0x0,MUTEX_SPIN = 0x1,MUTEX_DRIVER = 0x4,MUTEX_DEFAULT = 0x6,};
struct $807D4AC2255C0A3001450ADEC11FD819 {uint_t ppp_message;pppProtocol_t protocol;};
union $8118FFB9EEB2C3E80F209039896F74EE {uint32_t fcode_i[12];uint16_t fcode_s[24];uint8_t fcode_c[48];};
enum $8183A1332CE171C30172CB4371E09D7E {FN_CTX_FUNC_EQUIVALENT_NAME = 0x0,FN_CTX_FUNC_GET_REF = 0x1,FN_CTX_FUNC_LOOKUP = 0x2,FN_CTX_FUNC_LIST_NAMES = 0x3,FN_CTX_FUNC_LIST_BINDINGS = 0x4,FN_CTX_FUNC_BIND = 0x5,FN_CTX_FUNC_UNBIND = 0x6,FN_CTX_FUNC_CREATE_SUBCONTEXT = 0x7,FN_CTX_FUNC_DESTROY_SUBCONTEXT = 0x8,FN_CTX_FUNC_RENAME = 0x9,FN_CTX_FUNC_GET_SYNTAX_ATTRS = 0xA,FN_CTX_FUNC_ATTR_GET = 0xB,FN_CTX_FUNC_ATTR_MODIFY = 0xC,FN_CTX_FUNC_ATTR_GET_VALUES = 0xD,FN_CTX_FUNC_ATTR_GET_IDS = 0xE,FN_CTX_FUNC_ATTR_MULTI_GET = 0xF,FN_CTX_FUNC_ATTR_MULTI_MODIFY = 0x10,FN_CTX_FUNC_ATTR_BIND = 0x11,FN_CTX_FUNC_ATTR_CREATE = 0x12,FN_CTX_FUNC_ATTR_SEARCH = 0x13,FN_CTX_FUNC_ATTR_EXT_SEARCH = 0x14,};
enum $81EF3FA8C4370F96570BE58B85740C0E {CFGA_COND_UNKNOWN = 0x0,CFGA_COND_OK = 0x1,CFGA_COND_FAILING = 0x2,CFGA_COND_FAILED = 0x3,CFGA_COND_UNUSABLE = 0x4,};
struct $82C0C6D790EF9405DE6F913108BCAA59 {const char *name;unsigned int index;wchar_t tmin;wchar_t tmax;};
struct $85563A71CF7457DF5AD2FDE8FB997EAF {unsigned int word[4];};
struct $859BFE8FBA42C54E9900208E6ECF19F7 {__int16 nmethods;__int16 ndefined;char *(*nl_langinfo)(_LC_charmap_t *, nl_item);int (*mbtowc)(_LC_charmap_t *, wchar_t *, const char *, size_t);size_t (*mbstowcs)(_LC_charmap_t *, wchar_t *, const char *, size_t);int (*wctomb)(_LC_charmap_t *, char *, wchar_t);size_t (*wcstombs)(_LC_charmap_t *, char *, const wchar_t *, size_t);int (*mblen)(_LC_charmap_t *, const char *, size_t);int (*wcswidth)(_LC_charmap_t *, const wchar_t *, size_t);int (*wcwidth)(_LC_charmap_t *, wchar_t);int (*mbftowc)(_LC_charmap_t *, char *, wchar_t *, int (*)(void), int *);wint_t (*__fgetwc_xpg5)(_LC_charmap_t *, FILE *);wint_t (*btowc)(_LC_charmap_t *, int);int (*wctob)(_LC_charmap_t *, wint_t);int (*mbsinit)(_LC_charmap_t *, const mbstate_t *);size_t (*mbrlen)(_LC_charmap_t *, const char *, size_t, mbstate_t *);size_t (*mbrtowc)(_LC_charmap_t *, wchar_t *, const char *, size_t, mbstate_t *);size_t (*wcrtomb)(_LC_charmap_t *, char *, wchar_t, mbstate_t *);size_t (*mbsrtowcs)(_LC_charmap_t *, wchar_t *, const char **, size_t, mbstate_t *);size_t (*wcsrtombs)(_LC_charmap_t *, char *, const wchar_t **, size_t, mbstate_t *);_LC_methods_func_t placeholders[5];};
enum $85FDB0E6998635E870FE0A8BC4B4C3FB {FC_TRANSPORT_SUCCESS = 0x0,FC_TRANSPORT_FAILURE = 0x1,FC_TRANSPORT_TIMEOUT = 0x2,FC_TRANSPORT_QFULL = 0x3,FC_TRANSPORT_UNAVAIL = 0x4,};
enum $866CF79549BA537B648330022140BDBC {AP_OSTATE_UNCONFIGURED = 0x0,AP_OSTATE_CONFIGURED = 0x1,};
struct $8716BC3DCA46F0A7F3673119A555C1D4 {char euc_bytelen0;char euc_bytelen1;char euc_bytelen2;char euc_bytelen3;char euc_scrlen0;char euc_scrlen1;char euc_scrlen2;char euc_scrlen3;wchar_t cs1_base;wchar_t cs2_base;wchar_t cs3_base;wchar_t dense_end;wchar_t cs1_adjustment;wchar_t cs2_adjustment;wchar_t cs3_adjustment;};
enum $8724F201D2476C5A27302B0C46EAD9DC {RD_NONE = 0x0,RD_PREINIT = 0x1,RD_POSTINIT = 0x2,RD_DLACTIVITY = 0x3,};
struct $8730B17123942F667165FE26F5FCD7CE {enum $8730B17123942F667165FE26F5FCD7CE::$3DDB4C346819B22BEDB9C12A4C6CC876 buffer_state;int buffer_size;int trace_stopped;int pidfilter_mode;int pidfilter_size;};
enum $8730B17123942F667165FE26F5FCD7CE::$3DDB4C346819B22BEDB9C12A4C6CC876 {TIFIOCBUF_NONE = 0x0,TIFIOCBUF_UNINIT = 0x1,TIFIOCBUF_OK = 0x2,TIFIOCBUF_BROKEN = 0x3,};
enum $88495A355BB3E6D41AADF572D3BFAE21 {ELF_T_BYTE = 0x0,ELF_T_ADDR = 0x1,ELF_T_DYN = 0x2,ELF_T_EHDR = 0x3,ELF_T_HALF = 0x4,ELF_T_OFF = 0x5,ELF_T_PHDR = 0x6,ELF_T_RELA = 0x7,ELF_T_REL = 0x8,ELF_T_SHDR = 0x9,ELF_T_SWORD = 0xA,ELF_T_SYM = 0xB,ELF_T_WORD = 0xC,ELF_T_VDEF = 0xD,ELF_T_VNEED = 0xE,ELF_T_SXWORD = 0xF,ELF_T_XWORD = 0x10,ELF_T_NUM = 0x11,};
struct $885C04ED232DA6939269E5648CBB0F98 {ushort_t pppAuthControlIndex;ushort_t pppAuthTypeLocal;ushort_t pppAuthTypeRemote;};
enum $89FB60EA18EC68E58342D0F505790FD5 {TD_THR_ANY_TYPE = 0x0,TD_THR_USER = 0x1,TD_THR_SYSTEM = 0x2,};
struct $8A43A92A61C1A96F5CE7557D3343944D {uint32_t state[4];uint32_t count[2];union $8A43A92A61C1A96F5CE7557D3343944D::$0586161EA22616021F7885215C69F5CE buf_un;};
union $8A43A92A61C1A96F5CE7557D3343944D::$0586161EA22616021F7885215C69F5CE {uint8_t buf8[64];uint32_t buf32[16];};
struct $8A4D2DD0535D3740C9D9302B62B9E8F3 {Elf32_Word n_namesz;Elf32_Word n_descsz;Elf32_Word n_type;};
struct $8A57A83BA984F7959D9E22CB0CD4E5F7 {uint_t ppa;uint_t cmd;uint_t data1;uint_t data2;ushort_t buf[256];};
enum $8A69B4244D68C55526C7E67A1302CC04 {CYS_ONLINE = 0x0,CYS_OFFLINE = 0x1,CYS_EXPANDING = 0x2,CYS_REMOVING = 0x3,CYS_SUSPENDED = 0x4,};
struct $8B85712FB09FAAC9E4FCB41A89281044 {unsigned int word[16];};
struct $8D40ACCAC6057C8589735CF1D51B872E {Elf64_Lword m_value;Elf64_Xword m_info;Elf64_Xword m_poffset;Elf64_Half m_repeat;Elf64_Half m_stride;};
struct $8E17CB6E332B6DCEA38208AF631FD83A {int nalloc;int nfree;int nalloc_calls;int nfree_calls;};
enum $8E5B18BDA15BCA983D757F24B1D87563 {FN_SPI_STATIC_BOUNDARY = 0x1,FN_SPI_DYNAMIC_BOUNDARY = 0x2,};
union $8E64F109147703DFED6209FCF9267D5F {offset_t _f;struct $8E64F109147703DFED6209FCF9267D5F::$A5946D7F0FF7E1FB159B888C46BEDC44 _p;};
struct $8E64F109147703DFED6209FCF9267D5F::$A5946D7F0FF7E1FB159B888C46BEDC44 {int32_t _u;int32_t _l;};
struct $9243195F0116F1DC43EDD9D2343B9004 {uint_t msg;enum ipd_iftype iftype;uint_t ifunit;struct sockaddr sa;t_uscalar_t reason;};
struct $92C2B677F4D6F16C081E111A1354037E {char *as_name;size_t as_off;unsigned int as_hash;};
enum $92D8A10D5D3318494FF31390A6A19662 {PS_OK = 0x0,PS_ERR = 0x1,PS_BADPID = 0x2,PS_BADLID = 0x3,PS_BADADDR = 0x4,PS_NOSYM = 0x5,PS_NOFREGS = 0x6,};
struct $94B6D2E03277F36A7EAC6FE7B7D6A054 {uint_t program;uint_t version;bool_t (*callback)();};
struct $96509CB31A3C50C1F728CA63BB4787CF {int num;char **charset;};
enum $96510381DCBEEC9773C8F1EFD3180D16 {DDI_NC_PROM = 0x0,DDI_NC_PSEUDO = 0x1,};
struct $979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
enum $980FA8BDE1FB627A165EC34D5A62F01B {LclUnKnownEncoding = 0x0,LclBase64Encoding = 0x1,LclQPEncoding = 0x2,Lcl822Encoding = 0x3,};
struct $987A4977B64401F127AD4A87403FCD8A {char *str;int length;};
enum $99AB38EF265AA84A0F6A323035284FBD {TNF_K_UNKNOWN = 0x0,TNF_K_SCALAR = 0x1,TNF_K_CHAR = 0x2,TNF_K_INT8 = 0x3,TNF_K_INT16 = 0x4,TNF_K_INT32 = 0x5,TNF_K_UINT8 = 0x6,TNF_K_UINT16 = 0x7,TNF_K_UINT32 = 0x8,TNF_K_INT64 = 0x9,TNF_K_UINT64 = 0xA,TNF_K_FLOAT32 = 0xB,TNF_K_FLOAT64 = 0xC,TNF_K_ARRAY = 0xD,TNF_K_STRING = 0xE,TNF_K_STRUCT = 0xF,TNF_K_TYPE = 0x10,};
union $9A6DBE2689E4D78A6CC46A56A422909E {struct $9A6DBE2689E4D78A6CC46A56A422909E::$B189DDDFA0FB48CFB28663AECD3BBC94 r;ushort_t word16[4];uint_t word32[2];};
struct $9A6DBE2689E4D78A6CC46A56A422909E::$B189DDDFA0FB48CFB28663AECD3BBC94 {unsigned __int8 : 3;unsigned __int8 mb : 1;unsigned __int8 vs1 : 1;unsigned __int8 dcb : 1;unsigned __int8 sre : 1;unsigned __int8 vs0 : 1;unsigned __int8 hpf : 1;unsigned __int8 : 1;unsigned __int8 dfr : 3;unsigned __int8 st : 1;unsigned __int8 df : 2;unsigned __int8 : 2;unsigned __int8 mck : 2;unsigned __int8 bsel : 2;unsigned __int8 xclk : 1;unsigned __int8 xen : 1;unsigned __int8 : 6;unsigned __int8 enl : 1;unsigned __int8 adl : 1;unsigned __int8 pio : 2;unsigned __int8 : 6;unsigned __int8 : 8;unsigned __int8 manufacturer : 4;unsigned __int8 revision : 4;unsigned __int8 : 8;};
struct $9CAE931C1CBD273987054BC4D502AAC2 {callb_cpr_t *(*cb_callback)(void *);void *cb_cbp;};
enum $9DF241986813CBC10D66CF006F720785 {STAB_SUCCESS = 0x0,STAB_FAIL = 0xFFFFFFFF,STAB_NA = 0xFFFFFFFE,STAB_NOMEM = 0xFFFFFFFD,};
struct $9FB80FD2F500D2E1F9F0E3DE3EE0B629 {unsigned int direction;unsigned int string_case;FN_string_t *component_separator;FN_string_t *begin_quote;FN_string_t *end_quote;FN_string_t *begin_quote2;FN_string_t *end_quote2;FN_string_t *escape;FN_string_t *type_separator;FN_string_t *ava_separator;FN_attr_syntax_locales_t *locales;};
struct $A0565235DB0A025ED98270EC8F0003BF {Elf32_Half vd_version;Elf32_Half vd_flags;Elf32_Half vd_ndx;Elf32_Half vd_cnt;Elf32_Word vd_hash;Elf32_Word vd_aux;Elf32_Word vd_next;};
enum $A091DCDAEC8B8097B50B5275FBA122A0 {pppVer1 = 0x0,pppVer2 = 0x1,};
struct $A313ED2DE25BE046A874D492CFBD731F {Elf64_Addr r_offset;Elf64_Xword r_info;};
struct $A32966EE8414B065154C0C0FBC0CDA05 {_LC_object_t hdr;_LC_ctype_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_ctype_t *user_api;_LC_methods_ctype_t *native_api;void *data;};
struct $A426C1BFA60F897E08DB82510E56FD03 {uint_t ppa;uint_t cmd;uchar_t multicast[4][6];};
struct $A46BFD4B6B8C284ED478D587B5722CAB {Elf64_Word vna_hash;Elf64_Half vna_flags;Elf64_Half vna_other;Elf64_Word vna_name;Elf64_Word vna_next;};
struct $A4BEC33DC2CEF1EA6A21E2966A3DEECD {unsigned int xrs_id;caddr_t xrs_ptr;};
struct $A556726339174AF4A052C1DB3ED032E6 {__int16 r;__int16 g;__int16 b;};
enum $A6580FDE48616C23ADC769BAB4D07B11 {FLK_LOCKMGR_UP = 0x0,FLK_WAKEUP_SLEEPERS = 0x1,FLK_LOCKMGR_DOWN = 0x2,};
struct $A6F5D22C47870C9C34E13B26D36736E1 {unsigned __int32 id : 16;unsigned __int32 qr : 1;unsigned __int32 opcode : 4;unsigned __int32 aa : 1;unsigned __int32 tc : 1;unsigned __int32 rd : 1;unsigned __int32 ra : 1;unsigned __int32 unused : 1;unsigned __int32 ad : 1;unsigned __int32 cd : 1;unsigned __int32 rcode : 4;unsigned __int32 qdcount : 16;unsigned __int32 ancount : 16;unsigned __int32 nscount : 16;unsigned __int32 arcount : 16;};
struct $A74C68CDF7A8346DB4740D5AEB53B0D9 {papPasswdEntry_t passwd;};
enum $A959B596F4A4BFCA9FCF924B52F0DB35 {ISDN_LOOPBACK_LOCAL = 0x0,ISDN_LOOPBACK_REMOTE = 0x1,};
struct $A9BE18D8DE98772F097D505829E8B2F3 {t_uscalar_t dl_primitive;t_uscalar_t dl_correct_primitive;};
struct $AAC6986373C252F265E5EE15F2042600 {uchar_t pppPAPMessageLen;ushort_t pppPAPMessage[1];};
struct $AAECD496E21460385AB9540869BF9C78 {Elf32_Addr r_offset;Elf32_Word r_info;Elf32_Sword r_addend;};
enum $ABA88FFCF844ADB83559AF0FBF7F1E52 {DDI_INTR_CTLOPS_ALLOC_ISPEC = 0x0,DDI_INTR_CTLOPS_FREE_ISPEC = 0x1,DDI_INTR_CTLOPS_ADD = 0x2,DDI_INTR_CTLOPS_REMOVE = 0x3,DDI_INTR_CTLOPS_NINTRS = 0x4,DDI_INTR_CTLOPS_HILEVEL = 0x5,};
struct $AC1F0727205AA235F31FA7E4FBAB6931 {__int64 quot;__int64 rem;};
enum $AD2EB70E5A961F74EB9C4246C2983BC3 {CFGA_STAT_NONE = 0x0,CFGA_STAT_EMPTY = 0x1,CFGA_STAT_DISCONNECTED = 0x2,CFGA_STAT_CONNECTED = 0x3,CFGA_STAT_UNCONFIGURED = 0x4,CFGA_STAT_CONFIGURED = 0x5,};
struct $AD4457FAA5FAAE8991C949BB8D588EAD {t_uscalar_t dl_primitive;t_uscalar_t dl_sap;t_uscalar_t dl_addr_length;t_uscalar_t dl_addr_offset;t_uscalar_t dl_max_conind;t_uscalar_t dl_xidtest_flg;};
struct $AD898C726F4F86F79B78998236170483 {_LC_object_t hdr;_LC_numeric_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_numeric_t *user_api;_LC_methods_numeric_t *native_api;void *data;};
enum $AF097615159EB3CBDA82C5A5C14EBA11 {RT_CONSISTENT = 0x0,RT_ADD = 0x1,RT_DELETE = 0x2,};
struct $AF17FACC7559AA50C79D476A9538E1B7 {LclContentType type;LclCharsetList *charset_list;};
enum $AF741F3DDD464A30547A6EB63D463D95 {LMM_NONE = 0x0,LMM_REXMIT = 0x1,LMM_FULL = 0x2,LMM_PARTIAL = 0x3,};
struct $B089456DFBB446A2250D7264A8E39902 {char *segment;char *charset;size_t size;};
struct $B2F3592E62A4F6542AD886252093AD89 {char *from;char *to;};
enum $B41FB3A55F358278F5C27327EE531EB5 {FC_SLEEP = 0x0,FC_NOSLEEP = 0x1,};
enum $B4C1E64CFFB78309CC76463EAA797381 {DDI_PROP_RESULT_ERROR = 0xFFFFFFFE,DDI_PROP_RESULT_EOF = 0xFFFFFFFF,DDI_PROP_RESULT_OK = 0x0,};
enum $B4D4B12673F28533BE1E89CD44C7C9E5 {PSC_PENDING_CHANGE = 0x0,PSC_HAS_CHANGED = 0x1,};
union $B5B36604A4D7B91FFF9FA298D0BE592E {struct seg *list;seg_skiplist *skiplist;};
struct $B661844E4DD166A431053E2B2F63C927 {char *_sends;__int16 _keyval;};
enum $B8EA7248DE2247D155C7346AC11040D4 {CFGA_CMD_NONE = 0x0,CFGA_CMD_LOAD = 0x1,CFGA_CMD_UNLOAD = 0x2,CFGA_CMD_CONNECT = 0x3,CFGA_CMD_DISCONNECT = 0x4,CFGA_CMD_CONFIGURE = 0x5,CFGA_CMD_UNCONFIGURE = 0x6,};
struct $B9298FF2B0C5BA7708F912183DC0A181 {int *dst_addr;int start;int slots;};
struct $B9BBC47815B70F123F5B3D4C1D596CE1 {uint_t ppa;uint_t cmd;uint_t options;};
struct $BADA0C20D4FCFBDDC178EA94F25BDA19 {struct seg *segs[4];};
enum $BB6475131A51C96C40EE163F450A191D {_FC_EUC = 0x0,_FC_UTF8 = 0x1,_FC_OTHER = 0x2,};
enum $BD2A00A5EDFC2FF1400278A291F46E84 {pppDEVICE = 0x0,pppIP_PROTO = 0x21,pppOSI_PROTO = 0x23,pppXNS_PROTO = 0x25,pppDECNET_PROTO = 0x27,pppAPPLETALK_PROTO = 0x29,pppIPX_PROTO = 0x2B,pppVJ_COMP_TCP = 0x2D,pppVJ_UNCOMP_TCP = 0x2F,pppBRIDGING_PDU = 0x31,pppSTREAM_PROTO = 0x33,pppBANYAN_VINES = 0x35,ppp802_1D = 0x201,pppLUXCOM = 0x231,pppSIGMA = 0x232,pppIP_NCP = 0x8021,pppOSI_NCP = 0x8023,pppXNS_NCP = 0x8025,pppDECNET_NCP = 0x8027,pppAPPLETALK_NCP = 0x8029,pppIPX_NCP = 0x802B,pppBRIDGING_NCP = 0x8031,pppSTREAM_NCP = 0x8033,pppBANYAN_NCP = 0x8035,pppLCP = 0xC021,pppAuthPAP = 0xC023,pppLQM_REPORT = 0xC025,pppCHAP = 0xC223,};
struct $BD5CA20501DDBF4BA8A0F05A067801C0 {struct nss_getent_context *ctx;mutex_t lock;};
struct $BDA3EB51A42C3AF06EADB485CA225508 {uint_t msg;enum ipd_iftype iftype;uint_t ifunit;struct sockaddr sa;};
struct $BDBAD8C22C982B900870BBCDB0629DB6 {Elf_Void *d_buf;Elf_Type d_type;size_t d_size;off_t d_off;size_t d_align;unsigned int d_version;};
enum $C0126AC73A46DE8E745F9FEA17492D57 {RW_DRIVER = 0x2,RW_DEFAULT = 0x4,};
struct $C07A277B0B1F71E677259B025564A502 {enum fp_direction_type rd;enum decimal_form df;int ndigits;};
union $C43472A59D225774831BE4F95424A25C {struct $C43472A59D225774831BE4F95424A25C::$1FE8A4292B0E849E2B3091F413DEBC14 inf_parts;struct $C43472A59D225774831BE4F95424A25C::$1313F18EDDC5C67AE4E5880DFDCB3F19 nan_parts;double d;};
struct $C43472A59D225774831BE4F95424A25C::$1313F18EDDC5C67AE4E5880DFDCB3F19 {unsigned __int32 sign : 1;unsigned __int32 exponent : 11;unsigned __int32 qnan_bit : 1;unsigned __int32 bits : 19;unsigned __int32 fraction_low : 32;};
struct $C43472A59D225774831BE4F95424A25C::$1FE8A4292B0E849E2B3091F413DEBC14 {unsigned __int32 sign : 1;unsigned __int32 exponent : 11;unsigned __int32 bits : 20;unsigned __int32 fraction_low : 32;};
union $C57692D243E2F42291707545D24FC942 {int pi_pad[4];int pi_has_rmt;flk_callback_t pi_cback;};
struct $C5DA07C86C437AAC183EB88624185419 {mblk_t *t_iocpending;compat_state_t t_curstate;struct sgttyb t_new_sgttyb;struct tchars t_new_tchars;struct ltchars t_new_ltchars;int t_new_lflags;int t_state;int t_iocid;int t_ioccmd;bufcall_id_t t_bufcallid;intptr_t t_arg;};
struct $C772EEB8BDF2D9B03BC2113DCD14FF9B {Elf32_Addr r_offset;Elf32_Word r_info;};
struct $C8DBEC58A6C5CAB5E40652D978B29F79 {__int16 foreground;__int16 background;bool init;};
struct $C9224CB3878060960E30C62E95CBCE30 {uid_t uid;gid_t gid;__int16 gidlen;gid_t *gidlist;};
enum $C9268D8AE8F7D6801B05A9E10ADFAF15 {LclUnKnownFormat = 0x0,LclCsFormatASCII = 0x1,LclCsFormat7bit = 0x2,LclCsFormatISO9496 = 0x3,LclCsFormatISO94Ext = 0x4,LclCsFormatMBString = 0x5,};
struct $C9793B2A88A40550F3E6FCBE57C78800 {u_int sprayarr_len;char *sprayarr_val;};
struct $CA18D99C52BF47BA3661A7BE783B3F23 {Elf64_Word n_namesz;Elf64_Word n_descsz;Elf64_Word n_type;};
struct $CA21EB1FE968FC1A84C75EEC389382FF {int dbm_dirf;int dbm_pagf;int dbm_flags;int dbm_maxbno;int dbm_bitno;int dbm_hmask;int dbm_blkptr;int dbm_keyptr;int dbm_blkno;int dbm_pagbno;char dbm_pagbuf[1024];int dbm_dirbno;char dbm_dirbuf[4096];};
struct $CAD4AC390BD8237C223B7EC96D9848DF {uint_t msg;enum ipd_iftype iftype;uint_t ifunit;struct sockaddr sa;uint_t blacklisttime;};
struct $CB6AA1DC15048494E8DB562E85E5F184 {t_uscalar_t dl_primitive;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;t_uscalar_t dl_src_addr_length;t_uscalar_t dl_src_addr_offset;t_uscalar_t dl_group_address;};
enum $CC06B5739EA2B9882BCE8C0A287C133B {ISDN_TYPE_UNKNOWN = 0xFFFFFFFF,ISDN_TYPE_SELF = 0x0,ISDN_TYPE_OTHER = 0x1,ISDN_TYPE_TE = 0x2,ISDN_TYPE_NT = 0x3,ISDN_TYPE_PRI = 0x4,};
struct $CC222016AA0BB783D225EB3000BADEC7 {uchar_t ppa;uchar_t state;ushort_t adapterid;uchar_t bia[6];};
struct $CCC1A82A34D7085BB27B55F53CBFD610 {int jitter_thresh;int speed_law;int speed_limit;};
struct $CD160A28723B1B650FC96BC3CBBCB54B {t_uscalar_t dl_primitive;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;t_uscalar_t dl_unix_errno;t_uscalar_t dl_errno;};
enum $CDEA5F4E81121A9E1DEE9AC855E20971 {FC_STATE_ONLINE = 0x0,FC_STATE_OFFLINE = 0x1,FC_STATE_RESET = 0x2,};
enum $CE3E7AC5D93368FF00E554010E1E9915 {TNFCTL_TARG_DEFAULT = 0x0,TNFCTL_TARG_KILL = 0x1,TNFCTL_TARG_RESUME = 0x2,TNFCTL_TARG_SUSPEND = 0x3,};
struct $CE4930CE30C4A3FD577842D3323B273C {t_uscalar_t dl_primitive;t_uscalar_t dl_originator;t_uscalar_t dl_reason;t_uscalar_t dl_correlation;};
enum $CF2A9B67847DD7930A13E7F75B3AE6C8 {LclUnKnownType = 0x0,LclMIMEType = 0x1,LclV3Type = 0x2,Lcl822Type = 0x3,};
struct $D097637AB270BABD14B3012188BFE07C {t_uscalar_t dl_primitive;t_uscalar_t dl_sap;t_uscalar_t dl_max_conind;uint16_t dl_service_mode;uint16_t dl_conn_mgmt;t_uscalar_t dl_xidtest_flg;};
struct $D2112DACD5F28F06A12FA1BD43CEEAAF {int t_flags;char t_ispeed;char t_ospeed;char t_erase;char t_kill;char t_intrc;char t_quitc;char t_startc;char t_stopc;char t_eofc;char t_brkc;char t_suspc;char t_dsuspc;char t_rprntc;char t_flushc;char t_werasc;char t_lnextc;int t_xflags;};
struct $D27487023F7BC296C96A54641356F89B {char *dst_addr;int block_num;};
struct $D27F01C753CDB3D015D2AEBC850E5649 {__int16 nmethods;__int16 ndefined;int (*strcoll)(_LC_collate_t *, const char *, const char *);size_t (*strxfrm)(_LC_collate_t *, char *, const char *, size_t);int (*wcscoll)(_LC_collate_t *, const wchar_t *, const wchar_t *);size_t (*wcsxfrm)(_LC_collate_t *, wchar_t *, const wchar_t *, size_t);int (*fnmatch)(_LC_collate_t *, const char *, const char *, const char *, int);int (*regcomp)(_LC_collate_t *, regex_t *, const char *, int);size_t (*regerror)(_LC_collate_t *, int, const regex_t *, char *, size_t);int (*regexec)(_LC_collate_t *, const regex_t *, const char *, size_t, regmatch_t *, int);void (*regfree)(_LC_collate_t *, regex_t *);_LC_methods_func_t placeholders[5];};
struct $D30353D08B71B27BB4CD9334EB50A9EF {int num;LclCharsetSegment *seg;};
struct $D3341046612766E5971F0E9D3826E5FA {int req_flags;int time_req;gss_cred_id_t my_cred;gss_channel_bindings_t input_channel_bindings;};
struct $D34CDA88D8A7072F4DEA084B2AED3D31 {t_uscalar_t dl_primitive;t_uscalar_t dl_correlation;t_uscalar_t dl_called_addr_length;t_uscalar_t dl_called_addr_offset;t_uscalar_t dl_calling_addr_length;t_uscalar_t dl_calling_addr_offset;t_uscalar_t dl_qos_length;t_uscalar_t dl_qos_offset;t_uscalar_t dl_growth;};
struct $D379431B13F78A36F2202C5AA386190E {char *dptr;int dsize;};
struct $D38312C18728A251C58C258AA639B1E2 {int major_status;int minor_status;uint_t rpcsec_version;int ret_flags;int time_ret;gss_ctx_id_t gss_context;char actual_mechanism[128];};
struct $D4691ED55A662893A224D2D25A30EEEC {t_uscalar_t dl_primitive;t_uscalar_t dl_error_primitive;t_uscalar_t dl_errno;t_uscalar_t dl_unix_errno;};
enum $D4AB9A46DE65367CC0FF11AD6E77796A {TD_THR_ANY_STATE = 0x0,TD_THR_UNKNOWN = 0x1,TD_THR_STOPPED = 0x2,TD_THR_RUN = 0x3,TD_THR_ACTIVE = 0x4,TD_THR_ZOMBIE = 0x5,TD_THR_SLEEP = 0x6,TD_THR_STOPPED_ASLEEP = 0x7,};
struct $D52C4F604E0EF4858A4DDDAA58B8A08E {uint_t protocol;uchar_t chapPasswdLen;uchar_t chapPasswd[255];uchar_t chapNameLen;uchar_t chapName[255];};
struct $D53EBEF53D22F60B85DC57B7CC577C4D {char *da_devname;char *da_devtype;char *da_devmin;char *da_devmax;char *da_devauth;char *da_devexec;};
struct $D5A35B190B3B0D67D693D32BA15204C1 {unsigned int code_set;unsigned int lang_terr;};
enum $D5AA6F5ACB6BB33BF40F728DE6419DF2 {RD_NOTIFY_BPT = 0x0,RD_NOTIFY_AUTOBPT = 0x1,RD_NOTIFY_SYSCALL = 0x2,};
struct $D69C93AF57A4C706A087FFCB2A33F062 {uint_t obj_id;uchar_t cstat[4];};
enum $D6CA55EB07B097D421AB6298BB521718 {TNFCTL_ERR_NONE = 0x0,TNFCTL_ERR_ACCES = 0x1,TNFCTL_ERR_NOTARGET = 0x2,TNFCTL_ERR_ALLOCFAIL = 0x3,TNFCTL_ERR_INTERNAL = 0x4,TNFCTL_ERR_SIZETOOSMALL = 0x5,TNFCTL_ERR_SIZETOOBIG = 0x6,TNFCTL_ERR_BADARG = 0x7,TNFCTL_ERR_NOTDYNAMIC = 0x8,TNFCTL_ERR_NOLIBTNFPROBE = 0x9,TNFCTL_ERR_BUFBROKEN = 0xA,TNFCTL_ERR_BUFEXISTS = 0xB,TNFCTL_ERR_NOBUF = 0xC,TNFCTL_ERR_BADDEALLOC = 0xD,TNFCTL_ERR_NOPROCESS = 0xE,TNFCTL_ERR_FILENOTFOUND = 0xF,TNFCTL_ERR_BUSY = 0x10,TNFCTL_ERR_INVALIDPROBE = 0x11,TNFCTL_ERR_USR1 = 0x12,TNFCTL_ERR_USR2 = 0x13,TNFCTL_ERR_USR3 = 0x14,TNFCTL_ERR_USR4 = 0x15,TNFCTL_ERR_USR5 = 0x16,};
struct $D743D7FB93846D2A48423E379C4894F1 {__int16 nmethods;__int16 ndefined;char *(*nl_langinfo)(_LC_locale_t *, nl_item);struct lconv *(*localeconv)(_LC_locale_t *);_LC_methods_func_t placeholders[5];};
struct $D758E79311354DDC9AF0CC7E7C22CD10 {Elf64_Word vda_name;Elf64_Word vda_next;};
struct $D76263573A98FEFDCCEEF233874FDEC5 {ushort_t pppLinkStatusIndex;uchar_t pppLinkVersion;uchar_t pppLinkCurrentState;uchar_t pppLinkPreviousState;uchar_t pppLinkQuality;timestruc_t pppLinkChangeTime;uint_t pppLinkMagicNumber;uint_t pppLinkLocalQualityPeriod;uint_t pppLinkRemoteQualityPeriod;uchar_t pppLinkProtocolCompression;uchar_t pppLinkACCompression;uchar_t pppLinkMeasurementsValid;uchar_t pppLinkPhysical;};
enum $D7C0A176FE35DFEAAB524AEF710D9981 {PROP_LEN = 0x0,PROP_LEN_AND_VAL_BUF = 0x1,PROP_LEN_AND_VAL_ALLOC = 0x2,PROP_EXISTS = 0x3,};
struct $D8694504BF76A56B9D38A17C122FF30C {gregset_t gregs;gwindows_t *gwins;fpregset_t fpregs;xrs_t xrs;int filler[19];};
struct $D89EB48B0F107D6E39C0EF37AAFDA6FD {uint_t ppp_message;pppLinkControlEntry_t config;};
enum $D95391997311E3A4E8F102D727D6CEF7 {FDB_PAGEIO = 0x0,FDB_VADDR = 0x1,};
union $DBB18890394B8029ED37E44DCE2D8EED {struct v_address virt_obj;struct pp_address pp_obj;struct phy_address phys_obj;};
struct $DBDB4AF8E469679C3A4CD785AB502395 {Elf64_Half vn_version;Elf64_Half vn_cnt;Elf64_Word vn_file;Elf64_Word vn_aux;Elf64_Word vn_next;};
enum $DC3296B23F99D14FFD55E56129FBC05F {USB_PIPE_STATE_ACTIVE = 0x1,USB_PIPE_STATE_IDLE = 0x2,USB_PIPE_STATE_ERROR = 0x3,USB_PIPE_STATE_SYNC_CLOSING = 0x4,USB_PIPE_STATE_ASYNC_CLOSING = 0x5,};
struct $DDB9E5FBB16C40A976BC405025678C57 {Elf32_Half vn_version;Elf32_Half vn_cnt;Elf32_Word vn_file;Elf32_Word vn_aux;Elf32_Word vn_next;};
struct $E0B09092130FDFFEB4124EF1450B8417 {uint_t ppp_message;pppProtocol_t protocol;uchar_t data[1];};
enum $E1B461D6ADC649FA7943809455C6C6EE {NOTIFY_BPT = 0x0,NOTIFY_AUTOBPT = 0x1,NOTIFY_SYSCALL = 0x2,};
enum $E36DDC315EED95A07EBF18BE166BF116 {SES_TYPE = 0x0,SAFT_TYPE = 0x1,SEN_TYPE = 0x2,};
struct $E3ED4D72C7814978A91B05B99D56A6A2 {size_t re_nsub;void *re_comp;int re_cflags;size_t re_erroff;size_t re_len;struct _regex_ext_t *re_sc;};
enum $E5CD0A0A25838301AC0CDA8DDEB498DA {SLP_FALSE = 0x0,SLP_TRUE = 0x1,};
struct $E66DCE15917F5E19886463E233EC4453 {bool_t locked;rpc_gss_rawcred_t *raw_cred;};
struct $E714B4690DCD4CE2097239CD07373860 {Elf32_Word vna_hash;Elf32_Half vna_flags;Elf32_Half vna_other;Elf32_Word vna_name;Elf32_Word vna_next;};
enum $E739717CDB19454AC06785377AF9888B {ISDN_MODE_UNKNOWN = 0x0,ISDN_MODE_HDLC = 0x1,ISDN_MODE_TRANSPARENT = 0x2,};
struct $E7FD7F5919C5B86C45B84B2C205CAA78 {int mid;int sid;int tracelevel;int flags;};
struct $E89C0C6DA392559E0E24C2B68700633F {size_t num_locales;FN_attr_syntax_locale_info_t *locales;};
struct $E9AB0BCACA98F703B381F818839B97CB {int rpc_gss_error;int system_error;};
struct $E9B6FB84B21FB1468EF2F76864DA4C61 {__lc_type_id_t type_id;unsigned int magic;unsigned __int16 major_ver;unsigned __int16 minor_ver;size_t size;};
enum $EA75FB217E367D75530EC23DCD9FC6C8 {NSS_HOST = 0x0,NSS_SERV = 0x1,NETDIR_BY = 0x2,NETDIR_BY_NOSRV = 0x3,NETDIR_BY6 = 0x4,NETDIR_BY_NOSRV6 = 0x5,NSS_HOST6 = 0x6,};
enum $EAF20B011F47EDF33C1FCE09C227F824 {RD_FL_NONE = 0x0,RD_FL_ODBG = 0x1,RD_FL_DBG = 0x2,};
enum $EB79E54FE0EF018BB6845A2E0DAAE1E7 {AP_RSTATE_EMPTY = 0x0,AP_RSTATE_DISCONNECTED = 0x1,AP_RSTATE_CONNECTED = 0x2,};
struct $EB9CBE9F844ABCF9E9277596B691C0BF {dircache_t *dch_next;dircache_t *dch_prev;kmutex_t dch_lock;};
struct $ECD491B309C6C7D8FCBA014B12E7CF40 {t_uscalar_t dl_primitive;t_uscalar_t dl_dest_addr_length;t_uscalar_t dl_dest_addr_offset;t_uscalar_t dl_qos_length;t_uscalar_t dl_qos_offset;t_uscalar_t dl_growth;};
struct $ED04A3E3A2D9A6729338E838A059863A {ushort_t pppCPLinkNumber;uint_t pppCPRejects;uint_t pppCPInPackets;uint_t pppCPInOctets;uint_t pppCPOutPackets;uint_t pppCPOutOctets;uint_t pppCPOutCRs;uint_t pppCPInCRs;uint_t pppCPOutCAs;uint_t pppCPInCAs;uint_t pppCPOutCNs;uint_t pppCPInCNs;uint_t pppCPOutCRejs;uint_t pppCPInCRejs;uint_t pppCPOutTRs;uint_t pppCPInTRs;uint_t pppCPOutTAs;uint_t pppCPInTAs;uint_t pppCPOutCodeRejs;uint_t pppCPInCodeRejs;uint_t pppCPOutEchoReqs;uint_t pppCPInEchoReqs;uint_t pppCPOutEchoReps;uint_t pppCPInEchoReps;uint_t pppCPOutDiscReqs;uint_t pppCPInDiscReqs;};
enum $EDAFB8E8B9C907AF6E1D55EDA7356F26 {DDM_MINOR = 0x0,DDM_ALIAS = 0x1,DDM_DEFAULT = 0x2,DDM_INTERNAL_PATH = 0x3,};
enum $EDBA1914F16BC538415B0E0A3A3FD3BB {FIND = 0x0,ENTER = 0x1,};
union $EE75A551A8E099987506FD558A5F43CD {struct $EE75A551A8E099987506FD558A5F43CD::$E768FB53C124E6AD95EC19322F0DD4E9 _longs;struct $EE75A551A8E099987506FD558A5F43CD::$1221EBEE0BC5770066296252685AA853 _bytes;};
struct $EE75A551A8E099987506FD558A5F43CD::$1221EBEE0BC5770066296252685AA853 {uchar_t _byte0;uchar_t _byte1;uchar_t _byte2;uchar_t _byte3;uchar_t _byte4;uchar_t _byte5;uchar_t _byte6;uchar_t _byte7;};
struct $EE75A551A8E099987506FD558A5F43CD::$E768FB53C124E6AD95EC19322F0DD4E9 {uint32_t _long0;uint32_t _long1;};
struct $EF437A666C9BB0FC607366CF45CE1FC4 {kstat_named_t MADV_FREE_hit;kstat_named_t MADV_FREE_miss;};
struct $F0AAB1DC87F2E821A9EF19B3A8438CBF {ushort_t pppIPLinkNumber;uint_t pppIPRejects;uint_t pppIPInPackets;uint_t pppIPInOctets;uint_t pppIPOutPackets;uint_t pppIPOutOctets;uint_t pppIPInVJcomp;uint_t pppIPInVJuncomp;uint_t pppIPInIP;uint_t pppIPOutVJcomp;uint_t pppIPOutVJuncomp;uint_t pppIPOutIP;};
struct $F3D1899E2E37EFD927B28027A707AB99 {bool_t established;rpc_gss_service_t service;uint_t qop_rcvd;void *context;uint_t seq_num;};
struct $F4A087914CCBD8B8061D53356491AFE5 {_LC_object_t hdr;_LC_charmap_t *(*init)(_LC_locale_t *);int (*destructor)(_LC_locale_t *);_LC_methods_charmap_t *user_api;_LC_methods_charmap_t *native_api;wchar_t (*__eucpctowc)(_LC_charmap_t *, wchar_t);wchar_t (*__wctoeucpc)(_LC_charmap_t *, wchar_t);void *data;};
struct $F595FC0EEBF0E630CD599952C6884CED {t_uscalar_t dl_qos_type;dl_through_t dl_rcv_throughput;dl_transdelay_t dl_rcv_trans_delay;dl_through_t dl_xmt_throughput;dl_transdelay_t dl_xmt_trans_delay;dl_priority_t dl_priority;dl_protect_t dl_protection;t_scalar_t dl_residual_error;dl_resilience_t dl_resilience;};
enum $F5D0AC97B70F66A0B82E3660E1E74CD3 {B_FALSE = 0x0,B_TRUE = 0x1,};
struct $F5D530A8B9C8144C513F035766B8BD9F {Elf32_Word st_name;Elf32_Addr st_value;Elf32_Word st_size;unsigned __int8 st_info;unsigned __int8 st_other;Elf32_Half st_shndx;};
struct $F60D842CE7A78CACE989B630880B9FF2 {__int16 nmethods;__int16 ndefined;char *(*nl_langinfo)(_LC_numeric_t *, nl_item);_LC_methods_func_t placeholders[5];};
struct $F8793C5ADA5B1735862C612D8105FB3D {uint_t mactype;uint_t ppa;};
union $F99502BFD9E4DD069DB8AE6B087E28E4 {diskaddr_t _f;struct $F99502BFD9E4DD069DB8AE6B087E28E4::$A5946D7F0FF7E1FB159B888C46BEDC44 _p;};
struct $F99502BFD9E4DD069DB8AE6B087E28E4::$A5946D7F0FF7E1FB159B888C46BEDC44 {int32_t _u;int32_t _l;};
struct $F9CE4197C78490B9950BF1AD06D064B7 {union $F9CE4197C78490B9950BF1AD06D064B7::$51177246DB161340A18046D041E50857 _dmu;size_t dmac_size;uint_t dmac_type;};
union $F9CE4197C78490B9950BF1AD06D064B7::$51177246DB161340A18046D041E50857 {uint64_t _dmac_ll;uint32_t _dmac_la[2];};
enum $F9F9B8C8A8EFF8E21EF69F4C68E21A81 {FN_SPI_STRONG_SEPARATION = 0x1,FN_SPI_WEAK_SEPARATION = 0x2,};
struct $F9FB4C2AA908D131736A9D97993FD8DC {uchar_t macaddr[6];uchar_t multicast1[6];uchar_t multicast2[6];uchar_t multicast3[6];uchar_t multicast4[6];unsigned int novell;};
struct $FB115A149FF37A3EAB946997DD4E3A6C {uint32_t sem_count;uint16_t sem_type;uint16_t sem_magic;upad64_t sem_pad1[3];upad64_t sem_pad2[2];};
struct $FB71A6CB4CF311B023B9642DD77B0239 {int dd_fd;int dd_loc;int dd_size;char *dd_buf;};
struct $FC07BF6E13A3F29964B2741842A3FFCB {uint_t ppp_message;};
struct $FE43560485AD2DF497423A9D2646B91A {Elf32_Half si_boundto;Elf32_Half si_flags;};
enum $FE80D5111114141386C0BD10BAE533E0 {DDI_DEVMAP_VALIDATE = 0x0,};
struct $FF2DD7BE9DD2B738A1C99E37059CE979 {boolean_t copy;LclMailType mail_type;LctNEAttribute type;LctNEAttribute form;char *header;char *body;char *plaintext;char *taggedtext;char *buf;size_t buf_len;};
enum $FFCF33584F0C155BE85F0F30A00BD3E4 {FLK_NLM_UP = 0x0,FLK_NLM_SHUTTING_DOWN = 0x1,FLK_NLM_DOWN = 0x2,FLK_NLM_UNKNOWN = 0x3,};
struct ACCESS2args {fhandle_t fh;uint32 access;};
struct ACCESS2res {enum nfsstat status;union ACCESS2res::$7E87908D10127D23949DE19A8553FC52 res_u;};
union ACCESS2res::$7E87908D10127D23949DE19A8553FC52 {ACCESS2resok ok;};
struct ACCESS2resok {struct nfsfattr attr;uint32 access;};
struct ACCESS3args {nfs_fh3 object;uint32 access;};
struct ACCESS3res {nfsstat3 status;union ACCESS3res::$BCC91F14EA47E4565CA39B38A6B5ED84 res_u;};
union ACCESS3res::$BCC91F14EA47E4565CA39B38A6B5ED84 {ACCESS3resok ok;ACCESS3resfail fail;};
struct ACCESS3resfail {post_op_attr obj_attributes;};
struct ACCESS3resok {post_op_attr obj_attributes;uint32 access;};
typedef enum $EDBA1914F16BC538415B0E0A3A3FD3BB ACTION;
typedef uint AMI_STATUS;
typedef struct __auth AUTH;
typedef enum auth_stat AUTH_STAT;
typedef Elf32_Addr Addr;
typedef int BooleanValue;
typedef Elf32_Boot Boot;
typedef unsigned __int8 Byte;
typedef struct $596FCBE93D83B7A9B9C02E2997D81DA7 CALL;
typedef struct _menu_ CKMENU;
typedef struct __client CLIENT;
struct COMMIT3args {nfs_fh3 file;offset3 offset;count3 count;};
struct COMMIT3res {nfsstat3 status;union COMMIT3res::$7375445B622BC480C38364347647FC7B res_u;};
union COMMIT3res::$7375445B622BC480C38364347647FC7B {COMMIT3resok ok;COMMIT3resfail fail;};
struct COMMIT3resfail {wcc_data file_wcc;};
struct COMMIT3resok {wcc_data file_wcc;writeverf3 verf;};
struct CREATE3args {diropargs3 where;createhow3 how;};
struct CREATE3res {nfsstat3 status;union CREATE3res::$1344BCDC3351BD45A414A34C7BEA0F35 res_u;};
union CREATE3res::$1344BCDC3351BD45A414A34C7BEA0F35 {CREATE3resok ok;CREATE3resfail fail;};
struct CREATE3resfail {wcc_data dir_wcc;};
struct CREATE3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
typedef uint32_t Counter;
typedef uint32_t Counter32;
typedef struct $CA21EB1FE968FC1A84C75EEC389382FF DBM;
typedef struct $FB71A6CB4CF311B023B9642DD77B0239 DIR;
union DL_primitives {t_uscalar_t dl_primitive;dl_info_req_t info_req;dl_info_ack_t info_ack;dl_attach_req_t attach_req;dl_detach_req_t detach_req;dl_bind_req_t bind_req;dl_bind_ack_t bind_ack;dl_unbind_req_t unbind_req;dl_subs_bind_req_t subs_bind_req;dl_subs_bind_ack_t subs_bind_ack;dl_subs_unbind_req_t subs_unbind_req;dl_ok_ack_t ok_ack;dl_error_ack_t error_ack;dl_connect_req_t connect_req;dl_connect_ind_t connect_ind;dl_connect_res_t connect_res;dl_connect_con_t connect_con;dl_token_req_t token_req;dl_token_ack_t token_ack;dl_disconnect_req_t disconnect_req;dl_disconnect_ind_t disconnect_ind;dl_reset_req_t reset_req;dl_reset_ind_t reset_ind;dl_reset_res_t reset_res;dl_reset_con_t reset_con;dl_unitdata_req_t unitdata_req;dl_unitdata_ind_t unitdata_ind;dl_uderror_ind_t uderror_ind;dl_udqos_req_t udqos_req;dl_enabmulti_req_t enabmulti_req;dl_disabmulti_req_t disabmulti_req;dl_promiscon_req_t promiscon_req;dl_promiscoff_req_t promiscoff_req;dl_phys_addr_req_t physaddr_req;dl_phys_addr_ack_t physaddr_ack;dl_set_phys_addr_req_t set_physaddr_req;dl_get_statistics_req_t get_statistics_req;dl_get_statistics_ack_t get_statistics_ack;dl_test_req_t test_req;dl_test_ind_t test_ind;dl_test_res_t test_res;dl_test_con_t test_con;dl_xid_req_t xid_req;dl_xid_ind_t xid_ind;dl_xid_res_t xid_res;dl_xid_con_t xid_con;dl_data_ack_req_t data_ack_req;dl_data_ack_ind_t data_ack_ind;dl_data_ack_status_ind_t data_ack_status_ind;dl_reply_req_t reply_req;dl_reply_ind_t reply_ind;dl_reply_status_ind_t reply_status_ind;dl_reply_update_req_t reply_update_req;dl_reply_update_status_ind_t reply_update_status_ind;};
typedef unsigned __int8 *DP;
typedef uint32_t DeviceIndex;
typedef Octet_t DeviceName;
typedef struct dl_info Dl_info;
typedef Elf32_Dyn Dyn;
struct ELS_payload {union ELS_payload::els_cmd_u els_cmd;uchar_t els_data[56];};
union ELS_payload::els_cmd_u {struct ELS_payload::els_cmd_u::$6093A708197FAE24BE48D5551ABE0EB0 c;uint_t i;};
struct ELS_payload::els_cmd_u::$6093A708197FAE24BE48D5551ABE0EB0 {uchar_t ls_command;uchar_t reserved[3];};
typedef struct search_entry ENTRY;
typedef int *ERRP;
typedef Elf32_Ehdr Ehdr;
struct Elf;
typedef Elf32_Addr Elf3264_Addr;
typedef Elf32_Dyn Elf3264_Dyn;
typedef Elf32_Rel Elf3264_Rel;
typedef Elf32_Rela Elf3264_Rela;
typedef Elf32_Shdr Elf3264_Shdr;
typedef Elf32_Sword Elf3264_Sword;
typedef Elf32_Sym Elf3264_Sym;
typedef Elf32_Word Elf3264_Word;
typedef unsigned int Elf32_Addr;
typedef struct $4965EEC990952D9E46AE6A5DEA6146E6 Elf32_Boot;
typedef struct $68E4A9C261F68D94E3C41D4B3B334942 Elf32_Dyn;
typedef struct $160641F2D897670075418D2E6B733231 Elf32_Ehdr;
typedef unsigned __int16 Elf32_Half;
typedef unsigned __int64 Elf32_Lword;
typedef struct $2A4C46EAAE865C05377B30846399D3D1 Elf32_Move;
typedef struct $8A4D2DD0535D3740C9D9302B62B9E8F3 Elf32_Nhdr;
typedef unsigned int Elf32_Off;
typedef struct $4788A0C65CEF1424AE2DE816674E1913 Elf32_Phdr;
typedef struct $C772EEB8BDF2D9B03BC2113DCD14FF9B Elf32_Rel;
typedef struct $AAECD496E21460385AB9540869BF9C78 Elf32_Rela;
typedef struct $0F2B39C4889BFBA0BBC9C66D38A1F5D3 Elf32_Shdr;
typedef int Elf32_Sword;
typedef struct $F5D530A8B9C8144C513F035766B8BD9F Elf32_Sym;
typedef struct $FE43560485AD2DF497423A9D2646B91A Elf32_Syminfo;
typedef struct $12883A0710B467FBB4742064A9BE69DF Elf32_Verdaux;
typedef struct $A0565235DB0A025ED98270EC8F0003BF Elf32_Verdef;
typedef struct $E714B4690DCD4CE2097239CD07373860 Elf32_Vernaux;
typedef struct $DDB9E5FBB16C40A976BC405025678C57 Elf32_Verneed;
typedef Elf32_Half Elf32_Versym;
typedef unsigned int Elf32_Word;
typedef unsigned __int64 Elf64_Addr;
typedef struct $59C2F8BE822F39E0857CE77037A0F7B3 Elf64_Boot;
typedef struct $53F0EB4E985DBC87B1B2326D8BF9D556 Elf64_Dyn;
typedef struct $31DC1A9A30C8BE83503485AFF4563DAB Elf64_Ehdr;
typedef unsigned __int16 Elf64_Half;
typedef unsigned __int64 Elf64_Lword;
typedef struct $8D40ACCAC6057C8589735CF1D51B872E Elf64_Move;
typedef struct $CA18D99C52BF47BA3661A7BE783B3F23 Elf64_Nhdr;
typedef unsigned __int64 Elf64_Off;
typedef struct $61B607A2274ED5109A268B0B2173104D Elf64_Phdr;
typedef struct $A313ED2DE25BE046A874D492CFBD731F Elf64_Rel;
typedef struct $4664B325D7B1C568276997F8FB024EC2 Elf64_Rela;
typedef struct $6C157D281FCCF3AD18E5920BAFADC6E6 Elf64_Shdr;
typedef int Elf64_Sword;
typedef __int64 Elf64_Sxword;
typedef struct $7963ED2253978A4E491ADF870F9A304B Elf64_Sym;
typedef struct $2FC37C12F50461D7B99376C23209E757 Elf64_Syminfo;
typedef struct $D758E79311354DDC9AF0CC7E7C22CD10 Elf64_Verdaux;
typedef struct $75FD820D0CE6C215ACE04A8FAA270A6D Elf64_Verdef;
typedef struct $A46BFD4B6B8C284ED478D587B5722CAB Elf64_Vernaux;
typedef struct $DBDB4AF8E469679C3A4CD785AB502395 Elf64_Verneed;
typedef Elf64_Half Elf64_Versym;
typedef unsigned int Elf64_Word;
typedef unsigned __int64 Elf64_Xword;
typedef struct $0A0885A099C43036865B53B70EA12DCA Elf_Arhdr;
typedef struct $92C2B677F4D6F16C081E111A1354037E Elf_Arsym;
typedef enum $014516C156DA5201E9C0253C2C7BF2C9 Elf_Cmd;
typedef struct $BDBAD8C22C982B900870BBCDB0629DB6 Elf_Data;
typedef enum $401A9802811826260D9AA8000BA0BB75 Elf_Kind;
struct Elf_Scn;
typedef enum $88495A355BB3E6D41AADF572D3BFAE21 Elf_Type;
typedef void Elf_Void;
struct Exp_cpio_hdr {char E_magic[6];char E_ino[8];char E_mode[8];char E_uid[8];char E_gid[8];char E_nlink[8];char E_mtime[8];char E_filesize[8];char E_maj[8];char E_min[8];char E_rmaj[8];char E_rmin[8];char E_namesize[8];char E_chksum[8];char E_name[1024];};
struct FC2_FRAME_HDR {unsigned __int32 r_ctl : 8;unsigned __int32 d_id : 24;unsigned __int32 reserved1 : 8;unsigned __int32 s_id : 24;unsigned __int32 type : 8;unsigned __int32 f_ctl : 24;unsigned __int32 seq_id : 8;unsigned __int32 df_ctl : 8;unsigned __int32 seq_cnt : 16;ushort_t ox_id;ushort_t rx_id;uint_t ro;};
typedef struct FC2_FRAME_HDR *FC2_FRAME_HDRptr;
struct FC2_RJT_PARAM {uchar_t rjt_action;uchar_t rjt_reason;uchar_t reserved[2];};
typedef struct fieldnode FIELD;
typedef struct typenode FIELDTYPE;
typedef __FILE FILE;
typedef struct $D5A35B190B3B0D67D693D32BA15204C1 FN_attr_syntax_locale_info_t;
typedef struct $E89C0C6DA392559E0E24C2B68700633F FN_attr_syntax_locales_t;
typedef struct _FN_attribute FN_attribute_t;
typedef struct _FN_attrmodlist FN_attrmodlist_t;
typedef struct _FN_attrset FN_attrset_t;
typedef struct $0F6DEF3B8E99612FFBC8A726FE9B31C3 FN_attrvalue_t;
typedef struct _FN_bindinglist_t FN_bindinglist_t;
typedef struct _FN_bindingset FN_bindingset_t;
typedef struct _FN_composite_name FN_composite_name_t;
typedef struct _FN_compound_name FN_compound_name_t;
typedef FN_ref_t *(*FN_ctx_asvc_lookup_func_t)(FN_ctx_svc_t *ctx, FN_string_t *name, unsigned int lookup_flag, FN_status_asvc_t *s);
typedef FN_ref_t *(*FN_ctx_cnsvc_lookup_func_t)(FN_ctx_svc_t *ctx, FN_composite_name_t *name, unsigned int lookup_flag, FN_status_cnsvc_t *s);
typedef FN_ref_t *(*FN_ctx_csvc_lookup_func_t)(FN_ctx_svc_t *ctx, FN_string_t *name, unsigned int lookup_flag, FN_status_csvc_t *s);
typedef FN_string_t *(*FN_ctx_csvc_parser_func_t)(const FN_string_t *, FN_string_t **rest, FN_status_csvc_t *status);
typedef FN_ref_t *(*FN_ctx_psvc_lookup_func_t)(FN_ctx_svc_t *ctx, FN_composite_name_t *name, unsigned int lookup_flag, FN_status_psvc_t *s);
typedef FN_string_t *(*FN_ctx_psvc_parser_func_t)(const FN_composite_name_t *, FN_composite_name_t **rest, FN_status_psvc_t *status);
typedef void *FN_ctx_svc_data_t;
typedef FN_ctx_svc_t *(*FN_ctx_svc_from_initial_func)(unsigned int, FN_status_t *);
typedef FN_ctx_svc_t *(*FN_ctx_svc_from_ref_addr_func)(const FN_ref_addr_t *, const FN_ref_t *, unsigned int, FN_status_t *);
typedef FN_ctx_svc_t *(*FN_ctx_svc_from_ref_func)(const FN_ref_t *, unsigned int, FN_status_t *);
typedef FN_ctx_svc_func_t FN_ctx_svc_func_array_t[21];
typedef void (*FN_ctx_svc_func_t)();
typedef struct _FN_ctx_svc_t FN_ctx_svc_t;
typedef struct _FN_ctx FN_ctx_t;
typedef struct _FN_ext_searchlist_t FN_ext_searchlist_t;
typedef struct $0A17130E4CE82B668D029EC1E9F64ADD FN_identifier_t;
typedef struct _FN_multigetlist_t FN_multigetlist_t;
typedef struct _FN_namelist_t FN_namelist_t;
typedef struct _FN_nameset FN_nameset_t;
typedef struct _FN_ref_addr FN_ref_addr_t;
typedef struct _FN_ref FN_ref_t;
typedef struct _FN_search_control FN_search_control_t;
typedef struct _FN_search_filter FN_search_filter_t;
enum FN_search_filter_type {FN_SEARCH_FILTER_ATTR = 0x1,FN_SEARCH_FILTER_ATTRVALUE = 0x2,FN_SEARCH_FILTER_STRING = 0x3,FN_SEARCH_FILTER_IDENTIFIER = 0x4,};
typedef struct _FN_searchlist_t FN_searchlist_t;
typedef struct _FN_status_asvc_t FN_status_asvc_t;
typedef struct _FN_status_cnsvc_t FN_status_cnsvc_t;
typedef struct _FN_status_csvc_t FN_status_csvc_t;
typedef struct _FN_status_psvc_t FN_status_psvc_t;
typedef struct _FN_status FN_status_t;
typedef struct _FN_string FN_string_t;
typedef struct $9FB80FD2F500D2E1F9F0E3DE3EE0B629 FN_syntax_standard_t;
typedef struct _FN_valuelist_t FN_valuelist_t;
typedef struct formnode FORM;
struct FREE_SPACE {uint16_t fs_cksum;uint8_t fs_freesp[2];};
struct FSINFO3args {nfs_fh3 fsroot;};
struct FSINFO3res {nfsstat3 status;union FSINFO3res::$6A2CEE5B34ED3E6D5EAD14FB19C2D2E6 res_u;};
union FSINFO3res::$6A2CEE5B34ED3E6D5EAD14FB19C2D2E6 {FSINFO3resok ok;FSINFO3resfail fail;};
struct FSINFO3resfail {post_op_attr obj_attributes;};
struct FSINFO3resok {post_op_attr obj_attributes;uint32 rtmax;uint32 rtpref;uint32 rtmult;uint32 wtmax;uint32 wtpref;uint32 wtmult;uint32 dtpref;size3 maxfilesize;nfstime3 time_delta;uint32 properties;};
struct FSSTAT3args {nfs_fh3 fsroot;};
struct FSSTAT3res {nfsstat3 status;union FSSTAT3res::$DAFC2B488956910F0828456CE719C50E res_u;};
union FSSTAT3res::$DAFC2B488956910F0828456CE719C50E {FSSTAT3resok ok;FSSTAT3resfail fail;};
struct FSSTAT3resfail {post_op_attr obj_attributes;};
struct FSSTAT3resok {post_op_attr obj_attributes;size3 tbytes;size3 fbytes;size3 abytes;size3 tfiles;size3 ffiles;size3 afiles;uint32 invarsec;};
struct FTW {int quit;int base;int level;};
typedef struct firm_event Firm_event;
struct GETACL2args {fhandle_t fh;uint32 mask;};
struct GETACL2res {enum nfsstat status;union GETACL2res::$B07A5DE58C687D3B3D1EE7EDFDAFE7CD res_u;};
union GETACL2res::$B07A5DE58C687D3B3D1EE7EDFDAFE7CD {GETACL2resok ok;};
struct GETACL2resok {struct nfsfattr attr;vsecattr_t acl;};
struct GETACL3args {nfs_fh3 fh;uint32 mask;};
struct GETACL3res {nfsstat3 status;union GETACL3res::$3F2F8CF2A694F3B296614A4B9D8F54E4 res_u;};
union GETACL3res::$3F2F8CF2A694F3B296614A4B9D8F54E4 {GETACL3resok ok;GETACL3resfail fail;};
struct GETACL3resfail {post_op_attr attr;};
struct GETACL3resok {post_op_attr attr;vsecattr_t acl;};
struct GETATTR2args {fhandle_t fh;};
struct GETATTR2res {enum nfsstat status;union GETATTR2res::$0E71511EAA16D209A4D602249505B5F8 res_u;};
union GETATTR2res::$0E71511EAA16D209A4D602249505B5F8 {GETATTR2resok ok;};
struct GETATTR2resok {struct nfsfattr attr;};
struct GETATTR3args {nfs_fh3 object;};
struct GETATTR3res {nfsstat3 status;union GETATTR3res::$6654F6005606AAD973D4218EB1EDC6A8 res_u;};
union GETATTR3res::$6654F6005606AAD973D4218EB1EDC6A8 {GETATTR3resok ok;};
struct GETATTR3resok {fattr3 obj_attributes;};
typedef Elf64_Addr GElf_Addr;
typedef Elf64_Dyn GElf_Dyn;
typedef Elf64_Ehdr GElf_Ehdr;
typedef Elf64_Half GElf_Half;
typedef Elf64_Move GElf_Move;
typedef Elf64_Off GElf_Off;
typedef Elf64_Phdr GElf_Phdr;
typedef Elf64_Rel GElf_Rel;
typedef Elf64_Rela GElf_Rela;
typedef Elf64_Shdr GElf_Shdr;
typedef Elf64_Sword GElf_Sword;
typedef Elf64_Sxword GElf_Sxword;
typedef Elf64_Sym GElf_Sym;
typedef Elf64_Syminfo GElf_Syminfo;
typedef Elf64_Verdaux GElf_Verdaux;
typedef Elf64_Verdef GElf_Verdef;
typedef Elf64_Vernaux GElf_Vernaux;
typedef Elf64_Verneed GElf_Verneed;
typedef Elf64_Versym GElf_Versym;
typedef Elf64_Word GElf_Word;
typedef Elf64_Xword GElf_Xword;
typedef uint32_t Gauge;
typedef struct $A6F5D22C47870C9C34E13B26D36736E1 HEADER;
typedef Elf32_Half Half;
typedef char *IDP;
typedef struct iocblk *IOCP;
struct ITEM {TEXT name;TEXT description;int index;struct MENU *imenu;int value;char *userptr;OPTIONS opt;int status;__int16 y;__int16 x;struct ITEM *left;struct ITEM *right;struct ITEM *up;struct ITEM *down;};
typedef struct in6_addr Ip6Address;
typedef uint32_t IpAddress;
struct LA_RLS_reply {int code;int link_failure;int loss_of_sync;int loss_of_signal;int primitive_error;int code_violations;int invalid_crc;};
typedef struct LA_RLS_reply *LA_RLS_replyptr;
typedef struct _LCLd *LCLd;
typedef struct _LCTd *LCTd;
struct LINK3args {nfs_fh3 file;diropargs3 link;};
struct LINK3res {nfsstat3 status;union LINK3res::$127574E1D56DCEC597578398563C3456 res_u;};
union LINK3res::$127574E1D56DCEC597578398563C3456 {LINK3resok ok;LINK3resfail fail;};
struct LINK3resfail {post_op_attr file_attributes;wcc_data linkdir_wcc;};
struct LINK3resok {post_op_attr file_attributes;wcc_data linkdir_wcc;};
struct LOGI_PAYLOAD {uint_t code;uchar_t common_service_params[16];uchar_t port_name[8];uchar_t node_name[8];uchar_t class1_service_params[16];uchar_t class2_service_params[16];uchar_t class3_service_params[16];};
typedef struct LOGI_PAYLOAD *LOGI_PAYLOADptr;
struct LOOKUP3args {diropargs3 what;};
struct LOOKUP3res {nfsstat3 status;union LOOKUP3res::$88DF73F2EA33FE7EB0040A420E6940DA res_u;};
union LOOKUP3res::$88DF73F2EA33FE7EB0040A420E6940DA {LOOKUP3resok ok;LOOKUP3resfail fail;};
struct LOOKUP3resfail {post_op_attr dir_attributes;};
struct LOOKUP3resok {nfs_fh3 object;post_op_attr obj_attributes;post_op_attr dir_attributes;};
typedef struct $66B76CCBD7517A35749D93819776E291 La_i86_regs;
typedef struct _la_sparc_regs La_sparcv8_regs;
typedef int LayoutDesc;
typedef struct $488DA2D57F3DEC7D8F8D2973FF098AA5 *LayoutEditSize;
typedef struct $488DA2D57F3DEC7D8F8D2973FF098AA5 LayoutEditSizeRec;
typedef int LayoutId;
typedef struct _LayoutObject *LayoutObject;
typedef struct $734E31BBDA3A31A5E7F21845616A11EB *LayoutTextDescriptor;
typedef struct $734E31BBDA3A31A5E7F21845616A11EB LayoutTextDescriptorRec;
typedef void *LayoutValue;
typedef struct $192236FE3311D06A1856619BA2C00C00 LayoutValueRec;
typedef struct $192236FE3311D06A1856619BA2C00C00 *LayoutValues;
typedef struct _LclCharsetInfo LclCharsetInfo;
typedef struct _LclCharsetLinkedList LclCharsetLinkedList;
typedef struct $96509CB31A3C50C1F728CA63BB4787CF LclCharsetList;
typedef struct $B089456DFBB446A2250D7264A8E39902 LclCharsetSegment;
typedef struct $D30353D08B71B27BB4CD9334EB50A9EF LclCharsetSegmentSet;
typedef struct $AF17FACC7559AA50C79D476A9538E1B7 LclContentInfo;
typedef enum $3F8C702D250B5DC330EA07867C0DE268 LclContentType;
typedef struct $FF2DD7BE9DD2B738A1C99E37059CE979 LclContents;
typedef enum $27EF52B7EDF945EB8F92BA945907B559 LclDirection;
typedef struct $601AB9009B78F952A53B6D0C69238ED9 LclError;
typedef enum $0975BDD6F157BDBA4D69597495967F12 LclForm;
typedef struct _LclFormAttrInfo LclFormAttrInfo;
typedef struct _LclFormInfo LclFormInfo;
typedef enum $C9268D8AE8F7D6801B05A9E10ADFAF15 LclFormat;
typedef struct $B2F3592E62A4F6542AD886252093AD89 LclIconvAtom;
typedef struct _LclIconvInfo LclIconvInfo;
typedef enum $980FA8BDE1FB627A165EC34D5A62F01B LclMailEncoding;
typedef enum $CF2A9B67847DD7930A13E7F75B3AE6C8 LclMailType;
typedef enum $3186EC298029A051CEE1BF271F72D5DD LctNEAttribute;
typedef struct link_map Link_map;
typedef ulong_t Lmid_t;
typedef Elf32_Lword Lword;
enum MACRO_A {A_UNDERLINE = 0x400000,A_REVERSE = 0x800000,A_BLINK = 0x1000000,A_DIM = 0x2000000,A_BOLD = 0x4000000,A_ALTCHARSET = 0x8000000,A_INVIS = 0x40000000,A_PROTECT = 0x80000000,A_NORMAL = 0x0,A_ATTRIBUTES = 0xCFFF8000,A_CHARTEXT = 0x30007FFF,A_COLOR = 0x1F8000,A_WATTRIBUTES = 0xCFE00000,A_WCHARTEXT = 0x301FFFFF,};
enum MACRO_ABDAY {ABDAY_1 = 8,ABDAY_2 = 9,ABDAY_3 = 10,ABDAY_4 = 11,ABDAY_5 = 12,ABDAY_6 = 13,ABDAY_7 = 14,};
enum MACRO_ABITS {IP_ABITS = 32,IPV6_ABITS = 128,};
enum MACRO_ABMON {ABMON_1 = 27,ABMON_2 = 28,ABMON_3 = 29,ABMON_4 = 30,ABMON_5 = 31,ABMON_6 = 32,ABMON_7 = 33,ABMON_8 = 34,ABMON_9 = 35,ABMON_10 = 36,ABMON_11 = 37,ABMON_12 = 38,};
enum MACRO_ABORT {ABORT = 238,};
enum MACRO_ACCESS2 {ACCESS2_READ = 0x1,ACCESS2_LOOKUP = 0x2,ACCESS2_MODIFY = 0x4,ACCESS2_EXTEND = 0x8,ACCESS2_DELETE = 0x10,ACCESS2_EXECUTE = 0x20,};
enum MACRO_ACCESS3 {ACCESS3_READ = 0x1,ACCESS3_LOOKUP = 0x2,ACCESS3_MODIFY = 0x4,ACCESS3_EXTEND = 0x8,ACCESS3_DELETE = 0x10,ACCESS3_EXECUTE = 0x20,};
enum MACRO_ACCOUNTING {ACCOUNTING = 9,};
enum MACRO_ACDIRMAX {ACDIRMAX = 60,};
enum MACRO_ACDIRMIN {ACDIRMIN = 30,};
enum MACRO_ACE {ACE_F_PERMANENT = 0x1,ACE_F_PUBLISH = 0x2,ACE_F_DYING = 0x4,ACE_F_RESOLVED = 0x8,ACE_F_MAPPING = 0x10,ACE_F_MYADDR = 0x20,};
enum MACRO_ACKTIMEOUT {MIN_ACKTIMEOUT = 5,MAX_ACKTIMEOUT = 7200,};
enum MACRO_ACL {ACL_DEFAULT = 0x1000,};
enum MACRO_ACLPROC2 {ACLPROC2_NULL = 0,ACLPROC2_GETACL = 1,ACLPROC2_SETACL = 2,ACLPROC2_GETATTR = 3,ACLPROC2_ACCESS = 4,};
enum MACRO_ACLPROC3 {ACLPROC3_NULL = 0,ACLPROC3_GETACL = 1,ACLPROC3_SETACL = 2,};
enum MACRO_ACMAXMAX {ACMAXMAX = 36000,};
enum MACRO_ACMINMAX {ACMINMAX = 3600,};
enum MACRO_ACREGMIN {ACREGMIN = 3,ACREGMAX = 60,};
enum MACRO_ACTIVE {ACTIVE_LOCK = 0x1,SLEEPING_LOCK = 0x2,IO_LOCK = 0x4,REFERENCED_LOCK = 0x8,QUERY_LOCK = 0x10,WILLING_TO_SLEEP_LOCK = 0x20,RECOMPUTE_LOCK = 0x40,};
enum MACRO_AD {AD_HALT = 0,AD_BOOT = 1,AD_IBOOT = 2,AD_SBOOT = 3,AD_SIBOOT = 4,AD_POWEROFF = 6,AD_NOSYNC = 7,AD_COMPRESS = 0,AD_FORCE = 1,AD_CHECK = 2,AD_REUSEINIT = 3,AD_REUSABLE = 4,AD_REUSEFINI = 5,AD_FTRACE_START = 1,AD_FTRACE_STOP = 2,};
enum MACRO_ADD {ADD_OVERWRITE = 256,};
enum MACRO_ADDRSORT {ADDRSORT = 1,MAXADDR = 10,};
enum MACRO_ADDRSTRLEN {INET_ADDRSTRLEN = 16,INET6_ADDRSTRLEN = 46,};
enum MACRO_ADDR_LEN {IPV4_ADDR_LEN = 4,IP_ADDR_LEN = 4,};
enum MACRO_ADDR_SIZE {ETHER_ADDR_SIZE = 8,IEEE_ADDR_SIZE = 7,TOKEN_ADDR_SIZE = 7,};
enum MACRO_AF {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_NBS = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_NIT = 17,AF_802 = 18,AF_OSI = 19,AF_X25 = 20,AF_OSINET = 21,AF_GOSIP = 22,AF_IPX = 23,AF_ROUTE = 24,AF_LINK = 25,AF_INET6 = 26,AF_KEY = 27,AF_MAX = 27,};
enum MACRO_AFLT {AFLT_ECC = 1,AFLT_SX = 2,AFLT_SUCCESS = 0,AFLT_NOTSUPPORTED = 1,AFLT_FAILURE = 2,AFLT_HANDLED = 0,AFLT_NOTHANDLED = 1,};
enum MACRO_AFORK {AFORK = 0x1,ASU = 0x2,AEXPND = 0x20,ACCTF = 0xC0,};
enum MACRO_AI {AI_PASSIVE = 0x8,AI_CANONNAME = 0x10,AI_NUMERICHOST = 0x20,AI_V4MAPPED = 0x1,AI_ALL = 0x2,AI_ADDRCONFIG = 0x4,AI_DEFAULT = 0x5,};
enum MACRO_AIO {AIO_POLL_BIT = 0x20,AIO_CANCELED = 0x0,AIO_ALLDONE = 0x1,AIO_NOTCANCELED = 0x2,};
enum MACRO_AIOAREAD {AIOAREAD = 11,};
enum MACRO_AIOAREAD64 {AIOAREAD64 = 17,};
enum MACRO_AIOAWRITE {AIOAWRITE = 12,};
enum MACRO_AIOAWRITE64 {AIOAWRITE64 = 18,};
enum MACRO_AIOCANCEL {AIOCANCEL = 3,AIONOTIFY = 4,};
enum MACRO_AIOCANCEL64 {AIOCANCEL64 = 19,};
enum MACRO_AIOERROR {AIOERROR = 9,};
enum MACRO_AIOERROR64 {AIOERROR64 = 15,AIOLIOWAIT64 = 16,};
enum MACRO_AIOFSYNC {AIOFSYNC = 20,};
enum MACRO_AIOINIT {AIOINIT = 5,};
enum MACRO_AIOLIO {AIOLIO = 7,AIOSUSPEND = 8,};
enum MACRO_AIOLIO64 {AIOLIO64 = 13,};
enum MACRO_AIOLIOWAIT {AIOLIOWAIT = 10,};
enum MACRO_AIOREAD {AIOREAD = 0,AIOWRITE = 1,AIOWAIT = 2,};
enum MACRO_AIOSTART {AIOSTART = 6,};
enum MACRO_AIOSUSPEND64 {AIOSUSPEND64 = 14,};
enum MACRO_AIO_INPROGRESS {AIO_INPROGRESS = -2,};
enum MACRO_ALGOR {ALGOR_BASIC = 0x1000,ALGOR_IMPLICIT = 0x2000,};
enum MACRO_ALIGNMENT {_CHAR_ALIGNMENT = 1,_SHORT_ALIGNMENT = 2,_INT_ALIGNMENT = 4,_LONG_LONG_ALIGNMENT = 8,_DOUBLE_ALIGNMENT = 8,};
enum MACRO_ALL {ALL_MOUSE_EVENTS = 0x7FFF,};
enum MACRO_ALLDELAY {ALLDELAY = 0xFF00,};
enum MACRO_ALLOCSIZE {ALLOCSIZE = 160,};
enum MACRO_ALL_RESULTS {ALL_RESULTS = 8,};
enum MACRO_ALL_VIFS {ALL_VIFS = 65535,};
enum MACRO_ALT {ALT_DIGITS = 55,};
enum MACRO_ALTGRAPH {ALTGRAPH = 9,ALTGRAPHMASK = 512,};
enum MACRO_ALT_0 {ALT = 10,};
enum MACRO_AMI {AMI_OK = 0,AMI_EBUFSIZE = 1,AMI_ENOMEM = 2,AMI_BAD_FILE = 3,AMI_FILE_NOT_FOUND = 4,AMI_FILE_IO_ERR = 5,AMI_BAD_PASSWD = 6,AMI_UNKNOWN_USER = 7,AMI_ALGORITHM_UNKNOWN = 8,AMI_ASN1_ENCODE_ERR = 9,AMI_ASN1_DECODE_ERR = 10,AMI_BAD_KEY = 11,AMI_KEYGEN_ERR = 12,AMI_ENCRYPT_ERR = 13,AMI_DECRYPT_ERR = 14,AMI_SIGN_ERR = 15,AMI_VERIFY_ERR = 16,AMI_DIGEST_ERR = 17,AMI_OUTPUT_FORMAT_ERR = 18,AMI_SYSTEM_ERR = 19,AMI_ATTRIBUTE_UNKNOWN = 20,AMI_AMILOGIN_ERR = 21,AMI_AMILOGOUT_ERR = 22,AMI_NO_SUCH_ENTRY = 23,AMI_ENTRY_ALREADY_EXISTS = 24,AMI_AMISERV_DECRYPT_ERR = 25,AMI_AMISERV_SIGN_ERR = 26,AMI_USER_DID_NOT_AMILOGIN = 27,AMI_AMISERV_CONNECT = 28,AMI_KEYPKG_NOT_FOUND = 29,AMI_TIME_INVALID = 30,AMI_UNTRUSTED_PUBLIC_KEY = 31,AMI_EPARM = 32,AMI_BINARY_TO_RFC1421_ERR = 33,AMI_RFC1421_TO_BINARY_ERR = 34,AMI_RANDOM_NUM_ERR = 35,AMI_XFN_ERR = 36,AMI_CERT_CHAIN_ERR = 37,AMI_RDN_MISSING_EQUAL = 38,AMI_AVA_TYPE_MISSING = 39,AMI_AVA_VALUE_MISSING = 40,AMI_CERT_NOT_FOUND = 41,AMI_DN_NOT_FOUND = 42,AMI_CRITICAL_EXTNS_ERR = 43,AMI_ASN1_INIT_ERROR = 44,AMI_WRAP_ERROR = 45,AMI_UNWRAP_ERROR = 46,AMI_UNSUPPORTED_KEY_TYPE = 47,AMI_DH_PART1_ERR = 48,AMI_DH_PART2_ERR = 49,AMI_DOUBLE_ENCRYPT = 50,AMI_AMISERV_KEYPKG_UPDATE = 51,AMI_AMISERV_STAT_ERR = 52,AMI_GLOBAL_ERR = 53,AMI_TRUSTED_KEY_EXPIRED = 54,AMI_OPEN_ERR = 55,AMI_TOTAL_ERRNUM = 56,AMI_CERT_ERR = 57,AMI_KEYPKG_ERR = 58,AMI_ADD_DATA = 1,AMI_END_DATA = 2,AMI_DIGESTED_DATA = 3,AMI_DIGESTED_AND_ENCODED_DATA = 4,};
enum MACRO_ANCHOR {ANCHOR_VOL_DESC_LOC = 256,ANCHOR_VOL_DESC_LEN = 512,};
enum MACRO_ANI {ANI_MAX_POOL = 8,};
enum MACRO_ANON {ANON_PTRSHIFT = 2,ANON_SLEEP = 0,ANON_NOSLEEP = 1,ANON_ALLOC_FORCE = 2,};
enum MACRO_ANYADDR {ANYADDR = 0,};
enum MACRO_ANYCRED {ANYCRED = -1,};
enum MACRO_ANYMARK {ANYMARK = 0x1,LASTMARK = 0x2,STR = 0x5300,};
enum MACRO_ANYP {ANYP = 0xC0,NLDELAY = 0x300,TBDELAY = 0x400,CRDELAY = 0x3000,VTDELAY = 0x4000,BSDELAY = 0x8000,};
enum MACRO_AO {AO = 245,};
enum MACRO_AP {AP_VERSION = 0,};
enum MACRO_AQ {AQ_HIWATER = 100,AQ_MAXHIGH = 10000,AQ_LOWATER = 10,AQ_BUFSZ = 1024,AQ_MAXBUFSZ = 1048576,AQ_DELAY = 20,AQ_MAXDELAY = 20000,};
enum MACRO_AR {AR_IOCTL = 0x4100,AR_ENTRY_ADD = 0x4101,AR_ENTRY_DELETE = 0x4102,AR_ENTRY_QUERY = 0x4103,AR_XMIT_REQUEST = 0x4104,AR_XMIT_TEMPLATE = 0x4105,AR_ENTRY_SQUERY = 0x4106,AR_MAPPING_ADD = 0x4107,AR_CLIENT_NOTIFY = 0x4108,AR_INTERFACE_UP = 0x4109,AR_INTERFACE_DOWN = 0x410A,AR_XMIT_RESPONSE = 0x410B,AR_INTERFACE_ON = 0x410C,AR_INTERFACE_OFF = 0x410D,AR_DLPIOP_DONE = 0x410E,};
enum MACRO_AREGTYPE {AREGTYPE = 0,LNKTYPE = 49,};
enum MACRO_ARG {ARG_MAX = 1048320,LINK_MAX = 32767,NGROUPS_MAX = 16,PATH_MAX = 1024,_POSIX_AIO_LISTIO_MAX = 2,_POSIX_AIO_MAX = 1,_POSIX_ARG_MAX = 4096,_POSIX_CHILD_MAX = 6,};
enum MACRO_ARGPUSHSIZE {ARGPUSHSIZE = 24,ARGPUSH = 68,};
enum MACRO_ARGPUSHSIZE32 {ARGPUSHSIZE32 = 24,ARGPUSH32 = 68,};
enum MACRO_ARP {ARP_REQUEST = 1,ARP_RESPONSE = 2,};
enum MACRO_ARPHRD {ARPHRD_ETHER = 1,};
enum MACRO_ARPOP {ARPOP_REQUEST = 1,ARPOP_REPLY = 2,};
enum MACRO_AR_CN {AR_CN_BOGON = 1,AR_CN_ANNOUNCE = 2,};
enum MACRO_AS {AS_PAGLCK = 0x80,AS_CLAIMGAP = 0x40,AS_UNMAPWAIT = 0x20,AS_LREP_LINKEDLIST = 0x0,AS_LREP_SKIPLIST = 0x1,};
enum MACRO_ASCII {ASCII_SET_SIZE = 128,};
enum MACRO_ASCII_DEVID {ASCII_DEVID = 0x0,TOP_DEVID = 0x1,ISO_DEVID = 0x2,LIGHTPEN_DEVID = 0x79,BUTTON_DEVID = 0x7A,DIAL_DEVID = 0x7B,SUNVIEW_DEVID = 0x7C,PANEL_DEVID = 0x7D,SCROLL_DEVID = 0x7E,WORKSTATION_DEVID = 0x7F,LAST_DEVID = 0xFF,};
enum MACRO_ASCII_FIRST {ASCII_FIRST = 0,ASCII_LAST = 127,};
enum MACRO_ASCSZ {ASCSZ = 110,TARSZ = 512,};
enum MACRO_ASEG {ASEG = 0x58,};
enum MACRO_ASI {ASI_N = 0x4,ASI_NL = 0xC,ASI_AIUP = 0x10,ASI_AIUS = 0x11,ASI_AIUPL = 0x18,ASI_AIUSL = 0x19,ASI_P = 0x80,ASI_S = 0x81,ASI_PNF = 0x82,ASI_SNF = 0x83,ASI_PL = 0x88,ASI_SL = 0x89,ASI_PNFL = 0x8A,ASI_SNFL = 0x8B,ASI_USER = 0x11,};
enum MACRO_ASYNC {ASYNC_CMD = 0,SYNC_CMD = 1,};
enum MACRO_AT {AT_TYPE = 0x1,AT_MODE = 0x2,AT_UID = 0x4,AT_GID = 0x8,AT_FSID = 0x10,AT_NODEID = 0x20,AT_NLINK = 0x40,AT_SIZE = 0x80,AT_ATIME = 0x100,AT_MTIME = 0x200,AT_CTIME = 0x400,AT_RDEV = 0x800,AT_BLKSIZE = 0x1000,AT_NBLOCKS = 0x2000,AT_VCODE = 0x4000,AT_ALL = 0x7FFF,AT_STAT = 0xFFE,AT_TIMES = 0x700,AT_NOSET = 0x7871,};
enum MACRO_ATAB {ATAB = 0x53,};
enum MACRO_ATAPI {ATAPI_SET_CD_SPEED = 0xBB,ATAPI_CAPABILITIES = 0x2A,};
enum MACRO_ATEXIT {ATEXIT_MAX = 32,_XOPEN_IOV_MAX = 16,IOV_MAX = 16,FCHR_MAX = 1048576,PID_MAX = 999999,CHILD_MAX = 25,OPEN_MAX = 256,};
enum MACRO_ATF {ATF_INUSE = 0x1,ATF_COM = 0x2,ATF_PERM = 0x4,ATF_PUBL = 0x8,ATF_USETRAILERS = 0x10,};
enum MACRO_ATRSIZ {ATRSIZ = 64,};
enum MACRO_ATTR {ATTR_FOUND = 0,ATTR_NOT_FOUND = -1,ATTR_NO_RECOVERY = -2,};
enum MACRO_ATTR_UTIME {ATTR_UTIME = 0x1,ATTR_EXEC = 0x2,ATTR_COMM = 0x4,ATTR_HINT = 0x8,ATTR_REAL = 0x10,};
enum MACRO_AT_IPC {AT_IPC_MSG = 1,AT_IPC_SEM = 2,AT_IPC_SHM = 3,};
enum MACRO_AT_NULL {AT_NULL = 0,AT_IGNORE = 1,AT_EXECFD = 2,AT_PHDR = 3,AT_PHENT = 4,AT_PHNUM = 5,AT_PAGESZ = 6,AT_BASE = 7,AT_FLAGS = 8,AT_ENTRY = 9,AT_DCACHEBSIZE = 10,AT_ICACHEBSIZE = 11,AT_UCACHEBSIZE = 12,AT_SUN_UID = 2000,AT_SUN_RUID = 2001,AT_SUN_GID = 2002,AT_SUN_RGID = 2003,AT_SUN_LDELF = 2004,AT_SUN_LDSHDR = 2005,AT_SUN_LDNAME = 2006,AT_SUN_LPAGESZ = 2007,AT_SUN_PLATFORM = 2008,AT_SUN_HWCAP = 2009,AT_SUN_IFLUSH = 2010,AT_SUN_CPU = 2011,AT_SUN_EMUL_ENTRY = 2012,AT_SUN_EMUL_EXECFD = 2013,AT_SUN_EXECNAME = 2014,AT_SUN_MMU = 2015,};
enum MACRO_AU {AU_NOAUDITID = -2,AU_NULL = 0,AU_FREAD = 1,AU_FWRITE = 2,AU_FACCESS = 4,AU_FMODIFY = 8,AU_FCREATE = 16,AU_FDELETE = 32,AU_CLOSE = 64,AU_PROCESS = 128,AU_NET = 256,AU_IPC = 512,AU_NONAT = 1024,AU_ADMIN = 2048,AU_LOGIN = 4096,AU_TFM = 8192,AU_APPL = 16384,AU_SETL = 32768,AU_IFLOAT = 65536,AU_PRIV = 131072,AU_MAC_RW = 262144,AU_XCONN = 524288,AU_XCREATE = 1048576,AU_XDELETE = 2097152,AU_XIFLOAT = 4194304,AU_XPRIVS = 8388608,AU_XPRIVF = 16777216,AU_XMOVE = 33554432,AU_XDACF = 67108864,AU_XMACF = 134217728,AU_XSECATTR = 268435456,AU_IOCTL = 536870912,AU_EXEC = 1073741824,AU_OTHER = -2147483648,AU_ALL = -1,};
enum MACRO_AUC {AUC_UNSET = 0,AUC_AUDITING = 1,AUC_NOAUDIT = 2,AUC_DISABLED = -1,};
enum MACRO_AUDIO {AUDIO_ENCODING_NONE = 0,AUDIO_ENCODING_ULAW = 1,AUDIO_ENCODING_ALAW = 2,AUDIO_ENCODING_LINEAR = 3,AUDIO_ENCODING_DVI = 104,AUDIO_ENCODING_LINEAR8 = 105,AUDIO_MIN_GAIN = 0,AUDIO_MAX_GAIN = 255,AUDIO_MID_GAIN = 127,AUDIO_LEFT_BALANCE = 0,AUDIO_MID_BALANCE = 32,AUDIO_RIGHT_BALANCE = 64,AUDIO_BALANCE_SHIFT = 3,AUDIO_CHANNELS_MONO = 1,AUDIO_CHANNELS_STEREO = 2,AUDIO_MIN_PLAY_CHANNELS = 1,AUDIO_MAX_PLAY_CHANNELS = 2,AUDIO_MIN_REC_CHANNELS = 1,AUDIO_MAX_REC_CHANNELS = 2,AUDIO_PRECISION_8 = 8,AUDIO_PRECISION_16 = 16,AUDIO_MIN_PLAY_PRECISION = 8,AUDIO_MAX_PLAY_PRECISION = 32,AUDIO_MIN_REC_PRECISION = 8,AUDIO_MAX_REC_PRECISION = 32,AUDIO_NONE = 0,AUDIO_SPEAKER = 1,AUDIO_HEADPHONE = 2,AUDIO_LINE_OUT = 4,AUDIO_SPDIF_OUT = 8,AUDIO_AUX1_OUT = 16,AUDIO_AUX2_OUT = 32,AUDIO_MICROPHONE = 1,AUDIO_LINE_IN = 2,AUDIO_CD = 4,AUDIO_INTERNAL_CD_IN = 4,AUDIO_SPDIF_IN = 8,AUDIO_AUX1_IN = 16,AUDIO_AUX2_IN = 32,AUDIO_CODEC_LOOPB_IN = 64,AUDIO_SUNVTS = 128,AUDIO_HWFEATURE_DUPLEX = 1,AUDIO_HWFEATURE_MSCODEC = 2,AUDIO_HWFEATURE_IN2OUT = 4,AUDIO_SWFEATURE_MIXER = 1,};
enum MACRO_AUDIO_DRAIN {AUDIO_DRAIN = 536887555,};
enum MACRO_AUDIO_INIT {AUDIO_INIT = 0x20,AUDIO_INIT_INIT = 0x2101,AUDIO_MUX = 0x40,AUDIO_MUX_MCR1 = 0x4101,AUDIO_MUX_MCR2 = 0x4201,AUDIO_MUX_MCR3 = 0x4301,AUDIO_MUX_MCR4 = 0x4401,AUDIO_MAP = 0x60,AUDIO_MAP_X = 0x6110,AUDIO_MAP_R = 0x6210,AUDIO_MAP_GX = 0x6302,AUDIO_MAP_GR = 0x6402,AUDIO_MAP_GER = 0x6502,AUDIO_MAP_STG = 0x6602,AUDIO_MAP_FTGR = 0x6702,AUDIO_MAP_ATGR = 0x6802,AUDIO_MAP_MMR1 = 0x6901,AUDIO_MAP_MMR2 = 0x6A01,AUDIO_MAP_ALL = 0x6B2E,AUDIO_MAP_GX_MIN = 0x0,AUDIO_MAP_GX_MAX = 0xC,AUDIO_MAP_GR_MIN = 0xFFFFFFF4,AUDIO_MAP_GR_MAX = 0x0,AUDIO_MAP_GER_MIN = 0xFFFFFFF6,AUDIO_MAP_GER_MAX = 0x12,AUDIO_MAP_STG_MIN = 0xFFFFFFEE,AUDIO_MAP_STG_MAX = 0x0,AUDIO_MAP_FTGR_MIN = 0x10,AUDIO_MAP_FTGR_MAX = 0xF9F,AUDIO_MAP_ATGR_MIN = 0xFFFFFFEE,AUDIO_MAP_ATGR_MAX = 0x0,AUDIO_INIT_BITS_IDLE = 0x0,AUDIO_INIT_BITS_ACTIVE = 0x1,AUDIO_INIT_BITS_NOMAP = 0x20,AUDIO_INIT_BITS_INT_ENABLED = 0x0,AUDIO_INIT_BITS_INT_DISABLED = 0x4,AUDIO_INIT_BITS_CLOCK_DIVIDE_2 = 0x0,AUDIO_INIT_BITS_CLOCK_DIVIDE_1 = 0x8,AUDIO_INIT_BITS_CLOCK_DIVIDE_4 = 0x10,AUDIO_INIT_BITS_CLOCK_DIVIDE_3 = 0x20,AUDIO_INIT_BITS_RECEIVE_ABORT = 0x40,AUDIO_INIT_BITS_TRANSMIT_ABORT = 0x80,AUDIO_MUX_PORT_NONE = 0x0,AUDIO_MUX_PORT_B1 = 0x1,AUDIO_MUX_PORT_B2 = 0x2,AUDIO_MUX_PORT_BA = 0x3,AUDIO_MUX_PORT_BB = 0x4,AUDIO_MUX_PORT_BC = 0x5,AUDIO_MUX_PORT_BD = 0x6,AUDIO_MUX_PORT_BE = 0x7,AUDIO_MUX_PORT_BF = 0x8,AUDIO_MUX_MCR4_BITS_INT_ENABLE = 0x8,AUDIO_MUX_MCR4_BITS_INT_DISABLE = 0x0,AUDIO_MUX_MCR4_BITS_REVERSE_BB = 0x10,AUDIO_MUX_MCR4_BITS_REVERSE_BC = 0x20,AUDIO_MMR1_BITS_A_LAW = 0x1,AUDIO_MMR1_BITS_u_LAW = 0x0,AUDIO_MMR1_BITS_LOAD_GX = 0x2,AUDIO_MMR1_BITS_LOAD_GR = 0x4,AUDIO_MMR1_BITS_LOAD_GER = 0x8,AUDIO_MMR1_BITS_LOAD_X = 0x10,AUDIO_MMR1_BITS_LOAD_R = 0x20,AUDIO_MMR1_BITS_LOAD_STG = 0x40,AUDIO_MMR1_BITS_LOAD_DLB = 0x80,AUDIO_MMR2_BITS_AINA = 0x0,AUDIO_MMR2_BITS_AINB = 0x1,AUDIO_MMR2_BITS_EAR = 0x0,AUDIO_MMR2_BITS_LS = 0x2,AUDIO_MMR2_BITS_DTMF = 0x4,AUDIO_MMR2_BITS_TONE = 0x8,AUDIO_MMR2_BITS_RINGER = 0x10,AUDIO_MMR2_BITS_HIGH_PASS = 0x20,AUDIO_MMR2_BITS_AUTOZERO = 0x40,};
enum MACRO_AUDIT {AUDIT_CNT = 0x1,AUDIT_AHLT = 0x2,AUDIT_ARGV = 0x4,AUDIT_ARGE = 0x8,AUDIT_PASSWD = 0x10,AUDIT_SEQ = 0x20,AUDIT_WINDATA = 0x40,AUDIT_USER = 0x80,AUDIT_GROUP = 0x100,AUDIT_TRAIL = 0x200,AUDIT_PATH = 0x400,};
enum MACRO_AUDITUSER {AUDITUSER_DB_NCOL = 3,AUDITUSER_DB_NKEYCOL = 1,AUDITUSER_SUCCESS = 0,AUDITUSER_PARSE_ERANGE = 1,AUDITUSER_NOT_FOUND = 2,AUDITUSER_KEYCOL0 = 0,};
enum MACRO_AUE {AUE_NULL = 0,AUE_EXIT = 1,AUE_FORK = 2,AUE_OPEN = 3,AUE_CREAT = 4,AUE_LINK = 5,AUE_UNLINK = 6,AUE_EXEC = 7,AUE_CHDIR = 8,AUE_MKNOD = 9,AUE_CHMOD = 10,AUE_CHOWN = 11,AUE_UMOUNT = 12,AUE_JUNK = 13,AUE_ACCESS = 14,AUE_KILL = 15,AUE_STAT = 16,AUE_LSTAT = 17,AUE_ACCT = 18,AUE_MCTL = 19,AUE_REBOOT = 20,AUE_SYMLINK = 21,AUE_READLINK = 22,AUE_EXECVE = 23,AUE_CHROOT = 24,AUE_VFORK = 25,AUE_SETGROUPS = 26,AUE_SETPGRP = 27,AUE_SWAPON = 28,AUE_SETHOSTNAME = 29,AUE_FCNTL = 30,AUE_SETPRIORITY = 31,AUE_CONNECT = 32,AUE_ACCEPT = 33,AUE_BIND = 34,AUE_SETSOCKOPT = 35,AUE_VTRACE = 36,AUE_SETTIMEOFDAY = 37,AUE_FCHOWN = 38,AUE_FCHMOD = 39,AUE_SETREUID = 40,AUE_SETREGID = 41,AUE_RENAME = 42,AUE_TRUNCATE = 43,AUE_FTRUNCATE = 44,AUE_FLOCK = 45,AUE_SHUTDOWN = 46,AUE_MKDIR = 47,AUE_RMDIR = 48,AUE_UTIMES = 49,AUE_ADJTIME = 50,AUE_SETRLIMIT = 51,AUE_KILLPG = 52,AUE_NFS_SVC = 53,AUE_STATFS = 54,AUE_FSTATFS = 55,AUE_UNMOUNT = 56,AUE_ASYNC_DAEMON = 57,AUE_NFS_GETFH = 58,AUE_SETDOMAINNAME = 59,AUE_QUOTACTL = 60,AUE_EXPORTFS = 61,AUE_MOUNT = 62,AUE_SEMSYS = 63,AUE_MSGSYS = 64,AUE_SHMSYS = 65,AUE_BSMSYS = 66,AUE_RFSSYS = 67,AUE_FCHDIR = 68,AUE_FCHROOT = 69,AUE_VPIXSYS = 70,AUE_PATHCONF = 71,AUE_OPEN_R = 72,AUE_OPEN_RC = 73,AUE_OPEN_RT = 74,AUE_OPEN_RTC = 75,AUE_OPEN_W = 76,AUE_OPEN_WC = 77,AUE_OPEN_WT = 78,AUE_OPEN_WTC = 79,AUE_OPEN_RW = 80,AUE_OPEN_RWC = 81,AUE_OPEN_RWT = 82,AUE_OPEN_RWTC = 83,AUE_MSGCTL = 84,AUE_MSGCTL_RMID = 85,AUE_MSGCTL_SET = 86,AUE_MSGCTL_STAT = 87,AUE_MSGGET = 88,AUE_MSGRCV = 89,AUE_MSGSND = 90,AUE_SHMCTL = 91,AUE_SHMCTL_RMID = 92,AUE_SHMCTL_SET = 93,AUE_SHMCTL_STAT = 94,AUE_SHMGET = 95,AUE_SHMAT = 96,AUE_SHMDT = 97,AUE_SEMCTL = 98,AUE_SEMCTL_RMID = 99,AUE_SEMCTL_SET = 100,AUE_SEMCTL_STAT = 101,AUE_SEMCTL_GETNCNT = 102,AUE_SEMCTL_GETPID = 103,AUE_SEMCTL_GETVAL = 104,AUE_SEMCTL_GETALL = 105,AUE_SEMCTL_GETZCNT = 106,AUE_SEMCTL_SETVAL = 107,AUE_SEMCTL_SETALL = 108,AUE_SEMGET = 109,AUE_SEMOP = 110,AUE_CORE = 111,AUE_CLOSE = 112,AUE_SYSTEMBOOT = 113,AUE_ASYNC_DAEMON_EXIT = 114,AUE_NFSSVC_EXIT = 115,AUE_SETCMWPLABEL = 116,AUE_SETCLEARANCE = 117,AUE_FGETCMWLABEL = 118,AUE_FSETCMWLABEL = 119,AUE_GETCMWFSRANGE = 120,AUE_GETCMWLABEL = 121,AUE_GETFILEPRIV = 122,AUE_LGETCMWLABEL = 123,AUE_MKFSO = 124,AUE_SETCMWLABEL = 125,AUE_SETFILEPRIV = 126,AUE_SETPROCPRIV = 127,AUE_WRITEL = 128,AUE_WRITEVL = 129,AUE_GETAUID = 130,AUE_SETAUID = 131,AUE_GETAUDIT = 132,AUE_SETAUDIT = 133,AUE_GETUSERAUDIT = 134,AUE_SETUSERAUDIT = 135,AUE_AUDITSVC = 136,AUE_AUDITUSER = 137,AUE_AUDITON = 138,AUE_AUDITON_GTERMID = 139,AUE_AUDITON_STERMID = 140,AUE_AUDITON_GPOLICY = 141,AUE_AUDITON_SPOLICY = 142,AUE_AUDITON_GESTATE = 143,AUE_AUDITON_SESTATE = 144,AUE_AUDITON_GQCTRL = 145,AUE_AUDITON_SQCTRL = 146,AUE_GETKERNSTATE = 147,AUE_SETKERNSTATE = 148,AUE_GETPORTAUDIT = 149,AUE_AUDITSTAT = 150,AUE_REVOKE = 151,AUE_MAC = 152,AUE_ENTERPROM = 153,AUE_EXITPROM = 154,AUE_IFLOAT = 155,AUE_PFLOAT = 156,AUE_UPRIV = 157,AUE_IOCTL = 158,AUE_FIND_RH = 159,AUE_BADSATTR = 160,AUE_TN_GEN = 161,AUE_TFRWRD = 162,AUE_TN_BYPASS = 163,AUE_TN_ISPRIV = 164,AUE_TN_CKRT = 165,AUE_TN_CKIPOUT = 166,AUE_KTNETD = 167,AUE_STNETD = 168,AUE_HLTSR = 169,AUE_STRTSR = 170,AUE_FREESR = 171,AUE_TN_ACCRED = 172,AUE_ONESIDE = 173,AUE_MSGGETL = 174,AUE_MSGRCVL = 175,AUE_MSGSNDL = 176,AUE_SEMGETL = 177,AUE_SHMGETL = 178,AUE_GETMLDADORN = 179,AUE_GETSLDNAME = 180,AUE_MLDLSTAT = 181,AUE_MLDSTAT = 182,AUE_SOCKET = 183,AUE_SENDTO = 184,AUE_PIPE = 185,AUE_SOCKETPAIR = 186,AUE_SEND = 187,AUE_SENDMSG = 188,AUE_RECV = 189,AUE_RECVMSG = 190,AUE_RECVFROM = 191,AUE_READ = 192,AUE_GETDENTS = 193,AUE_LSEEK = 194,AUE_WRITE = 195,AUE_WRITEV = 196,AUE_NFS = 197,AUE_READV = 198,AUE_OSTAT = 199,AUE_SETUID = 200,AUE_STIME = 201,AUE_UTIME = 202,AUE_NICE = 203,AUE_OSETPGRP = 204,AUE_SETGID = 205,AUE_READL = 206,AUE_READVL = 207,AUE_FSTAT = 208,AUE_DUP2 = 209,AUE_MMAP = 210,AUE_AUDIT = 211,AUE_PRIOCNTLSYS = 212,AUE_MUNMAP = 213,AUE_SETEGID = 214,AUE_SETEUID = 215,AUE_PUTMSG = 216,AUE_GETMSG = 217,AUE_PUTPMSG = 218,AUE_GETPMSG = 219,AUE_AUDITSYS = 220,AUE_AUDITON_GETKMASK = 221,AUE_AUDITON_SETKMASK = 222,AUE_AUDITON_GETCWD = 223,AUE_AUDITON_GETCAR = 224,AUE_AUDITON_GETSTAT = 225,AUE_AUDITON_SETSTAT = 226,AUE_AUDITON_SETUMASK = 227,AUE_AUDITON_SETSMASK = 228,AUE_AUDITON_GETCOND = 229,AUE_AUDITON_SETCOND = 230,AUE_AUDITON_GETCLASS = 231,AUE_AUDITON_SETCLASS = 232,AUE_FUSERS = 233,AUE_STATVFS = 234,AUE_XSTAT = 235,AUE_LXSTAT = 236,AUE_LCHOWN = 237,AUE_MEMCNTL = 238,AUE_SYSINFO = 239,AUE_XMKNOD = 240,AUE_FORK1 = 241,AUE_MODCTL = 242,AUE_MODLOAD = 243,AUE_MODUNLOAD = 244,AUE_MODCONFIG = 245,AUE_MODADDMAJ = 246,AUE_SOCKACCEPT = 247,AUE_SOCKCONNECT = 248,AUE_SOCKSEND = 249,AUE_SOCKRECEIVE = 250,AUE_ACLSET = 251,AUE_FACLSET = 252,AUE_DOORFS = 253,AUE_DOORFS_DOOR_CALL = 254,AUE_DOORFS_DOOR_RETURN = 255,AUE_DOORFS_DOOR_CREATE = 256,AUE_DOORFS_DOOR_REVOKE = 257,AUE_DOORFS_DOOR_INFO = 258,AUE_DOORFS_DOOR_CRED = 259,AUE_DOORFS_DOOR_BIND = 260,AUE_DOORFS_DOOR_UNBIND = 261,AUE_P_ONLINE = 262,AUE_PROCESSOR_BIND = 263,AUE_INST_SYNC = 264,AUE_SOCKCONFIG = 265,AUE_SETAUDIT_ADDR = 266,AUE_GETAUDIT_ADDR = 267,AUE_UMOUNT2 = 268,};
enum MACRO_AUE_at {AUE_at_create = 6144,AUE_at_delete = 6145,AUE_at_perm = 6146,AUE_cron_invoke = 6147,AUE_crontab_create = 6148,AUE_crontab_delete = 6149,AUE_crontab_perm = 6150,AUE_inetd_connect = 6151,AUE_login = 6152,AUE_logout = 6153,AUE_telnet = 6154,AUE_rlogin = 6155,AUE_mountd_mount = 6156,AUE_mountd_umount = 6157,AUE_rshd = 6158,AUE_su = 6159,AUE_halt_solaris = 6160,AUE_reboot_solaris = 6161,AUE_rexecd = 6162,AUE_passwd = 6163,AUE_rexd = 6164,AUE_ftpd = 6165,AUE_init_solaris = 6166,AUE_uadmin_solaris = 6167,AUE_shutdown_solaris = 6168,AUE_poweroff_solaris = 6169,AUE_crontab_mod = 6170,AUE_allocate_succ = 6200,AUE_allocate_fail = 6201,AUE_deallocate_succ = 6202,AUE_deallocate_fail = 6203,AUE_listdevice_succ = 6205,AUE_listdevice_fail = 6206,AUE_create_user = 6207,AUE_modify_user = 6208,AUE_delete_user = 6209,AUE_disable_user = 6210,AUE_enable_user = 6211,};
enum MACRO_AUF {AUF_NOOP = 0x0,AUF_POINT = 0x1,AUF_DUP = 0x2,AUF_COPY_IN = 0x4,AUF_SKIP = 0x8,};
enum MACRO_AUP {AUP_BINARY = 0,AUP_OCTAL = 1,AUP_DECIMAL = 2,AUP_HEX = 3,AUP_STRING = 4,};
enum MACRO_AUR {AUR_BYTE = 0,AUR_CHAR = 0,AUR_SHORT = 1,AUR_INT = 2,AUR_INT32 = 2,AUR_INT64 = 3,};
enum MACRO_AUT {AUT_INVALID = 0x0,AUT_OTHER_FILE = 0x11,AUT_OTHER_FILE32 = 0x11,AUT_OHEADER = 0x12,AUT_TRAILER = 0x13,AUT_HEADER = 0x14,AUT_HEADER32 = 0x14,AUT_HEADER32_EX = 0x15,AUT_TRAILER_MAGIC = 0xFFFFB105,AUT_DATA = 0x21,AUT_IPC = 0x22,AUT_PATH = 0x23,AUT_SUBJECT = 0x24,AUT_SUBJECT32 = 0x24,AUT_SERVER = 0x25,AUT_SERVER32 = 0x25,AUT_PROCESS = 0x26,AUT_PROCESS32 = 0x26,AUT_RETURN = 0x27,AUT_RETURN32 = 0x27,AUT_TEXT = 0x28,AUT_OPAQUE = 0x29,AUT_IN_ADDR = 0x2A,AUT_IP = 0x2B,AUT_IPORT = 0x2C,AUT_ARG = 0x2D,AUT_ARG32 = 0x2D,AUT_SOCKET = 0x2E,AUT_SEQ = 0x2F,AUT_ACL = 0x30,AUT_ATTR = 0x31,AUT_IPC_PERM = 0x32,AUT_LABEL = 0x33,AUT_GROUPS = 0x34,AUT_ILABEL = 0x35,AUT_SLABEL = 0x36,AUT_CLEAR = 0x37,AUT_PRIV = 0x38,AUT_UPRIV = 0x39,AUT_LIAISON = 0x3A,AUT_NEWGROUPS = 0x3B,AUT_EXEC_ARGS = 0x3C,AUT_EXEC_ENV = 0x3D,AUT_ATTR32 = 0x3E,AUT_XATOM = 0x40,AUT_XOBJ = 0x41,AUT_XPROTO = 0x42,AUT_XSELECT = 0x43,AUT_XCOLORMAP = 0x44,AUT_XCURSOR = 0x45,AUT_XFONT = 0x46,AUT_XGC = 0x47,AUT_XPIXMAP = 0x48,AUT_XPROPERTY = 0x49,AUT_XWINDOW = 0x4A,AUT_XCLIENT = 0x4B,AUT_CMD = 0x51,AUT_EXIT = 0x52,AUT_HOST = 0x70,AUT_ARG64 = 0x71,AUT_RETURN64 = 0x72,AUT_ATTR64 = 0x73,AUT_HEADER64 = 0x74,AUT_SUBJECT64 = 0x75,AUT_SERVER64 = 0x76,AUT_PROCESS64 = 0x77,AUT_OTHER_FILE64 = 0x78,AUT_HEADER64_EX = 0x79,AUT_SUBJECT32_EX = 0x7A,AUT_PROCESS32_EX = 0x7B,AUT_SUBJECT64_EX = 0x7C,AUT_PROCESS64_EX = 0x7D,AUT_IN_ADDR_EX = 0x7E,AUT_SOCKET_EX = 0x7F,};
enum MACRO_AUTH {AUTH_MMAPLEN = 1024,};
enum MACRO_AUTHATTR {AUTHATTR_DB_NCOL = 6,AUTHATTR_DB_NKEYCOL = 1,AUTHATTR_KEYCOL0 = 0,};
enum MACRO_AUTH_F {AUTH_F_RPCTIMESYNC = 0x1,AUTH_F_TRYNONE = 0x2,AUTH_NONE = 0x0,AUTH_NULL = 0x0,AUTH_SYS = 0x1,AUTH_UNIX = 0x1,AUTH_SHORT = 0x2,AUTH_DH = 0x3,AUTH_DES = 0x3,AUTH_KERB = 0x4,};
enum MACRO_AUTH_LOOPBACK {AUTH_LOOPBACK = 21982,};
enum MACRO_AUTOFS {AUTOFS_MAXPATHLEN = 1024,AUTOFS_MAXCOMPONENTLEN = 255,AUTOFS_MAXOPTSLEN = 1024,AUTOFS_DAEMONCOOKIE = 100000,AUTOFS_PROG = 100099,AUTOFS_VERS = 3,AUTOFS_NULL = 0,AUTOFS_MOUNT = 1,AUTOFS_UNMOUNT = 2,AUTOFS_READDIR = 3,AUTOFS_LOOKUP = 4,};
enum MACRO_AUTOPUSH {SET_AUTOPUSH = 0,GET_AUTOPUSH = 1,CLR_AUTOPUSH = 2,};
enum MACRO_AUX {AUX_MBO = 0xF0,AUX_MBO4M = 0xC0,AUX_TC4M = 0x2,AUX_TC = 0x4,AUX_DENSITY = 0x20,AUX_DISKCHG = 0x10,AUX_DRVSELECT = 0x8,AUX_EJECT = 0x2,AUX_MEDIUM_DENSITY = 0x0,AUX_HIGH_DENSITY = 0x2,};
enum MACRO_AUXESZ {AUXESZ = 18,};
enum MACRO_AU_BUFSIZE {AU_BUFSIZE = 128,AU_PAGE = 4096,};
enum MACRO_AU_CLASS {AU_CLASS_NAME_MAX = 8,AU_CLASS_DESC_MAX = 72,AU_EVENT_NAME_MAX = 30,AU_EVENT_DESC_MAX = 50,AU_EVENT_LINE_MAX = 256,};
enum MACRO_AU_IPv4 {AU_IPv4 = 4,AU_IPv6 = 16,};
enum MACRO_AU_MAXMEM {AU_MAXMEM = 2097152,};
enum MACRO_AU_PRS {AU_PRS_SUCCESS = 1,AU_PRS_FAILURE = 2,AU_PRS_BOTH = 3,AU_PRS_USECACHE = 0,AU_PRS_REREAD = 1,AU_CACHE_FREE = 0,AU_CACHE_NAME = 1,AU_CACHE_NUMBER = 2,AU_TO_NO_WRITE = 0,AU_TO_WRITE = 1,};
enum MACRO_AV {AV_SPARC_HWMUL_32x32 = 1,AV_SPARC_HWDIV_32x32 = 2,AV_SPARC_HWFSMULD = 4,};
enum MACRO_AV_INT {AV_INT_SPURIOUS = -1,};
enum MACRO_AYT {AYT = 246,};
enum MACRO_A_GETPOLICY {A_GETPOLICY = 2,A_SETPOLICY = 3,A_GETKMASK = 4,A_SETKMASK = 5,A_GETQCTRL = 6,A_SETQCTRL = 7,A_GETCWD = 8,A_GETCAR = 9,A_GETSTAT = 12,A_SETSTAT = 13,A_SETUMASK = 14,A_SETSMASK = 15,A_GETCOND = 20,A_SETCOND = 21,A_GETCLASS = 22,A_SETCLASS = 23,A_GETPINFO = 24,A_SETPMASK = 25,A_SETFSIZE = 26,A_GETFSIZE = 27,A_GETPINFO_ADDR = 28,A_GETKAUDIT = 29,A_SETKAUDIT = 30,};
enum MACRO_A_MAXPATH {A_MAXPATH = 1024,};
enum MACRO_A_NUL {A_NUL = 0,A_SOH = 1,A_STX = 2,A_ETX = 3,A_EOT = 4,A_ENQ = 5,A_ACK = 6,A_BEL = 7,A_BS = 8,A_HT = 9,A_NL = 10,A_LF = 10,A_VT = 11,A_FF = 12,A_NP = 12,A_CR = 13,A_SO = 14,A_SI = 15,A_DLE = 16,A_DC1 = 17,A_DC2 = 18,A_DC3 = 19,A_DC4 = 20,A_NAK = 21,A_SYN = 22,A_ETB = 23,A_CAN = 24,A_EM = 25,A_SUB = 26,A_ESC = 27,A_FS = 28,A_GS = 29,A_RS = 30,A_US = 31,A_DEL = 127,A_CSI = 155,};
enum MACRO_A_REBOOT {A_REBOOT = 1,A_SHUTDOWN = 2,A_FREEZE = 3,A_REMOUNT = 4,A_DUMP = 5,A_FTRACE = 15,A_SWAPCTL = 16,};
enum MACRO_AllTextDescriptors {AllTextDescriptors = 0x7F,};
enum MACRO_B {B_BUSY = 0x1,B_DONE = 0x2,B_ERROR = 0x4,B_PAGEIO = 0x10,B_PHYS = 0x20,B_READ = 0x40,B_WRITE = 0x100,B_KERNBUF = 0x8,B_WANTED = 0x80,B_AGE = 0x200,B_ASYNC = 0x400,B_DELWRI = 0x800,B_STALE = 0x1000,B_DONTNEED = 0x2000,B_REMAPPED = 0x4000,B_FREE = 0x8000,B_INVAL = 0x10000,B_FORCE = 0x20000,B_HEAD = 0x40000,B_NOCACHE = 0x80000,B_TRUNC = 0x100000,B_SHADOW = 0x200000,B_RETRYWRI = 0x400000,};
enum MACRO_B0 {B0 = 0,B50 = 1,B75 = 2,};
enum MACRO_B110 {B110 = 3,B134 = 4,};
enum MACRO_B115200 {B115200 = 18,};
enum MACRO_B1200 {B1200 = 9,};
enum MACRO_B150 {B150 = 5,};
enum MACRO_B153600 {B153600 = 19,};
enum MACRO_B1800 {B1800 = 10,};
enum MACRO_B19200 {B19200 = 14,};
enum MACRO_B200 {B200 = 6,};
enum MACRO_B230400 {B230400 = 20,};
enum MACRO_B2400 {B2400 = 11,};
enum MACRO_B300 {B300 = 7,B600 = 8,};
enum MACRO_B307200 {B307200 = 21,};
enum MACRO_B38400 {B38400 = 15,};
enum MACRO_B460800 {B460800 = 22,};
enum MACRO_B4800 {B4800 = 12,};
enum MACRO_B57600 {B57600 = 16,};
enum MACRO_B76800 {B76800 = 17,};
enum MACRO_B9600 {B9600 = 13,};
enum MACRO_BA {BA_DYNAMIC = 0,BA_PHDR = 1,BA_PHNUM = 2,BA_PHENT = 3,BA_ENTRY = 4,BA_PAGESZ = 5,BA_LPAGESZ = 6,BA_LDELF = 7,BA_LDSHDR = 8,BA_LDNAME = 9,BA_BSS = 10,BA_IFLUSH = 11,BA_CPU = 12,BA_MMU = 13,BA_GOTADDR = 14,BA_NEXTGOT = 15,BA_NUM = 16,};
enum MACRO_BAD {BAD_SYS = -13,};
enum MACRO_BADCONT {BADCONT = -1,};
enum MACRO_BADFTYPE {BADFTYPE = 63,};
enum MACRO_BADINPUT {BADINPUT = 1,};
enum MACRO_BADMAJOR : __int64 {BADMAJOR = 4294967295,};
enum MACRO_BADMINOR : __int64 {BADMINOR = 4294967295,};
enum MACRO_BADMODE : __int64 {BADMODE = 4294967295,};
enum MACRO_BAD_CIS {BAD_CIS_ADDR = 0x80000000,};
enum MACRO_BAD_IDENTIFY {BAD_IDENTIFY = 0x18,};
enum MACRO_BARRIER {BARRIER_LOCK = 0x100,GRANTED_LOCK = 0x200,CANCELLED_LOCK = 0x400,DELETED_LOCK = 0x800,INTERRUPTED_LOCK = 0x1000,LOCKMGR_LOCK = 0x2000,PXFS_LOCK = 0x4000,};
enum MACRO_BAUD {RX_BAUD = 13,TX_BAUD = 13,};
enum MACRO_BBLOCK {BBLOCK = 0,SBLOCK = 16,};
enum MACRO_BBOFF {BBOFF = 0,SBOFF = 8192,};
enum MACRO_BBSIZE {BBSIZE = 8192,};
enum MACRO_BC {BC_BASE_MAX = 99,BC_DIM_MAX = 2048,BC_SCALE_MAX = 99,BC_STRING_MAX = 1000,};
enum MACRO_BIAS {INTEGER_BIAS = 31,LONGLONG_BIAS = 63,SINGLE_BIAS = 127,DOUBLE_BIAS = 1023,EXTENDED_BIAS = 16383,};
enum MACRO_BIT {WORD_BIT = 32,LONG_BIT = 32,};
enum MACRO_BITSPERBYTE {BITSPERBYTE = 8,};
enum MACRO_BLK {BLK_EOR = 0x80,BLK_EOF = 0x40,BLK_ERRORS = 0x20,BLK_RESTART = 0x10,BLK_BYTECOUNT = 0x2,};
enum MACRO_BLKSZ {BLKSZ = 512,};
enum MACRO_BLKTYPE {BLKTYPE = 52,};
enum MACRO_BLOCK {BLOCK = 0,NETWORK = 1,BYTE = 2,};
enum MACRO_BMAC {BMAC_XIFC_MODE_SERIAL = 0x8,BMAC_XIFC_LPBK = 0x4,BMAC_XIFC_RSVD = 0x2,BMAC_XIFC_ENAB = 0x1,BMAC_STAT_DEFER = 0x8000,BMAC_STAT_NETCOLL = 0x4000,BMAC_STAT_LCOL = 0x2000,BMAC_STAT_EXCCOLL = 0x1000,BMAC_STAT_NORCOLL = 0x800,BMAC_STAT_MAXPKT = 0x400,BMAC_STAT_UFLO = 0x200,BMAC_STAT_TXINTR = 0x100,BMAC_STAT_RXCV = 0x40,BMAC_STAT_OFLO = 0x20,BMAC_STAT_LENGTH = 0x10,BMAC_STAT_CRC = 0x8,BMAC_STAT_ALNERR = 0x4,BMAC_STAT_RXFRMC = 0x2,BMAC_STAT_RXINTR = 0x1,BMAC_MASK_DEFERM = 0x8000,BMAC_MASK_NETCOLLM = 0x4000,BMAC_MASK_LCOLM = 0x2000,BMAC_MASK_EXCCOLLM = 0x1000,BMAC_MASK_NORCOLLM = 0x800,BMAC_MASK_MAXPKTM = 0x400,BMAC_MASK_UFLOM = 0x200,BMAC_MASK_TXINTRM = 0x100,BMAC_MASK_RXCV = 0x40,BMAC_MASK_OFLOM = 0x20,BMAC_MASK_LENGTH = 0x10,BMAC_MASK_CRCM = 0x8,BMAC_MASK_ALNERRM = 0x4,BMAC_MASK_RXFRMCM = 0x2,BMAC_MASK_RXINTRM = 0x1,BMAC_MASK_OTHER = 0x7E7E,BMAC_MASK_TINT_RINT = 0x101,BMAC_TXCFG_FDUP = 0x200,BMAC_TXCFG_NFCS = 0x80,BMAC_TXCFG_IGCOLL = 0x40,BMAC_TXCFG_SLOW = 0x20,BMAC_TXCFG_FIFO = 0x10,BMAC_TXCFG_ENAB = 0x1,BMAC_RXCFG_ADDR = 0x1000,BMAC_RXCFG_HASH = 0x800,BMAC_RXCFG_GRPROM = 0x400,BMAC_RXCFG_MYOWN = 0x200,BMAC_RXCFG_CRC = 0x100,BMAC_RXCFG_ERR = 0x80,BMAC_RXCFG_PROMIS = 0x40,BMAC_RXCFG_STRIP = 0x20,BMAC_RXCFG_FIFO = 0xE,BMAC_RXCFG_ENAB = 0x1,};
enum MACRO_BMACLNKTIME {BMACLNKTIME = 500000,};
enum MACRO_BMACRXRSTDELAY {BMACRXRSTDELAY = 40,};
enum MACRO_BMACTXRSTDELAY {BMACTXRSTDELAY = 125,};
enum MACRO_BMAC_TPAL1 {BMAC_TPAL1_XM_SERIAL = 1,BMAC_TPAL1_LB = 2,BMAC_TPAL1_MS = 4,BMAC_TPAL1_LINKTESTEN = 8,BMAC_TPAL1_LINKSTATUS = 16,BMAC_TPAL1_PGYBAC_DIS = 1,BMAC_TPAL1_LOOP_EN = 2,BMAC_TPAL1_CLK_LOOP_EN = 4,BMAC_TPAL1_CLK_FSTSLW = 8,BMAC_TPAL2_MDC_BIT_POS = 0,BMAC_TPAL2_MDIO_EN_BIT_POS = 1,BMAC_TPAL2_MII_MDIO_BIT_POS = 2,BMAC_TPAL2_PGYBAC_MDIO_BIT_POS = 3,BMAC_TPAL2_MDC = 1,BMAC_TPAL2_MDIO_EN = 2,BMAC_TPAL2_MII_MDIO = 4,BMAC_TPAL2_PGYBAC_MDIO = 8,BMAC_EXTERNAL_PHYAD = 0,BMAC_INTERNAL_PHYAD = 1,BMAC_MII_CTLREG = 0,BMAC_MII_STATREG = 1,BMAC_MII_CTL_RESET = 32768,BMAC_MII_CTL_LOOPBACK = 16384,BMAC_MII_CTL_SPEED_100 = 8192,BMAC_MII_CTL_AUTO_SPEED = 4096,BMAC_MII_CTL_POWER_DOWN = 2048,BMAC_MII_CTL_ISOLATE = 1024,BMAC_MII_STAT_LINKUP = 4,BMAC_MII_STAT_JABBER = 2,BMAC_MII_STAT_EXT_CAP = 1,};
enum MACRO_BMAC_XIFC {BMAC_XIFC_XIFLPBK = 2,BMAC_XIFC_MIILPBK = 4,BMAC_XIFC_MIIBUFDIS = 8,BMAC_XIFC_SQETSTENB = 16,BMAC_XIFC_SQETSTWIN = 992,BMAC_XIFC_LANCE_ENAB = 16,BMAC_XIFC_LANCE_IPG0 = 992,BMAC_XIFC_IPG0_SHIFT = 5,BMAC_TX_RESET = 1,BMAC_TXCFG_RES1 = 30,BMAC_TXCFG_NBKOFF = 256,BMAC_TXCFG_FDX = 512,BMAC_RXCFG_RES1 = 30,};
enum MACRO_BO {BO_NO_ALIGN = 0x1000,BO_ALIGN_L3 = 0x1000,BO_ALIGN_L2 = 0x40000,BO_ALIGN_L1 = 0x1000000,BO_VERSION = 0x9,};
enum MACRO_BOOL {TRUE = 1,FALSE = 0,};
enum MACRO_BOOT {BOOT_SVC_FAIL = -1,BOOT_SVC_OK = 1,};
enum MACRO_BOOTPARAMPROC {BOOTPARAMPROC_WHOAMI = 1,BOOTPARAMPROC_GETFILE = 2,};
enum MACRO_BOOTPARAMPROG {BOOTPARAMPROG = 100026,};
enum MACRO_BOOTPARAMVERS {BOOTPARAMVERS = 1,};
enum MACRO_BOOTSZ {BOOTSZ = 446,};
enum MACRO_BORDER_GRAVITY {HORIZ_BORDER_GRAVITY = 0x20,VERT_BORDER_GRAVITY = 0x40,};
enum MACRO_BOTTOMFUNC {BOTTOMFUNC = 0x630,};
enum MACRO_BPP {BPP_SLCTIN_PIN = 0x1,BPP_AFX_PIN = 0x2,BPP_INIT_PIN = 0x4,BPP_V1_PIN = 0x8,BPP_V2_PIN = 0x10,BPP_V3_PIN = 0x20,BPP_ALL_OUT_PINS = 0x3F,BPP_ERR_PIN = 0x1,BPP_SLCT_PIN = 0x2,BPP_PE_PIN = 0x4,BPP_ALL_IN_PINS = 0x7,BPP_ERR_ERR = 0x1,BPP_SLCT_ERR = 0x2,BPP_PE_ERR = 0x4,BPP_SLCTIN_ERR = 0x10,BPP_BUSY_ERR = 0x40,BPP_INT_PEND = 0x1,BPP_ERR_PEND = 0x2,BPP_DRAINING = 0xC,BPP_INT_EN = 0x10,BPP_FLUSH = 0x20,BPP_SLAVE_ERR = 0x40,BPP_RESET_BPP = 0x80,BPP_READ = 0x100,BPP_ENABLE_DMA = 0x200,BPP_ENABLE_BCNT = 0x2000,BPP_TERMINAL_CNT = 0x4000,BPP_BURST_SIZES_MASK = 0xC0000,BPP_TC_INTR_DISABLE = 0x800000,BPP_EN_CHAIN_DMA = 0x1000000,BPP_DMA_ON = 0x2000000,BPP_ADDR_VALID = 0x4000000,BPP_NEXT_VALID = 0x8000000,BPP_DEVICE_ID_MASK = 0xF0000000,BPP_BURST_4WORD = 0x0,BPP_BURST_16BYTE = 0x0,BPP_BURST_DEFAULT = 0x0,BPP_BURST_8WORD = 0x40000,BPP_BURST_32BYTE = 0x40000,BPP_BURST_1WORD = 0x80000,BPP_BURST_4BYTE = 0x80000,BPP_BURST_NOBURST = 0x80000,BPP_HIOD_DEVID = 0x40000000,BPP_DMA2P_DEVID = 0xA0000000,BPP_MAX_DMA = 0x1000000,BPP_DSS_MASK = 0x7F,BPP_DSS_SIZE = 0x7F,BPP_DSW_MASK = 0x7F00,BPP_DSW_SIZE = 0x7F,BPP_CNTR_TEST = 0x8000,BPP_SEVEN_BITS = 0x7F,BPP_EN_VERSATEC = 0x1,BPP_VERSATEC_INTERLOCK = 0x2,BPP_IDLE = 0x8,BPP_SRST = 0x80,BPP_ACK_OP = 0x100,BPP_BUSY_OP = 0x200,BPP_EN_DIAG = 0x400,BPP_ACK_BIDIR = 0x800,BPP_BUSY_BIDIR = 0x1000,BPP_DS_BIDIR = 0x2000,BPP_DMA_DATA = 0x4000,BPP_EN_MEM_CLR = 0x8000,BPP_DS_PIN = 0x1,BPP_ACK_PIN = 0x2,BPP_BUSY_PIN = 0x4,BPP_DIRECTION = 0x8,BPP_ERR_IRQ_EN = 0x1,BPP_ERR_IRP = 0x2,BPP_SLCT_IRQ_EN = 0x4,BPP_SLCT_IRP = 0x8,BPP_PE_IRQ_EN = 0x10,BPP_PE_IRP = 0x20,BPP_BUSY_IRQ_EN = 0x40,BPP_BUSY_IRP = 0x80,BPP_ACK_IRQ_EN = 0x100,BPP_DS_IRQ_EN = 0x200,BPP_ERR_IRQ = 0x400,BPP_SLCT_IRQ = 0x800,BPP_PE_IRQ = 0x1000,BPP_BUSY_IRQ = 0x2000,BPP_ACK_IRQ = 0x4000,BPP_DS_IRQ = 0x8000,BPP_ALL_IRQS = 0xFC00,};
enum MACRO_BPPIOC {BPPIOC_TESTIO = 536896006,};
enum MACRO_BPPIOC_TESTTIMEOUT {BPPIOC_TESTTIMEOUT = 536896012,};
enum MACRO_BPP_ISOPEN {BPP_ISOPEN = 0x1,BPP_SUSPENDED = 0x2,BPP_VERSATEC = 0x4,BPP_BUSY = 0x8,BPP_ISWAITING = 0x10,};
enum MACRO_BPRI {BPRI_LO = 1,BPRI_MED = 2,BPRI_HI = 3,BPRI_FT = 4,};
enum MACRO_BPRT {BPRT = 0x59,};
enum MACRO_BREAK {BREAK = 243,};
enum MACRO_BRK {BRK = 0x0,HIQ = 0x1,};
enum MACRO_BRK_DELAY {BRK_DELAY = 0x28,};
enum MACRO_BS0 {BS0 = 0,VTDLY = 16384,};
enum MACRO_BSM {BSM_GETAUID = 19,BSM_SETAUID = 20,BSM_GETAUDIT = 21,BSM_SETAUDIT = 22,BSM_GETUSERAUDIT = 23,BSM_SETUSERAUDIT = 24,BSM_AUDIT = 25,BSM_AUDITUSER = 26,BSM_AUDITSVC = 27,BSM_AUDITON = 28,BSM_AUDITCTL = 29,BSM_GETKERNSTATE = 30,BSM_SETKERNSTATE = 31,BSM_GETPORTAUDIT = 32,BSM_REVOKE = 33,BSM_AUDITSTAT = 34,BSM_GETAUDIT_ADDR = 35,BSM_SETAUDIT_ADDR = 36,};
enum MACRO_BSM_TEXTBUFSZ {BSM_TEXTBUFSZ = 256,};
enum MACRO_BT {BT_UISHIFT = 5,BT_NBIPUI = 32,BT_UIMASK = 31,};
enum MACRO_BT_ULSHIFT {BT_ULSHIFT = 5,BT_NBIPUL = 32,BT_ULMASK = 31,BT_ULMAXMASK = -1,};
enum MACRO_BUFSIZ {BUFSIZ = 1024,};
enum MACRO_BULK {BULK_ONLY_RESET = 0xFF,BULK_ONLY_GET_MAXLUN = 0xA1,};
enum MACRO_BURST1 {BURST1 = 0x1,BURST2 = 0x2,BURST4 = 0x4,BURST8 = 0x8,BURST16 = 0x10,BURST32 = 0x20,BURST64 = 0x40,};
enum MACRO_BURST128 {BURST128 = 0x80,};
enum MACRO_BUS {BUS_ADRALN = 1,BUS_ADRERR = 2,BUS_OBJERR = 3,};
enum MACRO_BUSY {BUSY_LOOP_C = 200000,BUSY_COUNT_C = 10,};
enum MACRO_BUSYTIMEOUT {NO_BUSYTIMEOUT = 0,MIN_BUSYTIMEOUT = 0,MAX_BUSYTIMEOUT = 7200,};
enum MACRO_BUSY_0 {BUSY = 0x20,WIOC = 0x40,WGETTY = 0x80,TTSTOP = 0x100,EXTPROC = 0x200,TACT = 0x400,CLESC = 0x800,RTO = 0x1000,TTIOW = 0x2000,TTXON = 0x4000,TTXOFF = 0x8000,};
enum MACRO_BUS_ACTIVE {BUS_ACTIVE = 0x10,BUS_QUIESCED = 0x20,BUS_SHUTDOWN = 0x40,};
enum MACRO_BUT {BUT_FIRST = 32544,BUT_LAST = 32553,};
enum MACRO_BUTTON {BUTTON_RELEASED = 0,BUTTON_PRESSED = 1,BUTTON_CLICKED = 2,BUTTON_DOUBLE_CLICKED = 3,BUTTON_TRIPLE_CLICKED = 4,};
enum MACRO_BUTTON1 {BUTTON1_RELEASED = 0x1,BUTTON1_PRESSED = 0x2,BUTTON1_CLICKED = 0x4,BUTTON1_DOUBLE_CLICKED = 0x8,BUTTON1_TRIPLE_CLICKED = 0x10,};
enum MACRO_BUTTON2 {BUTTON2_RELEASED = 0x20,BUTTON2_PRESSED = 0x40,BUTTON2_CLICKED = 0x80,BUTTON2_DOUBLE_CLICKED = 0x100,BUTTON2_TRIPLE_CLICKED = 0x200,};
enum MACRO_BUTTON3 {BUTTON3_RELEASED = 0x400,BUTTON3_PRESSED = 0x800,BUTTON3_CLICKED = 0x1000,BUTTON3_DOUBLE_CLICKED = 0x2000,BUTTON3_TRIPLE_CLICKED = 0x4000,};
enum MACRO_BW2 {BW2_FBSIZE = 131072,BW2_FBSIZE_HIRES = 262144,BW2_USECOPYMEM = 1,};
enum MACRO_BW2BYTES {BW2BYTES = 129600,};
enum MACRO_BW2HSIZEX {BW2HSIZEX = 1600,};
enum MACRO_BW2HSIZEY {BW2HSIZEY = 1280,BW2HBYTES = 256000,};
enum MACRO_BW2HSQUAREBYTES {BW2HSQUAREBYTES = 259200,};
enum MACRO_BW2HSQUARESIZEX {BW2HSQUARESIZEX = 1440,};
enum MACRO_BW2HSQUARESIZEY {BW2HSQUARESIZEY = 1440,};
enum MACRO_BW2SIZEX {BW2SIZEX = 1152,};
enum MACRO_BW2SIZEY {BW2SIZEY = 900,};
enum MACRO_BW2SQUARESIZEX {BW2SQUARESIZEX = 1024,};
enum MACRO_BW2SQUARESIZEY {BW2SQUARESIZEY = 1024,BW2SQUAREBYTES = 131072,};
enum MACRO_BYTE {BYTE_ORDER = 4321,};
enum MACRO_BYTES {BYTES_PER_XDR_UNIT = 4,};
enum MACRO_BYTESIZ {BYTESIZ = 8,};
enum MACRO_C {C_IRUSR = 0x100,C_IWUSR = 0x80,C_IXUSR = 0x40,C_IRGRP = 0x20,C_IWGRP = 0x10,C_IXGRP = 0x8,C_IROTH = 0x4,C_IWOTH = 0x2,C_IXOTH = 0x1,C_ISUID = 0x800,C_ISGID = 0x400,C_ISVTX = 0x200,C_ISDIR = 0x4000,C_ISFIFO = 0x1000,C_ISREG = 0x8000,C_ISBLK = 0x6000,C_ISCHR = 0x2000,C_ISCTG = 0x9000,C_ISLNK = 0xA000,C_ISSOCK = 0xC000,};
enum MACRO_CACHE {CACHE_NOCACHE = 0x1,CACHE_ALLOC_PENDING = 0x4,CACHE_NOFILL = 0x8,CACHE_GARBAGE_COLLECT = 0x10,CACHE_CACHEW_THREADRUN = 0x20,CACHE_CACHEW_THREADEXIT = 0x40,CACHE_DIRTY = 0x80,CACHE_PACKED_PENDING = 0x100,CACHE_CHECK_RLTYPE = 0x200,};
enum MACRO_CACHEFS {CACHEFS_PREFIX_LEN = 5,};
enum MACRO_CACHEFSIO {CACHEFSIO_PACK = 536897105,CACHEFSIO_UNPACK = 536897106,CACHEFSIO_UNPACKALL = 536897107,CACHEFSIO_PACKINFO = 536897108,CACHEFSIO_DCMD = 536897109,};
enum MACRO_CACHEFS_DEBUG {CACHEFS_DEBUG_DEPTH = 16,};
enum MACRO_CACHEFS_MAX {CACHEFS_MAX_APOP_INQUEUE = 50,};
enum MACRO_CACHEFS_PACKED {CACHEFS_PACKED_FILE = 1,CACHEFS_PACKED_DATA = 2,CACHEFS_PACKED_NOCACHE = 4,CACHEFS_LOG_MAGIC = 32321,CACHEFS_LOG_FILE_REV = 2,CACHEFS_LOG_MOUNT = 1,CACHEFS_LOG_UMOUNT = 2,CACHEFS_LOG_GETPAGE = 3,CACHEFS_LOG_READDIR = 4,CACHEFS_LOG_READLINK = 5,CACHEFS_LOG_REMOVE = 6,CACHEFS_LOG_RMDIR = 7,CACHEFS_LOG_TRUNCATE = 8,CACHEFS_LOG_PUTPAGE = 9,CACHEFS_LOG_CREATE = 10,CACHEFS_LOG_MKDIR = 11,CACHEFS_LOG_RENAME = 12,CACHEFS_LOG_SYMLINK = 13,CACHEFS_LOG_POPULATE = 14,CACHEFS_LOG_CSYMLINK = 15,CACHEFS_LOG_FILLDIR = 16,CACHEFS_LOG_MDCREATE = 17,CACHEFS_LOG_GPFRONT = 18,CACHEFS_LOG_RFDIR = 19,CACHEFS_LOG_UALLOC = 20,CACHEFS_LOG_CALLOC = 21,CACHEFS_LOG_NOCACHE = 22,CACHEFS_LOG_NUMRECS = 22,};
enum MACRO_CALLB {CALLB_CPR_START = 1,CALLB_CPR_SAFE = 2,CALLB_CPR_ALWAYS_SAFE = 4,CALLB_MAX_RETRY = 3,CALLB_THREAD_DELAY = 10,};
enum MACRO_CALLOUT {CALLOUT_FANOUT_BITS = 3,CALLOUT_TYPE_BITS = 1,CALLOUT_NTYPES = 2,CALLOUT_FANOUT = 8,CALLOUT_FANOUT_MASK = 7,CALLOUT_COUNTER_SHIFT = 4,CALLOUT_COUNTER_LOW = 16,CALLOUT_TABLES = 16,CALLOUT_TABLE_MASK = 15,CALLOUT_LONGTERM_TICKS = 16384,CALLOUT_BUCKETS = 512,CALLOUT_BUCKET_MASK = 511,CALLOUT_THREADS = 2,CALLOUT_REALTIME = 0,CALLOUT_NORMAL = 1,};
enum MACRO_CANT {CANT_ESTABLISH_EXCHANGE = 0x18,};
enum MACRO_CAPSLOCK {CAPSLOCK = 0,CAPSMASK = 1,};
enum MACRO_CARR {CARR_ON = 0x10,};
enum MACRO_CARTRIDGE {CARTRIDGE_PROT_CMD = 0xC,TRANSLATE_LBA_CMD = 0x22,READ_FORMAT_CAP_CMD = 0x23,FORMAT_VERIFY_CMD = 0x24,READ_LONG_CMD = 0x3E,WRITE_LONG_CMD = 0x3F,};
enum MACRO_CARTRIDGETREC {CARTRIDGETREC = 63,};
enum MACRO_CB {CB_PROG = 100302,CB_VERS = 1,};
enum MACRO_CBAUD {CBAUD = 0xF,CSIZE = 0x30,};
enum MACRO_CBPROC {CBPROC_RECEIVE = 1,CBPROC_FINISH = 2,CBPROC_ERROR = 3,};
enum MACRO_CBW {CBW_SIGNATURE = 0x43425355,CBW_DIR_IN = 0x80,CBW_DIR_OUT = 0x0,CBW_CDB_LEN = 0x10,};
enum MACRO_CB_0 {CB = 0x10,};
enum MACRO_CB_CL {CB_CL_CPR_DAEMON = 0,CB_CL_CPR_VM = 1,CB_CL_CPR_CALLOUT = 2,CB_CL_CPR_OBP = 3,CB_CL_CPR_FB = 4,CB_CL_PANIC = 5,CB_CL_CPR_RPC = 6,CB_CL_CPR_PROMPRINTF = 7,CB_CL_UADMIN = 8,CB_CL_CPR_PM = 9,CB_CL_HALT = 10,CB_CL_CPR_DMA = 11,CB_CL_CPR_POST_USER = 12,};
enum MACRO_CB_CODE {CB_CODE_CPR_CHKPT = 0,CB_CODE_CPR_RESUME = 1,};
enum MACRO_CC {CC_SET_OPTIONS = 1,CC_GET_OPTIONS = 2,CC_SET_GLOBAL_PATH = 3,CC_GET_GLOBAL_PATH = 4,CC_SET_PROCESS_PATH = 5,CC_GET_PROCESS_PATH = 6,CC_GLOBAL_PATH = 1,CC_PROCESS_PATH = 2,CC_GLOBAL_SETID = 4,CC_PROCESS_SETID = 8,CC_GLOBAL_LOG = 16,CC_OPTIONS = 31,};
enum MACRO_CCTS {CCTS_OFLOW = 0x80000000,};
enum MACRO_CD {CD_INT = 0x40,};
enum MACRO_CD180 {CD180_RESET_ALL = 0x81,};
enum MACRO_CDB {CDB_GROUPID_0 = 0,CDB_GROUPID_1 = 1,CDB_GROUPID_2 = 2,CDB_GROUPID_3 = 3,CDB_GROUPID_4 = 4,CDB_GROUPID_5 = 5,CDB_GROUPID_6 = 6,CDB_GROUPID_7 = 7,CDB_GROUP0 = 6,CDB_GROUP1 = 10,CDB_GROUP2 = 10,CDB_GROUP3 = 0,CDB_GROUP4 = 16,CDB_GROUP5 = 12,CDB_GROUP6 = 0,CDB_GROUP7 = 0,};
enum MACRO_CDE {CDE_VALID = 0x1,CDE_COMPLETE = 0x2,};
enum MACRO_CDIOC {CDIOC = 0x400,};
enum MACRO_CDIRTY {CDIRTY = 0x80,};
enum MACRO_CDN {CDN = 0x42,};
enum MACRO_CDROM {CDROM_LBA = 0x1,CDROM_MSF = 0x2,CDROM_DATA_TRACK = 0x4,CDROM_LEADOUT = 0xAA,CDROM_AUDIO_INVALID = 0x0,CDROM_AUDIO_PLAY = 0x11,CDROM_AUDIO_PAUSED = 0x12,CDROM_AUDIO_COMPLETED = 0x13,CDROM_AUDIO_ERROR = 0x14,CDROM_AUDIO_NO_STATUS = 0x15,CDROM_DA_NO_SUBCODE = 0x0,CDROM_DA_SUBQ = 0x1,CDROM_DA_ALL_SUBCODE = 0x2,CDROM_DA_SUBCODE_ONLY = 0x3,CDROM_XA_DATA = 0x0,CDROM_XA_SECTOR_DATA = 0x1,CDROM_XA_DATA_W_ERROR = 0x2,CDROM_BLK_512 = 0x200,CDROM_BLK_1024 = 0x400,CDROM_BLK_2048 = 0x800,CDROM_BLK_2056 = 0x808,CDROM_BLK_2336 = 0x920,CDROM_BLK_2340 = 0x924,CDROM_BLK_2352 = 0x930,CDROM_BLK_2368 = 0x940,CDROM_BLK_2448 = 0x990,CDROM_BLK_2646 = 0xA56,CDROM_BLK_2647 = 0xA57,CDROM_BLK_SUBCODE = 0x60,CDROM_NORMAL_SPEED = 0x0,CDROM_DOUBLE_SPEED = 0x1,CDROM_QUAD_SPEED = 0x3,CDROM_TWELVE_SPEED = 0xC,CDROM_MAXIMUM_SPEED = 0xFF,};
enum MACRO_CDROMCDDA {CDROMCDDA = 1191,};
enum MACRO_CDROMCDXA {CDROMCDXA = 1192,};
enum MACRO_CDROMEJECT {CDROMEJECT = 1183,};
enum MACRO_CDROMGBLKMODE {CDROMGBLKMODE = 1189,};
enum MACRO_CDROMGDRVSPEED {CDROMGDRVSPEED = 1194,};
enum MACRO_CDROMPAUSE {CDROMPAUSE = 1175,};
enum MACRO_CDROMPLAYMSF {CDROMPLAYMSF = 1177,};
enum MACRO_CDROMPLAYTRKIND {CDROMPLAYTRKIND = 1178,};
enum MACRO_CDROMREADMODE1 {CDROMREADMODE1 = 1187,};
enum MACRO_CDROMREADMODE2 {CDROMREADMODE2 = 1186,};
enum MACRO_CDROMREADOFFSET {CDROMREADOFFSET = 1188,};
enum MACRO_CDROMREADTOCENTRY {CDROMREADTOCENTRY = 1180,};
enum MACRO_CDROMREADTOCHDR {CDROMREADTOCHDR = 1179,};
enum MACRO_CDROMRESUME {CDROMRESUME = 1176,};
enum MACRO_CDROMSBLKMODE {CDROMSBLKMODE = 1190,};
enum MACRO_CDROMSDRVSPEED {CDROMSDRVSPEED = 1195,};
enum MACRO_CDROMSTART {CDROMSTART = 1182,};
enum MACRO_CDROMSTOP {CDROMSTOP = 1181,};
enum MACRO_CDROMSUBCHNL {CDROMSUBCHNL = 1185,};
enum MACRO_CDROMSUBCODE {CDROMSUBCODE = 1193,};
enum MACRO_CDROMVOLCTRL {CDROMVOLCTRL = 1184,};
enum MACRO_CDROM_MODE {CDROM_MODE_SPEED = 0x31,};
enum MACRO_CDROM_MODE2 {CDROM_MODE2_SIZE = 2336,};
enum MACRO_CDSUSP {CDSUSP = 25,};
enum MACRO_CD_CHANGE {CD_CHANGE = 0x40,CD_ON = 0x40,};
enum MACRO_CD_ZD {CD_ZD = 0x40,CD_OD = 0x40,};
enum MACRO_CE {CE_CONT = 0,CE_NOTE = 1,CE_WARN = 2,CE_PANIC = 3,CE_IGNORE = 4,};
enum MACRO_CEOL {CEOL = 0,};
enum MACRO_CEOL2 {CEOL2 = 0,CEOF = 4,CSTART = 17,};
enum MACRO_CEOT {CEOT = 0x4,};
enum MACRO_CERASE {CERASE = 0x7F,};
enum MACRO_CESC {CESC = 92,};
enum MACRO_CFGA {CFGA_AP_LOG_ID_LEN = 20,CFGA_AP_PHYS_ID_LEN = 1024,CFGA_INFO_LEN = 4096,CFGA_TYPE_LEN = 12,CFGA_CLASS_LEN = 12,CFGA_LOG_EXT_LEN = 30,CFGA_PHYS_EXT_LEN = 1054,CFGA_FLAG_FORCE = 1,CFGA_FLAG_VERBOSE = 2,CFGA_FLAG_LIST_ALL = 4,};
enum MACRO_CFLAG {CFLAG_CMDDISC = 0x1,CFLAG_WATCH = 0x2,CFLAG_FINISHED = 0x4,CFLAG_COMPLETED = 0x10,CFLAG_PREPARED = 0x20,CFLAG_IN_TRANSPORT = 0x40,CFLAG_RESTORE_PTRS = 0x80,CFLAG_TRANFLAG = 0xFF,CFLAG_CMDPROXY = 0x100,CFLAG_CMDARQ = 0x200,CFLAG_DMAVALID = 0x400,CFLAG_DMASEND = 0x800,CFLAG_CMDIOPB = 0x1000,CFLAG_CDBEXTERN = 0x2000,CFLAG_SCBEXTERN = 0x4000,CFLAG_FREE = 0x8000,CFLAG_PRIVEXTERN = 0x20000,CFLAG_DMA_PARTIAL = 0x40000,};
enum MACRO_CFLAGS {CFLAGS = 177,};
enum MACRO_CFLAG_CHKSEG {CFLAG_CHKSEG = 0x8,};
enum MACRO_CFLAG_RESERVED {CFLAG_RESERVED = 0xFF00,CFLAG_EXTCMDS_ALLOC = 0x10000,};
enum MACRO_CFLUSH {CFLUSH = 15,};
enum MACRO_CFS {CFS_FRONTFILE_NAME_SIZE = 18,CFS_MAXFREECNODES = 20,CFS_CID_LOCAL = 1,CFS_FS_FGP_BUCKET_SIZE = 64,CFS_FS_MAXIDLE = 100,CFS_FS_MOUNTED = 1,CFS_FS_READ = 2,CFS_FS_WRITE = 4,CFS_FS_ROOTFS = 8,CFS_FS_DIRTYINFO = 16,CFS_FS_HASHPRINT = 32,CFS_FS_CONST_STRICT = 11,CFS_FS_CONST_NOCONST = 12,CFS_FS_CONST_CODCONST = 13,CFS_FG_NOCACHE = 1,CFS_FG_ALLOC_ATTR = 2,CFS_FG_UPDATED = 4,CFS_FG_ALLOC_FILE = 16,CFS_FG_RL = 32,CFS_FG_READ = 64,CFS_FG_WRITE = 128,};
enum MACRO_CFSVERSION {CFSVERSION = 6,};
enum MACRO_CFSVERSION64 {CFSVERSION64 = 7,};
enum MACRO_CFS_C {CFS_C_HUB_LOCAL_POWER = 0,CFS_C_HUB_OVER_CURRENT = 1,CFS_PORT_CONNECTION = 0,CFS_PORT_ENABLE = 1,CFS_PORT_SUSPEND = 2,CFS_PORT_OVER_CURRENT = 3,CFS_PORT_RESET = 4,CFS_PORT_POWER = 8,CFS_PORT_LOW_SPEED = 9,CFS_C_PORT_CONNECTION = 16,CFS_C_PORT_ENABLE = 17,CFS_C_PORT_SUSPEND = 18,CFS_C_PORT_OVER_CURRENT = 19,CFS_C_PORT_RESET = 20,};
enum MACRO_CFS_DIRCACHE {CFS_DIRCACHE_COST = 3,CFS_DIRCACHE_INVAL = 3,CFS_DIRCACHE_ENABLE = 9,};
enum MACRO_CFS_DLOG {CFS_DLOG_VERSION = 1001,CFS_FS_CONNECTED = 0,CFS_FS_DISCONNECTED = 1,CFS_FS_RECONNECTING = 2,};
enum MACRO_CFS_MAX {CFS_MAX_THREADS = 5,CFS_CM_FRONT = 1,CFS_CM_BACK = 2,CFS_BOI_ROOTFS = 1,CFS_BOI_FRONTFS = 2,CFS_BOI_BACKFS = 3,};
enum MACRO_CFS_WRITE {CFS_WRITE_AROUND = 0x1,CFS_NONSHARED = 0x2,CFS_NOCONST_MODE = 0x8,CFS_ACCESS_BACKFS = 0x10,CFS_CODCONST_MODE = 0x80,CFS_DISCONNECTABLE = 0x100,CFS_SOFT = 0x200,CFS_NOACL = 0x400,CFS_LLOCK = 0x800,CFS_SLIDE = 0x1000,CFS_NOFILL = 0x2000,};
enum MACRO_CFT {CFT_UFS = 1,CFT_SPEC = 2,};
enum MACRO_CG {CG_MAGIC = 0x90255,};
enum MACRO_CG6 {CG6_P4BASE = 0xFB000000,CG6_ADDR_ROM_SBUS = 0x0,CG6_ADDR_ROM_P4 = 0x380000,CG6_ADDR_CMAP = 0x200000,CG6_ADDR_DHC = 0x240000,CG6_ADDR_ALT = 0x280000,CG6_ADDR_FBC = 0x700000,CG6_ADDR_TEC = 0x701000,CG6_ADDR_P4REG = 0x300000,CG6_ADDR_OVERLAY = 0x400000,CG6_ADDR_FHC = 0x300000,CG6_ADDR_THC = 0x301000,CG6_ADDR_ENABLE = 0x600000,CG6_ADDR_COLOR = 0x800000,CG6_ADDR_FBCTEC = 0x700000,CG6_ADDR_FHCTHC = 0x300000,CG6_CMAP_SZ = 0x2000,CG6_FBCTEC_SZ = 0x2000,CG6_FHCTHC_SZ = 0x2000,CG6_ROM_SZ = 0x10000,CG6_FB_SZ = 0x100000,CG6_DHC_SZ = 0x2000,CG6_ALT_SZ = 0x2000,CG6_TEC_POFF = 0x1000,CG6_THC_POFF = 0x1000,CG6_VBASE = 0x70000000,CG6_VADDR_FBC = 0x70000000,CG6_VADDR_TEC = 0x70001000,CG6_VADDR_CMAP = 0x70002000,CG6_VADDR_FHC = 0x70004000,CG6_VADDR_THC = 0x70005000,CG6_VADDR_ROM = 0x70006000,CG6_VADDR_COLOR = 0x70016000,CG6_VADDR_DHC = 0x78000000,CG6_VADDR_ALT = 0x78002000,CG6_VADDR_UART = 0x78004000,CG6_VADDR_VRT = 0x78006000,CG6_VADDR_FBCTEC = 0x70000000,CG6_VADDR_FHCTHC = 0x70004000,CG6_CMAP_ENTRIES = 0x100,};
enum MACRO_CHAN {CHAN_CTL = 0x10,};
enum MACRO_CHANGED {COR_CHANGED = 0x40,COR1_CHANGED = 0x2,COR2_CHANGED = 0x4,COR3_CHANGED = 0x8,};
enum MACRO_CHAP {CHAP_MAX_PASSWD = 255,CHAP_MAX_NAME = 255,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CHAR_8 {CHAR_8 = 0x3,CHAR_7 = 0x2,CHAR_6 = 0x1,CHAR_5 = 0x0,};
enum MACRO_CHAR_MIN {CHAR_MIN = -128,CHAR_MAX = 127,};
enum MACRO_CHDR {CHDR_OFFSET = 1024,};
enum MACRO_CHECK {ACL_CHECK = 0x1,DEF_ACL_CHECK = 0x2,};
enum MACRO_CHECKSUM {CHECKSUM = 84446,};
enum MACRO_CHECK_CYCLE {CHECK_CYCLE = 1,};
enum MACRO_CHRSZ {CHRSZ = 76,};
enum MACRO_CHRTYPE {CHRTYPE = 51,};
enum MACRO_CIBAUD {CIBAUD = 0xF0000,PAREXT = 0x100000,CBAUDEXT = 0x200000,CIBAUDEXT = 0x400000,};
enum MACRO_CINTR {CINTR = 3,CQUIT = 28,};
enum MACRO_CIO {CIO_PUTPAGES = 0x1,};
enum MACRO_CIS {CIS_MAX_TUPLE_DATA_LEN = 254,CIS_MAX_TUPLE_NAME_LEN = 40,CIS_MAX_FUNCTIONS = 8,};
enum MACRO_CISP {CISP_CIS_SETUP = 0x1,CISP_CIS_LIST_CREATE = 0x2,CISP_CIS_LIST_DESTROY = 0x3,CISP_CIS_GET_LTUPLE = 0x4,CISP_CIS_PARSE_TUPLE = 0x5,CISP_CIS_CONV_DEVSPEED = 0x6,CISP_CIS_CONV_DEVSIZE = 0x7,};
enum MACRO_CISTPL {CISTPL_NULL = 0x0,CISTPL_DEVICE = 0x1,CISTPL_LONGLINK_CB = 0x2,CISTPL_CONFIG_CB = 0x4,CISTPL_CFTABLE_ENTRY_CB = 0x5,CISTPL_LONGLINK_MFC = 0x6,CISTPL_BAR = 0x7,CISTPL_CHECKSUM = 0x10,CISTPL_LONGLINK_A = 0x11,CISTPL_LONGLINK_C = 0x12,CISTPL_LINKTARGET = 0x13,CISTPL_NO_LINK = 0x14,CISTPL_VERS_1 = 0x15,CISTPL_ALTSTR = 0x16,CISTPL_DEVICE_A = 0x17,CISTPL_JEDEC_C = 0x18,CISTPL_JEDEC_A = 0x19,CISTPL_CONFIG = 0x1A,CISTPL_CFTABLE_ENTRY = 0x1B,CISTPL_DEVICE_OC = 0x1C,CISTPL_DEVICE_OA = 0x1D,CISTPL_DEVICEGEO = 0x1E,CISTPL_DEVICEGEO_A = 0x1F,CISTPL_MANFID = 0x20,CISTPL_FUNCID = 0x21,CISTPL_FUNCE = 0x22,CISTPL_SWIL = 0x23,CISTPL_VERS_2 = 0x40,CISTPL_FORMAT = 0x41,CISTPL_GEOMETRY = 0x42,CISTPL_BYTEORDER = 0x43,CISTPL_DATE = 0x44,CISTPL_BATTERY = 0x45,CISTPL_FORMAT_A = 0x47,CISTPL_ORG = 0x46,CISTPL_VEND_SPEC_80 = 0x80,CISTPL_VEND_SPEC_81 = 0x81,CISTPL_VEND_SPEC_82 = 0x82,CISTPL_VEND_SPEC_83 = 0x83,CISTPL_VEND_SPEC_84 = 0x84,CISTPL_VEND_SPEC_85 = 0x85,CISTPL_VEND_SPEC_86 = 0x86,CISTPL_VEND_SPEC_87 = 0x87,CISTPL_VEND_SPEC_88 = 0x88,CISTPL_VEND_SPEC_89 = 0x89,CISTPL_VEND_SPEC_8a = 0x8A,CISTPL_VEND_SPEC_8b = 0x8B,CISTPL_VEND_SPEC_8c = 0x8C,CISTPL_VEND_SPEC_8d = 0x8D,CISTPL_VEND_SPEC_8e = 0x8E,CISTPL_VEND_SPEC_8f = 0x8F,CISTPL_SPCL = 0x90,CISTPL_END = 0xFF,CISTPL_VENDSPEC_START = 0x80,CISTPL_VENDSPEC_END = 0x8F,};
enum MACRO_CISTPLF {CISTPLF_NOERROR = 0x0,CISTPLF_UNKNOWN = 0x1,CISTPLF_REGS = 0x2,CISTPLF_COPYOK = 0x4,CISTPLF_VALID = 0x8,CISTPLF_GLOBAL_CIS = 0x10,CISTPLF_MF_CIS = 0x20,CISTPLF_FROM_AM = 0x40,CISTPLF_FROM_CM = 0x80,CISTPLF_IGNORE_TUPLE = 0x100,CISTPLF_VENDOR_SPECIFIC = 0x200,CISTPLF_LINK_INVALID = 0x1000000,CISTPLF_PARAMS_INVALID = 0x2000000,CISTPLF_AM_SPACE = 0x10000000,CISTPLF_CM_SPACE = 0x20000000,CISTPLF_LM_SPACE = 0x40000000,CISTPLF_MEM_ERR = 0x80000000,CISTPLF_SPACE_MASK = 0x70000000,CISTPLF_FROM_MASK = 0xC0,};
enum MACRO_CISTPL_CFTABLE {CISTPL_CFTABLE_TPCE_CFGENTRYM = 0x3F,CISTPL_CFTABLE_TPCE_DEFAULTM = 0x40,CISTPL_CFTABLE_TPCE_IFM = 0x80,CISTPL_CFTABLE_TPCE_FS_PWRM = 0x3,CISTPL_CFTABLE_TPCE_FS_PWR_VPP2M = 0x3,CISTPL_CFTABLE_TPCE_FS_PWR_VPP1M = 0x2,CISTPL_CFTABLE_TPCE_FS_PWR_VCCM = 0x1,CISTPL_CFTABLE_PD_NC_SLEEPM = 0x7D,CISTPL_CFTABLE_PD_ZEROM = 0x7E,CISTPL_CFTABLE_PD_NCM = 0x7F,CISTPL_CFTABLE_TPCE_FS_TDM = 0x4,CISTPL_CFTABLE_TPCE_FS_TD_WAITM = 0x3,CISTPL_CFTABLE_TPCE_FS_TD_RDYM = 0x1C,CISTPL_CFTABLE_TPCE_FS_TD_RSVDM = 0xE0,CISTPL_CFTABLE_TPCE_FS_IOM = 0x8,CISTPL_CFTABLE_TPCE_FS_IO_ALM = 0x1F,CISTPL_CFTABLE_TPCE_FS_IO_RANGEM = 0x80,CISTPL_CFTABLE_ENTRY_MAX_IO_RANGES = 0x10,CISTPL_CFTABLE_TPCE_FS_IRQM = 0x10,CISTPL_CFTABLE_TPCE_FS_IRQ_MASKM = 0x10,CISTPL_CFTABLE_TPCE_FS_MEMM = 0x60,CISTPL_CFTABLE_TPCE_FS_MEM3M = 0x60,CISTPL_CFTABLE_TPCE_FS_MEM2M = 0x40,CISTPL_CFTABLE_TPCE_FS_MEM1M = 0x20,CISTPL_CFTABLE_ENTRY_MAX_MEM_WINDOWS = 0x8,CISTPL_CFTABLE_TPCE_FS_MEM_PGSIZE = 0x100,CISTPL_CFTABLE_TPCE_FS_MEM_HOSTM = 0x80,CISTPL_CFTABLE_TPCE_FS_MISCM = 0x80,CISTPL_CFTABLE_TPCE_DEFAULT = 0x100,CISTPL_CFTABLE_TPCE_IF = 0x200,CISTPL_CFTABLE_TPCE_IF_MEMORY = 0x0,CISTPL_CFTABLE_TPCE_IF_IO_MEM = 0x1,CISTPL_CFTABLE_TPCE_IF_RSVD_2 = 0x2,CISTPL_CFTABLE_TPCE_IF_RSVD_3 = 0x3,CISTPL_CFTABLE_TPCE_IF_CUSTOM_0 = 0x4,CISTPL_CFTABLE_TPCE_IF_CUSTOM_1 = 0x5,CISTPL_CFTABLE_TPCE_IF_CUSTOM_2 = 0x6,CISTPL_CFTABLE_TPCE_IF_CUSTOM_3 = 0x7,CISTPL_CFTABLE_TPCE_IF_RSVD_8 = 0x8,CISTPL_CFTABLE_TPCE_IF_RSVD_9 = 0x9,CISTPL_CFTABLE_TPCE_IF_RSVD_a = 0xA,CISTPL_CFTABLE_TPCE_IF_RSVD_b = 0xB,CISTPL_CFTABLE_TPCE_IF_RSVD_c = 0xC,CISTPL_CFTABLE_TPCE_IF_RSVD_d = 0xD,CISTPL_CFTABLE_TPCE_IF_RSVD_e = 0xE,CISTPL_CFTABLE_TPCE_IF_RSVD_f = 0xF,CISTPL_CFTABLE_TPCE_IF_MASK = 0xF,CISTPL_CFTABLE_TPCE_IF_BVD = 0x10,CISTPL_CFTABLE_TPCE_IF_WP = 0x20,CISTPL_CFTABLE_TPCE_IF_RDY = 0x40,CISTPL_CFTABLE_TPCE_IF_MWAIT = 0x80,CISTPL_CFTABLE_TPCE_FS_PWR = 0x1000,CISTPL_CFTABLE_TPCE_FS_TD = 0x10000,CISTPL_CFTABLE_TPCE_FS_IO = 0x100000,CISTPL_CFTABLE_TPCE_FS_IRQ = 0x200000,CISTPL_CFTABLE_TPCE_FS_MEM = 0x1000000,CISTPL_CFTABLE_TPCE_FS_MISC = 0x2000000,CISTPL_CFTABLE_TPCE_FS_STCE_EV = 0x4000000,CISTPL_CFTABLE_TPCE_FS_STCE_PD = 0x8000000,CISTPL_CFTABLE_PD_NOMV = 0x1,CISTPL_CFTABLE_PD_MINV = 0x2,CISTPL_CFTABLE_PD_MAXV = 0x4,CISTPL_CFTABLE_PD_STATICI = 0x8,CISTPL_CFTABLE_PD_AVGI = 0x10,CISTPL_CFTABLE_PD_PEAKI = 0x20,CISTPL_CFTABLE_PD_PDOWNI = 0x40,CISTPL_CFTABLE_PD_RFU = 0x80,CISTPL_CFTABLE_PD_EXISTS = 0x100,CISTPL_CFTABLE_PD_MUL10 = 0x200,CISTPL_CFTABLE_PD_NC_SLEEP = 0x1000,CISTPL_CFTABLE_PD_ZERO = 0x2000,CISTPL_CFTABLE_PD_NC = 0x4000,CISTPL_CFTABLE_TPCE_FS_PWR_VCC = 0x1,CISTPL_CFTABLE_TPCE_FS_PWR_VPP1 = 0x2,CISTPL_CFTABLE_TPCE_FS_PWR_VPP2 = 0x4,CISTPL_CFTABLE_TPCE_FS_TD_WAIT = 0x1,CISTPL_CFTABLE_TPCE_FS_TD_RDY = 0x2,CISTPL_CFTABLE_TPCE_FS_TD_RSVD = 0x4,CISTPL_CFTABLE_TPCE_FS_IO_BUS = 0x60,CISTPL_CFTABLE_TPCE_FS_IO_BUS8 = 0x20,CISTPL_CFTABLE_TPCE_FS_IO_BUS16 = 0x40,CISTPL_CFTABLE_TPCE_FS_IO_RANGE = 0x80,CISTPL_CFTABLE_TPCE_FS_MEM3 = 0x1,CISTPL_CFTABLE_TPCE_FS_MEM2 = 0x2,CISTPL_CFTABLE_TPCE_FS_MEM1 = 0x4,CISTPL_CFTABLE_TPCE_FS_MEM_HOST = 0x8,CISTPL_CFTABLE_TPCE_FS_MISC_MAX = 0x2,CISTPL_CFTABLE_TPCE_MI_MTC_MASK = 0x7,CISTPL_CFTABLE_TPCE_MI_AUDIO = 0x8,CISTPL_CFTABLE_TPCE_MI_READONLY = 0x10,CISTPL_CFTABLE_TPCE_MI_PWRDOWN = 0x20,CISTPL_CFTABLE_TPCE_MI_DRQ_MASK = 0xC00,CISTPL_CFTABLE_TPCE_MI_DRQ_SPK = 0x400,CISTPL_CFTABLE_TPCE_MI_DRQ_IOIS = 0x800,CISTPL_CFTABLE_TPCE_MI_DRQ_INP = 0xC00,CISTPL_CFTABLE_TPCE_MI_DMA_8 = 0x0,CISTPL_CFTABLE_TPCE_MI_DMA_16 = 0x1000,};
enum MACRO_CISTPL_EXT {CISTPL_EXT_BIT = 0x80,CISTPL_DEVSPEED_TABLE = 0x1,CISTPL_DEVSPEED_EXT = 0x2,CISTPL_DEVSPEED_MAX_TBL = 0x8,CISTPL_DEVSPEED_MAX_EXP = 0x8,CISTPL_DEVSPEED_MAX_MAN = 0x10,CISTPL_DEVICE_DTYPE_NULL = 0x0,CISTPL_DEVICE_DTYPE_ROM = 0x1,CISTPL_DEVICE_DTYPE_OTPROM = 0x2,CISTPL_DEVICE_DTYPE_EPROM = 0x3,CISTPL_DEVICE_DTYPE_EEPROM = 0x4,CISTPL_DEVICE_DTYPE_FLASH = 0x5,CISTPL_DEVICE_DTYPE_SRAM = 0x6,CISTPL_DEVICE_DTYPE_DRAM = 0x7,CISTPL_DEVICE_DTYPE_RSVD_8 = 0x8,CISTPL_DEVICE_DTYPE_RSVD_9 = 0x9,CISTPL_DEVICE_DTYPE_RSVD_a = 0xA,CISTPL_DEVICE_DTYPE_RSVD_b = 0xB,CISTPL_DEVICE_DTYPE_RSVD_c = 0xC,CISTPL_DEVICE_DTYPE_FUNCSPEC = 0xD,CISTPL_DEVICE_DTYPE_EXTEND = 0xE,CISTPL_DEVICE_DTYPE_RSVD_f = 0xF,CISTPL_DEVICE_WPS = 0x1,CISTPL_DEVICE_OC_MWAIT = 0x10000,CISTPL_DEVICE_OC_Vcc_MASK = 0x60000,CISTPL_DEVICE_OC_Vcc5 = 0x0,CISTPL_DEVICE_OC_Vcc33 = 0x20000,CISTPL_DEVICE_OC_VccXX = 0x40000,CISTPL_DEVICE_OC_VccYY = 0x60000,CISTPL_DEVICE_MAX_DEVICES = 0xA,CISTPL_DEVICE_SPEED_SIZE_IGNORE = 0xFF,CISTPL_CONFIG_MAX_CONFIG_REGS = 0x80,CISTPL_VERS_1_MAX_PROD_STRINGS = 0x4,CISTPL_JEDEC_MAX_IDENTIFIERS = 0x4,};
enum MACRO_CISTPL_LONGLINK {CISTPL_LONGLINK_AC_AM = 0x1,CISTPL_LONGLINK_AC_CM = 0x2,};
enum MACRO_CISTPL_LONGLINK_MFC {CISTPL_LONGLINK_MFC_TAS_AM = 0x0,CISTPL_LONGLINK_MFC_TAS_CM = 0x1,CISTPL_LONGLINK_CB_CFG = 0x1,CISTPL_LONGLINK_CB_MEM = 0x2,CISTPL_LONGLINK_CB_ROM = 0x4,CISTPL_SPCL_SEQ_END = 0x80,CISTPL_BAR_ASI_MASK = 0x7,CISTPL_BAR_ASI_BAR_1 = 0x1,CISTPL_BAR_ASI_BAR_2 = 0x2,CISTPL_BAR_ASI_BAR_3 = 0x3,CISTPL_BAR_ASI_BAR_4 = 0x4,CISTPL_BAR_ASI_BAR_5 = 0x5,CISTPL_BAR_ASI_BAR_6 = 0x6,CISTPL_BAR_ASI_BAR_7 = 0x7,CISTPL_BAR_ASI_EXP_ROM = 0x7,CISTPL_BAR_AS_MEM = 0x0,CISTPL_BAR_AS_IO = 0x8,CISTPL_BAR_PREFETCH_CACHE_MASK = 0x60,CISTPL_BAR_PREFETCH = 0x20,CISTPL_BAR_PREFETCH_CACHE = 0x40,CISTPL_BAR_BELOW_1MB = 0x80,CISTPL_DEVICEGEO_MAX_PARTITIONS = 0x2A,};
enum MACRO_CIS_GET {CIS_GET_LTUPLE_OPMASK = 0xFFFF,CIS_GET_LTUPLE_IGNORE = 0x10000,};
enum MACRO_CK {CK_CHECKSUM = 0,CK_MAKESUM = 1,};
enum MACRO_CKILL {CKILL = 21,};
enum MACRO_CKUNNUM {CKUNNUM = 0x1,CKALPHA = 0x2,CKONEFLAG = 0x4,};
enum MACRO_CL {CL_TCPI_V1 = 1,};
enum MACRO_CLASS {CLASS_NOT_SUPPORTED = 0x5,};
enum MACRO_CLASS_CODE {MASS_STORAGE_CLASS_CODE = 8,HUB_CLASS_CODE = 9,};
enum MACRO_CLCR {CLCR_SET_LOWVERS = 3,CLCR_GET_LOWVERS = 4,};
enum MACRO_CLD {CLD_EXITED = 1,CLD_KILLED = 2,CLD_DUMPED = 3,CLD_TRAPPED = 4,CLD_STOPPED = 5,CLD_CONTINUED = 6,};
enum MACRO_CLDPEND {CLDPEND = 0x1,CLDCONT = 0x2,};
enum MACRO_CLE {CLE = 0x44,};
enum MACRO_CLEAN {CLEAN_NOW = 20,};
enum MACRO_CLGET {CLGET_SERVER_ADDR = 3,CLGET_FD = 6,CLGET_SVC_ADDR = 7,};
enum MACRO_CLGET_RETRY {CLGET_RETRY_TIMEOUT = 5,};
enum MACRO_CLIENT {CLIENT_OWNS_IMAGE = 0x200,};
enum MACRO_CLN {CLN = 0x8,CLND = 0x10,};
enum MACRO_CLNEXT {CLNEXT = 22,};
enum MACRO_CLOCK {CLOCK_VIRTUAL = 1,CLOCK_PROF = 2,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000000,};
enum MACRO_CLOCK_10MHZ {CLOCK_10MHZ = 2,CLOCK_15MHZ = 3,CLOCK_20MHZ = 4,CLOCK_25MHZ = 5,CLOCK_30MHZ = 6,CLOCK_35MHZ = 7,CLOCK_40MHZ = 8,CLOCK_MASK = 7,};
enum MACRO_CLOCK_HIGHRES {CLOCK_HIGHRES = 4,CLOCK_REALTIME = 0,};
enum MACRO_CLONE {CLONE_DEV = 1,GLOBAL_DEV = 2,NODEBOUND_DEV = 4,NODESPECIFIC_DEV = 6,ENUMERATED_DEV = 8,};
enum MACRO_CLSET {CLSET_FD_CLOSE = 8,CLSET_FD_NCLOSE = 9,};
enum MACRO_CLSET_SVC {CLSET_SVC_ADDR = 16,CLSET_PUSH_TIMOD = 17,CLSET_POP_TIMOD = 18,CLSET_RETRY_TIMEOUT = 4,};
enum MACRO_CLSSIZ {CLSSIZ = 64,};
enum MACRO_CLUSTER {CLUSTER_CONFIGURED = 0x1,CLUSTER_BOOTED = 0x2,};
enum MACRO_CL_INITIALIZE {CL_INITIALIZE = 0,CL_CONFIG = 1,CL_GET_BOOTFLAG = 0,};
enum MACRO_CL_NODEID {CL_NODEID = 0,CL_HIGHEST_NODEID = 1,CL_GDEV_PREFIX = 2,};
enum MACRO_CM {CM = 0x5D,};
enum MACRO_CMASK {CMASK = 0x12,CDLIMIT = 0x800,NBPS = 0x20000,};
enum MACRO_CMD {CMD_CMPLT = 0,CMD_INCOMPLETE = 1,CMD_DMA_DERR = 2,CMD_TRAN_ERR = 3,CMD_RESET = 4,CMD_ABORTED = 5,CMD_TERMINATED = 22,CMD_TIMEOUT = 6,CMD_DATA_OVR = 7,CMD_CMD_OVR = 8,CMD_STS_OVR = 9,CMD_BADMSG = 10,CMD_NOMSGOUT = 11,CMD_XID_FAIL = 12,CMD_IDE_FAIL = 13,CMD_ABORT_FAIL = 14,CMD_REJECT_FAIL = 15,CMD_NOP_FAIL = 16,CMD_PER_FAIL = 17,CMD_BDR_FAIL = 18,CMD_ID_FAIL = 19,CMD_UNX_BUS_FREE = 20,CMD_TAG_REJECT = 21,};
enum MACRO_CMD_NOP {CMD_NOP = 0x0,CMD_FLUSH = 0x1,CMD_RESET_ESP = 0x2,CMD_RESET_SCSI = 0x3,CMD_RESEL_SEQ = 0x40,CMD_SEL_NOATN = 0x41,CMD_SEL_ATN = 0x42,CMD_SEL_STOP = 0x43,CMD_EN_RESEL = 0x44,CMD_DIS_RESEL = 0x45,CMD_SEL_ATN3 = 0x46,CMD_TRAN_INFO = 0x10,CMD_COMP_SEQ = 0x11,CMD_MSG_ACPT = 0x12,CMD_TRAN_PAD = 0x18,CMD_SET_ATN = 0x1A,CMD_CLR_ATN = 0x1B,CMD_DISCONNECT = 0x27,CMD_DMA = 0x80,};
enum MACRO_CMD_RESET {CMD_RESET_FAS = 0x2,};
enum MACRO_CMN {CMN_ASC = 0x70701,CMN_BIN = 0x71C7,CMN_BBS = 0xC771,CMN_CRC = 0x70702,};
enum MACRO_CMS {CMS_LEN = 6,};
enum MACRO_CN {CN_NOCACHE = 0x1,CN_DESTROY = 0x2,CN_ROOT = 0x4,CN_IDLE = 0x8,CN_NEEDOPEN = 0x10,CN_UPDATED = 0x40,};
enum MACRO_CNSWTCH {CNSWTCH = 0,CSUSP = 26,};
enum MACRO_CNUL {CNUL = 0,CDEL = 127,};
enum MACRO_CN_NEED {CN_NEED_FRONT_SYNC = 0x100,CN_ALLOC_PENDING = 0x200,CN_STALE = 0x400,CN_MODIFIED = 0x800,CN_POPULATION_PENDING = 0x1000,CN_ASYNC_POPULATE = 0x2000,CN_ASYNC_POP_WORKING = 0x4000,CN_PENDRM = 0x8000,CN_MAPWRITE = 0x100000,CN_CMODINPROG = 0x200000,};
enum MACRO_CODESET {CODESET = 49,};
enum MACRO_COLL {COLL_WEIGHTS_MAX = 10,EXPR_NEST_MAX = 32,LINE_MAX = 2048,RE_DUP_MAX = 255,PASS_MAX = 8,CHARCLASS_NAME_MAX = 14,};
enum MACRO_COLOR {COLOR_BLACK = 0,COLOR_RED = 1,COLOR_GREEN = 2,COLOR_YELLOW = 3,COLOR_BLUE = 4,COLOR_MAGENTA = 5,COLOR_CYAN = 6,COLOR_WHITE = 7,};
enum MACRO_COMMAND {COMMAND_DONE = 0,COMMAND_DONE_ERROR = 1,};
enum MACRO_COMMAND_DONE {COMMAND_DONE_ERROR_RECOVERED = 2,};
enum MACRO_COMMAND_DONE_EACCES {COMMAND_DONE_EACCES = 7,};
enum MACRO_COMPOSE {COMPOSE = 0x309,};
enum MACRO_COMPOSE2 {COMPOSE2 = 3,FLTACCENT = 4,};
enum MACRO_CONFIGURE {CONFIGURE = 0x13,MT = 0x80,};
enum MACRO_CONN {CONN_HDX = 0x1,CONN_MPT = 0x2,CONN_IBM = 0x4,CONN_SIGNAL = 0x8,CONN_NRZI = 0x10,CONN_LPBK = 0x20,CONN_ECHO = 0x40,};
enum MACRO_CONTEXT {CONTEXT_LTR = 0x10,CONTEXT_RTL = 0x20,};
enum MACRO_CONTINUE {CONTINUE = 3,TRANSIENT = 4,};
enum MACRO_CONTTYPE {CONTTYPE = 55,TSUID = 2048,};
enum MACRO_COPY {COPY_PROTECTED = 0x80,};
enum MACRO_COR1 {COR1 = 19,};
enum MACRO_COR2 {COR2 = 0x0,COR3 = 0x4,SCHR1 = 0x11,};
enum MACRO_CORE {CORE_MAGIC = 0x80456,CORE_NAMELEN = 0x10,};
enum MACRO_CORRUPTED {CORRUPTED = 3,};
enum MACRO_CP {CP_BIT = 0x20,};
enum MACRO_CPC {CPC_OVERFLOW = 0x10,};
enum MACRO_CPCIO {CPCIO_BIND_EVENT = 0x63706301,CPCIO_TAKE_SAMPLE = 0x63706302,CPCIO_RELE = 0x63706303,};
enum MACRO_CPC_BIND {CPC_BIND_EVENT = 0,CPC_TAKE_SAMPLE = 1,CPC_USR_EVENTS = 2,CPC_SYS_EVENTS = 3,CPC_INVALIDATE = 4,CPC_RELE = 5,};
enum MACRO_CPC_ULTRA {CPC_ULTRA_PCR_USR = 2,CPC_ULTRA_PCR_SYS = 1,CPC_ULTRA_PCR_PRIVPIC = 0,CPC_ULTRA_PCR_PIC0_SHIFT = 4,CPC_ULTRA2_PCR_PIC0_MASK = 15,CPC_ULTRA3_PCR_PIC0_MASK = 63,CPC_ULTRA_PCR_PIC1_SHIFT = 11,CPC_ULTRA2_PCR_PIC1_MASK = 15,CPC_ULTRA3_PCR_PIC1_MASK = 63,CPC_BIND_LWP_INHERIT = 1,CPC_BIND_EMT_OVF = 2,CPC_ULTRA1 = 1000,CPC_ULTRA2 = 1001,CPC_ULTRA3 = 1002,CPC_PENTIUM = 2000,CPC_PENTIUM_MMX = 2001,CPC_PENTIUM_PRO = 2002,CPC_PENTIUM_PRO_MMX = 2003,CPC_VER_CURRENT = 1,CPC_VER_NONE = 0,};
enum MACRO_CPR {CPR_KTHREAD_TIMEOUT_SEC = 15,};
enum MACRO_CPRES {CPRES = 0x8000,};
enum MACRO_CPR_VERSION {CPR_VERSION = 4,CPR_PROP_BOOL_LEN = 6,CPR_CONFIG_MAGIC = 1131300455,CPR_DEFAULT_MAGIC = 1147554932,};
enum MACRO_CPU {CPU_IDLE = 0,CPU_USER = 1,CPU_KERNEL = 2,CPU_WAIT = 3,CPU_STATES = 4,};
enum MACRO_CPU_RUNNING {CPU_RUNNING = 0x1,CPU_READY = 0x2,CPU_QUIESCED = 0x4,CPU_EXISTS = 0x8,CPU_ENABLE = 0x10,CPU_OFFLINE = 0x20,CPU_POWEROFF = 0x40,CPU_CPR_ONLINE = 0x1,CPU_CURRENT = 0xFFFFFFFD,};
enum MACRO_CR0 {CR0 = 0,TABDLY = 6144,};
enum MACRO_CRI {CRI = 0x43,};
enum MACRO_CRNCYSTR {CRNCYSTR = 43,};
enum MACRO_CRPRNT {CRPRNT = 18,};
enum MACRO_CRTN {CRTN = 0x5B,};
enum MACRO_CRTS {CRTS_IFLOW = 0x40000000,};
enum MACRO_CS {CS = 0x4A,};
enum MACRO_CS4231 {CS4231_IDNUM = 0x6175,CS4231_MINPACKET = 0x0,CS4231_MAXPACKET = 0x4000,CS4231_SUP_INST = 0x1,CS4231_SAMPR5510 = 0x1586,CS4231_SAMPR6620 = 0x19DC,CS4231_SAMPR8000 = 0x1F40,CS4231_SAMPR9600 = 0x2580,CS4231_SAMPR11025 = 0x2B11,CS4231_SAMPR16000 = 0x3E80,CS4231_SAMPR18900 = 0x49D4,CS4231_SAMPR22050 = 0x5622,CS4231_SAMPR27420 = 0x6B1C,CS4231_SAMPR32000 = 0x7D00,CS4231_SAMPR33075 = 0x8133,CS4231_SAMPR37800 = 0x93A8,CS4231_SAMPR44100 = 0xAC44,CS4231_SAMPR48000 = 0xBB80,CS4231_DEFAULT_SR = 0x1F40,CS4231_DEFAULT_CH = 0x1,CS4231_DEFAULT_PREC = 0x8,CS4231_DEFAULT_ENC = 0x1,CS4231_DEFAULT_PGAIN = 0x7F,CS4231_DEFAULT_RGAIN = 0x7F,CS4231_DEFAULT_MONITOR_GAIN = 0x0,CS4231_DEFAULT_BAL = 0x20,CS4231_BSIZE = 0x2000,};
enum MACRO_CS5 {CS5 = 0,CS6 = 16,CS7 = 32,};
enum MACRO_CS8 {CS8 = 0x30,CSTOPB = 0x40,CREAD = 0x80,PARENB = 0x100,PARODD = 0x200,CLOCAL = 0x800,RCV1EN = 0x1000,XMT1EN = 0x2000,LOBLK = 0x4000,XCLUDE = 0x8000,CRTSXOFF = 0x40000000,CRTSCTS = 0x80000000,};
enum MACRO_CSDATA {CSDATA_SET = 49921,CSDATA_GET = 49922,};
enum MACRO_CSI {CSI_IOC = 49920,};
enum MACRO_CSMAX {CSMAX = 4,};
enum MACRO_CSTOP {CSTOP = 0x13,};
enum MACRO_CSW {CSW_SIGNATURE = 0x53425355,CSW_STATUS_GOOD = 0x0,CSW_STATUS_FAILED = 0x1,CSW_STATUS_PHASE_ERROR = 0x2,CSW_LEN = 0xD,};
enum MACRO_CSWTCH {CSWTCH = 0x1A,};
enum MACRO_CS_DCD {CS_DCD_DOWN = 0x8,CS_DCD_UP = 0xC,CS_DCD_DROP = 0x10,CS_CTS_DOWN = 0x20,CS_CTS_UP = 0x30,CS_CTS_DROP = 0x40,CS_CTS_TO = 0x80,CS_DCD = 0x8,CS_CTS = 0x20,};
enum MACRO_CS_TYPE0 {CS_TYPE0 = 0x0,CS_TYPE1 = 0x1,CS_TYPE2 = 0x2,CS_TYPE3 = 0x3,CS_TYPE4 = 0x4,CS_TYPE5 = 0x5,CS_TYPE6 = 0x6,CS_TYPE7 = 0x7,CS_TYPE8 = 0x8,};
enum MACRO_CTAB {CTAB = 0x55,};
enum MACRO_CTLSMASK {CTLSMASK = 0x100,};
enum MACRO_CTRL {CTRL_QMOD_RESTRICT = 0x0,CTRL_QMOD_UNRESTRICT = 0x1,};
enum MACRO_CTRLQ {CTRLQ = 0x305,};
enum MACRO_CTRLS {CTRLS = 0x304,};
enum MACRO_CTYPE {CTYPE_CDROM = 0,CTYPE_MD21 = 1,CTYPE_CCS = 2,};
enum MACRO_CUP {CUP = 0x41,};
enum MACRO_CURS {CURS_STUPID = 0,CURS_UNKNOWN = 1,CURS_BAD_MALLOC = 2,};
enum MACRO_CUSAGE {CUSAGE_ACTIVE = 1,CUSAGE_NEED_ADJUST = 2,};
enum MACRO_CVID {CVID = 0x62,};
enum MACRO_CWERASE {CWERASE = 23,};
enum MACRO_CY {CY_LOW_LEVEL = 0,CY_LOCK_LEVEL = 1,CY_HIGH_LEVEL = 2,CY_SOFT_LEVELS = 2,CY_LEVELS = 3,};
enum MACRO_CYCLIC {CYCLIC_NONE = 0,};
enum MACRO_CYF {CYF_FREE = 0x1,CYF_CPU_BOUND = 0x2,CYF_PART_BOUND = 0x4,};
enum MACRO_CY_NTRACEREC {CY_NTRACEREC = 512,CY_NCOVERAGE = 127,CY_DEFAULT_PERCPU = 1,CY_PASSIVE_LEVEL = -1,};
enum MACRO_C_BACK {C_BACK_CHECK = 0x2,C_MAX_ALLOCINFO_SLOTS = 0x20,};
enum MACRO_C_EFCN {C_EFCN = -1,C_NULL = 0,C_AUTO = 1,C_EXT = 2,C_STAT = 3,C_REG = 4,C_EXTDEF = 5,C_LABEL = 6,C_ULABEL = 7,C_MOS = 8,C_ARG = 9,C_STRTAG = 10,C_MOU = 11,C_UNTAG = 12,C_TPDEF = 13,C_USTATIC = 14,C_ENTAG = 15,C_MOE = 16,C_REGPARM = 17,C_FIELD = 18,C_BLOCK = 100,C_FCN = 101,C_EOS = 102,C_FILE = 103,C_LINE = 104,C_ALIAS = 105,C_HIDDEN = 106,C_SHADOW = 107,};
enum MACRO_C_HUB {C_HUB_LOCAL_POWER_STATUS = 0x1,C_HUB_OVER_CURRENT = 0x2,};
enum MACRO_C_MAX {C_MAX_MOUNT_FSCDIRNAME = 128,};
enum MACRO_C_NOCOMMIT {C_NOCOMMIT = 0,C_COMMIT = 1,C_DELAYCOMMIT = 2,};
enum MACRO_C_RL {C_RL_MAXENTS = 0x4000,};
enum MACRO_C_SENDCHAR {C_SENDCHAR = 1,C_NEW = 2,C_UNBLK = 3,C_DELETE = 4,C_EXIT = 5,C_DEFUNCT = 6,C_SENDNCHARS = 7,C_RESHAPE = 8,C_RUN = 9,C_NOFLOW = 10,C_YESFLOW = 11,};
enum MACRO_ClearGroupAddr {ClearGroupAddr = 0x6,};
enum MACRO_ConfigMCast {ConfigMCast = 0x1,ReconfigMCast = 0x2,CFGMULTICAST = 0x4,};
enum MACRO_D {D_HUNG = -2,};
enum MACRO_DA {DA_FREENAME = 1,};
enum MACRO_DAC {DAC_PIXEL_TEST_REG = 0x0,DAC_TEST_REG = 0x1,DAC_SYNC_TEST_REG = 0x2,DAC_ID_REG = 0x3,DAC_PIXEL_MASK_REG = 0x4,DAC_COMMAND_REG_2 = 0x6,DAC_COMMAND_REG_3 = 0x7,};
enum MACRO_DACF {DACF_MODREV_1 = 1,DACF_NUM_OPIDS = 2,DACF_SUCCESS = 0,DACF_FAILURE = -1,DACF_RULE_HASHSIZE = 8,DACF_MODULE_HASHSIZE = 8,DACF_INFO_HASHSIZE = 16,DACF_PROC_INVOKE = 1,DACF_PROC_RELE = 2,DACF_NUM_DEVSPECS = 3,DACF_ERR_MOD_NOTFOUND = -1,DACF_ERR_OPSET_NOTFOUND = -2,DACF_ERR_OP_NOTFOUND = -3,DACF_ERR_OP_FAILED = -4,DACF_DBG_MSGS = 1,DACF_DBG_DEVI = 2,};
enum MACRO_DAD {DAD_MTYP_DFLT = 0x0,DAD_MTYP_FLXSS = 0x1,DAD_MTYP_FLXDS = 0x2,DAD_MTYP_FLX_8SSSD = 0x5,DAD_MTYP_FLX_8DSSD = 0x6,DAD_MTYP_FLX_8SSDD = 0x9,DAD_MTYP_FLX_8DSDD = 0xA,DAD_MTYP_FLX_5SSLD = 0xD,DAD_MTYP_FLX_5DSMD1 = 0x12,DAD_MTYP_FLX_5DSMD2 = 0x16,DAD_MTYP_FLX_5DSQD = 0x1A,DAD_MTYP_FLX_3DSLD = 0x1E,DAD_MODE_ERR_RECOV = 0x1,DAD_MODE_FORMAT = 0x3,DAD_MODE_GEOMETRY = 0x4,DAD_MODE_FLEXDISK = 0x5,DAD_MODE_VRFY_ERR_RECOV = 0x7,DAD_MODE_CACHE = 0x8,DAD_MODE_MEDIA_TYPES = 0xB,DAD_MODE_NOTCHPART = 0xC,DAD_MODE_POWER_COND = 0xD,};
enum MACRO_DADKIO {DADKIO_RWCMD_READ = 1,DADKIO_RWCMD_WRITE = 2,DADKIO_FLAG_SILENT = 1,DADKIO_FLAG_RESERVED = 2,DADKIO_ERROR_INFO_LEN = 128,DADKIO_STAT_NO_ERROR = 0,DADKIO_STAT_NOT_READY = 1,DADKIO_STAT_MEDIUM_ERROR = 2,DADKIO_STAT_HARDWARE_ERROR = 3,DADKIO_STAT_ILLEGAL_REQUEST = 4,DADKIO_STAT_ILLEGAL_ADDRESS = 5,DADKIO_STAT_WRITE_PROTECTED = 6,DADKIO_STAT_TIMED_OUT = 7,DADKIO_STAT_PARITY = 8,DADKIO_STAT_BUS_ERROR = 9,DADKIO_STAT_SOFT_ERROR = 10,DADKIO_STAT_NO_RESOURCES = 11,DADKIO_STAT_NOT_FORMATTED = 12,DADKIO_STAT_RESERVED = 13,DADKIO_STAT_NOT_SUPPORTED = 14,};
enum MACRO_DAT {DAT_SMALL_WRITE_ERROR_THRESHOLD = 40,DAT_LARGE_WRITE_ERROR_THRESHOLD = 200,DAT_SMALL_READ_ERROR_THRESHOLD = 5,DAT_LARGE_READ_ERROR_THRESHOLD = 3,};
enum MACRO_DATA {DATA = 0x3,ACK = 0x4,};
enum MACRO_DATASETUP {MIN_DATASETUP = 0,MAX_DATASETUP = 30,};
enum MACRO_DAY {DAY_1 = 1,DAY_2 = 2,DAY_3 = 3,DAY_4 = 4,DAY_5 = 5,DAY_6 = 6,DAY_7 = 7,};
enum MACRO_DAYS {DAYS_PER_WEEK = 7,DAYS_PER_NYEAR = 365,DAYS_PER_LYEAR = 366,};
enum MACRO_DAYSHIFT {DAYSHIFT = 0,DAYMASK = 31,};
enum MACRO_DAYSPERLYEAR {DAYSPERLYEAR = 366,SECSPERHOUR = 3600,SECSPERDAY = 86400,};
enum MACRO_DAYSPERNYEAR {DAYSPERNYEAR = 365,};
enum MACRO_DAYSPERWEEK {DAYSPERWEEK = 7,};
enum MACRO_DAY_0 {DAY = 86400,};
enum MACRO_DB {DB_NAME_LEN = 15,};
enum MACRO_DBL {DBL_MANT_DIG = 53,DBL_DIG = 15,DBL_MIN_EXP = -1021,DBL_MIN_10_EXP = -307,DBL_MAX_EXP = 1024,DBL_MAX_10_EXP = 308,};
enum MACRO_DBLK {DBLK_REFMAX = 255,DBLK_REFMIN = 1,};
enum MACRO_DBM {DBM_INSERT = 0,DBM_REPLACE = 1,};
enum MACRO_DBRI : __int64 {DBRI_NPIPES = 32,DBRI_STS_PIPEOFFSET = 16,DBRI_STS_P = 32768,DBRI_STS_S = 8192,DBRI_STS_E = 4096,DBRI_STS_G = 16384,DBRI_STS_X = 128,DBRI_STS_T = 64,DBRI_STS_N = 32,DBRI_STS_C = 16,DBRI_STS_F = 8,DBRI_STS_D = 4,DBRI_STS_H = 2,DBRI_STS_R = 1,DBRI_INTR_LIT_ENDIAN = 256,DBRI_INTR_MRR_ERR = 16,DBRI_INTR_LATE_ERR = 8,DBRI_INTR_BUS_GRANT_ERR = 4,DBRI_INTR_BURST_ERR = 2,DBRI_INTR_REQ = 1,DBRI_PIO_0 = 1,DBRI_PIO_1 = 2,DBRI_PIO_2 = 4,DBRI_PIO_3 = 8,DBRI_PIO0_EN = 16,DBRI_PIO1_EN = 32,DBRI_PIO2_EN = 64,DBRI_PIO3_EN = 128,DBRI_TST_MODE_SPEED = 4,DBRI_TST_MODE_PIO = 8,DBRI_OPSHIFT = 28,DBRI_OPMASK = -268435456,DBRI_CMD_WAIT = 0,DBRI_CMD_PAUSE = 268435456,DBRI_CMD_JMP = 536870912,DBRI_CMD_JMP_LEN = 2,DBRI_CMD_IIQ = 805306368,DBRI_CMD_REX = 1073741824,DBRI_OPCODE_REX = 4,DBRI_CMD_SDP = 1342177280,DBRI_CMD_CDP = 1610612736,DBRI_CMD_DTS = 1879048192,DBRI_OPCODE_DTS = 7,DBRI_CMD_SSP = 2147483648,DBRI_CMD_CHI = 2415919104,DBRI_CMD_NT = 2684354560,DBRI_CMD_TE = 2952790016,DBRI_CMD_CDEC = 3221225472,DBRI_CMD_TEST = 3489660928,DBRI_CMD_CDM = 3758096384,DBRI_CMDI = 134217728,DBRI_CMD_MASK = 4026531840,DBRI_SDP_COLL = 524288,DBRI_SDP_IRM = 0,DBRI_SDP_TWOSAME = 262144,DBRI_SDP_CHNG = 524288,DBRI_SDP_ALLVAL = 786432,DBRI_SDP_EOL = 131072,DBRI_SDP_IBEG = 65536,DBRI_SDP_TRANSPARENT = 0,DBRI_SDP_HDLC = 16384,DBRI_SDP_TE_DCHAN = 24576,DBRI_SDP_SERIAL = 32768,DBRI_SDP_FIXED = 49152,DBRI_SDP_MODEMASK = 57344,DBRI_SDP_D = 4096,DBRI_SDP_B = 2048,DBRI_SDP_PTR = 1024,DBRI_SDP_IDL = 512,DBRI_SDP_ABT = 256,DBRI_SDP_CLR = 128,DBRI_SDP_CMDMASK = 1920,DBRI_DTS_VI = 1,DBRI_DTS_VO = 1,DBRI_DTS_ID = 1,DBRI_DTS_DI = 1,DBRI_DTS_SINGLE = 0,DBRI_DTS_MONITOR = 2,DBRI_DTS_INDIRECT = 3,DBRI_DTS_ALTERNATE = 7,DBRI_CHI_INT = 32768,DBRI_CHI_CHIL = 16384,DBRI_CHI_OD = 8192,DBRI_CHI_FE = 4096,DBRI_CHI_FD = 2048,DBRI_NTE_F = 131072,DBRI_NTE_NBF = 65536,DBRI_NTE_IRM_STATUS = 32768,DBRI_NTE_IRM_SBRI = 16384,DBRI_NTE_ISNT = 8192,DBRI_NT_FT = 4096,DBRI_NTE_EZ = 2048,DBRI_NTE_IFA = 1024,DBRI_NTE_ACT = 512,DBRI_NT_MFE = 256,DBRI_TE_QE = 256,DBRI_NTE_RLB_D = 128,DBRI_NTE_RLB_B1 = 64,DBRI_NTE_RLB_B2 = 32,DBRI_NTE_LLB_D = 16,DBRI_NTE_LLB_B1 = 8,DBRI_NTE_LLB_B2 = 4,DBRI_NTE_FACT = 2,DBRI_NTE_ABV = 1,DBRI_CDEC_DISABL_CLK = 0,DBRI_CDEC_2MHZ = 16777216,DBRI_CDEC_1_5MHZ = 33554432,DBRI_TST_ROMMON = 5,DBRI_TST_SBUS = 6,DBRI_TST_SERIAL = 7,DBRI_TST_RAM_RD = 8,DBRI_TST_RAM_WT = 9,DBRI_TST_RAM_BIST = 10,DBRI_TST_UCTL_BIST = 11,DBRI_TST_ROM_DUMP = 12,DBRI_CDM_THI = 256,DBRI_CDM_RHI = 128,DBRI_CDM_RCE = 64,DBRI_CDM_CMSR = 32,DBRI_CDM_ODD = 16,DBRI_CDM_CMSX = 8,DBRI_CDM_XCE = 4,DBRI_CDM_XEN = 2,DBRI_CDM_REN = 1,DBRI_MAX_QWORDS = 63,DBRI_INT_IBITS = 2,DBRI_INT_MAX_CHAN = 32,DBRI_INT_TE_CHAN = 32,DBRI_INT_NT_CHAN = 34,DBRI_INT_CHI_CHAN = 36,DBRI_INT_REPORT_CHAN = 38,DBRI_INT_OTHER_CHAN = 40,DBRI_INT_BRDY = 1,DBRI_INT_MINT = 2,DBRI_INT_IBEG = 3,DBRI_INT_IEND = 4,DBRI_INT_EOL = 5,DBRI_INT_CMDI = 6,DBRI_INT_XCMP = 8,DBRI_INT_SBRI = 9,DBRI_INT_FXDT = 10,DBRI_INT_CHIL = 11,DBRI_INT_COLL = 11,DBRI_INT_DBYT = 12,DBRI_INT_RBYT = 13,DBRI_INT_LINT = 14,DBRI_INT_UNDR = 15,DBRI_NTINFO0_G1 = 0,DBRI_NTINFO2_G2 = 6,DBRI_NTINFO4_G3 = 7,DBRI_NTINFO0_G4 = 1,DBRI_TEINFO0_F1 = 0,DBRI_TEINFO0_F8 = 2,DBRI_TEINFO0_F3 = 3,DBRI_TEINFO1_F4 = 4,DBRI_TEINFO0_F5 = 5,DBRI_TEINFO3_F6 = 6,DBRI_TEINFO3_F7 = 7,DBRI_D_CLASS_1 = 0,DBRI_D_CLASS_2 = 1,DBRI_TMD_UNR = 8,DBRI_TMD_ABT = 4,DBRI_TMD_TFC = 2,DBRI_TMD_TBC = 1,DBRI_MAX_DMASIZE = 8191,DBRI_RMD_CRC = 128,DBRI_RMD_BBC = 64,DBRI_RMD_ABT = 32,DBRI_RMD_OVRN = 8,};
enum MACRO_DC {DC_GETFLAGS = 0,DC_SETFLAGS = 1,DC_CASE = 1,DC_STD = 1,};
enum MACRO_DCMD {DCMD_ADDRSPEC = 0x1,DCMD_LOOP = 0x2,DCMD_LOOPFIRST = 0x4,DCMD_PIPE = 0x8,DCMD_PIPE_OUT = 0x10,DCMD_OK = 0x0,DCMD_ERR = 0x1,DCMD_USAGE = 0x2,DCMD_NEXT = 0x3,DCMD_ABORT = 0x4,};
enum MACRO_DCMD_READ {DCMD_READ = 1,DCMD_WRITE = 2,DCMD_FMTTRK = 3,DCMD_FMTDRV = 4,DCMD_RECAL = 5,DCMD_SEEK = 6,DCMD_RDVER = 7,DCMD_GETDEF = 8,DCMD_LOCK = 9,DCMD_UNLOCK = 10,DCMD_START_MOTOR = 11,DCMD_STOP_MOTOR = 12,DCMD_EJECT = 13,DCMD_UPDATE_GEOM = 14,DCMD_GET_STATE = 15,DCMD_PAUSE = 16,DCMD_RESUME = 17,DCMD_PLAYTRKIND = 18,DCMD_PLAYMSF = 19,DCMD_SUBCHNL = 20,DCMD_READMODE1 = 21,DCMD_READTOCHDR = 22,DCMD_READTOCENT = 23,DCMD_READOFFSET = 24,DCMD_READMODE2 = 25,DCMD_VOLCTRL = 26,};
enum MACRO_DCOPS {DCOPS_VERSION = 1,};
enum MACRO_DCSR {DCSR_INT_PEND = 0x1,DCSR_ERR_PEND = 0x2,DCSR_INT_EN = 0x10,DCSR_RESET = 0x80,DCSR_WRITE = 0x100,DCSR_EN_DMA = 0x200,DCSR_CYC_PEND = 0x400,DCSR_EN_CNT = 0x2000,DCSR_TC = 0x4000,DCSR_CSR_DRAIN = 0x0,DCSR_DIAG = 0x0,DCSR_TCI_DIS = 0x800000,};
enum MACRO_DC_0 {DC = 0x4D,};
enum MACRO_DC_CLSLEEP {DC_CLSLEEP = 0,DC_CLNOSLEEP = 1,};
enum MACRO_DC_EXCL {DC_EXCL = 1,};
enum MACRO_DDI {DDI_PROP_SUCCESS = 0,DDI_PROP_NOT_FOUND = 1,DDI_PROP_UNDEFINED = 2,DDI_PROP_NO_MEMORY = 3,DDI_PROP_INVAL_ARG = 4,DDI_PROP_BUF_TOO_SMALL = 5,DDI_PROP_CANNOT_DECODE = 6,DDI_PROP_CANNOT_ENCODE = 7,DDI_PROP_END_OF_DATA = 8,DDI_PROP_FOUND_1275 = 255,};
enum MACRO_DDI_DMA {DDI_DMA_FORCE_PHYSICAL = 0x100,};
enum MACRO_DDI_DMA_CALLBACK {DDI_DMA_CALLBACK_RUNOUT = 0,DDI_DMA_CALLBACK_DONE = 1,DDI_DMA_WRITE = 1,DDI_DMA_READ = 2,DDI_DMA_RDWR = 3,DDI_DMA_REDZONE = 4,DDI_DMA_PARTIAL = 8,DDI_DMA_CONSISTENT = 16,DDI_DMA_EXCLUSIVE = 32,DDI_DMA_STREAMING = 64,DDI_DMA_SBUS_64BIT = 8192,DDI_DMA_MAPPED = 0,DDI_DMA_MAPOK = 0,DDI_DMA_PARTIAL_MAP = 1,DDI_DMA_DONE = 2,DDI_DMA_NORESOURCES = -1,DDI_DMA_NOMAPPING = -2,DDI_DMA_TOOBIG = -3,DDI_DMA_TOOSMALL = -4,DDI_DMA_LOCKED = -5,DDI_DMA_BADLIMITS = -6,DDI_DMA_STALE = -7,DDI_DMA_BADATTR = -8,DDI_DMA_INUSE = -9,DDI_DMA_SYNC_FORDEV = 0,DDI_DMA_SYNC_FORCPU = 1,DDI_DMA_SYNC_FORKERNEL = 2,};
enum MACRO_DDI_ME {DDI_ME_GENERIC = -1,DDI_ME_UNIMPLEMENTED = -2,DDI_ME_NORESOURCES = -3,DDI_ME_UNSUPPORTED = -4,DDI_ME_REGSPEC_RANGE = -5,DDI_ME_RNUMBER_RANGE = -6,DDI_ME_INVAL = -7,};
enum MACRO_DDI_PERSISTENT {DDI_PERSISTENT = 0x1,DDI_AUTO_ASSIGNED_NODEID = 0x2,};
enum MACRO_DDI_PROP : __int64 {DDI_PROP_DONTPASS = 0x1,DDI_PROP_CANSLEEP = 0x2,DDI_PROP_SYSTEM_DEF = 0x4,DDI_PROP_NOTPROM = 0x8,DDI_PROP_DONTSLEEP = 0x10,DDI_PROP_STACK_CREATE = 0x20,DDI_PROP_UNDEF_IT = 0x40,DDI_PROP_HW_DEF = 0x80,DDI_PROP_TYPE_INT = 0x100,DDI_PROP_TYPE_STRING = 0x200,DDI_PROP_TYPE_BYTE = 0x400,DDI_PROP_TYPE_COMPOSITE = 0x800,DDI_PROP_TYPE_ANY = 0xF00,DDI_PROP_TYPE_MASK = 0xF00,DDI_DEV_T_NONE = 0xFFFFFFFF,DDI_DEV_T_ANY = 0xFFFFFFFE,DDI_MAJOR_T_UNKNOWN = 0x0,};
enum MACRO_DDI_SUCCESS {DDI_SUCCESS = 0,DDI_FAILURE = -1,DDI_NOT_WELL_FORMED = -2,};
enum MACRO_DDI_UMEM {DDI_UMEM_SLEEP = 0x0,DDI_UMEM_NOSLEEP = 0x1,DDI_UMEM_PAGEABLE = 0x2,DDI_UMEMLOCK_READ = 0x1,DDI_UMEMLOCK_WRITE = 0x2,};
enum MACRO_DEBUGGING {DEBUGGING_ALL = 0,};
enum MACRO_DEBUGGING_0 {DEBUGGING = 0,};
enum MACRO_DECIMAL {DECIMAL_STRING_LENGTH = 512,};
enum MACRO_DEF {DEF_USER_OBJ = 4097,DEF_USER = 4098,DEF_GROUP_OBJ = 4100,DEF_GROUP = 4104,DEF_CLASS_OBJ = 4112,DEF_OTHER_OBJ = 4128,};
enum MACRO_DEFAULT {DEFAULT_MAXPID = 30000,DEFAULT_JUMPPID = 0,};
enum MACRO_DEFAULT_HOSTID {DEFAULT_HOSTID = 7,};
enum MACRO_DEFAULT_INTLV {DEFAULT_INTLV = 4,};
enum MACRO_DEFAULT_OFFSET {DEFAULT_OFFSET = 15,};
enum MACRO_DEFAULT_RIGHTS {DEFAULT_RIGHTS = 983297,};
enum MACRO_DEFAULT_SYNC {DEFAULT_SYNC_PERIOD = 200,DEFAULT_FASTSYNC_PERIOD = 100,};
enum MACRO_DEFAULT_TRACE {DEFAULT_TRACE = 10,DEFAULT_DEBUGLEVEL = 7,};
enum MACRO_DEFAULT_TYPE {DEFAULT_TYPE = 0,};
enum MACRO_DEFGID {DEFGID = 99,};
enum MACRO_DEFGROUP {DEFGROUP = 1,};
enum MACRO_DEFINACT {DEFINACT = 0,MAXGLEN = 9,MAXDLEN = 80,};
enum MACRO_DEFRID {DEFRID = 99,};
enum MACRO_DEF_FILEGRP {DEF_FILEGRP_SIZE = 256,DEF_POP_SIZE = 65536,};
enum MACRO_DELIMITER {DELIMITER_ERROR = 0x6,};
enum MACRO_DEMANGLE {DEMANGLE_ESPACE = -1,DEMANGLE_ENAME = 1,};
enum MACRO_DERR {DERR_SUCCESS = 0,DERR_AMNF = 1,DERR_TKONF = 2,DERR_ABORT = 3,DERR_DWF = 4,DERR_IDNF = 5,DERR_BUSY = 6,DERR_UNC = 7,DERR_BBK = 8,DERR_INVCDB = 9,DERR_HARD = 10,DERR_ILI = 11,DERR_EOM = 12,DERR_MCR = 13,DERR_RECOVER = 14,DERR_NOTREADY = 15,DERR_MEDIUM = 16,DERR_HW = 17,DERR_ILL = 18,DERR_UNIT_ATTN = 19,DERR_DATA_PROT = 20,DERR_MISCOMP = 21,DERR_RESV = 22,};
enum MACRO_DES {DES_MAXLEN = 65536,DES_QUICKLEN = 16,};
enum MACRO_DESERR {DESERR_NONE = 0,DESERR_NOHWDEVICE = 1,DESERR_HWERROR = 2,DESERR_BADPARAM = 3,};
enum MACRO_DES_MAXDATA {DES_MAXDATA = 8192,DES_DIRMASK = 1,DES_ENCRYPT = 0,DES_DECRYPT = 1,DES_DEVMASK = 2,DES_HW = 0,DES_SW = 2,};
enum MACRO_DET {NO_SCHR_DET = 0x0,SCHR_DET = 0x10,};
enum MACRO_DEV {DEV_BSIZE = 512,DEV_BSHIFT = 9,};
enum MACRO_DEVCLASS {DEVCLASS_MASK = 0xE,};
enum MACRO_DEVCTL {DEVCTL_IOC = 0xDC0000,DEVCTL_BUS_QUIESCE = 0xDC0001,DEVCTL_BUS_UNQUIESCE = 0xDC0002,DEVCTL_BUS_RESETALL = 0xDC0003,DEVCTL_BUS_RESET = 0xDC0004,DEVCTL_BUS_GETSTATE = 0xDC0005,DEVCTL_DEVICE_ONLINE = 0xDC0006,DEVCTL_DEVICE_OFFLINE = 0xDC0007,DEVCTL_DEVICE_GETSTATE = 0xDC0009,DEVCTL_DEVICE_RESET = 0xDC000A,DEVCTL_BUS_CONFIGURE = 0xDC000B,DEVCTL_BUS_UNCONFIGURE = 0xDC000C,DEVCTL_DEVICE_REMOVE = 0xDC000D,DEVCTL_AP_CONNECT = 0xDC000E,DEVCTL_AP_DISCONNECT = 0xDC000F,DEVCTL_AP_INSERT = 0xDC0010,DEVCTL_AP_REMOVE = 0xDC0011,DEVCTL_AP_CONFIGURE = 0xDC0012,DEVCTL_AP_UNCONFIGURE = 0xDC0013,DEVCTL_AP_GETSTATE = 0xDC0014,DEVCTL_AP_CONTROL = 0xDC0015,};
enum MACRO_DEVFD {DEVFD = 0,XMTRD = 1,ERRFD = 2,};
enum MACRO_DEVI {DEVI_PSEUDO_NODEID = -1,DEVI_SID_NODEID = -2,};
enum MACRO_DEVICE {DEVICE_ONLINE = 0x1,DEVICE_BUSY = 0x2,DEVICE_OFFLINE = 0x4,DEVICE_DOWN = 0x8,};
enum MACRO_DEVID {DEVID_MAGIC_MSB = 0x69,DEVID_MAGIC_LSB = 0x64,DEVID_REV_MSB = 0x0,DEVID_REV_LSB = 0x1,DEVID_HINT_SIZE = 0x4,};
enum MACRO_DEVI_DEVICE {DEVI_DEVICE_OFFLINE = 0x1,DEVI_DEVICE_DOWN = 0x2,DEVI_DEVICE_DEGRADED = 0x4,DEVI_BUS_QUIESCED = 0x100,DEVI_BUS_DOWN = 0x200,DEVI_NDI_CONFIG = 0x400,DEVI_S_ATTACHING = 0x10000,DEVI_S_DETACHING = 0x20000,DEVI_S_ONLINING = 0x40000,DEVI_S_OFFLINING = 0x80000,DEVI_S_INVOKING_DACF = 0x100000,DEVI_S_UNBOUND = 0x200000,DEVI_S_MD_UPDATE = 0x400000,DEVI_S_REPORT = 0x8000000,};
enum MACRO_DEVMAP {DEVMAP_OPS_REV = 1,DEVMAP_DEFAULTS = 0,DEVMAP_MAPPING_INVALID = 1,DEVMAP_ALLOW_REMAP = 2,DEVMAP_USE_PAGESIZE = 4,DEVMAP_UNLOAD_PENDING = 8,DEVMAP_SETUP_DONE = 256,DEVMAP_LOCK_INITED = 512,DEVMAP_FAULTING = 1024,DEVMAP_LOCKED = 2048,DEVMAP_FLAG_LARGE = 4096,DEVMAP_FLAG_KPMEM = 8192,DEVMAP_FLAG_KMEM = 16384,DEVMAP_FLAG_DEVMEM = 32768,};
enum MACRO_DEVPOLLSIZE {DEVPOLLSIZE = 1000,};
enum MACRO_DF {DF_P1_LAZYLOAD = 0x1,DF_P1_GROUPPERM = 0x2,DF_1_NOW = 0x1,DF_1_GLOBAL = 0x2,DF_1_GROUP = 0x4,DF_1_NODELETE = 0x8,DF_1_LOADFLTR = 0x10,DF_1_INITFIRST = 0x20,DF_1_NOOPEN = 0x40,DF_1_ORIGIN = 0x80,DF_1_DIRECT = 0x100,DF_1_TRANS = 0x200,DF_1_INTERPOSE = 0x400,DF_1_NODEFLIB = 0x800,DF_1_NODUMP = 0x1000,DF_1_CONFALT = 0x2000,DF_1_ENDFILTEE = 0x4000,};
enum MACRO_DF_VALID {DF_VALID = 0x1,DF_COMPLETE = 0x2,DF_LIVE = 0x4,};
enum MACRO_DI {DI_MAGIC = 0xDFDF,DI_BUS_OPS = 0x1,DI_CB_OPS = 0x2,DI_STREAM_OPS = 0x4,DI_PROP_DRV_LIST = 0x0,DI_PROP_SYS_LIST = 0x1,DI_PROP_GLB_LIST = 0x2,DI_PROP_HW_LIST = 0x3,};
enum MACRO_DIAGPART {DIAGPART = 18,};
enum MACRO_DIIOC {DIIOC = 0xDF00,};
enum MACRO_DIMNUM {DIMNUM = 4,};
enum MACRO_DINFOCPYALL {DINFOCPYALL = 57095,};
enum MACRO_DINFOCPYONE {DINFOCPYONE = 57088,};
enum MACRO_DINFOFORCE {DINFOFORCE = 0xDF20,};
enum MACRO_DINFOIDENT {DINFOIDENT = 0xDF82,};
enum MACRO_DINFOLODRV {DINFOLODRV = 0xDF81,};
enum MACRO_DINFOMINOR {DINFOMINOR = 0xDF02,};
enum MACRO_DINFOPRIVDATA {DINFOPRIVDATA = 0xDF10,};
enum MACRO_DINFOPROP {DINFOPROP = 0xDF04,};
enum MACRO_DINFOSUBTREE {DINFOSUBTREE = 0xDF01,};
enum MACRO_DINFOUSRLD {DINFOUSRLD = 0xDF80,};
enum MACRO_DIO {DIO = 0x40,};
enum MACRO_DIOC {DIOC = 25600,};
enum MACRO_DIOCGETB {DIOCGETB = 25602,};
enum MACRO_DIOCGETC {DIOCGETC = 25601,};
enum MACRO_DIOCGETP {DIOCGETP = 25608,};
enum MACRO_DIOCSETE {DIOCSETE = 25603,};
enum MACRO_DIOCSETP {DIOCSETP = 25609,};
enum MACRO_DIOCTL {DIOCTL_GETGEOM = 1,DIOCTL_GETPHYGEOM = 2,DIOCTL_RWCMD = 5,};
enum MACRO_DIRBLKSIZ {DIRBLKSIZ = 512,};
enum MACRO_DIRBUF {DIRBUF = 1048,};
enum MACRO_DIRECTIO {DIRECTIO_OFF = 0,DIRECTIO_ON = 1,};
enum MACRO_DIRTYPE {DIRTYPE = 53,};
enum MACRO_DISALLOW {DISALLOW_BOTH = 65538,};
enum MACRO_DI_SNAPSHOT {DI_SNAPSHOT_VERSION_0 = 0,DI_PRIVDATA_VERSION_0 = 10,DI_BIG_ENDIAN = 0,DI_LITTLE_ENDIAN = 1,DI_WALK_CLDFIRST = 0,DI_WALK_SIBFIRST = 1,DI_WALK_LINKGEN = 2,DI_WALK_MASK = 15,DI_WALK_CONTINUE = 0,DI_WALK_PRUNESIB = -1,DI_WALK_PRUNECHILD = -2,DI_WALK_TERMINATE = -3,DI_CHECK_ALIAS = 16,DI_CHECK_INTERNAL_PATH = 32,DI_CHECK_MASK = 240,DI_PSEUDO_NODEID = -1,DI_SID_NODEID = -2,DI_PROM_NODEID = -3,DI_DRIVER_DETACHED = 32768,DI_DEVICE_OFFLINE = 1,DI_DEVICE_DOWN = 2,DI_BUS_QUIESCED = 256,DI_BUS_DOWN = 512,DI_PROP_TYPE_BOOLEAN = 0,DI_PROP_TYPE_INT = 1,DI_PROP_TYPE_STRING = 2,DI_PROP_TYPE_BYTE = 3,DI_PROP_TYPE_UNKNOWN = 4,DI_PROP_TYPE_UNDEF_IT = 5,DI_NODE_NIL = 0,DI_MINOR_NIL = 0,DI_PROP_NIL = 0,DI_PROM_PROP_NIL = 0,DI_PROM_HANDLE_NIL = 0,};
enum MACRO_DK {DK_LABEL_LOC = 0,};
enum MACRO_DKC {DKC_UNKNOWN = 0,DKC_CDROM = 1,DKC_WDC2880 = 2,DKC_XXX_0 = 3,DKC_XXX_1 = 4,DKC_DSD5215 = 5,DKC_ACB4000 = 7,DKC_MD21 = 8,DKC_XXX_2 = 9,DKC_NCRFLOPPY = 10,DKC_SMSFLOPPY = 12,DKC_SCSI_CCS = 13,DKC_INTEL82072 = 14,DKC_MD = 16,DKC_INTEL82077 = 19,DKC_DIRECT = 20,DKC_PCMCIA_MEM = 21,DKC_PCMCIA_ATA = 22,DKC_CUSTOMER_BASE = 1024,};
enum MACRO_DKF {DKF_DRV_RESERVED = 0x1,DKF_DRV_DUAL_ENABLED = 0x2,DKF_DRV_RESET = 0x4,DKF_DRV_WRTPROT = 0x8,DKF_DRV_BUSY = 0x10,DKF_DRV_TIMEOUT = 0x20,DKF_DRV_DUALPORTED = 0x40,DKF_DRV_ALTRSVD = 0x80,DKF_ADAPT_RESERVED = 0x100,DKF_ADAPT_RESET = 0x400,DKF_ADAPT_BUSY = 0x1000,DKF_ADAPT_TIMEOUT = 0x2000,DKF_CTLR_RESERVED = 0x10000,DKF_CTLR_RESET = 0x40000,DKF_CTLR_BUSY = 0x100000,DKF_CTLR_TIMEOUT = 0x2000000,DKF_DRV_RSV_LOST = 0x1,DKF_CTLR_RSV_LOST = 0x2,DKF_DRV_DIAGNOSED = 0x4,DKF_CTLR_DIAGNOSED = 0x8,DKF_ADAPT_DIAGNOSED = 0x10,DKF_DRV_FAILED = 0x1000,DKF_CTLR_FAILED = 0x100000,DKF_ADAPT_FAILED = 0x10000000,DKF_DRV_NOEXIST = 0x1,DKF_CTLR_NOEXIST = 0x2,DKF_ADAPT_NOEXIST = 0x4,DKF_ORDERED = 0x1,DKF_PANIC_ABORT = 0x2,DKF_RERUN_UNR_CMDS = 0x4,DKF_RERUN_RSV_CMDS = 0x8,DKF_AUTOFAIL = 0x10,DKF_RESERVE = 0x1,DKF_RELEASE = 0x2,DKF_RESET = 0x4,DKF_ABORT = 0x8,DKF_PROBE = 0x10,DKF_REINIT = 0x20,DKF_DIAGNOSE = 0x1,DKF_ISOLATE = 0x2,DKF_READ = 0x4,DKF_WRITE = 0x8,DKF_DESTRUCTIVE = 0x10,};
enum MACRO_DKI {DKI_BAD144 = 0x1,DKI_MAPTRK = 0x2,DKI_FMTTRK = 0x4,DKI_FMTVOL = 0x8,DKI_FMTCYL = 0x10,DKI_HEXUNIT = 0x20,DKI_PCMCIA_PFD = 0x40,};
enum MACRO_DKIOC {DKIOC = 0x400,};
enum MACRO_DKIOCADDBAD {DKIOCADDBAD = 1044,};
enum MACRO_DKIOCEJECT {DKIOCEJECT = 1030,};
enum MACRO_DKIOCG {DKIOCG_PHYGEOM = 1056,DKIOCG_VIRTGEOM = 1057,};
enum MACRO_DKIOCGAPART {DKIOCGAPART = 1029,};
enum MACRO_DKIOCGETDEF {DKIOCGETDEF = 1045,};
enum MACRO_DKIOCGGEOM {DKIOCGGEOM = 1025,};
enum MACRO_DKIOCGMEDIAINFO {DKIOCGMEDIAINFO = 1066,};
enum MACRO_DKIOCGMPFLAGS {DKIOCGMPFLAGS = 25694,};
enum MACRO_DKIOCGMPINFO {DKIOCGMPINFO = 25690,};
enum MACRO_DKIOCGMPSTATE {DKIOCGMPSTATE = 25691,};
enum MACRO_DKIOCGSTATUS {DKIOCGSTATUS = 25693,};
enum MACRO_DKIOCGVTOC {DKIOCGVTOC = 1035,};
enum MACRO_DKIOCINFO {DKIOCINFO = 1027,};
enum MACRO_DKIOCLOCK {DKIOCLOCK = 1031,};
enum MACRO_DKIOCPARTINFO {DKIOCPARTINFO = 1046,};
enum MACRO_DKIOCREMOVABLE {DKIOCREMOVABLE = 1040,};
enum MACRO_DKIOCSAPART {DKIOCSAPART = 1028,};
enum MACRO_DKIOCSGEOM {DKIOCSGEOM = 1026,};
enum MACRO_DKIOCSMPCMD {DKIOCSMPCMD = 25696,};
enum MACRO_DKIOCSMPFLAGS {DKIOCSMPFLAGS = 25695,};
enum MACRO_DKIOCSMPSTATE {DKIOCSMPSTATE = 25692,};
enum MACRO_DKIOCSTATE {DKIOCSTATE = 1037,};
enum MACRO_DKIOCSVTOC {DKIOCSVTOC = 1036,};
enum MACRO_DKIOCUNLOCK {DKIOCUNLOCK = 1032,};
enum MACRO_DKIOC_EBP {DKIOC_EBP_ENABLE = 1064,DKIOC_EBP_DISABLE = 1065,};
enum MACRO_DKL {DKL_MAGIC = 0xDABE,FKL_MAGIC = 0xFF,};
enum MACRO_DK_LABEL {DK_LABEL_SIZE = 512,DK_ACYL = 2,DK_DEVID_BLKSIZE = 512,DK_DEVID_REV_MSB = 0,DK_DEVID_REV_LSB = 1,DK_DEVLEN = 16,};
enum MACRO_DK_UNKNOWN {DK_UNKNOWN = 0x0,DK_MO_ERASABLE = 0x3,DK_MO_WRITEONCE = 0x4,DK_AS_MO = 0x5,DK_CDROM = 0x8,DK_CDR = 0x9,DK_CDRW = 0xA,DK_DVDROM = 0x10,DK_DVDR = 0x11,DK_DVDRAM = 0x12,DK_FIXED_DISK = 0x10001,DK_FLOPPY = 0x10002,DK_ZIP = 0x10003,DK_JAZ = 0x10004,};
enum MACRO_DL {DL = 0x4E,};
enum MACRO_DLD {DLD_MAN_DEF_LIST = 0x10,DLD_GROWN_DEF_LIST = 0x8,DLD_BLOCK_FORMAT = 0x0,DLD_BFI_FORMAT = 0x4,DLD_PS_FORMAT = 0x5,};
enum MACRO_DLIOC {DLIOC = 17408,};
enum MACRO_DLIOCRAW {DLIOCRAW = 17409,};
enum MACRO_DL_IOC {DL_IOC_HDR_INFO = 17418,DL_CURRENT_VERSION = 2,DL_VERSION_2 = 2,DL_INFO_REQ = 0,DL_INFO_ACK = 3,DL_ATTACH_REQ = 11,DL_DETACH_REQ = 12,DL_BIND_REQ = 1,DL_BIND_ACK = 4,DL_UNBIND_REQ = 2,DL_OK_ACK = 6,DL_ERROR_ACK = 5,DL_SUBS_BIND_REQ = 27,DL_SUBS_BIND_ACK = 28,DL_SUBS_UNBIND_REQ = 21,DL_ENABMULTI_REQ = 29,DL_DISABMULTI_REQ = 30,DL_PROMISCON_REQ = 31,DL_PROMISCOFF_REQ = 32,DL_UNITDATA_REQ = 7,DL_UNITDATA_IND = 8,DL_UDERROR_IND = 9,DL_UDQOS_REQ = 10,DL_CONNECT_REQ = 13,DL_CONNECT_IND = 14,DL_CONNECT_RES = 15,DL_CONNECT_CON = 16,DL_TOKEN_REQ = 17,DL_TOKEN_ACK = 18,DL_DISCONNECT_REQ = 19,DL_DISCONNECT_IND = 20,DL_RESET_REQ = 23,DL_RESET_IND = 24,DL_RESET_RES = 25,DL_RESET_CON = 26,DL_DATA_ACK_REQ = 33,DL_DATA_ACK_IND = 34,DL_DATA_ACK_STATUS_IND = 35,DL_REPLY_REQ = 36,DL_REPLY_IND = 37,DL_REPLY_STATUS_IND = 38,DL_REPLY_UPDATE_REQ = 39,DL_REPLY_UPDATE_STATUS_IND = 40,DL_XID_REQ = 41,DL_XID_IND = 42,DL_XID_RES = 43,DL_XID_CON = 44,DL_TEST_REQ = 45,DL_TEST_IND = 46,DL_TEST_RES = 47,DL_TEST_CON = 48,DL_PHYS_ADDR_REQ = 49,DL_PHYS_ADDR_ACK = 50,DL_SET_PHYS_ADDR_REQ = 51,DL_GET_STATISTICS_REQ = 52,DL_GET_STATISTICS_ACK = 53,DL_UNATTACHED = 4,DL_ATTACH_PENDING = 5,DL_DETACH_PENDING = 6,DL_UNBOUND = 0,DL_BIND_PENDING = 1,DL_UNBIND_PENDING = 2,DL_IDLE = 3,DL_UDQOS_PENDING = 7,DL_OUTCON_PENDING = 8,DL_INCON_PENDING = 9,DL_CONN_RES_PENDING = 10,DL_DATAXFER = 11,DL_USER_RESET_PENDING = 12,DL_PROV_RESET_PENDING = 13,DL_RESET_RES_PENDING = 14,DL_DISCON8_PENDING = 15,DL_DISCON9_PENDING = 16,DL_DISCON11_PENDING = 17,DL_DISCON12_PENDING = 18,DL_DISCON13_PENDING = 19,DL_SUBS_BIND_PND = 20,DL_SUBS_UNBIND_PND = 21,DL_ACCESS = 2,DL_BADADDR = 1,DL_BADCORR = 5,DL_BADDATA = 6,DL_BADPPA = 8,DL_BADPRIM = 9,DL_BADQOSPARAM = 10,DL_BADQOSTYPE = 11,DL_BADSAP = 0,DL_BADTOKEN = 12,DL_BOUND = 13,DL_INITFAILED = 14,DL_NOADDR = 15,DL_NOTINIT = 16,DL_OUTSTATE = 3,DL_SYSERR = 4,DL_UNSUPPORTED = 7,DL_UNDELIVERABLE = 17,DL_NOTSUPPORTED = 18,DL_TOOMANY = 19,DL_NOTENAB = 20,DL_BUSY = 21,DL_NOAUTO = 22,DL_NOXIDAUTO = 23,DL_NOTESTAUTO = 24,DL_XIDAUTO = 25,DL_TESTAUTO = 26,DL_PENDING = 27,DL_CSMACD = 0,DL_TPB = 1,DL_TPR = 2,DL_METRO = 3,DL_ETHER = 4,DL_HDLC = 5,DL_CHAR = 6,DL_CTCA = 7,DL_FDDI = 8,DL_FC = 16,DL_ATM = 17,DL_IPATM = 18,DL_X25 = 19,DL_ISDN = 20,DL_HIPPI = 21,DL_100VG = 22,DL_100VGTPR = 23,DL_ETH_CSMA = 24,DL_100BT = 25,DL_FRAME = 10,DL_MPFRAME = 11,DL_ASYNC = 12,DL_IPX25 = 13,DL_LOOP = 14,DL_OTHER = 9,DL_CODLS = 1,DL_CLDLS = 2,DL_ACLDLS = 4,DL_STYLE1 = 1280,DL_STYLE2 = 1281,DL_PROVIDER = 1792,DL_USER = 1793,DL_CONREJ_DEST_UNKNOWN = 2048,DL_CONREJ_DEST_UNREACH_PERMANENT = 2049,DL_CONREJ_DEST_UNREACH_TRANSIENT = 2050,DL_CONREJ_QOS_UNAVAIL_PERMANENT = 2051,DL_CONREJ_QOS_UNAVAIL_TRANSIENT = 2052,DL_CONREJ_PERMANENT_COND = 2053,DL_CONREJ_TRANSIENT_COND = 2054,DL_DISC_ABNORMAL_CONDITION = 2055,DL_DISC_NORMAL_CONDITION = 2056,DL_DISC_PERMANENT_CONDITION = 2057,DL_DISC_TRANSIENT_CONDITION = 2058,DL_DISC_UNSPECIFIED = 2059,DL_RESET_FLOW_CONTROL = 2304,DL_RESET_LINK_ERROR = 2305,DL_RESET_RESYNCH = 2306,DL_CMD_MASK = 15,DL_CMD_OK = 0,DL_CMD_RS = 1,DL_CMD_UE = 5,DL_CMD_PE = 6,DL_CMD_IP = 7,DL_CMD_UN = 9,DL_CMD_IT = 15,DL_RSP_MASK = 240,DL_RSP_OK = 0,DL_RSP_RS = 16,DL_RSP_NE = 48,DL_RSP_NR = 64,DL_RSP_UE = 80,DL_RSP_IP = 112,DL_RSP_UN = 144,DL_RSP_IT = 240,DL_RQST_RSP = 1,DL_RQST_NORSP = 2,DL_FACT_PHYS_ADDR = 1,DL_CURR_PHYS_ADDR = 2,DL_POLL_FINAL = 1,DL_AUTO_XID = 1,DL_AUTO_TEST = 2,DL_PEER_BIND = 1,DL_HIERARCHICAL_BIND = 2,DL_PROMISC_PHYS = 1,DL_PROMISC_SAP = 2,DL_PROMISC_MULTI = 3,DL_NONE = 2817,DL_MONITOR = 2818,DL_MAXIMUM = 2819,DL_UNKNOWN = -1,DL_QOS_DONT_CARE = -2,DL_QOS_CO_RANGE1 = 257,DL_QOS_CO_SEL1 = 258,DL_QOS_CL_RANGE1 = 259,DL_QOS_CL_SEL1 = 260,};
enum MACRO_DL_MAXPRIM {DL_MAXPRIM = 53,};
enum MACRO_DL_MAXSTATE {DL_MAXSTATE = 20,};
enum MACRO_DM {DM_BATCH = 0x1,DM_ELABEL = 0x2,DM_FORMAT = 0x4,DM_FORMFS = 0x8,DM_WLABEL = 0x10,DM_OLABEL = 0x20,};
enum MACRO_DMA {DMA_ATTR_V0 = 0,DMA_ATTR_VERSION = 0,};
enum MACRO_DMAESC {DMAESC_BSIZE = 0x800,DMAESC_TCZERO = 0x1000,DMAESC_EN_TCI = 0x2000,DMAESC_INTPEND = 0x4000,DMAESC_PEN = 0x8000,DMAESC_PERR = 0x10000,DMAESC_DRAIN = 0x20000,DMAESC_EN_ADD = 0x40000,};
enum MACRO_DMAGA {DMAGA_INTPEND = 0x1,DMAGA_ERRPEND = 0x2,DMAGA_PACKCNT = 0xC,DMAGA_DRAINING = 0xC,DMAGA_INTEN = 0x10,DMAGA_FLUSH = 0x20,DMAGA_DRAIN = 0x40,DMAGA_SLVERR = 0x40,DMAGA_RESET = 0x80,DMAGA_WRITE = 0x100,DMAGA_ENDVMA = 0x200,DMAGA_REQPEND = 0x400,};
enum MACRO_DMAGATE {DMAGATE = 0x8,};
enum MACRO_DMAGA_BYTEADR {DMAGA_BYTEADR = 0x1800,DMAGA_ENATC = 0x2000,DMAGA_TC = 0x4000,DMAGA_ILACC = 0x8000,DMAGA_BURSTMASK = 0xC0000,DMAGA_BURST16 = 0x0,DMAGA_NOBURST = 0x80000,DMAGA_BURST32 = 0x40000,DMAGA_ALE = 0x100000,DMAGA_LERR = 0x200000,DMAGA_TURBO = 0x400000,DMAGA_NOTCINT = 0x800000,DMAGA_TWO_CYCLE = 0x200000,DMAGA_ENANXT = 0x1000000,DMAGA_DMAON = 0x2000000,DMAGA_ALOAD = 0x4000000,DMAGA_NALOAD = 0x8000000,};
enum MACRO_DMAGA_CHK {DMAGA_CHK_MASK = 1027,DMAGA_INT_MASK = 3,};
enum MACRO_DMAGA_DEVID {DMAGA_DEVID = 0xF0000000,};
enum MACRO_DMAGA_OFFSET {DMAGA_OFFSET = 0x1000,};
enum MACRO_DMAIS {DMAIS_NEEDINTBUF = 0x100,DMAIS_COMPLEMENT = 0x200,DMAIS_NOMERGE = 0x300,DMAIS_MAPPAGE = 0x400,DMAIS_PAGEPTR = 0x800,DMAIS_WINSTRT = 0x1000,DMAIS_WINUIB = 0x2000,DMAIS_WINEND = 0x8000,};
enum MACRO_DMA_INTPEND {DMA_INTPEND = 0x1,DMA_ERRPEND = 0x2,DMA_DRAINING = 0x4,DMA_INTEN = 0x10,DMA_RESET = 0x80,DMA_WRITE = 0x100,DMA_ENDVMA = 0x200,DMA_REQPEND = 0x400,DMA_DMAREV = 0x7800,DMA_WIDE_EN = 0x8000,DMA_DSBL_DRAIN = 0x20000,DMA_BURSTS = 0xC0000,DMA_TWO_CYCLE = 0x200000,DMA_DSBL_PARITY = 0x2000000,DMA_PAUSE_FAS = 0x4000000,DMA_RESET_FAS = 0x8000000,DMA_DEV_ID = 0xF0000000,DMA_INT_MASK = 0x3,DMA_BURST16 = 0x0,DMA_BURST32 = 0x40000,DMA_BURST64 = 0xC0000,DMA_CE_ID = 0xB0000000,};
enum MACRO_DMA_REV1 {DMA_REV1 = 0x8,DMA_REV2 = 0x9,};
enum MACRO_DMA_REV3 {DMA_REV3 = 0xA,};
enum MACRO_DMGET {DMGET = 3,};
enum MACRO_DMP {DMP_SHADOW = 0x20,DMP_LKIOPB = 0x40,DMP_LKSYSV = 0x80,DMP_IOCACHE = 0x100,DMP_USEHAT = 0x200,DMP_PHYSADDR = 0x400,DMP_INVALID = 0x800,DMP_NOLIMIT = 0x1000,DMP_VMEREQ = 0x10000000,DMP_BYPASSNEXUS = 0x20000000,DMP_NODEVSYNC = 0x40000000,DMP_NOCPUSYNC = 0x80000000,DMP_NOSYNC = 0xC0000000,};
enum MACRO_DMSET {DMSET = 0,DMBIS = 1,DMBIC = 2,};
enum MACRO_DM_0 {DM = 242,};
enum MACRO_DN {DN_CONF_PARSED = 0x1,DN_DEVI_MADE = 0x2,DN_WALKED_TREE = 0x4,DN_DEVS_ATTACHED = 0x8,DN_BUSY_LOADING = 0x10,DN_BUSY_UNLOADING = 0x20,DN_TAKEN_GETUDEV = 0x40,DN_BUSY_CHANGING_BITS = 0x30,};
enum MACRO_DO {DO = 253,};
enum MACRO_DOM {DOM_NM_LN = 64,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,};
enum MACRO_DONT {DONT = 254,};
enum MACRO_DONTWAIT {DONTWAIT = 0,WAIT = 1,};
enum MACRO_DONT_SHOW {DONT_SHOW_CURSOR = 0x1,};
enum MACRO_DOOR {DOOR_INVAL = -1,DOOR_UNREF_DATA = 1,DOOR_QUERY = -2,DOOR_UNREF = 1,DOOR_PRIVATE = 2,DOOR_UNREF_MULTI = 16,DOOR_LOCAL = 4,DOOR_REVOKED = 8,DOOR_IS_UNREF = 32,DOOR_ATTR_MASK = 63,DOOR_DESCRIPTOR = 65536,DOOR_RELEASE = 262144,DOOR_DELAY = 524288,DOOR_UNREF_ACTIVE = 1048576,DOOR_CREATE = 0,DOOR_REVOKE = 1,DOOR_INFO = 2,DOOR_CALL = 3,DOOR_RETURN = 4,DOOR_CRED = 5,DOOR_BIND = 6,DOOR_UNBIND = 7,};
enum MACRO_DOS {DOS_SYSFAT12 = 1,DOS_SYSFAT16 = 4,DOS_SYSHUGE = 6,DOS_FAT32 = 11,DOS_FAT32_LBA = 12,DOS_FAT16P_LBA = 14,DOS_FAT16_LBA = 15,DOS_F12MAXS = 20740,DOS_F12MAXC = 4086,DOS_ID1 = 233,DOS_ID2a = 235,DOS_ID2b = 144,DOS_SIGN = 43605,};
enum MACRO_DOSDATA {DOSDATA = 86,};
enum MACRO_DOSHUGE {DOSHUGE = 6,};
enum MACRO_DOSOS12 {DOSOS12 = 1,PCIXOS = 2,DOSOS16 = 4,};
enum MACRO_DOUBLE {DOUBLE_2CLUTS = 0x0,DOUBLE_3CLUTS = 0x1,};
enum MACRO_DOWNLOAD {DOWNLOAD_REQUIRED = 2,};
enum MACRO_DO_CHAP {DO_CHAP = 1,DO_PAP = 2,};
enum MACRO_DP {DP_POLL = 53249,DP_ISPOLLED = 53250,};
enum MACRO_DPIOC {DPIOC = 0xD000,};
enum MACRO_DPQ {DPQ_POSSIBLE = 0x0,DPQ_SUPPORTED = 0x20,DPQ_NEVER = 0x60,DPQ_VUNIQ = 0x80,};
enum MACRO_DQ {DQ_FTIMELIMIT = 604800,DQ_BTIMELIMIT = 604800,DQ_ERROR = 1,DQ_MOD = 4,DQ_BLKS = 16,DQ_FILES = 32,DQ_TRANS = 64,};
enum MACRO_DR {DR_NEWHEADER = 1,DR_INODEINFO = 2,DR_REDUMP = 4,DR_TRUEINC = 8,DR_HASMETA = 16,};
enum MACRO_DRADDRLINES {DRADDRLINES = 20,};
enum MACRO_DRAIN_SIZE {MIN_DRAIN_SIZE = 4,MAX_DRAIN_SIZE = 1024,};
enum MACRO_DRCTL {DRCTL_PROMEN = 0x2000,DRCTL_SCILVL = 0x1000,DRCTL_SCILVL_SB0 = 0x0,DRCTL_SCILVL_SB1 = 0x1000,DRCTL_CDIE = 0x800,DRCTL_BVD2IE = 0x400,DRCTL_BVD1IE = 0x200,DRCTL_RDYIE = 0x100,DRCTL_WPIE = 0x80,DRCTL_CTOIE = 0x40,DRCTL_IOIE = 0x10,};
enum MACRO_DRCTL_IOILVL {DRCTL_IOILVL = 0x8,DRCTL_IOILVL_SB0 = 0x0,DRCTL_IOILVL_SB1 = 0x8,DRCTL_SPKREN = 0x4,DRCTL_RESET = 0x2,DRCTL_IFTYPE = 0x1,DRCTL_IFTYPE_MEM = 0x0,DRCTL_IFTYPE_IO = 0x1,DRCTL_LPBKEN = 0x8000,DRCTL_CD1DB = 0x4000,DRCTL_BVD2DB = 0x2000,DRCTL_BVD1DB = 0x1000,DRCTL_RDYDB = 0x800,DRCTL_WPDB = 0x400,DRCTL_WAITDB = 0x200,DRCTL_DIAGEN = 0x100,DRCTL_APWREN = 0x40,DRCTL_VPP2EN = 0x30,DRCTL_VPP2_OFF = 0x0,DRCTL_VPP2_VCC = 0x10,DRCTL_VPP2_VPP = 0x20,DRCTL_VPP2_ZIP = 0x30,DRCTL_VPP1EN = 0xC,DRCTL_VPP1_OFF = 0x0,DRCTL_VPP1_VCC = 0x4,DRCTL_VPP1_VPP = 0x8,DRCTL_VPP1_ZIP = 0xC,DRCTL_MSTPWR = 0x2,DRCTL_PCIFOE = 0x1,};
enum MACRO_DRMAP {DRMAP_PROM = 0,DRMAP_CARD0_WIN0 = 1,DRMAP_CARD0_WIN1 = 2,DRMAP_CARD0_WIN2 = 3,DRMAP_ASIC_CSRS = 4,DRMAP_CARD1_WIN0 = 5,DRMAP_CARD1_WIN1 = 6,DRMAP_CARD1_WIN2 = 7,};
enum MACRO_DRSELMSK {DRSELMSK = 0x3,RQM = 0x80,};
enum MACRO_DRSOCKETS {DRSOCKETS = 2,};
enum MACRO_DRSTAT {DRSTAT_ZERO = 0x8000,DRSTAT_SCINT = 0x4000,DRSTAT_CDCHG = 0x2000,DRSTAT_BVD2CHG = 0x1000,DRSTAT_BVD1CHG = 0x800,DRSTAT_BVDCHG = 0x800,DRSTAT_RDYCHG = 0x400,DRSTAT_WPCHG = 0x200,DRSTAT_PCTO = 0x100,DRSTAT_LIVE = 0xFF,DRSTAT_CD2ST = 0x80,DRSTAT_CD1ST = 0x40,DRSTAT_CD_MASK = 0xC0,DRSTAT_PRESENT_OK = 0xC0,DRSTAT_BVD2ST = 0x20,DRSTAT_BVD1ST = 0x10,DRSTAT_BVDST = 0x30,DRSTAT_BATT_LOW = 0x20,DRSTAT_BATT_OK = 0x30,DRSTAT_RDYST = 0x8,DRSTAT_WPST = 0x4,DRSTAT_WAITST = 0x2,DRSTAT_PWRON = 0x1,DRSTAT_IOINT = 0x8000,DRSTAT_SPKR = 0x20,DRSTAT_STSCHG = 0x10,DRSTAT_IOREQ = 0x8,DRSTAT_IOIS16 = 0x4,DRSTAT_PCTYS_M = 0x30,DRSTAT_PCTYS_S = 0x4,DRSTAT_REV_M = 0xF,DRSTAT_REV_S = 0x0,};
enum MACRO_DRT {DRT_NUMWINDOWS = 6,};
enum MACRO_DRT_CHANGE {DRT_CHANGE_DEFAULT = 6144,DRT_CHANGE_MASK = 4032,};
enum MACRO_DRV {DRV_MASK = 0x3,};
enum MACRO_DRVSEL {DRVSEL = 0x1,DSKCHG = 0x80,};
enum MACRO_DRWIN {DRWIN_CMDLNG_M = 0x7C00,DRWIN_CMDLNG_S = 0xA,DRWIN_CMDDLY_M = 0x300,DRWIN_CMDDLY_S = 0x8,};
enum MACRO_DRWINDOWS {DRWINDOWS = 3,};
enum MACRO_DRWINSIZE {DRWINSIZE = 1048576,};
enum MACRO_DRWIN_ASPSEL {DRWIN_ASPSEL_M = 0xC0,DRWIN_ASPSEL_AM = 0x0,DRWIN_ASPSEL_CM = 0x40,DRWIN_ASPSEL_IO = 0x80,DRWIN_BASE_M = 0x3F,DRWIN_BASE_S = 0x0,DRWIN_RECDLY_M = 0x18,DRWIN_RECDLY_S = 0x3,DRWIN_WAITDLY_M = 0x6,DRWIN_WAITDLY_S = 0x1,DRWIN_WAITREQ_M = 0x1,DRWIN_WAITREQ_S = 0x0,};
enum MACRO_DS18SPT {DS18SPT = 0xF0,};
enum MACRO_DS8SPT {DS8SPT = 0xFF,};
enum MACRO_DS9 {DS9_15SPT = 0xF9,};
enum MACRO_DS9SPT {DS9SPT = 0xFD,};
enum MACRO_DSCRL {DSCRL = 0x57,};
enum MACRO_DSK {DSK_ERLOC = 16,DSK_IDLOC = 23,DSK_PHYS = 65536,DSK_WORD = 131072,DSK_COPY = 196608,DSK_INIT = 262144,DSK_PATTERN = 327680,DSK_MAP = 6,DSK_ERTYP = 65536,};
enum MACRO_DSPWR {DSPWR = 5,};
enum MACRO_DST {DST_NONE = 0,DST_USA = 1,DST_AUST = 2,DST_WET = 3,DST_MET = 4,DST_EET = 5,DST_CAN = 6,DST_GB = 7,DST_RUM = 8,DST_TUR = 9,DST_AUSTALT = 10,};
enum MACRO_DT {DT_NULL = 0,DT_NEEDED = 1,DT_PLTRELSZ = 2,DT_PLTGOT = 3,DT_HASH = 4,DT_STRTAB = 5,DT_SYMTAB = 6,DT_RELA = 7,DT_RELASZ = 8,DT_RELAENT = 9,DT_STRSZ = 10,DT_SYMENT = 11,DT_INIT = 12,DT_FINI = 13,DT_SONAME = 14,DT_RPATH = 15,DT_SYMBOLIC = 16,DT_REL = 17,DT_RELSZ = 18,DT_RELENT = 19,DT_PLTREL = 20,DT_DEBUG = 21,DT_TEXTREL = 22,DT_JMPREL = 23,DT_MAXPOSTAGS = 24,DT_DEPRECATED_SPARC_REGISTER = 117440513,DT_VALRNGLO = 1879047424,DT_CHECKSUM = 1879047672,DT_PLTPADSZ = 1879047673,DT_MOVEENT = 1879047674,DT_MOVESZ = 1879047675,DT_FEATURE_1 = 1879047676,DT_POSFLAG_1 = 1879047677,DT_SYMINSZ = 1879047678,DT_SYMINENT = 1879047679,DT_VALRNGHI = 1879047679,DT_ADDRRNGLO = 1879047680,DT_CONFIG = 1879047930,DT_DEPAUDIT = 1879047931,DT_AUDIT = 1879047932,DT_PLTPAD = 1879047933,DT_MOVETAB = 1879047934,DT_SYMINFO = 1879047935,DT_ADDRRNGHI = 1879047935,DT_RELACOUNT = 1879048185,DT_RELCOUNT = 1879048186,DT_FLAGS_1 = 1879048187,DT_VERDEF = 1879048188,DT_VERDEFNUM = 1879048189,DT_VERNEED = 1879048190,DT_VERNEEDNUM = 1879048191,DT_LOPROC = 1879048192,DT_AUXILIARY = 2147483645,DT_USED = 2147483646,DT_FILTER = 2147483647,DT_HIPROC = 2147483647,};
enum MACRO_DTAB {DTAB_ANDCRITERIA = 0x1,DTAB_EXCLUDEFLAG = 0x2,DTAB_LISTALL = 0x4,DTAB_MXALIASLN = 0xE,};
enum MACRO_DTDC {DTDC_DATADONE = 0x1,DTDC_CMDDONE = 0x3,};
enum MACRO_DTF {DTF_1_PARINIT = 0x1,DTF_1_CONFEXP = 0x2,};
enum MACRO_DTR {DTR_ASSERT = 0x1,};
enum MACRO_DTR_OFF {DTR_OFF = 0x1,DTR_ON = 0x0,};
enum MACRO_DTYPE {DTYPE_DIRECT = 0x0,DTYPE_SEQUENTIAL = 0x1,DTYPE_PRINTER = 0x2,DTYPE_PROCESSOR = 0x3,DTYPE_WORM = 0x4,DTYPE_RODIRECT = 0x5,DTYPE_SCANNER = 0x6,DTYPE_OPTICAL = 0x7,DTYPE_CHANGER = 0x8,DTYPE_COMM = 0x9,DTYPE_ARRAY_CTRL = 0xC,DTYPE_ESI = 0xD,DTYPE_UNKNOWN = 0x1F,DTYPE_MASK = 0x1F,};
enum MACRO_DTYPE_NOTPRESENT {DTYPE_NOTPRESENT = 127,};
enum MACRO_DT_IA {DT_IA_64_PLT_RESERVE = 0x70000000,};
enum MACRO_DT_NON {DT_NON = 0,DT_PTR = 1,DT_FCN = 2,DT_ARY = 3,};
enum MACRO_DUMP {DUMP_ALLOC = 0,DUMP_FREE = 1,DUMP_SCAN = 2,};
enum MACRO_DUMPREG {DUMPREG = 0xE,};
enum MACRO_DUMP_MAGIC {DUMP_MAGIC = 0xDEFEC8ED,DUMP_VERSION = 0x9,DUMP_PANICSIZE = 0xC8,DUMP_COMPRESS_RATIO = 0x2,DUMP_OFFSET = 0x10000,DUMP_LOGSIZE = 0x200000,};
enum MACRO_DUP {DUP_NEW = 0x0,DUP_INPROGRESS = 0x1,DUP_DONE = 0x2,DUP_DROP = 0x3,DUP_ERROR = 0x4,};
enum MACRO_DUPCACHE {DUPCACHE_FIXEDTIME = 0,};
enum MACRO_DV {DV_NT_A = -8,DV_NT_K = -9,};
enum MACRO_DVC {DVC_LEN = 80,};
enum MACRO_DVID {DVID = 0x63,};
enum MACRO_DVSCN {DVSCN = 0x60,};
enum MACRO_DV_NT {DV_NT_E = -12,};
enum MACRO_D_MTINNER {D_MTINNER_MOD = 69760,D_MTOUTER_MOD = 2048,D_MP = 32,D_64BIT = 512,D_SYNCSTR = 1024,D_DEVMAP = 256,D_HOTPLUG = 4,};
enum MACRO_D_MTOCEXCL {D_MTOCEXCL = 0x800,D_MTPUTSHARED = 0x1000,D_MTPERQ = 0x2000,D_MTQPAIR = 0x4000,D_MTPERMOD = 0x6000,D_MTOUTPERIM = 0x8000,};
enum MACRO_D_NEW {D_NEW = 0x0,};
enum MACRO_D_T {D_T_FMT = 44,D_FMT = 45,};
enum MACRO_D_TAPE {D_TAPE = 0x8,D_MTSAFE = 0x20,};
enum MACRO_E {E_OK = 0,E_SYSTEM_ERROR = -1,E_BAD_ARGUMENT = -2,E_POSTED = -3,E_CONNECTED = -4,E_BAD_STATE = -5,E_NO_ROOM = -6,E_NOT_POSTED = -7,E_UNKNOWN_COMMAND = -8,E_NO_MATCH = -9,E_NOT_SELECTABLE = -10,E_NOT_CONNECTED = -11,E_REQUEST_DENIED = -12,E_INVALID_FIELD = -13,E_CURRENT = -14,};
enum MACRO_EAI {EAI_ADDRFAMILY = 1,EAI_AGAIN = 2,EAI_BADFLAGS = 3,EAI_FAIL = 4,EAI_FAMILY = 5,EAI_MEMORY = 6,EAI_NODATA = 7,EAI_NONAME = 8,EAI_SERVICE = 9,EAI_SOCKTYPE = 10,EAI_SYSTEM = 11,};
enum MACRO_EB {EB_NULL = 0,EB_DYNAMIC = 1,EB_LDSO_BASE = 2,EB_ARGV = 3,EB_ENVP = 4,EB_AUXV = 5,EB_DEVZERO = 6,EB_PAGESIZE = 7,EB_MAX = 8,};
enum MACRO_EBADID {EBADID = 5,};
enum MACRO_EBSIZE {EBSIZE = 16,TTXOLO = 132,};
enum MACRO_EC {EC = 247,};
enum MACRO_ECPP {ECPP_CENTRONICS = 0x1,ECPP_COMPAT_MODE = 0x2,ECPP_BYTE_MODE = 0x3,ECPP_NIBBLE_MODE = 0x4,ECPP_ECP_MODE = 0x5,ECPP_FAILURE_MODE = 0x6,ECPP_DIAG_MODE = 0x7,ECPP_INIT_MODE = 0x8,};
enum MACRO_ECPP_FIFO {ECPP_FIFO_EMPTY = 0x1,ECPP_FIFO_FULL = 0x2,ECPP_INTR_SRV = 0x4,ECPP_DMA_ENABLE = 0x8,ECPP_INTR_MASK = 0x10,};
enum MACRO_ECPP_MAX {ECPP_MAX_TIMEOUT = 604800,ECPP_W_TIMEOUT_DEFAULT = 60,ECPP_reseverd1 = 1,ECPP_reseverd2 = 2,ECPP_reserved3 = 4,ECPP_nERR = 8,ECPP_SLCT = 16,ECPP_PE = 32,ECPP_nACK = 64,ECPP_nBUSY = 128,ECPP_STB = 1,ECPP_AFX = 2,ECPP_nINIT = 4,ECPP_SLCTIN = 8,ECPP_INTR_EN = 16,ECPP_REV_DIR = 32,ECPP_reseverd4 = 64,ECPP_reserved5 = 128,ECPP_DCR_SET = 192,ECPP_PORT_DMA = 1,ECPP_PORT_PIO = 2,ECPP_PORT_TDMA = 3,};
enum MACRO_ECR {ECR_mode_000 = 0x0,ECR_mode_001 = 0x20,ECR_mode_010 = 0x40,ECR_mode_011 = 0x60,ECR_mode_110 = 0xC0,ECR_mode_111 = 0xE0,};
enum MACRO_ECTSIZE {ECTSIZE = 2048,IETSIZE = 8192,};
enum MACRO_EDC {EDC_LENGTH_MASK = 0x7,EDC_TYPE_MASK = 0xF,EDC_TYPE_SHIFT = 0x3,};
enum MACRO_EEOL {EEOL = 0x4B,};
enum MACRO_EEOP {EEOP = 0x4C,};
enum MACRO_EEXISTS {EEXISTS = 6,};
enum MACRO_EF {EF_IA_64_MASKOS = 0xF,EF_IA_64_ABI64 = 0x10,EF_IA_64_ARCH = 0xFF000000,};
enum MACRO_EF_M32 {EF_M32_MAU = 1,};
enum MACRO_EF_SPARC {EF_SPARC_32PLUS_MASK = 0xFFFF00,EF_SPARC_32PLUS = 0x100,EF_SPARC_EXT_MASK = 0xFFFF00,EF_SPARC_SUN_US1 = 0x200,EF_SPARC_HAL_R1 = 0x400,EF_SPARC_SUN_US3 = 0x800,EF_SPARCV9_MM = 0x3,EF_SPARCV9_TSO = 0x0,EF_SPARCV9_PSO = 0x1,EF_SPARCV9_RMO = 0x2,};
enum MACRO_EI {EI_NIDENT = 16,EI_MAG0 = 0,EI_MAG1 = 1,EI_MAG2 = 2,EI_MAG3 = 3,EI_CLASS = 4,EI_DATA = 5,EI_VERSION = 6,EI_PAD = 7,};
enum MACRO_EI_FLAG {EI_FLAG_DIRTY = 0x0,EI_FLAG_PROT = 0x1,};
enum MACRO_EJECT {EJECT = 0x80,};
enum MACRO_EJECT_DMA {EJECT_DMA = 0x20,};
enum MACRO_EL {EL = 248,};
enum MACRO_ELF {ELF_F_DIRTY = 0x1,ELF_F_LAYOUT = 0x4,};
enum MACRO_ELF32 {ELF32_FSZ_ADDR = 4,ELF32_FSZ_HALF = 2,ELF32_FSZ_OFF = 4,ELF32_FSZ_SWORD = 4,ELF32_FSZ_WORD = 4,};
enum MACRO_ELF64 {ELF64_FSZ_ADDR = 8,ELF64_FSZ_HALF = 2,ELF64_FSZ_OFF = 8,ELF64_FSZ_SWORD = 4,ELF64_FSZ_WORD = 4,ELF64_FSZ_SXWORD = 8,ELF64_FSZ_XWORD = 8,};
enum MACRO_ELFCLASS64 {ELFCLASS64_INTC = 200,};
enum MACRO_ELFCLASSNONE {ELFCLASSNONE = 0,ELFCLASS32 = 1,ELFCLASS64 = 2,};
enum MACRO_ELFCLASSNUM {ELFCLASSNUM = 201,};
enum MACRO_ELFDATANONE {ELFDATANONE = 0,ELFDATA2LSB = 1,ELFDATA2MSB = 2,};
enum MACRO_ELFDATANUM {ELFDATANUM = 3,};
enum MACRO_ELFMAG0 {ELFMAG0 = 0x7F,};
enum MACRO_ELFMAG1 {ELFMAG1 = 69,};
enum MACRO_ELFMAG2 {ELFMAG2 = 76,};
enum MACRO_ELFMAG3 {ELFMAG3 = 70,};
enum MACRO_ELF_386 {ELF_386_MAXPGSZ = 0x10000,};
enum MACRO_ELF_M32 {ELF_M32_MAXPGSZ = 0x2000,ELF_NOTE_PAGESIZE_HINT = 0x1,};
enum MACRO_ELF_SPARC {ELF_SPARC_MAXPGSZ = 0x10000,ELF_SPARCV9_MAXPGSZ = 0x100000,};
enum MACRO_EM {EM_NONE = 0,EM_M32 = 1,EM_SPARC = 2,EM_386 = 3,EM_68K = 4,EM_88K = 5,EM_486 = 6,EM_860 = 7,EM_MIPS = 8,EM_UNKNOWN9 = 9,EM_MIPS_RS3_LE = 10,EM_RS6000 = 11,EM_UNKNOWN12 = 12,EM_UNKNOWN13 = 13,EM_UNKNOWN14 = 14,EM_PA_RISC = 15,EM_nCUBE = 16,EM_VPP500 = 17,EM_SPARC32PLUS = 18,EM_UNKNOWN19 = 19,EM_PPC = 20,EM_SPARCV9 = 43,EM_IA_64 = 50,EM_NUM = 51,};
enum MACRO_EMBED {EMBED_XMIT = 0x20,EMBED_XMIT_LEN = 0x7,};
enum MACRO_EMINOR : __int64 {EMINOR_UNKNOWN = 4294967295,};
enum MACRO_EMPTY {EMPTY = 0,};
enum MACRO_EMT {EMT_TAGOVF = 1,EMT_CPCOVF = 2,};
enum MACRO_EM_EVENTSIZE {EM_EVENTSIZE = 4,};
enum MACRO_EM_INIT {EM_INIT_REQ = 0,EM_INFO_REQ = 1,EM_MODIFY_EVENT_MASK_REQ = 2,EM_GET_FIRST_TUPLE_REQ = 3,EM_GET_NEXT_TUPLE_REQ = 4,EM_INIT_ACK = 5,EM_INFO_ACK = 6,EM_EVENT_IND = 7,EM_ADAPTER_INFO_REQ = 8,EM_ADAPTER_INFO_ACK = 9,EM_SOCKET_INFO_REQ = 10,EM_SOCKET_INFO_ACK = 11,EM_GET_SOCKET_REQ = 12,EM_GET_SOCKET_ACK = 13,EM_IDENT_SOCKET_REQ = 14,EM_GET_FIRST_TUPLE_ACK = 15,EM_BADPRIM = 1,EM_VERSION = 1,EM_CURRENT_VERSION = 1,EM_CLASS_SIZE = 32,EM_EVENT_MASK_SIZE = 32,};
enum MACRO_EN {EN_BINARY = 1,EN_CRYPT = 2,EN_XDR = 4,EN_MODIFIED = 8,EN_ASN1 = 64,};
enum MACRO_ENA {RX_ENA = 0x80,TX_ENA = 0x8,};
enum MACRO_ENCI {ENCI_SVALID = 0x80,};
enum MACRO_ENCSTAT {ENCSTAT_UNRECOV = 0x1,ENCSTAT_CRITICAL = 0x2,ENCSTAT_NONCRITICAL = 0x4,ENCSTAT_INFO = 0x8,};
enum MACRO_END {END_OF_SUA_PARSING = -2,END_OF_SUA = -3,};
enum MACRO_ENDIAN {LITTLE_ENDIAN = 1234,BIG_ENDIAN = 4321,PDP_ENDIAN = 3412,};
enum MACRO_ENF {ENF_NBPA = 10,ENF_NBPO = 6,ENF_NOP = 0,ENF_EQ = 1024,ENF_LT = 2048,ENF_LE = 3072,ENF_GT = 4096,ENF_GE = 5120,ENF_AND = 6144,ENF_OR = 7168,ENF_XOR = 8192,ENF_COR = 9216,ENF_CAND = 10240,ENF_CNOR = 11264,ENF_CNAND = 12288,ENF_NEQ = 13312,ENF_NOPUSH = 0,ENF_PUSHLIT = 1,ENF_PUSHZERO = 2,ENF_PUSHONE = 3,ENF_PUSHFFFF = 4,ENF_PUSHFF00 = 5,ENF_PUSH00FF = 6,ENF_PUSHWORD = 16,};
enum MACRO_ENFS {ENFS_TRYAGAIN = 999,};
enum MACRO_ENMAXFILTERS {ENMAXFILTERS = 255,};
enum MACRO_ENOSPACE {ENOSPACE = 3,EBADOP = 4,};
enum MACRO_ENOUSER {ENOUSER = 7,};
enum MACRO_ENV {ENV_ESC = 2,ENV_USERVAR = 3,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EOK {EOK = 0,};
enum MACRO_EOR {EOR = 239,};
enum MACRO_EP {EP_RAW = 0,EP_EXACCT_OBJECT = 1,};
enum MACRO_EPL {EPL = 0x20,};
enum MACRO_EPOCH {EPOCH_YEAR = 1970,EPOCH_WDAY = 4,};
enum MACRO_EPRT {EPRT = 0x5A,};
enum MACRO_ER {ER_EXT_ID_LOC = 8,};
enum MACRO_ERA {ERA = 51,};
enum MACRO_ERA_D {ERA_D_FMT = 52,ERA_D_T_FMT = 53,ERA_T_FMT = 54,};
enum MACRO_ERR {ERR = -1,};
enum MACRO_ERRNO {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EAGAIN = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,ENOMSG = 35,EIDRM = 36,ECHRNG = 37,EL2NSYNC = 38,EL3HLT = 39,EL3RST = 40,ELNRNG = 41,EUNATCH = 42,ENOCSI = 43,EL2HLT = 44,EDEADLK = 45,ENOLCK = 46,ECANCELED = 47,ENOTSUP = 48,EDQUOT = 49,EBADE = 50,EBADR = 51,EXFULL = 52,ENOANO = 53,EBADRQC = 54,EBADSLT = 55,EDEADLOCK = 56,EBFONT = 57,EOWNERDEAD = 58,ENOTRECOVERABLE = 59,ENOSTR = 60,ENODATA = 61,ETIME = 62,ENOSR = 63,ENONET = 64,ENOPKG = 65,EREMOTE = 66,ENOLINK = 67,EADV = 68,ESRMNT = 69,ECOMM = 70,EPROTO = 71,ELOCKUNMAPPED = 72,ENOTACTIVE = 73,EMULTIHOP = 74,EBADMSG = 77,ENAMETOOLONG = 78,EOVERFLOW = 79,ENOTUNIQ = 80,EBADFD = 81,EREMCHG = 82,ELIBACC = 83,ELIBBAD = 84,ELIBSCN = 85,ELIBMAX = 86,ELIBEXEC = 87,EILSEQ = 88,ENOSYS = 89,ELOOP = 90,ERESTART = 91,ESTRPIPE = 92,ENOTEMPTY = 93,EUSERS = 94,ENOTSOCK = 95,EDESTADDRREQ = 96,EMSGSIZE = 97,EPROTOTYPE = 98,ENOPROTOOPT = 99,EPROTONOSUPPORT = 120,ESOCKTNOSUPPORT = 121,EOPNOTSUPP = 122,EPFNOSUPPORT = 123,EAFNOSUPPORT = 124,EADDRINUSE = 125,EADDRNOTAVAIL = 126,ENETDOWN = 127,ENETUNREACH = 128,ENETRESET = 129,ECONNABORTED = 130,ECONNRESET = 131,ENOBUFS = 132,EISCONN = 133,ENOTCONN = 134,ESHUTDOWN = 143,ETOOMANYREFS = 144,ETIMEDOUT = 145,ECONNREFUSED = 146,EHOSTDOWN = 147,EHOSTUNREACH = 148,EWOULDBLOCK = 11,EALREADY = 149,EINPROGRESS = 150,ESTALE = 151,};
enum MACRO_ERROR {GRP_ERROR = 1,USER_ERROR = 2,OTHER_ERROR = 3,CLASS_ERROR = 4,DUPLICATE_ERROR = 5,MISS_ERROR = 6,MEM_ERROR = 7,ENTRY_ERROR = 8,};
enum MACRO_ERRORKEY {ERRORKEY = 0x7E,};
enum MACRO_ERRTIMEOUT {MIN_ERRTIMEOUT = 1,MAX_ERRTIMEOUT = 480,};
enum MACRO_ES {ES_RSM_MAX_DRIVES = 7,ES_RSM_MAX_PWMS = 2,ES_RSM_MAX_FANS = 1,ES_RSM_MAX_TEMPS = 1,};
enum MACRO_ESAME {ESAME = -1,};
enum MACRO_ESC {ESC = 0x1B,};
enum MACRO_ESC1 {ESC1_REV1 = 0x4,};
enum MACRO_ESP {ESP_FIFO_ONZ = 0x20,ESP_STAT_RES = 0x80,ESP_STAT_IPEND = 0x80,ESP_STAT_GERR = 0x40,ESP_STAT_PERR = 0x20,ESP_STAT_XZERO = 0x10,ESP_STAT_XCMP = 0x8,ESP_STAT_MSG = 0x4,ESP_STAT_CD = 0x2,ESP_STAT_IO = 0x1,ESP_PHASE_MASK = 0x7,ESP_PHASE_DATA_OUT = 0x0,ESP_PHASE_DATA_IN = 0x1,ESP_PHASE_COMMAND = 0x2,ESP_PHASE_STATUS = 0x3,ESP_PHASE_MSG_OUT = 0x6,ESP_PHASE_MSG_IN = 0x7,ESP_INT_RESET = 0x80,ESP_INT_ILLEGAL = 0x40,ESP_INT_DISCON = 0x20,ESP_INT_BUS = 0x10,ESP_INT_FCMP = 0x8,ESP_INT_RESEL = 0x4,ESP_INT_SELATN = 0x2,ESP_INT_SEL = 0x1,ESP_STEP_MASK = 0x7,ESP_STEP_ARBSEL = 0x0,ESP_STEP_SENTID = 0x1,ESP_STEP_NOTCMD = 0x2,ESP_STEP_PCMD = 0x3,ESP_STEP_DONE = 0x4,ESP_STEP_DONE5 = 0x5,ESP_STEP_DONE6 = 0x6,ESP_STEP_DONE7 = 0x7,ESP_CONF_SLOWMODE = 0x80,ESP_CONF_DISRINT = 0x40,ESP_CONF_PARTEST = 0x20,ESP_CONF_PAREN = 0x10,ESP_CONF_CHIPTEST = 0x8,ESP_CONF_BUSID = 0x7,};
enum MACRO_ESP100 {ESP100 = 0,};
enum MACRO_ESP_CLOCK {ESP_CLOCK_DELAY = 7682,};
enum MACRO_ESP_SIZE {ESP_SIZE = 0x2000,};
enum MACRO_ESP_TEST {ESP_TEST_TGT = 0x1,ESP_TEST_INI = 0x2,ESP_TEST_TRI = 0x4,ESP_CONF2_RESETF = 0x80,ESP_CONF2_FENABLE = 0x40,ESP_CONF2_STATPL = 0x40,ESP_CONF2_BYTECM = 0x20,ESP_CONF2_TRIDMA = 0x10,ESP_CONF2_SCSI2 = 0x8,ESP_CONF2_TBADPAR = 0x4,ESP_CONF2_REGPAR = 0x2,ESP_CONF2_DMAPAR = 0x1,ESP_CONF3_236_IDRESCHK = 0x80,ESP_CONF3_236_QUENB = 0x40,ESP_CONF3_236_CDB10 = 0x20,ESP_CONF3_236_FASTSCSI = 0x10,ESP_CONF3_236_FASTCLK = 0x8,ESP_CONF3_236_SAVERESB = 0x4,ESP_CONF3_236_ALTDMA = 0x2,ESP_CONF3_236_THRESH8 = 0x1,ESP_CONF3_100A_IDRESCHK = 0x10,ESP_CONF3_100A_QUENB = 0x8,ESP_CONF3_100A_CDB10 = 0x4,ESP_CONF3_100A_FASTSCSI = 0x2,ESP_CONF3_100A_FASTCLK = 0x1,ESP_FAS100A = 0x0,ESP_FAS236 = 0x2,ESP_REV_MASK = 0x7,ESP_FCODE_MASK = 0xF8,};
enum MACRO_ET {ET_NONE = 0,ET_REL = 1,ET_EXEC = 2,ET_DYN = 3,ET_CORE = 4,ET_NUM = 5,ET_LOPROC = 65280,ET_HIPROC = 65535,};
enum MACRO_ETHERADDRL {ETHERADDRL = 6,};
enum MACRO_ETHERFCSL {ETHERFCSL = 4,};
enum MACRO_ETHERMAX {ETHERMAX = 1514,};
enum MACRO_ETHERMIN {ETHERMIN = 60,};
enum MACRO_ETHERMTU {ETHERMTU = 1500,};
enum MACRO_ETHERTYPE {ETHERTYPE_PUP = 0x200,ETHERTYPE_IP = 0x800,ETHERTYPE_ARP = 0x806,ETHERTYPE_REVARP = 0x8035,ETHERTYPE_IPV6 = 0x86DD,ETHERTYPE_MAX = 0xFFFF,ETHERTYPE_TRAIL = 0x1000,ETHERTYPE_NTRAILER = 0x10,};
enum MACRO_EUC {EUC_IOC = 50432,EUC_WSET = 50433,EUC_WGET = 50434,EUC_MSAVE = 50435,EUC_MREST = 50436,EUC_IXLOFF = 50437,EUC_IXLON = 50438,EUC_OXLOFF = 50439,EUC_OXLON = 50440,EUC_BCAST = 50448,EUC_B_CANON = 127,EUC_B_RAW = 1,};
enum MACRO_EUCIN {EUCIN = 0,EUCOUT = 1,};
enum MACRO_EUCMASK {EUCMASK = 0x30000000,};
enum MACRO_EUC_FIRST {EUC_FIRST = 0,EUC_LAST = 255,};
enum MACRO_EUC_MAXW {EUC_MAXW = 4,EUC_WARNCNT = 20,};
enum MACRO_EUC_TWIDTH {EUC_TWIDTH = 255,EUC_BSWIDTH = 254,EUC_NLWIDTH = 253,EUC_CRWIDTH = 252,};
enum MACRO_EUNDEF {EUNDEF = 0,ENOTFOUND = 1,EACCESS = 2,};
enum MACRO_EUP {EUP_ALLOC = 0x0,EUP_NOALLOC = 0x1,EUP_ALLOC_MASK = 0x1,};
enum MACRO_EV {EV_NONE = 0,EV_CURRENT = 1,EV_NUM = 2,};
enum MACRO_EVC {EVC_BUCKETS = 128,};
enum MACRO_EVEN {EVEN_P = 0x0,ODD_P = 0x80,NO_P = 0x0,FORCE_P = 0x20,NORMAL_P = 0x40,IGNORE_P = 0x10,USE_P = 0x0,};
enum MACRO_EVENT {EVENT_X = 0,EVENT_Y = 1,EVENT_BUT1 = 2,EVENT_BUT2 = 3,EVENT_BUT3 = 4,};
enum MACRO_EW {EW_PARTIAL = 0x1,EW_INTERVAL = 0x2,EW_FINAL = 0x4,};
enum MACRO_EX {EX_OK = 0,EX__BASE = 64,EX_USAGE = 64,EX_DATAERR = 65,EX_NOINPUT = 66,EX_NOUSER = 67,EX_NOHOST = 68,EX_UNAVAILABLE = 69,EX_SOFTWARE = 70,EX_OSERR = 71,EX_OSFILE = 72,EX_CANTCREAT = 73,EX_IOERR = 74,EX_TEMPFAIL = 75,EX_PROTOCOL = 76,EX_NOPERM = 77,EX_CONFIG = 78,EX_NOTFOUND = 79,EX__MAX = 79,};
enum MACRO_EXABYTE {EXABYTE_WRITE_ERROR_THRESHOLD = 6,EXABYTE_READ_ERROR_THRESHOLD = 3,EXABYTE_MIN_TRANSFER = 26214400,};
enum MACRO_EXACCT {EXACCT_VERSION = 1,};
enum MACRO_EXACCT_MAX {EXACCT_MAX_BUFSIZE = 65536,};
enum MACRO_EXC {EXC_CATALOG_MASK = 0xF000000,EXC_NONE = 0x0,EXC_LOCAL = 0x1000000,EXC_DEFAULT = 0x0,};
enum MACRO_EXCESSIVE {EXCESSIVE_SEQUENCES = 0x17,};
enum MACRO_EXCHANGE {EXCHANGE_ERROR = 0x11,PROTOCOL_ERROR = 0x12,};
enum MACRO_EXD {EXD_DATA_MASK = 0xFFFFFF,EXD_NONE = 0x0,EXD_VERSION = 0x1,EXD_FILETYPE = 0x2,EXD_CREATOR = 0x3,EXD_HOSTNAME = 0x4,EXD_GROUP_HEADER = 0xFF,EXD_GROUP_PROC = 0x100,EXD_GROUP_TASK = 0x101,EXD_GROUP_LWP = 0x102,EXD_GROUP_PROC_TAG = 0x103,EXD_GROUP_TASK_TAG = 0x104,EXD_GROUP_LWP_TAG = 0x105,EXD_GROUP_PROC_PARTIAL = 0x106,EXD_GROUP_TASK_PARTIAL = 0x107,EXD_GROUP_TASK_INTERVAL = 0x108,EXD_PROC_PID = 0x1000,EXD_PROC_UID = 0x1001,EXD_PROC_GID = 0x1002,EXD_PROC_TASKID = 0x1003,EXD_PROC_PROJID = 0x1004,EXD_PROC_HOSTNAME = 0x1005,EXD_PROC_COMMAND = 0x1006,EXD_PROC_START_SEC = 0x1007,EXD_PROC_START_NSEC = 0x1008,EXD_PROC_FINISH_SEC = 0x1009,EXD_PROC_FINISH_NSEC = 0x100A,EXD_PROC_CPU_USER_SEC = 0x100B,EXD_PROC_CPU_USER_NSEC = 0x100C,EXD_PROC_CPU_SYS_SEC = 0x100D,EXD_PROC_CPU_SYS_NSEC = 0x100E,EXD_PROC_TTY_MAJOR = 0x100F,EXD_PROC_TTY_MINOR = 0x1010,EXD_PROC_FAULTS_MAJOR = 0x1011,EXD_PROC_FAULTS_MINOR = 0x1012,EXD_PROC_MESSAGES_RCV = 0x1013,EXD_PROC_MESSAGES_SND = 0x1014,EXD_PROC_BLOCKS_IN = 0x1015,EXD_PROC_BLOCKS_OUT = 0x1016,EXD_PROC_CHARS_RDWR = 0x1017,EXD_PROC_CONTEXT_VOL = 0x1018,EXD_PROC_CONTEXT_INV = 0x1019,EXD_PROC_SIGNALS = 0x101A,EXD_PROC_SWAPS = 0x101B,EXD_PROC_SYSCALLS = 0x101C,EXD_PROC_ACCT_FLAGS = 0x101D,EXD_PROC_TAG = 0x101E,EXD_TASK_TASKID = 0x2000,EXD_TASK_PROJID = 0x2001,EXD_TASK_HOSTNAME = 0x2002,EXD_TASK_START_SEC = 0x2003,EXD_TASK_START_NSEC = 0x2004,EXD_TASK_FINISH_SEC = 0x2005,EXD_TASK_FINISH_NSEC = 0x2006,EXD_TASK_CPU_USER_SEC = 0x2007,EXD_TASK_CPU_USER_NSEC = 0x2008,EXD_TASK_CPU_SYS_SEC = 0x2009,EXD_TASK_CPU_SYS_NSEC = 0x200A,EXD_TASK_FAULTS_MAJOR = 0x200B,EXD_TASK_FAULTS_MINOR = 0x200C,EXD_TASK_MESSAGES_RCV = 0x200D,EXD_TASK_MESSAGES_SND = 0x200E,EXD_TASK_BLOCKS_IN = 0x200F,EXD_TASK_BLOCKS_OUT = 0x2010,EXD_TASK_CHARS_RDWR = 0x2011,EXD_TASK_CONTEXT_VOL = 0x2012,EXD_TASK_CONTEXT_INV = 0x2013,EXD_TASK_SIGNALS = 0x2014,EXD_TASK_SWAPS = 0x2015,EXD_TASK_SYSCALLS = 0x2016,EXD_TASK_TAG = 0x2017,};
enum MACRO_EXECATTR {EXECATTR_DB_NCOL = 7,EXECATTR_DB_NKEYCOL = 2,EXECATTR_KEYCOL0 = 0,EXECATTR_KEYCOL1 = 5,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EXIT_STATUS {GOOD_EXIT_STATUS = 0,BAD_EXIT_STATUS = 1,};
enum MACRO_EXP {FLOW_EXP = 0x0,NO_FLOW_EXP = 0x20,};
enum MACRO_EXPAND {EXPAND_NAME = 64,};
enum MACRO_EXPER {EXPER = 1024,};
enum MACRO_EXPER_DVMRP {EXPER_DVMRP_VIF = 1,EXPER_DVMRP_MRT = 2,};
enum MACRO_EXPER_IGMP {EXPER_IGMP = 1025,EXPER_DVMRP = 1026,EXPER_RAWIP = 1027,EXPER_RANGE_START = 1025,EXPER_RANGE_END = 1027,};
enum MACRO_EXPER_IP {EXPER_IP_GROUP_MEMBERSHIP = 100,EXPER_IP6_GROUP_MEMBERSHIP = 101,};
enum MACRO_EXPINLINE {EXPINLINE = 0x2,};
enum MACRO_EXPIRE {EXPIRE_TIME = 180,GARBAGE_TIME = 240,};
enum MACRO_EXR {EXR_OK = 0,EXR_SYSCALL_FAIL = 1,EXR_CORRUPT_FILE = 2,EXR_EOF = 3,EXR_NO_CREATOR = 4,EXR_INVALID_BUF = 5,EXR_NOTSUPP = 6,EXR_UNKN_VERSION = 7,};
enum MACRO_EXT : __int64 {EXT_TYPE_MASK = 0xF0000000,EXT_NONE = 0x0,EXT_UINT8 = 0x10000000,EXT_UINT16 = 0x20000000,EXT_UINT32 = 0x30000000,EXT_UINT64 = 0x40000000,EXT_DOUBLE = 0x50000000,EXT_STRING = 0x60000000,EXT_EXACCT_OBJECT = 0x70000000,EXT_RAW = 0x80000000,EXT_GROUP = 0xF0000000,};
enum MACRO_EXTA {EXTA = 14,};
enum MACRO_EXTB {EXTB = 15,};
enum MACRO_EXTDOS {EXTDOS = 5,};
enum MACRO_EXTRA {EXTRA_ALLOC = 8,};
enum MACRO_EX_CURRENT {EX_CURRENT_VERSION = 2,EX_NOSUID = 1,EX_ACLOK = 2,EX_PUBLIC = 4,EX_NOSUB = 8,EX_INDEX = 16,EX_LOG = 32,EX_LOG_ALLOPS = 64,};
enum MACRO_EX_SUCCESS {EX_SUCCESS = 0,EX_NO_PERM = 1,EX_SYNTAX = 2,EX_BADARG = 3,EX_ID_EXISTS = 4,EX_INCONSISTENT = 5,EX_NAME_NOT_EXIST = 6,EX_MISSING = 7,EX_BUSY = 8,EX_NAME_EXISTS = 9,EX_UPDATE = 10,EX_NOSPACE = 11,EX_HOMEDIR = 12,EX_NL_USED = 13,EX_FAILURE = 14,};
enum MACRO_E_BADARGS {E_BADARGS = 1,E_NOPRIV = 2,E_SAFERR = 3,E_SYSERR = 4,E_NOEXIST = 5,E_DUP = 6,E_PMRUN = 7,E_PMNOTRUN = 8,E_RECOVER = 9,E_SACNOTRUN = 10,};
enum MACRO_F {F_DUPFD = 0,F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_CHKFL = 8,F_DUP2FD = 9,F_ALLOCSP = 10,F_ISSTREAM = 13,F_PRIV = 15,F_NPRIV = 16,F_QUOTACTL = 17,F_BLOCKS = 18,F_BLKSIZE = 19,F_GETOWN = 23,F_SETOWN = 24,F_HASREMOTELOCKS = 26,F_SETLK = 6,F_SETLKW = 7,F_FREESP = 11,F_GETLK = 14,F_SETLK64 = 34,F_SETLKW64 = 35,F_FREESP64 = 27,F_GETLK64 = 33,F_SHARE = 40,F_UNSHARE = 41,F_RDLCK = 1,F_WRLCK = 2,F_UNLCK = 3,F_UNLKSYS = 4,};
enum MACRO_FA {FA_CLASS = 0x400,FA_UMLAUT = 0x400,FA_CFLEX = 0x401,FA_TILDE = 0x402,FA_CEDILLA = 0x403,FA_ACUTE = 0x404,FA_GRAVE = 0x405,};
enum MACRO_FABRIC {FABRIC_BUSY = 0x1,NPORT_BUSY = 0x3,PHYSICAL_BUSY = 0x1,RESOURSE_BUSY = 0x3,};
enum MACRO_FAD {FAD_READ = 0x1,FAD_WRITE = 0x2,};
enum MACRO_FAIL {CONFIG_FAIL = 0x1,DISK_FAIL = 0x2,BOOT_FAIL = 0x4,MEM_FAIL = 0x8,};
enum MACRO_FAS {FAS_FIFO_ONZ = 0x20,};
enum MACRO_FAS100 {FAS100 = 3,};
enum MACRO_FAS100A {FAS100A = 3,FAS236 = 4,};
enum MACRO_FAS366 {FAS366 = 0,};
enum MACRO_FAST {FAST = 5,};
enum MACRO_FASTSCSI {FASTSCSI_THRESHOLD = 50,};
enum MACRO_FAS_STAT {FAS_STAT_IPEND = 0x80,FAS_STAT_GERR = 0x40,FAS_STAT_PERR = 0x20,FAS_STAT_XZERO = 0x10,FAS_STAT_XCMP = 0x8,FAS_STAT_MSG = 0x4,FAS_STAT_CD = 0x2,FAS_STAT_IO = 0x1,FAS_PHASE_MASK = 0x7,FAS_PHASE_DATA_OUT = 0x0,FAS_PHASE_DATA_IN = 0x1,FAS_PHASE_COMMAND = 0x2,FAS_PHASE_STATUS = 0x3,FAS_PHASE_MSG_OUT = 0x6,FAS_PHASE_MSG_IN = 0x7,FAS_INT_RESET = 0x80,FAS_INT_ILLEGAL = 0x40,FAS_INT_DISCON = 0x20,FAS_INT_BUS = 0x10,FAS_INT_FCMP = 0x8,FAS_INT_RESEL = 0x4,FAS_INT_SELATN = 0x2,FAS_INT_SEL = 0x1,FAS_STEP_MASK = 0x7,FAS_STEP_ARBSEL = 0x0,FAS_STEP_SENTID = 0x1,FAS_STEP_NOTCMD = 0x2,FAS_STEP_PCMD = 0x3,FAS_STEP_DONE = 0x4,FAS_CONF_SLOWMODE = 0x80,FAS_CONF_DISRINT = 0x40,FAS_CONF_PARTEST = 0x20,FAS_CONF_PAREN = 0x10,FAS_CONF_CHIPTEST = 0x8,FAS_CONF_BUSID = 0x7,FAS_TEST_TGT = 0x1,FAS_TEST_INI = 0x2,FAS_TEST_TRI = 0x4,FAS_CONF2_XL32 = 0x80,FAS_CONF2_MKDONE = 0x40,FAS_CONF2_PAUSE_INTR_DISABLE = 0x20,FAS_CONF2_FENABLE = 0x10,FAS_CONF2_SCSI2 = 0x8,FAS_CONF2_TGT_BAD_PRTY_ABORT = 0x4,FAS_CONF2_DMA_PRTY_ENABLE = 0x1,FAS_CONF3_ODDBYTE_AUTO = 0x80,FAS_CONF3_WIDE = 0x40,FAS_CONF3_IDBIT3 = 0x20,FAS_CONF3_IDRESCHK = 0x10,FAS_CONF3_QUENB = 0x8,FAS_CONF3_CDB10 = 0x4,FAS_CONF3_FASTSCSI = 0x2,FAS_CONF3_FASTCLK = 0x1,FAS_CONF4_PADMSGS = 0x20,FAS_REV_MASK = 0x7,FAS_FCODE_MASK = 0xF8,FAS_CLOCK_DELAY = 0x1E02,};
enum MACRO_FAS_STAT2 {FAS_STAT2_SEQCNT = 0x1,FAS_STAT2_FLATCHED = 0x2,FAS_STAT2_CLATCHED = 0x4,FAS_STAT2_CACTIVE = 0x8,FAS_STAT2_SCSI16 = 0x10,FAS_STAT2_ISHUTTLE = 0x20,FAS_STAT2_OSHUTTLE = 0x40,FAS_STAT2_EMPTY = 0x80,FAS_BUSID_ENCODID = 0x10,FAS_BUSID_32BIT_COUNTER = 0x40,};
enum MACRO_FAT32 {FAT32_FS_SIGN = 0x61417272,FAT32_BOOT_FSINFO_OFF = 0x1E0,};
enum MACRO_FB {FB_ATTR_NDEVSPECIFIC = 8,FB_ATTR_NEMUTYPES = 4,FB_ATTR_AUTOINIT = 1,FB_ATTR_DEVSPECIFIC = 2,};
enum MACRO_FBDBL {FBDBL_AVAIL = 0x80000000,FBDBL_DONT_BLOCK = 0x40000000,FBDBL_AVAIL_PG = 0x20000000,FBDBL_A = 0x1,FBDBL_B = 0x2,FBDBL_BOTH = 0x3,FBDBL_NONE = 0x4,};
enum MACRO_FBIO {FBIO_WID_ALLOC = 17950,FBIO_WID_FREE = 17951,FBIO_WID_PUT = 17952,FBIO_WID_GET = 17953,FBIO_DEVID = 17954,FBIO_U_RST = 17955,FBIO_FULLSCREEN_ELIMINATION_GROUPS = 17956,FBIO_WID_DBL_SET = 17957,};
enum MACRO_FBIOAVAILPLNGRP {FBIOAVAILPLNGRP = 17937,};
enum MACRO_FBIODBLGINFO {FBIODBLGINFO = 17938,};
enum MACRO_FBIODBLSINFO {FBIODBLSINFO = 17939,};
enum MACRO_FBIOGATTR {FBIOGATTR = 17926,};
enum MACRO_FBIOGCMSIZE {FBIOGCMSIZE = 17934,};
enum MACRO_FBIOGCURMAX {FBIOGCURMAX = 17948,};
enum MACRO_FBIOGCURPOS {FBIOGCURPOS = 17947,};
enum MACRO_FBIOGCURSOR {FBIOGCURSOR = 17945,};
enum MACRO_FBIOGETCMAP {FBIOGETCMAP = 17924,};
enum MACRO_FBIOGETCMAPI {FBIOGETCMAPI = 17962,};
enum MACRO_FBIOGINFO {FBIOGINFO = 17922,};
enum MACRO_FBIOGPLNGRP {FBIOGPLNGRP = 17933,};
enum MACRO_FBIOGTYPE {FBIOGTYPE = 17920,};
enum MACRO_FBIOGVIDEO {FBIOGVIDEO = 17928,};
enum MACRO_FBIOGXINFO {FBIOGXINFO = 17959,};
enum MACRO_FBIOMONINFO {FBIOMONINFO = 17960,};
enum MACRO_FBIOPUTCMAP {FBIOPUTCMAP = 17923,};
enum MACRO_FBIOPUTCMAPI {FBIOPUTCMAPI = 17961,};
enum MACRO_FBIORESWINFD {FBIORESWINFD = 17942,};
enum MACRO_FBIOSATTR {FBIOSATTR = 17925,};
enum MACRO_FBIOSAVWINFD {FBIOSAVWINFD = 17941,};
enum MACRO_FBIOSCMS {FBIOSCMS = 17936,};
enum MACRO_FBIOSCMSIZE {FBIOSCMSIZE = 17935,};
enum MACRO_FBIOSCURPOS {FBIOSCURPOS = 17946,};
enum MACRO_FBIOSCURSOR {FBIOSCURSOR = 17944,};
enum MACRO_FBIOSRWINFD {FBIOSRWINFD = 17943,};
enum MACRO_FBIOSVIDEO {FBIOSVIDEO = 17927,};
enum MACRO_FBIOSWINFD {FBIOSWINFD = 17940,};
enum MACRO_FBIOVERTICAL {FBIOVERTICAL = 17929,};
enum MACRO_FBIOVRTOFFSET {FBIOVRTOFFSET = 17958,};
enum MACRO_FBIO_ASSIGNWID {FBIO_ASSIGNWID = 17963,FBIO_STEREO = 17964,};
enum MACRO_FBTYPE {FBTYPE_NOTYPE = -1,FBTYPE_SUN1BW = 0,FBTYPE_SUN1COLOR = 1,FBTYPE_SUN2BW = 2,FBTYPE_SUN2COLOR = 3,FBTYPE_SUN2GP = 4,FBTYPE_SUN5COLOR = 5,FBTYPE_SUN3COLOR = 6,FBTYPE_MEMCOLOR = 7,FBTYPE_SUN4COLOR = 8,FBTYPE_NOTSUN1 = 9,FBTYPE_NOTSUN2 = 10,FBTYPE_NOTSUN3 = 11,FBTYPE_SUNFAST_COLOR = 12,FBTYPE_SUNROP_COLOR = 13,FBTYPE_SUNFB_VIDEO = 14,FBTYPE_SUNGIFB = 15,FBTYPE_SUNGPLAS = 16,FBTYPE_SUNGP3 = 17,FBTYPE_SUNGT = 18,FBTYPE_SUNLEO = 19,FBTYPE_MDICOLOR = 20,FBTYPE_LASTPLUSONE = 21,};
enum MACRO_FBVIDEO {FBVIDEO_OFF = 0,FBVIDEO_ON = 1,};
enum MACRO_FB_CMAP {FB_CMAP_BLOCK = 0x1,FB_CMAP_KERNEL = 0x2,};
enum MACRO_FB_CUR {FB_CUR_SETCUR = 0x1,FB_CUR_SETPOS = 0x2,FB_CUR_SETHOT = 0x4,FB_CUR_SETCMAP = 0x8,FB_CUR_SETSHAPE = 0x10,FB_CUR_SETALL = 0x1F,};
enum MACRO_FB_WID {FB_WID_SHARED_8 = 0,FB_WID_SHARED_24 = 1,FB_WID_DBL_8 = 2,FB_WID_DBL_24 = 3,};
enum MACRO_FB_WIN {FB_WIN_STEREO = 0x2,};
enum MACRO_FC {FC_HWERR = 0x1,FC_ALIGN = 0x2,FC_OBJERR = 0x3,FC_PROT = 0x4,FC_NOMAP = 0x5,FC_NOSUPPORT = 0x6,};
enum MACRO_FCAL {FCAL_STATUS_OK = 0,FCAL_STATUS_P_RJT = 2,FCAL_STATUS_F_RJT = 3,FCAL_STATUS_P_BSY = 4,FCAL_STATUS_F_BSY = 5,FCAL_STATUS_ONLINE = 16,FCAL_STATUS_OLDPORT_ONLINE = 16,FCAL_STATUS_ERR_OFFLINE = 17,FCAL_STATUS_TIMEOUT = 18,FCAL_STATUS_ERR_OVERRUN = 19,FCAL_STATUS_LOOP_ONLINE = 20,FCAL_STATUS_OLD_PORT = 21,FCAL_STATUS_AL_PORT = 22,FCAL_STATUS_UNKNOWN_CQ_TYPE = 32,FCAL_STATUS_BAD_SEG_CNT = 33,FCAL_STATUS_MAX_XCHG_EXCEEDED = 34,FCAL_STATUS_BAD_XID = 35,FCAL_STATUS_XCHG_BUSY = 36,FCAL_STATUS_BAD_POOL_ID = 37,FCAL_STATUS_INSUFFICIENT_CQES = 38,FCAL_STATUS_ALLOC_FAIL = 39,FCAL_STATUS_BAD_SID = 40,FCAL_STATUS_NO_SEQ_INIT = 41,FCAL_STATUS_BAD_DID = 42,FCAL_STATUS_ABORTED = 48,FCAL_STATUS_ABORT_FAILED = 49,FCAL_STATUS_DIAG_BUSY = 50,FCAL_STATUS_DIAG_INVALID = 51,FCAL_STATUS_INCOMPLETE_DMA_ERR = 52,FCAL_STATUS_CRC_ERR = 53,FCAL_STATUS_OPEN_FAIL = 54,FCAL_STATUS_ERROR = 128,FCAL_STATUS_ONLINE_TIMEOUT = 129,FCAL_STATUS_MAX_STATUS = 53,};
enum MACRO_FCFLAG {FCFLAG_NOINTR = 1,FCFLAG_COMPLETE = 2,};
enum MACRO_FCIO {FCIO_GETMAP = 18095,FCIO_FORCE_LIP = 18097,FCIO_LINKSTATUS = 18103,FCIO_FCODE_MCODE_VERSION = 18122,};
enum MACRO_FCIO_BYPASS {FCIO_BYPASS_DEV = 18096,FCIO_ADISC_ELS = 18098,FCIO_FORCE_OFFLINE = 18099,FCIO_LOADUCODE = 18100,FCIO_DUMPXRAM = 18101,FCIO_DUMPXRAMBUF = 18102,FCIO_LOOPBACK_INTERNAL = 18110,FCIO_LOOPBACK_MANUAL = 18111,FCIO_NO_LOOPBACK = 18112,FCIO_LOOPBACK_FRAME = 18113,FCIO_DIAG_NOP = 18114,FCIO_DIAG_RAW = 18115,FCIO_DIAG_XRAM = 18116,FCIO_DIAG_SOC = 18117,FCIO_DIAG_HCB = 18118,FCIO_DIAG_SOCLB = 18119,FCIO_DIAG_SRDSLB = 18120,FCIO_DIAG_EXTLB = 18121,};
enum MACRO_FCP {FCP_SCSI_DATA = 0x1,FCP_SCSI_CMD = 0x2,FCP_SCSI_RSP = 0x3,FCP_SCSI_XFER_RDY = 0x5,FCP_QTYPE_SIMPLE = 0x0,FCP_QTYPE_HEAD_OF_Q = 0x1,FCP_QTYPE_ORDERED = 0x2,FCP_QTYPE_ACA_Q_TAG = 0x4,FCP_QTYPE_UNTAGGED = 0x5,FCP_CDB_SIZE = 0x10,FCP_LUN_SIZE = 0x8,FCP_MAX_RSP_IU_SIZE = 0x100,FCP_NO_FAILURE = 0x0,FCP_DL_LEN_MISMATCH = 0x1,FCP_CMND_INVALID = 0x2,FCP_DATA_RO_MISMATCH = 0x3,FCP_TASK_MGMT_NOT_SUPPTD = 0x4,FCP_TASK_MGMT_FAILED = 0x5,};
enum MACRO_FCP_RSP {FCP_RSP_SCSI_BUS_ERR = 1,FCP_RSP_SCSI_PORT_ERR = 2,FCP_RSP_SOC_ERR = 3,};
enum MACRO_FCR {FCR = 0x3,PCR = 0x4,};
enum MACRO_FCREAT {FCREAT = 0x100,FTRUNC = 0x200,FEXCL = 0x400,FNOCTTY = 0x800,FASYNC = 0x1000,FNODSYNC = 0x10000,};
enum MACRO_FC_MAX {FC_MAX_ELS = 56,};
enum MACRO_FC_PH {FC_PH_VERSION = 0x6,};
enum MACRO_FC_STATUS {FC_STATUS_ENTRIES = 256,};
enum MACRO_FC_STATUS_OK {FC_STATUS_OK = 0,FC_STATUS_P_RJT = 2,FC_STATUS_F_RJT = 3,FC_STATUS_P_BSY = 4,FC_STATUS_F_BSY = 5,FC_STATUS_ERR_OFFLINE = 17,FC_STATUS_TIMEOUT = 18,FC_STATUS_ERR_OVERRUN = 19,FC_STATUS_UNKNOWN_CQ_TYPE = 32,FC_STATUS_BAD_SEG_CNT = 33,FC_STATUS_MAX_XCHG_EXCEEDED = 34,FC_STATUS_BAD_XID = 35,FC_STATUS_XCHG_BUSY = 36,FC_STATUS_BAD_POOL_ID = 37,FC_STATUS_INSUFFICIENT_CQES = 38,FC_STATUS_ALLOC_FAIL = 39,FC_STATUS_BAD_SID = 40,FC_STATUS_NO_SEQ_INIT = 41,FC_STATUS_ERROR = 128,FC_STATUS_ONLINE_TIMEOUT = 129,FC_STATUS_LOGIN_TIMEOUT = -2147483647,FC_STATUS_CQFULL = -2147483646,FC_STATUS_TRANSFAIL = -2147483645,FC_STATUS_RESETFAIL = -2147483644,};
enum MACRO_FC_WWN {FC_WWN_SIZE = 8,};
enum MACRO_FD {FD_SETSIZE = 1024,};
enum MACRO_FDATA {FDATA = 0xE5,};
enum MACRO_FDB {FDB_READ = 0x1,FDB_WRITE = 0x2,FDB_DONE = 0x4,FDB_ERROR = 0x8,FDB_ASYNC = 0x10,FDB_SYNC = 0x20,FDB_ICALLBACK = 0x40,FDB_ZEROHOLE = 0x80,};
enum MACRO_FDCMD {FDCMD_WRITE = 1,FDCMD_READ = 2,FDCMD_SEEK = 3,FDCMD_REZERO = 4,FDCMD_FORMAT_UNIT = 5,FDCMD_FORMAT_TRACK = 6,};
enum MACRO_FDD {FDD_READY = 0x1,FDD_MOTON = 0x2,FDD_POLLABLE = 0x4,};
enum MACRO_FDDEFGEOCHAR {FDDEFGEOCHAR = 1110,};
enum MACRO_FDEJECT {FDEJECT = 1077,};
enum MACRO_FDGC {FDGC_HISTORY = 0x1,FDGC_CURRENT = 0x2,FDGC_CURWPROT = 0x10,FDGC_DETECTED = 0x20,};
enum MACRO_FDGETCHANGE {FDGETCHANGE = 1078,};
enum MACRO_FDGETDRIVECHAR {FDGETDRIVECHAR = 1079,};
enum MACRO_FDGETSEARCH {FDGETSEARCH = 1081,};
enum MACRO_FDIOC {FDIOC = 0x400,};
enum MACRO_FDIOCMD {FDIOCMD = 1083,};
enum MACRO_FDIOGCHAR {FDIOGCHAR = 1075,};
enum MACRO_FDIOSCHAR {FDIOSCHAR = 1076,};
enum MACRO_FDISK {FDISK_IFS = 7,FDISK_AIXBOOT = 8,FDISK_AIXDATA = 9,FDISK_OS2BOOT = 10,FDISK_WINDOWS = 11,FDISK_EXT_WIN = 12,FDISK_FAT95 = 14,FDISK_EXTLBA = 15,};
enum MACRO_FDISK_LINUX {FDISK_LINUX = 65,FDISK_LINUXDSWAP = 66,FDISK_LINUXDNAT = 67,FDISK_CPM = 82,};
enum MACRO_FDISK_LINUXNAT {FDISK_LINUXNAT = 131,FDISK_NTFSVOL1 = 134,FDISK_NTFSVOL2 = 135,FDISK_BSD = 165,FDISK_NEXTSTEP = 167,FDISK_BSDIFS = 183,FDISK_BSDISWAP = 184,};
enum MACRO_FDISK_NOVELL3 {FDISK_NOVELL3 = 101,FDISK_QNX4 = 119,FDISK_QNX42 = 120,FDISK_QNX43 = 121,};
enum MACRO_FDRAW {FDRAW_SPECIFY = 0x3,FDRAW_READID = 0xA,FDRAW_SENSE_DRV = 0x4,FDRAW_REZERO = 0x7,FDRAW_SEEK = 0xF,FDRAW_SENSE_INT = 0x8,FDRAW_FORMAT = 0xD,FDRAW_READTRACK = 0x2,FDRAW_WRCMD = 0x5,FDRAW_RDCMD = 0x6,FDRAW_WRITEDEL = 0x9,FDRAW_READDEL = 0xC,};
enum MACRO_FDRAW_0 {FDRAW = 1094,};
enum MACRO_FDSETDRIVECHAR {FDSETDRIVECHAR = 1080,};
enum MACRO_FDSETSEARCH {FDSETSEARCH = 1082,};
enum MACRO_FD_CLOEXEC {FD_CLOEXEC = 1,};
enum MACRO_FD_NUMPART {FD_NUMPART = 4,};
enum MACRO_FD_SILENT {FD_SILENT = 0x1,FD_DIAGNOSE = 0x2,FD_ISOLATE = 0x4,FD_READ = 0x8,FD_WRITE = 0x10,};
enum MACRO_FE {FE_PAIR_NONE = 0,FE_PAIR_SET = 1,FE_PAIR_DELTA = 2,FE_PAIR_ABSOLUTE = 3,};
enum MACRO_FEATURE {SET_PORT_FEATURE = 35,CLEAR_HUB_FEATURE = 32,CLEAR_PORT_FEATURE = 35,SET_CLEAR_PORT_FEATURE = 35,};
enum MACRO_FEEDBACK {FEEDBACK_REXMIT1 = 1,FEEDBACK_OK = 2,};
enum MACRO_FER {FER = 0x0,FAR = 0x1,PTR = 0x2,};
enum MACRO_FF0 {FF0 = 0,PAGEOUT = 65536,WRAP = 131072,};
enum MACRO_FID {FID_EXIST = 0x1,FID_DIR = 0x2,FID_DELETED = 0x4,FID_PARENT = 0x8,};
enum MACRO_FIFO {FIFO_CNT_MASK = 0x1F,};
enum MACRO_FIFOHIWAT {FIFOHIWAT = 9216,};
enum MACRO_FIFOLOWAT {FIFOLOWAT = 0,};
enum MACRO_FIFOPOLLRBAND {FIFOPOLLRBAND = 0x2000,};
enum MACRO_FIFOSIZE {FIFOSIZE = 16,};
enum MACRO_FIFOTYPE {FIFOTYPE = 54,};
enum MACRO_FILENO {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,};
enum MACRO_FILNMLEN {FILNMLEN = 14,};
enum MACRO_FIND {FIND_LTUPLE_FWDF = 0x3,FIND_LTUPLE_BACKF = 0x4,FIND_NEXT_LTUPLEF = 0x5,FIND_PREV_LTUPLEF = 0x6,};
enum MACRO_FINEUSEC {FINEUSEC = 4194304,};
enum MACRO_FIOC {FIOC = 17920,};
enum MACRO_FIOLOG {FIOLOG_ENONE = 0,FIOLOG_ETRANS = 1,FIOLOG_EROFS = 2,FIOLOG_EULOCK = 3,FIOLOG_EWLOCK = 4,FIOLOG_ECLEAN = 5,FIOLOG_ENOULOCK = 6,};
enum MACRO_FIORDCHK {FIORDCHK = 26115,};
enum MACRO_FIRM {FIRM_EVENT_NULL = 0,};
enum MACRO_FKEY {FKEY_FAIL = 0x20,EXC_FAIL = 0x40,INT_FAIL = 0x80,};
enum MACRO_FLAG {FLAG_STAG = 0x4000,FLAG_OTAG = 0x2000,FLAG_HTAG = 0x1000,FLAG_TAGMASK = 0x7000,FLAG_ACA = 0x100,FLAG_HEAD = 0x8000,FLAG_SENSING = 0x400,FLAG_NOINTR = 0x1,FLAG_NODISCON = 0x2,FLAG_NOPARITY = 0x8,FLAG_RENEGOTIATE_WIDE_SYNC = 0x1000000,FLAG_SUBLUN = 0x4,FLAG_QUEHOLD = 0x200,FLAG_IMMEDIATE_CB = 0x800,FLAG_SILENT = 0x10000,FLAG_DIAGNOSE = 0x20000,FLAG_ISOLATE = 0x40000,};
enum MACRO_FLK {FLK_INITIAL_STATE = 1,FLK_START_STATE = 2,FLK_ACTIVE_STATE = 3,FLK_SLEEPING_STATE = 4,FLK_GRANTED_STATE = 5,FLK_INTERRUPTED_STATE = 6,FLK_CANCELLED_STATE = 7,FLK_DEAD_STATE = 8,};
enum MACRO_FLK_UNLOCK {FLK_UNLOCK = 0x1,FLK_DOWNGRADE = 0x2,FLK_UPGRADE = 0x3,FLK_STAY_SAME = 0x4,};
enum MACRO_FLK_USE {FLK_USE_GRAPH = 0,FLK_INIT_GRAPH = 1,};
enum MACRO_FLOW {FLOW_RTSCTS = 0x2,FLOW_IXON = 0x40,FLOW_IXANY = 0x80,};
enum MACRO_FLP {FLP_DELAYED_FREE = -1,};
enum MACRO_FLT {FLT_RADIX = 2,FLT_MANT_DIG = 24,FLT_DIG = 6,FLT_MIN_EXP = -125,FLT_MIN_10_EXP = -37,FLT_MAX_EXP = 128,FLT_MAX_10_EXP = 38,};
enum MACRO_FLTACCESS {FLTACCESS = 5,};
enum MACRO_FLTBOUNDS {FLTBOUNDS = 6,};
enum MACRO_FLTBPT {FLTBPT = 3,FLTTRACE = 4,};
enum MACRO_FLTCPCOVF {FLTCPCOVF = 13,};
enum MACRO_FLTFPE {FLTFPE = 9,};
enum MACRO_FLTILL {FLTILL = 1,FLTPRIV = 2,};
enum MACRO_FLTIOVF {FLTIOVF = 7,FLTIZDIV = 8,};
enum MACRO_FLTPAGE {FLTPAGE = 11,};
enum MACRO_FLTSTACK {FLTSTACK = 10,};
enum MACRO_FLTWATCH {FLTWATCH = 12,};
enum MACRO_FLUSH {FLUSH_ARP_TIME = 0x1,FLUSH_REDIRECT_TIME = 0x2,FLUSH_MTU_TIME = 0x4,};
enum MACRO_FLUSHALL {FLUSHALL = 1,};
enum MACRO_FLUSHDATA : __int64 {FLUSHDATA = 0,TRANSPARENT = 4294967295,};
enum MACRO_FLUSHR {FLUSHR = 0x1,FLUSHW = 0x2,};
enum MACRO_FLUSHRW {FLUSHRW = 0x3,FLUSHBAND = 0x4,};
enum MACRO_FMASK {FMASK = 0xA0FF,};
enum MACRO_FMAXEXP {FMAXEXP = 128,MAXBEXP = 1024,};
enum MACRO_FMNAMESZ {FMNAMESZ = 8,};
enum MACRO_FMTTRK {FMTTRK = 0xD,};
enum MACRO_FN {FN_E_SPI_CONTINUE = 130,FN_E_SPI_FOLLOW_LINK = 131,FN_SPI_LEAVE_TERMINAL_LINK = 1,FN_CTX_SVC_FUNC_ARRAY_SIZE = 21,};
enum MACRO_FNM {FNM_PATHNAME = 0x1,FNM_NOESCAPE = 0x2,FNM_PERIOD = 0x4,FNM_IGNORECASE = 0x8,FNM_NOMATCH = 0x1,FNM_ERROR = 0x2,FNM_NOSYS = 0x3,};
enum MACRO_FNONBLOCK {FNONBLOCK = 0x80,};
enum MACRO_FOFFMAX {FOFFMAX = 0x2000,};
enum MACRO_FOLLOW {FOLLOW_LINKS = 1,FOLLOW_PATH = 2,};
enum MACRO_FOPEN {FOPEN_MAX = 20,FILENAME_MAX = 1024,};
enum MACRO_FOPEN_0 {FOPEN = 0xFFFFFFFF,};
enum MACRO_FORM {FORM_N = 1,FORM_T = 2,FORM_C = 3,};
enum MACRO_FORMAT {FORMAT = 0x2000,};
enum MACRO_FORM_COMMAND {MIN_FORM_COMMAND = 512,MAX_FORM_COMMAND = 568,};
enum MACRO_FORREAL {FORREAL = 0,JUSTLOOKING = 1,};
enum MACRO_FP {FP_DISABLE = 0,FP_ENABLE = 1,FP_CLEAR = 0,FP_SET = 1,FP_X_INV = 16,FP_X_OFL = 8,FP_X_UFL = 4,FP_X_DZ = 2,FP_X_IMP = 1,};
enum MACRO_FPB {FPB_BFI = 0x4,FPB_CMPLT = 0x8,FPB_DATA = 0x10,};
enum MACRO_FPE {FPE_INTDIV = 1,FPE_INTOVF = 2,FPE_FLTDIV = 3,FPE_FLTOVF = 4,FPE_FLTUND = 5,FPE_FLTRES = 6,FPE_FLTINV = 7,FPE_FLTSUB = 8,};
enum MACRO_FPRS {FPRS_DL = 0x1,FPRS_DU = 0x2,FPRS_FEF = 0x4,};
enum MACRO_FREAD {FREAD = 0x1,FWRITE = 0x2,FNDELAY = 0x4,FAPPEND = 0x8,FSYNC = 0x10,FDSYNC = 0x40,FRSYNC = 0x8000,};
enum MACRO_FREE {FREE_SHAPE = 0x80,};
enum MACRO_FS {FS_MAGIC = 0x11954,};
enum MACRO_FSACTIVE {FSACTIVE = 0,FSCLEAN = 1,FSSTABLE = 2,};
enum MACRO_FSBAD {FSBAD = 0xFFFFFFFF,};
enum MACRO_FSD {FSD_FREE = 0,FSD_ACL = 1,FSD_DFACL = 2,FSD_RESERVED3 = 3,FSD_RESERVED4 = 4,FSD_RESERVED5 = 5,FSD_RESERVED6 = 6,FSD_RESERVED7 = 7,};
enum MACRO_FSETLOCKING {FSETLOCKING_QUERY = 0,FSETLOCKING_INTERNAL = 1,FSETLOCKING_BYCALLER = 2,};
enum MACRO_FSF3 {FSF3_LINK = 0x1,FSF3_SYMLINK = 0x2,FSF3_HOMOGENEOUS = 0x8,FSF3_CANSETTIME = 0x10,};
enum MACRO_FSFIX {FSFIX = 0xFFFFFFFC,};
enum MACRO_FSHIFT {FSHIFT = 8,FSCALE = 256,};
enum MACRO_FSINFO {FSINFO_UNKNOWN = -1,};
enum MACRO_FSLARGEFILES {FSLARGEFILES = 0x1,};
enum MACRO_FSLOG {FSLOG = 0xFFFFFFFD,};
enum MACRO_FSOKAY {FSOKAY = 0x7C269D38,};
enum MACRO_FSR {FSR_CEXC = 0x1F,FSR_AEXC = 0x3E0,FSR_FCC = 0xC00,FSR_PR = 0x1000,FSR_QNE = 0x2000,FSR_FTT = 0x1C000,FSR_VER = 0xE0000,FSR_TEM = 0xF800000,FSR_RP = 0x30000000,FSR_RD = 0xC0000000,FSR_VER_SHIFT = 0x11,FSR_FCC1 = 0x3,FSR_FCC2 = 0xC,FSR_FCC3 = 0x30,FSR_CEXC_NX = 0x1,FSR_CEXC_DZ = 0x2,FSR_CEXC_UF = 0x4,FSR_CEXC_OF = 0x8,FSR_CEXC_NV = 0x10,FSR_AEXC_NX = 0x20,FSR_AEXC_DZ = 0x40,FSR_AEXC_UF = 0x80,FSR_AEXC_OF = 0x100,FSR_AEXC_NV = 0x200,};
enum MACRO_FSR_FTT {FSR_FTT_SHIFT = 14,FSR_FTT_IEEE = 16384,FSR_FTT_UNFIN = 32768,FSR_FTT_UNIMP = 49152,FSR_FTT_SEQ = 65536,FSR_FTT_ALIGN = 81920,FSR_FTT_DFAULT = 98304,FSR_TEM_NX = 8388608,FSR_TEM_DZ = 16777216,FSR_TEM_UF = 33554432,FSR_TEM_OF = 67108864,FSR_TEM_NV = 134217728,};
enum MACRO_FSSUSPEND {FSSUSPEND = 0xFFFFFFFE,};
enum MACRO_FSTYPSZ {FSTYPSZ = 16,};
enum MACRO_FS_GENERAL {FS_GENERAL_MULTICAST = 0xFFFFF7,FS_WELL_KNOWN_MULTICAST = 0xFFFFF8,FS_HUNT_GROUP = 0xFFFFF9,FS_MANAGEMENT_SERVER = 0xFFFFFA,FS_TIME_SERVER = 0xFFFFFB,FS_NAME_SERVER = 0xFFFFFC,FS_FABRIC_CONTROLLER = 0xFFFFFD,FS_FABRIC_F_PORT = 0xFFFFFE,FS_BROADCAST = 0xFFFFFF,};
enum MACRO_FS_RECLAIM {FS_RECLAIM = 0x1,FS_RECLAIMING = 0x2,FS_CHECKCLEAN = 0x4,FS_CHECKRECLAIM = 0x8,FS_OPTTIME = 0x0,FS_OPTSPACE = 0x1,FS_42POSTBLFMT = 0xFFFFFFFF,FS_DYNAMICPOSTBLFMT = 0x1,};
enum MACRO_FT {FT_EXIST = 0x0,FT_DELETE = 0x2,FT_FEDT = 0x3,FT_BACKUP = 0x5,};
enum MACRO_FTBLK {FTBLK_EVNTS = 0x9,};
enum MACRO_FTEV {FTEV_MASK = 0x1FFF,FTEV_ISWR = 0x8000,FTEV_CS = 0x4000,FTEV_PS = 0x2000,FTEV_QMASK = 0x1F00,FTEV_ALLOCMASK = 0x1FF8,FTEV_ALLOCB = 0x0,FTEV_ESBALLOC = 0x1,FTEV_DESBALLOC = 0x2,FTEV_ESBALLOCA = 0x3,FTEV_DESBALLOCA = 0x4,FTEV_ALLOCBIG = 0x5,FTEV_ALLOCBW = 0x6,FTEV_FREEB = 0x8,FTEV_DUPB = 0x9,FTEV_COPYB = 0xA,FTEV_CALLER = 0xF,FTEV_PUT = 0x100,FTEV_FSYNCQ = 0x103,FTEV_DSYNCQ = 0x104,FTEV_PUTQ = 0x105,FTEV_GETQ = 0x106,FTEV_RMVQ = 0x107,FTEV_INSQ = 0x108,FTEV_PUTBQ = 0x109,FTEV_FLUSHQ = 0x10A,FTEV_REPLYQ = 0x10B,FTEV_PUTNEXT = 0x10D,FTEV_RWNEXT = 0x10E,FTEV_QWINNER = 0x10F,FTEV_GEWRITE = 0x101,};
enum MACRO_FTLACT {FTLACT = 0x3F,};
enum MACRO_FTLCLN {FTLCLN = 0x4000,};
enum MACRO_FTLEXIT {FTLEXIT = 0x1,};
enum MACRO_FTLFUNC {FTLFUNC = 0x2000,};
enum MACRO_FTLJMP {FTLJMP = 0x2,};
enum MACRO_FTLMSG {FTLMSG = 0x8000,};
enum MACRO_FTLRET {FTLRET = 0x0,};
enum MACRO_FTRACE {FTRACE_READY = 0x1,FTRACE_ENABLED = 0x2,FTRACE_NENT = 0x400,};
enum MACRO_FTT {FTT_NONE = 0,FTT_IEEE = 1,FTT_UNFIN = 2,FTT_UNIMP = 3,FTT_SEQ = 4,FTT_ALIGN = 5,FTT_DFAULT = 6,};
enum MACRO_FTW {FTW_F = 0,FTW_D = 1,FTW_DNR = 2,FTW_NS = 3,FTW_SL = 4,FTW_DP = 6,FTW_SLN = 7,FTW_PHYS = 1,FTW_MOUNT = 2,FTW_CHDIR = 4,FTW_DEPTH = 8,FTW_SKD = 1,FTW_FOLLOW = 2,FTW_PRUNE = 4,};
enum MACRO_FTYPE {FTYPE_UNALL_SPACE = 0x1,FTYPE_PART_INTEG = 0x2,FTYPE_INDIRECT = 0x3,FTYPE_DIRECTORY = 0x4,FTYPE_FILE = 0x5,FTYPE_BLOCK_DEV = 0x6,FTYPE_CHAR_DEV = 0x7,FTYPE_EAR = 0x8,FTYPE_FIFO = 0x9,FTYPE_C_ISSOCK = 0xA,FTYPE_T_ENTRY = 0xB,FTYPE_SYMLINK = 0xC,};
enum MACRO_FULLSCREEN {FULLSCREEN = 0x10,};
enum MACRO_FUNNY {FUNNY = 0x300,};
enum MACRO_F_CTL {F_CTL_XCHG_CONTEXT = 0x800000,F_CTL_SEQ_CONTEXT = 0x400000,F_CTL_FIRST_SEQ = 0x200000,F_CTL_LAST_SEQ = 0x100000,F_CTL_END_SEQ = 0x80000,F_CTL_END_CONNECT = 0x40000,F_CTL_CHAINED_SEQ = 0x20000,F_CTL_SEQ_INITIATIVE = 0x10000,F_CTL_XID_REASSIGNED = 0x8000,F_CTL_INVALIDATE_XID = 0x4000,F_CTL_CONTINUE_SEQ = 0xC0,F_CTL_ABORT_SEQ = 0x30,F_CTL_RO_PRESENT = 0x8,F_CTL_XCHG_REASSEMBLE = 0x4,F_CTL_FILL_BYTES = 0x3,F_CTL_RESERVED = 0x3F00,F_CTL_ALWAYS_ZERO = 0x6FFF4,};
enum MACRO_F_FILE {F_FILE_ONLY = 0x1,F_CONTAINED = 0x2,F_CDIR = 0x1,F_RDIR = 0x2,F_TEXT = 0x4,F_MAP = 0x8,F_OPEN = 0x10,F_TRACE = 0x20,F_TTY = 0x40,};
enum MACRO_F_RDACC {F_RDACC = 0x1,F_WRACC = 0x2,F_RWACC = 0x3,F_NODNY = 0x0,F_RDDNY = 0x1,F_WRDNY = 0x2,F_RWDNY = 0x3,F_COMPAT = 0x8,};
enum MACRO_F_REMOTELOCK {F_REMOTELOCK = 0x10000,F_PXFSLOCK = 0x20000,};
enum MACRO_F_ULOCK {F_ULOCK = 0,F_LOCK = 1,F_TLOCK = 2,F_TEST = 3,};
enum MACRO_G {G_TM_TAPE = 1,G_XY_DISK = 3,G_SD_DISK = 7,G_XT_TAPE = 8,G_SF_FLOPPY = 9,G_XD_DISK = 10,G_ST_TAPE = 11,G_NS = 12,G_RAM = 13,G_FT = 14,G_HD = 15,G_FD = 16,G_FILE = 28,G_NO_DEV = 29,G_DEV_MAX = 30,};
enum MACRO_G2 {G2 = 5,};
enum MACRO_G3 {G3 = 6,};
enum MACRO_G4 {G4 = 7,G5 = 8,};
enum MACRO_G6 {G6 = 9,};
enum MACRO_G7 {G7 = 10,};
enum MACRO_G711 {G711_256_ARRAY_MIDPOINT = 128,G711_ULAW_MIDPOINT = 8192,G711_ALAW_MIDPOINT = 4096,};
enum MACRO_GA {GA = 249,};
enum MACRO_GET {GET_NEXT = 0,GET_NO_MORE = 1,GET_ONE = 0,GET_ALL = 1,};
enum MACRO_GETACL {GETACL = 1,SETACL = 2,};
enum MACRO_GETACLCNT {GETACLCNT = 3,};
enum MACRO_GETALL {GETALL = 6,};
enum MACRO_GETCONTEXT {GETCONTEXT = 0,SETCONTEXT = 1,};
enum MACRO_GETFSIND {GETFSIND = 1,GETFSTYP = 2,};
enum MACRO_GETNCNT {GETNCNT = 3,GETPID = 4,};
enum MACRO_GETNFSTYP {GETNFSTYP = 3,};
enum MACRO_GETVAL {GETVAL = 5,};
enum MACRO_GETZCNT {GETZCNT = 7,SETVAL = 8,};
enum MACRO_GET_CONTINUATION {GET_CONTINUATION = -4,};
enum MACRO_GET_FIRST {GET_FIRST_LTUPLEF = 0x1,GET_LAST_LTUPLEF = 0x2,};
enum MACRO_GET_NEXT {GET_NEXT_LTUPLEF = 0x7,GET_PREV_LTUPLEF = 0x8,};
enum MACRO_GET_PORT {GET_PORT_STATUS = 163,GET_HUB_STATUS = 160,GET_HUB_DESCRIPTOR = 160,};
enum MACRO_GLOB {GLOB_ERR = 0x1,GLOB_MARK = 0x2,GLOB_NOSORT = 0x4,GLOB_NOCHECK = 0x8,GLOB_DOOFFS = 0x10,GLOB_APPEND = 0x20,GLOB_NOESCAPE = 0x40,GLOB_NOSYS = 0xFFFFFFFC,GLOB_NOMATCH = 0xFFFFFFFD,GLOB_NOSPACE = 0xFFFFFFFE,GLOB_ABORTED = 0xFFFFFFFF,};
enum MACRO_GOODERROR {GOODERROR = 0x600DBEEF,};
enum MACRO_GPLF {GPLF = 0x54,};
enum MACRO_GPLN {GPLN = 0x1B,};
enum MACRO_GRABATTACH {GRABATTACH = 17932,};
enum MACRO_GRABLOCKINFO {GRABLOCKINFO = 17949,};
enum MACRO_GRABPAGEALLOC {GRABPAGEALLOC = 17930,};
enum MACRO_GRABPAGEFREE {GRABPAGEFREE = 17931,};
enum MACRO_GROUPS {IMPMEM_GROUPS = 1,RECURS_GROUPS = 2,NEGMEM_GROUPS = 4,};
enum MACRO_GROUP_0 {GROUP = 0x8,};
enum MACRO_GSS : __int64 {GSS_C_DELEG_FLAG = 1,GSS_C_MUTUAL_FLAG = 2,GSS_C_REPLAY_FLAG = 4,GSS_C_SEQUENCE_FLAG = 8,GSS_C_CONF_FLAG = 16,GSS_C_INTEG_FLAG = 32,GSS_C_ANON_FLAG = 64,GSS_C_PROT_READY_FLAG = 128,GSS_C_TRANS_FLAG = 256,GSS_C_BOTH = 0,GSS_C_INITIATE = 1,GSS_C_ACCEPT = 2,GSS_C_GSS_CODE = 1,GSS_C_MECH_CODE = 2,GSS_C_AF_UNSPEC = 0,GSS_C_AF_LOCAL = 1,GSS_C_AF_INET = 2,GSS_C_AF_IMPLINK = 3,GSS_C_AF_PUP = 4,GSS_C_AF_CHAOS = 5,GSS_C_AF_NS = 6,GSS_C_AF_NBS = 7,GSS_C_AF_ECMA = 8,GSS_C_AF_DATAKIT = 9,GSS_C_AF_CCITT = 10,GSS_C_AF_SNA = 11,GSS_C_AF_DECnet = 12,GSS_C_AF_DLI = 13,GSS_C_AF_LAT = 14,GSS_C_AF_HYLINK = 15,GSS_C_AF_APPLETALK = 16,GSS_C_AF_BSC = 17,GSS_C_AF_DSS = 18,GSS_C_AF_OSI = 19,GSS_C_AF_X25 = 21,GSS_C_AF_NULLADDR = 255,GSS_C_NO_NAME = 0,GSS_C_NO_BUFFER = 0,GSS_C_NO_OID = 0,GSS_C_NO_OID_SET = 0,GSS_C_NO_CONTEXT = 0,GSS_C_NO_CREDENTIAL = 0,GSS_C_NO_CHANNEL_BINDINGS = 0,GSS_C_NULL_OID = 0,GSS_C_NULL_OID_SET = 0,GSS_C_QOP_DEFAULT = 0,GSS_C_INDEFINITE = 4294967295,GSS_S_COMPLETE = 0,GSS_C_CALLING_ERROR_OFFSET = 24,GSS_C_ROUTINE_ERROR_OFFSET = 16,GSS_C_SUPPLEMENTARY_OFFSET = 0,GSS_C_CALLING_ERROR_MASK = 255,GSS_C_ROUTINE_ERROR_MASK = 255,GSS_C_SUPPLEMENTARY_MASK = 65535,GSS_S_CALL_INACCESSIBLE_READ = 16777216,GSS_S_CALL_INACCESSIBLE_WRITE = 33554432,GSS_S_CALL_BAD_STRUCTURE = 50331648,GSS_S_BAD_MECH = 65536,GSS_S_BAD_NAME = 131072,GSS_S_BAD_NAMETYPE = 196608,GSS_S_BAD_BINDINGS = 262144,GSS_S_BAD_STATUS = 327680,GSS_S_BAD_SIG = 393216,GSS_S_BAD_MIC = 393216,GSS_S_NO_CRED = 458752,GSS_S_NO_CONTEXT = 524288,GSS_S_DEFECTIVE_TOKEN = 589824,GSS_S_DEFECTIVE_CREDENTIAL = 655360,GSS_S_CREDENTIALS_EXPIRED = 720896,GSS_S_CONTEXT_EXPIRED = 786432,GSS_S_FAILURE = 851968,GSS_S_BAD_QOP = 917504,GSS_S_UNAUTHORIZED = 983040,GSS_S_UNAVAILABLE = 1048576,GSS_S_DUPLICATE_ELEMENT = 1114112,GSS_S_NAME_NOT_MN = 1179648,GSS_S_CONTINUE_NEEDED = 1,GSS_S_DUPLICATE_TOKEN = 2,GSS_S_OLD_TOKEN = 4,GSS_S_UNSEQ_TOKEN = 8,GSS_S_GAP_TOKEN = 16,};
enum MACRO_HANDTPL {HANDTPL_NOERROR = 0x0,HANDTPL_SET_FLAGS = 0x1,HANDTPL_COPY_DONE = 0x2,HANDTPL_PARSE_LTUPLE = 0x4,HANDTPL_RETURN_NAME = 0x8,HANDTPL_ERROR = 0x1000000,};
enum MACRO_HARD {HARD_LOOKUP = 4,};
enum MACRO_HASH {HASH_SIZE = 32,HASH_SHIFT = 31,};
enum MACRO_HAVE {HAVE_SUSP = 0,HAVE_PROHIBITED = 1,};
enum MACRO_HDE {HDE_ROOT_DIR_REC_SIZE = 34,HDE_FDESIZE = 33,HDE_FUSIZE = 12,HDE_MAX_NAME_LEN = 210,HDE_EXISTENCE = 1,HDE_DIRECTORY = 2,HDE_ASSOCIATED = 4,HDE_RECORD = 8,HDE_PROTECTION = 16,HDE_UNUSED_FLAGS = 96,HDE_LAST_EXTENT = 128,HDE_PROHIBITED = 234,};
enum MACRO_HDIOC {HDIOC = 0x400,};
enum MACRO_HDK {HDK_SILENT = 0x1,HDK_DIAGNOSE = 0x2,HDK_ISOLATE = 0x4,HDK_READ = 0x8,HDK_WRITE = 0x10,HDK_KBUF = 0x20,};
enum MACRO_HDKIOCGBAD {HDKIOCGBAD = 1128,};
enum MACRO_HDKIOCGDIAG {HDKIOCGDIAG = 1130,};
enum MACRO_HDKIOCGTYPE {HDKIOCGTYPE = 1126,};
enum MACRO_HDKIOCSBAD {HDKIOCSBAD = 1127,};
enum MACRO_HDKIOCSCMD {HDKIOCSCMD = 1129,};
enum MACRO_HDKIOCSTYPE {HDKIOCSTYPE = 1125,};
enum MACRO_HDKL {HDKL_SOFT = 0x1,HDKL_HARD = 0x2,};
enum MACRO_HDK_NOERROR {HDK_NOERROR = 0,HDK_CORRECTED = 1,HDK_RECOVERED = 2,HDK_FATAL = 3,HDK_NONMEDIA = 0,HDK_ISMEDIA = 1,};
enum MACRO_HEADERSIZE {HEADERSIZE = 128,};
enum MACRO_HFIXEDSZ {HFIXEDSZ = 12,};
enum MACRO_HID {HID_SUBCLASS = 1,HID_CLASS_CODE = 3,};
enum MACRO_HID_GET {HID_GET_REPORT = 0x1,HID_GET_IDLE = 0x2,HID_GET_PROTOCOL = 0x3,HID_SET_REPORT = 0x9,HID_SET_IDLE = 0xA,HID_SET_PROTOCOL = 0xB,};
enum MACRO_HID_GET_PARSER {HID_GET_PARSER_HANDLE = 0x100,HID_POWER_OFF = 0xDC,HID_FULL_POWER = 0xDD,HID_DISCONNECT_EVENT = 0xDE,HID_CONNECT_EVENT = 0xDF,};
enum MACRO_HID_KEYBOARD {HID_KEYBOARD_PROTOCOL = 0x1,HID_MOUSE_PROTOCOL = 0x2,};
enum MACRO_HID_VERSION {HID_VERSION_V_0 = 0,HID_SUCCESS = 0,HID_FAILURE = 1,};
enum MACRO_HIWATER {MIN_HIWATER = 2,MAX_HIWATER = 1022,};
enum MACRO_HME {HME_IOC = 0x60201AE1,HME_IOC_GET_SPEED = 0x100,HME_IOC_SET_SPEED = 0x110,HME_AUTO_SPEED = 0x0,HME_FORCE_SPEED = 0x1,HME_SPEED_10 = 0xA,HME_SPEED_100 = 0x64,HME_HALF_DUPLEX = 0x0,HME_FULL_DUPLEX = 0x1,HME_HMDALIGN = 0x800,HME_TMDMAX = 0x100,HME_RMDMAX = 0x100,};
enum MACRO_HMEG {HMEG_RESET_ETX = 1,HMEG_RESET_ERX = 2,HMEG_RESET_GLOBAL = 3,HMEG_CONFIG_BURSTSZ = 3,HMEG_CONFIG_64BIT_XFER = 4,HMEG_CONFIG_PARITY = 8,HMEG_CONFIG_RES1 = 16,HMEG_CONFIG_BURST16 = 0,HMEG_CONFIG_BURST32 = 1,HMEG_CONFIG_BURST64 = 2,HMEG_CONFIG_BURST_RES = 3,HMEG_CONFIG_64BIT_SHIFT = 2,HMEG_STATUS_FRAME_RCVD = 1,HMEG_STATUS_RXF_CNT_EXP = 2,HMEG_STATUS_ALN_CNT_EXP = 4,HMEG_STATUS_CRC_CNT_EXP = 8,HMEG_STATUS_LEN_CNT_EXP = 16,HMEG_STATUS_RXFIFO_OVFL = 32,HMEG_STATUS_RCV_CNT_EXP = 64,HMEG_STATUS_SQE_TST_ERR = 128,HMEG_STATUS_FRAME_SENT = 256,HMEG_STATUS_TXFIFO_UNDR = 512,HMEG_STATUS_MXPKTSZ_ERR = 1024,HMEG_STATUS_NRMCOLC_EXP = 2048,HMEG_STATUS_EXCOLC_EXP = 4096,HMEG_STATUS_LATCOLC_EXP = 8192,HMEG_STATUS_FSTCOLC_EXP = 16384,HMEG_STATUS_DEFTIMR_EXP = 32768,HMEG_STATUS_RINT = 65536,HMEG_STATUS_RX_DROP = 131072,HMEG_STATUS_RX_ERR_ACK = 262144,HMEG_STATUS_RX_LATE_ERR = 524288,HMEG_STATUS_RX_PAR_ERR = 1048576,HMEG_STATUS_RX_TAG_ERR = 2097152,HMEG_STATUS_EOP_ERR = 4194304,HMEG_STATUS_MIF_INTR = 8388608,HMEG_STATUS_TINT = 16777216,HMEG_STATUS_TX_ALL = 33554432,HMEG_STATUS_TX_ERR_ACK = 67108864,HMEG_STATUS_TX_LATE_ERR = 134217728,HMEG_STATUS_TX_PAR_ERR = 268435456,HMEG_STATUS_TX_TAG_ERR = 536870912,HMEG_STATUS_SLV_ERR_ACK = 1073741824,HMEG_STATUS_SLV_PAR_ERR = -2147483648,HMEG_STATUS_FATAL_ERR = -58982400,HMEG_STATUS_NONFATAL_ERR = 196348,HMEG_STATUS_NORMAL_INT = 25231360,HMEG_STATUS_INTR = -16777476,HMEG_MASK_FRAME_RCVD = 1,HMEG_MASK_RXF_CNT_EXP = 2,HMEG_MASK_ALN_CNT_EXP = 4,HMEG_MASK_CRC_CNT_EXP = 8,HMEG_MASK_LEN_CNT_EXP = 16,HMEG_MASK_RXFIFO_OVFL = 32,HMEG_MASK_RCV_CNT_EXP = 64,HMEG_MASK_SQE_TST_ERR = 128,HMEG_MASK_FRAME_SENT = 256,HMEG_MASK_TXFIFO_UNDR = 512,HMEG_MASK_MXPKTSZ_ERR = 1024,HMEG_MASK_NRMCOLC_EXP = 2048,HMEG_MASK_EXECOLC_EXP = 4096,HMEG_MASK_LATCOLC_EXP = 8192,HMEG_MASK_FSTCOLC_EXP = 16384,HMEG_MASK_DEFTIMR_EXP = 32768,HMEG_MASK_RINT = 65536,HMEG_MASK_RX_DROP = 131072,HMEG_MASK_RX_ERR_ACK = 262144,HMEG_MASK_RX_LATE_ERR = 524288,HMEG_MASK_RX_PAR_ERR = 1048576,HMEG_MASK_RX_TAG_ERR = 2097152,HMEG_MASK_EOP_ERR = 4194304,HMEG_MASK_MIF_INTR = 8388608,HMEG_MASK_TINT = 16777216,HMEG_MASK_TX_ALL = 33554432,HMEG_MASK_TX_ERR_ACK = 67108864,HMEG_MASK_TX_LATE_ERR = 134217728,HMEG_MASK_TX_PAR_ERR = 268435456,HMEG_MASK_TX_TAG_ERR = 536870912,HMEG_MASK_SLV_ERR_ACK = 1073741824,HMEG_MASK_SLV_PAR_ERR = -2147483648,HMEG_MASK_INTR = 16777475,};
enum MACRO_HMEMAXMIFDELAY {HMEMAXMIFDELAY = 100,};
enum MACRO_HMEMAXRSTDELAY {HMEMAXRSTDELAY = 200,};
enum MACRO_HMEPERIOD {HMEPERIOD = 20,};
enum MACRO_HMER {HMER_CONFIG_RXDMA_EN = 1,HMER_CONFIG_RES1 = 6,HMER_CONFIG_FBOFFSET = 56,HMER_CONFIG_RES2 = 448,HMER_CONFIG_RXRINGSZ = 1536,HMER_CONFIG_RES3 = 63488,HMER_CONFIG_RX_CSSTART = 8323072,HMER_CONFIG_RXRINGSZ32 = 0,HMER_CONFIG_RXRINGSZ64 = 512,HMER_CONFIG_RXRINGSZ128 = 1024,HMER_CONFIG_RXRINGSZ256 = 1536,HMER_CONFIG_FBO_SHIFT = 3,HMER_RXRINGSZ_SHIFT = 9,};
enum MACRO_HMERMD {HMERMD_CKSUM = 0xFFFF,HMERMD_BUFSIZE = 0x3FFF0000,HMERMD_OVFLOW = 0x40000000,HMERMD_OWN = 0x80000000,HMERMD_BUFSIZE_SHIFT = 0x10,};
enum MACRO_HMET {HMET_TXPEND_TDMD = 1,HMET_CONFIG_TXDMA_EN = 1,HMET_CONFIG_TXFIFOTH = 1022,HMET_CONFIG_DRAIN_INT = 1024,HMET_RINGSZ_SHIFT = 4,};
enum MACRO_HMETMD {HMETMD_BUFSIZE = 0x3FFF,HMETMD_CSSTART = 0xFC000,HMETMD_CSSTUFF = 0xFF00000,HMETMD_CSENABL = 0x10000000,HMETMD_EOP = 0x20000000,HMETMD_SOP = 0x40000000,HMETMD_OWN = 0x80000000,HMETMD_CSSTART_SHIFT = 0xE,HMETMD_CSSTUFF_SHIFT = 0x14,};
enum MACRO_HMEWAITPERIOD {HMEWAITPERIOD = 20,};
enum MACRO_HME_BBCLK {HME_BBCLK_LOW = 0,HME_BBCLK_HIGH = 1,HME_MIF_FRDATA = 65535,HME_MIF_FRTA0 = 65536,HME_MIF_FRTA1 = 131072,HME_MIF_FRREGAD = 8126464,HME_MIF_FRPHYAD = 260046848,HME_MIF_FROP = 805306368,HME_MIF_FRST = -1073741824,HME_MIF_FRREGAD_SHIFT = 18,HME_MIF_FRPHYAD_SHIFT = 23,HME_MIF_FRREAD = 1610743808,HME_MIF_FRWRITE = 1342308352,};
enum MACRO_HME_PHY {HME_PHY_BMCR = 0x0,HME_PHY_BMSR = 0x1,HME_PHY_IDR1 = 0x2,HME_PHY_IDR2 = 0x3,HME_PHY_ANAR = 0x4,HME_PHY_ANLPAR = 0x5,HME_PHY_ANER = 0x6,HME_PHY_DIS = 0x12,HME_PHY_FCSC = 0x13,HME_PHY_NWAYTR = 0x14,HME_PHY_REC = 0x15,HME_PHY_SRR = 0x16,HME_PHY_CSC = 0x17,HME_PHY_LBREMR = 0x18,HME_PHY_AR = 0x19,HME_PHY_VRES1 = 0x1A,HME_PHY_TPISR = 0x1B,HME_PHY_NICR = 0x1C,HME_PHY_BTXPC = 0x1F,};
enum MACRO_HME_PHYRST : __int64 {HME_PHYRST_MAXDELAY = 500,HME_MIF_CFGPS = 1,HME_MIF_CFGPE = 2,HME_MIF_CFGBB = 4,HME_MIF_CFGPR = 248,HME_MIF_CFGM0 = 256,HME_MIF_CFGM1 = 512,HME_MIF_CFGPD = 31744,HME_MIF_CFGPR_SHIFT = 3,HME_MIF_CFGPD_SHIFT = 10,HME_MIF_POLL_DELAY = 200,HME_INTERNAL_PHYAD = 1,HME_EXTERNAL_PHYAD = 0,HME_MIF_INTMASK = 65535,HME_MIF_STATUS = 65535,HME_MIF_BASIC = 4294901760,HME_MIF_FSM = 1023,};
enum MACRO_HME_RMD {HME_RMD_BUFALIGN = 64,};
enum MACRO_HNAMLEN {HNAMLEN = 256,EXPNLEN = 1024,};
enum MACRO_HOLE {HOLE = 0x302,};
enum MACRO_HOME {HOME = 0x45,};
enum MACRO_HOMEARROW {HOMEARROW = 0x0,UPARROW = 0x1,DOWNARROW = 0x2,};
enum MACRO_HOPCNT {HOPCNT_INFINITY = 16,};
enum MACRO_HOST {HOST_NOT_FOUND = 1,};
enum MACRO_HOSTNAMESZ {HOSTNAMESZ = 32,};
enum MACRO_HOST_LLC {HOST_LLC_IN_USE = 8,};
enum MACRO_HOURMASK {HOURMASK = 0x1F,};
enum MACRO_HOURS {HOURS_PER_DAY = 24,};
enum MACRO_HOURSHIFT {HOURSHIFT = 11,};
enum MACRO_HOURSPERDAY {HOURSPERDAY = 24,};
enum MACRO_HPE {HPE_FPESIZE = 8,};
enum MACRO_HREF {HREF = 1,};
enum MACRO_HRM {HRM_SHIFT = 4,HRM_BYTES = 16,HRM_PAGES = 64,HRM_PGPERBYTE = 4,HRM_PGBYTEMASK = 3,HRM_HASHSIZE = 512,HRM_HASHMASK = 511,HRM_BLIST_INCR = 512,HRM_SWSMONID = 1,};
enum MACRO_HS {HS_SECTOR_SIZE = 2048,HS_SECTOR_SHIFT = 11,HS_SYSAREA_SEC = 0,HS_VOLDESC_SEC = 16,};
enum MACRO_HSFS {HSFS_MAGIC = 0x3095500,HSFS_ERR_TRAILING_JUNK = 0x0,HSFS_ERR_LOWER_CASE_NM = 0x1,HSFS_ERR_BAD_ROOT_DIR = 0x2,HSFS_ERR_UNSUP_TYPE = 0x3,HSFS_ERR_BAD_FILE_LEN = 0x4,HSFS_MIN_DL_SHFT = 0x5,};
enum MACRO_HSFSMNT {HSFSMNT_NORRIP = 0x1,HSFSMNT_NOTRAILDOT = 0x2,HSFSMNT_NOMAPLCASE = 0x4,};
enum MACRO_HSIZLEN {HSIZLEN = 2,TNAMLEN = 100,};
enum MACRO_HSV {HSV_ID_STRLEN = 5,HSV_ID_VER = 1,HSV_FILE_STRUCT_ID_VER = 1,HSV_SYS_ID_STRLEN = 32,HSV_VOL_ID_STRLEN = 32,HSV_VOL_SET_ID_STRLEN = 128,HSV_PUB_ID_STRLEN = 128,HSV_PREP_ID_STRLEN = 128,HSV_APPL_ID_STRLEN = 128,HSV_COPYR_ID_STRLEN = 32,HSV_ABSTR_ID_STRLEN = 32,HSV_DATE_LEN = 16,};
enum MACRO_HS_DIR {HS_DIR_NAMELEN = 31,HS_FILE_NAMELEN = 31,};
enum MACRO_HS_HASHSIZE {HS_HASHSIZE = 32,HS_HSTABLESIZE = 16384,};
enum MACRO_HTIMLEN {HTIMLEN = 2,};
enum MACRO_HUB {HUB_CHARS_POWER_SWITCHING_MODE = 0x3,HUB_CHARS_GANGED_POWER = 0x0,HUB_CHARS_INDIVIDUAL_PORT_POWER = 0x1,HUB_CHARS_NO_POWER_SWITCHING = 0x2,HUB_CHARS_COMPOUND_DEVICE = 0x4,HUB_CHARS_GLOBAL_OVER_CURRENT = 0x0,HUB_CHARS_INDIV_OVER_CURRENT = 0x8,HUB_CHARS_NO_OVER_CURRENT = 0x10,HUB_CHANGE_STATUS = 0x1,};
enum MACRO_HUB_LOCAL {HUB_LOCAL_POWER_STATUS = 0x1,HUB_OVER_CURRENT = 0x2,};
enum MACRO_I {I_NREAD = 0x5301,I_PUSH = 0x5302,I_POP = 0x5303,I_LOOK = 0x5304,I_FLUSH = 0x5305,I_SRDOPT = 0x5306,I_GRDOPT = 0x5307,I_STR = 0x5308,I_SETSIG = 0x5309,I_GETSIG = 0x530A,I_FIND = 0x530B,I_LINK = 0x530C,I_UNLINK = 0x530D,I_PEEK = 0x530F,I_FDINSERT = 0x5310,I_SENDFD = 0x5311,I_RECVFD = 0x530E,I_SWROPT = 0x5313,I_GWROPT = 0x5314,I_LIST = 0x5315,I_PLINK = 0x5316,I_PUNLINK = 0x5317,I_ANCHOR = 0x5318,I_FLUSHBAND = 0x531C,I_CKBAND = 0x531D,I_GETBAND = 0x531E,I_ATMARK = 0x531F,I_SETCLTIME = 0x5320,I_GETCLTIME = 0x5321,I_CANPUT = 0x5322,I_SERROPT = 0x5323,I_GERROPT = 0x5324,I_ESETSIG = 0x5325,I_EGETSIG = 0x5326,};
enum MACRO_I82586ALIGN {I82586ALIGN = 4,};
enum MACRO_IA {IA_OFF_QUANTUM = 1,IA_OFF_PRIORITY = 20,};
enum MACRO_IAC {IAC = 255,};
enum MACRO_IAKPRI {IAKPRI = 0x1,IABACKQ = 0x2,IASLEPT = 0x4,};
enum MACRO_IAMAXUPRI {IAMAXUPRI = 60,};
enum MACRO_IANPROCS {IANPROCS = 60,};
enum MACRO_IAOFFUPRI {IAOFFUPRI = 29,};
enum MACRO_IA_INTERACTIVE {IA_INTERACTIVE_OFF = 0x0,IA_SET_INTERACTIVE = 0x1,IA_NICED = 0x2,IA_BOOST = 0xA,IA_GETDPSIZE = 0x1,IA_GETDPTBL = 0x2,IA_SETDPTBL = 0x3,};
enum MACRO_IA_NOCHANGE {IA_NOCHANGE = -32768,};
enum MACRO_IBSHIFT {IBSHIFT = 16,};
enum MACRO_IBSIZE {IBSIZE = 16,OBSIZE = 64,};
enum MACRO_IC {IC = 0x4F,};
enum MACRO_ICB {ICB_FLAG_SHORT_AD = 0x0,ICB_FLAG_LONG_AD = 0x1,ICB_FLAG_EXT_AD = 0x2,ICB_FLAG_ONE_AD = 0x3,ICB_FLAG_SORTED = 0x8,ICB_FLAG_NON_RELOC = 0x10,ICB_FLAG_ARCHIVE = 0x20,ICB_FLAG_SETUID = 0x40,ICB_FLAG_SETGID = 0x80,ICB_FLAG_STICKY = 0x100,ICB_FLAG_CONTIG = 0x200,ICB_FLAG_SYSTEM = 0x400,ICB_FLAG_TRNSFRMED = 0x800,ICB_FLAG_MVERS = 0x1000,};
enum MACRO_ICK {ICK_REMAP = 8,ICK_VALID = 16,ICK_NONE = 0,ICK_M_CTL_MAGIC = -790708002,};
enum MACRO_ICMP {ICMP_ECHO_REPLY = 0,ICMP_DEST_UNREACHABLE = 3,ICMP_SOURCE_QUENCH = 4,ICMP_REDIRECT = 5,ICMP_ECHO_REQUEST = 8,ICMP_ROUTER_ADVERTISEMENT = 9,ICMP_ROUTER_SOLICITATION = 10,ICMP_TIME_EXCEEDED = 11,ICMP_PARAM_PROBLEM = 12,ICMP_TIME_STAMP_REQUEST = 13,ICMP_TIME_STAMP_REPLY = 14,ICMP_INFO_REQUEST = 15,ICMP_INFO_REPLY = 16,ICMP_ADDRESS_MASK_REQUEST = 17,ICMP_ADDRESS_MASK_REPLY = 18,ICMP_TTL_EXCEEDED = 0,ICMP_REASSEMBLY_TIME_EXCEEDED = 1,ICMP_NET_UNREACHABLE = 0,ICMP_HOST_UNREACHABLE = 1,ICMP_PROTOCOL_UNREACHABLE = 2,ICMP_PORT_UNREACHABLE = 3,ICMP_FRAGMENTATION_NEEDED = 4,ICMP_SOURCE_ROUTE_FAILED = 5,ICMP_DEST_NET_UNKNOWN = 6,ICMP_DEST_HOST_UNKNOWN = 7,ICMP_SRC_HOST_ISOLATED = 8,ICMP_DEST_NET_UNREACH_ADMIN = 9,ICMP_DEST_HOST_UNREACH_ADMIN = 10,ICMP_DEST_NET_UNREACH_TOS = 11,ICMP_DEST_HOST_UNREACH_TOS = 12,};
enum MACRO_ICMP6 {ICMP6_INFOMSG_MASK = 0x80,ICMP6_MINLEN = 0x8,ICMP6_DST_UNREACH = 0x1,ICMP6_PACKET_TOO_BIG = 0x2,ICMP6_TIME_EXCEEDED = 0x3,ICMP6_PARAM_PROB = 0x4,ICMP6_ECHO_REQUEST = 0x80,ICMP6_ECHO_REPLY = 0x81,ICMP6_MEMBERSHIP_QUERY = 0x82,ICMP6_MEMBERSHIP_REPORT = 0x83,ICMP6_MEMBERSHIP_REDUCTION = 0x84,};
enum MACRO_ICMP6_FILTER {ICMP6_FILTER = 0x1,};
enum MACRO_ICMP6_MAX {ICMP6_MAX_INFO_TYPE = 137,ICMP6_DST_UNREACH_NOROUTE = 0,ICMP6_DST_UNREACH_ADMIN = 1,ICMP6_DST_UNREACH_NOTNEIGHBOR = 2,ICMP6_DST_UNREACH_ADDR = 3,ICMP6_DST_UNREACH_NOPORT = 4,ICMP6_TIME_EXCEED_TRANSIT = 0,ICMP6_TIME_EXCEED_REASSEMBLY = 1,ICMP6_PARAMPROB_HEADER = 0,ICMP6_PARAMPROB_NEXTHEADER = 1,ICMP6_PARAMPROB_OPTION = 2,ICMP6_MAX_HOST_REPORT_DELAY = 10,};
enum MACRO_ICMPH {ICMPH_SIZE = 8,};
enum MACRO_ICMP_MINLEN {ICMP_MINLEN = 8,ICMP_MASKLEN = 12,ICMP_ECHOREPLY = 0,ICMP_UNREACH = 3,ICMP_UNREACH_NET = 0,ICMP_UNREACH_HOST = 1,ICMP_UNREACH_PROTOCOL = 2,ICMP_UNREACH_PORT = 3,ICMP_UNREACH_NEEDFRAG = 4,ICMP_UNREACH_SRCFAIL = 5,ICMP_UNREACH_NET_UNKNOWN = 6,ICMP_UNREACH_HOST_UNKNOWN = 7,ICMP_UNREACH_ISOLATED = 8,ICMP_UNREACH_NET_PROHIB = 9,ICMP_UNREACH_HOST_PROHIB = 10,ICMP_UNREACH_TOSNET = 11,ICMP_UNREACH_TOSHOST = 12,ICMP_UNREACH_FILTER_PROHIB = 13,ICMP_UNREACH_HOST_PRECEDENCE = 14,ICMP_UNREACH_PRECEDENCE_CUTOFF = 15,ICMP_SOURCEQUENCH = 4,ICMP_REDIRECT_NET = 0,ICMP_REDIRECT_HOST = 1,ICMP_REDIRECT_TOSNET = 2,ICMP_REDIRECT_TOSHOST = 3,ICMP_ECHO = 8,ICMP_ROUTERADVERT = 9,ICMP_ROUTERSOLICIT = 10,ICMP_TIMXCEED = 11,ICMP_TIMXCEED_INTRANS = 0,ICMP_TIMXCEED_REASS = 1,ICMP_PARAMPROB = 12,ICMP_PARAMPROB_OPTABSENT = 1,ICMP_PARAMPROB_BADLENGTH = 2,ICMP_TSTAMP = 13,ICMP_TSTAMPREPLY = 14,ICMP_IREQ = 15,ICMP_IREQREPLY = 16,ICMP_MASKREQ = 17,ICMP_MASKREPLY = 18,ICMP_MAXTYPE = 18,};
enum MACRO_IDDI {IDDI_INTR_TYPE_NORMAL = 1,IDDI_INTR_TYPE_FAST = 2,IDDI_INTR_TYPE_SOFT = 3,};
enum MACRO_IDE {IDE_ROOT_DIR_REC_SIZE = 34,IDE_FDESIZE = 33,IDE_MAX_NAME_LEN = 222,IDE_EXISTENCE = 1,IDE_DIRECTORY = 2,IDE_ASSOCIATED = 4,IDE_RECORD = 8,IDE_PROTECTION = 16,IDE_UNUSED_FLAGS = 96,IDE_LAST_EXTENT = 128,IDE_PROHIBITED = 234,};
enum MACRO_IDLE {IDLE = 0x308,};
enum MACRO_IDLEKEY {IDLEKEY = 0x7F,};
enum MACRO_IDLEN {IDLEN = 4,};
enum MACRO_IDLE_LENGTH {GET_IDLE_LENGTH = 0x1,SET_IDLE_LENGTH = 0x0,};
enum MACRO_IE {IE_TE_MEMSIZE = 0x20000,IE_IORAM_SIZE = 0x1000,};
enum MACRO_IECB {IECB_DONE = 0x80,IECB_BUSY = 0x40,IECB_OK = 0x20,IECB_ABORTED = 0x10,IECB_CMD = 0x700,IECB_EL = 0x80,IECB_SUSP = 0x40,IECB_INTR = 0x20,};
enum MACRO_IECMD {IECMD_RESET = 0x8000,IECMD_RU_START = 0x1000,IECMD_RU_RESUME = 0x2000,IECMD_RU_SUSPEND = 0x3000,IECMD_RU_ABORT = 0x4000,IECMD_ACK_CX = 0x80,IECMD_ACK_FR = 0x40,IECMD_ACK_CNA = 0x20,IECMD_ACK_RNR = 0x10,IECMD_CU_START = 0x1,IECMD_CU_RESUME = 0x2,IECMD_CU_SUSPEND = 0x3,IECMD_CU_ABORT = 0x4,};
enum MACRO_IECONF {IECONF_SAVBF = 0x8000,IECONF_SRDY = 0x4000,IECONF_EXTLP = 0x80,IECONF_INTLP = 0x40,IECONF_PREAM = 0x30,IECONF_ACLOC = 0x8,IECONF_ALEN = 0x7,IECONF_BOF = 0x80,IECONF_ACR = 0x70,IECONF_LINPRIO = 0x70,IECONF_RETRY = 0xF0,IECONF_SLTTMH = 0x7,IECONF_PAD = 0x8000,IECONF_HDLC = 0x4000,IECONF_CRC16 = 0x2000,IECONF_NOCRC = 0x1000,IECONF_NOCARR = 0x800,IECONF_MANCH = 0x400,IECONF_NOBRD = 0x200,IECONF_PROMISC = 0x100,IECONF_CDSRC = 0x80,IECONF_CDFILT = 0x70,IECONF_CRSRC = 0x8,IECONF_CRFILT = 0x7,};
enum MACRO_IECUS {IECUS_IDLE = 0,IECUS_SUSPENDED = 1,IECUS_ACTIVE = 2,};
enum MACRO_IEETHERADDRL {IEETHERADDRL = 6,IEMCADDRMAX = 64,};
enum MACRO_IENULLOFF {IENULLOFF = 0xFFFF,};
enum MACRO_IERBD {IERBD_EOF = 0x80,IERBD_VALID = 0x40,IERBD_CNTHI = 0x3F,IERBD_EL = 0x80,IERBD_SIZEHI = 0x3F,};
enum MACRO_IERFD {IERFD_SHORT = 0x8000,IERFD_NOEOF = 0x4000,IERFD_DONE = 0x80,IERFD_BUSY = 0x40,IERFD_OK = 0x20,IERFD_CRCERR = 0x8,IERFD_ALIGN = 0x4,IERFD_NOSPACE = 0x2,IERFD_OVERRUN = 0x1,IERFD_EL = 0x80,IERFD_SUSP = 0x40,};
enum MACRO_IERUS {IERUS_IDLE = 0x0,IERUS_SUSPENDED = 0x1000,IERUS_NORESOURCE = 0x2000,IERUS_READY = 0x4000,};
enum MACRO_IESCB {IESCB_RUS = 0x7000,IESCB_CX = 0x80,IESCB_FR = 0x40,IESCB_CNA = 0x20,IESCB_RNR = 0x10,IESCB_CUS = 0x7,};
enum MACRO_IESCPADDR {IESCPADDR = 0xFFFFF4,};
enum MACRO_IESCPPAD {IESCPPAD = 5,};
enum MACRO_IETBD {IETBD_EOF = 0x80,IETBD_CNTHI = 0x3F,};
enum MACRO_IETCB {IETCB_DEFER = 0x8000,IETCB_HEART = 0x4000,IETCB_XCOLL = 0x2000,IETCB_NCOLL = 0xF00,IETCB_DONE = 0x80,IETCB_BUSY = 0x40,IETCB_OK = 0x20,IETCB_ABORTED = 0x10,IETCB_NOCARR = 0x4,IETCB_NOCTS = 0x2,IETCB_UNDERRUN = 0x1,IETCB_CMD = 0x700,IETCB_EL = 0x80,IETCB_SUSP = 0x40,IETCB_INTR = 0x20,};
enum MACRO_IEXEC {IEXEC = 0x40,};
enum MACRO_IE_NOP {IE_NOP = 0x0,IE_IADDR = 0x100,IE_CONFIG = 0x200,IE_MADDR = 0x300,IE_TRANSMIT = 0x400,IE_TDR = 0x500,IE_DUMP = 0x600,IE_DIAGNOSE = 0x700,};
enum MACRO_IF {IF_NAMESIZE = 32,};
enum MACRO_IFA {IFA_ROUTE = 0x1,};
enum MACRO_IFBLK {IFBLK = 0x6000,IFREG = 0x8000,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_DEBUG = 0x4,IFF_LOOPBACK = 0x8,IFF_POINTOPOINT = 0x10,IFF_NOTRAILERS = 0x20,IFF_RUNNING = 0x40,IFF_NOARP = 0x80,IFF_PROMISC = 0x100,IFF_ALLMULTI = 0x200,IFF_INTELLIGENT = 0x400,IFF_MULTICAST = 0x800,IFF_MULTI_BCAST = 0x1000,IFF_UNNUMBERED = 0x2000,IFF_DHCPRUNNING = 0x4000,IFF_PRIVATE = 0x8000,IFF_NOXMIT = 0x10000,IFF_NOLOCAL = 0x20000,IFF_DEPRECATED = 0x40000,IFF_ADDRCONF = 0x80000,IFF_ROUTER = 0x100000,IFF_NONUD = 0x200000,IFF_ANYCAST = 0x400000,IFF_NORTEXCH = 0x800000,IFF_IPV4 = 0x1000000,IFF_IPV6 = 0x2000000,IFF_MIPRUNNING = 0x4000000,IFF_CANTCHANGE = 0x3003952,};
enum MACRO_IFIFO {IFIFO = 0x1000,IFCHR = 0x2000,IFDIR = 0x4000,};
enum MACRO_IFLAGS {IFLAGS = 416,};
enum MACRO_IFLAGS_SVID {IFLAGS_SVID = 177,};
enum MACRO_IFLNK {IFLNK = 0xA000,};
enum MACRO_IFMT {IFMT = 0xF000,};
enum MACRO_IFNAMSIZ {IFNAMSIZ = 16,};
enum MACRO_IFNET {IFNET_SLOWHZ = 1,};
enum MACRO_IFP {IFP_NUM_ENTRIES_IN_MAP = 127,};
enum MACRO_IFPIO {IFPIO_FORCE_LIP = 18097,IFPIO_LINKSTATUS = 18103,};
enum MACRO_IFPIOCGMAP {IFPIOCGMAP = 55809,};
enum MACRO_IFP_CMD {IFP_CMD_CMPLT = 0x0,IFP_CMD_INCOMPLETE = 0x1,IFP_CMD_DMA_DERR = 0x2,IFP_CMD_TRAN_ERR = 0x3,IFP_CMD_RESET = 0x4,IFP_CMD_ABORTED = 0x5,IFP_CMD_TIMEOUT = 0x6,IFP_CMD_DATA_OVR = 0x7,IFP_CMD_ABORT_REJECTED = 0xE,IFP_CMD_RESET_REJECTED = 0x12,IFP_CMD_DATA_UNDER = 0x15,IFP_CMD_QUEUE_FULL = 0x1C,IFP_CMD_PORT_UNAVAIL = 0x28,IFP_CMD_PORT_LOGGED_OUT = 0x29,IFP_CMD_PORT_CONFIG_CHANGED = 0x2A,};
enum MACRO_IFQ {IFQ_MAXLEN = 50,};
enum MACRO_IFSHAD {IFSHAD = 0xB000,};
enum MACRO_IFSOCK {IFSOCK = 0xC000,};
enum MACRO_IFT {IFT_OTHER = 0x1,IFT_1822 = 0x2,IFT_HDH1822 = 0x3,IFT_X25DDN = 0x4,IFT_X25 = 0x5,IFT_ETHER = 0x6,IFT_ISO88023 = 0x7,IFT_ISO88024 = 0x8,IFT_ISO88025 = 0x9,IFT_ISO88026 = 0xA,IFT_STARLAN = 0xB,IFT_P10 = 0xC,IFT_P80 = 0xD,IFT_HY = 0xE,IFT_FDDI = 0xF,IFT_LAPB = 0x10,IFT_SDLC = 0x11,IFT_T1 = 0x12,IFT_CEPT = 0x13,IFT_ISDNBASIC = 0x14,IFT_ISDNPRIMARY = 0x15,IFT_PTPSERIAL = 0x16,IFT_PPP = 0x17,IFT_LOOP = 0x18,IFT_EON = 0x19,IFT_XETHER = 0x1A,IFT_NSIP = 0x1B,IFT_SLIP = 0x1C,IFT_ULTRA = 0x1D,IFT_DS3 = 0x1E,IFT_SIP = 0x1F,IFT_FRELAY = 0x20,IFT_RS232 = 0x21,IFT_PARA = 0x22,IFT_ARCNET = 0x23,IFT_ARCNETPLUS = 0x24,IFT_ATM = 0x25,IFT_MIOX25 = 0x26,IFT_SONET = 0x27,IFT_X25PLE = 0x28,IFT_ISO88022LLC = 0x29,IFT_LOCALTALK = 0x2A,IFT_SMDSDXI = 0x2B,IFT_FRELAYDCE = 0x2C,IFT_V35 = 0x2D,IFT_HSSI = 0x2E,IFT_HIPPI = 0x2F,IFT_MODEM = 0x30,IFT_AAL5 = 0x31,IFT_SONETPATH = 0x32,IFT_SONETVT = 0x33,IFT_SMDSICIP = 0x34,IFT_PROPVIRTUAL = 0x35,IFT_PROPMUX = 0x36,};
enum MACRO_IFTUN {IFTUN_SECINFOLEN = 8,IFTUN_VERSION = 1,IFTUN_SRC = 1,IFTUN_DST = 2,IFTUN_SECURITY = 4,};
enum MACRO_IF_SCSI {IF_SCSI = 0x0,IF_FLOPPY = 0x1,IF_PCMCIA = 0x2,};
enum MACRO_IGMP {IGMP_MINLEN = 8,IGMP_MEMBERSHIP_QUERY = 17,IGMP_V1_MEMBERSHIP_REPORT = 18,IGMP_V2_MEMBERSHIP_REPORT = 22,IGMP_V2_LEAVE_GROUP = 23,IGMP_DVMRP = 19,IGMP_PIM = 20,IGMP_MTRACE_RESP = 30,IGMP_MTRACE = 31,IGMP_MAX_HOST_REPORT_DELAY = 10,IGMP_TIMER_SCALE = 10,IGMP_HOST_MEMBERSHIP_QUERY = 17,IGMP_HOST_MEMBERSHIP_REPORT = 18,IGMP_HOST_NEW_MEMBERSHIP_REPORT = 22,IGMP_HOST_LEAVE_MESSAGE = 23,IGMP_SLOWTIMO_INTERVAL = 10000,};
enum MACRO_IGMPMSG {IGMPMSG_NOCACHE = 1,IGMPMSG_WRONGVIF = 2,IGMPMSG_WHOLEPKT = 3,};
enum MACRO_IGN {IGN_PID = -1,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,PARMRK = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IUCLC = 0x200,IXON = 0x400,IXANY = 0x800,IXOFF = 0x1000,IMAXBEL = 0x2000,DOSMODE = 0x8000,};
enum MACRO_IL {IL = 0x50,};
enum MACRO_ILD {ILD_INIT = 0x1,ILD_UNINIT = 0x2,ILD_MAC = 0x3,ILD_TCAPSTART = 0x7,ILD_TCAPSTOP = 0x8,ILD_GCONFIG = 0xA,ILD_PPA_INFO = 0xD,ILD_PPA_CONFIG = 0xF,ILD_LLC2 = 0x49000008,};
enum MACRO_ILDTCAPSIZE {ILDTCAPSIZE = 64,ILDTRCTABSIZ = 512,};
enum MACRO_ILL {ILL_ILLOPC = 1,ILL_ILLOPN = 2,ILL_ILLADR = 3,ILL_ILLTRP = 4,ILL_PRVOPC = 5,ILL_PRVREG = 6,ILL_COPROC = 7,ILL_BADSTK = 8,};
enum MACRO_ILL_BD {ILL_BD = -4,};
enum MACRO_ILL_FRAG {ILL_FRAG_HASH_TBL_COUNT = 64,};
enum MACRO_IMPLINK {IMPLINK_IP = 155,IMPLINK_LOWEXPER = 156,IMPLINK_HIGHEXPER = 158,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_LOOPBACK = 0x7F000001,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_UNSPEC_GROUP = 0xE0000000,INADDR_ALLHOSTS_GROUP = 0xE0000001,INADDR_ALLRTRS_GROUP = 0xE0000002,INADDR_MAX_LOCAL_GROUP = 0xE00000FF,};
enum MACRO_INCOMPATIBLE {INCOMPATIBLE = 0x10,};
enum MACRO_INCORRECT {INCORRECT_LENGTH = 0x13,};
enum MACRO_INDIR {INDIR_MASK = 192,};
enum MACRO_INET {INET_TCP = 6,};
enum MACRO_INET_IP {INET_IP = 0,};
enum MACRO_INET_UDP {INET_UDP = 17,};
enum MACRO_INF {INF = 1000000000,};
enum MACRO_INFPSZ {INFPSZ = -1,};
enum MACRO_INFTIM {INFTIM = -1,};
enum MACRO_INHERIT {INHERIT_VFS_FLAG = 9,};
enum MACRO_INI {INI_CAN_DISCON = 0x40,};
enum MACRO_INIT {INIT_ALL = -1,};
enum MACRO_INKEYB {INKEYB = 0,INUARTA = 1,INUARTB = 2,};
enum MACRO_INOFLCK {INOFLCK = 0x1,SETFLCK = 0x2,SLPFLCK = 0x4,RCMDLCK = 0x8,PCMDLCK = 0x10,};
enum MACRO_INP {INP_QSIZE = 32,};
enum MACRO_INPLOOKUP {INPLOOKUP_WILDCARD = 1,INPLOOKUP_SETLOCAL = 2,};
enum MACRO_INSTR {INSTR_VALID = 0x2,};
enum MACRO_INT {INT_MIN = -2147483648,INT_MAX = 2147483647,};
enum MACRO_INT16SZ {INT16SZ = 2,INADDRSZ = 4,IN6ADDRSZ = 16,};
enum MACRO_INT32SZ {INT32SZ = 4,};
enum MACRO_INTLEVEL {INTLEVEL_SOFT = 0x10,INTLEVEL_ONBOARD = 0x20,INTLEVEL_SBUS = 0x30,};
enum MACRO_INTRPT {INTRPT = -1,};
enum MACRO_INT_NUM {STC_INT_NUM = 0,PPC_INT_NUM = 1,};
enum MACRO_INUARTC {INUARTC = 3,INUARTD = 4,};
enum MACRO_INVALID {INVALID_D_ID = 0x1,INVALID_S_ID = 0x2,};
enum MACRO_INVALID_LINK {INVALID_LINK_CONTROL = 0x8,INVALID_R_CTL = 0x9,INVALID_F_CTL = 0xA,INVALID_OX_ID = 0xB,INVALID_RX_ID = 0xC,INVALID_SEQ_ID = 0xD,INVALID_DF_CTL = 0xE,INVALID_SEQ_CNT = 0xF,INVALID_PARAMETER = 0x10,};
enum MACRO_INVERT {TXC_IS_INVERT = 5,RXC_IS_INVERT = 5,TRXD_NO_INVERT = 0,RXD_IS_INVERT = 1,TXD_IS_INVERT = 2,TRXD_IS_INVERT = 3,};
enum MACRO_IN_LOOPBACKNET {IN_LOOPBACKNET = 127,};
enum MACRO_IOC {IOC_VOID = 0x20000000,IOC_OUT = 0x40000000,IOC_IN = 0x80000000,IOC_INOUT = 0xC0000000,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0xFF,};
enum MACRO_IOCTYPE {IOCTYPE = 0xFF00,};
enum MACRO_IP {IP_OPTIONS = 1,IP_HDRINCL = 2,IP_TOS = 3,IP_TTL = 4,IP_RECVOPTS = 5,IP_RECVRETOPTS = 6,IP_RECVDSTADDR = 7,IP_RETOPTS = 8,IP_MULTICAST_IF = 16,IP_MULTICAST_TTL = 17,IP_MULTICAST_LOOP = 18,IP_ADD_MEMBERSHIP = 19,IP_DROP_MEMBERSHIP = 20,IP_SEC_OPT = 34,};
enum MACRO_IP6 {IP6_DL_SAP = 0x86DD,};
enum MACRO_IP6F {IP6F_OFF_MASK = 0xFFF8,IP6F_RESERVED_MASK = 0x6,IP6F_MORE_FRAG = 0x1,};
enum MACRO_IP6OPT {IP6OPT_TYPE_SKIP = 0x0,IP6OPT_TYPE_DISCARD = 0x40,IP6OPT_TYPE_FORCEICMP = 0x80,IP6OPT_TYPE_ICMP = 0xC0,IP6OPT_MUTABLE = 0x20,IP6OPT_PAD1 = 0x0,IP6OPT_PADN = 0x1,IP6OPT_JUMBO = 0xC2,IP6OPT_NSAP_ADDR = 0xC3,IP6OPT_TUNNEL_LIMIT = 0x4,IP6OPT_ROUTER_ALERT = 0x5,IP6OPT_BINDING_UPDATE = 0xC6,IP6OPT_BINDING_ACK = 0x7,IP6OPT_BINDING_REQ = 0x8,IP6OPT_HOME_ADDRESS = 0xC9,IP6OPT_EID = 0x8A,IP6OPT_JUMBO_LEN = 0x6,};
enum MACRO_IP6_ALERT {IP6_ALERT_MLD = 0x0,IP6_ALERT_RSVP = 0x1,IP6_ALERT_AN = 0x2,IP6_BUF_ACK = 0x80,IP6_BUF_HOME = 0x40,IP6_BUF_COA = 0x20,IP6_BUF_ROUTER = 0x10,};
enum MACRO_IPC {IPC_ALLOC = 0x8000,IPC_CREAT = 0x200,IPC_EXCL = 0x400,IPC_NOWAIT = 0x800,IPC_PRIVATE = 0x0,IPC_RMID = 0xA,IPC_SET = 0xB,IPC_STAT = 0xC,};
enum MACRO_IPCF {IPCF_CLOSING = 0x1,IPCF_CLOSE_DONE = 0x2,IPCF_OPENING = 0x4,IPCF_OPEN_DONE = 0x8,};
enum MACRO_IPD {IPD_SAPL = 0,IPD_MTP_ADDRL = 4,IPD_PTP_ADDRL = 0,IPD_MTU = 8232,IPD_LINKHDR = 4,IPD_MAX_PKTS = 10,IPD_IF_STATIC = -1,IPD_MINOR = 0,IPD_HOLDING_TIME = 10,IPD_MAXIFS = 64,IPD_MAXIPDCMS = 20,IPD_DLPI = 1,IPD_FLOWCTRL = 2,IPD_DDI = 4,IPD_DATA = 8,};
enum MACRO_IPE {IPE_FPESIZE = 8,};
enum MACRO_IPFRAGTTL {IPFRAGTTL = 60,};
enum MACRO_IPH {IPH_DF = 0x4000,IPH_MF = 0x2000,IPH_OFFSET = 0x1FFF,IPH_FRAG_HDR = 0x8000,};
enum MACRO_IPOPT {IPOPT_CONTROL = 0x0,IPOPT_RESERVED1 = 0x20,IPOPT_DEBMEAS = 0x40,IPOPT_RESERVED2 = 0x60,IPOPT_EOL = 0x0,IPOPT_NOP = 0x1,IPOPT_RR = 0x7,IPOPT_TS = 0x44,IPOPT_SECURITY = 0x82,IPOPT_LSRR = 0x83,IPOPT_SATID = 0x88,IPOPT_SSRR = 0x89,IPOPT_OPTVAL = 0x0,IPOPT_OLEN = 0x1,IPOPT_OFFSET = 0x2,IPOPT_MINOFF = 0x4,IPOPT_TS_TSONLY = 0x0,IPOPT_TS_TSANDADDR = 0x1,IPOPT_TS_PRESPEC = 0x2,IPOPT_SECUR_UNCLASS = 0x0,IPOPT_SECUR_CONFID = 0xF135,IPOPT_SECUR_EFTO = 0x789A,IPOPT_SECUR_MMMM = 0xBC4D,IPOPT_SECUR_RESTR = 0xAF13,IPOPT_SECUR_SECRET = 0xD788,IPOPT_SECUR_TOPSECRET = 0x6BC5,};
enum MACRO_IPOPT_POS {IPOPT_POS_VAL = 0,IPOPT_POS_LEN = 1,IPOPT_POS_OFF = 2,IPOPT_POS_OV_FLG = 3,IPOPT_MINOFF_SR = 4,IPOPT_MINOFF_IT = 5,IPOPT_MINLEN_IT = 5,IPOPT_IT_TIME = 0,IPOPT_IT_TIME_ADDR = 1,IPOPT_IT_SPEC = 3,IPOPT_IT_SPEC_BSD = 2,IPOPT_IT_TIMELEN = 4,};
enum MACRO_IPPORT {IPPORT_ECHO = 7,IPPORT_DISCARD = 9,IPPORT_SYSTAT = 11,IPPORT_DAYTIME = 13,IPPORT_NETSTAT = 15,IPPORT_FTP = 21,IPPORT_TELNET = 23,IPPORT_SMTP = 25,IPPORT_TIMESERVER = 37,IPPORT_NAMESERVER = 42,IPPORT_WHOIS = 43,IPPORT_MTP = 57,IPPORT_BOOTPS = 67,IPPORT_BOOTPC = 68,IPPORT_TFTP = 69,IPPORT_RJE = 77,IPPORT_FINGER = 79,IPPORT_TTYLINK = 87,IPPORT_SUPDUP = 95,IPPORT_EXECSERVER = 512,IPPORT_LOGINSERVER = 513,IPPORT_CMDSERVER = 514,IPPORT_EFSSERVER = 520,IPPORT_BIFFUDP = 512,IPPORT_WHOSERVER = 513,IPPORT_ROUTESERVER = 520,IPPORT_RESERVED = 1024,IPPORT_USERRESERVED = 5000,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_HOPOPTS = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_ENCAP = 4,IPPROTO_TCP = 6,IPPROTO_EGP = 8,IPPROTO_PUP = 12,IPPROTO_UDP = 17,IPPROTO_IDP = 22,IPPROTO_IPV6 = 41,IPPROTO_ROUTING = 43,IPPROTO_FRAGMENT = 44,IPPROTO_RSVP = 46,IPPROTO_ESP = 50,IPPROTO_AH = 51,IPPROTO_ICMPV6 = 58,IPPROTO_NONE = 59,IPPROTO_DSTOPTS = 60,IPPROTO_HELLO = 63,IPPROTO_ND = 77,IPPROTO_EON = 80,IPPROTO_PIM = 103,IPPROTO_RAW = 255,IPPROTO_MAX = 256,};
enum MACRO_IPSEC {IPSEC_PREF_NEVER = 0x1,IPSEC_PREF_REQUIRED = 0x2,IPSEC_PREF_UNIQUE = 0x4,};
enum MACRO_IPTOS {IPTOS_LOWDELAY = 0x10,IPTOS_THROUGHPUT = 0x8,IPTOS_RELIABILITY = 0x4,IPTOS_PREC_NETCONTROL = 0xE0,IPTOS_PREC_INTERNETCONTROL = 0xC0,IPTOS_PREC_CRITIC_ECP = 0xA0,IPTOS_PREC_FLASHOVERRIDE = 0x80,IPTOS_PREC_FLASH = 0x60,IPTOS_PREC_IMMEDIATE = 0x40,IPTOS_PREC_PRIORITY = 0x20,IPTOS_PREC_ROUTINE = 0x0,};
enum MACRO_IPTTLDEC {IPTTLDEC = 1,};
enum MACRO_IPV4 {IPV4_VERSION = 4,IP_VERSION = 4,};
enum MACRO_IPV6 {IPV6_FLOWINFO_FLOWLABEL = 0xFFFFF,IPV6_FLOWINFO_TCLASS = 0xFF00000,};
enum MACRO_IPV6_PAD1 {IPV6_PAD1_OPT = 0,};
enum MACRO_IPV6_RTHDR {IPV6_RTHDR_TYPE_0 = 0,IPV6_UNICAST_HOPS = 5,IPV6_MULTICAST_IF = 6,IPV6_MULTICAST_HOPS = 7,IPV6_MULTICAST_LOOP = 8,IPV6_JOIN_GROUP = 9,IPV6_LEAVE_GROUP = 10,IPV6_ADD_MEMBERSHIP = 9,IPV6_DROP_MEMBERSHIP = 10,IPV6_PKTINFO = 11,IPV6_HOPLIMIT = 12,IPV6_NEXTHOP = 13,IPV6_HOPOPTS = 14,IPV6_DSTOPTS = 15,IPV6_RTHDR = 16,IPV6_RTHDRDSTOPTS = 17,IPV6_RECVPKTINFO = 18,IPV6_RECVHOPLIMIT = 19,IPV6_RECVHOPOPTS = 20,IPV6_RECVDSTOPTS = 21,IPV6_RECVRTHDR = 22,IPV6_RECVRTHDRDSTOPTS = 23,IPV6_CHECKSUM = 24,IPV6_BOUND_IF = 65,IPV6_UNSPEC_SRC = 66,};
enum MACRO_IPVERSION {IPVERSION = 4,};
enum MACRO_IP_0 {IP = 244,};
enum MACRO_IP_ADD {IP_ADD_PROXY_ADDR = 0x40,IP_BOUND_IF = 0x41,IP_UNSPEC_SRC = 0x42,IP_REUSEADDR = 0x104,IP_DONTROUTE = 0x105,IP_BROADCAST = 0x106,IP_DEFAULT_MULTICAST_TTL = 0x1,IP_DEFAULT_MULTICAST_LOOP = 0x1,};
enum MACRO_IP_ADDR {IP_ADDR_TYPE = 1,};
enum MACRO_IP_ARP {IP_ARP_PROTO_TYPE = 0x800,};
enum MACRO_IP_DF {IP_DF = 0x4000,IP_MF = 0x2000,IP_MAXPACKET = 0xFFFF,};
enum MACRO_IP_FORWARD {IP_FORWARD_NEVER = 0,IP_FORWARD_ALWAYS = 1,};
enum MACRO_IP_HOST : __int64 {IP_HOST_MASK = 0xFFFFFFFF,};
enum MACRO_IP_MAX {IP_MAX_HW_LEN = 40,IP_LOOPBACK_MTU = 8192,IP_DL_SAP = 2048,};
enum MACRO_IP_MSS {IP_MSS = 576,};
enum MACRO_IP_SIMPLE {IP_SIMPLE_HDR_LENGTH_IN_WORDS = 5,IP_SIMPLE_HDR_LENGTH = 20,IP_MAX_HDR_LENGTH = 60,IP_MIN_MTU = 68,IP_SIMPLE_HDR_VERSION = 69,IP_IOCTL = 26992,IP_IOC_IRE_DELETE = 4,IP_IOC_IRE_DELETE_NO_REPLY = 5,IP_IOC_IRE_ADVISE_NO_REPLY = 6,IP_IOC_RTS_REQUEST = 7,};
enum MACRO_IRE {IRE_BROADCAST = 0x1,IRE_DEFAULT = 0x2,IRE_LOCAL = 0x4,IRE_LOOPBACK = 0x8,IRE_PREFIX = 0x10,IRE_CACHE = 0x20,IRE_IF_NORESOLVER = 0x40,IRE_IF_RESOLVER = 0x80,IRE_HOST = 0x100,IRE_HOST_REDIRECT = 0x200,IRE_INTERFACE = 0xC0,IRE_OFFSUBNET = 0x312,IRE_CACHETABLE = 0x2D,IRE_FORWARDTABLE = 0x3D2,IRE_MARK_CONDEMNED = 0x1,};
enum MACRO_IREAD {IREAD = 0x100,};
enum MACRO_IRE_FLUSH {IRE_FLUSH_DELETE = 0,IRE_FLUSH_ADD = 1,};
enum MACRO_IS {IS_PTSTTY = 0x4,};
enum MACRO_ISDN {ISDN_PH_ACTIVATE_REQ = 536887562,ISDN_MPH_DEACTIVATE_REQ = 536887563,ISDN_PARAM_POWER_OFF = 0,ISDN_PARAM_POWER_ON = 1,ISDN_PROTO_MAGIC = 1769170030,};
enum MACRO_ISGID {ISGID = 0x400,};
enum MACRO_ISIG {ISIG = 0x1,ICANON = 0x2,XCASE = 0x4,ECHO = 0x8,ECHOE = 0x10,ECHOK = 0x20,ECHONL = 0x40,NOFLSH = 0x80,TOSTOP = 0x100,ECHOCTL = 0x200,ECHOPRT = 0x400,ECHOKE = 0x800,DEFECHO = 0x1000,FLUSHO = 0x2000,PENDIN = 0x4000,IEXTEN = 0x8000,};
enum MACRO_ISO {ISO_TP = 0x100,};
enum MACRO_ISO_DIR {ISO_DIR_NAMELEN = 31,ISO_FILE_NAMELEN = 31,};
enum MACRO_ISO_FIRST {ISO_FIRST = 512,ISO_LAST = 767,};
enum MACRO_ISO_ID {ISO_ID_STRLEN = 5,ISO_ID_VER = 1,ISO_FILE_STRUCT_ID_VER = 1,ISO_SYS_ID_STRLEN = 32,ISO_VOL_ID_STRLEN = 32,ISO_VOL_SET_ID_STRLEN = 128,ISO_PUB_ID_STRLEN = 128,ISO_PREP_ID_STRLEN = 128,ISO_APPL_ID_STRLEN = 128,ISO_COPYR_ID_STRLEN = 37,ISO_ABSTR_ID_STRLEN = 37,ISO_SHORT_DATE_LEN = 7,ISO_DATE_LEN = 17,};
enum MACRO_ISO_SECTOR {ISO_SECTOR_SIZE = 2048,ISO_SECTOR_SHIFT = 11,ISO_SYSAREA_SEC = 0,ISO_VOLDESC_SEC = 16,};
enum MACRO_ISP {ISP_NORMAL = 0x0,ISP_RESERVE = 0x1,};
enum MACRO_ISPEED {ISPEED = 13,};
enum MACRO_ISPEED_SVID {ISPEED_SVID = 7,};
enum MACRO_ISPIPE {ISPIPE = 0x1,FIFOSEND = 0x2,FIFOOPEN = 0x4,FIFOCLOSE = 0x8,FIFOCONNLD = 0x10,FIFOFAST = 0x20,FIFOWANTR = 0x40,FIFOWANTW = 0x80,FIFOSETSIG = 0x100,FIFOHIWATW = 0x200,FIFORWBUSY = 0x400,FIFOPOLLW = 0x800,FIFOPOLLR = 0x1000,FIFOISOPEN = 0x2000,FIFOSYNC = 0x4000,FIFOWOCR = 0x8000,FIFOROCR = 0x10000,};
enum MACRO_ISP_MBOX {ISP_MBOX_EVENT_MASK = 0xF000,ISP_MBOX_EVENT_ASYNCH = 0x8000,ISP_MBOX_EVENT_CMD = 0x4000,ISP_MBOX_STATUS_MASK = 0xFF,ISP_MBOX_STATUS_OK = 0x0,ISP_MBOX_STATUS_INVALID_CMD = 0x1,ISP_MBOX_STATUS_INVALID_PARAMS = 0x2,ISP_MBOX_STATUS_BOOT_ERR = 0x3,ISP_MBOX_STATUS_FIRMWARE_ERR = 0x4,ISP_MBOX_ASYNC_RESET = 0x1,ISP_MBOX_ASYNC_ERR = 0x2,ISP_MBOX_ASYNC_REQ_DMA_ERR = 0x3,ISP_MBOX_ASYNC_RESP_DMA_ERR = 0x4,ISP_MBOX_ASYNC_WAKEUP = 0x5,ISP_MBOX_ASYNC_INT_RESET = 0x6,ISP_MBOX_ASYNC_INT_DEV_RESET = 0x9,ISP_MBOX_ASYNC_INT_ABORT = 0x8,ISP_MBOX_ASYNC_OVR_RESET = 0xD,ISP_MBOX_ASYNC_FASTPOST = 0x20,ISP_MBOX_BUSY = 0x4,ISP_AEN_RESET = 0xFFFFFFFF,ISP_AEN_SUCCESS = 0x1,ISP_AEN_FAILURE = 0x0,ISP_MBOX_CMD_NOP = 0x0,ISP_MBOX_CMD_ABOUT_PROM = 0x8,ISP_MBOX_CMD_CHECKSUM_FIRMWARE = 0xE,ISP_MBOX_CMD_STOP_FW = 0x14,ISP_MBOX_CMD_LOAD_RAM = 0x1,ISP_MBOX_CMD_START_FW = 0x2,ISP_MBOX_CMD_DUMP_RAM = 0x3,ISP_MBOX_CMD_LOAD_WORD = 0x4,ISP_MBOX_CMD_DUMP_WORD = 0x5,ISP_MBOX_CMD_WRAP_MAILBOXES = 0x6,ISP_MBOX_CMD_CHECKSUM = 0x7,ISP_MBOX_CMD_INIT_REQUEST_QUEUE = 0x10,ISP_MBOX_CMD_INIT_RESPONSE_QUEUE = 0x11,ISP_MBOX_CMD_SCSI_CMD = 0x12,ISP_MBOX_CMD_WAKE_UP = 0x13,ISP_MBOX_CMD_ABORT_IOCB = 0x15,ISP_MBOX_CMD_ABORT_DEVICE = 0x16,ISP_MBOX_CMD_ABORT_TARGET = 0x17,ISP_MBOX_CMD_BUS_RESET = 0x18,ISP_MBOX_CMD_STOP_QUEUE = 0x19,ISP_MBOX_CMD_START_QUEUE = 0x1A,ISP_MBOX_CMD_STEP_QUEUE = 0x1B,ISP_MBOX_CMD_ABORT_QUEUE = 0x1C,ISP_MBOX_CMD_GET_DEVICE_QUEUE_STATE = 0x1D,ISP_MBOX_CMD_GET_ISP_STAT = 0x1E,ISP_MBOX_CMD_GET_FIRMWARE_STATUS = 0x1F,ISP_MBOX_CMD_GET_SXP_CONFIG = 0x2F,ISP_MBOX_CMD_SET_SXP_CONFIG = 0x3F,ISP_MBOX_CMD_GET_SCSI_ID = 0x20,ISP_MBOX_CMD_SET_SCSI_ID = 0x30,ISP_MBOX_CMD_GET_SEL_TIMEOUT = 0x21,ISP_MBOX_CMD_SET_SEL_TIMEOUT = 0x31,ISP_MBOX_CMD_GET_RETRY_ATTEMPTS = 0x22,ISP_MBOX_CMD_SET_RETRY_ATTEMPTS = 0x32,ISP_MBOX_CMD_GET_AGE_LIMIT = 0x23,ISP_MBOX_CMD_SET_AGE_LIMIT = 0x33,ISP_MBOX_CMD_GET_CLOCK_RATE = 0x24,ISP_MBOX_CMD_SET_CLOCK_RATE = 0x34,ISP_MBOX_CMD_GET_PULL_UPS = 0x25,ISP_MBOX_CMD_SET_PULL_UPS = 0x35,ISP_MBOX_CMD_GET_DATA_TRANS_TIME = 0x26,ISP_MBOX_CMD_SET_DATA_TRANS_TIME = 0x36,ISP_MBOX_CMD_GET_BUS_INTERFACE = 0x27,ISP_MBOX_CMD_SET_BUS_INTERFACE = 0x37,ISP_MBOX_CMD_GET_TARGET_CAP = 0x28,ISP_MBOX_CMD_SET_DELAY_BDR = 0x3B,ISP_MBOX_CMD_SET_TARGET_CAP = 0x38,ISP_MBOX_CMD_GET_DEVICE_QUEUE_PARAMS = 0x29,ISP_MBOX_CMD_SET_DEVICE_QUEUE_PARAMS = 0x39,ISP_MBOX_CMD_GET_QFULL_RETRIES = 0x4E,ISP_MBOX_CMD_SET_QFULL_RETRIES = 0x5E,ISP_MBOX_CMD_GET_QFULL_RETRY_INTERVAL = 0x4F,ISP_MBOX_CMD_SET_QFULL_RETRY_INTERVAL = 0x5F,ISP_MBOX_CMD_SET_FW_FEATURES = 0x4A,ISP_PCI_MBOX_CMD_RET_BIOS_BLK_ADDR = 0x40,ISP_PCI_MBOX_CMD_WRITE_4_RAM_WORDS = 0x41,ISP_PCI_MBOX_CMD_EXEC_BIOS_IOCB = 0x42,ISP_MBOX_CMD_SET_DATA_OVR_RECOV_MODE = 0x5A,ISP_CAP_DISCONNECT = 0x8000,ISP_CAP_PARITY = 0x4000,ISP_CAP_WIDE = 0x2000,ISP_CAP_SYNC = 0x1000,ISP_CAP_TAG = 0x800,ISP_CAP_AUTOSENSE = 0x400,ISP_CAP_ERRSTOP = 0x200,ISP_CAP_ERRSYNC = 0x100,ISP_20M_SYNC_PERIOD = 0xC,ISP_20M_SYNC_OFFSET = 0x8,ISP_20M_SYNC_PARAMS = 0x80C,ISP_10M_SYNC_PERIOD = 0x19,ISP_10M_SYNC_OFFSET = 0xC,ISP_10M_SYNC_PARAMS = 0xC19,ISP_8M_SYNC_PERIOD = 0x25,ISP_8M_SYNC_OFFSET = 0xC,ISP_8M_SYNC_PARAMS = 0xC25,ISP_5M_SYNC_PERIOD = 0x32,ISP_5M_SYNC_OFFSET = 0xC,ISP_5M_SYNC_PARAMS = 0xC32,ISP_4M_SYNC_PERIOD = 0x41,ISP_4M_SYNC_OFFSET = 0xC,ISP_4M_SYNC_PARAMS = 0xC41,ISP_MAX_MBOX_REGS = 0x8,ISP_MBOX_CMD_TIMEOUT = 0xA,ISP_MBOX_CMD_RETRY_CNT = 0x1,ISP_MBOX_CMD_FLAGS_COMPLETE = 0x1,ISP_MBOX_CMD_FLAGS_Q_NOT_INIT = 0x2,ISP_MBOX_CMD_BUSY_WAIT_TIME = 0x1,ISP_MBOX_CMD_BUSY_POLL_DELAY_TIME = 0x64,ISP_BUS_BIU_REGS_OFF = 0x0,ISP_SBUS_MBOX_REGS_OFF = 0x80,ISP_PCI_MBOX_REGS_OFF = 0x70,ISP_SBUS_SXP_REGS_OFF = 0x200,ISP_PCI_SXP_REGS_OFF = 0x80,ISP_SBUS_RISC_REGS_OFF = 0x400,ISP_PCI_RISC_REGS_OFF = 0x80,ISP_SBUS_REG_NUMBER = 0x0,ISP_PCI_REG_NUMBER = 0x2,ISP_BUS_CONF0_HW_MASK = 0xF,ISP_SBUS_CONF1_PARITY = 0x100,ISP_SBUS_CONF1_FCODE_MASK = 0xF0,ISP_PCI_CONF1_FIFO_128 = 0x40,ISP_PCI_CONF1_FIFO_64 = 0x30,ISP_PCI_CONF1_FIFO_32 = 0x20,ISP_PCI_CONF1_FIFO_16 = 0x10,ISP_BUS_CONF1_BURST_ENABLE = 0x4,ISP_SBUS_CONF1_FIFO_64 = 0x3,ISP_SBUS_CONF1_FIFO_32 = 0x2,ISP_SBUS_CONF1_FIFO_16 = 0x1,ISP_SBUS_CONF1_FIFO_8 = 0x0,ISP_SBUS_CONF1_BURST8 = 0x8,ISP_PCI_CONF1_SXP = 0x8,ISP_BUS_ICR_ENABLE_DMA_INT = 0x20,ISP_BUS_ICR_ENABLE_CDMA_INT = 0x10,ISP_BUS_ICR_ENABLE_SXP_INT = 0x8,ISP_BUS_ICR_ENABLE_RISC_INT = 0x4,ISP_BUS_ICR_ENABLE_ALL_INTS = 0x2,ISP_BUS_ICR_DISABLE_ALL_INTS = 0x0,ISP_BUS_ICR_SOFT_RESET = 0x1,ISP_BUS_ISR_DMA_INT = 0x20,ISP_BUS_ISR_CDMA_INT = 0x10,ISP_BUS_ISR_SXP_INT = 0x8,ISP_BUS_ISR_RISC_INT = 0x4,ISP_BUS_ISR_INT_PENDING = 0x2,ISP_BUS_SEMA_STATUS = 0x2,ISP_BUS_SEMA_LOCK = 0x1,ISP_DMA_CONF_ENABLE_SXP_DMA = 0x8,ISP_DMA_CONF_ENABLE_INTS = 0x4,ISP_DMA_CONF_ENABLE_BURST = 0x2,ISP_DMA_CONF_DMA_DIRECTION = 0x1,ISP_DMA_CON_SUSPEND_CHAN = 0x10,ISP_DMA_CON_CLEAR_CHAN = 0x8,ISP_DMA_CON_CLEAR_FIFO = 0x4,ISP_DMA_CON_RESET_INT = 0x2,ISP_DMA_CON_STROBE = 0x1,ISP_SBUS_DMA_STATUS_PIPE_MASK = 0xC0,ISP_SBUS_DMA_STATUS_CHAN_MASK = 0x30,ISP_SBUS_DMA_STATUS_BUS_PARITY = 0x8,ISP_SBUS_DMA_STATUS_BUS_ERR = 0x4,ISP_SBUS_DMA_STATUS_TERM_COUNT = 0x2,ISP_SBUS_DMA_STATUS_INTERRUPT = 0x1,ISP_PCI_DMA_STATUS_INTERRUPT = 0x8000,ISP_PCI_DMA_STATUS_RETRY_STAT = 0x4000,ISP_PCI_DMA_STATUS_CHAN_MASK = 0x3000,ISP_PCI_DMA_STATUS_FIFO_OVR = 0x100,ISP_PCI_DMA_STATUS_FIFO_UDR = 0x80,ISP_PCI_DMA_STATUS_BUS_ERR = 0x40,ISP_PCI_DMA_STATUS_BUS_PARITY = 0x20,ISP_PCI_DMA_STATUS_CLR_PEND = 0x10,ISP_PCI_DMA_STATUS_TERM_COUNT = 0x8,ISP_PCI_DMA_STATUS_DMA_SUSP = 0x4,ISP_PCI_DMA_STATUS_PIPE_MASK = 0x3,ISP_SBUS_DMA_PIPE_FULL = 0xC0,ISP_SBUS_DMA_PIPE_OVERRUN = 0x80,ISP_SBUS_DMA_PIPE_STAGE1 = 0x40,ISP_PCI_DMA_PIPE_FULL = 0x3,ISP_PCI_DMA_PIPE_OVERRUN = 0x2,ISP_PCI_DMA_PIPE_STAGE1 = 0x1,ISP_DMA_PIPE_EMPTY = 0x0,ISP_SBUS_DMA_CHAN_SUSPEND = 0x30,ISP_SBUS_DMA_CHAN_TRANSFER = 0x20,ISP_SBUS_DMA_CHAN_ACTIVE = 0x10,ISP_PCI_DMA_CHAN_TRANSFER = 0x3000,ISP_PCI_DMA_CHAN_SUSPEND = 0x2000,ISP_PCI_DMA_CHAN_ACTIVE = 0x1000,ISP_DMA_CHAN_IDLE = 0x0,ISP_DMA_FIFO_STATUS_OVERRUN = 0x200,ISP_DMA_FIFO_STATUS_UNDERRUN = 0x100,ISP_SBUS_DMA_FIFO_COUNT_MASK = 0x7F,ISP_PCI_DMA_FIFO_COUNT_MASK = 0xFF,ISP_SXP_CONF1_ASYNCH_SETUP = 0xF000,ISP_SXP_CONF1_SELECTION_UNIT = 0x0,ISP_SXP_CONF1_SELECTION_TIMEOUT = 0x600,ISP_SXP_CONF1_CLOCK_FACTOR = 0xE0,ISP_SXP_CONF1_SCSI_ID = 0xF,ISP_SXP_CONF2_DISABLE_FILTER = 0x40,ISP_SXP_CONF2_REQ_ACK_PULLUPS = 0x20,ISP_SXP_CONF2_DATA_PULLUPS = 0x10,ISP_SXP_CONF2_CONFIG_AUTOLOAD = 0x8,ISP_SXP_CONF2_RESELECT = 0x2,ISP_SXP_CONF2_SELECT = 0x1,ISP_SXP_INT_PARITY_ERR = 0x8000,ISP_SXP_INT_GROSS_ERR = 0x4000,ISP_SXP_INT_FUNCTION_ABORT = 0x2000,ISP_SXP_INT_CONDITION_FAILED = 0x1000,ISP_SXP_INT_FIFO_EMPTY = 0x800,ISP_SXP_INT_BUF_COUNTER_ZERO = 0x400,ISP_SXP_INT_XFER_ZERO = 0x200,ISP_SXP_INT_INT_PENDING = 0x80,ISP_SXP_INT_CMD_RUNNING = 0x40,ISP_SXP_INT_INT_RETURN_CODE = 0xF,ISP_SXP_GROSS_OFFSET_RESID = 0x40,ISP_SXP_GROSS_OFFSET_UNDERFLOW = 0x20,ISP_SXP_GROSS_OFFSET_OVERFLOW = 0x10,ISP_SXP_GROSS_FIFO_UNDERFLOW = 0x8,ISP_SXP_GROSS_FIFO_OVERFLOW = 0x4,ISP_SXP_GROSS_WRITE_ERR = 0x2,ISP_SXP_GROSS_ILLEGAL_INST = 0x1,ISP_SXP_EXCEPT_USER_0 = 0x8000,ISP_SXP_EXCEPT_USER_1 = 0x4000,ISP_PCI_SXP_EXCEPT_SCAM = 0x400,ISP_SXP_EXCEPT_BUS_FREE = 0x200,ISP_SXP_EXCEPT_TARGET_ATN = 0x100,ISP_SXP_EXCEPT_RESELECTED = 0x80,ISP_SXP_EXCEPT_SELECTED = 0x40,ISP_SXP_EXCEPT_ARBITRATION = 0x20,ISP_SXP_EXCEPT_GROSS_ERR = 0x10,ISP_SXP_EXCEPT_BUS_RESET = 0x8,ISP_SXP_ORIDE_EXT_TRIGGER = 0x8000,ISP_SXP_ORIDE_STEP = 0x4000,ISP_SXP_ORIDE_BREAKPOINT = 0x2000,ISP_SXP_ORIDE_PIN_WRITE = 0x1000,ISP_SXP_ORIDE_FORCE_OUTPUTS = 0x800,ISP_SXP_ORIDE_LOOPBACK = 0x400,ISP_SXP_ORIDE_PARITY_TEST = 0x200,ISP_SXP_ORIDE_TRISTATE_ENA_PINS = 0x100,ISP_SXP_ORIDE_TRISTATE_PINS = 0x80,ISP_SXP_ORIDE_FIFO_RESET = 0x8,ISP_SXP_ORIDE_CMD_TERMINATE = 0x4,ISP_SXP_ORIDE_RESET_REG = 0x2,ISP_SXP_ORIDE_RESET_MODULE = 0x1,ISP_SXP_RESET_BUS_CMD = 0x300B,ISP_SXP_EXCEPT_1 = 0x2,ISP_SXP_EXCEPT_0 = 0x1,ISP_SXP_SELECTING_ID = 0xF00,ISP_SXP_SELECT_ID = 0xF,ISP_SXP_DCONF1_SYNC_HOLD = 0x7000,ISP_SXP_DCONF1_SYNC_SETUP = 0xF00,ISP_SXP_DCONF1_SYNC_OFFSET = 0xF,ISP_SXP_DCONF2_FLAGS_MASK = 0xF000,ISP_SXP_DCONF2_WIDE = 0x400,ISP_SXP_DCONF2_PARITY = 0x200,ISP_SXP_DCONF2_BLOCK_MODE = 0x100,ISP_SXP_DCONF2_ASSERTION_MASK = 0x7,ISP_SXP_PHASE_STATUS_PTR = 0x1000,ISP_SXP_PHASE_MSG_IN_PTR = 0x700,ISP_SXP_PHASE_COM_PTR = 0xF0,ISP_SXP_PHASE_MSG_OUT_PTR = 0x7,ISP_SXP_FIFO_TOP_RESID = 0x8000,ISP_SXP_FIFO_ACK_RESID = 0x4000,ISP_SXP_FIFO_COUNT_MASK = 0x1C,ISP_SXP_FIFO_BOTTOM_RESID = 0x1,ISP_SXP_PINS_CON_PHASE = 0x8000,ISP_SXP_PINS_CON_PARITY_HI = 0x400,ISP_SXP_PINS_CON_PARITY_LO = 0x200,ISP_SXP_PINS_CON_REQ = 0x100,ISP_SXP_PINS_CON_ACK = 0x80,ISP_SXP_PINS_CON_RST = 0x40,ISP_SXP_PINS_CON_BSY = 0x20,ISP_SXP_PINS_CON_SEL = 0x10,ISP_SXP_PINS_CON_ATN = 0x8,ISP_SXP_PINS_CON_MSG = 0x4,ISP_SXP_PINS_CON_CD = 0x2,ISP_SXP_PINS_CON_IO = 0x1,ISP_SXP_SCSI_BUS_RESET_HOLD_TIME = 0xFA,ISP_SXP_PHASE_MASK = 0x7,ISP_SXP_PHASE_DATA_OUT = 0x0,ISP_SXP_PHASE_DATA_IN = 0x1,ISP_SXP_PHASE_COMMAND = 0x2,ISP_SXP_PHASE_STATUS = 0x3,ISP_SXP_PHASE_MSG_OUT = 0x6,ISP_SXP_PHASE_MSG_IN = 0x7,ISP_SXP_BUS_BUSY = 0x30,ISP_SXP_PINS_DIFF_SENSE = 0x200,ISP_SXP_PINS_DIFF_MODE = 0x100,ISP_SXP_PINS_DIFF_ENABLE_OUTPUT = 0x80,ISP_SXP_PINS_DIFF_PINS_MASK = 0x7C,ISP_SXP_PINS_DIFF_TARGET = 0x2,ISP_SXP_PINS_DIFF_INITIATOR = 0x1,ISP_RISC_PSR_FORCE_TRUE = 0x8000,ISP_RISC_PSR_LOOP_COUNT_DONE = 0x4000,ISP_RISC_PSR_RISC_INT = 0x2000,ISP_RISC_PSR_TIMER_ROLLOVER = 0x1000,ISP_RISC_PSR_ALU_OVERFLOW = 0x800,ISP_RISC_PSR_ALU_MSB = 0x400,ISP_RISC_PSR_ALU_CARRY = 0x200,ISP_RISC_PSR_ALU_ZERO = 0x100,ISP_RISC_PSR_DMA_INT = 0x10,ISP_RISC_PSR_SXP_INT = 0x8,ISP_RISC_PSR_HOST_INT = 0x4,ISP_RISC_PSR_INT_PENDING = 0x2,ISP_RISC_PSR_FORCE_FALSE = 0x1,ISP_RISC_PCR_NOP = 0x0,ISP_RISC_PCR_RESTORE_PCR = 0x1000,ISP_RISC_MTR_PAGE1_DEFAULT = 0x1200,ISP_RISC_MTR_PAGE0_DEFAULT = 0x12,ISP_HCCR_CMD_NOP = 0x0,ISP_HCCR_CMD_RESET = 0x1000,ISP_HCCR_CMD_PAUSE = 0x2000,ISP_HCCR_CMD_RELEASE = 0x3000,ISP_HCCR_CMD_STEP = 0x4000,ISP_HCCR_CMD_SET_HOST_INT = 0x5000,ISP_HCCR_CMD_CLEAR_HOST_INT = 0x6000,ISP_HCCR_CMD_CLEAR_RISC_INT = 0x7000,ISP_HCCR_CMD_BREAKPOINT = 0x8000,ISP_PCI_HCCR_CMD_BIOS = 0x9000,ISP_PCI_HCCR_CMD_PARITY = 0xA000,ISP_PCI_HCCR_CMD_PARITY_ERR = 0xE000,ISP_HCCR_CMD_TEST_MODE = 0xF000,ISP_PCI_HCCR_PARITY = 0x400,ISP_PCI_HCCR_PARITY_ENABLE_1 = 0x200,ISP_PCI_HCCR_PARITY_ENABLE_0 = 0x100,ISP_HCCR_HOST_INT = 0x80,ISP_HCCR_RESET = 0x40,ISP_HCCR_PAUSE = 0x20,ISP_HCCR_BREAKPOINT_EXT = 0x10,ISP_HCCR_BREAKPOINT_1 = 0x8,ISP_HCCR_BREAKPOINT_0 = 0x4,ISP_PCI_HCCR_BREAKPOINT_INT = 0x2,ISP_PCI_HCCR_BIOS = 0x1,};
enum MACRO_ISUID {ISUID = 0x800,};
enum MACRO_ISVTX {ISVTX = 0x200,};
enum MACRO_IS_SYSCLK {TXC_IS_SYSCLK = 4,RXC_IS_SYSCLK = 4,};
enum MACRO_ITIMER {ITIMER_REAL = 0,ITIMER_VIRTUAL = 1,ITIMER_PROF = 2,ITIMER_REALPROF = 3,};
enum MACRO_IUPD {IUPD = 0x1,IACC = 0x2,IMOD = 0x4,ICHG = 0x8,INOACC = 0x10,IMODTIME = 0x20,IREF = 0x40,ISYNC = 0x80,IFASTSYMLNK = 0x100,IMODACC = 0x200,IATTCHG = 0x400,IBDWRITE = 0x800,ISTALE = 0x1000,IDEL = 0x2000,IDIRECTIO = 0x4000,};
enum MACRO_IWRITE {IWRITE = 0x80,};
enum MACRO_I_IFLAGS {I_IFLAGS = 0,I_CFLAGS = 852157,};
enum MACRO_I_STRFT {I_STRFT = 0x5328,I_STRFTON = 0x5329,I_STRFTOFF = 0x532A,I_STRFTSTR = 0x532B,I_STRFTALL = 0x532C,I_STRFTZERO = 0x532D,};
enum MACRO_I_SYNC {I_SYNC = 1,I_DSYNC = 2,I_ASYNC = 0,I_FREE = 1,I_DIR = 2,I_IBLK = 4,I_CHEAP = 8,I_SHAD = 16,I_QUOTA = 32,};
enum MACRO_I_TRCLOG {I_TRCLOG = 19457,I_ERRLOG = 19458,I_CONSLOG = 19459,};
enum MACRO_JAGENT {JAGENT = 27145,};
enum MACRO_JBLOG {JBLOG = 6,NAMESZ = 8,LBUFMAX = 100,};
enum MACRO_JBOOT {JBOOT = 27137,};
enum MACRO_JMPX {JMPX = 27139,};
enum MACRO_JTERM {JTERM = 27138,};
enum MACRO_JTIMOM {JTIMOM = 27142,};
enum MACRO_JTRUN {JTRUN = 27146,};
enum MACRO_JTYPE {JTYPE = 27136,};
enum MACRO_JUSTIFY {JUSTIFY_LEFT = 1,JUSTIFY_CENTER = 2,JUSTIFY_RIGHT = 3,};
enum MACRO_JWINSIZE {JWINSIZE = 27141,};
enum MACRO_JXTPROTO {JXTPROTO = 27147,};
enum MACRO_JZOMBOOT {JZOMBOOT = 27143,};
enum MACRO_KB {KB_KLUNK = 0x0,KB_VT100 = 0x1,KB_SUN2 = 0x2,KB_VT220 = 0x81,KB_VT220I = 0x82,};
enum MACRO_KBD {KBD_CMD_LED1 = 0x4,KBD_CMD_NOLED1 = 0x5,KBD_CMD_LED2 = 0x6,KBD_CMD_NOLED2 = 0x7,};
enum MACRO_KBDLDISC {KBDLDISC = 6,};
enum MACRO_KBD_CMD {KBD_CMD_RESET = 0x1,KBD_CMD_BELL = 0x2,KBD_CMD_NOBELL = 0x3,KBD_CMD_CLICK = 0xA,KBD_CMD_NOCLICK = 0xB,KBD_CMD_AUTOTEST = 0xC,KBD_CMD_SETLED = 0xE,KBD_CMD_GETLAYOUT = 0xF,};
enum MACRO_KBENABLED {KBENABLED = 21514,};
enum MACRO_KBL {KBL = 0x51,};
enum MACRO_KBU {KBU = 0x52,};
enum MACRO_KB_SUN3 {KB_SUN3 = 3,KB_SUN4 = 4,KB_USB = 6,KB_PC = 101,KB_ASCII = 15,};
enum MACRO_KCPC {KCPC_CTX_FREEZE = 0x1,KCPC_CTX_SIGOVF = 0x2,KCPC_CTX_NONPRIV = 0x4,KCPC_CTX_LWPINHERIT = 0x8,KCPC_CTX_INVALID = 0x100,KCPC_CTX_ALLFLAGS = 0x10F,};
enum MACRO_KEY {KEY_MIN = 0x101,KEY_BREAK = 0x101,KEY_DOWN = 0x102,KEY_UP = 0x103,KEY_LEFT = 0x104,KEY_RIGHT = 0x105,KEY_HOME = 0x106,KEY_BACKSPACE = 0x107,KEY_F0 = 0x108,KEY_DL = 0x148,KEY_IL = 0x149,KEY_DC = 0x14A,KEY_IC = 0x14B,KEY_EIC = 0x14C,KEY_CLEAR = 0x14D,KEY_EOS = 0x14E,KEY_EOL = 0x14F,KEY_SF = 0x150,KEY_SR = 0x151,KEY_NPAGE = 0x152,KEY_PPAGE = 0x153,KEY_STAB = 0x154,KEY_CTAB = 0x155,KEY_CATAB = 0x156,KEY_ENTER = 0x157,KEY_SRESET = 0x158,KEY_RESET = 0x159,KEY_PRINT = 0x15A,KEY_LL = 0x15B,KEY_A1 = 0x15C,KEY_A3 = 0x15D,KEY_B2 = 0x15E,KEY_C1 = 0x15F,KEY_C3 = 0x160,KEY_BTAB = 0x161,KEY_BEG = 0x162,KEY_CANCEL = 0x163,KEY_CLOSE = 0x164,KEY_COMMAND = 0x165,KEY_COPY = 0x166,KEY_CREATE = 0x167,KEY_END = 0x168,KEY_EXIT = 0x169,KEY_FIND = 0x16A,KEY_HELP = 0x16B,KEY_MARK = 0x16C,KEY_MESSAGE = 0x16D,KEY_MOVE = 0x16E,KEY_NEXT = 0x16F,KEY_OPEN = 0x170,KEY_OPTIONS = 0x171,KEY_PREVIOUS = 0x172,KEY_REDO = 0x173,KEY_REFERENCE = 0x174,KEY_REFRESH = 0x175,KEY_REPLACE = 0x176,KEY_RESTART = 0x177,KEY_RESUME = 0x178,KEY_SAVE = 0x179,KEY_SBEG = 0x17A,KEY_SCANCEL = 0x17B,KEY_SCOMMAND = 0x17C,KEY_SCOPY = 0x17D,KEY_SCREATE = 0x17E,KEY_SDC = 0x17F,KEY_SDL = 0x180,KEY_SELECT = 0x181,KEY_SEND = 0x182,KEY_SEOL = 0x183,KEY_SEXIT = 0x184,KEY_SFIND = 0x185,KEY_SHELP = 0x186,KEY_SHOME = 0x187,KEY_SIC = 0x188,KEY_SLEFT = 0x189,KEY_SMESSAGE = 0x18A,KEY_SMOVE = 0x18B,KEY_SNEXT = 0x18C,KEY_SOPTIONS = 0x18D,KEY_SPREVIOUS = 0x18E,KEY_SPRINT = 0x18F,KEY_SREDO = 0x190,KEY_SREPLACE = 0x191,KEY_SRIGHT = 0x192,KEY_SRSUME = 0x193,KEY_SSAVE = 0x194,KEY_SSUSPEND = 0x195,KEY_SUNDO = 0x196,KEY_SUSPEND = 0x197,KEY_UNDO = 0x198,KEY_MOUSE = 0x199,KEY_MAX = 0x1FF,};
enum MACRO_KEYMAP {KEYMAP_SIZE = 128,};
enum MACRO_KEY_LEFTFIRST {KEY_LEFTFIRST = 32554,KEY_LEFTLAST = 32569,KEY_RIGHTFIRST = 32570,KEY_RIGHTLAST = 32585,KEY_TOPFIRST = 32586,KEY_TOPLAST = 32601,KEY_BOTTOMLEFT = 32602,KEY_BOTTOMRIGHT = 32603,KEY_BOTTOMFIRST = 32602,KEY_BOTTOMLAST = 32617,};
enum MACRO_KEY_RECOVERABLE {KEY_RECOVERABLE_ERROR = 0x1,KEY_NOT_READY = 0x2,KEY_MEDIUM_ERROR = 0x3,KEY_HARDWARE_ERROR = 0x4,KEY_ILLEGAL_REQUEST = 0x5,KEY_UNIT_ATTENTION = 0x6,KEY_WRITE_PROTECT = 0x7,KEY_DATA_PROTECT = 0x7,KEY_BLANK_CHECK = 0x8,KEY_VENDOR_UNIQUE = 0x9,KEY_COPY_ABORTED = 0xA,KEY_ABORTED_COMMAND = 0xB,KEY_EQUAL = 0xC,KEY_VOLUME_OVERFLOW = 0xD,KEY_MISCOMPARE = 0xE,KEY_RESERVED = 0xF,};
enum MACRO_KID {KID_NONE = 0,KID_GOT_PREFACE = 1,KID_OK = 2,KID_GOT_LAYOUT = 3,};
enum MACRO_KIOC {KIOC = 27392,};
enum MACRO_KIOCABORT1 {KIOCABORT1 = -1,};
enum MACRO_KIOCABORT1A {KIOCABORT1A = -3,};
enum MACRO_KIOCABORT2 {KIOCABORT2 = -2,};
enum MACRO_KIOCABORTDISABLE {KIOCABORTDISABLE = 0,KIOCABORTENABLE = 1,KIOCABORTALTERNATE = 2,};
enum MACRO_KIOCCMD {KIOCCMD = 27400,};
enum MACRO_KIOCGCOMPAT {KIOCGCOMPAT = 27409,};
enum MACRO_KIOCGDIRECT {KIOCGDIRECT = 27403,};
enum MACRO_KIOCGETKEY {KIOCGETKEY = 27394,};
enum MACRO_KIOCGKEY {KIOCGKEY = 27405,};
enum MACRO_KIOCGLED {KIOCGLED = 27407,};
enum MACRO_KIOCGTRANS {KIOCGTRANS = 27397,};
enum MACRO_KIOCGTRANSABLE {KIOCGTRANSABLE = 27399,};
enum MACRO_KIOCLAYOUT {KIOCLAYOUT = 27412,};
enum MACRO_KIOCSCOMPAT {KIOCSCOMPAT = 27408,};
enum MACRO_KIOCSDIRECT {KIOCSDIRECT = 27402,};
enum MACRO_KIOCSETKEY {KIOCSETKEY = 27393,};
enum MACRO_KIOCSKABORTEN {KIOCSKABORTEN = 27413,};
enum MACRO_KIOCSKEY {KIOCSKEY = 27404,};
enum MACRO_KIOCSLAYOUT {KIOCSLAYOUT = 27411,};
enum MACRO_KIOCSLED {KIOCSLED = 27406,};
enum MACRO_KIOCTRANS {KIOCTRANS = 27392,};
enum MACRO_KIOCTRANSABLE {KIOCTRANSABLE = 27398,};
enum MACRO_KIOCTYPE {KIOCTYPE = 27401,};
enum MACRO_KM {KM_SLEEP = 0x0,KM_NOSLEEP = 0x1,KM_PANIC = 0x2,KM_VMFLAGS = 0xFF,KM_FLAGS = 0xFFFF,};
enum MACRO_KMC {KMC_NOTOUCH = 0x10000,KMC_NODEBUG = 0x20000,KMC_NOMAGAZINE = 0x40000,KMC_NOHASH = 0x80000,KMC_QCACHE = 0x100000,};
enum MACRO_KM_WAIT {KM_WAIT = 0x0,KM_NOWAIT = 0x1,KM_TEMP = 0x1000,};
enum MACRO_KNC {KNC_STRSIZE = 128,};
enum MACRO_KOBJ {KOBJ_EXEC = 0x4,KOBJ_INTERP = 0x8,KOBJ_PRIM = 0x10,KOBJ_RESOLVED = 0x20,KOBJ_NVERSION_NONE = 0x0,KOBJ_NVERSION_CURRENT = 0x1,KOBJ_NVERSION_NUM = 0x2,KOBJ_NOTIFY_MODLOAD = 0x1,KOBJ_NOTIFY_MODUNLOAD = 0x2,KOBJ_NOTIFY_MAX = 0x2,};
enum MACRO_KRR {KRR = 0x5,};
enum MACRO_KSTAT {KSTAT_IOC_BASE = 19200,KSTAT_IOC_CHAIN_ID = 19201,KSTAT_IOC_READ = 19202,KSTAT_IOC_WRITE = 19203,KSTAT_STRLEN = 31,KSTAT_TYPE_RAW = 0,KSTAT_TYPE_NAMED = 1,KSTAT_TYPE_INTR = 2,KSTAT_TYPE_IO = 3,KSTAT_TYPE_TIMER = 4,KSTAT_NUM_TYPES = 5,KSTAT_FLAG_VIRTUAL = 1,KSTAT_FLAG_VAR_SIZE = 2,KSTAT_FLAG_WRITABLE = 4,KSTAT_FLAG_PERSISTENT = 8,KSTAT_FLAG_DORMANT = 16,KSTAT_FLAG_INVALID = 32,KSTAT_READ = 0,KSTAT_WRITE = 1,KSTAT_DATA_CHAR = 0,KSTAT_DATA_INT32 = 1,KSTAT_DATA_UINT32 = 2,KSTAT_DATA_INT64 = 3,KSTAT_DATA_UINT64 = 4,KSTAT_DATA_LONG = 1,KSTAT_DATA_ULONG = 2,KSTAT_DATA_LONGLONG = 3,KSTAT_DATA_ULONGLONG = 4,KSTAT_DATA_FLOAT = 5,KSTAT_DATA_DOUBLE = 6,KSTAT_INTR_HARD = 0,KSTAT_INTR_SOFT = 1,KSTAT_INTR_WATCHDOG = 2,KSTAT_INTR_SPURIOUS = 3,KSTAT_INTR_MULTSVC = 4,KSTAT_NUM_INTRS = 5,};
enum MACRO_KTAB {KTAB_STRLEN = 10,};
enum MACRO_KV {KV_ESCAPE = 92,KV_ADD_KEYS = 16,KV_WILDCHAR = 42,KV_FLAG_NONE = 0,KV_FLAG_REQUIRED = 1,};
enum MACRO_L {L_tmpnam = 25,L_ctermid = 9,L_cuserid = 9,};
enum MACRO_LA {LA_FLG_BINDTO = 0x1,LA_FLG_BINDFROM = 0x2,LA_SYMB_NOPLTENTER = 0x1,LA_SYMB_NOPLTEXIT = 0x2,LA_SYMB_STRUCTCALL = 0x4,LA_SYMB_DLSYM = 0x8,LA_SYMB_ALTVALUE = 0x10,LA_SER_ORIG = 0x1,LA_SER_LIBPATH = 0x2,LA_SER_RUNPATH = 0x4,LA_SER_CONFIG = 0x8,LA_SER_DEFAULT = 0x40,LA_SER_SECURE = 0x80,LA_ACT_CONSISTENT = 0x0,LA_ACT_ADD = 0x1,LA_ACT_DELETE = 0x2,};
enum MACRO_LANCE {LANCE_CSR0 = 0,LANCE_CSR1 = 1,LANCE_CSR2 = 2,LANCE_CSR3 = 3,LANCE_ERR = 32768,LANCE_BABL = 16384,LANCE_CERR = 8192,LANCE_MISS = 4096,LANCE_MERR = 2048,LANCE_RINT = 1024,LANCE_TINT = 512,LANCE_IDON = 256,LANCE_INTR = 128,LANCE_INEA = 64,LANCE_RXON = 32,LANCE_TXON = 16,LANCE_TDMD = 8,LANCE_STOP = 4,LANCE_STRT = 2,LANCE_INIT = 1,LANCE_BSWP = 4,LANCE_ACON = 2,LANCE_BCON = 1,};
enum MACRO_LANCEALIGN {LANCEALIGN = 8,};
enum MACRO_LARGEBUFSZ {LARGEBUFSZ = 512,};
enum MACRO_LARGEFILE {_LFS_LARGEFILE = 1,_LFS64_LARGEFILE = 1,};
enum MACRO_LAV {LAV_NONE = 0,LAV_VERSION1 = 1,LAV_VERSION2 = 2,LAV_CURRENT = 2,LAV_NUM = 3,};
enum MACRO_LAYOUTKEY {LAYOUTKEY = 0xFE,};
enum MACRO_LA_ELS {LA_ELS_RJT = 0x1,LA_ELS_ACC = 0x2,LA_ELS_PLOGI = 0x3,LA_ELS_FLOGI = 0x4,LA_ELS_LOGO = 0x5,LA_ELS_ABTX = 0x6,LA_ELS_RCS = 0x7,LA_ELS_RES = 0x8,LA_ELS_RSS = 0x9,LA_ELS_RSI = 0xA,LA_ELS_ESTS = 0xB,LA_ELS_ESTC = 0xC,LA_ELS_ADVC = 0xD,LA_ELS_RTV = 0xE,LA_ELS_RLS = 0xF,LA_ELS_ECHO = 0x10,LA_ELS_RRQ = 0x12,LA_ELS_PRLI = 0x20,LA_ELS_PRLO = 0x21,LA_ELS_SCN = 0x22,LA_ELS_TPLS = 0x23,LA_ELS_GPRLO = 0x24,LA_ELS_GAID = 0x30,LA_ELS_FACT = 0x31,LA_ELS_FDACT = 0x32,LA_ELS_NACT = 0x33,LA_ELS_NDACT = 0x34,LA_ELS_QoSR = 0x40,LA_ELS_RVCS = 0x41,LA_ELS_PDISC = 0x50,LA_ELS_FDISC = 0x51,LA_ELS_ADISC = 0x52,LA_ELS_NEW_IDENT = 0xF0,LA_ELS_DISPLAY = 0xF1,LA_ELS_IDENT = 0x20,};
enum MACRO_LA_RJT {LA_RJT_INVALID = 0x1,LA_RJT_LOGICAL_ERR = 0x3,LA_RJT_LOGICAL_BUSY = 0x5,LA_RJT_PROTOCOL_ERR = 0x7,LA_RJT_UNABLE_TO_PERFORM = 0x9,LA_RJT_NOT_SUPPORTED = 0xB,LA_RJT_VENDOR = 0xFF,LA_RJT_NOEXPLANATION = 0x0,LA_RJT_OPTIONS = 0x1,LA_RJT_INITIATOR = 0x3,LA_RJT_RECIPIENT = 0x5,LA_RJT_DATA_FIELD_SIZE = 0x7,LA_RJT_CONCURRENT = 0x9,LA_RJT_CREDIT = 0xB,LA_RJT_INVALID_PORT_WWNAME = 0xD,LA_RJT_INVALID_NODE_WWNAME = 0xE,LA_RJT_INVALID_COMMON_SVC = 0xF,LA_RJT_INVALID_ASSOC_HEADER = 0x11,LA_RJT_ASSOC_HDR_REQD = 0x13,LA_RJT_INVALID_ORIG_SID = 0x15,LA_RJT_INVALID_FQXID = 0x17,LA_RJT_REQUEST_IN_PROGRESS = 0x19,LA_RJT_INVALID_NPORT_ID = 0x1F,LA_RJT_ABT_INVALID_XID = 0x23,LA_RJT_ABT_INACTIVE_XID = 0x25,LA_RJT_RRQ_REQUIRED = 0x27,LA_RJT_INSUFFICENT = 0x29,LA_RJT_REQUESTED_DATA = 0x2A,LA_RJT_REQUEST_NOT_SUPPORTED = 0x2C,};
enum MACRO_LA_RJT_0 {LA_RJT = 0x1000000,LA_ACC = 0x2000000,LA_LOGI = 0x3000000,LA_LOGO = 0x4000000,LA_RLS = 0xD000000,LA_IDENT = 0x20000000,};
enum MACRO_LBLSIZE {LBLSIZE = 16,NAMELEN = 64,};
enum MACRO_LC {LC_CTYPE = 0,LC_NUMERIC = 1,LC_TIME = 2,LC_COLLATE = 3,LC_MONETARY = 4,LC_MESSAGES = 5,LC_ALL = 6,};
enum MACRO_LCA {LCA = 0x47,};
enum MACRO_LCASE {LCASE = 0x4,CRMOD = 0x10,RAW = 0x20,ODDP = 0x40,EVENP = 0x80,};
enum MACRO_LCRTBS : __int64 {LCRTBS = 1,LPRTERA = 2,LCRTERA = 4,LTILDE = 8,LMDMBUF = 16,LLITOUT = 32,LTOSTOP = 64,LFLUSHO = 128,LNOHANG = 256,LCRTKIL = 1024,LPASS8 = 2048,LCTLECH = 4096,LPENDIN = 8192,LDECCTQ = 16384,LNOFLSH = 281474976677888,};
enum MACRO_LD {LD_SUP_DERIVED = 0x1,LD_SUP_INHERITED = 0x2,LD_SUP_EXTRACTED = 0x4,};
enum MACRO_LDBL {LDBL_MANT_DIG = 113,LDBL_DIG = 33,LDBL_MIN_EXP = -16381,LDBL_MIN_10_EXP = -4931,LDBL_MAX_EXP = 16384,LDBL_MAX_10_EXP = 4932,};
enum MACRO_LDCHG {LDCHG = 17410,};
enum MACRO_LDCLOSE {LDCLOSE = 17409,};
enum MACRO_LDDMAP {LDDMAP = 17522,};
enum MACRO_LDEMAP {LDEMAP = 17521,};
enum MACRO_LDGETT {LDGETT = 17416,};
enum MACRO_LDGMAP {LDGMAP = 17519,};
enum MACRO_LDIOC {LDIOC = 17408,};
enum MACRO_LDL {LDL_MINTRANSFER = 32768,LDL_MAXTRANSFER = 1048576,LDL_DIVISOR = 1024,LDL_MINLOGSIZE = 1048576,LDL_MAXLOGSIZE = 67108864,LDL_MINBUFSIZE = 32768,};
enum MACRO_LDL_SCAN {LDL_SCAN = 0x1,LDL_ERROR = 0x2,};
enum MACRO_LDNMAP {LDNMAP = 17520,};
enum MACRO_LDOPEN {LDOPEN = 17408,};
enum MACRO_LDSETT {LDSETT = 17417,};
enum MACRO_LDSMAP {LDSMAP = 17518,};
enum MACRO_LDTERM {LDTERM_DATA_VERSION = 1,LDTERM_CS_TYPE_MIN = 1,LDTERM_CS_TYPE_EUC = 1,LDTERM_CS_TYPE_PCCS = 2,LDTERM_CS_TYPE_UTF8 = 3,LDTERM_CS_TYPE_MAX = 3,LDTERM_CS_MAX_BYTE_LENGTH = 8,LDTERM_CS_MAX_CODESETS = 10,LDTERM_CS_TYPE_EUC_MIN_SUBCS = 0,LDTERM_CS_TYPE_EUC_MAX_SUBCS = 3,LDTERM_CS_TYPE_PCCS_MIN_SUBCS = 1,LDTERM_CS_TYPE_PCCS_MAX_SUBCS = 10,LDTERM_CS_TYPE_UTF8_MIN_BYTE = 128,LDTERM_CS_TYPE_UTF8_MAX_BYTE = 191,LDTERM_CS_TYPE_UTF8_MIN_P14 = 917504,LDTERM_CS_TYPE_UTF8_MAX_P14 = 917631,LDTERM_CS_TYPE_UTF8_SHIFT_BITS = 6,LDTERM_CS_TYPE_UTF8_BIT_MASK = 63,};
enum MACRO_LED {LED_NUM_LOCK = 0x1,LED_COMPOSE = 0x2,LED_SCROLL_LOCK = 0x4,LED_CAPS_LOCK = 0x8,LED_KANA = 0x10,};
enum MACRO_LEFTALT {LEFTALT = 10,ALTMASK = 5120,};
enum MACRO_LEFTARROW {LEFTARROW = 0x3,RIGHTARROW = 0x4,FUNCKEYS = 0x600,};
enum MACRO_LEFTCTRL {LEFTCTRL = 4,};
enum MACRO_LEFTFUNC {LEFTFUNC = 0x600,};
enum MACRO_LEN {LEN_DKL_ASCII = 128,LEN_DKL_VVOL = 8,};
enum MACRO_LENGTH {MIN_LINKTARGET_LENGTH = 3,LINKTARGET_AC_HEADER_LENGTH = 2,MIN_LONGLINK_AC_LENGTH = 4,};
enum MACRO_LEVEL {CLOCK_LEVEL = 10,LOCK_LEVEL = 10,DISP_LEVEL = 11,};
enum MACRO_LFLOW {LFLOW_OFF = 0,LFLOW_ON = 1,LFLOW_RESTART_ANY = 2,LFLOW_RESTART_XON = 3,};
enum MACRO_LI {LI_SPPA = 0x2,};
enum MACRO_LIFC {LIFC_NOXMIT = 0x1,LIFC_EXTERNAL_SOURCE = 0x2,};
enum MACRO_LIFNAMSIZ {LIFNAMSIZ = 32,};
enum MACRO_LINESZ {LINESZ = 6,};
enum MACRO_LINK {CHILD_LINK = 0x1,PARENT_LINK = 0x2,};
enum MACRO_LIO {LIO_NOWAIT = 0,LIO_WAIT = 1,LIO_NOP = 0,LIO_READ = 1,LIO_WRITE = 2,};
enum MACRO_LIOC {LIOC = 27648,};
enum MACRO_LIOCGETP {LIOCGETP = 27649,};
enum MACRO_LIOCGETS {LIOCGETS = 27653,};
enum MACRO_LIOCSETP {LIOCSETP = 27650,};
enum MACRO_LIOCSETS {LIOCSETS = 27654,};
enum MACRO_LI_ENFORCE {LI_ENFORCE = 0x1,LI_UPDATE = 0x2,LI_ALLOC = 0x4,LI_FREE = 0x8,LI_DUP = 0x10,};
enum MACRO_LLC {LLC_RAW = 0x1,LLC_FAST = 0x2,LLC_PROM = 0x4,LLC_SNAP = 0x8,LLC_SNAP_OID = 0x10,};
enum MACRO_LLC1 {LLC1_MAX_MULTICAST = 16,LLC1_LINKED = 1,LLC1_AVAILABLE = 2,LLC1_INFO_WAIT = 4,LLC1_DEF_PPA = 8,LLC1_RAW_WAIT = 16,LLC1_USING_RAW = 32,LLC1_AUTO_XID = 64,LLC1_AUTO_TEST = 128,LLC1_BINDING = 256,};
enum MACRO_LLC1IDNUM {LLC1IDNUM = 0x8022,};
enum MACRO_LLC1_ATTACHED {LLC1_ATTACHED = 0x1,};
enum MACRO_LLC1_CSMACD {LLC1_CSMACD_HDR_SIZE = 14,};
enum MACRO_LLC1_HIWATER {LLC1_HIWATER = 32000,LLC1_LOWATER = 4096,LLC1_DEFMAX = 4096,};
enum MACRO_LLC2 {LLC2_MAX_SAPS = 128,LLC2_MAX_CONS = 256,};
enum MACRO_LLC2_INIT {LLC2_INIT = 1275068417,LLC2_UNINIT = 1275068418,LLC2_GET_STA_STATS = 1275068419,LLC2_GET_SAP_STATS = 1275068420,LLC2_GET_CON_STATS = 1275068421,};
enum MACRO_LLCE {LLCE_OK = -1,LLCE_NOBUFFER = 4097,};
enum MACRO_LLCS {LLCS_NOBUFFER = 0,LLCS_MULTIXMT = 1,LLCS_MULTIRCV = 2,LLCS_BRDCSTXMT = 3,LLCS_BRDCSTRCV = 4,LLCS_BLOCKED = 5,LLCS_PKTXMT = 6,LLCS_PKTRCV = 7,LLCS_BYTEXMT = 8,LLCS_BYTERCV = 9,LLCS_XIDXMT = 10,LLCS_XIDRCV = 11,LLCS_TESTXMT = 12,LLCS_TESTRCV = 13,LLCS_IERRORS = 14,LLCS_OERRORS = 15,};
enum MACRO_LLCTRACE {LLCTRACE = 0x1,LLCERRS = 0x2,LLCRECV = 0x4,LLCSEND = 0x8,LLCPROT = 0x10,};
enum MACRO_LLC_GET {LLC_GET_CON_PARMS_REQ = 1275068424,LLC_SET_CON_PARMS_REQ = 1275068425,LLC_GETPPA = 1275068426,LLC_SETPPA = 1275068427,};
enum MACRO_LLC_UI {LLC_UI = 0x3,LLC_XID = 0xAF,LLC_TEST = 0xE3,LLC_P = 0x10,LLC_XID_FMTID = 0x81,LLC_SERVICES = 0x1,LLC_GLOBAL_SAP = 0xFF,LLC_NULL_SAP = 0x0,LLC_SNAP_SAP = 0xAA,LLC_GROUP_ADDR = 0x1,LLC_RESPONSE = 0x1,LLC_NOVELL_SAP = 0xFFFFFFFF,LLC_XID_INFO_SIZE = 0x3,LLC_XID_CLASS_I = 0x1,LLC_XID_CLASS_II = 0x3,LLC_XID_CLASS_III = 0x5,LLC_XID_CLASS_IV = 0x7,LLC_XID_TYPE_1 = 0x1,LLC_XID_TYPE_2 = 0x2,LLC_XID_TYPE_3 = 0x4,};
enum MACRO_LLONG : __int64 {LLONG_MIN = -9223372036854775808,LLONG_MAX = 9223372036854775807,};
enum MACRO_LM {LM_ID_BASE = 0x0,LM_ID_LDSO = 0x1,LM_ID_NUM = 0x2,LM_ID_NEWLM = 0xFF,};
enum MACRO_LMD {LMD_OWN = 0x80,LMD_ERR = 0x40,LMD_STP = 0x2,LMD_ENP = 0x1,};
enum MACRO_LMS {LMS_USER = 0,LMS_SYSTEM = 1,LMS_TRAP = 2,LMS_TFAULT = 3,LMS_DFAULT = 4,LMS_KFAULT = 5,LMS_USER_LOCK = 6,LMS_SLEEP = 7,LMS_WAIT_CPU = 8,LMS_STOPPED = 9,};
enum MACRO_LM_IGNORED {LM_IGNORED = 0xFF,};
enum MACRO_LM_MAXSTRLEN {LM_MAXSTRLEN = 1024,};
enum MACRO_LM_MODE {LM_MODE = 1,LM_FORWARDMASK = 2,LM_SLC = 3,};
enum MACRO_LM_SVC {LM_SVC_CUR_VERS = 30,NFSL_FLUSH_ARGS_VERS = 1,};
enum MACRO_LM_SYSID {LM_SYSID = 0x1,LM_SYSID_MAX = 0x3FFF,LM_SYSID_CLIENT = 0x4000,LM_STATD_DELAY = 0xA,LM_NO_TIMOUT = 0x0,LM_GR_TIMOUT = 0x14,LM_SM_TIMOUT = 0x5,LM_CR_TIMOUT = 0x14,LM_RLOCK_SLP = 0x14,LM_ERROR_SLP = 0x1E,LM_GRACE_SLP = 0xA,LM_BLOCK_SLP = 0x3C,LM_RETRY = 0x5,LM_RECLAIM_RETRY = 0x64,LM_ASYN_RETRY = 0x3,LM_PMAP_TIMEOUT = 0xF,LM_GR_RETRY = 0x1,};
enum MACRO_LOADAVG {LOADAVG_1MIN = 0,LOADAVG_5MIN = 1,LOADAVG_15MIN = 2,LOADAVG_NSTATS = 3,};
enum MACRO_LOC {LOC_OPTS = 0xFFFF0000,LOC_DISALLOW = 0x10000,LOC_OPTIONAL = 0x20000,LOC_MAND = 0x40000,};
enum MACRO_LOCALDOMAINPARTS {LOCALDOMAINPARTS = 2,};
enum MACRO_LOCK {LOCK_HELD_VALUE = 0xFF,};
enum MACRO_LOCKFS {LOCKFS_ULOCK = 0,LOCKFS_WLOCK = 1,LOCKFS_NLOCK = 2,LOCKFS_DLOCK = 3,LOCKFS_HLOCK = 4,LOCKFS_ELOCK = 5,LOCKFS_ROELOCK = 6,LOCKFS_MAXLOCK = 6,LOCKFS_BUSY = 1,LOCKFS_MOD = 2,LOCKFS_MAXCOMMENTLEN = 1024,};
enum MACRO_LOCK_NORMAL {LOCK_NORMAL = 0x0,LOCK_ERRORCHECK = 0x2,LOCK_RECURSIVE = 0x4,};
enum MACRO_LOCK_PRIO {LOCK_PRIO_NONE = 0x0,LOCK_PRIO_INHERIT = 0x10,LOCK_PRIO_PROTECT = 0x20,LOCK_STALL_NP = 0x0,LOCK_ROBUST_NP = 0x40,LOCK_OWNERDEAD = 0x1,LOCK_NOTRECOVERABLE = 0x2,LOCK_INITED = 0x4,LOCK_UNMAPPED = 0x8,};
enum MACRO_LOC_0 {LOC = 113,};
enum MACRO_LOC_FIRST {LOC_FIRST_DELTA = 32640,LOC_X_DELTA = 32640,LOC_Y_DELTA = 32641,LOC_LAST_DELTA = 32641,LOC_FIRST_ABSOLUTE = 32642,LOC_X_ABSOLUTE = 32642,LOC_Y_ABSOLUTE = 32643,LOC_LAST_ABSOLUTE = 32643,};
enum MACRO_LOFI {LOFI_IOC_BASE = 4998656,LOFI_MAP_FILE = 4998657,LOFI_MAP_FILE_MINOR = 4998658,LOFI_UNMAP_FILE = 4998659,LOFI_UNMAP_FILE_MINOR = 4998660,LOFI_GET_FILENAME = 4998661,LOFI_GET_MINOR = 4998662,LOFI_GET_MAXMINOR = 4998663,};
enum MACRO_LOG {LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 120,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,LOG_NFACILITIES = 24,LOG_FACMASK = 1016,LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,LOG_PRIMASK = 7,LOG_PID = 1,LOG_CONS = 2,LOG_ODELAY = 4,LOG_NDELAY = 8,LOG_NOWAIT = 16,};
enum MACRO_LOGCTL {LOGCTL = 19456,};
enum MACRO_LOGDMX {LOGDMX_IOC_QEXCHANGE = 28161,};
enum MACRO_LOGIN {LOGIN_REQUIRED = 0x16,};
enum MACRO_LOGNAME {LOGNAME_MAX = 8,TTYNAME_MAX = 128,};
enum MACRO_LOG_CONSMIN {LOG_CONSMIN = 0,LOG_LOGMIN = 5,LOG_BACKLOG = 5,LOG_CLONEMIN = 6,LOG_MAX = 22,LOG_MID = 44,LOG_MINPS = 0,LOG_MAXPS = 1024,LOG_LOWAT = 2048,LOG_HIWAT = 1048576,LOG_MAGIC = -267566839,LOG_RECENTSIZE = 8192,LOG_MINFREE = 4096,LOG_MAXFREE = 8192,LOG_MSGSIZE = 200,};
enum MACRO_LOG_MODE {LOG_MODE = 0x180,};
enum MACRO_LOG_SENSE {LOG_SENSE_CMD = 0x4D,LOG_SELECT_CMD = 0x4C,};
enum MACRO_LOG_SENSE_LENGTH {LOG_SENSE_LENGTH = 0xFF,MIN_LOG_SENSE_LENGTH = 0x2B,};
enum MACRO_LOG_VOL {LOG_VOL_OPEN_INT = 0x0,LOG_VOL_CLOSE_INT = 0x1,};
enum MACRO_LONG {LONG_MIN = -2147483648,LONG_MAX = 2147483647,};
enum MACRO_LONG_SIGN {LONG_SIGN_BIT = 0x80000000,};
enum MACRO_LOOKUP {LOOKUP_DIR = 0x1,};
enum MACRO_LOSTFOUNDINO {LOSTFOUNDINO = 3,};
enum MACRO_LOWAT {LOWAT = 200,LDCHUNK = 512,};
enum MACRO_LS {LS_ADAPTIVE_MUTEX_SPIN = 0,LS_ADAPTIVE_MUTEX_BLOCK = 1,LS_SPIN_LOCK = 2,LS_THREAD_LOCK = 3,LS_RW_WRITER_BY_WRITER = 4,LS_RW_WRITER_BY_READERS = 5,LS_RW_READER_BY_WRITER = 6,LS_RW_READER_BY_WRITE_WANTED = 7,LS_ADAPTIVE_MUTEX_HOLD = 32,LS_SPIN_LOCK_HOLD = 33,LS_RW_WRITER_HOLD = 34,LS_RW_READER_HOLD = 35,LS_PROFILE_INTR = 56,LS_ERROR_BASE = 60,LS_RECURSION_DETECTED = 60,LS_ENTER_FAILED = 61,LS_EXIT_FAILED = 62,LS_RECORD_FAILED = 63,LS_MAX_EVENTS = 64,};
enum MACRO_LSE {LSE_ENTER = 0x1,LSE_EXIT = 0x2,LSE_RECORD = 0x4,LSE_TRACE = 0x8,};
enum MACRO_LS_MAX {LS_MAX_STACK_DEPTH = 50,LS_MAX_WATCH = 32,};
enum MACRO_LS_RJT {LS_RJT = 0x1000000,LS_ACC = 0x2000000,LS_PLOGI = 0x3000000,LS_FLOGI = 0x4000000,LS_LOGO = 0x5000000,LS_ABTX = 0x6000000,LS_RCS = 0x7000000,LS_RES = 0x8000000,LS_RSS = 0x9000000,LS_RSI = 0xA000000,LS_ESTS = 0xB000000,LS_ESTC = 0xC000000,LS_ADVC = 0xD000000,LS_RTV = 0xE000000,LS_RLS = 0xF000000,LS_ECHO = 0x10000000,LS_TEST = 0x11000000,LS_RRQ = 0x12000000,LS_IDENT = 0x20000000,LS_DISPLAY = 0x21000000,};
enum MACRO_LS_SECTORS {LS_SECTORS = 2,};
enum MACRO_LUFS {LUFS_EXTENTS = 0,};
enum MACRO_LUFS_VERSION {LUFS_VERSION = 1,LUFS_VERSION_LATEST = 1,};
enum MACRO_LWP {LWP_DETACHED = 0x40,LWP_SUSPENDED = 0x80,};
enum MACRO_LWPNULL {LWPNULL = 0,};
enum MACRO_LWP_USER {LWP_USER = 0x1,LWP_SYS = 0x2,};
enum MACRO_L_BITSMAJOR32 {L_BITSMAJOR32 = 14,L_BITSMINOR32 = 18,L_MAXMAJ32 = 16383,L_MAXMIN32 = 262143,L_BITSMAJOR = 14,L_BITSMINOR = 18,L_MAXMAJ = 16383,L_MAXMIN = 262143,};
enum MACRO_L_GETPPA {L_GETPPA = 19457,L_SETPPA = 19458,L_GETSTATS = 19461,L_ZEROSTATS = 19462,};
enum MACRO_L_SET {L_SET = 0,};
enum MACRO_L_SUCCESS {L_SUCCESS = 0,L_NAMELEN = 1,L_TMPLOCK = 2,L_TMPWRITE = 3,L_MAXTRYS = 4,L_ERROR = 5,L_MANLOCK = 6,};
enum MACRO_LclSourceUnknownType {LclSourceUnknownType = 0,LclSourceTextType = 1,LclSourceBinaryType = 2,};
enum MACRO_LctErrorDBCannotFindFromCharset {LctErrorDBCannotFindFromCharset = 5,};
enum MACRO_LctErrorDBCannotFindToCharset {LctErrorDBCannotFindToCharset = 6,};
enum MACRO_LctErrorIconvHalfDone {LctErrorIconvHalfDone = 9,};
enum MACRO_LctErrorInvalidAttribute {LctErrorInvalidAttribute = 7,LctErrorIconvNonIdenticalConversion = 8,};
enum MACRO_LctErrorNone {LctErrorNone = 0,LctErrorIconvCannotOpen = 1,LctErrorIconvError = 2,};
enum MACRO_LctErrorNotEnoughResource {LctErrorNotEnoughResource = 3,LctErrorDBCannotFindIconvDef = 4,};
enum MACRO_LctNNone {LctNNone = 1,};
enum MACRO_M {M_MXFAST = 1,M_NLBLKS = 2,M_GRAIN = 3,M_KEEP = 4,};
enum MACRO_MA {MA_READ = 0x4,MA_WRITE = 0x2,MA_EXEC = 0x1,MA_SHARED = 0x8,MA_ANON = 0x40,MA_ISM = 0x80,MA_BREAK = 0x10,MA_STACK = 0x20,};
enum MACRO_MAC {MAC_INST = 0x1,MAC_INIT = 0x4,};
enum MACRO_MACE {MACE_XMTFC_DRTRY = 0x80,MACE_XMTFC_DXMTFCS = 0x8,MACE_XMTFC_APADXMT = 0x1,MACE_XMTFS_XMTSV = 0x80,MACE_XMTFS_UFLO = 0x40,MACE_XMTFS_LCOL = 0x20,MACE_XMTFS_MORE = 0x10,MACE_XMTFS_ONE = 0x8,MACE_XMTFS_DEFER = 0x4,MACE_XMTFS_LCAR = 0x2,MACE_XMTFS_RTRY = 0x1,MACE_XMTRC_EXDEF = 0x80,MACE_XMTRC_XMTRC = 0xF,MACE_RCVFC_LLRCV = 0x8,MACE_RCVFC_MR = 0x4,MACE_RCVFC_ASTRPRCV = 0x1,MACE_RCVFS_OFLO = 0x80,MACE_RCVFS_CLSN = 0x40,MACE_RCVFS_FRAM = 0x20,MACE_RCVFS_FCS = 0x10,MACE_RCVFS_RCVCNT = 0xF,MACE_FIFOFC_RCVFC = 0xF0,MACE_FIFOFC_XMTFC = 0xF,MACE_IR_JAB = 0x80,MACE_IR_BABL = 0x40,MACE_IR_CERR = 0x20,MACE_IR_RCVCCO = 0x10,MACE_IR_RPCO = 0x8,MACE_IR_MPCO = 0x4,MACE_IR_RCVINT = 0x2,MACE_IR_XMTINT = 0x1,MACE_IMR_BABLM = 0x40,MACE_IMR_CERRM = 0x20,MACE_IMR_MPCOM = 0x4,MACE_IMR_RCVINTM = 0x2,MACE_IMR_XMTINTM = 0x1,MACE_PR_XMTSV = 0x80,MACE_PR_TDTREQ = 0x40,MACE_PR_RDTREQ = 0x20,MACE_BIU_BSWP = 0x40,MACE_BIU_XMTSP = 0x30,MACE_BIU_XMTSPSHIFTL = 0x4,MACE_BIU_XMTSP4 = 0x0,MACE_BIU_XMTSP16 = 0x1,MACE_BIU_XMTSP64 = 0x2,MACE_BIU_XMTSP112 = 0x3,MACE_BIU_SWSRT = 0x1,MACE_FIFOCC_XMTFW = 0xC0,MACE_FIFOCC_XMTFW8 = 0x0,MACE_FIFOCC_XMTFW16 = 0x40,MACE_FIFOCC_XMTFW32 = 0x80,MACE_FIFOCC_RCVFW = 0x30,MACE_FIFOCC_RCVFW16 = 0x0,MACE_FIFOCC_RCVFW32 = 0x10,MACE_FIFOCC_RCVFW64 = 0x20,MACE_FIFOCC_XMTFWU = 0x8,MACE_FIFOCC_RCVFWU = 0x4,MACE_FIFOCC_XMTBRST = 0x2,MACE_FIFOCC_RCVBRST = 0x1,MACE_MACCC_PROM = 0x80,MACE_MACCC_DXMT2PD = 0x40,MACE_MACCC_EMBA = 0x20,MACE_MACCC_DRCVPA = 0x8,MACE_MACCC_DRCVBC = 0x4,MACE_MACCC_ENXMT = 0x2,MACE_MACCC_ENRCV = 0x1,MACE_PLSCC_XMTSEL = 0x8,MACE_PLSCC_PORTSEL = 0x6,MACE_PLSCC_PORTSELAUI = 0x0,MACE_PLSCC_PORTSELTP = 0x2,MACE_PLSCC_PORTSELDAI = 0x4,MACE_PLSCC_PORTSELGPSI = 0x6,MACE_PLSCC_ENPLSIO = 0x1,MACE_PHYCC_LNKST = 0x80,MACE_PHYCC_DLNKTST = 0x40,MACE_PHYCC_RCVPOL = 0x20,MACE_PHYCC_DAPC = 0x10,MACE_PHYCC_LTS = 0x8,MACE_PHYCC_ASEL = 0x4,MACE_PHYCC_RWAKE = 0x2,MACE_PHYCC_AWAKE = 0x1,MACE_CHIPID0_MAGIC = 0x41,MACE_CHIPID1_MAGIC = 0x9,MACE_IAC_ADDRCHG = 0x80,MACE_IAC_PHYADDR = 0x4,MACE_IAC_LOGADDR = 0x2,MACE_UTR_RTRE = 0x80,MACE_UTR_RTRD = 0x40,MACE_UTR_RPA = 0x20,MACE_UTR_FCOLL = 0x10,MACE_UTR_RCVFCSE = 0x8,MACE_UTR_LOOP = 0x6,MACE_UTR_LOOPNO = 0x0,MACE_UTR_LOOPEXT = 0x2,MACE_UTR_LOOPINT = 0x4,MACE_UTR_LOOPINTMENDEC = 0x6,};
enum MACRO_MADE {MADE_FP = 0x2,};
enum MACRO_MADV {MADV_NORMAL = 0,MADV_RANDOM = 1,MADV_SEQUENTIAL = 2,MADV_WILLNEED = 3,MADV_DONTNEED = 4,MADV_FREE = 5,};
enum MACRO_MAGIC {MUTEX_MAGIC = 0x4D58,SEMA_MAGIC = 0x534D,COND_MAGIC = 0x4356,RWL_MAGIC = 0x5257,};
enum MACRO_MAGIC_BYTES {MAGIC_BYTES = 8,};
enum MACRO_MAP {MAP_SHARED = 1,MAP_PRIVATE = 2,MAP_TYPE = 15,MAP_FIXED = 16,MAP_NORESERVE = 64,MAP_ANON = 256,MAP_ANONYMOUS = 256,MAP_RENAME = 32,};
enum MACRO_MAPBLOCKOFF {MAPBLOCKOFF = 8191,MAPBLOCKMASK = -8192,};
enum MACRO_MAPBLOCKSHIFT {MAPBLOCKSHIFT = 13,};
enum MACRO_MAPBLOCKSIZE {MAPBLOCKSIZE = 8192,};
enum MACRO_MAPINOK {MAPINOK = 0x1,NOMAPIN = 0x2,REMAPOK = 0x4,NOREMAP = 0x8,};
enum MACRO_MAP_FAILED {MAP_FAILED = -1,};
enum MACRO_MAP_TYPE1 {MAP_TYPE1 = 1,MAP_TYPE2 = 2,MAP_TYPE1_LEN = 6,MAP_TYPE2_LEN = 64,};
enum MACRO_MASK {NESTLEVEL_MASK = 0xF,DISPLAYCELL_MASK = 0x80,};
enum MACRO_MASTER {MASTER_ONLY = 32,};
enum MACRO_MAX : __int64 {INT8_MAX = 127,INT16_MAX = 32767,INT32_MAX = 2147483647,INT64_MAX = 9223372036854775807,UINT8_MAX = 255,UINT16_MAX = 65535,UINT32_MAX = -1,UINT64_MAX = -1,INTMAX_MAX = 9223372036854775807,UINTMAX_MAX = -1,INT_LEAST8_MAX = 127,INT_LEAST16_MAX = 32767,INT_LEAST32_MAX = 2147483647,INT_LEAST64_MAX = 9223372036854775807,UINT_LEAST8_MAX = 255,UINT_LEAST16_MAX = 65535,UINT_LEAST32_MAX = -1,UINT_LEAST64_MAX = -1,};
enum MACRO_MAXADDRS {MAXADDRS = 35,};
enum MACRO_MAXALIASES {MAXALIASES = 35,};
enum MACRO_MAXASYNCHIO {MAXASYNCHIO = 200,};
enum MACRO_MAXBLKS {MAXBLKS = 1422,};
enum MACRO_MAXBOFFSET {MAXBOFFSET = 8191,MAXBMASK = -8192,};
enum MACRO_MAXBSHIFT {MAXBSHIFT = 13,};
enum MACRO_MAXBSIZE {MAXBSIZE = 8192,};
enum MACRO_MAXBSIZE_UNKNOWN {MAXBSIZE_UNKNOWN = -2,};
enum MACRO_MAXCALLBACK {MAXCALLBACK = 20,};
enum MACRO_MAXCDNAME {MAXCDNAME = 255,};
enum MACRO_MAXCON {MAXCON = 100,};
enum MACRO_MAXCOOKIE {MAXCOOKIE_SIZE = 36,};
enum MACRO_MAXCSBUFS {MAXCSBUFS = 32,};
enum MACRO_MAXDEVS {MAXDEVS = 7,};
enum MACRO_MAXDFLSRCH {MAXDFLSRCH = 3,};
enum MACRO_MAXDNSRCH {MAXDNSRCH = 6,};
enum MACRO_MAXDOS {MAXDOS = 65535,};
enum MACRO_MAXEND : __int64 {MAXEND = 9223372036854775807,};
enum MACRO_MAXERRMSGLEN {MAXERRMSGLEN = 255,};
enum MACRO_MAXFIDSZ {MAXFIDSZ = 64,};
enum MACRO_MAXFPQ {MAXFPQ = 16,};
enum MACRO_MAXFRAG {MAXFRAG = 8,};
enum MACRO_MAXGLITCH {MAXGLITCH = 30,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 256,};
enum MACRO_MAXHSOFFSET {MAXHSOFFSET = 2047,MAXHSMASK = -2048,};
enum MACRO_MAXIOCBSZ {MAXIOCBSZ = 1024,};
enum MACRO_MAXIPL {MAXIPL = 16,};
enum MACRO_MAXISOOFFSET {MAXISOOFFSET = 2047,MAXISOMASK = -2048,};
enum MACRO_MAXLINESIZE {MAXLINESIZE = 80,};
enum MACRO_MAXLINK {MAXLINK = 32767,};
enum MACRO_MAXLNS {MAXLNS = 6,};
enum MACRO_MAXMAJ {MAXMAJ = 16383,};
enum MACRO_MAXMAJ32 {MAXMAJ32 = 0x3FFF,};
enum MACRO_MAXMAPNAMELEN {MAXMAPNAMELEN = 255,};
enum MACRO_MAXMIN {MAXMIN = 262143,};
enum MACRO_MAXMIN32 {MAXMIN32 = 0x3FFFF,};
enum MACRO_MAXMNTLEN {MAXMNTLEN = 512,};
enum MACRO_MAXMODCONFNAME {MAXMODCONFNAME = 256,};
enum MACRO_MAXMSGLEN {MAXMSGLEN = 80,};
enum MACRO_MAXNETNAMELEN {MAXNETNAMELEN = 255,};
enum MACRO_MAXNS {MAXNS = 3,};
enum MACRO_MAXPACKETSIZE {MAXPACKETSIZE = 512,};
enum MACRO_MAXPHASE {MAXPHASE = 512000,MAXFREQ = 33554432,};
enum MACRO_MAXPROJID {MAXPROJID = 2147483647,};
enum MACRO_MAXRESOLVSORT {MAXRESOLVSORT = 10,};
enum MACRO_MAXSEC {MAXSEC = 1200,};
enum MACRO_MAXSIG {MAXSIG = 45,};
enum MACRO_MAXSTRMSG {MAXSTRMSG = 58,};
enum MACRO_MAXSYMLINKS {MAXSYMLINKS = 20,MAXNAMELEN = 256,};
enum MACRO_MAXSYSARGS {MAXSYSARGS = 8,};
enum MACRO_MAXTC {MAXTC = 64,};
enum MACRO_MAXTTL {MAXTTL = 255,};
enum MACRO_MAXUID {MAXUID = 2147483647,};
enum MACRO_MAXVIFS {MAXVIFS = 32,};
enum MACRO_MAXXDRHOSTNAMELEN {MAXXDRHOSTNAMELEN = 1025,};
enum MACRO_MAXYPDATALEN {MAXYPDATALEN = 1023,};
enum MACRO_MAX_ATTR {MAX_ATTR_LEN = 128,};
enum MACRO_MAX_AUDIO {MAX_AUDIO_DEV_LEN = 16,};
enum MACRO_MAX_AUTH {MAX_AUTH_BYTES = 400,};
enum MACRO_MAX_COMMAND {MAX_COMMAND = 1023,};
enum MACRO_MAX_FCODE {MAX_FCODE_SIZE = 0x2000,};
enum MACRO_MAX_FIFO {MAX_FIFO_FLAG = 15,};
enum MACRO_MAX_FRAME {MAX_FRAME_SIZE = 2112,};
enum MACRO_MAX_GRANT {MAX_GRANT_LOCKS = 52,};
enum MACRO_MAX_HDR {MAX_HDR = 128,MAX_COMP_HDR = 16,};
enum MACRO_MAX_HWC {MAX_HWC_LINESIZE = 1024,};
enum MACRO_MAX_INPUT {MAX_INPUT = 512,MAX_CANON = 256,};
enum MACRO_MAX_IPOPTLEN {MAX_IPOPTLEN = 40,};
enum MACRO_MAX_KEVENTS {MAX_KEVENTS = 512,MAX_ACL_ENTRIES = 1024,};
enum MACRO_MAX_MACHINE {MAX_MACHINE_NAME = 255,};
enum MACRO_MAX_MNTOPT {MAX_MNTOPT_TAG = 64,};
enum MACRO_MAX_MNTOPT_STR {MAX_MNTOPT_STR = 1024,};
enum MACRO_MAX_NAME {MAX_NAME_LEN = 64,MAX_GSS_MECH = 128,MAX_GSS_NAME = 128,};
enum MACRO_MAX_NETOBJ {MAX_NETOBJ_SZ = 1024,};
enum MACRO_MAX_PASSWD {MAX_PASSWD_LENGTH = 32,};
enum MACRO_MAX_PATH {MAX_PATH_LEN = 1024,MAX_FILEID = 32,};
enum MACRO_MAX_PORTS {MAX_PORTS = 7,};
enum MACRO_MAX_QOP : __int64 {MAX_QOP_NUM_PAIRS = 128,MAX_QOPS_PER_MECH = 128,MAX_UINT = 4294967295,MAX_ULONG = 4294967295,MAX_USHORT = 65535,};
enum MACRO_MAX_RTPR {MAX_RTPR = 255,};
enum MACRO_MAX_SACK {MAX_SACK_BLK = 5,};
enum MACRO_MAX_SHR {MAX_SHR_OWNER_LEN = 1024,};
enum MACRO_MAX_STACK {MAX_STACK_BUF = 512,};
enum MACRO_MAX_THROTTLE {MAX_THROTTLE = 256,};
enum MACRO_MAX_TIMEOUT {MAX_TIMEOUT = 1800000,};
enum MACRO_MAX_TRACE {MAX_TRACE_NPROCS = 64,};
enum MACRO_MAX_TREE {MAX_TREE_DEPTH = 64,MAX_PTR_IN_PRV = 5,};
enum MACRO_MAX_U : __int64 {MAX_U_OFF_T = 4294967295,MAX_U_OFFSET_T = -1,};
enum MACRO_MBB {MBB_MAGIC = 0xAA55,};
enum MACRO_MC {MC_SYNC = 1,MC_LOCK = 2,MC_UNLOCK = 3,MC_ADVISE = 4,MC_LOCKAS = 5,MC_UNLOCKAS = 6,};
enum MACRO_MCErr {MCErr_Already = 0xF1,MCErr_Invalid = 0xF2,MCErr_Overflow = 0xF3,MCErr_None = 0xF4,MCErr_Command = 0xF5,};
enum MACRO_MCL {MCL_CURRENT = 0x1,MCL_FUTURE = 0x2,};
enum MACRO_MCOR2 {MCOR2 = 64,};
enum MACRO_MC_NO {MC_NO_CANON = 0,MC_DO_CANON = 1,MC_PART_CANON = 3,};
enum MACRO_MC_NOCANON {MC_NOCANON = 0,MC_DOCANON = 1,MC_CANONQUERY = 2,MC_SERVICEIMM = 3,MC_SERVICEDEF = 4,MC_NOIFLAG = 5,MC_NOOFLAG = 6,MC_NOLFLAG = 7,};
enum MACRO_MD {MD_CREATEDONE = 0x1,MD_POPULATED = 0x2,MD_FILE = 0x4,MD_FASTSYMLNK = 0x8,MD_PACKED = 0x10,MD_INVALREADDIR = 0x40,MD_PUTPAGE = 0x200,MD_FREE = 0x400,MD_PUSHDONE = 0x800,MD_MAPPING = 0x1000,MD_ACL = 0x2000,MD_ACLDIR = 0x4000,MD_LOCALMTIME = 0x8000,MD_LOCALCTIME = 0x10000,MD_LOCALFILENO = 0x20000,MD_NEEDATTRS = 0x40000,};
enum MACRO_MD5 : __int64 {MD5_CONST_0 = 3614090360,MD5_CONST_1 = 3905402710,MD5_CONST_2 = 606105819,MD5_CONST_3 = 3250441966,MD5_CONST_4 = 4118548399,MD5_CONST_5 = 1200080426,MD5_CONST_6 = 2821735955,MD5_CONST_7 = 4249261313,MD5_CONST_8 = 1770035416,MD5_CONST_9 = 2336552879,MD5_CONST_10 = 4294925233,MD5_CONST_11 = 2304563134,MD5_CONST_12 = 1804603682,MD5_CONST_13 = 4254626195,MD5_CONST_14 = 2792965006,MD5_CONST_15 = 1236535329,MD5_CONST_16 = 4129170786,MD5_CONST_17 = 3225465664,MD5_CONST_18 = 643717713,MD5_CONST_19 = 3921069994,MD5_CONST_20 = 3593408605,MD5_CONST_21 = 38016083,MD5_CONST_22 = 3634488961,MD5_CONST_23 = 3889429448,MD5_CONST_24 = 568446438,MD5_CONST_25 = 3275163606,MD5_CONST_26 = 4107603335,MD5_CONST_27 = 1163531501,MD5_CONST_28 = 2850285829,MD5_CONST_29 = 4243563512,MD5_CONST_30 = 1735328473,MD5_CONST_31 = 2368359562,MD5_CONST_32 = 4294588738,MD5_CONST_33 = 2272392833,MD5_CONST_34 = 1839030562,MD5_CONST_35 = 4259657740,MD5_CONST_36 = 2763975236,MD5_CONST_37 = 1272893353,MD5_CONST_38 = 4139469664,MD5_CONST_39 = 3200236656,MD5_CONST_40 = 681279174,MD5_CONST_41 = 3936430074,MD5_CONST_42 = 3572445317,MD5_CONST_43 = 76029189,MD5_CONST_44 = 3654602809,MD5_CONST_45 = 3873151461,MD5_CONST_46 = 530742520,MD5_CONST_47 = 3299628645,MD5_CONST_48 = 4096336452,MD5_CONST_49 = 1126891415,MD5_CONST_50 = 2878612391,MD5_CONST_51 = 4237533241,MD5_CONST_52 = 1700485571,MD5_CONST_53 = 2399980690,MD5_CONST_54 = 4293915773,MD5_CONST_55 = 2240044497,MD5_CONST_56 = 1873313359,MD5_CONST_57 = 4264355552,MD5_CONST_58 = 2734768916,MD5_CONST_59 = 1309151649,MD5_CONST_60 = 4149444226,MD5_CONST_61 = 3174756917,MD5_CONST_62 = 718787259,MD5_CONST_63 = 3951481745,MD5_INIT_CONST_1 = 1732584193,MD5_INIT_CONST_2 = 4023233417,MD5_INIT_CONST_3 = 2562383102,MD5_INIT_CONST_4 = 271733878,MD5_SHIFT_11 = 7,MD5_SHIFT_12 = 12,MD5_SHIFT_13 = 17,MD5_SHIFT_14 = 22,MD5_SHIFT_21 = 5,MD5_SHIFT_22 = 9,MD5_SHIFT_23 = 14,MD5_SHIFT_24 = 20,MD5_SHIFT_31 = 4,MD5_SHIFT_32 = 11,MD5_SHIFT_33 = 16,MD5_SHIFT_34 = 23,MD5_SHIFT_41 = 6,MD5_SHIFT_42 = 10,MD5_SHIFT_43 = 15,MD5_SHIFT_44 = 21,};
enum MACRO_MDB {MDB_API_VERSION = 1,};
enum MACRO_MDB_SYM {MDB_SYM_NAMLEN = 1024,MDB_SYM_FUZZY = 0,MDB_SYM_EXACT = 1,MDB_OBJ_EXEC = 0,MDB_OBJ_RTLD = 1,MDB_OBJ_EVERY = -1,MDB_OPT_SETBITS = 1,MDB_OPT_CLRBITS = 2,MDB_OPT_STR = 3,MDB_OPT_UINTPTR = 4,MDB_OPT_UINT64 = 5,};
enum MACRO_MDI {MDI_RESET = 19713,MDI_GET_CFGINFO = 19714,MDI_SET_PIXELMODE = 19715,MDI_8_PIX = 8,MDI_16_PIX = 16,MDI_32_PIX = 32,MDI_SET_COUNTERS = 19716,MDI_SET_PPR = 19717,MDI_BLEND_LEFT_DIRECT = 0,MDI_BLEND_LEFT_CLUT1 = 64,MDI_BLEND_LEFT_CLUT2 = 128,MDI_BLEND_LEFT_CLUT3 = 192,MDI_BLEND_RIGHT_DIRECT = 0,MDI_BLEND_RIGHT_CLUT1 = 16,MDI_BLEND_RIGHT_CLUT2 = 32,MDI_BLEND_RIGHT_CLUT3 = 48,MDI_SOURCE_LEFT_TRUE = 0,MDI_SOURCE_LEFT_B = 4,MDI_SOURCE_LEFT_G = 8,MDI_SOURCE_LEFT_R = 12,MDI_SOURCE_RIGHT_X = 0,MDI_SOURCE_RIGHT_B = 1,MDI_SOURCE_RIGHT_G = 2,MDI_SOURCE_RIGHT_R = 3,MDI_VRT_CNTL = 19718,MDI_ENABLE_VIRQ = 1,MDI_DISABLE_VIRQ = 2,MDI_SET_CLUT = 19719,MDI_GET_CLUT = 19720,MDI_XLUT = 1,MDI_CLUT1 = 2,MDI_CLUT2 = 4,MDI_CLUT3 = 8,MDI_GAMMALUT = 16,MDI_CLUT_ALL = 23,MDI_SET_XLUT = 19721,MDI_GET_XLUT = 19722,MDI_SET_RESOLUTION = 19731,MDI_GAMMA_CORRECT = 19723,MDI_GAMMA_CORRECTION_OFF = 0,MDI_GAMMA_CORRECTION_ON = 1,MDI_SET_GAMMALUT = 19724,MDI_GET_GAMMALUT = 19725,MDI_SET_DEGAMMALUT = 19726,MDI_GET_DEGAMMALUT = 19727,MDI_GET_BUFFER_INFO = 19728,MDI_SET_CURSOR = 19729,MDI_GET_DIAGINFO = 19730,};
enum MACRO_MDI_CCR {MDI_CCR_PCGCLK_ENABLE = 0x4,MDI_CCR_CLKSEL1_ENABLE = 0x2,MDI_CCR_CLKSEL0_ENABLE = 0x1,MDI_CCR_PCGSCLK = 0x1,MDI_CCR_PCGSDAT = 0x2,MDI_CCR_PCGSDAT_DIRSEL = 0x4,MDI_CCR_PCGASXSEL = 0x8,MDI_CCR_PCGAXS = 0x10,MDI_CCR_DATABITS = 0xF0,MDI_CCR_DATASHIFT = 0x4,MDI_ICS_NREGS = 0x10,MDI_TST_BLUE = 0xFF0000,MDI_TST_GREEN = 0xFF00,MDI_TST_RED = 0xFF,};
enum MACRO_MDI_HCT {MDI_HCT = 0x3FF,MDI_VCT = 0xFFF,MDI_HBS = 0x3FF,MDI_HBC = 0x3FF,MDI_HSS = 0x3FF,MDI_HSC = 0x3FF,MDI_CSC = 0x3FF,MDI_VBS = 0xFFF,MDI_VBC = 0xFFF,MDI_VSS = 0xFFF,MDI_VSC = 0xFFF,MDI_XCS = 0x3FF,MDI_XCC = 0x3FF,MDI_CURS_SIZE = 0x20,MDI_CURS_ENTRIES = 0x2,MDI_CURS_ENABLE = 0x4,MDI_CURS_SELECT = 0x2,MDI_CURS_DBUF = 0x1,MDI_CURS_XMASK = 0xFFF,MDI_CURS_YMASK = 0xFFF,MDI_CURS_ALPHAMASK = 0xF8000000,MDI_CURS_PIXVAL = 0xFFFFFF,MDI_CMAP_ENTRIES = 0x100,MDI_CMAP_MASK = 0xFF,};
enum MACRO_MDI_NMAPS {MDI_NMAPS = 13,MDI_DIRECT_MAP = 268435456,MDI_CTLREG_MAP = 536870912,MDI_CURSOR_MAP = 805306368,MDI_SHDW_VRT_MAP = 1073741824,MDI_CHUNKY_XBGR_MAP = 1342177280,MDI_CHUNKY_BGR_MAP = 1610612736,MDI_PLANAR_X16_MAP = 1879048192,MDI_PLANAR_C16_MAP = -2147483648,MDI_PLANAR_X32_MAP = -1879048192,MDI_PLANAR_B32_MAP = -1610612736,MDI_PLANAR_G32_MAP = -1342177280,MDI_PLANAR_R32_MAP = -1073741824,MDI_DEFAULT_DEPTH = 8,MDI_DEFAULT_WIDTH = 1152,MDI_DEFAULT_HEIGHT = 900,MDI_MAX = 4,MDI_MAX_CLUTS = 3,MDI_PAGESIZE = 4096,MDI_MAPSIZE = 65536,MDI_REGOFFSET = 0,MDI_CURSOFFSET = 4096,MDI_DACOFFSET = 8192,MDI_XLUTOFFSET = 12288,MDI_CLUT1OFFSET = 16384,MDI_CLUT2OFFSET = 20480,MDI_CLUT3OFFSET = 24576,MDI_AUTOOFFSET = 61440,MDI_MCR_8PIX = 0,MDI_MCR_16PIX = 2,MDI_MCR_32PIX = 3,MDI_MCR_PIXPIPE0 = 0,MDI_MCR_PIXPIPE1 = 4,MDI_MCR_PIXPIPE2 = 8,MDI_MCR_PIXPIPE3 = 12,MDI_MCS_PIXSHIFT = 2,MDI_PPR_GREY = 0,MDI_PPR_LUT1 = 1,MDI_PPR_LUT2 = 2,MDI_PPR_LUT3 = 3,MDI_PPR_LEFT = 192,MDI_PPR_RIGHT = 48,MDI_PPR_LEFTSHIFT = 6,MDI_PPR_RIGHTSHIFT = 4,MDI_TMS0_MUX_STATE = 8,MDI_TMS0_IVS = 7,MDI_TMS1_CET = 240,MDI_TMS1_CST = 15,MDI_MSR_INTPEND = 32,MDI_MSR_VINT = 16,MDI_MSR_FAULT = 1,MDI_FSR_WERR = 1,MDI_FSR_UNIMP = 4,MDI_RSR_REVMASK = 240,MDI_RSR_IMPLMASK = 15,};
enum MACRO_MD_FIXED {MD_FIXED = 0xF8,};
enum MACRO_ME {ME_FREE = 0x1,ME_HASH = 0x2,ME_CANCEL = 0x4,ME_AGE = 0x8,ME_LIST = 0x10,ME_ROLL = 0x20,};
enum MACRO_MEDIA {MEDIA_ACCESS_DELAY = 5000000,};
enum MACRO_MEM {MEM_VTOP = 19713,};
enum MACRO_MEM_SPEED {MEM_SPEED_MIN = 100,MEM_SPEED_MAX = 1370,};
enum MACRO_META {META_FIRST = 128,META_LAST = 255,};
enum MACRO_METABIT {METABIT = 0,METAMASK = 128,};
enum MACRO_MFB {MFB_OFF_ID = 0,MFB_OFF_REG = 4194304,MFB_OFF_FB = 8388608,MFB_OFF_DUMMY = 12582912,MFB_ID_MASK = -16,MFB_ID_VALUE = -33488640,MFB_CMAP_ENTRIES = 256,MFB_CR_INTEN = 128,MFB_CR_VIDEO = 64,MFB_CR_MASTER = 32,MFB_CR_CURSOR = 16,MFB_CR_X0 = 0,MFB_CR_X1 = 4,MFB_CR_X2 = 8,MFB_CR_TEST = 12,MFB_CR_DIV1 = 0,MFB_CR_DIV2 = 1,MFB_CR_DIV3 = 2,MFB_CR_DIV4 = 3,MFB_SR_INT = 128,MFB_SR_RES_MASK = 112,MFB_SR_1024_768 = 16,MFB_SR_1152_900 = 48,MFB_SR_1280_1024 = 64,MFB_SR_1600_1280 = 80,MFB_SR_ID_MASK = 15,MFB_SR_ID_COLOR = 1,MFB_SR_ID_MONO = 2,MFB_SR_ID_MONO_ECL = 3,MFB_REG_MMAP_OFFSET = 268435456,};
enum MACRO_MFM {MFM = 0x40,};
enum MACRO_MHIOC {MHIOC = 19712,};
enum MACRO_MHIOCENFAILFAST {MHIOCENFAILFAST = 19713,};
enum MACRO_MHIOCGRP {MHIOCGRP_INKEYS = 19717,MHIOCGRP_INRESV = 19718,MHIOCGRP_REGISTER = 19719,MHIOCGRP_RESERVE = 19720,MHIOCGRP_PREEMPTANDABORT = 19721,MHIOCGRP_PREEMPT = 19722,MHIOCGRP_CLEAR = 19723,};
enum MACRO_MHIOCQRESERVE {MHIOCQRESERVE = 19724,};
enum MACRO_MHIOCRELEASE {MHIOCRELEASE = 19715,};
enum MACRO_MHIOCREREGISTERDEVID {MHIOCREREGISTERDEVID = 19725,};
enum MACRO_MHIOCSTATUS {MHIOCSTATUS = 19716,};
enum MACRO_MHIOCTKOWN {MHIOCTKOWN = 19714,};
enum MACRO_MHIOC_RESV {MHIOC_RESV_KEY_SIZE = 8,};
enum MACRO_MI {MI_MIN_DEV = 2,MI_COPY_IN = 1,MI_COPY_OUT = 2,};
enum MACRO_MIB2 {MIB2_SYSTEM = 257,MIB2_INTERFACES = 258,MIB2_AT = 259,MIB2_IP = 260,MIB2_ICMP = 261,MIB2_TCP = 262,MIB2_UDP = 263,MIB2_EGP = 264,MIB2_CMOT = 265,MIB2_TRANSMISSION = 266,MIB2_SNMP = 267,MIB2_IP6 = 268,MIB2_ICMP6 = 269,MIB2_TCP6 = 270,MIB2_UDP6 = 271,MIB2_RANGE_START = 257,MIB2_RANGE_END = 271,};
enum MACRO_MIB2_IP {MIB2_IP_ADDR = 20,MIB2_IP_ROUTE = 21,MIB2_IP_MEDIA = 22,MIB2_IP6_ROUTE = 23,MIB2_IP6_MEDIA = 24,MIB2_IP6_ADDR = 25,};
enum MACRO_MIB2_IP_20 {MIB2_IP_20 = 20,MIB2_IP_21 = 21,MIB2_IP_22 = 22,MIB2_TCP_CONN = 13,MIB2_TCP6_CONN = 14,MIB2_TCP_13 = 13,MIB2_TCP_closed = 1,MIB2_TCP_listen = 2,MIB2_TCP_synSent = 3,MIB2_TCP_synReceived = 4,MIB2_TCP_established = 5,MIB2_TCP_finWait1 = 6,MIB2_TCP_finWait2 = 7,MIB2_TCP_closeWait = 8,MIB2_TCP_lastAck = 9,MIB2_TCP_closing = 10,MIB2_TCP_timeWait = 11,MIB2_TCP_deleteTCB = 12,MIB2_UDP_ENTRY = 5,MIB2_UDP6_ENTRY = 6,MIB2_UDP_5 = 5,MIB2_UDP_unbound = 1,MIB2_UDP_idle = 2,MIB2_UDP_connected = 3,MIB2_UDP_unknown = 4,};
enum MACRO_MICROSEC {MICROSEC = 1000000,};
enum MACRO_MIN : __int64 {INT8_MIN = -128,INT16_MIN = -32768,INT32_MIN = -2147483648,INT64_MIN = -9223372036854775808,INTMAX_MIN = -9223372036854775808,INT_LEAST8_MIN = -128,INT_LEAST16_MIN = -32768,INT_LEAST32_MIN = -2147483648,INT_LEAST64_MIN = -9223372036854775808,};
enum MACRO_MINBSIZE {MINBSIZE = 4096,};
enum MACRO_MINFRAME {MINFRAME = 92,};
enum MACRO_MINFRAME32 {MINFRAME32 = 92,};
enum MACRO_MINMASK {MINMASK = 0x3F,};
enum MACRO_MINOR {IPV4_MINOR = 0,IPV6_MINOR = 1,};
enum MACRO_MINPSIZE {MINPSIZE = 4,};
enum MACRO_MINS {MINS_PER_HOUR = 60,};
enum MACRO_MINSEC {MINSEC = 16,};
enum MACRO_MINSHIFT {MINSHIFT = 5,};
enum MACRO_MINSIGSTKSZ {MINSIGSTKSZ = 2048,SIGSTKSZ = 8192,};
enum MACRO_MINSPERHOUR {MINSPERHOUR = 60,};
enum MACRO_MIN_ACL {MIN_ACL_ENTRIES = 4,};
enum MACRO_MIN_INT {MIN_INT = -2147483648,MIN_LONG = -2147483648,MIN_SHORT = -32768,};
enum MACRO_MIN_LONGLINK {MIN_LONGLINK_MFC_LENGTH = 6,MIN_LONGLINK_MFC_NREGS = 1,};
enum MACRO_MIN_LOWWATER {MIN_LOWWATER = 2,MIN_RTPR = 1,};
enum MACRO_MIOC {MIOC = 19712,};
enum MACRO_MI_HARD {MI_HARD = 0x1,MI_PRINTED = 0x2,MI_INT = 0x4,MI_DOWN = 0x8,MI_NOAC = 0x10,MI_NOCTO = 0x20,MI_DYNAMIC = 0x40,MI_LLOCK = 0x80,MI_GRPID = 0x100,MI_RPCTIMESYNC = 0x200,MI_LINK = 0x400,MI_SYMLINK = 0x800,MI_READDIR = 0x1000,MI_ACL = 0x2000,MI_BINDINPROG = 0x4000,MI_LOOPBACK = 0x8000,MI_SEMISOFT = 0x10000,MI_NOPRINT = 0x20000,MI_DIRECTIO = 0x40000,};
enum MACRO_MI_INFO {MI_INFO_ONE = 1,MI_INFO_ALL = 2,MI_INFO_CNT = 4,MI_LOADED = 1,MI_INSTALLED = 2,};
enum MACRO_MM {MM_MXLABELLN = 25,MM_MXTAGLN = 32,MM_MXTXTLN = 512,MM_MXACTLN = 512,MM_NULL = 0,MM_RECOVER = 256,MM_NRECOV = 512,MM_PRINT = 64,MM_NOSEV = 0,MM_HALT = 1,MM_NULLLBL = 0,MM_NULLSEV = 0,MM_NULLMC = 0,MM_NULLTXT = 0,MM_NULLACT = 0,MM_NULLTAG = 0,MM_NOTOK = -1,MM_OK = 0,MM_NOMSG = 1,MM_NOCON = 4,};
enum MACRO_MMCODEC {MMCODEC_OM0_ENABLE = 0x1,MMCODEC_OM1_ENABLE = 0x1,MMCODEC_MIN_ATEN = 0x0,MMCODEC_MAX_ATEN = 0x1F,MMCODEC_MAX_DEV_ATEN = 0x3F,MMCODEC_SM = 0x1,MMCODEC_OVR_CLR = 0x0,MMCODEC_OVR = 0x1,MMCODEC_IS_LINE = 0x0,MMCODEC_IS_MIC = 0x1,MMCODEC_MIN_GAIN = 0x0,MMCODEC_MAX_GAIN = 0xF,MMCODEC_MA_MIN_ATEN = 0x0,MMCODEC_MA_MAX_ATEN = 0xF,MMCODEC_DCB = 0x1,MMCODEC_SRE = 0x1,MMCODEC_VS0 = 0x0,MMCODEC_VS1 = 0x1,MMCODEC_DFR_8000 = 0x0,MMCODEC_DFR_5513 = 0x0,MMCODEC_DFR_16000 = 0x1,MMCODEC_DFR_11025 = 0x1,MMCODEC_DFR_27429 = 0x2,MMCODEC_DFR_18900 = 0x2,MMCODEC_DFR_32000 = 0x3,MMCODEC_DFR_22050 = 0x3,MMCODEC_DFR_37800 = 0x4,MMCODEC_DFR_44100 = 0x5,MMCODEC_DFR_48000 = 0x6,MMCODEC_DFR_33075 = 0x6,MMCODEC_DFR_9600 = 0x7,MMCODEC_DFR_6615 = 0x7,MMCODEC_ST_MONO = 0x0,MMCODEC_ST_STEREO = 0x1,MMCODEC_DF_16_BIT = 0x0,MMCODEC_DF_ULAW = 0x1,MMCODEC_DF_ALAW = 0x2,MMCODEC_MCK_MSTR = 0x0,MMCODEC_MCK_XTAL1 = 0x1,MMCODEC_MCK_XTAL2 = 0x2,MMCODEC_MCK_EXT = 0x3,MMCODEC_BSEL_64 = 0x0,MMCODEC_BSEL_128 = 0x1,MMCODEC_BSEL_256 = 0x2,MMCODEC_XCLK = 0x1,MMCODEC_XEN = 0x0,MMCODEC_ENL = 0x1,MMCODEC_ADL_DIG = 0x0,MMCODEC_ADL_ANLG = 0x1,MMCODEC_LEN = 0x100,};
enum MACRO_MM_STD {MM_STD = 0,MM_NOSTD = 256,MM_GET = 0,MM_NOGET = 512,MM_ACTION = 1024,MM_NOCONSOLE = 0,MM_SVCMD = 73728,};
enum MACRO_MNT {MNT_LINE_MAX = 1024,MNT_TOOLONG = 1,MNT_TOOMANY = 2,MNT_TOOFEW = 3,};
enum MACRO_MNTIOC {MNTIOC = 27904,};
enum MACRO_MNTIOC_NMNTS {MNTIOC_NMNTS = 27905,MNTIOC_GETDEVLIST = 27906,MNTIOC_SETTAG = 27907,MNTIOC_CLRTAG = 27908,};
enum MACRO_MNTMAXSTR {MNTMAXSTR = 128,};
enum MACRO_MO {MO_SET = 0x1,MO_NODISPLAY = 0x2,MO_HASVALUE = 0x4,MO_IGNORE = 0x8,MO_DEFAULT = 0x1,MO_TAG = 0x10,MO_EMPTY = 0x20,};
enum MACRO_MOD {MOD_WIN = 10,};
enum MACRO_MODADDMAJBIND {MODADDMAJBIND = 5,};
enum MACRO_MODDEBUG {MODDEBUG_LOADMSG = 0x80000000,MODDEBUG_ERRMSG = 0x40000000,MODDEBUG_LOADMSG2 = 0x20000000,MODDEBUG_NOAUL_DACF = 0x8000,MODDEBUG_KEEPTEXT = 0x4000,MODDEBUG_NOPACK = 0x2000,MODDEBUG_NOAUL_DRV = 0x1000,MODDEBUG_NOAUL_EXEC = 0x800,MODDEBUG_NOAUL_FS = 0x400,MODDEBUG_NOAUL_MISC = 0x200,MODDEBUG_NOAUL_SCHED = 0x100,MODDEBUG_NOAUL_STR = 0x80,MODDEBUG_NOAUL_SYS = 0x40,MODDEBUG_NOSYMS = 0x20,MODDEBUG_NOAUTOUNLOAD = 0x10,MODDEBUG_UNLOCKSYMBOLS = 0x8,MODDEBUG_LOCKSYMBOLS = 0x4,MODDEBUG_STUBBPT = 0x2,MODDEBUG_USERDEBUG = 0x1,};
enum MACRO_MODE {MODE_S = 1,MODE_B = 2,MODE_C = 3,};
enum MACRO_MODEM {MODEM_CHANGE = 1,};
enum MACRO_MODEMASK {MODEMASK = 0xFFF,};
enum MACRO_MODEPAGE {MODEPAGE_DISCO_RECO = 0x2,MODEPAGE_CACHING = 0x8,MODEPAGE_PDEVICE = 0x9,MODEPAGE_CTRL_MODE = 0xA,MODEPAGE_POWER_COND = 0x1A,MODEPAGE_INFO_EXCPT = 0x1C,MODEPAGE_ALLPAGES = 0x3F,};
enum MACRO_MODEVENTS {MODEVENTS = 15,MODGETFBNAME = 16,};
enum MACRO_MODEVENTS_FLUSH {MODEVENTS_FLUSH = 0,MODEVENTS_FLUSH_DUMP = 1,MODEVENTS_SET_DOOR_UPCALL_FILENAME = 2,};
enum MACRO_MODE_DAD {MODE_DAD_WP = 0x80,MODE_DAD_DPOFUA = 0x10,};
enum MACRO_MODE_STREAM {MODE_STREAM = 0x1,};
enum MACRO_MODE_TRAPSIG {MODE_TRAPSIG = 0x2,MODE_ACK = 0x4,MODE_SOFT_TAB = 0x8,MODE_LIT_ECHO = 0x10,MODE_MASK = 0x1F,MODE_FLOW = 0x100,MODE_ECHO = 0x200,MODE_INBIN = 0x400,MODE_OUTBIN = 0x800,MODE_FORCE = 0x1000,};
enum MACRO_MODGETDEVID {MODGETDEVID = 11,};
enum MACRO_MODGETMINORNAME {MODGETMINORNAME = 13,};
enum MACRO_MODGETNAME {MODGETNAME = 9,};
enum MACRO_MODGETPATH {MODGETPATH = 6,};
enum MACRO_MODGETPATHLEN {MODGETPATHLEN = 14,};
enum MACRO_MODLOAD {MODLOAD = 0,MODUNLOAD = 1,MODINFO = 2,};
enum MACRO_MODMAXLINK {MODMAXLINK = 10,};
enum MACRO_MODMAXLINKINFOLEN {MODMAXLINKINFOLEN = 32,};
enum MACRO_MODMAXNAMELEN {MODMAXNAMELEN = 32,};
enum MACRO_MODOPEN {MODOPEN = 0x1,CLONEOPEN = 0x2,CONSOPEN = 0x4,};
enum MACRO_MODREADSYSBIND {MODREADSYSBIND = 7,MODGETMAJBIND = 8,};
enum MACRO_MODREREADDACF {MODREREADDACF = 17,};
enum MACRO_MODRESERVED {MODRESERVED = 3,MODCONFIG = 4,};
enum MACRO_MODREV {MODREV_1 = 1,};
enum MACRO_MODS {MODS_WEAK = 0x1,MODS_NOUNLOAD = 0x2,};
enum MACRO_MODSIZEOF {MODSIZEOF_DEVID = 10,};
enum MACRO_MODSIZEOF_MINORNAME {MODSIZEOF_MINORNAME = 12,};
enum MACRO_MOD_EXCLUDE {MOD_EXCLUDE = 0,MOD_INCLUDE = 1,MOD_FORCELOAD = 2,MOD_ROOTDEV = 3,MOD_ROOTFS = 4,MOD_SWAPDEV = 5,MOD_SWAPFS = 6,MOD_MODDIR = 7,MOD_SET = 8,MOD_UNKNOWN = 9,MOD_SET32 = 10,MOD_SET64 = 11,};
enum MACRO_MOD_EXCLUSIVE {MOD_EXCLUSIVE = 8192,};
enum MACRO_MOD_MAXPATH {MOD_MAXPATH = 256,};
enum MACRO_MOD_NOAUTOUNLOAD {MOD_NOAUTOUNLOAD = 0x1,};
enum MACRO_MOD_OFFSET {MOD_OFFSET = 0x1,MOD_FREQUENCY = 0x2,MOD_MAXERROR = 0x4,MOD_ESTERROR = 0x8,MOD_STATUS = 0x10,MOD_TIMECONST = 0x20,MOD_CLKB = 0x4000,MOD_CLKA = 0x8000,};
enum MACRO_MOD_SAMEOBJ {MOD_SAMEOBJ = 1024,};
enum MACRO_MOD_SHARED {MOD_SHARED = 1,MOD_EXCL = 2,};
enum MACRO_MON {MON_1 = 15,MON_2 = 16,MON_3 = 17,MON_4 = 18,MON_5 = 19,MON_6 = 20,MON_7 = 21,MON_8 = 22,MON_9 = 23,MON_10 = 24,MON_11 = 25,MON_12 = 26,};
enum MACRO_MONMASK {MONMASK = 0xF,};
enum MACRO_MONS {MONS_PER_YEAR = 12,};
enum MACRO_MONSHIFT {MONSHIFT = 5,};
enum MACRO_MONSPERYEAR {MONSPERYEAR = 12,};
enum MACRO_MON_TYPE {MON_TYPE_STEREO = 0x8,MON_TYPE_0_OFFSET = 0x4,MON_TYPE_OVERSCAN = 0x2,MON_TYPE_GRAY = 0x1,};
enum MACRO_MORECTL {MORECTL = 1,MOREDATA = 2,};
enum MACRO_MOUSE {MOUSE_DEVID = 127,};
enum MACRO_MOUSELDISC {MOUSELDISC = 5,};
enum MACRO_MQ {MQ_ENABLED = 0x1,};
enum MACRO_MRT {MRT_INIT = 100,MRT_DONE = 101,MRT_ADD_VIF = 102,MRT_DEL_VIF = 103,MRT_ADD_MFC = 104,MRT_DEL_MFC = 105,MRT_VERSION = 106,MRT_ASSERT = 107,};
enum MACRO_MS {MS_OLDSYNC = 0x0,MS_SYNC = 0x4,MS_ASYNC = 0x1,MS_INVALIDATE = 0x2,};
enum MACRO_MSCALE0 {MSCALE0 = 4,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_EOR = 0x8,MSG_CTRUNC = 0x10,MSG_TRUNC = 0x20,MSG_WAITALL = 0x40,MSG_DONTWAIT = 0x80,MSG_XPG4_2 = 0x8000,MSG_MAXIOVLEN = 0x10,};
enum MACRO_MSGMARK {MSGMARK = 0x1,MSGNOLOOP = 0x2,MSGDELIM = 0x4,MSGNOGET = 0x8,MSGMARKNEXT = 0x10,MSGNOTMARKNEXT = 0x20,};
enum MACRO_MSG_COMMAND {MSG_COMMAND_COMPLETE = 0x0,MSG_SAVE_DATA_PTR = 0x2,MSG_RESTORE_PTRS = 0x3,MSG_DISCONNECT = 0x4,MSG_INITIATOR_ERROR = 0x5,MSG_ABORT = 0x6,MSG_REJECT = 0x7,MSG_NOP = 0x8,MSG_MSG_PARITY = 0x9,MSG_LINK_CMPLT = 0xA,MSG_LINK_CMPLT_FLAG = 0xB,MSG_DEVICE_RESET = 0xC,MSG_ABORT_TAG = 0xD,MSG_CLEAR_QUEUE = 0xE,MSG_INITIATE_RECOVERY = 0xF,MSG_RELEASE_RECOVERY = 0x10,MSG_TERMINATE_PROCESS = 0x11,MSG_CONTINUE_TASK = 0x12,MSG_TARGET_TRAN_DIS = 0x13,MSG_CLEAR_ACA = 0x16,MSG_EXTENDED = 0x1,MSG_MODIFY_DATA_PTR = 0x0,MSG_SYNCHRONOUS = 0x1,MSG_IDENTIFY_EXTENDED = 0x2,MSG_WIDE_DATA_XFER = 0x3,MSG_SIMPLE_QTAG = 0x20,MSG_HEAD_QTAG = 0x21,MSG_ORDERED_QTAG = 0x22,MSG_IGNORE_WIDE_RESID = 0x23,MSG_ACA = 0x24,MSG_LUN_RESET = 0x25,MSG_IDENTIFY = 0x80,};
enum MACRO_MSG_DR {MSG_DR_IDENTIFY = 192,MSG_LUNTAR = 32,MSG_LUNRTN = 7,};
enum MACRO_MSG_HIPRI {MSG_HIPRI = 0x1,MSG_ANY = 0x2,MSG_BAND = 0x4,MSG_XPG4 = 0x8,};
enum MACRO_MSG_R {MSG_R = 0x100,MSG_W = 0x80,MSG_RWAIT = 0x200,MSG_WWAIT = 0x400,MSG_NOERROR = 0x1000,};
enum MACRO_MSIOBUTTONS {MSIOBUTTONS = 27907,};
enum MACRO_MSIOC {MSIOC = 27904,};
enum MACRO_MSIOGETPARMS {MSIOGETPARMS = 27905,};
enum MACRO_MSIOSETPARMS {MSIOSETPARMS = 27906,};
enum MACRO_MS_HW {MS_HW_BUT1 = 0x4,MS_HW_BUT2 = 0x2,MS_HW_BUT3 = 0x1,};
enum MACRO_MS_LEFT {MS_LEFT = 32544,MS_MIDDLE = 32545,MS_RIGHT = 32546,};
enum MACRO_MS_NO {MS_NO_RRIP = 0x800000,};
enum MACRO_MS_RBC {MS_RBC_T10_SUB_CLASS = 0x1,MS_SFF8020I_SUB_CLASS = 0x2,MS_QIC_157_SUB_CLASS = 0x3,MS_UFI_SUB_CLASS = 0x4,MS_SFF8070I_SUB_CLASS = 0x5,MS_SCSI_SUB_CLASS = 0x6,MS_CBI_WC_PROTOCOL = 0x0,MS_CBI_PROTOCOL = 0x1,MS_ISD_1999_SILICON_PROTOCOL = 0x2,MS_BULK_ONLY_PROTOCOL = 0x50,};
enum MACRO_MS_RDONLY {MS_RDONLY = 0x1,MS_FSS = 0x2,MS_DATA = 0x4,MS_NOSUID = 0x10,MS_REMOUNT = 0x20,MS_NOTRUNC = 0x40,MS_OVERLAY = 0x80,MS_OPTIONSTR = 0x100,MS_GLOBAL = 0x200,MS_FORCE = 0x400,MS_NOMNTTAB = 0x800,MS_SYSSPACE = 0x8,MS_NOSPLICE = 0x1000,MS_NOCHECK = 0x2000,MS_MASK = 0xBF7,MS_UMOUNT_MASK = 0x400,};
enum MACRO_MT {MT_FREE = 0,MT_DATA = 1,};
enum MACRO_MTDOUBLEFREE {MTDOUBLEFREE = 1,MTDEBUGPATTERN = 2,MTINITBUFFER = 4,MTCHUNKSIZE = 32,};
enum MACRO_MTEOM {MTEOM = 10,};
enum MACRO_MTERASE {MTERASE = 9,};
enum MACRO_MTF {MTF_SCSI = 0x1,MTF_REEL = 0x2,MTF_ASF = 0x4,MTF_TAPE_HEAD_DIRTY = 0x8,MTF_TAPE_CLN_SUPPORTED = 0x10,};
enum MACRO_MTFSR {MTFSR = 3,MTBSR = 4,};
enum MACRO_MTGRSZ {MTGRSZ = 13,};
enum MACRO_MTIOC {MTIOC = 27904,};
enum MACRO_MTIOCFORCERESERVE {MTIOCFORCERESERVE = 27914,};
enum MACRO_MTIOCGET {MTIOCGET = 27906,};
enum MACRO_MTIOCGETDRIVETYPE {MTIOCGETDRIVETYPE = 27907,};
enum MACRO_MTIOCGUARANTEEDORDER {MTIOCGUARANTEEDORDER = 27911,};
enum MACRO_MTIOCLRERR {MTIOCLRERR = 27910,};
enum MACRO_MTIOCPERSISTENT {MTIOCPERSISTENT = 27908,};
enum MACRO_MTIOCPERSISTENTSTATUS {MTIOCPERSISTENTSTATUS = 27909,};
enum MACRO_MTIOCREADIGNOREEOFS {MTIOCREADIGNOREEOFS = 27919,};
enum MACRO_MTIOCREADIGNOREILI {MTIOCREADIGNOREILI = 27918,};
enum MACRO_MTIOCRELEASE {MTIOCRELEASE = 27913,};
enum MACRO_MTIOCRESERVE {MTIOCRESERVE = 27912,};
enum MACRO_MTIOCSHORTFMK {MTIOCSHORTFMK = 27920,};
enum MACRO_MTIOCSTATE {MTIOCSTATE = 27917,};
enum MACRO_MTIOCTOP {MTIOCTOP = 27905,};
enum MACRO_MTLOAD {MTLOAD = 14,};
enum MACRO_MTM {MTM_ROLL_EXIT = 0x1,MTM_ROLL_RUNNING = 0x2,MTM_FORCE_ROLL = 0x4,};
enum MACRO_MTNBSF {MTNBSF = 11,};
enum MACRO_MTNOP {MTNOP = 7,MTRETEN = 8,};
enum MACRO_MTOFFL {MTOFFL = 6,};
enum MACRO_MTONOFF {MTONOFF = 0xB,};
enum MACRO_MTREW {MTREW = 5,};
enum MACRO_MTSRSZ {MTSRSZ = 12,};
enum MACRO_MTWEOF {MTWEOF = 0,MTFSF = 1,MTBSF = 2,};
enum MACRO_MT_ISTS {MT_ISTS = 0x1,MT_ISHT = 0x2,MT_ISTM = 0x3,MT_ISMT = 0x4,MT_ISUT = 0x5,MT_ISCPC = 0x6,MT_ISAR = 0x7,MT_ISSC = 0x8,MT_ISSYSGEN11 = 0x10,MT_ISSYSGEN = 0x11,MT_ISDEFAULT = 0x12,MT_ISCCS3 = 0x13,MT_ISMT02 = 0x14,MT_ISVIPER1 = 0x15,MT_ISWANGTEK1 = 0x16,MT_ISCCS7 = 0x17,MT_ISCCS8 = 0x18,MT_ISCCS9 = 0x19,MT_ISCCS11 = 0x1A,MT_ISCCS12 = 0x1B,MT_ISCCS13 = 0x1C,MT_ISCCS14 = 0x1D,MT_ISCCS15 = 0x1E,MT_ISCCS16 = 0x1F,MT_ISCDC = 0x20,MT_ISFUJI = 0x21,MT_ISKENNEDY = 0x22,MT_ISHP = 0x23,MT_ISSTC = 0x24,MT_ISANRITSU = 0x25,MT_ISCCS23 = 0x26,MT_ISCCS24 = 0x27,MT_ISEXABYTE = 0x28,MT_ISEXB8500 = 0x29,MT_ISWANGTHS = 0x2A,MT_ISWANGDAT = 0x2B,MT_ISPYTHON = 0x2C,MT_ISCCS28 = 0x2D,MT_ISCCS29 = 0x2E,MT_ISCCS30 = 0x2F,MT_ISCCS31 = 0x30,MT_ISCCS32 = 0x31,MT_ISQIC = 0x32,MT_ISREEL = 0x33,MT_ISDAT = 0x34,MT_IS8MM = 0x35,MT_ISOTHER = 0x36,MT_ISTAND25G = 0x37,MT_ISDLT = 0x38,MT_ISSTK9840 = 0x39,};
enum MACRO_MT_NDENSITIES {MT_NDENSITIES = 4,MT_NSPEEDS = 4,};
enum MACRO_MT_NONE {MT_NONE = 0x0,MT_TRANSACT = 0x1,MT_MATAMAP = 0x2,MT_WRITE_CHECK = 0x4,MT_LOG_WRITE_CHECK = 0x8,MT_CHECK_MAP = 0x10,MT_TRACE = 0x20,MT_SIZE = 0x40,MT_NOASYNC = 0x80,MT_FORCEROLL = 0x100,MT_SCAN = 0x200,MT_PREWRITE = 0x400,};
enum MACRO_MT_NOREWIND {MT_NOREWIND = 4,MT_DENSITY_MASK = 24,MT_DENSITY1 = 0,MT_DENSITY2 = 8,MT_DENSITY3 = 16,MT_DENSITY4 = 24,MT_BSD = 64,};
enum MACRO_MULBSHIFT {MULBSHIFT = 9,MULKSIZE = 1024,};
enum MACRO_MULKSHIFT {MULKSHIFT = 10,};
enum MACRO_MULLSHIFT {MULLSHIFT = 2,MULBSIZE = 512,};
enum MACRO_MULWSHIFT {MULWSHIFT = 1,MULLSIZE = 4,};
enum MACRO_MULWSIZE {MULWSIZE = 2,};
enum MACRO_MUTEX {MUTEX_NO_OWNER = -536870912,};
enum MACRO_MUXID {MUXID_ALL = -1,};
enum MACRO_M_CTL {M_CTL_MAGIC_NUMBER = 70,};
enum MACRO_M_DATA {M_DATA = 0x0,M_PROTO = 0x1,M_BREAK = 0x8,M_PASSFP = 0x9,M_EVENT = 0xA,M_SIG = 0xB,M_DELAY = 0xC,M_CTL = 0xD,M_IOCTL = 0xE,M_SETOPTS = 0x10,M_RSE = 0x11,M_IOCACK = 0x81,M_IOCNAK = 0x82,M_PCPROTO = 0x83,M_PCSIG = 0x84,M_READ = 0x85,M_FLUSH = 0x86,M_STOP = 0x87,M_START = 0x88,M_HANGUP = 0x89,M_ERROR = 0x8A,M_COPYIN = 0x8B,M_COPYOUT = 0x8C,M_IOCDATA = 0x8D,M_PCRSE = 0x8E,M_STOPI = 0x8F,M_STARTI = 0x90,M_PCEVENT = 0x91,M_UNHANGUP = 0x92,};
enum MACRO_M_MEM {M_MEM = 0,M_KMEM = 1,M_NULL = 2,M_ZERO = 12,};
enum MACRO_M_RO {M_RO = 0x1,M_ROL = 0x2,M_RW = 0x4,M_RWL = 0x8,M_ROOT = 0x10,};
enum MACRO_MaskAllTextDescriptors {MaskAllTextDescriptors = 0xFFFFFFF,};
enum MACRO_MaskOrientation {MaskOrientation = 0xF,MaskContext = 0xF0,MaskTypeOfText = 0xF00,MaskImplicitAlg = 0xF000,MaskSwapping = 0xF0000,MaskNumerals = 0xF00000,MaskTextShaping = 0xF000000,};
enum MACRO_N {N_IEEE_EXCEPTION = 5,};
enum MACRO_NA {NA_USER_OBJ = 0x1,NA_USER = 0x2,NA_GROUP_OBJ = 0x4,NA_GROUP = 0x8,NA_CLASS_OBJ = 0x10,NA_OTHER_OBJ = 0x20,NA_ACL_DEFAULT = 0x1000,NA_READ = 0x4,NA_WRITE = 0x2,NA_EXEC = 0x1,NA_ACL = 0x1,NA_ACLCNT = 0x2,NA_DFACL = 0x4,NA_DFACLCNT = 0x8,};
enum MACRO_NAA {NAA_ID_IEEE = 1,NAA_ID_IEEE_EXTENDED = 2,};
enum MACRO_NADDR {NADDR = 13,};
enum MACRO_NAMESERVER {NAMESERVER_PORT = 53,};
enum MACRO_NANOSEC {NANOSEC = 1000000000,};
enum MACRO_NBAND {NBAND = 256,};
enum MACRO_NBBY {NBBY = 8,};
enum MACRO_NBITSMAJOR {NBITSMAJOR = 14,};
enum MACRO_NBITSMAJOR32 {NBITSMAJOR32 = 14,};
enum MACRO_NBITSMINOR {NBITSMINOR = 18,};
enum MACRO_NBITSMINOR32 {NBITSMINOR32 = 18,};
enum MACRO_NBPSCTR {NBPSCTR = 512,};
enum MACRO_NBRA {NBRA = 9,};
enum MACRO_NC {NC_TPI_CLTS = 1,NC_TPI_COTS = 2,NC_TPI_COTS_ORD = 3,NC_TPI_RAW = 4,NC_NOFLAG = 0,NC_VISIBLE = 1,NC_BROADCAST = 2,};
enum MACRO_NCARGS {NCARGS = 1048576,};
enum MACRO_NCARGS32 {NCARGS32 = 0x100000,NCARGS64 = 0x200000,};
enum MACRO_NCBCLASS {NCBCLASS = 13,};
enum MACRO_NCBRW {NCBRW = 0x9,};
enum MACRO_NCC {NCC = 8,NCCS = 19,};
enum MACRO_NCR53C90 {NCR53C90 = 0,ESP100A = 1,};
enum MACRO_NCR53C90A {NCR53C90A = 1,ESP236 = 2,};
enum MACRO_ND {ND_HOSTSERV = 0,ND_HOSTSERVLIST = 1,ND_ADDR = 2,ND_ADDRLIST = 3,ND_TRY_AGAIN = -5,ND_NO_RECOVERY = -4,ND_NO_DATA = -3,ND_NO_ADDRESS = -3,ND_BADARG = -2,ND_NOMEM = -1,ND_OK = 0,ND_NOHOST = 1,ND_NOSERV = 2,ND_NOSYM = 3,ND_OPEN = 4,ND_ACCESS = 5,ND_UKNWN = 6,ND_NOCTRL = 7,ND_FAILCTRL = 8,ND_SYSTEM = 9,ND_SET_BROADCAST = 1,ND_SET_RESERVEDPORT = 2,ND_CHECK_RESERVEDPORT = 3,ND_MERGEADDR = 4,};
enum MACRO_NDADDR {NDADDR = 12,};
enum MACRO_NDEFECT {ST506_NDEFECT = 127,ESDI_NDEFECT = 127,};
enum MACRO_NDENSITIES {NDENSITIES = 4,};
enum MACRO_NDF {NDF_ISROUTER_ON = 0x1,NDF_ISROUTER_OFF = 0x2,NDF_ANYCAST_ON = 0x4,NDF_ANYCAST_OFF = 0x8,NDF_PROXY_ON = 0x10,NDF_PROXY_OFF = 0x20,};
enum MACRO_NDKBAD {NDKBAD = 126,};
enum MACRO_NDKMAP {NDKMAP = 8,};
enum MACRO_NDM {NDM = 0x20,};
enum MACRO_ND_BASE {ND_BASE = 19968,ND_GET = 19968,ND_SET = 19969,};
enum MACRO_ND_MAX {ND_MAX_HDW_LEN = 64,ND_UNCHANGED = 0,ND_INCOMPLETE = 1,ND_REACHABLE = 2,ND_STALE = 3,ND_DELAY = 4,ND_PROBE = 5,ND_UNREACHABLE = 6,ND_STATE_VALID_MIN = 0,ND_STATE_VALID_MAX = 6,};
enum MACRO_ND_RA {ND_RA_FLAG_OTHER = 0x40,ND_RA_FLAG_MANAGED = 0x80,ND_NA_FLAG_ROUTER = 0x80000000,ND_NA_FLAG_SOLICITED = 0x40000000,ND_NA_FLAG_OVERRIDE = 0x20000000,ND_OPT_SOURCE_LINKADDR = 0x1,ND_OPT_TARGET_LINKADDR = 0x2,ND_OPT_PREFIX_INFORMATION = 0x3,ND_OPT_REDIRECTED_HEADER = 0x4,ND_OPT_MTU = 0x5,ND_OPT_PI_FLAG_AUTO = 0x40,ND_OPT_PI_FLAG_ONLINK = 0x80,ND_MAX_INITIAL_RTR_ADVERT_INTERVAL = 0x3E80,ND_MAX_INITIAL_RTR_ADVERTISEMENTS = 0x3,ND_MAX_FINAL_RTR_ADVERTISEMENTS = 0x3,ND_MIN_DELAY_BETWEEN_RAS = 0xBB8,ND_MAX_RA_DELAY_TIME = 0x1F4,ND_MAX_RTR_SOLICITATION_DELAY = 0x3E8,ND_RTR_SOLICITATION_INTERVAL = 0xFA0,ND_MAX_RTR_SOLICITATIONS = 0x3,ND_MAX_MULTICAST_SOLICIT = 0x3,ND_MAX_UNICAST_SOLICIT = 0x3,ND_MAX_ANYCAST_DELAY_TIME = 0x3E8,ND_MAX_NEIGHBOR_ADVERTISEMENT = 0x3,ND_REACHABLE_TIME = 0x7530,ND_RETRANS_TIMER = 0x3E8,ND_DELAY_FIRST_PROBE_TIME = 0x1388,ND_MAX_REACHTIME = 0x36EE80,ND_MAX_REACHRETRANSTIME = 0x186A0,};
enum MACRO_ND_ROUTER {ND_ROUTER_SOLICIT = 133,ND_ROUTER_ADVERT = 134,ND_NEIGHBOR_SOLICIT = 135,ND_NEIGHBOR_ADVERT = 136,ND_REDIRECT = 137,};
enum MACRO_NETDB {NETDB_INTERNAL = -1,NETDB_SUCCESS = 0,};
enum MACRO_NEW {NEW_ENV_VAR = 0,NEW_ENV_VALUE = 1,};
enum MACRO_NEWLINE {NEWLINE = 3,TAB = 4,};
enum MACRO_NEW_C {NEW_C = 0x40,NEW_I = 0x20,NEW_S = 0x8,NEW_A = 0x4,NEW_W = 0x2,NEW_U = 0x1,};
enum MACRO_NFF {NFF = 5,};
enum MACRO_NFS {NFS_PROGRAM = 100003,NFS_VERSMIN = 2,NFS_VERSMAX = 3,NFS_VERSION = 2,NFS_PORT = 2049,NFS_MAXDATA = 8192,NFS_MAXNAMLEN = 255,NFS_MAXPATHLEN = 1024,NFS_TIMEO = 11,NFS_RETRIES = 5,NFS_COTS_TIMEO = 600,NFS_UID_NOBODY = -2,NFS_GID_NOBODY = -2,};
enum MACRO_NFS3 {NFS3_CURFHSIZE = 32,};
enum MACRO_NFS3_FHSIZE {NFS3_FHSIZE = 64,NFS3_COOKIEVERFSIZE = 8,NFS3_CREATEVERFSIZE = 8,NFS3_WRITEVERFSIZE = 8,};
enum MACRO_NFS3_PROGRAM {NFS3_PROGRAM = 100003,};
enum MACRO_NFSAUTH {NFSAUTH_DENIED = 0x1,NFSAUTH_RO = 0x2,NFSAUTH_RW = 0x4,NFSAUTH_ROOT = 0x8,NFSAUTH_DROP = 0x10,NFSAUTH_MAPNONE = 0x20,NFSAUTH_PROG = 0x18787,NFSAUTH_VERS = 0x1,NFSAUTH_ACCESS = 0x1,};
enum MACRO_NFSL {NFSL_ALL = 0x1,NFSL_RENAME = 0x2,NFSL_SYNC = 0x4,};
enum MACRO_NFSLOG {NFSLOG_PROGRAM = 42,NFSLOG_VERSION = 1,NFSLOG_VERSMIN = 1,NFSLOG_VERSMAX = 1,NFSLOG_NULL = 0,NFSLOG_SHARE = 1,NFSLOG_UNSHARE = 2,NFSLOG_LOOKUP = 3,NFSLOG_GETFH = 4,NFSLOG_BUF_VERSION = 1,};
enum MACRO_NFSMNT {NFSMNT_SOFT = 0x1,NFSMNT_WSIZE = 0x2,NFSMNT_RSIZE = 0x4,NFSMNT_TIMEO = 0x8,NFSMNT_RETRANS = 0x10,NFSMNT_HOSTNAME = 0x20,NFSMNT_INT = 0x40,NFSMNT_NOAC = 0x80,NFSMNT_ACREGMIN = 0x100,NFSMNT_ACREGMAX = 0x200,NFSMNT_ACDIRMIN = 0x400,NFSMNT_ACDIRMAX = 0x800,NFSMNT_SECURE = 0x1000,NFSMNT_NOCTO = 0x2000,NFSMNT_KNCONF = 0x4000,NFSMNT_GRPID = 0x8000,NFSMNT_RPCTIMESYNC = 0x10000,NFSMNT_KERBEROS = 0x20000,NFSMNT_POSIX = 0x40000,NFSMNT_LLOCK = 0x80000,NFSMNT_LOOPBACK = 0x100000,NFSMNT_SEMISOFT = 0x200000,NFSMNT_NOPRINT = 0x400000,NFSMNT_NEWARGS = 0x800000,NFSMNT_DIRECTIO = 0x1000000,};
enum MACRO_NFSPROC3 {NFSPROC3_NULL = 0,NFSPROC3_GETATTR = 1,NFSPROC3_SETATTR = 2,NFSPROC3_LOOKUP = 3,NFSPROC3_ACCESS = 4,NFSPROC3_READLINK = 5,NFSPROC3_READ = 6,NFSPROC3_WRITE = 7,NFSPROC3_CREATE = 8,NFSPROC3_MKDIR = 9,NFSPROC3_SYMLINK = 10,NFSPROC3_MKNOD = 11,NFSPROC3_REMOVE = 12,NFSPROC3_RMDIR = 13,NFSPROC3_RENAME = 14,NFSPROC3_LINK = 15,NFSPROC3_READDIR = 16,NFSPROC3_READDIRPLUS = 17,NFSPROC3_FSSTAT = 18,NFSPROC3_FSINFO = 19,NFSPROC3_PATHCONF = 20,NFSPROC3_COMMIT = 21,};
enum MACRO_NFS_ACL {NFS_ACL_MAX_ENTRIES = 1024,};
enum MACRO_NFS_ACL_PROGRAM {NFS_ACL_PROGRAM = 100227,NFS_ACL_VERSMIN = 2,NFS_ACL_VERSMAX = 3,NFS_ACL_V2 = 2,};
enum MACRO_NFS_ACL_V3 {NFS_ACL_V3 = 3,};
enum MACRO_NFS_ARGS {NFS_ARGS_EXTA = 1,NFS_ARGS_EXTB = 2,};
enum MACRO_NFS_CALLTYPES {NFS_CALLTYPES = 3,};
enum MACRO_NFS_FHANDLE {NFS_FHANDLE_LEN = 64,};
enum MACRO_NFS_FIFO : __int64 {NFS_FIFO_MODE = 8192,NFS_FIFO_DEV = 4294967295,NFS_FHSIZE = 32,};
enum MACRO_NFS_OWNER {NFS_OWNER_MAGIC = 0x1D81E,};
enum MACRO_NFS_V3 {NFS_V3 = 3,};
enum MACRO_NGREG {NGREG = 19,};
enum MACRO_NGROUPS {NGROUPS_UMIN = 0,NGROUPS_UMAX = 32,NGROUPS_MAX_DEFAULT = 16,};
enum MACRO_NGRPS {NGRPS = 16,};
enum MACRO_NGRPS_LOOPBACK {NGRPS_LOOPBACK = 64,};
enum MACRO_NHASH {DELTAMAP_NHASH = 512,LOGMAP_NHASH = 2048,};
enum MACRO_NI {NI_MAXHOST = 1025,NI_MAXSERV = 32,NI_NOFQDN = 1,NI_NUMERICHOST = 2,NI_NAMEREQD = 4,NI_NUMERICSERV = 8,NI_DGRAM = 16,};
enum MACRO_NIADDR {NIADDR = 3,};
enum MACRO_NIS {NIS_MAXSTRINGLEN = 255,NIS_MAXNAMELEN = 1024,NIS_MAXATTRNAME = 32,NIS_MAXATTRVAL = 2048,NIS_MAXCOLUMNS = 64,NIS_MAXATTR = 16,NIS_MAXPATH = 1024,NIS_MAXREPLICAS = 128,NIS_MAXLINKS = 16,NIS_PK_NONE = 0,NIS_PK_DH = 1,NIS_PK_RSA = 2,NIS_PK_KERB = 3,NIS_PK_DHEXT = 4,};
enum MACRO_NISPASSWD {NISPASSWD_PROG = 100303,NISPASSWD_VERS = 1,NISPASSWD_AUTHENTICATE = 1,NISPASSWD_UPDATE = 2,};
enum MACRO_NIS_BOUND {NIS_BOUND = 0x1,NIS_TRANSIENT_ERRORS = 0x2,};
enum MACRO_NIS_READ {NIS_READ_ACC = 1,NIS_MODIFY_ACC = 2,NIS_CREATE_ACC = 4,NIS_DESTROY_ACC = 8,};
enum MACRO_NL {NL_SETD = 1,NL_CAT_LOCALE = -1,};
enum MACRO_NL0 {NL0 = 0,NL1 = 256,CRDLY = 1536,};
enum MACRO_NL2 {NL2 = 0x200,};
enum MACRO_NL3 {NL3 = 0x300,NOAL = 0x800,};
enum MACRO_NLM {NLM_PROG = 100021,NLM_VERS = 1,NLM_TEST = 1,NLM_LOCK = 2,NLM_CANCEL = 3,NLM_UNLOCK = 4,NLM_GRANTED = 5,NLM_TEST_MSG = 6,NLM_LOCK_MSG = 7,NLM_CANCEL_MSG = 8,NLM_UNLOCK_MSG = 9,NLM_GRANTED_MSG = 10,NLM_TEST_RES = 11,NLM_LOCK_RES = 12,NLM_CANCEL_RES = 13,NLM_UNLOCK_RES = 14,NLM_GRANTED_RES = 15,NLM_VERS2 = 2,};
enum MACRO_NLM4 {NLM4_VERS = 4,};
enum MACRO_NLMPROC4 {NLMPROC4_NULL = 0,NLMPROC4_TEST = 1,NLMPROC4_LOCK = 2,NLMPROC4_CANCEL = 3,NLMPROC4_UNLOCK = 4,NLMPROC4_GRANTED = 5,NLMPROC4_TEST_MSG = 6,NLMPROC4_LOCK_MSG = 7,NLMPROC4_CANCEL_MSG = 8,NLMPROC4_UNLOCK_MSG = 9,NLMPROC4_GRANTED_MSG = 10,NLMPROC4_TEST_RES = 11,NLMPROC4_LOCK_RES = 12,NLMPROC4_CANCEL_RES = 13,NLMPROC4_UNLOCK_RES = 14,NLMPROC4_GRANTED_RES = 15,NLMPROC4_SHARE = 20,NLMPROC4_UNSHARE = 21,NLMPROC4_NM_LOCK = 22,NLMPROC4_FREE_ALL = 23,};
enum MACRO_NLM_NUMRPCS {NLM_NUMRPCS = 24,};
enum MACRO_NLM_VERS3 {NLM_VERS3 = 3,NLM_SHARE = 20,NLM_UNSHARE = 21,NLM_NM_LOCK = 22,NLM_FREE_ALL = 23,};
enum MACRO_NLSSTART {NLSSTART = 0,NLSFORMAT = 2,};
enum MACRO_NLSUNKNOWN {NLSUNKNOWN = 3,NLSDISABLED = 4,};
enum MACRO_NL_0 {NL = 0x5C,};
enum MACRO_NL_ARGMAX {NL_ARGMAX = 9,NL_LANGMAX = 14,NL_MSGMAX = 32767,NL_NMAX = 1,NL_SETMAX = 255,NL_TEXTMAX = 2048,};
enum MACRO_NMAGIC {NMAGIC = 0x108,};
enum MACRO_NMOUNT {NMOUNT = 40,CANBSIZ = 256,};
enum MACRO_NMSTATES {NMSTATES = 10,};
enum MACRO_NO {NO_LOCKS_HELD = 1,NO_COMPETING_THREADS = 1,};
enum MACRO_NOASSIGN {NOASSIGN = 0x1,NORUN = 0x2,};
enum MACRO_NOBODY {UID_NOBODY = 60001,GID_NOBODY = 60001,};
enum MACRO_NOBUSY {NOBUSY_POLLTIME = 5,};
enum MACRO_NOCLASS {NOCLASS = -1,};
enum MACRO_NOCRED {NOCRED = 0,};
enum MACRO_NODEID {NODEID_UNKNOWN = 0,};
enum MACRO_NODEV : __int64 {NODEV = 4294967295,};
enum MACRO_NOEXPR {NOEXPR = 57,};
enum MACRO_NOFILE {NOFILE = 20,};
enum MACRO_NOKEY {NOKEY = -1,};
enum MACRO_NON {NON_FATALOC = 24,NON_FATAL = 16777216,};
enum MACRO_NONL {NONL = 0x30A,};
enum MACRO_NONROOT {NONROOT_USR = 2,};
enum MACRO_NONROOT_USRX {NONROOT_USRX = 2,};
enum MACRO_NOPID {NOPID = -1,};
enum MACRO_NOPOST {NOPOST = 0x1,NOISIG = 0x2,STOPB = 0x4,};
enum MACRO_NORMAL {NORMAL = 0,ABORT1 = 1,COMPOSE1 = 2,};
enum MACRO_NORMALRETURN {NORMALRETURN = 0,JUSTRETURN = 1,};
enum MACRO_NOSCROLL {NOSCROLL = 0x303,};
enum MACRO_NOSTR {NOSTR = 42,};
enum MACRO_NOT {NOT_OK = 0,};
enum MACRO_NOTACTIVE {NOTACTIVE = 0,ACTIVE = 128,};
enum MACRO_NOTPRESENT {NOTPRESENT = 0xFF,};
enum MACRO_NOT_IN {NOT_IN_HW = 0x100,};
enum MACRO_NOT_READABLE {NOT_READABLE = 7,};
enum MACRO_NOVELL {NOVELL_LENGTH = 0x4,NOVELL_TYPE = 0x3,};
enum MACRO_NO_ANS {NO_ANS = -3,};
enum MACRO_NO_AUTH {NO_AUTH = 0,};
enum MACRO_NO_AUTHINFO {NO_AUTHINFO = 131072,};
enum MACRO_NO_BD {NO_BD_A = -10,NO_BD_K = -11,};
enum MACRO_NO_CACHE {NO_CACHE = 16,};
enum MACRO_NO_COLOR {NO_COLOR = 0,NO_CHECK_CYCLE = 0,};
enum MACRO_NO_IP {NO_IP_TP_CKSUM = 0xFFFF,};
enum MACRO_NO_JUSTIFICATION {NO_JUSTIFICATION = 0,};
enum MACRO_NO_Ldv {NO_Ldv = -7,};
enum MACRO_NO_RECOVERY {NO_RECOVERY = 3,NO_DATA = 4,NO_ADDRESS = 4,};
enum MACRO_NO_TERMINAL {NO_TERMINAL = 2,};
enum MACRO_NO_TIMEOUTS {NO_TIMEOUTS = 0x0,};
enum MACRO_NPCHASH {NPCHASH = 1,};
enum MACRO_NPORT {NPORT_NOT_AVAIL_TEMP = 0x3,NPORT_NOT_AVAIL_PERM = 0x4,};
enum MACRO_NPRGREG {NPRGREG = 38,};
enum MACRO_NPRXFILLER {NPRXFILLER = 8,};
enum MACRO_NPRXGREG {NPRXGREG = 8,};
enum MACRO_NPRXOREG {NPRXOREG = 8,};
enum MACRO_NQFRETRY {NQFRETRY = 10,};
enum MACRO_NRBRW {NRBRW = 0x7,};
enum MACRO_NS {NS_PACKETSZ = 512,NS_MAXDNAME = 1025,NS_MAXCDNAME = 255,NS_MAXLABEL = 63,NS_HFIXEDSZ = 12,NS_QFIXEDSZ = 4,NS_RRFIXEDSZ = 10,NS_INT32SZ = 4,NS_INT16SZ = 2,NS_INT8SZ = 1,NS_INADDRSZ = 4,NS_IN6ADDRSZ = 16,NS_CMPRSFLGS = 192,NS_DEFAULTPORT = 53,NS_KEY_TYPEMASK = 49152,NS_KEY_TYPE_AUTH_CONF = 0,NS_KEY_TYPE_CONF_ONLY = 32768,NS_KEY_TYPE_AUTH_ONLY = 16384,NS_KEY_TYPE_NO_KEY = 49152,NS_KEY_NO_AUTH = 32768,NS_KEY_NO_CONF = 16384,NS_KEY_EXPERIMENTAL = 8192,NS_KEY_RESERVED3 = 4096,NS_KEY_RESERVED4 = 2048,NS_KEY_USERACCOUNT = 1024,NS_KEY_ENTITY = 512,NS_KEY_ZONEKEY = 256,NS_KEY_IPSEC = 128,NS_KEY_EMAIL = 64,NS_KEY_RESERVED10 = 32,NS_KEY_RESERVED11 = 16,NS_KEY_SIGNATORYMASK = 15,NS_KEY_RESERVED_BITMASK = 6192,NS_ALG_MD5RSA = 1,NS_ALG_EXPIRE_ONLY = 253,NS_ALG_PRIVATE_OID = 254,NS_MD5RSA_MIN_BITS = 512,NS_MD5RSA_MAX_BITS = 2552,NS_MD5RSA_MAX_BYTES = 5107,NS_MD5RSA_MAX_BASE64 = 6812,NS_SIG_TYPE = 0,NS_SIG_ALG = 2,NS_SIG_LABELS = 3,NS_SIG_OTTL = 4,NS_SIG_EXPIR = 8,NS_SIG_SIGNED = 12,NS_SIG_FOOT = 16,NS_SIG_SIGNER = 18,NS_NXT_BITS = 8,};
enum MACRO_NSIG {NSIG = 46,};
enum MACRO_NSIGBUS {NSIGBUS = 3,};
enum MACRO_NSIGCLD {NSIGCLD = 6,};
enum MACRO_NSIGEMT {NSIGEMT = 2,};
enum MACRO_NSIGFPE {NSIGFPE = 8,};
enum MACRO_NSIGILL {NSIGILL = 8,};
enum MACRO_NSIGPOLL {NSIGPOLL = 6,};
enum MACRO_NSIGPROF {NSIGPROF = 1,};
enum MACRO_NSIGSEGV {NSIGSEGV = 2,};
enum MACRO_NSIGTRAP {NSIGTRAP = 5,};
enum MACRO_NSLC {NSLC = 18,};
enum MACRO_NSM {NSM_ADDR_PROGRAM = 100133,NSM_ADDR_V1 = 1,};
enum MACRO_NSMADDRPROC1 {NSMADDRPROC1_NULL = 0,NSMADDRPROC1_REG = 1,NSMADDRPROC1_UNREG = 2,};
enum MACRO_NSPEEDS {NSPEEDS = 4,};
enum MACRO_NSS {NSS_DBOP_DESTRUCTOR = 0,NSS_DBOP_ENDENT = 1,NSS_DBOP_SETENT = 2,NSS_DBOP_GETENT = 3,NSS_DBOP_next_iter = 4,NSS_DBOP_next_noiter = 1,NSS_DBOP_next_ipv6_iter = 6,NSS_INCLUDE_UNSAFE = 1,NSS_BUFSIZ = 1024,NSS_LINELEN_GROUP = 4096,NSS_LINELEN_HOSTS = 2048,NSS_LINELEN_IPNODES = 2048,NSS_LINELEN_NETMASKS = 1024,NSS_LINELEN_NETWORKS = 1024,NSS_LINELEN_PASSWD = 1024,NSS_LINELEN_PRINTERS = 1024,NSS_LINELEN_PROTOCOLS = 1024,NSS_LINELEN_PUBLICKEY = 1024,NSS_LINELEN_RPC = 1024,NSS_LINELEN_SERVICES = 1024,NSS_LINELEN_SHADOW = 1024,NSS_LINELEN_ETHERS = 1024,NSS_LINELEN_BOOTPARAMS = 1024,NSS_LINELEN_ATTRDB = 1024,NSS_LINELEN_AUDITUSER = 1024,NSS_LINELEN_AUTHATTR = 1024,NSS_LINELEN_EXECATTR = 1024,NSS_LINELEN_PROFATTR = 1024,NSS_LINELEN_USERATTR = 1024,NSS_MMAPLEN_EXECATTR = 8192,NSS_BUFLEN_NETGROUP = 523,NSS_BUFLEN_NETWORKS = 1024,NSS_BUFLEN_PASSWD = 1024,NSS_BUFLEN_PROTOCOLS = 1024,NSS_BUFLEN_PUBLICKEY = 1024,NSS_BUFLEN_RPC = 1024,NSS_BUFLEN_SERVICES = 1024,NSS_BUFLEN_SHADOW = 1024,NSS_BUFLEN_ETHERS = 1024,NSS_BUFLEN_BOOTPARAMS = 1024,NSS_BUFLEN_ATTRDB = 1024,NSS_BUFLEN_AUDITUSER = 1024,NSS_BUFLEN_AUTHATTR = 1024,NSS_BUFLEN_EXECATTR = 1024,NSS_BUFLEN_PROFATTR = 1024,NSS_BUFLEN_USERATTR = 1024,NSS_STR_PARSE_SUCCESS = 0,NSS_STR_PARSE_PARSE = 1,NSS_STR_PARSE_ERANGE = 2,NSS_DBOP_GROUP_BYNAME = 4,NSS_DBOP_GROUP_BYGID = 5,NSS_DBOP_GROUP_BYMEMBER = 6,NSS_DBOP_PASSWD_BYNAME = 4,NSS_DBOP_PASSWD_BYUID = 5,NSS_DBOP_SHADOW_BYNAME = 4,NSS_DBOP_HOSTS_BYNAME = 4,NSS_DBOP_HOSTS_BYADDR = 5,NSS_DBOP_IPNODES_BYNAME = 4,NSS_DBOP_IPNODES_BYADDR = 5,NSS_DBOP_NAME_2ADDR = 6,NSS_DBOP_ADDR_2NAME = 7,NSS_DBOP_RPC_BYNAME = 4,NSS_DBOP_RPC_BYNUMBER = 5,NSS_DBOP_NETWORKS_BYNAME = 4,NSS_DBOP_NETWORKS_BYADDR = 5,NSS_DBOP_SERVICES_BYNAME = 4,NSS_DBOP_SERVICES_BYPORT = 5,NSS_DBOP_PROTOCOLS_BYNAME = 4,NSS_DBOP_PROTOCOLS_BYNUMBER = 5,NSS_DBOP_ETHERS_HOSTTON = 1,NSS_DBOP_ETHERS_NTOHOST = 2,NSS_DBOP_BOOTPARAMS_BYNAME = 1,NSS_DBOP_NETMASKS_BYNET = 1,NSS_DBOP_PRINTERS_BYNAME = 4,NSS_DBOP_NETGROUP_IN = 4,NSS_DBOP_NETGROUP_SET = 5,NSS_DBOP_KEYS_BYNAME = 4,NSS_DBOP_ATTRDB_BYNAME = 4,NSS_DBOP_AUDITUSER_BYNAME = 4,NSS_DBOP_AUTHATTR_BYNAME = 4,NSS_DBOP_EXECATTR_BYNAME = 4,NSS_DBOP_EXECATTR_BYID = 5,NSS_DBOP_EXECATTR_BYNAMEID = 6,NSS_DBOP_PROFATTR_BYNAME = 4,NSS_DBOP_USERATTR_BYNAME = 4,};
enum MACRO_NSYSCALL {NSYSCALL = 256,};
enum MACRO_NT {NT_PRSTATUS = 1,NT_PRFPREG = 2,NT_PRPSINFO = 3,NT_PRXREG = 4,NT_PLATFORM = 5,NT_AUXV = 6,NT_GWINDOWS = 7,NT_ASRS = 8,NT_PSTATUS = 10,NT_PSINFO = 13,NT_PRCRED = 14,NT_UTSNAME = 15,NT_LWPSTATUS = 16,NT_LWPSINFO = 17,};
enum MACRO_NTAGS {NTAGS = 256,};
enum MACRO_NTARGETS {NTARGETS = 8,};
enum MACRO_NTARGETS_WIDE {NTARGETS_WIDE = 16,};
enum MACRO_NTREC {NTREC = 10,HIGHDENSITYTREC = 32,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_NULLPROC {NULLPROC = 0,};
enum MACRO_NULL_xdrproc {NULL_xdrproc_t = 0,};
enum MACRO_NUM {NUM_ATTRIBUTES = 9,};
enum MACRO_NUMERALS {NUMERALS_NOMINAL = 0x100000,NUMERALS_NATIONAL = 0x200000,NUMERALS_CONTEXTUAL = 0x300000,};
enum MACRO_NUMLOCK {NUMLOCK = 11,NUMLOCKMASK = 2048,};
enum MACRO_NUM_IMPL {NUM_IMPL_SENSE_KEYS = 7,};
enum MACRO_NUM_INTS {NUM_INTS = 2,NUM_REGS = 1,};
enum MACRO_NUM_SENSE {NUM_SENSE_KEYS = 16,};
enum MACRO_NVECT {NVECT = 17,};
enum MACRO_NVR {NVR_OFFSET = 512,};
enum MACRO_NVRAM {NVRAM_WARN = 0x40000000,NVRAM_FAIL = 0x20000000,};
enum MACRO_NWINDOW {NWINDOW = 7,};
enum MACRO_NZERO {NZERO = 20,};
enum MACRO_N_BTMASK {N_BTMASK = 0xF,N_TMASK = 0x30,N_TMASK1 = 0xC0,N_TMASK2 = 0xF0,N_BTSHFT = 0x4,N_TSHIFT = 0x2,};
enum MACRO_N_STC {N_STC = 4,};
enum MACRO_N_UNDEF {N_UNDEF = 0,N_ABS = -1,N_DEBUG = -2,N_TV = 65533,};
enum MACRO_O {O_RDONLY = 0,O_WRONLY = 1,O_RDWR = 2,O_NDELAY = 4,O_APPEND = 8,O_SYNC = 16,O_DSYNC = 64,O_RSYNC = 32768,O_NONBLOCK = 128,O_LARGEFILE = 8192,O_CREAT = 256,O_TRUNC = 512,O_EXCL = 1024,O_NOCTTY = 2048,};
enum MACRO_O0 {O0 = 11,};
enum MACRO_O1 {O1 = 12,};
enum MACRO_O2 {O2 = 13,};
enum MACRO_O3 {O3 = 14,};
enum MACRO_O4 {O4 = 15,O5 = 16,};
enum MACRO_O6 {O6 = 17,};
enum MACRO_O7 {O7 = 18,};
enum MACRO_OBIE {OBIE_NORESET = 0x80,OBIE_NOLOOP = 0x40,OBIE_CA = 0x20,OBIE_IE = 0x10,OBIE_LEVEL2 = 0x4,OBIE_BUSERR = 0x2,OBIE_INTR = 0x1,};
enum MACRO_OBJ {CLASS_OBJ = 0x10,OTHER_OBJ = 0x20,};
enum MACRO_OBP {OBP_MAGIC = 0x10010407,};
enum MACRO_OBP_MB {OBP_MB_IDLE_LOW = 0x90,OBP_MB_IDLE_HIGH = 0xEF,OBP_MB_ACTIVE = 0xF0,OBP_MB_EXIT_STOP = 0xFB,OBP_MB_ENTER_IDLE = 0xFC,OBP_MB_BRKPT_IDLE = 0xFD,OBP_MB_WATCHDOG_STOP = 0xFE,};
enum MACRO_OBP_NONODE {OBP_NONODE = 0,OBP_BADNODE = -1,OBP_MAXDRVNAME = 32,OBP_MAXPROPNAME = 32,OBP_MAXPATHLEN = 256,OBP_STACKDEPTH = 85,};
enum MACRO_OCF {OCF_Timeout_NoBlock = 0x1,OCF_Success = 0x0,OCF_NoCard = 0x1,OCF_CardError = 0x2,OCF_ReaderError = 0x3,OCF_ParameterError = 0x4,OCF_OperationTimeout = 0x5,OCF_ResourceUnavailable = 0x6,OCF_CardLocked = 0x7,OCF_DuplicateClient = 0x8,OCF_DuplicateHandler = 0x9,OCF_DuplicateEvent = 0xA,OCF_VerifyError = 0xB,OCF_PINAlreadySet = 0xC,OCF_NoPermission = 0xD,OCF_UnknownResource = 0xE,OCF_EncodingError = 0xF,OCF_ServerError = 0x10,OCF_VersionMismatch = 0x11,OCF_CardUnlocked = 0x12,OCF_Exception = 0x14,OCF_NoSuchProperty = 0x15,OCF_InvalidClientHandle = 0x1E,OCF_InvalidCardHandle = 0x1F,OCF_InvalidEventHandle = 0x20,OCF_NoReadersConfigured = 0x21,OCF_NoCardsConfigured = 0x22,OCF_AuthenticationError = 0x46,OCF_AuthenticationFailed = 0x47,OCF_AuthOp = 0x50,OCF_InvalidPin = 0x51,OCF_InvalidPassword = 0x52,OCF_UnsupportedAuthMech = 0x53,OCF_UnknownError = 0x5A,OCF_CardSpec_UseHandle = 0x1,OCF_Event_CardInserted = 0x1,OCF_Event_CardRemoved = 0x2,OCF_Event_CardReset = 0x4,OCF_Event_CardError = 0x8,OCF_Event_Exception = 0x10,};
enum MACRO_OCFAuth {OCFAuth_Loopback = 0,OCFAuth_Enter_PIN = 1,OCFAuth_Enter_PIN_External = 2,OCFAuth_Enter_Password = 3,OCFAuth_Enter_Username = 4,OCFAuth_Insert_Card = 5,OCFAuth_Invalid_PIN = 20,OCFAuth_Invalid_Password = 21,OCFAuth_Invalid_Username = 22,OCFAuth_Auth_Failure = 23,OCFAuth_Auth_Error = 24,OCFAuth_No_Card = 25,OCFAuth_Invalid_Card = 26,OCFAuth_Verify_Password = 40,OCFAuth_TextMsg = 60,OCFAuth_TextMsg_NOCONF = 61,OCFAuth_TextMsg_DELETE = 62,OCFAuth_TextMsg_INPUT = 63,OCFAuth_ErrorMsg = 80,OCFAuth_ErrorMsg_NOCONF = 81,OCFAuth_ErrorMsg_DELETE = 82,OCFAuth_Success = 0,OCFAuth_Internal_Error = 1,OCFAuth_Retry_Operation = 2,OCFAuth_Unknown_Tag = 3,OCFAuth_Conversation_Interrupt = 4,OCFAuth_Failed = 5,OCFAuth_Password_Verify_OK = 20,OCFAuth_Password_Verify_ERROR = 21,OCFAuth_Password_Verify_UNABLE = 22,};
enum MACRO_OCTET {OCTET_LENGTH = 32,};
enum MACRO_OFFSET {DTR_OFFSET = 0x400,CD180_OFFSET = 0x800,IACK_OFFSET = 0xC00,PPC_OFFSET = 0xE00,};
enum MACRO_OFLOW {OFLOW_CTL = 0x2,};
enum MACRO_OFS {OFS_MAGIC = 60011,NFS_MAGIC = 60012,};
enum MACRO_OIOC {OIOC = 20224,};
enum MACRO_OK {R_OK = 4,W_OK = 2,X_OK = 1,F_OK = 0,};
enum MACRO_OLD {OLD_ENV_VAR = 1,OLD_ENV_VALUE = 0,};
enum MACRO_OLDDEV {OLDDEV = 0,NEWDEV = 1,};
enum MACRO_OLD_ALLOW {OLD_ALLOW = 1,OLD_DISALLOW = 0,};
enum MACRO_OLD_MAXFIDSZ {OLD_MAXFIDSZ = 16,};
enum MACRO_OMAGIC {OMAGIC = 0x107,};
enum MACRO_OMAXMAJ {OMAXMAJ = 0x7F,};
enum MACRO_OMAXMIN {OMAXMIN = 0xFF,};
enum MACRO_ON {CTS_ON = 0x20,DSR_ON = 0x80,RTS_ON = 0x1,};
enum MACRO_ONBITSMAJOR {ONBITSMAJOR = 7,ONBITSMINOR = 8,};
enum MACRO_ONE {ONE_MEG = 1048576,};
enum MACRO_ONPAGE {ONPAGE = 32,};
enum MACRO_OOPS {OOPS = 0x301,};
enum MACRO_OP64R {OP64R_READY = 0,OP64R_UPGRADE_REQUIRED = 1,OP64R_UPGRADE_RECOMMENDED = 2,};
enum MACRO_OPENFAIL {OPENFAIL = -1,};
enum MACRO_OPOST {OPOST = 0x1,OLCUC = 0x2,ONLCR = 0x4,OCRNL = 0x8,ONOCR = 0x10,ONLRET = 0x20,OFILL = 0x40,OFDEL = 0x80,NLDLY = 0x100,};
enum MACRO_OPROMCHILD {OPROMCHILD = 20230,};
enum MACRO_OPROMCONS {OPROMCONS_NOT_WSCONS = 0,OPROMCONS_STDIN_IS_KBD = 1,OPROMCONS_STDOUT_IS_FB = 2,OPROMCONS_OPENPROM = 4,};
enum MACRO_OPROMDEV2PROMNAME {OPROMDEV2PROMNAME = 20239,};
enum MACRO_OPROMGETBOOTARGS {OPROMGETBOOTARGS = 20236,};
enum MACRO_OPROMGETCONS {OPROMGETCONS = 20234,};
enum MACRO_OPROMGETFBNAME {OPROMGETFBNAME = 20235,};
enum MACRO_OPROMGETOPT {OPROMGETOPT = 20225,};
enum MACRO_OPROMGETPROP {OPROMGETPROP = 20231,};
enum MACRO_OPROMGETPROPLEN {OPROMGETPROPLEN = 20241,};
enum MACRO_OPROMGETVERSION {OPROMGETVERSION = 20237,};
enum MACRO_OPROMMAXPARAM {OPROMMAXPARAM = 32768,};
enum MACRO_OPROMNEXT {OPROMNEXT = 20229,};
enum MACRO_OPROMNXTOPT {OPROMNXTOPT = 20227,};
enum MACRO_OPROMNXTPROP {OPROMNXTPROP = 20232,};
enum MACRO_OPROMPATH2DRV {OPROMPATH2DRV = 20238,};
enum MACRO_OPROMPROM2DEVNAME {OPROMPROM2DEVNAME = 20240,};
enum MACRO_OPROMREADY64 {OPROMREADY64 = 20242,};
enum MACRO_OPROMSETNODEID {OPROMSETNODEID = 20243,};
enum MACRO_OPROMSETOPT {OPROMSETOPT = 20226,};
enum MACRO_OPROMSETOPT2 {OPROMSETOPT2 = 20228,};
enum MACRO_OPROMU2P {OPROMU2P = 20233,};
enum MACRO_ORDINARY {ORDINARY = 0,CONTROL = 1,BACKSPACE = 2,};
enum MACRO_ORIENTATION {ORIENTATION_LTR = 0x1,ORIENTATION_RTL = 0x2,ORIENTATION_TTBRL = 0x3,ORIENTATION_TTBLR = 0x4,ORIENTATION_CONTEXTUAL = 0x5,};
enum MACRO_OSC {OSC_10 = 2,OSC_9 = 1,};
enum MACRO_OTHEROS {OTHEROS = 98,};
enum MACRO_OTTYDISC {OTTYDISC = 0,NETLDISC = 1,NTTYDISC = 2,};
enum MACRO_OTYP {OTYP_BLK = 0,OTYP_MNT = 1,OTYP_CHR = 2,OTYP_SWP = 3,OTYP_LYR = 4,};
enum MACRO_OTYPCNT {OTYPCNT = 5,};
enum MACRO_OUTLINE {OUTLINE = 131072,};
enum MACRO_OUTSCREEN {OUTSCREEN = 0,OUTUARTA = 1,OUTUARTB = 2,};
enum MACRO_OUTUARTC {OUTUARTC = 3,OUTUARTD = 4,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_O_ACCMODE {O_ACCMODE = 3,};
enum MACRO_O_BITSMAJOR {O_BITSMAJOR = 7,O_BITSMINOR = 8,O_MAXMAJ = 127,O_MAXMIN = 255,};
enum MACRO_O_ONEVALUE {O_ONEVALUE = 0x1,O_SHOWDESC = 0x2,O_ROWMAJOR = 0x4,O_IGNORECASE = 0x8,O_SHOWMATCH = 0x10,O_NONCYCLIC = 0x20,O_SELECTABLE = 0x1,};
enum MACRO_O_SI {O_SI_GETUDATA = 18789,};
enum MACRO_O_TANDEM {O_TANDEM = 0x1,O_CBREAK = 0x2,O_LCASE = 0x4,O_ECHO = 0x8,O_CRMOD = 0x10,O_RAW = 0x20,O_ODDP = 0x40,O_EVENP = 0x80,O_ANYP = 0xC0,O_NLDELAY = 0x300,O_NL0 = 0x0,O_NL1 = 0x100,O_NL2 = 0x200,O_NL3 = 0x300,O_TBDELAY = 0xC00,O_TAB0 = 0x0,O_TAB1 = 0x400,O_TAB2 = 0x800,O_XTABS = 0xC00,O_CRDELAY = 0x3000,O_CR0 = 0x0,O_CR1 = 0x1000,O_CR2 = 0x2000,O_CR3 = 0x3000,O_VTDELAY = 0x4000,O_FF0 = 0x0,O_FF1 = 0x4000,O_BSDELAY = 0x8000,O_BS0 = 0x0,O_BS1 = 0x8000,O_ALLDELAY = 0xFF00,O_CRTBS = 0x10000,O_PRTERA = 0x20000,O_CRTERA = 0x40000,O_TILDE = 0x80000,O_MDMBUF = 0x100000,O_LITOUT = 0x200000,O_TOSTOP = 0x400000,O_FLUSHO = 0x800000,O_NOHANG = 0x1000000,O_L001000 = 0x2000000,O_CRTKIL = 0x4000000,O_PASS8 = 0x8000000,O_CTLECH = 0x10000000,O_PENDIN = 0x20000000,O_DECCTQ = 0x40000000,O_NOFLSH = 0x80000000,};
enum MACRO_O_VISIBLE {O_VISIBLE = 0x1,O_ACTIVE = 0x2,O_PUBLIC = 0x4,O_EDIT = 0x8,O_WRAP = 0x10,O_BLANK = 0x20,O_AUTOSKIP = 0x40,O_NULLOK = 0x80,O_PASSOK = 0x100,O_STATIC = 0x200,O_NL_OVERLOAD = 0x1,O_BS_OVERLOAD = 0x2,};
enum MACRO_Orientation {Orientation = 1,Context = 2,TypeOfText = 4,ImplicitAlg = 8,Swapping = 16,Numerals = 32,TextShaping = 64,ActiveDirectional = 65536,ActiveShapeEditing = 131072,ShapeCharset = 262144,ShapeCharsetSize = 524288,ShapeContextSize = 1048576,InOutTextDescrMask = 2097152,InOnlyTextDescr = 4194304,OutOnlyTextDescr = 8388608,CheckMode = 16777216,QueryValueSize = 33554432,};
enum MACRO_P {P_MYPID = 0,P_MYID = -1,};
enum MACRO_P1284IOC {P1284IOC_ONE = 536899635,P1284IOC_TWO = 536899636,P1284IOC_FAKE_INTR = 536896054,};
enum MACRO_PACKETSZ {PACKETSZ = 512,MAXDNAME = 1025,};
enum MACRO_PAD {PAD_MACUSE = 0x1,PAD_MACREAD = 0x2,PAD_MACWRITE = 0x4,PAD_MACSEARCH = 0x8,PAD_MACKILL = 0x10,PAD_MACTRACE = 0x20,PAD_MACIOCTL = 0x40,PAD_MACMASK = 0x7E,PAD_SPRIVUSE = 0x80,PAD_FPRIVUSE = 0x100,PAD_NONATTR = 0x4000,PAD_FAILURE = 0x8000,};
enum MACRO_PAD0 {PAD0 = 0x70F,};
enum MACRO_PAD1 {PAD1 = 0x70C,};
enum MACRO_PAD2 {PAD2 = 0x70D,};
enum MACRO_PAD3 {PAD3 = 0x70E,};
enum MACRO_PAD4 {PAD4 = 0x709,};
enum MACRO_PAD5 {PAD5 = 0x70A,};
enum MACRO_PAD6 {PAD6 = 0x70B,};
enum MACRO_PAD7 {PAD7 = 0x705,};
enum MACRO_PAD8 {PAD8 = 0x706,};
enum MACRO_PAD9 {PAD9 = 0x707,};
enum MACRO_PADDOT {PADDOT = 0x710,};
enum MACRO_PADENTER {PADENTER = 0x711,};
enum MACRO_PADEQUAL {PADEQUAL = 0x700,};
enum MACRO_PADKEYS {PADKEYS = 0x700,};
enum MACRO_PADMINUS {PADMINUS = 0x703,};
enum MACRO_PADPLUS {PADPLUS = 0x708,};
enum MACRO_PADSEP {PADSEP = 0x704,};
enum MACRO_PADSLASH {PADSLASH = 0x701,};
enum MACRO_PADSTAR {PADSTAR = 0x702,};
enum MACRO_PAD_SAVPATH {PAD_SAVPATH = 0x1,PAD_MLD = 0x2,PAD_NOPATH = 0x4,PAD_ABSPATH = 0x8,PAD_NOATTRB = 0x10,PAD_SUSEROK = 0x20,PAD_SUSERNO = 0x40,PAD_LFLOAT = 0x80,PAD_NOAUDIT = 0x100,PAD_PATHFND = 0x200,PAD_SPRIV = 0x400,PAD_FPRIV = 0x800,PAD_SMAC = 0x1000,PAD_FMAC = 0x2000,PAD_AUDITME = 0x4000,PAD_IFLOAT = 0x8000,PAD_TRUE_CREATE = 0x10000,PAD_CORE = 0x20000,};
enum MACRO_PAGE {PAGE_HASHAVELEN = 4,PAGE_HASHVPSHIFT = 6,PAGE_IO_INUSE = 1,PAGE_IO_WANTED = 2,};
enum MACRO_PAGELENGTH {PAGELENGTH_MODE_CONTROL_SCSI3 = 0xA,};
enum MACRO_PAGELENGTH_DAD {PAGELENGTH_DAD_MODE_ERR_RECOV = 0xA,};
enum MACRO_PAGELENGTH_DAD_MODE {PAGELENGTH_DAD_MODE_CACHE_SCSI3 = 0x12,PAGELENGTH_DAD_MODE_ERR_RECOV_CCS = 0x6,PAGELENGTH_DAD_MODE_CACHE = 0xA,PAGELENGTH_MODE_CONTROL = 0x6,};
enum MACRO_PAM {PAM_SUCCESS = 0,PAM_OPEN_ERR = 1,PAM_SYMBOL_ERR = 2,PAM_SERVICE_ERR = 3,PAM_SYSTEM_ERR = 4,PAM_BUF_ERR = 5,PAM_CONV_ERR = 6,PAM_PERM_DENIED = 7,PAM_MAXTRIES = 8,PAM_AUTH_ERR = 9,PAM_NEW_AUTHTOK_REQD = 10,PAM_CRED_INSUFFICIENT = 11,PAM_AUTHINFO_UNAVAIL = 12,PAM_USER_UNKNOWN = 13,PAM_CRED_UNAVAIL = 14,PAM_CRED_EXPIRED = 15,PAM_CRED_ERR = 16,PAM_ACCT_EXPIRED = 17,PAM_AUTHTOK_EXPIRED = 18,PAM_SESSION_ERR = 19,PAM_AUTHTOK_ERR = 20,PAM_AUTHTOK_RECOVERY_ERR = 21,PAM_AUTHTOK_LOCK_BUSY = 22,PAM_AUTHTOK_DISABLE_AGING = 23,PAM_NO_MODULE_DATA = 24,PAM_IGNORE = 25,PAM_ABORT = 26,PAM_TRY_AGAIN = 27,PAM_PROMPT_ECHO_OFF = 1,PAM_PROMPT_ECHO_ON = 2,PAM_ERROR_MSG = 3,PAM_TEXT_INFO = 4,PAM_MSG_NOCONF = 2001,PAM_CONV_INTERRUPT = 2002,PAM_MAX_NUM_MSG = 32,PAM_MAX_MSG_SIZE = 512,PAM_MAX_RESP_SIZE = 512,PAM_SERVICE = 1,PAM_USER = 2,PAM_TTY = 3,PAM_RHOST = 4,PAM_CONV = 5,PAM_AUTHTOK = 6,PAM_OLDAUTHTOK = 7,PAM_RUSER = 8,PAM_USER_PROMPT = 9,PAM_MSG_VERSION = 3001,PAM_SILENT = -2147483648,PAM_DISALLOW_NULL_AUTHTOK = 1,PAM_ESTABLISH_CRED = 1,PAM_DELETE_CRED = 2,PAM_REINITIALIZE_CRED = 4,PAM_REFRESH_CRED = 8,PAM_CHANGE_EXPIRED_AUTHTOK = 4,PAM_PRELIM_CHECK = 1,PAM_UPDATE_AUTHTOK = 2,};
enum MACRO_PANICBUFSIZE {PANICBUFSIZE = 8192,};
enum MACRO_PANICBUFVERS {PANICBUFVERS = 1,PANICNVNAMELEN = 16,};
enum MACRO_PANICSTKSIZE {PANICSTKSIZE = 8192,};
enum MACRO_PAP {PAP_MAX_PASSWD = 255,};
enum MACRO_PART {PART_ACC_RO = 0x1,PART_ACC_WO = 0x2,PART_ACC_RW = 0x3,PART_ACC_OW = 0x4,};
enum MACRO_PART_OPEN {PART_OPEN_INT = 0x0,PART_CLOSE_INT = 0x1,PART_STABLE_INT = 0x2,};
enum MACRO_PASSWD {PASSWD = 0x1000,};
enum MACRO_PATHSIZE {PATHSIZE = 1024,};
enum MACRO_PB {PB_BEGIN_MONITOR = 28673,PB_END_MONITOR = 28674,PB_CREATE_BUTTON_EVENT = 28675,PB_GET_EVENTS = 28676,PB_BUTTON_PRESS = 1,};
enum MACRO_PBIND {PBIND_NONE = -1,PBIND_QUERY = -2,};
enum MACRO_PBIOC {PBIOC = 28672,};
enum MACRO_PBLKSIZ {PBLKSIZ = 1024,DBLKSIZ = 4096,};
enum MACRO_PC {PC_VERSION = 1,PC_GETCID = 0,PC_GETCLINFO = 1,PC_SETPARMS = 2,PC_GETPARMS = 3,PC_ADMIN = 4,PC_GETPRIRANGE = 5,PC_CLNULL = -1,PC_CLNMSZ = 16,};
enum MACRO_PCA {PCA_RES_NEED_IRQ = 0x1,PCA_RES_NEED_IO = 0x2,PCA_RES_NEED_MEM = 0x4,PCA_RES_CONSTRAINT = 0x8,PCA_IRQ_SMI_SHARE = 0x10,PCA_IRQ_SHAREABLE = 0x20,PCA_IRQ_ISA = 0x40,PCA_IO_OPENED = 0x100,};
enum MACRO_PCAGENT {PCAGENT = 24,};
enum MACRO_PCA_RDONLY {PCA_RDONLY = 0x1,PCA_HIDDEN = 0x2,PCA_SYSTEM = 0x4,PCA_LABEL = 0x8,PCA_DIR = 0x10,PCA_ARCH = 0x20,};
enum MACRO_PCB {PCB_BPSEC = 11,PCB_SPC = 13,PCB_RESSEC = 14,PCB_NFAT = 16,PCB_NROOTENT = 17,PCB_NSEC = 19,PCB_MEDIA = 21,PCB_SPF = 22,PCB_SPT = 24,PCB_NHEAD = 26,PCB_HIDSEC = 28,};
enum MACRO_PCC {PCC_MULTI = 0,PCC_MEMORY = 1,PCC_SERIAL = 2,PCC_PARALLEL = 3,PCC_FIXED_DISK = 4,PCC_VIDEO = 5,PCC_LAN = 6,};
enum MACRO_PCCFAULT {PCCFAULT = 7,PCSSIG = 8,};
enum MACRO_PCCS {PCCS_MAGIC = 0x50434353,PCCS_VERSION = 0x20001,};
enum MACRO_PCCSIG {PCCSIG = 6,};
enum MACRO_PCD {PCD_UNUSED = 0x0,PCD_ERASED = 0xFFFFFFE5,};
enum MACRO_PCF {PCF_FREECLUSTER = 0x0,PCF_ERRORCLUSTER = 0x1,PCF_12BCLUSTER = 0xFF0,PCF_RESCLUSTER = 0xFFF0,PCF_RESCLUSTER32 = 0xFFFFFF0,PCF_BADCLUSTER = 0xFFF7,PCF_BADCLUSTER32 = 0xFFFFFF7,PCF_LASTCLUSTER = 0xFFF8,PCF_LASTCLUSTER32 = 0xFFFFFF8,PCF_LASTCLUSTERMARK = 0xFFFF,PCF_LASTCLUSTERMARK32 = 0xFFFFFFF,PCF_FIRSTCLUSTER = 0x2,};
enum MACRO_PCFEXTSIZE {PCFEXTSIZE = 3,PCMAXPATHLEN = 1024,};
enum MACRO_PCFNAMESIZE {PCFNAMESIZE = 8,};
enum MACRO_PCFS {PCFS_FATMOD = 0x1,PCFS_LOCKED = 0x2,PCFS_WANTED = 0x4,PCFS_FAT16 = 0x400,PCFS_NOCHK = 0x800,PCFS_BOOTPART = 0x1000,PCFS_HIDDEN = 0x2000,PCFS_PCMCIA_NO_CIS = 0x4000,PCFS_FOLDCASE = 0x8000,PCFS_FAT32 = 0x10000,PCFS_IRRECOV = 0x20000,PCFS_MNT_HIDDEN = 0x1,PCFS_MNT_FOLDCASE = 0x2,PCFS_DISKTIMEOUT = 0x2,};
enum MACRO_PCFS_PART {PCFS_PART = 0x1BE,PCFS_NUMPART = 0x4,PCFS_TYPESTRING_OFFSET16 = 0x36,PCFS_TYPESTRING_OFFSET32 = 0x52,PCFS_BPB = 0xB,PCFS_SIGN = 0x1FE,};
enum MACRO_PCI {PCI_CONF_VENID = 0x0,PCI_CONF_DEVID = 0x2,PCI_CONF_COMM = 0x4,PCI_CONF_STAT = 0x6,PCI_CONF_REVID = 0x8,PCI_CONF_PROGCLASS = 0x9,PCI_CONF_SUBCLASS = 0xA,PCI_CONF_BASCLASS = 0xB,PCI_CONF_CACHE_LINESZ = 0xC,PCI_CONF_LATENCY_TIMER = 0xD,PCI_CONF_HEADER = 0xE,PCI_CONF_BIST = 0xF,PCI_CONF_BASE0 = 0x10,PCI_CONF_BASE1 = 0x14,PCI_CONF_BASE2 = 0x18,PCI_CONF_BASE3 = 0x1C,PCI_CONF_BASE4 = 0x20,PCI_CONF_BASE5 = 0x24,PCI_CONF_CIS = 0x28,PCI_CONF_SUBVENID = 0x2C,PCI_CONF_SUBSYSID = 0x2E,PCI_CONF_ROM = 0x30,PCI_CONF_CAP_PTR = 0x34,PCI_CONF_ILINE = 0x3C,PCI_CONF_IPIN = 0x3D,PCI_CONF_MIN_G = 0x3E,PCI_CONF_MAX_L = 0x3F,PCI_BCNF_PRIBUS = 0x18,PCI_BCNF_SECBUS = 0x19,PCI_BCNF_SUBBUS = 0x1A,PCI_BCNF_LATENCY_TIMER = 0x1B,PCI_BCNF_IO_BASE_LOW = 0x1C,PCI_BCNF_IO_LIMIT_LOW = 0x1D,PCI_BCNF_SEC_STATUS = 0x1E,PCI_BCNF_MEM_BASE = 0x20,PCI_BCNF_MEM_LIMIT = 0x22,PCI_BCNF_PF_BASE_LOW = 0x24,PCI_BCNF_PF_LIMIT_LOW = 0x26,PCI_BCNF_PF_BASE_HIGH = 0x28,PCI_BCNF_PF_LIMIT_HIGH = 0x2C,PCI_BCNF_IO_BASE_HI = 0x30,PCI_BCNF_IO_LIMIT_HI = 0x32,PCI_BCNF_CAP_PTR = 0x34,PCI_BCNF_ROM = 0x38,PCI_BCNF_ILINE = 0x3C,PCI_BCNF_IPIN = 0x3D,PCI_BCNF_BCNTRL = 0x3E,PCI_BCNF_BCNTRL_PARITY_ENABLE = 0x1,PCI_BCNF_BCNTRL_SERR_ENABLE = 0x2,PCI_BCNF_BCNTRL_MAST_AB_MODE = 0x20,PCI_BCNF_IO_MASK = 0xF0,PCI_BCNF_MEM_MASK = 0xFFF0,PCI_COMM_IO = 0x1,PCI_COMM_MAE = 0x2,PCI_COMM_ME = 0x4,PCI_COMM_SPEC_CYC = 0x8,PCI_COMM_MEMWR_INVAL = 0x10,PCI_COMM_PALETTE_SNOOP = 0x20,PCI_COMM_PARITY_DETECT = 0x40,PCI_COMM_WAIT_CYC_ENAB = 0x80,PCI_COMM_SERR_ENABLE = 0x100,PCI_COMM_BACK2BACK_ENAB = 0x200,PCI_INTA = 0x1,PCI_INTB = 0x2,PCI_INTC = 0x3,PCI_INTD = 0x4,PCI_STAT_CAP = 0x10,PCI_STAT_66MHZ = 0x20,PCI_STAT_UDF = 0x40,PCI_STAT_FBBC = 0x80,PCI_STAT_S_PERROR = 0x100,PCI_STAT_DEVSELT = 0x600,PCI_STAT_S_TARG_AB = 0x800,PCI_STAT_R_TARG_AB = 0x1000,PCI_STAT_R_MAST_AB = 0x2000,PCI_STAT_S_SYSERR = 0x4000,PCI_STAT_PERROR = 0x8000,PCI_STAT_DEVSELT_FAST = 0x0,PCI_STAT_DEVSELT_MEDIUM = 0x200,PCI_STAT_DEVSELT_SLOW = 0x400,PCI_BIST_SUPPORTED = 0x80,PCI_BIST_GO = 0x40,PCI_BIST_RESULT_M = 0xF,PCI_BIST_RESULT_OK = 0x0,PCI_CLASS_NONE = 0x0,PCI_CLASS_MASS = 0x1,PCI_CLASS_NET = 0x2,PCI_CLASS_DISPLAY = 0x3,PCI_CLASS_MM = 0x4,PCI_CLASS_MEM = 0x5,PCI_CLASS_BRIDGE = 0x6,PCI_CLASS_COMM = 0x7,PCI_CLASS_PERIPH = 0x8,PCI_CLASS_INPUT = 0x9,PCI_CLASS_DOCK = 0xA,PCI_CLASS_PROCESSOR = 0xB,PCI_CLASS_SERIALBUS = 0xC,PCI_NONE_NOTVGA = 0x0,PCI_NONE_VGA = 0x1,PCI_MASS_SCSI = 0x0,PCI_MASS_IDE = 0x1,PCI_MASS_FD = 0x2,PCI_MASS_IPI = 0x3,PCI_MASS_RAID = 0x4,PCI_MASS_OTHER = 0x80,PCI_IDE_IF_NATIVE_PRI = 0x1,PCI_IDE_IF_PROG_PRI = 0x2,PCI_IDE_IF_NATIVE_SEC = 0x4,PCI_IDE_IF_PROG_SEC = 0x8,PCI_IDE_IF_MASK = 0xF,PCI_NET_ENET = 0x0,PCI_NET_TOKEN = 0x1,PCI_NET_FDDI = 0x2,PCI_NET_ATM = 0x3,PCI_NET_OTHER = 0x80,PCI_DISPLAY_VGA = 0x0,PCI_DISPLAY_XGA = 0x1,PCI_DISPLAY_OTHER = 0x80,PCI_DISPLAY_IF_VGA = 0x0,PCI_DISPLAY_IF_8514 = 0x1,PCI_MM_VIDEO = 0x0,PCI_MM_AUDIO = 0x1,PCI_MM_OTHER = 0x80,PCI_MEM_RAM = 0x0,PCI_MEM_FLASH = 0x1,PCI_MEM_OTHER = 0x80,PCI_BRIDGE_HOST = 0x0,PCI_BRIDGE_ISA = 0x1,PCI_BRIDGE_EISA = 0x2,PCI_BRIDGE_MC = 0x3,PCI_BRIDGE_PCI = 0x4,PCI_BRIDGE_PCMCIA = 0x5,PCI_BRIDGE_NUBUS = 0x6,PCI_BRIDGE_CARDBUS = 0x7,PCI_BRIDGE_OTHER = 0x80,PCI_COMM_GENERIC_XT = 0x0,PCI_COMM_PARALLEL = 0x1,PCI_COMM_OTHER = 0x80,PCI_COMM_SERIAL_IF_GENERIC = 0x0,PCI_COMM_SERIAL_IF_16450 = 0x1,PCI_COMM_SERIAL_IF_16550 = 0x2,PCI_COMM_PARALLEL_IF_GENERIC = 0x0,PCI_COMM_PARALLEL_IF_BIDIRECT = 0x1,PCI_COMM_PARALLEL_IF_ECP = 0x2,PCI_PERIPH_PIC = 0x0,PCI_PERIPH_DMA = 0x1,PCI_PERIPH_TIMER = 0x2,PCI_PERIPH_RTC = 0x3,PCI_PERIPH_OTHER = 0x80,PCI_PERIPH_PIC_IF_GENERIC = 0x0,PCI_PERIPH_PIC_IF_ISA = 0x1,PCI_PERIPH_PIC_IF_EISA = 0x2,PCI_PERIPH_DMA_IF_GENERIC = 0x0,PCI_PERIPH_DMA_IF_ISA = 0x1,PCI_PERIPH_DMA_IF_EISA = 0x2,PCI_PERIPH_TIMER_IF_GENERIC = 0x0,PCI_PERIPH_TIMER_IF_ISA = 0x1,PCI_PERIPH_TIMER_IF_EISA = 0x2,PCI_PERIPH_RTC_IF_GENERIC = 0x0,PCI_PERIPH_RTC_IF_ISA = 0x1,PCI_INPUT_KEYBOARD = 0x0,PCI_INPUT_DIGITIZ = 0x1,PCI_INPUT_MOUSE = 0x2,PCI_INPUT_OTHER = 0x80,PCI_DOCK_GENERIC = 0x0,PCI_DOCK_OTHER = 0x80,PCI_PROCESSOR_386 = 0x0,PCI_PROCESSOR_486 = 0x1,PCI_PROCESSOR_PENT = 0x2,PCI_PROCESSOR_ALPHA = 0x10,PCI_PROCESSOR_POWERPC = 0x20,PCI_PROCESSOR_COPROC = 0x40,PCI_SERIAL_FIRE = 0x0,PCI_SERIAL_ACCESS = 0x1,PCI_SERIAL_SSA = 0x2,PCI_SERIAL_USB = 0x3,PCI_SERIAL_FIBRE = 0x4,PCI_HEADER_MULTI = 0x80,PCI_HEADER_ZERO = 0x0,PCI_HEADER_ONE = 0x1,PCI_HEADER_PPB = 0x1,PCI_HEADER_TYPE_M = 0x7F,PCI_BASE_SPACE_M = 0x1,PCI_BASE_SPACE_IO = 0x1,PCI_BASE_SPACE_MEM = 0x0,PCI_BASE_TYPE_MEM = 0x0,PCI_BASE_TYPE_LOW = 0x2,PCI_BASE_TYPE_ALL = 0x4,PCI_BASE_TYPE_RES = 0x6,PCI_BASE_TYPE_M = 0x6,PCI_BASE_PREF_M = 0x8,PCI_BASE_M_ADDR_M = 0xFFFFFFF0,PCI_BASE_IO_ADDR_M = 0xFFFFFFFE,PCI_BASE_ROM_ADDR_M = 0xFFFFF800,PCI_BASE_ROM_ENABLE = 0x1,PCI_PPB_ROM = 0x38,PCI_PPB_BASE_NUM = 0x2,PCI_CAP_ID = 0x0,PCI_CAP_NEXT_PTR = 0x1,PCI_CAP_ID_PM = 0x1,PCI_CAP_NEXT_PTR_NULL = 0x0,PCI_PMCAP = 0x2,PCI_PMCSR = 0x4,PCI_PMCSR_BSE = 0x6,PCI_PMDATA = 0x7,PCI_PMCAP_VER_1_0 = 0x1,PCI_PMCAP_VER_1_1 = 0x2,PCI_PMCAP_VER_MASK = 0x7,PCI_PMCAP_PME_CLOCK = 0x8,PCI_PMCAP_DSI = 0x20,PCI_PMCAP_AUX_CUR_SELF = 0x0,PCI_PMCAP_AUX_CUR_55mA = 0x40,PCI_PMCAP_AUX_CUR_100mA = 0x80,PCI_PMCAP_AUX_CUR_160mA = 0xC0,PCI_PMCAP_AUX_CUR_220mA = 0x100,PCI_PMCAP_AUX_CUR_270mA = 0x140,PCI_PMCAP_AUX_CUR_320mA = 0x180,PCI_PMCAP_AUX_CUR_375mA = 0x1C0,PCI_PMCAP_AUX_CUR_MASK = 0x1C0,PCI_PMCAP_D1 = 0x200,PCI_PMCAP_D2 = 0x400,PCI_PMCAP_D0_PME = 0x800,PCI_PMCAP_D1_PME = 0x1000,PCI_PMCAP_D2_PME = 0x2000,PCI_PMCAP_D3HOT_PME = 0x4000,PCI_PMCAP_D3COLD_PME = 0x8000,PCI_PMCAP_PME_MASK = 0xF800,PCI_PMCSR_D0 = 0x0,PCI_PMCSR_D1 = 0x1,PCI_PMCSR_D2 = 0x2,PCI_PMCSR_D3HOT = 0x3,PCI_PMCSR_STATE_MASK = 0x3,PCI_PMCSR_PME_EN = 0x100,PCI_PMCSR_DSEL_D0_PWR_C = 0x0,PCI_PMCSR_DSEL_D1_PWR_C = 0x200,PCI_PMCSR_DSEL_D2_PWR_C = 0x400,PCI_PMCSR_DSEL_D3_PWR_C = 0x600,PCI_PMCSR_DSEL_D0_PWR_D = 0x800,PCI_PMCSR_DSEL_D1_PWR_D = 0xA00,PCI_PMCSR_DSEL_D2_PWR_D = 0xC00,PCI_PMCSR_DSEL_D3_PWR_D = 0xE00,PCI_PMCSR_DSEL_COM_C = 0x1000,PCI_PMCSR_DSEL_MASK = 0x1E00,PCI_PMCSR_DSCL_UNKNOWN = 0x0,PCI_PMCSR_DSCL_1_BY_10 = 0x2000,PCI_PMCSR_DSCL_1_BY_100 = 0x4000,PCI_PMCSR_DSCL_1_BY_1000 = 0x6000,PCI_PMCSR_DSCL_MASK = 0x6000,PCI_PMCSR_PME_STAT = 0x8000,PCI_PMCSR_BSE_B2_B3 = 0x40,PCI_PMCSR_BSE_BPCC_EN = 0x80,PCI_BASE_NUM = 0x6,PCI_BASE_SIZE = 0x4,PCI_CONF_HDR_SIZE = 0x100,PCI_CLK_33MHZ = 0x2100000,PCI_CLK_66MHZ = 0x4200000,PCI_REG_REG_M = 0xFF,PCI_REG_FUNC_M = 0x700,PCI_REG_DEV_M = 0xF800,PCI_REG_BUS_M = 0xFF0000,PCI_REG_ADDR_M = 0x3000000,PCI_REG_ALIAS_M = 0x20000000,PCI_REG_PF_M = 0x40000000,PCI_REG_REL_M = 0x80000000,PCI_ADDR_MASK = 0x3000000,PCI_ADDR_CONFIG = 0x0,PCI_ADDR_IO = 0x1000000,PCI_ADDR_MEM32 = 0x2000000,PCI_ADDR_MEM64 = 0x3000000,PCI_ALIAS_B = 0x20000000,PCI_PREFETCH_B = 0x40000000,PCI_RELOCAT_B = 0x80000000,PCI_CONF_ADDR_MASK = 0xFFFFFF,PCI_HARDDEC_8514 = 0x2,PCI_HARDDEC_VGA = 0x3,PCI_HARDDEC_IDE = 0x4,PCI_HARDDEC_IDE_PRI = 0x2,PCI_HARDDEC_IDE_SEC = 0x2,};
enum MACRO_PCIF {PCIF_MAGIC = 0x50434946,PCIF_VERSION = 0x1,PCIF_MIN_VERSION = 0x1,};
enum MACRO_PCIOC {PCIOC = 20480,};
enum MACRO_PCKILL {PCKILL = 9,};
enum MACRO_PCLF {PCLF_FIRSTNAMESIZE = 10,PCLF_SECONDNAMESIZE = 12,PCLF_THIRDNAMESIZE = 4,};
enum MACRO_PCLFNCHUNKSIZE {PCLFNCHUNKSIZE = 13,};
enum MACRO_PCLK {PCLK = 4915200,};
enum MACRO_PCM {PCM_DEFAULT_NODEID = -1,};
enum MACRO_PCMAXNAMLEN {PCMAXNAMLEN = 255,};
enum MACRO_PCMCIA {PCMCIA_MAX_ADAPTERS = 8,PCMCIA_MAX_SOCKETS = 64,PCMCIA_MAX_WIN_ADAPT = 40,PCMCIA_MAX_WINDOWS = 320,PCMCIA_MAX_POWER = 16,};
enum MACRO_PCMCIA_MAX {PCMCIA_MAX_FUNCTIONS = 8,};
enum MACRO_PCMCIA_PROP {PCMCIA_PROP_UNKNOWN = 0x10000,PCMCIA_PROP_CIS = 0x20000,PCMCIA_PROP_SOCKET = 0x0,PCMCIA_PROP_COMPAT = 0x1,PCMCIA_PROP_DEFAULT_PM = 0x2,PCMCIA_PROP_ACTIVE = 0x3,PCMCIA_PROP_R2TYPE = 0x4,PCMCIA_PROP_CARDBUS = 0x5,PCMCIA_PROP_OLDCS = 0x6,PCMCIA_PROP_REG = 0x7,PCMCIA_PROP_INTR = 0x8,};
enum MACRO_PCMD {PCMD_DEVTYPE = 0x1,PCMD_FUNCID = 0x2,PCMD_MANFID = 0x4,PCMD_FUNCE = 0x8,PCMD_VERS1 = 0x10,PCMD_JEDEC = 0x20,};
enum MACRO_PCM_NAME {PCM_NAME_1275 = 0x1,PCM_NAME_VERS1 = 0x2,PCM_NAME_GENERIC = 0x4,PCM_NO_CONFIG = 0x8,PCM_OTHER_NOCIS = 0x100,PCM_MULTI_FUNCTION = 0x200,PCM_MAX_R2_MEM = 0x3FFFFFF,PCM_TYPE_MULTI = 0x0,PCM_TYPE_MEMORY = 0x1,PCM_TYPE_SERIAL = 0x2,PCM_TYPE_PARALLEL = 0x3,PCM_TYPE_FIXED = 0x4,PCM_TYPE_VIDEO = 0x5,PCM_TYPE_LAN = 0x6,};
enum MACRO_PCNICE {PCNICE = 21,};
enum MACRO_PCNULL {PCNULL = 0,PCSTOP = 1,PCDSTOP = 2,};
enum MACRO_PCON {PCON_INIT = 44,PCON_OPEN_INIT = 60,};
enum MACRO_PCREAD {PCREAD = 25,};
enum MACRO_PCRUN {PCRUN = 5,};
enum MACRO_PCS {PCS_CARD_PRESENT = 0x1,PCS_MULTI_FUNCTION = 0x2,PCS_SOCKET_ADDED = 0x4,PCS_COOKIES_VALID = 0x8,PCS_IRQ_ENABLED = 0x10,PCS_SUSPENDED = 0x20,PCS_ENABLED = 0x2,};
enum MACRO_PCSASRS {PCSASRS = 28,};
enum MACRO_PCSCRED {PCSCRED = 27,};
enum MACRO_PCSENTRY {PCSENTRY = 14,};
enum MACRO_PCSEXIT {PCSEXIT = 15,PCSET = 16,};
enum MACRO_PCSFAULT {PCSFAULT = 13,};
enum MACRO_PCSFPREG {PCSFPREG = 19,};
enum MACRO_PCSHOLD {PCSHOLD = 11,};
enum MACRO_PCSREG {PCSREG = 18,};
enum MACRO_PCSTRACE {PCSTRACE = 12,};
enum MACRO_PCSVADDR {PCSVADDR = 22,};
enum MACRO_PCSXREG {PCSXREG = 20,};
enum MACRO_PCUNKILL {PCUNKILL = 10,};
enum MACRO_PCUNSET {PCUNSET = 17,};
enum MACRO_PCWATCH {PCWATCH = 23,};
enum MACRO_PCWRITE {PCWRITE = 26,};
enum MACRO_PCWSTOP {PCWSTOP = 3,PCTWSTOP = 4,};
enum MACRO_PC_FATBLOCK {PC_FATBLOCK = 1,};
enum MACRO_PC_MAXFATSEC {PC_MAXFATSEC = 256,};
enum MACRO_PC_MOD {PC_MOD = 0x1,PC_CHG = 0x2,PC_INVAL = 0x4,PC_EXTERNAL = 0x8,PC_ACC = 0x10,PC_RELEHOLD = 0x80,};
enum MACRO_PC_REG {PC_REG_TYPE_CARDBUS = 0,PC_REG_TYPE_16BIT = 1,PC_REG_SPACE_CONFIG = 0,PC_REG_SPACE_IO = 1,PC_REG_SPACE_MEMORY = 2,PC_REG_SPACE_ATTRIBUTE = 4,};
enum MACRO_PC_SECSIZE {PC_SECSIZE = 512,};
enum MACRO_PC_SUCCESS {PC_SUCCESS = 1,PC_FAILURE = 0,PC_MEM_AM = 0,PC_MEM_CM = 1,};
enum MACRO_PD {PD = 0x40,};
enum MACRO_PDEV {PDEV_SCSI = 0x0,PDEV_SMD = 0x1,PDEV_ESDI = 0x2,PDEV_IPI2 = 0x3,PDEV_IPI3 = 0x4,};
enum MACRO_PDFLAGS {PDFLAGS = 15,};
enum MACRO_PEM {PEM_MAX_EVENTS = 64,PEM_IDNUM = 17741,PEM_MIN = 0,PEM_MAX = 1024,PEM_HIWATER = 4096,PEM_LOWATER = 1024,};
enum MACRO_PERIM {PERIM_INNER = 1,PERIM_OUTER = 2,};
enum MACRO_PERMMASK {PERMMASK = 0x1FF,};
enum MACRO_PER_TARGET {NLUNS_PER_TARGET = 8,SCSI_16LUNS_PER_TARGET = 16,SCSI_32LUNS_PER_TARGET = 32,SCSI_1LUN_PER_TARGET = 1,};
enum MACRO_PF {PF_R = 0x4,PF_W = 0x2,PF_X = 0x1,PF_MASKPROC = 0xF0000000,};
enum MACRO_PFIOC {PFIOC = 20480,};
enum MACRO_PFIOCSETF {PFIOCSETF = 20481,};
enum MACRO_PFKEYV2 {PFKEYV2_REVISION = 199806,};
enum MACRO_PFN : __int64 {PFN_INVALID = 4294967295,};
enum MACRO_PF_IA {PF_IA_64_NORECOV = 0x80000000,};
enum MACRO_PF_KEY {PF_KEY_V2 = 2,};
enum MACRO_PF_MAXFILTERS {PF_MAXFILTERS = 2047,};
enum MACRO_PF_RCOLL {PF_RCOLL = 0x1,PF_WCOLL = 0x2,PF_ECOLL = 0x4,PF_NBIO = 0x8,PF_ASYNC = 0x10,PF_WOPEN = 0x20,PF_CARR_ON = 0x40,PF_SLAVEGONE = 0x80,PF_PKT = 0x100,PF_STOPPED = 0x200,PF_REMOTE = 0x400,PF_NOSTOP = 0x800,PF_UCNTL = 0x1000,PF_43UCNTL = 0x2000,PF_IOCTL = 0x4000,PF_WAIT = 0x8000,PF_READ = 0x10000,PF_WRITE = 0x20000,PF_WREAD = 0x40000,PF_WWRITE = 0x80000,};
enum MACRO_PF_UNSPEC {PF_UNSPEC = 0,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_NBS = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_NIT = 17,PF_802 = 18,PF_OSI = 19,PF_X25 = 20,PF_OSINET = 21,PF_GOSIP = 22,PF_IPX = 23,PF_ROUTE = 24,PF_LINK = 25,PF_INET6 = 26,PF_KEY = 27,PF_MAX = 27,};
enum MACRO_PG {PG_REFERENCED = 0x2,PG_MODIFIED = 0x1,PG_HWMAPPED = 0x4,};
enum MACRO_PGREL {PGREL_NOTREL = 0x1,PGREL_CLEAN = 0x2,PGREL_MOD = 0x3,};
enum MACRO_PH {PH_FROM_PROM = 0x1,};
enum MACRO_PHY {PHY_BMCR_RESET = 32768,PHY_BMCR_LPBK = 16384,PHY_BMCR_100M = 8192,PHY_BMCR_ANE = 4096,PHY_BMCR_PWRDN = 2048,PHY_BMCR_ISOLATE = 1024,PHY_BMCR_RAN = 512,PHY_BMCR_FDX = 256,PHY_BMCR_COLTST = 128,PHY_BMCR_RES1 = 127,PHY_BMSR_100T4 = 32768,PHY_BMSR_100FDX = 16384,PHY_BMSR_100HDX = 8192,PHY_BMSR_10FDX = 4096,PHY_BMSR_10HDX = 2048,PHY_BMSR_RES1 = 1984,PHY_BMSR_ANC = 32,PHY_BMSR_REMFLT = 16,PHY_BMSR_ACFG = 8,PHY_BMSR_LNKSTS = 4,PHY_BMSR_JABDET = 2,PHY_BMSR_EXTCAP = 1,PHY_CAPABILITY_MASK = 30720,PHY_IDR2_OUILSB = 64512,PHY_IDR2_VNDMDL = 1008,PHY_IDR2_MDLREV = 15,PHY_ANAR_NP = 32768,PHY_ANAR_ACK = 16384,PHY_ANAR_RF = 8192,PHY_ANAR_RES1 = 7168,PHY_ANAR_T4 = 512,PHY_ANAR_TXFDX = 256,PHY_ANAR_TX = 128,PHY_ANAR_10FDX = 64,PHY_ANAR_10 = 32,PHY_ANAR_SELECT = 31,PHY_SELECTOR = 1,PHY_ANLPAR_NP = 32768,PHY_ANLPAR_ACK = 16384,PHY_ANLPAR_RF = 8192,PHY_ANLPAR_RES1 = 7168,PHY_ANLPAR_T4 = 512,PHY_ANLPAR_TXFDX = 256,PHY_ANLPAR_TX = 128,PHY_ANLPAR_10FDX = 64,PHY_ANLPAR_10 = 32,PHY_ANLPAR_SELECT = 31,PHY_ANER_RES1 = 65504,PHY_ANER_MLF = 16,PHY_ANER_LPNP = 8,PHY_ANER_NPABLE = 4,PHY_ANER_PAGERX = 2,PHY_ANER_LPNW = 1,PHY_NWAYTR_RES1 = 65280,PHY_NWAYTR_LPBK = 128,PHY_NWAYTR_RES2 = 127,PHY_CSCR_NRZIDIS = 32768,PHY_CSCR_RES1 = 16384,PHY_CSCR_TOCDIS = 8192,PHY_CSCR_REPTR = 4096,PHY_CSCR_ENCSEL = 2048,PHY_CSCR_RES2 = 1792,PHY_CSCR_CLK25M = 128,PHY_CSCR_FLN100 = 64,PHY_CSCR_FCONN = 32,PHY_CSCR_TXOFF = 16,PHY_CSCR_RES3 = 8,PHY_CSCR_CSTSEN = 4,PHY_CSCR_10FDXE = 2,PHY_CSCR_RES4 = 1,PHY_LBREMR_BPEB = 32768,PHY_LBREMR_BP4B5B = 16384,PHY_LBREMR_BPSCR = 8192,PHY_LBREMR_BPALIGN = 4096,PHY_LBREMR_EWRAP = 2048,PHY_LBREMR_XWRAP = 1024,PHY_LBREMR_LB = 768,PHY_LBREMR_RES1 = 224,PHY_LBREMR_CODE = 16,PHY_LBREMR_PME = 8,PHY_LBREMR_LINK = 4,PHY_LBREMR_PKT = 2,PHY_LBREMR_EB = 1,PHY_AR_RES1 = 65408,PHY_AR_SPEED10 = 64,PHY_AR_CONSTS = 32,PHY_AR_ADDR = 31,PHY_TPISR_RES1 = 64512,PHY_TPISR_10BTSER = 512,PHY_TPISR_RES2 = 511,PHY_NICR_RES1 = 65472,PHY_NICR_LD = 32,PHY_NICR_HBE = 16,PHY_NICR_UTP = 8,PHY_NICR_LSS = 4,PHY_NICR_RES2 = 2,PHY_NICR_JBEN = 1,PHY_BTXPC_DSCRAM = 1,};
enum MACRO_PI {PI_INSTALLED = 0,PI_PARTIAL = 1,PI_PRESVR4 = 2,PI_UNKNOWN = 3,PI_SPOOLED = 4,};
enum MACRO_PILR1 {PILR1 = 0x80,};
enum MACRO_PILR2 {PILR2 = 0x81,};
enum MACRO_PILR3 {PILR3 = 0x82,};
enum MACRO_PIM {PIM_VERSION = 2,PIM_MINLEN = 8,PIM_REG_MINLEN = 28,PIM_REGISTER = 1,PIM_BORDER_REGISTER = -2147483648,PIM_NULL_REGISTER = 1073741824,};
enum MACRO_PIPE {PIPE_BUF = 5120,PIPE_MAX = 5120,};
enum MACRO_PI_TYPELEN {PI_TYPELEN = 16,PI_FPUTYPE = 32,};
enum MACRO_PKGSIZ {PKGSIZ = 64,};
enum MACRO_PKT {PKT_PRIV_SIZE = 1,PKT_PRIV_LEN = 8,};
enum MACRO_PLN {PLN_ENTITY_CONTROLLER = 0x0,PLN_ENTITY_DISK_SINGLE = 0x1,PLN_ENTITY_DISK_GROUPED = 0x2,};
enum MACRO_PLN_CTLR {PLN_CTLR_STATE_ATTACHED = 0,PLN_CTLR_STATE_CLOSED = 1,PLN_CTLR_STATE_OPENING = 2,PLN_CTLR_STATE_OPEN = 3,PLN_CTLR_STATE_SENSING = 4,PLN_CTLR_STATE_RWAIT = 5,PLN_CTLR_STATE_DETACHING = 6,PLN_CTLR_IO_TIME = 35,PLN_CTLR_RETRY_COUNT = 4,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_PM {PM_LEVEL_UNKNOWN = -1,};
enum MACRO_PMAP {PMAP_IPPROTO_TCP = 6,PMAP_IPPROTO_UDP = 17,};
enum MACRO_PMAPPORT {PMAPPORT = 111,};
enum MACRO_PMAPPROC {PMAPPROC_NULL = 0,PMAPPROC_SET = 1,PMAPPROC_UNSET = 2,PMAPPROC_GETPORT = 3,PMAPPROC_DUMP = 4,PMAPPROC_CALLIT = 5,};
enum MACRO_PMAPPROG {PMAPPROG = 100000,};
enum MACRO_PMAPVERS {PMAPVERS_PROTO = 2,PMAPVERS_ORIG = 1,};
enum MACRO_PMAPVERS_0 {PMAPVERS = 2,};
enum MACRO_PMC {PMC = 0x6,};
enum MACRO_PMTAGSIZE {PMTAGSIZE = 14,};
enum MACRO_PM_STATUS {PM_STATUS = 1,PM_UNKNOWN = 2,PM_STARTING = 1,PM_ENABLED = 2,PM_DISABLED = 3,PM_STOPPING = 4,};
enum MACRO_POLL {POLL_IN = 1,POLL_OUT = 2,POLL_MSG = 3,POLL_ERR = 4,POLL_PRI = 5,POLL_HUP = 6,};
enum MACRO_POLLERR {POLLERR = 0x8,POLLHUP = 0x10,POLLNVAL = 0x20,POLLREMOVE = 0x800,};
enum MACRO_POLLIN {POLLIN = 0x1,POLLPRI = 0x2,POLLOUT = 0x4,POLLRDNORM = 0x40,};
enum MACRO_POLLNORM {POLLNORM = 64,};
enum MACRO_POLLWRNORM {POLLWRNORM = 4,POLLRDBAND = 128,POLLWRBAND = 256,};
enum MACRO_PORT {PORT_STATUS_CCS = 0x1,PORT_STATUS_PES = 0x2,PORT_STATUS_PSS = 0x4,PORT_STATUS_POCI = 0x8,PORT_STATUS_PRS = 0x10,PORT_STATUS_PPS = 0x100,PORT_STATUS_LSDA = 0x200,PORT_STATUS_MASK = 0x11F,PORT_STATUS_OK = 0x103,PORT_CHANGE_CSC = 0x1,PORT_CHANGE_PESC = 0x2,PORT_CHANGE_PSSC = 0x4,PORT_CHANGE_OCIC = 0x8,PORT_CHANGE_PRSC = 0x10,};
enum MACRO_PP {PP_SHIFT = 8,PP_PAPER_OUT = 1,PP_ERROR = 2,PP_BUSY = 4,PP_SELECT = 8,PP_MSG = 131072,PP_SIGNAL = 65536,PP_SIGTYPE = 21,};
enum MACRO_PPC {PPC_INTMASK = 0xA,};
enum MACRO_PPC_ERROR {PPC_ERROR_B = 0x8,PPC_SELECT_IN_B = 0x10,PPC_PAPER_OUT_B = 0x20,PPC_ACK_B = 0x40,PPC_BUSY_B = 0x80,PPC_STROBE = 0x1,PPC_AFX = 0x2,PPC_INIT = 0x4,PPC_SLCT = 0x8,PPC_IRQE = 0x10,PPC_OUTPUT = 0x20,};
enum MACRO_PPC_LINES {PPC_LINES = 1,};
enum MACRO_PPC_STROBE {PPC_STROBE_W = 2,PPC_DATA_SETUP = 2,PPC_ACK_TIMEOUT = 60,PPC_ERR_TIMEOUT = 5,PPC_BSY_TIMEOUT = 10,PPC_ACK_POLL = 5,PPC_ERRMSG_TIME = 40,};
enum MACRO_PPD {PPD_CARD_MULTI = 0x1,PPD_CARD_CARDBUS = 0x2,PPD_CB_BUSMASTER = 0x4,PPD_SUSPENDED = 0x8,};
enum MACRO_PPGRP {PPGRP = 3,LBOLT = 4,};
enum MACRO_PPID {PPID = 11,};
enum MACRO_PPP {PPP_DG_MOD_ID = 2001,PPP_DG_MAX_OUTPUT = 1000,PPP_DG_ERR = 1,PPP_DG_INF = 2,PPP_DG_OPT = 4,PPP_DG_EXT = 8,PPP_DG_RAW = 16,PPP_DG_NDA = 32,PPP_DG_RFR = 64,PPP_DG_ERRREP = 128,PPP_DG_STAND = 7,PPP_DG_MIN = 3,PPP_DG_ALL = 175,};
enum MACRO_PPP_MAX {PPP_MAX_PASSWD = 255,PPP_MAX_ERROR = 255,};
enum MACRO_PPRH {PPRH = 0xF0,};
enum MACRO_PPRL {PPRL = 0x0,};
enum MACRO_PPS {PPS_AVG = 2,PPS_SHIFT = 2,PPS_SHIFTMAX = 8,PPS_VALID = 120,};
enum MACRO_PR {PR_MODEL_UNKNOWN = 0,PR_MODEL_ILP32 = 1,PR_MODEL_LP64 = 2,PR_MODEL_NATIVE = 1,};
enum MACRO_PRARGSZ {PRARGSZ = 80,};
enum MACRO_PRC {PRC_IFDOWN = 0,PRC_ROUTEDEAD = 1,PRC_QUENCH = 4,PRC_MSGSIZE = 5,PRC_HOSTDEAD = 6,PRC_HOSTUNREACH = 7,PRC_UNREACH_NET = 8,PRC_UNREACH_HOST = 9,PRC_UNREACH_PROTOCOL = 10,PRC_UNREACH_PORT = 11,PRC_UNREACH_NEEDFRAG = 12,PRC_UNREACH_SRCFAIL = 13,PRC_REDIRECT_NET = 14,PRC_REDIRECT_HOST = 15,PRC_REDIRECT_TOSNET = 16,PRC_REDIRECT_TOSHOST = 17,PRC_TIMXCEED_INTRANS = 18,PRC_TIMXCEED_REASS = 19,PRC_PARAMPROB = 20,PRC_GWDOWN = 21,PRC_NCMDS = 22,};
enum MACRO_PRCLSZ {PRCLSZ = 8,};
enum MACRO_PRCO {PRCO_GETOPT = 0,PRCO_SETOPT = 1,PRCO_NCMDS = 2,};
enum MACRO_PRCSIG {PRCSIG = 0x1,PRCFAULT = 0x2,PRSTEP = 0x4,PRSABORT = 0x8,PRSTOP = 0x10,};
enum MACRO_PRECOMPMSK {PRECOMPMSK = 0x1C,};
enum MACRO_PREFIX {PREFIX_INFINITY = 0xFFFFFFFF,};
enum MACRO_PRELIM {PRELIM = 1,COMPLETE = 2,};
enum MACRO_PREMOTE {PREMOTE = 39,MAXPATHLEN = 1024,};
enum MACRO_PRESSED {PRESSED = 0x0,RELEASED = 0x80,};
enum MACRO_PRFNSZ {PRFNSZ = 16,};
enum MACRO_PRIO {PRIO_PROCESS = 0,PRIO_PGRP = 1,PRIO_USER = 2,};
enum MACRO_PRMAPSZ {PRMAPSZ = 64,};
enum MACRO_PRNODEV : __int64 {PRNODEV = 4294967295,};
enum MACRO_PROB {A_PROB = -5,L_PROB = -6,};
enum MACRO_PROC {PROC_TEXT = 5,PROC_DATA = 7,};
enum MACRO_PROCESS {INIT_PROCESS = 5,LOGIN_PROCESS = 6,USER_PROCESS = 7,DEAD_PROCESS = 8,};
enum MACRO_PROC_CHUNK {PROC_CHUNK = 100,};
enum MACRO_PROF {PROF_SIG = 1,};
enum MACRO_PROFATTR {PROFATTR_DB_NCOL = 5,PROFATTR_DB_NKEYCOL = 1,PROFATTR_KEYCOL0 = 0,};
enum MACRO_PROG {CLGET_PROG = 14,CLSET_PROG = 15,};
enum MACRO_PROP {PROP_1275_INT_SIZE = 4,};
enum MACRO_PROT {PROT_READ = 0x1,PROT_WRITE = 0x2,PROT_EXEC = 0x4,PROT_NONE = 0x0,};
enum MACRO_PROTOCOL {BOOT_PROTOCOL = 0x0,REPORT_PROTOCOL = 0x1,};
enum MACRO_PROTOTYPES {PROTOTYPES = 1,};
enum MACRO_PRSYSARGS {PRSYSARGS = 8,};
enum MACRO_PRU {PRU_ATTACH = 0,PRU_DETACH = 1,PRU_BIND = 2,PRU_LISTEN = 3,PRU_CONNECT = 4,PRU_ACCEPT = 5,PRU_DISCONNECT = 6,PRU_SHUTDOWN = 7,PRU_RCVD = 8,PRU_SEND = 9,PRU_ABORT = 10,PRU_CONTROL = 11,PRU_SENSE = 12,PRU_RCVOOB = 13,PRU_SENDOOB = 14,PRU_SOCKADDR = 15,PRU_PEERADDR = 16,PRU_CONNECT2 = 17,PRU_FASTTIMO = 18,PRU_SLOWTIMO = 19,PRU_PROTORCV = 20,PRU_PROTOSEND = 21,PRU_NREQ = 21,};
enum MACRO_PRV {PRV_CRASH = 17,PRV_RECOVERY = 18,};
enum MACRO_PR_SLOWHZ {PR_SLOWHZ = 2,PR_FASTHZ = 5,PR_ATOMIC = 1,PR_ADDR = 2,PR_CONNREQUIRED = 4,PR_WANTRCVD = 8,PR_RIGHTS = 16,PR_OOB_ADDR = 32,};
enum MACRO_PR_STOPPED {PR_STOPPED = 0x1,PR_ISTOP = 0x2,PR_DSTOP = 0x4,PR_STEP = 0x8,PR_ASLEEP = 0x10,PR_PCINVAL = 0x20,PR_ASLWP = 0x40,PR_AGENT = 0x80,PR_ISSYS = 0x1000,PR_VFORKP = 0x2000,PR_ORPHAN = 0x4000,PR_FORK = 0x100000,PR_RLC = 0x200000,PR_KLC = 0x400000,PR_ASYNC = 0x800000,PR_MSACCT = 0x1000000,PR_BPTADJ = 0x2000000,PR_PTRACE = 0x4000000,PR_MSFORK = 0x8000000,PR_REQUESTED = 0x1,PR_SIGNALLED = 0x2,PR_SYSENTRY = 0x3,PR_SYSEXIT = 0x4,PR_JOBCONTROL = 0x5,PR_FAULTED = 0x6,PR_SUSPENDED = 0x7,PR_CHECKPOINT = 0x8,};
enum MACRO_PR_WORDSIZE {PR_WORDSIZE = 8,PR_MASK = 7,PR_MAX_IO_LEN = 1024,PR_MAX_IO_RANGES = 4,PR_MAX_MEM_LEN = 1024,PR_MAX_MEM_RANGES = 32,PR_MAX_IOADDR = -1,PR_MAX_MEMADDR = -1,PR_MAX_INTERRUPTS = 255,};
enum MACRO_PS {PS_NONE = -1,PS_QUERY = -2,PS_SYSTEM = 1,PS_PRIVATE = 2,};
enum MACRO_PSARGSZ {PSARGSZ = 80,};
enum MACRO_PSC {PSC_EVENT_LOST = 0x40000000,};
enum MACRO_PSET {PSET_CREATE = 0,PSET_DESTROY = 1,PSET_ASSIGN = 2,PSET_INFO = 3,PSET_BIND = 4,};
enum MACRO_PSID {PSID = 12,};
enum MACRO_PSL {PSL_ALLCC = 15728640,PSL_USER = 128,PSL_USERMASK = 15728640,PSL_UBITS = 15732736,};
enum MACRO_PSR {PSR_CWP = 0x1F,PSR_ET = 0x20,PSR_PS = 0x40,PSR_S = 0x80,PSR_PIL = 0xF00,PSR_EF = 0x1000,PSR_EC = 0x2000,PSR_RSV = 0xFC000,PSR_ICC = 0xF00000,PSR_C = 0x100000,PSR_V = 0x200000,PSR_Z = 0x400000,PSR_N = 0x800000,PSR_VER = 0xF000000,PSR_IMPL = 0xF0000000,};
enum MACRO_PSR_0 {PSR = 0,PC = 1,nPC = 2,};
enum MACRO_PSR_ICC {PSR_ICC_SHIFT = 20,PSR_IMPLVER_SHIFT = 24,PSR_TSTATE_CC_SHIFT = 12,PSR_PSTATE_EF_SHIFT = 8,PSR_FPRS_FEF_SHIFT = 10,};
enum MACRO_PS_0 {PS = 0,SP = 17,};
enum MACRO_PS_OBJ {PS_OBJ_EXEC = 0x0,PS_OBJ_LDSO = 0x1,};
enum MACRO_PT {PT_NULL = 0,PT_LOAD = 1,PT_DYNAMIC = 2,PT_INTERP = 3,PT_NOTE = 4,PT_SHLIB = 5,PT_PHDR = 6,PT_NUM = 7,PT_LOSUNW = 1879048186,PT_SUNWBSS = 1879048186,PT_HISUNW = 1879048191,PT_LOPROC = 1879048192,PT_HIPROC = 2147483647,};
enum MACRO_PTHREAD {PTHREAD_CREATE_DETACHED = 0x40,PTHREAD_CREATE_JOINABLE = 0x0,PTHREAD_SCOPE_SYSTEM = 0x1,PTHREAD_SCOPE_PROCESS = 0x0,PTHREAD_INHERIT_SCHED = 0x1,PTHREAD_EXPLICIT_SCHED = 0x0,PTHREAD_PROCESS_SHARED = 0x1,PTHREAD_PROCESS_PRIVATE = 0x0,};
enum MACRO_PTHREAD_MUTEX {PTHREAD_MUTEX_NORMAL = 0x0,PTHREAD_MUTEX_ERRORCHECK = 0x2,PTHREAD_MUTEX_RECURSIVE = 0x4,PTHREAD_MUTEX_DEFAULT = 0x0,PTHREAD_PRIO_NONE = 0x0,PTHREAD_PRIO_INHERIT = 0x10,PTHREAD_PRIO_PROTECT = 0x20,PTHREAD_MUTEX_STALL_NP = 0x0,PTHREAD_MUTEX_ROBUST_NP = 0x40,PTHREAD_CANCEL_ENABLE = 0x0,PTHREAD_CANCEL_DISABLE = 0x1,PTHREAD_CANCEL_DEFERRED = 0x0,PTHREAD_CANCEL_ASYNCHRONOUS = 0x2,PTHREAD_CANCELED = 0xFFFFFFED,PTHREAD_ONCE_NOTDONE = 0x0,PTHREAD_ONCE_DONE = 0x1,};
enum MACRO_PTLOCK {PTLOCK = 0x1,PTMOPEN = 0x2,PTSOPEN = 0x4,PTSTTY = 0x8,ISPTM = 0x5001,};
enum MACRO_PTR24 {PTR24_LSB = 5,PTR24_MSB = 29,PTR24_ALIGN = 32,PTR24_BASE = -536870912,};
enum MACRO_PTRACE {PTRACE_TRACEME = 0,PTRACE_CHILDDONE = 0,PTRACE_PEEKTEXT = 1,PTRACE_PEEKDATA = 2,PTRACE_PEEKUSER = 3,PTRACE_POKETEXT = 4,PTRACE_POKEDATA = 5,PTRACE_POKEUSER = 6,PTRACE_CONT = 7,PTRACE_KILL = 8,PTRACE_SINGLESTEP = 9,PTRACE_ATTACH = 10,PTRACE_DETACH = 11,PTRACE_GETREGS = 12,PTRACE_SETREGS = 13,PTRACE_GETFPREGS = 14,PTRACE_SETFPREGS = 15,PTRACE_READDATA = 16,PTRACE_WRITEDATA = 17,PTRACE_READTEXT = 18,PTRACE_WRITETEXT = 19,PTRACE_GETFPAREGS = 20,PTRACE_SETFPAREGS = 21,PTRACE_GETWINDOW = 22,PTRACE_SETWINDOW = 23,PTRACE_SYSCALL = 24,PTRACE_DUMPCORE = 25,PTRACE_SETWRBKPT = 26,PTRACE_SETACBKPT = 27,PTRACE_CLRDR7 = 28,PTRACE_TRAPCODE = 29,PTRACE_SETBPP = 30,PTRACE_WPPHYS = 31,};
enum MACRO_PTSSTTY {PTSSTTY = 20483,};
enum MACRO_PT_IA {PT_IA_64_ARCHEXT = 0x70000000,PT_IA_64_UNWIND = 0x70000001,};
enum MACRO_PT_OVERWRITE {PT_OVERWRITE = 0x1,PT_INFO_ONLY = 0x2,PT_RENAME = 0x4,PT_DEBUG = 0x8,PT_SILENT = 0x10,PT_ODTSTREAM = 0x40,};
enum MACRO_PW {PW_INUSE = 0x1,PW_WAIT = 0x2,PW_REM = 0x4,};
enum MACRO_PXFS {PXFS_LOCK_BLOCKED = -1,};
enum MACRO_P_ABSOLUTE {P_ABSOLUTE = 0x1,P_RELATIVE = 0x2,P_EXIST = 0x4,P_NEXIST = 0x8,P_REG = 0x10,P_DIR = 0x20,P_BLK = 0x40,P_CHR = 0x80,P_NONZERO = 0x100,P_READ = 0x200,P_WRITE = 0x400,P_EXEC = 0x800,P_CREAT = 0x1000,};
enum MACRO_P_FREE {P_FREE = 0x80,P_NORELOC = 0x40,};
enum MACRO_P_INITPID {P_INITPID = 1,P_INITUID = 0,P_INITPGID = 0,};
enum MACRO_P_OFFLINE {P_OFFLINE = 1,P_ONLINE = 2,P_STATUS = 3,P_BAD = 4,P_POWEROFF = 5,P_NOINTR = 6,};
enum MACRO_P_TV {P_TV = 65532,};
enum MACRO_Q {Q_SQQUEUED = 0x1,Q_SQDRAINING = 0x2,};
enum MACRO_QB {QB_FULL = 0x1,QB_WANTW = 0x2,QB_BACK = 0x4,};
enum MACRO_QDELAY {QDELAY = 180,};
enum MACRO_QEC {QEC_QMDMAX = 256,QEC_QMDALIGN = 2048,};
enum MACRO_QECB {QECB_CONTROL_TDMD = 0x1,QECB_STATUS_MACE = 0x80000000,QECB_STATUS_TINT = 0x200000,QECB_STATUS_TMDER = 0x80000,QECB_STATUS_TXLATERR = 0x40000,QECB_STATUS_TXPARERR = 0x20000,QECB_STATUS_TXERRACK = 0x10000,QECB_STATUS_RINT = 0x20,QECB_STATUS_DROP = 0x10,QECB_STATUS_BUFF = 0x8,QECB_STATUS_RXLATERR = 0x4,QECB_STATUS_RXPARERR = 0x2,QECB_STATUS_RXERRACK = 0x1,QECB_STATUS_ERR = 0x800F001F,QECB_STATUS_INTR = 0x802F003F,QECB_STATUS_QEC = 0xF001F,QECB_QECERRM_TMDERM = 0x80000,QECB_QECERRM_TXLATERRM = 0x40000,QECB_QECERRM_TXPARERRM = 0x20000,QECB_QECERRM_TXERRACKM = 0x10000,QECB_QECERRM_DROPM = 0x10,QECB_QECERRM_BUFFM = 0x8,QECB_QECERRM_RXLATERRM = 0x4,QECB_QECERRM_RXPARERRM = 0x2,QECB_QECERRM_RXERRACKM = 0x1,QECB_BMACERRM_EXDERM = 0x1,};
enum MACRO_QECG {QECG_CONTROL_MODE = 0xF0000000,QECG_CONTROL_MACE = 0x40000000,QECG_CONTROL_BMAC = 0x10000000,QECG_CONTROL_PARITY = 0x20,QECG_CONTROL_ARB = 0x18,QECG_CONTROL_BURST64 = 0x4,QECG_CONTROL_BURST32 = 0x2,QECG_CONTROL_BURST16 = 0x0,QECG_CONTROL_RST = 0x1,QECG_STATUS_TINT = 0x8,QECG_STATUS_RINT = 0x4,QECG_STATUS_BMINT = 0x2,QECG_STATUS_QECERR = 0x1,QECG_PKTSIZE_2K = 0x0,QECG_PKTSIZE_4K = 0x1,QECG_PKTSIZE_6K = 0x10,QECG_PKTSIZE_8K = 0x11,};
enum MACRO_QECM {QECM_CONTROL_DRCV = 0x4,QECM_CONTROL_RST = 0x2,QECM_CONTROL_TDMD = 0x1,QECM_STATUS_EXDER = 0x10000000,QECM_STATUS_LCAR = 0x8000000,QECM_STATUS_RTRY = 0x4000000,QECM_STATUS_LCOL = 0x2000000,QECM_STATUS_UFLO = 0x1000000,QECM_STATUS_JAB = 0x800000,QECM_STATUS_BABL = 0x400000,QECM_STATUS_TINT = 0x200000,QECM_STATUS_COLCO = 0x100000,QECM_STATUS_TMDER = 0x80000,QECM_STATUS_TXLATERR = 0x40000,QECM_STATUS_TXPARERR = 0x20000,QECM_STATUS_TXERRACK = 0x10000,QECM_STATUS_RVCCO = 0x1000,QECM_STATUS_RPCO = 0x800,QECM_STATUS_MPCO = 0x400,QECM_STATUS_OFLO = 0x200,QECM_STATUS_CLSN = 0x100,QECM_STATUS_FMC = 0x80,QECM_STATUS_CRC = 0x40,QECM_STATUS_RINT = 0x20,QECM_STATUS_DROP = 0x10,QECM_STATUS_BUFF = 0x8,QECM_STATUS_RXLATERR = 0x4,QECM_STATUS_RXPARERR = 0x2,QECM_STATUS_RXERRACK = 0x1,QECM_STATUS_OTHER = 0x1FDF3FDF,QECM_QECERRM_COLLM = 0x100000,QECM_QECERRM_TMDERM = 0x80000,QECM_QECERRM_TXLATERRM = 0x40000,QECM_QECERRM_TXPARERRM = 0x20000,QECM_QECERRM_TXERRACKM = 0x10000,QECM_QECERRM_DROPM = 0x10,QECM_QECERRM_BUFFM = 0x8,QECM_QECERRM_RXLATERRM = 0x4,QECM_QECERRM_RXPARERRM = 0x2,QECM_QECERRM_RXERRACKM = 0x1,QECM_MACERRM_EXDERM = 0x10000000,QECM_MACERRM_LCARM = 0x8000000,QECM_MACERRM_RTRYM = 0x4000000,QECM_MACERRM_LCOLM = 0x2000000,QECM_MACERRM_UFLOM = 0x1000000,QECM_MACERRM_JABM = 0x800000,QECM_MACERRM_BABLM = 0x400000,QECM_MACERRM_OFLOM = 0x800,QECM_MACERRM_RVCCOM = 0x400,QECM_MACERRM_RPCOM = 0x200,QECM_MACERRM_MPCOM = 0x100,QECM_PIFS_ENABLE = 0x20,QECM_PIFS_MANUAL = 0x10,QECM_PIFS_1920 = 0xF,QECM_PIFS_1792 = 0xE,QECM_PIFS_1664 = 0xD,QECM_PIFS_1536 = 0xC,QECM_PIFS_1408 = 0xB,QECM_PIFS_1280 = 0xA,QECM_PIFS_1152 = 0x9,QECM_PIFS_1024 = 0x8,QECM_PIFS_896 = 0x7,QECM_PIFS_768 = 0x6,QECM_PIFS_640 = 0x5,QECM_PIFS_512 = 0x4,QECM_PIFS_384 = 0x3,QECM_PIFS_256 = 0x2,QECM_PIFS_128 = 0x1,QECM_PIFS_2048 = 0x0,};
enum MACRO_QECMAXRSTDELAY {QECMAXRSTDELAY = 100,};
enum MACRO_QECPERIOD {QECPERIOD = 10,};
enum MACRO_QECWAITPERIOD {QECWAITPERIOD = 10,};
enum MACRO_QENAB {QENAB = 0x1,QWANTR = 0x2,QWANTW = 0x4,QFULL = 0x8,QREADR = 0x10,QUSE = 0x20,QNOENB = 0x40,QBACK = 0x100,QHLIST = 0x200,QPAIR = 0x800,QPERQ = 0x1000,QPERMOD = 0x2000,QMTSAFE = 0x4000,QMTOUTPERIM = 0x8000,};
enum MACRO_QFIXEDSZ {QFIXEDSZ = 4,RRFIXEDSZ = 10,};
enum MACRO_QINSERVICE {QINSERVICE = 0x10000,QWCLOSE = 0x20000,QEND = 0x40000,QWANTWSYNC = 0x80000,QSYNCSTR = 0x100000,QISDRV = 0x200000,QHOT = 0x400000,QNEXTHOT = 0x800000,_QINSERTING = 0x4000000,_QREMOVING = 0x8000000,};
enum MACRO_QMD {QMD_OWN = 0x80000000,QMD_SOP = 0x40000000,QMD_EOP = 0x20000000,QMD_INUSE = 0x10000000,};
enum MACRO_QMT {QMT_TYPEMASK = 63488,};
enum MACRO_QNICE {QNICE = 0,BOOTDLY = 60,};
enum MACRO_QNORM {QNORM = 0x0,QPCTL = 0x80,};
enum MACRO_QUE {QUE_BUSY_COMMAND = 4,};
enum MACRO_QUE_LAST {QUE_LAST_COMMAND = 8,};
enum MACRO_Q_QUOTAON {Q_QUOTAON = 1,Q_QUOTAOFF = 2,Q_SETQUOTA = 3,Q_GETQUOTA = 4,Q_SETQLIM = 5,Q_SYNC = 6,Q_ALLSYNC = 7,Q_QUOTACTL = 197001,};
enum MACRO_R {R_DEBUG_VERSION = 2,};
enum MACRO_R0 {R0 = 11,};
enum MACRO_R1 {R1 = 12,};
enum MACRO_RADIXCHAR {RADIXCHAR = 39,};
enum MACRO_RAND {RAND_MAX = 32767,};
enum MACRO_RARP {RARP_REQUEST = 3,RARP_RESPONSE = 4,};
enum MACRO_RB {RB_AUTOBOOT = 0,RB_ASKNAME = 1,RB_SINGLE = 2,RB_NOSYNC = 4,RB_HALT = 8,RB_INITNAME = 16,RB_NOBOOTRC = 32,RB_DEBUG = 64,RB_DUMP = 128,RB_WRITABLE = 256,RB_STRING = 512,RB_CONFIG = 2048,RB_RECONFIG = 4096,RB_VERBOSE = 8192,RB_FLUSHCACHE = 65536,RB_KRTLD = 131072,RB_NOBOOTCLUSTER = 262144,};
enum MACRO_RCIBRG {RCIBRG = 0x0,RCTSET = 0x8,RCRSET = 0x10,TSETCLK = 0x1C0,};
enum MACRO_RCM {RCM_INCLUDE_SUBTREE = 0x1,RCM_INCLUDE_DEPENDENT = 0x2,RCM_QUERY = 0x4,RCM_FORCE = 0x8,RCM_FILESYS = 0x10,RCM_NOPID = 0x20,RCM_DR_OPERATION = 0x40,RCM_MOD_INFO = 0x80,RCM_SUCCESS = 0x0,RCM_FAILURE = 0xFFFFFFFF,RCM_CONFLICT = 0xFFFFFFFE,RCM_STATE_UNKNOWN = 0x0,RCM_STATE_ONLINE = 0x1,RCM_STATE_ONLINING = 0x2,RCM_STATE_OFFLINE_FAIL = 0x3,RCM_STATE_OFFLINING = 0x4,RCM_STATE_OFFLINE = 0x5,RCM_STATE_REMOVING = 0x6,RCM_STATE_RESUMING = 0xA,RCM_STATE_SUSPEND_FAIL = 0xB,RCM_STATE_SUSPENDING = 0xC,RCM_STATE_SUSPEND = 0xD,RCM_STATE_REMOVE = 0xE,};
enum MACRO_RCV {RCV_EXP = 7,};
enum MACRO_RCVR {RCVR_DIS = 0x1,RCVR_ENA = 0x2,};
enum MACRO_RD {RD_NEAR = 0,RD_ZER0 = 1,RD_POSINF = 2,RD_NEGINF = 3,};
enum MACRO_RDCMD {RDCMD = 0x6,};
enum MACRO_RDDEL {RDDEL = 0xC,};
enum MACRO_RDDIR {RDDIR = 0x1,RDDIRWAIT = 0x2,RDDIRREQ = 0x4,};
enum MACRO_RDEF {RDEF_ALL = 0,RDEF_MANUF = 1,RDEF_CKLEN = 2,};
enum MACRO_RDF {RDF_LEVEL0 = 0x0,RDF_CCS = 0x1,RDF_SCSI2 = 0x2,};
enum MACRO_RDID {RDID = 0xA,};
enum MACRO_RDSIDE {RDSIDE = 1,WRSIDE = 2,};
enum MACRO_RDTRK {RDTRK = 0x2,};
enum MACRO_RD_VERSION {RD_VERSION = 1,};
enum MACRO_REC {REC_ESC = -1,REC_EOR = 1,REC_EOF = 2,};
enum MACRO_RECALIBRATE {RECALIBRATE = 0x7,SNSISTAT = 0x8,};
enum MACRO_RECOMPUTE {RECOMPUTE_DONE = 0x80,};
enum MACRO_REG {REG_PSR = 0,REG_PC = 1,REG_nPC = 2,REG_Y = 3,REG_G1 = 4,REG_G2 = 5,REG_G3 = 6,REG_G4 = 7,REG_G5 = 8,REG_G6 = 9,REG_G7 = 10,REG_O0 = 11,REG_O1 = 12,REG_O2 = 13,REG_O3 = 14,REG_O4 = 15,REG_O5 = 16,REG_O6 = 17,REG_O7 = 18,REG_PS = 0,REG_SP = 17,REG_R0 = 11,REG_R1 = 12,};
enum MACRO_REG_EXTENDED {REG_EXTENDED = 0x1,REG_NEWLINE = 0x8,REG_ICASE = 0x4,REG_NOSUB = 0x2,REG_EGREP = 0x1000,REG_DELIM = 0x10,REG_DEBUG = 0x20,REG_ANCHOR = 0x40,REG_WORDS = 0x80,REG_MUST = 0x100,REG_NOTBOL = 0x200,REG_NOTEOL = 0x400,REG_NOOPT = 0x800,REG_OK = 0x0,REG_NOMATCH = 0x1,REG_ECOLLATE = 0x2,REG_EESCAPE = 0x3,REG_ENEWLINE = 0x4,REG_ENSUB = 0x5,REG_ESUBREG = 0x6,REG_EBRACK = 0x7,REG_EPAREN = 0x8,REG_EBRACE = 0x9,REG_ERANGE = 0xA,REG_ESPACE = 0xB,REG_BADRPT = 0xC,REG_ECTYPE = 0xD,REG_BADPAT = 0xE,REG_BADBR = 0xF,REG_EFATAL = 0x10,REG_ECHAR = 0x11,REG_STACK = 0x12,REG_ENOSYS = 0x13,REG__LAST = 0x14,REG_EBOL = 0x15,REG_EEOL = 0x16,};
enum MACRO_RELOC {RELOC_DIR = -7,};
enum MACRO_RELOCATED {RELOCATED_DIR = 0x4,};
enum MACRO_REM {REM_MULTIPLE = 512,};
enum MACRO_REMOTEMODE {REMOTEMODE = 0x1,};
enum MACRO_REM_OPTS {REM_OPTS = 0xFFFF,REM_DISALLOW = 0x2,REM_OPTIONAL = 0x4,REM_MAND = 0x8,};
enum MACRO_REOF {REOF = 0x1,RDIRTY = 0x2,RDONTWRITE = 0x4,RMODINPROGRESS = 0x8,RTRUNCATE = 0x10,RHAVEVERF = 0x20,RCOMMIT = 0x40,RCOMMITWAIT = 0x80,RHASHED = 0x100,ROUTOFSPACE = 0x200,RSERIALIZE = 0x400,RPURGECACHE = 0x800,RDIRECTIO = 0x1000,};
enum MACRO_REPORT {REPORT_MOUSE_POSITION = 0x8000,};
enum MACRO_REPORT_TYPE {REPORT_TYPE_INPUT = 0x100,REPORT_TYPE_OUTPUT = 0x200,REPORT_TYPE_FEATURE = 0x300,};
enum MACRO_REQ {REQ_NEXT_PAGE = 512,REQ_PREV_PAGE = 513,REQ_FIRST_PAGE = 514,REQ_LAST_PAGE = 515,REQ_NEXT_FIELD = 516,REQ_PREV_FIELD = 517,REQ_FIRST_FIELD = 518,REQ_LAST_FIELD = 519,REQ_SNEXT_FIELD = 520,REQ_SPREV_FIELD = 521,REQ_SFIRST_FIELD = 522,REQ_SLAST_FIELD = 523,REQ_LEFT_FIELD = 524,REQ_RIGHT_FIELD = 525,REQ_UP_FIELD = 526,REQ_DOWN_FIELD = 527,REQ_NEXT_CHAR = 528,REQ_PREV_CHAR = 529,REQ_NEXT_LINE = 530,REQ_PREV_LINE = 531,REQ_NEXT_WORD = 532,REQ_PREV_WORD = 533,REQ_BEG_FIELD = 534,REQ_END_FIELD = 535,REQ_BEG_LINE = 536,REQ_END_LINE = 537,REQ_LEFT_CHAR = 538,REQ_RIGHT_CHAR = 539,REQ_UP_CHAR = 540,REQ_DOWN_CHAR = 541,REQ_NEW_LINE = 542,REQ_INS_CHAR = 543,REQ_INS_LINE = 544,REQ_DEL_CHAR = 545,REQ_DEL_PREV = 546,REQ_DEL_LINE = 547,REQ_DEL_WORD = 548,REQ_CLR_EOL = 549,REQ_CLR_EOF = 550,REQ_CLR_FIELD = 551,REQ_OVL_MODE = 552,REQ_INS_MODE = 553,REQ_SCR_FLINE = 554,REQ_SCR_BLINE = 555,REQ_SCR_FPAGE = 556,REQ_SCR_BPAGE = 557,REQ_SCR_FHPAGE = 558,REQ_SCR_BHPAGE = 559,REQ_SCR_FCHAR = 560,REQ_SCR_BCHAR = 561,REQ_SCR_HFLINE = 562,REQ_SCR_HBLINE = 563,REQ_SCR_HFHALF = 564,REQ_SCR_HBHALF = 565,REQ_VALIDATION = 566,REQ_NEXT_CHOICE = 567,REQ_PREV_CHOICE = 568,};
enum MACRO_REQ_LEFT {REQ_LEFT_ITEM = 512,REQ_RIGHT_ITEM = 513,REQ_UP_ITEM = 514,REQ_DOWN_ITEM = 515,REQ_SCR_ULINE = 516,REQ_SCR_DLINE = 517,REQ_SCR_DPAGE = 518,REQ_SCR_UPAGE = 519,REQ_FIRST_ITEM = 520,REQ_LAST_ITEM = 521,REQ_NEXT_ITEM = 522,REQ_PREV_ITEM = 523,REQ_TOGGLE_ITEM = 524,REQ_CLEAR_PATTERN = 525,REQ_BACK_PATTERN = 526,REQ_NEXT_MATCH = 527,REQ_PREV_MATCH = 528,};
enum MACRO_RERRMASK {RERRMASK = 3,WERRNORM = 4,WERRNONPERSIST = 8,};
enum MACRO_RERRNORM {RERRNORM = 0x1,RERRNONPERSIST = 0x2,};
enum MACRO_RES {RES_TIMEOUT = 5,};
enum MACRO_RESERVED {ADD_RESERVED = 2048,REM_RESERVED = 4096,};
enum MACRO_RESET {RESET_CHAN = 0x80,};
enum MACRO_RESETKEY {RESETKEY = 0xFF,};
enum MACRO_RESET_ALL {RESET_ALL = 0,RESET_TARGET = 1,RESET_BUS = 2,};
enum MACRO_RESIDENT {LLC_RESIDENT = 1,ADAPTER_RESIDENT = 1,};
enum MACRO_RESPMAX {RESPMAX = 70000,};
enum MACRO_RES_MAXNDOTS {RES_MAXNDOTS = 15,RES_INIT = 1,RES_DEBUG = 2,RES_AAONLY = 4,RES_USEVC = 8,RES_PRIMARY = 16,RES_IGNTC = 32,RES_RECURSE = 64,RES_DEFNAMES = 128,RES_STAYOPEN = 256,RES_DNSRCH = 512,RES_INSECURE1 = 1024,RES_INSECURE2 = 2048,RES_NOALIASES = 4096,RES_USE_INET6 = 8192,RES_DEFAULT = 704,RES_PRF_STATS = 1,RES_PRF_UPDATE = 2,RES_PRF_CLASS = 4,RES_PRF_CMD = 8,RES_PRF_QUES = 16,RES_PRF_ANS = 32,RES_PRF_AUTH = 64,RES_PRF_ADD = 128,RES_PRF_HEAD1 = 256,RES_PRF_HEAD2 = 512,RES_PRF_TTLID = 1024,RES_PRF_HEADX = 2048,RES_PRF_QUERY = 4096,RES_PRF_REPLY = 8192,RES_PRF_INIT = 16384,};
enum MACRO_RETURN {RETURN_RESULT = 128,};
enum MACRO_RETURN_0 {RETURN = 6,};
enum MACRO_RETURN_FIRST {RETURN_FIRST_TUPLE = 0xFF,RETURN_NEXT_TUPLE = 0xFF,};
enum MACRO_REVARP {REVARP_REQUEST = 3,REVARP_REPLY = 4,};
enum MACRO_RFLUSHPCPROT {RFLUSHPCPROT = 0x20,};
enum MACRO_RFS {RFS_NULL = 0,RFS_GETATTR = 1,RFS_SETATTR = 2,RFS_ROOT = 3,RFS_LOOKUP = 4,RFS_READLINK = 5,RFS_READ = 6,RFS_WRITECACHE = 7,RFS_WRITE = 8,RFS_CREATE = 9,RFS_REMOVE = 10,RFS_RENAME = 11,RFS_LINK = 12,RFS_SYMLINK = 13,RFS_MKDIR = 14,RFS_RMDIR = 15,RFS_READDIR = 16,RFS_STATFS = 17,RFS_NPROC = 18,};
enum MACRO_RFSCALL {RFSCALL_SOFT = 0x1,};
enum MACRO_RIGHTALT {RIGHTALT = 12,UPMASK = 128,};
enum MACRO_RIGHTCTRL {RIGHTCTRL = 5,CTRLMASK = 48,};
enum MACRO_RIGHTFUNC {RIGHTFUNC = 0x610,};
enum MACRO_RIGHTSHIFT {RIGHTSHIFT = 3,};
enum MACRO_RIPCMD {RIPCMD_REQUEST = 1,RIPCMD_RESPONSE = 2,RIPCMD_TRACEON = 3,RIPCMD_TRACEOFF = 4,RIPCMD_POLL = 5,RIPCMD_POLLENTRY = 6,RIPCMD_MAX = 7,};
enum MACRO_RIPVERSION {RIPVERSION = 1,};
enum MACRO_RJEGID {RJEGID = 8,QUELEN = 50,};
enum MACRO_RJEUID {RJEUID = 68,};
enum MACRO_RJT {RJT_INVALID_CMD = 0x1,RJT_LOGICAL_ERR = 0x3,RJT_LOGICAL_BUSY = 0x5,RJT_PROTOCOL_ERR = 0x7,RJT_UNABLE = 0x9,RJT_UNSUPPORTED = 0xB,RJT_VENDOR = 0xFF,RJT_NOEXPLANATION = 0x0,RJT_INVALID_OSID = 0x1,RJT_INVALID_OXID_RXID = 0x3,RJT_INVALID_SEQID = 0x5,RJT_ABORT_INACTIVE_SEQ = 0x7,RJT_UNABLE_TO_SUPPLY = 0x9,};
enum MACRO_RJT_INVALID {RJT_INVALID_CMD_CODE = 0x1,RJT_LOGICAL_ERROR = 0x3,RJT_CANT_PERFORM_RQST = 0x9,RJT_CMD_NOT_SUPPORTED = 0xB,};
enum MACRO_RL {RL_IOC_ENABLE = 29185,};
enum MACRO_RLIM {RLIM_NLIMITS = 7,RLIM_INFINITY = 2147483647,RLIM_SAVED_MAX = 2147483646,RLIM_SAVED_CUR = 2147483645,};
enum MACRO_RLIM64 {RLIM64_INFINITY = -3,RLIM64_SAVED_MAX = -2,RLIM64_SAVED_CUR = -1,};
enum MACRO_RLIMIT {RLIMIT_CPU = 0,RLIMIT_FSIZE = 1,RLIMIT_DATA = 2,RLIMIT_STACK = 3,RLIMIT_CORE = 4,RLIMIT_NOFILE = 5,RLIMIT_VMEM = 6,RLIMIT_AS = 6,};
enum MACRO_RLIOC {RLIOC = 29184,};
enum MACRO_RLMPL {RLMPL_PID = 1,RLMPL_OWNER = 2,};
enum MACRO_RLOGIN {RLOGIN_MAGIC = 0xFF,};
enum MACRO_RMD {RMD_FRAM = 0x20,RMD_OFLO = 0x10,RMD_CRC = 0x8,RMD_BUFF = 0x4,};
enum MACRO_RMODEMASK {RMODEMASK = 0x3,RPROTDAT = 0x4,RPROTDIS = 0x8,RPROTNORM = 0x10,};
enum MACRO_RNORM {RNORM = 0x0,RMSGD = 0x1,RMSGN = 0x2,};
enum MACRO_ROMVEC {ROMVEC_BLKSIZE = 512,};
enum MACRO_ROMVEC_VERSION {SUNMON_ROMVEC_VERSION = -1,OBP_V0_ROMVEC_VERSION = 0,OBP_V2_ROMVEC_VERSION = 2,OBP_V3_ROMVEC_VERSION = 3,OBP_PSEUDO_ROMVEC_VERSION = 5555,OBP_PLUGIN_VERSION = 2,};
enum MACRO_ROOT {ROOT_HUB_DESCRIPTOR_LENGTH = 9,ROOT_HUB_DESCRIPTOR_TYPE = 41,ROOT_HUB_ADDR = 1,};
enum MACRO_RP {RP_DBLEXT = 0,RP_SINGLE = 1,RP_DOUBLE = 2,RP_RESERVED = 3,};
enum MACRO_RPC {RPC_ANYSOCK = -1,RPC_ANYFD = -1,RPC_MAXDATASIZE = 9000,RPC_MAXADDRSIZE = 1024,RPC_CLIENT = 1,RPC_SERVER = 2,RPC_TEST = 3,RPC_SVC_MTMODE_SET = 1,RPC_SVC_MTMODE_GET = 2,RPC_SVC_THRMAX_SET = 3,RPC_SVC_THRMAX_GET = 4,RPC_SVC_THRTOTAL_GET = 5,RPC_SVC_THRCREATES_GET = 6,RPC_SVC_THRERRORS_GET = 7,};
enum MACRO_RPCBPROC {RPCBPROC_SET = 1,RPCBPROC_UNSET = 2,RPCBPROC_GETADDR = 3,RPCBPROC_DUMP = 4,RPCBPROC_CALLIT = 5,RPCBPROC_GETTIME = 6,RPCBPROC_UADDR2TADDR = 7,RPCBPROC_TADDR2UADDR = 8,};
enum MACRO_RPCBPROC_BCAST {RPCBPROC_BCAST = 5,RPCBPROC_GETVERSADDR = 9,RPCBPROC_INDIRECT = 10,RPCBPROC_GETADDRLIST = 11,RPCBPROC_GETSTAT = 12,};
enum MACRO_RPCBPROG {RPCBPROG = 100000,};
enum MACRO_RPCBSTAT {RPCBSTAT_HIGHPROC = 13,};
enum MACRO_RPCBVERS {RPCBVERS_STAT = 3,RPCBVERS_4_STAT = 2,RPCBVERS_3_STAT = 1,RPCBVERS_2_STAT = 0,};
enum MACRO_RPCBVERS4 {RPCBVERS4 = 4,};
enum MACRO_RPCBVERS_0 {RPCBVERS = 3,};
enum MACRO_RPCSEC {RPCSEC_GSS = 6,};
enum MACRO_RPCSEC_GSS {RPCSEC_GSS_DATA = 0,RPCSEC_GSS_INIT = 1,RPCSEC_GSS_CONTINUE_INIT = 2,RPCSEC_GSS_DESTROY = 3,RPCSEC_GSS_VERSION = 1,};
enum MACRO_RPCSMALLMSGSIZE {RPCSMALLMSGSIZE = 400,};
enum MACRO_RPCTEST {RPCTEST_PROGRAM = 1,RPCTEST_VERSION = 1,RPCTEST_NULL_PROC = 2,RPCTEST_NULL_BATCH_PROC = 3,};
enum MACRO_RPC_GSS {RPC_GSS_ER_SUCCESS = 0,RPC_GSS_ER_SYSTEMERROR = 1,};
enum MACRO_RPC_MSG {RPC_MSG_VERSION = 2,RPC_SERVICE_PORT = 2048,};
enum MACRO_RPC_SVC {RPC_SVC_USE_POLLFD = 10,RPC_SVC_CONNMAXREC_SET = 11,RPC_SVC_CONNMAXREC_GET = 12,};
enum MACRO_RPC_SVC_MT {RPC_SVC_MT_NONE = 0,RPC_SVC_MT_AUTO = 1,RPC_SVC_MT_USER = 2,};
enum MACRO_RPL {RPL_SPINDLE_SLAVE = 1,RPL_SPINDLE_MASTER = 2,RPL_SPINDLE_MASTER_CONTROL = 3,};
enum MACRO_RPROTMASK {RPROTMASK = 0x1C,RFLUSHMASK = 0x20,};
enum MACRO_RQ {RQ_PATHLEN = 1024,};
enum MACRO_RQS {RQS_OVR = 0x1,RQS_VALID = 0x2,};
enum MACRO_RQUOTAPROC {RQUOTAPROC_GETQUOTA = 1,RQUOTAPROC_GETACTIVEQUOTA = 2,};
enum MACRO_RQUOTAPROG {RQUOTAPROG = 100011,};
enum MACRO_RQUOTAVERS {RQUOTAVERS = 1,};
enum MACRO_RRIP {RRIP_VERSION = 1,RRIP_SUF_VERSION = 1,RRIP_EXT_VERSION = 1,RRIP_BIT = 1,RRIP_TIME_START_BP = 5,RRIP_TF_CREATION_BIT = 1,RRIP_TF_MODIFY_BIT = 2,RRIP_TF_ACCESS_BIT = 4,RRIP_TF_ATTRIBUTES_BIT = 8,RRIP_TF_BACKUP_BIT = 16,RRIP_TF_EXPIRATION_BIT = 32,RRIP_TF_EFFECTIVE_BIT = 64,RRIP_TF_LONG_BIT = 128,RRIP_NAME_LEN_BASE = 5,RRIP_NAME_CONTINUE = 1,RRIP_NAME_CURRENT = 2,RRIP_NAME_PARENT = 4,RRIP_NAME_ROOT = 8,RRIP_NAME_VOLROOT = 16,RRIP_NAME_HOST = 32,RRIP_NAME_CHANGE = 64,RRIP_SYM_LINK_COMPLETE = 128,RRIP_FILE_NAMELEN = 255,};
enum MACRO_RRQ {RRQ = 0x1,WRQ = 0x2,};
enum MACRO_RS {RS_HIPRI = 0x1,};
enum MACRO_RSETCOFF {RSETCOFF = 0x0,RSETCRBRG = 0x200,RSETCTBRG = 0x400,};
enum MACRO_RSETCTSET {RSETCTSET = 0x600,RSETCRSET = 0x800,};
enum MACRO_RSTAT {RSTAT_CPUSTATES = 4,RSTAT_DK_NDRIVE = 4,RSTAT_CPU_USER = 0,RSTAT_CPU_NICE = 1,RSTAT_CPU_SYS = 2,RSTAT_CPU_IDLE = 3,};
enum MACRO_RSTATPROC {RSTATPROC_STATS = 1,RSTATPROC_HAVEDISK = 2,};
enum MACRO_RSTATPROG {RSTATPROG = 100001,};
enum MACRO_RSTATVERS {RSTATVERS_VAR = 4,};
enum MACRO_RSTATVERS_TIME {RSTATVERS_TIME = 3,};
enum MACRO_RT {RT_NOCHANGE = -1,RT_TQINF = -2,RT_TQDEF = -3,RT_GETDPSIZE = 1,RT_GETDPTBL = 2,RT_SETDPTBL = 3,};
enum MACRO_RTA {RTA_DST = 0x1,RTA_GATEWAY = 0x2,RTA_NETMASK = 0x4,RTA_GENMASK = 0x8,RTA_IFP = 0x10,RTA_IFA = 0x20,RTA_AUTHOR = 0x40,RTA_BRD = 0x80,RTA_NUMBITS = 0x8,};
enum MACRO_RTBACKQ {RTBACKQ = 0x2,};
enum MACRO_RTF {RTF_UP = 0x1,RTF_GATEWAY = 0x2,RTF_HOST = 0x4,RTF_REJECT = 0x8,RTF_DYNAMIC = 0x10,RTF_MODIFIED = 0x20,RTF_DONE = 0x40,RTF_MASK = 0x80,RTF_CLONING = 0x100,RTF_XRESOLVE = 0x200,RTF_LLINFO = 0x400,RTF_STATIC = 0x800,RTF_BLACKHOLE = 0x1000,RTF_PRIVATE = 0x2000,RTF_PROTO2 = 0x4000,RTF_PROTO1 = 0x8000,};
enum MACRO_RTLD {RTLD_NEXT = -1,RTLD_DEFAULT = -2,RTLD_LAZY = 1,RTLD_NOW = 2,RTLD_NOLOAD = 4,RTLD_GLOBAL = 256,RTLD_LOCAL = 0,RTLD_PARENT = 512,RTLD_GROUP = 1024,RTLD_WORLD = 2048,RTLD_NODELETE = 4096,RTLD_CONFGEN = 65536,RTLD_REL_RELATIVE = 1,RTLD_REL_EXEC = 2,RTLD_REL_DEPENDS = 4,RTLD_REL_PRELOAD = 8,RTLD_REL_SELF = 16,RTLD_REL_WEAK = 32,RTLD_REL_ALL = 4095,RTLD_MEMORY = 4096,RTLD_STRIP = 8192,RTLD_NOHEAP = 16384,RTLD_CONFSET = 65536,RTLD_DI_LMID = 1,RTLD_DI_LINKMAP = 2,RTLD_DI_CONFIGADDR = 3,RTLD_DI_MAX = 3,};
enum MACRO_RTM {RTM_VERSION = 3,RTM_ADD = 1,RTM_DELETE = 2,RTM_CHANGE = 3,RTM_GET = 4,RTM_LOSING = 5,RTM_REDIRECT = 6,RTM_MISS = 7,RTM_LOCK = 8,RTM_OLDADD = 9,RTM_OLDDEL = 10,RTM_RESOLVE = 11,RTM_NEWADDR = 12,RTM_DELADDR = 13,RTM_IFINFO = 14,};
enum MACRO_RTS {RTS_TOG = 21537,};
enum MACRO_RTSXOFF {RTSXOFF = 0x1,CTSXON = 0x2,DTRXOFF = 0x4,CDXON = 0x8,ISXOFF = 0x10,};
enum MACRO_RTV {RTV_MTU = 0x1,RTV_HOPCOUNT = 0x2,RTV_EXPIRE = 0x4,RTV_RPIPE = 0x8,RTV_SPIPE = 0x10,RTV_SSTHRESH = 0x20,RTV_RTT = 0x40,RTV_RTTVAR = 0x80,};
enum MACRO_RUN {RUN_LVL = 1,};
enum MACRO_RUSAGE {RUSAGE_SELF = 0,RUSAGE_CHILDREN = -1,};
enum MACRO_RUSERS {RUSERS_MAXUSERLEN = 32,RUSERS_MAXLINELEN = 32,RUSERS_MAXHOSTLEN = 257,RUSERS_EMPTY = 0,RUSERS_RUN_LVL = 1,RUSERS_BOOT_TIME = 2,RUSERS_OLD_TIME = 3,RUSERS_NEW_TIME = 4,RUSERS_INIT_PROCESS = 5,RUSERS_LOGIN_PROCESS = 6,RUSERS_USER_PROCESS = 7,RUSERS_DEAD_PROCESS = 8,RUSERS_ACCOUNTING = 9,};
enum MACRO_RUSERSPROC {RUSERSPROC_NUM = 1,RUSERSPROC_NAMES = 2,RUSERSPROC_ALLNAMES = 3,};
enum MACRO_RUSERSPROG {RUSERSPROG = 100002,};
enum MACRO_RUSERSVERS {RUSERSVERS_IDLE = 2,};
enum MACRO_RUSERSVERS_0 {RUSERSVERS = 3,MAXUSERS = 100,};
enum MACRO_RUSERSVERS_3 {RUSERSVERS_3 = 3,};
enum MACRO_RVAL {RVAL_CMD_UNKNOWN = -2,RVAL_PARM_INVALID = -3,RVAL_SYS_ERR = -4,RVAL_STA_INVALID = -5,RVAL_STA_OUTSTATE = -6,RVAL_SAP_INVALID = -7,RVAL_CON_INVALID = -8,RVAL_MAC_INVALID = -9,};
enum MACRO_RW {RW_HAS_WAITERS = 1,RW_WRITE_WANTED = 2,RW_WRITE_LOCKED = 4,RW_READ_LOCK = 8,RW_HOLD_COUNT = -8,RW_HOLD_COUNT_SHIFT = 3,RW_READ_COUNT = -8,RW_OWNER = -8,RW_LOCKED = -8,RW_WRITE_CLAIMED = 6,};
enum MACRO_RX {RX_FIFO_SIZE = 4,};
enum MACRO_RXC {RXC_IS_RXC = 0,RXC_IS_TXC = 1,RXC_IS_BAUD = 2,RXC_IS_PLL = 3,};
enum MACRO_RX_DATA {RX_DATA = 0x10,RX_RET = 0x1,};
enum MACRO_RX_FIFO {MIN_RX_FIFO = 1,MAX_RX_FIFO = 8,};
enum MACRO_RX_FIFO_MASK {RX_FIFO_MASK = 0xF,};
enum MACRO_RX_TIMEOUT {RX_TIMEOUT = 0x80,RX_BREAK = 0x8,RX_PARITY = 0x4,RX_FRAMING = 0x2,RX_OVERRUN = 0x1,};
enum MACRO_R_386 {R_386_NONE = 0,R_386_32 = 1,R_386_PC32 = 2,R_386_GOT32 = 3,R_386_PLT32 = 4,R_386_COPY = 5,R_386_GLOB_DAT = 6,R_386_JMP_SLOT = 7,R_386_RELATIVE = 8,R_386_GOTOFF = 9,R_386_GOTPC = 10,R_386_32PLT = 11,R_386_NUM = 12,};
enum MACRO_R_CTL {R_CTL_ROUTING = 0xF0,R_CTL_INFO = 0xF,R_CTL_DEVICE_DATA = 0x0,R_CTL_EXTENDED_SVC = 0x20,R_CTL_FC4_SVC = 0x30,R_CTL_VIDEO_BUFF = 0x40,R_CTL_BASIC_SVC = 0x80,R_CTL_LINK_CTL = 0xC0,R_CTL_UNCATEGORIZED = 0x0,R_CTL_SOLICITED_DATA = 0x1,R_CTL_UNSOL_CONTROL = 0x2,R_CTL_SOLICITED_CONTROL = 0x3,R_CTL_UNSOL_DATA = 0x4,R_CTL_XFER_RDY = 0x5,R_CTL_COMMAND = 0x6,R_CTL_STATUS = 0x7,R_CTL_LS_NOP = 0x80,R_CTL_LS_ABTS = 0x81,R_CTL_LS_RMC = 0x82,R_CTL_LS_BA_ACC = 0x84,R_CTL_LS_BA_RJT = 0x85,R_CTL_ELS_REQ = 0x22,R_CTL_ELS_RSP = 0x23,};
enum MACRO_R_CTL_ACK {R_CTL_ACK_1 = 0xC0,R_CTL_ACK_N = 0xC1,R_CTL_P_RJT = 0xC2,R_CTL_F_RJT = 0xC3,R_CTL_P_BSY = 0xC4,R_CTL_F_BSY_DF = 0xC5,R_CTL_F_BSY_LC = 0xC6,R_CTL_LCR = 0xC7,};
enum MACRO_R_G0 {R_G0 = 0,R_G1 = 1,R_G2 = 2,R_G3 = 3,R_G4 = 4,R_G5 = 5,R_G6 = 6,R_G7 = 7,R_O0 = 8,R_O1 = 9,R_O2 = 10,R_O3 = 11,R_O4 = 12,R_O5 = 13,R_O6 = 14,R_O7 = 15,R_L0 = 16,R_L1 = 17,R_L2 = 18,R_L3 = 19,R_L4 = 20,R_L5 = 21,R_L6 = 22,R_L7 = 23,R_I0 = 24,R_I1 = 25,R_I2 = 26,R_I3 = 27,R_I4 = 28,R_I5 = 29,R_I6 = 30,R_I7 = 31,R_PSR = 32,R_PC = 33,R_nPC = 34,R_Y = 35,R_WIM = 36,R_TBR = 37,R_PS = 32,R_SP = 14,R_FP = 30,R_R0 = 8,R_R1 = 9,};
enum MACRO_R_IA {R_IA_64_NONE = 0,R_IA_64_IMM14 = 33,R_IA_64_IMM22 = 34,R_IA_64_IMM64 = 35,R_IA_64_DIR32MSB = 36,R_IA_64_DIR32LSB = 37,R_IA_64_DIR64MSB = 38,R_IA_64_DIR64LSB = 39,R_IA_64_GPREL22 = 42,R_IA_64_GPREL64I = 43,R_IA_64_GPREL64MSB = 46,R_IA_64_GPREL64LSB = 47,R_IA_64_LTOFF22 = 50,R_IA_64_LTOFF64I = 51,R_IA_64_PLTOFF22 = 58,R_IA_64_PLTOFF64I = 59,R_IA_64_PLTOFF64MSB = 62,R_IA_64_PLTOFF64LSB = 63,R_IA_64_FPTR64I = 67,R_IA_64_FPTR32MSB = 68,R_IA_64_FPTR32LSB = 69,R_IA_64_FPTR64MSB = 70,R_IA_64_FPTR64LSB = 71,R_IA_64_PCREL21B = 73,R_IA_64_PCREL21M = 74,R_IA_64_PCREL21F = 75,R_IA_64_PCREL32MSB = 76,R_IA_64_PCREL32LSB = 77,R_IA_64_PCREL64MSB = 78,R_IA_64_PCREL64LSB = 79,R_IA_64_LTOFF_FPTR22 = 82,R_IA_64_LTOFF_FPTR64I = 83,R_IA_64_SEGREL32MSB = 92,R_IA_64_SEGREL32LSB = 93,R_IA_64_SEGREL64MSB = 94,R_IA_64_SEGREL64LSB = 95,R_IA_64_SECREL32MSB = 100,R_IA_64_SECREL32LSB = 101,R_IA_64_SECREL64MSB = 102,R_IA_64_SECREL64LSB = 103,R_IA_64_REL32MSB = 108,R_IA_64_REL32LSB = 109,R_IA_64_REL64MSB = 110,R_IA_64_REL64LSB = 111,R_IA_64_LTV32MSB = 112,R_IA_64_LTV32LSB = 113,R_IA_64_LTV64MSB = 114,R_IA_64_LTV64LSB = 115,R_IA_64_IPLTMSB = 128,R_IA_64_IPLTLSB = 129,R_IA_64_NUM = 130,};
enum MACRO_R_M32 {R_M32_NONE = 0,R_M32_32 = 1,R_M32_32_S = 2,R_M32_PC32_S = 3,R_M32_GOT32_S = 4,R_M32_PLT32_S = 5,R_M32_COPY = 6,R_M32_GLOB_DAT = 7,R_M32_JMP_SLOT = 8,R_M32_RELATIVE = 9,R_M32_RELATIVE_S = 10,R_M32_NUM = 11,};
enum MACRO_R_SPARC {R_SPARC_NONE = 0,R_SPARC_8 = 1,R_SPARC_16 = 2,R_SPARC_32 = 3,R_SPARC_DISP8 = 4,R_SPARC_DISP16 = 5,R_SPARC_DISP32 = 6,R_SPARC_WDISP30 = 7,R_SPARC_WDISP22 = 8,R_SPARC_HI22 = 9,R_SPARC_22 = 10,R_SPARC_13 = 11,R_SPARC_LO10 = 12,R_SPARC_GOT10 = 13,R_SPARC_GOT13 = 14,R_SPARC_GOT22 = 15,R_SPARC_PC10 = 16,R_SPARC_PC22 = 17,R_SPARC_WPLT30 = 18,R_SPARC_COPY = 19,R_SPARC_GLOB_DAT = 20,R_SPARC_JMP_SLOT = 21,R_SPARC_RELATIVE = 22,R_SPARC_UA32 = 23,R_SPARC_PLT32 = 24,R_SPARC_HIPLT22 = 25,R_SPARC_LOPLT10 = 26,R_SPARC_PCPLT32 = 27,R_SPARC_PCPLT22 = 28,R_SPARC_PCPLT10 = 29,R_SPARC_10 = 30,R_SPARC_11 = 31,R_SPARC_64 = 32,R_SPARC_OLO10 = 33,R_SPARC_HH22 = 34,R_SPARC_HM10 = 35,R_SPARC_LM22 = 36,R_SPARC_PC_HH22 = 37,R_SPARC_PC_HM10 = 38,R_SPARC_PC_LM22 = 39,R_SPARC_WDISP16 = 40,R_SPARC_WDISP19 = 41,R_SPARC_GLOB_JMP = 42,R_SPARC_7 = 43,R_SPARC_5 = 44,R_SPARC_6 = 45,R_SPARC_DISP64 = 46,R_SPARC_PLT64 = 47,R_SPARC_HIX22 = 48,R_SPARC_LOX10 = 49,R_SPARC_H44 = 50,R_SPARC_M44 = 51,R_SPARC_L44 = 52,R_SPARC_REGISTER = 53,R_SPARC_UA64 = 54,R_SPARC_UA16 = 55,R_SPARC_NUM = 56,};
enum MACRO_S {S_SIGNAL = 1,S_SIGSET = 2,S_SIGACTION = 3,S_NONE = 4,};
enum MACRO_S2E {S2E_SP = 0x1,S2E_MLD = 0x2,S2E_NPT = 0x4,};
enum MACRO_SA {SA_NOCLDSTOP = 0x20000,SA_ONSTACK = 0x1,SA_RESETHAND = 0x2,SA_RESTART = 0x4,SA_SIGINFO = 0x8,SA_NODEFER = 0x10,SA_NOCLDWAIT = 0x10000,SA_WAITSIG = 0x10000,};
enum MACRO_SAD {SAD_SAP = 17409,SAD_GAP = 17410,SAD_VML = 17411,};
enum MACRO_SADB {SADB_RESERVED = 0,SADB_GETSPI = 1,SADB_UPDATE = 2,SADB_ADD = 3,SADB_DELETE = 4,SADB_GET = 5,SADB_ACQUIRE = 6,SADB_REGISTER = 7,SADB_EXPIRE = 8,SADB_FLUSH = 9,SADB_DUMP = 10,SADB_X_PROMISC = 11,SADB_X_PCHANGE = 12,SADB_MAX = 12,SADB_SAFLAGS_PFS = 1,SADB_SAFLAGS_NOREPLAY = 2,SADB_X_SAFLAGS_USED = -2147483648,SADB_X_SAFLAGS_UNIQUE = 1073741824,SADB_X_SAFLAGS_AALG1 = 536870912,SADB_X_SAFLAGS_AALG2 = 268435456,SADB_X_SAFLAGS_EALG1 = 134217728,SADB_X_SAFLAGS_EALG2 = 67108864,SADB_SASTATE_LARVAL = 0,SADB_SASTATE_MATURE = 1,SADB_SASTATE_DYING = 2,SADB_SASTATE_DEAD = 3,SADB_SASTATE_MAX = 3,SADB_SATYPE_UNSPEC = 0,SADB_SATYPE_AH = 2,SADB_SATYPE_ESP = 3,SADB_SATYPE_RSVP = 5,SADB_SATYPE_OSPFV2 = 6,SADB_SATYPE_RIPV2 = 7,SADB_SATYPE_MIP = 8,SADB_SATYPE_MAX = 8,SADB_AALG_NONE = 0,SADB_AALG_MD5HMAC = 2,SADB_AALG_SHA1HMAC = 3,SADB_AALG_MAX = 3,SADB_EALG_NONE = 0,SADB_EALG_DESCBC = 2,SADB_EALG_3DESCBC = 3,SADB_EALG_NULL = 11,SADB_EALG_MAX = 11,SADB_EXT_RESERVED = 0,SADB_EXT_SA = 1,SADB_EXT_LIFETIME_CURRENT = 2,SADB_EXT_LIFETIME_HARD = 3,SADB_EXT_LIFETIME_SOFT = 4,SADB_EXT_ADDRESS_SRC = 5,SADB_EXT_ADDRESS_DST = 6,SADB_EXT_ADDRESS_PROXY = 7,SADB_EXT_KEY_AUTH = 8,SADB_EXT_KEY_ENCRYPT = 9,SADB_EXT_IDENTITY_SRC = 10,SADB_EXT_IDENTITY_DST = 11,SADB_EXT_SENSITIVITY = 12,SADB_EXT_PROPOSAL = 13,SADB_EXT_SUPPORTED_AUTH = 14,SADB_EXT_SUPPORTED_ENCRYPT = 15,SADB_EXT_SPIRANGE = 16,SADB_EXT_MAX = 16,SADB_IDENTTYPE_RESERVED = 0,SADB_IDENTTYPE_PREFIX = 1,SADB_IDENTTYPE_FQDN = 2,SADB_IDENTTYPE_USER_FQDN = 3,SADB_IDENTTYPE_MAX = 3,SADB_DPD_NONE = 0,SADB_DPD_MAX = 1,};
enum MACRO_SADIOC {SADIOC = 17408,};
enum MACRO_SAFTE {SAFTE_RD_RDCFG = 0x0,SAFTE_RD_RDESTS = 0x1,SAFTE_RD_RDDSTS = 0x4,SAFTE_WT_DSTAT = 0x10,SAFTE_WT_SLTOP = 0x12,SAFTE_WT_FANSPD = 0x13,SAFTE_WT_ACTPWS = 0x14,SAFTE_WT_GLOBAL = 0x15,};
enum MACRO_SAP {SAP_CLEAR = 0,SAP_ONE = 1,SAP_RANGE = 2,SAP_ALL = 3,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SA_NOT {SA_NOT = 0x1,};
enum MACRO_SB {SB = 250,};
enum MACRO_SBIOC {SBIOC = 16896,};
enum MACRO_SBIOCCTIME {SBIOCCTIME = 16899,};
enum MACRO_SBIOCGCHUNK {SBIOCGCHUNK = 16901,};
enum MACRO_SBIOCGFLAGS {SBIOCGFLAGS = 16905,};
enum MACRO_SBIOCGSNAP {SBIOCGSNAP = 16903,};
enum MACRO_SBIOCGTIME {SBIOCGTIME = 16898,};
enum MACRO_SBIOCSCHUNK {SBIOCSCHUNK = 16900,};
enum MACRO_SBIOCSFLAGS {SBIOCSFLAGS = 16904,};
enum MACRO_SBIOCSSNAP {SBIOCSSNAP = 16902,};
enum MACRO_SBIOCSTIME {SBIOCSTIME = 16897,};
enum MACRO_SBSIZE {SBSIZE = 8192,};
enum MACRO_SB_DFLT {SB_DFLT_CHUNK = 8192,SB_SEND_ON_WRITE = 1,SB_NO_HEADER = 2,SB_NO_PROTO_CVT = 4,SB_DEFER_CHUNK = 8,SB_NO_DROPS = 16,SB_FRCVD = 1,};
enum MACRO_SB_XBOX {SB_XBOX = 0x500,};
enum MACRO_SC {SC_WILDC = 0xFF,};
enum MACRO_SCALE {SCALE_KG = 64,SCALE_KF = 65536,SCALE_KH = 4,};
enum MACRO_SCALE_PHASE {SCALE_PHASE = 4194304,SCALE_USEC = 65536,SCALE_UPDATE = 4096,};
enum MACRO_SCHAR {SCHAR_MIN = -128,SCHAR_MAX = 127,};
enum MACRO_SCHED {SCHED_OTHER = 0,SCHED_FIFO = 1,SCHED_RR = 2,SCHED_SYS = 3,SCHED_IA = 4,};
enum MACRO_SCHI {SCHI_SET_DATA_MODE = 8,SCHI_SET_CTRL_MODE = 0,SCHI_SET_INT_PDN = 4,SCHI_CLR_INT_PDN = 0,SCHI_SET_RESET = 0,SCHI_CLR_RESET = 2,SCHI_SET_PDN = 1,SCHI_CLR_PDN = 0,SCHI_ENA_MODE = 128,SCHI_ENA_INT_PDN = 64,SCHI_ENA_RESET = 32,SCHI_ENA_PDN = 16,SCHI_ENA_ALL = 240,};
enum MACRO_SCHR2 {SCHR2 = 0x13,};
enum MACRO_SCHR3 {SCHR3 = 0x0,};
enum MACRO_SCHR4 {SCHR4 = 0x0,MCOR1 = 0x40,};
enum MACRO_SCM {SCM_RIGHTS = 0x1010,};
enum MACRO_SCMD {SCMD_READ_TOC = 0x43,SCMD_PLAYAUDIO_MSF = 0x47,SCMD_PLAYAUDIO_TI = 0x48,SCMD_PAUSE_RESUME = 0x4B,SCMD_READ_SUBCHANNEL = 0x42,SCMD_PLAYAUDIO10 = 0x45,SCMD_PLAYTRACK_REL10 = 0x49,SCMD_READ_HEADER = 0x44,SCMD_PLAYAUDIO12 = 0xA5,SCMD_PLAYTRACK_REL12 = 0xA9,SCMD_READ_CD = 0xBE,SCMD_CD_PLAYBACK_CONTROL = 0xC9,SCMD_CD_PLAYBACK_STATUS = 0xC4,SCMD_READ_CDDA = 0xD8,SCMD_READ_CDXA = 0xDB,SCMD_READ_ALL_SUBCODES = 0xDF,};
enum MACRO_SCMD_GROUP0 {SCMD_GROUP0 = 0x0,SCMD_TEST_UNIT_READY = 0x0,SCMD_REQUEST_SENSE = 0x3,SCMD_INQUIRY = 0x12,SCMD_COPY = 0x18,SCMD_GDIAG = 0x1C,SCMD_SDIAG = 0x1D,SCMD_REZERO_UNIT = 0x1,SCMD_FORMAT = 0x4,SCMD_REASSIGN_BLOCK = 0x7,SCMD_READ = 0x8,SCMD_WRITE = 0xA,SCMD_SEEK = 0xB,SCMD_MODE_SELECT = 0x15,SCMD_RESERVE = 0x16,SCMD_RELEASE = 0x17,SCMD_MODE_SENSE = 0x1A,SCMD_START_STOP = 0x1B,SCMD_DOORLOCK = 0x1E,SCMD_REWIND = 0x1,SCMD_READ_BLKLIM = 0x5,SCMD_TRK_SEL = 0xB,SCMD_READ_REVERSE = 0xF,SCMD_WRITE_FILE_MARK = 0x10,SCMD_SPACE = 0x11,SCMD_VERIFY_G0 = 0x13,SCMD_RECOVER_BUF = 0x14,SCMD_ERASE = 0x19,SCMD_LOAD = 0x1B,SCMD_PRINT = 0xA,SCMD_SLEW_PRINT = 0xB,SCMD_FLUSH_PRINT_BUF = 0x10,SCMD_STOP_PRINT = 0x1B,SCMD_RECEIVE = 0x8,SCMD_SEND = 0xA,SCMD_GROUP1 = 0x20,SCMD_COMPARE = 0x39,SCMD_COPY_VERIFY = 0x3A,SCMD_READ_CAPACITY = 0x25,SCMD_READ_G1 = 0x28,SCMD_WRITE_G1 = 0x2A,SCMD_SEEK_G1 = 0x2B,SCMD_WRITE_VERIFY = 0x2E,SCMD_VERIFY = 0x2F,SCMD_SEARCH_HIGH = 0x30,SCMD_SEARCH_EQUAL = 0x31,SCMD_SEARCH_LOW = 0x32,SCMD_SET_LIMITS = 0x33,SCMD_READ_DEFECT_LIST = 0x37,SCMD_WRITE_BUFFER = 0x3B,SCMD_READ_BUFFER = 0x3C,SCMD_RESERVE_G1 = 0x56,SCMD_RELEASE_G1 = 0x57,SCMD_MODE_SELECT_G1 = 0x55,SCMD_MODE_SENSE_G1 = 0x5A,SCMD_GET_CONFIGURATION = 0x46,SCMD_LOG_SENSE_G1 = 0x4D,};
enum MACRO_SCMD_GROUP5 {SCMD_GROUP5 = 0xA0,};
enum MACRO_SCMD_SYNCHRONIZE {SCMD_SYNCHRONIZE_CACHE = 0x35,};
enum MACRO_SCSI {SCSI_RESET_NOTIFY = 0x1,SCSI_RESET_CANCEL = 0x2,SCSI_MAXNAMELEN = 0x100,};
enum MACRO_SCSI3 {SCSI3_RESV_READSHARED_OBSOLETE = 0,SCSI3_RESV_WRITEEXCLUSIVE = 1,SCSI3_RESV_READEXCLUSIVE_OBSOLETE = 2,SCSI3_RESV_EXCLUSIVEACCESS = 3,SCSI3_RESV_SHAREDACCESS_OBSOLETE = 4,SCSI3_RESV_WRITEEXCLUSIVEREGISTRANTSONLY = 5,SCSI3_RESV_EXCLUSIVEACCESSREGISTRANTSONLY = 6,SCSI3_SCOPE_LOGICALUNIT = 0,SCSI3_SCOPE_EXTENT_OBSOLETE = 1,SCSI3_SCOPE_ELEMENT = 2,};
enum MACRO_SCSIPROBE {SCSIPROBE_EXISTS = 0,SCSIPROBE_NONCCS = 1,SCSIPROBE_NORESP = 2,SCSIPROBE_NOMEM = 3,SCSIPROBE_FAILURE = 4,SCSIPROBE_BUSY = 5,SCSIPROBE_NOMEM_CB = 6,};
enum MACRO_SCSIREG {SCSIREG = 15,};
enum MACRO_SCSI_DEBUG {SCSI_DEBUG_TGT = 0x1,SCSI_DEBUG_LIB = 0x2,SCSI_DEBUG_HA = 0x4,SCSI_OPTIONS_LINK = 0x10,SCSI_OPTIONS_TAG = 0x80,SCSI_OPTIONS_DR = 0x8,SCSI_OPTIONS_SYNC = 0x20,SCSI_OPTIONS_PARITY = 0x40,SCSI_OPTIONS_FAST = 0x100,SCSI_OPTIONS_WIDE = 0x200,SCSI_OPTIONS_FAST20 = 0x400,SCSI_OPTIONS_FAST40 = 0x800,SCSI_OPTIONS_FAST80 = 0x1000,SCSI_OPTIONS_NLUNS_MASK = 0x70000,SCSI_OPTIONS_NLUNS_DEFAULT = 0x0,SCSI_OPTIONS_NLUNS_1 = 0x10000,SCSI_OPTIONS_NLUNS_8 = 0x20000,SCSI_OPTIONS_NLUNS_16 = 0x30000,SCSI_OPTIONS_NLUNS_32 = 0x40000,};
enum MACRO_SCSI_DEFAULT {SCSI_DEFAULT_RESET_DELAY = 3000,SCSI_DEFAULT_SELECTION_TIMEOUT = 250,};
enum MACRO_SCSI_RSM {SCSI_RSM_ES_OUT_PAGE_LEN = 0x12,SCSI_RSM_ENCL_GD_LEN = 0x4,SCSI_RSM_NUM_UNIT_TYPES = 0x1,SCSI_RSM_DEV_DSCP_LEN = 0x1,SCSI_RSM_ES_IN_PAGE_LEN = 0x1C,SCSI_RSM_ES_IN_PAGE_SIZE = 0x20,SCSI_RSM_ES_OUT_PAGE_SIZE = 0x16,};
enum MACRO_SCSI_WATCH {SCSI_WATCH_IO_TIME = 120,SCSI_WATCH_TERMINATE_WAIT = 0,SCSI_WATCH_TERMINATE_NOWAIT = 1,SCSI_WATCH_TERMINATE_SUCCESS = 0,SCSI_WATCH_TERMINATE_FAIL = 1,};
enum MACRO_SCTRSHFT {SCTRSHFT = 9,};
enum MACRO_SC_ADD {SC_ADD = 1,SC_LIST = 2,SC_REMOVE = 3,SC_GETNSWP = 4,SC_AINFO = 5,};
enum MACRO_SC_FAILURE {SC_FAILURE = -1,};
enum MACRO_SC_FREE {SC_FREE = 0x0,SC_SLEEP = 0x1,SC_RUN = 0x2,SC_ONPROC = 0x4,SC_STOPPED = 0x10,SC_IGNORE = 0xFFFFFFFE,SC_NOPREEMPT = 0xFFFFFFFD,SC_MAX_TICKS = 0x2,SC_STATE = 0x1,SC_BLOCK = 0x2,SC_PRIORITY = 0x4,SC_PREEMPT = 0x8,SC_DOOR = 0x10,};
enum MACRO_SC_NOERROR {SC_NOERROR = 0,SC_NOMEM = 1,SC_OPENFAIL = 2,SC_NOTFOUND = 3,SC_BADENTRIES = 4,};
enum MACRO_SC_STATUS {SC_STATUS = 1,SC_ENABLE = 2,SC_DISABLE = 3,SC_READDB = 4,};
enum MACRO_SC_WCLOSE {SC_WCLOSE = 0x20000,};
enum MACRO_SD {SD_STATE_NORMAL = 0,SD_STATE_OFFLINE = 1,SD_STATE_RWAIT = 2,SD_STATE_DUMPING = 3,SD_STATE_SUSPENDED = 4,SD_STATE_PM_SUSPENDED = 5,};
enum MACRO_SDERR {SDERR_ALL = 0,SDERR_UNKNOWN = 1,SDERR_INFORMATIONAL = 2,SDERR_RECOVERED = 3,SDERR_RETRYABLE = 4,SDERR_FATAL = 5,};
enum MACRO_SDFLAGS {SDFLAGS = 3,};
enum MACRO_SDLCFLAG {SDLCFLAG = 0x7E,};
enum MACRO_SD_BECOMING {SD_BECOMING_ACTIVE = 0x1,};
enum MACRO_SD_IO {SD_IO_TIME = 60,SD_FMT_TIME = 7200,SD_RESET_THROTTLE_TIMEOUT = 60,SD_RETRY_COUNT = 5,SD_MAXUNIT = 32,SD_WAIT_CMDS_COMPLETE = 30,SD_REMOVAL_ALLOW = 0,SD_REMOVAL_PREVENT = 1,SD_DONTSAVE_PAGE = 0,SD_SAVE_PAGE = 1,SD_RELEASE = 0,SD_RESERVE = 1,SD_TKOWN = 2,SD_LOST_RESERVE = 4,SD_FAILFAST = 128,SD_WANT_RESERVE = 256,SD_RESERVATION_CONFLICT = 512,SD_MAX_NODES = 16,SD_REINSTATE_RESV_DELAY = 6000000,};
enum MACRO_SD_QUEUEING {SD_QUEUEING = 0x10,SD_NOSERIAL = 0x20,SD_EACCES = 0x1,SD_READY_VALID = 0x0,SD_TUR_FAILED = 0x1,SD_MEDIUM_NOT_PRESENT = 0x2,SD_EINTR = 0x5,SD_CONF_VERSION = 0x1,SD_CONF_SET_THROTTLE = 0x0,SD_CONF_SET_CTYPE = 0x1,SD_CONF_SET_NOTREADY_RETRIES = 0x2,SD_CONF_SET_NOSERIAL = 0x3,SD_CONF_SET_NOCACHE = 0x4,SD_CONF_BSET_THROTTLE = 0x1,SD_CONF_BSET_CTYPE = 0x2,SD_CONF_BSET_NRR_COUNT = 0x4,SD_CONF_BSET_NOSERIAL = 0x8,SD_CONF_BSET_NOCACHE = 0x10,SD_CONF_MAX_ITEMS = 0x5,SD_SPINDLE_OFF = 0x0,SD_SPINDLE_ON = 0x1,};
enum MACRO_SD_STOP {SD_STOP = 0,SD_START = 1,SD_EJECT = 2,};
enum MACRO_SE {SE = 240,};
enum MACRO_SEC {SEC = 1,MILLISEC = 1000,};
enum MACRO_SECDIV {SECDIV = 9,};
enum MACRO_SECS {SECS_PER_MIN = 60,};
enum MACRO_SECSHIFT {SECSHIFT = 0,SECMASK = 31,};
enum MACRO_SECSIZE {SECSIZE = 512,};
enum MACRO_SECSPERMIN {SECSPERMIN = 60,};
enum MACRO_SECS_PER {SECS_PER_HOUR = 3600,SECS_PER_DAY = 86400,};
enum MACRO_SECURITY {SECURITY_NOT_SUPPORTED = 0x19,};
enum MACRO_SEC_QUERY {SEC_QUERY = 0x1,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SEEK_0 {SEEK = 0xF,};
enum MACRO_SEGDRV {SEGDRV_CONTINUE = -10,SEGDRV_HANDLED = -11,SEGDRV_IGNORE = -12,};
enum MACRO_SEGSIZE {SEGSIZE = 512,};
enum MACRO_SEGV {SEGV_MAPERR = 1,SEGV_ACCERR = 2,};
enum MACRO_SELF : __int64 {SELF_CHECK = 0x80000000,};
enum MACRO_SELFMAG {SELFMAG = 4,};
enum MACRO_SEM {SEM_FAILED = -1,};
enum MACRO_SEM_A {SEM_A = 0x80,SEM_R = 0x100,SEM_UNDO = 0x1000,};
enum MACRO_SEND {SEND_SPEC1 = 0x21,SEND_SPEC2 = 0x22,};
enum MACRO_SENDZERO {SENDZERO = 0x1000,};
enum MACRO_SENSE {CLASS_EXTENDED_SENSE = 0x7,KEY_NO_SENSE = 0x0,};
enum MACRO_SES {SES_IOCTL_GETSTATE = 25857,SES_IOCTL_SETSTATE = 25858,SES_IOCTL_INQUIRY = 25859,};
enum MACRO_SESCTL {SESCTL_CSEL = 0x80,SESCTL_PRDFAIL = 0x40,SESCTL_DISABLE = 0x20,SESCTL_RSTSWAP = 0x10,SESCTL_DRVLCK = 0x40,SESCTL_RQSINS = 0x8,SESCTL_RQSRMV = 0x4,SESCTL_RQSID = 0x2,SESCTL_RQSFLT = 0x20,SESCTL_DEVOFF = 0x10,SESCTL_RQSTFAIL = 0x40,SESCTL_RQSTON = 0x20,};
enum MACRO_SESIOC {SESIOC = 25856,};
enum MACRO_SESIOC_GETNOBJ {SESIOC_GETNOBJ = 25866,SESIOC_GETOBJMAP = 25867,SESIOC_INIT = 25868,SESIOC_GETENCSTAT = 25869,SESIOC_SETENCSTAT = 25870,SESIOC_GETOBJSTAT = 25871,SESIOC_SETOBJSTAT = 25872,};
enum MACRO_SESS {SESS_CLOSE = 1,};
enum MACRO_SESSTAT {SESSTAT_UNSUPPORTED = 0,SESSTAT_OK = 1,SESSTAT_CRIT = 2,SESSTAT_NONCRIT = 3,SESSTAT_UNRECOV = 4,SESSTAT_NOTINSTALLED = 5,SESSTAT_UNKNOWN = 6,SESSTAT_NOTAVAIL = 7,};
enum MACRO_SESTYP {SESTYP_UNSPECIFIED = 0x0,SESTYP_DEVICE = 0x1,SESTYP_POWER = 0x2,SESTYP_FAN = 0x3,SESTYP_THERM = 0x4,SESTYP_DOORLOCK = 0x5,SESTYP_ALARM = 0x6,SESTYP_ESCC = 0x7,SESTYP_SCC = 0x8,SESTYP_NVRAM = 0x9,SESTYP_UPS = 0xB,SESTYP_DISPLAY = 0xC,SESTYP_KEYPAD = 0xD,SESTYP_SCSIXVR = 0xF,SESTYP_LANGUAGE = 0x10,SESTYP_COMPORT = 0x11,SESTYP_VOM = 0x12,SESTYP_AMMETER = 0x13,SESTYP_SCSI_TGT = 0x14,SESTYP_SCSI_INI = 0x15,SESTYP_SUBENC = 0x16,};
enum MACRO_SET {SET_MONITOR_POWER = 19732,};
enum MACRO_SETALL {SETALL = 9,};
enum MACRO_SETOP {SETOP_NONE = 0,SETOP_ASSIGN = 1,SETOP_AND = 2,SETOP_OR = 3,};
enum MACRO_SET_BOOT {SET_BOOT_PROTOCOL = 0x0,SET_REPORT_PROTOCOL = 0x100,};
enum MACRO_SE_32RVAL1 {SE_32RVAL1 = 0x0,SE_32RVAL2 = 0x1,SE_64RVAL = 0x2,SE_RVAL_MASK = 0x3,SE_LOADABLE = 0x8,SE_LOADED = 0x10,SE_NOUNLOAD = 0x20,SE_ARGC = 0x40,};
enum MACRO_SE_NOSWAP {SE_NOSWAP = -1,SE_NOANON = -2,};
enum MACRO_SF {SF_FDXPTP = 0x1,SF_XMT_INPROG = 0x2,SF_LINKERR = 0x4,SF_FLUSH_WQ = 0x8,SF_INITIALIZED = 0x10,SF_PHONY = 0x20,SF_ZSH_START = 0x40,};
enum MACRO_SFIOCGMAP {SFIOCGMAP = 55809,};
enum MACRO_SF_IOC {SF_IOC = 0xDA00,};
enum MACRO_SF_NUM {SF_NUM_ENTRIES_IN_MAP = 127,};
enum MACRO_SGEN {SGEN_IOC = 5457664,SGEN_IOC_READY = 5457665,SGEN_IOC_DIAG = 5457666,};
enum MACRO_SH {SH_NOW = 0,SH_CPR = -1,SH_SUSPEND = -1,SH_RESUME = -1,SH_RUID = 0,SH_EUID = 1,};
enum MACRO_SHARED {SHARED = 0x10,PRIVATE = 0x20,};
enum MACRO_SHF {SHF_WRITE = 0x1,SHF_ALLOC = 0x2,SHF_EXECINSTR = 0x4,SHF_MASKPROC = 0xF0000000,};
enum MACRO_SHF_IA {SHF_IA_64_SHORT = 0x10000000,SHF_IA_64_NORECOV = 0x20000000,};
enum MACRO_SHF_ORDERED {SHF_ORDERED = 0x40000000,SHF_EXCLUDE = 0x80000000,};
enum MACRO_SHIFT {SHIFT_CAPSLOCK = 32528,SHIFT_LOCK = 32529,SHIFT_LEFT = 32530,SHIFT_RIGHT = 32531,SHIFT_LEFTCTRL = 32532,SHIFT_CTRL = 32532,SHIFT_RIGHTCTRL = 32533,SHIFT_META = 32534,SHIFT_TOP = 32535,SHIFT_CMD = 32536,SHIFT_ALTG = 32537,SHIFT_ALT = 32538,SHIFT_NUMLOCK = 32539,};
enum MACRO_SHIFTKEYS {SHIFTKEYS = 0x100,BUCKYBITS = 0x200,};
enum MACRO_SHIFTLOCK {SHIFTLOCK = 1,LEFTSHIFT = 2,};
enum MACRO_SHIFTMASK {SHIFTMASK = 0xE,};
enum MACRO_SHM {SHM_R = 0x100,SHM_W = 0x80,SHM_RDONLY = 0x1000,SHM_RND = 0x2000,SHM_SHARE_MMU = 0x4000,};
enum MACRO_SHMSA {SHMSA_ISM = 1,};
enum MACRO_SHM_LOCK {SHM_LOCK = 3,SHM_UNLOCK = 4,};
enum MACRO_SHN {SHN_UNDEF = 0,SHN_LORESERVE = 65280,SHN_ABS = 65521,SHN_COMMON = 65522,SHN_HIRESERVE = 65535,SHN_LOPROC = 65280,SHN_HIPROC = 65311,};
enum MACRO_SHN_BEFORE {SHN_BEFORE = 0xFF00,SHN_AFTER = 0xFF01,};
enum MACRO_SHOW {SHOW_CROSSHAIRS = 0x2,SHOW_HORIZ_HAIR = 0x4,SHOW_VERT_HAIR = 0x8,};
enum MACRO_SHQUID {SHQUID = 69,};
enum MACRO_SHRT {SHRT_MIN = -32768,SHRT_MAX = 32767,};
enum MACRO_SHT {SHT_NULL = 0,SHT_PROGBITS = 1,SHT_SYMTAB = 2,SHT_STRTAB = 3,SHT_RELA = 4,SHT_HASH = 5,SHT_DYNAMIC = 6,SHT_NOTE = 7,SHT_NOBITS = 8,SHT_REL = 9,SHT_SHLIB = 10,SHT_DYNSYM = 11,SHT_NUM = 12,SHT_LOSUNW = 1879048186,SHT_SUNW_move = 1879048186,SHT_SUNW_COMDAT = 1879048187,SHT_SUNW_syminfo = 1879048188,SHT_SUNW_verdef = 1879048189,SHT_SUNW_verneed = 1879048190,SHT_SUNW_versym = 1879048191,SHT_HISUNW = 1879048191,SHT_LOPROC = 1879048192,SHT_HIPROC = 2147483647,SHT_LOUSER = -2147483648,SHT_HIUSER = -1,};
enum MACRO_SHT_IA {SHT_IA_64_EXT = 0x70000000,SHT_IA_64_UNWIND = 0x70000001,};
enum MACRO_SHUT {SHUT_RD = 0,SHUT_WR = 1,SHUT_RDWR = 2,};
enum MACRO_SI {SI_NOINFO = 32767,SI_USER = 0,SI_LWP = -1,SI_QUEUE = -2,SI_TIMER = -3,SI_ASYNCIO = -4,SI_MESGQ = -5,};
enum MACRO_SIDL {SIDL = 5,};
enum MACRO_SIG {SIG_BLOCK = 1,SIG_UNBLOCK = 2,SIG_SETMASK = 3,};
enum MACRO_SIG2STR {SIG2STR_MAX = 32,};
enum MACRO_SIGDEFER {SIGDEFER = 0x100,SIGHOLD = 0x200,SIGRELSE = 0x400,SIGIGNORE = 0x800,SIGPAUSE = 0x1000,};
enum MACRO_SIGEV {SIGEV_NONE = 1,SIGEV_SIGNAL = 2,SIGEV_THREAD = 3,};
enum MACRO_SIGNAL {SIGHUP = 1,SIGINT = 2,SIGQUIT = 3,SIGILL = 4,SIGTRAP = 5,SIGIOT = 6,SIGABRT = 6,SIGEMT = 7,SIGFPE = 8,SIGKILL = 9,SIGBUS = 10,SIGSEGV = 11,SIGSYS = 12,SIGPIPE = 13,SIGALRM = 14,SIGTERM = 15,SIGUSR1 = 16,SIGUSR2 = 17,SIGCLD = 18,SIGCHLD = 18,SIGPWR = 19,SIGWINCH = 20,SIGURG = 21,SIGPOLL = 22,SIGIO = 22,SIGSTOP = 23,SIGTSTP = 24,SIGCONT = 25,SIGTTIN = 26,SIGTTOU = 27,SIGVTALRM = 28,SIGPROF = 29,SIGXCPU = 30,SIGXFSZ = 31,SIGWAITING = 32,SIGLWP = 33,SIGFREEZE = 34,SIGTHAW = 35,SIGCANCEL = 36,SIGLOST = 37,_SIGRTMIN = 38,_SIGRTMAX = 45,};
enum MACRO_SIGNO {SIGNO_MASK = 0xFF,};
enum MACRO_SIMOD {SIMOD = 18688,};
enum MACRO_SINCR {SINCR = 4096,};
enum MACRO_SINGLE {SINGLE_2CLUTS = 0x2,SINGLE_3CLUTS = 0x3,};
enum MACRO_SIO {SIO_LITE = 0x40,SIO_LITE_B = 0x90,SIO_REVA = 0x1A,SIO_REVB = 0x1B,};
enum MACRO_SIOCADDRT {SIOCADDRT = -2144308726,};
enum MACRO_SIOCDELRT {SIOCDELRT = -2144308725,};
enum MACRO_SIOCGIFCONF {SIOCGIFCONF = -1073190636,};
enum MACRO_SIOCGLIFCONF {SIOCGLIFCONF = -1072666248,};
enum MACRO_SIOCXPROTO {SIOCXPROTO = 536900407,};
enum MACRO_SIZE {CDB_SIZE = 12,SCSI_CDB_SIZE = 16,};
enum MACRO_SI_CACHED {SI_CACHED = 0x1,};
enum MACRO_SI_MAXSZ {SI_MAXSZ = 128,};
enum MACRO_SI_SHUTDOWN {SI_SHUTDOWN = 18790,SI_LISTEN = 18791,SI_SETMYNAME = 18792,SI_SETPEERNAME = 18793,SI_GETINTRANSIT = 18794,SI_TCL_LINK = 18795,SI_TCL_UNLINK = 18796,SI_SOCKPARAMS = 18797,SI_GETUDATA = 18798,};
enum MACRO_SI_SYSNAME {SI_SYSNAME = 1,SI_HOSTNAME = 2,SI_RELEASE = 3,SI_VERSION = 4,SI_MACHINE = 5,SI_ARCHITECTURE = 6,SI_HW_SERIAL = 7,SI_HW_PROVIDER = 8,SI_SRPC_DOMAIN = 9,SI_SET_HOSTNAME = 258,SI_SET_SRPC_DOMAIN = 265,SI_PLATFORM = 513,SI_ISALIST = 514,SI_DHCP_CACHE = 515,};
enum MACRO_SK {SK = 0x20,MOT = 0x80,};
enum MACRO_SL {SL_FATAL = 0x1,SL_NOTIFY = 0x2,SL_ERROR = 0x4,SL_TRACE = 0x8,SL_CONSOLE = 0x10,SL_WARN = 0x20,SL_NOTE = 0x40,SL_CONSONLY = 0x1000,SL_LOGONLY = 0x2000,SL_USER = 0x4000,};
enum MACRO_SLA {SLA_FREETNM = 1,};
enum MACRO_SLC {SLC_SYNCH = 1,SLC_BRK = 2,SLC_IP = 3,SLC_AO = 4,SLC_AYT = 5,SLC_EOR = 6,SLC_ABORT = 7,SLC_EOF = 8,SLC_SUSP = 9,SLC_EC = 10,SLC_EL = 11,SLC_EW = 12,SLC_RP = 13,SLC_LNEXT = 14,SLC_XON = 15,SLC_XOFF = 16,SLC_FORW1 = 17,SLC_FORW2 = 18,};
enum MACRO_SLC_NOSUPPORT {SLC_NOSUPPORT = 0,SLC_CANTCHANGE = 1,SLC_VARIABLE = 2,SLC_DEFAULT = 3,SLC_LEVELBITS = 3,SLC_FUNC = 0,SLC_FLAGS = 1,SLC_VALUE = 2,SLC_ACK = 128,SLC_FLUSHIN = 64,SLC_FLUSHOUT = 32,};
enum MACRO_SLF {SLF_TOSS = 1,};
enum MACRO_SLS {SLS_MDMSTAT = 0x1,SLS_LINKERR = 0x2,};
enum MACRO_SL_DOT {SL_DOT = 1,SL_DOTDOT = 2,};
enum MACRO_SM {SM_MAXSTRLEN = 1024,SM_PROG = 100024,SM_VERS = 1,SM_STAT = 1,SM_MON = 2,SM_UNMON = 3,SM_UNMON_ALL = 4,SM_SIMU_CRASH = 5,SM_NOTIFY = 6,};
enum MACRO_SMAP {SMAP_HASHAVELEN = 4,SMAP_HASHVPSHIFT = 6,};
enum MACRO_SMDEVICE {SMDEVICE_INFO_V_0 = 0,};
enum MACRO_SMERR {SMERR_TXC = 0x1,SMERR_RXC = 0x2,SMERR_IFLAGS = 0x4,SMERR_HDX = 0x8,SMERR_MPT = 0x10,SMERR_LPBKS = 0x20,SMERR_BAUDRATE = 0x40,SMERR_PLL = 0x80,};
enum MACRO_SMMEDIA {SMMEDIA_PROP_V_0 = 0,};
enum MACRO_SMWP {SMWP_STATE_V_0 = 0,};
enum MACRO_SM_FORMAT {SM_FORMAT_LONG = 0x2001,SM_FORMAT_QUICK = 0x2002,SM_FORMAT_FORCE = 0x2003,SM_FORMAT_HD = 0x2011,SM_FORMAT_DD = 0x2012,SM_FORMAT_ED = 0x2013,SM_FORMAT_MD = 0x2014,SM_FORMAT_IMMEDIATE = 0x2021,SM_FORMAT_BLOCKED = 0x2022,};
enum MACRO_SM_PRIV {SM_PRIV = 0x1,SM_ATOMIC = 0x2,SM_ADDR = 0x4,SM_CONNREQUIRED = 0x8,SM_FDPASSING = 0x10,SM_EXDATA = 0x20,SM_OPTDATA = 0x40,SM_BYTESTREAM = 0x80,SM_ACCEPTOR_ID = 0x100,};
enum MACRO_SM_REMOVABLE {SM_REMOVABLE_DISK = 0x20005,SM_FLOPPY = 0x10002,SM_PCMCIA_MEM = 0x20006,SM_NOT_PRESENT = 0xFFFF,};
enum MACRO_SM_WRITE {SM_WRITE_PROTECT_DISABLE = 0x1000,SM_WRITE_PROTECT_NOPASSWD = 0x1002,SM_WRITE_PROTECT_PASSWD = 0x1004,SM_READ_WRITE_PROTECT = 0x1008,SM_TEMP_UNLOCK_MODE = 0x1010,SM_STATUS_UNKNOWN = 0x10FF,SM_UNPROTECTED = 0x1000,SM_WRITE_PROTECTED = 0x1002,SM_WRITE_PROTECTED_WP = 0x1004,SM_READ_WRITE_PROTECTED = 0x1008,};
enum MACRO_SM_WRITE_0 {SM_WRITE = 0x1,SM_ASYNC = 0x2,SM_FREE = 0x4,SM_INVAL = 0x8,SM_DONTNEED = 0x10,};
enum MACRO_SN {SN_PROC = 1,SN_CANCEL = 2,SN_SEND = 3,};
enum MACRO_SNDZERO {SNDZERO = 0x1,SNDPIPE = 0x2,};
enum MACRO_SO {SO_ALL = 0x3F,SO_READOPT = 0x1,SO_WROFF = 0x2,SO_MINPSZ = 0x4,SO_MAXPSZ = 0x8,SO_HIWAT = 0x10,SO_LOWAT = 0x20,SO_MREADON = 0x40,SO_MREADOFF = 0x80,SO_NDELON = 0x100,SO_NDELOFF = 0x200,SO_ISTTY = 0x400,SO_ISNTTY = 0x800,SO_TOSTOP = 0x1000,SO_TONSTOP = 0x2000,SO_BAND = 0x4000,SO_DELIM = 0x8000,SO_NODELIM = 0x10000,SO_STRHOLD = 0x20000,SO_ERROPT = 0x40000,SO_COPYOPT = 0x80000,SO_MAXBLK = 0x100000,};
enum MACRO_SO4 {SO4_BITSMAJOR = 8,SO4_BITSMINOR = 8,SO4_MAXMAJ = 255,SO4_MAXMIN = 255,};
enum MACRO_SOA {SOA_DEFSIZE = 128,};
enum MACRO_SOC {SOC_EEPROM_4TH_SELF_TST = 0x0,SOC_EEPROM_4TH_OBP_DRV = 0x1000,SOC_EEPROM_OBP_HDR = 0x5000,SOC_EEPROM_FW_DATE_CODE = 0x5300,SOC_EEPROM_SRVC_PARM = 0x5304,SOC_EEPROM_LA_BIT_MASK = 0x5344,SOC_EEPROM_RSRV1 = 0x534C,SOC_EEPROM_SOC_CODE = 0x6000,SOC_EEPROM_RSRV2 = 0xF000,SOC_XRAM_REQ_DESC = 0x200,SOC_XRAM_RSP_DESC = 0x220,SOC_XRAM_LESB_P0 = 0x240,SOC_XRAM_LESB_P1 = 0x258,SOC_XRAM_SERVICE_PARAMS = 0x280,SOC_XRAM_FW_DATE_STR = 0x2D0,SOC_XRAM_FW_DATE_CODE = 0x2F8,SOC_XRAM_HW_REV = 0x2FC,};
enum MACRO_SOCAL {SOCAL_PROM_4TH_SELF_TST = 0x0,SOCAL_PROM_4TH_OBP_DRV = 0x1000,SOCAL_PROM_OBP_HDR = 0x5000,SOCAL_PROM_FW_DATE_CODE = 0x5300,SOCAL_PROM_SRVC_PARM = 0x5304,SOCAL_PROM_LA_BIT_MASK = 0x5344,SOCAL_PROM_RSRV1 = 0x534C,SOCAL_PROM_SOCAL_CODE = 0x6000,SOCAL_PROM_RSRV2 = 0xF000,SOCAL_XRAM_REQ_DESC = 0x200,SOCAL_XRAM_RSP_DESC = 0x220,SOCAL_XRAM_LESB_P0 = 0x240,SOCAL_XRAM_LESB_P1 = 0x258,SOCAL_XRAM_SERV_PARAMS = 0x280,SOCAL_XRAM_FW_DATE_STR = 0x2DC,SOCAL_XRAM_FW_DATE_CODE = 0x2F8,SOCAL_XRAM_HW_REV = 0x2FC,SOCAL_XRAM_UCODE = 0x300,SOCAL_XRAM_PORTA_WWN = 0x300,SOCAL_XRAM_PORTB_WWN = 0x308,SOCAL_XRAM_NODE_WWN = 0x310,SOCAL_XRAM_PORTA_HRDA = 0x318,SOCAL_XRAM_BUF_POOL = 0x4000,SOCAL_XRAM_EXCH_POOL = 0xC000,};
enum MACRO_SOCK {SOCK_STREAM = 2,SOCK_DGRAM = 1,SOCK_RAW = 4,SOCK_RDM = 5,SOCK_SEQPACKET = 6,};
enum MACRO_SOFT {SOFT_LOOKUP = 16384,};
enum MACRO_SOFT_CARR {SOFT_CARR = 0x2,};
enum MACRO_SOFT_ERROR_WARNING_THRESHOLD {READ_SOFT_ERROR_WARNING_THRESHOLD = 26214400,WRITE_SOFT_ERROR_WARNING_THRESHOLD = 20971520,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SOMAXCONN {SOMAXCONN = 5,};
enum MACRO_SOMOD {SOMOD = 0x1,SOACC = 0x2,SOLOCKED = 0x10,SOREADLOCKED = 0x20,SOWANT = 0x40,SOCLONE = 0x80,};
enum MACRO_SONPROC {SONPROC = 6,};
enum MACRO_SOU {SOU_MAGIC_EXPLICIT = 0x75787670,SOU_MAGIC_IMPLICIT = 0x616E6F6E,};
enum MACRO_SOURCE {_LARGEFILE64_SOURCE = 1,_LARGEFILE_SOURCE = 1,};
enum MACRO_SOV {SOV_STREAM = 0,SOV_DEFAULT = 1,SOV_SOCKSTREAM = 2,SOV_SOCKBSD = 3,SOV_XPG4_2 = 4,};
enum MACRO_SO_DEBUG {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_DGRAM_ERRIND = 0x200,SO_DONTLINGER = 0xFFFFFF7F,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_PROTOTYPE = 0x1009,};
enum MACRO_SO_STATE {SO_STATE = 0x2000,};
enum MACRO_SP {SP_VIRTUAL = 0x100,SP_OBMEM = 0x200,SP_OBIO = 0x210,SP_SBUS = 0x400,};
enum MACRO_SPARC {SPARC_MAXREGWINDOW = 31,};
enum MACRO_SPARC_REGISTER {STT_SPARC_REGISTER = 13,DT_SPARC_REGISTER = 1879048193,};
enum MACRO_SPB {SPB = 0x49,};
enum MACRO_SPECIAL {SPECIAL_I = 11,SPECIAL_D = 15,};
enum MACRO_SPECIALS {SPECIALS_MASK = 15,};
enum MACRO_SPECIFY {SPECIFY = 0x3,SNSDSTAT = 0x4,};
enum MACRO_SPL3 {SPL3 = 6,};
enum MACRO_SPL5 {SPL5 = 12,};
enum MACRO_SPL7 {SPL7 = 13,};
enum MACRO_SPL8 {SPL8 = 15,};
enum MACRO_SPLTTY {SPLTTY = 12,};
enum MACRO_SPRAYMAX {SPRAYMAX = 8845,};
enum MACRO_SPRAYPROC {SPRAYPROC_SPRAY = 1,SPRAYPROC_GET = 2,SPRAYPROC_CLEAR = 3,};
enum MACRO_SPRAYPROG {SPRAYPROG = 100012,};
enum MACRO_SPRAYVERS {SPRAYVERS = 1,};
enum MACRO_SP_F {SP_F_PORT_LOGIN = 0x10,};
enum MACRO_SP_MBMEM {SP_MBMEM = 0x1000,SP_MBIO = 0x1100,SP_ATMEM = 0x2000,SP_ATIO = 0x2100,SP_FBMEM = 0x3000,SP_FBIO = 0x3100,SP_UBMEM = 0x4000,SP_UBIO = 0x4100,SP_INVALID = 0xFFFFFFFF,};
enum MACRO_SR {SR_SMODE = 64,};
enum MACRO_SR0 {IC_SR0 = 0xC0,SE_SR0 = 0x20,EC_SR0 = 0x10,NR_SR0 = 0x8,H_SR0 = 0x4,DS_SR0 = 0x3,};
enum MACRO_SR1 {EN_SR1 = 0x80,DE_SR1 = 0x20,OR_SR1 = 0x10,ND_SR1 = 0x4,NW_SR1 = 0x2,MA_SR1 = 0x1,TO_SR1 = 0x8,};
enum MACRO_SR3 {WP_SR3 = 0x40,T0_SR3 = 0x10,};
enum MACRO_SRB {SRB_SUPPORTED = 4,};
enum MACRO_SRIOCISREDIR {SRIOCISREDIR = 480116738,};
enum MACRO_SRIOCSREDIR {SRIOCSREDIR = 480116737,};
enum MACRO_SRM {SRM_IF_MAJOR = 6,SRM_IF_MINOR = 0,};
enum MACRO_SS {SS_ONSTACK = 0x1,SS_DISABLE = 0x2,};
enum MACRO_SS2 {SS2 = 0x8E,};
enum MACRO_SS3 {SS3 = 0x8F,};
enum MACRO_SS8SPT {SS8SPT = 0xFE,};
enum MACRO_SS9SPT {SS9SPT = 0xFC,};
enum MACRO_SSA {SSA_PRIORITY_RESERVE = 0x80,};
enum MACRO_SSD {SSD_STATE_NORMAL = 0,SSD_STATE_OFFLINE = 1,SSD_STATE_RWAIT = 2,SSD_STATE_DUMPING = 3,SSD_STATE_EJECTED = 4,SSD_STATE_SUSPENDED = 5,SSD_STATE_PM_SUSPENDED = 6,};
enum MACRO_SSDERR {SSDERR_ALL = 0,SSDERR_UNKNOWN = 1,SSDERR_INFORMATIONAL = 2,SSDERR_RECOVERED = 3,SSDERR_RETRYABLE = 4,SSDERR_FATAL = 5,};
enum MACRO_SSD_CONF {SSD_CONF_VERSION = 1,SSD_CONF_SET_THROTTLE = 0,SSD_CONF_BSET_THROTTLE = 1,SSD_CONF_SET_NOTREADY_RETRIES = 1,SSD_CONF_BSET_NRR_COUNT = 2,SSD_CONF_SET_BUSY_RETRIES = 2,SSD_CONF_BSET_BSY_RETRY_COUNT = 4,SSD_SPINDLE_OFF = 0,SSD_SPINDLE_ON = 1,SSD_BECOMING_ACTIVE = 1,};
enum MACRO_SSD_IO {SSD_IO_TIME = 60,SSD_FMT_TIME = 7200,SSD_RESET_THROTTLE_TIMEOUT = 60,SSD_RETRY_COUNT = 3,SSD_MAXUNIT = 32,SSD_WAIT_CMDS_COMPLETE = 30,SSD_RELEASE = 0,SSD_RESERVE = 1,SSD_TKOWN = 2,SSD_LOST_RESERVE = 4,SSD_FAILFAST = 128,SSD_WANT_RESERVE = 256,SSD_RESERVATION_CONFLICT = 512,SSD_PRIORITY_RESERVE = 1024,SSD_MAX_NODES = 16,SSD_REINSTATE_RESV_DELAY = 6000000,SSD_STOP = 0,SSD_START = 1,SSD_NODISC = 1,SSD_NOPARITY = 2,SSD_MULTICMD = 4,SSD_EIOENABLE = 8,SSD_QUEUEING = 16,SSD_EACCES = 1,};
enum MACRO_SSIZE {SSIZE = 4096,};
enum MACRO_SSL {SSL_NLEVELS = 4,SSL_BFACTOR = 4,SSL_LOG2BF = 2,};
enum MACRO_SSLEEP {SSLEEP = 1,SRUN = 2,};
enum MACRO_SSPEED {SSPEED = 7,};
enum MACRO_SSSDTL {SSSDTL = 0xFF,};
enum MACRO_SSYS {SSYS = 0x1,STRC = 0x2,SLOAD = 0x8,SLOCK = 0x10,SPREXEC = 0x20,SPROCTR = 0x40,SPRFORK = 0x80,SKILLED = 0x100,SULOAD = 0x200,SRUNLCL = 0x400,SBPTADJ = 0x800,SKILLCL = 0x1000,SOWEUPC = 0x2000,SEXECED = 0x4000,SPASYNC = 0x8000,SJCTL = 0x10000,SNOWAIT = 0x20000,SVFORK = 0x40000,SVFWAIT = 0x80000,EXITLWPS = 0x100000,HOLDFORK = 0x200000,SWAITSIG = 0x400000,HOLDFORK1 = 0x800000,COREDUMP = 0x1000000,SMSACCT = 0x2000000,ASLWP = 0x4000000,SPRLOCK = 0x8000000,NOCD = 0x10000000,HOLDWATCH = 0x20000000,SMSFORK = 0x40000000,};
enum MACRO_SS_ISCONNECTED {SS_ISCONNECTED = 0x1,SS_ISCONNECTING = 0x2,SS_ISDISCONNECTING = 0x4,SS_CANTSENDMORE = 0x8,SS_CANTRCVMORE = 0x10,SS_ISBOUND = 0x20,SS_NDELAY = 0x40,SS_NONBLOCK = 0x80,SS_ASYNC = 0x100,SS_ACCEPTCONN = 0x200,SS_HASCONNIND = 0x400,SS_SAVEDEOR = 0x800,SS_RCVATMARK = 0x1000,SS_OOBPEND = 0x2000,SS_HAVEOOBDATA = 0x4000,SS_HADOOBDATA = 0x8000,SS_FADDR_NOXLATE = 0x20000,SS_WUNBIND = 0x40000,SS_CANCHANGE = 0x100,SS_CANTREBIND = 0x21F,};
enum MACRO_ST {ST_RDONLY = 0x1,ST_NOSUID = 0x2,ST_NOTRUNC = 0x4,};
enum MACRO_STA {STA_PLL = 0x1,STA_PPSFREQ = 0x2,STA_PPSTIME = 0x4,STA_FLL = 0x8,STA_INS = 0x10,STA_DEL = 0x20,STA_UNSYNC = 0x40,STA_FREQHOLD = 0x80,STA_PPSSIGNAL = 0x100,STA_PPSJITTER = 0x200,STA_PPSWANDER = 0x400,STA_PPSERROR = 0x800,STA_CLOCKERR = 0x1000,STA_RONLY = 0x1F00,};
enum MACRO_STAB {STAB = 0x54,};
enum MACRO_STACK {STACK_ALIGN32 = 8,};
enum MACRO_STACK_ALIGN {STACK_ALIGN = 8,STACK_BIAS = 0,};
enum MACRO_STANDOUT {A_STANDOUT = 0x200000,_STANDOUT = 0x200000,};
enum MACRO_START {START_STOP_CYCLE_COUNTER_PAGE_SIZE = 0x28,START_STOP_CYCLE_PAGE = 0xE,START_STOP_CYCLE_VU_PAGE = 0x31,};
enum MACRO_STAT {STAT_SET = 0x2,STAT_CLEAR = 0x1,STAT_GET = 0x0,};
enum MACRO_STATE {STATE_GOT_BUS = 0x1,STATE_GOT_TARGET = 0x2,STATE_SENT_CMD = 0x4,STATE_XFERRED_DATA = 0x8,STATE_GOT_STATUS = 0x10,STATE_ARQ_DONE = 0x20,};
enum MACRO_STATES {MAX_STATES = 16,MIN_STATES = 3,};
enum MACRO_STATIC {STATIC_SCHED = 0xFFFFFFFF,};
enum MACRO_STATUS {STATUS_MASK = 0x3E,STATUS_GOOD = 0x0,STATUS_CHECK = 0x2,STATUS_MET = 0x4,STATUS_BUSY = 0x8,STATUS_INTERMEDIATE = 0x10,STATUS_SCSI2 = 0x20,STATUS_INTERMEDIATE_MET = 0x14,STATUS_RESERVATION_CONFLICT = 0x18,STATUS_TERMINATED = 0x22,STATUS_QFULL = 0x28,STATUS_ACA_ACTIVE = 0x30,STATUS_SIZE = 0x4,};
enum MACRO_STAT_BUS {STAT_BUS_RESET = 0x8,STAT_DEV_RESET = 0x10,STAT_ABORTED = 0x20,STAT_TERMINATED = 0x80,STAT_TIMEOUT = 0x40,STAT_DISCON = 0x1,STAT_SYNC = 0x2,STAT_PERR = 0x4,};
enum MACRO_STB {STB_LOCAL = 0,STB_GLOBAL = 1,STB_WEAK = 2,STB_NUM = 3,STB_LOPROC = 13,STB_HIPROC = 15,};
enum MACRO_STBWIDTH {MIN_STBWIDTH = 1,MAX_STBWIDTH = 30,};
enum MACRO_STB_0 {STB = 0x48,};
enum MACRO_STC {STC_SREGS = 29691,STC_GREGS = 29692,STC_SPPC = 29693,STC_GPPC = 29694,STC_GSTATS = 29695,STC_SILOSIZE = 1024,};
enum MACRO_STCE {STCE_EV = 0xC0,STCE_PD = 0xC1,};
enum MACRO_STCNTRS {STCNTRS = 7,STTCHAN = 8,STGET = 22528,};
enum MACRO_STC_DEBUG {STC_DEBUG_DEFLEVEL = 1,STC_TRACK = 5,STC_DEBUG = 9,STC_TESTING = 3,STC_EXTRACT_FAILURE = -1,STC_BOOLEAN = 0,STC_VALUED = 1,STC_LINES = 8,};
enum MACRO_STC_DRAIN {STC_DRAIN_BSIZE = 64,STC_RTPR = 18,};
enum MACRO_STC_DTRCLOSE {STC_DTRCLOSE = 0x4,STC_CFLOWFLUSH = 0x8,STC_CFLOWMSG = 0x10,STC_INSTANTFLOW = 0x20,STC_DTRFORCE = 0x40,};
enum MACRO_STC_FCS2 {STC_FCS2_REV = 5,};
enum MACRO_STC_MAXPROPLEN {STC_MAXPROPLEN = 20,};
enum MACRO_STC_SERIAL {STC_SERIAL = 0x1,STC_PARALLEL = 0x2,STC_CNTRL = 0x4,STC_IOREG = 0x1,STC_PPCREG = 0x0,STC_CDEFSET = 0x1,STC_CDEFGET = 0x2,STC_SPARAM_SET = 0x4,STC_SPARAM_GET = 0x8,STC_REGIOR = 0x100,STC_REGIOW = 0x200,STC_PPCREGR = 0x400,STC_PPCREGW = 0x800,STC_CFLUSH = 0x8000,STC_SETCAR = 0x10000000,STC_NOTOPEN_ERR = 0x3,};
enum MACRO_STC_TXBUFSIZE {STC_TXBUFSIZE = 8,STC_HIWATER = 1010,STC_LOWWATER = 512,};
enum MACRO_STC_WOPEN {STC_WOPEN = 0x1,STC_ISOPEN = 0x2,STC_OUT = 0x4,STC_CARR_ON = 0x8,STC_XCLUDE = 0x10,STC_STOPPED = 0x20,STC_DELAY = 0x40,STC_BREAK = 0x80,STC_BUSY = 0x100,STC_FLUSH = 0x200,STC_OPEN_INH = 0x400,STC_WCLOSE = 0x800,STC_XWAIT = 0x1000,STC_IXOFF = 0x2000,STC_CANWAIT = 0x4000,STC_CONTROL = 0x8000,STC_SBREAK = 0x10000,STC_EBREAK = 0x20000,STC_ISROOT = 0x40000,STC_STARTED = 0x80000,STC_TXWORK = 0x100000,STC_RXWORK = 0x200000,STC_CVBROADCAST = 0x400000,STC_UNTIMEOUT = 0x800000,STC_MHANGUP = 0x1000000,STC_MUNHANGUP = 0x2000000,STC_MBREAK = 0x4000000,STC_INSOFTINT = 0x8000000,STC_LP = 0x10000000,STC_ACKWAIT = 0x40000000,STC_DRAIN = 0x80000000,STC_SOFTINTROK = 0x1,STC_CD180INTROK = 0x2,STC_PPCINTROK = 0x4,STC_REGOK = 0x8,STC_ATTACHOK = 0x10,STC_COPYIN = 0x1,STC_COPYOUT = 0x2,};
enum MACRO_STD {STD_BLK = 1024,};
enum MACRO_STDISABLE {STDISABLE = 5,};
enum MACRO_STEP {NORMAL_STEP = 0x4,WATCH_STEP = 0x8,};
enum MACRO_STEP_NONE {STEP_NONE = 0,STEP_REQUESTED = 1,STEP_ACTIVE = 2,STEP_WASACTIVE = 3,};
enum MACRO_STFLUSH {STFLUSH = 0x100,STWRAP = 0x200,STAPPL = 0x400,};
enum MACRO_STN {STN_UNDEF = 0,};
enum MACRO_STO {STO_SPARC_REGISTER_G2 = 0x2,STO_SPARC_REGISTER_G3 = 0x3,};
enum MACRO_STOP {STOP_1 = 0x0,STOP_15 = 0x4,STOP_2 = 0x8,};
enum MACRO_STPOLL {STPOLL = 6,};
enum MACRO_STPRINT {STPRINT = 3,STENABLE = 4,};
enum MACRO_STR {AM_STR = 47,PM_STR = 48,};
enum MACRO_STRAT {STRAT_TYPE1 = 0x1,STRAT_TYPE2 = 0x2,STRAT_TYPE3 = 0x3,STRAT_TYPE4 = 0x4,STRAT_TYPE4096 = 0x1000,};
enum MACRO_STRCANON {STRCANON = 0x1,RECOPY = 0x2,};
enum MACRO_STRHIGH {STRHIGH = 5120,};
enum MACRO_STRING {STRING = 0x500,};
enum MACRO_STRLOW {STRLOW = 1024,};
enum MACRO_STRU {STRU_F = 1,STRU_R = 2,STRU_P = 3,};
enum MACRO_STRUIO {STRUIO_SPEC = 0x1,STRUIO_DONE = 0x2,STRUIO_IP = 0x4,STRUIO_ZC = 0x8,STRUIO_ICK = 0x10,};
enum MACRO_STRUIOT {STRUIOT_NONE = -1,STRUIOT_DONTCARE = 0,STRUIOT_STANDARD = 1,STRUIOT_IP = 2,};
enum MACRO_STRUIO_POSTPONE {STRUIO_POSTPONE = 0x8,STRUIO_MAPIN = 0x10,};
enum MACRO_STR_CLONE {STR_CLONE = 1,};
enum MACRO_STSET {STSET = 22529,};
enum MACRO_STSTART {STSTART = 1,STHALT = 2,};
enum MACRO_STT {STT_NOTYPE = 0,STT_OBJECT = 1,STT_FUNC = 2,STT_SECTION = 3,STT_FILE = 4,STT_NUM = 5,STT_LOPROC = 13,STT_HIPROC = 15,};
enum MACRO_STTHROW {STTHROW = 22530,};
enum MACRO_STTSV {STTSV = 22532,};
enum MACRO_STWLINE {STWLINE = 22531,};
enum MACRO_ST_DEV {ST_DEV_CONFIG_PAGE = 0x10,ST_DEV_CONFIG_ALLOC_LEN = 0x1C,ST_DEV_CONFIG_COMP_BYTE = 0x1A,ST_DEV_CONFIG_PL_BYTE = 0xD,ST_DEV_CONFIG_NO_COMP = 0x0,ST_DEV_CONFIG_DEF_COMP = 0x1,ST_COMPRESSION_DENSITY = 0x3,ST_DEV_DATACOMP_PAGE = 0xF,ST_DEV_DATACOMP_ALLOC_LEN = 0x1C,ST_DEV_DATACOMP_COMP_BYTE = 0xE,ST_DEV_DATACOMP_DCE_MASK = 0x80,};
enum MACRO_ST_HIB {ST_HIB_TID = 0x1,ST_DELAY_TID = 0x2,};
enum MACRO_ST_INDEL {ST_INDEL = 0x1,ST_DOINGDEL = 0x2,};
enum MACRO_ST_INIT {ST_INIT_RESERVE = 0x1,ST_RELEASE = 0x2,ST_RESERVE = 0x4,ST_PRESERVE_RESERVE = 0x8,ST_RESERVATION_CONFLICT = 0x10,ST_LOST_RESERVE = 0x20,ST_RESERVATION_DELAY = 0x7A120,ST_NAMESIZE = 0x2C,};
enum MACRO_ST_MAX {ST_MAX_THROTTLE = 4,ST_SPACE_TIME = 3600,ST_LONG_SPACE_TIME_X = 5,ST_IO_TIME = 120,ST_LONG_TIMEOUT_X = 5,ST_INTERRUPT_CONTEXT = 1,ST_START_CONTEXT = 2,ST_RETRY_COUNT = 20,ST_SEL_RETRY_COUNT = 2,ST_DEFERRED_ERROR = 1,ST_MAXUNIT = 128,ST_WAIT_CMDS_COMPLETE = 10,};
enum MACRO_ST_MAXRECSIZE {ST_MAXRECSIZE_VARIABLE = 65535,ST_MAXRECSIZE_VARIABLE_LIMIT = 65534,ST_MAXRECSIZE_FIXED = 64512,};
enum MACRO_ST_OSYSCALL {ST_OSYSCALL = 0x0,ST_BREAKPOINT = 0x1,ST_DIV0 = 0x2,ST_FLUSH_WINDOWS = 0x3,ST_CLEAN_WINDOWS = 0x4,ST_RANGE_CHECK = 0x5,ST_FIX_ALIGN = 0x6,ST_INT_OVERFLOW = 0x7,ST_SYSCALL = 0x8,ST_HOTPATCH_TRAP = 0xA,ST_GETCC = 0x20,ST_SETCC = 0x21,ST_GETPSR = 0x22,ST_SETPSR = 0x23,ST_GETHRTIME = 0x24,ST_GETHRVTIME = 0x25,ST_SELFXCALL = 0x26,ST_GETHRESTIME = 0x27,ST_SETV9STACK = 0x28,ST_TRACE_0 = 0x30,ST_TRACE_1 = 0x31,ST_TRACE_2 = 0x32,ST_TRACE_3 = 0x33,ST_TRACE_4 = 0x34,ST_TRACE_5 = 0x35,ST_TRACE_RESERVED = 0x36,ST_TRACE_WRITE_BUFFER = 0x37,ST_KADB_TRAP = 0x7D,ST_KADB_BREAKPOINT = 0x7E,ST_MON_BREAKPOINT = 0x7F,};
enum MACRO_ST_STATE {ST_STATE_CLOSED = 0,ST_STATE_OFFLINE = 1,ST_STATE_INITIALIZING = 2,ST_STATE_OPENING = 3,ST_STATE_OPEN_PENDING_IO = 4,ST_STATE_APPEND_TESTING = 5,ST_STATE_OPEN = 6,ST_STATE_RESOURCE_WAIT = 7,ST_STATE_CLOSING = 8,ST_STATE_SENSING = 9,ST_PWR_NORMAL = 0,ST_PWR_SUSPENDED = 1,ST_PWR_PM_SUSPENDED = 2,ST_OP_NIL = 0,ST_OP_CTL = 1,ST_OP_READ = 2,ST_OP_WRITE = 3,ST_OP_WEOF = 4,ST_NO_EOF = 0,ST_EOF_PENDING = 1,ST_EOF = 2,ST_EOT_PENDING = 3,ST_EOT = 4,ST_EOM = 5,ST_WRITE_AFTER_EOM = 6,ST_RQS_OVR = 1,ST_RQS_VALID = 2,ST_RQS_READ = 4,ST_RQS_ERROR = 8,};
enum MACRO_ST_TYPE {ST_TYPE_INVALID = 0x0,ST_TYPE_SYSGEN1 = 0x10,ST_TYPE_SYSGEN = 0x11,ST_TYPE_DEFAULT = 0x12,ST_TYPE_EMULEX = 0x14,ST_TYPE_ARCHIVE = 0x15,ST_TYPE_WANGTEK = 0x16,ST_TYPE_CDC = 0x20,ST_TYPE_FUJI = 0x21,ST_TYPE_KENNEDY = 0x22,ST_TYPE_ANRITSU = 0x25,ST_TYPE_HP = 0x23,ST_TYPE_HIC = 0x26,ST_TYPE_REEL = 0x27,ST_TYPE_DAT = 0x2D,ST_TYPE_EXABYTE = 0x28,ST_TYPE_EXB8500 = 0x29,ST_TYPE_WANGTHS = 0x2A,ST_TYPE_WANGDAT = 0x2B,ST_TYPE_PYTHON = 0x2C,ST_TYPE_STC3490 = 0x24,ST_TYPE_TAND25G = 0x37,ST_TYPE_DLT = 0x38,ST_TYPE_STK9840 = 0x39,ST_DYNAMIC = 0x2000,ST_VARIABLE = 0x1,ST_QIC = 0x2,ST_REEL = 0x4,ST_BSF = 0x8,ST_BSR = 0x10,ST_LONG_ERASE = 0x20,ST_AUTODEN_OVERRIDE = 0x40,ST_NOBUF = 0x80,ST_RESERVED_BIT1 = 0x100,ST_KNOWS_EOD = 0x200,ST_UNLOADABLE = 0x400,ST_SOFT_ERROR_REPORTING = 0x800,ST_LONG_TIMEOUTS = 0x1000,ST_BUFFERED_WRITES = 0x4000,ST_NO_RECSIZE_LIMIT = 0x8000,ST_MODE_SEL_COMP = 0x10000,ST_NO_RESERVE_RELEASE = 0x20000,ST_READ_IGNORE_ILI = 0x40000,ST_READ_IGNORE_EOFS = 0x80000,ST_SHORT_FILEMARKS = 0x100000,ST_EJECT_ON_CHANGER_FAILURE = 0x200000,ST_RETRY_ON_RECOVERED_DEFERRED_ERROR = 0x400000,ST_CLN_TYPE_1 = 0x10000000,ST_CLN_TYPE_2 = 0x20000000,ST_CLN_TYPE_3 = 0x40000000,};
enum MACRO_ST_USER {ST_USER_CONTEXT = 1,};
enum MACRO_SUA {SUA_NULL_POINTER = -1,};
enum MACRO_SUA_ENOMEM {SUA_ENOMEM = -5,SUA_EINVAL = -6,};
enum MACRO_SUF {SUF_SIG_LEN = 2,SUF_MIN_LEN = 4,};
enum MACRO_SUN {SUN_MIN_INQLEN = 4,};
enum MACRO_SUNIXOS {SUNIXOS = 130,};
enum MACRO_SUNMON {SUNMON_START = 0xFFD00000,SUNMON_END = 0xFFF00000,};
enum MACRO_SUN_KEY {SUN_KEY_FATAL = 0x10,SUN_KEY_TIMEOUT = 0x11,SUN_KEY_EOF = 0x12,SUN_KEY_EOT = 0x13,SUN_KEY_LENGTH = 0x14,SUN_KEY_BOT = 0x15,SUN_KEY_WRONGMEDIA = 0x16,};
enum MACRO_SUN_MIN {SUN_MIN_SENSE_LENGTH = 4,};
enum MACRO_SUPD {SUPD = 0x1,SACC = 0x2,SCHG = 0x4,SPRIV = 0x8,SLOFFSET = 0x10,SLOCKED = 0x20,SWANT = 0x40,SCLONE = 0x100,};
enum MACRO_SUPPLY {SUPPLY_INTERVAL = 30,};
enum MACRO_SUPPORTED {SUPPORTED_LOG_PAGES_PAGE = 0x0,TAPE_ALERT_PAGE = 0x2E,};
enum MACRO_SUSP {SUSP = 237,};
enum MACRO_SUSPEND {SUSPEND_NORMAL = 0,SUSPEND_PAUSE = 1,};
enum MACRO_SUSP_CHECK {SUSP_CHECK_BYTE_1 = 0xBE,SUSP_CHECK_BYTE_2 = 0xEF,};
enum MACRO_SUSP_VERSION {SUSP_VERSION = 1,};
enum MACRO_SVC {SVC_CODE_SZ = 14,};
enum MACRO_SVCGET {SVCGET_XID = 4,};
enum MACRO_SVCGET_CONNMAXREC {SVCGET_CONNMAXREC = 7,};
enum MACRO_SVCPOOL_ID {NFS_SVCPOOL_ID = 0x1,NLM_SVCPOOL_ID = 0x2,};
enum MACRO_SVCSET {SVCSET_KEEPALIVE = 5,SVCSET_CONNMAXREC = 6,};
enum MACRO_SVC_VERSQUIET {SVC_VERSQUIET = 0x1,SVC_DEFUNCT = 0x2,SVC_DGRAM = 0x4,SVC_RENDEZVOUS = 0x8,SVC_CONNECTION = 0xC,SVC_DOOR = 0x10,SVC_TYPE_MASK = 0x1C,SVC_FAILED = 0x20,SVC_ARGS_CHECK = 0x40,};
enum MACRO_SVID {SVID = 0x61,};
enum MACRO_SVSCN {SVSCN = 0x5E,};
enum MACRO_SWAPPING {SWAPPING_NO = 0x10000,SWAPPING_YES = 0x20000,};
enum MACRO_SWR {SWR = 0x80,};
enum MACRO_SXTSWTCH {SXTSWTCH = 90,};
enum MACRO_SYMESZ {SYMESZ = 18,};
enum MACRO_SYMINFO {SYMINFO_FLG_DIRECT = 0x1,SYMINFO_FLG_PASSTHRU = 0x2,SYMINFO_FLG_COPY = 0x4,SYMINFO_FLG_LAZYLOAD = 0x8,SYMINFO_BT_SELF = 0xFFFF,SYMINFO_BT_PARENT = 0xFFFE,SYMINFO_BT_LOWRESERVE = 0xFF00,SYMINFO_NONE = 0x0,SYMINFO_CURRENT = 0x1,SYMINFO_NUM = 0x2,};
enum MACRO_SYMNMLEN {SYMNMLEN = 8,};
enum MACRO_SYMTYPE {SYMTYPE = 50,};
enum MACRO_SYNC {SYNC_ATTR = 0x1,SYNC_CLOSE = 0x2,SYNC_ALL = 0x4,};
enum MACRO_SYNCH {SYNCH = 242,};
enum MACRO_SYNC_PERIOD {SYNC_PERIOD_MASK = 0x1F,};
enum MACRO_SYS {SYS_NMLN = 257,};
enum MACRO_SYSCANC {SYSCANC = 9,};
enum MACRO_SYSMINT {SYSMINT = 7,SYSRAWC = 8,};
enum MACRO_SYSNAME {SYSNAME = 9,};
enum MACRO_SYSOUTC {SYSOUTC = 10,};
enum MACRO_SYSRINT {SYSRINT = 5,};
enum MACRO_SYSTEMBIT {SYSTEMBIT = 1,SYSTEMMASK = 256,};
enum MACRO_SYSXINT {SYSXINT = 6,};
enum MACRO_SYS_FORCELOAD {SYS_FORCELOAD = 0,SYS_SET_KVAR = 1,SYS_SET_MVAR = 2,SYS_CHECK_EXCLUDE = 3,};
enum MACRO_SYS_syscall {SYS_syscall = 0,SYS_exit = 1,SYS_fork = 2,SYS_read = 3,SYS_write = 4,SYS_open = 5,SYS_close = 6,SYS_wait = 7,SYS_creat = 8,SYS_link = 9,SYS_unlink = 10,SYS_exec = 11,SYS_chdir = 12,SYS_time = 13,SYS_mknod = 14,SYS_chmod = 15,SYS_chown = 16,SYS_brk = 17,SYS_stat = 18,SYS_lseek = 19,SYS_getpid = 20,SYS_mount = 21,SYS_umount = 22,SYS_setuid = 23,SYS_getuid = 24,SYS_stime = 25,SYS_pcsample = 26,SYS_alarm = 27,SYS_fstat = 28,SYS_pause = 29,SYS_utime = 30,SYS_stty = 31,SYS_gtty = 32,SYS_access = 33,SYS_nice = 34,SYS_statfs = 35,SYS_sync = 36,SYS_kill = 37,SYS_fstatfs = 38,SYS_pgrpsys = 39,SYS_xenix = 40,SYS_dup = 41,SYS_pipe = 42,SYS_times = 43,SYS_profil = 44,SYS_plock = 45,SYS_setgid = 46,SYS_getgid = 47,SYS_signal = 48,SYS_msgsys = 49,SYS_syssun = 50,SYS_sysi86 = 50,SYS_acct = 51,SYS_shmsys = 52,SYS_semsys = 53,SYS_ioctl = 54,SYS_uadmin = 55,SYS_utssys = 57,SYS_fdsync = 58,SYS_execve = 59,SYS_umask = 60,SYS_chroot = 61,SYS_fcntl = 62,SYS_ulimit = 63,SYS_tasksys = 70,SYS_acctctl = 71,SYS_exacctsys = 72,SYS_reserved_73 = 73,SYS_reserved_74 = 74,SYS_reserved_75 = 75,SYS_reserved_76 = 76,SYS_reserved_77 = 77,SYS_reserved_78 = 78,SYS_rmdir = 79,SYS_mkdir = 80,SYS_getdents = 81,SYS_sysfs = 84,SYS_getmsg = 85,SYS_putmsg = 86,SYS_poll = 87,SYS_lstat = 88,SYS_symlink = 89,SYS_readlink = 90,SYS_setgroups = 91,SYS_getgroups = 92,SYS_fchmod = 93,SYS_fchown = 94,SYS_sigprocmask = 95,SYS_sigsuspend = 96,SYS_sigaltstack = 97,SYS_sigaction = 98,SYS_sigpending = 99,SYS_context = 100,SYS_evsys = 101,SYS_evtrapret = 102,SYS_statvfs = 103,SYS_fstatvfs = 104,SYS_getloadavg = 105,SYS_nfssys = 106,SYS_waitsys = 107,SYS_sigsendsys = 108,SYS_hrtsys = 109,SYS_acancel = 110,SYS_async = 111,SYS_priocntlsys = 112,SYS_pathconf = 113,SYS_mincore = 114,SYS_mmap = 115,SYS_mprotect = 116,SYS_munmap = 117,SYS_fpathconf = 118,SYS_vfork = 119,SYS_fchdir = 120,SYS_readv = 121,SYS_writev = 122,SYS_xstat = 123,SYS_lxstat = 124,SYS_fxstat = 125,SYS_xmknod = 126,SYS_clocal = 127,SYS_setrlimit = 128,SYS_getrlimit = 129,SYS_lchown = 130,SYS_memcntl = 131,SYS_getpmsg = 132,SYS_putpmsg = 133,SYS_rename = 134,SYS_uname = 135,SYS_setegid = 136,SYS_sysconfig = 137,SYS_adjtime = 138,SYS_systeminfo = 139,SYS_seteuid = 141,SYS_vtrace = 142,SYS_fork1 = 143,SYS_sigtimedwait = 144,SYS_lwp_info = 145,SYS_yield = 146,SYS_lwp_sema_wait = 147,SYS_lwp_sema_post = 148,SYS_lwp_sema_trywait = 149,SYS_corectl = 151,SYS_modctl = 152,SYS_fchroot = 153,SYS_utimes = 154,SYS_vhangup = 155,SYS_gettimeofday = 156,SYS_getitimer = 157,SYS_setitimer = 158,SYS_lwp_create = 159,SYS_lwp_exit = 160,SYS_lwp_suspend = 161,SYS_lwp_continue = 162,SYS_lwp_kill = 163,SYS_lwp_self = 164,SYS_lwp_setprivate = 165,SYS_lwp_getprivate = 166,SYS_lwp_wait = 167,SYS_lwp_mutex_wakeup = 168,SYS_lwp_mutex_lock = 169,SYS_lwp_cond_wait = 170,SYS_lwp_cond_signal = 171,SYS_lwp_cond_broadcast = 172,SYS_pread = 173,SYS_pwrite = 174,SYS_llseek = 175,SYS_inst_sync = 176,SYS_srmlimitsys = 177,SYS_kaio = 178,SYS_cpc = 179,SYS_tsolsys = 184,SYS_acl = 185,SYS_auditsys = 186,SYS_processor_bind = 187,SYS_processor_info = 188,SYS_p_online = 189,SYS_sigqueue = 190,SYS_clock_gettime = 191,SYS_clock_settime = 192,SYS_clock_getres = 193,SYS_timer_create = 194,SYS_timer_delete = 195,SYS_timer_settime = 196,SYS_timer_gettime = 197,SYS_timer_getoverrun = 198,SYS_nanosleep = 199,SYS_facl = 200,SYS_door = 201,SYS_setreuid = 202,SYS_setregid = 203,SYS_install_utrap = 204,SYS_signotify = 205,SYS_schedctl = 206,SYS_pset = 207,SYS_sparc_utrap_install = 208,SYS_resolvepath = 209,SYS_signotifywait = 210,SYS_lwp_sigredirect = 211,SYS_lwp_alarm = 212,SYS_getdents64 = 213,SYS_mmap64 = 214,SYS_stat64 = 215,SYS_lstat64 = 216,SYS_fstat64 = 217,SYS_statvfs64 = 218,SYS_fstatvfs64 = 219,SYS_setrlimit64 = 220,SYS_getrlimit64 = 221,SYS_pread64 = 222,SYS_pwrite64 = 223,SYS_creat64 = 224,SYS_open64 = 225,SYS_rpcsys = 226,SYS_so_socket = 230,SYS_so_socketpair = 231,SYS_bind = 232,SYS_listen = 233,SYS_accept = 234,SYS_connect = 235,SYS_shutdown = 236,SYS_recv = 237,SYS_recvfrom = 238,SYS_recvmsg = 239,SYS_send = 240,SYS_sendmsg = 241,SYS_sendto = 242,SYS_getpeername = 243,SYS_getsockname = 244,SYS_getsockopt = 245,SYS_setsockopt = 246,SYS_sockconfig = 247,SYS_ntp_gettime = 248,SYS_ntp_adjtime = 249,SYS_lwp_mutex_unlock = 250,SYS_lwp_mutex_trylock = 251,SYS_lwp_mutex_init = 252,SYS_cladm = 253,SYS_lwp_sigtimedwait = 254,SYS_umount2 = 255,};
enum MACRO_SZOMB {SZOMB = 3,SSTOP = 4,};
enum MACRO_S_IFMT {S_IFMT = 0xF000,S_IAMB = 0x1FF,S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFDIR = 0x4000,S_IFNAM = 0x5000,S_INSEM = 0x1,S_INSHD = 0x2,S_IFBLK = 0x6000,S_IFREG = 0x8000,S_IFLNK = 0xA000,S_IFSOCK = 0xC000,S_IFDOOR = 0xD000,S_ISUID = 0x800,S_ISGID = 0x400,S_ISVTX = 0x200,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,S_ENFMT = 0x400,S_IRWXU = 0x1C0,S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IRWXG = 0x38,S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,};
enum MACRO_S_INET {S_INET_LISTEN = 0x40000,};
enum MACRO_S_INPUT {S_INPUT = 0x1,S_HIPRI = 0x2,S_OUTPUT = 0x4,S_MSG = 0x8,S_ERROR = 0x10,S_HANGUP = 0x20,S_RDNORM = 0x40,S_WRNORM = 0x4,S_RDBAND = 0x80,S_WRBAND = 0x100,S_BANDURG = 0x200,};
enum MACRO_S_IOCGETMODE {S_IOCGETMODE = 0x7A01,S_IOCSETMODE = 0x7A02,S_IOCGETSTATS = 0x7A03,S_IOCCLRSTATS = 0x7A04,S_IOCGETSPEED = 0x7A05,S_IOCGETMRU = 0x7A06,S_IOCSETMRU = 0x7A07,S_IOCGETMTU = 0x7A08,S_IOCSETMTU = 0x7A09,S_IOCGETMCTL = 0x7A0A,S_IOCSETDTR = 0x7A0B,};
enum MACRO_S_SIGIO {S_SIGIO = 0x1,S_SIGURG = 0x2,};
enum MACRO_S_WINFO {S_WINFO = 0x1000,S_WRDISABLE = 0x2000,S_WUNBIND = 0x4000,S_IGNORE_FLOW = 0x8000,S_WUNBIND_DISCON = 0x10000,};
enum MACRO_SetFunctionalAddr {SetFunctionalAddr = 0x3,ClearFunctionalAddr = 0x4,};
enum MACRO_SetGroupAddr {SetGroupAddr = 0x5,};
enum MACRO_T : __int64 {MAXOFF_T = 0x7FFFFFFF,MAXOFFSET_T = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_TA {TA_INPUT = 0,TA_OUTPUT = 1,TA_USER = 2,TA_RESPOND = 3,TA_DROP = 4,};
enum MACRO_TAB0 {TAB0 = 0,TAB2 = 4096,};
enum MACRO_TAB3 {TAB3 = 0x1800,BSDLY = 0x2000,};
enum MACRO_TABLDISC {TABLDISC = 3,NTABLDISC = 4,};
enum MACRO_TACCES {TACCES = 3,TBADF = 4,};
enum MACRO_TADDRBUSY {TADDRBUSY = 23,};
enum MACRO_TAG {TAG_DEBUG = 1,TAG_STATS = 2,TAG_GCACHE = 3,TAG_GCACHE_ALL = 3,TAG_DCACHE = 4,TAG_DCACHE_ONE = 4,TAG_OCACHE = 5,TAG_SECURE = 6,TAG_TCACHE_ONE = 7,TAG_DCACHE_ALL = 8,TAG_TCACHE_ALL = 9,TAG_GCACHE_ONE = 10,TAG_DCACHE_ONE_REFRESH = 11,TAG_READONLY = 12,TAG_READWRITE = 14,TAG_OPSTATS = 2048,TAG_THREADS = 2049,TAG_HEAP = 2050,TAG_UPDATES = 2051,TAG_VISIBLE = 2052,TAG_S_DCACHE = 2053,TAG_S_OCACHE = 2054,TAG_S_GCACHE = 2055,TAG_S_STORAGE = 2056,TAG_UPTIME = 2057,TAG_DIRLIST = 2058,TAG_NISCOMPAT = 2059,TAG_DNSFORWARDING = 2060,TAG_SECURITY_LEVEL = 2061,TAG_ROOTSERVER = 2062,};
enum MACRO_TAPE {TAPE_ALERT_SUPPORT_UNKNOWN = 0,TAPE_ALERT_NOT_SUPPORTED = 1,TAPE_ALERT_SUPPORTED = 2,TAPE_ALERT_MAX_PARA = 64,};
enum MACRO_TAPE_SENSE {TAPE_SENSE_LENGTH = 32,};
enum MACRO_TASK {TASK_NORMAL = 0x0,TASK_FINAL = 0x1,TASK_FINALITY = 0x1,};
enum MACRO_TASKQ {TASKQ_PREPOPULATE = 0x1,TASKQ_CPR_SAFE = 0x2,};
enum MACRO_TASKQ_ACTIVE {TASKQ_ACTIVE = 0x10000,TASKQ_NAMELEN = 0x1F,};
enum MACRO_TA_BINARY {TA_BINARY = 1,TA_CRYPT = 2,TA_XDR = 4,TA_SEARCHABLE = 8,TA_CASE = 16,TA_MODIFIED = 32,TA_ASN1 = 64,};
enum MACRO_TBADADDR {TBADADDR = 1,TBADOPT = 2,};
enum MACRO_TBADDATA {TBADDATA = 10,};
enum MACRO_TBADNAME {TBADNAME = 21,};
enum MACRO_TBADQLEN {TBADQLEN = 22,};
enum MACRO_TBADSEQ {TBADSEQ = 7,TSYSERR = 8,};
enum MACRO_TBUFOVFLW {TBUFOVFLW = 11,};
enum MACRO_TCDSET {TCDSET = 21536,};
enum MACRO_TCFLSH {TCFLSH = 21511,};
enum MACRO_TCGETA {TCGETA = 21505,};
enum MACRO_TCGETS {TCGETS = 21517,};
enum MACRO_TCGETX {TCGETX = 22529,};
enum MACRO_TCIFLUSH {TCIFLUSH = 0,TCOFLUSH = 1,TCIOFLUSH = 2,};
enum MACRO_TCION {TCION = 3,tIOC = 29696,};
enum MACRO_TCL {TCL_TRANSDEL = 0xD,TCL_RESERRORRATE = 0x3,TCL_PROTECTION = 0xA,TCL_PRIORITY = 0xB,};
enum MACRO_TCL_BADADDR {TCL_BADADDR = 22,TCL_BADOPT = 22,TCL_NOPEER = 14,TCL_PEERBADSTATE = 71,};
enum MACRO_TCL_CHECKSUM {TCL_CHECKSUM = 1536,};
enum MACRO_TCO {TCO_THROUGHPUT = 0x1,TCO_TRANSDEL = 0x2,TCO_RESERRORRATE = 0x3,TCO_TRANSFFAILPROB = 0x4,TCO_ESTFAILPROB = 0x5,TCO_RELFAILPROB = 0x6,TCO_ESTDELAY = 0x7,TCO_RELDELAY = 0x8,TCO_CONNRESIL = 0x9,TCO_PROTECTION = 0xA,TCO_PRIORITY = 0xB,TCO_EXPD = 0xC,};
enum MACRO_TCOO {TCOO_NOPEER = 146,TCOO_PEERNOROOMONQ = 146,TCOO_PEERBADSTATE = 146,TCOO_PEERINITIATED = 131,TCOO_PROVIDERINITIATED = 131,};
enum MACRO_TCOOFF {TCOOFF = 0,TCOON = 1,TCIOFF = 2,};
enum MACRO_TCO_LTPDU {TCO_LTPDU = 0x100,TCO_ACKTIME = 0x200,TCO_REASTIME = 0x300,TCO_EXTFORM = 0x400,TCO_FLOWCTRL = 0x500,TCO_CHECKSUM = 0x600,TCO_NETEXP = 0x700,TCO_NETRECPTCF = 0x800,TCO_PREFCLASS = 0x900,TCO_ALTCLASS1 = 0xA00,TCO_ALTCLASS2 = 0xB00,TCO_ALTCLASS3 = 0xC00,TCO_ALTCLASS4 = 0xD00,};
enum MACRO_TCO_NOPEER {TCO_NOPEER = 146,TCO_PEERNOROOMONQ = 146,TCO_PEERBADSTATE = 146,TCO_PEERINITIATED = 131,TCO_PROVIDERINITIATED = 131,};
enum MACRO_TCP {TCP_NODELAY = 0x1,TCP_MAXSEG = 0x2,TCP_KEEPALIVE = 0x8,};
enum MACRO_TCPOOB {TCPOOB_HAVEDATA = 0x1,TCPOOB_HADDATA = 0x2,};
enum MACRO_TCPOPT {TCPOPT_EOL = 0,TCPOPT_NOP = 1,TCPOPT_MAXSEG = 2,TCPOPT_WSCALE = 3,TCPOPT_SACK_PERMITTED = 4,TCPOPT_SACK = 5,TCPOPT_TSTAMP = 8,};
enum MACRO_TCPS {TCPS_IDLE = -5,TCPS_BOUND = -4,TCPS_SYN_RCVD = -1,};
enum MACRO_TCPS_SYN {TCPS_SYN_RECEIVED = 3,};
enum MACRO_TCPT {TCPT_NTIMERS = 4,TCPT_REXMT = 0,TCPT_PERSIST = 1,TCPT_KEEP = 2,TCPT_2MSL = 3,};
enum MACRO_TCPTV {TCPTV_SRTTBASE = 0,TCPTV_KEEPCNT = 8,};
enum MACRO_TCP_IOC {TCP_IOC_DEFAULT_Q = 21555,};
enum MACRO_TCP_ISSINCR {TCP_ISSINCR = 128000,};
enum MACRO_TCP_LINGERTIME {TCP_LINGERTIME = 120,TCP_MAXRXTSHIFT = 12,};
enum MACRO_TCP_MAX {TCP_MAX_COMBINED_HEADER_LENGTH = 120,TCP_MAX_IP_OPTIONS_LENGTH = 40,TCP_MAX_HDR_LENGTH = 60,TCP_MIN_HEADER_LENGTH = 20,TCP_MAXWIN = 65535,TCP_MAX_WINSHIFT = 14,TCP_MAX_LARGEWIN = 1073725440,};
enum MACRO_TCP_NDEBUG {TCP_NDEBUG = 100,TCP_NSTATES = 11,};
enum MACRO_TCP_NOTIFY {TCP_NOTIFY_THRESHOLD = 0x10,TCP_ABORT_THRESHOLD = 0x11,TCP_CONN_NOTIFY_THRESHOLD = 0x12,TCP_CONN_ABORT_THRESHOLD = 0x13,TCP_RECVDSTADDR = 0x14,TCP_ANONPRIVBIND = 0x20,TCP_EXCLBIND = 0x21,};
enum MACRO_TCP_PUSH {TCP_PUSH_BIT = 0x10,};
enum MACRO_TCP_TTL {TCP_TTL = 60,};
enum MACRO_TCRCLEN {TCRCLEN = 8,};
enum MACRO_TCSADRAIN {TCSADRAIN = 21519,};
enum MACRO_TCSAFLUSH {TCSAFLUSH = 21520,};
enum MACRO_TCSANOW {TCSANOW = 21518,};
enum MACRO_TCSBRK {TCSBRK = 21509,};
enum MACRO_TCSETA {TCSETA = 21506,};
enum MACRO_TCSETAF {TCSETAF = 21508,};
enum MACRO_TCSETAW {TCSETAW = 21507,};
enum MACRO_TCSETS {TCSETS = 21518,};
enum MACRO_TCSETSF {TCSETSF = 21520,};
enum MACRO_TCSETSW {TCSETSW = 21519,};
enum MACRO_TCSETX {TCSETX = 22530,};
enum MACRO_TCSETXF {TCSETXF = 22532,};
enum MACRO_TCSETXW {TCSETXW = 22531,};
enum MACRO_TCXONC {TCXONC = 21510,};
enum MACRO_TD {TD_THR_ANY_USER_FLAGS = 0xFFFFFFFF,TD_THR_LOWEST_PRIORITY = 0x0,TD_SIGNO_MASK = 0x0,TD_EVENTSIZE = 0x2,};
enum MACRO_TD_SV {TD_SV_MAX_FLAGS = 8,};
enum MACRO_TE {TE_BIND_REQ = 0,TE_UNBIND_REQ = 1,TE_OPTMGMT_REQ = 2,TE_BIND_ACK = 3,TE_OPTMGMT_ACK = 4,TE_ERROR_ACK = 5,TE_OK_ACK1 = 6,TE_OK_ACK2 = 7,TE_OK_ACK3 = 8,TE_OK_ACK4 = 9,TE_CONN_REQ = 10,TE_CONN_RES = 11,TE_DISCON_REQ = 12,TE_DATA_REQ = 13,TE_EXDATA_REQ = 14,TE_ORDREL_REQ = 15,TE_CONN_IND = 16,TE_CONN_CON = 17,TE_DATA_IND = 18,TE_EXDATA_IND = 19,TE_ORDREL_IND = 20,TE_DISCON_IND1 = 21,TE_DISCON_IND2 = 22,TE_DISCON_IND3 = 23,TE_PASS_CONN = 24,TE_UNITDATA_REQ = 25,TE_UNITDATA_IND = 26,TE_UDERROR_IND = 27,TE_NOEVENTS = 28,};
enum MACRO_TEL {TEL_IOC_ENABLE = 28162,TEL_IOC_MODE = 28163,TEL_IOC_GETBLK = 28164,TEL_BINARY_IN = 1,TEL_BINARY_OUT = 2,};
enum MACRO_TELCMD {TELCMD_FIRST = 236,TELCMD_LAST = 255,};
enum MACRO_TELIOC {TELIOC = 28160,};
enum MACRO_TELOPT {TELOPT_BINARY = 0,TELOPT_ECHO = 1,TELOPT_RCP = 2,TELOPT_SGA = 3,TELOPT_NAMS = 4,TELOPT_STATUS = 5,TELOPT_TM = 6,TELOPT_RCTE = 7,TELOPT_NAOL = 8,TELOPT_NAOP = 9,TELOPT_NAOCRD = 10,TELOPT_NAOHTS = 11,TELOPT_NAOHTD = 12,TELOPT_NAOFFD = 13,TELOPT_NAOVTS = 14,TELOPT_NAOVTD = 15,TELOPT_NAOLFD = 16,TELOPT_XASCII = 17,TELOPT_LOGOUT = 18,TELOPT_BM = 19,TELOPT_DET = 20,TELOPT_SUPDUP = 21,TELOPT_SUPDUPOUTPUT = 22,TELOPT_SNDLOC = 23,TELOPT_TTYPE = 24,TELOPT_EOR = 25,TELOPT_TUID = 26,TELOPT_OUTMRK = 27,TELOPT_TTYLOC = 28,TELOPT_3270REGIME = 29,TELOPT_X3PAD = 30,TELOPT_NAWS = 31,TELOPT_TSPEED = 32,TELOPT_LFLOW = 33,TELOPT_LINEMODE = 34,TELOPT_XDISPLOC = 35,TELOPT_OLD_ENVIRON = 36,TELOPT_AUTHENTICATION = 37,TELOPT_ENCRYPT = 38,TELOPT_NEW_ENVIRON = 39,TELOPT_EXOPL = 255,TELOPT_FIRST = 0,TELOPT_LAST = 39,};
enum MACRO_TELQUAL {TELQUAL_IS = 0,TELQUAL_SEND = 1,TELQUAL_INFO = 2,TELQUAL_REPLY = 2,TELQUAL_NAME = 3,};
enum MACRO_TERM {TERM_NONE = 0,TERM_TEC = 1,TERM_V61 = 2,TERM_V10 = 3,TERM_TEX = 4,TERM_D40 = 5,TERM_H45 = 6,TERM_D42 = 7,};
enum MACRO_TERM_BAD {TERM_BAD_MALLOC = 6,};
enum MACRO_TEXT {TEXT_IMPLICIT = 0x100,TEXT_EXPLICIT = 0x200,TEXT_VISUAL = 0x300,};
enum MACRO_TEXTDOMAINMAX {TEXTDOMAINMAX = 256,};
enum MACRO_TEXT_SHAPED {TEXT_SHAPED = 0x1000000,TEXT_NOMINAL = 0x2000000,TEXT_SHFORM1 = 0x3000000,TEXT_SHFORM2 = 0x4000000,TEXT_SHFORM3 = 0x5000000,TEXT_SHFORM4 = 0x6000000,};
enum MACRO_TF {TF_ACKNOW = 0x1,TF_DELACK = 0x2,TF_NODELAY = 0x4,TF_NOOPT = 0x8,TF_SENTFIN = 0x10,};
enum MACRO_TFLOW {TFLOW = 12,};
enum MACRO_TGEXEC {TGEXEC = 0x8,};
enum MACRO_TGIDLEN {TGIDLEN = 8,};
enum MACRO_TGREAD {TGREAD = 0x20,};
enum MACRO_TGWRITE {TGWRITE = 0x10,};
enum MACRO_TH {TH_FIN = 0x1,TH_SYN = 0x2,TH_RST = 0x4,TH_PUSH = 0x8,TH_ACK = 0x10,TH_URG = 0x20,};
enum MACRO_THOUSEP {THOUSEP = 40,};
enum MACRO_THR {THR_BOUND = 0x1,THR_NEW_LWP = 0x2,THR_DETACHED = 0x40,THR_SUSPENDED = 0x80,THR_DAEMON = 0x100,};
enum MACRO_TH_PSH {TH_PSH = 0x8,TH_ACK_ACCEPTABLE = 0x400,TH_XMIT_NEEDED = 0x800,TH_REXMIT_NEEDED = 0x1000,TH_ACK_NEEDED = 0x2000,TH_NEED_SACK_REXMIT = 0x4000,TH_TIMER_NEEDED = 0x8000,TH_ORDREL_NEEDED = 0x10000,TH_MARKNEXT_NEEDED = 0x20000,TH_SEND_URP_MARK = 0x40000,};
enum MACRO_TI {TI_GETINFO = 21644,TI_OPTMGMT = 21645,TI_BIND = 21646,TI_UNBIND = 21647,TI_GETMYNAME = 21648,TI_GETPEERNAME = 21649,TI_SETMYNAME = 21650,TI_SETPEERNAME = 21651,TI_SYNC = 21652,TI_GETADDRS = 21653,TI_CAPABILITY = 21654,};
enum MACRO_TIE {TIE_RESET = 0x8000,TIE_NOLOOP = 0x4000,TIE_CA = 0x2000,TIE_IE = 0x1000,TIE_INTR = 0x100,};
enum MACRO_TIFIOCALLOCBUF {TIFIOCALLOCBUF = 29702,};
enum MACRO_TIFIOCDEALLOCBUF {TIFIOCDEALLOCBUF = 29703,};
enum MACRO_TIFIOCGBLOCK {TIFIOCGBLOCK = 29711,};
enum MACRO_TIFIOCGFWZONE {TIFIOCGFWZONE = 29712,};
enum MACRO_TIFIOCGHEADER {TIFIOCGHEADER = 29710,};
enum MACRO_TIFIOCGMAXPROBE {TIFIOCGMAXPROBE = 29697,};
enum MACRO_TIFIOCGPIDSTATE {TIFIOCGPIDSTATE = 29706,};
enum MACRO_TIFIOCGPROBESTRING {TIFIOCGPROBESTRING = 29699,};
enum MACRO_TIFIOCGPROBEVALS {TIFIOCGPROBEVALS = 29698,};
enum MACRO_TIFIOCGSTATE {TIFIOCGSTATE = 29701,};
enum MACRO_TIFIOCPIDFILTERGET {TIFIOCPIDFILTERGET = 29709,};
enum MACRO_TIFIOCSPIDFILTER {TIFIOCSPIDFILTER = 29705,};
enum MACRO_TIFIOCSPIDOFF {TIFIOCSPIDOFF = 29708,};
enum MACRO_TIFIOCSPIDON {TIFIOCSPIDON = 29707,};
enum MACRO_TIFIOCSPROBEVALS {TIFIOCSPROBEVALS = 29700,};
enum MACRO_TIFIOCSTRACING {TIFIOCSTRACING = 29704,};
enum MACRO_TIME {BOOT_TIME = 2,OLD_TIME = 3,NEW_TIME = 4,};
enum MACRO_TIMEOUT {CLSET_TIMEOUT = 1,CLGET_TIMEOUT = 2,};
enum MACRO_TIMEOUT_0 {TIMEOUT = 0x1,WOPEN = 0x2,ISOPEN = 0x4,};
enum MACRO_TIMER {TIMER_RELTIME = 0x0,TIMER_ABSTIME = 0x1,};
enum MACRO_TIMER_RATE {TIMER_RATE = 30,};
enum MACRO_TIME_0 {TIME = 1,UPROCP = 2,};
enum MACRO_TIME_OK {TIME_OK = 0,TIME_INS = 1,TIME_DEL = 2,TIME_OOP = 3,TIME_WAIT = 4,TIME_ERROR = 5,};
enum MACRO_TIMOD {TIMOD = 21504,};
enum MACRO_TINDOUT {TINDOUT = 24,};
enum MACRO_TINVALID {TINVALID = 4095,};
enum MACRO_TIOC {TIOC = 21504,};
enum MACRO_TIOCCBRK {TIOCCBRK = 29818,};
enum MACRO_TIOCCDTR {TIOCCDTR = 29816,};
enum MACRO_TIOCEXCL {TIOCEXCL = 29709,};
enum MACRO_TIOCFLUSH {TIOCFLUSH = 29712,};
enum MACRO_TIOCGETC {TIOCGETC = 29714,};
enum MACRO_TIOCGETD {TIOCGETD = 29696,};
enum MACRO_TIOCGETP {TIOCGETP = 29704,};
enum MACRO_TIOCGLTC {TIOCGLTC = 29812,};
enum MACRO_TIOCGPGRP {TIOCGPGRP = 29716,};
enum MACRO_TIOCGPPS {TIOCGPPS = 21629,};
enum MACRO_TIOCGPPSEV {TIOCGPPSEV = 21631,};
enum MACRO_TIOCGSID {TIOCGSID = 29718,};
enum MACRO_TIOCGSOFTCAR {TIOCGSOFTCAR = 21609,};
enum MACRO_TIOCGWINSZ {TIOCGWINSZ = 21608,};
enum MACRO_TIOCHPCL {TIOCHPCL = 29698,};
enum MACRO_TIOCKBOF {TIOCKBOF = 21513,};
enum MACRO_TIOCKBON {TIOCKBON = 21512,};
enum MACRO_TIOCLBIC {TIOCLBIC = 29822,};
enum MACRO_TIOCLBIS {TIOCLBIS = 29823,};
enum MACRO_TIOCLGET {TIOCLGET = 29820,};
enum MACRO_TIOCLSET {TIOCLSET = 29821,};
enum MACRO_TIOCM {TIOCM_LE = 0x1,TIOCM_DTR = 0x2,TIOCM_RTS = 0x4,TIOCM_ST = 0x8,TIOCM_SR = 0x10,TIOCM_CTS = 0x20,TIOCM_CAR = 0x40,TIOCM_CD = 0x40,TIOCM_RNG = 0x80,TIOCM_RI = 0x80,TIOCM_DSR = 0x100,};
enum MACRO_TIOCMBIC {TIOCMBIC = 29724,};
enum MACRO_TIOCMBIS {TIOCMBIS = 29723,};
enum MACRO_TIOCMGET {TIOCMGET = 29725,};
enum MACRO_TIOCMSET {TIOCMSET = 29722,};
enum MACRO_TIOCNOTTY {TIOCNOTTY = 29809,};
enum MACRO_TIOCNXCL {TIOCNXCL = 29710,};
enum MACRO_TIOCOUTQ {TIOCOUTQ = 29811,};
enum MACRO_TIOCPKT {TIOCPKT_DATA = 0x0,TIOCPKT_FLUSHREAD = 0x1,TIOCPKT_FLUSHWRITE = 0x2,TIOCPKT_STOP = 0x4,TIOCPKT_START = 0x8,TIOCPKT_NOSTOP = 0x10,TIOCPKT_DOSTOP = 0x20,TIOCPKT_IOCTL = 0x40,};
enum MACRO_TIOCPKT_WINDOW {TIOCPKT_WINDOW = 0x80,};
enum MACRO_TIOCREMOTE {TIOCREMOTE = 29726,};
enum MACRO_TIOCSBRK {TIOCSBRK = 29819,};
enum MACRO_TIOCSDTR {TIOCSDTR = 29817,};
enum MACRO_TIOCSETC {TIOCSETC = 29713,};
enum MACRO_TIOCSETD {TIOCSETD = 29697,};
enum MACRO_TIOCSETN {TIOCSETN = 29706,};
enum MACRO_TIOCSETP {TIOCSETP = 29705,};
enum MACRO_TIOCSIGNAL {TIOCSIGNAL = 29727,};
enum MACRO_TIOCSLTC {TIOCSLTC = 29813,};
enum MACRO_TIOCSPGRP {TIOCSPGRP = 29717,};
enum MACRO_TIOCSPPS {TIOCSPPS = 21630,};
enum MACRO_TIOCSSID {TIOCSSID = 29720,};
enum MACRO_TIOCSSOFTCAR {TIOCSSOFTCAR = 21610,};
enum MACRO_TIOCSTART {TIOCSTART = 29806,};
enum MACRO_TIOCSTI {TIOCSTI = 29719,};
enum MACRO_TIOCSTOP {TIOCSTOP = 29807,};
enum MACRO_TIOCSWINSZ {TIOCSWINSZ = 21607,};
enum MACRO_TL {TL_PROT_LEVEL = 0x544C,TL_OPT_PEER_CRED = 0xA,TL_IOC = 0x544C00,TL_IOC_CREDOPT = 0x544C01,TL_IOC_SOCKET = 0x544C02,};
enum MACRO_TLI {TLI_STACK_BUF_SIZE = 512,};
enum MACRO_TLOOK {TLOOK = 9,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_TM {TM_NONE = 0x0,TM_SNL = 0x1,TM_ANL = 0x2,TM_LCF = 0x4,TM_CECHO = 0x8,TM_CINVIS = 0x10,TM_SET = 0x80,};
enum MACRO_TMAGLEN {TMAGLEN = 6,};
enum MACRO_TMD {TMD_RES = 0x20,TMD_MORE = 0x10,TMD_ONE = 0x8,TMD_DEF = 0x4,TMD_BUFF = 0x8000,TMD_UFLO = 0x4000,TMD_LCOL = 0x1000,TMD_LCAR = 0x800,TMD_RTRY = 0x400,TMD_TDR = 0x3F,TMD_ANYERROR = 0xDC00,};
enum MACRO_TMODE {TMODE = 0xF000,};
enum MACRO_TMODLEN {TMODLEN = 8,};
enum MACRO_TMP {TMP_MAX = 17576,};
enum MACRO_TMPMAXFRACKMEM {TMPMAXFRACKMEM = 25,};
enum MACRO_TMPMINFREE {TMPMINFREE = 2097152,};
enum MACRO_TMP_MUSTHAVE {TMP_MUSTHAVE = 0x1,};
enum MACRO_TMXOPEN {TMXOPEN = 1,TMXPLINK = 2,};
enum MACRO_TM_SUNDAY {TM_SUNDAY = 0,TM_MONDAY = 1,TM_TUESDAY = 2,TM_WEDNESDAY = 3,TM_THURSDAY = 4,TM_FRIDAY = 5,TM_SATURDAY = 6,TM_JANUARY = 0,TM_FEBRUARY = 1,TM_MARCH = 2,TM_APRIL = 3,TM_MAY = 4,TM_JUNE = 5,TM_JULY = 6,TM_AUGUST = 7,TM_SEPTEMBER = 8,TM_OCTOBER = 9,TM_NOVEMBER = 10,TM_DECEMBER = 11,TM_YEAR_BASE = 1900,};
enum MACRO_TNF {TNF_MAGIC = 0x544E4600,TNF_MAGIC_1 = 0x464E54,TNF_TAG_GENERATION_NUM = 0xFFFFFFFF,TNF_SPACE_MASK = 0x80000000,TNF_SPACE_PERMANENT = 0x80000000,TNF_SPACE_RECLAIMABLE = 0x0,TNF_SPACE_SIGN_BIT = 0x40000000,TNF_REF32_TYPE_MASK = 0x3,TNF_REF32_T_FULL = 0x0,TNF_REF32_T_FWD = 0x0,TNF_REF32_T_PAIR = 0x1,TNF_REF32_T_TAG = 0x2,TNF_REF32_T_RSVD = 0x3,TNF_REF32_REF16_MASK = 0xFFFF,TNF_REF32_TAG16_SHIFT = 0x10,TNF_REF32_TAG16_MASK = 0xFFFF,TNF_REF16_TYPE_MASK = 0x3,TNF_TAG16_TYPE_MASK = 0x3,TNF_TAG16_T_ABS = 0x1,TNF_TAG16_T_REL = 0x0,TNF_NULL = 0x0,TNF_FILE_VERSION = 0x1,TNF_NEXT_INIT = 0xFFFFFFFF,};
enum MACRO_TNF_DATUM {TNF_DATUM_NULL = 0,TNF_ERRNO_MAX = 1023,};
enum MACRO_TNOADDR {TNOADDR = 5,};
enum MACRO_TNODATA {TNODATA = 13,};
enum MACRO_TNODIS {TNODIS = 14,};
enum MACRO_TNOREL {TNOREL = 17,};
enum MACRO_TNOSTRUCTYPE {TNOSTRUCTYPE = 20,};
enum MACRO_TNOTSUPPORT {TNOTSUPPORT = 18,};
enum MACRO_TNOUDERR {TNOUDERR = 15,TBADFLAG = 16,};
enum MACRO_TOD {TOD_IOC = 29696,TOD_GET_DATE = 29696,TOD_SET_ALARM = 29697,TOD_CLEAR_ALARM = 29698,};
enum MACRO_TOEXEC {TOEXEC = 0x1,};
enum MACRO_TOFFSET {TOFFSET = 0x7FF,};
enum MACRO_TOKEN {TOKEN_VERSION = 2,};
enum MACRO_TOO_LONG {ENTRY_TOO_LONG = 4,TERMINFO_TOO_LONG = 5,};
enum MACRO_TOP {TOP_SYNC = 0x1,TOP_ASYNC = 0x2,};
enum MACRO_TOPFUNC {TOPFUNC = 0x620,};
enum MACRO_TOP_COMMIT {TOP_COMMIT_SIZE = 0,TOP_MAX_RESV = 524288,};
enum MACRO_TOP_FIRST {TOP_FIRST = 256,TOP_LAST = 511,};
enum MACRO_TOREAD {TOREAD = 0x4,};
enum MACRO_TOUTSTATE {TOUTSTATE = 6,};
enum MACRO_TOWRITE {TOWRITE = 0x2,};
enum MACRO_TP {TP_HOLDLWP = 0x2,TP_TWAIT = 0x4,TP_LWPEXIT = 0x8,TP_PRSTOP = 0x10,TP_CHKPT = 0x20,TP_EXITLWP = 0x40,TP_PRVSTOP = 0x80,TP_MSACCT = 0x100,TP_STOPPING = 0x200,TP_WATCHPT = 0x400,TP_PAUSE = 0x800,TP_CHANGEBIND = 0x1000,};
enum MACRO_TPLBYTEMAP {TPLBYTEMAP_LOW = 0x0,TPLBYTEMAP_HIGH = 0x1,TPLBYTEMAP_VS = 0x80,};
enum MACRO_TPLBYTEORD {TPLBYTEORD_LOW = 0x0,TPLBYTEORD_HIGH = 0x1,TPLBYTEORD_VS = 0x80,};
enum MACRO_TPLFE {TPLFE_SUB_SERIAL = 0,TPLFE_SUB_MODEM_COMMON = 1,TPLFE_SUB_MODEM_DATA = 2,TPLFE_SUB_MODEM_FAX = 3,TPLFE_SUB_VOICE = 4,TPLFE_CAP_MODEM_DATA = 5,TPLFE_CAP_MODEM_FAX = 6,TPLFE_CAP_MODEM_VOICE = 7,TPLFE_CAP_SERIAL_DATA = 8,TPLFE_CAP_SERIAL_FAX = 9,TPLFE_CAP_SERIAL_VOICE = 10,TPLFE_UA_8250 = 0,TPLFE_UA_16450 = 1,TPLFE_UA_16550 = 2,TPLFE_UC_PARITY_SPACE = 1,TPLFE_UC_PARITY_MARK = 2,TPLFE_UC_PARITY_ODD = 4,TPLFE_UC_PARITY_EVEN = 8,TPLFE_UC_CS5 = 256,TPLFE_UC_CS6 = 512,TPLFE_UC_CS7 = 1024,TPLFE_UC_CS8 = 2048,TPLFE_UC_STOP_1 = 4096,TPLFE_UC_STOP_15 = 8192,TPLFE_UC_STOP_2 = 16384,TPLFE_FC_TX_XONOFF = 1,TPLFE_FC_RX_XONOFF = 2,TPLFE_FC_TX_HW = 4,TPLFE_FC_RX_HW = 8,TPLFE_FC_TRANS = 16,TPLFE_MS_BELL103 = 1,TPLFE_MS_V21 = 2,TPLFE_MS_V23 = 4,TPLFE_MS_V22AB = 8,TPLFE_MS_BELL212 = 16,TPLFE_MS_V22BIS = 32,TPLFE_MS_V26 = 64,TPLFE_MS_V26BIS = 128,TPLFE_MS_V27BIS = 256,TPLFE_MS_V29 = 512,TPLFE_MS_V32 = 1024,TPLFE_MS_V32BIS = 2048,TPLFE_MS_VFAST = 4096,TPLFE_EM_MNP = 1,TPLFE_EM_V42 = 2,TPLFE_DC_V42BIS = 1,TPLFE_DC_MNP5 = 2,TPLFE_CM_AT1 = 1,TPLFE_CM_AT2 = 2,TPLFE_CM_AT3 = 4,TPLFE_CM_MNP_AT = 8,TPLFE_CM_V25BIS = 16,TPLFE_CM_V25A = 32,TPLFE_CM_DMCL = 64,TPLFE_EX_BREAK = 1,TPLFE_EX_PLUS = 2,TPLFE_EX_UD = 4,TPLFE_EF_CALLERID = 1,TPLFE_FM_V21C2 = 1,TPLFE_FM_V27TER = 2,TPLFE_FM_V29 = 4,TPLFE_FM_V17 = 8,TPLFE_FM_V33 = 16,TPLFE_FS_T3 = 1,TPLFE_FS_T4 = 2,TPLFE_FS_T6 = 4,TPLFE_FS_ECM = 8,TPLFE_FS_VOICEREQ = 16,TPLFE_FS_POLLING = 32,TPLFE_FS_FTP = 64,TPLFE_FS_PASSWORD = 128,TPLFE_NETWORK_INFO = 0,TPLFE_LAN_TECH_ARCNET = 1,TPLFE_LAN_TECH_ETHERNET = 2,TPLFE_LAN_TECH_TOKENRING = 3,TPLFE_LAN_TECH_LOCALTALK = 4,TPLFE_LAN_TECH_FDDI = 5,TPLFE_LAN_TECH_ATM = 6,TPLFE_LAN_TECH_WIRELESS = 7,TPLFE_LAN_MEDIA_INHERENT = 0,TPLFE_LAN_MEDIA_UTP = 1,TPLFE_LAN_MEDIA_STP = 2,TPLFE_LAN_MEDIA_THIN_COAX = 3,TPLFE_LAN_MEDIA_THICK_COAX = 4,TPLFE_LAN_MEDIA_FIBER = 5,TPLFE_LAN_MEDIA_SSR_902 = 6,TPLFE_LAN_MEDIA_SSR_2_4 = 7,TPLFE_LAN_MEDIA_SSR_5_4 = 8,TPLFE_LAN_MEDIA_DIFFUSE_IR = 9,TPLFE_LAN_MEDIA_PTP_IR = 10,};
enum MACRO_TPLFMTEDC {TPLFMTEDC_NONE = 0x0,TPLFMTEDC_CKSUM = 0x1,TPLFMTEDC_CRC = 0x2,TPLFMTEDC_PCC = 0x3,TPLFMTEDC_VS = 0x80,};
enum MACRO_TPLFMTFLAGS {TPLFMTFLAGS_ADDR = 0x1,TPLFMTFLAGS_AUTO = 0x2,};
enum MACRO_TPLFMTTYPE {TPLFMTTYPE_DISK = 0x0,TPLFMTTYPE_MEM = 0x1,TPLFMTTYPE_VS = 0x80,};
enum MACRO_TPLFUNC {TPLFUNC_MULTI = 0x0,TPLFUNC_MEMORY = 0x1,TPLFUNC_SERIAL = 0x2,TPLFUNC_PARALLEL = 0x3,TPLFUNC_FIXED = 0x4,TPLFUNC_VIDEO = 0x5,TPLFUNC_LAN = 0x6,TPLFUNC_AIMS = 0x7,TPLFUNC_SCSI = 0x8,TPLFUNC_SECURITY = 0x9,TPLFUNC_VENDOR_SPECIFIC = 0xFE,TPLFUNC_UNKNOWN = 0xFF,};
enum MACRO_TPLINIT {TPLINIT_POST = 0x1,TPLINIT_ROM = 0x2,};
enum MACRO_TPROTO {TPROTO = 29,};
enum MACRO_TPROVMISMATCH {TPROVMISMATCH = 25,};
enum MACRO_TP_BSIZE {TP_BSIZE = 1024,};
enum MACRO_TP_NINDIR {TP_NINDIR = 512,};
enum MACRO_TQFULL {TQFULL = 28,};
enum MACRO_TR {TR_Dialout = 1,TR___add_group = 2,TR___alloc_mbrs = 3,TR___authenticate = 4,TR___bind_rpc = 5,TR___break_name = 6,TR___buf = 7,TR___callback_error = 8,TR___callback_finish = 9,TR___callback_stub = 10,TR___clnt_create_loopback = 11,TR___core_lookup = 12,TR___cvt2attr = 13,TR___default_domain = 14,TR___des_crypt = 15,TR___des_encrypt = 16,TR___des_setkey = 17,TR___do_callback = 18,TR___do_ismember = 19,TR___domainname = 20,TR___free_list = 21,TR___get_clnt_uaddr = 22,TR___get_group = 23,TR___get_local_names = 24,TR___get_obj_defaults = 25,TR___get_ti_clnt = 26,TR___getclnt = 27,TR___hostdata = 28,TR___implicit_member = 29,TR___insert_entry = 30,TR___insert_group = 31,TR___insert_list = 32,TR___make_binding = 33,TR___map_addr = 34,TR___msgout = 35,TR___name_distance = 36,TR___name_hash = 37,TR___nextsep_of = 38,TR___nis_clnt_ibops = 39,TR___nis_clnt_nameops = 40,TR___nis_get_server = 41,TR___nis_init_callback = 42,TR___nis_librand = 43,TR___nis_map_group = 44,TR___nis_path_list = 45,TR___nis_pingproc = 46,TR___nis_run_callback = 47,TR___nis_tagproc = 48,TR___remove_entry = 49,TR___remove_group = 50,TR___rpc_dtbsize = 51,TR___rpc_endconf = 52,TR___rpc_get_a_size = 53,TR___rpc_get_default_domain = 54,TR___rpc_get_local_uid = 55,TR___rpc_get_t_size = 56,TR___rpc_getconf = 57,TR___rpc_getconfip = 58,TR___rpc_negotiate_uid = 59,TR___rpc_openchild = 60,TR___rpc_select_to_poll = 61,TR___rpc_setconf = 62,TR___rpc_timeval_to_msec = 63,TR___rpc_trace = 64,TR___rpcgettp = 65,TR___seterr_reply = 66,TR___simple_lookup = 67,TR___stop_clock = 68,TR___svcauth_des = 69,TR___svcauth_null = 70,TR___svcauth_short = 71,TR___svcauth_sys = 72,TR___svcauth_unix = 73,TR___yp_dobind = 74,TR__alloc_buf = 75,TR__dummy = 76,TR__null_tiptr = 77,TR__rcv_conn_con = 78,TR__snd_conn_req = 79,TR__t_aligned_copy = 80,TR__t_alloc_bufs = 81,TR__t_blocksigpoll = 82,TR__t_checkfd = 83,TR__t_do_ioctl = 84,TR__t_is_event = 85,TR__t_is_ok = 86,TR__t_max = 87,TR__t_putback = 88,TR__t_restore_state = 89,TR__t_setsize = 90,TR_accepted = 91,TR_addProto = 92,TR_add_entry_1 = 93,TR_additem = 94,TR_alarmtr = 95,TR_altconn = 96,TR_ask = 97,TR_assert = 98,TR_auth_destroy = 99,TR_auth_errmsg = 100,TR_authdes_create = 101,TR_authdes_destroy = 102,TR_authdes_getucred = 103,TR_authdes_marshal = 104,TR_authdes_nextverf = 105,TR_authdes_ops = 106,TR_authdes_pk_seccreate = 107,TR_authdes_refresh = 108,TR_authdes_seccreate = 109,TR_authdes_validate = 110,TR_authnone_create = 111,TR_authnone_destroy = 112,TR_authnone_marshal = 113,TR_authnone_ops = 114,TR_authnone_refresh = 115,TR_authnone_validate = 116,TR_authnone_verf = 117,TR_authsys_create = 118,TR_authsys_create_default = 119,TR_authsys_destroy = 120,TR_authsys_marshal = 121,TR_authsys_nextverf = 122,TR_authsys_ops = 123,TR_authsys_refresh = 124,TR_authsys_validate = 125,TR_bin2hex = 126,TR_bindresvport = 127,TR_blank = 128,TR_bsfix = 129,TR_cache_get = 130,TR_cache_init = 131,TR_cache_ref = 132,TR_cache_set = 133,TR_cache_spot = 134,TR_cache_victim = 135,TR_calchash = 136,TR_callrpc = 138,TR_cbc_crypt = 139,TR_chat = 140,TR_check_binding = 141,TR_check_version = 142,TR_chkblk = 143,TR_cklock = 144,TR_classmatch = 145,TR_cleanup = 146,TR_clnt_broadcast = 147,TR_clnt_call = 148,TR_clnt_com_create = 149,TR_clnt_control = 150,TR_clnt_create = 151,TR_clnt_create_vers = 152,TR_clnt_destroy = 153,TR_clnt_dg_abort = 154,TR_clnt_dg_call = 155,TR_clnt_dg_control = 156,TR_clnt_dg_create = 157,TR_clnt_dg_destroy = 158,TR_clnt_dg_freeres = 159,TR_clnt_dg_geterr = 160,TR_clnt_dg_ops = 161,TR_clnt_freeres = 162,TR_clnt_geterr = 163,TR_clnt_pcreateerror = 164,TR_clnt_perrno = 165,TR_clnt_perror = 166,TR_clnt_raw_abort = 167,TR_clnt_raw_call = 168,TR_clnt_raw_control = 169,TR_clnt_raw_create = 170,TR_clnt_raw_destroy = 171,TR_clnt_raw_freeres = 172,TR_clnt_raw_geterr = 173,TR_clnt_raw_ops = 174,TR_clnt_spcreateerror = 175,TR_clnt_sperrno = 176,TR_clnt_sperror = 177,TR_clnt_tli_create = 178,TR_clnt_tp_create = 179,TR_clnt_vc_abort = 180,TR_clnt_vc_call = 181,TR_clnt_vc_control = 182,TR_clnt_vc_create = 183,TR_clnt_vc_destroy = 184,TR_clnt_vc_freeres = 185,TR_clnt_vc_geterr = 186,TR_clnt_vc_ops = 187,TR_clntraw_create = 188,TR_clnttcp_create = 189,TR_clntudp_bufcreate = 190,TR_clntudp_create = 191,TR_cmpdatum = 192,TR_comment = 193,TR_common_crypt = 194,TR_conn = 195,TR_currdev = 196,TR_currdial = 197,TR_currsys = 198,TR_dbm_access = 199,TR_dbmclose = 200,TR_dbmflush = 201,TR_dbminit = 202,TR_delete = 203,TR_delitem = 204,TR_delock = 205,TR_des_setparity = 206,TR_detachnode = 207,TR_devreset = 208,TR_dial = 209,TR_dial801 = 210,TR_dialreset = 211,TR_dkbreak = 212,TR_dkcall = 213,TR_dkdial = 214,TR_dkerr = 215,TR_dkerrmap = 216,TR_dkminor = 217,TR_dkndial = 218,TR_dksetup = 219,TR_dkteardown = 220,TR_do_accept = 221,TR_doassign = 222,TR_dobase = 223,TR_doconfig = 224,TR_dofirst = 225,TR_domaster = 226,TR_domatch = 227,TR_donext = 228,TR_doorder = 229,TR_dopop = 230,TR_dopush = 231,TR_dorun = 232,TR_dots_in_name = 233,TR_dtnamer = 234,TR_eaccess = 235,TR_eatwhite = 236,TR_ecb_crypt = 237,TR_endhostent = 238,TR_endnetconfig = 239,TR_endnetpath = 240,TR_endrpcent = 241,TR_err_conv = 242,TR_expect = 243,TR_exphone = 244,TR_extract_secret = 245,TR_fd_cklock = 246,TR_fd_mklock = 247,TR_fd_rmlock = 248,TR_fdig = 249,TR_fetch = 250,TR_ffs = 251,TR_fgetnetconfig = 252,TR_fill_input_buf = 253,TR_findProto = 254,TR_finds = 255,TR_firsthash = 256,TR_firstkey = 257,TR_fix_buf_size = 258,TR_fixline = 259,TR_flush_out = 260,TR_fn_cklock = 261,TR_forder = 262,TR_free_entry = 263,TR_free_name_item = 264,TR_freenetconfigent = 265,TR_freenode = 266,TR_gdial = 267,TR_getProto = 268,TR_get_default_domain = 269,TR_get_input_bytes = 270,TR_get_myaddress = 271,TR_getargs = 272,TR_getbit = 273,TR_getbroadcastnets = 274,TR_getbyte = 275,TR_getclnt = 276,TR_getclnthandle = 277,TR_getdesfd = 278,TR_getdevline = 279,TR_getdialline = 280,TR_getdomainname = 281,TR_getflag = 282,TR_getgroups = 283,TR_gethostbyaddr = 284,TR_gethostbynamadr = 285,TR_gethostbyname = 286,TR_gethostent = 287,TR_gethostname = 288,TR_getkeys_files = 289,TR_getkeys_nis = 290,TR_getkeys_nisplus = 291,TR_getkeyserv_handle = 292,TR_getline = 293,TR_getlookups = 294,TR_getname = 295,TR_getnetconfig = 296,TR_getnetconfigent = 297,TR_getnetid = 298,TR_getnetid_files = 299,TR_getnetid_nis = 300,TR_getnetid_nisplus = 301,TR_getnetlist = 302,TR_getnetname = 303,TR_getnetpath = 304,TR_getnettype = 305,TR_getnlookups = 306,TR_getpop = 307,TR_getpublicandprivatekey = 308,TR_getpublickey = 309,TR_getpush = 310,TR_getrpcbyname = 312,TR_getrpcbynumber = 313,TR_getrpcent = 314,TR_getsecretkey = 315,TR_getsysline = 316,TR_getto = 317,TR_gettoken = 318,TR_getvalue = 319,TR_got_entry = 320,TR_harmless = 321,TR_hashinc = 322,TR_hex2bin = 323,TR_hexval = 324,TR_host2netname = 325,TR_ifdate = 326,TR_inet_addr = 327,TR_inet_netof = 328,TR_inet_ntoa = 329,TR_interface = 330,TR_invalidate = 331,TR_ioctl = 332,TR_key_call = 333,TR_key_decryptsession = 334,TR_key_decryptsession_pk = 335,TR_key_encryptsession = 336,TR_key_encryptsession_pk = 337,TR_key_gendes = 338,TR_key_setsecret = 339,TR_load_dom_binding = 340,TR_load_xlate = 341,TR_local_rpcb = 342,TR_logent = 343,TR_makdatum = 344,TR_makefd_xprt = 345,TR_makenode = 346,TR_marshal_new_auth = 347,TR_memcp = 348,TR_mergeProto = 349,TR_mklock = 350,TR_mlock = 351,TR_msgout = 352,TR_namematch = 353,TR_nameparse = 354,TR_nap = 355,TR_nc_perror = 356,TR_nc_sperror = 357,TR_negotiate_broadcast = 358,TR_netconfig_dup = 359,TR_netconfig_free = 360,TR_netdir_free = 361,TR_netdir_getbyaddr = 362,TR_netdir_getbyname = 363,TR_netdir_options = 364,TR_netdir_perror = 365,TR_netdir_sperror = 366,TR_netlist_free = 367,TR_netname2host = 368,TR_netname2user = 369,TR_newborn = 370,TR_nextProto = 371,TR_nextdevices = 372,TR_nextdialers = 373,TR_nextkey = 374,TR_nextsystems = 375,TR_nis_add = 376,TR_nis_add_clnt = 377,TR_nis_add_entry = 378,TR_nis_addmember = 379,TR_nis_callback_clnt = 380,TR_nis_checkpoint = 381,TR_nis_checkpoint_clnt = 382,TR_nis_clone_object = 383,TR_nis_cptime_clnt = 384,TR_nis_creategroup = 385,TR_nis_data = 386,TR_nis_destroy_object = 387,TR_nis_destroygroup = 388,TR_nis_dir_cmp = 389,TR_nis_domain_of = 390,TR_nis_dump = 391,TR_nis_dump_clnt = 392,TR_nis_dumplog = 393,TR_nis_dumplog_clnt = 394,TR_nis_find_item = 395,TR_nis_finddirectory = 396,TR_nis_finddirectory_clnt = 397,TR_nis_first_entry = 398,TR_nis_flush_namelist = 399,TR_nis_flush_table = 400,TR_nis_flushgroups = 401,TR_nis_free_request = 402,TR_nis_freenames = 403,TR_nis_freeresult = 404,TR_nis_freeservlist = 405,TR_nis_get_object = 406,TR_nis_get_request = 407,TR_nis_get_static_storage = 408,TR_nis_getdtblsize = 409,TR_nis_getnames = 410,TR_nis_getservlist = 411,TR_nis_ibadd_clnt = 412,TR_nis_ibfirst_clnt = 413,TR_nis_iblist_clnt = 414,TR_nis_ibmodify_clnt = 415,TR_nis_ibnext_clnt = 416,TR_nis_ibremove_clnt = 417,TR_nis_in_table = 418,TR_nis_insert_item = 419,TR_nis_insert_name = 420,TR_nis_ismember = 421,TR_nis_leaf_of = 422,TR_nis_lerror = 423,TR_nis_list = 424,TR_nis_local_directory = 425,TR_nis_local_group = 426,TR_nis_local_host = 427,TR_nis_local_principal = 428,TR_nis_lookup = 429,TR_nis_lookup_clnt = 430,TR_nis_make_error = 431,TR_nis_make_rpchandle = 432,TR_nis_mkdir = 433,TR_nis_mkdir_clnt = 434,TR_nis_modify = 435,TR_nis_modify_clnt = 436,TR_nis_modify_entry = 437,TR_nis_name_of = 438,TR_nis_next_entry = 439,TR_nis_perror = 440,TR_nis_ping = 441,TR_nis_ping_clnt = 442,TR_nis_pop_item = 443,TR_nis_print_directory = 444,TR_nis_print_entry = 445,TR_nis_print_group = 446,TR_nis_print_group_entry = 447,TR_nis_print_link = 448,TR_nis_print_object = 449,TR_nis_print_rights = 450,TR_nis_print_server = 451,TR_nis_print_table = 452,TR_nis_read_obj = 453,TR_nis_remove = 454,TR_nis_remove_clnt = 455,TR_nis_remove_entry = 456,TR_nis_remove_item = 457,TR_nis_remove_name = 458,TR_nis_removemember = 459,TR_nis_rmdir = 460,TR_nis_rmdir_clnt = 461,TR_nis_servstate = 462,TR_nis_servstate_clnt = 463,TR_nis_sperrno = 464,TR_nis_sperror = 465,TR_nis_stats = 466,TR_nis_status_clnt = 467,TR_nis_verifygroup = 468,TR_nis_write_obj = 469,TR_notin = 470,TR_onelock = 471,TR_open801 = 472,TR_parsedata = 473,TR_passwd2des = 474,TR_pmap_getmaps = 475,TR_pmap_getport = 476,TR_pmap_rmtcall = 477,TR_pmap_set = 478,TR_pmap_unset = 479,TR_pop_push = 480,TR_print_column = 481,TR_processdev = 482,TR_prog_dispatch = 483,TR_protoString = 484,TR_rddev = 485,TR_read_coldstart_1 = 486,TR_read_vc = 487,TR_registerrpc = 488,TR_rejected = 489,TR_removeProto = 490,TR_remove_entry_1 = 491,TR_rendezvous_request = 492,TR_rendezvous_stat = 493,TR_repphone = 494,TR_restline = 495,TR_rmlock = 496,TR_rpc_broadcast = 497,TR_rpc_call = 498,TR_rpc_nullproc = 499,TR_rpc_reg = 500,TR_rpc_wrap_bcast = 501,TR_rpcb_getaddr = 502,TR_rpcb_getmaps = 503,TR_rpcb_gettime = 504,TR_rpcb_rmtcall = 505,TR_rpcb_set = 506,TR_rpcb_taddr2uaddr = 507,TR_rpcb_uaddr2taddr = 508,TR_rpcb_unset = 509,TR_rtime_tli = 510,TR_savline = 511,TR_scancfg = 512,TR_scansys = 513,TR_sendthem = 514,TR_set_input_fragment = 515,TR_setalarm = 516,TR_setbit = 517,TR_setconfig = 518,TR_setdevcfg = 519,TR_setdomainname = 520,TR_setfile = 521,TR_sethostent = 522,TR_sethup = 523,TR_setioctl = 524,TR_setline = 525,TR_setnetconfig = 526,TR_setnetpath = 527,TR_setrpcent = 528,TR_setservice = 529,TR_shift1left = 530,TR_show_tlook = 531,TR_skip_input_bytes = 532,TR_stlock = 533,TR_stoa = 534,TR_store = 535,TR_strecpy = 536,TR_strlocase = 537,TR_strsave = 538,TR_svc_auth_reg = 539,TR_svc_com_create = 540,TR_svc_create = 541,TR_svc_destroy = 542,TR_svc_dg_create = 543,TR_svc_dg_destroy = 544,TR_svc_dg_enablecache = 545,TR_svc_dg_freeargs = 546,TR_svc_dg_getargs = 547,TR_svc_dg_ops = 548,TR_svc_dg_recv = 549,TR_svc_dg_reply = 550,TR_svc_dg_stat = 551,TR_svc_exit = 552,TR_svc_fd_create = 553,TR_svc_find = 554,TR_svc_freeargs = 555,TR_svc_getargs = 556,TR_svc_getreq = 557,TR_svc_getreq_common = 558,TR_svc_getreq_poll = 559,TR_svc_getreqset = 560,TR_svc_getrpccaller = 561,TR_svc_raw_create = 562,TR_svc_raw_destroy = 563,TR_svc_raw_freeargs = 564,TR_svc_raw_getargs = 565,TR_svc_raw_ops = 566,TR_svc_raw_recv = 567,TR_svc_raw_reply = 568,TR_svc_raw_stat = 569,TR_svc_reg = 570,TR_svc_register = 571,TR_svc_run = 572,TR_svc_sendreply = 573,TR_svc_tli_create = 574,TR_svc_tp_create = 575,TR_svc_unreg = 576,TR_svc_unregister = 577,TR_svc_vc_create = 578,TR_svc_vc_destroy = 579,TR_svc_vc_freeargs = 580,TR_svc_vc_getargs = 581,TR_svc_vc_ops = 582,TR_svc_vc_recv = 583,TR_svc_vc_rendezvous_ops = 584,TR_svc_vc_reply = 585,TR_svc_vc_stat = 586,TR_svc_versquiet = 587,TR_svcerr_auth = 588,TR_svcerr_decode = 589,TR_svcerr_noproc = 590,TR_svcerr_noprog = 591,TR_svcerr_progvers = 592,TR_svcerr_systemerr = 593,TR_svcerr_weakauth = 594,TR_svcfd_create = 595,TR_svcraw_create = 596,TR_svctcp_create = 597,TR_svcudp_bufcreate = 598,TR_svcudp_create = 599,TR_synchronize = 600,TR_sysaccess = 601,TR_sysreset = 602,TR_sytcall = 603,TR_sytfix2line = 604,TR_sytfixline = 605,TR_t_accept = 606,TR_t_alloc = 607,TR_t_bind = 608,TR_t_close = 609,TR_t_connect = 610,TR_t_error = 611,TR_t_free = 612,TR_t_getinfo = 613,TR_t_getname = 614,TR_t_getstate = 615,TR_t_listen = 616,TR_t_look = 617,TR_t_open = 618,TR_t_optmgmt = 619,TR_t_rcv = 620,TR_t_rcvall = 621,TR_t_rcvconnect = 622,TR_t_rcvdis = 623,TR_t_rcvrel = 624,TR_t_rcvudata = 625,TR_t_rcvuderr = 626,TR_t_snd = 627,TR_t_snddis = 628,TR_t_sndrel = 629,TR_t_sndudata = 630,TR_t_sync = 631,TR_t_unbind = 632,TR_taddr2uaddr = 633,TR_tcpcall = 634,TR_tfaillog = 635,TR_time_not_ok = 636,TR_timout = 637,TR_tioctl = 638,TR_tlicall = 639,TR_tokenize = 640,TR_translate = 641,TR_tread = 642,TR_tsetup = 643,TR_tssetup = 644,TR_tteardown = 645,TR_ttygenbrk = 646,TR_twrite = 647,TR_uaddr2taddr = 648,TR_undial = 649,TR_unetcall = 650,TR_universal = 651,TR_user2netname = 652,TR_usetup = 653,TR_usingypmap = 654,TR_usralarm = 655,TR_uteardown = 656,TR_wrchr = 657,TR_write_vc = 658,TR_wrstr = 659,TR_x_destroy = 660,TR_x_getpostn = 661,TR_x_inline = 662,TR_x_putbytes = 663,TR_x_putlong = 664,TR_x_setpostn = 665,TR_xdecrypt = 666,TR_xdr_accepted_reply = 667,TR_xdr_array = 668,TR_xdr_authdes_cred = 669,TR_xdr_authdes_verf = 670,TR_xdr_authkern = 671,TR_xdr_authsys_parms = 672,TR_xdr_bool = 673,TR_xdr_bytes = 674,TR_xdr_callhdr = 675,TR_xdr_callmsg = 676,TR_xdr_cback_data = 677,TR_xdr_char = 678,TR_xdr_cp_result = 679,TR_xdr_cryptkeyarg = 680,TR_xdr_cryptkeyres = 681,TR_xdr_datum = 682,TR_xdr_des_block = 683,TR_xdr_destroy = 684,TR_xdr_directory_obj = 685,TR_xdr_double = 686,TR_xdr_dump_args = 687,TR_xdr_endpoint = 688,TR_xdr_entry_col = 689,TR_xdr_entry_obj = 690,TR_xdr_enum = 691,TR_xdr_fd_args = 692,TR_xdr_fd_result = 693,TR_xdr_float = 694,TR_xdr_free = 695,TR_xdr_getcredres = 696,TR_xdr_getpos = 697,TR_xdr_gid_t = 698,TR_xdr_group_obj = 699,TR_xdr_hyper = 700,TR_xdr_ib_request = 701,TR_xdr_inline = 702,TR_xdr_int = 703,TR_xdr_keybuf = 704,TR_xdr_keystatus = 705,TR_xdr_link_obj = 706,TR_xdr_log_entry = 707,TR_xdr_log_entry_t = 708,TR_xdr_log_result = 709,TR_xdr_long = 710,TR_xdr_longlong_t = 711,TR_xdr_netbuf = 712,TR_xdr_netconfig = 713,TR_xdr_netnamestr = 714,TR_xdr_netobj = 715,TR_xdr_nis_attr = 716,TR_xdr_nis_error = 717,TR_xdr_nis_name = 718,TR_xdr_nis_object = 719,TR_xdr_nis_oid = 720,TR_xdr_nis_result = 721,TR_xdr_nis_server = 722,TR_xdr_nis_tag = 723,TR_xdr_nis_taglist = 724,TR_xdr_ns_request = 725,TR_xdr_nstype = 726,TR_xdr_oar_mask = 727,TR_xdr_obj_p = 728,TR_xdr_objdata = 729,TR_xdr_opaque = 730,TR_xdr_opaque_auth = 731,TR_xdr_ping_args = 732,TR_xdr_pmap = 733,TR_xdr_pmaplist = 734,TR_xdr_pmaplist_ptr = 735,TR_xdr_pointer = 736,TR_xdr_quadruple = 737,TR_xdr_reference = 738,TR_xdr_rejected_reply = 739,TR_xdr_replymsg = 740,TR_xdr_rmtcall_args = 741,TR_xdr_rmtcallargs = 742,TR_xdr_rmtcallres = 743,TR_xdr_rpcb = 744,TR_xdr_rpcb_addrp = 745,TR_xdr_rpcb_entry = 746,TR_xdr_rpcb_entry_list = 747,TR_xdr_rpcb_entry_list_ptr = 748,TR_xdr_rpcb_rmtcallargs = 749,TR_xdr_rpcb_rmtcalllistp = 750,TR_xdr_rpcb_rmtcallres = 751,TR_xdr_rpcb_stat = 752,TR_xdr_rpcb_stat_byvers = 753,TR_xdr_rpcblist = 754,TR_xdr_rpcblist_ptr = 755,TR_xdr_rpcbs_addrlist = 756,TR_xdr_rpcbs_addrlist_ptr = 757,TR_xdr_rpcbs_proc = 758,TR_xdr_rpcbs_rmtcalllist = 759,TR_xdr_rpcbs_rmtcalllist_ptr = 760,TR_xdr_setpos = 761,TR_xdr_short = 762,TR_xdr_sizeof = 763,TR_xdr_string = 764,TR_xdr_table_col = 765,TR_xdr_table_obj = 766,TR_xdr_u_char = 767,TR_xdr_u_hyper = 768,TR_xdr_u_int = 769,TR_xdr_u_long = 770,TR_xdr_u_longlong_t = 771,TR_xdr_u_short = 772,TR_xdr_uid_t = 773,TR_xdr_union = 774,TR_xdr_unixcred = 775,TR_xdr_vector = 776,TR_xdr_void = 777,TR_xdr_wrapstring = 778,TR_xdr_yp_buf = 779,TR_xdr_ypall = 780,TR_xdr_ypbind_binding = 781,TR_xdr_ypbind_domain = 782,TR_xdr_ypbind_resp = 783,TR_xdr_ypbind_resptype = 784,TR_xdr_ypbind_setdom = 785,TR_xdr_ypdelete_args = 786,TR_xdr_ypdomain_wrap_string = 787,TR_xdr_ypmap_parms = 788,TR_xdr_ypmap_wrap_string = 789,TR_xdr_ypmaplist = 790,TR_xdr_ypmaplist_wrap_string = 791,TR_xdr_ypowner_wrap_string = 792,TR_xdr_yppushresp_xfr = 793,TR_xdr_ypreq_key = 794,TR_xdr_ypreq_newname_string = 795,TR_xdr_ypreq_newxfr = 796,TR_xdr_ypreq_nokey = 797,TR_xdr_ypreq_xfr = 798,TR_xdr_ypresp_key_val = 799,TR_xdr_ypresp_maplist = 800,TR_xdr_ypresp_master = 801,TR_xdr_ypresp_order = 802,TR_xdr_ypresp_val = 803,TR_xdr_ypupdate_args = 804,TR_xdr_zotypes = 805,TR_xdrmbuf_destroy = 806,TR_xdrmbuf_getbytes = 807,TR_xdrmbuf_getlong = 808,TR_xdrmbuf_getmbuf = 809,TR_xdrmbuf_getpos = 810,TR_xdrmbuf_init = 811,TR_xdrmbuf_inline = 812,TR_xdrmbuf_putbuf = 813,TR_xdrmbuf_putbytes = 814,TR_xdrmbuf_putlong = 815,TR_xdrmbuf_setpos = 816,TR_xdrmem_create = 817,TR_xdrmem_destroy = 818,TR_xdrmem_getbytes = 819,TR_xdrmem_getlong = 820,TR_xdrmem_getpos = 821,TR_xdrmem_inline = 822,TR_xdrmem_ops = 823,TR_xdrmem_putbytes = 824,TR_xdrmem_putlong = 825,TR_xdrmem_setpos = 826,TR_xdrrec_create = 827,TR_xdrrec_destroy = 828,TR_xdrrec_endofrecord = 829,TR_xdrrec_eof = 830,TR_xdrrec_getbytes = 831,TR_xdrrec_getlong = 832,TR_xdrrec_getpos = 833,TR_xdrrec_inline = 834,TR_xdrrec_ops = 835,TR_xdrrec_putbytes = 836,TR_xdrrec_putlong = 837,TR_xdrrec_setpos = 838,TR_xdrrec_skiprecord = 839,TR_xdrstdio_create = 840,TR_xdrstdio_destroy = 841,TR_xdrstdio_getbytes = 842,TR_xdrstdio_getlong = 843,TR_xdrstdio_getpos = 844,TR_xdrstdio_inline = 845,TR_xdrstdio_ops = 846,TR_xdrstdio_putbytes = 847,TR_xdrstdio_putlong = 848,TR_xdrstdio_setpos = 849,TR_xencrypt = 850,TR_xfer = 851,TR_xprt_register = 852,TR_xprt_unregister = 853,TR_yp_all = 854,TR_yp_bind = 855,TR_yp_first = 856,TR_yp_get_default_domain = 857,TR_yp_master = 858,TR_yp_match = 859,TR_yp_next = 860,TR_yp_order = 861,TR_yp_unbind = 862,TR_yp_update = 863,TR_ypbindproc_domain_3 = 864,TR_ypbindproc_null_3 = 865,TR_ypbindproc_setdom_3 = 866,TR_yperr_string = 867,TR_ypprot_err = 868,TR_check_cache = 869,TR_delete_cache = 870,TR_add_cache = 871,TR_rpcb_findaddr = 872,TR_svc_control = 873,TR_svc_dg_control = 874,TR_svc_raw_control = 875,TR_svc_vc_control = 876,TR___svc_versquiet_get = 877,TR___svc_versquiet_on = 878,TR___svc_versquiet_off = 879,TR_user2netname_nisplus = 880,TR_user2netname_nis = 881,TR_parse_netid_str = 882,TR_parse_uid_gidlist = 883,TR_parse_uid = 884,TR_parse_gidlist = 885,TR_netname2user_files = 886,TR_netname2user_nis = 887,TR_netname2user_nisplus = 888,TR_key_get_conv = 889,TR__t_look_locked = 890,TR__td_setnodelay = 891,TR__nss_initf_hosts = 892,TR__switch_gethostbyname_r = 893,TR__switch_gethostbyaddr_r = 894,TR_gethostent_r = 895,TR_str2hostent = 896,TR_gethostbyname_r = 897,TR_gethostbyaddr_r = 898,TR__nss_initf_rpc = 899,TR_getrpcbyname_r = 900,TR_getrpcbynumber_r = 901,TR_getrpcent_r = 902,TR_str2rpcent = 903,TR_key_secretkey_is_set = 904,TR_clnt_create_vers_timed = 905,TR_rendezvous_control = 906,TR___gss_authenticate = 907,TR_t_sndreldata = 908,TR_t_sndv = 909,TR_t_sndvudata = 910,TR_t_rcvreldata = 911,TR_t_rcvv = 912,TR_t_rcvvudata = 913,TR_t_sysconf = 914,TR__nss_initf_auuser = 915,TR_str2auuser = 916,TR_setauuser = 917,TR_endauuser = 918,TR_getauuser = 919,TR_getauusernam = 920,TR__nss_initf_authattr = 921,TR_str2authattr = 922,TR_setauthattr = 923,TR_endauthattr = 924,TR_getauthattr = 925,TR_getauthnam = 926,TR__nss_initf_execattr = 927,TR_str2execattr = 928,TR_setexecattr = 929,TR_endexecattr = 930,TR_getexecattr = 931,TR_getexecprof = 932,TR__nss_initf_profattr = 933,TR_str2profattr = 934,TR_setprofattr = 935,TR_endprofattr = 936,TR_getprofattr = 937,TR_getprofnam = 938,TR__nss_initf_userattr = 939,TR_str2userattr = 940,TR_setuserattr = 941,TR_enduserattr = 942,TR_getuserattr = 943,TR_getusernam = 944,};
enum MACRO_TRAN {TRAN_ACCEPT = 1,TRAN_BUSY = 0,TRAN_BADPKT = -1,TRAN_FATAL_ERROR = -2,};
enum MACRO_TRANSFER {TRANSFER_TIMEOUT = 0x1,FAKEOUT_TIMEOUT = 0x10,TEST1_TIMEOUT = 0x20,TEST2_TIMEOUT = 0x40,};
enum MACRO_TRAP {TRAP_BRKPT = 1,TRAP_TRACE = 2,TRAP_RWATCH = 3,TRAP_WWATCH = 4,TRAP_XWATCH = 5,};
enum MACRO_TRAPTR {TRAPTR_NEXT = 0,TRAPTR_FIRST = 4,TRAPTR_LIMIT = 8,TRAPTR_SIZE_SHIFT = 4,};
enum MACRO_TRAP_ENT {TRAP_ENT_TBR = 0x0,TRAP_ENT_PSR = 0x4,TRAP_ENT_PC = 0x8,TRAP_ENT_SP = 0xC,TRAP_ENT_G7 = 0x10,TRAP_ENT_TR = 0x14,TRAP_ENT_F1 = 0x18,TRAP_ENT_F2 = 0x1C,TRAP_ENT_SIZE = 0x20,TRAP_TSIZE = 0x2000,};
enum MACRO_TRESADDR {TRESADDR = 27,};
enum MACRO_TRESQLEN {TRESQLEN = 26,};
enum MACRO_TRS {TRS_VALID = 0,TRS_NONVOLATILE = 1,TRS_LWPID = 2,TRS_INVALID = 3,};
enum MACRO_TRY {TRY_AGAIN = 2,};
enum MACRO_TR_CANNOT {TR_CANNOT = 0,TR_CAN = 1,};
enum MACRO_TR_DATA {TR_DATA_MIN = 8,TR_DATA_MAX = 12,};
enum MACRO_TR_FAC {TR_FAC_TRACE = 0,TR_FAC_TEST = 1,TR_FAC_TRAP = 2,TR_FAC_INTR = 3,TR_FAC_SYSCALL = 4,TR_FAC_DISP = 5,TR_FAC_VM = 6,TR_FAC_PROC = 7,TR_FAC_LOCK = 8,TR_FAC_BCOPY = 9,TR_FAC_KMEM = 10,TR_FAC_STREAMS_FR = 11,TR_FAC_STREAMS_MOD = 12,TR_FAC_SOCKMOD = 13,TR_FAC_TCP = 14,TR_FAC_UDP = 15,TR_FAC_IP = 16,TR_FAC_ARP = 17,TR_FAC_LE = 18,TR_FAC_IPI = 19,TR_FAC_SCSI = 21,TR_FAC_LWP = 22,TR_FAC_SYS_LWP = 23,TR_FAC_CALLOUT = 24,TR_FAC_SPECFS = 29,TR_FAC_SWAPFS = 30,TR_FAC_TMPFS = 31,TR_FAC_UFS = 32,TR_FAC_NFS = 33,TR_FAC_DDI = 35,TR_FAC_KRPC = 36,TR_FAC_SCHED = 37,TR_FAC_SCSI_RES = 38,TR_FAC_SCSI_ISP = 39,TR_FAC_IA = 40,TR_FAC_S5 = 41,TR_FAC_QE = 42,TR_FAC_BE = 43,TR_FAC_FIFO = 44,TR_FAC_RLOGINP = 45,TR_FAC_AE = 46,TR_FAC_PHYSIO = 47,TR_FAC_META = 48,TR_FAC_SCSI_FAS = 49,TR_FAC_SOCKFS = 50,TR_FAC_DEVMAP = 51,TR_FAC_DADA = 52,TR_END = 0,TR_VERSION = 1,TR_TITLE = 2,TR_PAD = 3,TR_LABEL = 4,TR_PAGESIZE = 5,TR_NUM_CPUS = 6,TR_CPU = 7,TR_DATA_4 = 8,TR_DATA_8 = 9,TR_DATA_16 = 10,TR_DATA_32 = 11,TR_DATA_64 = 12,TR_ABS_TIME = 13,TR_START_TIME = 14,TR_ELAPSED_TIME = 15,TR_TOTAL_TIME = 16,TR_KTHREAD_ID = 17,TR_UTHREAD_ID = 18,TR_CLOCK_FREQUENCY = 19,TR_RAW_KTHREAD_ID = 64,TR_RAW_UTHREAD_ID = 65,TR_KTHREAD_LABEL = 66,TR_UTHREAD_LABEL = 67,TR_PROCESS_NAME = 68,TR_PROCESS_FORK = 69,TR_SPEED_0 = 0,TR_SPEED_1 = 1,TR_SPEED_1_STRING = 2,TR_SPEED_2 = 3,TR_SPEED_2_STRING = 4,TR_SPEED_3 = 5,TR_SPEED_3_STRING = 6,TR_SPEED_4 = 7,TR_SPEED_4_STRING = 8,TR_SPEED_5 = 9,TR_SPEED_5_STRING = 10,TR_TRACE_FLUSH_START = 11,TR_TRACE_FLUSH_END = 12,TR_TRACE_VN_WRITE_START = 13,TR_TRACE_VN_WRITE_END = 14,TR_TRAP_START = 0,TR_TRAP_END = 1,TR_KERNEL_WINDOW_OVERFLOW = 2,TR_KERNEL_WINDOW_UNDERFLOW = 3,TR_USER_WINDOW_OVERFLOW = 4,TR_USER_WINDOW_UNDERFLOW = 5,TR_C_TRAP_HANDLER_ENTER = 6,TR_C_TRAP_HANDLER_EXIT = 7,TR_INTR_START = 0,TR_INTR_END = 1,TR_INTR_EXIT = 2,TR_INTR_PASSIVATE = 3,TR_SYSCALL_START = 0,TR_SYSCALL_END = 1,TR_DISP_START = 0,TR_DISP_END = 1,TR_SWTCH_START = 2,TR_SWTCH_END = 3,TR_PREEMPT_START = 4,TR_PREEMPT_END = 5,TR_RESUME_START = 6,TR_RESUME_END = 7,TR_FRONTQ = 8,TR_BACKQ = 9,TR_CPU_RESCHED = 10,TR_SLEEP = 11,TR_TRAPRET = 12,TR_TICK = 13,TR_UPDATE = 14,TR_CPU_CHOOSE = 15,TR_CPU_SURRENDER = 16,TR_PREEMPT = 17,TR_PAGE_INIT = 0,TR_PAGE_WS_IN = 1,TR_PAGE_WS_OUT = 2,TR_PAGE_WS_FREE = 3,TR_PAGE_WS_RECLAIM = 4,TR_PAGEOUT_START = 5,TR_PAGEOUT_END = 6,TR_PAGEOUT_HAND_WRAP = 7,TR_PAGEOUT_MAXPGIO = 8,TR_PAGEOUT_ISREF = 9,TR_PAGEOUT_FREE = 10,TR_PAGEOUT_CV_SIGNAL = 11,TR_HAT_SETMOD = 12,TR_HAT_SETREF = 13,TR_HAT_SETREFMOD = 14,TR_HAT_CLRMOD = 15,TR_HAT_CLRREF = 16,TR_HAT_CLRREFMOD = 17,TR_HME_ADD = 18,TR_HME_SUB = 19,TR_SEGMAP_FAULT = 20,TR_SEGMAP_GETMAP = 21,TR_SEGMAP_RELMAP = 22,TR_SEGMAP_PAGECREATE = 23,TR_SEGMAP_GETPAGE = 24,TR_SEGVN_FAULT = 25,TR_SEGVN_GETPAGE = 26,TR_ANON_GETPAGE = 27,TR_ANON_PRIVATE = 28,TR_SEGKMEM_ALLOC = 29,TR_SWAP_ALLOC = 30,TR_PVN_READ_KLUSTER = 31,TR_PVN_GETDIRTY = 32,TR_PAGE_CREATE_START = 33,TR_PAGE_CREATE_TOOBIG = 34,TR_PAGE_CREATE_NOMEM = 35,TR_PAGE_CREATE_SUCCESS = 36,TR_PAGE_CREATE_SLEEP_START = 37,TR_PAGE_CREATE_SLEEP_END = 38,TR_PAGE_CREATE_ALLOC = 39,TR_PAGE_FREE_FREE = 40,TR_PAGE_FREE_CACHE_HEAD = 41,TR_PAGE_FREE_CACHE_TAIL = 42,TR_PAGE_UNFREE_FREE = 43,TR_PAGE_UNFREE_CACHE = 44,TR_PAGE_DESTROY = 45,TR_PAGE_HASHIN = 46,TR_PAGE_HASHOUT = 47,TR_ANON_PROC = 48,TR_ANON_SHM = 49,TR_ANON_TMPFS = 50,TR_ANON_SWAP = 51,TR_ANON_EXEC = 52,TR_ANON_SEGKP = 53,TR_SAMPLE_REF = 54,TR_SAMPLE_MOD = 55,TR_SAMPLE_WS_START = 56,TR_SAMPLE_WS_END = 57,TR_KAS_INFO = 58,TR_AS_INFO = 59,TR_SEG_INFO = 60,TR_PAGE_RENAME = 61,TR_SWAP_RENAME = 62,TR_PROC_EXEC = 0,TR_PROC_EXIT = 1,TR_PROC_FORK = 2,TR_EXECMAP_PREREAD = 3,TR_EXECMAP_NO_PREREAD = 4,TR_SWAPIN = 0,TR_SWAPOUT = 1,TR_RUNIN = 2,TR_RUNOUT = 3,TR_CHOOSE_SWAPOUT = 4,TR_CHOOSE_SWAPIN = 5,TR_SOFTSWAP = 6,TR_HARDSWAP = 7,TR_DESPERATE = 8,TR_HIGH_DEFICIT = 9,TR_SWAPIN_VALUES = 10,TR_UNLOAD = 11,TR_SWAPOUT_LWP = 12,TR_SWAPQ_LWP = 13,TR_SWAPQ_PROC = 14,TR_RW_ENTER_RD_START = 0,TR_RW_ENTER_RD_END = 1,TR_RW_ENTER_WR_START = 2,TR_RW_ENTER_WR_END = 3,TR_RW_EXIT_START = 4,TR_RW_EXIT_END = 5,TR_BCOPY_START = 0,TR_KCOPY_START = 1,TR_PGCOPY_START = 2,TR_COPYOUT_START = 3,TR_COPYIN_START = 4,TR_COPY_END = 5,TR_COPY_FAULT = 6,TR_COPYOUT_FAULT = 7,TR_COPYIN_FAULT = 8,TR_COPYIN_NOERR_START = 9,TR_COPYOUT_NOERR_START = 10,TR_KMEM_ALLOC_START = 0,TR_KMEM_ALLOC_END = 1,TR_KMEM_ZALLOC_START = 2,TR_KMEM_ZALLOC_END = 3,TR_KMEM_FREE_START = 4,TR_KMEM_FREE_END = 5,TR_KMEM_CACHE_ALLOC_START = 12,TR_KMEM_CACHE_ALLOC_END = 13,TR_KMEM_CACHE_FREE_START = 14,TR_KMEM_CACHE_FREE_END = 15,TR_KMEM_SLAB_CREATE_START = 16,TR_KMEM_SLAB_CREATE_END = 17,TR_KMEM_SLAB_DESTROY_START = 18,TR_KMEM_SLAB_DESTROY_END = 19,TR_KMEM_GETPAGES_START = 20,TR_KMEM_GETPAGES_END = 21,TR_KMEM_FREEPAGES_START = 22,TR_KMEM_FREEPAGES_END = 23,TR_KMEM_ASYNC_DISPATCH_START = 24,TR_KMEM_ASYNC_DISPATCH_END = 25,TR_KMEM_ASYNC_SERVICE_START = 26,TR_KMEM_ASYNC_SERVICE_END = 27,TR_KMEM_HASH_RESCALE_START = 28,TR_KMEM_HASH_RESCALE_END = 29,TR_STROPEN = 0,TR_STRCLOSE = 1,TR_STRCLEAN = 2,TR_STRREAD_ENTER = 3,TR_STRREAD_WAIT = 4,TR_STRREAD_DONE = 5,TR_STRREAD_AWAKE = 6,TR_STRRPUT_ENTER = 7,TR_STRRPUT_PROTERR = 8,TR_STRRPUT_WAKE = 9,TR_STRRPUT_WAKE2 = 10,TR_STRWSRV = 11,TR_IOCTL_ENTER = 12,TR_I_CANT_FIND = 13,TR_I_PUSH = 14,TR_I_POP = 15,TR_I_LINK = 16,TR_STPDOWN = 17,TR_I_UNLINK = 18,TR_STRDOIOCTL = 19,TR_STRDOIOCTL_WAIT = 20,TR_STRDOIOCTL_PUT = 21,TR_STRDOIOCTL_WAIT2 = 22,TR_STRDOIOCTL_ACK = 23,TR_STRSENDSIG = 24,TR_QATTACH_FLAGS = 25,TR_STRTIME = 26,TR_STR2TIME = 27,TR_STR3TIME = 28,TR_STRWAITQ_TIME = 31,TR_STRWAITQ_WAIT2 = 32,TR_STRWAITQ_INTR2 = 33,TR_STRWAITQ_WAKE2 = 34,TR_QRUN_START = 35,TR_QRUN_DONE = 36,TR_DQ_SERVICE = 37,TR_RMV_QP = 38,TR_QRUNSERVICE_START = 39,TR_BACKGROUND_DQ = 40,TR_BACKGROUND_DONE = 41,TR_SENDSIG = 42,TR_INSERTQ = 43,TR_REMOVEQ = 44,TR_DRAIN_SYNCQ_PUT = 45,TR_FILL_SYNCQ = 46,TR_CANPUT_IN = 47,TR_CANPUT_OUT = 48,TR_BCANPUT_IN = 49,TR_BCANPUT_OUT = 50,TR_STRWRITE_IN = 51,TR_STRWRITE_OUT = 52,TR_STRWRITE_WAIT = 53,TR_STRWRITE_WAKE = 54,TR_STRWRITE_PUT = 55,TR_STRWRITE_RESID = 56,TR_STRPUTMSG_IN = 57,TR_STRPUTMSG_WAIT = 58,TR_STRPUTMSG_WAKE = 59,TR_STRPUTMSG_OUT = 60,TR_QENABLE = 61,TR_QRUNFLAG = 62,TR_RUNQUEUES = 63,TR_QRUN_DQ = 64,TR_QRUNSERVICE_END = 65,TR_BACKGROUND_AWAKE = 66,TR_QRUN_LEAVES = 67,TR_PUT_START = 68,TR_PUT_END = 69,TR_PUTNEXT_START = 70,TR_PUTNEXT_END = 71,TR_DRAIN_SYNCQ_START = 72,TR_DRAIN_SYNCQ_END = 73,TR_STRGETMSG_ENTER = 74,TR_STRGETMSG_WAIT = 75,TR_STRGETMSG_DONE = 76,TR_STRGETMSG_AWAKE = 77,TR_KSTRGETMSG_ENTER = 78,TR_KSTRGETMSG_WAIT = 79,TR_KSTRGETMSG_DONE = 80,TR_KSTRGETMSG_AWAKE = 81,TR_KSTRPUTMSG_IN = 82,TR_KSTRPUTMSG_WAIT = 83,TR_KSTRPUTMSG_WAKE = 84,TR_KSTRPUTMSG_OUT = 85,TR_CANPUTNEXT_IN = 86,TR_CANPUTNEXT_OUT = 87,TR_MI_TIMER_RSRV_IN = 0,TR_MI_TIMER_RSRV_OUT = 1,TR_MI_TIMER_FIRE = 2,TR_MCOPYMSG = 3,TR_SOCKMOD_RPUT_IN = 0,TR_SOCKMOD_RPUT_OUT = 1,TR_SOCKMOD_WPUT_IN = 2,TR_SOCKMOD_WPUT_OUT = 3,TR_SOCKMOD_RSRV_IN = 4,TR_SOCKMOD_RSRV_OUT = 5,TR_SOCKMOD_WSRV_IN = 6,TR_SOCKMOD_WSRV_OUT = 7,TR_TCP_OPEN = 0,TR_TCP_CLOSE = 1,TR_TCP_RPUT_IN = 2,TR_TCP_RPUT_OUT = 3,TR_TCP_WPUT_IN = 4,TR_TCP_WPUT_OUT = 5,TR_TCP_RSRV_IN = 6,TR_TCP_RSRV_OUT = 7,TR_TCP_WSRV_IN = 8,TR_TCP_WSRV_OUT = 9,TR_TCP_WPUT_SLOW_IN = 10,TR_TCP_WPUT_SLOW_OUT = 11,TR_TCP_RPUT_SLOW_IN = 12,TR_TCP_RPUT_SLOW_OUT = 13,TR_UDP_OPEN = 0,TR_UDP_CLOSE = 1,TR_UDP_RPUT_START = 2,TR_UDP_RPUT_END = 3,TR_UDP_WPUT_START = 4,TR_UDP_WPUT_END = 5,TR_UDP_WPUT_OTHER_START = 6,TR_UDP_WPUT_OTHER_END = 7,TR_IP_OPEN = 0,TR_IP_CLOSE = 1,TR_IP_RPUT_START = 2,TR_IP_RPUT_END = 3,TR_IP_WPUT_START = 4,TR_IP_WPUT_END = 5,TR_IP_WSRV_START = 6,TR_IP_WSRV_END = 7,TR_IP_LRPUT_START = 8,TR_IP_LRPUT_END = 9,TR_IP_LWPUT_START = 10,TR_IP_LWPUT_END = 11,TR_IP_RPUT_LOCL_START = 12,TR_IP_RPUT_LOCL_END = 13,TR_IP_RPUT_LOCL_ERR = 14,TR_IP_RSRV_START = 15,TR_IP_RSRV_END = 16,TR_IP_CKSUM_START = 17,TR_IP_CKSUM_END = 18,TR_IP_CKSUM_COPY_START = 19,TR_IP_CKSUM_COPY_END = 20,TR_IP_WPUT_IRE_START = 21,TR_IP_WPUT_IRE_END = 22,TR_IP_WPUT_FRAG_START = 23,TR_IP_WPUT_FRAG_END = 24,TR_IP_WPUT_LOCAL_START = 25,TR_IP_WPUT_LOCAL_END = 26,TR_ARP_OPEN = 0,TR_ARP_CLOSE = 1,TR_ARP_RPUT_START = 2,TR_ARP_RPUT_END = 3,TR_ARP_WPUT_START = 4,TR_ARP_WPUT_END = 5,TR_ARP_WSRV_START = 6,TR_ARP_WSRV_END = 7,TR_LE_OPEN = 0,TR_LE_CLOSE = 1,TR_LE_WPUT_START = 2,TR_LE_WPUT_END = 3,TR_LE_WSRV_START = 4,TR_LE_WSRV_END = 5,TR_LE_START_START = 6,TR_LE_START_END = 7,TR_LE_INTR_START = 8,TR_LE_INTR_END = 9,TR_LE_READ_START = 10,TR_LE_READ_END = 11,TR_LE_SENDUP_START = 12,TR_LE_SENDUP_END = 13,TR_LE_ADDUDIND_START = 14,TR_LE_ADDUDIND_END = 15,TR_LE_GETBUF_START = 16,TR_LE_GETBUF_END = 17,TR_LE_FREEBUF_START = 18,TR_LE_FREEBUF_END = 19,TR_LE_PROTO_START = 20,TR_LE_PROTO_END = 21,TR_LE_INIT_START = 22,TR_LE_INIT_END = 23,TR_LE_PROTO_IN = 24,TR_LE_PROTO_OUT = 25,TR_QE_OPEN = 0,TR_QE_CLOSE = 1,TR_QE_WPUT_START = 2,TR_QE_WPUT_END = 3,TR_QE_WSRV_START = 4,TR_QE_WSRV_END = 5,TR_QE_START_START = 6,TR_QE_START_END = 7,TR_QE_INTR_START = 8,TR_QE_INTR_END = 9,TR_QE_READ_START = 10,TR_QE_READ_END = 11,TR_QE_SENDUP_START = 12,TR_QE_SENDUP_END = 13,TR_QE_ADDUDIND_START = 14,TR_QE_ADDUDIND_END = 15,TR_QE_GETBUF_START = 16,TR_QE_GETBUF_END = 17,TR_QE_FREEBUF_START = 18,TR_QE_FREEBUF_END = 19,TR_QE_PROTO_START = 20,TR_QE_PROTO_END = 21,TR_QE_INIT_START = 22,TR_QE_INIT_END = 23,TR_QE_PROTO_IN = 24,TR_QE_PROTO_OUT = 25,TR_BE_OPEN = 0,TR_BE_CLOSE = 1,TR_BE_WPUT_START = 2,TR_BE_WPUT_END = 3,TR_BE_WSRV_START = 4,TR_BE_WSRV_END = 5,TR_BE_START_START = 6,TR_BE_START_END = 7,TR_BE_INTR_START = 8,TR_BE_INTR_END = 9,TR_BE_READ_START = 10,TR_BE_READ_END = 11,TR_BE_SENDUP_START = 12,TR_BE_SENDUP_END = 13,TR_BE_ADDUDIND_START = 14,TR_BE_ADDUDIND_END = 15,TR_BE_GETBUF_START = 16,TR_BE_GETBUF_END = 17,TR_BE_FREEBUF_START = 18,TR_BE_FREEBUF_END = 19,TR_BE_PROTO_START = 20,TR_BE_PROTO_END = 21,TR_BE_INIT_START = 22,TR_BE_INIT_END = 23,TR_BE_PROTO_IN = 24,TR_BE_PROTO_OUT = 25,TR_AE_OPEN = 0,TR_AE_CLOSE = 1,TR_AE_WPUT_START = 2,TR_AE_WPUT_END = 3,TR_AE_WSRV_START = 4,TR_AE_WSRV_END = 5,TR_AE_START_START = 6,TR_AE_START_END = 7,TR_AE_INTR_START = 8,TR_AE_INTR_END = 9,TR_AE_READ_START = 10,TR_AE_READ_END = 11,TR_AE_SENDUP_START = 12,TR_AE_SENDUP_END = 13,TR_AE_ADDUDIND_START = 14,TR_AE_ADDUDIND_END = 15,TR_AE_GETBUF_START = 16,TR_AE_GETBUF_END = 17,TR_AE_FREEBUF_START = 18,TR_AE_FREEBUF_END = 19,TR_AE_PROTO_START = 20,TR_AE_PROTO_END = 21,TR_AE_INIT_START = 22,TR_AE_INIT_END = 23,TR_AE_PROTO_IN = 24,TR_AE_PROTO_OUT = 25,TR_PHYSIO_START = 0,TR_PHYSIO_LOCK_START = 1,TR_PHYSIO_LOCK_END = 2,TR_PHYSIO_UNLOCK_START = 3,TR_PHYSIO_UNLOCK_END = 4,TR_PHYSIO_GETBUF_START = 5,TR_PHYSIO_GETBUF_END = 6,TR_PHYSIO_END = 7,TR_PHYSIO_AS_LOCK_START = 8,TR_PHYSIO_SEG_LOCK_START = 9,TR_PHYSIO_SEG_LOCK_END = 10,TR_PHYSIO_AS_FAULT_START = 11,TR_PHYSIO_AS_LOCK_END = 12,TR_PHYSIO_AS_UNLOCK_START = 13,TR_PHYSIO_SEG_UNLOCK_START = 14,TR_PHYSIO_AS_UNLOCK_END = 15,TR_PHYSIO_SEGVN_START = 16,TR_PHYSIO_SEGVN_UNLOCK_END = 17,TR_PHYSIO_SEGVN_HIT_END = 18,TR_PHYSIO_SEGVN_FILL_END = 19,TR_PHYSIO_SEGVN_MISS_END = 20,TR_META_WRITE_START = 0,TR_META_WRITE_END = 1,TR_META_READ_START = 2,TR_META_READ_END = 3,TR_META_STRATEGY_START = 4,TR_META_STRATEGY_END = 5,TR_STRIPE_STRATEGY_START = 7,TR_STRIPE_STRATEGY_END = 8,TR_STRIPE_STRATEGY_CHKBUF_START = 9,TR_STRIPE_STRATEGY_CHKBUF_END = 10,TR_STRIPE_STRATEGY_BPMAPIN_START = 11,TR_STRIPE_STRATEGY_BPMAPIN_END = 12,TR_STRIPE_STRATEGY_ALLOC_START = 13,TR_STRIPE_STRATEGY_ALLOC_END = 14,TR_STRIPE_STRATEGY_MAPBUF_START = 15,TR_STRIPE_STRATEGY_MAPBUF_END = 16,TR_STRIPE_STRATEGY_STRIPE_START = 17,TR_STRIPE_STRATEGY_STRIPE_END = 18,TR_STRIPE_STRATEGY_CALLDRV_START = 19,TR_STRIPE_STRATEGY_CALLDRV_END = 20,TR_IPI_START = 0,TR_IPI_RESET_SLAVE = 1,TR_IPI_RESET_CHAN = 2,TR_IPI_RESET_BOARD = 3,TR_IPI_TEST_BOARD = 4,TR_IPI_GET_XFER_MODE = 5,TR_IPI_SET_XFER_MODE = 6,TR_IPI_INTR_1 = 7,TR_IPI_INTR_2 = 8,TR_IPI_POLL_1 = 9,TR_IPI_POLL_2 = 10,TR_IPI_RETRY = 11,TR_IPI_IS_CMD = 12,TR_IPI_INTR_OK = 13,TR_IPI_INTR_RESP = 14,TR_IPI_INTR_ERR = 15,TR_PID_ON = 0,TR_PID_OFF = 1,TR_GROUP_ON = 2,TR_GROUP_OFF = 3,TR_CONTROL_TTY = 4,TR_ACTIVE_CHAIN = 5,TR_S5_SYNCIP_START = 0,TR_S5_SYNCIP_END = 1,TR_S5_OPEN = 2,TR_S5_CLOSE = 3,TR_S5_READ_START = 4,TR_S5_READ_END = 5,TR_S5_WRITE_START = 6,TR_S5_WRITE_END = 7,TR_S5_RWIP_START = 8,TR_S5_RWIP_END = 9,TR_S5_GETATTR_START = 10,TR_S5_GETATTR_END = 11,TR_S5_SETATTR_START = 12,TR_S5_SETATTR_END = 13,TR_S5_ACCESS_START = 14,TR_S5_ACCESS_END = 15,TR_S5_READLINK_START = 16,TR_S5_READLINK_END = 17,TR_S5_FSYNC_START = 18,TR_S5_FSYNC_END = 19,TR_S5_LOOKUP_START = 20,TR_S5_LOOKUP_END = 21,TR_S5_CREATE_START = 22,TR_S5_CREATE_END = 23,TR_S5_REMOVE_START = 24,TR_S5_REMOVE_END = 25,TR_S5_LINK_START = 26,TR_S5_LINK_END = 27,TR_S5_RENAME_START = 28,TR_S5_RENAME_END = 29,TR_S5_MKDIR_START = 30,TR_S5_MKDIR_END = 31,TR_S5_RMDIR_START = 32,TR_S5_RMDIR_END = 33,TR_S5_READDIR_START = 34,TR_S5_READDIR_END = 35,TR_S5_SYMLINK_START = 36,TR_S5_SYMLINK_END = 37,TR_S5_GETPAGE_START = 38,TR_S5_GETPAGE_END = 39,TR_S5_PUTPAGE_START = 40,TR_S5_PUTPAGE_END = 41,TR_S5_PUTAPAGE_START = 42,TR_S5_PUTAPAGE_END = 43,TR_S5_STARTIO_START = 44,TR_S5_STARTIO_END = 45,TR_S5_MAP_START = 46,TR_S5_MAP_END = 47,TR_ESPSVC_ACTION_CALL = 0,TR_ESPSVC_START = 1,TR_ESPSVC_END = 2,TR_ESP_CALLBACK_START = 3,TR_ESP_CALLBACK_END = 4,TR_ESP_DOPOLL_START = 5,TR_ESP_DOPOLL_END = 6,TR_ESP_FINISH_START = 7,TR_ESP_FINISH_END = 8,TR_ESP_FINISH_SELECT_START = 9,TR_ESP_FINISH_SELECT_RESET1_END = 10,TR_ESP_FINISH_SELECT_RETURN1_END = 11,TR_ESP_FINISH_SELECT_RETURN2_END = 12,TR_ESP_FINISH_SELECT_FINISH_END = 13,TR_ESP_FINISH_SELECT_ACTION1_END = 14,TR_ESP_FINISH_SELECT_ACTION2_END = 15,TR_ESP_FINISH_SELECT_RESET2_END = 16,TR_ESP_FINISH_SELECT_RESET3_END = 17,TR_ESP_FINISH_SELECT_ACTION3_END = 18,TR_ESP_HANDLE_CLEARING_START = 19,TR_ESP_HANDLE_CLEARING_END = 20,TR_ESP_HANDLE_CLEARING_FINRST_END = 21,TR_ESP_HANDLE_CLEARING_RETURN1_END = 22,TR_ESP_HANDLE_CLEARING_ABORT_END = 23,TR_ESP_HANDLE_CLEARING_LINKED_CMD_END = 24,TR_ESP_HANDLE_CLEARING_RETURN2_END = 25,TR_ESP_HANDLE_CLEARING_RETURN3_END = 26,TR_ESP_HANDLE_CMD_START_START = 27,TR_ESP_HANDLE_CMD_START_END = 28,TR_ESP_HANDLE_CMD_START_ABORT_CMD_END = 29,TR_ESP_HANDLE_CMD_DONE_START = 30,TR_ESP_HANDLE_CMD_DONE_END = 31,TR_ESP_HANDLE_CMD_DONE_ABORT1_END = 32,TR_ESP_HANDLE_CMD_DONE_ABORT2_END = 33,TR_ESP_HANDLE_C_CMPLT_START = 34,TR_ESP_HANDLE_C_CMPLT_FINRST_END = 35,TR_ESP_HANDLE_C_CMPLT_RETURN1_END = 36,TR_ESP_HANDLE_C_CMPLT_ACTION1_END = 37,TR_ESP_HANDLE_C_CMPLT_ACTION2_END = 38,TR_ESP_HANDLE_C_CMPLT_ACTION3_END = 39,TR_ESP_HANDLE_C_CMPLT_ACTION4_END = 40,TR_ESP_HANDLE_C_CMPLT_RETURN2_END = 41,TR_ESP_HANDLE_C_CMPLT_ACTION5_END = 42,TR_ESP_HANDLE_C_CMPLT_PHASEMANAGE_END = 43,TR_ESP_HANDLE_DATA_START = 44,TR_ESP_HANDLE_DATA_END = 45,TR_ESP_HANDLE_DATA_ABORT1_END = 46,TR_ESP_HANDLE_DATA_ABORT2_END = 47,TR_ESP_HANDLE_DATA_ABORT3_END = 48,TR_ESP_HANDLE_DATA_DONE_START = 49,TR_ESP_HANDLE_DATA_DONE_END = 50,TR_ESP_HANDLE_DATA_DONE_RESET_END = 51,TR_ESP_HANDLE_DATA_DONE_PHASEMANAGE_END = 52,TR_ESP_HANDLE_DATA_DONE_ACTION1_END = 53,TR_ESP_HANDLE_DATA_DONE_ACTION2_END = 54,TR_ESP_HANDLE_MORE_MSGIN_START = 55,TR_ESP_HANDLE_MORE_MSGIN_RETURN1_END = 56,TR_ESP_HANDLE_MORE_MSGIN_RETURN2_END = 57,TR_ESP_HANDLE_MSG_IN_START = 58,TR_ESP_HANDLE_MSG_IN_END = 59,TR_ESP_HANDLE_MSG_IN_DONE_START = 60,TR_ESP_HANDLE_MSG_IN_DONE_FINRST_END = 61,TR_ESP_HANDLE_MSG_IN_DONE_RETURN1_END = 62,TR_ESP_HANDLE_MSG_IN_DONE_PHASEMANAGE_END = 63,TR_ESP_HANDLE_MSG_IN_DONE_SNDMSG_END = 64,TR_ESP_HANDLE_MSG_IN_DONE_ACTION_END = 65,TR_ESP_HANDLE_MSG_IN_DONE_RETURN2_END = 66,TR_ESP_HANDLE_MSG_OUT_START = 67,TR_ESP_HANDLE_MSG_OUT_END = 68,TR_ESP_HANDLE_MSG_OUT_PHASEMANAGE_END = 69,TR_ESP_HANDLE_MSG_OUT_DONE_START = 70,TR_ESP_HANDLE_MSG_OUT_DONE_END = 71,TR_ESP_HANDLE_MSG_OUT_DONE_FINISH_END = 72,TR_ESP_HANDLE_MSG_OUT_DONE_PHASEMANAGE_END = 73,TR_ESP_HANDLE_SELECTION_START = 74,TR_ESP_HANDLE_SELECTION_END = 75,TR_ESP_HANDLE_UNKNOWN_START = 76,TR_ESP_HANDLE_UNKNOWN_END = 77,TR_ESP_HANDLE_UNKNOWN_INT_DISCON_END = 78,TR_ESP_HANDLE_UNKNOWN_PHASE_DATA_END = 79,TR_ESP_HANDLE_UNKNOWN_PHASE_MSG_OUT_END = 80,TR_ESP_HANDLE_UNKNOWN_PHASE_MSG_IN_END = 81,TR_ESP_HANDLE_UNKNOWN_PHASE_STATUS_END = 82,TR_ESP_HANDLE_UNKNOWN_PHASE_CMD_END = 83,TR_ESP_HANDLE_UNKNOWN_RESET_END = 84,TR_ESP_HDATAD_START = 85,TR_ESP_HDATAD_END = 86,TR_ESP_HDATA_START = 87,TR_ESP_HDATA_END = 88,TR_ESP_ISTART_START = 89,TR_ESP_ISTART_END = 90,TR_ESP_PHASEMANAGE_CALL = 91,TR_ESP_PHASEMANAGE_START = 92,TR_ESP_PHASEMANAGE_END = 93,TR_ESP_POLL_START = 94,TR_ESP_POLL_END = 95,TR_ESP_RECONNECT_START = 96,TR_ESP_RECONNECT_F1_END = 97,TR_ESP_RECONNECT_RETURN1_END = 98,TR_ESP_RECONNECT_F2_END = 99,TR_ESP_RECONNECT_PHASEMANAGE_END = 100,TR_ESP_RECONNECT_F3_END = 101,TR_ESP_RECONNECT_RESET1_END = 102,TR_ESP_RECONNECT_RESET2_END = 103,TR_ESP_RECONNECT_RESET3_END = 104,TR_ESP_RECONNECT_SEARCH_END = 105,TR_ESP_RECONNECT_RESET4_END = 106,TR_ESP_RECONNECT_RETURN2_END = 107,TR_ESP_RECONNECT_RESET5_END = 108,TR_ESP_RUNPOLL_START = 109,TR_ESP_RUNPOLL_END = 110,TR_ESP_SCSI_IMPL_PKTALLOC_START = 111,TR_ESP_SCSI_IMPL_PKTALLOC_END = 112,TR_ESP_SCSI_IMPL_PKTFREE_START = 113,TR_ESP_SCSI_IMPL_PKTFREE_END = 114,TR_ESP_STARTCMD_START = 115,TR_ESP_STARTCMD_END = 116,TR_ESP_STARTCMD_RE_SELECTION_END = 117,TR_ESP_STARTCMD_ALLOC_TAG1_END = 118,TR_ESP_STARTCMD_ALLOC_TAG2_END = 119,TR_ESP_STARTCMD_PREEMPT_CALL = 120,TR_ESP_START_START = 121,TR_ESP_START_END = 122,TR_ESP_START_PREPARE_PKT_END = 123,TR_ESP_WATCH_START = 124,TR_ESP_WATCH_END = 125,TR_MAKE_SD_CMD_START = 126,TR_MAKE_SD_CMD_END = 127,TR_MAKE_SD_CMD_NO_PKT_ALLOCATED1_END = 128,TR_MAKE_SD_CMD_NO_PKT_ALLOCATED2_END = 129,TR_MAKE_SD_CMD_G0_START = 130,TR_MAKE_SD_CMD_G0_END = 131,TR_MAKE_SD_CMD_G0_SBUF_START = 132,TR_MAKE_SD_CMD_G0_SBUF_END = 133,TR_MAKE_SD_CMD_G1_START = 134,TR_MAKE_SD_CMD_G1_END = 135,TR_MAKE_SD_CMD_INIT_PKT_START = 136,TR_MAKE_SD_CMD_INIT_PKT_END = 137,TR_MAKE_SD_CMD_INIT_PKT_SBUF_START = 138,TR_MAKE_SD_CMD_INIT_PKT_SBUF_END = 139,TR_MAKE_SD_CMD_RA_START = 140,TR_MAKE_SD_CMD_RA_END = 141,TR_SDDONE_BIODONE_CALL = 142,TR_SDDONE_START = 143,TR_SDDONE_END = 144,TR_SDINTR_START = 145,TR_SDINTR_END = 146,TR_SDINTR_COMMAND_DONE_END = 147,TR_SDINTR_QUE_COMMAND_END = 148,TR_SDINTR_QUE_FAILED_END = 149,TR_SDRUNOUT_START = 150,TR_SDRUNOUT_END = 151,TR_SDSTART_START = 152,TR_SDSTART_END = 153,TR_SDSTART_NO_WORK_END = 154,TR_SDSTART_NO_RESOURCES_END = 155,TR_SDSTRATEGY_START = 156,TR_SDSTRATEGY_END = 157,TR_SDSTRATEGY_DISKSORT_START = 158,TR_SDSTRATEGY_DISKSORT_END = 159,TR_SDSTRATEGY_SDSTART_START = 160,TR_SDSTRATEGY_SDSTART_END = 161,TR_SD_CHECK_ERROR_START = 162,TR_SD_CHECK_ERROR_QUE_COMMAND_END = 163,TR_SD_CHECK_ERROR_END = 164,TR__ESP_START_START = 165,TR__ESP_START_END = 166,TR_ESP_INIT_CMD_START = 167,TR_ESP_INIT_CMD_END = 168,TR_ESP_EMPTY_STARTQ_START = 169,TR_ESP_EMPTY_STARTQ_END = 170,TR_SDSTRATEGY_SMALL_WINDOW_START = 171,TR_SDSTRATEGY_SMALL_WINDOW_END = 172,TR_SDSTART_SMALL_WINDOW_START = 173,TR_SDSTART_SMALL_WINDOW_END = 174,TR_ESP_USTART_START = 175,TR_ESP_USTART_END = 176,TR_ESP_USTART_NOT_FOUND_END = 177,TR_ESP_USTART_DEFAULT_END = 178,TR_ESP_PREPARE_PKT_START = 179,TR_ESP_PREPARE_PKT_TRAN_BADPKT_END = 180,TR_ESP_PREPARE_PKT_TRAN_ACCEPT_END = 181,TR_ESP_ALLOC_TAG_START = 182,TR_ESP_ALLOC_TAG_END = 183,TR_ESP_CALL_PKT_COMP_START = 184,TR_ESP_CALL_PKT_COMP_END = 185,TR_ESP_CALL_PKT_COMP_RETURN1_END = 186,TR_ESP_CALL_PKT_COMP_RETURN2_END = 187,TR_ESP_POLL_LOOP_START = 188,TR_ESP_POLL_LOOP_END = 189,TR_ESP_POLL_SUN4D_START = 190,TR_ESP_POLL_SUN4D_END = 191,TR_ESP_SCSI_IMPL_DMAFREE_START = 192,TR_ESP_SCSI_IMPL_DMAFREE_END = 193,TR_SDWRITE_START = 194,TR_SDWRITE_END = 195,TR_SDREAD_START = 196,TR_SDREAD_END = 197,TR_ISP_SCSI_GETCAP_START = 1,TR_ISP_SCSI_GETCAP_END = 2,TR_ISP_SCSI_SETCAP_START = 3,TR_ISP_SCSI_SETCAP_END = 4,TR_ISP_SCAN_TIMEOUT_START = 5,TR_ISP_SCAN_TIMEOUT_END = 6,TR_ISP_SCSI_START_START = 7,TR_ISP_SCSI_START_DMA_START = 8,TR_ISP_SCSI_START_DMA_END = 9,TR_ISP_SCSI_START_END = 10,TR_ISP_I_START_CMD_START = 11,TR_ISP_I_START_CMD_Q_FULL_END = 12,TR_ISP_I_START_CMD_SLOT_ALLOC_START = 13,TR_ISP_I_START_CMD_SLOT_ALLOC_END = 14,TR_ISP_I_START_CMD_END = 15,TR_ISP_I_RUN_POLLED_CMD_START = 16,TR_ISP_I_RUN_POLLED_CMD_END = 17,TR_ISP_INTR_START = 18,TR_ISP_INTR_NO_INTR_END = 19,TR_ISP_INTR_EVENT_END = 20,TR_ISP_INTR_Q_START = 21,TR_ISP_INTR_INVALID_END = 22,TR_ISP_INTR_PKT_START = 23,TR_ISP_INTR_PKT_END = 24,TR_ISP_INTR_Q_END = 25,TR_ISP_INTR_END = 26,TR_ISP_I_FLAG_EVENT_START = 27,TR_ISP_I_FLAG_EVENT_IGNORE_END = 28,TR_ISP_I_FLAG_EVENT_END = 29,TR_ISP_I_EVENT_START = 30,TR_ISP_I_EVENT_RETURN_END = 31,TR_ISP_I_EVENT_END = 32,TR_ISP_I_ASYNCH_EVENT_START = 33,TR_ISP_I_ASYNCH_EVENT_END = 34,TR_ISP_I_CMD_EVENT_START = 35,TR_ISP_I_CMD_EVENT_END = 36,TR_ISP_I_RESPONSE_ERROR_START = 37,TR_ISP_I_RESPONSE_ERROR_END = 38,TR_ISP_I_SEND_CMD_START = 39,TR_ISP_I_SEND_CMD_END = 40,TR_ISP_I_CALLBACK_START = 41,TR_ISP_I_CALLBACK_END = 42,TR_ISP_I_WATCH_START = 43,TR_ISP_I_WATCH_END = 44,TR_ISP_I_TIMEOUT_START = 45,TR_ISP_I_TIMEOUT_END = 46,TR_ISP_I_QFLUSH_START = 47,TR_ISP_I_QFLUSH_END = 48,TR_ISP_I_SET_MARKER_START = 49,TR_ISP_I_SET_MARKER_END = 50,TR_ISP_SCSI_ABORT_START = 51,TR_ISP_SCSI_ABORT_FALSE_END = 52,TR_ISP_SCSI_ABORT_END = 53,TR_ISP_SCSI_RESET_START = 54,TR_ISP_SCSI_RESET_FALSE_END = 55,TR_ISP_SCSI_RESET_END = 56,TR_ISP_I_RESET_INTERFACE_START = 57,TR_ISP_I_RESET_INTERFACE_END = 58,TR_ISP_I_CALL_PKT_COMP_START = 59,TR_ISP_I_CALL_PKT_COMP_END = 60,TR_ISP_I_EMPTY_WAITQ_START = 61,TR_ISP_I_EMPTY_WAITQ_END = 62,TR_ISP_I_INIT_CMD_START = 63,TR_ISP_SCSI_START_BIG_CDB = 64,TR_ISP_I_INIT_CMD_END = 65,TR_ISP_I_START_CMD_AFTER_SYNC = 66,TR_ISP_INTR_LOOP_START = 67,TR_ISP_INTR_LOOP_END = 68,TR_ISP_INTR_ASYNC_END = 69,TR_ISP_INTR_MBOX_END = 70,TR_ISP_INTR_NO_RESP_END = 71,TR_ISP_INTR_AGAIN = 72,TR_ISP_I_MBOX_CMD_COMPLETE_START = 74,TR_ISP_I_MBOX_CMD_COMPLETE_END = 75,TR_ISP_I_MBOX_CMD_START_START = 76,TR_ISP_I_MBOX_CMD_START_END = 77,TR_ISP_SCSI_PKTALLOC_START = 78,TR_ISP_SCSI_PKTALLOC_END = 79,TR_ISP_SCSI_PKTFREE_START = 80,TR_ISP_SCSI_PKTFREE_DONE = 81,TR_ISP_SCSI_PKTFREE_END = 82,TR_ISP_SCSI_DMAGET_START = 83,TR_ISP_SCSI_DMAGET_ERROR_END = 84,TR_ISP_SCSI_DMAGET_END = 85,TR_ISP_SCSI_DMAFREE_START = 86,TR_ISP_SCSI_DMAFREE_END = 87,TR_ISP_I_RESET_INIT_CHIP_START = 88,TR_ISP_I_RESET_INIT_CHIP_END = 89,TR_FASSVC_ACTION_CALL = 1,TR_FASSVC_END = 2,TR_FASSVC_START = 3,TR_FAS_ALLOC_TAG_END = 4,TR_FAS_ALLOC_TAG_START = 5,TR_FAS_DOPOLL_END = 6,TR_FAS_DOPOLL_START = 7,TR_FAS_EMPTY_WAITQ_END = 8,TR_FAS_EMPTY_WAITQ_START = 9,TR_FAS_FINISH_END = 10,TR_FAS_FINISH_SELECT_ACTION3_END = 11,TR_FAS_FINISH_SELECT_FINISH_END = 12,TR_FAS_FINISH_SELECT_RESET1_END = 13,TR_FAS_FINISH_SELECT_RESET2_END = 14,TR_FAS_FINISH_SELECT_RESET3_END = 15,TR_FAS_FINISH_SELECT_START = 16,TR_FAS_FINISH_START = 17,TR_FAS_HANDLE_CLEARING_ABORT_END = 18,TR_FAS_HANDLE_CLEARING_END = 19,TR_FAS_HANDLE_CLEARING_RETURN1_END = 20,TR_FAS_HANDLE_CLEARING_RETURN3_END = 21,TR_FAS_HANDLE_CLEARING_START = 22,TR_FAS_HANDLE_CMD_DONE_ABORT1_END = 23,TR_FAS_HANDLE_CMD_DONE_END = 24,TR_FAS_HANDLE_CMD_DONE_START = 25,TR_FAS_HANDLE_CMD_START_END = 26,TR_FAS_HANDLE_CMD_START_START = 27,TR_FAS_HANDLE_C_CMPLT_ACTION1_END = 28,TR_FAS_HANDLE_C_CMPLT_ACTION2_END = 29,TR_FAS_HANDLE_C_CMPLT_ACTION3_END = 30,TR_FAS_HANDLE_C_CMPLT_ACTION4_END = 31,TR_FAS_HANDLE_C_CMPLT_ACTION5_END = 32,TR_FAS_HANDLE_C_CMPLT_RETURN1_END = 33,TR_FAS_HANDLE_C_CMPLT_START = 34,TR_FAS_HANDLE_DATA_ABORT1_END = 35,TR_FAS_HANDLE_DATA_ABORT2_END = 36,TR_FAS_HANDLE_DATA_DONE_ACTION2_END = 37,TR_FAS_HANDLE_DATA_DONE_PHASEMANAGE_END = 38,TR_FAS_HANDLE_DATA_DONE_RESET_END = 39,TR_FAS_HANDLE_DATA_DONE_START = 40,TR_FAS_HANDLE_DATA_END = 41,TR_FAS_HANDLE_DATA_START = 42,TR_FAS_HANDLE_MORE_MSGIN_RETURN2_END = 43,TR_FAS_HANDLE_MORE_MSGIN_START = 44,TR_FAS_HANDLE_MSG_IN_DONE_ACTION_END = 45,TR_FAS_HANDLE_MSG_IN_DONE_RETURN2_END = 46,TR_FAS_HANDLE_MSG_IN_DONE_SNDMSG_END = 47,TR_FAS_HANDLE_MSG_IN_DONE_START = 48,TR_FAS_HANDLE_MSG_IN_END = 49,TR_FAS_HANDLE_MSG_IN_START = 50,TR_FAS_HANDLE_MSG_OUT_DONE_END = 51,TR_FAS_HANDLE_MSG_OUT_DONE_PHASEMANAGE_END = 52,TR_FAS_HANDLE_MSG_OUT_DONE_START = 53,TR_FAS_HANDLE_MSG_OUT_END = 54,TR_FAS_HANDLE_MSG_OUT_PHASEMANAGE_END = 55,TR_FAS_HANDLE_MSG_OUT_START = 56,TR_FAS_HANDLE_UNKNOWN_INT_DISCON_END = 57,TR_FAS_HANDLE_UNKNOWN_RESET_END = 58,TR_FAS_HANDLE_UNKNOWN_START = 59,TR_FAS_ISTART_END = 60,TR_FAS_ISTART_START = 61,TR_FAS_PHASEMANAGE_CALL = 62,TR_FAS_PHASEMANAGE_END = 63,TR_FAS_PHASEMANAGE_START = 64,TR_FAS_POLL_END = 65,TR_FAS_POLL_START = 66,TR_FAS_PREPARE_PKT_TRAN_ACCEPT_END = 67,TR_FAS_PREPARE_PKT_TRAN_BADPKT_END = 68,TR_FAS_RECONNECT_F2_END = 69,TR_FAS_RECONNECT_RESET5_END = 70,TR_FAS_RECONNECT_RETURN2_END = 71,TR_FAS_RECONNECT_START = 72,TR_FAS_RUNPOLL_END = 73,TR_FAS_RUNPOLL_START = 74,TR_FAS_SCSI_IMPL_DMAFREE_END = 75,TR_FAS_SCSI_IMPL_DMAFREE_START = 76,TR_FAS_SCSI_IMPL_PKTALLOC_END = 77,TR_FAS_SCSI_IMPL_PKTALLOC_START = 78,TR_FAS_SCSI_IMPL_PKTFREE_END = 79,TR_FAS_SCSI_IMPL_PKTFREE_START = 80,TR_FAS_STARTCMD_END = 81,TR_FAS_STARTCMD_START = 82,TR_FAS_START_END = 83,TR_FAS_START_PREPARE_PKT_END = 84,TR_FAS_START_START = 85,TR_FAS_USTART_END = 86,TR_FAS_USTART_NOT_FOUND_END = 87,TR_FAS_USTART_START = 88,TR_FAS_WATCH_END = 89,TR_FAS_SCSI_IMPL_DMAGET_END = 90,TR_FAS_SCSI_IMPL_DMAGET_START = 91,TR__FAS_START_END = 92,TR__FAS_START_START = 93,TR_FAS_RECONNECT_RETURN1_END = 94,TR_FAS_RECONNECT_PHASEMANAGE_END = 95,TR_FAS_RECONNECT_F3_END = 96,TR_FAS_HANDLE_UNKNOWN_PHASE_DATA_END = 97,TR_FAS_HANDLE_UNKNOWN_PHASE_MSG_OUT_END = 98,TR_FAS_HANDLE_UNKNOWN_PHASE_MSG_IN_END = 99,TR_FAS_HANDLE_UNKNOWN_PHASE_STATUS_END = 100,TR_FAS_HANDLE_UNKNOWN_PHASE_CMD_END = 101,TR_FAS_HANDLE_CLEARING_FINRST_END = 102,TR_FAS_HANDLE_CLEARING_RETURN2_END = 103,TR_FAS_HANDLE_DATA_DONE_ACTION1_END = 104,TR_FAS_HANDLE_C_CMPLT_FINRST_END = 105,TR_FAS_HANDLE_MORE_MSGIN_RETURN1_END = 106,TR_FAS_HANDLE_MSG_IN_DONE_FINRST_END = 107,TR_FAS_HANDLE_MSG_IN_DONE_RETURN1_END = 108,TR_FAS_HANDLE_MSG_IN_DONE_PHASEMANAGE_END = 109,TR_FAS_HANDLE_MSG_OUT_DONE_FINISH_END = 110,TR_FAS_EMPTY_CALLBACKQ_START = 111,TR_FAS_EMPTY_CALLBACKQ_END = 112,TR_FAS_CALL_PKT_COMP_START = 113,TR_FAS_CALL_PKT_COMP_END = 114,TR_LWP_CREATE_START = 0,TR_LWP_CREATE_END = 1,TR_LWP_EXIT_START = 2,TR_LWP_EXIT_END = 3,TR_LWP_SUSPEND_START = 4,TR_LWP_SUSPEND_END = 5,TR_LWP_CONTINUE_START = 6,TR_LWP_CONTINUE_END = 7,TR_LWP_CREATE_ASEGKP = 8,TR_LWP_CREATE_ATHRC = 9,TR_LWP_CREATE_ABZ = 10,TR_LWP_CONT_ASR = 11,TR_LWP_EXIT_OFFQ = 12,TR_SYS_LWP_CREATE_START = 0,TR_SYS_LWP_CREATE_END1 = 1,TR_SYS_LWP_CREATE_END2 = 2,TR_SYS_LWP_EXIT_START = 3,TR_SYS_LWP_EXIT_END = 4,TR_SYS_LWP_WAIT = 5,TR_SYS_LWP_SELF = 6,TR_SYS_LWP_SUSPEND_START = 7,TR_SYS_LWP_SUSPEND_END = 8,TR_SYS_LWP_CONTINUE_START = 9,TR_SYS_LWP_CONTINUE_END = 10,TR_SYS_LWP_MUTEX_LOCK = 11,TR_SYS_LWP_MUTEX_UNLOCK = 12,TR_SYS_LWP_COND_WAIT_START = 13,TR_SYS_LWP_COND_WAIT_END = 14,TR_SYS_LWP_COND_SIGNAL_START = 15,TR_SYS_LWP_COND_SIGNAL_END = 16,TR_SYS_LWP_COND_BROADCAST = 17,TR_SYS_LWP_KILL_START = 18,TR_SYS_LWP_KILL_END = 19,TR_SYS_LWP_SETPRIVATE = 20,TR_SYS_LWP_GETPRIVATE = 21,TR_SYS_LWP_ACOPYIN = 22,TR_SYS_LWP_ABCP = 23,TR_SYS_LWP_ALWPTOT = 24,TR_SYS_LWP_CONTINUE_AIDTOT = 25,TR_SYS_LWP_CR_WAIT = 26,TR_TIMEOUT = 0,TR_UNTIMEOUT = 1,TR_UNTIMEOUT_BOGUS_ID = 2,TR_UNTIMEOUT_EXECUTING = 3,TR_UNTIMEOUT_SELF = 4,TR_CALLOUT_START = 5,TR_CALLOUT_END = 6,TR_SPECFS_GETPAGE = 0,TR_SPECFS_GETAPAGE = 1,TR_SPECFS_PUTPAGE = 2,TR_SPECFS_PUTAPAGE = 3,TR_SPECFS_SEGMAP = 4,TR_SPECFS_OPEN = 5,TR_SPECFS_READ_START = 6,TR_SPECFS_READ_END = 7,TR_SPECFS_CDEV = 8,TR_SPECFS_WRITE_START = 9,TR_SPECFS_WRITE_END = 10,TR_TMPFS_LOOKUP = 0,TR_TMPFS_CREATE = 1,TR_TMPFS_REMOVE = 2,TR_TMPFS_RENAME = 3,TR_TMPFS_RWTMP_START = 4,TR_TMPFS_RWTMP_END = 5,TR_SWAPFS_OPEN = 0,TR_SWAPFS_CLOSE = 1,TR_SWAPFS_GETPAGE = 2,TR_SWAPFS_GETAPAGE = 3,TR_SWAPFS_PUTPAGE = 4,TR_SWAPFS_PUTAPAGE = 5,TR_UFS_SYNCIP_START = 0,TR_UFS_SYNCIP_END = 1,TR_UFS_OPEN = 2,TR_UFS_CLOSE = 4,TR_UFS_READ_START = 6,TR_UFS_READ_END = 7,TR_UFS_WRITE_START = 8,TR_UFS_WRITE_END = 9,TR_UFS_RWIP_START = 10,TR_UFS_RWIP_END = 11,TR_UFS_GETATTR_START = 12,TR_UFS_GETATTR_END = 13,TR_UFS_SETATTR_START = 14,TR_UFS_SETATTR_END = 15,TR_UFS_ACCESS_START = 16,TR_UFS_ACCESS_END = 17,TR_UFS_READLINK_START = 18,TR_UFS_READLINK_END = 19,TR_UFS_FSYNC_START = 20,TR_UFS_FSYNC_END = 21,TR_UFS_LOOKUP_START = 22,TR_UFS_LOOKUP_END = 23,TR_UFS_CREATE_START = 24,TR_UFS_CREATE_END = 25,TR_UFS_REMOVE_START = 26,TR_UFS_REMOVE_END = 27,TR_UFS_LINK_START = 28,TR_UFS_LINK_END = 29,TR_UFS_RENAME_START = 30,TR_UFS_RENAME_END = 31,TR_UFS_MKDIR_START = 32,TR_UFS_MKDIR_END = 33,TR_UFS_RMDIR_START = 34,TR_UFS_RMDIR_END = 35,TR_UFS_READDIR_START = 36,TR_UFS_READDIR_END = 37,TR_UFS_SYMLINK_START = 38,TR_UFS_SYMLINK_END = 39,TR_UFS_GETPAGE_START = 40,TR_UFS_GETPAGE_END = 41,TR_UFS_GETAPAGE_START = 42,TR_UFS_GETAPAGE_END = 43,TR_UFS_PUTPAGE_START = 44,TR_UFS_PUTPAGE_END = 45,TR_UFS_PUTAPAGE_START = 46,TR_UFS_PUTAPAGE_END = 47,TR_UFS_MAP_START = 48,TR_UFS_MAP_END = 49,TR_UFS_GETSECATTR_START = 50,TR_UFS_GETSECATTR_END = 51,TR_UFS_SETSECATTR_START = 52,TR_UFS_SETSECATTR_END = 53,TR_RFSCALL_START = 0,TR_RFSCALL_END = 1,TR_FHTOVP_START = 2,TR_FHTOVP_END = 3,TR_VOP_GETATTR_START = 100,TR_VOP_GETATTR_END = 101,TR_VOP_SETATTR_START = 102,TR_VOP_SETATTR_END = 103,TR_VOP_LOOKUP_START = 104,TR_VOP_LOOKUP_END = 105,TR_VOP_READLINK_START = 106,TR_VOP_READLINK_END = 107,TR_VOP_RWLOCK_START = 108,TR_VOP_RWLOCK_END = 109,TR_VOP_ACCESS_START = 110,TR_VOP_ACCESS_END = 111,TR_VOP_OPEN_START = 112,TR_VOP_OPEN_END = 113,TR_VOP_READ_START = 114,TR_VOP_READ_END = 115,TR_VOP_CLOSE_START = 116,TR_VOP_CLOSE_END = 117,TR_VOP_RWUNLOCK_START = 118,TR_VOP_RWUNLOCK_END = 119,TR_VOP_WRITE_START = 120,TR_VOP_WRITE_END = 121,TR_VOP_CREATE_START = 122,TR_VOP_CREATE_END = 123,TR_VOP_REMOVE_START = 124,TR_VOP_REMOVE_END = 125,TR_VOP_RENAME_START = 126,TR_VOP_RENAME_END = 127,TR_VOP_LINK_START = 128,TR_VOP_LINK_END = 129,TR_VOP_SYMLINK_START = 130,TR_VOP_SYMLINK_END = 131,TR_VOP_MKDIR_START = 132,TR_VOP_MKDIR_END = 133,TR_VOP_RMDIR_START = 134,TR_VOP_RMDIR_END = 135,TR_VOP_READDIR_START = 136,TR_VOP_READDIR_END = 137,TR_SEGMAP_GETMAP_START = 138,TR_SEGMAP_GETMAP_END = 139,TR_AS_FAULT_START = 140,TR_AS_FAULT_END = 141,TR_RFS_GETATTR_START = 142,TR_RFS_GETATTR_END = 143,TR_RFS_SETATTR_START = 144,TR_RFS_SETATTR_END = 145,TR_RFS_LOOKUP_START = 146,TR_RFS_LOOKUP_END = 147,TR_RFS_READLINK_START = 148,TR_RFS_READLINK_END = 149,TR_RFS_READ_START = 150,TR_RFS_READ_END = 151,TR_RFS_WRITE_START = 152,TR_RFS_WRITE_END = 153,TR_RFS_CREATE_START = 154,TR_RFS_CREATE_END = 155,TR_RFS_REMOVE_START = 156,TR_RFS_REMOVE_END = 157,TR_RFS_RENAME_START = 158,TR_RFS_RENAME_END = 159,TR_RFS_LINK_START = 160,TR_RFS_LINK_END = 161,TR_RFS_SYMLINK_START = 162,TR_RFS_SYMLINK_END = 163,TR_RFS_MKDIR_START = 164,TR_RFS_MKDIR_END = 165,TR_RFS_RMDIR_START = 166,TR_RFS_RMDIR_END = 167,TR_RFS_READDIR_START = 168,TR_RFS_READDIR_END = 169,TR_RFS_STATFS_START = 170,TR_RFS_STATFS_END = 171,TR_SVC_SENDREPLY_START = 178,TR_SVC_SENDREPLY_END = 179,TR_VOP_FSYNC_START = 180,TR_VOP_FSYNC_END = 181,TR_VOP_PUTPAGE_START = 182,TR_VOP_PUTPAGE_END = 183,TR_SEGMAP_RELEASE_START = 184,TR_SEGMAP_RELEASE_END = 185,TR_SVC_GETARGS_START = 186,TR_SVC_GETARGS_END = 187,TR_FINDEXPORT_START = 188,TR_FINDEXPORT_END = 189,TR_SVC_FREEARGS_START = 192,TR_SVC_FREEARGS_END = 193,TR_RFS_RESFREE_START = 194,TR_RFS_RESFREE_END = 195,TR_RFS_CRFREE_START = 196,TR_RFS_CRFREE_END = 197,TR_SVC_DUPFOUND = 198,TR_NFSFP_QUE_REQ_START = 199,TR_NFSFP_QUE_REQ_END = 200,TR_NFSFP_PROC_REQ_END = 201,TR_NFSFP_XDR_ARG_START = 202,TR_NFSFP_XDR_ARG_END = 203,TR_NFSFP_XDR_RES_START = 204,TR_NFSFP_XDR_RES_END = 205,TR_NFSFP_DUP_CHECK_START = 206,TR_NFSFP_DUP_CHECK_END = 207,TR_NFSFP_UDP_SEND_START = 208,TR_NFSFP_UDP_SEND_END = 209,TR_NFSFP_SEND_REPLY_START = 210,TR_NFSFP_SEND_REPLY_END = 211,TR_NFSFP_QUE_REQ_ENQ = 212,TR_NFSFP_QUE_REQ_DEQ = 213,TR_NFSFP_RFS_READLINK_START = 214,TR_NFSFP_RFS_READLINK_END = 215,TR_NFSFP_SVCAUTH_UNIX_START = 216,TR_NFSFP_SVCAUTH_UNIX_END = 217,TR_SVC_FREERES_START = 222,TR_SVC_FREERES_END = 223,TR_DNLC_ENTER_START = 218,TR_DNLC_ENTER_END = 219,TR_DNLC_LOOKUP_START = 220,TR_DNLC_LOOKUP_END = 221,TR_CMN_DISPATCH_START = 224,TR_CMN_PROC_START = 225,TR_CMN_PROC_END = 226,TR_CMN_DISPATCH_END = 227,TR_VOP_SPACE_START = 228,TR_VOP_SPACE_END = 229,TR_DDI_DMA_BUF_SETUP_START = 0,TR_DDI_DMA_BUF_SETUP_END = 1,TR_IOMMUNEX_DMA_MAP_START = 2,TR_IOMMUNEX_DMA_MAP_END = 3,TR_IOMMUNEX_DMA_MAP_GETDVMAPAGES_START = 4,TR_IOMMUNEX_DMA_MAP_GETDVMAPAGES_END = 5,TR_SVC_GETREQ_START = 0,TR_SVC_GETREQ_END = 1,TR_SVC_GETREQ_LOOP_START = 2,TR_SVC_GETREQ_LOOP_END = 3,TR_SVC_RUN = 4,TR_SVC_CLTS_KRECV_START = 5,TR_SVC_CLTS_KRECV_END = 6,TR_XDR_CALLMSG_START = 7,TR_XDR_CALLMSG_END = 8,TR_SVC_CLTS_KSEND_START = 9,TR_SVC_CLTS_KSEND_END = 10,TR_XDR_REPLYMSG_START = 11,TR_XDR_REPLYMSG_END = 12,TR_RPCMODOPEN_START = 13,TR_RPCMODOPEN_END = 14,TR_RPCMODRPUT_START = 15,TR_RPCMODRPUT_END = 16,TR_RPCMODWPUT_START = 17,TR_RPCMODWPUT_END = 18,TR_RPCMODRSRV_START = 19,TR_RPCMODRSRV_END = 20,TR_RPCMODWSRV_START = 21,TR_RPCMODWSRV_END = 22,TR_SVC_QUEUEREQ_START = 23,TR_SVC_QUEUEREQ_END = 24,TR_SVC_GETREQ_AUTH_START = 25,TR_SVC_GETREQ_AUTH_END = 26,TR_SVC_DUPDONE = 27,TR_SVC_CLTS_KDUP_START = 28,TR_SVC_CLTS_KDUP_END = 29,TR_RPC_QUE_REQ_START = 30,TR_RPC_QUE_REQ_END = 31,TR_SVC_COTS_KRECV_START = 32,TR_SVC_COTS_KRECV_END = 33,TR_SVC_COTS_KDUP_DONE = 34,TR_SVC_COTS_KDUP_INPROGRESS = 35,TR_SVC_COTS_KSEND_START = 36,TR_SVC_COTS_KSEND_END = 37,TR_SCSI_INIT_PKT_START = 0,TR_SCSI_INIT_PKT_RETURN1_END = 1,TR_SCSI_INIT_PKT_RETURN2_END = 2,TR_SCSI_INIT_PKT_END = 3,TR_SCSI_INIT_PKT_PKTALLOC_START = 4,TR_SCSI_INIT_PKT_PKTALLOC_END = 5,TR_SCSI_INIT_PKT_PKTALLOC_FAILED = 6,TR_SCSI_INIT_PKT_DMAGET_START = 7,TR_SCSI_INIT_PKT_DMAGET_FAILED = 8,TR_SCSI_INIT_PKT_FREE_START = 9,TR_SCSI_ALLOC_CONSISTENT_BUF_START = 10,TR_SCSI_ALLOC_CONSISTENT_BUF_RETURN1_END = 11,TR_SCSI_ALLOC_CONSISTENT_BUF_RETURN2_END = 12,TR_SCSI_ALLOC_CONSISTENT_BUF_RETURN3_END = 13,TR_SCSI_ALLOC_CONSISTENT_BUF_END = 14,TR_SCSI_FREE_CONSISTENT_BUF_START = 15,TR_SCSI_FREE_CONSISTENT_BUF_END = 16,TR_SCSI_IMPL_PKTALLOC_START = 17,TR_SCSI_IMPL_PKTALLOC_END = 18,TR_SCSI_IMPL_PKTALLOC_CALLBACK_START = 19,TR_SCSI_IMPL_PKTALLOC_CALLBACK_END = 20,TR_SCSI_IMPL_PKTFREE_START = 21,TR_SCSI_IMPL_PKTFREE_END = 22,TR_SCSI_IMPL_PKTFREE_RUN_CALLBACK = 23,TR_SCSI_IMPL_DMAGET_START = 24,TR_SCSI_IMPL_DMAGET_END = 25,TR_SCSI_IMPL_DMAGET_BUFSETUP_START = 26,TR_SCSI_IMPL_DMAGET_BUFSETUP_FAILED = 27,TR_SCSI_DESTROY_PKT_START = 28,TR_SCSI_DESTROY_PKT_END = 29,TR_FIFOREAD_IN = 1,TR_FIFOREAD_OUT = 2,TR_FIFOREAD_WAIT = 3,TR_FIFOREAD_WAKE = 4,TR_FIFOREAD_STREAM = 5,TR_FIFOWRITE_IN = 6,TR_FIFOWRITE_OUT = 7,TR_FIFOWRITE_WAIT = 9,TR_FIFOWRITE_WAKE = 10,TR_FIFOWRITE_STREAM = 11,TR_RLOGINP_RPUT_IN = 0,TR_RLOGINP_RPUT_OUT = 1,TR_RLOGINP_RSRV_IN = 2,TR_RLOGINP_RSRV_OUT = 3,TR_RLOGINP_WSRV_IN = 4,TR_RLOGINP_WSRV_OUT = 5,TR_RLOGINP_WPUT_IN = 6,TR_RLOGINP_WPUT_OUT = 7,TR_RLOGINP_WINCTL_IN = 8,TR_RLOGINP_WINCTL_OUT = 9,TR_SOCKFS_OPEN = 0,TR_SOCKFS_CLOSE = 1,TR_DEVMAP_DUP = 0,TR_DEVMAP_UNMAP = 1,TR_DEVMAP_FREE = 2,TR_DEVMAP_FAULT = 3,TR_DEVMAP_FAULTA = 4,TR_DEVMAP_SETPROT = 5,TR_DEVMAP_CHECKPROT = 6,TR_DEVMAP_SEGDEV_BADOP = 7,TR_DEVMAP_SYNC = 8,TR_DEVMAP_INCORE = 9,TR_DEVMAP_LOCKOP = 10,TR_DEVMAP_GETPROT = 11,TR_DEVMAP_GETOFFSET = 12,TR_DEVMAP_GETTYPE = 13,TR_DEVMAP_GETVP = 14,TR_DEVMAP_ADVISE = 15,TR_DEVMAP_DUMP = 16,TR_DEVMAP_PAGELOCK = 17,TR_DEVMAP_GETMEMID = 18,TR_DEVMAP_SOFTUNLOCK = 19,TR_DEVMAP_FAULTPAGE = 20,TR_DEVMAP_FAULTPAGES = 21,TR_DEVMAP_SEGMAP_SETUP = 22,TR_DEVMAP_DEVICE = 23,TR_DEVMAP_DO_CTXMGT = 24,TR_DEVMAP_ROUNDUP = 25,TR_DEVMAP_FIND_HANDLE = 26,TR_DEVMAP_UNLOAD = 27,TR_DEVMAP_GET_LARGE_PGSIZE = 28,TR_DEVMAP_SOFTLOCK_INIT = 29,TR_DEVMAP_SOFTLOCK_RELE = 30,TR_DEVMAP_CTX_RELE = 31,TR_DEVMAP_LOAD = 32,TR_DEVMAP_SETUP = 33,TR_DEVMAP_SEGMAP = 34,TR_DEVMAP_DEVMEM_SETUP = 35,TR_DEVMAP_DEVMEM_REMAP = 36,TR_DEVMAP_UMEM_SETUP = 37,TR_DEVMAP_UMEM_REMAP = 38,TR_DEVMAP_SET_CTX_TIMEOUT = 39,TR_DEVMAP_DEFAULT_ACCESS = 40,TR_DEVMAP_UMEM_ALLOC = 41,TR_DEVMAP_UMEM_FREE = 42,TR_DEVMAP_CTXTO = 43,TR_DEVMAP_DUP_CK1 = 44,TR_DEVMAP_UNMAP_CK1 = 45,TR_DEVMAP_UNMAP_CK2 = 46,TR_DEVMAP_UNMAP_CK3 = 47,TR_DEVMAP_FAULT_CK1 = 48,TR_DEVMAP_SETPROT_CK1 = 49,TR_DEVMAP_FAULTPAGE_CK1 = 50,TR_DEVMAP_DO_CTXMGT_CK1 = 51,TR_DEVMAP_DO_CTXMGT_CK2 = 52,TR_DEVMAP_DO_CTXMGT_CK3 = 53,TR_DEVMAP_DO_CTXMGT_CK4 = 54,TR_DEVMAP_ROUNDUP_CK1 = 55,TR_DEVMAP_ROUNDUP_CK2 = 56,TR_DEVMAP_CTX_RELE_CK1 = 57,TR_DCDSTRATEGY_START = 1,TR_DCDSTRATEGY_DISKSORT_START = 2,TR_DCDSTRATEGY_DISKSORT_END = 3,TR_DCDSTRATEGY_SMALL_WINDOW_START = 4,TR_DCDSTRATEGY_SMALL_WINDOW_END = 5,TR_DCDSTRATEGY_END = 6,TR_DCDSTART_START = 7,TR_DCDSTART_NO_WORK_END = 8,TR_DCDSTART_NO_RESOURCES_END = 9,TR_DCASTART_SMALL_WINDOW_START = 10,TR_DCDSTART_SMALL_WINDOW_END = 11,TR_DCDSTART_END = 12,TR_MAKE_DCD_CMD_START = 13,TR_MAKE_DCD_CMD_INIT_PKT_START = 14,TR_MAKE_DCD_CMD_INIT_PKT_END = 15,TR_MAKE_DCD_CMD_NO_PKT_ALLOCATED1_END = 16,TR_MAKE_DCD_CMD_END = 17,TR_DCDINTR_START = 18,TR_DCDINTR_COMMAND_DONE_END = 19,TR_DCDINTR_END = 20,TR_DCDONE_START = 21,TR_DCDDONE_BIODONE_CALL = 22,TR_DCDDONE_END = 23,TR_DCD_CHECK_ERROR_START = 24,TR_DCD_CHECK_ERROR_END = 25,TR_DCDRUNOUT_START = 26,TR_DCDRUNOUT_END = 27,};
enum MACRO_TR_NONE {TR_NONE = 0,TR_ASCII = 1,TR_EVENT = 2,TR_UNTRANS_EVENT = 3,};
enum MACRO_TS {TS_FREE = 0x0,TS_SLEEP = 0x1,TS_RUN = 0x2,TS_ONPROC = 0x4,TS_ZOMB = 0x8,TS_STOPPED = 0x10,};
enum MACRO_TSAF {TSAF_EXP_QUEUED = 0x1,};
enum MACRO_TSETCOFF {TSETCOFF = 0x0,TSETCRBRG = 0x40,TSETCTBRG = 0x80,};
enum MACRO_TSETCTSET {TSETCTSET = 0xC0,TSETCRSET = 0x100,RSETCLK = 0xE00,};
enum MACRO_TSGID {TSGID = 0x400,};
enum MACRO_TSIGN {TSIGN = 0x800,};
enum MACRO_TSIZLEN {TSIZLEN = 12,};
enum MACRO_TSKPRI {TSKPRI = 0x1,TSBACKQ = 0x2,TSIA = 0x4,TSIASET = 0x8,TSIANICED = 0x10,};
enum MACRO_TSP {TSP_ANY = 0,TSP_ADJTIME = 1,TSP_ACK = 2,TSP_MASTERREQ = 3,TSP_MASTERACK = 4,TSP_SETTIME = 5,TSP_MASTERUP = 6,TSP_SLAVEUP = 7,TSP_ELECTION = 8,TSP_ACCEPT = 9,TSP_REFUSE = 10,TSP_CONFLICT = 11,TSP_RESOLVE = 12,TSP_QUIT = 13,TSP_DATE = 14,TSP_DATEREQ = 15,TSP_DATEACK = 16,TSP_TRACEON = 17,TSP_TRACEOFF = 18,TSP_MSITE = 19,TSP_MSITEREQ = 20,TSP_TEST = 21,};
enum MACRO_TSPTYPENUMBER {TSPTYPENUMBER = 22,};
enum MACRO_TSPVERSION {TSPVERSION = 1,};
enum MACRO_TSRF {TSRF_INFO_REQ = 0x1,TSRF_IS_EXP_IN_RCVBUF = 0x2,TSRF_QLEN_REQ = 0x4,};
enum MACRO_TSTATECHNG {TSTATECHNG = 19,};
enum MACRO_TSTPAT {TSTPAT = 0xE5,};
enum MACRO_TSVTX {TSVTX = 0x200,};
enum MACRO_TS_INUSE {TS_INUSE = 0x1,TS_W_IN = 0x2,TS_W_OUT = 0x4,TS_WRITER_Q = 0x0,TS_READER_Q = 0x1,TS_NUM_Q = 0x2,};
enum MACRO_TS_LOAD {TS_LOAD = 0x1,TS_DONT_SWAP = 0x2,TS_SWAPENQ = 0x4,TS_ON_SWAPQ = 0x8,TS_CSTART = 0x100,TS_UNPAUSE = 0x200,TS_XSTART = 0x400,TS_PSTART = 0x800,TS_RESUME = 0x1000,TS_CREATE = 0x2000,TS_ALLSTART = 0x3F00,};
enum MACRO_TS_NOCHANGE {TS_NOCHANGE = -32768,TS_GETDPSIZE = 1,TS_GETDPTBL = 2,TS_SETDPTBL = 3,};
enum MACRO_TS_SOFTCAR {TS_SOFTCAR = 0x2,};
enum MACRO_TS_TAPE {TS_TAPE = 1,TS_INODE = 2,TS_ADDR = 4,TS_BITS = 3,TS_CLRI = 6,TS_END = 5,TS_EOM = 7,};
enum MACRO_TS_UNBND {TS_UNBND = 0,TS_WACK_BREQ = 1,TS_WACK_UREQ = 2,TS_IDLE = 3,TS_WACK_OPTREQ = 4,TS_WACK_CREQ = 5,TS_WCON_CREQ = 6,TS_WRES_CIND = 7,TS_WACK_CRES = 8,TS_DATA_XFER = 9,TS_WIND_ORDREL = 10,TS_WREQ_ORDREL = 11,TS_WACK_DREQ6 = 12,TS_WACK_DREQ7 = 13,TS_WACK_DREQ9 = 14,TS_WACK_DREQ10 = 15,TS_WACK_DREQ11 = 16,TS_NOSTATES = 17,};
enum MACRO_TS_XCLUDE {TS_XCLUDE = 0x1,TS_TTSTOP = 0x2,TS_TBLOCK = 0x4,TS_QUOT = 0x8,TS_ERASE = 0x10,TS_SLNCH = 0x20,TS_PLNCH = 0x40,TS_TTCR = 0x80,TS_NOCANON = 0x100,TS_RESCAN = 0x400,TS_MREAD = 0x800,TS_FLUSHWAIT = 0x1000,TS_MEUC = 0x10000,TS_WARNED = 0x20000,TS_CLOSE = 0x40000,TS_IFBLOCK = 0x100000,TS_OFBLOCK = 0x200000,TS_ISPTSTTY = 0x400000,};
enum MACRO_TT {TT_OV_USR = 0x51,TT_OV_SYS = 0x52,TT_OV_SHR = 0x53,TT_OV_SHRK = 0x54,TT_OV_BUF = 0x55,TT_OV_BUFK = 0x56,TT_UF_USR = 0x61,TT_UF_SYS = 0x62,TT_UF_FAULT = 0x63,TT_SC_RET = 0x881,TT_SC_POST = 0x882,TT_SC_TRAP = 0x883,TT_SYS_RTT = 0x6666,TT_SYS_RTTU = 0x7777,TT_INTR_ENT = 0xFFFFFFFF,TT_INTR_RET = 0xFFFFFFFE,TT_INTR_RET2 = 0xFFFFFFFD,TT_INTR_EXIT = 0x8888,};
enum MACRO_TTIMLEN {TTIMLEN = 12,};
enum MACRO_TTIPRI {TTIPRI = 28,};
enum MACRO_TTOPRI {TTOPRI = 29,};
enum MACRO_TTXOHI {TTXOHI = 180,HIWAT = 1024,};
enum MACRO_TUEXEC {TUEXEC = 0x40,};
enum MACRO_TUIDLEN {TUIDLEN = 8,};
enum MACRO_TUP {TUP = 0x7,SID = 0x8,};
enum MACRO_TUREAD {TUREAD = 0x100,};
enum MACRO_TUWRITE {TUWRITE = 0x80,};
enum MACRO_TVERSLEN {TVERSLEN = 2,REGTYPE = 48,};
enum MACRO_TX {TX_OFF = 0x0,TX_IDLE = 0x1,TX_RTS = 0x2,TX_ACTIVE = 0x4,TX_CRC = 0x8,TX_FLAG = 0x10,TX_LAST = 0x20,TX_ABORTED = 0x40,};
enum MACRO_TXBUFSIZE {LINE_TXBUFSIZE = 16,PPC_TXBUFSIZE = 16,};
enum MACRO_TXC {TXC_IS_TXC = 0,TXC_IS_RXC = 1,TXC_IS_BAUD = 2,TXC_IS_PLL = 3,};
enum MACRO_TX_FLOFF {TX_FLOFF = 0x4,TX_FLON = 0x2,};
enum MACRO_TX_RDY {TX_RDY = 0x4,TX_MPTY = 0x2,};
enum MACRO_TYPE {TYPE_A = 1,TYPE_E = 2,TYPE_I = 3,TYPE_L = 4,};
enum MACRO_TYPE_BASIC {TYPE_BASIC_LS = 0x0,TYPE_EXTENDED_LS = 0x1,TYPE_IS8802 = 0x4,TYPE_IS8802_SNAP = 0x5,TYPE_SCSI_FCP = 0x8,TYPE_SCSI_GPP = 0x9,TYPE_HIPP_FP = 0xA,TYPE_IPI3_MASTER = 0x11,TYPE_IPI3_SLAVE = 0x12,TYPE_IPI3_PEER = 0x13,};
enum MACRO_TYPE_IP {TYPE_IP = 0x40,TYPE_UNCOMPRESSED_TCP = 0x70,TYPE_COMPRESSED_TCP = 0x80,TYPE_ERROR = 0x0,TYPE_BAD_TCP = 0xFFFFFFFF,};
enum MACRO_TYPE_NOT {TYPE_NOT_SUPPORTED = 0x7,};
enum MACRO_TZ {TZ_MAX_TIMES = 370,TZ_MAX_TYPES = 256,TZ_MAX_CHARS = 50,TZ_MAX_LEAPS = 50,};
enum MACRO_T_ACK {T_ACK_ON = 0x80,T_P_ON = 0x40,T_REJ_ON = 0x20,T_REM_BUSY_ON = 0x10,T_INACT_ON = 0x8,T_SEND_ACK_ON = 0x4,};
enum MACRO_T_CLASS0 {T_CLASS0 = 0,T_CLASS1 = 1,T_CLASS2 = 2,T_CLASS3 = 3,T_CLASS4 = 4,T_PRITOP = 0,T_PRIHIGH = 1,T_PRIMID = 2,T_PRILOW = 3,T_PRIDFLT = 4,T_NOPROTECT = 1,T_PASSIVEPROTECT = 2,T_ACTIVEPROTECT = 4,T_LTPDUDFLT = 128,};
enum MACRO_T_CONN {T_CONN_REQ = 0,T_CONN_RES = 1,T_DISCON_REQ = 2,T_DATA_REQ = 3,T_EXDATA_REQ = 4,T_INFO_REQ = 5,T_BIND_REQ = 6,T_UNBIND_REQ = 7,T_UNITDATA_REQ = 8,T_SVR4_OPTMGMT_REQ = 9,T_OPTMGMT_REQ = 9,T_ORDREL_REQ = 10,T_CONN_IND = 11,T_CONN_CON = 12,T_DISCON_IND = 13,T_DATA_IND = 14,T_EXDATA_IND = 15,T_INFO_ACK = 16,T_BIND_ACK = 17,T_ERROR_ACK = 18,T_OK_ACK = 19,T_UNITDATA_IND = 20,T_UDERROR_IND = 21,T_OPTMGMT_ACK = 22,T_ORDREL_IND = 23,T_ADDR_REQ = 24,T_ADDR_ACK = 25,};
enum MACRO_T_COTS {T_COTS = 1,T_COTS_ORD = 2,T_CLTS = 3,T_NEGOTIATE = 4,T_CHECK = 8,T_DEFAULT = 16,T_SUCCESS = 32,T_FAILURE = 64,T_CURRENT = 128,T_PARTSUCCESS = 256,T_READONLY = 512,T_NOTSUPPORT = 1024,T_YES = 1,T_NO = 0,T_INFINITE = -1,T_INVALID = -2,T_UNSPEC = -3,T_ALLOPT = 0,};
enum MACRO_T_FMT {T_FMT = 46,};
enum MACRO_T_FMT_AMPM {T_FMT_AMPM = 50,};
enum MACRO_T_INET {T_INET_TCP = 6,T_TCP_NODELAY = 1,T_TCP_MAXSEG = 2,T_TCP_KEEPALIVE = 8,T_GARBAGE = 2,};
enum MACRO_T_INET_UDP {T_INET_UDP = 17,T_UDP_CHECKSUM = 1536,T_INET_IP = 0,T_IP_TTL = 4,T_IP_REUSEADDR = 260,T_IP_DONTROUTE = 261,T_IP_BROADCAST = 262,T_IP_OPTIONS = 263,T_IP_TOS = 264,T_ROUTINE = 0,T_PRIORITY = 1,T_IMMEDIATE = 2,T_FLASH = 3,T_OVERRIDEFLASH = 4,T_CRITIC_ECP = 5,T_INETCONTROL = 6,T_NETCONTROL = 7,T_NOTOS = 0,T_LDELAY = 16,T_HITHRPT = 8,T_HIREL = 4,T_LOCOST = 2,T_LISTEN = 1,T_CONNECT = 2,T_DATA = 4,T_EXDATA = 8,T_UDERR = 64,T_ORDREL = 128,T_GODATA = 256,T_GOEXDATA = 512,T_MORE = 1,T_EXPEDITED = 2,T_PUSH = 4,T_IOV_MAX = 16,T_SENDZERO = 1,T_ORDRELDATA = 2,T_BIND = 1,T_OPTMGMT = 2,T_CALL = 3,T_DIS = 4,T_UNITDATA = 5,T_UDERROR = 6,T_INFO = 7,T_ADDR = 1,T_OPT = 2,T_UDATA = 4,T_ALL = 65535,T_UNINIT = 0,T_UNBND = 1,T_IDLE = 2,T_OUTCON = 3,T_INCON = 4,T_DATAXFER = 5,T_OUTREL = 6,T_INREL = 7,T_UNUSED = -1,T_ABSREQ = 32768,};
enum MACRO_T_INTR {T_INTR_THREAD = 0x1,T_WAKEABLE = 0x2,T_TOMASK = 0x4,T_TALLOCSTK = 0x8,T_WOULDBLOCK = 0x20,T_DONTBLOCK = 0x40,T_DONTPEND = 0x80,T_SYS_PROF = 0x100,T_WAITCVSEM = 0x200,T_WATCHPT = 0x400,T_PANIC = 0x800,};
enum MACRO_T_NULL {T_NULL = 0,T_ARG = 1,T_CHAR = 2,T_SHORT = 3,T_LONG = 5,T_FLOAT = 6,T_DOUBLE = 7,T_STRUCT = 8,T_UNION = 9,T_ENUM = 10,T_MOE = 11,T_UCHAR = 12,T_USHORT = 13,T_UINT = 14,T_ULONG = 15,};
enum MACRO_T_OUTPUT {T_OUTPUT = 0,T_TIME = 1,T_SUSPEND = 2,T_RESUME = 3,T_BLOCK = 4,T_UNBLOCK = 5,T_RFLUSH = 6,T_WFLUSH = 7,T_BREAK = 8,T_INPUT = 9,T_PARM = 11,T_SWTCH = 12,};
enum MACRO_T_RESET {T_RESET = 0x0,T_TEXT_FAULT = 0x1,T_UNIMP_INSTR = 0x2,T_PRIV_INSTR = 0x3,T_FP_DISABLED = 0x4,T_CP_DISABLED = 0x24,T_WIN_OVERFLOW = 0x5,T_WIN_UNDERFLOW = 0x6,T_ALIGNMENT = 0x7,T_FP_EXCEPTION = 0x8,T_CP_EXCEPTION = 0x28,T_DATA_FAULT = 0x9,T_TAG_OVERFLOW = 0xA,T_INT_LEVEL = 0xF,T_INT_LEVEL_1 = 0x11,T_INT_LEVEL_2 = 0x12,T_INT_LEVEL_3 = 0x13,T_INT_LEVEL_4 = 0x14,T_INT_LEVEL_5 = 0x15,T_INT_LEVEL_6 = 0x16,T_INT_LEVEL_7 = 0x17,T_INT_LEVEL_8 = 0x18,T_INT_LEVEL_9 = 0x19,T_INT_LEVEL_10 = 0x1A,T_INT_LEVEL_11 = 0x1B,T_INT_LEVEL_12 = 0x1C,T_INT_LEVEL_13 = 0x1D,T_INT_LEVEL_14 = 0x1E,T_INT_LEVEL_15 = 0x1F,T_TEXT_ERROR = 0x21,T_UNIMP_FLUSH = 0x25,T_DATA_ERROR = 0x29,T_IDIV0 = 0x2A,T_DATA_STORE = 0x2B,T_SOFTWARE_TRAP = 0x80,T_ESOFTWARE_TRAP = 0xFF,T_OSYSCALL = 0x80,T_BREAKPOINT = 0x81,T_DIV0 = 0x82,T_FLUSH_WINDOWS = 0x83,T_CLEAN_WINDOWS = 0x84,T_RANGE_CHECK = 0x85,T_FIX_ALIGN = 0x86,T_INT_OVERFLOW = 0x87,T_SYSCALL = 0x88,T_HOTPATCH_TRAP = 0x8A,T_GETCC = 0xA0,T_SETCC = 0xA1,T_INTERRUPT = 0x100,T_SPURIOUS = 0x110,T_FAULT = 0x200,T_AST = 0x400,T_FLUSH_PCB = 0x410,T_SYS_RTT_PAGE = 0x420,T_ZERO = 0x0,};
enum MACRO_T_SS2 {T_SS2 = 7,T_SS3 = 8,};
enum MACRO_UBSIZE {UBSIZE = 512,};
enum MACRO_UC {UC_SIGMASK = 0x1,UC_STACK = 0x2,UC_CPU = 0x4,UC_MAU = 0x8,UC_FPU = 0x8,UC_INTR = 0x10,UC_ASR = 0x20,UC_MCONTEXT = 0x2C,UC_ALL = 0x2F,};
enum MACRO_UCHAR {UCHAR_MAX = 255,MB_LEN_MAX = 5,};
enum MACRO_UCRED {UCRED = 13,};
enum MACRO_UD {UD_PRI_VOL_DESC = 0x1,UD_ANCH_VOL_DESC = 0x2,UD_VOL_DESC_PTR = 0x3,UD_IMPL_USE_DESC = 0x4,UD_PART_DESC = 0x5,UD_LOG_VOL_DESC = 0x6,UD_UNALL_SPA_DESC = 0x7,UD_TERM_DESC = 0x8,UD_LOG_VOL_INT = 0x9,UD_FILE_SET_DESC = 0x100,UD_FILE_ID_DESC = 0x101,UD_ALLOC_EXT_DESC = 0x102,UD_INDIRECT_ENT = 0x103,UD_TERMINAL_ENT = 0x104,UD_FILE_ENTRY = 0x105,UD_EXT_ATTR_HDR = 0x106,UD_UNALL_SPA_ENT = 0x107,UD_SPA_BMAP_DESC = 0x108,UD_PART_INT_DESC = 0x109,UD_EXT_FILE_ENT = 0x10A,};
enum MACRO_UDF {UDF_102 = 0x102,UDF_150 = 0x150,UDF_200 = 0x200,};
enum MACRO_UDP {UDP_CHECKSUM = 0x600,};
enum MACRO_UDPMSGSIZE {UDPMSGSIZE = 8800,};
enum MACRO_UDP_ANONPRIVBIND {UDP_ANONPRIVBIND = 0x100,UDP_EXCLBIND = 0x101,UDP_TTL = 0x1E,};
enum MACRO_UFS {UFS_FILESIZE_BITS = 41,};
enum MACRO_UFSD {UFSD_FREE = 48,UFSD_ACL = 49,UFSD_DFACL = 50,};
enum MACRO_UFSD_VARMSGMAX {UFSD_VARMSGMAX = 1024,UFSD_SPAREMSGBYTES = 4,UFSD_V1 = 1,UFSD_ORIGVERS = 1,UFSD_THISVERS = 1,UFSD_PROG = 100233,UFSD_VERS = 1,UFSD_NULL = 0,UFSD_REPAIRFS = 1,UFSD_REPAIRFSLIST = 2,UFSD_SEND = 3,UFSD_RECV = 4,UFSD_EXIT = 5,};
enum MACRO_UFSMNT {UFSMNT_NOINTR = 0x1,UFSMNT_SYNCDIR = 0x2,UFSMNT_NOSETSEC = 0x4,UFSMNT_LARGEFILES = 0x8,UFSMNT_NOATIME = 0x1000,UFSMNT_NODFRATIME = 0x2000,UFSMNT_ONERROR_PANIC = 0x20,UFSMNT_ONERROR_LOCK = 0x40,UFSMNT_ONERROR_UMOUNT = 0x80,UFSMNT_ONERROR_FLGMASK = 0xE0,UFSMNT_ONERROR_DEFAULT = 0x20,UFSMNT_DISABLEDIRECTIO = 0x100,UFSMNT_FORCEDIRECTIO = 0x200,UFSMNT_NOFORCEDIRECTIO = 0x400,UFSMNT_LOGGING = 0x800,};
enum MACRO_UFSROOTINO {UFSROOTINO = 2,};
enum MACRO_UID {UID_NOACCESS = 60002,};
enum MACRO_UID_LONG {UID_LONG = 65535,GID_LONG = 65535,};
enum MACRO_UID_MAX : __int64 {UID_MAX = 2147483647,USI_MAX = 4294967295,SYSPID_MAX = 1,};
enum MACRO_UINT {UINT_MAX = -1,};
enum MACRO_UL {UL_GMEMLIM = 3,UL_GDESLIM = 4,UL_GTXTOFF = 64,UL_GETFSIZE = 1,UL_SETFSIZE = 2,};
enum MACRO_ULLONG {ULLONG_MAX = -1,};
enum MACRO_ULOCKFS {ULOCKFS_BUSY = 0x1,ULOCKFS_NOIACC = 0x4,ULOCKFS_NOIDEL = 0x8,ULOCKFS_ULOCK = 0x1,ULOCKFS_WLOCK = 0x2,ULOCKFS_NLOCK = 0x4,ULOCKFS_DLOCK = 0x8,ULOCKFS_HLOCK = 0x10,ULOCKFS_ELOCK = 0x20,ULOCKFS_ROELOCK = 0x40,ULOCKFS_SLOCK = 0x80000000,ULOCKFS_READ_MASK = 0x80000030,ULOCKFS_WRITE_MASK = 0x80000072,ULOCKFS_GETATTR_MASK = 0x80000030,ULOCKFS_SETATTR_MASK = 0x80000072,ULOCKFS_ACCESS_MASK = 0x80000030,ULOCKFS_LOOKUP_MASK = 0x80000030,ULOCKFS_CREATE_MASK = 0x80000072,ULOCKFS_REMOVE_MASK = 0x8000007E,ULOCKFS_LINK_MASK = 0x80000072,ULOCKFS_RENAME_MASK = 0x80000076,ULOCKFS_MKDIR_MASK = 0x80000072,ULOCKFS_RMDIR_MASK = 0x8000007E,ULOCKFS_READDIR_MASK = 0x80000030,ULOCKFS_SYMLINK_MASK = 0x80000072,ULOCKFS_READLINK_MASK = 0x80000030,ULOCKFS_FSYNC_MASK = 0x80000030,ULOCKFS_FID_MASK = 0x80000030,ULOCKFS_RWLOCK_MASK = 0x80000030,ULOCKFS_RWUNLOCK_MASK = 0x80000030,ULOCKFS_SEEK_MASK = 0x80000030,ULOCKFS_FRLOCK_MASK = 0x80000030,ULOCKFS_SPACE_MASK = 0x80000072,ULOCKFS_QUOTA_MASK = 0x80000072,ULOCKFS_GETREAD_MASK = 0x80000030,ULOCKFS_GETWRITE_MASK = 0x80000072,ULOCKFS_MAP_MASK = 0x80000030,ULOCKFS_FIODUTIMES_MASK = 0x80000072,ULOCKFS_FIODIO_MASK = 0x80000072,ULOCKFS_FIODIOS_MASK = 0x80000030,ULOCKFS_PATHCONF_MASK = 0x80000030,ULOCKFS_VGET_MASK = 0x80000030,ULOCKFS_DELETE_MASK = 0x80000072,};
enum MACRO_ULONG {ULONG_MAX = -1,SIZE_MAX = -1,SSIZE_MAX = 2147483647,};
enum MACRO_UM {UM_NOSLEEP = 0x0,UM_SLEEP = 0x1,UM_GC = 0x2,};
enum MACRO_UNACCESSIBLE {UNACCESSIBLE = 1,};
enum MACRO_UNEXPECTED {UNEXPECTED_ACK = 0x14,UNEXPECTED_LINK_RESP = 0x15,};
enum MACRO_UNIXOS {UNIXOS = 99,};
enum MACRO_UNKNOWN {UNKNOWN_WIDTH = 251,};
enum MACRO_UNLKPT {UNLKPT = 20482,};
enum MACRO_UNLOCK {UNLOCK = 0,PROCLOCK = 1,TXTLOCK = 2,DATLOCK = 4,};
enum MACRO_UPDATE {UPDATE_XLUT = 0x1,UPDATE_CLUT1 = 0x2,UPDATE_CLUT2 = 0x4,UPDATE_CLUT3 = 0x8,};
enum MACRO_UPILWPCHAN {UPILWPCHAN_BITS = 9,UPILWPCHAN_TABSIZ = 512,};
enum MACRO_UPIMUTEX {UPIMUTEX_TABSIZE = 512,UPIMUTEX_TRY = 1,UPIMUTEX_BLOCK = 0,};
enum MACRO_USB {USB_SUCCESS = 0,USB_FAILURE = -1,USB_NO_RESOURCES = -2,USB_NO_BANDWIDTH = -3,USB_PIPE_RESERVED = -4,USB_PIPE_UNSHAREABLE = -5,USB_NOT_SUPPORTED = -6,USB_PIPE_ERROR = -8,USB_PIPE_BUSY = -9,USB_DEV_ONLINE = 1,USB_DEV_DISCONNECTED = 2,USB_DEV_CPR_SUSPEND = 3,USB_DEV_POWERED_DOWN = 4,USB_DEV_POWER_D0 = 1,USB_DEV_POWER_D1 = 5,USB_DEV_POWER_D2 = 6,USB_DEV_POWER_D3 = 4,USB_DEV_OS_POWER_0 = 0,USB_DEV_OS_POWER_1 = 1,USB_DEV_OS_POWER_2 = 2,USB_DEV_OS_POWER_3 = 3,USB_DEV_OS_POWER_OFF = 0,USB_DEV_OS_FULL_POWER = 3,USB_DEV_PWRMASK_D0 = 1,USB_DEV_PWRMASK_D1 = 2,USB_DEV_PWRMASK_D2 = 4,USB_DEV_PWRMASK_D3 = 8,USB_PMCOMP_NO = 5,USB_CONF_ATTR_SELFPWR = 64,USB_CONF_ATTR_REMOTE_WAKEUP = 32,USB_DEVICE_DESCR_SIZE = 18,USB_CONF_DESCR_SIZE = 9,USB_CONF_PWR_DESCR_SIZE = 18,USB_IF_DESCR_SIZE = 9,USB_IF_PWR_DESCR_SIZE = 15,USB_EPT_DESCR_SIZE = 7,USB_EPT_ADDR_MASK = 15,USB_EPT_DIR_MASK = 128,USB_EPT_DIR_OUT = 0,USB_EPT_DIR_IN = 128,USB_EPT_ATTR_CONTROL = 0,USB_EPT_ATTR_ISOCH = 1,USB_EPT_ATTR_BULK = 2,USB_EPT_ATTR_INTR = 3,USB_EPT_ATTR_MASK = 3,USB_MAXSTRINGLEN = 255,USB_PARSE_ERROR = 0,USB_DESCR_TYPE_ANY = -1,USB_DESCR_TYPE_SETUP_DEVICE = 256,USB_DESCR_TYPE_SETUP_CONFIGURATION = 512,USB_DESCR_TYPE_SETUP_STRING = 768,USB_DESCR_TYPE_SETUP_INTERFACE = 1024,USB_DESCR_TYPE_SETUP_ENDPOINT = 1280,USB_DESCR_TYPE_SETUP_CONFPOWER = 1792,USB_DESCR_TYPE_SETUP_IFPOWER = 2048,USB_DESCR_TYPE_DEVICE = 1,USB_DESCR_TYPE_CONFIGURATION = 2,USB_DESCR_TYPE_STRING = 3,USB_DESCR_TYPE_INTERFACE = 4,USB_DESCR_TYPE_ENDPOINT = 5,USB_DESCR_TYPE_CONFIGURATION_POWER = 7,USB_DESCR_TYPE_INTERFACE_POWER = 8,USB_COMBINED_NODE = -1,USB_FLAGS_SLEEP = 1,USB_FLAGS_ENQUEUE = 2,USB_FLAGS_OPEN_EXCL = 4,USB_FLAGS_SHORT_XFER_OK = 8,USB_PIPE_POLICY_V_0 = 0,USB_PIPE_TIMEOUT = 3,USB_CC_NOERROR = 0,USB_CC_CRC = 1,USB_CC_BITSTUFFING = 2,USB_CC_DATA_TOGGLE_MM = 3,USB_CC_STALL = 4,USB_CC_DEV_NOT_RESP = 5,USB_CC_PID_CHECKFAILURE = 6,USB_CC_UNEXP_PID = 7,USB_CC_DATA_OVERRUN = 8,USB_CC_DATA_UNDERRUN = 9,USB_CC_BUFFER_OVERRUN = 10,USB_CC_BUFFER_UNDERRUN = 11,USB_CC_TIMEOUT = 12,USB_CC_UNSPECIFIED_ERR = 65280,USB_DEV_REQ_HOST_TO_DEV = 0,USB_DEV_REQ_DEVICE_TO_HOST = 128,USB_DEV_REQ_TYPE_STANDARD = 0,USB_DEV_REQ_TYPE_CLASS = 32,USB_DEV_REQ_TYPE_VENDOR = 64,USB_DEV_REQ_RECIPIENT_DEVICE = 0,USB_DEV_REQ_RECIPIENT_INTERFACE = 1,USB_DEV_REQ_RECIPIENT_ENDPOINT = 2,USB_DEV_REQ_RECIPIENT_OTHER = 3,USB_REQ_GET_STATUS = 0,USB_REQ_CLEAR_FEATURE = 1,USB_REQ_SET_FEATURE = 3,USB_REQ_SET_ADDRESS = 5,USB_REQ_GET_DESCRIPTOR = 6,USB_REQ_SET_DESCRIPTOR = 7,USB_REQ_GET_CONFIGURATION = 8,USB_REQ_SET_CONFIGURATION = 9,USB_REQ_GET_INTERFACE = 10,USB_REQ_SET_INTERFACE = 11,USB_REQ_SYNC_FRAME = 12,USB_LANG_ID = 1033,USB_ENDPOINT_HALT = 0,USB_DEVICE_REMOTE_WAKEUP = 1,USB_INTERFACE_POWER_D0 = 2,USB_INTERFACE_POWER_D1 = 3,USB_INTERFACE_POWER_D2 = 4,USB_INTERFACE_POWER_D3 = 5,USB_REMOTE_WAKEUP = 2,USB_SELF_POWER = 1,USB_LOG_L0 = 0,USB_LOG_L1 = 1,USB_LOG_L2 = 2,USB_LOG_L3 = 3,USB_LOG_L4 = 4,USB_TOTAL_HOTPLUG_SUCCESS = 1,USB_HOTPLUG_SUCCESS = 2,USB_TOTAL_HOTPLUG_FAILURE = 4,USB_HOTPLUG_FAILURE = 8,};
enum MACRO_USB_CLASS {USB_CLASS_DESCR_TYPE_REPORT = 0x2200,};
enum MACRO_USB_DESCR {USB_DESCR_TYPE_HID = 0x21,USB_HID_DESCR_SIZE = 0xA,};
enum MACRO_USB_DESCR_TYPE {USB_DESCR_TYPE_SETUP_HUB = 0x2900,};
enum MACRO_USCRL {USCRL = 0x56,};
enum MACRO_USCSI {USCSI_WRITE = 0x0,USCSI_SILENT = 0x1,USCSI_DIAGNOSE = 0x2,USCSI_ISOLATE = 0x4,USCSI_READ = 0x8,USCSI_RESET = 0x4000,USCSI_RESET_ALL = 0x8000,USCSI_RQENABLE = 0x10000,USCSI_ASYNC = 0x1000,USCSI_SYNC = 0x2000,USCSI_NOINTR = 0x40,USCSI_NOTAG = 0x100,USCSI_OTAG = 0x200,USCSI_HTAG = 0x400,USCSI_HEAD = 0x800,USCSI_NOPARITY = 0x10,USCSI_NODISCON = 0x20,USCSI_RESERVED = 0xFFFE0000,};
enum MACRO_USCSICMD {USCSICMD = 1225,};
enum MACRO_USCSIGETRQS {USCSIGETRQS = 1226,};
enum MACRO_USCSIIOC {USCSIIOC = 0x400,};
enum MACRO_USE {USE_DGRAM = 65536,};
enum MACRO_USER {USER_OBJ = 0x1,};
enum MACRO_USERATTR {USERATTR_DB_NCOL = 5,USERATTR_DB_NKEYCOL = 2,USERATTR_KEYCOL0 = 0,USERATTR_KEYCOL1 = 1,};
enum MACRO_USER_0 {USER = 0x2,};
enum MACRO_USHRT {USHRT_MAX = 65535,};
enum MACRO_USOC {USOC_PROM_4TH_SELF_TST = 0x0,USOC_PROM_4TH_OBP_DRV = 0x1000,USOC_PROM_OBP_HDR = 0x5000,USOC_PROM_FW_DATE_CODE = 0x5300,USOC_PROM_SRVC_PARM = 0x5304,USOC_PROM_LA_BIT_MASK = 0x5344,USOC_PROM_RSRV1 = 0x534C,USOC_PROM_USOC_CODE = 0x6000,USOC_PROM_RSRV2 = 0xF000,USOC_XRAM_REQ_DESC = 0x200,USOC_XRAM_RSP_DESC = 0x220,USOC_XRAM_LESB_P0 = 0x240,USOC_XRAM_LESB_P1 = 0x258,USOC_XRAM_SERV_PARAMS = 0x280,USOC_XRAM_FW_DATE_STR = 0x2DC,USOC_XRAM_FW_DATE_CODE = 0x2F8,USOC_XRAM_HW_REV = 0x2FC,USOC_XRAM_UCODE = 0x300,USOC_XRAM_PORTA_WWN = 0x300,USOC_XRAM_PORTB_WWN = 0x308,USOC_XRAM_NODE_WWN = 0x310,USOC_XRAM_BUF_POOL = 0x4000,USOC_XRAM_EXCH_POOL = 0xC000,};
enum MACRO_USOCIO {USOCIO_GETMAP = 18095,USOCIO_BYPASS_DEV = 18096,USOCIO_FORCE_LIP = 18097,USOCIO_ADISC_ELS = 18098,USOCIO_FORCE_OFFLINE = 18099,USOCIO_LOADUCODE = 18100,USOCIO_DUMPXRAM = 18101,USOCIO_DUMPXRAMBUF = 18102,USOCIO_LINKSTATUS = 18103,USOCIO_LOOPBACK_INTERNAL = 18110,USOCIO_LOOPBACK_MANUAL = 18111,USOCIO_NO_LOOPBACK = 18112,USOCIO_LOOPBACK_FRAME = 18113,USOCIO_DIAG_NOP = 18114,USOCIO_DIAG_RAW = 18115,USOCIO_DIAG_XRAM = 18116,USOCIO_DIAG_SOC = 18117,USOCIO_DIAG_HCB = 18118,USOCIO_DIAG_SOCLB = 18119,USOCIO_DIAG_SRDSLB = 18120,USOCIO_DIAG_EXTLB = 18121,USOCIO_FCODE_MCODE_VERSION = 18122,USOCIO_GET_LESB = 18123,USOCIO_ADD_POOL = 18221,USOCIO_ADD_BUFFER = 18222,USOCIO_DELETE_POOL = 18223,USOCIO_SEND_FRAME = 18224,USOCIO_RCV_FRAME = 18225,};
enum MACRO_USOCIOC {USOCIOC = 17920,};
enum MACRO_USRMIN {USRMIN = 0,ADMMIN = 1,MAXAPUSH = 8,};
enum MACRO_USYNC {USYNC_THREAD = 0x0,USYNC_PROCESS = 0x1,};
enum MACRO_USYNC_PROCESS {USYNC_PROCESS_ROBUST = 0x8,};
enum MACRO_UT {UT_INSTRUCTION_DISABLED = 1,UT_INSTRUCTION_ERROR = 2,UT_INSTRUCTION_PROTECTION = 3,UT_ILLTRAP_INSTRUCTION = 4,UT_ILLEGAL_INSTRUCTION = 5,UT_PRIVILEGED_OPCODE = 6,UT_FP_DISABLED = 7,UT_FP_EXCEPTION_IEEE_754 = 8,UT_FP_EXCEPTION_OTHER = 9,UT_TAG_OVERFLOW = 10,UT_DIVISION_BY_ZERO = 11,UT_DATA_EXCEPTION = 12,UT_DATA_ERROR = 13,UT_DATA_PROTECTION = 14,UT_MEM_ADDRESS_NOT_ALIGNED = 15,UT_PRIVILEGED_ACTION = 16,UT_ASYNC_DATA_ERROR = 17,UT_TRAP_INSTRUCTION_16 = 18,UT_TRAP_INSTRUCTION_17 = 19,UT_TRAP_INSTRUCTION_18 = 20,UT_TRAP_INSTRUCTION_19 = 21,UT_TRAP_INSTRUCTION_20 = 22,UT_TRAP_INSTRUCTION_21 = 23,UT_TRAP_INSTRUCTION_22 = 24,UT_TRAP_INSTRUCTION_23 = 25,UT_TRAP_INSTRUCTION_24 = 26,UT_TRAP_INSTRUCTION_25 = 27,UT_TRAP_INSTRUCTION_26 = 28,UT_TRAP_INSTRUCTION_27 = 29,UT_TRAP_INSTRUCTION_28 = 30,UT_TRAP_INSTRUCTION_29 = 31,UT_TRAP_INSTRUCTION_30 = 32,UT_TRAP_INSTRUCTION_31 = 33,};
enum MACRO_UTMAXTYPE {UTMAXTYPE = 9,};
enum MACRO_UTRAP {UTRAP_V8P_FP_DISABLED = 7,UTRAP_V8P_MEM_ADDRESS_NOT_ALIGNED = 15,};
enum MACRO_UTS {UTS_UNAME = 0x0,UTS_USTAT = 0x2,UTS_FUSERS = 0x3,};
enum MACRO_UT_PRECISE {UT_PRECISE_MAXTRAPS = 33,};
enum MACRO_UT_UNMOUNTED {UT_UNMOUNTED = 0,UT_MOUNTED = 1,UT_HLOCKING = 2,};
enum MACRO_UVSCN {UVSCN = 0x5F,};
enum MACRO_V {V_NUMPAR = 8,};
enum MACRO_V9 : __int64 {V9_IMPLVER = 0xFE,V9_PSR_IMPLVER = 0xFE000000,};
enum MACRO_VALID {VALID_ATTR = 55,};
enum MACRO_VBC {VBC_VBR_FRAMEBASE = 0xFFF000,VBC_VBR_FBSHIFT = 0xC,VBC_MCR_VCONFIG = 0xC,VBC_MCR_TRC = 0x2,VBC_MCR_REN = 0x1,VBC_VCR_RRI = 0x3FF,VBC_VCA_HIRES = 0x2000,VBC_VCA_VRAM = 0x1000,VBC_VCA_VERS = 0xC00,VBC_VCA_VERSHIFT = 0xA,VBC_VCA_CAD = 0x3FF,};
enum MACRO_VCEOF {VCEOF = 8,};
enum MACRO_VCEOL {VCEOL = 9,};
enum MACRO_VDISCARD {VDISCARD = 13,};
enum MACRO_VDSUSP {VDSUSP = 11,};
enum MACRO_VE {VE_EXIST = 0x1,VE_FTYPE = 0x2,VE_ATTR = 0x4,VE_CONT = 0x8,VE_FAIL = 0x10,VE_TIME = 0x20,};
enum MACRO_VEOL {VEOL = 5,};
enum MACRO_VEOL2 {VEOL2 = 6,};
enum MACRO_VER {VER_NDX_LOCAL = 0,VER_NDX_GLOBAL = 1,VER_NDX_LORESERVE = 65280,VER_NDX_ELIMINATE = 65281,VER_FLG_BASE = 1,VER_FLG_WEAK = 2,VER_DEF_NONE = 0,VER_DEF_CURRENT = 1,VER_DEF_NUM = 2,VER_NEED_NONE = 0,VER_NEED_CURRENT = 1,VER_NEED_NUM = 2,};
enum MACRO_VERS {CLGET_VERS = 12,CLSET_VERS = 13,};
enum MACRO_VERSION {_POSIX_VERSION = 199506,_POSIX2_VERSION = 199209,_POSIX2_C_VERSION = 199209,_XOPEN_XCU_VERSION = 4,};
enum MACRO_VERSQUIET {SVCGET_VERSQUIET = 1,SVCSET_VERSQUIET = 2,};
enum MACRO_VEXEC {VEXEC = 0x40,};
enum MACRO_VFL {VFL_ENXIO = 0x1,};
enum MACRO_VFS {VFS_NOFORCEOPT = 0x1,VFS_DISPLAY = 0x2,VFS_NODISPLAY = 0x4,VFS_CREATEOPT = 0x8,VFS_RDONLY = 0x1,VFS_NOMNTTAB = 0x2,VFS_NOSUID = 0x8,VFS_REMOUNT = 0x10,VFS_NOTRUNC = 0x20,VFS_UNLINKABLE = 0x40,VFS_PXFS = 0x80,VFS_UNMOUNTED = 0x100,};
enum MACRO_VFS_LINE {VFS_LINE_MAX = 1024,VFS_TOOLONG = 1,VFS_TOOMANY = 2,VFS_TOOFEW = 3,};
enum MACRO_VHOME {VHOME = 0x46,};
enum MACRO_VID {VID_NORM = 0x0,VID_UL = 0x1,VID_BLNK = 0x2,VID_REV = 0x4,VID_DIM = 0x8,VID_BOLD = 0x10,VID_OFF = 0x20,};
enum MACRO_VIDLEN {VIDLEN = 8,PIDLEN = 16,};
enum MACRO_VIDMAX {VIDMAX = 8,PIDMAX = 16,};
enum MACRO_VIFF {VIFF_TUNNEL = 0x1,VIFF_SRCRT = 0x2,VIFF_REGISTER = 0x4,};
enum MACRO_VIM {VIM_FLOPPY = 0x1,VIM_RDONLY = 0x2,};
enum MACRO_VINTR {VINTR = 0,VQUIT = 1,VERASE = 2,};
enum MACRO_VIOC {VIOC = 22016,};
enum MACRO_VIOCF {VIOCF = 17920,};
enum MACRO_VIS {VIS_MAXNAMELEN = 128,VIS_GETIDENTIFIER = 22016,VIS_SETCURSOR = 17944,VIS_GETCURSOR = 17945,VIS_CURSOR_SETCURSOR = 1,VIS_CURSOR_SETPOSITION = 2,VIS_CURSOR_SETHOTSPOT = 4,VIS_CURSOR_SETCOLORMAP = 8,VIS_CURSOR_SETSHAPE = 16,VIS_CURSOR_SETALL = 31,VIS_MOVECURSOR = 17946,VIS_GETCURSORPOS = 17947,VIS_GETCMAP = 22025,VIS_PUTCMAP = 22026,VIS_CONS_MODE_CHANGE = 22027,};
enum MACRO_VKEY {VKEY_FIRST = 32512,VKEY_UP = 0,VKEY_DOWN = 1,VKEY_KBD_CODES = 128,VKEY_FIRSTPSEUDO = 32512,VKEY_LASTPSEUDO = 32527,VKEY_FIRSTSHIFT = 32528,};
enum MACRO_VKEY_LASTFUNC {VKEY_LASTFUNC = 32617,VKEY_FIRSTPAD = 32618,VKEY_PADEQUAL = 32618,VKEY_PADSLASH = 32619,VKEY_PADSTAR = 32620,VKEY_PADMINUS = 32621,VKEY_PADSEP = 32622,VKEY_PAD7 = 32623,VKEY_PAD8 = 32624,VKEY_PAD9 = 32625,VKEY_PADPLUS = 32626,VKEY_PAD4 = 32627,VKEY_PAD5 = 32628,VKEY_PAD6 = 32629,VKEY_PAD1 = 32630,VKEY_PAD2 = 32631,VKEY_PAD3 = 32632,VKEY_PAD0 = 32633,VKEY_PADDOT = 32634,VKEY_PADENTER = 32635,VKEY_LASTPAD = 32635,VKEY_LAST = 32639,};
enum MACRO_VKEY_LASTSHIFT {VKEY_LASTSHIFT = 32543,VKEY_FIRSTFUNC = 32544,};
enum MACRO_VKILL {VKILL = 3,VEOF = 4,};
enum MACRO_VLNEXT {VLNEXT = 15,};
enum MACRO_VLOC {VLOC_FIRST = 32640,};
enum MACRO_VLOC_BATCH {VLOC_BATCH = 32644,VLOC_LAST = 32645,};
enum MACRO_VM {VM_SLEEP = 0x0,VM_NOSLEEP = 0x1,VM_PANIC = 0x2,VM_KMFLAGS = 0xFF,VM_BESTFIT = 0x100,};
enum MACRO_VMAGLEN {VMAGLEN = 8,};
enum MACRO_VMEM {VMEM_ALLOC = 0x1,VMEM_FREE = 0x2,VMEM_SPAN = 0x10,};
enum MACRO_VMIN {VMIN = 4,};
enum MACRO_VOL {VOL_RSV_MAXIDLEN = 256,};
enum MACRO_VOLID : __int64 {VOLID_TMP = 0xFF00000000000000,};
enum MACRO_VOLIOC {VOLIOC = 30208,};
enum MACRO_VOLIOCCANCEL {VOLIOCCANCEL = 30218,};
enum MACRO_VOLIOCCHECK {VOLIOCCHECK = 30213,};
enum MACRO_VOLIOCDAEMON {VOLIOCDAEMON = 30223,};
enum MACRO_VOLIOCDCHECK {VOLIOCDCHECK = 30217,};
enum MACRO_VOLIOCDGATTR {VOLIOCDGATTR = 30215,};
enum MACRO_VOLIOCDINUSE {VOLIOCDINUSE = 30222,};
enum MACRO_VOLIOCDROOT {VOLIOCDROOT = 30225,};
enum MACRO_VOLIOCDSATTR {VOLIOCDSATTR = 30216,};
enum MACRO_VOLIOCDSYMDEV {VOLIOCDSYMDEV = 30229,};
enum MACRO_VOLIOCDSYMNAME {VOLIOCDSYMNAME = 30228,};
enum MACRO_VOLIOCEJECT {VOLIOCEJECT = 30212,};
enum MACRO_VOLIOCEVENT {VOLIOCEVENT = 30211,};
enum MACRO_VOLIOCFLAGS {VOLIOCFLAGS = 30224,};
enum MACRO_VOLIOCGATTR {VOLIOCGATTR = 30221,};
enum MACRO_VOLIOCINFO {VOLIOCINFO = 30219,};
enum MACRO_VOLIOCINUSE {VOLIOCINUSE = 30214,};
enum MACRO_VOLIOCMAP {VOLIOCMAP = 30209,};
enum MACRO_VOLIOCREMOUNT {VOLIOCREMOUNT = 30231,};
enum MACRO_VOLIOCROOT {VOLIOCROOT = 30226,};
enum MACRO_VOLIOCSATTR {VOLIOCSATTR = 30220,};
enum MACRO_VOLIOCSYMDEV {VOLIOCSYMDEV = 30230,};
enum MACRO_VOLIOCSYMNAME {VOLIOCSYMNAME = 30227,};
enum MACRO_VOLIOCUNMAP {VOLIOCUNMAP = 30210,};
enum MACRO_VOL_SYMDEV {VOL_SYMDEV_LEN = 1024,VOL_SYMNAME_LEN = 256,};
enum MACRO_VP {VP_ADVICE_MASK = 0x7,VP_PPLOCK_MASK = 0x80,VP_PPLOCK_SHIFT = 0x7,};
enum MACRO_VREAD {VREAD = 0x100,};
enum MACRO_VREPRINT {VREPRINT = 12,};
enum MACRO_VROOT {VROOT = 0x1,VNOCACHE = 0x2,VNOMAP = 0x4,VDUP = 0x8,VNOSWAP = 0x10,VNOMOUNT = 0x20,VISSWAP = 0x40,VSWAPLIKE = 0x80,VVFSLOCK = 0x100,VVFSWAIT = 0x200,VVMLOCK = 0x400,VDIROPEN = 0x800,VVMEXEC = 0x1000,VPXFS = 0x2000,};
enum MACRO_VSA {VSA_ACL = 0x1,VSA_ACLCNT = 0x2,VSA_DFACL = 0x4,VSA_DFACLCNT = 0x8,};
enum MACRO_VSGID {VSGID = 0x400,};
enum MACRO_VSTOP {VSTOP = 9,};
enum MACRO_VSUID {VSUID = 0x800,};
enum MACRO_VSUSP {VSUSP = 10,};
enum MACRO_VSVTX {VSVTX = 0x200,};
enum MACRO_VSW {VSW_HASPROTO = 0x1,VSW_CANRWRO = 0x2,};
enum MACRO_VSWTCH {VSWTCH = 7,VSTART = 8,};
enum MACRO_VT {VT_ERROR = -2,VT_EIO = -3,VT_EINVAL = -4,};
enum MACRO_VT0 {VT0 = 0,VT1 = 16384,FFDLY = 32768,};
enum MACRO_VTAB {VTAB = 5,};
enum MACRO_VTIME {VTIME = 5,};
enum MACRO_VTOC {VTOC_SANE = 0x600DDEEE,};
enum MACRO_VTR {VTR_INIT = 0,VTR_FILE = 1,VTR_EVENTMAP = 2,VTR_EVENT = 3,VTR_START = 4,VTR_PAUSE = 5,VTR_RESUME = 6,VTR_INFO = 7,VTR_FLUSH = 8,VTR_RESET = 9,VTR_TEST = 10,VTR_PROCESS = 11,VTR_GET_STRING = 12,VTR_INFO_GLOBAL = 0,VTR_INFO_PERCPU = 1,VTR_NOFORCE = 0,VTR_FORCE = 1,VTR_STATE_NULL = 1,VTR_STATE_READY = 2,VTR_STATE_PAUSE = 4,VTR_STATE_ACTIVE = 8,VTR_STATE_PERPROC = 16,VTR_STATE_HALTED = 32,VTR_PROCESS_NULL = 1,VTR_PROCESS_TRACE = 2,VTR_PROCESS_NOTRACE = 4,};
enum MACRO_VT_ENABLED {VT_ENABLED = 0x80,VT_USED = 0x40,VT_STRING_5 = 0x10,VT_STRING_4 = 0x8,VT_STRING_3 = 0x4,VT_STRING_2 = 0x2,VT_STRING_1 = 0x1,VT_STRING_MASK = 0x1F,VT_MAPSIZE = 0x10000,};
enum MACRO_VT_VERSION {VT_VERSION_MAJOR = 3,VT_VERSION_MINOR = 0,VT_VERSION_MICRO = 0,VT_FAC_SHIFT = 24,VT_FAC_MASK = 255,VT_TAG_SHIFT = 16,VT_TAG_MASK = 255,VT_EVENT_SHIFT = 16,VT_EVENT_MASK = 65535,VT_TIME_SHIFT = 0,VT_TIME_MASK = 65535,VT_MAX_FAC = 255,VT_MAX_TAG = 255,VT_MAX_EVENT = 65535,VT_MAX_WORDS = 64,VT_MAX_BYTES = 256,};
enum MACRO_VUID {VUID_SEG_SIZE = 256,};
enum MACRO_VUIDGADDR {VUIDGADDR = 30212,};
enum MACRO_VUIDGFORMAT {VUIDGFORMAT = 30210,};
enum MACRO_VUIDSADDR {VUIDSADDR = 30211,};
enum MACRO_VUIDSFORMAT {VUIDSFORMAT = 30209,};
enum MACRO_VUID_NATIVE {VUID_NATIVE = 0,VUID_FIRM_EVENT = 1,};
enum MACRO_VUID_QUEUE {VUID_QUEUE_NULL = 0,VUID_Q_NODE_NULL = 0,VUID_STATE_NULL = 0,VUID_VALUE_NULL = 0,VUID_SEG_NULL = 0,};
enum MACRO_VUIOC {VUIOC = 30208,};
enum MACRO_VVOLLEN {VVOLLEN = 6,VFILLEN = 464,};
enum MACRO_VWERASE {VWERASE = 14,};
enum MACRO_VWRITE {VWRITE = 0x80,};
enum MACRO_V_VERSION {V_VERSION = 0x1,V_UNASSIGNED = 0x0,V_BOOT = 0x1,V_ROOT = 0x2,V_SWAP = 0x3,V_USR = 0x4,V_BACKUP = 0x5,V_STAND = 0x6,V_VAR = 0x7,V_HOME = 0x8,V_ALTSCTR = 0x9,V_CACHE = 0xA,V_UNMNT = 0x1,V_RONLY = 0x10,};
enum MACRO_W {W_IO = 0,W_SWAP = 1,W_PIO = 2,W_STATES = 3,};
enum MACRO_WA {WA_READ = 0x4,WA_WRITE = 0x2,WA_EXEC = 0x1,WA_TRAPAFTER = 0x8,};
enum MACRO_WALK {WALK_ERR = -1,WALK_NEXT = 0,WALK_DONE = 1,};
enum MACRO_WALLPROC {WALLPROC_WALL = 2,};
enum MACRO_WALLPROG {WALLPROG = 100008,};
enum MACRO_WALLVERS {WALLVERS = 1,};
enum MACRO_WCHAR {WCHAR_MAX = 2147483647,WCHAR_MIN = -2147483648,};
enum MACRO_WCHAR_CS0 {WCHAR_CS0 = 0x0,WCHAR_CS1 = 0x30000000,WCHAR_CS2 = 0x10000000,WCHAR_CS3 = 0x20000000,};
enum MACRO_WCHAR_SHIFT {WCHAR_SHIFT = 7,WCHAR_S_MASK = 127,WCHAR_CSMASK = 805306368,};
enum MACRO_WCONTFLG {WCONTFLG = 0xFFFF,};
enum MACRO_WCOREFLG {WCOREFLG = 0x80,};
enum MACRO_WEOF {WEOF = -1,};
enum MACRO_WERRMASK {WERRMASK = 12,};
enum MACRO_WEXITED {WEXITED = 0x1,WTRAPPED = 0x2,WSTOPPED = 0x4,WCONTINUED = 0x8,WNOWAIT = 0x80,_WNOCHLD = 0x100,};
enum MACRO_WILL {WILL = 251,};
enum MACRO_WINDOWSIZE {WINDOWSIZE = 64,};
enum MACRO_WINDOWSIZE32 {WINDOWSIZE32 = 64,};
enum MACRO_WLOCK {HWORD_WLOCK = 0xFFFF,WORD_WLOCK = 0xFFFFFFFF,};
enum MACRO_WONT {WONT = 252,};
enum MACRO_WOPTMASK {WOPTMASK = 463,};
enum MACRO_WORLD {WORLD_DEFAULT = 1,GROUP_DEFAULT = 256,OWNER_DEFAULT = 983040,};
enum MACRO_WP {WP_NOWATCH = 0x1,WP_SETPROT = 0x2,};
enum MACRO_WRDE {WRDE_APPEND = 0x1,WRDE_DOOFFS = 0x2,WRDE_NOCMD = 0x4,WRDE_REUSE = 0x8,WRDE_SHOWERR = 0x10,WRDE_UNDEF = 0x20,WRDE_ERRNO = 0x2,WRDE_BADCHAR = 0x3,WRDE_BADVAL = 0x4,WRDE_CMDSUB = 0x5,WRDE_NOSPACE = 0x6,WRDE_SYNTAX = 0x7,WRDE_NOSYS = 0x8,};
enum MACRO_WRITER {WRITER_LOCK = 0x0,READER_LOCK = 0x1,};
enum MACRO_WRTCMD {WRTCMD = 0x5,};
enum MACRO_WRTDEL {WRTDEL = 0x9,};
enum MACRO_WSIGMASK {WSIGMASK = 0x7F,};
enum MACRO_WSTOPFLG {WSTOPFLG = 0x7F,};
enum MACRO_WUNTRACED {WUNTRACED = 0x4,WNOHANG = 0x40,};
enum MACRO_X86BOOT {X86BOOT = 190,};
enum MACRO_XCIBRG {XCIBRG = 0x0,XCTSET = 0x1,XCRSET = 0x2,RCVCLK = 0x38,};
enum MACRO_XDR {XDR_GET_BYTES_AVAIL = 1,};
enum MACRO_XID {CLGET_XID = 10,CLSET_XID = 11,};
enum MACRO_XIOC {XIOC = 22528,};
enum MACRO_XMIT {XMIT_DATA = 2,RCV_DATA = 3,};
enum MACRO_XMTCLK {XMTCLK = 0x7,};
enum MACRO_XMTR {XMTR_DIS = 0x4,XMTR_ENA = 0x8,};
enum MACRO_XMTWR {XMTWR = 3,DSPRD = 4,};
enum MACRO_XOFF {XOFF_2 = 0x0,XOFF_24 = 0x40,};
enum MACRO_XON {XON_1 = 0x0,XON_13 = 0x80,};
enum MACRO_XPG4 {XPG4_1 = 0x4,};
enum MACRO_XR {XR_G0 = 0,XR_G1 = 1,XR_G2 = 2,XR_G3 = 3,XR_G4 = 4,XR_G5 = 5,XR_G6 = 6,XR_G7 = 7,};
enum MACRO_XRS {XRS_ID = 0x78727300,};
enum MACRO_XR_O0 {XR_O0 = 0,XR_O1 = 1,XR_O2 = 2,XR_O3 = 3,XR_O4 = 4,XR_O5 = 5,XR_O6 = 6,XR_O7 = 7,};
enum MACRO_XR_TYPE {XR_TYPE_V8P = 1,};
enum MACRO_XTI {XTI_GENERIC = 0xFFFE,XTI_DEBUG = 0x1,XTI_LINGER = 0x80,XTI_RCVBUF = 0x1002,XTI_RCVLOWAT = 0x1004,XTI_SNDBUF = 0x1001,XTI_SNDLOWAT = 0x1003,};
enum MACRO_Y {Y = 3,G1 = 4,};
enum MACRO_YEARMASK {YEARMASK = 0x7F,};
enum MACRO_YEARSHIFT {YEARSHIFT = 9,};
enum MACRO_YESEXPR {YESEXPR = 56,};
enum MACRO_YESSTR {YESSTR = 41,};
enum MACRO_YPERR {YPERR_BADARGS = 1,YPERR_RPC = 2,YPERR_DOMAIN = 3,YPERR_MAP = 4,YPERR_KEY = 5,YPERR_YPERR = 6,YPERR_RESRC = 7,YPERR_NOMORE = 8,YPERR_PMAP = 9,YPERR_YPBIND = 10,YPERR_YPSERV = 11,YPERR_NODOM = 12,YPERR_BADDB = 13,YPERR_VERS = 14,YPERR_ACCESS = 15,YPERR_BUSY = 16,};
enum MACRO_YPOP {YPOP_CHANGE = 1,YPOP_INSERT = 2,YPOP_DELETE = 3,YPOP_STORE = 4,};
enum MACRO_YPPASSWDPROC {YPPASSWDPROC_UPDATE = 1,};
enum MACRO_YPPASSWDPROG {YPPASSWDPROG = 100009,};
enum MACRO_YPPASSWDVERS {YPPASSWDVERS = 1,};
enum MACRO_YPU {YPU_PROG = 100028,YPU_VERS = 1,YPU_CHANGE = 1,YPU_INSERT = 2,YPU_DELETE = 3,YPU_STORE = 4,};
enum MACRO_ZFIFOSZ {ZFIFOSZ = 3,};
enum MACRO_ZMAGIC {ZMAGIC = 0x10B,};
enum MACRO_ZMH {ZMH_VC = 1,ZMH_DG = 2,ZMH_AUTH = 4,};
enum MACRO_ZS {ZS_ON = 130,ZS_OFF = 0,};
enum MACRO_ZSH {ZSH_MAX_RSTANDBY = 6,ZSH_RDONE_MAX = 20,};
enum MACRO_ZSP {ZSP_SYNC = 0x1,ZSP_NRZI = 0x2,ZSP_PLL = 0x4,ZSP_LOOP = 0x8,ZSP_PARITY_SPECIAL = 0x10,ZSP_ECHO = 0x20,};
enum MACRO_ZSR15 {ZSR15_TIMER = 0x2,ZSR15_CD = 0x8,ZSR15_SYNC = 0x10,ZSR15_CTS = 0x20,ZSR15_TX_UNDER = 0x40,ZSR15_BREAK = 0x80,};
enum MACRO_ZSR2 {ZSR2_TX_EMPTY_B = 0x0,ZSR2_XSINT_B = 0x2,ZSR2_RX_AVAIL_B = 0x4,ZSR2_SRINT_B_OR_NONE = 0x6,ZSR2_TX_EMPTY_A = 0x8,ZSR2_XSINT_A = 0xA,ZSR2_RX_AVAIL_A = 0xC,ZSR2_SRINT_A = 0xE,ZSR2_STATUS_ALL = 0xE,};
enum MACRO_ZSRR0 {ZSRR0_RX_READY = 0x1,ZSRR0_TIMER = 0x2,ZSRR0_TX_READY = 0x4,ZSRR0_CD = 0x8,ZSRR0_SYNC = 0x10,ZSRR0_CTS = 0x20,ZSRR0_TXUNDER = 0x40,ZSRR0_BREAK = 0x80,};
enum MACRO_ZSRR1 {ZSRR1_ALL_SENT = 0x1,ZSRR1_PE = 0x10,ZSRR1_DO = 0x20,ZSRR1_FE = 0x40,ZSRR1_RXEOF = 0x80,};
enum MACRO_ZSRR3 {ZSRR3_IP_B_STAT = 0x1,ZSRR3_IP_B_TX = 0x2,ZSRR3_IP_B_RX = 0x4,ZSRR3_IP_A_STAT = 0x8,ZSRR3_IP_A_TX = 0x10,ZSRR3_IP_A_RX = 0x20,};
enum MACRO_ZSWR0 {ZSWR0_REG = 0xF,ZSWR0_RESET_STATUS = 0x10,ZSWR0_SEND_ABORT = 0x18,ZSWR0_FIRST_RX = 0x20,ZSWR0_RESET_TXINT = 0x28,ZSWR0_RESET_ERRORS = 0x30,ZSWR0_CLR_INTR = 0x38,ZSWR0_RESET_RXCRC = 0x40,ZSWR0_RESET_TXCRC = 0x80,ZSWR0_RESET_EOM = 0xC0,};
enum MACRO_ZSWR1 {ZSWR1_SIE = 0x1,ZSWR1_TIE = 0x2,ZSWR1_PARITY_SPECIAL = 0x4,ZSWR1_RIE_FIRST_SPECIAL = 0x8,ZSWR1_RIE = 0x10,ZSWR1_RIE_SPECIAL_ONLY = 0x18,ZSWR1_REQ_IS_RX = 0x20,ZSWR1_REQ_NOT_WAIT = 0x40,ZSWR1_REQ_ENABLE = 0x80,};
enum MACRO_ZSWR10 {ZSWR10_UNDERRUN_ABORT = 0x4,ZSWR10_NRZI = 0x20,ZSWR10_PRESET_ONES = 0x80,};
enum MACRO_ZSWR11 {ZSWR11_TRXC_XTAL = 0x0,ZSWR11_TRXC_XMIT = 0x1,ZSWR11_TRXC_BAUD = 0x2,ZSWR11_TRXC_DPLL = 0x3,ZSWR11_TRXC_OUT_ENA = 0x4,ZSWR11_TXCLK_RTXC = 0x0,ZSWR11_TXCLK_TRXC = 0x8,ZSWR11_TXCLK_BAUD = 0x10,ZSWR11_TXCLK_DPLL = 0x18,ZSWR11_RXCLK_RTXC = 0x0,ZSWR11_RXCLK_TRXC = 0x20,ZSWR11_RXCLK_BAUD = 0x40,ZSWR11_RXCLK_DPLL = 0x60,ZSWR11_RTXC_XTAL = 0x80,};
enum MACRO_ZSWR14 {ZSWR14_BAUD_ENA = 0x1,ZSWR14_BAUD_FROM_PCLK = 0x2,ZSWR14_DTR_IS_REQUEST = 0x4,ZSWR14_AUTO_ECHO = 0x8,ZSWR14_LOCAL_LOOPBACK = 0x10,ZSWR14_DPLL_NOP = 0x0,ZSWR14_DPLL_SEARCH = 0x20,ZSWR14_DPLL_RESET = 0x40,ZSWR14_DPLL_DISABLE = 0x60,ZSWR14_DPLL_SRC_BAUD = 0x80,ZSWR14_DPLL_SRC_RTXC = 0xA0,ZSWR14_DPLL_FM = 0xC0,ZSWR14_DPLL_NRZI = 0xE0,};
enum MACRO_ZSWR1_INIT {ZSWR1_INIT = 19,};
enum MACRO_ZSWR3 {ZSWR3_RX_ENABLE = 0x1,ZSWR3_RXCRC_ENABLE = 0x8,ZSWR3_HUNT = 0x10,ZSWR3_AUTO_CD_CTS = 0x20,ZSWR3_RX_5 = 0x0,ZSWR3_RX_6 = 0x80,ZSWR3_RX_7 = 0x40,ZSWR3_RX_8 = 0xC0,};
enum MACRO_ZSWR4 {ZSWR4_PARITY_ENABLE = 0x1,ZSWR4_PARITY_EVEN = 0x2,ZSWR4_1_STOP = 0x4,ZSWR4_1_5_STOP = 0x8,ZSWR4_2_STOP = 0xC,ZSWR4_BISYNC = 0x10,ZSWR4_SDLC = 0x20,ZSWR4_X1_CLK = 0x0,ZSWR4_X16_CLK = 0x40,ZSWR4_X32_CLK = 0x80,ZSWR4_X64_CLK = 0xC0,};
enum MACRO_ZSWR5 {ZSWR5_TXCRC_ENABLE = 0x1,ZSWR5_RTS = 0x2,ZSWR5_CRC16 = 0x4,ZSWR5_TX_ENABLE = 0x8,ZSWR5_BREAK = 0x10,ZSWR5_TX_5 = 0x0,ZSWR5_TX_6 = 0x40,ZSWR5_TX_7 = 0x20,ZSWR5_TX_8 = 0x60,ZSWR5_DTR = 0x80,};
enum MACRO_ZSWR9 {ZSWR9_VECTOR_INCL_STAT = 0x1,ZSWR9_NO_VECTOR = 0x2,ZSWR9_DIS_LOWER_CHAIN = 0x4,ZSWR9_MASTER_IE = 0x8,ZSWR9_STAT_HIGH = 0x10,ZSWR9_RESET_CHAN_B = 0x40,ZSWR9_RESET_CHAN_A = 0x80,ZSWR9_RESET_WORLD = 0xC0,};
enum MACRO_ZS_MAX {ZS_MAX_PRIV_STR = 800,ZS_NEEDSOFT = 1,ZS_PL = 1536,ZS_PL_HI = 3072,};
enum MACRO__ALIGNMENT {_ALIGNMENT_REQUIRED = 1,};
enum MACRO__ARG {_ARG_MAX32 = 1048320,_ARG_MAX64 = 2096640,};
enum MACRO__CANT {_CANT_BE_IMMED = 0x10,};
enum MACRO__CAT {_CAT_MAGIC = 0xFF88FF89,};
enum MACRO__COLL {_COLL_FORWARD_MASK = 0x1,_COLL_BACKWARD_MASK = 0x2,_COLL_NOSUBS_MASK = 0x4,_COLL_POSITION_MASK = 0x8,_COLL_SUBS_MASK = 0x10,};
enum MACRO__CONFIG {_CONFIG_NGROUPS = 2,_CONFIG_CHILD_MAX = 3,_CONFIG_OPEN_FILES = 4,_CONFIG_POSIX_VER = 5,_CONFIG_PAGESIZE = 6,_CONFIG_CLK_TCK = 7,_CONFIG_XOPEN_VER = 8,_CONFIG_PROF_TCK = 10,_CONFIG_NPROC_CONF = 11,_CONFIG_NPROC_ONLN = 12,_CONFIG_AIO_LISTIO_MAX = 13,_CONFIG_AIO_MAX = 14,_CONFIG_AIO_PRIO_DELTA_MAX = 15,_CONFIG_DELAYTIMER_MAX = 16,_CONFIG_MQ_OPEN_MAX = 17,_CONFIG_MQ_PRIO_MAX = 18,_CONFIG_RTSIG_MAX = 19,_CONFIG_SEM_NSEMS_MAX = 20,_CONFIG_SEM_VALUE_MAX = 21,_CONFIG_SIGQUEUE_MAX = 22,_CONFIG_SIGRT_MIN = 23,_CONFIG_SIGRT_MAX = 24,_CONFIG_TIMER_MAX = 25,_CONFIG_PHYS_PAGES = 26,_CONFIG_AVPHYS_PAGES = 27,_CONFIG_COHERENCY = 28,_CONFIG_SPLIT_CACHE = 29,_CONFIG_ICACHESZ = 30,_CONFIG_DCACHESZ = 31,_CONFIG_ICACHELINESZ = 32,_CONFIG_DCACHELINESZ = 33,_CONFIG_ICACHEBLKSZ = 34,_CONFIG_DCACHEBLKSZ = 35,_CONFIG_DCACHETBLKSZ = 36,_CONFIG_ICACHE_ASSOC = 37,_CONFIG_DCACHE_ASSOC = 38,_CONFIG_MAXPID = 42,_CONFIG_STACK_PROT = 43,};
enum MACRO__CPCIO {_CPCIO_IOC = 1668309760,};
enum MACRO__CS {_CS_PATH = 65,_CS_LFS_CFLAGS = 68,_CS_LFS_LDFLAGS = 69,_CS_LFS_LIBS = 70,_CS_LFS_LINTFLAGS = 71,_CS_LFS64_CFLAGS = 72,_CS_LFS64_LDFLAGS = 73,_CS_LFS64_LIBS = 74,_CS_LFS64_LINTFLAGS = 75,_CS_XBS5_ILP32_OFF32_CFLAGS = 700,_CS_XBS5_ILP32_OFF32_LDFLAGS = 701,_CS_XBS5_ILP32_OFF32_LIBS = 702,_CS_XBS5_ILP32_OFF32_LINTFLAGS = 703,_CS_XBS5_ILP32_OFFBIG_CFLAGS = 705,_CS_XBS5_ILP32_OFFBIG_LDFLAGS = 706,_CS_XBS5_ILP32_OFFBIG_LIBS = 707,_CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 708,_CS_XBS5_LP64_OFF64_CFLAGS = 709,_CS_XBS5_LP64_OFF64_LDFLAGS = 710,_CS_XBS5_LP64_OFF64_LIBS = 711,_CS_XBS5_LP64_OFF64_LINTFLAGS = 712,_CS_XBS5_LPBIG_OFFBIG_CFLAGS = 713,_CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 714,_CS_XBS5_LPBIG_OFFBIG_LIBS = 715,_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 716,};
enum MACRO__D {_D_OLD = 0x1,};
enum MACRO__DATE {_DATE_FMT = 58,};
enum MACRO__DBM {_DBM_RDONLY = 0x1,_DBM_IOERR = 0x2,};
enum MACRO__DEXPLEN {_DEXPLEN = 11,};
enum MACRO__DMCM1 {_DMCM1 = 15,};
enum MACRO__D_MTCBSHARED {_D_MTCBSHARED = 0x10000,};
enum MACRO__D_QNEXTLESS {_D_QNEXTLESS = 0x40,_D_MTOCSHARED = 0x80,};
enum MACRO__E1 {_E1 = 0x100,_E2 = 0x200,_E3 = 0x400,_E4 = 0x800,_E5 = 0x1000,_E6 = 0x2000,_E7 = 0x4000,_E8 = 0x8000,_E9 = 0x10000,_E10 = 0x20000,_E11 = 0x40000,_E12 = 0x80000,_E13 = 0x100000,_E14 = 0x200000,_E15 = 0x400000,_E16 = 0x800000,_E17 = 0x1000000,_E18 = 0x2000000,_E19 = 0x4000000,_E20 = 0x8000000,_E21 = 0x10000000,_E22 = 0x20000000,_E23 = 0x40000000,_E24 = 0x80000000,};
enum MACRO__FILE {_FILE_OFFSET_BITS = 32,};
enum MACRO__FIOBOINFO {_FIOBOINFO = 536897103,};
enum MACRO__FIOCNVTMNT {_FIOCNVTMNT = 536897104,};
enum MACRO__FIOCOD {_FIOCOD = 536897102,};
enum MACRO__FIODIRECTIO {_FIODIRECTIO = 536897100,};
enum MACRO__FIOFFS {_FIOFFS = 536897090,};
enum MACRO__FIOGDIO {_FIOGDIO = 536897094,};
enum MACRO__FIOIO {_FIOIO = 536897095,};
enum MACRO__FIOISBUSY {_FIOISBUSY = 536897099,};
enum MACRO__FIOISLOG {_FIOISLOG = 536897096,};
enum MACRO__FIOISLOGOK {_FIOISLOGOK = 536897097,};
enum MACRO__FIOLFS {_FIOLFS = 536897088,};
enum MACRO__FIOLFSS {_FIOLFSS = 536897089,};
enum MACRO__FIOLOGDISABLE {_FIOLOGDISABLE = 536897111,};
enum MACRO__FIOLOGENABLE {_FIOLOGENABLE = 536897110,};
enum MACRO__FIOLOGRESET {_FIOLOGRESET = 536897098,};
enum MACRO__FIOOBSOLETE67 {_FIOOBSOLETE67 = 536897091,};
enum MACRO__FIOSATIME {_FIOSATIME = 536897092,};
enum MACRO__FIOSDIO {_FIOSDIO = 536897093,};
enum MACRO__FIOSTOPCACHE {_FIOSTOPCACHE = 536897110,};
enum MACRO__FIOTUNE {_FIOTUNE = 536897101,};
enum MACRO__FSTYPSZ {_FSTYPSZ = 16,};
enum MACRO__HIDDENBIT {_HIDDENBIT = 1,};
enum MACRO__I {_I_MUXID2FD = 0x532E,_I_INSERT = 0x532F,_I_REMOVE = 0x5330,};
enum MACRO__IEEE {_IEEE = 1,};
enum MACRO__IN {_IN_DRIVER = 0x2,};
enum MACRO__INFINITY {_INFINITY = 16000,};
enum MACRO__INFTIM {_INFTIM = -1,};
enum MACRO__IOFBF {_IOFBF = 0x0,_IOLBF = 0x40,};
enum MACRO__IOMYBUF {_IOMYBUF = 0x8,};
enum MACRO__IONBF {_IONBF = 0x4,_IOEOF = 0x10,_IOERR = 0x20,};
enum MACRO__IOREAD {_IOREAD = 0x1,_IOWRT = 0x2,_IORW = 0x80,};
enum MACRO__ISALNUM {_ISALNUM = 16388,};
enum MACRO__ISPAD {_ISPAD = 0x1,_WINCHANGED = 0x2,_WINMOVED = 0x4,_WINSDEL = 0x8,};
enum MACRO__ISUPPER {_ISUPPER = 1,_ISLOWER = 2,_ISDIGIT = 4,_ISSPACE = 8,_ISPUNCT = 16,_ISCNTRL = 32,_ISBLANK = 64,_ISXDIGIT = 128,_ISGRAPH = 8192,_ISALPHA = 16384,_ISPRINT = 32768,};
enum MACRO__JBLEN {_JBLEN = 12,_SIGJBLEN = 19,};
enum MACRO__LC {_LC_MAGIC = 0x5F1,_LC_VERSION_MAJOR = 0x2,_LC_VERSION_MINOR = 0x0,};
enum MACRO__LC_MAX {_LC_MAX_OBJECTS = 256,};
enum MACRO__LENBASE {_LENBASE = 1,_EXPBASE = 2,_FEXPLEN = 8,DMAXEXP = 1024,};
enum MACRO__LFS64 {_LFS64_STDIO = 1,_LFS64_ASYNCHRONOUS_IO = 1,};
enum MACRO__LINK {_LINK_NEEDED = 0x4,};
enum MACRO__LONG {_LONG_ALIGNMENT = 4,_LONG_DOUBLE_ALIGNMENT = 8,};
enum MACRO__LastCategory {_LastCategory = 5,};
enum MACRO__MAP {_MAP_NEW = 0x80000000,};
enum MACRO__NBBY {_NBBY = 8,};
enum MACRO__NCC {_NCC = 8,};
enum MACRO__NFILE {_NFILE = 20,};
enum MACRO__NGREG {_NGREG = 19,};
enum MACRO__NL {_NL_NUM_ITEMS = 59,};
enum MACRO__NOCHANGE {_NOCHANGE = -1,};
enum MACRO__NULL {_NULL = 0,};
enum MACRO__ONE {_ONE_ = 1,};
enum MACRO__PBLKSIZ {_PBLKSIZ = 1024,_DBLKSIZ = 4096,};
enum MACRO__PC {_PC_LINK_MAX = 1,_PC_MAX_CANON = 2,_PC_MAX_INPUT = 3,_PC_NAME_MAX = 4,_PC_PATH_MAX = 5,_PC_PIPE_BUF = 6,_PC_NO_TRUNC = 7,_PC_VDISABLE = 8,_PC_CHOWN_RESTRICTED = 9,_PC_ASYNC_IO = 10,_PC_PRIO_IO = 11,_PC_SYNC_IO = 12,_PC_FILESIZEBITS = 67,_PC_LAST = 67,};
enum MACRO__PC_ERROR {_PC_ERROR = 0,};
enum MACRO__POINTER {_POINTER_ALIGNMENT = 4,_MAX_ALIGNMENT = 8,};
enum MACRO__POSIX {_POSIX_VDISABLE = 0,};
enum MACRO__POSIX2 {_POSIX2_C_BIND = 1,_POSIX2_CHAR_TERM = 1,_POSIX2_LOCALEDEF = 1,_POSIX2_C_DEV = 1,_POSIX2_SW_DEV = 1,_POSIX2_UPE = 1,};
enum MACRO__POSIX2_BC {_POSIX2_BC_BASE_MAX = 99,_POSIX2_BC_DIM_MAX = 2048,_POSIX2_BC_SCALE_MAX = 99,_POSIX2_BC_STRING_MAX = 1000,_POSIX2_COLL_WEIGHTS_MAX = 10,_POSIX2_EXPR_NEST_MAX = 32,_POSIX2_LINE_MAX = 2048,_POSIX2_RE_DUP_MAX = 255,};
enum MACRO__POSIX_ASYNC {_POSIX_ASYNC_IO = 1,_POSIX_ASYNCHRONOUS_IO = 1,_POSIX_FSYNC = 1,_POSIX_JOB_CONTROL = 1,_POSIX_MAPPED_FILES = 1,_POSIX_MEMLOCK = 1,_POSIX_MEMLOCK_RANGE = 1,_POSIX_MEMORY_PROTECTION = 1,_POSIX_MESSAGE_PASSING = 1,_POSIX_PRIORITY_SCHEDULING = 1,_POSIX_REALTIME_SIGNALS = 1,_POSIX_SAVED_IDS = 1,_POSIX_SEMAPHORES = 1,_POSIX_SHARED_MEMORY_OBJECTS = 1,_POSIX_SYNC_IO = 1,_POSIX_SYNCHRONIZED_IO = 1,_POSIX_TIMERS = 1,_POSIX_THREAD_SAFE_FUNCTIONS = 1,_POSIX_THREADS = 1,_POSIX_THREAD_ATTR_STACKADDR = 1,_POSIX_THREAD_ATTR_STACKSIZE = 1,_POSIX_THREAD_PROCESS_SHARED = 1,_POSIX_THREAD_PRIORITY_SCHEDULING = 1,_POSIX_THREAD_PRIO_INHERIT = 1,_POSIX_THREAD_PRIO_PROTECT = 1,};
enum MACRO__POSIX_CLOCKRES {_POSIX_CLOCKRES_MIN = 20000000,_POSIX_DELAYTIMER_MAX = 32,_POSIX_LINK_MAX = 8,_POSIX_MAX_CANON = 255,_POSIX_MAX_INPUT = 255,_POSIX_MQ_OPEN_MAX = 8,_POSIX_MQ_PRIO_MAX = 32,_POSIX_NAME_MAX = 14,_POSIX_NGROUPS_MAX = 0,_POSIX_OPEN_MAX = 16,_POSIX_PATH_MAX = 255,_POSIX_PIPE_BUF = 512,_POSIX_RTSIG_MAX = 8,_POSIX_SEM_NSEMS_MAX = 256,_POSIX_SEM_VALUE_MAX = 32767,_POSIX_SIGQUEUE_MAX = 32,_POSIX_SSIZE_MAX = 32767,_POSIX_STREAM_MAX = 8,_POSIX_TIMER_MAX = 32,_POSIX_TZNAME_MAX = 3,_POSIX_LOGIN_NAME_MAX = 9,_POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4,_POSIX_THREAD_KEYS_MAX = 128,_POSIX_THREAD_THREADS_MAX = 64,_POSIX_TTY_NAME_MAX = 9,};
enum MACRO__POSTED {_POSTED = 0x1,};
enum MACRO__REG {_REG_BACKREF_MAX = 9,};
enum MACRO__RPC {_RPC_NONE = 0,_RPC_NETPATH = 1,_RPC_VISIBLE = 2,_RPC_CIRCUIT_V = 3,_RPC_DATAGRAM_V = 4,_RPC_CIRCUIT_N = 5,_RPC_DATAGRAM_N = 6,_RPC_TCP = 7,_RPC_UDP = 8,_RPC_LOCAL = 9,_RPC_DOOR = 10,_RPC_DOOR_LOCAL = 11,_RPC_DOOR_NETPATH = 12,};
enum MACRO__SBFSIZ {_SBFSIZ = 8,};
enum MACRO__SC {_SC_ARG_MAX = 1,_SC_CHILD_MAX = 2,_SC_CLK_TCK = 3,_SC_NGROUPS_MAX = 4,_SC_OPEN_MAX = 5,_SC_JOB_CONTROL = 6,_SC_SAVED_IDS = 7,_SC_VERSION = 8,_SC_PASS_MAX = 9,_SC_LOGNAME_MAX = 10,_SC_PAGESIZE = 11,_SC_XOPEN_VERSION = 12,_SC_NPROCESSORS_CONF = 14,_SC_NPROCESSORS_ONLN = 15,_SC_STREAM_MAX = 16,_SC_TZNAME_MAX = 17,_SC_AIO_LISTIO_MAX = 18,_SC_AIO_MAX = 19,_SC_AIO_PRIO_DELTA_MAX = 20,_SC_ASYNCHRONOUS_IO = 21,_SC_DELAYTIMER_MAX = 22,_SC_FSYNC = 23,_SC_MAPPED_FILES = 24,_SC_MEMLOCK = 25,_SC_MEMLOCK_RANGE = 26,_SC_MEMORY_PROTECTION = 27,_SC_MESSAGE_PASSING = 28,_SC_MQ_OPEN_MAX = 29,_SC_MQ_PRIO_MAX = 30,_SC_PRIORITIZED_IO = 31,_SC_PRIORITY_SCHEDULING = 32,_SC_REALTIME_SIGNALS = 33,_SC_RTSIG_MAX = 34,_SC_SEMAPHORES = 35,_SC_SEM_NSEMS_MAX = 36,_SC_SEM_VALUE_MAX = 37,_SC_SHARED_MEMORY_OBJECTS = 38,_SC_SIGQUEUE_MAX = 39,_SC_SIGRT_MIN = 40,_SC_SIGRT_MAX = 41,_SC_SYNCHRONIZED_IO = 42,_SC_TIMERS = 43,_SC_TIMER_MAX = 44,_SC_2_C_BIND = 45,_SC_2_C_DEV = 46,_SC_2_C_VERSION = 47,_SC_2_FORT_DEV = 48,_SC_2_FORT_RUN = 49,_SC_2_LOCALEDEF = 50,_SC_2_SW_DEV = 51,_SC_2_UPE = 52,_SC_2_VERSION = 53,_SC_BC_BASE_MAX = 54,_SC_BC_DIM_MAX = 55,_SC_BC_SCALE_MAX = 56,_SC_BC_STRING_MAX = 57,_SC_COLL_WEIGHTS_MAX = 58,_SC_EXPR_NEST_MAX = 59,_SC_LINE_MAX = 60,_SC_RE_DUP_MAX = 61,_SC_XOPEN_CRYPT = 62,_SC_XOPEN_ENH_I18N = 63,_SC_XOPEN_SHM = 64,_SC_2_CHAR_TERM = 66,_SC_XOPEN_XCU_VERSION = 67,_SC_ATEXIT_MAX = 76,_SC_IOV_MAX = 77,_SC_XOPEN_UNIX = 78,_SC_PAGE_SIZE = 11,_SC_T_IOV_MAX = 79,_SC_PHYS_PAGES = 500,_SC_AVPHYS_PAGES = 501,_SC_COHER_BLKSZ = 503,_SC_SPLIT_CACHE = 504,_SC_ICACHE_SZ = 505,_SC_DCACHE_SZ = 506,_SC_ICACHE_LINESZ = 507,_SC_DCACHE_LINESZ = 508,_SC_ICACHE_BLKSZ = 509,_SC_DCACHE_BLKSZ = 510,_SC_DCACHE_TBLKSZ = 511,_SC_ICACHE_ASSOC = 512,_SC_DCACHE_ASSOC = 513,_SC_MAXPID = 514,_SC_STACK_PROT = 515,_SC_THREAD_DESTRUCTOR_ITERATIONS = 568,_SC_GETGR_R_SIZE_MAX = 569,_SC_GETPW_R_SIZE_MAX = 570,_SC_LOGIN_NAME_MAX = 571,_SC_THREAD_KEYS_MAX = 572,_SC_THREAD_STACK_MIN = 573,_SC_THREAD_THREADS_MAX = 574,_SC_TTY_NAME_MAX = 575,_SC_THREADS = 576,_SC_THREAD_ATTR_STACKADDR = 577,_SC_THREAD_ATTR_STACKSIZE = 578,_SC_THREAD_PRIORITY_SCHEDULING = 579,_SC_THREAD_PRIO_INHERIT = 580,_SC_THREAD_PRIO_PROTECT = 581,_SC_THREAD_PROCESS_SHARED = 582,_SC_THREAD_SAFE_FUNCTIONS = 583,_SC_XOPEN_LEGACY = 717,_SC_XOPEN_REALTIME = 718,_SC_XOPEN_REALTIME_THREADS = 719,_SC_XBS5_ILP32_OFF32 = 720,_SC_XBS5_ILP32_OFFBIG = 721,_SC_XBS5_LP64_OFF64 = 722,_SC_XBS5_LPBIG_OFFBIG = 723,};
enum MACRO__SCHED {_SCHED_NEXT = 5,};
enum MACRO__SS {_SS_MAXSIZE = 256,};
enum MACRO__ST {_ST_FSTYPSZ = 16,};
enum MACRO__STRREDIR {_STRREDIR_MODID = 7326,};
enum MACRO__STRUCTURED {_STRUCTURED_PROC = 1,};
enum MACRO__SUBS {_SUBS_ACTIVE = 1,_SUBS_REGEXP = 2,};
enum MACRO__SYS {_SYS_NMLN = 257,};
enum MACRO__TIOC {_TIOC = 21504,};
enum MACRO__U {_U = 0x1,_L = 0x2,_N = 0x4,_S = 0x8,_P = 0x10,_C = 0x20,_B = 0x40,_X = 0x80,};
enum MACRO__WIN {_WIN_ADD_ONE = 0x20,_WIN_INS_ONE = 0x64,};
enum MACRO__XFTWVER {_XFTWVER = 2,};
enum MACRO__XOPEN {_XOPEN_VERSION = 3,};
enum MACRO__XOPEN_REALTIME {_XOPEN_REALTIME = 1,_XOPEN_ENH_I18N = 1,_XOPEN_SHM = 1,};
enum MACRO__ZERO {_ZERO_ = 0,};
enum MACRO___BIND {__BIND = 19950621,};
enum MACRO___CLOCK {__CLOCK_REALTIME0 = 0,};
enum MACRO___CLOCK_REALTIME3 {__CLOCK_REALTIME3 = 3,};
enum MACRO___I {__I_PUSH_NOCTTY = 0x5327,};
enum MACRO___LWP {__LWP_ASLWP = 0x100,};
enum MACRO___NAMESER {__NAMESER = 19961001,};
enum MACRO___NPD {__NPD_MAXPASSBYTES = 12,};
enum MACRO___NSW {__NSW_STD_ERRS = 4,__NSW_SUCCESS = 0,__NSW_NOTFOUND = 1,__NSW_UNAVAIL = 2,__NSW_TRYAGAIN = 3,__NSW_CONTINUE = 0,__NSW_RETURN = 1,};
enum MACRO___RES {__RES = 19960801,};
enum MACRO___RPC {__RPC_CLNT_MINFD_SET = 8,__RPC_CLNT_MINFD_GET = 9,};
enum MACRO___dontcare {__dontcare__ = -1,};
enum MACRO_nfs3nametoolong {nfs3nametoolong = -1,};
enum MACRO_oEFT {oEFT_MAGIC = 0x90909090,};
enum MACRO_sIOC {sIOC = 29440,};
enum MACRO_st {st_debug = 0,};
enum MACRO_tdelta {tdelta_t_sz = 12,};
enum MACRO_xEOF {xEOF = 236,};
enum MACRO_zIOC {zIOC = 31232,};
typedef struct msgb *MBLKP;
typedef struct msgb **MBLKPP;
typedef struct $A426C1BFA60F897E08DB82510E56FD03 MCast_t;
typedef struct $8A43A92A61C1A96F5CE7557D3343944D MD5_CTX;
struct MENU {int height;int width;int rows;int cols;int frows;int fcols;int namelen;int desclen;int marklen;int itemlen;char *pattern;int pindex;WINDOW *win;WINDOW *sub;WINDOW *userwin;WINDOW *usersub;ITEM **items;int nitems;ITEM *curitem;int toprow;int pad;chtype fore;chtype back;chtype grey;PTF_void menuinit;PTF_void menuterm;PTF_void iteminit;PTF_void itemterm;char *userptr;char *mark;OPTIONS opt;int status;};
typedef struct mint MINT;
struct MKDIR3args {diropargs3 where;sattr3 attributes;};
struct MKDIR3res {nfsstat3 status;union MKDIR3res::$7AAE3EB51BE7D5127C92F993C6C93453 res_u;};
union MKDIR3res::$7AAE3EB51BE7D5127C92F993C6C93453 {MKDIR3resok ok;MKDIR3resfail fail;};
struct MKDIR3resfail {wcc_data dir_wcc;};
struct MKDIR3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
struct MKNOD3args {diropargs3 where;mknoddata3 what;};
struct MKNOD3res {nfsstat3 status;union MKNOD3res::$74BE56E58793F3A8CB87CC162DE62117 res_u;};
union MKNOD3res::$74BE56E58793F3A8CB87CC162DE62117 {MKNOD3resok ok;MKNOD3resfail fail;};
struct MKNOD3resfail {wcc_data dir_wcc;};
struct MKNOD3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
typedef struct _Mouse MOUSE_STATUS;
typedef Elf32_Move Move;
typedef struct $CCC1A82A34D7085BB27B55F53CBFD610 Ms_parms;
typedef struct $45D3B8D1F0A0E1A15D8490524663D915 NCONF_HANDLE;
typedef struct nis_hash_data NIS_HASH_ITEM;
typedef struct nis_hash_table NIS_HASH_TABLE;
typedef Elf32_Nhdr Nhdr;
typedef uint8_t *OCF_ALGO_t;
typedef uint8_t *OCF_APDU_t;
struct OCF_Any_t {int32_t length;void *data;};
typedef void *OCF_AuthOpBuffer_t;
typedef uint32_t OCF_AuthOpTag_t;
typedef uint32_t OCF_Boolean_t;
typedef uint8_t *OCF_CERTREF_t;
typedef uint64_t OCF_CardHandle_t;
typedef uint8_t *OCF_CardServiceClass_t;
typedef uint8_t *OCF_CardServiceMethod_t;
typedef void *OCF_CardServiceParams_t;
typedef void *OCF_CardServiceReturn_t;
typedef struct OCF_OCF_CardServicesList_t *OCF_CardServicesList_t;
struct OCF_CardSpec_t {uint32_t flags;OCF_CardHandle_t cardhandle;int8_t *readername;int8_t *cardname;int8_t *aid;OCF_Timeout_t timeout;};
typedef struct OCF_OCF_CardsList_t *OCF_CardsList_t;
typedef uint32_t OCF_ClientAuthenticationCallback_t(OCF_AuthOpTag_t, void *, OCF_AuthOpBuffer_t, OCF_AuthOpBuffer_t *);
typedef uint64_t OCF_ClientHandle_t;
struct OCF_EventData_t {OCF_Event_t event;OCF_ClientHandle_t clienthandle;OCF_CardHandle_t cardhandle;void *eventprivate;void *clientdata;};
typedef void *OCF_EventHandle_t;
typedef uint32_t OCF_EventHandler_t(OCF_Event_t, OCF_EventData_t);
typedef void *OCF_EventRegistrationData_t;
typedef uint32_t OCF_EventRegistration_t;
struct OCF_Event_CardError_RegistrationData_t {OCF_CardHandle_t cardhandle;};
struct OCF_Event_CardInserted_RegistrationData_t {OCF_CardSpec_t cardspec;};
struct OCF_Event_CardRemoved_RegistrationData_t {OCF_CardSpec_t cardspec;};
struct OCF_Event_CardReset_RegistrationData_t {OCF_CardHandle_t cardhandle;};
struct OCF_Event_Exception_t {uint32_t flags;};
typedef uint32_t OCF_Event_t;
typedef uint8_t *OCF_FileID_t;
typedef uint8_t *OCF_File_t;
typedef uint8_t *OCF_KEYINFO_t;
typedef uint8_t *OCF_KEYREF_t;
typedef uint8_t *OCF_KEY_t;
typedef uint8_t *OCF_PIN_t;
typedef struct OCF_OCF_PropertyList_t *OCF_PropertyList_t;
typedef struct OCF_OCF_ReadersList_t *OCF_ReadersList_t;
struct OCF_Timeout_t {uint32_t flags;uint32_t timeout;};
typedef gss_uint32 OM_uint32;
typedef int OPTIONS;
struct Octet_s {int o_length;char o_bytes[32];};
typedef struct Octet_s Octet_t;
typedef Elf32_Off Off;
typedef struct p1284_ioctl_st P1284Ioctl;
struct PANEL {WINDOW *win;int wstarty;int wendy;int wstartx;int wendx;struct _obscured_list *obscured;struct PANEL *below;struct PANEL *above;char *user;};
struct PATHCONF3args {nfs_fh3 object;};
struct PATHCONF3res {nfsstat3 status;union PATHCONF3res::$13536796C3FFAE43AF7BA7B43E22E21C res_u;};
union PATHCONF3res::$13536796C3FFAE43AF7BA7B43E22E21C {PATHCONF3resok ok;PATHCONF3resfail fail;};
struct PATHCONF3resfail {post_op_attr obj_attributes;};
struct PATHCONF3resok {post_op_attr obj_attributes;nfs3_pathconf_info info;};
typedef pmap PMAP;
typedef struct pmaplist PMAPLIST;
union PPPmessages {uint_t ppp_message;pppProtoUp_t proto_up;pppProtoDown_t proto_down;pppProtoFinish_t proto_finish;pppProtoStart_t proto_start;pppError_t error_ind;pppAuthMsg_t auth_msg;pppConfig_t config;};
typedef char *(*PTF_charP)();
typedef int (*PTF_int)();
typedef void (*PTF_void)();
struct Pf_ext_packetfilt {uchar_t Pf_Priority;unsigned int Pf_FilterLen;ushort_t Pf_Filter[2047];};
typedef Elf32_Phdr Phdr;
typedef Octet_t PhysAddress;
typedef void *Psocklen_t;
struct READ3args {nfs_fh3 file;offset3 offset;count3 count;};
struct READ3res {nfsstat3 status;union READ3res::$EBFFBF37F715F35896BDA07C9A2D80F4 res_u;};
union READ3res::$EBFFBF37F715F35896BDA07C9A2D80F4 {READ3resok ok;READ3resfail fail;};
struct READ3resfail {post_op_attr file_attributes;};
struct READ3resok {post_op_attr file_attributes;count3 count;bool_t eof;struct READ3resok::$AAF002B4BE02F6C1DC09698F914F418A data;uint_t size;};
struct READ3resok::$AAF002B4BE02F6C1DC09698F914F418A {uint_t data_len;char *data_val;mblk_t *mp;};
struct READDIR3args {nfs_fh3 dir;cookie3 cookie;cookieverf3 cookieverf;count3 count;};
struct READDIR3res {nfsstat3 status;union READDIR3res::$0CEAD80A95B6A8F5BBE6BAE222F64D18 res_u;};
union READDIR3res::$0CEAD80A95B6A8F5BBE6BAE222F64D18 {READDIR3resok ok;READDIR3resfail fail;};
struct READDIR3resfail {post_op_attr dir_attributes;};
struct READDIR3resok {post_op_attr dir_attributes;cookieverf3 cookieverf;dirlist3 reply;uint_t size;uint_t count;cookie3 cookie;};
struct READDIRPLUS3args {nfs_fh3 dir;cookie3 cookie;cookieverf3 cookieverf;count3 dircount;count3 maxcount;};
struct READDIRPLUS3res {nfsstat3 status;union READDIRPLUS3res::$3D1E2784399C2722E4AD5035C7D7D261 res_u;};
union READDIRPLUS3res::$3D1E2784399C2722E4AD5035C7D7D261 {READDIRPLUS3resok ok;READDIRPLUS3resfail fail;};
struct READDIRPLUS3resfail {post_op_attr dir_attributes;};
struct READDIRPLUS3resok {post_op_attr dir_attributes;cookieverf3 cookieverf;dirlistplus3 reply;uint_t size;uint_t count;uint_t maxcount;post_op_attr *attributes;post_op_fh3 *handles;};
struct READLINK3args {nfs_fh3 symlink;};
struct READLINK3res {nfsstat3 status;union READLINK3res::$0806C2E1EA521BA65FFDD4738E23BA80 res_u;};
union READLINK3res::$0806C2E1EA521BA65FFDD4738E23BA80 {READLINK3resok ok;READLINK3resfail fail;};
struct READLINK3resfail {post_op_attr symlink_attributes;};
struct READLINK3resok {post_op_attr symlink_attributes;nfspath3 data;};
struct REMOVE3args {diropargs3 object;};
struct REMOVE3res {nfsstat3 status;union REMOVE3res::$00486109FBB382E14288CE702A95D1DD res_u;};
union REMOVE3res::$00486109FBB382E14288CE702A95D1DD {REMOVE3resok ok;REMOVE3resfail fail;};
struct REMOVE3resfail {wcc_data dir_wcc;};
struct REMOVE3resok {wcc_data dir_wcc;};
struct RENAME3args {diropargs3 from;diropargs3 to;};
struct RENAME3res {nfsstat3 status;union RENAME3res::$0FECC924FDA7A4B020BD4BBCBF891F20 res_u;};
union RENAME3res::$0FECC924FDA7A4B020BD4BBCBF891F20 {RENAME3resok ok;RENAME3resfail fail;};
struct RENAME3resfail {wcc_data fromdir_wcc;wcc_data todir_wcc;};
struct RENAME3resok {wcc_data fromdir_wcc;wcc_data todir_wcc;};
struct RMDIR3args {diropargs3 object;};
struct RMDIR3res {nfsstat3 status;union RMDIR3res::$90C320C3EFE33BF38799E3062F8F7E1F res_u;};
union RMDIR3res::$90C320C3EFE33BF38799E3062F8F7E1F {RMDIR3resok ok;RMDIR3resfail fail;};
struct RMDIR3resfail {wcc_data dir_wcc;};
struct RMDIR3resok {wcc_data dir_wcc;};
typedef rpcb RPCB;
typedef struct rp__list RPCBLIST;
typedef Elf32_Rel Rel;
typedef struct $21B5ADE7931223AA804E41EE15A82D4B Rel_entry;
typedef Elf32_Rela Rela;
typedef struct screen SCREEN;
struct SETACL2args {fhandle_t fh;vsecattr_t acl;};
struct SETACL2res {enum nfsstat status;union SETACL2res::$D746CAD3772CAAAF9A580AF137F34722 res_u;};
union SETACL2res::$D746CAD3772CAAAF9A580AF137F34722 {SETACL2resok ok;};
struct SETACL2resok {struct nfsfattr attr;};
struct SETACL3args {nfs_fh3 fh;vsecattr_t acl;};
struct SETACL3res {nfsstat3 status;union SETACL3res::$4771722AF7BF6EE61E540B50092D29CD res_u;};
union SETACL3res::$4771722AF7BF6EE61E540B50092D29CD {SETACL3resok ok;SETACL3resfail fail;};
struct SETACL3resfail {post_op_attr attr;};
struct SETACL3resok {post_op_attr attr;};
struct SETATTR3args {nfs_fh3 object;sattr3 new_attributes;sattrguard3 guard;};
struct SETATTR3res {nfsstat3 status;union SETATTR3res::$3F242C945E6791122D97917754CE34B9 res_u;};
union SETATTR3res::$3F242C945E6791122D97917754CE34B9 {SETATTR3resok ok;SETATTR3resfail fail;};
struct SETATTR3resfail {wcc_data obj_wcc;};
struct SETATTR3resok {wcc_data obj_wcc;};
typedef struct termio SGTTY;
typedef struct termios SGTTYS;
typedef SLPBoolean SLPAttrCallback(SLPHandle hSLP, const char *pcAttrList, SLPError errCode, void *pvCookie);
typedef enum $E5CD0A0A25838301AC0CDA8DDEB498DA SLPBoolean;
typedef enum $43B36F08FB889DFA872E3981C7EFED93 SLPError;
typedef void *SLPHandle;
typedef void SLPRegReport(SLPHandle hSLP, SLPError errCode, void *pvCookie);
typedef SLPBoolean SLPSrvTypeCallback(SLPHandle hSLP, const char *pcSrvTypes, SLPError errCode, void *pvCookie);
typedef struct srvurl SLPSrvURL;
typedef SLPBoolean SLPSrvURLCallback(SLPHandle hSLP, const char *pcSrvURL, unsigned __int16 usLifetime, SLPError errCode, void *pvCookie);
typedef enum $041E3D91F6E47CF820A5EC5BE234707E SLPURLLifetime;
typedef struct $7DF901F2330FED44ED065D8472D22EDC SVCAUTH;
typedef struct __svcxprt SVCXPRT;
typedef struct svcxprt_ext_t SVCXPRT_EXT;
typedef struct svcxprt_list_t SVCXPRT_LIST;
struct SYMLINK3args {diropargs3 where;symlinkdata3 symlink;};
struct SYMLINK3res {nfsstat3 status;union SYMLINK3res::$B5265A55B6FE6D7C72613D20EFCEC739 res_u;};
union SYMLINK3res::$B5265A55B6FE6D7C72613D20EFCEC739 {SYMLINK3resok ok;SYMLINK3resfail fail;};
struct SYMLINK3resfail {wcc_data dir_wcc;};
struct SYMLINK3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
typedef struct segdrv_data Segdrv_Data;
typedef Elf32_Shdr Shdr;
typedef Elf32_Sword Sword;
typedef Elf32_Sword Sxword;
typedef Elf32_Sym Sym;
typedef Elf32_Syminfo Syminfo;
typedef struct term TERMINAL;
typedef struct $987A4977B64401F127AD4A87403FCD8A TEXT;
typedef struct tiuser TIUSER;
struct TNF;
struct T_addr_ack {t_scalar_t PRIM_type;t_scalar_t LOCADDR_length;t_scalar_t LOCADDR_offset;t_scalar_t REMADDR_length;t_scalar_t REMADDR_offset;};
struct T_addr_req {t_scalar_t PRIM_type;};
struct T_bind_ack {t_scalar_t PRIM_type;t_scalar_t ADDR_length;t_scalar_t ADDR_offset;t_uscalar_t CONIND_number;};
struct T_bind_req {t_scalar_t PRIM_type;t_scalar_t ADDR_length;t_scalar_t ADDR_offset;t_uscalar_t CONIND_number;};
struct T_conn_con {t_scalar_t PRIM_type;t_scalar_t RES_length;t_scalar_t RES_offset;t_scalar_t OPT_length;t_scalar_t OPT_offset;};
struct T_conn_ind {t_scalar_t PRIM_type;t_scalar_t SRC_length;t_scalar_t SRC_offset;t_scalar_t OPT_length;t_scalar_t OPT_offset;t_scalar_t SEQ_number;};
struct T_conn_req {t_scalar_t PRIM_type;t_scalar_t DEST_length;t_scalar_t DEST_offset;t_scalar_t OPT_length;t_scalar_t OPT_offset;};
struct T_conn_res {t_scalar_t PRIM_type;t_uscalar_t ACCEPTOR_id;t_scalar_t OPT_length;t_scalar_t OPT_offset;t_scalar_t SEQ_number;};
struct T_data_ind {t_scalar_t PRIM_type;t_scalar_t MORE_flag;};
struct T_data_req {t_scalar_t PRIM_type;t_scalar_t MORE_flag;};
struct T_discon_ind {t_scalar_t PRIM_type;t_scalar_t DISCON_reason;t_scalar_t SEQ_number;};
struct T_discon_req {t_scalar_t PRIM_type;t_scalar_t SEQ_number;};
struct T_error_ack {t_scalar_t PRIM_type;t_scalar_t ERROR_prim;t_scalar_t TLI_error;t_scalar_t UNIX_error;};
struct T_exdata_ind {t_scalar_t PRIM_type;t_scalar_t MORE_flag;};
struct T_exdata_req {t_scalar_t PRIM_type;t_scalar_t MORE_flag;};
struct T_info_ack {t_scalar_t PRIM_type;t_scalar_t TSDU_size;t_scalar_t ETSDU_size;t_scalar_t CDATA_size;t_scalar_t DDATA_size;t_scalar_t ADDR_size;t_scalar_t OPT_size;t_scalar_t TIDU_size;t_scalar_t SERV_type;t_scalar_t CURRENT_state;t_scalar_t PROVIDER_flag;};
struct T_info_req {t_scalar_t PRIM_type;};
struct T_ok_ack {t_scalar_t PRIM_type;t_scalar_t CORRECT_prim;};
struct T_opthdr {t_uscalar_t len;t_uscalar_t level;t_uscalar_t name;t_uscalar_t status;};
struct T_optmgmt_ack {t_scalar_t PRIM_type;t_scalar_t OPT_length;t_scalar_t OPT_offset;t_scalar_t MGMT_flags;};
struct T_optmgmt_req {t_scalar_t PRIM_type;t_scalar_t OPT_length;t_scalar_t OPT_offset;t_scalar_t MGMT_flags;};
struct T_ordrel_ind {t_scalar_t PRIM_type;};
struct T_ordrel_req {t_scalar_t PRIM_type;};
union T_primitives {t_scalar_t type;struct T_conn_req conn_req;struct T_conn_res conn_res;struct T_discon_req discon_req;struct T_data_req data_req;struct T_exdata_req exdata_req;struct T_info_req info_req;struct T_bind_req bind_req;struct T_unbind_req unbind_req;struct T_unitdata_req unitdata_req;struct T_optmgmt_req optmgmt_req;struct T_ordrel_req ordrel_req;struct T_addr_req addr_req;struct T_conn_ind conn_ind;struct T_conn_con conn_con;struct T_discon_ind discon_ind;struct T_data_ind data_ind;struct T_exdata_ind exdata_ind;struct T_info_ack info_ack;struct T_bind_ack bind_ack;struct T_error_ack error_ack;struct T_ok_ack ok_ack;struct T_unitdata_ind unitdata_ind;struct T_uderror_ind uderror_ind;struct T_optmgmt_ack optmgmt_ack;struct T_ordrel_ind ordrel_ind;struct T_addr_ack addr_ack;};
struct T_uderror_ind {t_scalar_t PRIM_type;t_scalar_t DEST_length;t_scalar_t DEST_offset;t_scalar_t OPT_length;t_scalar_t OPT_offset;t_scalar_t ERROR_type;};
struct T_unbind_req {t_scalar_t PRIM_type;};
struct T_unitdata_ind {t_scalar_t PRIM_type;t_scalar_t SRC_length;t_scalar_t SRC_offset;t_scalar_t OPT_length;t_scalar_t OPT_offset;};
struct T_unitdata_req {t_scalar_t PRIM_type;t_scalar_t DEST_length;t_scalar_t DEST_offset;t_scalar_t OPT_length;t_scalar_t OPT_offset;};
typedef char *USERP;
typedef enum $003F63A829E52477BDB4080710A1139D VISIT;
typedef Elf32_Verdaux Verdaux;
typedef Elf32_Verdef Verdef;
typedef Elf32_Vernaux Vernaux;
typedef Elf32_Verneed Verneed;
typedef Elf32_Versym Versym;
typedef struct vuid_addr_probe Vuid_addr_probe;
typedef enum vuid_device Vuid_device;
typedef enum vuid_q_code Vuid_q_code;
typedef struct vuid_q_node Vuid_q_node;
typedef struct vuid_queue Vuid_queue;
typedef struct vuid_seg Vuid_seg;
typedef caddr_t Vuid_state;
typedef struct vuid_value Vuid_value;
typedef struct _win_st WINDOW;
typedef unsigned __int16 WORD;
struct WRITE3args {nfs_fh3 file;offset3 offset;count3 count;stable_how stable;struct WRITE3args::$67EF420668BC39A8825B32AFBE42D0CA data;mblk_t *mblk;};
struct WRITE3args::$67EF420668BC39A8825B32AFBE42D0CA {uint_t data_len;char *data_val;};
struct WRITE3res {nfsstat3 status;union WRITE3res::$EFCBE02989981C7512DF7D166CC51BEC res_u;};
union WRITE3res::$EFCBE02989981C7512DF7D166CC51BEC {WRITE3resok ok;WRITE3resfail fail;};
struct WRITE3resfail {wcc_data file_wcc;};
struct WRITE3resok {wcc_data file_wcc;count3 count;stable_how committed;writeverf3 verf;};
typedef Elf32_Word Word;
struct XDR {enum xdr_op x_op;struct xdr_ops *x_ops;caddr_t x_public;caddr_t x_private;caddr_t x_base;int x_handy;};
typedef struct Xfer_Rdy *XFER_RDYptr;
struct Xfer_Rdy {int seq_ro;int burst_len;int reserved;};
typedef Elf32_Word Xword;
typedef struct $A556726339174AF4A052C1DB3ED032E6 _Color;
typedef struct $C8DBEC58A6C5CAB5E40652D978B29F79 _Color_pair;
struct _FN_attribute;
struct _FN_attrmodlist;
struct _FN_attrset;
struct _FN_bindinglist_t;
struct _FN_bindingset;
struct _FN_composite_name;
struct _FN_compound_name;
struct _FN_ctx;
struct _FN_ctx_svc_t;
struct _FN_ext_searchlist_t;
struct _FN_multigetlist_t;
struct _FN_namelist_t;
struct _FN_nameset;
struct _FN_ref;
struct _FN_ref_addr;
struct _FN_search_control;
struct _FN_search_filter;
struct _FN_searchlist_t;
struct _FN_status;
struct _FN_status_asvc_t;
struct _FN_status_cnsvc_t;
struct _FN_status_csvc_t;
struct _FN_status_psvc_t;
struct _FN_string;
struct _FN_valuelist_t;
typedef struct $B661844E4DD166A431053E2B2F63C927 _KEY_MAP;
struct _LCLd {char *locale;void *db;LclFormInfo *form_info;LclIconvInfo *iconv_info;LclCharsetInfo *cs_info;};
struct _LCTd {LCLd lcld;LclFormAttrInfo *attr_info;LclContents *contents;};
typedef struct $750EEDBB3ABCF24E6FC38F698DC1AE07 _LC_bind_table_t;
typedef enum $16117E4F5BF7AAA0A2A7EB6F15A0B87C _LC_bind_tag_t;
typedef void *_LC_bind_value_t;
struct _LC_charmap_t {_LC_core_charmap_t core;const char *cm_csname;_LC_fc_type_t cm_fc_type;_LC_pc_type_t cm_pc_type;size_t cm_mb_cur_max;size_t cm_mb_cur_min;unsigned __int8 cm_max_disp_width;_LC_euc_info_t *cm_eucinfo;};
typedef struct $5F8D13B29616A56F84BD15B89191A8F7 _LC_classnm_t;
struct _LC_collate_t {_LC_core_collate_t core;_LC_charmap_t *cmapp;unsigned __int8 co_nord;_LC_weight_t co_sort;wchar_t co_wc_min;wchar_t co_wc_max;wchar_t co_hbound;wchar_t co_col_min;wchar_t co_col_max;const _LC_weight_t *co_coltbl;const _LC_collel_t **co_cetbl;unsigned __int8 co_nsubs;const _LC_subs_t *co_subs;};
typedef struct $50A8F2CBF9209E81C59E0189B8E8717A _LC_collel_t;
typedef struct $F4A087914CCBD8B8061D53356491AFE5 _LC_core_charmap_t;
typedef struct $3BD9E21EDFC7EA3B12DCBE973656A8B8 _LC_core_collate_t;
typedef struct $A32966EE8414B065154C0C0FBC0CDA05 _LC_core_ctype_t;
typedef struct $58179321A8150557048736423AF6F76C _LC_core_locale_t;
typedef struct $4205C709627503FCC3E7DAAF0DB99385 _LC_core_messages_t;
typedef struct $631FA0442200650F637355090EEC1282 _LC_core_monetary_t;
typedef struct $AD898C726F4F86F79B78998236170483 _LC_core_numeric_t;
typedef struct $4DE03E8ED1D3CAFD22EDD6A1211D4CC8 _LC_core_time_t;
struct _LC_ctype_t {_LC_core_ctype_t core;_LC_charmap_t *cmapp;wchar_t min_wc;wchar_t max_wc;wchar_t max_upper;wchar_t max_lower;const wchar_t *upper;const wchar_t *lower;const unsigned int *mask;const unsigned int *qmask;const unsigned __int8 *qidx;wchar_t qidx_hbound;int nbinds;_LC_bind_table_t *bindtab;int ntrans;_LC_transnm_t *transname;const _LC_transtabs_t *transtabs;size_t ctypesize;const unsigned __int8 *ctypedata;void *reserved[8];};
typedef struct $8716BC3DCA46F0A7F3673119A555C1D4 _LC_euc_info_t;
typedef enum $BB6475131A51C96C40EE163F450A191D _LC_fc_type_t;
struct _LC_locale_t {_LC_core_locale_t core;struct lconv *nl_lconv;_LC_charmap_t *lc_charmap;_LC_collate_t *lc_collate;_LC_ctype_t *lc_ctype;_LC_monetary_t *lc_monetary;_LC_numeric_t *lc_numeric;_LC_messages_t *lc_messages;_LC_time_t *lc_time;int no_of_items;char *nl_info[59];};
struct _LC_messages_t {_LC_core_messages_t core;const char *yesexpr;const char *noexpr;const char *yesstr;const char *nostr;};
typedef struct $859BFE8FBA42C54E9900208E6ECF19F7 _LC_methods_charmap_t;
typedef struct $D27F01C753CDB3D015D2AEBC850E5649 _LC_methods_collate_t;
typedef struct $3242DF98F1AD6AB2AF4D4F9FD3432406 _LC_methods_ctype_t;
typedef void (*_LC_methods_func_t)(void);
typedef struct $D743D7FB93846D2A48423E379C4894F1 _LC_methods_locale_t;
typedef struct $45AA4025EE1954AFBFB3DA359E0D02DB _LC_methods_messages_t;
typedef struct $458B8F1C203FF7E73654EA82F46BE387 _LC_methods_monetary_t;
typedef struct $F60D842CE7A78CACE989B630880B9FF2 _LC_methods_numeric_t;
typedef struct $2ED74837B10F4575EAFC3A6A8D0E8399 _LC_methods_t;
typedef struct $00ED80C671E56402DFDA98FF57A0F9A3 _LC_methods_time_t;
struct _LC_monetary_t {_LC_core_monetary_t core;const char *int_curr_symbol;const char *currency_symbol;const char *mon_decimal_point;const char *mon_thousands_sep;const char *mon_grouping;const char *positive_sign;const char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
struct _LC_numeric_t {_LC_core_numeric_t core;const char *decimal_point;const char *thousands_sep;const char *grouping;};
typedef struct $E9B6FB84B21FB1468EF2F76864DA4C61 _LC_object_t;
typedef enum $0C8CCBCA03C364CB9C340F4C94668308 _LC_pc_type_t;
typedef struct $647FE789D073DDA1115A25D9160A600C _LC_subs_t;
struct _LC_time_t {_LC_core_time_t core;const char *d_fmt;const char *t_fmt;const char *d_t_fmt;const char *t_fmt_ampm;const char *abday[7];const char *day[7];const char *abmon[12];const char *mon[12];const char *am_pm[2];const char **era;const char *era_d_fmt;const char *alt_digits;const char *era_d_t_fmt;const char *era_t_fmt;const char *date_fmt;};
typedef struct $82C0C6D790EF9405DE6F913108BCAA59 _LC_transnm_t;
typedef struct __LC_transtabs_t _LC_transtabs_t;
typedef wchar_t *_LC_weight_t;
struct _LclCharsetInfo {char *name;char *mime_name;char *v3_name;char *iconv_name;LclMailEncoding mail_header_encoding;LclMailEncoding mail_body_encoding;LclFormat format;char *ascii_end;char *ascii_superset;LclCharsetInfo *next;};
struct _LclCharsetLinkedList {char *name;LclCharsetLinkedList *next;};
struct _LclFormAttrInfo {LclForm type;LctNEAttribute name;LclCharsetLinkedList *header_charset;LclCharsetLinkedList *body_charset;LclMailEncoding header_encoding;LclMailEncoding body_encoding;LclMailType mail_type;LclFormAttrInfo *next;};
struct _LclFormInfo {LclForm type;LctNEAttribute name;LclCharsetLinkedList *msg_header_charset;LclCharsetLinkedList *msg_body_charset;LclCharsetLinkedList *plaintext_body_charset;LclCharsetLinkedList *taggedtext_header_charset;LclCharsetLinkedList *taggedtext_body_charset;LclMailEncoding msg_header_encoding;LclMailEncoding msg_body_encoding;LclMailEncoding plaintext_body_encoding;LclMailEncoding taggedtext_header_encoding;LclMailEncoding taggedtext_body_encoding;LclMailType mail_type;LclFormInfo *next;};
struct _LclIconvInfo {char *from_encoding;char *to_encoding;LclDirection direction;int atom_num;LclIconvAtom *atom;LclIconvInfo *next;};
struct _Mouse {int x;int y;__int16 button[3];int changes;};
typedef struct $2533481BB5519C9B22079276CD47D0A2 _PAGE;
struct _Vr2_Astrs {charptr _s1;charptr _s2;charptr _s3;charptr _s4;charptr _s5;charptr _s6;charptr _s7;charptr _s8;charptr _s9;charptr _s10;charptr _s11;charptr _s12;charptr _s13;charptr _s14;charptr _s15;charptr _s16;charptr _s17;charptr _s18;charptr _s19;charptr _s20;charptr _s21;charptr _s22;charptr _s23;charptr _s24;charptr _s25;charptr _s26;charptr _s27;charptr _s28;charptr _s29;charptr _s30;charptr _s31;charptr _s32;charptr _s33;charptr _s34;charptr _s35;charptr _s36;charptr _s37;charptr _s38;charptr _s39;charptr _s40;charptr _s41;charptr _s42;charptr _s43;charptr _s44;charptr _s45;charptr _s46;charptr _s47;charptr _s48;charptr _s49;charptr _s50;charptr _s51;charptr _s52;charptr _s53;charptr _s54;charptr _s55;charptr _s56;charptr _s57;charptr _s58;charptr _s59;charptr _s60;charptr _s61;charptr _s62;charptr _s63;charptr _s64;charptr _s65;charptr _s66;charptr _s67;charptr _s68;charptr _s69;charptr _s70;charptr _s71;charptr _s72;charptr _s73;charptr _s74;charptr _s75;charptr _s76;charptr _s77;charptr _s78;charptr _s79;charptr _s80;charptr _s81;charptr _s82;charptr _s83;charptr _s84;charptr _s85;charptr _s86;charptr _s87;charptr _s88;charptr _s89;charptr _s90;charptr _s91;charptr _s92;charptr _s93;charptr _s94;charptr _s95;charptr _s96;charptr _s97;charptr _s98;charptr _s99;charptr _s100;};
struct _Vr2_Bstrs {charptr _s101;charptr _s102;charptr _s103;charptr _s104;charptr _s105;charptr _s106;charptr _s107;charptr _s108;charptr _s109;charptr _s110;charptr _s111;charptr _s112;charptr _s113;charptr _s114;charptr _s115;charptr _s116;charptr _s117;charptr _s118;charptr _s119;charptr _s120;charptr _s121;charptr _s122;charptr _s123;charptr _s124;charptr _s125;charptr _s126;charptr _s127;charptr _s128;charptr _s129;charptr _s130;charptr _s131;charptr _s132;charptr _s133;charptr _s134;charptr _s135;charptr _s136;charptr _s137;charptr _s138;charptr _s139;charptr _s140;charptr _s141;charptr _s142;charptr _s143;charptr _s144;charptr _s145;};
struct __FILE {ssize_t _cnt;unsigned __int8 *_ptr;unsigned __int8 *_base;unsigned __int8 _flag;unsigned __int8 _file;unsigned __int32 __orientation : 2;unsigned __int32 __ionolock : 1;unsigned __int32 __filler : 5;};
struct __LC_transtabs_t {const wchar_t *table;wchar_t tmin;wchar_t tmax;struct __LC_transtabs_t *next;};
struct __auth {struct opaque_auth ah_cred;struct opaque_auth ah_verf;union des_block ah_key;struct __auth::auth_ops *ah_ops;caddr_t ah_private;};
struct __auth::auth_ops {void (*ah_nextverf)(struct __auth *);int (*ah_marshal)(struct __auth *, XDR *);int (*ah_validate)(struct __auth *, struct opaque_auth *);int (*ah_refresh)(struct __auth *, void *);void (*ah_destroy)(struct __auth *);};
struct __client {AUTH *cl_auth;struct __client::clnt_ops *cl_ops;caddr_t cl_private;char *cl_netid;char *cl_tp;};
struct __client::clnt_ops {enum clnt_stat (*cl_call)(struct __client *, rpcproc_t, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval);void (*cl_abort)();void (*cl_geterr)(struct __client *, struct rpc_err *);bool_t (*cl_freeres)(struct __client *, xdrproc_t, caddr_t);void (*cl_destroy)(struct __client *);bool_t (*cl_control)(struct __client *, int, char *);int (*cl_settimers)(struct __client *, struct rpc_timers *, struct rpc_timers *, int, void (*)(), caddr_t, uint32_t);};
enum __lc_type_id_t {_LC_CAR = 0x1,_LC_LOCALE = 0x2,_LC_CHARMAP = 0x3,_LC_CTYPE = 0x4,_LC_COLLATE = 0x5,_LC_NUMERIC = 0x6,_LC_MONETARY = 0x7,_LC_TIME = 0x8,_LC_MESSAGES = 0x9,};
typedef __int64 __longlong_t;
struct __mbstate_t {int __filler[6];};
typedef nl_item __nl_item;
enum __ns_class {ns_c_in = 0x1,ns_c_chaos = 0x3,ns_c_hs = 0x4,ns_c_none = 0xFE,ns_c_any = 0xFF,ns_c_max = 0x10000,};
enum __ns_flag {ns_f_qr = 0x0,ns_f_opcode = 0x1,ns_f_aa = 0x2,ns_f_tc = 0x3,ns_f_rd = 0x4,ns_f_ra = 0x5,ns_f_z = 0x6,ns_f_ad = 0x7,ns_f_cd = 0x8,ns_f_rcode = 0x9,ns_f_max = 0xA,};
struct __ns_msg {const uchar_t *_msg;const uchar_t *_eom;uint16_t _id;uint16_t _flags;uint16_t _counts[4];const uchar_t *_sections[4];ns_sect _sect;int _rrnum;const uchar_t *_ptr;};
enum __ns_opcode {ns_o_query = 0x0,ns_o_iquery = 0x1,ns_o_status = 0x2,ns_o_notify = 0x4,ns_o_update = 0x5,ns_o_max = 0x6,};
enum __ns_rcode {ns_r_noerror = 0x0,ns_r_formerr = 0x1,ns_r_servfail = 0x2,ns_r_nxdomain = 0x3,ns_r_notimpl = 0x4,ns_r_refused = 0x5,ns_r_yxdomain = 0x6,ns_r_yxrrset = 0x7,ns_r_nxrrset = 0x8,ns_r_notauth = 0x9,ns_r_notzone = 0xA,ns_r_max = 0xB,};
struct __ns_rr {char name[1025];uint16_t type;uint16_t cl;uint32_t ttl;uint16_t rdlength;const uchar_t *rdata;};
enum __ns_sect {ns_s_qd = 0x0,ns_s_zn = 0x0,ns_s_an = 0x1,ns_s_pr = 0x1,ns_s_ns = 0x2,ns_s_ud = 0x2,ns_s_ar = 0x3,ns_s_max = 0x4,};
enum __ns_type {ns_t_a = 0x1,ns_t_ns = 0x2,ns_t_md = 0x3,ns_t_mf = 0x4,ns_t_cname = 0x5,ns_t_soa = 0x6,ns_t_mb = 0x7,ns_t_mg = 0x8,ns_t_mr = 0x9,ns_t_null = 0xA,ns_t_wks = 0xB,ns_t_ptr = 0xC,ns_t_hinfo = 0xD,ns_t_minfo = 0xE,ns_t_mx = 0xF,ns_t_txt = 0x10,ns_t_rp = 0x11,ns_t_afsdb = 0x12,ns_t_x25 = 0x13,ns_t_isdn = 0x14,ns_t_rt = 0x15,ns_t_nsap = 0x16,ns_t_nsap_ptr = 0x17,ns_t_sig = 0x18,ns_t_key = 0x19,ns_t_px = 0x1A,ns_t_gpos = 0x1B,ns_t_aaaa = 0x1C,ns_t_loc = 0x1D,ns_t_nxt = 0x1E,ns_t_eid = 0x1F,ns_t_nimloc = 0x20,ns_t_srv = 0x21,ns_t_atma = 0x22,ns_t_naptr = 0x23,ns_t_ixfr = 0xFB,ns_t_axfr = 0xFC,ns_t_mailb = 0xFD,ns_t_maila = 0xFE,ns_t_any = 0xFF,ns_t_max = 0x10000,};
enum __ns_update_operation {ns_uop_delete = 0x0,ns_uop_add = 0x1,ns_uop_max = 0x2,};
struct __nsw_long_err {int nsw_errno;action_t action;struct __nsw_long_err *next;};
struct __nsw_lookup {char *service_name;action_t actions[4];struct __nsw_long_err *long_errs;struct __nsw_lookup *next;};
enum __nsw_parse_err {__NSW_CONF_PARSE_SUCCESS = 0x0,__NSW_CONF_PARSE_NOFILE = 0x1,__NSW_CONF_PARSE_NOPOLICY = 0x2,__NSW_CONF_PARSE_SYSERR = 0x3,};
struct __nsw_switchconfig {int vers;char *dbase;int num_lookups;struct __nsw_lookup *lookups;};
struct __pctx;
struct __private_execattr {const char *name;const char *type;const char *id;const char *policy;int search_flag;execstr_t *head_exec;execstr_t *prev_exec;};
struct __res_state {int retrans;int retry;uint_t options;int nscount;struct sockaddr_in nsaddr_list[3];ushort_t id;char *dnsrch[7];char defdname[256];uint_t pfcode;unsigned __int32 ndots : 4;unsigned __int32 nsort : 4;char unused[3];struct __res_state::$A6CBED0F63521320A773A1D0A80BE43A sort_list[10];char pad[72];};
struct __res_state::$A6CBED0F63521320A773A1D0A80BE43A {struct in_addr addr;unsigned int mask;};
struct __svc_local_cred_t {uid_t euid;gid_t egid;uid_t ruid;gid_t rgid;pid_t pid;};
struct __svcxprt {int xp_fd;ushort_t xp_port;struct xp_ops *xp_ops;int xp_addrlen;char *xp_tp;char *xp_netid;struct netbuf xp_ltaddr;struct netbuf xp_rtaddr;char xp_raddr[16];struct opaque_auth xp_verf;caddr_t xp_p1;caddr_t xp_p2;caddr_t xp_p3;int xp_type;};
typedef void *__va_list;
struct _afd {int *a_fd;__int16 a_nfd;__int16 a_stale;int a_buf[1];};
struct _bool_struct {char _auto_left_margin;char _auto_right_margin;char _no_esc_ctlc;char _ceol_standout_glitch;char _eat_newline_glitch;char _erase_overstrike;char _generic_type;char _hard_copy;char _has_meta_key;char _has_status_line;char _ins_null_glitch;char _mem_above;char _mem_below;char _move_insert_mode;char _move_standout_mode;char _over_strike;char _status_line_esc_ok;char _dest_tabs_magic_smso;char _tilde_glitch;char _transparent_underline;char _xon_xoff;char _needs_xon_xoff;char _prtr_silent;char _hard_cursor;char _non_rev_rmcup;char _no_pad_char;char _non_dest_scroll_region;char _can_change;char _back_color_erase;char _hue_lightness_saturation;char _col_addr_glitch;char _cr_cancels_micro_mode;char _has_print_wheel;char _row_addr_glitch;char _semi_auto_right_margin;char _cpi_changes_res;char _lpi_changes_res;char Sentinel;};
struct _buf {intptr_t _fd;char *_ptr;char *_base;char *_name;int _size;int _cnt;int _off;int _ln;};
struct _cat_hdr {int __hdr_magic;int __nsets;int __mem;int __msg_hdr_offset;int __msg_text_offset;};
struct _cat_msg_hdr {int __msg_no;int __msg_len;int __msg_offset;};
struct _cat_set_hdr {int __set_no;int __nmsgs;int __first_msg_hdr;};
struct _choice_ {char *token;char *text;struct _choice_ *next;};
struct _cleanup {uintptr_t pthread_cleanup_pad[4];};
typedef struct _cleanup _cleanup_t;
struct _condvar_impl {ushort_t cv_waiters;};
struct _cpc_event {int ce_cpuver;hrtime_t ce_hrt;uint64_t ce_tick;uint64_t ce_pic[2];uint64_t ce_pcr;};
struct _disp {disp_lock_t disp_lock;pri_t disp_npri;dispq_t *disp_q;dispq_t *disp_q_limit;ulong_t *disp_qactmap;pri_t disp_maxrunpri;pri_t disp_max_unbound_pri;volatile int disp_nrunnable;struct cpu *disp_cpu;};
union _h_val {unsigned int _i[2];double _d;};
struct _kcondvar {ushort_t _opaque;};
struct _kcpc_ctx {cpc_event_t c_event;uint64_t c_rawtick;uint64_t c_rawpic;struct _kcpc_ctx *c_next;uint_t c_flags;};
struct _klwp {struct pcb lwp_pcb;uintptr_t lwp_oldcontext;int *lwp_ap;int lwp_errno;char lwp_error;char lwp_eosys;char lwp_argsaved;char lwp_watchtrap;int lwp_arg[8];void *lwp_regs;void *lwp_fpu;label_t lwp_qsav;uchar_t lwp_cursig;uchar_t lwp_curflt;uchar_t lwp_sysabort;uchar_t lwp_asleep;stack_t lwp_sigaltstack;struct sigqueue *lwp_curinfo;k_siginfo_t lwp_siginfo;k_sigset_t lwp_sigoldmask;struct _klwp::lwp_watch lwp_watch[4];uint32_t lwp_oweupc;struct _klwp::mstate lwp_mstate;struct lrusage lwp_ru;int lwp_lastfault;caddr_t lwp_lastfaddr;struct itimerval lwp_timer[3];char lwp_unused;char lwp_state;ushort_t lwp_nostop;kcondvar_t lwp_cv;clock_t lwp_utime;clock_t lwp_stime;struct _kthread *lwp_thread;struct proc *lwp_procp;void *lwp_reserved;};
struct _klwp::lwp_watch {caddr_t wpaddr;size_t wpsize;int wpcode;greg_t wppc;};
struct _klwp::mstate {int ms_prev;hrtime_t ms_start;hrtime_t ms_term;hrtime_t ms_state_start;hrtime_t ms_acct[10];};
struct _krwlock {void *_opaque[1];};
struct _ksema {void *_opaque[2];};
struct _kthread {struct _kthread *t_link;caddr_t t_stk;void (*t_startpc)(void);struct cpu *t_bound_cpu;__int16 t_affinitycnt;__int16 t_bind_cpu;ushort_t t_flag;ushort_t t_proc_flag;ushort_t t_schedflag;volatile char t_preempt;volatile char t_preempt_lk;uint_t t_state;pri_t t_pri;pri_t t_epri;label_t t_pcb;lwpchan_t t_lwpchan;struct _sobj_ops *t_sobj_ops;id_t t_cid;struct thread_ops *t_clfuncs;void *t_cldata;ctxop_t *t_ctx;uintptr_t t_lofault;label_t *t_onfault;void *t_nofault;caddr_t t_swap;lock_t t_lock;uint8_t t_lockstat;uint8_t t_pil;disp_lock_t t_pi_lock;struct cpu *t_cpu;struct _kthread *t_intr;uint_t t_did;caddr_t t_tnf_tpdp;id_t t_tid;id_t t_waitfor;timeout_id_t t_alarmid;struct itimerval t_realitimer;timeout_id_t t_itimerid;struct sigqueue *t_sigqueue;k_sigset_t t_sig;k_sigset_t t_hold;struct _kthread *t_forw;struct _kthread *t_back;klwp_t *t_lwp;struct proc *t_procp;caddr_t t_audit_data;struct _kthread *t_next;struct _kthread *t_prev;struct vnode *t_trace;ushort_t t_whystop;ushort_t t_whatstop;int t_dslot;struct pollstate *t_pollstate;struct pollcache *t_pollcache;struct cred *t_cred;time_t t_start;clock_t t_lbolt;hrtime_t t_stoptime;__int16 t_sysnum;kcondvar_t t_delay_cv;uint_t t_pctcpu;disp_lock_t *t_lockp;ushort_t t_oldspl;volatile char t_pre_sys;lock_t t_lock_flush;struct _disp *t_disp_queue;clock_t t_disp_time;uint_t t_kpri_req;union _kthread::__tu _tu;hrtime_t t_waitrq;int t_mstate;struct _kthread::rprof *t_rprof;struct turnstile *t_prioinv;struct turnstile *t_ts;uint_t t_mmuctx;struct _kthread::tsd_thread *t_tsd;clock_t t_stime;struct door_data *t_door;kmutex_t *t_plockp;struct _kthread *t_handoff;struct sc_data *t_schedctl;struct cpupart *t_cpupart;int t_bind_pset;struct copyops *t_copyops;caddr_t t_stkbase;struct page *t_red_pp;struct _afd t_activefd;struct _kthread *t_priforw;struct _kthread *t_priback;struct sleepq *t_sleepq;struct trap_info *t_panic_trap;void *t_resv;struct upimutex *t_upimutex;uint32_t t_nupinest;kmutex_t t_delay_lock;};
union _kthread::__tu {struct _kthread::__tu::__ts _ts;volatile int _t_post_sys_ast;};
struct _kthread::__tu::__ts {volatile char _t_astflag;volatile char _t_sig_check;volatile char _t_post_sys;volatile char _t_trapret;};
struct _kthread::rprof {int rp_anystate;uint_t rp_state[10];};
struct _kthread::tsd_thread {struct tsd_thread *ts_next;struct tsd_thread *ts_prev;uint_t ts_nkeys;void **ts_value;};
struct _kvmd;
struct _la_sparc_regs {lagreg_t lr_rego0;lagreg_t lr_rego1;lagreg_t lr_rego2;lagreg_t lr_rego3;lagreg_t lr_rego4;lagreg_t lr_rego5;lagreg_t lr_rego6;lagreg_t lr_rego7;};
struct _label_t {int val[2];};
struct _ldterm_cs_data {uchar_t version;uchar_t codeset_type;uchar_t csinfo_num;uchar_t pad;char *locale_name;ldterm_eucpc_data_t eucpc_data[10];};
struct _ldterm_cs_data_user {uchar_t version;uchar_t codeset_type;uchar_t csinfo_num;uchar_t pad;char locale_name[256];ldterm_eucpc_data_t eucpc_data[10];};
struct _ldterm_cs_methods {int (*ldterm_dispwidth)(uchar_t, void *, int);int (*ldterm_memwidth)(uchar_t, void *);};
struct _ldterm_eucpc_data {uchar_t byte_length;uchar_t screen_width;uchar_t msb_start;uchar_t msb_end;};
struct _ldterm_unicode_data_cell {unsigned __int8 u0 : 2;unsigned __int8 u1 : 2;unsigned __int8 u2 : 2;unsigned __int8 u3 : 2;};
struct _lwp_cond {struct _lwp_cond::_lwp_cond_flags flags;upad64_t data;};
struct _lwp_cond::_lwp_cond_flags {uint8_t flag[4];uint16_t type;uint16_t magic;};
struct _lwp_mutex {struct _lwp_mutex::_mutex_flags flags;union _lwp_mutex::_mutex_lock_un lock;upad64_t data;};
struct _lwp_mutex::_mutex_flags {uint16_t flag1;uint8_t flag2;uint8_t ceiling;union _lwp_mutex::_mutex_flags::_mbcp_type_un mbcp_type_un;uint16_t magic;};
union _lwp_mutex::_mutex_flags::_mbcp_type_un {uint16_t bcptype;struct _lwp_mutex::_mutex_flags::_mbcp_type_un::_mtype_rcount mtype_rcount;};
struct _lwp_mutex::_mutex_flags::_mbcp_type_un::_mtype_rcount {uint8_t count_type1;uint8_t count_type2;};
union _lwp_mutex::_mutex_lock_un {struct _lwp_mutex::_mutex_lock_un::_mutex_lock lock64;upad64_t owner64;};
struct _lwp_mutex::_mutex_lock_un::_mutex_lock {uint8_t pad[8];};
struct _lwp_sema {uint32_t count;uint16_t type;uint16_t magic;uint8_t flags[8];upad64_t data;};
struct _menu_ {char *label;int attr;__int16 longest;__int16 nchoices;struct _choice_ *choice;char **invis;};
struct _nl_catd_struct {void *__content;int __size;};
struct _ns_flagdata {int mask;int shift;};
struct _num_struct {__int16 _columns;__int16 _init_tabs;__int16 _lines;__int16 _lines_of_memory;__int16 _magic_cookie_glitch;__int16 _padding_baud_rate;__int16 _virtual_terminal;__int16 _width_status_line;__int16 _num_labels;__int16 _labl_height;__int16 _labl_width;__int16 _max_attributes;__int16 _maximum_windows;__int16 _max_colors;__int16 _max_pairs;__int16 _no_color_video;__int16 _buffer_capacity;__int16 _dot_vert_spacing;__int16 _dot_horz_spacing;__int16 _max_micro_address;__int16 _max_micro_jump;__int16 _micro_char_size;__int16 _micro_line_size;__int16 _number_of_pins;__int16 _output_res_char;__int16 _output_res_line;__int16 _output_res_horz_inch;__int16 _output_res_vert_inch;__int16 _print_rate;__int16 _wide_char_size;__int16 _buttons;__int16 _bit_image_entwining;__int16 _bit_image_type;__int16 Sentinel;};
struct _obscured_list {struct PANEL *panel_p;int start;int end;struct _obscured_list *next;};
typedef unsigned __int16 _ochtype;
struct _once {upad64_t __pthread_once_pad[4];};
typedef struct __private_execattr _priv_execattr;
struct _pthread_attr {void *__pthread_attrp;};
struct _pthread_cond {struct _pthread_cond::$47F9AA781B8B3BD4B4EFEED0C176A991 __pthread_cond_flags;upad64_t __pthread_cond_data;};
struct _pthread_cond::$47F9AA781B8B3BD4B4EFEED0C176A991 {uint8_t __pthread_cond_flag[4];uint32_t __pthread_cond_type;};
struct _pthread_condattr {void *__pthread_condattrp;};
struct _pthread_mutex {struct _pthread_mutex::$5CDA96BDFAA6A2FDFE604EF7C9E48890 __pthread_mutex_flags;union _pthread_mutex::$1A7858AFF91A54C35A86C698AE036482 __pthread_mutex_lock;upad64_t __pthread_mutex_data;};
union _pthread_mutex::$1A7858AFF91A54C35A86C698AE036482 {struct _pthread_mutex::$1A7858AFF91A54C35A86C698AE036482::$50F3AE10509153FFBB1A15F9D86B57ED __pthread_mutex_lock64;upad64_t __pthread_mutex_owner64;};
struct _pthread_mutex::$1A7858AFF91A54C35A86C698AE036482::$50F3AE10509153FFBB1A15F9D86B57ED {uint8_t __pthread_mutex_pad[8];};
struct _pthread_mutex::$5CDA96BDFAA6A2FDFE604EF7C9E48890 {uint16_t __pthread_mutex_flag1;uint8_t __pthread_mutex_flag2;uint8_t __pthread_mutex_ceiling;uint32_t __pthread_mutex_type;};
struct _pthread_mutexattr {void *__pthread_mutexattrp;};
struct _pthread_rwlock {int32_t __pthread_rwlock_readers;uint16_t __pthread_rwlock_type;uint16_t __pthread_rwlock_magic;upad64_t __pthread_rwlock_pad1[3];upad64_t __pthread_rwlock_pad2[2];upad64_t __pthread_rwlock_pad3[2];};
struct _pthread_rwlockattr {void *__pthread_rwlockattrp;};
struct _qop_num {char *qop;OM_uint32 num;char *mech;};
struct _quad {int val[2];};
struct _rwlock {int32_t readers;uint16_t type;uint16_t magic;uint16_t pad1[4];upad64_t pad10[2];uint16_t pad2[4];upad64_t pad20;uint16_t pad3[4];upad64_t pad30;};
struct _sema {uint32_t count;uint16_t type;uint16_t magic;upad64_t pad1[3];upad64_t pad2[2];};
struct _sema_impl {struct _kthread *s_slpq;int s_count;};
struct _si_user {struct _si_user *next;struct _si_user *prev;int fd;int ctlsize;char *ctlbuf;struct si_udata udata;int flags;int fflags;};
struct _sleepq_head {sleepq_t sq_queue;disp_lock_t sq_lock;};
struct _sobj_ops {syncobj_t sobj_type;kthread_t *(*sobj_owner)();void (*sobj_unsleep)(kthread_t *);void (*sobj_change_pri)(kthread_t *, pri_t, pri_t *);};
struct _str_struct {struct strs strs;struct strs2 strs2;struct strs3 strs3;struct strs4 strs4;};
struct _timespec {time_t __tv_sec;int __tv_nsec;};
typedef struct _timespec _timespec_t;
typedef struct _timespec _timestruc_t;
struct _tnf_ops;
struct _tnf_ref32_align {char c;tnf_ref32_t t;};
struct _tnf_tag_data {tnf_tag_version_t *tag_version;tnf_record_p (*tag_desc)(tnf_ops_t *, tnf_tag_data_t *);tnf_record_p tag_index;const char *tag_name;tnf_tag_data_t ****tag_props;size_t tag_size;size_t tag_align;size_t tag_ref_size;tnf_arg_kind_t tag_kind;tnf_tag_data_t **tag_base;tnf_tag_data_t ***tag_slots;char **tag_slot_names;};
struct _tnf_tag_version {size_t version_size;size_t tag_data_size;};
struct _wctype {wchar_t tmin;wchar_t tmax;unsigned __int8 *index;unsigned int *type;wchar_t cmin;wchar_t cmax;wchar_t *code;};
struct _win_st {__int16 _cury;__int16 _curx;__int16 _maxy;__int16 _maxx;__int16 _begy;__int16 _begx;char _flags;__int16 _yoffset;bool _clear;bool _leave;bool _immed;bool _sync;WINDOW *_padwin;_ochtype **_y16;__int16 *_firstch;__int16 *_lastch;__int16 _tmarg;__int16 _bmarg;unsigned __int32 _scroll : 1;unsigned __int32 _use_idl : 1;unsigned __int32 _use_keypad : 1;unsigned __int32 _notimeout : 1;unsigned __int32 _use_idc : 1;chtype _attrs;chtype _bkgd;int _delay;__int16 _ndescs;__int16 _parx;__int16 _pary;WINDOW *_parent;chtype **_y;__int16 _nbyte;__int16 _index;char _waitc[4];bool _insmode;};
struct _xti_bind {struct netbuf addr;unsigned int qlen;};
struct _xti_optmgmt {struct netbuf opt;t_scalar_t flags;};
typedef struct FC2_FRAME_HDR aFC2_FRAME_HDR;
typedef struct FC2_RJT_PARAM aFC2_RJT_PARAM;
typedef struct LA_RLS_reply aLA_RLS_reply;
typedef struct LOGI_PAYLOAD aLOGI_PAYLOAD;
typedef struct Xfer_Rdy aXFER_RDY;
struct abisym {void *a_real;int a_vflag;int a_tflag;};
typedef struct abisym abisym_t;
struct acache {uint32_t known;uint32_t allowed;struct rnode *rnode;cred_t *cred;struct acache *next;struct acache *list;};
typedef struct acache acache_t;
typedef void *acc_handle_t;
enum accept_stat {SUCCESS = 0x0,PROG_UNAVAIL = 0x1,PROG_MISMATCH = 0x2,PROC_UNAVAIL = 0x3,GARBAGE_ARGS = 0x4,SYSTEM_ERR = 0x5,};
struct accepted_reply {struct opaque_auth ar_verf;enum accept_stat ar_stat;union accepted_reply::$A90005FDD45017CA8E2AC88DE72D6F76 ru;};
union accepted_reply::$A90005FDD45017CA8E2AC88DE72D6F76 {struct accepted_reply::$A90005FDD45017CA8E2AC88DE72D6F76::$D52F10176CE5E6769EE83800681284AC AR_versions;struct accepted_reply::$A90005FDD45017CA8E2AC88DE72D6F76::$BFD7413E14FC21CAB05150D69A0647C0 AR_results;};
struct accepted_reply::$A90005FDD45017CA8E2AC88DE72D6F76::$BFD7413E14FC21CAB05150D69A0647C0 {caddr_t where;xdrproc_t proc;};
struct accepted_reply::$A90005FDD45017CA8E2AC88DE72D6F76::$D52F10176CE5E6769EE83800681284AC {rpcvers_t low;rpcvers_t high;};
struct acct {char ac_flag;char ac_stat;uid32_t ac_uid;gid32_t ac_gid;dev32_t ac_tty;time32_t ac_btime;comp_t ac_utime;comp_t ac_stime;comp_t ac_etime;comp_t ac_mem;comp_t ac_io;comp_t ac_rw;char ac_comm[8];};
struct acl {int a_type;uid_t a_id;o_mode_t a_perm;};
struct aclent {int type;uid32_t id;o_mode perm;};
typedef struct acl aclent_t;
struct action_arg {char *aa_path;char *aa_rawpath;char *aa_type;char *aa_media;char *aa_partname;char *aa_mountpoint;int aa_clean;int aa_mnt;};
struct action_list {action_list_entry action;struct action_list *next;};
struct action_list_entry {autofs_action action;union action_list_entry::$C44F4EEF0FC4FD7005019F0CD0D984D6 action_list_entry_u;};
union action_list_entry::$C44F4EEF0FC4FD7005019F0CD0D984D6 {struct mounta mounta;struct linka linka;};
typedef unsigned __int8 action_t;
typedef struct $CC222016AA0BB783D225EB3000BADEC7 adapter_t;
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;size_t ai_addrlen;char *ai_canonname;struct sockaddr *ai_addr;struct addrinfo *ai_next;};
struct adisc_payload {uint_t adisc_magic;uint_t adisc_hardaddr;uchar_t adisc_portwwn[8];uchar_t adisc_nodewwn[8];uint_t adisc_dest;};
struct adr_s {char *adr_stream;char *adr_now;};
typedef struct adr_s adr_t;
typedef struct _afd afd_t;
struct afhash {uint_t afh_hosthash;uint_t afh_nethash;};
struct aflt_cookie {int handler_type;void *cookie;};
struct afswitch {int (*af_hash)();int (*af_netmatch)();};
struct ainfo {char *local;mode_t mode;char owner[65];char group[65];major_t major;minor_t minor;};
struct aio_result_t {ssize_t aio_return;int aio_errno;};
struct aiocb {int aio_fildes;volatile void *aio_buf;size_t aio_nbytes;off_t aio_offset;int aio_reqprio;struct sigevent aio_sigevent;int aio_lio_opcode;aio_result_t aio_resultp;int aio_state;int aio__pad[1];};
struct aiocb64 {int aio_fildes;volatile void *aio_buf;size_t aio_nbytes;off64_t aio_offset;int aio_reqprio;struct sigevent aio_sigevent;int aio_lio_opcode;aio_result_t aio_resultp;int aio_state;int aio__pad[1];};
typedef struct aiocb64 aiocb64_t;
typedef struct aiocb aiocb_t;
struct aliases {struct aliases *a_next;char *a_name;int a_len;};
struct alloc_ext_desc {tag_t aed_tag;uint32_t aed_rev_ael;uint32_t aed_len_aed;};
typedef struct alloc_ext_desc alloc_ext_desc_t;
typedef struct ami_nss_cert_list *ami_cert_list_t;
typedef struct ami_cert *ami_cert_t;
typedef struct ami_handle *ami_handle_t;
enum ami_mechanism {AMI_RSA = 0x1,AMI_DSA = 0x2,AMI_MD2 = 0x3,AMI_MD5 = 0x4,AMI_SHA1 = 0x5,AMI_RSA_ENCR = 0x6,AMI_MD2WithRSAEncryption = 0x7,AMI_MD5WithRSAEncryption = 0x8,AMI_SHA1WithRSAEncryption = 0x9,AMI_SHA1WithDSASignature = 0xA,AMI_DES_CBC = 0xB,AMI_DES3_CBC = 0xC,AMI_RC2_CBC = 0xD,AMI_RC4 = 0xE,};
typedef struct ami_private_key *ami_private_key_t;
typedef struct ami_public_key *ami_public_key_t;
typedef struct Any *ami_session_key_params_t;
typedef struct ami_session_key *ami_session_key_t;
struct anch_vol_desc_ptr {tag_t avd_tag;extent_ad_t avd_main_vdse;extent_ad_t avd_res_vdse;char avd_res[480];};
typedef struct anch_vol_desc_ptr anch_vol_desc_ptr_t;
struct ani_free {kmutex_t ani_lock;pgcnt_t ani_count;};
typedef struct ani_free ani_free_t;
typedef unsigned int anoff_t;
struct anon {struct vnode *an_vp;struct vnode *an_pvp;anoff_t an_off;anoff_t an_poff;struct anon *an_hash;int an_refcnt;};
struct anon_hdr {pgcnt_t size;void **array_chunk;int flags;};
struct anon_map {kmutex_t serial_lock;kmutex_t lock;size_t size;struct anon_hdr *ahp;size_t swresv;uint_t refcnt;void *a_resv;};
struct anoninfo {pgcnt_t ani_max;pgcnt_t ani_free;pgcnt_t ani_resv;};
typedef struct pcmcia_adapter_nexus_private anp_t;
typedef enum $23CD138AFBA10A16D770AC92A674B7D9 ap_condition_t;
typedef enum $866CF79549BA537B648330022140BDBC ap_ostate_t;
typedef enum $EB79E54FE0EF018BB6845A2E0DAAE1E7 ap_rstate_t;
struct apcommon {uint_t apc_cmd;major_t apc_major;minor_t apc_minor;minor_t apc_lastminor;uint_t apc_npush;};
struct apdata {uint_t apd_anchor;};
struct appendRecord_t {OCF_File_t file;OCF_Any_t data;};
struct ar_client_notify_s {uint32_t arcn_cmd;uint32_t arcn_name_offset;uint32_t arcn_name_length;uint32_t arcn_code;};
struct ar_cmd_s {uint32_t arc_cmd;uint32_t arc_name_offset;uint32_t arc_name_length;};
struct ar_entry_add_s {uint32_t area_cmd;uint32_t area_name_offset;uint32_t area_name_length;uint32_t area_proto;uint32_t area_proto_addr_offset;uint32_t area_proto_addr_length;uint32_t area_proto_mask_offset;uint32_t area_flags;uint32_t area_hw_addr_offset;uint32_t area_hw_addr_length;};
struct ar_entry_delete_s {uint32_t ared_cmd;uint32_t ared_name_offset;uint32_t ared_name_length;uint32_t ared_proto;uint32_t ared_proto_addr_offset;uint32_t ared_proto_addr_length;};
struct ar_entry_query_s {uint32_t areq_cmd;uint32_t areq_name_offset;uint32_t areq_name_length;uint32_t areq_proto;uint32_t areq_target_addr_offset;uint32_t areq_target_addr_length;uint32_t areq_flags;uint32_t areq_sender_addr_offset;uint32_t areq_sender_addr_length;uint32_t areq_xmit_count;uint32_t areq_xmit_interval;uint32_t areq_max_buffered;uchar_t areq_sap[8];};
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
struct ar_mapping_add_s {uint32_t arma_cmd;uint32_t arma_name_offset;uint32_t arma_name_length;uint32_t arma_proto;uint32_t arma_proto_addr_offset;uint32_t arma_proto_addr_length;uint32_t arma_proto_mask_offset;uint32_t arma_proto_extract_mask_offset;uint32_t arma_flags;uint32_t arma_hw_addr_offset;uint32_t arma_hw_addr_length;uint32_t arma_hw_mapping_start;};
typedef struct ar_cmd_s arc_t;
typedef struct ar_client_notify_s arcn_t;
struct arct_s {pfi_t arct_pfi;uint32_t arct_cmd;int arct_min_len;boolean_t arct_ioctl_aware;boolean_t arct_priv_cmd;};
typedef struct arct_s arct_t;
typedef struct ar_entry_add_s area_t;
typedef struct ar_entry_delete_s ared_t;
typedef struct ar_entry_query_s areq_t;
struct arh_s {uchar_t arh_hardware[2];uchar_t arh_proto[2];uchar_t arh_hlen;uchar_t arh_plen;uchar_t arh_operation[2];};
typedef struct arh_s arh_t;
typedef struct ar_mapping_add_s arma_t;
struct arphdr {ushort_t ar_hrd;ushort_t ar_pro;uchar_t ar_hln;uchar_t ar_pln;ushort_t ar_op;};
struct arpreq {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;};
struct arq_private_data {struct buf *arq_save_bp;struct fas_cmd *arq_save_sp;};
struct as {kmutex_t a_contents;uchar_t a_flags;uchar_t a_vbits;kcondvar_t a_cv;struct hat *a_hat;struct hrmstat *a_hrm;caddr_t a_userlimit;union as::$FD7ECAE4B99ABB3F02DCF01D47D0EBC9 a_cache;krwlock_t a_lock;int a_nwpage;struct watched_page *a_wpage;seg_next a_segs;size_t a_size;struct seg *a_tail;uint_t a_nsegs;uchar_t a_lrep;uchar_t a_hilevel;uchar_t a_unused;uchar_t a_updatedir;vnode_t **a_objectdir;size_t a_sizedir;};
union as::$FD7ECAE4B99ABB3F02DCF01D47D0EBC9 {struct seg *seglast;ssl_spath *spath;};
struct attr_hdr {uint32_t ahdr_atype;uint8_t ahdr_astype;uint8_t ahdr_res[3];uint32_t ahdr_length;uint8_t ahdr_data[4];};
struct attrcache_header {uint_t ach_count;int ach_nffs;int ach_nblks;uint_t ach_rlno;enum cachefs_rl_type ach_rl_current;};
struct attrcache_index {unsigned __int32 ach_written : 1;unsigned __int32 ach_offset : 31;};
struct au_acl_tok {ulong_t type;ulong_t id;ulong_t mode;};
typedef struct au_acl_tok au_acl_tok_t;
struct au_arg32_tok {uchar_t num;uint32_t val;ushort_t length;char *data;};
typedef struct au_arg32_tok au_arg32_tok_t;
struct au_arg64_tok {uchar_t num;uint64_t val;ushort_t length;char *data;};
typedef struct au_arg64_tok au_arg64_tok_t;
typedef pid_t au_asid_t;
struct au_attr32_tok {uint_t mode;uint_t uid;uint_t gid;int fs;int64_t node;uint32_t dev;};
typedef struct au_attr32_tok au_attr32_tok_t;
struct au_attr64_tok {uint_t mode;uint_t uid;uint_t gid;int fs;int64_t node;uint64_t dev;};
typedef struct au_attr64_tok au_attr64_tok_t;
struct au_attr_tok {uint_t mode;uint_t uid;uint_t gid;int fs;int32_t node;uint32_t dev;};
typedef struct au_attr_tok au_attr_tok_t;
struct au_buff {caddr_t buf;struct au_buff *next_buf;struct au_buff *next_rec;ushort_t rec_len;uchar_t len;uchar_t flag;};
typedef struct au_buff au_buff_t;
struct au_class_ent {char *ac_name;au_class_t ac_class;char *ac_desc;};
typedef struct au_class_ent au_class_ent_t;
typedef uint_t au_class_t;
struct au_data_tok {uchar_t pfmt;uchar_t size;uchar_t number;char *data;};
typedef struct au_data_tok au_data_tok_t;
typedef __int16 au_emod_t;
struct au_evclass_map {au_event_t ec_number;au_class_t ec_class;};
typedef struct au_evclass_map au_evclass_map_t;
struct au_event_ent {au_event_t ae_number;char *ae_name;char *ae_desc;au_class_t ae_class;};
typedef struct au_event_ent au_event_ent_t;
typedef __int16 au_event_t;
struct au_exit_tok {int status;int retval;};
typedef struct au_exit_tok au_exit_tok_t;
struct au_file32_tok {int32_t sec;int32_t usec;ushort_t length;char *fname;};
typedef struct au_file32_tok au_file32_tok_t;
struct au_file64_tok {int64_t sec;int64_t usec;ushort_t length;char *fname;};
typedef struct au_file64_tok au_file64_tok_t;
typedef struct audit_fstat au_fstat_t;
struct au_groups_tok {gid_t groups[16];};
typedef struct au_groups_tok au_groups_tok_t;
struct au_header32_tok {uint_t length;uchar_t version;au_event_t event;ushort_t emod;int32_t sec;int32_t nsec;};
typedef struct au_header32_tok au_header32_tok_t;
struct au_header64_tok {uint_t length;uchar_t version;au_event_t event;ushort_t emod;int64_t sec;int64_t nsec;};
typedef struct au_header64_tok au_header64_tok_t;
typedef uid_t au_id_t;
struct au_inaddr_tok {struct in_addr ia;};
typedef struct au_inaddr_tok au_inaddr_tok_t;
struct au_invalid_tok {ushort_t length;char *data;};
typedef struct au_invalid_tok au_invalid_tok_t;
struct au_ip_tok {uchar_t version;struct ip ip;};
typedef struct au_ip_tok au_ip_tok_t;
struct au_ipc_perm_tok {struct ipc_perm ipc_perm;};
typedef struct au_ipc_perm_tok au_ipc_perm_tok_t;
struct au_ipc_tok {key_t id;};
typedef struct au_ipc_tok au_ipc_tok_t;
struct au_iport_tok {ushort_t iport;};
typedef struct au_iport_tok au_iport_tok_t;
struct au_list_stat {int called;int hit;int miss;int free;int size;};
struct au_mask {unsigned int am_success;unsigned int am_failure;};
typedef struct au_mask au_mask_t;
struct au_opaque_tok {ushort_t length;char *data;};
typedef struct au_opaque_tok au_opaque_tok_t;
struct au_path_tok {ushort_t length;char *name;};
typedef struct au_path_tok au_path_tok_t;
struct au_proc32_tok {au_id_t auid;uid_t euid;gid_t egid;uid_t ruid;gid_t rgid;pid_t pid;pid_t sid;au_tid32_t tid;};
typedef struct au_proc32_tok au_proc32_tok_t;
struct au_proc64_tok {au_id_t auid;uid_t euid;gid_t egid;uid_t ruid;gid_t rgid;pid_t pid;pid_t sid;au_tid64_t tid;};
typedef struct au_proc64_tok au_proc64_tok_t;
struct au_qctrl {size_t aq_hiwater;size_t aq_lowater;size_t aq_bufsz;clock_t aq_delay;};
struct au_ret32_tok {uchar_t error;uint32_t retval;};
typedef struct au_ret32_tok au_ret32_tok_t;
struct au_ret64_tok {uchar_t error;uint64_t retval;};
typedef struct au_ret64_tok au_ret64_tok_t;
struct au_seq_tok {uint_t num;};
typedef struct au_seq_tok au_seq_tok_t;
struct au_server_tok {au_id_t auid;uid_t euid;uid_t ruid;gid_t egid;pid_t pid;};
typedef struct au_server_tok au_server_tok_t;
struct au_socket_tok {__int16 type;ushort_t lport;struct in_addr laddr;ushort_t fport;struct in_addr faddr;};
typedef struct au_socket_tok au_socket_tok_t;
typedef struct audit_stat au_stat_t;
typedef au_class_t au_state_t;
struct au_subj32_tok {au_id_t auid;uid_t euid;gid_t egid;uid_t ruid;gid_t rgid;pid_t pid;pid_t sid;au_tid32_t tid;};
typedef struct au_subj32_tok au_subj32_tok_t;
struct au_subj64_tok {au_id_t auid;uid_t euid;gid_t egid;uid_t ruid;gid_t rgid;pid_t pid;pid_t sid;au_tid64_t tid;};
typedef struct au_subj64_tok au_subj64_tok_t;
struct au_termid {dev_t at_port;uint_t at_type;uint_t at_addr[4];};
typedef struct au_termid au_termid_t;
struct au_text_tok {ushort_t length;char *data;};
typedef struct au_text_tok au_text_tok_t;
struct au_tid {dev_t port;uint_t machine;};
struct au_tid32 {uint32_t port;uint32_t machine;};
typedef struct au_tid32 au_tid32_t;
struct au_tid64 {uint64_t port;uint32_t machine;};
typedef struct au_tid64 au_tid64_t;
struct au_tid_addr {dev_t at_port;uint_t at_type;uint_t at_addr[4];};
typedef struct au_tid_addr au_tid_addr_t;
typedef struct au_tid au_tid_t;
struct au_token {char id;struct au_token *next;struct au_token *prev;char *data;ushort_t size;union au_token::$48B8A567D7721A2375B9B4755C07ABC8 un;};
union au_token::$48B8A567D7721A2375B9B4755C07ABC8 {au_arg32_tok_t arg32;au_arg64_tok_t arg64;au_acl_tok_t acl;au_attr32_tok_t attr32;au_attr64_tok_t attr64;au_data_tok_t data;au_exit_tok_t exit;au_file32_tok_t file32;au_file64_tok_t file64;au_groups_tok_t groups;au_header32_tok_t header32;au_header64_tok_t header64;au_inaddr_tok_t inaddr;au_ip_tok_t ip;au_ipc_perm_tok_t ipc_perm;au_ipc_tok_t ipc;au_iport_tok_t iport;au_invalid_tok_t invalid;au_opaque_tok_t opaque;au_path_tok_t path;au_proc32_tok_t proc32;au_proc64_tok_t proc64;au_ret32_tok_t ret32;au_ret64_tok_t ret64;au_server_tok_t server;au_seq_tok_t seq;au_socket_tok_t socket;au_subj32_tok_t subj32;au_subj64_tok_t subj64;au_text_tok_t text;au_trailer_tok_t trailer;};
typedef struct au_token au_token_t;
struct au_trailer_tok {ushort_t magic;uint_t length;};
typedef struct au_trailer_tok au_trailer_tok_t;
struct au_user_ent {char *au_name;au_mask_t au_always;au_mask_t au_never;};
typedef struct au_user_ent au_user_ent_t;
struct au_user_str_s {char *au_name;char *au_always;char *au_never;};
typedef struct au_user_str_s au_user_str_t;
struct audio_device {char name[16];char version[16];char config[16];};
typedef struct audio_device audio_device_t;
struct audio_info {audio_prinfo_t play;audio_prinfo_t record;uint_t monitor_gain;uchar_t output_muted;uchar_t ref_cnt;uchar_t _xxx[2];uint_t hw_features;uint_t sw_features;uint_t sw_features_enabled;};
typedef struct audio_info audio_info_t;
struct audio_prinfo {uint_t sample_rate;uint_t channels;uint_t precision;uint_t encoding;uint_t gain;uint_t port;uint_t avail_ports;uint_t mod_ports;uint_t _xxx;uint_t buffer_size;uint_t samples;uint_t eof;uchar_t pause;uchar_t error;uchar_t waiting;uchar_t balance;ushort_t minordev;uchar_t open;uchar_t active;};
typedef struct audio_prinfo audio_prinfo_t;
struct audit_fstat {unsigned int af_filesz;unsigned int af_currsz;};
struct audit_queue {au_buff_t *head;au_buff_t *tail;ssize_t cnt;size_t hiwater;size_t lowater;size_t bufsz;size_t buflen;clock_t delay;int wt_block;int rd_block;kmutex_t lock;kcondvar_t write_cv;kcondvar_t read_cv;};
struct audit_s2e {au_event_t (*au_init)(au_event_t);int au_event;void (*au_start)(struct t_audit_data *);void (*au_finish)(struct t_audit_data *, int, union rval *);int au_ctrl;};
struct audit_stat {unsigned int as_version;unsigned int as_numevent;int as_generated;int as_nonattrib;int as_kernel;int as_audit;int as_auditctl;int as_enqueue;int as_written;int as_wblocked;int as_rblocked;int as_dropped;int as_totalsize;unsigned int as_memused;};
typedef au_mask_t audit_state_t;
struct auditinfo {au_id_t ai_auid;au_mask_t ai_mask;au_tid_t ai_termid;au_asid_t ai_asid;};
struct auditinfo_addr {au_id_t ai_auid;au_mask_t ai_mask;au_tid_addr_t ai_termid;au_asid_t ai_asid;};
typedef struct auditinfo_addr auditinfo_addr_t;
typedef struct auditinfo auditinfo_t;
struct auditpinfo {pid_t ap_pid;au_id_t ap_auid;au_mask_t ap_mask;au_tid_t ap_termid;au_asid_t ap_asid;};
struct auditpinfo_addr {pid_t ap_pid;au_id_t ap_auid;au_mask_t ap_mask;au_tid_addr_t ap_termid;au_asid_t ap_asid;};
struct audtrace_hdr {uint_t seq;int type;struct timeval timestamp;char _f[8];};
typedef struct audtrace_hdr audtrace_hdr_t;
typedef au_id_t auid_t;
struct auth_req {netobj req_client;char *req_netid;char *req_path;int req_flavor;};
struct auth_res {int auth_perm;};
enum auth_stat {AUTH_OK = 0x0,AUTH_BADCRED = 0x1,AUTH_REJECTEDCRED = 0x2,AUTH_BADVERF = 0x3,AUTH_REJECTEDVERF = 0x4,AUTH_TOOWEAK = 0x5,AUTH_INVALIDRESP = 0x6,AUTH_FAILED = 0x7,AUTH_KERB_GENERIC = 0x8,AUTH_TIMEEXPIRE = 0x9,AUTH_TKT_FILE = 0xA,AUTH_DECODE = 0xB,AUTH_NET_ADDR = 0xC,RPCSEC_GSS_NOCRED = 0xD,RPCSEC_GSS_FAILED = 0xE,};
struct authattr_s {char *name;char *res1;char *res2;char *short_desc;char *long_desc;kva_t *attr;};
typedef struct authattr_s authattr_t;
struct authdes_cred {enum authdes_namekind adc_namekind;struct authdes_fullname adc_fullname;uint32_t adc_nickname;};
struct authdes_fullname {char *name;des_block key;uint32_t window;};
enum authdes_namekind {ADN_FULLNAME = 0x0,ADN_NICKNAME = 0x1,};
struct authdes_verf {union authdes_verf::$D072B0FF48589EAC93A5A80C9BF6CD34 adv_time_u;uint32_t adv_int_u;};
union authdes_verf::$D072B0FF48589EAC93A5A80C9BF6CD34 {struct timeval adv_ctime;des_block adv_xtime;};
struct authstr_s {char *name;char *res1;char *res2;char *short_desc;char *long_desc;char *attr;};
typedef struct authstr_s authstr_t;
struct authsys_parms {uint_t aup_time;char *aup_machname;uid_t aup_uid;gid_t aup_gid;uint_t aup_len;gid_t *aup_gids;};
enum autofs_action {AUTOFS_MOUNT_RQ = 0x0,AUTOFS_LINK_RQ = 0x1,AUTOFS_NONE = 0x2,};
struct autofs_args {struct netbuf addr;char *path;char *opts;char *map;char *subdir;char *key;int mount_to;int rpc_to;int direct;};
struct autofs_lookupargs {char *map;char *path;char *name;char *subdir;char *opts;bool_t isdirect;};
struct autofs_lookupres {enum autofs_res lu_res;lookup_result_type lu_type;int lu_verbose;};
struct autofs_mountres {mount_result_type mr_type;int mr_verbose;};
struct autofs_rddirargs {char *rda_map;u_int rda_offset;u_int rda_count;};
struct autofs_rddirres {enum autofs_res rd_status;u_int rd_bufsize;struct autofsrddir rd_rddir;};
enum autofs_res {AUTOFS_OK = 0x0,AUTOFS_NOENT = 0x2,AUTOFS_ECOMM = 0x5,AUTOFS_NOMEM = 0xC,AUTOFS_NOTDIR = 0x14,AUTOFS_SHUTDOWN = 0x3E8,};
enum autofs_stat {AUTOFS_ACTION = 0x0,AUTOFS_DONE = 0x1,};
struct autofsrddir {u_int rddir_offset;u_int rddir_size;bool_t rddir_eof;struct dirent64 *rddir_entries;};
struct autovec {avfunc av_vector;caddr_t av_intarg;dev_info_t *av_devi;uint_t av_fast;};
union auxent {struct auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774 x_sym;struct auxent::$DCBB1492986F0BE2861FD6E058DF7EAB x_file;struct auxent::$FB1486A92607447806F09823D579EE12 x_scn;struct auxent::$F460BEB6336398C870E506DAD23CA9F2 x_tv;};
struct auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774 {int x_tagndx;union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$FAC801B16405A3810F07150B5E65B5F1 x_misc;union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$5426BF9CDAC0D098DF12E4CF0DDB9B67 x_fcnary;unsigned __int16 x_tvndx;};
union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$5426BF9CDAC0D098DF12E4CF0DDB9B67 {struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$A4FE982D5F029E6ACEFDE76E40C46556 x_fcn;struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$93D0B1966774B86D3450284C91FC650B x_ary;};
union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$FAC801B16405A3810F07150B5E65B5F1 {struct auxent::$::$FAC801B16405A3810F07150B5E65B5F1::$6A81AB9DD74A0937A06BA2C0FB9C8664 x_lnsz;int x_fsize;};
struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$93D0B1966774B86D3450284C91FC650B {unsigned __int16 x_dimen[4];};
struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$A4FE982D5F029E6ACEFDE76E40C46556 {int x_lnnoptr;int x_endndx;};
struct auxent::$::$FAC801B16405A3810F07150B5E65B5F1::$6A81AB9DD74A0937A06BA2C0FB9C8664 {unsigned __int16 x_lnno;unsigned __int16 x_size;};
struct auxent::$DCBB1492986F0BE2861FD6E058DF7EAB {char x_fname[14];};
struct auxent::$F460BEB6336398C870E506DAD23CA9F2 {int x_tvfill;unsigned __int16 x_tvlen;unsigned __int16 x_tvran[2];};
struct auxent::$FB1486A92607447806F09823D579EE12 {int x_scnlen;unsigned __int16 x_nreloc;unsigned __int16 x_nlinno;};
typedef struct $57D8EEF26067F90BF74ECA27AA5A03F5 auxv_t;
typedef uint_t (*avfunc)(caddr_t);
struct ba_acc {unsigned __int8 seq_id : 8;uchar_t org_s_id[3];ushort_t ox_id;ushort_t rx_id;};
typedef struct ba_acc ba_acc_t;
struct ba_rjt {uchar_t reseved;uchar_t reason_code;uchar_t explanation;uchar_t vendor;};
typedef struct ba_rjt ba_rjt_t;
struct bagent {int size;char *src;char *dest;};
struct bandinfo {unsigned __int8 bi_pri;int bi_flag;};
typedef unsigned __int8 *baseaddr_t;
struct bind {struct bind *b_next;char *b_name;char *b_bind_name;int b_num;};
struct bind_ux {struct sockaddr_un name;struct ux_extaddr ux_extaddr;};
struct biostats {kstat_named_t bio_lookup;kstat_named_t bio_hit;kstat_named_t bio_bufwant;kstat_named_t bio_bufwait;kstat_named_t bio_bufbusy;kstat_named_t bio_bufdup;};
typedef int32_t blkcnt32_t;
typedef longlong_t blkcnt64_t;
typedef int blkcnt_t;
typedef int blksize_t;
struct block_descriptor {uchar_t density_code;uchar_t blks_hi;uchar_t blks_mid;uchar_t blks_lo;uchar_t reserved;uchar_t blksize_hi;uchar_t blksize_mid;uchar_t blksize_lo;};
struct bmac {uint_t xifc;uchar_t pad2[252];uint_t stat;uint_t mask;uchar_t pad3[256];uint_t txrst;uint_t txcfg;uint_t ipg1;uint_t ipg2;uint_t alimit;uint_t slot;uint_t palen;uint_t papat;uint_t txsfd;uint_t jam;uint_t txmax;uint_t txmin;uint_t parg;uint_t dcnt;uint_t nccnt;uint_t ntcnt;uint_t excnt;uint_t ltcnt;uint_t rseed;uint_t txsm;uchar_t pad4[176];uint_t rxrst;uint_t rxcfg;uint_t rxmax;uint_t rxmin;uint_t madd2;uint_t madd1;uint_t madd0;uint_t frcnt;uint_t lecnt;uint_t aecnt;uint_t fecnt;uint_t rxsm;uint_t rxcv;uchar_t pad5[4];uint_t hash3;uint_t hash2;uint_t hash1;uint_t hash0;uint_t afr2;uint_t afr1;uint_t afr0;uint_t afmr;};
struct bmactcvr {uint_t pal1;uint_t pal2;};
typedef int bool_t;
typedef enum $F5D0AC97B70F66A0B82E3660E1E74CD3 boolean_t;
typedef unsigned __int64 boot_cell_t;
struct bootops {uint_t bsys_version;struct bootops *bsys_super;struct bsys_mem *boot_mem;uint32_t bsys_pad2[2];uint64_t bsys_1275_call;uint32_t bsys_pad1[7];uint32_t bsys_printf;};
struct bootparam {char *bp_argv[8];char bp_strings[100];char bp_dev[2];int bp_ctlr;int bp_unit;int bp_part;char *bp_name;struct boottab *bp_boottab;};
struct bootsec {uchar_t instr[3];uchar_t version[8];uchar_t bps[2];uchar_t spcl;uchar_t res_sec[2];uchar_t nfat;uchar_t rdirents[2];uchar_t numsect[2];uchar_t mediadesriptor;ushort_t fatsec;ushort_t spt;ushort_t nhead;ushort_t hiddensec;uint_t totalsec;};
struct bp_address {int address_type;union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 bp_address;};
union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 {ip_addr_t ip_addr;};
typedef char *bp_fileid_t;
struct bp_getfile_arg {bp_machine_name_t client_name;bp_fileid_t file_id;};
struct bp_getfile_res {bp_machine_name_t server_name;bp_address server_address;bp_path_t server_path;};
typedef char *bp_machine_name_t;
typedef char *bp_path_t;
struct bp_whoami_arg {bp_address client_address;};
struct bp_whoami_res {bp_machine_name_t client_name;bp_machine_name_t domain_name;bp_address router_address;};
struct bpp_error_status {char timeout_occurred;char bus_error;uchar_t pin_status;};
struct bpp_pins {uchar_t output_reg_pins;uchar_t input_reg_pins;};
struct bpp_regs {uint_t dma_csr;uint_t dma_addr;uint_t dma_bcnt;uint_t unused;ushort_t hw_config;ushort_t op_config;uchar_t data;uchar_t trans_cntl;uchar_t out_pins;uchar_t in_pins;ushort_t int_cntl;};
struct bpp_transfer_parms {enum handshake_t read_handshake;int read_setup_time;int read_strobe_width;int read_timeout;enum handshake_t write_handshake;int write_setup_time;int write_strobe_width;int write_timeout;};
struct bpp_unit {kmutex_t bpp_mutex;kcondvar_t wr_cv;int flags;int openflags;timeout_id_t bpp_transfer_timeout_ident;timeout_id_t bpp_fakeout_timeout_ident;uchar_t timeouts;int sbus_clock_cycle;enum bpp_unit::trans_type last_trans;ddi_iblock_cookie_t bpp_block_cookie;ddi_dma_handle_t bpp_dma_handle;int transfer_remainder;dev_info_t *dip;struct buf *bpp_buffer;volatile struct bpp_regs *bpp_regs_p;struct bpp_transfer_parms transfer_parms;struct bpp_pins pins;struct bpp_error_status error_stat;kstat_t *intrstats;};
enum bpp_unit::trans_type {read_trans = 0x0,write_trans = 0x1,};
struct bsys_mem {struct memlist *physinstalled;struct memlist *physavail;struct memlist *virtavail;uint_t extent;};
struct buf {int b_flags;struct buf *b_forw;struct buf *b_back;struct buf *av_forw;struct buf *av_back;o_dev_t b_dev;size_t b_bcount;union buf::$06720CD10B1F5166208F8EFA5A9BD2FD b_un;lldaddr_t _b_blkno;char b_oerror;size_t b_resid;clock_t b_start;struct proc *b_proc;struct page *b_pages;clock_t b_reltime;size_t b_bufsize;int (*b_iodone)(struct buf *);struct vnode *b_vp;struct buf *b_chain;int b_reqcnt;int b_error;void *b_private;dev_t b_edev;ksema_t b_sem;ksema_t b_io;struct buf *b_list;struct page **b_shadow;};
union buf::$06720CD10B1F5166208F8EFA5A9BD2FD {caddr_t b_addr;int *b_words;struct fs *b_fs;struct csum *b_cs;struct cg *b_cg;struct dinode *b_dino;daddr32_t *b_daddr;};
typedef struct buf buf_t;
typedef void *bufcall_id_t;
struct bufhd {int b_flags;struct buf *b_forw;struct buf *b_back;};
struct c_dirent {uint_t d_length;uint_t d_flag;cfs_cid_t d_id;offset_t d_offset;cfs_fid_t d_cookie;ushort_t d_namelen;char d_name[1];};
struct c_hdr {char c_magic[6];char c_dev[6];char c_ino[6];char c_mode[6];char c_uid[6];char c_gid[6];char c_nlink[6];char c_rdev[6];char c_mtime[11];char c_namesz[6];char c_filesz[11];char c_name[256];};
struct cache_label {int cl_cfsversion;int cl_maxblks;int cl_blkhiwat;int cl_blklowat;int cl_maxinodes;int cl_filehiwat;int cl_filelowat;int cl_blocktresh;int cl_blockmin;int cl_filetresh;int cl_filemin;int cl_maxfiles;};
struct cache_usage {int cu_blksused;int cu_filesused;uint_t cu_flags;ushort_t cu_unique;};
struct cachefs_allocmap {u_offset_t am_start_off;u_offset_t am_size;};
struct cachefs_boinfo {int boi_which;int boi_device;int boi_len;char *boi_value;};
enum cachefs_cmd {CFS_INVALID = 0x0,CFS_CACHE_SYNC = 0x1,CFS_PUTPAGE = 0x2,CFS_IDLE = 0x3,CFS_POPULATE = 0x4,CFS_NOOP = 0x5,};
struct cachefs_cnvt_mnt {int cm_op;int cm_namelen;char *cm_name;};
enum cachefs_connected {CFS_CD_CONNECTED = 0x801,CFS_CD_DISCONNECTED = 0x802,CFS_CD_RECONNECTING = 0x803,};
struct cachefs_debug_info {char *cdb_message;uint_t cdb_flags;int cdb_int;void *cdb_pointer;uint_t cdb_count;cachefscache_t *cdb_cachep;struct fscache *cdb_fscp;struct cnode *cdb_cnode;vnode_t *cdb_frontvp;vnode_t *cdb_backvp;kthread_id_t cdb_thread;hrtime_t cdb_timestamp;int cdb_depth;uintptr_t cdb_stack[16];struct cachefs_debug_info *cdb_next;};
typedef struct cachefs_debug_info cachefs_debug_info_t;
struct cachefs_fid {ushort_t cf_len;ino64_t cf_fileno;uint_t cf_gen;};
struct cachefs_fs_sync_req {struct cachefscache *cf_cachep;};
struct cachefs_fsinfo {uint_t fi_mntflags;int fi_popsize;ino64_t fi_root;uint_t fi_resettimes;uint_t fi_resetfileno;ino64_t fi_localfileno;int fi_fgsize;uint_t fi_pad[1];};
typedef struct cachefs_fsinfo cachefs_fsinfo_t;
struct cachefs_idle_req {vnode_t *ci_vp;};
struct cachefs_inum_trans {ino64_t cit_real;ino64_t cit_fake;};
typedef struct cachefs_inum_trans cachefs_inum_trans_t;
struct cachefs_kstat_key {int ks_id;int ks_mounted;uint64_t ks_vfsp;uint64_t ks_mountpoint;uint64_t ks_backfs;uint64_t ks_cachedir;uint64_t ks_cacheid;};
typedef struct cachefs_kstat_key cachefs_kstat_key_t;
struct cachefs_log_calloc_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;u_offset_t off;uint_t len;};
struct cachefs_log_control {int lc_magic;char lc_path[1024];uchar_t lc_which[3];uint64_t lc_cachep;};
typedef struct cachefs_log_control cachefs_log_control_t;
struct cachefs_log_cookie {void *cl_head;void *cl_tail;uint_t cl_size;struct vnode *cl_logvp;cachefs_log_control_t *cl_logctl;int cl_magic;};
typedef struct cachefs_log_cookie cachefs_log_cookie_t;
struct cachefs_log_create_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;};
struct cachefs_log_csymlink_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;int size;};
struct cachefs_log_filldir_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;int size;};
struct cachefs_log_getpage_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;u_offset_t offset;uint_t len;};
struct cachefs_log_gpfront_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;u_offset_t off;uint_t len;};
struct cachefs_log_logfile_header {uint_t lh_magic;uint_t lh_revision;int lh_errno;uint_t lh_blocks;uint_t lh_files;uint_t lh_maxbsize;uint_t lh_pagesize;};
struct cachefs_log_mdcreate_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;uint_t count;};
struct cachefs_log_mkdir_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;};
struct cachefs_log_mount_record {int type;int error;cfs_time_t time;uint64_t vfsp;uint_t flags;uint_t popsize;uint_t fgsize;ushort_t pathlen;ushort_t cacheidlen;char path[2];};
struct cachefs_log_nocache_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;};
struct cachefs_log_populate_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;u_offset_t off;uint_t size;};
struct cachefs_log_putpage_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;u_offset_t offset;uint_t len;};
struct cachefs_log_readdir_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;u_offset_t offset;int eof;};
struct cachefs_log_readlink_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;uint_t length;};
struct cachefs_log_remove_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;};
struct cachefs_log_rename_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t gone;ino64_t fileno;int removed;cfs_uid_t uid;};
struct cachefs_log_rfdir_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;};
struct cachefs_log_rmdir_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;};
struct cachefs_log_symlink_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;uint_t size;cfs_uid_t uid;};
struct cachefs_log_truncate_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;cfs_uid_t uid;u_offset_t size;};
struct cachefs_log_ualloc_record {int type;int error;cfs_time_t time;uint64_t vfsp;cfs_fid_t fid;ino64_t fileno;u_offset_t off;uint_t len;};
struct cachefs_log_umount_record {int type;int error;cfs_time_t time;uint64_t vfsp;};
struct cachefs_metadata {struct vattr md_vattr;o_mode_t md_aclclass;ushort_t md_pad1;fid_t md_cookie;int md_flags;uint_t md_rlno;enum cachefs_rl_type md_rltype;int md_consttype;fid_t md_fid;uint_t md_frontblks;uint_t md_gen;struct cfs_cid md_parent;timestruc_t md_timestamp;timestruc_t md_x_time;timestruc_t md_localmtime;timestruc_t md_localctime;uint_t md_resettimes;ino64_t md_localfileno;uint_t md_resetfileno;uint_t md_seq;int md_allocents;struct cachefs_allocmap md_allocinfo[32];};
typedef struct cachefs_metadata cachefs_metadata_t;
struct cachefs_mountargs {struct cachefsoptions cfs_options;char *cfs_fsid;char cfs_cacheid[128];char *cfs_cachedir;char *cfs_backfs;uint_t cfs_acregmin;uint_t cfs_acregmax;uint_t cfs_acdirmin;uint_t cfs_acdirmax;char *cfs_hostname;char *cfs_backfsname;};
struct cachefs_populate_req {vnode_t *cpop_vp;offset_t cpop_off;size_t cpop_size;};
struct cachefs_putpage_req {vnode_t *cp_vp;offset_t cp_off;int cp_len;int cp_flags;};
struct cachefs_req {struct cachefs_req *cfs_next;enum cachefs_cmd cfs_cmd;cred_t *cfs_cr;union cachefs_req::$5AF54FD280CEF09DDCE8149009F1980F cfs_req_u;kmutex_t cfs_req_lock;};
union cachefs_req::$5AF54FD280CEF09DDCE8149009F1980F {struct cachefs_fs_sync_req cu_fs_sync;struct cachefs_idle_req cu_idle;struct cachefs_putpage_req cu_putpage;struct cachefs_populate_req cu_populate;};
struct cachefs_rl_info {uint_t rl_entries;cfs_time_t rl_gctime;cachefs_rl_listhead_t rl_items[9];};
typedef struct cachefs_rl_info cachefs_rl_info_t;
struct cachefs_rl_listhead {uint_t rli_front;uint_t rli_back;int rli_blkcnt;int rli_itemcnt;};
typedef struct cachefs_rl_listhead cachefs_rl_listhead_t;
enum cachefs_rl_type {CACHEFS_RL_NONE = 0x101,CACHEFS_RL_FREE = 0x102,CACHEFS_RL_GC = 0x103,CACHEFS_RL_ACTIVE = 0x104,CACHEFS_RL_ATTRFILE = 0x105,CACHEFS_RL_MODIFIED = 0x106,CACHEFS_RL_PACKED = 0x107,CACHEFS_RL_PACKED_PENDING = 0x108,CACHEFS_RL_MF = 0x109,};
struct cachefs_stats {uint_t st_hits;uint_t st_misses;uint_t st_passes;uint_t st_fails;uint_t st_modifies;uint_t st_gc_count;cfs_time_t st_gc_time;cfs_time_t st_gc_before_atime;cfs_time_t st_gc_after_atime;};
typedef struct cachefs_stats cachefs_stats_t;
struct cachefs_workq {struct cachefs_req *wq_head;struct cachefs_req *wq_tail;int wq_length;int wq_thread_count;int wq_max_len;int wq_halt_request;unsigned __int32 wq_keepone : 1;unsigned __int32 wq_logwork : 1;kcondvar_t wq_req_cv;kcondvar_t wq_halt_cv;kmutex_t wq_queue_lock;cachefscache_t *wq_cachep;};
struct cachefscache {struct cachefscache *c_next;uint_t c_flags;struct cache_label c_label;struct cache_usage c_usage;struct cachefs_rl_info c_rlinfo;struct vnode *c_resfilevp;uint_t c_rl_window;rl_entry_t *c_rl_entries;struct vnode *c_dirvp;struct vnode *c_lockvp;struct vnode *c_lostfoundvp;int c_refcnt;struct fscache *c_fslist;struct cachefs_workq c_workq;kmutex_t c_contentslock;kmutex_t c_fslistlock;kmutex_t c_mflock;ushort_t c_unique;kcondvar_t c_cwcv;kcondvar_t c_cwhaltcv;uint_t c_gc_count;time_t c_gc_time;time_t c_gc_before;time_t c_gc_after;uint_t c_apop_inqueue;pid_t c_rootdaemonid;struct cachefs_log_cookie *c_log;struct cachefs_log_control *c_log_ctl;kmutex_t c_log_mutex;};
typedef struct cachefscache cachefscache_t;
struct cachefsio_create_arg {cfs_fid_t cr_backfid;char cr_name[256];cfs_cid_t cr_cid;cfs_vattr_t cr_va;int cr_exclusive;int cr_mode;cred_t cr_cred;gid_t cr_groups[15];};
typedef struct cachefsio_create_arg cachefsio_create_arg_t;
struct cachefsio_create_return {cfs_fid_t cr_newfid;cfs_timestruc_t cr_ctime;cfs_timestruc_t cr_mtime;};
typedef struct cachefsio_create_return cachefsio_create_return_t;
struct cachefsio_dcmd {cfsdcmd_cmds_t d_cmd;void *d_sdata;int d_slen;void *d_rdata;int d_rlen;};
typedef struct cachefsio_dcmd cachefsio_dcmd_t;
struct cachefsio_getattrfid {cfs_fid_t cg_backfid;cred_t cg_cred;gid_t cg_groups[15];};
typedef struct cachefsio_getattrfid cachefsio_getattrfid_t;
struct cachefsio_getattrname_arg {cfs_fid_t cg_dir;char cg_name[256];cred_t cg_cred;gid_t cg_groups[15];};
typedef struct cachefsio_getattrname_arg cachefsio_getattrname_arg_t;
struct cachefsio_getattrname_return {cfs_vattr_t cg_attr;cfs_fid_t cg_fid;};
typedef struct cachefsio_getattrname_return cachefsio_getattrname_return_t;
struct cachefsio_getinfo {cfs_cid_t gi_cid;int gi_modified;cfs_vattr_t gi_attr;cfs_cid_t gi_pcid;uint_t gi_seq;char gi_name[256];};
typedef struct cachefsio_getinfo cachefsio_getinfo_t;
struct cachefsio_getstats {int gs_total;int gs_gc;int gs_active;int gs_packed;int gs_free;cfs_time_t gs_gctime;};
typedef struct cachefsio_getstats cachefsio_getstats_t;
struct cachefsio_link {cfs_fid_t ln_dirfid;char ln_name[256];cfs_fid_t ln_filefid;cfs_cid_t ln_cid;cred_t ln_cred;gid_t ln_groups[15];};
typedef struct cachefsio_link cachefsio_link_t;
struct cachefsio_lostfound_arg {cfs_cid_t lf_cid;char lf_name[256];};
typedef struct cachefsio_lostfound_arg cachefsio_lostfound_arg_t;
struct cachefsio_lostfound_return {char lf_name[256];};
typedef struct cachefsio_lostfound_return cachefsio_lostfound_return_t;
struct cachefsio_mkdir {cfs_fid_t md_dirfid;char md_name[256];cfs_cid_t md_cid;cfs_vattr_t md_vattr;cred_t md_cred;gid_t md_groups[15];};
typedef struct cachefsio_mkdir cachefsio_mkdir_t;
struct cachefsio_pack {char p_name[256];int p_status;};
typedef struct cachefsio_pack cachefsio_pack_t;
struct cachefsio_pushback_arg {cfs_cid_t pb_cid;cfs_fid_t pb_fid;cred_t pb_cred;gid_t pb_groups[15];};
typedef struct cachefsio_pushback_arg cachefsio_pushback_arg_t;
struct cachefsio_pushback_return {cfs_timestruc_t pb_ctime;cfs_timestruc_t pb_mtime;};
typedef struct cachefsio_pushback_return cachefsio_pushback_return_t;
struct cachefsio_remove {cfs_cid_t rm_cid;cfs_fid_t rm_fid;char rm_name[256];int rm_getctime;cred_t rm_cred;gid_t rm_groups[15];};
typedef struct cachefsio_remove cachefsio_remove_t;
struct cachefsio_rename_arg {cfs_fid_t rn_olddir;char rn_oldname[256];cfs_fid_t rn_newdir;char rn_newname[256];cfs_cid_t rn_cid;int rn_del_getctime;cfs_cid_t rn_del_cid;cred_t rn_cred;gid_t rn_groups[15];};
typedef struct cachefsio_rename_arg cachefsio_rename_arg_t;
struct cachefsio_rename_return {cfs_timestruc_t rn_ctime;cfs_timestruc_t rn_del_ctime;};
typedef struct cachefsio_rename_return cachefsio_rename_return_t;
struct cachefsio_rmdir {cfs_fid_t rd_dirfid;char rd_name[256];cred_t rd_cred;gid_t rd_groups[15];};
typedef struct cachefsio_rmdir cachefsio_rmdir_t;
struct cachefsio_setattr_arg {cfs_fid_t sa_backfid;cfs_cid_t sa_cid;cfs_vattr_t sa_vattr;int sa_flags;cred_t sa_cred;gid_t sa_groups[15];};
typedef struct cachefsio_setattr_arg cachefsio_setattr_arg_t;
struct cachefsio_setattr_return {cfs_timestruc_t sa_ctime;cfs_timestruc_t sa_mtime;};
typedef struct cachefsio_setattr_return cachefsio_setattr_return_t;
struct cachefsio_setsecattr_arg {cfs_fid_t sc_backfid;cfs_cid_t sc_cid;uint_t sc_mask;int sc_aclcnt;int sc_dfaclcnt;aclent_t sc_acl[1024];cred_t sc_cred;gid_t sc_groups[15];};
typedef struct cachefsio_setsecattr_arg cachefsio_setsecattr_arg_t;
struct cachefsio_setsecattr_return {cfs_timestruc_t sc_ctime;cfs_timestruc_t sc_mtime;};
typedef struct cachefsio_setsecattr_return cachefsio_setsecattr_return_t;
struct cachefsio_symlink_arg {cfs_fid_t sy_dirfid;char sy_name[256];cfs_cid_t sy_cid;char sy_link[1024];cfs_vattr_t sy_vattr;cred_t sy_cred;gid_t sy_groups[15];};
typedef struct cachefsio_symlink_arg cachefsio_symlink_arg_t;
struct cachefsio_symlink_return {cfs_fid_t sy_newfid;cfs_timestruc_t sy_ctime;cfs_timestruc_t sy_mtime;};
typedef struct cachefsio_symlink_return cachefsio_symlink_return_t;
struct cachefsops {int (*co_init_cobject)();int (*co_check_cobject)();void (*co_modify_cobject)();void (*co_invalidate_cobject)();void (*co_convert_cobject)();};
struct cachefsoptions {uint_t opt_flags;int opt_popsize;int opt_fgsize;};
typedef uint32_t caddr32_t;
typedef char *caddr_t;
struct call_body {rpcvers_t cb_rpcvers;rpcprog_t cb_prog;rpcvers_t cb_vers;rpcproc_t cb_proc;struct opaque_auth cb_cred;struct opaque_auth cb_verf;};
struct call_list {struct callsave *cl_head;struct callsave *cl_tail;};
struct callb_cpr {kmutex_t *cc_lockp;char cc_events;callb_id_t cc_id;kcondvar_t cc_callb_cv;kcondvar_t cc_stop_cv;};
typedef struct callb_cpr callb_cpr_t;
typedef void *callb_id_t;
struct callout {struct callout *c_idnext;struct callout *c_idprev;struct callout *c_lbnext;struct callout *c_lbprev;callout_id_t c_xid;clock_t c_runtime;void (*c_func)(void *);void *c_arg;kthread_id_t c_executor;kcondvar_t c_done;};
typedef int callout_id_t;
typedef struct callout callout_t;
struct callout_table {kmutex_t ct_lock;callout_t *ct_freelist;clock_t ct_curtime;clock_t ct_runtime;taskq_t *ct_taskq;callout_id_t ct_short_id;callout_id_t ct_long_id;callout_t *ct_idhash[512];callout_t *ct_lbhash[512];};
typedef struct callout_table callout_table_t;
struct callsave {struct t_call *c_cp;struct callsave *c_np;};
struct cback_data {struct cback_data::$8577E6F7A3DA394015609B473F63AD7B entries;};
struct cback_data::$8577E6F7A3DA394015609B473F63AD7B {u_int entries_len;obj_p *entries_val;};
typedef unsigned __int8 cc_t;
struct cdrom_cdda {unsigned int cdda_addr;unsigned int cdda_length;caddr_t cdda_data;unsigned __int8 cdda_subcode;};
struct cdrom_cdxa {unsigned int cdxa_addr;unsigned int cdxa_length;caddr_t cdxa_data;unsigned __int8 cdxa_format;};
struct cdrom_msf {unsigned __int8 cdmsf_min0;unsigned __int8 cdmsf_sec0;unsigned __int8 cdmsf_frame0;unsigned __int8 cdmsf_min1;unsigned __int8 cdmsf_sec1;unsigned __int8 cdmsf_frame1;};
struct cdrom_read {int cdread_lba;caddr_t cdread_bufaddr;int cdread_buflen;};
struct cdrom_subchnl {unsigned __int8 cdsc_format;unsigned __int8 cdsc_audiostatus;unsigned __int32 cdsc_adr : 4;unsigned __int32 cdsc_ctrl : 4;unsigned __int8 cdsc_trk;unsigned __int8 cdsc_ind;union cdrom_subchnl::$426CCB5B871ABC0B6979E88E159E461E cdsc_absaddr;union cdrom_subchnl::$426CCB5B871ABC0B6979E88E159E461E cdsc_reladdr;};
union cdrom_subchnl::$426CCB5B871ABC0B6979E88E159E461E {struct cdrom_subchnl::$426CCB5B871ABC0B6979E88E159E461E::$5680DDBB97F8FD3AF591112B550EB0BE msf;int lba;};
struct cdrom_subchnl::$426CCB5B871ABC0B6979E88E159E461E::$5680DDBB97F8FD3AF591112B550EB0BE {unsigned __int8 minute;unsigned __int8 second;unsigned __int8 frame;};
struct cdrom_subchnl::$::$5680DDBB97F8FD3AF591112B550EB0BE {unsigned __int8 minute;unsigned __int8 second;unsigned __int8 frame;};
struct cdrom_subcode {unsigned int cdsc_length;caddr_t cdsc_addr;};
struct cdrom_ti {unsigned __int8 cdti_trk0;unsigned __int8 cdti_ind0;unsigned __int8 cdti_trk1;unsigned __int8 cdti_ind1;};
struct cdrom_tocentry {unsigned __int8 cdte_track;unsigned __int32 cdte_adr : 4;unsigned __int32 cdte_ctrl : 4;unsigned __int8 cdte_format;union cdrom_tocentry::$4A050E57821F0F876A45302BC49D06BB cdte_addr;unsigned __int8 cdte_datamode;};
union cdrom_tocentry::$4A050E57821F0F876A45302BC49D06BB {struct cdrom_tocentry::$4A050E57821F0F876A45302BC49D06BB::$5680DDBB97F8FD3AF591112B550EB0BE msf;int lba;};
struct cdrom_tocentry::$4A050E57821F0F876A45302BC49D06BB::$5680DDBB97F8FD3AF591112B550EB0BE {unsigned __int8 minute;unsigned __int8 second;unsigned __int8 frame;};
struct cdrom_tochdr {unsigned __int8 cdth_trk0;unsigned __int8 cdth_trk1;};
struct cdrom_volctrl {unsigned __int8 channel0;unsigned __int8 channel1;unsigned __int8 channel2;unsigned __int8 channel3;};
struct cfent {__int16 volno;char ftype;char pkg_class[65];int pkg_class_idx;char *path;struct ainfo ainfo;struct cinfo cinfo;__int16 npkgs;struct pinfo *pinfo;};
typedef char cfga_ap_log_id_t[20];
typedef char cfga_ap_phys_id_t[1024];
typedef int cfga_busy_t;
typedef char cfga_class_t[12];
typedef enum $B8EA7248DE2247D155C7346AC11040D4 cfga_cmd_t;
typedef enum $81EF3FA8C4370F96570BE58B85740C0E cfga_cond_t;
struct cfga_confirm {int (*confirm)(void *appdata_ptr, const char *message);void *appdata_ptr;};
typedef enum $2A9D6F0D138547ECB8E62D5BF66B49C5 cfga_err_t;
typedef int cfga_flags_t;
typedef char cfga_info_t[4096];
struct cfga_list_data {cfga_log_ext_t ap_log_id;cfga_phys_ext_t ap_phys_id;cfga_class_t ap_class;cfga_stat_t ap_r_state;cfga_stat_t ap_o_state;cfga_cond_t ap_cond;cfga_busy_t ap_busy;time_t ap_status_time;cfga_info_t ap_info;cfga_type_t ap_type;};
typedef struct cfga_list_data cfga_list_data_t;
typedef char cfga_log_ext_t[30];
struct cfga_msg {int (*message_routine)(void *appdata_ptr, const char *message);void *appdata_ptr;};
typedef char cfga_phys_ext_t[1054];
struct cfga_stat_data {cfga_ap_log_id_t ap_log_id;cfga_ap_phys_id_t ap_phys_id;cfga_stat_t ap_r_state;cfga_stat_t ap_o_state;cfga_cond_t ap_cond;cfga_busy_t ap_busy;time_t ap_status_time;cfga_info_t ap_info;cfga_type_t ap_type;};
typedef struct cfga_stat_data cfga_stat_data_t;
typedef enum $AD2EB70E5A961F74EB9C4246C2983BC3 cfga_stat_t;
typedef char cfga_type_t[12];
typedef cachefs_metadata_t cfs_cachefs_metadata_t;
struct cfs_cid {ino64_t cid_fileno;int cid_flags;};
typedef struct cfs_cid cfs_cid_t;
struct cfs_dlog_create {cfs_cid_t dl_parent_cid;cfs_cid_t dl_new_cid;cfs_vattr_t dl_attrs;int dl_excl;int dl_mode;int dl_exists;cfs_dlog_tm_t dl_times;cfs_fid_t dl_fid;cred_t dl_cred;char dl_buffer[316];};
struct cfs_dlog_entry {int dl_len;cfs_dlog_op_t dl_op;cfs_dlog_val_t dl_valid;uint_t dl_seq;union cfs_dlog_entry::cfs_dlog_entry_items dl_u;struct cfs_dlog_trailer dl_trailer;};
union cfs_dlog_entry::cfs_dlog_entry_items {struct cfs_dlog_setattr dl_setattr;struct cfs_dlog_setsecattr dl_setsecattr;struct cfs_dlog_create dl_create;struct cfs_dlog_remove dl_remove;struct cfs_dlog_rmdir dl_rmdir;struct cfs_dlog_mkdir dl_mkdir;struct cfs_dlog_link dl_link;struct cfs_dlog_symlink dl_symlink;struct cfs_dlog_rename dl_rename;struct cfs_dlog_modify dl_modify;struct cfs_dlog_mapfid dl_mapfid;};
typedef struct cfs_dlog_entry cfs_dlog_entry_t;
struct cfs_dlog_link {cfs_cid_t dl_parent_cid;cfs_cid_t dl_child_cid;cfs_dlog_tm_t dl_times;cred_t dl_cred;char dl_buffer[316];};
struct cfs_dlog_mapfid {cfs_cid_t dl_cid;cfs_fid_t dl_fid;};
struct cfs_dlog_mapping_space {cfs_cid_t ms_cid;off_t ms_fid;off_t ms_times;};
struct cfs_dlog_mkdir {cfs_cid_t dl_parent_cid;cfs_cid_t dl_child_cid;cfs_vattr_t dl_attrs;cfs_fid_t dl_fid;cred_t dl_cred;char dl_buffer[316];};
struct cfs_dlog_modify {cfs_cid_t dl_cid;cfs_dlog_tm_t dl_times;off32_t dl_next;cred_t dl_cred;char dl_buffer[60];};
enum cfs_dlog_op {CFS_DLOG_CREATE = 0x100,CFS_DLOG_REMOVE = 0x101,CFS_DLOG_LINK = 0x102,CFS_DLOG_RENAME = 0x103,CFS_DLOG_MKDIR = 0x104,CFS_DLOG_RMDIR = 0x105,CFS_DLOG_SYMLINK = 0x106,CFS_DLOG_SETATTR = 0x107,CFS_DLOG_SETSECATTR = 0x108,CFS_DLOG_MODIFIED = 0x109,CFS_DLOG_MAPFID = 0x10A,CFS_DLOG_TRAILER = 0x10B,};
typedef enum cfs_dlog_op cfs_dlog_op_t;
struct cfs_dlog_remove {cfs_cid_t dl_parent_cid;cfs_cid_t dl_child_cid;cfs_dlog_tm_t dl_times;cred_t dl_cred;char dl_buffer[316];};
struct cfs_dlog_rename {cfs_cid_t dl_oparent_cid;cfs_cid_t dl_nparent_cid;cfs_cid_t dl_child_cid;cfs_dlog_tm_t dl_times;cfs_cid_t dl_del_cid;cfs_dlog_tm_t dl_del_times;cred_t dl_cred;char dl_buffer[572];};
struct cfs_dlog_rmdir {cfs_cid_t dl_parent_cid;cred_t dl_cred;char dl_buffer[316];};
struct cfs_dlog_setattr {cfs_vattr_t dl_attrs;int dl_flags;cfs_cid_t dl_cid;cfs_dlog_tm_t dl_times;cred_t dl_cred;char dl_buffer[60];};
struct cfs_dlog_setsecattr {cfs_cid_t dl_cid;cfs_dlog_tm_t dl_times;uint_t dl_mask;int dl_aclcnt;int dl_dfaclcnt;cred_t dl_cred;char dl_buffer[60];};
struct cfs_dlog_symlink {cfs_cid_t dl_parent_cid;cfs_cid_t dl_child_cid;cfs_vattr_t dl_attrs;cfs_dlog_tm_t dl_times;cfs_fid_t dl_fid;cred_t dl_cred;char dl_buffer[1340];};
struct cfs_dlog_tm {cfs_timestruc_t tm_mtime;cfs_timestruc_t tm_ctime;};
typedef struct cfs_dlog_tm cfs_dlog_tm_t;
struct cfs_dlog_trailer {int dl_len;cfs_dlog_op_t dl_op;cfs_dlog_val_t dl_valid;uint_t dl_seq;};
enum cfs_dlog_val {CFS_DLOG_VAL_CRASH = 0x200,CFS_DLOG_VAL_COMMITTED = 0x201,CFS_DLOG_VAL_ERROR = 0x202,CFS_DLOG_VAL_PROCESSED = 0x203,};
typedef enum cfs_dlog_val cfs_dlog_val_t;
typedef fid_t cfs_fid_t;
typedef time_t cfs_time_t;
typedef timestruc_t cfs_timestruc_t;
typedef uid_t cfs_uid_t;
typedef vattr_t cfs_vattr_t;
enum cfsdcmd_cmds {CFSDCMD_DAEMONID = 0x0,CFSDCMD_STATEGET = 0x1,CFSDCMD_STATESET = 0x2,CFSDCMD_XWAIT = 0x3,CFSDCMD_EXISTS = 0x4,CFSDCMD_LOSTFOUND = 0x5,CFSDCMD_GETINFO = 0x6,CFSDCMD_CIDTOFID = 0x7,CFSDCMD_GETATTRFID = 0x8,CFSDCMD_GETATTRNAME = 0x9,CFSDCMD_GETSTATS = 0xA,CFSDCMD_ROOTFID = 0xB,CFSDCMD_CREATE = 0xC,CFSDCMD_REMOVE = 0xD,CFSDCMD_LINK = 0xE,CFSDCMD_RENAME = 0xF,CFSDCMD_MKDIR = 0x10,CFSDCMD_RMDIR = 0x11,CFSDCMD_SYMLINK = 0x12,CFSDCMD_SETATTR = 0x13,CFSDCMD_SETSECATTR = 0x14,CFSDCMD_PUSHBACK = 0x15,};
typedef enum cfsdcmd_cmds cfsdcmd_cmds_t;
struct cg {uint32_t cg_link;int32_t cg_magic;time32_t cg_time;int32_t cg_cgx;__int16 cg_ncyl;__int16 cg_niblk;int32_t cg_ndblk;struct csum cg_cs;int32_t cg_rotor;int32_t cg_frotor;int32_t cg_irotor;int32_t cg_frsum[8];int32_t cg_btotoff;int32_t cg_boff;int32_t cg_iusedoff;int32_t cg_freeoff;int32_t cg_nextfreeoff;int32_t cg_sparecon[16];uchar_t cg_space[1];};
struct cg6_cmap {uint32_t addr;uint32_t cmap;uint32_t ctrl;uint32_t omap;};
struct cg6_info {ushort_t accessible_width;ushort_t accessible_height;ushort_t line_bytes;ushort_t hdb_capable;ushort_t vmsize;uchar_t boardrev;uchar_t slot;uint_t pad1;};
struct changePIN_t {OCF_PIN_t oldPIN;OCF_PIN_t newPIN;};
typedef struct $D52C4F604E0EF4858A4DDDAA58B8A08E chapPasswdEntry_t;
typedef char *charptr;
struct charspec {uint8_t cs_type;char cs_info[63];};
typedef struct charspec charspec_t;
struct cheerio_dma_reg {uint32_t csr;uint32_t acr;uint32_t bcr;};
typedef unsigned int chtype;
typedef union $EE75A551A8E099987506FD558A5F43CD chunk_t;
struct cinfo {int cksum;int size;time_t modtime;};
struct cirbuf {buf_t *cb_bp;buf_t *cb_dirty;buf_t *cb_free;caddr_t cb_va;size_t cb_nb;krwlock_t cb_rwlock;};
typedef struct cirbuf cirbuf_t;
struct cis_u_malloc_tag_t {caddr_t addr;uint32_t len;};
typedef uchar_t cisdata_t;
union cisparse_t {cistpl_config_t cistpl_config;cistpl_device_t cistpl_device;cistpl_vers_1_t cistpl_vers_1;cistpl_vers_2_t cistpl_vers_2;cistpl_jedec_t cistpl_jedec;cistpl_format_t cistpl_format;cistpl_geometry_t cistpl_geometry;cistpl_byteorder_t cistpl_byteorder;cistpl_date_t cistpl_date;cistpl_battery_t cistpl_battery;cistpl_org_t cistpl_org;cistpl_manfid_t cistpl_manfid;cistpl_funcid_t cistpl_funcid;cistpl_funce_t cistpl_funce;cistpl_cftable_entry_t cistpl_cftable_entry;cistpl_linktarget_t cistpl_linktarget;cistpl_longlink_ac_t cistpl_longlink_ac;cistpl_longlink_mfc_t cistpl_longlink_mfc;cistpl_spcl_t cistpl_spcl;cistpl_swil_t cistpl_swil;cistpl_bar_t cistpl_bar;cistpl_devicegeo_t cistpl_devicegeo;cistpl_longlink_cb_t cistpl_longlink_cb;cistpl_get_tuple_name_t cistpl_get_tuple_name;cistpl_config_t config;cistpl_device_t device;cistpl_vers_1_t version_1;cistpl_vers_2_t version_2;cistpl_jedec_t jedec;cistpl_format_t format;cistpl_geometry_t geometry;cistpl_byteorder_t byteorder;cistpl_date_t date;cistpl_battery_t battery;cistpl_org_t org;cistpl_manfid_t manfid;cistpl_funcid_t funcid;cistpl_funce_t funce;cistpl_cftable_entry_t cftable;cistpl_linktarget_t linktarget;cistpl_longlink_ac_t longlink_ac;cistpl_longlink_mfc_t longlink_mfc;cistpl_spcl_t spcl;cistpl_swil_t swil;cistpl_bar_t bar;cistpl_devicegeo_t devgeo;cistpl_longlink_cb_t longlink_cb;cistpl_get_tuple_name_t tuple_name;};
struct cisptr_t {acc_handle_t handle;uint32_t size;uint32_t offset;uint32_t flags;};
struct cistpl_bar_t {uint32_t attributes;uint32_t size;};
struct cistpl_battery_t {uint32_t rday;uint32_t xday;};
struct cistpl_byteorder_t {uint32_t order;uint32_t map;};
struct cistpl_callout_t {cisdata_t type;cisdata_t subtype;uint32_t flags;uint32_t (*handler)();char *text;};
struct cistpl_cftable_entry_io_range_t {uint32_t addr;uint32_t length;};
struct cistpl_cftable_entry_io_t {uint32_t flags;uint32_t addr_lines;uint32_t ranges;struct cistpl_cftable_entry_io_range_t range[16];};
struct cistpl_cftable_entry_irq_t {uint32_t flags;uint32_t irqs;};
struct cistpl_cftable_entry_mem_t {uint32_t flags;uint32_t windows;cistpl_cftable_entry_mem_window_t window[8];};
struct cistpl_cftable_entry_mem_window_t {uint32_t length;uint32_t card_addr;uint32_t host_addr;};
struct cistpl_cftable_entry_misc_t {uint32_t flags;};
struct cistpl_cftable_entry_pd_t {uint32_t flags;struct cistpl_cftable_entry_pwr_t pd_vcc;struct cistpl_cftable_entry_pwr_t pd_vpp1;struct cistpl_cftable_entry_pwr_t pd_vpp2;};
struct cistpl_cftable_entry_pwr_t {uint32_t nomV;uint32_t nomV_flags;uint32_t minV;uint32_t minV_flags;uint32_t maxV;uint32_t maxV_flags;uint32_t staticI;uint32_t staticI_flags;uint32_t avgI;uint32_t avgI_flags;uint32_t peakI;uint32_t peakI_flags;uint32_t pdownI;uint32_t pdownI_flags;};
struct cistpl_cftable_entry_speed_t {uint32_t flags;uint32_t wait;uint32_t nS_wait;uint32_t rdybsy;uint32_t nS_rdybsy;uint32_t rsvd;uint32_t nS_rsvd;};
struct cistpl_cftable_entry_stce_ev_t {char stev_strs[254];};
struct cistpl_cftable_entry_stce_pd_t {char stpd_strs[254];};
struct cistpl_cftable_entry_t {uint32_t flags;uint32_t ifc;uint32_t pin;uint32_t index;struct cistpl_cftable_entry_pd_t pd;struct cistpl_cftable_entry_speed_t speed;struct cistpl_cftable_entry_io_t io;struct cistpl_cftable_entry_irq_t irq;struct cistpl_cftable_entry_mem_t mem;struct cistpl_cftable_entry_misc_t misc;};
struct cistpl_config_t {uint32_t present;uint32_t nr;uint32_t hr;uint32_t regs[128];uint32_t base;uint32_t last;};
struct cistpl_date_t {uint32_t time;uint32_t day;};
struct cistpl_device_node_t {uint32_t flags;uint32_t speed;uint32_t nS_speed;uint32_t type;uint32_t size;uint32_t size_in_bytes;};
struct cistpl_device_t {uint32_t num_devices;cistpl_device_node_t devnode[10];};
struct cistpl_devicegeo_info_t {uint32_t bus;uint32_t ebs;uint32_t rbs;uint32_t wbs;uint32_t part;uint32_t hwil;};
struct cistpl_devicegeo_t {cistpl_devicegeo_info_t info[42];};
struct cistpl_devspeed_struct_t {uint32_t *table;uint32_t *tenfac;uint32_t *mantissa;uint32_t *exponent;};
struct cistpl_format_t {uint32_t type;uint32_t edc_length;uint32_t edc_type;uint32_t offset;uint32_t nbytes;union cistpl_format_t::$C19B3D9FAD0E15A257B4195B94EC6F1C dev;};
union cistpl_format_t::$C19B3D9FAD0E15A257B4195B94EC6F1C {struct cistpl_format_t::$C19B3D9FAD0E15A257B4195B94EC6F1C::disk disk;struct cistpl_format_t::$C19B3D9FAD0E15A257B4195B94EC6F1C::mem mem;};
struct cistpl_format_t::$C19B3D9FAD0E15A257B4195B94EC6F1C::disk {uint32_t bksize;uint32_t nblocks;uint32_t edcloc;};
struct cistpl_format_t::$C19B3D9FAD0E15A257B4195B94EC6F1C::mem {uint32_t flags;uint32_t reserved;caddr_t address;uint32_t edcloc;};
struct cistpl_funce_t {uint32_t function;uint32_t subfunction;union cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127 data;};
union cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127 {struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::serial serial;struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::modem modem;struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::data_modem data_modem;struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::fax fax;struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::voice voice;struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::lan lan;};
struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::data_modem {uint32_t ud;uint32_t ms;uint32_t em;uint32_t dc;uint32_t cm;uint32_t ex;uint32_t dy;uint32_t ef;uint32_t ncd;uchar_t cd[16];};
struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::fax {uint32_t uf;uint32_t fm;uint32_t fy;uint32_t fs;uint32_t ncf;uchar_t cf[16];};
struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::lan {uint32_t tech;uint32_t speed;uint32_t media;uint32_t con;uint32_t id_sz;uchar_t id[16];};
struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::modem {uint32_t fc;uint32_t cb;uint32_t eb;uint32_t tb;};
struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::serial {uint32_t ua;uint32_t uc;};
struct cistpl_funce_t::$D5FA95438D5A8A9C79108965BD5DD127::voice {uint32_t uv;uint32_t nsr;uint32_t sr[16];uint32_t nss;uint32_t ss[16];uint32_t nsc;uint32_t sc[16];};
struct cistpl_funcid_t {uint32_t function;uint32_t sysinit;};
struct cistpl_geometry_t {uint32_t spt;uint32_t tpc;uint32_t ncyl;};
struct cistpl_get_tuple_name_t {char name[40];};
struct cistpl_ignore_list_t {cisdata_t type;};
struct cistpl_jedec_t {uint32_t nid;jedec_ident_t jid[4];};
struct cistpl_linktarget_t {uint32_t length;char tpltg_tag[254];};
struct cistpl_longlink_ac_t {uint32_t flags;uint32_t tpll_addr;};
struct cistpl_longlink_cb_t {uint32_t flags;uint32_t addr;union cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483 space;};
union cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483 {struct cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483::$54452C09C3FB8D7AD926D1B264F470FB cfg;struct cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483::$6152E0D14B08C53F7D041BC3E28DC5EB mem;struct cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483::$E0F3893B754C74B700FBB8F1102F79FF rom;};
struct cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483::$54452C09C3FB8D7AD926D1B264F470FB {uint32_t offset;};
struct cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483::$6152E0D14B08C53F7D041BC3E28DC5EB {uint32_t asi;uint32_t offset;};
struct cistpl_longlink_cb_t::$B3034DB9D1F4D04895C46A23B7DB6483::$E0F3893B754C74B700FBB8F1102F79FF {uint32_t image;uint32_t offset;};
struct cistpl_longlink_mfc_t {uint32_t nfuncs;uint32_t nregs;struct cistpl_longlink_mfc_t::$614D05123FB722C586C9743560705075 function[8];};
struct cistpl_longlink_mfc_t::$614D05123FB722C586C9743560705075 {uint32_t tas;uint32_t addr;};
struct cistpl_manfid_t {uint32_t manf;uint32_t card;};
struct cistpl_org_t {uint32_t type;char desc[254];};
struct cistpl_pd_struct_t {uint32_t *mantissa;uint32_t *exponent;};
struct cistpl_spcl_t {uint32_t id;uint32_t seq;uint32_t bytes;uchar_t data[254];};
struct cistpl_swil_t {uint32_t intrlv;};
struct cistpl_t {cisdata_t type;cisdata_t len;cisdata_t *data;union cistpl_t::$C4278FD82B146D460B453B2BB46DF7C8 read;uint32_t flags;uint32_t offset;struct cistpl_t *prev;struct cistpl_t *next;};
union cistpl_t::$C4278FD82B146D460B453B2BB46DF7C8 {cisdata_t *byte;uint16_t *sword;};
struct cistpl_vers_1_t {uint32_t major;uint32_t minor;uint32_t ns;char pi[4][254];};
struct cistpl_vers_2_t {uint32_t vers;uint32_t comply;uint32_t dindex;uint32_t reserved;uint32_t vspec8;uint32_t vspec9;uint32_t nhdr;char oem[254];char info[254];};
struct cl_tcp_info_s {ushort_t cl_tcpi_version;ushort_t cl_tcpi_ipversion;int32_t cl_tcpi_state;in_port_t cl_tcpi_lport;in_port_t cl_tcpi_fport;in6_addr_t cl_tcpi_laddr_v6;in6_addr_t cl_tcpi_faddr_v6;};
typedef struct cl_tcp_info_s cl_tcp_info_t;
struct class_ops {int (*cl_admin)(caddr_t, cred_t *);int (*cl_getclinfo)(void *);int (*cl_parmsin)(void *, id_t, cred_t *, id_t, cred_t *, void *);int (*cl_parmsout)(void *, id_t, cred_t *, id_t, cred_t *, void *);int (*cl_getclpri)(pcpri_t *);int (*cl_alloc)(void **, int);void (*cl_free)(void *);};
typedef struct class_ops class_ops_t;
struct classfuncs {class_ops_t sclass;thread_ops_t thread;};
typedef struct classfuncs classfuncs_t;
enum clnt_stat {RPC_SUCCESS = 0x0,RPC_CANTENCODEARGS = 0x1,RPC_CANTDECODERES = 0x2,RPC_CANTSEND = 0x3,RPC_CANTRECV = 0x4,RPC_TIMEDOUT = 0x5,RPC_INTR = 0x12,RPC_UDERROR = 0x17,RPC_VERSMISMATCH = 0x6,RPC_AUTHERROR = 0x7,RPC_PROGUNAVAIL = 0x8,RPC_PROGVERSMISMATCH = 0x9,RPC_PROCUNAVAIL = 0xA,RPC_CANTDECODEARGS = 0xB,RPC_SYSTEMERROR = 0xC,RPC_UNKNOWNHOST = 0xD,RPC_UNKNOWNPROTO = 0x11,RPC_UNKNOWNADDR = 0x13,RPC_NOBROADCAST = 0x15,RPC_RPCBFAILURE = 0xE,RPC_PROGNOTREGISTERED = 0xF,RPC_N2AXLATEFAILURE = 0x16,RPC_TLIERROR = 0x14,RPC_FAILED = 0x10,RPC_INPROGRESS = 0x18,RPC_STALERACHANDLE = 0x19,RPC_CANTCONNECT = 0x1A,RPC_XPRTFAILED = 0x1B,RPC_CANTCREATESTREAM = 0x1C,};
typedef int32_t clock32_t;
typedef int clock_t;
typedef int clockid_t;
struct cmsghdr {socklen_t cmsg_len;int cmsg_level;int cmsg_type;};
struct cnode {int c_flags;struct cnode *c_next;struct cnode *c_idleback;struct cnode *c_idlefront;struct vnode *c_frontvp;struct vnode *c_backvp;struct vnode *c_acldirvp;u_offset_t c_size;struct filegrp *c_filegrp;struct cfs_cid c_id;int c_invals;int c_usage;struct vnode c_vnode;struct cachefs_metadata c_metadata;int c_error;kmutex_t c_statelock;krwlock_t c_rwlock;vnode_t *c_unldvp;char *c_unlname;cred_t *c_unlcred;int c_nio;uint_t c_ioflags;kcondvar_t c_iocv;kmutex_t c_iomutex;cred_t *c_cred;int c_ipending;int c_mapcnt;offset_t c_apopoffset;uint_t c_apoplen;u_offset_t c_modaddr;};
typedef struct cnode cnode_t;
struct cnt {char *fnpc;int mcnt;};
typedef __int16 cnt_t;
struct comment {char *c_dept;char *c_name;char *c_acct;char *c_bin;};
struct commit {page_t *c_pages;offset3 c_commbase;count3 c_commlen;kcondvar_t c_cv;};
typedef struct commit commit_t;
struct common_service {uint_t fcph;uint_t btob_crdt;uint_t cmn_features;uint_t reserved;};
typedef struct common_service common_svc_t;
typedef ushort_t comp_t;
typedef struct $D2112DACD5F28F06A12FA1BD43CEEAAF compat_state_t;
struct compose_sequence_t {unsigned __int8 first;unsigned __int8 second;unsigned __int8 iso;};
typedef lwp_cond_t cond_t;
typedef struct _condvar_impl condvar_impl_t;
struct config_ops {int (*devr_next)();int (*devr_child)();int (*devr_getproplen)();int (*devr_getprop)();int (*devr_setprop)();caddr_t (*devr_nextprop)();};
struct config_reg {uint8_t index;uint8_t data;};
struct cont_info_struct {uint_t cont_lbn;uint_t cont_offset;uint_t cont_len;};
typedef struct cont_info_struct cont_info_t;
typedef uint64 cookie3;
typedef char cookieverf3[8];
struct copy_mgt_info {uint16_t cgms_cksum;uint8_t cgms_info;uint8_t cgms_dstype;uint32_t cgms_psi;};
struct copyreq {int cq_cmd;cred_t *cq_cr;uint_t cq_id;caddr_t cq_addr;size_t cq_size;uint_t cq_flag;mblk_t *cq_private;int cq_filler[4];};
struct copyresp {int cp_cmd;cred_t *cp_cr;uint_t cp_id;caddr_t cp_rval;size_t cp_pad1;uint_t cp_pad2;mblk_t *cp_private;uint_t cp_flag;int cp_filler[3];};
struct core {int c_magic;int c_len;struct regs c_regs;struct exdata c_exdata;int c_signo;int c_tsize;int c_dsize;int c_ssize;char c_cmdname[17];struct fpu c_fpu;struct fq c_fpu_q[16];int c_ucode;};
typedef uint32 count3;
struct cp_result {nis_error cp_status;uint32_t cp_zticks;uint32_t cp_dticks;};
typedef void cpc_errfn_t(const char *fn, const char *fmt, va_list ap);
typedef struct _cpc_event cpc_event_t;
struct cprconfig {int cf_magic;int cf_type;char cf_path[256];char cf_fs[256];char cf_devfs[256];char cf_dev_prom[256];int is_cpr_capable;int is_cpr_default;int is_autowakeup_capable;int as_idle;int as_sh;int as_sm;int as_fh;int as_fm;char as_behavior[64];int ttychars_thold;float loadaverage_thold;int diskreads_thold;int nfsreqs_thold;char idlecheck_path[1024];int is_autopm_default;char apm_behavior[64];};
struct cprinfo {int ci_magic;int ci_reusable;char ci_bootfile[256];char ci_bootdevice[256];char ci_autoboot[6];char ci_diagfile[256];char ci_diagdevice[256];};
struct cpu {processorid_t cpu_id;processorid_t cpu_seqid;volatile ushort_t cpu_flags;kthread_id_t cpu_thread;kthread_id_t cpu_idle_thread;kthread_id_t cpu_pause_thread;klwp_id_t cpu_lwp;klwp_id_t cpu_fpowner;struct cpupart *cpu_part;int cpu_cache_offset;struct cpu *cpu_next;struct cpu *cpu_prev;struct cpu *cpu_next_onln;struct cpu *cpu_prev_onln;struct cpu *cpu_next_part;struct cpu *cpu_prev_part;disp_t cpu_disp;char cpu_runrun;char cpu_kprunrun;pri_t cpu_chosen_level;kthread_id_t cpu_dispthread;disp_lock_t cpu_thread_lock;pri_t cpu_dispatch_pri;clock_t cpu_last_swtch;caddr_t cpu_intr_stack;int cpu_on_intr;kthread_id_t cpu_intr_thread;uint_t cpu_intr_actv;int cpu_base_spl;cpu_stat_t cpu_stat;struct kstat *cpu_kstat;uintptr_t cpu_profile_cyclic_id;uintptr_t cpu_profile_pc;uintptr_t cpu_profile_pil;hrtime_t cpu_profile_when;hrtime_t cpu_profile_ilate;tracedata_t cpu_trace;ftrace_data_t cpu_ftrace;processor_info_t cpu_type_info;time_t cpu_state_begin;char cpu_cpr_flags;struct cyc_cpu *cpu_cyclic;};
struct cpu_stat {uint_t __cpu_stat_lock[2];cpu_sysinfo_t cpu_sysinfo;cpu_syswait_t cpu_syswait;cpu_vminfo_t cpu_vminfo;};
typedef struct cpu_stat cpu_stat_t;
struct cpu_sysinfo {uint_t cpu[4];uint_t wait[3];uint_t bread;uint_t bwrite;uint_t lread;uint_t lwrite;uint_t phread;uint_t phwrite;uint_t pswitch;uint_t trap;uint_t intr;uint_t syscall;uint_t sysread;uint_t syswrite;uint_t sysfork;uint_t sysvfork;uint_t sysexec;uint_t readch;uint_t writech;uint_t rcvint;uint_t xmtint;uint_t mdmint;uint_t rawch;uint_t canch;uint_t outch;uint_t msg;uint_t sema;uint_t namei;uint_t ufsiget;uint_t ufsdirblk;uint_t ufsipage;uint_t ufsinopage;uint_t inodeovf;uint_t fileovf;uint_t procovf;uint_t intrthread;uint_t intrblk;uint_t idlethread;uint_t inv_swtch;uint_t nthreads;uint_t cpumigrate;uint_t xcalls;uint_t mutex_adenters;uint_t rw_rdfails;uint_t rw_wrfails;uint_t modload;uint_t modunload;uint_t bawrite;uint_t rw_enters;uint_t win_uo_cnt;uint_t win_uu_cnt;uint_t win_so_cnt;uint_t win_su_cnt;uint_t win_suo_cnt;};
typedef struct cpu_sysinfo cpu_sysinfo_t;
struct cpu_syswait {int iowait;int swap;int physio;};
typedef struct cpu_syswait cpu_syswait_t;
typedef struct cpu cpu_t;
struct cpu_vminfo {uint_t pgrec;uint_t pgfrec;uint_t pgin;uint_t pgpgin;uint_t pgout;uint_t pgpgout;uint_t swapin;uint_t pgswapin;uint_t swapout;uint_t pgswapout;uint_t zfod;uint_t dfree;uint_t scan;uint_t rev;uint_t hat_fault;uint_t as_fault;uint_t maj_fault;uint_t cow_fault;uint_t prot_fault;uint_t softlock;uint_t kernel_asflt;uint_t pgrrun;uint_t execpgin;uint_t execpgout;uint_t execfree;uint_t anonpgin;uint_t anonpgout;uint_t anonfree;uint_t fspgin;uint_t fspgout;uint_t fsfree;};
typedef struct cpu_vminfo cpu_vminfo_t;
struct crash_hdr {char sanity[10];int timestamp;int mem_size;int seq_num;};
enum create {CRCREAT = 0x0,CRMKNOD = 0x1,CRMKDIR = 0x2,};
typedef enum create create_t;
struct createhow3 {createmode3 mode;union createhow3::$8A6FCB6AE8ABF4547E3A1B416D5A1A41 createhow3_u;};
union createhow3::$8A6FCB6AE8ABF4547E3A1B416D5A1A41 {sattr3 obj_attributes;createverf3 verf;};
enum createmode3 {UNCHECKED = 0x0,GUARDED = 0x1,EXCLUSIVE = 0x2,};
typedef char createverf3[8];
struct cred {uint_t cr_ref;uid_t cr_uid;gid_t cr_gid;uid_t cr_ruid;gid_t cr_rgid;uid_t cr_suid;gid_t cr_sgid;uint_t cr_ngroups;gid_t cr_groups[1];};
typedef struct cred cred_t;
struct cstate {struct cstate *cs_next;ushort_t cs_hlen;uchar_t cs_id;uchar_t cs_filler;union cstate::$678131C900E44C8ADDA4E179752E682F slcs_u;};
union cstate::$678131C900E44C8ADDA4E179752E682F {char csu_hdr[128];struct ip csu_ip;};
struct csum {int32_t cs_ndir;int32_t cs_nbfree;int32_t cs_nifree;int32_t cs_nffree;};
struct ctxop {void (*save_op)(void *);void (*restore_op)(void *);void (*fork_op)(void *, void *);void (*lwp_create_op)(void *, void *);void (*free_op)(void *, int);void *arg;struct ctxop *next;};
typedef struct ctxop ctxop_t;
struct cwrd {int cwrd_ref;uint_t cwrd_ldbuf;uint_t cwrd_dirlen;caddr_t cwrd_dir;uint_t cwrd_lrbuf;uint_t cwrd_rootlen;caddr_t cwrd_root;};
typedef void *cyb_arg_t;
struct cyc_backend {cyb_arg_t (*cyb_configure)(cpu_t *);void (*cyb_unconfigure)(cyb_arg_t);void (*cyb_enable)(cyb_arg_t);void (*cyb_disable)(cyb_arg_t);void (*cyb_reprogram)(cyb_arg_t, hrtime_t);void (*cyb_softint)(cyb_arg_t, cyc_level_t);cyc_cookie_t (*cyb_set_level)(cyb_arg_t, cyc_level_t);void (*cyb_restore_level)(cyb_arg_t, cyc_cookie_t);void (*cyb_xcall)(cyb_arg_t, cpu_t *, cyc_func_t, void *);void (*cyb_suspend)(cyb_arg_t);void (*cyb_resume)(cyb_arg_t);cyb_arg_t cyb_arg;};
typedef struct cyc_backend cyc_backend_t;
typedef int cyc_cookie_t;
struct cyc_coverage {char *cyv_why;int cyv_passive_count;int cyv_count[3];uint64_t cyv_arg0;uint64_t cyv_arg1;};
typedef struct cyc_coverage cyc_coverage_t;
struct cyc_cpu {cpu_t *cyp_cpu;cyc_index_t *cyp_heap;cyclic_t *cyp_cyclics;cyc_index_t cyp_nelems;cyc_index_t cyp_size;cyc_state_t cyp_state;cyc_softbuf_t cyp_softbuf[2];cyc_backend_t *cyp_backend;ksema_t cyp_modify_wait;uint32_t cyp_modify_levels;uint32_t cyp_rpend;cyc_tracebuf_t cyp_trace[3];};
typedef struct cyc_cpu cyc_cpu_t;
typedef void (*cyc_func_t)(void *);
struct cyc_handler {cyc_func_t cyh_func;void *cyh_arg;cyc_level_t cyh_level;};
typedef struct cyc_handler cyc_handler_t;
struct cyc_id {cyc_cpu_t *cyi_cpu;cyc_index_t cyi_ndx;struct cyc_id *cyi_prev;struct cyc_id *cyi_next;};
typedef struct cyc_id cyc_id_t;
typedef int cyc_index_t;
typedef uint16_t cyc_level_t;
struct cyc_pcbuffer {cyc_index_t *cypc_buf;int cypc_prodndx;int cypc_consndx;int cypc_sizemask;};
typedef struct cyc_pcbuffer cyc_pcbuffer_t;
struct cyc_softbuf {char cys_hard;char cys_soft;cyc_pcbuffer_t cys_buf[2];};
typedef struct cyc_softbuf cyc_softbuf_t;
typedef enum $8A69B4244D68C55526C7E67A1302CC04 cyc_state_t;
struct cyc_time {hrtime_t cyt_when;hrtime_t cyt_interval;};
typedef struct cyc_time cyc_time_t;
struct cyc_tracebuf {int cyt_ndx;cyc_tracerec_t cyt_buf[512];};
typedef struct cyc_tracebuf cyc_tracebuf_t;
struct cyc_tracerec {hrtime_t cyt_tstamp;char *cyt_why;uint64_t cyt_arg0;uint64_t cyt_arg1;};
typedef struct cyc_tracerec cyc_tracerec_t;
struct cyc_xcallarg {cyc_cpu_t *cyx_cpu;cyc_handler_t *cyx_hdlr;cyc_time_t *cyx_when;cyc_index_t cyx_ndx;cyc_index_t *cyx_heap;cyclic_t *cyx_cyclics;cyc_index_t cyx_size;uint16_t cyx_flags;};
typedef struct cyc_xcallarg cyc_xcallarg_t;
struct cyclic {hrtime_t cy_expire;hrtime_t cy_interval;void (*cy_handler)(void *);void *cy_arg;uint32_t cy_pend;uint16_t cy_flags;cyc_level_t cy_level;};
typedef uintptr_t cyclic_id_t;
typedef struct cyclic cyclic_t;
struct dacf_arg {char *arg_name;char *arg_val;struct dacf_arg *arg_next;};
typedef struct dacf_arg dacf_arg_t;
typedef void *dacf_arghdl_t;
enum dacf_devspec {DACF_DS_ERROR = 0xFFFFFFFF,DACF_DS_MIN_NT = 0x1,DACF_DS_DRV_MNAME = 0x2,DACF_DS_DEV_PATH = 0x3,};
typedef enum dacf_devspec dacf_devspec_t;
typedef void *dacf_infohdl_t;
struct dacf_module {char *dm_name;krwlock_t dm_lock;int dm_loaded;dacf_opset_t *dm_opsets;};
typedef struct dacf_module dacf_module_t;
struct dacf_op {dacf_opid_t op_id;int (*op_func)(dacf_infohdl_t, dacf_arghdl_t, int);};
typedef struct dacf_op dacf_op_t;
typedef enum $6C240A0F2C531038D6945D09C29C55E6 dacf_opid_t;
struct dacf_opset {char *opset_name;dacf_op_t *opset_ops;};
typedef struct dacf_opset dacf_opset_t;
struct dacf_rsrvlist {dacf_rule_t *rsrv_rule;dacf_infohdl_t rsrv_ihdl;int rsrv_result;struct dacf_rsrvlist *rsrv_next;};
typedef struct dacf_rsrvlist dacf_rsrvlist_t;
struct dacf_rule {char *r_devspec_data;char *r_module;char *r_opset;dacf_opid_t r_opid;uint_t r_opts;uint_t r_refs;dacf_arg_t *r_args;};
typedef struct dacf_rule dacf_rule_t;
struct dacfsw {int dacf_rev;dacf_opset_t *dacf_opsets;};
typedef int32_t daddr32_t;
typedef int daddr_t;
struct dadkio_derr {int d_action;int d_severity;};
struct dadkio_rwcmd {int cmd;int flags;daddr_t blkaddr;uint_t buflen;caddr_t bufaddr;struct dadkio_status status;};
struct dadkio_status {int status;ulong_t resid;int failed_blk_is_valid;daddr_t failed_blk;int fru_code_is_valid;int fru_code;char add_error_info[128];};
struct datab {frtn_t *db_frtnp;unsigned __int8 *db_base;unsigned __int8 *db_lim;unsigned __int8 db_ref;unsigned __int8 db_type;unsigned __int8 db_flags;unsigned __int8 db_struioflag;void *db_cache;struct msgb *db_mblk;void (*db_free)(struct msgb *, struct datab *);void (*db_lastfree)(struct msgb *, struct datab *);void *db_pad;unsigned __int8 *db_struiobase;unsigned __int8 *db_struiolim;unsigned __int8 *db_struioptr;union datab::$B2E8909E96C049C2A3E7A2AEEB3F3FB8 db_struioun;fthdr_t *db_fthdr;ftflw_t ***db_ftflw;uid_t db_uid;uid_t db_lid;};
union datab::$B2E8909E96C049C2A3E7A2AEEB3F3FB8 {double enforce_alignment;unsigned __int8 data[8];unsigned __int32 u16 : 16;};
typedef struct $D379431B13F78A36F2202C5AA386190E datum;
enum db_action {DB_LOOKUP = 0x0,DB_REMOVE = 0x1,DB_ADD = 0x2,DB_FIRST = 0x3,DB_NEXT = 0x4,DB_ALL = 0x5,DB_RESET_NEXT = 0x6,};
typedef struct $4DAB4BE26238A65C4840EC4623134811 db_next_desc;
struct db_result {db_status status;db_next_desc nextinfo;struct db_result::$B843AB932F73FFE0B886650421EE9A7B objects;int ticks;};
struct db_result::$B843AB932F73FFE0B886650421EE9A7B {uint_t objects_len;entry_object_p *objects_val;};
enum db_status {DB_SUCCESS = 0x0,DB_NOTFOUND = 0x1,DB_NOTUNIQUE = 0x2,DB_BADTABLE = 0x3,DB_BADQUERY = 0x4,DB_BADOBJECT = 0x5,DB_MEMORY_LIMIT = 0x6,DB_STORAGE_LIMIT = 0x7,DB_INTERNAL_ERROR = 0x8,};
typedef struct datab dblk_t;
struct dbri_chip_cmd {uint32_t opcode;uint32_t arg[3];};
typedef struct dbri_chip_cmd dbri_chip_cmd_t;
struct dbri_code_chil {unsigned __int32 : 12;unsigned __int32 : 16;unsigned __int32 overflow : 1;unsigned __int32 nofs : 1;unsigned __int32 xact : 1;unsigned __int32 ract : 1;};
struct dbri_code_rex {unsigned __int32 XXX : 32;};
struct dbri_code_sbri {unsigned __int32 : 12;unsigned __int32 : 9;unsigned __int32 vta : 1;unsigned __int32 berr : 1;unsigned __int32 ferr : 1;unsigned __int32 mfm : 1;unsigned __int32 fsc : 1;unsigned __int32 rif4 : 1;unsigned __int32 rif0 : 1;unsigned __int32 act : 1;unsigned __int32 tss : 3;};
struct dbri_dts_cmd {union dbri_dts_opcode opcode;union dbri_dts_tsd input_tsd;union dbri_dts_tsd output_tsd;};
typedef struct dbri_dts_cmd dbri_dts_cmd_t;
union dbri_dts_opcode {struct dbri_dts_opcode::$E7979599CA1B17574DB8BEEF940714B1 r;uint32_t word32;};
struct dbri_dts_opcode::$E7979599CA1B17574DB8BEEF940714B1 {unsigned __int32 cmd : 4;unsigned __int32 cmdi : 1;unsigned __int32 res : 9;unsigned __int32 vi : 1;unsigned __int32 vo : 1;unsigned __int32 id : 1;unsigned __int32 oldin : 5;unsigned __int32 oldout : 5;unsigned __int32 pipe : 5;};
union dbri_dts_tsd {struct dbri_dts_tsd::$81D97CDFDE4B25C2022176D9D2324F3D r;struct dbri_dts_tsd::$5C60E47FC670D9F72FB94116E1FA1533 chi;uint32_t word32;};
struct dbri_dts_tsd::$5C60E47FC670D9F72FB94116E1FA1533 {unsigned __int32 : 19;unsigned __int32 mode : 3;unsigned __int32 : 5;unsigned __int32 next : 5;};
struct dbri_dts_tsd::$81D97CDFDE4B25C2022176D9D2324F3D {unsigned __int32 len : 8;unsigned __int32 cycle : 10;unsigned __int32 di : 1;unsigned __int32 mode : 3;unsigned __int32 mon : 5;unsigned __int32 next : 5;};
typedef union $8118FFB9EEB2C3E80F209039896F74EE dbri_fcode_t;
struct dbri_intq {volatile caddr32_t nextq;volatile dbri_intrq_ent_t intr[63];};
typedef struct dbri_intq dbri_intq_t;
typedef union $5396904C4F40B9D23631641FAE141A5A dbri_intrq_ent_t;
union dbri_md {volatile struct dbri_md::$5BDDECA1D345617A19D694F0479F5E14 tx;volatile struct dbri_md::$3585FD5177D2C3180482D2FE90B1A361 rx;volatile uint32_t _words[4];};
struct dbri_md::$3585FD5177D2C3180482D2FE90B1A361 {unsigned __int32 eof : 1;unsigned __int32 com : 1;unsigned __int32 : 1;unsigned __int32 cnt : 13;unsigned __int32 : 8;unsigned __int32 status : 8;unsigned int bufp;caddr32_t fp;unsigned __int32 : 16;unsigned __int32 fint : 1;unsigned __int32 mint : 1;unsigned __int32 : 1;unsigned __int32 bcnt : 13;};
struct dbri_md::$5BDDECA1D345617A19D694F0479F5E14 {unsigned __int32 eof : 1;unsigned __int32 dcrc : 1;unsigned __int32 : 1;unsigned __int32 cnt : 13;unsigned __int32 fint : 1;unsigned __int32 mint : 1;unsigned __int32 idl : 1;unsigned __int32 fcnt : 13;unsigned int bufp;caddr32_t fp;uint_t status;};
typedef union $3C540F5A14E02DF258E6208309F9E315 dbri_reg_t;
union dbri_rex_opcode {struct dbri_rex_opcode::$213D8288DE2BBC7A9C1DC9B852CEBCC7 r;uint32_t word32;};
struct dbri_rex_opcode::$213D8288DE2BBC7A9C1DC9B852CEBCC7 {unsigned __int32 cmd : 4;unsigned __int32 cmdi : 1;unsigned __int32 pipe : 6;unsigned __int32 tag : 21;};
struct dc_ops {int version;int (*dc_get_major)(major_t *, char *);int (*dc_free_major)(major_t, char *);int (*dc_major_name)(major_t, char *);int (*dc_sync_instances)();int (*dc_instance_path)(major_t, char *, uint_t);int (*dc_get_instance)(major_t, const char *, uint_t *);int (*dc_free_instance)(major_t, const char *, uint_t);int (*dc_map_minor)(major_t, minor_t, minor_t *, dev_type_t);int (*dc_unmap_minor)(major_t, minor_t, minor_t, dev_type_t);int (*dc_resolve_minor)(major_t, minor_t, minor_t *, dev_type_t *);int (*dc_devconfig_lock)(int);int (*dc_devconfig_unlock)();int (*dc_service_config)(int, void *, int);};
struct dcanchor {void *dca_dircache;kmutex_t dca_lock;};
typedef struct dcanchor dcanchor_t;
struct dcentry {uint64_t de_handle;struct dcentry *de_next;int de_hash;uchar_t de_namelen;char de_name[1];};
typedef struct dcentry dcentry_t;
struct dcfree {uint64_t df_handle;struct dcfree *df_next;uint_t df_len;};
typedef struct dcfree dcfree_t;
typedef struct $EB9CBE9F844ABCF9E9277596B691C0BF dchead_t;
enum dcop_state {DC_READONLY = 0x0,DC_INSTALLING = 0x1,DC_READY = 0x2,};
struct ddi_callback {struct ddi_callback *c_nfree;struct ddi_callback *c_nlist;int (*c_call)();caddr_t c_arg;int c_count;};
typedef enum $45009653CDC2001856F06EFDA9E04C5E ddi_ctl_enum_t;
typedef struct ddi_devid *ddi_devid_t;
typedef enum $FE80D5111114141386C0BD10BAE533E0 ddi_devmap_cmd_t;
typedef void *ddi_devmap_data_t;
typedef union $DBB18890394B8029ED37E44DCE2D8EED ddi_dma_aobj_t;
struct ddi_dma_attr {uint_t dma_attr_version;uint64_t dma_attr_addr_lo;uint64_t dma_attr_addr_hi;uint64_t dma_attr_count_max;uint64_t dma_attr_align;uint_t dma_attr_burstsizes;uint32_t dma_attr_minxfer;uint64_t dma_attr_maxxfer;uint64_t dma_attr_seg;int dma_attr_sgllen;uint32_t dma_attr_granular;uint_t dma_attr_flags;};
typedef struct ddi_dma_attr ddi_dma_attr_t;
typedef enum $03CC775CEF2B1D596517FD882262439F ddi_dma_atyp_t;
typedef struct $F9CE4197C78490B9950BF1AD06D064B7 ddi_dma_cookie_t;
enum ddi_dma_ctlops {DDI_DMA_FREE = 0x0,DDI_DMA_SYNC = 0x1,DDI_DMA_HTOC = 0x2,DDI_DMA_KVADDR = 0x3,DDI_DMA_MOVWIN = 0x4,DDI_DMA_REPWIN = 0x5,DDI_DMA_GETERR = 0x6,DDI_DMA_COFF = 0x7,DDI_DMA_NEXTWIN = 0x8,DDI_DMA_NEXTSEG = 0x9,DDI_DMA_SEGTOC = 0xA,DDI_DMA_RESERVE = 0xB,DDI_DMA_RELEASE = 0xC,DDI_DMA_RESETH = 0xD,DDI_DMA_CKSYNC = 0xE,DDI_DMA_IOPB_ALLOC = 0xF,DDI_DMA_IOPB_FREE = 0x10,DDI_DMA_SMEM_ALLOC = 0x11,DDI_DMA_SMEM_FREE = 0x12,DDI_DMA_SET_SBUS64 = 0x13,DDI_DMA_E_ACQUIRE = 0x14,DDI_DMA_E_FREE = 0x15,DDI_DMA_E_1STPTY = 0x16,DDI_DMA_E_GETCB = 0x17,DDI_DMA_E_FREECB = 0x18,DDI_DMA_E_PROG = 0x19,DDI_DMA_E_SWSETUP = 0x1A,DDI_DMA_E_SWSTART = 0x1B,DDI_DMA_E_ENABLE = 0x1C,DDI_DMA_E_STOP = 0x1D,DDI_DMA_E_DISABLE = 0x1E,DDI_DMA_E_GETCNT = 0x1F,DDI_DMA_E_GETLIM = 0x20,DDI_DMA_E_GETATTR = 0x21,};
typedef void *ddi_dma_handle_t;
struct ddi_dma_impl {ulong_t dmai_mapping;uint_t dmai_size;off_t dmai_offset;uint_t dmai_minxfer;uint_t dmai_burstsizes;uint_t dmai_ndvmapages;uint_t dmai_pool;uint_t dmai_rflags;uint_t dmai_inuse;uint_t dmai_nwin;uint_t dmai_winsize;caddr_t dmai_nexus_private;void *dmai_iopte;uint_t *dmai_sbi;void *dmai_minfo;dev_info_t *dmai_rdip;ddi_dma_obj_t dmai_object;ddi_dma_attr_t dmai_attr;ddi_dma_cookie_t *dmai_cookie;int (*dmai_fault_check)(struct ddi_dma_impl *handle);void (*dmai_fault_notify)(struct ddi_dma_impl *handle);int dmai_fault;};
typedef struct ddi_dma_impl ddi_dma_impl_t;
struct ddi_dma_lim {uint_t dlim_addr_lo;uint_t dlim_addr_hi;uint_t dlim_cntr_max;uint_t dlim_burstsizes;uint_t dlim_minxfer;uint_t dlim_dmaspeed;};
typedef struct ddi_dma_lim ddi_dma_lim_t;
typedef struct $06F14C8D328ECA5949F7DFEA2A047922 ddi_dma_obj_t;
struct ddi_dma_req {ddi_dma_lim_t *dmar_limits;uint_t dmar_flags;int (*dmar_fp)();caddr_t dmar_arg;ddi_dma_obj_t dmar_object;};
typedef struct ddi_dma_req ddi_dma_req_t;
typedef ddi_dma_impl_t ddi_dma_seg_impl_t;
typedef void *ddi_dma_seg_t;
typedef void *ddi_dma_win_t;
typedef void *ddi_iblock_cookie_t;
typedef union $5FF073EC236C3BFF212C817E6EDD9CDF ddi_idevice_cookie_t;
typedef enum $ABA88FFCF844ADB83559AF0FBF7F1E52 ddi_intr_ctlop_t;
struct ddi_intr_info {ddi_intrspec_t ii_ispec;ddi_iblock_cookie_t *ii_iblock_cookiep;ddi_idevice_cookie_t *ii_idevice_cookiep;uint_t (*ii_int_handler)(caddr_t ii_int_handler_arg);caddr_t ii_int_handler_arg;int32_t ii_kind;uint32_t ii_inum;};
typedef struct ddi_intr_info ddi_intr_info_t;
typedef void *ddi_intrspec_t;
typedef void *ddi_mapdev_handle_t;
struct ddi_minor {char *name;dev_t dev;int spec_type;char *node_type;minor_t iminor;minor_t eminor;unsigned int mdclass;};
struct ddi_minor_alias {struct ddi_minor_data *dmp;};
struct ddi_minor_data {struct ddi_minor_data *next;dev_info_t *dip;ddi_minor_type type;union ddi_minor_data::$C8F0215C6A1A24E3095D703645F6536F mu;};
union ddi_minor_data::$C8F0215C6A1A24E3095D703645F6536F {struct ddi_minor d_minor;struct ddi_minor_alias d_alias;};
typedef enum $EDAFB8E8B9C907AF6E1D55EDA7356F26 ddi_minor_type;
typedef enum $96510381DCBEEC9773C8F1EFD3180D16 ddi_node_class_t;
struct ddi_parent_private_data {int par_nreg;struct regspec *par_reg;int par_nintr;struct intrspec *par_intr;int par_nrng;struct rangespec *par_rng;};
struct ddi_prop {struct ddi_prop *prop_next;dev_t prop_dev;char *prop_name;int prop_flags;int prop_len;caddr_t prop_val;};
typedef enum $3F61DD0375CBC1F37C02B00929A813F6 ddi_prop_cmd_t;
struct ddi_prop_handle {void *ph_data;void *ph_cur_pos;void *ph_save_pos;uint_t ph_size;uint_t ph_flags;struct prop_handle_ops *ph_ops;};
typedef enum $D7C0A176FE35DFEAAB524AEF710D9981 ddi_prop_op_t;
typedef enum $B4C1E64CFFB78309CC76463EAA797381 ddi_prop_result_t;
typedef struct ddi_prop ddi_prop_t;
typedef void *ddi_regspec_t;
typedef void *ddi_softintr_t;
enum de_op {DE_CREATE = 0x0,DE_MKDIR = 0x1,DE_LINK = 0x2,DE_RENAME = 0x3,};
enum decimal_form {fixed_form = 0x0,floating_form = 0x1,};
typedef struct $C07A277B0B1F71E677259B025564A502 decimal_mode;
typedef struct $13471B52BA0ED10EDFBC0B01A6831312 decimal_record;
typedef char decimal_string[512];
enum decimal_string_form {invalid_form = 0x0,whitespace_form = 0x1,fixed_int_form = 0x2,fixed_intdot_form = 0x3,fixed_dotfrac_form = 0x4,fixed_intdotfrac_form = 0x5,floating_int_form = 0x6,floating_intdot_form = 0x7,floating_dotfrac_form = 0x8,floating_intdotfrac_form = 0x9,inf_form = 0xA,infinity_form = 0xB,nan_form = 0xC,nanstring_form = 0xD,};
struct defect_header {int head;unsigned __int8 *buffer;};
struct delta {int64_t d_mof;int32_t d_nb;delta_t d_typ;};
typedef enum delta_type delta_t;
enum delta_type {DT_NONE = 0x0,DT_SB = 0x1,DT_CG = 0x2,DT_SI = 0x3,DT_AB = 0x4,DT_ABZERO = 0x5,DT_DIR = 0x6,DT_INODE = 0x7,DT_FBI = 0x8,DT_QR = 0x9,DT_COMMIT = 0xA,DT_CANCEL = 0xB,DT_BOT = 0xC,DT_EOT = 0xD,DT_UD = 0xE,DT_SUD = 0xF,DT_SHAD = 0x10,DT_MAX = 0x11,};
union des_block {struct des_block::$5225801D107CE2D6470E1DB341886AD6 key;char c[8];};
struct des_block::$5225801D107CE2D6470E1DB341886AD6 {uint32_t high;uint32_t low;};
struct des_clnt_data {struct netbuf syncaddr;struct knetconfig *knconf;char *netname;int netnamelen;};
typedef struct krb4_svc_data des_svcdata_t;
enum desdir {ENCRYPT = 0x0,DECRYPT = 0x1,};
struct deskeydata {chunk_t keyval[16];};
enum desmode {CBC = 0x0,ECB = 0x1,};
struct desparams {uchar_t des_key[8];enum desdir des_dir;enum desmode des_mode;uchar_t des_ivec[8];unsigned int des_len;union desparams::$253CA3BE9A5A5329A1F720696CC4BB93 UDES;};
union desparams::$253CA3BE9A5A5329A1F720696CC4BB93 {uchar_t UDES_data[16];uchar_t *UDES_buf;};
typedef uint32_t dev32_t;
struct dev_info {struct dev_info *devi_parent;struct dev_info *devi_child;struct dev_info *devi_sibling;char *devi_binding_name;char *devi_addr;int devi_nodeid;int devi_instance;struct dev_ops *devi_ops;caddr_t devi_parent_data;caddr_t devi_driver_data;ddi_prop_t *devi_drv_prop_ptr;ddi_prop_t *devi_sys_prop_ptr;struct ddi_minor_data *devi_minor;struct dev_info *devi_next;kmutex_t devi_lock;struct dev_info *devi_bus_map_fault;struct dev_info *devi_bus_dma_map;struct dev_info *devi_bus_dma_allochdl;struct dev_info *devi_bus_dma_freehdl;struct dev_info *devi_bus_dma_bindhdl;struct dev_info *devi_bus_dma_unbindhdl;struct dev_info *devi_bus_dma_flush;struct dev_info *devi_bus_dma_win;struct dev_info *devi_bus_dma_ctl;struct dev_info *devi_bus_ctl;void *devi_pm_info;char *devi_node_name;char *devi_compat_names;size_t devi_compat_length;int (*devi_bus_dma_bindfunc)(dev_info_t *, dev_info_t *, ddi_dma_handle_t, struct ddi_dma_req *, ddi_dma_cookie_t *, uint_t *);int (*devi_bus_dma_unbindfunc)(dev_info_t *, dev_info_t *, ddi_dma_handle_t);ddi_prop_t *devi_hw_prop_ptr;ddi_devid_t devi_devid;uint_t devi_pm_flags;int devi_pm_num_components;size_t devi_pm_comp_size;struct pm_component *devi_pm_components;uint_t devi_state;kcondvar_t devi_cv;int devi_ref;dacf_rsrvlist_t *devi_dacf_tasks;char *devi_last_addr;ddi_node_class_t devi_node_class;int devi_node_attributes;struct dev_info *devi_pm_ppm;void *devi_pm_ppm_private;int devi_pm_dev_thresh;kmutex_t devi_pm_lock;kmutex_t devi_pm_busy_lock;kmutex_t devi_pm_power_lock;int devi_pm_power_lock_ref;char *devi_pm_plockmask;int devi_pm_allcompcount;};
typedef void *dev_info_t;
struct dev_ops;
struct dev_spec_ear {uint32_t ds_atype;uint8_t ds_astype;uint8_t ds_res[3];uint32_t ds_attr_len;uint32_t ds_iu_len;uint32_t ds_major_id;uint32_t ds_minor_id;uint8_t ds_iu[4];};
typedef ulong_t dev_t;
enum dev_type {DEV_INVALID = 0x0,DEV_GLOBAL = 0x2,DEV_NODEBOUND = 0x4,DEV_NODESPECIFIC = 0x6,DEV_ENUMERATED = 0x8,DEV_CLONE = 0x1,};
typedef enum dev_type dev_type_t;
typedef struct $D53EBEF53D22F60B85DC57B7CC577C4D devalloc_t;
struct devctl_ap_state {ap_rstate_t ap_rstate;ap_ostate_t ap_ostate;ap_condition_t ap_condition;time_t ap_last_change;uint32_t ap_error_code;uint8_t ap_in_transition;};
typedef struct devctl_ap_state devctl_ap_state_t;
typedef struct devctl_dummy_struct *devctl_hdl_t;
struct devctl_iocdata {uint_t cmd;char *dev_path;char *dev_name;char *dev_addr;char *dev_minor;uint_t *ret_state;};
struct devicedata3 {sattr3 dev_attributes;specdata3 spec;};
struct devid_nmlist {char *devname;dev_t dev;};
typedef struct devid_nmlist devid_nmlist_t;
typedef struct $4F7711BDAF281951A6E73987538C1D62 devmap_t;
struct devnames {char *dn_name;int dn_flags;struct par_list *dn_pl;kmutex_t dn_lock;kcondvar_t dn_wait;int dn_circular;kthread_id_t dn_busy_thread;dev_info_t *dn_head;int dn_instance;void *dn_inlist;ddi_prop_t *dn_global_prop_ptr;mta_handle_t *dn_mta;};
typedef page_t devpage_t;
typedef struct des_clnt_data dh_k4_clntdata_t;
struct di_all {int version;int pd_version;int endianness;int generation;di_off_t top_devinfo;di_off_t devnames;di_off_t ppdata_format;di_off_t dpdata_format;int n_ppdata;int n_dpdata;int devcnt;uint_t command;uint_t map_size;char root_path[1];};
struct di_devnm {di_off_t name;di_off_t global_prop;di_off_t head;int flags;int instance;uint_t ops;};
struct di_minor {di_off_t self;di_off_t next;di_off_t name;di_off_t node_type;ddi_minor_type type;major_t dev_major;minor_t dev_minor;int spec_type;unsigned int mdclass;};
typedef struct di_minor *di_minor_t;
struct di_node {di_off_t self;di_off_t parent;di_off_t child;di_off_t sibling;di_off_t next;di_off_t node_name;di_off_t address;di_off_t bind_name;di_off_t compat_names;di_off_t minor_data;di_off_t drv_prop;di_off_t sys_prop;di_off_t hw_prop;di_off_t parent_data;di_off_t driver_data;di_off_t devid;di_off_t pm_info;int compat_length;int drv_major;int instance;int nodeid;ddi_node_class_t node_class;int attributes;uint_t state;uint_t node_state;};
typedef struct di_node *di_node_t;
typedef int32_t di_off_t;
struct di_priv_data {int version;int n_parent;int n_driver;struct di_priv_format *parent;struct di_priv_format *driver;};
struct di_priv_format {char drv_name[1024];size_t bytes;struct di_priv_format::$DA5D4B001E276F918FB366B836D0F6B4 ptr[5];};
struct di_priv_format::$DA5D4B001E276F918FB366B836D0F6B4 {int size;int offset;int len_offset;};
typedef struct di_prom_handle *di_prom_handle_t;
typedef struct di_prom_prop *di_prom_prop_t;
struct di_prop {di_off_t self;di_off_t next;di_off_t prop_name;di_off_t prop_data;major_t dev_major;minor_t dev_minor;int prop_flags;int prop_len;int prop_list;};
typedef struct di_prop *di_prop_t;
struct dinfo_io {char root_path[1024];struct di_priv_data priv;};
struct dinode {union dinode::$7C68577AF0075A7E4A65BFF776A0DE33 di_un;};
union dinode::$7C68577AF0075A7E4A65BFF776A0DE33 {struct icommon di_icom;char di_size[128];};
struct dircache {struct dircache *dc_next;struct dircache *dc_prev;int64_t dc_actime;dcentry_t **dc_namehash;dcfree_t **dc_freehash;uint_t dc_num_entries;uint_t dc_num_free;uint_t dc_nhash_mask;uint_t dc_fhash_mask;struct dcanchor *dc_anchor;boolean_t dc_complete;};
typedef struct dircache dircache_t;
struct direct {uint32_t d_ino;ushort_t d_reclen;ushort_t d_namlen;char d_name[256];};
struct directory_obj {nis_name do_name;nstype do_type;struct directory_obj::$1F9DB6EC5B4D38C4C9C3429D1A4D637D do_servers;uint32_t do_ttl;struct directory_obj::$C1C9E10248BAA10524C7D0EEA27D2609 do_armask;};
struct directory_obj::$1F9DB6EC5B4D38C4C9C3429D1A4D637D {u_int do_servers_len;nis_server *do_servers_val;};
struct directory_obj::$C1C9E10248BAA10524C7D0EEA27D2609 {u_int do_armask_len;oar_mask *do_armask_val;};
struct dirent {ino_t d_ino;off_t d_off;unsigned __int16 d_reclen;char d_name[1];};
struct dirent64 {ino64_t d_ino;off64_t d_off;unsigned __int16 d_reclen;char d_name[1];};
typedef struct dirent64 dirent64_t;
typedef struct dirent dirent_t;
struct dirlist3 {entry3 *entries;bool_t eof;};
struct dirlistplus3 {entryplus3 *entries;bool_t eof;};
struct diropargs3 {nfs_fh3 *dirp;nfs_fh3 dir;filename3 name;int flags;};
typedef longlong_t diskaddr_t;
struct diskhd {int b_flags;struct buf *b_forw;struct buf *b_back;struct buf *av_forw;struct buf *av_back;int b_bcount;};
typedef lock_t disp_lock_t;
typedef struct _disp disp_t;
struct dispq {kthread_id_t dq_first;kthread_id_t dq_last;int dq_sruncnt;};
typedef struct dispq dispq_t;
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 div_t;
struct dk_allmap {struct dk_map dka_map[8];};
struct dk_cinfo {char dki_cname[16];ushort_t dki_ctype;ushort_t dki_flags;ushort_t dki_cnum;uint_t dki_addr;uint_t dki_space;uint_t dki_prio;uint_t dki_vec;char dki_dname[16];uint_t dki_unit;uint_t dki_slave;ushort_t dki_partition;ushort_t dki_maxtransfer;};
struct dk_devid {uchar_t dkd_rev_hi;uchar_t dkd_rev_lo;uchar_t dkd_flags;uchar_t dkd_devid[505];uchar_t dkd_checksum3;uchar_t dkd_checksum2;uchar_t dkd_checksum1;uchar_t dkd_checksum0;};
struct dk_geom {unsigned __int16 dkg_ncyl;unsigned __int16 dkg_acyl;unsigned __int16 dkg_bcyl;unsigned __int16 dkg_nhead;unsigned __int16 dkg_obs1;unsigned __int16 dkg_nsect;unsigned __int16 dkg_intrlv;unsigned __int16 dkg_obs2;unsigned __int16 dkg_obs3;unsigned __int16 dkg_apc;unsigned __int16 dkg_rpm;unsigned __int16 dkg_pcyl;unsigned __int16 dkg_write_reinstruct;unsigned __int16 dkg_read_reinstruct;unsigned __int16 dkg_extra[7];};
struct dk_gmpstate {enum dk_mpstate dkg_mpstate;uint_t dkg_fail_state;uint_t dkg_current_status;int dkg_pad[4];};
struct dk_label {char dkl_asciilabel[128];struct dk_vtoc dkl_vtoc;uint16_t dkl_write_reinstruct;uint16_t dkl_read_reinstruct;char dkl_pad[152];uint16_t dkl_rpm;uint16_t dkl_pcyl;uint16_t dkl_apc;uint16_t dkl_obs1;uint16_t dkl_obs2;uint16_t dkl_intrlv;uint16_t dkl_ncyl;uint16_t dkl_acyl;uint16_t dkl_nhead;uint16_t dkl_nsect;uint16_t dkl_obs3;uint16_t dkl_obs4;struct dk_map dkl_map[8];uint16_t dkl_magic;uint16_t dkl_cksum;};
struct dk_map {daddr_t dkl_cylno;daddr_t dkl_nblk;};
struct dk_map2 {uint16_t p_tag;uint16_t p_flag;};
struct dk_map32 {daddr32_t dkl_cylno;daddr32_t dkl_nblk;};
struct dk_minfo {uint_t dki_media_type;uint_t dki_lbsize;diskaddr_t dki_capacity;};
struct dk_mpcmd {uint_t dkc_mpcmd;uint_t dkc_mpflags;caddr_t dkc_bufaddr;uint_t dkc_buflen;int dkc_pad[4];};
struct dk_mpdrv_status {uint_t dkd_cum_drv_soft_errors;uint_t dkd_cum_drv_hard_errors;uint_t dkd_cum_drv_retries;int dkd_pad[4];};
struct dk_mpflags {uint_t dkf_config_flags;uint_t dkf_control_flags;int dkf_pad[4];};
struct dk_mpinfo {struct dk_gmpstate dke_mpstate;struct dk_mpflags dke_mpflags;struct dk_mpdrv_status dke_mpdrv_status;enum dk_mptype dke_mptype;int dke_qcapacity;uint_t dke_max_quiesce;int dke_pad[4];};
enum dk_mpstate {DKS_INITIAL = 0x0,DKS_OFFLINE = 0x1,DKS_ONLINE = 0x2,DKS_FREEZE = 0x3,};
enum dk_mptype {DKT_IPI = 0x0,DKT_SCSI = 0x1,DKT_UNKNOWN = 0x2,};
struct dk_smpstate {enum dk_mpstate dks_mpstate;int dks_pad[2];};
struct dk_vtoc {uint32_t v_version;char v_volume[8];uint16_t v_nparts;struct dk_map2 v_part[8];uint32_t v_bootinfo[3];uint32_t v_sanity;uint32_t v_reserved[10];time32_t v_timestamp[8];};
struct dkbad {int bt_csn;ushort_t bt_mbz;ushort_t bt_flag;struct dkbad::bt_bad bt_bad[126];};
struct dkbad::bt_bad {__int16 bt_cyl;__int16 bt_trksec;};
enum dkio_state {DKIO_NONE = 0x0,DKIO_EJECTED = 0x1,DKIO_INSERTED = 0x2,};
struct dkl_partition {uint16_t p_tag;uint16_t p_flag;daddr32_t p_start;int32_t p_size;};
struct dl {int dl_hop;uint_t dl_lop;};
typedef struct $6F34A6491CA243DAC3BD57A8740A9A28 dl_attach_req_t;
typedef struct $AD4457FAA5FAAE8991C949BB8D588EAD dl_bind_ack_t;
typedef struct $D097637AB270BABD14B3012188BFE07C dl_bind_req_t;
typedef struct $6601AD8F8068B3BD81BCD4072DAC7812 dl_connect_con_t;
typedef struct $D34CDA88D8A7072F4DEA084B2AED3D31 dl_connect_ind_t;
typedef struct $ECD491B309C6C7D8FCBA014B12E7CF40 dl_connect_req_t;
typedef struct $1C7EDB14D495611F6D5B778EE61996F1 dl_connect_res_t;
typedef struct $151922ADF64B06A7DAF3138A8711D7E7 dl_data_ack_ind_t;
typedef struct $7B9922258B8A0A4B0B5326F3B4359CE8 dl_data_ack_req_t;
typedef struct $04DE162F931BF1138370E48C46D0BB8C dl_data_ack_status_ind_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_detach_req_t;
typedef struct $32C08F122C9B6B5AD3095757A88A96E6 dl_disabmulti_req_t;
typedef struct $CE4930CE30C4A3FD577842D3323B273C dl_disconnect_ind_t;
typedef struct $3747F54EBF0E40BCD04B6F28DE7EFCF2 dl_disconnect_req_t;
typedef struct $32C08F122C9B6B5AD3095757A88A96E6 dl_enabmulti_req_t;
typedef struct $D4691ED55A662893A224D2D25A30EEEC dl_error_ack_t;
typedef struct $56A66AEB305BDFFF6669B4BC9F04D8CC dl_get_statistics_ack_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_get_statistics_req_t;
struct dl_info {const char *dli_fname;void *dli_fbase;const char *dli_sname;void *dli_saddr;};
typedef struct $140052591CB0062D1DDFF0A358260292 dl_info_ack_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_info_req_t;
typedef struct $A9BE18D8DE98772F097D505829E8B2F3 dl_ok_ack_t;
typedef struct $32C08F122C9B6B5AD3095757A88A96E6 dl_phys_addr_ack_t;
typedef struct $5F450950E4D1D1BEF117F0FECB7D4E7F dl_phys_addr_req_t;
typedef struct $318570FC7384B19A4DCAD3D835569F28 dl_priority_t;
typedef struct $1F097835C705A71A99785C5F8D94F01C dl_promiscoff_req_t;
typedef struct $1F097835C705A71A99785C5F8D94F01C dl_promiscon_req_t;
typedef struct $318570FC7384B19A4DCAD3D835569F28 dl_protect_t;
typedef struct $2D2DEA9E8B1723DA9627F35ADE64BFFE dl_qos_cl_range1_t;
typedef struct $1E4540432FE6FCBAA14615B1753B1498 dl_qos_cl_sel1_t;
typedef struct $F595FC0EEBF0E630CD599952C6884CED dl_qos_co_range1_t;
typedef struct $03B9D2AB7EC31E7B5953C0F06C8B7AA9 dl_qos_co_sel1_t;
typedef struct $151922ADF64B06A7DAF3138A8711D7E7 dl_reply_ind_t;
typedef struct $7B9922258B8A0A4B0B5326F3B4359CE8 dl_reply_req_t;
typedef struct $04DE162F931BF1138370E48C46D0BB8C dl_reply_status_ind_t;
typedef struct $1FF34CFEF9C2EB17EF4167068BB24E21 dl_reply_update_req_t;
typedef struct $04DE162F931BF1138370E48C46D0BB8C dl_reply_update_status_ind_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_reset_con_t;
typedef struct $5A986AD36714D9EA4A4C301E327B6C4C dl_reset_ind_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_reset_req_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_reset_res_t;
typedef struct $4675A006519F4470174748AEB7610016 dl_resilience_t;
typedef struct $32C08F122C9B6B5AD3095757A88A96E6 dl_set_phys_addr_req_t;
typedef struct $20B967FD53182EA0ACEED1B6ABCFD823 dl_subs_bind_ack_t;
typedef struct $5F20F5A0DF59391F86268A875D1DFCE5 dl_subs_bind_req_t;
typedef struct $20B967FD53182EA0ACEED1B6ABCFD823 dl_subs_unbind_req_t;
typedef struct dl dl_t;
typedef struct $551C78EEC93CDF0108C003355B4DC50B dl_test_con_t;
typedef struct $551C78EEC93CDF0108C003355B4DC50B dl_test_ind_t;
typedef struct $5F5854608C3B35F56B7E671DFC3D4679 dl_test_req_t;
typedef struct $5F5854608C3B35F56B7E671DFC3D4679 dl_test_res_t;
typedef struct $1095822099D52E0E523F071FF4F33828 dl_through_t;
typedef struct $2051B98100A0C61393C608F0D7B8F621 dl_token_ack_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_token_req_t;
typedef struct $1095822099D52E0E523F071FF4F33828 dl_transdelay_t;
typedef struct $CD160A28723B1B650FC96BC3CBBCB54B dl_uderror_ind_t;
typedef struct $52996A3AC8C68F1BEA5587A21EB91746 dl_udqos_req_t;
typedef struct $54EC9098503BC20AC050B3CB62F30CBC dl_unbind_req_t;
typedef struct $CB6AA1DC15048494E8DB562E85E5F184 dl_unitdata_ind_t;
typedef struct $187C6244C967198C5905B382B0BFB5FB dl_unitdata_req_t;
typedef struct $551C78EEC93CDF0108C003355B4DC50B dl_xid_con_t;
typedef struct $551C78EEC93CDF0108C003355B4DC50B dl_xid_ind_t;
typedef struct $5F5854608C3B35F56B7E671DFC3D4679 dl_xid_req_t;
typedef struct $5F5854608C3B35F56B7E671DFC3D4679 dl_xid_res_t;
union dlsap {struct dlsap::$3C6A35A85173501EDF698F532F45D439 ether;struct dlsap::$9581DFA880E1BDAFBA851730491A1CBF llc;};
struct dlsap::$3C6A35A85173501EDF698F532F45D439 {uchar_t dl_nodeaddr[6];ushort_t dl_type;};
struct dlsap::$9581DFA880E1BDAFBA851730491A1CBF {uchar_t dl_nodeaddr[6];uchar_t dl_sap;};
typedef union dlsap dlsap_t;
struct dma {uint32_t dma_csr;uint32_t dma_addr;uint32_t dma_count;uint32_t dma_test;};
struct dma_phys_mapc {struct ddi_dma_req *dma_req;ddi_dma_impl_t *mp;int nptes;void *ptes;};
struct dmaga {uint32_t dmaga_csr;uint32_t dmaga_addr;uint32_t dmaga_count;uint32_t dmaga_diag;};
typedef union $C43472A59D225774831BE4F95424A25C dnan;
typedef phandle_t dnode_t;
struct door_arg {char *data_ptr;size_t data_size;door_desc_t *desc_ptr;uint_t desc_num;char *rbuf;size_t rsize;};
typedef struct door_arg door_arg_t;
typedef unsigned int door_attr_t;
struct door_cred {uid_t dc_euid;gid_t dc_egid;uid_t dc_ruid;gid_t dc_rgid;pid_t dc_pid;int dc_resv[4];};
typedef struct door_cred door_cred_t;
struct door_desc {door_attr_t d_attributes;union door_desc::$25857EF0BB56C9434AE30E0D4D8F6E3F d_data;};
union door_desc::$25857EF0BB56C9434AE30E0D4D8F6E3F {struct door_desc::$25857EF0BB56C9434AE30E0D4D8F6E3F::$4FC0E9F7C1E4FBF8E47EDF6D621C02B8 d_desc;int d_resv[5];};
struct door_desc::$25857EF0BB56C9434AE30E0D4D8F6E3F::$4FC0E9F7C1E4FBF8E47EDF6D621C02B8 {int d_descriptor;door_id_t d_id;};
typedef struct door_desc door_desc_t;
typedef unsigned __int64 door_id_t;
struct door_info {pid_t di_target;door_ptr_t di_proc;door_ptr_t di_data;door_attr_t di_attributes;door_id_t di_uniquifier;int di_resv[4];};
typedef struct door_info door_info_t;
typedef unsigned __int64 door_ptr_t;
typedef void door_server_func_t(door_info_t *);
struct dqblk {uint32_t dqb_bhardlimit;uint32_t dqb_bsoftlimit;uint32_t dqb_curblocks;uint32_t dqb_fhardlimit;uint32_t dqb_fsoftlimit;uint32_t dqb_curfiles;uint32_t dqb_btimelimit;uint32_t dqb_ftimelimit;};
struct dquot {struct dquot *dq_forw;struct dquot *dq_back;struct dquot *dq_freef;struct dquot *dq_freeb;__int16 dq_flags;ulong_t dq_cnt;uid_t dq_uid;struct ufsvfs *dq_ufsvfsp;offset_t dq_mof;struct dqblk dq_dqb;};
enum dr_op {DR_REMOVE = 0x0,DR_RMDIR = 0x1,DR_RENAME = 0x2,};
struct dsplog {int d_type;union dsplog::$DABDA4726C127F966E30EBE921BDE6CC d_un;};
union dsplog::$DABDA4726C127F966E30EBE921BDE6CC {struct dsplog::$DABDA4726C127F966E30EBE921BDE6CC::$3312E2CECBED6EEC31AB8F3844196AC4 x;struct dsplog::$DABDA4726C127F966E30EBE921BDE6CC::$3AF9F845BE34840AF45A939F03073E99 r;};
struct dsplog::$DABDA4726C127F966E30EBE921BDE6CC::$3312E2CECBED6EEC31AB8F3844196AC4 {char d_file[8];int d_cnt;unsigned int d_uid;int d_lvl;int d_rdr;};
struct dsplog::$DABDA4726C127F966E30EBE921BDE6CC::$3AF9F845BE34840AF45A939F03073E99 {char d_file[8];int d_cnt;int d_trunc;};
typedef char dstring_t;
struct dump_args {nis_name da_dir;uint32_t da_time;struct dump_args::$00C533AE8545A66FA38641508A3DC473 da_cbhost;};
struct dump_args::$00C533AE8545A66FA38641508A3DC473 {u_int da_cbhost_len;nis_server *da_cbhost_val;};
struct dump_map {offset_t dm_first;offset_t dm_next;offset_t dm_data;struct as *dm_as;uintptr_t dm_va;};
typedef struct dump_map dump_map_t;
struct dumphdr {uint32_t dump_magic;uint32_t dump_version;uint32_t dump_flags;uint32_t dump_wordsize;offset_t dump_start;offset_t dump_ksyms;offset_t dump_pfn;offset_t dump_map;offset_t dump_data;struct utsname dump_utsname;char dump_platform[257];char dump_panicstring[200];time_t dump_crashtime;int dump_pageshift;int dump_pagesize;int dump_hashmask;int dump_nvtop;pgcnt_t dump_npages;size_t dump_ksyms_size;size_t dump_ksyms_csize;};
typedef struct dumphdr dumphdr_t;
struct dupreq {uint32_t dr_xid;rpcproc_t dr_proc;rpcvers_t dr_vers;rpcprog_t dr_prog;struct netbuf dr_addr;struct netbuf dr_resp;int dr_status;time_t dr_time;uint_t dr_hash;struct dupreq *dr_next;struct dupreq *dr_prev;struct dupreq *dr_chain;struct dupreq *dr_prevchain;};
struct dvpoll {pollfd_t *dp_fds;nfds_t dp_nfds;int dp_timeout;};
struct dvpoll32 {caddr32_t dp_fds;uint32_t dp_nfds;int32_t dp_timeout;};
typedef struct dvpoll32 dvpoll32_t;
typedef struct dvpoll dvpoll_t;
struct dwbuf {int b_flags;struct buf *b_forw;struct buf *b_back;struct buf *av_forw;struct buf *av_back;};
typedef uint32_t ea_catalog_t;
struct ea_group {uint32_t eg_nobjs;struct ea_object *eg_objs;};
typedef struct ea_group ea_group_t;
struct ea_item {union ea_item::$4B8FAD181399369BBD31D3D213262D6C ei_u;ea_size_t ei_size;};
union ea_item::$4B8FAD181399369BBD31D3D213262D6C {uint8_t ei_u_uint8;uint16_t ei_u_uint16;uint32_t ei_u_uint32;uint64_t ei_u_uint64;double ei_u_double;char *ei_u_string;void *ei_u_object;void *ei_u_raw;};
typedef struct ea_item ea_item_t;
struct ea_object {ea_object_type_t eo_type;union ea_object::$0370017D977B975B2DEED3572138FADD eo_u;struct ea_object *eo_next;ea_catalog_t eo_catalog;};
union ea_object::$0370017D977B975B2DEED3572138FADD {ea_group_t eo_u_group;ea_item_t eo_u_item;};
typedef struct ea_object ea_object_t;
typedef enum $414A75941736CF17FAE8ED5C32E2DBBB ea_object_type_t;
typedef uint64_t ea_size_t;
struct ecc_handler_args {uint_t e_uncorrectable;uint_t e_addrhi;uint_t e_addrlo;};
struct ecpp_regs {uint8_t dsr;uint8_t dcr;};
struct ecpp_transfer_parms {int write_timeout;int mode;};
struct edesc {char *name;struct edesc *next;};
typedef struct edesc edesc_t;
struct edge {struct edge *edge_adj_next;struct edge *edge_adj_prev;struct edge *edge_in_next;struct edge *edge_in_prev;struct lock_descriptor *from_vertex;struct lock_descriptor *to_vertex;};
typedef struct edge edge_t;
enum eject_state {VEJ_YES = 0x0,VEJ_NO = 0x1,VEJ_YESSTOP = 0x2,VEJ_NONE = 0x3,};
typedef struct ELS_payload els_payload_t;
struct em_adapter_info_ack {uint32_t em_primitive;uint32_t em_num_sockets;uint32_t em_num_windows;uint32_t em_num_power;uint32_t em_power_offset;uint32_t em_power_length;};
typedef struct em_adapter_info_ack em_adapter_info_ack_t;
struct em_adapter_info_req {uint32_t em_primitive;};
typedef struct em_adapter_info_req em_adapter_info_req_t;
struct em_event_ind {uint32_t em_primitive;uint32_t em_logical_socket;uint32_t em_event;uint32_t em_event_info_offset;uint32_t em_event_info_length;};
typedef struct em_event_ind em_event_ind_t;
struct em_get_first_tuple_ack {uint32_t em_primitive;};
typedef struct em_get_first_tuple_ack em_get_first_tuple_ack_t;
struct em_get_first_tuple_req {uint32_t em_primitive;uint32_t em_socket;uint32_t em_desired_tuple;};
typedef struct em_get_first_tuple_req em_get_first_tuple_req_t;
struct em_get_next_tuple_ack {uint32_t em_primitive;};
typedef struct em_get_next_tuple_ack em_get_next_tuple_ack_t;
struct em_get_next_tuple_req {uint32_t em_primitive;};
typedef struct em_get_next_tuple_req em_get_next_tuple_req_t;
struct em_get_socket_ack {uint32_t em_primitive;uint32_t em_socket;uint32_t em_vcc_level;uint32_t em_vpp1_level;uint32_t em_vpp2_level;uint32_t em_state;uint32_t em_control_ind;uint32_t em_ireq_routing;uint32_t em_iftype;};
typedef struct em_get_socket_ack em_get_socket_ack_t;
struct em_get_socket_req {uint32_t em_primitive;uint32_t em_socket;};
typedef struct em_get_socket_req em_get_socket_req_t;
struct em_ident_socket_req {uint32_t em_primitive;uint32_t em_socket;};
typedef struct em_ident_socket_req em_ident_socket_req_t;
struct em_info_ack {uint32_t em_primitive;uint32_t em_version;uint32_t em_state;uint32_t em_event_mask_offset;uint32_t em_event_mask_length;uint32_t em_event_class_offset;uint32_t em_event_class_length;};
typedef struct em_info_ack em_info_ack_t;
struct em_info_req {uint32_t em_primitive;};
typedef struct em_info_req em_info_req_t;
struct em_init_ack {uint32_t em_primitive;};
typedef struct em_init_ack em_init_ack_t;
struct em_init_req {uint32_t em_primitive;uint32_t em_logical_socket;uint32_t em_event_mask_offset;uint32_t em_event_mask_length;uint32_t em_event_class_offset;uint32_t em_event_class_length;};
typedef struct em_init_req em_init_req_t;
struct em_modify_event_mask_req {uint32_t em_primitive;};
typedef struct em_modify_event_mask_req em_modify_event_mask_req_t;
union em_primitives {uint32_t em_primitive;em_init_req_t init_req;em_info_req_t info_req;em_get_first_tuple_req_t get_first_tuple_req;em_get_next_tuple_req_t get_next_tuple_req;em_info_ack_t info_ack;em_event_ind_t event_ind;em_modify_event_mask_req_t modify_event_mask_req;em_get_socket_req_t get_socket_req;em_ident_socket_req_t ident_socket_req;};
struct em_socket_info_ack {uint32_t em_primitive;uint32_t em_status_int_caps;uint32_t em_status_report_caps;uint32_t em_control_indicator_caps;uint32_t em_socket_caps;};
typedef struct em_socket_info_ack em_socket_info_ack_t;
struct em_socket_info_req {uint32_t em_primitive;uint32_t em_socket;};
typedef struct em_socket_info_req em_socket_info_req_t;
struct emulex_format_params {uchar_t alt_cyl;unsigned __int8 nheads : 4;unsigned __int8 ssz : 1;unsigned __int8 sst : 2;unsigned __int8 : 1;unsigned __int8 nsect;uchar_t ncyl_hi;uchar_t ncyl_lo;uchar_t head_skew;uchar_t reserved[3];};
typedef struct $5A96F9ADF207CF237355020FDA0EFEF5 encobj;
typedef enum $E36DDC315EED95A07EBF18BE166BF116 enctyp;
typedef struct $75BAE6E6D7E8D7271432449CBE6780E8 encvec;
struct endpoint {char *uaddr;char *family;char *proto;};
struct entry3 {fileid3 fileid;filename3 name;cookie3 cookie;struct entry3 *nextentry;};
struct entry_col {uint_t ec_flags;struct entry_col::$E942B815045DEE9FABC14DA0AE6314FC ec_value;};
struct entry_col::$E942B815045DEE9FABC14DA0AE6314FC {u_int ec_value_len;char *ec_value_val;};
struct entry_obj {char *en_type;struct entry_obj::$9954B692FACAC347CBA764979909DFF4 en_cols;};
struct entry_obj::$9954B692FACAC347CBA764979909DFF4 {u_int en_cols_len;entry_col *en_cols_val;};
typedef entry_obj *entry_object_p;
struct entryinfo {struct sockaddr rtu_dst;struct sockaddr rtu_router;__int16 rtu_flags;__int16 rtu_state;int rtu_timer;int rtu_metric;int int_flags;char int_name[16];};
struct entryplus3 {fileid3 fileid;filename3 name;cookie3 cookie;post_op_attr name_attributes;post_op_fh3 name_handle;struct entryplus3 *nextentry;};
typedef int enum_t;
struct esp_cmd {struct scsi_pkt cmd_pkt;struct esp_cmd *cmd_forw;uchar_t *cmd_cdbp;uchar_t *cmd_scbp;uint_t cmd_flags;uint32_t cmd_data_count;uint32_t cmd_cur_addr;ushort_t cmd_nwin;ushort_t cmd_cur_win;ushort_t cmd_saved_win;uint32_t cmd_saved_data_count;uint32_t cmd_saved_cur_addr;ddi_dma_handle_t cmd_dmahandle;ddi_dma_cookie_t cmd_dmacookie;uint32_t cmd_dmacount;clock_t cmd_timeout;uchar_t cmd_cdb[12];uint64_t cmd_pkt_private[1];uchar_t cmd_cdblen;uchar_t cmd_cdblen_alloc;uchar_t cmd_qfull_retries;uint_t cmd_scblen;uint_t cmd_privlen;uchar_t cmd_scb[32];ushort_t cmd_age;uchar_t cmd_tag[2];};
struct espreg {uint8_t esp_xcnt_lo;uint8_t _pad1;uint8_t _pad2;uint8_t _pad3;uint8_t esp_xcnt_mid;uint8_t _pad5;uint8_t _pad6;uint8_t _pad7;uint8_t esp_fifo_data;uint8_t _pad9;uint8_t _pad10;uint8_t _pad11;uint8_t esp_cmd;uint8_t _pad13;uint8_t _pad14;uint8_t _pad15;uint8_t esp_stat;uint8_t _pad17;uint8_t _pad18;uint8_t _pad19;uint8_t esp_intr;uint8_t _pad21;uint8_t _pad22;uint8_t _pad23;uint8_t esp_step;uint8_t _pad25;uint8_t _pad26;uint8_t _pad27;uint8_t esp_fifo_flag;uint8_t _pad29;uint8_t _pad30;uint8_t _pad31;uint8_t esp_conf;uint8_t _pad33;uint8_t _pad34;uint8_t _pad35;uint8_t esp_clock_conv;uint8_t _pad37;uint8_t _pad38;uint8_t _pad39;uint8_t esp_test;uint8_t _pad41;uint8_t _pad42;uint8_t _pad43;uint8_t esp_conf2;uint8_t _pad45;uint8_t _pad46;uint8_t _pad47;uint8_t esp_conf3;uint8_t _pad49;uint8_t _pad50;uint8_t _pad51;uint8_t _pad52;uint8_t _pad53;uint8_t _pad54;uint8_t _pad55;uint8_t esp_xcnt_hi;uint8_t _pad57;uint8_t _pad58;uint8_t _pad59;uint8_t esp_fifo_bottom;uint8_t _pad61;uint8_t _pad62;uint8_t _pad63;};
struct ether_addr {uchar_t ether_addr_octet[6];};
struct ether_arp {struct arphdr ea_hdr;struct ether_addr arp_sha;uchar_t arp_spa[4];struct ether_addr arp_tha;uchar_t arp_tpa[4];};
struct ether_family {int ef_family;ushort_t ef_ethertype;struct ifqueue *(*ef_infunc)();int (*ef_outfunc)();int (*ef_netisr)();struct ether_family *ef_next;};
struct ether_hdr {uchar_t dl_nodeaddr[6];ushort_t dl_type;};
typedef struct ether_hdr ether_hdr_t;
struct ether_header {struct ether_addr ether_dhost;struct ether_addr ether_shost;ushort_t ether_type;};
typedef struct $F9FB4C2AA908D131736A9D97993FD8DC ether_init_t;
typedef struct $26B314697E7266AC176F51890C474785 ether_uninit_t;
struct eucioc {unsigned __int8 eucw[4];unsigned __int8 scrw[4];};
typedef struct eucioc eucioc_t;
typedef struct $256FEEFA99C080BE07F3A81A96D4694C eucwidth_t;
struct exception {int type;char *name;double arg1;double arg2;double retval;};
struct exception_map {unsigned int exc_care;unsigned int exc_mask;int exc_key;unsigned __int16 exc_entry;};
struct exdata {struct vnode *vp;size_t ux_tsize;size_t ux_dsize;size_t ux_bsize;size_t ux_lsize;int ux_nshlibs;__int16 ux_mach;__int16 ux_mag;off_t ux_toffset;off_t ux_doffset;off_t ux_loffset;caddr_t ux_txtorg;caddr_t ux_datorg;caddr_t ux_entloc;};
struct exec {uint32_t a_magic;uint32_t a_text;uint32_t a_data;uint32_t a_bss;uint32_t a_syms;uint32_t a_entry;uint32_t a_trsize;uint32_t a_drsize;};
struct execa {const char *fname;const char **argp;const char **envp;};
typedef struct execa execa_t;
struct execattr_s {char *name;char *policy;char *type;char *res1;char *res2;char *id;kva_t *attr;struct execattr_s *next;};
typedef struct execattr_s execattr_t;
struct execenv {caddr_t ex_brkbase;size_t ex_brksize;vnode_t *ex_vp;__int16 ex_magic;};
typedef struct execenv execenv_t;
struct execstr_s {char *name;char *policy;char *type;char *res1;char *res2;char *id;char *attr;struct execstr_s *next;};
typedef struct execstr_s execstr_t;
struct existsRecord_t {OCF_File_t file;OCF_Boolean_t status;};
struct exit_status {__int16 e_termination;__int16 e_exit;};
struct exportdata {int ex_version;char *ex_path;size_t ex_pathlen;int ex_flags;unsigned int ex_anon;int ex_seccnt;struct secinfo *ex_secinfo;char *ex_index;char *ex_log_buffer;size_t ex_log_bufferlen;char *ex_tag;size_t ex_taglen;};
struct exportfs_args {char *dname;struct exportdata *uex;};
struct exportinfo;
struct ext_attr_hdr {tag_t eah_tag;uint32_t eah_ial;uint32_t eah_aal;};
typedef struct ext_attr_hdr ext_attr_hdr_t;
typedef struct extension_signature_struct ext_signature_t;
typedef unsigned int extended[3];
struct extension_name_struct {char *extension_name;ushort_t ext_version;ext_signature_t *signature_table;};
typedef struct extension_name_struct extension_name_t;
struct extension_signature_struct {char *ext_signature;uchar_t *(*sig_handler)();};
struct extent {uint32_t lbno;uint32_t pbno;uint32_t nbno;};
struct extent_ad {uint32_t ext_len;uint32_t ext_loc;};
typedef struct extent_ad extent_ad_t;
struct extent_block {uint32_t type;int32_t chksum;uint32_t nextents;uint32_t nbytes;uint32_t nextbno;extent_t extents[1];};
typedef struct extent_block extent_block_t;
typedef struct extent extent_t;
struct extmnttab {char *mnt_special;char *mnt_mountp;char *mnt_fstype;char *mnt_mntopts;char *mnt_time;uint_t mnt_major;uint_t mnt_minor;};
struct f_audit_data {kthread_id_t fad_thread;au_id_t fad_auid;au_mask_t fad_mask;au_termid_t fad_termid;int fad_flags;uint_t fad_lpbuf;uint_t fad_pathlen;caddr_t fad_path;struct f_audit_data *next;};
typedef struct f_audit_data f_audit_data_t;
struct f_user {pid_t fu_pid;int fu_flags;uid_t fu_uid;};
typedef struct f_user f_user_t;
struct failinfo {struct vnode *vp;caddr_t fhp;void (*copyproc)(caddr_t, vnode_t *);int (*lookupproc)(vnode_t *, char *, vnode_t **, struct pathname *, int, vnode_t *, struct cred *, int);};
typedef struct failinfo failinfo_t;
struct fas_cmd {struct scsi_pkt *cmd_pkt;struct fas_cmd *cmd_forw;uchar_t *cmd_cdbp;uint32_t cmd_data_count;uint32_t cmd_cur_addr;ushort_t cmd_qfull_retries;ushort_t cmd_nwin;ushort_t cmd_cur_win;ushort_t cmd_saved_win;uint32_t cmd_saved_data_count;uint32_t cmd_saved_cur_addr;int cmd_pkt_flags;ddi_dma_handle_t cmd_dmahandle;ddi_dma_cookie_t cmd_dmacookie;uint32_t cmd_dmacount;uchar_t cmd_cdb[12];uint_t cmd_flags;struct scsi_arq_status cmd_scb;uchar_t cmd_scblen;uchar_t cmd_slot;uchar_t cmd_age;uchar_t cmd_cdblen;uint64_t cmd_pkt_private[1];uchar_t cmd_privlen;uchar_t cmd_tag[2];uchar_t cmd_actual_cdblen;};
struct fasreg {uint8_t fas_xcnt_lo;uint8_t _pad1;uint8_t _pad2;uint8_t _pad3;uint8_t fas_xcnt_mid;uint8_t _pad5;uint8_t _pad6;uint8_t _pad7;uint8_t fas_fifo_data;uint8_t _pad9;uint8_t _pad10;uint8_t _pad11;uint8_t fas_cmd;uint8_t _pad13;uint8_t _pad14;uint8_t _pad15;uint8_t fas_stat;uint8_t _pad17;uint8_t _pad18;uint8_t _pad19;uint8_t fas_intr;uint8_t _pad21;uint8_t _pad22;uint8_t _pad23;uint8_t fas_step;uint8_t _pad25;uint8_t _pad26;uint8_t _pad27;uint8_t fas_fifo_flag;uint8_t _pad29;uint8_t _pad30;uint8_t _pad31;uint8_t fas_conf;uint8_t _pad33;uint8_t _pad34;uint8_t _pad35;uint8_t fas_clock_conv;uint8_t _pad37;uint8_t _pad38;uint8_t _pad39;uint8_t fas_test;uint8_t _pad41;uint8_t _pad42;uint8_t _pad43;uint8_t fas_conf2;uint8_t _pad45;uint8_t _pad46;uint8_t _pad47;uint8_t fas_conf3;uint8_t _pad49;uint8_t _pad50;uint8_t _pad51;uint8_t _pad_reserved[4];uint8_t fas_recmd_lo;uint8_t _pad52;uint8_t _pad53;uint8_t _pad54;uint8_t fas_recmd_hi;uint8_t _pad55;uint8_t _pad56;uint8_t _pad57;};
struct fat32_boot_fsinfo {uint32_t fs_reserved1;uint32_t fs_signature;uint32_t fs_free_clusters;uint32_t fs_next_cluster;uint32_t fs_reserved2[4];};
struct fat32_bootsec {struct bootsec f_bs;uint32_t f_fatlength;uint16_t f_flags;uint8_t f_major;uint8_t f_minor;uint32_t f_rootcluster;uint16_t f_infosector;uint16_t f_backupboot;uint16_t f_reserved2[6];};
struct fattr3 {ftype3 type;mode3 mode;uint32 nlink;uid3 uid;gid3 gid;size3 size;size3 used;specdata3 rdev;uint64 fsid;fileid3 fileid;nfstime3 atime;nfstime3 mtime;nfstime3 ctime;};
enum fault_type {F_INVAL = 0x0,F_PROT = 0x1,F_SOFTLOCK = 0x2,F_SOFTUNLOCK = 0x3,};
typedef int faultcode_t;
struct fb_wid_alloc {unsigned int wa_type;int wa_index;unsigned int wa_count;};
struct fb_wid_dbl_info {struct fb_wid_alloc dbl_wid;char dbl_fore;char dbl_back;char dbl_read_state;char dbl_write_state;};
struct fb_wid_item {unsigned int wi_type;int wi_index;unsigned int wi_attrs;unsigned int wi_values[32];};
struct fb_wid_list {unsigned int wl_flags;unsigned int wl_count;struct fb_wid_item *wl_list;};
struct fbcmap {int index;int count;unsigned __int8 *red;unsigned __int8 *green;unsigned __int8 *blue;};
struct fbcmap_i {unsigned int flags;int id;int index;int count;unsigned __int8 *red;unsigned __int8 *green;unsigned __int8 *blue;};
struct fbcurpos {__int16 x;__int16 y;};
struct fbcursor {__int16 set;__int16 enable;struct fbcurpos pos;struct fbcurpos hot;struct fbcmap cmap;struct fbcurpos size;char *image;char *mask;};
struct fbdblinfo {unsigned int dbl_devstate;unsigned int dbl_read;unsigned int dbl_write;unsigned int dbl_display;int dbl_depth;char dbl_wid;};
struct fbgattr {int real_type;int owner;struct fbtype fbtype;struct fbsattr sattr;int emu_types[4];};
struct fbinfo {int fb_physaddr;int fb_hwwidth;int fb_hwheight;int fb_addrdelta;unsigned __int8 *fb_ropaddr;int fb_unit;};
struct fbsattr {int flags;int emu_type;int dev_specific[8];};
struct fbtype {int fb_type;int fb_height;int fb_width;int fb_depth;int fb_cmsize;int fb_size;};
struct fbuf {caddr_t fb_addr;uint_t fb_count;};
struct fc_dataseg {uint32_t fc_base;uint32_t fc_count;};
typedef struct fc_dataseg fc_dataseg_t;
typedef int fc_devdata_t;
typedef struct FC2_FRAME_HDR fc_frame_header_t;
typedef struct hard_addr fc_hardaddr_t;
typedef enum $39FEE29CB19F6AB95D833477CB3CFB16 fc_ioclass_t;
typedef enum $29D01D9311FDD83E67B17289D334DF0B fc_iotype_t;
struct fc_packet {void *fc_pkt_cookie;void (*fc_pkt_comp)(struct fc_packet *);void *fc_pkt_private;int32_t fc_pkt_flags;int32_t fc_pkt_timeout;fc_ioclass_t fc_pkt_io_class;fc_devdata_t fc_pkt_io_devdata;fc_dataseg_t *fc_pkt_cmd;fc_dataseg_t *fc_pkt_rsp;fc_dataseg_t **fc_pkt_datap;unsigned int fc_pkt_status;int fc_pkt_statistics;fc_frame_header_t *fc_frame_cmd;fc_frame_header_t *fc_frame_resp;struct fc_packet *fc_pkt_next;struct fc_packet *fc_pkt_prev;};
typedef struct fc_packet fc_packet_t;
typedef struct port_id fc_portid_t;
typedef struct port_type fc_porttype_t;
struct fc_pstats {uint_t port;uint_t requests;uint_t sol_resps;uint_t unsol_resps;uint_t lips;uint_t els_sent;uint_t els_rcvd;uint_t abts;uint_t abts_ok;uint_t offlines;uint_t onlines;uint_t online_loops;uint_t resp_status[256];};
enum fc_reset_action {FC_RESET_RETURN_NONE = 0x0,FC_RESET_RETURN_ALL = 0x1,FC_RESET_RETURN_OUTSTANDING = 0x2,};
typedef enum fc_reset_action fc_reset_action_t;
typedef enum $B41FB3A55F358278F5C27327EE531EB5 fc_sleep_t;
typedef void *fc_statec_cookie_t;
typedef enum $CDEA5F4E81121A9E1DEE9AC855E20971 fc_statec_t;
struct fc_transport {void *fc_cookie;ddi_dma_lim_t *fc_dmalimp;ddi_dma_attr_t *fc_dma_attrp;ddi_iblock_cookie_t *fc_iblock;kmutex_t fc_mtx;kcondvar_t fc_cv;int (*fc_transport)(struct fc_packet *fc, fc_sleep_t sleep);int (*fc_reset)(struct fc_packet *fc);fc_packet_t *(*fc_pkt_alloc)(void *cookie, fc_sleep_t sleep);void (*fc_pkt_free)(void *cookie, struct fc_packet *pkt);fc_statec_cookie_t (*fc_statec_register)(void *cookie, void (*callback)(void *, fc_statec_t), void *arg);void (*fc_statec_unregister)(void *cookie, fc_statec_cookie_t statec_cookie);void (*fc_interface_poll)(void *cookie);fc_uc_cookie_t (*fc_uc_register)(void *cookie, fc_devdata_t devdata, void (*callback)(void *), void *arg);void (*fc_uc_unregister)(void *cookie, fc_uc_cookie_t uc_cookie);int (*fc_uc_get_pkt)(void *cookie, struct fc_packet *pkt);};
typedef struct fc_transport fc_transport_t;
typedef void *fc_uc_cookie_t;
struct fclb {uchar_t outbound_frame[24];uchar_t inbound_frame[24];};
struct fcp_cmd {fcp_ent_addr_t fcp_ent_addr;fcp_cntl_t fcp_cntl;uchar_t fcp_cdb[16];int fcp_data_len;};
typedef struct fcp_cmd fcp_cmd_t;
struct fcp_cntl {uchar_t cntl_reserved_0;unsigned __int8 cntl_reserved_1 : 5;unsigned __int8 cntl_qtype : 3;unsigned __int8 cntl_kill_tsk : 1;unsigned __int8 cntl_clr_aca : 1;unsigned __int8 cntl_reset : 1;unsigned __int8 cntl_reserved_2 : 2;unsigned __int8 cntl_clr_tsk : 1;unsigned __int8 cntl_abort_tsk : 1;unsigned __int8 cntl_reserved_3 : 1;unsigned __int8 cntl_reserved_4 : 6;unsigned __int8 cntl_read_data : 1;unsigned __int8 cntl_write_data : 1;};
typedef struct fcp_cntl fcp_cntl_t;
struct fcp_ent_addr {ushort_t ent_addr_0;ushort_t ent_addr_1;ushort_t ent_addr_2;ushort_t ent_addr_3;};
typedef struct fcp_ent_addr fcp_ent_addr_t;
struct fcp_prli {uchar_t type;uchar_t resvd1;unsigned __int32 orig_process_assoc_valid : 1;unsigned __int32 resp_process_assoc_valid : 1;unsigned __int32 establish_image_pair : 1;unsigned __int32 resvd2 : 13;uint_t orig_process_associator;uint_t resp_process_associator;unsigned __int32 resvd3 : 25;unsigned __int32 data_overlay_allowed : 1;unsigned __int32 initiator_fn : 1;unsigned __int32 target_fn : 1;unsigned __int32 cmd_data_mixed : 1;unsigned __int32 data_resp_mixed : 1;unsigned __int32 read_xfer_rdy_disabled : 1;unsigned __int32 write_xfer_rdy_disabled : 1;};
struct fcp_prli_acc {uchar_t type;uchar_t resvd1;unsigned __int32 orig_process_assoc_valid : 1;unsigned __int32 resp_process_assoc_valid : 1;unsigned __int32 image_pair_establsihed : 1;unsigned __int32 resvd2 : 1;unsigned __int32 accept_response_code : 4;unsigned __int32 resvd3 : 8;uint_t orig_process_associator;uint_t resp_process_associator;unsigned __int32 resvd4 : 26;unsigned __int32 initiator_fn : 1;unsigned __int32 target_fn : 1;unsigned __int32 cmd_data_mixed : 1;unsigned __int32 data_resp_mixed : 1;unsigned __int32 read_xfer_rdy_disabled : 1;unsigned __int32 write_xfer_rdy_disabled : 1;};
struct fcp_rsp {uint_t reserved_0;uint_t reserved_1;union fcp_rsp::$7DE1CF9D6261DB3834188948652834A1 fcp_u;uint_t fcp_resid;uint_t fcp_sense_len;uint_t fcp_response_len;};
union fcp_rsp::$7DE1CF9D6261DB3834188948652834A1 {fcp_status_t fcp_status;uint_t i_fcp_status;};
struct fcp_rsp_info {uchar_t resvd1;uchar_t resvd2;uchar_t resvd3;uchar_t rsp_code;uchar_t resvd4;uchar_t resvd5;uchar_t resvd6;uchar_t resvd7;};
typedef struct fcp_rsp fcp_rsp_t;
struct fcp_scsi_bus_err {uchar_t rsp_info_type;uchar_t resv;ushort_t isp_status;ushort_t isp_state_flags;ushort_t isp_stat_flags;};
typedef struct fcp_scsi_bus_err fcp_scsi_bus_err_t;
struct fcp_status {ushort_t reserved_0;unsigned __int8 reserved_1 : 4;unsigned __int8 resid_under : 1;unsigned __int8 resid_over : 1;unsigned __int8 sense_len_set : 1;unsigned __int8 rsp_len_set : 1;uchar_t scsi_status;};
typedef struct fcp_status fcp_status_t;
struct fcp_xfer_rdy {ulong_t fcp_seq_offset;ulong_t fcp_burst_len;ulong_t reserved;};
typedef struct fcp_xfer_rdy fcp_xfer_rdy_t;
struct fd_args {nis_name dir_name;nis_name requester;};
struct fd_char {uchar_t fdc_medium;int fdc_transfer_rate;int fdc_ncyl;int fdc_nhead;int fdc_sec_size;int fdc_secptrack;int fdc_steps;};
struct fd_cmd {ushort_t fdc_cmd;int fdc_flags;daddr_t fdc_blkno;int fdc_secnt;caddr_t fdc_bufaddr;uint_t fdc_buflen;};
struct fd_drive {int fdd_ejectable;int fdd_maxsearch;int fdd_writeprecomp;int fdd_writereduce;int fdd_stepwidth;int fdd_steprate;int fdd_headsettle;int fdd_headload;int fdd_headunload;int fdd_motoron;int fdd_motoroff;int fdd_precomplevel;int fdd_pins;int fdd_flags;};
typedef int fd_mask;
struct fd_raw {char fdr_cmd[10];__int16 fdr_cnum;char fdr_result[10];ushort_t fdr_nbytes;char *fdr_addr;};
struct fd_result {nis_error status;nis_name source;struct fd_result::$E188DDB4946479B1B04909415F6D7A2E dir_data;struct fd_result::$864956CB4DA79F92CA310E20E4E9B271 signature;};
struct fd_result::$864956CB4DA79F92CA310E20E4E9B271 {u_int signature_len;char *signature_val;};
struct fd_result::$E188DDB4946479B1B04909415F6D7A2E {u_int dir_data_len;char *dir_data_val;};
struct fd_search {int fds_numentries;struct fd_char *fds_search;};
struct fd_set {int fds_bits[32];};
struct fd_state {int fds_bsec;int fds_strack;int fds_step;int fds_rate;int fds_error;};
struct fdb_holes {struct fdb_holes *next_hole;u_offset_t off;size_t len;};
typedef struct fdb_holes fdb_holes_t;
typedef void (*fdb_iodone_t)(struct fdbuffer *fdbuf, void *kargp, buf_t *bp);
typedef enum $D95391997311E3A4E8F102D727D6CEF7 fdb_type_t;
struct fdbuffer {fdb_type_t fd_type;int fd_state;size_t fd_len;size_t fd_iocount;int fd_iodispatch;int fd_err;ssize_t fd_resid;buf_t *fd_parentbp;union fdbuffer::$3B787F33FCB8F87ECFB5EACDDE5BCC6D fd_un;fdb_holes_t *fd_holes;page_t **fd_shadow;struct proc *fd_procp;fdb_iodone_t fd_iofunc;void *fd_iargp;kmutex_t fd_mutex;};
union fdbuffer::$3B787F33FCB8F87ECFB5EACDDE5BCC6D {page_t *pages;caddr_t addr;};
typedef struct fdbuffer fdbuffer_t;
struct fdc_dma_reg {uint_t fdc_dcsr;uint_t fdc_dacr;uint_t fdc_dbcr;};
union fdcreg {volatile struct fdcreg::$C3A2651014D6C78917994F3FE5B85EFD fdc_82072_reg;volatile struct fdcreg::fdc_82077_reg fdc_82077_reg;};
struct fdcreg::$C3A2651014D6C78917994F3FE5B85EFD {uchar_t fdc_control;uchar_t fdc_fifo;};
struct fdcreg::fdc_82077_reg {uchar_t fdc_filler1[2];uchar_t fdc_dor;uchar_t fdc_filler2;uchar_t fdc_control;uchar_t fdc_fifo;uchar_t fdc_filler3;uchar_t fdc_dir;};
typedef int fds_mask;
typedef fhandle_t fhandle;
typedef struct svcfh fhandle_t;
struct fhsize {fsid_t f1;ushort_t f2;char f3[4];ushort_t f4;char f5[4];};
struct fid {union fid::$51BF437B1B3635FB7766BD36FE5A8A71 un;};
typedef fid_t fid32_t;
union fid::$51BF437B1B3635FB7766BD36FE5A8A71 {int fid_pad;struct fid::$51BF437B1B3635FB7766BD36FE5A8A71::$D6C94933DFB77C745B6D4069BF1BE876 _fid;};
struct fid::$51BF437B1B3635FB7766BD36FE5A8A71::$D6C94933DFB77C745B6D4069BF1BE876 {ushort_t len;char data[64];};
typedef struct fid fid_t;
struct fieldnode {int status;int rows;int cols;int frow;int fcol;int drows;int dcols;int maxgrow;int nrow;int nbuf;int just;int page;int index;int pad;chtype fore;chtype back;OPTIONS opts;struct fieldnode *snext;struct fieldnode *sprev;struct fieldnode *link;struct formnode *form;FIELDTYPE *type;char *arg;char *buf;char *usrptr;};
struct fifo_reg {union fifo_reg::$2C4CA6FC96781476665F04CD0317A0CB fr;uint8_t config_b;uint8_t ecr;};
union fifo_reg::$2C4CA6FC96781476665F04CD0317A0CB {uint8_t cfifo;uint8_t dfifo;uint8_t tfifo;uint8_t config_a;};
struct fifodata {fifolock_t fifo_lock;fifonode_t fifo_fnode[2];};
typedef struct fifodata fifodata_t;
struct fifolock {kmutex_t flk_lock;int flk_ref;__int16 flk_ocsync;kcondvar_t flk_wait_cv;uint_t flk_fill[4];};
typedef struct fifolock fifolock_t;
struct fifonode {struct vnode fn_vnode;struct vnode *fn_realvp;ino_t fn_ino;fifonode_t *fn_dest;struct msgb *fn_mp;struct msgb *fn_tail;uint_t fn_count;fifolock_t *fn_lock;kcondvar_t fn_wait_cv;ushort_t fn_fill1;ushort_t fn_wcnt;ushort_t fn_rcnt;ushort_t fn_open;ushort_t fn_wsynccnt;ushort_t fn_rsynccnt;ushort_t fn_fill;time_t fn_atime;time_t fn_mtime;time_t fn_ctime;fifonode_t *fn_nextp;fifonode_t *fn_backp;int fn_insync;uint_t fn_flag;};
typedef struct fifonode fifonode_t;
struct file {kmutex_t f_tlock;ushort_t f_flag;ushort_t f_pad;struct vnode *f_vnode;offset_t f_offset;struct cred *f_cred;caddr_t f_audit_data;int f_count;};
struct file_entry {tag_t fe_tag;icb_tag_t fe_icb_tag;uint32_t fe_uid;uint32_t fe_gid;uint32_t fe_perms;uint16_t fe_lcount;uint8_t fe_rec_for;uint8_t fe_rec_dis;uint32_t fe_rec_len;uint64_t fe_info_len;uint64_t fe_lbr;tstamp_t fe_acc_time;tstamp_t fe_mod_time;tstamp_t fe_attr_time;uint32_t fe_ckpoint;long_ad_t fe_ea_icb;regid_t fe_impl_id;uint64_t fe_uniq_id;uint32_t fe_len_ear;uint32_t fe_len_adesc;char fe_spec[336];};
typedef struct file_entry file_entry_t;
struct file_id {tag_t fid_tag;uint16_t fid_ver;uint8_t fid_flags;uint8_t fid_idlen;long_ad_t fid_icb;uint16_t fid_iulen;uint8_t fid_spec[2];};
typedef struct file_id file_id_t;
struct file_set_desc {tag_t fsd_tag;tstamp_t fsd_time;uint16_t fsd_ilevel;uint16_t fsd_mi_level;uint32_t fsd_cs_list;uint32_t fsd_mcs_list;uint32_t fsd_fs_no;uint32_t fsd_fsd_no;charspec_t fsd_lvidcs;char fsd_lvid[128];charspec_t fsd_fscs;char fsd_fsi[32];char fsd_cfi[32];char fsd_afi[32];long_ad_t fsd_root_icb;regid_t fsd_did;long_ad_t fsd_next;uint8_t fsd_res[48];};
typedef struct file_set_desc file_set_desc_t;
typedef struct file file_t;
struct filegrp {uint_t fg_flags;int fg_count;cfs_cid_t fg_id;struct fscache *fg_fscp;struct cnode *fg_cnodelist;struct filegrp *fg_next;struct vnode *fg_dirvp;struct vnode *fg_attrvp;struct attrcache_header *fg_header;struct attrcache_index *fg_offsets;uchar_t *fg_alloclist;int fg_headersize;int fg_filesize;kmutex_t fg_mutex;kmutex_t fg_cnodelock;};
typedef struct filegrp filegrp_t;
typedef uint64 fileid3;
typedef char *filename3;
struct filock {kcondvar_t cv;struct flock set;struct filock::$667AC850CFE8393E0756DB4723116C22 stat;struct filock *prev;struct filock *next;};
struct filock::$667AC850CFE8393E0756DB4723116C22 {int granted_flag;struct filock *blk;struct attacher *blocking_list;struct attacher *my_attacher;};
typedef struct filock filock_t;
struct fioio {ino_t fio_ino;int fio_gen;int fio_fd;};
struct fiolog {uint_t nbytes_requested;uint_t nbytes_actual;int error;};
typedef struct fiolog fiolog_t;
struct fiotune {int maxcontig;int rotdelay;int maxbpg;int minfree;int optim;};
struct firm_event {ushort_t id;uchar_t pair_type;uchar_t pair;int value;struct timeval time;};
struct fk_label {uchar_t fkl_type;uchar_t fkl_magich;uchar_t fkl_magicl;uchar_t filler;};
typedef struct $9CAE931C1CBD273987054BC4D502AAC2 flk_callback_t;
typedef enum $A6580FDE48616C23ADC769BAB4D07B11 flk_lockmgr_status_t;
typedef enum $FFCF33584F0C155BE85F0F30A00BD3E4 flk_nlm_status_t;
struct flock {__int16 l_type;__int16 l_whence;off_t l_start;off_t l_len;int l_sysid;pid_t l_pid;int l_pad[4];};
struct flock64 {__int16 l_type;__int16 l_whence;off64_t l_start;off64_t l_len;int l_sysid;pid_t l_pid;int l_pad[4];};
typedef struct flock64 flock64_t;
typedef struct flock flock_t;
struct fltaccent_sequence_t {unsigned __int16 fa_entry;unsigned __int8 ascii;unsigned __int8 iso;};
typedef struct $85563A71CF7457DF5AD2FDE8FB997EAF fltset_t;
struct flushmeter {unsigned int f_ctx;unsigned int f_segment;unsigned int f_page;unsigned int f_partial;unsigned int f_usr;unsigned int f_region;};
struct fmodsw {char f_name[9];struct streamtab *f_str;int f_flag;};
struct fmodsw_impl {char f_name[9];struct streamtab *f_str;int f_flag;kmutex_t *f_lock;uint_t f_count;};
typedef struct fmodsw_impl fmodsw_impl_t;
typedef struct fmodsw fmodsw_t;
struct formnode {int status;int rows;int cols;int currow;int curcol;int toprow;int begincol;int maxfield;int maxpage;int curpage;OPTIONS opts;WINDOW *win;WINDOW *sub;WINDOW *w;FIELD **field;FIELD *current;_PAGE *page;char *usrptr;PTF_void forminit;PTF_void formterm;PTF_void fieldinit;PTF_void fieldterm;};
enum fp_class_type {fp_zero = 0x0,fp_subnormal = 0x1,fp_normal = 0x2,fp_infinity = 0x3,fp_quiet = 0x4,fp_signaling = 0x5,};
enum fp_direction_type {fp_nearest = 0x0,fp_tozero = 0x1,fp_positive = 0x2,fp_negative = 0x3,};
typedef unsigned int fp_exception_field_type;
enum fp_exception_type {fp_inexact = 0x0,fp_division = 0x1,fp_underflow = 0x2,fp_overflow = 0x3,fp_invalid = 0x4,};
enum fp_precision_type {fp_extended = 0x0,fp_single = 0x1,fp_double = 0x2,fp_precision_3 = 0x3,};
enum fp_rnd {FP_RN = 0x0,FP_RZ = 0x1,FP_RP = 0x2,FP_RM = 0x3,};
enum fp_trap_enable_type {fp_trap_inexact = 0x0,fp_trap_division = 0x1,fp_trap_underflow = 0x2,fp_trap_overflow = 0x3,fp_trap_invalid = 0x4,};
enum fpclass_t {FP_SNAN = 0x0,FP_QNAN = 0x1,FP_NINF = 0x2,FP_PINF = 0x3,FP_NDENORM = 0x4,FP_PDENORM = 0x5,FP_NZERO = 0x6,FP_PZERO = 0x7,FP_NNORM = 0x8,FP_PNORM = 0x9,};
struct fpollinfo {struct _kthread *fp_thread;struct fpollinfo *fp_next;};
typedef struct fpollinfo fpollinfo_t;
typedef __longlong_t fpos64_t;
typedef int fpos_t;
struct fpq {unsigned int *fpq_addr;unsigned int fpq_instr;};
typedef struct fpu fpregset_t;
struct fpu {union fpu::$5FAD1835C40B8F1B9C5FF4A2CD2D32A1 fpu_fr;struct fq *fpu_q;uint32_t fpu_fsr;uint8_t fpu_qcnt;uint8_t fpu_q_entrysize;uint8_t fpu_en;};
union fpu::$5FAD1835C40B8F1B9C5FF4A2CD2D32A1 {uint32_t fpu_regs[32];double fpu_dregs[16];};
struct fq {union fq::$3D3D4FC1770C1E48B1A2982F7A6AC98A FQu;};
union fq::$3D3D4FC1770C1E48B1A2982F7A6AC98A {double whole;struct fpq fpq;};
struct frame {int fr_local[8];int fr_arg[6];struct frame *fr_savfp;int fr_savpc;char *fr_stret;int fr_argd[6];int fr_argx[1];};
struct free_rtn {void (*free_func)();caddr_t free_arg;};
typedef struct free_rtn frtn_t;
struct fs {uint32_t fs_link;uint32_t fs_rlink;daddr32_t fs_sblkno;daddr32_t fs_cblkno;daddr32_t fs_iblkno;daddr32_t fs_dblkno;int32_t fs_cgoffset;int32_t fs_cgmask;time32_t fs_time;int32_t fs_size;int32_t fs_dsize;int32_t fs_ncg;int32_t fs_bsize;int32_t fs_fsize;int32_t fs_frag;int32_t fs_minfree;int32_t fs_rotdelay;int32_t fs_rps;int32_t fs_bmask;int32_t fs_fmask;int32_t fs_bshift;int32_t fs_fshift;int32_t fs_maxcontig;int32_t fs_maxbpg;int32_t fs_fragshift;int32_t fs_fsbtodb;int32_t fs_sbsize;int32_t fs_csmask;int32_t fs_csshift;int32_t fs_nindir;int32_t fs_inopb;int32_t fs_nspf;int32_t fs_optim;int32_t fs_npsect;int32_t fs_interleave;int32_t fs_trackskew;int32_t fs_id[2];daddr32_t fs_csaddr;int32_t fs_cssize;int32_t fs_cgsize;int32_t fs_ntrak;int32_t fs_nsect;int32_t fs_spc;int32_t fs_ncyl;int32_t fs_cpg;int32_t fs_ipg;int32_t fs_fpg;struct csum fs_cstotal;char fs_fmod;char fs_clean;char fs_ronly;char fs_flags;char fs_fsmnt[512];int32_t fs_cgrotor;union fs::$9F46D7DD5950A1025F84ACF2764AD23B fs_u;int32_t fs_cpc;__int16 fs_opostbl[16][8];int32_t fs_sparecon[55];int32_t fs_state;quad_t fs_qbmask;quad_t fs_qfmask;int32_t fs_postblformat;int32_t fs_nrpos;int32_t fs_postbloff;int32_t fs_rotbloff;int32_t fs_magic;uchar_t fs_space[1];};
union fs::$9F46D7DD5950A1025F84ACF2764AD23B {uint32_t fs_csp_pad[32];struct csum *fs_csp;};
struct fs_identity_t {dev_t fs_dev;char *fs_name;};
typedef uint32_t fsblkcnt32_t;
typedef u_longlong_t fsblkcnt64_t;
typedef ulong_t fsblkcnt_t;
struct fscache {ino64_t fs_cfsid;int fs_flags;struct vnode *fs_fscdirvp;struct vnode *fs_fsattrdir;struct vnode *fs_infovp;struct cachefscache *fs_cache;cachefs_fsinfo_t fs_info;struct vfs *fs_cfsvfsp;struct vfs *fs_backvfsp;struct vnode *fs_rootvp;offset_t fs_offmax;int fs_ref;int fs_cnodecnt;int fs_consttype;struct cachefsops *fs_cfsops;uint_t fs_acregmin;uint_t fs_acregmax;uint_t fs_acdirmin;uint_t fs_acdirmax;struct fscache *fs_next;struct cachefs_workq fs_workq;kmutex_t fs_fslock;struct vnode *fs_dlogfile;off_t fs_dlogoff;uint_t fs_dlogseq;struct vnode *fs_dmapfile;off_t fs_dmapoff;off_t fs_dmapsize;kmutex_t fs_dlock;kmutex_t fs_idlelock;int fs_idlecnt;int fs_idleclean;struct cnode *fs_idlefront;kmutex_t fs_cdlock;kcondvar_t fs_cdwaitcv;enum cachefs_connected fs_cdconnected;int fs_cdtransition;pid_t fs_cddaemonid;int fs_cdrefcnt;struct cnode *fs_idleback;cachefs_inum_trans_t *fs_inum_trans;int fs_inum_size;struct filegrp *fs_filegrp[64];timestruc_t fs_cod_time;int fs_kstat_id;cachefs_stats_t fs_stats;char *fs_mntpt;char *fs_hostname;char *fs_backfsname;};
typedef struct fscache fscache_t;
typedef uint32_t fsfilcnt32_t;
typedef u_longlong_t fsfilcnt64_t;
typedef ulong_t fsfilcnt_t;
enum fsh4_access {FSA_NONE = 0x0,FSA_R = 0x1,FSA_W = 0x2,FSA_RW = 0x3,};
enum fsh4_mode {FSM_DN = 0x0,FSM_DR = 0x1,FSM_DW = 0x2,FSM_DRW = 0x3,};
enum fsh_access {fsa_NONE = 0x0,fsa_R = 0x1,fsa_W = 0x2,fsa_RW = 0x3,};
enum fsh_mode {fsm_DN = 0x0,fsm_DR = 0x1,fsm_DW = 0x2,fsm_DRW = 0x3,};
struct fshare {__int16 f_access;__int16 f_deny;int f_id;};
typedef struct fshare fshare_t;
typedef struct $06CAB5296C39900A9CE51DBF4F560AD6 fsid_t;
struct ftblk {struct ftblk *nxt;int ix;struct ftevnt ev[9];};
typedef struct ftblk ftblk_t;
struct ftevents;
typedef struct ftevents ftevents_t;
struct ftevnt {ts_t ts;char *mid;ushort_t evnt;ushort_t data;};
typedef struct ftevnt ftevnt_t;
struct ftflw {struct ftflw *nxt;int hash;int count;struct ftflwe ev[1];};
typedef struct ftflw ftflw_t;
struct ftflwe {char *mid;ushort_t evnt;ushort_t data;tdelta_t td;};
typedef struct ftflwe ftflwe_t;
struct fthdr {struct ftblk *tail;unsigned int hash;void *thread;int cpu_seqid;struct ftblk first;};
typedef struct fthdr fthdr_t;
struct ftimes_ear {uint32_t ft_atype;uint8_t ft_astype;uint8_t ft_res[3];uint32_t ft_attr_len;uint32_t ft_data_len;uint32_t ft_exist;uint8_t ft_ft[4];};
struct ftrace_data {int ftd_state;kmutex_t ftd_mutex;struct ftrace_record *ftd_cur;struct ftrace_record *ftd_first;struct ftrace_record *ftd_last;};
typedef struct ftrace_data ftrace_data_t;
struct ftrace_record {char *ftr_event;kthread_t *ftr_thread;uint64_t ftr_tick;caddr_t ftr_caller;ulong_t ftr_data1;ulong_t ftr_data2;ulong_t ftr_data3;};
typedef struct ftrace_record ftrace_record_t;
enum ftype3 {NF3REG = 0x1,NF3DIR = 0x2,NF3BLK = 0x3,NF3CHR = 0x4,NF3LNK = 0x5,NF3SOCK = 0x6,NF3FIFO = 0x7,};
struct futmp {char ut_user[8];char ut_id[4];char ut_line[12];int16_t ut_pid;int16_t ut_type;struct futmp::$11610CE8875B9446FC755A3DED782E56 ut_exit;time32_t ut_time;};
struct futmp::$11610CE8875B9446FC755A3DED782E56 {int16_t e_termination;int16_t e_exit;};
struct futmpx {char ut_user[32];char ut_id[4];char ut_line[32];pid32_t ut_pid;int16_t ut_type;struct futmpx::$11610CE8875B9446FC755A3DED782E56 ut_exit;struct timeval32 ut_tv;int32_t ut_session;int32_t pad[5];int16_t ut_syslen;char ut_host[257];};
struct futmpx::$11610CE8875B9446FC755A3DED782E56 {int16_t e_termination;int16_t e_exit;};
struct generateKey_t {OCF_KEYREF_t privateDesitnation;OCF_KEYREF_t publicDesitnation;int32_t strength;OCF_ALGO_t algorithm;};
struct getFileInfo_t {OCF_File_t file;OCF_FileID_t fileID;int32_t fileLength;int32_t recordSize;OCF_Any_t fileHeader;int32_t fileType;};
struct getRoot_t {OCF_File_t path;};
struct getUserInfo_t {int8_t *type;int8_t *userName;};
struct getUserPasswordInfo_t {int8_t *type;int8_t *password;};
struct getquota_args {char *gqa_pathp;int32_t gqa_uid;};
struct getquota_rslt {gqr_status status;union getquota_rslt::$93D720EECC4BDA120269F9F7BB40A95B getquota_rslt_u;};
union getquota_rslt::$93D720EECC4BDA120269F9F7BB40A95B {rquota gqr_rquota;};
typedef uint32 gid3;
typedef int32_t gid32_t;
typedef uid_t gid_t;
struct glob_t {size_t gl_pathc;char **gl_pathv;size_t gl_offs;char **gl_pathp;int gl_pathn;};
enum gqr_status {Q_OK = 0x1,Q_NOQUOTA = 0x2,Q_EPERM = 0x3,};
struct grant_lock {struct filock *grant_lock_list[52];struct grant_lock *next;};
typedef struct grant_lock grant_lock_t;
struct graph {kmutex_t gp_mutex;struct lock_descriptor active_locks;struct lock_descriptor sleeping_locks;int index;int mark;flk_lockmgr_status_t lockmgr_status;};
typedef struct graph graph_t;
typedef int greg_t;
typedef greg_t gregset_t[19];
struct group {char *gr_name;char *gr_passwd;gid_t gr_gid;char **gr_mem;};
struct group_obj {uint_t gr_flags;struct group_obj::$6B1AF3D1F6DE7092D80225088D6E3A34 gr_members;};
struct group_obj::$6B1AF3D1F6DE7092D80225088D6E3A34 {u_int gr_members_len;nis_name *gr_members_val;};
typedef struct gss_OID_desc_struct *gss_OID;
typedef struct gss_OID_desc_struct gss_OID_desc;
struct gss_OID_desc_struct {OM_uint32 length;void *elements;};
typedef struct gss_OID_set_desc_struct *gss_OID_set;
typedef struct gss_OID_set_desc_struct gss_OID_set_desc;
struct gss_OID_set_desc_struct {size_t count;gss_OID elements;};
typedef struct gss_buffer_desc_struct gss_buffer_desc;
struct gss_buffer_desc_struct {size_t length;void *value;};
typedef struct gss_buffer_desc_struct *gss_buffer_t;
struct gss_channel_bindings_struct {OM_uint32 initiator_addrtype;gss_buffer_desc initiator_address;OM_uint32 acceptor_addrtype;gss_buffer_desc acceptor_address;gss_buffer_desc application_data;};
typedef struct gss_channel_bindings_struct *gss_channel_bindings_t;
struct gss_clnt_data {rpc_gss_OID_desc mechanism;rpc_gss_service_t service;char uname[64];char inst[64];char realm[64];uint_t qop;};
typedef struct gss_clnt_data gss_clntdata_t;
typedef void *gss_cred_id_t;
typedef int gss_cred_usage_t;
typedef void *gss_ctx_id_t;
typedef void *gss_name_t;
typedef OM_uint32 gss_qop_t;
typedef unsigned int gss_uint32;
struct gwindows {int wbcnt;greg_t *spbuf[31];struct rwindow wbuf[31];};
typedef struct gwindows gwindows_t;
enum handshake_t {BPP_NO_HS = 0x1,BPP_ACK_HS = 0x2,BPP_BUSY_HS = 0x3,BPP_ACK_BUSY_HS = 0x4,BPP_XSCAN_HS = 0x5,BPP_HSCAN_HS = 0x6,BPP_CLEAR_MEM = 0x7,BPP_SET_MEM = 0x8,BPP_VPRINT_HS = 0x9,BPP_VPLOT_HS = 0xA,};
struct hard_addr {unsigned __int32 rsvd : 8;unsigned __int32 hard_addr : 24;};
struct hat;
struct hbuf {int b_flags;struct buf *b_forw;struct buf *b_back;struct buf *av_forw;struct buf *av_back;int b_length;kmutex_t b_lock;};
struct hdk_badmap {caddr_t hdkb_bufaddr;};
struct hdk_cmd {ushort_t hdkc_cmd;int hdkc_flags;daddr_t hdkc_blkno;int hdkc_secnt;caddr_t hdkc_bufaddr;uint_t hdkc_buflen;};
struct hdk_diag {ushort_t hdkd_errcmd;daddr_t hdkd_errsect;uchar_t hdkd_errno;uchar_t hdkd_severe;};
struct hdk_log {daddr_t hdkl_block;ulong_t hdkl_count;__int16 hdkl_type;__int16 hdkl_err1;__int16 hdkl_err2;};
struct hdk_loghdr {int hdkl_entries;int hdkl_max_size;caddr_t hdkl_logbfr;};
struct hdk_type {ushort_t hdkt_hsect;ushort_t hdkt_promrev;uchar_t hdkt_drtype;uchar_t hdkt_drstat;};
struct hdr {char *lpc;char *hpc;size_t nfns;};
struct hdr_cpio {__int16 h_magic;__int16 h_dev;ushort_t h_ino;ushort_t h_mode;ushort_t h_uid;ushort_t h_gid;__int16 h_nlink;__int16 h_rdev;__int16 h_mtime[2];__int16 h_namesize;__int16 h_filesize[2];char h_name[256];};
struct hid_req_struct {uint16_t hid_req_version_no;uint16_t hid_req_wValue;uint16_t hid_req_wLength;mblk_t *hid_req_data;};
typedef struct hid_req_struct hid_req_t;
struct hme_bmac {uint_t xifc;uint_t pad1[129];uint_t txrst;uint_t txcfg;uint_t ipg1;uint_t ipg2;uint_t alimit;uint_t slot;uint_t palen;uint_t papat;uint_t txsfd;uint_t jam;uint_t txmax;uint_t txmin;uint_t parg;uint_t dcnt;uint_t nccnt;uint_t fccnt;uint_t excnt;uint_t ltcnt;uint_t rseed;uint_t txsm;uint_t pad2[44];uint_t rxrst;uint_t rxcfg;uint_t rxmax;uint_t rxmin;uint_t madd2;uint_t madd1;uint_t madd0;uint_t frcnt;uint_t lecnt;uint_t aecnt;uint_t fecnt;uint_t rxsm;uint_t rxcv;uchar_t pad3[4];uint_t hash3;uint_t hash2;uint_t hash1;uint_t hash0;uint_t afr2;uint_t afr1;uint_t afr0;uint_t afmr;};
struct hme_erx {uint_t config;uint_t rxring;uint_t rxbuf_ptr;uint_t rxfifo_wr_ptr;uint_t rxfifo_sdwr_ptr;uint_t rxfifo_rd_ptr;uint_t rxfifo_pkt_cnt;uint_t state_mach;};
struct hme_etx {uint_t txpend;uint_t config;uint_t txring;uint_t txbuf_base;uint_t txbuf_disp;uint_t txfifo_wr_ptr;uint_t txfifo_sdwr_ptr;uint_t txfifo_rd_ptr;uint_t txfifo_sdrd_ptr;uint_t txfifo_pkt_cnt;uint_t state_mach;uint_t txring_size;uint_t txbuf_ptr;};
struct hme_global {uint_t reset;uint_t config;uint_t reserved[62];uint_t status;uint_t intmask;};
typedef struct $4F78B3A32EAF514EACC363DCB345C490 hme_ioc_cmd_t;
typedef struct $066FE788D2AC1D75EE490E561209D556 hme_ioc_hdr_t;
struct hme_mif {uint_t mif_bbclk;uint_t mif_bbdata;uint_t mif_bbopenb;uint_t mif_frame;uint_t mif_cfg;uint_t mif_imask;uint_t mif_bsts;uint_t mif_fsm;};
struct hme_rmd {uint_t rmd_flags;uint_t rmd_addr;};
struct hme_rxfifo_aperture {uint_t rxfifo_loapert[512];uint_t rxfifo_hiapert[512];};
struct hme_tmd {uint_t tmd_flags;uint_t tmd_addr;};
struct hme_txfifo_aperture {uint_t txfifo_loapert[512];uint_t txfifo_hiapert[512];};
struct hostent {char *h_name;char **h_aliases;int h_addrtype;int h_length;char **h_addr_list;};
struct hrmstat {struct as *hrm_as;uintptr_t hrm_base;ushort_t hrm_id;struct hrmstat *hrm_anext;struct hrmstat *hrm_hnext;uchar_t hrm_bits[16];};
typedef longlong_t hrtime_t;
struct hs_direntry {uint_t ext_lbn;uint_t ext_size;struct timeval cdate;struct timeval mdate;struct timeval adate;enum vtype type;mode_t mode;uint_t nlink;uid_t uid;gid_t gid;dev_t r_dev;unsigned __int32 xar_prot : 1;uchar_t xar_len;uchar_t intlf_sz;uchar_t intlf_sk;ushort_t sym_link_flag;char *sym_link;};
enum hs_vol_type {HS_VOL_TYPE_HS = 0x0,HS_VOL_TYPE_ISO = 0x1,};
enum hs_voldesc_type {VD_BOOT = 0x0,VD_SFS = 0x1,VD_CCFS = 0x2,VD_UNSPEC = 0x3,VD_EOV = 0xFF,};
struct hs_volume {ulong_t vol_size;uint_t lbn_size;uint_t lbn_shift;uint_t lbn_secshift;uint_t lbn_maxoffset;uchar_t file_struct_ver;uid_t vol_uid;gid_t vol_gid;uint_t vol_prot;struct timeval cre_date;struct timeval mod_date;struct hs_direntry root_dir;ushort_t ptbl_len;uint_t ptbl_lbn;ushort_t vol_set_size;ushort_t vol_set_seq;char vol_id[32];};
struct hsfid {ushort_t hf_len;ushort_t hf_dir_off;uint_t hf_dir_lbn;};
struct hsfs {struct hsfs *hsfs_next;int hsfs_magic;struct vfs *hsfs_vfs;struct vnode *hsfs_rootvp;struct vnode *hsfs_devvp;enum hs_vol_type hsfs_vol_type;struct hs_volume hsfs_vol;struct ptable *hsfs_ptbl;int hsfs_ptbl_size;struct ptable_idx *hsfs_ptbl_idx;int hsfs_ptbl_idx_size;struct hstable *hsfs_hstbl;ulong_t ext_impl_bits;ushort_t sua_offset;ushort_t hsfs_namemax;ulong_t hsfs_err_flags;char *hsfs_fsmnt;ulong_t hsfs_flags;};
struct hsnode {struct hsnode *hs_hash;struct hsnode *hs_freef;struct hsnode *hs_freeb;struct vnode hs_vnode;struct hs_direntry hs_dirent;ulong_t hs_nodeid;uint_t hs_dir_lbn;uint_t hs_dir_off;struct ptable_idx *hs_ptbl_idx;uint_t hs_offset;int hs_mapcnt;uint_t hs_vcode;uint_t hs_flags;kmutex_t hs_contents_lock;};
struct hstable {struct vfs *hs_vfsp;int hs_tablesize;krwlock_t hshash_lock;kmutex_t hsfree_lock;struct hsnode *hshash[32];struct hsnode *hsfree_f;struct hsnode *hsfree_b;int hs_nohsnode;struct hsnode hs_node[1];};
struct hwc_spec {struct hwc_spec *hwc_next;char *hwc_parent_name;char *hwc_class_name;proto_dev_info_t *hwc_proto;};
struct i_ddi_soft_state {void **array;kmutex_t lock;size_t size;size_t n_items;struct i_ddi_soft_state *next;};
struct iaadmin {struct iadpent *ia_dpents;__int16 ia_ndpents;__int16 ia_cmd;};
typedef struct iaadmin iaadmin_t;
struct iaclass {id_t pc_cid;int pc_clparms[8];};
typedef struct iaclass iaclass_t;
struct iadpent {pri_t ia_globpri;int ia_quantum;pri_t ia_tqexp;pri_t ia_slpret;__int16 ia_maxwait;__int16 ia_lwait;};
typedef struct iadpent iadpent_t;
struct iainfo {pri_t ia_maxupri;};
typedef struct iainfo iainfo_t;
struct iaparms {pri_t ia_uprilim;pri_t ia_upri;int ia_mode;int ia_nice;};
typedef struct iaparms iaparms_t;
struct iaproc {int ia_timeleft;pri_t ia_cpupri;pri_t ia_uprilim;pri_t ia_upri;pri_t ia_umdpri;char ia_nice;unsigned __int8 ia_flags;__int16 ia_dispwait;kthread_t *ia_tp;int *ia_pstatp;pri_t *ia_pprip;uint_t *ia_pflagp;struct iaproc *ia_next;struct iaproc *ia_prev;int ia_mode;};
typedef struct iaproc iaproc_t;
struct ib_request {nis_name ibr_name;struct ib_request::$284138CD61DEACF1E3B0F8ADC9D2B817 ibr_srch;u_int ibr_flags;struct ib_request::$BC4F227684F3C8C9122828D0FF4C6B30 ibr_obj;struct ib_request::$2D577313DCD2E74CD5A0055993933E3C ibr_cbhost;u_int ibr_bufsize;netobj ibr_cookie;};
struct ib_request::$284138CD61DEACF1E3B0F8ADC9D2B817 {u_int ibr_srch_len;nis_attr *ibr_srch_val;};
struct ib_request::$2D577313DCD2E74CD5A0055993933E3C {u_int ibr_cbhost_len;nis_server *ibr_cbhost_val;};
struct ib_request::$BC4F227684F3C8C9122828D0FF4C6B30 {u_int ibr_obj_len;nis_object *ibr_obj_val;};
struct ic_acl {ufs_ic_acl_t *owner;ufs_ic_acl_t *group;ufs_ic_acl_t *other;ufs_ic_acl_t *users;ufs_ic_acl_t *groups;ufs_aclmask_t mask;};
typedef struct ic_acl ic_acl_t;
struct icb_tag {uint32_t itag_prnde;uint16_t itag_strategy;uint16_t itag_param;uint16_t itag_max_ent;uint8_t itag_rsvd;uint8_t itag_ftype;uint32_t itag_lb_loc;uint16_t itag_lb_prn;uint16_t itag_flags;};
typedef struct icb_tag icb_tag_t;
struct icmp {uchar_t icmp_type;uchar_t icmp_code;ushort_t icmp_cksum;union icmp::$6518A9D1B702C5C28B83CB067318DBE9 icmp_hun;union icmp::$91F6810D45DA7C23E53CAA18FF826292 icmp_dun;};
struct icmp6_filter {uint32_t __icmp6_filt[8];};
typedef struct icmp6_filter icmp6_filter_t;
struct icmp6_hdr {uint8_t icmp6_type;uint8_t icmp6_code;uint16_t icmp6_cksum;union icmp6_hdr::$85A0B7966B981BE593FDADBE0B8685D7 icmp6_dataun;};
union icmp6_hdr::$85A0B7966B981BE593FDADBE0B8685D7 {uint32_t icmp6_un_data32[1];uint16_t icmp6_un_data16[2];uint8_t icmp6_un_data8[4];};
struct icmp6_mld {icmp6_t icmp6m_hdr;struct in6_addr icmp6m_group;};
typedef struct icmp6_mld icmp6_mld_t;
typedef struct icmp6_hdr icmp6_t;
union icmp::$6518A9D1B702C5C28B83CB067318DBE9 {uchar_t ih_pptr;struct in_addr ih_gwaddr;struct icmp::$6518A9D1B702C5C28B83CB067318DBE9::ih_idseq ih_idseq;int ih_void;struct icmp::$6518A9D1B702C5C28B83CB067318DBE9::ih_pmtu ih_pmtu;struct icmp::$6518A9D1B702C5C28B83CB067318DBE9::ih_rtradv ih_rtradv;};
struct icmp::$6518A9D1B702C5C28B83CB067318DBE9::ih_idseq {n_short icd_id;n_short icd_seq;};
struct icmp::$6518A9D1B702C5C28B83CB067318DBE9::ih_pmtu {n_short ipm_void;n_short ipm_nextmtu;};
struct icmp::$6518A9D1B702C5C28B83CB067318DBE9::ih_rtradv {uchar_t irt_num_addrs;uchar_t irt_wpa;n_short irt_lifetime;};
union icmp::$91F6810D45DA7C23E53CAA18FF826292 {struct icmp::$91F6810D45DA7C23E53CAA18FF826292::id_ts id_ts;struct icmp::$91F6810D45DA7C23E53CAA18FF826292::id_ip id_ip;ulong_t id_mask;char id_data[1];};
struct icmp::$91F6810D45DA7C23E53CAA18FF826292::id_ip {struct ip idi_ip;};
struct icmp::$91F6810D45DA7C23E53CAA18FF826292::id_ts {n_time its_otime;n_time its_rtime;n_time its_ttime;};
struct icmph_s {uint8_t icmph_type;uint8_t icmph_code;uint16_t icmph_checksum;union icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A icmph_u;};
union icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A {struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$BF1873CBC7925A80863A89A5F584CFD8 u_echo;struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$53D01225980FCAE7122E28993227E8F1 u_du;struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$7B3B6785F52FEBD22F1447BAEAA20549 u_pp;struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$0A785BFE2C1FC8F220D4B5E421FF4D4B u_rd;};
struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$0A785BFE2C1FC8F220D4B5E421FF4D4B {ipaddr_t u_rd_gateway;};
struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$53D01225980FCAE7122E28993227E8F1 {uint16_t u_du_zero;uint16_t u_du_mtu;};
struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$7B3B6785F52FEBD22F1447BAEAA20549 {uint8_t u_pp_ptr;uint8_t u_pp_rsvd[3];};
struct icmph_s::$2B4909FAE3ED1823BFCC7374B8840F2A::$BF1873CBC7925A80863A89A5F584CFD8 {uint16_t u_echo_ident;uint16_t u_echo_seqnum;};
typedef struct icmph_s icmph_t;
struct icmpstat {int icps_error;int icps_oldshort;int icps_oldicmp;int icps_outhist[19];int icps_badcode;int icps_tooshort;int icps_checksum;int icps_badlen;int icps_reflect;int icps_inhist[19];};
struct icommon {o_mode_t ic_smode;__int16 ic_nlink;o_uid_t ic_suid;o_gid_t ic_sgid;u_offset_t ic_lsize;time32_t ic_atime;int32_t ic_atspare;time32_t ic_mtime;int32_t ic_mtspare;time32_t ic_ctime;int32_t ic_ctspare;daddr32_t ic_db[12];daddr32_t ic_ib[3];int32_t ic_flags;int32_t ic_blocks;int32_t ic_gen;int32_t ic_shadow;uid_t ic_uid;gid_t ic_gid;uint32_t ic_oeftflag;};
typedef struct _iconv_info *iconv_t;
typedef int32_t id32_t;
struct id_space {id_t is_low;id_t is_high;id_t is_next;kmutex_t is_mutex;vmem_t *is_vmem;};
typedef struct id_space id_space_t;
typedef int id_t;
enum idop {POP_DIFF = 0x0,POP_AND = 0x1,POP_OR = 0x2,POP_XOR = 0x3,};
typedef enum idop idop_t;
enum idtype {P_PID = 0x0,P_PPID = 0x1,P_PGID = 0x2,P_SID = 0x3,P_CID = 0x4,P_UID = 0x5,P_GID = 0x6,P_ALL = 0x7,P_LWPID = 0x8,P_TASKID = 0x9,P_PROJID = 0xA,};
typedef enum idtype idtype_t;
typedef ulong_t ieaddr_t;
struct iecb {ushort_t iecb_status;ushort_t iecb_cmd;ieoff_t iecb_next;};
struct ieconf {struct iecb ieconf_cb;uchar_t ieconf_bytes;uchar_t ieconf_fifolim;ushort_t ieconf_data0;uchar_t ieconf_data1;uchar_t ieconf_space;uchar_t ieconf_slttml8;uchar_t ieconf_data2;ushort_t ieconf_data3;uchar_t ieconf_minfrm;uchar_t ieconf_pad;};
struct ieiaddr {struct iecb ieia_cb;uchar_t ieia_addr[6];};
typedef ushort_t ieint_t;
struct ieiscp {uchar_t ieiscp_busy;uchar_t ieiscp_unused;ieoff_t ieiscp_scb;ieaddr_t ieiscp_cbbase;};
struct iemcaddr {struct iecb iemc_cb;ieint_t iemc_count;uchar_t iemc_addr[384];};
typedef ushort_t ieoff_t;
struct ierbd {uchar_t ierbd_cntlo;uchar_t ierbd_status;ieoff_t ierbd_next;ieaddr_t ierbd_buf;uchar_t ierbd_sizelo;uchar_t ierbd_elsize;ushort_t pad;};
typedef struct ierbd ierbd_t;
struct ierfd {ushort_t ierfd_status;uchar_t ierfd_pad;uchar_t ierfd_command;ieoff_t ierfd_next;volatile ieoff_t ierfd_rbd;uchar_t ierfd_dhost[6];uchar_t ierfd_shost[6];ushort_t ierfd_type;ushort_t pad;};
typedef struct ierfd ierfd_t;
struct iescb {ushort_t iescb_status;ushort_t iescb_cmd;ieoff_t iescb_cbl;ieoff_t iescb_rfa;ieint_t iescb_crcerrs;ieint_t iescb_alnerrs;ieint_t iescb_rscerrs;ieint_t iescb_ovrnerrs;};
struct iescp {ushort_t iescp_unused0;uchar_t iescp_sysbus;uchar_t iescp_unused1[5];ieaddr_t iescp_iscp;};
struct ietbd {uchar_t ietbd_cntlo;uchar_t ietbd_eofcnthi;ieoff_t ietbd_next;ieaddr_t ietbd_buf;};
typedef struct ietbd ietbd_t;
struct ietcb {ushort_t ietcb_status;ushort_t ietcb_command;ieoff_t ietcb_next;ieoff_t ietcb_tbd;uchar_t ietcb_dhost[6];ushort_t ietcb_type;};
typedef struct ietcb ietcb_t;
struct if_data {uchar_t ifi_type;uchar_t ifi_addrlen;uchar_t ifi_hdrlen;uint_t ifi_mtu;uint_t ifi_metric;uint_t ifi_baudrate;uint_t ifi_ipackets;uint_t ifi_ierrors;uint_t ifi_opackets;uint_t ifi_oerrors;uint_t ifi_collisions;uint_t ifi_ibytes;uint_t ifi_obytes;uint_t ifi_imcasts;uint_t ifi_omcasts;uint_t ifi_iqdrops;uint_t ifi_noproto;struct timeval ifi_lastchange;};
typedef struct if_data if_data_t;
struct if_msghdr {ushort_t ifm_msglen;uchar_t ifm_version;uchar_t ifm_type;int ifm_addrs;int ifm_flags;ushort_t ifm_index;struct if_data ifm_data;};
typedef struct if_msghdr if_msghdr_t;
struct if_nameindex {uint32_t if_index;char *if_name;};
struct ifa_msghdr {ushort_t ifam_msglen;uchar_t ifam_version;uchar_t ifam_type;int ifam_addrs;int ifam_flags;ushort_t ifam_index;int ifam_metric;};
typedef struct ifa_msghdr ifa_msghdr_t;
struct ifaddr {struct sockaddr ifa_addr;union ifaddr::$0DF00F875CAF96EB397809642F17405E ifa_ifu;struct ifnet *ifa_ifp;struct ifaddr *ifa_next;};
union ifaddr::$0DF00F875CAF96EB397809642F17405E {struct sockaddr ifu_broadaddr;struct sockaddr ifu_dstaddr;};
struct ifconf {int ifc_len;union ifconf::$28C87C5ACD364976D94B96E40062B553 ifc_ifcu;};
union ifconf::$28C87C5ACD364976D94B96E40062B553 {caddr_t ifcu_buf;struct ifreq *ifcu_req;};
struct ifnet {char *if_name;__int16 if_unit;__int16 if_mtu;__int16 if_flags;__int16 if_timer;ushort_t if_promisc;int if_metric;struct ifaddr *if_addrlist;struct ifnet::ifqueue if_snd;int (*if_init)();int (*if_output)();int (*if_ioctl)();int (*if_reset)();int (*if_watchdog)();int if_ipackets;int if_ierrors;int if_opackets;int if_oerrors;int if_collisions;struct ifnet *if_next;struct ifnet *if_upper;struct ifnet *if_lower;int (*if_input)();int (*if_ctlin)();int (*if_ctlout)();struct map *if_memmap;};
struct ifnet::ifqueue {struct mbuf *ifq_head;struct mbuf *ifq_tail;int ifq_len;int ifq_maxlen;int ifq_drops;};
struct ifp_stats {int version;int lip_count;int ncmds;ifp_target_stats_t tstats[127];char drvr_name[256];char fw_revision[256];char node_wwn[17];char port_wwn[17];uint_t parity_chk_enabled;uint_t resp_status[256];};
typedef struct ifp_stats ifp_stats_t;
struct ifp_target_stats {int logouts_recvd;int task_mgmt_failures;int data_ro_mismatches;int dl_len_mismatches;};
typedef struct ifp_target_stats ifp_target_stats_t;
struct ifreq {char ifr_name[16];union ifreq::$031EB9357DA800073593637CA1D35508 ifr_ifru;};
union ifreq::$031EB9357DA800073593637CA1D35508 {struct sockaddr ifru_addr;struct sockaddr ifru_dstaddr;char ifru_oname[16];struct sockaddr ifru_broadaddr;int ifru_index;__int16 ifru_flags;int ifru_metric;char ifru_data[1];char ifru_enaddr[6];int if_muxid[2];struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_ppaflags ifru_ppaflags;struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_dnld_reqs ifru_dnld_req;struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_fddi_stats ifru_fddi_stat;struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_netmapents ifru_netmapent;struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_fddi_gen_struct ifru_fddi_gstruct;};
struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_dnld_reqs {uint32_t v_addr;uint32_t m_addr;uint32_t ex_addr;uint32_t size;};
struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_fddi_gen_struct {uint32_t ifru_fddi_gioctl;uint32_t ifru_fddi_gaddr;};
struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_fddi_stats {uint32_t stat_size;uint32_t fddi_stats;};
struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_netmapents {uint32_t map_ent_size;uint32_t entry_number;uint32_t fddi_map_ent;};
struct ifreq::$031EB9357DA800073593637CA1D35508::ifr_ppaflags {__int16 ifrup_flags;__int16 ifrup_filler;uint_t ifrup_ppa;};
enum ifta_proto {IFTAP_INVALID = 0x0,IFTAP_IPV4 = 0x1,IFTAP_IPV6 = 0x2,};
struct iftun_req {char ifta_lifr_name[32];struct sockaddr_storage ifta_saddr;struct sockaddr_storage ifta_daddr;uint_t ifta_flags;enum ifta_proto ifta_upper;enum ifta_proto ifta_lower;uint_t ifta_vers;uint32_t ifta_secinfo[8];};
struct igmp {uchar_t igmp_type;uchar_t igmp_code;ushort_t igmp_cksum;struct in_addr igmp_group;};
struct igmpmsg {uint_t unused1;uint_t unused2;uchar_t im_msgtype;uchar_t im_mbz;uchar_t im_vif;uchar_t unused3;struct in_addr im_src;struct in_addr im_dst;};
struct igmpstat {uint_t igps_rcv_total;uint_t igps_rcv_tooshort;uint_t igps_rcv_badsum;uint_t igps_rcv_queries;uint_t igps_rcv_badqueries;uint_t igps_rcv_reports;uint_t igps_rcv_badreports;uint_t igps_rcv_ourreports;uint_t igps_snd_reports;};
typedef int ihandle_t;
struct ildTraceEntry {uint_t time;uint_t cpu_mod_line;uint_t parm1;uint_t parm2;};
typedef struct ildTraceEntry ildTraceEntry_t;
struct impl_devid {uchar_t did_magic_hi;uchar_t did_magic_lo;uchar_t did_rev_hi;uchar_t did_rev_lo;uchar_t did_type_hi;uchar_t did_type_lo;uchar_t did_len_hi;uchar_t did_len_lo;char did_driver[4];char did_id[1];};
typedef struct impl_devid impl_devid_t;
struct importCertificate_t {OCF_CERTREF_t destination;OCF_Any_t certificate;};
struct in6_addr {union in6_addr::$0B96DB6FF0520CC7F6D64D2FDA9E8D55 _S6_un;};
union in6_addr::$0B96DB6FF0520CC7F6D64D2FDA9E8D55 {uint8_t _S6_u8[16];uint32_t _S6_u32[4];uint32_t __S6_align;};
typedef struct in6_addr in6_addr_t;
struct in6_pktinfo {struct in6_addr ipi6_addr;unsigned int ipi6_ifindex;};
struct in_addr {union in_addr::$62419D96C55FD564B59AC1457FCC29DF S_un;};
union in_addr::$62419D96C55FD564B59AC1457FCC29DF {struct in_addr::$62419D96C55FD564B59AC1457FCC29DF::$CA47E2D0110326C1FF3241D99B03738B S_un_b;struct in_addr::$62419D96C55FD564B59AC1457FCC29DF::$F83FB9AF7C487DE20DBC314CA3F6F492 S_un_w;uint32_t S_addr;};
struct in_addr::$62419D96C55FD564B59AC1457FCC29DF::$CA47E2D0110326C1FF3241D99B03738B {uint8_t s_b1;uint8_t s_b2;uint8_t s_b3;uint8_t s_b4;};
struct in_addr::$62419D96C55FD564B59AC1457FCC29DF::$F83FB9AF7C487DE20DBC314CA3F6F492 {uint16_t s_w1;uint16_t s_w2;};
typedef uint32_t in_addr_t;
struct in_ifaddr {struct ifaddr ia_ifa;ulong_t ia_net;ulong_t ia_netmask;ulong_t ia_subnet;ulong_t ia_subnetmask;struct in_addr ia_netbroadcast;int ia_flags;struct in_ifaddr *ia_next;};
typedef uint16_t in_port_t;
typedef struct $029C14C2128B1475759967EB9FDC7B4A in_prefix_t;
typedef __int16 index_t;
struct indirect_entry {tag_t ie_tag;icb_tag_t ie_icb_tag;long_ad_t ie_indirecticb;};
typedef struct indirect_entry indirect_entry_t;
typedef struct $0113267646EB0A9CEC05668EA2201D53 inetcksum_t;
struct info_reg {union info_reg::$A99CADDF0A6969246070D83E4F241E67 ir;uint8_t dsr;uint8_t dcr;};
union info_reg::$A99CADDF0A6969246070D83E4F241E67 {uint8_t datar;uint8_t afifo;};
struct init_dev {int socket;};
typedef struct init_dev init_dev_t;
typedef struct $F8793C5ADA5B1735862C612D8105FB3D init_t;
typedef uint32_t ino32_t;
typedef u_longlong_t ino64_t;
typedef ulong_t ino_t;
struct inode {struct inode *i_chain[2];struct icommon i_ic;struct vnode i_vnode;struct vnode *i_devvp;ushort_t i_flag;dev_t i_dev;ino_t i_number;off_t i_diroff;struct ufsvfs *i_ufsvfs;struct dquot *i_dquot;krwlock_t i_rwlock;krwlock_t i_contents;kmutex_t i_tlock;offset_t i_nextr;struct inode *i_freef;struct inode *i_freeb;uint_t i_vcode;int i_mapcnt;int *i_map;dev_t i_rdev;size_t i_delaylen;offset_t i_delayoff;offset_t i_nextrio;int i_writes;kcondvar_t i_wrcv;offset_t i_doff;si_t *i_ufs_acl;};
typedef struct inode inode_t;
struct inpcb {struct inpcb *inp_next;struct inpcb *inp_prev;struct inpcb *inp_head;struct in_addr inp_faddr;ushort_t inp_fport;struct in_addr inp_laddr;ushort_t inp_lport;struct socket *inp_socket;caddr_t inp_ppcb;struct route inp_route;struct mbuf *inp_options;};
struct instats {kstat_named_t in_size;kstat_named_t in_maxsize;kstat_named_t in_hits;kstat_named_t in_misses;kstat_named_t in_malloc;kstat_named_t in_mfree;kstat_named_t in_maxreached;kstat_named_t in_frfront;kstat_named_t in_frback;kstat_named_t in_qfree;kstat_named_t in_scan;kstat_named_t in_tidles;kstat_named_t in_lidles;kstat_named_t in_vidles;kstat_named_t in_kcalloc;kstat_named_t in_kcfree;kstat_named_t in_poc;};
typedef uint32_t instr_t;
typedef __int16 int16_t;
typedef int int32;
typedef int int32_t;
typedef longlong_t int64;
typedef __int64 int64_t;
typedef char int8_t;
typedef __int16 int_least16_t;
typedef int int_least32_t;
typedef __int64 int_least64_t;
typedef char int_least8_t;
struct inthandler {struct inthandler *next;struct inthandler *prev;int flags;uint32_t (*intr)(caddr_t);unsigned int handler_id;void *arg;unsigned int socket;unsigned int irq;unsigned int priority;ddi_softintr_t softid;ddi_iblock_cookie_t iblk_cookie;ddi_idevice_cookie_t idev_cookie;};
typedef struct inthandler inthandler_t;
typedef int64_t intmax_t;
typedef int intptr_t;
typedef uint32_t (*intrfunc_t)(void *);
struct intrspec {uint_t intrspec_pri;uint_t intrspec_vec;uint_t (*intrspec_func)();};
typedef caddr_t ioaddr_t;
struct iocblk {int ioc_cmd;cred_t *ioc_cr;uint_t ioc_id;size_t ioc_count;int ioc_error;int ioc_rval;int ioc_fill1;uint_t ioc_flag;int ioc_filler[2];};
union ioctypes {struct iocblk iocblk;struct copyreq copyreq;struct copyresp copyresp;};
struct ioreq {caddr_t ior_base;int ior_len;offset_t ior_offset;int ior_whence;int ior_errno;int ior_return;int ior_flag;};
typedef struct ioreq ioreq_t;
enum iotype {NFS_READ_AHEAD = 0x0,NFS_PUTAPAGE = 0x1,NFS_PAGEIO = 0x2,NFS_READDIR = 0x3,NFS_COMMIT = 0x4,};
struct iovec {caddr_t iov_base;int iov_len;};
typedef struct iovec iovec_t;
struct ip {unsigned __int8 ip_v : 4;unsigned __int8 ip_hl : 4;uchar_t ip_tos;__int16 ip_len;ushort_t ip_id;__int16 ip_off;uchar_t ip_ttl;uchar_t ip_p;ushort_t ip_sum;struct in_addr ip_src;struct in_addr ip_dst;};
struct ip6_dest {uint8_t ip6d_nxt;uint8_t ip6d_len;};
typedef struct ip6_dest ip6_dest_t;
struct ip6_frag {uint8_t ip6f_nxt;uint8_t ip6f_reserved;uint16_t ip6f_offlg;uint32_t ip6f_ident;};
typedef struct ip6_frag ip6_frag_t;
struct ip6_hbh {uint8_t ip6h_nxt;uint8_t ip6h_len;};
typedef struct ip6_hbh ip6_hbh_t;
struct ip6_hdr {union ip6_hdr::$BD1196ABBEDCD1C568FFAAAAE6BA5314 ip6_ctlun;struct in6_addr ip6_src;struct in6_addr ip6_dst;};
union ip6_hdr::$BD1196ABBEDCD1C568FFAAAAE6BA5314 {struct ip6_hdr::$BD1196ABBEDCD1C568FFAAAAE6BA5314::ip6_hdrctl ip6_un1;uint8_t ip6_un2_vfc;};
struct ip6_hdr::$BD1196ABBEDCD1C568FFAAAAE6BA5314::ip6_hdrctl {uint32_t ip6_un1_flow;uint16_t ip6_un1_plen;uint8_t ip6_un1_nxt;uint8_t ip6_un1_hlim;};
struct ip6_opt {uint8_t ip6o_type;uint8_t ip6o_len;};
struct ip6_opt_binding_ack {uint8_t ip6oa_type;uint8_t ip6oa_len;uint8_t ip6oa_status;uint8_t ip6oa_seqno[2];uint8_t ip6oa_lifetime[4];uint8_t ip6oa_refresh[4];};
struct ip6_opt_binding_request {uint8_t ip6or_type;uint8_t ip6or_len;};
struct ip6_opt_binding_update {uint8_t ip6ou_type;uint8_t ip6ou_len;uint8_t ip6ou_flags;uint8_t ip6ou_prefixlen;uint8_t ip6ou_seqno[2];uint8_t ip6ou_lifetime[4];uint8_t ip6ou_coa[16];};
struct ip6_opt_home_address {uint8_t ip6oh_type;uint8_t ip6oh_len;uint8_t ip6oh_addr[16];};
struct ip6_opt_jumbo {uint8_t ip6oj_type;uint8_t ip6oj_len;uint8_t ip6oj_jumbo_len[4];};
struct ip6_opt_nsap {uint8_t ip6on_type;uint8_t ip6on_len;uint8_t ip6on_src_nsap_len;uint8_t ip6on_dst_nsap_len;};
struct ip6_opt_router {uint8_t ip6or_type;uint8_t ip6or_len;uint8_t ip6or_value[2];};
struct ip6_opt_tunnel {uint8_t ip6ot_type;uint8_t ip6ot_len;uint8_t ip6ot_encap_limit;};
struct ip6_rthdr {uint8_t ip6r_nxt;uint8_t ip6r_len;uint8_t ip6r_type;uint8_t ip6r_segleft;};
struct ip6_rthdr0 {uint8_t ip6r0_nxt;uint8_t ip6r0_len;uint8_t ip6r0_type;uint8_t ip6r0_segleft;uint8_t ip6r0_reserved;uint8_t ip6r0_slmap[3];struct in6_addr ip6r0_addr[1];};
typedef struct ip6_rthdr0 ip6_rthdr0_t;
typedef struct ip6_rthdr ip6_rthdr_t;
typedef struct ip6_hdr ip6_t;
struct ip_addr_t {char net;char host;char lh;char impno;};
struct ip_m_s {t_uscalar_t ip_m_mac_type;int ip_m_type;t_uscalar_t ip_m_sap;t_scalar_t ip_m_sap_length;t_scalar_t ip_m_brdcst_addr_length;uchar_t *ip_m_brdcst_addr;};
typedef struct ip_m_s ip_m_t;
struct ip_member {DeviceName ipGroupMemberIfIndex;IpAddress ipGroupMemberAddress;Counter ipGroupMemberRefCnt;};
typedef struct ip_member ip_member_t;
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
struct ip_timestamp {uchar_t ipt_code;uchar_t ipt_len;uchar_t ipt_ptr;unsigned __int8 ipt_oflw : 4;unsigned __int8 ipt_flg : 4;union ip_timestamp::ipt_timestamp ipt_timestamp;};
union ip_timestamp::ipt_timestamp {n_long ipt_time[1];struct ip_timestamp::ipt_timestamp::ipt_ta ipt_ta[1];};
struct ip_timestamp::ipt_timestamp::ipt_ta {struct in_addr ipt_addr;n_long ipt_time;};
typedef uint32_t ipaddr_t;
struct ipart {unsigned __int8 bootid;unsigned __int8 beghead;unsigned __int8 begsect;unsigned __int8 begcyl;unsigned __int8 systid;unsigned __int8 endhead;unsigned __int8 endsect;unsigned __int8 endcyl;int relsect;int numsect;};
struct ipasfrag {unsigned __int8 ip_v : 4;unsigned __int8 ip_hl : 4;uchar_t ipf_mff;__int16 ip_len;ushort_t ip_id;__int16 ip_off;uchar_t ip_ttl;uchar_t ip_p;ushort_t ip_sum;struct ipasfrag *ipf_next;struct ipasfrag *ipf_prev;};
struct ipc_perm {uid_t uid;gid_t gid;uid_t cuid;gid_t cgid;mode_t mode;uint_t seq;key_t key;int pad[4];};
struct ipd_addr_tbl {struct ipd_addr_tbl *next;struct ipd_addr_tbl *prev;ipaddr_t dst;int mux_id;queue_t *rq;mblk_t *pkt;int act_count;timestruc_t act_time;int timeout;int addr_timeout;struct ipd_softc *ifp;};
typedef struct $CAD4AC390BD8237C223B7EC96D9848DF ipd_blacklist_t;
typedef struct $BDA3EB51A42C3AF06EADB485CA225508 ipd_con_dis_t;
typedef struct $9243195F0116F1DC43EDD9D2343B9004 ipd_dis_ind_t;
typedef struct $60F784A34F5D801B175C2936E7100D6B ipd_err_ind_t;
typedef struct $19E1246DE095363392431173B011D54A ipd_get_info_t;
enum ipd_iftype {IPD_NULL = 0x0,IPD_PTP = 0x1,IPD_MTP = 0x2,};
typedef struct $45D578D1CAA1736E8819435F592D8C84 ipd_make_if_t;
union ipd_messages {uint_t msg;ipd_make_if_t make_if;ipd_con_dis_t con_dis;ipd_dis_ind_t dis_ind;ipd_err_ind_t err_ind;ipd_set_tim_t set_tim;ipd_blacklist_t blacklist;ipd_get_info_t get_info;ipd_register_t regist;ipd_unregister_t unregist;uint_t version;};
enum ipd_msgs {IPD_MAKE_IF = 0x100,IPD_CON_REQ = 0x101,IPD_DIS_REQ = 0x102,IPD_DIS_IND = 0x103,IPD_ERR_IND = 0x104,IPD_SET_TIM = 0x105,IPD_BLACKLIST = 0x106,IPD_GET_INFO = 0x107,IPD_CON_DECLINE = 0x108,IPD_GET_VERSION = 0x109,IPD_REGISTER = 0x10A,IPD_UNREGISTER = 0x10B,};
typedef struct $45D578D1CAA1736E8819435F592D8C84 ipd_register_t;
typedef struct $7C2C393CADA02B1A2D153D5E661EE10D ipd_set_tim_t;
struct ipd_softc {dev_info_t *if_dip;char *if_name;char if_unit;char if_type;uint_t if_ipackets;uint_t if_ierrors;uint_t if_opackets;uint_t if_oerrors;uint_t if_nocanput;uint_t if_allocbfail;kstat_t *if_stats;struct ipd_addr_tbl *if_conn;struct ipd_softc *if_next;queue_t *to_cnxmgr;};
struct ipd_stat {kstat_named_t ipd_ipackets;kstat_named_t ipd_ierrors;kstat_named_t ipd_opackets;kstat_named_t ipd_oerrors;kstat_named_t ipd_nocanput;kstat_named_t ipd_allocbfail;};
struct ipd_str {struct ipd_str *st_next;queue_t *st_rq;struct ipd_softc *st_ifp;uint_t st_state;uint_t st_sap;minor_t st_minor;uint_t dst;char st_type;char st_raw;char st_all;};
typedef struct $45D578D1CAA1736E8819435F592D8C84 ipd_unregister_t;
struct ipdcm_minor_info {queue_t *rq;int registree;};
struct ipdpriminfo {int pi_minlen;uint_t pi_state;int (*pi_funcp)();};
struct ipha_s {uint8_t ipha_version_and_hdr_length;uint8_t ipha_type_of_service;uint16_t ipha_length;uint16_t ipha_ident;uint16_t ipha_fragment_offset_and_flags;uint8_t ipha_ttl;uint8_t ipha_protocol;uint16_t ipha_hdr_checksum;ipaddr_t ipha_src;ipaddr_t ipha_dst;};
typedef struct ipha_s ipha_t;
struct ipic_s {ipllc_t ipic_ipllc;uint_t ipic_ire_type;uint_t ipic_max_frag;uint_t ipic_addr_offset;uint_t ipic_addr_length;uint_t ipic_mask_offset;uint_t ipic_mask_length;uint_t ipic_src_addr_offset;uint_t ipic_src_addr_length;uint_t ipic_ll_hdr_offset;uint_t ipic_ll_hdr_length;uint_t ipic_gateway_addr_offset;uint_t ipic_gateway_addr_length;clock_t ipic_rtt;uint32_t ipic_ssthresh;clock_t ipic_rtt_sd;};
typedef struct ipic_s ipic_t;
struct ipid_s {ipllc_t ipid_ipllc;uint_t ipid_ire_type;uint_t ipid_addr_offset;uint_t ipid_addr_length;uint_t ipid_mask_offset;uint_t ipid_mask_length;};
typedef struct ipid_s ipid_t;
typedef struct ipllcmd_s ipllc_t;
struct ipllcmd_s {uint_t ipllc_cmd;uint_t ipllc_name_offset;uint_t ipllc_name_length;};
struct ipoption {struct in_addr ipopt_dst;char ipopt_list[40];};
struct ipovly {caddr_t ih_next;caddr_t ih_prev;uchar_t ih_x1;uchar_t ih_pr;__int16 ih_len;struct in_addr ih_src;struct in_addr ih_dst;};
struct ipq {struct ipq *next;struct ipq *prev;uchar_t ipq_ttl;uchar_t ipq_p;ushort_t ipq_id;struct ipasfrag *ipq_next;struct ipasfrag *ipq_prev;struct in_addr ipq_src;struct in_addr ipq_dst;};
struct ipsec_req {uint_t ipsr_ah_req;uint_t ipsr_esp_req;uint_t ipsr_self_encap_req;uint8_t ipsr_auth_alg;uint8_t ipsr_esp_alg;uint8_t ipsr_esp_auth_alg;};
typedef struct ipsec_req ipsec_req_t;
struct ipstat {int ips_total;int ips_badsum;int ips_tooshort;int ips_toosmall;int ips_badhlen;int ips_badlen;int ips_fragments;int ips_fragdropped;int ips_fragtimeout;int ips_forward;int ips_cantforward;int ips_redirectsent;};
struct ipv6_member {DeviceIndex ipv6GroupMemberIfIndex;Ip6Address ipv6GroupMemberAddress;Counter ipv6GroupMemberRefCnt;};
typedef struct ipv6_member ipv6_member_t;
struct ipv6_mreq {struct in6_addr ipv6mr_multiaddr;unsigned int ipv6mr_interface;};
typedef int irq_t;
enum isdn_activation_state {ISDN_OFF = 0x0,ISDN_UNPLUGGED = 0x1,ISDN_DEACTIVATE_REQ = 0x2,ISDN_DEACTIVATED = 0x3,ISDN_ACTIVATE_REQ = 0x4,ISDN_ACTIVATED = 0x5,};
typedef enum isdn_activation_state isdn_activation_state_t;
struct isdn_activation_status {isdn_interface_t type;enum isdn_activation_state activation;};
typedef struct isdn_activation_status isdn_activation_status_t;
enum isdn_chan {ISDN_CHAN_NONE = 0x0,ISDN_CHAN_SELF = 0x1,ISDN_CHAN_HOST = 0x2,ISDN_CHAN_CTLR_MGT = 0x3,ISDN_CHAN_TE_MGT = 0x10,ISDN_CHAN_TE_D_TRACE = 0x11,ISDN_CHAN_TE_D = 0x12,ISDN_CHAN_TE_B1 = 0x13,ISDN_CHAN_TE_B2 = 0x14,ISDN_CHAN_NT_MGT = 0x20,ISDN_CHAN_NT_D_TRACE = 0x21,ISDN_CHAN_NT_D = 0x22,ISDN_CHAN_NT_B1 = 0x23,ISDN_CHAN_NT_B2 = 0x24,ISDN_CHAN_PRI_MGT = 0x30,ISDN_CHAN_PRI_D = 0x31,ISDN_CHAN_PRI_B0 = 0x32,ISDN_CHAN_PRI_B1 = 0x33,ISDN_CHAN_PRI_B2 = 0x34,ISDN_CHAN_PRI_B3 = 0x35,ISDN_CHAN_PRI_B4 = 0x36,ISDN_CHAN_PRI_B5 = 0x37,ISDN_CHAN_PRI_B6 = 0x38,ISDN_CHAN_PRI_B7 = 0x39,ISDN_CHAN_PRI_B8 = 0x3A,ISDN_CHAN_PRI_B9 = 0x3B,ISDN_CHAN_PRI_B10 = 0x3C,ISDN_CHAN_PRI_B11 = 0x3D,ISDN_CHAN_PRI_B12 = 0x3E,ISDN_CHAN_PRI_B13 = 0x3F,ISDN_CHAN_PRI_B14 = 0x40,ISDN_CHAN_PRI_B15 = 0x41,ISDN_CHAN_PRI_B16 = 0x42,ISDN_CHAN_PRI_B17 = 0x43,ISDN_CHAN_PRI_B18 = 0x44,ISDN_CHAN_PRI_B19 = 0x45,ISDN_CHAN_PRI_B20 = 0x46,ISDN_CHAN_PRI_B21 = 0x47,ISDN_CHAN_PRI_B22 = 0x48,ISDN_CHAN_PRI_B23 = 0x49,ISDN_CHAN_PRI_B24 = 0x4A,ISDN_CHAN_PRI_B25 = 0x4B,ISDN_CHAN_PRI_B26 = 0x4C,ISDN_CHAN_PRI_B27 = 0x4D,ISDN_CHAN_PRI_B28 = 0x4E,ISDN_CHAN_PRI_B29 = 0x4F,ISDN_CHAN_PRI_B30 = 0x50,ISDN_CHAN_PRI_B31 = 0x51,ISDN_CHAN_AUX0_MGT = 0x100,ISDN_CHAN_AUX0 = 0x101,ISDN_CHAN_AUX1_MGT = 0x102,ISDN_CHAN_AUX1 = 0x103,ISDN_CHAN_AUX2_MGT = 0x104,ISDN_CHAN_AUX2 = 0x105,ISDN_CHAN_AUX3_MGT = 0x106,ISDN_CHAN_AUX3 = 0x107,ISDN_CHAN_AUX4_MGT = 0x108,ISDN_CHAN_AUX4 = 0x109,ISDN_CHAN_AUX5_MGT = 0x10A,ISDN_CHAN_AUX5 = 0x10B,ISDN_CHAN_AUX6_MGT = 0x10C,ISDN_CHAN_AUX6 = 0x10D,ISDN_CHAN_AUX7_MGT = 0x10E,ISDN_CHAN_AUX7 = 0x10F,};
typedef enum isdn_chan isdn_chan_t;
struct isdn_channel_info {isdn_chan_t channel;enum isdn_iostate iostate;struct isdn_channel_info::isdn_io_stats transmit;struct isdn_channel_info::isdn_io_stats receive;};
struct isdn_channel_info::isdn_io_stats {ulong_t packets;ulong_t octets;ulong_t errors;};
typedef struct isdn_channel_info isdn_channel_info_t;
struct isdn_conn_req {isdn_chan_t from;isdn_chan_t to;isdn_path_t dir;isdn_format_t format;int reserved[4];};
typedef struct isdn_conn_req isdn_conn_req_t;
struct isdn_conn_tab {int maxpaths;int npaths;isdn_conn_req_t *paths;};
typedef struct isdn_conn_tab isdn_conn_tab_t;
struct isdn_format {isdn_mode_t mode;unsigned int sample_rate;unsigned int channels;unsigned int precision;unsigned int encoding;unsigned int reserved[3];};
struct isdn_format_req {isdn_chan_t channel;isdn_format_t format;int reserved[4];};
typedef struct isdn_format_req isdn_format_req_t;
typedef struct isdn_format isdn_format_t;
struct isdn_interface_info {isdn_interface_t interface;isdn_activation_state_t activation;ulong_t ph_ai;ulong_t ph_di;ulong_t mph_ai;ulong_t mph_di;ulong_t mph_ei1;ulong_t mph_ei2;ulong_t mph_ii_c;ulong_t mph_ii_d;};
typedef struct isdn_interface_info isdn_interface_info_t;
typedef enum $CC06B5739EA2B9882BCE8C0A287C133B isdn_interface_t;
enum isdn_iostate {ISDN_IO_UNKNOWN = 0xFFFFFFFF,ISDN_IO_STOPPED = 0x0,ISDN_IO_READY = 0x1,};
typedef enum $628604CA069736C17E916A575687F61F isdn_loopback_chan_t;
struct isdn_loopback_request {isdn_loopback_type_t type;int channels;};
typedef struct isdn_loopback_request isdn_loopback_request_t;
typedef enum $A959B596F4A4BFCA9FCF924B52F0DB35 isdn_loopback_type_t;
struct isdn_message {unsigned int magic;isdn_interface_t type;isdn_message_type_t message;unsigned int vendor[5];};
typedef struct isdn_message isdn_message_t;
enum isdn_message_type {ISDN_VPH_VENDOR = 0x0,ISDN_PH_AI = 0x1,ISDN_PH_DI = 0x2,ISDN_PH_AR = 0x3,ISDN_PH_DATA_RQ = 0x4,ISDN_PH_DATA_IN = 0x5,ISDN_MPH_AI = 0x6,ISDN_MPH_DI = 0x7,ISDN_MPH_EI1 = 0x8,ISDN_MPH_EI2 = 0x9,ISDN_MPH_II_C = 0xA,ISDN_MPH_II_D = 0xB,};
typedef enum isdn_message_type isdn_message_type_t;
typedef enum $E739717CDB19454AC06785377AF9888B isdn_mode_t;
struct isdn_param {isdn_param_tag_t tag;union isdn_param::$CC0818EEDB9939D07B3B37CF76D5BC51 value;};
union isdn_param::$CC0818EEDB9939D07B3B37CF76D5BC51 {unsigned int us;unsigned int ms;unsigned int flag;unsigned int count;enum isdn_param_asmb asmb;enum isdn_param_maint maint;struct isdn_param::$CC0818EEDB9939D07B3B37CF76D5BC51::$E3C3E6EDB4E40BC00986BE35B850D35D pause;unsigned int reserved[2];};
struct isdn_param::$CC0818EEDB9939D07B3B37CF76D5BC51::$E3C3E6EDB4E40BC00986BE35B850D35D {isdn_chan_t channel;int paused;};
enum isdn_param_asmb {ISDN_PARAM_TE_ASMB_UNKNOWN = 0xFFFFFFFF,ISDN_PARAM_TE_ASMB_CCITT88 = 0x0,ISDN_PARAM_TE_ASMB_CTS2 = 0x1,};
enum isdn_param_maint {ISDN_PARAM_MAINT_OFF = 0x0,ISDN_PARAM_MAINT_ECHO = 0x1,ISDN_PARAM_MAINT_ON = 0x2,};
typedef struct isdn_param isdn_param_t;
typedef enum $4889CC838EABD4A4DF267BE559C2BCD8 isdn_param_tag_t;
typedef enum $354CCF684609FF657B26F0F4A65DC75F isdn_path_t;
enum iso_voldesc_type {ISO_VD_BOOT = 0x0,ISO_VD_PVD = 0x1,ISO_VD_SVD = 0x2,ISO_VD_VPD = 0x3,ISO_VD_EOV = 0xFF,};
struct isp_biu_regs {uint16_t isp_bus_id_lo;uint16_t isp_bus_id_hi;uint16_t isp_bus_conf0;uint16_t isp_bus_conf1;uint16_t isp_bus_icr;uint16_t isp_bus_isr;uint16_t isp_bus_sema;uint16_t isp_pci_nvram;uint16_t gap0[8];uint16_t isp_cdma_conf;uint16_t isp_cdma_control;uint16_t isp_cdma_status;uint16_t isp_cdma_fifo_status;uint16_t isp_cdma_count;uint16_t isp_cdma_reserved;uint16_t isp_cdma_addr0;uint16_t isp_cdma_addr1;uint16_t isp_pci_cdma_addr2;uint16_t isp_pci_cdma_addr3;uint16_t gap1[6];uint16_t isp_dma_conf;uint16_t isp_dma_control;uint16_t isp_dma_status;uint16_t isp_dma_fifo_status;uint16_t isp_dma_count_lo;uint16_t isp_dma_count_hi;uint16_t isp_dma_addr0;uint16_t isp_dma_addr1;uint16_t isp_pci_dma_addr2;uint16_t isp_pci_dma_addr3;uint16_t gap2[6];uint16_t isp_fifo_command;uint16_t isp_fifo_data;};
struct isp_mbox {ksema_t mbox_sema;uchar_t mbox_flags;struct isp_mbox_cmd mbox_cmd;};
struct isp_mbox_cmd {clock_t timeout;uchar_t retry_cnt;uchar_t n_mbox_out;uchar_t n_mbox_in;uint16_t mbox_out[8];uint16_t mbox_in[8];};
struct isp_mbox_regs {uint16_t isp_mailbox0;uint16_t isp_mailbox1;uint16_t isp_mailbox2;uint16_t isp_mailbox3;uint16_t isp_mailbox4;uint16_t isp_mailbox5;uint16_t isp_pci_mailbox6;uint16_t isp_pci_mailbox7;};
struct isp_regs_off {offset_t isp_biu_regs_off;offset_t isp_mbox_regs_off;offset_t isp_sxp_regs_off;offset_t isp_risc_regs_off;};
struct isp_risc_regs {uint16_t isp_risc_acc;uint16_t isp_risc_r1;uint16_t isp_risc_r2;uint16_t isp_risc_r3;uint16_t isp_risc_r4;uint16_t isp_risc_r5;uint16_t isp_risc_r6;uint16_t isp_risc_r7;uint16_t isp_risc_r8;uint16_t isp_risc_r9;uint16_t isp_risc_r10;uint16_t isp_risc_r11;uint16_t isp_risc_r12;uint16_t isp_risc_r13;uint16_t isp_risc_r14;uint16_t isp_risc_r15;uint16_t isp_risc_psr;uint16_t isp_risc_ivr;uint16_t isp_risc_pcr;uint16_t isp_risc_rar0;uint16_t isp_risc_rar1;uint16_t isp_risc_lcr;uint16_t isp_risc_pc;uint16_t isp_risc_mtr;uint16_t isp_risc_emb;uint16_t isp_risc_sp;uint16_t gap[5];uint16_t isp_risc_hrl;uint16_t isp_hccr;uint16_t isp_bp0;uint16_t isp_bp1;uint16_t isp_tcr;uint16_t isp_tmr;};
struct isp_sxp_regs {uint16_t isp_sxp_part_id;uint16_t isp_sxp_config1;uint16_t isp_sxp_config2;uint16_t isp_sxp_config3;uint16_t isp_sxp_reserved0[2];uint16_t isp_sxp_instruction;uint16_t isp_sxp_reserved1;uint16_t isp_sxp_return_addr;uint16_t isp_sxp_reserved2;uint16_t isp_sxp_command;uint16_t isp_sxp_reserved3;uint16_t isp_sxp_interrupt;uint16_t isp_sxp_reserved4;uint16_t isp_sxp_sequence;uint16_t isp_sxp_gross_err;uint16_t isp_sxp_execption;uint16_t isp_sxp_reserved5;uint16_t isp_sxp_override;uint16_t isp_sxp_reserved6;uint16_t isp_sxp_literal_base;uint16_t isp_sxp_reserved7;uint16_t isp_sxp_user_flags;uint16_t isp_sxp_reserved8;uint16_t isp_sxp_user_except;uint16_t isp_sxp_reserved9;uint16_t isp_sxp_breakpoint;uint16_t isp_sxp_reserved10[5];uint16_t isp_sxp_scsi_id;uint16_t isp_sxp_dev_config1;uint16_t isp_sxp_dev_config2;uint16_t isp_sxp_reserved11;uint16_t isp_sxp_phase_pointer;uint16_t isp_sxp_reserved12;uint16_t isp_sxp_buf_pointer;uint16_t isp_sxp_reserved13;uint16_t isp_sxp_buf_counter;uint16_t isp_sxp_buffer;uint16_t isp_sxp_buf_byte;uint16_t isp_sxp_buf_word;uint16_t isp_sxp_buf_word_tran;uint16_t isp_sxp_fifo;uint16_t isp_sxp_fifo_status;uint16_t isp_sxp_fifo_top;uint16_t isp_sxp_fifo_bottom;uint16_t isp_sxp_reserved15;uint16_t isp_sxp_tran_reg;uint16_t isp_sxp_reserved16;uint16_t isp_sxp_tran_count_lo;uint16_t isp_sxp_tran_count_hi;uint16_t isp_sxp_tran_counter_lo;uint16_t isp_sxp_tran_counter_hi;uint16_t isp_sxp_arb_data;uint16_t isp_sxp_pins_control;uint16_t isp_sxp_pins_data;uint16_t isp_sxp_pins_diff;};
struct itimerspec {struct timespec it_interval;struct timespec it_value;};
struct itimerspec32 {struct timespec32 it_interval;struct timespec32 it_value;};
typedef struct itimerspec32 itimerspec32_t;
typedef struct itimerspec itimerspec_t;
struct itimerval {struct timeval it_interval;struct timeval it_value;};
struct iu_ea {uint32_t iuea_atype;uint8_t iuea_astype;uint8_t iuea_res[3];uint32_t iuea_attr_len;uint32_t iuea_iu_len;regid_t iuea_ii;uint8_t iuea_iu[4];};
struct iuvd_desc {tag_t iuvd_tag;uint32_t iuvd_vdsn;regid_t iuvd_ii;charspec_t iuvd_cset;dstring_t iuvd_lvi[128];dstring_t iuvd_ifo1[36];dstring_t iuvd_ifo2[36];dstring_t iuvd_ifo3[36];regid_t iuvd_iid;uint8_t iuvd_iu[128];};
typedef struct iuvd_desc iuvd_desc_t;
enum jcaccess {JCREAD = 0x0,JCWRITE = 0x1,JCSETP = 0x2,JCGETP = 0x3,};
struct jedec_ident_t {uint32_t id;uint32_t info;};
struct jerqmesg {char cmd;char chan;};
typedef int jmp_buf[12];
struct joblog {char j_file[8];unsigned int j_uid;int j_lvl;int j_cnt;};
struct jwinsize {char bytesx;char bytesy;__int16 bitsx;__int16 bitsy;};
typedef uint_t k_fltset_t;
struct k_siginfo {int si_signo;int si_code;int si_errno;union k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9 __data;};
union k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9 {struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$E77A5845F57C2E0E9F7B0E52AACFC772 __proc;struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$F8DD959EF7757CB3FE124040C2995881 __fault;struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$EF0AB624753C0265765781C86414B739 __file;struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$C50A7FE09995E3AE62471BF9E2207266 __prof;};
struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$C50A7FE09995E3AE62471BF9E2207266 {caddr_t __faddr;timestruc_t __tstamp;__int16 __syscall;char __nsysarg;char __fault;};
struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$E77A5845F57C2E0E9F7B0E52AACFC772 {pid_t __pid;union k_siginfo::$::$E77A5845F57C2E0E9F7B0E52AACFC772::$1E1D46254D77D7AA17918C17CAF3F7C6 __pdata;};
struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$EF0AB624753C0265765781C86414B739 {int __fd;int __band;};
struct k_siginfo::$804257DC7E857FCD4172ACB0D5A910E9::$F8DD959EF7757CB3FE124040C2995881 {void *__addr;int __trapno;caddr_t __pc;};
struct k_siginfo::$::$::$1E1D46254D77D7AA17918C17CAF3F7C6::$3D26F7DC2EE9BFA01DA7951ECDA8B430 {clock_t __utime;int __status;clock_t __stime;};
struct k_siginfo::$::$::$1E1D46254D77D7AA17918C17CAF3F7C6::$6C9D3494F7394A5542DE40AFB5D524A6 {uid_t __uid;union sigval __value;};
union k_siginfo::$::$E77A5845F57C2E0E9F7B0E52AACFC772::$1E1D46254D77D7AA17918C17CAF3F7C6 {struct k_siginfo::$::$::$1E1D46254D77D7AA17918C17CAF3F7C6::$6C9D3494F7394A5542DE40AFB5D524A6 __kill;struct k_siginfo::$::$::$1E1D46254D77D7AA17918C17CAF3F7C6::$3D26F7DC2EE9BFA01DA7951ECDA8B430 __cld;};
typedef struct k_siginfo k_siginfo_t;
typedef struct $5D176D33403591159BBBEF445356E214 k_sigset_t;
typedef struct _kcondvar kcondvar_t;
typedef struct _kcpc_ctx kcpc_ctx_t;
typedef enum $38ED0C2ADD2BD878794BFE6293F393A9 kcv_type_t;
typedef int32_t key32_t;
typedef int key_t;
struct keyboard {struct keymap *k_normal;struct keymap *k_shifted;struct keymap *k_caps;struct keymap *k_altgraph;struct keymap *k_numlock;struct keymap *k_control;struct keymap *k_up;int k_idleshifts;int k_idlebuckys;unsigned __int8 k_abort1;unsigned __int8 k_abort1a;unsigned __int8 k_abort2;int k_toggleshifts;struct exception_map *k_except;};
struct keyboards {int id;struct keyboard *table;};
struct keyboardstate {int k_id;uchar_t k_idstate;uchar_t k_state;uchar_t k_rptkey;uint_t k_buckybits;uint_t k_shiftmask;struct keyboard *k_curkeyboard;uint_t k_togglemask;};
struct keymap {unsigned __int16 keymap[128];};
typedef int kid_t;
struct kiockey {int kio_tablemask;uchar_t kio_station;uchar_t kio_entry;char kio_string[10];};
struct kiockeymap {int kio_tablemask;uchar_t kio_station;ushort_t kio_entry;char kio_string[10];};
typedef struct _klwp *klwp_id_t;
typedef struct _klwp klwp_t;
struct kmem_cache;
typedef struct kmem_cache kmem_cache_t;
typedef struct mutex kmutex_t;
typedef enum $800308667964E9594463B69B6CCFCE10 kmutex_type_t;
struct knetbuf {mblk_t *udata_mp;unsigned int maxlen;unsigned int len;char *buf;};
struct knetconfig {unsigned int knc_semantics;caddr_t knc_protofmly;caddr_t knc_proto;dev_t knc_rdev;unsigned int knc_unused[8];};
struct kobj_mem {struct kobj_mem *km_next;struct kobj_mem *km_prev;uintptr_t km_addr;size_t km_size;uintptr_t km_alloc_addr;size_t km_alloc_size;};
struct kobj_notify_list {unsigned int kn_version;void (*kn_func)(unsigned int, struct modctl *);unsigned int kn_type;struct kobj_notify_list *kn_prev;struct kobj_notify_list *kn_next;};
typedef struct $8E17CB6E332B6DCEA38208AF631FD83A kobj_stat_t;
struct kproject {projid_t kpj_id;uint_t kpj_count;};
typedef struct kproject kproject_t;
struct krb4_svc_data {int window;};
typedef struct krb4_svc_data krb4_svcdata_t;
struct krpc_revauth {int version;union krpc_revauth::$777FC73716B11D775C37F1C4B1355BA9 krpc_revauth_u;};
union krpc_revauth::$777FC73716B11D775C37F1C4B1355BA9 {struct krpc_revauth_1 r;};
struct krpc_revauth_1 {uid_t uid;int rpcsec_flavor;void *flavor_data;};
typedef enum $5B09411ABF7AF89741BC688D36351F9B krw_t;
typedef enum $C0126AC73A46DE8E745F9FEA17492D57 krw_type_t;
typedef struct _krwlock krwlock_t;
typedef struct _ksema ksema_t;
typedef enum $635420CA75E4368650FCB176130922B4 ksema_type_t;
struct kstat {hrtime_t ks_crtime;struct kstat *ks_next;kid_t ks_kid;char ks_module[31];uchar_t ks_resv;int ks_instance;char ks_name[31];uchar_t ks_type;char ks_class[31];uchar_t ks_flags;void *ks_data;uint_t ks_ndata;size_t ks_data_size;hrtime_t ks_snaptime;int (*ks_update)(struct kstat *, int);void *ks_private;int (*ks_snapshot)(struct kstat *, void *, int);void *ks_lock;};
struct kstat_ctl {kid_t kc_chain_id;kstat_t *kc_chain;int kc_kd;};
typedef struct kstat_ctl kstat_ctl_t;
struct kstat_intr {uint_t intrs[5];};
typedef struct kstat_intr kstat_intr_t;
struct kstat_io {u_longlong_t nread;u_longlong_t nwritten;uint_t reads;uint_t writes;hrtime_t wtime;hrtime_t wlentime;hrtime_t wlastupdate;hrtime_t rtime;hrtime_t rlentime;hrtime_t rlastupdate;uint_t wcnt;uint_t rcnt;};
typedef struct kstat_io kstat_io_t;
struct kstat_named {char name[31];uchar_t data_type;union kstat_named::$7F27F6A69995E91B81910D0AAA5ACCB4 value;};
union kstat_named::$7F27F6A69995E91B81910D0AAA5ACCB4 {char c[16];int32_t i32;uint32_t ui32;int64_t i64;uint64_t ui64;int l;ulong_t ul;longlong_t ll;u_longlong_t ull;float f;double d;};
typedef struct kstat_named kstat_named_t;
typedef struct kstat kstat_t;
struct kstat_timer {char name[31];uchar_t resv;u_longlong_t num_events;hrtime_t elapsed_time;hrtime_t min_time;hrtime_t max_time;hrtime_t start_time;hrtime_t stop_time;};
typedef struct kstat_timer kstat_timer_t;
typedef struct _kthread *kthread_id_t;
typedef struct _kthread kthread_t;
struct kv_s {char *key;char *value;};
typedef struct kv_s kv_t;
struct kva_s {int length;kv_t *data;};
typedef struct kva_s kva_t;
typedef struct _kvmd kvm_t;
struct la_ba_acc {unsigned __int8 seq_id : 8;uchar_t org_s_id[3];ushort_t ox_id;ushort_t rx_id;};
typedef struct la_ba_acc la_ba_acc_t;
struct la_ba_rjt {uchar_t reserved;uchar_t reason_code;uchar_t explanation;uchar_t vendor;};
typedef struct la_ba_rjt la_ba_rjt_t;
struct la_els_adisc {uchar_t ls_code;uchar_t mbz[3];uint_t hard_address;uchar_t port_wwn[8];uchar_t node_wwn[8];uint_t nport_id;};
typedef la_els_adisc_t la_els_adisc_reply_t;
typedef struct la_els_adisc la_els_adisc_t;
struct la_els_identify {uint_t ls_code;uint_t byte_count;};
struct la_els_identify_reply {uint_t ls_code;uchar_t fcode[8192];};
typedef struct la_els_identify la_els_identify_t;
struct la_els_logi {uchar_t ls_code;uchar_t mbz[3];common_svc_t common_service;la_wwn_t nport_ww_name;la_wwn_t node_ww_name;svc_param_t class_1;svc_param_t class_2;svc_param_t class_3;uchar_t reserved[16];uchar_t vendor_version_level[16];};
typedef la_els_logi_t la_els_logi_reply_t;
typedef struct la_logi la_els_logi_t;
struct la_els_logo {uchar_t ls_code;uchar_t mbz[3];uchar_t reserved;uchar_t nport_id[3];la_wwn_t nport_ww_name;};
typedef la_els_logo_t la_els_logo_reply_t;
typedef struct la_els_logo la_els_logo_t;
typedef la_els_logi_reply_t la_els_pdisc_reply_t;
typedef la_els_logi_t la_els_pdisc_t;
struct la_els_prli {uchar_t ls_code;uchar_t page_length;ushort_t payload_length;uchar_t service_params[16];};
typedef la_els_prli_t la_els_prli_reply_t;
typedef struct la_els_prli la_els_prli_t;
typedef la_els_prli_t la_els_prlo_reply_t;
typedef la_els_prli_t la_els_prlo_t;
struct la_els_rjt {uchar_t ls_code;uchar_t mbz[3];uchar_t reserved;uchar_t reason_code;uchar_t explanation;uchar_t vendor;};
typedef struct la_els_rjt la_els_rjt_t;
struct la_els_rls {uchar_t ls_code;uchar_t mbz[3];uchar_t reserved;uchar_t nport_id[3];};
struct la_els_rls_reply {uchar_t ls_code;uchar_t mbz[3];uint_t link_failure;uint_t loss_of_sync;uint_t loss_of_signal;uint_t primitive;uint_t invalid_transmission;uint_t invalid_crc;};
typedef struct la_els_rls_reply la_els_rls_reply_t;
typedef struct la_els_rls la_els_rls_t;
struct la_els_rrq {uchar_t ls_code;uchar_t mbz[3];uchar_t reserved;uchar_t source_id[3];ushort_t ox_id;ushort_t rx_id;uchar_t assoc_header[32];};
typedef la_els_logo_t la_els_rrq_reply_t;
typedef struct la_els_rrq la_els_rrq_t;
struct la_logi {unsigned int code;common_svc_t common_service;la_wwn_t nport_ww_name;la_wwn_t node_ww_name;svc_param_t class_1;svc_param_t class_2;svc_param_t class_3;};
struct la_logo {unsigned int cmd;};
typedef la_logo_t la_logo_reply_t;
typedef struct la_logo la_logo_t;
struct la_rjt {int code;uchar_t reserved;uchar_t reason_code;uchar_t explanation;uchar_t vendor;};
typedef struct la_rjt la_rjt_t;
struct la_rls {unsigned int code;uchar_t reserved;uchar_t nport_id[3];};
struct la_rls_reply {unsigned int code;unsigned int link_failure;unsigned int loss_of_sync;unsigned int loss_of_signal;unsigned int primitive;unsigned int invalid_transmission;unsigned int invalid_crc;};
typedef struct la_rls_reply la_rls_reply_t;
typedef struct la_rls la_rls_t;
union la_wwn {uchar_t raw_wwn[8];struct la_wwn::$E7FEB4D8EB8DF71B4CA1F98BC2D628AC w;};
struct la_wwn::$E7FEB4D8EB8DF71B4CA1F98BC2D628AC {unsigned __int32 naa_id : 4;unsigned __int32 nport_id : 12;unsigned __int32 wwn_hi : 16;uint_t wwn_lo;};
typedef union la_wwn la_wwn_t;
typedef struct _label_t label_t;
typedef int lagreg_t;
struct lance_init_block {unsigned __int16 ib_prom : 1;unsigned __int16 : 8;unsigned __int16 ib_intl : 1;unsigned __int16 ib_drty : 1;unsigned __int16 ib_coll : 1;unsigned __int16 ib_dtcr : 1;unsigned __int16 ib_loop : 1;unsigned __int16 ib_dtx : 1;unsigned __int16 ib_drx : 1;uint8_t ib_padr[6];uint16_t ib_ladrf[4];struct {uint16_t lr_laddr;unsigned __int8 lr_len : 3;unsigned __int8 : 5;unsigned __int8 lr_haddr;} ib_rdrp;struct lancering ib_tdrp;};
struct lanceregs {volatile uint16_t lance_rdp;volatile uint16_t lance_rap;};
struct lancering {uint16_t lr_laddr;unsigned __int8 lr_len : 3;unsigned __int8 : 5;unsigned __int8 lr_haddr;};
struct lastlog {time_t ll_time;char ll_line[8];char ll_host[16];};
struct lb_addr {char lba_aaa[6];};
typedef struct lb_addr lb_addr_t;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 ldiv_t;
typedef struct _ldterm_cs_data ldterm_cs_data_t;
typedef struct _ldterm_cs_data_user ldterm_cs_data_user_t;
typedef struct _ldterm_cs_methods ldterm_cs_methods_t;
typedef struct _ldterm_eucpc_data ldterm_eucpc_data_t;
struct ldterm_mod {struct termios t_modes;struct termios t_amodes;struct termios t_dmodes;unsigned int t_state;int t_line;int t_col;int t_rocount;int t_rocol;mblk_t *t_message;mblk_t *t_endmsg;size_t t_msglen;mblk_t *t_echomp;int t_rd_request;int t_iocid;bufcall_id_t t_wbufcid;timeout_id_t t_vtid;uchar_t t_codeset;uchar_t t_eucleft;uchar_t t_eucign;uchar_t t_eucpad;eucioc_t eucwioc;uchar_t *t_eucp;mblk_t *t_eucp_mp;uchar_t t_maxeuc;int t_eucwarn;ldterm_cs_data_t t_csdata;struct _ldterm_cs_methods t_csmethods;uchar_t t_scratch[8];uchar_t t_scratch_len;};
typedef struct _ldterm_unicode_data_cell ldterm_unicode_data_cell_t;
typedef struct ldterm_mod ldtermstd_state_t;
typedef u_longlong_t len_t;
struct lfsnode {struct lfsnode *lfs_next;int lfs_refct;struct vfs *lfs_realvfs;struct vnode *lfs_realrootvp;struct vfs lfs_vfs;};
struct lif_ifinfo_req {uint8_t lir_maxhops;uint32_t lir_reachtime;uint32_t lir_reachretrans;uint32_t lir_maxmtu;};
typedef struct lif_ifinfo_req lif_ifinfo_req_t;
struct lif_nd_req {struct sockaddr_storage lnr_addr;uint8_t lnr_state_create;uint8_t lnr_state_same_lla;uint8_t lnr_state_diff_lla;int lnr_hdw_len;int lnr_flags;int lnr_pad0;char lnr_hdw_addr[64];};
typedef struct lif_nd_req lif_nd_req_t;
struct lifconf {sa_family_t lifc_family;int lifc_flags;int lifc_len;union lifconf::$13CA4C53A4CDABC7C7076CCE366D4628 lifc_lifcu;};
union lifconf::$13CA4C53A4CDABC7C7076CCE366D4628 {caddr_t lifcu_buf;struct lifreq *lifcu_req;};
struct lifnum {sa_family_t lifn_family;int lifn_flags;int lifn_count;};
struct lifreq {char lifr_name[32];union lifreq::$45DD51CF1AA3D53B555DDF2404323785 lifr_lifru1;int lifr_pad0;union lifreq::$9C4034A34F2C584EFE8AFA556B44D076 lifr_lifru;};
union lifreq::$45DD51CF1AA3D53B555DDF2404323785 {int lifru_addrlen;uint_t lifru_ppa;};
union lifreq::$9C4034A34F2C584EFE8AFA556B44D076 {struct sockaddr_storage lifru_addr;struct sockaddr_storage lifru_dstaddr;struct sockaddr_storage lifru_broadaddr;struct sockaddr_storage lifru_token;struct sockaddr_storage lifru_subnet;int lifru_index;uint64_t lifru_flags;int lifru_metric;uint_t lifru_mtu;char lifru_data[1];char lifru_enaddr[6];int lif_muxid[2];struct lif_nd_req lifru_nd_req;struct lif_ifinfo_req lifru_ifinfo_req;};
struct lilpmap {ushort_t lilp_magic;ushort_t lilp_myalpa;uchar_t lilp_length;uchar_t lilp_list[127];};
struct lineno {union lineno::$4D6E082ABC3813EFAD274BDB52D637EC l_addr;unsigned __int16 l_lnno;};
union lineno::$4D6E082ABC3813EFAD274BDB52D637EC {int l_symndx;int l_paddr;};
struct lines {char *l_host;char *l_sys;char *l_dir;char *l_prefix;char *l_dev;char *l_peri;char *l_parm;char l_buf[100];};
struct linesw {int (*l_open)();int (*l_close)();int (*l_read)();int (*l_write)();int (*l_ioctl)();int (*l_input)();int (*l_output)();int (*l_mdmint)();};
struct linger {int l_onoff;int l_linger;};
struct link_map {unsigned int l_addr;char *l_name;Elf32_Dyn *l_ld;Link_map *l_next;Link_map *l_prev;char *l_refname;};
struct link_obj {zotypes li_rtype;struct link_obj::$6E2208C80A69EAD3D69988E63D048B29 li_attrs;nis_name li_name;};
struct link_obj::$6E2208C80A69EAD3D69988E63D048B29 {u_int li_attrs_len;nis_attr *li_attrs_val;};
struct linka {char *dir;char *link;};
struct linkblk {queue_t *l_qtop;queue_t *l_qbot;int l_index;};
typedef struct $B9BBC47815B70F123F5B3D4C1D596CE1 lk_options_t;
struct ll_snioc {uchar_t lli_type;uchar_t lli_spare[3];int lli_ppa;int lli_index;};
struct llc1 {struct llc1 *llc_next;struct llc1 *llc_prev;mblk_t *llc_mb;int llc_state;int llc_style;int llc_minor;int llc_type;int llc_sap;uchar_t llc_snap[5];int llc_waiting_for;int llc_flags;int llc_multicnt;llc_mcast_t **llc_mcast;queue_t *llc_qptr;kmutex_t llc_lock;struct llc_mac_info *llc_mac_info;struct llc_stats *llc_stats;};
struct llc1_multicast_addr {int llcm_refcnt;unsigned __int8 llcm_addr[6];};
typedef struct llc1 llc1_t;
typedef struct llc1device llc1dev_t;
struct llc1device {int llc1_status;krwlock_t llc1_rwlock;int llc1_minors;int llc1_multisize;llc_mac_info_t *llc1_mac_next;llc_mac_info_t *llc1_mac_prev;int llc1_ndevice;int llc1_nextppa;llc1_t *llc1_str_next;llc1_t *llc1_str_prev;};
typedef struct $501B9B174B09982FAB310FE6A591F791 llc2ConParms_t;
struct llc2GetConStats {uint_t ppa;uint_t cmd;uchar_t sap;ushort_t con;uchar_t clearFlag;uchar_t stateOldest;uchar_t stateOlder;uchar_t stateOld;uchar_t state;ushort_t sid;dlsap_t rem;ushort_t flag;uchar_t dataFlag;uchar_t k;uchar_t vs;uchar_t vr;uchar_t nrRcvd;ushort_t retryCount;uint_t numToBeAcked;uint_t numToResend;uint_t macOutSave;uint_t macOutDump;uchar_t timerOn;uint_t iSent;uint_t iRcvd;uint_t frmrSent;uint_t frmrRcvd;uint_t rrSent;uint_t rrRcvd;uint_t rnrSent;uint_t rnrRcvd;uint_t rejSent;uint_t rejRcvd;uint_t sabmeSent;uint_t sabmeRcvd;uint_t uaSent;uint_t uaRcvd;uint_t discSent;uint_t outOfState;uint_t allocFail;uint_t protocolError;uint_t localBusy;uint_t remoteBusy;uint_t maxRetryFail;uint_t ackTimerExp;uint_t pollTimerExp;uint_t rejTimerExp;uint_t remBusyTimerExp;uint_t inactTimerExp;uint_t sendAckTimerExp;};
typedef struct llc2GetConStats llc2GetConStats_t;
struct llc2GetSapStats {uint_t ppa;uint_t cmd;uchar_t sap;uchar_t clearFlag;uchar_t state;uint_t numCons;ushort_t cons[256];uint_t xidCmdSent;uint_t xidCmdRcvd;uint_t xidRspSent;uint_t xidRspRcvd;uint_t testCmdSent;uint_t testCmdRcvd;uint_t testRspSent;uint_t testRspRcvd;uint_t uiSent;uint_t uiRcvd;uint_t outOfState;uint_t allocFail;uint_t protocolError;};
typedef struct llc2GetSapStats llc2GetSapStats_t;
struct llc2GetStaStats {uint_t ppa;uint_t cmd;uchar_t clearFlag;uchar_t state;ushort_t numSaps;uchar_t saps[128];uint_t nullSapXidCmdRcvd;uint_t nullSapXidRspSent;uint_t nullSapTestCmdRcvd;uint_t nullSapTestRspSent;uint_t outOfState;uint_t allocFail;uint_t protocolError;};
typedef struct llc2GetStaStats llc2GetStaStats_t;
struct llc2Init {uint_t ppa;uint_t cmd;ushort_t ackTimerInt;ushort_t pollTimerInt;ushort_t rejTimerInt;ushort_t remBusyTimerInt;ushort_t inactTimerInt;ushort_t maxRetry;ushort_t xmitWindowSz;ushort_t rcvWindowSz;ushort_t timeinterval;ushort_t rspTimerInt;ushort_t loopback;};
typedef struct llc2Init llc2Init_t;
struct llc2Uninit {uint_t ppa;uint_t cmd;};
typedef struct llc2Uninit llc2Uninit_t;
typedef struct $8A57A83BA984F7959D9E22CB0CD4E5F7 llc2_ioctl_t;
typedef struct $725E3ED3C7EFF3B90CE6F33C2B731462 llc_con_parms_t;
struct llc_mac_info {struct llc_mac_info *llcp_next;struct llc_mac_info *llcp_prev;int llcp_flags;int llcp_maxpkt;int llcp_minpkt;int llcp_type;int llcp_addrlen;unsigned __int8 llcp_macaddr[6];unsigned __int8 llcp_broadcast[6];queue_t *llcp_queue;int llcp_lindex;int llcp_ppa;int llcp_sap;mblk_t *llcp_data;queue_t *llcp_dataq;mblk_t *llcp_mb;int llcp_nstreams;llc_mcast_t *llcp_mcast;struct llc_stats llcp_stats;kstat_t *llcp_kstatp;uint_t llcp_iocid;};
typedef struct llc_mac_info llc_mac_info_t;
typedef struct llc1_multicast_addr llc_mcast_t;
struct llc_stats {int llcs_nobuffer;int llcs_multixmt;int llcs_multircv;int llcs_brdcstxmt;int llcs_brdcstrcv;int llcs_blocked;int llcs_pktxmt;int llcs_pktrcv;int llcs_bytexmt;int llcs_bytercv;int llcs_xidxmt;int llcs_xidrcv;int llcs_testxmt;int llcs_testrcv;int llcs_ierrors;int llcs_oerrors;};
struct llcaddr {unsigned __int8 llca_addr[6];unsigned __int8 llca_sap;};
struct llchdr {unsigned __int8 llc_dsap;unsigned __int8 llc_ssap;unsigned __int8 llc_ctl;};
struct llchdr_xid {unsigned __int8 llcx_format;unsigned __int8 llcx_class;unsigned __int8 llcx_window;};
struct llcsaddr {unsigned __int8 llca_saddr[6];unsigned __int16 llca_ssap;};
typedef union $F99502BFD9E4DD069DB8AE6B087E28E4 lldaddr_t;
typedef struct $AC1F0727205AA235F31FA7E4FBAB6931 lldiv_t;
typedef union $8E64F109147703DFED6209FCF9267D5F lloff_t;
struct lm_block {lmb_state_t lmb_state;bool_t lmb_no_callback;struct flock64 *lmb_flk;netobj *lmb_id;struct lm_vnode *lmb_vn;struct lm_block *lmb_next;};
typedef struct lm_block lm_block_t;
struct lm_blockinfo {vnode_t *vp;int blocked;struct lm_sysid *ls;struct lm_nlm_disp *disp;struct lm_block *lmbp;union lm_blockinfo::$EAAFFCB58334A5EE6261E6C340DE312B unr;struct lm_xprt *xprt;};
union lm_blockinfo::$EAAFFCB58334A5EE6261E6C340DE312B {struct nlm_res *nr;struct nlm4_res *nr4;};
typedef struct lm_blockinfo lm_blockinfo_t;
struct lm_config {struct lm_config *next;struct file *fp;struct knetconfig config;};
enum lm_disp_how {LM_CALLBACK = 0x14,LM_SENDREPLY = 0x15,};
enum lm_disp_reply {LM_REPLY = 0xA,LM_DONT = 0xB,};
enum lm_fmly {LM_INET = 0x0,LM_INET6 = 0x1,LM_LOOPBACK = 0x2,};
typedef enum $AF741F3DDD464A30547A6EB63D463D95 lm_match_t;
struct lm_nlm_disp {void (*proc)(void *gen_args, void *gen_res, struct lm_nlm_disp *disp, struct lm_sysid *ls, uint_t xid);enum lm_disp_reply do_disp_reply;enum lm_disp_reply do_block_reply;enum lm_disp_how callback_reply;unsigned __int8 callback_proc;xdrproc_t xdrargs;xdrproc_t xdrres;};
enum lm_proto {LM_TCP = 0x0,LM_UDP = 0x1,};
typedef enum $5CAC3459AD204328D83E0EB10D8F388D lm_server_status_t;
struct lm_sleep {struct lm_sleep *next;struct lm_sysid *sysid;pid_t pid;struct netobj fh;struct netobj oh;u_offset_t offset;len_t length;bool_t in_use;bool_t waiting;kcondvar_t cv;vnode_t *vp;};
struct lm_stat {time_t start_time;int servers;int cookie;int async_len;int block_len;int client_len;int sleep_len;int tot_in;int tot_out;int bad_in;int bad_out;int proc_in[24];int proc_out[24];};
struct lm_svc_args {int version;int fd;enum lm_fmly n_fmly;enum lm_proto n_proto;dev_t n_rdev;int debug;time_t timout;int grace;time_t retransmittimeout;};
struct lm_sysid {struct lm_sysid *next;int refcnt;struct knetconfig config;struct netbuf addr;char *name;sysid_t sysid;bool_t sm_client;bool_t sm_server;bool_t in_recovery;int sm_state;kmutex_t lock;};
struct lm_vnode {struct vnode *vp;int count;struct lm_block *blocked;struct lm_vnode *next;nfs_fhandle fh2;nfs_fh3 fh3;};
struct lm_xprt {struct lm_xprt *next;SVCXPRT *xprt;kthread_t *thread;int valid;};
typedef enum $14C8EF536CF000E9A9D5F5EF83AA29EC lmb_state_t;
struct lmd {uint16_t lmd_ladr;uint8_t lmd_flags;unsigned __int8 lmd_hadr : 8;uint16_t lmd_bcnt;uint16_t lmd_mcnt;};
typedef struct lock_manager_pid_list lmpl_t;
struct lnode {struct lnode *lo_next;struct vnode *lo_vp;uint_t lo_looping;struct vnode *lo_crossedvp;struct vnode lo_vnode;};
typedef struct lnode lnode_t;
struct lock_descriptor {struct lock_descriptor *l_next;struct lock_descriptor *l_prev;struct edge l_edge;struct lock_descriptor *l_stack;struct lock_descriptor *l_stack1;struct lock_descriptor *l_dstack;struct edge *l_sedge;int l_index;struct graph *l_graph;vnode_t *l_vnode;int l_type;int l_state;u_offset_t l_start;u_offset_t l_len;flock64_t l_flock;int l_color;kcondvar_t l_cv;int pvertex;int l_status;flk_nlm_status_t l_nlm_state;};
typedef struct lock_descriptor lock_descriptor_t;
struct lock_manager_pid_list {int lmpl_type;pid_t lmpl_pid;union lock_manager_pid_list::$4DC38F0FE7A8191D13CDBC3374F7BD69 un;struct lock_manager_pid_list *lmpl_next;};
union lock_manager_pid_list::$4DC38F0FE7A8191D13CDBC3374F7BD69 {pid_t _pid;struct lock_manager_pid_list::$4DC38F0FE7A8191D13CDBC3374F7BD69::$DC12B69B71FCF6E7CE697C9B98D1D920 _own;};
struct lock_manager_pid_list::$4DC38F0FE7A8191D13CDBC3374F7BD69::$DC12B69B71FCF6E7CE697C9B98D1D920 {int len;char *owner;};
typedef unsigned __int8 lock_t;
enum lock_type {L_PAGELOCK = 0x0,L_PAGEUNLOCK = 0x1,L_PAGERECLAIM = 0x2,};
struct lockfs {ulong_t lf_lock;ulong_t lf_flags;ulong_t lf_key;ulong_t lf_comlen;caddr_t lf_comment;};
struct lofi_ioctl {uint32_t li_minor;char li_filename[1025];};
struct log {queue_t *log_q;log_filter_t *log_wanted;mblk_t *log_data;__int16 log_flags;int log_overflow;};
struct log_ctl {__int16 mid;__int16 sid;char level;__int16 flags;clock_t ltime;time_t ttime;int seq_no;int pri;};
typedef struct log_ctl log_ctl_t;
struct log_dump {uint32_t ld_magic;uint32_t ld_msgsize;uint32_t ld_csum;uint32_t ld_msum;};
typedef struct log_dump log_dump_t;
struct log_entry {uint32_t le_time;log_entry_t le_type;nis_name le_princp;nis_name le_name;struct log_entry::$1E639176190539C4AF5A837E820AE922 le_attrs;nis_object le_object;};
struct log_entry::$1E639176190539C4AF5A837E820AE922 {u_int le_attrs_len;nis_attr *le_attrs_val;};
enum log_entry_t {LOG_NOP = 0x0,ADD_NAME = 0x1,REM_NAME = 0x2,MOD_NAME_OLD = 0x3,MOD_NAME_NEW = 0x4,ADD_IBASE = 0x5,REM_IBASE = 0x6,MOD_IBASE = 0x7,UPD_STAMP = 0x8,};
typedef int log_filter_t(log_t *, log_ctl_t *);
struct log_page {unsigned __int8 : 2;unsigned __int8 code : 6;unsigned __int8 reserved;uchar_t length_hi;uchar_t length_lo;};
struct log_param {uchar_t pc_hi;uchar_t pc_lo;unsigned __int8 du : 1;unsigned __int8 ds : 1;unsigned __int8 tsd : 1;unsigned __int8 etc : 1;unsigned __int8 tmc : 2;unsigned __int8 : 1;unsigned __int8 lp : 1;unsigned __int8 length;};
struct log_result {nis_error lr_status;netobj lr_cookie;struct log_result::$946B3E427CBAEF2C8E64E80E43621ACD lr_entries;};
struct log_result::$946B3E427CBAEF2C8E64E80E43621ACD {u_int lr_entries_len;log_entry *lr_entries_val;};
typedef struct log log_t;
struct log_vol_desc {tag_t lvd_tag;uint32_t lvd_vdsn;charspec_t lvd_desc_cs;dstring_t lvd_lvid[128];uint32_t lvd_log_bsize;regid_t lvd_dom_id;long_ad_t lvd_lvcu;uint32_t lvd_mtbl_len;uint32_t lvd_num_pmaps;regid_t lvd_ii;uint8_t lvd_iu[128];extent_ad_t lvd_int_seq_ext;uint8_t lvd_pmaps[72];};
typedef struct log_vol_desc log_vol_desc_t;
struct log_vol_hdr_desc {uint64_t lvhd_uniqid;uint8_t lvhd_pad[24];};
typedef struct log_vol_hdr_desc log_vol_hdr_desc_t;
struct log_vol_int_desc {tag_t lvid_tag;tstamp_t lvid_tstamp;uint32_t lvid_int_type;extent_ad_t lvid_nie;log_vol_hdr_desc_t lvid_lvcu;uint32_t lvid_npart;uint32_t lvid_liu;uint32_t lvid_fst[2];};
typedef struct log_vol_int_desc log_vol_int_desc_t;
struct loghdr {int h_pgrp;};
struct loinfo {struct vfs *li_realvfs;struct vfs *li_mountvfs;struct vnode *li_rootvp;int li_mflag;int li_refct;dev_t li_rdev;struct lfsnode *li_lfs;};
struct long_ad {uint32_t lad_ext_len;uint32_t lad_ext_loc;uint16_t lad_ext_prn;char lad_iu[6];};
typedef struct long_ad long_ad_t;
typedef __int64 longlong_t;
struct lookup_result_type {autofs_action action;union lookup_result_type::$140B16D067C68AF228EDC44C385D8FF8 lookup_result_type_u;};
union lookup_result_type::$140B16D067C68AF228EDC44C385D8FF8 {struct linka lt_linka;};
struct lrusage {u_longlong_t minflt;u_longlong_t majflt;u_longlong_t nswap;u_longlong_t inblock;u_longlong_t oublock;u_longlong_t msgsnd;u_longlong_t msgrcv;u_longlong_t nsignals;u_longlong_t nvcsw;u_longlong_t nivcsw;u_longlong_t sysc;u_longlong_t ioch;};
struct ls_pend {uintptr_t lp_lock;uintptr_t lp_owner;hrtime_t lp_start_time;uint32_t lp_refcnt;uintptr_t lp_caller;lock_t lp_mylock;};
typedef struct ls_pend ls_pend_t;
struct lsctl {size_t lc_recsize;size_t lc_nrecs;hrtime_t lc_interval;uchar_t lc_event[64];hrtime_t lc_min_duration[64];lswatch_t lc_wlock[33];lswatch_t lc_wfunc[33];};
typedef struct lsctl lsctl_t;
struct lsrec {struct lsrec *ls_next;uintptr_t ls_lock;uintptr_t ls_caller;uint32_t ls_count;uint32_t ls_event;uintptr_t ls_refcnt;uint64_t ls_time;uint32_t ls_hist[64];uintptr_t ls_stack[50];};
typedef struct lsrec lsrec_t;
struct lswatch {uintptr_t lw_base;size_t lw_size;};
typedef struct lswatch lswatch_t;
struct ltchars {char t_suspc;char t_dsuspc;char t_rprntc;char t_flushc;char t_werasc;char t_lnextc;};
struct lufs_buf {buf_t lb_buf;void *lb_ptr;};
typedef struct lufs_buf lufs_buf_t;
struct lufs_save {buf_t *sv_bp;size_t sv_nb_left;int sv_error;};
typedef struct lufs_save lufs_save_t;
struct lvid_iu {regid_t lvidiu_regid;uint32_t lvidiu_nfiles;uint32_t lvidiu_ndirs;uint16_t lvidiu_mread;uint16_t lvidiu_mwrite;uint16_t lvidiu_maxwr;};
typedef struct _lwp_cond lwp_cond_t;
typedef struct _lwp_mutex lwp_mutex_t;
typedef struct _lwp_sema lwp_sema_t;
typedef struct $1186758DF1720BB7F25A7D498E851913 lwpchan_t;
typedef unsigned int lwpid_t;
struct lwpinfo {timestruc_t lwp_utime;timestruc_t lwp_stime;int lwpinfo_pad[64];};
struct lwpsinfo {int pr_flag;id_t pr_lwpid;uintptr_t pr_addr;uintptr_t pr_wchan;char pr_stype;char pr_state;char pr_sname;char pr_nice;__int16 pr_syscall;char pr_oldpri;char pr_cpu;int pr_pri;ushort_t pr_pctcpu;ushort_t pr_pad;timestruc_t pr_start;timestruc_t pr_time;char pr_clname[8];char pr_name[16];processorid_t pr_onpro;processorid_t pr_bindpro;psetid_t pr_bindpset;int pr_filler[5];};
typedef struct lwpsinfo lwpsinfo_t;
struct lwpstatus {int pr_flags;id_t pr_lwpid;__int16 pr_why;__int16 pr_what;__int16 pr_cursig;__int16 pr_pad1;siginfo_t pr_info;sigset_t pr_lwppend;sigset_t pr_lwphold;struct sigaction pr_action;stack_t pr_altstack;uintptr_t pr_oldcontext;__int16 pr_syscall;__int16 pr_nsysarg;int pr_errno;int pr_sysarg[8];int pr_rval1;int pr_rval2;char pr_clname[8];timestruc_t pr_tstamp;int pr_filler[12];ulong_t pr_pad2;ulong_t pr_instr;prgregset_t pr_reg;prfpregset_t pr_fpreg;};
typedef struct lwpstatus lwpstatus_t;
struct mace {uchar_t rcvfifo;uchar_t xmtfifo;uchar_t xmtfc;uchar_t xmtfs;uchar_t xmtrc;uchar_t rcvfc;uchar_t rcvfs;uchar_t fifofc;uchar_t ir;uchar_t imr;uchar_t pr;uchar_t biucc;uchar_t fifocc;uchar_t maccc;uchar_t plscc;uchar_t phycc;uchar_t chipidlo;uchar_t chipidhi;uchar_t iac;uchar_t reserved0;uchar_t ladrf;uchar_t padr;uchar_t reserved1;uchar_t reserved2;uchar_t mpc;uchar_t reserved3;uchar_t rntpc;uchar_t rcvcc;uchar_t reserved4;uchar_t utr;uchar_t rtr1;uchar_t rtr2;};
typedef uint32_t major32_t;
typedef ulong_t major_t;
struct mallinfo {unsigned int arena;unsigned int ordblks;unsigned int smblks;unsigned int hblks;unsigned int hblkhd;unsigned int usmblks;unsigned int fsmblks;unsigned int uordblks;unsigned int fordblks;unsigned int keepcost;};
struct map;
struct mapentry {mapentry_t *me_next;mapentry_t *me_prev;mapentry_t *me_hash;mapentry_t *me_agenext;mapentry_t *me_cancel;int (*me_func)();ulong_t me_arg;off_t me_lof;ulong_t me_flags;uint32_t me_tid;ulong_t me_age;struct delta me_delta;};
typedef struct mapentry mapentry_t;
enum maptypes {deltamaptype = 0x0,udmaptype = 0x1,logmaptype = 0x2,matamaptype = 0x3,};
typedef struct msgb mblk_t;
struct mboot {char bootinst[446];char parts[64];ushort_t signature;};
typedef __mbstate_t mbstate_t;
typedef struct $D8694504BF76A56B9D38A17C122FF30C mcontext_t;
struct mdb_arg {mdb_type_t a_type;union mdb_arg::$23C4DC01D1EF29DAF9BB24B228A431B7 a_un;};
union mdb_arg::$23C4DC01D1EF29DAF9BB24B228A431B7 {const char *a_str;uintmax_t a_val;char a_char;};
typedef struct mdb_arg mdb_arg_t;
struct mdb_bitmask {const char *bm_name;u_longlong_t bm_mask;u_longlong_t bm_bits;};
typedef struct mdb_bitmask mdb_bitmask_t;
struct mdb_dcmd {const char *dc_name;const char *dc_usage;const char *dc_descr;mdb_dcmd_f *dc_funcp;void (*dc_help)(void);};
typedef int mdb_dcmd_f(uintptr_t, uint_t, int, const mdb_arg_t *);
typedef struct mdb_dcmd mdb_dcmd_t;
struct mdb_modinfo {ushort_t mi_dvers;const mdb_dcmd_t *mi_dcmds;const mdb_walker_t *mi_walkers;};
typedef struct mdb_modinfo mdb_modinfo_t;
struct mdb_pipe {uintptr_t *pipe_data;size_t pipe_len;};
typedef struct mdb_pipe mdb_pipe_t;
typedef enum $3C9CBA2A05837AB5EE7067EF57B45517 mdb_type_t;
typedef int (*mdb_walk_cb_t)(uintptr_t, const void *, void *);
struct mdb_walk_state {mdb_walk_cb_t walk_callback;void *walk_cbdata;uintptr_t walk_addr;void *walk_data;void *walk_arg;const void *walk_layer;};
typedef struct mdb_walk_state mdb_walk_state_t;
struct mdb_walker {const char *walk_name;const char *walk_descr;int (*walk_init)(mdb_walk_state_t *);int (*walk_step)(mdb_walk_state_t *);void (*walk_fini)(mdb_walk_state_t *);void *walk_init_arg;};
typedef struct mdb_walker mdb_walker_t;
struct mdi_buffer_info {int b_num_bufs;int b_cur_buf;off_t b_buf_offset;};
struct mdi_cfginfo {int mdi_ncluts;int mdi_type;int mdi_height;int mdi_width;int mdi_size;int mdi_mode;int mdi_pixfreq;};
struct mdi_clut_address {uint_t c_clut[256];uint_t c_clutd[256];uint_t c_clut_inc[256];uint_t c_clutd_inc[256];};
struct mdi_cursor_address {ulong_t curs_cpl0[32];ulong_t curs_cpl1[32];uchar_t curs_ccr;uchar_t curs_pad0[3];ushort_t curs_xcu;ushort_t curs_ycu;uint_t curs_cc1;uint_t curs_cc2;uint_t curs_pad1[444];ulong_t curs_cpl0i[32];ulong_t curs_cpl1i[32];};
struct mdi_cursor_info {uint_t curs_enable0[32];uchar_t curs_ctl;ushort_t curs_xpos;ushort_t curs_ypos;};
struct mdi_dac_address {uchar_t dac_addr_reg;uchar_t dac_pad0[255];uchar_t dac_glut;uchar_t dac_pad1[255];uchar_t dac_reg_select;uchar_t dac_pad2[255];uchar_t dac_mode_reg;};
struct mdi_diaginfo {struct mdi_cfginfo mdi_cfg;int mdi_mihdel;int mdi_gstate;};
struct mdi_register_address {union mdi_register_address::$6A5DEE847BEB548DCD7E1DF7A09F1176 m_mcr;uchar_t m_ppr;uchar_t m_tmsr0;uchar_t m_tmsr1;uchar_t m_msr;uchar_t m_fsr;struct mdi_register_address::$8AF1E4FBAF14D0237CF30F045044651E m_rsr;uchar_t m_ccr;uint_t m_tmr;uchar_t m_mod;uchar_t m_acr;uchar_t m_pad0[6];ushort_t m_hct;ushort_t m_vct;ushort_t m_hbs;ushort_t m_hbc;ushort_t m_hss;ushort_t m_hsc;ushort_t m_csc;ushort_t m_vbs;ushort_t m_vbc;ushort_t m_vss;ushort_t m_vsc;ushort_t m_xcs;ushort_t m_xcc;ushort_t m_fsa;ushort_t m_adr;uchar_t m_pad2[206];uchar_t m_pcg[256];struct mdi_register_address::$B4F8CB07784CFCBDA9ED96F36DDE887E v_vbr;union mdi_register_address::$3B049E4E80A4E7835BDCE597C02848A0 v_mcr;union mdi_register_address::$1D710587ACD8F96B72E62202A6B4467B v_vcr;struct mdi_register_address::$77CD747F4C29F871554116EFE8364197 v_vca;uchar_t m_pad3[240];};
union mdi_register_address::$1D710587ACD8F96B72E62202A6B4467B {struct mdi_register_address::$1D710587ACD8F96B72E62202A6B4467B::$AAF521FFECC16E0F4B08F725D6CA6B0D v_vcr1;struct mdi_register_address::$1D710587ACD8F96B72E62202A6B4467B::$7408794E9FAFA6D3794D2FEFC05E2672 v_vcr2;};
struct mdi_register_address::$1D710587ACD8F96B72E62202A6B4467B::$7408794E9FAFA6D3794D2FEFC05E2672 {unsigned __int32 res0 : 21;unsigned __int32 ref_req : 10;};
struct mdi_register_address::$1D710587ACD8F96B72E62202A6B4467B::$AAF521FFECC16E0F4B08F725D6CA6B0D {unsigned __int32 res0 : 21;unsigned __int32 ref_ena : 1;unsigned __int32 ref_req : 10;};
union mdi_register_address::$3B049E4E80A4E7835BDCE597C02848A0 {struct mdi_register_address::$3B049E4E80A4E7835BDCE597C02848A0::$038C17E0070C4E198CB4CFD3D7418D00 v_mcr1;struct mdi_register_address::$3B049E4E80A4E7835BDCE597C02848A0::$317870EC7F9E5F5CA168BD5488628DA7 v_mcr2;};
struct mdi_register_address::$3B049E4E80A4E7835BDCE597C02848A0::$038C17E0070C4E198CB4CFD3D7418D00 {unsigned __int32 res0 : 21;unsigned __int32 vconfig : 2;unsigned __int32 r_setup : 9;};
struct mdi_register_address::$3B049E4E80A4E7835BDCE597C02848A0::$317870EC7F9E5F5CA168BD5488628DA7 {unsigned __int32 res0 : 28;unsigned __int32 fbconfig : 2;unsigned __int32 trc : 1;unsigned __int32 refresh : 1;};
union mdi_register_address::$6A5DEE847BEB548DCD7E1DF7A09F1176 {struct mdi_register_address::$6A5DEE847BEB548DCD7E1DF7A09F1176::$0B2A96B84180496199ED52D5315E28CF mcr1;struct mdi_register_address::$6A5DEE847BEB548DCD7E1DF7A09F1176::$AB6D7823DFFA587DE3AB49922CD65E6D mcr2;};
struct mdi_register_address::$6A5DEE847BEB548DCD7E1DF7A09F1176::$0B2A96B84180496199ED52D5315E28CF {unsigned __int8 intr_ena : 1;unsigned __int8 vid_ena : 1;unsigned __int8 pixmode : 2;unsigned __int8 tmr : 2;unsigned __int8 tm_ena : 1;unsigned __int8 reset : 1;};
struct mdi_register_address::$6A5DEE847BEB548DCD7E1DF7A09F1176::$AB6D7823DFFA587DE3AB49922CD65E6D {unsigned __int8 intr_ena : 1;unsigned __int8 blank : 1;unsigned __int8 pixmode : 2;unsigned __int8 tmr : 2;unsigned __int8 tm_ena : 1;unsigned __int8 vid_ena : 1;};
struct mdi_register_address::$77CD747F4C29F871554116EFE8364197 {unsigned __int32 res0 : 18;unsigned __int32 hires : 1;unsigned __int32 ramspeed : 1;unsigned __int32 version : 2;unsigned __int32 cad : 10;};
struct mdi_register_address::$8AF1E4FBAF14D0237CF30F045044651E {unsigned __int8 revision : 4;unsigned __int8 impl : 4;};
struct mdi_register_address::$B4F8CB07784CFCBDA9ED96F36DDE887E {unsigned __int32 res0 : 8;unsigned __int32 framebase : 12;unsigned __int32 res1 : 12;};
struct mdi_set_clut {int lut;int index;int count;uchar_t *alpha;uchar_t *red;uchar_t *green;uchar_t *blue;};
struct mdi_set_counters {ushort_t m_hct;ushort_t m_vct;ushort_t m_hbs;ushort_t m_hbc;ushort_t m_hss;ushort_t m_hsc;ushort_t m_csc;ushort_t m_vbs;ushort_t m_vbc;ushort_t m_vss;ushort_t m_vsc;ushort_t m_xcs;ushort_t m_xcc;};
struct mdi_set_degammalut {int index;int count;uchar_t *degamma;};
struct mdi_set_gammalut {int index;int count;unsigned __int16 *red;unsigned __int16 *green;unsigned __int16 *blue;};
struct mdi_set_resolution {int pixelfreq;int hfreq;int hfporch;int hsync;int hbporch;int hvistime;int hblanking;int vfreq;int vfporch;int vsync;int vbporch;int vvistime;int vblanking;};
struct mdi_set_xlut {int index;int count;uchar_t *xbuf;uchar_t *maskbuf;int mask;};
struct mdi_xlut_address {uchar_t x_xlut[256];uchar_t x_xlutd[256];uchar_t x_pad0[1536];uchar_t x_xlut_inc[256];uchar_t x_xlutd_inc[256];};
struct mem_vtop {struct as *m_as;void *m_va;pfn_t m_pfn;};
typedef struct mem_vtop mem_vtop_t;
struct memid {u_longlong_t val[2];};
typedef struct memid memid_t;
struct memlist {uint64_t address;uint64_t size;struct memlist *next;struct memlist *prev;};
struct memropc {ushort_t mrc_dest;ushort_t mrc_source1;ushort_t mrc_source2;ushort_t mrc_pattern;ushort_t mrc_mask1;ushort_t mrc_mask2;__int16 mrc_shift;__int16 mrc_op;__int16 mrc_width;__int16 mrc_opcount;__int16 mrc_decoderout;__int16 mrc_x11;__int16 mrc_x12;__int16 mrc_x13;__int16 mrc_x14;__int16 mrc_x15;};
struct mfb_cmap {uchar_t addr;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 cmap;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 ctrl;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 omap;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 : 8;};
struct mfb_reg {struct mfb_cmap cmap;uchar_t control;uchar_t status;uchar_t cursor_start;uchar_t cursor_end;uchar_t h_blank_set;uchar_t h_blank_clear;uchar_t h_sync_set;uchar_t h_sync_clear;uchar_t comp_sync_clear;uchar_t v_blank_set_high;uchar_t v_blank_set_low;uchar_t v_blank_clear;uchar_t v_sync_set;uchar_t v_sync_clear;uchar_t xfer_holdoff_set;uchar_t xfer_holdoff_clear;};
struct mfcctl {struct in_addr mfcc_origin;struct in_addr mfcc_mcastgrp;vifi_t mfcc_parent;uint_t mfcc_pkt_cnt;uchar_t mfcc_ttls[32];};
struct mhioc_inkeys {uint32_t generation;mhioc_key_list_t *li;};
typedef struct mhioc_inkeys mhioc_inkeys_t;
struct mhioc_inresvs {uint32_t generation;mhioc_resv_desc_list_t *li;};
typedef struct mhioc_inresvs mhioc_inresvs_t;
struct mhioc_key_list {uint32_t listsize;uint32_t listlen;mhioc_resv_key_t *list;};
typedef struct mhioc_key_list mhioc_key_list_t;
struct mhioc_preemptandabort {mhioc_resv_desc_t resvdesc;mhioc_resv_key_t victim_key;};
typedef struct mhioc_preemptandabort mhioc_preemptandabort_t;
struct mhioc_register {mhioc_resv_key_t oldkey;mhioc_resv_key_t newkey;boolean_t aptpl;};
typedef struct mhioc_register mhioc_register_t;
struct mhioc_resv_desc {mhioc_resv_key_t key;uint8_t type;uint8_t scope;uint32_t scope_specific_addr;};
struct mhioc_resv_desc_list {uint32_t listsize;uint32_t listlen;mhioc_resv_desc_t *list;};
typedef struct mhioc_resv_desc_list mhioc_resv_desc_list_t;
typedef struct mhioc_resv_desc mhioc_resv_desc_t;
struct mhioc_resv_key {uchar_t key[8];};
typedef struct mhioc_resv_key mhioc_resv_key_t;
struct mhioctkown {int reinstate_resv_delay;int min_ownership_delay;int max_ownership_delay;};
struct mib2_icmp {Counter icmpInMsgs;Counter icmpInErrors;Counter icmpInDestUnreachs;Counter icmpInTimeExcds;Counter icmpInParmProbs;Counter icmpInSrcQuenchs;Counter icmpInRedirects;Counter icmpInEchos;Counter icmpInEchoReps;Counter icmpInTimestamps;Counter icmpInTimestampReps;Counter icmpInAddrMasks;Counter icmpInAddrMaskReps;Counter icmpOutMsgs;Counter icmpOutErrors;Counter icmpOutDestUnreachs;Counter icmpOutTimeExcds;Counter icmpOutParmProbs;Counter icmpOutSrcQuenchs;Counter icmpOutRedirects;Counter icmpOutEchos;Counter icmpOutEchoReps;Counter icmpOutTimestamps;Counter icmpOutTimestampReps;Counter icmpOutAddrMasks;Counter icmpOutAddrMaskReps;Counter icmpInCksumErrs;Counter icmpInUnknowns;Counter icmpInFragNeeded;Counter icmpOutFragNeeded;Counter icmpOutDrops;Counter icmpInOverflows;Counter icmpInBadRedirects;};
typedef struct mib2_icmp mib2_icmp_t;
struct mib2_ip {int ipForwarding;int ipDefaultTTL;Counter ipInReceives;Counter ipInHdrErrors;Counter ipInAddrErrors;Counter ipForwDatagrams;Counter ipInUnknownProtos;Counter ipInDiscards;Counter ipInDelivers;Counter ipOutRequests;Counter ipOutDiscards;Counter ipOutNoRoutes;int ipReasmTimeout;Counter ipReasmReqds;Counter ipReasmOKs;Counter ipReasmFails;Counter ipFragOKs;Counter ipFragFails;Counter ipFragCreates;int ipAddrEntrySize;int ipRouteEntrySize;int ipNetToMediaEntrySize;Counter ipRoutingDiscards;Counter tcpInErrs;Counter udpNoPorts;Counter ipInCksumErrs;Counter ipReasmDuplicates;Counter ipReasmPartDups;Counter ipForwProhibits;Counter udpInCksumErrs;Counter udpInOverflows;Counter rawipInOverflows;Counter ipsecInSucceeded;Counter ipsecInFailed;int ipMemberEntrySize;Counter ipInIPv6;Counter ipOutIPv6;Counter ipOutSwitchIPv6;};
struct mib2_ipAddrEntry {IpAddress ipAdEntAddr;DeviceName ipAdEntIfIndex;IpAddress ipAdEntNetMask;int ipAdEntBcastAddr;int ipAdEntReasmMaxSize;struct mib2_ipAddrEntry::ipAdEntInfo_s ipAdEntInfo;};
struct mib2_ipAddrEntry::ipAdEntInfo_s {Gauge ae_mtu;int ae_metric;IpAddress ae_broadcast_addr;IpAddress ae_pp_dst_addr;int ae_flags;Counter ae_ibcnt;Counter ae_obcnt;Counter ae_focnt;IpAddress ae_subnet;int ae_subnet_len;IpAddress ae_src_addr;};
typedef struct mib2_ipAddrEntry mib2_ipAddrEntry_t;
struct mib2_ipNetToMediaEntry {DeviceName ipNetToMediaIfIndex;PhysAddress ipNetToMediaPhysAddress;IpAddress ipNetToMediaNetAddress;int ipNetToMediaType;struct mib2_ipNetToMediaEntry::ipNetToMediaInfo_s ipNetToMediaInfo;};
struct mib2_ipNetToMediaEntry::ipNetToMediaInfo_s {PhysAddress ntm_mask;int ntm_flags;};
typedef struct mib2_ipNetToMediaEntry mib2_ipNetToMediaEntry_t;
struct mib2_ipRouteEntry {IpAddress ipRouteDest;DeviceName ipRouteIfIndex;int ipRouteMetric1;int ipRouteMetric2;int ipRouteMetric3;int ipRouteMetric4;IpAddress ipRouteNextHop;int ipRouteType;int ipRouteProto;int ipRouteAge;IpAddress ipRouteMask;int ipRouteMetric5;struct mib2_ipRouteEntry::ipRouteInfo_s ipRouteInfo;};
struct mib2_ipRouteEntry::ipRouteInfo_s {Gauge re_max_frag;Gauge re_rtt;Counter re_ref;int re_frag_flag;IpAddress re_src_addr;int re_ire_type;Counter re_obpkt;Counter re_ibpkt;int re_flags;};
typedef struct mib2_ipRouteEntry mib2_ipRouteEntry_t;
typedef struct mib2_ip mib2_ip_t;
struct mib2_ipv6AddrEntry {DeviceName ipv6AddrIfIndex;Ip6Address ipv6AddrAddress;uint_t ipv6AddrPfxLength;uint_t ipv6AddrType;uint_t ipv6AddrAnycastFlag;uint_t ipv6AddrStatus;struct mib2_ipv6AddrEntry::ipv6AddrInfo_s ipv6AddrInfo;};
struct mib2_ipv6AddrEntry::ipv6AddrInfo_s {Gauge ae_mtu;int ae_metric;Ip6Address ae_pp_dst_addr;int ae_flags;Counter ae_ibcnt;Counter ae_obcnt;Counter ae_focnt;Ip6Address ae_subnet;int ae_subnet_len;Ip6Address ae_src_addr;};
typedef struct mib2_ipv6AddrEntry mib2_ipv6AddrEntry_t;
struct mib2_ipv6IfIcmpEntry {DeviceIndex ipv6IfIcmpIfIndex;int ipv6IfIcmpEntrySize;Counter32 ipv6IfIcmpInMsgs;Counter32 ipv6IfIcmpInErrors;Counter32 ipv6IfIcmpInDestUnreachs;Counter32 ipv6IfIcmpInAdminProhibs;Counter32 ipv6IfIcmpInTimeExcds;Counter32 ipv6IfIcmpInParmProblems;Counter32 ipv6IfIcmpInPktTooBigs;Counter32 ipv6IfIcmpInEchos;Counter32 ipv6IfIcmpInEchoReplies;Counter32 ipv6IfIcmpInRouterSolicits;Counter32 ipv6IfIcmpInRouterAdvertisements;Counter32 ipv6IfIcmpInNeighborSolicits;Counter32 ipv6IfIcmpInNeighborAdvertisements;Counter32 ipv6IfIcmpInRedirects;Counter32 ipv6IfIcmpInGroupMembQueries;Counter32 ipv6IfIcmpInGroupMembResponses;Counter32 ipv6IfIcmpInGroupMembReductions;Counter32 ipv6IfIcmpOutMsgs;Counter32 ipv6IfIcmpOutErrors;Counter32 ipv6IfIcmpOutDestUnreachs;Counter32 ipv6IfIcmpOutAdminProhibs;Counter32 ipv6IfIcmpOutTimeExcds;Counter32 ipv6IfIcmpOutParmProblems;Counter32 ipv6IfIcmpOutPktTooBigs;Counter32 ipv6IfIcmpOutEchos;Counter32 ipv6IfIcmpOutEchoReplies;Counter32 ipv6IfIcmpOutRouterSolicits;Counter32 ipv6IfIcmpOutRouterAdvertisements;Counter32 ipv6IfIcmpOutNeighborSolicits;Counter32 ipv6IfIcmpOutNeighborAdvertisements;Counter32 ipv6IfIcmpOutRedirects;Counter32 ipv6IfIcmpOutGroupMembQueries;Counter32 ipv6IfIcmpOutGroupMembResponses;Counter32 ipv6IfIcmpOutGroupMembReductions;Counter32 ipv6IfIcmpInOverflows;Counter32 ipv6IfIcmpBadHoplimit;Counter32 ipv6IfIcmpInBadNeighborAdvertisements;Counter32 ipv6IfIcmpInBadNeighborSolicitations;Counter32 ipv6IfIcmpInBadRedirects;Counter32 ipv6IfIcmpInGroupMembTotal;Counter32 ipv6IfIcmpInGroupMembBadQueries;Counter32 ipv6IfIcmpInGroupMembBadReports;Counter32 ipv6IfIcmpInGroupMembOurReports;};
typedef struct mib2_ipv6IfIcmpEntry mib2_ipv6IfIcmpEntry_t;
struct mib2_ipv6IfStatsEntry {DeviceIndex ipv6IfIndex;int ipv6Forwarding;int ipv6DefaultHopLimit;int ipv6IfStatsEntrySize;int ipv6AddrEntrySize;int ipv6RouteEntrySize;int ipv6NetToMediaEntrySize;int ipv6MemberEntrySize;Counter ipv6InReceives;Counter ipv6InHdrErrors;Counter ipv6InTooBigErrors;Counter ipv6InNoRoutes;Counter ipv6InAddrErrors;Counter ipv6InUnknownProtos;Counter ipv6InTruncatedPkts;Counter ipv6InDiscards;Counter ipv6InDelivers;Counter ipv6OutForwDatagrams;Counter ipv6OutRequests;Counter ipv6OutDiscards;Counter ipv6OutFragOKs;Counter ipv6OutFragFails;Counter ipv6OutFragCreates;Counter ipv6ReasmReqds;Counter ipv6ReasmOKs;Counter ipv6ReasmFails;Counter ipv6InMcastPkts;Counter ipv6OutMcastPkts;Counter ipv6OutNoRoutes;Counter ipv6ReasmDuplicates;Counter ipv6ReasmPartDups;Counter ipv6ForwProhibits;Counter udpInCksumErrs;Counter udpInOverflows;Counter rawipInOverflows;Counter ipv6InIPv4;Counter ipv6OutIPv4;Counter ipv6OutSwitchIPv4;};
typedef struct mib2_ipv6IfStatsEntry mib2_ipv6IfStatsEntry_t;
struct mib2_ipv6NetToMediaEntry {DeviceIndex ipv6NetToMediaIfIndex;Ip6Address ipv6NetToMediaNetAddress;PhysAddress ipv6NetToMediaPhysAddress;int ipv6NetToMediaType;int ipv6NetToMediaState;int ipv6NetToMediaLastUpdated;};
typedef struct mib2_ipv6NetToMediaEntry mib2_ipv6NetToMediaEntry_t;
struct mib2_ipv6RouteEntry {Ip6Address ipv6RouteDest;int ipv6RoutePfxLength;unsigned int ipv6RouteIndex;DeviceName ipv6RouteIfIndex;Ip6Address ipv6RouteNextHop;int ipv6RouteType;int ipv6RouteProtocol;unsigned int ipv6RoutePolicy;int ipv6RouteAge;unsigned int ipv6RouteNextHopRDI;unsigned int ipv6RouteMetric;unsigned int ipv6RouteWeight;struct mib2_ipv6RouteEntry::ipv6RouteInfo_s ipv6RouteInfo;};
struct mib2_ipv6RouteEntry::ipv6RouteInfo_s {Gauge re_max_frag;Gauge re_rtt;Counter re_ref;int re_frag_flag;Ip6Address re_src_addr;int re_ire_type;Counter re_obpkt;Counter re_ibpkt;int re_flags;};
typedef struct mib2_ipv6RouteEntry mib2_ipv6RouteEntry_t;
struct mib2_rawip {Counter rawipInDatagrams;Counter rawipInCksumErrs;Counter rawipInErrors;Counter rawipOutDatagrams;Counter rawipOutErrors;};
typedef struct mib2_rawip mib2_rawip_t;
struct mib2_tcp {int tcpRtoAlgorithm;int tcpRtoMin;int tcpRtoMax;int tcpMaxConn;Counter tcpActiveOpens;Counter tcpPassiveOpens;Counter tcpAttemptFails;Counter tcpEstabResets;Gauge tcpCurrEstab;Counter tcpInSegs;Counter tcpOutSegs;Counter tcpRetransSegs;int tcpConnTableSize;Counter tcpOutRsts;Counter tcpOutDataSegs;Counter tcpOutDataBytes;Counter tcpRetransBytes;Counter tcpOutAck;Counter tcpOutAckDelayed;Counter tcpOutUrg;Counter tcpOutWinUpdate;Counter tcpOutWinProbe;Counter tcpOutControl;Counter tcpOutFastRetrans;Counter tcpInAckSegs;Counter tcpInAckBytes;Counter tcpInDupAck;Counter tcpInAckUnsent;Counter tcpInDataInorderSegs;Counter tcpInDataInorderBytes;Counter tcpInDataUnorderSegs;Counter tcpInDataUnorderBytes;Counter tcpInDataDupSegs;Counter tcpInDataDupBytes;Counter tcpInDataPartDupSegs;Counter tcpInDataPartDupBytes;Counter tcpInDataPastWinSegs;Counter tcpInDataPastWinBytes;Counter tcpInWinProbe;Counter tcpInWinUpdate;Counter tcpInClosed;Counter tcpRttNoUpdate;Counter tcpRttUpdate;Counter tcpTimRetrans;Counter tcpTimRetransDrop;Counter tcpTimKeepalive;Counter tcpTimKeepaliveProbe;Counter tcpTimKeepaliveDrop;Counter tcpListenDrop;Counter tcpListenDropQ0;Counter tcpHalfOpenDrop;Counter tcpOutSackRetransSegs;int tcp6ConnTableSize;};
struct mib2_tcp6ConnEntry {Ip6Address tcp6ConnLocalAddress;int tcp6ConnLocalPort;Ip6Address tcp6ConnRemAddress;int tcp6ConnRemPort;DeviceIndex tcp6ConnIfIndex;int tcp6ConnState;struct mib2_tcp6ConnEntry::tcp6ConnEntryInfo_s tcp6ConnEntryInfo;};
struct mib2_tcp6ConnEntry::tcp6ConnEntryInfo_s {Gauge ce_snxt;Gauge ce_suna;Gauge ce_swnd;Gauge ce_rnxt;Gauge ce_rack;Gauge ce_rwnd;Gauge ce_rto;Gauge ce_mss;int ce_state;};
typedef struct mib2_tcp6ConnEntry mib2_tcp6ConnEntry_t;
struct mib2_tcpConnEntry {int tcpConnState;IpAddress tcpConnLocalAddress;int tcpConnLocalPort;IpAddress tcpConnRemAddress;int tcpConnRemPort;struct mib2_tcpConnEntry::tcpConnEntryInfo_s tcpConnEntryInfo;};
struct mib2_tcpConnEntry::tcpConnEntryInfo_s {Gauge ce_snxt;Gauge ce_suna;Gauge ce_swnd;Gauge ce_rnxt;Gauge ce_rack;Gauge ce_rwnd;Gauge ce_rto;Gauge ce_mss;int ce_state;};
typedef struct mib2_tcpConnEntry mib2_tcpConnEntry_t;
typedef struct mib2_tcp mib2_tcp_t;
struct mib2_udp {Counter udpInDatagrams;Counter udpInErrors;Counter udpOutDatagrams;int udpEntrySize;int udp6EntrySize;Counter udpOutErrors;};
struct mib2_udp6Entry {Ip6Address udp6LocalAddress;int udp6LocalPort;DeviceIndex udp6IfIndex;struct mib2_udp6Entry::udp6EntryInfo_s udp6EntryInfo;};
struct mib2_udp6Entry::udp6EntryInfo_s {int ue_state;Ip6Address ue_RemoteAddress;int ue_RemotePort;};
typedef struct mib2_udp6Entry mib2_udp6Entry_t;
struct mib2_udpEntry {IpAddress udpLocalAddress;int udpLocalPort;struct mib2_udpEntry::udpEntryInfo_s udpEntryInfo;};
struct mib2_udpEntry::udpEntryInfo_s {int ue_state;IpAddress ue_RemoteAddress;int ue_RemotePort;};
typedef struct mib2_udpEntry mib2_udpEntry_t;
typedef struct mib2_udp mib2_udp_t;
typedef uint32_t minor32_t;
typedef ulong_t minor_t;
struct mint {int len;__int16 *val;};
struct mknoddata3 {ftype3 type;union mknoddata3::$FC3C3F7D5DC5FC9EABD2DCD2E16DDF69 mknoddata3_u;};
union mknoddata3::$FC3C3F7D5DC5FC9EABD2DCD2E16DDF69 {devicedata3 device;sattr3 pipe_attributes;};
struct ml_odunit {uint32_t od_version;uint32_t od_badlog;uint32_t od_logalloc;uint32_t od_maxtransfer;uint32_t od_devbsize;int32_t od_bol_lof;int32_t od_eol_lof;uint32_t od_requestsize;uint32_t od_statesize;uint32_t od_logsize;int32_t od_statebno;int32_t od_logbno;int32_t od_head_lof;uint32_t od_head_ident;int32_t od_tail_lof;uint32_t od_tail_ident;uint32_t od_chksum;uint32_t od_head_tid;int32_t od_debug;struct timeval od_timestamp;};
typedef struct ml_odunit ml_odunit_t;
struct ml_unit {struct ml_unit *un_next;int un_flags;buf_t *un_bp;void *un_ufsvfs;dev_t un_dev;extent_block_t *un_ebp;size_t un_nbeb;struct mt_map *un_deltamap;struct mt_map *un_udmap;struct mt_map *un_logmap;struct mt_map *un_matamap;uint32_t un_maxresv;uint32_t un_resv;uint32_t un_resv_wantin;uint32_t un_tid;cirbuf_t un_rdbuf;cirbuf_t un_wrbuf;struct ufstrans *un_ut;ml_odunit_t un_ondisk;kmutex_t un_log_mutex;kmutex_t un_state_mutex;};
typedef struct ml_unit ml_unit_t;
typedef union $9A6DBE2689E4D78A6CC46A56A422909E mmcodec_ctrl_t;
typedef union $722BC7DC76932F8652A49C80584F2606 mmcodec_data_t;
struct mntinfo {kmutex_t mi_lock;struct servinfo *mi_servers;struct servinfo *mi_curr_serv;kcondvar_t mi_failover_cv;int mi_readers;struct vfs *mi_vfsp;enum vtype mi_type;uint_t mi_flags;int mi_tsize;int mi_stsize;int mi_timeo;int mi_retrans;uint_t mi_acregmin;uint_t mi_acregmax;uint_t mi_acdirmin;uint_t mi_acdirmax;len_t mi_maxfilesize;struct rpc_timers mi_timers[4];int mi_curread;int mi_curwrite;struct nfs_async_reqs *mi_async_reqs[5];struct nfs_async_reqs *mi_async_tail[5];struct nfs_async_reqs **mi_async_curr;uint_t mi_async_clusters[5];uint_t mi_async_init_clusters;kcondvar_t mi_async_reqs_cv;ushort_t mi_threads;ushort_t mi_max_threads;kcondvar_t mi_async_cv;uint_t mi_async_count;kmutex_t mi_async_lock;struct pathcnf *mi_pathconf;rpcprog_t mi_prog;rpcvers_t mi_vers;char **mi_rfsnames;kstat_named_t *mi_reqs;char *mi_call_type;char *mi_ss_call_type;char *mi_timer_type;clock_t mi_printftime;char **mi_aclnames;kstat_named_t *mi_aclreqs;char *mi_acl_call_type;char *mi_acl_ss_call_type;char *mi_acl_timer_type;uint_t mi_noresponse;uint_t mi_failover;uint_t mi_remap;struct kstat *mi_io_kstats;struct kstat *mi_ro_kstats;struct knetconfig *mi_klmconfig;};
struct mntinfo_kstat {char mik_proto[128];uint32_t mik_vers;uint_t mik_flags;uint_t mik_secmod;uint32_t mik_curread;uint32_t mik_curwrite;int mik_timeo;int mik_retrans;uint_t mik_acregmin;uint_t mik_acregmax;uint_t mik_acdirmin;uint_t mik_acdirmax;struct mntinfo_kstat::$BCB113A9A38551695E091F53F19F14C3 mik_timers[4];uint32_t mik_noresponse;uint32_t mik_failover;uint32_t mik_remap;char mik_curserver[257];};
struct mntinfo_kstat::$BCB113A9A38551695E091F53F19F14C3 {uint32_t srtt;uint32_t deviate;uint32_t rtxcur;};
typedef struct mntinfo mntinfo_t;
struct mntnode {timespec_t mnt_time;size_t mnt_size;caddr_t mnt_base;uint_t mnt_nres;uint_t *mnt_devlist;ino_t mnt_ino;vnode_t *mnt_mountvp;vnode_t mnt_vnode;};
typedef struct mntnode mntnode_t;
struct mntopt {char *mo_name;char **mo_cancel;char *mo_arg;int mo_flags;void *mo_data;};
typedef struct mntopt mntopt_t;
struct mntopts {int mo_count;mntopt_t *mo_list;};
typedef struct mntopts mntopts_t;
struct mnttab {char *mnt_special;char *mnt_mountp;char *mnt_fstype;char *mnt_mntopts;char *mnt_time;};
struct mnttagdesc {uint_t mtd_major;uint_t mtd_minor;char *mtd_mntpt;char *mtd_tag;};
struct mod_modinfo {char *modm_module_name;struct modctl *mp;struct mod_stub_info modm_stubs[1];};
struct mod_ops {int (*modm_install)();int (*modm_remove)();int (*modm_info)();};
struct mod_stub_info {uintptr_t mods_func_adr;struct mod_modinfo *mods_modinfo;uintptr_t mods_stub_adr;int (*mods_errfcn)();int mods_flag;};
struct modcmd {char *mc_cmdname;int mc_type;};
struct modconfig {char drvname[256];char drvclass[256];int major;int num_aliases;struct aliases *ap;};
struct modctl {struct modctl *mod_next;struct modctl *mod_prev;int mod_id;void *mod_mp;kthread_t *mod_inprogress_thread;struct mod_modinfo *mod_modinfo;struct modlinkage *mod_linkage;char *mod_filename;char *mod_modname;int mod_busy;int mod_stub;char mod_loaded;char mod_installed;char mod_loadflags;char mod_want;struct modctl_list *mod_requisites;struct modctl_list *mod_dependents;int mod_loadcnt;char *mod_text;size_t mod_text_size;};
struct modctl_list {struct modctl_list *modl_next;struct modctl *modl_modp;};
typedef uint32 mode3;
typedef uint32_t mode32_t;
struct mode_cache {struct mode_page mode_page;unsigned __int8 : 5;unsigned __int8 wce : 1;unsigned __int8 mf : 1;unsigned __int8 rcd : 1;unsigned __int8 read_reten_pri : 4;unsigned __int8 write_reten_pri : 4;unsigned __int16 dis_prefetch_len;ushort_t min_prefetch;ushort_t max_prefetch;ushort_t prefetch_ceiling;};
struct mode_cache_ccs {struct mode_page mode_page;uchar_t mode;uchar_t threshold;uchar_t max_prefetch;uchar_t max_multiplier;uchar_t min_prefetch;uchar_t min_multiplier;uchar_t rsvd2[8];};
struct mode_cache_scsi3 {struct mode_page mode_page;unsigned __int8 ic : 1;unsigned __int8 abpf : 1;unsigned __int8 cap : 1;unsigned __int8 disc : 1;unsigned __int8 size : 1;unsigned __int8 wce : 1;unsigned __int8 mf : 1;unsigned __int8 rcd : 1;unsigned __int8 read_reten_pri : 4;unsigned __int8 write_reten_pri : 4;ushort_t dis_prefetch_len;ushort_t min_prefetch;ushort_t max_prefetch;ushort_t prefetch_ceiling;unsigned __int8 fsw : 1;unsigned __int8 lbcss : 1;unsigned __int8 dra : 1;unsigned __int8 vu_124 : 1;unsigned __int8 vu_123 : 1;unsigned __int8 : 3;unsigned __int8 num_cache_seg;ushort_t cache_seg_size;uchar_t reserved;uchar_t non_cache_seg_size_ub;uchar_t non_cache_seg_size_mb;uchar_t non_cache_seg_size_lb;};
struct mode_caching {struct mode_page mode_page;unsigned __int8 : 5;unsigned __int8 wce : 1;unsigned __int8 mf : 1;unsigned __int8 rcd : 1;unsigned __int8 dmd_rd_ret_prio : 4;unsigned __int8 write_ret_prio : 4;unsigned __int16 pf_dsbl_trans_len;ushort_t min_prefetch;ushort_t max_prefetch;ushort_t max_prefetch_ceiling;};
struct mode_control {struct mode_page mode_page;unsigned __int8 : 7;unsigned __int8 rlec : 1;unsigned __int8 que_mod : 4;unsigned __int8 : 2;unsigned __int8 que_err : 1;unsigned __int8 qdisable : 1;unsigned __int8 eeca : 1;unsigned __int8 : 4;unsigned __int8 raenp : 1;unsigned __int8 uaaenp : 1;unsigned __int8 eanp : 1;unsigned __int8 reserved;ushort_t ready_aen_holdoff;};
struct mode_control_scsi3 {struct mode_page mode_page;unsigned __int8 : 6;unsigned __int8 gltsd : 1;unsigned __int8 rlec : 1;unsigned __int8 que_mod : 4;unsigned __int8 : 2;unsigned __int8 que_err : 1;unsigned __int8 qdisable : 1;unsigned __int8 eeca : 1;unsigned __int8 rac : 1;unsigned __int8 byprtm : 1;unsigned __int8 bybths : 1;unsigned __int8 : 1;unsigned __int8 raenp : 1;unsigned __int8 uaaenp : 1;unsigned __int8 eanp : 1;unsigned __int8 reserved;ushort_t ready_aen_holdoff;ushort_t busy_timeout;uchar_t reserved_2[2];};
struct mode_disco_reco {struct mode_page mode_page;uchar_t buffer_full_ratio;uchar_t buffer_empty_ratio;ushort_t bus_inactivity_limit;ushort_t disconect_time_limit;ushort_t connect_time_limit;ushort_t max_burst_size;unsigned __int8 emdp : 1;unsigned __int8 fard : 1;unsigned __int8 fawrt : 1;unsigned __int8 fastat : 1;unsigned __int8 dimm : 1;unsigned __int8 dtdc : 3;uchar_t reserved;ushort_t first_burst_sz;};
struct mode_err_recov {struct mode_page mode_page;unsigned __int8 awre : 1;unsigned __int8 arre : 1;unsigned __int8 tb : 1;unsigned __int8 rc : 1;unsigned __int8 eec : 1;unsigned __int8 per : 1;unsigned __int8 dte : 1;unsigned __int8 dcr : 1;uchar_t read_retry_count;uchar_t correction_span;uchar_t head_offset_count;uchar_t strobe_offset_count;uchar_t reserved;uchar_t write_retry_count;uchar_t reserved_2;ushort_t recovery_time_limit;};
struct mode_err_recov_ccs {struct mode_page mode_page;unsigned __int8 awre : 1;unsigned __int8 arre : 1;unsigned __int8 tb : 1;unsigned __int8 rc : 1;unsigned __int8 eec : 1;unsigned __int8 per : 1;unsigned __int8 dte : 1;unsigned __int8 dcr : 1;uchar_t retry_count;uchar_t correction_span;uchar_t head_offset_count;uchar_t strobe_offset_count;uchar_t recovery_time_limit;};
struct mode_format {struct mode_page mode_page;ushort_t tracks_per_zone;ushort_t alt_sect_zone;ushort_t alt_tracks_zone;ushort_t alt_tracks_vol;ushort_t sect_track;ushort_t data_bytes_sect;ushort_t interleave;ushort_t track_skew;ushort_t cylinder_skew;unsigned __int8 ssec : 1;unsigned __int8 hsec : 1;unsigned __int8 rmb : 1;unsigned __int8 surf : 1;unsigned __int8 _reserved_ins : 1;unsigned __int8 : 3;uchar_t reserved[2];};
struct mode_geometry {struct mode_page mode_page;uchar_t cyl_ub;uchar_t cyl_mb;uchar_t cyl_lb;uchar_t heads;uchar_t precomp_cyl_ub;uchar_t precomp_cyl_mb;uchar_t precomp_cyl_lb;uchar_t current_cyl_ub;uchar_t current_cyl_mb;uchar_t current_cyl_lb;ushort_t step_rate;uchar_t landing_cyl_ub;uchar_t landing_cyl_mb;uchar_t landing_cyl_lb;unsigned __int8 : 6;unsigned __int8 rpl : 2;unsigned __int8 rotational_offset;uchar_t reserved;ushort_t rpm;uchar_t reserved2[2];};
struct mode_header {uchar_t length;uchar_t medium_type;uchar_t device_specific;uchar_t bdesc_length;};
struct mode_page {unsigned __int8 ps : 1;unsigned __int8 : 1;unsigned __int8 code : 6;unsigned __int8 length;};
struct mode_pdevice {struct mode_page mode_page;ushort_t if_ident;uchar_t reserved[4];uchar_t vendor_uniqe[1];};
struct mode_speed {struct mode_page mode_page;uchar_t speed;uchar_t reserved;};
typedef ulong_t mode_t;
struct modeheader_seq {uchar_t datalen;uchar_t mediumtype;unsigned __int8 wp : 1;unsigned __int8 bufm : 3;unsigned __int8 speed : 4;uchar_t bd_len;struct block_descriptor blk_desc;};
typedef unsigned int model_t;
struct modinfo {int mi_info;int mi_state;int mi_id;int mi_nextid;caddr_t mi_base;size_t mi_size;int mi_rev;int mi_loadcnt;char mi_name[32];struct modspecific_info mi_msinfo[10];};
struct modldacf {struct mod_ops *dacf_modops;char *dacf_linkinfo;struct dacfsw *dacf_dacfsw;};
struct modldrv {struct mod_ops *drv_modops;char *drv_linkinfo;struct dev_ops *drv_dev_ops;};
struct modlexec {struct mod_ops *exec_modops;char *exec_linkinfo;struct execsw *exec_execsw;};
struct modlfs {struct mod_ops *fs_modops;char *fs_linkinfo;struct vfssw *fs_vfssw;};
struct modlinkage {int ml_rev;void *ml_linkage[4];};
struct modlmisc {struct mod_ops *misc_modops;char *misc_linkinfo;};
struct modlsched {struct mod_ops *sched_modops;char *sched_linkinfo;struct sclass *sched_class;};
struct modlstrmod {struct mod_ops *strmod_modops;char *strmod_linkinfo;struct fmodsw *strmod_fmodsw;};
struct modlsys {struct mod_ops *sys_modops;char *sys_linkinfo;struct sysent *sys_sysent;};
struct modspecific_info {char msi_linkinfo[32];int msi_p0;};
struct module {int total_allocated;Ehdr hdr;char *shdrs;Shdr *symhdr;Shdr *strhdr;char *depends_on;size_t symsize;char *symspace;int flags;size_t text_size;size_t data_size;char *text;char *data;unsigned int symtbl_section;char *symtbl;char *strings;unsigned int hashsize;symid_t *buckets;symid_t *chains;unsigned int nsyms;unsigned int bss_align;size_t bss_size;uintptr_t bss;char *filename;struct module_list *head;struct module_list *tail;reloc_dest_t destination;module_mach *machdata;};
struct module_info {ushort_t mi_idnum;char *mi_idname;ssize_t mi_minpsz;ssize_t mi_maxpsz;size_t mi_hiwat;size_t mi_lowat;};
struct module_list {struct module_list *next;struct module *mp;};
typedef void module_mach;
struct module_stat {int ms_pcnt;int ms_scnt;int ms_ocnt;int ms_ccnt;int ms_acnt;char *ms_xptr;__int16 ms_xsize;};
struct mon {struct mon_id mon_id;char priv[16];};
struct mon_id {char *mon_name;struct my_id my_id;};
struct mon_info {uint_t mon_type;uint_t pixfreq;uint_t hfreq;uint_t vfreq;uint_t vsync;uint_t hsync;ushort_t hfporch;ushort_t hbporch;ushort_t vfporch;ushort_t vbporch;};
struct mon_spec {whf_t ms_whf;struct mdi_set_resolution ms_msr;};
typedef struct mon_spec mon_spec_t;
struct mount_result_type {autofs_stat status;union mount_result_type::$BD08F148FCCB07EC8727A8AEAEF243F6 mount_result_type_u;};
union mount_result_type::$BD08F148FCCB07EC8727A8AEAEF243F6 {action_list *list;int error;};
struct mounta {char *spec;char *dir;int flags;char *fstype;char *dataptr;int datalen;char *optptr;int optlen;};
struct mousebuf {__int16 mb_size;__int16 mb_off;struct mouseinfo mb_info[1];};
struct mouseinfo {char mi_x;char mi_y;char mi_buttons;struct timeval32 mi_time;};
struct mperm {struct mperm *mp_next;char *mp_drvname;char *mp_minorname;int mp_perm;char *mp_owner;char *mp_group;uid_t mp_uid;gid_t mp_gid;};
struct mq_attr {int mq_flags;int mq_maxmsg;int mq_msgsize;int mq_curmsgs;int mq_pad[12];};
typedef void *mqd_t;
struct mrtstat {uint_t mrts_mfcfind_lookups;uint_t mrts_mfcfind_misses;uint_t mrts_mfc_hits;uint_t mrts_mfc_misses;uint_t mrts_upcalls;uint_t mrts_fwd_in;uint_t mrts_fwd_out;uint_t mrts_fwd_drop;uint_t mrts_bad_tunnel;uint_t mrts_cant_tunnel;uint_t mrts_wrong_if;uint_t mrts_upq_ovflw;uint_t mrts_cache_cleanups;uint_t mrts_drop_sel;uint_t mrts_q_overflow;uint_t mrts_pkt2large;uint_t mrts_vifctlSize;uint_t mrts_mfcctlSize;uint_t mrts_pim_badversion;uint_t mrts_pim_rcv_badcsum;uint_t mrts_pim_badregisters;uint_t mrts_pim_regforwards;uint_t mrts_pim_regsend_drops;uint_t mrts_pim_malformed;uint_t mrts_pim_nomemory;};
struct ms_softc {struct mousebuf *ms_buf;__int16 ms_bufbytes;__int16 ms_flags;__int16 ms_oldoff;__int16 ms_eventstate;__int16 ms_readformat;__int16 ms_vuidaddr;char ms_prevbuttons;};
struct msg {struct msg *msg_next;int msg_type;size_t msg_size;void *msg_addr;};
enum msg_type {CALL = 0x0,REPLY = 0x1,};
struct msgb {struct msgb *b_next;struct msgb *b_prev;struct msgb *b_cont;unsigned __int8 *b_rptr;unsigned __int8 *b_wptr;struct datab *b_datap;unsigned __int8 b_band;unsigned __int8 b_ftflag;unsigned __int16 b_flag;queue_t *b_queue;};
struct msgbuf {int mtype;char mtext[1];};
struct msghdr {void *msg_name;socklen_t msg_namelen;struct iovec *msg_iov;int msg_iovlen;caddr_t msg_accrights;int msg_accrightslen;};
struct msginfo {size_t msgmax;size_t msgmnb;int msgmni;int msgtql;};
typedef unsigned int msglen_t;
typedef unsigned int msgqnum_t;
struct msqid_ds {struct ipc_perm msg_perm;struct msg *msg_first;struct msg *msg_last;msglen_t msg_cbytes;msgqnum_t msg_qnum;msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;time_t msg_stime;int32_t msg_pad1;time_t msg_rtime;int32_t msg_pad2;time_t msg_ctime;int32_t msg_pad3;__int16 msg_cv;__int16 msg_qnum_cv;int msg_pad4[3];};
struct mt_map {mapentry_t *mtm_next;mapentry_t *mtm_prev;enum maptypes mtm_type;int mtm_flags;int mtm_ref;ulong_t mtm_debug;ulong_t mtm_age;mapentry_t *mtm_cancel;ulong_t mtm_nhash;mapentry_t **mtm_hash;struct topstats *mtm_tops;int mtm_nme;int mtm_nmet;int mtm_nud;int mtm_nsud;off_t mtm_tail_lof;size_t mtm_tail_nb;off_t mtm_trimlof;off_t mtm_trimtail;off_t mtm_trimalof;off_t mtm_trimclof;off_t mtm_trimrlof;ml_unit_t *mtm_ul;uint32_t mtm_tid;uint32_t mtm_committid;ushort_t mtm_closed;ushort_t mtm_seq;int mtm_wantin;int mtm_active;int mtm_activesync;ulong_t mtm_dirty;kmutex_t mtm_lock;kcondvar_t mtm_cv_commit;kcondvar_t mtm_cv_next;kcondvar_t mtm_cv_eot;kmutex_t mtm_mutex;kcondvar_t mtm_cv;krwlock_t mtm_rwlock;kmutex_t mtm_scan_mutex;};
typedef struct mt_map mt_map_t;
struct mt_tape_info {__int16 t_type;char *t_name;char *t_dsbits;char *t_erbits;};
struct mta_handle;
typedef struct mta_handle mta_handle_t;
struct mtdrivetype {char name[64];char vid[25];char type;int bsize;int options;int max_rretries;int max_wretries;uchar_t densities[4];uchar_t default_density;uchar_t speeds[4];};
struct mtdrivetype_request {int size;struct mtdrivetype *mtdtp;};
struct mtget {__int16 mt_type;__int16 mt_dsreg;__int16 mt_erreg;daddr_t mt_resid;daddr_t mt_fileno;daddr_t mt_blkno;ushort_t mt_flags;__int16 mt_bf;};
enum mtio_state {MTIO_NONE = 0x0,MTIO_EJECTED = 0x1,MTIO_INSERTED = 0x2,};
struct mtop {__int16 mt_op;daddr_t mt_count;};
struct mutex {void *_opaque[2];};
union mutex_impl {struct mutex_impl::adaptive_mutex m_adaptive;struct mutex_impl::spin_mutex m_spin;};
struct mutex_impl::adaptive_mutex {uintptr_t _m_owner;uchar_t _m_waiters;uchar_t _m_filler[2];uchar_t _m_type;};
struct mutex_impl::spin_mutex {lock_t m_dummylock;lock_t m_spinlock;ushort_t m_oldspl;ushort_t m_minspl;uchar_t m_filler;uchar_t _m_type;};
typedef union mutex_impl mutex_impl_t;
typedef lwp_mutex_t mutex_t;
struct my_id {char *my_name;int my_prog;int my_vers;int my_proc;};
typedef ulong_t n_long;
typedef ushort_t n_short;
typedef ulong_t n_time;
enum name_pos {SAME_NAME = 0x0,HIGHER_NAME = 0x1,LOWER_NAME = 0x2,NOT_SEQUENTIAL = 0x3,BAD_NAME = 0x4,};
struct namefd {int fd;};
struct nc_hash {struct ncache *hash_next;struct ncache *hash_prev;kmutex_t hash_lock;};
struct nc_stats {kstat_named_t ncs_hits;kstat_named_t ncs_misses;kstat_named_t ncs_neg_hits;kstat_named_t ncs_enters;kstat_named_t ncs_dbl_enters;kstat_named_t ncs_purge_total;kstat_named_t ncs_purge_all;kstat_named_t ncs_purge_vp;kstat_named_t ncs_purge_vfs;kstat_named_t ncs_purge_fs1;kstat_named_t ncs_pick_free;kstat_named_t ncs_pick_heur;kstat_named_t ncs_pick_last;kstat_named_t ncs_dir_hits;kstat_named_t ncs_dir_misses;kstat_named_t ncs_cur_dirs;kstat_named_t ncs_dir_num_ents;kstat_named_t ncs_dirs_cached;kstat_named_t ncs_dir_start_nm;kstat_named_t ncs_dir_add_nm;kstat_named_t ncs_dir_addabort;kstat_named_t ncs_dir_add_max;kstat_named_t ncs_dir_reme_fai;kstat_named_t ncs_dir_rems_fai;kstat_named_t ncs_dir_upd_fail;kstat_named_t ncs_dir_finipurg;kstat_named_t ncs_dir_rec_last;kstat_named_t ncs_dir_recl_any;};
struct ncache {struct ncache *hash_next;struct ncache *hash_prev;struct ncache *next_free;struct vnode *vp;struct vnode *dp;struct cred *cred;char *name;int namlen;int hash;};
struct ncstats {int hits;int misses;int enters;int dbl_enters;int long_enter;int long_look;int move_to_front;int purges;};
struct nd_addrlist {int n_cnt;struct netbuf *n_addrs;};
struct nd_hostserv {char *h_host;char *h_serv;};
struct nd_hostservlist {int h_cnt;struct nd_hostserv *h_hostservs;};
struct nd_mergearg {char *s_uaddr;char *c_uaddr;char *m_uaddr;};
struct nd_neighbor_advert {icmp6_t nd_na_hdr;struct in6_addr nd_na_target;};
typedef struct nd_neighbor_advert nd_neighbor_advert_t;
struct nd_neighbor_solicit {icmp6_t nd_ns_hdr;struct in6_addr nd_ns_target;};
typedef struct nd_neighbor_solicit nd_neighbor_solicit_t;
struct nd_opt_hdr {uint8_t nd_opt_type;uint8_t nd_opt_len;};
typedef struct nd_opt_hdr nd_opt_hdr_t;
struct nd_opt_lla {uint8_t nd_opt_lla_type;uint8_t nd_opt_lla_len;uint8_t nd_opt_lla_hdw_addr[64];};
struct nd_opt_mtu {uint8_t nd_opt_mtu_type;uint8_t nd_opt_mtu_len;uint16_t nd_opt_mtu_reserved;uint32_t nd_opt_mtu_mtu;};
typedef struct nd_opt_mtu nd_opt_mtu_t;
struct nd_opt_prefix_info {uint8_t nd_opt_pi_type;uint8_t nd_opt_pi_len;uint8_t nd_opt_pi_prefix_len;uint8_t nd_opt_pi_flags_reserved;uint32_t nd_opt_pi_valid_time;uint32_t nd_opt_pi_preferred_time;uint32_t nd_opt_pi_reserved2;struct in6_addr nd_opt_pi_prefix;};
typedef struct nd_opt_prefix_info nd_opt_prefix_info_t;
struct nd_opt_rd_hdr {uint8_t nd_opt_rh_type;uint8_t nd_opt_rh_len;uint16_t nd_opt_rh_reserved1;uint32_t nd_opt_rh_reserved2;};
typedef struct nd_opt_rd_hdr nd_opt_rd_hdr_t;
struct nd_redirect {icmp6_t nd_rd_hdr;struct in6_addr nd_rd_target;struct in6_addr nd_rd_dst;};
typedef struct nd_redirect nd_redirect_t;
struct nd_router_advert {icmp6_t nd_ra_hdr;uint32_t nd_ra_reachable;uint32_t nd_ra_retransmit;};
typedef struct nd_router_advert nd_router_advert_t;
struct nd_router_solicit {icmp6_t nd_rs_hdr;};
typedef struct nd_router_solicit nd_router_solicit_t;
struct netbuf {unsigned int maxlen;unsigned int len;char *buf;};
struct netconfig {char *nc_netid;unsigned int nc_semantics;unsigned int nc_flag;char *nc_protofmly;char *nc_proto;char *nc_device;unsigned int nc_nlookups;char **nc_lookups;unsigned int nc_unused[8];};
struct netent {char *n_name;char **n_aliases;int n_addrtype;in_addr_t n_net;};
struct netinfo {struct sockaddr rip_dst;int rip_metric;};
struct netobj {uint_t n_len;char *n_bytes;};
typedef unsigned int nfds_t;
struct nfs2_timeval {uint32_t tv_sec;uint32_t tv_usec;};
struct nfs3_pathconf_info {uint32 link_max;uint32 name_max;bool_t no_trunc;bool_t chown_restricted;bool_t case_insensitive;bool_t case_preserving;};
enum nfs_access_type {NFS_ACCESS_UNKNOWN = 0x0,NFS_ACCESS_ALLOWED = 0x1,NFS_ACCESS_DENIED = 0x2,};
typedef enum nfs_access_type nfs_access_type_t;
struct nfs_args {struct netbuf *addr;struct netbuf *syncaddr;struct knetconfig *knconf;char *hostname;char *netname;caddr_t fh;int flags;int wsize;int rsize;int timeo;int retrans;int acregmin;int acregmax;int acdirmin;int acdirmax;struct pathcnf *pathconf;int nfs_args_ext;union nfs_ext nfs_ext_u;};
struct nfs_args_extA {struct sec_data *secdata;};
struct nfs_args_extB {struct sec_data *secdata;struct nfs_args *next;};
struct nfs_async_read_req {void (*readahead)();u_offset_t blkoff;struct seg *seg;caddr_t addr;};
struct nfs_async_reqs {struct nfs_async_reqs *a_next;kthread_t *a_queuer;struct vnode *a_vp;struct cred *a_cred;enum iotype a_io;union nfs_async_reqs::$285A964DA793598A2BC2D03419F06D64 a_args;};
union nfs_async_reqs::$285A964DA793598A2BC2D03419F06D64 {struct nfs_async_read_req a_read_args;struct nfs_pageio_req a_pageio_args;struct nfs_readdir_req a_readdir_args;struct nfs_commit_req a_commit_args;};
struct nfs_commit_req {void (*commit)();page_t *plist;offset3 offset;count3 count;};
union nfs_ext {struct nfs_args_extA nfs_extA;struct nfs_args_extB nfs_extB;};
struct nfs_fh3 {uint_t fh3_length;union nfs_fh3::nfs_fh3_u fh3_u;};
union nfs_fh3::nfs_fh3_u {struct nfs_fh3::nfs_fh3_u::nfs_fh3_i nfs_fh3_i;char data[64];};
struct nfs_fh3::nfs_fh3_u::nfs_fh3_i {fhandle_t fh3_i;};
struct nfs_fhandle {int fh_len;char fh_buf[64];};
struct nfs_fid {ushort_t nf_len;ushort_t nf_pad;char nf_data[32];};
struct nfs_getfh_args {char *fname;fhandle_t *fhp;};
struct nfs_owner {int magic;char hname[16];char lowner[8];};
struct nfs_pageio_req {int (*pageio)();page_t *pp;u_offset_t io_off;uint_t io_len;int flags;};
struct nfs_readdir_req {int (*readdir)();struct rddir_cache *rdc;};
struct nfs_revauth_args {int authtype;uid_t uid;};
struct nfs_rwlock {int count;int waiters;kthread_t *owner;kmutex_t lock;kcondvar_t cv;};
typedef struct nfs_rwlock nfs_rwlock_t;
struct nfs_svc_args {int fd;char *netid;struct netbuf addrmask;};
struct nfsattrstat {nfsstat ns_status;union nfsattrstat::$B6E4C4804F8B4E61D83A908BE84CFFC2 ns_u;};
union nfsattrstat::$B6E4C4804F8B4E61D83A908BE84CFFC2 {struct nfsfattr ns_attr_u;};
struct nfscreatargs {struct nfsdiropargs ca_da;struct nfssattr *ca_sa;struct nfssattr ca_sa_buf;};
struct nfsdiropargs {fhandle_t *da_fhandle;char *da_name;fhandle_t da_fhandle_buf;int da_flags;};
struct nfsdiropres {nfsstat dr_status;union nfsdiropres::$C6DD0A424400D28F5D0F3991578B73A6 dr_u;};
union nfsdiropres::$C6DD0A424400D28F5D0F3991578B73A6 {struct nfsdrok dr_drok_u;};
struct nfsdrok {fhandle_t drok_fhandle;struct nfsfattr drok_attr;};
struct nfsfattr {enum nfsftype na_type;uint32_t na_mode;uint32_t na_nlink;uint32_t na_uid;uint32_t na_gid;uint32_t na_size;uint32_t na_blocksize;uint32_t na_rdev;uint32_t na_blocks;uint32_t na_fsid;uint32_t na_nodeid;struct nfs2_timeval na_atime;struct nfs2_timeval na_mtime;struct nfs2_timeval na_ctime;};
enum nfsftype {NFNON = 0x0,NFREG = 0x1,NFDIR = 0x2,NFBLK = 0x3,NFCHR = 0x4,NFLNK = 0x5,NFSOC = 0x6,};
struct nfsl_flush_args {int version;int directive;char *buff;int buff_len;};
struct nfslinkargs {fhandle_t *la_from;fhandle_t la_from_buf;struct nfsdiropargs la_to;};
struct nfslog_COMMIT3args {nfs_fh3 file;offset3 offset;count3 count;};
struct nfslog_CREATE3args {nfslog_diropargs3 where;nfslog_createhow3 how;};
struct nfslog_CREATE3res {nfsstat3 status;union nfslog_CREATE3res::$F55170137A5E702654FDB5D890E6C4CA nfslog_CREATE3res_u;};
union nfslog_CREATE3res::$F55170137A5E702654FDB5D890E6C4CA {nfslog_CREATE3resok ok;};
struct nfslog_CREATE3resok {post_op_fh3 obj;};
struct nfslog_LINK3args {nfs_fh3 file;nfslog_diropargs3 link;};
struct nfslog_LOOKUP3res {nfsstat3 status;union nfslog_LOOKUP3res::$8A12F739DA201A0F01CC54A2347608A8 nfslog_LOOKUP3res_u;};
union nfslog_LOOKUP3res::$8A12F739DA201A0F01CC54A2347608A8 {nfs_fh3 object;};
struct nfslog_MKDIR3args {nfslog_diropargs3 where;};
struct nfslog_MKDIR3res {nfsstat3 status;union nfslog_MKDIR3res::$058BB506E3BAF24ED448FA1BD4833203 nfslog_MKDIR3res_u;};
union nfslog_MKDIR3res::$058BB506E3BAF24ED448FA1BD4833203 {post_op_fh3 obj;};
struct nfslog_MKNOD3args {nfslog_diropargs3 where;ftype3 type;};
struct nfslog_MKNOD3res {nfsstat3 status;union nfslog_MKNOD3res::$058BB506E3BAF24ED448FA1BD4833203 nfslog_MKNOD3res_u;};
union nfslog_MKNOD3res::$058BB506E3BAF24ED448FA1BD4833203 {post_op_fh3 obj;};
struct nfslog_READ3args {nfs_fh3 file;offset3 offset;count3 count;};
struct nfslog_READ3res {nfsstat3 status;union nfslog_READ3res::$7A0E25342C0EB6C2A4CC1C4D51748A56 nfslog_READ3res_u;};
union nfslog_READ3res::$7A0E25342C0EB6C2A4CC1C4D51748A56 {nfslog_READ3resok ok;};
struct nfslog_READ3resok {size3 filesize;count3 count;bool_t eof;uint32_t size;};
struct nfslog_READDIRPLUS3args {nfs_fh3 dir;count3 dircount;count3 maxcount;};
struct nfslog_READDIRPLUS3res {nfsstat3 status;union nfslog_READDIRPLUS3res::$786DCC1D2A488653AF02F6DB35124A23 nfslog_READDIRPLUS3res_u;};
union nfslog_READDIRPLUS3res::$786DCC1D2A488653AF02F6DB35124A23 {nfslog_READDIRPLUS3resok ok;};
struct nfslog_READDIRPLUS3resok {nfslog_dirlistplus3 reply;};
struct nfslog_READLINK3res {nfsstat3 status;union nfslog_READLINK3res::$A46E749FDD895D51A9B1F38A8D4A8ED6 nfslog_READLINK3res_u;};
union nfslog_READLINK3res::$A46E749FDD895D51A9B1F38A8D4A8ED6 {char *data;};
struct nfslog_REMOVE3args {nfslog_diropargs3 object;};
struct nfslog_RENAME3args {nfslog_diropargs3 from;nfslog_diropargs3 to;};
struct nfslog_RMDIR3args {nfslog_diropargs3 object;};
struct nfslog_SETATTR3args {nfs_fh3 object;set_size3 size;};
struct nfslog_SYMLINK3args {nfslog_diropargs3 where;char *symlink_data;};
struct nfslog_SYMLINK3res {nfsstat3 status;union nfslog_SYMLINK3res::$058BB506E3BAF24ED448FA1BD4833203 nfslog_SYMLINK3res_u;};
union nfslog_SYMLINK3res::$058BB506E3BAF24ED448FA1BD4833203 {post_op_fh3 obj;};
struct nfslog_WRITE3args {nfs_fh3 file;offset3 offset;count3 count;stable_how stable;};
struct nfslog_WRITE3res {nfsstat3 status;union nfslog_WRITE3res::$DDA83BA4CE32216F1031293F1AEA52A0 nfslog_WRITE3res_u;};
union nfslog_WRITE3res::$DDA83BA4CE32216F1031293F1AEA52A0 {nfslog_WRITE3resok ok;};
struct nfslog_WRITE3resok {size3 filesize;count3 count;stable_how committed;};
struct nfslog_buffer_header {uint32_t bh_length;uint32_t bh_version;uint32_t bh_flags;uint32_t bh_offset;timestruc32_t bh_timestamp;};
struct nfslog_createargs {nfslog_sattr ca_sa;nfslog_diropargs ca_da;};
struct nfslog_createhow3 {createmode3 mode;union nfslog_createhow3::$7B9F70D06961F114B24C4AB5E87688DF nfslog_createhow3_u;};
union nfslog_createhow3::$7B9F70D06961F114B24C4AB5E87688DF {set_size3 size;};
struct nfslog_dirlistplus3 {nfslog_entryplus3 *entries;bool_t eof;};
struct nfslog_diropargs {fhandle da_fhandle;char *da_name;};
struct nfslog_diropargs3 {nfs_fh3 dir;char *name;};
struct nfslog_diropres {nfsstat dr_status;union nfslog_diropres::$6E9AE3E0D1C67C0F8C2DC1BF0AAAE32B nfslog_diropres_u;};
union nfslog_diropres::$6E9AE3E0D1C67C0F8C2DC1BF0AAAE32B {nfslog_drok dr_ok;};
struct nfslog_drok {fhandle drok_fhandle;};
struct nfslog_entryplus3 {post_op_fh3 name_handle;char *name;struct nfslog_entryplus3 *nextentry;};
struct nfslog_getfhargs {fhandle gfh_fh_buf;char *gfh_path;};
struct nfslog_linkargs {fhandle la_from;nfslog_diropargs la_to;};
typedef struct nfsreadargs nfslog_nfsreadargs;
struct nfslog_rddirargs {fhandle rda_fh;uint32_t rda_offset;uint32_t rda_count;};
struct nfslog_rddirres {nfsstat rd_status;union nfslog_rddirres::$6F57ED1BD35F31BB173B09F6B543717D nfslog_rddirres_u;};
union nfslog_rddirres::$6F57ED1BD35F31BB173B09F6B543717D {nfslog_rdok rd_ok;};
struct nfslog_rdlnres {nfsstat rl_status;union nfslog_rdlnres::$76B6C630296FCDD7ACE84EB6A7558908 nfslog_rdlnres_u;};
union nfslog_rdlnres::$76B6C630296FCDD7ACE84EB6A7558908 {char *rl_ok;};
struct nfslog_rdok {uint32_t rdok_offset;uint32_t rdok_size;bool_t rdok_eof;};
struct nfslog_rdresult {nfsstat r_status;union nfslog_rdresult::$2EF0204D03A830622AF225C6F00B5166 nfslog_rdresult_u;};
union nfslog_rdresult::$2EF0204D03A830622AF225C6F00B5166 {nfslog_rrok r_ok;};
struct nfslog_record_header {uint32_t rh_reclen;uint32_t rh_rec_id;uint32_t rh_prognum;uint32_t rh_procnum;uint32_t rh_version;uint32_t rh_auth_flavor;timestruc32_t rh_timestamp;uid_t rh_uid;gid_t rh_gid;};
struct nfslog_request_record {nfslog_record_header re_header;char *re_principal_name;char *re_netid;char *re_tag;struct netbuf re_ipaddr;caddr_t re_rpc_arg;caddr_t re_rpc_res;};
struct nfslog_rnmargs {nfslog_diropargs rna_from;nfslog_diropargs rna_to;};
struct nfslog_rrok {uint32_t filesize;uint32_t rrok_count;};
struct nfslog_sattr {uint32_t sa_mode;uint32_t sa_uid;uint32_t sa_gid;uint32_t sa_size;nfs2_timeval sa_atime;nfs2_timeval sa_mtime;};
struct nfslog_setattrargs {fhandle saa_fh;nfslog_sattr saa_sa;};
struct nfslog_sharefsargs {int sh_flags;uint32_t sh_anon;char *sh_path;fhandle sh_fh_buf;};
typedef nfsstat nfslog_sharefsres;
struct nfslog_symlinkargs {nfslog_diropargs sla_from;char *sla_tnm;nfslog_sattr sla_sa;};
struct nfslog_writeargs {fhandle waargs_fhandle;uint32_t waargs_begoff;uint32_t waargs_offset;uint32_t waargs_totcount;uint32_t waargs_count;};
struct nfslog_writeresult {nfsstat wr_status;union nfslog_writeresult::$2A0DD4582CCBEFAEB0E3EA5381B6CC76 nfslog_writeresult_u;};
union nfslog_writeresult::$2A0DD4582CCBEFAEB0E3EA5381B6CC76 {uint32_t wr_size;};
typedef char *nfspath3;
struct nfsrddirargs {fhandle_t rda_fh;uint32_t rda_offset;uint32_t rda_count;};
struct nfsrddirres {nfsstat rd_status;uint_t rd_bufsize;union nfsrddirres::$58E4E4C17AE20109EAEABA6611F00FE4 rd_u;};
union nfsrddirres::$58E4E4C17AE20109EAEABA6611F00FE4 {struct nfsrdok rd_rdok_u;};
struct nfsrdlnres {nfsstat rl_status;union nfsrdlnres::$659D09B361D701D0D66EB16B547B6A97 rl_u;};
union nfsrdlnres::$659D09B361D701D0D66EB16B547B6A97 {struct nfssrok rl_srok_u;};
struct nfsrdok {uint32_t rdok_offset;uint32_t rdok_size;bool_t rdok_eof;struct dirent64 *rdok_entries;};
struct nfsrdresult {nfsstat rr_status;union nfsrdresult::$6A35507E6474F6D0336B5312E06C8FBF rr_u;};
union nfsrdresult::$6A35507E6474F6D0336B5312E06C8FBF {struct nfsrrok rr_ok_u;};
struct nfsreadargs {fhandle_t ra_fhandle;uint32_t ra_offset;uint32_t ra_count;uint32_t ra_totcount;};
struct nfsrnmargs {struct nfsdiropargs rna_from;struct nfsdiropargs rna_to;};
struct nfsrrok {struct nfsfattr rrok_attr;uint32_t rrok_count;char *rrok_data;uint_t rrok_bufsize;mblk_t *rrok_mp;};
struct nfssaargs {fhandle_t saa_fh;struct nfssattr saa_sa;};
struct nfssattr {uint32_t sa_mode;uint32_t sa_uid;uint32_t sa_gid;uint32_t sa_size;struct nfs2_timeval sa_atime;struct nfs2_timeval sa_mtime;};
struct nfsslargs {struct nfsdiropargs sla_from;char *sla_tnm;int sla_tnm_flags;struct nfssattr *sla_sa;struct nfssattr sla_sa_buf;};
struct nfssrok {uint32_t srok_count;char *srok_data;};
enum nfsstat {NFS_OK = 0x0,NFSERR_PERM = 0x1,NFSERR_NOENT = 0x2,NFSERR_IO = 0x5,NFSERR_NXIO = 0x6,NFSERR_ACCES = 0xD,NFSERR_EXIST = 0x11,NFSERR_XDEV = 0x12,NFSERR_NODEV = 0x13,NFSERR_NOTDIR = 0x14,NFSERR_ISDIR = 0x15,NFSERR_INVAL = 0x16,NFSERR_FBIG = 0x1B,NFSERR_NOSPC = 0x1C,NFSERR_ROFS = 0x1E,NFSERR_OPNOTSUPP = 0x2D,NFSERR_NAMETOOLONG = 0x3F,NFSERR_NOTEMPTY = 0x42,NFSERR_DQUOT = 0x45,NFSERR_STALE = 0x46,NFSERR_REMOTE = 0x47,NFSERR_WFLUSH = 0x63,};
enum nfsstat3 {NFS3_OK = 0x0,NFS3ERR_PERM = 0x1,NFS3ERR_NOENT = 0x2,NFS3ERR_IO = 0x5,NFS3ERR_NXIO = 0x6,NFS3ERR_ACCES = 0xD,NFS3ERR_EXIST = 0x11,NFS3ERR_XDEV = 0x12,NFS3ERR_NODEV = 0x13,NFS3ERR_NOTDIR = 0x14,NFS3ERR_ISDIR = 0x15,NFS3ERR_INVAL = 0x16,NFS3ERR_FBIG = 0x1B,NFS3ERR_NOSPC = 0x1C,NFS3ERR_ROFS = 0x1E,NFS3ERR_MLINK = 0x1F,NFS3ERR_NAMETOOLONG = 0x3F,NFS3ERR_NOTEMPTY = 0x42,NFS3ERR_DQUOT = 0x45,NFS3ERR_STALE = 0x46,NFS3ERR_REMOTE = 0x47,NFS3ERR_BADHANDLE = 0x2711,NFS3ERR_NOT_SYNC = 0x2712,NFS3ERR_BAD_COOKIE = 0x2713,NFS3ERR_NOTSUPP = 0x2714,NFS3ERR_TOOSMALL = 0x2715,NFS3ERR_SERVERFAULT = 0x2716,NFS3ERR_BADTYPE = 0x2717,NFS3ERR_JUKEBOX = 0x2718,};
struct nfsstatfs {nfsstat fs_status;union nfsstatfs::$08C78D7C851FA76173109663D8432C36 fs_u;};
union nfsstatfs::$08C78D7C851FA76173109663D8432C36 {struct nfsstatfsok fs_fsok_u;};
struct nfsstatfsok {uint32_t fsok_tsize;uint32_t fsok_bsize;uint32_t fsok_blocks;uint32_t fsok_bfree;uint32_t fsok_bavail;};
enum nfssys_op {OLD_NFS_SVC = 0x0,OLD_ASYNC_DAEMON = 0x1,EXPORTFS = 0x2,NFS_GETFH = 0x3,OLD_NFS_CNVT = 0x4,NFS_REVAUTH = 0x5,OLD_NFS_FH_TO_FID = 0x6,OLD_LM_SVC = 0x7,KILL_LOCKMGR = 0x8,LOG_FLUSH = 0x9,SVCPOOL_CREATE = 0xA,NFS_SVC = 0xB,LM_SVC = 0xC,};
struct nfstime3 {uint32 seconds;uint32 nseconds;};
struct nfswriteargs {struct otw_nfswriteargs *wa_args;struct otw_nfswriteargs wa_args_buf;uint32_t wa_count;char *wa_data;mblk_t *wa_mblk;};
struct nis_active_endpoint {endpoint ep;nis_name hostname;int rank;int uaddr_generation;nis_name uaddr;int cbep_generation;endpoint cbep;};
struct nis_attr {char *zattr_ndx;struct nis_attr::$F2081D9F3F0358B3A954C101A2B200CE zattr_val;};
struct nis_attr::$F2081D9F3F0358B3A954C101A2B200CE {u_int zattr_val_len;char *zattr_val_val;};
struct nis_bound_directory {int generation;int min_rank;int optimal_rank;directory_obj dobj;struct nis_bound_directory::$F62E7BB7AC2DF8B83A7DAD8BC3B92E6C BEP;};
struct nis_bound_directory::$F62E7BB7AC2DF8B83A7DAD8BC3B92E6C {u_int BEP_len;nis_bound_endpoint *BEP_val;};
struct nis_bound_endpoint {endpoint ep;int generation;int rank;u_int flags;int hostnum;int epnum;nis_name uaddr;endpoint cbep;};
enum nis_error {NIS_SUCCESS = 0x0,NIS_S_SUCCESS = 0x1,NIS_NOTFOUND = 0x2,NIS_S_NOTFOUND = 0x3,NIS_CACHEEXPIRED = 0x4,NIS_NAMEUNREACHABLE = 0x5,NIS_UNKNOWNOBJ = 0x6,NIS_TRYAGAIN = 0x7,NIS_SYSTEMERROR = 0x8,NIS_CHAINBROKEN = 0x9,NIS_PERMISSION = 0xA,NIS_NOTOWNER = 0xB,NIS_NOT_ME = 0xC,NIS_NOMEMORY = 0xD,NIS_NAMEEXISTS = 0xE,NIS_NOTMASTER = 0xF,NIS_INVALIDOBJ = 0x10,NIS_BADNAME = 0x11,NIS_NOCALLBACK = 0x12,NIS_CBRESULTS = 0x13,NIS_NOSUCHNAME = 0x14,NIS_NOTUNIQUE = 0x15,NIS_IBMODERROR = 0x16,NIS_NOSUCHTABLE = 0x17,NIS_TYPEMISMATCH = 0x18,NIS_LINKNAMEERROR = 0x19,NIS_PARTIAL = 0x1A,NIS_TOOMANYATTRS = 0x1B,NIS_RPCERROR = 0x1C,NIS_BADATTRIBUTE = 0x1D,NIS_NOTSEARCHABLE = 0x1E,NIS_CBERROR = 0x1F,NIS_FOREIGNNS = 0x20,NIS_BADOBJECT = 0x21,NIS_NOTSAMEOBJ = 0x22,NIS_MODFAIL = 0x23,NIS_BADREQUEST = 0x24,NIS_NOTEMPTY = 0x25,NIS_COLDSTART_ERR = 0x26,NIS_RESYNC = 0x27,NIS_FAIL = 0x28,NIS_UNAVAIL = 0x29,NIS_RES2BIG = 0x2A,NIS_SRVAUTH = 0x2B,NIS_CLNTAUTH = 0x2C,NIS_NOFILESPACE = 0x2D,NIS_NOPROC = 0x2E,NIS_DUMPLATER = 0x2F,};
struct nis_hash_data {nis_name name;int keychain;struct nis_hash_data *next;struct nis_hash_data *prv_item;struct nis_hash_data *nxt_item;};
struct nis_hash_table {NIS_HASH_ITEM *keys[64];NIS_HASH_ITEM *first;};
typedef char *nis_name;
struct nis_object {nis_oid zo_oid;nis_name zo_name;nis_name zo_owner;nis_name zo_group;nis_name zo_domain;uint_t zo_access;uint32_t zo_ttl;objdata zo_data;};
struct nis_oid {uint32_t ctime;uint32_t mtime;};
struct nis_result {nis_error status;struct nis_result::$4B6B45C3F1C3815D68D653B8D499AE33 objects;netobj cookie;uint32_t zticks;uint32_t dticks;uint32_t aticks;uint32_t cticks;};
struct nis_result::$4B6B45C3F1C3815D68D653B8D499AE33 {u_int objects_len;nis_object *objects_val;};
struct nis_sdata {void *buf;u_int size;};
struct nis_server {nis_name name;struct nis_server::$DA92845B88BF4FFBAAA2281E50DC5AF5 ep;uint_t key_type;netobj pkey;};
struct nis_server::$DA92845B88BF4FFBAAA2281E50DC5AF5 {u_int ep_len;endpoint *ep_val;};
struct nis_tag {u_int tag_type;char *tag_val;};
struct nis_taglist {struct nis_taglist::$D5235F6F3B62BCE7910AF756FE53E6D0 tags;};
struct nis_taglist::$D5235F6F3B62BCE7910AF756FE53E6D0 {u_int tags_len;nis_tag *tags_val;};
struct nispasswd_authresult {nispasswd_status status;union nispasswd_authresult::$B078DBBAB3D407E214C0776301111B02 nispasswd_authresult_u;};
union nispasswd_authresult::$B078DBBAB3D407E214C0776301111B02 {nispasswd_verf npd_verf;nispasswd_code npd_err;};
enum nispasswd_code {NPD_NOTMASTER = 0x0,NPD_NOSUCHENTRY = 0x1,NPD_IDENTINVALID = 0x2,NPD_NOPASSWD = 0x3,NPD_NOSHDWINFO = 0x4,NPD_SHDWCORRUPT = 0x5,NPD_NOTAGED = 0x6,NPD_CKGENFAILED = 0x7,NPD_VERFINVALID = 0x8,NPD_PASSINVALID = 0x9,NPD_ENCRYPTFAIL = 0xA,NPD_DECRYPTFAIL = 0xB,NPD_KEYSUPDATED = 0xC,NPD_KEYNOTREENC = 0xD,NPD_PERMDENIED = 0xE,NPD_SRVNOTRESP = 0xF,NPD_NISERROR = 0x10,NPD_SYSTEMERR = 0x11,NPD_BUFTOOSMALL = 0x12,NPD_INVALIDARGS = 0x13,};
struct nispasswd_error {nispasswd_field npd_field;nispasswd_code npd_code;struct nispasswd_error *next;};
enum nispasswd_field {NPD_PASSWD = 0x0,NPD_GECOS = 0x1,NPD_SHELL = 0x2,NPD_SECRETKEY = 0x3,};
enum nispasswd_status {NPD_SUCCESS = 0x0,NPD_TRYAGAIN = 0x1,NPD_PARTIALSUCCESS = 0x2,NPD_FAILED = 0x3,};
struct nispasswd_updresult {nispasswd_status status;union nispasswd_updresult::$493D7F93814B4BE288B5F7ADF9E01279 nispasswd_updresult_u;};
union nispasswd_updresult::$493D7F93814B4BE288B5F7ADF9E01279 {nispasswd_error reason;nispasswd_code npd_err;};
struct nispasswd_verf {u_int npd_xid;u_int npd_xrandval;};
typedef struct _nl_catd_struct *nl_catd;
typedef int nl_item;
typedef uint32_t nlink32_t;
typedef ulong_t nlink_t;
struct nlist {char *n_name;int n_value;__int16 n_scnum;unsigned __int16 n_type;char n_sclass;char n_numaux;};
struct nlm4_cancargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm4_lock alock;};
struct nlm4_holder {bool_t exclusive;int32 svid;netobj oh;uint64 l_offset;uint64 l_len;};
struct nlm4_lock {char *caller_name;netobj fh;netobj oh;int32 svid;uint64 l_offset;uint64 l_len;};
struct nlm4_lockargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm4_lock alock;bool_t reclaim;int32 state;};
struct nlm4_notify {char *name;int32 state;};
struct nlm4_res {netobj cookie;nlm4_stat stat;};
struct nlm4_share {char *caller_name;netobj fh;netobj oh;fsh4_mode mode;fsh4_access access;};
struct nlm4_shareargs {netobj cookie;nlm4_share share;bool_t reclaim;};
struct nlm4_shareres {netobj cookie;nlm4_stats stat;int32 sequence;};
struct nlm4_stat {nlm4_stats stat;};
enum nlm4_stats {NLM4_GRANTED = 0x0,NLM4_DENIED = 0x1,NLM4_DENIED_NOLOCKS = 0x2,NLM4_BLOCKED = 0x3,NLM4_DENIED_GRACE_PERIOD = 0x4,NLM4_DEADLCK = 0x5,NLM4_ROFS = 0x6,NLM4_STALE_FH = 0x7,NLM4_FBIG = 0x8,NLM4_FAILED = 0x9,};
struct nlm4_testargs {netobj cookie;bool_t exclusive;struct nlm4_lock alock;};
struct nlm4_testres {netobj cookie;nlm4_testrply stat;};
struct nlm4_testrply {nlm4_stats stat;union nlm4_testrply::$19F65A684EF686FCB17D800C09B39B65 nlm4_testrply_u;};
union nlm4_testrply::$19F65A684EF686FCB17D800C09B39B65 {struct nlm4_holder holder;};
struct nlm4_unlockargs {netobj cookie;struct nlm4_lock alock;};
struct nlm_cancargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm_lock alock;};
struct nlm_holder {bool_t exclusive;int svid;netobj oh;uint_t l_offset;uint_t l_len;};
struct nlm_lock {char *caller_name;netobj fh;netobj oh;int svid;uint_t l_offset;uint_t l_len;};
struct nlm_lockargs {netobj cookie;bool_t block;bool_t exclusive;struct nlm_lock alock;bool_t reclaim;int state;};
struct nlm_notify {char *name;int state;};
struct nlm_res {netobj cookie;nlm_stat stat;};
struct nlm_share {char *caller_name;netobj fh;netobj oh;fsh_mode mode;fsh_access access;};
struct nlm_shareargs {netobj cookie;nlm_share share;bool_t reclaim;};
struct nlm_shareres {netobj cookie;nlm_stats stat;int sequence;};
struct nlm_stat {nlm_stats stat;};
enum nlm_stats {nlm_granted = 0x0,nlm_denied = 0x1,nlm_denied_nolocks = 0x2,nlm_blocked = 0x3,nlm_denied_grace_period = 0x4,nlm_deadlck = 0x5,};
struct nlm_testargs {netobj cookie;bool_t exclusive;struct nlm_lock alock;};
struct nlm_testres {netobj cookie;nlm_testrply stat;};
struct nlm_testrply {nlm_stats stat;union nlm_testrply::$25E723FE95144319ADEDD57F4FF59DDE nlm_testrply_u;};
union nlm_testrply::$25E723FE95144319ADEDD57F4FF59DDE {struct nlm_holder holder;};
struct nlm_unlockargs {netobj cookie;struct nlm_lock alock;};
typedef unsigned int nodeid_t;
struct notsack_blk {struct notsack_blk *next;tcp_seq begin;tcp_seq end;uint32_t sack_cnt;};
typedef struct notsack_blk notsack_blk_t;
struct npd_newpass {u_int npd_xrandval;passbuf pass;};
struct npd_request {char *username;char *domain;char *key_type;struct npd_request::$C3CD0BD37319ED44942FA197CF7B5408 user_pub_key;struct npd_request::$04A93ECC78428ACBA0FDC65FE7C8FE57 npd_authpass;u_int ident;};
struct npd_request::$04A93ECC78428ACBA0FDC65FE7C8FE57 {u_int npd_authpass_len;u_char *npd_authpass_val;};
struct npd_request::$C3CD0BD37319ED44942FA197CF7B5408 {u_int user_pub_key_len;u_char *user_pub_key_val;};
struct npd_update {u_int ident;npd_newpass xnewpass;passwd_info pass_info;};
typedef enum __ns_class ns_class;
typedef enum __ns_flag ns_flag;
typedef struct __ns_msg ns_msg;
typedef enum __ns_opcode ns_opcode;
typedef enum __ns_rcode ns_rcode;
struct ns_request {nis_name ns_name;struct ns_request::$C16B7AFEC0429C3BD747A37F4D827FFD ns_object;};
struct ns_request::$C16B7AFEC0429C3BD747A37F4D827FFD {u_int ns_object_len;nis_object *ns_object_val;};
typedef struct __ns_rr ns_rr;
typedef enum __ns_sect ns_sect;
typedef enum __ns_type ns_type;
typedef enum __ns_update_operation ns_update_operation;
struct ns_updrec {struct ns_updrec *r_prev;struct ns_updrec *r_next;uint8_t r_section;char *r_dname;uint16_t r_class;uint16_t r_type;uint32_t r_ttl;uchar_t *r_data;uint16_t r_size;int r_opcode;struct ns_updrec *r_grpnext;struct databuf *r_dp;struct databuf *r_deldp;uint16_t r_zone;};
enum nsm_addr_res {nsm_addr_succ = 0x0,nsm_addr_fail = 0x1,};
struct nsr_desc {uint8_t nsr_str_type;uint8_t nsr_id[5];uint8_t nsr_ver;uint8_t nsr_res;uint8_t nsr_data[2040];};
struct nss_XbyY_args {nss_XbyY_buf_t buf;int stayopen;int (*str2ent)(const char *instr, int instr_len, void *ent, char *buffer, int buflen);union nss_XbyY_key key;void *returnval;int erange;int h_errno;nss_status_t status;};
typedef struct nss_XbyY_args nss_XbyY_args_t;
typedef struct $3CF515CC911B8F03DF4F355C5ACD22AD nss_XbyY_buf_t;
union nss_XbyY_key {uid_t uid;gid_t gid;const char *name;int number;struct nss_XbyY_key::$CD5F44B92FE3ED666A24DAE448CD6B19 netaddr;struct nss_XbyY_key::$94B6CF0C6915478CD98367858D940171 hostaddr;struct nss_XbyY_key::$2B30735CA198EE135C9CF196B5967FEB serv;void *ether;struct nss_XbyY_key::$E5450DB01C1CBC9C11C74BC5DC6DA3FB pkey;void *attrp;};
struct nss_XbyY_key::$2B30735CA198EE135C9CF196B5967FEB {union nss_XbyY_key::$2B30735CA198EE135C9CF196B5967FEB::$1B8C580BAD0E12BFB07DA020F29DD50C serv;const char *proto;};
union nss_XbyY_key::$2B30735CA198EE135C9CF196B5967FEB::$1B8C580BAD0E12BFB07DA020F29DD50C {const char *name;int port;};
struct nss_XbyY_key::$94B6CF0C6915478CD98367858D940171 {const char *addr;int len;int type;};
struct nss_XbyY_key::$CD5F44B92FE3ED666A24DAE448CD6B19 {int net;int type;};
struct nss_XbyY_key::$E5450DB01C1CBC9C11C74BC5DC6DA3FB {const char *name;const char *keytype;};
struct nss_backend {nss_backend_op_t *ops;int n_ops;};
typedef nss_backend_t *(*nss_backend_constr_t)(const char *db_name, const char *src_name, const char *cfg_args);
struct nss_backend_finder {nss_backend_constr_t (*lookup)(void *lkp_priv, const char *, const char *, void **del_privp);void (*delete)(void *del_priv, nss_backend_constr_t);struct nss_backend_finder *next;void *lookup_priv;};
typedef struct nss_backend_finder nss_backend_finder_t;
typedef nss_status_t (*nss_backend_op_t)(struct nss_backend *, void *args);
typedef struct nss_backend nss_backend_t;
typedef void (*nss_db_initf_t)(nss_db_params_t *);
struct nss_db_params {const char *name;const char *config_name;const char *default_config;unsigned int max_active_per_src;unsigned int max_dormant_per_src;enum nss_dbp_flags flags;nss_backend_finder_t *finders;void *c_private;void (*cleanup)(struct nss_db_params *);};
typedef struct nss_db_params nss_db_params_t;
struct nss_db_root {struct nss_db_state *s;mutex_t lock;};
typedef struct nss_db_root nss_db_root_t;
struct nss_db_state;
typedef int nss_dbop_t;
enum nss_dbp_flags {NSS_USE_DEFAULT_CONFIG = 0x1,};
struct nss_getent_context;
typedef struct $BD5CA20501DDBF4BA8A0F05A067801C0 nss_getent_t;
struct nss_getnetgrent_args {char *buffer;int buflen;enum nss_netgr_status status;char *retp[3];};
struct nss_groupsbymem {const char *username;gid_t *gid_array;int maxgids;int force_slow_way;int (*str2ent)(const char *instr, int instr_len, void *ent, char *buffer, int buflen);nss_status_t (*process_cstr)(const char *instr, int instr_len, struct nss_groupsbymem *);int numgids;};
struct nss_innetgr_1arg {nss_innetgr_argc argc;nss_innetgr_argv argv;};
typedef unsigned int nss_innetgr_argc;
struct nss_innetgr_args {struct nss_innetgr_1arg arg[3];struct nss_innetgr_1arg groups;enum nss_netgr_status status;};
typedef char **nss_innetgr_argv;
typedef enum $EA75FB217E367D75530EC23DCD9FC6C8 nss_netdir_op_t;
struct nss_netdirbyaddr_in {nss_netdir_op_t op_t;union nss_netdirbyaddr_in::$52654151BE2F33B35A12C07C8189686F arg;};
union nss_netdirbyaddr_in::$52654151BE2F33B35A12C07C8189686F {struct netbuf *nd_nbuf;union nss_netdirbyaddr_in::$52654151BE2F33B35A12C07C8189686F::$50C6C771A4EDD455CAD0D8DFE1969C14 nss;};
union nss_netdirbyaddr_in::$52654151BE2F33B35A12C07C8189686F::$50C6C771A4EDD455CAD0D8DFE1969C14 {struct nss_netdirbyaddr_in::$::$50C6C771A4EDD455CAD0D8DFE1969C14::$A9483FE5E62180344C8B6F942B51662C host;struct nss_netdirbyaddr_in::$::$50C6C771A4EDD455CAD0D8DFE1969C14::$2B76CCD4C68FA5116F2B79D93ECF9A8B serv;};
struct nss_netdirbyaddr_in::$::$50C6C771A4EDD455CAD0D8DFE1969C14::$2B76CCD4C68FA5116F2B79D93ECF9A8B {int port;const char *proto;char *buf;int buflen;};
struct nss_netdirbyaddr_in::$::$50C6C771A4EDD455CAD0D8DFE1969C14::$A9483FE5E62180344C8B6F942B51662C {const char *addr;int len;int type;char *buf;int buflen;};
union nss_netdirbyaddr_out {struct nd_hostservlist **nd_hslist;union nss_netdirbyaddr_out::$316F132AA3D53DF36416F11E6CFB4547 nss;};
union nss_netdirbyaddr_out::$316F132AA3D53DF36416F11E6CFB4547 {struct nss_netdirbyaddr_out::$316F132AA3D53DF36416F11E6CFB4547::$E109A5D6027DEB813545D8BF49E916D8 host;struct servent *serv;};
struct nss_netdirbyaddr_out::$316F132AA3D53DF36416F11E6CFB4547::$E109A5D6027DEB813545D8BF49E916D8 {struct hostent *hent;int *herrno_p;};
struct nss_netdirbyname_in {nss_netdir_op_t op_t;union nss_netdirbyname_in::$A81B8F3144EDB2CCC4B96A77B00E3123 arg;};
struct nss_netdirbyname_in::$::$199656A6E013B40F3B25B2A0A5E1878D::$5995339A35AADA7B31B84FCA93E4D7C5 {const char *name;char *buf;int buflen;};
struct nss_netdirbyname_in::$::$199656A6E013B40F3B25B2A0A5E1878D::$BFAC7FB397D43626CBC2D8E8416F15CB {const char *name;const char *proto;char *buf;int buflen;};
union nss_netdirbyname_in::$A81B8F3144EDB2CCC4B96A77B00E3123 {struct nd_hostserv *nd_hs;union nss_netdirbyname_in::$A81B8F3144EDB2CCC4B96A77B00E3123::$199656A6E013B40F3B25B2A0A5E1878D nss;};
union nss_netdirbyname_in::$A81B8F3144EDB2CCC4B96A77B00E3123::$199656A6E013B40F3B25B2A0A5E1878D {struct nss_netdirbyname_in::$::$199656A6E013B40F3B25B2A0A5E1878D::$5995339A35AADA7B31B84FCA93E4D7C5 host;struct nss_netdirbyname_in::$::$199656A6E013B40F3B25B2A0A5E1878D::$BFAC7FB397D43626CBC2D8E8416F15CB serv;};
union nss_netdirbyname_out {struct nd_addrlist **nd_alist;union nss_netdirbyname_out::$CEE05273D4B2788A50A519C89AA213E2 nss;};
union nss_netdirbyname_out::$CEE05273D4B2788A50A519C89AA213E2 {struct nss_netdirbyname_out::$CEE05273D4B2788A50A519C89AA213E2::$E109A5D6027DEB813545D8BF49E916D8 host;struct servent *serv;};
struct nss_netdirbyname_out::$CEE05273D4B2788A50A519C89AA213E2::$E109A5D6027DEB813545D8BF49E916D8 {struct hostent *hent;int *herrno_p;};
enum nss_netgr_argn {NSS_NETGR_MACHINE = 0x0,NSS_NETGR_USER = 0x1,NSS_NETGR_DOMAIN = 0x2,NSS_NETGR_N = 0x3,};
enum nss_netgr_status {NSS_NETGR_FOUND = 0x0,NSS_NETGR_NO = 0x1,NSS_NETGR_NOMEM = 0x2,};
struct nss_setnetgrent_args {const char *netgroup;nss_backend_t *iterator;};
typedef enum $1323AA4975EEFDF9DDFDA31CD873A283 nss_status_t;
enum nstype {UNKNOWN = 0x0,NIS = 0x1,SUNYP = 0x2,IVY = 0x3,DNS = 0x4,X500 = 0x5,DNANS = 0x6,XCHS = 0x7,CDS = 0x8,};
struct ntptimeval {struct timeval time;int32_t maxerror;int32_t esterror;};
struct o_acct {char ac_flag;char ac_stat;o_uid_t ac_uid;o_gid_t ac_gid;o_dev_t ac_tty;time32_t ac_btime;comp_t ac_utime;comp_t ac_stime;comp_t ac_etime;comp_t ac_mem;comp_t ac_io;comp_t ac_rw;char ac_comm[8];};
typedef __int16 o_dev_t;
typedef o_uid_t o_gid_t;
typedef ushort_t o_ino_t;
typedef ushort_t o_mode;
typedef ushort_t o_mode_t;
typedef __int16 o_nlink_t;
typedef __int16 o_pid_t;
struct o_si_udata {int tidusize;int addrsize;int optsize;int etsdusize;int servtype;int so_state;int so_options;int tsdusize;};
typedef ushort_t o_uid_t;
struct oar_mask {uint_t oa_rights;zotypes oa_otype;};
typedef nis_object *obj_p;
struct objdata {zotypes zo_type;union objdata::$B3007D6063AF66DF722E8A0D3E39E00C objdata_u;};
union objdata::$B3007D6063AF66DF722E8A0D3E39E00C {struct directory_obj di_data;struct group_obj gr_data;struct table_obj ta_data;struct entry_obj en_data;struct link_obj li_data;struct objdata::$B3007D6063AF66DF722E8A0D3E39E00C::$C5CA305DAC14A48247D92F909AB77E9C po_data;};
struct objdata::$B3007D6063AF66DF722E8A0D3E39E00C::$C5CA305DAC14A48247D92F909AB77E9C {u_int po_data_len;char *po_data_val;};
struct ocg {uint32_t cg_link;uint32_t cg_rlink;time32_t cg_time;int32_t cg_cgx;__int16 cg_ncyl;__int16 cg_niblk;int32_t cg_ndblk;struct csum cg_cs;int32_t cg_rotor;int32_t cg_frotor;int32_t cg_irotor;int32_t cg_frsum[8];int32_t cg_btot[32];__int16 cg_b[32][8];char cg_iused[256];int32_t cg_magic;uchar_t cg_free[1];};
typedef int32_t off32_t;
typedef longlong_t off64_t;
typedef int off_t;
typedef uint64 offset3;
typedef longlong_t offset_t;
struct old_pcfs_args {int secondswest;int dsttime;};
struct oldsocket {__int16 so_type;__int16 so_options;__int16 so_linger;__int16 so_state;caddr_t so_pcb;struct protosw *so_proto;struct oldsocket *so_head;struct oldsocket *so_q0;struct oldsocket *so_q;__int16 so_q0len;__int16 so_qlen;__int16 so_qlimit;__int16 so_timeo;ushort_t so_error;__int16 so_pgrp;ulong_t so_oobmark;struct oldsocket::sockbuf so_rcv;struct oldsocket::sockbuf so_snd;struct wupalt *so_wupalt;};
struct oldsocket::sockbuf {ulong_t sb_cc;ulong_t sb_hiwat;ulong_t sb_mbcnt;ulong_t sb_mbmax;ulong_t sb_lowat;struct mbuf *sb_mb;struct proc *sb_sel;__int16 sb_timeo;__int16 sb_flags;};
struct opaque_auth {enum_t oa_flavor;caddr_t oa_base;uint_t oa_length;};
typedef void *opaque_t;
struct openprom_opr64 {int return_code;int nodeid;char message[1];};
struct openpromio {uint_t oprom_size;union openpromio::$323EE700B5499288BFC86B907B5BFC31 opio_u;};
union openpromio::$323EE700B5499288BFC86B907B5BFC31 {char b[1];int i;};
struct opthdr {t_uscalar_t level;t_uscalar_t name;t_uscalar_t len;};
struct otw_nfswriteargs {fhandle_t otw_wa_fhandle;uint32_t otw_wa_begoff;uint32_t otw_wa_offset;uint32_t otw_wa_totcount;};
struct p1284_ioctl_st {int array[10];char *cptr;char *name;};
struct p9000_info {ushort_t accessible_width;ushort_t accessible_height;ushort_t line_bytes;ushort_t hdb_capable;ushort_t vmsize;uchar_t boardrev;uchar_t slot;uint_t pad1;};
struct p9100_info {ushort_t accessible_width;ushort_t accessible_height;ushort_t line_bytes;ushort_t hdb_capable;ushort_t vmsize;uchar_t boardrev;uchar_t slot;uint_t pad1;};
struct p_audit_data {au_id_t pad_auid;au_mask_t pad_mask;au_termid_t pad_termid;au_asid_t pad_asid;struct cwrd *pad_cwrd;kmutex_t pad_lock;struct p_audit_data *next;};
typedef struct p_audit_data p_audit_data_t;
struct p_inquiry {uchar_t inq_dtype;unsigned __int8 inq_rmb : 1;unsigned __int8 inq_qual : 7;unsigned __int8 inq_iso : 2;unsigned __int8 inq_ecma : 3;unsigned __int8 inq_ansi : 3;unsigned __int8 inq_aenc : 1;unsigned __int8 inq_trmiop : 1;unsigned __int8 : 2;unsigned __int8 inq_rdf : 4;unsigned __int8 inq_len;unsigned __int8 : 8;unsigned __int8 : 8;unsigned __int8 inq_reladdr : 1;unsigned __int8 inq_wbus32 : 1;unsigned __int8 inq_wbus16 : 1;unsigned __int8 inq_sync : 1;unsigned __int8 inq_linked : 1;unsigned __int8 : 1;unsigned __int8 inq_cmdque : 1;unsigned __int8 inq_sftre : 1;char inq_vid[8];char inq_pid[16];char inq_revision[4];char inq_firmware_rev[4];char inq_serial[12];char reserved[2];char inq_ports;char inq_tgts;};
typedef struct p_inquiry p_inquiry_t;
struct p_rmtcallargs {rpcprog_t prog;rpcvers_t vers;rpcproc_t proc;struct p_rmtcallargs::$02068A94D23DDC29EF1B9402C6EFE20D args;xdrproc_t xdr_args;};
struct p_rmtcallargs::$02068A94D23DDC29EF1B9402C6EFE20D {u_int args_len;char *args_val;};
struct p_rmtcallres {rpcport_t port;struct p_rmtcallres::$5A0C6745AA5B8D6FB55375E8521B5DC9 res;xdrproc_t xdr_res;};
struct p_rmtcallres::$5A0C6745AA5B8D6FB55375E8521B5DC9 {u_int res_len;char *res_val;};
struct packetfilt {uchar_t Pf_Priority;uchar_t Pf_FilterLen;ushort_t Pf_Filter[255];};
typedef int64_t pad64_t;
typedef union $C57692D243E2F42291707545D24FC942 pad_info_t;
typedef ulong_t paddr_t;
struct page {struct vnode *p_vnode;struct page *p_hash;struct page *p_vpnext;struct page *p_vpprev;struct page *p_next;struct page *p_prev;u_offset_t p_offset;selock_t p_selock;ushort_t p_lckcnt;ushort_t p_cowcnt;kcondvar_t p_cv;kcondvar_t p_io_cv;uchar_t p_iolock_state;uchar_t p_filler;uchar_t p_fsdata;uchar_t p_state;};
typedef struct page page_t;
struct pam_conv {int (*conv)(int, struct pam_message **, struct pam_response **, void *);void *appdata_ptr;};
struct pam_handle;
typedef struct pam_handle pam_handle_t;
struct pam_message {int msg_style;char *msg;};
struct pam_response {char *resp;int resp_retcode;};
struct panic_data {uint32_t pd_version;uint32_t pd_msgoff;panic_nv_t pd_nvdata[1];};
typedef struct panic_data panic_data_t;
struct panic_nv {char pnv_name[16];uint64_t pnv_value;};
typedef struct panic_nv panic_nv_t;
typedef struct $062E89D0DC7E46D06DD8F412839F5BDD papPasswdEntry_t;
typedef struct $A74C68CDF7A8346DB4740D5AEB53B0D9 papValidation_t;
struct par_list {struct par_list *par_next;struct hwc_spec *par_specs;major_t par_major;};
struct part_desc {tag_t pd_tag;uint32_t pd_vdsn;uint16_t pd_pflags;uint16_t pd_pnum;regid_t pd_pcontents;uint8_t pd_pc_use[128];uint32_t pd_acc_type;uint32_t pd_part_start;uint32_t pd_part_length;regid_t pd_ii;uint8_t pd_iu[128];uint8_t pd_res[156];};
typedef struct part_desc part_desc_t;
struct part_info {daddr_t p_start;int p_length;};
struct part_int_desc {tag_t pid_tag;icb_tag_t pid_idb_tag;tstamp_t pid_rtime;uint8_t pid_integ;uint8_t pid_res[175];regid_t pid_ii;uint8_t pid_iu[256];};
typedef struct part_int_desc part_int_desc_t;
struct partition {ushort_t p_tag;ushort_t p_flag;daddr_t p_start;int p_size;};
typedef char passbuf[12];
struct passwd {char *pw_name;char *pw_passwd;uid_t pw_uid;gid_t pw_gid;char *pw_age;char *pw_comment;char *pw_gecos;char *pw_dir;char *pw_shell;};
struct passwd_info {char *pw_gecos;char *pw_shell;};
struct path_comp {uint8_t pc_type;uint8_t pc_len;uint16_t pc_ver;uint8_t pc_id[4];};
struct pathcnf {int pc_link_max;__int16 pc_max_canon;__int16 pc_max_input;__int16 pc_name_max;__int16 pc_path_max;__int16 pc_pipe_buf;uchar_t pc_vdisable;char pc_xxx;__int16 pc_mask[5];};
struct pathname {char *pn_buf;char *pn_path;size_t pn_pathlen;size_t pn_bufsize;};
typedef struct pathname pathname_t;
typedef uint16_t pc_cluster16_t;
typedef uint32_t pc_cluster32_t;
struct pc_dirent {ino64_t d_ino;off64_t d_off;unsigned __int16 d_reclen;char d_name[256];};
struct pc_fid {ushort_t pcfid_len;uint32_t pcfid_block;uint16_t pcfid_offset;uint16_t pcfid_ctime;};
struct pcadmin {id_t pc_cid;caddr_t pc_cladmin;};
typedef struct pcadmin pcadmin_t;
struct pcb {int pcb_flags;uint32_t pcb_trap0addr;uint_t pcb_instr;enum pcb::$A081279ABEE1631CD9A511E8616D291A pcb_xregstat;struct rwindow pcb_xregs;int pcb_step;caddr_t pcb_tracepc;};
enum pcb::$A081279ABEE1631CD9A511E8616D291A {XREGNONE = 0x0,XREGPRESENT = 0x1,XREGMODIFIED = 0x2,};
typedef struct pcb pcb_t;
struct pcdir {char pcd_filename[8];char pcd_ext[3];uchar_t pcd_attr;uchar_t pcd_ntattr;uchar_t pcd_crtime_msec;struct pctime pcd_crtime;ushort_t pcd_ladate;union pcdir::$6D2C5C6D3B5BA21ED111F6CD0B750BD5 un;struct pctime pcd_mtime;pc_cluster16_t pcd_scluster_lo;int pcd_size;};
union pcdir::$6D2C5C6D3B5BA21ED111F6CD0B750BD5 {uint16_t pcd_eattr;pc_cluster16_t pcd_scluster_hi;};
struct pcdir_lfn {uchar_t pcdl_ordinal;uchar_t pcdl_firstfilename[10];uchar_t pcdl_attr;uchar_t pcdl_type;uchar_t pcdl_checksum;uchar_t pcdl_secondfilename[12];pc_cluster16_t pcd_scluster;uchar_t pcdl_thirdfilename[4];};
struct pcfs {struct vfs *pcfs_vfs;int pcfs_flags;int pcfs_ldrv;dev_t pcfs_xdev;struct vnode *pcfs_devvp;int pcfs_secsize;int pcfs_spcl;int pcfs_spt;int pcfs_sdshift;int pcfs_fatsec;int pcfs_numfat;int pcfs_rdirsec;daddr_t pcfs_dosstart;daddr_t pcfs_fatstart;daddr_t pcfs_rdirstart;daddr_t pcfs_datastart;int pcfs_clsize;int pcfs_ncluster;int pcfs_entps;int pcfs_nrefs;int pcfs_frefs;int pcfs_nxfrecls;uchar_t *pcfs_fatp;uchar_t *pcfs_fat_changemap;int pcfs_fatsize;int pcfs_fat_changemapsize;time_t pcfs_fattime;time_t pcfs_verifytime;kmutex_t pcfs_lock;kthread_id_t pcfs_owner;int pcfs_count;struct fat32_boot_fsinfo fsinfo_native;uint32_t f32fsinfo_sector;struct pcfs *pcfs_nxt;int pcfs_fatjustread;};
struct pcfs_args {int secondswest;int dsttime;int flags;};
struct pchead {struct pcnode *pch_forw;struct pcnode *pch_back;};
struct pci_phys_spec {uint_t pci_phys_hi;uint_t pci_phys_mid;uint_t pci_phys_low;uint_t pci_size_hi;uint_t pci_size_low;};
typedef struct pci_phys_spec pci_regspec_t;
struct pcinfo {id_t pc_cid;char pc_clname[16];int pc_clinfo[8];};
typedef struct pcinfo pcinfo_t;
typedef struct pcm_device_node pcm_dev_node_t;
struct pcm_device_info {int pd_socket;int pd_function;int pd_type;uint32_t pd_handle;uint32_t pd_tuples;uint32_t pd_flags;char pd_bind_name[32];char pd_vers1_name[128];char pd_generic_name[32];};
struct pcm_device_node {struct pcm_device_node *pd_next;dev_info_t *pd_dip;char pd_name[16];int pd_flags;int pd_devtype;int pd_funcid;int pd_manfid;int pd_manmask;};
struct pcm_regs {uint32_t phys_hi;uint32_t phys_lo;uint32_t phys_len;};
struct pcmcia_adapter {int pca_module;int pca_unit;int pca_number;struct dev_ops *pca_ops;dev_info_t *pca_dip;pcmcia_if_t *pca_if;void *pca_power;ddi_iblock_cookie_t *pca_iblock;ddi_idevice_cookie_t *pca_idev;kmutex_t *pca_mutex;int pca_numpower;int pca_numsockets;int pca_first_socket;uint32_t pca_flags;char pca_name[32];uint32_t pca_avail_intr;inthandler_t pca_int_handlers;};
struct pcmcia_adapter_nexus_private {dev_info_t *an_dip;pcmcia_if_t *an_if;void *an_private;ddi_iblock_cookie_t *an_iblock;ddi_idevice_cookie_t *an_idev;uint32_t an_ipl;};
struct pcmcia_cs {uint32_t pccs_magic;uint32_t pccs_version;int (*pccs_callback)();int (*pccs_getconfig)();};
typedef struct pcmcia_cs pcmcia_cs_t;
struct pcmcia_if {uint32_t pcif_magic;uint32_t pcif_version;int (*pcif_set_callback)();int (*pcif_get_adapter)();int (*pcif_get_page)();int (*pcif_get_socket)();int (*pcif_get_status)();int (*pcif_get_window)();int (*pcif_inquire_adapter)();int (*pcif_inquire_socket)();int (*pcif_inquire_window)();int (*pcif_reset_socket)();int (*pcif_set_page)();int (*pcif_set_window)();int (*pcif_set_socket)();int (*pcif_set_interrupt)();int (*pcif_clr_interrupt)();int (*pcic_init_dev)();uint32_t (*pcic_get_tstamp)();};
typedef struct pcmcia_if pcmcia_if_t;
struct pcmcia_logical_socket {int ls_socket;uint32_t ls_flags;struct pcmcia_adapter *ls_adapter;pcmcia_if_t *ls_if;dev_info_t *ls_sockdrv;dev_info_t *ls_dip[8];dev_info_t *ls_mfintr_dip;int ls_functions;uint32_t ls_cs_events;uint32_t ls_intr_pri;uint32_t ls_intr_vec;int ls_intrrefs;struct intrspec ls_intrspec;inthandler_t *ls_inthandlers;ddi_iblock_cookie_t ls_iblk;ddi_idevice_cookie_t ls_idev;kmutex_t ls_ilock;int ls_error;};
typedef struct pcmcia_logical_socket pcmcia_logical_socket_t;
struct pcmcia_logical_window {int lw_window;int lw_socket;struct pcmcia_adapter *lw_adapter;pcmcia_if_t *lw_if;uint32_t lw_status;baseaddr_t lw_base;int lw_len;};
typedef struct pcmcia_logical_window pcmcia_logical_window_t;
struct pcmcia_mif {struct pcmcia_mif *mif_next;void (*mif_function)();uint32_t mif_id;uchar_t mif_events[4];};
struct pcmcia_parent_private {int ppd_nreg;struct pcm_regs *ppd_reg;int ppd_intr;struct intrspec *ppd_intrspec;void *pcm_dummy[3];struct pcm_regs *ppd_assigned;__int16 ppd_socket;__int16 ppd_function;int ppd_active;uint32_t ppd_flags;void *ppd_handle;};
struct pcnode {struct pcnode *pc_forw;struct pcnode *pc_back;int pc_flags;struct vnode *pc_vn;int pc_size;pc_cluster32_t pc_scluster;daddr_t pc_eblkno;int pc_eoffset;struct pcdir pc_entry;};
struct pcparms {id_t pc_cid;int pc_clparms[8];};
typedef struct pcparms pcparms_t;
struct pcpri {id_t pc_cid;pri_t pc_clpmax;pri_t pc_clpmin;};
typedef struct pcpri pcpri_t;
struct pctime {ushort_t pct_time;ushort_t pct_date;};
typedef void pctx_errfn_t(const char *fn, const char *fmt, va_list ap);
typedef enum $18F4D073277E58FDDB2C169A72F1FC3C pctx_event_t;
typedef int pctx_fini_lwpfn_t(pctx_t *, pid_t, id_t, void *);
typedef int pctx_init_lwpfn_t(pctx_t *, pid_t, id_t, void *);
typedef int pctx_sysc_execfn_t(pctx_t *, pid_t, id_t, char *, void *);
typedef void pctx_sysc_exitfn_t(pctx_t *pctx, pid_t pid, id_t lwpid, void *arg);
typedef void pctx_sysc_forkfn_t(pctx_t *, pid_t, id_t, pid_t, void *);
typedef int pctx_sysc_lwp_createfn_t(pctx_t *, pid_t, id_t, void *);
typedef int pctx_sysc_lwp_exitfn_t(pctx_t *, pid_t, id_t, void *);
typedef struct __pctx pctx_t;
typedef boolean_t (*pfb_t)();
typedef int (*pfi_t)();
typedef ulong_t pfn_t;
typedef pfi_t (*pfpfi_t)();
typedef void (*pfv_t)();
typedef ulong_t pgcnt_t;
typedef int phandle_t;
struct phdr_desc {struct short_ad phdr_ust;struct short_ad phdr_usb;struct short_ad phdr_it;struct short_ad phdr_fst;struct short_ad phdr_fsb;};
typedef struct phdr_desc phdr_desc_t;
struct phy_address {ulong_t p_addr;ulong_t p_memtype;};
struct pid {unsigned __int32 pid_prinactive : 1;unsigned __int32 pid_pgorphaned : 1;unsigned __int32 pid_padding : 6;unsigned __int32 pid_prslot : 24;pid_t pid_id;struct proc *pid_pglink;struct pid *pid_link;uint_t pid_ref;};
typedef int32_t pid32_t;
typedef int pid_t;
struct pim {unsigned __int8 pim_vers : 4;unsigned __int8 pim_type : 4;uint8_t pim_reserved;uint16_t pim_cksum;};
typedef struct pim pim_t;
struct pinfo {char status;char pkg[65];char editflag;char aclass[65];struct pinfo *next;};
struct ping_args {nis_name dir;uint32_t stamp;};
struct pixrectops;
struct pkgdev {int rdonly;int mntflg;longlong_t capacity;char *name;char *dirname;char *pathname;char *mount;char *fstyp;char *cdevice;char *bdevice;char *norewind;};
struct pkginfo {char *pkginst;char *name;char *arch;char *version;char *vendor;char *basedir;char *catg;char status;};
struct pln_address {union pln_address::$5B09262AB1EEEA85D62AFB703E1F9FE4 un;};
union pln_address::$5B09262AB1EEEA85D62AFB703E1F9FE4 {fcp_ent_addr_t fcp_addr;struct pln_address::$5B09262AB1EEEA85D62AFB703E1F9FE4::$D6F8DBE4DF26C786F25BF1CD90CF2E7E pln_addr;};
struct pln_address::$5B09262AB1EEEA85D62AFB703E1F9FE4::$D6F8DBE4DF26C786F25BF1CD90CF2E7E {ushort_t pa_entity;ushort_t pa_port;ushort_t pa_target;ushort_t pa_reserved;};
typedef struct pln_address pln_address_t;
struct plock {kmutex_t pl_lock;};
struct pm__list {pmap pml_map;struct pm__list *pml_next;};
typedef enum $3EC23EC6F0FDADF0EEC41EBD5A8B52ED pm_cmds;
struct pm_req {char *physpath;int component;int value;void *data;size_t datasize;};
typedef struct pm_req pm_req_t;
typedef struct $7E515F46519A2C03149F8E5448716EB7 pm_request;
struct pm_state_change {caddr_t physpath;int component;int event;time_t timestamp;int old_level;int new_level;size_t size;};
typedef struct pm_state_change pm_state_change_t;
typedef enum $37901662FEBD63C2ABBFAC806A9B9F40 pm_states;
struct pmap {rpcprog_t pm_prog;rpcvers_t pm_vers;rpcprot_t pm_prot;rpcport_t pm_port;};
struct pmap_hdr {uint8_t maph_type;uint8_t maph_length;};
struct pmap_typ1 {uint8_t map1_type;uint8_t map1_length;uint16_t map1_vsn;uint16_t map1_pn;};
struct pmap_typ2 {uint8_t map2_type;uint8_t map2_length;uint16_t map2_pad1;regid_t map2_pti;uint16_t map2_vsn;uint16_t map2_pn;uint16_t map2_pl;uint8_t map2_nst;uint8_t map2_pad2;uint32_t map2_sest;uint32_t map2_st[4];};
struct pmaplist {PMAP pml_map;struct pmaplist *pml_next;};
typedef pm__list *pmaplist_ptr;
struct pmmsg {char pm_type;uchar_t pm_state;char pm_maxclass;char pm_tag[15];int pm_size;};
struct pollfd {int fd;__int16 events;__int16 revents;};
typedef struct pollfd pollfd_t;
struct pollhead;
struct port_id {unsigned __int32 rsvd : 8;unsigned __int32 port_id : 24;};
struct port_type {unsigned __int32 port_type : 8;unsigned __int32 rsvd : 24;};
struct post_op_attr {bool_t attributes;fattr3 attr;};
struct post_op_fh3 {bool_t handle_follows;nfs_fh3 handle;};
struct pp_address {struct page *pp_pp;uint_t pp_offset;};
struct ppa_config {uint_t ppa;uint_t cmd;uint_t index;uint_t instance;};
typedef struct ppa_config ppa_config_t;
struct ppa_info {uint_t ppa;uint_t cmd;uint_t curppa;uint_t maxppa;};
typedef struct ppa_info ppa_info_t;
struct ppc_params_t {int flags;int state;int strobe_w;int data_setup;int ack_timeout;int error_timeout;int busy_timeout;};
struct ppcregs_t {volatile uchar_t in_pdata;volatile uchar_t in_pstat;volatile uchar_t in_pcon;volatile uchar_t in_pwierd;volatile uchar_t pdata;volatile uchar_t pstat;volatile uchar_t pcon;volatile uchar_t pwierd;uchar_t f14[500];volatile uchar_t ipdata;volatile uchar_t ipstat;volatile uchar_t ipcon;volatile uchar_t ipwierd;};
typedef struct $885C04ED232DA6939269E5648CBB0F98 pppAuthControlEntry_t;
typedef struct $13EF98051BCCC3A7BE0C6290BDC374BA pppAuthMsg_t;
typedef struct $ED04A3E3A2D9A6729338E838A059863A pppCPEntry_t;
typedef struct $D89EB48B0F107D6E39C0EF37AAFDA6FD pppConfig_t;
typedef struct $490D5F12417668765212E4CF5D599182 pppError_t;
typedef struct $01BD53472F26B36476AF1B984D5B2841 pppExEvent_t;
typedef struct $F0AAB1DC87F2E821A9EF19B3A8438CBF pppIPEntry_t;
enum pppLinkCRCSize {pppCRC16 = 0x10,pppCRC32 = 0x20,};
typedef struct $3A667C09CA9B6E1FC0A4AC3D89CABEC7 pppLinkControlEntry_t;
typedef struct $7A20DF675792E830F977E1284BC7C2E2 pppLinkErrorsEntry_t;
enum pppLinkMediaType {pppSync = 0x0,pppAsync = 0x1,};
enum pppLinkQuality {pppGood = 0x1,pppBad = 0x2,};
typedef struct $D76263573A98FEFDCCEEF233874FDEC5 pppLinkStatusEntry_t;
enum pppLinkVersions {pppRFC1171 = 0x1,pppRFC1331 = 0x2,};
typedef struct $AAC6986373C252F265E5EE15F2042600 pppPAPMessage_t;
typedef struct $E0B09092130FDFFEB4124EF1450B8417 pppProtoCh_t;
typedef struct $807D4AC2255C0A3001450ADEC11FD819 pppProtoDown_t;
typedef struct $807D4AC2255C0A3001450ADEC11FD819 pppProtoFinish_t;
typedef struct $807D4AC2255C0A3001450ADEC11FD819 pppProtoStart_t;
typedef struct $807D4AC2255C0A3001450ADEC11FD819 pppProtoUp_t;
typedef enum $BD2A00A5EDFC2FF1400278A291F46E84 pppProtocol_t;
typedef struct $FC07BF6E13A3F29964B2741842A3FFCB pppReqValidation_t;
enum pppSense {pppReceiveOnly = 0x1,pppSendOnly = 0x2,pppReceiveAndSend = 0x3,pppNone = 0x4,};
enum pppState {pppInitial = 0x0,pppStarting = 0x1,pppClosed = 0x2,pppStopped = 0x3,pppClosing = 0x4,pppStopping = 0x5,pppReqSent = 0x6,pppAckRcvd = 0x7,pppAckSent = 0x8,pppOpened = 0x9,};
typedef enum $A091DCDAEC8B8097B50B5275FBA122A0 pppVer_t;
typedef struct $31AE19E04776D95D90F1AA36D4709208 ppp_diag_conf_t;
enum ppp_diag_ioctls {PPP_DIAG_GET_CONF = 0x300,PPP_DIAG_SET_CONF = 0x301,};
enum ppp_diag_outdest {PPP_DG_STRLOG_DEST = 0x0,};
enum ppp_errors {pppConfigFailed = 0x0,pppNegotiateFailed = 0x1,pppAuthFailed = 0x2,pppProtoClosed = 0x3,pppLocalAuthFailed = 0x4,pppRemoteAuthFailed = 0x5,pppLoopedBack = 0x6,};
typedef enum ppp_ioctls ppp_ioctl_t;
enum ppp_ioctls {PPP_SET_CONF = 0x100,PPP_GET_CONF = 0x101,PPP_SET_AUTH = 0x102,PPP_GET_AUTH = 0x103,PPP_ACTIVE_OPEN = 0x104,PPP_PASSIVE_OPEN = 0x105,PPP_CLOSE = 0x106,PPP_UP = 0x107,PPP_DOWN = 0x108,PPP_SET_LOCAL_PASSWD = 0x109,PPP_GET_REMOTE_PASSWD = 0x10A,PPP_REMOTE_OK = 0x10B,PPP_REMOTE_NOK = 0x10C,PPP_GET_STATE = 0x10D,PPP_GET_LCP_STATS = 0x10E,PPP_GET_IPNCP_STATS = 0x10F,PPP_GET_IP_STATS = 0x110,PPP_GET_ERRS = 0x111,PPP_SET_DEBUG = 0x112,PPP_DELETE_MIB_ENTRY = 0x113,PPP_GET_VERSION = 0x114,PPP_OPEN = 0x115,PPP_AUTH_LOC = 0x116,PPP_AUTH_REM = 0x117,PPP_AUTH_BOTH = 0x118,PPP_FORCE_REM = 0x119,PPP_SET_REMOTE_PASSWD = 0x11A,};
enum ppp_messages {PPP_TL_UP = 0x0,PPP_TL_DOWN = 0x1,PPP_TL_START = 0x2,PPP_TL_FINISH = 0x3,PPP_NEED_VALIDATION = 0x4,PPP_CONFIG_CHANGED = 0x5,PPP_ERROR_IND = 0x6,PPP_AUTH_SUCCESS = 0x7,PPP_REMOTE_FAILURE = 0x8,PPP_LOCAL_FAILURE = 0x9,};
struct ppsclockev {struct timeval tv;uint_t serial;};
struct prasmap {uintptr_t pr_vaddr;size_t pr_npage;char pr_mapname[64];offset_t pr_offset;int pr_mflags;int pr_pagesize;int pr_shmid;int pr_filler[1];};
typedef struct prasmap prasmap_t;
struct prcred {uid_t pr_euid;uid_t pr_ruid;uid_t pr_suid;gid_t pr_egid;gid_t pr_rgid;gid_t pr_sgid;int pr_ngroups;gid_t pr_groups[1];};
typedef struct prcred prcred_t;
struct pre_op_attr {bool_t attributes;wcc_attr attr;};
struct prewrite {uint32_t pw_bufsize;int32_t pw_blkno;uint16_t pw_secmap;uint16_t pw_flags;};
typedef struct prewrite prewrite_t;
struct prfpregset {union prfpregset::$3423A07CE9086D0915E1099AD093ACC1 pr_fr;uint32_t pr_filler;uint32_t pr_fsr;uint8_t pr_qcnt;uint8_t pr_q_entrysize;uint8_t pr_en;struct fq pr_q[32];};
union prfpregset::$3423A07CE9086D0915E1099AD093ACC1 {uint32_t pr_regs[32];double pr_dregs[16];};
typedef struct prfpregset prfpregset_t;
typedef int prgreg_t;
typedef prgreg_t prgregset_t[38];
struct prheader {int pr_nent;int pr_entsize;};
typedef struct prheader prheader_t;
typedef __int16 pri_t;
struct pri_vol_desc {tag_t pvd_tag;uint32_t pvd_vdsn;uint32_t pvd_pvdn;dstring_t pvd_vol_id[32];uint16_t pvd_vsn;uint16_t pvd_mvsn;uint16_t pvd_il;uint16_t pvd_mil;uint32_t pvd_csl;uint32_t pvd_mcsl;dstring_t pvd_vsi[128];charspec_t pvd_desc_cs;charspec_t pvd_exp_cs;extent_ad_t pvd_vol_abs;extent_ad_t pvd_vcn;regid_t pvd_appl_id;tstamp_t pvd_time;regid_t pvd_ii;char pvd_iu[64];uint32_t pvd_pvdsl;uint16_t pvd_flags;uint8_t pvd_res[22];};
struct priovec {void *pio_base;size_t pio_len;off_t pio_offset;};
typedef struct priovec priovec_t;
struct prmap {uintptr_t pr_vaddr;size_t pr_size;char pr_mapname[64];offset_t pr_offset;int pr_mflags;int pr_pagesize;int pr_shmid;int pr_filler[1];};
typedef struct prmap prmap_t;
struct proc {struct vnode *p_exec;struct as *p_as;struct plock *p_lockp;kmutex_t p_crlock;struct cred *p_cred;int p_swapcnt;char p_stat;char p_wcode;ushort_t p_pidflag;int p_wdata;pid_t p_ppid;struct proc *p_link;struct proc *p_parent;struct proc *p_child;struct proc *p_sibling;struct proc *p_psibling;struct proc *p_sibling_ns;struct proc *p_child_ns;struct proc *p_next;struct proc *p_prev;struct proc *p_nextofkin;struct proc *p_orphan;struct proc *p_nextorph;struct proc *p_pglink;struct proc *p_ppglink;struct sess *p_sessp;struct pid *p_pidp;struct pid *p_pgidp;kcondvar_t p_cv;kcondvar_t p_flag_cv;kcondvar_t p_lwpexit;kcondvar_t p_holdlwps;ushort_t p_pad1;uint_t p_flag;clock_t p_utime;clock_t p_stime;clock_t p_cutime;clock_t p_cstime;caddr_t *p_segacct;caddr_t p_brkbase;size_t p_brksize;k_sigset_t p_sig;k_sigset_t p_ignore;k_sigset_t p_siginfo;struct sigqueue *p_sigqueue;struct sigqhdr *p_sigqhdr;struct sigqhdr *p_signhdr;uchar_t p_stopsig;char p_fixalignment;int p_lwptotal;int p_lwpcnt;int p_lwprcnt;int p_lwpwait;int p_zombcnt;int p_zomb_max;id_t *p_zomb_tid;kthread_t *p_tlist;k_sigset_t p_sigmask;k_fltset_t p_fltmask;struct vnode *p_trace;struct vnode *p_plist;kthread_t *p_agenttp;struct watched_area *p_warea;ulong_t p_nwarea;struct watched_page *p_wpage;int p_nwpage;int p_mapcnt;struct proc *p_rlink;kcondvar_t p_srwchan_cv;size_t p_stksize;hrtime_t p_mstart;hrtime_t p_mterm;hrtime_t p_mlreal;hrtime_t p_acct[10];struct lrusage p_ru;struct itimerval p_rprof_timer;timeout_id_t p_rprof_timerid;uint_t p_defunct;kmutex_t p_pflock;struct prof p_prof;struct user p_user;kthread_t *p_server_threads;struct door_node *p_door_list;struct door_node *p_unref_list;kcondvar_t p_server_cv;char p_unref_thread;uchar_t p_tnf_flags;caddr_t p_audit_data;kthread_t *p_aslwptp;size_t p_swrss;struct aio *p_aio;struct itimer **p_itimer;k_sigset_t p_notifsigs;kcondvar_t p_notifcv;timeout_id_t p_alarmid;uint_t p_sc_unblocked;struct vnode *p_sc_door;caddr_t p_usrstack;uint_t p_stkprot;model_t p_model;struct lwpchan_data *p_lcp;kmutex_t p_lcp_mutexinitlock;utrap_handler_t *p_utraps;refstr_t *p_corefile;void *p_rce;struct task *p_task;struct proc *p_taskprev;struct proc *p_tasknext;};
struct proc_edge {struct proc_edge *next;int refcount;struct proc_vertex *to_proc;};
typedef struct proc_edge proc_edge_t;
struct proc_graph {struct proc_vertex **proc;int gcount;int free;int mark;};
typedef struct proc_graph proc_graph_t;
typedef struct proc proc_t;
struct proc_usage {uint64_t pu_minflt;uint64_t pu_majflt;uint64_t pu_sndmsg;uint64_t pu_rcvmsg;uint64_t pu_ioch;uint64_t pu_iblk;uint64_t pu_oblk;uint64_t pu_vcsw;uint64_t pu_icsw;uint64_t pu_nsig;uint64_t pu_nswp;uint64_t pu_nscl;uint64_t pu_utimesec;uint64_t pu_utimensec;uint64_t pu_stimesec;uint64_t pu_stimensec;uint64_t pu_startsec;uint64_t pu_startnsec;uint64_t pu_finishsec;uint64_t pu_finishnsec;pid_t pu_pid;uid_t pu_ruid;gid_t pu_rgid;projid_t pu_projid;taskid_t pu_taskid;uint32_t pu_acflag;char *pu_command;uint32_t pu_major;uint32_t pu_minor;};
typedef struct proc_usage proc_usage_t;
struct proc_vertex {pid_t pid;int sysid;struct proc_edge *edge;int incount;struct proc_edge *p_sedge;struct proc_vertex *p_stack;int atime;int dtime;int index;};
typedef struct proc_vertex proc_vertex_t;
typedef struct $16D4A1559E041DBB68E7A1F4F9CBF232 processor_info_t;
typedef int processorid_t;
struct procset {idop_t p_op;idtype_t p_lidtype;id_t p_lid;idtype_t p_ridtype;id_t p_rid;};
typedef struct procset procset_t;
struct prof {void *pr_base;uintptr_t pr_off;size_t pr_size;uint32_t pr_scale;int pr_samples;};
struct profattr_s {char *name;char *res1;char *res2;char *desc;kva_t *attr;};
typedef struct profattr_s profattr_t;
struct profstr_s {char *name;char *res1;char *res2;char *desc;char *attr;};
typedef struct profstr_s profstr_t;
struct proginfo {uint_t size;uint_t align;};
typedef id_t projid_t;
struct prom_memlist {struct prom_memlist *next;uint_t address;uint_t size;};
typedef uint32_t prop_1275_cell_t;
struct prop_driver_data {size_t pdd_size;void (*pdd_prop_free)(struct prop_driver_data *);};
struct prop_handle_ops {int (*op_prop_int)(prop_handle_t *ph, uint_t cmd, int *data);int (*op_prop_str)(prop_handle_t *ph, uint_t cmd, char *data);int (*op_prop_bytes)(prop_handle_t *ph, uint_t cmd, uchar_t *data, uint_t size);};
typedef struct prop_handle_ops prop_handle_ops_t;
typedef struct ddi_prop_handle prop_handle_t;
struct prop_info {char *pinf_name;int pinf_len;int pinf_offset;};
struct proto_dev_info {char *proto_devi_name;ddi_prop_t *proto_devi_sys_prop_ptr;};
typedef struct proto_dev_info proto_dev_info_t;
struct protocol_arg {dev_t dev;int flag;};
struct protoent {char *p_name;char **p_aliases;int p_proto;};
struct protosw {__int16 pr_type;struct domain *pr_domain;__int16 pr_protocol;__int16 pr_flags;int (*pr_input)();int (*pr_output)();int (*pr_ctlinput)();int (*pr_ctloutput)();int (*pr_usrreq)();int (*pr_init)();int (*pr_fasttimo)();int (*pr_slowtimo)();int (*pr_drain)();};
struct proxy_addr {ipaddr_t pa_addr;ipaddr_t pa_mask;struct proxy_addr *pa_next;};
typedef struct proxy_addr proxy_addr_t;
struct prpageheader {timestruc_t pr_tstamp;int pr_nmap;int pr_npage;};
typedef struct prpageheader prpageheader_t;
struct prusage {id_t pr_lwpid;int pr_count;timestruc_t pr_tstamp;timestruc_t pr_create;timestruc_t pr_term;timestruc_t pr_rtime;timestruc_t pr_utime;timestruc_t pr_stime;timestruc_t pr_ttime;timestruc_t pr_tftime;timestruc_t pr_dftime;timestruc_t pr_kftime;timestruc_t pr_ltime;timestruc_t pr_slptime;timestruc_t pr_wtime;timestruc_t pr_stoptime;timestruc_t filltime[6];ulong_t pr_minf;ulong_t pr_majf;ulong_t pr_nswap;ulong_t pr_inblk;ulong_t pr_oublk;ulong_t pr_msnd;ulong_t pr_mrcv;ulong_t pr_sigs;ulong_t pr_vctx;ulong_t pr_ictx;ulong_t pr_sysc;ulong_t pr_ioch;ulong_t filler[10];};
typedef struct prusage prusage_t;
struct prwatch {uintptr_t pr_vaddr;size_t pr_size;int pr_wflags;int pr_pad;};
typedef struct prwatch prwatch_t;
struct prxmap {uintptr_t pr_vaddr;size_t pr_size;char pr_mapname[64];offset_t pr_offset;int pr_mflags;int pr_pagesize;int pr_shmid;dev_t pr_dev;uint64_t pr_ino;ulong_t pr_anon;ulong_t pr_ashared;ulong_t pr_aref;ulong_t pr_amod;ulong_t pr_vnode;ulong_t pr_vshared;ulong_t pr_vref;ulong_t pr_vmod;ulong_t pr_filler[4];};
typedef struct prxmap prxmap_t;
struct prxregset {uint32_t pr_type;uint32_t pr_align;union prxregset::$13E89D14F043A1ECCED4B43807F5FAAC pr_un;};
union prxregset::$13E89D14F043A1ECCED4B43807F5FAAC {struct prxregset::$13E89D14F043A1ECCED4B43807F5FAAC::pr_v8p pr_v8p;};
struct prxregset::$13E89D14F043A1ECCED4B43807F5FAAC::pr_v8p {union prxregset::$::pr_v8p::$5BB8866D8A3A461A966C1C583747DDAA pr_xfr;uint32_t pr_xfsr;uint32_t pr_fprs;uint32_t pr_xg[8];uint32_t pr_xo[8];uint64_t pr_tstate;uint32_t pr_filler[8];};
union prxregset::$::pr_v8p::$5BB8866D8A3A461A966C1C583747DDAA {uint32_t pr_regs[32];double pr_dregs[16];long double pr_qregs[8];};
typedef struct prxregset prxregset_t;
typedef enum $92D8A10D5D3318494FF31390A6A19662 ps_err_e;
struct ps_prochandle;
typedef Elf32_Sym ps_sym_t;
typedef unsigned int psaddr_t;
typedef enum $B4D4B12673F28533BE1E89CD44C7C9E5 psc_events;
typedef int psetid_t;
struct psinfo {int pr_flag;int pr_nlwp;pid_t pr_pid;pid_t pr_ppid;pid_t pr_pgid;pid_t pr_sid;uid_t pr_uid;uid_t pr_euid;gid_t pr_gid;gid_t pr_egid;uintptr_t pr_addr;size_t pr_size;size_t pr_rssize;size_t pr_pad1;dev_t pr_ttydev;ushort_t pr_pctcpu;ushort_t pr_pctmem;timestruc_t pr_start;timestruc_t pr_time;timestruc_t pr_ctime;char pr_fname[16];char pr_psargs[80];int pr_wstat;int pr_argc;uintptr_t pr_argv;uintptr_t pr_envp;char pr_dmodel;char pr_pad2[3];taskid_t pr_taskid;projid_t pr_projid;int pr_filler[5];lwpsinfo_t pr_lwp;};
typedef struct psinfo psinfo_t;
struct pstatus {int pr_flags;int pr_nlwp;pid_t pr_pid;pid_t pr_ppid;pid_t pr_pgid;pid_t pr_sid;id_t pr_aslwpid;id_t pr_agentid;sigset_t pr_sigpend;uintptr_t pr_brkbase;size_t pr_brksize;uintptr_t pr_stkbase;size_t pr_stksize;timestruc_t pr_utime;timestruc_t pr_stime;timestruc_t pr_cutime;timestruc_t pr_cstime;sigset_t pr_sigtrace;fltset_t pr_flttrace;sysset_t pr_sysentry;sysset_t pr_sysexit;char pr_dmodel;char pr_pad[3];taskid_t pr_taskid;projid_t pr_projid;int pr_filler[17];lwpstatus_t pr_lwp;};
typedef struct pstatus pstatus_t;
typedef int psw_t;
struct pt_ttys {queue_t *ptm_rdq;queue_t *pts_rdq;mblk_t *pt_nullmsg;pid_t pt_pid;minor_t pt_minor;int pt_refcnt;ushort_t pt_state;kcondvar_t pt_cv;kmutex_t pt_lock;};
struct ptable {uchar_t filler[7];uchar_t dname_len;uchar_t dname[32];};
struct ptable_idx {struct ptable_idx *idx_pptbl_idx;struct ptable *idx_mptbl;ushort_t idx_nochild;ushort_t idx_childid;};
struct ptem {tcflag_t cflags;mblk_t *dack_ptr;queue_t *q_ptr;struct winsize wsz;unsigned __int16 state;};
typedef struct _pthread_attr pthread_attr_t;
typedef struct _pthread_cond pthread_cond_t;
typedef struct _pthread_condattr pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef struct _pthread_mutex pthread_mutex_t;
typedef struct _pthread_mutexattr pthread_mutexattr_t;
typedef struct _once pthread_once_t;
typedef struct _pthread_rwlock pthread_rwlock_t;
typedef struct _pthread_rwlockattr pthread_rwlockattr_t;
typedef unsigned int pthread_t;
typedef int ptrdiff_t;
struct pty {int pt_flags;mblk_t *pt_stuffqfirst;mblk_t *pt_stuffqlast;int pt_stuffqlen;tty_common_t pt_ttycommon;bufcall_id_t pt_wbufcid;struct proc *pt_selr;struct proc *pt_selw;struct proc *pt_sele;dev_t pt_sdev;struct vnode *pt_vnode;__int16 pt_pgrp;uchar_t pt_send;uchar_t pt_ucntl;kmutex_t ptc_lock;kcondvar_t pt_cv_flags;kcondvar_t pt_cv_readq;kcondvar_t pt_cv_writeq;};
struct qband {struct qband *qb_next;size_t qb_count;struct msgb *qb_first;struct msgb *qb_last;size_t qb_hiwat;size_t qb_lowat;uint_t qb_flag;size_t qb_mblkcnt;};
typedef struct qband qband_t;
struct qec_global {uint_t control;uint_t status;uint_t packetsize;uint_t memsize;uint_t rxsize;uint_t txsize;};
struct qec_soft {uint_t qs_nchan;uint_t qs_memsize;void (**qs_intr_func)();void **qs_intr_arg;uint_t (*qs_reset_func)();void *qs_reset_arg;int (*qs_init_func)();dev_info_t *qs_init_arg;ddi_iblock_cookie_t qs_cookie;volatile struct qec_global *qs_globregp;int qe_intr_flag;};
struct qecb_chan {uint_t control;uint_t status;uint_t rxring;uint_t txring;uint_t rintm;uint_t tintm;uint_t qecerrm;uint_t bmacerrm;uint_t lmrxwrite;uint_t lmrxread;uint_t lmtxwrite;uint_t lmtxread;uint_t coll;};
struct qecm_chan {uint_t control;uint_t status;uint_t rxring;uint_t txring;uint_t rintm;uint_t tintm;uint_t qecerrm;uint_t macerrm;uint_t lmrxwrite;uint_t lmrxread;uint_t lmtxwrite;uint_t lmtxread;uint_t coll;uint_t pifs;};
struct qelem {struct qelem *q_forw;struct qelem *q_back;};
enum qfields {QHIWAT = 0x0,QLOWAT = 0x1,QMAXPSZ = 0x2,QMINPSZ = 0x3,QCOUNT = 0x4,QFIRST = 0x5,QLAST = 0x6,QFLAG = 0x7,QSTRUIOT = 0x8,QBAD = 0x9,};
typedef enum qfields qfields_t;
struct qinit {int (*qi_putp)();int (*qi_srvp)();int (*qi_qopen)();int (*qi_qclose)();int (*qi_qadmin)();struct module_info *qi_minfo;struct module_stat *qi_mstat;int (*qi_rwp)();int (*qi_infop)();int qi_struiot;};
struct qmd {uint_t qmd_flags;uint_t qmd_addr;};
typedef struct _qop_num qop_num;
typedef quad_t quad;
typedef struct _quad quad_t;
typedef long double quadruple;
struct queue {struct qinit *q_qinfo;struct msgb *q_first;struct msgb *q_last;struct queue *q_next;struct queue *q_link;void *q_ptr;size_t q_count;uint_t q_flag;ssize_t q_minpsz;ssize_t q_maxpsz;size_t q_hiwat;size_t q_lowat;struct qband *q_bandp;kmutex_t q_lock;struct stdata *q_stream;struct syncq *q_syncq;unsigned __int8 q_nband;kcondvar_t q_wait;kcondvar_t q_sync;struct queue *q_nfsrv;struct queue *q_nbsrv;ushort_t q_draining;__int16 q_struiot;uint_t q_syncqmsgs;size_t q_mblkcnt;struct msgb *q_sqhead;struct msgb *q_sqtail;uint_t q_sqflags;size_t q_refcnt;struct queue *q_sqnext;struct queue *q_sqprev;pri_t q_spri;};
typedef struct queue queue_t;
struct quotctl {int op;uid_t uid;caddr_t addr;};
struct r_debug {int r_version;Link_map *r_map;unsigned int r_brk;r_state_e r_state;unsigned int r_ldbase;Link_map *r_ldsomap;rd_event_e r_rdevent;rd_flags_e r_flags;};
struct r_rpcb_rmtcallargs {rpcprog_t prog;rpcvers_t vers;rpcproc_t proc;struct r_rpcb_rmtcallargs::$FEBD41F85E33D0E2AA5450E1B16FBC3A args;xdrproc_t xdr_args;};
struct r_rpcb_rmtcallargs::$FEBD41F85E33D0E2AA5450E1B16FBC3A {uint32_t args_len;char *args_val;};
struct r_rpcb_rmtcallres {char *addr;struct r_rpcb_rmtcallres::$C5922F02EDBA7A11822BD586DD2777D6 results;xdrproc_t xdr_res;};
struct r_rpcb_rmtcallres::$C5922F02EDBA7A11822BD586DD2777D6 {uint32_t results_len;char *results_val;};
typedef enum $AF097615159EB3CBDA82C5A5C14EBA11 r_state_e;
struct rangespec {uint_t rng_cbustype;uint_t rng_coffset;uint_t rng_bustype;uint_t rng_offset;uint_t rng_size;};
struct rate {t_scalar_t targetvalue;t_scalar_t minacceptvalue;};
struct rce_interface {int (*rce_start)(id_t, int);int (*rce_limitmemory)(size_t, struct as *, int);void (*rce_exit)(proc_t *);void (*rce_flush)(ulong_t);int (*rce_proccreate)(proc_t *);void (*rce_procdestroy)(proc_t *);void (*rce_setuid)(int, cred_t *);void (*rce_lwpfail)(proc_t *, kthread_id_t);void (*rce_lwpexit)(proc_t *, kthread_id_t);int (*rce_lwpnew)(proc_t *);uid_t (*rce_limid)(proc_t *);};
typedef struct rce_interface rce_interface_t;
struct rcm_handle;
typedef struct rcm_handle rcm_handle_t;
struct rcm_info;
typedef struct rcm_info rcm_info_t;
typedef rcm_info_t rcm_info_tuple_t;
struct rd_agent;
typedef struct rd_agent rd_agent_t;
typedef enum $176E06A90436C16DD1EC2E1A345EFA40 rd_err_e;
typedef enum $8724F201D2476C5A27302B0C46EAD9DC rd_event_e;
struct rd_event_msg {rd_event_e type;union rd_event_msg::$9ECDAEB3AD741762C56870A1C94CE353 u;};
union rd_event_msg::$9ECDAEB3AD741762C56870A1C94CE353 {rd_state_e state;};
typedef struct rd_event_msg rd_event_msg_t;
typedef enum $EAF20B011F47EDF33C1FCE09C227F824 rd_flags_e;
struct rd_loadobj {psaddr_t rl_nameaddr;unsigned int rl_flags;psaddr_t rl_base;psaddr_t rl_data_base;Lmid_t rl_lmident;psaddr_t rl_refnameaddr;psaddr_t rl_plt_base;unsigned int rl_plt_size;psaddr_t rl_bend;psaddr_t rl_padstart;psaddr_t rl_padend;};
typedef struct rd_loadobj rd_loadobj_t;
struct rd_notify {rd_notify_e type;union rd_notify::$143F0EF771439D241AFD6E8AB1506B64 u;};
union rd_notify::$143F0EF771439D241AFD6E8AB1506B64 {psaddr_t bptaddr;int syscallno;};
typedef enum $D5AA6F5ACB6BB33BF40F728DE6419DF2 rd_notify_e;
typedef struct rd_notify rd_notify_t;
struct rd_plt_info {rd_skip_e pi_skip_method;int pi_nstep;psaddr_t pi_target;};
typedef struct rd_plt_info rd_plt_info_t;
typedef enum $780B979F0B1070C2A1BEC9CE8B44076A rd_skip_e;
typedef enum $34D0A9496006982FFAE833C372B85A0C rd_state_e;
struct rddir_cache {lloff_t _cookie;lloff_t _ncookie;char *entries;int eof;int entlen;int buflen;int flags;kcondvar_t cv;int error;struct rddir_cache *next;};
struct readFile_t {OCF_File_t filename;int32_t offset;int32_t length;OCF_Any_t dataRead;};
struct readKey_t {OCF_KEYREF_t publicKeyRef;OCF_ALGO_t algorithm;OCF_KEY_t publicKey;};
struct readRecord_t {OCF_File_t filename;int32_t recordNumber;OCF_Any_t dataRead;};
struct readRecords_t {OCF_File_t filename;int32_t numberOfRecords;OCF_Any_t *dataRead;};
struct read_blklim {uchar_t reserved;uchar_t max_hi;uchar_t max_mid;uchar_t max_lo;uchar_t min_hi;uchar_t min_lo;};
struct refstr {uint32_t rs_size;uint32_t rs_refcnt;char rs_string[1];};
typedef struct refstr refstr_t;
struct reg1args {u_int family;char *name;netobj address;};
struct reg1res {nsm_addr_res status;};
typedef struct $E3ED4D72C7814978A91B05B99D56A6A2 regex_t;
struct regid {uint8_t reg_flags;char reg_id[23];char reg_ids[8];};
typedef struct regid regid_t;
typedef struct $7B7425BDB71A818A922A1DDC8B4A1BCA regmatch_t;
typedef ssize_t regoff_t;
struct regs {int r_psr;int r_pc;int r_npc;int r_y;int r_g1;int r_g2;int r_g3;int r_g4;int r_g5;int r_g6;int r_g7;int r_o0;int r_o1;int r_o2;int r_o3;int r_o4;int r_o5;int r_o6;int r_o7;};
struct regspec {uint_t regspec_bustype;uint_t regspec_addr;uint_t regspec_size;};
enum reject_stat {RPC_MISMATCH = 0x0,AUTH_ERROR = 0x1,};
struct rejected_reply {enum reject_stat rj_stat;union rejected_reply::$2B53589865B36E9C26DCD66F40988BA8 ru;};
union rejected_reply::$2B53589865B36E9C26DCD66F40988BA8 {struct rejected_reply::$2B53589865B36E9C26DCD66F40988BA8::$D52F10176CE5E6769EE83800681284AC RJ_versions;enum auth_stat RJ_why;};
struct rejected_reply::$2B53589865B36E9C26DCD66F40988BA8::$D52F10176CE5E6769EE83800681284AC {rpcvers_t low;rpcvers_t high;};
typedef unsigned __int8 *reloc_dest_t;
struct reply_body {enum reply_stat rp_stat;union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC ru;};
union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC {struct accepted_reply RP_ar;struct rejected_reply RP_dr;};
enum reply_stat {MSG_ACCEPTED = 0x0,MSG_DENIED = 0x1,};
struct reqvalue {struct rate called;struct rate calling;};
enum res {stat_succ = 0x0,stat_fail = 0x1,};
typedef res_sendhookact (*res_send_qhook)(struct sockaddr_in *const *ns, const uchar_t **query, int *querylen, uchar_t *ans, int anssiz, int *resplen);
typedef res_sendhookact (*res_send_rhook)(const struct sockaddr_in *ns, const uchar_t *query, int querylen, uchar_t *ans, int anssiz, int *resplen);
typedef enum $3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_sendhookact;
struct res_sym {int number;char *name;char *humanname;};
struct reservdev {char *devname;pid_t key;};
typedef bool_t (*resultproc_t)(caddr_t, ...);
struct rip {uchar_t rip_cmd;uchar_t rip_vers;uchar_t rip_res1[2];union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 ripun;};
union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 {struct netinfo ru_nets[1];char ru_tracefile[1];};
struct rl_entry {unsigned __int32 rl_attrc : 1;unsigned __int32 rl_fsck : 1;unsigned __int32 rl_local : 1;ino64_t rl_fsid;ino64_t rl_fileno;enum cachefs_rl_type rl_current;uint_t rl_fwd_idx;uint_t rl_bkwd_idx;};
typedef struct rl_entry rl_entry_t;
typedef int rl_iter_f(const rd_loadobj_t *, void *);
typedef u_longlong_t rlim64_t;
typedef unsigned int rlim_t;
struct rlimit {rlim_t rlim_cur;rlim_t rlim_max;};
struct rlimit64 {rlim64_t rlim_cur;rlim64_t rlim_max;};
struct rls_payload {uint_t rls_portno;uint_t rls_linkfail;uint_t rls_syncfail;uint_t rls_sigfail;uint_t rls_primitiverr;uint_t rls_invalidword;uint_t rls_invalidcrc;};
enum rm {RMFILE = 0x0,RMDIRECTORY = 0x1,};
typedef enum rm rm_t;
struct rmtcallargs {rpcprog_t prog;rpcvers_t vers;rpcproc_t proc;struct rmtcallargs::$02068A94D23DDC29EF1B9402C6EFE20D args;};
struct rmtcallargs::$02068A94D23DDC29EF1B9402C6EFE20D {u_int args_len;char *args_val;};
struct rmtcallres {rpcport_t port;struct rmtcallres::$5A0C6745AA5B8D6FB55375E8521B5DC9 res;};
struct rmtcallres::$5A0C6745AA5B8D6FB55375E8521B5DC9 {u_int res_len;char *res_val;};
struct rnode {struct rnode *r_freef;struct rnode *r_freeb;struct rnode *r_hash;vnode_t r_vnode;nfs_rwlock_t r_rwlock;nfs_rwlock_t r_lkserlock;kmutex_t r_statelock;nfs_fhandle r_fh;struct servinfo *r_server;char *r_path;u_offset_t r_nextr;ushort_t r_flags;__int16 r_error;cred_t *r_cred;cred_t *r_unlcred;char *r_unlname;vnode_t *r_unldvp;len_t r_size;struct vattr r_attr;time_t r_attrtime;time_t r_mtime;int r_mapcnt;uint_t r_count;uint_t r_awcount;kcondvar_t r_cv;int r_seq;int (*r_putapage)(vnode_t *, page_t *, u_offset_t *, size_t *, int, cred_t *);rddir_cache *r_dir;rddir_cache *r_direof;symlink_cache r_symlink;writeverf3 r_verf;u_offset_t r_modaddr;commit_t r_commit;u_offset_t r_truncaddr;vsecattr_t *r_secattr;cookieverf3 r_cookieverf;lmpl_t *r_lmpl;nfs3_pathconf_info *r_pathconf;acache_t *r_acache;};
typedef struct rnode rnode_t;
struct romvec_obp {uint_t op_magic;uint_t op_romvec_version;uint_t op_plugin_version;uint_t op_mon_id;struct memlist **v_physmemory;struct memlist **v_virtmemory;struct memlist **v_availmemory;struct config_ops *op_config_ops;char **v_bootcmd;uint_t (*v_open)();uint_t (*v_close)();uint_t (*v_read_blocks)();uint_t (*v_write_blocks)();uint_t (*v_xmit_packet)();uint_t (*v_poll_packet)();uint_t (*v_read_bytes)();uint_t (*v_write_bytes)();uint_t (*v_seek)();uchar_t *v_insource;uchar_t *v_outsink;uchar_t (*v_getchar)();void (*v_putchar)();int (*v_mayget)();int (*v_mayput)();void (*v_fwritestr)();void (*op_boot)();int (*v_printf)();void (*op_enter)();int *op_milliseconds;void (*op_exit)();void (**op_vector_cmd)();void (*op_interpret)();struct bootparam **v_bootparam;uint_t (*v_mac_address)();char **op2_bootpath;char **op2_bootargs;int *op2_stdin;int *op2_stdout;int (*op2_phandle)();caddr_t (*op2_alloc)();void (*op2_free)();caddr_t (*op2_map)();void (*op2_unmap)();int (*op2_open)();uint_t (*op2_close)();int (*op2_read)();int (*op2_write)();int (*op2_seek)();void (*op2_chain)();void (*op2_release)();caddr_t (*op3_alloc)();int *v_reserved[14];void (*op_setcxsegmap)();int (*op3_startcpu)();int (*op3_stopcpu)();int (*op3_idlecpu)();int (*op3_resumecpu)();};
struct romvec_sunmon {char *v_initsp;void (*v_startmon)();int *v_diagberr;struct bootparam **v_bootparam;unsigned int *v_memorysize;unsigned __int8 (*v_getchar)();void (*v_putchar)();int (*v_mayget)();int (*v_mayput)();unsigned __int8 *v_echo;unsigned __int8 *v_insource;unsigned __int8 *v_outsink;int (*v_getkey)();void (*v_initgetkey)();unsigned int *v_translation;unsigned __int8 *v_keybid;int *v_screen_x;int *v_screen_y;struct keybuf *v_keybuf;char *v_mon_id;void (*v_fwritechar)();int *v_fbaddr;char **v_font;void (*v_fwritestr)();void (*v_boot_me)();unsigned __int8 *v_linebuf;unsigned __int8 **v_lineptr;int *v_linesize;void (*v_getline)();unsigned __int8 (*v_getone)();unsigned __int8 (*v_peekchar)();int *v_fbthere;int (*v_getnum)();int (*v_printf)();void (*v_printhex)();unsigned __int8 *v_leds;void (*v_set_leds)();void (*v_nmi)();void (*v_abortent)();int *v_nmiclock;int *v_fbtype;unsigned int v_romvec_version;struct globram *v_gp;struct zscc_device *v_keybzscc;int *v_keyrinit;unsigned __int8 *v_keyrtick;unsigned int *v_memoryavail;int *v_resetaddr;int *v_resetmap;void (*v_exit_to_mon)();unsigned __int8 **v_memorybitmap;void (*v_setcxsegmap)();void (**v_vector_cmd)();unsigned int *v_exp_trap_signal;unsigned int *v_trap_vector_table_base;int dummy1z;int dummy2z;int dummy3z;int dummy4z;};
struct route {struct rtentry *ro_rt;struct sockaddr ro_dst;};
struct rp__list {rpcb rpcb_map;struct rp__list *rpcb_next;};
struct rpc_createerr {enum clnt_stat cf_stat;struct rpc_err cf_error;};
typedef struct $211BFD783D8D84C3D8E218C4E6F77865 rpc_doorcalls_t;
struct rpc_err {enum clnt_stat re_status;union rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF ru;};
union rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF {struct rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF::$CDFB08817BACAD3B52BC51E53A98F9E8 RE_err;enum auth_stat RE_why;struct rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF::$D52F10176CE5E6769EE83800681284AC RE_vers;struct rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF::$C0A0CADF59D9B7AA8DD004285CB4071F RE_lb;};
struct rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF::$C0A0CADF59D9B7AA8DD004285CB4071F {int32_t s1;int32_t s2;};
struct rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF::$CDFB08817BACAD3B52BC51E53A98F9E8 {int RE_errno;int RE_t_errno;};
struct rpc_err::$8A638CADF3CDC5D00CA52E17B179ACCF::$D52F10176CE5E6769EE83800681284AC {rpcvers_t low;rpcvers_t high;};
typedef struct gss_OID_desc_struct *rpc_gss_OID;
typedef struct gss_OID_desc_struct rpc_gss_OID_desc;
typedef struct $94B6D2E03277F36A7EAC6FE7B7D6A054 rpc_gss_callback_t;
typedef struct $E9AB0BCACA98F703B381F818839B97CB rpc_gss_error_t;
typedef struct $E66DCE15917F5E19886463E233EC4453 rpc_gss_lock_t;
typedef struct $D3341046612766E5971F0E9D3826E5FA rpc_gss_options_req_t;
typedef struct $D38312C18728A251C58C258AA639B1E2 rpc_gss_options_ret_t;
struct rpc_gss_principal {int len;char name[1];};
typedef struct rpc_gss_principal *rpc_gss_principal_t;
typedef struct $2FF20837F70D0E9E2C94D4E9C91813B8 rpc_gss_rawcred_t;
typedef enum $2FA655DF3B517FACB7949C2D644DAB43 rpc_gss_service_t;
typedef struct $C9224CB3878060960E30C62E95CBCE30 rpc_gss_ucred_t;
typedef int rpc_inline_t;
struct rpc_msg {uint32_t rm_xid;enum msg_type rm_direction;union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 ru;};
union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 {struct call_body RM_cmb;struct reply_body RM_rmb;};
struct rpc_timers {clock_t rt_srtt;clock_t rt_deviate;clock_t rt_rtxcur;};
struct rpcb {rpcprog_t r_prog;rpcvers_t r_vers;char *r_netid;char *r_addr;char *r_owner;};
struct rpcb_entry {char *r_maddr;char *r_nc_netid;u_int r_nc_semantics;char *r_nc_protofmly;char *r_nc_proto;};
struct rpcb_entry_list {rpcb_entry rpcb_entry_map;struct rpcb_entry_list *rpcb_entry_next;};
typedef rpcb_entry_list *rpcb_entry_list_ptr;
struct rpcb_rmtcallargs {rpcprog_t prog;rpcvers_t vers;rpcproc_t proc;struct rpcb_rmtcallargs::$02068A94D23DDC29EF1B9402C6EFE20D args;};
struct rpcb_rmtcallargs::$02068A94D23DDC29EF1B9402C6EFE20D {u_int args_len;char *args_val;};
struct rpcb_rmtcallres {char *addr;struct rpcb_rmtcallres::$E4942A9E2418DF914BE7A7BB122A60EB results;};
struct rpcb_rmtcallres::$E4942A9E2418DF914BE7A7BB122A60EB {u_int results_len;char *results_val;};
struct rpcb_stat {rpcbs_proc info;int setinfo;int unsetinfo;rpcbs_addrlist_ptr addrinfo;rpcbs_rmtcalllist_ptr rmtinfo;};
typedef rpcb_stat rpcb_stat_byvers[3];
struct rpcblist {RPCB rpcb_map;struct rpcblist *rpcb_next;};
typedef rp__list *rpcblist_ptr;
struct rpcbs_addrlist {rpcprog_t prog;rpcvers_t vers;int success;int failure;char *netid;struct rpcbs_addrlist *next;};
typedef rpcbs_addrlist *rpcbs_addrlist_ptr;
typedef int rpcbs_proc[13];
struct rpcbs_rmtcalllist {rpcprog_t prog;rpcvers_t vers;rpcproc_t proc;int success;int failure;int indirect;char *netid;struct rpcbs_rmtcalllist *next;};
typedef rpcbs_rmtcalllist *rpcbs_rmtcalllist_ptr;
struct rpcent {char *r_name;char **r_aliases;int r_number;};
typedef unsigned int rpcport_t;
typedef unsigned int rpcproc_t;
typedef unsigned int rpcprog_t;
typedef unsigned int rpcprot_t;
enum rpcsys_op {KRPC_REVAUTH = 0x0,};
typedef unsigned int rpcvers_t;
struct rquota {int32_t rq_bsize;bool_t rq_active;uint32_t rq_bhardlimit;uint32_t rq_bsoftlimit;uint32_t rq_curblocks;uint32_t rq_fhardlimit;uint32_t rq_fsoftlimit;uint32_t rq_curfiles;uint32_t rq_btimeleft;uint32_t rq_ftimeleft;};
struct rsm_es_d_stat {unsigned __int8 dp : 1;unsigned __int8 dl : 1;unsigned __int8 rsvd : 6;};
struct rsm_es_in {uchar_t page_code;unsigned __int8 rsvd1 : 5;unsigned __int8 abs : 1;unsigned __int8 chk : 1;unsigned __int8 efw : 1;ushort_t page_len;uchar_t encl_gd_len;uchar_t rsvd2;uchar_t num_unit_types;uchar_t rsvd3;unsigned __int16 alsen : 1;unsigned __int16 alenb : 1;unsigned __int16 rsvd4 : 2;unsigned __int16 altime : 12;unsigned __int8 idsen : 1;unsigned __int8 rsvd5 : 1;unsigned __int8 dsdly : 1;unsigned __int8 rsvd6 : 5;uchar_t rsvd7;uchar_t max_drvs;uchar_t drv_dscp_len;uchar_t max_pwms;uchar_t pwm_dscp_len;uchar_t max_fans;uchar_t fan_dscp_len;uchar_t max_temps;uchar_t temp_dscp_len;struct rsm_es_d_stat devstat[7];struct rsm_es_mod_stat pwm[2];struct rsm_es_mod_stat fan;struct rsm_es_mod_stat ovta;};
struct rsm_es_mod_stat {unsigned __int8 modfail : 1;unsigned __int8 rsvd01 : 1;unsigned __int8 dual_fan_failure : 1;unsigned __int8 rsvd02 : 5;};
struct rsm_es_out {uchar_t page_code;uchar_t rsvd1;ushort_t page_len;uchar_t encl_gd_len;uchar_t rsvd2;uchar_t num_unit_types;uchar_t rsvd3;unsigned __int16 rsvd4 : 1;unsigned __int16 alenb : 1;unsigned __int16 rsvd5 : 2;unsigned __int16 altime : 12;unsigned __int8 rsvd6 : 1;unsigned __int8 rpoff : 1;unsigned __int8 rsvd7 : 6;uchar_t rsvd8;uchar_t max_drvs;uchar_t drv_dscp_len;struct rsm_es_d_stat devstat[7];uchar_t rsvd9;};
struct rstat_timeval {int tv_sec;int tv_usec;};
struct rt_metrics {uint32_t rmx_locks;uint32_t rmx_mtu;uint32_t rmx_hopcount;uint32_t rmx_expire;uint32_t rmx_recvpipe;uint32_t rmx_sendpipe;uint32_t rmx_ssthresh;uint32_t rmx_rtt;uint32_t rmx_rttvar;uint32_t rmx_pksent;};
typedef struct rt_metrics rt_metrics_t;
struct rt_msghdr {ushort_t rtm_msglen;uchar_t rtm_version;uchar_t rtm_type;ushort_t rtm_index;int rtm_flags;int rtm_addrs;pid_t rtm_pid;int rtm_seq;int rtm_errno;int rtm_use;uint_t rtm_inits;struct rt_metrics rtm_rmx;};
typedef struct rt_msghdr rt_msghdr_t;
struct rtadmin {struct rtdpent *rt_dpents;__int16 rt_ndpents;__int16 rt_cmd;};
typedef struct rtadmin rtadmin_t;
struct rtdpent {pri_t rt_globpri;int rt_quantum;};
typedef struct rtdpent rtdpent_t;
struct rtentry {uint_t rt_hash;struct sockaddr rt_dst;struct sockaddr rt_gateway;__int16 rt_flags;__int16 rt_refcnt;uint_t rt_use;struct ifnet *rt_ifp;};
struct rtinfo {pri_t rt_maxpri;};
typedef struct rtinfo rtinfo_t;
struct rtparms {pri_t rt_pri;uint_t rt_tqsecs;int rt_tqnsecs;};
typedef struct rtparms rtparms_t;
struct rtproc {int rt_pquantum;int rt_timeleft;pri_t rt_pri;ushort_t rt_flags;kthread_id_t rt_tp;char *rt_pstatp;pri_t *rt_pprip;uint_t *rt_pflagp;struct rtproc *rt_next;struct rtproc *rt_prev;};
typedef struct rtproc rtproc_t;
struct rtstat {__int16 rts_badredirect;__int16 rts_dynamic;__int16 rts_newgateway;__int16 rts_unreach;__int16 rts_wildcard;};
struct ru_utmp {char ut_line[8];char ut_user[8];char ut_host[16];time_t ut_time;};
struct rusage {struct timeval ru_utime;struct timeval ru_stime;int ru_maxrss;int ru_ixrss;int ru_idrss;int ru_isrss;int ru_minflt;int ru_majflt;int ru_nswap;int ru_inblock;int ru_oublock;int ru_msgsnd;int ru_msgrcv;int ru_nsignals;int ru_nvcsw;int ru_nivcsw;};
struct rusers_utmp {char *ut_user;char *ut_line;char *ut_host;int ut_type;int ut_time;u_int ut_idle;};
union rval {struct rval::$8462DB5BA46F76167B8A3A69903806F1 r_v;off_t r_off;offset_t r_offset;time_t r_time;int64_t r_vals;};
struct rval::$8462DB5BA46F76167B8A3A69903806F1 {int r_v1;int r_v2;};
typedef union rval rval_t;
struct rwindow {greg_t rw_local[8];greg_t rw_in[8];};
struct rwlock_impl {uintptr_t rw_wwwh;};
typedef struct rwlock_impl rwlock_impl_t;
typedef struct _rwlock rwlock_t;
struct s3_info {ushort_t accessible_width;ushort_t accessible_height;ushort_t line_bytes;ushort_t hdb_capable;ushort_t vmsize;uchar_t boardrev;uchar_t slot;uint_t pad1;};
typedef unsigned __int16 sa_family_t;
struct sack_blk {tcp_seq begin;tcp_seq end;};
typedef struct sack_blk sack_blk_t;
struct sacmsg {int sc_size;char sc_type;};
struct sadb_address {uint16_t sadb_address_len;uint16_t sadb_address_exttype;uint8_t sadb_address_proto;uint8_t sadb_address_prefixlen;uint16_t sadb_address_reserved;};
typedef struct sadb_address sadb_address_t;
struct sadb_alg {uint8_t sadb_alg_id;uint8_t sadb_alg_ivlen;uint16_t sadb_alg_minbits;uint16_t sadb_alg_maxbits;uint16_t sadb_alg_reserved;};
typedef struct sadb_alg sadb_alg_t;
struct sadb_comb {uint8_t sadb_comb_auth;uint8_t sadb_comb_encrypt;uint16_t sadb_comb_flags;uint16_t sadb_comb_auth_minbits;uint16_t sadb_comb_auth_maxbits;uint16_t sadb_comb_encrypt_minbits;uint16_t sadb_comb_encrypt_maxbits;uint32_t sadb_comb_reserved;uint32_t sadb_comb_soft_allocations;uint32_t sadb_comb_hard_allocations;uint64_t sadb_comb_soft_bytes;uint64_t sadb_comb_hard_bytes;uint64_t sadb_comb_soft_addtime;uint64_t sadb_comb_hard_addtime;uint64_t sadb_comb_soft_usetime;uint64_t sadb_comb_hard_usetime;};
typedef struct sadb_comb sadb_comb_t;
struct sadb_ext {uint16_t sadb_ext_len;uint16_t sadb_ext_type;};
typedef struct sadb_ext sadb_ext_t;
struct sadb_ident {uint16_t sadb_ident_len;uint16_t sadb_ident_exttype;uint16_t sadb_ident_type;uint16_t sadb_ident_reserved;uint64_t sadb_ident_id;};
typedef struct sadb_ident sadb_ident_t;
struct sadb_key {uint16_t sadb_key_len;uint16_t sadb_key_exttype;uint16_t sadb_key_bits;uint16_t sadb_key_reserved;};
typedef struct sadb_key sadb_key_t;
struct sadb_lifetime {uint16_t sadb_lifetime_len;uint16_t sadb_lifetime_exttype;uint32_t sadb_lifetime_allocations;uint64_t sadb_lifetime_bytes;uint64_t sadb_lifetime_addtime;uint64_t sadb_lifetime_usetime;};
typedef struct sadb_lifetime sadb_lifetime_t;
struct sadb_msg {uint8_t sadb_msg_version;uint8_t sadb_msg_type;uint8_t sadb_msg_errno;uint8_t sadb_msg_satype;uint16_t sadb_msg_len;uint16_t sadb_msg_reserved;uint32_t sadb_msg_seq;uint32_t sadb_msg_pid;};
typedef struct sadb_msg sadb_msg_t;
struct sadb_prop {uint16_t sadb_prop_len;uint16_t sadb_prop_exttype;uint8_t sadb_prop_replay;uint8_t sadb_prop_reserved[3];};
typedef struct sadb_prop sadb_prop_t;
struct sadb_sa {uint16_t sadb_sa_len;uint16_t sadb_sa_exttype;uint32_t sadb_sa_spi;uint8_t sadb_sa_replay;uint8_t sadb_sa_state;uint8_t sadb_sa_auth;uint8_t sadb_sa_encrypt;uint32_t sadb_sa_flags;};
typedef struct sadb_sa sadb_sa_t;
struct sadb_sens {uint16_t sadb_sens_len;uint16_t sadb_sens_exttype;uint32_t sadb_sens_dpd;uint8_t sadb_sens_sens_level;uint8_t sadb_sens_sens_len;uint8_t sadb_sens_integ_level;uint8_t sadb_sens_integ_len;uint32_t sadb_sens_reserved;};
typedef struct sadb_sens sadb_sens_t;
struct sadb_spirange {uint16_t sadb_spirange_len;uint16_t sadb_spirange_exttype;uint32_t sadb_spirange_min;uint32_t sadb_spirange_max;uint32_t sadb_spirange_reserved;};
typedef struct sadb_spirange sadb_spirange_t;
struct sadb_supported {uint16_t sadb_supported_len;uint16_t sadb_supported_exttype;uint32_t sadb_supported_reserved;};
typedef struct sadb_supported sadb_supported_t;
struct sattr3 {set_mode3 mode;set_uid3 uid;set_gid3 gid;set_size3 size;set_atime atime;set_mtime mtime;};
struct sattrguard3 {bool_t check;nfstime3 obj_ctime;};
struct sb_hdr {uint_t sbh_origlen;uint_t sbh_msglen;uint_t sbh_totlen;uint_t sbh_drops;struct timeval sbh_timestamp;};
struct sc_public {volatile __int16 sc_nopreempt;volatile __int16 sc_yield;};
typedef struct sc_public sc_public_t;
struct sc_shared {volatile uint_t sc_state;volatile processorid_t sc_cpu;volatile int sc_priority;sc_public_t sc_preemptctl;};
typedef struct sc_shared sc_shared_t;
struct scc_mode {char sm_txclock;char sm_rxclock;char sm_iflags;uchar_t sm_config;int sm_baudrate;int sm_retval;};
struct sched_param {int sched_priority;int sched_nicelim;int sched_nice;int sched_pad[6];};
typedef struct sc_public schedctl_t;
struct sclass {char *cl_name;pri_t (*cl_init)(id_t, int, classfuncs_t **);classfuncs_t *cl_funcs;krwlock_t *cl_lock;int cl_count;};
typedef struct sclass sclass_t;
struct screen;
struct scsi_address {struct scsi_hba_tran *a_hba_tran;ushort_t a_target;uchar_t a_lun;uchar_t a_sublun;};
struct scsi_arq_status {struct scsi_status sts_status;struct scsi_status sts_rqpkt_status;uchar_t sts_rqpkt_reason;uchar_t sts_rqpkt_resid;uint_t sts_rqpkt_state;uint_t sts_rqpkt_statistics;struct scsi_extended_sense sts_sensedata;};
struct scsi_bfi_defect {unsigned __int32 cyl : 24;unsigned __int32 head : 8;int bytes_from_index;};
struct scsi_capacity {uint_t capacity;uint_t lbasize;};
union scsi_cdb {struct scsi_cdb::$C7BA4B60DE78D71094D9A2B3854B7108 cdb_un;uchar_t cdb_opaque[16];uint_t cdb_long[4];};
struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g0 {uchar_t addr1;uchar_t addr0;uchar_t count0;unsigned __int8 vu_57 : 1;unsigned __int8 vu_56 : 1;unsigned __int8 rsvd : 3;unsigned __int8 naca : 1;unsigned __int8 flag : 1;unsigned __int8 link : 1;};
struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g1 {uchar_t addr3;uchar_t addr2;uchar_t addr1;uchar_t addr0;uchar_t rsvd1;uchar_t count1;uchar_t count0;unsigned __int8 vu_97 : 1;unsigned __int8 vu_96 : 1;unsigned __int8 rsvd0 : 3;unsigned __int8 naca : 1;unsigned __int8 flag : 1;unsigned __int8 link : 1;};
struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g4 {uchar_t addr3;uchar_t addr2;uchar_t addr1;uchar_t addr0;uchar_t addtl_cdb_data3;uchar_t addtl_cdb_data2;uchar_t addtl_cdb_data1;uchar_t addtl_cdb_data0;uchar_t count3;uchar_t count2;uchar_t count1;uchar_t count0;uchar_t rsvd1;unsigned __int8 vu_157 : 1;unsigned __int8 vu_156 : 1;unsigned __int8 rsvd0 : 3;unsigned __int8 naca : 1;unsigned __int8 flag : 1;unsigned __int8 link : 1;};
struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g5 {uchar_t addr3;uchar_t addr2;uchar_t addr1;uchar_t addr0;uchar_t count3;uchar_t count2;uchar_t count1;uchar_t count0;uchar_t rsvd1;unsigned __int8 vu_117 : 1;unsigned __int8 vu_116 : 1;unsigned __int8 rsvd0 : 3;unsigned __int8 naca : 1;unsigned __int8 flag : 1;unsigned __int8 link : 1;};
struct scsi_cdb::$C7BA4B60DE78D71094D9A2B3854B7108 {uchar_t cmd;unsigned __int8 lun : 3;unsigned __int8 tag : 5;union scsi_cdb::$C7BA4B60DE78D71094D9A2B3854B7108::$283DB60FC2BC13980623105C0AF94F5F sg;};
union scsi_cdb::$C7BA4B60DE78D71094D9A2B3854B7108::$283DB60FC2BC13980623105C0AF94F5F {uchar_t scsi[14];struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g0 g0;struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g1 g1;struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g4 g4;struct scsi_cdb::$::$283DB60FC2BC13980623105C0AF94F5F::scsi_g5 g5;};
struct scsi_cmd {struct scsi_pkt cmd_pkt;uchar_t *cmd_cdbp;uchar_t *cmd_scbp;ulong_t cmd_data;ulong_t cmd_saved_data;ulong_t cmd_dmacount;struct sd_seg *cmd_dsegp;struct sd_seg cmd_dsegs;ddi_dma_handle_t cmd_dmahandle;ddi_dma_cookie_t cmd_dmacookie;int cmd_timeout;union scsi_cdb cmd_cdb_un;ulong_t cmd_flags;uchar_t cmd_pkt_private[8];uchar_t cmd_cdblen;uchar_t cmd_scblen;uchar_t cmd_privlen;uchar_t cmd_scb[4];uchar_t cmd_reserved[1];struct scsi_cmd *cmd_forw;ushort_t cmd_age;uchar_t cmd_tag[2];};
struct scsi_defect_hdr {uchar_t reserved;uchar_t descriptor;ushort_t length;};
struct scsi_defect_list {uchar_t reserved;uchar_t descriptor;ushort_t length;struct scsi_bfi_defect list[127];};
struct scsi_device {struct scsi_address sd_address;dev_info_t *sd_dev;kmutex_t sd_mutex;void *sd_reserved;struct scsi_inquiry *sd_inq;struct scsi_extended_sense *sd_sense;caddr_t sd_private;};
struct scsi_extended_sense {unsigned __int8 es_valid : 1;unsigned __int8 es_class : 3;unsigned __int8 es_code : 4;uchar_t es_segnum;unsigned __int8 es_filmk : 1;unsigned __int8 es_eom : 1;unsigned __int8 es_ili : 1;unsigned __int8 : 1;unsigned __int8 es_key : 4;unsigned __int8 es_info_1;uchar_t es_info_2;uchar_t es_info_3;uchar_t es_info_4;uchar_t es_add_len;uchar_t es_cmd_info[4];uchar_t es_add_code;uchar_t es_qual_code;uchar_t es_fru_code;uchar_t es_skey_specific[3];uchar_t es_add_info[2];};
struct scsi_format_params {ushort_t reserved;ushort_t length;struct scsi_bfi_defect list[127];};
struct scsi_inquiry {uchar_t inq_dtype;unsigned __int8 inq_rmb : 1;unsigned __int8 inq_qual : 7;unsigned __int8 inq_iso : 2;unsigned __int8 inq_ecma : 3;unsigned __int8 inq_ansi : 3;unsigned __int8 inq_aenc : 1;unsigned __int8 inq_trmiop : 1;unsigned __int8 inq_normaca : 1;unsigned __int8 : 1;unsigned __int8 inq_rdf : 4;unsigned __int8 inq_len;unsigned __int8 : 8;unsigned __int8 : 2;unsigned __int8 inq_port : 1;unsigned __int8 inq_dualp : 1;unsigned __int8 inq_mchngr : 1;unsigned __int8 inq_ackqreqq : 1;unsigned __int8 inq_addr32 : 1;unsigned __int8 inq_addr16 : 1;unsigned __int8 inq_reladdr : 1;unsigned __int8 inq_wbus32 : 1;unsigned __int8 inq_wbus16 : 1;unsigned __int8 inq_sync : 1;unsigned __int8 inq_linked : 1;unsigned __int8 inq_trandis : 1;unsigned __int8 inq_cmdque : 1;unsigned __int8 inq_sftre : 1;char inq_vid[8];char inq_pid[16];char inq_revision[4];char inq_serial[12];};
struct scsi_pkt {opaque_t pkt_ha_private;struct scsi_address pkt_address;opaque_t pkt_private;void (*pkt_comp)(struct scsi_pkt *);uint_t pkt_flags;int pkt_time;uchar_t *pkt_scbp;uchar_t *pkt_cdbp;ssize_t pkt_resid;uint_t pkt_state;uint_t pkt_statistics;uchar_t pkt_reason;};
struct scsi_reassign_blk {ushort_t reserved;ushort_t length;uint_t defect;};
struct scsi_reset_notify_entry {struct scsi_address *ap;void (*callback)(caddr_t);caddr_t arg;struct scsi_reset_notify_entry *next;};
struct scsi_sense {unsigned __int8 ns_valid : 1;unsigned __int8 ns_class : 3;unsigned __int8 ns_code : 4;unsigned __int8 ns_vu : 3;unsigned __int8 ns_lba_hi : 5;uchar_t ns_lba_mid;uchar_t ns_lba_lo;};
struct scsi_status {unsigned __int8 sts_resvd : 1;unsigned __int8 sts_vu7 : 1;unsigned __int8 sts_vu6 : 1;unsigned __int8 sts_is : 1;unsigned __int8 sts_busy : 1;unsigned __int8 sts_cm : 1;unsigned __int8 sts_chk : 1;unsigned __int8 sts_vu0 : 1;};
struct scsi_tape {struct scsi_device *un_sd;struct scsi_pkt *un_rqs;struct scsi_pkt *un_mkr_pkt;kcondvar_t un_sbuf_cv;kcondvar_t un_queue_cv;struct buf *un_sbufp;char *un_srqbufp;kcondvar_t un_clscv;struct buf *un_quef;struct buf *un_quel;struct buf *un_runqf;struct buf *un_runql;struct seq_mode *un_mspl;struct st_drivetype *un_dp;uint_t un_dp_size;caddr_t un_tmpbuf;daddr_t un_blkno;int un_oflags;int un_fileno;int un_err_fileno;daddr_t un_err_blkno;uint_t un_err_resid;__int16 un_fmneeded;dev_t un_dev;uchar_t un_attached;int un_pwr_mgmt;uchar_t un_density_known;uchar_t un_curdens;uchar_t un_lastop;uchar_t un_eof;uchar_t un_laststate;uchar_t un_state;uchar_t un_status;uchar_t un_retry_ct;uchar_t un_tran_retry_ct;uchar_t un_read_only;uchar_t un_test_append;uchar_t un_arq_enabled;uchar_t un_untagged_qing;uchar_t un_allow_large_xfer;uchar_t un_sbuf_busy;uchar_t un_ncmds;uchar_t un_throttle;uchar_t un_last_throttle;uchar_t un_max_throttle;uchar_t un_persistence;uchar_t un_persist_errors;uchar_t un_flush_on_errors;uint_t un_kbytes_xferred;uint_t un_last_resid;uint_t un_last_count;struct kstat *un_stats;struct buf *un_rqs_bp;struct buf *un_wf;struct buf *un_wl;struct read_blklim *un_rbl;int un_maxdma;uint_t un_bsize;int un_maxbsize;uint_t un_minbsize;int un_errno;kcondvar_t un_state_cv;enum mtio_state un_mediastate;enum mtio_state un_specified_mediastate;timeout_id_t un_delay_tid;timeout_id_t un_hib_tid;opaque_t un_swr_token;uchar_t un_comp_page;uchar_t un_rsvd_status;kstat_t *un_errstats;int un_init_options;int un_save_fileno;daddr_t un_save_blkno;uchar_t un_restore_pos;uchar_t un_silent_skip;int un_power_level;__int16 un_tids_at_suspend;kcondvar_t un_tape_busy_cv;kcondvar_t un_suspend_cv;uchar_t un_eject_tape_on_failure;uchar_t un_tape_alert;uchar_t un_rqs_state;caddr_t un_uscsi_rqs_buf;};
struct scsi_watch_result {struct scsi_status *statusp;struct scsi_extended_sense *sensep;uchar_t actual_sense_length;struct scsi_pkt *pkt;};
struct sd_seg {struct sd_seg *sd_next;ulong_t sd_off;ulong_t sd_cnt;};
struct search_entry {char *key;char *data;};
struct sec_data {uint_t secmod;uint_t rpcflavor;int flags;caddr_t data;};
typedef struct sec_data sec_data_t;
struct sec_ol {int sec_flags;uint_t sec_index;};
struct secattr {uint32 mask;int aclcnt;struct secattr::$AC4F1B810FD413B8B20095E4821CDF90 aclent;int dfaclcnt;struct secattr::$BBC7B5EFA13BC05BE06C962A868FC99E dfaclent;};
struct secattr::$AC4F1B810FD413B8B20095E4821CDF90 {uint_t aclent_len;aclent *aclent_val;};
struct secattr::$BBC7B5EFA13BC05BE06C962A868FC99E {uint_t dfaclent_len;aclent *dfaclent_val;};
struct secinfo {seconfig_t s_secinfo;unsigned int s_flags;int s_window;int s_rootcnt;caddr_t *s_rootnames;};
struct seconfig {char sc_name[64];int sc_nfsnum;int sc_rpcnum;char sc_gss_mech[64];struct gss_OID_desc_struct *sc_gss_mech_type;uint_t sc_qop;rpc_gss_service_t sc_service;};
typedef struct seconfig seconfig_t;
struct sect_trailer {uint32_t st_tid;uint32_t st_ident;};
typedef struct sect_trailer sect_trailer_t;
struct seg {caddr_t s_base;size_t s_size;struct as *s_as;seg_next s_next;struct seg *s_prev;struct seg_ops *s_ops;void *s_data;};
typedef union $B5B36604A4D7B91FFF9FA298D0BE592E seg_next;
struct seg_ops {int (*dup)(struct seg *, struct seg *);int (*unmap)(struct seg *, caddr_t, size_t);void (*free)(struct seg *);faultcode_t (*fault)(struct hat *, struct seg *, caddr_t, size_t, enum fault_type, enum seg_rw);faultcode_t (*faulta)(struct seg *, caddr_t);int (*setprot)(struct seg *, caddr_t, size_t, uint_t);int (*checkprot)(struct seg *, caddr_t, size_t, uint_t);int (*kluster)(struct seg *, caddr_t, ssize_t);size_t (*swapout)(struct seg *);int (*sync)(struct seg *, caddr_t, size_t, int, uint_t);size_t (*incore)(struct seg *, caddr_t, size_t, char *);int (*lockop)(struct seg *, caddr_t, size_t, int, int, ulong_t *, size_t);int (*getprot)(struct seg *, caddr_t, size_t, uint_t *);u_offset_t (*getoffset)(struct seg *, caddr_t);int (*gettype)(struct seg *, caddr_t);int (*getvp)(struct seg *, caddr_t, struct vnode **);int (*advise)(struct seg *, caddr_t, size_t, uint_t);void (*dump)(struct seg *);int (*pagelock)(struct seg *, caddr_t, size_t, struct page ***, enum lock_type, enum seg_rw);int (*getmemid)(struct seg *, caddr_t, memid_t *);};
enum seg_rw {S_OTHER = 0x0,S_READ = 0x1,S_WRITE = 0x2,S_EXEC = 0x3,S_CREATE = 0x4,};
typedef struct $BADA0C20D4FCFBDDC178EA94F25BDA19 seg_skiplist;
typedef struct $EF437A666C9BB0FC607366CF45CE1FC4 segadvstat_t;
struct segdev_crargs {offset_t offset;int (*mapfunc)(dev_t dev, off_t off, int prot);dev_t dev;uchar_t type;uchar_t prot;uchar_t maxprot;uint_t hat_attr;uint_t hat_flags;void *devmap_data;};
struct segdev_data {offset_t offset;kmutex_t lock;int (*mapfunc)(dev_t dev, off_t off, int prot);struct vnode *vp;uchar_t pageprot;uchar_t prot;uchar_t maxprot;uchar_t type;struct vpage *vpage;uint_t hat_attr;uint_t hat_flags;size_t softlockcnt;void *devmap_data;};
struct segdrv_crargs {int (*mapfunc)(dev_t dev, off_t off, int prot);size_t offset;dev_t dev;uint_t flags;caddr_t client;struct seg_ops *client_segops;int (*client_create)();uchar_t prot;uchar_t maxprot;};
struct segdrv_data {kmutex_t lock;int (*mapfunc)(dev_t dev, off_t off, int prot);u_offset_t offset;uint_t flags;struct vnode *vp;uchar_t pageprot;uchar_t prot;uchar_t maxprot;struct vpage *vpage;caddr_t client;struct seg_ops *client_segops;int (*client_create)();};
struct segmap_crargs {uint_t prot;uint_t shmsize;uint_t nfreelist;};
struct segmap_data {struct smap *smd_sm;struct smfree *smd_free;struct smap **smd_hash;__int16 smd_nfree;uchar_t smd_prot;};
struct segmapcnt {kstat_named_t smp_fault;kstat_named_t smp_faulta;kstat_named_t smp_getmap;kstat_named_t smp_get_use;kstat_named_t smp_get_reclaim;kstat_named_t smp_get_reuse;kstat_named_t smp_get_unused;kstat_named_t smp_get_nofree;kstat_named_t smp_rel_async;kstat_named_t smp_rel_write;kstat_named_t smp_rel_free;kstat_named_t smp_rel_abort;kstat_named_t smp_rel_dontneed;kstat_named_t smp_release;kstat_named_t smp_pagecreate;kstat_named_t smp_free_notfree;kstat_named_t smp_free_dirty;kstat_named_t smp_free;kstat_named_t smp_stolen;kstat_named_t smp_get_nomtx;};
typedef struct $17DB385B90B304C8609CE6820D4849CB segplckstat_t;
struct segspt_crargs {struct seg *seg_spt;struct anon_map *amp;uint_t prot;};
struct segvn_crargs {struct vnode *vp;struct cred *cred;u_offset_t offset;uchar_t type;uchar_t prot;uchar_t maxprot;uint_t flags;struct anon_map *amp;};
typedef struct segvn_crargs segvn_crargs_t;
struct segvn_data {krwlock_t lock;uchar_t pageprot;uchar_t prot;uchar_t maxprot;uchar_t type;u_offset_t offset;struct vnode *vp;ulong_t anon_index;struct anon_map *amp;struct vpage *vpage;struct cred *cred;size_t swresv;uchar_t advice;uchar_t pageadvice;ushort_t flags;ssize_t softlockcnt;};
typedef int selock_t;
struct sem {ushort_t semval;pid_t sempid;ushort_t semncnt;ushort_t semzcnt;ushort_t semncnt_cv;ushort_t semzcnt_cv;};
typedef struct $FB115A149FF37A3EAB946997DD4E3A6C sem_t;
struct sem_undo {struct sem_undo *un_np;__int16 un_cnt;struct sem_undo::undo un_ent[1];};
struct sem_undo::undo {__int16 un_aoe;ushort_t un_num;int un_id;};
typedef struct _sema_impl sema_impl_t;
typedef struct _sema sema_t;
struct sembuf {ushort_t sem_num;__int16 sem_op;__int16 sem_flg;};
struct semid_ds {struct ipc_perm sem_perm;struct sem *sem_base;ushort_t sem_nsems;time_t sem_otime;int32_t sem_pad1;time_t sem_ctime;int32_t sem_pad2;int sem_binary;int sem_pad3[3];};
struct seminfo {int semmni;int semmns;int semmnu;int semmsl;int semopm;int semume;int semusz;int semvmx;int semaem;};
struct seq_mode {uchar_t reserved1;uchar_t reserved2;unsigned __int8 wp : 1;unsigned __int8 bufm : 3;unsigned __int8 speed : 4;uchar_t bd_len;uchar_t density;uchar_t high_nb;uchar_t mid_nb;uchar_t low_nb;uchar_t reserved;uchar_t high_bl;uchar_t mid_bl;uchar_t low_bl;};
struct ser_str {queue_t *str_rq;caddr_t str_com;int str_inst;int str_state;};
struct servent {char *s_name;char **s_aliases;int s_port;char *s_proto;};
struct service_param {uchar_t data[16];};
struct servinfo {struct knetconfig *sv_knconf;struct netbuf sv_addr;nfs_fhandle sv_fhandle;struct sec_data *sv_secdata;char *sv_hostname;int sv_hostnamelen;struct servinfo *sv_next;};
typedef struct servinfo servinfo_t;
struct ses_ioctl {uint32_t page_size;uint8_t page_code;caddr_t page;};
typedef struct $D69C93AF57A4C706A087FFCB2A33F062 ses_objarg;
typedef struct $43F9318D896FF98D6032380AA4C8DE55 ses_object;
struct ses_softc {enctyp ses_type;encvec ses_vec;uint_t ses_nobjects;void *ses_private;encobj *ses_objmap;uchar_t ses_encstat;struct scsi_device *ses_devp;struct buf *ses_rqbp;struct scsi_pkt *ses_rqpkt;struct buf *ses_sbufp;timeout_id_t ses_restart_id;kcondvar_t ses_sbufcv;uchar_t ses_sbufbsy;uchar_t ses_oflag;uchar_t ses_present;uchar_t ses_suspended;uchar_t ses_arq;uint_t ses_lyropen;int ses_retries;struct uscsi_cmd ses_uscsicmd;uchar_t ses_srqcdb[12];uchar_t ses_srqsbuf[20];};
typedef struct ses_softc ses_softc_t;
struct sess {__int16 s_ref;__int16 s_mode;uid_t s_uid;gid_t s_gid;time_t s_ctime;dev_t s_dev;struct vnode *s_vp;struct pid *s_sidp;struct cred *s_cred;kmutex_t s_lock;kcondvar_t s_wait_cv;int s_cnt;int s_flag;};
typedef struct sess sess_t;
struct setUserInfo_t {int8_t *type;int8_t *userName;};
struct setUserPassword_t {int8_t *type;int8_t *password;};
struct set_atime {time_how set_it;nfstime3 atime;};
struct set_gid3 {bool_t set_it;gid3 gid;};
struct set_mode3 {bool_t set_it;mode3 mode;};
struct set_mtime {time_how set_it;nfstime3 mtime;};
struct set_size3 {bool_t set_it;size3 size;};
struct set_uid3 {bool_t set_it;uid3 uid;};
struct sf_al_addr_pair {uchar_t sf_al_pa;uchar_t sf_hard_address;uchar_t sf_inq_dtype;uchar_t sf_node_wwn[8];uchar_t sf_port_wwn[8];};
typedef struct sf_al_addr_pair sf_al_addr_pair_t;
struct sf_al_map {__int16 sf_count;sf_al_addr_pair_t sf_addr_pair[127];sf_al_addr_pair_t sf_hba_addr;};
typedef struct sf_al_map sf_al_map_t;
struct sf_stats {uint_t version;uint_t lip_count;uint_t lip_failures;uint_t cralloc_failures;uint_t ncmds;uint_t throttle_limit;uint_t cr_pool_size;struct sf_target_stats tstats[127];char drvr_name[256];};
typedef struct sf_stats sf_stats_t;
struct sf_target_stats {uint_t els_failures;uint_t timeouts;uint_t abts_failures;uint_t task_mgmt_failures;uint_t data_ro_mismatches;uint_t dl_len_mismatches;uint_t logouts_recvd;};
typedef struct sf_target_stats sf_target_stats_t;
struct sgttyb {char sg_ispeed;char sg_ospeed;char sg_erase;char sg_kill;int sg_flags;};
typedef unsigned int shmatt_t;
struct shmid_ds {struct ipc_perm shm_perm;size_t shm_segsz;struct anon_map *shm_amp;ushort_t shm_lkcnt;pid_t shm_lpid;pid_t shm_cpid;shmatt_t shm_nattch;ulong_t shm_cnattch;time_t shm_atime;int32_t shm_pad1;time_t shm_dtime;int32_t shm_pad2;time_t shm_ctime;int32_t shm_pad3;int32_t shm_pad4[4];};
struct shminfo {size_t shmmax;size_t shmmin;int shmmni;int shmseg;};
struct short_ad {uint32_t sad_ext_len;uint32_t sad_ext_loc;};
typedef struct short_ad short_ad_t;
struct short_hand_verf {struct opaque_auth new_cred;};
struct shr_locowner {pid_t sl_pid;int sl_id;};
struct shrlock {__int16 s_access;__int16 s_deny;int32_t s_sysid;pid_t s_pid;int s_own_len;caddr_t s_owner;};
struct shrlocklist {struct shrlock *shr;struct shrlocklist *next;};
struct si {struct si *s_next;struct si *s_forw;struct si *s_fore;int s_flags;ino_t s_shadow;dev_t s_dev;int s_signature;int s_use;int s_ref;krwlock_t s_lock;ic_acl_t s_a;ic_acl_t s_d;};
struct si_sockparams {int sp_family;int sp_type;int sp_protocol;};
typedef struct si si_t;
struct si_udata {int tidusize;int addrsize;int optsize;int etsdusize;int servtype;int so_state;int so_options;int tsdusize;struct si_sockparams sockparams;};
struct sig_args_struct {uchar_t *dirp;uchar_t *name_p;int *name_len_p;__int16 flags;ulong_t name_flags;uchar_t *SUF_ptr;struct hs_direntry *hdp;struct hsfs *fsp;cont_info_t *cont_info_p;};
typedef struct sig_args_struct sig_args_t;
typedef int sig_atomic_t;
struct sigaction {int sa_flags;union sigaction::$3EF29538CA63FA48B196EFE7F55176B1 _funcptr;sigset_t sa_mask;int sa_resv[2];};
union sigaction::$3EF29538CA63FA48B196EFE7F55176B1 {void (*_handler)();void (*_sigaction)(int, siginfo_t *, void *);};
struct sigaltstack {void *ss_sp;size_t ss_size;int ss_flags;};
struct sigevent {int sigev_notify;int sigev_signo;union sigval sigev_value;void (*sigev_notify_function)(union sigval);pthread_attr_t *sigev_notify_attributes;int __sigev_pad2;};
typedef int sigfpe_code_type;
typedef void (*sigfpe_handler_type)();
struct siginfo {int si_signo;int si_code;int si_errno;union siginfo::$61EAF0F09D3366CB297160630E2CDB63 __data;};
union siginfo::$61EAF0F09D3366CB297160630E2CDB63 {int __pad[29];struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$B04DB3B3CC2294C7D842DC1A71FF04F2 __proc;struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$F8DD959EF7757CB3FE124040C2995881 __fault;struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$EF0AB624753C0265765781C86414B739 __file;struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$6967CB540280E7650496FA35CF8D6785 __prof;};
struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$6967CB540280E7650496FA35CF8D6785 {caddr_t __faddr;timestruc_t __tstamp;__int16 __syscall;char __nsysarg;char __fault;int __sysarg[8];int __mstate[10];};
struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$B04DB3B3CC2294C7D842DC1A71FF04F2 {pid_t __pid;union siginfo::$::$B04DB3B3CC2294C7D842DC1A71FF04F2::$F5CA292679AFF35DF48F2E3B742B91CE __pdata;};
struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$EF0AB624753C0265765781C86414B739 {int __fd;int __band;};
struct siginfo::$61EAF0F09D3366CB297160630E2CDB63::$F8DD959EF7757CB3FE124040C2995881 {void *__addr;int __trapno;caddr_t __pc;};
struct siginfo::$::$::$F5CA292679AFF35DF48F2E3B742B91CE::$3D26F7DC2EE9BFA01DA7951ECDA8B430 {clock_t __utime;int __status;clock_t __stime;};
struct siginfo::$::$::$F5CA292679AFF35DF48F2E3B742B91CE::$6C9D3494F7394A5542DE40AFB5D524A6 {uid_t __uid;union sigval __value;};
union siginfo::$::$B04DB3B3CC2294C7D842DC1A71FF04F2::$F5CA292679AFF35DF48F2E3B742B91CE {struct siginfo::$::$::$F5CA292679AFF35DF48F2E3B742B91CE::$6C9D3494F7394A5542DE40AFB5D524A6 __kill;struct siginfo::$::$::$F5CA292679AFF35DF48F2E3B742B91CE::$3D26F7DC2EE9BFA01DA7951ECDA8B430 __cld;};
typedef struct siginfo siginfo_t;
struct siginfolist {int nsiginfo;char **vsiginfo;};
typedef int sigjmp_buf[19];
struct signData_t {OCF_KEYREF_t privateKeyRef;OCF_ALGO_t algorithm;OCF_Any_t dataToBeSigned;OCF_Any_t signedData;};
struct signHash_t {OCF_KEYREF_t privateKeyRef;OCF_ALGO_t algorithm;OCF_Any_t hashedData;OCF_Any_t signedData;};
struct signotify_id {pid_t sn_pid;int sn_index;int sn_pad;};
typedef struct signotify_id signotify_id_t;
struct sigqueue {struct sigqueue *sq_next;k_siginfo_t sq_info;void (*sq_func)(struct sigqueue *);void *sq_backptr;};
typedef struct sigqueue sigqueue_t;
typedef struct $57DBDB9F9E69733D408CC307EF34A958 sigset_t;
struct sigstack {void *ss_sp;int ss_onstack;};
union sigval {int sival_int;void *sival_ptr;};
typedef float single;
struct sioc_addrreq {struct sockaddr_storage sa_addr;int sa_res;int sa_pad;};
struct sioc_lsg_req {struct sockaddr_storage slr_src;struct sockaddr_storage slr_grp;uint_t slr_pktcnt;uint_t slr_bytecnt;uint_t slr_wrong_if;uint_t slr_pad;};
struct sioc_sg_req {struct in_addr src;struct in_addr grp;uint_t pktcnt;uint_t bytecnt;uint_t wrong_if;};
struct sioc_vif_req {vifi_t vifi;uint_t icount;uint_t ocount;uint_t ibytes;uint_t obytes;};
typedef uint64 size3;
typedef uint32_t size32_t;
typedef uint_t size_t;
struct sl_stats {int ipack;int opack;int ichar;int ochar;int abort;int crc;int cts;int dcd;int overrun;int underrun;int ierror;int oerror;int nobuffers;};
struct sl_status {int type;int status;timestruc_t tstamp;};
struct sleepq {struct _kthread *sq_first;};
typedef struct _sleepq_head sleepq_head_t;
typedef struct sleepq sleepq_t;
struct slot {enum slot::$D48DA2B417DCEB42491146B2A8A36AD2 sl_status;daddr_t sl_blkno;int sl_offset;struct buf *sl_bp;struct pcdir *sl_ep;int sl_flags;};
enum slot::$D48DA2B417DCEB42491146B2A8A36AD2 {SL_NONE = 0x0,SL_FOUND = 0x1,SL_EXTEND = 0x2,};
struct sm_name {char *mon_name;};
struct sm_stat {int state;};
struct sm_stat_res {res res_stat;int state;};
struct smap {struct vnode *sm_vp;struct smap *sm_hash;struct smap *sm_next;struct smap *sm_prev;u_offset_t sm_off;ushort_t sm_bitmap;ushort_t sm_refcnt;};
struct smdevice_info {uchar_t sm_version;int32_t sm_interface_type;char *sm_vendor_name;char *sm_product_name;char *sm_firmware_version;};
typedef struct smdevice_info smdevice_info_t;
struct smfree {struct smap *sm_free;kmutex_t sm_mtx;kcondvar_t sm_free_cv;ushort_t sm_want;};
typedef struct smmedium_property smmedium_prop_t;
struct smmedium_property {int32_t sm_version;int32_t sm_media_type;int32_t sm_blocksize;int32_t sm_capacity;int32_t sm_pcyl;int32_t sm_nhead;int32_t sm_nsect;};
struct smwp_state {uchar_t sm_version;int32_t sm_new_state;int32_t sm_passwd_len;char sm_passwd[32];};
typedef struct smwp_state smwp_state_t;
struct snaphdr {uchar_t snap_oid[3];uchar_t snap_type[2];};
struct snode {struct snode *s_next;struct vnode s_vnode;struct vnode *s_realvp;struct vnode *s_commonvp;dev_t s_dev;dev_info_t *s_dip;u_offset_t s_nextr;struct snode *s_list;u_offset_t s_size;ushort_t s_flag;dev_t s_fsid;time_t s_atime;time_t s_mtime;time_t s_ctime;int s_count;int s_mapcnt;kmutex_t s_lock;kcondvar_t s_cv;dev_t s_gdev;};
struct so_so {int flags;int closeflags;queue_t *rdq;mblk_t *iocsave;struct t_info tp_info;struct netbuf raddr;struct netbuf laddr;struct ux_extaddr lux_dev;struct ux_extaddr rux_dev;int so_error;mblk_t *oob;struct so_so *so_conn;mblk_t *consave;struct si_udata udata;int so_option;mblk_t *bigmsg;struct so_ux so_ux;int hasoutofband;mblk_t *urg_msg;int sndbuf;int rcvbuf;int sndlowat;int rcvlowat;int linger;int sndtimeo;int rcvtimeo;int prototype;int so_cbacks_outstanding;int so_cbacks_inprogress;struct so_so *so_next;struct so_so **so_ptpn;int wbufcid;int rbufcid;int wtimoutid;int rtimoutid;queue_t *so_driverq;int so_isaccepting;struct so_so *so_acceptor;int so_id;};
struct so_ux {struct so_so *next;struct so_so *prev;};
struct soaddr {struct sockaddr *soa_sa;t_uscalar_t soa_len;t_uscalar_t soa_maxlen;};
struct soaddr_ux {void *sou_vp;uint_t sou_magic;};
typedef struct _sobj_ops sobj_ops_t;
struct socal_fm_version {uint_t fcode_ver_len;uint_t mcode_ver_len;uint_t prom_ver_len;char *fcode_ver;char *mcode_ver;char *prom_ver;};
struct socal_stats {uint_t version;uint_t resets;uint_t reqq_intrs;uint_t qfulls;struct fc_pstats pstats[2];char drvr_name[256];char fw_revision[256];char node_wwn[17];char port_wwn[2][17];uint_t parity_chk_enabled;};
typedef struct socal_stats socal_stats_t;
struct sockaddr {sa_family_t sa_family;char sa_data[14];};
struct sockaddr_dl {ushort_t sdl_family;ushort_t sdl_index;uchar_t sdl_type;uchar_t sdl_nlen;uchar_t sdl_alen;uchar_t sdl_slen;char sdl_data[244];};
struct sockaddr_in {sa_family_t sin_family;in_port_t sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct sockaddr_in6 {sa_family_t sin6_family;in_port_t sin6_port;uint32_t sin6_flowinfo;struct in6_addr sin6_addr;uint32_t sin6_scope_id;uint32_t __sin6_src_id;};
typedef double sockaddr_maxalign_t;
struct sockaddr_storage {sa_family_t ss_family;char _ss_pad1[6];sockaddr_maxalign_t _ss_align;char _ss_pad2[240];};
struct sockaddr_un {sa_family_t sun_family;char sun_path[108];};
typedef uchar_t socket_enum_t[8];
struct sockinfo {uint_t si_size;__int16 si_family;__int16 si_type;ushort_t si_flag;uint_t si_state;uint_t si_ux_laddr_sou_magic;uint_t si_ux_faddr_sou_magic;t_scalar_t si_serv_type;t_uscalar_t si_laddr_soa_len;t_uscalar_t si_faddr_soa_len;uint16_t si_laddr_family;uint16_t si_faddr_family;char si_laddr_sun_path[1025];char si_faddr_sun_path[1025];};
typedef uint32_t socklen_t;
struct sonode {struct vnode so_vnode;dev_t so_dev;struct vnode *so_accessvp;kmutex_t so_lock;kcondvar_t so_state_cv;kcondvar_t so_ack_cv;kcondvar_t so_connind_cv;kcondvar_t so_want_cv;uint_t so_state;uint_t so_mode;mblk_t *so_ack_mp;mblk_t *so_conn_ind_head;mblk_t *so_conn_ind_tail;mblk_t *so_unbind_mp;ushort_t so_flag;dev_t so_fsid;time_t so_atime;time_t so_mtime;time_t so_ctime;int so_count;__int16 so_family;__int16 so_type;__int16 so_protocol;__int16 so_version;__int16 so_pushcnt;__int16 so_options;struct linger so_linger;int so_sndbuf;int so_rcvbuf;ushort_t so_error;ushort_t so_delayed_error;int so_backlog;mblk_t *so_oobmsg;uint_t so_oobsigcnt;uint_t so_oobcnt;pid_t so_pgrp;t_uscalar_t so_tsdu_size;t_uscalar_t so_etsdu_size;t_scalar_t so_addr_size;t_uscalar_t so_opt_size;t_uscalar_t so_tidu_size;t_scalar_t so_serv_type;t_uscalar_t so_acceptor_id;struct tpi_provinfo *so_provinfo;struct soaddr so_laddr;struct soaddr so_faddr;mblk_t *so_eaddr_mp;struct soaddr_ux so_ux_laddr;struct soaddr_ux so_ux_faddr;struct vnode *so_ux_bound_vp;struct sonode *so_next;struct sonode *so_prev;};
struct space_bmap_desc {tag_t sbd_tag;uint32_t sbd_nbits;uint32_t sbd_nbytes;uint8_t sbd_bmap[500];};
typedef struct space_bmap_desc space_bmap_desc_t;
struct specdata3 {uint32 specdata1;uint32 specdata2;};
typedef unsigned int speed_t;
typedef int spgcnt_t;
typedef struct $C9793B2A88A40550F3E6FCBE57C78800 sprayarr;
struct spraycumul {u_int counter;spraytimeval clock;};
struct spraytimeval {u_int sec;u_int usec;};
struct spt_data {struct vnode *vp;struct anon_map *amp;size_t realsize;struct page **ppa;uint_t prot;kmutex_t lock;size_t pcachecnt;};
struct sptshm_data {struct as *sptas;struct anon_map *amp;size_t softlockcnt;struct seg *sptseg;};
struct spwd {char *sp_namp;char *sp_pwdp;int sp_lstchg;int sp_min;int sp_max;int sp_warn;int sp_inact;int sp_expire;unsigned int sp_flag;};
struct sque {char sq_exfil[140];char sq_infil[48];char sq_jobnm[9];char sq_pgrmr[25];char sq_jobno[9];char sq_login[9];char sq_homed[48];int sq_min;};
struct srvurl {char *s_pcSrvType;char *s_pcHost;int s_iPort;char *s_pcNetFamily;char *s_pcSrvPart;};
typedef int32_t ssize32_t;
typedef int ssize_t;
typedef struct $250291EC3BC74262394306E05299BF94 ssl_spath;
struct st_drivetype {char *name;char length;char vid[24];char type;int bsize;int options;int max_rretries;int max_wretries;uchar_t densities[4];uchar_t default_density;uchar_t speeds[4];};
struct st_errstats {struct kstat_named st_softerrs;struct kstat_named st_harderrs;struct kstat_named st_transerrs;struct kstat_named st_vid;struct kstat_named st_pid;struct kstat_named st_revision;struct kstat_named st_serial;};
struct st_tape_alert {struct log_page log_page;struct st_tape_alert_parameter param[64];};
struct st_tape_alert_parameter {struct log_param log_param;uchar_t param_value;};
enum stable_how {UNSTABLE = 0x0,DATA_SYNC = 0x1,FILE_SYNC = 0x2,};
typedef enum $9DF241986813CBC10D66CF006F720785 stabsret_t;
typedef struct sigaltstack stack_t;
struct stat {dev_t st_dev;int st_pad1[3];ino_t st_ino;mode_t st_mode;nlink_t st_nlink;uid_t st_uid;gid_t st_gid;dev_t st_rdev;int st_pad2[2];off_t st_size;int st_pad3;timestruc_t st_atim;timestruc_t st_mtim;timestruc_t st_ctim;blksize_t st_blksize;blkcnt_t st_blocks;char st_fstype[16];int st_pad4[8];};
struct stat64 {dev_t st_dev;int st_pad1[3];ino64_t st_ino;mode_t st_mode;nlink_t st_nlink;uid_t st_uid;gid_t st_gid;dev_t st_rdev;int st_pad2[2];off64_t st_size;timestruc_t st_atim;timestruc_t st_mtim;timestruc_t st_ctim;blksize_t st_blksize;blkcnt64_t st_blocks;char st_fstype[16];int st_pad4[8];};
struct stat_chge {char *mon_name;int state;};
struct statfs {__int16 f_fstyp;int f_bsize;int f_frsize;int f_blocks;int f_bfree;ino_t f_files;ino_t f_ffree;char f_fname[6];char f_fpack[6];};
struct statstime {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;u_int v_swtch;int avenrun[3];rstat_timeval boottime;rstat_timeval curtime;int if_opackets;};
struct statsvar {struct statsvar::$7FCA211C9072D2949954B3DB78BFDDCD cp_time;struct statsvar::$BB7C6D2B3C1E1AB741C949E9CDEFD86D dk_xfer;u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_opackets;int if_oerrors;int if_collisions;u_int v_swtch;int avenrun[3];rstat_timeval boottime;rstat_timeval curtime;};
struct statsvar::$7FCA211C9072D2949954B3DB78BFDDCD {u_int cp_time_len;int *cp_time_val;};
struct statsvar::$BB7C6D2B3C1E1AB741C949E9CDEFD86D {u_int dk_xfer_len;int *dk_xfer_val;};
struct status {char *mon_name;int state;char priv[16];};
struct statvfs {unsigned int f_bsize;unsigned int f_frsize;fsblkcnt_t f_blocks;fsblkcnt_t f_bfree;fsblkcnt_t f_bavail;fsfilcnt_t f_files;fsfilcnt_t f_ffree;fsfilcnt_t f_favail;unsigned int f_fsid;char f_basetype[16];unsigned int f_flag;unsigned int f_namemax;char f_fstr[32];unsigned int f_filler[16];};
struct statvfs64 {unsigned int f_bsize;unsigned int f_frsize;fsblkcnt64_t f_blocks;fsblkcnt64_t f_bfree;fsblkcnt64_t f_bavail;fsfilcnt64_t f_files;fsfilcnt64_t f_ffree;fsfilcnt64_t f_favail;unsigned int f_fsid;char f_basetype[16];unsigned int f_flag;unsigned int f_namemax;char f_fstr[32];unsigned int f_filler[16];};
typedef struct statvfs64 statvfs64_t;
typedef struct statvfs statvfs_t;
struct stbl {tag_t stbl_tag;regid_t stbl_si;uint16_t stbl_len;uint16_t stbl_res1;uint32_t stbl_seqno;stbl_entry_t stbl_entry;};
struct stbl_entry {uint32_t sent_ol;uint32_t sent_ml;};
typedef struct stbl_entry stbl_entry_t;
struct stc_defaults_t {int flags;int drain_size;int stc_hiwater;int stc_lowwater;int rtpr;int rx_fifo_thld;struct termios termios;int strobe_w;int data_setup;int ack_timeout;int error_timeout;int busy_timeout;int line_no;int op;uchar_t reg_offset;uchar_t reg_data;};
struct stc_diagregs_t {int reg_flag;uchar_t reg_offset;uchar_t reg_data;};
struct stc_line_t {unsigned int state;unsigned int flags;tty_common_t stc_ttycommon;unsigned int unit_no;unsigned int line_no;dev_t *dev;timeout_id_t stc_timeout_id;timeout_id_t stc_draintimeout_id;timeout_id_t ppc_acktimeout_id;timeout_id_t ppc_out_id;struct stc_unit_t *stc;kcondvar_t *cvp;kmutex_t *line_mutex;uchar_t *dtr;uchar_t dtr_shadow;uchar_t stc_flowc;int stc_txbufsize;uchar_t stc_txbuf[16];int stc_txcount;int stc_silosize;int stc_sscnt;uchar_t *stc_source;uchar_t *stc_sink;uchar_t stc_ssilo[1024];int stc_qfcnt;bufcall_id_t stc_wbufcid;int drain_size;int stc_hiwater;int stc_lowwater;int rx_fifo_thld;struct stc_lineparam_t default_param;int strobe_w;int data_setup;int ack_timeout;int ack_loops;int ack_maxloops;uchar_t pcon_s;uchar_t *stc_txbufp;int pstate;int error_timeout;int error_cnt;int busy_timeout;int busy_cnt;struct stc_stats_t stc_stats;};
struct stc_lineparam_t {struct stc_defaults_t sd;uchar_t pcon;int ack_maxloops;uchar_t cor1;uchar_t cor2;uchar_t cor3;uchar_t schr1;uchar_t schr2;uchar_t schr3;uchar_t schr4;uchar_t mcor1;uchar_t mcor2;uchar_t rbprh;uchar_t rbprl;uchar_t tbprh;uchar_t tbprl;uchar_t rtpr;};
struct stc_state_t {int state;caddr_t addr;};
struct stc_stats_t {int line_no;int cmd;int qpunt;int drain_timer;int no_canput;int no_rcv_drain;int stc_drain;int stc_break;int stc_sbreak;int stc_ebreak;int set_modem;int get_modem;int ioc_error;int set_params;int no_start;int xmit_int;int rcv_int;int rcvex_int;int modem_int;int xmit_cc;int rcv_cc;int break_cnt;int bufcall;int canwait;int nqfretry;};
struct stc_unit_t {kmutex_t *stc_mutex;ddi_iblock_cookie_t stc_blk_cookie;ddi_idevice_cookie_t stc_dev_cookie;kmutex_t *ppc_mutex;ddi_iblock_cookie_t ppc_blk_cookie;ddi_idevice_cookie_t ppc_dev_cookie;ddi_iblock_cookie_t soft_blk_cookie;ddi_idevice_cookie_t soft_dev_cookie;ddi_softintr_t softint_id;unsigned int flags;struct stc_line_t line[8];struct stc_line_t ppc_line;struct stc_line_t control_line;caddr_t prom;struct stcregs_t *regs;struct stciack_t *iack;struct ppcregs_t *ppc;unsigned __int16 *stc_baud;dev_info_t *dip;};
struct stciack_t {volatile uchar_t pilr1;volatile uchar_t pilr2;volatile uchar_t pilr3;};
struct stcntrs {char st_lrc;char st_xnaks;char st_rnaks;char st_xwaks;char st_rwaks;char st_scc;};
struct stcregs_t {uchar_t f0[1];volatile uchar_t ccr;volatile uchar_t ier;volatile uchar_t cor1;volatile uchar_t cor2;volatile uchar_t cor3;volatile uchar_t ccsr;volatile uchar_t rdcr;uchar_t f1[1];volatile uchar_t schr1;volatile uchar_t schr2;volatile uchar_t schr3;volatile uchar_t schr4;uchar_t f2[3];volatile uchar_t mcor1;volatile uchar_t mcor2;volatile uchar_t mcr;uchar_t f3[5];volatile uchar_t rtpr;uchar_t f4[15];volatile uchar_t msvr;uchar_t f5[8];volatile uchar_t rbprh;volatile uchar_t rbprl;uchar_t f6[6];volatile uchar_t tbprh;volatile uchar_t tbprl;uchar_t f7[5];volatile uchar_t givr;volatile uchar_t gicr;uchar_t f8[31];volatile uchar_t pilr1;volatile uchar_t pilr2;volatile uchar_t pilr3;volatile uchar_t car;uchar_t f9[6];volatile uchar_t gfrcr;uchar_t f10[4];volatile uchar_t pprh;volatile uchar_t pprl;uchar_t f11[6];volatile uchar_t rdr;uchar_t f12[1];volatile uchar_t rcsr;volatile uchar_t tdr;uchar_t f13[3];volatile uchar_t eoir;};
struct stio {unsigned __int16 ttyid;char row;char col;char orow;char ocol;char tab;char aid;char ss1;char ss2;unsigned __int16 imode;unsigned __int16 lmode;unsigned __int16 omode;};
struct stp4020_regs_t {struct stp4020_socket_csr_t socket[2];};
struct stp4020_socket_csr_t {volatile struct stp4020_window_ctl_t window[3];volatile ushort_t ctl0;volatile ushort_t ctl1;volatile ushort_t stat0;volatile ushort_t stat1;volatile uchar_t filler[12];};
struct stp4020_window_ctl_t {volatile ushort_t ctl0;volatile ushort_t ctl1;};
typedef struct string_to_int str_int_t;
struct str_list {int sl_nmods;struct str_mlist *sl_modlist;};
struct str_mlist {char l_name[9];};
struct strapush {struct apcommon sap_common;char sap_list[8][9];};
struct strbuf {int maxlen;int len;caddr_t buf;};
struct streamtab {struct qinit *st_rdinit;struct qinit *st_wrinit;struct qinit *st_muxrinit;struct qinit *st_muxwinit;};
struct strfdinsert {struct strbuf ctlbuf;struct strbuf databuf;t_uscalar_t flags;int fildes;int offset;};
struct string_to_int {char *sti_str;uint32_t sti_int;};
struct strioctl {int ic_cmd;int ic_timout;int ic_len;char *ic_dp;};
typedef struct $E7FD7F5919C5B86C45B84B2C205CAA78 strlog_struct_t;
struct strmodconf {int pos;caddr_t mod_name;};
struct stroptions {uint_t so_flags;__int16 so_readopt;ushort_t so_wroff;ssize_t so_minpsz;ssize_t so_maxpsz;size_t so_hiwat;size_t so_lowat;unsigned __int8 so_band;ushort_t so_erropt;ssize_t so_maxblk;ushort_t so_copyopt;};
struct strpeek {struct strbuf ctlbuf;struct strbuf databuf;t_uscalar_t flags;};
struct strrecvfd {int fd;uid_t uid;gid_t gid;char fill[8];};
struct strs {charptr _back_tab;charptr _bell;charptr _carriage_return;charptr _change_scroll_region;charptr _clear_all_tabs;charptr _clear_screen;charptr _clr_eol;charptr _clr_eos;charptr _column_address;charptr _command_character;charptr _crsr_address;charptr _crsr_down;charptr _crsr_home;charptr _crsr_invisible;charptr _crsr_left;charptr _crsr_mem_address;charptr _crsr_normal;charptr _crsr_right;charptr _crsr_to_ll;charptr _crsr_up;charptr _crsr_visible;charptr _dlt_character;charptr _dlt_line;charptr _dis_status_line;charptr _down_half_line;charptr _entr_alt_charset_mode;charptr _entr_blink_mode;charptr _entr_bold_mode;charptr _entr_ca_mode;charptr _entr_delete_mode;charptr _entr_dim_mode;charptr _entr_insert_mode;charptr _entr_secure_mode;charptr _entr_protected_mode;charptr _entr_reverse_mode;charptr _entr_standout_mode;charptr _entr_underline_mode;charptr _erase_chars;charptr _exit_alt_charset_mode;charptr _exit_attribute_mode;charptr _exit_ca_mode;charptr _exit_delete_mode;charptr _exit_insert_mode;charptr _exit_standout_mode;charptr _exit_underline_mode;charptr _flash_screen;charptr _form_feed;charptr _from_status_line;charptr _init_1string;charptr _init_2string;charptr _init_3string;charptr _init_file;charptr _ins_character;charptr _ins_line;charptr _ins_padding;charptr _ky_backspace;charptr _ky_catab;charptr _ky_clear;charptr _ky_ctab;charptr _ky_dc;charptr _ky_dl;charptr _ky_down;charptr _ky_eic;charptr _ky_eol;charptr _ky_eos;charptr _ky_f0;charptr _ky_f1;charptr _ky_f10;charptr _ky_f2;charptr _ky_f3;charptr _ky_f4;charptr _ky_f5;charptr _ky_f6;charptr _ky_f7;charptr _ky_f8;charptr _ky_f9;charptr _ky_home;charptr _ky_ic;charptr _ky_il;charptr _ky_left;charptr _ky_ll;charptr _ky_npage;charptr _ky_ppage;charptr _ky_right;charptr _ky_sf;charptr _ky_sr;charptr _ky_stab;charptr _ky_up;charptr _kpad_local;charptr _kpad_xmit;charptr _lab_f0;charptr _lab_f1;charptr _lab_f10;charptr _lab_f2;charptr _lab_f3;charptr _lab_f4;charptr _lab_f5;charptr _lab_f6;charptr _lab_f7;charptr _lab_f8;};
struct strs2 {charptr _lab_f9;charptr _meta_off;charptr _meta_on;charptr _newline;charptr _pad_char;charptr _prm_dch;charptr _prm_delete_line;charptr _prm_down_cursor;charptr _prm_ich;charptr _prm_index;charptr _prm_insert_line;charptr _prm_left_cursor;charptr _prm_right_cursor;charptr _prm_rindex;charptr _prm_up_cursor;charptr _pkey_key;charptr _pkey_local;charptr _pkey_xmit;charptr _print_screen;charptr _prtr_off;charptr _prtr_on;charptr _repeat_char;charptr _reset_1string;charptr _reset_2string;charptr _reset_3string;charptr _reset_file;charptr _restore_cursor;charptr _row_address;charptr _save_cursor;charptr _scrll_forward;charptr _scrll_reverse;charptr _set_attributes;charptr _set_tab;charptr _set_window;charptr _tab;charptr _to_status_line;charptr _underline_char;charptr _up_half_line;charptr _init_prog;charptr _ky_a1;charptr _ky_a3;charptr _ky_b2;charptr _ky_c1;charptr _ky_c3;charptr _prtr_non;charptr _char_padding;charptr _acs_chars;charptr _plab_norm;charptr _ky_btab;charptr _entr_xon_mode;charptr _exit_xon_mode;charptr _entr_am_mode;charptr _exit_am_mode;charptr _xon_character;charptr _xoff_character;charptr _ena_acs;charptr _labl_on;charptr _labl_off;charptr _ky_beg;charptr _ky_cancel;charptr _ky_close;charptr _ky_command;charptr _ky_copy;charptr _ky_create;charptr _ky_end;charptr _ky_enter;charptr _ky_exit;charptr _ky_find;charptr _ky_help;charptr _ky_mark;charptr _ky_message;charptr _ky_move;charptr _ky_next;charptr _ky_open;charptr _ky_options;charptr _ky_previous;charptr _ky_print;charptr _ky_redo;charptr _ky_reference;charptr _ky_refresh;charptr _ky_replace;charptr _ky_restart;charptr _ky_resume;charptr _ky_save;charptr _ky_suspend;charptr _ky_undo;charptr _ky_sbeg;charptr _ky_scancel;charptr _ky_scommand;charptr _ky_scopy;charptr _ky_screate;charptr _ky_sdc;charptr _ky_sdl;charptr _ky_select;charptr _ky_send;charptr _ky_seol;charptr _ky_sexit;charptr _ky_sfind;charptr _ky_shelp;charptr _ky_shome;};
struct strs3 {charptr _ky_sic;charptr _ky_sleft;charptr _ky_smessage;charptr _ky_smove;charptr _ky_snext;charptr _ky_soptions;charptr _ky_sprevious;charptr _ky_sprint;charptr _ky_sredo;charptr _ky_sreplace;charptr _ky_sright;charptr _ky_srsume;charptr _ky_ssave;charptr _ky_ssuspend;charptr _ky_sundo;charptr _req_for_input;charptr _ky_f11;charptr _ky_f12;charptr _ky_f13;charptr _ky_f14;charptr _ky_f15;charptr _ky_f16;charptr _ky_f17;charptr _ky_f18;charptr _ky_f19;charptr _ky_f20;charptr _ky_f21;charptr _ky_f22;charptr _ky_f23;charptr _ky_f24;charptr _ky_f25;charptr _ky_f26;charptr _ky_f27;charptr _ky_f28;charptr _ky_f29;charptr _ky_f30;charptr _ky_f31;charptr _ky_f32;charptr _ky_f33;charptr _ky_f34;charptr _ky_f35;charptr _ky_f36;charptr _ky_f37;charptr _ky_f38;charptr _ky_f39;charptr _ky_f40;charptr _ky_f41;charptr _ky_f42;charptr _ky_f43;charptr _ky_f44;charptr _ky_f45;charptr _ky_f46;charptr _ky_f47;charptr _ky_f48;charptr _ky_f49;charptr _ky_f50;charptr _ky_f51;charptr _ky_f52;charptr _ky_f53;charptr _ky_f54;charptr _ky_f55;charptr _ky_f56;charptr _ky_f57;charptr _ky_f58;charptr _ky_f59;charptr _ky_f60;charptr _ky_f61;charptr _ky_f62;charptr _ky_f63;charptr _clr_bol;charptr _clear_margins;charptr _set_left_margin;charptr _set_right_margin;charptr _labl_format;charptr _set_clock;charptr _display_clock;charptr _remove_clock;charptr _create_window;charptr _goto_window;charptr _hangup;charptr _dial_phone;charptr _quick_dial;charptr _tone;charptr _pulse;charptr _flash_hook;charptr _fixed_pause;charptr _wait_tone;charptr _user0;charptr _user1;charptr _user2;charptr _user3;charptr _user4;charptr _user5;charptr _user6;charptr _user7;charptr _user8;charptr _user9;charptr _orig_pair;charptr _orig_colors;charptr _initialize_color;};
struct strs4 {charptr _initialize_pair;charptr _set_color_pair;charptr _set_foreground;charptr _set_background;charptr _change_char_pitch;charptr _change_line_pitch;charptr _change_res_horz;charptr _change_res_vert;charptr _define_char;charptr _entr_doublewide_mode;charptr _entr_draft_quality;charptr _entr_italics_mode;charptr _entr_leftward_mode;charptr _entr_micro_mode;charptr _entr_near_letter_quality;charptr _entr_normal_quality;charptr _entr_shadow_mode;charptr _entr_subscript_mode;charptr _entr_superscript_mode;charptr _entr_upward_mode;charptr _exit_doublewide_mode;charptr _exit_italics_mode;charptr _exit_leftward_mode;charptr _exit_micro_mode;charptr _exit_shadow_mode;charptr _exit_subscript_mode;charptr _exit_superscript_mode;charptr _exit_upward_mode;charptr _micro_column_address;charptr _micro_down;charptr _micro_left;charptr _micro_right;charptr _micro_row_address;charptr _micro_up;charptr _order_of_pins;charptr _prm_down_micro;charptr _prm_left_micro;charptr _prm_right_micro;charptr _prm_up_micro;charptr _select_char_set;charptr _set_bottom_margin;charptr _set_bottom_margin_parm;charptr _set_left_margin_parm;charptr _set_right_margin_parm;charptr _set_top_margin;charptr _set_top_margin_parm;charptr _start_bit_image;charptr _start_char_set_def;charptr _stop_bit_image;charptr _stop_char_set_def;charptr _subscript_characters;charptr _superscript_characters;charptr _these_cause_cr;charptr _zero_motion;charptr _char_set_names;charptr _ky_mouse;charptr _mouse_info;charptr _req_mouse_pos;charptr _get_mouse;charptr _set_a_foreground;charptr _set_a_background;charptr _pkey_plab;charptr _device_type;charptr _code_set_init;charptr _set0_des_seq;charptr _set1_des_seq;charptr _set2_des_seq;charptr _set3_des_seq;charptr _set_lr_margin;charptr _set_tb_margin;charptr _bit_image_repeat;charptr _bit_image_newline;charptr _bit_image_carriage_return;charptr _color_names;charptr _define_bit_image_region;charptr _end_bit_image_region;charptr _set_color_band;charptr _set_page_length;charptr _display_pc_char;charptr _entr_pc_charset_mode;charptr _exit_pc_charset_mode;charptr _entr_scancode_mode;charptr _exit_scancode_mode;charptr _pc_term_options;charptr _scancode_escape;charptr _alt_scancode_esc;charptr _entr_horizontal_hl_mode;charptr _entr_left_hl_mode;charptr _entr_low_hl_mode;charptr _entr_right_hl_mode;charptr _entr_top_hl_mode;charptr _entr_vertical_hl_mode;charptr _set_a_attributes;charptr _set_pglen_inch;charptr Sentinel;};
struct strsigset {pid_t ss_pid;int ss_events;};
struct strtty {struct t_buf t_in;struct t_buf t_out;queue_t *t_rdqp;mblk_t *t_ioctlp;mblk_t *t_lbuf;int t_dev;int t_iflag;int t_oflag;int t_cflag;int t_lflag;__int16 t_state;char t_line;char t_dstat;unsigned __int8 t_cc[19];};
struct sttsv {char st_major;__int16 st_pcdnum;char st_devaddr;int st_csidev;};
struct suminfo {int si_nbytes;int si_sum;};
union sunromvec {struct romvec_obp obp;struct romvec_sunmon sunmon;};
typedef int suseconds_t;
typedef struct __svc_local_cred_t svc_local_cred_t;
typedef struct service_param svc_param_t;
struct svc_req {rpcprog_t rq_prog;rpcvers_t rq_vers;rpcproc_t rq_proc;struct opaque_auth rq_cred;caddr_t rq_clntcred;SVCXPRT *rq_xprt;};
typedef struct $F3D1899E2E37EFD927B28027A707AB99 svc_rpc_gss_parms_t;
struct svcfh {fsid_t fh_fsid;ushort_t fh_len;char fh_data[10];ushort_t fh_xlen;char fh_xdata[10];};
struct svcpool_args {uint32_t id;uint32_t maxthreads;uint32_t redline;uint32_t qsize;uint32_t timeout;uint32_t stksize;uint32_t max_same_xprt;};
struct svcxprt_ext_t {int flags;SVCXPRT *parent;struct rpc_msg *msg;struct svc_req *req;char *cred_area;int refcnt;SVCXPRT_LIST *my_xlist;mutex_t send_mutex;SVCAUTH xp_auth;};
struct svcxprt_list_t {struct svcxprt_list_t *next;SVCXPRT *xprt;};
struct swapent {char *ste_path;off_t ste_start;off_t ste_length;int ste_pages;int ste_free;int ste_flags;};
typedef struct swapent swapent_t;
struct swapinfo {ulong_t si_soff;ulong_t si_eoff;struct vnode *si_vp;struct swapinfo *si_next;int si_allocs;__int16 si_flags;pgcnt_t si_npgs;pgcnt_t si_nfpgs;int si_pnamelen;char *si_pname;ssize_t si_mapsize;uint_t *si_swapslots;pgcnt_t si_hint;ssize_t si_checkcnt;ssize_t si_alloccnt;};
struct swapnode {struct swapnode *swap_next;ulong_t swap_vnum;struct vnode swap_vnode;};
struct swapres {char *sr_name;off_t sr_start;off_t sr_length;};
typedef struct swapres swapres_t;
struct swaptable {int swt_n;struct swapent swt_ent[1];};
typedef struct swaptable swaptbl_t;
struct syment {union syment::$DDDE857849BC8DF52744F40651AC3747 _n;unsigned int n_value;__int16 n_scnum;unsigned __int16 n_type;char n_sclass;char n_numaux;};
union syment::$DDDE857849BC8DF52744F40651AC3747 {char _n_name[8];struct syment::$DDDE857849BC8DF52744F40651AC3747::$FF8ECF8B5000729F16967D2BEB64C9EE _n_n;char *_n_nptr[2];};
struct syment::$DDDE857849BC8DF52744F40651AC3747::$FF8ECF8B5000729F16967D2BEB64C9EE {int _n_zeroes;int _n_offset;};
enum symfollow {NO_FOLLOW = 0x0,FOLLOW = 0x1,};
typedef enum symfollow symfollow_t;
typedef unsigned __int16 symid_t;
struct symlink_cache {char *contents;int len;int size;};
struct symlinkdata3 {sattr3 symlink_attributes;nfspath3 symlink_data;};
struct syncline {struct ser_str sl_stream;struct scc_mode sl_mode;struct sl_stats sl_st;mblk_t *sl_rhead;mblk_t *sl_ractb;mblk_t *sl_rstandby[6];mblk_t *sl_xhead;mblk_t *sl_xactb;mblk_t *sl_xstandby;mblk_t *sl_rdone[20];int sl_rdone_wptr;int sl_rdone_rptr;mblk_t *sl_mstat;bufcall_id_t sl_bufcid;timeout_id_t sl_wd_id;int sl_wd_count;int sl_ocnt;int sl_mru;int sl_bad_count_int;uchar_t sl_rr0;uchar_t sl_address;uchar_t sl_txstate;uchar_t sl_flags;uchar_t sl_m_error;volatile uchar_t sl_soft_active;};
enum syncobj {SOBJ_NONE = 0x0,SOBJ_MUTEX = 0x1,SOBJ_RWLOCK = 0x2,SOBJ_CV = 0x3,SOBJ_SEMA = 0x4,SOBJ_USER = 0x5,SOBJ_USER_PI = 0x6,SOBJ_SHUTTLE = 0x7,};
typedef enum syncobj syncobj_t;
struct sysent {char sy_narg;unsigned __int8 sy_flags;int (*sy_call)();krwlock_t *sy_lock;int64_t (*sy_callc)();};
typedef __int16 sysid_t;
struct sysinfo {uint_t updates;uint_t runque;uint_t runocc;uint_t swpque;uint_t swpocc;uint_t waiting;};
typedef struct sysinfo sysinfo_t;
struct sysparam {struct sysparam *sys_next;int sys_type;int sys_op;char *sys_modnam;char *sys_ptr;u_longlong_t sys_info;char *sys_config;int sys_len;ulong_t *addrp;};
typedef struct $8B85712FB09FAAC9E4FCB41A89281044 sysset_t;
struct tCapBuf {uint_t seqNum;uint_t lastFlag;ildTraceEntry_t t[64];};
typedef struct tCapBuf tCapBuf_t;
struct t_audit_data {kthread_id_t tad_thread;unsigned int tad_scid;__int16 tad_event;__int16 tad_evmod;int tad_ctrl;int tad_flag;uint_t tad_pathlen;caddr_t tad_path;struct vnode *tad_vn;caddr_t tad_ad;struct t_audit_data *next;};
typedef struct t_audit_data t_audit_data_t;
struct t_buf {mblk_t *bu_bp;unsigned __int8 *bu_ptr;ushort_t bu_cnt;};
struct t_call {struct netbuf addr;struct netbuf opt;struct netbuf udata;int sequence;};
struct t_discon {struct netbuf udata;int reason;int sequence;};
struct t_info {t_scalar_t addr;t_scalar_t options;t_scalar_t tsdu;t_scalar_t etsdu;t_scalar_t connect;t_scalar_t discon;t_scalar_t servtype;t_scalar_t flags;};
struct t_iovec {void *iov_base;size_t iov_len;};
struct t_kpalive {t_scalar_t kp_onoff;t_scalar_t kp_timeout;};
struct t_kunitdata {struct netbuf addr;struct netbuf opt;struct knetbuf udata;};
struct t_linger {t_scalar_t l_onoff;t_scalar_t l_linger;};
struct t_opthdr {t_uscalar_t len;t_uscalar_t level;t_uscalar_t name;t_uscalar_t status;};
typedef int t_scalar_t;
struct t_uderr {struct netbuf addr;struct netbuf opt;t_scalar_t error;};
struct t_unitdata {struct netbuf addr;struct netbuf opt;struct netbuf udata;};
typedef unsigned int t_uscalar_t;
struct table_col {char *tc_name;uint_t tc_flags;uint_t tc_rights;};
struct table_obj {char *ta_type;int ta_maxcol;u_char ta_sep;struct table_obj::$37F826B7C2AFF7B3E483E0E1EE89ED51 ta_cols;char *ta_path;};
struct table_obj::$37F826B7C2AFF7B3E483E0E1EE89ED51 {u_int ta_cols_len;table_col *ta_cols_val;};
struct tag {uint16_t tag_id;uint16_t tag_desc_ver;uint8_t tag_cksum;uint8_t tag_res;uint16_t tag_sno;uint16_t tag_crc;uint16_t tag_crc_len;uint32_t tag_loc;};
typedef struct tag tag_t;
struct target_private {struct scsi_pkt *x_fltpktp;struct buf *x_bp;union target_private::$24B48541EFD51A0AE0FB2755EE87B349 targ;daddr_t x_srtsec;int x_seccnt;int x_byteleft;int x_bytexfer;int x_tot_bytexfer;ushort_t x_cdblen;__int16 x_retry;int x_flags;opaque_t x_sdevp;void (*x_callback)();};
union target_private::$24B48541EFD51A0AE0FB2755EE87B349 {struct buf *xx_rqsbp;struct uscsi_cmd *xx_scmdp;};
struct task;
typedef void task_func_t(void *);
struct task_usage {uint64_t tu_utime;uint64_t tu_stime;uint64_t tu_minflt;uint64_t tu_majflt;uint64_t tu_sndmsg;uint64_t tu_rcvmsg;uint64_t tu_ioch;uint64_t tu_iblk;uint64_t tu_oblk;uint64_t tu_vcsw;uint64_t tu_icsw;uint64_t tu_nsig;uint64_t tu_nswp;uint64_t tu_nscl;uint64_t tu_utimesec;uint64_t tu_utimensec;uint64_t tu_stimesec;uint64_t tu_stimensec;uint64_t tu_startsec;uint64_t tu_startnsec;uint64_t tu_finishsec;uint64_t tu_finishnsec;};
typedef struct task_usage task_usage_t;
typedef id_t taskid_t;
struct taskq {char tq_name[32];kmutex_t tq_lock;krwlock_t tq_threadlock;kcondvar_t tq_dispatch_cv;kcondvar_t tq_wait_cv;int tq_flags;int tq_active;int tq_nthreads;int tq_nalloc;int tq_minalloc;int tq_maxalloc;taskq_ent_t *tq_freelist;taskq_ent_t tq_task;};
struct taskq_ent {struct taskq_ent *tqent_next;struct taskq_ent *tqent_prev;task_func_t *tqent_func;void *tqent_arg;};
typedef struct taskq_ent taskq_ent_t;
typedef struct taskq taskq_t;
union tblock {char dummy[512];struct tblock::tar_hdr tbuf;};
struct tblock::tar_hdr {char t_name[100];char t_mode[8];char t_uid[8];char t_gid[8];char t_size[12];char t_mtime[12];char t_cksum[8];char t_typeflag;char t_linkname[100];char t_magic[6];char t_version[2];char t_uname[32];char t_gname[32];char t_devmajor[8];char t_devminor[8];char t_prefix[155];};
struct tc {char t_intrc;char t_quitc;char t_startc;char t_stopc;char t_eofc;char t_brkc;};
typedef unsigned int tcflag_t;
struct tchars {char t_intrc;char t_quitc;char t_startc;char t_stopc;char t_eofc;char t_brkc;};
struct tcp_base_s;
struct tcp_debug {n_time td_time;__int16 td_act;__int16 td_ostate;caddr_t td_tcb;struct tcpiphdr td_ti;__int16 td_req;struct tcpcb td_cb;};
typedef struct $37DC3B712C7ED020EE15F9E8AA85032C tcp_sack_info_t;
typedef uint32_t tcp_seq;
struct tcpcb {struct tcpiphdr *seg_next;struct tcpiphdr *seg_prev;__int16 t_state;__int16 t_timer[4];__int16 t_rxtshift;__int16 t_rxtcur;__int16 t_dupacks;ushort_t t_maxseg;char t_force;uchar_t t_flags;struct tcpiphdr *t_template;struct inpcb *t_inpcb;tcp_seq snd_una;tcp_seq snd_nxt;tcp_seq snd_up;tcp_seq snd_wl1;tcp_seq snd_wl2;tcp_seq iss;ushort_t snd_wnd;ushort_t rcv_wnd;tcp_seq rcv_nxt;tcp_seq rcv_up;tcp_seq irs;tcp_seq rcv_adv;tcp_seq snd_max;ushort_t snd_cwnd;ushort_t snd_ssthresh;__int16 t_idle;__int16 t_rtt;tcp_seq t_rtseq;__int16 t_srtt;__int16 t_rttvar;ushort_t max_rcvd;ushort_t max_sndwnd;char t_oobflags;char t_iobc;};
typedef struct tcphdr_s tcph_t;
typedef struct tcphdra_s tcpha_t;
struct tcphdr {uint16_t th_sport;uint16_t th_dport;tcp_seq th_seq;tcp_seq th_ack;unsigned __int32 th_off : 4;unsigned __int32 th_x2 : 4;uchar_t th_flags;uint16_t th_win;uint16_t th_sum;uint16_t th_urp;};
struct tcphdr_s {uint8_t th_lport[2];uint8_t th_fport[2];uint8_t th_seq[4];uint8_t th_ack[4];uint8_t th_offset_and_rsrvd[1];uint8_t th_flags[1];uint8_t th_win[2];uint8_t th_sum[2];uint8_t th_urp[2];};
struct tcphdra_s {in_port_t tha_lport;in_port_t tha_fport;uint32_t tha_seq;uint32_t tha_ack;uint8_t tha_offset_and_reserved;uint8_t tha_flags;uint16_t tha_win;uint16_t tha_sum;uint16_t tha_urp;};
struct tcpiphdr {struct ipovly ti_i;struct tcphdr ti_t;};
struct tcpstat {uint_t tcps_connattempt;uint_t tcps_accepts;uint_t tcps_connects;uint_t tcps_drops;uint_t tcps_conndrops;uint_t tcps_closed;uint_t tcps_segstimed;uint_t tcps_rttupdated;uint_t tcps_delack;uint_t tcps_timeoutdrop;uint_t tcps_rexmttimeo;uint_t tcps_persisttimeo;uint_t tcps_keeptimeo;uint_t tcps_keepprobe;uint_t tcps_keepdrops;uint_t tcps_sndtotal;uint_t tcps_sndpack;uint_t tcps_sndbyte;uint_t tcps_sndrexmitpack;uint_t tcps_sndrexmitbyte;uint_t tcps_sndacks;uint_t tcps_sndprobe;uint_t tcps_sndurg;uint_t tcps_sndwinup;uint_t tcps_sndctrl;uint_t tcps_rcvtotal;uint_t tcps_rcvpack;uint_t tcps_rcvbyte;uint_t tcps_rcvbadsum;uint_t tcps_rcvbadoff;uint_t tcps_rcvshort;uint_t tcps_rcvduppack;uint_t tcps_rcvdupbyte;uint_t tcps_rcvpartduppack;uint_t tcps_rcvpartdupbyte;uint_t tcps_rcvoopack;uint_t tcps_rcvoobyte;uint_t tcps_rcvpackafterwin;uint_t tcps_rcvbyteafterwin;uint_t tcps_rcvafterclose;uint_t tcps_rcvwinprobe;uint_t tcps_rcvdupack;uint_t tcps_rcvacktoomuch;uint_t tcps_rcvackpack;uint_t tcps_rcvackbyte;uint_t tcps_rcvwinupd;};
typedef enum $7763C6F5F90D633510BBD051BDA06E4F td_err_e;
typedef enum $65CF98EECFB69F691B0631C04FBFD9D4 td_event_e;
struct td_event_msg {td_event_e event;const td_thrhandle_t *th_p;union td_event_msg::$1BD937C0E27E3130424F8B8CF85B0670 msg;};
union td_event_msg::$1BD937C0E27E3130424F8B8CF85B0670 {td_synchandle_t *sh;uintptr_t data;};
typedef struct td_event_msg td_event_msg_t;
typedef int td_key_iter_f(thread_key_t, void (*destructor)(), void *);
struct td_notify {td_notify_e type;union td_notify::$143F0EF771439D241AFD6E8AB1506B64 u;};
union td_notify::$143F0EF771439D241AFD6E8AB1506B64 {psaddr_t bptaddr;int syscallno;};
typedef enum $E1B461D6ADC649FA7943809455C6C6EE td_notify_e;
typedef struct td_notify td_notify_t;
typedef uint8_t td_sync_flags_t;
typedef int td_sync_iter_f(const td_synchandle_t *, void *);
enum td_sync_type_e {TD_SYNC_UNKNOWN = 0x0,TD_SYNC_COND = 0x1,TD_SYNC_MUTEX = 0x2,TD_SYNC_SEMA = 0x3,TD_SYNC_RWLOCK = 0x4,};
struct td_synchandle {td_thragent_t *sh_ta_p;psaddr_t sh_unique;};
typedef struct td_synchandle td_synchandle_t;
struct td_syncinfo {td_thragent_t *si_ta_p;psaddr_t si_sv_addr;td_sync_type_e si_type;uint32_t si_shared_type;td_sync_flags_t si_flags[8];union td_syncinfo::_si_un_state si_state;int si_size;uchar_t si_has_waiters;uchar_t si_is_wlock;td_thrhandle_t si_owner;psaddr_t si_data;};
union td_syncinfo::_si_un_state {int sem_count;int nreaders;int mutex_locked;};
typedef struct td_syncinfo td_syncinfo_t;
struct td_ta_stats {int nthreads;int r_concurrency;int nrunnable_num;int nrunnable_den;int a_concurrency_num;int a_concurrency_den;int nlwps_num;int nlwps_den;int nidle_num;int nidle_den;};
typedef struct td_ta_stats td_ta_stats_t;
struct td_thr_events {uint_t event_bits[2];};
typedef struct td_thr_events td_thr_events_t;
typedef int td_thr_iter_f(const td_thrhandle_t *, void *);
typedef enum $D4AB9A46DE65367CC0FF11AD6E77796A td_thr_state_e;
typedef enum $89FB60EA18EC68E58342D0F505790FD5 td_thr_type_e;
struct td_thragent;
typedef struct td_thragent td_thragent_t;
struct td_thrhandle {td_thragent_t *th_ta_p;psaddr_t th_unique;};
typedef struct td_thrhandle td_thrhandle_t;
struct td_thrinfo {td_thragent_t *ti_ta_p;unsigned int ti_user_flags;thread_t ti_tid;char *ti_tls;psaddr_t ti_startfunc;psaddr_t ti_stkbase;int ti_stksize;psaddr_t ti_ro_area;int ti_ro_size;td_thr_state_e ti_state;uchar_t ti_db_suspended;td_thr_type_e ti_type;intptr_t ti_pc;intptr_t ti_sp;__int16 ti_flags;int ti_pri;lwpid_t ti_lid;sigset_t ti_sigmask;uchar_t ti_traceme;uchar_t ti_preemptflag;uchar_t ti_pirecflag;sigset_t ti_pending;td_thr_events_t ti_events;};
typedef struct td_thrinfo td_thrinfo_t;
typedef hrtime_t tdelta_t[12][2];
struct tdirent {struct tmpnode *td_tmpnode;struct tdirent *td_next;struct tdirent *td_prev;uint_t td_offset;uint_t td_hash;struct tdirent *td_link;struct tmpnode *td_parent;char *td_name;};
struct term {char _b1;char _b2;char _b3;char _b4;char _b5;char _b6;char _b7;char _b8;char _b9;char _b10;char _b11;char _b12;char _b13;char _b14;char _b15;char _b16;char _b17;char _b18;char _b19;char _b20;char _b21;__int16 _c1;__int16 _c2;__int16 _c3;__int16 _c4;__int16 _c5;__int16 _c6;__int16 _c7;__int16 _c8;struct _Vr2_Astrs _Vr2_Astrs;struct _Vr2_Bstrs _Vr2_Bstrs;__int16 Filedes;SGTTY Ottyb;SGTTY Nttyb;SGTTYS Ottybs;SGTTYS Nttybs;struct _bool_struct *_bools;struct _num_struct *_nums;struct _str_struct *_strs;char *_strtab;chtype sgr_mode;chtype sgr_faked;int _delay;int _inputfd;int _check_fd;_KEY_MAP **_keys;_KEY_MAP *internal_keys;__int16 _ksz;__int16 _lastkey_ordered;__int16 _lastmacro_ordered;__int16 _first_macro;bool funckeystarter[256];bool _fl_rawmode;bool fl_typeahdok;bool _cursorstate;bool _iwait;__int16 _regs[26];chtype _input_queue[32];__int16 _ungotten;char _chars_on_queue;_ochtype *_acsmap;chtype *_acs32map;char *turn_on_seq[9];chtype bit_vector;char *cursor_seq[3];char _termname[15];char *turn_off_seq[3];chtype check_turn_off;chtype non_faked_mode;_Color_pair _cur_pair;_Color_pair *_pairs_tbl;_Color *_color_tbl;};
struct term_desc {tag_t td_tag;uint8_t td_res[496];};
typedef struct term_desc term_desc_t;
struct term_entry {tag_t te_tag;icb_tag_t te_icb_tag;};
typedef struct term_entry term_entry_t;
struct termcb {char st_flgs;char st_termt;char st_crow;char st_ccol;char st_vrow;char st_lrow;};
struct termio {unsigned __int16 c_iflag;unsigned __int16 c_oflag;unsigned __int16 c_cflag;unsigned __int16 c_lflag;char c_line;unsigned __int8 c_cc[8];};
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;cc_t c_cc[19];};
struct termiox {unsigned __int16 x_hflag;unsigned __int16 x_cflag;unsigned __int16 x_rflag[5];unsigned __int16 x_sflag;};
struct termsw {int (*t_input)();int (*t_output)();int (*t_ioctl)();};
struct tfid {uint16_t tfid_len;ino32_t tfid_ino;int32_t tfid_gen;};
struct tftphdr {__int16 th_opcode;__int16 th_block;char th_data[1];};
typedef unsigned int thread_key_t;
struct thread_ops {int (*cl_enterclass)(kthread_id_t, id_t, void *, cred_t *, void *);void (*cl_exitclass)(void *);int (*cl_canexit)(kthread_id_t, cred_t *);int (*cl_fork)(kthread_id_t, kthread_id_t, void *);void (*cl_forkret)(kthread_id_t, kthread_id_t);void (*cl_parmsget)(kthread_id_t, void *);int (*cl_parmsset)(kthread_id_t, void *, id_t, cred_t *);void (*cl_stop)(kthread_id_t, int, int);void (*cl_exit)(void);void (*cl_active)(kthread_id_t);void (*cl_inactive)(kthread_id_t);pri_t (*cl_swapin)(kthread_id_t, int);pri_t (*cl_swapout)(kthread_id_t, int);void (*cl_trapret)(kthread_id_t);void (*cl_preempt)(kthread_id_t);void (*cl_setrun)(kthread_id_t);void (*cl_sleep)(kthread_id_t, int);void (*cl_tick)(kthread_id_t);void (*cl_wakeup)(kthread_id_t);int (*cl_donice)(kthread_id_t, cred_t *, int, int *);pri_t (*cl_globpri)(kthread_id_t);void (*cl_set_process_group)(pid_t, pid_t, pid_t);void (*cl_yield)(kthread_id_t);};
typedef struct thread_ops thread_ops_t;
typedef unsigned int thread_t;
struct thrpt {struct reqvalue maxthrpt;struct reqvalue avgthrpt;};
struct ti_sync_ack {t_scalar_t PRIM_type;t_scalar_t TSDU_size;t_scalar_t ETSDU_size;t_scalar_t CDATA_size;t_scalar_t DDATA_size;t_scalar_t ADDR_size;t_scalar_t OPT_size;t_scalar_t TIDU_size;t_scalar_t SERV_type;t_scalar_t CURRENT_state;t_scalar_t PROVIDER_flag;t_uscalar_t tsa_qlen;uint32_t tsa_flags;};
struct ti_sync_req {uint32_t tsr_flags;};
struct tie_device {ushort_t tie_csr;uchar_t tie_unused[15];uchar_t tie_ivec;};
typedef struct $D27487023F7BC296C96A54641356F89B tifiocgblock_t;
typedef struct $B9298FF2B0C5BA7708F912183DC0A181 tifiocgfw_t;
typedef struct $8730B17123942F667165FE26F5FCD7CE tifiocstate_t;
typedef int32_t time32_t;
enum time_how {DONT_CHANGE = 0x0,SET_TO_SERVER_TIME = 0x1,SET_TO_CLIENT_TIME = 0x2,};
typedef int time_t;
struct timeb {time_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
typedef void *timeout_id_t;
typedef int timer_t;
struct timespec {time_t tv_sec;int tv_nsec;};
struct timespec32 {time32_t tv_sec;int32_t tv_nsec;};
typedef struct timespec32 timespec32_t;
typedef struct timespec timespec_t;
typedef struct timespec32 timestruc32_t;
typedef struct timespec timestruc_t;
struct timeval {time_t tv_sec;suseconds_t tv_usec;};
struct timeval32 {time32_t tv_sec;int32_t tv_usec;};
struct timex {uint32_t modes;int32_t offset;int32_t freq;int32_t maxerror;int32_t esterror;int32_t status;int32_t constant;int32_t precision;int32_t tolerance;int32_t ppsfreq;int32_t jitter;int32_t shift;int32_t stabil;int32_t jitcnt;int32_t calcnt;int32_t errcnt;int32_t stbcnt;};
struct timezone {int tz_minuteswest;int tz_dsttime;};
struct tiuser {struct file *fp;struct t_info tp_info;int flags;};
struct tl_credopt {uid_t tc_uid;gid_t tc_gid;uid_t tc_ruid;gid_t tc_rgid;uid_t tc_suid;gid_t tc_sgid;uint_t tc_ngroups;};
typedef struct tl_credopt tl_credopt_t;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct tmount {struct vfs *tm_vfsp;struct tmpnode *tm_rootnode;char *tm_mntpath;ulong_t tm_anonmax;pgcnt_t tm_anonmem;dev_t tm_dev;uint_t tm_gen;kmutex_t tm_contents;kmutex_t tm_renamelck;};
struct tmpnode {struct tmpnode *tn_back;struct tmpnode *tn_forw;union tmpnode::$8A064BB42F06F947A31D89B2B058AC9B un_tmpnode;struct vnode tn_vnode;int tn_gen;struct vattr tn_attr;krwlock_t tn_contents;krwlock_t tn_rwlock;kmutex_t tn_tlock;};
union tmpnode::$8A064BB42F06F947A31D89B2B058AC9B {struct tmpnode::$8A064BB42F06F947A31D89B2B058AC9B::$B23A431050292DDB2A4FAE77ED622141 un_dirstruct;char *un_symlink;struct tmpnode::$8A064BB42F06F947A31D89B2B058AC9B::$9DB28C43D4E3267093DD49E88C2EC05A un_anonstruct;};
struct tmpnode::$8A064BB42F06F947A31D89B2B058AC9B::$9DB28C43D4E3267093DD49E88C2EC05A {struct anon_hdr *un_anon;size_t un_size;};
struct tmpnode::$8A064BB42F06F947A31D89B2B058AC9B::$B23A431050292DDB2A4FAE77ED622141 {struct tdirent *un_dirlist;uint_t un_dirents;};
struct tms {clock_t tms_utime;clock_t tms_stime;clock_t tms_cutime;clock_t tms_cstime;};
typedef tnf_uint16_t tnf_abs16_t;
typedef enum $3797F07133CAA59E79BE5E41B8631F21 tnf_arg_kind_t;
struct tnf_array_hdr {tnf_ref32_t tag;tnf_uint32_t self_size;};
struct tnf_array_type_hdr {tnf_ref32_t tag;tnf_ref32_t name;tnf_ref32_t properties;tnf_ref32_t slot_types;tnf_uint32_t header_size;};
struct tnf_block_header {tnf_ref32_t tag;tnf_uint32_t generation;tnf_uint16_t bytes_valid;tnf_byte_lock_t A_lock;tnf_byte_lock_t B_lock;struct tnf_block_header *next_block;};
typedef struct tnf_block_header tnf_block_header_t;
typedef unsigned __int8 tnf_byte_lock_t;
typedef char tnf_char_t;
typedef unsigned __int64 tnf_datum_t;
struct tnf_derived_type_hdr {tnf_ref32_t tag;tnf_ref32_t name;tnf_ref32_t properties;tnf_ref32_t derived_base;};
typedef tnf_float64_t tnf_double_t;
typedef enum $13C394361E9AC5CA038584373CF0D1BD tnf_errcode_t;
typedef void tnf_error_handler_t(void *, TNF *, tnf_errcode_t);
struct tnf_file_header {tnf_ref32_t tag;tnf_uint32_t file_version;tnf_uint32_t file_header_size;tnf_uint32_t file_log_size;tnf_uint32_t block_header_size;tnf_uint32_t block_size;tnf_uint32_t directory_size;tnf_uint32_t block_count;tnf_uint32_t blocks_valid;};
typedef struct tnf_file_header tnf_file_header_t;
typedef float tnf_float32_t;
typedef double tnf_float64_t;
typedef tnf_float32_t tnf_float_t;
typedef __int16 tnf_int16_t;
typedef int tnf_int32_t;
typedef longlong_t tnf_int64_t;
typedef signed __int8 tnf_int8_t;
typedef tnf_int32_t tnf_int_t;
typedef enum $99AB38EF265AA84A0F6A323035284FBD tnf_kind_t;
typedef tnf_int32_t tnf_long_t;
typedef tnf_int64_t tnf_longlong_t;
typedef tnf_uint32_t tnf_lwpid_t;
typedef tnf_string_t tnf_name_t;
typedef tnf_uint32_t tnf_opaque_t;
typedef struct _tnf_ops tnf_ops_t;
typedef tnf_int32_t tnf_pid_t;
typedef void *(*tnf_probe_alloc_func_t)(tnf_ops_t *, tnf_probe_control_t *, tnf_probe_setup_t *);
struct tnf_probe_control {const struct tnf_probe_version *version;tnf_probe_control_t *next;tnf_probe_test_func_t test_func;tnf_probe_alloc_func_t alloc_func;tnf_probe_func_t probe_func;tnf_probe_func_t commit_func;uintptr_t index;const char *attrs;tnf_tag_data_t ***slot_types;unsigned int tnf_event_size;};
typedef struct tnf_probe_control tnf_probe_control_t;
typedef tnf_ref32_t tnf_probe_event_t;
typedef void (*tnf_probe_func_t)(tnf_probe_setup_t *);
struct tnf_probe_setup {tnf_ops_t *tpd_p;void *buffer_p;tnf_probe_control_t *probe_p;};
typedef struct tnf_probe_setup tnf_probe_setup_t;
typedef void *(*tnf_probe_test_func_t)(void *, tnf_probe_control_t *, tnf_probe_setup_t *);
struct tnf_probe_version {size_t version_size;size_t probe_control_size;};
typedef struct $69B63B591732E05C41D6CC17B4FA972F tnf_probevals_t;
typedef char *tnf_record_p;
typedef tnf_int16_t tnf_ref16_t;
typedef tnf_int32_t tnf_ref32_t;
typedef tnf_ref32_t tnf_reference_t;
typedef tnf_int16_t tnf_short_t;
typedef tnf_uint32_t tnf_size_t;
typedef tnf_reference_t tnf_string_t;
struct tnf_struct_type_hdr {tnf_ref32_t tag;tnf_ref32_t name;tnf_ref32_t properties;tnf_ref32_t slot_types;tnf_uint32_t type_size;};
typedef struct _tnf_tag_data tnf_tag_data_t;
typedef tnf_ref32_t tnf_tag_t;
typedef struct _tnf_tag_version tnf_tag_version_t;
struct tnf_tagged_hdr {tnf_ref32_t tag;};
typedef tnf_int64_t tnf_time_base_t;
typedef tnf_uint32_t tnf_time_delta_t;
struct tnf_type_hdr {tnf_ref32_t tag;tnf_ref32_t name;tnf_ref32_t properties;};
typedef tnf_uint8_t tnf_uchar_t;
typedef unsigned __int16 tnf_uint16_t;
typedef unsigned int tnf_uint32_t;
typedef u_longlong_t tnf_uint64_t;
typedef unsigned __int8 tnf_uint8_t;
typedef tnf_uint32_t tnf_uint_t;
typedef tnf_uint32_t tnf_ulong_t;
typedef tnf_uint64_t tnf_ulonglong_t;
typedef tnf_uint16_t tnf_ushort_t;
typedef enum $09E8BCDC574BDBEF68A1C2F08AD7DBBF tnfctl_bufstate_t;
typedef enum $D6CA55EB07B097D421AB6298BB521718 tnfctl_errcode_t;
typedef enum $43D49273C3852A9CF5015CF659B9A833 tnfctl_event_t;
struct tnfctl_handle;
typedef struct tnfctl_handle tnfctl_handle_t;
struct tnfctl_ind_config {int (*p_read)(void *, uintptr_t, void *, size_t);int (*p_write)(void *, uintptr_t, void *, size_t);pid_t (*p_getpid)(void *);int (*p_obj_iter)(void *, tnfctl_ind_obj_f *, void *);};
typedef struct tnfctl_ind_config tnfctl_ind_config_t;
typedef int tnfctl_ind_obj_f(void *, const struct tnfctl_ind_obj_info *, void *);
struct tnfctl_ind_obj_info {int objfd;uintptr_t text_base;uintptr_t data_base;const char *objname;};
typedef struct tnfctl_ind_obj_info tnfctl_ind_obj_info_t;
struct tnfctl_probe_handle;
typedef tnfctl_errcode_t (*tnfctl_probe_op_t)(tnfctl_handle_t *, tnfctl_probe_t *, void *);
struct tnfctl_probe_state {ulong_t id;const char *attr_string;boolean_t enabled;boolean_t traced;boolean_t new_probe;const char *obj_name;const char *const *func_names;const uintptr_t *func_addrs;void *client_registered_data;int pad;};
typedef struct tnfctl_probe_state tnfctl_probe_state_t;
typedef struct tnfctl_probe_handle tnfctl_probe_t;
typedef enum $CE3E7AC5D93368FF00E554010E1E9915 tnfctl_targ_op_t;
struct tnfctl_trace_attrs {pid_t targ_pid;const char *trace_file_name;size_t trace_buf_size;size_t trace_min_size;tnfctl_bufstate_t trace_buf_state;boolean_t trace_state;boolean_t filter_state;int pad;};
typedef struct tnfctl_trace_attrs tnfctl_trace_attrs_t;
struct token_s {struct token_s *tt_next;__int16 tt_size;char *tt_data;};
typedef struct token_s token_t;
typedef enum top_type top_t;
enum top_type {TOP_READ_SYNC = 0x0,TOP_WRITE = 0x1,TOP_WRITE_SYNC = 0x2,TOP_SETATTR = 0x3,TOP_CREATE = 0x4,TOP_REMOVE = 0x5,TOP_LINK = 0x6,TOP_RENAME = 0x7,TOP_MKDIR = 0x8,TOP_RMDIR = 0x9,TOP_SYMLINK = 0xA,TOP_FSYNC = 0xB,TOP_GETPAGE = 0xC,TOP_PUTPAGE = 0xD,TOP_SBUPDATE_FLUSH = 0xE,TOP_SBUPDATE_UPDATE = 0xF,TOP_SBUPDATE_UNMOUNT = 0x10,TOP_SYNCIP_CLOSEDQ = 0x11,TOP_SYNCIP_FLUSHI = 0x12,TOP_SYNCIP_HLOCK = 0x13,TOP_SYNCIP_SYNC = 0x14,TOP_SYNCIP_FREE = 0x15,TOP_SBWRITE_RECLAIM = 0x16,TOP_SBWRITE_STABLE = 0x17,TOP_IFREE = 0x18,TOP_IUPDAT = 0x19,TOP_MOUNT = 0x1A,TOP_COMMIT_ASYNC = 0x1B,TOP_COMMIT_FLUSH = 0x1C,TOP_COMMIT_UPDATE = 0x1D,TOP_COMMIT_UNMOUNT = 0x1E,TOP_SETSECATTR = 0x1F,TOP_QUOTA = 0x20,TOP_ITRUNC = 0x21,TOP_MAX = 0x22,};
struct topstats {ulong_t mtm_top_num[34];ulong_t mtm_top_size_etot[34];ulong_t mtm_top_size_rtot[34];ulong_t mtm_top_size_max[34];ulong_t mtm_top_size_min[34];ulong_t mtm_delta_num[17];};
struct trace_ids {__int16 ti_mid;__int16 ti_sid;int8_t ti_level;};
typedef struct trace_ids trace_ids_t;
struct trace_record {unsigned int tr_time;__int16 tr_tag;unsigned __int16 tr_pid;unsigned int tr_datum0;unsigned int tr_datum1;unsigned int tr_datum2;unsigned int tr_datum3;unsigned int tr_datum4;unsigned int tr_datum5;};
struct tracedata {char *tbuf_start;char *tbuf_end;char *tbuf_wrap;char *tbuf_head;char *tbuf_tail;char *tbuf_redzone;char *tbuf_overflow;uchar_t *real_event_map;uchar_t *event_map;struct file *trace_file;uint32_t last_hrtime_lo32;kthread_id_t last_thread;ulong_t scratch[4];};
typedef struct tracedata tracedata_t;
struct transdel {struct reqvalue maxdel;struct reqvalue avgdel;};
struct trap_info;
typedef hrtime_t ts_t;
struct tsadmin {struct tsdpent *ts_dpents;__int16 ts_ndpents;__int16 ts_cmd;};
typedef struct tsadmin tsadmin_t;
struct tsdpent {pri_t ts_globpri;int ts_quantum;pri_t ts_tqexp;pri_t ts_slpret;__int16 ts_maxwait;__int16 ts_lwait;};
typedef struct tsdpent tsdpent_t;
struct tsinfo {pri_t ts_maxupri;};
typedef struct tsinfo tsinfo_t;
struct tsp {uchar_t tsp_type;uchar_t tsp_vers;__int16 tsp_seq;struct timeval tsp_time;char tsp_name[256];};
struct tsparms {pri_t ts_uprilim;pri_t ts_upri;};
typedef struct tsparms tsparms_t;
struct tsproc {int ts_timeleft;uint_t ts_dispwait;pri_t ts_cpupri;pri_t ts_uprilim;pri_t ts_upri;pri_t ts_umdpri;char ts_nice;char ts_boost;unsigned __int8 ts_flags;kthread_t *ts_tp;struct tsproc *ts_next;struct tsproc *ts_prev;};
typedef struct tsproc tsproc_t;
struct tstamp {uint16_t ts_tzone;uint16_t ts_year;uint8_t ts_month;uint8_t ts_day;uint8_t ts_hour;uint8_t ts_min;uint8_t ts_sec;uint8_t ts_csec;uint8_t ts_husec;uint8_t ts_usec;};
typedef struct tstamp tstamp_t;
typedef struct $C5DA07C86C437AAC183EB88624185419 ttcompat_state_t;
struct tty_common {int t_flags;queue_t *t_readq;queue_t *t_writeq;tcflag_t t_iflag;tcflag_t t_cflag;uchar_t t_stopc;uchar_t t_startc;struct winsize t_size;mblk_t *t_iocpending;kmutex_t t_excl;};
typedef struct tty_common tty_common_t;
struct ttychars {char tc_erase;char tc_kill;char tc_intrc;char tc_quitc;char tc_startc;char tc_stopc;char tc_eofc;char tc_brkc;char tc_suspc;char tc_dsuspc;char tc_rprntc;char tc_flushc;char tc_werasc;char tc_lnextc;};
struct ttysize {int ts_lines;int ts_cols;};
struct tune {int t_gpgslo;int t_pad[7];int t_fsflushr;int t_minarmem;int t_minasmem;int t_flckrec;};
typedef struct tune tune_t;
struct turnstile {turnstile_t *ts_next;turnstile_t *ts_free;void *ts_sobj;int ts_waiters;pri_t ts_epri;struct _kthread *ts_inheritor;turnstile_t *ts_prioinv;sleepq_t ts_sleepq[2];};
typedef struct turnstile turnstile_t;
struct typenode {int status;int ref;struct typenode *left;struct typenode *right;PTF_charP makearg;PTF_charP copyarg;PTF_void freearg;PTF_int fcheck;PTF_int ccheck;PTF_int next;PTF_int prev;};
struct tzhead {char tzh_magic[4];char tzh_reserved[16];char tzh_ttisgmtcnt[4];char tzh_ttisstdcnt[4];char tzh_leapcnt[4];char tzh_timecnt[4];char tzh_typecnt[4];char tzh_charcnt[4];};
typedef unsigned __int8 u_char;
union u_data {char s_addrs[512];int32_t s_inos[128];};
typedef unsigned int u_int;
typedef unsigned int u_long;
typedef unsigned __int64 u_longlong_t;
typedef ulong_t u_off_t;
typedef u_longlong_t u_offset_t;
union u_shadow {struct u_shadow::s_nonsh c_nonsh;char c_shadow[1];};
struct u_shadow::s_nonsh {int32_t c_level;char c_filesys[64];char c_dev[64];char c_host[64];};
typedef unsigned __int16 u_short;
union u_spcl {char dummy[1024];struct u_spcl::s_spcl s_spcl;};
struct u_spcl::s_spcl {int32_t c_type;time32_t c_date;time32_t c_ddate;int32_t c_volume;daddr32_t c_tapea;ino32_t c_inumber;int32_t c_magic;int32_t c_checksum;struct dinode c_dinode;int32_t c_count;union u_data c_data;char c_label[16];union u_shadow c_shadow;int32_t c_flags;int32_t c_firstrec;int32_t c_spare[32];};
typedef unsigned __int8 uchar_t;
struct ucontext {uint_t uc_flags;ucontext_t *uc_link;sigset_t uc_sigmask;stack_t uc_stack;mcontext_t uc_mcontext;int uc_filler[23];};
typedef struct ucontext ucontext_t;
struct udphdr {in_port_t uh_sport;in_port_t uh_dport;int16_t uh_ulen;uint16_t uh_sum;};
struct udpiphdr {struct ipovly ui_i;struct udphdr ui_u;};
struct udpstat {int udps_hdrops;int udps_badsum;int udps_badlen;int udps_fullsock;};
struct ufs_acl {union ufs_acl::$F7724D0603D30FF994A85BCBA2AD5333 acl_un;o_mode_t acl_perm;uid_t acl_who;};
union ufs_acl::$F7724D0603D30FF994A85BCBA2AD5333 {uint32_t acl_next;ushort_t acl_tag;};
typedef struct ufs_acl ufs_acl_t;
struct ufs_aclmask {__int16 acl_ismask;o_mode_t acl_maskbits;};
typedef struct ufs_aclmask ufs_aclmask_t;
struct ufs_args {int flags;};
struct ufs_fsd {int fsd_type;int fsd_size;char fsd_data[1];};
typedef struct ufs_fsd ufs_fsd_t;
struct ufs_ic_acl {struct ufs_ic_acl *acl_ic_next;o_mode_t acl_ic_perm;uid_t acl_ic_who;};
typedef struct ufs_ic_acl ufs_ic_acl_t;
struct ufsbiostats {kstat_named_t ub_breads;kstat_named_t ub_bwrites;kstat_named_t ub_fbiwrites;kstat_named_t ub_getpages;kstat_named_t ub_getras;kstat_named_t ub_putsyncs;kstat_named_t ub_putasyncs;kstat_named_t ub_pageios;kstat_named_t ub_lreads;kstat_named_t ub_uds;kstat_named_t ub_lwrites;kstat_named_t ub_ldlreads;kstat_named_t ub_ldlwrites;kstat_named_t ub_mreads;kstat_named_t ub_snarf_prewrites;kstat_named_t ub_rwrites;};
enum ufsd_boot_type_t {UFSDB_NONE = 0x0,UFSDB_CLEAN = 0x1,UFSDB_POSTPANIC = 0x2,};
enum ufsd_event_t {UFSDEV_NONE = 0x0,UFSDEV_REBOOT = 0x1,UFSDEV_FSCK = 0x2,UFSDEV_LOG_OP = 0x3,};
enum ufsd_fsck_state_t {UFSDFS_NONE = 0x0,UFSDFS_DISPATCH = 0x1,UFSDFS_ERREXIT = 0x2,UFSDFS_SUCCESS = 0x3,};
struct ufsd_log_data_t {int umld_eob;int umld_seq;struct ufsd_log_data_t::$8F822F98A258527A6C698449669E9920 umld_buf;};
struct ufsd_log_data_t::$8F822F98A258527A6C698449669E9920 {u_int umld_buf_len;char *umld_buf_val;};
struct ufsd_log_msg_t {ufsd_log_op_t um_lop;union ufsd_log_msg_t::$960FAB35EDE40EACAA5C69F67904DD69 ufsd_log_msg_t_u;};
union ufsd_log_msg_t::$960FAB35EDE40EACAA5C69F67904DD69 {ufsd_log_data_t um_logdata;};
enum ufsd_log_op_t {UFSDLO_NONE = 0x0,UFSDLO_COMMIT = 0x1,UFSDLO_GET = 0x2,UFSDLO_PUT = 0x3,UFSDLO_RESET = 0x4,};
struct ufsd_msg_t {time_t um_time;u_int um_from;struct ufsd_msg_t::$5013129CDB1FAC507F9E476F5694139E um_spare;ufsd_msg_vardata_t um_var;};
struct ufsd_msg_t::$5013129CDB1FAC507F9E476F5694139E {u_int um_spare_len;char *um_spare_val;};
struct ufsd_msg_vardata_t {ufsd_event_t umv_ev;union ufsd_msg_vardata_t::$9AED1730912B846ACE4EBF2EED6B8961 ufsd_msg_vardata_t_u;};
union ufsd_msg_vardata_t::$9AED1730912B846ACE4EBF2EED6B8961 {ufsd_boot_type_t umv_b;ufsd_fsck_state_t umv_fs;ufsd_log_msg_t umv_lm;};
struct ufsd_repairfs_args_t {fs_identity_t ua_fsid;u_int ua_attempts;};
struct ufsd_repairfs_list_t {int ual_listlen;ufsd_repairfs_args_t *ual_list;};
enum ufsdrc_t {UFSDRC_OK = 0x0,UFSDRC_NOENT = 0x2,UFSDRC_PERM = 0x1,UFSDRC_INVAL = 0x16,UFSDRC_NOEXEC = 0x8,UFSDRC_NODEV = 0x13,UFSDRC_NXIO = 0x6,UFSDRC_BUSY = 0x10,UFSDRC_OPNOTSUP = 0x7A,UFSDRC_EXECERR = 0xFE,UFSDRC_ERR = 0xFF,};
struct ufstrans {struct ufstrans *ut_next;dev_t ut_dev;struct ufstransops *ut_ops;struct vfs *ut_vfsp;void *ut_data;void (*ut_onerror)();int ut_onerror_state;int ut_validfs;};
struct ufstransops {void (*trans_begin_sync)(struct ufstrans *, top_t, size_t);int (*trans_begin_async)(struct ufstrans *, top_t, size_t, int);void (*trans_end_sync)(struct ufstrans *, int *, top_t, size_t);void (*trans_end_async)(struct ufstrans *, top_t, size_t);void (*trans_delta)(struct ufstrans *, offset_t, off_t, delta_t, int (*)(), uintptr_t);int (*trans_ud_delta)(struct ufstrans *, offset_t, off_t, delta_t, int (*)(), uintptr_t);void (*trans_cancel)(struct ufstrans *, offset_t, off_t);void (*trans_log)(struct ufstrans *, char *, offset_t, off_t);int (*trans_iscancel)(struct ufstrans *, offset_t, off_t);void (*trans_seterror)(struct ufstrans *);int (*trans_iserror)(struct ufstrans *);void (*trans_mataadd)(struct ufstrans *, offset_t, off_t);void (*trans_matadel)(struct ufstrans *, offset_t, off_t);void (*trans_mataclr)(struct ufstrans *);};
struct ufsvfs;
typedef uint32 uid3;
typedef int32_t uid32_t;
typedef int uid_t;
typedef unsigned int uint;
typedef unsigned __int16 uint16_t;
typedef u_int uint32;
typedef unsigned int uint32_t;
typedef u_longlong_t uint64;
typedef unsigned __int64 uint64_t;
typedef unsigned __int8 uint8_t;
typedef unsigned __int16 uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned __int64 uint_least64_t;
typedef unsigned __int8 uint_least8_t;
typedef unsigned int uint_t;
typedef uint64_t uintmax_t;
typedef unsigned int uintptr_t;
struct uio {iovec_t *uio_iov;int uio_iovcnt;lloff_t _uio_offset;uio_seg_t uio_segflg;__int16 uio_fmode;lldaddr_t _uio_limit;ssize_t uio_resid;};
enum uio_rw {UIO_READ = 0x0,UIO_WRITE = 0x1,};
typedef enum uio_rw uio_rw_t;
enum uio_seg {UIO_USERSPACE = 0x0,UIO_SYSSPACE = 0x1,UIO_USERISPACE = 0x2,};
typedef enum uio_seg uio_seg_t;
typedef struct uio uio_t;
struct ulockfs {ulong_t ul_flag;ulong_t ul_fs_lock;ulong_t ul_fs_mod;ulong_t ul_vnops_cnt;kmutex_t ul_lock;kcondvar_t ul_cv;kthread_id_t ul_sbowner;struct lockfs ul_lockfs;};
typedef unsigned int ulong;
typedef unsigned int ulong_t;
typedef u_longlong_t ulonglong_t;
struct umntrequest {bool_t isdirect;dev32_t devid;dev32_t rdevid;struct umntrequest *next;};
struct umntres {int status;};
struct unall_space_ent {tag_t use_tag;icb_tag_t use_icb_tag;uint32_t use_len_ad;uint8_t use_ad[484];};
typedef struct unall_space_ent unall_space_ent_t;
struct unall_spc_desc {tag_t ua_tag;uint32_t ua_vdsn;uint32_t ua_nad;uint8_t ua_al_dsc[488];};
typedef struct unall_spc_desc unall_spc_desc_t;
typedef unsigned __int8 unchar;
typedef struct $F8793C5ADA5B1735862C612D8105FB3D uninit_t;
struct unreg1args {u_int family;char *name;netobj address;};
struct unreg1res {nsm_addr_res status;};
typedef uint64_t upad64_t;
struct upcount {struct upcount *up_next;uid_t up_uid;uint_t up_count;};
struct upib {kmutex_t upib_lock;upimutex_t *upib_first;};
typedef struct upib upib_t;
struct upimutex {struct _kthread *upi_owner;int upi_waiter;upib_t *upi_upibp;lwp_mutex_t *upi_vaddr;lwpchan_t upi_lwpchan;upimutex_t *upi_nextchain;upimutex_t *upi_nextowned;};
typedef struct upimutex upimutex_t;
struct usb_bulk_cbw {uchar_t cbw_dCBWSignature[4];uchar_t cbw_dCBWTag[4];uchar_t cbw_dCBWDataTransferLength[4];uchar_t cbw_bmCBWFlags;unsigned __int8 cbw_bCBWLUN : 4;unsigned __int8 cbw_reserved1 : 4;unsigned __int8 cbw_bCBWCBLength : 5;unsigned __int8 cbw_reserved2 : 3;uchar_t cbw_bCBWCDB[16];};
typedef struct usb_bulk_cbw usb_bulk_cbw_t;
struct usb_bulk_csw {uchar_t csw_dCSWSignature0;uchar_t csw_dCSWSignature1;uchar_t csw_dCSWSignature2;uchar_t csw_dCSWSignature3;uchar_t csw_dCSWTag3;uchar_t csw_dCSWTag2;uchar_t csw_dCSWTag1;uchar_t csw_dCSWTag0;uchar_t csw_dCSWDataResidue0;uchar_t csw_dCSWDataResidue1;uchar_t csw_dCSWDataResidue2;uchar_t csw_dCSWDataResidue3;uchar_t csw_bCSWStatus;};
typedef struct usb_bulk_csw usb_bulk_csw_t;
struct usb_config_descr {uint8_t bLength;uint8_t bDescriptorType;uint16_t wTotalLength;uint8_t bNumInterfaces;uint8_t bConfigurationValue;uint8_t iConfiguration;uint8_t bmAttributes;uint8_t MaxPower;};
typedef struct usb_config_descr usb_config_descr_t;
struct usb_config_pwr_descr {uint8_t bLength;uint8_t bDescriptorType;uint16_t SelfPowerConsumedD0_l;uint8_t SelfPowerConsumedD0_h;uint8_t bPowerSummaryId;uint8_t bBusPowerSavingD1;uint8_t bSelfPowerSavingD1;uint8_t bBusPowerSavingD2;uint8_t bSelfPowerSavingD2;uint8_t bBusPowerSavingD3;uint8_t bSelfPowerSavingD3;uint16_t TransitionTimeFromD1;uint16_t TransitionTimeFromD2;uint16_t TransitionTimeFromD3;};
typedef struct usb_config_pwr_descr usb_config_pwr_descr_t;
struct usb_device_descr {uint8_t bLength;uint8_t bDescriptorType;uint16_t bcdUSB;uint8_t bDeviceClass;uint8_t bDeviceSubClass;uint8_t bDeviceProtocol;uint8_t bMaxPacketSize0;uint16_t idVendor;uint16_t idProduct;uint16_t bcdDevice;uint8_t iManufacturer;uint8_t iProduct;uint8_t iSerialNumber;uint8_t bNumConfigurations;};
typedef struct usb_device_descr usb_device_descr_t;
struct usb_endpoint_descr {uint8_t bLength;uint8_t bDescriptorType;uint8_t bEndpointAddress;uint8_t bmAttributes;uint16_t wMaxPacketSize;uint8_t bInterval;};
typedef struct usb_endpoint_descr usb_endpoint_descr_t;
struct usb_hid_descr {uchar_t bLength;uchar_t bDescriptorType;ushort_t bcdHID;uchar_t bCountryCode;uchar_t bNumDescriptors;uchar_t bReportDescriptorType;ushort_t wReportDescriptorLength;};
typedef struct usb_hid_descr usb_hid_descr_t;
struct usb_hub_descr {uchar_t bDescLength;uchar_t bDescriptorType;uchar_t bNbrPorts;uint16_t wHubCharacteristics;uchar_t bPwrOn2PwrGood;uchar_t bHubContrCurrent;uchar_t DeviceRemovable;uchar_t PortPwrCtrlMask;};
typedef struct usb_hub_descr usb_hub_descr_t;
struct usb_interface_descr {uint8_t bLength;uint8_t bDescriptorType;uint8_t bInterfaceNumber;uint8_t bAlternateSetting;uint8_t bNumEndpoints;uint8_t bInterfaceClass;uint8_t bInterfaceSubClass;uint8_t bInterfaceProtocol;uint8_t iInterface;};
typedef struct usb_interface_descr usb_interface_descr_t;
struct usb_interface_pwr_descr {uint8_t bLength;uint8_t bDescriptorType;uint8_t bmCapabilitiesFlags;uint8_t bBusPowerSavingD1;uint8_t bSelfPowerSavingD1;uint8_t bBusPowerSavingD2;uint8_t bSelfPowerSavingD2;uint8_t bBusPowerSavingD3;uint8_t bSelfPowerSavingD3;uint16_t TransitionTimeFromD1;uint16_t TransitionTimeFromD2;uint16_t TransitionTimeFromD3;};
typedef struct usb_interface_pwr_descr usb_interface_pwr_descr_t;
typedef struct usb_log_handle *usb_log_handle_t;
typedef struct usb_opaque *usb_opaque_t;
typedef struct usb_pipe_handle *usb_pipe_handle_t;
struct usb_pipe_policy {uchar_t pp_version;int pp_timeout_value;uint_t pp_periodic_max_transfer_size;usb_opaque_t pp_callback_arg;int (*pp_callback)(usb_pipe_handle_t pipe, usb_opaque_t callback_arg, mblk_t *data);int (*pp_exception_callback)(usb_pipe_handle_t pipe, usb_opaque_t callback_arg, uint_t completion_reason, mblk_t *data, uint_t flag);};
typedef struct usb_pipe_policy usb_pipe_policy_t;
typedef enum $DC3296B23F99D14FFD55E56129FBC05F usb_pipe_state_t;
struct usb_string_descr {uint8_t bLength;uint8_t bDescriptorType;uint8_t bString[1];};
typedef struct usb_string_descr usb_string_descr_t;
struct uscsi_cmd {int uscsi_flags;__int16 uscsi_status;__int16 uscsi_timeout;caddr_t uscsi_cdb;caddr_t uscsi_bufaddr;size_t uscsi_buflen;size_t uscsi_resid;uchar_t uscsi_cdblen;uchar_t uscsi_rqlen;uchar_t uscsi_rqstatus;uchar_t uscsi_rqresid;caddr_t uscsi_rqbuf;void *uscsi_reserved_5;};
struct uscsi_rqs {int rqs_flags;ushort_t rqs_buflen;ushort_t rqs_resid;caddr_t rqs_bufaddr;};
typedef uchar_t use_t;
typedef uint_t useconds_t;
struct user {gregset_t u_reg;greg_t *u_ar0;char u_psargs[80];void (*u_signal[45])();int u_code;caddr_t u_addr;};
typedef struct user user_t;
struct userattr_s {char *name;char *qualifier;char *res1;char *res2;kva_t *attr;};
typedef struct userattr_s userattr_t;
struct userdefs {int defrid;int defgroup;char *defgname;char *defparent;char *defskel;char *defshell;int definact;char *defexpire;char *defauth;char *defprof;char *defrole;};
struct userstr_s {char *name;char *qualifier;char *res1;char *res2;char *attr;};
typedef struct userstr_s userstr_t;
typedef unsigned __int16 ushort;
typedef unsigned __int16 ushort_t;
struct usoc_add_buffers {uint32_t pool_id;uint32_t pool_buf_count;uint64_t *pool_tokens;};
struct usoc_add_pool {uint32_t pool_fc4type;uint32_t pool_buf_size;};
struct usoc_delete_pool {uint32_t pool_buf_count;uint32_t pool_fc4type;uint64_t *pool_tokens;};
struct usoc_fm_version {int fcode_ver_len;int mcode_ver_len;int prom_ver_len;char *fcode_ver;char *mcode_ver;char *prom_ver;};
struct usoc_pstats {uint_t port;uint_t requests;uint_t sol_resps;uint_t unsol_resps;uint_t lips;uint_t els_sent;uint_t els_rcvd;uint_t abts;uint_t abts_ok;uint_t offlines;uint_t onlines;uint_t online_loops;uint_t status[64];};
struct usoc_rcv_frame {uint32_t rcv_type;uint32_t rcv_size;caddr_t rcv_buf;};
struct usoc_send_frame {unsigned __int32 sft_rsvd : 8;unsigned __int32 sft_d_id : 24;uint32_t sft_pattern;uint32_t sft_pool_id;};
struct usoc_stats {uint_t version;char drvr_name[256];char fw_revision[256];char node_wwn[17];char port_wwn[2][17];uint_t parity_chk_enabled;uint_t resets;uint_t reqq_intrs;uint_t qfulls;struct usoc_pstats pstats[2];};
struct usocio_lilpmap {ushort_t lilp_magic;ushort_t lilp_myalpa;uchar_t lilp_length;uchar_t lilp_list[127];};
struct ustat {daddr_t f_tfree;ino_t f_tinode;char f_fname[6];char f_fpack[6];};
struct utimbuf {time_t actime;time_t modtime;};
struct utmp {char ut_user[8];char ut_id[4];char ut_line[12];__int16 ut_pid;__int16 ut_type;struct exit_status ut_exit;time_t ut_time;};
typedef struct $19DEE1C64F7EC3DDB040A3404BEC0D9F utmp_array;
struct utmpidle {struct ru_utmp ui_utmp;unsigned int ui_idle;};
struct utmpidlearr {struct utmpidle **uia_arr;int uia_cnt;};
struct utmpx {char ut_user[32];char ut_id[4];char ut_line[32];pid_t ut_pid;__int16 ut_type;struct exit_status ut_exit;struct timeval ut_tv;int ut_session;int pad[5];__int16 ut_syslen;char ut_host[257];};
typedef int utrap_entry_t;
typedef void *utrap_handler_t;
struct utsname {char sysname[257];char nodename[257];char release[257];char version[257];char machine[257];};
struct ux_dev {dev_t dev;ino_t ino;};
struct ux_extaddr {size_t size;union ux_extaddr::$6B9E6D36BA9C529C32E2823564C5CFF8 addr;};
union ux_extaddr::$6B9E6D36BA9C529C32E2823564C5CFF8 {struct ux_dev tu_addr;int tp_addr;};
struct v_address {caddr_t v_addr;struct as *v_as;void *v_priv;};
typedef __va_list va_list;
typedef union $3C8E0388BDDD5F7551C53EF0F32B4233 val_t;
struct validateUserInfo_t {int8_t *type;int8_t *userName;int8_t *password;};
struct var {int v_buf;int v_call;int v_proc;int v_maxupttl;int v_nglobpris;int v_maxsyspri;int v_clist;int v_maxup;int v_hbuf;int v_hmask;int v_pbuf;int v_sptmap;int v_maxpmem;int v_autoup;int v_bufhwm;};
struct vattr {uint_t va_mask;vtype_t va_type;mode_t va_mode;uid_t va_uid;gid_t va_gid;dev_t va_fsid;u_longlong_t va_nodeid;nlink_t va_nlink;u_offset_t va_size;timestruc_t va_atime;timestruc_t va_mtime;timestruc_t va_ctime;dev_t va_rdev;uint_t va_blksize;u_longlong_t va_nblocks;uint_t va_vcode;};
typedef vattr_t vattr32_t;
typedef struct vattr vattr_t;
enum vcexcl {NONEXCL = 0x0,EXCL = 0x1,};
typedef enum vcexcl vcexcl_t;
struct verifySignedData_t {OCF_KEYREF_t publicKeyRef;OCF_ALGO_t algorithm;OCF_Any_t originalData;OCF_Any_t signature;OCF_Boolean_t status;};
struct verifySignedHash_t {OCF_KEYREF_t publicKeyRef;OCF_ALGO_t algorithm;OCF_Any_t hashedData;OCF_Any_t signature;OCF_Boolean_t status;};
enum version {libm_ieee = 0xFFFFFFFF,c_issue_4 = 0x0,ansi_1 = 0x1,strict_ansi = 0x2,};
struct vfs {struct vfs *vfs_next;struct vfsops *vfs_op;struct vnode *vfs_vnodecovered;uint_t vfs_flag;uint_t vfs_bsize;int vfs_fstype;fsid_t vfs_fsid;caddr_t vfs_data;dev_t vfs_dev;ulong_t vfs_bcount;ushort_t vfs_nsubmounts;struct vfs *vfs_list;struct vfs *vfs_hash;ksema_t vfs_reflock;uint_t vfs_count;mntopts_t vfs_mntopts;char *vfs_resource;char *vfs_mntpt;time_t vfs_mtime;};
typedef struct vfs vfs_t;
struct vfsops {int (*vfs_mount)(struct vfs *, struct vnode *, struct mounta *, struct cred *);int (*vfs_unmount)(struct vfs *, int, struct cred *);int (*vfs_root)(struct vfs *, struct vnode **);int (*vfs_statvfs)(struct vfs *, struct statvfs64 *);int (*vfs_sync)(struct vfs *, __int16, struct cred *);int (*vfs_vget)(struct vfs *, struct vnode **, struct fid *);int (*vfs_mountroot)(struct vfs *, enum whymountroot);int (*vfs_swapvp)(struct vfs *, struct vnode **, char *);void (*vfs_freevfs)(struct vfs *);};
typedef struct vfsops vfsops_t;
struct vfssw {char *vsw_name;int (*vsw_init)(struct vfssw *, int);struct vfsops *vsw_vfsops;int vsw_flag;mntopts_t *vsw_optproto;};
typedef struct vfssw vfssw_t;
struct vfstab {char *vfs_special;char *vfs_fsckdev;char *vfs_mountp;char *vfs_fstype;char *vfs_fsckpass;char *vfs_automnt;char *vfs_mntopts;};
enum vie_event {VIE_MISSING = 0x0,VIE_EJECT = 0x1,VIE_DEVERR = 0x2,VIE_CLOSE = 0x3,VIE_CANCEL = 0x4,VIE_NEWLABEL = 0x5,VIE_INSERT = 0x6,VIE_GETATTR = 0x7,VIE_SETATTR = 0x8,VIE_INUSE = 0x9,VIE_CHECK = 0xA,VIE_REMOVED = 0xB,VIE_SYMNAME = 0xC,VIE_SYMDEV = 0xD,VIE_REMOUNT = 0xE,};
typedef uint_t vifbitmap_t;
struct vifctl {vifi_t vifc_vifi;uchar_t vifc_flags;uchar_t vifc_threshold;uint_t vifc_rate_limit;struct in_addr vifc_lcl_addr;struct in_addr vifc_rmt_addr;uint_t vifc_pkt_in;uint_t vifc_pkt_out;};
typedef ushort_t vifi_t;
struct vio_labelent {off_t vl_off;size_t vl_len;bool_t vl_mapout;};
struct vioc_dattr {minor_t vda_unit;char vda_value[128];int vda_errno;};
struct vioc_eject {minor_t viej_unit;enum eject_state viej_state;};
struct vioc_event {enum vie_event vie_type;union vioc_event::$65B959ED4465248677AB4A78D6E13327 vie_un;};
union vioc_event::$65B959ED4465248677AB4A78D6E13327 {struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_missing vie_u_missing;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_eject vie_u_eject;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_insert vie_u_insert;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_inuse vie_u_inuse;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_check vie_u_check;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_error vie_u_error;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_close vie_u_close;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_cancel vie_u_cancel;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_newlabel vie_u_newlabel;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_attr vie_u_attr;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_rm vie_u_rm;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_symname vie_u_symname;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_symdev vie_u_symdev;struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_remount vie_u_remount;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_attr {minor_t viea_unit;char viea_attr[129];char viea_value[129];uid_t viea_uid;gid_t viea_gid;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_cancel {minor_t viec_unit;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_check {dev_t viec_dev;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_close {minor_t viecl_unit;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_eject {minor_t viej_unit;uid_t viej_user;dev_t viej_tty;int viej_force;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_error {dev_t viee_dev;uint_t viee_errno;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_insert {dev_t viei_dev;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_inuse {dev_t vieu_dev;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_missing {minor_t viem_unit;bool_t viem_ndelay;uid_t viem_user;dev_t viem_tty;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_newlabel {minor_t vien_unit;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_remount {minor_t vier_unit;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_rm {minor_t virm_unit;};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_symdev {char vied_symname[257];};
struct vioc_event::$65B959ED4465248677AB4A78D6E13327::ve_symname {dev_t vies_dev;};
struct vioc_flags {minor_t vfl_unit;uint_t vfl_flags;};
struct vioc_gattr {caddr_t ga_attr;caddr_t ga_value;size_t ga_val_len;size_t ga_attr_len;};
struct vioc_info {uint_t vii_inuse;uint64_t vii_id;caddr_t vii_devpath;size_t vii_pathlen;};
struct vioc_map {dev_t vim_dev;caddr_t vim_path;size_t vim_pathlen;minor_t vim_unit;dev_t vim_basedev;uint64_t vim_id;uint_t vim_nvl;struct vio_labelent *vim_vl;uint_t vim_flags;};
struct vioc_sattr {caddr_t sa_attr;caddr_t sa_value;size_t sa_attr_len;size_t sa_value_len;};
struct vioc_symdev {caddr_t sd_symname;caddr_t sd_symdevname;size_t sd_pathlen;size_t sd_symnamelen;};
struct vioc_symname {dev_t sn_dev;caddr_t sn_symname;size_t sn_pathlen;};
struct vis_cursor {__int16 set;__int16 enable;struct vis_cursorpos pos;struct vis_cursorpos hot;struct vis_cursorcmap cmap;struct vis_cursorpos size;char *image;char *mask;};
struct vis_cursorcmap {int version;int reserved;unsigned __int8 *red;unsigned __int8 *green;unsigned __int8 *blue;};
struct vis_cursorpos {__int16 x;__int16 y;};
struct vis_identifier {char name[128];};
struct viscmap {int index;int count;unsigned __int8 *red;unsigned __int8 *green;unsigned __int8 *blue;};
struct vjcompress {struct cstate *last_cs;uchar_t last_recv;uchar_t last_xmit;ushort_t flags;uint_t sls_packets;uint_t sls_compressed;uint_t sls_searches;uint_t sls_misses;uint_t sls_uncompressedin;uint_t sls_compressedin;uint_t sls_errorin;uint_t sls_tossed;struct cstate tstate[16];struct cstate rstate[16];uint_t maxslotin;uint_t compslotin;uint_t maxslotout;uint_t compslotout;};
typedef struct vjcompress vjstruct_t;
struct vmem;
typedef struct vmem vmem_t;
struct vminfo {uint64_t freemem;uint64_t swap_resv;uint64_t swap_alloc;uint64_t swap_avail;uint64_t swap_free;};
typedef struct vminfo vminfo_t;
struct vnode {kmutex_t v_lock;ushort_t v_flag;uint_t v_count;struct vfs *v_vfsmountedhere;struct vnodeops *v_op;struct vfs *v_vfsp;struct stdata *v_stream;struct page *v_pages;enum vtype v_type;dev_t v_rdev;caddr_t v_data;struct filock *v_filocks;struct shrlocklist *v_shrlocks;kcondvar_t v_cv;void *v_locality;};
typedef struct vnode vnode_t;
struct vnodeops {int (*vop_open)(struct vnode **vpp, int flag, struct cred *cr);int (*vop_close)(struct vnode *vp, int flag, int count, offset_t offset, struct cred *cr);int (*vop_read)(struct vnode *vp, struct uio *uiop, int ioflag, struct cred *cr);int (*vop_write)(struct vnode *vp, struct uio *uiop, int ioflag, struct cred *cr);int (*vop_ioctl)(struct vnode *vp, int cmd, intptr_t arg, int flag, struct cred *cr, int *rvalp);int (*vop_setfl)(struct vnode *vp, int oflags, int nflags, struct cred *cr);int (*vop_getattr)(struct vnode *vp, struct vattr *vap, int flags, struct cred *cr);int (*vop_setattr)(struct vnode *vp, struct vattr *vap, int flags, struct cred *cr);int (*vop_access)(struct vnode *vp, int mode, int flags, struct cred *cr);int (*vop_lookup)(struct vnode *dvp, char *nm, struct vnode **vpp, struct pathname *pnp, int flags, struct vnode *rdir, struct cred *);int (*vop_create)(struct vnode *dvp, char *name, struct vattr *vap, vcexcl_t excl, int mode, struct vnode **vpp, struct cred *cr, int flag);int (*vop_remove)(struct vnode *vp, char *nm, struct cred *cr);int (*vop_link)(struct vnode *tdvp, struct vnode *svp, char *tnm, struct cred *cr);int (*vop_rename)(struct vnode *sdvp, char *snm, struct vnode *tdvp, char *tnm, struct cred *cr);int (*vop_mkdir)(struct vnode *dvp, char *dirname, struct vattr *vap, struct vnode **vpp, struct cred *cr);int (*vop_rmdir)(struct vnode *vp, char *nm, struct vnode *cdir, struct cred *cr);int (*vop_readdir)(struct vnode *vp, struct uio *uiop, struct cred *cr, int *eofp);int (*vop_symlink)(struct vnode *dvp, char *linkname, struct vattr *vap, char *target, struct cred *cr);int (*vop_readlink)(struct vnode *vp, struct uio *uiop, struct cred *cr);int (*vop_fsync)(struct vnode *vp, int syncflag, struct cred *cr);void (*vop_inactive)(struct vnode *vp, struct cred *cr);int (*vop_fid)(struct vnode *vp, struct fid *fidp);void (*vop_rwlock)(struct vnode *vp, int write_lock);void (*vop_rwunlock)(struct vnode *vp, int write_lock);int (*vop_seek)(struct vnode *vp, offset_t ooff, offset_t *noffp);int (*vop_cmp)(struct vnode *vp1, struct vnode *vp2);int (*vop_frlock)(struct vnode *vp, int cmd, struct flock64 *bfp, int flag, offset_t offset, struct cred *cr);int (*vop_space)(struct vnode *vp, int cmd, struct flock64 *bfp, int flag, offset_t offset, struct cred *cr);int (*vop_realvp)(struct vnode *vp, struct vnode **vpp);int (*vop_getpage)(struct vnode *vp, offset_t off, size_t len, uint_t *protp, struct page **plarr, size_t plsz, struct seg *seg, caddr_t addr, enum seg_rw rw, struct cred *cr);int (*vop_putpage)(struct vnode *vp, offset_t off, size_t len, int flags, struct cred *cr);int (*vop_map)(struct vnode *vp, offset_t off, struct as *as, caddr_t *addrp, size_t len, uchar_t prot, uchar_t maxprot, uint_t flags, struct cred *cr);int (*vop_addmap)(struct vnode *vp, offset_t off, struct as *as, caddr_t addr, size_t len, uchar_t prot, uchar_t maxprot, uint_t flags, struct cred *cr);int (*vop_delmap)(struct vnode *vp, offset_t off, struct as *as, caddr_t addr, size_t len, uint_t prot, uint_t maxprot, uint_t flags, struct cred *cr);int (*vop_poll)(struct vnode *vp, __int16 ev, int any, __int16 *revp, struct pollhead **phpp);int (*vop_dump)(struct vnode *vp, caddr_t addr, int lbdn, int dblks);int (*vop_pathconf)(struct vnode *vp, int cmd, ulong_t *valp, struct cred *cr);int (*vop_pageio)(struct vnode *vp, struct page *pp, u_offset_t io_off, size_t io_len, int flags, struct cred *cr);int (*vop_dumpctl)(struct vnode *vp, int action, int *blkp);void (*vop_dispose)(struct vnode *vp, struct page *pp, int flag, int dn, struct cred *cr);int (*vop_setsecattr)(struct vnode *vp, vsecattr_t *vsap, int flag, struct cred *cr);int (*vop_getsecattr)(struct vnode *vp, vsecattr_t *vsap, int flag, struct cred *cr);int (*vop_shrlock)(struct vnode *vp, int cmd, struct shrlock *shr, int flag);};
typedef struct vnodeops vnodeops_t;
struct vol_desc_ptr {tag_t vdp_tag;uint32_t vdp_vdsn;extent_ad_t vdp_nvdse;uint8_t vdp_res[484];};
typedef struct vol_desc_ptr vol_desc_ptr_t;
struct vol_str {caddr_t data;size_t data_len;};
struct volcopy_label {char v_magic[8];char v_volume[6];char v_reels;char v_reel;int v_time;int v_length;int v_dens;int v_reelblks;int v_blksize;int v_nblocks;char v_fill[464];int v_offset;int v_type;};
struct vpage {uchar_t nvp_prot;uchar_t nvp_advice;};
struct vsecattr {uint_t vsa_mask;int vsa_aclcnt;void *vsa_aclentp;int vsa_dfaclcnt;void *vsa_dfaclentp;};
typedef struct vsecattr vsecattr_t;
struct vt_abs_time {vt_trace_t head;struct vt_abs_time::$AB8ADE090A0B9DD48F0CA973837EF690 time;};
struct vt_abs_time::$AB8ADE090A0B9DD48F0CA973837EF690 {ulong_t hi32;ulong_t lo32;};
typedef struct vt_abs_time vt_abs_time_t;
struct vt_clock_frequency {vt_trace_t head;ulong_t freq;};
typedef struct vt_clock_frequency vt_clock_frequency_t;
struct vt_cpu {vt_trace_t head;ulong_t cpu_num;};
struct vt_cpu_info {ulong_t cpu_online;ulong_t reserved;u_longlong_t bytes_flushed;ulong_t max_flushsize;ulong_t tbuf_size;ulong_t tbuf_lowater;char **tbuf_headp;char *tbuf_start;char *tbuf_end;char *tbuf_wrap;char *tbuf_head;char *tbuf_tail;char *tbuf_redzone;char *tbuf_overflow;uchar_t *real_event_map;uchar_t *event_map;struct file *trace_file;};
typedef struct vt_cpu_info vt_cpu_info_t;
typedef struct vt_cpu vt_cpu_t;
struct vt_data_16 {vt_trace_t head;ulong_t data[15];};
typedef struct vt_data_16 vt_data_16_t;
struct vt_data_32 {vt_trace_t head;ulong_t data[31];};
typedef struct vt_data_32 vt_data_32_t;
struct vt_data_4 {vt_trace_t head;ulong_t data[3];};
typedef struct vt_data_4 vt_data_4_t;
struct vt_data_64 {vt_trace_t head;ulong_t data[63];};
typedef struct vt_data_64 vt_data_64_t;
struct vt_data_8 {vt_trace_t head;ulong_t data[7];};
typedef struct vt_data_8 vt_data_8_t;
struct vt_elapsed_time {vt_trace_t head;ulong_t time;};
typedef struct vt_elapsed_time vt_elapsed_time_t;
struct vt_generic {vt_trace_t head;ulong_t data[63];};
typedef struct vt_generic vt_generic_t;
struct vt_global_info {hrtime_t elapsed_time;int v_major;int v_minor;int v_micro;int tracing_state;int tracing_pid;int ncpus;void *tracedata_ptrs;};
typedef struct vt_global_info vt_global_info_t;
struct vt_kthread_id {vt_trace_t head;ulong_t pid;ulong_t lwpid;ulong_t tid;ulong_t vid;ulong_t name;};
typedef struct vt_kthread_id vt_kthread_id_t;
struct vt_kthread_label {vt_trace_t head;ulong_t pid;ulong_t lwpid;ulong_t tid;ulong_t startpc;};
typedef struct vt_kthread_label vt_kthread_label_t;
struct vt_label {vt_trace_t head;ulong_t facility;ulong_t tag;ulong_t length;ulong_t info;ulong_t npf;};
typedef struct vt_label vt_label_t;
struct vt_num_cpus {vt_trace_t head;ulong_t num_cpus;};
typedef struct vt_num_cpus vt_num_cpus_t;
struct vt_pagesize {vt_trace_t head;ulong_t pagesize;};
typedef struct vt_pagesize vt_pagesize_t;
union vt_pointer {ulong_t *u_long_p;uchar_t *u_char_p;char *char_p;vt_trace_t *trace_p;vt_generic_t *generic_p;vt_version_t *version_p;vt_title_t *title_p;vt_label_t *label_p;vt_pagesize_t *pagesize_p;vt_num_cpus_t *num_cpus_p;vt_cpu_t *cpu_p;vt_data_4_t *data_4_p;vt_data_8_t *data_8_p;vt_data_16_t *data_16_p;vt_data_32_t *data_32_p;vt_data_64_t *data_64_p;vt_abs_time_t *abs_time_p;vt_start_time_t *start_time_p;vt_elapsed_time_t *elapsed_time_p;vt_total_time_t *total_time_p;vt_kthread_id_t *kthread_id_p;vt_uthread_id_t *uthread_id_p;vt_clock_frequency_t *clock_frequency_p;vt_raw_kthread_id_t *raw_kthread_id_p;vt_raw_uthread_id_t *raw_uthread_id_p;vt_kthread_label_t *kthread_label_p;vt_uthread_label_t *uthread_label_p;vt_process_name_t *process_name_p;vt_process_fork_t *process_fork_p;};
typedef union vt_pointer vt_pointer_t;
struct vt_process_fork {vt_trace_t head;ulong_t cpid;ulong_t ppid;};
typedef struct vt_process_fork vt_process_fork_t;
struct vt_process_name {vt_trace_t head;ulong_t pid;ulong_t name;};
typedef struct vt_process_name vt_process_name_t;
struct vt_raw_kthread_id {vt_trace_t head;ulong_t tid;};
typedef struct vt_raw_kthread_id vt_raw_kthread_id_t;
struct vt_raw_uthread_id {vt_trace_t head;ulong_t pid;ulong_t lwpid;ulong_t tid;};
typedef struct vt_raw_uthread_id vt_raw_uthread_id_t;
struct vt_start_time {vt_trace_t head;struct vt_start_time::$AB8ADE090A0B9DD48F0CA973837EF690 time;};
struct vt_start_time::$AB8ADE090A0B9DD48F0CA973837EF690 {ulong_t hi32;ulong_t lo32;};
typedef struct vt_start_time vt_start_time_t;
struct vt_title {vt_trace_t head;ulong_t title;};
typedef struct vt_title vt_title_t;
struct vt_total_time {vt_trace_t head;struct vt_total_time::$AB8ADE090A0B9DD48F0CA973837EF690 time;};
struct vt_total_time::$AB8ADE090A0B9DD48F0CA973837EF690 {ulong_t hi32;ulong_t lo32;};
typedef struct vt_total_time vt_total_time_t;
typedef ulong_t vt_trace_t;
struct vt_uthread_id {vt_trace_t head;ulong_t pid;ulong_t lwpid;ulong_t tid;ulong_t vid;ulong_t name;};
typedef struct vt_uthread_id vt_uthread_id_t;
struct vt_uthread_label {vt_trace_t head;ulong_t pid;ulong_t lwpid;ulong_t tid;ulong_t startpc;};
typedef struct vt_uthread_label vt_uthread_label_t;
struct vt_version {vt_trace_t head;ulong_t v_major;ulong_t v_minor;ulong_t v_micro;ulong_t v_name;};
typedef struct vt_version vt_version_t;
struct vtoc {unsigned int v_bootinfo[3];unsigned int v_sanity;unsigned int v_version;char v_volume[8];ushort_t v_sectorsz;ushort_t v_nparts;unsigned int v_reserved[10];struct partition v_part[8];time_t timestamp[8];char v_asciilabel[128];};
enum vtype {VNON = 0x0,VREG = 0x1,VDIR = 0x2,VBLK = 0x3,VCHR = 0x4,VLNK = 0x5,VFIFO = 0x6,VDOOR = 0x7,VPROC = 0x8,VSOCK = 0x9,VBAD = 0xA,};
typedef enum vtype vtype_t;
struct vuid_addr_probe {__int16 base;union vuid_addr_probe::$E494C8051647BAD6AD0F3CB8B4EC75D8 data;};
union vuid_addr_probe::$E494C8051647BAD6AD0F3CB8B4EC75D8 {__int16 next;__int16 current;};
enum vuid_device {VUID_ASCII = 0x0,VUID_TOP = 0x1,VUID_ISO = 0x2,VUID_LIGHTPEN = 0x79,VUID_DIAL = 0x7B,VUID_SUNVIEW = 0x7C,VUID_PANEL = 0x7D,VUID_SCROLL = 0x7E,VUID_WORKSTATION = 0x7F,VUID_LAST = 0xFF,};
enum vuid_q_code {VUID_Q_OK = 0x0,VUID_Q_OVERFLOW = 0x1,VUID_Q_EMPTY = 0x2,};
struct vuid_q_node {struct vuid_q_node *next;struct vuid_q_node *prev;Firm_event firm_event;};
struct vuid_queue {struct vuid_q_node *top;struct vuid_q_node *bottom;struct vuid_q_node *free;int num;int size;};
struct vuid_seg {struct vuid_seg *next;ushort_t addr;char booleans[32];char ints[32];struct vuid_value *list;};
struct vuid_value {struct vuid_value *next;ushort_t offset;int value;};
struct watched_area {struct watched_area *wa_forw;struct watched_area *wa_back;caddr_t wa_vaddr;caddr_t wa_eaddr;ulong_t wa_flags;};
struct watched_page {struct watched_page *wp_forw;struct watched_page *wp_back;caddr_t wp_vaddr;uchar_t wp_prot;uchar_t wp_oprot;uchar_t wp_umap[3];uchar_t wp_kmap[3];ushort_t wp_flags;__int16 wp_read;__int16 wp_write;__int16 wp_exec;};
struct wcc_attr {size3 size;nfstime3 mtime;nfstime3 ctime;};
struct wcc_data {pre_op_attr before;post_op_attr after;};
typedef int wchar_t;
typedef unsigned int wctrans_t;
typedef int wctype_t;
struct wd90c24a2_info {ushort_t accessible_width;ushort_t accessible_height;ushort_t line_bytes;ushort_t hdb_capable;ushort_t vmsize;uchar_t boardrev;uchar_t slot;uint_t pad1;};
struct whf {uint_t width;uint_t height;uint_t vfreq;};
typedef struct whf whf_t;
enum whymountroot {ROOT_INIT = 0x0,ROOT_REMOUNT = 0x1,ROOT_UNMOUNT = 0x2,ROOT_FRONTMOUNT = 0x3,ROOT_BACKMOUNT = 0x4,};
typedef enum whymountroot whymountroot_t;
struct winsize {unsigned __int16 ws_row;unsigned __int16 ws_col;unsigned __int16 ws_xpixel;unsigned __int16 ws_ypixel;};
typedef int wint_t;
enum wnfsstat {WNFSERR_CLNT_FLAVOR = 0x4E21,};
struct wordexp_t {size_t we_wordc;char **we_wordv;size_t we_offs;char **we_wordp;int we_wordn;};
typedef char *wrapstring;
struct writeFilePartialArray_t {OCF_File_t filename;int32_t foffset;int32_t soffset;OCF_Any_t dataSource;int32_t length;};
struct writeFile_t {OCF_File_t filename;int32_t offset;OCF_Any_t dataSource;};
struct writeRecord_t {OCF_File_t filename;int32_t recordNumber;OCF_Any_t data;};
typedef char writeverf3[8];
struct xdr_bytesrec {bool_t xc_is_last_record;size_t xc_num_avail;};
struct xdr_discrim {int value;xdrproc_t proc;};
enum xdr_op {XDR_ENCODE = 0x0,XDR_DECODE = 0x1,XDR_FREE = 0x2,};
struct xdr_ops {bool_t (*x_getlong)(struct XDR *, int *);bool_t (*x_putlong)(struct XDR *, int *);bool_t (*x_getbytes)(struct XDR *, caddr_t, int);bool_t (*x_putbytes)(struct XDR *, caddr_t, int);uint_t (*x_getpostn)(struct XDR *);bool_t (*x_setpostn)(struct XDR *, uint_t);rpc_inline_t *(*x_inline)(struct XDR *, int);void (*x_destroy)(struct XDR *);bool_t (*x_control)(struct XDR *, int, void *);};
typedef bool_t (*xdrproc_t)();
struct xp_ops {bool_t (*xp_recv)(SVCXPRT *, struct rpc_msg *);enum xprt_stat (*xp_stat)(SVCXPRT *);bool_t (*xp_getargs)(SVCXPRT *, xdrproc_t, caddr_t);bool_t (*xp_reply)(SVCXPRT *, struct rpc_msg *);bool_t (*xp_freeargs)(SVCXPRT *, xdrproc_t, caddr_t);void (*xp_destroy)(SVCXPRT *);bool_t (*xp_control)(SVCXPRT *, const uint_t, void *);};
enum xprt_stat {XPRT_DIED = 0x0,XPRT_MOREREQS = 0x1,XPRT_IDLE = 0x2,};
typedef struct $A4BEC33DC2CEF1EA6A21E2966A3DEECD xrs_t;
typedef struct $0C787AC3F519F07F1A30A3F49C54BEF6 yp_buf;
struct ypall_callback {int (*foreach)();char *data;};
struct ypdelete_args {char *mapname;yp_buf key;};
struct yppasswd {char *oldpass;struct passwd newpw;};
struct ypupdate_args {char *mapname;yp_buf key;yp_buf datum;};
enum zotypes {BOGUS_OBJ = 0x0,NO_OBJ = 0x1,DIRECTORY_OBJ = 0x2,GROUP_OBJ = 0x3,TABLE_OBJ = 0x4,ENTRY_OBJ = 0x5,LINK_OBJ = 0x6,PRIVATE_OBJ = 0x7,NIS_BOGUS_OBJ = 0x0,NIS_NO_OBJ = 0x1,NIS_DIRECTORY_OBJ = 0x2,NIS_GROUP_OBJ = 0x3,NIS_TABLE_OBJ = 0x4,NIS_ENTRY_OBJ = 0x5,NIS_LINK_OBJ = 0x6,NIS_PRIVATE_OBJ = 0x7,};
struct zs_prog {struct zscom *zs;uchar_t flags;uchar_t wr4;uchar_t wr11;uchar_t wr12;uchar_t wr13;uchar_t wr3;uchar_t wr5;uchar_t wr15;};
struct zscom {void (*zs_txint)();unsigned __int8 *zs_wr_cur;unsigned __int8 *zs_wr_lim;void (*zs_rxint)();unsigned __int8 *zs_rd_cur;unsigned __int8 *zs_rd_lim;struct zscc_device *zs_addr;void (*zs_xsint)();void (*zs_srint)();int (*zs_suspend)();int (*zs_resume)();uchar_t zs_wreg[16];caddr_t zs_priv;struct zsops *zs_ops;dev_info_t *zs_dip;time_t zs_dtrlow;__int16 zs_unit;uchar_t zs_suspended;struct zs_prog *zs_prog_save;struct zscom *zs_next;struct zscom *zs_back;kmutex_t *zs_excl_hi;kmutex_t *zs_excl;kmutex_t *zs_ocexcl;kcondvar_t zs_flags_cv;ulong_t zs_priv_str[800];uchar_t zs_flags_need;uchar_t zs_flags_doing;kstat_t *intrstats;};
struct zsops {void (*zsop_txint)();void (*zsop_xsint)();void (*zsop_rxint)();void (*zsop_srint)();int (*zsop_softint)();int (*zsop_suspend)();int (*zsop_resume)();};

MACRO_ABDAY ABDAY_1;
MACRO_ABDAY ABDAY_2;
MACRO_ABDAY ABDAY_3;
MACRO_ABDAY ABDAY_4;
MACRO_ABDAY ABDAY_5;
MACRO_ABDAY ABDAY_6;
MACRO_ABDAY ABDAY_7;
MACRO_ABMON ABMON_1;
MACRO_ABMON ABMON_10;
MACRO_ABMON ABMON_11;
MACRO_ABMON ABMON_12;
MACRO_ABMON ABMON_2;
MACRO_ABMON ABMON_3;
MACRO_ABMON ABMON_4;
MACRO_ABMON ABMON_5;
MACRO_ABMON ABMON_6;
MACRO_ABMON ABMON_7;
MACRO_ABMON ABMON_8;
MACRO_ABMON ABMON_9;
MACRO_ABORT ABORT;
MACRO_NORMAL ABORT1;
MACRO_ACCESS2 ACCESS2_DELETE;
MACRO_ACCESS2 ACCESS2_EXECUTE;
MACRO_ACCESS2 ACCESS2_EXTEND;
MACRO_ACCESS2 ACCESS2_LOOKUP;
MACRO_ACCESS2 ACCESS2_MODIFY;
MACRO_ACCESS2 ACCESS2_READ;
MACRO_ACCESS3 ACCESS3_DELETE;
MACRO_ACCESS3 ACCESS3_EXECUTE;
MACRO_ACCESS3 ACCESS3_EXTEND;
MACRO_ACCESS3 ACCESS3_LOOKUP;
MACRO_ACCESS3 ACCESS3_MODIFY;
MACRO_ACCESS3 ACCESS3_READ;
MACRO_ACCOUNTING ACCOUNTING;
MACRO_AFORK ACCTF;
MACRO_ACDIRMAX ACDIRMAX;
MACRO_ACDIRMIN ACDIRMIN;
MACRO_ACE ACE_F_DYING;
MACRO_ACE ACE_F_MAPPING;
MACRO_ACE ACE_F_MYADDR;
MACRO_ACE ACE_F_PERMANENT;
MACRO_ACE ACE_F_PUBLISH;
MACRO_ACE ACE_F_RESOLVED;
MACRO_DATA ACK;
MACRO_ACLPROC2 ACLPROC2_ACCESS;
MACRO_ACLPROC2 ACLPROC2_GETACL;
MACRO_ACLPROC2 ACLPROC2_GETATTR;
MACRO_ACLPROC2 ACLPROC2_NULL;
MACRO_ACLPROC2 ACLPROC2_SETACL;
MACRO_ACLPROC3 ACLPROC3_GETACL;
MACRO_ACLPROC3 ACLPROC3_NULL;
MACRO_ACLPROC3 ACLPROC3_SETACL;
MACRO_CHECK ACL_CHECK;
MACRO_ACL ACL_DEFAULT;
MACRO_ACMAXMAX ACMAXMAX;
MACRO_ACMINMAX ACMINMAX;
MACRO_ACREGMIN ACREGMAX;
MACRO_ACREGMIN ACREGMIN;
MACRO_NOTACTIVE ACTIVE;
MACRO_ACTIVE ACTIVE_LOCK;
MACRO_RESIDENT ADAPTER_RESIDENT;
MACRO_ADDRSORT ADDRSORT;
log_entry_t ADD_IBASE;
log_entry_t ADD_NAME;
MACRO_ADD ADD_OVERWRITE;
MACRO_RESERVED ADD_RESERVED;
MACRO_USRMIN ADMMIN;
authdes_namekind ADN_FULLNAME;
authdes_namekind ADN_NICKNAME;
MACRO_AD AD_BOOT;
MACRO_AD AD_CHECK;
MACRO_AD AD_COMPRESS;
MACRO_AD AD_FORCE;
MACRO_AD AD_FTRACE_START;
MACRO_AD AD_FTRACE_STOP;
MACRO_AD AD_HALT;
MACRO_AD AD_IBOOT;
MACRO_AD AD_NOSYNC;
MACRO_AD AD_POWEROFF;
MACRO_AD AD_REUSABLE;
MACRO_AD AD_REUSEFINI;
MACRO_AD AD_REUSEINIT;
MACRO_AD AD_SBOOT;
MACRO_AD AD_SIBOOT;
MACRO_AFORK AEXPND;
MACRO_AFLT AFLT_ECC;
MACRO_AFLT AFLT_FAILURE;
MACRO_AFLT AFLT_HANDLED;
MACRO_AFLT AFLT_NOTHANDLED;
MACRO_AFLT AFLT_NOTSUPPORTED;
MACRO_AFLT AFLT_SUCCESS;
MACRO_AFLT AFLT_SX;
MACRO_AFORK AFORK;
MACRO_AF AF_802;
MACRO_AF AF_APPLETALK;
MACRO_AF AF_CCITT;
MACRO_AF AF_CHAOS;
MACRO_AF AF_DATAKIT;
MACRO_AF AF_DECnet;
MACRO_AF AF_DLI;
MACRO_AF AF_ECMA;
MACRO_AF AF_GOSIP;
MACRO_AF AF_HYLINK;
MACRO_AF AF_IMPLINK;
MACRO_AF AF_INET;
MACRO_AF AF_INET6;
MACRO_AF AF_IPX;
MACRO_AF AF_KEY;
MACRO_AF AF_LAT;
MACRO_AF AF_LINK;
MACRO_AF AF_MAX;
MACRO_AF AF_NBS;
MACRO_AF AF_NIT;
MACRO_AF AF_NS;
MACRO_AF AF_OSI;
MACRO_AF AF_OSINET;
MACRO_AF AF_PUP;
MACRO_AF AF_ROUTE;
MACRO_AF AF_SNA;
MACRO_AF AF_UNIX;
MACRO_AF AF_UNSPEC;
MACRO_AF AF_X25;
MACRO_AIOAREAD AIOAREAD;
MACRO_AIOAREAD64 AIOAREAD64;
MACRO_AIOAWRITE AIOAWRITE;
MACRO_AIOAWRITE64 AIOAWRITE64;
MACRO_AIOCANCEL AIOCANCEL;
MACRO_AIOCANCEL64 AIOCANCEL64;
MACRO_AIOERROR AIOERROR;
MACRO_AIOERROR64 AIOERROR64;
MACRO_AIOFSYNC AIOFSYNC;
MACRO_AIOINIT AIOINIT;
MACRO_AIOLIO AIOLIO;
MACRO_AIOLIO64 AIOLIO64;
MACRO_AIOLIOWAIT AIOLIOWAIT;
MACRO_AIOERROR64 AIOLIOWAIT64;
MACRO_AIOCANCEL AIONOTIFY;
MACRO_AIOREAD AIOREAD;
MACRO_AIOSTART AIOSTART;
MACRO_AIOLIO AIOSUSPEND;
MACRO_AIOSUSPEND64 AIOSUSPEND64;
MACRO_AIOREAD AIOWAIT;
MACRO_AIOREAD AIOWRITE;
MACRO_AIO AIO_ALLDONE;
MACRO_AIO AIO_CANCELED;
MACRO_AIO_INPROGRESS AIO_INPROGRESS;
MACRO_AIO AIO_NOTCANCELED;
MACRO_AIO AIO_POLL_BIT;
MACRO_AI AI_ADDRCONFIG;
MACRO_AI AI_ALL;
MACRO_AI AI_CANONNAME;
MACRO_AI AI_DEFAULT;
MACRO_AI AI_NUMERICHOST;
MACRO_AI AI_PASSIVE;
MACRO_AI AI_V4MAPPED;
MACRO_ALGOR ALGOR_BASIC;
MACRO_ALGOR ALGOR_IMPLICIT;
MACRO_ALLDELAY ALLDELAY;
MACRO_ALLOCSIZE ALLOCSIZE;
MACRO_ALL ALL_MOUSE_EVENTS;
MACRO_ALL_RESULTS ALL_RESULTS;
MACRO_ALL_VIFS ALL_VIFS;
MACRO_ALT_0 ALT;
MACRO_ALTGRAPH ALTGRAPH;
MACRO_ALTGRAPH ALTGRAPHMASK;
MACRO_LEFTALT ALTMASK;
MACRO_ALT ALT_DIGITS;
MACRO_AMI AMI_ADD_DATA;
MACRO_AMI AMI_ALGORITHM_UNKNOWN;
MACRO_AMI AMI_AMILOGIN_ERR;
MACRO_AMI AMI_AMILOGOUT_ERR;
MACRO_AMI AMI_AMISERV_CONNECT;
MACRO_AMI AMI_AMISERV_DECRYPT_ERR;
MACRO_AMI AMI_AMISERV_KEYPKG_UPDATE;
MACRO_AMI AMI_AMISERV_SIGN_ERR;
MACRO_AMI AMI_AMISERV_STAT_ERR;
MACRO_AMI AMI_ASN1_DECODE_ERR;
MACRO_AMI AMI_ASN1_ENCODE_ERR;
MACRO_AMI AMI_ASN1_INIT_ERROR;
MACRO_AMI AMI_ATTRIBUTE_UNKNOWN;
MACRO_AMI AMI_AVA_TYPE_MISSING;
MACRO_AMI AMI_AVA_VALUE_MISSING;
MACRO_AMI AMI_BAD_FILE;
MACRO_AMI AMI_BAD_KEY;
MACRO_AMI AMI_BAD_PASSWD;
MACRO_AMI AMI_BINARY_TO_RFC1421_ERR;
MACRO_AMI AMI_CERT_CHAIN_ERR;
MACRO_AMI AMI_CERT_ERR;
MACRO_AMI AMI_CERT_NOT_FOUND;
MACRO_AMI AMI_CRITICAL_EXTNS_ERR;
MACRO_AMI AMI_DECRYPT_ERR;
ami_mechanism AMI_DES3_CBC;
ami_mechanism AMI_DES_CBC;
MACRO_AMI AMI_DH_PART1_ERR;
MACRO_AMI AMI_DH_PART2_ERR;
MACRO_AMI AMI_DIGESTED_AND_ENCODED_DATA;
MACRO_AMI AMI_DIGESTED_DATA;
MACRO_AMI AMI_DIGEST_ERR;
MACRO_AMI AMI_DN_NOT_FOUND;
MACRO_AMI AMI_DOUBLE_ENCRYPT;
ami_mechanism AMI_DSA;
MACRO_AMI AMI_EBUFSIZE;
MACRO_AMI AMI_ENCRYPT_ERR;
MACRO_AMI AMI_END_DATA;
MACRO_AMI AMI_ENOMEM;
MACRO_AMI AMI_ENTRY_ALREADY_EXISTS;
MACRO_AMI AMI_EPARM;
MACRO_AMI AMI_FILE_IO_ERR;
MACRO_AMI AMI_FILE_NOT_FOUND;
MACRO_AMI AMI_GLOBAL_ERR;
MACRO_AMI AMI_KEYGEN_ERR;
MACRO_AMI AMI_KEYPKG_ERR;
MACRO_AMI AMI_KEYPKG_NOT_FOUND;
ami_mechanism AMI_MD2;
ami_mechanism AMI_MD2WithRSAEncryption;
ami_mechanism AMI_MD5;
ami_mechanism AMI_MD5WithRSAEncryption;
MACRO_AMI AMI_NO_SUCH_ENTRY;
MACRO_AMI AMI_OK;
MACRO_AMI AMI_OPEN_ERR;
MACRO_AMI AMI_OUTPUT_FORMAT_ERR;
MACRO_AMI AMI_RANDOM_NUM_ERR;
ami_mechanism AMI_RC2_CBC;
ami_mechanism AMI_RC4;
MACRO_AMI AMI_RDN_MISSING_EQUAL;
MACRO_AMI AMI_RFC1421_TO_BINARY_ERR;
ami_mechanism AMI_RSA;
ami_mechanism AMI_RSA_ENCR;
ami_mechanism AMI_SHA1;
ami_mechanism AMI_SHA1WithDSASignature;
ami_mechanism AMI_SHA1WithRSAEncryption;
MACRO_AMI AMI_SIGN_ERR;
MACRO_AMI AMI_SYSTEM_ERR;
MACRO_AMI AMI_TIME_INVALID;
MACRO_AMI AMI_TOTAL_ERRNUM;
MACRO_AMI AMI_TRUSTED_KEY_EXPIRED;
MACRO_AMI AMI_UNKNOWN_USER;
MACRO_AMI AMI_UNSUPPORTED_KEY_TYPE;
MACRO_AMI AMI_UNTRUSTED_PUBLIC_KEY;
MACRO_AMI AMI_UNWRAP_ERROR;
MACRO_AMI AMI_USER_DID_NOT_AMILOGIN;
MACRO_AMI AMI_VERIFY_ERR;
MACRO_AMI AMI_WRAP_ERROR;
MACRO_AMI AMI_XFN_ERR;
MACRO_STR AM_STR;
MACRO_ANCHOR ANCHOR_VOL_DESC_LEN;
MACRO_ANCHOR ANCHOR_VOL_DESC_LOC;
MACRO_ANI ANI_MAX_POOL;
MACRO_ANON ANON_ALLOC_FORCE;
MACRO_ANON ANON_NOSLEEP;
MACRO_ANON ANON_PTRSHIFT;
MACRO_ANON ANON_SLEEP;
MACRO_ANYADDR ANYADDR;
MACRO_ANYCRED ANYCRED;
MACRO_ANYMARK ANYMARK;
MACRO_ANYP ANYP;
MACRO_AO AO;
$23CD138AFBA10A16D770AC92A674B7D9 AP_COND_FAILED;
$23CD138AFBA10A16D770AC92A674B7D9 AP_COND_FAILING;
$23CD138AFBA10A16D770AC92A674B7D9 AP_COND_OK;
$23CD138AFBA10A16D770AC92A674B7D9 AP_COND_UNKNOWN;
$23CD138AFBA10A16D770AC92A674B7D9 AP_COND_UNUSABLE;
$866CF79549BA537B648330022140BDBC AP_OSTATE_CONFIGURED;
$866CF79549BA537B648330022140BDBC AP_OSTATE_UNCONFIGURED;
$EB79E54FE0EF018BB6845A2E0DAAE1E7 AP_RSTATE_CONNECTED;
$EB79E54FE0EF018BB6845A2E0DAAE1E7 AP_RSTATE_DISCONNECTED;
$EB79E54FE0EF018BB6845A2E0DAAE1E7 AP_RSTATE_EMPTY;
MACRO_AP AP_VERSION;
MACRO_AQ AQ_BUFSZ;
MACRO_AQ AQ_DELAY;
MACRO_AQ AQ_HIWATER;
MACRO_AQ AQ_LOWATER;
MACRO_AQ AQ_MAXBUFSZ;
MACRO_AQ AQ_MAXDELAY;
MACRO_AQ AQ_MAXHIGH;
MACRO_AREGTYPE AREGTYPE;
MACRO_ARGPUSHSIZE ARGPUSH;
MACRO_ARGPUSHSIZE32 ARGPUSH32;
MACRO_ARGPUSHSIZE ARGPUSHSIZE;
MACRO_ARGPUSHSIZE32 ARGPUSHSIZE32;
MACRO_ARG ARG_MAX;
MACRO_ARPHRD ARPHRD_ETHER;
MACRO_ARPOP ARPOP_REPLY;
MACRO_ARPOP ARPOP_REQUEST;
MACRO_ARP ARP_REQUEST;
MACRO_ARP ARP_RESPONSE;
MACRO_AR AR_CLIENT_NOTIFY;
MACRO_AR_CN AR_CN_ANNOUNCE;
MACRO_AR_CN AR_CN_BOGON;
MACRO_AR AR_DLPIOP_DONE;
MACRO_AR AR_ENTRY_ADD;
MACRO_AR AR_ENTRY_DELETE;
MACRO_AR AR_ENTRY_QUERY;
MACRO_AR AR_ENTRY_SQUERY;
MACRO_AR AR_INTERFACE_DOWN;
MACRO_AR AR_INTERFACE_OFF;
MACRO_AR AR_INTERFACE_ON;
MACRO_AR AR_INTERFACE_UP;
MACRO_AR AR_IOCTL;
MACRO_AR AR_MAPPING_ADD;
MACRO_AR AR_XMIT_REQUEST;
MACRO_AR AR_XMIT_RESPONSE;
MACRO_AR AR_XMIT_TEMPLATE;
MACRO_ASCII_DEVID ASCII_DEVID;
MACRO_ASCII_FIRST ASCII_FIRST;
MACRO_ASCII_FIRST ASCII_LAST;
MACRO_ASCII ASCII_SET_SIZE;
MACRO_ASCSZ ASCSZ;
MACRO_ASEG ASEG;
MACRO_ASI ASI_AIUP;
MACRO_ASI ASI_AIUPL;
MACRO_ASI ASI_AIUS;
MACRO_ASI ASI_AIUSL;
MACRO_ASI ASI_N;
MACRO_ASI ASI_NL;
MACRO_ASI ASI_P;
MACRO_ASI ASI_PL;
MACRO_ASI ASI_PNF;
MACRO_ASI ASI_PNFL;
MACRO_ASI ASI_S;
MACRO_ASI ASI_SL;
MACRO_ASI ASI_SNF;
MACRO_ASI ASI_SNFL;
MACRO_ASI ASI_USER;
MACRO_SSYS ASLWP;
MACRO_AFORK ASU;
MACRO_ASYNC ASYNC_CMD;
MACRO_AS AS_CLAIMGAP;
MACRO_AS AS_LREP_LINKEDLIST;
MACRO_AS AS_LREP_SKIPLIST;
MACRO_AS AS_PAGLCK;
MACRO_AS AS_UNMAPWAIT;
MACRO_ATAB ATAB;
MACRO_ATAPI ATAPI_CAPABILITIES;
MACRO_ATAPI ATAPI_SET_CD_SPEED;
MACRO_ATEXIT ATEXIT_MAX;
MACRO_ATF ATF_COM;
MACRO_ATF ATF_INUSE;
MACRO_ATF ATF_PERM;
MACRO_ATF ATF_PUBL;
MACRO_ATF ATF_USETRAILERS;
MACRO_ATRSIZ ATRSIZ;
MACRO_ATTR_UTIME ATTR_COMM;
MACRO_ATTR_UTIME ATTR_EXEC;
MACRO_ATTR ATTR_FOUND;
MACRO_ATTR_UTIME ATTR_HINT;
MACRO_ATTR ATTR_NOT_FOUND;
MACRO_ATTR ATTR_NO_RECOVERY;
MACRO_ATTR_UTIME ATTR_REAL;
MACRO_ATTR_UTIME ATTR_UTIME;
MACRO_AT AT_ALL;
MACRO_AT AT_ATIME;
MACRO_AT_NULL AT_BASE;
MACRO_AT AT_BLKSIZE;
MACRO_AT AT_CTIME;
MACRO_AT_NULL AT_DCACHEBSIZE;
MACRO_AT_NULL AT_ENTRY;
MACRO_AT_NULL AT_EXECFD;
MACRO_AT_NULL AT_FLAGS;
MACRO_AT AT_FSID;
MACRO_AT AT_GID;
MACRO_AT_NULL AT_ICACHEBSIZE;
MACRO_AT_NULL AT_IGNORE;
MACRO_AT_IPC AT_IPC_MSG;
MACRO_AT_IPC AT_IPC_SEM;
MACRO_AT_IPC AT_IPC_SHM;
MACRO_AT AT_MODE;
MACRO_AT AT_MTIME;
MACRO_AT AT_NBLOCKS;
MACRO_AT AT_NLINK;
MACRO_AT AT_NODEID;
MACRO_AT AT_NOSET;
MACRO_AT_NULL AT_NULL;
MACRO_AT_NULL AT_PAGESZ;
MACRO_AT_NULL AT_PHDR;
MACRO_AT_NULL AT_PHENT;
MACRO_AT_NULL AT_PHNUM;
MACRO_AT AT_RDEV;
MACRO_AT AT_SIZE;
MACRO_AT AT_STAT;
MACRO_AT_NULL AT_SUN_CPU;
MACRO_AT_NULL AT_SUN_EMUL_ENTRY;
MACRO_AT_NULL AT_SUN_EMUL_EXECFD;
MACRO_AT_NULL AT_SUN_EXECNAME;
MACRO_AT_NULL AT_SUN_GID;
MACRO_AT_NULL AT_SUN_HWCAP;
MACRO_AT_NULL AT_SUN_IFLUSH;
MACRO_AT_NULL AT_SUN_LDELF;
MACRO_AT_NULL AT_SUN_LDNAME;
MACRO_AT_NULL AT_SUN_LDSHDR;
MACRO_AT_NULL AT_SUN_LPAGESZ;
MACRO_AT_NULL AT_SUN_MMU;
MACRO_AT_NULL AT_SUN_PLATFORM;
MACRO_AT_NULL AT_SUN_RGID;
MACRO_AT_NULL AT_SUN_RUID;
MACRO_AT_NULL AT_SUN_UID;
MACRO_AT AT_TIMES;
MACRO_AT AT_TYPE;
MACRO_AT_NULL AT_UCACHEBSIZE;
MACRO_AT AT_UID;
MACRO_AT AT_VCODE;
MACRO_AUC AUC_AUDITING;
MACRO_AUC AUC_DISABLED;
MACRO_AUC AUC_NOAUDIT;
MACRO_AUC AUC_UNSET;
MACRO_AUDIO AUDIO_AUX1_IN;
MACRO_AUDIO AUDIO_AUX1_OUT;
MACRO_AUDIO AUDIO_AUX2_IN;
MACRO_AUDIO AUDIO_AUX2_OUT;
MACRO_AUDIO AUDIO_BALANCE_SHIFT;
MACRO_AUDIO AUDIO_CD;
MACRO_AUDIO AUDIO_CHANNELS_MONO;
MACRO_AUDIO AUDIO_CHANNELS_STEREO;
MACRO_AUDIO AUDIO_CODEC_LOOPB_IN;
MACRO_AUDIO_DRAIN AUDIO_DRAIN;
MACRO_AUDIO AUDIO_ENCODING_ALAW;
MACRO_AUDIO AUDIO_ENCODING_DVI;
MACRO_AUDIO AUDIO_ENCODING_LINEAR;
MACRO_AUDIO AUDIO_ENCODING_LINEAR8;
MACRO_AUDIO AUDIO_ENCODING_NONE;
MACRO_AUDIO AUDIO_ENCODING_ULAW;
MACRO_AUDIO AUDIO_HEADPHONE;
MACRO_AUDIO AUDIO_HWFEATURE_DUPLEX;
MACRO_AUDIO AUDIO_HWFEATURE_IN2OUT;
MACRO_AUDIO AUDIO_HWFEATURE_MSCODEC;
MACRO_AUDIO_INIT AUDIO_INIT;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_ACTIVE;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_CLOCK_DIVIDE_1;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_CLOCK_DIVIDE_2;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_CLOCK_DIVIDE_3;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_CLOCK_DIVIDE_4;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_IDLE;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_INT_DISABLED;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_INT_ENABLED;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_NOMAP;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_RECEIVE_ABORT;
MACRO_AUDIO_INIT AUDIO_INIT_BITS_TRANSMIT_ABORT;
MACRO_AUDIO_INIT AUDIO_INIT_INIT;
MACRO_AUDIO AUDIO_INTERNAL_CD_IN;
MACRO_AUDIO AUDIO_LEFT_BALANCE;
MACRO_AUDIO AUDIO_LINE_IN;
MACRO_AUDIO AUDIO_LINE_OUT;
MACRO_AUDIO_INIT AUDIO_MAP;
MACRO_AUDIO_INIT AUDIO_MAP_ALL;
MACRO_AUDIO_INIT AUDIO_MAP_ATGR;
MACRO_AUDIO_INIT AUDIO_MAP_ATGR_MAX;
MACRO_AUDIO_INIT AUDIO_MAP_ATGR_MIN;
MACRO_AUDIO_INIT AUDIO_MAP_FTGR;
MACRO_AUDIO_INIT AUDIO_MAP_FTGR_MAX;
MACRO_AUDIO_INIT AUDIO_MAP_FTGR_MIN;
MACRO_AUDIO_INIT AUDIO_MAP_GER;
MACRO_AUDIO_INIT AUDIO_MAP_GER_MAX;
MACRO_AUDIO_INIT AUDIO_MAP_GER_MIN;
MACRO_AUDIO_INIT AUDIO_MAP_GR;
MACRO_AUDIO_INIT AUDIO_MAP_GR_MAX;
MACRO_AUDIO_INIT AUDIO_MAP_GR_MIN;
MACRO_AUDIO_INIT AUDIO_MAP_GX;
MACRO_AUDIO_INIT AUDIO_MAP_GX_MAX;
MACRO_AUDIO_INIT AUDIO_MAP_GX_MIN;
MACRO_AUDIO_INIT AUDIO_MAP_MMR1;
MACRO_AUDIO_INIT AUDIO_MAP_MMR2;
MACRO_AUDIO_INIT AUDIO_MAP_R;
MACRO_AUDIO_INIT AUDIO_MAP_STG;
MACRO_AUDIO_INIT AUDIO_MAP_STG_MAX;
MACRO_AUDIO_INIT AUDIO_MAP_STG_MIN;
MACRO_AUDIO_INIT AUDIO_MAP_X;
MACRO_AUDIO AUDIO_MAX_GAIN;
MACRO_AUDIO AUDIO_MAX_PLAY_CHANNELS;
MACRO_AUDIO AUDIO_MAX_PLAY_PRECISION;
MACRO_AUDIO AUDIO_MAX_REC_CHANNELS;
MACRO_AUDIO AUDIO_MAX_REC_PRECISION;
MACRO_AUDIO AUDIO_MICROPHONE;
MACRO_AUDIO AUDIO_MID_BALANCE;
MACRO_AUDIO AUDIO_MID_GAIN;
MACRO_AUDIO AUDIO_MIN_GAIN;
MACRO_AUDIO AUDIO_MIN_PLAY_CHANNELS;
MACRO_AUDIO AUDIO_MIN_PLAY_PRECISION;
MACRO_AUDIO AUDIO_MIN_REC_CHANNELS;
MACRO_AUDIO AUDIO_MIN_REC_PRECISION;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_A_LAW;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_LOAD_DLB;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_LOAD_GER;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_LOAD_GR;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_LOAD_GX;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_LOAD_R;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_LOAD_STG;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_LOAD_X;
MACRO_AUDIO_INIT AUDIO_MMR1_BITS_u_LAW;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_AINA;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_AINB;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_AUTOZERO;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_DTMF;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_EAR;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_HIGH_PASS;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_LS;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_RINGER;
MACRO_AUDIO_INIT AUDIO_MMR2_BITS_TONE;
MACRO_AUDIO_INIT AUDIO_MUX;
MACRO_AUDIO_INIT AUDIO_MUX_MCR1;
MACRO_AUDIO_INIT AUDIO_MUX_MCR2;
MACRO_AUDIO_INIT AUDIO_MUX_MCR3;
MACRO_AUDIO_INIT AUDIO_MUX_MCR4;
MACRO_AUDIO_INIT AUDIO_MUX_MCR4_BITS_INT_DISABLE;
MACRO_AUDIO_INIT AUDIO_MUX_MCR4_BITS_INT_ENABLE;
MACRO_AUDIO_INIT AUDIO_MUX_MCR4_BITS_REVERSE_BB;
MACRO_AUDIO_INIT AUDIO_MUX_MCR4_BITS_REVERSE_BC;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_B1;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_B2;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_BA;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_BB;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_BC;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_BD;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_BE;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_BF;
MACRO_AUDIO_INIT AUDIO_MUX_PORT_NONE;
MACRO_AUDIO AUDIO_NONE;
MACRO_AUDIO AUDIO_PRECISION_16;
MACRO_AUDIO AUDIO_PRECISION_8;
MACRO_AUDIO AUDIO_RIGHT_BALANCE;
MACRO_AUDIO AUDIO_SPDIF_IN;
MACRO_AUDIO AUDIO_SPDIF_OUT;
MACRO_AUDIO AUDIO_SPEAKER;
MACRO_AUDIO AUDIO_SUNVTS;
MACRO_AUDIO AUDIO_SWFEATURE_MIXER;
MACRO_AUDITUSER AUDITUSER_DB_NCOL;
MACRO_AUDITUSER AUDITUSER_DB_NKEYCOL;
MACRO_AUDITUSER AUDITUSER_KEYCOL0;
MACRO_AUDITUSER AUDITUSER_NOT_FOUND;
MACRO_AUDITUSER AUDITUSER_PARSE_ERANGE;
MACRO_AUDITUSER AUDITUSER_SUCCESS;
MACRO_AUDIT AUDIT_AHLT;
MACRO_AUDIT AUDIT_ARGE;
MACRO_AUDIT AUDIT_ARGV;
MACRO_AUDIT AUDIT_CNT;
MACRO_AUDIT AUDIT_GROUP;
MACRO_AUDIT AUDIT_PASSWD;
MACRO_AUDIT AUDIT_PATH;
MACRO_AUDIT AUDIT_SEQ;
MACRO_AUDIT AUDIT_TRAIL;
MACRO_AUDIT AUDIT_USER;
MACRO_AUDIT AUDIT_WINDATA;
MACRO_AUE AUE_ACCEPT;
MACRO_AUE AUE_ACCESS;
MACRO_AUE AUE_ACCT;
MACRO_AUE AUE_ACLSET;
MACRO_AUE AUE_ADJTIME;
MACRO_AUE AUE_ASYNC_DAEMON;
MACRO_AUE AUE_ASYNC_DAEMON_EXIT;
MACRO_AUE AUE_AUDIT;
MACRO_AUE AUE_AUDITON;
MACRO_AUE AUE_AUDITON_GESTATE;
MACRO_AUE AUE_AUDITON_GETCAR;
MACRO_AUE AUE_AUDITON_GETCLASS;
MACRO_AUE AUE_AUDITON_GETCOND;
MACRO_AUE AUE_AUDITON_GETCWD;
MACRO_AUE AUE_AUDITON_GETKMASK;
MACRO_AUE AUE_AUDITON_GETSTAT;
MACRO_AUE AUE_AUDITON_GPOLICY;
MACRO_AUE AUE_AUDITON_GQCTRL;
MACRO_AUE AUE_AUDITON_GTERMID;
MACRO_AUE AUE_AUDITON_SESTATE;
MACRO_AUE AUE_AUDITON_SETCLASS;
MACRO_AUE AUE_AUDITON_SETCOND;
MACRO_AUE AUE_AUDITON_SETKMASK;
MACRO_AUE AUE_AUDITON_SETSMASK;
MACRO_AUE AUE_AUDITON_SETSTAT;
MACRO_AUE AUE_AUDITON_SETUMASK;
MACRO_AUE AUE_AUDITON_SPOLICY;
MACRO_AUE AUE_AUDITON_SQCTRL;
MACRO_AUE AUE_AUDITON_STERMID;
MACRO_AUE AUE_AUDITSTAT;
MACRO_AUE AUE_AUDITSVC;
MACRO_AUE AUE_AUDITSYS;
MACRO_AUE AUE_AUDITUSER;
MACRO_AUE AUE_BADSATTR;
MACRO_AUE AUE_BIND;
MACRO_AUE AUE_BSMSYS;
MACRO_AUE AUE_CHDIR;
MACRO_AUE AUE_CHMOD;
MACRO_AUE AUE_CHOWN;
MACRO_AUE AUE_CHROOT;
MACRO_AUE AUE_CLOSE;
MACRO_AUE AUE_CONNECT;
MACRO_AUE AUE_CORE;
MACRO_AUE AUE_CREAT;
MACRO_AUE AUE_DOORFS;
MACRO_AUE AUE_DOORFS_DOOR_BIND;
MACRO_AUE AUE_DOORFS_DOOR_CALL;
MACRO_AUE AUE_DOORFS_DOOR_CREATE;
MACRO_AUE AUE_DOORFS_DOOR_CRED;
MACRO_AUE AUE_DOORFS_DOOR_INFO;
MACRO_AUE AUE_DOORFS_DOOR_RETURN;
MACRO_AUE AUE_DOORFS_DOOR_REVOKE;
MACRO_AUE AUE_DOORFS_DOOR_UNBIND;
MACRO_AUE AUE_DUP2;
MACRO_AUE AUE_ENTERPROM;
MACRO_AUE AUE_EXEC;
MACRO_AUE AUE_EXECVE;
MACRO_AUE AUE_EXIT;
MACRO_AUE AUE_EXITPROM;
MACRO_AUE AUE_EXPORTFS;
MACRO_AUE AUE_FACLSET;
MACRO_AUE AUE_FCHDIR;
MACRO_AUE AUE_FCHMOD;
MACRO_AUE AUE_FCHOWN;
MACRO_AUE AUE_FCHROOT;
MACRO_AUE AUE_FCNTL;
MACRO_AUE AUE_FGETCMWLABEL;
MACRO_AUE AUE_FIND_RH;
MACRO_AUE AUE_FLOCK;
MACRO_AUE AUE_FORK;
MACRO_AUE AUE_FORK1;
MACRO_AUE AUE_FREESR;
MACRO_AUE AUE_FSETCMWLABEL;
MACRO_AUE AUE_FSTAT;
MACRO_AUE AUE_FSTATFS;
MACRO_AUE AUE_FTRUNCATE;
MACRO_AUE AUE_FUSERS;
MACRO_AUE AUE_GETAUDIT;
MACRO_AUE AUE_GETAUDIT_ADDR;
MACRO_AUE AUE_GETAUID;
MACRO_AUE AUE_GETCMWFSRANGE;
MACRO_AUE AUE_GETCMWLABEL;
MACRO_AUE AUE_GETDENTS;
MACRO_AUE AUE_GETFILEPRIV;
MACRO_AUE AUE_GETKERNSTATE;
MACRO_AUE AUE_GETMLDADORN;
MACRO_AUE AUE_GETMSG;
MACRO_AUE AUE_GETPMSG;
MACRO_AUE AUE_GETPORTAUDIT;
MACRO_AUE AUE_GETSLDNAME;
MACRO_AUE AUE_GETUSERAUDIT;
MACRO_AUE AUE_HLTSR;
MACRO_AUE AUE_IFLOAT;
MACRO_AUE AUE_INST_SYNC;
MACRO_AUE AUE_IOCTL;
MACRO_AUE AUE_JUNK;
MACRO_AUE AUE_KILL;
MACRO_AUE AUE_KILLPG;
MACRO_AUE AUE_KTNETD;
MACRO_AUE AUE_LCHOWN;
MACRO_AUE AUE_LGETCMWLABEL;
MACRO_AUE AUE_LINK;
MACRO_AUE AUE_LSEEK;
MACRO_AUE AUE_LSTAT;
MACRO_AUE AUE_LXSTAT;
MACRO_AUE AUE_MAC;
MACRO_AUE AUE_MCTL;
MACRO_AUE AUE_MEMCNTL;
MACRO_AUE AUE_MKDIR;
MACRO_AUE AUE_MKFSO;
MACRO_AUE AUE_MKNOD;
MACRO_AUE AUE_MLDLSTAT;
MACRO_AUE AUE_MLDSTAT;
MACRO_AUE AUE_MMAP;
MACRO_AUE AUE_MODADDMAJ;
MACRO_AUE AUE_MODCONFIG;
MACRO_AUE AUE_MODCTL;
MACRO_AUE AUE_MODLOAD;
MACRO_AUE AUE_MODUNLOAD;
MACRO_AUE AUE_MOUNT;
MACRO_AUE AUE_MSGCTL;
MACRO_AUE AUE_MSGCTL_RMID;
MACRO_AUE AUE_MSGCTL_SET;
MACRO_AUE AUE_MSGCTL_STAT;
MACRO_AUE AUE_MSGGET;
MACRO_AUE AUE_MSGGETL;
MACRO_AUE AUE_MSGRCV;
MACRO_AUE AUE_MSGRCVL;
MACRO_AUE AUE_MSGSND;
MACRO_AUE AUE_MSGSNDL;
MACRO_AUE AUE_MSGSYS;
MACRO_AUE AUE_MUNMAP;
MACRO_AUE AUE_NFS;
MACRO_AUE AUE_NFSSVC_EXIT;
MACRO_AUE AUE_NFS_GETFH;
MACRO_AUE AUE_NFS_SVC;
MACRO_AUE AUE_NICE;
MACRO_AUE AUE_NULL;
MACRO_AUE AUE_ONESIDE;
MACRO_AUE AUE_OPEN;
MACRO_AUE AUE_OPEN_R;
MACRO_AUE AUE_OPEN_RC;
MACRO_AUE AUE_OPEN_RT;
MACRO_AUE AUE_OPEN_RTC;
MACRO_AUE AUE_OPEN_RW;
MACRO_AUE AUE_OPEN_RWC;
MACRO_AUE AUE_OPEN_RWT;
MACRO_AUE AUE_OPEN_RWTC;
MACRO_AUE AUE_OPEN_W;
MACRO_AUE AUE_OPEN_WC;
MACRO_AUE AUE_OPEN_WT;
MACRO_AUE AUE_OPEN_WTC;
MACRO_AUE AUE_OSETPGRP;
MACRO_AUE AUE_OSTAT;
MACRO_AUE AUE_PATHCONF;
MACRO_AUE AUE_PFLOAT;
MACRO_AUE AUE_PIPE;
MACRO_AUE AUE_PRIOCNTLSYS;
MACRO_AUE AUE_PROCESSOR_BIND;
MACRO_AUE AUE_PUTMSG;
MACRO_AUE AUE_PUTPMSG;
MACRO_AUE AUE_P_ONLINE;
MACRO_AUE AUE_QUOTACTL;
MACRO_AUE AUE_READ;
MACRO_AUE AUE_READL;
MACRO_AUE AUE_READLINK;
MACRO_AUE AUE_READV;
MACRO_AUE AUE_READVL;
MACRO_AUE AUE_REBOOT;
MACRO_AUE AUE_RECV;
MACRO_AUE AUE_RECVFROM;
MACRO_AUE AUE_RECVMSG;
MACRO_AUE AUE_RENAME;
MACRO_AUE AUE_REVOKE;
MACRO_AUE AUE_RFSSYS;
MACRO_AUE AUE_RMDIR;
MACRO_AUE AUE_SEMCTL;
MACRO_AUE AUE_SEMCTL_GETALL;
MACRO_AUE AUE_SEMCTL_GETNCNT;
MACRO_AUE AUE_SEMCTL_GETPID;
MACRO_AUE AUE_SEMCTL_GETVAL;
MACRO_AUE AUE_SEMCTL_GETZCNT;
MACRO_AUE AUE_SEMCTL_RMID;
MACRO_AUE AUE_SEMCTL_SET;
MACRO_AUE AUE_SEMCTL_SETALL;
MACRO_AUE AUE_SEMCTL_SETVAL;
MACRO_AUE AUE_SEMCTL_STAT;
MACRO_AUE AUE_SEMGET;
MACRO_AUE AUE_SEMGETL;
MACRO_AUE AUE_SEMOP;
MACRO_AUE AUE_SEMSYS;
MACRO_AUE AUE_SEND;
MACRO_AUE AUE_SENDMSG;
MACRO_AUE AUE_SENDTO;
MACRO_AUE AUE_SETAUDIT;
MACRO_AUE AUE_SETAUDIT_ADDR;
MACRO_AUE AUE_SETAUID;
MACRO_AUE AUE_SETCLEARANCE;
MACRO_AUE AUE_SETCMWLABEL;
MACRO_AUE AUE_SETCMWPLABEL;
MACRO_AUE AUE_SETDOMAINNAME;
MACRO_AUE AUE_SETEGID;
MACRO_AUE AUE_SETEUID;
MACRO_AUE AUE_SETFILEPRIV;
MACRO_AUE AUE_SETGID;
MACRO_AUE AUE_SETGROUPS;
MACRO_AUE AUE_SETHOSTNAME;
MACRO_AUE AUE_SETKERNSTATE;
MACRO_AUE AUE_SETPGRP;
MACRO_AUE AUE_SETPRIORITY;
MACRO_AUE AUE_SETPROCPRIV;
MACRO_AUE AUE_SETREGID;
MACRO_AUE AUE_SETREUID;
MACRO_AUE AUE_SETRLIMIT;
MACRO_AUE AUE_SETSOCKOPT;
MACRO_AUE AUE_SETTIMEOFDAY;
MACRO_AUE AUE_SETUID;
MACRO_AUE AUE_SETUSERAUDIT;
MACRO_AUE AUE_SHMAT;
MACRO_AUE AUE_SHMCTL;
MACRO_AUE AUE_SHMCTL_RMID;
MACRO_AUE AUE_SHMCTL_SET;
MACRO_AUE AUE_SHMCTL_STAT;
MACRO_AUE AUE_SHMDT;
MACRO_AUE AUE_SHMGET;
MACRO_AUE AUE_SHMGETL;
MACRO_AUE AUE_SHMSYS;
MACRO_AUE AUE_SHUTDOWN;
MACRO_AUE AUE_SOCKACCEPT;
MACRO_AUE AUE_SOCKCONFIG;
MACRO_AUE AUE_SOCKCONNECT;
MACRO_AUE AUE_SOCKET;
MACRO_AUE AUE_SOCKETPAIR;
MACRO_AUE AUE_SOCKRECEIVE;
MACRO_AUE AUE_SOCKSEND;
MACRO_AUE AUE_STAT;
MACRO_AUE AUE_STATFS;
MACRO_AUE AUE_STATVFS;
MACRO_AUE AUE_STIME;
MACRO_AUE AUE_STNETD;
MACRO_AUE AUE_STRTSR;
MACRO_AUE AUE_SWAPON;
MACRO_AUE AUE_SYMLINK;
MACRO_AUE AUE_SYSINFO;
MACRO_AUE AUE_SYSTEMBOOT;
MACRO_AUE AUE_TFRWRD;
MACRO_AUE AUE_TN_ACCRED;
MACRO_AUE AUE_TN_BYPASS;
MACRO_AUE AUE_TN_CKIPOUT;
MACRO_AUE AUE_TN_CKRT;
MACRO_AUE AUE_TN_GEN;
MACRO_AUE AUE_TN_ISPRIV;
MACRO_AUE AUE_TRUNCATE;
MACRO_AUE AUE_UMOUNT;
MACRO_AUE AUE_UMOUNT2;
MACRO_AUE AUE_UNLINK;
MACRO_AUE AUE_UNMOUNT;
MACRO_AUE AUE_UPRIV;
MACRO_AUE AUE_UTIME;
MACRO_AUE AUE_UTIMES;
MACRO_AUE AUE_VFORK;
MACRO_AUE AUE_VPIXSYS;
MACRO_AUE AUE_VTRACE;
MACRO_AUE AUE_WRITE;
MACRO_AUE AUE_WRITEL;
MACRO_AUE AUE_WRITEV;
MACRO_AUE AUE_WRITEVL;
MACRO_AUE AUE_XMKNOD;
MACRO_AUE AUE_XSTAT;
MACRO_AUE_at AUE_allocate_fail;
MACRO_AUE_at AUE_allocate_succ;
MACRO_AUE_at AUE_at_create;
MACRO_AUE_at AUE_at_delete;
MACRO_AUE_at AUE_at_perm;
MACRO_AUE_at AUE_create_user;
MACRO_AUE_at AUE_cron_invoke;
MACRO_AUE_at AUE_crontab_create;
MACRO_AUE_at AUE_crontab_delete;
MACRO_AUE_at AUE_crontab_mod;
MACRO_AUE_at AUE_crontab_perm;
MACRO_AUE_at AUE_deallocate_fail;
MACRO_AUE_at AUE_deallocate_succ;
MACRO_AUE_at AUE_delete_user;
MACRO_AUE_at AUE_disable_user;
MACRO_AUE_at AUE_enable_user;
MACRO_AUE_at AUE_ftpd;
MACRO_AUE_at AUE_halt_solaris;
MACRO_AUE_at AUE_inetd_connect;
MACRO_AUE_at AUE_init_solaris;
MACRO_AUE_at AUE_listdevice_fail;
MACRO_AUE_at AUE_listdevice_succ;
MACRO_AUE_at AUE_login;
MACRO_AUE_at AUE_logout;
MACRO_AUE_at AUE_modify_user;
MACRO_AUE_at AUE_mountd_mount;
MACRO_AUE_at AUE_mountd_umount;
MACRO_AUE_at AUE_passwd;
MACRO_AUE_at AUE_poweroff_solaris;
MACRO_AUE_at AUE_reboot_solaris;
MACRO_AUE_at AUE_rexd;
MACRO_AUE_at AUE_rexecd;
MACRO_AUE_at AUE_rlogin;
MACRO_AUE_at AUE_rshd;
MACRO_AUE_at AUE_shutdown_solaris;
MACRO_AUE_at AUE_su;
MACRO_AUE_at AUE_telnet;
MACRO_AUE_at AUE_uadmin_solaris;
MACRO_AUF AUF_COPY_IN;
MACRO_AUF AUF_DUP;
MACRO_AUF AUF_NOOP;
MACRO_AUF AUF_POINT;
MACRO_AUF AUF_SKIP;
MACRO_AUP AUP_BINARY;
MACRO_AUP AUP_DECIMAL;
MACRO_AUP AUP_HEX;
MACRO_AUP AUP_OCTAL;
MACRO_AUP AUP_STRING;
MACRO_AUR AUR_BYTE;
MACRO_AUR AUR_CHAR;
MACRO_AUR AUR_INT;
MACRO_AUR AUR_INT32;
MACRO_AUR AUR_INT64;
MACRO_AUR AUR_SHORT;
MACRO_AUTHATTR AUTHATTR_DB_NCOL;
MACRO_AUTHATTR AUTHATTR_DB_NKEYCOL;
MACRO_AUTHATTR AUTHATTR_KEYCOL0;
auth_stat AUTH_BADCRED;
auth_stat AUTH_BADVERF;
auth_stat AUTH_DECODE;
MACRO_AUTH_F AUTH_DES;
MACRO_AUTH_F AUTH_DH;
reject_stat AUTH_ERROR;
auth_stat AUTH_FAILED;
MACRO_AUTH_F AUTH_F_RPCTIMESYNC;
MACRO_AUTH_F AUTH_F_TRYNONE;
auth_stat AUTH_INVALIDRESP;
MACRO_AUTH_F AUTH_KERB;
auth_stat AUTH_KERB_GENERIC;
MACRO_AUTH_LOOPBACK AUTH_LOOPBACK;
MACRO_AUTH AUTH_MMAPLEN;
auth_stat AUTH_NET_ADDR;
MACRO_AUTH_F AUTH_NONE;
MACRO_AUTH_F AUTH_NULL;
auth_stat AUTH_OK;
auth_stat AUTH_REJECTEDCRED;
auth_stat AUTH_REJECTEDVERF;
MACRO_AUTH_F AUTH_SHORT;
MACRO_AUTH_F AUTH_SYS;
auth_stat AUTH_TIMEEXPIRE;
auth_stat AUTH_TKT_FILE;
auth_stat AUTH_TOOWEAK;
MACRO_AUTH_F AUTH_UNIX;
autofs_stat AUTOFS_ACTION;
MACRO_AUTOFS AUTOFS_DAEMONCOOKIE;
autofs_stat AUTOFS_DONE;
autofs_res AUTOFS_ECOMM;
autofs_action AUTOFS_LINK_RQ;
MACRO_AUTOFS AUTOFS_LOOKUP;
MACRO_AUTOFS AUTOFS_MAXCOMPONENTLEN;
MACRO_AUTOFS AUTOFS_MAXOPTSLEN;
MACRO_AUTOFS AUTOFS_MAXPATHLEN;
MACRO_AUTOFS AUTOFS_MOUNT;
autofs_action AUTOFS_MOUNT_RQ;
autofs_res AUTOFS_NOENT;
autofs_res AUTOFS_NOMEM;
autofs_action AUTOFS_NONE;
autofs_res AUTOFS_NOTDIR;
MACRO_AUTOFS AUTOFS_NULL;
autofs_res AUTOFS_OK;
MACRO_AUTOFS AUTOFS_PROG;
MACRO_AUTOFS AUTOFS_READDIR;
autofs_res AUTOFS_SHUTDOWN;
MACRO_AUTOFS AUTOFS_UNMOUNT;
MACRO_AUTOFS AUTOFS_VERS;
MACRO_AUT AUT_ACL;
MACRO_AUT AUT_ARG;
MACRO_AUT AUT_ARG32;
MACRO_AUT AUT_ARG64;
MACRO_AUT AUT_ATTR;
MACRO_AUT AUT_ATTR32;
MACRO_AUT AUT_ATTR64;
MACRO_AUT AUT_CLEAR;
MACRO_AUT AUT_CMD;
MACRO_AUT AUT_DATA;
MACRO_AUT AUT_EXEC_ARGS;
MACRO_AUT AUT_EXEC_ENV;
MACRO_AUT AUT_EXIT;
MACRO_AUT AUT_GROUPS;
MACRO_AUT AUT_HEADER;
MACRO_AUT AUT_HEADER32;
MACRO_AUT AUT_HEADER32_EX;
MACRO_AUT AUT_HEADER64;
MACRO_AUT AUT_HEADER64_EX;
MACRO_AUT AUT_HOST;
MACRO_AUT AUT_ILABEL;
MACRO_AUT AUT_INVALID;
MACRO_AUT AUT_IN_ADDR;
MACRO_AUT AUT_IN_ADDR_EX;
MACRO_AUT AUT_IP;
MACRO_AUT AUT_IPC;
MACRO_AUT AUT_IPC_PERM;
MACRO_AUT AUT_IPORT;
MACRO_AUT AUT_LABEL;
MACRO_AUT AUT_LIAISON;
MACRO_AUT AUT_NEWGROUPS;
MACRO_AUT AUT_OHEADER;
MACRO_AUT AUT_OPAQUE;
MACRO_AUT AUT_OTHER_FILE;
MACRO_AUT AUT_OTHER_FILE32;
MACRO_AUT AUT_OTHER_FILE64;
MACRO_AUT AUT_PATH;
MACRO_AUT AUT_PRIV;
MACRO_AUT AUT_PROCESS;
MACRO_AUT AUT_PROCESS32;
MACRO_AUT AUT_PROCESS32_EX;
MACRO_AUT AUT_PROCESS64;
MACRO_AUT AUT_PROCESS64_EX;
MACRO_AUT AUT_RETURN;
MACRO_AUT AUT_RETURN32;
MACRO_AUT AUT_RETURN64;
MACRO_AUT AUT_SEQ;
MACRO_AUT AUT_SERVER;
MACRO_AUT AUT_SERVER32;
MACRO_AUT AUT_SERVER64;
MACRO_AUT AUT_SLABEL;
MACRO_AUT AUT_SOCKET;
MACRO_AUT AUT_SOCKET_EX;
MACRO_AUT AUT_SUBJECT;
MACRO_AUT AUT_SUBJECT32;
MACRO_AUT AUT_SUBJECT32_EX;
MACRO_AUT AUT_SUBJECT64;
MACRO_AUT AUT_SUBJECT64_EX;
MACRO_AUT AUT_TEXT;
MACRO_AUT AUT_TRAILER;
MACRO_AUT AUT_TRAILER_MAGIC;
MACRO_AUT AUT_UPRIV;
MACRO_AUT AUT_XATOM;
MACRO_AUT AUT_XCLIENT;
MACRO_AUT AUT_XCOLORMAP;
MACRO_AUT AUT_XCURSOR;
MACRO_AUT AUT_XFONT;
MACRO_AUT AUT_XGC;
MACRO_AUT AUT_XOBJ;
MACRO_AUT AUT_XPIXMAP;
MACRO_AUT AUT_XPROPERTY;
MACRO_AUT AUT_XPROTO;
MACRO_AUT AUT_XSELECT;
MACRO_AUT AUT_XWINDOW;
MACRO_AUXESZ AUXESZ;
MACRO_AUX AUX_DENSITY;
MACRO_AUX AUX_DISKCHG;
MACRO_AUX AUX_DRVSELECT;
MACRO_AUX AUX_EJECT;
MACRO_AUX AUX_HIGH_DENSITY;
MACRO_AUX AUX_MBO;
MACRO_AUX AUX_MBO4M;
MACRO_AUX AUX_MEDIUM_DENSITY;
MACRO_AUX AUX_TC;
MACRO_AUX AUX_TC4M;
MACRO_AU AU_ADMIN;
MACRO_AU AU_ALL;
MACRO_AU AU_APPL;
MACRO_AU_BUFSIZE AU_BUFSIZE;
MACRO_AU_PRS AU_CACHE_FREE;
MACRO_AU_PRS AU_CACHE_NAME;
MACRO_AU_PRS AU_CACHE_NUMBER;
MACRO_AU_CLASS AU_CLASS_DESC_MAX;
MACRO_AU_CLASS AU_CLASS_NAME_MAX;
MACRO_AU AU_CLOSE;
MACRO_AU_CLASS AU_EVENT_DESC_MAX;
MACRO_AU_CLASS AU_EVENT_LINE_MAX;
MACRO_AU_CLASS AU_EVENT_NAME_MAX;
MACRO_AU AU_EXEC;
MACRO_AU AU_FACCESS;
MACRO_AU AU_FCREATE;
MACRO_AU AU_FDELETE;
MACRO_AU AU_FMODIFY;
MACRO_AU AU_FREAD;
MACRO_AU AU_FWRITE;
MACRO_AU AU_IFLOAT;
MACRO_AU AU_IOCTL;
MACRO_AU AU_IPC;
MACRO_AU_IPv4 AU_IPv4;
MACRO_AU_IPv4 AU_IPv6;
MACRO_AU AU_LOGIN;
MACRO_AU AU_MAC_RW;
MACRO_AU_MAXMEM AU_MAXMEM;
MACRO_AU AU_NET;
MACRO_AU AU_NOAUDITID;
MACRO_AU AU_NONAT;
MACRO_AU AU_NULL;
MACRO_AU AU_OTHER;
MACRO_AU_BUFSIZE AU_PAGE;
MACRO_AU AU_PRIV;
MACRO_AU AU_PROCESS;
MACRO_AU_PRS AU_PRS_BOTH;
MACRO_AU_PRS AU_PRS_FAILURE;
MACRO_AU_PRS AU_PRS_REREAD;
MACRO_AU_PRS AU_PRS_SUCCESS;
MACRO_AU_PRS AU_PRS_USECACHE;
MACRO_AU AU_SETL;
MACRO_AU AU_TFM;
MACRO_AU_PRS AU_TO_NO_WRITE;
MACRO_AU_PRS AU_TO_WRITE;
MACRO_AU AU_XCONN;
MACRO_AU AU_XCREATE;
MACRO_AU AU_XDACF;
MACRO_AU AU_XDELETE;
MACRO_AU AU_XIFLOAT;
MACRO_AU AU_XMACF;
MACRO_AU AU_XMOVE;
MACRO_AU AU_XPRIVF;
MACRO_AU AU_XPRIVS;
MACRO_AU AU_XSECATTR;
MACRO_AV_INT AV_INT_SPURIOUS;
MACRO_AV AV_SPARC_HWDIV_32x32;
MACRO_AV AV_SPARC_HWFSMULD;
MACRO_AV AV_SPARC_HWMUL_32x32;
MACRO_AYT AYT;
MACRO_A_NUL A_ACK;
MACRO_A A_ALTCHARSET;
MACRO_A A_ATTRIBUTES;
MACRO_A_NUL A_BEL;
MACRO_A A_BLINK;
MACRO_A A_BOLD;
MACRO_A_NUL A_BS;
MACRO_A_NUL A_CAN;
MACRO_A A_CHARTEXT;
MACRO_A A_COLOR;
MACRO_A_NUL A_CR;
MACRO_A_NUL A_CSI;
MACRO_A_NUL A_DC1;
MACRO_A_NUL A_DC2;
MACRO_A_NUL A_DC3;
MACRO_A_NUL A_DC4;
MACRO_A_NUL A_DEL;
MACRO_A A_DIM;
MACRO_A_NUL A_DLE;
MACRO_A_REBOOT A_DUMP;
MACRO_A_NUL A_EM;
MACRO_A_NUL A_ENQ;
MACRO_A_NUL A_EOT;
MACRO_A_NUL A_ESC;
MACRO_A_NUL A_ETB;
MACRO_A_NUL A_ETX;
MACRO_A_NUL A_FF;
MACRO_A_REBOOT A_FREEZE;
MACRO_A_NUL A_FS;
MACRO_A_REBOOT A_FTRACE;
MACRO_A_GETPOLICY A_GETCAR;
MACRO_A_GETPOLICY A_GETCLASS;
MACRO_A_GETPOLICY A_GETCOND;
MACRO_A_GETPOLICY A_GETCWD;
MACRO_A_GETPOLICY A_GETFSIZE;
MACRO_A_GETPOLICY A_GETKAUDIT;
MACRO_A_GETPOLICY A_GETKMASK;
MACRO_A_GETPOLICY A_GETPINFO;
MACRO_A_GETPOLICY A_GETPINFO_ADDR;
MACRO_A_GETPOLICY A_GETPOLICY;
MACRO_A_GETPOLICY A_GETQCTRL;
MACRO_A_GETPOLICY A_GETSTAT;
MACRO_A_NUL A_GS;
MACRO_A_NUL A_HT;
MACRO_A A_INVIS;
MACRO_A_NUL A_LF;
MACRO_A_MAXPATH A_MAXPATH;
MACRO_A_NUL A_NAK;
MACRO_A_NUL A_NL;
MACRO_A A_NORMAL;
MACRO_A_NUL A_NP;
MACRO_A_NUL A_NUL;
MACRO_PROB A_PROB;
MACRO_A A_PROTECT;
MACRO_A_REBOOT A_REBOOT;
MACRO_A_REBOOT A_REMOUNT;
MACRO_A A_REVERSE;
MACRO_A_NUL A_RS;
MACRO_A_GETPOLICY A_SETCLASS;
MACRO_A_GETPOLICY A_SETCOND;
MACRO_A_GETPOLICY A_SETFSIZE;
MACRO_A_GETPOLICY A_SETKAUDIT;
MACRO_A_GETPOLICY A_SETKMASK;
MACRO_A_GETPOLICY A_SETPMASK;
MACRO_A_GETPOLICY A_SETPOLICY;
MACRO_A_GETPOLICY A_SETQCTRL;
MACRO_A_GETPOLICY A_SETSMASK;
MACRO_A_GETPOLICY A_SETSTAT;
MACRO_A_GETPOLICY A_SETUMASK;
MACRO_A_REBOOT A_SHUTDOWN;
MACRO_A_NUL A_SI;
MACRO_A_NUL A_SO;
MACRO_A_NUL A_SOH;
MACRO_STANDOUT A_STANDOUT;
MACRO_A_NUL A_STX;
MACRO_A_NUL A_SUB;
MACRO_A_REBOOT A_SWAPCTL;
MACRO_A_NUL A_SYN;
MACRO_A A_UNDERLINE;
MACRO_A_NUL A_US;
MACRO_A_NUL A_VT;
MACRO_A A_WATTRIBUTES;
MACRO_A A_WCHARTEXT;
MACRO_Orientation ActiveDirectional;
MACRO_Orientation ActiveShapeEditing;
MACRO_AllTextDescriptors AllTextDescriptors;
MACRO_B0 B0;
MACRO_B110 B110;
MACRO_B115200 B115200;
MACRO_B1200 B1200;
MACRO_B110 B134;
MACRO_B150 B150;
MACRO_B153600 B153600;
MACRO_B1800 B1800;
MACRO_B19200 B19200;
MACRO_B200 B200;
MACRO_B230400 B230400;
MACRO_B2400 B2400;
MACRO_B300 B300;
MACRO_B307200 B307200;
MACRO_B38400 B38400;
MACRO_B460800 B460800;
MACRO_B4800 B4800;
MACRO_B0 B50;
MACRO_B57600 B57600;
MACRO_B300 B600;
MACRO_B0 B75;
MACRO_B76800 B76800;
MACRO_B9600 B9600;
MACRO_ORDINARY BACKSPACE;
MACRO_BADCONT BADCONT;
MACRO_BADFTYPE BADFTYPE;
MACRO_BADINPUT BADINPUT;
MACRO_BADMAJOR BADMAJOR;
MACRO_BADMINOR BADMINOR;
MACRO_BADMODE BADMODE;
MACRO_BAD_CIS BAD_CIS_ADDR;
MACRO_EXIT_STATUS BAD_EXIT_STATUS;
MACRO_BAD_IDENTIFY BAD_IDENTIFY;
name_pos BAD_NAME;
MACRO_BAD BAD_SYS;
MACRO_BARRIER BARRIER_LOCK;
MACRO_BA BA_BSS;
MACRO_BA BA_CPU;
MACRO_BA BA_DYNAMIC;
MACRO_BA BA_ENTRY;
MACRO_BA BA_GOTADDR;
MACRO_BA BA_IFLUSH;
MACRO_BA BA_LDELF;
MACRO_BA BA_LDNAME;
MACRO_BA BA_LDSHDR;
MACRO_BA BA_LPAGESZ;
MACRO_BA BA_MMU;
MACRO_BA BA_NEXTGOT;
MACRO_BA BA_NUM;
MACRO_BA BA_PAGESZ;
MACRO_BA BA_PHDR;
MACRO_BA BA_PHENT;
MACRO_BA BA_PHNUM;
MACRO_BBLOCK BBLOCK;
MACRO_BBOFF BBOFF;
MACRO_BBSIZE BBSIZE;
MACRO_BC BC_BASE_MAX;
MACRO_BC BC_DIM_MAX;
MACRO_BC BC_SCALE_MAX;
MACRO_BC BC_STRING_MAX;
MACRO_ENDIAN BIG_ENDIAN;
MACRO_BITSPERBYTE BITSPERBYTE;
MACRO_BLKSZ BLKSZ;
MACRO_BLKTYPE BLKTYPE;
MACRO_BLK BLK_BYTECOUNT;
MACRO_BLK BLK_EOF;
MACRO_BLK BLK_EOR;
MACRO_BLK BLK_ERRORS;
MACRO_BLK BLK_RESTART;
MACRO_BLOCK BLOCK;
MACRO_BMACLNKTIME BMACLNKTIME;
MACRO_BMACRXRSTDELAY BMACRXRSTDELAY;
MACRO_BMACTXRSTDELAY BMACTXRSTDELAY;
MACRO_BMAC_TPAL1 BMAC_EXTERNAL_PHYAD;
MACRO_BMAC_TPAL1 BMAC_INTERNAL_PHYAD;
MACRO_BMAC BMAC_MASK_ALNERRM;
MACRO_BMAC BMAC_MASK_CRCM;
MACRO_BMAC BMAC_MASK_DEFERM;
MACRO_BMAC BMAC_MASK_EXCCOLLM;
MACRO_BMAC BMAC_MASK_LCOLM;
MACRO_BMAC BMAC_MASK_LENGTH;
MACRO_BMAC BMAC_MASK_MAXPKTM;
MACRO_BMAC BMAC_MASK_NETCOLLM;
MACRO_BMAC BMAC_MASK_NORCOLLM;
MACRO_BMAC BMAC_MASK_OFLOM;
MACRO_BMAC BMAC_MASK_OTHER;
MACRO_BMAC BMAC_MASK_RXCV;
MACRO_BMAC BMAC_MASK_RXFRMCM;
MACRO_BMAC BMAC_MASK_RXINTRM;
MACRO_BMAC BMAC_MASK_TINT_RINT;
MACRO_BMAC BMAC_MASK_TXINTRM;
MACRO_BMAC BMAC_MASK_UFLOM;
MACRO_BMAC_TPAL1 BMAC_MII_CTLREG;
MACRO_BMAC_TPAL1 BMAC_MII_CTL_AUTO_SPEED;
MACRO_BMAC_TPAL1 BMAC_MII_CTL_ISOLATE;
MACRO_BMAC_TPAL1 BMAC_MII_CTL_LOOPBACK;
MACRO_BMAC_TPAL1 BMAC_MII_CTL_POWER_DOWN;
MACRO_BMAC_TPAL1 BMAC_MII_CTL_RESET;
MACRO_BMAC_TPAL1 BMAC_MII_CTL_SPEED_100;
MACRO_BMAC_TPAL1 BMAC_MII_STATREG;
MACRO_BMAC_TPAL1 BMAC_MII_STAT_EXT_CAP;
MACRO_BMAC_TPAL1 BMAC_MII_STAT_JABBER;
MACRO_BMAC_TPAL1 BMAC_MII_STAT_LINKUP;
MACRO_BMAC BMAC_RXCFG_ADDR;
MACRO_BMAC BMAC_RXCFG_CRC;
MACRO_BMAC BMAC_RXCFG_ENAB;
MACRO_BMAC BMAC_RXCFG_ERR;
MACRO_BMAC BMAC_RXCFG_FIFO;
MACRO_BMAC BMAC_RXCFG_GRPROM;
MACRO_BMAC BMAC_RXCFG_HASH;
MACRO_BMAC BMAC_RXCFG_MYOWN;
MACRO_BMAC BMAC_RXCFG_PROMIS;
MACRO_BMAC_XIFC BMAC_RXCFG_RES1;
MACRO_BMAC BMAC_RXCFG_STRIP;
MACRO_BMAC BMAC_STAT_ALNERR;
MACRO_BMAC BMAC_STAT_CRC;
MACRO_BMAC BMAC_STAT_DEFER;
MACRO_BMAC BMAC_STAT_EXCCOLL;
MACRO_BMAC BMAC_STAT_LCOL;
MACRO_BMAC BMAC_STAT_LENGTH;
MACRO_BMAC BMAC_STAT_MAXPKT;
MACRO_BMAC BMAC_STAT_NETCOLL;
MACRO_BMAC BMAC_STAT_NORCOLL;
MACRO_BMAC BMAC_STAT_OFLO;
MACRO_BMAC BMAC_STAT_RXCV;
MACRO_BMAC BMAC_STAT_RXFRMC;
MACRO_BMAC BMAC_STAT_RXINTR;
MACRO_BMAC BMAC_STAT_TXINTR;
MACRO_BMAC BMAC_STAT_UFLO;
MACRO_BMAC_TPAL1 BMAC_TPAL1_CLK_FSTSLW;
MACRO_BMAC_TPAL1 BMAC_TPAL1_CLK_LOOP_EN;
MACRO_BMAC_TPAL1 BMAC_TPAL1_LB;
MACRO_BMAC_TPAL1 BMAC_TPAL1_LINKSTATUS;
MACRO_BMAC_TPAL1 BMAC_TPAL1_LINKTESTEN;
MACRO_BMAC_TPAL1 BMAC_TPAL1_LOOP_EN;
MACRO_BMAC_TPAL1 BMAC_TPAL1_MS;
MACRO_BMAC_TPAL1 BMAC_TPAL1_PGYBAC_DIS;
MACRO_BMAC_TPAL1 BMAC_TPAL1_XM_SERIAL;
MACRO_BMAC_TPAL1 BMAC_TPAL2_MDC;
MACRO_BMAC_TPAL1 BMAC_TPAL2_MDC_BIT_POS;
MACRO_BMAC_TPAL1 BMAC_TPAL2_MDIO_EN;
MACRO_BMAC_TPAL1 BMAC_TPAL2_MDIO_EN_BIT_POS;
MACRO_BMAC_TPAL1 BMAC_TPAL2_MII_MDIO;
MACRO_BMAC_TPAL1 BMAC_TPAL2_MII_MDIO_BIT_POS;
MACRO_BMAC_TPAL1 BMAC_TPAL2_PGYBAC_MDIO;
MACRO_BMAC_TPAL1 BMAC_TPAL2_PGYBAC_MDIO_BIT_POS;
MACRO_BMAC BMAC_TXCFG_ENAB;
MACRO_BMAC BMAC_TXCFG_FDUP;
MACRO_BMAC_XIFC BMAC_TXCFG_FDX;
MACRO_BMAC BMAC_TXCFG_FIFO;
MACRO_BMAC BMAC_TXCFG_IGCOLL;
MACRO_BMAC_XIFC BMAC_TXCFG_NBKOFF;
MACRO_BMAC BMAC_TXCFG_NFCS;
MACRO_BMAC_XIFC BMAC_TXCFG_RES1;
MACRO_BMAC BMAC_TXCFG_SLOW;
MACRO_BMAC_XIFC BMAC_TX_RESET;
MACRO_BMAC BMAC_XIFC_ENAB;
MACRO_BMAC_XIFC BMAC_XIFC_IPG0_SHIFT;
MACRO_BMAC_XIFC BMAC_XIFC_LANCE_ENAB;
MACRO_BMAC_XIFC BMAC_XIFC_LANCE_IPG0;
MACRO_BMAC BMAC_XIFC_LPBK;
MACRO_BMAC_XIFC BMAC_XIFC_MIIBUFDIS;
MACRO_BMAC_XIFC BMAC_XIFC_MIILPBK;
MACRO_BMAC BMAC_XIFC_MODE_SERIAL;
MACRO_BMAC BMAC_XIFC_RSVD;
MACRO_BMAC_XIFC BMAC_XIFC_SQETSTENB;
MACRO_BMAC_XIFC BMAC_XIFC_SQETSTWIN;
MACRO_BMAC_XIFC BMAC_XIFC_XIFLPBK;
zotypes BOGUS_OBJ;
MACRO_QNICE BOOTDLY;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_GETFILE;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_WHOAMI;
MACRO_BOOTPARAMPROG BOOTPARAMPROG;
MACRO_BOOTPARAMVERS BOOTPARAMVERS;
MACRO_BOOTSZ BOOTSZ;
MACRO_FAIL BOOT_FAIL;
MACRO_PROTOCOL BOOT_PROTOCOL;
MACRO_BOOT BOOT_SVC_FAIL;
MACRO_BOOT BOOT_SVC_OK;
MACRO_TIME BOOT_TIME;
MACRO_BOTTOMFUNC BOTTOMFUNC;
MACRO_BO BO_ALIGN_L1;
MACRO_BO BO_ALIGN_L2;
MACRO_BO BO_ALIGN_L3;
MACRO_BO BO_NO_ALIGN;
MACRO_BO BO_VERSION;
MACRO_BPPIOC BPPIOC_TESTIO;
MACRO_BPPIOC_TESTTIMEOUT BPPIOC_TESTTIMEOUT;
MACRO_BPP BPP_ACK_BIDIR;
handshake_t BPP_ACK_BUSY_HS;
handshake_t BPP_ACK_HS;
MACRO_BPP BPP_ACK_IRQ;
MACRO_BPP BPP_ACK_IRQ_EN;
MACRO_BPP BPP_ACK_OP;
MACRO_BPP BPP_ACK_PIN;
MACRO_BPP BPP_ADDR_VALID;
MACRO_BPP BPP_AFX_PIN;
MACRO_BPP BPP_ALL_IN_PINS;
MACRO_BPP BPP_ALL_IRQS;
MACRO_BPP BPP_ALL_OUT_PINS;
MACRO_BPP BPP_BURST_16BYTE;
MACRO_BPP BPP_BURST_1WORD;
MACRO_BPP BPP_BURST_32BYTE;
MACRO_BPP BPP_BURST_4BYTE;
MACRO_BPP BPP_BURST_4WORD;
MACRO_BPP BPP_BURST_8WORD;
MACRO_BPP BPP_BURST_DEFAULT;
MACRO_BPP BPP_BURST_NOBURST;
MACRO_BPP BPP_BURST_SIZES_MASK;
MACRO_BPP_ISOPEN BPP_BUSY;
MACRO_BPP BPP_BUSY_BIDIR;
MACRO_BPP BPP_BUSY_ERR;
handshake_t BPP_BUSY_HS;
MACRO_BPP BPP_BUSY_IRP;
MACRO_BPP BPP_BUSY_IRQ;
MACRO_BPP BPP_BUSY_IRQ_EN;
MACRO_BPP BPP_BUSY_OP;
MACRO_BPP BPP_BUSY_PIN;
handshake_t BPP_CLEAR_MEM;
MACRO_BPP BPP_CNTR_TEST;
MACRO_BPP BPP_DEVICE_ID_MASK;
MACRO_BPP BPP_DIRECTION;
MACRO_BPP BPP_DMA2P_DEVID;
MACRO_BPP BPP_DMA_DATA;
MACRO_BPP BPP_DMA_ON;
MACRO_BPP BPP_DRAINING;
MACRO_BPP BPP_DSS_MASK;
MACRO_BPP BPP_DSS_SIZE;
MACRO_BPP BPP_DSW_MASK;
MACRO_BPP BPP_DSW_SIZE;
MACRO_BPP BPP_DS_BIDIR;
MACRO_BPP BPP_DS_IRQ;
MACRO_BPP BPP_DS_IRQ_EN;
MACRO_BPP BPP_DS_PIN;
MACRO_BPP BPP_ENABLE_BCNT;
MACRO_BPP BPP_ENABLE_DMA;
MACRO_BPP BPP_EN_CHAIN_DMA;
MACRO_BPP BPP_EN_DIAG;
MACRO_BPP BPP_EN_MEM_CLR;
MACRO_BPP BPP_EN_VERSATEC;
MACRO_BPP BPP_ERR_ERR;
MACRO_BPP BPP_ERR_IRP;
MACRO_BPP BPP_ERR_IRQ;
MACRO_BPP BPP_ERR_IRQ_EN;
MACRO_BPP BPP_ERR_PEND;
MACRO_BPP BPP_ERR_PIN;
MACRO_BPP BPP_FLUSH;
MACRO_BPP BPP_HIOD_DEVID;
handshake_t BPP_HSCAN_HS;
MACRO_BPP BPP_IDLE;
MACRO_BPP BPP_INIT_PIN;
MACRO_BPP BPP_INT_EN;
MACRO_BPP BPP_INT_PEND;
MACRO_BPP_ISOPEN BPP_ISOPEN;
MACRO_BPP_ISOPEN BPP_ISWAITING;
MACRO_BPP BPP_MAX_DMA;
MACRO_BPP BPP_NEXT_VALID;
handshake_t BPP_NO_HS;
MACRO_BPP BPP_PE_ERR;
MACRO_BPP BPP_PE_IRP;
MACRO_BPP BPP_PE_IRQ;
MACRO_BPP BPP_PE_IRQ_EN;
MACRO_BPP BPP_PE_PIN;
MACRO_BPP BPP_READ;
MACRO_BPP BPP_RESET_BPP;
handshake_t BPP_SET_MEM;
MACRO_BPP BPP_SEVEN_BITS;
MACRO_BPP BPP_SLAVE_ERR;
MACRO_BPP BPP_SLCTIN_ERR;
MACRO_BPP BPP_SLCTIN_PIN;
MACRO_BPP BPP_SLCT_ERR;
MACRO_BPP BPP_SLCT_IRP;
MACRO_BPP BPP_SLCT_IRQ;
MACRO_BPP BPP_SLCT_IRQ_EN;
MACRO_BPP BPP_SLCT_PIN;
MACRO_BPP BPP_SRST;
MACRO_BPP_ISOPEN BPP_SUSPENDED;
MACRO_BPP BPP_TC_INTR_DISABLE;
MACRO_BPP BPP_TERMINAL_CNT;
MACRO_BPP BPP_V1_PIN;
MACRO_BPP BPP_V2_PIN;
MACRO_BPP BPP_V3_PIN;
MACRO_BPP_ISOPEN BPP_VERSATEC;
MACRO_BPP BPP_VERSATEC_INTERLOCK;
handshake_t BPP_VPLOT_HS;
handshake_t BPP_VPRINT_HS;
handshake_t BPP_XSCAN_HS;
MACRO_BPRI BPRI_FT;
MACRO_BPRI BPRI_HI;
MACRO_BPRI BPRI_LO;
MACRO_BPRI BPRI_MED;
MACRO_BPRT BPRT;
MACRO_BREAK BREAK;
MACRO_BRK BRK;
MACRO_IGNBRK BRKINT;
MACRO_BRK_DELAY BRK_DELAY;
MACRO_BS0 BS0;
MACRO_ANYP BSDELAY;
MACRO_TAB3 BSDLY;
MACRO_BSM BSM_AUDIT;
MACRO_BSM BSM_AUDITCTL;
MACRO_BSM BSM_AUDITON;
MACRO_BSM BSM_AUDITSTAT;
MACRO_BSM BSM_AUDITSVC;
MACRO_BSM BSM_AUDITUSER;
MACRO_BSM BSM_GETAUDIT;
MACRO_BSM BSM_GETAUDIT_ADDR;
MACRO_BSM BSM_GETAUID;
MACRO_BSM BSM_GETKERNSTATE;
MACRO_BSM BSM_GETPORTAUDIT;
MACRO_BSM BSM_GETUSERAUDIT;
MACRO_BSM BSM_REVOKE;
MACRO_BSM BSM_SETAUDIT;
MACRO_BSM BSM_SETAUDIT_ADDR;
MACRO_BSM BSM_SETAUID;
MACRO_BSM BSM_SETKERNSTATE;
MACRO_BSM BSM_SETUSERAUDIT;
MACRO_BSM_TEXTBUFSZ BSM_TEXTBUFSZ;
MACRO_BT BT_NBIPUI;
MACRO_BT_ULSHIFT BT_NBIPUL;
MACRO_BT BT_UIMASK;
MACRO_BT BT_UISHIFT;
MACRO_BT_ULSHIFT BT_ULMASK;
MACRO_BT_ULSHIFT BT_ULMAXMASK;
MACRO_BT_ULSHIFT BT_ULSHIFT;
MACRO_SHIFTKEYS BUCKYBITS;
MACRO_BUFSIZ BUFSIZ;
MACRO_BULK BULK_ONLY_GET_MAXLUN;
MACRO_BULK BULK_ONLY_RESET;
MACRO_BURST1 BURST1;
MACRO_BURST128 BURST128;
MACRO_BURST1 BURST16;
MACRO_BURST1 BURST2;
MACRO_BURST1 BURST32;
MACRO_BURST1 BURST4;
MACRO_BURST1 BURST64;
MACRO_BURST1 BURST8;
MACRO_BUSY_0 BUSY;
MACRO_BUSY BUSY_COUNT_C;
MACRO_BUSY BUSY_LOOP_C;
MACRO_BUS_ACTIVE BUS_ACTIVE;
MACRO_BUS BUS_ADRALN;
MACRO_BUS BUS_ADRERR;
MACRO_BUS BUS_OBJERR;
MACRO_BUS_ACTIVE BUS_QUIESCED;
MACRO_BUS_ACTIVE BUS_SHUTDOWN;
MACRO_BUTTON1 BUTTON1_CLICKED;
MACRO_BUTTON1 BUTTON1_DOUBLE_CLICKED;
MACRO_BUTTON1 BUTTON1_PRESSED;
MACRO_BUTTON1 BUTTON1_RELEASED;
MACRO_BUTTON1 BUTTON1_TRIPLE_CLICKED;
MACRO_BUTTON2 BUTTON2_CLICKED;
MACRO_BUTTON2 BUTTON2_DOUBLE_CLICKED;
MACRO_BUTTON2 BUTTON2_PRESSED;
MACRO_BUTTON2 BUTTON2_RELEASED;
MACRO_BUTTON2 BUTTON2_TRIPLE_CLICKED;
MACRO_BUTTON3 BUTTON3_CLICKED;
MACRO_BUTTON3 BUTTON3_DOUBLE_CLICKED;
MACRO_BUTTON3 BUTTON3_PRESSED;
MACRO_BUTTON3 BUTTON3_RELEASED;
MACRO_BUTTON3 BUTTON3_TRIPLE_CLICKED;
MACRO_BUTTON BUTTON_CLICKED;
MACRO_ASCII_DEVID BUTTON_DEVID;
MACRO_BUTTON BUTTON_DOUBLE_CLICKED;
MACRO_BUTTON BUTTON_PRESSED;
MACRO_BUTTON BUTTON_RELEASED;
MACRO_BUTTON BUTTON_TRIPLE_CLICKED;
MACRO_BUT BUT_FIRST;
MACRO_BUT BUT_LAST;
MACRO_BW2BYTES BW2BYTES;
MACRO_BW2HSIZEY BW2HBYTES;
MACRO_BW2HSIZEX BW2HSIZEX;
MACRO_BW2HSIZEY BW2HSIZEY;
MACRO_BW2HSQUAREBYTES BW2HSQUAREBYTES;
MACRO_BW2HSQUARESIZEX BW2HSQUARESIZEX;
MACRO_BW2HSQUARESIZEY BW2HSQUARESIZEY;
MACRO_BW2SIZEX BW2SIZEX;
MACRO_BW2SIZEY BW2SIZEY;
MACRO_BW2SQUARESIZEY BW2SQUAREBYTES;
MACRO_BW2SQUARESIZEX BW2SQUARESIZEX;
MACRO_BW2SQUARESIZEY BW2SQUARESIZEY;
MACRO_BW2 BW2_FBSIZE;
MACRO_BW2 BW2_FBSIZE_HIRES;
MACRO_BW2 BW2_USECOPYMEM;
MACRO_BLOCK BYTE;
MACRO_BYTESIZ BYTESIZ;
MACRO_BYTES BYTES_PER_XDR_UNIT;
MACRO_BYTE BYTE_ORDER;
MACRO_B B_AGE;
MACRO_B B_ASYNC;
MACRO_B B_BUSY;
MACRO_B B_DELWRI;
MACRO_B B_DONE;
MACRO_B B_DONTNEED;
MACRO_B B_ERROR;
$F5D0AC97B70F66A0B82E3660E1E74CD3 B_FALSE;
MACRO_B B_FORCE;
MACRO_B B_FREE;
MACRO_B B_HEAD;
MACRO_B B_INVAL;
MACRO_B B_KERNBUF;
MACRO_B B_NOCACHE;
MACRO_B B_PAGEIO;
MACRO_B B_PHYS;
MACRO_B B_READ;
MACRO_B B_REMAPPED;
MACRO_B B_RETRYWRI;
MACRO_B B_SHADOW;
MACRO_B B_STALE;
$F5D0AC97B70F66A0B82E3660E1E74CD3 B_TRUE;
MACRO_B B_TRUNC;
MACRO_B B_WANTED;
MACRO_B B_WRITE;
MACRO_CACHEFSIO CACHEFSIO_DCMD;
MACRO_CACHEFSIO CACHEFSIO_PACK;
MACRO_CACHEFSIO CACHEFSIO_PACKINFO;
MACRO_CACHEFSIO CACHEFSIO_UNPACK;
MACRO_CACHEFSIO CACHEFSIO_UNPACKALL;
MACRO_CACHEFS_DEBUG CACHEFS_DEBUG_DEPTH;
MACRO_CACHEFS_PACKED CACHEFS_LOG_CALLOC;
MACRO_CACHEFS_PACKED CACHEFS_LOG_CREATE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_CSYMLINK;
MACRO_CACHEFS_PACKED CACHEFS_LOG_FILE_REV;
MACRO_CACHEFS_PACKED CACHEFS_LOG_FILLDIR;
MACRO_CACHEFS_PACKED CACHEFS_LOG_GETPAGE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_GPFRONT;
MACRO_CACHEFS_PACKED CACHEFS_LOG_MAGIC;
MACRO_CACHEFS_PACKED CACHEFS_LOG_MDCREATE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_MKDIR;
MACRO_CACHEFS_PACKED CACHEFS_LOG_MOUNT;
MACRO_CACHEFS_PACKED CACHEFS_LOG_NOCACHE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_NUMRECS;
MACRO_CACHEFS_PACKED CACHEFS_LOG_POPULATE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_PUTPAGE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_READDIR;
MACRO_CACHEFS_PACKED CACHEFS_LOG_READLINK;
MACRO_CACHEFS_PACKED CACHEFS_LOG_REMOVE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_RENAME;
MACRO_CACHEFS_PACKED CACHEFS_LOG_RFDIR;
MACRO_CACHEFS_PACKED CACHEFS_LOG_RMDIR;
MACRO_CACHEFS_PACKED CACHEFS_LOG_SYMLINK;
MACRO_CACHEFS_PACKED CACHEFS_LOG_TRUNCATE;
MACRO_CACHEFS_PACKED CACHEFS_LOG_UALLOC;
MACRO_CACHEFS_PACKED CACHEFS_LOG_UMOUNT;
MACRO_CACHEFS_MAX CACHEFS_MAX_APOP_INQUEUE;
MACRO_CACHEFS_PACKED CACHEFS_PACKED_DATA;
MACRO_CACHEFS_PACKED CACHEFS_PACKED_FILE;
MACRO_CACHEFS_PACKED CACHEFS_PACKED_NOCACHE;
MACRO_CACHEFS CACHEFS_PREFIX_LEN;
cachefs_rl_type CACHEFS_RL_ACTIVE;
cachefs_rl_type CACHEFS_RL_ATTRFILE;
cachefs_rl_type CACHEFS_RL_FREE;
cachefs_rl_type CACHEFS_RL_GC;
cachefs_rl_type CACHEFS_RL_MF;
cachefs_rl_type CACHEFS_RL_MODIFIED;
cachefs_rl_type CACHEFS_RL_NONE;
cachefs_rl_type CACHEFS_RL_PACKED;
cachefs_rl_type CACHEFS_RL_PACKED_PENDING;
MACRO_CACHE CACHE_ALLOC_PENDING;
MACRO_CACHE CACHE_CACHEW_THREADEXIT;
MACRO_CACHE CACHE_CACHEW_THREADRUN;
MACRO_CACHE CACHE_CHECK_RLTYPE;
MACRO_CACHE CACHE_DIRTY;
MACRO_CACHE CACHE_GARBAGE_COLLECT;
MACRO_CACHE CACHE_NOCACHE;
MACRO_CACHE CACHE_NOFILL;
MACRO_CACHE CACHE_PACKED_PENDING;
msg_type CALL;
MACRO_CALLB CALLB_CPR_ALWAYS_SAFE;
MACRO_CALLB CALLB_CPR_SAFE;
MACRO_CALLB CALLB_CPR_START;
MACRO_CALLB CALLB_MAX_RETRY;
MACRO_CALLB CALLB_THREAD_DELAY;
MACRO_CALLOUT CALLOUT_BUCKETS;
MACRO_CALLOUT CALLOUT_BUCKET_MASK;
MACRO_CALLOUT CALLOUT_COUNTER_LOW;
MACRO_CALLOUT CALLOUT_COUNTER_SHIFT;
MACRO_CALLOUT CALLOUT_FANOUT;
MACRO_CALLOUT CALLOUT_FANOUT_BITS;
MACRO_CALLOUT CALLOUT_FANOUT_MASK;
MACRO_CALLOUT CALLOUT_LONGTERM_TICKS;
MACRO_CALLOUT CALLOUT_NORMAL;
MACRO_CALLOUT CALLOUT_NTYPES;
MACRO_CALLOUT CALLOUT_REALTIME;
MACRO_CALLOUT CALLOUT_TABLES;
MACRO_CALLOUT CALLOUT_TABLE_MASK;
MACRO_CALLOUT CALLOUT_THREADS;
MACRO_CALLOUT CALLOUT_TYPE_BITS;
MACRO_NMOUNT CANBSIZ;
MACRO_BARRIER CANCELLED_LOCK;
MACRO_CANT CANT_ESTABLISH_EXCHANGE;
MACRO_CAPSLOCK CAPSLOCK;
MACRO_CAPSLOCK CAPSMASK;
MACRO_CARR CARR_ON;
MACRO_CARTRIDGETREC CARTRIDGETREC;
MACRO_CARTRIDGE CARTRIDGE_PROT_CMD;
MACRO_CB_0 CB;
MACRO_CBAUD CBAUD;
MACRO_CIBAUD CBAUDEXT;
desmode CBC;
MACRO_CBPROC CBPROC_ERROR;
MACRO_CBPROC CBPROC_FINISH;
MACRO_CBPROC CBPROC_RECEIVE;
MACRO_CBW CBW_CDB_LEN;
MACRO_CBW CBW_DIR_IN;
MACRO_CBW CBW_DIR_OUT;
MACRO_CBW CBW_SIGNATURE;
MACRO_CB_CL CB_CL_CPR_CALLOUT;
MACRO_CB_CL CB_CL_CPR_DAEMON;
MACRO_CB_CL CB_CL_CPR_DMA;
MACRO_CB_CL CB_CL_CPR_FB;
MACRO_CB_CL CB_CL_CPR_OBP;
MACRO_CB_CL CB_CL_CPR_PM;
MACRO_CB_CL CB_CL_CPR_POST_USER;
MACRO_CB_CL CB_CL_CPR_PROMPRINTF;
MACRO_CB_CL CB_CL_CPR_RPC;
MACRO_CB_CL CB_CL_CPR_VM;
MACRO_CB_CL CB_CL_HALT;
MACRO_CB_CL CB_CL_PANIC;
MACRO_CB_CL CB_CL_UADMIN;
MACRO_CB_CODE CB_CODE_CPR_CHKPT;
MACRO_CB_CODE CB_CODE_CPR_RESUME;
MACRO_CB CB_PROG;
MACRO_CB CB_VERS;
MACRO_CCTS CCTS_OFLOW;
MACRO_CC CC_GET_GLOBAL_PATH;
MACRO_CC CC_GET_OPTIONS;
MACRO_CC CC_GET_PROCESS_PATH;
MACRO_CC CC_GLOBAL_LOG;
MACRO_CC CC_GLOBAL_PATH;
MACRO_CC CC_GLOBAL_SETID;
MACRO_CC CC_OPTIONS;
MACRO_CC CC_PROCESS_PATH;
MACRO_CC CC_PROCESS_SETID;
MACRO_CC CC_SET_GLOBAL_PATH;
MACRO_CC CC_SET_OPTIONS;
MACRO_CC CC_SET_PROCESS_PATH;
MACRO_OFFSET CD180_OFFSET;
MACRO_CD180 CD180_RESET_ALL;
MACRO_CDB CDB_GROUP0;
MACRO_CDB CDB_GROUP1;
MACRO_CDB CDB_GROUP2;
MACRO_CDB CDB_GROUP3;
MACRO_CDB CDB_GROUP4;
MACRO_CDB CDB_GROUP5;
MACRO_CDB CDB_GROUP6;
MACRO_CDB CDB_GROUP7;
MACRO_CDB CDB_GROUPID_0;
MACRO_CDB CDB_GROUPID_1;
MACRO_CDB CDB_GROUPID_2;
MACRO_CDB CDB_GROUPID_3;
MACRO_CDB CDB_GROUPID_4;
MACRO_CDB CDB_GROUPID_5;
MACRO_CDB CDB_GROUPID_6;
MACRO_CDB CDB_GROUPID_7;
MACRO_SIZE CDB_SIZE;
MACRO_CNUL CDEL;
MACRO_CDE CDE_COMPLETE;
MACRO_CDE CDE_VALID;
MACRO_CDIOC CDIOC;
MACRO_CDIRTY CDIRTY;
MACRO_CMASK CDLIMIT;
MACRO_CDN CDN;
MACRO_CDROMCDDA CDROMCDDA;
MACRO_CDROMCDXA CDROMCDXA;
MACRO_CDROMEJECT CDROMEJECT;
MACRO_CDROMGBLKMODE CDROMGBLKMODE;
MACRO_CDROMGDRVSPEED CDROMGDRVSPEED;
MACRO_CDROMPAUSE CDROMPAUSE;
MACRO_CDROMPLAYMSF CDROMPLAYMSF;
MACRO_CDROMPLAYTRKIND CDROMPLAYTRKIND;
MACRO_CDROMREADMODE1 CDROMREADMODE1;
MACRO_CDROMREADMODE2 CDROMREADMODE2;
MACRO_CDROMREADOFFSET CDROMREADOFFSET;
MACRO_CDROMREADTOCENTRY CDROMREADTOCENTRY;
MACRO_CDROMREADTOCHDR CDROMREADTOCHDR;
MACRO_CDROMRESUME CDROMRESUME;
MACRO_CDROMSBLKMODE CDROMSBLKMODE;
MACRO_CDROMSDRVSPEED CDROMSDRVSPEED;
MACRO_CDROMSTART CDROMSTART;
MACRO_CDROMSTOP CDROMSTOP;
MACRO_CDROMSUBCHNL CDROMSUBCHNL;
MACRO_CDROMSUBCODE CDROMSUBCODE;
MACRO_CDROMVOLCTRL CDROMVOLCTRL;
MACRO_CDROM CDROM_AUDIO_COMPLETED;
MACRO_CDROM CDROM_AUDIO_ERROR;
MACRO_CDROM CDROM_AUDIO_INVALID;
MACRO_CDROM CDROM_AUDIO_NO_STATUS;
MACRO_CDROM CDROM_AUDIO_PAUSED;
MACRO_CDROM CDROM_AUDIO_PLAY;
MACRO_CDROM CDROM_BLK_1024;
MACRO_CDROM CDROM_BLK_2048;
MACRO_CDROM CDROM_BLK_2056;
MACRO_CDROM CDROM_BLK_2336;
MACRO_CDROM CDROM_BLK_2340;
MACRO_CDROM CDROM_BLK_2352;
MACRO_CDROM CDROM_BLK_2368;
MACRO_CDROM CDROM_BLK_2448;
MACRO_CDROM CDROM_BLK_2646;
MACRO_CDROM CDROM_BLK_2647;
MACRO_CDROM CDROM_BLK_512;
MACRO_CDROM CDROM_BLK_SUBCODE;
MACRO_CDROM CDROM_DATA_TRACK;
MACRO_CDROM CDROM_DA_ALL_SUBCODE;
MACRO_CDROM CDROM_DA_NO_SUBCODE;
MACRO_CDROM CDROM_DA_SUBCODE_ONLY;
MACRO_CDROM CDROM_DA_SUBQ;
MACRO_CDROM CDROM_DOUBLE_SPEED;
MACRO_CDROM CDROM_LBA;
MACRO_CDROM CDROM_LEADOUT;
MACRO_CDROM CDROM_MAXIMUM_SPEED;
MACRO_CDROM_MODE2 CDROM_MODE2_SIZE;
MACRO_CDROM_MODE CDROM_MODE_SPEED;
MACRO_CDROM CDROM_MSF;
MACRO_CDROM CDROM_NORMAL_SPEED;
MACRO_CDROM CDROM_QUAD_SPEED;
MACRO_CDROM CDROM_TWELVE_SPEED;
MACRO_CDROM CDROM_XA_DATA;
MACRO_CDROM CDROM_XA_DATA_W_ERROR;
MACRO_CDROM CDROM_XA_SECTOR_DATA;
nstype CDS;
MACRO_CDSUSP CDSUSP;
MACRO_RTSXOFF CDXON;
MACRO_CD_CHANGE CD_CHANGE;
MACRO_CD CD_INT;
MACRO_CD_ZD CD_OD;
MACRO_CD_CHANGE CD_ON;
MACRO_CD_ZD CD_ZD;
MACRO_CEOL2 CEOF;
MACRO_CEOL CEOL;
MACRO_CEOL2 CEOL2;
MACRO_CEOT CEOT;
MACRO_CERASE CERASE;
MACRO_CESC CESC;
MACRO_CE CE_CONT;
MACRO_CE CE_IGNORE;
MACRO_CE CE_NOTE;
MACRO_CE CE_PANIC;
MACRO_CE CE_WARN;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_APID_NOEXIST;
MACRO_CFGA CFGA_AP_LOG_ID_LEN;
MACRO_CFGA CFGA_AP_PHYS_ID_LEN;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_ATTR_INVAL;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_BUSY;
MACRO_CFGA CFGA_CLASS_LEN;
$B8EA7248DE2247D155C7346AC11040D4 CFGA_CMD_CONFIGURE;
$B8EA7248DE2247D155C7346AC11040D4 CFGA_CMD_CONNECT;
$B8EA7248DE2247D155C7346AC11040D4 CFGA_CMD_DISCONNECT;
$B8EA7248DE2247D155C7346AC11040D4 CFGA_CMD_LOAD;
$B8EA7248DE2247D155C7346AC11040D4 CFGA_CMD_NONE;
$B8EA7248DE2247D155C7346AC11040D4 CFGA_CMD_UNCONFIGURE;
$B8EA7248DE2247D155C7346AC11040D4 CFGA_CMD_UNLOAD;
$81EF3FA8C4370F96570BE58B85740C0E CFGA_COND_FAILED;
$81EF3FA8C4370F96570BE58B85740C0E CFGA_COND_FAILING;
$81EF3FA8C4370F96570BE58B85740C0E CFGA_COND_OK;
$81EF3FA8C4370F96570BE58B85740C0E CFGA_COND_UNKNOWN;
$81EF3FA8C4370F96570BE58B85740C0E CFGA_COND_UNUSABLE;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_DATA_ERROR;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_ERROR;
MACRO_CFGA CFGA_FLAG_FORCE;
MACRO_CFGA CFGA_FLAG_LIST_ALL;
MACRO_CFGA CFGA_FLAG_VERBOSE;
MACRO_CFGA CFGA_INFO_LEN;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_INSUFFICENT_CONDITION;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_INVAL;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_LIB_ERROR;
MACRO_CFGA CFGA_LOG_EXT_LEN;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_NACK;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_NOTSUPP;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_NO_LIB;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_OK;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_OPNOTSUPP;
MACRO_CFGA CFGA_PHYS_EXT_LEN;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_PRIV;
$AD2EB70E5A961F74EB9C4246C2983BC3 CFGA_STAT_CONFIGURED;
$AD2EB70E5A961F74EB9C4246C2983BC3 CFGA_STAT_CONNECTED;
$AD2EB70E5A961F74EB9C4246C2983BC3 CFGA_STAT_DISCONNECTED;
$AD2EB70E5A961F74EB9C4246C2983BC3 CFGA_STAT_EMPTY;
$AD2EB70E5A961F74EB9C4246C2983BC3 CFGA_STAT_NONE;
$AD2EB70E5A961F74EB9C4246C2983BC3 CFGA_STAT_UNCONFIGURED;
$2A9D6F0D138547ECB8E62D5BF66B49C5 CFGA_SYSTEM_BUSY;
MACRO_CFGA CFGA_TYPE_LEN;
MACRO_ConfigMCast CFGMULTICAST;
MACRO_CFLAGS CFLAGS;
MACRO_CFLAG CFLAG_CDBEXTERN;
MACRO_CFLAG_CHKSEG CFLAG_CHKSEG;
MACRO_CFLAG CFLAG_CMDARQ;
MACRO_CFLAG CFLAG_CMDDISC;
MACRO_CFLAG CFLAG_CMDIOPB;
MACRO_CFLAG CFLAG_CMDPROXY;
MACRO_CFLAG CFLAG_COMPLETED;
MACRO_CFLAG CFLAG_DMASEND;
MACRO_CFLAG CFLAG_DMAVALID;
MACRO_CFLAG CFLAG_DMA_PARTIAL;
MACRO_CFLAG_RESERVED CFLAG_EXTCMDS_ALLOC;
MACRO_CFLAG CFLAG_FINISHED;
MACRO_CFLAG CFLAG_FREE;
MACRO_CFLAG CFLAG_IN_TRANSPORT;
MACRO_CFLAG CFLAG_PREPARED;
MACRO_CFLAG CFLAG_PRIVEXTERN;
MACRO_CFLAG_RESERVED CFLAG_RESERVED;
MACRO_CFLAG CFLAG_RESTORE_PTRS;
MACRO_CFLAG CFLAG_SCBEXTERN;
MACRO_CFLAG CFLAG_TRANFLAG;
MACRO_CFLAG CFLAG_WATCH;
MACRO_CFLUSH CFLUSH;
cfsdcmd_cmds CFSDCMD_CIDTOFID;
cfsdcmd_cmds CFSDCMD_CREATE;
cfsdcmd_cmds CFSDCMD_DAEMONID;
cfsdcmd_cmds CFSDCMD_EXISTS;
cfsdcmd_cmds CFSDCMD_GETATTRFID;
cfsdcmd_cmds CFSDCMD_GETATTRNAME;
cfsdcmd_cmds CFSDCMD_GETINFO;
cfsdcmd_cmds CFSDCMD_GETSTATS;
cfsdcmd_cmds CFSDCMD_LINK;
cfsdcmd_cmds CFSDCMD_LOSTFOUND;
cfsdcmd_cmds CFSDCMD_MKDIR;
cfsdcmd_cmds CFSDCMD_PUSHBACK;
cfsdcmd_cmds CFSDCMD_REMOVE;
cfsdcmd_cmds CFSDCMD_RENAME;
cfsdcmd_cmds CFSDCMD_RMDIR;
cfsdcmd_cmds CFSDCMD_ROOTFID;
cfsdcmd_cmds CFSDCMD_SETATTR;
cfsdcmd_cmds CFSDCMD_SETSECATTR;
cfsdcmd_cmds CFSDCMD_STATEGET;
cfsdcmd_cmds CFSDCMD_STATESET;
cfsdcmd_cmds CFSDCMD_SYMLINK;
cfsdcmd_cmds CFSDCMD_XWAIT;
MACRO_CFSVERSION CFSVERSION;
MACRO_CFSVERSION64 CFSVERSION64;
MACRO_CFS_WRITE CFS_ACCESS_BACKFS;
MACRO_CFS_MAX CFS_BOI_BACKFS;
MACRO_CFS_MAX CFS_BOI_FRONTFS;
MACRO_CFS_MAX CFS_BOI_ROOTFS;
cachefs_cmd CFS_CACHE_SYNC;
cachefs_connected CFS_CD_CONNECTED;
cachefs_connected CFS_CD_DISCONNECTED;
cachefs_connected CFS_CD_RECONNECTING;
MACRO_CFS CFS_CID_LOCAL;
MACRO_CFS_MAX CFS_CM_BACK;
MACRO_CFS_MAX CFS_CM_FRONT;
MACRO_CFS_WRITE CFS_CODCONST_MODE;
MACRO_CFS_C CFS_C_HUB_LOCAL_POWER;
MACRO_CFS_C CFS_C_HUB_OVER_CURRENT;
MACRO_CFS_C CFS_C_PORT_CONNECTION;
MACRO_CFS_C CFS_C_PORT_ENABLE;
MACRO_CFS_C CFS_C_PORT_OVER_CURRENT;
MACRO_CFS_C CFS_C_PORT_RESET;
MACRO_CFS_C CFS_C_PORT_SUSPEND;
MACRO_CFS_DIRCACHE CFS_DIRCACHE_COST;
MACRO_CFS_DIRCACHE CFS_DIRCACHE_ENABLE;
MACRO_CFS_DIRCACHE CFS_DIRCACHE_INVAL;
MACRO_CFS_WRITE CFS_DISCONNECTABLE;
cfs_dlog_op CFS_DLOG_CREATE;
cfs_dlog_op CFS_DLOG_LINK;
cfs_dlog_op CFS_DLOG_MAPFID;
cfs_dlog_op CFS_DLOG_MKDIR;
cfs_dlog_op CFS_DLOG_MODIFIED;
cfs_dlog_op CFS_DLOG_REMOVE;
cfs_dlog_op CFS_DLOG_RENAME;
cfs_dlog_op CFS_DLOG_RMDIR;
cfs_dlog_op CFS_DLOG_SETATTR;
cfs_dlog_op CFS_DLOG_SETSECATTR;
cfs_dlog_op CFS_DLOG_SYMLINK;
cfs_dlog_op CFS_DLOG_TRAILER;
cfs_dlog_val CFS_DLOG_VAL_COMMITTED;
cfs_dlog_val CFS_DLOG_VAL_CRASH;
cfs_dlog_val CFS_DLOG_VAL_ERROR;
cfs_dlog_val CFS_DLOG_VAL_PROCESSED;
MACRO_CFS_DLOG CFS_DLOG_VERSION;
MACRO_CFS CFS_FG_ALLOC_ATTR;
MACRO_CFS CFS_FG_ALLOC_FILE;
MACRO_CFS CFS_FG_NOCACHE;
MACRO_CFS CFS_FG_READ;
MACRO_CFS CFS_FG_RL;
MACRO_CFS CFS_FG_UPDATED;
MACRO_CFS CFS_FG_WRITE;
MACRO_CFS CFS_FRONTFILE_NAME_SIZE;
MACRO_CFS_DLOG CFS_FS_CONNECTED;
MACRO_CFS CFS_FS_CONST_CODCONST;
MACRO_CFS CFS_FS_CONST_NOCONST;
MACRO_CFS CFS_FS_CONST_STRICT;
MACRO_CFS CFS_FS_DIRTYINFO;
MACRO_CFS_DLOG CFS_FS_DISCONNECTED;
MACRO_CFS CFS_FS_FGP_BUCKET_SIZE;
MACRO_CFS CFS_FS_HASHPRINT;
MACRO_CFS CFS_FS_MAXIDLE;
MACRO_CFS CFS_FS_MOUNTED;
MACRO_CFS CFS_FS_READ;
MACRO_CFS_DLOG CFS_FS_RECONNECTING;
MACRO_CFS CFS_FS_ROOTFS;
MACRO_CFS CFS_FS_WRITE;
cachefs_cmd CFS_IDLE;
cachefs_cmd CFS_INVALID;
MACRO_CFS_WRITE CFS_LLOCK;
MACRO_CFS CFS_MAXFREECNODES;
MACRO_CFS_MAX CFS_MAX_THREADS;
MACRO_CFS_WRITE CFS_NOACL;
MACRO_CFS_WRITE CFS_NOCONST_MODE;
MACRO_CFS_WRITE CFS_NOFILL;
MACRO_CFS_WRITE CFS_NONSHARED;
cachefs_cmd CFS_NOOP;
cachefs_cmd CFS_POPULATE;
MACRO_CFS_C CFS_PORT_CONNECTION;
MACRO_CFS_C CFS_PORT_ENABLE;
MACRO_CFS_C CFS_PORT_LOW_SPEED;
MACRO_CFS_C CFS_PORT_OVER_CURRENT;
MACRO_CFS_C CFS_PORT_POWER;
MACRO_CFS_C CFS_PORT_RESET;
MACRO_CFS_C CFS_PORT_SUSPEND;
cachefs_cmd CFS_PUTPAGE;
MACRO_CFS_WRITE CFS_SLIDE;
MACRO_CFS_WRITE CFS_SOFT;
MACRO_CFS_WRITE CFS_WRITE_AROUND;
MACRO_CFT CFT_SPEC;
MACRO_CFT CFT_UFS;
MACRO_CG6 CG6_ADDR_ALT;
MACRO_CG6 CG6_ADDR_CMAP;
MACRO_CG6 CG6_ADDR_COLOR;
MACRO_CG6 CG6_ADDR_DHC;
MACRO_CG6 CG6_ADDR_ENABLE;
MACRO_CG6 CG6_ADDR_FBC;
MACRO_CG6 CG6_ADDR_FBCTEC;
MACRO_CG6 CG6_ADDR_FHC;
MACRO_CG6 CG6_ADDR_FHCTHC;
MACRO_CG6 CG6_ADDR_OVERLAY;
MACRO_CG6 CG6_ADDR_P4REG;
MACRO_CG6 CG6_ADDR_ROM_P4;
MACRO_CG6 CG6_ADDR_ROM_SBUS;
MACRO_CG6 CG6_ADDR_TEC;
MACRO_CG6 CG6_ADDR_THC;
MACRO_CG6 CG6_ALT_SZ;
MACRO_CG6 CG6_CMAP_ENTRIES;
MACRO_CG6 CG6_CMAP_SZ;
MACRO_CG6 CG6_DHC_SZ;
MACRO_CG6 CG6_FBCTEC_SZ;
MACRO_CG6 CG6_FB_SZ;
MACRO_CG6 CG6_FHCTHC_SZ;
MACRO_CG6 CG6_P4BASE;
MACRO_CG6 CG6_ROM_SZ;
MACRO_CG6 CG6_TEC_POFF;
MACRO_CG6 CG6_THC_POFF;
MACRO_CG6 CG6_VADDR_ALT;
MACRO_CG6 CG6_VADDR_CMAP;
MACRO_CG6 CG6_VADDR_COLOR;
MACRO_CG6 CG6_VADDR_DHC;
MACRO_CG6 CG6_VADDR_FBC;
MACRO_CG6 CG6_VADDR_FBCTEC;
MACRO_CG6 CG6_VADDR_FHC;
MACRO_CG6 CG6_VADDR_FHCTHC;
MACRO_CG6 CG6_VADDR_ROM;
MACRO_CG6 CG6_VADDR_TEC;
MACRO_CG6 CG6_VADDR_THC;
MACRO_CG6 CG6_VADDR_UART;
MACRO_CG6 CG6_VADDR_VRT;
MACRO_CG6 CG6_VBASE;
MACRO_CG CG_MAGIC;
MACRO_CHAN CHAN_CTL;
MACRO_CHAP CHAP_MAX_NAME;
MACRO_CHAP CHAP_MAX_PASSWD;
MACRO_COLL CHARCLASS_NAME_MAX;
MACRO_CHAR_8 CHAR_5;
MACRO_CHAR_8 CHAR_6;
MACRO_CHAR_8 CHAR_7;
MACRO_CHAR_8 CHAR_8;
MACRO_CHAR CHAR_BIT;
MACRO_CHAR_MIN CHAR_MAX;
MACRO_CHAR_MIN CHAR_MIN;
MACRO_CHDR CHDR_OFFSET;
MACRO_CHECKSUM CHECKSUM;
MACRO_CHECK_CYCLE CHECK_CYCLE;
MACRO_LINK CHILD_LINK;
MACRO_ATEXIT CHILD_MAX;
MACRO_CHRSZ CHRSZ;
MACRO_CHRTYPE CHRTYPE;
MACRO_CIBAUD CIBAUD;
MACRO_CIBAUD CIBAUDEXT;
MACRO_CINTR CINTR;
MACRO_CIO CIO_PUTPAGES;
MACRO_CISP CISP_CIS_CONV_DEVSIZE;
MACRO_CISP CISP_CIS_CONV_DEVSPEED;
MACRO_CISP CISP_CIS_GET_LTUPLE;
MACRO_CISP CISP_CIS_LIST_CREATE;
MACRO_CISP CISP_CIS_LIST_DESTROY;
MACRO_CISP CISP_CIS_PARSE_TUPLE;
MACRO_CISP CISP_CIS_SETUP;
MACRO_CISTPLF CISTPLF_AM_SPACE;
MACRO_CISTPLF CISTPLF_CM_SPACE;
MACRO_CISTPLF CISTPLF_COPYOK;
MACRO_CISTPLF CISTPLF_FROM_AM;
MACRO_CISTPLF CISTPLF_FROM_CM;
MACRO_CISTPLF CISTPLF_FROM_MASK;
MACRO_CISTPLF CISTPLF_GLOBAL_CIS;
MACRO_CISTPLF CISTPLF_IGNORE_TUPLE;
MACRO_CISTPLF CISTPLF_LINK_INVALID;
MACRO_CISTPLF CISTPLF_LM_SPACE;
MACRO_CISTPLF CISTPLF_MEM_ERR;
MACRO_CISTPLF CISTPLF_MF_CIS;
MACRO_CISTPLF CISTPLF_NOERROR;
MACRO_CISTPLF CISTPLF_PARAMS_INVALID;
MACRO_CISTPLF CISTPLF_REGS;
MACRO_CISTPLF CISTPLF_SPACE_MASK;
MACRO_CISTPLF CISTPLF_UNKNOWN;
MACRO_CISTPLF CISTPLF_VALID;
MACRO_CISTPLF CISTPLF_VENDOR_SPECIFIC;
MACRO_CISTPL CISTPL_ALTSTR;
MACRO_CISTPL CISTPL_BAR;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_BAR_1;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_BAR_2;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_BAR_3;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_BAR_4;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_BAR_5;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_BAR_6;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_BAR_7;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_EXP_ROM;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_ASI_MASK;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_AS_IO;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_AS_MEM;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_BELOW_1MB;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_PREFETCH;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_PREFETCH_CACHE;
MACRO_CISTPL_LONGLINK_MFC CISTPL_BAR_PREFETCH_CACHE_MASK;
MACRO_CISTPL CISTPL_BATTERY;
MACRO_CISTPL CISTPL_BYTEORDER;
MACRO_CISTPL CISTPL_CFTABLE_ENTRY;
MACRO_CISTPL CISTPL_CFTABLE_ENTRY_CB;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_ENTRY_MAX_IO_RANGES;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_ENTRY_MAX_MEM_WINDOWS;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_AVGI;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_EXISTS;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_MAXV;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_MINV;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_MUL10;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_NC;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_NCM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_NC_SLEEP;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_NC_SLEEPM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_NOMV;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_PDOWNI;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_PEAKI;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_RFU;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_STATICI;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_ZERO;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_PD_ZEROM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_CFGENTRYM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_DEFAULT;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_DEFAULTM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IO;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IOM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IO_ALM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IO_BUS;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IO_BUS16;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IO_BUS8;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IO_RANGE;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IO_RANGEM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IRQ;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IRQM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_IRQ_MASKM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM1;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM1M;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM2;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM2M;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM3;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM3M;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEMM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM_HOST;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM_HOSTM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MEM_PGSIZE;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MISC;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MISCM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_MISC_MAX;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWR;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWRM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWR_VCC;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWR_VCCM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWR_VPP1;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWR_VPP1M;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWR_VPP2;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_PWR_VPP2M;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_STCE_EV;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_STCE_PD;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TD;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TDM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TD_RDY;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TD_RDYM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TD_RSVD;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TD_RSVDM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TD_WAIT;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_FS_TD_WAITM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IFM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_BVD;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_CUSTOM_0;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_CUSTOM_1;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_CUSTOM_2;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_CUSTOM_3;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_IO_MEM;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_MASK;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_MEMORY;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_MWAIT;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RDY;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_2;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_3;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_8;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_9;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_a;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_b;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_c;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_d;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_e;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_RSVD_f;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_IF_WP;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_AUDIO;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_DMA_16;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_DMA_8;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_DRQ_INP;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_DRQ_IOIS;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_DRQ_MASK;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_DRQ_SPK;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_MTC_MASK;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_PWRDOWN;
MACRO_CISTPL_CFTABLE CISTPL_CFTABLE_TPCE_MI_READONLY;
MACRO_CISTPL CISTPL_CHECKSUM;
MACRO_CISTPL CISTPL_CONFIG;
MACRO_CISTPL CISTPL_CONFIG_CB;
MACRO_CISTPL_EXT CISTPL_CONFIG_MAX_CONFIG_REGS;
MACRO_CISTPL CISTPL_DATE;
MACRO_CISTPL CISTPL_DEVICE;
MACRO_CISTPL CISTPL_DEVICEGEO;
MACRO_CISTPL CISTPL_DEVICEGEO_A;
MACRO_CISTPL_LONGLINK_MFC CISTPL_DEVICEGEO_MAX_PARTITIONS;
MACRO_CISTPL CISTPL_DEVICE_A;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_DRAM;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_EEPROM;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_EPROM;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_EXTEND;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_FLASH;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_FUNCSPEC;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_NULL;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_OTPROM;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_ROM;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_RSVD_8;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_RSVD_9;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_RSVD_a;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_RSVD_b;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_RSVD_c;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_RSVD_f;
MACRO_CISTPL_EXT CISTPL_DEVICE_DTYPE_SRAM;
MACRO_CISTPL_EXT CISTPL_DEVICE_MAX_DEVICES;
MACRO_CISTPL CISTPL_DEVICE_OA;
MACRO_CISTPL CISTPL_DEVICE_OC;
MACRO_CISTPL_EXT CISTPL_DEVICE_OC_MWAIT;
MACRO_CISTPL_EXT CISTPL_DEVICE_OC_Vcc33;
MACRO_CISTPL_EXT CISTPL_DEVICE_OC_Vcc5;
MACRO_CISTPL_EXT CISTPL_DEVICE_OC_VccXX;
MACRO_CISTPL_EXT CISTPL_DEVICE_OC_VccYY;
MACRO_CISTPL_EXT CISTPL_DEVICE_OC_Vcc_MASK;
MACRO_CISTPL_EXT CISTPL_DEVICE_SPEED_SIZE_IGNORE;
MACRO_CISTPL_EXT CISTPL_DEVICE_WPS;
MACRO_CISTPL_EXT CISTPL_DEVSPEED_EXT;
MACRO_CISTPL_EXT CISTPL_DEVSPEED_MAX_EXP;
MACRO_CISTPL_EXT CISTPL_DEVSPEED_MAX_MAN;
MACRO_CISTPL_EXT CISTPL_DEVSPEED_MAX_TBL;
MACRO_CISTPL_EXT CISTPL_DEVSPEED_TABLE;
MACRO_CISTPL CISTPL_END;
MACRO_CISTPL_EXT CISTPL_EXT_BIT;
MACRO_CISTPL CISTPL_FORMAT;
MACRO_CISTPL CISTPL_FORMAT_A;
MACRO_CISTPL CISTPL_FUNCE;
MACRO_CISTPL CISTPL_FUNCID;
MACRO_CISTPL CISTPL_GEOMETRY;
MACRO_CISTPL CISTPL_JEDEC_A;
MACRO_CISTPL CISTPL_JEDEC_C;
MACRO_CISTPL_EXT CISTPL_JEDEC_MAX_IDENTIFIERS;
MACRO_CISTPL CISTPL_LINKTARGET;
MACRO_CISTPL CISTPL_LONGLINK_A;
MACRO_CISTPL_LONGLINK CISTPL_LONGLINK_AC_AM;
MACRO_CISTPL_LONGLINK CISTPL_LONGLINK_AC_CM;
MACRO_CISTPL CISTPL_LONGLINK_C;
MACRO_CISTPL CISTPL_LONGLINK_CB;
MACRO_CISTPL_LONGLINK_MFC CISTPL_LONGLINK_CB_CFG;
MACRO_CISTPL_LONGLINK_MFC CISTPL_LONGLINK_CB_MEM;
MACRO_CISTPL_LONGLINK_MFC CISTPL_LONGLINK_CB_ROM;
MACRO_CISTPL CISTPL_LONGLINK_MFC;
MACRO_CISTPL_LONGLINK_MFC CISTPL_LONGLINK_MFC_TAS_AM;
MACRO_CISTPL_LONGLINK_MFC CISTPL_LONGLINK_MFC_TAS_CM;
MACRO_CISTPL CISTPL_MANFID;
MACRO_CISTPL CISTPL_NO_LINK;
MACRO_CISTPL CISTPL_NULL;
MACRO_CISTPL CISTPL_ORG;
MACRO_CISTPL CISTPL_SPCL;
MACRO_CISTPL_LONGLINK_MFC CISTPL_SPCL_SEQ_END;
MACRO_CISTPL CISTPL_SWIL;
MACRO_CISTPL CISTPL_VENDSPEC_END;
MACRO_CISTPL CISTPL_VENDSPEC_START;
MACRO_CISTPL CISTPL_VEND_SPEC_80;
MACRO_CISTPL CISTPL_VEND_SPEC_81;
MACRO_CISTPL CISTPL_VEND_SPEC_82;
MACRO_CISTPL CISTPL_VEND_SPEC_83;
MACRO_CISTPL CISTPL_VEND_SPEC_84;
MACRO_CISTPL CISTPL_VEND_SPEC_85;
MACRO_CISTPL CISTPL_VEND_SPEC_86;
MACRO_CISTPL CISTPL_VEND_SPEC_87;
MACRO_CISTPL CISTPL_VEND_SPEC_88;
MACRO_CISTPL CISTPL_VEND_SPEC_89;
MACRO_CISTPL CISTPL_VEND_SPEC_8a;
MACRO_CISTPL CISTPL_VEND_SPEC_8b;
MACRO_CISTPL CISTPL_VEND_SPEC_8c;
MACRO_CISTPL CISTPL_VEND_SPEC_8d;
MACRO_CISTPL CISTPL_VEND_SPEC_8e;
MACRO_CISTPL CISTPL_VEND_SPEC_8f;
MACRO_CISTPL CISTPL_VERS_1;
MACRO_CISTPL_EXT CISTPL_VERS_1_MAX_PROD_STRINGS;
MACRO_CISTPL CISTPL_VERS_2;
MACRO_CIS_GET CIS_GET_LTUPLE_IGNORE;
MACRO_CIS_GET CIS_GET_LTUPLE_OPMASK;
MACRO_CIS CIS_MAX_FUNCTIONS;
MACRO_CIS CIS_MAX_TUPLE_DATA_LEN;
MACRO_CIS CIS_MAX_TUPLE_NAME_LEN;
MACRO_CKUNNUM CKALPHA;
MACRO_CKILL CKILL;
MACRO_CKUNNUM CKONEFLAG;
MACRO_CKUNNUM CKUNNUM;
MACRO_CK CK_CHECKSUM;
MACRO_CK CK_MAKESUM;
MACRO_ERROR CLASS_ERROR;
MACRO_SENSE CLASS_EXTENDED_SENSE;
MACRO_CLASS CLASS_NOT_SUPPORTED;
MACRO_OBJ CLASS_OBJ;
MACRO_CLCR CLCR_GET_LOWVERS;
MACRO_CLCR CLCR_SET_LOWVERS;
MACRO_CLDPEND CLDCONT;
MACRO_CLDPEND CLDPEND;
MACRO_CLD CLD_CONTINUED;
MACRO_CLD CLD_DUMPED;
MACRO_CLD CLD_EXITED;
MACRO_CLD CLD_KILLED;
MACRO_CLD CLD_STOPPED;
MACRO_CLD CLD_TRAPPED;
MACRO_CLE CLE;
MACRO_CLEAN CLEAN_NOW;
MACRO_FEATURE CLEAR_HUB_FEATURE;
MACRO_FEATURE CLEAR_PORT_FEATURE;
MACRO_BUSY_0 CLESC;
MACRO_CLGET CLGET_FD;
MACRO_PROG CLGET_PROG;
MACRO_CLGET_RETRY CLGET_RETRY_TIMEOUT;
MACRO_CLGET CLGET_SERVER_ADDR;
MACRO_CLGET CLGET_SVC_ADDR;
MACRO_TIMEOUT CLGET_TIMEOUT;
MACRO_VERS CLGET_VERS;
MACRO_XID CLGET_XID;
MACRO_CLIENT CLIENT_OWNS_IMAGE;
MACRO_CLN CLN;
MACRO_CLN CLND;
MACRO_CLNEXT CLNEXT;
MACRO_CS8 CLOCAL;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CLOCK_10MHZ CLOCK_10MHZ;
MACRO_CLOCK_10MHZ CLOCK_15MHZ;
MACRO_CLOCK_10MHZ CLOCK_20MHZ;
MACRO_CLOCK_10MHZ CLOCK_25MHZ;
MACRO_CLOCK_10MHZ CLOCK_30MHZ;
MACRO_CLOCK_10MHZ CLOCK_35MHZ;
MACRO_CLOCK_10MHZ CLOCK_40MHZ;
MACRO_CLOCK_HIGHRES CLOCK_HIGHRES;
MACRO_LEVEL CLOCK_LEVEL;
MACRO_CLOCK_10MHZ CLOCK_MASK;
MACRO_CLOCK CLOCK_PROF;
MACRO_CLOCK_HIGHRES CLOCK_REALTIME;
MACRO_CLOCK CLOCK_VIRTUAL;
MACRO_MODOPEN CLONEOPEN;
MACRO_CLONE CLONE_DEV;
MACRO_AUTOPUSH CLR_AUTOPUSH;
MACRO_CLSET CLSET_FD_CLOSE;
MACRO_CLSET CLSET_FD_NCLOSE;
MACRO_CLSET_SVC CLSET_POP_TIMOD;
MACRO_PROG CLSET_PROG;
MACRO_CLSET_SVC CLSET_PUSH_TIMOD;
MACRO_CLSET_SVC CLSET_RETRY_TIMEOUT;
MACRO_CLSET_SVC CLSET_SVC_ADDR;
MACRO_TIMEOUT CLSET_TIMEOUT;
MACRO_VERS CLSET_VERS;
MACRO_XID CLSET_XID;
MACRO_CLSSIZ CLSSIZ;
MACRO_CLUSTER CLUSTER_BOOTED;
MACRO_CLUSTER CLUSTER_CONFIGURED;
MACRO_CL_INITIALIZE CL_CONFIG;
MACRO_CL_NODEID CL_GDEV_PREFIX;
MACRO_CL_INITIALIZE CL_GET_BOOTFLAG;
MACRO_CL_NODEID CL_HIGHEST_NODEID;
MACRO_CL_INITIALIZE CL_INITIALIZE;
MACRO_CL_NODEID CL_NODEID;
MACRO_CL CL_TCPI_V1;
MACRO_CM CM;
MACRO_CMASK CMASK;
MACRO_CMD CMD_ABORTED;
MACRO_CMD CMD_ABORT_FAIL;
MACRO_CMD CMD_BADMSG;
MACRO_CMD CMD_BDR_FAIL;
MACRO_CMD_NOP CMD_CLR_ATN;
MACRO_CMD CMD_CMD_OVR;
MACRO_CMD CMD_CMPLT;
MACRO_CMD_NOP CMD_COMP_SEQ;
MACRO_CMD CMD_DATA_OVR;
MACRO_CMD_NOP CMD_DISCONNECT;
MACRO_CMD_NOP CMD_DIS_RESEL;
MACRO_CMD_NOP CMD_DMA;
MACRO_CMD CMD_DMA_DERR;
MACRO_CMD_NOP CMD_EN_RESEL;
MACRO_CMD_NOP CMD_FLUSH;
MACRO_CMD CMD_IDE_FAIL;
MACRO_CMD CMD_ID_FAIL;
MACRO_CMD CMD_INCOMPLETE;
MACRO_CMD_NOP CMD_MSG_ACPT;
MACRO_CMD CMD_NOMSGOUT;
MACRO_CMD_NOP CMD_NOP;
MACRO_CMD CMD_NOP_FAIL;
MACRO_CMD CMD_PER_FAIL;
MACRO_CMD CMD_REJECT_FAIL;
MACRO_CMD_NOP CMD_RESEL_SEQ;
MACRO_CMD CMD_RESET;
MACRO_CMD_NOP CMD_RESET_ESP;
MACRO_CMD_RESET CMD_RESET_FAS;
MACRO_CMD_NOP CMD_RESET_SCSI;
MACRO_CMD_NOP CMD_SEL_ATN;
MACRO_CMD_NOP CMD_SEL_ATN3;
MACRO_CMD_NOP CMD_SEL_NOATN;
MACRO_CMD_NOP CMD_SEL_STOP;
MACRO_CMD_NOP CMD_SET_ATN;
MACRO_CMD CMD_STS_OVR;
MACRO_CMD CMD_TAG_REJECT;
MACRO_CMD CMD_TERMINATED;
MACRO_CMD CMD_TIMEOUT;
MACRO_CMD CMD_TRAN_ERR;
MACRO_CMD_NOP CMD_TRAN_INFO;
MACRO_CMD_NOP CMD_TRAN_PAD;
MACRO_CMD CMD_UNX_BUS_FREE;
MACRO_CMD CMD_XID_FAIL;
MACRO_CMN CMN_ASC;
MACRO_CMN CMN_BBS;
MACRO_CMN CMN_BIN;
MACRO_CMN CMN_CRC;
MACRO_CMS CMS_LEN;
MACRO_CNSWTCH CNSWTCH;
MACRO_CNUL CNUL;
MACRO_CN_NEED CN_ALLOC_PENDING;
MACRO_CN_NEED CN_ASYNC_POPULATE;
MACRO_CN_NEED CN_ASYNC_POP_WORKING;
MACRO_CN_NEED CN_CMODINPROG;
MACRO_CN CN_DESTROY;
MACRO_CN CN_IDLE;
MACRO_CN_NEED CN_MAPWRITE;
MACRO_CN_NEED CN_MODIFIED;
MACRO_CN CN_NEEDOPEN;
MACRO_CN_NEED CN_NEED_FRONT_SYNC;
MACRO_CN CN_NOCACHE;
MACRO_CN_NEED CN_PENDRM;
MACRO_CN_NEED CN_POPULATION_PENDING;
MACRO_CN CN_ROOT;
MACRO_CN_NEED CN_STALE;
MACRO_CN CN_UPDATED;
MACRO_CODESET CODESET;
MACRO_COLL COLL_WEIGHTS_MAX;
MACRO_COLOR COLOR_BLACK;
MACRO_COLOR COLOR_BLUE;
MACRO_COLOR COLOR_CYAN;
MACRO_COLOR COLOR_GREEN;
MACRO_COLOR COLOR_MAGENTA;
MACRO_COLOR COLOR_RED;
MACRO_COLOR COLOR_WHITE;
MACRO_COLOR COLOR_YELLOW;
MACRO_COMMAND COMMAND_DONE;
MACRO_COMMAND_DONE_EACCES COMMAND_DONE_EACCES;
MACRO_COMMAND COMMAND_DONE_ERROR;
MACRO_COMMAND_DONE COMMAND_DONE_ERROR_RECOVERED;
MACRO_PRELIM COMPLETE;
MACRO_COMPOSE COMPOSE;
MACRO_NORMAL COMPOSE1;
MACRO_COMPOSE2 COMPOSE2;
MACRO_MAGIC COND_MAGIC;
MACRO_CONFIGURE CONFIGURE;
MACRO_FAIL CONFIG_FAIL;
MACRO_CONN CONN_ECHO;
MACRO_CONN CONN_HDX;
MACRO_CONN CONN_IBM;
MACRO_CONN CONN_LPBK;
MACRO_CONN CONN_MPT;
MACRO_CONN CONN_NRZI;
MACRO_CONN CONN_SIGNAL;
MACRO_MODOPEN CONSOPEN;
MACRO_CONTEXT CONTEXT_LTR;
MACRO_CONTEXT CONTEXT_RTL;
MACRO_CONTINUE CONTINUE;
MACRO_ORDINARY CONTROL;
MACRO_CONTTYPE CONTTYPE;
MACRO_COPY COPY_PROTECTED;
MACRO_COR1 COR1;
MACRO_CHANGED COR1_CHANGED;
MACRO_COR2 COR2;
MACRO_CHANGED COR2_CHANGED;
MACRO_COR2 COR3;
MACRO_CHANGED COR3_CHANGED;
MACRO_SSYS COREDUMP;
MACRO_CORE CORE_MAGIC;
MACRO_CORE CORE_NAMELEN;
MACRO_CORRUPTED CORRUPTED;
MACRO_CHANGED COR_CHANGED;
MACRO_CPCIO CPCIO_BIND_EVENT;
MACRO_CPCIO CPCIO_RELE;
MACRO_CPCIO CPCIO_TAKE_SAMPLE;
MACRO_CPC_ULTRA CPC_BIND_EMT_OVF;
MACRO_CPC_BIND CPC_BIND_EVENT;
MACRO_CPC_ULTRA CPC_BIND_LWP_INHERIT;
MACRO_CPC_BIND CPC_INVALIDATE;
MACRO_CPC CPC_OVERFLOW;
MACRO_CPC_ULTRA CPC_PENTIUM;
MACRO_CPC_ULTRA CPC_PENTIUM_MMX;
MACRO_CPC_ULTRA CPC_PENTIUM_PRO;
MACRO_CPC_ULTRA CPC_PENTIUM_PRO_MMX;
MACRO_CPC_BIND CPC_RELE;
MACRO_CPC_BIND CPC_SYS_EVENTS;
MACRO_CPC_BIND CPC_TAKE_SAMPLE;
MACRO_CPC_ULTRA CPC_ULTRA1;
MACRO_CPC_ULTRA CPC_ULTRA2;
MACRO_CPC_ULTRA CPC_ULTRA2_PCR_PIC0_MASK;
MACRO_CPC_ULTRA CPC_ULTRA2_PCR_PIC1_MASK;
MACRO_CPC_ULTRA CPC_ULTRA3;
MACRO_CPC_ULTRA CPC_ULTRA3_PCR_PIC0_MASK;
MACRO_CPC_ULTRA CPC_ULTRA3_PCR_PIC1_MASK;
MACRO_CPC_ULTRA CPC_ULTRA_PCR_PIC0_SHIFT;
MACRO_CPC_ULTRA CPC_ULTRA_PCR_PIC1_SHIFT;
MACRO_CPC_ULTRA CPC_ULTRA_PCR_PRIVPIC;
MACRO_CPC_ULTRA CPC_ULTRA_PCR_SYS;
MACRO_CPC_ULTRA CPC_ULTRA_PCR_USR;
MACRO_CPC_BIND CPC_USR_EVENTS;
MACRO_CPC_ULTRA CPC_VER_CURRENT;
MACRO_CPC_ULTRA CPC_VER_NONE;
MACRO_CPRES CPRES;
MACRO_CPR_VERSION CPR_CONFIG_MAGIC;
MACRO_CPR_VERSION CPR_DEFAULT_MAGIC;
MACRO_CPR CPR_KTHREAD_TIMEOUT_SEC;
MACRO_CPR_VERSION CPR_PROP_BOOL_LEN;
MACRO_CPR_VERSION CPR_VERSION;
MACRO_CPU_RUNNING CPU_CPR_ONLINE;
MACRO_CPU_RUNNING CPU_CURRENT;
MACRO_CPU_RUNNING CPU_ENABLE;
MACRO_CPU_RUNNING CPU_EXISTS;
MACRO_CPU CPU_IDLE;
MACRO_CPU CPU_KERNEL;
MACRO_CPU_RUNNING CPU_OFFLINE;
MACRO_CPU_RUNNING CPU_POWEROFF;
MACRO_CPU_RUNNING CPU_QUIESCED;
MACRO_CPU_RUNNING CPU_READY;
MACRO_CPU_RUNNING CPU_RUNNING;
MACRO_CPU CPU_STATES;
MACRO_CPU CPU_USER;
MACRO_CPU CPU_WAIT;
MACRO_CP CP_BIT;
MACRO_CINTR CQUIT;
MACRO_CR0 CR0;
create CRCREAT;
MACRO_ANYP CRDELAY;
MACRO_NL0 CRDLY;
MACRO_CS8 CREAD;
MACRO_CRI CRI;
create CRMKDIR;
create CRMKNOD;
MACRO_LCASE CRMOD;
MACRO_CRNCYSTR CRNCYSTR;
MACRO_CRPRNT CRPRNT;
MACRO_CRTN CRTN;
MACRO_CS8 CRTSCTS;
MACRO_CS8 CRTSXOFF;
MACRO_CRTS CRTS_IFLOW;
MACRO_CS CS;
MACRO_CS4231 CS4231_BSIZE;
MACRO_CS4231 CS4231_DEFAULT_BAL;
MACRO_CS4231 CS4231_DEFAULT_CH;
MACRO_CS4231 CS4231_DEFAULT_ENC;
MACRO_CS4231 CS4231_DEFAULT_MONITOR_GAIN;
MACRO_CS4231 CS4231_DEFAULT_PGAIN;
MACRO_CS4231 CS4231_DEFAULT_PREC;
MACRO_CS4231 CS4231_DEFAULT_RGAIN;
MACRO_CS4231 CS4231_DEFAULT_SR;
MACRO_CS4231 CS4231_IDNUM;
MACRO_CS4231 CS4231_MAXPACKET;
MACRO_CS4231 CS4231_MINPACKET;
MACRO_CS4231 CS4231_SAMPR11025;
MACRO_CS4231 CS4231_SAMPR16000;
MACRO_CS4231 CS4231_SAMPR18900;
MACRO_CS4231 CS4231_SAMPR22050;
MACRO_CS4231 CS4231_SAMPR27420;
MACRO_CS4231 CS4231_SAMPR32000;
MACRO_CS4231 CS4231_SAMPR33075;
MACRO_CS4231 CS4231_SAMPR37800;
MACRO_CS4231 CS4231_SAMPR44100;
MACRO_CS4231 CS4231_SAMPR48000;
MACRO_CS4231 CS4231_SAMPR5510;
MACRO_CS4231 CS4231_SAMPR6620;
MACRO_CS4231 CS4231_SAMPR8000;
MACRO_CS4231 CS4231_SAMPR9600;
MACRO_CS4231 CS4231_SUP_INST;
MACRO_CS5 CS5;
MACRO_CS5 CS6;
MACRO_CS5 CS7;
MACRO_CS8 CS8;
MACRO_CSDATA CSDATA_GET;
MACRO_CSDATA CSDATA_SET;
MACRO_CBAUD CSIZE;
MACRO_CSI CSI_IOC;
MACRO_CSMAX CSMAX;
MACRO_CEOL2 CSTART;
MACRO_CSTOP CSTOP;
MACRO_CS8 CSTOPB;
MACRO_CNSWTCH CSUSP;
MACRO_CSWTCH CSWTCH;
MACRO_CSW CSW_LEN;
MACRO_CSW CSW_SIGNATURE;
MACRO_CSW CSW_STATUS_FAILED;
MACRO_CSW CSW_STATUS_GOOD;
MACRO_CSW CSW_STATUS_PHASE_ERROR;
MACRO_CS_DCD CS_CTS;
MACRO_CS_DCD CS_CTS_DOWN;
MACRO_CS_DCD CS_CTS_DROP;
MACRO_CS_DCD CS_CTS_TO;
MACRO_CS_DCD CS_CTS_UP;
MACRO_CS_DCD CS_DCD;
MACRO_CS_DCD CS_DCD_DOWN;
MACRO_CS_DCD CS_DCD_DROP;
MACRO_CS_DCD CS_DCD_UP;
MACRO_CS_TYPE0 CS_TYPE0;
MACRO_CS_TYPE0 CS_TYPE1;
MACRO_CS_TYPE0 CS_TYPE2;
MACRO_CS_TYPE0 CS_TYPE3;
MACRO_CS_TYPE0 CS_TYPE4;
MACRO_CS_TYPE0 CS_TYPE5;
MACRO_CS_TYPE0 CS_TYPE6;
MACRO_CS_TYPE0 CS_TYPE7;
MACRO_CS_TYPE0 CS_TYPE8;
MACRO_CTAB CTAB;
MACRO_CTLSMASK CTLSMASK;
MACRO_RIGHTCTRL CTRLMASK;
MACRO_CTRLQ CTRLQ;
MACRO_CTRLS CTRLS;
MACRO_CTRL CTRL_QMOD_RESTRICT;
MACRO_CTRL CTRL_QMOD_UNRESTRICT;
MACRO_RTSXOFF CTSXON;
MACRO_ON CTS_ON;
MACRO_CTYPE CTYPE_CCS;
MACRO_CTYPE CTYPE_CDROM;
MACRO_CTYPE CTYPE_MD21;
MACRO_CUP CUP;
MACRO_CURS CURS_BAD_MALLOC;
MACRO_CURS CURS_STUPID;
MACRO_CURS CURS_UNKNOWN;
MACRO_CUSAGE CUSAGE_ACTIVE;
MACRO_CUSAGE CUSAGE_NEED_ADJUST;
MACRO_CVID CVID;
$38ED0C2ADD2BD878794BFE6293F393A9 CV_DEFAULT;
$38ED0C2ADD2BD878794BFE6293F393A9 CV_DRIVER;
MACRO_CWERASE CWERASE;
MACRO_CYCLIC CYCLIC_NONE;
MACRO_CYF CYF_CPU_BOUND;
MACRO_CYF CYF_FREE;
MACRO_CYF CYF_PART_BOUND;
$8A69B4244D68C55526C7E67A1302CC04 CYS_EXPANDING;
$8A69B4244D68C55526C7E67A1302CC04 CYS_OFFLINE;
$8A69B4244D68C55526C7E67A1302CC04 CYS_ONLINE;
$8A69B4244D68C55526C7E67A1302CC04 CYS_REMOVING;
$8A69B4244D68C55526C7E67A1302CC04 CYS_SUSPENDED;
MACRO_CY_NTRACEREC CY_DEFAULT_PERCPU;
MACRO_CY CY_HIGH_LEVEL;
MACRO_CY CY_LEVELS;
MACRO_CY CY_LOCK_LEVEL;
MACRO_CY CY_LOW_LEVEL;
MACRO_CY_NTRACEREC CY_NCOVERAGE;
MACRO_CY_NTRACEREC CY_NTRACEREC;
MACRO_CY_NTRACEREC CY_PASSIVE_LEVEL;
MACRO_CY CY_SOFT_LEVELS;
MACRO_C_EFCN C_ALIAS;
MACRO_C_EFCN C_ARG;
MACRO_C_EFCN C_AUTO;
MACRO_C_BACK C_BACK_CHECK;
MACRO_C_EFCN C_BLOCK;
MACRO_C_NOCOMMIT C_COMMIT;
MACRO_C_SENDCHAR C_DEFUNCT;
MACRO_C_NOCOMMIT C_DELAYCOMMIT;
MACRO_C_SENDCHAR C_DELETE;
MACRO_C_EFCN C_EFCN;
MACRO_C_EFCN C_ENTAG;
MACRO_C_EFCN C_EOS;
MACRO_C_SENDCHAR C_EXIT;
MACRO_C_EFCN C_EXT;
MACRO_C_EFCN C_EXTDEF;
MACRO_C_EFCN C_FCN;
MACRO_C_EFCN C_FIELD;
MACRO_C_EFCN C_FILE;
MACRO_C_EFCN C_HIDDEN;
MACRO_C_HUB C_HUB_LOCAL_POWER_STATUS;
MACRO_C_HUB C_HUB_OVER_CURRENT;
MACRO_C C_IRGRP;
MACRO_C C_IROTH;
MACRO_C C_IRUSR;
MACRO_C C_ISBLK;
MACRO_C C_ISCHR;
MACRO_C C_ISCTG;
MACRO_C C_ISDIR;
MACRO_C C_ISFIFO;
MACRO_C C_ISGID;
MACRO_C C_ISLNK;
MACRO_C C_ISREG;
MACRO_C C_ISSOCK;
MACRO_C C_ISUID;
MACRO_C C_ISVTX;
MACRO_C C_IWGRP;
MACRO_C C_IWOTH;
MACRO_C C_IWUSR;
MACRO_C C_IXGRP;
MACRO_C C_IXOTH;
MACRO_C C_IXUSR;
MACRO_C_EFCN C_LABEL;
MACRO_C_EFCN C_LINE;
MACRO_C_BACK C_MAX_ALLOCINFO_SLOTS;
MACRO_C_MAX C_MAX_MOUNT_FSCDIRNAME;
MACRO_C_EFCN C_MOE;
MACRO_C_EFCN C_MOS;
MACRO_C_EFCN C_MOU;
MACRO_C_SENDCHAR C_NEW;
MACRO_C_NOCOMMIT C_NOCOMMIT;
MACRO_C_SENDCHAR C_NOFLOW;
MACRO_C_EFCN C_NULL;
MACRO_C_EFCN C_REG;
MACRO_C_EFCN C_REGPARM;
MACRO_C_SENDCHAR C_RESHAPE;
MACRO_C_RL C_RL_MAXENTS;
MACRO_C_SENDCHAR C_RUN;
MACRO_C_SENDCHAR C_SENDCHAR;
MACRO_C_SENDCHAR C_SENDNCHARS;
MACRO_C_EFCN C_SHADOW;
MACRO_C_EFCN C_STAT;
MACRO_C_EFCN C_STRTAG;
MACRO_C_EFCN C_TPDEF;
MACRO_C_EFCN C_ULABEL;
MACRO_C_SENDCHAR C_UNBLK;
MACRO_C_EFCN C_UNTAG;
MACRO_C_EFCN C_USTATIC;
MACRO_C_SENDCHAR C_YESFLOW;
MACRO_Orientation CheckMode;
MACRO_SetFunctionalAddr ClearFunctionalAddr;
MACRO_ClearGroupAddr ClearGroupAddr;
MACRO_ConfigMCast ConfigMCast;
MACRO_Orientation Context;
MACRO_DACF DACF_DBG_DEVI;
MACRO_DACF DACF_DBG_MSGS;
dacf_devspec DACF_DS_DEV_PATH;
dacf_devspec DACF_DS_DRV_MNAME;
dacf_devspec DACF_DS_ERROR;
dacf_devspec DACF_DS_MIN_NT;
MACRO_DACF DACF_ERR_MOD_NOTFOUND;
MACRO_DACF DACF_ERR_OPSET_NOTFOUND;
MACRO_DACF DACF_ERR_OP_FAILED;
MACRO_DACF DACF_ERR_OP_NOTFOUND;
MACRO_DACF DACF_FAILURE;
MACRO_DACF DACF_INFO_HASHSIZE;
MACRO_DACF DACF_MODREV_1;
MACRO_DACF DACF_MODULE_HASHSIZE;
MACRO_DACF DACF_NUM_DEVSPECS;
MACRO_DACF DACF_NUM_OPIDS;
$6C240A0F2C531038D6945D09C29C55E6 DACF_OPID_END;
$6C240A0F2C531038D6945D09C29C55E6 DACF_OPID_ERROR;
$6C240A0F2C531038D6945D09C29C55E6 DACF_OPID_POSTATTACH;
$6C240A0F2C531038D6945D09C29C55E6 DACF_OPID_PREDETACH;
MACRO_DACF DACF_PROC_INVOKE;
MACRO_DACF DACF_PROC_RELE;
MACRO_DACF DACF_RULE_HASHSIZE;
MACRO_DACF DACF_SUCCESS;
MACRO_DAC DAC_COMMAND_REG_2;
MACRO_DAC DAC_COMMAND_REG_3;
MACRO_DAC DAC_ID_REG;
MACRO_DAC DAC_PIXEL_MASK_REG;
MACRO_DAC DAC_PIXEL_TEST_REG;
MACRO_DAC DAC_SYNC_TEST_REG;
MACRO_DAC DAC_TEST_REG;
MACRO_DADKIO DADKIO_ERROR_INFO_LEN;
MACRO_DADKIO DADKIO_FLAG_RESERVED;
MACRO_DADKIO DADKIO_FLAG_SILENT;
MACRO_DADKIO DADKIO_RWCMD_READ;
MACRO_DADKIO DADKIO_RWCMD_WRITE;
MACRO_DADKIO DADKIO_STAT_BUS_ERROR;
MACRO_DADKIO DADKIO_STAT_HARDWARE_ERROR;
MACRO_DADKIO DADKIO_STAT_ILLEGAL_ADDRESS;
MACRO_DADKIO DADKIO_STAT_ILLEGAL_REQUEST;
MACRO_DADKIO DADKIO_STAT_MEDIUM_ERROR;
MACRO_DADKIO DADKIO_STAT_NOT_FORMATTED;
MACRO_DADKIO DADKIO_STAT_NOT_READY;
MACRO_DADKIO DADKIO_STAT_NOT_SUPPORTED;
MACRO_DADKIO DADKIO_STAT_NO_ERROR;
MACRO_DADKIO DADKIO_STAT_NO_RESOURCES;
MACRO_DADKIO DADKIO_STAT_PARITY;
MACRO_DADKIO DADKIO_STAT_RESERVED;
MACRO_DADKIO DADKIO_STAT_SOFT_ERROR;
MACRO_DADKIO DADKIO_STAT_TIMED_OUT;
MACRO_DADKIO DADKIO_STAT_WRITE_PROTECTED;
MACRO_DAD DAD_MODE_CACHE;
MACRO_DAD DAD_MODE_ERR_RECOV;
MACRO_DAD DAD_MODE_FLEXDISK;
MACRO_DAD DAD_MODE_FORMAT;
MACRO_DAD DAD_MODE_GEOMETRY;
MACRO_DAD DAD_MODE_MEDIA_TYPES;
MACRO_DAD DAD_MODE_NOTCHPART;
MACRO_DAD DAD_MODE_POWER_COND;
MACRO_DAD DAD_MODE_VRFY_ERR_RECOV;
MACRO_DAD DAD_MTYP_DFLT;
MACRO_DAD DAD_MTYP_FLXDS;
MACRO_DAD DAD_MTYP_FLXSS;
MACRO_DAD DAD_MTYP_FLX_3DSLD;
MACRO_DAD DAD_MTYP_FLX_5DSMD1;
MACRO_DAD DAD_MTYP_FLX_5DSMD2;
MACRO_DAD DAD_MTYP_FLX_5DSQD;
MACRO_DAD DAD_MTYP_FLX_5SSLD;
MACRO_DAD DAD_MTYP_FLX_8DSDD;
MACRO_DAD DAD_MTYP_FLX_8DSSD;
MACRO_DAD DAD_MTYP_FLX_8SSDD;
MACRO_DAD DAD_MTYP_FLX_8SSSD;
MACRO_DATA DATA;
stable_how DATA_SYNC;
MACRO_UNLOCK DATLOCK;
MACRO_DAT DAT_LARGE_READ_ERROR_THRESHOLD;
MACRO_DAT DAT_LARGE_WRITE_ERROR_THRESHOLD;
MACRO_DAT DAT_SMALL_READ_ERROR_THRESHOLD;
MACRO_DAT DAT_SMALL_WRITE_ERROR_THRESHOLD;
MACRO_DAY_0 DAY;
MACRO_DAYSHIFT DAYMASK;
MACRO_DAYSHIFT DAYSHIFT;
MACRO_DAYSPERLYEAR DAYSPERLYEAR;
MACRO_DAYSPERNYEAR DAYSPERNYEAR;
MACRO_DAYSPERWEEK DAYSPERWEEK;
MACRO_DAYS DAYS_PER_LYEAR;
MACRO_DAYS DAYS_PER_NYEAR;
MACRO_DAYS DAYS_PER_WEEK;
MACRO_DAY DAY_1;
MACRO_DAY DAY_2;
MACRO_DAY DAY_3;
MACRO_DAY DAY_4;
MACRO_DAY DAY_5;
MACRO_DAY DAY_6;
MACRO_DAY DAY_7;
MACRO_DA DA_FREENAME;
MACRO_PBLKSIZ DBLKSIZ;
MACRO_DBLK DBLK_REFMAX;
MACRO_DBLK DBLK_REFMIN;
MACRO_DBL DBL_DIG;
MACRO_DBL DBL_MANT_DIG;
MACRO_DBL DBL_MAX_10_EXP;
MACRO_DBL DBL_MAX_EXP;
MACRO_DBL DBL_MIN_10_EXP;
MACRO_DBL DBL_MIN_EXP;
MACRO_DBM DBM_INSERT;
MACRO_DBM DBM_REPLACE;
MACRO_DBRI DBRI_CDEC_1_5MHZ;
MACRO_DBRI DBRI_CDEC_2MHZ;
MACRO_DBRI DBRI_CDEC_DISABL_CLK;
MACRO_DBRI DBRI_CDM_CMSR;
MACRO_DBRI DBRI_CDM_CMSX;
MACRO_DBRI DBRI_CDM_ODD;
MACRO_DBRI DBRI_CDM_RCE;
MACRO_DBRI DBRI_CDM_REN;
MACRO_DBRI DBRI_CDM_RHI;
MACRO_DBRI DBRI_CDM_THI;
MACRO_DBRI DBRI_CDM_XCE;
MACRO_DBRI DBRI_CDM_XEN;
MACRO_DBRI DBRI_CHI_CHIL;
MACRO_DBRI DBRI_CHI_FD;
MACRO_DBRI DBRI_CHI_FE;
MACRO_DBRI DBRI_CHI_INT;
MACRO_DBRI DBRI_CHI_OD;
MACRO_DBRI DBRI_CMDI;
MACRO_DBRI DBRI_CMD_CDEC;
MACRO_DBRI DBRI_CMD_CDM;
MACRO_DBRI DBRI_CMD_CDP;
MACRO_DBRI DBRI_CMD_CHI;
MACRO_DBRI DBRI_CMD_DTS;
MACRO_DBRI DBRI_CMD_IIQ;
MACRO_DBRI DBRI_CMD_JMP;
MACRO_DBRI DBRI_CMD_JMP_LEN;
MACRO_DBRI DBRI_CMD_MASK;
MACRO_DBRI DBRI_CMD_NT;
MACRO_DBRI DBRI_CMD_PAUSE;
MACRO_DBRI DBRI_CMD_REX;
MACRO_DBRI DBRI_CMD_SDP;
MACRO_DBRI DBRI_CMD_SSP;
MACRO_DBRI DBRI_CMD_TE;
MACRO_DBRI DBRI_CMD_TEST;
MACRO_DBRI DBRI_CMD_WAIT;
MACRO_DBRI DBRI_DTS_ALTERNATE;
MACRO_DBRI DBRI_DTS_DI;
MACRO_DBRI DBRI_DTS_ID;
MACRO_DBRI DBRI_DTS_INDIRECT;
MACRO_DBRI DBRI_DTS_MONITOR;
MACRO_DBRI DBRI_DTS_SINGLE;
MACRO_DBRI DBRI_DTS_VI;
MACRO_DBRI DBRI_DTS_VO;
MACRO_DBRI DBRI_D_CLASS_1;
MACRO_DBRI DBRI_D_CLASS_2;
MACRO_DBRI DBRI_INTR_BURST_ERR;
MACRO_DBRI DBRI_INTR_BUS_GRANT_ERR;
MACRO_DBRI DBRI_INTR_LATE_ERR;
MACRO_DBRI DBRI_INTR_LIT_ENDIAN;
MACRO_DBRI DBRI_INTR_MRR_ERR;
MACRO_DBRI DBRI_INTR_REQ;
MACRO_DBRI DBRI_INT_BRDY;
MACRO_DBRI DBRI_INT_CHIL;
MACRO_DBRI DBRI_INT_CHI_CHAN;
MACRO_DBRI DBRI_INT_CMDI;
MACRO_DBRI DBRI_INT_COLL;
MACRO_DBRI DBRI_INT_DBYT;
MACRO_DBRI DBRI_INT_EOL;
MACRO_DBRI DBRI_INT_FXDT;
MACRO_DBRI DBRI_INT_IBEG;
MACRO_DBRI DBRI_INT_IBITS;
MACRO_DBRI DBRI_INT_IEND;
MACRO_DBRI DBRI_INT_LINT;
MACRO_DBRI DBRI_INT_MAX_CHAN;
MACRO_DBRI DBRI_INT_MINT;
MACRO_DBRI DBRI_INT_NT_CHAN;
MACRO_DBRI DBRI_INT_OTHER_CHAN;
MACRO_DBRI DBRI_INT_RBYT;
MACRO_DBRI DBRI_INT_REPORT_CHAN;
MACRO_DBRI DBRI_INT_SBRI;
MACRO_DBRI DBRI_INT_TE_CHAN;
MACRO_DBRI DBRI_INT_UNDR;
MACRO_DBRI DBRI_INT_XCMP;
MACRO_DBRI DBRI_MAX_DMASIZE;
MACRO_DBRI DBRI_MAX_QWORDS;
MACRO_DBRI DBRI_NPIPES;
MACRO_DBRI DBRI_NTE_ABV;
MACRO_DBRI DBRI_NTE_ACT;
MACRO_DBRI DBRI_NTE_EZ;
MACRO_DBRI DBRI_NTE_F;
MACRO_DBRI DBRI_NTE_FACT;
MACRO_DBRI DBRI_NTE_IFA;
MACRO_DBRI DBRI_NTE_IRM_SBRI;
MACRO_DBRI DBRI_NTE_IRM_STATUS;
MACRO_DBRI DBRI_NTE_ISNT;
MACRO_DBRI DBRI_NTE_LLB_B1;
MACRO_DBRI DBRI_NTE_LLB_B2;
MACRO_DBRI DBRI_NTE_LLB_D;
MACRO_DBRI DBRI_NTE_NBF;
MACRO_DBRI DBRI_NTE_RLB_B1;
MACRO_DBRI DBRI_NTE_RLB_B2;
MACRO_DBRI DBRI_NTE_RLB_D;
MACRO_DBRI DBRI_NTINFO0_G1;
MACRO_DBRI DBRI_NTINFO0_G4;
MACRO_DBRI DBRI_NTINFO2_G2;
MACRO_DBRI DBRI_NTINFO4_G3;
MACRO_DBRI DBRI_NT_FT;
MACRO_DBRI DBRI_NT_MFE;
MACRO_DBRI DBRI_OPCODE_DTS;
MACRO_DBRI DBRI_OPCODE_REX;
MACRO_DBRI DBRI_OPMASK;
MACRO_DBRI DBRI_OPSHIFT;
MACRO_DBRI DBRI_PIO0_EN;
MACRO_DBRI DBRI_PIO1_EN;
MACRO_DBRI DBRI_PIO2_EN;
MACRO_DBRI DBRI_PIO3_EN;
MACRO_DBRI DBRI_PIO_0;
MACRO_DBRI DBRI_PIO_1;
MACRO_DBRI DBRI_PIO_2;
MACRO_DBRI DBRI_PIO_3;
MACRO_DBRI DBRI_RMD_ABT;
MACRO_DBRI DBRI_RMD_BBC;
MACRO_DBRI DBRI_RMD_CRC;
MACRO_DBRI DBRI_RMD_OVRN;
MACRO_DBRI DBRI_SDP_ABT;
MACRO_DBRI DBRI_SDP_ALLVAL;
MACRO_DBRI DBRI_SDP_B;
MACRO_DBRI DBRI_SDP_CHNG;
MACRO_DBRI DBRI_SDP_CLR;
MACRO_DBRI DBRI_SDP_CMDMASK;
MACRO_DBRI DBRI_SDP_COLL;
MACRO_DBRI DBRI_SDP_D;
MACRO_DBRI DBRI_SDP_EOL;
MACRO_DBRI DBRI_SDP_FIXED;
MACRO_DBRI DBRI_SDP_HDLC;
MACRO_DBRI DBRI_SDP_IBEG;
MACRO_DBRI DBRI_SDP_IDL;
MACRO_DBRI DBRI_SDP_IRM;
MACRO_DBRI DBRI_SDP_MODEMASK;
MACRO_DBRI DBRI_SDP_PTR;
MACRO_DBRI DBRI_SDP_SERIAL;
MACRO_DBRI DBRI_SDP_TE_DCHAN;
MACRO_DBRI DBRI_SDP_TRANSPARENT;
MACRO_DBRI DBRI_SDP_TWOSAME;
MACRO_DBRI DBRI_STS_C;
MACRO_DBRI DBRI_STS_D;
MACRO_DBRI DBRI_STS_E;
MACRO_DBRI DBRI_STS_F;
MACRO_DBRI DBRI_STS_G;
MACRO_DBRI DBRI_STS_H;
MACRO_DBRI DBRI_STS_N;
MACRO_DBRI DBRI_STS_P;
MACRO_DBRI DBRI_STS_PIPEOFFSET;
MACRO_DBRI DBRI_STS_R;
MACRO_DBRI DBRI_STS_S;
MACRO_DBRI DBRI_STS_T;
MACRO_DBRI DBRI_STS_X;
MACRO_DBRI DBRI_TEINFO0_F1;
MACRO_DBRI DBRI_TEINFO0_F3;
MACRO_DBRI DBRI_TEINFO0_F5;
MACRO_DBRI DBRI_TEINFO0_F8;
MACRO_DBRI DBRI_TEINFO1_F4;
MACRO_DBRI DBRI_TEINFO3_F6;
MACRO_DBRI DBRI_TEINFO3_F7;
MACRO_DBRI DBRI_TE_QE;
MACRO_DBRI DBRI_TMD_ABT;
MACRO_DBRI DBRI_TMD_TBC;
MACRO_DBRI DBRI_TMD_TFC;
MACRO_DBRI DBRI_TMD_UNR;
MACRO_DBRI DBRI_TST_MODE_PIO;
MACRO_DBRI DBRI_TST_MODE_SPEED;
MACRO_DBRI DBRI_TST_RAM_BIST;
MACRO_DBRI DBRI_TST_RAM_RD;
MACRO_DBRI DBRI_TST_RAM_WT;
MACRO_DBRI DBRI_TST_ROMMON;
MACRO_DBRI DBRI_TST_ROM_DUMP;
MACRO_DBRI DBRI_TST_SBUS;
MACRO_DBRI DBRI_TST_SERIAL;
MACRO_DBRI DBRI_TST_UCTL_BIST;
db_action DB_ADD;
db_action DB_ALL;
db_status DB_BADOBJECT;
db_status DB_BADQUERY;
db_status DB_BADTABLE;
db_action DB_FIRST;
db_status DB_INTERNAL_ERROR;
db_action DB_LOOKUP;
db_status DB_MEMORY_LIMIT;
MACRO_DB DB_NAME_LEN;
db_action DB_NEXT;
db_status DB_NOTFOUND;
db_status DB_NOTUNIQUE;
db_action DB_REMOVE;
db_action DB_RESET_NEXT;
db_status DB_STORAGE_LIMIT;
db_status DB_SUCCESS;
MACRO_DC_0 DC;
MACRO_DCMD DCMD_ABORT;
MACRO_DCMD DCMD_ADDRSPEC;
MACRO_DCMD_READ DCMD_EJECT;
MACRO_DCMD DCMD_ERR;
MACRO_DCMD_READ DCMD_FMTDRV;
MACRO_DCMD_READ DCMD_FMTTRK;
MACRO_DCMD_READ DCMD_GETDEF;
MACRO_DCMD_READ DCMD_GET_STATE;
MACRO_DCMD_READ DCMD_LOCK;
MACRO_DCMD DCMD_LOOP;
MACRO_DCMD DCMD_LOOPFIRST;
MACRO_DCMD DCMD_NEXT;
MACRO_DCMD DCMD_OK;
MACRO_DCMD_READ DCMD_PAUSE;
MACRO_DCMD DCMD_PIPE;
MACRO_DCMD DCMD_PIPE_OUT;
MACRO_DCMD_READ DCMD_PLAYMSF;
MACRO_DCMD_READ DCMD_PLAYTRKIND;
MACRO_DCMD_READ DCMD_RDVER;
MACRO_DCMD_READ DCMD_READ;
MACRO_DCMD_READ DCMD_READMODE1;
MACRO_DCMD_READ DCMD_READMODE2;
MACRO_DCMD_READ DCMD_READOFFSET;
MACRO_DCMD_READ DCMD_READTOCENT;
MACRO_DCMD_READ DCMD_READTOCHDR;
MACRO_DCMD_READ DCMD_RECAL;
MACRO_DCMD_READ DCMD_RESUME;
MACRO_DCMD_READ DCMD_SEEK;
MACRO_DCMD_READ DCMD_START_MOTOR;
MACRO_DCMD_READ DCMD_STOP_MOTOR;
MACRO_DCMD_READ DCMD_SUBCHNL;
MACRO_DCMD_READ DCMD_UNLOCK;
MACRO_DCMD_READ DCMD_UPDATE_GEOM;
MACRO_DCMD DCMD_USAGE;
MACRO_DCMD_READ DCMD_VOLCTRL;
MACRO_DCMD_READ DCMD_WRITE;
MACRO_DCOPS DCOPS_VERSION;
MACRO_DCSR DCSR_CSR_DRAIN;
MACRO_DCSR DCSR_CYC_PEND;
MACRO_DCSR DCSR_DIAG;
MACRO_DCSR DCSR_EN_CNT;
MACRO_DCSR DCSR_EN_DMA;
MACRO_DCSR DCSR_ERR_PEND;
MACRO_DCSR DCSR_INT_EN;
MACRO_DCSR DCSR_INT_PEND;
MACRO_DCSR DCSR_RESET;
MACRO_DCSR DCSR_TC;
MACRO_DCSR DCSR_TCI_DIS;
MACRO_DCSR DCSR_WRITE;
MACRO_DC DC_CASE;
MACRO_DC_CLSLEEP DC_CLNOSLEEP;
MACRO_DC_CLSLEEP DC_CLSLEEP;
MACRO_DC_EXCL DC_EXCL;
MACRO_DC DC_GETFLAGS;
dcop_state DC_INSTALLING;
dcop_state DC_READONLY;
dcop_state DC_READY;
MACRO_DC DC_SETFLAGS;
MACRO_DC DC_STD;
MACRO_DDI_PERSISTENT DDI_AUTO_ASSIGNED_NODEID;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_AFFINITY;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_ATTACH;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_BTOP;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_BTOPR;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_DETACH;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_DMAPMAPC;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_DVMAPAGESIZE;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_INITCHILD;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_INTR_HILEVEL;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_IOMIN;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_NINTRS;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_NREGS;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_POKE_FINI;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_POKE_FLUSH;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_POKE_INIT;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_POWER;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_PTOB;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_REGSIZE;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_REPORTDEV;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_REPORTINT;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_SIDDEV;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_SLAVEONLY;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_UNINITCHILD;
$45009653CDC2001856F06EFDA9E04C5E DDI_CTLOPS_XLATE_INTRS;
$FE80D5111114141386C0BD10BAE533E0 DDI_DEVMAP_VALIDATE;
MACRO_DDI_PROP DDI_DEV_T_ANY;
MACRO_DDI_PROP DDI_DEV_T_NONE;
MACRO_DDI_DMA_CALLBACK DDI_DMA_BADATTR;
MACRO_DDI_DMA_CALLBACK DDI_DMA_BADLIMITS;
MACRO_DDI_DMA_CALLBACK DDI_DMA_CALLBACK_DONE;
MACRO_DDI_DMA_CALLBACK DDI_DMA_CALLBACK_RUNOUT;
ddi_dma_ctlops DDI_DMA_CKSYNC;
ddi_dma_ctlops DDI_DMA_COFF;
MACRO_DDI_DMA_CALLBACK DDI_DMA_CONSISTENT;
MACRO_DDI_DMA_CALLBACK DDI_DMA_DONE;
MACRO_DDI_DMA_CALLBACK DDI_DMA_EXCLUSIVE;
ddi_dma_ctlops DDI_DMA_E_1STPTY;
ddi_dma_ctlops DDI_DMA_E_ACQUIRE;
ddi_dma_ctlops DDI_DMA_E_DISABLE;
ddi_dma_ctlops DDI_DMA_E_ENABLE;
ddi_dma_ctlops DDI_DMA_E_FREE;
ddi_dma_ctlops DDI_DMA_E_FREECB;
ddi_dma_ctlops DDI_DMA_E_GETATTR;
ddi_dma_ctlops DDI_DMA_E_GETCB;
ddi_dma_ctlops DDI_DMA_E_GETCNT;
ddi_dma_ctlops DDI_DMA_E_GETLIM;
ddi_dma_ctlops DDI_DMA_E_PROG;
ddi_dma_ctlops DDI_DMA_E_STOP;
ddi_dma_ctlops DDI_DMA_E_SWSETUP;
ddi_dma_ctlops DDI_DMA_E_SWSTART;
MACRO_DDI_DMA DDI_DMA_FORCE_PHYSICAL;
ddi_dma_ctlops DDI_DMA_FREE;
ddi_dma_ctlops DDI_DMA_GETERR;
ddi_dma_ctlops DDI_DMA_HTOC;
MACRO_DDI_DMA_CALLBACK DDI_DMA_INUSE;
ddi_dma_ctlops DDI_DMA_IOPB_ALLOC;
ddi_dma_ctlops DDI_DMA_IOPB_FREE;
ddi_dma_ctlops DDI_DMA_KVADDR;
MACRO_DDI_DMA_CALLBACK DDI_DMA_LOCKED;
MACRO_DDI_DMA_CALLBACK DDI_DMA_MAPOK;
MACRO_DDI_DMA_CALLBACK DDI_DMA_MAPPED;
ddi_dma_ctlops DDI_DMA_MOVWIN;
ddi_dma_ctlops DDI_DMA_NEXTSEG;
ddi_dma_ctlops DDI_DMA_NEXTWIN;
MACRO_DDI_DMA_CALLBACK DDI_DMA_NOMAPPING;
MACRO_DDI_DMA_CALLBACK DDI_DMA_NORESOURCES;
MACRO_DDI_DMA_CALLBACK DDI_DMA_PARTIAL;
MACRO_DDI_DMA_CALLBACK DDI_DMA_PARTIAL_MAP;
MACRO_DDI_DMA_CALLBACK DDI_DMA_RDWR;
MACRO_DDI_DMA_CALLBACK DDI_DMA_READ;
MACRO_DDI_DMA_CALLBACK DDI_DMA_REDZONE;
ddi_dma_ctlops DDI_DMA_RELEASE;
ddi_dma_ctlops DDI_DMA_REPWIN;
ddi_dma_ctlops DDI_DMA_RESERVE;
ddi_dma_ctlops DDI_DMA_RESETH;
MACRO_DDI_DMA_CALLBACK DDI_DMA_SBUS_64BIT;
ddi_dma_ctlops DDI_DMA_SEGTOC;
ddi_dma_ctlops DDI_DMA_SET_SBUS64;
ddi_dma_ctlops DDI_DMA_SMEM_ALLOC;
ddi_dma_ctlops DDI_DMA_SMEM_FREE;
MACRO_DDI_DMA_CALLBACK DDI_DMA_STALE;
MACRO_DDI_DMA_CALLBACK DDI_DMA_STREAMING;
ddi_dma_ctlops DDI_DMA_SYNC;
MACRO_DDI_DMA_CALLBACK DDI_DMA_SYNC_FORCPU;
MACRO_DDI_DMA_CALLBACK DDI_DMA_SYNC_FORDEV;
MACRO_DDI_DMA_CALLBACK DDI_DMA_SYNC_FORKERNEL;
MACRO_DDI_DMA_CALLBACK DDI_DMA_TOOBIG;
MACRO_DDI_DMA_CALLBACK DDI_DMA_TOOSMALL;
MACRO_DDI_DMA_CALLBACK DDI_DMA_WRITE;
MACRO_DDI_SUCCESS DDI_FAILURE;
$ABA88FFCF844ADB83559AF0FBF7F1E52 DDI_INTR_CTLOPS_ADD;
$ABA88FFCF844ADB83559AF0FBF7F1E52 DDI_INTR_CTLOPS_ALLOC_ISPEC;
$ABA88FFCF844ADB83559AF0FBF7F1E52 DDI_INTR_CTLOPS_FREE_ISPEC;
$ABA88FFCF844ADB83559AF0FBF7F1E52 DDI_INTR_CTLOPS_HILEVEL;
$ABA88FFCF844ADB83559AF0FBF7F1E52 DDI_INTR_CTLOPS_NINTRS;
$ABA88FFCF844ADB83559AF0FBF7F1E52 DDI_INTR_CTLOPS_REMOVE;
MACRO_DDI_PROP DDI_MAJOR_T_UNKNOWN;
MACRO_DDI_ME DDI_ME_GENERIC;
MACRO_DDI_ME DDI_ME_INVAL;
MACRO_DDI_ME DDI_ME_NORESOURCES;
MACRO_DDI_ME DDI_ME_REGSPEC_RANGE;
MACRO_DDI_ME DDI_ME_RNUMBER_RANGE;
MACRO_DDI_ME DDI_ME_UNIMPLEMENTED;
MACRO_DDI_ME DDI_ME_UNSUPPORTED;
$96510381DCBEEC9773C8F1EFD3180D16 DDI_NC_PROM;
$96510381DCBEEC9773C8F1EFD3180D16 DDI_NC_PSEUDO;
MACRO_DDI_SUCCESS DDI_NOT_WELL_FORMED;
MACRO_DDI_PERSISTENT DDI_PERSISTENT;
MACRO_DDI DDI_PROP_BUF_TOO_SMALL;
MACRO_DDI DDI_PROP_CANNOT_DECODE;
MACRO_DDI DDI_PROP_CANNOT_ENCODE;
MACRO_DDI_PROP DDI_PROP_CANSLEEP;
$3F61DD0375CBC1F37C02B00929A813F6 DDI_PROP_CMD_DECODE;
$3F61DD0375CBC1F37C02B00929A813F6 DDI_PROP_CMD_ENCODE;
$3F61DD0375CBC1F37C02B00929A813F6 DDI_PROP_CMD_GET_DSIZE;
$3F61DD0375CBC1F37C02B00929A813F6 DDI_PROP_CMD_GET_ESIZE;
$3F61DD0375CBC1F37C02B00929A813F6 DDI_PROP_CMD_SKIP;
MACRO_DDI_PROP DDI_PROP_DONTPASS;
MACRO_DDI_PROP DDI_PROP_DONTSLEEP;
MACRO_DDI DDI_PROP_END_OF_DATA;
MACRO_DDI DDI_PROP_FOUND_1275;
MACRO_DDI_PROP DDI_PROP_HW_DEF;
MACRO_DDI DDI_PROP_INVAL_ARG;
MACRO_DDI_PROP DDI_PROP_NOTPROM;
MACRO_DDI DDI_PROP_NOT_FOUND;
MACRO_DDI DDI_PROP_NO_MEMORY;
$B4C1E64CFFB78309CC76463EAA797381 DDI_PROP_RESULT_EOF;
$B4C1E64CFFB78309CC76463EAA797381 DDI_PROP_RESULT_ERROR;
$B4C1E64CFFB78309CC76463EAA797381 DDI_PROP_RESULT_OK;
MACRO_DDI_PROP DDI_PROP_STACK_CREATE;
MACRO_DDI DDI_PROP_SUCCESS;
MACRO_DDI_PROP DDI_PROP_SYSTEM_DEF;
MACRO_DDI_PROP DDI_PROP_TYPE_ANY;
MACRO_DDI_PROP DDI_PROP_TYPE_BYTE;
MACRO_DDI_PROP DDI_PROP_TYPE_COMPOSITE;
MACRO_DDI_PROP DDI_PROP_TYPE_INT;
MACRO_DDI_PROP DDI_PROP_TYPE_MASK;
MACRO_DDI_PROP DDI_PROP_TYPE_STRING;
MACRO_DDI DDI_PROP_UNDEFINED;
MACRO_DDI_PROP DDI_PROP_UNDEF_IT;
MACRO_DDI_SUCCESS DDI_SUCCESS;
MACRO_DDI_UMEM DDI_UMEMLOCK_READ;
MACRO_DDI_UMEM DDI_UMEMLOCK_WRITE;
MACRO_DDI_UMEM DDI_UMEM_NOSLEEP;
MACRO_DDI_UMEM DDI_UMEM_PAGEABLE;
MACRO_DDI_UMEM DDI_UMEM_SLEEP;
$EDAFB8E8B9C907AF6E1D55EDA7356F26 DDM_ALIAS;
$EDAFB8E8B9C907AF6E1D55EDA7356F26 DDM_DEFAULT;
$EDAFB8E8B9C907AF6E1D55EDA7356F26 DDM_INTERNAL_PATH;
$EDAFB8E8B9C907AF6E1D55EDA7356F26 DDM_MINOR;
MACRO_PROCESS DEAD_PROCESS;
MACRO_DEBUGGING_0 DEBUGGING;
MACRO_DEBUGGING DEBUGGING_ALL;
MACRO_DECIMAL DECIMAL_STRING_LENGTH;
desdir DECRYPT;
MACRO_DEFAULT_TRACE DEFAULT_DEBUGLEVEL;
MACRO_DEFAULT_SYNC DEFAULT_FASTSYNC_PERIOD;
MACRO_DEFAULT_HOSTID DEFAULT_HOSTID;
MACRO_DEFAULT_INTLV DEFAULT_INTLV;
MACRO_DEFAULT DEFAULT_JUMPPID;
MACRO_DEFAULT DEFAULT_MAXPID;
MACRO_DEFAULT_OFFSET DEFAULT_OFFSET;
MACRO_DEFAULT_RIGHTS DEFAULT_RIGHTS;
MACRO_DEFAULT_SYNC DEFAULT_SYNC_PERIOD;
MACRO_DEFAULT_TRACE DEFAULT_TRACE;
MACRO_DEFAULT_TYPE DEFAULT_TYPE;
MACRO_ISIG DEFECHO;
MACRO_DEFGID DEFGID;
MACRO_DEFGROUP DEFGROUP;
MACRO_DEFINACT DEFINACT;
MACRO_DEFRID DEFRID;
MACRO_CHECK DEF_ACL_CHECK;
MACRO_DEF DEF_CLASS_OBJ;
MACRO_DEF_FILEGRP DEF_FILEGRP_SIZE;
MACRO_DEF DEF_GROUP;
MACRO_DEF DEF_GROUP_OBJ;
MACRO_DEF DEF_OTHER_OBJ;
MACRO_DEF_FILEGRP DEF_POP_SIZE;
MACRO_DEF DEF_USER;
MACRO_DEF DEF_USER_OBJ;
MACRO_BARRIER DELETED_LOCK;
MACRO_DELIMITER DELIMITER_ERROR;
MACRO_NHASH DELTAMAP_NHASH;
MACRO_DEMANGLE DEMANGLE_ENAME;
MACRO_DEMANGLE DEMANGLE_ESPACE;
MACRO_DERR DERR_ABORT;
MACRO_DERR DERR_AMNF;
MACRO_DERR DERR_BBK;
MACRO_DERR DERR_BUSY;
MACRO_DERR DERR_DATA_PROT;
MACRO_DERR DERR_DWF;
MACRO_DERR DERR_EOM;
MACRO_DERR DERR_HARD;
MACRO_DERR DERR_HW;
MACRO_DERR DERR_IDNF;
MACRO_DERR DERR_ILI;
MACRO_DERR DERR_ILL;
MACRO_DERR DERR_INVCDB;
MACRO_DERR DERR_MCR;
MACRO_DERR DERR_MEDIUM;
MACRO_DERR DERR_MISCOMP;
MACRO_DERR DERR_NOTREADY;
MACRO_DERR DERR_RECOVER;
MACRO_DERR DERR_RESV;
MACRO_DERR DERR_SUCCESS;
MACRO_DERR DERR_TKONF;
MACRO_DERR DERR_UNC;
MACRO_DERR DERR_UNIT_ATTN;
MACRO_DESERR DESERR_BADPARAM;
MACRO_DESERR DESERR_HWERROR;
MACRO_DESERR DESERR_NOHWDEVICE;
MACRO_DESERR DESERR_NONE;
MACRO_DES_MAXDATA DES_DECRYPT;
MACRO_DES_MAXDATA DES_DEVMASK;
MACRO_DES_MAXDATA DES_DIRMASK;
MACRO_DES_MAXDATA DES_ENCRYPT;
MACRO_DES_MAXDATA DES_HW;
MACRO_DES_MAXDATA DES_MAXDATA;
MACRO_DES DES_MAXLEN;
MACRO_DES DES_QUICKLEN;
MACRO_DES_MAXDATA DES_SW;
MACRO_DEVCLASS DEVCLASS_MASK;
MACRO_DEVCTL DEVCTL_AP_CONFIGURE;
MACRO_DEVCTL DEVCTL_AP_CONNECT;
MACRO_DEVCTL DEVCTL_AP_CONTROL;
MACRO_DEVCTL DEVCTL_AP_DISCONNECT;
MACRO_DEVCTL DEVCTL_AP_GETSTATE;
MACRO_DEVCTL DEVCTL_AP_INSERT;
MACRO_DEVCTL DEVCTL_AP_REMOVE;
MACRO_DEVCTL DEVCTL_AP_UNCONFIGURE;
MACRO_DEVCTL DEVCTL_BUS_CONFIGURE;
MACRO_DEVCTL DEVCTL_BUS_GETSTATE;
MACRO_DEVCTL DEVCTL_BUS_QUIESCE;
MACRO_DEVCTL DEVCTL_BUS_RESET;
MACRO_DEVCTL DEVCTL_BUS_RESETALL;
MACRO_DEVCTL DEVCTL_BUS_UNCONFIGURE;
MACRO_DEVCTL DEVCTL_BUS_UNQUIESCE;
MACRO_DEVCTL DEVCTL_DEVICE_GETSTATE;
MACRO_DEVCTL DEVCTL_DEVICE_OFFLINE;
MACRO_DEVCTL DEVCTL_DEVICE_ONLINE;
MACRO_DEVCTL DEVCTL_DEVICE_REMOVE;
MACRO_DEVCTL DEVCTL_DEVICE_RESET;
MACRO_DEVCTL DEVCTL_IOC;
MACRO_DEVFD DEVFD;
MACRO_DEVICE DEVICE_BUSY;
MACRO_DEVICE DEVICE_DOWN;
MACRO_DEVICE DEVICE_OFFLINE;
MACRO_DEVICE DEVICE_ONLINE;
MACRO_DEVID DEVID_HINT_SIZE;
MACRO_DEVID DEVID_MAGIC_LSB;
MACRO_DEVID DEVID_MAGIC_MSB;
MACRO_DEVID DEVID_REV_LSB;
MACRO_DEVID DEVID_REV_MSB;
MACRO_DEVI_DEVICE DEVI_BUS_DOWN;
MACRO_DEVI_DEVICE DEVI_BUS_QUIESCED;
MACRO_DEVI_DEVICE DEVI_DEVICE_DEGRADED;
MACRO_DEVI_DEVICE DEVI_DEVICE_DOWN;
MACRO_DEVI_DEVICE DEVI_DEVICE_OFFLINE;
MACRO_DEVI_DEVICE DEVI_NDI_CONFIG;
MACRO_DEVI DEVI_PSEUDO_NODEID;
MACRO_DEVI DEVI_SID_NODEID;
MACRO_DEVI_DEVICE DEVI_S_ATTACHING;
MACRO_DEVI_DEVICE DEVI_S_DETACHING;
MACRO_DEVI_DEVICE DEVI_S_INVOKING_DACF;
MACRO_DEVI_DEVICE DEVI_S_MD_UPDATE;
MACRO_DEVI_DEVICE DEVI_S_OFFLINING;
MACRO_DEVI_DEVICE DEVI_S_ONLINING;
MACRO_DEVI_DEVICE DEVI_S_REPORT;
MACRO_DEVI_DEVICE DEVI_S_UNBOUND;
MACRO_DEVMAP DEVMAP_ALLOW_REMAP;
MACRO_DEVMAP DEVMAP_DEFAULTS;
MACRO_DEVMAP DEVMAP_FAULTING;
MACRO_DEVMAP DEVMAP_FLAG_DEVMEM;
MACRO_DEVMAP DEVMAP_FLAG_KMEM;
MACRO_DEVMAP DEVMAP_FLAG_KPMEM;
MACRO_DEVMAP DEVMAP_FLAG_LARGE;
MACRO_DEVMAP DEVMAP_LOCKED;
MACRO_DEVMAP DEVMAP_LOCK_INITED;
MACRO_DEVMAP DEVMAP_MAPPING_INVALID;
MACRO_DEVMAP DEVMAP_OPS_REV;
MACRO_DEVMAP DEVMAP_SETUP_DONE;
MACRO_DEVMAP DEVMAP_UNLOAD_PENDING;
MACRO_DEVMAP DEVMAP_USE_PAGESIZE;
MACRO_DEVPOLLSIZE DEVPOLLSIZE;
MACRO_DEV DEV_BSHIFT;
MACRO_DEV DEV_BSIZE;
dev_type DEV_CLONE;
dev_type DEV_ENUMERATED;
dev_type DEV_GLOBAL;
dev_type DEV_INVALID;
dev_type DEV_NODEBOUND;
dev_type DEV_NODESPECIFIC;
de_op DE_CREATE;
de_op DE_LINK;
de_op DE_MKDIR;
de_op DE_RENAME;
MACRO_SR1 DE_SR1;
MACRO_DF DF_1_CONFALT;
MACRO_DF DF_1_DIRECT;
MACRO_DF DF_1_ENDFILTEE;
MACRO_DF DF_1_GLOBAL;
MACRO_DF DF_1_GROUP;
MACRO_DF DF_1_INITFIRST;
MACRO_DF DF_1_INTERPOSE;
MACRO_DF DF_1_LOADFLTR;
MACRO_DF DF_1_NODEFLIB;
MACRO_DF DF_1_NODELETE;
MACRO_DF DF_1_NODUMP;
MACRO_DF DF_1_NOOPEN;
MACRO_DF DF_1_NOW;
MACRO_DF DF_1_ORIGIN;
MACRO_DF DF_1_TRANS;
MACRO_DF_VALID DF_COMPLETE;
MACRO_DF_VALID DF_LIVE;
MACRO_DF DF_P1_GROUPPERM;
MACRO_DF DF_P1_LAZYLOAD;
MACRO_DF_VALID DF_VALID;
MACRO_DIAGPART DIAGPART;
MACRO_ASCII_DEVID DIAL_DEVID;
MACRO_DIIOC DIIOC;
MACRO_DIMNUM DIMNUM;
MACRO_DINFOCPYALL DINFOCPYALL;
MACRO_DINFOCPYONE DINFOCPYONE;
MACRO_DINFOFORCE DINFOFORCE;
MACRO_DINFOIDENT DINFOIDENT;
MACRO_DINFOLODRV DINFOLODRV;
MACRO_DINFOMINOR DINFOMINOR;
MACRO_DINFOPRIVDATA DINFOPRIVDATA;
MACRO_DINFOPROP DINFOPROP;
MACRO_DINFOSUBTREE DINFOSUBTREE;
MACRO_DINFOUSRLD DINFOUSRLD;
MACRO_DIO DIO;
MACRO_DIOC DIOC;
MACRO_DIOCGETB DIOCGETB;
MACRO_DIOCGETC DIOCGETC;
MACRO_DIOCGETP DIOCGETP;
MACRO_DIOCSETE DIOCSETE;
MACRO_DIOCSETP DIOCSETP;
MACRO_DIOCTL DIOCTL_GETGEOM;
MACRO_DIOCTL DIOCTL_GETPHYGEOM;
MACRO_DIOCTL DIOCTL_RWCMD;
MACRO_DIRBLKSIZ DIRBLKSIZ;
MACRO_DIRBUF DIRBUF;
MACRO_DIRECTIO DIRECTIO_OFF;
MACRO_DIRECTIO DIRECTIO_ON;
zotypes DIRECTORY_OBJ;
MACRO_DIRTYPE DIRTYPE;
MACRO_DISALLOW DISALLOW_BOTH;
MACRO_FAIL DISK_FAIL;
MACRO_MASK DISPLAYCELL_MASK;
MACRO_LEVEL DISP_LEVEL;
MACRO_DI_SNAPSHOT DI_BIG_ENDIAN;
MACRO_DI_SNAPSHOT DI_BUS_DOWN;
MACRO_DI DI_BUS_OPS;
MACRO_DI_SNAPSHOT DI_BUS_QUIESCED;
MACRO_DI DI_CB_OPS;
MACRO_DI_SNAPSHOT DI_CHECK_ALIAS;
MACRO_DI_SNAPSHOT DI_CHECK_INTERNAL_PATH;
MACRO_DI_SNAPSHOT DI_CHECK_MASK;
MACRO_DI_SNAPSHOT DI_DEVICE_DOWN;
MACRO_DI_SNAPSHOT DI_DEVICE_OFFLINE;
MACRO_DI_SNAPSHOT DI_DRIVER_DETACHED;
MACRO_DI_SNAPSHOT DI_LITTLE_ENDIAN;
MACRO_DI DI_MAGIC;
MACRO_DI_SNAPSHOT DI_MINOR_NIL;
MACRO_DI_SNAPSHOT DI_NODE_NIL;
MACRO_DI_SNAPSHOT DI_PRIVDATA_VERSION_0;
MACRO_DI_SNAPSHOT DI_PROM_HANDLE_NIL;
MACRO_DI_SNAPSHOT DI_PROM_NODEID;
MACRO_DI_SNAPSHOT DI_PROM_PROP_NIL;
MACRO_DI DI_PROP_DRV_LIST;
MACRO_DI DI_PROP_GLB_LIST;
MACRO_DI DI_PROP_HW_LIST;
MACRO_DI_SNAPSHOT DI_PROP_NIL;
MACRO_DI DI_PROP_SYS_LIST;
MACRO_DI_SNAPSHOT DI_PROP_TYPE_BOOLEAN;
MACRO_DI_SNAPSHOT DI_PROP_TYPE_BYTE;
MACRO_DI_SNAPSHOT DI_PROP_TYPE_INT;
MACRO_DI_SNAPSHOT DI_PROP_TYPE_STRING;
MACRO_DI_SNAPSHOT DI_PROP_TYPE_UNDEF_IT;
MACRO_DI_SNAPSHOT DI_PROP_TYPE_UNKNOWN;
MACRO_DI_SNAPSHOT DI_PSEUDO_NODEID;
MACRO_DI_SNAPSHOT DI_SID_NODEID;
MACRO_DI_SNAPSHOT DI_SNAPSHOT_VERSION_0;
MACRO_DI DI_STREAM_OPS;
MACRO_DI_SNAPSHOT DI_WALK_CLDFIRST;
MACRO_DI_SNAPSHOT DI_WALK_CONTINUE;
MACRO_DI_SNAPSHOT DI_WALK_LINKGEN;
MACRO_DI_SNAPSHOT DI_WALK_MASK;
MACRO_DI_SNAPSHOT DI_WALK_PRUNECHILD;
MACRO_DI_SNAPSHOT DI_WALK_PRUNESIB;
MACRO_DI_SNAPSHOT DI_WALK_SIBFIRST;
MACRO_DI_SNAPSHOT DI_WALK_TERMINATE;
MACRO_DKC DKC_ACB4000;
MACRO_DKC DKC_CDROM;
MACRO_DKC DKC_CUSTOMER_BASE;
MACRO_DKC DKC_DIRECT;
MACRO_DKC DKC_DSD5215;
MACRO_DKC DKC_INTEL82072;
MACRO_DKC DKC_INTEL82077;
MACRO_DKC DKC_MD;
MACRO_DKC DKC_MD21;
MACRO_DKC DKC_NCRFLOPPY;
MACRO_DKC DKC_PCMCIA_ATA;
MACRO_DKC DKC_PCMCIA_MEM;
MACRO_DKC DKC_SCSI_CCS;
MACRO_DKC DKC_SMSFLOPPY;
MACRO_DKC DKC_UNKNOWN;
MACRO_DKC DKC_WDC2880;
MACRO_DKC DKC_XXX_0;
MACRO_DKC DKC_XXX_1;
MACRO_DKC DKC_XXX_2;
MACRO_DKF DKF_ABORT;
MACRO_DKF DKF_ADAPT_BUSY;
MACRO_DKF DKF_ADAPT_DIAGNOSED;
MACRO_DKF DKF_ADAPT_FAILED;
MACRO_DKF DKF_ADAPT_NOEXIST;
MACRO_DKF DKF_ADAPT_RESERVED;
MACRO_DKF DKF_ADAPT_RESET;
MACRO_DKF DKF_ADAPT_TIMEOUT;
MACRO_DKF DKF_AUTOFAIL;
MACRO_DKF DKF_CTLR_BUSY;
MACRO_DKF DKF_CTLR_DIAGNOSED;
MACRO_DKF DKF_CTLR_FAILED;
MACRO_DKF DKF_CTLR_NOEXIST;
MACRO_DKF DKF_CTLR_RESERVED;
MACRO_DKF DKF_CTLR_RESET;
MACRO_DKF DKF_CTLR_RSV_LOST;
MACRO_DKF DKF_CTLR_TIMEOUT;
MACRO_DKF DKF_DESTRUCTIVE;
MACRO_DKF DKF_DIAGNOSE;
MACRO_DKF DKF_DRV_ALTRSVD;
MACRO_DKF DKF_DRV_BUSY;
MACRO_DKF DKF_DRV_DIAGNOSED;
MACRO_DKF DKF_DRV_DUALPORTED;
MACRO_DKF DKF_DRV_DUAL_ENABLED;
MACRO_DKF DKF_DRV_FAILED;
MACRO_DKF DKF_DRV_NOEXIST;
MACRO_DKF DKF_DRV_RESERVED;
MACRO_DKF DKF_DRV_RESET;
MACRO_DKF DKF_DRV_RSV_LOST;
MACRO_DKF DKF_DRV_TIMEOUT;
MACRO_DKF DKF_DRV_WRTPROT;
MACRO_DKF DKF_ISOLATE;
MACRO_DKF DKF_ORDERED;
MACRO_DKF DKF_PANIC_ABORT;
MACRO_DKF DKF_PROBE;
MACRO_DKF DKF_READ;
MACRO_DKF DKF_REINIT;
MACRO_DKF DKF_RELEASE;
MACRO_DKF DKF_RERUN_RSV_CMDS;
MACRO_DKF DKF_RERUN_UNR_CMDS;
MACRO_DKF DKF_RESERVE;
MACRO_DKF DKF_RESET;
MACRO_DKF DKF_WRITE;
MACRO_DKIOC DKIOC;
MACRO_DKIOCADDBAD DKIOCADDBAD;
MACRO_DKIOCEJECT DKIOCEJECT;
MACRO_DKIOCGAPART DKIOCGAPART;
MACRO_DKIOCGETDEF DKIOCGETDEF;
MACRO_DKIOCGGEOM DKIOCGGEOM;
MACRO_DKIOCGMEDIAINFO DKIOCGMEDIAINFO;
MACRO_DKIOCGMPFLAGS DKIOCGMPFLAGS;
MACRO_DKIOCGMPINFO DKIOCGMPINFO;
MACRO_DKIOCGMPSTATE DKIOCGMPSTATE;
MACRO_DKIOCGSTATUS DKIOCGSTATUS;
MACRO_DKIOCGVTOC DKIOCGVTOC;
MACRO_DKIOCG DKIOCG_PHYGEOM;
MACRO_DKIOCG DKIOCG_VIRTGEOM;
MACRO_DKIOCINFO DKIOCINFO;
MACRO_DKIOCLOCK DKIOCLOCK;
MACRO_DKIOCPARTINFO DKIOCPARTINFO;
MACRO_DKIOCREMOVABLE DKIOCREMOVABLE;
MACRO_DKIOCSAPART DKIOCSAPART;
MACRO_DKIOCSGEOM DKIOCSGEOM;
MACRO_DKIOCSMPCMD DKIOCSMPCMD;
MACRO_DKIOCSMPFLAGS DKIOCSMPFLAGS;
MACRO_DKIOCSMPSTATE DKIOCSMPSTATE;
MACRO_DKIOCSTATE DKIOCSTATE;
MACRO_DKIOCSVTOC DKIOCSVTOC;
MACRO_DKIOCUNLOCK DKIOCUNLOCK;
MACRO_DKIOC_EBP DKIOC_EBP_DISABLE;
MACRO_DKIOC_EBP DKIOC_EBP_ENABLE;
dkio_state DKIO_EJECTED;
dkio_state DKIO_INSERTED;
dkio_state DKIO_NONE;
MACRO_DKI DKI_BAD144;
MACRO_DKI DKI_FMTCYL;
MACRO_DKI DKI_FMTTRK;
MACRO_DKI DKI_FMTVOL;
MACRO_DKI DKI_HEXUNIT;
MACRO_DKI DKI_MAPTRK;
MACRO_DKI DKI_PCMCIA_PFD;
MACRO_DKL DKL_MAGIC;
dk_mpstate DKS_FREEZE;
dk_mpstate DKS_INITIAL;
dk_mpstate DKS_OFFLINE;
dk_mpstate DKS_ONLINE;
dk_mptype DKT_IPI;
dk_mptype DKT_SCSI;
dk_mptype DKT_UNKNOWN;
MACRO_DK_LABEL DK_ACYL;
MACRO_DK_UNKNOWN DK_AS_MO;
MACRO_DK_UNKNOWN DK_CDR;
MACRO_DK_UNKNOWN DK_CDROM;
MACRO_DK_UNKNOWN DK_CDRW;
MACRO_DK_LABEL DK_DEVID_BLKSIZE;
MACRO_DK_LABEL DK_DEVID_REV_LSB;
MACRO_DK_LABEL DK_DEVID_REV_MSB;
MACRO_DK_LABEL DK_DEVLEN;
MACRO_DK_UNKNOWN DK_DVDR;
MACRO_DK_UNKNOWN DK_DVDRAM;
MACRO_DK_UNKNOWN DK_DVDROM;
MACRO_DK_UNKNOWN DK_FIXED_DISK;
MACRO_DK_UNKNOWN DK_FLOPPY;
MACRO_DK_UNKNOWN DK_JAZ;
MACRO_DK DK_LABEL_LOC;
MACRO_DK_LABEL DK_LABEL_SIZE;
MACRO_DK_UNKNOWN DK_MO_ERASABLE;
MACRO_DK_UNKNOWN DK_MO_WRITEONCE;
MACRO_DK_UNKNOWN DK_UNKNOWN;
MACRO_DK_UNKNOWN DK_ZIP;
MACRO_DL DL;
MACRO_DLD DLD_BFI_FORMAT;
MACRO_DLD DLD_BLOCK_FORMAT;
MACRO_DLD DLD_GROWN_DEF_LIST;
MACRO_DLD DLD_MAN_DEF_LIST;
MACRO_DLD DLD_PS_FORMAT;
MACRO_DLIOC DLIOC;
MACRO_DLIOCRAW DLIOCRAW;
MACRO_DL_IOC DL_100BT;
MACRO_DL_IOC DL_100VG;
MACRO_DL_IOC DL_100VGTPR;
MACRO_DL_IOC DL_ACCESS;
MACRO_DL_IOC DL_ACLDLS;
MACRO_DL_IOC DL_ASYNC;
MACRO_DL_IOC DL_ATM;
MACRO_DL_IOC DL_ATTACH_PENDING;
MACRO_DL_IOC DL_ATTACH_REQ;
MACRO_DL_IOC DL_AUTO_TEST;
MACRO_DL_IOC DL_AUTO_XID;
MACRO_DL_IOC DL_BADADDR;
MACRO_DL_IOC DL_BADCORR;
MACRO_DL_IOC DL_BADDATA;
MACRO_DL_IOC DL_BADPPA;
MACRO_DL_IOC DL_BADPRIM;
MACRO_DL_IOC DL_BADQOSPARAM;
MACRO_DL_IOC DL_BADQOSTYPE;
MACRO_DL_IOC DL_BADSAP;
MACRO_DL_IOC DL_BADTOKEN;
MACRO_DL_IOC DL_BIND_ACK;
MACRO_DL_IOC DL_BIND_PENDING;
MACRO_DL_IOC DL_BIND_REQ;
MACRO_DL_IOC DL_BOUND;
MACRO_DL_IOC DL_BUSY;
MACRO_DL_IOC DL_CHAR;
MACRO_DL_IOC DL_CLDLS;
MACRO_DL_IOC DL_CMD_IP;
MACRO_DL_IOC DL_CMD_IT;
MACRO_DL_IOC DL_CMD_MASK;
MACRO_DL_IOC DL_CMD_OK;
MACRO_DL_IOC DL_CMD_PE;
MACRO_DL_IOC DL_CMD_RS;
MACRO_DL_IOC DL_CMD_UE;
MACRO_DL_IOC DL_CMD_UN;
MACRO_DL_IOC DL_CODLS;
MACRO_DL_IOC DL_CONNECT_CON;
MACRO_DL_IOC DL_CONNECT_IND;
MACRO_DL_IOC DL_CONNECT_REQ;
MACRO_DL_IOC DL_CONNECT_RES;
MACRO_DL_IOC DL_CONN_RES_PENDING;
MACRO_DL_IOC DL_CONREJ_DEST_UNKNOWN;
MACRO_DL_IOC DL_CONREJ_DEST_UNREACH_PERMANENT;
MACRO_DL_IOC DL_CONREJ_DEST_UNREACH_TRANSIENT;
MACRO_DL_IOC DL_CONREJ_PERMANENT_COND;
MACRO_DL_IOC DL_CONREJ_QOS_UNAVAIL_PERMANENT;
MACRO_DL_IOC DL_CONREJ_QOS_UNAVAIL_TRANSIENT;
MACRO_DL_IOC DL_CONREJ_TRANSIENT_COND;
MACRO_DL_IOC DL_CSMACD;
MACRO_DL_IOC DL_CTCA;
MACRO_DL_IOC DL_CURRENT_VERSION;
MACRO_DL_IOC DL_CURR_PHYS_ADDR;
MACRO_DL_IOC DL_DATAXFER;
MACRO_DL_IOC DL_DATA_ACK_IND;
MACRO_DL_IOC DL_DATA_ACK_REQ;
MACRO_DL_IOC DL_DATA_ACK_STATUS_IND;
MACRO_DL_IOC DL_DETACH_PENDING;
MACRO_DL_IOC DL_DETACH_REQ;
MACRO_DL_IOC DL_DISABMULTI_REQ;
MACRO_DL_IOC DL_DISCON11_PENDING;
MACRO_DL_IOC DL_DISCON12_PENDING;
MACRO_DL_IOC DL_DISCON13_PENDING;
MACRO_DL_IOC DL_DISCON8_PENDING;
MACRO_DL_IOC DL_DISCON9_PENDING;
MACRO_DL_IOC DL_DISCONNECT_IND;
MACRO_DL_IOC DL_DISCONNECT_REQ;
MACRO_DL_IOC DL_DISC_ABNORMAL_CONDITION;
MACRO_DL_IOC DL_DISC_NORMAL_CONDITION;
MACRO_DL_IOC DL_DISC_PERMANENT_CONDITION;
MACRO_DL_IOC DL_DISC_TRANSIENT_CONDITION;
MACRO_DL_IOC DL_DISC_UNSPECIFIED;
MACRO_DL_IOC DL_ENABMULTI_REQ;
MACRO_DL_IOC DL_ERROR_ACK;
MACRO_DL_IOC DL_ETHER;
MACRO_DL_IOC DL_ETH_CSMA;
MACRO_DL_IOC DL_FACT_PHYS_ADDR;
MACRO_DL_IOC DL_FC;
MACRO_DL_IOC DL_FDDI;
MACRO_DL_IOC DL_FRAME;
MACRO_DL_IOC DL_GET_STATISTICS_ACK;
MACRO_DL_IOC DL_GET_STATISTICS_REQ;
MACRO_DL_IOC DL_HDLC;
MACRO_DL_IOC DL_HIERARCHICAL_BIND;
MACRO_DL_IOC DL_HIPPI;
MACRO_DL_IOC DL_IDLE;
MACRO_DL_IOC DL_INCON_PENDING;
MACRO_DL_IOC DL_INFO_ACK;
MACRO_DL_IOC DL_INFO_REQ;
MACRO_DL_IOC DL_INITFAILED;
MACRO_DL_IOC DL_IOC_HDR_INFO;
MACRO_DL_IOC DL_IPATM;
MACRO_DL_IOC DL_IPX25;
MACRO_DL_IOC DL_ISDN;
MACRO_DL_IOC DL_LOOP;
MACRO_DL_IOC DL_MAXIMUM;
MACRO_DL_MAXPRIM DL_MAXPRIM;
MACRO_DL_MAXSTATE DL_MAXSTATE;
MACRO_DL_IOC DL_METRO;
MACRO_DL_IOC DL_MONITOR;
MACRO_DL_IOC DL_MPFRAME;
MACRO_DL_IOC DL_NOADDR;
MACRO_DL_IOC DL_NOAUTO;
MACRO_DL_IOC DL_NONE;
MACRO_DL_IOC DL_NOTENAB;
MACRO_DL_IOC DL_NOTESTAUTO;
MACRO_DL_IOC DL_NOTINIT;
MACRO_DL_IOC DL_NOTSUPPORTED;
MACRO_DL_IOC DL_NOXIDAUTO;
MACRO_DL_IOC DL_OK_ACK;
MACRO_DL_IOC DL_OTHER;
MACRO_DL_IOC DL_OUTCON_PENDING;
MACRO_DL_IOC DL_OUTSTATE;
MACRO_DL_IOC DL_PEER_BIND;
MACRO_DL_IOC DL_PENDING;
MACRO_DL_IOC DL_PHYS_ADDR_ACK;
MACRO_DL_IOC DL_PHYS_ADDR_REQ;
MACRO_DL_IOC DL_POLL_FINAL;
MACRO_DL_IOC DL_PROMISCOFF_REQ;
MACRO_DL_IOC DL_PROMISCON_REQ;
MACRO_DL_IOC DL_PROMISC_MULTI;
MACRO_DL_IOC DL_PROMISC_PHYS;
MACRO_DL_IOC DL_PROMISC_SAP;
MACRO_DL_IOC DL_PROVIDER;
MACRO_DL_IOC DL_PROV_RESET_PENDING;
MACRO_DL_IOC DL_QOS_CL_RANGE1;
MACRO_DL_IOC DL_QOS_CL_SEL1;
MACRO_DL_IOC DL_QOS_CO_RANGE1;
MACRO_DL_IOC DL_QOS_CO_SEL1;
MACRO_DL_IOC DL_QOS_DONT_CARE;
MACRO_DL_IOC DL_REPLY_IND;
MACRO_DL_IOC DL_REPLY_REQ;
MACRO_DL_IOC DL_REPLY_STATUS_IND;
MACRO_DL_IOC DL_REPLY_UPDATE_REQ;
MACRO_DL_IOC DL_REPLY_UPDATE_STATUS_IND;
MACRO_DL_IOC DL_RESET_CON;
MACRO_DL_IOC DL_RESET_FLOW_CONTROL;
MACRO_DL_IOC DL_RESET_IND;
MACRO_DL_IOC DL_RESET_LINK_ERROR;
MACRO_DL_IOC DL_RESET_REQ;
MACRO_DL_IOC DL_RESET_RES;
MACRO_DL_IOC DL_RESET_RESYNCH;
MACRO_DL_IOC DL_RESET_RES_PENDING;
MACRO_DL_IOC DL_RQST_NORSP;
MACRO_DL_IOC DL_RQST_RSP;
MACRO_DL_IOC DL_RSP_IP;
MACRO_DL_IOC DL_RSP_IT;
MACRO_DL_IOC DL_RSP_MASK;
MACRO_DL_IOC DL_RSP_NE;
MACRO_DL_IOC DL_RSP_NR;
MACRO_DL_IOC DL_RSP_OK;
MACRO_DL_IOC DL_RSP_RS;
MACRO_DL_IOC DL_RSP_UE;
MACRO_DL_IOC DL_RSP_UN;
MACRO_DL_IOC DL_SET_PHYS_ADDR_REQ;
MACRO_DL_IOC DL_STYLE1;
MACRO_DL_IOC DL_STYLE2;
MACRO_DL_IOC DL_SUBS_BIND_ACK;
MACRO_DL_IOC DL_SUBS_BIND_PND;
MACRO_DL_IOC DL_SUBS_BIND_REQ;
MACRO_DL_IOC DL_SUBS_UNBIND_PND;
MACRO_DL_IOC DL_SUBS_UNBIND_REQ;
MACRO_DL_IOC DL_SYSERR;
MACRO_DL_IOC DL_TESTAUTO;
MACRO_DL_IOC DL_TEST_CON;
MACRO_DL_IOC DL_TEST_IND;
MACRO_DL_IOC DL_TEST_REQ;
MACRO_DL_IOC DL_TEST_RES;
MACRO_DL_IOC DL_TOKEN_ACK;
MACRO_DL_IOC DL_TOKEN_REQ;
MACRO_DL_IOC DL_TOOMANY;
MACRO_DL_IOC DL_TPB;
MACRO_DL_IOC DL_TPR;
MACRO_DL_IOC DL_UDERROR_IND;
MACRO_DL_IOC DL_UDQOS_PENDING;
MACRO_DL_IOC DL_UDQOS_REQ;
MACRO_DL_IOC DL_UNATTACHED;
MACRO_DL_IOC DL_UNBIND_PENDING;
MACRO_DL_IOC DL_UNBIND_REQ;
MACRO_DL_IOC DL_UNBOUND;
MACRO_DL_IOC DL_UNDELIVERABLE;
MACRO_DL_IOC DL_UNITDATA_IND;
MACRO_DL_IOC DL_UNITDATA_REQ;
MACRO_DL_IOC DL_UNKNOWN;
MACRO_DL_IOC DL_UNSUPPORTED;
MACRO_DL_IOC DL_USER;
MACRO_DL_IOC DL_USER_RESET_PENDING;
MACRO_DL_IOC DL_VERSION_2;
MACRO_DL_IOC DL_X25;
MACRO_DL_IOC DL_XIDAUTO;
MACRO_DL_IOC DL_XID_CON;
MACRO_DL_IOC DL_XID_IND;
MACRO_DL_IOC DL_XID_REQ;
MACRO_DL_IOC DL_XID_RES;
MACRO_DM_0 DM;
MACRO_DMAESC DMAESC_BSIZE;
MACRO_DMAESC DMAESC_DRAIN;
MACRO_DMAESC DMAESC_EN_ADD;
MACRO_DMAESC DMAESC_EN_TCI;
MACRO_DMAESC DMAESC_INTPEND;
MACRO_DMAESC DMAESC_PEN;
MACRO_DMAESC DMAESC_PERR;
MACRO_DMAESC DMAESC_TCZERO;
MACRO_DMAGATE DMAGATE;
MACRO_DMAGA_BYTEADR DMAGA_ALE;
MACRO_DMAGA_BYTEADR DMAGA_ALOAD;
MACRO_DMAGA_BYTEADR DMAGA_BURST16;
MACRO_DMAGA_BYTEADR DMAGA_BURST32;
MACRO_DMAGA_BYTEADR DMAGA_BURSTMASK;
MACRO_DMAGA_BYTEADR DMAGA_BYTEADR;
MACRO_DMAGA_CHK DMAGA_CHK_MASK;
MACRO_DMAGA_DEVID DMAGA_DEVID;
MACRO_DMAGA_BYTEADR DMAGA_DMAON;
MACRO_DMAGA DMAGA_DRAIN;
MACRO_DMAGA DMAGA_DRAINING;
MACRO_DMAGA_BYTEADR DMAGA_ENANXT;
MACRO_DMAGA_BYTEADR DMAGA_ENATC;
MACRO_DMAGA DMAGA_ENDVMA;
MACRO_DMAGA DMAGA_ERRPEND;
MACRO_DMAGA DMAGA_FLUSH;
MACRO_DMAGA_BYTEADR DMAGA_ILACC;
MACRO_DMAGA DMAGA_INTEN;
MACRO_DMAGA DMAGA_INTPEND;
MACRO_DMAGA_CHK DMAGA_INT_MASK;
MACRO_DMAGA_BYTEADR DMAGA_LERR;
MACRO_DMAGA_BYTEADR DMAGA_NALOAD;
MACRO_DMAGA_BYTEADR DMAGA_NOBURST;
MACRO_DMAGA_BYTEADR DMAGA_NOTCINT;
MACRO_DMAGA_OFFSET DMAGA_OFFSET;
MACRO_DMAGA DMAGA_PACKCNT;
MACRO_DMAGA DMAGA_REQPEND;
MACRO_DMAGA DMAGA_RESET;
MACRO_DMAGA DMAGA_SLVERR;
MACRO_DMAGA_BYTEADR DMAGA_TC;
MACRO_DMAGA_BYTEADR DMAGA_TURBO;
MACRO_DMAGA_BYTEADR DMAGA_TWO_CYCLE;
MACRO_DMAGA DMAGA_WRITE;
MACRO_DMAIS DMAIS_COMPLEMENT;
MACRO_DMAIS DMAIS_MAPPAGE;
MACRO_DMAIS DMAIS_NEEDINTBUF;
MACRO_DMAIS DMAIS_NOMERGE;
MACRO_DMAIS DMAIS_PAGEPTR;
MACRO_DMAIS DMAIS_WINEND;
MACRO_DMAIS DMAIS_WINSTRT;
MACRO_DMAIS DMAIS_WINUIB;
MACRO__LENBASE DMAXEXP;
MACRO_DMA DMA_ATTR_V0;
MACRO_DMA DMA_ATTR_VERSION;
MACRO_DMA_INTPEND DMA_BURST16;
MACRO_DMA_INTPEND DMA_BURST32;
MACRO_DMA_INTPEND DMA_BURST64;
MACRO_DMA_INTPEND DMA_BURSTS;
MACRO_DMA_INTPEND DMA_CE_ID;
MACRO_DMA_INTPEND DMA_DEV_ID;
MACRO_DMA_INTPEND DMA_DMAREV;
MACRO_DMA_INTPEND DMA_DRAINING;
MACRO_DMA_INTPEND DMA_DSBL_DRAIN;
MACRO_DMA_INTPEND DMA_DSBL_PARITY;
MACRO_DMA_INTPEND DMA_ENDVMA;
MACRO_DMA_INTPEND DMA_ERRPEND;
MACRO_DMA_INTPEND DMA_INTEN;
MACRO_DMA_INTPEND DMA_INTPEND;
MACRO_DMA_INTPEND DMA_INT_MASK;
$03CC775CEF2B1D596517FD882262439F DMA_OTYP_PADDR;
$03CC775CEF2B1D596517FD882262439F DMA_OTYP_PAGES;
$03CC775CEF2B1D596517FD882262439F DMA_OTYP_VADDR;
MACRO_DMA_INTPEND DMA_PAUSE_FAS;
MACRO_DMA_INTPEND DMA_REQPEND;
MACRO_DMA_INTPEND DMA_RESET;
MACRO_DMA_INTPEND DMA_RESET_FAS;
MACRO_DMA_REV1 DMA_REV1;
MACRO_DMA_REV1 DMA_REV2;
MACRO_DMA_REV3 DMA_REV3;
MACRO_DMA_INTPEND DMA_TWO_CYCLE;
MACRO_DMA_INTPEND DMA_WIDE_EN;
MACRO_DMA_INTPEND DMA_WRITE;
MACRO_DMSET DMBIC;
MACRO_DMSET DMBIS;
MACRO_DMGET DMGET;
MACRO_DMP DMP_BYPASSNEXUS;
MACRO_DMP DMP_INVALID;
MACRO_DMP DMP_IOCACHE;
MACRO_DMP DMP_LKIOPB;
MACRO_DMP DMP_LKSYSV;
MACRO_DMP DMP_NOCPUSYNC;
MACRO_DMP DMP_NODEVSYNC;
MACRO_DMP DMP_NOLIMIT;
MACRO_DMP DMP_NOSYNC;
MACRO_DMP DMP_PHYSADDR;
MACRO_DMP DMP_SHADOW;
MACRO_DMP DMP_USEHAT;
MACRO_DMP DMP_VMEREQ;
MACRO_DMSET DMSET;
MACRO_DM DM_BATCH;
MACRO_DM DM_ELABEL;
MACRO_DM DM_FORMAT;
MACRO_DM DM_FORMFS;
MACRO_DM DM_OLABEL;
MACRO_DM DM_WLABEL;
nstype DNANS;
nstype DNS;
MACRO_DN DN_BUSY_CHANGING_BITS;
MACRO_DN DN_BUSY_LOADING;
MACRO_DN DN_BUSY_UNLOADING;
MACRO_DN DN_CONF_PARSED;
MACRO_DN DN_DEVI_MADE;
MACRO_DN DN_DEVS_ATTACHED;
MACRO_DN DN_TAKEN_GETUDEV;
MACRO_DN DN_WALKED_TREE;
MACRO_DO DO;
MACRO_DOMAIN DOMAIN;
MACRO_DOM DOM_NM_LN;
MACRO_DONT DONT;
MACRO_DONTWAIT DONTWAIT;
time_how DONT_CHANGE;
MACRO_DONT_SHOW DONT_SHOW_CURSOR;
MACRO_DOOR DOOR_ATTR_MASK;
MACRO_DOOR DOOR_BIND;
MACRO_DOOR DOOR_CALL;
MACRO_DOOR DOOR_CREATE;
MACRO_DOOR DOOR_CRED;
MACRO_DOOR DOOR_DELAY;
MACRO_DOOR DOOR_DESCRIPTOR;
MACRO_DOOR DOOR_INFO;
MACRO_DOOR DOOR_INVAL;
MACRO_DOOR DOOR_IS_UNREF;
MACRO_DOOR DOOR_LOCAL;
MACRO_DOOR DOOR_PRIVATE;
MACRO_DOOR DOOR_QUERY;
MACRO_DOOR DOOR_RELEASE;
MACRO_DOOR DOOR_RETURN;
MACRO_DOOR DOOR_REVOKE;
MACRO_DOOR DOOR_REVOKED;
MACRO_DOOR DOOR_UNBIND;
MACRO_DOOR DOOR_UNREF;
MACRO_DOOR DOOR_UNREF_ACTIVE;
MACRO_DOOR DOOR_UNREF_DATA;
MACRO_DOOR DOOR_UNREF_MULTI;
MACRO_DOSDATA DOSDATA;
MACRO_DOSHUGE DOSHUGE;
MACRO_IGNBRK DOSMODE;
MACRO_DOSOS12 DOSOS12;
MACRO_DOSOS12 DOSOS16;
MACRO_DOS DOS_F12MAXC;
MACRO_DOS DOS_F12MAXS;
MACRO_DOS DOS_FAT16P_LBA;
MACRO_DOS DOS_FAT16_LBA;
MACRO_DOS DOS_FAT32;
MACRO_DOS DOS_FAT32_LBA;
MACRO_DOS DOS_ID1;
MACRO_DOS DOS_ID2a;
MACRO_DOS DOS_ID2b;
MACRO_DOS DOS_SIGN;
MACRO_DOS DOS_SYSFAT12;
MACRO_DOS DOS_SYSFAT16;
MACRO_DOS DOS_SYSHUGE;
MACRO_DOUBLE DOUBLE_2CLUTS;
MACRO_DOUBLE DOUBLE_3CLUTS;
MACRO_BIAS DOUBLE_BIAS;
MACRO_HOMEARROW DOWNARROW;
MACRO_DOWNLOAD DOWNLOAD_REQUIRED;
MACRO_DO_CHAP DO_CHAP;
MACRO_DO_CHAP DO_PAP;
MACRO_DPIOC DPIOC;
MACRO_DPQ DPQ_NEVER;
MACRO_DPQ DPQ_POSSIBLE;
MACRO_DPQ DPQ_SUPPORTED;
MACRO_DPQ DPQ_VUNIQ;
MACRO_DP DP_ISPOLLED;
MACRO_DP DP_POLL;
MACRO_DQ DQ_BLKS;
MACRO_DQ DQ_BTIMELIMIT;
MACRO_DQ DQ_ERROR;
MACRO_DQ DQ_FILES;
MACRO_DQ DQ_FTIMELIMIT;
MACRO_DQ DQ_MOD;
MACRO_DQ DQ_TRANS;
MACRO_DRADDRLINES DRADDRLINES;
MACRO_DRCTL_IOILVL DRCTL_APWREN;
MACRO_DRCTL_IOILVL DRCTL_BVD1DB;
MACRO_DRCTL DRCTL_BVD1IE;
MACRO_DRCTL_IOILVL DRCTL_BVD2DB;
MACRO_DRCTL DRCTL_BVD2IE;
MACRO_DRCTL_IOILVL DRCTL_CD1DB;
MACRO_DRCTL DRCTL_CDIE;
MACRO_DRCTL DRCTL_CTOIE;
MACRO_DRCTL_IOILVL DRCTL_DIAGEN;
MACRO_DRCTL_IOILVL DRCTL_IFTYPE;
MACRO_DRCTL_IOILVL DRCTL_IFTYPE_IO;
MACRO_DRCTL_IOILVL DRCTL_IFTYPE_MEM;
MACRO_DRCTL DRCTL_IOIE;
MACRO_DRCTL_IOILVL DRCTL_IOILVL;
MACRO_DRCTL_IOILVL DRCTL_IOILVL_SB0;
MACRO_DRCTL_IOILVL DRCTL_IOILVL_SB1;
MACRO_DRCTL_IOILVL DRCTL_LPBKEN;
MACRO_DRCTL_IOILVL DRCTL_MSTPWR;
MACRO_DRCTL_IOILVL DRCTL_PCIFOE;
MACRO_DRCTL DRCTL_PROMEN;
MACRO_DRCTL_IOILVL DRCTL_RDYDB;
MACRO_DRCTL DRCTL_RDYIE;
MACRO_DRCTL_IOILVL DRCTL_RESET;
MACRO_DRCTL DRCTL_SCILVL;
MACRO_DRCTL DRCTL_SCILVL_SB0;
MACRO_DRCTL DRCTL_SCILVL_SB1;
MACRO_DRCTL_IOILVL DRCTL_SPKREN;
MACRO_DRCTL_IOILVL DRCTL_VPP1EN;
MACRO_DRCTL_IOILVL DRCTL_VPP1_OFF;
MACRO_DRCTL_IOILVL DRCTL_VPP1_VCC;
MACRO_DRCTL_IOILVL DRCTL_VPP1_VPP;
MACRO_DRCTL_IOILVL DRCTL_VPP1_ZIP;
MACRO_DRCTL_IOILVL DRCTL_VPP2EN;
MACRO_DRCTL_IOILVL DRCTL_VPP2_OFF;
MACRO_DRCTL_IOILVL DRCTL_VPP2_VCC;
MACRO_DRCTL_IOILVL DRCTL_VPP2_VPP;
MACRO_DRCTL_IOILVL DRCTL_VPP2_ZIP;
MACRO_DRCTL_IOILVL DRCTL_WAITDB;
MACRO_DRCTL_IOILVL DRCTL_WPDB;
MACRO_DRCTL DRCTL_WPIE;
MACRO_DRMAP DRMAP_ASIC_CSRS;
MACRO_DRMAP DRMAP_CARD0_WIN0;
MACRO_DRMAP DRMAP_CARD0_WIN1;
MACRO_DRMAP DRMAP_CARD0_WIN2;
MACRO_DRMAP DRMAP_CARD1_WIN0;
MACRO_DRMAP DRMAP_CARD1_WIN1;
MACRO_DRMAP DRMAP_CARD1_WIN2;
MACRO_DRMAP DRMAP_PROM;
MACRO_DRSELMSK DRSELMSK;
MACRO_DRSOCKETS DRSOCKETS;
MACRO_DRSTAT DRSTAT_BATT_LOW;
MACRO_DRSTAT DRSTAT_BATT_OK;
MACRO_DRSTAT DRSTAT_BVD1CHG;
MACRO_DRSTAT DRSTAT_BVD1ST;
MACRO_DRSTAT DRSTAT_BVD2CHG;
MACRO_DRSTAT DRSTAT_BVD2ST;
MACRO_DRSTAT DRSTAT_BVDCHG;
MACRO_DRSTAT DRSTAT_BVDST;
MACRO_DRSTAT DRSTAT_CD1ST;
MACRO_DRSTAT DRSTAT_CD2ST;
MACRO_DRSTAT DRSTAT_CDCHG;
MACRO_DRSTAT DRSTAT_CD_MASK;
MACRO_DRSTAT DRSTAT_IOINT;
MACRO_DRSTAT DRSTAT_IOIS16;
MACRO_DRSTAT DRSTAT_IOREQ;
MACRO_DRSTAT DRSTAT_LIVE;
MACRO_DRSTAT DRSTAT_PCTO;
MACRO_DRSTAT DRSTAT_PCTYS_M;
MACRO_DRSTAT DRSTAT_PCTYS_S;
MACRO_DRSTAT DRSTAT_PRESENT_OK;
MACRO_DRSTAT DRSTAT_PWRON;
MACRO_DRSTAT DRSTAT_RDYCHG;
MACRO_DRSTAT DRSTAT_RDYST;
MACRO_DRSTAT DRSTAT_REV_M;
MACRO_DRSTAT DRSTAT_REV_S;
MACRO_DRSTAT DRSTAT_SCINT;
MACRO_DRSTAT DRSTAT_SPKR;
MACRO_DRSTAT DRSTAT_STSCHG;
MACRO_DRSTAT DRSTAT_WAITST;
MACRO_DRSTAT DRSTAT_WPCHG;
MACRO_DRSTAT DRSTAT_WPST;
MACRO_DRSTAT DRSTAT_ZERO;
MACRO_DRT_CHANGE DRT_CHANGE_DEFAULT;
MACRO_DRT_CHANGE DRT_CHANGE_MASK;
MACRO_DRT DRT_NUMWINDOWS;
MACRO_DRVSEL DRVSEL;
MACRO_DRV DRV_MASK;
MACRO_DRWINDOWS DRWINDOWS;
MACRO_DRWINSIZE DRWINSIZE;
MACRO_DRWIN_ASPSEL DRWIN_ASPSEL_AM;
MACRO_DRWIN_ASPSEL DRWIN_ASPSEL_CM;
MACRO_DRWIN_ASPSEL DRWIN_ASPSEL_IO;
MACRO_DRWIN_ASPSEL DRWIN_ASPSEL_M;
MACRO_DRWIN_ASPSEL DRWIN_BASE_M;
MACRO_DRWIN_ASPSEL DRWIN_BASE_S;
MACRO_DRWIN DRWIN_CMDDLY_M;
MACRO_DRWIN DRWIN_CMDDLY_S;
MACRO_DRWIN DRWIN_CMDLNG_M;
MACRO_DRWIN DRWIN_CMDLNG_S;
MACRO_DRWIN_ASPSEL DRWIN_RECDLY_M;
MACRO_DRWIN_ASPSEL DRWIN_RECDLY_S;
MACRO_DRWIN_ASPSEL DRWIN_WAITDLY_M;
MACRO_DRWIN_ASPSEL DRWIN_WAITDLY_S;
MACRO_DRWIN_ASPSEL DRWIN_WAITREQ_M;
MACRO_DRWIN_ASPSEL DRWIN_WAITREQ_S;
MACRO_DR DR_HASMETA;
MACRO_DR DR_INODEINFO;
MACRO_DR DR_NEWHEADER;
MACRO_DR DR_REDUMP;
dr_op DR_REMOVE;
dr_op DR_RENAME;
dr_op DR_RMDIR;
MACRO_DR DR_TRUEINC;
MACRO_DS18SPT DS18SPT;
MACRO_DS8SPT DS8SPT;
MACRO_DS9SPT DS9SPT;
MACRO_DS9 DS9_15SPT;
MACRO_DSCRL DSCRL;
MACRO_DRVSEL DSKCHG;
MACRO_DSK DSK_COPY;
MACRO_DSK DSK_ERLOC;
MACRO_DSK DSK_ERTYP;
MACRO_DSK DSK_IDLOC;
MACRO_DSK DSK_INIT;
MACRO_DSK DSK_MAP;
MACRO_DSK DSK_PATTERN;
MACRO_DSK DSK_PHYS;
MACRO_DSK DSK_WORD;
MACRO_XMTWR DSPRD;
MACRO_DSPWR DSPWR;
MACRO_ON DSR_ON;
MACRO_DST DST_AUST;
MACRO_DST DST_AUSTALT;
MACRO_DST DST_CAN;
MACRO_DST DST_EET;
MACRO_DST DST_GB;
MACRO_DST DST_MET;
MACRO_DST DST_NONE;
MACRO_DST DST_RUM;
MACRO_DST DST_TUR;
MACRO_DST DST_USA;
MACRO_DST DST_WET;
MACRO_SR0 DS_SR0;
MACRO_DTAB DTAB_ANDCRITERIA;
MACRO_DTAB DTAB_EXCLUDEFLAG;
MACRO_DTAB DTAB_LISTALL;
MACRO_DTAB DTAB_MXALIASLN;
MACRO_DTDC DTDC_CMDDONE;
MACRO_DTDC DTDC_DATADONE;
MACRO_DTF DTF_1_CONFEXP;
MACRO_DTF DTF_1_PARINIT;
MACRO_RTSXOFF DTRXOFF;
MACRO_DTR DTR_ASSERT;
MACRO_DTR_OFF DTR_OFF;
MACRO_OFFSET DTR_OFFSET;
MACRO_DTR_OFF DTR_ON;
MACRO_DTYPE DTYPE_ARRAY_CTRL;
MACRO_DTYPE DTYPE_CHANGER;
MACRO_DTYPE DTYPE_COMM;
MACRO_DTYPE DTYPE_DIRECT;
MACRO_DTYPE DTYPE_ESI;
MACRO_DTYPE DTYPE_MASK;
MACRO_DTYPE_NOTPRESENT DTYPE_NOTPRESENT;
MACRO_DTYPE DTYPE_OPTICAL;
MACRO_DTYPE DTYPE_PRINTER;
MACRO_DTYPE DTYPE_PROCESSOR;
MACRO_DTYPE DTYPE_RODIRECT;
MACRO_DTYPE DTYPE_SCANNER;
MACRO_DTYPE DTYPE_SEQUENTIAL;
MACRO_DTYPE DTYPE_UNKNOWN;
MACRO_DTYPE DTYPE_WORM;
delta_type DT_AB;
delta_type DT_ABZERO;
MACRO_DT DT_ADDRRNGHI;
MACRO_DT DT_ADDRRNGLO;
MACRO_DT_NON DT_ARY;
MACRO_DT DT_AUDIT;
MACRO_DT DT_AUXILIARY;
delta_type DT_BOT;
delta_type DT_CANCEL;
delta_type DT_CG;
MACRO_DT DT_CHECKSUM;
delta_type DT_COMMIT;
MACRO_DT DT_CONFIG;
MACRO_DT DT_DEBUG;
MACRO_DT DT_DEPAUDIT;
MACRO_DT DT_DEPRECATED_SPARC_REGISTER;
delta_type DT_DIR;
delta_type DT_EOT;
delta_type DT_FBI;
MACRO_DT_NON DT_FCN;
MACRO_DT DT_FEATURE_1;
MACRO_DT DT_FILTER;
MACRO_DT DT_FINI;
MACRO_DT DT_FLAGS_1;
MACRO_DT DT_HASH;
MACRO_DT DT_HIPROC;
MACRO_DT_IA DT_IA_64_PLT_RESERVE;
MACRO_DT DT_INIT;
delta_type DT_INODE;
MACRO_DT DT_JMPREL;
MACRO_DT DT_LOPROC;
delta_type DT_MAX;
MACRO_DT DT_MAXPOSTAGS;
MACRO_DT DT_MOVEENT;
MACRO_DT DT_MOVESZ;
MACRO_DT DT_MOVETAB;
MACRO_DT DT_NEEDED;
MACRO_DT_NON DT_NON;
delta_type DT_NONE;
MACRO_DT DT_NULL;
MACRO_DT DT_PLTGOT;
MACRO_DT DT_PLTPAD;
MACRO_DT DT_PLTPADSZ;
MACRO_DT DT_PLTREL;
MACRO_DT DT_PLTRELSZ;
MACRO_DT DT_POSFLAG_1;
MACRO_DT_NON DT_PTR;
delta_type DT_QR;
MACRO_DT DT_REL;
MACRO_DT DT_RELA;
MACRO_DT DT_RELACOUNT;
MACRO_DT DT_RELAENT;
MACRO_DT DT_RELASZ;
MACRO_DT DT_RELCOUNT;
MACRO_DT DT_RELENT;
MACRO_DT DT_RELSZ;
MACRO_DT DT_RPATH;
delta_type DT_SB;
delta_type DT_SHAD;
delta_type DT_SI;
MACRO_DT DT_SONAME;
MACRO_SPARC_REGISTER DT_SPARC_REGISTER;
MACRO_DT DT_STRSZ;
MACRO_DT DT_STRTAB;
delta_type DT_SUD;
MACRO_DT DT_SYMBOLIC;
MACRO_DT DT_SYMENT;
MACRO_DT DT_SYMINENT;
MACRO_DT DT_SYMINFO;
MACRO_DT DT_SYMINSZ;
MACRO_DT DT_SYMTAB;
MACRO_DT DT_TEXTREL;
delta_type DT_UD;
MACRO_DT DT_USED;
MACRO_DT DT_VALRNGHI;
MACRO_DT DT_VALRNGLO;
MACRO_DT DT_VERDEF;
MACRO_DT DT_VERDEFNUM;
MACRO_DT DT_VERNEED;
MACRO_DT DT_VERNEEDNUM;
MACRO_DUMPREG DUMPREG;
MACRO_DUMP DUMP_ALLOC;
MACRO_DUMP_MAGIC DUMP_COMPRESS_RATIO;
MACRO_DUMP DUMP_FREE;
MACRO_DUMP_MAGIC DUMP_LOGSIZE;
MACRO_DUMP_MAGIC DUMP_MAGIC;
MACRO_DUMP_MAGIC DUMP_OFFSET;
MACRO_DUMP_MAGIC DUMP_PANICSIZE;
MACRO_DUMP DUMP_SCAN;
MACRO_DUMP_MAGIC DUMP_VERSION;
MACRO_DUPCACHE DUPCACHE_FIXEDTIME;
MACRO_ERROR DUPLICATE_ERROR;
MACRO_DUP DUP_DONE;
MACRO_DUP DUP_DROP;
MACRO_DUP DUP_ERROR;
MACRO_DUP DUP_INPROGRESS;
MACRO_DUP DUP_NEW;
MACRO_DVC DVC_LEN;
MACRO_DVID DVID;
MACRO_DVSCN DVSCN;
MACRO_DV DV_NT_A;
MACRO_DV_NT DV_NT_E;
MACRO_DV DV_NT_K;
MACRO_D_MTINNER D_64BIT;
MACRO_D_MTINNER D_DEVMAP;
MACRO_D_T D_FMT;
MACRO_D_MTINNER D_HOTPLUG;
MACRO_D D_HUNG;
MACRO_D_MTINNER D_MP;
MACRO_D_MTINNER D_MTINNER_MOD;
MACRO_D_MTOCEXCL D_MTOCEXCL;
MACRO_D_MTINNER D_MTOUTER_MOD;
MACRO_D_MTOCEXCL D_MTOUTPERIM;
MACRO_D_MTOCEXCL D_MTPERMOD;
MACRO_D_MTOCEXCL D_MTPERQ;
MACRO_D_MTOCEXCL D_MTPUTSHARED;
MACRO_D_MTOCEXCL D_MTQPAIR;
MACRO_D_TAPE D_MTSAFE;
MACRO_D_NEW D_NEW;
MACRO_D_MTINNER D_SYNCSTR;
MACRO_D_TAPE D_TAPE;
MACRO_D_T D_T_FMT;
MACRO_ERRNO E2BIG;
MACRO_ERRNO EACCES;
MACRO_EUNDEF EACCESS;
MACRO_ERRNO EADDRINUSE;
MACRO_ERRNO EADDRNOTAVAIL;
MACRO_ERRNO EADV;
MACRO_ERRNO EAFNOSUPPORT;
MACRO_ERRNO EAGAIN;
MACRO_EAI EAI_ADDRFAMILY;
MACRO_EAI EAI_AGAIN;
MACRO_EAI EAI_BADFLAGS;
MACRO_EAI EAI_FAIL;
MACRO_EAI EAI_FAMILY;
MACRO_EAI EAI_MEMORY;
MACRO_EAI EAI_NODATA;
MACRO_EAI EAI_NONAME;
MACRO_EAI EAI_SERVICE;
MACRO_EAI EAI_SOCKTYPE;
MACRO_EAI EAI_SYSTEM;
MACRO_ERRNO EALREADY;
MACRO_ERRNO EBADE;
MACRO_ERRNO EBADF;
MACRO_ERRNO EBADFD;
MACRO_EBADID EBADID;
MACRO_ERRNO EBADMSG;
MACRO_ENOSPACE EBADOP;
MACRO_ERRNO EBADR;
MACRO_ERRNO EBADRQC;
MACRO_ERRNO EBADSLT;
MACRO_ERRNO EBFONT;
MACRO_EBSIZE EBSIZE;
MACRO_ERRNO EBUSY;
MACRO_EB EB_ARGV;
MACRO_EB EB_AUXV;
MACRO_EB EB_DEVZERO;
MACRO_EB EB_DYNAMIC;
MACRO_EB EB_ENVP;
MACRO_EB EB_LDSO_BASE;
MACRO_EB EB_MAX;
MACRO_EB EB_NULL;
MACRO_EB EB_PAGESIZE;
MACRO_EC EC;
MACRO_ERRNO ECANCELED;
desmode ECB;
MACRO_ERRNO ECHILD;
MACRO_ISIG ECHO;
MACRO_ISIG ECHOCTL;
MACRO_ISIG ECHOE;
MACRO_ISIG ECHOK;
MACRO_ISIG ECHOKE;
MACRO_ISIG ECHONL;
MACRO_ISIG ECHOPRT;
MACRO_ERRNO ECHRNG;
MACRO_ERRNO ECOMM;
MACRO_ERRNO ECONNABORTED;
MACRO_ERRNO ECONNREFUSED;
MACRO_ERRNO ECONNRESET;
MACRO_ECPP_MAX ECPP_AFX;
MACRO_ECPP ECPP_BYTE_MODE;
MACRO_ECPP ECPP_CENTRONICS;
MACRO_ECPP ECPP_COMPAT_MODE;
MACRO_ECPP_MAX ECPP_DCR_SET;
MACRO_ECPP ECPP_DIAG_MODE;
MACRO_ECPP_FIFO ECPP_DMA_ENABLE;
MACRO_ECPP ECPP_ECP_MODE;
MACRO_ECPP ECPP_FAILURE_MODE;
MACRO_ECPP_FIFO ECPP_FIFO_EMPTY;
MACRO_ECPP_FIFO ECPP_FIFO_FULL;
MACRO_ECPP ECPP_INIT_MODE;
MACRO_ECPP_MAX ECPP_INTR_EN;
MACRO_ECPP_FIFO ECPP_INTR_MASK;
MACRO_ECPP_FIFO ECPP_INTR_SRV;
MACRO_ECPP_MAX ECPP_MAX_TIMEOUT;
MACRO_ECPP ECPP_NIBBLE_MODE;
MACRO_ECPP_MAX ECPP_PE;
MACRO_ECPP_MAX ECPP_PORT_DMA;
MACRO_ECPP_MAX ECPP_PORT_PIO;
MACRO_ECPP_MAX ECPP_PORT_TDMA;
MACRO_ECPP_MAX ECPP_REV_DIR;
MACRO_ECPP_MAX ECPP_SLCT;
MACRO_ECPP_MAX ECPP_SLCTIN;
MACRO_ECPP_MAX ECPP_STB;
MACRO_ECPP_MAX ECPP_W_TIMEOUT_DEFAULT;
MACRO_ECPP_MAX ECPP_nACK;
MACRO_ECPP_MAX ECPP_nBUSY;
MACRO_ECPP_MAX ECPP_nERR;
MACRO_ECPP_MAX ECPP_nINIT;
MACRO_ECPP_MAX ECPP_reserved3;
MACRO_ECPP_MAX ECPP_reserved5;
MACRO_ECPP_MAX ECPP_reseverd1;
MACRO_ECPP_MAX ECPP_reseverd2;
MACRO_ECPP_MAX ECPP_reseverd4;
MACRO_ECR ECR_mode_000;
MACRO_ECR ECR_mode_001;
MACRO_ECR ECR_mode_010;
MACRO_ECR ECR_mode_011;
MACRO_ECR ECR_mode_110;
MACRO_ECR ECR_mode_111;
MACRO_ECTSIZE ECTSIZE;
MACRO_SR0 EC_SR0;
MACRO_EDC EDC_LENGTH_MASK;
MACRO_EDC EDC_TYPE_MASK;
MACRO_EDC EDC_TYPE_SHIFT;
MACRO_ERRNO EDEADLK;
MACRO_ERRNO EDEADLOCK;
MACRO_ERRNO EDESTADDRREQ;
MACRO_ERRNO EDOM;
MACRO_ERRNO EDQUOT;
MACRO_EEOL EEOL;
MACRO_EEOP EEOP;
MACRO_ERRNO EEXIST;
MACRO_EEXISTS EEXISTS;
MACRO_ERRNO EFAULT;
MACRO_ERRNO EFBIG;
MACRO_EF EF_IA_64_ABI64;
MACRO_EF EF_IA_64_ARCH;
MACRO_EF EF_IA_64_MASKOS;
MACRO_EF_M32 EF_M32_MAU;
MACRO_EF_SPARC EF_SPARCV9_MM;
MACRO_EF_SPARC EF_SPARCV9_PSO;
MACRO_EF_SPARC EF_SPARCV9_RMO;
MACRO_EF_SPARC EF_SPARCV9_TSO;
MACRO_EF_SPARC EF_SPARC_32PLUS;
MACRO_EF_SPARC EF_SPARC_32PLUS_MASK;
MACRO_EF_SPARC EF_SPARC_EXT_MASK;
MACRO_EF_SPARC EF_SPARC_HAL_R1;
MACRO_EF_SPARC EF_SPARC_SUN_US1;
MACRO_EF_SPARC EF_SPARC_SUN_US3;
MACRO_ERRNO EHOSTDOWN;
MACRO_ERRNO EHOSTUNREACH;
MACRO_ERRNO EIDRM;
MACRO_ERRNO EILSEQ;
MACRO_ERRNO EINPROGRESS;
MACRO_ERRNO EINTR;
MACRO_ERRNO EINVAL;
MACRO_ERRNO EIO;
MACRO_ERRNO EISCONN;
MACRO_ERRNO EISDIR;
MACRO_EI EI_CLASS;
MACRO_EI EI_DATA;
MACRO_EI_FLAG EI_FLAG_DIRTY;
MACRO_EI_FLAG EI_FLAG_PROT;
MACRO_EI EI_MAG0;
MACRO_EI EI_MAG1;
MACRO_EI EI_MAG2;
MACRO_EI EI_MAG3;
MACRO_EI EI_NIDENT;
MACRO_EI EI_PAD;
MACRO_EI EI_VERSION;
MACRO_EJECT EJECT;
MACRO_EJECT_DMA EJECT_DMA;
MACRO_EL EL;
MACRO_ERRNO EL2HLT;
MACRO_ERRNO EL2NSYNC;
MACRO_ERRNO EL3HLT;
MACRO_ERRNO EL3RST;
MACRO_ELF32 ELF32_FSZ_ADDR;
MACRO_ELF32 ELF32_FSZ_HALF;
MACRO_ELF32 ELF32_FSZ_OFF;
MACRO_ELF32 ELF32_FSZ_SWORD;
MACRO_ELF32 ELF32_FSZ_WORD;
MACRO_ELF64 ELF64_FSZ_ADDR;
MACRO_ELF64 ELF64_FSZ_HALF;
MACRO_ELF64 ELF64_FSZ_OFF;
MACRO_ELF64 ELF64_FSZ_SWORD;
MACRO_ELF64 ELF64_FSZ_SXWORD;
MACRO_ELF64 ELF64_FSZ_WORD;
MACRO_ELF64 ELF64_FSZ_XWORD;
MACRO_ELFCLASSNONE ELFCLASS32;
MACRO_ELFCLASSNONE ELFCLASS64;
MACRO_ELFCLASS64 ELFCLASS64_INTC;
MACRO_ELFCLASSNONE ELFCLASSNONE;
MACRO_ELFCLASSNUM ELFCLASSNUM;
MACRO_ELFDATANONE ELFDATA2LSB;
MACRO_ELFDATANONE ELFDATA2MSB;
MACRO_ELFDATANONE ELFDATANONE;
MACRO_ELFDATANUM ELFDATANUM;
MACRO_ELFMAG0 ELFMAG0;
MACRO_ELFMAG1 ELFMAG1;
MACRO_ELFMAG2 ELFMAG2;
MACRO_ELFMAG3 ELFMAG3;
MACRO_ELF_386 ELF_386_MAXPGSZ;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_CLR;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_FDDONE;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_FDREAD;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_IMAGE;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_NULL;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_NUM;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_RDWR;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_READ;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_SET;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_WRIMAGE;
$014516C156DA5201E9C0253C2C7BF2C9 ELF_C_WRITE;
MACRO_ELF ELF_F_DIRTY;
MACRO_ELF ELF_F_LAYOUT;
$401A9802811826260D9AA8000BA0BB75 ELF_K_AR;
$401A9802811826260D9AA8000BA0BB75 ELF_K_COFF;
$401A9802811826260D9AA8000BA0BB75 ELF_K_ELF;
$401A9802811826260D9AA8000BA0BB75 ELF_K_NONE;
$401A9802811826260D9AA8000BA0BB75 ELF_K_NUM;
MACRO_ELF_M32 ELF_M32_MAXPGSZ;
MACRO_ELF_M32 ELF_NOTE_PAGESIZE_HINT;
MACRO_ELF_SPARC ELF_SPARCV9_MAXPGSZ;
MACRO_ELF_SPARC ELF_SPARC_MAXPGSZ;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_ADDR;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_BYTE;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_DYN;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_EHDR;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_HALF;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_NUM;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_OFF;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_PHDR;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_REL;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_RELA;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_SHDR;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_SWORD;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_SXWORD;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_SYM;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_VDEF;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_VNEED;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_WORD;
$88495A355BB3E6D41AADF572D3BFAE21 ELF_T_XWORD;
MACRO_ERRNO ELIBACC;
MACRO_ERRNO ELIBBAD;
MACRO_ERRNO ELIBEXEC;
MACRO_ERRNO ELIBMAX;
MACRO_ERRNO ELIBSCN;
MACRO_ERRNO ELNRNG;
MACRO_ERRNO ELOCKUNMAPPED;
MACRO_ERRNO ELOOP;
MACRO_EMBED EMBED_XMIT;
MACRO_EMBED EMBED_XMIT_LEN;
MACRO_ERRNO EMFILE;
MACRO_EMINOR EMINOR_UNKNOWN;
MACRO_ERRNO EMLINK;
MACRO_EMPTY EMPTY;
MACRO_ERRNO EMSGSIZE;
MACRO_EMT EMT_CPCOVF;
MACRO_EMT EMT_TAGOVF;
MACRO_ERRNO EMULTIHOP;
MACRO_EM EM_386;
MACRO_EM EM_486;
MACRO_EM EM_68K;
MACRO_EM EM_860;
MACRO_EM EM_88K;
MACRO_EM_INIT EM_ADAPTER_INFO_ACK;
MACRO_EM_INIT EM_ADAPTER_INFO_REQ;
MACRO_EM_INIT EM_BADPRIM;
MACRO_EM_INIT EM_CLASS_SIZE;
MACRO_EM_INIT EM_CURRENT_VERSION;
MACRO_EM_EVENTSIZE EM_EVENTSIZE;
MACRO_EM_INIT EM_EVENT_IND;
MACRO_EM_INIT EM_EVENT_MASK_SIZE;
MACRO_EM_INIT EM_GET_FIRST_TUPLE_ACK;
MACRO_EM_INIT EM_GET_FIRST_TUPLE_REQ;
MACRO_EM_INIT EM_GET_NEXT_TUPLE_REQ;
MACRO_EM_INIT EM_GET_SOCKET_ACK;
MACRO_EM_INIT EM_GET_SOCKET_REQ;
MACRO_EM EM_IA_64;
MACRO_EM_INIT EM_IDENT_SOCKET_REQ;
MACRO_EM_INIT EM_INFO_ACK;
MACRO_EM_INIT EM_INFO_REQ;
MACRO_EM_INIT EM_INIT_ACK;
MACRO_EM_INIT EM_INIT_REQ;
MACRO_EM EM_M32;
MACRO_EM EM_MIPS;
MACRO_EM EM_MIPS_RS3_LE;
MACRO_EM_INIT EM_MODIFY_EVENT_MASK_REQ;
MACRO_EM EM_NONE;
MACRO_EM EM_NUM;
MACRO_EM EM_PA_RISC;
MACRO_EM EM_PPC;
MACRO_EM EM_RS6000;
MACRO_EM_INIT EM_SOCKET_INFO_ACK;
MACRO_EM_INIT EM_SOCKET_INFO_REQ;
MACRO_EM EM_SPARC;
MACRO_EM EM_SPARC32PLUS;
MACRO_EM EM_SPARCV9;
MACRO_EM EM_UNKNOWN12;
MACRO_EM EM_UNKNOWN13;
MACRO_EM EM_UNKNOWN14;
MACRO_EM EM_UNKNOWN19;
MACRO_EM EM_UNKNOWN9;
MACRO_EM_INIT EM_VERSION;
MACRO_EM EM_VPP500;
MACRO_EM EM_nCUBE;
MACRO_ERRNO ENAMETOOLONG;
MACRO_ENCI ENCI_SVALID;
desdir ENCRYPT;
MACRO_ENCSTAT ENCSTAT_CRITICAL;
MACRO_ENCSTAT ENCSTAT_INFO;
MACRO_ENCSTAT ENCSTAT_NONCRITICAL;
MACRO_ENCSTAT ENCSTAT_UNRECOV;
MACRO_END END_OF_SUA;
MACRO_END END_OF_SUA_PARSING;
MACRO_ERRNO ENETDOWN;
MACRO_ERRNO ENETRESET;
MACRO_ERRNO ENETUNREACH;
MACRO_ERRNO ENFILE;
MACRO_ENFS ENFS_TRYAGAIN;
MACRO_ENF ENF_AND;
MACRO_ENF ENF_CAND;
MACRO_ENF ENF_CNAND;
MACRO_ENF ENF_CNOR;
MACRO_ENF ENF_COR;
MACRO_ENF ENF_EQ;
MACRO_ENF ENF_GE;
MACRO_ENF ENF_GT;
MACRO_ENF ENF_LE;
MACRO_ENF ENF_LT;
MACRO_ENF ENF_NBPA;
MACRO_ENF ENF_NBPO;
MACRO_ENF ENF_NEQ;
MACRO_ENF ENF_NOP;
MACRO_ENF ENF_NOPUSH;
MACRO_ENF ENF_OR;
MACRO_ENF ENF_PUSH00FF;
MACRO_ENF ENF_PUSHFF00;
MACRO_ENF ENF_PUSHFFFF;
MACRO_ENF ENF_PUSHLIT;
MACRO_ENF ENF_PUSHONE;
MACRO_ENF ENF_PUSHWORD;
MACRO_ENF ENF_PUSHZERO;
MACRO_ENF ENF_XOR;
MACRO_ENMAXFILTERS ENMAXFILTERS;
MACRO_ERRNO ENOANO;
MACRO_ERRNO ENOBUFS;
MACRO_ERRNO ENOCSI;
MACRO_ERRNO ENODATA;
MACRO_ERRNO ENODEV;
MACRO_ERRNO ENOENT;
MACRO_ERRNO ENOEXEC;
MACRO_ERRNO ENOLCK;
MACRO_ERRNO ENOLINK;
MACRO_ERRNO ENOMEM;
MACRO_ERRNO ENOMSG;
MACRO_ERRNO ENONET;
MACRO_ERRNO ENOPKG;
MACRO_ERRNO ENOPROTOOPT;
MACRO_ENOSPACE ENOSPACE;
MACRO_ERRNO ENOSPC;
MACRO_ERRNO ENOSR;
MACRO_ERRNO ENOSTR;
MACRO_ERRNO ENOSYS;
MACRO_ERRNO ENOTACTIVE;
MACRO_ERRNO ENOTBLK;
MACRO_ERRNO ENOTCONN;
MACRO_ERRNO ENOTDIR;
MACRO_ERRNO ENOTEMPTY;
MACRO_EUNDEF ENOTFOUND;
MACRO_ERRNO ENOTRECOVERABLE;
MACRO_ERRNO ENOTSOCK;
MACRO_ERRNO ENOTSUP;
MACRO_ERRNO ENOTTY;
MACRO_ERRNO ENOTUNIQ;
MACRO_ENOUSER ENOUSER;
$EDBA1914F16BC538415B0E0A3A3FD3BB ENTER;
MACRO_ERROR ENTRY_ERROR;
zotypes ENTRY_OBJ;
MACRO_TOO_LONG ENTRY_TOO_LONG;
MACRO_CLONE ENUMERATED_DEV;
MACRO_ENV ENV_ESC;
MACRO_ENV ENV_USERVAR;
MACRO_ERRNO ENXIO;
MACRO_EN EN_ASN1;
MACRO_EN EN_BINARY;
MACRO_EN EN_CRYPT;
MACRO_EN EN_MODIFIED;
MACRO_SR1 EN_SR1;
MACRO_EN EN_XDR;
MACRO_EOF EOF;
MACRO_EOK EOK;
MACRO_ERRNO EOPNOTSUPP;
MACRO_EOR EOR;
MACRO_ERRNO EOVERFLOW;
MACRO_ERRNO EOWNERDEAD;
$414A75941736CF17FAE8ED5C32E2DBBB EO_GROUP;
$414A75941736CF17FAE8ED5C32E2DBBB EO_ITEM;
$414A75941736CF17FAE8ED5C32E2DBBB EO_NONE;
MACRO_ERRNO EPERM;
MACRO_ERRNO EPFNOSUPPORT;
MACRO_ERRNO EPIPE;
MACRO_EPL EPL;
MACRO_EPOCH EPOCH_WDAY;
MACRO_EPOCH EPOCH_YEAR;
MACRO_ERRNO EPROTO;
MACRO_ERRNO EPROTONOSUPPORT;
MACRO_ERRNO EPROTOTYPE;
MACRO_EPRT EPRT;
MACRO_EP EP_EXACCT_OBJECT;
MACRO_EP EP_RAW;
MACRO_ERA ERA;
MACRO_ERRNO ERANGE;
MACRO_ERA_D ERA_D_FMT;
MACRO_ERA_D ERA_D_T_FMT;
MACRO_ERA_D ERA_T_FMT;
MACRO_ERRNO EREMCHG;
MACRO_ERRNO EREMOTE;
MACRO_ERRNO ERESTART;
MACRO_ERRNO EROFS;
MACRO_ERR ERR;
MACRO_DEVFD ERRFD;
MACRO_ERRORKEY ERRORKEY;
MACRO_ER ER_EXT_ID_LOC;
MACRO_ESAME ESAME;
MACRO_ESC ESC;
MACRO_ESC1 ESC1_REV1;
MACRO_NDEFECT ESDI_NDEFECT;
MACRO_ERRNO ESHUTDOWN;
MACRO_ERRNO ESOCKTNOSUPPORT;
MACRO_ESP100 ESP100;
MACRO_NCR53C90 ESP100A;
MACRO_NCR53C90A ESP236;
MACRO_ERRNO ESPIPE;
MACRO_ESP_CLOCK ESP_CLOCK_DELAY;
MACRO_ESP_TEST ESP_CONF2_BYTECM;
MACRO_ESP_TEST ESP_CONF2_DMAPAR;
MACRO_ESP_TEST ESP_CONF2_FENABLE;
MACRO_ESP_TEST ESP_CONF2_REGPAR;
MACRO_ESP_TEST ESP_CONF2_RESETF;
MACRO_ESP_TEST ESP_CONF2_SCSI2;
MACRO_ESP_TEST ESP_CONF2_STATPL;
MACRO_ESP_TEST ESP_CONF2_TBADPAR;
MACRO_ESP_TEST ESP_CONF2_TRIDMA;
MACRO_ESP_TEST ESP_CONF3_100A_CDB10;
MACRO_ESP_TEST ESP_CONF3_100A_FASTCLK;
MACRO_ESP_TEST ESP_CONF3_100A_FASTSCSI;
MACRO_ESP_TEST ESP_CONF3_100A_IDRESCHK;
MACRO_ESP_TEST ESP_CONF3_100A_QUENB;
MACRO_ESP_TEST ESP_CONF3_236_ALTDMA;
MACRO_ESP_TEST ESP_CONF3_236_CDB10;
MACRO_ESP_TEST ESP_CONF3_236_FASTCLK;
MACRO_ESP_TEST ESP_CONF3_236_FASTSCSI;
MACRO_ESP_TEST ESP_CONF3_236_IDRESCHK;
MACRO_ESP_TEST ESP_CONF3_236_QUENB;
MACRO_ESP_TEST ESP_CONF3_236_SAVERESB;
MACRO_ESP_TEST ESP_CONF3_236_THRESH8;
MACRO_ESP ESP_CONF_BUSID;
MACRO_ESP ESP_CONF_CHIPTEST;
MACRO_ESP ESP_CONF_DISRINT;
MACRO_ESP ESP_CONF_PAREN;
MACRO_ESP ESP_CONF_PARTEST;
MACRO_ESP ESP_CONF_SLOWMODE;
MACRO_ESP_TEST ESP_FAS100A;
MACRO_ESP_TEST ESP_FAS236;
MACRO_ESP_TEST ESP_FCODE_MASK;
MACRO_ESP ESP_FIFO_ONZ;
MACRO_ESP ESP_INT_BUS;
MACRO_ESP ESP_INT_DISCON;
MACRO_ESP ESP_INT_FCMP;
MACRO_ESP ESP_INT_ILLEGAL;
MACRO_ESP ESP_INT_RESEL;
MACRO_ESP ESP_INT_RESET;
MACRO_ESP ESP_INT_SEL;
MACRO_ESP ESP_INT_SELATN;
MACRO_ESP ESP_PHASE_COMMAND;
MACRO_ESP ESP_PHASE_DATA_IN;
MACRO_ESP ESP_PHASE_DATA_OUT;
MACRO_ESP ESP_PHASE_MASK;
MACRO_ESP ESP_PHASE_MSG_IN;
MACRO_ESP ESP_PHASE_MSG_OUT;
MACRO_ESP ESP_PHASE_STATUS;
MACRO_ESP_TEST ESP_REV_MASK;
MACRO_ESP_SIZE ESP_SIZE;
MACRO_ESP ESP_STAT_CD;
MACRO_ESP ESP_STAT_GERR;
MACRO_ESP ESP_STAT_IO;
MACRO_ESP ESP_STAT_IPEND;
MACRO_ESP ESP_STAT_MSG;
MACRO_ESP ESP_STAT_PERR;
MACRO_ESP ESP_STAT_RES;
MACRO_ESP ESP_STAT_XCMP;
MACRO_ESP ESP_STAT_XZERO;
MACRO_ESP ESP_STEP_ARBSEL;
MACRO_ESP ESP_STEP_DONE;
MACRO_ESP ESP_STEP_DONE5;
MACRO_ESP ESP_STEP_DONE6;
MACRO_ESP ESP_STEP_DONE7;
MACRO_ESP ESP_STEP_MASK;
MACRO_ESP ESP_STEP_NOTCMD;
MACRO_ESP ESP_STEP_PCMD;
MACRO_ESP ESP_STEP_SENTID;
MACRO_ESP_TEST ESP_TEST_INI;
MACRO_ESP_TEST ESP_TEST_TGT;
MACRO_ESP_TEST ESP_TEST_TRI;
MACRO_ERRNO ESRCH;
MACRO_ERRNO ESRMNT;
MACRO_ERRNO ESTALE;
MACRO_ERRNO ESTRPIPE;
MACRO_ES ES_RSM_MAX_DRIVES;
MACRO_ES ES_RSM_MAX_FANS;
MACRO_ES ES_RSM_MAX_PWMS;
MACRO_ES ES_RSM_MAX_TEMPS;
MACRO_ETHERADDRL ETHERADDRL;
MACRO_ETHERFCSL ETHERFCSL;
MACRO_ETHERMAX ETHERMAX;
MACRO_ETHERMIN ETHERMIN;
MACRO_ETHERMTU ETHERMTU;
MACRO_ETHERTYPE ETHERTYPE_ARP;
MACRO_ETHERTYPE ETHERTYPE_IP;
MACRO_ETHERTYPE ETHERTYPE_IPV6;
MACRO_ETHERTYPE ETHERTYPE_MAX;
MACRO_ETHERTYPE ETHERTYPE_NTRAILER;
MACRO_ETHERTYPE ETHERTYPE_PUP;
MACRO_ETHERTYPE ETHERTYPE_REVARP;
MACRO_ETHERTYPE ETHERTYPE_TRAIL;
MACRO_ADDR_SIZE ETHER_ADDR_SIZE;
MACRO_ERRNO ETIME;
MACRO_ERRNO ETIMEDOUT;
MACRO_ERRNO ETOOMANYREFS;
MACRO_ERRNO ETXTBSY;
MACRO_ET ET_CORE;
MACRO_ET ET_DYN;
MACRO_ET ET_EXEC;
MACRO_ET ET_HIPROC;
MACRO_ET ET_LOPROC;
MACRO_ET ET_NONE;
MACRO_ET ET_NUM;
MACRO_ET ET_REL;
MACRO_EUCIN EUCIN;
MACRO_EUCMASK EUCMASK;
MACRO_EUCIN EUCOUT;
MACRO_EUC EUC_BCAST;
MACRO_EUC_TWIDTH EUC_BSWIDTH;
MACRO_EUC EUC_B_CANON;
MACRO_EUC EUC_B_RAW;
MACRO_EUC_TWIDTH EUC_CRWIDTH;
MACRO_EUC_FIRST EUC_FIRST;
MACRO_EUC EUC_IOC;
MACRO_EUC EUC_IXLOFF;
MACRO_EUC EUC_IXLON;
MACRO_EUC_FIRST EUC_LAST;
MACRO_EUC_MAXW EUC_MAXW;
MACRO_EUC EUC_MREST;
MACRO_EUC EUC_MSAVE;
MACRO_EUC_TWIDTH EUC_NLWIDTH;
MACRO_EUC EUC_OXLOFF;
MACRO_EUC EUC_OXLON;
MACRO_EUC_TWIDTH EUC_TWIDTH;
MACRO_EUC_MAXW EUC_WARNCNT;
MACRO_EUC EUC_WGET;
MACRO_EUC EUC_WSET;
MACRO_ERRNO EUNATCH;
MACRO_EUNDEF EUNDEF;
MACRO_EUP EUP_ALLOC;
MACRO_EUP EUP_ALLOC_MASK;
MACRO_EUP EUP_NOALLOC;
MACRO_ERRNO EUSERS;
MACRO_EVC EVC_BUCKETS;
MACRO_LCASE EVENP;
MACRO_EVENT EVENT_BUT1;
MACRO_EVENT EVENT_BUT2;
MACRO_EVENT EVENT_BUT3;
MACRO_EVENT EVENT_X;
MACRO_EVENT EVENT_Y;
MACRO_EVEN EVEN_P;
MACRO_EV EV_CURRENT;
MACRO_EV EV_NONE;
MACRO_EV EV_NUM;
MACRO_ERRNO EWOULDBLOCK;
MACRO_EW EW_FINAL;
MACRO_EW EW_INTERVAL;
MACRO_EW EW_PARTIAL;
MACRO_EXABYTE EXABYTE_MIN_TRANSFER;
MACRO_EXABYTE EXABYTE_READ_ERROR_THRESHOLD;
MACRO_EXABYTE EXABYTE_WRITE_ERROR_THRESHOLD;
MACRO_EXACCT_MAX EXACCT_MAX_BUFSIZE;
MACRO_EXACCT EXACCT_VERSION;
MACRO_EXCESSIVE EXCESSIVE_SEQUENCES;
MACRO_EXCHANGE EXCHANGE_ERROR;
vcexcl EXCL;
createmode3 EXCLUSIVE;
MACRO_EXC EXC_CATALOG_MASK;
MACRO_EXC EXC_DEFAULT;
MACRO_FKEY EXC_FAIL;
MACRO_EXC EXC_LOCAL;
MACRO_EXC EXC_NONE;
MACRO_ERRNO EXDEV;
MACRO_EXD EXD_CREATOR;
MACRO_EXD EXD_DATA_MASK;
MACRO_EXD EXD_FILETYPE;
MACRO_EXD EXD_GROUP_HEADER;
MACRO_EXD EXD_GROUP_LWP;
MACRO_EXD EXD_GROUP_LWP_TAG;
MACRO_EXD EXD_GROUP_PROC;
MACRO_EXD EXD_GROUP_PROC_PARTIAL;
MACRO_EXD EXD_GROUP_PROC_TAG;
MACRO_EXD EXD_GROUP_TASK;
MACRO_EXD EXD_GROUP_TASK_INTERVAL;
MACRO_EXD EXD_GROUP_TASK_PARTIAL;
MACRO_EXD EXD_GROUP_TASK_TAG;
MACRO_EXD EXD_HOSTNAME;
MACRO_EXD EXD_NONE;
MACRO_EXD EXD_PROC_ACCT_FLAGS;
MACRO_EXD EXD_PROC_BLOCKS_IN;
MACRO_EXD EXD_PROC_BLOCKS_OUT;
MACRO_EXD EXD_PROC_CHARS_RDWR;
MACRO_EXD EXD_PROC_COMMAND;
MACRO_EXD EXD_PROC_CONTEXT_INV;
MACRO_EXD EXD_PROC_CONTEXT_VOL;
MACRO_EXD EXD_PROC_CPU_SYS_NSEC;
MACRO_EXD EXD_PROC_CPU_SYS_SEC;
MACRO_EXD EXD_PROC_CPU_USER_NSEC;
MACRO_EXD EXD_PROC_CPU_USER_SEC;
MACRO_EXD EXD_PROC_FAULTS_MAJOR;
MACRO_EXD EXD_PROC_FAULTS_MINOR;
MACRO_EXD EXD_PROC_FINISH_NSEC;
MACRO_EXD EXD_PROC_FINISH_SEC;
MACRO_EXD EXD_PROC_GID;
MACRO_EXD EXD_PROC_HOSTNAME;
MACRO_EXD EXD_PROC_MESSAGES_RCV;
MACRO_EXD EXD_PROC_MESSAGES_SND;
MACRO_EXD EXD_PROC_PID;
MACRO_EXD EXD_PROC_PROJID;
MACRO_EXD EXD_PROC_SIGNALS;
MACRO_EXD EXD_PROC_START_NSEC;
MACRO_EXD EXD_PROC_START_SEC;
MACRO_EXD EXD_PROC_SWAPS;
MACRO_EXD EXD_PROC_SYSCALLS;
MACRO_EXD EXD_PROC_TAG;
MACRO_EXD EXD_PROC_TASKID;
MACRO_EXD EXD_PROC_TTY_MAJOR;
MACRO_EXD EXD_PROC_TTY_MINOR;
MACRO_EXD EXD_PROC_UID;
MACRO_EXD EXD_TASK_BLOCKS_IN;
MACRO_EXD EXD_TASK_BLOCKS_OUT;
MACRO_EXD EXD_TASK_CHARS_RDWR;
MACRO_EXD EXD_TASK_CONTEXT_INV;
MACRO_EXD EXD_TASK_CONTEXT_VOL;
MACRO_EXD EXD_TASK_CPU_SYS_NSEC;
MACRO_EXD EXD_TASK_CPU_SYS_SEC;
MACRO_EXD EXD_TASK_CPU_USER_NSEC;
MACRO_EXD EXD_TASK_CPU_USER_SEC;
MACRO_EXD EXD_TASK_FAULTS_MAJOR;
MACRO_EXD EXD_TASK_FAULTS_MINOR;
MACRO_EXD EXD_TASK_FINISH_NSEC;
MACRO_EXD EXD_TASK_FINISH_SEC;
MACRO_EXD EXD_TASK_HOSTNAME;
MACRO_EXD EXD_TASK_MESSAGES_RCV;
MACRO_EXD EXD_TASK_MESSAGES_SND;
MACRO_EXD EXD_TASK_PROJID;
MACRO_EXD EXD_TASK_SIGNALS;
MACRO_EXD EXD_TASK_START_NSEC;
MACRO_EXD EXD_TASK_START_SEC;
MACRO_EXD EXD_TASK_SWAPS;
MACRO_EXD EXD_TASK_SYSCALLS;
MACRO_EXD EXD_TASK_TAG;
MACRO_EXD EXD_TASK_TASKID;
MACRO_EXD EXD_VERSION;
MACRO_EXECATTR EXECATTR_DB_NCOL;
MACRO_EXECATTR EXECATTR_DB_NKEYCOL;
MACRO_EXECATTR EXECATTR_KEYCOL0;
MACRO_EXECATTR EXECATTR_KEYCOL1;
MACRO_ERRNO EXFULL;
MACRO_SSYS EXITLWPS;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_EXPAND EXPAND_NAME;
MACRO_EXPER EXPER;
MACRO_EXPER_IGMP EXPER_DVMRP;
MACRO_EXPER_DVMRP EXPER_DVMRP_MRT;
MACRO_EXPER_DVMRP EXPER_DVMRP_VIF;
MACRO_EXPER_IGMP EXPER_IGMP;
MACRO_EXPER_IP EXPER_IP6_GROUP_MEMBERSHIP;
MACRO_EXPER_IP EXPER_IP_GROUP_MEMBERSHIP;
MACRO_EXPER_IGMP EXPER_RANGE_END;
MACRO_EXPER_IGMP EXPER_RANGE_START;
MACRO_EXPER_IGMP EXPER_RAWIP;
MACRO_EXPINLINE EXPINLINE;
MACRO_EXPIRE EXPIRE_TIME;
MACRO_HNAMLEN EXPNLEN;
nfssys_op EXPORTFS;
MACRO_COLL EXPR_NEST_MAX;
MACRO_EXR EXR_CORRUPT_FILE;
MACRO_EXR EXR_EOF;
MACRO_EXR EXR_INVALID_BUF;
MACRO_EXR EXR_NOTSUPP;
MACRO_EXR EXR_NO_CREATOR;
MACRO_EXR EXR_OK;
MACRO_EXR EXR_SYSCALL_FAIL;
MACRO_EXR EXR_UNKN_VERSION;
MACRO_EXTA EXTA;
MACRO_EXTB EXTB;
MACRO_EXTDOS EXTDOS;
MACRO_BIAS EXTENDED_BIAS;
MACRO_BUSY_0 EXTPROC;
MACRO_EXTRA EXTRA_ALLOC;
MACRO_EXT EXT_DOUBLE;
MACRO_EXT EXT_EXACCT_OBJECT;
MACRO_EXT EXT_GROUP;
MACRO_EXT EXT_NONE;
MACRO_EXT EXT_RAW;
MACRO_EXT EXT_STRING;
MACRO_EXT EXT_TYPE_MASK;
MACRO_EXT EXT_UINT16;
MACRO_EXT EXT_UINT32;
MACRO_EXT EXT_UINT64;
MACRO_EXT EXT_UINT8;
MACRO_EX_CURRENT EX_ACLOK;
MACRO_EX_SUCCESS EX_BADARG;
MACRO_EX_SUCCESS EX_BUSY;
MACRO_EX EX_CANTCREAT;
MACRO_EX EX_CONFIG;
MACRO_EX_CURRENT EX_CURRENT_VERSION;
MACRO_EX EX_DATAERR;
MACRO_EX_SUCCESS EX_FAILURE;
MACRO_EX_SUCCESS EX_HOMEDIR;
MACRO_EX_SUCCESS EX_ID_EXISTS;
MACRO_EX_SUCCESS EX_INCONSISTENT;
MACRO_EX_CURRENT EX_INDEX;
MACRO_EX EX_IOERR;
MACRO_EX_CURRENT EX_LOG;
MACRO_EX_CURRENT EX_LOG_ALLOPS;
MACRO_EX_SUCCESS EX_MISSING;
MACRO_EX_SUCCESS EX_NAME_EXISTS;
MACRO_EX_SUCCESS EX_NAME_NOT_EXIST;
MACRO_EX_SUCCESS EX_NL_USED;
MACRO_EX EX_NOHOST;
MACRO_EX EX_NOINPUT;
MACRO_EX EX_NOPERM;
MACRO_EX_SUCCESS EX_NOSPACE;
MACRO_EX_CURRENT EX_NOSUB;
MACRO_EX_CURRENT EX_NOSUID;
MACRO_EX EX_NOTFOUND;
MACRO_EX EX_NOUSER;
MACRO_EX_SUCCESS EX_NO_PERM;
MACRO_EX EX_OK;
MACRO_EX EX_OSERR;
MACRO_EX EX_OSFILE;
MACRO_EX EX_PROTOCOL;
MACRO_EX_CURRENT EX_PUBLIC;
MACRO_EX EX_SOFTWARE;
MACRO_EX_SUCCESS EX_SUCCESS;
MACRO_EX_SUCCESS EX_SYNTAX;
MACRO_EX EX_TEMPFAIL;
MACRO_EX EX_UNAVAILABLE;
MACRO_EX_SUCCESS EX_UPDATE;
MACRO_EX EX_USAGE;
MACRO_EX EX__BASE;
MACRO_EX EX__MAX;
MACRO_E_BADARGS E_BADARGS;
MACRO_E E_BAD_ARGUMENT;
MACRO_E E_BAD_STATE;
MACRO_E E_CONNECTED;
MACRO_E E_CURRENT;
MACRO_E_BADARGS E_DUP;
MACRO_E E_INVALID_FIELD;
MACRO_E_BADARGS E_NOEXIST;
MACRO_E_BADARGS E_NOPRIV;
MACRO_E E_NOT_CONNECTED;
MACRO_E E_NOT_POSTED;
MACRO_E E_NOT_SELECTABLE;
MACRO_E E_NO_MATCH;
MACRO_E E_NO_ROOM;
MACRO_E E_OK;
MACRO_E_BADARGS E_PMNOTRUN;
MACRO_E_BADARGS E_PMRUN;
MACRO_E E_POSTED;
MACRO_E_BADARGS E_RECOVER;
MACRO_E E_REQUEST_DENIED;
MACRO_E_BADARGS E_SACNOTRUN;
MACRO_E_BADARGS E_SAFERR;
MACRO_E_BADARGS E_SYSERR;
MACRO_E E_SYSTEM_ERROR;
MACRO_E E_UNKNOWN_COMMAND;
MACRO_FABRIC FABRIC_BUSY;
MACRO_FAD FAD_READ;
MACRO_FAD FAD_WRITE;
MACRO_TRANSFER FAKEOUT_TIMEOUT;
MACRO_BOOL FALSE;
MACRO_FREAD FAPPEND;
MACRO_FER FAR;
MACRO_FAS100 FAS100;
MACRO_FAS100A FAS100A;
MACRO_FAS100A FAS236;
MACRO_FAS366 FAS366;
MACRO_FAST FAST;
MACRO_FASTSCSI FASTSCSI_THRESHOLD;
MACRO_FCREAT FASYNC;
MACRO_FAS_STAT2 FAS_BUSID_32BIT_COUNTER;
MACRO_FAS_STAT2 FAS_BUSID_ENCODID;
MACRO_FAS_STAT FAS_CLOCK_DELAY;
MACRO_FAS_STAT FAS_CONF2_DMA_PRTY_ENABLE;
MACRO_FAS_STAT FAS_CONF2_FENABLE;
MACRO_FAS_STAT FAS_CONF2_MKDONE;
MACRO_FAS_STAT FAS_CONF2_PAUSE_INTR_DISABLE;
MACRO_FAS_STAT FAS_CONF2_SCSI2;
MACRO_FAS_STAT FAS_CONF2_TGT_BAD_PRTY_ABORT;
MACRO_FAS_STAT FAS_CONF2_XL32;
MACRO_FAS_STAT FAS_CONF3_CDB10;
MACRO_FAS_STAT FAS_CONF3_FASTCLK;
MACRO_FAS_STAT FAS_CONF3_FASTSCSI;
MACRO_FAS_STAT FAS_CONF3_IDBIT3;
MACRO_FAS_STAT FAS_CONF3_IDRESCHK;
MACRO_FAS_STAT FAS_CONF3_ODDBYTE_AUTO;
MACRO_FAS_STAT FAS_CONF3_QUENB;
MACRO_FAS_STAT FAS_CONF3_WIDE;
MACRO_FAS_STAT FAS_CONF4_PADMSGS;
MACRO_FAS_STAT FAS_CONF_BUSID;
MACRO_FAS_STAT FAS_CONF_CHIPTEST;
MACRO_FAS_STAT FAS_CONF_DISRINT;
MACRO_FAS_STAT FAS_CONF_PAREN;
MACRO_FAS_STAT FAS_CONF_PARTEST;
MACRO_FAS_STAT FAS_CONF_SLOWMODE;
MACRO_FAS_STAT FAS_FCODE_MASK;
MACRO_FAS FAS_FIFO_ONZ;
MACRO_FAS_STAT FAS_INT_BUS;
MACRO_FAS_STAT FAS_INT_DISCON;
MACRO_FAS_STAT FAS_INT_FCMP;
MACRO_FAS_STAT FAS_INT_ILLEGAL;
MACRO_FAS_STAT FAS_INT_RESEL;
MACRO_FAS_STAT FAS_INT_RESET;
MACRO_FAS_STAT FAS_INT_SEL;
MACRO_FAS_STAT FAS_INT_SELATN;
MACRO_FAS_STAT FAS_PHASE_COMMAND;
MACRO_FAS_STAT FAS_PHASE_DATA_IN;
MACRO_FAS_STAT FAS_PHASE_DATA_OUT;
MACRO_FAS_STAT FAS_PHASE_MASK;
MACRO_FAS_STAT FAS_PHASE_MSG_IN;
MACRO_FAS_STAT FAS_PHASE_MSG_OUT;
MACRO_FAS_STAT FAS_PHASE_STATUS;
MACRO_FAS_STAT FAS_REV_MASK;
MACRO_FAS_STAT2 FAS_STAT2_CACTIVE;
MACRO_FAS_STAT2 FAS_STAT2_CLATCHED;
MACRO_FAS_STAT2 FAS_STAT2_EMPTY;
MACRO_FAS_STAT2 FAS_STAT2_FLATCHED;
MACRO_FAS_STAT2 FAS_STAT2_ISHUTTLE;
MACRO_FAS_STAT2 FAS_STAT2_OSHUTTLE;
MACRO_FAS_STAT2 FAS_STAT2_SCSI16;
MACRO_FAS_STAT2 FAS_STAT2_SEQCNT;
MACRO_FAS_STAT FAS_STAT_CD;
MACRO_FAS_STAT FAS_STAT_GERR;
MACRO_FAS_STAT FAS_STAT_IO;
MACRO_FAS_STAT FAS_STAT_IPEND;
MACRO_FAS_STAT FAS_STAT_MSG;
MACRO_FAS_STAT FAS_STAT_PERR;
MACRO_FAS_STAT FAS_STAT_XCMP;
MACRO_FAS_STAT FAS_STAT_XZERO;
MACRO_FAS_STAT FAS_STEP_ARBSEL;
MACRO_FAS_STAT FAS_STEP_DONE;
MACRO_FAS_STAT FAS_STEP_MASK;
MACRO_FAS_STAT FAS_STEP_NOTCMD;
MACRO_FAS_STAT FAS_STEP_PCMD;
MACRO_FAS_STAT FAS_STEP_SENTID;
MACRO_FAS_STAT FAS_TEST_INI;
MACRO_FAS_STAT FAS_TEST_TGT;
MACRO_FAS_STAT FAS_TEST_TRI;
MACRO_FAT32 FAT32_BOOT_FSINFO_OFF;
MACRO_FAT32 FAT32_FS_SIGN;
MACRO_FA FA_ACUTE;
MACRO_FA FA_CEDILLA;
MACRO_FA FA_CFLEX;
MACRO_FA FA_CLASS;
MACRO_FA FA_GRAVE;
MACRO_FA FA_TILDE;
MACRO_FA FA_UMLAUT;
MACRO_FBDBL FBDBL_A;
MACRO_FBDBL FBDBL_AVAIL;
MACRO_FBDBL FBDBL_AVAIL_PG;
MACRO_FBDBL FBDBL_B;
MACRO_FBDBL FBDBL_BOTH;
MACRO_FBDBL FBDBL_DONT_BLOCK;
MACRO_FBDBL FBDBL_NONE;
MACRO_FBIOAVAILPLNGRP FBIOAVAILPLNGRP;
MACRO_FBIODBLGINFO FBIODBLGINFO;
MACRO_FBIODBLSINFO FBIODBLSINFO;
MACRO_FBIOGATTR FBIOGATTR;
MACRO_FBIOGCMSIZE FBIOGCMSIZE;
MACRO_FBIOGCURMAX FBIOGCURMAX;
MACRO_FBIOGCURPOS FBIOGCURPOS;
MACRO_FBIOGCURSOR FBIOGCURSOR;
MACRO_FBIOGETCMAP FBIOGETCMAP;
MACRO_FBIOGETCMAPI FBIOGETCMAPI;
MACRO_FBIOGINFO FBIOGINFO;
MACRO_FBIOGPLNGRP FBIOGPLNGRP;
MACRO_FBIOGTYPE FBIOGTYPE;
MACRO_FBIOGVIDEO FBIOGVIDEO;
MACRO_FBIOGXINFO FBIOGXINFO;
MACRO_FBIOMONINFO FBIOMONINFO;
MACRO_FBIOPUTCMAP FBIOPUTCMAP;
MACRO_FBIOPUTCMAPI FBIOPUTCMAPI;
MACRO_FBIORESWINFD FBIORESWINFD;
MACRO_FBIOSATTR FBIOSATTR;
MACRO_FBIOSAVWINFD FBIOSAVWINFD;
MACRO_FBIOSCMS FBIOSCMS;
MACRO_FBIOSCMSIZE FBIOSCMSIZE;
MACRO_FBIOSCURPOS FBIOSCURPOS;
MACRO_FBIOSCURSOR FBIOSCURSOR;
MACRO_FBIOSRWINFD FBIOSRWINFD;
MACRO_FBIOSVIDEO FBIOSVIDEO;
MACRO_FBIOSWINFD FBIOSWINFD;
MACRO_FBIOVERTICAL FBIOVERTICAL;
MACRO_FBIOVRTOFFSET FBIOVRTOFFSET;
MACRO_FBIO_ASSIGNWID FBIO_ASSIGNWID;
MACRO_FBIO FBIO_DEVID;
MACRO_FBIO FBIO_FULLSCREEN_ELIMINATION_GROUPS;
MACRO_FBIO_ASSIGNWID FBIO_STEREO;
MACRO_FBIO FBIO_U_RST;
MACRO_FBIO FBIO_WID_ALLOC;
MACRO_FBIO FBIO_WID_DBL_SET;
MACRO_FBIO FBIO_WID_FREE;
MACRO_FBIO FBIO_WID_GET;
MACRO_FBIO FBIO_WID_PUT;
MACRO_FBTYPE FBTYPE_LASTPLUSONE;
MACRO_FBTYPE FBTYPE_MDICOLOR;
MACRO_FBTYPE FBTYPE_MEMCOLOR;
MACRO_FBTYPE FBTYPE_NOTSUN1;
MACRO_FBTYPE FBTYPE_NOTSUN2;
MACRO_FBTYPE FBTYPE_NOTSUN3;
MACRO_FBTYPE FBTYPE_NOTYPE;
MACRO_FBTYPE FBTYPE_SUN1BW;
MACRO_FBTYPE FBTYPE_SUN1COLOR;
MACRO_FBTYPE FBTYPE_SUN2BW;
MACRO_FBTYPE FBTYPE_SUN2COLOR;
MACRO_FBTYPE FBTYPE_SUN2GP;
MACRO_FBTYPE FBTYPE_SUN3COLOR;
MACRO_FBTYPE FBTYPE_SUN4COLOR;
MACRO_FBTYPE FBTYPE_SUN5COLOR;
MACRO_FBTYPE FBTYPE_SUNFAST_COLOR;
MACRO_FBTYPE FBTYPE_SUNFB_VIDEO;
MACRO_FBTYPE FBTYPE_SUNGIFB;
MACRO_FBTYPE FBTYPE_SUNGP3;
MACRO_FBTYPE FBTYPE_SUNGPLAS;
MACRO_FBTYPE FBTYPE_SUNGT;
MACRO_FBTYPE FBTYPE_SUNLEO;
MACRO_FBTYPE FBTYPE_SUNROP_COLOR;
MACRO_FBVIDEO FBVIDEO_OFF;
MACRO_FBVIDEO FBVIDEO_ON;
MACRO_FB FB_ATTR_AUTOINIT;
MACRO_FB FB_ATTR_DEVSPECIFIC;
MACRO_FB FB_ATTR_NDEVSPECIFIC;
MACRO_FB FB_ATTR_NEMUTYPES;
MACRO_FB_CMAP FB_CMAP_BLOCK;
MACRO_FB_CMAP FB_CMAP_KERNEL;
MACRO_FB_CUR FB_CUR_SETALL;
MACRO_FB_CUR FB_CUR_SETCMAP;
MACRO_FB_CUR FB_CUR_SETCUR;
MACRO_FB_CUR FB_CUR_SETHOT;
MACRO_FB_CUR FB_CUR_SETPOS;
MACRO_FB_CUR FB_CUR_SETSHAPE;
MACRO_FB_WID FB_WID_DBL_24;
MACRO_FB_WID FB_WID_DBL_8;
MACRO_FB_WID FB_WID_SHARED_24;
MACRO_FB_WID FB_WID_SHARED_8;
MACRO_FB_WIN FB_WIN_STEREO;
MACRO_FCAL FCAL_STATUS_ABORTED;
MACRO_FCAL FCAL_STATUS_ABORT_FAILED;
MACRO_FCAL FCAL_STATUS_ALLOC_FAIL;
MACRO_FCAL FCAL_STATUS_AL_PORT;
MACRO_FCAL FCAL_STATUS_BAD_DID;
MACRO_FCAL FCAL_STATUS_BAD_POOL_ID;
MACRO_FCAL FCAL_STATUS_BAD_SEG_CNT;
MACRO_FCAL FCAL_STATUS_BAD_SID;
MACRO_FCAL FCAL_STATUS_BAD_XID;
MACRO_FCAL FCAL_STATUS_CRC_ERR;
MACRO_FCAL FCAL_STATUS_DIAG_BUSY;
MACRO_FCAL FCAL_STATUS_DIAG_INVALID;
MACRO_FCAL FCAL_STATUS_ERROR;
MACRO_FCAL FCAL_STATUS_ERR_OFFLINE;
MACRO_FCAL FCAL_STATUS_ERR_OVERRUN;
MACRO_FCAL FCAL_STATUS_F_BSY;
MACRO_FCAL FCAL_STATUS_F_RJT;
MACRO_FCAL FCAL_STATUS_INCOMPLETE_DMA_ERR;
MACRO_FCAL FCAL_STATUS_INSUFFICIENT_CQES;
MACRO_FCAL FCAL_STATUS_LOOP_ONLINE;
MACRO_FCAL FCAL_STATUS_MAX_STATUS;
MACRO_FCAL FCAL_STATUS_MAX_XCHG_EXCEEDED;
MACRO_FCAL FCAL_STATUS_NO_SEQ_INIT;
MACRO_FCAL FCAL_STATUS_OK;
MACRO_FCAL FCAL_STATUS_OLDPORT_ONLINE;
MACRO_FCAL FCAL_STATUS_OLD_PORT;
MACRO_FCAL FCAL_STATUS_ONLINE;
MACRO_FCAL FCAL_STATUS_ONLINE_TIMEOUT;
MACRO_FCAL FCAL_STATUS_OPEN_FAIL;
MACRO_FCAL FCAL_STATUS_P_BSY;
MACRO_FCAL FCAL_STATUS_P_RJT;
MACRO_FCAL FCAL_STATUS_TIMEOUT;
MACRO_FCAL FCAL_STATUS_UNKNOWN_CQ_TYPE;
MACRO_FCAL FCAL_STATUS_XCHG_BUSY;
MACRO_FCFLAG FCFLAG_COMPLETE;
MACRO_FCFLAG FCFLAG_NOINTR;
MACRO_ATEXIT FCHR_MAX;
MACRO_FCIO_BYPASS FCIO_ADISC_ELS;
MACRO_FCIO_BYPASS FCIO_BYPASS_DEV;
MACRO_FCIO_BYPASS FCIO_DIAG_EXTLB;
MACRO_FCIO_BYPASS FCIO_DIAG_HCB;
MACRO_FCIO_BYPASS FCIO_DIAG_NOP;
MACRO_FCIO_BYPASS FCIO_DIAG_RAW;
MACRO_FCIO_BYPASS FCIO_DIAG_SOC;
MACRO_FCIO_BYPASS FCIO_DIAG_SOCLB;
MACRO_FCIO_BYPASS FCIO_DIAG_SRDSLB;
MACRO_FCIO_BYPASS FCIO_DIAG_XRAM;
MACRO_FCIO_BYPASS FCIO_DUMPXRAM;
MACRO_FCIO_BYPASS FCIO_DUMPXRAMBUF;
MACRO_FCIO FCIO_FCODE_MCODE_VERSION;
MACRO_FCIO FCIO_FORCE_LIP;
MACRO_FCIO_BYPASS FCIO_FORCE_OFFLINE;
MACRO_FCIO FCIO_GETMAP;
MACRO_FCIO FCIO_LINKSTATUS;
MACRO_FCIO_BYPASS FCIO_LOADUCODE;
MACRO_FCIO_BYPASS FCIO_LOOPBACK_FRAME;
MACRO_FCIO_BYPASS FCIO_LOOPBACK_INTERNAL;
MACRO_FCIO_BYPASS FCIO_LOOPBACK_MANUAL;
MACRO_FCIO_BYPASS FCIO_NO_LOOPBACK;
MACRO_FCP FCP_CDB_SIZE;
MACRO_FCP FCP_CMND_INVALID;
MACRO_FCP FCP_DATA_RO_MISMATCH;
MACRO_FCP FCP_DL_LEN_MISMATCH;
MACRO_FCP FCP_LUN_SIZE;
MACRO_FCP FCP_MAX_RSP_IU_SIZE;
MACRO_FCP FCP_NO_FAILURE;
MACRO_FCP FCP_QTYPE_ACA_Q_TAG;
MACRO_FCP FCP_QTYPE_HEAD_OF_Q;
MACRO_FCP FCP_QTYPE_ORDERED;
MACRO_FCP FCP_QTYPE_SIMPLE;
MACRO_FCP FCP_QTYPE_UNTAGGED;
MACRO_FCP_RSP FCP_RSP_SCSI_BUS_ERR;
MACRO_FCP_RSP FCP_RSP_SCSI_PORT_ERR;
MACRO_FCP_RSP FCP_RSP_SOC_ERR;
MACRO_FCP FCP_SCSI_CMD;
MACRO_FCP FCP_SCSI_DATA;
MACRO_FCP FCP_SCSI_RSP;
MACRO_FCP FCP_SCSI_XFER_RDY;
MACRO_FCP FCP_TASK_MGMT_FAILED;
MACRO_FCP FCP_TASK_MGMT_NOT_SUPPTD;
MACRO_FCR FCR;
MACRO_FCREAT FCREAT;
MACRO_FC FC_ALIGN;
$39FEE29CB19F6AB95D833477CB3CFB16 FC_CLASS_INBOUND;
$39FEE29CB19F6AB95D833477CB3CFB16 FC_CLASS_IO_READ;
$39FEE29CB19F6AB95D833477CB3CFB16 FC_CLASS_IO_WRITE;
$39FEE29CB19F6AB95D833477CB3CFB16 FC_CLASS_OFFLINE;
$39FEE29CB19F6AB95D833477CB3CFB16 FC_CLASS_OUTBOUND;
$39FEE29CB19F6AB95D833477CB3CFB16 FC_CLASS_SIMPLE;
$39FEE29CB19F6AB95D833477CB3CFB16 FC_CLASS_UNSOLICITED;
MACRO_FC FC_HWERR;
MACRO_FC_MAX FC_MAX_ELS;
MACRO_FC FC_NOMAP;
$B41FB3A55F358278F5C27327EE531EB5 FC_NOSLEEP;
MACRO_FC FC_NOSUPPORT;
MACRO_FC FC_OBJERR;
MACRO_FC_PH FC_PH_VERSION;
MACRO_FC FC_PROT;
fc_reset_action FC_RESET_RETURN_ALL;
fc_reset_action FC_RESET_RETURN_NONE;
fc_reset_action FC_RESET_RETURN_OUTSTANDING;
$B41FB3A55F358278F5C27327EE531EB5 FC_SLEEP;
$CDEA5F4E81121A9E1DEE9AC855E20971 FC_STATE_OFFLINE;
$CDEA5F4E81121A9E1DEE9AC855E20971 FC_STATE_ONLINE;
$CDEA5F4E81121A9E1DEE9AC855E20971 FC_STATE_RESET;
MACRO_FC_STATUS_OK FC_STATUS_ALLOC_FAIL;
MACRO_FC_STATUS_OK FC_STATUS_BAD_POOL_ID;
MACRO_FC_STATUS_OK FC_STATUS_BAD_SEG_CNT;
MACRO_FC_STATUS_OK FC_STATUS_BAD_SID;
MACRO_FC_STATUS_OK FC_STATUS_BAD_XID;
MACRO_FC_STATUS_OK FC_STATUS_CQFULL;
MACRO_FC_STATUS FC_STATUS_ENTRIES;
MACRO_FC_STATUS_OK FC_STATUS_ERROR;
MACRO_FC_STATUS_OK FC_STATUS_ERR_OFFLINE;
MACRO_FC_STATUS_OK FC_STATUS_ERR_OVERRUN;
MACRO_FC_STATUS_OK FC_STATUS_F_BSY;
MACRO_FC_STATUS_OK FC_STATUS_F_RJT;
MACRO_FC_STATUS_OK FC_STATUS_INSUFFICIENT_CQES;
MACRO_FC_STATUS_OK FC_STATUS_LOGIN_TIMEOUT;
MACRO_FC_STATUS_OK FC_STATUS_MAX_XCHG_EXCEEDED;
MACRO_FC_STATUS_OK FC_STATUS_NO_SEQ_INIT;
MACRO_FC_STATUS_OK FC_STATUS_OK;
MACRO_FC_STATUS_OK FC_STATUS_ONLINE_TIMEOUT;
MACRO_FC_STATUS_OK FC_STATUS_P_BSY;
MACRO_FC_STATUS_OK FC_STATUS_P_RJT;
MACRO_FC_STATUS_OK FC_STATUS_RESETFAIL;
MACRO_FC_STATUS_OK FC_STATUS_TIMEOUT;
MACRO_FC_STATUS_OK FC_STATUS_TRANSFAIL;
MACRO_FC_STATUS_OK FC_STATUS_UNKNOWN_CQ_TYPE;
MACRO_FC_STATUS_OK FC_STATUS_XCHG_BUSY;
$85FDB0E6998635E870FE0A8BC4B4C3FB FC_TRANSPORT_FAILURE;
$85FDB0E6998635E870FE0A8BC4B4C3FB FC_TRANSPORT_QFULL;
$85FDB0E6998635E870FE0A8BC4B4C3FB FC_TRANSPORT_SUCCESS;
$85FDB0E6998635E870FE0A8BC4B4C3FB FC_TRANSPORT_TIMEOUT;
$85FDB0E6998635E870FE0A8BC4B4C3FB FC_TRANSPORT_UNAVAIL;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_COMMAND;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_DATA;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_RESPONSE;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_SOLICITED_CONTROL;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_UNCATEGORIZED;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_UNSOL_CONTROL;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_UNSOL_DATA;
$29D01D9311FDD83E67B17289D334DF0B FC_TYPE_XFER_RDY;
MACRO_FC_WWN FC_WWN_SIZE;
MACRO_FDATA FDATA;
MACRO_FDB FDB_ASYNC;
MACRO_FDB FDB_DONE;
MACRO_FDB FDB_ERROR;
MACRO_FDB FDB_ICALLBACK;
$D95391997311E3A4E8F102D727D6CEF7 FDB_PAGEIO;
MACRO_FDB FDB_READ;
MACRO_FDB FDB_SYNC;
$D95391997311E3A4E8F102D727D6CEF7 FDB_VADDR;
MACRO_FDB FDB_WRITE;
MACRO_FDB FDB_ZEROHOLE;
MACRO_FDCMD FDCMD_FORMAT_TRACK;
MACRO_FDCMD FDCMD_FORMAT_UNIT;
MACRO_FDCMD FDCMD_READ;
MACRO_FDCMD FDCMD_REZERO;
MACRO_FDCMD FDCMD_SEEK;
MACRO_FDCMD FDCMD_WRITE;
MACRO_FDDEFGEOCHAR FDDEFGEOCHAR;
MACRO_FDD FDD_MOTON;
MACRO_FDD FDD_POLLABLE;
MACRO_FDD FDD_READY;
MACRO_FDEJECT FDEJECT;
MACRO_FDGC FDGC_CURRENT;
MACRO_FDGC FDGC_CURWPROT;
MACRO_FDGC FDGC_DETECTED;
MACRO_FDGC FDGC_HISTORY;
MACRO_FDGETCHANGE FDGETCHANGE;
MACRO_FDGETDRIVECHAR FDGETDRIVECHAR;
MACRO_FDGETSEARCH FDGETSEARCH;
MACRO_FDIOC FDIOC;
MACRO_FDIOCMD FDIOCMD;
MACRO_FDIOGCHAR FDIOGCHAR;
MACRO_FDIOSCHAR FDIOSCHAR;
MACRO_FDISK FDISK_AIXBOOT;
MACRO_FDISK FDISK_AIXDATA;
MACRO_FDISK_LINUXNAT FDISK_BSD;
MACRO_FDISK_LINUXNAT FDISK_BSDIFS;
MACRO_FDISK_LINUXNAT FDISK_BSDISWAP;
MACRO_FDISK_LINUX FDISK_CPM;
MACRO_FDISK FDISK_EXTLBA;
MACRO_FDISK FDISK_EXT_WIN;
MACRO_FDISK FDISK_FAT95;
MACRO_FDISK FDISK_IFS;
MACRO_FDISK_LINUX FDISK_LINUX;
MACRO_FDISK_LINUX FDISK_LINUXDNAT;
MACRO_FDISK_LINUX FDISK_LINUXDSWAP;
MACRO_FDISK_LINUXNAT FDISK_LINUXNAT;
MACRO_FDISK_LINUXNAT FDISK_NEXTSTEP;
MACRO_FDISK_NOVELL3 FDISK_NOVELL3;
MACRO_FDISK_LINUXNAT FDISK_NTFSVOL1;
MACRO_FDISK_LINUXNAT FDISK_NTFSVOL2;
MACRO_FDISK FDISK_OS2BOOT;
MACRO_FDISK_NOVELL3 FDISK_QNX4;
MACRO_FDISK_NOVELL3 FDISK_QNX42;
MACRO_FDISK_NOVELL3 FDISK_QNX43;
MACRO_FDISK FDISK_WINDOWS;
MACRO_FDRAW_0 FDRAW;
MACRO_FDRAW FDRAW_FORMAT;
MACRO_FDRAW FDRAW_RDCMD;
MACRO_FDRAW FDRAW_READDEL;
MACRO_FDRAW FDRAW_READID;
MACRO_FDRAW FDRAW_READTRACK;
MACRO_FDRAW FDRAW_REZERO;
MACRO_FDRAW FDRAW_SEEK;
MACRO_FDRAW FDRAW_SENSE_DRV;
MACRO_FDRAW FDRAW_SENSE_INT;
MACRO_FDRAW FDRAW_SPECIFY;
MACRO_FDRAW FDRAW_WRCMD;
MACRO_FDRAW FDRAW_WRITEDEL;
MACRO_FDSETDRIVECHAR FDSETDRIVECHAR;
MACRO_FDSETSEARCH FDSETSEARCH;
MACRO_FREAD FDSYNC;
MACRO_FD_CLOEXEC FD_CLOEXEC;
MACRO_FD_SILENT FD_DIAGNOSE;
MACRO_FD_SILENT FD_ISOLATE;
MACRO_FD_NUMPART FD_NUMPART;
MACRO_FD_SILENT FD_READ;
MACRO_FD FD_SETSIZE;
MACRO_FD_SILENT FD_SILENT;
MACRO_FD_SILENT FD_WRITE;
MACRO_FEEDBACK FEEDBACK_OK;
MACRO_FEEDBACK FEEDBACK_REXMIT1;
MACRO_FER FER;
MACRO_FCREAT FEXCL;
MACRO_FE FE_PAIR_ABSOLUTE;
MACRO_FE FE_PAIR_DELTA;
MACRO_FE FE_PAIR_NONE;
MACRO_FE FE_PAIR_SET;
MACRO_FF0 FF0;
MACRO_VT0 FFDLY;
MACRO_FID FID_DELETED;
MACRO_FID FID_DIR;
MACRO_FID FID_EXIST;
MACRO_FID FID_PARENT;
MACRO_ISPIPE FIFOCLOSE;
MACRO_ISPIPE FIFOCONNLD;
MACRO_ISPIPE FIFOFAST;
MACRO_FIFOHIWAT FIFOHIWAT;
MACRO_ISPIPE FIFOHIWATW;
MACRO_ISPIPE FIFOISOPEN;
MACRO_FIFOLOWAT FIFOLOWAT;
MACRO_ISPIPE FIFOOPEN;
MACRO_ISPIPE FIFOPOLLR;
MACRO_FIFOPOLLRBAND FIFOPOLLRBAND;
MACRO_ISPIPE FIFOPOLLW;
MACRO_ISPIPE FIFOROCR;
MACRO_ISPIPE FIFORWBUSY;
MACRO_ISPIPE FIFOSEND;
MACRO_ISPIPE FIFOSETSIG;
MACRO_FIFOSIZE FIFOSIZE;
MACRO_ISPIPE FIFOSYNC;
MACRO_FIFOTYPE FIFOTYPE;
MACRO_ISPIPE FIFOWANTR;
MACRO_ISPIPE FIFOWANTW;
MACRO_ISPIPE FIFOWOCR;
MACRO_FIFO FIFO_CNT_MASK;
MACRO_FOPEN FILENAME_MAX;
stable_how FILE_SYNC;
MACRO_FILNMLEN FILNMLEN;
$EDBA1914F16BC538415B0E0A3A3FD3BB FIND;
MACRO_FIND FIND_LTUPLE_BACKF;
MACRO_FIND FIND_LTUPLE_FWDF;
MACRO_FIND FIND_NEXT_LTUPLEF;
MACRO_FIND FIND_PREV_LTUPLEF;
MACRO_FINEUSEC FINEUSEC;
MACRO_FIOC FIOC;
MACRO_FIOLOG FIOLOG_ECLEAN;
MACRO_FIOLOG FIOLOG_ENONE;
MACRO_FIOLOG FIOLOG_ENOULOCK;
MACRO_FIOLOG FIOLOG_EROFS;
MACRO_FIOLOG FIOLOG_ETRANS;
MACRO_FIOLOG FIOLOG_EULOCK;
MACRO_FIOLOG FIOLOG_EWLOCK;
MACRO_FIORDCHK FIORDCHK;
MACRO_FIRM FIRM_EVENT_NULL;
MACRO_FKEY FKEY_FAIL;
MACRO_DKL FKL_MAGIC;
MACRO_FLAG FLAG_ACA;
MACRO_FLAG FLAG_DIAGNOSE;
MACRO_FLAG FLAG_HEAD;
MACRO_FLAG FLAG_HTAG;
MACRO_FLAG FLAG_IMMEDIATE_CB;
MACRO_FLAG FLAG_ISOLATE;
MACRO_FLAG FLAG_NODISCON;
MACRO_FLAG FLAG_NOINTR;
MACRO_FLAG FLAG_NOPARITY;
MACRO_FLAG FLAG_OTAG;
MACRO_FLAG FLAG_QUEHOLD;
MACRO_FLAG FLAG_RENEGOTIATE_WIDE_SYNC;
MACRO_FLAG FLAG_SENSING;
MACRO_FLAG FLAG_SILENT;
MACRO_FLAG FLAG_STAG;
MACRO_FLAG FLAG_SUBLUN;
MACRO_FLAG FLAG_TAGMASK;
MACRO_FLK FLK_ACTIVE_STATE;
MACRO_FLK FLK_CANCELLED_STATE;
MACRO_FLK FLK_DEAD_STATE;
MACRO_FLK_UNLOCK FLK_DOWNGRADE;
MACRO_FLK FLK_GRANTED_STATE;
MACRO_FLK FLK_INITIAL_STATE;
MACRO_FLK_USE FLK_INIT_GRAPH;
MACRO_FLK FLK_INTERRUPTED_STATE;
$A6580FDE48616C23ADC769BAB4D07B11 FLK_LOCKMGR_DOWN;
$A6580FDE48616C23ADC769BAB4D07B11 FLK_LOCKMGR_UP;
$FFCF33584F0C155BE85F0F30A00BD3E4 FLK_NLM_DOWN;
$FFCF33584F0C155BE85F0F30A00BD3E4 FLK_NLM_SHUTTING_DOWN;
$FFCF33584F0C155BE85F0F30A00BD3E4 FLK_NLM_UNKNOWN;
$FFCF33584F0C155BE85F0F30A00BD3E4 FLK_NLM_UP;
MACRO_FLK FLK_SLEEPING_STATE;
MACRO_FLK FLK_START_STATE;
MACRO_FLK_UNLOCK FLK_STAY_SAME;
MACRO_FLK_UNLOCK FLK_UNLOCK;
MACRO_FLK_UNLOCK FLK_UPGRADE;
MACRO_FLK_USE FLK_USE_GRAPH;
$A6580FDE48616C23ADC769BAB4D07B11 FLK_WAKEUP_SLEEPERS;
MACRO_EXP FLOW_EXP;
MACRO_FLOW FLOW_IXANY;
MACRO_FLOW FLOW_IXON;
MACRO_FLOW FLOW_RTSCTS;
MACRO_FLP FLP_DELAYED_FREE;
MACRO_COMPOSE2 FLTACCENT;
MACRO_FLTACCESS FLTACCESS;
MACRO_FLTBOUNDS FLTBOUNDS;
MACRO_FLTBPT FLTBPT;
MACRO_FLTCPCOVF FLTCPCOVF;
MACRO_FLTFPE FLTFPE;
MACRO_FLTILL FLTILL;
MACRO_FLTIOVF FLTIOVF;
MACRO_FLTIOVF FLTIZDIV;
MACRO_FLTPAGE FLTPAGE;
MACRO_FLTILL FLTPRIV;
MACRO_FLTSTACK FLTSTACK;
MACRO_FLTBPT FLTTRACE;
MACRO_FLTWATCH FLTWATCH;
MACRO_FLT FLT_DIG;
MACRO_FLT FLT_MANT_DIG;
MACRO_FLT FLT_MAX_10_EXP;
MACRO_FLT FLT_MAX_EXP;
MACRO_FLT FLT_MIN_10_EXP;
MACRO_FLT FLT_MIN_EXP;
MACRO_FLT FLT_RADIX;
MACRO_FLUSHALL FLUSHALL;
MACRO_FLUSHRW FLUSHBAND;
MACRO_FLUSHDATA FLUSHDATA;
MACRO_ISIG FLUSHO;
MACRO_FLUSHR FLUSHR;
MACRO_FLUSHRW FLUSHRW;
MACRO_FLUSHR FLUSHW;
MACRO_FLUSH FLUSH_ARP_TIME;
MACRO_FLUSH FLUSH_MTU_TIME;
MACRO_FLUSH FLUSH_REDIRECT_TIME;
MACRO_FMASK FMASK;
MACRO_FMAXEXP FMAXEXP;
MACRO_FMNAMESZ FMNAMESZ;
MACRO_FMTTRK FMTTRK;
MACRO_FREAD FNDELAY;
MACRO_FNM FNM_ERROR;
MACRO_FNM FNM_IGNORECASE;
MACRO_FNM FNM_NOESCAPE;
MACRO_FNM FNM_NOMATCH;
MACRO_FNM FNM_NOSYS;
MACRO_FNM FNM_PATHNAME;
MACRO_FNM FNM_PERIOD;
MACRO_FCREAT FNOCTTY;
MACRO_FCREAT FNODSYNC;
MACRO_FNONBLOCK FNONBLOCK;
$7948EC45DEF305B61169931C8DCDB649 FN_ATTR_OP_ADD;
$7948EC45DEF305B61169931C8DCDB649 FN_ATTR_OP_ADD_EXCLUSIVE;
$7948EC45DEF305B61169931C8DCDB649 FN_ATTR_OP_ADD_VALUES;
$7948EC45DEF305B61169931C8DCDB649 FN_ATTR_OP_REMOVE;
$7948EC45DEF305B61169931C8DCDB649 FN_ATTR_OP_REMOVE_VALUES;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_BIND;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_CREATE;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_EXT_SEARCH;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_GET;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_GET_IDS;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_GET_VALUES;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_MODIFY;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_MULTI_GET;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_MULTI_MODIFY;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_ATTR_SEARCH;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_BIND;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_CREATE_SUBCONTEXT;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_DESTROY_SUBCONTEXT;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_EQUIVALENT_NAME;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_GET_REF;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_GET_SYNTAX_ATTRS;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_LIST_BINDINGS;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_LIST_NAMES;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_LOOKUP;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_RENAME;
$8183A1332CE171C30172CB4371E09D7E FN_CTX_FUNC_UNBIND;
MACRO_FN FN_CTX_SVC_FUNC_ARRAY_SIZE;
$5558F65A0FB6A68FD1548EA96864D077 FN_DESCRIPTION_COMPLETE;
$5558F65A0FB6A68FD1548EA96864D077 FN_DESCRIPTION_MINIMAL;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_ATTR_IN_USE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_ATTR_NO_PERMISSION;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_ATTR_VALUE_REQUIRED;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_AUTHENTICATION_FAILURE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_COMMUNICATION_FAILURE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_CONFIGURATION_ERROR;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_CONTINUE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_CTX_NOT_EMPTY;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_CTX_NO_PERMISSION;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_CTX_UNAVAILABLE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_ILLEGAL_NAME;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_INCOMPATIBLE_CODE_SETS;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_INCOMPATIBLE_LOCALES;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_INSUFFICIENT_RESOURCES;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_INVALID_ATTR_IDENTIFIER;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_INVALID_ATTR_VALUE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_INVALID_ENUM_HANDLE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_INVALID_SYNTAX_ATTRS;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_LINK_ERROR;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_LINK_LOOP_LIMIT;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_MALFORMED_LINK;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_MALFORMED_REFERENCE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_NAME_IN_USE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_NAME_NOT_FOUND;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_NOT_A_CONTEXT;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_NO_EQUIVALENT_NAME;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_NO_SUCH_ATTRIBUTE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_NO_SUPPORTED_ADDRESS;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_OPERATION_NOT_SUPPORTED;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_PARTIAL_RESULT;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_SEARCH_INVALID_FILTER;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_SEARCH_INVALID_OP;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_SEARCH_INVALID_OPTION;
MACRO_FN FN_E_SPI_CONTINUE;
MACRO_FN FN_E_SPI_FOLLOW_LINK;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_SYNTAX_NOT_SUPPORTED;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_TOO_MANY_ATTR_VALUES;
$2C30E1479128C3D76FE2B7FD5491F04B FN_E_UNSPECIFIED_ERROR;
$57BAE6CEF194EFB5132205D2FB8A3C5F FN_ID_DCE_UUID;
$57BAE6CEF194EFB5132205D2FB8A3C5F FN_ID_ISO_OID_STRING;
$57BAE6CEF194EFB5132205D2FB8A3C5F FN_ID_STRING;
$5DF0ED3184972A3C527030570D523F44 FN_OP_EXCLUSIVE;
$5DF0ED3184972A3C527030570D523F44 FN_OP_SUPERCEDE;
$370C3B42DAEBA43C9084EF8E4345E8A7 FN_SEARCH_CONSTRAINED_SUBTREE;
FN_search_filter_type FN_SEARCH_FILTER_ATTR;
FN_search_filter_type FN_SEARCH_FILTER_ATTRVALUE;
FN_search_filter_type FN_SEARCH_FILTER_IDENTIFIER;
FN_search_filter_type FN_SEARCH_FILTER_STRING;
$370C3B42DAEBA43C9084EF8E4345E8A7 FN_SEARCH_NAMED_OBJECT;
$370C3B42DAEBA43C9084EF8E4345E8A7 FN_SEARCH_ONE_CONTEXT;
$370C3B42DAEBA43C9084EF8E4345E8A7 FN_SEARCH_SUBTREE;
$8E5B18BDA15BCA983D757F24B1D87563 FN_SPI_DYNAMIC_BOUNDARY;
MACRO_FN FN_SPI_LEAVE_TERMINAL_LINK;
$5215702A02A06E3D32B9006B2E703D72 FN_SPI_MULTIPLE_COMPONENT;
$5215702A02A06E3D32B9006B2E703D72 FN_SPI_SINGLE_COMPONENT;
$8E5B18BDA15BCA983D757F24B1D87563 FN_SPI_STATIC_BOUNDARY;
$F9F9B8C8A8EFF8E21EF69F4C68E21A81 FN_SPI_STRONG_SEPARATION;
$F9F9B8C8A8EFF8E21EF69F4C68E21A81 FN_SPI_WEAK_SEPARATION;
$4E1F7E6004833A901F098B2E39E9859C FN_STRING_CASE_INSENSITIVE;
$4E1F7E6004833A901F098B2E39E9859C FN_STRING_CASE_SENSITIVE;
$67B0C970003978024F26F3A7D9A4CAE6 FN_STRING_INDEX_FIRST;
$67B0C970003978024F26F3A7D9A4CAE6 FN_STRING_INDEX_LAST;
$67B0C970003978024F26F3A7D9A4CAE6 FN_STRING_INDEX_NONE;
$2C30E1479128C3D76FE2B7FD5491F04B FN_SUCCESS;
$062E8AE2261C719812C59BB6BEB13941 FN_SYNTAX_STANDARD_DIRECTION_FLAT;
$062E8AE2261C719812C59BB6BEB13941 FN_SYNTAX_STANDARD_DIRECTION_LTR;
$062E8AE2261C719812C59BB6BEB13941 FN_SYNTAX_STANDARD_DIRECTION_RTL;
MACRO_FOFFMAX FOFFMAX;
symfollow FOLLOW;
MACRO_FOLLOW FOLLOW_LINKS;
MACRO_FOLLOW FOLLOW_PATH;
MACRO_FOPEN_0 FOPEN;
MACRO_FOPEN FOPEN_MAX;
MACRO_EVEN FORCE_P;
MACRO_FORMAT FORMAT;
MACRO_CARTRIDGE FORMAT_VERIFY_CMD;
MACRO_FORM FORM_C;
MACRO_FORM FORM_N;
MACRO_FORM FORM_T;
MACRO_FORREAL FORREAL;
MACRO_FPB FPB_BFI;
MACRO_FPB FPB_CMPLT;
MACRO_FPB FPB_DATA;
MACRO_FPE FPE_FLTDIV;
MACRO_FPE FPE_FLTINV;
MACRO_FPE FPE_FLTOVF;
MACRO_FPE FPE_FLTRES;
MACRO_FPE FPE_FLTSUB;
MACRO_FPE FPE_FLTUND;
MACRO_FPE FPE_INTDIV;
MACRO_FPE FPE_INTOVF;
MACRO_FPRS FPRS_DL;
MACRO_FPRS FPRS_DU;
MACRO_FPRS FPRS_FEF;
MACRO_FP FP_CLEAR;
MACRO_FP FP_DISABLE;
MACRO_FP FP_ENABLE;
fpclass_t FP_NDENORM;
fpclass_t FP_NINF;
fpclass_t FP_NNORM;
fpclass_t FP_NZERO;
fpclass_t FP_PDENORM;
fpclass_t FP_PINF;
fpclass_t FP_PNORM;
fpclass_t FP_PZERO;
fpclass_t FP_QNAN;
fp_rnd FP_RM;
fp_rnd FP_RN;
fp_rnd FP_RP;
fp_rnd FP_RZ;
MACRO_FP FP_SET;
fpclass_t FP_SNAN;
MACRO_FP FP_X_DZ;
MACRO_FP FP_X_IMP;
MACRO_FP FP_X_INV;
MACRO_FP FP_X_OFL;
MACRO_FP FP_X_UFL;
MACRO_FREAD FREAD;
MACRO_FREE FREE_SHAPE;
MACRO_FREAD FRSYNC;
MACRO_FSACTIVE FSACTIVE;
fsh4_access FSA_NONE;
fsh4_access FSA_R;
fsh4_access FSA_RW;
fsh4_access FSA_W;
MACRO_FSBAD FSBAD;
MACRO_FSHIFT FSCALE;
MACRO_FSACTIVE FSCLEAN;
MACRO_FSD FSD_ACL;
MACRO_FSD FSD_DFACL;
MACRO_FSD FSD_FREE;
MACRO_FSD FSD_RESERVED3;
MACRO_FSD FSD_RESERVED4;
MACRO_FSD FSD_RESERVED5;
MACRO_FSD FSD_RESERVED6;
MACRO_FSD FSD_RESERVED7;
MACRO_FSETLOCKING FSETLOCKING_BYCALLER;
MACRO_FSETLOCKING FSETLOCKING_INTERNAL;
MACRO_FSETLOCKING FSETLOCKING_QUERY;
MACRO_FSF3 FSF3_CANSETTIME;
MACRO_FSF3 FSF3_HOMOGENEOUS;
MACRO_FSF3 FSF3_LINK;
MACRO_FSF3 FSF3_SYMLINK;
MACRO_FSFIX FSFIX;
MACRO_FSHIFT FSHIFT;
MACRO_FSINFO FSINFO_UNKNOWN;
MACRO_FSLARGEFILES FSLARGEFILES;
MACRO_FSLOG FSLOG;
fsh4_mode FSM_DN;
fsh4_mode FSM_DR;
fsh4_mode FSM_DRW;
fsh4_mode FSM_DW;
MACRO_FSOKAY FSOKAY;
MACRO_FSR FSR_AEXC;
MACRO_FSR FSR_AEXC_DZ;
MACRO_FSR FSR_AEXC_NV;
MACRO_FSR FSR_AEXC_NX;
MACRO_FSR FSR_AEXC_OF;
MACRO_FSR FSR_AEXC_UF;
MACRO_FSR FSR_CEXC;
MACRO_FSR FSR_CEXC_DZ;
MACRO_FSR FSR_CEXC_NV;
MACRO_FSR FSR_CEXC_NX;
MACRO_FSR FSR_CEXC_OF;
MACRO_FSR FSR_CEXC_UF;
MACRO_FSR FSR_FCC;
MACRO_FSR FSR_FCC1;
MACRO_FSR FSR_FCC2;
MACRO_FSR FSR_FCC3;
MACRO_FSR FSR_FTT;
MACRO_FSR_FTT FSR_FTT_ALIGN;
MACRO_FSR_FTT FSR_FTT_DFAULT;
MACRO_FSR_FTT FSR_FTT_IEEE;
MACRO_FSR_FTT FSR_FTT_SEQ;
MACRO_FSR_FTT FSR_FTT_SHIFT;
MACRO_FSR_FTT FSR_FTT_UNFIN;
MACRO_FSR_FTT FSR_FTT_UNIMP;
MACRO_FSR FSR_PR;
MACRO_FSR FSR_QNE;
MACRO_FSR FSR_RD;
MACRO_FSR FSR_RP;
MACRO_FSR FSR_TEM;
MACRO_FSR_FTT FSR_TEM_DZ;
MACRO_FSR_FTT FSR_TEM_NV;
MACRO_FSR_FTT FSR_TEM_NX;
MACRO_FSR_FTT FSR_TEM_OF;
MACRO_FSR_FTT FSR_TEM_UF;
MACRO_FSR FSR_VER;
MACRO_FSR FSR_VER_SHIFT;
MACRO_FSACTIVE FSSTABLE;
MACRO_FSSUSPEND FSSUSPEND;
MACRO_FSTYPSZ FSTYPSZ;
MACRO_FREAD FSYNC;
MACRO_FS_RECLAIM FS_42POSTBLFMT;
MACRO_FS_GENERAL FS_BROADCAST;
MACRO_FS_RECLAIM FS_CHECKCLEAN;
MACRO_FS_RECLAIM FS_CHECKRECLAIM;
MACRO_FS_RECLAIM FS_DYNAMICPOSTBLFMT;
MACRO_FS_GENERAL FS_FABRIC_CONTROLLER;
MACRO_FS_GENERAL FS_FABRIC_F_PORT;
MACRO_FS_GENERAL FS_GENERAL_MULTICAST;
MACRO_FS_GENERAL FS_HUNT_GROUP;
MACRO_FS FS_MAGIC;
MACRO_FS_GENERAL FS_MANAGEMENT_SERVER;
MACRO_FS_GENERAL FS_NAME_SERVER;
MACRO_FS_RECLAIM FS_OPTSPACE;
MACRO_FS_RECLAIM FS_OPTTIME;
MACRO_FS_RECLAIM FS_RECLAIM;
MACRO_FS_RECLAIM FS_RECLAIMING;
MACRO_FS_GENERAL FS_TIME_SERVER;
MACRO_FS_GENERAL FS_WELL_KNOWN_MULTICAST;
MACRO_FTBLK FTBLK_EVNTS;
MACRO_FTEV FTEV_ALLOCB;
MACRO_FTEV FTEV_ALLOCBIG;
MACRO_FTEV FTEV_ALLOCBW;
MACRO_FTEV FTEV_ALLOCMASK;
MACRO_FTEV FTEV_CALLER;
MACRO_FTEV FTEV_COPYB;
MACRO_FTEV FTEV_CS;
MACRO_FTEV FTEV_DESBALLOC;
MACRO_FTEV FTEV_DESBALLOCA;
MACRO_FTEV FTEV_DSYNCQ;
MACRO_FTEV FTEV_DUPB;
MACRO_FTEV FTEV_ESBALLOC;
MACRO_FTEV FTEV_ESBALLOCA;
MACRO_FTEV FTEV_FLUSHQ;
MACRO_FTEV FTEV_FREEB;
MACRO_FTEV FTEV_FSYNCQ;
MACRO_FTEV FTEV_GETQ;
MACRO_FTEV FTEV_GEWRITE;
MACRO_FTEV FTEV_INSQ;
MACRO_FTEV FTEV_ISWR;
MACRO_FTEV FTEV_MASK;
MACRO_FTEV FTEV_PS;
MACRO_FTEV FTEV_PUT;
MACRO_FTEV FTEV_PUTBQ;
MACRO_FTEV FTEV_PUTNEXT;
MACRO_FTEV FTEV_PUTQ;
MACRO_FTEV FTEV_QMASK;
MACRO_FTEV FTEV_QWINNER;
MACRO_FTEV FTEV_REPLYQ;
MACRO_FTEV FTEV_RMVQ;
MACRO_FTEV FTEV_RWNEXT;
MACRO_FTLACT FTLACT;
MACRO_FTLCLN FTLCLN;
MACRO_FTLEXIT FTLEXIT;
MACRO_FTLFUNC FTLFUNC;
MACRO_FTLJMP FTLJMP;
MACRO_FTLMSG FTLMSG;
MACRO_FTLRET FTLRET;
MACRO_FTRACE FTRACE_ENABLED;
MACRO_FTRACE FTRACE_NENT;
MACRO_FTRACE FTRACE_READY;
MACRO_FCREAT FTRUNC;
MACRO_FTT FTT_ALIGN;
MACRO_FTT FTT_DFAULT;
MACRO_FTT FTT_IEEE;
MACRO_FTT FTT_NONE;
MACRO_FTT FTT_SEQ;
MACRO_FTT FTT_UNFIN;
MACRO_FTT FTT_UNIMP;
MACRO_FTW FTW_CHDIR;
MACRO_FTW FTW_D;
MACRO_FTW FTW_DEPTH;
MACRO_FTW FTW_DNR;
MACRO_FTW FTW_DP;
MACRO_FTW FTW_F;
MACRO_FTW FTW_FOLLOW;
MACRO_FTW FTW_MOUNT;
MACRO_FTW FTW_NS;
MACRO_FTW FTW_PHYS;
MACRO_FTW FTW_PRUNE;
MACRO_FTW FTW_SKD;
MACRO_FTW FTW_SL;
MACRO_FTW FTW_SLN;
MACRO_FTYPE FTYPE_BLOCK_DEV;
MACRO_FTYPE FTYPE_CHAR_DEV;
MACRO_FTYPE FTYPE_C_ISSOCK;
MACRO_FTYPE FTYPE_DIRECTORY;
MACRO_FTYPE FTYPE_EAR;
MACRO_FTYPE FTYPE_FIFO;
MACRO_FTYPE FTYPE_FILE;
MACRO_FTYPE FTYPE_INDIRECT;
MACRO_FTYPE FTYPE_PART_INTEG;
MACRO_FTYPE FTYPE_SYMLINK;
MACRO_FTYPE FTYPE_T_ENTRY;
MACRO_FTYPE FTYPE_UNALL_SPACE;
MACRO_FT FT_BACKUP;
MACRO_FT FT_DELETE;
MACRO_FT FT_EXIST;
MACRO_FT FT_FEDT;
MACRO_FULLSCREEN FULLSCREEN;
MACRO_LEFTARROW FUNCKEYS;
MACRO_FUNNY FUNNY;
MACRO_FREAD FWRITE;
MACRO_F F_ALLOCSP;
MACRO_F F_BLKSIZE;
MACRO_F F_BLOCKS;
MACRO_F_FILE F_CDIR;
MACRO_F F_CHKFL;
MACRO_F_RDACC F_COMPAT;
MACRO_F_FILE F_CONTAINED;
MACRO_F_CTL F_CTL_ABORT_SEQ;
MACRO_F_CTL F_CTL_ALWAYS_ZERO;
MACRO_F_CTL F_CTL_CHAINED_SEQ;
MACRO_F_CTL F_CTL_CONTINUE_SEQ;
MACRO_F_CTL F_CTL_END_CONNECT;
MACRO_F_CTL F_CTL_END_SEQ;
MACRO_F_CTL F_CTL_FILL_BYTES;
MACRO_F_CTL F_CTL_FIRST_SEQ;
MACRO_F_CTL F_CTL_INVALIDATE_XID;
MACRO_F_CTL F_CTL_LAST_SEQ;
MACRO_F_CTL F_CTL_RESERVED;
MACRO_F_CTL F_CTL_RO_PRESENT;
MACRO_F_CTL F_CTL_SEQ_CONTEXT;
MACRO_F_CTL F_CTL_SEQ_INITIATIVE;
MACRO_F_CTL F_CTL_XCHG_CONTEXT;
MACRO_F_CTL F_CTL_XCHG_REASSEMBLE;
MACRO_F_CTL F_CTL_XID_REASSIGNED;
MACRO_F F_DUP2FD;
MACRO_F F_DUPFD;
MACRO_F_FILE F_FILE_ONLY;
MACRO_F F_FREESP;
MACRO_F F_FREESP64;
MACRO_F F_GETFD;
MACRO_F F_GETFL;
MACRO_F F_GETLK;
MACRO_F F_GETLK64;
MACRO_F F_GETOWN;
MACRO_F F_HASREMOTELOCKS;
fault_type F_INVAL;
MACRO_F F_ISSTREAM;
MACRO_F_ULOCK F_LOCK;
MACRO_F_FILE F_MAP;
MACRO_F_RDACC F_NODNY;
MACRO_F F_NPRIV;
MACRO_OK F_OK;
MACRO_F_FILE F_OPEN;
MACRO_F F_PRIV;
fault_type F_PROT;
MACRO_F_REMOTELOCK F_PXFSLOCK;
MACRO_F F_QUOTACTL;
MACRO_F_RDACC F_RDACC;
MACRO_F_RDACC F_RDDNY;
MACRO_F_FILE F_RDIR;
MACRO_F F_RDLCK;
MACRO_F_REMOTELOCK F_REMOTELOCK;
MACRO_F_RDACC F_RWACC;
MACRO_F_RDACC F_RWDNY;
MACRO_F F_SETFD;
MACRO_F F_SETFL;
MACRO_F F_SETLK;
MACRO_F F_SETLK64;
MACRO_F F_SETLKW;
MACRO_F F_SETLKW64;
MACRO_F F_SETOWN;
MACRO_F F_SHARE;
fault_type F_SOFTLOCK;
fault_type F_SOFTUNLOCK;
MACRO_F_ULOCK F_TEST;
MACRO_F_FILE F_TEXT;
MACRO_F_ULOCK F_TLOCK;
MACRO_F_FILE F_TRACE;
MACRO_F_FILE F_TTY;
MACRO_F_ULOCK F_ULOCK;
MACRO_F F_UNLCK;
MACRO_F F_UNLKSYS;
MACRO_F F_UNSHARE;
MACRO_F_RDACC F_WRACC;
MACRO_F_RDACC F_WRDNY;
MACRO_F F_WRLCK;
MACRO_Y G1;
MACRO_G2 G2;
MACRO_G3 G3;
MACRO_G4 G4;
MACRO_G4 G5;
MACRO_G6 G6;
MACRO_G7 G7;
MACRO_G711 G711_256_ARRAY_MIDPOINT;
MACRO_G711 G711_ALAW_MIDPOINT;
MACRO_G711 G711_ULAW_MIDPOINT;
MACRO_GA GA;
accept_stat GARBAGE_ARGS;
MACRO_EXPIRE GARBAGE_TIME;
MACRO_GETACL GETACL;
MACRO_GETACLCNT GETACLCNT;
MACRO_GETALL GETALL;
MACRO_GETCONTEXT GETCONTEXT;
MACRO_GETFSIND GETFSIND;
MACRO_GETFSIND GETFSTYP;
MACRO_GETNCNT GETNCNT;
MACRO_GETNFSTYP GETNFSTYP;
MACRO_GETNCNT GETPID;
MACRO_GETVAL GETVAL;
MACRO_GETZCNT GETZCNT;
MACRO_GET GET_ALL;
MACRO_AUTOPUSH GET_AUTOPUSH;
MACRO_GET_CONTINUATION GET_CONTINUATION;
MACRO_GET_FIRST GET_FIRST_LTUPLEF;
MACRO_GET_PORT GET_HUB_DESCRIPTOR;
MACRO_GET_PORT GET_HUB_STATUS;
MACRO_IDLE_LENGTH GET_IDLE_LENGTH;
MACRO_GET_FIRST GET_LAST_LTUPLEF;
MACRO_GET GET_NEXT;
MACRO_GET_NEXT GET_NEXT_LTUPLEF;
MACRO_GET GET_NO_MORE;
MACRO_GET GET_ONE;
MACRO_GET_PORT GET_PORT_STATUS;
MACRO_GET_NEXT GET_PREV_LTUPLEF;
MACRO_UID_LONG GID_LONG;
MACRO_NOBODY GID_NOBODY;
MACRO_CLONE GLOBAL_DEV;
MACRO_GLOB GLOB_ABORTED;
MACRO_GLOB GLOB_APPEND;
MACRO_GLOB GLOB_DOOFFS;
MACRO_GLOB GLOB_ERR;
MACRO_GLOB GLOB_MARK;
MACRO_GLOB GLOB_NOCHECK;
MACRO_GLOB GLOB_NOESCAPE;
MACRO_GLOB GLOB_NOMATCH;
MACRO_GLOB GLOB_NOSORT;
MACRO_GLOB GLOB_NOSPACE;
MACRO_GLOB GLOB_NOSYS;
MACRO_GOODERROR GOODERROR;
MACRO_EXIT_STATUS GOOD_EXIT_STATUS;
MACRO_GPLF GPLF;
MACRO_GPLN GPLN;
MACRO_GRABATTACH GRABATTACH;
MACRO_GRABLOCKINFO GRABLOCKINFO;
MACRO_GRABPAGEALLOC GRABPAGEALLOC;
MACRO_GRABPAGEFREE GRABPAGEFREE;
MACRO_BARRIER GRANTED_LOCK;
MACRO_GROUP_0 GROUP;
MACRO_WORLD GROUP_DEFAULT;
zotypes GROUP_OBJ;
MACRO_ERROR GRP_ERROR;
MACRO_GSS GSS_C_ACCEPT;
MACRO_GSS GSS_C_AF_APPLETALK;
MACRO_GSS GSS_C_AF_BSC;
MACRO_GSS GSS_C_AF_CCITT;
MACRO_GSS GSS_C_AF_CHAOS;
MACRO_GSS GSS_C_AF_DATAKIT;
MACRO_GSS GSS_C_AF_DECnet;
MACRO_GSS GSS_C_AF_DLI;
MACRO_GSS GSS_C_AF_DSS;
MACRO_GSS GSS_C_AF_ECMA;
MACRO_GSS GSS_C_AF_HYLINK;
MACRO_GSS GSS_C_AF_IMPLINK;
MACRO_GSS GSS_C_AF_INET;
MACRO_GSS GSS_C_AF_LAT;
MACRO_GSS GSS_C_AF_LOCAL;
MACRO_GSS GSS_C_AF_NBS;
MACRO_GSS GSS_C_AF_NS;
MACRO_GSS GSS_C_AF_NULLADDR;
MACRO_GSS GSS_C_AF_OSI;
MACRO_GSS GSS_C_AF_PUP;
MACRO_GSS GSS_C_AF_SNA;
MACRO_GSS GSS_C_AF_UNSPEC;
MACRO_GSS GSS_C_AF_X25;
MACRO_GSS GSS_C_ANON_FLAG;
MACRO_GSS GSS_C_BOTH;
MACRO_GSS GSS_C_CALLING_ERROR_MASK;
MACRO_GSS GSS_C_CALLING_ERROR_OFFSET;
MACRO_GSS GSS_C_CONF_FLAG;
MACRO_GSS GSS_C_DELEG_FLAG;
MACRO_GSS GSS_C_GSS_CODE;
MACRO_GSS GSS_C_INDEFINITE;
MACRO_GSS GSS_C_INITIATE;
MACRO_GSS GSS_C_INTEG_FLAG;
MACRO_GSS GSS_C_MECH_CODE;
MACRO_GSS GSS_C_MUTUAL_FLAG;
MACRO_GSS GSS_C_NO_BUFFER;
MACRO_GSS GSS_C_NO_CHANNEL_BINDINGS;
MACRO_GSS GSS_C_NO_CONTEXT;
MACRO_GSS GSS_C_NO_CREDENTIAL;
MACRO_GSS GSS_C_NO_NAME;
MACRO_GSS GSS_C_NO_OID;
MACRO_GSS GSS_C_NO_OID_SET;
MACRO_GSS GSS_C_NULL_OID;
MACRO_GSS GSS_C_NULL_OID_SET;
MACRO_GSS GSS_C_PROT_READY_FLAG;
MACRO_GSS GSS_C_QOP_DEFAULT;
MACRO_GSS GSS_C_REPLAY_FLAG;
MACRO_GSS GSS_C_ROUTINE_ERROR_MASK;
MACRO_GSS GSS_C_ROUTINE_ERROR_OFFSET;
MACRO_GSS GSS_C_SEQUENCE_FLAG;
MACRO_GSS GSS_C_SUPPLEMENTARY_MASK;
MACRO_GSS GSS_C_SUPPLEMENTARY_OFFSET;
MACRO_GSS GSS_C_TRANS_FLAG;
MACRO_GSS GSS_S_BAD_BINDINGS;
MACRO_GSS GSS_S_BAD_MECH;
MACRO_GSS GSS_S_BAD_MIC;
MACRO_GSS GSS_S_BAD_NAME;
MACRO_GSS GSS_S_BAD_NAMETYPE;
MACRO_GSS GSS_S_BAD_QOP;
MACRO_GSS GSS_S_BAD_SIG;
MACRO_GSS GSS_S_BAD_STATUS;
MACRO_GSS GSS_S_CALL_BAD_STRUCTURE;
MACRO_GSS GSS_S_CALL_INACCESSIBLE_READ;
MACRO_GSS GSS_S_CALL_INACCESSIBLE_WRITE;
MACRO_GSS GSS_S_COMPLETE;
MACRO_GSS GSS_S_CONTEXT_EXPIRED;
MACRO_GSS GSS_S_CONTINUE_NEEDED;
MACRO_GSS GSS_S_CREDENTIALS_EXPIRED;
MACRO_GSS GSS_S_DEFECTIVE_CREDENTIAL;
MACRO_GSS GSS_S_DEFECTIVE_TOKEN;
MACRO_GSS GSS_S_DUPLICATE_ELEMENT;
MACRO_GSS GSS_S_DUPLICATE_TOKEN;
MACRO_GSS GSS_S_FAILURE;
MACRO_GSS GSS_S_GAP_TOKEN;
MACRO_GSS GSS_S_NAME_NOT_MN;
MACRO_GSS GSS_S_NO_CONTEXT;
MACRO_GSS GSS_S_NO_CRED;
MACRO_GSS GSS_S_OLD_TOKEN;
MACRO_GSS GSS_S_UNAUTHORIZED;
MACRO_GSS GSS_S_UNAVAILABLE;
MACRO_GSS GSS_S_UNSEQ_TOKEN;
createmode3 GUARDED;
MACRO_G G_DEV_MAX;
MACRO_G G_FD;
MACRO_G G_FILE;
MACRO_G G_FT;
MACRO_G G_HD;
MACRO_G G_NO_DEV;
MACRO_G G_NS;
MACRO_G G_RAM;
MACRO_G G_SD_DISK;
MACRO_G G_SF_FLOPPY;
MACRO_G G_ST_TAPE;
MACRO_G G_TM_TAPE;
MACRO_G G_XD_DISK;
MACRO_G G_XT_TAPE;
MACRO_G G_XY_DISK;
MACRO_HANDTPL HANDTPL_COPY_DONE;
MACRO_HANDTPL HANDTPL_ERROR;
MACRO_HANDTPL HANDTPL_NOERROR;
MACRO_HANDTPL HANDTPL_PARSE_LTUPLE;
MACRO_HANDTPL HANDTPL_RETURN_NAME;
MACRO_HANDTPL HANDTPL_SET_FLAGS;
MACRO_HARD HARD_LOOKUP;
MACRO_HASH HASH_SHIFT;
MACRO_HASH HASH_SIZE;
MACRO_HAVE HAVE_PROHIBITED;
MACRO_HAVE HAVE_SUSP;
MACRO_HDE HDE_ASSOCIATED;
MACRO_HDE HDE_DIRECTORY;
MACRO_HDE HDE_EXISTENCE;
MACRO_HDE HDE_FDESIZE;
MACRO_HDE HDE_FUSIZE;
MACRO_HDE HDE_LAST_EXTENT;
MACRO_HDE HDE_MAX_NAME_LEN;
MACRO_HDE HDE_PROHIBITED;
MACRO_HDE HDE_PROTECTION;
MACRO_HDE HDE_RECORD;
MACRO_HDE HDE_ROOT_DIR_REC_SIZE;
MACRO_HDE HDE_UNUSED_FLAGS;
MACRO_HDIOC HDIOC;
MACRO_HDKIOCGBAD HDKIOCGBAD;
MACRO_HDKIOCGDIAG HDKIOCGDIAG;
MACRO_HDKIOCGTYPE HDKIOCGTYPE;
MACRO_HDKIOCSBAD HDKIOCSBAD;
MACRO_HDKIOCSCMD HDKIOCSCMD;
MACRO_HDKIOCSTYPE HDKIOCSTYPE;
MACRO_HDKL HDKL_HARD;
MACRO_HDKL HDKL_SOFT;
MACRO_HDK_NOERROR HDK_CORRECTED;
MACRO_HDK HDK_DIAGNOSE;
MACRO_HDK_NOERROR HDK_FATAL;
MACRO_HDK_NOERROR HDK_ISMEDIA;
MACRO_HDK HDK_ISOLATE;
MACRO_HDK HDK_KBUF;
MACRO_HDK_NOERROR HDK_NOERROR;
MACRO_HDK_NOERROR HDK_NONMEDIA;
MACRO_HDK HDK_READ;
MACRO_HDK_NOERROR HDK_RECOVERED;
MACRO_HDK HDK_SILENT;
MACRO_HDK HDK_WRITE;
MACRO_HEADERSIZE HEADERSIZE;
MACRO_HFIXEDSZ HFIXEDSZ;
MACRO_HID HID_CLASS_CODE;
MACRO_HID_GET_PARSER HID_CONNECT_EVENT;
MACRO_HID_GET_PARSER HID_DISCONNECT_EVENT;
MACRO_HID_VERSION HID_FAILURE;
MACRO_HID_GET_PARSER HID_FULL_POWER;
MACRO_HID_GET HID_GET_IDLE;
MACRO_HID_GET_PARSER HID_GET_PARSER_HANDLE;
MACRO_HID_GET HID_GET_PROTOCOL;
MACRO_HID_GET HID_GET_REPORT;
MACRO_HID_KEYBOARD HID_KEYBOARD_PROTOCOL;
MACRO_HID_KEYBOARD HID_MOUSE_PROTOCOL;
MACRO_HID_GET_PARSER HID_POWER_OFF;
MACRO_HID_GET HID_SET_IDLE;
MACRO_HID_GET HID_SET_PROTOCOL;
MACRO_HID_GET HID_SET_REPORT;
MACRO_HID HID_SUBCLASS;
MACRO_HID_VERSION HID_SUCCESS;
MACRO_HID_VERSION HID_VERSION_V_0;
MACRO_NTREC HIGHDENSITYTREC;
name_pos HIGHER_NAME;
MACRO_BRK HIQ;
MACRO_TTXOHI HIWAT;
MACRO_HMEG HMEG_CONFIG_64BIT_SHIFT;
MACRO_HMEG HMEG_CONFIG_64BIT_XFER;
MACRO_HMEG HMEG_CONFIG_BURST16;
MACRO_HMEG HMEG_CONFIG_BURST32;
MACRO_HMEG HMEG_CONFIG_BURST64;
MACRO_HMEG HMEG_CONFIG_BURSTSZ;
MACRO_HMEG HMEG_CONFIG_BURST_RES;
MACRO_HMEG HMEG_CONFIG_PARITY;
MACRO_HMEG HMEG_CONFIG_RES1;
MACRO_HMEG HMEG_MASK_ALN_CNT_EXP;
MACRO_HMEG HMEG_MASK_CRC_CNT_EXP;
MACRO_HMEG HMEG_MASK_DEFTIMR_EXP;
MACRO_HMEG HMEG_MASK_EOP_ERR;
MACRO_HMEG HMEG_MASK_EXECOLC_EXP;
MACRO_HMEG HMEG_MASK_FRAME_RCVD;
MACRO_HMEG HMEG_MASK_FRAME_SENT;
MACRO_HMEG HMEG_MASK_FSTCOLC_EXP;
MACRO_HMEG HMEG_MASK_INTR;
MACRO_HMEG HMEG_MASK_LATCOLC_EXP;
MACRO_HMEG HMEG_MASK_LEN_CNT_EXP;
MACRO_HMEG HMEG_MASK_MIF_INTR;
MACRO_HMEG HMEG_MASK_MXPKTSZ_ERR;
MACRO_HMEG HMEG_MASK_NRMCOLC_EXP;
MACRO_HMEG HMEG_MASK_RCV_CNT_EXP;
MACRO_HMEG HMEG_MASK_RINT;
MACRO_HMEG HMEG_MASK_RXFIFO_OVFL;
MACRO_HMEG HMEG_MASK_RXF_CNT_EXP;
MACRO_HMEG HMEG_MASK_RX_DROP;
MACRO_HMEG HMEG_MASK_RX_ERR_ACK;
MACRO_HMEG HMEG_MASK_RX_LATE_ERR;
MACRO_HMEG HMEG_MASK_RX_PAR_ERR;
MACRO_HMEG HMEG_MASK_RX_TAG_ERR;
MACRO_HMEG HMEG_MASK_SLV_ERR_ACK;
MACRO_HMEG HMEG_MASK_SLV_PAR_ERR;
MACRO_HMEG HMEG_MASK_SQE_TST_ERR;
MACRO_HMEG HMEG_MASK_TINT;
MACRO_HMEG HMEG_MASK_TXFIFO_UNDR;
MACRO_HMEG HMEG_MASK_TX_ALL;
MACRO_HMEG HMEG_MASK_TX_ERR_ACK;
MACRO_HMEG HMEG_MASK_TX_LATE_ERR;
MACRO_HMEG HMEG_MASK_TX_PAR_ERR;
MACRO_HMEG HMEG_MASK_TX_TAG_ERR;
MACRO_HMEG HMEG_RESET_ERX;
MACRO_HMEG HMEG_RESET_ETX;
MACRO_HMEG HMEG_RESET_GLOBAL;
MACRO_HMEG HMEG_STATUS_ALN_CNT_EXP;
MACRO_HMEG HMEG_STATUS_CRC_CNT_EXP;
MACRO_HMEG HMEG_STATUS_DEFTIMR_EXP;
MACRO_HMEG HMEG_STATUS_EOP_ERR;
MACRO_HMEG HMEG_STATUS_EXCOLC_EXP;
MACRO_HMEG HMEG_STATUS_FATAL_ERR;
MACRO_HMEG HMEG_STATUS_FRAME_RCVD;
MACRO_HMEG HMEG_STATUS_FRAME_SENT;
MACRO_HMEG HMEG_STATUS_FSTCOLC_EXP;
MACRO_HMEG HMEG_STATUS_INTR;
MACRO_HMEG HMEG_STATUS_LATCOLC_EXP;
MACRO_HMEG HMEG_STATUS_LEN_CNT_EXP;
MACRO_HMEG HMEG_STATUS_MIF_INTR;
MACRO_HMEG HMEG_STATUS_MXPKTSZ_ERR;
MACRO_HMEG HMEG_STATUS_NONFATAL_ERR;
MACRO_HMEG HMEG_STATUS_NORMAL_INT;
MACRO_HMEG HMEG_STATUS_NRMCOLC_EXP;
MACRO_HMEG HMEG_STATUS_RCV_CNT_EXP;
MACRO_HMEG HMEG_STATUS_RINT;
MACRO_HMEG HMEG_STATUS_RXFIFO_OVFL;
MACRO_HMEG HMEG_STATUS_RXF_CNT_EXP;
MACRO_HMEG HMEG_STATUS_RX_DROP;
MACRO_HMEG HMEG_STATUS_RX_ERR_ACK;
MACRO_HMEG HMEG_STATUS_RX_LATE_ERR;
MACRO_HMEG HMEG_STATUS_RX_PAR_ERR;
MACRO_HMEG HMEG_STATUS_RX_TAG_ERR;
MACRO_HMEG HMEG_STATUS_SLV_ERR_ACK;
MACRO_HMEG HMEG_STATUS_SLV_PAR_ERR;
MACRO_HMEG HMEG_STATUS_SQE_TST_ERR;
MACRO_HMEG HMEG_STATUS_TINT;
MACRO_HMEG HMEG_STATUS_TXFIFO_UNDR;
MACRO_HMEG HMEG_STATUS_TX_ALL;
MACRO_HMEG HMEG_STATUS_TX_ERR_ACK;
MACRO_HMEG HMEG_STATUS_TX_LATE_ERR;
MACRO_HMEG HMEG_STATUS_TX_PAR_ERR;
MACRO_HMEG HMEG_STATUS_TX_TAG_ERR;
MACRO_HMEMAXMIFDELAY HMEMAXMIFDELAY;
MACRO_HMEMAXRSTDELAY HMEMAXRSTDELAY;
MACRO_HMEPERIOD HMEPERIOD;
MACRO_HMERMD HMERMD_BUFSIZE;
MACRO_HMERMD HMERMD_BUFSIZE_SHIFT;
MACRO_HMERMD HMERMD_CKSUM;
MACRO_HMERMD HMERMD_OVFLOW;
MACRO_HMERMD HMERMD_OWN;
MACRO_HMER HMER_CONFIG_FBOFFSET;
MACRO_HMER HMER_CONFIG_FBO_SHIFT;
MACRO_HMER HMER_CONFIG_RES1;
MACRO_HMER HMER_CONFIG_RES2;
MACRO_HMER HMER_CONFIG_RES3;
MACRO_HMER HMER_CONFIG_RXDMA_EN;
MACRO_HMER HMER_CONFIG_RXRINGSZ;
MACRO_HMER HMER_CONFIG_RXRINGSZ128;
MACRO_HMER HMER_CONFIG_RXRINGSZ256;
MACRO_HMER HMER_CONFIG_RXRINGSZ32;
MACRO_HMER HMER_CONFIG_RXRINGSZ64;
MACRO_HMER HMER_CONFIG_RX_CSSTART;
MACRO_HMER HMER_RXRINGSZ_SHIFT;
MACRO_HMETMD HMETMD_BUFSIZE;
MACRO_HMETMD HMETMD_CSENABL;
MACRO_HMETMD HMETMD_CSSTART;
MACRO_HMETMD HMETMD_CSSTART_SHIFT;
MACRO_HMETMD HMETMD_CSSTUFF;
MACRO_HMETMD HMETMD_CSSTUFF_SHIFT;
MACRO_HMETMD HMETMD_EOP;
MACRO_HMETMD HMETMD_OWN;
MACRO_HMETMD HMETMD_SOP;
MACRO_HMET HMET_CONFIG_DRAIN_INT;
MACRO_HMET HMET_CONFIG_TXDMA_EN;
MACRO_HMET HMET_CONFIG_TXFIFOTH;
MACRO_HMET HMET_RINGSZ_SHIFT;
MACRO_HMET HMET_TXPEND_TDMD;
MACRO_HMEWAITPERIOD HMEWAITPERIOD;
MACRO_HME HME_AUTO_SPEED;
MACRO_HME_BBCLK HME_BBCLK_HIGH;
MACRO_HME_BBCLK HME_BBCLK_LOW;
MACRO_HME_PHYRST HME_EXTERNAL_PHYAD;
MACRO_HME HME_FORCE_SPEED;
MACRO_HME HME_FULL_DUPLEX;
MACRO_HME HME_HALF_DUPLEX;
MACRO_HME HME_HMDALIGN;
MACRO_HME_PHYRST HME_INTERNAL_PHYAD;
MACRO_HME HME_IOC;
MACRO_HME HME_IOC_GET_SPEED;
MACRO_HME HME_IOC_SET_SPEED;
MACRO_HME_PHYRST HME_MIF_BASIC;
MACRO_HME_PHYRST HME_MIF_CFGBB;
MACRO_HME_PHYRST HME_MIF_CFGM0;
MACRO_HME_PHYRST HME_MIF_CFGM1;
MACRO_HME_PHYRST HME_MIF_CFGPD;
MACRO_HME_PHYRST HME_MIF_CFGPD_SHIFT;
MACRO_HME_PHYRST HME_MIF_CFGPE;
MACRO_HME_PHYRST HME_MIF_CFGPR;
MACRO_HME_PHYRST HME_MIF_CFGPR_SHIFT;
MACRO_HME_PHYRST HME_MIF_CFGPS;
MACRO_HME_BBCLK HME_MIF_FRDATA;
MACRO_HME_BBCLK HME_MIF_FROP;
MACRO_HME_BBCLK HME_MIF_FRPHYAD;
MACRO_HME_BBCLK HME_MIF_FRPHYAD_SHIFT;
MACRO_HME_BBCLK HME_MIF_FRREAD;
MACRO_HME_BBCLK HME_MIF_FRREGAD;
MACRO_HME_BBCLK HME_MIF_FRREGAD_SHIFT;
MACRO_HME_BBCLK HME_MIF_FRST;
MACRO_HME_BBCLK HME_MIF_FRTA0;
MACRO_HME_BBCLK HME_MIF_FRTA1;
MACRO_HME_BBCLK HME_MIF_FRWRITE;
MACRO_HME_PHYRST HME_MIF_FSM;
MACRO_HME_PHYRST HME_MIF_INTMASK;
MACRO_HME_PHYRST HME_MIF_POLL_DELAY;
MACRO_HME_PHYRST HME_MIF_STATUS;
MACRO_HME_PHYRST HME_PHYRST_MAXDELAY;
MACRO_HME_PHY HME_PHY_ANAR;
MACRO_HME_PHY HME_PHY_ANER;
MACRO_HME_PHY HME_PHY_ANLPAR;
MACRO_HME_PHY HME_PHY_AR;
MACRO_HME_PHY HME_PHY_BMCR;
MACRO_HME_PHY HME_PHY_BMSR;
MACRO_HME_PHY HME_PHY_BTXPC;
MACRO_HME_PHY HME_PHY_CSC;
MACRO_HME_PHY HME_PHY_DIS;
MACRO_HME_PHY HME_PHY_FCSC;
MACRO_HME_PHY HME_PHY_IDR1;
MACRO_HME_PHY HME_PHY_IDR2;
MACRO_HME_PHY HME_PHY_LBREMR;
MACRO_HME_PHY HME_PHY_NICR;
MACRO_HME_PHY HME_PHY_NWAYTR;
MACRO_HME_PHY HME_PHY_REC;
MACRO_HME_PHY HME_PHY_SRR;
MACRO_HME_PHY HME_PHY_TPISR;
MACRO_HME_PHY HME_PHY_VRES1;
MACRO_HME HME_RMDMAX;
MACRO_HME_RMD HME_RMD_BUFALIGN;
MACRO_HME HME_SPEED_10;
MACRO_HME HME_SPEED_100;
MACRO_HME HME_TMDMAX;
MACRO_HNAMLEN HNAMLEN;
MACRO_SSYS HOLDFORK;
MACRO_SSYS HOLDFORK1;
MACRO_SSYS HOLDWATCH;
MACRO_HOLE HOLE;
MACRO_HOME HOME;
MACRO_HOMEARROW HOMEARROW;
MACRO_HOPCNT HOPCNT_INFINITY;
MACRO_BORDER_GRAVITY HORIZ_BORDER_GRAVITY;
MACRO_HOSTNAMESZ HOSTNAMESZ;
MACRO_HOST_LLC HOST_LLC_IN_USE;
MACRO_HOST HOST_NOT_FOUND;
MACRO_HOURMASK HOURMASK;
MACRO_HOURSHIFT HOURSHIFT;
MACRO_HOURSPERDAY HOURSPERDAY;
MACRO_HOURS HOURS_PER_DAY;
MACRO_HPE HPE_FPESIZE;
MACRO_HREF HREF;
MACRO_HRM HRM_BLIST_INCR;
MACRO_HRM HRM_BYTES;
MACRO_HRM HRM_HASHMASK;
MACRO_HRM HRM_HASHSIZE;
MACRO_HRM HRM_PAGES;
MACRO_HRM HRM_PGBYTEMASK;
MACRO_HRM HRM_PGPERBYTE;
MACRO_HRM HRM_SHIFT;
MACRO_HRM HRM_SWSMONID;
MACRO_HSFSMNT HSFSMNT_NOMAPLCASE;
MACRO_HSFSMNT HSFSMNT_NORRIP;
MACRO_HSFSMNT HSFSMNT_NOTRAILDOT;
MACRO_HSFS HSFS_ERR_BAD_FILE_LEN;
MACRO_HSFS HSFS_ERR_BAD_ROOT_DIR;
MACRO_HSFS HSFS_ERR_LOWER_CASE_NM;
MACRO_HSFS HSFS_ERR_TRAILING_JUNK;
MACRO_HSFS HSFS_ERR_UNSUP_TYPE;
MACRO_HSFS HSFS_MAGIC;
MACRO_HSFS HSFS_MIN_DL_SHFT;
MACRO_HSIZLEN HSIZLEN;
MACRO_HSV HSV_ABSTR_ID_STRLEN;
MACRO_HSV HSV_APPL_ID_STRLEN;
MACRO_HSV HSV_COPYR_ID_STRLEN;
MACRO_HSV HSV_DATE_LEN;
MACRO_HSV HSV_FILE_STRUCT_ID_VER;
MACRO_HSV HSV_ID_STRLEN;
MACRO_HSV HSV_ID_VER;
MACRO_HSV HSV_PREP_ID_STRLEN;
MACRO_HSV HSV_PUB_ID_STRLEN;
MACRO_HSV HSV_SYS_ID_STRLEN;
MACRO_HSV HSV_VOL_ID_STRLEN;
MACRO_HSV HSV_VOL_SET_ID_STRLEN;
MACRO_HS_DIR HS_DIR_NAMELEN;
MACRO_HS_DIR HS_FILE_NAMELEN;
MACRO_HS_HASHSIZE HS_HASHSIZE;
MACRO_HS_HASHSIZE HS_HSTABLESIZE;
MACRO_HS HS_SECTOR_SHIFT;
MACRO_HS HS_SECTOR_SIZE;
MACRO_HS HS_SYSAREA_SEC;
MACRO_HS HS_VOLDESC_SEC;
hs_vol_type HS_VOL_TYPE_HS;
hs_vol_type HS_VOL_TYPE_ISO;
MACRO_HTIMLEN HTIMLEN;
MACRO_HUB HUB_CHANGE_STATUS;
MACRO_HUB HUB_CHARS_COMPOUND_DEVICE;
MACRO_HUB HUB_CHARS_GANGED_POWER;
MACRO_HUB HUB_CHARS_GLOBAL_OVER_CURRENT;
MACRO_HUB HUB_CHARS_INDIVIDUAL_PORT_POWER;
MACRO_HUB HUB_CHARS_INDIV_OVER_CURRENT;
MACRO_HUB HUB_CHARS_NO_OVER_CURRENT;
MACRO_HUB HUB_CHARS_NO_POWER_SWITCHING;
MACRO_HUB HUB_CHARS_POWER_SWITCHING_MODE;
MACRO_CLASS_CODE HUB_CLASS_CODE;
MACRO_HUB_LOCAL HUB_LOCAL_POWER_STATUS;
MACRO_HUB_LOCAL HUB_OVER_CURRENT;
MACRO_WLOCK HWORD_WLOCK;
MACRO_SR0 H_SR0;
MACRO_I82586ALIGN I82586ALIGN;
MACRO_IAKPRI IABACKQ;
MACRO_IAC IAC;
MACRO_IUPD IACC;
MACRO_OFFSET IACK_OFFSET;
MACRO_IAKPRI IAKPRI;
MACRO_IAMAXUPRI IAMAXUPRI;
MACRO_IANPROCS IANPROCS;
MACRO_IAOFFUPRI IAOFFUPRI;
MACRO_IAKPRI IASLEPT;
MACRO_IUPD IATTCHG;
MACRO_IA_INTERACTIVE IA_BOOST;
MACRO_IA_INTERACTIVE IA_GETDPSIZE;
MACRO_IA_INTERACTIVE IA_GETDPTBL;
MACRO_IA_INTERACTIVE IA_INTERACTIVE_OFF;
MACRO_IA_INTERACTIVE IA_NICED;
MACRO_IA_NOCHANGE IA_NOCHANGE;
MACRO_IA IA_OFF_PRIORITY;
MACRO_IA IA_OFF_QUANTUM;
MACRO_IA_INTERACTIVE IA_SETDPTBL;
MACRO_IA_INTERACTIVE IA_SET_INTERACTIVE;
MACRO_IUPD IBDWRITE;
MACRO_IBSHIFT IBSHIFT;
MACRO_IBSIZE IBSIZE;
MACRO_IC IC;
MACRO_ISIG ICANON;
MACRO_ICB ICB_FLAG_ARCHIVE;
MACRO_ICB ICB_FLAG_CONTIG;
MACRO_ICB ICB_FLAG_EXT_AD;
MACRO_ICB ICB_FLAG_LONG_AD;
MACRO_ICB ICB_FLAG_MVERS;
MACRO_ICB ICB_FLAG_NON_RELOC;
MACRO_ICB ICB_FLAG_ONE_AD;
MACRO_ICB ICB_FLAG_SETGID;
MACRO_ICB ICB_FLAG_SETUID;
MACRO_ICB ICB_FLAG_SHORT_AD;
MACRO_ICB ICB_FLAG_SORTED;
MACRO_ICB ICB_FLAG_STICKY;
MACRO_ICB ICB_FLAG_SYSTEM;
MACRO_ICB ICB_FLAG_TRNSFRMED;
MACRO_IUPD ICHG;
MACRO_ICK ICK_M_CTL_MAGIC;
MACRO_ICK ICK_NONE;
MACRO_ICK ICK_REMAP;
MACRO_ICK ICK_VALID;
MACRO_ICMP6 ICMP6_DST_UNREACH;
MACRO_ICMP6_MAX ICMP6_DST_UNREACH_ADDR;
MACRO_ICMP6_MAX ICMP6_DST_UNREACH_ADMIN;
MACRO_ICMP6_MAX ICMP6_DST_UNREACH_NOPORT;
MACRO_ICMP6_MAX ICMP6_DST_UNREACH_NOROUTE;
MACRO_ICMP6_MAX ICMP6_DST_UNREACH_NOTNEIGHBOR;
MACRO_ICMP6 ICMP6_ECHO_REPLY;
MACRO_ICMP6 ICMP6_ECHO_REQUEST;
MACRO_ICMP6_FILTER ICMP6_FILTER;
MACRO_ICMP6 ICMP6_INFOMSG_MASK;
MACRO_ICMP6_MAX ICMP6_MAX_HOST_REPORT_DELAY;
MACRO_ICMP6_MAX ICMP6_MAX_INFO_TYPE;
MACRO_ICMP6 ICMP6_MEMBERSHIP_QUERY;
MACRO_ICMP6 ICMP6_MEMBERSHIP_REDUCTION;
MACRO_ICMP6 ICMP6_MEMBERSHIP_REPORT;
MACRO_ICMP6 ICMP6_MINLEN;
MACRO_ICMP6 ICMP6_PACKET_TOO_BIG;
MACRO_ICMP6_MAX ICMP6_PARAMPROB_HEADER;
MACRO_ICMP6_MAX ICMP6_PARAMPROB_NEXTHEADER;
MACRO_ICMP6_MAX ICMP6_PARAMPROB_OPTION;
MACRO_ICMP6 ICMP6_PARAM_PROB;
MACRO_ICMP6 ICMP6_TIME_EXCEEDED;
MACRO_ICMP6_MAX ICMP6_TIME_EXCEED_REASSEMBLY;
MACRO_ICMP6_MAX ICMP6_TIME_EXCEED_TRANSIT;
MACRO_ICMPH ICMPH_SIZE;
MACRO_ICMP ICMP_ADDRESS_MASK_REPLY;
MACRO_ICMP ICMP_ADDRESS_MASK_REQUEST;
MACRO_ICMP ICMP_DEST_HOST_UNKNOWN;
MACRO_ICMP ICMP_DEST_HOST_UNREACH_ADMIN;
MACRO_ICMP ICMP_DEST_HOST_UNREACH_TOS;
MACRO_ICMP ICMP_DEST_NET_UNKNOWN;
MACRO_ICMP ICMP_DEST_NET_UNREACH_ADMIN;
MACRO_ICMP ICMP_DEST_NET_UNREACH_TOS;
MACRO_ICMP ICMP_DEST_UNREACHABLE;
MACRO_ICMP_MINLEN ICMP_ECHO;
MACRO_ICMP_MINLEN ICMP_ECHOREPLY;
MACRO_ICMP ICMP_ECHO_REPLY;
MACRO_ICMP ICMP_ECHO_REQUEST;
MACRO_ICMP ICMP_FRAGMENTATION_NEEDED;
MACRO_ICMP ICMP_HOST_UNREACHABLE;
MACRO_ICMP ICMP_INFO_REPLY;
MACRO_ICMP ICMP_INFO_REQUEST;
MACRO_ICMP_MINLEN ICMP_IREQ;
MACRO_ICMP_MINLEN ICMP_IREQREPLY;
MACRO_ICMP_MINLEN ICMP_MASKLEN;
MACRO_ICMP_MINLEN ICMP_MASKREPLY;
MACRO_ICMP_MINLEN ICMP_MASKREQ;
MACRO_ICMP_MINLEN ICMP_MAXTYPE;
MACRO_ICMP_MINLEN ICMP_MINLEN;
MACRO_ICMP ICMP_NET_UNREACHABLE;
MACRO_ICMP_MINLEN ICMP_PARAMPROB;
MACRO_ICMP_MINLEN ICMP_PARAMPROB_BADLENGTH;
MACRO_ICMP_MINLEN ICMP_PARAMPROB_OPTABSENT;
MACRO_ICMP ICMP_PARAM_PROBLEM;
MACRO_ICMP ICMP_PORT_UNREACHABLE;
MACRO_ICMP ICMP_PROTOCOL_UNREACHABLE;
MACRO_ICMP ICMP_REASSEMBLY_TIME_EXCEEDED;
MACRO_ICMP ICMP_REDIRECT;
MACRO_ICMP_MINLEN ICMP_REDIRECT_HOST;
MACRO_ICMP_MINLEN ICMP_REDIRECT_NET;
MACRO_ICMP_MINLEN ICMP_REDIRECT_TOSHOST;
MACRO_ICMP_MINLEN ICMP_REDIRECT_TOSNET;
MACRO_ICMP_MINLEN ICMP_ROUTERADVERT;
MACRO_ICMP_MINLEN ICMP_ROUTERSOLICIT;
MACRO_ICMP ICMP_ROUTER_ADVERTISEMENT;
MACRO_ICMP ICMP_ROUTER_SOLICITATION;
MACRO_ICMP_MINLEN ICMP_SOURCEQUENCH;
MACRO_ICMP ICMP_SOURCE_QUENCH;
MACRO_ICMP ICMP_SOURCE_ROUTE_FAILED;
MACRO_ICMP ICMP_SRC_HOST_ISOLATED;
MACRO_ICMP ICMP_TIME_EXCEEDED;
MACRO_ICMP ICMP_TIME_STAMP_REPLY;
MACRO_ICMP ICMP_TIME_STAMP_REQUEST;
MACRO_ICMP_MINLEN ICMP_TIMXCEED;
MACRO_ICMP_MINLEN ICMP_TIMXCEED_INTRANS;
MACRO_ICMP_MINLEN ICMP_TIMXCEED_REASS;
MACRO_ICMP_MINLEN ICMP_TSTAMP;
MACRO_ICMP_MINLEN ICMP_TSTAMPREPLY;
MACRO_ICMP ICMP_TTL_EXCEEDED;
MACRO_ICMP_MINLEN ICMP_UNREACH;
MACRO_ICMP_MINLEN ICMP_UNREACH_FILTER_PROHIB;
MACRO_ICMP_MINLEN ICMP_UNREACH_HOST;
MACRO_ICMP_MINLEN ICMP_UNREACH_HOST_PRECEDENCE;
MACRO_ICMP_MINLEN ICMP_UNREACH_HOST_PROHIB;
MACRO_ICMP_MINLEN ICMP_UNREACH_HOST_UNKNOWN;
MACRO_ICMP_MINLEN ICMP_UNREACH_ISOLATED;
MACRO_ICMP_MINLEN ICMP_UNREACH_NEEDFRAG;
MACRO_ICMP_MINLEN ICMP_UNREACH_NET;
MACRO_ICMP_MINLEN ICMP_UNREACH_NET_PROHIB;
MACRO_ICMP_MINLEN ICMP_UNREACH_NET_UNKNOWN;
MACRO_ICMP_MINLEN ICMP_UNREACH_PORT;
MACRO_ICMP_MINLEN ICMP_UNREACH_PRECEDENCE_CUTOFF;
MACRO_ICMP_MINLEN ICMP_UNREACH_PROTOCOL;
MACRO_ICMP_MINLEN ICMP_UNREACH_SRCFAIL;
MACRO_ICMP_MINLEN ICMP_UNREACH_TOSHOST;
MACRO_ICMP_MINLEN ICMP_UNREACH_TOSNET;
MACRO_IGNBRK ICRNL;
MACRO_SR0 IC_SR0;
MACRO_IDDI IDDI_INTR_TYPE_FAST;
MACRO_IDDI IDDI_INTR_TYPE_NORMAL;
MACRO_IDDI IDDI_INTR_TYPE_SOFT;
MACRO_IUPD IDEL;
MACRO_IDE IDE_ASSOCIATED;
MACRO_IDE IDE_DIRECTORY;
MACRO_IDE IDE_EXISTENCE;
MACRO_IDE IDE_FDESIZE;
MACRO_IDE IDE_LAST_EXTENT;
MACRO_IDE IDE_MAX_NAME_LEN;
MACRO_IDE IDE_PROHIBITED;
MACRO_IDE IDE_PROTECTION;
MACRO_IDE IDE_RECORD;
MACRO_IDE IDE_ROOT_DIR_REC_SIZE;
MACRO_IDE IDE_UNUSED_FLAGS;
MACRO_IUPD IDIRECTIO;
MACRO_IDLE IDLE;
MACRO_IDLEKEY IDLEKEY;
MACRO_IDLEN IDLEN;
MACRO_IECB IECB_ABORTED;
MACRO_IECB IECB_BUSY;
MACRO_IECB IECB_CMD;
MACRO_IECB IECB_DONE;
MACRO_IECB IECB_EL;
MACRO_IECB IECB_INTR;
MACRO_IECB IECB_OK;
MACRO_IECB IECB_SUSP;
MACRO_IECMD IECMD_ACK_CNA;
MACRO_IECMD IECMD_ACK_CX;
MACRO_IECMD IECMD_ACK_FR;
MACRO_IECMD IECMD_ACK_RNR;
MACRO_IECMD IECMD_CU_ABORT;
MACRO_IECMD IECMD_CU_RESUME;
MACRO_IECMD IECMD_CU_START;
MACRO_IECMD IECMD_CU_SUSPEND;
MACRO_IECMD IECMD_RESET;
MACRO_IECMD IECMD_RU_ABORT;
MACRO_IECMD IECMD_RU_RESUME;
MACRO_IECMD IECMD_RU_START;
MACRO_IECMD IECMD_RU_SUSPEND;
MACRO_IECONF IECONF_ACLOC;
MACRO_IECONF IECONF_ACR;
MACRO_IECONF IECONF_ALEN;
MACRO_IECONF IECONF_BOF;
MACRO_IECONF IECONF_CDFILT;
MACRO_IECONF IECONF_CDSRC;
MACRO_IECONF IECONF_CRC16;
MACRO_IECONF IECONF_CRFILT;
MACRO_IECONF IECONF_CRSRC;
MACRO_IECONF IECONF_EXTLP;
MACRO_IECONF IECONF_HDLC;
MACRO_IECONF IECONF_INTLP;
MACRO_IECONF IECONF_LINPRIO;
MACRO_IECONF IECONF_MANCH;
MACRO_IECONF IECONF_NOBRD;
MACRO_IECONF IECONF_NOCARR;
MACRO_IECONF IECONF_NOCRC;
MACRO_IECONF IECONF_PAD;
MACRO_IECONF IECONF_PREAM;
MACRO_IECONF IECONF_PROMISC;
MACRO_IECONF IECONF_RETRY;
MACRO_IECONF IECONF_SAVBF;
MACRO_IECONF IECONF_SLTTMH;
MACRO_IECONF IECONF_SRDY;
MACRO_IECUS IECUS_ACTIVE;
MACRO_IECUS IECUS_IDLE;
MACRO_IECUS IECUS_SUSPENDED;
MACRO_ADDR_SIZE IEEE_ADDR_SIZE;
MACRO_IEETHERADDRL IEETHERADDRL;
MACRO_IEETHERADDRL IEMCADDRMAX;
MACRO_IENULLOFF IENULLOFF;
MACRO_IERBD IERBD_CNTHI;
MACRO_IERBD IERBD_EL;
MACRO_IERBD IERBD_EOF;
MACRO_IERBD IERBD_SIZEHI;
MACRO_IERBD IERBD_VALID;
MACRO_IERFD IERFD_ALIGN;
MACRO_IERFD IERFD_BUSY;
MACRO_IERFD IERFD_CRCERR;
MACRO_IERFD IERFD_DONE;
MACRO_IERFD IERFD_EL;
MACRO_IERFD IERFD_NOEOF;
MACRO_IERFD IERFD_NOSPACE;
MACRO_IERFD IERFD_OK;
MACRO_IERFD IERFD_OVERRUN;
MACRO_IERFD IERFD_SHORT;
MACRO_IERFD IERFD_SUSP;
MACRO_IERUS IERUS_IDLE;
MACRO_IERUS IERUS_NORESOURCE;
MACRO_IERUS IERUS_READY;
MACRO_IERUS IERUS_SUSPENDED;
MACRO_IESCB IESCB_CNA;
MACRO_IESCB IESCB_CUS;
MACRO_IESCB IESCB_CX;
MACRO_IESCB IESCB_FR;
MACRO_IESCB IESCB_RNR;
MACRO_IESCB IESCB_RUS;
MACRO_IESCPADDR IESCPADDR;
MACRO_IESCPPAD IESCPPAD;
MACRO_IETBD IETBD_CNTHI;
MACRO_IETBD IETBD_EOF;
MACRO_IETCB IETCB_ABORTED;
MACRO_IETCB IETCB_BUSY;
MACRO_IETCB IETCB_CMD;
MACRO_IETCB IETCB_DEFER;
MACRO_IETCB IETCB_DONE;
MACRO_IETCB IETCB_EL;
MACRO_IETCB IETCB_HEART;
MACRO_IETCB IETCB_INTR;
MACRO_IETCB IETCB_NCOLL;
MACRO_IETCB IETCB_NOCARR;
MACRO_IETCB IETCB_NOCTS;
MACRO_IETCB IETCB_OK;
MACRO_IETCB IETCB_SUSP;
MACRO_IETCB IETCB_UNDERRUN;
MACRO_IETCB IETCB_XCOLL;
MACRO_ECTSIZE IETSIZE;
MACRO_IEXEC IEXEC;
MACRO_ISIG IEXTEN;
MACRO_IE_NOP IE_CONFIG;
MACRO_IE_NOP IE_DIAGNOSE;
MACRO_IE_NOP IE_DUMP;
MACRO_IE_NOP IE_IADDR;
MACRO_IE IE_IORAM_SIZE;
MACRO_IE_NOP IE_MADDR;
MACRO_IE_NOP IE_NOP;
MACRO_IE_NOP IE_TDR;
MACRO_IE IE_TE_MEMSIZE;
MACRO_IE_NOP IE_TRANSMIT;
MACRO_IUPD IFASTSYMLNK;
MACRO_IFA IFA_ROUTE;
MACRO_IFBLK IFBLK;
MACRO_IFIFO IFCHR;
MACRO_IFIFO IFDIR;
MACRO_IFF IFF_ADDRCONF;
MACRO_IFF IFF_ALLMULTI;
MACRO_IFF IFF_ANYCAST;
MACRO_IFF IFF_BROADCAST;
MACRO_IFF IFF_CANTCHANGE;
MACRO_IFF IFF_DEBUG;
MACRO_IFF IFF_DEPRECATED;
MACRO_IFF IFF_DHCPRUNNING;
MACRO_IFF IFF_INTELLIGENT;
MACRO_IFF IFF_IPV4;
MACRO_IFF IFF_IPV6;
MACRO_IFF IFF_LOOPBACK;
MACRO_IFF IFF_MIPRUNNING;
MACRO_IFF IFF_MULTICAST;
MACRO_IFF IFF_MULTI_BCAST;
MACRO_IFF IFF_NOARP;
MACRO_IFF IFF_NOLOCAL;
MACRO_IFF IFF_NONUD;
MACRO_IFF IFF_NORTEXCH;
MACRO_IFF IFF_NOTRAILERS;
MACRO_IFF IFF_NOXMIT;
MACRO_IFF IFF_POINTOPOINT;
MACRO_IFF IFF_PRIVATE;
MACRO_IFF IFF_PROMISC;
MACRO_IFF IFF_ROUTER;
MACRO_IFF IFF_RUNNING;
MACRO_IFF IFF_UNNUMBERED;
MACRO_IFF IFF_UP;
MACRO_IFIFO IFIFO;
MACRO_IFLAGS IFLAGS;
MACRO_IFLAGS_SVID IFLAGS_SVID;
MACRO_IFLNK IFLNK;
MACRO_IFMT IFMT;
MACRO_IFNAMSIZ IFNAMSIZ;
MACRO_IFNET IFNET_SLOWHZ;
MACRO_IFPIOCGMAP IFPIOCGMAP;
MACRO_IFPIO IFPIO_FORCE_LIP;
MACRO_IFPIO IFPIO_LINKSTATUS;
MACRO_IFP_CMD IFP_CMD_ABORTED;
MACRO_IFP_CMD IFP_CMD_ABORT_REJECTED;
MACRO_IFP_CMD IFP_CMD_CMPLT;
MACRO_IFP_CMD IFP_CMD_DATA_OVR;
MACRO_IFP_CMD IFP_CMD_DATA_UNDER;
MACRO_IFP_CMD IFP_CMD_DMA_DERR;
MACRO_IFP_CMD IFP_CMD_INCOMPLETE;
MACRO_IFP_CMD IFP_CMD_PORT_CONFIG_CHANGED;
MACRO_IFP_CMD IFP_CMD_PORT_LOGGED_OUT;
MACRO_IFP_CMD IFP_CMD_PORT_UNAVAIL;
MACRO_IFP_CMD IFP_CMD_QUEUE_FULL;
MACRO_IFP_CMD IFP_CMD_RESET;
MACRO_IFP_CMD IFP_CMD_RESET_REJECTED;
MACRO_IFP_CMD IFP_CMD_TIMEOUT;
MACRO_IFP_CMD IFP_CMD_TRAN_ERR;
MACRO_IFP IFP_NUM_ENTRIES_IN_MAP;
MACRO_IFQ IFQ_MAXLEN;
MACRO_IFBLK IFREG;
MACRO_IFSHAD IFSHAD;
MACRO_IFSOCK IFSOCK;
ifta_proto IFTAP_INVALID;
ifta_proto IFTAP_IPV4;
ifta_proto IFTAP_IPV6;
MACRO_IFTUN IFTUN_DST;
MACRO_IFTUN IFTUN_SECINFOLEN;
MACRO_IFTUN IFTUN_SECURITY;
MACRO_IFTUN IFTUN_SRC;
MACRO_IFTUN IFTUN_VERSION;
MACRO_IFT IFT_1822;
MACRO_IFT IFT_AAL5;
MACRO_IFT IFT_ARCNET;
MACRO_IFT IFT_ARCNETPLUS;
MACRO_IFT IFT_ATM;
MACRO_IFT IFT_CEPT;
MACRO_IFT IFT_DS3;
MACRO_IFT IFT_EON;
MACRO_IFT IFT_ETHER;
MACRO_IFT IFT_FDDI;
MACRO_IFT IFT_FRELAY;
MACRO_IFT IFT_FRELAYDCE;
MACRO_IFT IFT_HDH1822;
MACRO_IFT IFT_HIPPI;
MACRO_IFT IFT_HSSI;
MACRO_IFT IFT_HY;
MACRO_IFT IFT_ISDNBASIC;
MACRO_IFT IFT_ISDNPRIMARY;
MACRO_IFT IFT_ISO88022LLC;
MACRO_IFT IFT_ISO88023;
MACRO_IFT IFT_ISO88024;
MACRO_IFT IFT_ISO88025;
MACRO_IFT IFT_ISO88026;
MACRO_IFT IFT_LAPB;
MACRO_IFT IFT_LOCALTALK;
MACRO_IFT IFT_LOOP;
MACRO_IFT IFT_MIOX25;
MACRO_IFT IFT_MODEM;
MACRO_IFT IFT_NSIP;
MACRO_IFT IFT_OTHER;
MACRO_IFT IFT_P10;
MACRO_IFT IFT_P80;
MACRO_IFT IFT_PARA;
MACRO_IFT IFT_PPP;
MACRO_IFT IFT_PROPMUX;
MACRO_IFT IFT_PROPVIRTUAL;
MACRO_IFT IFT_PTPSERIAL;
MACRO_IFT IFT_RS232;
MACRO_IFT IFT_SDLC;
MACRO_IFT IFT_SIP;
MACRO_IFT IFT_SLIP;
MACRO_IFT IFT_SMDSDXI;
MACRO_IFT IFT_SMDSICIP;
MACRO_IFT IFT_SONET;
MACRO_IFT IFT_SONETPATH;
MACRO_IFT IFT_SONETVT;
MACRO_IFT IFT_STARLAN;
MACRO_IFT IFT_T1;
MACRO_IFT IFT_ULTRA;
MACRO_IFT IFT_V35;
MACRO_IFT IFT_X25;
MACRO_IFT IFT_X25DDN;
MACRO_IFT IFT_X25PLE;
MACRO_IFT IFT_XETHER;
MACRO_IF_SCSI IF_FLOPPY;
MACRO_IF IF_NAMESIZE;
MACRO_IF_SCSI IF_PCMCIA;
MACRO_IF_SCSI IF_SCSI;
MACRO_IGMPMSG IGMPMSG_NOCACHE;
MACRO_IGMPMSG IGMPMSG_WHOLEPKT;
MACRO_IGMPMSG IGMPMSG_WRONGVIF;
MACRO_IGMP IGMP_DVMRP;
MACRO_IGMP IGMP_HOST_LEAVE_MESSAGE;
MACRO_IGMP IGMP_HOST_MEMBERSHIP_QUERY;
MACRO_IGMP IGMP_HOST_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_HOST_NEW_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_MAX_HOST_REPORT_DELAY;
MACRO_IGMP IGMP_MEMBERSHIP_QUERY;
MACRO_IGMP IGMP_MINLEN;
MACRO_IGMP IGMP_MTRACE;
MACRO_IGMP IGMP_MTRACE_RESP;
MACRO_IGMP IGMP_PIM;
MACRO_IGMP IGMP_SLOWTIMO_INTERVAL;
MACRO_IGMP IGMP_TIMER_SCALE;
MACRO_IGMP IGMP_V1_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_V2_LEAVE_GROUP;
MACRO_IGMP IGMP_V2_MEMBERSHIP_REPORT;
MACRO_IGNBRK IGNBRK;
MACRO_IGNBRK IGNCR;
MACRO_EVEN IGNORE_P;
MACRO_IGNBRK IGNPAR;
MACRO_IGN IGN_PID;
MACRO_IL IL;
MACRO_ILDTCAPSIZE ILDTCAPSIZE;
MACRO_ILDTCAPSIZE ILDTRCTABSIZ;
MACRO_ILD ILD_GCONFIG;
MACRO_ILD ILD_INIT;
MACRO_ILD ILD_LLC2;
MACRO_ILD ILD_MAC;
MACRO_ILD ILD_PPA_CONFIG;
MACRO_ILD ILD_PPA_INFO;
MACRO_ILD ILD_TCAPSTART;
MACRO_ILD ILD_TCAPSTOP;
MACRO_ILD ILD_UNINIT;
MACRO_ILL ILL_BADSTK;
MACRO_ILL_BD ILL_BD;
MACRO_ILL ILL_COPROC;
MACRO_ILL_FRAG ILL_FRAG_HASH_TBL_COUNT;
MACRO_ILL ILL_ILLADR;
MACRO_ILL ILL_ILLOPC;
MACRO_ILL ILL_ILLOPN;
MACRO_ILL ILL_ILLTRP;
MACRO_ILL ILL_PRVOPC;
MACRO_ILL ILL_PRVREG;
MACRO_IGNBRK IMAXBEL;
MACRO_IUPD IMOD;
MACRO_IUPD IMODACC;
MACRO_IUPD IMODTIME;
MACRO_IMPLINK IMPLINK_HIGHEXPER;
MACRO_IMPLINK IMPLINK_IP;
MACRO_IMPLINK IMPLINK_LOWEXPER;
MACRO_GROUPS IMPMEM_GROUPS;
MACRO_INT16SZ IN6ADDRSZ;
MACRO_INT16SZ INADDRSZ;
MACRO_INADDR INADDR_ALLHOSTS_GROUP;
MACRO_INADDR INADDR_ALLRTRS_GROUP;
MACRO_INADDR INADDR_ANY;
MACRO_INADDR INADDR_BROADCAST;
MACRO_INADDR INADDR_LOOPBACK;
MACRO_INADDR INADDR_MAX_LOCAL_GROUP;
MACRO_INADDR INADDR_UNSPEC_GROUP;
MACRO_INCOMPATIBLE INCOMPATIBLE;
MACRO_INCORRECT INCORRECT_LENGTH;
MACRO_INDIR INDIR_MASK;
MACRO_ADDRSTRLEN INET6_ADDRSTRLEN;
MACRO_ADDRSTRLEN INET_ADDRSTRLEN;
MACRO_INET_IP INET_IP;
MACRO_INET INET_TCP;
MACRO_INET_UDP INET_UDP;
MACRO_INF INF;
MACRO_INFPSZ INFPSZ;
MACRO_INFTIM INFTIM;
MACRO_INHERIT INHERIT_VFS_FLAG;
MACRO_INIT INIT_ALL;
MACRO_PROCESS INIT_PROCESS;
MACRO_INI INI_CAN_DISCON;
MACRO_INKEYB INKEYB;
MACRO_IGNBRK INLCR;
MACRO_IUPD INOACC;
MACRO_INOFLCK INOFLCK;
MACRO_IGNBRK INPCK;
MACRO_INPLOOKUP INPLOOKUP_SETLOCAL;
MACRO_INPLOOKUP INPLOOKUP_WILDCARD;
MACRO_INP INP_QSIZE;
MACRO_INSTR INSTR_VALID;
MACRO_INT16SZ INT16SZ;
MACRO_MAX INT16_MAX;
MACRO_MIN INT16_MIN;
MACRO_INT32SZ INT32SZ;
MACRO_MAX INT32_MAX;
MACRO_MIN INT32_MIN;
MACRO_MAX INT64_MAX;
MACRO_MIN INT64_MIN;
MACRO_MAX INT8_MAX;
MACRO_MIN INT8_MIN;
MACRO_BIAS INTEGER_BIAS;
MACRO_BARRIER INTERRUPTED_LOCK;
MACRO_INTLEVEL INTLEVEL_ONBOARD;
MACRO_INTLEVEL INTLEVEL_SBUS;
MACRO_INTLEVEL INTLEVEL_SOFT;
MACRO_MAX INTMAX_MAX;
MACRO_MIN INTMAX_MIN;
MACRO_INTRPT INTRPT;
MACRO_FKEY INT_FAIL;
MACRO_MAX INT_LEAST16_MAX;
MACRO_MIN INT_LEAST16_MIN;
MACRO_MAX INT_LEAST32_MAX;
MACRO_MIN INT_LEAST32_MIN;
MACRO_MAX INT_LEAST64_MAX;
MACRO_MIN INT_LEAST64_MIN;
MACRO_MAX INT_LEAST8_MAX;
MACRO_MIN INT_LEAST8_MIN;
MACRO_INT INT_MAX;
MACRO_INT INT_MIN;
MACRO_INKEYB INUARTA;
MACRO_INKEYB INUARTB;
MACRO_INUARTC INUARTC;
MACRO_INUARTC INUARTD;
MACRO_INVALID_LINK INVALID_DF_CTL;
MACRO_INVALID INVALID_D_ID;
MACRO_INVALID_LINK INVALID_F_CTL;
MACRO_INVALID_LINK INVALID_LINK_CONTROL;
MACRO_INVALID_LINK INVALID_OX_ID;
MACRO_INVALID_LINK INVALID_PARAMETER;
MACRO_INVALID_LINK INVALID_RX_ID;
MACRO_INVALID_LINK INVALID_R_CTL;
MACRO_INVALID_LINK INVALID_SEQ_CNT;
MACRO_INVALID_LINK INVALID_SEQ_ID;
MACRO_INVALID INVALID_S_ID;
MACRO_IN IN_CLASSA_HOST;
MACRO_IN IN_CLASSA_MAX;
MACRO_IN IN_CLASSA_NET;
MACRO_IN IN_CLASSA_NSHIFT;
MACRO_IN IN_CLASSB_HOST;
MACRO_IN IN_CLASSB_MAX;
MACRO_IN IN_CLASSB_NET;
MACRO_IN IN_CLASSB_NSHIFT;
MACRO_IN IN_CLASSC_HOST;
MACRO_IN IN_CLASSC_NET;
MACRO_IN IN_CLASSC_NSHIFT;
MACRO_IN IN_CLASSD_HOST;
MACRO_IN IN_CLASSD_NET;
MACRO_IN IN_CLASSD_NSHIFT;
MACRO_IN_LOOPBACKNET IN_LOOPBACKNET;
MACRO_IOCPARM IOCPARM_MASK;
MACRO_IOCTYPE IOCTYPE;
MACRO_IOC IOC_IN;
MACRO_IOC IOC_INOUT;
MACRO_IOC IOC_OUT;
MACRO_IOC IOC_VOID;
MACRO_ATEXIT IOV_MAX;
MACRO_ACTIVE IO_LOCK;
MACRO_IP_0 IP;
MACRO_IP6F IP6F_MORE_FRAG;
MACRO_IP6F IP6F_OFF_MASK;
MACRO_IP6F IP6F_RESERVED_MASK;
MACRO_IP6OPT IP6OPT_BINDING_ACK;
MACRO_IP6OPT IP6OPT_BINDING_REQ;
MACRO_IP6OPT IP6OPT_BINDING_UPDATE;
MACRO_IP6OPT IP6OPT_EID;
MACRO_IP6OPT IP6OPT_HOME_ADDRESS;
MACRO_IP6OPT IP6OPT_JUMBO;
MACRO_IP6OPT IP6OPT_JUMBO_LEN;
MACRO_IP6OPT IP6OPT_MUTABLE;
MACRO_IP6OPT IP6OPT_NSAP_ADDR;
MACRO_IP6OPT IP6OPT_PAD1;
MACRO_IP6OPT IP6OPT_PADN;
MACRO_IP6OPT IP6OPT_ROUTER_ALERT;
MACRO_IP6OPT IP6OPT_TUNNEL_LIMIT;
MACRO_IP6OPT IP6OPT_TYPE_DISCARD;
MACRO_IP6OPT IP6OPT_TYPE_FORCEICMP;
MACRO_IP6OPT IP6OPT_TYPE_ICMP;
MACRO_IP6OPT IP6OPT_TYPE_SKIP;
MACRO_IP6_ALERT IP6_ALERT_AN;
MACRO_IP6_ALERT IP6_ALERT_MLD;
MACRO_IP6_ALERT IP6_ALERT_RSVP;
MACRO_IP6_ALERT IP6_BUF_ACK;
MACRO_IP6_ALERT IP6_BUF_COA;
MACRO_IP6_ALERT IP6_BUF_HOME;
MACRO_IP6_ALERT IP6_BUF_ROUTER;
MACRO_IP6 IP6_DL_SAP;
MACRO_IPCF IPCF_CLOSE_DONE;
MACRO_IPCF IPCF_CLOSING;
MACRO_IPCF IPCF_OPENING;
MACRO_IPCF IPCF_OPEN_DONE;
MACRO_IPC IPC_ALLOC;
MACRO_IPC IPC_CREAT;
MACRO_IPC IPC_EXCL;
MACRO_IPC IPC_NOWAIT;
MACRO_IPC IPC_PRIVATE;
MACRO_IPC IPC_RMID;
MACRO_IPC IPC_SET;
MACRO_IPC IPC_STAT;
ipd_msgs IPD_BLACKLIST;
ipd_msgs IPD_CON_DECLINE;
ipd_msgs IPD_CON_REQ;
MACRO_IPD IPD_DATA;
MACRO_IPD IPD_DDI;
ipd_msgs IPD_DIS_IND;
ipd_msgs IPD_DIS_REQ;
MACRO_IPD IPD_DLPI;
ipd_msgs IPD_ERR_IND;
MACRO_IPD IPD_FLOWCTRL;
ipd_msgs IPD_GET_INFO;
ipd_msgs IPD_GET_VERSION;
MACRO_IPD IPD_HOLDING_TIME;
MACRO_IPD IPD_IF_STATIC;
MACRO_IPD IPD_LINKHDR;
ipd_msgs IPD_MAKE_IF;
MACRO_IPD IPD_MAXIFS;
MACRO_IPD IPD_MAXIPDCMS;
MACRO_IPD IPD_MAX_PKTS;
MACRO_IPD IPD_MINOR;
ipd_iftype IPD_MTP;
MACRO_IPD IPD_MTP_ADDRL;
MACRO_IPD IPD_MTU;
ipd_iftype IPD_NULL;
ipd_iftype IPD_PTP;
MACRO_IPD IPD_PTP_ADDRL;
ipd_msgs IPD_REGISTER;
MACRO_IPD IPD_SAPL;
ipd_msgs IPD_SET_TIM;
ipd_msgs IPD_UNREGISTER;
MACRO_IPE IPE_FPESIZE;
MACRO_IPFRAGTTL IPFRAGTTL;
MACRO_IPH IPH_DF;
MACRO_IPH IPH_FRAG_HDR;
MACRO_IPH IPH_MF;
MACRO_IPH IPH_OFFSET;
MACRO_IPOPT IPOPT_CONTROL;
MACRO_IPOPT IPOPT_DEBMEAS;
MACRO_IPOPT IPOPT_EOL;
MACRO_IPOPT_POS IPOPT_IT_SPEC;
MACRO_IPOPT_POS IPOPT_IT_SPEC_BSD;
MACRO_IPOPT_POS IPOPT_IT_TIME;
MACRO_IPOPT_POS IPOPT_IT_TIMELEN;
MACRO_IPOPT_POS IPOPT_IT_TIME_ADDR;
MACRO_IPOPT IPOPT_LSRR;
MACRO_IPOPT_POS IPOPT_MINLEN_IT;
MACRO_IPOPT IPOPT_MINOFF;
MACRO_IPOPT_POS IPOPT_MINOFF_IT;
MACRO_IPOPT_POS IPOPT_MINOFF_SR;
MACRO_IPOPT IPOPT_NOP;
MACRO_IPOPT IPOPT_OFFSET;
MACRO_IPOPT IPOPT_OLEN;
MACRO_IPOPT IPOPT_OPTVAL;
MACRO_IPOPT_POS IPOPT_POS_LEN;
MACRO_IPOPT_POS IPOPT_POS_OFF;
MACRO_IPOPT_POS IPOPT_POS_OV_FLG;
MACRO_IPOPT_POS IPOPT_POS_VAL;
MACRO_IPOPT IPOPT_RESERVED1;
MACRO_IPOPT IPOPT_RESERVED2;
MACRO_IPOPT IPOPT_RR;
MACRO_IPOPT IPOPT_SATID;
MACRO_IPOPT IPOPT_SECURITY;
MACRO_IPOPT IPOPT_SECUR_CONFID;
MACRO_IPOPT IPOPT_SECUR_EFTO;
MACRO_IPOPT IPOPT_SECUR_MMMM;
MACRO_IPOPT IPOPT_SECUR_RESTR;
MACRO_IPOPT IPOPT_SECUR_SECRET;
MACRO_IPOPT IPOPT_SECUR_TOPSECRET;
MACRO_IPOPT IPOPT_SECUR_UNCLASS;
MACRO_IPOPT IPOPT_SSRR;
MACRO_IPOPT IPOPT_TS;
MACRO_IPOPT IPOPT_TS_PRESPEC;
MACRO_IPOPT IPOPT_TS_TSANDADDR;
MACRO_IPOPT IPOPT_TS_TSONLY;
MACRO_IPPORT IPPORT_BIFFUDP;
MACRO_IPPORT IPPORT_BOOTPC;
MACRO_IPPORT IPPORT_BOOTPS;
MACRO_IPPORT IPPORT_CMDSERVER;
MACRO_IPPORT IPPORT_DAYTIME;
MACRO_IPPORT IPPORT_DISCARD;
MACRO_IPPORT IPPORT_ECHO;
MACRO_IPPORT IPPORT_EFSSERVER;
MACRO_IPPORT IPPORT_EXECSERVER;
MACRO_IPPORT IPPORT_FINGER;
MACRO_IPPORT IPPORT_FTP;
MACRO_IPPORT IPPORT_LOGINSERVER;
MACRO_IPPORT IPPORT_MTP;
MACRO_IPPORT IPPORT_NAMESERVER;
MACRO_IPPORT IPPORT_NETSTAT;
MACRO_IPPORT IPPORT_RESERVED;
MACRO_IPPORT IPPORT_RJE;
MACRO_IPPORT IPPORT_ROUTESERVER;
MACRO_IPPORT IPPORT_SMTP;
MACRO_IPPORT IPPORT_SUPDUP;
MACRO_IPPORT IPPORT_SYSTAT;
MACRO_IPPORT IPPORT_TELNET;
MACRO_IPPORT IPPORT_TFTP;
MACRO_IPPORT IPPORT_TIMESERVER;
MACRO_IPPORT IPPORT_TTYLINK;
MACRO_IPPORT IPPORT_USERRESERVED;
MACRO_IPPORT IPPORT_WHOIS;
MACRO_IPPORT IPPORT_WHOSERVER;
MACRO_IPPROTO IPPROTO_AH;
MACRO_IPPROTO IPPROTO_DSTOPTS;
MACRO_IPPROTO IPPROTO_EGP;
MACRO_IPPROTO IPPROTO_ENCAP;
MACRO_IPPROTO IPPROTO_EON;
MACRO_IPPROTO IPPROTO_ESP;
MACRO_IPPROTO IPPROTO_FRAGMENT;
MACRO_IPPROTO IPPROTO_GGP;
MACRO_IPPROTO IPPROTO_HELLO;
MACRO_IPPROTO IPPROTO_HOPOPTS;
MACRO_IPPROTO IPPROTO_ICMP;
MACRO_IPPROTO IPPROTO_ICMPV6;
MACRO_IPPROTO IPPROTO_IDP;
MACRO_IPPROTO IPPROTO_IGMP;
MACRO_IPPROTO IPPROTO_IP;
MACRO_IPPROTO IPPROTO_IPV6;
MACRO_IPPROTO IPPROTO_MAX;
MACRO_IPPROTO IPPROTO_ND;
MACRO_IPPROTO IPPROTO_NONE;
MACRO_IPPROTO IPPROTO_PIM;
MACRO_IPPROTO IPPROTO_PUP;
MACRO_IPPROTO IPPROTO_RAW;
MACRO_IPPROTO IPPROTO_ROUTING;
MACRO_IPPROTO IPPROTO_RSVP;
MACRO_IPPROTO IPPROTO_TCP;
MACRO_IPPROTO IPPROTO_UDP;
MACRO_IPSEC IPSEC_PREF_NEVER;
MACRO_IPSEC IPSEC_PREF_REQUIRED;
MACRO_IPSEC IPSEC_PREF_UNIQUE;
MACRO_IPTOS IPTOS_LOWDELAY;
MACRO_IPTOS IPTOS_PREC_CRITIC_ECP;
MACRO_IPTOS IPTOS_PREC_FLASH;
MACRO_IPTOS IPTOS_PREC_FLASHOVERRIDE;
MACRO_IPTOS IPTOS_PREC_IMMEDIATE;
MACRO_IPTOS IPTOS_PREC_INTERNETCONTROL;
MACRO_IPTOS IPTOS_PREC_NETCONTROL;
MACRO_IPTOS IPTOS_PREC_PRIORITY;
MACRO_IPTOS IPTOS_PREC_ROUTINE;
MACRO_IPTOS IPTOS_RELIABILITY;
MACRO_IPTOS IPTOS_THROUGHPUT;
MACRO_IPTTLDEC IPTTLDEC;
MACRO_ADDR_LEN IPV4_ADDR_LEN;
MACRO_MINOR IPV4_MINOR;
MACRO_IPV4 IPV4_VERSION;
MACRO_ABITS IPV6_ABITS;
MACRO_IPV6_RTHDR IPV6_ADD_MEMBERSHIP;
MACRO_IPV6_RTHDR IPV6_BOUND_IF;
MACRO_IPV6_RTHDR IPV6_CHECKSUM;
MACRO_IPV6_RTHDR IPV6_DROP_MEMBERSHIP;
MACRO_IPV6_RTHDR IPV6_DSTOPTS;
MACRO_IPV6 IPV6_FLOWINFO_FLOWLABEL;
MACRO_IPV6 IPV6_FLOWINFO_TCLASS;
MACRO_IPV6_RTHDR IPV6_HOPLIMIT;
MACRO_IPV6_RTHDR IPV6_HOPOPTS;
MACRO_IPV6_RTHDR IPV6_JOIN_GROUP;
MACRO_IPV6_RTHDR IPV6_LEAVE_GROUP;
MACRO_MINOR IPV6_MINOR;
MACRO_IPV6_RTHDR IPV6_MULTICAST_HOPS;
MACRO_IPV6_RTHDR IPV6_MULTICAST_IF;
MACRO_IPV6_RTHDR IPV6_MULTICAST_LOOP;
MACRO_IPV6_RTHDR IPV6_NEXTHOP;
MACRO_IPV6_PAD1 IPV6_PAD1_OPT;
MACRO_IPV6_RTHDR IPV6_PKTINFO;
MACRO_IPV6_RTHDR IPV6_RECVDSTOPTS;
MACRO_IPV6_RTHDR IPV6_RECVHOPLIMIT;
MACRO_IPV6_RTHDR IPV6_RECVHOPOPTS;
MACRO_IPV6_RTHDR IPV6_RECVPKTINFO;
MACRO_IPV6_RTHDR IPV6_RECVRTHDR;
MACRO_IPV6_RTHDR IPV6_RECVRTHDRDSTOPTS;
MACRO_IPV6_RTHDR IPV6_RTHDR;
MACRO_IPV6_RTHDR IPV6_RTHDRDSTOPTS;
MACRO_IPV6_RTHDR IPV6_RTHDR_TYPE_0;
MACRO_IPV6_RTHDR IPV6_UNICAST_HOPS;
MACRO_IPV6_RTHDR IPV6_UNSPEC_SRC;
MACRO_IPVERSION IPVERSION;
MACRO_ABITS IP_ABITS;
MACRO_ADDR_LEN IP_ADDR_LEN;
MACRO_IP_ADDR IP_ADDR_TYPE;
MACRO_IP IP_ADD_MEMBERSHIP;
MACRO_IP_ADD IP_ADD_PROXY_ADDR;
MACRO_IP_ARP IP_ARP_PROTO_TYPE;
MACRO_IP_ADD IP_BOUND_IF;
MACRO_IP_ADD IP_BROADCAST;
MACRO_IP_ADD IP_DEFAULT_MULTICAST_LOOP;
MACRO_IP_ADD IP_DEFAULT_MULTICAST_TTL;
MACRO_IP_DF IP_DF;
MACRO_IP_MAX IP_DL_SAP;
MACRO_IP_ADD IP_DONTROUTE;
MACRO_IP IP_DROP_MEMBERSHIP;
MACRO_IP_FORWARD IP_FORWARD_ALWAYS;
MACRO_IP_FORWARD IP_FORWARD_NEVER;
MACRO_IP IP_HDRINCL;
MACRO_IP_HOST IP_HOST_MASK;
MACRO_IP_SIMPLE IP_IOCTL;
MACRO_IP_SIMPLE IP_IOC_IRE_ADVISE_NO_REPLY;
MACRO_IP_SIMPLE IP_IOC_IRE_DELETE;
MACRO_IP_SIMPLE IP_IOC_IRE_DELETE_NO_REPLY;
MACRO_IP_SIMPLE IP_IOC_RTS_REQUEST;
MACRO_IP_MAX IP_LOOPBACK_MTU;
MACRO_IP_DF IP_MAXPACKET;
MACRO_IP_SIMPLE IP_MAX_HDR_LENGTH;
MACRO_IP_MAX IP_MAX_HW_LEN;
MACRO_IP_DF IP_MF;
MACRO_IP_SIMPLE IP_MIN_MTU;
MACRO_IP_MSS IP_MSS;
MACRO_IP IP_MULTICAST_IF;
MACRO_IP IP_MULTICAST_LOOP;
MACRO_IP IP_MULTICAST_TTL;
MACRO_IP IP_OPTIONS;
MACRO_IP IP_RECVDSTADDR;
MACRO_IP IP_RECVOPTS;
MACRO_IP IP_RECVRETOPTS;
MACRO_IP IP_RETOPTS;
MACRO_IP_ADD IP_REUSEADDR;
MACRO_IP IP_SEC_OPT;
MACRO_IP_SIMPLE IP_SIMPLE_HDR_LENGTH;
MACRO_IP_SIMPLE IP_SIMPLE_HDR_LENGTH_IN_WORDS;
MACRO_IP_SIMPLE IP_SIMPLE_HDR_VERSION;
MACRO_IP IP_TOS;
MACRO_IP IP_TTL;
MACRO_IP_ADD IP_UNSPEC_SRC;
MACRO_IPV4 IP_VERSION;
MACRO_IREAD IREAD;
MACRO_IUPD IREF;
MACRO_IRE IRE_BROADCAST;
MACRO_IRE IRE_CACHE;
MACRO_IRE IRE_CACHETABLE;
MACRO_IRE IRE_DEFAULT;
MACRO_IRE_FLUSH IRE_FLUSH_ADD;
MACRO_IRE_FLUSH IRE_FLUSH_DELETE;
MACRO_IRE IRE_FORWARDTABLE;
MACRO_IRE IRE_HOST;
MACRO_IRE IRE_HOST_REDIRECT;
MACRO_IRE IRE_IF_NORESOLVER;
MACRO_IRE IRE_IF_RESOLVER;
MACRO_IRE IRE_INTERFACE;
MACRO_IRE IRE_LOCAL;
MACRO_IRE IRE_LOOPBACK;
MACRO_IRE IRE_MARK_CONDEMNED;
MACRO_IRE IRE_OFFSUBNET;
MACRO_IRE IRE_PREFIX;
isdn_activation_state ISDN_ACTIVATED;
isdn_activation_state ISDN_ACTIVATE_REQ;
isdn_chan ISDN_CHAN_AUX0;
isdn_chan ISDN_CHAN_AUX0_MGT;
isdn_chan ISDN_CHAN_AUX1;
isdn_chan ISDN_CHAN_AUX1_MGT;
isdn_chan ISDN_CHAN_AUX2;
isdn_chan ISDN_CHAN_AUX2_MGT;
isdn_chan ISDN_CHAN_AUX3;
isdn_chan ISDN_CHAN_AUX3_MGT;
isdn_chan ISDN_CHAN_AUX4;
isdn_chan ISDN_CHAN_AUX4_MGT;
isdn_chan ISDN_CHAN_AUX5;
isdn_chan ISDN_CHAN_AUX5_MGT;
isdn_chan ISDN_CHAN_AUX6;
isdn_chan ISDN_CHAN_AUX6_MGT;
isdn_chan ISDN_CHAN_AUX7;
isdn_chan ISDN_CHAN_AUX7_MGT;
isdn_chan ISDN_CHAN_CTLR_MGT;
isdn_chan ISDN_CHAN_HOST;
isdn_chan ISDN_CHAN_NONE;
isdn_chan ISDN_CHAN_NT_B1;
isdn_chan ISDN_CHAN_NT_B2;
isdn_chan ISDN_CHAN_NT_D;
isdn_chan ISDN_CHAN_NT_D_TRACE;
isdn_chan ISDN_CHAN_NT_MGT;
isdn_chan ISDN_CHAN_PRI_B0;
isdn_chan ISDN_CHAN_PRI_B1;
isdn_chan ISDN_CHAN_PRI_B10;
isdn_chan ISDN_CHAN_PRI_B11;
isdn_chan ISDN_CHAN_PRI_B12;
isdn_chan ISDN_CHAN_PRI_B13;
isdn_chan ISDN_CHAN_PRI_B14;
isdn_chan ISDN_CHAN_PRI_B15;
isdn_chan ISDN_CHAN_PRI_B16;
isdn_chan ISDN_CHAN_PRI_B17;
isdn_chan ISDN_CHAN_PRI_B18;
isdn_chan ISDN_CHAN_PRI_B19;
isdn_chan ISDN_CHAN_PRI_B2;
isdn_chan ISDN_CHAN_PRI_B20;
isdn_chan ISDN_CHAN_PRI_B21;
isdn_chan ISDN_CHAN_PRI_B22;
isdn_chan ISDN_CHAN_PRI_B23;
isdn_chan ISDN_CHAN_PRI_B24;
isdn_chan ISDN_CHAN_PRI_B25;
isdn_chan ISDN_CHAN_PRI_B26;
isdn_chan ISDN_CHAN_PRI_B27;
isdn_chan ISDN_CHAN_PRI_B28;
isdn_chan ISDN_CHAN_PRI_B29;
isdn_chan ISDN_CHAN_PRI_B3;
isdn_chan ISDN_CHAN_PRI_B30;
isdn_chan ISDN_CHAN_PRI_B31;
isdn_chan ISDN_CHAN_PRI_B4;
isdn_chan ISDN_CHAN_PRI_B5;
isdn_chan ISDN_CHAN_PRI_B6;
isdn_chan ISDN_CHAN_PRI_B7;
isdn_chan ISDN_CHAN_PRI_B8;
isdn_chan ISDN_CHAN_PRI_B9;
isdn_chan ISDN_CHAN_PRI_D;
isdn_chan ISDN_CHAN_PRI_MGT;
isdn_chan ISDN_CHAN_SELF;
isdn_chan ISDN_CHAN_TE_B1;
isdn_chan ISDN_CHAN_TE_B2;
isdn_chan ISDN_CHAN_TE_D;
isdn_chan ISDN_CHAN_TE_D_TRACE;
isdn_chan ISDN_CHAN_TE_MGT;
isdn_activation_state ISDN_DEACTIVATED;
isdn_activation_state ISDN_DEACTIVATE_REQ;
isdn_iostate ISDN_IO_READY;
isdn_iostate ISDN_IO_STOPPED;
isdn_iostate ISDN_IO_UNKNOWN;
$628604CA069736C17E916A575687F61F ISDN_LOOPBACK_B1;
$628604CA069736C17E916A575687F61F ISDN_LOOPBACK_B2;
$628604CA069736C17E916A575687F61F ISDN_LOOPBACK_D;
$628604CA069736C17E916A575687F61F ISDN_LOOPBACK_E_ZERO;
$A959B596F4A4BFCA9FCF924B52F0DB35 ISDN_LOOPBACK_LOCAL;
$628604CA069736C17E916A575687F61F ISDN_LOOPBACK_Q;
$A959B596F4A4BFCA9FCF924B52F0DB35 ISDN_LOOPBACK_REMOTE;
$628604CA069736C17E916A575687F61F ISDN_LOOPBACK_S;
$E739717CDB19454AC06785377AF9888B ISDN_MODE_HDLC;
$E739717CDB19454AC06785377AF9888B ISDN_MODE_TRANSPARENT;
$E739717CDB19454AC06785377AF9888B ISDN_MODE_UNKNOWN;
isdn_message_type ISDN_MPH_AI;
MACRO_ISDN ISDN_MPH_DEACTIVATE_REQ;
isdn_message_type ISDN_MPH_DI;
isdn_message_type ISDN_MPH_EI1;
isdn_message_type ISDN_MPH_EI2;
isdn_message_type ISDN_MPH_II_C;
isdn_message_type ISDN_MPH_II_D;
isdn_activation_state ISDN_OFF;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_ASMB;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_MAINT;
isdn_param_maint ISDN_PARAM_MAINT_ECHO;
isdn_param_maint ISDN_PARAM_MAINT_OFF;
isdn_param_maint ISDN_PARAM_MAINT_ON;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_NONE;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_NT_T101;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_NT_T102;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_PAUSE;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_POWER;
MACRO_ISDN ISDN_PARAM_POWER_OFF;
MACRO_ISDN ISDN_PARAM_POWER_ON;
isdn_param_asmb ISDN_PARAM_TE_ASMB_CCITT88;
isdn_param_asmb ISDN_PARAM_TE_ASMB_CTS2;
isdn_param_asmb ISDN_PARAM_TE_ASMB_UNKNOWN;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_TE_T103;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_TE_T104;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_end_of_timers;
$4889CC838EABD4A4DF267BE559C2BCD8 ISDN_PARAM_vendor;
$354CCF684609FF657B26F0F4A65DC75F ISDN_PATH_DISCONNECT;
$354CCF684609FF657B26F0F4A65DC75F ISDN_PATH_NOCHANGE;
$354CCF684609FF657B26F0F4A65DC75F ISDN_PATH_ONEWAY;
$354CCF684609FF657B26F0F4A65DC75F ISDN_PATH_TWOWAY;
MACRO_ISDN ISDN_PH_ACTIVATE_REQ;
isdn_message_type ISDN_PH_AI;
isdn_message_type ISDN_PH_AR;
isdn_message_type ISDN_PH_DATA_IN;
isdn_message_type ISDN_PH_DATA_RQ;
isdn_message_type ISDN_PH_DI;
MACRO_ISDN ISDN_PROTO_MAGIC;
$CC06B5739EA2B9882BCE8C0A287C133B ISDN_TYPE_NT;
$CC06B5739EA2B9882BCE8C0A287C133B ISDN_TYPE_OTHER;
$CC06B5739EA2B9882BCE8C0A287C133B ISDN_TYPE_PRI;
$CC06B5739EA2B9882BCE8C0A287C133B ISDN_TYPE_SELF;
$CC06B5739EA2B9882BCE8C0A287C133B ISDN_TYPE_TE;
$CC06B5739EA2B9882BCE8C0A287C133B ISDN_TYPE_UNKNOWN;
isdn_activation_state ISDN_UNPLUGGED;
isdn_message_type ISDN_VPH_VENDOR;
MACRO_ISGID ISGID;
MACRO_ISIG ISIG;
MACRO_TIMEOUT_0 ISOPEN;
MACRO_ISO_ID ISO_ABSTR_ID_STRLEN;
MACRO_ISO_ID ISO_APPL_ID_STRLEN;
MACRO_ISO_ID ISO_COPYR_ID_STRLEN;
MACRO_ISO_ID ISO_DATE_LEN;
MACRO_ASCII_DEVID ISO_DEVID;
MACRO_ISO_DIR ISO_DIR_NAMELEN;
MACRO_ISO_DIR ISO_FILE_NAMELEN;
MACRO_ISO_ID ISO_FILE_STRUCT_ID_VER;
MACRO_ISO_FIRST ISO_FIRST;
MACRO_ISO_ID ISO_ID_STRLEN;
MACRO_ISO_ID ISO_ID_VER;
MACRO_ISO_FIRST ISO_LAST;
MACRO_ISO_ID ISO_PREP_ID_STRLEN;
MACRO_ISO_ID ISO_PUB_ID_STRLEN;
MACRO_ISO_SECTOR ISO_SECTOR_SHIFT;
MACRO_ISO_SECTOR ISO_SECTOR_SIZE;
MACRO_ISO_ID ISO_SHORT_DATE_LEN;
MACRO_ISO_SECTOR ISO_SYSAREA_SEC;
MACRO_ISO_ID ISO_SYS_ID_STRLEN;
MACRO_ISO ISO_TP;
iso_voldesc_type ISO_VD_BOOT;
iso_voldesc_type ISO_VD_EOV;
iso_voldesc_type ISO_VD_PVD;
iso_voldesc_type ISO_VD_SVD;
iso_voldesc_type ISO_VD_VPD;
MACRO_ISO_SECTOR ISO_VOLDESC_SEC;
MACRO_ISO_ID ISO_VOL_ID_STRLEN;
MACRO_ISO_ID ISO_VOL_SET_ID_STRLEN;
MACRO_ISPEED ISPEED;
MACRO_ISPEED_SVID ISPEED_SVID;
MACRO_ISPIPE ISPIPE;
MACRO_PTLOCK ISPTM;
MACRO_ISP_MBOX ISP_10M_SYNC_OFFSET;
MACRO_ISP_MBOX ISP_10M_SYNC_PARAMS;
MACRO_ISP_MBOX ISP_10M_SYNC_PERIOD;
MACRO_ISP_MBOX ISP_20M_SYNC_OFFSET;
MACRO_ISP_MBOX ISP_20M_SYNC_PARAMS;
MACRO_ISP_MBOX ISP_20M_SYNC_PERIOD;
MACRO_ISP_MBOX ISP_4M_SYNC_OFFSET;
MACRO_ISP_MBOX ISP_4M_SYNC_PARAMS;
MACRO_ISP_MBOX ISP_4M_SYNC_PERIOD;
MACRO_ISP_MBOX ISP_5M_SYNC_OFFSET;
MACRO_ISP_MBOX ISP_5M_SYNC_PARAMS;
MACRO_ISP_MBOX ISP_5M_SYNC_PERIOD;
MACRO_ISP_MBOX ISP_8M_SYNC_OFFSET;
MACRO_ISP_MBOX ISP_8M_SYNC_PARAMS;
MACRO_ISP_MBOX ISP_8M_SYNC_PERIOD;
MACRO_ISP_MBOX ISP_AEN_FAILURE;
MACRO_ISP_MBOX ISP_AEN_RESET;
MACRO_ISP_MBOX ISP_AEN_SUCCESS;
MACRO_ISP_MBOX ISP_BUS_BIU_REGS_OFF;
MACRO_ISP_MBOX ISP_BUS_CONF0_HW_MASK;
MACRO_ISP_MBOX ISP_BUS_CONF1_BURST_ENABLE;
MACRO_ISP_MBOX ISP_BUS_ICR_DISABLE_ALL_INTS;
MACRO_ISP_MBOX ISP_BUS_ICR_ENABLE_ALL_INTS;
MACRO_ISP_MBOX ISP_BUS_ICR_ENABLE_CDMA_INT;
MACRO_ISP_MBOX ISP_BUS_ICR_ENABLE_DMA_INT;
MACRO_ISP_MBOX ISP_BUS_ICR_ENABLE_RISC_INT;
MACRO_ISP_MBOX ISP_BUS_ICR_ENABLE_SXP_INT;
MACRO_ISP_MBOX ISP_BUS_ICR_SOFT_RESET;
MACRO_ISP_MBOX ISP_BUS_ISR_CDMA_INT;
MACRO_ISP_MBOX ISP_BUS_ISR_DMA_INT;
MACRO_ISP_MBOX ISP_BUS_ISR_INT_PENDING;
MACRO_ISP_MBOX ISP_BUS_ISR_RISC_INT;
MACRO_ISP_MBOX ISP_BUS_ISR_SXP_INT;
MACRO_ISP_MBOX ISP_BUS_SEMA_LOCK;
MACRO_ISP_MBOX ISP_BUS_SEMA_STATUS;
MACRO_ISP_MBOX ISP_CAP_AUTOSENSE;
MACRO_ISP_MBOX ISP_CAP_DISCONNECT;
MACRO_ISP_MBOX ISP_CAP_ERRSTOP;
MACRO_ISP_MBOX ISP_CAP_ERRSYNC;
MACRO_ISP_MBOX ISP_CAP_PARITY;
MACRO_ISP_MBOX ISP_CAP_SYNC;
MACRO_ISP_MBOX ISP_CAP_TAG;
MACRO_ISP_MBOX ISP_CAP_WIDE;
MACRO_ISP_MBOX ISP_DMA_CHAN_IDLE;
MACRO_ISP_MBOX ISP_DMA_CONF_DMA_DIRECTION;
MACRO_ISP_MBOX ISP_DMA_CONF_ENABLE_BURST;
MACRO_ISP_MBOX ISP_DMA_CONF_ENABLE_INTS;
MACRO_ISP_MBOX ISP_DMA_CONF_ENABLE_SXP_DMA;
MACRO_ISP_MBOX ISP_DMA_CON_CLEAR_CHAN;
MACRO_ISP_MBOX ISP_DMA_CON_CLEAR_FIFO;
MACRO_ISP_MBOX ISP_DMA_CON_RESET_INT;
MACRO_ISP_MBOX ISP_DMA_CON_STROBE;
MACRO_ISP_MBOX ISP_DMA_CON_SUSPEND_CHAN;
MACRO_ISP_MBOX ISP_DMA_FIFO_STATUS_OVERRUN;
MACRO_ISP_MBOX ISP_DMA_FIFO_STATUS_UNDERRUN;
MACRO_ISP_MBOX ISP_DMA_PIPE_EMPTY;
MACRO_ISP_MBOX ISP_HCCR_BREAKPOINT_0;
MACRO_ISP_MBOX ISP_HCCR_BREAKPOINT_1;
MACRO_ISP_MBOX ISP_HCCR_BREAKPOINT_EXT;
MACRO_ISP_MBOX ISP_HCCR_CMD_BREAKPOINT;
MACRO_ISP_MBOX ISP_HCCR_CMD_CLEAR_HOST_INT;
MACRO_ISP_MBOX ISP_HCCR_CMD_CLEAR_RISC_INT;
MACRO_ISP_MBOX ISP_HCCR_CMD_NOP;
MACRO_ISP_MBOX ISP_HCCR_CMD_PAUSE;
MACRO_ISP_MBOX ISP_HCCR_CMD_RELEASE;
MACRO_ISP_MBOX ISP_HCCR_CMD_RESET;
MACRO_ISP_MBOX ISP_HCCR_CMD_SET_HOST_INT;
MACRO_ISP_MBOX ISP_HCCR_CMD_STEP;
MACRO_ISP_MBOX ISP_HCCR_CMD_TEST_MODE;
MACRO_ISP_MBOX ISP_HCCR_HOST_INT;
MACRO_ISP_MBOX ISP_HCCR_PAUSE;
MACRO_ISP_MBOX ISP_HCCR_RESET;
MACRO_ISP_MBOX ISP_MAX_MBOX_REGS;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_ERR;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_FASTPOST;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_INT_ABORT;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_INT_DEV_RESET;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_INT_RESET;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_OVR_RESET;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_REQ_DMA_ERR;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_RESET;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_RESP_DMA_ERR;
MACRO_ISP_MBOX ISP_MBOX_ASYNC_WAKEUP;
MACRO_ISP_MBOX ISP_MBOX_BUSY;
MACRO_ISP_MBOX ISP_MBOX_CMD_ABORT_DEVICE;
MACRO_ISP_MBOX ISP_MBOX_CMD_ABORT_IOCB;
MACRO_ISP_MBOX ISP_MBOX_CMD_ABORT_QUEUE;
MACRO_ISP_MBOX ISP_MBOX_CMD_ABORT_TARGET;
MACRO_ISP_MBOX ISP_MBOX_CMD_ABOUT_PROM;
MACRO_ISP_MBOX ISP_MBOX_CMD_BUSY_POLL_DELAY_TIME;
MACRO_ISP_MBOX ISP_MBOX_CMD_BUSY_WAIT_TIME;
MACRO_ISP_MBOX ISP_MBOX_CMD_BUS_RESET;
MACRO_ISP_MBOX ISP_MBOX_CMD_CHECKSUM;
MACRO_ISP_MBOX ISP_MBOX_CMD_CHECKSUM_FIRMWARE;
MACRO_ISP_MBOX ISP_MBOX_CMD_DUMP_RAM;
MACRO_ISP_MBOX ISP_MBOX_CMD_DUMP_WORD;
MACRO_ISP_MBOX ISP_MBOX_CMD_FLAGS_COMPLETE;
MACRO_ISP_MBOX ISP_MBOX_CMD_FLAGS_Q_NOT_INIT;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_AGE_LIMIT;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_BUS_INTERFACE;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_CLOCK_RATE;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_DATA_TRANS_TIME;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_DEVICE_QUEUE_PARAMS;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_DEVICE_QUEUE_STATE;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_FIRMWARE_STATUS;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_ISP_STAT;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_PULL_UPS;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_QFULL_RETRIES;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_QFULL_RETRY_INTERVAL;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_RETRY_ATTEMPTS;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_SCSI_ID;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_SEL_TIMEOUT;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_SXP_CONFIG;
MACRO_ISP_MBOX ISP_MBOX_CMD_GET_TARGET_CAP;
MACRO_ISP_MBOX ISP_MBOX_CMD_INIT_REQUEST_QUEUE;
MACRO_ISP_MBOX ISP_MBOX_CMD_INIT_RESPONSE_QUEUE;
MACRO_ISP_MBOX ISP_MBOX_CMD_LOAD_RAM;
MACRO_ISP_MBOX ISP_MBOX_CMD_LOAD_WORD;
MACRO_ISP_MBOX ISP_MBOX_CMD_NOP;
MACRO_ISP_MBOX ISP_MBOX_CMD_RETRY_CNT;
MACRO_ISP_MBOX ISP_MBOX_CMD_SCSI_CMD;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_AGE_LIMIT;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_BUS_INTERFACE;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_CLOCK_RATE;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_DATA_OVR_RECOV_MODE;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_DATA_TRANS_TIME;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_DELAY_BDR;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_DEVICE_QUEUE_PARAMS;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_FW_FEATURES;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_PULL_UPS;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_QFULL_RETRIES;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_QFULL_RETRY_INTERVAL;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_RETRY_ATTEMPTS;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_SCSI_ID;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_SEL_TIMEOUT;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_SXP_CONFIG;
MACRO_ISP_MBOX ISP_MBOX_CMD_SET_TARGET_CAP;
MACRO_ISP_MBOX ISP_MBOX_CMD_START_FW;
MACRO_ISP_MBOX ISP_MBOX_CMD_START_QUEUE;
MACRO_ISP_MBOX ISP_MBOX_CMD_STEP_QUEUE;
MACRO_ISP_MBOX ISP_MBOX_CMD_STOP_FW;
MACRO_ISP_MBOX ISP_MBOX_CMD_STOP_QUEUE;
MACRO_ISP_MBOX ISP_MBOX_CMD_TIMEOUT;
MACRO_ISP_MBOX ISP_MBOX_CMD_WAKE_UP;
MACRO_ISP_MBOX ISP_MBOX_CMD_WRAP_MAILBOXES;
MACRO_ISP_MBOX ISP_MBOX_EVENT_ASYNCH;
MACRO_ISP_MBOX ISP_MBOX_EVENT_CMD;
MACRO_ISP_MBOX ISP_MBOX_EVENT_MASK;
MACRO_ISP_MBOX ISP_MBOX_STATUS_BOOT_ERR;
MACRO_ISP_MBOX ISP_MBOX_STATUS_FIRMWARE_ERR;
MACRO_ISP_MBOX ISP_MBOX_STATUS_INVALID_CMD;
MACRO_ISP_MBOX ISP_MBOX_STATUS_INVALID_PARAMS;
MACRO_ISP_MBOX ISP_MBOX_STATUS_MASK;
MACRO_ISP_MBOX ISP_MBOX_STATUS_OK;
MACRO_ISP ISP_NORMAL;
MACRO_ISP_MBOX ISP_PCI_CONF1_FIFO_128;
MACRO_ISP_MBOX ISP_PCI_CONF1_FIFO_16;
MACRO_ISP_MBOX ISP_PCI_CONF1_FIFO_32;
MACRO_ISP_MBOX ISP_PCI_CONF1_FIFO_64;
MACRO_ISP_MBOX ISP_PCI_CONF1_SXP;
MACRO_ISP_MBOX ISP_PCI_DMA_CHAN_ACTIVE;
MACRO_ISP_MBOX ISP_PCI_DMA_CHAN_SUSPEND;
MACRO_ISP_MBOX ISP_PCI_DMA_CHAN_TRANSFER;
MACRO_ISP_MBOX ISP_PCI_DMA_FIFO_COUNT_MASK;
MACRO_ISP_MBOX ISP_PCI_DMA_PIPE_FULL;
MACRO_ISP_MBOX ISP_PCI_DMA_PIPE_OVERRUN;
MACRO_ISP_MBOX ISP_PCI_DMA_PIPE_STAGE1;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_BUS_ERR;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_BUS_PARITY;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_CHAN_MASK;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_CLR_PEND;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_DMA_SUSP;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_FIFO_OVR;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_FIFO_UDR;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_INTERRUPT;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_PIPE_MASK;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_RETRY_STAT;
MACRO_ISP_MBOX ISP_PCI_DMA_STATUS_TERM_COUNT;
MACRO_ISP_MBOX ISP_PCI_HCCR_BIOS;
MACRO_ISP_MBOX ISP_PCI_HCCR_BREAKPOINT_INT;
MACRO_ISP_MBOX ISP_PCI_HCCR_CMD_BIOS;
MACRO_ISP_MBOX ISP_PCI_HCCR_CMD_PARITY;
MACRO_ISP_MBOX ISP_PCI_HCCR_CMD_PARITY_ERR;
MACRO_ISP_MBOX ISP_PCI_HCCR_PARITY;
MACRO_ISP_MBOX ISP_PCI_HCCR_PARITY_ENABLE_0;
MACRO_ISP_MBOX ISP_PCI_HCCR_PARITY_ENABLE_1;
MACRO_ISP_MBOX ISP_PCI_MBOX_CMD_EXEC_BIOS_IOCB;
MACRO_ISP_MBOX ISP_PCI_MBOX_CMD_RET_BIOS_BLK_ADDR;
MACRO_ISP_MBOX ISP_PCI_MBOX_CMD_WRITE_4_RAM_WORDS;
MACRO_ISP_MBOX ISP_PCI_MBOX_REGS_OFF;
MACRO_ISP_MBOX ISP_PCI_REG_NUMBER;
MACRO_ISP_MBOX ISP_PCI_RISC_REGS_OFF;
MACRO_ISP_MBOX ISP_PCI_SXP_EXCEPT_SCAM;
MACRO_ISP_MBOX ISP_PCI_SXP_REGS_OFF;
MACRO_ISP ISP_RESERVE;
MACRO_ISP_MBOX ISP_RISC_MTR_PAGE0_DEFAULT;
MACRO_ISP_MBOX ISP_RISC_MTR_PAGE1_DEFAULT;
MACRO_ISP_MBOX ISP_RISC_PCR_NOP;
MACRO_ISP_MBOX ISP_RISC_PCR_RESTORE_PCR;
MACRO_ISP_MBOX ISP_RISC_PSR_ALU_CARRY;
MACRO_ISP_MBOX ISP_RISC_PSR_ALU_MSB;
MACRO_ISP_MBOX ISP_RISC_PSR_ALU_OVERFLOW;
MACRO_ISP_MBOX ISP_RISC_PSR_ALU_ZERO;
MACRO_ISP_MBOX ISP_RISC_PSR_DMA_INT;
MACRO_ISP_MBOX ISP_RISC_PSR_FORCE_FALSE;
MACRO_ISP_MBOX ISP_RISC_PSR_FORCE_TRUE;
MACRO_ISP_MBOX ISP_RISC_PSR_HOST_INT;
MACRO_ISP_MBOX ISP_RISC_PSR_INT_PENDING;
MACRO_ISP_MBOX ISP_RISC_PSR_LOOP_COUNT_DONE;
MACRO_ISP_MBOX ISP_RISC_PSR_RISC_INT;
MACRO_ISP_MBOX ISP_RISC_PSR_SXP_INT;
MACRO_ISP_MBOX ISP_RISC_PSR_TIMER_ROLLOVER;
MACRO_ISP_MBOX ISP_SBUS_CONF1_BURST8;
MACRO_ISP_MBOX ISP_SBUS_CONF1_FCODE_MASK;
MACRO_ISP_MBOX ISP_SBUS_CONF1_FIFO_16;
MACRO_ISP_MBOX ISP_SBUS_CONF1_FIFO_32;
MACRO_ISP_MBOX ISP_SBUS_CONF1_FIFO_64;
MACRO_ISP_MBOX ISP_SBUS_CONF1_FIFO_8;
MACRO_ISP_MBOX ISP_SBUS_CONF1_PARITY;
MACRO_ISP_MBOX ISP_SBUS_DMA_CHAN_ACTIVE;
MACRO_ISP_MBOX ISP_SBUS_DMA_CHAN_SUSPEND;
MACRO_ISP_MBOX ISP_SBUS_DMA_CHAN_TRANSFER;
MACRO_ISP_MBOX ISP_SBUS_DMA_FIFO_COUNT_MASK;
MACRO_ISP_MBOX ISP_SBUS_DMA_PIPE_FULL;
MACRO_ISP_MBOX ISP_SBUS_DMA_PIPE_OVERRUN;
MACRO_ISP_MBOX ISP_SBUS_DMA_PIPE_STAGE1;
MACRO_ISP_MBOX ISP_SBUS_DMA_STATUS_BUS_ERR;
MACRO_ISP_MBOX ISP_SBUS_DMA_STATUS_BUS_PARITY;
MACRO_ISP_MBOX ISP_SBUS_DMA_STATUS_CHAN_MASK;
MACRO_ISP_MBOX ISP_SBUS_DMA_STATUS_INTERRUPT;
MACRO_ISP_MBOX ISP_SBUS_DMA_STATUS_PIPE_MASK;
MACRO_ISP_MBOX ISP_SBUS_DMA_STATUS_TERM_COUNT;
MACRO_ISP_MBOX ISP_SBUS_MBOX_REGS_OFF;
MACRO_ISP_MBOX ISP_SBUS_REG_NUMBER;
MACRO_ISP_MBOX ISP_SBUS_RISC_REGS_OFF;
MACRO_ISP_MBOX ISP_SBUS_SXP_REGS_OFF;
MACRO_ISP_MBOX ISP_SXP_BUS_BUSY;
MACRO_ISP_MBOX ISP_SXP_CONF1_ASYNCH_SETUP;
MACRO_ISP_MBOX ISP_SXP_CONF1_CLOCK_FACTOR;
MACRO_ISP_MBOX ISP_SXP_CONF1_SCSI_ID;
MACRO_ISP_MBOX ISP_SXP_CONF1_SELECTION_TIMEOUT;
MACRO_ISP_MBOX ISP_SXP_CONF1_SELECTION_UNIT;
MACRO_ISP_MBOX ISP_SXP_CONF2_CONFIG_AUTOLOAD;
MACRO_ISP_MBOX ISP_SXP_CONF2_DATA_PULLUPS;
MACRO_ISP_MBOX ISP_SXP_CONF2_DISABLE_FILTER;
MACRO_ISP_MBOX ISP_SXP_CONF2_REQ_ACK_PULLUPS;
MACRO_ISP_MBOX ISP_SXP_CONF2_RESELECT;
MACRO_ISP_MBOX ISP_SXP_CONF2_SELECT;
MACRO_ISP_MBOX ISP_SXP_DCONF1_SYNC_HOLD;
MACRO_ISP_MBOX ISP_SXP_DCONF1_SYNC_OFFSET;
MACRO_ISP_MBOX ISP_SXP_DCONF1_SYNC_SETUP;
MACRO_ISP_MBOX ISP_SXP_DCONF2_ASSERTION_MASK;
MACRO_ISP_MBOX ISP_SXP_DCONF2_BLOCK_MODE;
MACRO_ISP_MBOX ISP_SXP_DCONF2_FLAGS_MASK;
MACRO_ISP_MBOX ISP_SXP_DCONF2_PARITY;
MACRO_ISP_MBOX ISP_SXP_DCONF2_WIDE;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_0;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_1;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_ARBITRATION;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_BUS_FREE;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_BUS_RESET;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_GROSS_ERR;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_RESELECTED;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_SELECTED;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_TARGET_ATN;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_USER_0;
MACRO_ISP_MBOX ISP_SXP_EXCEPT_USER_1;
MACRO_ISP_MBOX ISP_SXP_FIFO_ACK_RESID;
MACRO_ISP_MBOX ISP_SXP_FIFO_BOTTOM_RESID;
MACRO_ISP_MBOX ISP_SXP_FIFO_COUNT_MASK;
MACRO_ISP_MBOX ISP_SXP_FIFO_TOP_RESID;
MACRO_ISP_MBOX ISP_SXP_GROSS_FIFO_OVERFLOW;
MACRO_ISP_MBOX ISP_SXP_GROSS_FIFO_UNDERFLOW;
MACRO_ISP_MBOX ISP_SXP_GROSS_ILLEGAL_INST;
MACRO_ISP_MBOX ISP_SXP_GROSS_OFFSET_OVERFLOW;
MACRO_ISP_MBOX ISP_SXP_GROSS_OFFSET_RESID;
MACRO_ISP_MBOX ISP_SXP_GROSS_OFFSET_UNDERFLOW;
MACRO_ISP_MBOX ISP_SXP_GROSS_WRITE_ERR;
MACRO_ISP_MBOX ISP_SXP_INT_BUF_COUNTER_ZERO;
MACRO_ISP_MBOX ISP_SXP_INT_CMD_RUNNING;
MACRO_ISP_MBOX ISP_SXP_INT_CONDITION_FAILED;
MACRO_ISP_MBOX ISP_SXP_INT_FIFO_EMPTY;
MACRO_ISP_MBOX ISP_SXP_INT_FUNCTION_ABORT;
MACRO_ISP_MBOX ISP_SXP_INT_GROSS_ERR;
MACRO_ISP_MBOX ISP_SXP_INT_INT_PENDING;
MACRO_ISP_MBOX ISP_SXP_INT_INT_RETURN_CODE;
MACRO_ISP_MBOX ISP_SXP_INT_PARITY_ERR;
MACRO_ISP_MBOX ISP_SXP_INT_XFER_ZERO;
MACRO_ISP_MBOX ISP_SXP_ORIDE_BREAKPOINT;
MACRO_ISP_MBOX ISP_SXP_ORIDE_CMD_TERMINATE;
MACRO_ISP_MBOX ISP_SXP_ORIDE_EXT_TRIGGER;
MACRO_ISP_MBOX ISP_SXP_ORIDE_FIFO_RESET;
MACRO_ISP_MBOX ISP_SXP_ORIDE_FORCE_OUTPUTS;
MACRO_ISP_MBOX ISP_SXP_ORIDE_LOOPBACK;
MACRO_ISP_MBOX ISP_SXP_ORIDE_PARITY_TEST;
MACRO_ISP_MBOX ISP_SXP_ORIDE_PIN_WRITE;
MACRO_ISP_MBOX ISP_SXP_ORIDE_RESET_MODULE;
MACRO_ISP_MBOX ISP_SXP_ORIDE_RESET_REG;
MACRO_ISP_MBOX ISP_SXP_ORIDE_STEP;
MACRO_ISP_MBOX ISP_SXP_ORIDE_TRISTATE_ENA_PINS;
MACRO_ISP_MBOX ISP_SXP_ORIDE_TRISTATE_PINS;
MACRO_ISP_MBOX ISP_SXP_PHASE_COMMAND;
MACRO_ISP_MBOX ISP_SXP_PHASE_COM_PTR;
MACRO_ISP_MBOX ISP_SXP_PHASE_DATA_IN;
MACRO_ISP_MBOX ISP_SXP_PHASE_DATA_OUT;
MACRO_ISP_MBOX ISP_SXP_PHASE_MASK;
MACRO_ISP_MBOX ISP_SXP_PHASE_MSG_IN;
MACRO_ISP_MBOX ISP_SXP_PHASE_MSG_IN_PTR;
MACRO_ISP_MBOX ISP_SXP_PHASE_MSG_OUT;
MACRO_ISP_MBOX ISP_SXP_PHASE_MSG_OUT_PTR;
MACRO_ISP_MBOX ISP_SXP_PHASE_STATUS;
MACRO_ISP_MBOX ISP_SXP_PHASE_STATUS_PTR;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_ACK;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_ATN;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_BSY;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_CD;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_IO;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_MSG;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_PARITY_HI;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_PARITY_LO;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_PHASE;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_REQ;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_RST;
MACRO_ISP_MBOX ISP_SXP_PINS_CON_SEL;
MACRO_ISP_MBOX ISP_SXP_PINS_DIFF_ENABLE_OUTPUT;
MACRO_ISP_MBOX ISP_SXP_PINS_DIFF_INITIATOR;
MACRO_ISP_MBOX ISP_SXP_PINS_DIFF_MODE;
MACRO_ISP_MBOX ISP_SXP_PINS_DIFF_PINS_MASK;
MACRO_ISP_MBOX ISP_SXP_PINS_DIFF_SENSE;
MACRO_ISP_MBOX ISP_SXP_PINS_DIFF_TARGET;
MACRO_ISP_MBOX ISP_SXP_RESET_BUS_CMD;
MACRO_ISP_MBOX ISP_SXP_SCSI_BUS_RESET_HOLD_TIME;
MACRO_ISP_MBOX ISP_SXP_SELECTING_ID;
MACRO_ISP_MBOX ISP_SXP_SELECT_ID;
MACRO_IUPD ISTALE;
MACRO_IGNBRK ISTRIP;
MACRO_ISUID ISUID;
MACRO_ISVTX ISVTX;
MACRO_RTSXOFF ISXOFF;
MACRO_IUPD ISYNC;
MACRO_IS IS_PTSTTY;
MACRO_ITIMER ITIMER_PROF;
MACRO_ITIMER ITIMER_REAL;
MACRO_ITIMER ITIMER_REALPROF;
MACRO_ITIMER ITIMER_VIRTUAL;
MACRO_IGNBRK IUCLC;
MACRO_IUPD IUPD;
nstype IVY;
MACRO_IWRITE IWRITE;
MACRO_IGNBRK IXANY;
MACRO_IGNBRK IXOFF;
MACRO_IGNBRK IXON;
MACRO_I I_ANCHOR;
MACRO_I_SYNC I_ASYNC;
MACRO_I I_ATMARK;
MACRO_I I_CANPUT;
MACRO_I_IFLAGS I_CFLAGS;
MACRO_I_SYNC I_CHEAP;
MACRO_I I_CKBAND;
MACRO_I_TRCLOG I_CONSLOG;
MACRO_I_SYNC I_DIR;
MACRO_I_SYNC I_DSYNC;
MACRO_I I_EGETSIG;
MACRO_I_TRCLOG I_ERRLOG;
MACRO_I I_ESETSIG;
MACRO_I I_FDINSERT;
MACRO_I I_FIND;
MACRO_I I_FLUSH;
MACRO_I I_FLUSHBAND;
MACRO_I_SYNC I_FREE;
MACRO_I I_GERROPT;
MACRO_I I_GETBAND;
MACRO_I I_GETCLTIME;
MACRO_I I_GETSIG;
MACRO_I I_GRDOPT;
MACRO_I I_GWROPT;
MACRO_I_SYNC I_IBLK;
MACRO_I_IFLAGS I_IFLAGS;
MACRO_I I_LINK;
MACRO_I I_LIST;
MACRO_I I_LOOK;
MACRO_I I_NREAD;
MACRO_I I_PEEK;
MACRO_I I_PLINK;
MACRO_I I_POP;
MACRO_I I_PUNLINK;
MACRO_I I_PUSH;
MACRO_I_SYNC I_QUOTA;
MACRO_I I_RECVFD;
MACRO_I I_SENDFD;
MACRO_I I_SERROPT;
MACRO_I I_SETCLTIME;
MACRO_I I_SETSIG;
MACRO_I_SYNC I_SHAD;
MACRO_I I_SRDOPT;
MACRO_I I_STR;
MACRO_I_STRFT I_STRFT;
MACRO_I_STRFT I_STRFTALL;
MACRO_I_STRFT I_STRFTOFF;
MACRO_I_STRFT I_STRFTON;
MACRO_I_STRFT I_STRFTSTR;
MACRO_I_STRFT I_STRFTZERO;
MACRO_I I_SWROPT;
MACRO_I_SYNC I_SYNC;
MACRO_I_TRCLOG I_TRCLOG;
MACRO_I I_UNLINK;
MACRO_Orientation ImplicitAlg;
MACRO_Orientation InOnlyTextDescr;
MACRO_Orientation InOutTextDescrMask;
MACRO_JAGENT JAGENT;
MACRO_JBLOG JBLOG;
MACRO_JBOOT JBOOT;
jcaccess JCGETP;
jcaccess JCREAD;
jcaccess JCSETP;
jcaccess JCWRITE;
MACRO_JMPX JMPX;
MACRO_JTERM JTERM;
MACRO_JTIMOM JTIMOM;
MACRO_JTRUN JTRUN;
MACRO_JTYPE JTYPE;
MACRO_JUSTIFY JUSTIFY_CENTER;
MACRO_JUSTIFY JUSTIFY_LEFT;
MACRO_JUSTIFY JUSTIFY_RIGHT;
MACRO_FORREAL JUSTLOOKING;
MACRO_NORMALRETURN JUSTRETURN;
MACRO_JWINSIZE JWINSIZE;
MACRO_JXTPROTO JXTPROTO;
MACRO_JZOMBOOT JZOMBOOT;
MACRO_KBDLDISC KBDLDISC;
MACRO_KBD_CMD KBD_CMD_AUTOTEST;
MACRO_KBD_CMD KBD_CMD_BELL;
MACRO_KBD_CMD KBD_CMD_CLICK;
MACRO_KBD_CMD KBD_CMD_GETLAYOUT;
MACRO_KBD KBD_CMD_LED1;
MACRO_KBD KBD_CMD_LED2;
MACRO_KBD_CMD KBD_CMD_NOBELL;
MACRO_KBD_CMD KBD_CMD_NOCLICK;
MACRO_KBD KBD_CMD_NOLED1;
MACRO_KBD KBD_CMD_NOLED2;
MACRO_KBD_CMD KBD_CMD_RESET;
MACRO_KBD_CMD KBD_CMD_SETLED;
MACRO_KBENABLED KBENABLED;
MACRO_KBL KBL;
MACRO_KBU KBU;
MACRO_KB_SUN3 KB_ASCII;
MACRO_KB KB_KLUNK;
MACRO_KB_SUN3 KB_PC;
MACRO_KB KB_SUN2;
MACRO_KB_SUN3 KB_SUN3;
MACRO_KB_SUN3 KB_SUN4;
MACRO_KB_SUN3 KB_USB;
MACRO_KB KB_VT100;
MACRO_KB KB_VT220;
MACRO_KB KB_VT220I;
MACRO_KCPC KCPC_CTX_ALLFLAGS;
MACRO_KCPC KCPC_CTX_FREEZE;
MACRO_KCPC KCPC_CTX_INVALID;
MACRO_KCPC KCPC_CTX_LWPINHERIT;
MACRO_KCPC KCPC_CTX_NONPRIV;
MACRO_KCPC KCPC_CTX_SIGOVF;
MACRO_KEYMAP KEYMAP_SIZE;
MACRO_KEY KEY_A1;
MACRO_KEY KEY_A3;
MACRO_KEY_RECOVERABLE KEY_ABORTED_COMMAND;
MACRO_KEY KEY_B2;
MACRO_KEY KEY_BACKSPACE;
MACRO_KEY KEY_BEG;
MACRO_KEY_RECOVERABLE KEY_BLANK_CHECK;
MACRO_KEY_LEFTFIRST KEY_BOTTOMFIRST;
MACRO_KEY_LEFTFIRST KEY_BOTTOMLAST;
MACRO_KEY_LEFTFIRST KEY_BOTTOMLEFT;
MACRO_KEY_LEFTFIRST KEY_BOTTOMRIGHT;
MACRO_KEY KEY_BREAK;
MACRO_KEY KEY_BTAB;
MACRO_KEY KEY_C1;
MACRO_KEY KEY_C3;
MACRO_KEY KEY_CANCEL;
MACRO_KEY KEY_CATAB;
MACRO_KEY KEY_CLEAR;
MACRO_KEY KEY_CLOSE;
MACRO_KEY KEY_COMMAND;
MACRO_KEY KEY_COPY;
MACRO_KEY_RECOVERABLE KEY_COPY_ABORTED;
MACRO_KEY KEY_CREATE;
MACRO_KEY KEY_CTAB;
MACRO_KEY_RECOVERABLE KEY_DATA_PROTECT;
MACRO_KEY KEY_DC;
MACRO_KEY KEY_DL;
MACRO_KEY KEY_DOWN;
MACRO_KEY KEY_EIC;
MACRO_KEY KEY_END;
MACRO_KEY KEY_ENTER;
MACRO_KEY KEY_EOL;
MACRO_KEY KEY_EOS;
MACRO_KEY_RECOVERABLE KEY_EQUAL;
MACRO_KEY KEY_EXIT;
MACRO_KEY KEY_F0;
MACRO_KEY KEY_FIND;
MACRO_KEY_RECOVERABLE KEY_HARDWARE_ERROR;
MACRO_KEY KEY_HELP;
MACRO_KEY KEY_HOME;
MACRO_KEY KEY_IC;
MACRO_KEY KEY_IL;
MACRO_KEY_RECOVERABLE KEY_ILLEGAL_REQUEST;
MACRO_KEY KEY_LEFT;
MACRO_KEY_LEFTFIRST KEY_LEFTFIRST;
MACRO_KEY_LEFTFIRST KEY_LEFTLAST;
MACRO_KEY KEY_LL;
MACRO_KEY KEY_MARK;
MACRO_KEY KEY_MAX;
MACRO_KEY_RECOVERABLE KEY_MEDIUM_ERROR;
MACRO_KEY KEY_MESSAGE;
MACRO_KEY KEY_MIN;
MACRO_KEY_RECOVERABLE KEY_MISCOMPARE;
MACRO_KEY KEY_MOUSE;
MACRO_KEY KEY_MOVE;
MACRO_KEY KEY_NEXT;
MACRO_KEY_RECOVERABLE KEY_NOT_READY;
MACRO_SENSE KEY_NO_SENSE;
MACRO_KEY KEY_NPAGE;
MACRO_KEY KEY_OPEN;
MACRO_KEY KEY_OPTIONS;
MACRO_KEY KEY_PPAGE;
MACRO_KEY KEY_PREVIOUS;
MACRO_KEY KEY_PRINT;
MACRO_KEY_RECOVERABLE KEY_RECOVERABLE_ERROR;
MACRO_KEY KEY_REDO;
MACRO_KEY KEY_REFERENCE;
MACRO_KEY KEY_REFRESH;
MACRO_KEY KEY_REPLACE;
MACRO_KEY_RECOVERABLE KEY_RESERVED;
MACRO_KEY KEY_RESET;
MACRO_KEY KEY_RESTART;
MACRO_KEY KEY_RESUME;
MACRO_KEY KEY_RIGHT;
MACRO_KEY_LEFTFIRST KEY_RIGHTFIRST;
MACRO_KEY_LEFTFIRST KEY_RIGHTLAST;
MACRO_KEY KEY_SAVE;
MACRO_KEY KEY_SBEG;
MACRO_KEY KEY_SCANCEL;
MACRO_KEY KEY_SCOMMAND;
MACRO_KEY KEY_SCOPY;
MACRO_KEY KEY_SCREATE;
MACRO_KEY KEY_SDC;
MACRO_KEY KEY_SDL;
MACRO_KEY KEY_SELECT;
MACRO_KEY KEY_SEND;
MACRO_KEY KEY_SEOL;
MACRO_KEY KEY_SEXIT;
MACRO_KEY KEY_SF;
MACRO_KEY KEY_SFIND;
MACRO_KEY KEY_SHELP;
MACRO_KEY KEY_SHOME;
MACRO_KEY KEY_SIC;
MACRO_KEY KEY_SLEFT;
MACRO_KEY KEY_SMESSAGE;
MACRO_KEY KEY_SMOVE;
MACRO_KEY KEY_SNEXT;
MACRO_KEY KEY_SOPTIONS;
MACRO_KEY KEY_SPREVIOUS;
MACRO_KEY KEY_SPRINT;
MACRO_KEY KEY_SR;
MACRO_KEY KEY_SREDO;
MACRO_KEY KEY_SREPLACE;
MACRO_KEY KEY_SRESET;
MACRO_KEY KEY_SRIGHT;
MACRO_KEY KEY_SRSUME;
MACRO_KEY KEY_SSAVE;
MACRO_KEY KEY_SSUSPEND;
MACRO_KEY KEY_STAB;
MACRO_KEY KEY_SUNDO;
MACRO_KEY KEY_SUSPEND;
MACRO_KEY_LEFTFIRST KEY_TOPFIRST;
MACRO_KEY_LEFTFIRST KEY_TOPLAST;
MACRO_KEY KEY_UNDO;
MACRO_KEY_RECOVERABLE KEY_UNIT_ATTENTION;
MACRO_KEY KEY_UP;
MACRO_KEY_RECOVERABLE KEY_VENDOR_UNIQUE;
MACRO_KEY_RECOVERABLE KEY_VOLUME_OVERFLOW;
MACRO_KEY_RECOVERABLE KEY_WRITE_PROTECT;
MACRO_KID KID_GOT_LAYOUT;
MACRO_KID KID_GOT_PREFACE;
MACRO_KID KID_NONE;
MACRO_KID KID_OK;
nfssys_op KILL_LOCKMGR;
MACRO_KIOC KIOC;
MACRO_KIOCABORT1 KIOCABORT1;
MACRO_KIOCABORT1A KIOCABORT1A;
MACRO_KIOCABORT2 KIOCABORT2;
MACRO_KIOCABORTDISABLE KIOCABORTALTERNATE;
MACRO_KIOCABORTDISABLE KIOCABORTDISABLE;
MACRO_KIOCABORTDISABLE KIOCABORTENABLE;
MACRO_KIOCCMD KIOCCMD;
MACRO_KIOCGCOMPAT KIOCGCOMPAT;
MACRO_KIOCGDIRECT KIOCGDIRECT;
MACRO_KIOCGETKEY KIOCGETKEY;
MACRO_KIOCGKEY KIOCGKEY;
MACRO_KIOCGLED KIOCGLED;
MACRO_KIOCGTRANS KIOCGTRANS;
MACRO_KIOCGTRANSABLE KIOCGTRANSABLE;
MACRO_KIOCLAYOUT KIOCLAYOUT;
MACRO_KIOCSCOMPAT KIOCSCOMPAT;
MACRO_KIOCSDIRECT KIOCSDIRECT;
MACRO_KIOCSETKEY KIOCSETKEY;
MACRO_KIOCSKABORTEN KIOCSKABORTEN;
MACRO_KIOCSKEY KIOCSKEY;
MACRO_KIOCSLAYOUT KIOCSLAYOUT;
MACRO_KIOCSLED KIOCSLED;
MACRO_KIOCTRANS KIOCTRANS;
MACRO_KIOCTRANSABLE KIOCTRANSABLE;
MACRO_KIOCTYPE KIOCTYPE;
MACRO_KMC KMC_NODEBUG;
MACRO_KMC KMC_NOHASH;
MACRO_KMC KMC_NOMAGAZINE;
MACRO_KMC KMC_NOTOUCH;
MACRO_KMC KMC_QCACHE;
MACRO_KM KM_FLAGS;
MACRO_KM KM_NOSLEEP;
MACRO_KM_WAIT KM_NOWAIT;
MACRO_KM KM_PANIC;
MACRO_KM KM_SLEEP;
MACRO_KM_WAIT KM_TEMP;
MACRO_KM KM_VMFLAGS;
MACRO_KM_WAIT KM_WAIT;
MACRO_KNC KNC_STRSIZE;
MACRO_KOBJ KOBJ_EXEC;
MACRO_KOBJ KOBJ_INTERP;
MACRO_KOBJ KOBJ_NOTIFY_MAX;
MACRO_KOBJ KOBJ_NOTIFY_MODLOAD;
MACRO_KOBJ KOBJ_NOTIFY_MODUNLOAD;
MACRO_KOBJ KOBJ_NVERSION_CURRENT;
MACRO_KOBJ KOBJ_NVERSION_NONE;
MACRO_KOBJ KOBJ_NVERSION_NUM;
MACRO_KOBJ KOBJ_PRIM;
MACRO_KOBJ KOBJ_RESOLVED;
rpcsys_op KRPC_REVAUTH;
MACRO_KRR KRR;
MACRO_KSTAT KSTAT_DATA_CHAR;
MACRO_KSTAT KSTAT_DATA_DOUBLE;
MACRO_KSTAT KSTAT_DATA_FLOAT;
MACRO_KSTAT KSTAT_DATA_INT32;
MACRO_KSTAT KSTAT_DATA_INT64;
MACRO_KSTAT KSTAT_DATA_LONG;
MACRO_KSTAT KSTAT_DATA_LONGLONG;
MACRO_KSTAT KSTAT_DATA_UINT32;
MACRO_KSTAT KSTAT_DATA_UINT64;
MACRO_KSTAT KSTAT_DATA_ULONG;
MACRO_KSTAT KSTAT_DATA_ULONGLONG;
MACRO_KSTAT KSTAT_FLAG_DORMANT;
MACRO_KSTAT KSTAT_FLAG_INVALID;
MACRO_KSTAT KSTAT_FLAG_PERSISTENT;
MACRO_KSTAT KSTAT_FLAG_VAR_SIZE;
MACRO_KSTAT KSTAT_FLAG_VIRTUAL;
MACRO_KSTAT KSTAT_FLAG_WRITABLE;
MACRO_KSTAT KSTAT_INTR_HARD;
MACRO_KSTAT KSTAT_INTR_MULTSVC;
MACRO_KSTAT KSTAT_INTR_SOFT;
MACRO_KSTAT KSTAT_INTR_SPURIOUS;
MACRO_KSTAT KSTAT_INTR_WATCHDOG;
MACRO_KSTAT KSTAT_IOC_BASE;
MACRO_KSTAT KSTAT_IOC_CHAIN_ID;
MACRO_KSTAT KSTAT_IOC_READ;
MACRO_KSTAT KSTAT_IOC_WRITE;
MACRO_KSTAT KSTAT_NUM_INTRS;
MACRO_KSTAT KSTAT_NUM_TYPES;
MACRO_KSTAT KSTAT_READ;
MACRO_KSTAT KSTAT_STRLEN;
MACRO_KSTAT KSTAT_TYPE_INTR;
MACRO_KSTAT KSTAT_TYPE_IO;
MACRO_KSTAT KSTAT_TYPE_NAMED;
MACRO_KSTAT KSTAT_TYPE_RAW;
MACRO_KSTAT KSTAT_TYPE_TIMER;
MACRO_KSTAT KSTAT_WRITE;
MACRO_KTAB KTAB_STRLEN;
MACRO_KV KV_ADD_KEYS;
MACRO_KV KV_ESCAPE;
MACRO_KV KV_FLAG_NONE;
MACRO_KV KV_FLAG_REQUIRED;
MACRO_KV KV_WILDCHAR;
MACRO_LANCEALIGN LANCEALIGN;
MACRO_LANCE LANCE_ACON;
MACRO_LANCE LANCE_BABL;
MACRO_LANCE LANCE_BCON;
MACRO_LANCE LANCE_BSWP;
MACRO_LANCE LANCE_CERR;
MACRO_LANCE LANCE_CSR0;
MACRO_LANCE LANCE_CSR1;
MACRO_LANCE LANCE_CSR2;
MACRO_LANCE LANCE_CSR3;
MACRO_LANCE LANCE_ERR;
MACRO_LANCE LANCE_IDON;
MACRO_LANCE LANCE_INEA;
MACRO_LANCE LANCE_INIT;
MACRO_LANCE LANCE_INTR;
MACRO_LANCE LANCE_MERR;
MACRO_LANCE LANCE_MISS;
MACRO_LANCE LANCE_RINT;
MACRO_LANCE LANCE_RXON;
MACRO_LANCE LANCE_STOP;
MACRO_LANCE LANCE_STRT;
MACRO_LANCE LANCE_TDMD;
MACRO_LANCE LANCE_TINT;
MACRO_LANCE LANCE_TXON;
MACRO_LARGEBUFSZ LARGEBUFSZ;
MACRO_ANYMARK LASTMARK;
MACRO_ASCII_DEVID LAST_DEVID;
MACRO_LAV LAV_CURRENT;
MACRO_LAV LAV_NONE;
MACRO_LAV LAV_NUM;
MACRO_LAV LAV_VERSION1;
MACRO_LAV LAV_VERSION2;
MACRO_LAYOUTKEY LAYOUTKEY;
MACRO_LA_RJT_0 LA_ACC;
MACRO_LA LA_ACT_ADD;
MACRO_LA LA_ACT_CONSISTENT;
MACRO_LA LA_ACT_DELETE;
MACRO_LA_ELS LA_ELS_ABTX;
MACRO_LA_ELS LA_ELS_ACC;
MACRO_LA_ELS LA_ELS_ADISC;
MACRO_LA_ELS LA_ELS_ADVC;
MACRO_LA_ELS LA_ELS_DISPLAY;
MACRO_LA_ELS LA_ELS_ECHO;
MACRO_LA_ELS LA_ELS_ESTC;
MACRO_LA_ELS LA_ELS_ESTS;
MACRO_LA_ELS LA_ELS_FACT;
MACRO_LA_ELS LA_ELS_FDACT;
MACRO_LA_ELS LA_ELS_FDISC;
MACRO_LA_ELS LA_ELS_FLOGI;
MACRO_LA_ELS LA_ELS_GAID;
MACRO_LA_ELS LA_ELS_GPRLO;
MACRO_LA_ELS LA_ELS_IDENT;
MACRO_LA_ELS LA_ELS_LOGO;
MACRO_LA_ELS LA_ELS_NACT;
MACRO_LA_ELS LA_ELS_NDACT;
MACRO_LA_ELS LA_ELS_NEW_IDENT;
MACRO_LA_ELS LA_ELS_PDISC;
MACRO_LA_ELS LA_ELS_PLOGI;
MACRO_LA_ELS LA_ELS_PRLI;
MACRO_LA_ELS LA_ELS_PRLO;
MACRO_LA_ELS LA_ELS_QoSR;
MACRO_LA_ELS LA_ELS_RCS;
MACRO_LA_ELS LA_ELS_RES;
MACRO_LA_ELS LA_ELS_RJT;
MACRO_LA_ELS LA_ELS_RLS;
MACRO_LA_ELS LA_ELS_RRQ;
MACRO_LA_ELS LA_ELS_RSI;
MACRO_LA_ELS LA_ELS_RSS;
MACRO_LA_ELS LA_ELS_RTV;
MACRO_LA_ELS LA_ELS_RVCS;
MACRO_LA_ELS LA_ELS_SCN;
MACRO_LA_ELS LA_ELS_TPLS;
MACRO_LA LA_FLG_BINDFROM;
MACRO_LA LA_FLG_BINDTO;
MACRO_LA_RJT_0 LA_IDENT;
MACRO_LA_RJT_0 LA_LOGI;
MACRO_LA_RJT_0 LA_LOGO;
MACRO_LA_RJT_0 LA_RJT;
MACRO_LA_RJT LA_RJT_ABT_INACTIVE_XID;
MACRO_LA_RJT LA_RJT_ABT_INVALID_XID;
MACRO_LA_RJT LA_RJT_ASSOC_HDR_REQD;
MACRO_LA_RJT LA_RJT_CONCURRENT;
MACRO_LA_RJT LA_RJT_CREDIT;
MACRO_LA_RJT LA_RJT_DATA_FIELD_SIZE;
MACRO_LA_RJT LA_RJT_INITIATOR;
MACRO_LA_RJT LA_RJT_INSUFFICENT;
MACRO_LA_RJT LA_RJT_INVALID;
MACRO_LA_RJT LA_RJT_INVALID_ASSOC_HEADER;
MACRO_LA_RJT LA_RJT_INVALID_COMMON_SVC;
MACRO_LA_RJT LA_RJT_INVALID_FQXID;
MACRO_LA_RJT LA_RJT_INVALID_NODE_WWNAME;
MACRO_LA_RJT LA_RJT_INVALID_NPORT_ID;
MACRO_LA_RJT LA_RJT_INVALID_ORIG_SID;
MACRO_LA_RJT LA_RJT_INVALID_PORT_WWNAME;
MACRO_LA_RJT LA_RJT_LOGICAL_BUSY;
MACRO_LA_RJT LA_RJT_LOGICAL_ERR;
MACRO_LA_RJT LA_RJT_NOEXPLANATION;
MACRO_LA_RJT LA_RJT_NOT_SUPPORTED;
MACRO_LA_RJT LA_RJT_OPTIONS;
MACRO_LA_RJT LA_RJT_PROTOCOL_ERR;
MACRO_LA_RJT LA_RJT_RECIPIENT;
MACRO_LA_RJT LA_RJT_REQUESTED_DATA;
MACRO_LA_RJT LA_RJT_REQUEST_IN_PROGRESS;
MACRO_LA_RJT LA_RJT_REQUEST_NOT_SUPPORTED;
MACRO_LA_RJT LA_RJT_RRQ_REQUIRED;
MACRO_LA_RJT LA_RJT_UNABLE_TO_PERFORM;
MACRO_LA_RJT LA_RJT_VENDOR;
MACRO_LA_RJT_0 LA_RLS;
MACRO_LA LA_SER_CONFIG;
MACRO_LA LA_SER_DEFAULT;
MACRO_LA LA_SER_LIBPATH;
MACRO_LA LA_SER_ORIG;
MACRO_LA LA_SER_RUNPATH;
MACRO_LA LA_SER_SECURE;
MACRO_LA LA_SYMB_ALTVALUE;
MACRO_LA LA_SYMB_DLSYM;
MACRO_LA LA_SYMB_NOPLTENTER;
MACRO_LA LA_SYMB_NOPLTEXIT;
MACRO_LA LA_SYMB_STRUCTCALL;
MACRO_LBLSIZE LBLSIZE;
MACRO_PPGRP LBOLT;
MACRO_JBLOG LBUFMAX;
MACRO_LCA LCA;
MACRO_LCASE LCASE;
MACRO_LCRTBS LCRTBS;
MACRO_LCRTBS LCRTERA;
MACRO_LCRTBS LCRTKIL;
MACRO_LCRTBS LCTLECH;
MACRO_LC LC_ALL;
MACRO_LC LC_COLLATE;
MACRO_LC LC_CTYPE;
MACRO_LC LC_MESSAGES;
MACRO_LC LC_MONETARY;
MACRO_LC LC_NUMERIC;
MACRO_LC LC_TIME;
MACRO_LDBL LDBL_DIG;
MACRO_LDBL LDBL_MANT_DIG;
MACRO_LDBL LDBL_MAX_10_EXP;
MACRO_LDBL LDBL_MAX_EXP;
MACRO_LDBL LDBL_MIN_10_EXP;
MACRO_LDBL LDBL_MIN_EXP;
MACRO_LDCHG LDCHG;
MACRO_LOWAT LDCHUNK;
MACRO_LDCLOSE LDCLOSE;
MACRO_LDDMAP LDDMAP;
MACRO_LCRTBS LDECCTQ;
MACRO_LDEMAP LDEMAP;
MACRO_LDGETT LDGETT;
MACRO_LDGMAP LDGMAP;
MACRO_LDIOC LDIOC;
MACRO_LDL LDL_DIVISOR;
MACRO_LDL_SCAN LDL_ERROR;
MACRO_LDL LDL_MAXLOGSIZE;
MACRO_LDL LDL_MAXTRANSFER;
MACRO_LDL LDL_MINBUFSIZE;
MACRO_LDL LDL_MINLOGSIZE;
MACRO_LDL LDL_MINTRANSFER;
MACRO_LDL_SCAN LDL_SCAN;
MACRO_LDNMAP LDNMAP;
MACRO_LDOPEN LDOPEN;
MACRO_LDSETT LDSETT;
MACRO_LDSMAP LDSMAP;
MACRO_LDTERM LDTERM_CS_MAX_BYTE_LENGTH;
MACRO_LDTERM LDTERM_CS_MAX_CODESETS;
MACRO_LDTERM LDTERM_CS_TYPE_EUC;
MACRO_LDTERM LDTERM_CS_TYPE_EUC_MAX_SUBCS;
MACRO_LDTERM LDTERM_CS_TYPE_EUC_MIN_SUBCS;
MACRO_LDTERM LDTERM_CS_TYPE_MAX;
MACRO_LDTERM LDTERM_CS_TYPE_MIN;
MACRO_LDTERM LDTERM_CS_TYPE_PCCS;
MACRO_LDTERM LDTERM_CS_TYPE_PCCS_MAX_SUBCS;
MACRO_LDTERM LDTERM_CS_TYPE_PCCS_MIN_SUBCS;
MACRO_LDTERM LDTERM_CS_TYPE_UTF8;
MACRO_LDTERM LDTERM_CS_TYPE_UTF8_BIT_MASK;
MACRO_LDTERM LDTERM_CS_TYPE_UTF8_MAX_BYTE;
MACRO_LDTERM LDTERM_CS_TYPE_UTF8_MAX_P14;
MACRO_LDTERM LDTERM_CS_TYPE_UTF8_MIN_BYTE;
MACRO_LDTERM LDTERM_CS_TYPE_UTF8_MIN_P14;
MACRO_LDTERM LDTERM_CS_TYPE_UTF8_SHIFT_BITS;
MACRO_LDTERM LDTERM_DATA_VERSION;
MACRO_LD LD_SUP_DERIVED;
MACRO_LD LD_SUP_EXTRACTED;
MACRO_LD LD_SUP_INHERITED;
MACRO_LED LED_CAPS_LOCK;
MACRO_LED LED_COMPOSE;
MACRO_LED LED_KANA;
MACRO_LED LED_NUM_LOCK;
MACRO_LED LED_SCROLL_LOCK;
MACRO_LEFTALT LEFTALT;
MACRO_LEFTARROW LEFTARROW;
MACRO_LEFTCTRL LEFTCTRL;
MACRO_LEFTFUNC LEFTFUNC;
MACRO_SHIFTLOCK LEFTSHIFT;
MACRO_LEN LEN_DKL_ASCII;
MACRO_LEN LEN_DKL_VVOL;
MACRO_LFLOW LFLOW_OFF;
MACRO_LFLOW LFLOW_ON;
MACRO_LFLOW LFLOW_RESTART_ANY;
MACRO_LFLOW LFLOW_RESTART_XON;
MACRO_LCRTBS LFLUSHO;
MACRO_LIFC LIFC_EXTERNAL_SOURCE;
MACRO_LIFC LIFC_NOXMIT;
MACRO_LIFNAMSIZ LIFNAMSIZ;
MACRO_ASCII_DEVID LIGHTPEN_DEVID;
MACRO_LINESZ LINESZ;
MACRO_COLL LINE_MAX;
MACRO_TXBUFSIZE LINE_TXBUFSIZE;
MACRO_LENGTH LINKTARGET_AC_HEADER_LENGTH;
MACRO_ARG LINK_MAX;
zotypes LINK_OBJ;
MACRO_LIOC LIOC;
MACRO_LIOCGETP LIOCGETP;
MACRO_LIOCGETS LIOCGETS;
MACRO_LIOCSETP LIOCSETP;
MACRO_LIOCSETS LIOCSETS;
MACRO_LIO LIO_NOP;
MACRO_LIO LIO_NOWAIT;
MACRO_LIO LIO_READ;
MACRO_LIO LIO_WAIT;
MACRO_LIO LIO_WRITE;
MACRO_ENDIAN LITTLE_ENDIAN;
MACRO_LI_ENFORCE LI_ALLOC;
MACRO_LI_ENFORCE LI_DUP;
MACRO_LI_ENFORCE LI_ENFORCE;
MACRO_LI_ENFORCE LI_FREE;
MACRO_LI LI_SPPA;
MACRO_LI_ENFORCE LI_UPDATE;
MACRO_LLC1IDNUM LLC1IDNUM;
MACRO_LLC1_ATTACHED LLC1_ATTACHED;
MACRO_LLC1 LLC1_AUTO_TEST;
MACRO_LLC1 LLC1_AUTO_XID;
MACRO_LLC1 LLC1_AVAILABLE;
MACRO_LLC1 LLC1_BINDING;
MACRO_LLC1_CSMACD LLC1_CSMACD_HDR_SIZE;
MACRO_LLC1_HIWATER LLC1_DEFMAX;
MACRO_LLC1 LLC1_DEF_PPA;
MACRO_LLC1_HIWATER LLC1_HIWATER;
MACRO_LLC1 LLC1_INFO_WAIT;
MACRO_LLC1 LLC1_LINKED;
MACRO_LLC1_HIWATER LLC1_LOWATER;
MACRO_LLC1 LLC1_MAX_MULTICAST;
MACRO_LLC1 LLC1_RAW_WAIT;
MACRO_LLC1 LLC1_USING_RAW;
MACRO_LLC2_INIT LLC2_GET_CON_STATS;
MACRO_LLC2_INIT LLC2_GET_SAP_STATS;
MACRO_LLC2_INIT LLC2_GET_STA_STATS;
MACRO_LLC2_INIT LLC2_INIT;
MACRO_LLC2 LLC2_MAX_CONS;
MACRO_LLC2 LLC2_MAX_SAPS;
MACRO_LLC2_INIT LLC2_UNINIT;
MACRO_LLCTRACE LLCERRS;
MACRO_LLCE LLCE_NOBUFFER;
MACRO_LLCE LLCE_OK;
MACRO_LLCTRACE LLCPROT;
MACRO_LLCTRACE LLCRECV;
MACRO_LLCTRACE LLCSEND;
MACRO_LLCS LLCS_BLOCKED;
MACRO_LLCS LLCS_BRDCSTRCV;
MACRO_LLCS LLCS_BRDCSTXMT;
MACRO_LLCS LLCS_BYTERCV;
MACRO_LLCS LLCS_BYTEXMT;
MACRO_LLCS LLCS_IERRORS;
MACRO_LLCS LLCS_MULTIRCV;
MACRO_LLCS LLCS_MULTIXMT;
MACRO_LLCS LLCS_NOBUFFER;
MACRO_LLCS LLCS_OERRORS;
MACRO_LLCS LLCS_PKTRCV;
MACRO_LLCS LLCS_PKTXMT;
MACRO_LLCS LLCS_TESTRCV;
MACRO_LLCS LLCS_TESTXMT;
MACRO_LLCS LLCS_XIDRCV;
MACRO_LLCS LLCS_XIDXMT;
MACRO_LLCTRACE LLCTRACE;
MACRO_LLC LLC_FAST;
MACRO_LLC_GET LLC_GETPPA;
MACRO_LLC_GET LLC_GET_CON_PARMS_REQ;
MACRO_LLC_UI LLC_GLOBAL_SAP;
MACRO_LLC_UI LLC_GROUP_ADDR;
MACRO_LLC_UI LLC_NOVELL_SAP;
MACRO_LLC_UI LLC_NULL_SAP;
MACRO_LLC_UI LLC_P;
MACRO_LLC LLC_PROM;
MACRO_LLC LLC_RAW;
MACRO_RESIDENT LLC_RESIDENT;
MACRO_LLC_UI LLC_RESPONSE;
MACRO_LLC_UI LLC_SERVICES;
MACRO_LLC_GET LLC_SETPPA;
MACRO_LLC_GET LLC_SET_CON_PARMS_REQ;
MACRO_LLC LLC_SNAP;
MACRO_LLC LLC_SNAP_OID;
MACRO_LLC_UI LLC_SNAP_SAP;
MACRO_LLC_UI LLC_TEST;
MACRO_LLC_UI LLC_UI;
MACRO_LLC_UI LLC_XID;
MACRO_LLC_UI LLC_XID_CLASS_I;
MACRO_LLC_UI LLC_XID_CLASS_II;
MACRO_LLC_UI LLC_XID_CLASS_III;
MACRO_LLC_UI LLC_XID_CLASS_IV;
MACRO_LLC_UI LLC_XID_FMTID;
MACRO_LLC_UI LLC_XID_INFO_SIZE;
MACRO_LLC_UI LLC_XID_TYPE_1;
MACRO_LLC_UI LLC_XID_TYPE_2;
MACRO_LLC_UI LLC_XID_TYPE_3;
MACRO_LCRTBS LLITOUT;
MACRO_LLONG LLONG_MAX;
MACRO_LLONG LLONG_MIN;
$14C8EF536CF000E9A9D5F5EF83AA29EC LMB_BLOCKED;
$14C8EF536CF000E9A9D5F5EF83AA29EC LMB_GRANTED;
$14C8EF536CF000E9A9D5F5EF83AA29EC LMB_PENDING;
MACRO_LCRTBS LMDMBUF;
MACRO_LMD LMD_ENP;
MACRO_LMD LMD_ERR;
MACRO_LMD LMD_OWN;
MACRO_LMD LMD_STP;
$AF741F3DDD464A30547A6EB63D463D95 LMM_FULL;
$AF741F3DDD464A30547A6EB63D463D95 LMM_NONE;
$AF741F3DDD464A30547A6EB63D463D95 LMM_PARTIAL;
$AF741F3DDD464A30547A6EB63D463D95 LMM_REXMIT;
MACRO_LMS LMS_DFAULT;
MACRO_LMS LMS_KFAULT;
MACRO_LMS LMS_SLEEP;
MACRO_LMS LMS_STOPPED;
MACRO_LMS LMS_SYSTEM;
MACRO_LMS LMS_TFAULT;
MACRO_LMS LMS_TRAP;
MACRO_LMS LMS_USER;
MACRO_LMS LMS_USER_LOCK;
MACRO_LMS LMS_WAIT_CPU;
MACRO_LM_SYSID LM_ASYN_RETRY;
MACRO_LM_SYSID LM_BLOCK_SLP;
lm_disp_how LM_CALLBACK;
MACRO_LM_SYSID LM_CR_TIMOUT;
lm_disp_reply LM_DONT;
$5CAC3459AD204328D83E0EB10D8F388D LM_DOWN;
MACRO_LM_SYSID LM_ERROR_SLP;
MACRO_LM_MODE LM_FORWARDMASK;
MACRO_LM_SYSID LM_GRACE_SLP;
MACRO_LM_SYSID LM_GR_RETRY;
MACRO_LM_SYSID LM_GR_TIMOUT;
MACRO_LM LM_ID_BASE;
MACRO_LM LM_ID_LDSO;
MACRO_LM LM_ID_NEWLM;
MACRO_LM LM_ID_NUM;
MACRO_LM_IGNORED LM_IGNORED;
lm_fmly LM_INET;
lm_fmly LM_INET6;
lm_fmly LM_LOOPBACK;
MACRO_LM_MAXSTRLEN LM_MAXSTRLEN;
MACRO_LM_MODE LM_MODE;
MACRO_LM_SYSID LM_NO_TIMOUT;
MACRO_LM_SYSID LM_PMAP_TIMEOUT;
MACRO_LM_SYSID LM_RECLAIM_RETRY;
lm_disp_reply LM_REPLY;
MACRO_LM_SYSID LM_RETRY;
MACRO_LM_SYSID LM_RLOCK_SLP;
lm_disp_how LM_SENDREPLY;
$5CAC3459AD204328D83E0EB10D8F388D LM_SHUTTING_DOWN;
MACRO_LM_MODE LM_SLC;
MACRO_LM_SYSID LM_SM_TIMOUT;
MACRO_LM_SYSID LM_STATD_DELAY;
nfssys_op LM_SVC;
MACRO_LM_SVC LM_SVC_CUR_VERS;
MACRO_LM_SYSID LM_SYSID;
MACRO_LM_SYSID LM_SYSID_CLIENT;
MACRO_LM_SYSID LM_SYSID_MAX;
lm_proto LM_TCP;
lm_proto LM_UDP;
$5CAC3459AD204328D83E0EB10D8F388D LM_UP;
MACRO_AREGTYPE LNKTYPE;
MACRO_LCRTBS LNOFLSH;
MACRO_LCRTBS LNOHANG;
MACRO_LOADAVG LOADAVG_15MIN;
MACRO_LOADAVG LOADAVG_1MIN;
MACRO_LOADAVG LOADAVG_5MIN;
MACRO_LOADAVG LOADAVG_NSTATS;
MACRO_CS8 LOBLK;
MACRO_LOC_0 LOC;
MACRO_LOCALDOMAINPARTS LOCALDOMAINPARTS;
MACRO_LOCKFS LOCKFS_BUSY;
MACRO_LOCKFS LOCKFS_DLOCK;
MACRO_LOCKFS LOCKFS_ELOCK;
MACRO_LOCKFS LOCKFS_HLOCK;
MACRO_LOCKFS LOCKFS_MAXCOMMENTLEN;
MACRO_LOCKFS LOCKFS_MAXLOCK;
MACRO_LOCKFS LOCKFS_MOD;
MACRO_LOCKFS LOCKFS_NLOCK;
MACRO_LOCKFS LOCKFS_ROELOCK;
MACRO_LOCKFS LOCKFS_ULOCK;
MACRO_LOCKFS LOCKFS_WLOCK;
MACRO_BARRIER LOCKMGR_LOCK;
MACRO_LOCK_NORMAL LOCK_ERRORCHECK;
MACRO_LOCK LOCK_HELD_VALUE;
MACRO_LOCK_PRIO LOCK_INITED;
MACRO_LEVEL LOCK_LEVEL;
MACRO_LOCK_NORMAL LOCK_NORMAL;
MACRO_LOCK_PRIO LOCK_NOTRECOVERABLE;
MACRO_LOCK_PRIO LOCK_OWNERDEAD;
MACRO_LOCK_PRIO LOCK_PRIO_INHERIT;
MACRO_LOCK_PRIO LOCK_PRIO_NONE;
MACRO_LOCK_PRIO LOCK_PRIO_PROTECT;
MACRO_LOCK_NORMAL LOCK_RECURSIVE;
MACRO_LOCK_PRIO LOCK_ROBUST_NP;
MACRO_LOCK_PRIO LOCK_STALL_NP;
MACRO_LOCK_PRIO LOCK_UNMAPPED;
MACRO_LOC LOC_DISALLOW;
MACRO_LOC_FIRST LOC_FIRST_ABSOLUTE;
MACRO_LOC_FIRST LOC_FIRST_DELTA;
MACRO_LOC_FIRST LOC_LAST_ABSOLUTE;
MACRO_LOC_FIRST LOC_LAST_DELTA;
MACRO_LOC LOC_MAND;
MACRO_LOC LOC_OPTIONAL;
MACRO_LOC LOC_OPTS;
MACRO_LOC_FIRST LOC_X_ABSOLUTE;
MACRO_LOC_FIRST LOC_X_DELTA;
MACRO_LOC_FIRST LOC_Y_ABSOLUTE;
MACRO_LOC_FIRST LOC_Y_DELTA;
MACRO_LOFI LOFI_GET_FILENAME;
MACRO_LOFI LOFI_GET_MAXMINOR;
MACRO_LOFI LOFI_GET_MINOR;
MACRO_LOFI LOFI_IOC_BASE;
MACRO_LOFI LOFI_MAP_FILE;
MACRO_LOFI LOFI_MAP_FILE_MINOR;
MACRO_LOFI LOFI_UNMAP_FILE;
MACRO_LOFI LOFI_UNMAP_FILE_MINOR;
MACRO_LOGCTL LOGCTL;
MACRO_LOGDMX LOGDMX_IOC_QEXCHANGE;
MACRO_PROCESS LOGIN_PROCESS;
MACRO_LOGIN LOGIN_REQUIRED;
MACRO_NHASH LOGMAP_NHASH;
MACRO_LOGNAME LOGNAME_MAX;
MACRO_LOG LOG_ALERT;
MACRO_LOG LOG_AUTH;
MACRO_LOG_CONSMIN LOG_BACKLOG;
MACRO_LOG_CONSMIN LOG_CLONEMIN;
MACRO_LOG LOG_CONS;
MACRO_LOG_CONSMIN LOG_CONSMIN;
MACRO_LOG LOG_CRIT;
MACRO_LOG LOG_CRON;
MACRO_LOG LOG_DAEMON;
MACRO_LOG LOG_DEBUG;
MACRO_LOG LOG_EMERG;
MACRO_LOG LOG_ERR;
MACRO_LOG LOG_FACMASK;
nfssys_op LOG_FLUSH;
MACRO_LOG_CONSMIN LOG_HIWAT;
MACRO_LOG LOG_INFO;
MACRO_LOG LOG_KERN;
MACRO_LOG LOG_LOCAL0;
MACRO_LOG LOG_LOCAL1;
MACRO_LOG LOG_LOCAL2;
MACRO_LOG LOG_LOCAL3;
MACRO_LOG LOG_LOCAL4;
MACRO_LOG LOG_LOCAL5;
MACRO_LOG LOG_LOCAL6;
MACRO_LOG LOG_LOCAL7;
MACRO_LOG_CONSMIN LOG_LOGMIN;
MACRO_LOG_CONSMIN LOG_LOWAT;
MACRO_LOG LOG_LPR;
MACRO_LOG_CONSMIN LOG_MAGIC;
MACRO_LOG LOG_MAIL;
MACRO_LOG_CONSMIN LOG_MAX;
MACRO_LOG_CONSMIN LOG_MAXFREE;
MACRO_LOG_CONSMIN LOG_MAXPS;
MACRO_LOG_CONSMIN LOG_MID;
MACRO_LOG_CONSMIN LOG_MINFREE;
MACRO_LOG_CONSMIN LOG_MINPS;
MACRO_LOG_MODE LOG_MODE;
MACRO_LOG_CONSMIN LOG_MSGSIZE;
MACRO_LOG LOG_NDELAY;
MACRO_LOG LOG_NEWS;
MACRO_LOG LOG_NFACILITIES;
log_entry_t LOG_NOP;
MACRO_LOG LOG_NOTICE;
MACRO_LOG LOG_NOWAIT;
MACRO_LOG LOG_ODELAY;
MACRO_LOG LOG_PID;
MACRO_LOG LOG_PRIMASK;
MACRO_LOG_CONSMIN LOG_RECENTSIZE;
MACRO_LOG_SENSE LOG_SELECT_CMD;
MACRO_LOG_SENSE LOG_SENSE_CMD;
MACRO_LOG_SENSE_LENGTH LOG_SENSE_LENGTH;
MACRO_LOG LOG_SYSLOG;
MACRO_LOG LOG_USER;
MACRO_LOG LOG_UUCP;
MACRO_LOG_VOL LOG_VOL_CLOSE_INT;
MACRO_LOG_VOL LOG_VOL_OPEN_INT;
MACRO_LOG LOG_WARNING;
MACRO_BIAS LONGLONG_BIAS;
MACRO_BIT LONG_BIT;
MACRO_LONG LONG_MAX;
MACRO_LONG LONG_MIN;
MACRO_LONG_SIGN LONG_SIGN_BIT;
MACRO_LOOKUP LOOKUP_DIR;
MACRO_LOSTFOUNDINO LOSTFOUNDINO;
MACRO_LOWAT LOWAT;
name_pos LOWER_NAME;
MACRO_LCRTBS LPASS8;
MACRO_LCRTBS LPENDIN;
MACRO_LCRTBS LPRTERA;
MACRO_LSE LSE_ENTER;
MACRO_LSE LSE_EXIT;
MACRO_LSE LSE_RECORD;
MACRO_LSE LSE_TRACE;
MACRO_LS_RJT LS_ABTX;
MACRO_LS_RJT LS_ACC;
MACRO_LS LS_ADAPTIVE_MUTEX_BLOCK;
MACRO_LS LS_ADAPTIVE_MUTEX_HOLD;
MACRO_LS LS_ADAPTIVE_MUTEX_SPIN;
MACRO_LS_RJT LS_ADVC;
MACRO_LS_RJT LS_DISPLAY;
MACRO_LS_RJT LS_ECHO;
MACRO_LS LS_ENTER_FAILED;
MACRO_LS LS_ERROR_BASE;
MACRO_LS_RJT LS_ESTC;
MACRO_LS_RJT LS_ESTS;
MACRO_LS LS_EXIT_FAILED;
MACRO_LS_RJT LS_FLOGI;
MACRO_LS_RJT LS_IDENT;
MACRO_LS_RJT LS_LOGO;
MACRO_LS LS_MAX_EVENTS;
MACRO_LS_MAX LS_MAX_STACK_DEPTH;
MACRO_LS_MAX LS_MAX_WATCH;
MACRO_LS_RJT LS_PLOGI;
MACRO_LS LS_PROFILE_INTR;
MACRO_LS_RJT LS_RCS;
MACRO_LS LS_RECORD_FAILED;
MACRO_LS LS_RECURSION_DETECTED;
MACRO_LS_RJT LS_RES;
MACRO_LS_RJT LS_RJT;
MACRO_LS_RJT LS_RLS;
MACRO_LS_RJT LS_RRQ;
MACRO_LS_RJT LS_RSI;
MACRO_LS_RJT LS_RSS;
MACRO_LS_RJT LS_RTV;
MACRO_LS LS_RW_READER_BY_WRITER;
MACRO_LS LS_RW_READER_BY_WRITE_WANTED;
MACRO_LS LS_RW_READER_HOLD;
MACRO_LS LS_RW_WRITER_BY_READERS;
MACRO_LS LS_RW_WRITER_BY_WRITER;
MACRO_LS LS_RW_WRITER_HOLD;
MACRO_LS_SECTORS LS_SECTORS;
MACRO_LS LS_SPIN_LOCK;
MACRO_LS LS_SPIN_LOCK_HOLD;
MACRO_LS_RJT LS_TEST;
MACRO_LS LS_THREAD_LOCK;
MACRO_LCRTBS LTILDE;
MACRO_LCRTBS LTOSTOP;
MACRO_LUFS LUFS_EXTENTS;
MACRO_LUFS_VERSION LUFS_VERSION;
MACRO_LUFS_VERSION LUFS_VERSION_LATEST;
MACRO_LWPNULL LWPNULL;
MACRO_LWP LWP_DETACHED;
MACRO_LWP LWP_SUSPENDED;
MACRO_LWP_USER LWP_SYS;
MACRO_LWP_USER LWP_USER;
MACRO_L_BITSMAJOR32 L_BITSMAJOR;
MACRO_L_BITSMAJOR32 L_BITSMAJOR32;
MACRO_L_BITSMAJOR32 L_BITSMINOR;
MACRO_L_BITSMAJOR32 L_BITSMINOR32;
MACRO_L_SUCCESS L_ERROR;
MACRO_L_GETPPA L_GETPPA;
MACRO_L_GETPPA L_GETSTATS;
MACRO_L_SUCCESS L_MANLOCK;
MACRO_L_BITSMAJOR32 L_MAXMAJ;
MACRO_L_BITSMAJOR32 L_MAXMAJ32;
MACRO_L_BITSMAJOR32 L_MAXMIN;
MACRO_L_BITSMAJOR32 L_MAXMIN32;
MACRO_L_SUCCESS L_MAXTRYS;
MACRO_L_SUCCESS L_NAMELEN;
lock_type L_PAGELOCK;
lock_type L_PAGERECLAIM;
lock_type L_PAGEUNLOCK;
MACRO_PROB L_PROB;
MACRO_L_SET L_SET;
MACRO_L_GETPPA L_SETPPA;
MACRO_L_SUCCESS L_SUCCESS;
MACRO_L_SUCCESS L_TMPLOCK;
MACRO_L_SUCCESS L_TMPWRITE;
MACRO_L_GETPPA L_ZEROSTATS;
MACRO_L L_ctermid;
MACRO_L L_cuserid;
MACRO_L L_tmpnam;
$980FA8BDE1FB627A165EC34D5A62F01B Lcl822Encoding;
$CF2A9B67847DD7930A13E7F75B3AE6C8 Lcl822Type;
$980FA8BDE1FB627A165EC34D5A62F01B LclBase64Encoding;
$3F8C702D250B5DC330EA07867C0DE268 LclContentBinary;
$3F8C702D250B5DC330EA07867C0DE268 LclContentText;
$3F8C702D250B5DC330EA07867C0DE268 LclContentUnknown;
$C9268D8AE8F7D6801B05A9E10ADFAF15 LclCsFormat7bit;
$C9268D8AE8F7D6801B05A9E10ADFAF15 LclCsFormatASCII;
$C9268D8AE8F7D6801B05A9E10ADFAF15 LclCsFormatISO9496;
$C9268D8AE8F7D6801B05A9E10ADFAF15 LclCsFormatISO94Ext;
$C9268D8AE8F7D6801B05A9E10ADFAF15 LclCsFormatMBString;
$CF2A9B67847DD7930A13E7F75B3AE6C8 LclMIMEType;
$3186EC298029A051CEE1BF271F72D5DD LclNVaNextedList;
$980FA8BDE1FB627A165EC34D5A62F01B LclQPEncoding;
MACRO_LclSourceUnknownType LclSourceBinaryType;
MACRO_LclSourceUnknownType LclSourceTextType;
MACRO_LclSourceUnknownType LclSourceUnknownType;
$0975BDD6F157BDBA4D69597495967F12 LclTypeApp;
$27EF52B7EDF945EB8F92BA945907B559 LclTypeBothway;
$0975BDD6F157BDBA4D69597495967F12 LclTypeDisplay;
$0975BDD6F157BDBA4D69597495967F12 LclTypeFile;
$0975BDD6F157BDBA4D69597495967F12 LclTypeInComingStream;
$27EF52B7EDF945EB8F92BA945907B559 LclTypeOneway;
$0975BDD6F157BDBA4D69597495967F12 LclTypeOther;
$0975BDD6F157BDBA4D69597495967F12 LclTypeOutGoingStream;
$980FA8BDE1FB627A165EC34D5A62F01B LclUnKnownEncoding;
$C9268D8AE8F7D6801B05A9E10ADFAF15 LclUnKnownFormat;
$CF2A9B67847DD7930A13E7F75B3AE6C8 LclUnKnownType;
$CF2A9B67847DD7930A13E7F75B3AE6C8 LclV3Type;
MACRO_LctErrorDBCannotFindFromCharset LctErrorDBCannotFindFromCharset;
MACRO_LctErrorNotEnoughResource LctErrorDBCannotFindIconvDef;
MACRO_LctErrorDBCannotFindToCharset LctErrorDBCannotFindToCharset;
MACRO_LctErrorNone LctErrorIconvCannotOpen;
MACRO_LctErrorNone LctErrorIconvError;
MACRO_LctErrorIconvHalfDone LctErrorIconvHalfDone;
MACRO_LctErrorInvalidAttribute LctErrorIconvNonIdenticalConversion;
MACRO_LctErrorInvalidAttribute LctErrorInvalidAttribute;
MACRO_LctErrorNone LctErrorNone;
MACRO_LctErrorNotEnoughResource LctErrorNotEnoughResource;
$3186EC298029A051CEE1BF271F72D5DD LctNAddHeader;
$3186EC298029A051CEE1BF271F72D5DD LctNAppForm;
$3186EC298029A051CEE1BF271F72D5DD LctNBodyCharset;
$3186EC298029A051CEE1BF271F72D5DD LctNBodyCharsetEncoding;
$3186EC298029A051CEE1BF271F72D5DD LctNBodyCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNBodyCharsetMailName;
$3186EC298029A051CEE1BF271F72D5DD LctNBodyEncoding;
$3186EC298029A051CEE1BF271F72D5DD LctNBodyPossibleCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNBodySegment;
$3186EC298029A051CEE1BF271F72D5DD LctNContentOfHeaderSegment;
$3186EC298029A051CEE1BF271F72D5DD LctNContentOfTaggedTextSegment;
$3186EC298029A051CEE1BF271F72D5DD LctNDisplayForm;
$3186EC298029A051CEE1BF271F72D5DD LctNFileForm;
$3186EC298029A051CEE1BF271F72D5DD LctNHeaderCharset;
$3186EC298029A051CEE1BF271F72D5DD LctNHeaderCharsetEncoding;
$3186EC298029A051CEE1BF271F72D5DD LctNHeaderCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNHeaderEncoding;
$3186EC298029A051CEE1BF271F72D5DD LctNHeaderPossibleCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNHeaderSegment;
$3186EC298029A051CEE1BF271F72D5DD LctNInComingStreamForm;
$3186EC298029A051CEE1BF271F72D5DD LctNKeepByReference;
$3186EC298029A051CEE1BF271F72D5DD LctNKeepByValue;
$3186EC298029A051CEE1BF271F72D5DD LctNKeepReference;
$3186EC298029A051CEE1BF271F72D5DD LctNMailType;
$3186EC298029A051CEE1BF271F72D5DD LctNMsgText;
MACRO_LctNNone LctNNone;
$3186EC298029A051CEE1BF271F72D5DD LctNOutGoingStreamForm;
$3186EC298029A051CEE1BF271F72D5DD LctNOutGoingStreamForm_V3;
$3186EC298029A051CEE1BF271F72D5DD LctNOutGoingStreamForm_V3_Attach;
$3186EC298029A051CEE1BF271F72D5DD LctNPlainText;
$3186EC298029A051CEE1BF271F72D5DD LctNPlainTextCharset;
$3186EC298029A051CEE1BF271F72D5DD LctNPlainTextCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNPlainTextEncoding;
$3186EC298029A051CEE1BF271F72D5DD LctNPlainTextPossibleCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNPlainTextSegment;
$3186EC298029A051CEE1BF271F72D5DD LctNPrintForm;
$3186EC298029A051CEE1BF271F72D5DD LctNQuerySourceType;
$3186EC298029A051CEE1BF271F72D5DD LctNSeparatedTaggedText;
$3186EC298029A051CEE1BF271F72D5DD LctNSourceForm;
$3186EC298029A051CEE1BF271F72D5DD LctNSourceType;
$3186EC298029A051CEE1BF271F72D5DD LctNSourceUnknown;
$3186EC298029A051CEE1BF271F72D5DD LctNTaggedText;
$3186EC298029A051CEE1BF271F72D5DD LctNTaggedTextCharset;
$3186EC298029A051CEE1BF271F72D5DD LctNTaggedTextCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNTaggedTextEncoding;
$3186EC298029A051CEE1BF271F72D5DD LctNTaggedTextPossibleCharsetList;
$3186EC298029A051CEE1BF271F72D5DD LctNTaggedTextSegment;
$3186EC298029A051CEE1BF271F72D5DD LctNUnknownForm;
$3186EC298029A051CEE1BF271F72D5DD LctNUnused;
MACRO_MACE MACE_BIU_BSWP;
MACRO_MACE MACE_BIU_SWSRT;
MACRO_MACE MACE_BIU_XMTSP;
MACRO_MACE MACE_BIU_XMTSP112;
MACRO_MACE MACE_BIU_XMTSP16;
MACRO_MACE MACE_BIU_XMTSP4;
MACRO_MACE MACE_BIU_XMTSP64;
MACRO_MACE MACE_BIU_XMTSPSHIFTL;
MACRO_MACE MACE_CHIPID0_MAGIC;
MACRO_MACE MACE_CHIPID1_MAGIC;
MACRO_MACE MACE_FIFOCC_RCVBRST;
MACRO_MACE MACE_FIFOCC_RCVFW;
MACRO_MACE MACE_FIFOCC_RCVFW16;
MACRO_MACE MACE_FIFOCC_RCVFW32;
MACRO_MACE MACE_FIFOCC_RCVFW64;
MACRO_MACE MACE_FIFOCC_RCVFWU;
MACRO_MACE MACE_FIFOCC_XMTBRST;
MACRO_MACE MACE_FIFOCC_XMTFW;
MACRO_MACE MACE_FIFOCC_XMTFW16;
MACRO_MACE MACE_FIFOCC_XMTFW32;
MACRO_MACE MACE_FIFOCC_XMTFW8;
MACRO_MACE MACE_FIFOCC_XMTFWU;
MACRO_MACE MACE_FIFOFC_RCVFC;
MACRO_MACE MACE_FIFOFC_XMTFC;
MACRO_MACE MACE_IAC_ADDRCHG;
MACRO_MACE MACE_IAC_LOGADDR;
MACRO_MACE MACE_IAC_PHYADDR;
MACRO_MACE MACE_IMR_BABLM;
MACRO_MACE MACE_IMR_CERRM;
MACRO_MACE MACE_IMR_MPCOM;
MACRO_MACE MACE_IMR_RCVINTM;
MACRO_MACE MACE_IMR_XMTINTM;
MACRO_MACE MACE_IR_BABL;
MACRO_MACE MACE_IR_CERR;
MACRO_MACE MACE_IR_JAB;
MACRO_MACE MACE_IR_MPCO;
MACRO_MACE MACE_IR_RCVCCO;
MACRO_MACE MACE_IR_RCVINT;
MACRO_MACE MACE_IR_RPCO;
MACRO_MACE MACE_IR_XMTINT;
MACRO_MACE MACE_MACCC_DRCVBC;
MACRO_MACE MACE_MACCC_DRCVPA;
MACRO_MACE MACE_MACCC_DXMT2PD;
MACRO_MACE MACE_MACCC_EMBA;
MACRO_MACE MACE_MACCC_ENRCV;
MACRO_MACE MACE_MACCC_ENXMT;
MACRO_MACE MACE_MACCC_PROM;
MACRO_MACE MACE_PHYCC_ASEL;
MACRO_MACE MACE_PHYCC_AWAKE;
MACRO_MACE MACE_PHYCC_DAPC;
MACRO_MACE MACE_PHYCC_DLNKTST;
MACRO_MACE MACE_PHYCC_LNKST;
MACRO_MACE MACE_PHYCC_LTS;
MACRO_MACE MACE_PHYCC_RCVPOL;
MACRO_MACE MACE_PHYCC_RWAKE;
MACRO_MACE MACE_PLSCC_ENPLSIO;
MACRO_MACE MACE_PLSCC_PORTSEL;
MACRO_MACE MACE_PLSCC_PORTSELAUI;
MACRO_MACE MACE_PLSCC_PORTSELDAI;
MACRO_MACE MACE_PLSCC_PORTSELGPSI;
MACRO_MACE MACE_PLSCC_PORTSELTP;
MACRO_MACE MACE_PLSCC_XMTSEL;
MACRO_MACE MACE_PR_RDTREQ;
MACRO_MACE MACE_PR_TDTREQ;
MACRO_MACE MACE_PR_XMTSV;
MACRO_MACE MACE_RCVFC_ASTRPRCV;
MACRO_MACE MACE_RCVFC_LLRCV;
MACRO_MACE MACE_RCVFC_MR;
MACRO_MACE MACE_RCVFS_CLSN;
MACRO_MACE MACE_RCVFS_FCS;
MACRO_MACE MACE_RCVFS_FRAM;
MACRO_MACE MACE_RCVFS_OFLO;
MACRO_MACE MACE_RCVFS_RCVCNT;
MACRO_MACE MACE_UTR_FCOLL;
MACRO_MACE MACE_UTR_LOOP;
MACRO_MACE MACE_UTR_LOOPEXT;
MACRO_MACE MACE_UTR_LOOPINT;
MACRO_MACE MACE_UTR_LOOPINTMENDEC;
MACRO_MACE MACE_UTR_LOOPNO;
MACRO_MACE MACE_UTR_RCVFCSE;
MACRO_MACE MACE_UTR_RPA;
MACRO_MACE MACE_UTR_RTRD;
MACRO_MACE MACE_UTR_RTRE;
MACRO_MACE MACE_XMTFC_APADXMT;
MACRO_MACE MACE_XMTFC_DRTRY;
MACRO_MACE MACE_XMTFC_DXMTFCS;
MACRO_MACE MACE_XMTFS_DEFER;
MACRO_MACE MACE_XMTFS_LCAR;
MACRO_MACE MACE_XMTFS_LCOL;
MACRO_MACE MACE_XMTFS_MORE;
MACRO_MACE MACE_XMTFS_ONE;
MACRO_MACE MACE_XMTFS_RTRY;
MACRO_MACE MACE_XMTFS_UFLO;
MACRO_MACE MACE_XMTFS_XMTSV;
MACRO_MACE MACE_XMTRC_EXDEF;
MACRO_MACE MACE_XMTRC_XMTRC;
MACRO_MAC MAC_INIT;
MACRO_MAC MAC_INST;
MACRO_MADE MADE_FP;
MACRO_MADV MADV_DONTNEED;
MACRO_MADV MADV_FREE;
MACRO_MADV MADV_NORMAL;
MACRO_MADV MADV_RANDOM;
MACRO_MADV MADV_SEQUENTIAL;
MACRO_MADV MADV_WILLNEED;
MACRO_MAGIC_BYTES MAGIC_BYTES;
MACRO_MAPBLOCKOFF MAPBLOCKMASK;
MACRO_MAPBLOCKOFF MAPBLOCKOFF;
MACRO_MAPBLOCKSHIFT MAPBLOCKSHIFT;
MACRO_MAPBLOCKSIZE MAPBLOCKSIZE;
MACRO_MAPINOK MAPINOK;
MACRO_MAP MAP_ANON;
MACRO_MAP MAP_ANONYMOUS;
MACRO_MAP_FAILED MAP_FAILED;
MACRO_MAP MAP_FIXED;
MACRO_MAP MAP_NORESERVE;
MACRO_MAP MAP_PRIVATE;
MACRO_MAP MAP_RENAME;
MACRO_MAP MAP_SHARED;
MACRO_MAP MAP_TYPE;
MACRO_MAP_TYPE1 MAP_TYPE1;
MACRO_MAP_TYPE1 MAP_TYPE1_LEN;
MACRO_MAP_TYPE1 MAP_TYPE2;
MACRO_MAP_TYPE1 MAP_TYPE2_LEN;
MACRO_CLASS_CODE MASS_STORAGE_CLASS_CODE;
MACRO_MASTER MASTER_ONLY;
MACRO_ADDRSORT MAXADDR;
MACRO_MAXADDRS MAXADDRS;
MACRO_MAXALIASES MAXALIASES;
MACRO_USRMIN MAXAPUSH;
MACRO_MAXASYNCHIO MAXASYNCHIO;
MACRO_FMAXEXP MAXBEXP;
MACRO_MAXBLKS MAXBLKS;
MACRO_MAXBOFFSET MAXBMASK;
MACRO_MAXBOFFSET MAXBOFFSET;
MACRO_MAXBSHIFT MAXBSHIFT;
MACRO_MAXBSIZE MAXBSIZE;
MACRO_MAXBSIZE_UNKNOWN MAXBSIZE_UNKNOWN;
MACRO_MAXCALLBACK MAXCALLBACK;
MACRO_MAXCDNAME MAXCDNAME;
MACRO_MAXCON MAXCON;
MACRO_MAXCOOKIE MAXCOOKIE_SIZE;
MACRO_MAXCSBUFS MAXCSBUFS;
MACRO_MAXDEVS MAXDEVS;
MACRO_MAXDFLSRCH MAXDFLSRCH;
MACRO_DEFINACT MAXDLEN;
MACRO_PACKETSZ MAXDNAME;
MACRO_MAXDNSRCH MAXDNSRCH;
MACRO_MAXDOS MAXDOS;
MACRO_MAXEND MAXEND;
MACRO_MAXERRMSGLEN MAXERRMSGLEN;
MACRO_MAXFIDSZ MAXFIDSZ;
MACRO_MAXFPQ MAXFPQ;
MACRO_MAXFRAG MAXFRAG;
MACRO_MAXPHASE MAXFREQ;
MACRO_DEFINACT MAXGLEN;
MACRO_MAXGLITCH MAXGLITCH;
MACRO_MAXHOSTNAMELEN MAXHOSTNAMELEN;
MACRO_MAXHSOFFSET MAXHSMASK;
MACRO_MAXHSOFFSET MAXHSOFFSET;
MACRO_MAXIOCBSZ MAXIOCBSZ;
MACRO_MAXIPL MAXIPL;
MACRO_MAXISOOFFSET MAXISOMASK;
MACRO_MAXISOOFFSET MAXISOOFFSET;
MACRO_MAXLINESIZE MAXLINESIZE;
MACRO_MAXLINK MAXLINK;
MACRO_MAXLNS MAXLNS;
MACRO_MAXMAJ MAXMAJ;
MACRO_MAXMAJ32 MAXMAJ32;
MACRO_MAXMAPNAMELEN MAXMAPNAMELEN;
MACRO_MAXMIN MAXMIN;
MACRO_MAXMIN32 MAXMIN32;
MACRO_MAXMNTLEN MAXMNTLEN;
MACRO_MAXMODCONFNAME MAXMODCONFNAME;
MACRO_MAXMSGLEN MAXMSGLEN;
MACRO_MAXSYMLINKS MAXNAMELEN;
MACRO_MAXNETNAMELEN MAXNETNAMELEN;
MACRO_MAXNS MAXNS;
MACRO_T MAXOFFSET_T;
MACRO_T MAXOFF_T;
MACRO_MAXPACKETSIZE MAXPACKETSIZE;
MACRO_PREMOTE MAXPATHLEN;
MACRO_MAXPHASE MAXPHASE;
MACRO_MAXPROJID MAXPROJID;
MACRO_MAXRESOLVSORT MAXRESOLVSORT;
MACRO_MAXSEC MAXSEC;
MACRO_MAXSIG MAXSIG;
MACRO_MAXSTRMSG MAXSTRMSG;
MACRO_MAXSYMLINKS MAXSYMLINKS;
MACRO_MAXSYSARGS MAXSYSARGS;
MACRO_MAXTC MAXTC;
MACRO_MAXTTL MAXTTL;
MACRO_MAXUID MAXUID;
MACRO_RUSERSVERS_0 MAXUSERS;
MACRO_MAXVIFS MAXVIFS;
MACRO_MAXXDRHOSTNAMELEN MAXXDRHOSTNAMELEN;
MACRO_MAXYPDATALEN MAXYPDATALEN;
MACRO_ACKTIMEOUT MAX_ACKTIMEOUT;
MACRO_MAX_KEVENTS MAX_ACL_ENTRIES;
MACRO_MAX_ATTR MAX_ATTR_LEN;
MACRO_MAX_AUDIO MAX_AUDIO_DEV_LEN;
MACRO_MAX_AUTH MAX_AUTH_BYTES;
MACRO_BUSYTIMEOUT MAX_BUSYTIMEOUT;
MACRO_MAX_INPUT MAX_CANON;
MACRO_MAX_COMMAND MAX_COMMAND;
MACRO_MAX_HDR MAX_COMP_HDR;
MACRO_DATASETUP MAX_DATASETUP;
MACRO_DRAIN_SIZE MAX_DRAIN_SIZE;
MACRO_ERRTIMEOUT MAX_ERRTIMEOUT;
MACRO_MAX_FCODE MAX_FCODE_SIZE;
MACRO_MAX_FIFO MAX_FIFO_FLAG;
MACRO_MAX_PATH MAX_FILEID;
MACRO_FORM_COMMAND MAX_FORM_COMMAND;
MACRO_MAX_FRAME MAX_FRAME_SIZE;
MACRO_MAX_GRANT MAX_GRANT_LOCKS;
MACRO_MAX_NAME MAX_GSS_MECH;
MACRO_MAX_NAME MAX_GSS_NAME;
MACRO_MAX_HDR MAX_HDR;
MACRO_HIWATER MAX_HIWATER;
MACRO_MAX_HWC MAX_HWC_LINESIZE;
MACRO_MAX_INPUT MAX_INPUT;
MACRO_MAX_IPOPTLEN MAX_IPOPTLEN;
MACRO_MAX_KEVENTS MAX_KEVENTS;
MACRO_MAX_MACHINE MAX_MACHINE_NAME;
MACRO_MAX_MNTOPT_STR MAX_MNTOPT_STR;
MACRO_MAX_MNTOPT MAX_MNTOPT_TAG;
MACRO_MAX_NAME MAX_NAME_LEN;
MACRO_MAX_NETOBJ MAX_NETOBJ_SZ;
MACRO_MAX_PASSWD MAX_PASSWD_LENGTH;
MACRO_MAX_PATH MAX_PATH_LEN;
MACRO_MAX_PORTS MAX_PORTS;
MACRO_MAX_TREE MAX_PTR_IN_PRV;
MACRO_MAX_QOP MAX_QOPS_PER_MECH;
MACRO_MAX_QOP MAX_QOP_NUM_PAIRS;
MACRO_MAX_RTPR MAX_RTPR;
MACRO_RX_FIFO MAX_RX_FIFO;
MACRO_MAX_SACK MAX_SACK_BLK;
MACRO_MAX_SHR MAX_SHR_OWNER_LEN;
MACRO_MAX_STACK MAX_STACK_BUF;
MACRO_STATES MAX_STATES;
MACRO_STBWIDTH MAX_STBWIDTH;
MACRO_MAX_THROTTLE MAX_THROTTLE;
MACRO_MAX_TIMEOUT MAX_TIMEOUT;
MACRO_MAX_TRACE MAX_TRACE_NPROCS;
MACRO_MAX_TREE MAX_TREE_DEPTH;
MACRO_MAX_QOP MAX_UINT;
MACRO_MAX_QOP MAX_ULONG;
MACRO_MAX_QOP MAX_USHORT;
MACRO_MAX_U MAX_U_OFFSET_T;
MACRO_MAX_U MAX_U_OFF_T;
MACRO_MA MA_ANON;
MACRO_MA MA_BREAK;
MACRO_MA MA_EXEC;
MACRO_MA MA_ISM;
MACRO_MA MA_READ;
MACRO_MA MA_SHARED;
MACRO_SR1 MA_SR1;
MACRO_MA MA_STACK;
MACRO_MA MA_WRITE;
MACRO_MBB MBB_MAGIC;
MACRO_UCHAR MB_LEN_MAX;
MACRO_MCErr MCErr_Already;
MACRO_MCErr MCErr_Command;
MACRO_MCErr MCErr_Invalid;
MACRO_MCErr MCErr_None;
MACRO_MCErr MCErr_Overflow;
MACRO_MCL MCL_CURRENT;
MACRO_MCL MCL_FUTURE;
MACRO_SCHR4 MCOR1;
MACRO_MCOR2 MCOR2;
MACRO_MC MC_ADVISE;
MACRO_MC_NOCANON MC_CANONQUERY;
MACRO_MC_NOCANON MC_DOCANON;
MACRO_MC_NO MC_DO_CANON;
MACRO_MC MC_LOCK;
MACRO_MC MC_LOCKAS;
MACRO_MC_NOCANON MC_NOCANON;
MACRO_MC_NOCANON MC_NOIFLAG;
MACRO_MC_NOCANON MC_NOLFLAG;
MACRO_MC_NOCANON MC_NOOFLAG;
MACRO_MC_NO MC_NO_CANON;
MACRO_MC_NO MC_PART_CANON;
MACRO_MC_NOCANON MC_SERVICEDEF;
MACRO_MC_NOCANON MC_SERVICEIMM;
MACRO_MC MC_SYNC;
MACRO_MC MC_UNLOCK;
MACRO_MC MC_UNLOCKAS;
MACRO_MD5 MD5_CONST_0;
MACRO_MD5 MD5_CONST_1;
MACRO_MD5 MD5_CONST_10;
MACRO_MD5 MD5_CONST_11;
MACRO_MD5 MD5_CONST_12;
MACRO_MD5 MD5_CONST_13;
MACRO_MD5 MD5_CONST_14;
MACRO_MD5 MD5_CONST_15;
MACRO_MD5 MD5_CONST_16;
MACRO_MD5 MD5_CONST_17;
MACRO_MD5 MD5_CONST_18;
MACRO_MD5 MD5_CONST_19;
MACRO_MD5 MD5_CONST_2;
MACRO_MD5 MD5_CONST_20;
MACRO_MD5 MD5_CONST_21;
MACRO_MD5 MD5_CONST_22;
MACRO_MD5 MD5_CONST_23;
MACRO_MD5 MD5_CONST_24;
MACRO_MD5 MD5_CONST_25;
MACRO_MD5 MD5_CONST_26;
MACRO_MD5 MD5_CONST_27;
MACRO_MD5 MD5_CONST_28;
MACRO_MD5 MD5_CONST_29;
MACRO_MD5 MD5_CONST_3;
MACRO_MD5 MD5_CONST_30;
MACRO_MD5 MD5_CONST_31;
MACRO_MD5 MD5_CONST_32;
MACRO_MD5 MD5_CONST_33;
MACRO_MD5 MD5_CONST_34;
MACRO_MD5 MD5_CONST_35;
MACRO_MD5 MD5_CONST_36;
MACRO_MD5 MD5_CONST_37;
MACRO_MD5 MD5_CONST_38;
MACRO_MD5 MD5_CONST_39;
MACRO_MD5 MD5_CONST_4;
MACRO_MD5 MD5_CONST_40;
MACRO_MD5 MD5_CONST_41;
MACRO_MD5 MD5_CONST_42;
MACRO_MD5 MD5_CONST_43;
MACRO_MD5 MD5_CONST_44;
MACRO_MD5 MD5_CONST_45;
MACRO_MD5 MD5_CONST_46;
MACRO_MD5 MD5_CONST_47;
MACRO_MD5 MD5_CONST_48;
MACRO_MD5 MD5_CONST_49;
MACRO_MD5 MD5_CONST_5;
MACRO_MD5 MD5_CONST_50;
MACRO_MD5 MD5_CONST_51;
MACRO_MD5 MD5_CONST_52;
MACRO_MD5 MD5_CONST_53;
MACRO_MD5 MD5_CONST_54;
MACRO_MD5 MD5_CONST_55;
MACRO_MD5 MD5_CONST_56;
MACRO_MD5 MD5_CONST_57;
MACRO_MD5 MD5_CONST_58;
MACRO_MD5 MD5_CONST_59;
MACRO_MD5 MD5_CONST_6;
MACRO_MD5 MD5_CONST_60;
MACRO_MD5 MD5_CONST_61;
MACRO_MD5 MD5_CONST_62;
MACRO_MD5 MD5_CONST_63;
MACRO_MD5 MD5_CONST_7;
MACRO_MD5 MD5_CONST_8;
MACRO_MD5 MD5_CONST_9;
MACRO_MD5 MD5_INIT_CONST_1;
MACRO_MD5 MD5_INIT_CONST_2;
MACRO_MD5 MD5_INIT_CONST_3;
MACRO_MD5 MD5_INIT_CONST_4;
MACRO_MD5 MD5_SHIFT_11;
MACRO_MD5 MD5_SHIFT_12;
MACRO_MD5 MD5_SHIFT_13;
MACRO_MD5 MD5_SHIFT_14;
MACRO_MD5 MD5_SHIFT_21;
MACRO_MD5 MD5_SHIFT_22;
MACRO_MD5 MD5_SHIFT_23;
MACRO_MD5 MD5_SHIFT_24;
MACRO_MD5 MD5_SHIFT_31;
MACRO_MD5 MD5_SHIFT_32;
MACRO_MD5 MD5_SHIFT_33;
MACRO_MD5 MD5_SHIFT_34;
MACRO_MD5 MD5_SHIFT_41;
MACRO_MD5 MD5_SHIFT_42;
MACRO_MD5 MD5_SHIFT_43;
MACRO_MD5 MD5_SHIFT_44;
MACRO_MDB MDB_API_VERSION;
MACRO_MDB_SYM MDB_OBJ_EVERY;
MACRO_MDB_SYM MDB_OBJ_EXEC;
MACRO_MDB_SYM MDB_OBJ_RTLD;
MACRO_MDB_SYM MDB_OPT_CLRBITS;
MACRO_MDB_SYM MDB_OPT_SETBITS;
MACRO_MDB_SYM MDB_OPT_STR;
MACRO_MDB_SYM MDB_OPT_UINT64;
MACRO_MDB_SYM MDB_OPT_UINTPTR;
MACRO_MDB_SYM MDB_SYM_EXACT;
MACRO_MDB_SYM MDB_SYM_FUZZY;
MACRO_MDB_SYM MDB_SYM_NAMLEN;
$3C9CBA2A05837AB5EE7067EF57B45517 MDB_TYPE_CHAR;
$3C9CBA2A05837AB5EE7067EF57B45517 MDB_TYPE_IMMEDIATE;
$3C9CBA2A05837AB5EE7067EF57B45517 MDB_TYPE_STRING;
MACRO_MDI MDI_16_PIX;
MACRO_MDI MDI_32_PIX;
MACRO_MDI MDI_8_PIX;
MACRO_MDI_NMAPS MDI_AUTOOFFSET;
MACRO_MDI MDI_BLEND_LEFT_CLUT1;
MACRO_MDI MDI_BLEND_LEFT_CLUT2;
MACRO_MDI MDI_BLEND_LEFT_CLUT3;
MACRO_MDI MDI_BLEND_LEFT_DIRECT;
MACRO_MDI MDI_BLEND_RIGHT_CLUT1;
MACRO_MDI MDI_BLEND_RIGHT_CLUT2;
MACRO_MDI MDI_BLEND_RIGHT_CLUT3;
MACRO_MDI MDI_BLEND_RIGHT_DIRECT;
MACRO_MDI_CCR MDI_CCR_CLKSEL0_ENABLE;
MACRO_MDI_CCR MDI_CCR_CLKSEL1_ENABLE;
MACRO_MDI_CCR MDI_CCR_DATABITS;
MACRO_MDI_CCR MDI_CCR_DATASHIFT;
MACRO_MDI_CCR MDI_CCR_PCGASXSEL;
MACRO_MDI_CCR MDI_CCR_PCGAXS;
MACRO_MDI_CCR MDI_CCR_PCGCLK_ENABLE;
MACRO_MDI_CCR MDI_CCR_PCGSCLK;
MACRO_MDI_CCR MDI_CCR_PCGSDAT;
MACRO_MDI_CCR MDI_CCR_PCGSDAT_DIRSEL;
MACRO_MDI_NMAPS MDI_CHUNKY_BGR_MAP;
MACRO_MDI_NMAPS MDI_CHUNKY_XBGR_MAP;
MACRO_MDI MDI_CLUT1;
MACRO_MDI_NMAPS MDI_CLUT1OFFSET;
MACRO_MDI MDI_CLUT2;
MACRO_MDI_NMAPS MDI_CLUT2OFFSET;
MACRO_MDI MDI_CLUT3;
MACRO_MDI_NMAPS MDI_CLUT3OFFSET;
MACRO_MDI MDI_CLUT_ALL;
MACRO_MDI_HCT MDI_CMAP_ENTRIES;
MACRO_MDI_HCT MDI_CMAP_MASK;
MACRO_MDI_HCT MDI_CSC;
MACRO_MDI_NMAPS MDI_CTLREG_MAP;
MACRO_MDI_NMAPS MDI_CURSOFFSET;
MACRO_MDI_NMAPS MDI_CURSOR_MAP;
MACRO_MDI_HCT MDI_CURS_ALPHAMASK;
MACRO_MDI_HCT MDI_CURS_DBUF;
MACRO_MDI_HCT MDI_CURS_ENABLE;
MACRO_MDI_HCT MDI_CURS_ENTRIES;
MACRO_MDI_HCT MDI_CURS_PIXVAL;
MACRO_MDI_HCT MDI_CURS_SELECT;
MACRO_MDI_HCT MDI_CURS_SIZE;
MACRO_MDI_HCT MDI_CURS_XMASK;
MACRO_MDI_HCT MDI_CURS_YMASK;
MACRO_MDI_NMAPS MDI_DACOFFSET;
MACRO_MDI_NMAPS MDI_DEFAULT_DEPTH;
MACRO_MDI_NMAPS MDI_DEFAULT_HEIGHT;
MACRO_MDI_NMAPS MDI_DEFAULT_WIDTH;
MACRO_MDI_NMAPS MDI_DIRECT_MAP;
MACRO_MDI MDI_DISABLE_VIRQ;
MACRO_MDI MDI_ENABLE_VIRQ;
MACRO_MDI_NMAPS MDI_FSR_UNIMP;
MACRO_MDI_NMAPS MDI_FSR_WERR;
MACRO_MDI MDI_GAMMALUT;
MACRO_MDI MDI_GAMMA_CORRECT;
MACRO_MDI MDI_GAMMA_CORRECTION_OFF;
MACRO_MDI MDI_GAMMA_CORRECTION_ON;
MACRO_MDI MDI_GET_BUFFER_INFO;
MACRO_MDI MDI_GET_CFGINFO;
MACRO_MDI MDI_GET_CLUT;
MACRO_MDI MDI_GET_DEGAMMALUT;
MACRO_MDI MDI_GET_DIAGINFO;
MACRO_MDI MDI_GET_GAMMALUT;
MACRO_MDI MDI_GET_XLUT;
MACRO_MDI_HCT MDI_HBC;
MACRO_MDI_HCT MDI_HBS;
MACRO_MDI_HCT MDI_HCT;
MACRO_MDI_HCT MDI_HSC;
MACRO_MDI_HCT MDI_HSS;
MACRO_MDI_CCR MDI_ICS_NREGS;
MACRO_MDI_NMAPS MDI_MAPSIZE;
MACRO_MDI_NMAPS MDI_MAX;
MACRO_MDI_NMAPS MDI_MAX_CLUTS;
MACRO_MDI_NMAPS MDI_MCR_16PIX;
MACRO_MDI_NMAPS MDI_MCR_32PIX;
MACRO_MDI_NMAPS MDI_MCR_8PIX;
MACRO_MDI_NMAPS MDI_MCR_PIXPIPE0;
MACRO_MDI_NMAPS MDI_MCR_PIXPIPE1;
MACRO_MDI_NMAPS MDI_MCR_PIXPIPE2;
MACRO_MDI_NMAPS MDI_MCR_PIXPIPE3;
MACRO_MDI_NMAPS MDI_MCS_PIXSHIFT;
MACRO_MDI_NMAPS MDI_MSR_FAULT;
MACRO_MDI_NMAPS MDI_MSR_INTPEND;
MACRO_MDI_NMAPS MDI_MSR_VINT;
MACRO_MDI_NMAPS MDI_NMAPS;
MACRO_MDI_NMAPS MDI_PAGESIZE;
MACRO_MDI_NMAPS MDI_PLANAR_B32_MAP;
MACRO_MDI_NMAPS MDI_PLANAR_C16_MAP;
MACRO_MDI_NMAPS MDI_PLANAR_G32_MAP;
MACRO_MDI_NMAPS MDI_PLANAR_R32_MAP;
MACRO_MDI_NMAPS MDI_PLANAR_X16_MAP;
MACRO_MDI_NMAPS MDI_PLANAR_X32_MAP;
MACRO_MDI_NMAPS MDI_PPR_GREY;
MACRO_MDI_NMAPS MDI_PPR_LEFT;
MACRO_MDI_NMAPS MDI_PPR_LEFTSHIFT;
MACRO_MDI_NMAPS MDI_PPR_LUT1;
MACRO_MDI_NMAPS MDI_PPR_LUT2;
MACRO_MDI_NMAPS MDI_PPR_LUT3;
MACRO_MDI_NMAPS MDI_PPR_RIGHT;
MACRO_MDI_NMAPS MDI_PPR_RIGHTSHIFT;
MACRO_MDI_NMAPS MDI_REGOFFSET;
MACRO_MDI MDI_RESET;
MACRO_MDI_NMAPS MDI_RSR_IMPLMASK;
MACRO_MDI_NMAPS MDI_RSR_REVMASK;
MACRO_MDI MDI_SET_CLUT;
MACRO_MDI MDI_SET_COUNTERS;
MACRO_MDI MDI_SET_CURSOR;
MACRO_MDI MDI_SET_DEGAMMALUT;
MACRO_MDI MDI_SET_GAMMALUT;
MACRO_MDI MDI_SET_PIXELMODE;
MACRO_MDI MDI_SET_PPR;
MACRO_MDI MDI_SET_RESOLUTION;
MACRO_MDI MDI_SET_XLUT;
MACRO_MDI_NMAPS MDI_SHDW_VRT_MAP;
MACRO_MDI MDI_SOURCE_LEFT_B;
MACRO_MDI MDI_SOURCE_LEFT_G;
MACRO_MDI MDI_SOURCE_LEFT_R;
MACRO_MDI MDI_SOURCE_LEFT_TRUE;
MACRO_MDI MDI_SOURCE_RIGHT_B;
MACRO_MDI MDI_SOURCE_RIGHT_G;
MACRO_MDI MDI_SOURCE_RIGHT_R;
MACRO_MDI MDI_SOURCE_RIGHT_X;
MACRO_MDI_NMAPS MDI_TMS0_IVS;
MACRO_MDI_NMAPS MDI_TMS0_MUX_STATE;
MACRO_MDI_NMAPS MDI_TMS1_CET;
MACRO_MDI_NMAPS MDI_TMS1_CST;
MACRO_MDI_CCR MDI_TST_BLUE;
MACRO_MDI_CCR MDI_TST_GREEN;
MACRO_MDI_CCR MDI_TST_RED;
MACRO_MDI_HCT MDI_VBC;
MACRO_MDI_HCT MDI_VBS;
MACRO_MDI_HCT MDI_VCT;
MACRO_MDI MDI_VRT_CNTL;
MACRO_MDI_HCT MDI_VSC;
MACRO_MDI_HCT MDI_VSS;
MACRO_MDI_HCT MDI_XCC;
MACRO_MDI_HCT MDI_XCS;
MACRO_MDI MDI_XLUT;
MACRO_MDI_NMAPS MDI_XLUTOFFSET;
MACRO_MD MD_ACL;
MACRO_MD MD_ACLDIR;
MACRO_MD MD_CREATEDONE;
MACRO_MD MD_FASTSYMLNK;
MACRO_MD MD_FILE;
MACRO_MD_FIXED MD_FIXED;
MACRO_MD MD_FREE;
MACRO_MD MD_INVALREADDIR;
MACRO_MD MD_LOCALCTIME;
MACRO_MD MD_LOCALFILENO;
MACRO_MD MD_LOCALMTIME;
MACRO_MD MD_MAPPING;
MACRO_MD MD_NEEDATTRS;
MACRO_MD MD_PACKED;
MACRO_MD MD_POPULATED;
MACRO_MD MD_PUSHDONE;
MACRO_MD MD_PUTPAGE;
MACRO_MEDIA MEDIA_ACCESS_DELAY;
MACRO_ERROR MEM_ERROR;
MACRO_FAIL MEM_FAIL;
MACRO_MEM_SPEED MEM_SPEED_MAX;
MACRO_MEM_SPEED MEM_SPEED_MIN;
MACRO_MEM MEM_VTOP;
MACRO_METABIT METABIT;
MACRO_METABIT METAMASK;
MACRO_META META_FIRST;
MACRO_META META_LAST;
MACRO_ME ME_AGE;
MACRO_ME ME_CANCEL;
MACRO_ME ME_FREE;
MACRO_ME ME_HASH;
MACRO_ME ME_LIST;
MACRO_ME ME_ROLL;
MACRO_MFB MFB_CMAP_ENTRIES;
MACRO_MFB MFB_CR_CURSOR;
MACRO_MFB MFB_CR_DIV1;
MACRO_MFB MFB_CR_DIV2;
MACRO_MFB MFB_CR_DIV3;
MACRO_MFB MFB_CR_DIV4;
MACRO_MFB MFB_CR_INTEN;
MACRO_MFB MFB_CR_MASTER;
MACRO_MFB MFB_CR_TEST;
MACRO_MFB MFB_CR_VIDEO;
MACRO_MFB MFB_CR_X0;
MACRO_MFB MFB_CR_X1;
MACRO_MFB MFB_CR_X2;
MACRO_MFB MFB_ID_MASK;
MACRO_MFB MFB_ID_VALUE;
MACRO_MFB MFB_OFF_DUMMY;
MACRO_MFB MFB_OFF_FB;
MACRO_MFB MFB_OFF_ID;
MACRO_MFB MFB_OFF_REG;
MACRO_MFB MFB_REG_MMAP_OFFSET;
MACRO_MFB MFB_SR_1024_768;
MACRO_MFB MFB_SR_1152_900;
MACRO_MFB MFB_SR_1280_1024;
MACRO_MFB MFB_SR_1600_1280;
MACRO_MFB MFB_SR_ID_COLOR;
MACRO_MFB MFB_SR_ID_MASK;
MACRO_MFB MFB_SR_ID_MONO;
MACRO_MFB MFB_SR_ID_MONO_ECL;
MACRO_MFB MFB_SR_INT;
MACRO_MFB MFB_SR_RES_MASK;
MACRO_MFM MFM;
MACRO_MHIOC MHIOC;
MACRO_MHIOCENFAILFAST MHIOCENFAILFAST;
MACRO_MHIOCGRP MHIOCGRP_CLEAR;
MACRO_MHIOCGRP MHIOCGRP_INKEYS;
MACRO_MHIOCGRP MHIOCGRP_INRESV;
MACRO_MHIOCGRP MHIOCGRP_PREEMPT;
MACRO_MHIOCGRP MHIOCGRP_PREEMPTANDABORT;
MACRO_MHIOCGRP MHIOCGRP_REGISTER;
MACRO_MHIOCGRP MHIOCGRP_RESERVE;
MACRO_MHIOCQRESERVE MHIOCQRESERVE;
MACRO_MHIOCRELEASE MHIOCRELEASE;
MACRO_MHIOCREREGISTERDEVID MHIOCREREGISTERDEVID;
MACRO_MHIOCSTATUS MHIOCSTATUS;
MACRO_MHIOCTKOWN MHIOCTKOWN;
MACRO_MHIOC_RESV MHIOC_RESV_KEY_SIZE;
MACRO_MIB2 MIB2_AT;
MACRO_MIB2 MIB2_CMOT;
MACRO_MIB2 MIB2_EGP;
MACRO_MIB2 MIB2_ICMP;
MACRO_MIB2 MIB2_ICMP6;
MACRO_MIB2 MIB2_INTERFACES;
MACRO_MIB2 MIB2_IP;
MACRO_MIB2 MIB2_IP6;
MACRO_MIB2_IP MIB2_IP6_ADDR;
MACRO_MIB2_IP MIB2_IP6_MEDIA;
MACRO_MIB2_IP MIB2_IP6_ROUTE;
MACRO_MIB2_IP_20 MIB2_IP_20;
MACRO_MIB2_IP_20 MIB2_IP_21;
MACRO_MIB2_IP_20 MIB2_IP_22;
MACRO_MIB2_IP MIB2_IP_ADDR;
MACRO_MIB2_IP MIB2_IP_MEDIA;
MACRO_MIB2_IP MIB2_IP_ROUTE;
MACRO_MIB2 MIB2_RANGE_END;
MACRO_MIB2 MIB2_RANGE_START;
MACRO_MIB2 MIB2_SNMP;
MACRO_MIB2 MIB2_SYSTEM;
MACRO_MIB2 MIB2_TCP;
MACRO_MIB2 MIB2_TCP6;
MACRO_MIB2_IP_20 MIB2_TCP6_CONN;
MACRO_MIB2_IP_20 MIB2_TCP_13;
MACRO_MIB2_IP_20 MIB2_TCP_CONN;
MACRO_MIB2_IP_20 MIB2_TCP_closeWait;
MACRO_MIB2_IP_20 MIB2_TCP_closed;
MACRO_MIB2_IP_20 MIB2_TCP_closing;
MACRO_MIB2_IP_20 MIB2_TCP_deleteTCB;
MACRO_MIB2_IP_20 MIB2_TCP_established;
MACRO_MIB2_IP_20 MIB2_TCP_finWait1;
MACRO_MIB2_IP_20 MIB2_TCP_finWait2;
MACRO_MIB2_IP_20 MIB2_TCP_lastAck;
MACRO_MIB2_IP_20 MIB2_TCP_listen;
MACRO_MIB2_IP_20 MIB2_TCP_synReceived;
MACRO_MIB2_IP_20 MIB2_TCP_synSent;
MACRO_MIB2_IP_20 MIB2_TCP_timeWait;
MACRO_MIB2 MIB2_TRANSMISSION;
MACRO_MIB2 MIB2_UDP;
MACRO_MIB2 MIB2_UDP6;
MACRO_MIB2_IP_20 MIB2_UDP6_ENTRY;
MACRO_MIB2_IP_20 MIB2_UDP_5;
MACRO_MIB2_IP_20 MIB2_UDP_ENTRY;
MACRO_MIB2_IP_20 MIB2_UDP_connected;
MACRO_MIB2_IP_20 MIB2_UDP_idle;
MACRO_MIB2_IP_20 MIB2_UDP_unbound;
MACRO_MIB2_IP_20 MIB2_UDP_unknown;
MACRO_MICROSEC MICROSEC;
MACRO_SEC MILLISEC;
MACRO_MINBSIZE MINBSIZE;
MACRO_MINFRAME MINFRAME;
MACRO_MINFRAME32 MINFRAME32;
MACRO_MINMASK MINMASK;
MACRO_MINPSIZE MINPSIZE;
MACRO_MINSEC MINSEC;
MACRO_MINSHIFT MINSHIFT;
MACRO_MINSIGSTKSZ MINSIGSTKSZ;
MACRO_MINSPERHOUR MINSPERHOUR;
MACRO_MINS MINS_PER_HOUR;
MACRO_ACKTIMEOUT MIN_ACKTIMEOUT;
MACRO_MIN_ACL MIN_ACL_ENTRIES;
MACRO_BUSYTIMEOUT MIN_BUSYTIMEOUT;
MACRO_DATASETUP MIN_DATASETUP;
MACRO_DRAIN_SIZE MIN_DRAIN_SIZE;
MACRO_ERRTIMEOUT MIN_ERRTIMEOUT;
MACRO_FORM_COMMAND MIN_FORM_COMMAND;
MACRO_HIWATER MIN_HIWATER;
MACRO_MIN_INT MIN_INT;
MACRO_LENGTH MIN_LINKTARGET_LENGTH;
MACRO_LOG_SENSE_LENGTH MIN_LOG_SENSE_LENGTH;
MACRO_MIN_INT MIN_LONG;
MACRO_LENGTH MIN_LONGLINK_AC_LENGTH;
MACRO_MIN_LONGLINK MIN_LONGLINK_MFC_LENGTH;
MACRO_MIN_LONGLINK MIN_LONGLINK_MFC_NREGS;
MACRO_MIN_LOWWATER MIN_LOWWATER;
MACRO_MIN_LOWWATER MIN_RTPR;
MACRO_RX_FIFO MIN_RX_FIFO;
MACRO_MIN_INT MIN_SHORT;
MACRO_STATES MIN_STATES;
MACRO_STBWIDTH MIN_STBWIDTH;
MACRO_MIOC MIOC;
MACRO_ERROR MISS_ERROR;
MACRO_MI_HARD MI_ACL;
MACRO_MI_HARD MI_BINDINPROG;
MACRO_MI MI_COPY_IN;
MACRO_MI MI_COPY_OUT;
MACRO_MI_HARD MI_DIRECTIO;
MACRO_MI_HARD MI_DOWN;
MACRO_MI_HARD MI_DYNAMIC;
MACRO_MI_HARD MI_GRPID;
MACRO_MI_HARD MI_HARD;
MACRO_MI_INFO MI_INFO_ALL;
MACRO_MI_INFO MI_INFO_CNT;
MACRO_MI_INFO MI_INFO_ONE;
MACRO_MI_INFO MI_INSTALLED;
MACRO_MI_HARD MI_INT;
MACRO_MI_HARD MI_LINK;
MACRO_MI_HARD MI_LLOCK;
MACRO_MI_INFO MI_LOADED;
MACRO_MI_HARD MI_LOOPBACK;
MACRO_MI MI_MIN_DEV;
MACRO_MI_HARD MI_NOAC;
MACRO_MI_HARD MI_NOCTO;
MACRO_MI_HARD MI_NOPRINT;
MACRO_MI_HARD MI_PRINTED;
MACRO_MI_HARD MI_READDIR;
MACRO_MI_HARD MI_RPCTIMESYNC;
MACRO_MI_HARD MI_SEMISOFT;
MACRO_MI_HARD MI_SYMLINK;
MACRO_MMCODEC MMCODEC_ADL_ANLG;
MACRO_MMCODEC MMCODEC_ADL_DIG;
MACRO_MMCODEC MMCODEC_BSEL_128;
MACRO_MMCODEC MMCODEC_BSEL_256;
MACRO_MMCODEC MMCODEC_BSEL_64;
MACRO_MMCODEC MMCODEC_DCB;
MACRO_MMCODEC MMCODEC_DFR_11025;
MACRO_MMCODEC MMCODEC_DFR_16000;
MACRO_MMCODEC MMCODEC_DFR_18900;
MACRO_MMCODEC MMCODEC_DFR_22050;
MACRO_MMCODEC MMCODEC_DFR_27429;
MACRO_MMCODEC MMCODEC_DFR_32000;
MACRO_MMCODEC MMCODEC_DFR_33075;
MACRO_MMCODEC MMCODEC_DFR_37800;
MACRO_MMCODEC MMCODEC_DFR_44100;
MACRO_MMCODEC MMCODEC_DFR_48000;
MACRO_MMCODEC MMCODEC_DFR_5513;
MACRO_MMCODEC MMCODEC_DFR_6615;
MACRO_MMCODEC MMCODEC_DFR_8000;
MACRO_MMCODEC MMCODEC_DFR_9600;
MACRO_MMCODEC MMCODEC_DF_16_BIT;
MACRO_MMCODEC MMCODEC_DF_ALAW;
MACRO_MMCODEC MMCODEC_DF_ULAW;
MACRO_MMCODEC MMCODEC_ENL;
MACRO_MMCODEC MMCODEC_IS_LINE;
MACRO_MMCODEC MMCODEC_IS_MIC;
MACRO_MMCODEC MMCODEC_LEN;
MACRO_MMCODEC MMCODEC_MAX_ATEN;
MACRO_MMCODEC MMCODEC_MAX_DEV_ATEN;
MACRO_MMCODEC MMCODEC_MAX_GAIN;
MACRO_MMCODEC MMCODEC_MA_MAX_ATEN;
MACRO_MMCODEC MMCODEC_MA_MIN_ATEN;
MACRO_MMCODEC MMCODEC_MCK_EXT;
MACRO_MMCODEC MMCODEC_MCK_MSTR;
MACRO_MMCODEC MMCODEC_MCK_XTAL1;
MACRO_MMCODEC MMCODEC_MCK_XTAL2;
MACRO_MMCODEC MMCODEC_MIN_ATEN;
MACRO_MMCODEC MMCODEC_MIN_GAIN;
MACRO_MMCODEC MMCODEC_OM0_ENABLE;
MACRO_MMCODEC MMCODEC_OM1_ENABLE;
MACRO_MMCODEC MMCODEC_OVR;
MACRO_MMCODEC MMCODEC_OVR_CLR;
MACRO_MMCODEC MMCODEC_SM;
MACRO_MMCODEC MMCODEC_SRE;
MACRO_MMCODEC MMCODEC_ST_MONO;
MACRO_MMCODEC MMCODEC_ST_STEREO;
MACRO_MMCODEC MMCODEC_VS0;
MACRO_MMCODEC MMCODEC_VS1;
MACRO_MMCODEC MMCODEC_XCLK;
MACRO_MMCODEC MMCODEC_XEN;
MACRO_MM_STD MM_ACTION;
MACRO_MM_STD MM_GET;
MACRO_MM MM_HALT;
MACRO_MM MM_MXACTLN;
MACRO_MM MM_MXLABELLN;
MACRO_MM MM_MXTAGLN;
MACRO_MM MM_MXTXTLN;
MACRO_MM MM_NOCON;
MACRO_MM_STD MM_NOCONSOLE;
MACRO_MM_STD MM_NOGET;
MACRO_MM MM_NOMSG;
MACRO_MM MM_NOSEV;
MACRO_MM_STD MM_NOSTD;
MACRO_MM MM_NOTOK;
MACRO_MM MM_NRECOV;
MACRO_MM MM_NULL;
MACRO_MM MM_NULLACT;
MACRO_MM MM_NULLLBL;
MACRO_MM MM_NULLMC;
MACRO_MM MM_NULLSEV;
MACRO_MM MM_NULLTAG;
MACRO_MM MM_NULLTXT;
MACRO_MM MM_OK;
MACRO_MM MM_PRINT;
MACRO_MM MM_RECOVER;
MACRO_MM_STD MM_STD;
MACRO_MM_STD MM_SVCMD;
MACRO_MNTIOC MNTIOC;
MACRO_MNTIOC_NMNTS MNTIOC_CLRTAG;
MACRO_MNTIOC_NMNTS MNTIOC_GETDEVLIST;
MACRO_MNTIOC_NMNTS MNTIOC_NMNTS;
MACRO_MNTIOC_NMNTS MNTIOC_SETTAG;
MACRO_MNTMAXSTR MNTMAXSTR;
MACRO_MNT MNT_LINE_MAX;
MACRO_MNT MNT_TOOFEW;
MACRO_MNT MNT_TOOLONG;
MACRO_MNT MNT_TOOMANY;
MACRO_MODADDMAJBIND MODADDMAJBIND;
MACRO_MODRESERVED MODCONFIG;
MACRO_MODDEBUG MODDEBUG_ERRMSG;
MACRO_MODDEBUG MODDEBUG_KEEPTEXT;
MACRO_MODDEBUG MODDEBUG_LOADMSG;
MACRO_MODDEBUG MODDEBUG_LOADMSG2;
MACRO_MODDEBUG MODDEBUG_LOCKSYMBOLS;
MACRO_MODDEBUG MODDEBUG_NOAUL_DACF;
MACRO_MODDEBUG MODDEBUG_NOAUL_DRV;
MACRO_MODDEBUG MODDEBUG_NOAUL_EXEC;
MACRO_MODDEBUG MODDEBUG_NOAUL_FS;
MACRO_MODDEBUG MODDEBUG_NOAUL_MISC;
MACRO_MODDEBUG MODDEBUG_NOAUL_SCHED;
MACRO_MODDEBUG MODDEBUG_NOAUL_STR;
MACRO_MODDEBUG MODDEBUG_NOAUL_SYS;
MACRO_MODDEBUG MODDEBUG_NOAUTOUNLOAD;
MACRO_MODDEBUG MODDEBUG_NOPACK;
MACRO_MODDEBUG MODDEBUG_NOSYMS;
MACRO_MODDEBUG MODDEBUG_STUBBPT;
MACRO_MODDEBUG MODDEBUG_UNLOCKSYMBOLS;
MACRO_MODDEBUG MODDEBUG_USERDEBUG;
MACRO_MODEMASK MODEMASK;
MACRO_MODEM MODEM_CHANGE;
MACRO_MODEPAGE MODEPAGE_ALLPAGES;
MACRO_MODEPAGE MODEPAGE_CACHING;
MACRO_MODEPAGE MODEPAGE_CTRL_MODE;
MACRO_MODEPAGE MODEPAGE_DISCO_RECO;
MACRO_MODEPAGE MODEPAGE_INFO_EXCPT;
MACRO_MODEPAGE MODEPAGE_PDEVICE;
MACRO_MODEPAGE MODEPAGE_POWER_COND;
MACRO_MODEVENTS MODEVENTS;
MACRO_MODEVENTS_FLUSH MODEVENTS_FLUSH;
MACRO_MODEVENTS_FLUSH MODEVENTS_FLUSH_DUMP;
MACRO_MODEVENTS_FLUSH MODEVENTS_SET_DOOR_UPCALL_FILENAME;
MACRO_MODE_TRAPSIG MODE_ACK;
MACRO_MODE MODE_B;
MACRO_MODE MODE_C;
MACRO_MODE_DAD MODE_DAD_DPOFUA;
MACRO_MODE_DAD MODE_DAD_WP;
MACRO_MODE_TRAPSIG MODE_ECHO;
MACRO_MODE_TRAPSIG MODE_FLOW;
MACRO_MODE_TRAPSIG MODE_FORCE;
MACRO_MODE_TRAPSIG MODE_INBIN;
MACRO_MODE_TRAPSIG MODE_LIT_ECHO;
MACRO_MODE_TRAPSIG MODE_MASK;
MACRO_MODE_TRAPSIG MODE_OUTBIN;
MACRO_MODE MODE_S;
MACRO_MODE_TRAPSIG MODE_SOFT_TAB;
MACRO_MODE_STREAM MODE_STREAM;
MACRO_MODE_TRAPSIG MODE_TRAPSIG;
MACRO_MODGETDEVID MODGETDEVID;
MACRO_MODEVENTS MODGETFBNAME;
MACRO_MODREADSYSBIND MODGETMAJBIND;
MACRO_MODGETMINORNAME MODGETMINORNAME;
MACRO_MODGETNAME MODGETNAME;
MACRO_MODGETPATH MODGETPATH;
MACRO_MODGETPATHLEN MODGETPATHLEN;
MACRO_MODLOAD MODINFO;
MACRO_MODLOAD MODLOAD;
MACRO_MODMAXLINK MODMAXLINK;
MACRO_MODMAXLINKINFOLEN MODMAXLINKINFOLEN;
MACRO_MODMAXNAMELEN MODMAXNAMELEN;
MACRO_MODOPEN MODOPEN;
MACRO_MODREADSYSBIND MODREADSYSBIND;
MACRO_MODREREADDACF MODREREADDACF;
MACRO_MODRESERVED MODRESERVED;
MACRO_MODREV MODREV_1;
MACRO_MODSIZEOF MODSIZEOF_DEVID;
MACRO_MODSIZEOF_MINORNAME MODSIZEOF_MINORNAME;
MACRO_MODS MODS_NOUNLOAD;
MACRO_MODS MODS_WEAK;
MACRO_MODLOAD MODUNLOAD;
MACRO_MOD_OFFSET MOD_CLKA;
MACRO_MOD_OFFSET MOD_CLKB;
MACRO_MOD_OFFSET MOD_ESTERROR;
MACRO_MOD_SHARED MOD_EXCL;
MACRO_MOD_EXCLUDE MOD_EXCLUDE;
MACRO_MOD_EXCLUSIVE MOD_EXCLUSIVE;
MACRO_MOD_EXCLUDE MOD_FORCELOAD;
MACRO_MOD_OFFSET MOD_FREQUENCY;
log_entry_t MOD_IBASE;
MACRO_MOD_EXCLUDE MOD_INCLUDE;
MACRO_MOD_OFFSET MOD_MAXERROR;
MACRO_MOD_MAXPATH MOD_MAXPATH;
MACRO_MOD_EXCLUDE MOD_MODDIR;
log_entry_t MOD_NAME_NEW;
log_entry_t MOD_NAME_OLD;
MACRO_MOD_NOAUTOUNLOAD MOD_NOAUTOUNLOAD;
MACRO_MOD_OFFSET MOD_OFFSET;
MACRO_MOD_EXCLUDE MOD_ROOTDEV;
MACRO_MOD_EXCLUDE MOD_ROOTFS;
MACRO_MOD_SAMEOBJ MOD_SAMEOBJ;
MACRO_MOD_EXCLUDE MOD_SET;
MACRO_MOD_EXCLUDE MOD_SET32;
MACRO_MOD_EXCLUDE MOD_SET64;
MACRO_MOD_SHARED MOD_SHARED;
MACRO_MOD_OFFSET MOD_STATUS;
MACRO_MOD_EXCLUDE MOD_SWAPDEV;
MACRO_MOD_EXCLUDE MOD_SWAPFS;
MACRO_MOD_OFFSET MOD_TIMECONST;
MACRO_MOD_EXCLUDE MOD_UNKNOWN;
MACRO_MOD MOD_WIN;
MACRO_MONMASK MONMASK;
MACRO_MONSHIFT MONSHIFT;
MACRO_MONSPERYEAR MONSPERYEAR;
MACRO_MONS MONS_PER_YEAR;
MACRO_MON MON_1;
MACRO_MON MON_10;
MACRO_MON MON_11;
MACRO_MON MON_12;
MACRO_MON MON_2;
MACRO_MON MON_3;
MACRO_MON MON_4;
MACRO_MON MON_5;
MACRO_MON MON_6;
MACRO_MON MON_7;
MACRO_MON MON_8;
MACRO_MON MON_9;
MACRO_MON_TYPE MON_TYPE_0_OFFSET;
MACRO_MON_TYPE MON_TYPE_GRAY;
MACRO_MON_TYPE MON_TYPE_OVERSCAN;
MACRO_MON_TYPE MON_TYPE_STEREO;
MACRO_MORECTL MORECTL;
MACRO_MORECTL MOREDATA;
MACRO_SK MOT;
MACRO_MOUSELDISC MOUSELDISC;
MACRO_MOUSE MOUSE_DEVID;
MACRO_MO MO_DEFAULT;
MACRO_MO MO_EMPTY;
MACRO_MO MO_HASVALUE;
MACRO_MO MO_IGNORE;
MACRO_MO MO_NODISPLAY;
MACRO_MO MO_SET;
MACRO_MO MO_TAG;
MACRO_MQ MQ_ENABLED;
MACRO_MRT MRT_ADD_MFC;
MACRO_MRT MRT_ADD_VIF;
MACRO_MRT MRT_ASSERT;
MACRO_MRT MRT_DEL_MFC;
MACRO_MRT MRT_DEL_VIF;
MACRO_MRT MRT_DONE;
MACRO_MRT MRT_INIT;
MACRO_MRT MRT_VERSION;
MACRO_MSCALE0 MSCALE0;
MACRO_MSGMARK MSGDELIM;
MACRO_MSGMARK MSGMARK;
MACRO_MSGMARK MSGMARKNEXT;
MACRO_MSGMARK MSGNOGET;
MACRO_MSGMARK MSGNOLOOP;
MACRO_MSGMARK MSGNOTMARKNEXT;
MACRO_MSG_COMMAND MSG_ABORT;
MACRO_MSG_COMMAND MSG_ABORT_TAG;
MACRO_MSG_COMMAND MSG_ACA;
reply_stat MSG_ACCEPTED;
MACRO_MSG_HIPRI MSG_ANY;
MACRO_MSG_HIPRI MSG_BAND;
MACRO_MSG_COMMAND MSG_CLEAR_ACA;
MACRO_MSG_COMMAND MSG_CLEAR_QUEUE;
MACRO_MSG_COMMAND MSG_COMMAND_COMPLETE;
MACRO_MSG_COMMAND MSG_CONTINUE_TASK;
MACRO_MSG MSG_CTRUNC;
reply_stat MSG_DENIED;
MACRO_MSG_COMMAND MSG_DEVICE_RESET;
MACRO_MSG_COMMAND MSG_DISCONNECT;
MACRO_MSG MSG_DONTROUTE;
MACRO_MSG MSG_DONTWAIT;
MACRO_MSG_DR MSG_DR_IDENTIFY;
MACRO_MSG MSG_EOR;
MACRO_MSG_COMMAND MSG_EXTENDED;
MACRO_MSG_COMMAND MSG_HEAD_QTAG;
MACRO_MSG_HIPRI MSG_HIPRI;
MACRO_MSG_COMMAND MSG_IDENTIFY;
MACRO_MSG_COMMAND MSG_IDENTIFY_EXTENDED;
MACRO_MSG_COMMAND MSG_IGNORE_WIDE_RESID;
MACRO_MSG_COMMAND MSG_INITIATE_RECOVERY;
MACRO_MSG_COMMAND MSG_INITIATOR_ERROR;
MACRO_MSG_COMMAND MSG_LINK_CMPLT;
MACRO_MSG_COMMAND MSG_LINK_CMPLT_FLAG;
MACRO_MSG_DR MSG_LUNRTN;
MACRO_MSG_DR MSG_LUNTAR;
MACRO_MSG_COMMAND MSG_LUN_RESET;
MACRO_MSG MSG_MAXIOVLEN;
MACRO_MSG_COMMAND MSG_MODIFY_DATA_PTR;
MACRO_MSG_COMMAND MSG_MSG_PARITY;
MACRO_MSG_R MSG_NOERROR;
MACRO_MSG_COMMAND MSG_NOP;
MACRO_MSG MSG_OOB;
MACRO_MSG_COMMAND MSG_ORDERED_QTAG;
MACRO_MSG MSG_PEEK;
MACRO_MSG_R MSG_R;
MACRO_MSG_COMMAND MSG_REJECT;
MACRO_MSG_COMMAND MSG_RELEASE_RECOVERY;
MACRO_MSG_COMMAND MSG_RESTORE_PTRS;
MACRO_MSG_R MSG_RWAIT;
MACRO_MSG_COMMAND MSG_SAVE_DATA_PTR;
MACRO_MSG_COMMAND MSG_SIMPLE_QTAG;
MACRO_MSG_COMMAND MSG_SYNCHRONOUS;
MACRO_MSG_COMMAND MSG_TARGET_TRAN_DIS;
MACRO_MSG_COMMAND MSG_TERMINATE_PROCESS;
MACRO_MSG MSG_TRUNC;
MACRO_MSG_R MSG_W;
MACRO_MSG MSG_WAITALL;
MACRO_MSG_COMMAND MSG_WIDE_DATA_XFER;
MACRO_MSG_R MSG_WWAIT;
MACRO_MSG_HIPRI MSG_XPG4;
MACRO_MSG MSG_XPG4_2;
MACRO_MSIOBUTTONS MSIOBUTTONS;
MACRO_MSIOC MSIOC;
MACRO_MSIOGETPARMS MSIOGETPARMS;
MACRO_MSIOSETPARMS MSIOSETPARMS;
MACRO_MS MS_ASYNC;
MACRO_MS_RBC MS_BULK_ONLY_PROTOCOL;
MACRO_MS_RBC MS_CBI_PROTOCOL;
MACRO_MS_RBC MS_CBI_WC_PROTOCOL;
MACRO_MS_RDONLY MS_DATA;
MACRO_MS_RDONLY MS_FORCE;
MACRO_MS_RDONLY MS_FSS;
MACRO_MS_RDONLY MS_GLOBAL;
MACRO_MS_HW MS_HW_BUT1;
MACRO_MS_HW MS_HW_BUT2;
MACRO_MS_HW MS_HW_BUT3;
MACRO_MS MS_INVALIDATE;
MACRO_MS_RBC MS_ISD_1999_SILICON_PROTOCOL;
MACRO_MS_LEFT MS_LEFT;
MACRO_MS_RDONLY MS_MASK;
MACRO_MS_LEFT MS_MIDDLE;
MACRO_MS_RDONLY MS_NOCHECK;
MACRO_MS_RDONLY MS_NOMNTTAB;
MACRO_MS_RDONLY MS_NOSPLICE;
MACRO_MS_RDONLY MS_NOSUID;
MACRO_MS_RDONLY MS_NOTRUNC;
MACRO_MS_NO MS_NO_RRIP;
MACRO_MS MS_OLDSYNC;
MACRO_MS_RDONLY MS_OPTIONSTR;
MACRO_MS_RDONLY MS_OVERLAY;
MACRO_MS_RBC MS_QIC_157_SUB_CLASS;
MACRO_MS_RBC MS_RBC_T10_SUB_CLASS;
MACRO_MS_RDONLY MS_RDONLY;
MACRO_MS_RDONLY MS_REMOUNT;
MACRO_MS_LEFT MS_RIGHT;
MACRO_MS_RBC MS_SCSI_SUB_CLASS;
MACRO_MS_RBC MS_SFF8020I_SUB_CLASS;
MACRO_MS_RBC MS_SFF8070I_SUB_CLASS;
MACRO_MS MS_SYNC;
MACRO_MS_RDONLY MS_SYSSPACE;
MACRO_MS_RBC MS_UFI_SUB_CLASS;
MACRO_MS_RDONLY MS_UMOUNT_MASK;
MACRO_CONFIGURE MT;
MACRO_MTWEOF MTBSF;
MACRO_MTFSR MTBSR;
MACRO_MTDOUBLEFREE MTCHUNKSIZE;
MACRO_MTDOUBLEFREE MTDEBUGPATTERN;
MACRO_MTDOUBLEFREE MTDOUBLEFREE;
MACRO_MTEOM MTEOM;
MACRO_MTERASE MTERASE;
MACRO_MTWEOF MTFSF;
MACRO_MTFSR MTFSR;
MACRO_MTF MTF_ASF;
MACRO_MTF MTF_REEL;
MACRO_MTF MTF_SCSI;
MACRO_MTF MTF_TAPE_CLN_SUPPORTED;
MACRO_MTF MTF_TAPE_HEAD_DIRTY;
MACRO_MTGRSZ MTGRSZ;
MACRO_MTDOUBLEFREE MTINITBUFFER;
MACRO_MTIOC MTIOC;
MACRO_MTIOCFORCERESERVE MTIOCFORCERESERVE;
MACRO_MTIOCGET MTIOCGET;
MACRO_MTIOCGETDRIVETYPE MTIOCGETDRIVETYPE;
MACRO_MTIOCGUARANTEEDORDER MTIOCGUARANTEEDORDER;
MACRO_MTIOCLRERR MTIOCLRERR;
MACRO_MTIOCPERSISTENT MTIOCPERSISTENT;
MACRO_MTIOCPERSISTENTSTATUS MTIOCPERSISTENTSTATUS;
MACRO_MTIOCREADIGNOREEOFS MTIOCREADIGNOREEOFS;
MACRO_MTIOCREADIGNOREILI MTIOCREADIGNOREILI;
MACRO_MTIOCRELEASE MTIOCRELEASE;
MACRO_MTIOCRESERVE MTIOCRESERVE;
MACRO_MTIOCSHORTFMK MTIOCSHORTFMK;
MACRO_MTIOCSTATE MTIOCSTATE;
MACRO_MTIOCTOP MTIOCTOP;
mtio_state MTIO_EJECTED;
mtio_state MTIO_INSERTED;
mtio_state MTIO_NONE;
MACRO_MTLOAD MTLOAD;
MACRO_MTM MTM_FORCE_ROLL;
MACRO_MTM MTM_ROLL_EXIT;
MACRO_MTM MTM_ROLL_RUNNING;
MACRO_MTNBSF MTNBSF;
MACRO_MTNOP MTNOP;
MACRO_MTOFFL MTOFFL;
MACRO_MTONOFF MTONOFF;
MACRO_MTNOP MTRETEN;
MACRO_MTREW MTREW;
MACRO_MTSRSZ MTSRSZ;
MACRO_MTWEOF MTWEOF;
MACRO_MT_NOREWIND MT_BSD;
MACRO_MT_NONE MT_CHECK_MAP;
MACRO_MT MT_DATA;
MACRO_MT_NOREWIND MT_DENSITY1;
MACRO_MT_NOREWIND MT_DENSITY2;
MACRO_MT_NOREWIND MT_DENSITY3;
MACRO_MT_NOREWIND MT_DENSITY4;
MACRO_MT_NOREWIND MT_DENSITY_MASK;
MACRO_MT_NONE MT_FORCEROLL;
MACRO_MT MT_FREE;
MACRO_MT_ISTS MT_IS8MM;
MACRO_MT_ISTS MT_ISANRITSU;
MACRO_MT_ISTS MT_ISAR;
MACRO_MT_ISTS MT_ISCCS11;
MACRO_MT_ISTS MT_ISCCS12;
MACRO_MT_ISTS MT_ISCCS13;
MACRO_MT_ISTS MT_ISCCS14;
MACRO_MT_ISTS MT_ISCCS15;
MACRO_MT_ISTS MT_ISCCS16;
MACRO_MT_ISTS MT_ISCCS23;
MACRO_MT_ISTS MT_ISCCS24;
MACRO_MT_ISTS MT_ISCCS28;
MACRO_MT_ISTS MT_ISCCS29;
MACRO_MT_ISTS MT_ISCCS3;
MACRO_MT_ISTS MT_ISCCS30;
MACRO_MT_ISTS MT_ISCCS31;
MACRO_MT_ISTS MT_ISCCS32;
MACRO_MT_ISTS MT_ISCCS7;
MACRO_MT_ISTS MT_ISCCS8;
MACRO_MT_ISTS MT_ISCCS9;
MACRO_MT_ISTS MT_ISCDC;
MACRO_MT_ISTS MT_ISCPC;
MACRO_MT_ISTS MT_ISDAT;
MACRO_MT_ISTS MT_ISDEFAULT;
MACRO_MT_ISTS MT_ISDLT;
MACRO_MT_ISTS MT_ISEXABYTE;
MACRO_MT_ISTS MT_ISEXB8500;
MACRO_MT_ISTS MT_ISFUJI;
MACRO_MT_ISTS MT_ISHP;
MACRO_MT_ISTS MT_ISHT;
MACRO_MT_ISTS MT_ISKENNEDY;
MACRO_MT_ISTS MT_ISMT;
MACRO_MT_ISTS MT_ISMT02;
MACRO_MT_ISTS MT_ISOTHER;
MACRO_MT_ISTS MT_ISPYTHON;
MACRO_MT_ISTS MT_ISQIC;
MACRO_MT_ISTS MT_ISREEL;
MACRO_MT_ISTS MT_ISSC;
MACRO_MT_ISTS MT_ISSTC;
MACRO_MT_ISTS MT_ISSTK9840;
MACRO_MT_ISTS MT_ISSYSGEN;
MACRO_MT_ISTS MT_ISSYSGEN11;
MACRO_MT_ISTS MT_ISTAND25G;
MACRO_MT_ISTS MT_ISTM;
MACRO_MT_ISTS MT_ISTS;
MACRO_MT_ISTS MT_ISUT;
MACRO_MT_ISTS MT_ISVIPER1;
MACRO_MT_ISTS MT_ISWANGDAT;
MACRO_MT_ISTS MT_ISWANGTEK1;
MACRO_MT_ISTS MT_ISWANGTHS;
MACRO_MT_NONE MT_LOG_WRITE_CHECK;
MACRO_MT_NONE MT_MATAMAP;
MACRO_MT_NDENSITIES MT_NDENSITIES;
MACRO_MT_NONE MT_NOASYNC;
MACRO_MT_NONE MT_NONE;
MACRO_MT_NOREWIND MT_NOREWIND;
MACRO_MT_NDENSITIES MT_NSPEEDS;
MACRO_MT_NONE MT_PREWRITE;
MACRO_MT_NONE MT_SCAN;
MACRO_MT_NONE MT_SIZE;
MACRO_MT_NONE MT_TRACE;
MACRO_MT_NONE MT_TRANSACT;
MACRO_MT_NONE MT_WRITE_CHECK;
MACRO_MULBSHIFT MULBSHIFT;
MACRO_MULLSHIFT MULBSIZE;
MACRO_MULKSHIFT MULKSHIFT;
MACRO_MULBSHIFT MULKSIZE;
MACRO_MULLSHIFT MULLSHIFT;
MACRO_MULWSHIFT MULLSIZE;
MACRO_MULWSHIFT MULWSHIFT;
MACRO_MULWSIZE MULWSIZE;
$800308667964E9594463B69B6CCFCE10 MUTEX_ADAPTIVE;
$800308667964E9594463B69B6CCFCE10 MUTEX_DEFAULT;
$800308667964E9594463B69B6CCFCE10 MUTEX_DRIVER;
MACRO_MAGIC MUTEX_MAGIC;
MACRO_MUTEX MUTEX_NO_OWNER;
$800308667964E9594463B69B6CCFCE10 MUTEX_SPIN;
MACRO_MUXID MUXID_ALL;
MACRO_M_DATA M_BREAK;
MACRO_M_DATA M_COPYIN;
MACRO_M_DATA M_COPYOUT;
MACRO_M_DATA M_CTL;
MACRO_M_CTL M_CTL_MAGIC_NUMBER;
MACRO_M_DATA M_DATA;
MACRO_M_DATA M_DELAY;
MACRO_M_DATA M_ERROR;
MACRO_M_DATA M_EVENT;
MACRO_M_DATA M_FLUSH;
MACRO_M M_GRAIN;
MACRO_M_DATA M_HANGUP;
MACRO_M_DATA M_IOCACK;
MACRO_M_DATA M_IOCDATA;
MACRO_M_DATA M_IOCNAK;
MACRO_M_DATA M_IOCTL;
MACRO_M M_KEEP;
MACRO_M_MEM M_KMEM;
MACRO_M_MEM M_MEM;
MACRO_M M_MXFAST;
MACRO_M M_NLBLKS;
MACRO_M_MEM M_NULL;
MACRO_M_DATA M_PASSFP;
MACRO_M_DATA M_PCEVENT;
MACRO_M_DATA M_PCPROTO;
MACRO_M_DATA M_PCRSE;
MACRO_M_DATA M_PCSIG;
MACRO_M_DATA M_PROTO;
MACRO_M_DATA M_READ;
MACRO_M_RO M_RO;
MACRO_M_RO M_ROL;
MACRO_M_RO M_ROOT;
MACRO_M_DATA M_RSE;
MACRO_M_RO M_RW;
MACRO_M_RO M_RWL;
MACRO_M_DATA M_SETOPTS;
MACRO_M_DATA M_SIG;
MACRO_M_DATA M_START;
MACRO_M_DATA M_STARTI;
MACRO_M_DATA M_STOP;
MACRO_M_DATA M_STOPI;
MACRO_M_DATA M_UNHANGUP;
MACRO_M_MEM M_ZERO;
MACRO_MaskAllTextDescriptors MaskAllTextDescriptors;
MACRO_MaskOrientation MaskContext;
MACRO_MaskOrientation MaskImplicitAlg;
MACRO_MaskOrientation MaskNumerals;
MACRO_MaskOrientation MaskOrientation;
MACRO_MaskOrientation MaskSwapping;
MACRO_MaskOrientation MaskTextShaping;
MACRO_MaskOrientation MaskTypeOfText;
MACRO_NAA NAA_ID_IEEE;
MACRO_NAA NAA_ID_IEEE_EXTENDED;
MACRO_NADDR NADDR;
MACRO_LBLSIZE NAMELEN;
MACRO_NAMESERVER NAMESERVER_PORT;
MACRO_JBLOG NAMESZ;
MACRO_NANOSEC NANOSEC;
MACRO_NA NA_ACL;
MACRO_NA NA_ACLCNT;
MACRO_NA NA_ACL_DEFAULT;
MACRO_NA NA_CLASS_OBJ;
MACRO_NA NA_DFACL;
MACRO_NA NA_DFACLCNT;
MACRO_NA NA_EXEC;
MACRO_NA NA_GROUP;
MACRO_NA NA_GROUP_OBJ;
MACRO_NA NA_OTHER_OBJ;
MACRO_NA NA_READ;
MACRO_NA NA_USER;
MACRO_NA NA_USER_OBJ;
MACRO_NA NA_WRITE;
MACRO_NBAND NBAND;
MACRO_NBBY NBBY;
MACRO_NBITSMAJOR NBITSMAJOR;
MACRO_NBITSMAJOR32 NBITSMAJOR32;
MACRO_NBITSMINOR NBITSMINOR;
MACRO_NBITSMINOR32 NBITSMINOR32;
MACRO_CMASK NBPS;
MACRO_NBPSCTR NBPSCTR;
MACRO_NBRA NBRA;
MACRO_NCARGS NCARGS;
MACRO_NCARGS32 NCARGS32;
MACRO_NCARGS32 NCARGS64;
MACRO_NCBCLASS NCBCLASS;
MACRO_NCBRW NCBRW;
MACRO_NCC NCC;
MACRO_NCC NCCS;
MACRO_NCR53C90 NCR53C90;
MACRO_NCR53C90A NCR53C90A;
MACRO_NC NC_BROADCAST;
MACRO_NC NC_NOFLAG;
MACRO_NC NC_TPI_CLTS;
MACRO_NC NC_TPI_COTS;
MACRO_NC NC_TPI_COTS_ORD;
MACRO_NC NC_TPI_RAW;
MACRO_NC NC_VISIBLE;
MACRO_NDADDR NDADDR;
MACRO_NDENSITIES NDENSITIES;
MACRO_NDF NDF_ANYCAST_OFF;
MACRO_NDF NDF_ANYCAST_ON;
MACRO_NDF NDF_ISROUTER_OFF;
MACRO_NDF NDF_ISROUTER_ON;
MACRO_NDF NDF_PROXY_OFF;
MACRO_NDF NDF_PROXY_ON;
MACRO_NDKBAD NDKBAD;
MACRO_NDKMAP NDKMAP;
MACRO_NDM NDM;
MACRO_ND ND_ACCESS;
MACRO_ND ND_ADDR;
MACRO_ND ND_ADDRLIST;
MACRO_ND ND_BADARG;
MACRO_ND_BASE ND_BASE;
MACRO_ND ND_CHECK_RESERVEDPORT;
MACRO_ND_MAX ND_DELAY;
MACRO_ND_RA ND_DELAY_FIRST_PROBE_TIME;
MACRO_ND ND_FAILCTRL;
MACRO_ND_BASE ND_GET;
MACRO_ND ND_HOSTSERV;
MACRO_ND ND_HOSTSERVLIST;
MACRO_ND_MAX ND_INCOMPLETE;
MACRO_ND_RA ND_MAX_ANYCAST_DELAY_TIME;
MACRO_ND_RA ND_MAX_FINAL_RTR_ADVERTISEMENTS;
MACRO_ND_MAX ND_MAX_HDW_LEN;
MACRO_ND_RA ND_MAX_INITIAL_RTR_ADVERTISEMENTS;
MACRO_ND_RA ND_MAX_INITIAL_RTR_ADVERT_INTERVAL;
MACRO_ND_RA ND_MAX_MULTICAST_SOLICIT;
MACRO_ND_RA ND_MAX_NEIGHBOR_ADVERTISEMENT;
MACRO_ND_RA ND_MAX_RA_DELAY_TIME;
MACRO_ND_RA ND_MAX_REACHRETRANSTIME;
MACRO_ND_RA ND_MAX_REACHTIME;
MACRO_ND_RA ND_MAX_RTR_SOLICITATIONS;
MACRO_ND_RA ND_MAX_RTR_SOLICITATION_DELAY;
MACRO_ND_RA ND_MAX_UNICAST_SOLICIT;
MACRO_ND ND_MERGEADDR;
MACRO_ND_RA ND_MIN_DELAY_BETWEEN_RAS;
MACRO_ND_RA ND_NA_FLAG_OVERRIDE;
MACRO_ND_RA ND_NA_FLAG_ROUTER;
MACRO_ND_RA ND_NA_FLAG_SOLICITED;
MACRO_ND_ROUTER ND_NEIGHBOR_ADVERT;
MACRO_ND_ROUTER ND_NEIGHBOR_SOLICIT;
MACRO_ND ND_NOCTRL;
MACRO_ND ND_NOHOST;
MACRO_ND ND_NOMEM;
MACRO_ND ND_NOSERV;
MACRO_ND ND_NOSYM;
MACRO_ND ND_NO_ADDRESS;
MACRO_ND ND_NO_DATA;
MACRO_ND ND_NO_RECOVERY;
MACRO_ND ND_OK;
MACRO_ND ND_OPEN;
MACRO_ND_RA ND_OPT_MTU;
MACRO_ND_RA ND_OPT_PI_FLAG_AUTO;
MACRO_ND_RA ND_OPT_PI_FLAG_ONLINK;
MACRO_ND_RA ND_OPT_PREFIX_INFORMATION;
MACRO_ND_RA ND_OPT_REDIRECTED_HEADER;
MACRO_ND_RA ND_OPT_SOURCE_LINKADDR;
MACRO_ND_RA ND_OPT_TARGET_LINKADDR;
MACRO_ND_MAX ND_PROBE;
MACRO_ND_RA ND_RA_FLAG_MANAGED;
MACRO_ND_RA ND_RA_FLAG_OTHER;
MACRO_ND_MAX ND_REACHABLE;
MACRO_ND_RA ND_REACHABLE_TIME;
MACRO_ND_ROUTER ND_REDIRECT;
MACRO_ND_RA ND_RETRANS_TIMER;
MACRO_ND_ROUTER ND_ROUTER_ADVERT;
MACRO_ND_ROUTER ND_ROUTER_SOLICIT;
MACRO_ND_RA ND_RTR_SOLICITATION_INTERVAL;
MACRO_ND_BASE ND_SET;
MACRO_ND ND_SET_BROADCAST;
MACRO_ND ND_SET_RESERVEDPORT;
MACRO_SR1 ND_SR1;
MACRO_ND_MAX ND_STALE;
MACRO_ND_MAX ND_STATE_VALID_MAX;
MACRO_ND_MAX ND_STATE_VALID_MIN;
MACRO_ND ND_SYSTEM;
MACRO_ND ND_TRY_AGAIN;
MACRO_ND ND_UKNWN;
MACRO_ND_MAX ND_UNCHANGED;
MACRO_ND_MAX ND_UNREACHABLE;
MACRO_GROUPS NEGMEM_GROUPS;
MACRO_MASK NESTLEVEL_MASK;
MACRO_NETDB NETDB_INTERNAL;
MACRO_NETDB NETDB_SUCCESS;
$EA75FB217E367D75530EC23DCD9FC6C8 NETDIR_BY;
$EA75FB217E367D75530EC23DCD9FC6C8 NETDIR_BY6;
$EA75FB217E367D75530EC23DCD9FC6C8 NETDIR_BY_NOSRV;
$EA75FB217E367D75530EC23DCD9FC6C8 NETDIR_BY_NOSRV6;
MACRO_OTTYDISC NETLDISC;
MACRO_BLOCK NETWORK;
MACRO_OLDDEV NEWDEV;
MACRO_NEWLINE NEWLINE;
MACRO_NEW_C NEW_A;
MACRO_NEW_C NEW_C;
MACRO_NEW NEW_ENV_VALUE;
MACRO_NEW NEW_ENV_VAR;
MACRO_NEW_C NEW_I;
MACRO_NEW_C NEW_S;
MACRO_TIME NEW_TIME;
MACRO_NEW_C NEW_U;
MACRO_NEW_C NEW_W;
ftype3 NF3BLK;
ftype3 NF3CHR;
ftype3 NF3DIR;
ftype3 NF3FIFO;
ftype3 NF3LNK;
ftype3 NF3REG;
ftype3 NF3SOCK;
nfsftype NFBLK;
nfsftype NFCHR;
nfsftype NFDIR;
MACRO_NFF NFF;
nfsftype NFLNK;
nfsftype NFNON;
nfsftype NFREG;
nfsstat3 NFS3ERR_ACCES;
nfsstat3 NFS3ERR_BADHANDLE;
nfsstat3 NFS3ERR_BADTYPE;
nfsstat3 NFS3ERR_BAD_COOKIE;
nfsstat3 NFS3ERR_DQUOT;
nfsstat3 NFS3ERR_EXIST;
nfsstat3 NFS3ERR_FBIG;
nfsstat3 NFS3ERR_INVAL;
nfsstat3 NFS3ERR_IO;
nfsstat3 NFS3ERR_ISDIR;
nfsstat3 NFS3ERR_JUKEBOX;
nfsstat3 NFS3ERR_MLINK;
nfsstat3 NFS3ERR_NAMETOOLONG;
nfsstat3 NFS3ERR_NODEV;
nfsstat3 NFS3ERR_NOENT;
nfsstat3 NFS3ERR_NOSPC;
nfsstat3 NFS3ERR_NOTDIR;
nfsstat3 NFS3ERR_NOTEMPTY;
nfsstat3 NFS3ERR_NOTSUPP;
nfsstat3 NFS3ERR_NOT_SYNC;
nfsstat3 NFS3ERR_NXIO;
nfsstat3 NFS3ERR_PERM;
nfsstat3 NFS3ERR_REMOTE;
nfsstat3 NFS3ERR_ROFS;
nfsstat3 NFS3ERR_SERVERFAULT;
nfsstat3 NFS3ERR_STALE;
nfsstat3 NFS3ERR_TOOSMALL;
nfsstat3 NFS3ERR_XDEV;
MACRO_NFS3_FHSIZE NFS3_COOKIEVERFSIZE;
MACRO_NFS3_FHSIZE NFS3_CREATEVERFSIZE;
MACRO_NFS3 NFS3_CURFHSIZE;
MACRO_NFS3_FHSIZE NFS3_FHSIZE;
nfsstat3 NFS3_OK;
MACRO_NFS3_PROGRAM NFS3_PROGRAM;
MACRO_NFS3_FHSIZE NFS3_WRITEVERFSIZE;
MACRO_NFSAUTH NFSAUTH_ACCESS;
MACRO_NFSAUTH NFSAUTH_DENIED;
MACRO_NFSAUTH NFSAUTH_DROP;
MACRO_NFSAUTH NFSAUTH_MAPNONE;
MACRO_NFSAUTH NFSAUTH_PROG;
MACRO_NFSAUTH NFSAUTH_RO;
MACRO_NFSAUTH NFSAUTH_ROOT;
MACRO_NFSAUTH NFSAUTH_RW;
MACRO_NFSAUTH NFSAUTH_VERS;
nfsstat NFSERR_ACCES;
nfsstat NFSERR_DQUOT;
nfsstat NFSERR_EXIST;
nfsstat NFSERR_FBIG;
nfsstat NFSERR_INVAL;
nfsstat NFSERR_IO;
nfsstat NFSERR_ISDIR;
nfsstat NFSERR_NAMETOOLONG;
nfsstat NFSERR_NODEV;
nfsstat NFSERR_NOENT;
nfsstat NFSERR_NOSPC;
nfsstat NFSERR_NOTDIR;
nfsstat NFSERR_NOTEMPTY;
nfsstat NFSERR_NXIO;
nfsstat NFSERR_OPNOTSUPP;
nfsstat NFSERR_PERM;
nfsstat NFSERR_REMOTE;
nfsstat NFSERR_ROFS;
nfsstat NFSERR_STALE;
nfsstat NFSERR_WFLUSH;
nfsstat NFSERR_XDEV;
MACRO_NFSLOG NFSLOG_BUF_VERSION;
MACRO_NFSLOG NFSLOG_GETFH;
MACRO_NFSLOG NFSLOG_LOOKUP;
MACRO_NFSLOG NFSLOG_NULL;
MACRO_NFSLOG NFSLOG_PROGRAM;
MACRO_NFSLOG NFSLOG_SHARE;
MACRO_NFSLOG NFSLOG_UNSHARE;
MACRO_NFSLOG NFSLOG_VERSION;
MACRO_NFSLOG NFSLOG_VERSMAX;
MACRO_NFSLOG NFSLOG_VERSMIN;
MACRO_NFSL NFSL_ALL;
MACRO_LM_SVC NFSL_FLUSH_ARGS_VERS;
MACRO_NFSL NFSL_RENAME;
MACRO_NFSL NFSL_SYNC;
MACRO_NFSMNT NFSMNT_ACDIRMAX;
MACRO_NFSMNT NFSMNT_ACDIRMIN;
MACRO_NFSMNT NFSMNT_ACREGMAX;
MACRO_NFSMNT NFSMNT_ACREGMIN;
MACRO_NFSMNT NFSMNT_DIRECTIO;
MACRO_NFSMNT NFSMNT_GRPID;
MACRO_NFSMNT NFSMNT_HOSTNAME;
MACRO_NFSMNT NFSMNT_INT;
MACRO_NFSMNT NFSMNT_KERBEROS;
MACRO_NFSMNT NFSMNT_KNCONF;
MACRO_NFSMNT NFSMNT_LLOCK;
MACRO_NFSMNT NFSMNT_LOOPBACK;
MACRO_NFSMNT NFSMNT_NEWARGS;
MACRO_NFSMNT NFSMNT_NOAC;
MACRO_NFSMNT NFSMNT_NOCTO;
MACRO_NFSMNT NFSMNT_NOPRINT;
MACRO_NFSMNT NFSMNT_POSIX;
MACRO_NFSMNT NFSMNT_RETRANS;
MACRO_NFSMNT NFSMNT_RPCTIMESYNC;
MACRO_NFSMNT NFSMNT_RSIZE;
MACRO_NFSMNT NFSMNT_SECURE;
MACRO_NFSMNT NFSMNT_SEMISOFT;
MACRO_NFSMNT NFSMNT_SOFT;
MACRO_NFSMNT NFSMNT_TIMEO;
MACRO_NFSMNT NFSMNT_WSIZE;
nfsftype NFSOC;
MACRO_NFSPROC3 NFSPROC3_ACCESS;
MACRO_NFSPROC3 NFSPROC3_COMMIT;
MACRO_NFSPROC3 NFSPROC3_CREATE;
MACRO_NFSPROC3 NFSPROC3_FSINFO;
MACRO_NFSPROC3 NFSPROC3_FSSTAT;
MACRO_NFSPROC3 NFSPROC3_GETATTR;
MACRO_NFSPROC3 NFSPROC3_LINK;
MACRO_NFSPROC3 NFSPROC3_LOOKUP;
MACRO_NFSPROC3 NFSPROC3_MKDIR;
MACRO_NFSPROC3 NFSPROC3_MKNOD;
MACRO_NFSPROC3 NFSPROC3_NULL;
MACRO_NFSPROC3 NFSPROC3_PATHCONF;
MACRO_NFSPROC3 NFSPROC3_READ;
MACRO_NFSPROC3 NFSPROC3_READDIR;
MACRO_NFSPROC3 NFSPROC3_READDIRPLUS;
MACRO_NFSPROC3 NFSPROC3_READLINK;
MACRO_NFSPROC3 NFSPROC3_REMOVE;
MACRO_NFSPROC3 NFSPROC3_RENAME;
MACRO_NFSPROC3 NFSPROC3_RMDIR;
MACRO_NFSPROC3 NFSPROC3_SETATTR;
MACRO_NFSPROC3 NFSPROC3_SYMLINK;
MACRO_NFSPROC3 NFSPROC3_WRITE;
nfs_access_type NFS_ACCESS_ALLOWED;
nfs_access_type NFS_ACCESS_DENIED;
nfs_access_type NFS_ACCESS_UNKNOWN;
MACRO_NFS_ACL NFS_ACL_MAX_ENTRIES;
MACRO_NFS_ACL_PROGRAM NFS_ACL_PROGRAM;
MACRO_NFS_ACL_PROGRAM NFS_ACL_V2;
MACRO_NFS_ACL_V3 NFS_ACL_V3;
MACRO_NFS_ACL_PROGRAM NFS_ACL_VERSMAX;
MACRO_NFS_ACL_PROGRAM NFS_ACL_VERSMIN;
MACRO_NFS_ARGS NFS_ARGS_EXTA;
MACRO_NFS_ARGS NFS_ARGS_EXTB;
MACRO_NFS_CALLTYPES NFS_CALLTYPES;
iotype NFS_COMMIT;
MACRO_NFS NFS_COTS_TIMEO;
MACRO_NFS_FHANDLE NFS_FHANDLE_LEN;
MACRO_NFS_FIFO NFS_FHSIZE;
MACRO_NFS_FIFO NFS_FIFO_DEV;
MACRO_NFS_FIFO NFS_FIFO_MODE;
nfssys_op NFS_GETFH;
MACRO_NFS NFS_GID_NOBODY;
MACRO_OFS NFS_MAGIC;
MACRO_NFS NFS_MAXDATA;
MACRO_NFS NFS_MAXNAMLEN;
MACRO_NFS NFS_MAXPATHLEN;
nfsstat NFS_OK;
MACRO_NFS_OWNER NFS_OWNER_MAGIC;
iotype NFS_PAGEIO;
MACRO_NFS NFS_PORT;
MACRO_NFS NFS_PROGRAM;
iotype NFS_PUTAPAGE;
iotype NFS_READDIR;
iotype NFS_READ_AHEAD;
MACRO_NFS NFS_RETRIES;
nfssys_op NFS_REVAUTH;
nfssys_op NFS_SVC;
MACRO_SVCPOOL_ID NFS_SVCPOOL_ID;
MACRO_NFS NFS_TIMEO;
MACRO_NFS NFS_UID_NOBODY;
MACRO_NFS_V3 NFS_V3;
MACRO_NFS NFS_VERSION;
MACRO_NFS NFS_VERSMAX;
MACRO_NFS NFS_VERSMIN;
MACRO_NGREG NGREG;
MACRO_ARG NGROUPS_MAX;
MACRO_NGROUPS NGROUPS_MAX_DEFAULT;
MACRO_NGROUPS NGROUPS_UMAX;
MACRO_NGROUPS NGROUPS_UMIN;
MACRO_NGRPS NGRPS;
MACRO_NGRPS_LOOPBACK NGRPS_LOOPBACK;
MACRO_NIADDR NIADDR;
nstype NIS;
MACRO_NISPASSWD NISPASSWD_AUTHENTICATE;
MACRO_NISPASSWD NISPASSWD_PROG;
MACRO_NISPASSWD NISPASSWD_UPDATE;
MACRO_NISPASSWD NISPASSWD_VERS;
nis_error NIS_BADATTRIBUTE;
nis_error NIS_BADNAME;
nis_error NIS_BADOBJECT;
nis_error NIS_BADREQUEST;
zotypes NIS_BOGUS_OBJ;
MACRO_NIS_BOUND NIS_BOUND;
nis_error NIS_CACHEEXPIRED;
nis_error NIS_CBERROR;
nis_error NIS_CBRESULTS;
nis_error NIS_CHAINBROKEN;
nis_error NIS_CLNTAUTH;
nis_error NIS_COLDSTART_ERR;
MACRO_NIS_READ NIS_CREATE_ACC;
MACRO_NIS_READ NIS_DESTROY_ACC;
zotypes NIS_DIRECTORY_OBJ;
nis_error NIS_DUMPLATER;
zotypes NIS_ENTRY_OBJ;
nis_error NIS_FAIL;
nis_error NIS_FOREIGNNS;
zotypes NIS_GROUP_OBJ;
nis_error NIS_IBMODERROR;
nis_error NIS_INVALIDOBJ;
nis_error NIS_LINKNAMEERROR;
zotypes NIS_LINK_OBJ;
MACRO_NIS NIS_MAXATTR;
MACRO_NIS NIS_MAXATTRNAME;
MACRO_NIS NIS_MAXATTRVAL;
MACRO_NIS NIS_MAXCOLUMNS;
MACRO_NIS NIS_MAXLINKS;
MACRO_NIS NIS_MAXNAMELEN;
MACRO_NIS NIS_MAXPATH;
MACRO_NIS NIS_MAXREPLICAS;
MACRO_NIS NIS_MAXSTRINGLEN;
nis_error NIS_MODFAIL;
MACRO_NIS_READ NIS_MODIFY_ACC;
nis_error NIS_NAMEEXISTS;
nis_error NIS_NAMEUNREACHABLE;
nis_error NIS_NOCALLBACK;
nis_error NIS_NOFILESPACE;
nis_error NIS_NOMEMORY;
nis_error NIS_NOPROC;
nis_error NIS_NOSUCHNAME;
nis_error NIS_NOSUCHTABLE;
nis_error NIS_NOTEMPTY;
nis_error NIS_NOTFOUND;
nis_error NIS_NOTMASTER;
nis_error NIS_NOTOWNER;
nis_error NIS_NOTSAMEOBJ;
nis_error NIS_NOTSEARCHABLE;
nis_error NIS_NOTUNIQUE;
nis_error NIS_NOT_ME;
zotypes NIS_NO_OBJ;
nis_error NIS_PARTIAL;
nis_error NIS_PERMISSION;
MACRO_NIS NIS_PK_DH;
MACRO_NIS NIS_PK_DHEXT;
MACRO_NIS NIS_PK_KERB;
MACRO_NIS NIS_PK_NONE;
MACRO_NIS NIS_PK_RSA;
zotypes NIS_PRIVATE_OBJ;
MACRO_NIS_READ NIS_READ_ACC;
nis_error NIS_RES2BIG;
nis_error NIS_RESYNC;
nis_error NIS_RPCERROR;
nis_error NIS_SRVAUTH;
nis_error NIS_SUCCESS;
nis_error NIS_SYSTEMERROR;
nis_error NIS_S_NOTFOUND;
nis_error NIS_S_SUCCESS;
zotypes NIS_TABLE_OBJ;
nis_error NIS_TOOMANYATTRS;
MACRO_NIS_BOUND NIS_TRANSIENT_ERRORS;
nis_error NIS_TRYAGAIN;
nis_error NIS_TYPEMISMATCH;
nis_error NIS_UNAVAIL;
nis_error NIS_UNKNOWNOBJ;
MACRO_NI NI_DGRAM;
MACRO_NI NI_MAXHOST;
MACRO_NI NI_MAXSERV;
MACRO_NI NI_NAMEREQD;
MACRO_NI NI_NOFQDN;
MACRO_NI NI_NUMERICHOST;
MACRO_NI NI_NUMERICSERV;
MACRO_NL_0 NL;
MACRO_NL0 NL0;
MACRO_NL0 NL1;
MACRO_NL2 NL2;
MACRO_NL3 NL3;
MACRO_ANYP NLDELAY;
MACRO_OPOST NLDLY;
nlm4_stats NLM4_BLOCKED;
nlm4_stats NLM4_DEADLCK;
nlm4_stats NLM4_DENIED;
nlm4_stats NLM4_DENIED_GRACE_PERIOD;
nlm4_stats NLM4_DENIED_NOLOCKS;
nlm4_stats NLM4_FAILED;
nlm4_stats NLM4_FBIG;
nlm4_stats NLM4_GRANTED;
nlm4_stats NLM4_ROFS;
nlm4_stats NLM4_STALE_FH;
MACRO_NLM4 NLM4_VERS;
MACRO_NLMPROC4 NLMPROC4_CANCEL;
MACRO_NLMPROC4 NLMPROC4_CANCEL_MSG;
MACRO_NLMPROC4 NLMPROC4_CANCEL_RES;
MACRO_NLMPROC4 NLMPROC4_FREE_ALL;
MACRO_NLMPROC4 NLMPROC4_GRANTED;
MACRO_NLMPROC4 NLMPROC4_GRANTED_MSG;
MACRO_NLMPROC4 NLMPROC4_GRANTED_RES;
MACRO_NLMPROC4 NLMPROC4_LOCK;
MACRO_NLMPROC4 NLMPROC4_LOCK_MSG;
MACRO_NLMPROC4 NLMPROC4_LOCK_RES;
MACRO_NLMPROC4 NLMPROC4_NM_LOCK;
MACRO_NLMPROC4 NLMPROC4_NULL;
MACRO_NLMPROC4 NLMPROC4_SHARE;
MACRO_NLMPROC4 NLMPROC4_TEST;
MACRO_NLMPROC4 NLMPROC4_TEST_MSG;
MACRO_NLMPROC4 NLMPROC4_TEST_RES;
MACRO_NLMPROC4 NLMPROC4_UNLOCK;
MACRO_NLMPROC4 NLMPROC4_UNLOCK_MSG;
MACRO_NLMPROC4 NLMPROC4_UNLOCK_RES;
MACRO_NLMPROC4 NLMPROC4_UNSHARE;
MACRO_NLM NLM_CANCEL;
MACRO_NLM NLM_CANCEL_MSG;
MACRO_NLM NLM_CANCEL_RES;
MACRO_NLM_VERS3 NLM_FREE_ALL;
MACRO_NLM NLM_GRANTED;
MACRO_NLM NLM_GRANTED_MSG;
MACRO_NLM NLM_GRANTED_RES;
MACRO_NLM NLM_LOCK;
MACRO_NLM NLM_LOCK_MSG;
MACRO_NLM NLM_LOCK_RES;
MACRO_NLM_VERS3 NLM_NM_LOCK;
MACRO_NLM_NUMRPCS NLM_NUMRPCS;
MACRO_NLM NLM_PROG;
MACRO_NLM_VERS3 NLM_SHARE;
MACRO_SVCPOOL_ID NLM_SVCPOOL_ID;
MACRO_NLM NLM_TEST;
MACRO_NLM NLM_TEST_MSG;
MACRO_NLM NLM_TEST_RES;
MACRO_NLM NLM_UNLOCK;
MACRO_NLM NLM_UNLOCK_MSG;
MACRO_NLM NLM_UNLOCK_RES;
MACRO_NLM_VERS3 NLM_UNSHARE;
MACRO_NLM NLM_VERS;
MACRO_NLM NLM_VERS2;
MACRO_NLM_VERS3 NLM_VERS3;
MACRO_NLSUNKNOWN NLSDISABLED;
MACRO_NLSSTART NLSFORMAT;
MACRO_NLSSTART NLSSTART;
MACRO_NLSUNKNOWN NLSUNKNOWN;
MACRO_PER_TARGET NLUNS_PER_TARGET;
MACRO_NL_ARGMAX NL_ARGMAX;
MACRO_NL NL_CAT_LOCALE;
MACRO_NL_ARGMAX NL_LANGMAX;
MACRO_NL_ARGMAX NL_MSGMAX;
MACRO_NL_ARGMAX NL_NMAX;
MACRO_NL NL_SETD;
MACRO_NL_ARGMAX NL_SETMAX;
MACRO_NL_ARGMAX NL_TEXTMAX;
MACRO_NMAGIC NMAGIC;
MACRO_NMOUNT NMOUNT;
MACRO_NMSTATES NMSTATES;
MACRO_NL3 NOAL;
MACRO_NOASSIGN NOASSIGN;
MACRO_NOBUSY NOBUSY_POLLTIME;
MACRO_SSYS NOCD;
MACRO_NOCLASS NOCLASS;
MACRO_NOCRED NOCRED;
MACRO_CLONE NODEBOUND_DEV;
MACRO_NODEID NODEID_UNKNOWN;
MACRO_CLONE NODESPECIFIC_DEV;
MACRO_NODEV NODEV;
MACRO_NOEXPR NOEXPR;
MACRO_NOFILE NOFILE;
MACRO_ISIG NOFLSH;
MACRO_NOPOST NOISIG;
MACRO_NOKEY NOKEY;
MACRO_MAPINOK NOMAPIN;
vcexcl NONEXCL;
MACRO_NONL NONL;
MACRO_NONROOT NONROOT_USR;
MACRO_NONROOT_USRX NONROOT_USRX;
MACRO_NON NON_FATAL;
MACRO_NON NON_FATALOC;
MACRO_NOPID NOPID;
MACRO_NOPOST NOPOST;
MACRO_MAPINOK NOREMAP;
MACRO_NORMAL NORMAL;
MACRO_NORMALRETURN NORMALRETURN;
MACRO_EVEN NORMAL_P;
MACRO_STEP NORMAL_STEP;
MACRO_NOASSIGN NORUN;
MACRO_NOSCROLL NOSCROLL;
MACRO_NOSTR NOSTR;
MACRO_NOTACTIVE NOTACTIVE;
$E1B461D6ADC649FA7943809455C6C6EE NOTIFY_AUTOBPT;
$E1B461D6ADC649FA7943809455C6C6EE NOTIFY_BPT;
$E1B461D6ADC649FA7943809455C6C6EE NOTIFY_SYSCALL;
MACRO_NOTPRESENT NOTPRESENT;
MACRO_NOT_IN NOT_IN_HW;
MACRO_NOT NOT_OK;
MACRO_NOT_READABLE NOT_READABLE;
name_pos NOT_SEQUENTIAL;
MACRO_NOVELL NOVELL_LENGTH;
MACRO_NOVELL NOVELL_TYPE;
MACRO_NO_RECOVERY NO_ADDRESS;
MACRO_NO_ANS NO_ANS;
MACRO_NO_AUTH NO_AUTH;
MACRO_NO_AUTHINFO NO_AUTHINFO;
MACRO_NO_BD NO_BD_A;
MACRO_NO_BD NO_BD_K;
MACRO_BUSYTIMEOUT NO_BUSYTIMEOUT;
MACRO_NO_CACHE NO_CACHE;
MACRO_NO_COLOR NO_CHECK_CYCLE;
MACRO_NO_COLOR NO_COLOR;
MACRO_NO NO_COMPETING_THREADS;
MACRO_NO_RECOVERY NO_DATA;
MACRO_EXP NO_FLOW_EXP;
symfollow NO_FOLLOW;
MACRO_NO_IP NO_IP_TP_CKSUM;
MACRO_NO_JUSTIFICATION NO_JUSTIFICATION;
MACRO_NO NO_LOCKS_HELD;
MACRO_NO_Ldv NO_Ldv;
zotypes NO_OBJ;
MACRO_EVEN NO_P;
MACRO_NO_RECOVERY NO_RECOVERY;
MACRO_DET NO_SCHR_DET;
MACRO_NO_TERMINAL NO_TERMINAL;
MACRO_NO_TIMEOUTS NO_TIMEOUTS;
MACRO_NPCHASH NPCHASH;
nispasswd_code NPD_BUFTOOSMALL;
nispasswd_code NPD_CKGENFAILED;
nispasswd_code NPD_DECRYPTFAIL;
nispasswd_code NPD_ENCRYPTFAIL;
nispasswd_status NPD_FAILED;
nispasswd_field NPD_GECOS;
nispasswd_code NPD_IDENTINVALID;
nispasswd_code NPD_INVALIDARGS;
nispasswd_code NPD_KEYNOTREENC;
nispasswd_code NPD_KEYSUPDATED;
nispasswd_code NPD_NISERROR;
nispasswd_code NPD_NOPASSWD;
nispasswd_code NPD_NOSHDWINFO;
nispasswd_code NPD_NOSUCHENTRY;
nispasswd_code NPD_NOTAGED;
nispasswd_code NPD_NOTMASTER;
nispasswd_status NPD_PARTIALSUCCESS;
nispasswd_code NPD_PASSINVALID;
nispasswd_field NPD_PASSWD;
nispasswd_code NPD_PERMDENIED;
nispasswd_field NPD_SECRETKEY;
nispasswd_code NPD_SHDWCORRUPT;
nispasswd_field NPD_SHELL;
nispasswd_code NPD_SRVNOTRESP;
nispasswd_status NPD_SUCCESS;
nispasswd_code NPD_SYSTEMERR;
nispasswd_status NPD_TRYAGAIN;
nispasswd_code NPD_VERFINVALID;
MACRO_FABRIC NPORT_BUSY;
MACRO_NPORT NPORT_NOT_AVAIL_PERM;
MACRO_NPORT NPORT_NOT_AVAIL_TEMP;
MACRO_NPRGREG NPRGREG;
MACRO_NPRXFILLER NPRXFILLER;
MACRO_NPRXGREG NPRXGREG;
MACRO_NPRXOREG NPRXOREG;
MACRO_NQFRETRY NQFRETRY;
MACRO_NRBRW NRBRW;
MACRO_SR0 NR_SR0;
MACRO_NSIG NSIG;
MACRO_NSIGBUS NSIGBUS;
MACRO_NSIGCLD NSIGCLD;
MACRO_NSIGEMT NSIGEMT;
MACRO_NSIGFPE NSIGFPE;
MACRO_NSIGILL NSIGILL;
MACRO_NSIGPOLL NSIGPOLL;
MACRO_NSIGPROF NSIGPROF;
MACRO_NSIGSEGV NSIGSEGV;
MACRO_NSIGTRAP NSIGTRAP;
MACRO_NSLC NSLC;
MACRO_NSMADDRPROC1 NSMADDRPROC1_NULL;
MACRO_NSMADDRPROC1 NSMADDRPROC1_REG;
MACRO_NSMADDRPROC1 NSMADDRPROC1_UNREG;
MACRO_NSM NSM_ADDR_PROGRAM;
MACRO_NSM NSM_ADDR_V1;
MACRO_NSPEEDS NSPEEDS;
MACRO_NSS NSS_BUFLEN_ATTRDB;
MACRO_NSS NSS_BUFLEN_AUDITUSER;
MACRO_NSS NSS_BUFLEN_AUTHATTR;
MACRO_NSS NSS_BUFLEN_BOOTPARAMS;
MACRO_NSS NSS_BUFLEN_ETHERS;
MACRO_NSS NSS_BUFLEN_EXECATTR;
MACRO_NSS NSS_BUFLEN_NETGROUP;
MACRO_NSS NSS_BUFLEN_NETWORKS;
MACRO_NSS NSS_BUFLEN_PASSWD;
MACRO_NSS NSS_BUFLEN_PROFATTR;
MACRO_NSS NSS_BUFLEN_PROTOCOLS;
MACRO_NSS NSS_BUFLEN_PUBLICKEY;
MACRO_NSS NSS_BUFLEN_RPC;
MACRO_NSS NSS_BUFLEN_SERVICES;
MACRO_NSS NSS_BUFLEN_SHADOW;
MACRO_NSS NSS_BUFLEN_USERATTR;
MACRO_NSS NSS_BUFSIZ;
MACRO_NSS NSS_DBOP_ADDR_2NAME;
MACRO_NSS NSS_DBOP_ATTRDB_BYNAME;
MACRO_NSS NSS_DBOP_AUDITUSER_BYNAME;
MACRO_NSS NSS_DBOP_AUTHATTR_BYNAME;
MACRO_NSS NSS_DBOP_BOOTPARAMS_BYNAME;
MACRO_NSS NSS_DBOP_DESTRUCTOR;
MACRO_NSS NSS_DBOP_ENDENT;
MACRO_NSS NSS_DBOP_ETHERS_HOSTTON;
MACRO_NSS NSS_DBOP_ETHERS_NTOHOST;
MACRO_NSS NSS_DBOP_EXECATTR_BYID;
MACRO_NSS NSS_DBOP_EXECATTR_BYNAME;
MACRO_NSS NSS_DBOP_EXECATTR_BYNAMEID;
MACRO_NSS NSS_DBOP_GETENT;
MACRO_NSS NSS_DBOP_GROUP_BYGID;
MACRO_NSS NSS_DBOP_GROUP_BYMEMBER;
MACRO_NSS NSS_DBOP_GROUP_BYNAME;
MACRO_NSS NSS_DBOP_HOSTS_BYADDR;
MACRO_NSS NSS_DBOP_HOSTS_BYNAME;
MACRO_NSS NSS_DBOP_IPNODES_BYADDR;
MACRO_NSS NSS_DBOP_IPNODES_BYNAME;
MACRO_NSS NSS_DBOP_KEYS_BYNAME;
MACRO_NSS NSS_DBOP_NAME_2ADDR;
MACRO_NSS NSS_DBOP_NETGROUP_IN;
MACRO_NSS NSS_DBOP_NETGROUP_SET;
MACRO_NSS NSS_DBOP_NETMASKS_BYNET;
MACRO_NSS NSS_DBOP_NETWORKS_BYADDR;
MACRO_NSS NSS_DBOP_NETWORKS_BYNAME;
MACRO_NSS NSS_DBOP_PASSWD_BYNAME;
MACRO_NSS NSS_DBOP_PASSWD_BYUID;
MACRO_NSS NSS_DBOP_PRINTERS_BYNAME;
MACRO_NSS NSS_DBOP_PROFATTR_BYNAME;
MACRO_NSS NSS_DBOP_PROTOCOLS_BYNAME;
MACRO_NSS NSS_DBOP_PROTOCOLS_BYNUMBER;
MACRO_NSS NSS_DBOP_RPC_BYNAME;
MACRO_NSS NSS_DBOP_RPC_BYNUMBER;
MACRO_NSS NSS_DBOP_SERVICES_BYNAME;
MACRO_NSS NSS_DBOP_SERVICES_BYPORT;
MACRO_NSS NSS_DBOP_SETENT;
MACRO_NSS NSS_DBOP_SHADOW_BYNAME;
MACRO_NSS NSS_DBOP_USERATTR_BYNAME;
MACRO_NSS NSS_DBOP_next_ipv6_iter;
MACRO_NSS NSS_DBOP_next_iter;
MACRO_NSS NSS_DBOP_next_noiter;
$EA75FB217E367D75530EC23DCD9FC6C8 NSS_HOST;
$EA75FB217E367D75530EC23DCD9FC6C8 NSS_HOST6;
MACRO_NSS NSS_INCLUDE_UNSAFE;
MACRO_NSS NSS_LINELEN_ATTRDB;
MACRO_NSS NSS_LINELEN_AUDITUSER;
MACRO_NSS NSS_LINELEN_AUTHATTR;
MACRO_NSS NSS_LINELEN_BOOTPARAMS;
MACRO_NSS NSS_LINELEN_ETHERS;
MACRO_NSS NSS_LINELEN_EXECATTR;
MACRO_NSS NSS_LINELEN_GROUP;
MACRO_NSS NSS_LINELEN_HOSTS;
MACRO_NSS NSS_LINELEN_IPNODES;
MACRO_NSS NSS_LINELEN_NETMASKS;
MACRO_NSS NSS_LINELEN_NETWORKS;
MACRO_NSS NSS_LINELEN_PASSWD;
MACRO_NSS NSS_LINELEN_PRINTERS;
MACRO_NSS NSS_LINELEN_PROFATTR;
MACRO_NSS NSS_LINELEN_PROTOCOLS;
MACRO_NSS NSS_LINELEN_PUBLICKEY;
MACRO_NSS NSS_LINELEN_RPC;
MACRO_NSS NSS_LINELEN_SERVICES;
MACRO_NSS NSS_LINELEN_SHADOW;
MACRO_NSS NSS_LINELEN_USERATTR;
MACRO_NSS NSS_MMAPLEN_EXECATTR;
nss_netgr_argn NSS_NETGR_DOMAIN;
nss_netgr_status NSS_NETGR_FOUND;
nss_netgr_argn NSS_NETGR_MACHINE;
nss_netgr_argn NSS_NETGR_N;
nss_netgr_status NSS_NETGR_NO;
nss_netgr_status NSS_NETGR_NOMEM;
nss_netgr_argn NSS_NETGR_USER;
$1323AA4975EEFDF9DDFDA31CD873A283 NSS_NISSERVDNS_TRYAGAIN;
$1323AA4975EEFDF9DDFDA31CD873A283 NSS_NOTFOUND;
$EA75FB217E367D75530EC23DCD9FC6C8 NSS_SERV;
MACRO_NSS NSS_STR_PARSE_ERANGE;
MACRO_NSS NSS_STR_PARSE_PARSE;
MACRO_NSS NSS_STR_PARSE_SUCCESS;
$1323AA4975EEFDF9DDFDA31CD873A283 NSS_SUCCESS;
$1323AA4975EEFDF9DDFDA31CD873A283 NSS_TRYAGAIN;
$1323AA4975EEFDF9DDFDA31CD873A283 NSS_UNAVAIL;
nss_dbp_flags NSS_USE_DEFAULT_CONFIG;
MACRO_NSYSCALL NSYSCALL;
MACRO_NS NS_ALG_EXPIRE_ONLY;
MACRO_NS NS_ALG_MD5RSA;
MACRO_NS NS_ALG_PRIVATE_OID;
MACRO_NS NS_CMPRSFLGS;
MACRO_NS NS_DEFAULTPORT;
MACRO_NS NS_HFIXEDSZ;
MACRO_NS NS_IN6ADDRSZ;
MACRO_NS NS_INADDRSZ;
MACRO_NS NS_INT16SZ;
MACRO_NS NS_INT32SZ;
MACRO_NS NS_INT8SZ;
MACRO_NS NS_KEY_EMAIL;
MACRO_NS NS_KEY_ENTITY;
MACRO_NS NS_KEY_EXPERIMENTAL;
MACRO_NS NS_KEY_IPSEC;
MACRO_NS NS_KEY_NO_AUTH;
MACRO_NS NS_KEY_NO_CONF;
MACRO_NS NS_KEY_RESERVED10;
MACRO_NS NS_KEY_RESERVED11;
MACRO_NS NS_KEY_RESERVED3;
MACRO_NS NS_KEY_RESERVED4;
MACRO_NS NS_KEY_RESERVED_BITMASK;
MACRO_NS NS_KEY_SIGNATORYMASK;
MACRO_NS NS_KEY_TYPEMASK;
MACRO_NS NS_KEY_TYPE_AUTH_CONF;
MACRO_NS NS_KEY_TYPE_AUTH_ONLY;
MACRO_NS NS_KEY_TYPE_CONF_ONLY;
MACRO_NS NS_KEY_TYPE_NO_KEY;
MACRO_NS NS_KEY_USERACCOUNT;
MACRO_NS NS_KEY_ZONEKEY;
MACRO_NS NS_MAXCDNAME;
MACRO_NS NS_MAXDNAME;
MACRO_NS NS_MAXLABEL;
MACRO_NS NS_MD5RSA_MAX_BASE64;
MACRO_NS NS_MD5RSA_MAX_BITS;
MACRO_NS NS_MD5RSA_MAX_BYTES;
MACRO_NS NS_MD5RSA_MIN_BITS;
MACRO_NS NS_NXT_BITS;
MACRO_NS NS_PACKETSZ;
MACRO_NS NS_QFIXEDSZ;
MACRO_NS NS_RRFIXEDSZ;
MACRO_NS NS_SIG_ALG;
MACRO_NS NS_SIG_EXPIR;
MACRO_NS NS_SIG_FOOT;
MACRO_NS NS_SIG_LABELS;
MACRO_NS NS_SIG_OTTL;
MACRO_NS NS_SIG_SIGNED;
MACRO_NS NS_SIG_SIGNER;
MACRO_NS NS_SIG_TYPE;
MACRO_TABLDISC NTABLDISC;
MACRO_NTAGS NTAGS;
MACRO_NTARGETS NTARGETS;
MACRO_NTARGETS_WIDE NTARGETS_WIDE;
MACRO_NTREC NTREC;
MACRO_OTTYDISC NTTYDISC;
MACRO_NT NT_ASRS;
MACRO_NT NT_AUXV;
MACRO_NT NT_GWINDOWS;
MACRO_NT NT_LWPSINFO;
MACRO_NT NT_LWPSTATUS;
MACRO_NT NT_PLATFORM;
MACRO_NT NT_PRCRED;
MACRO_NT NT_PRFPREG;
MACRO_NT NT_PRPSINFO;
MACRO_NT NT_PRSTATUS;
MACRO_NT NT_PRXREG;
MACRO_NT NT_PSINFO;
MACRO_NT NT_PSTATUS;
MACRO_NT NT_UTSNAME;
MACRO_NULL NULL;
MACRO_NULLPROC NULLPROC;
MACRO_NULL_xdrproc NULL_xdrproc_t;
MACRO_NUMERALS NUMERALS_CONTEXTUAL;
MACRO_NUMERALS NUMERALS_NATIONAL;
MACRO_NUMERALS NUMERALS_NOMINAL;
MACRO_NUMLOCK NUMLOCK;
MACRO_NUMLOCK NUMLOCKMASK;
MACRO_NUM NUM_ATTRIBUTES;
MACRO_NUM_IMPL NUM_IMPL_SENSE_KEYS;
MACRO_NUM_INTS NUM_INTS;
MACRO_NUM_INTS NUM_REGS;
MACRO_NUM_SENSE NUM_SENSE_KEYS;
MACRO_NVECT NVECT;
MACRO_NVRAM NVRAM_FAIL;
MACRO_NVRAM NVRAM_WARN;
MACRO_NVR NVR_OFFSET;
MACRO_NWINDOW NWINDOW;
MACRO_SR1 NW_SR1;
MACRO_NZERO NZERO;
MACRO_N_UNDEF N_ABS;
MACRO_N_BTMASK N_BTMASK;
MACRO_N_BTMASK N_BTSHFT;
MACRO_N_UNDEF N_DEBUG;
MACRO_N N_IEEE_EXCEPTION;
MACRO_N_STC N_STC;
MACRO_N_BTMASK N_TMASK;
MACRO_N_BTMASK N_TMASK1;
MACRO_N_BTMASK N_TMASK2;
MACRO_N_BTMASK N_TSHIFT;
MACRO_N_UNDEF N_TV;
MACRO_N_UNDEF N_UNDEF;
MACRO_Orientation Numerals;
MACRO_O0 O0;
MACRO_O1 O1;
MACRO_O2 O2;
MACRO_O3 O3;
MACRO_O4 O4;
MACRO_O4 O5;
MACRO_O6 O6;
MACRO_O7 O7;
MACRO_OBIE OBIE_BUSERR;
MACRO_OBIE OBIE_CA;
MACRO_OBIE OBIE_IE;
MACRO_OBIE OBIE_INTR;
MACRO_OBIE OBIE_LEVEL2;
MACRO_OBIE OBIE_NOLOOP;
MACRO_OBIE OBIE_NORESET;
MACRO_OBP_NONODE OBP_BADNODE;
MACRO_OBP OBP_MAGIC;
MACRO_OBP_NONODE OBP_MAXDRVNAME;
MACRO_OBP_NONODE OBP_MAXPATHLEN;
MACRO_OBP_NONODE OBP_MAXPROPNAME;
MACRO_OBP_MB OBP_MB_ACTIVE;
MACRO_OBP_MB OBP_MB_BRKPT_IDLE;
MACRO_OBP_MB OBP_MB_ENTER_IDLE;
MACRO_OBP_MB OBP_MB_EXIT_STOP;
MACRO_OBP_MB OBP_MB_IDLE_HIGH;
MACRO_OBP_MB OBP_MB_IDLE_LOW;
MACRO_OBP_MB OBP_MB_WATCHDOG_STOP;
MACRO_OBP_NONODE OBP_NONODE;
MACRO_ROMVEC_VERSION OBP_PLUGIN_VERSION;
MACRO_ROMVEC_VERSION OBP_PSEUDO_ROMVEC_VERSION;
MACRO_OBP_NONODE OBP_STACKDEPTH;
MACRO_ROMVEC_VERSION OBP_V0_ROMVEC_VERSION;
MACRO_ROMVEC_VERSION OBP_V2_ROMVEC_VERSION;
MACRO_ROMVEC_VERSION OBP_V3_ROMVEC_VERSION;
MACRO_IBSIZE OBSIZE;
MACRO_OCFAuth OCFAuth_Auth_Error;
MACRO_OCFAuth OCFAuth_Auth_Failure;
MACRO_OCFAuth OCFAuth_Conversation_Interrupt;
MACRO_OCFAuth OCFAuth_Enter_PIN;
MACRO_OCFAuth OCFAuth_Enter_PIN_External;
MACRO_OCFAuth OCFAuth_Enter_Password;
MACRO_OCFAuth OCFAuth_Enter_Username;
MACRO_OCFAuth OCFAuth_ErrorMsg;
MACRO_OCFAuth OCFAuth_ErrorMsg_DELETE;
MACRO_OCFAuth OCFAuth_ErrorMsg_NOCONF;
MACRO_OCFAuth OCFAuth_Failed;
MACRO_OCFAuth OCFAuth_Insert_Card;
MACRO_OCFAuth OCFAuth_Internal_Error;
MACRO_OCFAuth OCFAuth_Invalid_Card;
MACRO_OCFAuth OCFAuth_Invalid_PIN;
MACRO_OCFAuth OCFAuth_Invalid_Password;
MACRO_OCFAuth OCFAuth_Invalid_Username;
MACRO_OCFAuth OCFAuth_Loopback;
MACRO_OCFAuth OCFAuth_No_Card;
MACRO_OCFAuth OCFAuth_Password_Verify_ERROR;
MACRO_OCFAuth OCFAuth_Password_Verify_OK;
MACRO_OCFAuth OCFAuth_Password_Verify_UNABLE;
MACRO_OCFAuth OCFAuth_Retry_Operation;
MACRO_OCFAuth OCFAuth_Success;
MACRO_OCFAuth OCFAuth_TextMsg;
MACRO_OCFAuth OCFAuth_TextMsg_DELETE;
MACRO_OCFAuth OCFAuth_TextMsg_INPUT;
MACRO_OCFAuth OCFAuth_TextMsg_NOCONF;
MACRO_OCFAuth OCFAuth_Unknown_Tag;
MACRO_OCFAuth OCFAuth_Verify_Password;
MACRO_OCF OCF_AuthOp;
MACRO_OCF OCF_AuthenticationError;
MACRO_OCF OCF_AuthenticationFailed;
MACRO_OCF OCF_CardError;
MACRO_OCF OCF_CardLocked;
MACRO_OCF OCF_CardSpec_UseHandle;
MACRO_OCF OCF_CardUnlocked;
MACRO_OCF OCF_DuplicateClient;
MACRO_OCF OCF_DuplicateEvent;
MACRO_OCF OCF_DuplicateHandler;
MACRO_OCF OCF_EncodingError;
MACRO_OCF OCF_Event_CardError;
MACRO_OCF OCF_Event_CardInserted;
MACRO_OCF OCF_Event_CardRemoved;
MACRO_OCF OCF_Event_CardReset;
MACRO_OCF OCF_Event_Exception;
MACRO_OCF OCF_Exception;
MACRO_OCF OCF_InvalidCardHandle;
MACRO_OCF OCF_InvalidClientHandle;
MACRO_OCF OCF_InvalidEventHandle;
MACRO_OCF OCF_InvalidPassword;
MACRO_OCF OCF_InvalidPin;
MACRO_OCF OCF_NoCard;
MACRO_OCF OCF_NoCardsConfigured;
MACRO_OCF OCF_NoPermission;
MACRO_OCF OCF_NoReadersConfigured;
MACRO_OCF OCF_NoSuchProperty;
MACRO_OCF OCF_OperationTimeout;
MACRO_OCF OCF_PINAlreadySet;
MACRO_OCF OCF_ParameterError;
MACRO_OCF OCF_ReaderError;
MACRO_OCF OCF_ResourceUnavailable;
MACRO_OCF OCF_ServerError;
MACRO_OCF OCF_Success;
MACRO_OCF OCF_Timeout_NoBlock;
MACRO_OCF OCF_UnknownError;
MACRO_OCF OCF_UnknownResource;
MACRO_OCF OCF_UnsupportedAuthMech;
MACRO_OCF OCF_VerifyError;
MACRO_OCF OCF_VersionMismatch;
MACRO_OPOST OCRNL;
MACRO_OCTET OCTET_LENGTH;
MACRO_LCASE ODDP;
MACRO_EVEN ODD_P;
MACRO_OPOST OFDEL;
MACRO_OPOST OFILL;
MACRO_OFLOW OFLOW_CTL;
MACRO_OFS OFS_MAGIC;
MACRO_OIOC OIOC;
MACRO_OPOST OLCUC;
MACRO_OLDDEV OLDDEV;
MACRO_OLD_ALLOW OLD_ALLOW;
nfssys_op OLD_ASYNC_DAEMON;
MACRO_OLD_ALLOW OLD_DISALLOW;
MACRO_OLD OLD_ENV_VALUE;
MACRO_OLD OLD_ENV_VAR;
nfssys_op OLD_LM_SVC;
MACRO_OLD_MAXFIDSZ OLD_MAXFIDSZ;
nfssys_op OLD_NFS_CNVT;
nfssys_op OLD_NFS_FH_TO_FID;
nfssys_op OLD_NFS_SVC;
MACRO_TIME OLD_TIME;
MACRO_OMAGIC OMAGIC;
MACRO_OMAXMAJ OMAXMAJ;
MACRO_OMAXMIN OMAXMIN;
MACRO_ONBITSMAJOR ONBITSMAJOR;
MACRO_ONBITSMAJOR ONBITSMINOR;
MACRO_ONE ONE_MEG;
MACRO_OPOST ONLCR;
MACRO_OPOST ONLRET;
MACRO_OPOST ONOCR;
MACRO_ONPAGE ONPAGE;
MACRO_OOPS OOPS;
MACRO_OP64R OP64R_READY;
MACRO_OP64R OP64R_UPGRADE_RECOMMENDED;
MACRO_OP64R OP64R_UPGRADE_REQUIRED;
MACRO_OPENFAIL OPENFAIL;
MACRO_ATEXIT OPEN_MAX;
MACRO_OPOST OPOST;
MACRO_OPROMCHILD OPROMCHILD;
MACRO_OPROMCONS OPROMCONS_NOT_WSCONS;
MACRO_OPROMCONS OPROMCONS_OPENPROM;
MACRO_OPROMCONS OPROMCONS_STDIN_IS_KBD;
MACRO_OPROMCONS OPROMCONS_STDOUT_IS_FB;
MACRO_OPROMDEV2PROMNAME OPROMDEV2PROMNAME;
MACRO_OPROMGETBOOTARGS OPROMGETBOOTARGS;
MACRO_OPROMGETCONS OPROMGETCONS;
MACRO_OPROMGETFBNAME OPROMGETFBNAME;
MACRO_OPROMGETOPT OPROMGETOPT;
MACRO_OPROMGETPROP OPROMGETPROP;
MACRO_OPROMGETPROPLEN OPROMGETPROPLEN;
MACRO_OPROMGETVERSION OPROMGETVERSION;
MACRO_OPROMMAXPARAM OPROMMAXPARAM;
MACRO_OPROMNEXT OPROMNEXT;
MACRO_OPROMNXTOPT OPROMNXTOPT;
MACRO_OPROMNXTPROP OPROMNXTPROP;
MACRO_OPROMPATH2DRV OPROMPATH2DRV;
MACRO_OPROMPROM2DEVNAME OPROMPROM2DEVNAME;
MACRO_OPROMREADY64 OPROMREADY64;
MACRO_OPROMSETNODEID OPROMSETNODEID;
MACRO_OPROMSETOPT OPROMSETOPT;
MACRO_OPROMSETOPT2 OPROMSETOPT2;
MACRO_OPROMU2P OPROMU2P;
MACRO_ORDINARY ORDINARY;
MACRO_ORIENTATION ORIENTATION_CONTEXTUAL;
MACRO_ORIENTATION ORIENTATION_LTR;
MACRO_ORIENTATION ORIENTATION_RTL;
MACRO_ORIENTATION ORIENTATION_TTBLR;
MACRO_ORIENTATION ORIENTATION_TTBRL;
MACRO_SR1 OR_SR1;
MACRO_OSC OSC_10;
MACRO_OSC OSC_9;
MACRO_OTHEROS OTHEROS;
MACRO_ERROR OTHER_ERROR;
MACRO_OBJ OTHER_OBJ;
MACRO_OTTYDISC OTTYDISC;
MACRO_OTYPCNT OTYPCNT;
MACRO_OTYP OTYP_BLK;
MACRO_OTYP OTYP_CHR;
MACRO_OTYP OTYP_LYR;
MACRO_OTYP OTYP_MNT;
MACRO_OTYP OTYP_SWP;
MACRO_OUTLINE OUTLINE;
MACRO_OUTSCREEN OUTSCREEN;
MACRO_OUTSCREEN OUTUARTA;
MACRO_OUTSCREEN OUTUARTB;
MACRO_OUTUARTC OUTUARTC;
MACRO_OUTUARTC OUTUARTD;
MACRO_OVERFLOW OVERFLOW;
MACRO_WORLD OWNER_DEFAULT;
MACRO_O_ACCMODE O_ACCMODE;
MACRO_O_VISIBLE O_ACTIVE;
MACRO_O_TANDEM O_ALLDELAY;
MACRO_O_TANDEM O_ANYP;
MACRO_O O_APPEND;
MACRO_O_VISIBLE O_AUTOSKIP;
MACRO_O_BITSMAJOR O_BITSMAJOR;
MACRO_O_BITSMAJOR O_BITSMINOR;
MACRO_O_VISIBLE O_BLANK;
MACRO_O_TANDEM O_BS0;
MACRO_O_TANDEM O_BS1;
MACRO_O_TANDEM O_BSDELAY;
MACRO_O_VISIBLE O_BS_OVERLOAD;
MACRO_O_TANDEM O_CBREAK;
MACRO_O_TANDEM O_CR0;
MACRO_O_TANDEM O_CR1;
MACRO_O_TANDEM O_CR2;
MACRO_O_TANDEM O_CR3;
MACRO_O_TANDEM O_CRDELAY;
MACRO_O O_CREAT;
MACRO_O_TANDEM O_CRMOD;
MACRO_O_TANDEM O_CRTBS;
MACRO_O_TANDEM O_CRTERA;
MACRO_O_TANDEM O_CRTKIL;
MACRO_O_TANDEM O_CTLECH;
MACRO_O_TANDEM O_DECCTQ;
MACRO_O O_DSYNC;
MACRO_O_TANDEM O_ECHO;
MACRO_O_VISIBLE O_EDIT;
MACRO_O_TANDEM O_EVENP;
MACRO_O O_EXCL;
MACRO_O_TANDEM O_FF0;
MACRO_O_TANDEM O_FF1;
MACRO_O_TANDEM O_FLUSHO;
MACRO_O_ONEVALUE O_IGNORECASE;
MACRO_O_TANDEM O_L001000;
MACRO_O O_LARGEFILE;
MACRO_O_TANDEM O_LCASE;
MACRO_O_TANDEM O_LITOUT;
MACRO_O_BITSMAJOR O_MAXMAJ;
MACRO_O_BITSMAJOR O_MAXMIN;
MACRO_O_TANDEM O_MDMBUF;
MACRO_O O_NDELAY;
MACRO_O_TANDEM O_NL0;
MACRO_O_TANDEM O_NL1;
MACRO_O_TANDEM O_NL2;
MACRO_O_TANDEM O_NL3;
MACRO_O_TANDEM O_NLDELAY;
MACRO_O_VISIBLE O_NL_OVERLOAD;
MACRO_O O_NOCTTY;
MACRO_O_TANDEM O_NOFLSH;
MACRO_O_TANDEM O_NOHANG;
MACRO_O O_NONBLOCK;
MACRO_O_ONEVALUE O_NONCYCLIC;
MACRO_O_VISIBLE O_NULLOK;
MACRO_O_TANDEM O_ODDP;
MACRO_O_ONEVALUE O_ONEVALUE;
MACRO_O_TANDEM O_PASS8;
MACRO_O_VISIBLE O_PASSOK;
MACRO_O_TANDEM O_PENDIN;
MACRO_O_TANDEM O_PRTERA;
MACRO_O_VISIBLE O_PUBLIC;
MACRO_O_TANDEM O_RAW;
MACRO_O O_RDONLY;
MACRO_O O_RDWR;
MACRO_O_ONEVALUE O_ROWMAJOR;
MACRO_O O_RSYNC;
MACRO_O_ONEVALUE O_SELECTABLE;
MACRO_O_ONEVALUE O_SHOWDESC;
MACRO_O_ONEVALUE O_SHOWMATCH;
MACRO_O_SI O_SI_GETUDATA;
MACRO_O_VISIBLE O_STATIC;
MACRO_O O_SYNC;
MACRO_O_TANDEM O_TAB0;
MACRO_O_TANDEM O_TAB1;
MACRO_O_TANDEM O_TAB2;
MACRO_O_TANDEM O_TANDEM;
MACRO_O_TANDEM O_TBDELAY;
MACRO_O_TANDEM O_TILDE;
MACRO_O_TANDEM O_TOSTOP;
MACRO_O O_TRUNC;
MACRO_O_VISIBLE O_VISIBLE;
MACRO_O_TANDEM O_VTDELAY;
MACRO_O_VISIBLE O_WRAP;
MACRO_O O_WRONLY;
MACRO_O_TANDEM O_XTABS;
MACRO_Orientation Orientation;
MACRO_Orientation OutOnlyTextDescr;
MACRO_P1284IOC P1284IOC_FAKE_INTR;
MACRO_P1284IOC P1284IOC_ONE;
MACRO_P1284IOC P1284IOC_TWO;
MACRO_PACKETSZ PACKETSZ;
MACRO_PAD0 PAD0;
MACRO_PAD1 PAD1;
MACRO_PAD2 PAD2;
MACRO_PAD3 PAD3;
MACRO_PAD4 PAD4;
MACRO_PAD5 PAD5;
MACRO_PAD6 PAD6;
MACRO_PAD7 PAD7;
MACRO_PAD8 PAD8;
MACRO_PAD9 PAD9;
MACRO_PADDOT PADDOT;
MACRO_PADENTER PADENTER;
MACRO_PADEQUAL PADEQUAL;
MACRO_PADKEYS PADKEYS;
MACRO_PADMINUS PADMINUS;
MACRO_PADPLUS PADPLUS;
MACRO_PADSEP PADSEP;
MACRO_PADSLASH PADSLASH;
MACRO_PADSTAR PADSTAR;
MACRO_PAD_SAVPATH PAD_ABSPATH;
MACRO_PAD_SAVPATH PAD_AUDITME;
MACRO_PAD_SAVPATH PAD_CORE;
MACRO_PAD PAD_FAILURE;
MACRO_PAD_SAVPATH PAD_FMAC;
MACRO_PAD_SAVPATH PAD_FPRIV;
MACRO_PAD PAD_FPRIVUSE;
MACRO_PAD_SAVPATH PAD_IFLOAT;
MACRO_PAD_SAVPATH PAD_LFLOAT;
MACRO_PAD PAD_MACIOCTL;
MACRO_PAD PAD_MACKILL;
MACRO_PAD PAD_MACMASK;
MACRO_PAD PAD_MACREAD;
MACRO_PAD PAD_MACSEARCH;
MACRO_PAD PAD_MACTRACE;
MACRO_PAD PAD_MACUSE;
MACRO_PAD PAD_MACWRITE;
MACRO_PAD_SAVPATH PAD_MLD;
MACRO_PAD_SAVPATH PAD_NOATTRB;
MACRO_PAD_SAVPATH PAD_NOAUDIT;
MACRO_PAD PAD_NONATTR;
MACRO_PAD_SAVPATH PAD_NOPATH;
MACRO_PAD_SAVPATH PAD_PATHFND;
MACRO_PAD_SAVPATH PAD_SAVPATH;
MACRO_PAD_SAVPATH PAD_SMAC;
MACRO_PAD_SAVPATH PAD_SPRIV;
MACRO_PAD PAD_SPRIVUSE;
MACRO_PAD_SAVPATH PAD_SUSERNO;
MACRO_PAD_SAVPATH PAD_SUSEROK;
MACRO_PAD_SAVPATH PAD_TRUE_CREATE;
MACRO_PAGELENGTH_DAD_MODE PAGELENGTH_DAD_MODE_CACHE;
MACRO_PAGELENGTH_DAD_MODE PAGELENGTH_DAD_MODE_CACHE_SCSI3;
MACRO_PAGELENGTH_DAD PAGELENGTH_DAD_MODE_ERR_RECOV;
MACRO_PAGELENGTH_DAD_MODE PAGELENGTH_DAD_MODE_ERR_RECOV_CCS;
MACRO_PAGELENGTH_DAD_MODE PAGELENGTH_MODE_CONTROL;
MACRO_PAGELENGTH PAGELENGTH_MODE_CONTROL_SCSI3;
MACRO_FF0 PAGEOUT;
MACRO_PAGE PAGE_HASHAVELEN;
MACRO_PAGE PAGE_HASHVPSHIFT;
MACRO_PAGE PAGE_IO_INUSE;
MACRO_PAGE PAGE_IO_WANTED;
MACRO_PAM PAM_ABORT;
MACRO_PAM PAM_ACCT_EXPIRED;
MACRO_PAM PAM_AUTHINFO_UNAVAIL;
MACRO_PAM PAM_AUTHTOK;
MACRO_PAM PAM_AUTHTOK_DISABLE_AGING;
MACRO_PAM PAM_AUTHTOK_ERR;
MACRO_PAM PAM_AUTHTOK_EXPIRED;
MACRO_PAM PAM_AUTHTOK_LOCK_BUSY;
MACRO_PAM PAM_AUTHTOK_RECOVERY_ERR;
MACRO_PAM PAM_AUTH_ERR;
MACRO_PAM PAM_BUF_ERR;
MACRO_PAM PAM_CHANGE_EXPIRED_AUTHTOK;
MACRO_PAM PAM_CONV;
MACRO_PAM PAM_CONV_ERR;
MACRO_PAM PAM_CONV_INTERRUPT;
MACRO_PAM PAM_CRED_ERR;
MACRO_PAM PAM_CRED_EXPIRED;
MACRO_PAM PAM_CRED_INSUFFICIENT;
MACRO_PAM PAM_CRED_UNAVAIL;
MACRO_PAM PAM_DELETE_CRED;
MACRO_PAM PAM_DISALLOW_NULL_AUTHTOK;
MACRO_PAM PAM_ERROR_MSG;
MACRO_PAM PAM_ESTABLISH_CRED;
MACRO_PAM PAM_IGNORE;
MACRO_PAM PAM_MAXTRIES;
MACRO_PAM PAM_MAX_MSG_SIZE;
MACRO_PAM PAM_MAX_NUM_MSG;
MACRO_PAM PAM_MAX_RESP_SIZE;
MACRO_PAM PAM_MSG_NOCONF;
MACRO_PAM PAM_MSG_VERSION;
MACRO_PAM PAM_NEW_AUTHTOK_REQD;
MACRO_PAM PAM_NO_MODULE_DATA;
MACRO_PAM PAM_OLDAUTHTOK;
MACRO_PAM PAM_OPEN_ERR;
MACRO_PAM PAM_PERM_DENIED;
MACRO_PAM PAM_PRELIM_CHECK;
MACRO_PAM PAM_PROMPT_ECHO_OFF;
MACRO_PAM PAM_PROMPT_ECHO_ON;
MACRO_PAM PAM_REFRESH_CRED;
MACRO_PAM PAM_REINITIALIZE_CRED;
MACRO_PAM PAM_RHOST;
MACRO_PAM PAM_RUSER;
MACRO_PAM PAM_SERVICE;
MACRO_PAM PAM_SERVICE_ERR;
MACRO_PAM PAM_SESSION_ERR;
MACRO_PAM PAM_SILENT;
MACRO_PAM PAM_SUCCESS;
MACRO_PAM PAM_SYMBOL_ERR;
MACRO_PAM PAM_SYSTEM_ERR;
MACRO_PAM PAM_TEXT_INFO;
MACRO_PAM PAM_TRY_AGAIN;
MACRO_PAM PAM_TTY;
MACRO_PAM PAM_UPDATE_AUTHTOK;
MACRO_PAM PAM_USER;
MACRO_PAM PAM_USER_PROMPT;
MACRO_PAM PAM_USER_UNKNOWN;
MACRO_ASCII_DEVID PANEL_DEVID;
MACRO_PANICBUFSIZE PANICBUFSIZE;
MACRO_PANICBUFVERS PANICBUFVERS;
MACRO_PANICBUFVERS PANICNVNAMELEN;
MACRO_PANICSTKSIZE PANICSTKSIZE;
MACRO_PAP PAP_MAX_PASSWD;
MACRO_CS8 PARENB;
MACRO_LINK PARENT_LINK;
MACRO_CIBAUD PAREXT;
MACRO_IGNBRK PARMRK;
MACRO_CS8 PARODD;
MACRO_PART PART_ACC_OW;
MACRO_PART PART_ACC_RO;
MACRO_PART PART_ACC_RW;
MACRO_PART PART_ACC_WO;
MACRO_PART_OPEN PART_CLOSE_INT;
MACRO_PART_OPEN PART_OPEN_INT;
MACRO_PART_OPEN PART_STABLE_INT;
MACRO_PASSWD PASSWD;
MACRO_COLL PASS_MAX;
MACRO_PATHSIZE PATHSIZE;
MACRO_ARG PATH_MAX;
MACRO_PBIND PBIND_NONE;
MACRO_PBIND PBIND_QUERY;
MACRO_PBIOC PBIOC;
MACRO_PBLKSIZ PBLKSIZ;
MACRO_PB PB_BEGIN_MONITOR;
MACRO_PB PB_BUTTON_PRESS;
MACRO_PB PB_CREATE_BUTTON_EVENT;
MACRO_PB PB_END_MONITOR;
MACRO_PB PB_GET_EVENTS;
MACRO_PSR_0 PC;
MACRO_PCAGENT PCAGENT;
MACRO_PCA_RDONLY PCA_ARCH;
MACRO_PCA_RDONLY PCA_DIR;
MACRO_PCA_RDONLY PCA_HIDDEN;
MACRO_PCA PCA_IO_OPENED;
MACRO_PCA PCA_IRQ_ISA;
MACRO_PCA PCA_IRQ_SHAREABLE;
MACRO_PCA PCA_IRQ_SMI_SHARE;
MACRO_PCA_RDONLY PCA_LABEL;
MACRO_PCA_RDONLY PCA_RDONLY;
MACRO_PCA PCA_RES_CONSTRAINT;
MACRO_PCA PCA_RES_NEED_IO;
MACRO_PCA PCA_RES_NEED_IRQ;
MACRO_PCA PCA_RES_NEED_MEM;
MACRO_PCA_RDONLY PCA_SYSTEM;
MACRO_PCB PCB_BPSEC;
MACRO_PCB PCB_HIDSEC;
MACRO_PCB PCB_MEDIA;
MACRO_PCB PCB_NFAT;
MACRO_PCB PCB_NHEAD;
MACRO_PCB PCB_NROOTENT;
MACRO_PCB PCB_NSEC;
MACRO_PCB PCB_RESSEC;
MACRO_PCB PCB_SPC;
MACRO_PCB PCB_SPF;
MACRO_PCB PCB_SPT;
MACRO_PCCFAULT PCCFAULT;
MACRO_PCCSIG PCCSIG;
MACRO_PCCS PCCS_MAGIC;
MACRO_PCCS PCCS_VERSION;
MACRO_PCC PCC_FIXED_DISK;
MACRO_PCC PCC_LAN;
MACRO_PCC PCC_MEMORY;
MACRO_PCC PCC_MULTI;
MACRO_PCC PCC_PARALLEL;
MACRO_PCC PCC_SERIAL;
MACRO_PCC PCC_VIDEO;
MACRO_PCNULL PCDSTOP;
MACRO_PCD PCD_ERASED;
MACRO_PCD PCD_UNUSED;
MACRO_PCFEXTSIZE PCFEXTSIZE;
MACRO_PCFNAMESIZE PCFNAMESIZE;
MACRO_PCFS PCFS_BOOTPART;
MACRO_PCFS_PART PCFS_BPB;
MACRO_PCFS PCFS_DISKTIMEOUT;
MACRO_PCFS PCFS_FAT16;
MACRO_PCFS PCFS_FAT32;
MACRO_PCFS PCFS_FATMOD;
MACRO_PCFS PCFS_FOLDCASE;
MACRO_PCFS PCFS_HIDDEN;
MACRO_PCFS PCFS_IRRECOV;
MACRO_PCFS PCFS_LOCKED;
MACRO_PCFS PCFS_MNT_FOLDCASE;
MACRO_PCFS PCFS_MNT_HIDDEN;
MACRO_PCFS PCFS_NOCHK;
MACRO_PCFS_PART PCFS_NUMPART;
MACRO_PCFS_PART PCFS_PART;
MACRO_PCFS PCFS_PCMCIA_NO_CIS;
MACRO_PCFS_PART PCFS_SIGN;
MACRO_PCFS_PART PCFS_TYPESTRING_OFFSET16;
MACRO_PCFS_PART PCFS_TYPESTRING_OFFSET32;
MACRO_PCFS PCFS_WANTED;
MACRO_PCF PCF_12BCLUSTER;
MACRO_PCF PCF_BADCLUSTER;
MACRO_PCF PCF_BADCLUSTER32;
MACRO_PCF PCF_ERRORCLUSTER;
MACRO_PCF PCF_FIRSTCLUSTER;
MACRO_PCF PCF_FREECLUSTER;
MACRO_PCF PCF_LASTCLUSTER;
MACRO_PCF PCF_LASTCLUSTER32;
MACRO_PCF PCF_LASTCLUSTERMARK;
MACRO_PCF PCF_LASTCLUSTERMARK32;
MACRO_PCF PCF_RESCLUSTER;
MACRO_PCF PCF_RESCLUSTER32;
MACRO_PCIF PCIF_MAGIC;
MACRO_PCIF PCIF_MIN_VERSION;
MACRO_PCIF PCIF_VERSION;
MACRO_PCIOC PCIOC;
MACRO_DOSOS12 PCIXOS;
MACRO_PCI PCI_ADDR_CONFIG;
MACRO_PCI PCI_ADDR_IO;
MACRO_PCI PCI_ADDR_MASK;
MACRO_PCI PCI_ADDR_MEM32;
MACRO_PCI PCI_ADDR_MEM64;
MACRO_PCI PCI_ALIAS_B;
MACRO_PCI PCI_BASE_IO_ADDR_M;
MACRO_PCI PCI_BASE_M_ADDR_M;
MACRO_PCI PCI_BASE_NUM;
MACRO_PCI PCI_BASE_PREF_M;
MACRO_PCI PCI_BASE_ROM_ADDR_M;
MACRO_PCI PCI_BASE_ROM_ENABLE;
MACRO_PCI PCI_BASE_SIZE;
MACRO_PCI PCI_BASE_SPACE_IO;
MACRO_PCI PCI_BASE_SPACE_M;
MACRO_PCI PCI_BASE_SPACE_MEM;
MACRO_PCI PCI_BASE_TYPE_ALL;
MACRO_PCI PCI_BASE_TYPE_LOW;
MACRO_PCI PCI_BASE_TYPE_M;
MACRO_PCI PCI_BASE_TYPE_MEM;
MACRO_PCI PCI_BASE_TYPE_RES;
MACRO_PCI PCI_BCNF_BCNTRL;
MACRO_PCI PCI_BCNF_BCNTRL_MAST_AB_MODE;
MACRO_PCI PCI_BCNF_BCNTRL_PARITY_ENABLE;
MACRO_PCI PCI_BCNF_BCNTRL_SERR_ENABLE;
MACRO_PCI PCI_BCNF_CAP_PTR;
MACRO_PCI PCI_BCNF_ILINE;
MACRO_PCI PCI_BCNF_IO_BASE_HI;
MACRO_PCI PCI_BCNF_IO_BASE_LOW;
MACRO_PCI PCI_BCNF_IO_LIMIT_HI;
MACRO_PCI PCI_BCNF_IO_LIMIT_LOW;
MACRO_PCI PCI_BCNF_IO_MASK;
MACRO_PCI PCI_BCNF_IPIN;
MACRO_PCI PCI_BCNF_LATENCY_TIMER;
MACRO_PCI PCI_BCNF_MEM_BASE;
MACRO_PCI PCI_BCNF_MEM_LIMIT;
MACRO_PCI PCI_BCNF_MEM_MASK;
MACRO_PCI PCI_BCNF_PF_BASE_HIGH;
MACRO_PCI PCI_BCNF_PF_BASE_LOW;
MACRO_PCI PCI_BCNF_PF_LIMIT_HIGH;
MACRO_PCI PCI_BCNF_PF_LIMIT_LOW;
MACRO_PCI PCI_BCNF_PRIBUS;
MACRO_PCI PCI_BCNF_ROM;
MACRO_PCI PCI_BCNF_SECBUS;
MACRO_PCI PCI_BCNF_SEC_STATUS;
MACRO_PCI PCI_BCNF_SUBBUS;
MACRO_PCI PCI_BIST_GO;
MACRO_PCI PCI_BIST_RESULT_M;
MACRO_PCI PCI_BIST_RESULT_OK;
MACRO_PCI PCI_BIST_SUPPORTED;
MACRO_PCI PCI_BRIDGE_CARDBUS;
MACRO_PCI PCI_BRIDGE_EISA;
MACRO_PCI PCI_BRIDGE_HOST;
MACRO_PCI PCI_BRIDGE_ISA;
MACRO_PCI PCI_BRIDGE_MC;
MACRO_PCI PCI_BRIDGE_NUBUS;
MACRO_PCI PCI_BRIDGE_OTHER;
MACRO_PCI PCI_BRIDGE_PCI;
MACRO_PCI PCI_BRIDGE_PCMCIA;
MACRO_PCI PCI_CAP_ID;
MACRO_PCI PCI_CAP_ID_PM;
MACRO_PCI PCI_CAP_NEXT_PTR;
MACRO_PCI PCI_CAP_NEXT_PTR_NULL;
MACRO_PCI PCI_CLASS_BRIDGE;
MACRO_PCI PCI_CLASS_COMM;
MACRO_PCI PCI_CLASS_DISPLAY;
MACRO_PCI PCI_CLASS_DOCK;
MACRO_PCI PCI_CLASS_INPUT;
MACRO_PCI PCI_CLASS_MASS;
MACRO_PCI PCI_CLASS_MEM;
MACRO_PCI PCI_CLASS_MM;
MACRO_PCI PCI_CLASS_NET;
MACRO_PCI PCI_CLASS_NONE;
MACRO_PCI PCI_CLASS_PERIPH;
MACRO_PCI PCI_CLASS_PROCESSOR;
MACRO_PCI PCI_CLASS_SERIALBUS;
MACRO_PCI PCI_CLK_33MHZ;
MACRO_PCI PCI_CLK_66MHZ;
MACRO_PCI PCI_COMM_BACK2BACK_ENAB;
MACRO_PCI PCI_COMM_GENERIC_XT;
MACRO_PCI PCI_COMM_IO;
MACRO_PCI PCI_COMM_MAE;
MACRO_PCI PCI_COMM_ME;
MACRO_PCI PCI_COMM_MEMWR_INVAL;
MACRO_PCI PCI_COMM_OTHER;
MACRO_PCI PCI_COMM_PALETTE_SNOOP;
MACRO_PCI PCI_COMM_PARALLEL;
MACRO_PCI PCI_COMM_PARALLEL_IF_BIDIRECT;
MACRO_PCI PCI_COMM_PARALLEL_IF_ECP;
MACRO_PCI PCI_COMM_PARALLEL_IF_GENERIC;
MACRO_PCI PCI_COMM_PARITY_DETECT;
MACRO_PCI PCI_COMM_SERIAL_IF_16450;
MACRO_PCI PCI_COMM_SERIAL_IF_16550;
MACRO_PCI PCI_COMM_SERIAL_IF_GENERIC;
MACRO_PCI PCI_COMM_SERR_ENABLE;
MACRO_PCI PCI_COMM_SPEC_CYC;
MACRO_PCI PCI_COMM_WAIT_CYC_ENAB;
MACRO_PCI PCI_CONF_ADDR_MASK;
MACRO_PCI PCI_CONF_BASCLASS;
MACRO_PCI PCI_CONF_BASE0;
MACRO_PCI PCI_CONF_BASE1;
MACRO_PCI PCI_CONF_BASE2;
MACRO_PCI PCI_CONF_BASE3;
MACRO_PCI PCI_CONF_BASE4;
MACRO_PCI PCI_CONF_BASE5;
MACRO_PCI PCI_CONF_BIST;
MACRO_PCI PCI_CONF_CACHE_LINESZ;
MACRO_PCI PCI_CONF_CAP_PTR;
MACRO_PCI PCI_CONF_CIS;
MACRO_PCI PCI_CONF_COMM;
MACRO_PCI PCI_CONF_DEVID;
MACRO_PCI PCI_CONF_HDR_SIZE;
MACRO_PCI PCI_CONF_HEADER;
MACRO_PCI PCI_CONF_ILINE;
MACRO_PCI PCI_CONF_IPIN;
MACRO_PCI PCI_CONF_LATENCY_TIMER;
MACRO_PCI PCI_CONF_MAX_L;
MACRO_PCI PCI_CONF_MIN_G;
MACRO_PCI PCI_CONF_PROGCLASS;
MACRO_PCI PCI_CONF_REVID;
MACRO_PCI PCI_CONF_ROM;
MACRO_PCI PCI_CONF_STAT;
MACRO_PCI PCI_CONF_SUBCLASS;
MACRO_PCI PCI_CONF_SUBSYSID;
MACRO_PCI PCI_CONF_SUBVENID;
MACRO_PCI PCI_CONF_VENID;
MACRO_PCI PCI_DISPLAY_IF_8514;
MACRO_PCI PCI_DISPLAY_IF_VGA;
MACRO_PCI PCI_DISPLAY_OTHER;
MACRO_PCI PCI_DISPLAY_VGA;
MACRO_PCI PCI_DISPLAY_XGA;
MACRO_PCI PCI_DOCK_GENERIC;
MACRO_PCI PCI_DOCK_OTHER;
MACRO_PCI PCI_HARDDEC_8514;
MACRO_PCI PCI_HARDDEC_IDE;
MACRO_PCI PCI_HARDDEC_IDE_PRI;
MACRO_PCI PCI_HARDDEC_IDE_SEC;
MACRO_PCI PCI_HARDDEC_VGA;
MACRO_PCI PCI_HEADER_MULTI;
MACRO_PCI PCI_HEADER_ONE;
MACRO_PCI PCI_HEADER_PPB;
MACRO_PCI PCI_HEADER_TYPE_M;
MACRO_PCI PCI_HEADER_ZERO;
MACRO_PCI PCI_IDE_IF_MASK;
MACRO_PCI PCI_IDE_IF_NATIVE_PRI;
MACRO_PCI PCI_IDE_IF_NATIVE_SEC;
MACRO_PCI PCI_IDE_IF_PROG_PRI;
MACRO_PCI PCI_IDE_IF_PROG_SEC;
MACRO_PCI PCI_INPUT_DIGITIZ;
MACRO_PCI PCI_INPUT_KEYBOARD;
MACRO_PCI PCI_INPUT_MOUSE;
MACRO_PCI PCI_INPUT_OTHER;
MACRO_PCI PCI_INTA;
MACRO_PCI PCI_INTB;
MACRO_PCI PCI_INTC;
MACRO_PCI PCI_INTD;
MACRO_PCI PCI_MASS_FD;
MACRO_PCI PCI_MASS_IDE;
MACRO_PCI PCI_MASS_IPI;
MACRO_PCI PCI_MASS_OTHER;
MACRO_PCI PCI_MASS_RAID;
MACRO_PCI PCI_MASS_SCSI;
MACRO_PCI PCI_MEM_FLASH;
MACRO_PCI PCI_MEM_OTHER;
MACRO_PCI PCI_MEM_RAM;
MACRO_PCI PCI_MM_AUDIO;
MACRO_PCI PCI_MM_OTHER;
MACRO_PCI PCI_MM_VIDEO;
MACRO_PCI PCI_NET_ATM;
MACRO_PCI PCI_NET_ENET;
MACRO_PCI PCI_NET_FDDI;
MACRO_PCI PCI_NET_OTHER;
MACRO_PCI PCI_NET_TOKEN;
MACRO_PCI PCI_NONE_NOTVGA;
MACRO_PCI PCI_NONE_VGA;
MACRO_PCI PCI_PERIPH_DMA;
MACRO_PCI PCI_PERIPH_DMA_IF_EISA;
MACRO_PCI PCI_PERIPH_DMA_IF_GENERIC;
MACRO_PCI PCI_PERIPH_DMA_IF_ISA;
MACRO_PCI PCI_PERIPH_OTHER;
MACRO_PCI PCI_PERIPH_PIC;
MACRO_PCI PCI_PERIPH_PIC_IF_EISA;
MACRO_PCI PCI_PERIPH_PIC_IF_GENERIC;
MACRO_PCI PCI_PERIPH_PIC_IF_ISA;
MACRO_PCI PCI_PERIPH_RTC;
MACRO_PCI PCI_PERIPH_RTC_IF_GENERIC;
MACRO_PCI PCI_PERIPH_RTC_IF_ISA;
MACRO_PCI PCI_PERIPH_TIMER;
MACRO_PCI PCI_PERIPH_TIMER_IF_EISA;
MACRO_PCI PCI_PERIPH_TIMER_IF_GENERIC;
MACRO_PCI PCI_PERIPH_TIMER_IF_ISA;
MACRO_PCI PCI_PMCAP;
MACRO_PCI PCI_PMCAP_AUX_CUR_100mA;
MACRO_PCI PCI_PMCAP_AUX_CUR_160mA;
MACRO_PCI PCI_PMCAP_AUX_CUR_220mA;
MACRO_PCI PCI_PMCAP_AUX_CUR_270mA;
MACRO_PCI PCI_PMCAP_AUX_CUR_320mA;
MACRO_PCI PCI_PMCAP_AUX_CUR_375mA;
MACRO_PCI PCI_PMCAP_AUX_CUR_55mA;
MACRO_PCI PCI_PMCAP_AUX_CUR_MASK;
MACRO_PCI PCI_PMCAP_AUX_CUR_SELF;
MACRO_PCI PCI_PMCAP_D0_PME;
MACRO_PCI PCI_PMCAP_D1;
MACRO_PCI PCI_PMCAP_D1_PME;
MACRO_PCI PCI_PMCAP_D2;
MACRO_PCI PCI_PMCAP_D2_PME;
MACRO_PCI PCI_PMCAP_D3COLD_PME;
MACRO_PCI PCI_PMCAP_D3HOT_PME;
MACRO_PCI PCI_PMCAP_DSI;
MACRO_PCI PCI_PMCAP_PME_CLOCK;
MACRO_PCI PCI_PMCAP_PME_MASK;
MACRO_PCI PCI_PMCAP_VER_1_0;
MACRO_PCI PCI_PMCAP_VER_1_1;
MACRO_PCI PCI_PMCAP_VER_MASK;
MACRO_PCI PCI_PMCSR;
MACRO_PCI PCI_PMCSR_BSE;
MACRO_PCI PCI_PMCSR_BSE_B2_B3;
MACRO_PCI PCI_PMCSR_BSE_BPCC_EN;
MACRO_PCI PCI_PMCSR_D0;
MACRO_PCI PCI_PMCSR_D1;
MACRO_PCI PCI_PMCSR_D2;
MACRO_PCI PCI_PMCSR_D3HOT;
MACRO_PCI PCI_PMCSR_DSCL_1_BY_10;
MACRO_PCI PCI_PMCSR_DSCL_1_BY_100;
MACRO_PCI PCI_PMCSR_DSCL_1_BY_1000;
MACRO_PCI PCI_PMCSR_DSCL_MASK;
MACRO_PCI PCI_PMCSR_DSCL_UNKNOWN;
MACRO_PCI PCI_PMCSR_DSEL_COM_C;
MACRO_PCI PCI_PMCSR_DSEL_D0_PWR_C;
MACRO_PCI PCI_PMCSR_DSEL_D0_PWR_D;
MACRO_PCI PCI_PMCSR_DSEL_D1_PWR_C;
MACRO_PCI PCI_PMCSR_DSEL_D1_PWR_D;
MACRO_PCI PCI_PMCSR_DSEL_D2_PWR_C;
MACRO_PCI PCI_PMCSR_DSEL_D2_PWR_D;
MACRO_PCI PCI_PMCSR_DSEL_D3_PWR_C;
MACRO_PCI PCI_PMCSR_DSEL_D3_PWR_D;
MACRO_PCI PCI_PMCSR_DSEL_MASK;
MACRO_PCI PCI_PMCSR_PME_EN;
MACRO_PCI PCI_PMCSR_PME_STAT;
MACRO_PCI PCI_PMCSR_STATE_MASK;
MACRO_PCI PCI_PMDATA;
MACRO_PCI PCI_PPB_BASE_NUM;
MACRO_PCI PCI_PPB_ROM;
MACRO_PCI PCI_PREFETCH_B;
MACRO_PCI PCI_PROCESSOR_386;
MACRO_PCI PCI_PROCESSOR_486;
MACRO_PCI PCI_PROCESSOR_ALPHA;
MACRO_PCI PCI_PROCESSOR_COPROC;
MACRO_PCI PCI_PROCESSOR_PENT;
MACRO_PCI PCI_PROCESSOR_POWERPC;
MACRO_PCI PCI_REG_ADDR_M;
MACRO_PCI PCI_REG_ALIAS_M;
MACRO_PCI PCI_REG_BUS_M;
MACRO_PCI PCI_REG_DEV_M;
MACRO_PCI PCI_REG_FUNC_M;
MACRO_PCI PCI_REG_PF_M;
MACRO_PCI PCI_REG_REG_M;
MACRO_PCI PCI_REG_REL_M;
MACRO_PCI PCI_RELOCAT_B;
MACRO_PCI PCI_SERIAL_ACCESS;
MACRO_PCI PCI_SERIAL_FIBRE;
MACRO_PCI PCI_SERIAL_FIRE;
MACRO_PCI PCI_SERIAL_SSA;
MACRO_PCI PCI_SERIAL_USB;
MACRO_PCI PCI_STAT_66MHZ;
MACRO_PCI PCI_STAT_CAP;
MACRO_PCI PCI_STAT_DEVSELT;
MACRO_PCI PCI_STAT_DEVSELT_FAST;
MACRO_PCI PCI_STAT_DEVSELT_MEDIUM;
MACRO_PCI PCI_STAT_DEVSELT_SLOW;
MACRO_PCI PCI_STAT_FBBC;
MACRO_PCI PCI_STAT_PERROR;
MACRO_PCI PCI_STAT_R_MAST_AB;
MACRO_PCI PCI_STAT_R_TARG_AB;
MACRO_PCI PCI_STAT_S_PERROR;
MACRO_PCI PCI_STAT_S_SYSERR;
MACRO_PCI PCI_STAT_S_TARG_AB;
MACRO_PCI PCI_STAT_UDF;
MACRO_PCKILL PCKILL;
MACRO_PCLFNCHUNKSIZE PCLFNCHUNKSIZE;
MACRO_PCLF PCLF_FIRSTNAMESIZE;
MACRO_PCLF PCLF_SECONDNAMESIZE;
MACRO_PCLF PCLF_THIRDNAMESIZE;
MACRO_PCLK PCLK;
MACRO_PCMAXNAMLEN PCMAXNAMLEN;
MACRO_PCFEXTSIZE PCMAXPATHLEN;
MACRO_PCMCIA PCMCIA_MAX_ADAPTERS;
MACRO_PCMCIA_MAX PCMCIA_MAX_FUNCTIONS;
MACRO_PCMCIA PCMCIA_MAX_POWER;
MACRO_PCMCIA PCMCIA_MAX_SOCKETS;
MACRO_PCMCIA PCMCIA_MAX_WINDOWS;
MACRO_PCMCIA PCMCIA_MAX_WIN_ADAPT;
MACRO_PCMCIA_PROP PCMCIA_PROP_ACTIVE;
MACRO_PCMCIA_PROP PCMCIA_PROP_CARDBUS;
MACRO_PCMCIA_PROP PCMCIA_PROP_CIS;
MACRO_PCMCIA_PROP PCMCIA_PROP_COMPAT;
MACRO_PCMCIA_PROP PCMCIA_PROP_DEFAULT_PM;
MACRO_PCMCIA_PROP PCMCIA_PROP_INTR;
MACRO_PCMCIA_PROP PCMCIA_PROP_OLDCS;
MACRO_PCMCIA_PROP PCMCIA_PROP_R2TYPE;
MACRO_PCMCIA_PROP PCMCIA_PROP_REG;
MACRO_PCMCIA_PROP PCMCIA_PROP_SOCKET;
MACRO_PCMCIA_PROP PCMCIA_PROP_UNKNOWN;
MACRO_INOFLCK PCMDLCK;
MACRO_PCMD PCMD_DEVTYPE;
MACRO_PCMD PCMD_FUNCE;
MACRO_PCMD PCMD_FUNCID;
MACRO_PCMD PCMD_JEDEC;
MACRO_PCMD PCMD_MANFID;
MACRO_PCMD PCMD_VERS1;
MACRO_PCM PCM_DEFAULT_NODEID;
MACRO_PCM_NAME PCM_MAX_R2_MEM;
MACRO_PCM_NAME PCM_MULTI_FUNCTION;
MACRO_PCM_NAME PCM_NAME_1275;
MACRO_PCM_NAME PCM_NAME_GENERIC;
MACRO_PCM_NAME PCM_NAME_VERS1;
MACRO_PCM_NAME PCM_NO_CONFIG;
MACRO_PCM_NAME PCM_OTHER_NOCIS;
MACRO_PCM_NAME PCM_TYPE_FIXED;
MACRO_PCM_NAME PCM_TYPE_LAN;
MACRO_PCM_NAME PCM_TYPE_MEMORY;
MACRO_PCM_NAME PCM_TYPE_MULTI;
MACRO_PCM_NAME PCM_TYPE_PARALLEL;
MACRO_PCM_NAME PCM_TYPE_SERIAL;
MACRO_PCM_NAME PCM_TYPE_VIDEO;
MACRO_PCNICE PCNICE;
MACRO_PCNULL PCNULL;
MACRO_PCON PCON_INIT;
MACRO_PCON PCON_OPEN_INIT;
MACRO_FCR PCR;
MACRO_PCREAD PCREAD;
MACRO_PCRUN PCRUN;
MACRO_PCSASRS PCSASRS;
MACRO_PCSCRED PCSCRED;
MACRO_PCSENTRY PCSENTRY;
MACRO_PCSEXIT PCSET;
MACRO_PCSEXIT PCSEXIT;
MACRO_PCSFAULT PCSFAULT;
MACRO_PCSFPREG PCSFPREG;
MACRO_PCSHOLD PCSHOLD;
MACRO_PCSREG PCSREG;
MACRO_PCCFAULT PCSSIG;
MACRO_PCNULL PCSTOP;
MACRO_PCSTRACE PCSTRACE;
MACRO_PCSVADDR PCSVADDR;
MACRO_PCSXREG PCSXREG;
MACRO_PCS PCS_CARD_PRESENT;
MACRO_PCS PCS_COOKIES_VALID;
MACRO_PCS PCS_ENABLED;
MACRO_PCS PCS_IRQ_ENABLED;
MACRO_PCS PCS_MULTI_FUNCTION;
MACRO_PCS PCS_SOCKET_ADDED;
MACRO_PCS PCS_SUSPENDED;
MACRO_PCWSTOP PCTWSTOP;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_FINI_LWP_EVENT;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_INIT_LWP_EVENT;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_NULL_EVENT;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_SYSC_EXEC_EVENT;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_SYSC_EXIT_EVENT;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_SYSC_FORK_EVENT;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_SYSC_LWP_CREATE_EVENT;
$18F4D073277E58FDDB2C169A72F1FC3C PCTX_SYSC_LWP_EXIT_EVENT;
MACRO_PCUNKILL PCUNKILL;
MACRO_PCUNSET PCUNSET;
MACRO_PCWATCH PCWATCH;
MACRO_PCWRITE PCWRITE;
MACRO_PCWSTOP PCWSTOP;
MACRO_PC_MOD PC_ACC;
MACRO_PC PC_ADMIN;
MACRO_PC_MOD PC_CHG;
MACRO_PC PC_CLNMSZ;
MACRO_PC PC_CLNULL;
MACRO_PC_MOD PC_EXTERNAL;
MACRO_PC_SUCCESS PC_FAILURE;
MACRO_PC_FATBLOCK PC_FATBLOCK;
MACRO_PC PC_GETCID;
MACRO_PC PC_GETCLINFO;
MACRO_PC PC_GETPARMS;
MACRO_PC PC_GETPRIRANGE;
MACRO_PC_MOD PC_INVAL;
MACRO_PC_MAXFATSEC PC_MAXFATSEC;
MACRO_PC_SUCCESS PC_MEM_AM;
MACRO_PC_SUCCESS PC_MEM_CM;
MACRO_PC_MOD PC_MOD;
MACRO_PC_REG PC_REG_SPACE_ATTRIBUTE;
MACRO_PC_REG PC_REG_SPACE_CONFIG;
MACRO_PC_REG PC_REG_SPACE_IO;
MACRO_PC_REG PC_REG_SPACE_MEMORY;
MACRO_PC_REG PC_REG_TYPE_16BIT;
MACRO_PC_REG PC_REG_TYPE_CARDBUS;
MACRO_PC_MOD PC_RELEHOLD;
MACRO_PC_SECSIZE PC_SECSIZE;
MACRO_PC PC_SETPARMS;
MACRO_PC_SUCCESS PC_SUCCESS;
MACRO_PC PC_VERSION;
MACRO_PD PD;
MACRO_PDEV PDEV_ESDI;
MACRO_PDEV PDEV_IPI2;
MACRO_PDEV PDEV_IPI3;
MACRO_PDEV PDEV_SCSI;
MACRO_PDEV PDEV_SMD;
MACRO_PDFLAGS PDFLAGS;
MACRO_ENDIAN PDP_ENDIAN;
MACRO_PEM PEM_HIWATER;
MACRO_PEM PEM_IDNUM;
MACRO_PEM PEM_LOWATER;
MACRO_PEM PEM_MAX;
MACRO_PEM PEM_MAX_EVENTS;
MACRO_PEM PEM_MIN;
MACRO_ISIG PENDIN;
MACRO_PERIM PERIM_INNER;
MACRO_PERIM PERIM_OUTER;
MACRO_PERMMASK PERMMASK;
MACRO_PFIOC PFIOC;
MACRO_PFIOCSETF PFIOCSETF;
MACRO_PFKEYV2 PFKEYV2_REVISION;
MACRO_PFN PFN_INVALID;
MACRO_PF_RCOLL PF_43UCNTL;
MACRO_PF_UNSPEC PF_802;
MACRO_PF_UNSPEC PF_APPLETALK;
MACRO_PF_RCOLL PF_ASYNC;
MACRO_PF_RCOLL PF_CARR_ON;
MACRO_PF_UNSPEC PF_CCITT;
MACRO_PF_UNSPEC PF_CHAOS;
MACRO_PF_UNSPEC PF_DATAKIT;
MACRO_PF_UNSPEC PF_DECnet;
MACRO_PF_UNSPEC PF_DLI;
MACRO_PF_UNSPEC PF_ECMA;
MACRO_PF_RCOLL PF_ECOLL;
MACRO_PF_UNSPEC PF_GOSIP;
MACRO_PF_UNSPEC PF_HYLINK;
MACRO_PF_IA PF_IA_64_NORECOV;
MACRO_PF_UNSPEC PF_IMPLINK;
MACRO_PF_UNSPEC PF_INET;
MACRO_PF_UNSPEC PF_INET6;
MACRO_PF_RCOLL PF_IOCTL;
MACRO_PF_UNSPEC PF_IPX;
MACRO_PF_UNSPEC PF_KEY;
MACRO_PF_KEY PF_KEY_V2;
MACRO_PF_UNSPEC PF_LAT;
MACRO_PF_UNSPEC PF_LINK;
MACRO_PF PF_MASKPROC;
MACRO_PF_UNSPEC PF_MAX;
MACRO_PF_MAXFILTERS PF_MAXFILTERS;
MACRO_PF_RCOLL PF_NBIO;
MACRO_PF_UNSPEC PF_NBS;
MACRO_PF_UNSPEC PF_NIT;
MACRO_PF_RCOLL PF_NOSTOP;
MACRO_PF_UNSPEC PF_NS;
MACRO_PF_UNSPEC PF_OSI;
MACRO_PF_UNSPEC PF_OSINET;
MACRO_PF_RCOLL PF_PKT;
MACRO_PF_UNSPEC PF_PUP;
MACRO_PF PF_R;
MACRO_PF_RCOLL PF_RCOLL;
MACRO_PF_RCOLL PF_READ;
MACRO_PF_RCOLL PF_REMOTE;
MACRO_PF_UNSPEC PF_ROUTE;
MACRO_PF_RCOLL PF_SLAVEGONE;
MACRO_PF_UNSPEC PF_SNA;
MACRO_PF_RCOLL PF_STOPPED;
MACRO_PF_RCOLL PF_UCNTL;
MACRO_PF_UNSPEC PF_UNIX;
MACRO_PF_UNSPEC PF_UNSPEC;
MACRO_PF PF_W;
MACRO_PF_RCOLL PF_WAIT;
MACRO_PF_RCOLL PF_WCOLL;
MACRO_PF_RCOLL PF_WOPEN;
MACRO_PF_RCOLL PF_WREAD;
MACRO_PF_RCOLL PF_WRITE;
MACRO_PF_RCOLL PF_WWRITE;
MACRO_PF PF_X;
MACRO_PF_UNSPEC PF_X25;
MACRO_PGREL PGREL_CLEAN;
MACRO_PGREL PGREL_MOD;
MACRO_PGREL PGREL_NOTREL;
MACRO_PG PG_HWMAPPED;
MACRO_PG PG_MODIFIED;
MACRO_PG PG_REFERENCED;
MACRO_FABRIC PHYSICAL_BUSY;
MACRO_PHY PHY_ANAR_10;
MACRO_PHY PHY_ANAR_10FDX;
MACRO_PHY PHY_ANAR_ACK;
MACRO_PHY PHY_ANAR_NP;
MACRO_PHY PHY_ANAR_RES1;
MACRO_PHY PHY_ANAR_RF;
MACRO_PHY PHY_ANAR_SELECT;
MACRO_PHY PHY_ANAR_T4;
MACRO_PHY PHY_ANAR_TX;
MACRO_PHY PHY_ANAR_TXFDX;
MACRO_PHY PHY_ANER_LPNP;
MACRO_PHY PHY_ANER_LPNW;
MACRO_PHY PHY_ANER_MLF;
MACRO_PHY PHY_ANER_NPABLE;
MACRO_PHY PHY_ANER_PAGERX;
MACRO_PHY PHY_ANER_RES1;
MACRO_PHY PHY_ANLPAR_10;
MACRO_PHY PHY_ANLPAR_10FDX;
MACRO_PHY PHY_ANLPAR_ACK;
MACRO_PHY PHY_ANLPAR_NP;
MACRO_PHY PHY_ANLPAR_RES1;
MACRO_PHY PHY_ANLPAR_RF;
MACRO_PHY PHY_ANLPAR_SELECT;
MACRO_PHY PHY_ANLPAR_T4;
MACRO_PHY PHY_ANLPAR_TX;
MACRO_PHY PHY_ANLPAR_TXFDX;
MACRO_PHY PHY_AR_ADDR;
MACRO_PHY PHY_AR_CONSTS;
MACRO_PHY PHY_AR_RES1;
MACRO_PHY PHY_AR_SPEED10;
MACRO_PHY PHY_BMCR_100M;
MACRO_PHY PHY_BMCR_ANE;
MACRO_PHY PHY_BMCR_COLTST;
MACRO_PHY PHY_BMCR_FDX;
MACRO_PHY PHY_BMCR_ISOLATE;
MACRO_PHY PHY_BMCR_LPBK;
MACRO_PHY PHY_BMCR_PWRDN;
MACRO_PHY PHY_BMCR_RAN;
MACRO_PHY PHY_BMCR_RES1;
MACRO_PHY PHY_BMCR_RESET;
MACRO_PHY PHY_BMSR_100FDX;
MACRO_PHY PHY_BMSR_100HDX;
MACRO_PHY PHY_BMSR_100T4;
MACRO_PHY PHY_BMSR_10FDX;
MACRO_PHY PHY_BMSR_10HDX;
MACRO_PHY PHY_BMSR_ACFG;
MACRO_PHY PHY_BMSR_ANC;
MACRO_PHY PHY_BMSR_EXTCAP;
MACRO_PHY PHY_BMSR_JABDET;
MACRO_PHY PHY_BMSR_LNKSTS;
MACRO_PHY PHY_BMSR_REMFLT;
MACRO_PHY PHY_BMSR_RES1;
MACRO_PHY PHY_BTXPC_DSCRAM;
MACRO_PHY PHY_CAPABILITY_MASK;
MACRO_PHY PHY_CSCR_10FDXE;
MACRO_PHY PHY_CSCR_CLK25M;
MACRO_PHY PHY_CSCR_CSTSEN;
MACRO_PHY PHY_CSCR_ENCSEL;
MACRO_PHY PHY_CSCR_FCONN;
MACRO_PHY PHY_CSCR_FLN100;
MACRO_PHY PHY_CSCR_NRZIDIS;
MACRO_PHY PHY_CSCR_REPTR;
MACRO_PHY PHY_CSCR_RES1;
MACRO_PHY PHY_CSCR_RES2;
MACRO_PHY PHY_CSCR_RES3;
MACRO_PHY PHY_CSCR_RES4;
MACRO_PHY PHY_CSCR_TOCDIS;
MACRO_PHY PHY_CSCR_TXOFF;
MACRO_PHY PHY_IDR2_MDLREV;
MACRO_PHY PHY_IDR2_OUILSB;
MACRO_PHY PHY_IDR2_VNDMDL;
MACRO_PHY PHY_LBREMR_BP4B5B;
MACRO_PHY PHY_LBREMR_BPALIGN;
MACRO_PHY PHY_LBREMR_BPEB;
MACRO_PHY PHY_LBREMR_BPSCR;
MACRO_PHY PHY_LBREMR_CODE;
MACRO_PHY PHY_LBREMR_EB;
MACRO_PHY PHY_LBREMR_EWRAP;
MACRO_PHY PHY_LBREMR_LB;
MACRO_PHY PHY_LBREMR_LINK;
MACRO_PHY PHY_LBREMR_PKT;
MACRO_PHY PHY_LBREMR_PME;
MACRO_PHY PHY_LBREMR_RES1;
MACRO_PHY PHY_LBREMR_XWRAP;
MACRO_PHY PHY_NICR_HBE;
MACRO_PHY PHY_NICR_JBEN;
MACRO_PHY PHY_NICR_LD;
MACRO_PHY PHY_NICR_LSS;
MACRO_PHY PHY_NICR_RES1;
MACRO_PHY PHY_NICR_RES2;
MACRO_PHY PHY_NICR_UTP;
MACRO_PHY PHY_NWAYTR_LPBK;
MACRO_PHY PHY_NWAYTR_RES1;
MACRO_PHY PHY_NWAYTR_RES2;
MACRO_PHY PHY_SELECTOR;
MACRO_PHY PHY_TPISR_10BTSER;
MACRO_PHY PHY_TPISR_RES1;
MACRO_PHY PHY_TPISR_RES2;
MACRO_PH PH_FROM_PROM;
MACRO_VIDLEN PIDLEN;
MACRO_VIDMAX PIDMAX;
MACRO_ATEXIT PID_MAX;
MACRO_PILR1 PILR1;
MACRO_PILR2 PILR2;
MACRO_PILR3 PILR3;
MACRO_PIM PIM_BORDER_REGISTER;
MACRO_PIM PIM_MINLEN;
MACRO_PIM PIM_NULL_REGISTER;
MACRO_PIM PIM_REGISTER;
MACRO_PIM PIM_REG_MINLEN;
MACRO_PIM PIM_VERSION;
MACRO_PIPE PIPE_BUF;
MACRO_PIPE PIPE_MAX;
MACRO_PI_TYPELEN PI_FPUTYPE;
MACRO_PI PI_INSTALLED;
MACRO_PI PI_PARTIAL;
MACRO_PI PI_PRESVR4;
MACRO_PI PI_SPOOLED;
MACRO_PI_TYPELEN PI_TYPELEN;
MACRO_PI PI_UNKNOWN;
MACRO_PKGSIZ PKGSIZ;
MACRO_PKT PKT_PRIV_LEN;
MACRO_PKT PKT_PRIV_SIZE;
MACRO_PLN_CTLR PLN_CTLR_IO_TIME;
MACRO_PLN_CTLR PLN_CTLR_RETRY_COUNT;
MACRO_PLN_CTLR PLN_CTLR_STATE_ATTACHED;
MACRO_PLN_CTLR PLN_CTLR_STATE_CLOSED;
MACRO_PLN_CTLR PLN_CTLR_STATE_DETACHING;
MACRO_PLN_CTLR PLN_CTLR_STATE_OPEN;
MACRO_PLN_CTLR PLN_CTLR_STATE_OPENING;
MACRO_PLN_CTLR PLN_CTLR_STATE_RWAIT;
MACRO_PLN_CTLR PLN_CTLR_STATE_SENSING;
MACRO_PLN PLN_ENTITY_CONTROLLER;
MACRO_PLN PLN_ENTITY_DISK_GROUPED;
MACRO_PLN PLN_ENTITY_DISK_SINGLE;
MACRO_PLOSS PLOSS;
MACRO_PMAPPORT PMAPPORT;
MACRO_PMAPPROC PMAPPROC_CALLIT;
MACRO_PMAPPROC PMAPPROC_DUMP;
MACRO_PMAPPROC PMAPPROC_GETPORT;
MACRO_PMAPPROC PMAPPROC_NULL;
MACRO_PMAPPROC PMAPPROC_SET;
MACRO_PMAPPROC PMAPPROC_UNSET;
MACRO_PMAPPROG PMAPPROG;
MACRO_PMAPVERS_0 PMAPVERS;
MACRO_PMAPVERS PMAPVERS_ORIG;
MACRO_PMAPVERS PMAPVERS_PROTO;
MACRO_PMAP PMAP_IPPROTO_TCP;
MACRO_PMAP PMAP_IPPROTO_UDP;
MACRO_PMC PMC;
MACRO_PMTAGSIZE PMTAGSIZE;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_ADD_DEP;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_ADD_DEPENDENT;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_AUTOPM;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_COMPONENT_THRESHOLD;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_CREATE_COMPONENTS;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_DEFAULT_THRESHOLD;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_DEVICE_THRESHOLD;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_DIRECTLY_MANAGED;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_DIRECT_NOTIFY;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_DIRECT_NOTIFY_WAIT;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_DIRECT_PM;
MACRO_PM_STATUS PM_DISABLED;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_DISABLE_AUTOPM;
MACRO_PM_STATUS PM_ENABLED;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_COMPONENT_NAME;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_COMPONENT_THRESHOLDS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_CURRENT_POWER;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_CUR_PWR;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_DEFAULT_SYSTEM_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_DEP;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_DEVICE_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_DEVICE_THRESHOLD_BASIS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_DEVICE_TYPE;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_FULL_POWER;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_IDLE_TIME;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_NORM_PWR;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_NUM_CMPTS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_NUM_COMPONENTS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_NUM_DEPS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_NUM_POWER_LEVELS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_PM_STATE;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_POWER_LEVELS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_POWER_NAME;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_STATE_CHANGE;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_STATE_CHANGE_WAIT;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_STATS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_SYSTEM_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_GET_TIME_IDLE;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_IDLE_DOWN;
MACRO_PM PM_LEVEL_UNKNOWN;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_NO_PM_COMPONENTS;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_OLD_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_REENABLE_AUTOPM;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_RELEASE_DIRECT_PM;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_REM_DEP;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_REM_DEVICE;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_REM_DEVICES;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_REPARSE_PM_PROPS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_RESET_DEVICE_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_RESET_PM;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SCHEDULE;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SET_COMPONENT_THRESHOLDS;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SET_CURRENT_POWER;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SET_CUR_PWR;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SET_DEVICE_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SET_NORM_PWR;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SET_SYSTEM_THRESHOLD;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_SET_THRESHOLD;
MACRO_PM_STATUS PM_STARTING;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_START_PM;
MACRO_PM_STATUS PM_STATUS;
MACRO_PM_STATUS PM_STOPPING;
$3EC23EC6F0FDADF0EEC41EBD5A8B52ED PM_STOP_PM;
MACRO_STR PM_STR;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_SYSTEM_PM_DISABLED;
$37901662FEBD63C2ABBFAC806A9B9F40 PM_SYSTEM_PM_ENABLED;
MACRO_PM_STATUS PM_UNKNOWN;
MACRO_POLLERR POLLERR;
MACRO_POLLERR POLLHUP;
MACRO_POLLIN POLLIN;
MACRO_POLLNORM POLLNORM;
MACRO_POLLERR POLLNVAL;
MACRO_POLLIN POLLOUT;
MACRO_POLLIN POLLPRI;
MACRO_POLLWRNORM POLLRDBAND;
MACRO_POLLIN POLLRDNORM;
MACRO_POLLERR POLLREMOVE;
MACRO_POLLWRNORM POLLWRBAND;
MACRO_POLLWRNORM POLLWRNORM;
MACRO_POLL POLL_ERR;
MACRO_POLL POLL_HUP;
MACRO_POLL POLL_IN;
MACRO_POLL POLL_MSG;
MACRO_POLL POLL_OUT;
MACRO_POLL POLL_PRI;
idop POP_AND;
idop POP_DIFF;
idop POP_OR;
idop POP_XOR;
MACRO_PORT PORT_CHANGE_CSC;
MACRO_PORT PORT_CHANGE_OCIC;
MACRO_PORT PORT_CHANGE_PESC;
MACRO_PORT PORT_CHANGE_PRSC;
MACRO_PORT PORT_CHANGE_PSSC;
MACRO_PORT PORT_STATUS_CCS;
MACRO_PORT PORT_STATUS_LSDA;
MACRO_PORT PORT_STATUS_MASK;
MACRO_PORT PORT_STATUS_OK;
MACRO_PORT PORT_STATUS_PES;
MACRO_PORT PORT_STATUS_POCI;
MACRO_PORT PORT_STATUS_PPS;
MACRO_PORT PORT_STATUS_PRS;
MACRO_PORT PORT_STATUS_PSS;
MACRO_PPC_ERROR PPC_ACK_B;
MACRO_PPC_STROBE PPC_ACK_POLL;
MACRO_PPC_STROBE PPC_ACK_TIMEOUT;
MACRO_PPC_ERROR PPC_AFX;
MACRO_PPC_STROBE PPC_BSY_TIMEOUT;
MACRO_PPC_ERROR PPC_BUSY_B;
MACRO_PPC_STROBE PPC_DATA_SETUP;
MACRO_PPC_STROBE PPC_ERRMSG_TIME;
MACRO_PPC_ERROR PPC_ERROR_B;
MACRO_PPC_STROBE PPC_ERR_TIMEOUT;
MACRO_PPC_ERROR PPC_INIT;
MACRO_PPC PPC_INTMASK;
MACRO_INT_NUM PPC_INT_NUM;
MACRO_PPC_ERROR PPC_IRQE;
MACRO_PPC_LINES PPC_LINES;
MACRO_OFFSET PPC_OFFSET;
MACRO_PPC_ERROR PPC_OUTPUT;
MACRO_PPC_ERROR PPC_PAPER_OUT_B;
MACRO_PPC_ERROR PPC_SELECT_IN_B;
MACRO_PPC_ERROR PPC_SLCT;
MACRO_PPC_ERROR PPC_STROBE;
MACRO_PPC_STROBE PPC_STROBE_W;
MACRO_TXBUFSIZE PPC_TXBUFSIZE;
MACRO_PPD PPD_CARD_CARDBUS;
MACRO_PPD PPD_CARD_MULTI;
MACRO_PPD PPD_CB_BUSMASTER;
MACRO_PPD PPD_SUSPENDED;
MACRO_PPGRP PPGRP;
MACRO_PPID PPID;
ppp_ioctls PPP_ACTIVE_OPEN;
ppp_ioctls PPP_AUTH_BOTH;
ppp_ioctls PPP_AUTH_LOC;
ppp_ioctls PPP_AUTH_REM;
ppp_messages PPP_AUTH_SUCCESS;
ppp_ioctls PPP_CLOSE;
ppp_messages PPP_CONFIG_CHANGED;
ppp_ioctls PPP_DELETE_MIB_ENTRY;
MACRO_PPP PPP_DG_ALL;
MACRO_PPP PPP_DG_ERR;
MACRO_PPP PPP_DG_ERRREP;
MACRO_PPP PPP_DG_EXT;
MACRO_PPP PPP_DG_INF;
MACRO_PPP PPP_DG_MAX_OUTPUT;
MACRO_PPP PPP_DG_MIN;
MACRO_PPP PPP_DG_MOD_ID;
MACRO_PPP PPP_DG_NDA;
MACRO_PPP PPP_DG_OPT;
MACRO_PPP PPP_DG_RAW;
MACRO_PPP PPP_DG_RFR;
MACRO_PPP PPP_DG_STAND;
ppp_diag_outdest PPP_DG_STRLOG_DEST;
ppp_diag_ioctls PPP_DIAG_GET_CONF;
ppp_diag_ioctls PPP_DIAG_SET_CONF;
ppp_ioctls PPP_DOWN;
ppp_messages PPP_ERROR_IND;
ppp_ioctls PPP_FORCE_REM;
ppp_ioctls PPP_GET_AUTH;
ppp_ioctls PPP_GET_CONF;
ppp_ioctls PPP_GET_ERRS;
ppp_ioctls PPP_GET_IPNCP_STATS;
ppp_ioctls PPP_GET_IP_STATS;
ppp_ioctls PPP_GET_LCP_STATS;
ppp_ioctls PPP_GET_REMOTE_PASSWD;
ppp_ioctls PPP_GET_STATE;
ppp_ioctls PPP_GET_VERSION;
ppp_messages PPP_LOCAL_FAILURE;
MACRO_PPP_MAX PPP_MAX_ERROR;
MACRO_PPP_MAX PPP_MAX_PASSWD;
ppp_messages PPP_NEED_VALIDATION;
ppp_ioctls PPP_OPEN;
ppp_ioctls PPP_PASSIVE_OPEN;
ppp_messages PPP_REMOTE_FAILURE;
ppp_ioctls PPP_REMOTE_NOK;
ppp_ioctls PPP_REMOTE_OK;
ppp_ioctls PPP_SET_AUTH;
ppp_ioctls PPP_SET_CONF;
ppp_ioctls PPP_SET_DEBUG;
ppp_ioctls PPP_SET_LOCAL_PASSWD;
ppp_ioctls PPP_SET_REMOTE_PASSWD;
ppp_messages PPP_TL_DOWN;
ppp_messages PPP_TL_FINISH;
ppp_messages PPP_TL_START;
ppp_messages PPP_TL_UP;
ppp_ioctls PPP_UP;
MACRO_PPRH PPRH;
MACRO_PPRL PPRL;
MACRO_PPS PPS_AVG;
MACRO_PPS PPS_SHIFT;
MACRO_PPS PPS_SHIFTMAX;
MACRO_PPS PPS_VALID;
MACRO_PP PP_BUSY;
MACRO_PP PP_ERROR;
MACRO_PP PP_MSG;
MACRO_PP PP_PAPER_OUT;
MACRO_PP PP_SELECT;
MACRO_PP PP_SHIFT;
MACRO_PP PP_SIGNAL;
MACRO_PP PP_SIGTYPE;
MACRO_PRARGSZ PRARGSZ;
MACRO_PRCSIG PRCFAULT;
MACRO_PRCLSZ PRCLSZ;
MACRO_PRCO PRCO_GETOPT;
MACRO_PRCO PRCO_NCMDS;
MACRO_PRCO PRCO_SETOPT;
MACRO_PRCSIG PRCSIG;
MACRO_PRC PRC_GWDOWN;
MACRO_PRC PRC_HOSTDEAD;
MACRO_PRC PRC_HOSTUNREACH;
MACRO_PRC PRC_IFDOWN;
MACRO_PRC PRC_MSGSIZE;
MACRO_PRC PRC_NCMDS;
MACRO_PRC PRC_PARAMPROB;
MACRO_PRC PRC_QUENCH;
MACRO_PRC PRC_REDIRECT_HOST;
MACRO_PRC PRC_REDIRECT_NET;
MACRO_PRC PRC_REDIRECT_TOSHOST;
MACRO_PRC PRC_REDIRECT_TOSNET;
MACRO_PRC PRC_ROUTEDEAD;
MACRO_PRC PRC_TIMXCEED_INTRANS;
MACRO_PRC PRC_TIMXCEED_REASS;
MACRO_PRC PRC_UNREACH_HOST;
MACRO_PRC PRC_UNREACH_NEEDFRAG;
MACRO_PRC PRC_UNREACH_NET;
MACRO_PRC PRC_UNREACH_PORT;
MACRO_PRC PRC_UNREACH_PROTOCOL;
MACRO_PRC PRC_UNREACH_SRCFAIL;
MACRO_PRECOMPMSK PRECOMPMSK;
MACRO_PREFIX PREFIX_INFINITY;
MACRO_PRELIM PRELIM;
MACRO_PREMOTE PREMOTE;
MACRO_PRESSED PRESSED;
MACRO_PRFNSZ PRFNSZ;
MACRO_PRIO PRIO_PGRP;
MACRO_PRIO PRIO_PROCESS;
MACRO_PRIO PRIO_USER;
MACRO_SHARED PRIVATE;
zotypes PRIVATE_OBJ;
MACRO_PRMAPSZ PRMAPSZ;
MACRO_PRNODEV PRNODEV;
MACRO_UNLOCK PROCLOCK;
MACRO_PROC_CHUNK PROC_CHUNK;
MACRO_PROC PROC_DATA;
MACRO_PROC PROC_TEXT;
accept_stat PROC_UNAVAIL;
MACRO_PROFATTR PROFATTR_DB_NCOL;
MACRO_PROFATTR PROFATTR_DB_NKEYCOL;
MACRO_PROFATTR PROFATTR_KEYCOL0;
MACRO_PROF PROF_SIG;
accept_stat PROG_MISMATCH;
accept_stat PROG_UNAVAIL;
MACRO_PROP PROP_1275_INT_SIZE;
$D7C0A176FE35DFEAAB524AEF710D9981 PROP_EXISTS;
$D7C0A176FE35DFEAAB524AEF710D9981 PROP_LEN;
$D7C0A176FE35DFEAAB524AEF710D9981 PROP_LEN_AND_VAL_ALLOC;
$D7C0A176FE35DFEAAB524AEF710D9981 PROP_LEN_AND_VAL_BUF;
MACRO_EXCHANGE PROTOCOL_ERROR;
MACRO_PROTOTYPES PROTOTYPES;
MACRO_PROT PROT_EXEC;
MACRO_PROT PROT_NONE;
MACRO_PROT PROT_READ;
MACRO_PROT PROT_WRITE;
MACRO_PRCSIG PRSABORT;
MACRO_PRCSIG PRSTEP;
MACRO_PRCSIG PRSTOP;
MACRO_PRSYSARGS PRSYSARGS;
MACRO_PRU PRU_ABORT;
MACRO_PRU PRU_ACCEPT;
MACRO_PRU PRU_ATTACH;
MACRO_PRU PRU_BIND;
MACRO_PRU PRU_CONNECT;
MACRO_PRU PRU_CONNECT2;
MACRO_PRU PRU_CONTROL;
MACRO_PRU PRU_DETACH;
MACRO_PRU PRU_DISCONNECT;
MACRO_PRU PRU_FASTTIMO;
MACRO_PRU PRU_LISTEN;
MACRO_PRU PRU_NREQ;
MACRO_PRU PRU_PEERADDR;
MACRO_PRU PRU_PROTORCV;
MACRO_PRU PRU_PROTOSEND;
MACRO_PRU PRU_RCVD;
MACRO_PRU PRU_RCVOOB;
MACRO_PRU PRU_SEND;
MACRO_PRU PRU_SENDOOB;
MACRO_PRU PRU_SENSE;
MACRO_PRU PRU_SHUTDOWN;
MACRO_PRU PRU_SLOWTIMO;
MACRO_PRU PRU_SOCKADDR;
MACRO_PRV PRV_CRASH;
MACRO_PRV PRV_RECOVERY;
MACRO_PR_SLOWHZ PR_ADDR;
MACRO_PR_STOPPED PR_AGENT;
MACRO_PR_STOPPED PR_ASLEEP;
MACRO_PR_STOPPED PR_ASLWP;
MACRO_PR_STOPPED PR_ASYNC;
MACRO_PR_SLOWHZ PR_ATOMIC;
MACRO_PR_STOPPED PR_BPTADJ;
MACRO_PR_STOPPED PR_CHECKPOINT;
MACRO_PR_SLOWHZ PR_CONNREQUIRED;
MACRO_PR_STOPPED PR_DSTOP;
MACRO_PR_SLOWHZ PR_FASTHZ;
MACRO_PR_STOPPED PR_FAULTED;
MACRO_PR_STOPPED PR_FORK;
MACRO_PR_STOPPED PR_ISSYS;
MACRO_PR_STOPPED PR_ISTOP;
MACRO_PR_STOPPED PR_JOBCONTROL;
MACRO_PR_STOPPED PR_KLC;
MACRO_PR_WORDSIZE PR_MASK;
MACRO_PR_WORDSIZE PR_MAX_INTERRUPTS;
MACRO_PR_WORDSIZE PR_MAX_IOADDR;
MACRO_PR_WORDSIZE PR_MAX_IO_LEN;
MACRO_PR_WORDSIZE PR_MAX_IO_RANGES;
MACRO_PR_WORDSIZE PR_MAX_MEMADDR;
MACRO_PR_WORDSIZE PR_MAX_MEM_LEN;
MACRO_PR_WORDSIZE PR_MAX_MEM_RANGES;
MACRO_PR PR_MODEL_ILP32;
MACRO_PR PR_MODEL_LP64;
MACRO_PR PR_MODEL_NATIVE;
MACRO_PR PR_MODEL_UNKNOWN;
MACRO_PR_STOPPED PR_MSACCT;
MACRO_PR_STOPPED PR_MSFORK;
MACRO_PR_SLOWHZ PR_OOB_ADDR;
MACRO_PR_STOPPED PR_ORPHAN;
MACRO_PR_STOPPED PR_PCINVAL;
MACRO_PR_STOPPED PR_PTRACE;
MACRO_PR_STOPPED PR_REQUESTED;
MACRO_PR_SLOWHZ PR_RIGHTS;
MACRO_PR_STOPPED PR_RLC;
MACRO_PR_STOPPED PR_SIGNALLED;
MACRO_PR_SLOWHZ PR_SLOWHZ;
MACRO_PR_STOPPED PR_STEP;
MACRO_PR_STOPPED PR_STOPPED;
MACRO_PR_STOPPED PR_SUSPENDED;
MACRO_PR_STOPPED PR_SYSENTRY;
MACRO_PR_STOPPED PR_SYSEXIT;
MACRO_PR_STOPPED PR_VFORKP;
MACRO_PR_SLOWHZ PR_WANTRCVD;
MACRO_PR_WORDSIZE PR_WORDSIZE;
MACRO_PS_0 PS;
MACRO_PSARGSZ PSARGSZ;
MACRO_PSC PSC_EVENT_LOST;
$B4D4B12673F28533BE1E89CD44C7C9E5 PSC_HAS_CHANGED;
$B4D4B12673F28533BE1E89CD44C7C9E5 PSC_PENDING_CHANGE;
MACRO_PSET PSET_ASSIGN;
MACRO_PSET PSET_BIND;
MACRO_PSET PSET_CREATE;
MACRO_PSET PSET_DESTROY;
MACRO_PSET PSET_INFO;
MACRO_PSID PSID;
MACRO_PSL PSL_ALLCC;
MACRO_PSL PSL_UBITS;
MACRO_PSL PSL_USER;
MACRO_PSL PSL_USERMASK;
MACRO_PSR_0 PSR;
MACRO_PSR PSR_C;
MACRO_PSR PSR_CWP;
MACRO_PSR PSR_EC;
MACRO_PSR PSR_EF;
MACRO_PSR PSR_ET;
MACRO_PSR_ICC PSR_FPRS_FEF_SHIFT;
MACRO_PSR PSR_ICC;
MACRO_PSR_ICC PSR_ICC_SHIFT;
MACRO_PSR PSR_IMPL;
MACRO_PSR_ICC PSR_IMPLVER_SHIFT;
MACRO_PSR PSR_N;
MACRO_PSR PSR_PIL;
MACRO_PSR PSR_PS;
MACRO_PSR_ICC PSR_PSTATE_EF_SHIFT;
MACRO_PSR PSR_RSV;
MACRO_PSR PSR_S;
MACRO_PSR_ICC PSR_TSTATE_CC_SHIFT;
MACRO_PSR PSR_V;
MACRO_PSR PSR_VER;
MACRO_PSR PSR_Z;
$92D8A10D5D3318494FF31390A6A19662 PS_BADADDR;
$92D8A10D5D3318494FF31390A6A19662 PS_BADLID;
$92D8A10D5D3318494FF31390A6A19662 PS_BADPID;
$92D8A10D5D3318494FF31390A6A19662 PS_ERR;
$92D8A10D5D3318494FF31390A6A19662 PS_NOFREGS;
MACRO_PS PS_NONE;
$92D8A10D5D3318494FF31390A6A19662 PS_NOSYM;
MACRO_PS_OBJ PS_OBJ_EXEC;
MACRO_PS_OBJ PS_OBJ_LDSO;
$92D8A10D5D3318494FF31390A6A19662 PS_OK;
MACRO_PS PS_PRIVATE;
MACRO_PS PS_QUERY;
MACRO_PS PS_SYSTEM;
MACRO_PTHREAD_MUTEX PTHREAD_CANCELED;
MACRO_PTHREAD_MUTEX PTHREAD_CANCEL_ASYNCHRONOUS;
MACRO_PTHREAD_MUTEX PTHREAD_CANCEL_DEFERRED;
MACRO_PTHREAD_MUTEX PTHREAD_CANCEL_DISABLE;
MACRO_PTHREAD_MUTEX PTHREAD_CANCEL_ENABLE;
MACRO_PTHREAD PTHREAD_CREATE_DETACHED;
MACRO_PTHREAD PTHREAD_CREATE_JOINABLE;
MACRO_PTHREAD PTHREAD_EXPLICIT_SCHED;
MACRO_PTHREAD PTHREAD_INHERIT_SCHED;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_DEFAULT;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_ERRORCHECK;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_NORMAL;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_RECURSIVE;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_ROBUST_NP;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_STALL_NP;
MACRO_PTHREAD_MUTEX PTHREAD_ONCE_DONE;
MACRO_PTHREAD_MUTEX PTHREAD_ONCE_NOTDONE;
MACRO_PTHREAD_MUTEX PTHREAD_PRIO_INHERIT;
MACRO_PTHREAD_MUTEX PTHREAD_PRIO_NONE;
MACRO_PTHREAD_MUTEX PTHREAD_PRIO_PROTECT;
MACRO_PTHREAD PTHREAD_PROCESS_PRIVATE;
MACRO_PTHREAD PTHREAD_PROCESS_SHARED;
MACRO_PTHREAD PTHREAD_SCOPE_PROCESS;
MACRO_PTHREAD PTHREAD_SCOPE_SYSTEM;
MACRO_PTLOCK PTLOCK;
MACRO_PTLOCK PTMOPEN;
MACRO_FER PTR;
MACRO_PTR24 PTR24_ALIGN;
MACRO_PTR24 PTR24_BASE;
MACRO_PTR24 PTR24_LSB;
MACRO_PTR24 PTR24_MSB;
MACRO_PTRACE PTRACE_ATTACH;
MACRO_PTRACE PTRACE_CHILDDONE;
MACRO_PTRACE PTRACE_CLRDR7;
MACRO_PTRACE PTRACE_CONT;
MACRO_PTRACE PTRACE_DETACH;
MACRO_PTRACE PTRACE_DUMPCORE;
MACRO_PTRACE PTRACE_GETFPAREGS;
MACRO_PTRACE PTRACE_GETFPREGS;
MACRO_PTRACE PTRACE_GETREGS;
MACRO_PTRACE PTRACE_GETWINDOW;
MACRO_PTRACE PTRACE_KILL;
MACRO_PTRACE PTRACE_PEEKDATA;
MACRO_PTRACE PTRACE_PEEKTEXT;
MACRO_PTRACE PTRACE_PEEKUSER;
MACRO_PTRACE PTRACE_POKEDATA;
MACRO_PTRACE PTRACE_POKETEXT;
MACRO_PTRACE PTRACE_POKEUSER;
MACRO_PTRACE PTRACE_READDATA;
MACRO_PTRACE PTRACE_READTEXT;
MACRO_PTRACE PTRACE_SETACBKPT;
MACRO_PTRACE PTRACE_SETBPP;
MACRO_PTRACE PTRACE_SETFPAREGS;
MACRO_PTRACE PTRACE_SETFPREGS;
MACRO_PTRACE PTRACE_SETREGS;
MACRO_PTRACE PTRACE_SETWINDOW;
MACRO_PTRACE PTRACE_SETWRBKPT;
MACRO_PTRACE PTRACE_SINGLESTEP;
MACRO_PTRACE PTRACE_SYSCALL;
MACRO_PTRACE PTRACE_TRACEME;
MACRO_PTRACE PTRACE_TRAPCODE;
MACRO_PTRACE PTRACE_WPPHYS;
MACRO_PTRACE PTRACE_WRITEDATA;
MACRO_PTRACE PTRACE_WRITETEXT;
MACRO_PTLOCK PTSOPEN;
MACRO_PTSSTTY PTSSTTY;
MACRO_PTLOCK PTSTTY;
MACRO_PT_OVERWRITE PT_DEBUG;
MACRO_PT PT_DYNAMIC;
MACRO_PT PT_HIPROC;
MACRO_PT PT_HISUNW;
MACRO_PT_IA PT_IA_64_ARCHEXT;
MACRO_PT_IA PT_IA_64_UNWIND;
MACRO_PT_OVERWRITE PT_INFO_ONLY;
MACRO_PT PT_INTERP;
MACRO_PT PT_LOAD;
MACRO_PT PT_LOPROC;
MACRO_PT PT_LOSUNW;
MACRO_PT PT_NOTE;
MACRO_PT PT_NULL;
MACRO_PT PT_NUM;
MACRO_PT_OVERWRITE PT_ODTSTREAM;
MACRO_PT_OVERWRITE PT_OVERWRITE;
MACRO_PT PT_PHDR;
MACRO_PT_OVERWRITE PT_RENAME;
MACRO_PT PT_SHLIB;
MACRO_PT_OVERWRITE PT_SILENT;
MACRO_PT PT_SUNWBSS;
MACRO_PW PW_INUSE;
MACRO_PW PW_REM;
MACRO_PW PW_WAIT;
MACRO_BARRIER PXFS_LOCK;
MACRO_PXFS PXFS_LOCK_BLOCKED;
MACRO_P_ABSOLUTE P_ABSOLUTE;
idtype P_ALL;
MACRO_P_OFFLINE P_BAD;
MACRO_P_ABSOLUTE P_BLK;
MACRO_P_ABSOLUTE P_CHR;
idtype P_CID;
MACRO_P_ABSOLUTE P_CREAT;
MACRO_P_ABSOLUTE P_DIR;
MACRO_P_ABSOLUTE P_EXEC;
MACRO_P_ABSOLUTE P_EXIST;
MACRO_P_FREE P_FREE;
idtype P_GID;
MACRO_P_INITPID P_INITPGID;
MACRO_P_INITPID P_INITPID;
MACRO_P_INITPID P_INITUID;
idtype P_LWPID;
MACRO_P P_MYID;
MACRO_P P_MYPID;
MACRO_P_ABSOLUTE P_NEXIST;
MACRO_P_OFFLINE P_NOINTR;
MACRO_P_ABSOLUTE P_NONZERO;
MACRO_P_FREE P_NORELOC;
MACRO_P_OFFLINE P_OFFLINE;
MACRO_P_OFFLINE P_ONLINE;
idtype P_PGID;
idtype P_PID;
MACRO_P_OFFLINE P_POWEROFF;
idtype P_PPID;
idtype P_PROJID;
MACRO_P_ABSOLUTE P_READ;
MACRO_P_ABSOLUTE P_REG;
MACRO_P_ABSOLUTE P_RELATIVE;
idtype P_SID;
MACRO_P_OFFLINE P_STATUS;
idtype P_TASKID;
MACRO_P_TV P_TV;
idtype P_UID;
MACRO_P_ABSOLUTE P_WRITE;
MACRO_QENAB QBACK;
qfields QBAD;
MACRO_QB QB_BACK;
MACRO_QB QB_FULL;
MACRO_QB QB_WANTW;
qfields QCOUNT;
MACRO_QDELAY QDELAY;
MACRO_QECB QECB_BMACERRM_EXDERM;
MACRO_QECB QECB_CONTROL_TDMD;
MACRO_QECB QECB_QECERRM_BUFFM;
MACRO_QECB QECB_QECERRM_DROPM;
MACRO_QECB QECB_QECERRM_RXERRACKM;
MACRO_QECB QECB_QECERRM_RXLATERRM;
MACRO_QECB QECB_QECERRM_RXPARERRM;
MACRO_QECB QECB_QECERRM_TMDERM;
MACRO_QECB QECB_QECERRM_TXERRACKM;
MACRO_QECB QECB_QECERRM_TXLATERRM;
MACRO_QECB QECB_QECERRM_TXPARERRM;
MACRO_QECB QECB_STATUS_BUFF;
MACRO_QECB QECB_STATUS_DROP;
MACRO_QECB QECB_STATUS_ERR;
MACRO_QECB QECB_STATUS_INTR;
MACRO_QECB QECB_STATUS_MACE;
MACRO_QECB QECB_STATUS_QEC;
MACRO_QECB QECB_STATUS_RINT;
MACRO_QECB QECB_STATUS_RXERRACK;
MACRO_QECB QECB_STATUS_RXLATERR;
MACRO_QECB QECB_STATUS_RXPARERR;
MACRO_QECB QECB_STATUS_TINT;
MACRO_QECB QECB_STATUS_TMDER;
MACRO_QECB QECB_STATUS_TXERRACK;
MACRO_QECB QECB_STATUS_TXLATERR;
MACRO_QECB QECB_STATUS_TXPARERR;
MACRO_QECG QECG_CONTROL_ARB;
MACRO_QECG QECG_CONTROL_BMAC;
MACRO_QECG QECG_CONTROL_BURST16;
MACRO_QECG QECG_CONTROL_BURST32;
MACRO_QECG QECG_CONTROL_BURST64;
MACRO_QECG QECG_CONTROL_MACE;
MACRO_QECG QECG_CONTROL_MODE;
MACRO_QECG QECG_CONTROL_PARITY;
MACRO_QECG QECG_CONTROL_RST;
MACRO_QECG QECG_PKTSIZE_2K;
MACRO_QECG QECG_PKTSIZE_4K;
MACRO_QECG QECG_PKTSIZE_6K;
MACRO_QECG QECG_PKTSIZE_8K;
MACRO_QECG QECG_STATUS_BMINT;
MACRO_QECG QECG_STATUS_QECERR;
MACRO_QECG QECG_STATUS_RINT;
MACRO_QECG QECG_STATUS_TINT;
MACRO_QECMAXRSTDELAY QECMAXRSTDELAY;
MACRO_QECM QECM_CONTROL_DRCV;
MACRO_QECM QECM_CONTROL_RST;
MACRO_QECM QECM_CONTROL_TDMD;
MACRO_QECM QECM_MACERRM_BABLM;
MACRO_QECM QECM_MACERRM_EXDERM;
MACRO_QECM QECM_MACERRM_JABM;
MACRO_QECM QECM_MACERRM_LCARM;
MACRO_QECM QECM_MACERRM_LCOLM;
MACRO_QECM QECM_MACERRM_MPCOM;
MACRO_QECM QECM_MACERRM_OFLOM;
MACRO_QECM QECM_MACERRM_RPCOM;
MACRO_QECM QECM_MACERRM_RTRYM;
MACRO_QECM QECM_MACERRM_RVCCOM;
MACRO_QECM QECM_MACERRM_UFLOM;
MACRO_QECM QECM_PIFS_1024;
MACRO_QECM QECM_PIFS_1152;
MACRO_QECM QECM_PIFS_128;
MACRO_QECM QECM_PIFS_1280;
MACRO_QECM QECM_PIFS_1408;
MACRO_QECM QECM_PIFS_1536;
MACRO_QECM QECM_PIFS_1664;
MACRO_QECM QECM_PIFS_1792;
MACRO_QECM QECM_PIFS_1920;
MACRO_QECM QECM_PIFS_2048;
MACRO_QECM QECM_PIFS_256;
MACRO_QECM QECM_PIFS_384;
MACRO_QECM QECM_PIFS_512;
MACRO_QECM QECM_PIFS_640;
MACRO_QECM QECM_PIFS_768;
MACRO_QECM QECM_PIFS_896;
MACRO_QECM QECM_PIFS_ENABLE;
MACRO_QECM QECM_PIFS_MANUAL;
MACRO_QECM QECM_QECERRM_BUFFM;
MACRO_QECM QECM_QECERRM_COLLM;
MACRO_QECM QECM_QECERRM_DROPM;
MACRO_QECM QECM_QECERRM_RXERRACKM;
MACRO_QECM QECM_QECERRM_RXLATERRM;
MACRO_QECM QECM_QECERRM_RXPARERRM;
MACRO_QECM QECM_QECERRM_TMDERM;
MACRO_QECM QECM_QECERRM_TXERRACKM;
MACRO_QECM QECM_QECERRM_TXLATERRM;
MACRO_QECM QECM_QECERRM_TXPARERRM;
MACRO_QECM QECM_STATUS_BABL;
MACRO_QECM QECM_STATUS_BUFF;
MACRO_QECM QECM_STATUS_CLSN;
MACRO_QECM QECM_STATUS_COLCO;
MACRO_QECM QECM_STATUS_CRC;
MACRO_QECM QECM_STATUS_DROP;
MACRO_QECM QECM_STATUS_EXDER;
MACRO_QECM QECM_STATUS_FMC;
MACRO_QECM QECM_STATUS_JAB;
MACRO_QECM QECM_STATUS_LCAR;
MACRO_QECM QECM_STATUS_LCOL;
MACRO_QECM QECM_STATUS_MPCO;
MACRO_QECM QECM_STATUS_OFLO;
MACRO_QECM QECM_STATUS_OTHER;
MACRO_QECM QECM_STATUS_RINT;
MACRO_QECM QECM_STATUS_RPCO;
MACRO_QECM QECM_STATUS_RTRY;
MACRO_QECM QECM_STATUS_RVCCO;
MACRO_QECM QECM_STATUS_RXERRACK;
MACRO_QECM QECM_STATUS_RXLATERR;
MACRO_QECM QECM_STATUS_RXPARERR;
MACRO_QECM QECM_STATUS_TINT;
MACRO_QECM QECM_STATUS_TMDER;
MACRO_QECM QECM_STATUS_TXERRACK;
MACRO_QECM QECM_STATUS_TXLATERR;
MACRO_QECM QECM_STATUS_TXPARERR;
MACRO_QECM QECM_STATUS_UFLO;
MACRO_QECPERIOD QECPERIOD;
MACRO_QECWAITPERIOD QECWAITPERIOD;
MACRO_QEC QEC_QMDALIGN;
MACRO_QEC QEC_QMDMAX;
MACRO_QENAB QENAB;
MACRO_QINSERVICE QEND;
qfields QFIRST;
MACRO_QFIXEDSZ QFIXEDSZ;
qfields QFLAG;
MACRO_QENAB QFULL;
qfields QHIWAT;
MACRO_QENAB QHLIST;
MACRO_QINSERVICE QHOT;
MACRO_QINSERVICE QINSERVICE;
MACRO_QINSERVICE QISDRV;
qfields QLAST;
qfields QLOWAT;
qfields QMAXPSZ;
MACRO_QMD QMD_EOP;
MACRO_QMD QMD_INUSE;
MACRO_QMD QMD_OWN;
MACRO_QMD QMD_SOP;
qfields QMINPSZ;
MACRO_QENAB QMTOUTPERIM;
MACRO_QENAB QMTSAFE;
MACRO_QMT QMT_TYPEMASK;
MACRO_QINSERVICE QNEXTHOT;
MACRO_QNICE QNICE;
MACRO_QENAB QNOENB;
MACRO_QNORM QNORM;
MACRO_QENAB QPAIR;
MACRO_QNORM QPCTL;
MACRO_QENAB QPERMOD;
MACRO_QENAB QPERQ;
MACRO_QENAB QREADR;
qfields QSTRUIOT;
MACRO_QINSERVICE QSYNCSTR;
MACRO_RJEGID QUELEN;
MACRO_ACTIVE QUERY_LOCK;
MACRO_QUE QUE_BUSY_COMMAND;
MACRO_QUE_LAST QUE_LAST_COMMAND;
MACRO_QENAB QUSE;
MACRO_QENAB QWANTR;
MACRO_QENAB QWANTW;
MACRO_QINSERVICE QWANTWSYNC;
MACRO_QINSERVICE QWCLOSE;
MACRO_Q_QUOTAON Q_ALLSYNC;
gqr_status Q_EPERM;
MACRO_Q_QUOTAON Q_GETQUOTA;
gqr_status Q_NOQUOTA;
gqr_status Q_OK;
MACRO_Q_QUOTAON Q_QUOTACTL;
MACRO_Q_QUOTAON Q_QUOTAOFF;
MACRO_Q_QUOTAON Q_QUOTAON;
MACRO_Q_QUOTAON Q_SETQLIM;
MACRO_Q_QUOTAON Q_SETQUOTA;
MACRO_Q Q_SQDRAINING;
MACRO_Q Q_SQQUEUED;
MACRO_Q_QUOTAON Q_SYNC;
MACRO_Orientation QueryValueSize;
MACRO_R0 R0;
MACRO_R1 R1;
MACRO_RADIXCHAR RADIXCHAR;
MACRO_RAND RAND_MAX;
MACRO_RARP RARP_REQUEST;
MACRO_RARP RARP_RESPONSE;
MACRO_LCASE RAW;
MACRO_RB RB_ASKNAME;
MACRO_RB RB_AUTOBOOT;
MACRO_RB RB_CONFIG;
MACRO_RB RB_DEBUG;
MACRO_RB RB_DUMP;
MACRO_RB RB_FLUSHCACHE;
MACRO_RB RB_HALT;
MACRO_RB RB_INITNAME;
MACRO_RB RB_KRTLD;
MACRO_RB RB_NOBOOTCLUSTER;
MACRO_RB RB_NOBOOTRC;
MACRO_RB RB_NOSYNC;
MACRO_RB RB_RECONFIG;
MACRO_RB RB_SINGLE;
MACRO_RB RB_STRING;
MACRO_RB RB_VERBOSE;
MACRO_RB RB_WRITABLE;
MACRO_RCIBRG RCIBRG;
MACRO_INOFLCK RCMDLCK;
MACRO_RCM RCM_CONFLICT;
MACRO_RCM RCM_DR_OPERATION;
MACRO_RCM RCM_FAILURE;
MACRO_RCM RCM_FILESYS;
MACRO_RCM RCM_FORCE;
MACRO_RCM RCM_INCLUDE_DEPENDENT;
MACRO_RCM RCM_INCLUDE_SUBTREE;
MACRO_RCM RCM_MOD_INFO;
MACRO_RCM RCM_NOPID;
MACRO_RCM RCM_QUERY;
MACRO_RCM RCM_STATE_OFFLINE;
MACRO_RCM RCM_STATE_OFFLINE_FAIL;
MACRO_RCM RCM_STATE_OFFLINING;
MACRO_RCM RCM_STATE_ONLINE;
MACRO_RCM RCM_STATE_ONLINING;
MACRO_RCM RCM_STATE_REMOVE;
MACRO_RCM RCM_STATE_REMOVING;
MACRO_RCM RCM_STATE_RESUMING;
MACRO_RCM RCM_STATE_SUSPEND;
MACRO_RCM RCM_STATE_SUSPENDING;
MACRO_RCM RCM_STATE_SUSPEND_FAIL;
MACRO_RCM RCM_STATE_UNKNOWN;
MACRO_RCM RCM_SUCCESS;
MACRO_REOF RCOMMIT;
MACRO_REOF RCOMMITWAIT;
MACRO_RCIBRG RCRSET;
MACRO_RCIBRG RCTSET;
MACRO_CS8 RCV1EN;
MACRO_XCIBRG RCVCLK;
MACRO_RCVR RCVR_DIS;
MACRO_RCVR RCVR_ENA;
MACRO_XMIT RCV_DATA;
MACRO_RCV RCV_EXP;
MACRO_RDCMD RDCMD;
MACRO_RDDEL RDDEL;
MACRO_RDDIR RDDIR;
MACRO_RDDIR RDDIRREQ;
MACRO_RDDIR RDDIRWAIT;
MACRO_RDEF RDEF_ALL;
MACRO_RDEF RDEF_CKLEN;
MACRO_RDEF RDEF_MANUF;
MACRO_RDF RDF_CCS;
MACRO_RDF RDF_LEVEL0;
MACRO_RDF RDF_SCSI2;
MACRO_RDID RDID;
MACRO_REOF RDIRECTIO;
MACRO_REOF RDIRTY;
MACRO_REOF RDONTWRITE;
MACRO_RDSIDE RDSIDE;
MACRO_RDTRK RDTRK;
$34D0A9496006982FFAE833C372B85A0C RD_ADD;
$34D0A9496006982FFAE833C372B85A0C RD_CONSISTENT;
$176E06A90436C16DD1EC2E1A345EFA40 RD_DBERR;
$34D0A9496006982FFAE833C372B85A0C RD_DELETE;
$8724F201D2476C5A27302B0C46EAD9DC RD_DLACTIVITY;
$176E06A90436C16DD1EC2E1A345EFA40 RD_ERR;
$EAF20B011F47EDF33C1FCE09C227F824 RD_FL_DBG;
$EAF20B011F47EDF33C1FCE09C227F824 RD_FL_NONE;
$EAF20B011F47EDF33C1FCE09C227F824 RD_FL_ODBG;
MACRO_RD RD_NEAR;
MACRO_RD RD_NEGINF;
$176E06A90436C16DD1EC2E1A345EFA40 RD_NOBASE;
$176E06A90436C16DD1EC2E1A345EFA40 RD_NOCAPAB;
$176E06A90436C16DD1EC2E1A345EFA40 RD_NODYNAM;
$176E06A90436C16DD1EC2E1A345EFA40 RD_NOMAPS;
$8724F201D2476C5A27302B0C46EAD9DC RD_NONE;
$34D0A9496006982FFAE833C372B85A0C RD_NOSTATE;
$D5AA6F5ACB6BB33BF40F728DE6419DF2 RD_NOTIFY_AUTOBPT;
$D5AA6F5ACB6BB33BF40F728DE6419DF2 RD_NOTIFY_BPT;
$D5AA6F5ACB6BB33BF40F728DE6419DF2 RD_NOTIFY_SYSCALL;
$176E06A90436C16DD1EC2E1A345EFA40 RD_OK;
MACRO_RD RD_POSINF;
$8724F201D2476C5A27302B0C46EAD9DC RD_POSTINIT;
$8724F201D2476C5A27302B0C46EAD9DC RD_PREINIT;
$780B979F0B1070C2A1BEC9CE8B44076A RD_RESOLVE_NONE;
$780B979F0B1070C2A1BEC9CE8B44076A RD_RESOLVE_STEP;
$780B979F0B1070C2A1BEC9CE8B44076A RD_RESOLVE_TARGET;
$780B979F0B1070C2A1BEC9CE8B44076A RD_RESOLVE_TARGET_STEP;
MACRO_RD_VERSION RD_VERSION;
MACRO_RD RD_ZER0;
MACRO_WRITER READER_LOCK;
MACRO_CARTRIDGE READ_FORMAT_CAP_CMD;
MACRO_CARTRIDGE READ_LONG_CMD;
MACRO_SOFT_ERROR_WARNING_THRESHOLD READ_SOFT_ERROR_WARNING_THRESHOLD;
MACRO_RECALIBRATE RECALIBRATE;
MACRO_RECOMPUTE RECOMPUTE_DONE;
MACRO_ACTIVE RECOMPUTE_LOCK;
MACRO_STRCANON RECOPY;
MACRO_GROUPS RECURS_GROUPS;
MACRO_REC REC_EOF;
MACRO_REC REC_EOR;
MACRO_REC REC_ESC;
MACRO_ACTIVE REFERENCED_LOCK;
MACRO_TVERSLEN REGTYPE;
MACRO_REG_EXTENDED REG_ANCHOR;
MACRO_REG_EXTENDED REG_BADBR;
MACRO_REG_EXTENDED REG_BADPAT;
MACRO_REG_EXTENDED REG_BADRPT;
MACRO_REG_EXTENDED REG_DEBUG;
MACRO_REG_EXTENDED REG_DELIM;
MACRO_REG_EXTENDED REG_EBOL;
MACRO_REG_EXTENDED REG_EBRACE;
MACRO_REG_EXTENDED REG_EBRACK;
MACRO_REG_EXTENDED REG_ECHAR;
MACRO_REG_EXTENDED REG_ECOLLATE;
MACRO_REG_EXTENDED REG_ECTYPE;
MACRO_REG_EXTENDED REG_EEOL;
MACRO_REG_EXTENDED REG_EESCAPE;
MACRO_REG_EXTENDED REG_EFATAL;
MACRO_REG_EXTENDED REG_EGREP;
MACRO_REG_EXTENDED REG_ENEWLINE;
MACRO_REG_EXTENDED REG_ENOSYS;
MACRO_REG_EXTENDED REG_ENSUB;
MACRO_REG_EXTENDED REG_EPAREN;
MACRO_REG_EXTENDED REG_ERANGE;
MACRO_REG_EXTENDED REG_ESPACE;
MACRO_REG_EXTENDED REG_ESUBREG;
MACRO_REG_EXTENDED REG_EXTENDED;
MACRO_REG REG_G1;
MACRO_REG REG_G2;
MACRO_REG REG_G3;
MACRO_REG REG_G4;
MACRO_REG REG_G5;
MACRO_REG REG_G6;
MACRO_REG REG_G7;
MACRO_REG_EXTENDED REG_ICASE;
MACRO_REG_EXTENDED REG_MUST;
MACRO_REG_EXTENDED REG_NEWLINE;
MACRO_REG_EXTENDED REG_NOMATCH;
MACRO_REG_EXTENDED REG_NOOPT;
MACRO_REG_EXTENDED REG_NOSUB;
MACRO_REG_EXTENDED REG_NOTBOL;
MACRO_REG_EXTENDED REG_NOTEOL;
MACRO_REG REG_O0;
MACRO_REG REG_O1;
MACRO_REG REG_O2;
MACRO_REG REG_O3;
MACRO_REG REG_O4;
MACRO_REG REG_O5;
MACRO_REG REG_O6;
MACRO_REG REG_O7;
MACRO_REG_EXTENDED REG_OK;
MACRO_REG REG_PC;
MACRO_REG REG_PS;
MACRO_REG REG_PSR;
MACRO_REG REG_R0;
MACRO_REG REG_R1;
MACRO_REG REG_SP;
MACRO_REG_EXTENDED REG_STACK;
MACRO_REG_EXTENDED REG_WORDS;
MACRO_REG REG_Y;
MACRO_REG_EXTENDED REG__LAST;
MACRO_REG REG_nPC;
MACRO_PRESSED RELEASED;
MACRO_RELOCATED RELOCATED_DIR;
MACRO_RELOC RELOC_DIR;
MACRO_MAPINOK REMAPOK;
MACRO_REMOTEMODE REMOTEMODE;
MACRO_REM_OPTS REM_DISALLOW;
log_entry_t REM_IBASE;
MACRO_REM_OPTS REM_MAND;
MACRO_REM REM_MULTIPLE;
log_entry_t REM_NAME;
MACRO_REM_OPTS REM_OPTIONAL;
MACRO_REM_OPTS REM_OPTS;
MACRO_RESERVED REM_RESERVED;
MACRO_REOF REOF;
msg_type REPLY;
MACRO_REPORT REPORT_MOUSE_POSITION;
MACRO_PROTOCOL REPORT_PROTOCOL;
MACRO_REPORT_TYPE REPORT_TYPE_FEATURE;
MACRO_REPORT_TYPE REPORT_TYPE_INPUT;
MACRO_REPORT_TYPE REPORT_TYPE_OUTPUT;
MACRO_REQ_LEFT REQ_BACK_PATTERN;
MACRO_REQ REQ_BEG_FIELD;
MACRO_REQ REQ_BEG_LINE;
MACRO_REQ_LEFT REQ_CLEAR_PATTERN;
MACRO_REQ REQ_CLR_EOF;
MACRO_REQ REQ_CLR_EOL;
MACRO_REQ REQ_CLR_FIELD;
MACRO_REQ REQ_DEL_CHAR;
MACRO_REQ REQ_DEL_LINE;
MACRO_REQ REQ_DEL_PREV;
MACRO_REQ REQ_DEL_WORD;
MACRO_REQ REQ_DOWN_CHAR;
MACRO_REQ REQ_DOWN_FIELD;
MACRO_REQ_LEFT REQ_DOWN_ITEM;
MACRO_REQ REQ_END_FIELD;
MACRO_REQ REQ_END_LINE;
MACRO_REQ REQ_FIRST_FIELD;
MACRO_REQ_LEFT REQ_FIRST_ITEM;
MACRO_REQ REQ_FIRST_PAGE;
MACRO_REQ REQ_INS_CHAR;
MACRO_REQ REQ_INS_LINE;
MACRO_REQ REQ_INS_MODE;
MACRO_REQ REQ_LAST_FIELD;
MACRO_REQ_LEFT REQ_LAST_ITEM;
MACRO_REQ REQ_LAST_PAGE;
MACRO_REQ REQ_LEFT_CHAR;
MACRO_REQ REQ_LEFT_FIELD;
MACRO_REQ_LEFT REQ_LEFT_ITEM;
MACRO_REQ REQ_NEW_LINE;
MACRO_REQ REQ_NEXT_CHAR;
MACRO_REQ REQ_NEXT_CHOICE;
MACRO_REQ REQ_NEXT_FIELD;
MACRO_REQ_LEFT REQ_NEXT_ITEM;
MACRO_REQ REQ_NEXT_LINE;
MACRO_REQ_LEFT REQ_NEXT_MATCH;
MACRO_REQ REQ_NEXT_PAGE;
MACRO_REQ REQ_NEXT_WORD;
MACRO_REQ REQ_OVL_MODE;
MACRO_REQ REQ_PREV_CHAR;
MACRO_REQ REQ_PREV_CHOICE;
MACRO_REQ REQ_PREV_FIELD;
MACRO_REQ_LEFT REQ_PREV_ITEM;
MACRO_REQ REQ_PREV_LINE;
MACRO_REQ_LEFT REQ_PREV_MATCH;
MACRO_REQ REQ_PREV_PAGE;
MACRO_REQ REQ_PREV_WORD;
MACRO_REQ REQ_RIGHT_CHAR;
MACRO_REQ REQ_RIGHT_FIELD;
MACRO_REQ_LEFT REQ_RIGHT_ITEM;
MACRO_REQ REQ_SCR_BCHAR;
MACRO_REQ REQ_SCR_BHPAGE;
MACRO_REQ REQ_SCR_BLINE;
MACRO_REQ REQ_SCR_BPAGE;
MACRO_REQ_LEFT REQ_SCR_DLINE;
MACRO_REQ_LEFT REQ_SCR_DPAGE;
MACRO_REQ REQ_SCR_FCHAR;
MACRO_REQ REQ_SCR_FHPAGE;
MACRO_REQ REQ_SCR_FLINE;
MACRO_REQ REQ_SCR_FPAGE;
MACRO_REQ REQ_SCR_HBHALF;
MACRO_REQ REQ_SCR_HBLINE;
MACRO_REQ REQ_SCR_HFHALF;
MACRO_REQ REQ_SCR_HFLINE;
MACRO_REQ_LEFT REQ_SCR_ULINE;
MACRO_REQ_LEFT REQ_SCR_UPAGE;
MACRO_REQ REQ_SFIRST_FIELD;
MACRO_REQ REQ_SLAST_FIELD;
MACRO_REQ REQ_SNEXT_FIELD;
MACRO_REQ REQ_SPREV_FIELD;
MACRO_REQ_LEFT REQ_TOGGLE_ITEM;
MACRO_REQ REQ_UP_CHAR;
MACRO_REQ REQ_UP_FIELD;
MACRO_REQ_LEFT REQ_UP_ITEM;
MACRO_REQ REQ_VALIDATION;
MACRO_RERRMASK RERRMASK;
MACRO_RERRNORM RERRNONPERSIST;
MACRO_RERRNORM RERRNORM;
MACRO_RESETKEY RESETKEY;
MACRO_RESET_ALL RESET_ALL;
MACRO_RESET_ALL RESET_BUS;
MACRO_RESET RESET_CHAN;
MACRO_RESET_ALL RESET_TARGET;
MACRO_FABRIC RESOURSE_BUSY;
MACRO_RESPMAX RESPMAX;
MACRO_RES_MAXNDOTS RES_AAONLY;
MACRO_RES_MAXNDOTS RES_DEBUG;
MACRO_RES_MAXNDOTS RES_DEFAULT;
MACRO_RES_MAXNDOTS RES_DEFNAMES;
MACRO_RES_MAXNDOTS RES_DNSRCH;
MACRO_RES_MAXNDOTS RES_IGNTC;
MACRO_RES_MAXNDOTS RES_INIT;
MACRO_RES_MAXNDOTS RES_INSECURE1;
MACRO_RES_MAXNDOTS RES_INSECURE2;
MACRO_RES_MAXNDOTS RES_MAXNDOTS;
MACRO_RES_MAXNDOTS RES_NOALIASES;
MACRO_RES_MAXNDOTS RES_PRF_ADD;
MACRO_RES_MAXNDOTS RES_PRF_ANS;
MACRO_RES_MAXNDOTS RES_PRF_AUTH;
MACRO_RES_MAXNDOTS RES_PRF_CLASS;
MACRO_RES_MAXNDOTS RES_PRF_CMD;
MACRO_RES_MAXNDOTS RES_PRF_HEAD1;
MACRO_RES_MAXNDOTS RES_PRF_HEAD2;
MACRO_RES_MAXNDOTS RES_PRF_HEADX;
MACRO_RES_MAXNDOTS RES_PRF_INIT;
MACRO_RES_MAXNDOTS RES_PRF_QUERY;
MACRO_RES_MAXNDOTS RES_PRF_QUES;
MACRO_RES_MAXNDOTS RES_PRF_REPLY;
MACRO_RES_MAXNDOTS RES_PRF_STATS;
MACRO_RES_MAXNDOTS RES_PRF_TTLID;
MACRO_RES_MAXNDOTS RES_PRF_UPDATE;
MACRO_RES_MAXNDOTS RES_PRIMARY;
MACRO_RES_MAXNDOTS RES_RECURSE;
MACRO_RES_MAXNDOTS RES_STAYOPEN;
MACRO_RES RES_TIMEOUT;
MACRO_RES_MAXNDOTS RES_USEVC;
MACRO_RES_MAXNDOTS RES_USE_INET6;
MACRO_RETURN_0 RETURN;
MACRO_RETURN_FIRST RETURN_FIRST_TUPLE;
MACRO_RETURN_FIRST RETURN_NEXT_TUPLE;
MACRO_RETURN RETURN_RESULT;
MACRO_REVARP REVARP_REPLY;
MACRO_REVARP REVARP_REQUEST;
MACRO_COLL RE_DUP_MAX;
MACRO_RPROTMASK RFLUSHMASK;
MACRO_RFLUSHPCPROT RFLUSHPCPROT;
MACRO_RFSCALL RFSCALL_SOFT;
MACRO_RFS RFS_CREATE;
MACRO_RFS RFS_GETATTR;
MACRO_RFS RFS_LINK;
MACRO_RFS RFS_LOOKUP;
MACRO_RFS RFS_MKDIR;
MACRO_RFS RFS_NPROC;
MACRO_RFS RFS_NULL;
MACRO_RFS RFS_READ;
MACRO_RFS RFS_READDIR;
MACRO_RFS RFS_READLINK;
MACRO_RFS RFS_REMOVE;
MACRO_RFS RFS_RENAME;
MACRO_RFS RFS_RMDIR;
MACRO_RFS RFS_ROOT;
MACRO_RFS RFS_SETATTR;
MACRO_RFS RFS_STATFS;
MACRO_RFS RFS_SYMLINK;
MACRO_RFS RFS_WRITE;
MACRO_RFS RFS_WRITECACHE;
MACRO_REOF RHASHED;
MACRO_REOF RHAVEVERF;
MACRO_RIGHTALT RIGHTALT;
MACRO_LEFTARROW RIGHTARROW;
MACRO_RIGHTCTRL RIGHTCTRL;
MACRO_RIGHTFUNC RIGHTFUNC;
MACRO_RIGHTSHIFT RIGHTSHIFT;
MACRO_RIPCMD RIPCMD_MAX;
MACRO_RIPCMD RIPCMD_POLL;
MACRO_RIPCMD RIPCMD_POLLENTRY;
MACRO_RIPCMD RIPCMD_REQUEST;
MACRO_RIPCMD RIPCMD_RESPONSE;
MACRO_RIPCMD RIPCMD_TRACEOFF;
MACRO_RIPCMD RIPCMD_TRACEON;
MACRO_RIPVERSION RIPVERSION;
MACRO_RJEGID RJEGID;
MACRO_RJEUID RJEUID;
MACRO_RJT RJT_ABORT_INACTIVE_SEQ;
MACRO_RJT_INVALID RJT_CANT_PERFORM_RQST;
MACRO_RJT_INVALID RJT_CMD_NOT_SUPPORTED;
MACRO_RJT RJT_INVALID_CMD;
MACRO_RJT_INVALID RJT_INVALID_CMD_CODE;
MACRO_RJT RJT_INVALID_OSID;
MACRO_RJT RJT_INVALID_OXID_RXID;
MACRO_RJT RJT_INVALID_SEQID;
MACRO_RJT RJT_LOGICAL_BUSY;
MACRO_RJT RJT_LOGICAL_ERR;
MACRO_RJT_INVALID RJT_LOGICAL_ERROR;
MACRO_RJT RJT_NOEXPLANATION;
MACRO_RJT RJT_PROTOCOL_ERR;
MACRO_RJT RJT_UNABLE;
MACRO_RJT RJT_UNABLE_TO_SUPPLY;
MACRO_RJT RJT_UNSUPPORTED;
MACRO_RJT RJT_VENDOR;
MACRO_RLIM64 RLIM64_INFINITY;
MACRO_RLIM64 RLIM64_SAVED_CUR;
MACRO_RLIM64 RLIM64_SAVED_MAX;
MACRO_RLIMIT RLIMIT_AS;
MACRO_RLIMIT RLIMIT_CORE;
MACRO_RLIMIT RLIMIT_CPU;
MACRO_RLIMIT RLIMIT_DATA;
MACRO_RLIMIT RLIMIT_FSIZE;
MACRO_RLIMIT RLIMIT_NOFILE;
MACRO_RLIMIT RLIMIT_STACK;
MACRO_RLIMIT RLIMIT_VMEM;
MACRO_RLIM RLIM_INFINITY;
MACRO_RLIM RLIM_NLIMITS;
MACRO_RLIM RLIM_SAVED_CUR;
MACRO_RLIM RLIM_SAVED_MAX;
MACRO_RLIOC RLIOC;
MACRO_RLMPL RLMPL_OWNER;
MACRO_RLMPL RLMPL_PID;
MACRO_RLOGIN RLOGIN_MAGIC;
MACRO_RL RL_IOC_ENABLE;
rm RMDIRECTORY;
MACRO_RMD RMD_BUFF;
MACRO_RMD RMD_CRC;
MACRO_RMD RMD_FRAM;
MACRO_RMD RMD_OFLO;
rm RMFILE;
MACRO_RMODEMASK RMODEMASK;
MACRO_REOF RMODINPROGRESS;
MACRO_RNORM RMSGD;
MACRO_RNORM RMSGN;
MACRO_RNORM RNORM;
MACRO_ROMVEC ROMVEC_BLKSIZE;
whymountroot ROOT_BACKMOUNT;
whymountroot ROOT_FRONTMOUNT;
MACRO_ROOT ROOT_HUB_ADDR;
MACRO_ROOT ROOT_HUB_DESCRIPTOR_LENGTH;
MACRO_ROOT ROOT_HUB_DESCRIPTOR_TYPE;
whymountroot ROOT_INIT;
whymountroot ROOT_REMOUNT;
whymountroot ROOT_UNMOUNT;
MACRO_REOF ROUTOFSPACE;
MACRO_RPCBPROC_BCAST RPCBPROC_BCAST;
MACRO_RPCBPROC RPCBPROC_CALLIT;
MACRO_RPCBPROC RPCBPROC_DUMP;
MACRO_RPCBPROC RPCBPROC_GETADDR;
MACRO_RPCBPROC_BCAST RPCBPROC_GETADDRLIST;
MACRO_RPCBPROC_BCAST RPCBPROC_GETSTAT;
MACRO_RPCBPROC RPCBPROC_GETTIME;
MACRO_RPCBPROC_BCAST RPCBPROC_GETVERSADDR;
MACRO_RPCBPROC_BCAST RPCBPROC_INDIRECT;
MACRO_RPCBPROC RPCBPROC_SET;
MACRO_RPCBPROC RPCBPROC_TADDR2UADDR;
MACRO_RPCBPROC RPCBPROC_UADDR2TADDR;
MACRO_RPCBPROC RPCBPROC_UNSET;
MACRO_RPCBPROG RPCBPROG;
MACRO_RPCBSTAT RPCBSTAT_HIGHPROC;
MACRO_RPCBVERS_0 RPCBVERS;
MACRO_RPCBVERS4 RPCBVERS4;
MACRO_RPCBVERS RPCBVERS_2_STAT;
MACRO_RPCBVERS RPCBVERS_3_STAT;
MACRO_RPCBVERS RPCBVERS_4_STAT;
MACRO_RPCBVERS RPCBVERS_STAT;
MACRO_RPCSEC RPCSEC_GSS;
MACRO_RPCSEC_GSS RPCSEC_GSS_CONTINUE_INIT;
MACRO_RPCSEC_GSS RPCSEC_GSS_DATA;
MACRO_RPCSEC_GSS RPCSEC_GSS_DESTROY;
auth_stat RPCSEC_GSS_FAILED;
MACRO_RPCSEC_GSS RPCSEC_GSS_INIT;
auth_stat RPCSEC_GSS_NOCRED;
MACRO_RPCSEC_GSS RPCSEC_GSS_VERSION;
MACRO_RPCSMALLMSGSIZE RPCSMALLMSGSIZE;
MACRO_RPCTEST RPCTEST_NULL_BATCH_PROC;
MACRO_RPCTEST RPCTEST_NULL_PROC;
MACRO_RPCTEST RPCTEST_PROGRAM;
MACRO_RPCTEST RPCTEST_VERSION;
MACRO_RPC RPC_ANYFD;
MACRO_RPC RPC_ANYSOCK;
clnt_stat RPC_AUTHERROR;
clnt_stat RPC_CANTCONNECT;
clnt_stat RPC_CANTCREATESTREAM;
clnt_stat RPC_CANTDECODEARGS;
clnt_stat RPC_CANTDECODERES;
clnt_stat RPC_CANTENCODEARGS;
clnt_stat RPC_CANTRECV;
clnt_stat RPC_CANTSEND;
MACRO_RPC RPC_CLIENT;
clnt_stat RPC_FAILED;
MACRO_RPC_GSS RPC_GSS_ER_SUCCESS;
MACRO_RPC_GSS RPC_GSS_ER_SYSTEMERROR;
clnt_stat RPC_INPROGRESS;
clnt_stat RPC_INTR;
MACRO_RPC RPC_MAXADDRSIZE;
MACRO_RPC RPC_MAXDATASIZE;
reject_stat RPC_MISMATCH;
MACRO_RPC_MSG RPC_MSG_VERSION;
clnt_stat RPC_N2AXLATEFAILURE;
clnt_stat RPC_NOBROADCAST;
clnt_stat RPC_PROCUNAVAIL;
clnt_stat RPC_PROGNOTREGISTERED;
clnt_stat RPC_PROGUNAVAIL;
clnt_stat RPC_PROGVERSMISMATCH;
clnt_stat RPC_RPCBFAILURE;
MACRO_RPC RPC_SERVER;
MACRO_RPC_MSG RPC_SERVICE_PORT;
clnt_stat RPC_STALERACHANDLE;
clnt_stat RPC_SUCCESS;
MACRO_RPC_SVC RPC_SVC_CONNMAXREC_GET;
MACRO_RPC_SVC RPC_SVC_CONNMAXREC_SET;
MACRO_RPC RPC_SVC_MTMODE_GET;
MACRO_RPC RPC_SVC_MTMODE_SET;
MACRO_RPC_SVC_MT RPC_SVC_MT_AUTO;
MACRO_RPC_SVC_MT RPC_SVC_MT_NONE;
MACRO_RPC_SVC_MT RPC_SVC_MT_USER;
MACRO_RPC RPC_SVC_THRCREATES_GET;
MACRO_RPC RPC_SVC_THRERRORS_GET;
MACRO_RPC RPC_SVC_THRMAX_GET;
MACRO_RPC RPC_SVC_THRMAX_SET;
MACRO_RPC RPC_SVC_THRTOTAL_GET;
MACRO_RPC_SVC RPC_SVC_USE_POLLFD;
clnt_stat RPC_SYSTEMERROR;
MACRO_RPC RPC_TEST;
clnt_stat RPC_TIMEDOUT;
clnt_stat RPC_TLIERROR;
clnt_stat RPC_UDERROR;
clnt_stat RPC_UNKNOWNADDR;
clnt_stat RPC_UNKNOWNHOST;
clnt_stat RPC_UNKNOWNPROTO;
clnt_stat RPC_VERSMISMATCH;
clnt_stat RPC_XPRTFAILED;
MACRO_RPL RPL_SPINDLE_MASTER;
MACRO_RPL RPL_SPINDLE_MASTER_CONTROL;
MACRO_RPL RPL_SPINDLE_SLAVE;
MACRO_RMODEMASK RPROTDAT;
MACRO_RMODEMASK RPROTDIS;
MACRO_RPROTMASK RPROTMASK;
MACRO_RMODEMASK RPROTNORM;
MACRO_REOF RPURGECACHE;
MACRO_RP RP_DBLEXT;
MACRO_RP RP_DOUBLE;
MACRO_RP RP_RESERVED;
MACRO_RP RP_SINGLE;
MACRO_DRSELMSK RQM;
MACRO_RQS RQS_OVR;
MACRO_RQS RQS_VALID;
MACRO_RQUOTAPROC RQUOTAPROC_GETACTIVEQUOTA;
MACRO_RQUOTAPROC RQUOTAPROC_GETQUOTA;
MACRO_RQUOTAPROG RQUOTAPROG;
MACRO_RQUOTAVERS RQUOTAVERS;
MACRO_RQ RQ_PATHLEN;
MACRO_QFIXEDSZ RRFIXEDSZ;
MACRO_RRIP RRIP_BIT;
MACRO_RRIP RRIP_EXT_VERSION;
MACRO_RRIP RRIP_FILE_NAMELEN;
MACRO_RRIP RRIP_NAME_CHANGE;
MACRO_RRIP RRIP_NAME_CONTINUE;
MACRO_RRIP RRIP_NAME_CURRENT;
MACRO_RRIP RRIP_NAME_HOST;
MACRO_RRIP RRIP_NAME_LEN_BASE;
MACRO_RRIP RRIP_NAME_PARENT;
MACRO_RRIP RRIP_NAME_ROOT;
MACRO_RRIP RRIP_NAME_VOLROOT;
MACRO_RRIP RRIP_SUF_VERSION;
MACRO_RRIP RRIP_SYM_LINK_COMPLETE;
MACRO_RRIP RRIP_TF_ACCESS_BIT;
MACRO_RRIP RRIP_TF_ATTRIBUTES_BIT;
MACRO_RRIP RRIP_TF_BACKUP_BIT;
MACRO_RRIP RRIP_TF_CREATION_BIT;
MACRO_RRIP RRIP_TF_EFFECTIVE_BIT;
MACRO_RRIP RRIP_TF_EXPIRATION_BIT;
MACRO_RRIP RRIP_TF_LONG_BIT;
MACRO_RRIP RRIP_TF_MODIFY_BIT;
MACRO_RRIP RRIP_TIME_START_BP;
MACRO_RRIP RRIP_VERSION;
MACRO_RRQ RRQ;
MACRO_REOF RSERIALIZE;
MACRO_TSETCTSET RSETCLK;
MACRO_RSETCOFF RSETCOFF;
MACRO_RSETCOFF RSETCRBRG;
MACRO_RSETCTSET RSETCRSET;
MACRO_RSETCOFF RSETCTBRG;
MACRO_RSETCTSET RSETCTSET;
MACRO_RSTATPROC RSTATPROC_HAVEDISK;
MACRO_RSTATPROC RSTATPROC_STATS;
MACRO_RSTATPROG RSTATPROG;
MACRO_RSTATVERS_TIME RSTATVERS_TIME;
MACRO_RSTATVERS RSTATVERS_VAR;
MACRO_RSTAT RSTAT_CPUSTATES;
MACRO_RSTAT RSTAT_CPU_IDLE;
MACRO_RSTAT RSTAT_CPU_NICE;
MACRO_RSTAT RSTAT_CPU_SYS;
MACRO_RSTAT RSTAT_CPU_USER;
MACRO_RSTAT RSTAT_DK_NDRIVE;
MACRO_RS RS_HIPRI;
MACRO_RTA RTA_AUTHOR;
MACRO_RTA RTA_BRD;
MACRO_RTA RTA_DST;
MACRO_RTA RTA_GATEWAY;
MACRO_RTA RTA_GENMASK;
MACRO_RTA RTA_IFA;
MACRO_RTA RTA_IFP;
MACRO_RTA RTA_NETMASK;
MACRO_RTA RTA_NUMBITS;
MACRO_RTBACKQ RTBACKQ;
MACRO_RTF RTF_BLACKHOLE;
MACRO_RTF RTF_CLONING;
MACRO_RTF RTF_DONE;
MACRO_RTF RTF_DYNAMIC;
MACRO_RTF RTF_GATEWAY;
MACRO_RTF RTF_HOST;
MACRO_RTF RTF_LLINFO;
MACRO_RTF RTF_MASK;
MACRO_RTF RTF_MODIFIED;
MACRO_RTF RTF_PRIVATE;
MACRO_RTF RTF_PROTO1;
MACRO_RTF RTF_PROTO2;
MACRO_RTF RTF_REJECT;
MACRO_RTF RTF_STATIC;
MACRO_RTF RTF_UP;
MACRO_RTF RTF_XRESOLVE;
MACRO_RTLD RTLD_CONFGEN;
MACRO_RTLD RTLD_CONFSET;
MACRO_RTLD RTLD_DEFAULT;
MACRO_RTLD RTLD_DI_CONFIGADDR;
MACRO_RTLD RTLD_DI_LINKMAP;
MACRO_RTLD RTLD_DI_LMID;
MACRO_RTLD RTLD_DI_MAX;
MACRO_RTLD RTLD_GLOBAL;
MACRO_RTLD RTLD_GROUP;
MACRO_RTLD RTLD_LAZY;
MACRO_RTLD RTLD_LOCAL;
MACRO_RTLD RTLD_MEMORY;
MACRO_RTLD RTLD_NEXT;
MACRO_RTLD RTLD_NODELETE;
MACRO_RTLD RTLD_NOHEAP;
MACRO_RTLD RTLD_NOLOAD;
MACRO_RTLD RTLD_NOW;
MACRO_RTLD RTLD_PARENT;
MACRO_RTLD RTLD_REL_ALL;
MACRO_RTLD RTLD_REL_DEPENDS;
MACRO_RTLD RTLD_REL_EXEC;
MACRO_RTLD RTLD_REL_PRELOAD;
MACRO_RTLD RTLD_REL_RELATIVE;
MACRO_RTLD RTLD_REL_SELF;
MACRO_RTLD RTLD_REL_WEAK;
MACRO_RTLD RTLD_STRIP;
MACRO_RTLD RTLD_WORLD;
MACRO_RTM RTM_ADD;
MACRO_RTM RTM_CHANGE;
MACRO_RTM RTM_DELADDR;
MACRO_RTM RTM_DELETE;
MACRO_RTM RTM_GET;
MACRO_RTM RTM_IFINFO;
MACRO_RTM RTM_LOCK;
MACRO_RTM RTM_LOSING;
MACRO_RTM RTM_MISS;
MACRO_RTM RTM_NEWADDR;
MACRO_RTM RTM_OLDADD;
MACRO_RTM RTM_OLDDEL;
MACRO_RTM RTM_REDIRECT;
MACRO_RTM RTM_RESOLVE;
MACRO_RTM RTM_VERSION;
MACRO_BUSY_0 RTO;
MACRO_REOF RTRUNCATE;
MACRO_RTSXOFF RTSXOFF;
MACRO_ON RTS_ON;
MACRO_RTS RTS_TOG;
MACRO_RTV RTV_EXPIRE;
MACRO_RTV RTV_HOPCOUNT;
MACRO_RTV RTV_MTU;
MACRO_RTV RTV_RPIPE;
MACRO_RTV RTV_RTT;
MACRO_RTV RTV_RTTVAR;
MACRO_RTV RTV_SPIPE;
MACRO_RTV RTV_SSTHRESH;
$AF097615159EB3CBDA82C5A5C14EBA11 RT_ADD;
$AF097615159EB3CBDA82C5A5C14EBA11 RT_CONSISTENT;
$AF097615159EB3CBDA82C5A5C14EBA11 RT_DELETE;
MACRO_RT RT_GETDPSIZE;
MACRO_RT RT_GETDPTBL;
MACRO_RT RT_NOCHANGE;
MACRO_RT RT_SETDPTBL;
MACRO_RT RT_TQDEF;
MACRO_RT RT_TQINF;
MACRO_RUN RUN_LVL;
MACRO_RUSAGE RUSAGE_CHILDREN;
MACRO_RUSAGE RUSAGE_SELF;
MACRO_RUSERSPROC RUSERSPROC_ALLNAMES;
MACRO_RUSERSPROC RUSERSPROC_NAMES;
MACRO_RUSERSPROC RUSERSPROC_NUM;
MACRO_RUSERSPROG RUSERSPROG;
MACRO_RUSERSVERS_0 RUSERSVERS;
MACRO_RUSERSVERS_3 RUSERSVERS_3;
MACRO_RUSERSVERS RUSERSVERS_IDLE;
MACRO_RUSERS RUSERS_ACCOUNTING;
MACRO_RUSERS RUSERS_BOOT_TIME;
MACRO_RUSERS RUSERS_DEAD_PROCESS;
MACRO_RUSERS RUSERS_EMPTY;
MACRO_RUSERS RUSERS_INIT_PROCESS;
MACRO_RUSERS RUSERS_LOGIN_PROCESS;
MACRO_RUSERS RUSERS_MAXHOSTLEN;
MACRO_RUSERS RUSERS_MAXLINELEN;
MACRO_RUSERS RUSERS_MAXUSERLEN;
MACRO_RUSERS RUSERS_NEW_TIME;
MACRO_RUSERS RUSERS_OLD_TIME;
MACRO_RUSERS RUSERS_RUN_LVL;
MACRO_RUSERS RUSERS_USER_PROCESS;
MACRO_RVAL RVAL_CMD_UNKNOWN;
MACRO_RVAL RVAL_CON_INVALID;
MACRO_RVAL RVAL_MAC_INVALID;
MACRO_RVAL RVAL_PARM_INVALID;
MACRO_RVAL RVAL_SAP_INVALID;
MACRO_RVAL RVAL_STA_INVALID;
MACRO_RVAL RVAL_STA_OUTSTATE;
MACRO_RVAL RVAL_SYS_ERR;
MACRO_MAGIC RWL_MAGIC;
$C0126AC73A46DE8E745F9FEA17492D57 RW_DEFAULT;
$C0126AC73A46DE8E745F9FEA17492D57 RW_DRIVER;
MACRO_RW RW_HAS_WAITERS;
MACRO_RW RW_HOLD_COUNT;
MACRO_RW RW_HOLD_COUNT_SHIFT;
MACRO_RW RW_LOCKED;
MACRO_RW RW_OWNER;
$5B09411ABF7AF89741BC688D36351F9B RW_READER;
MACRO_RW RW_READ_COUNT;
MACRO_RW RW_READ_LOCK;
$5B09411ABF7AF89741BC688D36351F9B RW_WRITER;
MACRO_RW RW_WRITE_CLAIMED;
MACRO_RW RW_WRITE_LOCKED;
MACRO_RW RW_WRITE_WANTED;
MACRO_RXC RXC_IS_BAUD;
MACRO_INVERT RXC_IS_INVERT;
MACRO_RXC RXC_IS_PLL;
MACRO_RXC RXC_IS_RXC;
MACRO_IS_SYSCLK RXC_IS_SYSCLK;
MACRO_RXC RXC_IS_TXC;
MACRO_INVERT RXD_IS_INVERT;
MACRO_BAUD RX_BAUD;
MACRO_RX_TIMEOUT RX_BREAK;
MACRO_RX_DATA RX_DATA;
MACRO_ENA RX_ENA;
MACRO_RX_FIFO_MASK RX_FIFO_MASK;
MACRO_RX RX_FIFO_SIZE;
MACRO_RX_TIMEOUT RX_FRAMING;
MACRO_RX_TIMEOUT RX_OVERRUN;
MACRO_RX_TIMEOUT RX_PARITY;
MACRO_RX_DATA RX_RET;
MACRO_RX_TIMEOUT RX_TIMEOUT;
MACRO_R_386 R_386_32;
MACRO_R_386 R_386_32PLT;
MACRO_R_386 R_386_COPY;
MACRO_R_386 R_386_GLOB_DAT;
MACRO_R_386 R_386_GOT32;
MACRO_R_386 R_386_GOTOFF;
MACRO_R_386 R_386_GOTPC;
MACRO_R_386 R_386_JMP_SLOT;
MACRO_R_386 R_386_NONE;
MACRO_R_386 R_386_NUM;
MACRO_R_386 R_386_PC32;
MACRO_R_386 R_386_PLT32;
MACRO_R_386 R_386_RELATIVE;
MACRO_R_CTL_ACK R_CTL_ACK_1;
MACRO_R_CTL_ACK R_CTL_ACK_N;
MACRO_R_CTL R_CTL_BASIC_SVC;
MACRO_R_CTL R_CTL_COMMAND;
MACRO_R_CTL R_CTL_DEVICE_DATA;
MACRO_R_CTL R_CTL_ELS_REQ;
MACRO_R_CTL R_CTL_ELS_RSP;
MACRO_R_CTL R_CTL_EXTENDED_SVC;
MACRO_R_CTL R_CTL_FC4_SVC;
MACRO_R_CTL_ACK R_CTL_F_BSY_DF;
MACRO_R_CTL_ACK R_CTL_F_BSY_LC;
MACRO_R_CTL_ACK R_CTL_F_RJT;
MACRO_R_CTL R_CTL_INFO;
MACRO_R_CTL_ACK R_CTL_LCR;
MACRO_R_CTL R_CTL_LINK_CTL;
MACRO_R_CTL R_CTL_LS_ABTS;
MACRO_R_CTL R_CTL_LS_BA_ACC;
MACRO_R_CTL R_CTL_LS_BA_RJT;
MACRO_R_CTL R_CTL_LS_NOP;
MACRO_R_CTL R_CTL_LS_RMC;
MACRO_R_CTL_ACK R_CTL_P_BSY;
MACRO_R_CTL_ACK R_CTL_P_RJT;
MACRO_R_CTL R_CTL_ROUTING;
MACRO_R_CTL R_CTL_SOLICITED_CONTROL;
MACRO_R_CTL R_CTL_SOLICITED_DATA;
MACRO_R_CTL R_CTL_STATUS;
MACRO_R_CTL R_CTL_UNCATEGORIZED;
MACRO_R_CTL R_CTL_UNSOL_CONTROL;
MACRO_R_CTL R_CTL_UNSOL_DATA;
MACRO_R_CTL R_CTL_VIDEO_BUFF;
MACRO_R_CTL R_CTL_XFER_RDY;
MACRO_R R_DEBUG_VERSION;
MACRO_R_G0 R_FP;
MACRO_R_G0 R_G0;
MACRO_R_G0 R_G1;
MACRO_R_G0 R_G2;
MACRO_R_G0 R_G3;
MACRO_R_G0 R_G4;
MACRO_R_G0 R_G5;
MACRO_R_G0 R_G6;
MACRO_R_G0 R_G7;
MACRO_R_G0 R_I0;
MACRO_R_G0 R_I1;
MACRO_R_G0 R_I2;
MACRO_R_G0 R_I3;
MACRO_R_G0 R_I4;
MACRO_R_G0 R_I5;
MACRO_R_G0 R_I6;
MACRO_R_G0 R_I7;
MACRO_R_IA R_IA_64_DIR32LSB;
MACRO_R_IA R_IA_64_DIR32MSB;
MACRO_R_IA R_IA_64_DIR64LSB;
MACRO_R_IA R_IA_64_DIR64MSB;
MACRO_R_IA R_IA_64_FPTR32LSB;
MACRO_R_IA R_IA_64_FPTR32MSB;
MACRO_R_IA R_IA_64_FPTR64I;
MACRO_R_IA R_IA_64_FPTR64LSB;
MACRO_R_IA R_IA_64_FPTR64MSB;
MACRO_R_IA R_IA_64_GPREL22;
MACRO_R_IA R_IA_64_GPREL64I;
MACRO_R_IA R_IA_64_GPREL64LSB;
MACRO_R_IA R_IA_64_GPREL64MSB;
MACRO_R_IA R_IA_64_IMM14;
MACRO_R_IA R_IA_64_IMM22;
MACRO_R_IA R_IA_64_IMM64;
MACRO_R_IA R_IA_64_IPLTLSB;
MACRO_R_IA R_IA_64_IPLTMSB;
MACRO_R_IA R_IA_64_LTOFF22;
MACRO_R_IA R_IA_64_LTOFF64I;
MACRO_R_IA R_IA_64_LTOFF_FPTR22;
MACRO_R_IA R_IA_64_LTOFF_FPTR64I;
MACRO_R_IA R_IA_64_LTV32LSB;
MACRO_R_IA R_IA_64_LTV32MSB;
MACRO_R_IA R_IA_64_LTV64LSB;
MACRO_R_IA R_IA_64_LTV64MSB;
MACRO_R_IA R_IA_64_NONE;
MACRO_R_IA R_IA_64_NUM;
MACRO_R_IA R_IA_64_PCREL21B;
MACRO_R_IA R_IA_64_PCREL21F;
MACRO_R_IA R_IA_64_PCREL21M;
MACRO_R_IA R_IA_64_PCREL32LSB;
MACRO_R_IA R_IA_64_PCREL32MSB;
MACRO_R_IA R_IA_64_PCREL64LSB;
MACRO_R_IA R_IA_64_PCREL64MSB;
MACRO_R_IA R_IA_64_PLTOFF22;
MACRO_R_IA R_IA_64_PLTOFF64I;
MACRO_R_IA R_IA_64_PLTOFF64LSB;
MACRO_R_IA R_IA_64_PLTOFF64MSB;
MACRO_R_IA R_IA_64_REL32LSB;
MACRO_R_IA R_IA_64_REL32MSB;
MACRO_R_IA R_IA_64_REL64LSB;
MACRO_R_IA R_IA_64_REL64MSB;
MACRO_R_IA R_IA_64_SECREL32LSB;
MACRO_R_IA R_IA_64_SECREL32MSB;
MACRO_R_IA R_IA_64_SECREL64LSB;
MACRO_R_IA R_IA_64_SECREL64MSB;
MACRO_R_IA R_IA_64_SEGREL32LSB;
MACRO_R_IA R_IA_64_SEGREL32MSB;
MACRO_R_IA R_IA_64_SEGREL64LSB;
MACRO_R_IA R_IA_64_SEGREL64MSB;
MACRO_R_G0 R_L0;
MACRO_R_G0 R_L1;
MACRO_R_G0 R_L2;
MACRO_R_G0 R_L3;
MACRO_R_G0 R_L4;
MACRO_R_G0 R_L5;
MACRO_R_G0 R_L6;
MACRO_R_G0 R_L7;
MACRO_R_M32 R_M32_32;
MACRO_R_M32 R_M32_32_S;
MACRO_R_M32 R_M32_COPY;
MACRO_R_M32 R_M32_GLOB_DAT;
MACRO_R_M32 R_M32_GOT32_S;
MACRO_R_M32 R_M32_JMP_SLOT;
MACRO_R_M32 R_M32_NONE;
MACRO_R_M32 R_M32_NUM;
MACRO_R_M32 R_M32_PC32_S;
MACRO_R_M32 R_M32_PLT32_S;
MACRO_R_M32 R_M32_RELATIVE;
MACRO_R_M32 R_M32_RELATIVE_S;
MACRO_R_G0 R_O0;
MACRO_R_G0 R_O1;
MACRO_R_G0 R_O2;
MACRO_R_G0 R_O3;
MACRO_R_G0 R_O4;
MACRO_R_G0 R_O5;
MACRO_R_G0 R_O6;
MACRO_R_G0 R_O7;
MACRO_OK R_OK;
MACRO_R_G0 R_PC;
MACRO_R_G0 R_PS;
MACRO_R_G0 R_PSR;
MACRO_R_G0 R_R0;
MACRO_R_G0 R_R1;
MACRO_R_G0 R_SP;
MACRO_R_SPARC R_SPARC_10;
MACRO_R_SPARC R_SPARC_11;
MACRO_R_SPARC R_SPARC_13;
MACRO_R_SPARC R_SPARC_16;
MACRO_R_SPARC R_SPARC_22;
MACRO_R_SPARC R_SPARC_32;
MACRO_R_SPARC R_SPARC_5;
MACRO_R_SPARC R_SPARC_6;
MACRO_R_SPARC R_SPARC_64;
MACRO_R_SPARC R_SPARC_7;
MACRO_R_SPARC R_SPARC_8;
MACRO_R_SPARC R_SPARC_COPY;
MACRO_R_SPARC R_SPARC_DISP16;
MACRO_R_SPARC R_SPARC_DISP32;
MACRO_R_SPARC R_SPARC_DISP64;
MACRO_R_SPARC R_SPARC_DISP8;
MACRO_R_SPARC R_SPARC_GLOB_DAT;
MACRO_R_SPARC R_SPARC_GLOB_JMP;
MACRO_R_SPARC R_SPARC_GOT10;
MACRO_R_SPARC R_SPARC_GOT13;
MACRO_R_SPARC R_SPARC_GOT22;
MACRO_R_SPARC R_SPARC_H44;
MACRO_R_SPARC R_SPARC_HH22;
MACRO_R_SPARC R_SPARC_HI22;
MACRO_R_SPARC R_SPARC_HIPLT22;
MACRO_R_SPARC R_SPARC_HIX22;
MACRO_R_SPARC R_SPARC_HM10;
MACRO_R_SPARC R_SPARC_JMP_SLOT;
MACRO_R_SPARC R_SPARC_L44;
MACRO_R_SPARC R_SPARC_LM22;
MACRO_R_SPARC R_SPARC_LO10;
MACRO_R_SPARC R_SPARC_LOPLT10;
MACRO_R_SPARC R_SPARC_LOX10;
MACRO_R_SPARC R_SPARC_M44;
MACRO_R_SPARC R_SPARC_NONE;
MACRO_R_SPARC R_SPARC_NUM;
MACRO_R_SPARC R_SPARC_OLO10;
MACRO_R_SPARC R_SPARC_PC10;
MACRO_R_SPARC R_SPARC_PC22;
MACRO_R_SPARC R_SPARC_PCPLT10;
MACRO_R_SPARC R_SPARC_PCPLT22;
MACRO_R_SPARC R_SPARC_PCPLT32;
MACRO_R_SPARC R_SPARC_PC_HH22;
MACRO_R_SPARC R_SPARC_PC_HM10;
MACRO_R_SPARC R_SPARC_PC_LM22;
MACRO_R_SPARC R_SPARC_PLT32;
MACRO_R_SPARC R_SPARC_PLT64;
MACRO_R_SPARC R_SPARC_REGISTER;
MACRO_R_SPARC R_SPARC_RELATIVE;
MACRO_R_SPARC R_SPARC_UA16;
MACRO_R_SPARC R_SPARC_UA32;
MACRO_R_SPARC R_SPARC_UA64;
MACRO_R_SPARC R_SPARC_WDISP16;
MACRO_R_SPARC R_SPARC_WDISP19;
MACRO_R_SPARC R_SPARC_WDISP22;
MACRO_R_SPARC R_SPARC_WDISP30;
MACRO_R_SPARC R_SPARC_WPLT30;
MACRO_R_G0 R_TBR;
MACRO_R_G0 R_WIM;
MACRO_R_G0 R_Y;
MACRO_R_G0 R_nPC;
MACRO_ConfigMCast ReconfigMCast;
MACRO_S2E S2E_MLD;
MACRO_S2E S2E_NPT;
MACRO_S2E S2E_SP;
MACRO_SUPD SACC;
MACRO_SADB SADB_AALG_MAX;
MACRO_SADB SADB_AALG_MD5HMAC;
MACRO_SADB SADB_AALG_NONE;
MACRO_SADB SADB_AALG_SHA1HMAC;
MACRO_SADB SADB_ACQUIRE;
MACRO_SADB SADB_ADD;
MACRO_SADB SADB_DELETE;
MACRO_SADB SADB_DPD_MAX;
MACRO_SADB SADB_DPD_NONE;
MACRO_SADB SADB_DUMP;
MACRO_SADB SADB_EALG_3DESCBC;
MACRO_SADB SADB_EALG_DESCBC;
MACRO_SADB SADB_EALG_MAX;
MACRO_SADB SADB_EALG_NONE;
MACRO_SADB SADB_EALG_NULL;
MACRO_SADB SADB_EXPIRE;
MACRO_SADB SADB_EXT_ADDRESS_DST;
MACRO_SADB SADB_EXT_ADDRESS_PROXY;
MACRO_SADB SADB_EXT_ADDRESS_SRC;
MACRO_SADB SADB_EXT_IDENTITY_DST;
MACRO_SADB SADB_EXT_IDENTITY_SRC;
MACRO_SADB SADB_EXT_KEY_AUTH;
MACRO_SADB SADB_EXT_KEY_ENCRYPT;
MACRO_SADB SADB_EXT_LIFETIME_CURRENT;
MACRO_SADB SADB_EXT_LIFETIME_HARD;
MACRO_SADB SADB_EXT_LIFETIME_SOFT;
MACRO_SADB SADB_EXT_MAX;
MACRO_SADB SADB_EXT_PROPOSAL;
MACRO_SADB SADB_EXT_RESERVED;
MACRO_SADB SADB_EXT_SA;
MACRO_SADB SADB_EXT_SENSITIVITY;
MACRO_SADB SADB_EXT_SPIRANGE;
MACRO_SADB SADB_EXT_SUPPORTED_AUTH;
MACRO_SADB SADB_EXT_SUPPORTED_ENCRYPT;
MACRO_SADB SADB_FLUSH;
MACRO_SADB SADB_GET;
MACRO_SADB SADB_GETSPI;
MACRO_SADB SADB_IDENTTYPE_FQDN;
MACRO_SADB SADB_IDENTTYPE_MAX;
MACRO_SADB SADB_IDENTTYPE_PREFIX;
MACRO_SADB SADB_IDENTTYPE_RESERVED;
MACRO_SADB SADB_IDENTTYPE_USER_FQDN;
MACRO_SADB SADB_MAX;
MACRO_SADB SADB_REGISTER;
MACRO_SADB SADB_RESERVED;
MACRO_SADB SADB_SAFLAGS_NOREPLAY;
MACRO_SADB SADB_SAFLAGS_PFS;
MACRO_SADB SADB_SASTATE_DEAD;
MACRO_SADB SADB_SASTATE_DYING;
MACRO_SADB SADB_SASTATE_LARVAL;
MACRO_SADB SADB_SASTATE_MATURE;
MACRO_SADB SADB_SASTATE_MAX;
MACRO_SADB SADB_SATYPE_AH;
MACRO_SADB SADB_SATYPE_ESP;
MACRO_SADB SADB_SATYPE_MAX;
MACRO_SADB SADB_SATYPE_MIP;
MACRO_SADB SADB_SATYPE_OSPFV2;
MACRO_SADB SADB_SATYPE_RIPV2;
MACRO_SADB SADB_SATYPE_RSVP;
MACRO_SADB SADB_SATYPE_UNSPEC;
MACRO_SADB SADB_UPDATE;
MACRO_SADB SADB_X_PCHANGE;
MACRO_SADB SADB_X_PROMISC;
MACRO_SADB SADB_X_SAFLAGS_AALG1;
MACRO_SADB SADB_X_SAFLAGS_AALG2;
MACRO_SADB SADB_X_SAFLAGS_EALG1;
MACRO_SADB SADB_X_SAFLAGS_EALG2;
MACRO_SADB SADB_X_SAFLAGS_UNIQUE;
MACRO_SADB SADB_X_SAFLAGS_USED;
MACRO_SADIOC SADIOC;
MACRO_SAD SAD_GAP;
MACRO_SAD SAD_SAP;
MACRO_SAD SAD_VML;
MACRO_SAFTE SAFTE_RD_RDCFG;
MACRO_SAFTE SAFTE_RD_RDDSTS;
MACRO_SAFTE SAFTE_RD_RDESTS;
MACRO_SAFTE SAFTE_WT_ACTPWS;
MACRO_SAFTE SAFTE_WT_DSTAT;
MACRO_SAFTE SAFTE_WT_FANSPD;
MACRO_SAFTE SAFTE_WT_GLOBAL;
MACRO_SAFTE SAFTE_WT_SLTOP;
$E36DDC315EED95A07EBF18BE166BF116 SAFT_TYPE;
name_pos SAME_NAME;
MACRO_SAP SAP_ALL;
MACRO_SAP SAP_CLEAR;
MACRO_SAP SAP_ONE;
MACRO_SAP SAP_RANGE;
MACRO_SARMAG SARMAG;
MACRO_SA SA_NOCLDSTOP;
MACRO_SA SA_NOCLDWAIT;
MACRO_SA SA_NODEFER;
MACRO_SA_NOT SA_NOT;
MACRO_SA SA_ONSTACK;
MACRO_SA SA_RESETHAND;
MACRO_SA SA_RESTART;
MACRO_SA SA_SIGINFO;
MACRO_SA SA_WAITSIG;
MACRO_SB SB;
MACRO_SBIOC SBIOC;
MACRO_SBIOCCTIME SBIOCCTIME;
MACRO_SBIOCGCHUNK SBIOCGCHUNK;
MACRO_SBIOCGFLAGS SBIOCGFLAGS;
MACRO_SBIOCGSNAP SBIOCGSNAP;
MACRO_SBIOCGTIME SBIOCGTIME;
MACRO_SBIOCSCHUNK SBIOCSCHUNK;
MACRO_SBIOCSFLAGS SBIOCSFLAGS;
MACRO_SBIOCSSNAP SBIOCSSNAP;
MACRO_SBIOCSTIME SBIOCSTIME;
MACRO_BBLOCK SBLOCK;
MACRO_BBOFF SBOFF;
MACRO_SSYS SBPTADJ;
MACRO_SBSIZE SBSIZE;
MACRO_SB_DFLT SB_DEFER_CHUNK;
MACRO_SB_DFLT SB_DFLT_CHUNK;
MACRO_SB_DFLT SB_FRCVD;
MACRO_SB_DFLT SB_NO_DROPS;
MACRO_SB_DFLT SB_NO_HEADER;
MACRO_SB_DFLT SB_NO_PROTO_CVT;
MACRO_SB_DFLT SB_SEND_ON_WRITE;
MACRO_SB_XBOX SB_XBOX;
MACRO_SCALE SCALE_KF;
MACRO_SCALE SCALE_KG;
MACRO_SCALE SCALE_KH;
MACRO_SCALE_PHASE SCALE_PHASE;
MACRO_SCALE_PHASE SCALE_UPDATE;
MACRO_SCALE_PHASE SCALE_USEC;
MACRO_SCHAR SCHAR_MAX;
MACRO_SCHAR SCHAR_MIN;
MACRO_SCHED SCHED_FIFO;
MACRO_SCHED SCHED_IA;
MACRO_SCHED SCHED_OTHER;
MACRO_SCHED SCHED_RR;
MACRO_SCHED SCHED_SYS;
MACRO_SUPD SCHG;
MACRO_SCHI SCHI_CLR_INT_PDN;
MACRO_SCHI SCHI_CLR_PDN;
MACRO_SCHI SCHI_CLR_RESET;
MACRO_SCHI SCHI_ENA_ALL;
MACRO_SCHI SCHI_ENA_INT_PDN;
MACRO_SCHI SCHI_ENA_MODE;
MACRO_SCHI SCHI_ENA_PDN;
MACRO_SCHI SCHI_ENA_RESET;
MACRO_SCHI SCHI_SET_CTRL_MODE;
MACRO_SCHI SCHI_SET_DATA_MODE;
MACRO_SCHI SCHI_SET_INT_PDN;
MACRO_SCHI SCHI_SET_PDN;
MACRO_SCHI SCHI_SET_RESET;
MACRO_COR2 SCHR1;
MACRO_SCHR2 SCHR2;
MACRO_SCHR3 SCHR3;
MACRO_SCHR4 SCHR4;
MACRO_DET SCHR_DET;
MACRO_SUPD SCLONE;
MACRO_SCMD SCMD_CD_PLAYBACK_CONTROL;
MACRO_SCMD SCMD_CD_PLAYBACK_STATUS;
MACRO_SCMD_GROUP0 SCMD_COMPARE;
MACRO_SCMD_GROUP0 SCMD_COPY;
MACRO_SCMD_GROUP0 SCMD_COPY_VERIFY;
MACRO_SCMD_GROUP0 SCMD_DOORLOCK;
MACRO_SCMD_GROUP0 SCMD_ERASE;
MACRO_SCMD_GROUP0 SCMD_FLUSH_PRINT_BUF;
MACRO_SCMD_GROUP0 SCMD_FORMAT;
MACRO_SCMD_GROUP0 SCMD_GDIAG;
MACRO_SCMD_GROUP0 SCMD_GET_CONFIGURATION;
MACRO_SCMD_GROUP0 SCMD_GROUP0;
MACRO_SCMD_GROUP0 SCMD_GROUP1;
MACRO_SCMD_GROUP5 SCMD_GROUP5;
MACRO_SCMD_GROUP0 SCMD_INQUIRY;
MACRO_SCMD_GROUP0 SCMD_LOAD;
MACRO_SCMD_GROUP0 SCMD_LOG_SENSE_G1;
MACRO_SCMD_GROUP0 SCMD_MODE_SELECT;
MACRO_SCMD_GROUP0 SCMD_MODE_SELECT_G1;
MACRO_SCMD_GROUP0 SCMD_MODE_SENSE;
MACRO_SCMD_GROUP0 SCMD_MODE_SENSE_G1;
MACRO_SCMD SCMD_PAUSE_RESUME;
MACRO_SCMD SCMD_PLAYAUDIO10;
MACRO_SCMD SCMD_PLAYAUDIO12;
MACRO_SCMD SCMD_PLAYAUDIO_MSF;
MACRO_SCMD SCMD_PLAYAUDIO_TI;
MACRO_SCMD SCMD_PLAYTRACK_REL10;
MACRO_SCMD SCMD_PLAYTRACK_REL12;
MACRO_SCMD_GROUP0 SCMD_PRINT;
MACRO_SCMD_GROUP0 SCMD_READ;
MACRO_SCMD SCMD_READ_ALL_SUBCODES;
MACRO_SCMD_GROUP0 SCMD_READ_BLKLIM;
MACRO_SCMD_GROUP0 SCMD_READ_BUFFER;
MACRO_SCMD_GROUP0 SCMD_READ_CAPACITY;
MACRO_SCMD SCMD_READ_CD;
MACRO_SCMD SCMD_READ_CDDA;
MACRO_SCMD SCMD_READ_CDXA;
MACRO_SCMD_GROUP0 SCMD_READ_DEFECT_LIST;
MACRO_SCMD_GROUP0 SCMD_READ_G1;
MACRO_SCMD SCMD_READ_HEADER;
MACRO_SCMD_GROUP0 SCMD_READ_REVERSE;
MACRO_SCMD SCMD_READ_SUBCHANNEL;
MACRO_SCMD SCMD_READ_TOC;
MACRO_SCMD_GROUP0 SCMD_REASSIGN_BLOCK;
MACRO_SCMD_GROUP0 SCMD_RECEIVE;
MACRO_SCMD_GROUP0 SCMD_RECOVER_BUF;
MACRO_SCMD_GROUP0 SCMD_RELEASE;
MACRO_SCMD_GROUP0 SCMD_RELEASE_G1;
MACRO_SCMD_GROUP0 SCMD_REQUEST_SENSE;
MACRO_SCMD_GROUP0 SCMD_RESERVE;
MACRO_SCMD_GROUP0 SCMD_RESERVE_G1;
MACRO_SCMD_GROUP0 SCMD_REWIND;
MACRO_SCMD_GROUP0 SCMD_REZERO_UNIT;
MACRO_SCMD_GROUP0 SCMD_SDIAG;
MACRO_SCMD_GROUP0 SCMD_SEARCH_EQUAL;
MACRO_SCMD_GROUP0 SCMD_SEARCH_HIGH;
MACRO_SCMD_GROUP0 SCMD_SEARCH_LOW;
MACRO_SCMD_GROUP0 SCMD_SEEK;
MACRO_SCMD_GROUP0 SCMD_SEEK_G1;
MACRO_SCMD_GROUP0 SCMD_SEND;
MACRO_SCMD_GROUP0 SCMD_SET_LIMITS;
MACRO_SCMD_GROUP0 SCMD_SLEW_PRINT;
MACRO_SCMD_GROUP0 SCMD_SPACE;
MACRO_SCMD_GROUP0 SCMD_START_STOP;
MACRO_SCMD_GROUP0 SCMD_STOP_PRINT;
MACRO_SCMD_SYNCHRONIZE SCMD_SYNCHRONIZE_CACHE;
MACRO_SCMD_GROUP0 SCMD_TEST_UNIT_READY;
MACRO_SCMD_GROUP0 SCMD_TRK_SEL;
MACRO_SCMD_GROUP0 SCMD_VERIFY;
MACRO_SCMD_GROUP0 SCMD_VERIFY_G0;
MACRO_SCMD_GROUP0 SCMD_WRITE;
MACRO_SCMD_GROUP0 SCMD_WRITE_BUFFER;
MACRO_SCMD_GROUP0 SCMD_WRITE_FILE_MARK;
MACRO_SCMD_GROUP0 SCMD_WRITE_G1;
MACRO_SCMD_GROUP0 SCMD_WRITE_VERIFY;
MACRO_SCM SCM_RIGHTS;
MACRO_ASCII_DEVID SCROLL_DEVID;
MACRO_SCSI3 SCSI3_RESV_EXCLUSIVEACCESS;
MACRO_SCSI3 SCSI3_RESV_EXCLUSIVEACCESSREGISTRANTSONLY;
MACRO_SCSI3 SCSI3_RESV_READEXCLUSIVE_OBSOLETE;
MACRO_SCSI3 SCSI3_RESV_READSHARED_OBSOLETE;
MACRO_SCSI3 SCSI3_RESV_SHAREDACCESS_OBSOLETE;
MACRO_SCSI3 SCSI3_RESV_WRITEEXCLUSIVE;
MACRO_SCSI3 SCSI3_RESV_WRITEEXCLUSIVEREGISTRANTSONLY;
MACRO_SCSI3 SCSI3_SCOPE_ELEMENT;
MACRO_SCSI3 SCSI3_SCOPE_EXTENT_OBSOLETE;
MACRO_SCSI3 SCSI3_SCOPE_LOGICALUNIT;
MACRO_SCSIPROBE SCSIPROBE_BUSY;
MACRO_SCSIPROBE SCSIPROBE_EXISTS;
MACRO_SCSIPROBE SCSIPROBE_FAILURE;
MACRO_SCSIPROBE SCSIPROBE_NOMEM;
MACRO_SCSIPROBE SCSIPROBE_NOMEM_CB;
MACRO_SCSIPROBE SCSIPROBE_NONCCS;
MACRO_SCSIPROBE SCSIPROBE_NORESP;
MACRO_SCSIREG SCSIREG;
MACRO_PER_TARGET SCSI_16LUNS_PER_TARGET;
MACRO_PER_TARGET SCSI_1LUN_PER_TARGET;
MACRO_PER_TARGET SCSI_32LUNS_PER_TARGET;
MACRO_SIZE SCSI_CDB_SIZE;
MACRO_SCSI_DEBUG SCSI_DEBUG_HA;
MACRO_SCSI_DEBUG SCSI_DEBUG_LIB;
MACRO_SCSI_DEBUG SCSI_DEBUG_TGT;
MACRO_SCSI_DEFAULT SCSI_DEFAULT_RESET_DELAY;
MACRO_SCSI_DEFAULT SCSI_DEFAULT_SELECTION_TIMEOUT;
MACRO_SCSI SCSI_MAXNAMELEN;
MACRO_SCSI_DEBUG SCSI_OPTIONS_DR;
MACRO_SCSI_DEBUG SCSI_OPTIONS_FAST;
MACRO_SCSI_DEBUG SCSI_OPTIONS_FAST20;
MACRO_SCSI_DEBUG SCSI_OPTIONS_FAST40;
MACRO_SCSI_DEBUG SCSI_OPTIONS_FAST80;
MACRO_SCSI_DEBUG SCSI_OPTIONS_LINK;
MACRO_SCSI_DEBUG SCSI_OPTIONS_NLUNS_1;
MACRO_SCSI_DEBUG SCSI_OPTIONS_NLUNS_16;
MACRO_SCSI_DEBUG SCSI_OPTIONS_NLUNS_32;
MACRO_SCSI_DEBUG SCSI_OPTIONS_NLUNS_8;
MACRO_SCSI_DEBUG SCSI_OPTIONS_NLUNS_DEFAULT;
MACRO_SCSI_DEBUG SCSI_OPTIONS_NLUNS_MASK;
MACRO_SCSI_DEBUG SCSI_OPTIONS_PARITY;
MACRO_SCSI_DEBUG SCSI_OPTIONS_SYNC;
MACRO_SCSI_DEBUG SCSI_OPTIONS_TAG;
MACRO_SCSI_DEBUG SCSI_OPTIONS_WIDE;
MACRO_SCSI SCSI_RESET_CANCEL;
MACRO_SCSI SCSI_RESET_NOTIFY;
MACRO_SCSI_RSM SCSI_RSM_DEV_DSCP_LEN;
MACRO_SCSI_RSM SCSI_RSM_ENCL_GD_LEN;
MACRO_SCSI_RSM SCSI_RSM_ES_IN_PAGE_LEN;
MACRO_SCSI_RSM SCSI_RSM_ES_IN_PAGE_SIZE;
MACRO_SCSI_RSM SCSI_RSM_ES_OUT_PAGE_LEN;
MACRO_SCSI_RSM SCSI_RSM_ES_OUT_PAGE_SIZE;
MACRO_SCSI_RSM SCSI_RSM_NUM_UNIT_TYPES;
MACRO_SCSI_WATCH SCSI_WATCH_IO_TIME;
MACRO_SCSI_WATCH SCSI_WATCH_TERMINATE_FAIL;
MACRO_SCSI_WATCH SCSI_WATCH_TERMINATE_NOWAIT;
MACRO_SCSI_WATCH SCSI_WATCH_TERMINATE_SUCCESS;
MACRO_SCSI_WATCH SCSI_WATCH_TERMINATE_WAIT;
MACRO_SCTRSHFT SCTRSHFT;
MACRO_SC_ADD SC_ADD;
MACRO_SC_ADD SC_AINFO;
MACRO_SC_NOERROR SC_BADENTRIES;
MACRO_SC_FREE SC_BLOCK;
MACRO_SC_STATUS SC_DISABLE;
MACRO_SC_FREE SC_DOOR;
MACRO_SC_STATUS SC_ENABLE;
MACRO_SC_FAILURE SC_FAILURE;
MACRO_SC_FREE SC_FREE;
MACRO_SC_ADD SC_GETNSWP;
MACRO_SC_FREE SC_IGNORE;
MACRO_SC_ADD SC_LIST;
MACRO_SC_FREE SC_MAX_TICKS;
MACRO_SC_NOERROR SC_NOERROR;
MACRO_SC_NOERROR SC_NOMEM;
MACRO_SC_FREE SC_NOPREEMPT;
MACRO_SC_NOERROR SC_NOTFOUND;
MACRO_SC_FREE SC_ONPROC;
MACRO_SC_NOERROR SC_OPENFAIL;
MACRO_SC_FREE SC_PREEMPT;
MACRO_SC_FREE SC_PRIORITY;
MACRO_SC_STATUS SC_READDB;
MACRO_SC_ADD SC_REMOVE;
MACRO_SC_FREE SC_RUN;
MACRO_SC_FREE SC_SLEEP;
MACRO_SC_FREE SC_STATE;
MACRO_SC_STATUS SC_STATUS;
MACRO_SC_FREE SC_STOPPED;
MACRO_SC_WCLOSE SC_WCLOSE;
MACRO_SC SC_WILDC;
MACRO_SDERR SDERR_ALL;
MACRO_SDERR SDERR_FATAL;
MACRO_SDERR SDERR_INFORMATIONAL;
MACRO_SDERR SDERR_RECOVERED;
MACRO_SDERR SDERR_RETRYABLE;
MACRO_SDERR SDERR_UNKNOWN;
MACRO_SDFLAGS SDFLAGS;
MACRO_SDLCFLAG SDLCFLAG;
MACRO_SD_BECOMING SD_BECOMING_ACTIVE;
MACRO_SD_QUEUEING SD_CONF_BSET_CTYPE;
MACRO_SD_QUEUEING SD_CONF_BSET_NOCACHE;
MACRO_SD_QUEUEING SD_CONF_BSET_NOSERIAL;
MACRO_SD_QUEUEING SD_CONF_BSET_NRR_COUNT;
MACRO_SD_QUEUEING SD_CONF_BSET_THROTTLE;
MACRO_SD_QUEUEING SD_CONF_MAX_ITEMS;
MACRO_SD_QUEUEING SD_CONF_SET_CTYPE;
MACRO_SD_QUEUEING SD_CONF_SET_NOCACHE;
MACRO_SD_QUEUEING SD_CONF_SET_NOSERIAL;
MACRO_SD_QUEUEING SD_CONF_SET_NOTREADY_RETRIES;
MACRO_SD_QUEUEING SD_CONF_SET_THROTTLE;
MACRO_SD_QUEUEING SD_CONF_VERSION;
MACRO_SD_IO SD_DONTSAVE_PAGE;
MACRO_SD_QUEUEING SD_EACCES;
MACRO_SD_QUEUEING SD_EINTR;
MACRO_SD_STOP SD_EJECT;
MACRO_SD_IO SD_FAILFAST;
MACRO_SD_IO SD_FMT_TIME;
MACRO_SD_IO SD_IO_TIME;
MACRO_SD_IO SD_LOST_RESERVE;
MACRO_SD_IO SD_MAXUNIT;
MACRO_SD_IO SD_MAX_NODES;
MACRO_SD_QUEUEING SD_MEDIUM_NOT_PRESENT;
MACRO_SD_QUEUEING SD_NOSERIAL;
MACRO_SD_QUEUEING SD_QUEUEING;
MACRO_SD_QUEUEING SD_READY_VALID;
MACRO_SD_IO SD_REINSTATE_RESV_DELAY;
MACRO_SD_IO SD_RELEASE;
MACRO_SD_IO SD_REMOVAL_ALLOW;
MACRO_SD_IO SD_REMOVAL_PREVENT;
MACRO_SD_IO SD_RESERVATION_CONFLICT;
MACRO_SD_IO SD_RESERVE;
MACRO_SD_IO SD_RESET_THROTTLE_TIMEOUT;
MACRO_SD_IO SD_RETRY_COUNT;
MACRO_SD_IO SD_SAVE_PAGE;
MACRO_SD_QUEUEING SD_SPINDLE_OFF;
MACRO_SD_QUEUEING SD_SPINDLE_ON;
MACRO_SD_STOP SD_START;
MACRO_SD SD_STATE_DUMPING;
MACRO_SD SD_STATE_NORMAL;
MACRO_SD SD_STATE_OFFLINE;
MACRO_SD SD_STATE_PM_SUSPENDED;
MACRO_SD SD_STATE_RWAIT;
MACRO_SD SD_STATE_SUSPENDED;
MACRO_SD_STOP SD_STOP;
MACRO_SD_IO SD_TKOWN;
MACRO_SD_QUEUEING SD_TUR_FAILED;
MACRO_SD_IO SD_WAIT_CMDS_COMPLETE;
MACRO_SD_IO SD_WANT_RESERVE;
MACRO_SE SE;
MACRO_SEC SEC;
MACRO_SECDIV SECDIV;
MACRO_SECSHIFT SECMASK;
MACRO_SECSHIFT SECSHIFT;
MACRO_SECSIZE SECSIZE;
MACRO_DAYSPERLYEAR SECSPERDAY;
MACRO_DAYSPERLYEAR SECSPERHOUR;
MACRO_SECSPERMIN SECSPERMIN;
MACRO_SECS_PER SECS_PER_DAY;
MACRO_SECS_PER SECS_PER_HOUR;
MACRO_SECS SECS_PER_MIN;
MACRO_SECURITY SECURITY_NOT_SUPPORTED;
MACRO_SEC_QUERY SEC_QUERY;
MACRO_SEEK_0 SEEK;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_SEGDRV SEGDRV_CONTINUE;
MACRO_SEGDRV SEGDRV_HANDLED;
MACRO_SEGDRV SEGDRV_IGNORE;
MACRO_SEGSIZE SEGSIZE;
MACRO_SEGV SEGV_ACCERR;
MACRO_SEGV SEGV_MAPERR;
MACRO_SELFMAG SELFMAG;
MACRO_SELF SELF_CHECK;
$635420CA75E4368650FCB176130922B4 SEMA_DEFAULT;
$635420CA75E4368650FCB176130922B4 SEMA_DRIVER;
MACRO_MAGIC SEMA_MAGIC;
MACRO_SEM_A SEM_A;
MACRO_SEM SEM_FAILED;
MACRO_SEM_A SEM_R;
MACRO_SEM_A SEM_UNDO;
MACRO_SENDZERO SENDZERO;
MACRO_SEND SEND_SPEC1;
MACRO_SEND SEND_SPEC2;
$E36DDC315EED95A07EBF18BE166BF116 SEN_TYPE;
MACRO_SESCTL SESCTL_CSEL;
MACRO_SESCTL SESCTL_DEVOFF;
MACRO_SESCTL SESCTL_DISABLE;
MACRO_SESCTL SESCTL_DRVLCK;
MACRO_SESCTL SESCTL_PRDFAIL;
MACRO_SESCTL SESCTL_RQSFLT;
MACRO_SESCTL SESCTL_RQSID;
MACRO_SESCTL SESCTL_RQSINS;
MACRO_SESCTL SESCTL_RQSRMV;
MACRO_SESCTL SESCTL_RQSTFAIL;
MACRO_SESCTL SESCTL_RQSTON;
MACRO_SESCTL SESCTL_RSTSWAP;
MACRO_SESIOC SESIOC;
MACRO_SESIOC_GETNOBJ SESIOC_GETENCSTAT;
MACRO_SESIOC_GETNOBJ SESIOC_GETNOBJ;
MACRO_SESIOC_GETNOBJ SESIOC_GETOBJMAP;
MACRO_SESIOC_GETNOBJ SESIOC_GETOBJSTAT;
MACRO_SESIOC_GETNOBJ SESIOC_INIT;
MACRO_SESIOC_GETNOBJ SESIOC_SETENCSTAT;
MACRO_SESIOC_GETNOBJ SESIOC_SETOBJSTAT;
MACRO_SESSTAT SESSTAT_CRIT;
MACRO_SESSTAT SESSTAT_NONCRIT;
MACRO_SESSTAT SESSTAT_NOTAVAIL;
MACRO_SESSTAT SESSTAT_NOTINSTALLED;
MACRO_SESSTAT SESSTAT_OK;
MACRO_SESSTAT SESSTAT_UNKNOWN;
MACRO_SESSTAT SESSTAT_UNRECOV;
MACRO_SESSTAT SESSTAT_UNSUPPORTED;
MACRO_SESS SESS_CLOSE;
MACRO_SESTYP SESTYP_ALARM;
MACRO_SESTYP SESTYP_AMMETER;
MACRO_SESTYP SESTYP_COMPORT;
MACRO_SESTYP SESTYP_DEVICE;
MACRO_SESTYP SESTYP_DISPLAY;
MACRO_SESTYP SESTYP_DOORLOCK;
MACRO_SESTYP SESTYP_ESCC;
MACRO_SESTYP SESTYP_FAN;
MACRO_SESTYP SESTYP_KEYPAD;
MACRO_SESTYP SESTYP_LANGUAGE;
MACRO_SESTYP SESTYP_NVRAM;
MACRO_SESTYP SESTYP_POWER;
MACRO_SESTYP SESTYP_SCC;
MACRO_SESTYP SESTYP_SCSIXVR;
MACRO_SESTYP SESTYP_SCSI_INI;
MACRO_SESTYP SESTYP_SCSI_TGT;
MACRO_SESTYP SESTYP_SUBENC;
MACRO_SESTYP SESTYP_THERM;
MACRO_SESTYP SESTYP_UNSPECIFIED;
MACRO_SESTYP SESTYP_UPS;
MACRO_SESTYP SESTYP_VOM;
MACRO_SES SES_IOCTL_GETSTATE;
MACRO_SES SES_IOCTL_INQUIRY;
MACRO_SES SES_IOCTL_SETSTATE;
$E36DDC315EED95A07EBF18BE166BF116 SES_TYPE;
MACRO_GETACL SETACL;
MACRO_SETALL SETALL;
MACRO_GETCONTEXT SETCONTEXT;
MACRO_INOFLCK SETFLCK;
MACRO_SETOP SETOP_AND;
MACRO_SETOP SETOP_ASSIGN;
MACRO_SETOP SETOP_NONE;
MACRO_SETOP SETOP_OR;
MACRO_GETZCNT SETVAL;
MACRO_AUTOPUSH SET_AUTOPUSH;
MACRO_SET_BOOT SET_BOOT_PROTOCOL;
MACRO_FEATURE SET_CLEAR_PORT_FEATURE;
MACRO_IDLE_LENGTH SET_IDLE_LENGTH;
MACRO_SET SET_MONITOR_POWER;
MACRO_FEATURE SET_PORT_FEATURE;
MACRO_SET_BOOT SET_REPORT_PROTOCOL;
time_how SET_TO_CLIENT_TIME;
time_how SET_TO_SERVER_TIME;
MACRO_SSYS SEXECED;
MACRO_SE_32RVAL1 SE_32RVAL1;
MACRO_SE_32RVAL1 SE_32RVAL2;
MACRO_SE_32RVAL1 SE_64RVAL;
MACRO_SE_32RVAL1 SE_ARGC;
MACRO_SE_32RVAL1 SE_LOADABLE;
MACRO_SE_32RVAL1 SE_LOADED;
MACRO_SE_NOSWAP SE_NOANON;
MACRO_SE_NOSWAP SE_NOSWAP;
MACRO_SE_32RVAL1 SE_NOUNLOAD;
MACRO_SE_32RVAL1 SE_RVAL_MASK;
MACRO_SR0 SE_SR0;
MACRO_SFIOCGMAP SFIOCGMAP;
MACRO_SF SF_FDXPTP;
MACRO_SF SF_FLUSH_WQ;
MACRO_SF SF_INITIALIZED;
MACRO_SF_IOC SF_IOC;
MACRO_SF SF_LINKERR;
MACRO_SF_NUM SF_NUM_ENTRIES_IN_MAP;
MACRO_SF SF_PHONY;
MACRO_SF SF_XMT_INPROG;
MACRO_SF SF_ZSH_START;
MACRO_SGEN SGEN_IOC;
MACRO_SGEN SGEN_IOC_DIAG;
MACRO_SGEN SGEN_IOC_READY;
MACRO_SHARED SHARED;
MACRO_SHF SHF_ALLOC;
MACRO_SHF_ORDERED SHF_EXCLUDE;
MACRO_SHF SHF_EXECINSTR;
MACRO_SHF_IA SHF_IA_64_NORECOV;
MACRO_SHF_IA SHF_IA_64_SHORT;
MACRO_SHF SHF_MASKPROC;
MACRO_SHF_ORDERED SHF_ORDERED;
MACRO_SHF SHF_WRITE;
MACRO_SHIFTKEYS SHIFTKEYS;
MACRO_SHIFTLOCK SHIFTLOCK;
MACRO_SHIFTMASK SHIFTMASK;
MACRO_SHIFT SHIFT_ALT;
MACRO_SHIFT SHIFT_ALTG;
MACRO_SHIFT SHIFT_CAPSLOCK;
MACRO_SHIFT SHIFT_CMD;
MACRO_SHIFT SHIFT_CTRL;
MACRO_SHIFT SHIFT_LEFT;
MACRO_SHIFT SHIFT_LEFTCTRL;
MACRO_SHIFT SHIFT_LOCK;
MACRO_SHIFT SHIFT_META;
MACRO_SHIFT SHIFT_NUMLOCK;
MACRO_SHIFT SHIFT_RIGHT;
MACRO_SHIFT SHIFT_RIGHTCTRL;
MACRO_SHIFT SHIFT_TOP;
MACRO_SHMSA SHMSA_ISM;
MACRO_SHM_LOCK SHM_LOCK;
MACRO_SHM SHM_R;
MACRO_SHM SHM_RDONLY;
MACRO_SHM SHM_RND;
MACRO_SHM SHM_SHARE_MMU;
MACRO_SHM_LOCK SHM_UNLOCK;
MACRO_SHM SHM_W;
MACRO_SHN SHN_ABS;
MACRO_SHN_BEFORE SHN_AFTER;
MACRO_SHN_BEFORE SHN_BEFORE;
MACRO_SHN SHN_COMMON;
MACRO_SHN SHN_HIPROC;
MACRO_SHN SHN_HIRESERVE;
MACRO_SHN SHN_LOPROC;
MACRO_SHN SHN_LORESERVE;
MACRO_SHN SHN_UNDEF;
MACRO_SHOW SHOW_CROSSHAIRS;
MACRO_SHOW SHOW_HORIZ_HAIR;
MACRO_SHOW SHOW_VERT_HAIR;
MACRO_SHQUID SHQUID;
MACRO_SHRT SHRT_MAX;
MACRO_SHRT SHRT_MIN;
MACRO_SHT SHT_DYNAMIC;
MACRO_SHT SHT_DYNSYM;
MACRO_SHT SHT_HASH;
MACRO_SHT SHT_HIPROC;
MACRO_SHT SHT_HISUNW;
MACRO_SHT SHT_HIUSER;
MACRO_SHT_IA SHT_IA_64_EXT;
MACRO_SHT_IA SHT_IA_64_UNWIND;
MACRO_SHT SHT_LOPROC;
MACRO_SHT SHT_LOSUNW;
MACRO_SHT SHT_LOUSER;
MACRO_SHT SHT_NOBITS;
MACRO_SHT SHT_NOTE;
MACRO_SHT SHT_NULL;
MACRO_SHT SHT_NUM;
MACRO_SHT SHT_PROGBITS;
MACRO_SHT SHT_REL;
MACRO_SHT SHT_RELA;
MACRO_SHT SHT_SHLIB;
MACRO_SHT SHT_STRTAB;
MACRO_SHT SHT_SUNW_COMDAT;
MACRO_SHT SHT_SUNW_move;
MACRO_SHT SHT_SUNW_syminfo;
MACRO_SHT SHT_SUNW_verdef;
MACRO_SHT SHT_SUNW_verneed;
MACRO_SHT SHT_SUNW_versym;
MACRO_SHT SHT_SYMTAB;
MACRO_SHUT SHUT_RD;
MACRO_SHUT SHUT_RDWR;
MACRO_SHUT SHUT_WR;
MACRO_SH SH_CPR;
MACRO_SH SH_EUID;
MACRO_SH SH_NOW;
MACRO_SH SH_RESUME;
MACRO_SH SH_RUID;
MACRO_SH SH_SUSPEND;
MACRO_TUP SID;
MACRO_SIDL SIDL;
MACRO_SIG2STR SIG2STR_MAX;
MACRO_SIGNAL SIGABRT;
MACRO_SIGNAL SIGALRM;
MACRO_SIGNAL SIGBUS;
MACRO_SIGNAL SIGCANCEL;
MACRO_SIGNAL SIGCHLD;
MACRO_SIGNAL SIGCLD;
MACRO_SIGNAL SIGCONT;
MACRO_SIGDEFER SIGDEFER;
MACRO_SIGNAL SIGEMT;
MACRO_SIGEV SIGEV_NONE;
MACRO_SIGEV SIGEV_SIGNAL;
MACRO_SIGEV SIGEV_THREAD;
MACRO_SIGNAL SIGFPE;
MACRO_SIGNAL SIGFREEZE;
MACRO_SIGDEFER SIGHOLD;
MACRO_SIGNAL SIGHUP;
MACRO_SIGDEFER SIGIGNORE;
MACRO_SIGNAL SIGILL;
MACRO_SIGNAL SIGINT;
MACRO_SIGNAL SIGIO;
MACRO_SIGNAL SIGIOT;
MACRO_SIGNAL SIGKILL;
MACRO_SIGNAL SIGLOST;
MACRO_SIGNAL SIGLWP;
MACRO_SIGNO SIGNO_MASK;
MACRO_SIGDEFER SIGPAUSE;
MACRO_SIGNAL SIGPIPE;
MACRO_SIGNAL SIGPOLL;
MACRO_SIGNAL SIGPROF;
MACRO_SIGNAL SIGPWR;
MACRO_SIGNAL SIGQUIT;
MACRO_SIGDEFER SIGRELSE;
MACRO_SIGNAL SIGSEGV;
MACRO_MINSIGSTKSZ SIGSTKSZ;
MACRO_SIGNAL SIGSTOP;
MACRO_SIGNAL SIGSYS;
MACRO_SIGNAL SIGTERM;
MACRO_SIGNAL SIGTHAW;
MACRO_SIGNAL SIGTRAP;
MACRO_SIGNAL SIGTSTP;
MACRO_SIGNAL SIGTTIN;
MACRO_SIGNAL SIGTTOU;
MACRO_SIGNAL SIGURG;
MACRO_SIGNAL SIGUSR1;
MACRO_SIGNAL SIGUSR2;
MACRO_SIGNAL SIGVTALRM;
MACRO_SIGNAL SIGWAITING;
MACRO_SIGNAL SIGWINCH;
MACRO_SIGNAL SIGXCPU;
MACRO_SIGNAL SIGXFSZ;
MACRO_SIG SIG_BLOCK;
MACRO_SIG SIG_SETMASK;
MACRO_SIG SIG_UNBLOCK;
MACRO_SIMOD SIMOD;
MACRO_SINCR SINCR;
MACRO_DOMAIN SING;
MACRO_SINGLE SINGLE_2CLUTS;
MACRO_SINGLE SINGLE_3CLUTS;
MACRO_BIAS SINGLE_BIAS;
MACRO_SIOCADDRT SIOCADDRT;
MACRO_SIOCDELRT SIOCDELRT;
MACRO_SIOCGIFCONF SIOCGIFCONF;
MACRO_SIOCGLIFCONF SIOCGLIFCONF;
MACRO_SIOCXPROTO SIOCXPROTO;
MACRO_SIO SIO_LITE;
MACRO_SIO SIO_LITE_B;
MACRO_SIO SIO_REVA;
MACRO_SIO SIO_REVB;
MACRO_ULONG SIZE_MAX;
MACRO_SI_SYSNAME SI_ARCHITECTURE;
MACRO_SI SI_ASYNCIO;
MACRO_SI_CACHED SI_CACHED;
MACRO_SI_SYSNAME SI_DHCP_CACHE;
MACRO_SI_SHUTDOWN SI_GETINTRANSIT;
MACRO_SI_SHUTDOWN SI_GETUDATA;
MACRO_SI_SYSNAME SI_HOSTNAME;
MACRO_SI_SYSNAME SI_HW_PROVIDER;
MACRO_SI_SYSNAME SI_HW_SERIAL;
MACRO_SI_SYSNAME SI_ISALIST;
MACRO_SI_SHUTDOWN SI_LISTEN;
MACRO_SI SI_LWP;
MACRO_SI_SYSNAME SI_MACHINE;
MACRO_SI_MAXSZ SI_MAXSZ;
MACRO_SI SI_MESGQ;
MACRO_SI SI_NOINFO;
MACRO_SI_SYSNAME SI_PLATFORM;
MACRO_SI SI_QUEUE;
MACRO_SI_SYSNAME SI_RELEASE;
MACRO_SI_SHUTDOWN SI_SETMYNAME;
MACRO_SI_SHUTDOWN SI_SETPEERNAME;
MACRO_SI_SYSNAME SI_SET_HOSTNAME;
MACRO_SI_SYSNAME SI_SET_SRPC_DOMAIN;
MACRO_SI_SHUTDOWN SI_SHUTDOWN;
MACRO_SI_SHUTDOWN SI_SOCKPARAMS;
MACRO_SI_SYSNAME SI_SRPC_DOMAIN;
MACRO_SI_SYSNAME SI_SYSNAME;
MACRO_SI_SHUTDOWN SI_TCL_LINK;
MACRO_SI_SHUTDOWN SI_TCL_UNLINK;
MACRO_SI SI_TIMER;
MACRO_SI SI_USER;
MACRO_SI_SYSNAME SI_VERSION;
MACRO_SSYS SJCTL;
MACRO_SK SK;
MACRO_SSYS SKILLCL;
MACRO_SSYS SKILLED;
MACRO_SLA SLA_FREETNM;
MACRO_SLC SLC_ABORT;
MACRO_SLC_NOSUPPORT SLC_ACK;
MACRO_SLC SLC_AO;
MACRO_SLC SLC_AYT;
MACRO_SLC SLC_BRK;
MACRO_SLC_NOSUPPORT SLC_CANTCHANGE;
MACRO_SLC_NOSUPPORT SLC_DEFAULT;
MACRO_SLC SLC_EC;
MACRO_SLC SLC_EL;
MACRO_SLC SLC_EOF;
MACRO_SLC SLC_EOR;
MACRO_SLC SLC_EW;
MACRO_SLC_NOSUPPORT SLC_FLAGS;
MACRO_SLC_NOSUPPORT SLC_FLUSHIN;
MACRO_SLC_NOSUPPORT SLC_FLUSHOUT;
MACRO_SLC SLC_FORW1;
MACRO_SLC SLC_FORW2;
MACRO_SLC_NOSUPPORT SLC_FUNC;
MACRO_SLC SLC_IP;
MACRO_SLC_NOSUPPORT SLC_LEVELBITS;
MACRO_SLC SLC_LNEXT;
MACRO_SLC_NOSUPPORT SLC_NOSUPPORT;
MACRO_SLC SLC_RP;
MACRO_SLC SLC_SUSP;
MACRO_SLC SLC_SYNCH;
MACRO_SLC_NOSUPPORT SLC_VALUE;
MACRO_SLC_NOSUPPORT SLC_VARIABLE;
MACRO_SLC SLC_XOFF;
MACRO_SLC SLC_XON;
MACRO_ACTIVE SLEEPING_LOCK;
MACRO_SLF SLF_TOSS;
MACRO_SSYS SLOAD;
MACRO_SSYS SLOCK;
MACRO_SUPD SLOCKED;
MACRO_SUPD SLOFFSET;
MACRO_INOFLCK SLPFLCK;
$43B36F08FB889DFA872E3981C7EFED93 SLP_AUTHENTICATION_ABSENT;
$43B36F08FB889DFA872E3981C7EFED93 SLP_AUTHENTICATION_FAILED;
$43B36F08FB889DFA872E3981C7EFED93 SLP_BUFFER_OVERFLOW;
$E5CD0A0A25838301AC0CDA8DDEB498DA SLP_FALSE;
$43B36F08FB889DFA872E3981C7EFED93 SLP_HANDLE_IN_USE;
$43B36F08FB889DFA872E3981C7EFED93 SLP_INTERNAL_SYSTEM_ERROR;
$43B36F08FB889DFA872E3981C7EFED93 SLP_INVALID_REGISTRATION;
$43B36F08FB889DFA872E3981C7EFED93 SLP_INVALID_UPDATE;
$43B36F08FB889DFA872E3981C7EFED93 SLP_LANGUAGE_NOT_SUPPORTED;
$43B36F08FB889DFA872E3981C7EFED93 SLP_LAST_CALL;
$041E3D91F6E47CF820A5EC5BE234707E SLP_LIFETIME_DEFAULT;
$041E3D91F6E47CF820A5EC5BE234707E SLP_LIFETIME_MAXIMUM;
$43B36F08FB889DFA872E3981C7EFED93 SLP_MEMORY_ALLOC_FAILED;
$43B36F08FB889DFA872E3981C7EFED93 SLP_NETWORK_ERROR;
$43B36F08FB889DFA872E3981C7EFED93 SLP_NETWORK_INIT_FAILED;
$43B36F08FB889DFA872E3981C7EFED93 SLP_NETWORK_TIMED_OUT;
$43B36F08FB889DFA872E3981C7EFED93 SLP_NOT_IMPLEMENTED;
$43B36F08FB889DFA872E3981C7EFED93 SLP_OK;
$43B36F08FB889DFA872E3981C7EFED93 SLP_PARAMETER_BAD;
$43B36F08FB889DFA872E3981C7EFED93 SLP_PARSE_ERROR;
$43B36F08FB889DFA872E3981C7EFED93 SLP_SCOPE_NOT_SUPPORTED;
$43B36F08FB889DFA872E3981C7EFED93 SLP_SECURITY_UNAVAILABLE;
$E5CD0A0A25838301AC0CDA8DDEB498DA SLP_TRUE;
$43B36F08FB889DFA872E3981C7EFED93 SLP_TYPE_ERROR;
MACRO_SLS SLS_LINKERR;
MACRO_SLS SLS_MDMSTAT;
MACRO_SL SL_CONSOLE;
MACRO_SL SL_CONSONLY;
MACRO_SL_DOT SL_DOT;
MACRO_SL_DOT SL_DOTDOT;
MACRO_SL SL_ERROR;
slot::$D48DA2B417DCEB42491146B2A8A36AD2 SL_EXTEND;
MACRO_SL SL_FATAL;
slot::$D48DA2B417DCEB42491146B2A8A36AD2 SL_FOUND;
MACRO_SL SL_LOGONLY;
slot::$D48DA2B417DCEB42491146B2A8A36AD2 SL_NONE;
MACRO_SL SL_NOTE;
MACRO_SL SL_NOTIFY;
MACRO_SL SL_TRACE;
MACRO_SL SL_USER;
MACRO_SL SL_WARN;
MACRO_SMAP SMAP_HASHAVELEN;
MACRO_SMAP SMAP_HASHVPSHIFT;
MACRO_SMDEVICE SMDEVICE_INFO_V_0;
MACRO_SMERR SMERR_BAUDRATE;
MACRO_SMERR SMERR_HDX;
MACRO_SMERR SMERR_IFLAGS;
MACRO_SMERR SMERR_LPBKS;
MACRO_SMERR SMERR_MPT;
MACRO_SMERR SMERR_PLL;
MACRO_SMERR SMERR_RXC;
MACRO_SMERR SMERR_TXC;
MACRO_SMMEDIA SMMEDIA_PROP_V_0;
MACRO_SSYS SMSACCT;
MACRO_SSYS SMSFORK;
MACRO_SMWP SMWP_STATE_V_0;
MACRO_SM_PRIV SM_ACCEPTOR_ID;
MACRO_SM_PRIV SM_ADDR;
MACRO_SM_WRITE_0 SM_ASYNC;
MACRO_SM_PRIV SM_ATOMIC;
MACRO_SM_PRIV SM_BYTESTREAM;
MACRO_SM_PRIV SM_CONNREQUIRED;
MACRO_SM_WRITE_0 SM_DONTNEED;
MACRO_SM_PRIV SM_EXDATA;
MACRO_SM_PRIV SM_FDPASSING;
MACRO_SM_REMOVABLE SM_FLOPPY;
MACRO_SM_FORMAT SM_FORMAT_BLOCKED;
MACRO_SM_FORMAT SM_FORMAT_DD;
MACRO_SM_FORMAT SM_FORMAT_ED;
MACRO_SM_FORMAT SM_FORMAT_FORCE;
MACRO_SM_FORMAT SM_FORMAT_HD;
MACRO_SM_FORMAT SM_FORMAT_IMMEDIATE;
MACRO_SM_FORMAT SM_FORMAT_LONG;
MACRO_SM_FORMAT SM_FORMAT_MD;
MACRO_SM_FORMAT SM_FORMAT_QUICK;
MACRO_SM_WRITE_0 SM_FREE;
MACRO_SM_WRITE_0 SM_INVAL;
MACRO_SM SM_MAXSTRLEN;
MACRO_SM SM_MON;
MACRO_SM SM_NOTIFY;
MACRO_SM_REMOVABLE SM_NOT_PRESENT;
MACRO_SM_PRIV SM_OPTDATA;
MACRO_SM_REMOVABLE SM_PCMCIA_MEM;
MACRO_SM_PRIV SM_PRIV;
MACRO_SM SM_PROG;
MACRO_SM_WRITE SM_READ_WRITE_PROTECT;
MACRO_SM_WRITE SM_READ_WRITE_PROTECTED;
MACRO_SM_REMOVABLE SM_REMOVABLE_DISK;
MACRO_SM SM_SIMU_CRASH;
MACRO_SM SM_STAT;
MACRO_SM_WRITE SM_STATUS_UNKNOWN;
MACRO_SM_WRITE SM_TEMP_UNLOCK_MODE;
MACRO_SM SM_UNMON;
MACRO_SM SM_UNMON_ALL;
MACRO_SM_WRITE SM_UNPROTECTED;
MACRO_SM SM_VERS;
MACRO_SM_WRITE_0 SM_WRITE;
MACRO_SM_WRITE SM_WRITE_PROTECTED;
MACRO_SM_WRITE SM_WRITE_PROTECTED_WP;
MACRO_SM_WRITE SM_WRITE_PROTECT_DISABLE;
MACRO_SM_WRITE SM_WRITE_PROTECT_NOPASSWD;
MACRO_SM_WRITE SM_WRITE_PROTECT_PASSWD;
MACRO_SNDZERO SNDPIPE;
MACRO_SNDZERO SNDZERO;
MACRO_SSYS SNOWAIT;
MACRO_SPECIFY SNSDSTAT;
MACRO_RECALIBRATE SNSISTAT;
MACRO_SN SN_CANCEL;
MACRO_SN SN_PROC;
MACRO_SN SN_SEND;
MACRO_SO4 SO4_BITSMAJOR;
MACRO_SO4 SO4_BITSMINOR;
MACRO_SO4 SO4_MAXMAJ;
MACRO_SO4 SO4_MAXMIN;
MACRO_SOMOD SOACC;
MACRO_SOA SOA_DEFSIZE;
syncobj SOBJ_CV;
syncobj SOBJ_MUTEX;
syncobj SOBJ_NONE;
syncobj SOBJ_RWLOCK;
syncobj SOBJ_SEMA;
syncobj SOBJ_SHUTTLE;
syncobj SOBJ_USER;
syncobj SOBJ_USER_PI;
MACRO_SOCAL SOCAL_PROM_4TH_OBP_DRV;
MACRO_SOCAL SOCAL_PROM_4TH_SELF_TST;
MACRO_SOCAL SOCAL_PROM_FW_DATE_CODE;
MACRO_SOCAL SOCAL_PROM_LA_BIT_MASK;
MACRO_SOCAL SOCAL_PROM_OBP_HDR;
MACRO_SOCAL SOCAL_PROM_RSRV1;
MACRO_SOCAL SOCAL_PROM_RSRV2;
MACRO_SOCAL SOCAL_PROM_SOCAL_CODE;
MACRO_SOCAL SOCAL_PROM_SRVC_PARM;
MACRO_SOCAL SOCAL_XRAM_BUF_POOL;
MACRO_SOCAL SOCAL_XRAM_EXCH_POOL;
MACRO_SOCAL SOCAL_XRAM_FW_DATE_CODE;
MACRO_SOCAL SOCAL_XRAM_FW_DATE_STR;
MACRO_SOCAL SOCAL_XRAM_HW_REV;
MACRO_SOCAL SOCAL_XRAM_LESB_P0;
MACRO_SOCAL SOCAL_XRAM_LESB_P1;
MACRO_SOCAL SOCAL_XRAM_NODE_WWN;
MACRO_SOCAL SOCAL_XRAM_PORTA_HRDA;
MACRO_SOCAL SOCAL_XRAM_PORTA_WWN;
MACRO_SOCAL SOCAL_XRAM_PORTB_WWN;
MACRO_SOCAL SOCAL_XRAM_REQ_DESC;
MACRO_SOCAL SOCAL_XRAM_RSP_DESC;
MACRO_SOCAL SOCAL_XRAM_SERV_PARAMS;
MACRO_SOCAL SOCAL_XRAM_UCODE;
MACRO_SOCK SOCK_DGRAM;
MACRO_SOCK SOCK_RAW;
MACRO_SOCK SOCK_RDM;
MACRO_SOCK SOCK_SEQPACKET;
MACRO_SOCK SOCK_STREAM;
MACRO_SOMOD SOCLONE;
MACRO_SOC SOC_EEPROM_4TH_OBP_DRV;
MACRO_SOC SOC_EEPROM_4TH_SELF_TST;
MACRO_SOC SOC_EEPROM_FW_DATE_CODE;
MACRO_SOC SOC_EEPROM_LA_BIT_MASK;
MACRO_SOC SOC_EEPROM_OBP_HDR;
MACRO_SOC SOC_EEPROM_RSRV1;
MACRO_SOC SOC_EEPROM_RSRV2;
MACRO_SOC SOC_EEPROM_SOC_CODE;
MACRO_SOC SOC_EEPROM_SRVC_PARM;
MACRO_SOC SOC_XRAM_FW_DATE_CODE;
MACRO_SOC SOC_XRAM_FW_DATE_STR;
MACRO_SOC SOC_XRAM_HW_REV;
MACRO_SOC SOC_XRAM_LESB_P0;
MACRO_SOC SOC_XRAM_LESB_P1;
MACRO_SOC SOC_XRAM_REQ_DESC;
MACRO_SOC SOC_XRAM_RSP_DESC;
MACRO_SOC SOC_XRAM_SERVICE_PARAMS;
MACRO_SOFT_CARR SOFT_CARR;
MACRO_SOFT SOFT_LOOKUP;
MACRO_SOMOD SOLOCKED;
MACRO_SOL SOL_SOCKET;
MACRO_SOMAXCONN SOMAXCONN;
MACRO_SOMOD SOMOD;
MACRO_SONPROC SONPROC;
MACRO_SOMOD SOREADLOCKED;
MACRO_SOU SOU_MAGIC_EXPLICIT;
MACRO_SOU SOU_MAGIC_IMPLICIT;
MACRO_SOV SOV_DEFAULT;
MACRO_SOV SOV_SOCKBSD;
MACRO_SOV SOV_SOCKSTREAM;
MACRO_SOV SOV_STREAM;
MACRO_SOV SOV_XPG4_2;
MACRO_SOMOD SOWANT;
MACRO_SSYS SOWEUPC;
MACRO_SO_DEBUG SO_ACCEPTCONN;
MACRO_SO SO_ALL;
MACRO_SO SO_BAND;
MACRO_SO_DEBUG SO_BROADCAST;
MACRO_SO SO_COPYOPT;
MACRO_SO_DEBUG SO_DEBUG;
MACRO_SO SO_DELIM;
MACRO_SO_DEBUG SO_DGRAM_ERRIND;
MACRO_SO_DEBUG SO_DONTLINGER;
MACRO_SO_DEBUG SO_DONTROUTE;
MACRO_SO SO_ERROPT;
MACRO_SO_DEBUG SO_ERROR;
MACRO_SO SO_HIWAT;
MACRO_SO SO_ISNTTY;
MACRO_SO SO_ISTTY;
MACRO_SO_DEBUG SO_KEEPALIVE;
MACRO_SO_DEBUG SO_LINGER;
MACRO_SO SO_LOWAT;
MACRO_SO SO_MAXBLK;
MACRO_SO SO_MAXPSZ;
MACRO_SO SO_MINPSZ;
MACRO_SO SO_MREADOFF;
MACRO_SO SO_MREADON;
MACRO_SO SO_NDELOFF;
MACRO_SO SO_NDELON;
MACRO_SO SO_NODELIM;
MACRO_SO_DEBUG SO_OOBINLINE;
MACRO_SO_DEBUG SO_PROTOTYPE;
MACRO_SO_DEBUG SO_RCVBUF;
MACRO_SO_DEBUG SO_RCVLOWAT;
MACRO_SO_DEBUG SO_RCVTIMEO;
MACRO_SO SO_READOPT;
MACRO_SO_DEBUG SO_REUSEADDR;
MACRO_SO_DEBUG SO_SNDBUF;
MACRO_SO_DEBUG SO_SNDLOWAT;
MACRO_SO_DEBUG SO_SNDTIMEO;
MACRO_SO_STATE SO_STATE;
MACRO_SO SO_STRHOLD;
MACRO_SO SO_TONSTOP;
MACRO_SO SO_TOSTOP;
MACRO_SO_DEBUG SO_TYPE;
MACRO_SO_DEBUG SO_USELOOPBACK;
MACRO_SO SO_WROFF;
MACRO_PS_0 SP;
MACRO_SPARC SPARC_MAXREGWINDOW;
MACRO_SSYS SPASYNC;
MACRO_SPB SPB;
MACRO_SPECIALS SPECIALS_MASK;
MACRO_SPECIAL SPECIAL_D;
MACRO_SPECIAL SPECIAL_I;
MACRO_SPECIFY SPECIFY;
MACRO_SPL3 SPL3;
MACRO_SPL5 SPL5;
MACRO_SPL7 SPL7;
MACRO_SPL8 SPL8;
MACRO_SPLTTY SPLTTY;
MACRO_SPRAYMAX SPRAYMAX;
MACRO_SPRAYPROC SPRAYPROC_CLEAR;
MACRO_SPRAYPROC SPRAYPROC_GET;
MACRO_SPRAYPROC SPRAYPROC_SPRAY;
MACRO_SPRAYPROG SPRAYPROG;
MACRO_SPRAYVERS SPRAYVERS;
MACRO_SSYS SPREXEC;
MACRO_SSYS SPRFORK;
MACRO_SUPD SPRIV;
MACRO_SSYS SPRLOCK;
MACRO_SSYS SPROCTR;
MACRO_SP_MBMEM SP_ATIO;
MACRO_SP_MBMEM SP_ATMEM;
MACRO_SP_MBMEM SP_FBIO;
MACRO_SP_MBMEM SP_FBMEM;
MACRO_SP_F SP_F_PORT_LOGIN;
MACRO_SP_MBMEM SP_INVALID;
MACRO_SP_MBMEM SP_MBIO;
MACRO_SP_MBMEM SP_MBMEM;
MACRO_SP SP_OBIO;
MACRO_SP SP_OBMEM;
MACRO_SP SP_SBUS;
MACRO_SP_MBMEM SP_UBIO;
MACRO_SP_MBMEM SP_UBMEM;
MACRO_SP SP_VIRTUAL;
MACRO_SRB SRB_SUPPORTED;
MACRO_SRIOCISREDIR SRIOCISREDIR;
MACRO_SRIOCSREDIR SRIOCSREDIR;
MACRO_SRM SRM_IF_MAJOR;
MACRO_SRM SRM_IF_MINOR;
MACRO_SSLEEP SRUN;
MACRO_SSYS SRUNLCL;
MACRO_SR SR_SMODE;
MACRO_SS2 SS2;
MACRO_SS3 SS3;
MACRO_SS8SPT SS8SPT;
MACRO_SS9SPT SS9SPT;
MACRO_SSA SSA_PRIORITY_RESERVE;
MACRO_SSDERR SSDERR_ALL;
MACRO_SSDERR SSDERR_FATAL;
MACRO_SSDERR SSDERR_INFORMATIONAL;
MACRO_SSDERR SSDERR_RECOVERED;
MACRO_SSDERR SSDERR_RETRYABLE;
MACRO_SSDERR SSDERR_UNKNOWN;
MACRO_SSD_CONF SSD_BECOMING_ACTIVE;
MACRO_SSD_CONF SSD_CONF_BSET_BSY_RETRY_COUNT;
MACRO_SSD_CONF SSD_CONF_BSET_NRR_COUNT;
MACRO_SSD_CONF SSD_CONF_BSET_THROTTLE;
MACRO_SSD_CONF SSD_CONF_SET_BUSY_RETRIES;
MACRO_SSD_CONF SSD_CONF_SET_NOTREADY_RETRIES;
MACRO_SSD_CONF SSD_CONF_SET_THROTTLE;
MACRO_SSD_CONF SSD_CONF_VERSION;
MACRO_SSD_IO SSD_EACCES;
MACRO_SSD_IO SSD_EIOENABLE;
MACRO_SSD_IO SSD_FAILFAST;
MACRO_SSD_IO SSD_FMT_TIME;
MACRO_SSD_IO SSD_IO_TIME;
MACRO_SSD_IO SSD_LOST_RESERVE;
MACRO_SSD_IO SSD_MAXUNIT;
MACRO_SSD_IO SSD_MAX_NODES;
MACRO_SSD_IO SSD_MULTICMD;
MACRO_SSD_IO SSD_NODISC;
MACRO_SSD_IO SSD_NOPARITY;
MACRO_SSD_IO SSD_PRIORITY_RESERVE;
MACRO_SSD_IO SSD_QUEUEING;
MACRO_SSD_IO SSD_REINSTATE_RESV_DELAY;
MACRO_SSD_IO SSD_RELEASE;
MACRO_SSD_IO SSD_RESERVATION_CONFLICT;
MACRO_SSD_IO SSD_RESERVE;
MACRO_SSD_IO SSD_RESET_THROTTLE_TIMEOUT;
MACRO_SSD_IO SSD_RETRY_COUNT;
MACRO_SSD_CONF SSD_SPINDLE_OFF;
MACRO_SSD_CONF SSD_SPINDLE_ON;
MACRO_SSD_IO SSD_START;
MACRO_SSD SSD_STATE_DUMPING;
MACRO_SSD SSD_STATE_EJECTED;
MACRO_SSD SSD_STATE_NORMAL;
MACRO_SSD SSD_STATE_OFFLINE;
MACRO_SSD SSD_STATE_PM_SUSPENDED;
MACRO_SSD SSD_STATE_RWAIT;
MACRO_SSD SSD_STATE_SUSPENDED;
MACRO_SSD_IO SSD_STOP;
MACRO_SSD_IO SSD_TKOWN;
MACRO_SSD_IO SSD_WAIT_CMDS_COMPLETE;
MACRO_SSD_IO SSD_WANT_RESERVE;
MACRO_SSIZE SSIZE;
MACRO_ULONG SSIZE_MAX;
MACRO_SSLEEP SSLEEP;
MACRO_SSL SSL_BFACTOR;
MACRO_SSL SSL_LOG2BF;
MACRO_SSL SSL_NLEVELS;
MACRO_SSPEED SSPEED;
MACRO_SSSDTL SSSDTL;
MACRO_SZOMB SSTOP;
MACRO_SSYS SSYS;
MACRO_SS_ISCONNECTED SS_ACCEPTCONN;
MACRO_SS_ISCONNECTED SS_ASYNC;
MACRO_SS_ISCONNECTED SS_CANCHANGE;
MACRO_SS_ISCONNECTED SS_CANTRCVMORE;
MACRO_SS_ISCONNECTED SS_CANTREBIND;
MACRO_SS_ISCONNECTED SS_CANTSENDMORE;
MACRO_SS SS_DISABLE;
MACRO_SS_ISCONNECTED SS_FADDR_NOXLATE;
MACRO_SS_ISCONNECTED SS_HADOOBDATA;
MACRO_SS_ISCONNECTED SS_HASCONNIND;
MACRO_SS_ISCONNECTED SS_HAVEOOBDATA;
MACRO_SS_ISCONNECTED SS_ISBOUND;
MACRO_SS_ISCONNECTED SS_ISCONNECTED;
MACRO_SS_ISCONNECTED SS_ISCONNECTING;
MACRO_SS_ISCONNECTED SS_ISDISCONNECTING;
MACRO_SS_ISCONNECTED SS_NDELAY;
MACRO_SS_ISCONNECTED SS_NONBLOCK;
MACRO_SS SS_ONSTACK;
MACRO_SS_ISCONNECTED SS_OOBPEND;
MACRO_SS_ISCONNECTED SS_RCVATMARK;
MACRO_SS_ISCONNECTED SS_SAVEDEOR;
MACRO_SS_ISCONNECTED SS_WUNBIND;
MACRO_NDEFECT ST506_NDEFECT;
MACRO_STAB STAB;
$9DF241986813CBC10D66CF006F720785 STAB_FAIL;
$9DF241986813CBC10D66CF006F720785 STAB_NA;
$9DF241986813CBC10D66CF006F720785 STAB_NOMEM;
$9DF241986813CBC10D66CF006F720785 STAB_SUCCESS;
MACRO_STACK_ALIGN STACK_ALIGN;
MACRO_STACK STACK_ALIGN32;
MACRO_STACK_ALIGN STACK_BIAS;
MACRO_STFLUSH STAPPL;
MACRO_START START_STOP_CYCLE_COUNTER_PAGE_SIZE;
MACRO_START START_STOP_CYCLE_PAGE;
MACRO_START START_STOP_CYCLE_VU_PAGE;
MACRO_STATE STATE_ARQ_DONE;
MACRO_STATE STATE_GOT_BUS;
MACRO_STATE STATE_GOT_STATUS;
MACRO_STATE STATE_GOT_TARGET;
MACRO_STATE STATE_SENT_CMD;
MACRO_STATE STATE_XFERRED_DATA;
MACRO_STATIC STATIC_SCHED;
MACRO_STATUS STATUS_ACA_ACTIVE;
MACRO_STATUS STATUS_BUSY;
MACRO_STATUS STATUS_CHECK;
MACRO_STATUS STATUS_GOOD;
MACRO_STATUS STATUS_INTERMEDIATE;
MACRO_STATUS STATUS_INTERMEDIATE_MET;
MACRO_STATUS STATUS_MASK;
MACRO_STATUS STATUS_MET;
MACRO_STATUS STATUS_QFULL;
MACRO_STATUS STATUS_RESERVATION_CONFLICT;
MACRO_STATUS STATUS_SCSI2;
MACRO_STATUS STATUS_SIZE;
MACRO_STATUS STATUS_TERMINATED;
MACRO_STAT_BUS STAT_ABORTED;
MACRO_STAT_BUS STAT_BUS_RESET;
MACRO_STAT STAT_CLEAR;
MACRO_STAT_BUS STAT_DEV_RESET;
MACRO_STAT_BUS STAT_DISCON;
MACRO_STAT STAT_GET;
MACRO_STAT_BUS STAT_PERR;
MACRO_STAT STAT_SET;
MACRO_STAT_BUS STAT_SYNC;
MACRO_STAT_BUS STAT_TERMINATED;
MACRO_STAT_BUS STAT_TIMEOUT;
MACRO_STA STA_CLOCKERR;
MACRO_STA STA_DEL;
MACRO_STA STA_FLL;
MACRO_STA STA_FREQHOLD;
MACRO_STA STA_INS;
MACRO_STA STA_PLL;
MACRO_STA STA_PPSERROR;
MACRO_STA STA_PPSFREQ;
MACRO_STA STA_PPSJITTER;
MACRO_STA STA_PPSSIGNAL;
MACRO_STA STA_PPSTIME;
MACRO_STA STA_PPSWANDER;
MACRO_STA STA_RONLY;
MACRO_STA STA_UNSYNC;
MACRO_STB_0 STB;
MACRO_STB STB_GLOBAL;
MACRO_STB STB_HIPROC;
MACRO_STB STB_LOCAL;
MACRO_STB STB_LOPROC;
MACRO_STB STB_NUM;
MACRO_STB STB_WEAK;
MACRO_STCE STCE_EV;
MACRO_STCE STCE_PD;
MACRO_STCNTRS STCNTRS;
MACRO_STC_WOPEN STC_ACKWAIT;
MACRO_STC_WOPEN STC_ATTACHOK;
MACRO_STC_DEBUG STC_BOOLEAN;
MACRO_STC_WOPEN STC_BREAK;
MACRO_STC_WOPEN STC_BUSY;
MACRO_STC_WOPEN STC_CANWAIT;
MACRO_STC_WOPEN STC_CARR_ON;
MACRO_STC_WOPEN STC_CD180INTROK;
MACRO_STC_SERIAL STC_CDEFGET;
MACRO_STC_SERIAL STC_CDEFSET;
MACRO_STC_DTRCLOSE STC_CFLOWFLUSH;
MACRO_STC_DTRCLOSE STC_CFLOWMSG;
MACRO_STC_SERIAL STC_CFLUSH;
MACRO_STC_SERIAL STC_CNTRL;
MACRO_STC_WOPEN STC_CONTROL;
MACRO_STC_WOPEN STC_COPYIN;
MACRO_STC_WOPEN STC_COPYOUT;
MACRO_STC_WOPEN STC_CVBROADCAST;
MACRO_STC_DEBUG STC_DEBUG;
MACRO_STC_DEBUG STC_DEBUG_DEFLEVEL;
MACRO_STC_WOPEN STC_DELAY;
MACRO_STC_WOPEN STC_DRAIN;
MACRO_STC_DRAIN STC_DRAIN_BSIZE;
MACRO_STC_DTRCLOSE STC_DTRCLOSE;
MACRO_STC_DTRCLOSE STC_DTRFORCE;
MACRO_STC_WOPEN STC_EBREAK;
MACRO_STC_DEBUG STC_EXTRACT_FAILURE;
MACRO_STC_FCS2 STC_FCS2_REV;
MACRO_STC_WOPEN STC_FLUSH;
MACRO_STC STC_GPPC;
MACRO_STC STC_GREGS;
MACRO_STC STC_GSTATS;
MACRO_STC_TXBUFSIZE STC_HIWATER;
MACRO_STC_WOPEN STC_INSOFTINT;
MACRO_STC_DTRCLOSE STC_INSTANTFLOW;
MACRO_INT_NUM STC_INT_NUM;
MACRO_STC_SERIAL STC_IOREG;
MACRO_STC_WOPEN STC_ISOPEN;
MACRO_STC_WOPEN STC_ISROOT;
MACRO_STC_WOPEN STC_IXOFF;
MACRO_STC_DEBUG STC_LINES;
MACRO_STC_TXBUFSIZE STC_LOWWATER;
MACRO_STC_WOPEN STC_LP;
MACRO_STC_MAXPROPLEN STC_MAXPROPLEN;
MACRO_STC_WOPEN STC_MBREAK;
MACRO_STC_WOPEN STC_MHANGUP;
MACRO_STC_WOPEN STC_MUNHANGUP;
MACRO_STC_SERIAL STC_NOTOPEN_ERR;
MACRO_STC_WOPEN STC_OPEN_INH;
MACRO_STC_WOPEN STC_OUT;
MACRO_STC_SERIAL STC_PARALLEL;
MACRO_STC_WOPEN STC_PPCINTROK;
MACRO_STC_SERIAL STC_PPCREG;
MACRO_STC_SERIAL STC_PPCREGR;
MACRO_STC_SERIAL STC_PPCREGW;
MACRO_STC_SERIAL STC_REGIOR;
MACRO_STC_SERIAL STC_REGIOW;
MACRO_STC_WOPEN STC_REGOK;
MACRO_STC_DRAIN STC_RTPR;
MACRO_STC_WOPEN STC_RXWORK;
MACRO_STC_WOPEN STC_SBREAK;
MACRO_STC_SERIAL STC_SERIAL;
MACRO_STC_SERIAL STC_SETCAR;
MACRO_STC STC_SILOSIZE;
MACRO_STC_WOPEN STC_SOFTINTROK;
MACRO_STC_SERIAL STC_SPARAM_GET;
MACRO_STC_SERIAL STC_SPARAM_SET;
MACRO_STC STC_SPPC;
MACRO_STC STC_SREGS;
MACRO_STC_WOPEN STC_STARTED;
MACRO_STC_WOPEN STC_STOPPED;
MACRO_STC_DEBUG STC_TESTING;
MACRO_STC_DEBUG STC_TRACK;
MACRO_STC_TXBUFSIZE STC_TXBUFSIZE;
MACRO_STC_WOPEN STC_TXWORK;
MACRO_STC_WOPEN STC_UNTIMEOUT;
MACRO_STC_DEBUG STC_VALUED;
MACRO_STC_WOPEN STC_WCLOSE;
MACRO_STC_WOPEN STC_WOPEN;
MACRO_STC_WOPEN STC_XCLUDE;
MACRO_STC_WOPEN STC_XWAIT;
MACRO_FILENO STDERR_FILENO;
MACRO_FILENO STDIN_FILENO;
MACRO_STDISABLE STDISABLE;
MACRO_FILENO STDOUT_FILENO;
MACRO_STD STD_BLK;
MACRO_STPRINT STENABLE;
MACRO_STEP_NONE STEP_ACTIVE;
MACRO_STEP_NONE STEP_NONE;
MACRO_STEP_NONE STEP_REQUESTED;
MACRO_STEP_NONE STEP_WASACTIVE;
MACRO_STFLUSH STFLUSH;
MACRO_STCNTRS STGET;
MACRO_STSTART STHALT;
MACRO_STN STN_UNDEF;
MACRO_NOPOST STOPB;
MACRO_STOP STOP_1;
MACRO_STOP STOP_15;
MACRO_STOP STOP_2;
MACRO_STO STO_SPARC_REGISTER_G2;
MACRO_STO STO_SPARC_REGISTER_G3;
MACRO_STPOLL STPOLL;
MACRO_STPRINT STPRINT;
MACRO_ANYMARK STR;
MACRO_STRAT STRAT_TYPE1;
MACRO_STRAT STRAT_TYPE2;
MACRO_STRAT STRAT_TYPE3;
MACRO_STRAT STRAT_TYPE4;
MACRO_STRAT STRAT_TYPE4096;
MACRO_SSYS STRC;
MACRO_STRCANON STRCANON;
MACRO_STRHIGH STRHIGH;
MACRO_STRING STRING;
MACRO_STRLOW STRLOW;
MACRO_STRUIOT STRUIOT_DONTCARE;
MACRO_STRUIOT STRUIOT_IP;
MACRO_STRUIOT STRUIOT_NONE;
MACRO_STRUIOT STRUIOT_STANDARD;
MACRO_STRUIO STRUIO_DONE;
MACRO_STRUIO STRUIO_ICK;
MACRO_STRUIO STRUIO_IP;
MACRO_STRUIO_POSTPONE STRUIO_MAPIN;
MACRO_STRUIO_POSTPONE STRUIO_POSTPONE;
MACRO_STRUIO STRUIO_SPEC;
MACRO_STRUIO STRUIO_ZC;
MACRO_STRU STRU_F;
MACRO_STRU STRU_P;
MACRO_STRU STRU_R;
MACRO_STR_CLONE STR_CLONE;
MACRO_STSET STSET;
MACRO_STSTART STSTART;
MACRO_STCNTRS STTCHAN;
MACRO_STTHROW STTHROW;
MACRO_STTSV STTSV;
MACRO_STT STT_FILE;
MACRO_STT STT_FUNC;
MACRO_STT STT_HIPROC;
MACRO_STT STT_LOPROC;
MACRO_STT STT_NOTYPE;
MACRO_STT STT_NUM;
MACRO_STT STT_OBJECT;
MACRO_STT STT_SECTION;
MACRO_SPARC_REGISTER STT_SPARC_REGISTER;
MACRO_STWLINE STWLINE;
MACRO_STFLUSH STWRAP;
MACRO_ST_TYPE ST_AUTODEN_OVERRIDE;
MACRO_ST_OSYSCALL ST_BREAKPOINT;
MACRO_ST_TYPE ST_BSF;
MACRO_ST_TYPE ST_BSR;
MACRO_ST_TYPE ST_BUFFERED_WRITES;
MACRO_ST_OSYSCALL ST_CLEAN_WINDOWS;
MACRO_ST_TYPE ST_CLN_TYPE_1;
MACRO_ST_TYPE ST_CLN_TYPE_2;
MACRO_ST_TYPE ST_CLN_TYPE_3;
MACRO_ST_DEV ST_COMPRESSION_DENSITY;
MACRO_ST_MAX ST_DEFERRED_ERROR;
MACRO_ST_HIB ST_DELAY_TID;
MACRO_ST_DEV ST_DEV_CONFIG_ALLOC_LEN;
MACRO_ST_DEV ST_DEV_CONFIG_COMP_BYTE;
MACRO_ST_DEV ST_DEV_CONFIG_DEF_COMP;
MACRO_ST_DEV ST_DEV_CONFIG_NO_COMP;
MACRO_ST_DEV ST_DEV_CONFIG_PAGE;
MACRO_ST_DEV ST_DEV_CONFIG_PL_BYTE;
MACRO_ST_DEV ST_DEV_DATACOMP_ALLOC_LEN;
MACRO_ST_DEV ST_DEV_DATACOMP_COMP_BYTE;
MACRO_ST_DEV ST_DEV_DATACOMP_DCE_MASK;
MACRO_ST_DEV ST_DEV_DATACOMP_PAGE;
MACRO_ST_OSYSCALL ST_DIV0;
MACRO_ST_INDEL ST_DOINGDEL;
MACRO_ST_TYPE ST_DYNAMIC;
MACRO_ST_TYPE ST_EJECT_ON_CHANGER_FAILURE;
MACRO_ST_STATE ST_EOF;
MACRO_ST_STATE ST_EOF_PENDING;
MACRO_ST_STATE ST_EOM;
MACRO_ST_STATE ST_EOT;
MACRO_ST_STATE ST_EOT_PENDING;
MACRO_ST_OSYSCALL ST_FIX_ALIGN;
MACRO_ST_OSYSCALL ST_FLUSH_WINDOWS;
MACRO_ST_OSYSCALL ST_GETCC;
MACRO_ST_OSYSCALL ST_GETHRESTIME;
MACRO_ST_OSYSCALL ST_GETHRTIME;
MACRO_ST_OSYSCALL ST_GETHRVTIME;
MACRO_ST_OSYSCALL ST_GETPSR;
MACRO_ST_HIB ST_HIB_TID;
MACRO_ST_OSYSCALL ST_HOTPATCH_TRAP;
MACRO_ST_INDEL ST_INDEL;
MACRO_ST_INIT ST_INIT_RESERVE;
MACRO_ST_MAX ST_INTERRUPT_CONTEXT;
MACRO_ST_OSYSCALL ST_INT_OVERFLOW;
MACRO_ST_MAX ST_IO_TIME;
MACRO_ST_OSYSCALL ST_KADB_BREAKPOINT;
MACRO_ST_OSYSCALL ST_KADB_TRAP;
MACRO_ST_TYPE ST_KNOWS_EOD;
MACRO_ST_TYPE ST_LONG_ERASE;
MACRO_ST_MAX ST_LONG_SPACE_TIME_X;
MACRO_ST_TYPE ST_LONG_TIMEOUTS;
MACRO_ST_MAX ST_LONG_TIMEOUT_X;
MACRO_ST_INIT ST_LOST_RESERVE;
MACRO_ST_MAXRECSIZE ST_MAXRECSIZE_FIXED;
MACRO_ST_MAXRECSIZE ST_MAXRECSIZE_VARIABLE;
MACRO_ST_MAXRECSIZE ST_MAXRECSIZE_VARIABLE_LIMIT;
MACRO_ST_MAX ST_MAXUNIT;
MACRO_ST_MAX ST_MAX_THROTTLE;
MACRO_ST_TYPE ST_MODE_SEL_COMP;
MACRO_ST_OSYSCALL ST_MON_BREAKPOINT;
MACRO_ST_INIT ST_NAMESIZE;
MACRO_ST_TYPE ST_NOBUF;
MACRO_ST ST_NOSUID;
MACRO_ST ST_NOTRUNC;
MACRO_ST_STATE ST_NO_EOF;
MACRO_ST_TYPE ST_NO_RECSIZE_LIMIT;
MACRO_ST_TYPE ST_NO_RESERVE_RELEASE;
MACRO_ST_STATE ST_OP_CTL;
MACRO_ST_STATE ST_OP_NIL;
MACRO_ST_STATE ST_OP_READ;
MACRO_ST_STATE ST_OP_WEOF;
MACRO_ST_STATE ST_OP_WRITE;
MACRO_ST_OSYSCALL ST_OSYSCALL;
MACRO_ST_INIT ST_PRESERVE_RESERVE;
MACRO_ST_STATE ST_PWR_NORMAL;
MACRO_ST_STATE ST_PWR_PM_SUSPENDED;
MACRO_ST_STATE ST_PWR_SUSPENDED;
MACRO_ST_TYPE ST_QIC;
MACRO_ST_OSYSCALL ST_RANGE_CHECK;
MACRO_ST ST_RDONLY;
MACRO_ST_TYPE ST_READ_IGNORE_EOFS;
MACRO_ST_TYPE ST_READ_IGNORE_ILI;
MACRO_ST_TYPE ST_REEL;
MACRO_ST_INIT ST_RELEASE;
MACRO_ST_INIT ST_RESERVATION_CONFLICT;
MACRO_ST_INIT ST_RESERVATION_DELAY;
MACRO_ST_INIT ST_RESERVE;
MACRO_ST_TYPE ST_RESERVED_BIT1;
MACRO_ST_MAX ST_RETRY_COUNT;
MACRO_ST_TYPE ST_RETRY_ON_RECOVERED_DEFERRED_ERROR;
MACRO_ST_STATE ST_RQS_ERROR;
MACRO_ST_STATE ST_RQS_OVR;
MACRO_ST_STATE ST_RQS_READ;
MACRO_ST_STATE ST_RQS_VALID;
MACRO_ST_OSYSCALL ST_SELFXCALL;
MACRO_ST_MAX ST_SEL_RETRY_COUNT;
MACRO_ST_OSYSCALL ST_SETCC;
MACRO_ST_OSYSCALL ST_SETPSR;
MACRO_ST_OSYSCALL ST_SETV9STACK;
MACRO_ST_TYPE ST_SHORT_FILEMARKS;
MACRO_ST_TYPE ST_SOFT_ERROR_REPORTING;
MACRO_ST_MAX ST_SPACE_TIME;
MACRO_ST_MAX ST_START_CONTEXT;
MACRO_ST_STATE ST_STATE_APPEND_TESTING;
MACRO_ST_STATE ST_STATE_CLOSED;
MACRO_ST_STATE ST_STATE_CLOSING;
MACRO_ST_STATE ST_STATE_INITIALIZING;
MACRO_ST_STATE ST_STATE_OFFLINE;
MACRO_ST_STATE ST_STATE_OPEN;
MACRO_ST_STATE ST_STATE_OPENING;
MACRO_ST_STATE ST_STATE_OPEN_PENDING_IO;
MACRO_ST_STATE ST_STATE_RESOURCE_WAIT;
MACRO_ST_STATE ST_STATE_SENSING;
MACRO_ST_OSYSCALL ST_SYSCALL;
MACRO_ST_OSYSCALL ST_TRACE_0;
MACRO_ST_OSYSCALL ST_TRACE_1;
MACRO_ST_OSYSCALL ST_TRACE_2;
MACRO_ST_OSYSCALL ST_TRACE_3;
MACRO_ST_OSYSCALL ST_TRACE_4;
MACRO_ST_OSYSCALL ST_TRACE_5;
MACRO_ST_OSYSCALL ST_TRACE_RESERVED;
MACRO_ST_OSYSCALL ST_TRACE_WRITE_BUFFER;
MACRO_ST_TYPE ST_TYPE_ANRITSU;
MACRO_ST_TYPE ST_TYPE_ARCHIVE;
MACRO_ST_TYPE ST_TYPE_CDC;
MACRO_ST_TYPE ST_TYPE_DAT;
MACRO_ST_TYPE ST_TYPE_DEFAULT;
MACRO_ST_TYPE ST_TYPE_DLT;
MACRO_ST_TYPE ST_TYPE_EMULEX;
MACRO_ST_TYPE ST_TYPE_EXABYTE;
MACRO_ST_TYPE ST_TYPE_EXB8500;
MACRO_ST_TYPE ST_TYPE_FUJI;
MACRO_ST_TYPE ST_TYPE_HIC;
MACRO_ST_TYPE ST_TYPE_HP;
MACRO_ST_TYPE ST_TYPE_INVALID;
MACRO_ST_TYPE ST_TYPE_KENNEDY;
MACRO_ST_TYPE ST_TYPE_PYTHON;
MACRO_ST_TYPE ST_TYPE_REEL;
MACRO_ST_TYPE ST_TYPE_STC3490;
MACRO_ST_TYPE ST_TYPE_STK9840;
MACRO_ST_TYPE ST_TYPE_SYSGEN;
MACRO_ST_TYPE ST_TYPE_SYSGEN1;
MACRO_ST_TYPE ST_TYPE_TAND25G;
MACRO_ST_TYPE ST_TYPE_WANGDAT;
MACRO_ST_TYPE ST_TYPE_WANGTEK;
MACRO_ST_TYPE ST_TYPE_WANGTHS;
MACRO_ST_TYPE ST_UNLOADABLE;
MACRO_ST_USER ST_USER_CONTEXT;
MACRO_ST_TYPE ST_VARIABLE;
MACRO_ST_MAX ST_WAIT_CMDS_COMPLETE;
MACRO_ST_STATE ST_WRITE_AFTER_EOM;
MACRO_SUA_ENOMEM SUA_EINVAL;
MACRO_SUA_ENOMEM SUA_ENOMEM;
MACRO_SUA SUA_NULL_POINTER;
accept_stat SUCCESS;
MACRO_SUF SUF_MIN_LEN;
MACRO_SUF SUF_SIG_LEN;
MACRO_SSYS SULOAD;
MACRO_SUNIXOS SUNIXOS;
MACRO_SUNMON SUNMON_END;
MACRO_ROMVEC_VERSION SUNMON_ROMVEC_VERSION;
MACRO_SUNMON SUNMON_START;
MACRO_ASCII_DEVID SUNVIEW_DEVID;
nstype SUNYP;
MACRO_SUN_KEY SUN_KEY_BOT;
MACRO_SUN_KEY SUN_KEY_EOF;
MACRO_SUN_KEY SUN_KEY_EOT;
MACRO_SUN_KEY SUN_KEY_FATAL;
MACRO_SUN_KEY SUN_KEY_LENGTH;
MACRO_SUN_KEY SUN_KEY_TIMEOUT;
MACRO_SUN_KEY SUN_KEY_WRONGMEDIA;
MACRO_SUN SUN_MIN_INQLEN;
MACRO_SUN_MIN SUN_MIN_SENSE_LENGTH;
MACRO_SUPD SUPD;
MACRO_SUPPLY SUPPLY_INTERVAL;
MACRO_SUPPORTED SUPPORTED_LOG_PAGES_PAGE;
MACRO_SUSP SUSP;
MACRO_SUSPEND SUSPEND_NORMAL;
MACRO_SUSPEND SUSPEND_PAUSE;
MACRO_SUSP_CHECK SUSP_CHECK_BYTE_1;
MACRO_SUSP_CHECK SUSP_CHECK_BYTE_2;
MACRO_SUSP_VERSION SUSP_VERSION;
MACRO_SVCGET_CONNMAXREC SVCGET_CONNMAXREC;
MACRO_VERSQUIET SVCGET_VERSQUIET;
MACRO_SVCGET SVCGET_XID;
nfssys_op SVCPOOL_CREATE;
MACRO_SVCSET SVCSET_CONNMAXREC;
MACRO_SVCSET SVCSET_KEEPALIVE;
MACRO_VERSQUIET SVCSET_VERSQUIET;
MACRO_SVC_VERSQUIET SVC_ARGS_CHECK;
MACRO_SVC SVC_CODE_SZ;
MACRO_SVC_VERSQUIET SVC_CONNECTION;
MACRO_SVC_VERSQUIET SVC_DEFUNCT;
MACRO_SVC_VERSQUIET SVC_DGRAM;
MACRO_SVC_VERSQUIET SVC_DOOR;
MACRO_SVC_VERSQUIET SVC_FAILED;
MACRO_SVC_VERSQUIET SVC_RENDEZVOUS;
MACRO_SVC_VERSQUIET SVC_TYPE_MASK;
MACRO_SVC_VERSQUIET SVC_VERSQUIET;
MACRO_SSYS SVFORK;
MACRO_SSYS SVFWAIT;
MACRO_SVID SVID;
MACRO_SVSCN SVSCN;
MACRO_SSYS SWAITSIG;
MACRO_SUPD SWANT;
MACRO_SWAPPING SWAPPING_NO;
MACRO_SWAPPING SWAPPING_YES;
MACRO_SWR SWR;
MACRO_SXTSWTCH SXTSWTCH;
MACRO_SYMESZ SYMESZ;
MACRO_SYMINFO SYMINFO_BT_LOWRESERVE;
MACRO_SYMINFO SYMINFO_BT_PARENT;
MACRO_SYMINFO SYMINFO_BT_SELF;
MACRO_SYMINFO SYMINFO_CURRENT;
MACRO_SYMINFO SYMINFO_FLG_COPY;
MACRO_SYMINFO SYMINFO_FLG_DIRECT;
MACRO_SYMINFO SYMINFO_FLG_LAZYLOAD;
MACRO_SYMINFO SYMINFO_FLG_PASSTHRU;
MACRO_SYMINFO SYMINFO_NONE;
MACRO_SYMINFO SYMINFO_NUM;
MACRO_SYMNMLEN SYMNMLEN;
MACRO_SYMTYPE SYMTYPE;
MACRO_SYNCH SYNCH;
MACRO_SYNC SYNC_ALL;
MACRO_SYNC SYNC_ATTR;
MACRO_SYNC SYNC_CLOSE;
MACRO_ASYNC SYNC_CMD;
MACRO_SYNC_PERIOD SYNC_PERIOD_MASK;
MACRO_SYSCANC SYSCANC;
MACRO_SYSMINT SYSMINT;
MACRO_SYSNAME SYSNAME;
MACRO_SYSOUTC SYSOUTC;
MACRO_UID_MAX SYSPID_MAX;
MACRO_SYSMINT SYSRAWC;
MACRO_SYSRINT SYSRINT;
MACRO_SYSTEMBIT SYSTEMBIT;
MACRO_SYSTEMBIT SYSTEMMASK;
accept_stat SYSTEM_ERR;
MACRO_SYSXINT SYSXINT;
MACRO_SYS_FORCELOAD SYS_CHECK_EXCLUDE;
MACRO_SYS_FORCELOAD SYS_FORCELOAD;
MACRO_SYS SYS_NMLN;
MACRO_SYS_FORCELOAD SYS_SET_KVAR;
MACRO_SYS_FORCELOAD SYS_SET_MVAR;
MACRO_SYS_syscall SYS_acancel;
MACRO_SYS_syscall SYS_accept;
MACRO_SYS_syscall SYS_access;
MACRO_SYS_syscall SYS_acct;
MACRO_SYS_syscall SYS_acctctl;
MACRO_SYS_syscall SYS_acl;
MACRO_SYS_syscall SYS_adjtime;
MACRO_SYS_syscall SYS_alarm;
MACRO_SYS_syscall SYS_async;
MACRO_SYS_syscall SYS_auditsys;
MACRO_SYS_syscall SYS_bind;
MACRO_SYS_syscall SYS_brk;
MACRO_SYS_syscall SYS_chdir;
MACRO_SYS_syscall SYS_chmod;
MACRO_SYS_syscall SYS_chown;
MACRO_SYS_syscall SYS_chroot;
MACRO_SYS_syscall SYS_cladm;
MACRO_SYS_syscall SYS_clocal;
MACRO_SYS_syscall SYS_clock_getres;
MACRO_SYS_syscall SYS_clock_gettime;
MACRO_SYS_syscall SYS_clock_settime;
MACRO_SYS_syscall SYS_close;
MACRO_SYS_syscall SYS_connect;
MACRO_SYS_syscall SYS_context;
MACRO_SYS_syscall SYS_corectl;
MACRO_SYS_syscall SYS_cpc;
MACRO_SYS_syscall SYS_creat;
MACRO_SYS_syscall SYS_creat64;
MACRO_SYS_syscall SYS_door;
MACRO_SYS_syscall SYS_dup;
MACRO_SYS_syscall SYS_evsys;
MACRO_SYS_syscall SYS_evtrapret;
MACRO_SYS_syscall SYS_exacctsys;
MACRO_SYS_syscall SYS_exec;
MACRO_SYS_syscall SYS_execve;
MACRO_SYS_syscall SYS_exit;
MACRO_SYS_syscall SYS_facl;
MACRO_SYS_syscall SYS_fchdir;
MACRO_SYS_syscall SYS_fchmod;
MACRO_SYS_syscall SYS_fchown;
MACRO_SYS_syscall SYS_fchroot;
MACRO_SYS_syscall SYS_fcntl;
MACRO_SYS_syscall SYS_fdsync;
MACRO_SYS_syscall SYS_fork;
MACRO_SYS_syscall SYS_fork1;
MACRO_SYS_syscall SYS_fpathconf;
MACRO_SYS_syscall SYS_fstat;
MACRO_SYS_syscall SYS_fstat64;
MACRO_SYS_syscall SYS_fstatfs;
MACRO_SYS_syscall SYS_fstatvfs;
MACRO_SYS_syscall SYS_fstatvfs64;
MACRO_SYS_syscall SYS_fxstat;
MACRO_SYS_syscall SYS_getdents;
MACRO_SYS_syscall SYS_getdents64;
MACRO_SYS_syscall SYS_getgid;
MACRO_SYS_syscall SYS_getgroups;
MACRO_SYS_syscall SYS_getitimer;
MACRO_SYS_syscall SYS_getloadavg;
MACRO_SYS_syscall SYS_getmsg;
MACRO_SYS_syscall SYS_getpeername;
MACRO_SYS_syscall SYS_getpid;
MACRO_SYS_syscall SYS_getpmsg;
MACRO_SYS_syscall SYS_getrlimit;
MACRO_SYS_syscall SYS_getrlimit64;
MACRO_SYS_syscall SYS_getsockname;
MACRO_SYS_syscall SYS_getsockopt;
MACRO_SYS_syscall SYS_gettimeofday;
MACRO_SYS_syscall SYS_getuid;
MACRO_SYS_syscall SYS_gtty;
MACRO_SYS_syscall SYS_hrtsys;
MACRO_SYS_syscall SYS_inst_sync;
MACRO_SYS_syscall SYS_install_utrap;
MACRO_SYS_syscall SYS_ioctl;
MACRO_SYS_syscall SYS_kaio;
MACRO_SYS_syscall SYS_kill;
MACRO_SYS_syscall SYS_lchown;
MACRO_SYS_syscall SYS_link;
MACRO_SYS_syscall SYS_listen;
MACRO_SYS_syscall SYS_llseek;
MACRO_SYS_syscall SYS_lseek;
MACRO_SYS_syscall SYS_lstat;
MACRO_SYS_syscall SYS_lstat64;
MACRO_SYS_syscall SYS_lwp_alarm;
MACRO_SYS_syscall SYS_lwp_cond_broadcast;
MACRO_SYS_syscall SYS_lwp_cond_signal;
MACRO_SYS_syscall SYS_lwp_cond_wait;
MACRO_SYS_syscall SYS_lwp_continue;
MACRO_SYS_syscall SYS_lwp_create;
MACRO_SYS_syscall SYS_lwp_exit;
MACRO_SYS_syscall SYS_lwp_getprivate;
MACRO_SYS_syscall SYS_lwp_info;
MACRO_SYS_syscall SYS_lwp_kill;
MACRO_SYS_syscall SYS_lwp_mutex_init;
MACRO_SYS_syscall SYS_lwp_mutex_lock;
MACRO_SYS_syscall SYS_lwp_mutex_trylock;
MACRO_SYS_syscall SYS_lwp_mutex_unlock;
MACRO_SYS_syscall SYS_lwp_mutex_wakeup;
MACRO_SYS_syscall SYS_lwp_self;
MACRO_SYS_syscall SYS_lwp_sema_post;
MACRO_SYS_syscall SYS_lwp_sema_trywait;
MACRO_SYS_syscall SYS_lwp_sema_wait;
MACRO_SYS_syscall SYS_lwp_setprivate;
MACRO_SYS_syscall SYS_lwp_sigredirect;
MACRO_SYS_syscall SYS_lwp_sigtimedwait;
MACRO_SYS_syscall SYS_lwp_suspend;
MACRO_SYS_syscall SYS_lwp_wait;
MACRO_SYS_syscall SYS_lxstat;
MACRO_SYS_syscall SYS_memcntl;
MACRO_SYS_syscall SYS_mincore;
MACRO_SYS_syscall SYS_mkdir;
MACRO_SYS_syscall SYS_mknod;
MACRO_SYS_syscall SYS_mmap;
MACRO_SYS_syscall SYS_mmap64;
MACRO_SYS_syscall SYS_modctl;
MACRO_SYS_syscall SYS_mount;
MACRO_SYS_syscall SYS_mprotect;
MACRO_SYS_syscall SYS_msgsys;
MACRO_SYS_syscall SYS_munmap;
MACRO_SYS_syscall SYS_nanosleep;
MACRO_SYS_syscall SYS_nfssys;
MACRO_SYS_syscall SYS_nice;
MACRO_SYS_syscall SYS_ntp_adjtime;
MACRO_SYS_syscall SYS_ntp_gettime;
MACRO_SYS_syscall SYS_open;
MACRO_SYS_syscall SYS_open64;
MACRO_SYS_syscall SYS_p_online;
MACRO_SYS_syscall SYS_pathconf;
MACRO_SYS_syscall SYS_pause;
MACRO_SYS_syscall SYS_pcsample;
MACRO_SYS_syscall SYS_pgrpsys;
MACRO_SYS_syscall SYS_pipe;
MACRO_SYS_syscall SYS_plock;
MACRO_SYS_syscall SYS_poll;
MACRO_SYS_syscall SYS_pread;
MACRO_SYS_syscall SYS_pread64;
MACRO_SYS_syscall SYS_priocntlsys;
MACRO_SYS_syscall SYS_processor_bind;
MACRO_SYS_syscall SYS_processor_info;
MACRO_SYS_syscall SYS_profil;
MACRO_SYS_syscall SYS_pset;
MACRO_SYS_syscall SYS_putmsg;
MACRO_SYS_syscall SYS_putpmsg;
MACRO_SYS_syscall SYS_pwrite;
MACRO_SYS_syscall SYS_pwrite64;
MACRO_SYS_syscall SYS_read;
MACRO_SYS_syscall SYS_readlink;
MACRO_SYS_syscall SYS_readv;
MACRO_SYS_syscall SYS_recv;
MACRO_SYS_syscall SYS_recvfrom;
MACRO_SYS_syscall SYS_recvmsg;
MACRO_SYS_syscall SYS_rename;
MACRO_SYS_syscall SYS_reserved_73;
MACRO_SYS_syscall SYS_reserved_74;
MACRO_SYS_syscall SYS_reserved_75;
MACRO_SYS_syscall SYS_reserved_76;
MACRO_SYS_syscall SYS_reserved_77;
MACRO_SYS_syscall SYS_reserved_78;
MACRO_SYS_syscall SYS_resolvepath;
MACRO_SYS_syscall SYS_rmdir;
MACRO_SYS_syscall SYS_rpcsys;
MACRO_SYS_syscall SYS_schedctl;
MACRO_SYS_syscall SYS_semsys;
MACRO_SYS_syscall SYS_send;
MACRO_SYS_syscall SYS_sendmsg;
MACRO_SYS_syscall SYS_sendto;
MACRO_SYS_syscall SYS_setegid;
MACRO_SYS_syscall SYS_seteuid;
MACRO_SYS_syscall SYS_setgid;
MACRO_SYS_syscall SYS_setgroups;
MACRO_SYS_syscall SYS_setitimer;
MACRO_SYS_syscall SYS_setregid;
MACRO_SYS_syscall SYS_setreuid;
MACRO_SYS_syscall SYS_setrlimit;
MACRO_SYS_syscall SYS_setrlimit64;
MACRO_SYS_syscall SYS_setsockopt;
MACRO_SYS_syscall SYS_setuid;
MACRO_SYS_syscall SYS_shmsys;
MACRO_SYS_syscall SYS_shutdown;
MACRO_SYS_syscall SYS_sigaction;
MACRO_SYS_syscall SYS_sigaltstack;
MACRO_SYS_syscall SYS_signal;
MACRO_SYS_syscall SYS_signotify;
MACRO_SYS_syscall SYS_signotifywait;
MACRO_SYS_syscall SYS_sigpending;
MACRO_SYS_syscall SYS_sigprocmask;
MACRO_SYS_syscall SYS_sigqueue;
MACRO_SYS_syscall SYS_sigsendsys;
MACRO_SYS_syscall SYS_sigsuspend;
MACRO_SYS_syscall SYS_sigtimedwait;
MACRO_SYS_syscall SYS_so_socket;
MACRO_SYS_syscall SYS_so_socketpair;
MACRO_SYS_syscall SYS_sockconfig;
MACRO_SYS_syscall SYS_sparc_utrap_install;
MACRO_SYS_syscall SYS_srmlimitsys;
MACRO_SYS_syscall SYS_stat;
MACRO_SYS_syscall SYS_stat64;
MACRO_SYS_syscall SYS_statfs;
MACRO_SYS_syscall SYS_statvfs;
MACRO_SYS_syscall SYS_statvfs64;
MACRO_SYS_syscall SYS_stime;
MACRO_SYS_syscall SYS_stty;
MACRO_SYS_syscall SYS_symlink;
MACRO_SYS_syscall SYS_sync;
MACRO_SYS_syscall SYS_syscall;
MACRO_SYS_syscall SYS_sysconfig;
MACRO_SYS_syscall SYS_sysfs;
MACRO_SYS_syscall SYS_sysi86;
MACRO_SYS_syscall SYS_syssun;
MACRO_SYS_syscall SYS_systeminfo;
MACRO_SYS_syscall SYS_tasksys;
MACRO_SYS_syscall SYS_time;
MACRO_SYS_syscall SYS_timer_create;
MACRO_SYS_syscall SYS_timer_delete;
MACRO_SYS_syscall SYS_timer_getoverrun;
MACRO_SYS_syscall SYS_timer_gettime;
MACRO_SYS_syscall SYS_timer_settime;
MACRO_SYS_syscall SYS_times;
MACRO_SYS_syscall SYS_tsolsys;
MACRO_SYS_syscall SYS_uadmin;
MACRO_SYS_syscall SYS_ulimit;
MACRO_SYS_syscall SYS_umask;
MACRO_SYS_syscall SYS_umount;
MACRO_SYS_syscall SYS_umount2;
MACRO_SYS_syscall SYS_uname;
MACRO_SYS_syscall SYS_unlink;
MACRO_SYS_syscall SYS_utime;
MACRO_SYS_syscall SYS_utimes;
MACRO_SYS_syscall SYS_utssys;
MACRO_SYS_syscall SYS_vfork;
MACRO_SYS_syscall SYS_vhangup;
MACRO_SYS_syscall SYS_vtrace;
MACRO_SYS_syscall SYS_wait;
MACRO_SYS_syscall SYS_waitsys;
MACRO_SYS_syscall SYS_write;
MACRO_SYS_syscall SYS_writev;
MACRO_SYS_syscall SYS_xenix;
MACRO_SYS_syscall SYS_xmknod;
MACRO_SYS_syscall SYS_xstat;
MACRO_SYS_syscall SYS_yield;
MACRO_SZOMB SZOMB;
MACRO_S_INPUT S_BANDURG;
seg_rw S_CREATE;
MACRO_S_IFMT S_ENFMT;
MACRO_S_INPUT S_ERROR;
seg_rw S_EXEC;
MACRO_S_INPUT S_HANGUP;
MACRO_S_INPUT S_HIPRI;
MACRO_S_IFMT S_IAMB;
MACRO_S_IFMT S_IEXEC;
MACRO_S_IFMT S_IFBLK;
MACRO_S_IFMT S_IFCHR;
MACRO_S_IFMT S_IFDIR;
MACRO_S_IFMT S_IFDOOR;
MACRO_S_IFMT S_IFIFO;
MACRO_S_IFMT S_IFLNK;
MACRO_S_IFMT S_IFMT;
MACRO_S_IFMT S_IFNAM;
MACRO_S_IFMT S_IFREG;
MACRO_S_IFMT S_IFSOCK;
MACRO_S_WINFO S_IGNORE_FLOW;
MACRO_S_INET S_INET_LISTEN;
MACRO_S_INPUT S_INPUT;
MACRO_S_IFMT S_INSEM;
MACRO_S_IFMT S_INSHD;
MACRO_S_IOCGETMODE S_IOCCLRSTATS;
MACRO_S_IOCGETMODE S_IOCGETMCTL;
MACRO_S_IOCGETMODE S_IOCGETMODE;
MACRO_S_IOCGETMODE S_IOCGETMRU;
MACRO_S_IOCGETMODE S_IOCGETMTU;
MACRO_S_IOCGETMODE S_IOCGETSPEED;
MACRO_S_IOCGETMODE S_IOCGETSTATS;
MACRO_S_IOCGETMODE S_IOCSETDTR;
MACRO_S_IOCGETMODE S_IOCSETMODE;
MACRO_S_IOCGETMODE S_IOCSETMRU;
MACRO_S_IOCGETMODE S_IOCSETMTU;
MACRO_S_IFMT S_IREAD;
MACRO_S_IFMT S_IRGRP;
MACRO_S_IFMT S_IROTH;
MACRO_S_IFMT S_IRUSR;
MACRO_S_IFMT S_IRWXG;
MACRO_S_IFMT S_IRWXO;
MACRO_S_IFMT S_IRWXU;
MACRO_S_IFMT S_ISGID;
MACRO_S_IFMT S_ISUID;
MACRO_S_IFMT S_ISVTX;
MACRO_S_IFMT S_IWGRP;
MACRO_S_IFMT S_IWOTH;
MACRO_S_IFMT S_IWRITE;
MACRO_S_IFMT S_IWUSR;
MACRO_S_IFMT S_IXGRP;
MACRO_S_IFMT S_IXOTH;
MACRO_S_IFMT S_IXUSR;
MACRO_S_INPUT S_MSG;
MACRO_S S_NONE;
seg_rw S_OTHER;
MACRO_S_INPUT S_OUTPUT;
MACRO_S_INPUT S_RDBAND;
MACRO_S_INPUT S_RDNORM;
seg_rw S_READ;
MACRO_S S_SIGACTION;
MACRO_S_SIGIO S_SIGIO;
MACRO_S S_SIGNAL;
MACRO_S S_SIGSET;
MACRO_S_SIGIO S_SIGURG;
MACRO_S_WINFO S_WINFO;
MACRO_S_INPUT S_WRBAND;
MACRO_S_WINFO S_WRDISABLE;
seg_rw S_WRITE;
MACRO_S_INPUT S_WRNORM;
MACRO_S_WINFO S_WUNBIND;
MACRO_S_WINFO S_WUNBIND_DISCON;
MACRO_SetFunctionalAddr SetFunctionalAddr;
MACRO_SetGroupAddr SetGroupAddr;
MACRO_Orientation ShapeCharset;
MACRO_Orientation ShapeCharsetSize;
MACRO_Orientation ShapeContextSize;
MACRO_Orientation Swapping;
MACRO_SR3 T0_SR3;
MACRO_NEWLINE TAB;
MACRO_TAB0 TAB0;
MACRO_TAB0 TAB2;
MACRO_TAB3 TAB3;
MACRO_CR0 TABDLY;
MACRO_TABLDISC TABLDISC;
zotypes TABLE_OBJ;
MACRO_TACCES TACCES;
MACRO_BUSY_0 TACT;
MACRO_TADDRBUSY TADDRBUSY;
MACRO_TAG TAG_DCACHE;
MACRO_TAG TAG_DCACHE_ALL;
MACRO_TAG TAG_DCACHE_ONE;
MACRO_TAG TAG_DCACHE_ONE_REFRESH;
MACRO_TAG TAG_DEBUG;
MACRO_TAG TAG_DIRLIST;
MACRO_TAG TAG_DNSFORWARDING;
MACRO_TAG TAG_GCACHE;
MACRO_TAG TAG_GCACHE_ALL;
MACRO_TAG TAG_GCACHE_ONE;
MACRO_TAG TAG_HEAP;
MACRO_TAG TAG_NISCOMPAT;
MACRO_TAG TAG_OCACHE;
MACRO_TAG TAG_OPSTATS;
MACRO_TAG TAG_READONLY;
MACRO_TAG TAG_READWRITE;
MACRO_TAG TAG_ROOTSERVER;
MACRO_TAG TAG_SECURE;
MACRO_TAG TAG_SECURITY_LEVEL;
MACRO_TAG TAG_STATS;
MACRO_TAG TAG_S_DCACHE;
MACRO_TAG TAG_S_GCACHE;
MACRO_TAG TAG_S_OCACHE;
MACRO_TAG TAG_S_STORAGE;
MACRO_TAG TAG_TCACHE_ALL;
MACRO_TAG TAG_TCACHE_ONE;
MACRO_TAG TAG_THREADS;
MACRO_TAG TAG_UPDATES;
MACRO_TAG TAG_UPTIME;
MACRO_TAG TAG_VISIBLE;
MACRO_TAPE TAPE_ALERT_MAX_PARA;
MACRO_TAPE TAPE_ALERT_NOT_SUPPORTED;
MACRO_SUPPORTED TAPE_ALERT_PAGE;
MACRO_TAPE TAPE_ALERT_SUPPORTED;
MACRO_TAPE TAPE_ALERT_SUPPORT_UNKNOWN;
MACRO_TAPE_SENSE TAPE_SENSE_LENGTH;
MACRO_ASCSZ TARSZ;
MACRO_TASKQ_ACTIVE TASKQ_ACTIVE;
MACRO_TASKQ TASKQ_CPR_SAFE;
MACRO_TASKQ_ACTIVE TASKQ_NAMELEN;
MACRO_TASKQ TASKQ_PREPOPULATE;
MACRO_TASK TASK_FINAL;
MACRO_TASK TASK_FINALITY;
MACRO_TASK TASK_NORMAL;
MACRO_TA_BINARY TA_ASN1;
MACRO_TA_BINARY TA_BINARY;
MACRO_TA_BINARY TA_CASE;
MACRO_TA_BINARY TA_CRYPT;
MACRO_TA TA_DROP;
MACRO_TA TA_INPUT;
MACRO_TA_BINARY TA_MODIFIED;
MACRO_TA TA_OUTPUT;
MACRO_TA TA_RESPOND;
MACRO_TA_BINARY TA_SEARCHABLE;
MACRO_TA TA_USER;
MACRO_TA_BINARY TA_XDR;
MACRO_TBADADDR TBADADDR;
MACRO_TBADDATA TBADDATA;
MACRO_TACCES TBADF;
MACRO_TNOUDERR TBADFLAG;
MACRO_TBADNAME TBADNAME;
MACRO_TBADADDR TBADOPT;
MACRO_TBADQLEN TBADQLEN;
MACRO_TBADSEQ TBADSEQ;
MACRO_ANYP TBDELAY;
MACRO_TBUFOVFLW TBUFOVFLW;
MACRO_TCDSET TCDSET;
MACRO_TCFLSH TCFLSH;
MACRO_TCGETA TCGETA;
MACRO_TCGETS TCGETS;
MACRO_TCGETX TCGETX;
MACRO_TCIFLUSH TCIFLUSH;
MACRO_TCOOFF TCIOFF;
MACRO_TCIFLUSH TCIOFLUSH;
MACRO_TCION TCION;
MACRO_TCL_BADADDR TCL_BADADDR;
MACRO_TCL_BADADDR TCL_BADOPT;
MACRO_TCL_CHECKSUM TCL_CHECKSUM;
MACRO_TCL_BADADDR TCL_NOPEER;
MACRO_TCL_BADADDR TCL_PEERBADSTATE;
MACRO_TCL TCL_PRIORITY;
MACRO_TCL TCL_PROTECTION;
MACRO_TCL TCL_RESERRORRATE;
MACRO_TCL TCL_TRANSDEL;
MACRO_TCIFLUSH TCOFLUSH;
MACRO_TCOOFF TCOOFF;
MACRO_TCOOFF TCOON;
MACRO_TCOO TCOO_NOPEER;
MACRO_TCOO TCOO_PEERBADSTATE;
MACRO_TCOO TCOO_PEERINITIATED;
MACRO_TCOO TCOO_PEERNOROOMONQ;
MACRO_TCOO TCOO_PROVIDERINITIATED;
MACRO_TCO_LTPDU TCO_ACKTIME;
MACRO_TCO_LTPDU TCO_ALTCLASS1;
MACRO_TCO_LTPDU TCO_ALTCLASS2;
MACRO_TCO_LTPDU TCO_ALTCLASS3;
MACRO_TCO_LTPDU TCO_ALTCLASS4;
MACRO_TCO_LTPDU TCO_CHECKSUM;
MACRO_TCO TCO_CONNRESIL;
MACRO_TCO TCO_ESTDELAY;
MACRO_TCO TCO_ESTFAILPROB;
MACRO_TCO TCO_EXPD;
MACRO_TCO_LTPDU TCO_EXTFORM;
MACRO_TCO_LTPDU TCO_FLOWCTRL;
MACRO_TCO_LTPDU TCO_LTPDU;
MACRO_TCO_LTPDU TCO_NETEXP;
MACRO_TCO_LTPDU TCO_NETRECPTCF;
MACRO_TCO_NOPEER TCO_NOPEER;
MACRO_TCO_NOPEER TCO_PEERBADSTATE;
MACRO_TCO_NOPEER TCO_PEERINITIATED;
MACRO_TCO_NOPEER TCO_PEERNOROOMONQ;
MACRO_TCO_LTPDU TCO_PREFCLASS;
MACRO_TCO TCO_PRIORITY;
MACRO_TCO TCO_PROTECTION;
MACRO_TCO_NOPEER TCO_PROVIDERINITIATED;
MACRO_TCO_LTPDU TCO_REASTIME;
MACRO_TCO TCO_RELDELAY;
MACRO_TCO TCO_RELFAILPROB;
MACRO_TCO TCO_RESERRORRATE;
MACRO_TCO TCO_THROUGHPUT;
MACRO_TCO TCO_TRANSDEL;
MACRO_TCO TCO_TRANSFFAILPROB;
MACRO_TCPOOB TCPOOB_HADDATA;
MACRO_TCPOOB TCPOOB_HAVEDATA;
MACRO_TCPOPT TCPOPT_EOL;
MACRO_TCPOPT TCPOPT_MAXSEG;
MACRO_TCPOPT TCPOPT_NOP;
MACRO_TCPOPT TCPOPT_SACK;
MACRO_TCPOPT TCPOPT_SACK_PERMITTED;
MACRO_TCPOPT TCPOPT_TSTAMP;
MACRO_TCPOPT TCPOPT_WSCALE;
MACRO_TCPS TCPS_BOUND;
MACRO_TCPS TCPS_IDLE;
MACRO_TCPS TCPS_SYN_RCVD;
MACRO_TCPS_SYN TCPS_SYN_RECEIVED;
MACRO_TCPTV TCPTV_KEEPCNT;
MACRO_TCPTV TCPTV_SRTTBASE;
MACRO_TCPT TCPT_2MSL;
MACRO_TCPT TCPT_KEEP;
MACRO_TCPT TCPT_NTIMERS;
MACRO_TCPT TCPT_PERSIST;
MACRO_TCPT TCPT_REXMT;
MACRO_TCP_NOTIFY TCP_ABORT_THRESHOLD;
MACRO_TCP_NOTIFY TCP_ANONPRIVBIND;
MACRO_TCP_NOTIFY TCP_CONN_ABORT_THRESHOLD;
MACRO_TCP_NOTIFY TCP_CONN_NOTIFY_THRESHOLD;
MACRO_TCP_NOTIFY TCP_EXCLBIND;
MACRO_TCP_IOC TCP_IOC_DEFAULT_Q;
MACRO_TCP_ISSINCR TCP_ISSINCR;
MACRO_TCP TCP_KEEPALIVE;
MACRO_TCP_LINGERTIME TCP_LINGERTIME;
MACRO_TCP_LINGERTIME TCP_MAXRXTSHIFT;
MACRO_TCP TCP_MAXSEG;
MACRO_TCP_MAX TCP_MAXWIN;
MACRO_TCP_MAX TCP_MAX_COMBINED_HEADER_LENGTH;
MACRO_TCP_MAX TCP_MAX_HDR_LENGTH;
MACRO_TCP_MAX TCP_MAX_IP_OPTIONS_LENGTH;
MACRO_TCP_MAX TCP_MAX_LARGEWIN;
MACRO_TCP_MAX TCP_MAX_WINSHIFT;
MACRO_TCP_MAX TCP_MIN_HEADER_LENGTH;
MACRO_TCP_NDEBUG TCP_NDEBUG;
MACRO_TCP TCP_NODELAY;
MACRO_TCP_NOTIFY TCP_NOTIFY_THRESHOLD;
MACRO_TCP_NDEBUG TCP_NSTATES;
MACRO_TCP_PUSH TCP_PUSH_BIT;
MACRO_TCP_NOTIFY TCP_RECVDSTADDR;
MACRO_TCP_TTL TCP_TTL;
MACRO_TCRCLEN TCRCLEN;
MACRO_TCSADRAIN TCSADRAIN;
MACRO_TCSAFLUSH TCSAFLUSH;
MACRO_TCSANOW TCSANOW;
MACRO_TCSBRK TCSBRK;
MACRO_TCSETA TCSETA;
MACRO_TCSETAF TCSETAF;
MACRO_TCSETAW TCSETAW;
MACRO_TCSETS TCSETS;
MACRO_TCSETSF TCSETSF;
MACRO_TCSETSW TCSETSW;
MACRO_TCSETX TCSETX;
MACRO_TCSETXF TCSETXF;
MACRO_TCSETXW TCSETXW;
MACRO_TCXONC TCXONC;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_ALL_EVENTS;
$7763C6F5F90D633510BBD051BDA06E4F TD_BADKEY;
$7763C6F5F90D633510BBD051BDA06E4F TD_BADPH;
$7763C6F5F90D633510BBD051BDA06E4F TD_BADSH;
$7763C6F5F90D633510BBD051BDA06E4F TD_BADTA;
$7763C6F5F90D633510BBD051BDA06E4F TD_BADTH;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_CATCHSIG;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_CONCURRENCY;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_CREATE;
$7763C6F5F90D633510BBD051BDA06E4F TD_DBERR;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_DEATH;
$7763C6F5F90D633510BBD051BDA06E4F TD_ERR;
MACRO_TD TD_EVENTSIZE;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_EVENTS_ENABLE;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_EVENT_NONE;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_IDLE;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_LOCK_TRY;
$7763C6F5F90D633510BBD051BDA06E4F TD_MALLOC;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_MAX_EVENT_NUM;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_MIN_EVENT_NUM;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOAPLIC;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOCAPAB;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOEVENT;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOFPREGS;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOLIBTHREAD;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOLWP;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOMSG;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOSV;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOTHR;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOTSD;
$7763C6F5F90D633510BBD051BDA06E4F TD_NOXREGS;
$7763C6F5F90D633510BBD051BDA06E4F TD_OK;
$7763C6F5F90D633510BBD051BDA06E4F TD_PARTIALREG;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_PREEMPT;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_PRI_INHERIT;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_READY;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_REAP;
MACRO_TD TD_SIGNO_MASK;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_SLEEP;
MACRO_TD_SV TD_SV_MAX_FLAGS;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_SWITCHFROM;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_SWITCHTO;
td_sync_type_e TD_SYNC_COND;
td_sync_type_e TD_SYNC_MUTEX;
td_sync_type_e TD_SYNC_RWLOCK;
td_sync_type_e TD_SYNC_SEMA;
td_sync_type_e TD_SYNC_UNKNOWN;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_ACTIVE;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_ANY_STATE;
$89FB60EA18EC68E58342D0F505790FD5 TD_THR_ANY_TYPE;
MACRO_TD TD_THR_ANY_USER_FLAGS;
MACRO_TD TD_THR_LOWEST_PRIORITY;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_RUN;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_SLEEP;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_STOPPED;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_STOPPED_ASLEEP;
$89FB60EA18EC68E58342D0F505790FD5 TD_THR_SYSTEM;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_UNKNOWN;
$89FB60EA18EC68E58342D0F505790FD5 TD_THR_USER;
$D4AB9A46DE65367CC0FF11AD6E77796A TD_THR_ZOMBIE;
$65CF98EECFB69F691B0631C04FBFD9D4 TD_TIMEOUT;
MACRO_TELCMD TELCMD_FIRST;
MACRO_TELCMD TELCMD_LAST;
MACRO_TELIOC TELIOC;
MACRO_TELOPT TELOPT_3270REGIME;
MACRO_TELOPT TELOPT_AUTHENTICATION;
MACRO_TELOPT TELOPT_BINARY;
MACRO_TELOPT TELOPT_BM;
MACRO_TELOPT TELOPT_DET;
MACRO_TELOPT TELOPT_ECHO;
MACRO_TELOPT TELOPT_ENCRYPT;
MACRO_TELOPT TELOPT_EOR;
MACRO_TELOPT TELOPT_EXOPL;
MACRO_TELOPT TELOPT_FIRST;
MACRO_TELOPT TELOPT_LAST;
MACRO_TELOPT TELOPT_LFLOW;
MACRO_TELOPT TELOPT_LINEMODE;
MACRO_TELOPT TELOPT_LOGOUT;
MACRO_TELOPT TELOPT_NAMS;
MACRO_TELOPT TELOPT_NAOCRD;
MACRO_TELOPT TELOPT_NAOFFD;
MACRO_TELOPT TELOPT_NAOHTD;
MACRO_TELOPT TELOPT_NAOHTS;
MACRO_TELOPT TELOPT_NAOL;
MACRO_TELOPT TELOPT_NAOLFD;
MACRO_TELOPT TELOPT_NAOP;
MACRO_TELOPT TELOPT_NAOVTD;
MACRO_TELOPT TELOPT_NAOVTS;
MACRO_TELOPT TELOPT_NAWS;
MACRO_TELOPT TELOPT_NEW_ENVIRON;
MACRO_TELOPT TELOPT_OLD_ENVIRON;
MACRO_TELOPT TELOPT_OUTMRK;
MACRO_TELOPT TELOPT_RCP;
MACRO_TELOPT TELOPT_RCTE;
MACRO_TELOPT TELOPT_SGA;
MACRO_TELOPT TELOPT_SNDLOC;
MACRO_TELOPT TELOPT_STATUS;
MACRO_TELOPT TELOPT_SUPDUP;
MACRO_TELOPT TELOPT_SUPDUPOUTPUT;
MACRO_TELOPT TELOPT_TM;
MACRO_TELOPT TELOPT_TSPEED;
MACRO_TELOPT TELOPT_TTYLOC;
MACRO_TELOPT TELOPT_TTYPE;
MACRO_TELOPT TELOPT_TUID;
MACRO_TELOPT TELOPT_X3PAD;
MACRO_TELOPT TELOPT_XASCII;
MACRO_TELOPT TELOPT_XDISPLOC;
MACRO_TELQUAL TELQUAL_INFO;
MACRO_TELQUAL TELQUAL_IS;
MACRO_TELQUAL TELQUAL_NAME;
MACRO_TELQUAL TELQUAL_REPLY;
MACRO_TELQUAL TELQUAL_SEND;
MACRO_TEL TEL_BINARY_IN;
MACRO_TEL TEL_BINARY_OUT;
MACRO_TEL TEL_IOC_ENABLE;
MACRO_TEL TEL_IOC_GETBLK;
MACRO_TEL TEL_IOC_MODE;
MACRO_TOO_LONG TERMINFO_TOO_LONG;
MACRO_TERM_BAD TERM_BAD_MALLOC;
MACRO_TERM TERM_D40;
MACRO_TERM TERM_D42;
MACRO_TERM TERM_H45;
MACRO_TERM TERM_NONE;
MACRO_TERM TERM_TEC;
MACRO_TERM TERM_TEX;
MACRO_TERM TERM_V10;
MACRO_TERM TERM_V61;
MACRO_TRANSFER TEST1_TIMEOUT;
MACRO_TRANSFER TEST2_TIMEOUT;
MACRO_TEXTDOMAINMAX TEXTDOMAINMAX;
MACRO_TEXT TEXT_EXPLICIT;
MACRO_TEXT TEXT_IMPLICIT;
MACRO_TEXT_SHAPED TEXT_NOMINAL;
MACRO_TEXT_SHAPED TEXT_SHAPED;
MACRO_TEXT_SHAPED TEXT_SHFORM1;
MACRO_TEXT_SHAPED TEXT_SHFORM2;
MACRO_TEXT_SHAPED TEXT_SHFORM3;
MACRO_TEXT_SHAPED TEXT_SHFORM4;
MACRO_TEXT TEXT_VISUAL;
MACRO_TE TE_BIND_ACK;
MACRO_TE TE_BIND_REQ;
MACRO_TE TE_CONN_CON;
MACRO_TE TE_CONN_IND;
MACRO_TE TE_CONN_REQ;
MACRO_TE TE_CONN_RES;
MACRO_TE TE_DATA_IND;
MACRO_TE TE_DATA_REQ;
MACRO_TE TE_DISCON_IND1;
MACRO_TE TE_DISCON_IND2;
MACRO_TE TE_DISCON_IND3;
MACRO_TE TE_DISCON_REQ;
MACRO_TE TE_ERROR_ACK;
MACRO_TE TE_EXDATA_IND;
MACRO_TE TE_EXDATA_REQ;
MACRO_TE TE_NOEVENTS;
MACRO_TE TE_OK_ACK1;
MACRO_TE TE_OK_ACK2;
MACRO_TE TE_OK_ACK3;
MACRO_TE TE_OK_ACK4;
MACRO_TE TE_OPTMGMT_ACK;
MACRO_TE TE_OPTMGMT_REQ;
MACRO_TE TE_ORDREL_IND;
MACRO_TE TE_ORDREL_REQ;
MACRO_TE TE_PASS_CONN;
MACRO_TE TE_UDERROR_IND;
MACRO_TE TE_UNBIND_REQ;
MACRO_TE TE_UNITDATA_IND;
MACRO_TE TE_UNITDATA_REQ;
MACRO_TFLOW TFLOW;
MACRO_TF TF_ACKNOW;
MACRO_TF TF_DELACK;
MACRO_TF TF_NODELAY;
MACRO_TF TF_NOOPT;
MACRO_TF TF_SENTFIN;
MACRO_TGEXEC TGEXEC;
MACRO_TGIDLEN TGIDLEN;
MACRO_TGREAD TGREAD;
MACRO_TGWRITE TGWRITE;
MACRO_THOUSEP THOUSEP;
MACRO_THR THR_BOUND;
MACRO_THR THR_DAEMON;
MACRO_THR THR_DETACHED;
MACRO_THR THR_NEW_LWP;
MACRO_THR THR_SUSPENDED;
MACRO_TH TH_ACK;
MACRO_TH_PSH TH_ACK_ACCEPTABLE;
MACRO_TH_PSH TH_ACK_NEEDED;
MACRO_TH TH_FIN;
MACRO_TH_PSH TH_MARKNEXT_NEEDED;
MACRO_TH_PSH TH_NEED_SACK_REXMIT;
MACRO_TH_PSH TH_ORDREL_NEEDED;
MACRO_TH_PSH TH_PSH;
MACRO_TH TH_PUSH;
MACRO_TH_PSH TH_REXMIT_NEEDED;
MACRO_TH TH_RST;
MACRO_TH_PSH TH_SEND_URP_MARK;
MACRO_TH TH_SYN;
MACRO_TH_PSH TH_TIMER_NEEDED;
MACRO_TH TH_URG;
MACRO_TH_PSH TH_XMIT_NEEDED;
MACRO_TIE TIE_CA;
MACRO_TIE TIE_IE;
MACRO_TIE TIE_INTR;
MACRO_TIE TIE_NOLOOP;
MACRO_TIE TIE_RESET;
MACRO_TIFIOCALLOCBUF TIFIOCALLOCBUF;
$8730B17123942F667165FE26F5FCD7CE::$3DDB4C346819B22BEDB9C12A4C6CC876 TIFIOCBUF_BROKEN;
$8730B17123942F667165FE26F5FCD7CE::$3DDB4C346819B22BEDB9C12A4C6CC876 TIFIOCBUF_NONE;
$8730B17123942F667165FE26F5FCD7CE::$3DDB4C346819B22BEDB9C12A4C6CC876 TIFIOCBUF_OK;
$8730B17123942F667165FE26F5FCD7CE::$3DDB4C346819B22BEDB9C12A4C6CC876 TIFIOCBUF_UNINIT;
MACRO_TIFIOCDEALLOCBUF TIFIOCDEALLOCBUF;
MACRO_TIFIOCGBLOCK TIFIOCGBLOCK;
MACRO_TIFIOCGFWZONE TIFIOCGFWZONE;
MACRO_TIFIOCGHEADER TIFIOCGHEADER;
MACRO_TIFIOCGMAXPROBE TIFIOCGMAXPROBE;
MACRO_TIFIOCGPIDSTATE TIFIOCGPIDSTATE;
MACRO_TIFIOCGPROBESTRING TIFIOCGPROBESTRING;
MACRO_TIFIOCGPROBEVALS TIFIOCGPROBEVALS;
MACRO_TIFIOCGSTATE TIFIOCGSTATE;
MACRO_TIFIOCPIDFILTERGET TIFIOCPIDFILTERGET;
MACRO_TIFIOCSPIDFILTER TIFIOCSPIDFILTER;
MACRO_TIFIOCSPIDOFF TIFIOCSPIDOFF;
MACRO_TIFIOCSPIDON TIFIOCSPIDON;
MACRO_TIFIOCSPROBEVALS TIFIOCSPROBEVALS;
MACRO_TIFIOCSTRACING TIFIOCSTRACING;
MACRO_TIME_0 TIME;
MACRO_TIMEOUT_0 TIMEOUT;
MACRO_TIMER TIMER_ABSTIME;
MACRO_TIMER_RATE TIMER_RATE;
MACRO_TIMER TIMER_RELTIME;
MACRO_TIME_OK TIME_DEL;
MACRO_TIME_OK TIME_ERROR;
MACRO_TIME_OK TIME_INS;
MACRO_TIME_OK TIME_OK;
MACRO_TIME_OK TIME_OOP;
MACRO_TIME_OK TIME_WAIT;
MACRO_TIMOD TIMOD;
MACRO_TINDOUT TINDOUT;
MACRO_TINVALID TINVALID;
MACRO_TIOC TIOC;
MACRO_TIOCCBRK TIOCCBRK;
MACRO_TIOCCDTR TIOCCDTR;
MACRO_TIOCEXCL TIOCEXCL;
MACRO_TIOCFLUSH TIOCFLUSH;
MACRO_TIOCGETC TIOCGETC;
MACRO_TIOCGETD TIOCGETD;
MACRO_TIOCGETP TIOCGETP;
MACRO_TIOCGLTC TIOCGLTC;
MACRO_TIOCGPGRP TIOCGPGRP;
MACRO_TIOCGPPS TIOCGPPS;
MACRO_TIOCGPPSEV TIOCGPPSEV;
MACRO_TIOCGSID TIOCGSID;
MACRO_TIOCGSOFTCAR TIOCGSOFTCAR;
MACRO_TIOCGWINSZ TIOCGWINSZ;
MACRO_TIOCHPCL TIOCHPCL;
MACRO_TIOCKBOF TIOCKBOF;
MACRO_TIOCKBON TIOCKBON;
MACRO_TIOCLBIC TIOCLBIC;
MACRO_TIOCLBIS TIOCLBIS;
MACRO_TIOCLGET TIOCLGET;
MACRO_TIOCLSET TIOCLSET;
MACRO_TIOCMBIC TIOCMBIC;
MACRO_TIOCMBIS TIOCMBIS;
MACRO_TIOCMGET TIOCMGET;
MACRO_TIOCMSET TIOCMSET;
MACRO_TIOCM TIOCM_CAR;
MACRO_TIOCM TIOCM_CD;
MACRO_TIOCM TIOCM_CTS;
MACRO_TIOCM TIOCM_DSR;
MACRO_TIOCM TIOCM_DTR;
MACRO_TIOCM TIOCM_LE;
MACRO_TIOCM TIOCM_RI;
MACRO_TIOCM TIOCM_RNG;
MACRO_TIOCM TIOCM_RTS;
MACRO_TIOCM TIOCM_SR;
MACRO_TIOCM TIOCM_ST;
MACRO_TIOCNOTTY TIOCNOTTY;
MACRO_TIOCNXCL TIOCNXCL;
MACRO_TIOCOUTQ TIOCOUTQ;
MACRO_TIOCPKT TIOCPKT_DATA;
MACRO_TIOCPKT TIOCPKT_DOSTOP;
MACRO_TIOCPKT TIOCPKT_FLUSHREAD;
MACRO_TIOCPKT TIOCPKT_FLUSHWRITE;
MACRO_TIOCPKT TIOCPKT_IOCTL;
MACRO_TIOCPKT TIOCPKT_NOSTOP;
MACRO_TIOCPKT TIOCPKT_START;
MACRO_TIOCPKT TIOCPKT_STOP;
MACRO_TIOCPKT_WINDOW TIOCPKT_WINDOW;
MACRO_TIOCREMOTE TIOCREMOTE;
MACRO_TIOCSBRK TIOCSBRK;
MACRO_TIOCSDTR TIOCSDTR;
MACRO_TIOCSETC TIOCSETC;
MACRO_TIOCSETD TIOCSETD;
MACRO_TIOCSETN TIOCSETN;
MACRO_TIOCSETP TIOCSETP;
MACRO_TIOCSIGNAL TIOCSIGNAL;
MACRO_TIOCSLTC TIOCSLTC;
MACRO_TIOCSPGRP TIOCSPGRP;
MACRO_TIOCSPPS TIOCSPPS;
MACRO_TIOCSSID TIOCSSID;
MACRO_TIOCSSOFTCAR TIOCSSOFTCAR;
MACRO_TIOCSTART TIOCSTART;
MACRO_TIOCSTI TIOCSTI;
MACRO_TIOCSTOP TIOCSTOP;
MACRO_TIOCSWINSZ TIOCSWINSZ;
MACRO_TI TI_BIND;
MACRO_TI TI_CAPABILITY;
MACRO_TI TI_GETADDRS;
MACRO_TI TI_GETINFO;
MACRO_TI TI_GETMYNAME;
MACRO_TI TI_GETPEERNAME;
MACRO_TI TI_OPTMGMT;
MACRO_TI TI_SETMYNAME;
MACRO_TI TI_SETPEERNAME;
MACRO_TI TI_SYNC;
MACRO_TI TI_UNBIND;
MACRO_TLI TLI_STACK_BUF_SIZE;
MACRO_TLOOK TLOOK;
MACRO_TLOSS TLOSS;
MACRO_TL TL_IOC;
MACRO_TL TL_IOC_CREDOPT;
MACRO_TL TL_IOC_SOCKET;
MACRO_TL TL_OPT_PEER_CRED;
MACRO_TL TL_PROT_LEVEL;
MACRO_TMAGLEN TMAGLEN;
MACRO_TMD TMD_ANYERROR;
MACRO_TMD TMD_BUFF;
MACRO_TMD TMD_DEF;
MACRO_TMD TMD_LCAR;
MACRO_TMD TMD_LCOL;
MACRO_TMD TMD_MORE;
MACRO_TMD TMD_ONE;
MACRO_TMD TMD_RES;
MACRO_TMD TMD_RTRY;
MACRO_TMD TMD_TDR;
MACRO_TMD TMD_UFLO;
MACRO_TMODE TMODE;
MACRO_TMODLEN TMODLEN;
MACRO_TMPMAXFRACKMEM TMPMAXFRACKMEM;
MACRO_TMPMINFREE TMPMINFREE;
MACRO_TMP TMP_MAX;
MACRO_TMP_MUSTHAVE TMP_MUSTHAVE;
MACRO_TMXOPEN TMXOPEN;
MACRO_TMXOPEN TMXPLINK;
MACRO_TM TM_ANL;
MACRO_TM_SUNDAY TM_APRIL;
MACRO_TM_SUNDAY TM_AUGUST;
MACRO_TM TM_CECHO;
MACRO_TM TM_CINVIS;
MACRO_TM_SUNDAY TM_DECEMBER;
MACRO_TM_SUNDAY TM_FEBRUARY;
MACRO_TM_SUNDAY TM_FRIDAY;
MACRO_TM_SUNDAY TM_JANUARY;
MACRO_TM_SUNDAY TM_JULY;
MACRO_TM_SUNDAY TM_JUNE;
MACRO_TM TM_LCF;
MACRO_TM_SUNDAY TM_MARCH;
MACRO_TM_SUNDAY TM_MAY;
MACRO_TM_SUNDAY TM_MONDAY;
MACRO_TM TM_NONE;
MACRO_TM_SUNDAY TM_NOVEMBER;
MACRO_TM_SUNDAY TM_OCTOBER;
MACRO_TM_SUNDAY TM_SATURDAY;
MACRO_TM_SUNDAY TM_SEPTEMBER;
MACRO_TM TM_SET;
MACRO_TM TM_SNL;
MACRO_TM_SUNDAY TM_SUNDAY;
MACRO_TM_SUNDAY TM_THURSDAY;
MACRO_TM_SUNDAY TM_TUESDAY;
MACRO_TM_SUNDAY TM_WEDNESDAY;
MACRO_TM_SUNDAY TM_YEAR_BASE;
MACRO_HSIZLEN TNAMLEN;
$09E8BCDC574BDBEF68A1C2F08AD7DBBF TNFCTL_BUF_BROKEN;
$09E8BCDC574BDBEF68A1C2F08AD7DBBF TNFCTL_BUF_NONE;
$09E8BCDC574BDBEF68A1C2F08AD7DBBF TNFCTL_BUF_OK;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_ACCES;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_ALLOCFAIL;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_BADARG;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_BADDEALLOC;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_BUFBROKEN;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_BUFEXISTS;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_BUSY;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_FILENOTFOUND;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_INTERNAL;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_INVALIDPROBE;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_NOBUF;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_NOLIBTNFPROBE;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_NONE;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_NOPROCESS;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_NOTARGET;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_NOTDYNAMIC;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_SIZETOOBIG;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_SIZETOOSMALL;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_USR1;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_USR2;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_USR3;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_USR4;
$D6CA55EB07B097D421AB6298BB521718 TNFCTL_ERR_USR5;
$43D49273C3852A9CF5015CF659B9A833 TNFCTL_EVENT_DLCLOSE;
$43D49273C3852A9CF5015CF659B9A833 TNFCTL_EVENT_DLOPEN;
$43D49273C3852A9CF5015CF659B9A833 TNFCTL_EVENT_EINTR;
$43D49273C3852A9CF5015CF659B9A833 TNFCTL_EVENT_EXEC;
$43D49273C3852A9CF5015CF659B9A833 TNFCTL_EVENT_EXIT;
$43D49273C3852A9CF5015CF659B9A833 TNFCTL_EVENT_FORK;
$43D49273C3852A9CF5015CF659B9A833 TNFCTL_EVENT_TARGGONE;
$CE3E7AC5D93368FF00E554010E1E9915 TNFCTL_TARG_DEFAULT;
$CE3E7AC5D93368FF00E554010E1E9915 TNFCTL_TARG_KILL;
$CE3E7AC5D93368FF00E554010E1E9915 TNFCTL_TARG_RESUME;
$CE3E7AC5D93368FF00E554010E1E9915 TNFCTL_TARG_SUSPEND;
$3797F07133CAA59E79BE5E41B8631F21 TNF_ARRAY;
MACRO_TNF_DATUM TNF_DATUM_NULL;
MACRO_TNF_DATUM TNF_ERRNO_MAX;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_ALLOCFAIL;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_BADDATUM;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_BADINDEX;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_BADREFTYPE;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_BADSLOT;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_BADTNF;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_INTERNAL;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_NONE;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_NOTTNF;
$13C394361E9AC5CA038584373CF0D1BD TNF_ERR_TYPEMISMATCH;
MACRO_TNF TNF_FILE_VERSION;
$3797F07133CAA59E79BE5E41B8631F21 TNF_FLOAT32;
$3797F07133CAA59E79BE5E41B8631F21 TNF_FLOAT64;
$3797F07133CAA59E79BE5E41B8631F21 TNF_INT32;
$3797F07133CAA59E79BE5E41B8631F21 TNF_INT64;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_ARRAY;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_CHAR;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_FLOAT32;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_FLOAT64;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_INT16;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_INT32;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_INT64;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_INT8;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_SCALAR;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_STRING;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_STRUCT;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_TYPE;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_UINT16;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_UINT32;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_UINT64;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_UINT8;
$99AB38EF265AA84A0F6A323035284FBD TNF_K_UNKNOWN;
MACRO_TNF TNF_MAGIC;
MACRO_TNF TNF_MAGIC_1;
MACRO_TNF TNF_NEXT_INIT;
MACRO_TNF TNF_NULL;
$3797F07133CAA59E79BE5E41B8631F21 TNF_OPAQUE;
MACRO_TNF TNF_REF16_TYPE_MASK;
MACRO_TNF TNF_REF32_REF16_MASK;
MACRO_TNF TNF_REF32_TAG16_MASK;
MACRO_TNF TNF_REF32_TAG16_SHIFT;
MACRO_TNF TNF_REF32_TYPE_MASK;
MACRO_TNF TNF_REF32_T_FULL;
MACRO_TNF TNF_REF32_T_FWD;
MACRO_TNF TNF_REF32_T_PAIR;
MACRO_TNF TNF_REF32_T_RSVD;
MACRO_TNF TNF_REF32_T_TAG;
MACRO_TNF TNF_SPACE_MASK;
MACRO_TNF TNF_SPACE_PERMANENT;
MACRO_TNF TNF_SPACE_RECLAIMABLE;
MACRO_TNF TNF_SPACE_SIGN_BIT;
$3797F07133CAA59E79BE5E41B8631F21 TNF_STRING;
$3797F07133CAA59E79BE5E41B8631F21 TNF_STRUCT;
MACRO_TNF TNF_TAG16_TYPE_MASK;
MACRO_TNF TNF_TAG16_T_ABS;
MACRO_TNF TNF_TAG16_T_REL;
MACRO_TNF TNF_TAG_GENERATION_NUM;
$3797F07133CAA59E79BE5E41B8631F21 TNF_UINT32;
$3797F07133CAA59E79BE5E41B8631F21 TNF_UINT64;
$3797F07133CAA59E79BE5E41B8631F21 TNF_UNKNOWN;
MACRO_TNOADDR TNOADDR;
MACRO_TNODATA TNODATA;
MACRO_TNODIS TNODIS;
MACRO_TNOREL TNOREL;
MACRO_TNOSTRUCTYPE TNOSTRUCTYPE;
MACRO_TNOTSUPPORT TNOTSUPPORT;
MACRO_TNOUDERR TNOUDERR;
MACRO_TOD TOD_CLEAR_ALARM;
MACRO_TOD TOD_GET_DATE;
MACRO_TOD TOD_IOC;
MACRO_TOD TOD_SET_ALARM;
MACRO_TOEXEC TOEXEC;
MACRO_TOFFSET TOFFSET;
MACRO_ADDR_SIZE TOKEN_ADDR_SIZE;
MACRO_TOKEN TOKEN_VERSION;
MACRO_TOPFUNC TOPFUNC;
MACRO_TOP TOP_ASYNC;
top_type TOP_COMMIT_ASYNC;
top_type TOP_COMMIT_FLUSH;
MACRO_TOP_COMMIT TOP_COMMIT_SIZE;
top_type TOP_COMMIT_UNMOUNT;
top_type TOP_COMMIT_UPDATE;
top_type TOP_CREATE;
MACRO_ASCII_DEVID TOP_DEVID;
MACRO_TOP_FIRST TOP_FIRST;
top_type TOP_FSYNC;
top_type TOP_GETPAGE;
top_type TOP_IFREE;
top_type TOP_ITRUNC;
top_type TOP_IUPDAT;
MACRO_TOP_FIRST TOP_LAST;
top_type TOP_LINK;
top_type TOP_MAX;
MACRO_TOP_COMMIT TOP_MAX_RESV;
top_type TOP_MKDIR;
top_type TOP_MOUNT;
top_type TOP_PUTPAGE;
top_type TOP_QUOTA;
top_type TOP_READ_SYNC;
top_type TOP_REMOVE;
top_type TOP_RENAME;
top_type TOP_RMDIR;
top_type TOP_SBUPDATE_FLUSH;
top_type TOP_SBUPDATE_UNMOUNT;
top_type TOP_SBUPDATE_UPDATE;
top_type TOP_SBWRITE_RECLAIM;
top_type TOP_SBWRITE_STABLE;
top_type TOP_SETATTR;
top_type TOP_SETSECATTR;
top_type TOP_SYMLINK;
MACRO_TOP TOP_SYNC;
top_type TOP_SYNCIP_CLOSEDQ;
top_type TOP_SYNCIP_FLUSHI;
top_type TOP_SYNCIP_FREE;
top_type TOP_SYNCIP_HLOCK;
top_type TOP_SYNCIP_SYNC;
top_type TOP_WRITE;
top_type TOP_WRITE_SYNC;
MACRO_TOREAD TOREAD;
MACRO_ISIG TOSTOP;
MACRO_TOUTSTATE TOUTSTATE;
MACRO_TOWRITE TOWRITE;
MACRO_SR1 TO_SR1;
MACRO_TPLBYTEMAP TPLBYTEMAP_HIGH;
MACRO_TPLBYTEMAP TPLBYTEMAP_LOW;
MACRO_TPLBYTEMAP TPLBYTEMAP_VS;
MACRO_TPLBYTEORD TPLBYTEORD_HIGH;
MACRO_TPLBYTEORD TPLBYTEORD_LOW;
MACRO_TPLBYTEORD TPLBYTEORD_VS;
MACRO_TPLFE TPLFE_CAP_MODEM_DATA;
MACRO_TPLFE TPLFE_CAP_MODEM_FAX;
MACRO_TPLFE TPLFE_CAP_MODEM_VOICE;
MACRO_TPLFE TPLFE_CAP_SERIAL_DATA;
MACRO_TPLFE TPLFE_CAP_SERIAL_FAX;
MACRO_TPLFE TPLFE_CAP_SERIAL_VOICE;
MACRO_TPLFE TPLFE_CM_AT1;
MACRO_TPLFE TPLFE_CM_AT2;
MACRO_TPLFE TPLFE_CM_AT3;
MACRO_TPLFE TPLFE_CM_DMCL;
MACRO_TPLFE TPLFE_CM_MNP_AT;
MACRO_TPLFE TPLFE_CM_V25A;
MACRO_TPLFE TPLFE_CM_V25BIS;
MACRO_TPLFE TPLFE_DC_MNP5;
MACRO_TPLFE TPLFE_DC_V42BIS;
MACRO_TPLFE TPLFE_EF_CALLERID;
MACRO_TPLFE TPLFE_EM_MNP;
MACRO_TPLFE TPLFE_EM_V42;
MACRO_TPLFE TPLFE_EX_BREAK;
MACRO_TPLFE TPLFE_EX_PLUS;
MACRO_TPLFE TPLFE_EX_UD;
MACRO_TPLFE TPLFE_FC_RX_HW;
MACRO_TPLFE TPLFE_FC_RX_XONOFF;
MACRO_TPLFE TPLFE_FC_TRANS;
MACRO_TPLFE TPLFE_FC_TX_HW;
MACRO_TPLFE TPLFE_FC_TX_XONOFF;
MACRO_TPLFE TPLFE_FM_V17;
MACRO_TPLFE TPLFE_FM_V21C2;
MACRO_TPLFE TPLFE_FM_V27TER;
MACRO_TPLFE TPLFE_FM_V29;
MACRO_TPLFE TPLFE_FM_V33;
MACRO_TPLFE TPLFE_FS_ECM;
MACRO_TPLFE TPLFE_FS_FTP;
MACRO_TPLFE TPLFE_FS_PASSWORD;
MACRO_TPLFE TPLFE_FS_POLLING;
MACRO_TPLFE TPLFE_FS_T3;
MACRO_TPLFE TPLFE_FS_T4;
MACRO_TPLFE TPLFE_FS_T6;
MACRO_TPLFE TPLFE_FS_VOICEREQ;
MACRO_TPLFE TPLFE_LAN_MEDIA_DIFFUSE_IR;
MACRO_TPLFE TPLFE_LAN_MEDIA_FIBER;
MACRO_TPLFE TPLFE_LAN_MEDIA_INHERENT;
MACRO_TPLFE TPLFE_LAN_MEDIA_PTP_IR;
MACRO_TPLFE TPLFE_LAN_MEDIA_SSR_2_4;
MACRO_TPLFE TPLFE_LAN_MEDIA_SSR_5_4;
MACRO_TPLFE TPLFE_LAN_MEDIA_SSR_902;
MACRO_TPLFE TPLFE_LAN_MEDIA_STP;
MACRO_TPLFE TPLFE_LAN_MEDIA_THICK_COAX;
MACRO_TPLFE TPLFE_LAN_MEDIA_THIN_COAX;
MACRO_TPLFE TPLFE_LAN_MEDIA_UTP;
MACRO_TPLFE TPLFE_LAN_TECH_ARCNET;
MACRO_TPLFE TPLFE_LAN_TECH_ATM;
MACRO_TPLFE TPLFE_LAN_TECH_ETHERNET;
MACRO_TPLFE TPLFE_LAN_TECH_FDDI;
MACRO_TPLFE TPLFE_LAN_TECH_LOCALTALK;
MACRO_TPLFE TPLFE_LAN_TECH_TOKENRING;
MACRO_TPLFE TPLFE_LAN_TECH_WIRELESS;
MACRO_TPLFE TPLFE_MS_BELL103;
MACRO_TPLFE TPLFE_MS_BELL212;
MACRO_TPLFE TPLFE_MS_V21;
MACRO_TPLFE TPLFE_MS_V22AB;
MACRO_TPLFE TPLFE_MS_V22BIS;
MACRO_TPLFE TPLFE_MS_V23;
MACRO_TPLFE TPLFE_MS_V26;
MACRO_TPLFE TPLFE_MS_V26BIS;
MACRO_TPLFE TPLFE_MS_V27BIS;
MACRO_TPLFE TPLFE_MS_V29;
MACRO_TPLFE TPLFE_MS_V32;
MACRO_TPLFE TPLFE_MS_V32BIS;
MACRO_TPLFE TPLFE_MS_VFAST;
MACRO_TPLFE TPLFE_NETWORK_INFO;
MACRO_TPLFE TPLFE_SUB_MODEM_COMMON;
MACRO_TPLFE TPLFE_SUB_MODEM_DATA;
MACRO_TPLFE TPLFE_SUB_MODEM_FAX;
MACRO_TPLFE TPLFE_SUB_SERIAL;
MACRO_TPLFE TPLFE_SUB_VOICE;
MACRO_TPLFE TPLFE_UA_16450;
MACRO_TPLFE TPLFE_UA_16550;
MACRO_TPLFE TPLFE_UA_8250;
MACRO_TPLFE TPLFE_UC_CS5;
MACRO_TPLFE TPLFE_UC_CS6;
MACRO_TPLFE TPLFE_UC_CS7;
MACRO_TPLFE TPLFE_UC_CS8;
MACRO_TPLFE TPLFE_UC_PARITY_EVEN;
MACRO_TPLFE TPLFE_UC_PARITY_MARK;
MACRO_TPLFE TPLFE_UC_PARITY_ODD;
MACRO_TPLFE TPLFE_UC_PARITY_SPACE;
MACRO_TPLFE TPLFE_UC_STOP_1;
MACRO_TPLFE TPLFE_UC_STOP_15;
MACRO_TPLFE TPLFE_UC_STOP_2;
MACRO_TPLFMTEDC TPLFMTEDC_CKSUM;
MACRO_TPLFMTEDC TPLFMTEDC_CRC;
MACRO_TPLFMTEDC TPLFMTEDC_NONE;
MACRO_TPLFMTEDC TPLFMTEDC_PCC;
MACRO_TPLFMTEDC TPLFMTEDC_VS;
MACRO_TPLFMTFLAGS TPLFMTFLAGS_ADDR;
MACRO_TPLFMTFLAGS TPLFMTFLAGS_AUTO;
MACRO_TPLFMTTYPE TPLFMTTYPE_DISK;
MACRO_TPLFMTTYPE TPLFMTTYPE_MEM;
MACRO_TPLFMTTYPE TPLFMTTYPE_VS;
MACRO_TPLFUNC TPLFUNC_AIMS;
MACRO_TPLFUNC TPLFUNC_FIXED;
MACRO_TPLFUNC TPLFUNC_LAN;
MACRO_TPLFUNC TPLFUNC_MEMORY;
MACRO_TPLFUNC TPLFUNC_MULTI;
MACRO_TPLFUNC TPLFUNC_PARALLEL;
MACRO_TPLFUNC TPLFUNC_SCSI;
MACRO_TPLFUNC TPLFUNC_SECURITY;
MACRO_TPLFUNC TPLFUNC_SERIAL;
MACRO_TPLFUNC TPLFUNC_UNKNOWN;
MACRO_TPLFUNC TPLFUNC_VENDOR_SPECIFIC;
MACRO_TPLFUNC TPLFUNC_VIDEO;
MACRO_TPLINIT TPLINIT_POST;
MACRO_TPLINIT TPLINIT_ROM;
MACRO_TPROTO TPROTO;
MACRO_TPROVMISMATCH TPROVMISMATCH;
MACRO_TP_BSIZE TP_BSIZE;
MACRO_TP TP_CHANGEBIND;
MACRO_TP TP_CHKPT;
MACRO_TP TP_EXITLWP;
MACRO_TP TP_HOLDLWP;
MACRO_TP TP_LWPEXIT;
MACRO_TP TP_MSACCT;
MACRO_TP_NINDIR TP_NINDIR;
MACRO_TP TP_PAUSE;
MACRO_TP TP_PRSTOP;
MACRO_TP TP_PRVSTOP;
MACRO_TP TP_STOPPING;
MACRO_TP TP_TWAIT;
MACRO_TP TP_WATCHPT;
MACRO_TQFULL TQFULL;
MACRO_TRANSFER TRANSFER_TIMEOUT;
MACRO_CONTINUE TRANSIENT;
MACRO_CARTRIDGE TRANSLATE_LBA_CMD;
MACRO_FLUSHDATA TRANSPARENT;
MACRO_TRAN TRAN_ACCEPT;
MACRO_TRAN TRAN_BADPKT;
MACRO_TRAN TRAN_BUSY;
MACRO_TRAN TRAN_FATAL_ERROR;
MACRO_TRAPTR TRAPTR_FIRST;
MACRO_TRAPTR TRAPTR_LIMIT;
MACRO_TRAPTR TRAPTR_NEXT;
MACRO_TRAPTR TRAPTR_SIZE_SHIFT;
MACRO_TRAP TRAP_BRKPT;
MACRO_TRAP_ENT TRAP_ENT_F1;
MACRO_TRAP_ENT TRAP_ENT_F2;
MACRO_TRAP_ENT TRAP_ENT_G7;
MACRO_TRAP_ENT TRAP_ENT_PC;
MACRO_TRAP_ENT TRAP_ENT_PSR;
MACRO_TRAP_ENT TRAP_ENT_SIZE;
MACRO_TRAP_ENT TRAP_ENT_SP;
MACRO_TRAP_ENT TRAP_ENT_TBR;
MACRO_TRAP_ENT TRAP_ENT_TR;
MACRO_TRAP TRAP_RWATCH;
MACRO_TRAP TRAP_TRACE;
MACRO_TRAP_ENT TRAP_TSIZE;
MACRO_TRAP TRAP_WWATCH;
MACRO_TRAP TRAP_XWATCH;
MACRO_TRESADDR TRESADDR;
MACRO_TRESQLEN TRESQLEN;
MACRO_TRS TRS_INVALID;
MACRO_TRS TRS_LWPID;
MACRO_TRS TRS_NONVOLATILE;
MACRO_TRS TRS_VALID;
MACRO_BOOL TRUE;
MACRO_INVERT TRXD_IS_INVERT;
MACRO_INVERT TRXD_NO_INVERT;
MACRO_TRY TRY_AGAIN;
MACRO_TR_FAC TR_ABS_TIME;
MACRO_TR_FAC TR_ACTIVE_CHAIN;
MACRO_TR_FAC TR_AE_ADDUDIND_END;
MACRO_TR_FAC TR_AE_ADDUDIND_START;
MACRO_TR_FAC TR_AE_CLOSE;
MACRO_TR_FAC TR_AE_FREEBUF_END;
MACRO_TR_FAC TR_AE_FREEBUF_START;
MACRO_TR_FAC TR_AE_GETBUF_END;
MACRO_TR_FAC TR_AE_GETBUF_START;
MACRO_TR_FAC TR_AE_INIT_END;
MACRO_TR_FAC TR_AE_INIT_START;
MACRO_TR_FAC TR_AE_INTR_END;
MACRO_TR_FAC TR_AE_INTR_START;
MACRO_TR_FAC TR_AE_OPEN;
MACRO_TR_FAC TR_AE_PROTO_END;
MACRO_TR_FAC TR_AE_PROTO_IN;
MACRO_TR_FAC TR_AE_PROTO_OUT;
MACRO_TR_FAC TR_AE_PROTO_START;
MACRO_TR_FAC TR_AE_READ_END;
MACRO_TR_FAC TR_AE_READ_START;
MACRO_TR_FAC TR_AE_SENDUP_END;
MACRO_TR_FAC TR_AE_SENDUP_START;
MACRO_TR_FAC TR_AE_START_END;
MACRO_TR_FAC TR_AE_START_START;
MACRO_TR_FAC TR_AE_WPUT_END;
MACRO_TR_FAC TR_AE_WPUT_START;
MACRO_TR_FAC TR_AE_WSRV_END;
MACRO_TR_FAC TR_AE_WSRV_START;
MACRO_TR_FAC TR_ANON_EXEC;
MACRO_TR_FAC TR_ANON_GETPAGE;
MACRO_TR_FAC TR_ANON_PRIVATE;
MACRO_TR_FAC TR_ANON_PROC;
MACRO_TR_FAC TR_ANON_SEGKP;
MACRO_TR_FAC TR_ANON_SHM;
MACRO_TR_FAC TR_ANON_SWAP;
MACRO_TR_FAC TR_ANON_TMPFS;
MACRO_TR_FAC TR_ARP_CLOSE;
MACRO_TR_FAC TR_ARP_OPEN;
MACRO_TR_FAC TR_ARP_RPUT_END;
MACRO_TR_FAC TR_ARP_RPUT_START;
MACRO_TR_FAC TR_ARP_WPUT_END;
MACRO_TR_FAC TR_ARP_WPUT_START;
MACRO_TR_FAC TR_ARP_WSRV_END;
MACRO_TR_FAC TR_ARP_WSRV_START;
MACRO_TR_NONE TR_ASCII;
MACRO_TR_FAC TR_AS_FAULT_END;
MACRO_TR_FAC TR_AS_FAULT_START;
MACRO_TR_FAC TR_AS_INFO;
MACRO_TR_FAC TR_BACKGROUND_AWAKE;
MACRO_TR_FAC TR_BACKGROUND_DONE;
MACRO_TR_FAC TR_BACKGROUND_DQ;
MACRO_TR_FAC TR_BACKQ;
MACRO_TR_FAC TR_BCANPUT_IN;
MACRO_TR_FAC TR_BCANPUT_OUT;
MACRO_TR_FAC TR_BCOPY_START;
MACRO_TR_FAC TR_BE_ADDUDIND_END;
MACRO_TR_FAC TR_BE_ADDUDIND_START;
MACRO_TR_FAC TR_BE_CLOSE;
MACRO_TR_FAC TR_BE_FREEBUF_END;
MACRO_TR_FAC TR_BE_FREEBUF_START;
MACRO_TR_FAC TR_BE_GETBUF_END;
MACRO_TR_FAC TR_BE_GETBUF_START;
MACRO_TR_FAC TR_BE_INIT_END;
MACRO_TR_FAC TR_BE_INIT_START;
MACRO_TR_FAC TR_BE_INTR_END;
MACRO_TR_FAC TR_BE_INTR_START;
MACRO_TR_FAC TR_BE_OPEN;
MACRO_TR_FAC TR_BE_PROTO_END;
MACRO_TR_FAC TR_BE_PROTO_IN;
MACRO_TR_FAC TR_BE_PROTO_OUT;
MACRO_TR_FAC TR_BE_PROTO_START;
MACRO_TR_FAC TR_BE_READ_END;
MACRO_TR_FAC TR_BE_READ_START;
MACRO_TR_FAC TR_BE_SENDUP_END;
MACRO_TR_FAC TR_BE_SENDUP_START;
MACRO_TR_FAC TR_BE_START_END;
MACRO_TR_FAC TR_BE_START_START;
MACRO_TR_FAC TR_BE_WPUT_END;
MACRO_TR_FAC TR_BE_WPUT_START;
MACRO_TR_FAC TR_BE_WSRV_END;
MACRO_TR_FAC TR_BE_WSRV_START;
MACRO_TR_FAC TR_CALLOUT_END;
MACRO_TR_FAC TR_CALLOUT_START;
MACRO_TR_CANNOT TR_CAN;
MACRO_TR_CANNOT TR_CANNOT;
MACRO_TR_FAC TR_CANPUTNEXT_IN;
MACRO_TR_FAC TR_CANPUTNEXT_OUT;
MACRO_TR_FAC TR_CANPUT_IN;
MACRO_TR_FAC TR_CANPUT_OUT;
MACRO_TR_FAC TR_CHOOSE_SWAPIN;
MACRO_TR_FAC TR_CHOOSE_SWAPOUT;
MACRO_TR_FAC TR_CLOCK_FREQUENCY;
MACRO_TR_FAC TR_CMN_DISPATCH_END;
MACRO_TR_FAC TR_CMN_DISPATCH_START;
MACRO_TR_FAC TR_CMN_PROC_END;
MACRO_TR_FAC TR_CMN_PROC_START;
MACRO_TR_FAC TR_CONTROL_TTY;
MACRO_TR_FAC TR_COPYIN_FAULT;
MACRO_TR_FAC TR_COPYIN_NOERR_START;
MACRO_TR_FAC TR_COPYIN_START;
MACRO_TR_FAC TR_COPYOUT_FAULT;
MACRO_TR_FAC TR_COPYOUT_NOERR_START;
MACRO_TR_FAC TR_COPYOUT_START;
MACRO_TR_FAC TR_COPY_END;
MACRO_TR_FAC TR_COPY_FAULT;
MACRO_TR_FAC TR_CPU;
MACRO_TR_FAC TR_CPU_CHOOSE;
MACRO_TR_FAC TR_CPU_RESCHED;
MACRO_TR_FAC TR_CPU_SURRENDER;
MACRO_TR_FAC TR_C_TRAP_HANDLER_ENTER;
MACRO_TR_FAC TR_C_TRAP_HANDLER_EXIT;
MACRO_TR_FAC TR_DATA_16;
MACRO_TR_FAC TR_DATA_32;
MACRO_TR_FAC TR_DATA_4;
MACRO_TR_FAC TR_DATA_64;
MACRO_TR_FAC TR_DATA_8;
MACRO_TR_DATA TR_DATA_MAX;
MACRO_TR_DATA TR_DATA_MIN;
MACRO_TR_FAC TR_DCASTART_SMALL_WINDOW_START;
MACRO_TR_FAC TR_DCDDONE_BIODONE_CALL;
MACRO_TR_FAC TR_DCDDONE_END;
MACRO_TR_FAC TR_DCDINTR_COMMAND_DONE_END;
MACRO_TR_FAC TR_DCDINTR_END;
MACRO_TR_FAC TR_DCDINTR_START;
MACRO_TR_FAC TR_DCDONE_START;
MACRO_TR_FAC TR_DCDRUNOUT_END;
MACRO_TR_FAC TR_DCDRUNOUT_START;
MACRO_TR_FAC TR_DCDSTART_END;
MACRO_TR_FAC TR_DCDSTART_NO_RESOURCES_END;
MACRO_TR_FAC TR_DCDSTART_NO_WORK_END;
MACRO_TR_FAC TR_DCDSTART_SMALL_WINDOW_END;
MACRO_TR_FAC TR_DCDSTART_START;
MACRO_TR_FAC TR_DCDSTRATEGY_DISKSORT_END;
MACRO_TR_FAC TR_DCDSTRATEGY_DISKSORT_START;
MACRO_TR_FAC TR_DCDSTRATEGY_END;
MACRO_TR_FAC TR_DCDSTRATEGY_SMALL_WINDOW_END;
MACRO_TR_FAC TR_DCDSTRATEGY_SMALL_WINDOW_START;
MACRO_TR_FAC TR_DCDSTRATEGY_START;
MACRO_TR_FAC TR_DCD_CHECK_ERROR_END;
MACRO_TR_FAC TR_DCD_CHECK_ERROR_START;
MACRO_TR_FAC TR_DDI_DMA_BUF_SETUP_END;
MACRO_TR_FAC TR_DDI_DMA_BUF_SETUP_START;
MACRO_TR_FAC TR_DESPERATE;
MACRO_TR_FAC TR_DEVMAP_ADVISE;
MACRO_TR_FAC TR_DEVMAP_CHECKPROT;
MACRO_TR_FAC TR_DEVMAP_CTXTO;
MACRO_TR_FAC TR_DEVMAP_CTX_RELE;
MACRO_TR_FAC TR_DEVMAP_CTX_RELE_CK1;
MACRO_TR_FAC TR_DEVMAP_DEFAULT_ACCESS;
MACRO_TR_FAC TR_DEVMAP_DEVICE;
MACRO_TR_FAC TR_DEVMAP_DEVMEM_REMAP;
MACRO_TR_FAC TR_DEVMAP_DEVMEM_SETUP;
MACRO_TR_FAC TR_DEVMAP_DO_CTXMGT;
MACRO_TR_FAC TR_DEVMAP_DO_CTXMGT_CK1;
MACRO_TR_FAC TR_DEVMAP_DO_CTXMGT_CK2;
MACRO_TR_FAC TR_DEVMAP_DO_CTXMGT_CK3;
MACRO_TR_FAC TR_DEVMAP_DO_CTXMGT_CK4;
MACRO_TR_FAC TR_DEVMAP_DUMP;
MACRO_TR_FAC TR_DEVMAP_DUP;
MACRO_TR_FAC TR_DEVMAP_DUP_CK1;
MACRO_TR_FAC TR_DEVMAP_FAULT;
MACRO_TR_FAC TR_DEVMAP_FAULTA;
MACRO_TR_FAC TR_DEVMAP_FAULTPAGE;
MACRO_TR_FAC TR_DEVMAP_FAULTPAGES;
MACRO_TR_FAC TR_DEVMAP_FAULTPAGE_CK1;
MACRO_TR_FAC TR_DEVMAP_FAULT_CK1;
MACRO_TR_FAC TR_DEVMAP_FIND_HANDLE;
MACRO_TR_FAC TR_DEVMAP_FREE;
MACRO_TR_FAC TR_DEVMAP_GETMEMID;
MACRO_TR_FAC TR_DEVMAP_GETOFFSET;
MACRO_TR_FAC TR_DEVMAP_GETPROT;
MACRO_TR_FAC TR_DEVMAP_GETTYPE;
MACRO_TR_FAC TR_DEVMAP_GETVP;
MACRO_TR_FAC TR_DEVMAP_GET_LARGE_PGSIZE;
MACRO_TR_FAC TR_DEVMAP_INCORE;
MACRO_TR_FAC TR_DEVMAP_LOAD;
MACRO_TR_FAC TR_DEVMAP_LOCKOP;
MACRO_TR_FAC TR_DEVMAP_PAGELOCK;
MACRO_TR_FAC TR_DEVMAP_ROUNDUP;
MACRO_TR_FAC TR_DEVMAP_ROUNDUP_CK1;
MACRO_TR_FAC TR_DEVMAP_ROUNDUP_CK2;
MACRO_TR_FAC TR_DEVMAP_SEGDEV_BADOP;
MACRO_TR_FAC TR_DEVMAP_SEGMAP;
MACRO_TR_FAC TR_DEVMAP_SEGMAP_SETUP;
MACRO_TR_FAC TR_DEVMAP_SETPROT;
MACRO_TR_FAC TR_DEVMAP_SETPROT_CK1;
MACRO_TR_FAC TR_DEVMAP_SETUP;
MACRO_TR_FAC TR_DEVMAP_SET_CTX_TIMEOUT;
MACRO_TR_FAC TR_DEVMAP_SOFTLOCK_INIT;
MACRO_TR_FAC TR_DEVMAP_SOFTLOCK_RELE;
MACRO_TR_FAC TR_DEVMAP_SOFTUNLOCK;
MACRO_TR_FAC TR_DEVMAP_SYNC;
MACRO_TR_FAC TR_DEVMAP_UMEM_ALLOC;
MACRO_TR_FAC TR_DEVMAP_UMEM_FREE;
MACRO_TR_FAC TR_DEVMAP_UMEM_REMAP;
MACRO_TR_FAC TR_DEVMAP_UMEM_SETUP;
MACRO_TR_FAC TR_DEVMAP_UNLOAD;
MACRO_TR_FAC TR_DEVMAP_UNMAP;
MACRO_TR_FAC TR_DEVMAP_UNMAP_CK1;
MACRO_TR_FAC TR_DEVMAP_UNMAP_CK2;
MACRO_TR_FAC TR_DEVMAP_UNMAP_CK3;
MACRO_TR_FAC TR_DISP_END;
MACRO_TR_FAC TR_DISP_START;
MACRO_TR_FAC TR_DNLC_ENTER_END;
MACRO_TR_FAC TR_DNLC_ENTER_START;
MACRO_TR_FAC TR_DNLC_LOOKUP_END;
MACRO_TR_FAC TR_DNLC_LOOKUP_START;
MACRO_TR_FAC TR_DQ_SERVICE;
MACRO_TR_FAC TR_DRAIN_SYNCQ_END;
MACRO_TR_FAC TR_DRAIN_SYNCQ_PUT;
MACRO_TR_FAC TR_DRAIN_SYNCQ_START;
MACRO_TR TR_Dialout;
MACRO_TR_FAC TR_ELAPSED_TIME;
MACRO_TR_FAC TR_END;
MACRO_TR_FAC TR_ESPSVC_ACTION_CALL;
MACRO_TR_FAC TR_ESPSVC_END;
MACRO_TR_FAC TR_ESPSVC_START;
MACRO_TR_FAC TR_ESP_ALLOC_TAG_END;
MACRO_TR_FAC TR_ESP_ALLOC_TAG_START;
MACRO_TR_FAC TR_ESP_CALLBACK_END;
MACRO_TR_FAC TR_ESP_CALLBACK_START;
MACRO_TR_FAC TR_ESP_CALL_PKT_COMP_END;
MACRO_TR_FAC TR_ESP_CALL_PKT_COMP_RETURN1_END;
MACRO_TR_FAC TR_ESP_CALL_PKT_COMP_RETURN2_END;
MACRO_TR_FAC TR_ESP_CALL_PKT_COMP_START;
MACRO_TR_FAC TR_ESP_DOPOLL_END;
MACRO_TR_FAC TR_ESP_DOPOLL_START;
MACRO_TR_FAC TR_ESP_EMPTY_STARTQ_END;
MACRO_TR_FAC TR_ESP_EMPTY_STARTQ_START;
MACRO_TR_FAC TR_ESP_FINISH_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_ACTION1_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_ACTION2_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_ACTION3_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_FINISH_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_RESET1_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_RESET2_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_RESET3_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_RETURN1_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_RETURN2_END;
MACRO_TR_FAC TR_ESP_FINISH_SELECT_START;
MACRO_TR_FAC TR_ESP_FINISH_START;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_ABORT_END;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_END;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_FINRST_END;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_LINKED_CMD_END;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_RETURN1_END;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_RETURN2_END;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_RETURN3_END;
MACRO_TR_FAC TR_ESP_HANDLE_CLEARING_START;
MACRO_TR_FAC TR_ESP_HANDLE_CMD_DONE_ABORT1_END;
MACRO_TR_FAC TR_ESP_HANDLE_CMD_DONE_ABORT2_END;
MACRO_TR_FAC TR_ESP_HANDLE_CMD_DONE_END;
MACRO_TR_FAC TR_ESP_HANDLE_CMD_DONE_START;
MACRO_TR_FAC TR_ESP_HANDLE_CMD_START_ABORT_CMD_END;
MACRO_TR_FAC TR_ESP_HANDLE_CMD_START_END;
MACRO_TR_FAC TR_ESP_HANDLE_CMD_START_START;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_ACTION1_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_ACTION2_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_ACTION3_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_ACTION4_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_ACTION5_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_FINRST_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_PHASEMANAGE_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_RETURN1_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_RETURN2_END;
MACRO_TR_FAC TR_ESP_HANDLE_C_CMPLT_START;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_ABORT1_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_ABORT2_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_ABORT3_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_DONE_ACTION1_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_DONE_ACTION2_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_DONE_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_DONE_PHASEMANAGE_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_DONE_RESET_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_DONE_START;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_END;
MACRO_TR_FAC TR_ESP_HANDLE_DATA_START;
MACRO_TR_FAC TR_ESP_HANDLE_MORE_MSGIN_RETURN1_END;
MACRO_TR_FAC TR_ESP_HANDLE_MORE_MSGIN_RETURN2_END;
MACRO_TR_FAC TR_ESP_HANDLE_MORE_MSGIN_START;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_DONE_ACTION_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_DONE_FINRST_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_DONE_PHASEMANAGE_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_DONE_RETURN1_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_DONE_RETURN2_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_DONE_SNDMSG_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_DONE_START;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_IN_START;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_OUT_DONE_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_OUT_DONE_FINISH_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_OUT_DONE_PHASEMANAGE_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_OUT_DONE_START;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_OUT_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_OUT_PHASEMANAGE_END;
MACRO_TR_FAC TR_ESP_HANDLE_MSG_OUT_START;
MACRO_TR_FAC TR_ESP_HANDLE_SELECTION_END;
MACRO_TR_FAC TR_ESP_HANDLE_SELECTION_START;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_INT_DISCON_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_PHASE_CMD_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_PHASE_DATA_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_PHASE_MSG_IN_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_PHASE_MSG_OUT_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_PHASE_STATUS_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_RESET_END;
MACRO_TR_FAC TR_ESP_HANDLE_UNKNOWN_START;
MACRO_TR_FAC TR_ESP_HDATAD_END;
MACRO_TR_FAC TR_ESP_HDATAD_START;
MACRO_TR_FAC TR_ESP_HDATA_END;
MACRO_TR_FAC TR_ESP_HDATA_START;
MACRO_TR_FAC TR_ESP_INIT_CMD_END;
MACRO_TR_FAC TR_ESP_INIT_CMD_START;
MACRO_TR_FAC TR_ESP_ISTART_END;
MACRO_TR_FAC TR_ESP_ISTART_START;
MACRO_TR_FAC TR_ESP_PHASEMANAGE_CALL;
MACRO_TR_FAC TR_ESP_PHASEMANAGE_END;
MACRO_TR_FAC TR_ESP_PHASEMANAGE_START;
MACRO_TR_FAC TR_ESP_POLL_END;
MACRO_TR_FAC TR_ESP_POLL_LOOP_END;
MACRO_TR_FAC TR_ESP_POLL_LOOP_START;
MACRO_TR_FAC TR_ESP_POLL_START;
MACRO_TR_FAC TR_ESP_POLL_SUN4D_END;
MACRO_TR_FAC TR_ESP_POLL_SUN4D_START;
MACRO_TR_FAC TR_ESP_PREPARE_PKT_START;
MACRO_TR_FAC TR_ESP_PREPARE_PKT_TRAN_ACCEPT_END;
MACRO_TR_FAC TR_ESP_PREPARE_PKT_TRAN_BADPKT_END;
MACRO_TR_FAC TR_ESP_RECONNECT_F1_END;
MACRO_TR_FAC TR_ESP_RECONNECT_F2_END;
MACRO_TR_FAC TR_ESP_RECONNECT_F3_END;
MACRO_TR_FAC TR_ESP_RECONNECT_PHASEMANAGE_END;
MACRO_TR_FAC TR_ESP_RECONNECT_RESET1_END;
MACRO_TR_FAC TR_ESP_RECONNECT_RESET2_END;
MACRO_TR_FAC TR_ESP_RECONNECT_RESET3_END;
MACRO_TR_FAC TR_ESP_RECONNECT_RESET4_END;
MACRO_TR_FAC TR_ESP_RECONNECT_RESET5_END;
MACRO_TR_FAC TR_ESP_RECONNECT_RETURN1_END;
MACRO_TR_FAC TR_ESP_RECONNECT_RETURN2_END;
MACRO_TR_FAC TR_ESP_RECONNECT_SEARCH_END;
MACRO_TR_FAC TR_ESP_RECONNECT_START;
MACRO_TR_FAC TR_ESP_RUNPOLL_END;
MACRO_TR_FAC TR_ESP_RUNPOLL_START;
MACRO_TR_FAC TR_ESP_SCSI_IMPL_DMAFREE_END;
MACRO_TR_FAC TR_ESP_SCSI_IMPL_DMAFREE_START;
MACRO_TR_FAC TR_ESP_SCSI_IMPL_PKTALLOC_END;
MACRO_TR_FAC TR_ESP_SCSI_IMPL_PKTALLOC_START;
MACRO_TR_FAC TR_ESP_SCSI_IMPL_PKTFREE_END;
MACRO_TR_FAC TR_ESP_SCSI_IMPL_PKTFREE_START;
MACRO_TR_FAC TR_ESP_STARTCMD_ALLOC_TAG1_END;
MACRO_TR_FAC TR_ESP_STARTCMD_ALLOC_TAG2_END;
MACRO_TR_FAC TR_ESP_STARTCMD_END;
MACRO_TR_FAC TR_ESP_STARTCMD_PREEMPT_CALL;
MACRO_TR_FAC TR_ESP_STARTCMD_RE_SELECTION_END;
MACRO_TR_FAC TR_ESP_STARTCMD_START;
MACRO_TR_FAC TR_ESP_START_END;
MACRO_TR_FAC TR_ESP_START_PREPARE_PKT_END;
MACRO_TR_FAC TR_ESP_START_START;
MACRO_TR_FAC TR_ESP_USTART_DEFAULT_END;
MACRO_TR_FAC TR_ESP_USTART_END;
MACRO_TR_FAC TR_ESP_USTART_NOT_FOUND_END;
MACRO_TR_FAC TR_ESP_USTART_START;
MACRO_TR_FAC TR_ESP_WATCH_END;
MACRO_TR_FAC TR_ESP_WATCH_START;
MACRO_TR_NONE TR_EVENT;
MACRO_TR_FAC TR_EXECMAP_NO_PREREAD;
MACRO_TR_FAC TR_EXECMAP_PREREAD;
MACRO_TR_FAC TR_FAC_AE;
MACRO_TR_FAC TR_FAC_ARP;
MACRO_TR_FAC TR_FAC_BCOPY;
MACRO_TR_FAC TR_FAC_BE;
MACRO_TR_FAC TR_FAC_CALLOUT;
MACRO_TR_FAC TR_FAC_DADA;
MACRO_TR_FAC TR_FAC_DDI;
MACRO_TR_FAC TR_FAC_DEVMAP;
MACRO_TR_FAC TR_FAC_DISP;
MACRO_TR_FAC TR_FAC_FIFO;
MACRO_TR_FAC TR_FAC_IA;
MACRO_TR_FAC TR_FAC_INTR;
MACRO_TR_FAC TR_FAC_IP;
MACRO_TR_FAC TR_FAC_IPI;
MACRO_TR_FAC TR_FAC_KMEM;
MACRO_TR_FAC TR_FAC_KRPC;
MACRO_TR_FAC TR_FAC_LE;
MACRO_TR_FAC TR_FAC_LOCK;
MACRO_TR_FAC TR_FAC_LWP;
MACRO_TR_FAC TR_FAC_META;
MACRO_TR_FAC TR_FAC_NFS;
MACRO_TR_FAC TR_FAC_PHYSIO;
MACRO_TR_FAC TR_FAC_PROC;
MACRO_TR_FAC TR_FAC_QE;
MACRO_TR_FAC TR_FAC_RLOGINP;
MACRO_TR_FAC TR_FAC_S5;
MACRO_TR_FAC TR_FAC_SCHED;
MACRO_TR_FAC TR_FAC_SCSI;
MACRO_TR_FAC TR_FAC_SCSI_FAS;
MACRO_TR_FAC TR_FAC_SCSI_ISP;
MACRO_TR_FAC TR_FAC_SCSI_RES;
MACRO_TR_FAC TR_FAC_SOCKFS;
MACRO_TR_FAC TR_FAC_SOCKMOD;
MACRO_TR_FAC TR_FAC_SPECFS;
MACRO_TR_FAC TR_FAC_STREAMS_FR;
MACRO_TR_FAC TR_FAC_STREAMS_MOD;
MACRO_TR_FAC TR_FAC_SWAPFS;
MACRO_TR_FAC TR_FAC_SYSCALL;
MACRO_TR_FAC TR_FAC_SYS_LWP;
MACRO_TR_FAC TR_FAC_TCP;
MACRO_TR_FAC TR_FAC_TEST;
MACRO_TR_FAC TR_FAC_TMPFS;
MACRO_TR_FAC TR_FAC_TRACE;
MACRO_TR_FAC TR_FAC_TRAP;
MACRO_TR_FAC TR_FAC_UDP;
MACRO_TR_FAC TR_FAC_UFS;
MACRO_TR_FAC TR_FAC_VM;
MACRO_TR_FAC TR_FASSVC_ACTION_CALL;
MACRO_TR_FAC TR_FASSVC_END;
MACRO_TR_FAC TR_FASSVC_START;
MACRO_TR_FAC TR_FAS_ALLOC_TAG_END;
MACRO_TR_FAC TR_FAS_ALLOC_TAG_START;
MACRO_TR_FAC TR_FAS_CALL_PKT_COMP_END;
MACRO_TR_FAC TR_FAS_CALL_PKT_COMP_START;
MACRO_TR_FAC TR_FAS_DOPOLL_END;
MACRO_TR_FAC TR_FAS_DOPOLL_START;
MACRO_TR_FAC TR_FAS_EMPTY_CALLBACKQ_END;
MACRO_TR_FAC TR_FAS_EMPTY_CALLBACKQ_START;
MACRO_TR_FAC TR_FAS_EMPTY_WAITQ_END;
MACRO_TR_FAC TR_FAS_EMPTY_WAITQ_START;
MACRO_TR_FAC TR_FAS_FINISH_END;
MACRO_TR_FAC TR_FAS_FINISH_SELECT_ACTION3_END;
MACRO_TR_FAC TR_FAS_FINISH_SELECT_FINISH_END;
MACRO_TR_FAC TR_FAS_FINISH_SELECT_RESET1_END;
MACRO_TR_FAC TR_FAS_FINISH_SELECT_RESET2_END;
MACRO_TR_FAC TR_FAS_FINISH_SELECT_RESET3_END;
MACRO_TR_FAC TR_FAS_FINISH_SELECT_START;
MACRO_TR_FAC TR_FAS_FINISH_START;
MACRO_TR_FAC TR_FAS_HANDLE_CLEARING_ABORT_END;
MACRO_TR_FAC TR_FAS_HANDLE_CLEARING_END;
MACRO_TR_FAC TR_FAS_HANDLE_CLEARING_FINRST_END;
MACRO_TR_FAC TR_FAS_HANDLE_CLEARING_RETURN1_END;
MACRO_TR_FAC TR_FAS_HANDLE_CLEARING_RETURN2_END;
MACRO_TR_FAC TR_FAS_HANDLE_CLEARING_RETURN3_END;
MACRO_TR_FAC TR_FAS_HANDLE_CLEARING_START;
MACRO_TR_FAC TR_FAS_HANDLE_CMD_DONE_ABORT1_END;
MACRO_TR_FAC TR_FAS_HANDLE_CMD_DONE_END;
MACRO_TR_FAC TR_FAS_HANDLE_CMD_DONE_START;
MACRO_TR_FAC TR_FAS_HANDLE_CMD_START_END;
MACRO_TR_FAC TR_FAS_HANDLE_CMD_START_START;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_ACTION1_END;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_ACTION2_END;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_ACTION3_END;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_ACTION4_END;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_ACTION5_END;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_FINRST_END;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_RETURN1_END;
MACRO_TR_FAC TR_FAS_HANDLE_C_CMPLT_START;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_ABORT1_END;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_ABORT2_END;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_DONE_ACTION1_END;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_DONE_ACTION2_END;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_DONE_PHASEMANAGE_END;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_DONE_RESET_END;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_DONE_START;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_END;
MACRO_TR_FAC TR_FAS_HANDLE_DATA_START;
MACRO_TR_FAC TR_FAS_HANDLE_MORE_MSGIN_RETURN1_END;
MACRO_TR_FAC TR_FAS_HANDLE_MORE_MSGIN_RETURN2_END;
MACRO_TR_FAC TR_FAS_HANDLE_MORE_MSGIN_START;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_DONE_ACTION_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_DONE_FINRST_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_DONE_PHASEMANAGE_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_DONE_RETURN1_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_DONE_RETURN2_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_DONE_SNDMSG_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_DONE_START;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_IN_START;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_OUT_DONE_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_OUT_DONE_FINISH_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_OUT_DONE_PHASEMANAGE_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_OUT_DONE_START;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_OUT_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_OUT_PHASEMANAGE_END;
MACRO_TR_FAC TR_FAS_HANDLE_MSG_OUT_START;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_INT_DISCON_END;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_PHASE_CMD_END;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_PHASE_DATA_END;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_PHASE_MSG_IN_END;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_PHASE_MSG_OUT_END;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_PHASE_STATUS_END;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_RESET_END;
MACRO_TR_FAC TR_FAS_HANDLE_UNKNOWN_START;
MACRO_TR_FAC TR_FAS_ISTART_END;
MACRO_TR_FAC TR_FAS_ISTART_START;
MACRO_TR_FAC TR_FAS_PHASEMANAGE_CALL;
MACRO_TR_FAC TR_FAS_PHASEMANAGE_END;
MACRO_TR_FAC TR_FAS_PHASEMANAGE_START;
MACRO_TR_FAC TR_FAS_POLL_END;
MACRO_TR_FAC TR_FAS_POLL_START;
MACRO_TR_FAC TR_FAS_PREPARE_PKT_TRAN_ACCEPT_END;
MACRO_TR_FAC TR_FAS_PREPARE_PKT_TRAN_BADPKT_END;
MACRO_TR_FAC TR_FAS_RECONNECT_F2_END;
MACRO_TR_FAC TR_FAS_RECONNECT_F3_END;
MACRO_TR_FAC TR_FAS_RECONNECT_PHASEMANAGE_END;
MACRO_TR_FAC TR_FAS_RECONNECT_RESET5_END;
MACRO_TR_FAC TR_FAS_RECONNECT_RETURN1_END;
MACRO_TR_FAC TR_FAS_RECONNECT_RETURN2_END;
MACRO_TR_FAC TR_FAS_RECONNECT_START;
MACRO_TR_FAC TR_FAS_RUNPOLL_END;
MACRO_TR_FAC TR_FAS_RUNPOLL_START;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_DMAFREE_END;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_DMAFREE_START;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_DMAGET_END;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_DMAGET_START;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_PKTALLOC_END;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_PKTALLOC_START;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_PKTFREE_END;
MACRO_TR_FAC TR_FAS_SCSI_IMPL_PKTFREE_START;
MACRO_TR_FAC TR_FAS_STARTCMD_END;
MACRO_TR_FAC TR_FAS_STARTCMD_START;
MACRO_TR_FAC TR_FAS_START_END;
MACRO_TR_FAC TR_FAS_START_PREPARE_PKT_END;
MACRO_TR_FAC TR_FAS_START_START;
MACRO_TR_FAC TR_FAS_USTART_END;
MACRO_TR_FAC TR_FAS_USTART_NOT_FOUND_END;
MACRO_TR_FAC TR_FAS_USTART_START;
MACRO_TR_FAC TR_FAS_WATCH_END;
MACRO_TR_FAC TR_FHTOVP_END;
MACRO_TR_FAC TR_FHTOVP_START;
MACRO_TR_FAC TR_FIFOREAD_IN;
MACRO_TR_FAC TR_FIFOREAD_OUT;
MACRO_TR_FAC TR_FIFOREAD_STREAM;
MACRO_TR_FAC TR_FIFOREAD_WAIT;
MACRO_TR_FAC TR_FIFOREAD_WAKE;
MACRO_TR_FAC TR_FIFOWRITE_IN;
MACRO_TR_FAC TR_FIFOWRITE_OUT;
MACRO_TR_FAC TR_FIFOWRITE_STREAM;
MACRO_TR_FAC TR_FIFOWRITE_WAIT;
MACRO_TR_FAC TR_FIFOWRITE_WAKE;
MACRO_TR_FAC TR_FILL_SYNCQ;
MACRO_TR_FAC TR_FINDEXPORT_END;
MACRO_TR_FAC TR_FINDEXPORT_START;
MACRO_TR_FAC TR_FRONTQ;
MACRO_TR_FAC TR_GROUP_OFF;
MACRO_TR_FAC TR_GROUP_ON;
MACRO_TR_FAC TR_HARDSWAP;
MACRO_TR_FAC TR_HAT_CLRMOD;
MACRO_TR_FAC TR_HAT_CLRREF;
MACRO_TR_FAC TR_HAT_CLRREFMOD;
MACRO_TR_FAC TR_HAT_SETMOD;
MACRO_TR_FAC TR_HAT_SETREF;
MACRO_TR_FAC TR_HAT_SETREFMOD;
MACRO_TR_FAC TR_HIGH_DEFICIT;
MACRO_TR_FAC TR_HME_ADD;
MACRO_TR_FAC TR_HME_SUB;
MACRO_TR_FAC TR_INSERTQ;
MACRO_TR_FAC TR_INTR_END;
MACRO_TR_FAC TR_INTR_EXIT;
MACRO_TR_FAC TR_INTR_PASSIVATE;
MACRO_TR_FAC TR_INTR_START;
MACRO_TR_FAC TR_IOCTL_ENTER;
MACRO_TR_FAC TR_IOMMUNEX_DMA_MAP_END;
MACRO_TR_FAC TR_IOMMUNEX_DMA_MAP_GETDVMAPAGES_END;
MACRO_TR_FAC TR_IOMMUNEX_DMA_MAP_GETDVMAPAGES_START;
MACRO_TR_FAC TR_IOMMUNEX_DMA_MAP_START;
MACRO_TR_FAC TR_IPI_GET_XFER_MODE;
MACRO_TR_FAC TR_IPI_INTR_1;
MACRO_TR_FAC TR_IPI_INTR_2;
MACRO_TR_FAC TR_IPI_INTR_ERR;
MACRO_TR_FAC TR_IPI_INTR_OK;
MACRO_TR_FAC TR_IPI_INTR_RESP;
MACRO_TR_FAC TR_IPI_IS_CMD;
MACRO_TR_FAC TR_IPI_POLL_1;
MACRO_TR_FAC TR_IPI_POLL_2;
MACRO_TR_FAC TR_IPI_RESET_BOARD;
MACRO_TR_FAC TR_IPI_RESET_CHAN;
MACRO_TR_FAC TR_IPI_RESET_SLAVE;
MACRO_TR_FAC TR_IPI_RETRY;
MACRO_TR_FAC TR_IPI_SET_XFER_MODE;
MACRO_TR_FAC TR_IPI_START;
MACRO_TR_FAC TR_IPI_TEST_BOARD;
MACRO_TR_FAC TR_IP_CKSUM_COPY_END;
MACRO_TR_FAC TR_IP_CKSUM_COPY_START;
MACRO_TR_FAC TR_IP_CKSUM_END;
MACRO_TR_FAC TR_IP_CKSUM_START;
MACRO_TR_FAC TR_IP_CLOSE;
MACRO_TR_FAC TR_IP_LRPUT_END;
MACRO_TR_FAC TR_IP_LRPUT_START;
MACRO_TR_FAC TR_IP_LWPUT_END;
MACRO_TR_FAC TR_IP_LWPUT_START;
MACRO_TR_FAC TR_IP_OPEN;
MACRO_TR_FAC TR_IP_RPUT_END;
MACRO_TR_FAC TR_IP_RPUT_LOCL_END;
MACRO_TR_FAC TR_IP_RPUT_LOCL_ERR;
MACRO_TR_FAC TR_IP_RPUT_LOCL_START;
MACRO_TR_FAC TR_IP_RPUT_START;
MACRO_TR_FAC TR_IP_RSRV_END;
MACRO_TR_FAC TR_IP_RSRV_START;
MACRO_TR_FAC TR_IP_WPUT_END;
MACRO_TR_FAC TR_IP_WPUT_FRAG_END;
MACRO_TR_FAC TR_IP_WPUT_FRAG_START;
MACRO_TR_FAC TR_IP_WPUT_IRE_END;
MACRO_TR_FAC TR_IP_WPUT_IRE_START;
MACRO_TR_FAC TR_IP_WPUT_LOCAL_END;
MACRO_TR_FAC TR_IP_WPUT_LOCAL_START;
MACRO_TR_FAC TR_IP_WPUT_START;
MACRO_TR_FAC TR_IP_WSRV_END;
MACRO_TR_FAC TR_IP_WSRV_START;
MACRO_TR_FAC TR_ISP_INTR_AGAIN;
MACRO_TR_FAC TR_ISP_INTR_ASYNC_END;
MACRO_TR_FAC TR_ISP_INTR_END;
MACRO_TR_FAC TR_ISP_INTR_EVENT_END;
MACRO_TR_FAC TR_ISP_INTR_INVALID_END;
MACRO_TR_FAC TR_ISP_INTR_LOOP_END;
MACRO_TR_FAC TR_ISP_INTR_LOOP_START;
MACRO_TR_FAC TR_ISP_INTR_MBOX_END;
MACRO_TR_FAC TR_ISP_INTR_NO_INTR_END;
MACRO_TR_FAC TR_ISP_INTR_NO_RESP_END;
MACRO_TR_FAC TR_ISP_INTR_PKT_END;
MACRO_TR_FAC TR_ISP_INTR_PKT_START;
MACRO_TR_FAC TR_ISP_INTR_Q_END;
MACRO_TR_FAC TR_ISP_INTR_Q_START;
MACRO_TR_FAC TR_ISP_INTR_START;
MACRO_TR_FAC TR_ISP_I_ASYNCH_EVENT_END;
MACRO_TR_FAC TR_ISP_I_ASYNCH_EVENT_START;
MACRO_TR_FAC TR_ISP_I_CALLBACK_END;
MACRO_TR_FAC TR_ISP_I_CALLBACK_START;
MACRO_TR_FAC TR_ISP_I_CALL_PKT_COMP_END;
MACRO_TR_FAC TR_ISP_I_CALL_PKT_COMP_START;
MACRO_TR_FAC TR_ISP_I_CMD_EVENT_END;
MACRO_TR_FAC TR_ISP_I_CMD_EVENT_START;
MACRO_TR_FAC TR_ISP_I_EMPTY_WAITQ_END;
MACRO_TR_FAC TR_ISP_I_EMPTY_WAITQ_START;
MACRO_TR_FAC TR_ISP_I_EVENT_END;
MACRO_TR_FAC TR_ISP_I_EVENT_RETURN_END;
MACRO_TR_FAC TR_ISP_I_EVENT_START;
MACRO_TR_FAC TR_ISP_I_FLAG_EVENT_END;
MACRO_TR_FAC TR_ISP_I_FLAG_EVENT_IGNORE_END;
MACRO_TR_FAC TR_ISP_I_FLAG_EVENT_START;
MACRO_TR_FAC TR_ISP_I_INIT_CMD_END;
MACRO_TR_FAC TR_ISP_I_INIT_CMD_START;
MACRO_TR_FAC TR_ISP_I_MBOX_CMD_COMPLETE_END;
MACRO_TR_FAC TR_ISP_I_MBOX_CMD_COMPLETE_START;
MACRO_TR_FAC TR_ISP_I_MBOX_CMD_START_END;
MACRO_TR_FAC TR_ISP_I_MBOX_CMD_START_START;
MACRO_TR_FAC TR_ISP_I_QFLUSH_END;
MACRO_TR_FAC TR_ISP_I_QFLUSH_START;
MACRO_TR_FAC TR_ISP_I_RESET_INIT_CHIP_END;
MACRO_TR_FAC TR_ISP_I_RESET_INIT_CHIP_START;
MACRO_TR_FAC TR_ISP_I_RESET_INTERFACE_END;
MACRO_TR_FAC TR_ISP_I_RESET_INTERFACE_START;
MACRO_TR_FAC TR_ISP_I_RESPONSE_ERROR_END;
MACRO_TR_FAC TR_ISP_I_RESPONSE_ERROR_START;
MACRO_TR_FAC TR_ISP_I_RUN_POLLED_CMD_END;
MACRO_TR_FAC TR_ISP_I_RUN_POLLED_CMD_START;
MACRO_TR_FAC TR_ISP_I_SEND_CMD_END;
MACRO_TR_FAC TR_ISP_I_SEND_CMD_START;
MACRO_TR_FAC TR_ISP_I_SET_MARKER_END;
MACRO_TR_FAC TR_ISP_I_SET_MARKER_START;
MACRO_TR_FAC TR_ISP_I_START_CMD_AFTER_SYNC;
MACRO_TR_FAC TR_ISP_I_START_CMD_END;
MACRO_TR_FAC TR_ISP_I_START_CMD_Q_FULL_END;
MACRO_TR_FAC TR_ISP_I_START_CMD_SLOT_ALLOC_END;
MACRO_TR_FAC TR_ISP_I_START_CMD_SLOT_ALLOC_START;
MACRO_TR_FAC TR_ISP_I_START_CMD_START;
MACRO_TR_FAC TR_ISP_I_TIMEOUT_END;
MACRO_TR_FAC TR_ISP_I_TIMEOUT_START;
MACRO_TR_FAC TR_ISP_I_WATCH_END;
MACRO_TR_FAC TR_ISP_I_WATCH_START;
MACRO_TR_FAC TR_ISP_SCAN_TIMEOUT_END;
MACRO_TR_FAC TR_ISP_SCAN_TIMEOUT_START;
MACRO_TR_FAC TR_ISP_SCSI_ABORT_END;
MACRO_TR_FAC TR_ISP_SCSI_ABORT_FALSE_END;
MACRO_TR_FAC TR_ISP_SCSI_ABORT_START;
MACRO_TR_FAC TR_ISP_SCSI_DMAFREE_END;
MACRO_TR_FAC TR_ISP_SCSI_DMAFREE_START;
MACRO_TR_FAC TR_ISP_SCSI_DMAGET_END;
MACRO_TR_FAC TR_ISP_SCSI_DMAGET_ERROR_END;
MACRO_TR_FAC TR_ISP_SCSI_DMAGET_START;
MACRO_TR_FAC TR_ISP_SCSI_GETCAP_END;
MACRO_TR_FAC TR_ISP_SCSI_GETCAP_START;
MACRO_TR_FAC TR_ISP_SCSI_PKTALLOC_END;
MACRO_TR_FAC TR_ISP_SCSI_PKTALLOC_START;
MACRO_TR_FAC TR_ISP_SCSI_PKTFREE_DONE;
MACRO_TR_FAC TR_ISP_SCSI_PKTFREE_END;
MACRO_TR_FAC TR_ISP_SCSI_PKTFREE_START;
MACRO_TR_FAC TR_ISP_SCSI_RESET_END;
MACRO_TR_FAC TR_ISP_SCSI_RESET_FALSE_END;
MACRO_TR_FAC TR_ISP_SCSI_RESET_START;
MACRO_TR_FAC TR_ISP_SCSI_SETCAP_END;
MACRO_TR_FAC TR_ISP_SCSI_SETCAP_START;
MACRO_TR_FAC TR_ISP_SCSI_START_BIG_CDB;
MACRO_TR_FAC TR_ISP_SCSI_START_DMA_END;
MACRO_TR_FAC TR_ISP_SCSI_START_DMA_START;
MACRO_TR_FAC TR_ISP_SCSI_START_END;
MACRO_TR_FAC TR_ISP_SCSI_START_START;
MACRO_TR_FAC TR_I_CANT_FIND;
MACRO_TR_FAC TR_I_LINK;
MACRO_TR_FAC TR_I_POP;
MACRO_TR_FAC TR_I_PUSH;
MACRO_TR_FAC TR_I_UNLINK;
MACRO_TR_FAC TR_KAS_INFO;
MACRO_TR_FAC TR_KCOPY_START;
MACRO_TR_FAC TR_KERNEL_WINDOW_OVERFLOW;
MACRO_TR_FAC TR_KERNEL_WINDOW_UNDERFLOW;
MACRO_TR_FAC TR_KMEM_ALLOC_END;
MACRO_TR_FAC TR_KMEM_ALLOC_START;
MACRO_TR_FAC TR_KMEM_ASYNC_DISPATCH_END;
MACRO_TR_FAC TR_KMEM_ASYNC_DISPATCH_START;
MACRO_TR_FAC TR_KMEM_ASYNC_SERVICE_END;
MACRO_TR_FAC TR_KMEM_ASYNC_SERVICE_START;
MACRO_TR_FAC TR_KMEM_CACHE_ALLOC_END;
MACRO_TR_FAC TR_KMEM_CACHE_ALLOC_START;
MACRO_TR_FAC TR_KMEM_CACHE_FREE_END;
MACRO_TR_FAC TR_KMEM_CACHE_FREE_START;
MACRO_TR_FAC TR_KMEM_FREEPAGES_END;
MACRO_TR_FAC TR_KMEM_FREEPAGES_START;
MACRO_TR_FAC TR_KMEM_FREE_END;
MACRO_TR_FAC TR_KMEM_FREE_START;
MACRO_TR_FAC TR_KMEM_GETPAGES_END;
MACRO_TR_FAC TR_KMEM_GETPAGES_START;
MACRO_TR_FAC TR_KMEM_HASH_RESCALE_END;
MACRO_TR_FAC TR_KMEM_HASH_RESCALE_START;
MACRO_TR_FAC TR_KMEM_SLAB_CREATE_END;
MACRO_TR_FAC TR_KMEM_SLAB_CREATE_START;
MACRO_TR_FAC TR_KMEM_SLAB_DESTROY_END;
MACRO_TR_FAC TR_KMEM_SLAB_DESTROY_START;
MACRO_TR_FAC TR_KMEM_ZALLOC_END;
MACRO_TR_FAC TR_KMEM_ZALLOC_START;
MACRO_TR_FAC TR_KSTRGETMSG_AWAKE;
MACRO_TR_FAC TR_KSTRGETMSG_DONE;
MACRO_TR_FAC TR_KSTRGETMSG_ENTER;
MACRO_TR_FAC TR_KSTRGETMSG_WAIT;
MACRO_TR_FAC TR_KSTRPUTMSG_IN;
MACRO_TR_FAC TR_KSTRPUTMSG_OUT;
MACRO_TR_FAC TR_KSTRPUTMSG_WAIT;
MACRO_TR_FAC TR_KSTRPUTMSG_WAKE;
MACRO_TR_FAC TR_KTHREAD_ID;
MACRO_TR_FAC TR_KTHREAD_LABEL;
MACRO_TR_FAC TR_LABEL;
MACRO_TR_FAC TR_LE_ADDUDIND_END;
MACRO_TR_FAC TR_LE_ADDUDIND_START;
MACRO_TR_FAC TR_LE_CLOSE;
MACRO_TR_FAC TR_LE_FREEBUF_END;
MACRO_TR_FAC TR_LE_FREEBUF_START;
MACRO_TR_FAC TR_LE_GETBUF_END;
MACRO_TR_FAC TR_LE_GETBUF_START;
MACRO_TR_FAC TR_LE_INIT_END;
MACRO_TR_FAC TR_LE_INIT_START;
MACRO_TR_FAC TR_LE_INTR_END;
MACRO_TR_FAC TR_LE_INTR_START;
MACRO_TR_FAC TR_LE_OPEN;
MACRO_TR_FAC TR_LE_PROTO_END;
MACRO_TR_FAC TR_LE_PROTO_IN;
MACRO_TR_FAC TR_LE_PROTO_OUT;
MACRO_TR_FAC TR_LE_PROTO_START;
MACRO_TR_FAC TR_LE_READ_END;
MACRO_TR_FAC TR_LE_READ_START;
MACRO_TR_FAC TR_LE_SENDUP_END;
MACRO_TR_FAC TR_LE_SENDUP_START;
MACRO_TR_FAC TR_LE_START_END;
MACRO_TR_FAC TR_LE_START_START;
MACRO_TR_FAC TR_LE_WPUT_END;
MACRO_TR_FAC TR_LE_WPUT_START;
MACRO_TR_FAC TR_LE_WSRV_END;
MACRO_TR_FAC TR_LE_WSRV_START;
MACRO_TR_FAC TR_LWP_CONTINUE_END;
MACRO_TR_FAC TR_LWP_CONTINUE_START;
MACRO_TR_FAC TR_LWP_CONT_ASR;
MACRO_TR_FAC TR_LWP_CREATE_ABZ;
MACRO_TR_FAC TR_LWP_CREATE_ASEGKP;
MACRO_TR_FAC TR_LWP_CREATE_ATHRC;
MACRO_TR_FAC TR_LWP_CREATE_END;
MACRO_TR_FAC TR_LWP_CREATE_START;
MACRO_TR_FAC TR_LWP_EXIT_END;
MACRO_TR_FAC TR_LWP_EXIT_OFFQ;
MACRO_TR_FAC TR_LWP_EXIT_START;
MACRO_TR_FAC TR_LWP_SUSPEND_END;
MACRO_TR_FAC TR_LWP_SUSPEND_START;
MACRO_TR_FAC TR_MAKE_DCD_CMD_END;
MACRO_TR_FAC TR_MAKE_DCD_CMD_INIT_PKT_END;
MACRO_TR_FAC TR_MAKE_DCD_CMD_INIT_PKT_START;
MACRO_TR_FAC TR_MAKE_DCD_CMD_NO_PKT_ALLOCATED1_END;
MACRO_TR_FAC TR_MAKE_DCD_CMD_START;
MACRO_TR_FAC TR_MAKE_SD_CMD_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_G0_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_G0_SBUF_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_G0_SBUF_START;
MACRO_TR_FAC TR_MAKE_SD_CMD_G0_START;
MACRO_TR_FAC TR_MAKE_SD_CMD_G1_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_G1_START;
MACRO_TR_FAC TR_MAKE_SD_CMD_INIT_PKT_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_INIT_PKT_SBUF_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_INIT_PKT_SBUF_START;
MACRO_TR_FAC TR_MAKE_SD_CMD_INIT_PKT_START;
MACRO_TR_FAC TR_MAKE_SD_CMD_NO_PKT_ALLOCATED1_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_NO_PKT_ALLOCATED2_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_RA_END;
MACRO_TR_FAC TR_MAKE_SD_CMD_RA_START;
MACRO_TR_FAC TR_MAKE_SD_CMD_START;
MACRO_TR_FAC TR_MCOPYMSG;
MACRO_TR_FAC TR_META_READ_END;
MACRO_TR_FAC TR_META_READ_START;
MACRO_TR_FAC TR_META_STRATEGY_END;
MACRO_TR_FAC TR_META_STRATEGY_START;
MACRO_TR_FAC TR_META_WRITE_END;
MACRO_TR_FAC TR_META_WRITE_START;
MACRO_TR_FAC TR_MI_TIMER_FIRE;
MACRO_TR_FAC TR_MI_TIMER_RSRV_IN;
MACRO_TR_FAC TR_MI_TIMER_RSRV_OUT;
MACRO_TR_FAC TR_NFSFP_DUP_CHECK_END;
MACRO_TR_FAC TR_NFSFP_DUP_CHECK_START;
MACRO_TR_FAC TR_NFSFP_PROC_REQ_END;
MACRO_TR_FAC TR_NFSFP_QUE_REQ_DEQ;
MACRO_TR_FAC TR_NFSFP_QUE_REQ_END;
MACRO_TR_FAC TR_NFSFP_QUE_REQ_ENQ;
MACRO_TR_FAC TR_NFSFP_QUE_REQ_START;
MACRO_TR_FAC TR_NFSFP_RFS_READLINK_END;
MACRO_TR_FAC TR_NFSFP_RFS_READLINK_START;
MACRO_TR_FAC TR_NFSFP_SEND_REPLY_END;
MACRO_TR_FAC TR_NFSFP_SEND_REPLY_START;
MACRO_TR_FAC TR_NFSFP_SVCAUTH_UNIX_END;
MACRO_TR_FAC TR_NFSFP_SVCAUTH_UNIX_START;
MACRO_TR_FAC TR_NFSFP_UDP_SEND_END;
MACRO_TR_FAC TR_NFSFP_UDP_SEND_START;
MACRO_TR_FAC TR_NFSFP_XDR_ARG_END;
MACRO_TR_FAC TR_NFSFP_XDR_ARG_START;
MACRO_TR_FAC TR_NFSFP_XDR_RES_END;
MACRO_TR_FAC TR_NFSFP_XDR_RES_START;
MACRO_TR_NONE TR_NONE;
MACRO_TR_FAC TR_NUM_CPUS;
MACRO_TR_FAC TR_PAD;
MACRO_TR_FAC TR_PAGEOUT_CV_SIGNAL;
MACRO_TR_FAC TR_PAGEOUT_END;
MACRO_TR_FAC TR_PAGEOUT_FREE;
MACRO_TR_FAC TR_PAGEOUT_HAND_WRAP;
MACRO_TR_FAC TR_PAGEOUT_ISREF;
MACRO_TR_FAC TR_PAGEOUT_MAXPGIO;
MACRO_TR_FAC TR_PAGEOUT_START;
MACRO_TR_FAC TR_PAGESIZE;
MACRO_TR_FAC TR_PAGE_CREATE_ALLOC;
MACRO_TR_FAC TR_PAGE_CREATE_NOMEM;
MACRO_TR_FAC TR_PAGE_CREATE_SLEEP_END;
MACRO_TR_FAC TR_PAGE_CREATE_SLEEP_START;
MACRO_TR_FAC TR_PAGE_CREATE_START;
MACRO_TR_FAC TR_PAGE_CREATE_SUCCESS;
MACRO_TR_FAC TR_PAGE_CREATE_TOOBIG;
MACRO_TR_FAC TR_PAGE_DESTROY;
MACRO_TR_FAC TR_PAGE_FREE_CACHE_HEAD;
MACRO_TR_FAC TR_PAGE_FREE_CACHE_TAIL;
MACRO_TR_FAC TR_PAGE_FREE_FREE;
MACRO_TR_FAC TR_PAGE_HASHIN;
MACRO_TR_FAC TR_PAGE_HASHOUT;
MACRO_TR_FAC TR_PAGE_INIT;
MACRO_TR_FAC TR_PAGE_RENAME;
MACRO_TR_FAC TR_PAGE_UNFREE_CACHE;
MACRO_TR_FAC TR_PAGE_UNFREE_FREE;
MACRO_TR_FAC TR_PAGE_WS_FREE;
MACRO_TR_FAC TR_PAGE_WS_IN;
MACRO_TR_FAC TR_PAGE_WS_OUT;
MACRO_TR_FAC TR_PAGE_WS_RECLAIM;
MACRO_TR_FAC TR_PGCOPY_START;
MACRO_TR_FAC TR_PHYSIO_AS_FAULT_START;
MACRO_TR_FAC TR_PHYSIO_AS_LOCK_END;
MACRO_TR_FAC TR_PHYSIO_AS_LOCK_START;
MACRO_TR_FAC TR_PHYSIO_AS_UNLOCK_END;
MACRO_TR_FAC TR_PHYSIO_AS_UNLOCK_START;
MACRO_TR_FAC TR_PHYSIO_END;
MACRO_TR_FAC TR_PHYSIO_GETBUF_END;
MACRO_TR_FAC TR_PHYSIO_GETBUF_START;
MACRO_TR_FAC TR_PHYSIO_LOCK_END;
MACRO_TR_FAC TR_PHYSIO_LOCK_START;
MACRO_TR_FAC TR_PHYSIO_SEGVN_FILL_END;
MACRO_TR_FAC TR_PHYSIO_SEGVN_HIT_END;
MACRO_TR_FAC TR_PHYSIO_SEGVN_MISS_END;
MACRO_TR_FAC TR_PHYSIO_SEGVN_START;
MACRO_TR_FAC TR_PHYSIO_SEGVN_UNLOCK_END;
MACRO_TR_FAC TR_PHYSIO_SEG_LOCK_END;
MACRO_TR_FAC TR_PHYSIO_SEG_LOCK_START;
MACRO_TR_FAC TR_PHYSIO_SEG_UNLOCK_START;
MACRO_TR_FAC TR_PHYSIO_START;
MACRO_TR_FAC TR_PHYSIO_UNLOCK_END;
MACRO_TR_FAC TR_PHYSIO_UNLOCK_START;
MACRO_TR_FAC TR_PID_OFF;
MACRO_TR_FAC TR_PID_ON;
MACRO_TR_FAC TR_PREEMPT;
MACRO_TR_FAC TR_PREEMPT_END;
MACRO_TR_FAC TR_PREEMPT_START;
MACRO_TR_FAC TR_PROCESS_FORK;
MACRO_TR_FAC TR_PROCESS_NAME;
MACRO_TR_FAC TR_PROC_EXEC;
MACRO_TR_FAC TR_PROC_EXIT;
MACRO_TR_FAC TR_PROC_FORK;
MACRO_TR_FAC TR_PUTNEXT_END;
MACRO_TR_FAC TR_PUTNEXT_START;
MACRO_TR_FAC TR_PUT_END;
MACRO_TR_FAC TR_PUT_START;
MACRO_TR_FAC TR_PVN_GETDIRTY;
MACRO_TR_FAC TR_PVN_READ_KLUSTER;
MACRO_TR_FAC TR_QATTACH_FLAGS;
MACRO_TR_FAC TR_QENABLE;
MACRO_TR_FAC TR_QE_ADDUDIND_END;
MACRO_TR_FAC TR_QE_ADDUDIND_START;
MACRO_TR_FAC TR_QE_CLOSE;
MACRO_TR_FAC TR_QE_FREEBUF_END;
MACRO_TR_FAC TR_QE_FREEBUF_START;
MACRO_TR_FAC TR_QE_GETBUF_END;
MACRO_TR_FAC TR_QE_GETBUF_START;
MACRO_TR_FAC TR_QE_INIT_END;
MACRO_TR_FAC TR_QE_INIT_START;
MACRO_TR_FAC TR_QE_INTR_END;
MACRO_TR_FAC TR_QE_INTR_START;
MACRO_TR_FAC TR_QE_OPEN;
MACRO_TR_FAC TR_QE_PROTO_END;
MACRO_TR_FAC TR_QE_PROTO_IN;
MACRO_TR_FAC TR_QE_PROTO_OUT;
MACRO_TR_FAC TR_QE_PROTO_START;
MACRO_TR_FAC TR_QE_READ_END;
MACRO_TR_FAC TR_QE_READ_START;
MACRO_TR_FAC TR_QE_SENDUP_END;
MACRO_TR_FAC TR_QE_SENDUP_START;
MACRO_TR_FAC TR_QE_START_END;
MACRO_TR_FAC TR_QE_START_START;
MACRO_TR_FAC TR_QE_WPUT_END;
MACRO_TR_FAC TR_QE_WPUT_START;
MACRO_TR_FAC TR_QE_WSRV_END;
MACRO_TR_FAC TR_QE_WSRV_START;
MACRO_TR_FAC TR_QRUNFLAG;
MACRO_TR_FAC TR_QRUNSERVICE_END;
MACRO_TR_FAC TR_QRUNSERVICE_START;
MACRO_TR_FAC TR_QRUN_DONE;
MACRO_TR_FAC TR_QRUN_DQ;
MACRO_TR_FAC TR_QRUN_LEAVES;
MACRO_TR_FAC TR_QRUN_START;
MACRO_TR_FAC TR_RAW_KTHREAD_ID;
MACRO_TR_FAC TR_RAW_UTHREAD_ID;
MACRO_TR_FAC TR_REMOVEQ;
MACRO_TR_FAC TR_RESUME_END;
MACRO_TR_FAC TR_RESUME_START;
MACRO_TR_FAC TR_RFSCALL_END;
MACRO_TR_FAC TR_RFSCALL_START;
MACRO_TR_FAC TR_RFS_CREATE_END;
MACRO_TR_FAC TR_RFS_CREATE_START;
MACRO_TR_FAC TR_RFS_CRFREE_END;
MACRO_TR_FAC TR_RFS_CRFREE_START;
MACRO_TR_FAC TR_RFS_GETATTR_END;
MACRO_TR_FAC TR_RFS_GETATTR_START;
MACRO_TR_FAC TR_RFS_LINK_END;
MACRO_TR_FAC TR_RFS_LINK_START;
MACRO_TR_FAC TR_RFS_LOOKUP_END;
MACRO_TR_FAC TR_RFS_LOOKUP_START;
MACRO_TR_FAC TR_RFS_MKDIR_END;
MACRO_TR_FAC TR_RFS_MKDIR_START;
MACRO_TR_FAC TR_RFS_READDIR_END;
MACRO_TR_FAC TR_RFS_READDIR_START;
MACRO_TR_FAC TR_RFS_READLINK_END;
MACRO_TR_FAC TR_RFS_READLINK_START;
MACRO_TR_FAC TR_RFS_READ_END;
MACRO_TR_FAC TR_RFS_READ_START;
MACRO_TR_FAC TR_RFS_REMOVE_END;
MACRO_TR_FAC TR_RFS_REMOVE_START;
MACRO_TR_FAC TR_RFS_RENAME_END;
MACRO_TR_FAC TR_RFS_RENAME_START;
MACRO_TR_FAC TR_RFS_RESFREE_END;
MACRO_TR_FAC TR_RFS_RESFREE_START;
MACRO_TR_FAC TR_RFS_RMDIR_END;
MACRO_TR_FAC TR_RFS_RMDIR_START;
MACRO_TR_FAC TR_RFS_SETATTR_END;
MACRO_TR_FAC TR_RFS_SETATTR_START;
MACRO_TR_FAC TR_RFS_STATFS_END;
MACRO_TR_FAC TR_RFS_STATFS_START;
MACRO_TR_FAC TR_RFS_SYMLINK_END;
MACRO_TR_FAC TR_RFS_SYMLINK_START;
MACRO_TR_FAC TR_RFS_WRITE_END;
MACRO_TR_FAC TR_RFS_WRITE_START;
MACRO_TR_FAC TR_RLOGINP_RPUT_IN;
MACRO_TR_FAC TR_RLOGINP_RPUT_OUT;
MACRO_TR_FAC TR_RLOGINP_RSRV_IN;
MACRO_TR_FAC TR_RLOGINP_RSRV_OUT;
MACRO_TR_FAC TR_RLOGINP_WINCTL_IN;
MACRO_TR_FAC TR_RLOGINP_WINCTL_OUT;
MACRO_TR_FAC TR_RLOGINP_WPUT_IN;
MACRO_TR_FAC TR_RLOGINP_WPUT_OUT;
MACRO_TR_FAC TR_RLOGINP_WSRV_IN;
MACRO_TR_FAC TR_RLOGINP_WSRV_OUT;
MACRO_TR_FAC TR_RMV_QP;
MACRO_TR_FAC TR_RPCMODOPEN_END;
MACRO_TR_FAC TR_RPCMODOPEN_START;
MACRO_TR_FAC TR_RPCMODRPUT_END;
MACRO_TR_FAC TR_RPCMODRPUT_START;
MACRO_TR_FAC TR_RPCMODRSRV_END;
MACRO_TR_FAC TR_RPCMODRSRV_START;
MACRO_TR_FAC TR_RPCMODWPUT_END;
MACRO_TR_FAC TR_RPCMODWPUT_START;
MACRO_TR_FAC TR_RPCMODWSRV_END;
MACRO_TR_FAC TR_RPCMODWSRV_START;
MACRO_TR_FAC TR_RPC_QUE_REQ_END;
MACRO_TR_FAC TR_RPC_QUE_REQ_START;
MACRO_TR_FAC TR_RUNIN;
MACRO_TR_FAC TR_RUNOUT;
MACRO_TR_FAC TR_RUNQUEUES;
MACRO_TR_FAC TR_RW_ENTER_RD_END;
MACRO_TR_FAC TR_RW_ENTER_RD_START;
MACRO_TR_FAC TR_RW_ENTER_WR_END;
MACRO_TR_FAC TR_RW_ENTER_WR_START;
MACRO_TR_FAC TR_RW_EXIT_END;
MACRO_TR_FAC TR_RW_EXIT_START;
MACRO_TR_FAC TR_S5_ACCESS_END;
MACRO_TR_FAC TR_S5_ACCESS_START;
MACRO_TR_FAC TR_S5_CLOSE;
MACRO_TR_FAC TR_S5_CREATE_END;
MACRO_TR_FAC TR_S5_CREATE_START;
MACRO_TR_FAC TR_S5_FSYNC_END;
MACRO_TR_FAC TR_S5_FSYNC_START;
MACRO_TR_FAC TR_S5_GETATTR_END;
MACRO_TR_FAC TR_S5_GETATTR_START;
MACRO_TR_FAC TR_S5_GETPAGE_END;
MACRO_TR_FAC TR_S5_GETPAGE_START;
MACRO_TR_FAC TR_S5_LINK_END;
MACRO_TR_FAC TR_S5_LINK_START;
MACRO_TR_FAC TR_S5_LOOKUP_END;
MACRO_TR_FAC TR_S5_LOOKUP_START;
MACRO_TR_FAC TR_S5_MAP_END;
MACRO_TR_FAC TR_S5_MAP_START;
MACRO_TR_FAC TR_S5_MKDIR_END;
MACRO_TR_FAC TR_S5_MKDIR_START;
MACRO_TR_FAC TR_S5_OPEN;
MACRO_TR_FAC TR_S5_PUTAPAGE_END;
MACRO_TR_FAC TR_S5_PUTAPAGE_START;
MACRO_TR_FAC TR_S5_PUTPAGE_END;
MACRO_TR_FAC TR_S5_PUTPAGE_START;
MACRO_TR_FAC TR_S5_READDIR_END;
MACRO_TR_FAC TR_S5_READDIR_START;
MACRO_TR_FAC TR_S5_READLINK_END;
MACRO_TR_FAC TR_S5_READLINK_START;
MACRO_TR_FAC TR_S5_READ_END;
MACRO_TR_FAC TR_S5_READ_START;
MACRO_TR_FAC TR_S5_REMOVE_END;
MACRO_TR_FAC TR_S5_REMOVE_START;
MACRO_TR_FAC TR_S5_RENAME_END;
MACRO_TR_FAC TR_S5_RENAME_START;
MACRO_TR_FAC TR_S5_RMDIR_END;
MACRO_TR_FAC TR_S5_RMDIR_START;
MACRO_TR_FAC TR_S5_RWIP_END;
MACRO_TR_FAC TR_S5_RWIP_START;
MACRO_TR_FAC TR_S5_SETATTR_END;
MACRO_TR_FAC TR_S5_SETATTR_START;
MACRO_TR_FAC TR_S5_STARTIO_END;
MACRO_TR_FAC TR_S5_STARTIO_START;
MACRO_TR_FAC TR_S5_SYMLINK_END;
MACRO_TR_FAC TR_S5_SYMLINK_START;
MACRO_TR_FAC TR_S5_SYNCIP_END;
MACRO_TR_FAC TR_S5_SYNCIP_START;
MACRO_TR_FAC TR_S5_WRITE_END;
MACRO_TR_FAC TR_S5_WRITE_START;
MACRO_TR_FAC TR_SAMPLE_MOD;
MACRO_TR_FAC TR_SAMPLE_REF;
MACRO_TR_FAC TR_SAMPLE_WS_END;
MACRO_TR_FAC TR_SAMPLE_WS_START;
MACRO_TR_FAC TR_SCSI_ALLOC_CONSISTENT_BUF_END;
MACRO_TR_FAC TR_SCSI_ALLOC_CONSISTENT_BUF_RETURN1_END;
MACRO_TR_FAC TR_SCSI_ALLOC_CONSISTENT_BUF_RETURN2_END;
MACRO_TR_FAC TR_SCSI_ALLOC_CONSISTENT_BUF_RETURN3_END;
MACRO_TR_FAC TR_SCSI_ALLOC_CONSISTENT_BUF_START;
MACRO_TR_FAC TR_SCSI_DESTROY_PKT_END;
MACRO_TR_FAC TR_SCSI_DESTROY_PKT_START;
MACRO_TR_FAC TR_SCSI_FREE_CONSISTENT_BUF_END;
MACRO_TR_FAC TR_SCSI_FREE_CONSISTENT_BUF_START;
MACRO_TR_FAC TR_SCSI_IMPL_DMAGET_BUFSETUP_FAILED;
MACRO_TR_FAC TR_SCSI_IMPL_DMAGET_BUFSETUP_START;
MACRO_TR_FAC TR_SCSI_IMPL_DMAGET_END;
MACRO_TR_FAC TR_SCSI_IMPL_DMAGET_START;
MACRO_TR_FAC TR_SCSI_IMPL_PKTALLOC_CALLBACK_END;
MACRO_TR_FAC TR_SCSI_IMPL_PKTALLOC_CALLBACK_START;
MACRO_TR_FAC TR_SCSI_IMPL_PKTALLOC_END;
MACRO_TR_FAC TR_SCSI_IMPL_PKTALLOC_START;
MACRO_TR_FAC TR_SCSI_IMPL_PKTFREE_END;
MACRO_TR_FAC TR_SCSI_IMPL_PKTFREE_RUN_CALLBACK;
MACRO_TR_FAC TR_SCSI_IMPL_PKTFREE_START;
MACRO_TR_FAC TR_SCSI_INIT_PKT_DMAGET_FAILED;
MACRO_TR_FAC TR_SCSI_INIT_PKT_DMAGET_START;
MACRO_TR_FAC TR_SCSI_INIT_PKT_END;
MACRO_TR_FAC TR_SCSI_INIT_PKT_FREE_START;
MACRO_TR_FAC TR_SCSI_INIT_PKT_PKTALLOC_END;
MACRO_TR_FAC TR_SCSI_INIT_PKT_PKTALLOC_FAILED;
MACRO_TR_FAC TR_SCSI_INIT_PKT_PKTALLOC_START;
MACRO_TR_FAC TR_SCSI_INIT_PKT_RETURN1_END;
MACRO_TR_FAC TR_SCSI_INIT_PKT_RETURN2_END;
MACRO_TR_FAC TR_SCSI_INIT_PKT_START;
MACRO_TR_FAC TR_SDDONE_BIODONE_CALL;
MACRO_TR_FAC TR_SDDONE_END;
MACRO_TR_FAC TR_SDDONE_START;
MACRO_TR_FAC TR_SDINTR_COMMAND_DONE_END;
MACRO_TR_FAC TR_SDINTR_END;
MACRO_TR_FAC TR_SDINTR_QUE_COMMAND_END;
MACRO_TR_FAC TR_SDINTR_QUE_FAILED_END;
MACRO_TR_FAC TR_SDINTR_START;
MACRO_TR_FAC TR_SDREAD_END;
MACRO_TR_FAC TR_SDREAD_START;
MACRO_TR_FAC TR_SDRUNOUT_END;
MACRO_TR_FAC TR_SDRUNOUT_START;
MACRO_TR_FAC TR_SDSTART_END;
MACRO_TR_FAC TR_SDSTART_NO_RESOURCES_END;
MACRO_TR_FAC TR_SDSTART_NO_WORK_END;
MACRO_TR_FAC TR_SDSTART_SMALL_WINDOW_END;
MACRO_TR_FAC TR_SDSTART_SMALL_WINDOW_START;
MACRO_TR_FAC TR_SDSTART_START;
MACRO_TR_FAC TR_SDSTRATEGY_DISKSORT_END;
MACRO_TR_FAC TR_SDSTRATEGY_DISKSORT_START;
MACRO_TR_FAC TR_SDSTRATEGY_END;
MACRO_TR_FAC TR_SDSTRATEGY_SDSTART_END;
MACRO_TR_FAC TR_SDSTRATEGY_SDSTART_START;
MACRO_TR_FAC TR_SDSTRATEGY_SMALL_WINDOW_END;
MACRO_TR_FAC TR_SDSTRATEGY_SMALL_WINDOW_START;
MACRO_TR_FAC TR_SDSTRATEGY_START;
MACRO_TR_FAC TR_SDWRITE_END;
MACRO_TR_FAC TR_SDWRITE_START;
MACRO_TR_FAC TR_SD_CHECK_ERROR_END;
MACRO_TR_FAC TR_SD_CHECK_ERROR_QUE_COMMAND_END;
MACRO_TR_FAC TR_SD_CHECK_ERROR_START;
MACRO_TR_FAC TR_SEGKMEM_ALLOC;
MACRO_TR_FAC TR_SEGMAP_FAULT;
MACRO_TR_FAC TR_SEGMAP_GETMAP;
MACRO_TR_FAC TR_SEGMAP_GETMAP_END;
MACRO_TR_FAC TR_SEGMAP_GETMAP_START;
MACRO_TR_FAC TR_SEGMAP_GETPAGE;
MACRO_TR_FAC TR_SEGMAP_PAGECREATE;
MACRO_TR_FAC TR_SEGMAP_RELEASE_END;
MACRO_TR_FAC TR_SEGMAP_RELEASE_START;
MACRO_TR_FAC TR_SEGMAP_RELMAP;
MACRO_TR_FAC TR_SEGVN_FAULT;
MACRO_TR_FAC TR_SEGVN_GETPAGE;
MACRO_TR_FAC TR_SEG_INFO;
MACRO_TR_FAC TR_SENDSIG;
MACRO_TR_FAC TR_SLEEP;
MACRO_TR_FAC TR_SOCKFS_CLOSE;
MACRO_TR_FAC TR_SOCKFS_OPEN;
MACRO_TR_FAC TR_SOCKMOD_RPUT_IN;
MACRO_TR_FAC TR_SOCKMOD_RPUT_OUT;
MACRO_TR_FAC TR_SOCKMOD_RSRV_IN;
MACRO_TR_FAC TR_SOCKMOD_RSRV_OUT;
MACRO_TR_FAC TR_SOCKMOD_WPUT_IN;
MACRO_TR_FAC TR_SOCKMOD_WPUT_OUT;
MACRO_TR_FAC TR_SOCKMOD_WSRV_IN;
MACRO_TR_FAC TR_SOCKMOD_WSRV_OUT;
MACRO_TR_FAC TR_SOFTSWAP;
MACRO_TR_FAC TR_SPECFS_CDEV;
MACRO_TR_FAC TR_SPECFS_GETAPAGE;
MACRO_TR_FAC TR_SPECFS_GETPAGE;
MACRO_TR_FAC TR_SPECFS_OPEN;
MACRO_TR_FAC TR_SPECFS_PUTAPAGE;
MACRO_TR_FAC TR_SPECFS_PUTPAGE;
MACRO_TR_FAC TR_SPECFS_READ_END;
MACRO_TR_FAC TR_SPECFS_READ_START;
MACRO_TR_FAC TR_SPECFS_SEGMAP;
MACRO_TR_FAC TR_SPECFS_WRITE_END;
MACRO_TR_FAC TR_SPECFS_WRITE_START;
MACRO_TR_FAC TR_SPEED_0;
MACRO_TR_FAC TR_SPEED_1;
MACRO_TR_FAC TR_SPEED_1_STRING;
MACRO_TR_FAC TR_SPEED_2;
MACRO_TR_FAC TR_SPEED_2_STRING;
MACRO_TR_FAC TR_SPEED_3;
MACRO_TR_FAC TR_SPEED_3_STRING;
MACRO_TR_FAC TR_SPEED_4;
MACRO_TR_FAC TR_SPEED_4_STRING;
MACRO_TR_FAC TR_SPEED_5;
MACRO_TR_FAC TR_SPEED_5_STRING;
MACRO_TR_FAC TR_START_TIME;
MACRO_TR_FAC TR_STPDOWN;
MACRO_TR_FAC TR_STR2TIME;
MACRO_TR_FAC TR_STR3TIME;
MACRO_TR_FAC TR_STRCLEAN;
MACRO_TR_FAC TR_STRCLOSE;
MACRO_TR_FAC TR_STRDOIOCTL;
MACRO_TR_FAC TR_STRDOIOCTL_ACK;
MACRO_TR_FAC TR_STRDOIOCTL_PUT;
MACRO_TR_FAC TR_STRDOIOCTL_WAIT;
MACRO_TR_FAC TR_STRDOIOCTL_WAIT2;
MACRO_TR_FAC TR_STRGETMSG_AWAKE;
MACRO_TR_FAC TR_STRGETMSG_DONE;
MACRO_TR_FAC TR_STRGETMSG_ENTER;
MACRO_TR_FAC TR_STRGETMSG_WAIT;
MACRO_TR_FAC TR_STRIPE_STRATEGY_ALLOC_END;
MACRO_TR_FAC TR_STRIPE_STRATEGY_ALLOC_START;
MACRO_TR_FAC TR_STRIPE_STRATEGY_BPMAPIN_END;
MACRO_TR_FAC TR_STRIPE_STRATEGY_BPMAPIN_START;
MACRO_TR_FAC TR_STRIPE_STRATEGY_CALLDRV_END;
MACRO_TR_FAC TR_STRIPE_STRATEGY_CALLDRV_START;
MACRO_TR_FAC TR_STRIPE_STRATEGY_CHKBUF_END;
MACRO_TR_FAC TR_STRIPE_STRATEGY_CHKBUF_START;
MACRO_TR_FAC TR_STRIPE_STRATEGY_END;
MACRO_TR_FAC TR_STRIPE_STRATEGY_MAPBUF_END;
MACRO_TR_FAC TR_STRIPE_STRATEGY_MAPBUF_START;
MACRO_TR_FAC TR_STRIPE_STRATEGY_START;
MACRO_TR_FAC TR_STRIPE_STRATEGY_STRIPE_END;
MACRO_TR_FAC TR_STRIPE_STRATEGY_STRIPE_START;
MACRO_TR_FAC TR_STROPEN;
MACRO_TR_FAC TR_STRPUTMSG_IN;
MACRO_TR_FAC TR_STRPUTMSG_OUT;
MACRO_TR_FAC TR_STRPUTMSG_WAIT;
MACRO_TR_FAC TR_STRPUTMSG_WAKE;
MACRO_TR_FAC TR_STRREAD_AWAKE;
MACRO_TR_FAC TR_STRREAD_DONE;
MACRO_TR_FAC TR_STRREAD_ENTER;
MACRO_TR_FAC TR_STRREAD_WAIT;
MACRO_TR_FAC TR_STRRPUT_ENTER;
MACRO_TR_FAC TR_STRRPUT_PROTERR;
MACRO_TR_FAC TR_STRRPUT_WAKE;
MACRO_TR_FAC TR_STRRPUT_WAKE2;
MACRO_TR_FAC TR_STRSENDSIG;
MACRO_TR_FAC TR_STRTIME;
MACRO_TR_FAC TR_STRWAITQ_INTR2;
MACRO_TR_FAC TR_STRWAITQ_TIME;
MACRO_TR_FAC TR_STRWAITQ_WAIT2;
MACRO_TR_FAC TR_STRWAITQ_WAKE2;
MACRO_TR_FAC TR_STRWRITE_IN;
MACRO_TR_FAC TR_STRWRITE_OUT;
MACRO_TR_FAC TR_STRWRITE_PUT;
MACRO_TR_FAC TR_STRWRITE_RESID;
MACRO_TR_FAC TR_STRWRITE_WAIT;
MACRO_TR_FAC TR_STRWRITE_WAKE;
MACRO_TR_FAC TR_STRWSRV;
MACRO_TR_FAC TR_SVC_CLTS_KDUP_END;
MACRO_TR_FAC TR_SVC_CLTS_KDUP_START;
MACRO_TR_FAC TR_SVC_CLTS_KRECV_END;
MACRO_TR_FAC TR_SVC_CLTS_KRECV_START;
MACRO_TR_FAC TR_SVC_CLTS_KSEND_END;
MACRO_TR_FAC TR_SVC_CLTS_KSEND_START;
MACRO_TR_FAC TR_SVC_COTS_KDUP_DONE;
MACRO_TR_FAC TR_SVC_COTS_KDUP_INPROGRESS;
MACRO_TR_FAC TR_SVC_COTS_KRECV_END;
MACRO_TR_FAC TR_SVC_COTS_KRECV_START;
MACRO_TR_FAC TR_SVC_COTS_KSEND_END;
MACRO_TR_FAC TR_SVC_COTS_KSEND_START;
MACRO_TR_FAC TR_SVC_DUPDONE;
MACRO_TR_FAC TR_SVC_DUPFOUND;
MACRO_TR_FAC TR_SVC_FREEARGS_END;
MACRO_TR_FAC TR_SVC_FREEARGS_START;
MACRO_TR_FAC TR_SVC_FREERES_END;
MACRO_TR_FAC TR_SVC_FREERES_START;
MACRO_TR_FAC TR_SVC_GETARGS_END;
MACRO_TR_FAC TR_SVC_GETARGS_START;
MACRO_TR_FAC TR_SVC_GETREQ_AUTH_END;
MACRO_TR_FAC TR_SVC_GETREQ_AUTH_START;
MACRO_TR_FAC TR_SVC_GETREQ_END;
MACRO_TR_FAC TR_SVC_GETREQ_LOOP_END;
MACRO_TR_FAC TR_SVC_GETREQ_LOOP_START;
MACRO_TR_FAC TR_SVC_GETREQ_START;
MACRO_TR_FAC TR_SVC_QUEUEREQ_END;
MACRO_TR_FAC TR_SVC_QUEUEREQ_START;
MACRO_TR_FAC TR_SVC_RUN;
MACRO_TR_FAC TR_SVC_SENDREPLY_END;
MACRO_TR_FAC TR_SVC_SENDREPLY_START;
MACRO_TR_FAC TR_SWAPFS_CLOSE;
MACRO_TR_FAC TR_SWAPFS_GETAPAGE;
MACRO_TR_FAC TR_SWAPFS_GETPAGE;
MACRO_TR_FAC TR_SWAPFS_OPEN;
MACRO_TR_FAC TR_SWAPFS_PUTAPAGE;
MACRO_TR_FAC TR_SWAPFS_PUTPAGE;
MACRO_TR_FAC TR_SWAPIN;
MACRO_TR_FAC TR_SWAPIN_VALUES;
MACRO_TR_FAC TR_SWAPOUT;
MACRO_TR_FAC TR_SWAPOUT_LWP;
MACRO_TR_FAC TR_SWAPQ_LWP;
MACRO_TR_FAC TR_SWAPQ_PROC;
MACRO_TR_FAC TR_SWAP_ALLOC;
MACRO_TR_FAC TR_SWAP_RENAME;
MACRO_TR_FAC TR_SWTCH_END;
MACRO_TR_FAC TR_SWTCH_START;
MACRO_TR_FAC TR_SYSCALL_END;
MACRO_TR_FAC TR_SYSCALL_START;
MACRO_TR_FAC TR_SYS_LWP_ABCP;
MACRO_TR_FAC TR_SYS_LWP_ACOPYIN;
MACRO_TR_FAC TR_SYS_LWP_ALWPTOT;
MACRO_TR_FAC TR_SYS_LWP_COND_BROADCAST;
MACRO_TR_FAC TR_SYS_LWP_COND_SIGNAL_END;
MACRO_TR_FAC TR_SYS_LWP_COND_SIGNAL_START;
MACRO_TR_FAC TR_SYS_LWP_COND_WAIT_END;
MACRO_TR_FAC TR_SYS_LWP_COND_WAIT_START;
MACRO_TR_FAC TR_SYS_LWP_CONTINUE_AIDTOT;
MACRO_TR_FAC TR_SYS_LWP_CONTINUE_END;
MACRO_TR_FAC TR_SYS_LWP_CONTINUE_START;
MACRO_TR_FAC TR_SYS_LWP_CREATE_END1;
MACRO_TR_FAC TR_SYS_LWP_CREATE_END2;
MACRO_TR_FAC TR_SYS_LWP_CREATE_START;
MACRO_TR_FAC TR_SYS_LWP_CR_WAIT;
MACRO_TR_FAC TR_SYS_LWP_EXIT_END;
MACRO_TR_FAC TR_SYS_LWP_EXIT_START;
MACRO_TR_FAC TR_SYS_LWP_GETPRIVATE;
MACRO_TR_FAC TR_SYS_LWP_KILL_END;
MACRO_TR_FAC TR_SYS_LWP_KILL_START;
MACRO_TR_FAC TR_SYS_LWP_MUTEX_LOCK;
MACRO_TR_FAC TR_SYS_LWP_MUTEX_UNLOCK;
MACRO_TR_FAC TR_SYS_LWP_SELF;
MACRO_TR_FAC TR_SYS_LWP_SETPRIVATE;
MACRO_TR_FAC TR_SYS_LWP_SUSPEND_END;
MACRO_TR_FAC TR_SYS_LWP_SUSPEND_START;
MACRO_TR_FAC TR_SYS_LWP_WAIT;
MACRO_TR_FAC TR_TCP_CLOSE;
MACRO_TR_FAC TR_TCP_OPEN;
MACRO_TR_FAC TR_TCP_RPUT_IN;
MACRO_TR_FAC TR_TCP_RPUT_OUT;
MACRO_TR_FAC TR_TCP_RPUT_SLOW_IN;
MACRO_TR_FAC TR_TCP_RPUT_SLOW_OUT;
MACRO_TR_FAC TR_TCP_RSRV_IN;
MACRO_TR_FAC TR_TCP_RSRV_OUT;
MACRO_TR_FAC TR_TCP_WPUT_IN;
MACRO_TR_FAC TR_TCP_WPUT_OUT;
MACRO_TR_FAC TR_TCP_WPUT_SLOW_IN;
MACRO_TR_FAC TR_TCP_WPUT_SLOW_OUT;
MACRO_TR_FAC TR_TCP_WSRV_IN;
MACRO_TR_FAC TR_TCP_WSRV_OUT;
MACRO_TR_FAC TR_TICK;
MACRO_TR_FAC TR_TIMEOUT;
MACRO_TR_FAC TR_TITLE;
MACRO_TR_FAC TR_TMPFS_CREATE;
MACRO_TR_FAC TR_TMPFS_LOOKUP;
MACRO_TR_FAC TR_TMPFS_REMOVE;
MACRO_TR_FAC TR_TMPFS_RENAME;
MACRO_TR_FAC TR_TMPFS_RWTMP_END;
MACRO_TR_FAC TR_TMPFS_RWTMP_START;
MACRO_TR_FAC TR_TOTAL_TIME;
MACRO_TR_FAC TR_TRACE_FLUSH_END;
MACRO_TR_FAC TR_TRACE_FLUSH_START;
MACRO_TR_FAC TR_TRACE_VN_WRITE_END;
MACRO_TR_FAC TR_TRACE_VN_WRITE_START;
MACRO_TR_FAC TR_TRAPRET;
MACRO_TR_FAC TR_TRAP_END;
MACRO_TR_FAC TR_TRAP_START;
MACRO_TR_FAC TR_UDP_CLOSE;
MACRO_TR_FAC TR_UDP_OPEN;
MACRO_TR_FAC TR_UDP_RPUT_END;
MACRO_TR_FAC TR_UDP_RPUT_START;
MACRO_TR_FAC TR_UDP_WPUT_END;
MACRO_TR_FAC TR_UDP_WPUT_OTHER_END;
MACRO_TR_FAC TR_UDP_WPUT_OTHER_START;
MACRO_TR_FAC TR_UDP_WPUT_START;
MACRO_TR_FAC TR_UFS_ACCESS_END;
MACRO_TR_FAC TR_UFS_ACCESS_START;
MACRO_TR_FAC TR_UFS_CLOSE;
MACRO_TR_FAC TR_UFS_CREATE_END;
MACRO_TR_FAC TR_UFS_CREATE_START;
MACRO_TR_FAC TR_UFS_FSYNC_END;
MACRO_TR_FAC TR_UFS_FSYNC_START;
MACRO_TR_FAC TR_UFS_GETAPAGE_END;
MACRO_TR_FAC TR_UFS_GETAPAGE_START;
MACRO_TR_FAC TR_UFS_GETATTR_END;
MACRO_TR_FAC TR_UFS_GETATTR_START;
MACRO_TR_FAC TR_UFS_GETPAGE_END;
MACRO_TR_FAC TR_UFS_GETPAGE_START;
MACRO_TR_FAC TR_UFS_GETSECATTR_END;
MACRO_TR_FAC TR_UFS_GETSECATTR_START;
MACRO_TR_FAC TR_UFS_LINK_END;
MACRO_TR_FAC TR_UFS_LINK_START;
MACRO_TR_FAC TR_UFS_LOOKUP_END;
MACRO_TR_FAC TR_UFS_LOOKUP_START;
MACRO_TR_FAC TR_UFS_MAP_END;
MACRO_TR_FAC TR_UFS_MAP_START;
MACRO_TR_FAC TR_UFS_MKDIR_END;
MACRO_TR_FAC TR_UFS_MKDIR_START;
MACRO_TR_FAC TR_UFS_OPEN;
MACRO_TR_FAC TR_UFS_PUTAPAGE_END;
MACRO_TR_FAC TR_UFS_PUTAPAGE_START;
MACRO_TR_FAC TR_UFS_PUTPAGE_END;
MACRO_TR_FAC TR_UFS_PUTPAGE_START;
MACRO_TR_FAC TR_UFS_READDIR_END;
MACRO_TR_FAC TR_UFS_READDIR_START;
MACRO_TR_FAC TR_UFS_READLINK_END;
MACRO_TR_FAC TR_UFS_READLINK_START;
MACRO_TR_FAC TR_UFS_READ_END;
MACRO_TR_FAC TR_UFS_READ_START;
MACRO_TR_FAC TR_UFS_REMOVE_END;
MACRO_TR_FAC TR_UFS_REMOVE_START;
MACRO_TR_FAC TR_UFS_RENAME_END;
MACRO_TR_FAC TR_UFS_RENAME_START;
MACRO_TR_FAC TR_UFS_RMDIR_END;
MACRO_TR_FAC TR_UFS_RMDIR_START;
MACRO_TR_FAC TR_UFS_RWIP_END;
MACRO_TR_FAC TR_UFS_RWIP_START;
MACRO_TR_FAC TR_UFS_SETATTR_END;
MACRO_TR_FAC TR_UFS_SETATTR_START;
MACRO_TR_FAC TR_UFS_SETSECATTR_END;
MACRO_TR_FAC TR_UFS_SETSECATTR_START;
MACRO_TR_FAC TR_UFS_SYMLINK_END;
MACRO_TR_FAC TR_UFS_SYMLINK_START;
MACRO_TR_FAC TR_UFS_SYNCIP_END;
MACRO_TR_FAC TR_UFS_SYNCIP_START;
MACRO_TR_FAC TR_UFS_WRITE_END;
MACRO_TR_FAC TR_UFS_WRITE_START;
MACRO_TR_FAC TR_UNLOAD;
MACRO_TR_FAC TR_UNTIMEOUT;
MACRO_TR_FAC TR_UNTIMEOUT_BOGUS_ID;
MACRO_TR_FAC TR_UNTIMEOUT_EXECUTING;
MACRO_TR_FAC TR_UNTIMEOUT_SELF;
MACRO_TR_NONE TR_UNTRANS_EVENT;
MACRO_TR_FAC TR_UPDATE;
MACRO_TR_FAC TR_USER_WINDOW_OVERFLOW;
MACRO_TR_FAC TR_USER_WINDOW_UNDERFLOW;
MACRO_TR_FAC TR_UTHREAD_ID;
MACRO_TR_FAC TR_UTHREAD_LABEL;
MACRO_TR_FAC TR_VERSION;
MACRO_TR_FAC TR_VOP_ACCESS_END;
MACRO_TR_FAC TR_VOP_ACCESS_START;
MACRO_TR_FAC TR_VOP_CLOSE_END;
MACRO_TR_FAC TR_VOP_CLOSE_START;
MACRO_TR_FAC TR_VOP_CREATE_END;
MACRO_TR_FAC TR_VOP_CREATE_START;
MACRO_TR_FAC TR_VOP_FSYNC_END;
MACRO_TR_FAC TR_VOP_FSYNC_START;
MACRO_TR_FAC TR_VOP_GETATTR_END;
MACRO_TR_FAC TR_VOP_GETATTR_START;
MACRO_TR_FAC TR_VOP_LINK_END;
MACRO_TR_FAC TR_VOP_LINK_START;
MACRO_TR_FAC TR_VOP_LOOKUP_END;
MACRO_TR_FAC TR_VOP_LOOKUP_START;
MACRO_TR_FAC TR_VOP_MKDIR_END;
MACRO_TR_FAC TR_VOP_MKDIR_START;
MACRO_TR_FAC TR_VOP_OPEN_END;
MACRO_TR_FAC TR_VOP_OPEN_START;
MACRO_TR_FAC TR_VOP_PUTPAGE_END;
MACRO_TR_FAC TR_VOP_PUTPAGE_START;
MACRO_TR_FAC TR_VOP_READDIR_END;
MACRO_TR_FAC TR_VOP_READDIR_START;
MACRO_TR_FAC TR_VOP_READLINK_END;
MACRO_TR_FAC TR_VOP_READLINK_START;
MACRO_TR_FAC TR_VOP_READ_END;
MACRO_TR_FAC TR_VOP_READ_START;
MACRO_TR_FAC TR_VOP_REMOVE_END;
MACRO_TR_FAC TR_VOP_REMOVE_START;
MACRO_TR_FAC TR_VOP_RENAME_END;
MACRO_TR_FAC TR_VOP_RENAME_START;
MACRO_TR_FAC TR_VOP_RMDIR_END;
MACRO_TR_FAC TR_VOP_RMDIR_START;
MACRO_TR_FAC TR_VOP_RWLOCK_END;
MACRO_TR_FAC TR_VOP_RWLOCK_START;
MACRO_TR_FAC TR_VOP_RWUNLOCK_END;
MACRO_TR_FAC TR_VOP_RWUNLOCK_START;
MACRO_TR_FAC TR_VOP_SETATTR_END;
MACRO_TR_FAC TR_VOP_SETATTR_START;
MACRO_TR_FAC TR_VOP_SPACE_END;
MACRO_TR_FAC TR_VOP_SPACE_START;
MACRO_TR_FAC TR_VOP_SYMLINK_END;
MACRO_TR_FAC TR_VOP_SYMLINK_START;
MACRO_TR_FAC TR_VOP_WRITE_END;
MACRO_TR_FAC TR_VOP_WRITE_START;
MACRO_TR_FAC TR_XDR_CALLMSG_END;
MACRO_TR_FAC TR_XDR_CALLMSG_START;
MACRO_TR_FAC TR_XDR_REPLYMSG_END;
MACRO_TR_FAC TR_XDR_REPLYMSG_START;
MACRO_TR_FAC TR__ESP_START_END;
MACRO_TR_FAC TR__ESP_START_START;
MACRO_TR_FAC TR__FAS_START_END;
MACRO_TR_FAC TR__FAS_START_START;
MACRO_TR TR___add_group;
MACRO_TR TR___alloc_mbrs;
MACRO_TR TR___authenticate;
MACRO_TR TR___bind_rpc;
MACRO_TR TR___break_name;
MACRO_TR TR___buf;
MACRO_TR TR___callback_error;
MACRO_TR TR___callback_finish;
MACRO_TR TR___callback_stub;
MACRO_TR TR___clnt_create_loopback;
MACRO_TR TR___core_lookup;
MACRO_TR TR___cvt2attr;
MACRO_TR TR___default_domain;
MACRO_TR TR___des_crypt;
MACRO_TR TR___des_encrypt;
MACRO_TR TR___des_setkey;
MACRO_TR TR___do_callback;
MACRO_TR TR___do_ismember;
MACRO_TR TR___domainname;
MACRO_TR TR___free_list;
MACRO_TR TR___get_clnt_uaddr;
MACRO_TR TR___get_group;
MACRO_TR TR___get_local_names;
MACRO_TR TR___get_obj_defaults;
MACRO_TR TR___get_ti_clnt;
MACRO_TR TR___getclnt;
MACRO_TR TR___gss_authenticate;
MACRO_TR TR___hostdata;
MACRO_TR TR___implicit_member;
MACRO_TR TR___insert_entry;
MACRO_TR TR___insert_group;
MACRO_TR TR___insert_list;
MACRO_TR TR___make_binding;
MACRO_TR TR___map_addr;
MACRO_TR TR___msgout;
MACRO_TR TR___name_distance;
MACRO_TR TR___name_hash;
MACRO_TR TR___nextsep_of;
MACRO_TR TR___nis_clnt_ibops;
MACRO_TR TR___nis_clnt_nameops;
MACRO_TR TR___nis_get_server;
MACRO_TR TR___nis_init_callback;
MACRO_TR TR___nis_librand;
MACRO_TR TR___nis_map_group;
MACRO_TR TR___nis_path_list;
MACRO_TR TR___nis_pingproc;
MACRO_TR TR___nis_run_callback;
MACRO_TR TR___nis_tagproc;
MACRO_TR TR___remove_entry;
MACRO_TR TR___remove_group;
MACRO_TR TR___rpc_dtbsize;
MACRO_TR TR___rpc_endconf;
MACRO_TR TR___rpc_get_a_size;
MACRO_TR TR___rpc_get_default_domain;
MACRO_TR TR___rpc_get_local_uid;
MACRO_TR TR___rpc_get_t_size;
MACRO_TR TR___rpc_getconf;
MACRO_TR TR___rpc_getconfip;
MACRO_TR TR___rpc_negotiate_uid;
MACRO_TR TR___rpc_openchild;
MACRO_TR TR___rpc_select_to_poll;
MACRO_TR TR___rpc_setconf;
MACRO_TR TR___rpc_timeval_to_msec;
MACRO_TR TR___rpc_trace;
MACRO_TR TR___rpcgettp;
MACRO_TR TR___seterr_reply;
MACRO_TR TR___simple_lookup;
MACRO_TR TR___stop_clock;
MACRO_TR TR___svc_versquiet_get;
MACRO_TR TR___svc_versquiet_off;
MACRO_TR TR___svc_versquiet_on;
MACRO_TR TR___svcauth_des;
MACRO_TR TR___svcauth_null;
MACRO_TR TR___svcauth_short;
MACRO_TR TR___svcauth_sys;
MACRO_TR TR___svcauth_unix;
MACRO_TR TR___yp_dobind;
MACRO_TR TR__alloc_buf;
MACRO_TR TR__dummy;
MACRO_TR TR__nss_initf_authattr;
MACRO_TR TR__nss_initf_auuser;
MACRO_TR TR__nss_initf_execattr;
MACRO_TR TR__nss_initf_hosts;
MACRO_TR TR__nss_initf_profattr;
MACRO_TR TR__nss_initf_rpc;
MACRO_TR TR__nss_initf_userattr;
MACRO_TR TR__null_tiptr;
MACRO_TR TR__rcv_conn_con;
MACRO_TR TR__snd_conn_req;
MACRO_TR TR__switch_gethostbyaddr_r;
MACRO_TR TR__switch_gethostbyname_r;
MACRO_TR TR__t_aligned_copy;
MACRO_TR TR__t_alloc_bufs;
MACRO_TR TR__t_blocksigpoll;
MACRO_TR TR__t_checkfd;
MACRO_TR TR__t_do_ioctl;
MACRO_TR TR__t_is_event;
MACRO_TR TR__t_is_ok;
MACRO_TR TR__t_look_locked;
MACRO_TR TR__t_max;
MACRO_TR TR__t_putback;
MACRO_TR TR__t_restore_state;
MACRO_TR TR__t_setsize;
MACRO_TR TR__td_setnodelay;
MACRO_TR TR_accepted;
MACRO_TR TR_addProto;
MACRO_TR TR_add_cache;
MACRO_TR TR_add_entry_1;
MACRO_TR TR_additem;
MACRO_TR TR_alarmtr;
MACRO_TR TR_altconn;
MACRO_TR TR_ask;
MACRO_TR TR_assert;
MACRO_TR TR_auth_destroy;
MACRO_TR TR_auth_errmsg;
MACRO_TR TR_authdes_create;
MACRO_TR TR_authdes_destroy;
MACRO_TR TR_authdes_getucred;
MACRO_TR TR_authdes_marshal;
MACRO_TR TR_authdes_nextverf;
MACRO_TR TR_authdes_ops;
MACRO_TR TR_authdes_pk_seccreate;
MACRO_TR TR_authdes_refresh;
MACRO_TR TR_authdes_seccreate;
MACRO_TR TR_authdes_validate;
MACRO_TR TR_authnone_create;
MACRO_TR TR_authnone_destroy;
MACRO_TR TR_authnone_marshal;
MACRO_TR TR_authnone_ops;
MACRO_TR TR_authnone_refresh;
MACRO_TR TR_authnone_validate;
MACRO_TR TR_authnone_verf;
MACRO_TR TR_authsys_create;
MACRO_TR TR_authsys_create_default;
MACRO_TR TR_authsys_destroy;
MACRO_TR TR_authsys_marshal;
MACRO_TR TR_authsys_nextverf;
MACRO_TR TR_authsys_ops;
MACRO_TR TR_authsys_refresh;
MACRO_TR TR_authsys_validate;
MACRO_TR TR_bin2hex;
MACRO_TR TR_bindresvport;
MACRO_TR TR_blank;
MACRO_TR TR_bsfix;
MACRO_TR TR_cache_get;
MACRO_TR TR_cache_init;
MACRO_TR TR_cache_ref;
MACRO_TR TR_cache_set;
MACRO_TR TR_cache_spot;
MACRO_TR TR_cache_victim;
MACRO_TR TR_calchash;
MACRO_TR TR_callrpc;
MACRO_TR TR_cbc_crypt;
MACRO_TR TR_chat;
MACRO_TR TR_check_binding;
MACRO_TR TR_check_cache;
MACRO_TR TR_check_version;
MACRO_TR TR_chkblk;
MACRO_TR TR_cklock;
MACRO_TR TR_classmatch;
MACRO_TR TR_cleanup;
MACRO_TR TR_clnt_broadcast;
MACRO_TR TR_clnt_call;
MACRO_TR TR_clnt_com_create;
MACRO_TR TR_clnt_control;
MACRO_TR TR_clnt_create;
MACRO_TR TR_clnt_create_vers;
MACRO_TR TR_clnt_create_vers_timed;
MACRO_TR TR_clnt_destroy;
MACRO_TR TR_clnt_dg_abort;
MACRO_TR TR_clnt_dg_call;
MACRO_TR TR_clnt_dg_control;
MACRO_TR TR_clnt_dg_create;
MACRO_TR TR_clnt_dg_destroy;
MACRO_TR TR_clnt_dg_freeres;
MACRO_TR TR_clnt_dg_geterr;
MACRO_TR TR_clnt_dg_ops;
MACRO_TR TR_clnt_freeres;
MACRO_TR TR_clnt_geterr;
MACRO_TR TR_clnt_pcreateerror;
MACRO_TR TR_clnt_perrno;
MACRO_TR TR_clnt_perror;
MACRO_TR TR_clnt_raw_abort;
MACRO_TR TR_clnt_raw_call;
MACRO_TR TR_clnt_raw_control;
MACRO_TR TR_clnt_raw_create;
MACRO_TR TR_clnt_raw_destroy;
MACRO_TR TR_clnt_raw_freeres;
MACRO_TR TR_clnt_raw_geterr;
MACRO_TR TR_clnt_raw_ops;
MACRO_TR TR_clnt_spcreateerror;
MACRO_TR TR_clnt_sperrno;
MACRO_TR TR_clnt_sperror;
MACRO_TR TR_clnt_tli_create;
MACRO_TR TR_clnt_tp_create;
MACRO_TR TR_clnt_vc_abort;
MACRO_TR TR_clnt_vc_call;
MACRO_TR TR_clnt_vc_control;
MACRO_TR TR_clnt_vc_create;
MACRO_TR TR_clnt_vc_destroy;
MACRO_TR TR_clnt_vc_freeres;
MACRO_TR TR_clnt_vc_geterr;
MACRO_TR TR_clnt_vc_ops;
MACRO_TR TR_clntraw_create;
MACRO_TR TR_clnttcp_create;
MACRO_TR TR_clntudp_bufcreate;
MACRO_TR TR_clntudp_create;
MACRO_TR TR_cmpdatum;
MACRO_TR TR_comment;
MACRO_TR TR_common_crypt;
MACRO_TR TR_conn;
MACRO_TR TR_currdev;
MACRO_TR TR_currdial;
MACRO_TR TR_currsys;
MACRO_TR TR_dbm_access;
MACRO_TR TR_dbmclose;
MACRO_TR TR_dbmflush;
MACRO_TR TR_dbminit;
MACRO_TR TR_delete;
MACRO_TR TR_delete_cache;
MACRO_TR TR_delitem;
MACRO_TR TR_delock;
MACRO_TR TR_des_setparity;
MACRO_TR TR_detachnode;
MACRO_TR TR_devreset;
MACRO_TR TR_dial;
MACRO_TR TR_dial801;
MACRO_TR TR_dialreset;
MACRO_TR TR_dkbreak;
MACRO_TR TR_dkcall;
MACRO_TR TR_dkdial;
MACRO_TR TR_dkerr;
MACRO_TR TR_dkerrmap;
MACRO_TR TR_dkminor;
MACRO_TR TR_dkndial;
MACRO_TR TR_dksetup;
MACRO_TR TR_dkteardown;
MACRO_TR TR_do_accept;
MACRO_TR TR_doassign;
MACRO_TR TR_dobase;
MACRO_TR TR_doconfig;
MACRO_TR TR_dofirst;
MACRO_TR TR_domaster;
MACRO_TR TR_domatch;
MACRO_TR TR_donext;
MACRO_TR TR_doorder;
MACRO_TR TR_dopop;
MACRO_TR TR_dopush;
MACRO_TR TR_dorun;
MACRO_TR TR_dots_in_name;
MACRO_TR TR_dtnamer;
MACRO_TR TR_eaccess;
MACRO_TR TR_eatwhite;
MACRO_TR TR_ecb_crypt;
MACRO_TR TR_endauthattr;
MACRO_TR TR_endauuser;
MACRO_TR TR_endexecattr;
MACRO_TR TR_endhostent;
MACRO_TR TR_endnetconfig;
MACRO_TR TR_endnetpath;
MACRO_TR TR_endprofattr;
MACRO_TR TR_endrpcent;
MACRO_TR TR_enduserattr;
MACRO_TR TR_err_conv;
MACRO_TR TR_expect;
MACRO_TR TR_exphone;
MACRO_TR TR_extract_secret;
MACRO_TR TR_fd_cklock;
MACRO_TR TR_fd_mklock;
MACRO_TR TR_fd_rmlock;
MACRO_TR TR_fdig;
MACRO_TR TR_fetch;
MACRO_TR TR_ffs;
MACRO_TR TR_fgetnetconfig;
MACRO_TR TR_fill_input_buf;
MACRO_TR TR_findProto;
MACRO_TR TR_finds;
MACRO_TR TR_firsthash;
MACRO_TR TR_firstkey;
MACRO_TR TR_fix_buf_size;
MACRO_TR TR_fixline;
MACRO_TR TR_flush_out;
MACRO_TR TR_fn_cklock;
MACRO_TR TR_forder;
MACRO_TR TR_free_entry;
MACRO_TR TR_free_name_item;
MACRO_TR TR_freenetconfigent;
MACRO_TR TR_freenode;
MACRO_TR TR_gdial;
MACRO_TR TR_getProto;
MACRO_TR TR_get_default_domain;
MACRO_TR TR_get_input_bytes;
MACRO_TR TR_get_myaddress;
MACRO_TR TR_getargs;
MACRO_TR TR_getauthattr;
MACRO_TR TR_getauthnam;
MACRO_TR TR_getauuser;
MACRO_TR TR_getauusernam;
MACRO_TR TR_getbit;
MACRO_TR TR_getbroadcastnets;
MACRO_TR TR_getbyte;
MACRO_TR TR_getclnt;
MACRO_TR TR_getclnthandle;
MACRO_TR TR_getdesfd;
MACRO_TR TR_getdevline;
MACRO_TR TR_getdialline;
MACRO_TR TR_getdomainname;
MACRO_TR TR_getexecattr;
MACRO_TR TR_getexecprof;
MACRO_TR TR_getflag;
MACRO_TR TR_getgroups;
MACRO_TR TR_gethostbyaddr;
MACRO_TR TR_gethostbyaddr_r;
MACRO_TR TR_gethostbynamadr;
MACRO_TR TR_gethostbyname;
MACRO_TR TR_gethostbyname_r;
MACRO_TR TR_gethostent;
MACRO_TR TR_gethostent_r;
MACRO_TR TR_gethostname;
MACRO_TR TR_getkeys_files;
MACRO_TR TR_getkeys_nis;
MACRO_TR TR_getkeys_nisplus;
MACRO_TR TR_getkeyserv_handle;
MACRO_TR TR_getline;
MACRO_TR TR_getlookups;
MACRO_TR TR_getname;
MACRO_TR TR_getnetconfig;
MACRO_TR TR_getnetconfigent;
MACRO_TR TR_getnetid;
MACRO_TR TR_getnetid_files;
MACRO_TR TR_getnetid_nis;
MACRO_TR TR_getnetid_nisplus;
MACRO_TR TR_getnetlist;
MACRO_TR TR_getnetname;
MACRO_TR TR_getnetpath;
MACRO_TR TR_getnettype;
MACRO_TR TR_getnlookups;
MACRO_TR TR_getpop;
MACRO_TR TR_getprofattr;
MACRO_TR TR_getprofnam;
MACRO_TR TR_getpublicandprivatekey;
MACRO_TR TR_getpublickey;
MACRO_TR TR_getpush;
MACRO_TR TR_getrpcbyname;
MACRO_TR TR_getrpcbyname_r;
MACRO_TR TR_getrpcbynumber;
MACRO_TR TR_getrpcbynumber_r;
MACRO_TR TR_getrpcent;
MACRO_TR TR_getrpcent_r;
MACRO_TR TR_getsecretkey;
MACRO_TR TR_getsysline;
MACRO_TR TR_getto;
MACRO_TR TR_gettoken;
MACRO_TR TR_getuserattr;
MACRO_TR TR_getusernam;
MACRO_TR TR_getvalue;
MACRO_TR TR_got_entry;
MACRO_TR TR_harmless;
MACRO_TR TR_hashinc;
MACRO_TR TR_hex2bin;
MACRO_TR TR_hexval;
MACRO_TR TR_host2netname;
MACRO_TR TR_ifdate;
MACRO_TR TR_inet_addr;
MACRO_TR TR_inet_netof;
MACRO_TR TR_inet_ntoa;
MACRO_TR TR_interface;
MACRO_TR TR_invalidate;
MACRO_TR TR_ioctl;
MACRO_TR TR_key_call;
MACRO_TR TR_key_decryptsession;
MACRO_TR TR_key_decryptsession_pk;
MACRO_TR TR_key_encryptsession;
MACRO_TR TR_key_encryptsession_pk;
MACRO_TR TR_key_gendes;
MACRO_TR TR_key_get_conv;
MACRO_TR TR_key_secretkey_is_set;
MACRO_TR TR_key_setsecret;
MACRO_TR TR_load_dom_binding;
MACRO_TR TR_load_xlate;
MACRO_TR TR_local_rpcb;
MACRO_TR TR_logent;
MACRO_TR TR_makdatum;
MACRO_TR TR_makefd_xprt;
MACRO_TR TR_makenode;
MACRO_TR TR_marshal_new_auth;
MACRO_TR TR_memcp;
MACRO_TR TR_mergeProto;
MACRO_TR TR_mklock;
MACRO_TR TR_mlock;
MACRO_TR TR_msgout;
MACRO_TR TR_namematch;
MACRO_TR TR_nameparse;
MACRO_TR TR_nap;
MACRO_TR TR_nc_perror;
MACRO_TR TR_nc_sperror;
MACRO_TR TR_negotiate_broadcast;
MACRO_TR TR_netconfig_dup;
MACRO_TR TR_netconfig_free;
MACRO_TR TR_netdir_free;
MACRO_TR TR_netdir_getbyaddr;
MACRO_TR TR_netdir_getbyname;
MACRO_TR TR_netdir_options;
MACRO_TR TR_netdir_perror;
MACRO_TR TR_netdir_sperror;
MACRO_TR TR_netlist_free;
MACRO_TR TR_netname2host;
MACRO_TR TR_netname2user;
MACRO_TR TR_netname2user_files;
MACRO_TR TR_netname2user_nis;
MACRO_TR TR_netname2user_nisplus;
MACRO_TR TR_newborn;
MACRO_TR TR_nextProto;
MACRO_TR TR_nextdevices;
MACRO_TR TR_nextdialers;
MACRO_TR TR_nextkey;
MACRO_TR TR_nextsystems;
MACRO_TR TR_nis_add;
MACRO_TR TR_nis_add_clnt;
MACRO_TR TR_nis_add_entry;
MACRO_TR TR_nis_addmember;
MACRO_TR TR_nis_callback_clnt;
MACRO_TR TR_nis_checkpoint;
MACRO_TR TR_nis_checkpoint_clnt;
MACRO_TR TR_nis_clone_object;
MACRO_TR TR_nis_cptime_clnt;
MACRO_TR TR_nis_creategroup;
MACRO_TR TR_nis_data;
MACRO_TR TR_nis_destroy_object;
MACRO_TR TR_nis_destroygroup;
MACRO_TR TR_nis_dir_cmp;
MACRO_TR TR_nis_domain_of;
MACRO_TR TR_nis_dump;
MACRO_TR TR_nis_dump_clnt;
MACRO_TR TR_nis_dumplog;
MACRO_TR TR_nis_dumplog_clnt;
MACRO_TR TR_nis_find_item;
MACRO_TR TR_nis_finddirectory;
MACRO_TR TR_nis_finddirectory_clnt;
MACRO_TR TR_nis_first_entry;
MACRO_TR TR_nis_flush_namelist;
MACRO_TR TR_nis_flush_table;
MACRO_TR TR_nis_flushgroups;
MACRO_TR TR_nis_free_request;
MACRO_TR TR_nis_freenames;
MACRO_TR TR_nis_freeresult;
MACRO_TR TR_nis_freeservlist;
MACRO_TR TR_nis_get_object;
MACRO_TR TR_nis_get_request;
MACRO_TR TR_nis_get_static_storage;
MACRO_TR TR_nis_getdtblsize;
MACRO_TR TR_nis_getnames;
MACRO_TR TR_nis_getservlist;
MACRO_TR TR_nis_ibadd_clnt;
MACRO_TR TR_nis_ibfirst_clnt;
MACRO_TR TR_nis_iblist_clnt;
MACRO_TR TR_nis_ibmodify_clnt;
MACRO_TR TR_nis_ibnext_clnt;
MACRO_TR TR_nis_ibremove_clnt;
MACRO_TR TR_nis_in_table;
MACRO_TR TR_nis_insert_item;
MACRO_TR TR_nis_insert_name;
MACRO_TR TR_nis_ismember;
MACRO_TR TR_nis_leaf_of;
MACRO_TR TR_nis_lerror;
MACRO_TR TR_nis_list;
MACRO_TR TR_nis_local_directory;
MACRO_TR TR_nis_local_group;
MACRO_TR TR_nis_local_host;
MACRO_TR TR_nis_local_principal;
MACRO_TR TR_nis_lookup;
MACRO_TR TR_nis_lookup_clnt;
MACRO_TR TR_nis_make_error;
MACRO_TR TR_nis_make_rpchandle;
MACRO_TR TR_nis_mkdir;
MACRO_TR TR_nis_mkdir_clnt;
MACRO_TR TR_nis_modify;
MACRO_TR TR_nis_modify_clnt;
MACRO_TR TR_nis_modify_entry;
MACRO_TR TR_nis_name_of;
MACRO_TR TR_nis_next_entry;
MACRO_TR TR_nis_perror;
MACRO_TR TR_nis_ping;
MACRO_TR TR_nis_ping_clnt;
MACRO_TR TR_nis_pop_item;
MACRO_TR TR_nis_print_directory;
MACRO_TR TR_nis_print_entry;
MACRO_TR TR_nis_print_group;
MACRO_TR TR_nis_print_group_entry;
MACRO_TR TR_nis_print_link;
MACRO_TR TR_nis_print_object;
MACRO_TR TR_nis_print_rights;
MACRO_TR TR_nis_print_server;
MACRO_TR TR_nis_print_table;
MACRO_TR TR_nis_read_obj;
MACRO_TR TR_nis_remove;
MACRO_TR TR_nis_remove_clnt;
MACRO_TR TR_nis_remove_entry;
MACRO_TR TR_nis_remove_item;
MACRO_TR TR_nis_remove_name;
MACRO_TR TR_nis_removemember;
MACRO_TR TR_nis_rmdir;
MACRO_TR TR_nis_rmdir_clnt;
MACRO_TR TR_nis_servstate;
MACRO_TR TR_nis_servstate_clnt;
MACRO_TR TR_nis_sperrno;
MACRO_TR TR_nis_sperror;
MACRO_TR TR_nis_stats;
MACRO_TR TR_nis_status_clnt;
MACRO_TR TR_nis_verifygroup;
MACRO_TR TR_nis_write_obj;
MACRO_TR TR_notin;
MACRO_TR TR_onelock;
MACRO_TR TR_open801;
MACRO_TR TR_parse_gidlist;
MACRO_TR TR_parse_netid_str;
MACRO_TR TR_parse_uid;
MACRO_TR TR_parse_uid_gidlist;
MACRO_TR TR_parsedata;
MACRO_TR TR_passwd2des;
MACRO_TR TR_pmap_getmaps;
MACRO_TR TR_pmap_getport;
MACRO_TR TR_pmap_rmtcall;
MACRO_TR TR_pmap_set;
MACRO_TR TR_pmap_unset;
MACRO_TR TR_pop_push;
MACRO_TR TR_print_column;
MACRO_TR TR_processdev;
MACRO_TR TR_prog_dispatch;
MACRO_TR TR_protoString;
MACRO_TR TR_rddev;
MACRO_TR TR_read_coldstart_1;
MACRO_TR TR_read_vc;
MACRO_TR TR_registerrpc;
MACRO_TR TR_rejected;
MACRO_TR TR_removeProto;
MACRO_TR TR_remove_entry_1;
MACRO_TR TR_rendezvous_control;
MACRO_TR TR_rendezvous_request;
MACRO_TR TR_rendezvous_stat;
MACRO_TR TR_repphone;
MACRO_TR TR_restline;
MACRO_TR TR_rmlock;
MACRO_TR TR_rpc_broadcast;
MACRO_TR TR_rpc_call;
MACRO_TR TR_rpc_nullproc;
MACRO_TR TR_rpc_reg;
MACRO_TR TR_rpc_wrap_bcast;
MACRO_TR TR_rpcb_findaddr;
MACRO_TR TR_rpcb_getaddr;
MACRO_TR TR_rpcb_getmaps;
MACRO_TR TR_rpcb_gettime;
MACRO_TR TR_rpcb_rmtcall;
MACRO_TR TR_rpcb_set;
MACRO_TR TR_rpcb_taddr2uaddr;
MACRO_TR TR_rpcb_uaddr2taddr;
MACRO_TR TR_rpcb_unset;
MACRO_TR TR_rtime_tli;
MACRO_TR TR_savline;
MACRO_TR TR_scancfg;
MACRO_TR TR_scansys;
MACRO_TR TR_sendthem;
MACRO_TR TR_set_input_fragment;
MACRO_TR TR_setalarm;
MACRO_TR TR_setauthattr;
MACRO_TR TR_setauuser;
MACRO_TR TR_setbit;
MACRO_TR TR_setconfig;
MACRO_TR TR_setdevcfg;
MACRO_TR TR_setdomainname;
MACRO_TR TR_setexecattr;
MACRO_TR TR_setfile;
MACRO_TR TR_sethostent;
MACRO_TR TR_sethup;
MACRO_TR TR_setioctl;
MACRO_TR TR_setline;
MACRO_TR TR_setnetconfig;
MACRO_TR TR_setnetpath;
MACRO_TR TR_setprofattr;
MACRO_TR TR_setrpcent;
MACRO_TR TR_setservice;
MACRO_TR TR_setuserattr;
MACRO_TR TR_shift1left;
MACRO_TR TR_show_tlook;
MACRO_TR TR_skip_input_bytes;
MACRO_TR TR_stlock;
MACRO_TR TR_stoa;
MACRO_TR TR_store;
MACRO_TR TR_str2authattr;
MACRO_TR TR_str2auuser;
MACRO_TR TR_str2execattr;
MACRO_TR TR_str2hostent;
MACRO_TR TR_str2profattr;
MACRO_TR TR_str2rpcent;
MACRO_TR TR_str2userattr;
MACRO_TR TR_strecpy;
MACRO_TR TR_strlocase;
MACRO_TR TR_strsave;
MACRO_TR TR_svc_auth_reg;
MACRO_TR TR_svc_com_create;
MACRO_TR TR_svc_control;
MACRO_TR TR_svc_create;
MACRO_TR TR_svc_destroy;
MACRO_TR TR_svc_dg_control;
MACRO_TR TR_svc_dg_create;
MACRO_TR TR_svc_dg_destroy;
MACRO_TR TR_svc_dg_enablecache;
MACRO_TR TR_svc_dg_freeargs;
MACRO_TR TR_svc_dg_getargs;
MACRO_TR TR_svc_dg_ops;
MACRO_TR TR_svc_dg_recv;
MACRO_TR TR_svc_dg_reply;
MACRO_TR TR_svc_dg_stat;
MACRO_TR TR_svc_exit;
MACRO_TR TR_svc_fd_create;
MACRO_TR TR_svc_find;
MACRO_TR TR_svc_freeargs;
MACRO_TR TR_svc_getargs;
MACRO_TR TR_svc_getreq;
MACRO_TR TR_svc_getreq_common;
MACRO_TR TR_svc_getreq_poll;
MACRO_TR TR_svc_getreqset;
MACRO_TR TR_svc_getrpccaller;
MACRO_TR TR_svc_raw_control;
MACRO_TR TR_svc_raw_create;
MACRO_TR TR_svc_raw_destroy;
MACRO_TR TR_svc_raw_freeargs;
MACRO_TR TR_svc_raw_getargs;
MACRO_TR TR_svc_raw_ops;
MACRO_TR TR_svc_raw_recv;
MACRO_TR TR_svc_raw_reply;
MACRO_TR TR_svc_raw_stat;
MACRO_TR TR_svc_reg;
MACRO_TR TR_svc_register;
MACRO_TR TR_svc_run;
MACRO_TR TR_svc_sendreply;
MACRO_TR TR_svc_tli_create;
MACRO_TR TR_svc_tp_create;
MACRO_TR TR_svc_unreg;
MACRO_TR TR_svc_unregister;
MACRO_TR TR_svc_vc_control;
MACRO_TR TR_svc_vc_create;
MACRO_TR TR_svc_vc_destroy;
MACRO_TR TR_svc_vc_freeargs;
MACRO_TR TR_svc_vc_getargs;
MACRO_TR TR_svc_vc_ops;
MACRO_TR TR_svc_vc_recv;
MACRO_TR TR_svc_vc_rendezvous_ops;
MACRO_TR TR_svc_vc_reply;
MACRO_TR TR_svc_vc_stat;
MACRO_TR TR_svc_versquiet;
MACRO_TR TR_svcerr_auth;
MACRO_TR TR_svcerr_decode;
MACRO_TR TR_svcerr_noproc;
MACRO_TR TR_svcerr_noprog;
MACRO_TR TR_svcerr_progvers;
MACRO_TR TR_svcerr_systemerr;
MACRO_TR TR_svcerr_weakauth;
MACRO_TR TR_svcfd_create;
MACRO_TR TR_svcraw_create;
MACRO_TR TR_svctcp_create;
MACRO_TR TR_svcudp_bufcreate;
MACRO_TR TR_svcudp_create;
MACRO_TR TR_synchronize;
MACRO_TR TR_sysaccess;
MACRO_TR TR_sysreset;
MACRO_TR TR_sytcall;
MACRO_TR TR_sytfix2line;
MACRO_TR TR_sytfixline;
MACRO_TR TR_t_accept;
MACRO_TR TR_t_alloc;
MACRO_TR TR_t_bind;
MACRO_TR TR_t_close;
MACRO_TR TR_t_connect;
MACRO_TR TR_t_error;
MACRO_TR TR_t_free;
MACRO_TR TR_t_getinfo;
MACRO_TR TR_t_getname;
MACRO_TR TR_t_getstate;
MACRO_TR TR_t_listen;
MACRO_TR TR_t_look;
MACRO_TR TR_t_open;
MACRO_TR TR_t_optmgmt;
MACRO_TR TR_t_rcv;
MACRO_TR TR_t_rcvall;
MACRO_TR TR_t_rcvconnect;
MACRO_TR TR_t_rcvdis;
MACRO_TR TR_t_rcvrel;
MACRO_TR TR_t_rcvreldata;
MACRO_TR TR_t_rcvudata;
MACRO_TR TR_t_rcvuderr;
MACRO_TR TR_t_rcvv;
MACRO_TR TR_t_rcvvudata;
MACRO_TR TR_t_snd;
MACRO_TR TR_t_snddis;
MACRO_TR TR_t_sndrel;
MACRO_TR TR_t_sndreldata;
MACRO_TR TR_t_sndudata;
MACRO_TR TR_t_sndv;
MACRO_TR TR_t_sndvudata;
MACRO_TR TR_t_sync;
MACRO_TR TR_t_sysconf;
MACRO_TR TR_t_unbind;
MACRO_TR TR_taddr2uaddr;
MACRO_TR TR_tcpcall;
MACRO_TR TR_tfaillog;
MACRO_TR TR_time_not_ok;
MACRO_TR TR_timout;
MACRO_TR TR_tioctl;
MACRO_TR TR_tlicall;
MACRO_TR TR_tokenize;
MACRO_TR TR_translate;
MACRO_TR TR_tread;
MACRO_TR TR_tsetup;
MACRO_TR TR_tssetup;
MACRO_TR TR_tteardown;
MACRO_TR TR_ttygenbrk;
MACRO_TR TR_twrite;
MACRO_TR TR_uaddr2taddr;
MACRO_TR TR_undial;
MACRO_TR TR_unetcall;
MACRO_TR TR_universal;
MACRO_TR TR_user2netname;
MACRO_TR TR_user2netname_nis;
MACRO_TR TR_user2netname_nisplus;
MACRO_TR TR_usetup;
MACRO_TR TR_usingypmap;
MACRO_TR TR_usralarm;
MACRO_TR TR_uteardown;
MACRO_TR TR_wrchr;
MACRO_TR TR_write_vc;
MACRO_TR TR_wrstr;
MACRO_TR TR_x_destroy;
MACRO_TR TR_x_getpostn;
MACRO_TR TR_x_inline;
MACRO_TR TR_x_putbytes;
MACRO_TR TR_x_putlong;
MACRO_TR TR_x_setpostn;
MACRO_TR TR_xdecrypt;
MACRO_TR TR_xdr_accepted_reply;
MACRO_TR TR_xdr_array;
MACRO_TR TR_xdr_authdes_cred;
MACRO_TR TR_xdr_authdes_verf;
MACRO_TR TR_xdr_authkern;
MACRO_TR TR_xdr_authsys_parms;
MACRO_TR TR_xdr_bool;
MACRO_TR TR_xdr_bytes;
MACRO_TR TR_xdr_callhdr;
MACRO_TR TR_xdr_callmsg;
MACRO_TR TR_xdr_cback_data;
MACRO_TR TR_xdr_char;
MACRO_TR TR_xdr_cp_result;
MACRO_TR TR_xdr_cryptkeyarg;
MACRO_TR TR_xdr_cryptkeyres;
MACRO_TR TR_xdr_datum;
MACRO_TR TR_xdr_des_block;
MACRO_TR TR_xdr_destroy;
MACRO_TR TR_xdr_directory_obj;
MACRO_TR TR_xdr_double;
MACRO_TR TR_xdr_dump_args;
MACRO_TR TR_xdr_endpoint;
MACRO_TR TR_xdr_entry_col;
MACRO_TR TR_xdr_entry_obj;
MACRO_TR TR_xdr_enum;
MACRO_TR TR_xdr_fd_args;
MACRO_TR TR_xdr_fd_result;
MACRO_TR TR_xdr_float;
MACRO_TR TR_xdr_free;
MACRO_TR TR_xdr_getcredres;
MACRO_TR TR_xdr_getpos;
MACRO_TR TR_xdr_gid_t;
MACRO_TR TR_xdr_group_obj;
MACRO_TR TR_xdr_hyper;
MACRO_TR TR_xdr_ib_request;
MACRO_TR TR_xdr_inline;
MACRO_TR TR_xdr_int;
MACRO_TR TR_xdr_keybuf;
MACRO_TR TR_xdr_keystatus;
MACRO_TR TR_xdr_link_obj;
MACRO_TR TR_xdr_log_entry;
MACRO_TR TR_xdr_log_entry_t;
MACRO_TR TR_xdr_log_result;
MACRO_TR TR_xdr_long;
MACRO_TR TR_xdr_longlong_t;
MACRO_TR TR_xdr_netbuf;
MACRO_TR TR_xdr_netconfig;
MACRO_TR TR_xdr_netnamestr;
MACRO_TR TR_xdr_netobj;
MACRO_TR TR_xdr_nis_attr;
MACRO_TR TR_xdr_nis_error;
MACRO_TR TR_xdr_nis_name;
MACRO_TR TR_xdr_nis_object;
MACRO_TR TR_xdr_nis_oid;
MACRO_TR TR_xdr_nis_result;
MACRO_TR TR_xdr_nis_server;
MACRO_TR TR_xdr_nis_tag;
MACRO_TR TR_xdr_nis_taglist;
MACRO_TR TR_xdr_ns_request;
MACRO_TR TR_xdr_nstype;
MACRO_TR TR_xdr_oar_mask;
MACRO_TR TR_xdr_obj_p;
MACRO_TR TR_xdr_objdata;
MACRO_TR TR_xdr_opaque;
MACRO_TR TR_xdr_opaque_auth;
MACRO_TR TR_xdr_ping_args;
MACRO_TR TR_xdr_pmap;
MACRO_TR TR_xdr_pmaplist;
MACRO_TR TR_xdr_pmaplist_ptr;
MACRO_TR TR_xdr_pointer;
MACRO_TR TR_xdr_quadruple;
MACRO_TR TR_xdr_reference;
MACRO_TR TR_xdr_rejected_reply;
MACRO_TR TR_xdr_replymsg;
MACRO_TR TR_xdr_rmtcall_args;
MACRO_TR TR_xdr_rmtcallargs;
MACRO_TR TR_xdr_rmtcallres;
MACRO_TR TR_xdr_rpcb;
MACRO_TR TR_xdr_rpcb_addrp;
MACRO_TR TR_xdr_rpcb_entry;
MACRO_TR TR_xdr_rpcb_entry_list;
MACRO_TR TR_xdr_rpcb_entry_list_ptr;
MACRO_TR TR_xdr_rpcb_rmtcallargs;
MACRO_TR TR_xdr_rpcb_rmtcalllistp;
MACRO_TR TR_xdr_rpcb_rmtcallres;
MACRO_TR TR_xdr_rpcb_stat;
MACRO_TR TR_xdr_rpcb_stat_byvers;
MACRO_TR TR_xdr_rpcblist;
MACRO_TR TR_xdr_rpcblist_ptr;
MACRO_TR TR_xdr_rpcbs_addrlist;
MACRO_TR TR_xdr_rpcbs_addrlist_ptr;
MACRO_TR TR_xdr_rpcbs_proc;
MACRO_TR TR_xdr_rpcbs_rmtcalllist;
MACRO_TR TR_xdr_rpcbs_rmtcalllist_ptr;
MACRO_TR TR_xdr_setpos;
MACRO_TR TR_xdr_short;
MACRO_TR TR_xdr_sizeof;
MACRO_TR TR_xdr_string;
MACRO_TR TR_xdr_table_col;
MACRO_TR TR_xdr_table_obj;
MACRO_TR TR_xdr_u_char;
MACRO_TR TR_xdr_u_hyper;
MACRO_TR TR_xdr_u_int;
MACRO_TR TR_xdr_u_long;
MACRO_TR TR_xdr_u_longlong_t;
MACRO_TR TR_xdr_u_short;
MACRO_TR TR_xdr_uid_t;
MACRO_TR TR_xdr_union;
MACRO_TR TR_xdr_unixcred;
MACRO_TR TR_xdr_vector;
MACRO_TR TR_xdr_void;
MACRO_TR TR_xdr_wrapstring;
MACRO_TR TR_xdr_yp_buf;
MACRO_TR TR_xdr_ypall;
MACRO_TR TR_xdr_ypbind_binding;
MACRO_TR TR_xdr_ypbind_domain;
MACRO_TR TR_xdr_ypbind_resp;
MACRO_TR TR_xdr_ypbind_resptype;
MACRO_TR TR_xdr_ypbind_setdom;
MACRO_TR TR_xdr_ypdelete_args;
MACRO_TR TR_xdr_ypdomain_wrap_string;
MACRO_TR TR_xdr_ypmap_parms;
MACRO_TR TR_xdr_ypmap_wrap_string;
MACRO_TR TR_xdr_ypmaplist;
MACRO_TR TR_xdr_ypmaplist_wrap_string;
MACRO_TR TR_xdr_ypowner_wrap_string;
MACRO_TR TR_xdr_yppushresp_xfr;
MACRO_TR TR_xdr_ypreq_key;
MACRO_TR TR_xdr_ypreq_newname_string;
MACRO_TR TR_xdr_ypreq_newxfr;
MACRO_TR TR_xdr_ypreq_nokey;
MACRO_TR TR_xdr_ypreq_xfr;
MACRO_TR TR_xdr_ypresp_key_val;
MACRO_TR TR_xdr_ypresp_maplist;
MACRO_TR TR_xdr_ypresp_master;
MACRO_TR TR_xdr_ypresp_order;
MACRO_TR TR_xdr_ypresp_val;
MACRO_TR TR_xdr_ypupdate_args;
MACRO_TR TR_xdr_zotypes;
MACRO_TR TR_xdrmbuf_destroy;
MACRO_TR TR_xdrmbuf_getbytes;
MACRO_TR TR_xdrmbuf_getlong;
MACRO_TR TR_xdrmbuf_getmbuf;
MACRO_TR TR_xdrmbuf_getpos;
MACRO_TR TR_xdrmbuf_init;
MACRO_TR TR_xdrmbuf_inline;
MACRO_TR TR_xdrmbuf_putbuf;
MACRO_TR TR_xdrmbuf_putbytes;
MACRO_TR TR_xdrmbuf_putlong;
MACRO_TR TR_xdrmbuf_setpos;
MACRO_TR TR_xdrmem_create;
MACRO_TR TR_xdrmem_destroy;
MACRO_TR TR_xdrmem_getbytes;
MACRO_TR TR_xdrmem_getlong;
MACRO_TR TR_xdrmem_getpos;
MACRO_TR TR_xdrmem_inline;
MACRO_TR TR_xdrmem_ops;
MACRO_TR TR_xdrmem_putbytes;
MACRO_TR TR_xdrmem_putlong;
MACRO_TR TR_xdrmem_setpos;
MACRO_TR TR_xdrrec_create;
MACRO_TR TR_xdrrec_destroy;
MACRO_TR TR_xdrrec_endofrecord;
MACRO_TR TR_xdrrec_eof;
MACRO_TR TR_xdrrec_getbytes;
MACRO_TR TR_xdrrec_getlong;
MACRO_TR TR_xdrrec_getpos;
MACRO_TR TR_xdrrec_inline;
MACRO_TR TR_xdrrec_ops;
MACRO_TR TR_xdrrec_putbytes;
MACRO_TR TR_xdrrec_putlong;
MACRO_TR TR_xdrrec_setpos;
MACRO_TR TR_xdrrec_skiprecord;
MACRO_TR TR_xdrstdio_create;
MACRO_TR TR_xdrstdio_destroy;
MACRO_TR TR_xdrstdio_getbytes;
MACRO_TR TR_xdrstdio_getlong;
MACRO_TR TR_xdrstdio_getpos;
MACRO_TR TR_xdrstdio_inline;
MACRO_TR TR_xdrstdio_ops;
MACRO_TR TR_xdrstdio_putbytes;
MACRO_TR TR_xdrstdio_putlong;
MACRO_TR TR_xdrstdio_setpos;
MACRO_TR TR_xencrypt;
MACRO_TR TR_xfer;
MACRO_TR TR_xprt_register;
MACRO_TR TR_xprt_unregister;
MACRO_TR TR_yp_all;
MACRO_TR TR_yp_bind;
MACRO_TR TR_yp_first;
MACRO_TR TR_yp_get_default_domain;
MACRO_TR TR_yp_master;
MACRO_TR TR_yp_match;
MACRO_TR TR_yp_next;
MACRO_TR TR_yp_order;
MACRO_TR TR_yp_unbind;
MACRO_TR TR_yp_update;
MACRO_TR TR_ypbindproc_domain_3;
MACRO_TR TR_ypbindproc_null_3;
MACRO_TR TR_ypbindproc_setdom_3;
MACRO_TR TR_yperr_string;
MACRO_TR TR_ypprot_err;
MACRO_TSAF TSAF_EXP_QUEUED;
MACRO_TSKPRI TSBACKQ;
MACRO_RCIBRG TSETCLK;
MACRO_TSETCOFF TSETCOFF;
MACRO_TSETCOFF TSETCRBRG;
MACRO_TSETCTSET TSETCRSET;
MACRO_TSETCOFF TSETCTBRG;
MACRO_TSETCTSET TSETCTSET;
MACRO_TSGID TSGID;
MACRO_TSKPRI TSIA;
MACRO_TSKPRI TSIANICED;
MACRO_TSKPRI TSIASET;
MACRO_TSIGN TSIGN;
MACRO_TSIZLEN TSIZLEN;
MACRO_TSKPRI TSKPRI;
MACRO_TSPTYPENUMBER TSPTYPENUMBER;
MACRO_TSPVERSION TSPVERSION;
MACRO_TSP TSP_ACCEPT;
MACRO_TSP TSP_ACK;
MACRO_TSP TSP_ADJTIME;
MACRO_TSP TSP_ANY;
MACRO_TSP TSP_CONFLICT;
MACRO_TSP TSP_DATE;
MACRO_TSP TSP_DATEACK;
MACRO_TSP TSP_DATEREQ;
MACRO_TSP TSP_ELECTION;
MACRO_TSP TSP_MASTERACK;
MACRO_TSP TSP_MASTERREQ;
MACRO_TSP TSP_MASTERUP;
MACRO_TSP TSP_MSITE;
MACRO_TSP TSP_MSITEREQ;
MACRO_TSP TSP_QUIT;
MACRO_TSP TSP_REFUSE;
MACRO_TSP TSP_RESOLVE;
MACRO_TSP TSP_SETTIME;
MACRO_TSP TSP_SLAVEUP;
MACRO_TSP TSP_TEST;
MACRO_TSP TSP_TRACEOFF;
MACRO_TSP TSP_TRACEON;
MACRO_TSRF TSRF_INFO_REQ;
MACRO_TSRF TSRF_IS_EXP_IN_RCVBUF;
MACRO_TSRF TSRF_QLEN_REQ;
MACRO_TSTATECHNG TSTATECHNG;
MACRO_TSTPAT TSTPAT;
MACRO_CONTTYPE TSUID;
MACRO_TSVTX TSVTX;
MACRO_TBADSEQ TSYSERR;
MACRO_TS_TAPE TS_ADDR;
MACRO_TS_LOAD TS_ALLSTART;
MACRO_TS_TAPE TS_BITS;
MACRO_TS_XCLUDE TS_CLOSE;
MACRO_TS_TAPE TS_CLRI;
MACRO_TS_LOAD TS_CREATE;
MACRO_TS_LOAD TS_CSTART;
MACRO_TS_UNBND TS_DATA_XFER;
MACRO_TS_LOAD TS_DONT_SWAP;
MACRO_TS_TAPE TS_END;
MACRO_TS_TAPE TS_EOM;
MACRO_TS_XCLUDE TS_ERASE;
MACRO_TS_XCLUDE TS_FLUSHWAIT;
MACRO_TS TS_FREE;
MACRO_TS_NOCHANGE TS_GETDPSIZE;
MACRO_TS_NOCHANGE TS_GETDPTBL;
MACRO_TS_UNBND TS_IDLE;
MACRO_TS_XCLUDE TS_IFBLOCK;
MACRO_TS_TAPE TS_INODE;
MACRO_TS_INUSE TS_INUSE;
MACRO_TS_XCLUDE TS_ISPTSTTY;
MACRO_TS_LOAD TS_LOAD;
MACRO_TS_XCLUDE TS_MEUC;
MACRO_TS_XCLUDE TS_MREAD;
MACRO_TS_XCLUDE TS_NOCANON;
MACRO_TS_NOCHANGE TS_NOCHANGE;
MACRO_TS_UNBND TS_NOSTATES;
MACRO_TS_INUSE TS_NUM_Q;
MACRO_TS_XCLUDE TS_OFBLOCK;
MACRO_TS TS_ONPROC;
MACRO_TS_LOAD TS_ON_SWAPQ;
MACRO_TS_XCLUDE TS_PLNCH;
MACRO_TS_LOAD TS_PSTART;
MACRO_TS_XCLUDE TS_QUOT;
MACRO_TS_INUSE TS_READER_Q;
MACRO_TS_XCLUDE TS_RESCAN;
MACRO_TS_LOAD TS_RESUME;
MACRO_TS TS_RUN;
MACRO_TS_NOCHANGE TS_SETDPTBL;
MACRO_TS TS_SLEEP;
MACRO_TS_XCLUDE TS_SLNCH;
MACRO_TS_SOFTCAR TS_SOFTCAR;
MACRO_TS TS_STOPPED;
MACRO_TS_LOAD TS_SWAPENQ;
MACRO_TS_TAPE TS_TAPE;
MACRO_TS_XCLUDE TS_TBLOCK;
MACRO_TS_XCLUDE TS_TTCR;
MACRO_TS_XCLUDE TS_TTSTOP;
MACRO_TS_UNBND TS_UNBND;
MACRO_TS_LOAD TS_UNPAUSE;
MACRO_TS_UNBND TS_WACK_BREQ;
MACRO_TS_UNBND TS_WACK_CREQ;
MACRO_TS_UNBND TS_WACK_CRES;
MACRO_TS_UNBND TS_WACK_DREQ10;
MACRO_TS_UNBND TS_WACK_DREQ11;
MACRO_TS_UNBND TS_WACK_DREQ6;
MACRO_TS_UNBND TS_WACK_DREQ7;
MACRO_TS_UNBND TS_WACK_DREQ9;
MACRO_TS_UNBND TS_WACK_OPTREQ;
MACRO_TS_UNBND TS_WACK_UREQ;
MACRO_TS_XCLUDE TS_WARNED;
MACRO_TS_UNBND TS_WCON_CREQ;
MACRO_TS_UNBND TS_WIND_ORDREL;
MACRO_TS_UNBND TS_WREQ_ORDREL;
MACRO_TS_UNBND TS_WRES_CIND;
MACRO_TS_INUSE TS_WRITER_Q;
MACRO_TS_INUSE TS_W_IN;
MACRO_TS_INUSE TS_W_OUT;
MACRO_TS_XCLUDE TS_XCLUDE;
MACRO_TS_LOAD TS_XSTART;
MACRO_TS TS_ZOMB;
MACRO_TTIMLEN TTIMLEN;
MACRO_BUSY_0 TTIOW;
MACRO_TTIPRI TTIPRI;
MACRO_TTOPRI TTOPRI;
MACRO_BUSY_0 TTSTOP;
MACRO_BUSY_0 TTXOFF;
MACRO_TTXOHI TTXOHI;
MACRO_EBSIZE TTXOLO;
MACRO_BUSY_0 TTXON;
MACRO_LOGNAME TTYNAME_MAX;
MACRO_TT TT_INTR_ENT;
MACRO_TT TT_INTR_EXIT;
MACRO_TT TT_INTR_RET;
MACRO_TT TT_INTR_RET2;
MACRO_TT TT_OV_BUF;
MACRO_TT TT_OV_BUFK;
MACRO_TT TT_OV_SHR;
MACRO_TT TT_OV_SHRK;
MACRO_TT TT_OV_SYS;
MACRO_TT TT_OV_USR;
MACRO_TT TT_SC_POST;
MACRO_TT TT_SC_RET;
MACRO_TT TT_SC_TRAP;
MACRO_TT TT_SYS_RTT;
MACRO_TT TT_SYS_RTTU;
MACRO_TT TT_UF_FAULT;
MACRO_TT TT_UF_SYS;
MACRO_TT TT_UF_USR;
MACRO_TUEXEC TUEXEC;
MACRO_TUIDLEN TUIDLEN;
MACRO_TUP TUP;
MACRO_TUREAD TUREAD;
MACRO_TUWRITE TUWRITE;
MACRO_TVERSLEN TVERSLEN;
MACRO_TXC TXC_IS_BAUD;
MACRO_INVERT TXC_IS_INVERT;
MACRO_TXC TXC_IS_PLL;
MACRO_TXC TXC_IS_RXC;
MACRO_IS_SYSCLK TXC_IS_SYSCLK;
MACRO_TXC TXC_IS_TXC;
MACRO_INVERT TXD_IS_INVERT;
MACRO_UNLOCK TXTLOCK;
MACRO_TX TX_ABORTED;
MACRO_TX TX_ACTIVE;
MACRO_BAUD TX_BAUD;
MACRO_TX TX_CRC;
MACRO_ENA TX_ENA;
MACRO_TX TX_FLAG;
MACRO_TX_FLOFF TX_FLOFF;
MACRO_TX_FLOFF TX_FLON;
MACRO_TX TX_IDLE;
MACRO_TX TX_LAST;
MACRO_TX_RDY TX_MPTY;
MACRO_TX TX_OFF;
MACRO_TX_RDY TX_RDY;
MACRO_TX TX_RTS;
MACRO_TYPE TYPE_A;
MACRO_TYPE_IP TYPE_BAD_TCP;
MACRO_TYPE_BASIC TYPE_BASIC_LS;
MACRO_TYPE_IP TYPE_COMPRESSED_TCP;
MACRO_TYPE TYPE_E;
MACRO_TYPE_IP TYPE_ERROR;
MACRO_TYPE_BASIC TYPE_EXTENDED_LS;
MACRO_TYPE_BASIC TYPE_HIPP_FP;
MACRO_TYPE TYPE_I;
MACRO_TYPE_IP TYPE_IP;
MACRO_TYPE_BASIC TYPE_IPI3_MASTER;
MACRO_TYPE_BASIC TYPE_IPI3_PEER;
MACRO_TYPE_BASIC TYPE_IPI3_SLAVE;
MACRO_TYPE_BASIC TYPE_IS8802;
MACRO_TYPE_BASIC TYPE_IS8802_SNAP;
MACRO_TYPE TYPE_L;
MACRO_TYPE_NOT TYPE_NOT_SUPPORTED;
MACRO_TYPE_BASIC TYPE_SCSI_FCP;
MACRO_TYPE_BASIC TYPE_SCSI_GPP;
MACRO_TYPE_IP TYPE_UNCOMPRESSED_TCP;
MACRO_TZ TZ_MAX_CHARS;
MACRO_TZ TZ_MAX_LEAPS;
MACRO_TZ TZ_MAX_TIMES;
MACRO_TZ TZ_MAX_TYPES;
MACRO_T_INET_UDP T_ABSREQ;
MACRO_T_ACK T_ACK_ON;
MACRO_T_CLASS0 T_ACTIVEPROTECT;
MACRO_T_INET_UDP T_ADDR;
MACRO_T_CONN T_ADDR_ACK;
MACRO_T_CONN T_ADDR_REQ;
MACRO_T_RESET T_ALIGNMENT;
MACRO_T_INET_UDP T_ALL;
MACRO_T_COTS T_ALLOPT;
MACRO_T_NULL T_ARG;
MACRO_T_RESET T_AST;
MACRO_T_INET_UDP T_BIND;
MACRO_T_CONN T_BIND_ACK;
MACRO_T_CONN T_BIND_REQ;
MACRO_T_OUTPUT T_BLOCK;
MACRO_T_OUTPUT T_BREAK;
MACRO_T_RESET T_BREAKPOINT;
MACRO_T_INET_UDP T_CALL;
MACRO_T_NULL T_CHAR;
MACRO_T_COTS T_CHECK;
MACRO_T_CLASS0 T_CLASS0;
MACRO_T_CLASS0 T_CLASS1;
MACRO_T_CLASS0 T_CLASS2;
MACRO_T_CLASS0 T_CLASS3;
MACRO_T_CLASS0 T_CLASS4;
MACRO_T_RESET T_CLEAN_WINDOWS;
MACRO_T_COTS T_CLTS;
MACRO_T_INET_UDP T_CONNECT;
MACRO_T_CONN T_CONN_CON;
MACRO_T_CONN T_CONN_IND;
MACRO_T_CONN T_CONN_REQ;
MACRO_T_CONN T_CONN_RES;
MACRO_T_COTS T_COTS;
MACRO_T_COTS T_COTS_ORD;
MACRO_T_RESET T_CP_DISABLED;
MACRO_T_RESET T_CP_EXCEPTION;
MACRO_T_INET_UDP T_CRITIC_ECP;
MACRO_T_COTS T_CURRENT;
MACRO_T_INET_UDP T_DATA;
MACRO_T_INET_UDP T_DATAXFER;
MACRO_T_RESET T_DATA_ERROR;
MACRO_T_RESET T_DATA_FAULT;
MACRO_T_CONN T_DATA_IND;
MACRO_T_CONN T_DATA_REQ;
MACRO_T_RESET T_DATA_STORE;
MACRO_T_COTS T_DEFAULT;
MACRO_T_INET_UDP T_DIS;
MACRO_T_CONN T_DISCON_IND;
MACRO_T_CONN T_DISCON_REQ;
MACRO_T_RESET T_DIV0;
MACRO_T_INTR T_DONTBLOCK;
MACRO_T_INTR T_DONTPEND;
MACRO_T_NULL T_DOUBLE;
MACRO_T_NULL T_ENUM;
MACRO_T_CONN T_ERROR_ACK;
MACRO_T_RESET T_ESOFTWARE_TRAP;
MACRO_T_INET_UDP T_EXDATA;
MACRO_T_CONN T_EXDATA_IND;
MACRO_T_CONN T_EXDATA_REQ;
MACRO_T_INET_UDP T_EXPEDITED;
MACRO_T_COTS T_FAILURE;
MACRO_T_RESET T_FAULT;
MACRO_T_RESET T_FIX_ALIGN;
MACRO_T_INET_UDP T_FLASH;
MACRO_T_NULL T_FLOAT;
MACRO_T_RESET T_FLUSH_PCB;
MACRO_T_RESET T_FLUSH_WINDOWS;
MACRO_T_FMT T_FMT;
MACRO_T_FMT_AMPM T_FMT_AMPM;
MACRO_T_RESET T_FP_DISABLED;
MACRO_T_RESET T_FP_EXCEPTION;
MACRO_T_INET T_GARBAGE;
MACRO_T_RESET T_GETCC;
MACRO_T_INET_UDP T_GODATA;
MACRO_T_INET_UDP T_GOEXDATA;
MACRO_T_INET_UDP T_HIREL;
MACRO_T_INET_UDP T_HITHRPT;
MACRO_T_RESET T_HOTPATCH_TRAP;
MACRO_T_RESET T_IDIV0;
MACRO_T_INET_UDP T_IDLE;
MACRO_T_INET_UDP T_IMMEDIATE;
MACRO_T_ACK T_INACT_ON;
MACRO_T_INET_UDP T_INCON;
MACRO_T_INET_UDP T_INETCONTROL;
MACRO_T_INET_UDP T_INET_IP;
MACRO_T_INET T_INET_TCP;
MACRO_T_INET_UDP T_INET_UDP;
MACRO_T_COTS T_INFINITE;
MACRO_T_INET_UDP T_INFO;
MACRO_T_CONN T_INFO_ACK;
MACRO_T_CONN T_INFO_REQ;
MACRO_T_OUTPUT T_INPUT;
MACRO_T_INET_UDP T_INREL;
MACRO_T_RESET T_INTERRUPT;
MACRO_T_INTR T_INTR_THREAD;
MACRO_T_RESET T_INT_LEVEL;
MACRO_T_RESET T_INT_LEVEL_1;
MACRO_T_RESET T_INT_LEVEL_10;
MACRO_T_RESET T_INT_LEVEL_11;
MACRO_T_RESET T_INT_LEVEL_12;
MACRO_T_RESET T_INT_LEVEL_13;
MACRO_T_RESET T_INT_LEVEL_14;
MACRO_T_RESET T_INT_LEVEL_15;
MACRO_T_RESET T_INT_LEVEL_2;
MACRO_T_RESET T_INT_LEVEL_3;
MACRO_T_RESET T_INT_LEVEL_4;
MACRO_T_RESET T_INT_LEVEL_5;
MACRO_T_RESET T_INT_LEVEL_6;
MACRO_T_RESET T_INT_LEVEL_7;
MACRO_T_RESET T_INT_LEVEL_8;
MACRO_T_RESET T_INT_LEVEL_9;
MACRO_T_RESET T_INT_OVERFLOW;
MACRO_T_COTS T_INVALID;
MACRO_T_INET_UDP T_IOV_MAX;
MACRO_T_INET_UDP T_IP_BROADCAST;
MACRO_T_INET_UDP T_IP_DONTROUTE;
MACRO_T_INET_UDP T_IP_OPTIONS;
MACRO_T_INET_UDP T_IP_REUSEADDR;
MACRO_T_INET_UDP T_IP_TOS;
MACRO_T_INET_UDP T_IP_TTL;
MACRO_T_INET_UDP T_LDELAY;
MACRO_T_INET_UDP T_LISTEN;
MACRO_T_INET_UDP T_LOCOST;
MACRO_T_NULL T_LONG;
MACRO_T_CLASS0 T_LTPDUDFLT;
MACRO_T_NULL T_MOE;
MACRO_T_INET_UDP T_MORE;
MACRO_T_COTS T_NEGOTIATE;
MACRO_T_INET_UDP T_NETCONTROL;
MACRO_T_COTS T_NO;
MACRO_T_CLASS0 T_NOPROTECT;
MACRO_T_INET_UDP T_NOTOS;
MACRO_T_COTS T_NOTSUPPORT;
MACRO_T_NULL T_NULL;
MACRO_T_CONN T_OK_ACK;
MACRO_T_INET_UDP T_OPT;
MACRO_T_INET_UDP T_OPTMGMT;
MACRO_T_CONN T_OPTMGMT_ACK;
MACRO_T_CONN T_OPTMGMT_REQ;
MACRO_T_INET_UDP T_ORDREL;
MACRO_T_INET_UDP T_ORDRELDATA;
MACRO_T_CONN T_ORDREL_IND;
MACRO_T_CONN T_ORDREL_REQ;
MACRO_T_RESET T_OSYSCALL;
MACRO_T_INET_UDP T_OUTCON;
MACRO_T_OUTPUT T_OUTPUT;
MACRO_T_INET_UDP T_OUTREL;
MACRO_T_INET_UDP T_OVERRIDEFLASH;
MACRO_T_INTR T_PANIC;
MACRO_T_OUTPUT T_PARM;
MACRO_T_COTS T_PARTSUCCESS;
MACRO_T_CLASS0 T_PASSIVEPROTECT;
MACRO_T_CLASS0 T_PRIDFLT;
MACRO_T_CLASS0 T_PRIHIGH;
MACRO_T_CLASS0 T_PRILOW;
MACRO_T_CLASS0 T_PRIMID;
MACRO_T_INET_UDP T_PRIORITY;
MACRO_T_CLASS0 T_PRITOP;
MACRO_T_RESET T_PRIV_INSTR;
MACRO_T_INET_UDP T_PUSH;
MACRO_T_ACK T_P_ON;
MACRO_T_RESET T_RANGE_CHECK;
MACRO_T_COTS T_READONLY;
MACRO_T_ACK T_REJ_ON;
MACRO_T_ACK T_REM_BUSY_ON;
MACRO_T_RESET T_RESET;
MACRO_T_OUTPUT T_RESUME;
MACRO_T_OUTPUT T_RFLUSH;
MACRO_T_INET_UDP T_ROUTINE;
MACRO_T_INET_UDP T_SENDZERO;
MACRO_T_ACK T_SEND_ACK_ON;
MACRO_T_RESET T_SETCC;
MACRO_T_NULL T_SHORT;
MACRO_T_RESET T_SOFTWARE_TRAP;
MACRO_T_RESET T_SPURIOUS;
MACRO_T_SS2 T_SS2;
MACRO_T_SS2 T_SS3;
MACRO_T_NULL T_STRUCT;
MACRO_T_COTS T_SUCCESS;
MACRO_T_OUTPUT T_SUSPEND;
MACRO_T_CONN T_SVR4_OPTMGMT_REQ;
MACRO_T_OUTPUT T_SWTCH;
MACRO_T_RESET T_SYSCALL;
MACRO_T_INTR T_SYS_PROF;
MACRO_T_RESET T_SYS_RTT_PAGE;
MACRO_T_RESET T_TAG_OVERFLOW;
MACRO_T_INTR T_TALLOCSTK;
MACRO_T_INET T_TCP_KEEPALIVE;
MACRO_T_INET T_TCP_MAXSEG;
MACRO_T_INET T_TCP_NODELAY;
MACRO_T_RESET T_TEXT_ERROR;
MACRO_T_RESET T_TEXT_FAULT;
MACRO_T_OUTPUT T_TIME;
MACRO_T_INTR T_TOMASK;
MACRO_T_NULL T_UCHAR;
MACRO_T_INET_UDP T_UDATA;
MACRO_T_INET_UDP T_UDERR;
MACRO_T_INET_UDP T_UDERROR;
MACRO_T_CONN T_UDERROR_IND;
MACRO_T_INET_UDP T_UDP_CHECKSUM;
MACRO_T_NULL T_UINT;
MACRO_T_NULL T_ULONG;
MACRO_T_CONN T_UNBIND_REQ;
MACRO_T_OUTPUT T_UNBLOCK;
MACRO_T_INET_UDP T_UNBND;
MACRO_T_RESET T_UNIMP_FLUSH;
MACRO_T_RESET T_UNIMP_INSTR;
MACRO_T_INET_UDP T_UNINIT;
MACRO_T_NULL T_UNION;
MACRO_T_INET_UDP T_UNITDATA;
MACRO_T_CONN T_UNITDATA_IND;
MACRO_T_CONN T_UNITDATA_REQ;
MACRO_T_COTS T_UNSPEC;
MACRO_T_INET_UDP T_UNUSED;
MACRO_T_NULL T_USHORT;
MACRO_T_INTR T_WAITCVSEM;
MACRO_T_INTR T_WAKEABLE;
MACRO_T_INTR T_WATCHPT;
MACRO_T_OUTPUT T_WFLUSH;
MACRO_T_RESET T_WIN_OVERFLOW;
MACRO_T_RESET T_WIN_UNDERFLOW;
MACRO_T_INTR T_WOULDBLOCK;
MACRO_T_COTS T_YES;
MACRO_T_RESET T_ZERO;
MACRO_Orientation TextShaping;
MACRO_Orientation TypeOfText;
MACRO_UBSIZE UBSIZE;
MACRO_UCHAR UCHAR_MAX;
MACRO_UCRED UCRED;
MACRO_UC UC_ALL;
MACRO_UC UC_ASR;
MACRO_UC UC_CPU;
MACRO_UC UC_FPU;
MACRO_UC UC_INTR;
MACRO_UC UC_MAU;
MACRO_UC UC_MCONTEXT;
MACRO_UC UC_SIGMASK;
MACRO_UC UC_STACK;
MACRO_UDF UDF_102;
MACRO_UDF UDF_150;
MACRO_UDF UDF_200;
MACRO_UDPMSGSIZE UDPMSGSIZE;
MACRO_UDP_ANONPRIVBIND UDP_ANONPRIVBIND;
MACRO_UDP UDP_CHECKSUM;
MACRO_UDP_ANONPRIVBIND UDP_EXCLBIND;
MACRO_UDP_ANONPRIVBIND UDP_TTL;
MACRO_UD UD_ALLOC_EXT_DESC;
MACRO_UD UD_ANCH_VOL_DESC;
MACRO_UD UD_EXT_ATTR_HDR;
MACRO_UD UD_EXT_FILE_ENT;
MACRO_UD UD_FILE_ENTRY;
MACRO_UD UD_FILE_ID_DESC;
MACRO_UD UD_FILE_SET_DESC;
MACRO_UD UD_IMPL_USE_DESC;
MACRO_UD UD_INDIRECT_ENT;
MACRO_UD UD_LOG_VOL_DESC;
MACRO_UD UD_LOG_VOL_INT;
MACRO_UD UD_PART_DESC;
MACRO_UD UD_PART_INT_DESC;
MACRO_UD UD_PRI_VOL_DESC;
MACRO_UD UD_SPA_BMAP_DESC;
MACRO_UD UD_TERMINAL_ENT;
MACRO_UD UD_TERM_DESC;
MACRO_UD UD_UNALL_SPA_DESC;
MACRO_UD UD_UNALL_SPA_ENT;
MACRO_UD UD_VOL_DESC_PTR;
ufsd_boot_type_t UFSDB_CLEAN;
ufsd_boot_type_t UFSDB_NONE;
ufsd_boot_type_t UFSDB_POSTPANIC;
ufsd_event_t UFSDEV_FSCK;
ufsd_event_t UFSDEV_LOG_OP;
ufsd_event_t UFSDEV_NONE;
ufsd_event_t UFSDEV_REBOOT;
ufsd_fsck_state_t UFSDFS_DISPATCH;
ufsd_fsck_state_t UFSDFS_ERREXIT;
ufsd_fsck_state_t UFSDFS_NONE;
ufsd_fsck_state_t UFSDFS_SUCCESS;
ufsd_log_op_t UFSDLO_COMMIT;
ufsd_log_op_t UFSDLO_GET;
ufsd_log_op_t UFSDLO_NONE;
ufsd_log_op_t UFSDLO_PUT;
ufsd_log_op_t UFSDLO_RESET;
ufsdrc_t UFSDRC_BUSY;
ufsdrc_t UFSDRC_ERR;
ufsdrc_t UFSDRC_EXECERR;
ufsdrc_t UFSDRC_INVAL;
ufsdrc_t UFSDRC_NODEV;
ufsdrc_t UFSDRC_NOENT;
ufsdrc_t UFSDRC_NOEXEC;
ufsdrc_t UFSDRC_NXIO;
ufsdrc_t UFSDRC_OK;
ufsdrc_t UFSDRC_OPNOTSUP;
ufsdrc_t UFSDRC_PERM;
MACRO_UFSD UFSD_ACL;
MACRO_UFSD UFSD_DFACL;
MACRO_UFSD_VARMSGMAX UFSD_EXIT;
MACRO_UFSD UFSD_FREE;
MACRO_UFSD_VARMSGMAX UFSD_NULL;
MACRO_UFSD_VARMSGMAX UFSD_ORIGVERS;
MACRO_UFSD_VARMSGMAX UFSD_PROG;
MACRO_UFSD_VARMSGMAX UFSD_RECV;
MACRO_UFSD_VARMSGMAX UFSD_REPAIRFS;
MACRO_UFSD_VARMSGMAX UFSD_REPAIRFSLIST;
MACRO_UFSD_VARMSGMAX UFSD_SEND;
MACRO_UFSD_VARMSGMAX UFSD_SPAREMSGBYTES;
MACRO_UFSD_VARMSGMAX UFSD_THISVERS;
MACRO_UFSD_VARMSGMAX UFSD_V1;
MACRO_UFSD_VARMSGMAX UFSD_VARMSGMAX;
MACRO_UFSD_VARMSGMAX UFSD_VERS;
MACRO_UFSMNT UFSMNT_DISABLEDIRECTIO;
MACRO_UFSMNT UFSMNT_FORCEDIRECTIO;
MACRO_UFSMNT UFSMNT_LARGEFILES;
MACRO_UFSMNT UFSMNT_LOGGING;
MACRO_UFSMNT UFSMNT_NOATIME;
MACRO_UFSMNT UFSMNT_NODFRATIME;
MACRO_UFSMNT UFSMNT_NOFORCEDIRECTIO;
MACRO_UFSMNT UFSMNT_NOINTR;
MACRO_UFSMNT UFSMNT_NOSETSEC;
MACRO_UFSMNT UFSMNT_ONERROR_DEFAULT;
MACRO_UFSMNT UFSMNT_ONERROR_FLGMASK;
MACRO_UFSMNT UFSMNT_ONERROR_LOCK;
MACRO_UFSMNT UFSMNT_ONERROR_PANIC;
MACRO_UFSMNT UFSMNT_ONERROR_UMOUNT;
MACRO_UFSMNT UFSMNT_SYNCDIR;
MACRO_UFSROOTINO UFSROOTINO;
MACRO_UFS UFS_FILESIZE_BITS;
MACRO_UID_LONG UID_LONG;
MACRO_UID_MAX UID_MAX;
MACRO_UID UID_NOACCESS;
MACRO_NOBODY UID_NOBODY;
MACRO_MAX UINT16_MAX;
MACRO_MAX UINT32_MAX;
MACRO_MAX UINT64_MAX;
MACRO_MAX UINT8_MAX;
MACRO_MAX UINTMAX_MAX;
MACRO_MAX UINT_LEAST16_MAX;
MACRO_MAX UINT_LEAST32_MAX;
MACRO_MAX UINT_LEAST64_MAX;
MACRO_MAX UINT_LEAST8_MAX;
MACRO_UINT UINT_MAX;
uio_rw UIO_READ;
uio_seg UIO_SYSSPACE;
uio_seg UIO_USERISPACE;
uio_seg UIO_USERSPACE;
uio_rw UIO_WRITE;
MACRO_ULLONG ULLONG_MAX;
MACRO_ULOCKFS ULOCKFS_ACCESS_MASK;
MACRO_ULOCKFS ULOCKFS_BUSY;
MACRO_ULOCKFS ULOCKFS_CREATE_MASK;
MACRO_ULOCKFS ULOCKFS_DELETE_MASK;
MACRO_ULOCKFS ULOCKFS_DLOCK;
MACRO_ULOCKFS ULOCKFS_ELOCK;
MACRO_ULOCKFS ULOCKFS_FID_MASK;
MACRO_ULOCKFS ULOCKFS_FIODIOS_MASK;
MACRO_ULOCKFS ULOCKFS_FIODIO_MASK;
MACRO_ULOCKFS ULOCKFS_FIODUTIMES_MASK;
MACRO_ULOCKFS ULOCKFS_FRLOCK_MASK;
MACRO_ULOCKFS ULOCKFS_FSYNC_MASK;
MACRO_ULOCKFS ULOCKFS_GETATTR_MASK;
MACRO_ULOCKFS ULOCKFS_GETREAD_MASK;
MACRO_ULOCKFS ULOCKFS_GETWRITE_MASK;
MACRO_ULOCKFS ULOCKFS_HLOCK;
MACRO_ULOCKFS ULOCKFS_LINK_MASK;
MACRO_ULOCKFS ULOCKFS_LOOKUP_MASK;
MACRO_ULOCKFS ULOCKFS_MAP_MASK;
MACRO_ULOCKFS ULOCKFS_MKDIR_MASK;
MACRO_ULOCKFS ULOCKFS_NLOCK;
MACRO_ULOCKFS ULOCKFS_NOIACC;
MACRO_ULOCKFS ULOCKFS_NOIDEL;
MACRO_ULOCKFS ULOCKFS_PATHCONF_MASK;
MACRO_ULOCKFS ULOCKFS_QUOTA_MASK;
MACRO_ULOCKFS ULOCKFS_READDIR_MASK;
MACRO_ULOCKFS ULOCKFS_READLINK_MASK;
MACRO_ULOCKFS ULOCKFS_READ_MASK;
MACRO_ULOCKFS ULOCKFS_REMOVE_MASK;
MACRO_ULOCKFS ULOCKFS_RENAME_MASK;
MACRO_ULOCKFS ULOCKFS_RMDIR_MASK;
MACRO_ULOCKFS ULOCKFS_ROELOCK;
MACRO_ULOCKFS ULOCKFS_RWLOCK_MASK;
MACRO_ULOCKFS ULOCKFS_RWUNLOCK_MASK;
MACRO_ULOCKFS ULOCKFS_SEEK_MASK;
MACRO_ULOCKFS ULOCKFS_SETATTR_MASK;
MACRO_ULOCKFS ULOCKFS_SLOCK;
MACRO_ULOCKFS ULOCKFS_SPACE_MASK;
MACRO_ULOCKFS ULOCKFS_SYMLINK_MASK;
MACRO_ULOCKFS ULOCKFS_ULOCK;
MACRO_ULOCKFS ULOCKFS_VGET_MASK;
MACRO_ULOCKFS ULOCKFS_WLOCK;
MACRO_ULOCKFS ULOCKFS_WRITE_MASK;
MACRO_ULONG ULONG_MAX;
MACRO_UL UL_GDESLIM;
MACRO_UL UL_GETFSIZE;
MACRO_UL UL_GMEMLIM;
MACRO_UL UL_GTXTOFF;
MACRO_UL UL_SETFSIZE;
MACRO_UM UM_GC;
MACRO_UM UM_NOSLEEP;
MACRO_UM UM_SLEEP;
MACRO_UNACCESSIBLE UNACCESSIBLE;
createmode3 UNCHECKED;
MACRO_OVERFLOW UNDERFLOW;
MACRO_UNEXPECTED UNEXPECTED_ACK;
MACRO_UNEXPECTED UNEXPECTED_LINK_RESP;
MACRO_UNIXOS UNIXOS;
nstype UNKNOWN;
MACRO_UNKNOWN UNKNOWN_WIDTH;
MACRO_UNLKPT UNLKPT;
MACRO_UNLOCK UNLOCK;
stable_how UNSTABLE;
MACRO_HOMEARROW UPARROW;
MACRO_UPDATE UPDATE_CLUT1;
MACRO_UPDATE UPDATE_CLUT2;
MACRO_UPDATE UPDATE_CLUT3;
MACRO_UPDATE UPDATE_XLUT;
log_entry_t UPD_STAMP;
MACRO_UPILWPCHAN UPILWPCHAN_BITS;
MACRO_UPILWPCHAN UPILWPCHAN_TABSIZ;
MACRO_UPIMUTEX UPIMUTEX_BLOCK;
MACRO_UPIMUTEX UPIMUTEX_TABSIZE;
MACRO_UPIMUTEX UPIMUTEX_TRY;
MACRO_RIGHTALT UPMASK;
MACRO_TIME_0 UPROCP;
MACRO_USB USB_CC_BITSTUFFING;
MACRO_USB USB_CC_BUFFER_OVERRUN;
MACRO_USB USB_CC_BUFFER_UNDERRUN;
MACRO_USB USB_CC_CRC;
MACRO_USB USB_CC_DATA_OVERRUN;
MACRO_USB USB_CC_DATA_TOGGLE_MM;
MACRO_USB USB_CC_DATA_UNDERRUN;
MACRO_USB USB_CC_DEV_NOT_RESP;
MACRO_USB USB_CC_NOERROR;
MACRO_USB USB_CC_PID_CHECKFAILURE;
MACRO_USB USB_CC_STALL;
MACRO_USB USB_CC_TIMEOUT;
MACRO_USB USB_CC_UNEXP_PID;
MACRO_USB USB_CC_UNSPECIFIED_ERR;
MACRO_USB_CLASS USB_CLASS_DESCR_TYPE_REPORT;
MACRO_USB USB_COMBINED_NODE;
MACRO_USB USB_CONF_ATTR_REMOTE_WAKEUP;
MACRO_USB USB_CONF_ATTR_SELFPWR;
MACRO_USB USB_CONF_DESCR_SIZE;
MACRO_USB USB_CONF_PWR_DESCR_SIZE;
MACRO_USB USB_DESCR_TYPE_ANY;
MACRO_USB USB_DESCR_TYPE_CONFIGURATION;
MACRO_USB USB_DESCR_TYPE_CONFIGURATION_POWER;
MACRO_USB USB_DESCR_TYPE_DEVICE;
MACRO_USB USB_DESCR_TYPE_ENDPOINT;
MACRO_USB_DESCR USB_DESCR_TYPE_HID;
MACRO_USB USB_DESCR_TYPE_INTERFACE;
MACRO_USB USB_DESCR_TYPE_INTERFACE_POWER;
MACRO_USB USB_DESCR_TYPE_SETUP_CONFIGURATION;
MACRO_USB USB_DESCR_TYPE_SETUP_CONFPOWER;
MACRO_USB USB_DESCR_TYPE_SETUP_DEVICE;
MACRO_USB USB_DESCR_TYPE_SETUP_ENDPOINT;
MACRO_USB_DESCR_TYPE USB_DESCR_TYPE_SETUP_HUB;
MACRO_USB USB_DESCR_TYPE_SETUP_IFPOWER;
MACRO_USB USB_DESCR_TYPE_SETUP_INTERFACE;
MACRO_USB USB_DESCR_TYPE_SETUP_STRING;
MACRO_USB USB_DESCR_TYPE_STRING;
MACRO_USB USB_DEVICE_DESCR_SIZE;
MACRO_USB USB_DEVICE_REMOTE_WAKEUP;
MACRO_USB USB_DEV_CPR_SUSPEND;
MACRO_USB USB_DEV_DISCONNECTED;
MACRO_USB USB_DEV_ONLINE;
MACRO_USB USB_DEV_OS_FULL_POWER;
MACRO_USB USB_DEV_OS_POWER_0;
MACRO_USB USB_DEV_OS_POWER_1;
MACRO_USB USB_DEV_OS_POWER_2;
MACRO_USB USB_DEV_OS_POWER_3;
MACRO_USB USB_DEV_OS_POWER_OFF;
MACRO_USB USB_DEV_POWERED_DOWN;
MACRO_USB USB_DEV_POWER_D0;
MACRO_USB USB_DEV_POWER_D1;
MACRO_USB USB_DEV_POWER_D2;
MACRO_USB USB_DEV_POWER_D3;
MACRO_USB USB_DEV_PWRMASK_D0;
MACRO_USB USB_DEV_PWRMASK_D1;
MACRO_USB USB_DEV_PWRMASK_D2;
MACRO_USB USB_DEV_PWRMASK_D3;
MACRO_USB USB_DEV_REQ_DEVICE_TO_HOST;
MACRO_USB USB_DEV_REQ_HOST_TO_DEV;
MACRO_USB USB_DEV_REQ_RECIPIENT_DEVICE;
MACRO_USB USB_DEV_REQ_RECIPIENT_ENDPOINT;
MACRO_USB USB_DEV_REQ_RECIPIENT_INTERFACE;
MACRO_USB USB_DEV_REQ_RECIPIENT_OTHER;
MACRO_USB USB_DEV_REQ_TYPE_CLASS;
MACRO_USB USB_DEV_REQ_TYPE_STANDARD;
MACRO_USB USB_DEV_REQ_TYPE_VENDOR;
MACRO_USB USB_ENDPOINT_HALT;
MACRO_USB USB_EPT_ADDR_MASK;
MACRO_USB USB_EPT_ATTR_BULK;
MACRO_USB USB_EPT_ATTR_CONTROL;
MACRO_USB USB_EPT_ATTR_INTR;
MACRO_USB USB_EPT_ATTR_ISOCH;
MACRO_USB USB_EPT_ATTR_MASK;
MACRO_USB USB_EPT_DESCR_SIZE;
MACRO_USB USB_EPT_DIR_IN;
MACRO_USB USB_EPT_DIR_MASK;
MACRO_USB USB_EPT_DIR_OUT;
MACRO_USB USB_FAILURE;
MACRO_USB USB_FLAGS_ENQUEUE;
MACRO_USB USB_FLAGS_OPEN_EXCL;
MACRO_USB USB_FLAGS_SHORT_XFER_OK;
MACRO_USB USB_FLAGS_SLEEP;
MACRO_USB_DESCR USB_HID_DESCR_SIZE;
MACRO_USB USB_HOTPLUG_FAILURE;
MACRO_USB USB_HOTPLUG_SUCCESS;
MACRO_USB USB_IF_DESCR_SIZE;
MACRO_USB USB_IF_PWR_DESCR_SIZE;
MACRO_USB USB_INTERFACE_POWER_D0;
MACRO_USB USB_INTERFACE_POWER_D1;
MACRO_USB USB_INTERFACE_POWER_D2;
MACRO_USB USB_INTERFACE_POWER_D3;
MACRO_USB USB_LANG_ID;
MACRO_USB USB_LOG_L0;
MACRO_USB USB_LOG_L1;
MACRO_USB USB_LOG_L2;
MACRO_USB USB_LOG_L3;
MACRO_USB USB_LOG_L4;
MACRO_USB USB_MAXSTRINGLEN;
MACRO_USB USB_NOT_SUPPORTED;
MACRO_USB USB_NO_BANDWIDTH;
MACRO_USB USB_NO_RESOURCES;
MACRO_USB USB_PARSE_ERROR;
MACRO_USB USB_PIPE_BUSY;
MACRO_USB USB_PIPE_ERROR;
MACRO_USB USB_PIPE_POLICY_V_0;
MACRO_USB USB_PIPE_RESERVED;
$DC3296B23F99D14FFD55E56129FBC05F USB_PIPE_STATE_ACTIVE;
$DC3296B23F99D14FFD55E56129FBC05F USB_PIPE_STATE_ASYNC_CLOSING;
$DC3296B23F99D14FFD55E56129FBC05F USB_PIPE_STATE_ERROR;
$DC3296B23F99D14FFD55E56129FBC05F USB_PIPE_STATE_IDLE;
$DC3296B23F99D14FFD55E56129FBC05F USB_PIPE_STATE_SYNC_CLOSING;
MACRO_USB USB_PIPE_TIMEOUT;
MACRO_USB USB_PIPE_UNSHAREABLE;
MACRO_USB USB_PMCOMP_NO;
MACRO_USB USB_REMOTE_WAKEUP;
MACRO_USB USB_REQ_CLEAR_FEATURE;
MACRO_USB USB_REQ_GET_CONFIGURATION;
MACRO_USB USB_REQ_GET_DESCRIPTOR;
MACRO_USB USB_REQ_GET_INTERFACE;
MACRO_USB USB_REQ_GET_STATUS;
MACRO_USB USB_REQ_SET_ADDRESS;
MACRO_USB USB_REQ_SET_CONFIGURATION;
MACRO_USB USB_REQ_SET_DESCRIPTOR;
MACRO_USB USB_REQ_SET_FEATURE;
MACRO_USB USB_REQ_SET_INTERFACE;
MACRO_USB USB_REQ_SYNC_FRAME;
MACRO_USB USB_SELF_POWER;
MACRO_USB USB_SUCCESS;
MACRO_USB USB_TOTAL_HOTPLUG_FAILURE;
MACRO_USB USB_TOTAL_HOTPLUG_SUCCESS;
MACRO_USCRL USCRL;
MACRO_USCSICMD USCSICMD;
MACRO_USCSIGETRQS USCSIGETRQS;
MACRO_USCSIIOC USCSIIOC;
MACRO_USCSI USCSI_ASYNC;
MACRO_USCSI USCSI_DIAGNOSE;
MACRO_USCSI USCSI_HEAD;
MACRO_USCSI USCSI_HTAG;
MACRO_USCSI USCSI_ISOLATE;
MACRO_USCSI USCSI_NODISCON;
MACRO_USCSI USCSI_NOINTR;
MACRO_USCSI USCSI_NOPARITY;
MACRO_USCSI USCSI_NOTAG;
MACRO_USCSI USCSI_OTAG;
MACRO_USCSI USCSI_READ;
MACRO_USCSI USCSI_RESERVED;
MACRO_USCSI USCSI_RESET;
MACRO_USCSI USCSI_RESET_ALL;
MACRO_USCSI USCSI_RQENABLE;
MACRO_USCSI USCSI_SILENT;
MACRO_USCSI USCSI_SYNC;
MACRO_USCSI USCSI_WRITE;
MACRO_USER_0 USER;
MACRO_USERATTR USERATTR_DB_NCOL;
MACRO_USERATTR USERATTR_DB_NKEYCOL;
MACRO_USERATTR USERATTR_KEYCOL0;
MACRO_USERATTR USERATTR_KEYCOL1;
MACRO_ERROR USER_ERROR;
MACRO_USER USER_OBJ;
MACRO_PROCESS USER_PROCESS;
MACRO_USE USE_DGRAM;
MACRO_EVEN USE_P;
MACRO_USHRT USHRT_MAX;
MACRO_UID_MAX USI_MAX;
MACRO_USOCIOC USOCIOC;
MACRO_USOCIO USOCIO_ADD_BUFFER;
MACRO_USOCIO USOCIO_ADD_POOL;
MACRO_USOCIO USOCIO_ADISC_ELS;
MACRO_USOCIO USOCIO_BYPASS_DEV;
MACRO_USOCIO USOCIO_DELETE_POOL;
MACRO_USOCIO USOCIO_DIAG_EXTLB;
MACRO_USOCIO USOCIO_DIAG_HCB;
MACRO_USOCIO USOCIO_DIAG_NOP;
MACRO_USOCIO USOCIO_DIAG_RAW;
MACRO_USOCIO USOCIO_DIAG_SOC;
MACRO_USOCIO USOCIO_DIAG_SOCLB;
MACRO_USOCIO USOCIO_DIAG_SRDSLB;
MACRO_USOCIO USOCIO_DIAG_XRAM;
MACRO_USOCIO USOCIO_DUMPXRAM;
MACRO_USOCIO USOCIO_DUMPXRAMBUF;
MACRO_USOCIO USOCIO_FCODE_MCODE_VERSION;
MACRO_USOCIO USOCIO_FORCE_LIP;
MACRO_USOCIO USOCIO_FORCE_OFFLINE;
MACRO_USOCIO USOCIO_GETMAP;
MACRO_USOCIO USOCIO_GET_LESB;
MACRO_USOCIO USOCIO_LINKSTATUS;
MACRO_USOCIO USOCIO_LOADUCODE;
MACRO_USOCIO USOCIO_LOOPBACK_FRAME;
MACRO_USOCIO USOCIO_LOOPBACK_INTERNAL;
MACRO_USOCIO USOCIO_LOOPBACK_MANUAL;
MACRO_USOCIO USOCIO_NO_LOOPBACK;
MACRO_USOCIO USOCIO_RCV_FRAME;
MACRO_USOCIO USOCIO_SEND_FRAME;
MACRO_USOC USOC_PROM_4TH_OBP_DRV;
MACRO_USOC USOC_PROM_4TH_SELF_TST;
MACRO_USOC USOC_PROM_FW_DATE_CODE;
MACRO_USOC USOC_PROM_LA_BIT_MASK;
MACRO_USOC USOC_PROM_OBP_HDR;
MACRO_USOC USOC_PROM_RSRV1;
MACRO_USOC USOC_PROM_RSRV2;
MACRO_USOC USOC_PROM_SRVC_PARM;
MACRO_USOC USOC_PROM_USOC_CODE;
MACRO_USOC USOC_XRAM_BUF_POOL;
MACRO_USOC USOC_XRAM_EXCH_POOL;
MACRO_USOC USOC_XRAM_FW_DATE_CODE;
MACRO_USOC USOC_XRAM_FW_DATE_STR;
MACRO_USOC USOC_XRAM_HW_REV;
MACRO_USOC USOC_XRAM_LESB_P0;
MACRO_USOC USOC_XRAM_LESB_P1;
MACRO_USOC USOC_XRAM_NODE_WWN;
MACRO_USOC USOC_XRAM_PORTA_WWN;
MACRO_USOC USOC_XRAM_PORTB_WWN;
MACRO_USOC USOC_XRAM_REQ_DESC;
MACRO_USOC USOC_XRAM_RSP_DESC;
MACRO_USOC USOC_XRAM_SERV_PARAMS;
MACRO_USOC USOC_XRAM_UCODE;
MACRO_USRMIN USRMIN;
MACRO_USYNC USYNC_PROCESS;
MACRO_USYNC_PROCESS USYNC_PROCESS_ROBUST;
MACRO_USYNC USYNC_THREAD;
MACRO_UTMAXTYPE UTMAXTYPE;
MACRO_UTRAP UTRAP_V8P_FP_DISABLED;
MACRO_UTRAP UTRAP_V8P_MEM_ADDRESS_NOT_ALIGNED;
MACRO_UTS UTS_FUSERS;
MACRO_UTS UTS_UNAME;
MACRO_UTS UTS_USTAT;
MACRO_UT UT_ASYNC_DATA_ERROR;
MACRO_UT UT_DATA_ERROR;
MACRO_UT UT_DATA_EXCEPTION;
MACRO_UT UT_DATA_PROTECTION;
MACRO_UT UT_DIVISION_BY_ZERO;
MACRO_UT UT_FP_DISABLED;
MACRO_UT UT_FP_EXCEPTION_IEEE_754;
MACRO_UT UT_FP_EXCEPTION_OTHER;
MACRO_UT_UNMOUNTED UT_HLOCKING;
MACRO_UT UT_ILLEGAL_INSTRUCTION;
MACRO_UT UT_ILLTRAP_INSTRUCTION;
MACRO_UT UT_INSTRUCTION_DISABLED;
MACRO_UT UT_INSTRUCTION_ERROR;
MACRO_UT UT_INSTRUCTION_PROTECTION;
MACRO_UT UT_MEM_ADDRESS_NOT_ALIGNED;
MACRO_UT_UNMOUNTED UT_MOUNTED;
MACRO_UT_PRECISE UT_PRECISE_MAXTRAPS;
MACRO_UT UT_PRIVILEGED_ACTION;
MACRO_UT UT_PRIVILEGED_OPCODE;
MACRO_UT UT_TAG_OVERFLOW;
MACRO_UT UT_TRAP_INSTRUCTION_16;
MACRO_UT UT_TRAP_INSTRUCTION_17;
MACRO_UT UT_TRAP_INSTRUCTION_18;
MACRO_UT UT_TRAP_INSTRUCTION_19;
MACRO_UT UT_TRAP_INSTRUCTION_20;
MACRO_UT UT_TRAP_INSTRUCTION_21;
MACRO_UT UT_TRAP_INSTRUCTION_22;
MACRO_UT UT_TRAP_INSTRUCTION_23;
MACRO_UT UT_TRAP_INSTRUCTION_24;
MACRO_UT UT_TRAP_INSTRUCTION_25;
MACRO_UT UT_TRAP_INSTRUCTION_26;
MACRO_UT UT_TRAP_INSTRUCTION_27;
MACRO_UT UT_TRAP_INSTRUCTION_28;
MACRO_UT UT_TRAP_INSTRUCTION_29;
MACRO_UT UT_TRAP_INSTRUCTION_30;
MACRO_UT UT_TRAP_INSTRUCTION_31;
MACRO_UT_UNMOUNTED UT_UNMOUNTED;
MACRO_UVSCN UVSCN;
MACRO_V9 V9_IMPLVER;
MACRO_V9 V9_PSR_IMPLVER;
MACRO_VALID VALID_ATTR;
vtype VBAD;
MACRO_VBC VBC_MCR_REN;
MACRO_VBC VBC_MCR_TRC;
MACRO_VBC VBC_MCR_VCONFIG;
MACRO_VBC VBC_VBR_FBSHIFT;
MACRO_VBC VBC_VBR_FRAMEBASE;
MACRO_VBC VBC_VCA_CAD;
MACRO_VBC VBC_VCA_HIRES;
MACRO_VBC VBC_VCA_VERS;
MACRO_VBC VBC_VCA_VERSHIFT;
MACRO_VBC VBC_VCA_VRAM;
MACRO_VBC VBC_VCR_RRI;
vtype VBLK;
MACRO_VCEOF VCEOF;
MACRO_VCEOL VCEOL;
vtype VCHR;
vtype VDIR;
MACRO_VROOT VDIROPEN;
MACRO_VDISCARD VDISCARD;
vtype VDOOR;
MACRO_VDSUSP VDSUSP;
MACRO_VROOT VDUP;
hs_voldesc_type VD_BOOT;
hs_voldesc_type VD_CCFS;
hs_voldesc_type VD_EOV;
hs_voldesc_type VD_SFS;
hs_voldesc_type VD_UNSPEC;
eject_state VEJ_NO;
eject_state VEJ_NONE;
eject_state VEJ_YES;
eject_state VEJ_YESSTOP;
MACRO_VKILL VEOF;
MACRO_VEOL VEOL;
MACRO_VEOL2 VEOL2;
MACRO_VINTR VERASE;
MACRO_BORDER_GRAVITY VERT_BORDER_GRAVITY;
MACRO_VER VER_DEF_CURRENT;
MACRO_VER VER_DEF_NONE;
MACRO_VER VER_DEF_NUM;
MACRO_VER VER_FLG_BASE;
MACRO_VER VER_FLG_WEAK;
MACRO_VER VER_NDX_ELIMINATE;
MACRO_VER VER_NDX_GLOBAL;
MACRO_VER VER_NDX_LOCAL;
MACRO_VER VER_NDX_LORESERVE;
MACRO_VER VER_NEED_CURRENT;
MACRO_VER VER_NEED_NONE;
MACRO_VER VER_NEED_NUM;
MACRO_VEXEC VEXEC;
MACRO_VE VE_ATTR;
MACRO_VE VE_CONT;
MACRO_VE VE_EXIST;
MACRO_VE VE_FAIL;
MACRO_VE VE_FTYPE;
MACRO_VE VE_TIME;
vtype VFIFO;
MACRO_VVOLLEN VFILLEN;
MACRO_VFL VFL_ENXIO;
MACRO_VFS VFS_CREATEOPT;
MACRO_VFS VFS_DISPLAY;
MACRO_VFS_LINE VFS_LINE_MAX;
MACRO_VFS VFS_NODISPLAY;
MACRO_VFS VFS_NOFORCEOPT;
MACRO_VFS VFS_NOMNTTAB;
MACRO_VFS VFS_NOSUID;
MACRO_VFS VFS_NOTRUNC;
MACRO_VFS VFS_PXFS;
MACRO_VFS VFS_RDONLY;
MACRO_VFS VFS_REMOUNT;
MACRO_VFS_LINE VFS_TOOFEW;
MACRO_VFS_LINE VFS_TOOLONG;
MACRO_VFS_LINE VFS_TOOMANY;
MACRO_VFS VFS_UNLINKABLE;
MACRO_VFS VFS_UNMOUNTED;
MACRO_VHOME VHOME;
MACRO_VIDLEN VIDLEN;
MACRO_VIDMAX VIDMAX;
MACRO_VID VID_BLNK;
MACRO_VID VID_BOLD;
MACRO_VID VID_DIM;
MACRO_VID VID_NORM;
MACRO_VID VID_OFF;
MACRO_VID VID_REV;
MACRO_VID VID_UL;
vie_event VIE_CANCEL;
vie_event VIE_CHECK;
vie_event VIE_CLOSE;
vie_event VIE_DEVERR;
vie_event VIE_EJECT;
vie_event VIE_GETATTR;
vie_event VIE_INSERT;
vie_event VIE_INUSE;
vie_event VIE_MISSING;
vie_event VIE_NEWLABEL;
vie_event VIE_REMOUNT;
vie_event VIE_REMOVED;
vie_event VIE_SETATTR;
vie_event VIE_SYMDEV;
vie_event VIE_SYMNAME;
MACRO_VIFF VIFF_REGISTER;
MACRO_VIFF VIFF_SRCRT;
MACRO_VIFF VIFF_TUNNEL;
MACRO_VIM VIM_FLOPPY;
MACRO_VIM VIM_RDONLY;
MACRO_VINTR VINTR;
MACRO_VIOC VIOC;
MACRO_VIOCF VIOCF;
MACRO_VROOT VISSWAP;
MACRO_VIS VIS_CONS_MODE_CHANGE;
MACRO_VIS VIS_CURSOR_SETALL;
MACRO_VIS VIS_CURSOR_SETCOLORMAP;
MACRO_VIS VIS_CURSOR_SETCURSOR;
MACRO_VIS VIS_CURSOR_SETHOTSPOT;
MACRO_VIS VIS_CURSOR_SETPOSITION;
MACRO_VIS VIS_CURSOR_SETSHAPE;
MACRO_VIS VIS_GETCMAP;
MACRO_VIS VIS_GETCURSOR;
MACRO_VIS VIS_GETCURSORPOS;
MACRO_VIS VIS_GETIDENTIFIER;
MACRO_VIS VIS_MAXNAMELEN;
MACRO_VIS VIS_MOVECURSOR;
MACRO_VIS VIS_PUTCMAP;
MACRO_VIS VIS_SETCURSOR;
MACRO_VKEY VKEY_DOWN;
MACRO_VKEY VKEY_FIRST;
MACRO_VKEY_LASTSHIFT VKEY_FIRSTFUNC;
MACRO_VKEY_LASTFUNC VKEY_FIRSTPAD;
MACRO_VKEY VKEY_FIRSTPSEUDO;
MACRO_VKEY VKEY_FIRSTSHIFT;
MACRO_VKEY VKEY_KBD_CODES;
MACRO_VKEY_LASTFUNC VKEY_LAST;
MACRO_VKEY_LASTFUNC VKEY_LASTFUNC;
MACRO_VKEY_LASTFUNC VKEY_LASTPAD;
MACRO_VKEY VKEY_LASTPSEUDO;
MACRO_VKEY_LASTSHIFT VKEY_LASTSHIFT;
MACRO_VKEY_LASTFUNC VKEY_PAD0;
MACRO_VKEY_LASTFUNC VKEY_PAD1;
MACRO_VKEY_LASTFUNC VKEY_PAD2;
MACRO_VKEY_LASTFUNC VKEY_PAD3;
MACRO_VKEY_LASTFUNC VKEY_PAD4;
MACRO_VKEY_LASTFUNC VKEY_PAD5;
MACRO_VKEY_LASTFUNC VKEY_PAD6;
MACRO_VKEY_LASTFUNC VKEY_PAD7;
MACRO_VKEY_LASTFUNC VKEY_PAD8;
MACRO_VKEY_LASTFUNC VKEY_PAD9;
MACRO_VKEY_LASTFUNC VKEY_PADDOT;
MACRO_VKEY_LASTFUNC VKEY_PADENTER;
MACRO_VKEY_LASTFUNC VKEY_PADEQUAL;
MACRO_VKEY_LASTFUNC VKEY_PADMINUS;
MACRO_VKEY_LASTFUNC VKEY_PADPLUS;
MACRO_VKEY_LASTFUNC VKEY_PADSEP;
MACRO_VKEY_LASTFUNC VKEY_PADSLASH;
MACRO_VKEY_LASTFUNC VKEY_PADSTAR;
MACRO_VKEY VKEY_UP;
MACRO_VKILL VKILL;
MACRO_VLNEXT VLNEXT;
vtype VLNK;
MACRO_VLOC_BATCH VLOC_BATCH;
MACRO_VLOC VLOC_FIRST;
MACRO_VLOC_BATCH VLOC_LAST;
MACRO_VMAGLEN VMAGLEN;
MACRO_VMEM VMEM_ALLOC;
MACRO_VMEM VMEM_FREE;
MACRO_VMEM VMEM_SPAN;
MACRO_VMIN VMIN;
MACRO_VM VM_BESTFIT;
MACRO_VM VM_KMFLAGS;
MACRO_VM VM_NOSLEEP;
MACRO_VM VM_PANIC;
MACRO_VM VM_SLEEP;
MACRO_VROOT VNOCACHE;
MACRO_VROOT VNOMAP;
MACRO_VROOT VNOMOUNT;
vtype VNON;
MACRO_VROOT VNOSWAP;
MACRO_VOLID VOLID_TMP;
MACRO_VOLIOC VOLIOC;
MACRO_VOLIOCCANCEL VOLIOCCANCEL;
MACRO_VOLIOCCHECK VOLIOCCHECK;
MACRO_VOLIOCDAEMON VOLIOCDAEMON;
MACRO_VOLIOCDCHECK VOLIOCDCHECK;
MACRO_VOLIOCDGATTR VOLIOCDGATTR;
MACRO_VOLIOCDINUSE VOLIOCDINUSE;
MACRO_VOLIOCDROOT VOLIOCDROOT;
MACRO_VOLIOCDSATTR VOLIOCDSATTR;
MACRO_VOLIOCDSYMDEV VOLIOCDSYMDEV;
MACRO_VOLIOCDSYMNAME VOLIOCDSYMNAME;
MACRO_VOLIOCEJECT VOLIOCEJECT;
MACRO_VOLIOCEVENT VOLIOCEVENT;
MACRO_VOLIOCFLAGS VOLIOCFLAGS;
MACRO_VOLIOCGATTR VOLIOCGATTR;
MACRO_VOLIOCINFO VOLIOCINFO;
MACRO_VOLIOCINUSE VOLIOCINUSE;
MACRO_VOLIOCMAP VOLIOCMAP;
MACRO_VOLIOCREMOUNT VOLIOCREMOUNT;
MACRO_VOLIOCROOT VOLIOCROOT;
MACRO_VOLIOCSATTR VOLIOCSATTR;
MACRO_VOLIOCSYMDEV VOLIOCSYMDEV;
MACRO_VOLIOCSYMNAME VOLIOCSYMNAME;
MACRO_VOLIOCUNMAP VOLIOCUNMAP;
MACRO_VOL VOL_RSV_MAXIDLEN;
MACRO_VOL_SYMDEV VOL_SYMDEV_LEN;
MACRO_VOL_SYMDEV VOL_SYMNAME_LEN;
vtype VPROC;
MACRO_VROOT VPXFS;
MACRO_VP VP_ADVICE_MASK;
MACRO_VP VP_PPLOCK_MASK;
MACRO_VP VP_PPLOCK_SHIFT;
MACRO_VINTR VQUIT;
MACRO_VREAD VREAD;
vtype VREG;
MACRO_VREPRINT VREPRINT;
MACRO_VROOT VROOT;
MACRO_VSA VSA_ACL;
MACRO_VSA VSA_ACLCNT;
MACRO_VSA VSA_DFACL;
MACRO_VSA VSA_DFACLCNT;
MACRO_VSGID VSGID;
vtype VSOCK;
MACRO_VSWTCH VSTART;
MACRO_VSTOP VSTOP;
MACRO_VSUID VSUID;
MACRO_VSUSP VSUSP;
MACRO_VSVTX VSVTX;
MACRO_VROOT VSWAPLIKE;
MACRO_VSWTCH VSWTCH;
MACRO_VSW VSW_CANRWRO;
MACRO_VSW VSW_HASPROTO;
MACRO_VT0 VT0;
MACRO_VT0 VT1;
MACRO_VTAB VTAB;
MACRO_ANYP VTDELAY;
MACRO_BS0 VTDLY;
MACRO_VTIME VTIME;
MACRO_VTOC VTOC_SANE;
MACRO_VTR VTR_EVENT;
MACRO_VTR VTR_EVENTMAP;
MACRO_VTR VTR_FILE;
MACRO_VTR VTR_FLUSH;
MACRO_VTR VTR_FORCE;
MACRO_VTR VTR_GET_STRING;
MACRO_VTR VTR_INFO;
MACRO_VTR VTR_INFO_GLOBAL;
MACRO_VTR VTR_INFO_PERCPU;
MACRO_VTR VTR_INIT;
MACRO_VTR VTR_NOFORCE;
MACRO_VTR VTR_PAUSE;
MACRO_VTR VTR_PROCESS;
MACRO_VTR VTR_PROCESS_NOTRACE;
MACRO_VTR VTR_PROCESS_NULL;
MACRO_VTR VTR_PROCESS_TRACE;
MACRO_VTR VTR_RESET;
MACRO_VTR VTR_RESUME;
MACRO_VTR VTR_START;
MACRO_VTR VTR_STATE_ACTIVE;
MACRO_VTR VTR_STATE_HALTED;
MACRO_VTR VTR_STATE_NULL;
MACRO_VTR VTR_STATE_PAUSE;
MACRO_VTR VTR_STATE_PERPROC;
MACRO_VTR VTR_STATE_READY;
MACRO_VTR VTR_TEST;
MACRO_VT VT_EINVAL;
MACRO_VT VT_EIO;
MACRO_VT_ENABLED VT_ENABLED;
MACRO_VT VT_ERROR;
MACRO_VT_VERSION VT_EVENT_MASK;
MACRO_VT_VERSION VT_EVENT_SHIFT;
MACRO_VT_VERSION VT_FAC_MASK;
MACRO_VT_VERSION VT_FAC_SHIFT;
MACRO_VT_ENABLED VT_MAPSIZE;
MACRO_VT_VERSION VT_MAX_BYTES;
MACRO_VT_VERSION VT_MAX_EVENT;
MACRO_VT_VERSION VT_MAX_FAC;
MACRO_VT_VERSION VT_MAX_TAG;
MACRO_VT_VERSION VT_MAX_WORDS;
MACRO_VT_ENABLED VT_STRING_1;
MACRO_VT_ENABLED VT_STRING_2;
MACRO_VT_ENABLED VT_STRING_3;
MACRO_VT_ENABLED VT_STRING_4;
MACRO_VT_ENABLED VT_STRING_5;
MACRO_VT_ENABLED VT_STRING_MASK;
MACRO_VT_VERSION VT_TAG_MASK;
MACRO_VT_VERSION VT_TAG_SHIFT;
MACRO_VT_VERSION VT_TIME_MASK;
MACRO_VT_VERSION VT_TIME_SHIFT;
MACRO_VT_ENABLED VT_USED;
MACRO_VT_VERSION VT_VERSION_MAJOR;
MACRO_VT_VERSION VT_VERSION_MICRO;
MACRO_VT_VERSION VT_VERSION_MINOR;
MACRO_VUIDGADDR VUIDGADDR;
MACRO_VUIDGFORMAT VUIDGFORMAT;
MACRO_VUIDSADDR VUIDSADDR;
MACRO_VUIDSFORMAT VUIDSFORMAT;
vuid_device VUID_ASCII;
vuid_device VUID_DIAL;
MACRO_VUID_NATIVE VUID_FIRM_EVENT;
vuid_device VUID_ISO;
vuid_device VUID_LAST;
vuid_device VUID_LIGHTPEN;
MACRO_VUID_NATIVE VUID_NATIVE;
vuid_device VUID_PANEL;
MACRO_VUID_QUEUE VUID_QUEUE_NULL;
vuid_q_code VUID_Q_EMPTY;
MACRO_VUID_QUEUE VUID_Q_NODE_NULL;
vuid_q_code VUID_Q_OK;
vuid_q_code VUID_Q_OVERFLOW;
vuid_device VUID_SCROLL;
MACRO_VUID_QUEUE VUID_SEG_NULL;
MACRO_VUID VUID_SEG_SIZE;
MACRO_VUID_QUEUE VUID_STATE_NULL;
vuid_device VUID_SUNVIEW;
vuid_device VUID_TOP;
MACRO_VUID_QUEUE VUID_VALUE_NULL;
vuid_device VUID_WORKSTATION;
MACRO_VUIOC VUIOC;
MACRO_VROOT VVFSLOCK;
MACRO_VROOT VVFSWAIT;
MACRO_VROOT VVMEXEC;
MACRO_VROOT VVMLOCK;
MACRO_VVOLLEN VVOLLEN;
MACRO_VWERASE VWERASE;
MACRO_VWRITE VWRITE;
MACRO_V_VERSION V_ALTSCTR;
MACRO_V_VERSION V_BACKUP;
MACRO_V_VERSION V_BOOT;
MACRO_V_VERSION V_CACHE;
MACRO_V_VERSION V_HOME;
MACRO_V V_NUMPAR;
MACRO_V_VERSION V_RONLY;
MACRO_V_VERSION V_ROOT;
MACRO_V_VERSION V_STAND;
MACRO_V_VERSION V_SWAP;
MACRO_V_VERSION V_UNASSIGNED;
MACRO_V_VERSION V_UNMNT;
MACRO_V_VERSION V_USR;
MACRO_V_VERSION V_VAR;
MACRO_V_VERSION V_VERSION;
MACRO_DONTWAIT WAIT;
MACRO_WALK WALK_DONE;
MACRO_WALK WALK_ERR;
MACRO_WALK WALK_NEXT;
MACRO_WALLPROC WALLPROC_WALL;
MACRO_WALLPROG WALLPROG;
MACRO_WALLVERS WALLVERS;
MACRO_STEP WATCH_STEP;
MACRO_WA WA_EXEC;
MACRO_WA WA_READ;
MACRO_WA WA_TRAPAFTER;
MACRO_WA WA_WRITE;
MACRO_WCHAR_CS0 WCHAR_CS0;
MACRO_WCHAR_CS0 WCHAR_CS1;
MACRO_WCHAR_CS0 WCHAR_CS2;
MACRO_WCHAR_CS0 WCHAR_CS3;
MACRO_WCHAR_SHIFT WCHAR_CSMASK;
MACRO_WCHAR WCHAR_MAX;
MACRO_WCHAR WCHAR_MIN;
MACRO_WCHAR_SHIFT WCHAR_SHIFT;
MACRO_WCHAR_SHIFT WCHAR_S_MASK;
MACRO_WCONTFLG WCONTFLG;
MACRO_WEXITED WCONTINUED;
MACRO_WCOREFLG WCOREFLG;
MACRO_WEOF WEOF;
MACRO_WERRMASK WERRMASK;
MACRO_RERRMASK WERRNONPERSIST;
MACRO_RERRMASK WERRNORM;
MACRO_WEXITED WEXITED;
MACRO_BUSY_0 WGETTY;
MACRO_WILL WILL;
MACRO_ACTIVE WILLING_TO_SLEEP_LOCK;
MACRO_WINDOWSIZE WINDOWSIZE;
MACRO_WINDOWSIZE32 WINDOWSIZE32;
MACRO_BUSY_0 WIOC;
wnfsstat WNFSERR_CLNT_FLAVOR;
MACRO_WUNTRACED WNOHANG;
MACRO_WEXITED WNOWAIT;
MACRO_WONT WONT;
MACRO_TIMEOUT_0 WOPEN;
MACRO_WOPTMASK WOPTMASK;
MACRO_BIT WORD_BIT;
MACRO_WLOCK WORD_WLOCK;
MACRO_ASCII_DEVID WORKSTATION_DEVID;
MACRO_WORLD WORLD_DEFAULT;
MACRO_WP WP_NOWATCH;
MACRO_WP WP_SETPROT;
MACRO_SR3 WP_SR3;
MACRO_FF0 WRAP;
MACRO_WRDE WRDE_APPEND;
MACRO_WRDE WRDE_BADCHAR;
MACRO_WRDE WRDE_BADVAL;
MACRO_WRDE WRDE_CMDSUB;
MACRO_WRDE WRDE_DOOFFS;
MACRO_WRDE WRDE_ERRNO;
MACRO_WRDE WRDE_NOCMD;
MACRO_WRDE WRDE_NOSPACE;
MACRO_WRDE WRDE_NOSYS;
MACRO_WRDE WRDE_REUSE;
MACRO_WRDE WRDE_SHOWERR;
MACRO_WRDE WRDE_SYNTAX;
MACRO_WRDE WRDE_UNDEF;
MACRO_WRITER WRITER_LOCK;
MACRO_CARTRIDGE WRITE_LONG_CMD;
MACRO_SOFT_ERROR_WARNING_THRESHOLD WRITE_SOFT_ERROR_WARNING_THRESHOLD;
MACRO_RRQ WRQ;
MACRO_RDSIDE WRSIDE;
MACRO_WRTCMD WRTCMD;
MACRO_WRTDEL WRTDEL;
MACRO_WSIGMASK WSIGMASK;
MACRO_WSTOPFLG WSTOPFLG;
MACRO_WEXITED WSTOPPED;
MACRO_WEXITED WTRAPPED;
MACRO_WUNTRACED WUNTRACED;
MACRO_W W_IO;
MACRO_OK W_OK;
MACRO_W W_PIO;
MACRO_W W_STATES;
MACRO_W W_SWAP;
nstype X500;
MACRO_X86BOOT X86BOOT;
MACRO_ISIG XCASE;
nstype XCHS;
MACRO_XCIBRG XCIBRG;
MACRO_CS8 XCLUDE;
MACRO_XCIBRG XCRSET;
MACRO_XCIBRG XCTSET;
xdr_op XDR_DECODE;
xdr_op XDR_ENCODE;
xdr_op XDR_FREE;
MACRO_XDR XDR_GET_BYTES_AVAIL;
MACRO_XIOC XIOC;
MACRO_XMIT XMIT_DATA;
MACRO_CS8 XMT1EN;
MACRO_XMTCLK XMTCLK;
MACRO_DEVFD XMTRD;
MACRO_XMTR XMTR_DIS;
MACRO_XMTR XMTR_ENA;
MACRO_XMTWR XMTWR;
MACRO_XOFF XOFF_2;
MACRO_XOFF XOFF_24;
MACRO_XON XON_1;
MACRO_XON XON_13;
MACRO_XPG4 XPG4_1;
xprt_stat XPRT_DIED;
xprt_stat XPRT_IDLE;
xprt_stat XPRT_MOREREQS;
pcb::$A081279ABEE1631CD9A511E8616D291A XREGMODIFIED;
pcb::$A081279ABEE1631CD9A511E8616D291A XREGNONE;
pcb::$A081279ABEE1631CD9A511E8616D291A XREGPRESENT;
MACRO_XRS XRS_ID;
MACRO_XR XR_G0;
MACRO_XR XR_G1;
MACRO_XR XR_G2;
MACRO_XR XR_G3;
MACRO_XR XR_G4;
MACRO_XR XR_G5;
MACRO_XR XR_G6;
MACRO_XR XR_G7;
MACRO_XR_O0 XR_O0;
MACRO_XR_O0 XR_O1;
MACRO_XR_O0 XR_O2;
MACRO_XR_O0 XR_O3;
MACRO_XR_O0 XR_O4;
MACRO_XR_O0 XR_O5;
MACRO_XR_O0 XR_O6;
MACRO_XR_O0 XR_O7;
MACRO_XR_TYPE XR_TYPE_V8P;
MACRO_XTI XTI_DEBUG;
MACRO_XTI XTI_GENERIC;
MACRO_XTI XTI_LINGER;
MACRO_XTI XTI_RCVBUF;
MACRO_XTI XTI_RCVLOWAT;
MACRO_XTI XTI_SNDBUF;
MACRO_XTI XTI_SNDLOWAT;
MACRO_OK X_OK;
MACRO_Y Y;
MACRO_YEARMASK YEARMASK;
MACRO_YEARSHIFT YEARSHIFT;
MACRO_YESEXPR YESEXPR;
MACRO_YESSTR YESSTR;
MACRO_YPERR YPERR_ACCESS;
MACRO_YPERR YPERR_BADARGS;
MACRO_YPERR YPERR_BADDB;
MACRO_YPERR YPERR_BUSY;
MACRO_YPERR YPERR_DOMAIN;
MACRO_YPERR YPERR_KEY;
MACRO_YPERR YPERR_MAP;
MACRO_YPERR YPERR_NODOM;
MACRO_YPERR YPERR_NOMORE;
MACRO_YPERR YPERR_PMAP;
MACRO_YPERR YPERR_RESRC;
MACRO_YPERR YPERR_RPC;
MACRO_YPERR YPERR_VERS;
MACRO_YPERR YPERR_YPBIND;
MACRO_YPERR YPERR_YPERR;
MACRO_YPERR YPERR_YPSERV;
MACRO_YPOP YPOP_CHANGE;
MACRO_YPOP YPOP_DELETE;
MACRO_YPOP YPOP_INSERT;
MACRO_YPOP YPOP_STORE;
MACRO_YPPASSWDPROC YPPASSWDPROC_UPDATE;
MACRO_YPPASSWDPROG YPPASSWDPROG;
MACRO_YPPASSWDVERS YPPASSWDVERS;
MACRO_YPU YPU_CHANGE;
MACRO_YPU YPU_DELETE;
MACRO_YPU YPU_INSERT;
MACRO_YPU YPU_PROG;
MACRO_YPU YPU_STORE;
MACRO_YPU YPU_VERS;
MACRO_ZFIFOSZ ZFIFOSZ;
MACRO_ZMAGIC ZMAGIC;
MACRO_ZMH ZMH_AUTH;
MACRO_ZMH ZMH_DG;
MACRO_ZMH ZMH_VC;
MACRO_ZSH ZSH_MAX_RSTANDBY;
MACRO_ZSH ZSH_RDONE_MAX;
MACRO_ZSP ZSP_ECHO;
MACRO_ZSP ZSP_LOOP;
MACRO_ZSP ZSP_NRZI;
MACRO_ZSP ZSP_PARITY_SPECIAL;
MACRO_ZSP ZSP_PLL;
MACRO_ZSP ZSP_SYNC;
MACRO_ZSR15 ZSR15_BREAK;
MACRO_ZSR15 ZSR15_CD;
MACRO_ZSR15 ZSR15_CTS;
MACRO_ZSR15 ZSR15_SYNC;
MACRO_ZSR15 ZSR15_TIMER;
MACRO_ZSR15 ZSR15_TX_UNDER;
MACRO_ZSR2 ZSR2_RX_AVAIL_A;
MACRO_ZSR2 ZSR2_RX_AVAIL_B;
MACRO_ZSR2 ZSR2_SRINT_A;
MACRO_ZSR2 ZSR2_SRINT_B_OR_NONE;
MACRO_ZSR2 ZSR2_STATUS_ALL;
MACRO_ZSR2 ZSR2_TX_EMPTY_A;
MACRO_ZSR2 ZSR2_TX_EMPTY_B;
MACRO_ZSR2 ZSR2_XSINT_A;
MACRO_ZSR2 ZSR2_XSINT_B;
MACRO_ZSRR0 ZSRR0_BREAK;
MACRO_ZSRR0 ZSRR0_CD;
MACRO_ZSRR0 ZSRR0_CTS;
MACRO_ZSRR0 ZSRR0_RX_READY;
MACRO_ZSRR0 ZSRR0_SYNC;
MACRO_ZSRR0 ZSRR0_TIMER;
MACRO_ZSRR0 ZSRR0_TXUNDER;
MACRO_ZSRR0 ZSRR0_TX_READY;
MACRO_ZSRR1 ZSRR1_ALL_SENT;
MACRO_ZSRR1 ZSRR1_DO;
MACRO_ZSRR1 ZSRR1_FE;
MACRO_ZSRR1 ZSRR1_PE;
MACRO_ZSRR1 ZSRR1_RXEOF;
MACRO_ZSRR3 ZSRR3_IP_A_RX;
MACRO_ZSRR3 ZSRR3_IP_A_STAT;
MACRO_ZSRR3 ZSRR3_IP_A_TX;
MACRO_ZSRR3 ZSRR3_IP_B_RX;
MACRO_ZSRR3 ZSRR3_IP_B_STAT;
MACRO_ZSRR3 ZSRR3_IP_B_TX;
MACRO_ZSWR0 ZSWR0_CLR_INTR;
MACRO_ZSWR0 ZSWR0_FIRST_RX;
MACRO_ZSWR0 ZSWR0_REG;
MACRO_ZSWR0 ZSWR0_RESET_EOM;
MACRO_ZSWR0 ZSWR0_RESET_ERRORS;
MACRO_ZSWR0 ZSWR0_RESET_RXCRC;
MACRO_ZSWR0 ZSWR0_RESET_STATUS;
MACRO_ZSWR0 ZSWR0_RESET_TXCRC;
MACRO_ZSWR0 ZSWR0_RESET_TXINT;
MACRO_ZSWR0 ZSWR0_SEND_ABORT;
MACRO_ZSWR10 ZSWR10_NRZI;
MACRO_ZSWR10 ZSWR10_PRESET_ONES;
MACRO_ZSWR10 ZSWR10_UNDERRUN_ABORT;
MACRO_ZSWR11 ZSWR11_RTXC_XTAL;
MACRO_ZSWR11 ZSWR11_RXCLK_BAUD;
MACRO_ZSWR11 ZSWR11_RXCLK_DPLL;
MACRO_ZSWR11 ZSWR11_RXCLK_RTXC;
MACRO_ZSWR11 ZSWR11_RXCLK_TRXC;
MACRO_ZSWR11 ZSWR11_TRXC_BAUD;
MACRO_ZSWR11 ZSWR11_TRXC_DPLL;
MACRO_ZSWR11 ZSWR11_TRXC_OUT_ENA;
MACRO_ZSWR11 ZSWR11_TRXC_XMIT;
MACRO_ZSWR11 ZSWR11_TRXC_XTAL;
MACRO_ZSWR11 ZSWR11_TXCLK_BAUD;
MACRO_ZSWR11 ZSWR11_TXCLK_DPLL;
MACRO_ZSWR11 ZSWR11_TXCLK_RTXC;
MACRO_ZSWR11 ZSWR11_TXCLK_TRXC;
MACRO_ZSWR14 ZSWR14_AUTO_ECHO;
MACRO_ZSWR14 ZSWR14_BAUD_ENA;
MACRO_ZSWR14 ZSWR14_BAUD_FROM_PCLK;
MACRO_ZSWR14 ZSWR14_DPLL_DISABLE;
MACRO_ZSWR14 ZSWR14_DPLL_FM;
MACRO_ZSWR14 ZSWR14_DPLL_NOP;
MACRO_ZSWR14 ZSWR14_DPLL_NRZI;
MACRO_ZSWR14 ZSWR14_DPLL_RESET;
MACRO_ZSWR14 ZSWR14_DPLL_SEARCH;
MACRO_ZSWR14 ZSWR14_DPLL_SRC_BAUD;
MACRO_ZSWR14 ZSWR14_DPLL_SRC_RTXC;
MACRO_ZSWR14 ZSWR14_DTR_IS_REQUEST;
MACRO_ZSWR14 ZSWR14_LOCAL_LOOPBACK;
MACRO_ZSWR1_INIT ZSWR1_INIT;
MACRO_ZSWR1 ZSWR1_PARITY_SPECIAL;
MACRO_ZSWR1 ZSWR1_REQ_ENABLE;
MACRO_ZSWR1 ZSWR1_REQ_IS_RX;
MACRO_ZSWR1 ZSWR1_REQ_NOT_WAIT;
MACRO_ZSWR1 ZSWR1_RIE;
MACRO_ZSWR1 ZSWR1_RIE_FIRST_SPECIAL;
MACRO_ZSWR1 ZSWR1_RIE_SPECIAL_ONLY;
MACRO_ZSWR1 ZSWR1_SIE;
MACRO_ZSWR1 ZSWR1_TIE;
MACRO_ZSWR3 ZSWR3_AUTO_CD_CTS;
MACRO_ZSWR3 ZSWR3_HUNT;
MACRO_ZSWR3 ZSWR3_RXCRC_ENABLE;
MACRO_ZSWR3 ZSWR3_RX_5;
MACRO_ZSWR3 ZSWR3_RX_6;
MACRO_ZSWR3 ZSWR3_RX_7;
MACRO_ZSWR3 ZSWR3_RX_8;
MACRO_ZSWR3 ZSWR3_RX_ENABLE;
MACRO_ZSWR4 ZSWR4_1_5_STOP;
MACRO_ZSWR4 ZSWR4_1_STOP;
MACRO_ZSWR4 ZSWR4_2_STOP;
MACRO_ZSWR4 ZSWR4_BISYNC;
MACRO_ZSWR4 ZSWR4_PARITY_ENABLE;
MACRO_ZSWR4 ZSWR4_PARITY_EVEN;
MACRO_ZSWR4 ZSWR4_SDLC;
MACRO_ZSWR4 ZSWR4_X16_CLK;
MACRO_ZSWR4 ZSWR4_X1_CLK;
MACRO_ZSWR4 ZSWR4_X32_CLK;
MACRO_ZSWR4 ZSWR4_X64_CLK;
MACRO_ZSWR5 ZSWR5_BREAK;
MACRO_ZSWR5 ZSWR5_CRC16;
MACRO_ZSWR5 ZSWR5_DTR;
MACRO_ZSWR5 ZSWR5_RTS;
MACRO_ZSWR5 ZSWR5_TXCRC_ENABLE;
MACRO_ZSWR5 ZSWR5_TX_5;
MACRO_ZSWR5 ZSWR5_TX_6;
MACRO_ZSWR5 ZSWR5_TX_7;
MACRO_ZSWR5 ZSWR5_TX_8;
MACRO_ZSWR5 ZSWR5_TX_ENABLE;
MACRO_ZSWR9 ZSWR9_DIS_LOWER_CHAIN;
MACRO_ZSWR9 ZSWR9_MASTER_IE;
MACRO_ZSWR9 ZSWR9_NO_VECTOR;
MACRO_ZSWR9 ZSWR9_RESET_CHAN_A;
MACRO_ZSWR9 ZSWR9_RESET_CHAN_B;
MACRO_ZSWR9 ZSWR9_RESET_WORLD;
MACRO_ZSWR9 ZSWR9_STAT_HIGH;
MACRO_ZSWR9 ZSWR9_VECTOR_INCL_STAT;
MACRO_ZS_MAX ZS_MAX_PRIV_STR;
MACRO_ZS_MAX ZS_NEEDSOFT;
MACRO_ZS ZS_OFF;
MACRO_ZS ZS_ON;
MACRO_ZS_MAX ZS_PL;
MACRO_ZS_MAX ZS_PL_HI;
MACRO__ALIGNMENT _ALIGNMENT_REQUIRED;
MACRO__ARG _ARG_MAX32;
MACRO__ARG _ARG_MAX64;
MACRO__U _B;
MACRO__U _C;
MACRO__CANT _CANT_BE_IMMED;
MACRO__CAT _CAT_MAGIC;
MACRO_ALIGNMENT _CHAR_ALIGNMENT;
MACRO__COLL _COLL_BACKWARD_MASK;
MACRO__COLL _COLL_FORWARD_MASK;
MACRO__COLL _COLL_NOSUBS_MASK;
MACRO__COLL _COLL_POSITION_MASK;
MACRO__COLL _COLL_SUBS_MASK;
int COLORS;
int COLOR_PAIRS;
int COLS;
MACRO__CONFIG _CONFIG_AIO_LISTIO_MAX;
MACRO__CONFIG _CONFIG_AIO_MAX;
MACRO__CONFIG _CONFIG_AIO_PRIO_DELTA_MAX;
MACRO__CONFIG _CONFIG_AVPHYS_PAGES;
MACRO__CONFIG _CONFIG_CHILD_MAX;
MACRO__CONFIG _CONFIG_CLK_TCK;
MACRO__CONFIG _CONFIG_COHERENCY;
MACRO__CONFIG _CONFIG_DCACHEBLKSZ;
MACRO__CONFIG _CONFIG_DCACHELINESZ;
MACRO__CONFIG _CONFIG_DCACHESZ;
MACRO__CONFIG _CONFIG_DCACHETBLKSZ;
MACRO__CONFIG _CONFIG_DCACHE_ASSOC;
MACRO__CONFIG _CONFIG_DELAYTIMER_MAX;
MACRO__CONFIG _CONFIG_ICACHEBLKSZ;
MACRO__CONFIG _CONFIG_ICACHELINESZ;
MACRO__CONFIG _CONFIG_ICACHESZ;
MACRO__CONFIG _CONFIG_ICACHE_ASSOC;
MACRO__CONFIG _CONFIG_MAXPID;
MACRO__CONFIG _CONFIG_MQ_OPEN_MAX;
MACRO__CONFIG _CONFIG_MQ_PRIO_MAX;
MACRO__CONFIG _CONFIG_NGROUPS;
MACRO__CONFIG _CONFIG_NPROC_CONF;
MACRO__CONFIG _CONFIG_NPROC_ONLN;
MACRO__CONFIG _CONFIG_OPEN_FILES;
MACRO__CONFIG _CONFIG_PAGESIZE;
MACRO__CONFIG _CONFIG_PHYS_PAGES;
MACRO__CONFIG _CONFIG_POSIX_VER;
MACRO__CONFIG _CONFIG_PROF_TCK;
MACRO__CONFIG _CONFIG_RTSIG_MAX;
MACRO__CONFIG _CONFIG_SEM_NSEMS_MAX;
MACRO__CONFIG _CONFIG_SEM_VALUE_MAX;
MACRO__CONFIG _CONFIG_SIGQUEUE_MAX;
MACRO__CONFIG _CONFIG_SIGRT_MAX;
MACRO__CONFIG _CONFIG_SIGRT_MIN;
MACRO__CONFIG _CONFIG_SPLIT_CACHE;
MACRO__CONFIG _CONFIG_STACK_PROT;
MACRO__CONFIG _CONFIG_TIMER_MAX;
MACRO__CONFIG _CONFIG_XOPEN_VER;
MACRO__CPCIO _CPCIO_IOC;
MACRO__CS _CS_LFS64_CFLAGS;
MACRO__CS _CS_LFS64_LDFLAGS;
MACRO__CS _CS_LFS64_LIBS;
MACRO__CS _CS_LFS64_LINTFLAGS;
MACRO__CS _CS_LFS_CFLAGS;
MACRO__CS _CS_LFS_LDFLAGS;
MACRO__CS _CS_LFS_LIBS;
MACRO__CS _CS_LFS_LINTFLAGS;
MACRO__CS _CS_PATH;
MACRO__CS _CS_XBS5_ILP32_OFF32_CFLAGS;
MACRO__CS _CS_XBS5_ILP32_OFF32_LDFLAGS;
MACRO__CS _CS_XBS5_ILP32_OFF32_LIBS;
MACRO__CS _CS_XBS5_ILP32_OFF32_LINTFLAGS;
MACRO__CS _CS_XBS5_ILP32_OFFBIG_CFLAGS;
MACRO__CS _CS_XBS5_ILP32_OFFBIG_LDFLAGS;
MACRO__CS _CS_XBS5_ILP32_OFFBIG_LIBS;
MACRO__CS _CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
MACRO__CS _CS_XBS5_LP64_OFF64_CFLAGS;
MACRO__CS _CS_XBS5_LP64_OFF64_LDFLAGS;
MACRO__CS _CS_XBS5_LP64_OFF64_LIBS;
MACRO__CS _CS_XBS5_LP64_OFF64_LINTFLAGS;
MACRO__CS _CS_XBS5_LPBIG_OFFBIG_CFLAGS;
MACRO__CS _CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
MACRO__CS _CS_XBS5_LPBIG_OFFBIG_LIBS;
MACRO__CS _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
MACRO__DATE _DATE_FMT;
MACRO__PBLKSIZ _DBLKSIZ;
MACRO__DBM _DBM_IOERR;
MACRO__DBM _DBM_RDONLY;
MACRO__DEXPLEN _DEXPLEN;
MACRO__DMCM1 _DMCM1;
MACRO_ALIGNMENT _DOUBLE_ALIGNMENT;
MACRO__D_MTCBSHARED _D_MTCBSHARED;
MACRO__D_QNEXTLESS _D_MTOCSHARED;
MACRO__D _D_OLD;
MACRO__D_QNEXTLESS _D_QNEXTLESS;
char *Def_term;
MACRO__E1 _E1;
MACRO__E1 _E10;
MACRO__E1 _E11;
MACRO__E1 _E12;
MACRO__E1 _E13;
MACRO__E1 _E14;
MACRO__E1 _E15;
MACRO__E1 _E16;
MACRO__E1 _E17;
MACRO__E1 _E18;
MACRO__E1 _E19;
MACRO__E1 _E2;
MACRO__E1 _E20;
MACRO__E1 _E21;
MACRO__E1 _E22;
MACRO__E1 _E23;
MACRO__E1 _E24;
MACRO__E1 _E3;
MACRO__E1 _E4;
MACRO__E1 _E5;
MACRO__E1 _E6;
MACRO__E1 _E7;
MACRO__E1 _E8;
MACRO__E1 _E9;
MACRO__LENBASE _EXPBASE;
char Error[128];
$BB6475131A51C96C40EE163F450A191D FC_EUC;
$BB6475131A51C96C40EE163F450A191D _FC_OTHER;
$BB6475131A51C96C40EE163F450A191D _FC_UTF8;
void FD_CLR(int fd, fd_set *fdset);
int FD_ISSET(int fd, fd_set *fdset);
void FD_SET(int fd, fd_set *fdset);
void FD_ZERO(fd_set *fdset);
MACRO__LENBASE _FEXPLEN;
MACRO__FILE _FILE_OFFSET_BITS;
MACRO__FIOBOINFO _FIOBOINFO;
MACRO__FIOCNVTMNT _FIOCNVTMNT;
MACRO__FIOCOD _FIOCOD;
MACRO__FIODIRECTIO _FIODIRECTIO;
MACRO__FIOFFS _FIOFFS;
MACRO__FIOGDIO _FIOGDIO;
MACRO__FIOIO _FIOIO;
MACRO__FIOISBUSY _FIOISBUSY;
MACRO__FIOISLOG _FIOISLOG;
MACRO__FIOISLOGOK _FIOISLOGOK;
MACRO__FIOLFS _FIOLFS;
MACRO__FIOLFSS _FIOLFSS;
MACRO__FIOLOGDISABLE _FIOLOGDISABLE;
MACRO__FIOLOGENABLE _FIOLOGENABLE;
MACRO__FIOLOGRESET _FIOLOGRESET;
MACRO__FIOOBSOLETE67 _FIOOBSOLETE67;
MACRO__FIOSATIME _FIOSATIME;
MACRO__FIOSDIO _FIOSDIO;
MACRO__FIOSTOPCACHE _FIOSTOPCACHE;
MACRO__FIOTUNE _FIOTUNE;
MACRO__FSTYPSZ _FSTYPSZ;
char *Ffile;
int Fflags;
int (*Ffunc)();
int Fjmp[10];
int Fvalue;
const gss_OID GSS_C_NT_ANONYMOUS;
const gss_OID GSS_C_NT_EXPORT_NAME;
const gss_OID GSS_C_NT_HOSTBASED_SERVICE;
const gss_OID GSS_C_NT_MACHINE_UID_NAME;
const gss_OID GSS_C_NT_STRING_UID_NAME;
const gss_OID GSS_C_NT_USER_NAME;
MACRO__HIDDENBIT _HIDDENBIT;
MACRO__IEEE _IEEE;
MACRO__INFINITY _INFINITY;
MACRO__INFTIM _INFTIM;
MACRO_ALIGNMENT _INT_ALIGNMENT;
MACRO__IN _IN_DRIVER;
MACRO__IONBF _IOEOF;
MACRO__IONBF _IOERR;
MACRO__IOFBF IOFBF;
MACRO__IOFBF _IOLBF;
MACRO__IOMYBUF _IOMYBUF;
MACRO__IONBF _IONBF;
MACRO__IOREAD _IOREAD;
MACRO__IOREAD _IORW;
MACRO__IOREAD _IOWRT;
MACRO__ISALNUM _ISALNUM;
MACRO__ISUPPER _ISALPHA;
MACRO__ISUPPER _ISBLANK;
MACRO__ISUPPER _ISCNTRL;
MACRO__ISUPPER _ISDIGIT;
MACRO__ISUPPER _ISGRAPH;
MACRO__ISUPPER _ISLOWER;
MACRO__ISPAD _ISPAD;
MACRO__ISUPPER _ISPRINT;
MACRO__ISUPPER _ISPUNCT;
MACRO__ISUPPER _ISSPACE;
MACRO__ISUPPER _ISUPPER;
MACRO__ISUPPER _ISXDIGIT;
MACRO__I _I_INSERT;
MACRO__I _I_MUXID2FD;
MACRO__I _I_REMOVE;
MACRO__JBLEN _JBLEN;
MACRO__U _L;
MACRO_SOURCE _LARGEFILE64_SOURCE;
MACRO_SOURCE _LARGEFILE_SOURCE;
__lc_type_id_t _LC_CAR;
__lc_type_id_t _LC_CHARMAP;
__lc_type_id_t _LC_COLLATE;
__lc_type_id_t _LC_CTYPE;
__lc_type_id_t _LC_LOCALE;
MACRO__LC _LC_MAGIC;
MACRO__LC_MAX _LC_MAX_OBJECTS;
__lc_type_id_t _LC_MESSAGES;
__lc_type_id_t _LC_MONETARY;
__lc_type_id_t _LC_NUMERIC;
$16117E4F5BF7AAA0A2A7EB6F15A0B87C _LC_TAG_CCLASS;
$16117E4F5BF7AAA0A2A7EB6F15A0B87C _LC_TAG_TRANS;
$16117E4F5BF7AAA0A2A7EB6F15A0B87C LC_TAG_UNDEF;
__lc_type_id_t _LC_TIME;
MACRO__LC _LC_VERSION_MAJOR;
MACRO__LC LC_VERSION_MINOR;
MACRO__LENBASE _LENBASE;
MACRO__LFS64 _LFS64_ASYNCHRONOUS_IO;
MACRO_LARGEFILE _LFS64_LARGEFILE;
MACRO__LFS64 _LFS64_STDIO;
MACRO_LARGEFILE _LFS_LARGEFILE;
int LINES;
MACRO__LINK _LINK_NEEDED;
MACRO__LONG _LONG_ALIGNMENT;
MACRO__LONG _LONG_DOUBLE_ALIGNMENT;
MACRO_ALIGNMENT _LONG_LONG_ALIGNMENT;
MACRO__LastCategory _LastCategory;
MACRO__MAP _MAP_NEW;
MACRO__POINTER _MAX_ALIGNMENT;
void MD5Final(unsigned __int8 *output, MD5_CTX *context);
void MD5Init(MD5_CTX *context);
void MD5Update(MD5_CTX *context, unsigned __int8 *input, unsigned int inlen);
MOUSE_STATUS Mouse_status;
MACRO__U _N;
MACRO__NBBY _NBBY;
MACRO__NCC _NCC;
MACRO__NFILE _NFILE;
MACRO__NGREG _NGREG;
MACRO__NL _NL_NUM_ITEMS;
MACRO__NOCHANGE _NOCHANGE;
MACRO__NULL NULL;
char Null[1];
uint32_t OCF_Authenticate(OCF_ClientHandle_t, OCF_CardHandle_t, void *, OCF_ClientAuthenticationCallback_t *);
uint32_t OCF_CardPresent(OCF_ClientHandle_t, OCF_CardSpec_t);
uint32_t OCF_CardPropertyCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_CardService(OCF_CardServiceClass_t, OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_CardValid(OCF_ClientHandle_t, OCF_CardHandle_t);
uint32_t OCF_CardletAdminCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_DeleteCardProperty(OCF_ClientHandle_t, OCF_CardHandle_t, int8_t *);
uint32_t OCF_DeleteClientProperty(OCF_ClientHandle_t, int8_t *);
uint32_t OCF_DeleteProperty(int8_t *);
uint32_t OCF_DeregisterClient(OCF_ClientHandle_t);
uint32_t OCF_DeregisterEventHandler(OCF_ClientHandle_t);
uint32_t OCF_DeregisterForEvent(OCF_EventHandle_t);
uint32_t OCF_DestroyCardServicesList(OCF_CardServicesList_t);
uint32_t OCF_DestroyCardsList(OCF_CardsList_t);
uint32_t OCF_DestroyPropertiesList(OCF_PropertyList_t);
uint32_t OCF_DestroyReadersList(OCF_ReadersList_t);
uint32_t OCF_FileAccessCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_GetCardInfoProperty(OCF_ClientHandle_t, OCF_CardHandle_t, int8_t *, int8_t **);
uint32_t OCF_GetCardProperty(OCF_ClientHandle_t, OCF_CardHandle_t, int8_t *, int8_t **);
uint32_t OCF_GetClientProperty(OCF_ClientHandle_t, int8_t *, int8_t **);
uint32_t OCF_GetProperty(int8_t *, int8_t **);
uint32_t OCF_KeyImportCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_ListCardProperties(OCF_ClientHandle_t, OCF_CardHandle_t, OCF_PropertyList_t *);
uint32_t OCF_ListCardServices(int8_t *, OCF_CardServicesList_t *);
int8_t *OCF_ListCardServices_First(OCF_CardServicesList_t);
int8_t *OCF_ListCardServices_Next(OCF_CardServicesList_t);
uint32_t OCF_ListCardsConfigured(OCF_CardsList_t *);
uint32_t OCF_ListCardsPresent(OCF_CardsList_t *);
int8_t *OCF_ListCards_First(OCF_CardsList_t);
int8_t *OCF_ListCards_Next(OCF_CardsList_t);
uint32_t OCF_ListClientProperties(OCF_ClientHandle_t, OCF_PropertyList_t *);
uint32_t OCF_ListProperties(OCF_PropertyList_t *);
int8_t *OCF_ListProperty_First(OCF_PropertyList_t);
int8_t *OCF_ListProperty_Next(OCF_PropertyList_t);
uint32_t OCF_ListReadersConfigured(OCF_ReadersList_t *);
uint32_t OCF_ListReadersPresent(OCF_ReadersList_t *);
int8_t *OCF_ListReaders_First(OCF_ReadersList_t);
int8_t *OCF_ListReaders_Next(OCF_ReadersList_t);
uint32_t OCF_LockCard(OCF_ClientHandle_t, OCF_CardHandle_t);
uint32_t OCF_PINCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_PassThruCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_RegisterClient(int8_t *, int8_t *, OCF_ClientHandle_t *);
uint32_t OCF_RegisterEventHandler(OCF_ClientHandle_t, void *, OCF_EventHandler_t *);
uint32_t OCF_RegisterForEvent(OCF_ClientHandle_t, OCF_Event_t, OCF_EventRegistrationData_t, void *, OCF_EventHandle_t *);
uint32_t OCF_SetCardInfoProperty(OCF_ClientHandle_t, OCF_CardHandle_t, int8_t *, int8_t *);
uint32_t OCF_SetCardProperty(OCF_ClientHandle_t, OCF_CardHandle_t, int8_t *, int8_t *);
uint32_t OCF_SetClientProperty(OCF_ClientHandle_t, int8_t *, int8_t *);
uint32_t OCF_SetProperty(int8_t *, int8_t *);
uint32_t OCF_SignatureCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_TimeSinceValidated(OCF_ClientHandle_t, OCF_CardHandle_t, uint64_t *);
uint32_t OCF_UnlockCard(OCF_ClientHandle_t, OCF_CardHandle_t);
uint32_t OCF_UserInfoCardService(OCF_CardServiceMethod_t, OCF_ClientHandle_t, OCF_CardHandle_t, OCF_CardServiceParams_t, OCF_CardServiceReturn_t);
uint32_t OCF_WaitForCardInserted(OCF_ClientHandle_t, OCF_CardSpec_t, OCF_CardHandle_t *);
uint32_t OCF_WaitForCardRemoved(OCF_ClientHandle_t, OCF_CardHandle_t, OCF_Timeout_t);
MACRO__ONE _ONE_;
struct queue *OTHERQ(queue_t *);
MACRO__U _P;
MACRO__PBLKSIZ _PBLKSIZ;
MACRO__PC _PC_ASYNC_IO;
MACRO__PC _PC_CHOWN_RESTRICTED;
$0C8CCBCA03C364CB9C340F4C94668308 _PC_DENSE;
MACRO__PC_ERROR PC_ERROR;
$0C8CCBCA03C364CB9C340F4C94668308 PC_EUC;
MACRO__PC _PC_FILESIZEBITS;
MACRO__PC _PC_LAST;
MACRO__PC _PC_LINK_MAX;
MACRO__PC _PC_MAX_CANON;
MACRO__PC _PC_MAX_INPUT;
MACRO__PC _PC_NAME_MAX;
MACRO__PC _PC_NO_TRUNC;
MACRO__PC _PC_PATH_MAX;
MACRO__PC _PC_PIPE_BUF;
MACRO__PC _PC_PRIO_IO;
MACRO__PC _PC_SYNC_IO;
$0C8CCBCA03C364CB9C340F4C94668308 _PC_UCS4;
MACRO__PC _PC_VDISABLE;
MACRO__POINTER _POINTER_ALIGNMENT;
MACRO__POSIX2_BC _POSIX2_BC_BASE_MAX;
MACRO__POSIX2_BC _POSIX2_BC_DIM_MAX;
MACRO__POSIX2_BC _POSIX2_BC_SCALE_MAX;
MACRO__POSIX2_BC _POSIX2_BC_STRING_MAX;
MACRO__POSIX2 _POSIX2_CHAR_TERM;
MACRO__POSIX2_BC _POSIX2_COLL_WEIGHTS_MAX;
MACRO__POSIX2 _POSIX2_C_BIND;
MACRO__POSIX2 _POSIX2_C_DEV;
MACRO_VERSION _POSIX2_C_VERSION;
MACRO__POSIX2_BC _POSIX2_EXPR_NEST_MAX;
MACRO__POSIX2_BC _POSIX2_LINE_MAX;
MACRO__POSIX2 _POSIX2_LOCALEDEF;
MACRO__POSIX2_BC _POSIX2_RE_DUP_MAX;
MACRO__POSIX2 _POSIX2_SW_DEV;
MACRO__POSIX2 _POSIX2_UPE;
MACRO_VERSION _POSIX2_VERSION;
MACRO_ARG _POSIX_AIO_LISTIO_MAX;
MACRO_ARG _POSIX_AIO_MAX;
MACRO_ARG _POSIX_ARG_MAX;
MACRO__POSIX_ASYNC _POSIX_ASYNCHRONOUS_IO;
MACRO__POSIX_ASYNC _POSIX_ASYNC_IO;
MACRO_ARG _POSIX_CHILD_MAX;
MACRO__POSIX_CLOCKRES _POSIX_CLOCKRES_MIN;
MACRO__POSIX_CLOCKRES _POSIX_DELAYTIMER_MAX;
MACRO__POSIX_ASYNC _POSIX_FSYNC;
MACRO__POSIX_ASYNC _POSIX_JOB_CONTROL;
MACRO__POSIX_CLOCKRES _POSIX_LINK_MAX;
MACRO__POSIX_CLOCKRES _POSIX_LOGIN_NAME_MAX;
MACRO__POSIX_ASYNC _POSIX_MAPPED_FILES;
MACRO__POSIX_CLOCKRES _POSIX_MAX_CANON;
MACRO__POSIX_CLOCKRES _POSIX_MAX_INPUT;
MACRO__POSIX_ASYNC _POSIX_MEMLOCK;
MACRO__POSIX_ASYNC _POSIX_MEMLOCK_RANGE;
MACRO__POSIX_ASYNC _POSIX_MEMORY_PROTECTION;
MACRO__POSIX_ASYNC _POSIX_MESSAGE_PASSING;
MACRO__POSIX_CLOCKRES _POSIX_MQ_OPEN_MAX;
MACRO__POSIX_CLOCKRES _POSIX_MQ_PRIO_MAX;
MACRO__POSIX_CLOCKRES _POSIX_NAME_MAX;
MACRO__POSIX_CLOCKRES POSIX_NGROUPS_MAX;
MACRO__POSIX_CLOCKRES _POSIX_OPEN_MAX;
MACRO__POSIX_CLOCKRES _POSIX_PATH_MAX;
MACRO__POSIX_CLOCKRES _POSIX_PIPE_BUF;
MACRO__POSIX_ASYNC _POSIX_PRIORITY_SCHEDULING;
MACRO__POSIX_ASYNC _POSIX_REALTIME_SIGNALS;
MACRO__POSIX_CLOCKRES _POSIX_RTSIG_MAX;
MACRO__POSIX_ASYNC _POSIX_SAVED_IDS;
MACRO__POSIX_ASYNC _POSIX_SEMAPHORES;
MACRO__POSIX_CLOCKRES _POSIX_SEM_NSEMS_MAX;
MACRO__POSIX_CLOCKRES _POSIX_SEM_VALUE_MAX;
MACRO__POSIX_ASYNC _POSIX_SHARED_MEMORY_OBJECTS;
MACRO__POSIX_CLOCKRES _POSIX_SIGQUEUE_MAX;
MACRO__POSIX_CLOCKRES _POSIX_SSIZE_MAX;
MACRO__POSIX_CLOCKRES _POSIX_STREAM_MAX;
MACRO__POSIX_ASYNC _POSIX_SYNCHRONIZED_IO;
MACRO__POSIX_ASYNC _POSIX_SYNC_IO;
MACRO__POSIX_ASYNC _POSIX_THREADS;
MACRO__POSIX_ASYNC _POSIX_THREAD_ATTR_STACKADDR;
MACRO__POSIX_ASYNC _POSIX_THREAD_ATTR_STACKSIZE;
MACRO__POSIX_CLOCKRES _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
MACRO__POSIX_CLOCKRES _POSIX_THREAD_KEYS_MAX;
MACRO__POSIX_ASYNC _POSIX_THREAD_PRIORITY_SCHEDULING;
MACRO__POSIX_ASYNC _POSIX_THREAD_PRIO_INHERIT;
MACRO__POSIX_ASYNC _POSIX_THREAD_PRIO_PROTECT;
MACRO__POSIX_ASYNC _POSIX_THREAD_PROCESS_SHARED;
MACRO__POSIX_ASYNC _POSIX_THREAD_SAFE_FUNCTIONS;
MACRO__POSIX_CLOCKRES _POSIX_THREAD_THREADS_MAX;
MACRO__POSIX_ASYNC _POSIX_TIMERS;
MACRO__POSIX_CLOCKRES _POSIX_TIMER_MAX;
MACRO__POSIX_CLOCKRES _POSIX_TTY_NAME_MAX;
MACRO__POSIX_CLOCKRES _POSIX_TZNAME_MAX;
MACRO__POSIX POSIX_VDISABLE;
MACRO_VERSION _POSIX_VERSION;
MACRO__POSTED _POSTED;
MACRO_QINSERVICE _QINSERTING;
MACRO_QINSERVICE _QREMOVING;
struct queue *RD(queue_t *);
MACRO__REG _REG_BACKREF_MAX;
MACRO__RPC _RPC_CIRCUIT_N;
MACRO__RPC _RPC_CIRCUIT_V;
MACRO__RPC _RPC_DATAGRAM_N;
MACRO__RPC _RPC_DATAGRAM_V;
MACRO__RPC _RPC_DOOR;
MACRO__RPC _RPC_DOOR_LOCAL;
MACRO__RPC _RPC_DOOR_NETPATH;
MACRO__RPC _RPC_LOCAL;
MACRO__RPC _RPC_NETPATH;
MACRO__RPC RPC_NONE;
MACRO__RPC _RPC_TCP;
MACRO__RPC _RPC_UDP;
MACRO__RPC _RPC_VISIBLE;
MACRO__U _S;
int SAMESTR(queue_t *);
MACRO__SBFSIZ _SBFSIZ;
MACRO__SCHED _SCHED_NEXT;
MACRO__SC _SC_2_CHAR_TERM;
MACRO__SC _SC_2_C_BIND;
MACRO__SC _SC_2_C_DEV;
MACRO__SC _SC_2_C_VERSION;
MACRO__SC _SC_2_FORT_DEV;
MACRO__SC _SC_2_FORT_RUN;
MACRO__SC _SC_2_LOCALEDEF;
MACRO__SC _SC_2_SW_DEV;
MACRO__SC _SC_2_UPE;
MACRO__SC _SC_2_VERSION;
MACRO__SC _SC_AIO_LISTIO_MAX;
MACRO__SC _SC_AIO_MAX;
MACRO__SC _SC_AIO_PRIO_DELTA_MAX;
MACRO__SC _SC_ARG_MAX;
MACRO__SC _SC_ASYNCHRONOUS_IO;
MACRO__SC _SC_ATEXIT_MAX;
MACRO__SC _SC_AVPHYS_PAGES;
MACRO__SC _SC_BC_BASE_MAX;
MACRO__SC _SC_BC_DIM_MAX;
MACRO__SC _SC_BC_SCALE_MAX;
MACRO__SC _SC_BC_STRING_MAX;
MACRO__SC _SC_CHILD_MAX;
MACRO__SC _SC_CLK_TCK;
MACRO__SC _SC_COHER_BLKSZ;
MACRO__SC _SC_COLL_WEIGHTS_MAX;
MACRO__SC _SC_DCACHE_ASSOC;
MACRO__SC _SC_DCACHE_BLKSZ;
MACRO__SC _SC_DCACHE_LINESZ;
MACRO__SC _SC_DCACHE_SZ;
MACRO__SC _SC_DCACHE_TBLKSZ;
MACRO__SC _SC_DELAYTIMER_MAX;
MACRO__SC _SC_EXPR_NEST_MAX;
MACRO__SC _SC_FSYNC;
MACRO__SC _SC_GETGR_R_SIZE_MAX;
MACRO__SC _SC_GETPW_R_SIZE_MAX;
MACRO__SC _SC_ICACHE_ASSOC;
MACRO__SC _SC_ICACHE_BLKSZ;
MACRO__SC _SC_ICACHE_LINESZ;
MACRO__SC _SC_ICACHE_SZ;
MACRO__SC _SC_IOV_MAX;
MACRO__SC _SC_JOB_CONTROL;
MACRO__SC _SC_LINE_MAX;
MACRO__SC _SC_LOGIN_NAME_MAX;
MACRO__SC _SC_LOGNAME_MAX;
MACRO__SC _SC_MAPPED_FILES;
MACRO__SC _SC_MAXPID;
MACRO__SC _SC_MEMLOCK;
MACRO__SC _SC_MEMLOCK_RANGE;
MACRO__SC _SC_MEMORY_PROTECTION;
MACRO__SC _SC_MESSAGE_PASSING;
MACRO__SC _SC_MQ_OPEN_MAX;
MACRO__SC _SC_MQ_PRIO_MAX;
MACRO__SC _SC_NGROUPS_MAX;
MACRO__SC _SC_NPROCESSORS_CONF;
MACRO__SC _SC_NPROCESSORS_ONLN;
MACRO__SC _SC_OPEN_MAX;
MACRO__SC _SC_PAGESIZE;
MACRO__SC _SC_PAGE_SIZE;
MACRO__SC _SC_PASS_MAX;
MACRO__SC _SC_PHYS_PAGES;
MACRO__SC _SC_PRIORITIZED_IO;
MACRO__SC _SC_PRIORITY_SCHEDULING;
MACRO__SC _SC_REALTIME_SIGNALS;
MACRO__SC _SC_RE_DUP_MAX;
MACRO__SC _SC_RTSIG_MAX;
MACRO__SC _SC_SAVED_IDS;
MACRO__SC _SC_SEMAPHORES;
MACRO__SC _SC_SEM_NSEMS_MAX;
MACRO__SC _SC_SEM_VALUE_MAX;
MACRO__SC _SC_SHARED_MEMORY_OBJECTS;
MACRO__SC _SC_SIGQUEUE_MAX;
MACRO__SC _SC_SIGRT_MAX;
MACRO__SC _SC_SIGRT_MIN;
MACRO__SC _SC_SPLIT_CACHE;
MACRO__SC _SC_STACK_PROT;
MACRO__SC _SC_STREAM_MAX;
MACRO__SC _SC_SYNCHRONIZED_IO;
MACRO__SC _SC_THREADS;
MACRO__SC _SC_THREAD_ATTR_STACKADDR;
MACRO__SC _SC_THREAD_ATTR_STACKSIZE;
MACRO__SC _SC_THREAD_DESTRUCTOR_ITERATIONS;
MACRO__SC _SC_THREAD_KEYS_MAX;
MACRO__SC _SC_THREAD_PRIORITY_SCHEDULING;
MACRO__SC _SC_THREAD_PRIO_INHERIT;
MACRO__SC _SC_THREAD_PRIO_PROTECT;
MACRO__SC _SC_THREAD_PROCESS_SHARED;
MACRO__SC _SC_THREAD_SAFE_FUNCTIONS;
MACRO__SC _SC_THREAD_STACK_MIN;
MACRO__SC _SC_THREAD_THREADS_MAX;
MACRO__SC _SC_TIMERS;
MACRO__SC _SC_TIMER_MAX;
MACRO__SC _SC_TTY_NAME_MAX;
MACRO__SC _SC_TZNAME_MAX;
MACRO__SC _SC_T_IOV_MAX;
MACRO__SC _SC_VERSION;
MACRO__SC _SC_XBS5_ILP32_OFF32;
MACRO__SC _SC_XBS5_ILP32_OFFBIG;
MACRO__SC _SC_XBS5_LP64_OFF64;
MACRO__SC _SC_XBS5_LPBIG_OFFBIG;
MACRO__SC _SC_XOPEN_CRYPT;
MACRO__SC _SC_XOPEN_ENH_I18N;
MACRO__SC _SC_XOPEN_LEGACY;
MACRO__SC _SC_XOPEN_REALTIME;
MACRO__SC _SC_XOPEN_REALTIME_THREADS;
MACRO__SC _SC_XOPEN_SHM;
MACRO__SC _SC_XOPEN_UNIX;
MACRO__SC _SC_XOPEN_VERSION;
MACRO__SC _SC_XOPEN_XCU_VERSION;
MACRO_ALIGNMENT _SHORT_ALIGNMENT;
MACRO__JBLEN _SIGJBLEN;
MACRO_SIGNAL _SIGRTMAX;
MACRO_SIGNAL _SIGRTMIN;
void SLPClose(SLPHandle phSLP);
SLPError SLPDelAttrs(SLPHandle hSLP, const char *pcURL, const char *pcAttrs, SLPRegReport *callback, void *pvCookie);
SLPError SLPDereg(SLPHandle hSLP, const char *pcURL, SLPRegReport *callback, void *pvCookie);
SLPError SLPEscape(const char *pcInBuf, char **ppcOutBuf, SLPBoolean isTag);
SLPError SLPFindAttrs(SLPHandle hSLP, const char *pcURL, const char *pcScopeList, const char *pcAttrIds, SLPAttrCallback *callback, void *pvCookie);
SLPError SLPFindScopes(SLPHandle hSLP, char **ppcScopes);
SLPError SLPFindSrvTypes(SLPHandle hSLP, const char *pcNamingAuthority, const char *pcScopeList, SLPSrvTypeCallback *callback, void *pvCookie);
SLPError SLPFindSrvs(SLPHandle hSLP, const char *pcServiceType, const char *pcScopeList, const char *pcSearchFilter, SLPSrvURLCallback *callback, void *pvCookie);
SLPError SLPFree(void *pvMem);
const char *SLPGetProperty(const char *pcName);
int SLPGetRefreshInterval(void);
SLPError SLPOpen(const char *pcLang, SLPBoolean isAsync, SLPHandle *phSLP);
SLPError SLPParseSrvURL(const char *pcSrvURL, SLPSrvURL **ppSrvURL);
SLPError SLPReg(SLPHandle hSLP, const char *pcSrvURL, const unsigned __int16 usLifetime, const char *pcSrvType, const char *pcAttrs, SLPBoolean fresh, SLPRegReport *callback, void *pvCookie);
void SLPSetProperty(const char *pcName, const char *pcValue);
SLPError SLPUnescape(const char *pcInBuf, char **ppcOutBuf, SLPBoolean isTag);
MACRO__SS _SS_MAXSIZE;
MACRO_STANDOUT _STANDOUT;
MACRO__STRREDIR _STRREDIR_MODID;
MACRO__STRUCTURED _STRUCTURED_PROC;
MACRO__ST _ST_FSTYPSZ;
MACRO__SUBS _SUBS_ACTIVE;
MACRO__SUBS _SUBS_REGEXP;
MACRO__SYS _SYS_NMLN;
struct stat Statbuf;
int TABSIZE;
MACRO__TIOC _TIOC;
FIELDTYPE *TYPE_ALNUM;
FIELDTYPE *TYPE_ALPHA;
FIELDTYPE *TYPE_ENUM;
FIELDTYPE *TYPE_INTEGER;
FIELDTYPE *TYPE_NUMERIC;
FIELDTYPE *TYPE_REGEXP;
MACRO__U _U;
MACRO__ISPAD _WINCHANGED;
MACRO__ISPAD _WINMOVED;
MACRO__ISPAD _WINSDEL;
MACRO__WIN _WIN_ADD_ONE;
MACRO__WIN _WIN_INS_ONE;
MACRO_WEXITED _WNOCHLD;
struct queue *WR(queue_t *);
MACRO__U _X;
MACRO__XFTWVER _XFTWVER;
MACRO__XOPEN_REALTIME _XOPEN_ENH_I18N;
MACRO_ATEXIT _XOPEN_IOV_MAX;
MACRO__XOPEN_REALTIME _XOPEN_REALTIME;
MACRO__XOPEN_REALTIME _XOPEN_SHM;
MACRO__XOPEN _XOPEN_VERSION;
MACRO_VERSION _XOPEN_XCU_VERSION;
MACRO__ZERO ZERO_;
uint8_t _13linear2alaw8[8192];
uint8_t _14linear2ulaw8[16384];
int16_t _8alaw2linear16[256];
int8_t _8alaw2linear8[256];
int16_t _8ulaw2linear16[256];
int8_t _8ulaw2linear8[256];
MACRO___BIND __BIND;
MACRO___CLOCK _CLOCK_REALTIME0;
MACRO___CLOCK_REALTIME3 __CLOCK_REALTIME3;
FIELD *_DEFAULT_FIELD;
FORM *_DEFAULT_FORM;
MACRO___I __I_PUSH_NOCTTY;
MACRO___LWP __LWP_ASLWP;
MACRO___NAMESER __NAMESER;
MACRO___NPD __NPD_MAXPASSBYTES;
__nsw_parse_err __NSW_CONF_PARSE_NOFILE;
__nsw_parse_err __NSW_CONF_PARSE_NOPOLICY;
__nsw_parse_err _NSW_CONF_PARSE_SUCCESS;
__nsw_parse_err __NSW_CONF_PARSE_SYSERR;
MACRO___NSW _NSW_CONTINUE;
MACRO___NSW __NSW_NOTFOUND;
MACRO___NSW __NSW_RETURN;
MACRO___NSW __NSW_STD_ERRS;
MACRO___NSW _NSW_SUCCESS;
MACRO___NSW __NSW_TRYAGAIN;
MACRO___NSW __NSW_UNAVAIL;
MACRO___RES __RES;
MACRO___RPC __RPC_CLNT_MINFD_GET;
MACRO___RPC __RPC_CLNT_MINFD_SET;
FILE *__abi_outfile;
struct liblist *__abi_pflib_list;
int *(*__abi_real_errno)(void);
int (*__abi_real_vfprintf)(FILE *, const char *, va_list);
int (*__abi_real_vfwprintf)(FILE *, const wchar_t *, va_list);
int (*__abi_real_vprintf)(const char *, va_list);
int (*__abi_real_vsnprintf)(char *, size_t, const char *, va_list);
int (*__abi_real_vsprintf)(char *, const char *, va_list);
int (*__abi_real_vswprintf)(wchar_t *, size_t, const wchar_t *, va_list);
int (*__abi_real_vwprintf)(const wchar_t *, va_list);
void __assert(const char *, const char *, int);
enum auth_stat __authenticate(struct svc_req *, struct rpc_msg *);
int __b64_ntop(const uchar_t *, size_t, char *, size_t);
int __b64_pton(const char *, uchar_t *, size_t);
char **__break_name(nis_name, int *);
void __broken_name_print(char **, int);
void *__builtin_alloca(size_t size);
int __classic_netdir_getbyaddr(struct netconfig *, struct nd_hostservlist **, struct netbuf *);
int __classic_netdir_getbyname(struct netconfig *, struct nd_hostserv *, struct nd_addrlist **);
unsigned __int8 __ctype[];
unsigned int *__ctype_mask;
nis_attr *__cvt2attr(int *, char **);
int __dir_prefix(char **, char **);
int __dir_same(char **, char **);
int __dn_count_labels(const char *);
int __dn_skipname(const uchar_t *, const uchar_t *);
bool_t __do_ismember(nis_name, nis_object *, nis_result *(*)(nis_name, uint_t));
size_t __fbufsiz(FILE *stream);
size_t __fbufsize(FILE *stream);
wint_t __fgetwc_xpg5(FILE *stream);
wchar_t *__fgetws_xpg5(wchar_t *ws, int n, FILE *stream);
int __filbuf(FILE *);
int __flbf(FILE *stream);
int __flsbuf(int, FILE *);
int __flt_rounds(void);
void __fp_nquery(const uchar_t *, int, FILE *);
void __fp_query(const uchar_t *, FILE *);
void __fp_resstat(struct __res_state *, FILE *);
size_t __fpending(FILE *stream);
void __fpurge(FILE *stream);
wint_t __fputwc_xpg5(wchar_t wc, FILE *stream);
int __fputws_xpg5(const wchar_t *s, FILE *stream);
int __freadable(FILE *stream);
int __freading(FILE *stream);
void __free_break_name(char **, int);
void __free_fdresult(fd_result *res);
int __fsetlocking(FILE *stream, int type);
int __fwritable(FILE *stream);
int __fwriting(FILE *stream);
CLIENT *__get_ti_clnt(char *, CLIENT *, char **, pid_t *, dev_t *);
int __getloadavg(int *, int);
wint_t __getwc_xpg5(__FILE *);
wint_t __getwchar_xpg5(void);
enum auth_stat __gss_authenticate(struct svc_req *, struct rpc_msg *, bool_t *);
OM_uint32 __gss_get_mech_info(char *mech, char **qops);
OM_uint32 __gss_get_mech_type(gss_OID oid, const gss_buffer_t token);
OM_uint32 __gss_get_mechanisms(char *mechArray[], int arrayLen);
OM_uint32 __gss_mech_qops(char *mech, qop_num *mech_qops, int *numqops);
OM_uint32 __gss_mech_to_oid(const char *mech, gss_OID *oid);
OM_uint32 __gss_num_to_qop(char *mech, OM_uint32 num, char **qop);
const char *__gss_oid_to_mech(const gss_OID oid);
OM_uint32 __gss_qop_to_num(char *qop, char *mech, OM_uint32 *num);
const char *__hostalias(const char *);
const _h_val __huge_val;
int __i_size;
int __inet6_rthdr_add(void *, const struct in6_addr *);
struct in6_addr *__inet6_rthdr_getaddr(void *, int);
void *__inet6_rthdr_init(void *, int, int, int);
int __inet6_rthdr_reverse(const void *, void *);
int __inet6_rthdr_segments(const void *);
size_t __inet6_rthdr_space(int, int);
int __inet_netdir_options(struct netconfig *, int option, int fd, char *par);
char *__inet_taddr2uaddr(struct netconfig *, struct netbuf *);
struct netbuf *__inet_uaddr2taddr(struct netconfig *, char *);
__FILE __iob[20];
_LC_charmap_t *__lc_charmap;
_LC_collate_t *__lc_collate;
_LC_ctype_t *__lc_ctype;
_LC_locale_t *__lc_locale;
_LC_messages_t *__lc_messages;
_LC_monetary_t *__lc_monetary;
_LC_numeric_t *__lc_numeric;
_LC_time_t *__lc_time;
char *__loc1;
int __loc_aton(const char *ascii, uchar_t *binary);
const char *__loc_ntoa(const uchar_t *binary, char *ascii);
major_t __major(const int, const dev_t);
dev_t __makedev(const int, const major_t, const minor_t);
int __mbst_get_consumed_array(const mbstate_t *, char *, size_t, size_t);
void *__mbst_get_locale(const mbstate_t *);
char __mbst_get_nconsumed(const mbstate_t *);
int __mbst_set_consumed_array(mbstate_t *, const char *, size_t, size_t);
void __mbst_set_locale(mbstate_t *, const void *);
void __mbst_set_nconsumed(mbstate_t *, char);
minor_t __minor(const int, const dev_t);
int __name_distance(char **, char **);
int __netdir_getbyaddr_nosrv(struct netconfig *, struct nd_hostservlist **, struct netbuf *);
bool_t __nis_CacheAddEntry(fd_result *, directory_obj *);
nis_error __nis_CacheBind(char *dname, directory_obj *dobj);
nis_error __nis_CacheBindDir(char *dname, nis_bound_directory **binding, int flags);
nis_error __nis_CacheBindMaster(char *dname, nis_bound_directory **binding);
nis_error __nis_CacheBindServer(nis_server *srv, int nsrv, nis_bound_directory **binding);
nis_error __nis_CacheLocalInit(uint32_t *exp_time);
uint32_t __nis_CacheLocalLoadPref(void);
nis_error __nis_CacheMgrBindMaster(char *dname);
nis_error __nis_CacheMgrBindReplica(char *dname);
nis_error __nis_CacheMgrBindServer(nis_server *srv, int nsrv);
void __nis_CacheMgrCleanup(void);
nis_error __nis_CacheMgrInit(void);
void __nis_CacheMgrMarkUp(void);
void __nis_CacheMgrReadColdstart(void);
int __nis_CacheMgrRefreshAddress(nis_bound_endpoint *bep);
int __nis_CacheMgrRefreshBinding(nis_bound_directory *binding);
uint32_t __nis_CacheMgrRefreshCache(void);
int __nis_CacheMgrRefreshCallback(nis_bound_endpoint *bep);
uint32_t __nis_CacheMgrTimers(void);
int __nis_CacheMgrUpdateUaddr(char *uaddr);
void __nis_CachePrint(void);
void __nis_CachePrintDir(char *);
int __nis_CacheRefreshAddress(nis_bound_endpoint *bep);
int __nis_CacheRefreshBinding(nis_bound_directory *binding);
int __nis_CacheRefreshCallback(nis_bound_endpoint *bep);
void __nis_CacheRefreshEntry(char *);
bool_t __nis_CacheRemoveEntry(directory_obj *dobj);
void __nis_CacheRestart(void);
nis_error __nis_CacheSearch(char *dname, directory_obj *dobj);
void __nis_CacheStart(void);
CLIENT *__nis_clnt_create(int, struct netconfig *, char *, struct netbuf *, int, int, int, int, int);
fd_result *__nis_finddirectory(nis_bound_directory *, char *dname);
fd_result *__nis_finddirectory_r(directory_obj *, nis_name, fd_result *);
struct netconfig *__nis_get_netconfig(endpoint *ep);
nis_server *__nis_init_callback(CLIENT *, int (*)(nis_name, nis_object *, void *), void *);
nis_name __nis_map_group(nis_name);
nis_name __nis_map_group_r(const nis_name, char *, size_t);
nis_error __nis_ping_servers(nis_bound_directory *, int, int);
nis_name __nis_rpc_domain(void);
int __nis_run_callback(netobj *, rpcproc_t, struct timeval *, CLIENT *);
uint32_t __nis_serverRefreshCache(void);
char *__nis_xdr_dup(xdrproc_t, char *, char *);
int __ns_format_ttl(ulong_t, char *, size_t);
uint_t __ns_get16(const uchar_t *);
ulong_t __ns_get32(const uchar_t *);
int __ns_initparse(const uchar_t *, int, ns_msg *);
int __ns_name_compress(const char *, uchar_t *, size_t, const uchar_t **, const uchar_t **);
int __ns_name_ntop(const uchar_t *, char *, size_t);
int __ns_name_pack(const uchar_t *, uchar_t *, int, const uchar_t **, const uchar_t **);
int __ns_name_pton(const char *, uchar_t *, size_t);
int __ns_name_uncompress(const uchar_t *, const uchar_t *, const uchar_t *, char *, size_t);
int __ns_name_unpack(const uchar_t *, const uchar_t *, const uchar_t *, uchar_t *, size_t);
int __ns_parse_ttl(const char *, ulong_t *);
int __ns_parserr(ns_msg *, ns_sect, int, ns_rr *);
void __ns_put16(uint_t, uchar_t *);
void __ns_put32(ulong_t, uchar_t *);
int __ns_sprintrr(const ns_msg *, const ns_rr *, const char *, const char *, char *, size_t);
int __ns_sprintrrf(const uchar_t *, size_t, const char *, ns_class, ns_type, ulong_t, const uchar_t *, size_t, const char *, const char *, char *, size_t);
const char __nsl_dom[];
action_t __nsw_extended_action(struct __nsw_lookup *, int);
int __nsw_freeconfig(struct __nsw_switchconfig *);
struct __nsw_switchconfig *__nsw_getconfig(const char *, enum __nsw_parse_err *);
const uchar_t *__p_cdname(const uchar_t *, const uchar_t *, FILE *);
const uchar_t *__p_cdnname(const uchar_t *, const uchar_t *, int, FILE *);
const char *__p_class(int);
const struct res_sym __p_class_syms[];
const uchar_t *__p_fqname(const uchar_t *, const uchar_t *, FILE *);
const uchar_t *__p_fqnname(const uchar_t *cp, const uchar_t *msg, int, char *, int);
const char *__p_option(uint_t option);
void __p_query(const uchar_t *);
char *__p_secstodate(uint_t);
const char *__p_section(int section, int opcode);
const char *__p_time(unsigned int);
const char *__p_type(int);
const struct res_sym __p_type_syms[];
int __pctx_cpc(pctx_t *pctx, int cmd, id_t lwpid, void *data, int flags, size_t size);
int __priocntl(int, idtype_t, id_t, int, caddr_t);
int __priocntlset(int, procset_t *, int, caddr_t);
void __pthread_cleanup_pop(int ex, _cleanup_t *info);
void __pthread_cleanup_push(void (*routine)(void *), void *args, caddr_t fp, _cleanup_t *info);
void __putlong(unsigned int, uchar_t *);
void __putshort(unsigned __int16, uchar_t *);
wint_t __putwc_xpg5(wint_t, __FILE *);
wint_t __putwchar_xpg5(wint_t);
int __res_dnok(const char *);
int __res_hnok(const char *);
int __res_isourserver(const struct sockaddr_in *);
int __res_mailok(const char *);
int __res_nameinquery(const char *, int, int, const uchar_t *, const uchar_t *);
int __res_ownok(const char *);
int __res_queriesmatch(const uchar_t *, const uchar_t *, const uchar_t *, const uchar_t *);
uint_t __res_randomid(void);
int __rpc_dtbsize(void);
void __rpc_endconf(void *);
uint_t __rpc_get_a_size(t_scalar_t);
int __rpc_get_default_domain(char **);
uint_t __rpc_get_t_size(t_scalar_t, t_scalar_t);
struct netconfig *__rpc_getconf(void *);
struct netconfig *__rpc_getconfip(char *);
bool_t __rpc_gss_unwrap();
bool_t __rpc_gss_wrap();
int __rpc_matchserv(int, unsigned int);
void *__rpc_setconf(char *);
struct netconfig *__rpcfd_to_nconf(int, int);
void __seterr_reply(struct rpc_msg *, struct rpc_err *);
int __sparc_utrap_install(utrap_entry_t type, utrap_handler_t new_precise, utrap_handler_t new_deferred, utrap_handler_t *old_precise, utrap_handler_t *old_deferred);
int __start_clock(int);
uint32_t __stop_clock(int);
int __strcmp_case_insens(char *, char *);
int __strncmp_case_insens(char *, char *);
int __svc_dup(struct svc_req *, caddr_t *, uint_t *, char *);
bool_t __svc_dupcache_init(void *, int, char **);
int __svc_dupdone(struct svc_req *, caddr_t, uint_t, int, char *);
int __svc_vc_dup(struct svc_req *, caddr_t *, uint_t *);
bool_t __svc_vc_dupcache_init(SVCXPRT *, void *, int);
int __svc_vc_dupdone(struct svc_req *, caddr_t, uint_t, int);
enum auth_stat __svcrpcsec_gss();
const char *__sym_ntop(const struct res_sym *, int, int *);
const char *__sym_ntos(const struct res_sym *, int, int *);
int __sym_ston(const struct res_sym *, const char *, int *);
struct tnf_probe_version __tnf_probe_version_1;
tnf_tag_version_t __tnf_tag_version_1;
tnf_tag_version_t __tnf_tag_version_1_info;
int *__trans_lower;
int *__trans_upper;
wint_t __ungetwc_xpg5(wint_t wc, FILE *stream);
size_t __wcsftime_xpg5(wchar_t *wcs, size_t maxsize, const wchar_t *format, const struct tm *timptr);
wchar_t *__wcstok_xpg5(wchar_t *ws1, const wchar_t *ws2, wchar_t **ptr);
char *_argv_to_csl(char **strings);
unsigned __int8 *_bufendtab[];
Elf32_Word _check_rtld_feature(Elf32_Word);
int _cladm(int fac, int cmd, void *data);
char **_csl_to_argv(char *csl);
char *_do_unescape(char *src);
MACRO___dontcare __dontcare__;
int _ea_errval;
void _exit(int status);
void _exithandle(void);
void _flushlbf(void);
void _free_argv(char **p_argv);
int _get_hostserv_inetnetdir_byaddr(struct netconfig *, struct nss_netdirbyaddr_in *, union nss_netdirbyaddr_out *);
int _get_hostserv_inetnetdir_byname(struct netconfig *, struct nss_netdirbyname_in *, union nss_netdirbyname_out *);
caddr_t _getfp(void);
int _getsyx(int *, int *);
int _insert2kva(kva_t *, char *, char *);
unsigned int _iswctype(wchar_t, int);
void (*_kobj_printf)(void *, const char *fmt, ...);
int _kva2str(kva_t *, char *, int, char *, char *);
kva_t *_kva_dup(kva_t *);
void _kva_free(kva_t *);
FILE *_lastbuf;
void _ld_concurrency(void *);
void _ld_libc(void *);
const enum version _lib_version;
void _longjmp(jmp_buf env, int val);
int _lwp_cond_broadcast(lwp_cond_t *cvp);
int _lwp_cond_signal(lwp_cond_t *cvp);
int _lwp_cond_timedwait(lwp_cond_t *cvp, lwp_mutex_t *mp, timestruc_t *abstime);
int _lwp_cond_wait(lwp_cond_t *cvp, lwp_mutex_t *mp);
int _lwp_continue(lwpid_t target_lwp);
int _lwp_create(ucontext_t *contextp, unsigned int flags, lwpid_t *new_lwp);
void _lwp_exit(void);
void *_lwp_getprivate(void);
int _lwp_info(struct lwpinfo *buffer);
int _lwp_kill(lwpid_t target_lwp, int sig);
void _lwp_makecontext(ucontext_t *ucp, void (*start_routine)(void *), void *arg, void *c_private, caddr_t stack_base, size_t stack_size);
int _lwp_mutex_lock(lwp_mutex_t *mp);
int _lwp_mutex_trylock(lwp_mutex_t *mp);
int _lwp_mutex_unlock(lwp_mutex_t *mp);
int _lwp_schedctl(unsigned int, int, sc_shared_t **);
lwpid_t _lwp_self(void);
int _lwp_sema_init(lwp_sema_t *sema, int count);
int _lwp_sema_post(lwp_sema_t *sema);
int _lwp_sema_trywait(lwp_sema_t *sema);
int _lwp_sema_wait(lwp_sema_t *sema);
void _lwp_setprivate(void *buffer);
int _lwp_sigredirect(lwpid_t target_lwp, int signo, int *queued);
int _lwp_suspend(lwpid_t target_lwp);
int _lwp_suspend2(lwpid_t, int *);
int _lwp_wait(lwpid_t wait_for, lwpid_t *departed_lwp);
int _meta(int);
int _mutex_held(mutex_t *);
int _nderror;
struct nd_hostservlist *_netdir_getbyaddr(struct netconfig *, struct netbuf *);
struct nd_addrlist *_netdir_getbyname(struct netconfig *, struct nd_hostserv *);
char *_netdir_mergeaddr(struct netconfig *, char *uaddr, char *ruaddr);
kva_t *_new_kva(int size);
struct _ns_flagdata _ns_flagdata[];
nss_XbyY_buf_t *_nss_XbyY_buf_alloc(int struct_size, int buffer_size);
void _nss_XbyY_buf_free(nss_XbyY_buf_t *);
char **_nss_netdb_aliases(const char *, int, char *, int);
struct opaque_auth _null_auth;
char *_rawcombuf;
struct __res_state _res;
int _ring(bool);
int _rw_read_held(rwlock_t *);
int _rw_write_held(rwlock_t *);
void _s_aligned_copy(char *, int, int, char *, int *);
void _s_blockallsignals(sigset_t *);
int _s_cbuf_alloc(struct _si_user *, char **);
struct _si_user *_s_checkfd(int);
void _s_close(struct _si_user *);
int _s_do_ioctl(int, char *, int, int, int *);
int _s_getfamily(struct _si_user *);
int _s_is_ok(struct _si_user *, int, struct strbuf *);
struct netconfig *_s_match(int, int, int, void **);
int _s_max(int, int);
int _s_min(int, int);
void _s_restoresigmask(sigset_t *);
int _s_sockdebug;
struct _si_user *_s_socreate(int, int, int);
int _s_soreceive(struct _si_user *, struct msghdr *, int);
int _s_sosend(struct _si_user *, struct msghdr *, int);
int _s_synch(struct _si_user *);
int _s_uxpathlen(struct sockaddr_un *);
int _sema_held(sema_t *);
int _setecho(int);
int _setjmp(jmp_buf env);
int _setnonl(int);
void _setqiflush(int);
unsigned __int8 _sibuf[];
int _signotifywait(void);
unsigned __int8 _sobuf[];
const char _srm_interface_version[];
kva_t *_str2kva(char *, char *, char *);
void _svc_destroy_private();
void _svc_dg_destroy_private();
void _svc_vc_destroy_private();
const char *_sys_buslist[];
const char *_sys_cldlist[];
const char *_sys_fpelist[];
const char *_sys_illlist[];
const char *_sys_segvlist[];
const struct siginfolist *_sys_siginfolistp;
const int _sys_siglistn;
const char **_sys_siglistp;
const char *_sys_traplist[];
int _sysconf(int);
char *_taddr2uaddr(struct netconfig *, struct netbuf *);
int _tolower(int c);
int _toupper(int c);
wchar_t _trwctype(wchar_t, int);
ts_t _tstamp_c;
struct netbuf *_uaddr2taddr(struct netconfig *, char *);
char *_unctrl[];
int _xftw(const int, const char *, int (*)(const char *, const struct stat *, int), int);
int _xftw64(const int, const char *, int (*)(const char *, const struct stat64 *, int), int);
void *_xti_alloc(int fd, int struct_type, int fields);
int _xti_bind(int fd, const struct _xti_bind *req, struct _xti_bind *ret);
int _xti_close(int fd);
int _xti_connect(int fd, const struct t_call *sndcall, struct t_call *rcvcall);
int _xti_error(const char *errmsg);
int _xti_free(void *ptr, int struct_type);
int _xti_getinfo(int fd, struct t_info *info);
int _xti_getprotaddr(int fd, struct _xti_bind *boundaddr, struct _xti_bind *peeraddr);
int _xti_getstate(int fd);
int _xti_listen(int fd, struct t_call *call);
int _xti_look(int fd);
int _xti_open(const char *name, int oflag, struct t_info *info);
int _xti_optmgmt(int fd, const struct _xti_optmgmt *req, struct _xti_optmgmt *ret);
int _xti_rcv(int fd, void *buf, unsigned int nbytes, int *flags);
int _xti_rcvconnect(int fd, struct t_call *call);
int _xti_rcvdis(int fd, struct t_discon *discon);
int _xti_rcvrel(int fd);
int _xti_rcvreldata(int fd, struct t_discon *discon);
int _xti_rcvudata(int fd, struct t_unitdata *unitdata, int *flags);
int _xti_rcvuderr(int fd, struct t_uderr *uderr);
int _xti_rcvv(int fd, struct t_iovec *iov, unsigned int iovcount, int *flags);
int _xti_rcvvudata(int fd, struct t_unitdata *unitdata, struct t_iovec *iov, unsigned int iovcount, int *flags);
int _xti_snddis(int fd, const struct t_call *call);
int _xti_sndrel(int fd);
int _xti_sndreldata(int fd, struct t_discon *discon);
int _xti_sndudata(int fd, const struct t_unitdata *unitdata);
int _xti_sndv(int fd, const struct t_iovec *iov, unsigned int intiovcount, int flags);
int _xti_sndvudata(int fd, struct t_unitdata *unitdata, struct t_iovec *iov, unsigned int iovcount);
const char *_xti_strerror(int errnum);
int _xti_sync(int fd);
int _xti_sysconf(int name);
int _xti_unbind(int fd);
int _xti_xns5_accept(int fd, int resfd, const struct t_call *call);
int _xti_xns5_snd(int fd, void *buf, unsigned int nbytes, int flags);
int a64l(const char *s);
void *abi_calloc(size_t, size_t);
int abi_fprintf(FILE *, const char *, ...);
int abi_fputs(const char *, FILE *);
void abi_free(void *);
void *abi_malloc(size_t);
int (*abi_mutex_lock)(mutex_t *);
int (*abi_mutex_unlock)(mutex_t *);
int abi_putc(int, FILE *);
void *abi_realloc(void *, size_t);
int (*abi_sigaction)(int, const struct sigaction *, struct sigaction *);
int (*abi_sigsetmask)(int, const sigset_t *, sigset_t *);
mutex_t abi_stdio_mutex;
int abi_strpsz;
void abilock(sigset_t *);
sigset_t abisigset;
void abiunlock(sigset_t *);
void abort(void);
int abs(int val);
int accept(int socket, struct sockaddr *address, socklen_t *address_len);
int access(const char *path, int amode);
int acct(const char *path);
int acl(char *pathp, int cmd, int nentries, aclent_t *aclbufp);
int aclcheck(aclent_t *aclbufp, int nentries, int *which);
int aclfrommode(aclent_t *aclbufp, int nentries, mode_t *modep);
aclent_t *aclfromtext(char *acltextp, int *aclcnt);
int aclsort(int nentries, int calclass, aclent_t *aclbufp);
int acltomode(aclent_t *aclbufp, int nentries, mode_t *modep);
char *acltotext(aclent_t *aclbufp, int aclcnt);
double acos(double x);
double acosh(double x);
chtype *acs32map;
_ochtype *acs_map;
int action(struct action_arg **aa, int argc, char **argv);
int addch(chtype ch);
int addnstr(char *str, int n);
int addnwstr(wchar_t *wstr, int n);
int address_in_memlist(struct memlist *, uint64_t, size_t);
int addsev(int int_val, const char *string);
int addseverity(int severity, const char *string);
int addstr(char *str);
int addwstr(wchar_t *wstr);
int adjcurspos(void);
int adjtime(struct timeval *delta, struct timeval *olddelta);
void adr_char(adr_t *, char *, int);
int adr_count(adr_t *);
void adr_int32(adr_t *, int32_t *, int);
void adr_int64(adr_t *, int64_t *, int);
void adr_short(adr_t *, __int16 *, int);
void adr_start(adr_t *, char *);
int adrf_char(adr_t *, char *, int);
int adrf_int32(adr_t *, int32_t *, int);
int adrf_int64(adr_t *, int64_t *, int);
int adrf_opaque(adr_t *, char *);
int adrf_short(adr_t *, __int16 *, int);
void adrf_start(adr_t *, FILE *);
int adrf_string(adr_t *, char *);
int adrf_u_char(adr_t *, uchar_t *, int);
int adrf_u_int32(adr_t *, uint32_t *, int);
int adrf_u_int64(adr_t *, uint64_t *, int);
int adrf_u_short(adr_t *, ushort_t *, int);
void adrm_char(adr_t *, char *, int);
void adrm_int32(adr_t *, int32_t *, int);
void adrm_int64(adr_t *, int64_t *, int);
void adrm_short(adr_t *, __int16 *, int);
void adrm_start(adr_t *, char *);
void adrm_string(adr_t *, char *);
void adrm_u_char(adr_t *, uchar_t *, int);
void adrm_u_int32(adr_t *, uint32_t *, int);
void adrm_u_int64(adr_t *, uint64_t *, int);
void adrm_u_opaque(adr_t *, char *);
void adrm_u_short(adr_t *, ushort_t *, int);
int advance(const char *string, const char *expbuf);
caddr_t *afile;
int aflt_add_handler(dev_info_t *, int, void **, int (*)(void *, void *), void *);
int aflt_get_iblock_cookie(dev_info_t *, int, ddi_iblock_cookie_t *);
int aflt_remove_handler(void *);
int aio_cancel(int fildes, struct aiocb *aiocbp);
int aio_cancel64(int, aiocb64_t *);
int aio_error(const struct aiocb *aiocbp);
int aio_error64(const aiocb64_t *);
int aio_fsync(int op, struct aiocb *aiocbp);
int aio_fsync64(int, aiocb64_t *);
int aio_read(struct aiocb *aiocbp);
int aio_read64(aiocb64_t *);
ssize_t aio_return(struct aiocb *aiocbp);
ssize_t aio_return64(aiocb64_t *);
int aio_suspend(const struct aiocb *const list[], int nent, const struct timespec *timeout);
int aio_suspend64(const aiocb64_t *const [], int, const struct timespec *);
int aio_write(struct aiocb *aiocbp);
int aio_write64(aiocb64_t *);
int aiocancel(aio_result_t *resultp);
int aioread(int fildes, char *bufp, int bufs, off_t offset, int whence, aio_result_t *resultp);
int aioread64(int, caddr_t, int, off64_t, int, aio_result_t *);
aio_result_t *aiowait(const struct timeval *timeout);
int aiowrite(int fildes, const char *bufp, int bufs, off_t offset, int whence, aio_result_t *resultp);
int aiowrite64(int, caddr_t, int, off64_t, int, aio_result_t *);
unsigned int alarm(unsigned int sec);
int altzone;
AMI_STATUS ami_decrypt(ami_handle_t, const uchar_t *, size_t, int, ami_mechanism, const ami_session_key_t, const ami_session_key_params_t, uchar_t **, size_t *);
AMI_STATUS ami_digest(ami_handle_t, const uchar_t *, size_t, int, ami_mechanism, uchar_t **, size_t *);
AMI_STATUS ami_encrypt(ami_handle_t, const uchar_t *, size_t, int, ami_mechanism, const ami_session_key_t, const ami_session_key_params_t, uchar_t **, size_t *);
AMI_STATUS ami_end(ami_handle_t);
void ami_free_cert(ami_cert_t);
void ami_free_cert_list(ami_cert_list_t);
void ami_free_private_key(ami_private_key_t);
void ami_free_public_key(ami_public_key_t);
void ami_free_symmetric_key(ami_session_key_t);
void ami_free_symmetric_key_params(ami_session_key_params_t);
AMI_STATUS ami_gen_symmetric_key(const ami_handle_t, ami_mechanism, uint_t, uint_t, ami_session_key_t *, ami_session_key_params_t *);
AMI_STATUS ami_get_cert(const ami_handle_t, const char *, ami_cert_list_t *);
AMI_STATUS ami_get_cert_chain(const ami_handle_t, const ami_cert_t, const char **, ami_cert_list_t *);
AMI_STATUS ami_get_cert_first(ami_handle_t amih, ami_cert_list_t certlist, ami_cert_t *cert);
char *ami_get_cert_issuer(ami_cert_t cert);
AMI_STATUS ami_get_cert_next(ami_handle_t amih, ami_cert_list_t certlist, ami_cert_t *cert);
AMI_STATUS ami_get_cert_serial_number(ami_cert_t cert, uchar_t **serialNumber, size_t *length);
AMI_STATUS ami_get_cert_signature(ami_cert_t cert, uchar_t **sign, size_t *signLen);
char *ami_get_cert_subject(ami_cert_t cert);
struct tm *ami_get_cert_valid_from(ami_cert_t cert);
struct tm *ami_get_cert_valid_to(ami_cert_t cert);
AMI_STATUS ami_get_private_key(const ami_handle_t, ami_private_key_t *);
ami_mechanism ami_get_private_key_mechanism(ami_private_key_t privateKey);
ami_public_key_t ami_get_public_key_from_cert(ami_cert_t cert);
ami_mechanism ami_get_public_key_mechanism(ami_public_key_t publicKey);
AMI_STATUS ami_get_trusted_cert_list(ami_handle_t amih, ami_cert_list_t *certlist);
AMI_STATUS ami_init(const char *appName, const char *backend, const char *alias, const char *hostname, uint_t flags, uint_t crypto_define, const char *ldd, ami_handle_t *amih);
AMI_STATUS ami_random(const ushort_t, uchar_t **);
AMI_STATUS ami_sign(ami_handle_t, const uchar_t *, size_t, int, ami_mechanism, const ami_private_key_t, ami_mechanism, uchar_t **, size_t *);
char *ami_strerror(ami_handle_t, const AMI_STATUS);
AMI_STATUS ami_unwrap_key(const ami_handle_t, const uchar_t *, size_t, ami_mechanism, const ami_private_key_t, ami_mechanism, ami_session_key_t *);
AMI_STATUS ami_verify(ami_handle_t, const uchar_t *, size_t, int, ami_mechanism, const ami_public_key_t, ami_mechanism, const uchar_t *, const size_t);
AMI_STATUS ami_verify_cert(const ami_handle_t, const ami_cert_t, const ami_public_key_t);
AMI_STATUS ami_wrap_key(const ami_handle_t, const ami_session_key_t, ami_mechanism, const ami_public_key_t, ami_mechanism, uchar_t **, size_t *);
ani_free_t ani_free_pool[];
caddr_t *aproc;
void arc(__int16 x0, __int16 y0, __int16 x1, __int16 y1, __int16 x2, __int16 y2);
int ascftime(char *s, const char *format, const struct tm *timeptr);
char *asctime(const struct tm *tm);
char *asctime_r(const struct tm *tm, char *buf);
double asin(double x);
double asinh(double x);
void assert(int expression);
int assfail(const char *, const char *, int);
double atan(double x);
double atan2(double y, double x);
double atanh(double x);
int atexit(void (*func)(void));
double atof(const char *str);
int atoi(const char *str);
int atol(const char *str);
__int64 atoll(const char *str);
void atomic_add_16(uint16_t *target, int16_t delta);
uint16_t atomic_add_16_nv(uint16_t *target, int16_t delta);
void atomic_add_32(uint32_t *target, int32_t delta);
uint32_t atomic_add_32_nv(uint32_t *target, int32_t delta);
void atomic_add_64(uint64_t *target, int64_t delta);
uint64_t atomic_add_64_nv(uint64_t *target, int64_t delta);
void atomic_add_long(ulong_t *target, int delta);
ulong_t atomic_add_long_nv(ulong_t *target, int delta);
void atomic_and_32(uint32_t *target, uint32_t bits);
void atomic_and_uint(uint_t *target, uint_t bits);
void atomic_or_32(uint32_t *target, uint32_t bits);
void atomic_or_uint(uint_t *target, uint_t bits);
int attroff(int attrs);
int attron(int attrs);
int attrset(int attrs);
int au_close(int d, int keep, __int16 event);
int au_fetch_tok(au_token_t *, char *, int);
int au_open(void);
int au_preselect(au_event_t event, au_mask_t *mask_p, int sorf, int flag);
int au_print_tok(FILE *, au_token_t *, char *, char *, char *, int);
int au_read_rec(FILE *, char **);
token_t *au_to_acl(struct acl *);
token_t *au_to_arg(char n, char *text, u_long v);
token_t *au_to_arg32(char, char *, uint32_t);
token_t *au_to_arg64(char, char *, uint64_t);
token_t *au_to_attr(struct vattr *attr);
token_t *au_to_cmd(u_long argc, char **argv, char **envp);
token_t *au_to_data(char unit_print, char unit_type, char unit_count, char *p);
token_t *au_to_exec_args(char **);
token_t *au_to_exec_env(char **);
token_t *au_to_exit(int, int);
token_t *au_to_groups(int *groups);
token_t *au_to_header(au_event_t, au_emod_t);
token_t *au_to_in_addr(struct inaddr *internet_addr);
token_t *au_to_in_addr_ex(int32_t *);
token_t *au_to_ipc(int id);
token_t *au_to_ipc_perm(struct ipc_perm *perm);
token_t *au_to_iport(ushort_t iport);
token_t *au_to_me(void);
token_t *au_to_new_in_addr(struct inaddr *internet_addr);
token_t *au_to_new_process(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *au_to_new_socket(struct socket *so);
token_t *au_to_new_subject(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *au_to_newgroups(int n, int *groups);
token_t *au_to_opaque(char *data, __int16 bytes);
token_t *au_to_path(char *path);
token_t *au_to_process(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *au_to_return(char number, uint_t value);
token_t *au_to_return32(char, uint32_t);
token_t *au_to_return64(char, uint64_t);
token_t *au_to_seq(int);
token_t *au_to_sock_inet(struct sockaddr_in *);
token_t *au_to_socket(struct socket *so);
token_t *au_to_socket_ex(__int16, __int16, struct sockaddr *, struct sockaddr *);
token_t *au_to_subject(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *au_to_subject_ex(au_id_t, uid_t, gid_t, uid_t, gid_t, pid_t, au_asid_t, au_tid_addr_t *);
token_t *au_to_text(char *text);
token_t *au_to_trailer(void);
token_t *au_to_xatom(ushort_t, char *);
token_t *au_to_xobj(int, int, int);
token_t *au_to_xproto(pid_t);
token_t *au_to_xselect(char *, char *, __int16, char *);
int au_user_mask(char *username, au_mask_t *mask_p);
int au_wait;
int au_write(int d, token_t *m);
int audit(caddr_t record, int length);
au_state_t audit_ets[];
au_fstat_t audit_file_stat;
struct audit_s2e audit_s2e[];
au_stat_t audit_statistics;
int auditon(int cmd, caddr_t data, int length);
int auditstat(au_stat_t *);
int auditsvc(int fd, int limit);
int audituser(char *, int);
int authdes_getucred(const struct authdes_cred *, uid_t *, gid_t *, __int16 *, gid_t *);
AUTH *authdes_seccreate(const char *, const uint_t, const char *, const des_block *);
int authkerb_getucred(struct svc_req *, uid_t *, gid_t *, __int16 *, int *);
AUTH *authkerb_seccreate(const char *, const char *, const char *, const uint_t, const char *, int *);
AUTH *authnone_create(void);
AUTH *authsys_create(const char *, const uid_t, const gid_t, const int, const gid_t *);
AUTH *authsys_create_default(void);
autofs_lookupres *autofs_lookup_3(autofs_lookupargs *, CLIENT *);
autofs_lookupres *autofs_lookup_3_svc(autofs_lookupargs *, struct svc_req *);
autofs_mountres *autofs_mount_3(autofs_lookupargs *, CLIENT *);
autofs_mountres *autofs_mount_3_svc(autofs_lookupargs *, struct svc_req *);
void *autofs_null_3(void *, CLIENT *);
void *autofs_null_3_svc(void *, struct svc_req *);
int autofs_prog_3_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
autofs_rddirres *autofs_readdir_3(autofs_rddirargs *, CLIENT *);
autofs_rddirres *autofs_readdir_3_svc(autofs_rddirargs *, struct svc_req *);
umntres *autofs_unmount_3(umntrequest *, CLIENT *);
umntres *autofs_unmount_3_svc(umntrequest *, struct svc_req *);
char *basename(char *path);
int baudrate(void);
int bcmp(const void *s1, const void *s2, size_t n);
void bcopy(const void *s1, void *s2, size_t n);
int beep(void);
char *bgets(char *buffer, size_t *count, FILE *stream, const char *breakstring);
int bind(int socket, const struct sockaddr *address, socklen_t address_len);
char *bindtextdomain(const char *domainname, const char *dirname);
int bitno;
int blkno;
char *boolcodes[];
char *boolfnames[];
char *boolnames[];
int boot_max_ncpus;
caddr_t bop_alloc(struct bootops *bop, caddr_t virthint, size_t size, int align);
int bop_close(struct bootops *bop, int fd);
void bop_free(struct bootops *bop, caddr_t virt, size_t size);
int bop_getprop(struct bootops *bop, char *name, void *value);
int bop_getproplen(struct bootops *bop, char *name);
uint_t bop_getversion(struct bootops *bootops);
caddr_t bop_map(struct bootops *bop, caddr_t virt, int space, caddr_t phys, size_t size);
int bop_mountroot(struct bootops *bop, char *path);
char *bop_nextprop(struct bootops *bop, char *prevprop);
int bop_open(struct bootops *bop, char *s, int flags);
void bop_puts(struct bootops *, char *);
void bop_putsarg(struct bootops *, const char *, ...);
void bop_quiesce_io(struct bootops *bop);
int bop_read(struct bootops *bop, int fd, caddr_t buf, size_t size);
int bop_seek(struct bootops *bop, int fd, off_t hi, off_t lo);
void bop_unmap(struct bootops *bop, caddr_t virt, size_t size);
int bop_unmountroot(struct bootops *bop);
int bottom_panel(PANEL *panel);
void box32(__int16 x0, __int16 y0, __int16 x1, __int16 y1);
char *braelist[9];
char *braslist[9];
int brk(void *endds);
void (*bsd_signal(int sig, void (*func)(int)))(int);
void *bsearch(const void *key, const void *base, size_t nel, size_t size, int (*compar)(const void *, const void *));
void bsm_cwfree(struct cwrd *);
void bsm_cwincr(struct cwrd *);
const char *bsm_dom;
unsigned int btop(unsigned int);
unsigned int btopr(unsigned int);
wint_t btowc(int c);
size_t bufsplit(char *buf, size_t n, char **a);
int bw2_destroy();
struct pixrect *bw2_make();
struct pixrectops bw2_ops;
void bzero(void *s, size_t n);
int cacheauclass(au_class_ent_t **, au_class_t);
int cacheauclassnam(au_class_ent_t **, char *);
int cacheauevent(au_event_ent_t **, au_event_t);
struct kmem_cache *cachefs_cache_kmcache;
int cachefs_cd_access(fscache_t *fscp, int waitconnected, int writing);
int cachefs_cd_access_miss(fscache_t *fscp);
void cachefs_cd_release(fscache_t *fscp);
void cachefs_cd_timedout(fscache_t *fscp);
struct kmem_cache *cachefs_cnode_cache;
struct kmem_cache *cachefs_filegrp_cache;
struct kmem_cache *cachefs_fscache_cache;
int cachefs_hash_sizes[];
int cachefs_io_cidtofid(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_create(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_daemonid(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_exists(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_getattrfid(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_getattrname(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_getinfo(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_getstats(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_link(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_lostfound(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_mkdir(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_pushback(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_remove(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_rename(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_rmdir(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_rootfid(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_setattr(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_setsecattr(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_stateget(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_stateset(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_symlink(vnode_t *vp, void *dinp, void *doutp);
int cachefs_io_xwait(vnode_t *vp, void *dinp, void *doutp);
cachefs_kstat_key_t *cachefs_kstat_key;
int cachefs_kstat_key_n;
uint_t cachefs_max_apop_inqueue;
int cachefs_pack(vnode_t *, char *, cred_t *);
int cachefs_packinfo(vnode_t *dvp, char *name, int *statusp, cred_t *cr);
struct kmem_cache *cachefs_req_cache;
int cachefs_unpack(vnode_t *, char *, cred_t *);
int cachefs_unpackall(vnode_t *);
int calchash();
void *calloc(size_t nelem, size_t elsize);
int callrpc(char *, rpcprog_t, rpcvers_t, rpcproc_t, xdrproc_t, char *, xdrproc_t, char *);
bool can_change_color(void);
uint32_t cas32(uint32_t *target, uint32_t cmp, uint32_t newval);
uint64_t cas64(uint64_t *target, uint64_t cmp, uint64_t newval);
ulong_t caslong(ulong_t *target, ulong_t cmp, ulong_t newval);
void *casptr(void *target, void *cmp, void *newval);
int catclose(nl_catd catd);
char *catgets(nl_catd catd, int set_num, int msg_num, const char *s);
nl_catd catopen(const char *name, int oflag);
int cb_prog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
int cbc_crypt(char *key, char *buf, size_t len, unsigned int mode, char *ivec);
void *cbproc_error_1(nis_error *, CLIENT *);
void *cbproc_error_1_svc(nis_error *, struct svc_req *);
void *cbproc_finish_1(void *, CLIENT *);
void *cbproc_finish_1_svc(void *, struct svc_req *);
bool_t *cbproc_receive_1(cback_data *, CLIENT *);
bool_t *cbproc_receive_1_svc(cback_data *, struct svc_req *);
int cbreak(void);
double cbrt(double x);
double ceil(double x);
cfga_err_t cfga_change_state(cfga_cmd_t state_change_cmd, const char *ap_id, const char *options, struct cfga_confirm *confp, struct cfga_msg *msgp, char **errstring, cfga_flags_t flags);
cfga_err_t cfga_help(struct cfga_msg *msgp, const char *options, cfga_flags_t flags);
cfga_err_t cfga_list(const char *ap_id, struct cfga_stat_data **ap_id_list, int *nlist, const char *options, char **errstring);
cfga_err_t cfga_list_ext(const char *ap_id, struct cfga_list_data **ap_id_list, int *nlist, const char *options, const char *listopts, char **errstring, cfga_flags_t flags);
cfga_err_t cfga_private_func(const char *function, const char *ap_id, const char *options, struct cfga_confirm *confp, struct cfga_msg *msgp, char **errstring, cfga_flags_t flags);
cfga_err_t cfga_stat(const char *ap_id, struct cfga_stat_data *buf, const char *options, char **errstring);
cfga_err_t cfga_test(const char *ap_id, const char *options, struct cfga_msg *msgp, char **errstring, cfga_flags_t flags);
speed_t cfgetispeed(const struct termios *termios_p);
speed_t cfgetospeed(const struct termios *termios_p);
void cfree(void *ptr, size_t nelem, size_t elsize);
int cfsetispeed(struct termios *termios_p, speed_t speed);
int cfsetospeed(struct termios *termios_p, speed_t speed);
int cftime(char *s, char *format, const time_t *clock);
int chdir(const char *path);
uint32_t checksum32(void *, size_t);
int chkauthattr(const char *authname, const char *username);
int chmod(const char *path, mode_t mode);
int chown(const char *path, uid_t owner, gid_t group);
int chroot(const char *path);
void circle(__int16 x, __int16 y, __int16 r);
void cl_flk_state_transition_notify(lock_descriptor_t *lock, int old_state, int new_state);
int clboot_loadrootmodules();
int clboot_modload(struct modctl *mp);
void clboot_mountroot();
int clboot_rootconf();
int clear(void);
void clearerr(FILE *stream);
int clearok(WINDOW *win, bool bf);
enum clnt_stat clnt_broadcast(rpcprog_t, rpcvers_t, rpcproc_t, xdrproc_t, char *, xdrproc_t, char *, resultproc_t);
CLIENT *clnt_create(const char *, const rpcprog_t, const rpcvers_t, const char *);
CLIENT *clnt_create_timed(const char *, const rpcprog_t, const rpcvers_t, const char *, const struct timeval *);
CLIENT *clnt_create_vers(const char *, const rpcprog_t, rpcvers_t *, const rpcvers_t, const rpcvers_t, const char *);
CLIENT *clnt_create_vers_timed(const char *, const rpcprog_t, rpcvers_t *, const rpcvers_t, const rpcvers_t, const char *, const struct timeval *);
CLIENT *clnt_dg_create(const int, struct netbuf *, const rpcprog_t, const rpcvers_t, const uint_t, const uint_t);
CLIENT *clnt_door_create(const rpcprog_t, const rpcvers_t, const uint_t);
void clnt_pcreateerror(const char *);
void clnt_perrno(const enum clnt_stat);
void clnt_perror(const CLIENT *, const char *);
CLIENT *clnt_raw_create(const rpcprog_t, const rpcvers_t);
char *clnt_spcreateerror(const char *);
const char *clnt_sperrno(const enum clnt_stat);
char *clnt_sperror(const CLIENT *, const char *);
CLIENT *clnt_tli_create(const int, const struct netconfig *, struct netbuf *, const rpcprog_t, const rpcvers_t, const uint_t, const uint_t);
CLIENT *clnt_tp_create(const char *, const rpcprog_t, const rpcvers_t, const struct netconfig *);
CLIENT *clnt_tp_create_timed(const char *, const rpcprog_t, const rpcvers_t, const struct netconfig *, const struct timeval *);
CLIENT *clnt_vc_create(const int, struct netbuf *, const rpcprog_t, const rpcvers_t, const uint_t, const uint_t);
CLIENT *clntraw_create(rpcprog_t, rpcvers_t);
CLIENT *clnttcp_create(struct sockaddr_in *, rpcprog_t, rpcvers_t, int *, uint_t, uint_t);
CLIENT *clntudp_bufcreate(struct sockaddr_in *, rpcprog_t, rpcvers_t, struct timeval, int *, uint_t, uint_t);
CLIENT *clntudp_create(struct sockaddr_in *, rpcprog_t, rpcvers_t, struct timeval, int *);
clock_t clock(void);
int clock_getres(clockid_t clock_id, struct timespec *res);
int clock_gettime(clockid_t clock_id, struct timespec *tp);
int clock_settime(clockid_t clock_id, const struct timespec *tp);
int close(int fildes);
int closedir(DIR *dirp);
void closelog(void);
void closepl();
void closevt();
int clpxfs_aio_read(vnode_t *vp, struct aio_req *aio, cred_t *cred_p);
int clpxfs_aio_write(vnode_t *vp, struct aio_req *aio, cred_t *cred_p);
int clrtobot(void);
int clrtoeol(void);
o_dev_t cmpdev(dev_t);
int color_content(__int16 color, __int16 *redp, __int16 *greenp, __int16 *bluep);
char *compile(char *instring, char *expbuf, const char *endbuf);
size_t compress(void *, void *, size_t);
int cond_broadcast(cond_t *cvp);
int cond_destroy(cond_t *cvp);
int cond_init(cond_t *cvp, int type, void *arg);
int cond_signal(cond_t *cvp);
int cond_timedwait(cond_t *cvp, mutex_t *mp, timestruc_t *abstime);
int cond_wait(cond_t *cvp, mutex_t *mp);
int config_ap_id_cmp(const cfga_ap_log_id_t ap_id1, const cfga_ap_log_id_t ap_id2);
cfga_err_t config_change_state(cfga_cmd_t state_change_cmd, int num_ap_ids, char *const *ap_ids, const char *options, struct cfga_confirm *confp, struct cfga_msg *msgp, char **errstring, cfga_flags_t flags);
cfga_err_t config_help(int num_ap_ids, char *const *ap_ids, struct cfga_msg *msgp, const char *options, cfga_flags_t flags);
cfga_err_t config_list(struct cfga_stat_data **ap_id_list, int *nlist, const char *options, char **errstring);
cfga_err_t config_list_ext(int num_ap_ids, char *const *ap_ids, struct cfga_list_data **ap_id_list, int *nlist, const char *options, const char *listops, char **errstring, cfga_flags_t flags);
cfga_err_t config_private_func(const char *function, int num_ap_ids, char *const *ap_ids, const char *options, struct cfga_confirm *confp, struct cfga_msg *msgp, char **errstring, cfga_flags_t flags);
cfga_err_t config_stat(int num_ap_ids, char *const *ap_ids, struct cfga_stat_data *buf, const char *options, char **errstring);
const char *config_strerror(cfga_err_t cfgerrnum);
cfga_err_t config_test(int num_ap_ids, char *const *ap_ids, const char *options, struct cfga_msg *msgp, char **errstring, cfga_flags_t flags);
void config_unload_libs();
size_t confstr(int name, char *buf, size_t len);
int connect(int socket, const struct sockaddr *address, socklen_t address_len);
void cont(__int16 x, __int16 y);
char *copylist(const char *filenm, off_t *szptr);
char *copylist64(const char *, off64_t *);
double copysign(double x, double y);
int copywin(WINDOW *srcwin, WINDOW *dstwin, int sminrow, int smincol, int dminrow, int dmincol, int dmaxrow, int dmaxcol, int overlay);
int core_get_global_path(char *buf, size_t bufsize);
int core_get_options(void);
int core_get_process_path(char *buf, size_t bufsize, pid_t);
int core_set_global_path(const char *buf, size_t bufsize);
int core_set_options(int options);
int core_set_process_path(const char *buf, size_t bufsize, pid_t);
double cos(double x);
double cosh(double x);
int cpc_access(void);
int cpc_bind_event(cpc_event_t *event, int flags);
int cpc_count_sys_events(int enable);
int cpc_count_usr_events(int enable);
void cpc_event_accum(cpc_event_t *accum, cpc_event_t *event);
void cpc_event_diff(cpc_event_t *diff, cpc_event_t *after, cpc_event_t *before);
char *cpc_eventtostr(cpc_event_t *event);
const char *cpc_getcciname(int cpuver);
const char *cpc_getcpuref(int cpuver);
int cpc_getcpuver(void);
uint_t cpc_getnpic(int cpuver);
const char *cpc_getusage(int cpuver);
int cpc_pctx_bind_event(pctx_t *pctx, id_t lwpid, cpc_event_t *event, int flags);
int cpc_pctx_invalidate(pctx_t *pctx, id_t lwpid);
int cpc_pctx_rele(pctx_t *pctx, id_t lwpid);
int cpc_pctx_take_sample(pctx_t *pctx, id_t lwpid, cpc_event_t *event);
int cpc_rele(void);
void cpc_seterrfn(cpc_errfn_t *errfn);
int cpc_shared_bind_event(int fd, cpc_event_t *event, int flags);
void cpc_shared_close(int fd);
int cpc_shared_open(void);
int cpc_shared_rele(int fd);
int cpc_shared_take_sample(int fd, cpc_event_t *event);
int cpc_strtoevent(int cpuver, const char *spec, cpc_event_t *event);
int cpc_take_sample(cpc_event_t *event);
uint_t cpc_version(uint_t version);
void cpc_walk_names(int cpuver, int regno, void *arg, void (*action)(void *arg, int regno, const char *name, uint8_t bits));
int cplus_demangle(const char *symbol, char *prototype, size_t size);
int cplus_demangle_noret(const char *symbol, char *prototype, size_t size);
struct cpu *cpu[];
cpu_t *cpu_list;
int creat(const char *path, mode_t mode);
int creat64(const char *, mode_t);
int crmode(void);
char *crypt(const char *key, const char *salt);
int crypt_close(int *);
int csetcol(int codeset);
int csetlen(int codeset);
int csetno(unsigned __int8 c);
char *ctermid(char *s);
char *ctermid_r(char *s);
char *ctime(const time_t *clock);
char *ctime_r(const time_t *clock, char *buf);
struct _bool_struct *cur_bools;
struct _num_struct *cur_nums;
struct _str_struct *cur_strs;
TERMINAL *cur_term;
FIELD *current_field(FORM *form);
ITEM *current_item(MENU *menu);
char *curs_err_strings[];
__int16 curs_errno;
char curs_parm_err[];
int curs_set(int visibility);
WINDOW *curscr;
void curserr(void);
char *cuserid(char *s);
void cyclic_init(cyc_backend_t *be, hrtime_t resolution);
void cyclic_mp_init();
int dacf_arg_insert(dacf_arg_t **, char *, char *);
void dacf_arglist_delete(dacf_arg_t **);
void dacf_clear_rules();
void dacf_clr_rsrvs(dev_info_t *, dacf_opid_t);
dev_info_t *dacf_devinfo_node(dacf_infohdl_t);
const char *dacf_devspec_to_str(dacf_devspec_t);
const char *dacf_driver_name(dacf_infohdl_t);
const char *dacf_get_arg(dacf_arghdl_t, char *);
dacf_devspec_t dacf_get_devspec(char *);
dacf_opid_t dacf_get_op(char *);
int dacf_getopt(char *, uint_t *);
void dacf_init();
kmutex_t dacf_lock;
dacf_rule_t *dacf_match(dacf_opid_t, dacf_devspec_t, void *);
const char *dacf_minor_name(dacf_infohdl_t);
minor_t dacf_minor_number(dacf_infohdl_t);
int dacf_module_register(char *, struct dacfsw *);
int dacf_module_unregister(char *);
int dacf_op_invoke(dacf_rule_t *, dacf_infohdl_t, int);
const char *dacf_opid_to_str(dacf_opid_t);
void dacf_process_rsrvs(dacf_rsrvlist_t **, dacf_opid_t, int);
void *dacf_retrieve_info(dacf_infohdl_t);
void dacf_rsrv_make(dacf_rsrvlist_t *, dacf_rule_t *, void *, dacf_rsrvlist_t **);
void dacf_rule_hold(dacf_rule_t *);
int dacf_rule_insert(dacf_devspec_t, char *, char *, char *, dacf_opid_t, uint_t, dacf_arg_t *);
void dacf_rule_rele(dacf_rule_t *);
void dacf_store_info(dacf_infohdl_t, void *);
void dacfc_match_create_minor(char *, char *, dev_info_t *, struct ddi_minor_data *, int);
int dacfc_postattach(dev_info_t *);
int dacfc_predetach(dev_info_t *);
int dacfdebug;
int data_ahead(FORM *form);
int data_behind(FORM *form);
int datamsg(unsigned __int8);
int daylight;
db_result *db_add_entry(char *, int, nis_attr *, entry_obj *);
db_status db_checkpoint(char *);
db_status db_create_table(char *, table_obj *);
db_status db_destroy_table(char *);
db_result *db_first_entry(char *, int, nis_attr *);
void db_free_result(db_result *);
bool_t db_initialize(char *);
db_result *db_list_entries(char *, int, nis_attr *);
db_result *db_next_entry(char *, db_next_desc *);
db_result *db_remove_entry(char *, int, nis_attr *);
db_result *db_reset_next_entry(char *, db_next_desc *);
db_status db_standby(char *);
db_status db_table_exists(char *);
db_status db_unload_table(char *);
int dbm_clearerr(DBM *db);
void dbm_close(DBM *db);
int dbm_delete(DBM *db, datum key);
int dbm_error(DBM *db);
datum dbm_fetch(DBM *db, datum key);
datum dbm_firstkey(DBM *db);
datum dbm_nextkey(DBM *db);
DBM *dbm_open(const char *file, int open_flags, mode_t file_mode);
int dbm_store(DBM *db, datum key, datum content, int store_mode);
int dbmclose();
int dbminit(file);
int dbrdonly;
char *dcgettext(const char *domainname, const char *msgid, int category);
struct dc_ops dcops;
int dcops_install(struct dc_ops *dcops, enum dcop_state state);
int dcstub_devconfig_lock(int);
int dcstub_devconfig_unlock();
int dcstub_free_instance(major_t, const char *, uint_t);
int dcstub_free_major(major_t, char *);
int dcstub_get_instance(major_t, const char *, uint_t *);
int dcstub_get_major(major_t *, char *);
int dcstub_instance_path(major_t, char *, uint_t);
int dcstub_major_name(major_t, char *);
int dcstub_map_minor(major_t, minor_t, minor_t *, dev_type_t);
int dcstub_resolve_minor(major_t, minor_t, minor_t *, dev_type_t *);
int dcstub_service_config(int, void *, int);
int dcstub_sync_instances();
int dcstub_unmap_minor(major_t, minor_t, minor_t, dev_type_t);
int ddi_prop_search_common(dev_t dev, dev_info_t *dip, ddi_prop_op_t prop_op, uint_t flags, char *name, void *valuep, uint_t *lengthp);
void decimal_to_double(double *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
void decimal_to_extended(extended *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
void decimal_to_quadruple(quadruple *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
void decimal_to_single(single *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
size_t decompress(void *, void *, size_t, size_t);
int def_prog_mode(void);
int def_shell_mode(void);
int defcntl(int, int);
int defopen(char *);
char *defread(char *);
int del_panel(PANEL *panel);
void delay(clock_t);
int delay_output(int ms);
int delch(void);
int deleteln(void);
void delscreen(SCREEN *sp);
int delterm(TERMINAL *oterm);
int delwin(WINDOW *win);
int demangle(const char *symbol, char *interpretation);
WINDOW *derwin(WINDOW *orig, int nlines, int ncols, int begin_y, int begin_x);
char *des_crypt(const char *, const char *);
void des_encrypt(char *, int);
void des_setkey(const char *);
void des_setparity(char *key);
char *devattr(char *, char *);
devctl_hdl_t devctl_ap_acquire(char *devfs_path, uint_t flags);
int devctl_ap_configure(devctl_hdl_t hdl);
int devctl_ap_connect(devctl_hdl_t hdl);
int devctl_ap_disconnect(devctl_hdl_t hdl);
int devctl_ap_getstate(devctl_hdl_t hdl, devctl_ap_state_t *statep);
int devctl_ap_insert(devctl_hdl_t hdl);
int devctl_ap_remove(devctl_hdl_t hdl);
int devctl_ap_unconfigure(devctl_hdl_t hdl);
devctl_hdl_t devctl_bus_acquire(char *devfs_path, uint_t flags);
int devctl_bus_configure(devctl_hdl_t hdl);
int devctl_bus_getstate(devctl_hdl_t hdl, uint_t *statep);
int devctl_bus_quiesce(devctl_hdl_t hdl);
int devctl_bus_reset(devctl_hdl_t hdl);
int devctl_bus_resetall(devctl_hdl_t hdl);
int devctl_bus_unconfigure(devctl_hdl_t hdl);
int devctl_bus_unquiesce(devctl_hdl_t hdl);
devctl_hdl_t devctl_device_acquire(char *devfs_path, uint_t flags);
int devctl_device_getstate(devctl_hdl_t hdl, uint_t *statep);
int devctl_device_offline(devctl_hdl_t hdl);
int devctl_device_online(devctl_hdl_t hdl);
int devctl_device_remove(devctl_hdl_t hdl);
int devctl_device_reset(devctl_hdl_t hdl);
void devctl_release(devctl_hdl_t hdl);
int devfree(int, char *);
int devid_compare(ddi_devid_t devid1, ddi_devid_t devid2);
int devid_deviceid_to_nmlist(char *search_path, ddi_devid_t devid, char *minor_name, devid_nmlist_t **retlist);
void devid_free(ddi_devid_t devid);
void devid_free_nmlist(devid_nmlist_t *list);
int devid_get(int fd, ddi_devid_t *retdevid);
int devid_get_minor_name(int fd, char **retminor_name);
size_t devid_sizeof(ddi_devid_t devid);
char **devreserv(int, char ***);
char *dgettext(const char *domainname, const char *msgid);
char *di_binding_name(di_node_t node);
char *di_bus_addr(di_node_t node);
di_node_t di_child_node(di_node_t node);
int di_compatible_names(di_node_t node, char **names);
char *di_devfs_path(di_node_t node);
void di_devfs_path_free(char *path_buf);
ddi_devid_t di_devid(di_node_t node);
char *di_driver_name(di_node_t node);
uint_t di_driver_ops(di_node_t node);
void *di_driver_private_data(di_node_t node);
di_node_t di_drv_first_node(const char *drv_name, di_node_t root);
di_node_t di_drv_next_node(di_node_t node);
void di_fini(di_node_t root);
di_node_t di_init(const char *phys_path, uint_t flags);
di_node_t di_init_driver(const char *drv_name, uint_t flag);
di_node_t di_init_impl(const char *phys_path, uint_t flag, struct di_priv_data *priv_data);
int di_instance(di_node_t node);
unsigned int di_minor_class(di_minor_t minor);
dev_t di_minor_devt(di_minor_t minor);
char *di_minor_name(di_minor_t minor);
di_minor_t di_minor_next(di_node_t node, di_minor_t minor);
char *di_minor_nodetype(di_minor_t minor);
int di_minor_spectype(di_minor_t minor);
ddi_minor_type di_minor_type(di_minor_t minor);
char *di_node_name(di_node_t node);
int di_nodeid(di_node_t node);
di_node_t di_parent_node(di_node_t node);
void *di_parent_private_data(di_node_t node);
void di_prom_fini(di_prom_handle_t ph);
di_prom_handle_t di_prom_init();
int di_prom_prop_data(di_prom_prop_t prom_prop, uchar_t **prop_data);
int di_prom_prop_lookup_bytes(di_prom_handle_t ph, di_node_t node, const char *prop_name, uchar_t **prop_data);
int di_prom_prop_lookup_ints(di_prom_handle_t ph, di_node_t node, const char *prop_name, int **prop_data);
int di_prom_prop_lookup_strings(di_prom_handle_t ph, di_node_t node, const char *prop_name, char **prop_data);
char *di_prom_prop_name(di_prom_prop_t prom_prop);
di_prom_prop_t di_prom_prop_next(di_prom_handle_t ph, di_node_t node, di_prom_prop_t prom_prop);
int di_prop_bytes(di_prop_t prop, uchar_t **prop_data);
dev_t di_prop_devt(di_prop_t prop);
di_prop_t di_prop_drv_next(di_node_t node, di_prop_t prop);
di_prop_t di_prop_global_next(di_node_t node, di_prop_t prop);
di_prop_t di_prop_hw_next(di_node_t node, di_prop_t prop);
int di_prop_ints(di_prop_t prop, int **prop_data);
int di_prop_lookup_bytes(dev_t dev, di_node_t node, const char *prop_name, uchar_t **prop_data);
int di_prop_lookup_ints(dev_t dev, di_node_t node, const char *prop_name, int **prop_data);
int di_prop_lookup_strings(dev_t dev, di_node_t node, const char *prop_name, char **prop_data);
char *di_prop_name(di_prop_t prop);
di_prop_t di_prop_next(di_node_t node, di_prop_t prop);
int di_prop_rawdata(di_prop_t prop, uchar_t **prop_data);
int di_prop_strings(di_prop_t prop, char **prop_data);
di_prop_t di_prop_sys_next(di_node_t node, di_prop_t prop);
int di_prop_type(di_prop_t prop);
di_node_t di_sibling_node(di_node_t node);
uint_t di_state(di_node_t node);
int di_walk_minor(di_node_t root, const char *minor_nodetype, uint_t flag, void *arg, int (*minor_callback)(di_node_t node, di_minor_t minor, void *arg));
int di_walk_node(di_node_t root, uint_t flag, void *arg, int (*node_callback)(di_node_t node, void *arg));
int dial(CALL call);
double difftime(time_t time1, time_t time0);
char dirbuf[4096];
int directio(int fildes, int advice);
int dirf;
char *dirname(char *path);
div_t div(int numer, int denom);
int dladdr(void *address, Dl_info *dlip);
int dlclose(void *handle);
int dldump(const char *ipath, const char *opath, int flags);
char *dlerror(void);
int dlinfo(void *handle, int request, void *p);
void *dlmopen(Lmid_t lmid, const char *pathname, int mode);
void *dlopen(const char *pathname, int mode);
void *dlsym(void *handle, const char *name);
int dn_comp(const char *exp_dn, uchar_t *comp_dn, int length, uchar_t **dnptrs, uchar_t **lastdnptr);
int dn_expand(const uchar_t *msg, const uchar_t *eomorig, uchar_t *comp_dn, char exp_dn, int length);
int do_relocate(struct module *, char *, Word, int, int, Addr);
int do_relocations(struct module *);
int doconfig(int fildes, char *script, int rflag);
int door_bind(int did);
int door_call(int d, door_arg_t *params);
int door_create(void (*server_procedure)(void *cookie, char *argp, size_t arg_size, door_desc_t *dp, uint_t n_desc), void *cookie, uint_t attributes);
int door_cred(door_cred_t *info);
int door_info(int d, struct door_info *info);
int door_return(char *data_ptr, size_t data_size, door_desc_t *desc_ptr, uint_t num_desc);
int door_revoke(int d);
door_server_func_t *door_server_create(door_server_func_t *);
int door_unbind();
void double_to_decimal(double *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
int doupdate(void);
int drainio(int);
double drand48(void);
int drv_getparm(uint_t, void *);
clock_t drv_hztousec(clock_t);
int drv_priv(struct cred *);
int drv_setparm(uint_t, ulong_t);
clock_t drv_usectohz(clock_t);
void drv_usecwait(clock_t);
int dup(int fildes);
int dup2(int fildes, int fildes2);
FIELD *dup_field(FIELD *field, int frow, int fcol);
WINDOW *dupwin(WINDOW *win);
int dynamic_field_info(FIELD *field, int *drows, int *dcols, int *max);
void ea_attach_to_group(ea_object_t *, ea_object_t *);
void ea_attach_to_object(ea_object_t *, ea_object_t *);
void ea_free_item(ea_object_t *, int);
void ea_free_object(ea_object_t *, int);
int ea_match_object_catalog(ea_object_t *, ea_catalog_t);
void ea_order16(uint16_t *);
void ea_order32(uint32_t *);
void ea_order64(uint64_t *);
size_t ea_pack_object(ea_object_t *, void *, size_t);
int ea_set_group(ea_object_t *, ea_catalog_t);
int ea_set_item(ea_object_t *, ea_catalog_t, void *, size_t);
int eaccess(const char *, int);
int ecb_crypt(char *key, char *buf, size_t len, unsigned int mode);
int echo(void);
char *econvert(double value, int ndigit, int *decpt, int *sign, char *buf);
char *ecvt(double value, int ndigit, int *decpt, int *sign);
unsigned __int8 elcuctab[256];
int elf32_checksum(Elf *elf);
size_t elf32_fsize(Elf_Type type, size_t count, unsigned int ver);
Elf32_Ehdr *elf32_getehdr(Elf *elf);
Elf32_Phdr *elf32_getphdr(Elf *elf);
Elf32_Shdr *elf32_getshdr(Elf_Scn *scn);
Elf32_Ehdr *elf32_newehdr(Elf *elf);
Elf32_Phdr *elf32_newphdr(Elf *elf, size_t count);
Elf_Data *elf32_xlatetof(Elf_Data *dst, const Elf_Data *src, unsigned int encode);
Elf_Data *elf32_xlatetom(Elf_Data *dst, const Elf_Data *src, unsigned int encode);
int elf64_checksum(Elf *elf);
size_t elf64_fsize(Elf_Type type, size_t count, unsigned int ver);
Elf64_Ehdr *elf64_getehdr(Elf *elf);
Elf64_Phdr *elf64_getphdr(Elf *elf);
Elf64_Shdr *elf64_getshdr(Elf_Scn *scn);
Elf64_Ehdr *elf64_newehdr(Elf *elf);
Elf64_Phdr *elf64_newphdr(Elf *elf, size_t count);
Elf_Data *elf64_xlatetof(Elf_Data *dst, const Elf_Data *src, unsigned int encode);
Elf_Data *elf64_xlatetom(Elf_Data *dst, const Elf_Data *src, unsigned int encode);
Elf *elf_begin(int fildes, Elf_Cmd cmd, Elf *ref);
int elf_cntl(Elf *elf, Elf_Cmd cmd);
int elf_end(Elf *elf);
const char *elf_errmsg(int err);
int elf_errno(void);
void elf_fill(int fill);
unsigned int elf_flagdata(Elf_Data *data, Elf_Cmd cmd, unsigned int flags);
unsigned int elf_flagehdr(Elf *elf, Elf_Cmd cmd, unsigned int flags);
unsigned int elf_flagelf(Elf *elf, Elf_Cmd cmd, unsigned int flags);
unsigned int elf_flagphdr(Elf *elf, Elf_Cmd cmd, unsigned int flags);
unsigned int elf_flagscn(Elf_Scn *scn, Elf_Cmd cmd, unsigned int flags);
unsigned int elf_flagshdr(Elf_Scn *scn, Elf_Cmd cmd, unsigned int flags);
Elf_Arhdr *elf_getarhdr(Elf *elf);
Elf_Arsym *elf_getarsym(Elf *elf, size_t *ptr);
off_t elf_getbase(Elf *elf);
Elf_Data *elf_getdata(Elf_Scn *scn, Elf_Data *data);
char *elf_getident(Elf *elf, size_t *ptr);
Elf_Scn *elf_getscn(Elf *elf, size_t index);
unsigned int elf_hash(const char *name);
Elf_Kind elf_kind(Elf *elf);
Elf *elf_memory(char *image, size_t sz);
size_t elf_ndxscn(Elf_Scn *scn);
Elf_Data *elf_newdata(Elf_Scn *scn);
Elf_Scn *elf_newscn(Elf *elf);
Elf_Cmd elf_next(Elf *elf);
Elf_Scn *elf_nextscn(Elf *elf, Elf_Scn *scn);
size_t elf_rand(Elf *elf, size_t offset);
Elf_Data *elf_rawdata(Elf_Scn *scn, Elf_Data *data);
char *elf_rawfile(Elf *elf, size_t *ptr);
char *elf_strptr(Elf *elf, size_t section, size_t offset);
off_t elf_update(Elf *elf, Elf_Cmd cmd);
unsigned int elf_version(unsigned int ver);
void encrypt(char block[64], int edflag);
void endac(void);
void endauclass(void);
void endauevent(void);
void endauthattr(void);
void endauuser(void);
void enddaent();
void enddmapent();
void endexecattr(void);
void endgrent(void);
void endhostent(void);
int endnetconfig(void *handlep);
void endnetent(void);
int endnetgrent(void);
int endnetpath(void *handlep);
void endprofattr(void);
void endprotoent(void);
void endpwent(void);
void endrpcent(void);
void endservent(void);
void endspent(void);
void enduserattr(void);
void endutent(void);
void endutxent(void);
int endwin(void);
unsigned __int8 enotrantab[256];
double erand48(unsigned __int16 xi[3]);
void erase();
char erasechar(void);
double erf(double x);
double erfc(double x);
int errno;
char *errstr;
struct ether_addr *ether_aton(char *s);
int ether_hostton(char *hostname, struct ether_addr *e);
int ether_line(char *l, struct ether_addr *e, char *hostname);
char *ether_ntoa(struct ether_addr *e);
int ether_ntohost(char *hostname, struct ether_addr *e);
int etoimajor(major_t);
int euccol(const unsigned __int8 *s);
int euclen(const unsigned __int8 *s);
int eucscol(const unsigned __int8 *str);
void *exacct_alloc(size_t);
void exacct_free(void *, size_t);
char *exacct_strdup(char *);
int execl(const char *path, const char *arg0, ...);
int execle(const char *path, const char *arg0, ...);
int execlp(const char *file, const char *arg0, ...);
int execv(const char *path, char *const argv[]);
int execve(const char *path, char *const argv[], char *const envp[]);
int execvp(const char *file, char *const argv[]);
void exit(int status);
void exitto(caddr_t);
double exp(double x);
dev_t expdev(dev_t);
double expm1(double x);
void extended_to_decimal(extended *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
double fabs(double x);
int facl(int fildes, int cmd, int nentries, aclent_t *aclbufp);
int fattach(int fildes, const char *path);
int fbdwrite(struct fbuf *);
int fbiwrite(struct fbuf *, struct vnode *, daddr_t bn, int bsize);
int fbread(struct vnode *, offset_t, uint_t, enum seg_rw, struct fbuf **);
void fbrelse(struct fbuf *, enum seg_rw);
int fbwrite(struct fbuf *);
void fbzero(struct vnode *, offset_t, uint_t, struct fbuf **);
int fchdir(int fildes);
int fchmod(int fildes, mode_t mode);
int fchown(int fildes, uid_t owner, gid_t group);
int fchroot(int fildes);
int fclose(FILE *stream);
int fcntl(int fildes, int cmd, ...);
char *fconvert(double value, int ndigit, int *decpt, int *sign, char *buf);
char *fcvt(double value, int ndigit, int *decpt, int *sign);
int fdatasync(int fildes);
void fdb_add_hole(fdbuffer_t *fdbuf, u_offset_t off, size_t len);
fdbuffer_t *fdb_addr_create(caddr_t addr, size_t len, int flag, page_t **pplist, struct proc *procp);
void fdb_free(fdbuffer_t *fdbuf);
int fdb_get_error(fdbuffer_t *fdbuf);
fdb_holes_t *fdb_get_holes(fdbuffer_t *fdbuf);
void fdb_init(void);
void fdb_iodone(buf_t *bufp);
void fdb_ioerrdone(fdbuffer_t *fdbuf, int error);
buf_t *fdb_iosetup(fdbuffer_t *fdbuf, u_offset_t off, size_t len, struct vnode *vn, int flags);
fdbuffer_t *fdb_page_create(page_t *pp, size_t len, int flag);
void fdb_set_iofunc(fdbuffer_t *fdbuf, fdb_iodone_t iofunc, void *ioarg, int flags);
int fdetach(const char *path);
FILE *fdopen(int fildes, const char *mode);
int feof(FILE *stream);
int ferror(FILE *stream);
datum fetch();
int fflush(FILE *stream);
int ffs(const int i);
int fgetc(FILE *stream);
struct group *fgetgrent(FILE *f);
struct group *fgetgrent_r(FILE *f, struct group *grp, char *buffer, int bufsize);
int fgetpos(FILE *stream, fpos_t *pos);
int fgetpos64(FILE *, fpos64_t *);
struct passwd *fgetpwent(FILE *f);
struct passwd *fgetpwent_r(FILE *f, struct passwd *pwd, char *buffer, int buflen);
char *fgets(char *s, int n, FILE *stream);
struct spwd *fgetspent(FILE *fp);
struct spwd *fgetspent_r(FILE *fp, struct spwd *result, char *buffer, int buflen);
wint_t fgetwc(__FILE *);
wchar_t *fgetws(wchar_t *, int, __FILE *);
char *field_arg(FIELD *field);
chtype field_back(FIELD *);
char *field_buffer(FIELD *field, int buf);
int field_count(FORM *form);
chtype field_fore(FIELD *);
int field_index(FIELD *field);
int field_info(FIELD *field, int *rows, int *cols, int *frow, int *fcol, int *nrow, int *nbuf);
void (*field_init)(FORM *form);
int field_just(FIELD *field);
OPTIONS field_opts(FIELD *field);
int field_opts_off(FIELD *field, OPTIONS opts);
int field_opts_on(FIELD *field, OPTIONS opts);
int field_pad(FIELD *field);
int field_status(FIELD *field);
void (*field_term)(FORM *form);
FIELDTYPE *field_type(FIELD *field);
char *field_userptr(FIELD *field);
void file_to_decimal(char **pc, int nmax, int fortran_conventions, decimal_record *pd, enum decimal_string_form *pform, char **pechar, FILE *pf, int *pnread);
int filegrp_allocattr(filegrp_t *fgp);
int filegrp_cache_create(void *, void *, int);
void filegrp_cache_destroy(void *, void *);
int filegrp_cid_to_slot(filegrp_t *fgp, cfs_cid_t *cidp);
filegrp_t *filegrp_create(struct fscache *fscp, cfs_cid_t *cidp);
int filegrp_create_metadata(filegrp_t *fgp, struct cachefs_metadata *md, cfs_cid_t *cidp);
void filegrp_destroy(filegrp_t *fgp);
int filegrp_destroy_metadata(filegrp_t *fgp, cfs_cid_t *cidp);
int filegrp_ffhold(filegrp_t *fgp);
void filegrp_ffrele(filegrp_t *fgp);
void filegrp_hold(filegrp_t *fgp);
void filegrp_list_add(struct fscache *fscp, filegrp_t *fgp);
void filegrp_list_enable_caching_ro(struct fscache *fscp);
void filegrp_list_enable_caching_rw(struct fscache *fscp);
filegrp_t *filegrp_list_find(struct fscache *fscp, cfs_cid_t *cidp);
void filegrp_list_gc(struct fscache *fscp);
void filegrp_list_remove(struct fscache *fscp, filegrp_t *fgp);
int filegrp_read_metadata(filegrp_t *fgp, cfs_cid_t *cidp, struct cachefs_metadata *mdp);
void filegrp_rele(filegrp_t *fgp);
int filegrp_sync(filegrp_t *fgp);
int filegrp_write_metadata(filegrp_t *fgp, cfs_cid_t *cidp, struct cachefs_metadata *mdp);
int filegrpdir_create(filegrp_t *fgp);
int filegrpdir_find(filegrp_t *fgp);
int fileno(FILE *stream);
int filter(void);
int finite(double dsrc);
datum firsthash();
datum firstkey();
int flash(void);
void flk_cancel_sleeping_lock(lock_descriptor_t *, int);
struct kmem_cache *flk_edge_cache;
int flk_execute_request(lock_descriptor_t *);
graph_t *flk_get_lock_graph(vnode_t *, int);
void flk_set_state(lock_descriptor_t *, int);
void flockfile(FILE *stream);
double floor(double x);
int flushinp(void);
double fmod(double x, double y);
int fmtmsg(int classification, const char *label, int severity, const char *text, const char *action, const char *tag);
int fn_attr_bind(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_ref_t *ref, const FN_attrset_t *attrs, unsigned int exclusive, FN_status_t *status);
FN_ref_t *fn_attr_create_subcontext(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_attrset_t *attrs, FN_status_t *status);
FN_ext_searchlist_t *fn_attr_ext_search(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_search_control_t *control, const FN_search_filter_t *filter, FN_status_t *status);
FN_attribute_t *fn_attr_get(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_identifier_t *attribute_id, unsigned int follow_link, FN_status_t *status);
FN_attrset_t *fn_attr_get_ids(FN_ctx_t *ctx, const FN_composite_name_t *name, unsigned int follow_link, FN_status_t *status);
FN_valuelist_t *fn_attr_get_values(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_identifier_t *attribute_id, unsigned int follow_link, FN_status_t *status);
int fn_attr_modify(FN_ctx_t *ctx, const FN_composite_name_t *name, unsigned int mod_op, const FN_attribute_t *attr, unsigned int follow_link, FN_status_t *status);
FN_multigetlist_t *fn_attr_multi_get(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_attrset_t *attr_ids, unsigned int follow_link, FN_status_t *status);
int fn_attr_multi_modify(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_attrmodlist_t *mods, unsigned int follow_link, FN_attrmodlist_t **unexecuted_mods, FN_status_t *status);
FN_searchlist_t *fn_attr_search(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_attrset_t *match_attrs, unsigned int return_ref, const FN_attrset_t *return_attr_ids, FN_status_t *status);
int fn_attribute_add(FN_attribute_t *attr, const FN_attrvalue_t *attribute_value, unsigned int exclusive);
FN_attribute_t *fn_attribute_assign(FN_attribute_t *dst, const FN_attribute_t *src);
FN_attribute_t *fn_attribute_copy(const FN_attribute_t *attr);
FN_attribute_t *fn_attribute_create(const FN_identifier_t *attr_id, const FN_identifier_t *attr_syntax);
void fn_attribute_destroy(FN_attribute_t *attr);
const FN_attrvalue_t *fn_attribute_first(const FN_attribute_t *attr, void **iter_pos);
const FN_identifier_t *fn_attribute_identifier(const FN_attribute_t *attr);
const FN_attrvalue_t *fn_attribute_next(const FN_attribute_t *attr, void **iter_pos);
int fn_attribute_remove(FN_attribute_t *, const FN_attrvalue_t *);
const FN_identifier_t *fn_attribute_syntax(const FN_attribute_t *attr);
unsigned int fn_attribute_valuecount(const FN_attribute_t *attr);
int fn_attrmodlist_add(FN_attrmodlist_t *modlist, unsigned int mod_op, const FN_attribute_t *attr);
FN_attrmodlist_t *fn_attrmodlist_assign(FN_attrmodlist_t *dst, const FN_attrmodlist_t *src);
FN_attrmodlist_t *fn_attrmodlist_copy(const FN_attrmodlist_t *modlist);
unsigned int fn_attrmodlist_count(const FN_attrmodlist_t *modlist);
FN_attrmodlist_t *fn_attrmodlist_create(void);
void fn_attrmodlist_destroy(FN_attrmodlist_t *modlist);
const FN_attribute_t *fn_attrmodlist_first(const FN_attrmodlist_t *modlist, void **iter_pos, unsigned int *first_mod_op);
const FN_attribute_t *fn_attrmodlist_next(const FN_attrmodlist_t *modlist, void **iter_pos, unsigned int *mod_op);
int fn_attrset_add(FN_attrset_t *aset, const FN_attribute_t *attr, unsigned int exclusive);
FN_attrset_t *fn_attrset_assign(FN_attrset_t *dst, const FN_attrset_t *src);
FN_attrset_t *fn_attrset_copy(const FN_attrset_t *aset);
unsigned int fn_attrset_count(const FN_attrset_t *aset);
FN_attrset_t *fn_attrset_create(void);
void fn_attrset_destroy(FN_attrset_t *aset);
const FN_attribute_t *fn_attrset_first(const FN_attrset_t *aset, void **iter_pos);
const FN_attribute_t *fn_attrset_get(const FN_attrset_t *aset, const FN_identifier_t *attr_id);
const FN_attribute_t *fn_attrset_next(const FN_attrset_t *aset, void **iter_pos);
int fn_attrset_remove(FN_attrset_t *aset, const FN_identifier_t *attr_id);
void fn_bindinglist_destroy(FN_bindinglist_t *bl, FN_status_t *status);
FN_string_t *fn_bindinglist_next(FN_bindinglist_t *bl, FN_ref_t **ref, FN_status_t *status);
int fn_bindingset_add(FN_bindingset_t *, const FN_string_t *name, const FN_ref_t *, unsigned int exclusive);
FN_bindingset_t *fn_bindingset_assign(FN_bindingset_t *dst, const FN_bindingset_t *src);
FN_bindingset_t *fn_bindingset_copy(const FN_bindingset_t *);
unsigned int fn_bindingset_count(const FN_bindingset_t *);
FN_bindingset_t *fn_bindingset_create(void);
void fn_bindingset_destroy(FN_bindingset_t *);
const FN_string_t *fn_bindingset_first(const FN_bindingset_t *, void **iter_pos, const FN_ref_t **first_ref);
const FN_ref_t *fn_bindingset_get_ref(const FN_bindingset_t *, const FN_string_t *name);
const FN_string_t *fn_bindingset_next(const FN_bindingset_t *, void **iter_pos, const FN_ref_t **next_ref);
int fn_bindingset_remove(FN_bindingset_t *, const FN_string_t *name);
int fn_composite_name_append_comp(FN_composite_name_t *name, const FN_string_t *newcomp);
int fn_composite_name_append_name(FN_composite_name_t *, const FN_composite_name_t *);
FN_composite_name_t *fn_composite_name_assign(FN_composite_name_t *dst, const FN_composite_name_t *src);
FN_composite_name_t *fn_composite_name_copy(const FN_composite_name_t *name);
unsigned int fn_composite_name_count(const FN_composite_name_t *name);
FN_composite_name_t *fn_composite_name_create(void);
int fn_composite_name_delete_comp(FN_composite_name_t *name, void **iter_pos);
void fn_composite_name_destroy(FN_composite_name_t *name);
const FN_string_t *fn_composite_name_first(const FN_composite_name_t *name, void **iter_pos);
FN_composite_name_t *fn_composite_name_from_str(const unsigned __int8 *cstr);
FN_composite_name_t *fn_composite_name_from_string(const FN_string_t *str);
int fn_composite_name_insert_comp(FN_composite_name_t *name, void **iter_pos, const FN_string_t *newcomp);
int fn_composite_name_insert_name(FN_composite_name_t *, void **iter_pos, const FN_composite_name_t *);
int fn_composite_name_is_empty(const FN_composite_name_t *name);
int fn_composite_name_is_equal(const FN_composite_name_t *name, const FN_composite_name_t *name2, unsigned int *status);
int fn_composite_name_is_prefix(const FN_composite_name_t *name, const FN_composite_name_t *prefix, void **iter_pos, unsigned int *status);
int fn_composite_name_is_suffix(const FN_composite_name_t *name, const FN_composite_name_t *suffix, void **iter_pos, unsigned int *status);
const FN_string_t *fn_composite_name_last(const FN_composite_name_t *name, void **iter_pos);
const FN_string_t *fn_composite_name_next(const FN_composite_name_t *name, void **iter_pos);
FN_composite_name_t *fn_composite_name_prefix(const FN_composite_name_t *name, const void *iter_pos);
int fn_composite_name_prepend_comp(FN_composite_name_t *name, const FN_string_t *newcomp);
int fn_composite_name_prepend_name(FN_composite_name_t *, const FN_composite_name_t *);
const FN_string_t *fn_composite_name_prev(const FN_composite_name_t *name, void **iter_pos);
FN_composite_name_t *fn_composite_name_suffix(const FN_composite_name_t *name, const void *iter_pos);
int fn_compound_name_append_comp(FN_compound_name_t *name, const FN_string_t *atomic_comp, unsigned int *status);
FN_compound_name_t *fn_compound_name_assign(FN_compound_name_t *dst, const FN_compound_name_t *src);
FN_compound_name_t *fn_compound_name_copy(const FN_compound_name_t *name);
unsigned int fn_compound_name_count(const FN_compound_name_t *name);
int fn_compound_name_delete_all(FN_compound_name_t *name);
int fn_compound_name_delete_comp(FN_compound_name_t *name, void **iter_pos);
void fn_compound_name_destroy(FN_compound_name_t *name);
const FN_string_t *fn_compound_name_first(const FN_compound_name_t *name, void **iter_pos);
FN_compound_name_t *fn_compound_name_from_syntax_attrs(const FN_attrset_t *aset, const FN_string_t *name, FN_status_t *status);
FN_attrset_t *fn_compound_name_get_syntax_attrs(const FN_compound_name_t *name);
int fn_compound_name_insert_comp(FN_compound_name_t *name, void **iter_pos, const FN_string_t *atomic_comp, unsigned int *status);
int fn_compound_name_is_empty(const FN_compound_name_t *name);
int fn_compound_name_is_equal(const FN_compound_name_t *name1, const FN_compound_name_t *name2, unsigned int *status);
int fn_compound_name_is_prefix(const FN_compound_name_t *name, const FN_compound_name_t *pre, void **iter_pos, unsigned int *status);
int fn_compound_name_is_suffix(const FN_compound_name_t *name, const FN_compound_name_t *suffix, void **iter_pos, unsigned int *status);
const FN_string_t *fn_compound_name_last(const FN_compound_name_t *name, void **iter_pos);
const FN_string_t *fn_compound_name_next(const FN_compound_name_t *name, void **iter_pos);
FN_compound_name_t *fn_compound_name_prefix(const FN_compound_name_t *name, const void *iter_pos);
int fn_compound_name_prepend_comp(FN_compound_name_t *name, const FN_string_t *atomic_comp, unsigned int *status);
const FN_string_t *fn_compound_name_prev(const FN_compound_name_t *name, void **iter_pos);
FN_compound_name_t *fn_compound_name_suffix(const FN_compound_name_t *name, const void *iter_pos);
FN_ctx_svc_t *fn_ctx_asvc_handle_create(unsigned int separation_type, unsigned int boundary_type, FN_ctx_svc_func_array_t *a_funcs, FN_ctx_svc_func_array_t *a_nns_funcs, FN_ctx_psvc_parser_func_t *p_parser, FN_ctx_csvc_parser_func_t *c_parser, FN_ctx_svc_data_t *dt, FN_status_t *status);
int fn_ctx_bind(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_ref_t *ref, unsigned int exclusive, FN_status_t *status);
FN_ref_t *fn_ctx_create_subcontext(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
FN_ctx_svc_t *fn_ctx_csvc_handle_create(unsigned int component_type, unsigned int boundary_type, FN_ctx_svc_func_array_t *c_or_cn_funcs, FN_ctx_svc_func_array_t *c_or_cn_nns_funcs, FN_ctx_psvc_parser_func_t *p_parser, FN_ctx_svc_data_t *dt, FN_status_t *status);
int fn_ctx_destroy_subcontext(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
FN_composite_name_t *fn_ctx_equivalent_name(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_string_t *leading_name, FN_status_t *status);
FN_ref_t *fn_ctx_get_ref(const FN_ctx_t *ctx, FN_status_t *status);
FN_attrset_t *fn_ctx_get_syntax_attrs(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
void fn_ctx_handle_destroy(FN_ctx_t *ctx);
FN_ctx_t *fn_ctx_handle_from_fn_ctx_svc(const FN_ctx_svc_t *sp);
FN_ctx_t *fn_ctx_handle_from_initial(unsigned int authoritative, FN_status_t *status);
FN_ctx_t *fn_ctx_handle_from_ref(const FN_ref_t *ref, unsigned int authoritative, FN_status_t *status);
FN_bindinglist_t *fn_ctx_list_bindings(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
FN_namelist_t *fn_ctx_list_names(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
FN_ref_t *fn_ctx_lookup(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
FN_ref_t *fn_ctx_lookup_link(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
FN_ctx_svc_t *fn_ctx_psvc_handle_create(FN_ctx_svc_func_array_t *p_funcs, FN_ctx_svc_data_t *dt, FN_status_t *status);
int fn_ctx_rename(FN_ctx_t *ctx, const FN_composite_name_t *oldname, const FN_composite_name_t *newname, unsigned int exclusive, FN_status_t *status);
FN_ctx_svc_data_t *fn_ctx_svc_get_ctx_data(FN_ctx_svc_t *sp);
int fn_ctx_svc_set_ctx_data(FN_ctx_svc_t *sp, FN_ctx_svc_data_t *data);
int fn_ctx_unbind(FN_ctx_t *ctx, const FN_composite_name_t *name, FN_status_t *status);
void fn_ext_searchlist_destroy(FN_ext_searchlist_t *esl);
FN_composite_name_t *fn_ext_searchlist_next(FN_ext_searchlist_t *esl, FN_ref_t **returned_ref, FN_attrset_t **returned_attrs, FN_status_t *status);
void fn_multigetlist_destroy(FN_multigetlist_t *ml, FN_status_t *status);
FN_attribute_t *fn_multigetlist_next(FN_multigetlist_t *ml, FN_status_t *status);
void fn_namelist_destroy(FN_namelist_t *nl, FN_status_t *status);
FN_string_t *fn_namelist_next(FN_namelist_t *nl, FN_status_t *status);
int fn_nameset_add(FN_nameset_t *, const FN_string_t *name, unsigned int exclusive);
FN_nameset_t *fn_nameset_assign(FN_nameset_t *dst, const FN_nameset_t *src);
FN_nameset_t *fn_nameset_copy(const FN_nameset_t *);
unsigned int fn_nameset_count(const FN_nameset_t *);
FN_nameset_t *fn_nameset_create(void);
void fn_nameset_destroy(FN_nameset_t *);
const FN_string_t *fn_nameset_first(const FN_nameset_t *, void **iter_pos);
const FN_string_t *fn_nameset_next(const FN_nameset_t *, void **iter_pos);
int fn_nameset_remove(FN_nameset_t *, const FN_string_t *name);
FN_ref_addr_t *fn_ref_addr_assign(FN_ref_addr_t *dst, const FN_ref_addr_t *src);
FN_ref_addr_t *fn_ref_addr_copy(const FN_ref_addr_t *addr);
FN_ref_addr_t *fn_ref_addr_create(const FN_identifier_t *type, size_t length, const void *data);
const void *fn_ref_addr_data(const FN_ref_addr_t *addr);
FN_string_t *fn_ref_addr_description(const FN_ref_addr_t *addr, unsigned int detail, unsigned int *more_detail);
void fn_ref_addr_destroy(FN_ref_addr_t *addr);
size_t fn_ref_addr_length(const FN_ref_addr_t *addr);
const FN_identifier_t *fn_ref_addr_type(const FN_ref_addr_t *addr);
unsigned int fn_ref_addrcount(const FN_ref_t *ref);
int fn_ref_append_addr(FN_ref_t *ref, const FN_ref_addr_t *addr);
FN_ref_t *fn_ref_assign(FN_ref_t *dst, const FN_ref_t *src);
FN_ref_t *fn_ref_copy(const FN_ref_t *ref);
FN_ref_t *fn_ref_create(const FN_identifier_t *ref_type);
FN_ref_t *fn_ref_create_link(const FN_composite_name_t *link_name);
int fn_ref_delete_addr(FN_ref_t *ref, void **iter_pos);
int fn_ref_delete_all(FN_ref_t *ref);
FN_string_t *fn_ref_description(const FN_ref_t *ref, unsigned int detail, unsigned int *more_detail);
void fn_ref_destroy(FN_ref_t *ref);
const FN_ref_addr_t *fn_ref_first(const FN_ref_t *ref, void **iter_pos);
int fn_ref_insert_addr(FN_ref_t *ref, void **iter_pos, const FN_ref_addr_t *addr);
int fn_ref_is_link(const FN_ref_t *ref);
FN_composite_name_t *fn_ref_link_name(const FN_ref_t *link_ref);
const FN_ref_addr_t *fn_ref_next(const FN_ref_t *ref, void **iter_pos);
int fn_ref_prepend_addr(FN_ref_t *ref, const FN_ref_addr_t *addr);
const FN_identifier_t *fn_ref_type(const FN_ref_t *ref);
FN_search_control_t *fn_search_control_assign(FN_search_control_t *dst, const FN_search_control_t *src);
FN_search_control_t *fn_search_control_copy(const FN_search_control_t *scontrol);
FN_search_control_t *fn_search_control_create(unsigned int scope, unsigned int follow_links, unsigned int max_names, unsigned int return_ref, const FN_attrset_t *return_attr_ids, unsigned int *status);
void fn_search_control_destroy(FN_search_control_t *scontrol);
unsigned int fn_search_control_follow_links(const FN_search_control_t *scontrol);
unsigned int fn_search_control_max_names(const FN_search_control_t *scontrol);
const FN_attrset_t *fn_search_control_return_attr_ids(const FN_search_control_t *scontrol);
unsigned int fn_search_control_return_ref(const FN_search_control_t *scontrol);
unsigned int fn_search_control_scope(const FN_search_control_t *scontrol);
const void **fn_search_filter_arguments(const FN_search_filter_t *sfilter, size_t *number_of_arguments);
FN_search_filter_t *fn_search_filter_assign(FN_search_filter_t *dst, const FN_search_filter_t *src);
FN_search_filter_t *fn_search_filter_copy(const FN_search_filter_t *sfilter);
FN_search_filter_t *fn_search_filter_create(unsigned int *status, const unsigned __int8 *estr, ...);
void fn_search_filter_destroy(FN_search_filter_t *sfilter);
const char *fn_search_filter_expression(const FN_search_filter_t *sfilter);
void fn_searchlist_destroy(FN_searchlist_t *sl);
FN_string_t *fn_searchlist_next(FN_searchlist_t *sl, FN_ref_t **returned_ref, FN_attrset_t **returned_attrs, FN_status_t *status);
int fn_status_advance_by_name(FN_status_t *stat, const FN_composite_name_t *prefix, const FN_ref_t *resolved_ref);
int fn_status_append_remaining_name(FN_status_t *stat, const FN_composite_name_t *name);
int fn_status_append_resolved_name(FN_status_t *stat, const FN_composite_name_t *name);
FN_status_t *fn_status_assign(FN_status_t *dst, const FN_status_t *src);
unsigned int fn_status_code(const FN_status_t *stat);
FN_status_t *fn_status_copy(const FN_status_t *stat);
FN_status_t *fn_status_create(void);
FN_string_t *fn_status_description(const FN_status_t *stat, unsigned int detail, unsigned int *more_detail);
void fn_status_destroy(FN_status_t *stat);
const FN_string_t *fn_status_diagnostic_message(const FN_status_t *stat);
int fn_status_is_success(const FN_status_t *stat);
unsigned int fn_status_link_code(const FN_status_t *stat);
const FN_string_t *fn_status_link_diagnostic_message(const FN_status_t *stat);
const FN_composite_name_t *fn_status_link_remaining_name(const FN_status_t *stat);
const FN_composite_name_t *fn_status_link_resolved_name(const FN_status_t *stat);
const FN_ref_t *fn_status_link_resolved_ref(const FN_status_t *stat);
const FN_composite_name_t *fn_status_remaining_name(const FN_status_t *stat);
const FN_composite_name_t *fn_status_resolved_name(const FN_status_t *stat);
const FN_ref_t *fn_status_resolved_ref(const FN_status_t *stat);
int fn_status_set(FN_status_t *, unsigned int code, const FN_ref_t *resolved_ref, const FN_composite_name_t *resolved_name, const FN_composite_name_t *remaining_name);
int fn_status_set_code(FN_status_t *stat, unsigned int code);
int fn_status_set_diagnostic_message(FN_status_t *stat, const FN_string_t *msg);
int fn_status_set_link_code(FN_status_t *stat, unsigned int code);
int fn_status_set_link_diagnostic_message(FN_status_t *stat, const FN_string_t *msg);
int fn_status_set_link_remaining_name(FN_status_t *stat, const FN_composite_name_t *name);
int fn_status_set_link_resolved_name(FN_status_t *stat, const FN_composite_name_t *name);
int fn_status_set_link_resolved_ref(FN_status_t *stat, const FN_ref_t *ref);
int fn_status_set_remaining_name(FN_status_t *stat, const FN_composite_name_t *name);
int fn_status_set_resolved_name(FN_status_t *stat, const FN_composite_name_t *name);
int fn_status_set_resolved_ref(FN_status_t *stat, const FN_ref_t *ref);
int fn_status_set_success(FN_status_t *stat);
FN_string_t *fn_string_assign(FN_string_t *dst, const FN_string_t *src);
size_t fn_string_bytecount(const FN_string_t *str);
size_t fn_string_charcount(const FN_string_t *str);
unsigned int fn_string_code_set(const FN_string_t *str, const void **locale_info, size_t *locale_info_len);
int fn_string_compare(const FN_string_t *str1, const FN_string_t *str2, unsigned int string_case, unsigned int *status);
int fn_string_compare_substring(const FN_string_t *str1, int first, int last, const FN_string_t *str2, unsigned int string_case, unsigned int *status);
const void *fn_string_contents(const FN_string_t *str);
FN_string_t *fn_string_copy(const FN_string_t *str);
FN_string_t *fn_string_create(void);
void fn_string_destroy(FN_string_t *str);
FN_string_t *fn_string_from_composite_name(const FN_composite_name_t *name, unsigned int *status);
FN_string_t *fn_string_from_compound_name(const FN_compound_name_t *name);
FN_string_t *fn_string_from_contents(unsigned int code_set, const void *locale_info, size_t locale_info_len, size_t charcount, size_t bytecount, const void *contents, unsigned int *status);
FN_string_t *fn_string_from_str(const unsigned __int8 *cstr);
FN_string_t *fn_string_from_str_n(const unsigned __int8 *cstr, size_t n);
FN_string_t *fn_string_from_strings(unsigned int *status, const FN_string_t *s1, const FN_string_t *s2, ...);
FN_string_t *fn_string_from_substring(const FN_string_t *str, int first, int last);
int fn_string_is_empty(const FN_string_t *str);
unsigned int fn_string_lang_terr(const FN_string_t *str);
int fn_string_next_substring(const FN_string_t *str, const FN_string_t *sub, int index, unsigned int string_case, unsigned int *status);
int fn_string_prev_substring(const FN_string_t *str, const FN_string_t *sub, int index, unsigned int string_case, unsigned int *status);
const unsigned __int8 *fn_string_str(const FN_string_t *str, unsigned int *status);
void fn_valuelist_destroy(FN_valuelist_t *vl, FN_status_t *status);
FN_attrvalue_t *fn_valuelist_next(FN_valuelist_t *vl, FN_identifier_t **attr_syntax, FN_status_t *status);
int fnmatch(const char *pattern, const char *string, int flags);
FILE *fopen(const char *filename, const char *mode);
FILE *fopen64(const char *, const char *);
pid_t fork(void);
pid_t fork1(void);
int form_driver(FORM *form, int c);
FIELD **form_fields(FORM *form);
void (*form_init)(FORM *form);
OPTIONS form_opts(FORM *form);
int form_opts_off(FORM *form, OPTIONS opts);
int form_opts_on(FORM *form, OPTIONS opts);
int form_page(FORM *form);
WINDOW *form_sub(FORM *form);
void (*form_term)(FORM *form);
char *form_userptr(FORM *form);
WINDOW *form_win(FORM *form);
int fpathconf(int fildes, int name);
fpclass_t fpclass(double dsrc);
int fpgetmask(void);
fp_rnd fpgetround(void);
int fpgetsticky(void);
int fprintf(FILE *stream, const char *format, ...);
int fpsetmask(int mask);
fp_rnd fpsetround(fp_rnd rnd_dir);
int fpsetsticky(int sticky);
int fputc(int c, FILE *stream);
int fputs(const char *s, FILE *stream);
wint_t fputwc(wint_t, __FILE *);
int fputws(const wchar_t *, __FILE *);
size_t fread(void *ptr, size_t size, size_t nitems, FILE *stream);
void free(void *ptr);
void free_authattr(authattr_t *auth);
void free_execattr(execattr_t *ep);
int free_field(FIELD *field);
int free_fieldtype(FIELDTYPE *fieldtype);
int free_form(FORM *form);
int free_item(ITEM *item);
int free_menu(MENU *menu);
void free_profattr(profattr_t *pd);
void free_userattr(userattr_t *userattr);
void freeaddrinfo(struct addrinfo *ai);
void freehostent(struct hostent *ptr);
void freenetconfigent(struct netconfig *netconfigp);
void freerbuf(struct buf *);
FILE *freopen(const char *filename, const char *mode, FILE *stream);
FILE *freopen64(const char *, const char *, FILE *);
double frexp(double num, int *exp);
void fscache_acset(fscache_t *fscp, uint_t acregmin, uint_t acregmax, uint_t acdirmin, uint_t acdirmax);
int fscache_activate(fscache_t *fscp, ino64_t fsid, char *namep, struct cachefsoptions *optp, ino64_t backfileno);
void fscache_activate_rw(fscache_t *fscp);
int fscache_cnodecnt(fscache_t *fscp, int cnt);
int fscache_compare_options(fscache_t *fscp, struct cachefsoptions *opnewp);
fscache_t *fscache_create(cachefscache_t *cachep);
void fscache_destory(fscache_t *fscp);
int fscache_enable(fscache_t *fscp, ino64_t fsid, char *namep, struct cachefsoptions *optp, ino64_t backfileno);
void fscache_hold(fscache_t *fscp);
void fscache_list_add(cachefscache_t *cachep, fscache_t *fscp);
fscache_t *fscache_list_find(cachefscache_t *cachep, ino64_t fsid);
void fscache_list_gc(cachefscache_t *cachep);
int fscache_list_mounted(cachefscache_t *cachep);
void fscache_list_remove(cachefscache_t *cachep, fscache_t *fscp);
int fscache_mounted(fscache_t *fscp, struct vfs *cfsvfsp, struct vfs *backvfsp);
int fscache_name_to_fsid(cachefscache_t *cachep, char *namep, ino64_t *fsidp);
void fscache_rele(fscache_t *fscp);
void fscache_sync(fscache_t *fscp);
int fscanf(FILE *stream, const char *format, ...);
int fseek(FILE *stream, int offset, int whence);
int fseeko(FILE *stream, off_t offset, int whence);
int fseeko64(FILE *, off64_t, int);
int fsetpos(FILE *stream, const fpos_t *pos);
int fsetpos64(FILE *, const fpos64_t *);
int fstat(int fildes, struct stat *buf);
int fstat64(int, struct stat64 *);
int fstatfs(int, struct statfs *, int, int);
int fstatvfs(int fildes, struct statvfs *buf);
int fstatvfs64(int, statvfs64_t *);
int fsync(int fildes);
int ftell(FILE *stream);
off_t ftello(FILE *stream);
off64_t ftello64(FILE *);
int ftime(struct timeb *tp);
key_t ftok(const char *path, int id);
int ftruncate(int fildes, off_t length);
int ftruncate64(int, off64_t);
int ftrylockfile(FILE *stream);
int ftw(const char *path, int (*fn)(const char *, const struct stat *, int), int depth);
int ftw64(const char *, int (*)(const char *, const struct stat64 *, int), int);
void func_to_decimal(char **pc, int nmax, int fortran_conventions, decimal_record *pd, enum decimal_string_form *pform, char **pechar, int (*pget)(void), int *pnread, int (*punget)(int c));
void funlockfile(FILE *stream);
int fwide(FILE *stream, int mode);
int fwprintf(FILE *stream, const wchar_t *format, ...);
size_t fwrite(const void *ptr, size_t size, size_t nitems, FILE *stream);
int fwscanf(FILE *stream, const wchar_t *format, ...);
char *gai_strerror(int errcode);
double gamma(double);
char *gconvert(double value, int ndigit, int trailing, char *buf);
char *gcvt(double value, int ndigit, char *buf);
int gelf_checksum(Elf *elf);
size_t gelf_fsize(Elf *elf, Elf_Type type, size_t cnt, unsigned int ver);
int gelf_getclass(Elf *elf);
GElf_Dyn *gelf_getdyn(Elf_Data *src, int ndx, GElf_Dyn *src);
GElf_Ehdr *gelf_getehdr(Elf *elf, GElf_Ehdr *dst);
GElf_Move *gelf_getmove(Elf_Data *src, int ndx, GElf_Move *dst);
GElf_Phdr *gelf_getphdr(Elf *elf, int ndx, GElf_Phdr *src);
GElf_Rel *gelf_getrel(Elf_Data *src, int ndx, GElf_Rel *dst);
GElf_Rela *gelf_getrela(Elf_Data *src, int ndx, GElf_Rela *dst);
GElf_Shdr *gelf_getshdr(Elf_Scn *scn, Elf_Data *dst);
GElf_Sym *gelf_getsym(Elf_Data *data, int ndx, GElf_Sym *dst);
GElf_Syminfo *gelf_getsyminfo(Elf_Data *src, int ndx, GElf_Syminfo *dst);
unsigned int gelf_newehdr(Elf *elf, int c_class);
unsigned int gelf_newphdr(Elf *elf, size_t phnum);
int gelf_update_dyn(Elf_Data *src, int ndx, GElf_Dyn *src);
int gelf_update_ehdr(Elf *elf, GElf_Ehdr *src);
int gelf_update_move(Elf_Data *dst, int ndx, GElf_Move *src);
int gelf_update_phdr(Elf *elf, int ndx, GElf_Phdr *src);
int gelf_update_rel(Elf_Data *dst, int ndx, GElf_Rel *src);
int gelf_update_rela(Elf_Data *dst, int ndx, GElf_Rela *src);
int gelf_update_shdr(Elf_Scn *scn, GElf_Shdr *src);
int gelf_update_sym(Elf_Data *dest, int ndx, GElf_Sym *src);
int gelf_update_syminfo(Elf_Data *dst, int ndx, GElf_Syminfo *src);
Elf_Data *gelf_xlatetof(Elf *elf, Elf_Data *dst, const Elf_Data *src, unsigned int encode);
Elf_Data *gelf_xlatetom(Elf *elf, Elf_Data *dst, const Elf_Data *src, unsigned int encode);
void get_myaddress(struct sockaddr_in *);
int get_ok_ack(TIUSER *, int, int);
int get_progbits_size(struct module *, struct proginfo *, struct proginfo *, struct proginfo *);
size_t getacct(idtype_t, id_t, void *, size_t);
int getacdir(char *dir, int len);
int getacflg(char *auditstring, int len);
int getacmin(int *min_val);
int getacna(char *auditstring, int len);
int getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res);
chtype getattrs(WINDOW *);
struct au_class_ent *getauclassent(void);
struct au_class_ent *getauclassent_r(au_class_ent_t *class_int);
struct au_class_ent *getauclassnam(const char *name);
struct au_class_ent *getauclassnam_r(au_class_ent_t *class_int, const char *name);
int getaudit(struct auditinfo *info);
int getaudit_addr(struct auditinfo_addr *info, int length);
int getauditflags();
int getauditflagsbin(char *auditstring, au_mask_t *masks);
int getauditflagschar(char *auditstring, au_mask_t *masks, int verbose);
struct au_event_ent *getauevent(void);
struct au_event_ent *getauevent_r(au_event_ent_t *e);
struct au_event_ent *getauevnam(char *name);
struct au_event_ent *getauevnam_r(au_event_ent_t *e, char *name);
au_event_t *getauevnonam(char *event_name);
struct au_event_ent *getauevnum(au_event_t event_number);
struct au_event_ent *getauevnum_r(au_event_ent_t *e, au_event_t event_number);
int getauid(au_id_t *auid);
authattr_t *getauthattr(void);
authattr_t *getauthnam(const char *name);
struct au_user_ent *getauuserent(void);
struct au_user_ent *getauuserent_r(au_user_ent_t *u);
struct au_user_ent *getauusernam(const char *name);
struct au_user_ent *getauusernam_r(au_user_ent_t *u, const char *name);
int getbegx(WINDOW *);
int getbegy(WINDOW *);
void getbegyx(WINDOW *win, int y, int x);
chtype getbkgd(WINDOW *);
unsigned int getbmap(void);
int getc(FILE *stream);
int getc_unlocked(FILE *stream);
int getch(void);
int getchar(void);
int getchar_unlocked(void);
int getcontext(ucontext_t *ucp);
int getcurx(WINDOW *);
int getcury(WINDOW *);
struct cwrd *getcw();
char *getcwd(char *buf, size_t size);
devalloc_t *getdadev();
devalloc_t *getdaent();
devalloc_t *getdanam();
struct tm *getdate(const char *string);
int getdate_err;
devalloc_t *getdatype();
int getdents(int fildes, struct dirent *buf, size_t nbyte);
char **getdev(char **, char **, int);
char **getdgrp(char **, char **, int);
devmap_t *getdmapdev();
devmap_t *getdmapent();
devmap_t *getdmapnam();
devmap_t *getdmaptype();
int getdtablesize(void);
gid_t getegid(void);
major_t getemajor(dev_t);
minor_t geteminor(dev_t);
char *getenv(const char *name);
uid_t geteuid(void);
execattr_t *getexecattr(void);
const char *getexecname(void);
execattr_t *getexecprof(const char *profname, const char *type, const char *id, int search_flag);
execattr_t *getexecuser(const char *username, const char *type, const char *id, int search_flag);
int getextmntent(FILE *fp, struct extmnttab *mp, int len);
int getfauditflags(au_mask_t *usremasks, au_mask_t *usrdmasks, au_mask_t *lastmasks);
gid_t getgid(void);
struct group *getgrent(void);
struct group *getgrent_r(struct group *grp, char *buffer, int bufsize);
struct group *getgrgid(gid_t gid);
int getgrgid_r(gid_t gid, struct group *grp, char *buffer, size_t bufsize, struct group **result);
struct group *getgrnam(const char *name);
int getgrnam_r(const char *name, struct group *grp, char *buffer, size_t bufsize, struct group **result);
int getgroups(int gidsetsize, gid_t *grouplist);
struct hostent *gethostbyaddr(const void *addr, size_t len, int type);
struct hostent *gethostbyaddr_r(const char *addr, int length, int type, struct hostent *result, char *buffer, int buflen, int *h_errnop);
struct hostent *gethostbyname(const char *name);
struct hostent *gethostbyname2(const char *, int);
struct hostent *gethostbyname_r(const char *name, struct hostent *result, char *buffer, int buflen, int *h_errnop);
struct hostent *gethostent(void);
struct hostent *gethostent_r(struct hostent *result, char *buffer, int buflen, int *h_errnop);
int gethostid(void);
int gethostname(char *name, size_t namelen);
hrtime_t gethrtime(void);
hrtime_t gethrvtime(void);
struct hostent *getipnodebyaddr(const void *src, size_t len, int af, int *error_num);
struct hostent *getipnodebyname(const char *name, int af, int flags, int *error_num);
int getitimer(int which, struct itimerval *value);
int getkernstate(au_mask_t *);
int getloadavg(double loadavg[], int nelem);
char *getlogin(void);
int getlogin_r(char *name, size_t namesize);
major_t getmajor(dev_t);
int getmaxx(WINDOW *);
int getmaxy(WINDOW *);
void getmaxyx(WINDOW *win, int y, int x);
minor_t getminor(dev_t);
int getmntany(FILE *fp, struct mnttab *mp, struct mnttab *mpref);
int getmntent(FILE *fp, struct mnttab *mp);
unsigned int getmouse(void);
int getmsg(int fildes, struct strbuf *ctlptr, struct strbuf *dataptr, int *flagsp);
int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, size_t hostlen, char *serv, size_t servlen, int flags);
struct netent *getnetbyaddr(in_addr_t net, int type);
struct netent *getnetbyaddr_r(int net, int type, struct netent *result, char *buffer, int buflen);
struct netent *getnetbyname(const char *name);
struct netent *getnetbyname_r(const char *name, struct netent *result, char *buffer, int buflen);
struct netconfig *getnetconfig(void *handlep);
struct netconfig *getnetconfigent(const char *netid);
struct netent *getnetent(void);
struct netent *getnetent_r(struct netent *result, char *buffer, int buflen);
int getnetgrent(char **machinep, char **userp, char **domainp);
int getnetgrent_r(char **machinep, char **userp, char **domainp, char *buffer, int buflen);
int getnetname(char *);
struct netconfig *getnetpath(void *handlep);
int getnwstr(wchar_t *wstr, int n);
int getopt(int argc, char *const *argv, const char *optstring);
int getpagesize(void);
int getparx(WINDOW *);
int getpary(WINDOW *);
void getparyx(WINDOW *win, int y, int x);
char *getpass(const char *prompt);
char *getpassphrase(const char *prompt);
int getpeername(int socket, struct sockaddr *address, socklen_t *address_len);
pid_t getpgid(pid_t pid);
pid_t getpgrp(void);
pid_t getpid(void);
int getpmsg(int fildes, struct strbuf *ctlptr, struct strbuf *dataptr, int *bandp, int *flagsp);
pid_t getppid(void);
int getpriority(int which, id_t who);
profattr_t *getprofattr(void);
profattr_t *getprofnam(const char *name);
struct protoent *getprotobyname(const char *name);
struct protoent *getprotobyname_r(const char *name, struct protoent *result, char *buffer, int buflen);
struct protoent *getprotobynumber(int proto);
struct protoent *getprotobynumber_r(int proto, struct protoent *result, char *buffer, int buflen);
struct protoent *getprotoent(void);
struct protoent *getprotoent_r(struct protoent *result, char *buffer, int buflen);
int getpublickey(const char *, char *);
int getpw(uid_t uid, char *buf);
struct passwd *getpwent(void);
struct passwd *getpwent_r(struct passwd *pwd, char *buffer, int buflen);
struct passwd *getpwnam(const char *name);
int getpwnam_r(const char *name, struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result);
struct passwd *getpwuid(uid_t uid);
int getpwuid_r(uid_t uid, struct passwd *pwd, char *buffer, size_t bufsize, struct passwd **result);
struct buf *getrbuf(int);
int getrlimit(int resource, struct rlimit *rlp);
int getrlimit64(int, struct rlimit64 *);
struct rpcent *getrpcbyname(const char *name);
struct rpcent *getrpcbyname_r(const char *name, struct rpcent *result, char *buffer, int buflen);
struct rpcent *getrpcbynumber(const int number);
struct rpcent *getrpcbynumber_r(const int number, struct rpcent *result, char *buffer, int buflen);
struct rpcent *getrpcent(void);
struct rpcent *getrpcent_r(struct rpcent *result, char *buffer, int buflen);
ushort_t getrpcport(char *, rpcprog_t, rpcvers_t, rpcprot_t);
int getrusage(int who, struct rusage *r_usage);
char *gets(char *s);
int getsecretkey(const char *, char *, const char *);
struct servent *getservbyname(const char *name, const char *proto);
struct servent *getservbyname_r(const char *name, const char *proto, struct servent *result, char *buffer, int buflen);
struct servent *getservbyport(int port, const char *proto);
struct servent *getservbyport_r(int port, const char *proto, struct servent *result, char *buffer, int buflen);
struct servent *getservent(void);
struct servent *getservent_r(struct servent *result, char *buffer, int buflen);
pid_t getsid(pid_t pid);
int getsockname(int socket, struct sockaddr *address, socklen_t *address_len);
int getsockopt(int socket, int level, int option_name, void *option_value, socklen_t *option_len);
struct spwd *getspent(void);
struct spwd *getspent_r(struct spwd *result, char *buffer, int buflen);
struct spwd *getspnam(const char *name);
struct spwd *getspnam_r(const char *name, struct spwd *result, char *buffer, int buflen);
int getstr(char *str);
int getsubopt(char **optionp, char *const *tokens, char **valuep);
int getsyx(int y, int x);
taskid_t gettaskid(void);
char *gettext(const char *msgid);
int gettimeofday(struct timeval *tp, void *);
int gettmode(void);
char *gettxt(const char *msgid, const char *dflt_str);
uid_t getuid(void);
userattr_t *getuserattr(void);
int getuseraudit(au_id_t, au_mask_t *);
userattr_t *getusernam(const char *name);
userattr_t *getuseruid(uid_t uid);
struct utmp *getutent(void);
struct utmp *getutid(const struct utmp *id);
struct utmp *getutline(const struct utmp *line);
void getutmp(struct utmpx *utmpx, struct utmp *utmp);
void getutmpx(struct utmp *utmp, struct utmpx *utmpx);
struct utmpx *getutxent(void);
struct utmpx *getutxid(const struct utmpx *id);
struct utmpx *getutxline(const struct utmpx *line);
int getvfsany(FILE *, struct vfstab *vp, struct vfstab *vref);
int getvfsent(FILE *fp, struct vfstab *vp);
int getvfsfile(FILE *fp, struct vfstab *vp, char *file);
int getvfsspec(FILE *, struct vfstab *vp, char *spec);
int getvol(char *, char *, int, char *);
int getw(FILE *stream);
wint_t getwc(__FILE *);
int getwch(void);
wint_t getwchar(void);
char *getwd(char *path_name);
void getwidth(eucwidth_t *ptr);
WINDOW *getwin(FILE *filep);
wchar_t *getws(wchar_t *ws);
int getwstr(wchar_t *wstr);
void getyx(WINDOW *win, int y, int x);
int glob(const char *, int, int (*)(const char *, int), glob_t *);
void globfree(glob_t *pglob);
int gmatch(const char *str, const char *pattern);
struct tm *gmtime(const time_t *clock);
struct tm *gmtime_r(const time_t *clock, struct tm *res);
int grantpt(int fildes);
int gsignal(int sig);
OM_uint32 gss_accept_sec_context(OM_uint32 *, gss_ctx_id_t *, const gss_cred_id_t, const gss_buffer_t, const gss_channel_bindings_t, gss_name_t *, gss_OID *, gss_buffer_t, OM_uint32 *, OM_uint32 *, gss_cred_id_t *);
OM_uint32 gss_acquire_cred(OM_uint32 *, const gss_name_t, OM_uint32, const gss_OID_set, gss_cred_usage_t, gss_cred_id_t *, gss_OID_set *, OM_uint32 *);
OM_uint32 gss_add_cred(OM_uint32 *, const gss_cred_id_t, const gss_name_t, const gss_OID, gss_cred_usage_t, OM_uint32, OM_uint32, gss_cred_id_t *, gss_OID_set *, OM_uint32 *, OM_uint32 *);
OM_uint32 gss_add_oid_set_member(OM_uint32 *, const gss_OID, gss_OID_set *);
OM_uint32 gss_canonicalize_name(OM_uint32 *, const gss_name_t, const gss_OID, gss_name_t *);
OM_uint32 gss_compare_name(OM_uint32 *, const gss_name_t, const gss_name_t, int *);
OM_uint32 gss_context_time(OM_uint32 *, const gss_ctx_id_t, OM_uint32 *);
OM_uint32 gss_create_empty_oid_set(OM_uint32 *, gss_OID_set *);
OM_uint32 gss_delete_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_buffer_t);
OM_uint32 gss_display_name(OM_uint32 *, const gss_name_t, gss_buffer_t, gss_OID *);
OM_uint32 gss_display_status(OM_uint32 *, OM_uint32, int, const gss_OID, OM_uint32 *, gss_buffer_t);
OM_uint32 gss_duplicate_name(OM_uint32 *, const gss_name_t, gss_name_t *);
OM_uint32 gss_export_name(OM_uint32 *, const gss_name_t, gss_buffer_t);
OM_uint32 gss_export_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_buffer_t);
OM_uint32 gss_get_group_info(const uid_t, gid_t *, gid_t *[], int *);
OM_uint32 gss_get_mic(OM_uint32 *, const gss_ctx_id_t, gss_qop_t, const gss_buffer_t, gss_buffer_t);
OM_uint32 gss_import_name(OM_uint32 *, const gss_buffer_t, const gss_OID, gss_name_t *);
OM_uint32 gss_import_sec_context(OM_uint32 *, const gss_buffer_t, gss_ctx_id_t *);
OM_uint32 gss_indicate_mechs(OM_uint32 *, gss_OID_set *);
OM_uint32 gss_init_sec_context(OM_uint32 *, const gss_cred_id_t, gss_ctx_id_t *, const gss_name_t, const gss_OID, OM_uint32, OM_uint32, gss_channel_bindings_t, const gss_buffer_t, gss_OID *, gss_buffer_t, OM_uint32 *, OM_uint32 *);
OM_uint32 gss_inquire_context(OM_uint32 *, const gss_ctx_id_t, gss_name_t *, gss_name_t *, OM_uint32 *, gss_OID *, OM_uint32 *, int *, int *);
OM_uint32 gss_inquire_cred(OM_uint32 *, const gss_cred_id_t, gss_name_t *, OM_uint32 *, gss_cred_usage_t *, gss_OID_set *);
OM_uint32 gss_inquire_cred_by_mech(OM_uint32 *, const gss_cred_id_t, const gss_OID, gss_name_t *, OM_uint32 *, OM_uint32 *, gss_cred_usage_t *);
OM_uint32 gss_inquire_mechs_for_name(OM_uint32 *, const gss_name_t, gss_OID_set *);
OM_uint32 gss_inquire_names_for_mech(OM_uint32 *, const gss_OID, gss_OID_set *);
OM_uint32 gss_oid_to_str(OM_uint32 *, const gss_OID, gss_buffer_t);
OM_uint32 gss_process_context_token(OM_uint32 *, const gss_ctx_id_t, const gss_buffer_t);
OM_uint32 gss_release_buffer(OM_uint32 *, gss_buffer_t);
OM_uint32 gss_release_cred(OM_uint32 *, gss_cred_id_t *);
OM_uint32 gss_release_name(OM_uint32 *, gss_name_t *);
OM_uint32 gss_release_oid(OM_uint32 *, gss_OID *);
OM_uint32 gss_release_oid_set(OM_uint32 *, gss_OID_set *);
OM_uint32 gss_seal(OM_uint32 *, gss_ctx_id_t, int, int, gss_buffer_t, int *, gss_buffer_t);
OM_uint32 gss_sign(OM_uint32 *, gss_ctx_id_t, int, gss_buffer_t, gss_buffer_t);
OM_uint32 gss_str_to_oid(OM_uint32 *, const gss_buffer_t, gss_OID *);
OM_uint32 gss_test_oid_set_member(OM_uint32 *, const gss_OID, const gss_OID_set, int *);
OM_uint32 gss_unseal(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *, int *);
OM_uint32 gss_unwrap(OM_uint32 *, const gss_ctx_id_t, const gss_buffer_t, gss_buffer_t, int *, gss_qop_t *);
OM_uint32 gss_verify(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *);
OM_uint32 gss_verify_mic(OM_uint32 *, const gss_ctx_id_t, const gss_buffer_t, const gss_buffer_t, gss_qop_t *);
OM_uint32 gss_wrap(OM_uint32 *, const gss_ctx_id_t, int, gss_qop_t, const gss_buffer_t, int *, gss_buffer_t);
OM_uint32 gss_wrap_size_limit(OM_uint32 *, const gss_ctx_id_t, int, gss_qop_t, OM_uint32, OM_uint32 *);
OM_uint32 gsscred_expname_to_unix_cred(const gss_buffer_t, uid_t *, gid_t *, gid_t *[], int *);
OM_uint32 gsscred_name_to_unix_cred(const gss_name_t, const gss_OID, uid_t *, gid_t *, gid_t *[], int *);
int h_errno;
int halfdelay(int tenths);
bool has_colors(void);
int has_ic(void);
int has_il(void);
int hashinc();
char *hasmntopt(struct mnttab *mnt, char *opt);
int havedisk(char *host);
int hcreate(size_t mekments);
void hdestroy(void);
void herror(const char *);
int hide_panel(PANEL *panel);
int hmask;
int host2netname(char *, const char *, const char *);
int hres_lock;
timestruc_t hrestime;
ENTRY *hsearch(ENTRY item, ACTION action);
const char *hstrerror(int);
uint32_t htonl(uint32_t hostlong);
uint16_t htons(uint16_t hostshort);
double hypot(double x, double y);
int hz;
void i_devi_enter(dev_info_t *, uint_t s_mask, uint_t w_mask, int has_lock);
void i_devi_exit(dev_info_t *, uint_t c_mask, int has_lock);
size_t iconv(iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);
int iconv_close(iconv_t cd);
iconv_t iconv_open(const char *tocode, const char *fromcode);
void idcok(WINDOW *win, bool bf);
int ident_fs(int fd, char *rawpath, int *clean, int verbose);
int idlok(WINDOW *win, bool bf);
void if_freenameindex(struct if_nameindex *ptr);
char *if_indextoname(unsigned int ifindex, char *ifname);
struct if_nameindex *if_nameindex(void);
unsigned int if_nametoindex(const char *ifname);
enum vtype iftovt_tab[];
int ilogb(double x);
char imaptab[256];
void immedok(WINDOW *win, bool bf);
const struct in6_addr in6addr_any;
const struct in6_addr in6addr_loopback;
char *index(const char *s, int c);
in_addr_t inet_addr(const char *cp);
int inet_aton(const char *, struct in_addr *);
in_addr_t inet_lnaof(struct in_addr in);
struct in_addr inet_makeaddr(in_addr_t net, in_addr_t lna);
int inet_net_pton(int, const char *, void *, size_t);
in_addr_t inet_netof(struct in_addr in);
in_addr_t inet_network(const char *cp);
char *inet_ntoa(struct in_addr in);
const char *inet_ntop(int af, const void *addr, char *cp, size_t size);
int inet_pton(int af, const char *cp, void *addr);
int init_color(__int16 color, __int16 red, __int16 green, __int16 blue);
int init_pair(__int16 pair, __int16 fg, __int16 bg);
int initgroups(const char *name, gid_t basegid);
WINDOW *initscr32(void);
char *initstate(unsigned int seed, char *state, size_t size);
int innetgr(const char *netgroup, const char *machine, const char *user, const char *domain);
int innstr(char *str, int n);
int innwstr(wchar_t *wstr, int n);
int insdelln(int n);
int insertln(void);
int insnstr(char *str, int n);
int insnwstr(wchar_t *wstr, int n);
void insque(struct qelem *elem, struct qelem *pred);
int insstr(char *str);
int inst_sync(char *pathname, int flags);
int install_utrap(utrap_entry_t type, utrap_handler_t new_handler, utrap_handler_t *old_handlerp);
int instr(char *str);
int inswstr(wchar_t *wstr);
int intrflush(WINDOW *win, bool bf);
int inwstr(wchar_t *wstr);
int ioctl(int fildes, int request, ...);
queue_t *ipd_cm;
int ipd_debug;
void ipd_init(void);
int is_empty_string(const char *);
int is_linetouched(WINDOW *win, int line);
int is_wintouched(WINDOW *win);
int isaexec(const char *path, char *const argv[], char *const envp[]);
int isalnum(int c);
int isalpha(int c);
int isascii(int c);
int isastream(int fildes);
int isatty(int fildes);
int iscntrl(int c);
int isdigit(int c);
int isencrypt(const char *fbuf, size_t ninbuf);
int isendwin(void);
int isenglish(wint_t);
int isgraph(int c);
int isideogram(wint_t);
int islower(int c);
int isnan(double x);
int isnand(double dsrc);
int isnanf(float fsrc);
int isnumber(wint_t);
int isphonogram(wint_t);
int isprint(int c);
int ispunct(int c);
int isspace(int c);
int isspecial(wint_t);
int isupper(int c);
int iswalnum(wint_t);
int iswalpha(wint_t wc);
int iswcntrl(wint_t);
int iswctype(wint_t wc, wctype_t charclass);
int iswdigit(wint_t);
int iswgraph(wint_t);
int iswlower(wint_t);
int iswprint(wint_t);
int iswpunct(wint_t);
int iswspace(wint_t);
int iswupper(wint_t);
int iswxdigit(wint_t);
int isxdigit(int c);
int item_count(MENU *menu);
char *item_description(ITEM *item);
int item_index(ITEM *item);
void (*item_init)(MENU *menu);
char *item_name(ITEM *item);
OPTIONS item_opts(ITEM *item);
int item_opts_off(ITEM *item, OPTIONS opts);
int item_opts_on(ITEM *item, OPTIONS opts);
void (*item_term)(MENU *menu);
char *item_userptr(ITEM *item);
int item_value(ITEM *item);
int item_visible(ITEM *item);
int itoemajor(major_t, int);
double j0(double x);
double j1(double x);
double jn(int n, double x);
int jrand48(unsigned __int16 xi[3]);
int key_decryptsession(const char *, des_block *);
int key_encryptsession(const char *, des_block *);
int key_gendes(des_block *);
int key_secretkey_is_set(void);
int key_setsecret(const char *);
char *keyname(int c);
int keypad(WINDOW *win, bool bf);
int kill(pid_t pid, int sig);
char killchar(void);
int killpg(pid_t pgrp, int sig);
struct dacfsw kmod_dacfsw;
uint_t kobj_gethashsize(uint_t);
uint_t kobj_hash_name(char *);
void kobj_init(void *romvec, void *dvec, struct bootops *bootvec, val_t *bootaux);
void *kobj_mod_alloc(struct module *, size_t, int, reloc_dest_t *);
int kobj_notify_add(kobj_notify_list *);
int kobj_notify_remove(kobj_notify_list *);
caddr_t kobj_segbrk(caddr_t *, size_t, size_t, caddr_t);
void kobj_sync_instruction_memory(caddr_t, size_t);
kid_t kstat_chain_update(kstat_ctl_t *kc);
int kstat_close(kstat_ctl_t *kc);
void *kstat_data_lookup(kstat_t *ksp, char *name);
kstat_t *kstat_lookup(kstat_ctl_t *kc, char *ks_module, int ks_instance, char *ks_name);
kstat_ctl_t *kstat_open(void);
kid_t kstat_read(kstat_ctl_t *kc, kstat_t *ksp, void *buf);
kid_t kstat_write(kstat_ctl_t *kc, kstat_t *ksp, void *buf);
int kstr_autopush(int, major_t *, minor_t *, minor_t *, uint_t *, char *[]);
int kstr_close(vnode_t *, int);
int kstr_ioctl(vnode_t *, int, intptr_t);
int kstr_msg(vnode_t *, mblk_t *, mblk_t **, timestruc_t *);
int kstr_open(major_t, minor_t, vnode_t **, int *);
int kstr_plink(vnode_t *, int, int *);
int kstr_pop(vnode_t *);
int kstr_push(vnode_t *, char *);
int kstr_unplink(vnode_t *, int);
char *kva_match(kva_t *kva, char *key);
ssize_t kvm_aread(kvm_t *, uintptr_t, void *, size_t, struct as *);
ssize_t kvm_awrite(kvm_t *, uintptr_t, const void *, size_t, struct as *);
int kvm_close(kvm_t *kd);
int kvm_getcmd(kvm_t *kd, struct proc *proc, struct user *u, char ***arg, char ***env);
struct proc *kvm_getproc(kvm_t *kd, pid_t pid);
struct user *kvm_getu(kvm_t *kd, struct proc *proc);
ssize_t kvm_kread(kvm_t *kd, uintptr_t addr, void *buf, size_t nbytes);
ssize_t kvm_kwrite(kvm_t *kd, uintptr_t addr, void *buf, size_t nbytes);
struct proc *kvm_nextproc(kvm_t *kd);
int kvm_nlist(kvm_t *kd, struct nlist *nl);
kvm_t *kvm_open(char *namelist, char *corefile, char *swapfile, int flag, char *errstr);
uint64_t kvm_physaddr(kvm_t *, struct as *, uintptr_t);
ssize_t kvm_pread(kvm_t *, uint64_t, void *, size_t);
ssize_t kvm_pwrite(kvm_t *, uint64_t, const void *, size_t);
ssize_t kvm_read(kvm_t *kd, uintptr_t addr, void *buf, size_t nbytes);
int kvm_setproc(kvm_t *kd);
ssize_t kvm_uread(kvm_t *kd, uintptr_t addr, void *buf, size_t nbytes);
ssize_t kvm_uwrite(kvm_t *kd, uintptr_t addr, void *buf, size_t nbytes);
ssize_t kvm_write(kvm_t *kd, uintptr_t addr, void *buf, size_t nbytes);
char *l64a(int l);
void la_activity(uintptr_t *, uint_t);
uintptr_t la_i86_pltenter(Elf32_Sym *, uint_t, uintptr_t *, uintptr_t *, La_i86_regs *, uint_t *);
uint_t la_objclose(uintptr_t *);
uint_t la_objopen(Link_map *, Lmid_t, uintptr_t *);
char *la_objsearch(const char *, uintptr_t *, uint_t);
uintptr_t la_pltexit(Elf32_Sym *, uint_t, uintptr_t *, uintptr_t *, uintptr_t);
void la_preinit(uintptr_t *);
uintptr_t la_sparcv8_pltenter(Elf32_Sym *, uint_t, uintptr_t *, uintptr_t *, La_sparcv8_regs *, uint_t *);
uintptr_t la_symbind32(Elf32_Sym *, uint_t, uintptr_t *, uintptr_t *, uint_t *);
uint_t la_version(uint_t);
void label(char *s);
int labs(int lval);
dl_t ladd(dl_t, dl_t);
int lchown(const char *path, uid_t owner, gid_t group);
int lckpwdf(void);
void lcl_close(LCLd lcld);
void lcl_destroy_charset_list(LclCharsetList *);
void lcl_destroy_content_info(LclContentInfo *);
void lcl_destroy_error(LclError *);
void lcl_destroy_segment_set(LclCharsetSegmentSet *);
LCLd lcl_open(char *locale);
void lcong48(unsigned __int16 param[7]);
LCTd lct_create(LCLd lcld, ...);
void lct_destroy(LCTd lctd);
LclError *lct_getvalues(LCTd lctd, LctNEAttribute target, ...);
LclError *lct_setvalues(LCTd lctd, LctNEAttribute target, ...);
unsigned __int8 lcuctab[256];
void ld_atexit(int);
void ld_atexit64(int);
void ld_file(const char *, const Elf_Kind, int, Elf *);
void ld_file64(const char *, const Elf_Kind, int, Elf *);
void ld_section(const char *, Elf32_Shdr *, Elf32_Word, Elf_Data *, Elf *);
void ld_section64(const char *, Elf64_Shdr *, Elf64_Word, Elf_Data *, Elf *);
void ld_start(const char *, const Elf32_Half, const char *);
void ld_start64(const char *, const Elf64_Half, const char *);
double ldexp(double x, int exp);
ldiv_t ldiv(int numer, int denom);
dl_t ldivide(dl_t, dl_t);
int leaveok(WINDOW *win, bool bf);
dl_t lexp10(dl_t);
void *lfind(const void *key, const void *base, size_t *nelp, size_t width, int (*compar)(const void *, const void *));
int lfmt(FILE *stream, int flags, char *format, ...);
double lgamma(double x);
double lgamma_r(double x, int *signgamp);
void line(__int16 x0, __int16 y0, __int16 x1, __int16 y1);
int link(const char *existing, const char *new);
FIELD *link_field(FIELD *field, int frow, int fcol);
FIELDTYPE *link_fieldtype(FIELDTYPE *type1, FIELDTYPE *type2);
void linmod(char *s);
int lio_listio(int mode, struct aiocb *const list[], int nent, struct sigevent *sig);
int lio_listio64(int, aiocb64_t *const [], int, struct sigevent *);
char **listdev(char *);
char **listdgrp(char *);
int listen(int socket, int backlog);
__int64 llabs(__int64 llval);
lldiv_t lldiv(__int64 numer, __int64 denom);
dl_t llog10(dl_t);
offset_t llseek(int fildes, offset_t offset, int whence);
char *lltostr(int longvalue, char *endptr);
void lm_alock(int, char *, nlm_lock *);
void lm_alock4(int, char *, nlm4_lock *);
void lm_d_nsa(int, char *, nlm_shareargs *);
void lm_d_nsa4(int, char *, nlm4_shareargs *);
void lm_debug(int level, char *function, const char *fmt, ...);
void lm_n_buf(int, char *, char *, struct netbuf *);
int lm_shutdown(void);
kmutex_t lm_vnodes_lock;
dl_t lmul(dl_t, dl_t);
char *loc1;
char *loc2;
struct lconv *localeconv(void);
struct tm *localtime(const time_t *clock);
struct tm *localtime_r(const time_t *clock, struct tm *res);
struct graph *lock_graph[32];
int lockf(int fildes, int function, off_t size);
int lockf64(int, int, off64_t);
char *locs;
double log(double x);
double log10(double x);
double log1p(double x);
double logb(double x);
char *logname(void);
dl_t lone;
void longjmp(jmp_buf env, int val);
char *longname(void);
int lookupname(char *, enum uio_seg, enum symfollow, vnode_t **, vnode_t **);
int lookuppn(struct pathname *, struct pathname *, enum symfollow, vnode_t **, vnode_t **);
int lookuppnvp(struct pathname *, struct pathname *, enum symfollow, vnode_t **, vnode_t **, vnode_t *, vnode_t *, cred_t *);
int lrand48(void);
void *lsearch(const void *key, void *base, size_t *nelp, size_t width, int (*compar)(const void *, const void *));
off_t lseek(int fildes, off_t offset, int whence);
off64_t lseek64(int, off64_t, int);
dl_t lshiftl(dl_t, int);
int lstat(const char *path, struct stat *buf);
int lstat64(const char *, struct stat64 *);
dl_t lsub(dl_t, dl_t);
dl_t lten;
dl_t lzero;
int m_addch(int);
int m_addstr(char *);
int m_clear(void);
LayoutObject m_create_layout();
int m_destroy_layout(const LayoutObject layoutobject);
int m_erase(void);
int m_getvalues_layout(const LayoutObject layout_object, LayoutValues values, int *index_returned);
WINDOW *m_initscr(void);
int m_move(int, int);
SCREEN *m_newterm(char *, FILE *, FILE *);
int m_refresh(void);
int m_setvalues_layout(LayoutObject layout_object, const LayoutValues values, int *index_returned);
int m_transform_layout(LayoutObject layout_object, const char *InpBuf, const size_t ImpSize, const void *OutBuf, size_t *Outsize, size_t *InpToOut, size_t *OutToInp, unsigned __int8 *Property, size_t *InpBufIndex);
int m_wtransform_layout(LayoutObject layout_object, const wchar_t *InpBuf, const size_t ImpSize, const void *OutBuf, size_t *Outsize, size_t *InpToOut, size_t *OutToInp, unsigned __int8 *Property, size_t *InpBufIndex);
void mach_alloc_funcdesc(struct module *);
int madvise(caddr_t addr, size_t len, int advice);
int maillock(const char *user, int retrycnt);
void mailunlock(void);
int main(int argc, char *argv[], char *envp);
major_t major(dev_t device);
datum makdatum();
void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);
dev_t makedev(major_t maj, minor_t min);
dev_t makedevice(major_t, minor_t);
struct utmpx *makeutx(const struct utmpx *);
struct mallinfo mallinfo(void);
void *malloc(size_t size);
void mallocctl(int cmd, int value);
int mallopt(int cmd, int value);
int map_button(unsigned int);
execattr_t *match_execattr(execattr_t *ep, char *profname, char *type, char *id);
int matherr(struct exception *exc);
int max_ncpus;
int maxbno;
int mblen(const char *s, size_t n);
size_t mbrlen(const char *s, size_t n, mbstate_t *ps);
size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);
int mbsinit(const mbstate_t *ps);
size_t mbsrtowcs(wchar_t *dst, const char **src, size_t len, mbstate_t *ps);
size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n);
int mbtowc(wchar_t *pwc, const char *s, size_t n);
wchar_t mcfiller(void);
int mcwrap(void);
void md5_calc(unsigned __int8 *output, unsigned __int8 *input, unsigned int inlen);
int mdb_add_walker(const mdb_walker_t *);
void *mdb_alloc(size_t, uint_t);
int mdb_call_dcmd(const char *, uintptr_t, uint_t, int, const mdb_arg_t *);
ulong_t mdb_dec_indent(ulong_t);
int mdb_eval(const char *);
void mdb_flush(void);
void mdb_free(void *, size_t);
uintmax_t mdb_get_dot(void);
void mdb_get_pipe(mdb_pipe_t *);
ssize_t mdb_get_xdata(const char *, void *, size_t);
int mdb_getopts(int, const mdb_arg_t *, ...);
ulong_t mdb_inc_indent(ulong_t);
const char *mdb_inval_bits(int, int, int);
int mdb_layered_walk(const char *, mdb_walk_state_t *);
int mdb_lookup_by_addr(uintptr_t, uint_t, char *, size_t, GElf_Sym *);
int mdb_lookup_by_name(const char *, GElf_Sym *);
int mdb_lookup_by_obj(const char *, const char *, GElf_Sym *);
const char *mdb_one_bit(int, int, int);
ssize_t mdb_pread(void *, size_t, uint64_t);
void mdb_printf(const char *, ...);
int mdb_prop_kernel;
int mdb_prop_postmortem;
int mdb_pwalk(const char *, mdb_walk_cb_t, void *, uintptr_t);
int mdb_pwalk_dcmd(const char *, const char *, int, const mdb_arg_t *, uintptr_t);
ssize_t mdb_pwrite(const void *, size_t, uint64_t);
ssize_t mdb_readstr(char *, size_t, uintptr_t);
ssize_t mdb_readsym(void *, size_t, const char *);
ssize_t mdb_readvar(void *, const char *);
int mdb_remove_walker(const char *);
void mdb_set_dot(uintmax_t);
void mdb_set_pipe(const mdb_pipe_t *);
size_t mdb_snprintf(char *, size_t, const char *, ...);
u_longlong_t mdb_strtoull(const char *);
ssize_t mdb_vread(void *, size_t, uintptr_t);
ssize_t mdb_vwrite(const void *, size_t, uintptr_t);
int mdb_walk(const char *, mdb_walk_cb_t, void *);
int mdb_walk_dcmd(const char *, const char *, int, const mdb_arg_t *);
void mdb_warn(const char *, ...);
ssize_t mdb_writestr(const char *, uintptr_t);
ssize_t mdb_writesym(const void *, size_t, const char *);
ssize_t mdb_writevar(const void *, const char *);
void *mdb_zalloc(size_t, uint_t);
char *media_findname(char *start);
char *media_getattr(char *vol_path, char *attr);
ulonglong_t media_getid(char *vol_path);
int media_setattr(char *vol_path, char *attr, char *value);
void *memalign(size_t alignment, size_t size);
void membar_consumer(void);
void membar_enter(void);
void membar_exit(void);
void membar_producer(void);
void *memccpy(void *s1, const void *s2, int c, size_t n);
void *memchr(void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
int memcntl(caddr_t addr, size_t len, int cmd, caddr_t arg, int attr, int mask);
void *memcpy(void *s1, const void *s2, size_t n);
void memlist_read_lock(void);
void memlist_read_unlock(void);
void *memmove(void *s1, const void *s2, size_t n);
void *memset(void *s, int c, size_t n);
chtype menu_back(MENU *);
int menu_driver(MENU *menu, int c);
chtype menu_fore(MENU *);
void menu_format(MENU *menu, int *rows, int *cols);
chtype menu_grey(MENU *);
PTF_void menu_init(MENU *);
ITEM **menu_items(MENU *menu);
char *menu_mark(MENU *menu);
OPTIONS menu_opts(MENU *menu);
int menu_opts_off(MENU *menu, OPTIONS opts);
int menu_opts_on(MENU *menu, OPTIONS opts);
int menu_pad(MENU *menu);
char *menu_pattern(MENU *menu);
WINDOW *menu_sub(MENU *menu);
PTF_void menu_term(MENU *);
char *menu_userptr(MENU *menu);
WINDOW *menu_win(MENU *menu);
int meta(WINDOW *win, bool bf);
int mincore(caddr_t addr, size_t len, char *vec);
minor_t minor(dev_t device);
int mkdir(const char *path, mode_t mode);
int mkdirp(const char *path, mode_t mode);
int mkfifo(const char *path, mode_t mode);
int mknod(const char *path, mode_t mode, dev_t dev);
int mkstemp(char *template);
int mkstemp64(char *);
char *mktemp(char *template);
time_t mktime(struct tm *timeptr);
int mlock(const void *addr, size_t len);
int mlockall(int flags);
void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off);
caddr_t mmap64(caddr_t, size_t, int, int, int, off64_t);
char *mntopt(char **);
struct dev_ops mod_nodev_ops;
double modf(double x, double *iptr);
float modff(float x, float *iptr);
struct utmpx *modutx(const struct utmpx *);
void monitor(int (*lowpc)(), int (*highpc)(), WORD *buffer, size_t bufsize, size_t nfunc);
int mount(const char *spec, const char *dir, int mflag, char *fstype, char *dataptr, int datalen, char *optptr, int optlen);
int mouse_off(int);
int mouse_on(int);
int mouse_set(int);
void move(__int16 x, __int16 y);
int move_field(FIELD *field, int frow, int fcol);
int move_panel(PANEL *panel, int starty, int startx);
int movenextch(void);
int moveprevch(void);
void mp_gcd(MINT *a, MINT *b, MINT *c);
MINT *mp_itom(__int16 n);
void mp_madd(MINT *a, MINT *b, MINT *c);
int mp_mcmp(MINT *a, MINT *b);
void mp_mdiv(MINT *a, MINT *b, MINT *q, MINT *r);
void mp_mfree(MINT *a);
int mp_min(MINT *a);
void mp_mout(MINT *a);
int mp_msqrt(MINT *a, MINT *b, MINT *r);
void mp_msub(MINT *a, MINT *b, MINT *c);
char *mp_mtox(MINT *a);
void mp_mult(MINT *a, MINT *b, MINT *c);
void mp_pow(MINT *a, MINT *b, MINT *c, MINT *d);
void mp_rpow(MINT *a, __int16 n, MINT *b);
void mp_sdiv(MINT *a, __int16 n, MINT *q, __int16 *r);
MINT *mp_xtom(char *a);
int mprotect(void *addr, size_t len, int prot);
int mq_close(mqd_t mqdes);
int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat);
int mq_notify(mqd_t mqdes, const struct sigevent *notification);
mqd_t mq_open(const char *name, int oflag, ...);
ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio);
int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio);
int mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat);
int mq_unlink(const char *name);
int mrand48(void);
int msgctl(int msqid, int cmd, struct msqid_ds *buf);
int msgget(key_t key, int msgflg);
ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, int msgtyp, int msgflg);
int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
int msync(void *addr, size_t len, int flags);
int munlock(const void *addr, size_t len);
int munlockall(void);
int munmap(void *addr, size_t len);
int mutex_destroy(mutex_t *mp);
int mutex_init(mutex_t *mp, int type, void *arg);
int mutex_lock(mutex_t *mp);
int mutex_trylock(mutex_t *mp);
int mutex_unlock(mutex_t *mp);
int mvaddnstr(int y, int x, char *str, int n);
int mvaddnwstr(int y, int x, wchar_t *wstr, int n);
int mvaddstr(int y, int x, char *str);
int mvaddwstr(int y, int x, wchar_t *wstr);
int mvcur(int oldrow, int oldcol, int newrow, int newcol);
int mvdelch(int y, int x);
int mvderwin(WINDOW *win, int par_y, int par_x);
int mvgetch(int y, int x);
int mvgetnwstr(int y, int x, wchar_t *wstr, int n);
int mvgetstr(int y, int x, char *str);
int mvgetwch(int y, int x);
int mvgetwstr(int y, int x, wchar_t *wstr);
int mvinnstr(int y, int x, char *str, int n);
int mvinnwstr(int y, int x, wchar_t *wstr, int n);
int mvinsnstr(int y, int x, char *str, int n);
int mvinsnwstr(int y, int x, wchar_t *wstr, int n);
int mvinsstr(int y, int x, char *str);
int mvinstr(int y, int x, char *str);
int mvinswstr(int y, int x, wchar_t *wstr);
int mvinwstr(int y, int x, wchar_t *wstr);
int mvprintw(int y, int x, char *fmt, ...);
int mvscanw(int y, int x, char *fmt, ...);
int mvwaddnstr(WINDOW *win, int y, int x, char *str, int n);
int mvwaddnwstr(WINDOW *win, int y, int x, wchar_t *wstr, int n);
int mvwaddstr(WINDOW *win, int y, int x, char *str);
int mvwaddwstr(WINDOW *win, int y, int x, wchar_t *wstr);
int mvwdelch(WINDOW *win, int y, int x);
int mvwgetch(WINDOW *win, int y, int x);
int mvwgetnwstr(WINDOW *win, int y, int x, wchar_t *wstr, int n);
int mvwgetstr(WINDOW *win, int y, int x, char *str);
int mvwgetwch(WINDOW *win, int y, int x);
int mvwgetwstr(WINDOW *win, int y, int x, wchar_t *wstr);
int mvwin(WINDOW *win, int y, int x);
int mvwinnstr(WINDOW *win, int y, int x, char *str, int n);
int mvwinnwstr(WINDOW *win, int y, int x, wchar_t *wstr, int n);
int mvwinsnstr(WINDOW *win, int y, int x, char *str, int n);
int mvwinsnwstr(WINDOW *win, int y, int x, wchar_t *wstr, int n);
int mvwinsstr(WINDOW *win, int y, int x, char *str);
int mvwinstr(WINDOW *win, int y, int x, char *str);
int mvwinswstr(WINDOW *win, int y, int x, wchar_t *wstr);
int mvwinwstr(WINDOW *win, int y, int x, wchar_t *wstr);
int mvwprintw(WINDOW *win, int y, int x, char *fmt, ...);
int mvwscanw(WINDOW *win, int y, int x, char *fmt, ...);
int nanosleep(const struct timespec *rqtp, struct timespec *rmtp);
int napms(int ms);
int nbra;
void nc_perror(const char *msg);
char *nc_sperror(void);
int ncpus;
int ncpus_online;
void netdir_free(void *ptr, const int struct_type);
int netdir_getbyaddr(const struct netconfig *config, struct nd_hostservlist **service, const struct netbuf *netaddr);
int netdir_getbyname(const struct netconfig *config, const struct nd_hostserv *service, struct nd_addrlist **addrs);
int netdir_mergeaddr(struct netconfig *, char **muaddr, char *uaddr, char *ruaddr);
int netdir_options(const struct netconfig *config, const int option, const int fildes, char *point_to_args);
void netdir_perror(char *s);
char *netdir_sperror(void);
int netname2host(const char *, char *, const int);
int netname2user(const char *, uid_t *, gid_t *, int *, gid_t *);
FIELD *new_field(int r, int c, int frow, int fcol, int nrow, int ncol);
FIELDTYPE *new_fieldtype(PTF_int, PTF_int);
FORM *new_form(FIELD **fields);
ITEM *new_item(char *name, char *desc);
MENU *new_menu(ITEM **items);
int new_page(FIELD *field);
PANEL *new_panel(WINDOW *win);
int newkey(char *, __int16, bool);
WINDOW *newpad(int nlines, int ncols);
SCREEN *newscreen(char *, int, int, int, FILE *, FILE *);
SCREEN *newterm32(char *type, FILE *outfd, FILE *infd);
WINDOW *newwin(int nlines, int ncols, int begin_y, int begin_x);
double nextafter(double x, double y);
datum nextkey();
sec_data_t *nfs_clnt_secdata(seconfig_t *, char *, struct knetconfig *, struct netbuf *, int);
void nfs_free_secdata(sec_data_t *);
bool_t nfs_get_root_principal(seconfig_t *, char *, caddr_t *);
int nfs_getseconfig_bydesc(char *, char *, rpc_gss_service_t, seconfig_t *);
int nfs_getseconfig_byname(char *, seconfig_t *);
int nfs_getseconfig_bynumber(int, seconfig_t *);
int nfs_getseconfig_default(seconfig_t *);
int nfs_syslog_scerr(int, char[]);
auth_res *nfsauth_access_1(auth_req *, CLIENT *);
auth_res *nfsauth_access_1_svc(auth_req *, struct svc_req *);
int nfsauth_prog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
ACCESS3res *nfsproc3_access_3();
COMMIT3res *nfsproc3_commit_3();
CREATE3res *nfsproc3_create_3();
FSINFO3res *nfsproc3_fsinfo_3();
FSSTAT3res *nfsproc3_fsstat_3();
GETATTR3res *nfsproc3_getattr_3();
LINK3res *nfsproc3_link_3();
LOOKUP3res *nfsproc3_lookup_3();
MKDIR3res *nfsproc3_mkdir_3();
MKNOD3res *nfsproc3_mknod_3();
void *nfsproc3_null_3();
PATHCONF3res *nfsproc3_pathconf_3();
READ3res *nfsproc3_read_3();
READDIR3res *nfsproc3_readdir_3();
READDIRPLUS3res *nfsproc3_readdirplus_3();
READLINK3res *nfsproc3_readlink_3();
REMOVE3res *nfsproc3_remove_3();
RENAME3res *nfsproc3_rename_3();
RMDIR3res *nfsproc3_rmdir_3();
SETATTR3res *nfsproc3_setattr_3();
SYMLINK3res *nfsproc3_symlink_3();
WRITE3res *nfsproc3_write_3();
int nftw(const char *path, int (*fn)(const char *, const struct stat *, int, struct FTW *), int depth, int flags);
int nftw64(const char *, int (*)(const char *, const struct stat64 *, int, struct FTW *), int, int);
int nice(int incr);
nis_result *nis_add(nis_name name, nis_object *obj);
nis_result *nis_add_entry(nis_name table_name, nis_object *object, uint_t flags);
nis_error nis_addmember(nis_name member, nis_name group);
nis_result *nis_checkpoint(nis_name dirname);
nis_object *nis_clone_object(const nis_object *src, nis_object *dest);
nis_error nis_creategroup(nis_name group, uint_t flags);
char *nis_data(char *);
void nis_destroy_object(nis_object *obj);
nis_error nis_destroygroup(nis_name group);
name_pos nis_dir_cmp(const nis_name n1, const nis_name n2);
nis_name nis_domain_of(const nis_name name);
log_result *nis_dump(nis_server *, nis_name, int (*)(nis_name, nis_object *, void *));
log_result *nis_dumplog(nis_server *, nis_name, uint32_t);
NIS_HASH_ITEM *nis_find_item(nis_name, NIS_HASH_TABLE *);
fd_result *nis_finddirectory(directory_obj *, nis_name);
nis_result *nis_first_entry(nis_name table_name);
void nis_free_binding(nis_bound_directory *);
void nis_free_request(ib_request *);
void nis_freenames(nis_name *namelist);
void nis_freeresult(nis_result *result);
void nis_freeservlist(nis_server **machines);
void nis_freetags(nis_tag *tags, int numtags);
nis_error nis_get_request(nis_name, nis_object *, netobj *, ib_request *);
void *nis_get_static_storage(struct nis_sdata *, uint_t, uint_t);
nis_name *nis_getnames(const nis_name name);
nis_server **nis_getservlist(nis_name dirname);
int nis_in_table(nis_name, NIS_HASH_TABLE *, int *);
int nis_insert_item(NIS_HASH_ITEM *, NIS_HASH_TABLE *);
void nis_insert_name(nis_name, NIS_HASH_TABLE *);
bool_t nis_ismember(nis_name principal, nis_name group);
nis_name nis_leaf_of(const nis_name name);
nis_name nis_leaf_of_r(const nis_name, char *, size_t);
void nis_lerror(nis_error status, char *label);
nis_result *nis_list(nis_name name, uint_t flags, int (*callback)(nis_name table_name, nis_object *object, void *userdata), void *userdata);
nis_name nis_local_directory(void);
nis_name nis_local_group(void);
nis_name nis_local_host(void);
nis_name nis_local_principal(void);
nis_result *nis_lookup(nis_name name, uint_t flags);
nis_result *nis_make_error(nis_error, uint32_t, uint32_t, uint32_t, uint32_t);
CLIENT *nis_make_rpchandle(nis_server *, int, rpcprog_t, rpcvers_t, uint_t, int, int);
nis_error nis_mkdir(nis_name dirname, nis_server *machine);
nis_result *nis_modify(nis_name name, nis_object *obj);
nis_result *nis_modify_entry(nis_name name, nis_object *object, uint_t flags);
nis_name nis_name_of(const nis_name name);
nis_result *nis_next_entry(nis_name table_name, netobj *cookie);
char *nis_old_data(char *);
void nis_perror(nis_error status, char *label);
void nis_ping(nis_name dirname, uint32_t utime, nis_object *dirobj);
void nis_print_directory(directory_obj *);
void nis_print_entry(entry_obj *);
void nis_print_group(group_obj *);
void nis_print_group_entry(nis_name group);
void nis_print_link(link_obj *);
void nis_print_object(const nis_object *obj);
void nis_print_rights(uint_t);
void nis_print_table(table_obj *);
nis_object *nis_read_obj(char *);
nis_result *nis_remove(nis_name name, nis_object *obj);
nis_result *nis_remove_entry(nis_name name, nis_object *object, uint_t flags);
NIS_HASH_ITEM *nis_remove_item(nis_name, NIS_HASH_TABLE *);
void nis_remove_name(nis_name, NIS_HASH_TABLE *);
nis_error nis_removemember(nis_name member, nis_name group);
nis_error nis_rmdir(nis_name dirname, nis_server *machine);
nis_error nis_servstate(nis_server *machine, nis_tag *tags, int numtags, nis_tag **result);
char *nis_sperrno(nis_error status);
char *nis_sperror(nis_error status, char *label);
char *nis_sperror_r(nis_error status, char *label, char *buf, int length);
nis_error nis_stats(nis_server *machine, nis_tag *tags, int numtags, nis_tag **result);
nis_error nis_verifygroup(nis_name group);
int nis_write_obj(char *, nis_object *);
enum clnt_stat nispasswd_authenticate_1(npd_request *, nispasswd_authresult *, CLIENT *);
bool_t nispasswd_authenticate_1_svc(npd_request *, nispasswd_authresult *, struct svc_req *);
int nispasswd_prog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
enum clnt_stat nispasswd_update_1(npd_update *, nispasswd_updresult *, CLIENT *);
bool_t nispasswd_update_1_svc(npd_update *, nispasswd_updresult *, struct svc_req *);
int nl(void);
char *nl_langinfo(nl_item item);
int nlist(const char *filename, struct nlist *nl);
char *nls_v0_d;
char *nls_v0_s;
char *nls_v2_d;
char *nls_v2_s;
struct t_call *nlsgetcall(int fildes);
char *nlsprovider(void);
int nlsrequest(int fildes, char *service_code);
int nocbreak(void);
int nocrmode(void);
int nodelay(WINDOW *win, bool bf);
int noecho(void);
int nonl(void);
void noqiflush(void);
int noraw(void);
struct sysent nosys_ent;
int notimeout(WINDOW *win, bool bf);
unsigned __int8 notrantab[256];
int nrand48(unsigned __int16 xi[3]);
int ns_name_skip(const uchar_t **, const uchar_t *);
int nsm_addr_program_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
void *nsmaddrproc1_null_1(void *, CLIENT *);
void *nsmaddrproc1_null_1_svc(void *, struct svc_req *);
reg1res *nsmaddrproc1_reg_1(reg1args *, CLIENT *);
reg1res *nsmaddrproc1_reg_1_svc(reg1args *, struct svc_req *);
unreg1res *nsmaddrproc1_unreg_1(unreg1args *, CLIENT *);
unreg1res *nsmaddrproc1_unreg_1_svc(unreg1args *, struct svc_req *);
nss_backend_finder_t *nss_default_finders;
void nss_delete(nss_db_root_t *);
void nss_endent(nss_db_root_t *, nss_db_initf_t, nss_getent_t *);
nss_status_t nss_getent(nss_db_root_t *, nss_db_initf_t, nss_getent_t *, void *getent_args);
nss_status_t nss_search(nss_db_root_t *, nss_db_initf_t, int search_fnum, void *search_args);
void nss_setent(nss_db_root_t *, nss_db_initf_t, nss_getent_t *);
int nstrpush;
uint32_t ntohl(uint32_t netlong);
uint16_t ntohs(uint16_t netshort);
int ntp_adjtime(struct timex *tptr);
int ntp_gettime(struct ntptimeval *tptr);
char *numcodes[];
char *numfnames[];
char *numnames[];
uchar_t obie_csr;
char omaptab[256];
int open(const char *path, int oflag, ...);
int open64(const char *, int, ...);
DIR *opendir(const char *dirname);
void openlog(const char *ident, int logopt, int facility);
void openpl();
void openvt();
struct bootops *ops;
char *optarg;
int opterr;
int optind;
int optopt;
int overlay(WINDOW *srcwin, WINDOW *dstwin);
int overwrite(WINDOW *srcwin, WINDOW *dstwin);
proc_t p0;
struct plock p0lock;
int p2close(FILE *fp[2]);
int p2open(const char *cmd, FILE *fp[2]);
int p32echochar(WINDOW *, chtype);
int p_online(processorid_t processorid, int flag);
char pagbuf[1024];
int pagf;
int pair_content(__int16 pair, __int16 *fgp, __int16 *bgp);
int pam_acct_mgmt(pam_handle_t *pamh, int flags);
int pam_authenticate(pam_handle_t *pamh, int flags);
int pam_chauthtok(pam_handle_t *pamh, const int intflags);
int pam_close_session(pam_handle_t *pamh, int flags);
int pam_end(pam_handle_t *pamh, int status);
int pam_get_data(const pam_handle_t *pamh, const char *module_data_name, const void **data);
int pam_get_item(const pam_handle_t *pamh, int item_type, void **item);
int pam_get_user(pam_handle_t *pamh, char **user, const char *prompt);
char *pam_getenv(pam_handle_t *pamh, const char *name);
char **pam_getenvlist(pam_handle_t *pamh);
int pam_open_session(pam_handle_t *pamh, int flags);
int pam_putenv(pam_handle_t *pamh, const char *name_value);
int pam_set_data(pam_handle_t *pamh, const char *module_data_name, void *data, void (*cleanup)(pam_handle_t *pamh, void *data, int pam_end_status));
int pam_set_item(pam_handle_t *pamh, int item_type, const void *item);
int pam_setcred(pam_handle_t *pamh, int flags);
int pam_sm_acct_mgmt(pam_handle_t *pamh, int flags, int argc, const char **argv);
int pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc, const char **argv);
int pam_sm_chauthtok(pam_handle_t *pamh, int flags, int argc, const char **argv);
int pam_sm_close_session(pam_handle_t *pamh, int flags, int argc, const char **argv);
int pam_sm_open_session(pam_handle_t *pamh, int flags, int argc, const char **argv);
int pam_sm_setcred(pam_handle_t *pamh, int flags, int argc, const char **argv);
int pam_start(const char *service, const char *user, const struct pam_conv *pam_conv, pam_handle_t **pamh);
const char *pam_strerror(pam_handle_t *pamh, int errnum);
PANEL *panel_above(PANEL *panel);
PANEL *panel_below(PANEL *panel);
int panel_hidden(PANEL *panel);
char *panel_userptr(PANEL *panel);
WINDOW *panel_window(PANEL *panel);
int pathconf(const char *path, int name);
char *pathfind(const char *path, const char *name, const char *mode);
int pause(void);
pc_cluster32_t pc_alloccluster(struct pcfs *, int);
void pc_badfs(struct pcfs *);
int pc_balloc(struct pcnode *, daddr_t, int, daddr_t *);
int pc_bfree(struct pcnode *, pc_cluster32_t);
int pc_blkatoff(struct pcnode *, int offset, struct buf **, struct pcdir **);
int pc_bmap(struct pcnode *, daddr_t, daddr_t *, uint_t *);
int pc_direnter(struct pcnode *, char *, struct vattr *, struct pcnode **);
int pc_dirlook(struct pcnode *, char *, struct pcnode **);
int pc_dirremove(struct pcnode *, char *, struct vnode *, enum vtype);
void pc_diskchanged(struct pcfs *);
int pc_fat_is_changed(struct pcfs *fsp, pc_cluster32_t bn);
int pc_fileclsize(struct pcfs *, pc_cluster32_t);
int pc_freeclusters(struct pcfs *);
int pc_getfat(struct pcfs *);
struct pcnode *pc_getnode(struct pcfs *, daddr_t, int, struct pcdir *);
void pc_init(void);
void pc_invalfat(struct pcfs *);
int pc_lockfs(struct pcfs *, int, int);
void pc_mark_acc(struct pcnode *);
void pc_mark_fat_updated(struct pcfs *fsp, pc_cluster32_t cn);
void pc_mark_irrecov(struct pcfs *);
void pc_mark_mod(struct pcnode *);
int pc_nodesync(struct pcnode *);
int pc_nodeupdate(struct pcnode *);
void pc_rele(struct pcnode *);
int pc_rename(struct pcnode *, struct pcnode *, char *, char *);
void pc_setcluster(struct pcfs *, pc_cluster32_t, pc_cluster32_t);
int pc_syncfat(struct pcfs *);
int pc_truncate(struct pcnode *, int);
void pc_unlockfs(struct pcfs *);
int pc_verify(struct pcfs *);
struct pchead pcdhead[];
struct pchead pcfhead[];
struct vnodeops pcfs_dvnodeops;
struct vnodeops pcfs_fvnodeops;
int pcfs_putapage(struct vnode *, page_t *, u_offset_t *, size_t *, int, struct cred *);
int pcfsdebuglevel;
int pclose(FILE *stream);
int pcsample(uintptr_t samples[], int nsamples);
pctx_t *pctx_capture(pid_t pid, void *arg, int verbose, pctx_errfn_t *errfn);
pctx_t *pctx_create(const char *filename, char *const *argv, void *arg, int verbose, pctx_errfn_t *errfn);
void pctx_release(pctx_t *pctx);
int pctx_run(pctx_t *pctx, uint_t sample, uint_t nsamples, int (*tick)(pctx_t *, pid_t, id_t, void *));
int pctx_set_events(pctx_t *pctx, ...);
int pechowchar(WINDOW *, chtype);
void perror(const char *s);
int pfmt(FILE *stream, int flags, char *format, ...);
struct proc_graph pgraph;
struct memlist *phys_install;
struct pid pid0;
int pipe(int fildes[2]);
char *pkgdir;
int pkginfo(struct pkginfo *, char *, ...);
int pkgnmchk(char *, char *, int);
char *pkgparam(char *, char *);
int plock(int op);
struct pmaplist *pmap_getmaps(struct sockaddr_in *);
ushort_t pmap_getport(struct sockaddr_in *, rpcprog_t, rpcvers_t, uint_t);
enum clnt_stat pmap_rmtcall(struct sockaddr_in *, rpcprog_t, rpcvers_t, rpcproc_t, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval, rpcport_t *);
bool_t pmap_set(rpcprog_t, rpcvers_t, rpcprot_t, unsigned __int16 port);
bool_t pmap_unset(rpcprog_t, rpcvers_t);
rmtcallres *pmapproc_callit_2();
pmaplist_ptr *pmapproc_dump_2();
rpcport_t *pmapproc_getport_2();
void *pmapproc_null_2();
bool_t *pmapproc_set_2();
bool_t *pmapproc_unset_2();
int pmapprog_2_freeresult();
void pn_alloc(struct pathname *);
void pn_fixslash(struct pathname *);
void pn_free(struct pathname *);
int pn_get(char *, enum uio_seg, struct pathname *);
int pn_getcomponent(struct pathname *, char *);
int pn_getsymlink(vnode_t *, struct pathname *, cred_t *);
int pn_insert(struct pathname *, struct pathname *);
int pn_set(struct pathname *, char *);
void pn_setlast(struct pathname *);
void pn_skipslash(struct pathname *);
int pnoutrefresh(WINDOW *pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
void point(__int16 x, __int16 y);
int poll(struct pollfd fds[], nfds_t nfds, int timeout);
FILE *popen(const char *command, const char *mode);
int pos_form_cursor(FORM *form);
int pos_menu_cursor(MENU *menu);
int post_form(FORM *form);
int post_menu(MENU *menu);
double pow(double x, double y);
struct stc_defaults_t ppc_initmodes;
proc_t *practive;
ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
ssize_t pread64(int, void *, size_t, off64_t);
int prefresh(WINDOW *pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
FN_ext_searchlist_t *prelim_fn_attr_ext_search(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_search_control_t *control, const FN_search_filter_t *filter, FN_status_t *status);
FN_searchlist_t *prelim_fn_attr_search(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_attrset_t *match_attrs, unsigned int return_ref, const FN_attrset_t *return_attr_id, FN_status_t *status);
FN_composite_name_t *prelim_fn_ctx_equivalent_name(FN_ctx_t *ctx, const FN_composite_name_t *name, const FN_string_t *leading_name, FN_status_t *status);
void prelim_fn_ext_searchlist_destroy(FN_ext_searchlist_t *esl);
FN_composite_name_t *prelim_fn_ext_searchlist_next(FN_ext_searchlist_t *esl, FN_ref_t **returned_ref, FN_attrset_t **returned_attrs, unsigned int *relative, FN_status_t *status);
FN_search_control_t *prelim_fn_search_control_assign(FN_search_control_t *dst, const FN_search_control_t *src);
FN_search_control_t *prelim_fn_search_control_copy(const FN_search_control_t *scontrol);
FN_search_control_t *prelim_fn_search_control_create(unsigned int scope, unsigned int follow_links, unsigned int max_names, unsigned int return_ref, const FN_attrset_t *return_attr_ids, unsigned int *status);
void prelim_fn_search_control_destroy(FN_search_control_t *scontrol);
unsigned int prelim_fn_search_control_follow_links(const FN_search_control_t *scontrol);
unsigned int prelim_fn_search_control_max_names(const FN_search_control_t *scontrol);
const FN_attrset_t *prelim_fn_search_control_return_attr_ids(const FN_search_control_t *scontrol);
unsigned int prelim_fn_search_control_return_ref(const FN_search_control_t *scontrol);
unsigned int prelim_fn_search_control_scope(const FN_search_control_t *scontrol);
const void **prelim_fn_search_filter_arguments(const FN_search_filter_t *sfilter, size_t *number_of_arguments);
FN_search_filter_t *prelim_fn_search_filter_assign(FN_search_filter_t *dst, const FN_search_filter_t *src);
FN_search_filter_t *prelim_fn_search_filter_copy(const FN_search_filter_t *sfilter);
FN_search_filter_t *prelim_fn_search_filter_create(unsigned int *status, const unsigned __int8 *estr, ...);
void prelim_fn_search_filter_destroy(FN_search_filter_t *sfilter);
const unsigned __int8 *prelim_fn_search_filter_expression(const FN_search_filter_t *sfilter);
void prelim_fn_searchlist_destroy(FN_searchlist_t *sl);
FN_string_t *prelim_fn_searchlist_next(FN_searchlist_t *sl, FN_ref_t **returned_ref, FN_attrset_t **returned_attrs, FN_status_t *status);
struct modctl_list *primaries;
int printf(const char *format, ...);
int printw(char *fmt, ...);
int priocntl(idtype_t idtype, id_t id, int cmd, ...);
int priocntlset(procset_t *psp, int cmd, ...);
proc_t *proc_fsflush;
proc_t *proc_init;
proc_t *proc_pageout;
proc_t *proc_sched;
int processor_bind(idtype_t idtype, id_t id, processorid_t processorid, processorid_t *obind);
int processor_info(processorid_t processorid, processor_info_t *infop);
void profil(unsigned __int16 *buff, unsigned int bufsiz, unsigned int offset, unsigned int scale);
int prog_istermios;
ps_err_e ps_kill(struct ps_prochandle *ph, int signum);
ps_err_e ps_lcontinue(struct ps_prochandle *ph, lwpid_t lwpid);
ps_err_e ps_lgetLDT(struct ps_prochandle *ph, lwpid_t lwpid, struct ssd *ldt);
ps_err_e ps_lgetfpregs(struct ps_prochandle *ph, lwpid_t lid, prfpregset_t *fpregs);
ps_err_e ps_lgetregs(struct ps_prochandle *ph, lwpid_t lid, prgregset_t gregset);
ps_err_e ps_lgetxregs(struct ps_prochandle *ph, lwpid_t lid, caddr_t xregset);
ps_err_e ps_lgetxregsize(struct ps_prochandle *ph, lwpid_t lid, int *xregsize);
ps_err_e ps_lrolltoaddr(struct ps_prochandle *ph, lwpid_t lwpid, psaddr_t go_addr, psaddr_t stop_addr);
ps_err_e ps_lsetfpregs(struct ps_prochandle *ph, lwpid_t lid, prfpregset_t *fpregs);
ps_err_e ps_lsetregs(struct ps_prochandle *ph, lwpid_t lid, prgregset_t gregset);
ps_err_e ps_lsetxregs(struct ps_prochandle *ph, lwpid_t lid, caddr_t xregset);
ps_err_e ps_lstop(struct ps_prochandle *ph, lwpid_t lwpid);
ps_err_e ps_pauxv(struct ps_prochandle *ph, const auxv_t **auxp);
ps_err_e ps_pcontinue(struct ps_prochandle *ph);
ps_err_e ps_pdmodel(struct ps_prochandle *ph, int *data_model);
ps_err_e ps_pdread(struct ps_prochandle *ph, psaddr_t addr, void *buf, size_t size);
ps_err_e ps_pdwrite(struct ps_prochandle *ph, psaddr_t addr, const void *buf, size_t size);
ps_err_e ps_pglobal_lookup(struct ps_prochandle *ph, const char *object_name, const char *sym_name, psaddr_t *sym_addr);
ps_err_e ps_pglobal_sym(struct ps_prochandle *ph, const char *object_name, const char *sym_name, ps_sym_t *sym);
void ps_plog(const char *fmt);
ps_err_e ps_pread(struct ps_prochandle *ph, psaddr_t addr, void *buf, size_t size);
ps_err_e ps_pstop(struct ps_prochandle *ph);
ps_err_e ps_ptread(struct ps_prochandle *ph, psaddr_t addr, void *buf, size_t size);
ps_err_e ps_ptwrite(struct ps_prochandle *ph, psaddr_t addr, const void *buf, size_t size);
ps_err_e ps_pwrite(struct ps_prochandle *ph, psaddr_t addr, const void *buf, size_t size);
int pset_assign(psetid_t pset, processorid_t cpu, psetid_t *opset);
int pset_bind(psetid_t pset, idtype_t idtype, id_t id, psetid_t *opset);
int pset_create(psetid_t *newpset);
int pset_destroy(psetid_t pset);
int pset_info(psetid_t pset, int *type, uint_t *numcpus, processorid_t *cpulist);
void psiginfo(siginfo_t *pinfo, char *s);
void psignal(int sig, const char *s);
int pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void));
int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);
int pthread_attr_getguardsize(const pthread_attr_t *attr, size_t *guardsize);
int pthread_attr_getinheritsched(const pthread_attr_t *attr, int *inheritsched);
int pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param);
int pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *policy);
int pthread_attr_getscope(const pthread_attr_t *attr, int *contentionscope);
int pthread_attr_getstackaddr(const pthread_attr_t *attr, void **stackaddr);
int pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *stacksize);
int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched);
int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
int pthread_attr_setscope(pthread_attr_t *attr, int contentionscope);
int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_cancel(pthread_t target_thread);
void pthread_cleanup_pop(int execute);
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime);
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int pthread_condattr_destroy(pthread_condattr_t *attr);
int pthread_condattr_getpshared(const pthread_condattr_t *attr, int *pshared);
int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared);
int pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *);
int pthread_detach(pthread_t thread);
int pthread_equal(pthread_t t1, pthread_t t2);
void pthread_exit(void *value_ptr);
int pthread_getconcurrency(void);
int pthread_getschedparam(pthread_t thread, int *policy, struct sched_param *param);
void *pthread_getspecific(pthread_key_t key);
int pthread_join(pthread_t thread, void **value_ptr);
int pthread_key_create(pthread_key_t *, void (*)(void *));
int pthread_key_delete(pthread_key_t key);
int pthread_kill(pthread_t thread, int sig);
int pthread_mutex_consistent_np(pthread_mutex_t *mutex);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_getprioceiling(const pthread_mutex_t *mutex, int *prioceiling);
int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_setprioceiling(pthread_mutex_t *mutex, int prioceiling, int *old_ceiling);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *attr, int *prioceiling);
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr, int *protocol);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t *attr, int *pshared);
int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t *attr, int *robustness);
int pthread_mutexattr_gettype(pthread_mutexattr_t *attr, int *type);
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int prioceiling, int *oldceiling);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr, int protocol);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *attr, int robustness);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);
int pthread_once(pthread_once_t *, void (*)(void));
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr);
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr, int *pshared);
int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);
pthread_t pthread_self(void);
int pthread_setcancelstate(int state, int *oldstate);
int pthread_setcanceltype(int type, int *oldtype);
int pthread_setconcurrency(int new_level);
int pthread_setschedparam(pthread_t, int, const struct sched_param *);
int pthread_setspecific(pthread_key_t key, const void *value);
int pthread_sigmask(int how, const sigset_t *set, sigset_t *oset);
void pthread_testcancel();
unsigned int ptob(unsigned int);
int ptrace(int request, pid_t pid, int addr, int data);
char *ptsname(int fildes);
int putacct(idtype_t, id_t, void *, size_t, int);
int putc(int c, FILE *stream);
int putc_unlocked(int c, FILE *stream);
int putchar(int c);
int putchar_unlocked(int c);
int putenv(char *string);
int putmntent(FILE *iop, struct mnttab *mp);
int putmsg(int fildes, const struct strbuf *ctlptr, const struct strbuf *dataptr, int flags);
int putp(char *str);
int putpmsg(int fildes, const struct strbuf *ctlptr, const struct strbuf *dataptr, int band, int flags);
int putpwent(const struct passwd *p, FILE *f);
int puts(const char *s);
int putspent(const struct spwd *p, FILE *fp);
struct utmp *pututline(const struct utmp *utmp);
struct utmpx *pututxline(const struct utmpx *utmpx);
int putw(int w, FILE *stream);
wint_t putwc(wchar_t wc, FILE *stream);
wint_t putwchar(wchar_t wc);
int putwin(WINDOW *win, FILE *filep);
int putws(wchar_t *s);
ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
ssize_t pwrite64(int, const void *, size_t, off64_t);
char *qeconvert(quadruple *value, int ndigit, int *decpt, int *sign, char *buf);
char *qecvt(long double, int, int *, int *);
char *qfconvert(quadruple *value, int ndigit, int *decpt, int *sign, char *buf);
char *qfcvt(long double, int, int *, int *);
char *qgconvert(quadruple *value, int ndigit, int trailing, char *buf);
char *qgcvt(long double, int, char *);
void qiflush(void);
void qsort(void *base, size_t nel, size_t width, int (*compar)(const void *, const void *));
void quadruple_to_decimal(quadruple *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
void rac_drop(CLIENT *cl, void *h);
enum clnt_stat rac_poll(CLIENT *cl, void *h);
enum clnt_stat rac_recv(CLIENT *cl, void *h);
void *rac_send(CLIENT *cl, rpcproc_t proc, xdrproc_t xargs, void *argsp, xdrproc_t xresults, void *resultsp, struct timeval timeout);
struct rpc_err rac_senderr;
int raise(int sig);
int rand(void);
int rand_r(unsigned int *seed);
int random(void);
int raw(void);
volatile rce_interface_t *rce_ops;
int rcm_alloc_handle(char *, uint_t, void *, rcm_handle_t **);
int rcm_append_info(rcm_info_t **, rcm_info_t *);
int rcm_exec_cmd(char *);
int rcm_free_handle(rcm_handle_t *);
void rcm_free_info(rcm_info_t *);
int rcm_get_info(rcm_handle_t *, char *, uint_t, rcm_info_t **);
const char *rcm_info_info(rcm_info_tuple_t *);
const char *rcm_info_modname(rcm_info_tuple_t *);
rcm_info_tuple_t *rcm_info_next(rcm_info_t *, rcm_info_tuple_t *);
pid_t rcm_info_pid(rcm_info_tuple_t *);
const char *rcm_info_rsrc(rcm_info_tuple_t *);
int rcm_info_seqnum(rcm_info_tuple_t *);
int rcm_info_state(rcm_info_tuple_t *);
int rcm_notify_online(rcm_handle_t *, char *, uint_t, rcm_info_t **);
int rcm_notify_remove(rcm_handle_t *, char *, uint_t, rcm_info_t **);
int rcm_notify_resume(rcm_handle_t *, char *, uint_t, rcm_info_t **);
int rcm_register_interest(rcm_handle_t *, char *, uint_t, rcm_info_t **);
int rcm_request_offline(rcm_handle_t *, char *, uint_t, rcm_info_t **);
int rcm_request_suspend(rcm_handle_t *, char *, uint_t, timespec_t *, rcm_info_t **);
int rcm_unregister_interest(rcm_handle_t *, char *, uint_t);
int rcmd(char **ahost, unsigned __int16 inport, const char *luser, const char *ruser, const char *cmd, int *fd2p);
int rcmd_af(char **ahost, unsigned __int16 inport, const char *luser, const char *ruser, const char *cmd, int *fd2p, int af);
void rd_delete(rd_agent_t *);
char *rd_errstr(rd_err_e rderr);
rd_err_e rd_event_addr(rd_agent_t *, rd_event_e, rd_notify_t *);
rd_err_e rd_event_enable(rd_agent_t *, int);
rd_err_e rd_event_getmsg(rd_agent_t *, rd_event_msg_t *);
rd_err_e rd_init(int);
rd_err_e rd_loadobj_iter(rd_agent_t *, rl_iter_f *, void *);
void rd_log(const int);
rd_agent_t *rd_new(struct ps_prochandle *);
rd_err_e rd_objpad_enable(struct rd_agent *, size_t);
rd_err_e rd_plt_resolution(rd_agent_t *, psaddr_t, lwpid_t, psaddr_t, rd_plt_info_t *);
rd_err_e rd_reset(struct rd_agent *);
char *re_comp(const char *string);
int re_exec(const char *string);
ssize_t read(int fildes, void *buf, size_t nbyte);
int read_dacf_binding_file();
int read_vtoc(int fd, struct vtoc *vtoc);
struct dirent *readdir(DIR *dirp);
struct dirent64 *readdir64(DIR *);
int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
int readlink(const char *path, char *buf, size_t bufsiz);
ssize_t readv(int fildes, const struct iovec *iov, int iovcnt);
void *realloc(void *ptr, size_t size);
char *realpath(const char *file_name, char *resolved_name);
int reboot(int howto, char *bootargs);
ssize_t recv(int socket, void *buffer, size_t length, int flags);
ssize_t recvfrom(int socket, void *buffer, size_t length, int flags, struct sockaddr *address, socklen_t *address_len);
ssize_t recvmsg(int socket, struct msghdr *message, int flags);
int redrawwin(WINDOW *win);
int refresh(void);
u_long reg_ci_callback();
char *regcmp(const char *string1, ...);
int regcomp(regex_t *preg, const char *pattern, int cflags);
int regerrno;
size_t regerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size);
char *regex(const char *re, const char *subject, ...);
int regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t pmatch[], int eflags);
void regfree(regex_t *preg);
int registerrpc(rpcprog_t, rpcvers_t, rpcproc_t, char *(*)(), xdrproc_t, xdrproc_t);
int reglength;
double remainder(double x, double y);
int remove(const char *path);
void remque(struct qelem *elem);
int rename(const char *old, const char *new);
int replace_panel(PANEL *panel, WINDOW *win);
int request_mouse_pos(void);
void res_close(void);
void res_freeupdrec(ns_updrec *rrecp);
int res_init(void);
int res_mkquery(int op, const char *dname, int c_class, int type, const char *data, int datalen, struct rrec *newrr, uchar_t *buf, int buflen);
int res_mkupdate(ns_updrec **rrecp_in, unsigned __int8 *buf, int length);
ns_updrec *res_mkupdrec(int section, const char *dname, uint_t c_class, uint_t type, uint_t ttl);
int res_query(const char *dname, int c_class, int type, uchar_t *answer, int anslen);
int res_querydomain(const char *, const char *, int, int, uchar_t *, int);
int res_search(const char *dname, int c_class, int type, uchar_t *answer, int anslen);
int res_send(uchar_t *msg, int msglen, uchar_t *answer, int anslen);
int res_update(ns_updrec *rrecp_in);
struct reservdev **reservdev(void);
int reset_prog_mode(void);
int reset_shell_mode(void);
void resetmnttab(FILE *fp);
int resetty(void);
int resolvepath(const char *path, char *buf, size_t bufsiz);
int restartterm(char *term, int fildes, int *errret);
void rewind(FILE *stream);
void rewinddir(DIR *dirp);
int rexec(char **ahost, unsigned __int16 inport, const char *user, const char *passwd, const char *cmd, int *fd2p);
int rexec_af(char **ahost, unsigned __int16 inport, const char *user, const char *passwd, const char *cmd, int *fd2p, int af);
char *rindex(const char *s, int c);
double rint(double x);
int ripoffline(int line, int (*init)(WINDOW *, int));
int rmdir(const char *path);
int rmdirp(char *dir, char *dir1);
int rnusers(char *host);
union sunromvec *romp;
enum clnt_stat rpc_broadcast(const rpcprog_t, const rpcvers_t, const rpcproc_t, const xdrproc_t, caddr_t, const xdrproc_t, caddr_t, const resultproc_t, const char *);
enum clnt_stat rpc_broadcast_exp(const rpcprog_t, const rpcvers_t, const rpcproc_t, const xdrproc_t, caddr_t, const xdrproc_t, caddr_t, const resultproc_t, const int, const int, const char *);
enum clnt_stat rpc_call(const char *, const rpcprog_t, const rpcvers_t, const rpcproc_t, const xdrproc_t, const char *, const xdrproc_t, char *, const char *);
struct rpc_err rpc_callerr;
bool_t rpc_control(int op, void *info);
struct rpc_createerr rpc_createerr;
mutex_t rpc_door_mutex;
bool_t rpc_doorcalls_init();
bool_t rpc_gss_get_error(rpc_gss_error_t *error);
char **rpc_gss_get_mech_info(char *mech, rpc_gss_service_t *service);
char **rpc_gss_get_mechanisms();
bool_t rpc_gss_get_principal_name(rpc_gss_principal_t *principal, char *mech, char *name, char *node, char *domain);
bool_t rpc_gss_get_versions(u_int *vers_hi, u_int *vers_lo);
bool_t rpc_gss_getcred(struct svc_req *req, rpc_gss_rawcred_t **rcred, rpc_gss_ucred_t **ucred, void **cookie);
bool_t rpc_gss_is_installed(char *mech);
int rpc_gss_max_data_length(AUTH *handle, int max_tp_unit_len);
bool_t rpc_gss_mech_to_oid(char *mech, rpc_gss_OID *oid);
bool_t rpc_gss_qop_to_num(char *qop, char *mech, u_int *num);
AUTH *rpc_gss_seccreate(CLIENT *clnt, char *principal, char *mechanism, rpc_gss_service_t service_type, char *qop, rpc_gss_options_req_t *options_req, rpc_gss_options_ret_t *options_ret);
bool_t rpc_gss_set_callback(struct rpc_gss_callback_t *cb);
bool_t rpc_gss_set_defaults(AUTH *auth, rpc_gss_service_t service, char *qop);
bool_t rpc_gss_set_svc_name(char *principal, char *mechanism, u_int req_time, u_int program, u_int version);
int rpc_gss_svc_max_data_length(struct svc_req *req, int max_tp_unit_len);
bool_t rpc_reg(const rpcprog_t, const rpcvers_t, const rpcproc_t, char *(*)(char *), const xdrproc_t, const xdrproc_t, const char *);
bool_t rpcb_getaddr(const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf, struct netbuf *ssvcaddr, const char *host);
struct rpcblist *rpcb_getmaps(const struct netconfig *nnetconf, const char *host);
bool_t rpcb_gettime(const char *host, time_t *timep);
enum clnt_stat rpcb_rmtcall(const struct netconfig *netconf, const char *host, const rpcprog_t prognum, const rpcvers_t versnum, const rpcproc_t procnum, const xdrproc_t inproc, const caddr_t in, const xdrproc_t outproc, caddr_t out, const struct timeval tout, struct netbuf *svcaddr);
bool_t rpcb_set(const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf, const struct netbuf *svcaddr);
char *rpcb_taddr2uaddr(struct netconfig *, struct netbuf *);
struct netbuf *rpcb_uaddr2taddr(struct netconfig *, char *);
bool_t rpcb_unset(const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf);
rpcb_rmtcallres *rpcbproc_bcast_4();
rpcb_rmtcallres *rpcbproc_callit_3();
rpcblist_ptr *rpcbproc_dump_3();
rpcblist_ptr *rpcbproc_dump_4();
char **rpcbproc_getaddr_3();
char **rpcbproc_getaddr_4();
rpcb_entry_list_ptr *rpcbproc_getaddrlist_4();
rpcb_stat *rpcbproc_getstat_4();
u_int *rpcbproc_gettime_3();
u_int *rpcbproc_gettime_4();
char **rpcbproc_getversaddr_4();
rpcb_rmtcallres *rpcbproc_indirect_4();
bool_t *rpcbproc_set_3();
bool_t *rpcbproc_set_4();
char **rpcbproc_taddr2uaddr_3();
char **rpcbproc_taddr2uaddr_4();
struct netbuf *rpcbproc_uaddr2taddr_3();
struct netbuf *rpcbproc_uaddr2taddr_4();
bool_t *rpcbproc_unset_3();
bool_t *rpcbproc_unset_4();
int rpcbprog_3_freeresult();
int rpcbprog_4_freeresult();
rpc_doorcalls_t rpcdrc;
getquota_rslt *rquotaproc_getactivequota_1(getquota_args *, CLIENT *);
getquota_rslt *rquotaproc_getactivequota_1_svc(getquota_args *, struct svc_req *);
getquota_rslt *rquotaproc_getquota_1(getquota_args *, CLIENT *);
getquota_rslt *rquotaproc_getquota_1_svc(getquota_args *, struct svc_req *);
int rquotaprog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
int rresvport(int *port);
int rresvport_af(int *port, int af);
enum clnt_stat rstat(char *host, struct statstime *statp);
u_int *rstatproc_havedisk_3(void *, CLIENT *);
u_int *rstatproc_havedisk_3_svc(void *, struct svc_req *);
u_int *rstatproc_havedisk_4(void *, CLIENT *);
u_int *rstatproc_havedisk_4_svc(void *, struct svc_req *);
statstime *rstatproc_stats_3(void *, CLIENT *);
statstime *rstatproc_stats_3_svc(void *, struct svc_req *);
statsvar *rstatproc_stats_4(void *, CLIENT *);
statsvar *rstatproc_stats_4_svc(void *, struct svc_req *);
int rstatprog_3_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
int rstatprog_4_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
int run_crypt(int, char *, unsigned int, int *);
int run_setkey(int *, const char *);
int ruserok(const char *rhost, int suser, const char *ruser, const char *luser);
enum clnt_stat rusers(char *host, struct utmpidlearr *up);
utmp_array *rusersproc_allnames_3(void *, CLIENT *);
utmp_array *rusersproc_allnames_3_svc(void *, struct svc_req *);
utmp_array *rusersproc_names_3(void *, CLIENT *);
utmp_array *rusersproc_names_3_svc(void *, struct svc_req *);
int *rusersproc_num_3(void *, CLIENT *);
int *rusersproc_num_3_svc(void *, struct svc_req *);
int rusersprog_3_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
int rw_rdlock(rwlock_t *rwlp);
int rw_tryrdlock(rwlock_t *rwlp);
int rw_trywrlock(rwlock_t *rwlp);
int rw_unlock(rwlock_t *rwlp);
int rw_wrlock(rwlock_t *rwlp);
enum clnt_stat rwall(char *host, char *msg);
int rwlock_destroy(rwlock_t *rwlp);
int rwlock_init(rwlock_t *rwlp, int type, void *arg);
int savetty(void);
void *sbrk(intptr_t incr);
double scalb(double x, double n);
double scalbn(double x, int n);
int scale_form(FORM *form, int *rows, int *cols);
int scale_menu(MENU *, int *, int *);
int scale_window(MENU *menu, int *rows, int *cols);
int scanf(const char *format, ...);
int scanw(char *fmt, ...);
int sched_get_priority_max(int policy);
int sched_get_priority_min(int policy);
int sched_getparam(pid_t pid, struct sched_param *param);
int sched_getscheduler(pid_t pid);
int sched_rr_get_interval(pid_t pid, struct timespec *interval);
int sched_setparam(pid_t pid, const struct sched_param *param);
int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);
int sched_yield(void);
void schedctl_exit(void);
schedctl_t *schedctl_init(void);
schedctl_t *schedctl_lookup(void);
void schedctl_start(schedctl_t *ptr);
void schedctl_stop(schedctl_t *ptr);
int scr_dump(char *filename);
int scr_init(char *filename);
int scr_restore(char *filename);
int scr_set(char *filename);
int scrl(int n);
int scroll(WINDOW *win);
int scrollok(WINDOW *win, bool bf);
void scsi_watch_fini();
void scsi_watch_init();
opaque_t scsi_watch_request_submit(struct scsi_device *devp, int interval, int sense_length, int (*callback)(), caddr_t cb_arg);
int scsi_watch_request_terminate(opaque_t token, int flags);
void scsi_watch_resume(opaque_t token);
void scsi_watch_suspend(opaque_t token);
char *seconvert(single *value, int ndigit, int *decpt, int *sign, char *buf);
unsigned __int16 *seed48(unsigned __int16 seed16v[3]);
void seekdir(DIR *dirp, int loc);
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *errorfds, struct timeval *timeout);
int sem_close(sem_t *sem);
int sem_destroy(sem_t *sem);
int sem_getvalue(sem_t *sem, int *sval);
int sem_init(sem_t *sem, int pshared, unsigned int value);
sem_t *sem_open(const char *name, int oflag, ...);
int sem_post(sem_t *sem);
int sem_trywait(sem_t *sem);
int sem_unlink(const char *name);
int sem_wait(sem_t *sem);
int sema_destroy(sema_t *sp);
int sema_init(sema_t *sp, unsigned int count, int type, void *arg);
int sema_post(sema_t *sp);
int sema_trywait(sema_t *sp);
int sema_wait(sema_t *sp);
int semctl(int semid, int semnum, int cmd, ...);
int semget(key_t key, int nsems, int semflg);
int semop(int semid, struct sembuf *sops, size_t nsops);
ssize_t send(int socket, const void *buffer, size_t length, int flags);
ssize_t sendmsg(int socket, const struct msghdr *message, int flags);
ssize_t sendto(int socket, const void *message, size_t length, int flags, const struct sockaddr *dest_addr, socklen_t dest_len);
int set_current_field(FORM *form, FIELD *field);
int set_current_item(MENU *menu, ITEM *item);
int set_field_back(FIELD *, chtype);
int set_field_buffer(FIELD *field, int buf, char *value);
int set_field_fore(FIELD *, chtype);
int set_field_init(FORM *form, void (*func)(FORM *));
int set_field_just(FIELD *field, int justification);
int set_field_opts(FIELD *field, OPTIONS opts);
int set_field_pad(FIELD *field, int pad);
int set_field_status(FIELD *field, int status);
int set_field_term(FORM *form, void (*func)(FORM *));
int set_field_type(FIELD *field, FIELDTYPE *type, ...);
int set_field_userptr(FIELD *field, char *ptr);
int set_fieldtype_arg(FIELDTYPE *fieldtype, char *(*mak_arg)(va_list *), char *(*copy_arg)(char *), void (*free_arg)(char *));
int set_fieldtype_choice(FIELDTYPE *, PTF_int, PTF_int);
int set_form_fields(FORM *form, FIELD **field);
int set_form_init(FORM *form, void (*func)(FORM *));
int set_form_opts(FORM *form, OPTIONS opts);
int set_form_page(FORM *form, int page);
int set_form_sub(FORM *form, WINDOW *sub);
int set_form_term(FORM *form, void (*func)(FORM *));
int set_form_userptr(FORM *form, char *ptr);
int set_form_win(FORM *form, WINDOW *win);
int set_item_init(MENU *, PTF_void);
int set_item_opts(ITEM *item, OPTIONS opts);
int set_item_term(MENU *, PTF_void);
int set_item_userptr(ITEM *item, char *userptr);
int set_item_value(ITEM *item, int bool);
int set_max_field(FIELD *field, int max);
int set_menu_back(MENU *, chtype);
int set_menu_fore(MENU *, chtype);
int set_menu_format(MENU *menu, int rows, int cols);
int set_menu_grey(MENU *, chtype);
int set_menu_init(MENU *, PTF_void);
int set_menu_items(MENU *menu, ITEM **items);
int set_menu_mark(MENU *menu, char *mark);
int set_menu_opts(MENU *menu, OPTIONS opts);
int set_menu_pad(MENU *menu, int pad);
int set_menu_pattern(MENU *menu, char *pat);
int set_menu_sub(MENU *menu, WINDOW *sub);
int set_menu_term(MENU *, PTF_void);
int set_menu_userptr(MENU *menu, char *userptr);
int set_menu_win(MENU *menu, WINDOW *win);
int set_new_page(FIELD *field, int bool);
int set_panel_userptr(PANEL *panel, char *ptr);
int set_top_row(MENU *menu, int row);
void setac(void);
void setauclass(void);
int setauclassfile(char *);
int setaudit(struct auditinfo *info);
int setaudit_addr(struct auditinfo_addr *info, int length);
void setauevent(void);
int setaueventfile(char *);
int setauid(au_id_t *auid);
void setauthattr(void);
void setauuser(void);
int setauuserfile(char *);
void setbuf(FILE *stream, char *buf);
void setbuffer(FILE *iop, char *abuf, size_t asize);
char *setcat(const char *catalog);
int setcontext(const ucontext_t *ucp);
SCREEN *setcurscreen(SCREEN *new);
int setcurterm(TERMINAL *nterm);
void setdaent();
void setdafile();
void setdmapent();
void setdmapfile();
int setegid(gid_t egid);
int seteuid(uid_t euid);
void setexecattr(void);
int setgid(gid_t gid);
void setgrent(void);
int setgroups(int ngroups, const gid_t *grouplist);
void sethostent(int stayopen);
int sethostname(char *name, int namelen);
int setitimer(int which, const struct itimerval *value, struct itimerval *ovalue);
int setjmp(jmp_buf env);
int setkernstate(au_mask_t *);
void setkey(const char *key);
int setlabel(const char *label);
int setlinebuf(FILE *iop);
char *setlocale(int category, const char *locale);
int setlogmask(int maskpri);
void *setnetconfig(void);
void setnetent(int stayopen);
int setnetgrent(const char *netgroup);
void *setnetpath(void);
int setpgid(pid_t pid, pid_t pgid);
pid_t setpgrp(void);
int setpriority(int which, id_t who, int priority);
void setprofattr(void);
void setprotoent(int stayopen);
void setpwent(void);
int setregid(gid_t rgid, gid_t egid);
int setreuid(uid_t ruid, uid_t euid);
int setrlimit(int resource, const struct rlimit *rlp);
int setrlimit64(int, const struct rlimit64 *);
void setrpcent(const int stayopen);
int setscrreg(int top, int bot);
void setservent(int stayopen);
pid_t setsid(void);
int setsockopt(int socket, int level, int option_name, const void *option_value, socklen_t option_len);
void setspent(void);
char *setstate(const char *state);
int setsyx(int y, int x);
taskid_t settaskid(projid_t, uint_t);
int setterm(char *term);
int settimeofday(struct timeval *tp, void *);
int setuid(uid_t uid);
int setupterm(char *term, int fildes, int *errret);
void setuserattr(void);
int setuseraudit(au_id_t, au_mask_t *);
void setutent(void);
void setutxent(void);
int setvbuf(FILE *stream, char *buf, int type, size_t size);
void setzssoft(void);
char *sfconvert(single *value, int ndigit, int *decpt, int *sign, char *buf);
char *sgconvert(single *value, int ndigit, int trailing, char *buf);
int shell_istermios;
int shm_open(const char *name, int oflag, mode_t mode);
int shm_unlink(const char *name);
void *shmat(int shmid, const void *shmaddr, int shmflg);
int shmctl(int shmid, int cmd, struct shmid_ds *buf);
int shmdt(const void *shmaddr);
int shmget(key_t key, size_t size, int shmflg);
int show_panel(PANEL *panel);
int shutdown(int socket, int how);
int sig2str(int signum, char *str);
int sigaction(int sig, const struct sigaction *act, struct sigaction *oact);
int sigaddset(sigset_t *set, int signo);
int sigaltstack(const stack_t *ss, stack_t *oss);
int sigdelset(sigset_t *set, int signo);
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
sigfpe_handler_type sigfpe(sigfpe_code_type code, sigfpe_handler_type hdl);
int sighold(int sig);
int sigignore(int sig);
int siginterrupt(int, int);
int sigismember(sigset_t *set, int signo);
void siglongjmp(sigjmp_buf env, int val);
void (*signal(int sig, void (*disp)(int)))(int);
int signgam;
double significand(double x);
int sigpause(int mask);
int sigpending(sigset_t *set);
int sigprocmask(int how, const sigset_t *set, sigset_t *oset);
int sigqueue(pid_t pid, int signo, const union sigval value);
int sigrelse(int sig);
int sigsend(idtype_t idtype, id_t id, int sig);
int sigsendset(procset_t *psp, int sig);
void (*sigset(int sig, void (*disp)(int)))(int);
int sigsetjmp(sigjmp_buf env, int savemask);
int sigstack(struct sigstack *ss, struct sigstack *oss);
int sigsuspend(const sigset_t *set);
int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);
int sigwait(const sigset_t *set, int *sig);
int sigwaitinfo(const sigset_t *set, siginfo_t *info);
double sin(double x);
void single_to_decimal(single *px, decimal_mode *pm, decimal_record *pd, fp_exception_field_type *ps);
double sinh(double x);
char *slc_names[];
unsigned int sleep(unsigned int seconds);
int slk_attroff(chtype);
int slk_attron(chtype);
int slk_attrset(chtype);
int slk_clear(void);
int slk_init(int fmt);
char *slk_label(int labnum);
int slk_noutrefresh(void);
int slk_refresh(void);
int slk_restore(void);
int slk_set(int labnum, char *label, int fmt);
int slk_start(int, int *);
int slk_touch(void);
const char *slp_strerror(SLPError err_code);
struct sm_stat_res *sm_mon_1(struct mon *, CLIENT *);
struct sm_stat_res *sm_mon_1_svc(struct mon *, struct svc_req *);
void *sm_notify_1(struct stat_chge *, CLIENT *);
void *sm_notify_1_svc(struct stat_chge *, struct svc_req *);
int sm_prog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
void *sm_simu_crash_1(void *, CLIENT *);
void *sm_simu_crash_1_svc(void *, struct svc_req *);
struct sm_stat_res *sm_stat_1(struct sm_name *, CLIENT *);
struct sm_stat_res *sm_stat_1_svc(struct sm_name *, struct svc_req *);
struct sm_stat *sm_unmon_1(struct mon_id *, CLIENT *);
struct sm_stat *sm_unmon_1_svc(struct mon_id *, struct svc_req *);
struct sm_stat *sm_unmon_all_1(struct my_id *, CLIENT *);
struct sm_stat *sm_unmon_all_1_svc(struct my_id *, struct svc_req *);
int smedia_check_format_status(int fd);
int smedia_eject(int fd);
int smedia_format(int fd, uint_t flavor, uint_t mode);
int smedia_format_track(int fd, uint_t trackno, uint_t head, uint_t density);
int smedia_get_device_info(int fd, smdevice_info_t *smdevinfop);
int smedia_get_medium_property(int fd, smmedium_prop_t *smpropp);
int smedia_get_protection_status(int fd);
int smedia_raw_read(int fd, diskaddr_t blockno, caddr_t buffer, len_t nbytes);
int smedia_raw_write(int fd, diskaddr_t blockno, caddr_t buffer, len_t nbytes);
int smedia_reassign_block(int fd, diskaddr_t blockno);
int smedia_set_protection_status(int fd, smwp_state_t *wpstatep);
int snprintf(char *s, size_t n, const char *format, ...);
int socket(int domain, int type, int protocol);
int socketpair(int domain, int type, int protocol, int socket_vector[2]);
void space(__int16 x0, __int16 y0, __int16 x1, __int16 y1);
stabsret_t spf_load_stabs(const char *);
int spf_prtype(FILE *, const char *, int, const void *);
void *sprayproc_clear_1(void *, CLIENT *);
void *sprayproc_clear_1_svc(void *, struct svc_req *);
spraycumul *sprayproc_get_1(void *, CLIENT *);
spraycumul *sprayproc_get_1_svc(void *, struct svc_req *);
void *sprayproc_spray_1(sprayarr *, CLIENT *);
void *sprayproc_spray_1_svc(sprayarr *, struct svc_req *);
int sprayprog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
int sprintf(char *s, const char *format, ...);
double sqrt(double x);
void srand(unsigned int seed);
void srand48(int seedval);
void srandom(unsigned int seed);
int sscanf(const char *s, const char *format, ...);
void (*ssignal(int sig, int (*action)(int)))(int);
int standend(void);
int standout(void);
int start_color(void);
int stat(const char *path, struct stat *buf);
int stat64(const char *, struct stat64 *);
int statfs(const char *, struct statfs *, int, int);
int statvfs(const char *path, struct statvfs *buf);
int statvfs64(const char *, statvfs64_t *);
struct stc_defaults_t stc_initmodes;
WINDOW *stdscr;
int step(const char *string, const char *expbuf);
int stime(const time_t *tp);
int str2sig(const char *str, int *signum);
char *strcadd(char *output, const char *input);
int strcasecmp(const char *s1, const char *s2);
char *strcat(char *s1, const char *s2);
char *strccpy(char *output, const char *input);
char *strchr(char *s, int c);
int strcmp(const char *s1, const char *s2);
char *strcodes[];
int strcoll(const char *s1, const char *s2);
char *strcpy(char *s1, const char *s2);
size_t strcspn(const char *s1, const char *s2);
char *strdup(const char *s1);
char *streadd(char *output, const char *input, const char *exceptions);
char *strecpy(char *output, const char *input, const char *exceptions);
char *strerror(int errnum);
int strfind(const char *as1, const char *as2);
ssize_t strfmon(char *s, size_t maxsize, const char *format, ...);
char *strfnames[];
size_t strftime(const char *s, size_t maxsize, const char *format, const struct tm *timeptr);
void string_to_decimal(char **pc, int nmax, int fortran_conventions, decimal_record *pd, enum decimal_string_form *pform, char **pechar);
size_t strlcat(char *dst, const char *src, size_t dstsize);
size_t strlcpy(char *dst, const char *src, size_t dstsize);
size_t strlen(const char *s);
char *strnames[];
int strncasecmp(const char *s1, const char *s2, size_t n);
char *strncat(char *s1, const char *s2, size_t n);
int strncmp(const char *s1, const char *s2, size_t n);
char *strncpy(char *s1, const char *s2, size_t n);
size_t strnlen(const char *, size_t);
char *strpbrk(char *s1, const char *s2);
char *strptime(const char *buf, const char *format, struct tm *tm);
char *strrchr(char *s, int c);
char *strrspn(const char *string, const char *tc);
char *strsignal(int sig);
size_t strspn(const char *s1, const char *s2);
char *strstr(char *s1, const char *s2);
double strtod(const char *str, char **endptr);
char *strtok(char *s1, const char *s2);
char *strtok_r(char *s1, const char *s2, char **lasts);
int strtol(const char *str, char **endptr, int base);
__int64 strtoll(const char *str, char **endptr, int base);
unsigned int strtoul(const char *str, char **endptr, int base);
unsigned __int64 strtoull(const char *str, char **endptr, int base);
wchar_t *strtows(wchar_t *dst, const char *src);
char *strtrns(const char *string, const char *old, const char *new, char *result);
size_t strxfrm(char *s1, const char *s2, size_t n);
WINDOW *subpad(WINDOW *orig, int nlines, int ncols, int begin_y, int begin_x);
WINDOW *subwin(WINDOW *orig, int nlines, int ncols, int begin_y, int begin_x);
void svc_args_done();
int svc_auth_reg(int, enum auth_stat (*)());
bool_t svc_control(SVCXPRT *svc, const uint_t req, void *info);
SVCXPRT *svc_copy();
int svc_create(void (*dispatch)(const struct svc_req *, const SVCXPRT *), const rpcprog_t prognum, const rpcvers_t versnum, const char *nettype);
void svc_destroy(SVCXPRT *xprt);
SVCXPRT *svc_dg_create(const int fildes, const uint_t sendsz, const uint_t recvsz);
int svc_dg_enablecache(SVCXPRT *, const uint_t);
SVCXPRT *svc_dg_xprtcopy();
void svc_dg_xprtfree();
void svc_done(SVCXPRT *);
SVCXPRT *svc_door_create(void (*)(struct svc_req *, SVCXPRT *), const rpcprog_t, const rpcvers_t, const uint_t);
void svc_door_xprtfree();
void svc_exit(void);
mutex_t svc_exit_mutex;
SVCXPRT *svc_fd_create(const int fildes, const uint_t sendsz, const uint_t recvsz);
SVCXPRT *svc_fd_xprtcopy();
void svc_fd_xprtfree();
fd_set svc_fdset;
bool_t svc_get_local_cred(SVCXPRT *, svc_local_cred_t *);
void svc_getreq(int);
void svc_getreq_common(const int);
void svc_getreq_poll(struct pollfd *, const int);
void svc_getreqset(fd_set *);
int svc_max_fd;
int svc_max_pollfd;
int svc_mt_mode;
mutex_t svc_mutex;
int svc_nfds;
int svc_nfds_set;
int svc_pipe[2];
pollfd_t *svc_pollfd;
bool_t svc_polling;
SVCXPRT *svc_raw_create(void);
bool_t svc_reg(const SVCXPRT *, const rpcprog_t, const rpcvers_t, void (*)(struct svc_req *, SVCXPRT *), const struct netconfig *);
bool_t svc_register(SVCXPRT *, rpcprog_t, rpcvers_t, void (*)(struct svc_req *, SVCXPRT *), int);
void svc_run(void);
bool_t svc_sendreply(const SVCXPRT *, const xdrproc_t, const caddr_t);
cond_t svc_thr_fdwait;
mutex_t svc_thr_mutex;
SVCXPRT *svc_tli_create(const int fildes, const struct netconfig *netconf, const struct _xti_bind *bind_addr, const uint_t sendsz, const uint_t recvsz);
SVCXPRT *svc_tp_create(void (*dispatch)(const struct svc_req *, const SVCXPRT *), const rpcprog_t prognum, const rpcvers_t versnum, const struct netconfig *netconf);
void svc_unreg(const rpcprog_t, const rpcvers_t);
void svc_unregister(rpcprog_t, rpcvers_t);
SVCXPRT *svc_vc_create(const int fildes, const uint_t sendsz, const uint_t recvsz);
SVCXPRT *svc_vc_xprtcopy();
void svc_vc_xprtfree();
XDR **svc_xdrs;
SVCXPRT **svc_xports;
SVCXPRT *svc_xprt_alloc();
void svc_xprt_destroy();
void svc_xprt_free();
void svcerr_auth(const SVCXPRT *, const enum auth_stat);
void svcerr_decode(const SVCXPRT *);
void svcerr_noproc(const SVCXPRT *);
void svcerr_noprog(const SVCXPRT *);
void svcerr_progvers(const SVCXPRT *, const rpcvers_t, const rpcvers_t);
void svcerr_systemerr(const SVCXPRT *);
void svcerr_weakauth(const SVCXPRT *);
SVCXPRT *svcfd_create(int, uint_t, uint_t);
SVCXPRT *svcraw_create(void);
SVCXPRT *svctcp_create(int, uint_t, uint_t);
SVCXPRT *svcudp_bufcreate(int, uint_t, uint_t);
SVCXPRT *svcudp_create(int);
void swab(const void *src, void *dest, ssize_t nbytes);
struct vfsops swap_vfsops;
struct vnodeops swap_vnodeops;
int swapcontext(ucontext_t *oucp, const ucontext_t *ucp);
int swapctl(int cmd, void *arg);
pgcnt_t swapfs_desfree;
struct vnode *swapfs_getvp(ulong_t);
pgcnt_t swapfs_minfree;
pgcnt_t swapfs_reserve;
int swprintf(wchar_t *s, size_t n, const wchar_t *format, ...);
int swscanf(const wchar_t *s, const wchar_t *format, ...);
int symlink(const char *name1, const char *name2);
void sync(void);
void sync_instruction_memory(caddr_t addr, int len);
int syncok(WINDOW *win, bool bf);
int syscall(int, ...);
int sysconf(int name);
struct sysent sysent[];
int sysfs(int opcode);
int sysinfo(int command, char *buf, int count);
void syslog(int priority, const char *message, ...);
int system(const char *string);
int t_errno;
int t_kalloc(TIUSER *, int, int, char **);
int t_kbind(TIUSER *, struct _xti_bind *, struct _xti_bind *);
int t_kclose(TIUSER *, int);
int t_kconnect(TIUSER *, struct t_call *, struct t_call *);
int t_kfree(TIUSER *, char *, int);
int t_kgetstate(TIUSER *, int *);
int t_kopen(struct file *, dev_t, int, TIUSER **, struct cred *);
int t_krcvudata(TIUSER *, struct t_kunitdata *, int *, int *);
int t_ksndudata(TIUSER *, struct t_kunitdata *, frtn_t *);
int t_kspoll(TIUSER *, int, int, int *);
int t_kunbind(TIUSER *);
int t_tlitosyserr(int);
char *taddr2uaddr(const struct netconfig *config, const struct netbuf *addr);
double tan(double x);
double tanh(double x);
int tcdrain(int fildes);
int tcflow(int fildes, int action);
int tcflush(int fildes, int queue_selector);
int tcgetattr(int fildes, struct termios *termios_p);
pid_t tcgetpgrp(int fildes);
pid_t tcgetsid(int fildes);
void tcp_notsack_insert(notsack_blk_t **, tcp_seq, tcp_seq, int32_t *, uint32_t *);
void tcp_notsack_remove(notsack_blk_t **, tcp_seq, int32_t *, uint32_t *);
void tcp_notsack_update(notsack_blk_t **, tcp_seq, tcp_seq, int32_t *, uint32_t *);
void tcp_sack_insert(sack_blk_t *, tcp_seq, tcp_seq, int32_t *);
void tcp_sack_remove(sack_blk_t *, tcp_seq, int32_t *);
int tcsendbreak(int fildes, int duration);
int tcsetattr(int fildes, int optional_actions, const struct termios *termios_p);
int tcsetpgrp(int fildes, pid_t pgid);
void td_event_emptyset(td_thr_events_t *);
void td_event_fillset(td_thr_events_t *);
td_err_e td_init();
void td_log();
td_err_e td_statstd_ta_reset(const td_thragent_t *ta_p);
td_err_e td_sync_get_info(const td_synchandle_t *sh_p, td_syncinfo_t *si_p);
td_err_e td_sync_setstate(const td_synchandle_t *sh_p);
td_err_e td_sync_waiters(const td_synchandle_t *sh_p, td_thr_iter_f *cb, void *cb_data_p);
td_err_e td_ta_clear_event(const td_thragent_t *ta_p, td_thr_events_t *events);
td_err_e td_ta_delete(const td_thragent_t *ta_p);
td_err_e td_ta_enable_stats(const td_thragent_t *ta_p, int on_off);
td_err_e td_ta_event_addr(const td_thragent_t *ta_p, u_long event, td_notify_t *notify_p);
td_err_e td_ta_event_getmsg(const td_thragent_t *ta_p, td_event_msg_t *msg);
td_err_e td_ta_get_nthreads(const td_thragent_t *ta_p, int *nthread_p);
td_err_e td_ta_get_ph(const td_thragent_t *ta_p, struct ps_prochandle **ph_pp);
td_err_e td_ta_get_stats(const td_thragent_t *ta_p, td_ta_stats_t *tstats);
td_err_e td_ta_map_addr2sync(const td_thragent_t *ta_p, psaddr_t addr, td_synchandle_t *sh_p);
td_err_e td_ta_map_id2thr(const td_thragent_t *ta_p, thread_t tid, td_thrhandle_t *th_p);
td_err_e td_ta_map_lwp2thr(const td_thragent_t *ta_p, lwpid_t lwpid, td_thrhandle_t *th_p);
td_err_e td_ta_new(const struct ps_prochandle *ph_p, td_thragent_t **ta_pp);
td_err_e td_ta_reset_stats(const td_thragent_t *ta_p);
td_err_e td_ta_set_event(const td_thragent_t *ta_p, td_thr_events_t *events);
td_err_e td_ta_setconcurrency(const td_thragent_t *ta_p, int level);
td_err_e td_ta_sync_iter(const td_thragent_t *ta_p, td_sync_iter_f *cb, void *cbdata_p);
td_err_e td_ta_thr_iter(const td_thragent_t *ta_p, td_key_iter_f *cb, void *cbdata_p);
td_err_e td_ta_tsd_iter(const td_thragent_t *ta_p, td_key_iter_f *cb, void *cbdata_p);
td_err_e td_thr_clear_event(const td_thrhandle_t *th_p, td_thr_events_t *events);
td_err_e td_thr_dbresume(const td_thrhandle_t *th_p);
td_err_e td_thr_dbsuspend(const td_thrhandle_t *th_p);
td_err_e td_thr_event_enable(const td_thrhandle_t *th_p, int on_off);
td_err_e td_thr_event_getmsg(const td_thrhandle_t *th_p, td_event_msg_t *msg);
td_err_e td_thr_get_info(const td_thrhandle_t *th_p, td_thrinfo_t *ti_p);
td_err_e td_thr_getfpregs(const td_thrhandle_t *th_p, prfpregset_t *fpregset);
td_err_e td_thr_getgregs(const td_thrhandle_t *th_p, prgregset_t regset);
td_err_e td_thr_getxregs(const td_thrhandle_t *th_p, prxregset_t *xregset);
td_err_e td_thr_getxregsize(const td_thrhandle_t *th_p, int *xregsize);
td_err_e td_thr_lockowner(const td_thrhandle_t *th_p, td_sync_iter_f *cb, void *cb_data_p);
td_err_e td_thr_set_event(const td_thrhandle_t *th_p, td_thr_events_t *events);
td_err_e td_thr_setfpregs(const td_thrhandle_t *th_p, prfpregset_t *fpregset);
td_err_e td_thr_setgregs(const td_thrhandle_t *th_p, const prgregset_t regset);
td_err_e td_thr_setprio(const td_thrhandle_t *th_p, const int new_prio);
td_err_e td_thr_setsigpending(const td_thrhandle_t *th_p, const uchar_t ti_sigpending_flag, const sigset_t ti_sigmask);
td_err_e td_thr_setxregs(const td_thrhandle_t *th_p, prxregset_t *xregset);
td_err_e td_thr_sigsetmask(const td_thrhandle_t *th_p, const sigset_t ti_sigmask);
td_err_e td_thr_sleepinfo(const td_thrhandle_t *th_p, td_synchandle_t *sh_p);
td_err_e td_thr_tsd(const td_thrhandle_t, const thread_key_t key, void *data_pp);
td_err_e td_thr_validate(const td_thrhandle_t *th_p);
void *tdelete(const void *key, void **rootp, int (*compar)(const void *, const void *));
int tdirdelete(struct tmpnode *, struct tmpnode *, char *, enum dr_op, struct cred *);
int tdirenter(struct tmount *, struct tmpnode *, char *, enum de_op, struct tmpnode *, struct tmpnode *, struct vattr *, struct tmpnode **, struct cred *);
void tdirinit(struct tmpnode *, struct tmpnode *);
int tdirlookup(struct tmpnode *, char *, struct tmpnode **, struct cred *);
void tdirtrunc(struct tmpnode *);
off_t tell(int fd);
off64_t tell64(int);
int telldir(DIR *dirp);
char *tempnam(const char *dir, const char *pfx);
char *term_err_strings[];
__int16 term_errno;
char term_parm_err[];
chtype termattrs(void);
void termerr(void);
char *termname(void);
int testac(void);
char *textdomain(const char *domainname);
void *tfind(const void *key, void *const *rootp, int (*compar)(const void *, const void *));
int tgetent(char *bp, char *name);
int tgetflag(char id[2]);
int tgetnum(char id[2]);
char *tgetstr(char id[2], char **area);
char *tgoto(char *cap, int col, int row);
int thr_continue(thread_t target_thread);
int thr_create(void *stack_base, size_t stack_size, void *(*start_func)(void *), void *arg, int flags, thread_t *new_thread_ID);
void thr_exit(void *status);
int thr_getconcurrency(void);
int thr_getprio(thread_t target_thread, int *priority);
int thr_getspecific(thread_key_t key, void **valuep);
int thr_join(thread_t thread, thread_t *departed, void **status);
int thr_keycreate(thread_key_t *, void (*)(void *));
int thr_kill(thread_t thread, int sig);
int thr_main(void);
size_t thr_min_stack(void);
thread_t thr_self(void);
int thr_setconcurrency(int new_level);
int thr_setprio(thread_t target_thread, int priority);
int thr_setspecific(thread_key_t key, void *value);
int thr_sigsetmask(int how, const sigset_t *set, sigset_t *oset);
int thr_stksegment(stack_t *);
int thr_suspend(thread_t target_thread);
void thr_yield(void);
int tigetflag(char *capname);
int tigetint(char *);
int tigetnum(char *capname);
char *tigetstr(char *capname);
time_t time(time_t *tloc);
void time_to_wait(clock_t *, clock_t);
void timeout(int delay);
int timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid);
int timer_delete(timer_t timerid);
int timer_getoverrun(timer_t timerid);
int timer_gettime(timer_t timerid, struct itimerspec *value);
int timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue);
clock_t times(struct tms *buffer);
int timezone;
void tinputfd(int);
int tli_recv(TIUSER *, mblk_t **, int);
int tli_send(TIUSER *, mblk_t *, int);
int tmp_convnum(char *);
size_t tmp_kmemspace;
void *tmp_memalloc(size_t, int);
void tmp_memfree(void *, size_t);
int tmp_resv(struct tmount *, struct tmpnode *, size_t, int);
int tmp_sticky_remove_access(struct tmpnode *, struct tmpnode *, struct cred *);
int tmp_taccess(struct tmpnode *, int, struct cred *);
struct vnodeops tmp_vnodeops;
FILE *tmpfile(void);
FILE *tmpfile64(void);
size_t tmpfs_maxkmem;
int tmpfs_minfree;
char *tmpnam(char *s);
char *tmpnam_r(char *s);
void tmpnode_growmap(struct tmpnode *, ulong_t);
void tmpnode_init(struct tmount *, struct tmpnode *, struct vattr *, struct cred *);
int tmpnode_trunc(struct tmount *, struct tmpnode *, ulong_t);
void *tnf_allocate(tnf_ops_t *, size_t);
tnf_tag_data_t *tnf_char_tag_data;
tnf_error_handler_t tnf_default_error_handler;
char *tnf_error_message(tnf_errcode_t);
tnf_tag_data_t *tnf_float32_tag_data;
tnf_tag_data_t *tnf_float64_tag_data;
tnf_datum_t tnf_get_block_absolute(TNF *, unsigned int);
unsigned int tnf_get_block_count(TNF *);
tnf_datum_t tnf_get_block_header(tnf_datum_t);
tnf_datum_t tnf_get_block_relative(tnf_datum_t, int);
char tnf_get_char(tnf_datum_t);
char *tnf_get_chars(tnf_datum_t);
tnf_datum_t tnf_get_element(tnf_datum_t, unsigned int);
unsigned int tnf_get_element_count(tnf_datum_t);
tnf_datum_t tnf_get_element_type(tnf_datum_t);
caddr_t tnf_get_elements(tnf_datum_t);
tnf_datum_t tnf_get_file_header(TNF *);
tnf_float32_t tnf_get_float32(tnf_datum_t);
tnf_float64_t tnf_get_float64(tnf_datum_t);
tnf_int16_t tnf_get_int16(tnf_datum_t);
tnf_int32_t tnf_get_int32(tnf_datum_t);
tnf_int64_t tnf_get_int64(tnf_datum_t);
tnf_int8_t tnf_get_int8(tnf_datum_t);
tnf_kind_t tnf_get_kind(tnf_datum_t);
tnf_datum_t tnf_get_next_record(tnf_datum_t);
caddr_t tnf_get_raw(tnf_datum_t);
size_t tnf_get_size(tnf_datum_t);
unsigned int tnf_get_slot_count(tnf_datum_t);
unsigned int tnf_get_slot_index(tnf_datum_t, char *);
tnf_datum_t tnf_get_slot_indexed(tnf_datum_t, unsigned int);
char *tnf_get_slot_name(tnf_datum_t, unsigned int);
tnf_datum_t tnf_get_slot_named(tnf_datum_t, char *);
tnf_datum_t tnf_get_tag_arg(tnf_datum_t);
tnf_datum_t tnf_get_type(tnf_datum_t);
char *tnf_get_type_name(tnf_datum_t);
tnf_tag_data_t *tnf_int16_tag_data;
tnf_tag_data_t *tnf_int32_tag_data;
tnf_tag_data_t *tnf_int64_tag_data;
tnf_tag_data_t *tnf_int8_tag_data;
int tnf_is_array(tnf_datum_t);
int tnf_is_block_header(tnf_datum_t);
int tnf_is_inline(tnf_datum_t);
int tnf_is_record(tnf_datum_t);
int tnf_is_scalar(tnf_datum_t);
int tnf_is_string(tnf_datum_t);
int tnf_is_struct(tnf_datum_t);
int tnf_is_type(tnf_datum_t);
tnf_tag_data_t *tnf_lwpid_tag_data;
tnf_tag_data_t *tnf_name_tag_data;
tnf_tag_data_t *tnf_opaque_tag_data;
tnf_tag_data_t *tnf_pid_tag_data;
tnf_tag_data_t *tnf_probe_event_tag_data;
void tnf_process_disable(void);
void tnf_process_enable(void);
tnf_errcode_t tnf_reader_begin(caddr_t, size_t, TNF **);
tnf_errcode_t tnf_reader_end(TNF *);
tnf_ref32_t tnf_ref32_1(tnf_ops_t *, tnf_record_p, tnf_record_p);
void tnf_set_error_handler(tnf_error_handler_t *, void *);
tnf_tag_data_t *tnf_size_tag_data;
tnf_reference_t tnf_string_1(tnf_ops_t *, const char *, tnf_record_p, tnf_tag_data_t *);
tnf_tag_data_t *tnf_string_tag_data;
tnf_record_p tnf_struct_tag_1(tnf_ops_t *, tnf_tag_data_t *);
tnf_tag_data_t *tnf_tag_tag_data;
void tnf_thread_disable(void);
void tnf_thread_enable(void);
tnf_tag_data_t *tnf_time_base_tag_data;
tnf_tag_data_t *tnf_time_delta_tag_data;
tnf_datum_t tnf_type_get_base(tnf_datum_t);
tnf_kind_t tnf_type_get_kind(tnf_datum_t);
char *tnf_type_get_name(tnf_datum_t);
tnf_datum_t tnf_type_get_property(tnf_datum_t, char *);
size_t tnf_type_get_size(tnf_datum_t);
tnf_tag_data_t *tnf_uint16_tag_data;
tnf_tag_data_t *tnf_uint32_tag_data;
tnf_tag_data_t *tnf_uint64_tag_data;
tnf_tag_data_t *tnf_uint8_tag_data;
tnf_tag_data_t ***tnf_user_struct_properties;
tnfctl_errcode_t tnfctl_buffer_alloc(tnfctl_handle_t *hndl, const char *trace_file_name, size_t trace_buffer_size);
tnfctl_errcode_t tnfctl_buffer_dealloc(tnfctl_handle_t *);
tnfctl_errcode_t tnfctl_check_libs(tnfctl_handle_t *hndl);
tnfctl_errcode_t tnfctl_close(tnfctl_handle_t *hndl, tnfctl_targ_op_t action);
tnfctl_errcode_t tnfctl_continue(tnfctl_handle_t *hndl, tnfctl_event_t *evt, tnfctl_handle_t **child_hndl);
tnfctl_errcode_t tnfctl_exec_open(const char *pgm_name, char *const *argv, char *const *envp, const char *libnfprobe_path, const char *ld_preload, tnfctl_handle_t **ret_val);
tnfctl_errcode_t tnfctl_filter_list_add(tnfctl_handle_t *hndl, pid_t pid_to_add);
tnfctl_errcode_t tnfctl_filter_list_delete(tnfctl_handle_t *hndl, pid_t pid_to_delete);
tnfctl_errcode_t tnfctl_filter_list_get(tnfctl_handle_t *hndl, pid_t **pid_list, int *pid_count);
tnfctl_errcode_t tnfctl_filter_state_set(tnfctl_handle_t *hndl, boolean_t filter_state);
tnfctl_errcode_t tnfctl_indirect_open(void *prochandle, tnfctl_ind_config_t *config, tnfctl_handle_t **ret_val);
tnfctl_errcode_t tnfctl_internal_open(tnfctl_handle_t **ret_val);
tnfctl_errcode_t tnfctl_kernel_open(tnfctl_handle_t **ret_val);
tnfctl_errcode_t tnfctl_pid_open(pid_t pid, tnfctl_handle_t **ret_val);
tnfctl_errcode_t tnfctl_probe_apply(tnfctl_handle_t *hndl, tnfctl_probe_op_t probe_op, void *clientdata);
tnfctl_errcode_t tnfctl_probe_apply_ids(tnfctl_handle_t *hndl, ulong_t probe_count, ulong_t *probe_ids, tnfctl_probe_op_t probe_op, void *clientdata);
tnfctl_errcode_t tnfctl_probe_connect(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl, const char *lib_base_name, const char *func_name);
tnfctl_errcode_t tnfctl_probe_disable(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl, void *ignored);
tnfctl_errcode_t tnfctl_probe_disconnect_all(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl, void *ignored);
tnfctl_errcode_t tnfctl_probe_enable(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl, void *ignored);
tnfctl_errcode_t tnfctl_probe_state_get(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl, tnfctl_probe_state_t *state);
tnfctl_errcode_t tnfctl_probe_trace(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl, void *ignored);
tnfctl_errcode_t tnfctl_probe_untrace(tnfctl_handle_t *hndl, tnfctl_probe_t *probe_hndl, void *ignored);
tnfctl_errcode_t tnfctl_register_funcs(tnfctl_handle_t *hndl, void *(*create_func)(tnfctl_handle_t *, tnfctl_probe_t *), void (*destroy_func)(void *));
const char *tnfctl_strerror(tnfctl_errcode_t errcode);
tnfctl_errcode_t tnfctl_trace_attrs_get(tnfctl_handle_t *hndl, tnfctl_trace_attrs_t *attrs);
tnfctl_errcode_t tnfctl_trace_state_set(tnfctl_handle_t *hndl, boolean_t trace_state);
int toascii(int c);
int tolower(int c);
int top_panel(PANEL *panel);
int top_row(MENU *menu);
int touchline(WINDOW *win, int start, int count);
void touchlock(void);
int touchwin(WINDOW *win);
int toupper(int c);
wint_t towctrans(wint_t wc, wctrans_t desc);
wint_t towlower(wint_t wc);
wint_t towupper(wint_t wc);
char *tparm(char *str, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9);
int tputs(char *str, int affcnt, int (*putc)(char));
int traceoff(void);
int traceon(void);
int traverse(vnode_t **);
int truncate(const char *path, off_t length);
int truncate64(const char *, off64_t);
void *tsearch(const void *key, void **rootp, int (*compar)(const void *, const void *));
char *ttyname(int fildes);
int ttyname_r(int fildes, char *name, size_t namesize);
int ttyslot(void);
char ttytype[];
tune_t tune;
void twalk(const void *root, void (*action)(void *, VISIT, int));
int typeahead(int fildes);
char typetab[256];
char *tzname[2];
void tzset(void);
void tzsetwall(void);
union u_spcl u_spcl;
struct netbuf *uaddr2taddr(const struct netconfig *config, const char *uaddr);
int uadmin(int cmd, int fcn, uintptr_t mdep);
useconds_t ualarm(useconds_t useconds, useconds_t interval);
struct ufsbiostats ub;
ufsdrc_t *ufsd_exit_1(void *, CLIENT *);
ufsdrc_t *ufsd_exit_1_svc(void *, struct svc_req *);
ufsdrc_t *ufsd_null_1(void *, CLIENT *);
ufsdrc_t *ufsd_null_1_svc(void *, struct svc_req *);
int ufsd_prog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
ufsdrc_t *ufsd_recv_1(ufsd_msg_t *, CLIENT *);
ufsdrc_t *ufsd_recv_1_svc(ufsd_msg_t *, struct svc_req *);
ufsdrc_t *ufsd_repairfs_1(ufsd_repairfs_args_t *, CLIENT *);
ufsdrc_t *ufsd_repairfs_1_svc(ufsd_repairfs_args_t *, struct svc_req *);
ufsdrc_t *ufsd_repairfslist_1(ufsd_repairfs_list_t *, CLIENT *);
ufsdrc_t *ufsd_repairfslist_1_svc(ufsd_repairfs_list_t *, struct svc_req *);
ufsdrc_t *ufsd_send_1(ufsd_msg_t *, CLIENT *);
ufsdrc_t *ufsd_send_1_svc(ufsd_msg_t *, struct svc_req *);
int ulckpwdf(void);
int ulimit(int cmd, ...);
char *ulltostr(unsigned int longvalue, char *endptr);
mode_t umask(mode_t cmask);
int umount(const char *file);
int umount2(const char *file, int mflag);
int uname(struct utsname *name);
char *unctrl(int);
void undial(int fd);
int ungetc(int c, FILE *stream);
int ungetch(int ch);
wint_t ungetwc(wint_t, __FILE *);
int ungetwch(int wch);
int unlink(const char *path);
int unlockpt(int fildes);
int unordered(double dsrc1, double dsrc2);
int unpost_form(FORM *form);
int unpost_menu(MENU *menu);
int untouchwin(WINDOW *win);
void update_panels(void);
void updwtmp(char *wfile, struct utmp *utmp);
void updwtmpx(char *wfilex, struct utmpx *utmpx);
usb_log_handle_t usb_alloc_log_handle(dev_info_t *dip, char *name, uint_t *errlevel, uint_t *mask, uint_t *instance_filter, uint_t *show_label, uint_t flags);
size_t usb_ascii_string_descr(uchar_t *buf, size_t buflen, char *ret_descr, size_t ret_buf_len);
int usb_check_same_device(dev_info_t *dip);
int usb_create_pm_components(dev_info_t *dip, uint_t *pwrstates);
void usb_dprintf0(uint_t mask, usb_log_handle_t handle, char *fmt, ...);
void usb_dprintf1(uint_t mask, usb_log_handle_t handle, char *fmt, ...);
void usb_enable_parent_notification(dev_info_t *dip);
int usb_enable_remote_wakeup(dev_info_t *dip);
ushort_t usb_endpoint_num(usb_pipe_handle_t pipe_handle);
void usb_free_log_handle(usb_log_handle_t handle);
int usb_get_addr(dev_info_t *dip);
usb_device_descr_t *usb_get_dev_descr(dev_info_t *dip);
int usb_get_interface_number(dev_info_t *dip);
uchar_t *usb_get_raw_config_data(dev_info_t *dip, size_t *length);
int usb_get_string_descriptor(dev_info_t *dip, uint16_t langid, uint8_t index, char *buf, size_t buflen);
char *usb_get_usbdev_strdescr(dev_info_t *dip);
int usb_is_pm_enabled(dev_info_t *dip);
int usb_log(usb_log_handle_t handle, uint_t level, uint_t mask, char *fmt, ...);
size_t usb_parse_CV_configuration_descr(uchar_t *buf, size_t buflen, char *fmt, uint_t descr_type, uint_t descr_index, void *ret_descr, size_t ret_buf_len);
size_t usb_parse_CV_descr(char *format, uchar_t *data, size_t datalen, void *structure, size_t structlen);
size_t usb_parse_CV_endpoint_descr(uchar_t *buf, size_t buflen, char *fmt, uint_t interface_number, uint_t alt_interface_setting, uint_t endpoint_index, uint_t descr_type, uint_t descr_index, void *ret_descr, size_t ret_buf_len);
size_t usb_parse_CV_interface_descr(uchar_t *buf, size_t buflen, char *fmt, uint_t interface_number, uint_t alt_interface_setting, uint_t descr_type, uint_t descr_index, void *ret_descr, size_t ret_buf_len);
size_t usb_parse_config_pwr_descr(uchar_t *buf, size_t buflen, usb_config_pwr_descr_t *ret_descr, size_t ret_buf_len);
size_t usb_parse_configuration_descr(uchar_t *buf, size_t buflen, usb_config_descr_t *ret_descr, size_t ret_buf_len);
size_t usb_parse_device_descr(uchar_t *buf, size_t buflen, usb_device_descr_t *ret_descr, size_t ret_buf_len);
size_t usb_parse_endpoint_descr(uchar_t *buf, size_t buflen, uint_t interface_number, uint_t alt_interface_setting, uint_t endpoint_index, usb_endpoint_descr_t *ret_descr, size_t ret_buf_len);
size_t usb_parse_interface_descr(uchar_t *buf, size_t buflen, uint_t interface_number, uint_t alt_interface_setting, usb_interface_descr_t *ret_descr, size_t ret_buf_len);
size_t usb_parse_interface_pwr_descr(uchar_t *buf, size_t buflen, uint_t interface_number, uint_t alt_interface_setting, usb_interface_pwr_descr_t *ret_descr, size_t ret_buf_len);
int usb_pipe_abort(usb_pipe_handle_t pipe_handle, uint_t usb_flags, void (*callback)(usb_opaque_t, int, uint_t), usb_opaque_t callback_arg);
int usb_pipe_close(usb_pipe_handle_t *pipe_handle, uint_t usb_flags, void (*callback)(usb_opaque_t, int, uint_t), usb_opaque_t callback_arg);
int usb_pipe_device_ctrl_receive(usb_pipe_handle_t pipe_handle, uchar_t bmRequestType, uchar_t bRequest, uint16_t wValue, uint16_t wIndex, uint16_t wLength, uint_t usb_flags);
int usb_pipe_device_ctrl_send(usb_pipe_handle_t pipe_handle, uchar_t bmRequestType, uchar_t bRequest, uint16_t wValue, uint16_t wIndex, uint16_t wLength, mblk_t *data, uint_t usb_flags);
int usb_pipe_get_policy(usb_pipe_handle_t pipe_handle, usb_pipe_policy_t *pipe_policy);
usb_opaque_t usb_pipe_get_private(usb_pipe_handle_t pipe_handle);
int usb_pipe_get_state(usb_pipe_handle_t pipe_handle, usb_pipe_state_t *pipe_state, uint_t usb_flags);
int usb_pipe_open(dev_info_t *dip, usb_endpoint_descr_t *endpoint, usb_pipe_policy_t *pipe_policy, uint_t usb_flags, usb_pipe_handle_t *pipe_handle);
int usb_pipe_receive_bulk_data(usb_pipe_handle_t pipe_handle, size_t length, uint_t usb_flags);
int usb_pipe_release(usb_pipe_handle_t pipe_handle);
int usb_pipe_reserve(usb_pipe_handle_t pipe_handle, uint_t usb_flags);
int usb_pipe_reset(usb_pipe_handle_t pipe_handle, uint_t usb_flags, void (*callback)(usb_opaque_t, int, uint_t), usb_opaque_t callback_arg);
int usb_pipe_send_bulk_data(usb_pipe_handle_t pipe_handle, mblk_t *data, uint_t usb_flags);
int usb_pipe_send_isoc_data(usb_pipe_handle_t pipe_handle, mblk_t *data, uint_t usb_flags);
int usb_pipe_set_policy(usb_pipe_handle_t pipe_handle, usb_pipe_policy_t *pipe_policy, uint_t usb_flags);
int usb_pipe_set_private(usb_pipe_handle_t pipe_handle, usb_opaque_t data);
int usb_pipe_start_polling(usb_pipe_handle_t pipe_handle, uint_t usb_flags);
int usb_pipe_stop_polling(usb_pipe_handle_t pipe_handle, uint_t usb_flags, void (*callback)(usb_opaque_t, int, uint_t), usb_opaque_t callback_arg);
int usb_pipe_sync_device_ctrl_receive(usb_pipe_handle_t pipe_handle, uchar_t bmRequestType, uchar_t bRequest, uint16_t wValue, uint16_t wIndex, uint16_t wLength, mblk_t **data, uint_t *completion_reason, uint_t usb_flags);
int usb_pipe_sync_device_ctrl_send(usb_pipe_handle_t pipe_handle, uchar_t bmRequestType, uchar_t bRequest, uint16_t wValue, uint16_t wIndex, uint16_t wLength, mblk_t *data, uint_t *completion_reason, uint_t usb_flags);
int usb_request_lower_power(dev_info_t *dip, int comp, int level, void (*callback)(void *, int), void *arg, uint_t flags);
int usb_request_raise_power(dev_info_t *dip, int comp, int level, void (*callback)(void *, int), void *arg, uint_t flags);
int usb_set_device_pwrlvl0(dev_info_t *dip);
int usb_set_device_pwrlvl1(dev_info_t *dip);
int usb_set_device_pwrlvl2(dev_info_t *dip);
int usb_set_device_pwrlvl3(dev_info_t *dip);
int usb_taskq_request(void (*func)(void *), void *arg, uint_t flag);
void usba_get_hotplug_stats(dev_info_t *dip, ulong_t *total_success, ulong_t *success, ulong_t *total_failure, ulong_t *failure, uchar_t *device_count);
void usba_reset_hotplug_stats(dev_info_t *dip);
void usba_update_hotplug_stats(dev_info_t *dip, uint_t flags);
void use_env(char bool);
int user2netname(char *, const uid_t, const char *);
int usleep(useconds_t useconds);
int ustat(dev_t dev, struct ustat *buf);
int utime(const char *path, const struct utimbuf *times);
int utimes(const char *path, const struct timeval times[2]);
int utmpname(const char *file);
int utmpxname(const char *file);
struct utsname utsname;
struct var v;
void va_copy(va_list dest, va_list src);
void va_end(va_list pvar);
void va_start(va_list pvar);
void *valloc(size_t size);
pid_t vfork(void);
int vfprintf(FILE *stream, const char *format, va_list ap);
int vfwprintf(FILE *stream, const wchar_t *format, va_list arg);
void vhangup(void);
int vid32attr(chtype);
int vid32puts(chtype, int (*)(char));
void vidupdate(chtype, chtype, int (*)(char));
void vjcompress_init(vjstruct_t *);
int vjcompress_tcp(mblk_t **, vjstruct_t *);
void vjsetinparms(vjstruct_t *, uint_t, uint_t);
void vjsetoutparms(vjstruct_t *, uint_t, uint_t);
int vjuncompress_tcp(mblk_t **, uint_t, vjstruct_t *);
int vlfmt(FILE *stream, int flag, const char *format, va_list ap);
int volmgt_acquire(char *dev, char *id, int ovr, char **err, pid_t *pidp);
int volmgt_check(char *pathname);
int volmgt_feature_enabled(char *feat_str);
int volmgt_inuse(char *pathname);
int volmgt_ownspath(char *path);
int volmgt_release(char *dev);
char *volmgt_root(void);
int volmgt_running(void);
char *volmgt_symdev(char *symname);
char *volmgt_symname(char *pathname);
int vpfmt(FILE *stream, int flag, const char *format, va_list ap);
int vprintf(const char *format, va_list ap);
int vq_compress();
void vq_delete_node();
Vuid_q_code vq_get();
void vq_initialize();
int vq_is_valuator();
Vuid_q_code vq_peek();
Vuid_q_code vq_put();
Vuid_q_code vq_putback();
int vsnprintf(char *s, size_t n, const char *format, va_list ap);
int vsprintf(char *s, const char *format, va_list ap);
int vswprintf(wchar_t *s, size_t n, const wchar_t *format, va_list arg);
int vsyslog(int priority, const char *message, va_list ap);
ushort_t vttoif_tab[];
Vuid_state vuid_copy_state();
void vuid_destroy_state();
int vuid_get_value();
void vuid_set_value();
int vwprintf(const wchar_t *format, va_list arg);
int vwprintw(WINDOW *win, char *fmt, ...);
int vwscanw(WINDOW *win, char *fmt, va_list varglist);
int w32addch(WINDOW *, chtype);
int w32attroff(WINDOW *win, int attrs);
int w32attron(WINDOW *win, int attrs);
int w32attrset(WINDOW *win, int attrs);
int w32echochar(WINDOW *, chtype);
int w32insch(WINDOW *, chtype);
int waddchnstr(WINDOW *, chtype *, int);
int waddnstr(WINDOW *win, char *str, int n);
int waddnwstr(WINDOW *win, wchar_t *wstr, int n);
int waddstr(WINDOW *win, char *str);
int waddwch(WINDOW *, chtype);
int waddwchnstr(WINDOW *, chtype *, int);
int waddwstr(WINDOW *win, wchar_t *wstr);
int wadjcurspos(WINDOW *win);
pid_t wait(int *stat_loc);
pid_t wait3(int *statusp, int options, struct rusage *rusage);
pid_t wait4(pid_t pid, int *statusp, int options, struct rusage *rusage);
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
pid_t waitpid(pid_t pid, int *stat_loc, int options);
enum clnt_stat wallproc_wall_1(wrapstring *, void *, CLIENT *);
bool_t wallproc_wall_1_svc(wrapstring *, void *, struct svc_req *);
int wallprog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);
double watof(wchar_t *nptr);
int watoi(wchar_t *nptr);
int watol(wchar_t *nptr);
__int64 watoll(wchar_t *nptr);
int wbkgd(WINDOW *, chtype);
void wbkgdset(WINDOW *, chtype);
int wborder(WINDOW *, chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
int wclear(WINDOW *win);
int wclrtobot(WINDOW *win);
int wclrtoeol(WINDOW *win);
size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps);
wchar_t *wcscat(wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcschr(const wchar_t *ws, wchar_t wc);
int wcscmp(const wchar_t *ws1, const wchar_t *ws2);
int wcscoll(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcscpy(wchar_t *ws1, const wchar_t *ws2);
size_t wcscspn(const wchar_t *ws1, const wchar_t *ws2);
int wcsetno(wchar_t pc);
size_t wcslen(const wchar_t *ws);
wchar_t *wcsncat(wchar_t *ws1, const wchar_t *ws2, size_t n);
int wcsncmp(const wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wcsncpy(wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wcspbrk(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcsrchr(const wchar_t *ws, wchar_t wc);
size_t wcsrtombs(char *dst, const wchar_t **src, size_t len, mbstate_t *ps);
size_t wcsspn(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcsstr(wchar_t *ws1, const wchar_t *ws2);
double wcstod(const wchar_t *nptr, wchar_t **endptr);
int wcstol(const wchar_t *nptr, wchar_t **endptr, int base);
size_t wcstombs(char *s, const wchar_t *pwcs, size_t n);
unsigned int wcstoul(const wchar_t *nptr, wchar_t **endptr, int base);
wchar_t *wcswcs(const wchar_t *ws1, const wchar_t *ws2);
int wcswidth(const wchar_t *pwcs, size_t n);
size_t wcsxfrm(wchar_t *ws1, const wchar_t *ws2, size_t n);
int wctob(wint_t c);
int wctomb(char *s, wchar_t wchar);
wctrans_t wctrans(const char *charclass);
wctype_t wctype(const char *charclass);
void wcursyncup(WINDOW *win);
int wcwidth(wchar_t wc);
int wdbindf(wchar_t, wchar_t, int);
int wdchkind(wchar_t);
wchar_t *wddelim(wchar_t, wchar_t, int);
int wdelch(WINDOW *win);
int wdeleteln(WINDOW *win);
int wdinit(void);
int wechowchar(WINDOW *, chtype);
int werase(WINDOW *win);
int wgetch(WINDOW *win);
int wgetnstr(WINDOW *win, char *str, int n);
int wgetnwstr(WINDOW *win, wchar_t *wstr, int n);
int wgetstr(WINDOW *win, char *str);
int wgetwch(WINDOW *win);
int wgetwstr(WINDOW *win, wchar_t *wstr);
int whline(WINDOW *, chtype, int);
chtype winch(WINDOW *);
int winchnstr(WINDOW *, chtype *, int);
int winchstr(WINDOW *, chtype *);
int winnstr(WINDOW *win, char *str, int n);
int winnwstr(WINDOW *win, wchar_t *wstr, int n);
int winsdelln(WINDOW *win, int n);
int winsertln(WINDOW *win);
int winsnstr(WINDOW *win, char *str, int n);
int winsnwstr(WINDOW *win, wchar_t *wstr, int n);
int winsstr(WINDOW *win, char *str);
int winstr(WINDOW *win, char *str);
int winswch(WINDOW *, chtype);
int winswstr(WINDOW *win, wchar_t *wstr);
chtype winwch(WINDOW *);
int winwchnstr(WINDOW *, chtype *, int);
int winwstr(WINDOW *win, wchar_t *wstr);
wchar_t *wmemchr(wchar_t *ws, wchar_t wc, size_t n);
int wmemcmp(const wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wmemcpy(wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wmemmove(wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wmemset(wchar_t *ws, wchar_t wc, size_t n);
void wmouse_position(WINDOW *, int *, int *);
int wmove(WINDOW *win, int y, int x);
int wmovenextch(WINDOW *win);
int wmoveprevch(WINDOW *win);
int wnoutrefresh(WINDOW *win);
int wordexp(const char *words, wordexp_t *pwordexp, int flags);
void wordfree(wordexp_t *pwordexp);
int wprintf(const wchar_t *format, ...);
int wprintw(WINDOW *win, char *fmt, ...);
int wracct(idtype_t, id_t, int);
int wredrawln(WINDOW *win, int beg_line, int num_lines);
int wrefresh(WINDOW *win);
ssize_t write(int fildes, const void *buf, size_t nbyte);
int write_vtoc(int fd, struct vtoc *vtoc);
ssize_t writev(int fildes, const struct iovec *iov, int iovcnt);
int wscanf(const wchar_t *format, ...);
int wscanw(WINDOW *win, char *fmt, ...);
int wscasecmp(const wchar_t *s1, const wchar_t *s2);
wchar_t *wscat(wchar_t *ws1, const wchar_t *ws2);
wchar_t *wschr(const wchar_t *ws, wchar_t wc);
int wscmp(const wchar_t *ws1, const wchar_t *ws2);
int wscol(const wchar_t *s);
int wscoll(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wscpy(wchar_t *ws1, const wchar_t *ws2);
int wscrl(WINDOW *win, int n);
size_t wscspn(const wchar_t *ws1, const wchar_t *ws2);
wchar_t *wsdup(const wchar_t *s);
int wsetscrreg(WINDOW *win, int top, int bot);
size_t wslen(const wchar_t *ws);
int wsncasecmp(const wchar_t *s1, const wchar_t *s2, int n);
wchar_t *wsncat(wchar_t *ws1, const wchar_t *ws2, size_t n);
int wsncmp(const wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wsncpy(wchar_t *ws1, const wchar_t *ws2, size_t n);
wchar_t *wspbrk(const wchar_t *ws1, const wchar_t *ws2);
int wsprintf(wchar_t *s, const char *format, ...);
wchar_t *wsrchr(const wchar_t *ws, wchar_t wc);
int wsscanf(wchar_t *s, const char *format, ...);
size_t wsspn(const wchar_t *ws1, const wchar_t *ws2);
int wstandend(WINDOW *win);
int wstandout(WINDOW *win);
double wstod(const wchar_t *nptr, wchar_t **endptr);
wchar_t *wstok(wchar_t *ws1, const wchar_t *ws2);
int wstol(const wchar_t *nptr, wchar_t **endptr, int base);
__int64 wstoll(const wchar_t *, wchar_t **, int);
char *wstostr(char *dst, const wchar_t *src);
size_t wsxfrm(wchar_t *ws1, const wchar_t *ws2, size_t n);
void wsyncdown(WINDOW *win);
void wsyncup(WINDOW *win);
void wtimeout(WINDOW *win, int delay);
int wtouchln(WINDOW *win, int y, int n, int changed);
int wvline(WINDOW *, chtype, int);
bool_t xdr_accepted_reply(XDR *, struct accepted_reply *);
bool_t xdr_action_list(XDR *, action_list *);
bool_t xdr_action_list_entry(XDR *, action_list_entry *);
bool_t xdr_array(XDR *, caddr_t *, uint_t *, const uint_t, const uint_t, const xdrproc_t);
bool_t xdr_auth_req(XDR *, auth_req *);
bool_t xdr_auth_res(XDR *, auth_res *);
bool_t xdr_authloopback_parms(XDR *, struct authsys_parms *);
bool_t xdr_authsys_parms(XDR *, struct authsys_parms *);
bool_t xdr_autofs_action(XDR *, autofs_action *);
bool_t xdr_autofs_args(XDR *, autofs_args *);
bool_t xdr_autofs_lookupargs(XDR *, autofs_lookupargs *);
bool_t xdr_autofs_lookupres(XDR *, autofs_lookupres *);
bool_t xdr_autofs_mountres(XDR *, autofs_mountres *);
bool_t xdr_autofs_rddirargs(XDR *, autofs_rddirargs *);
bool_t xdr_autofs_rddirres(XDR *, autofs_rddirres *);
bool_t xdr_autofs_res(XDR *, autofs_res *);
bool_t xdr_autofs_stat(XDR *, autofs_stat *);
bool_t xdr_autofsrddir(XDR *, autofsrddir *);
bool_t xdr_bool(XDR *xdrs, bool_t *bp);
bool_t xdr_bp_address();
bool_t xdr_bp_fileid_t();
bool_t xdr_bp_getfile_arg();
bool_t xdr_bp_getfile_res();
bool_t xdr_bp_machine_name_t();
bool_t xdr_bp_path_t();
bool_t xdr_bp_whoami_arg();
bool_t xdr_bp_whoami_res();
bool_t xdr_bytes(XDR *, char **, uint_t *, const uint_t);
bool_t xdr_callhdr(XDR *, struct rpc_msg *);
bool_t xdr_callmsg(XDR *, struct rpc_msg *);
bool_t xdr_cback_data(XDR *, cback_data *);
bool_t xdr_char(XDR *xdrs, char *cp);
bool_t xdr_des_block(XDR *, des_block *);
bool_t xdr_double(XDR *xdrs, double *dp);
bool_t xdr_enum(XDR *xdrs, enum_t *ep);
bool_t xdr_fhandle(XDR *, fhandle_t *);
bool_t xdr_float(XDR *xdrs, float *fp);
bool_t xdr_free(xdrproc_t proc, char *objp);
bool_t xdr_fs_identity_t(XDR *, fs_identity_t *);
bool_t xdr_fsh4_access(XDR *, fsh4_access *);
bool_t xdr_fsh4_mode(XDR *, fsh4_mode *);
bool_t xdr_fsh_access();
bool_t xdr_fsh_mode();
bool_t xdr_getquota_args(XDR *, getquota_args *);
bool_t xdr_getquota_rslt(XDR *, getquota_rslt *);
bool_t xdr_gid_t(XDR *, gid_t *ip);
bool_t xdr_gqr_status(XDR *, gqr_status *);
bool_t xdr_hyper(XDR *xdrs, longlong_t *llp);
bool_t xdr_int(XDR *xdrs, int *ip);
bool_t xdr_int16_t(XDR *, int16_t *);
bool_t xdr_int32(XDR *, int32 *);
bool_t xdr_int32_t(XDR *, int32_t *);
bool_t xdr_int64(XDR *, int64 *);
bool_t xdr_int64_t(XDR *, int64_t *);
bool_t xdr_int8_t(XDR *, int8_t *);
bool_t xdr_ip_addr_t();
bool_t xdr_linka(XDR *, linka *);
bool_t xdr_long(XDR *xdrs, int *lp);
bool_t xdr_longlong_t(XDR *xdrs, longlong_t *llp);
bool_t xdr_lookup_result_type(XDR *, lookup_result_type *);
bool_t xdr_mon(XDR *, mon *);
bool_t xdr_mon_id(XDR *, mon_id *);
bool_t xdr_mount_result_type(XDR *, mount_result_type *);
bool_t xdr_my_id(XDR *, my_id *);
bool_t xdr_netbuf();
bool_t xdr_netobj(XDR *, netobj *);
bool_t xdr_nfs_fh3(XDR *, nfs_fh3 *);
bool_t xdr_nfslog_COMMIT3args(XDR *, nfslog_COMMIT3args *);
bool_t xdr_nfslog_CREATE3args(XDR *, nfslog_CREATE3args *);
bool_t xdr_nfslog_CREATE3res(XDR *, nfslog_CREATE3res *);
bool_t xdr_nfslog_LINK3args(XDR *, nfslog_LINK3args *);
bool_t xdr_nfslog_LOOKUP3res(XDR *, nfslog_LOOKUP3res *);
bool_t xdr_nfslog_MKDIR3args(XDR *, nfslog_MKDIR3args *);
bool_t xdr_nfslog_MKDIR3res(XDR *, nfslog_MKDIR3res *);
bool_t xdr_nfslog_MKNOD3args(XDR *, nfslog_MKNOD3args *);
bool_t xdr_nfslog_MKNOD3res(XDR *, nfslog_MKNOD3res *);
bool_t xdr_nfslog_READ3args(XDR *, nfslog_READ3args *);
bool_t xdr_nfslog_READ3res(XDR *, nfslog_READ3res *);
bool_t xdr_nfslog_READDIRPLUS3args(XDR *, nfslog_READDIRPLUS3args *);
bool_t xdr_nfslog_READDIRPLUS3res(XDR *, nfslog_READDIRPLUS3res *);
bool_t xdr_nfslog_READLINK3res(XDR *, nfslog_READLINK3res *);
bool_t xdr_nfslog_REMOVE3args(XDR *, nfslog_REMOVE3args *);
bool_t xdr_nfslog_RENAME3args(XDR *, nfslog_RENAME3args *);
bool_t xdr_nfslog_RMDIR3args(XDR *, nfslog_RMDIR3args *);
bool_t xdr_nfslog_SETATTR3args(XDR *, nfslog_SETATTR3args *);
bool_t xdr_nfslog_SYMLINK3args(XDR *, nfslog_SYMLINK3args *);
bool_t xdr_nfslog_SYMLINK3res(XDR *, nfslog_SYMLINK3res *);
bool_t xdr_nfslog_WRITE3args(XDR *, nfslog_WRITE3args *);
bool_t xdr_nfslog_WRITE3res(XDR *, nfslog_WRITE3res *);
bool_t xdr_nfslog_buffer_header(XDR *, nfslog_buffer_header *);
bool_t xdr_nfslog_createargs(XDR *, nfslog_createargs *);
bool_t xdr_nfslog_diropargs(XDR *, nfslog_diropargs *);
bool_t xdr_nfslog_diropargs3(XDR *, nfslog_diropargs3 *);
bool_t xdr_nfslog_diropres(XDR *, nfslog_diropres *);
bool_t xdr_nfslog_getfhargs(XDR *, nfslog_getfhargs *);
bool_t xdr_nfslog_linkargs(XDR *, nfslog_linkargs *);
bool_t xdr_nfslog_nfsreadargs(XDR *, nfslog_nfsreadargs *);
bool_t xdr_nfslog_rddirargs(XDR *, nfslog_rddirargs *);
bool_t xdr_nfslog_rddirres(XDR *, nfslog_rddirres *);
bool_t xdr_nfslog_rdlnres(XDR *, nfslog_rdlnres *);
bool_t xdr_nfslog_rdresult(XDR *, nfslog_rdresult *);
bool_t xdr_nfslog_request_record(XDR *, nfslog_request_record *);
bool_t xdr_nfslog_rnmargs(XDR *, nfslog_rnmargs *);
bool_t xdr_nfslog_setattrargs(XDR *, nfslog_setattrargs *);
bool_t xdr_nfslog_sharefsargs(XDR *, nfslog_sharefsargs *);
bool_t xdr_nfslog_sharefsres(XDR *, nfslog_sharefsres *);
bool_t xdr_nfslog_symlinkargs(XDR *, nfslog_symlinkargs *);
bool_t xdr_nfslog_writeargs(XDR *, nfslog_writeargs *);
bool_t xdr_nfslog_writeresult(XDR *, nfslog_writeresult *);
bool_t xdr_nfsstat(XDR *, nfsstat *);
bool_t xdr_nfsstat3(XDR *, nfsstat3 *);
bool_t xdr_nispasswd_authresult(XDR *, nispasswd_authresult *);
bool_t xdr_nispasswd_code(XDR *, nispasswd_code *);
bool_t xdr_nispasswd_error(XDR *, nispasswd_error *);
bool_t xdr_nispasswd_field(XDR *, nispasswd_field *);
bool_t xdr_nispasswd_status(XDR *, nispasswd_status *);
bool_t xdr_nispasswd_updresult(XDR *, nispasswd_updresult *);
bool_t xdr_nispasswd_verf(XDR *, nispasswd_verf *);
bool_t xdr_nlm4_cancargs(XDR *, nlm4_cancargs *);
bool_t xdr_nlm4_holder(XDR *, nlm4_holder *);
bool_t xdr_nlm4_lock(XDR *, nlm4_lock *);
bool_t xdr_nlm4_lockargs(XDR *, nlm4_lockargs *);
bool_t xdr_nlm4_notify(XDR *, nlm4_notify *);
bool_t xdr_nlm4_res(XDR *, nlm4_res *);
bool_t xdr_nlm4_share(XDR *, nlm4_share *);
bool_t xdr_nlm4_shareargs(XDR *, nlm4_shareargs *);
bool_t xdr_nlm4_shareres(XDR *, nlm4_shareres *);
bool_t xdr_nlm4_stat(XDR *, nlm4_stat *);
bool_t xdr_nlm4_stats(XDR *, nlm4_stats *);
bool_t xdr_nlm4_testargs(XDR *, nlm4_testargs *);
bool_t xdr_nlm4_testres(XDR *, nlm4_testres *);
bool_t xdr_nlm4_testrply(XDR *, nlm4_testrply *);
bool_t xdr_nlm4_unlockargs(XDR *, nlm4_unlockargs *);
bool_t xdr_nlm_cancargs();
bool_t xdr_nlm_holder();
bool_t xdr_nlm_lock();
bool_t xdr_nlm_lockargs();
bool_t xdr_nlm_notify();
bool_t xdr_nlm_res();
bool_t xdr_nlm_share();
bool_t xdr_nlm_shareargs();
bool_t xdr_nlm_shareres();
bool_t xdr_nlm_stat();
bool_t xdr_nlm_stats();
bool_t xdr_nlm_testargs();
bool_t xdr_nlm_testres();
bool_t xdr_nlm_testrply();
bool_t xdr_nlm_unlockargs();
bool_t xdr_npd_newpass(XDR *, npd_newpass *);
bool_t xdr_npd_request(XDR *, npd_request *);
bool_t xdr_npd_update(XDR *, npd_update *);
bool_t xdr_nsm_addr_res(XDR *, nsm_addr_res *);
bool_t xdr_obj_p(XDR *, obj_p *);
bool_t xdr_opaque(XDR *, caddr_t, const uint_t);
bool_t xdr_passbuf(XDR *, passbuf);
bool_t xdr_passwd_info(XDR *, passwd_info *);
bool_t xdr_pm__list();
bool_t xdr_pmap();
bool_t xdr_pmaplist(XDR *, pmaplist **);
bool_t xdr_pmaplist_ptr();
bool_t xdr_pointer(XDR *, char **, uint_t, const xdrproc_t);
bool_t xdr_quadruple(XDR *xdrs, long double *pq);
bool_t xdr_reference(XDR *, caddr_t *, uint_t, const xdrproc_t);
bool_t xdr_reg1args(XDR *, reg1args *);
bool_t xdr_reg1res(XDR *, reg1res *);
bool_t xdr_rejected_reply(XDR *, struct rejected_reply *);
bool_t xdr_replymsg(XDR *, struct rpc_msg *);
bool_t xdr_res(XDR *, res *);
bool_t xdr_rmtcallargs();
bool_t xdr_rmtcallres();
bool_t xdr_rp__list();
bool_t xdr_rpcb();
bool_t xdr_rpcb_entry();
bool_t xdr_rpcb_entry_list();
bool_t xdr_rpcb_entry_list_ptr();
bool_t xdr_rpcb_rmtcallargs();
bool_t xdr_rpcb_rmtcallres();
bool_t xdr_rpcb_stat();
bool_t xdr_rpcb_stat_byvers();
bool_t xdr_rpcblist(XDR *, rpcblist **);
bool_t xdr_rpcblist_ptr();
bool_t xdr_rpcbs_addrlist();
bool_t xdr_rpcbs_addrlist_ptr();
bool_t xdr_rpcbs_proc();
bool_t xdr_rpcbs_rmtcalllist();
bool_t xdr_rpcbs_rmtcalllist_ptr();
bool_t xdr_rquota(XDR *, rquota *);
bool_t xdr_rstat_timeval(XDR *, rstat_timeval *);
bool_t xdr_rusers_utmp(XDR *, rusers_utmp *);
bool_t xdr_short(XDR *xdrs, __int16 *sp);
unsigned int xdr_sizeof(xdrproc_t, void *);
bool_t xdr_sm_name(XDR *, sm_name *);
bool_t xdr_sm_stat(XDR *, sm_stat *);
bool_t xdr_sm_stat_res(XDR *, sm_stat_res *);
bool_t xdr_sprayarr(XDR *xdrs, sprayarr *objp);
bool_t xdr_spraycumul(XDR *xdrs, spraycumul *objp);
bool_t xdr_spraytimeval(XDR *, spraytimeval *);
bool_t xdr_stat_chge(XDR *, stat_chge *);
bool_t xdr_statstime(XDR *, statstime *);
bool_t xdr_statsvar(XDR *, statsvar *);
bool_t xdr_status(XDR *, status *);
bool_t xdr_string(XDR *, char **, const uint_t);
bool_t xdr_time_t(XDR *, time_t *);
bool_t xdr_u_char(XDR *xdrs, unsigned __int8 *ucp);
bool_t xdr_u_hyper(XDR *xdrs, u_longlong_t *ullp);
bool_t xdr_u_int(XDR *xdrs, unsigned int *up);
bool_t xdr_u_long(XDR *, ulong_t *);
bool_t xdr_u_longlong_t(XDR *xdrs, u_longlong_t *ullp);
bool_t xdr_u_short(XDR xdrs, unsigned __int16 *usp);
bool_t xdr_ufsd_boot_type_t(XDR *, ufsd_boot_type_t *);
bool_t xdr_ufsd_event_t(XDR *, ufsd_event_t *);
bool_t xdr_ufsd_fsck_state_t(XDR *, ufsd_fsck_state_t *);
bool_t xdr_ufsd_log_data_t(XDR *, ufsd_log_data_t *);
bool_t xdr_ufsd_log_msg_t(XDR *, ufsd_log_msg_t *);
bool_t xdr_ufsd_log_op_t(XDR *, ufsd_log_op_t *);
bool_t xdr_ufsd_msg_t(XDR *, ufsd_msg_t *);
bool_t xdr_ufsd_msg_vardata_t(XDR *, ufsd_msg_vardata_t *);
bool_t xdr_ufsd_repairfs_args_t(XDR *, ufsd_repairfs_args_t *);
bool_t xdr_ufsd_repairfs_list_t(XDR *, ufsd_repairfs_list_t *);
bool_t xdr_ufsdrc_t(XDR *, ufsdrc_t *);
bool_t xdr_uid_t(XDR *, gid_t *ip);
bool_t xdr_uint16_t(XDR *, uint16_t *);
bool_t xdr_uint32(XDR *, uint32 *);
bool_t xdr_uint32_t(XDR *, uint32_t *);
bool_t xdr_uint64(XDR *, uint64 *);
bool_t xdr_uint64_t(XDR *, uint64_t *);
bool_t xdr_uint8_t(XDR *, uint8_t *);
bool_t xdr_umntrequest(XDR *, umntrequest *);
bool_t xdr_umntres(XDR *, umntres *);
bool_t xdr_union(XDR *, enum_t *, char *, const struct xdr_discrim *, const xdrproc_t);
bool_t xdr_unreg1args(XDR *, unreg1args *);
bool_t xdr_unreg1res(XDR *, unreg1res *);
bool_t xdr_utmp_array(XDR *, utmp_array *);
int xdr_utmpidlearr();
bool_t xdr_vector(XDR *, char *, const uint_t, const uint_t, const xdrproc_t);
bool_t xdr_void(void);
bool_t xdr_wrapstring(XDR *, wrapstring *);
bool_t xdr_yp_buf();
bool_t xdr_ypdelete_args();
int xdr_yppasswd();
bool_t xdr_ypupdate_args();
void xdrmem_create(XDR *, const caddr_t, const uint_t, const enum xdr_op);
void xdrrec_create(XDR *, const uint_t, const uint_t, const caddr_t, int (*)(void *, caddr_t, int), int (*)(void *, caddr_t, int));
bool_t xdrrec_endofrecord(XDR *, bool_t);
bool_t xdrrec_eof(XDR *);
uint_t xdrrec_readbytes(XDR *, caddr_t, uint_t);
bool_t xdrrec_skiprecord(XDR *);
void xdrstdio_create(XDR *, FILE *, const enum xdr_op);
void xprt_register(const SVCXPRT *);
void xprt_unregister(const SVCXPRT *);
double y0(double x);
double y1(double x);
void yield(void);
double yn(int n, double x);
int yp_all(char *, char *, struct ypall_callback *);
int yp_bind(char *);
int yp_first(char *, char *, char **, int *, char **, int *);
int yp_get_default_domain(char **);
int yp_master(char *, char *, char **);
int yp_match(char *, char *, char *, int, char **, int *);
int yp_next(char *, char *, char *, int, char **, int *, char **, int *);
int yp_order(char *, char *, unsigned int *);
void yp_unbind(char *);
int yp_update(char *domain, char *map, unsigned int ypop, char *key, int keylen, char *data, int datalen);
char *yperr_string(int);
int ypprot_err(int);
uint_t *ypu_change_1();
uint_t *ypu_delete_1();
uint_t *ypu_insert_1();
uint_t *ypu_store_1();
void zs_program(struct zs_prog *zspp);
int zs_usec_delay;
void zsa_init(struct zscom *zs);
int zsmctl(struct zscom *zs, int bits, int how);
void zsopinit(struct zscom *zs, struct zsops *zso);
version ansi_1;
version c_issue_4;
maptypes deltamaptype;
$003F63A829E52477BDB4080710A1139D endorder;
decimal_string_form fixed_dotfrac_form;
decimal_form fixed_form;
decimal_string_form fixed_int_form;
decimal_string_form fixed_intdot_form;
decimal_string_form fixed_intdotfrac_form;
decimal_string_form floating_dotfrac_form;
decimal_form floating_form;
decimal_string_form floating_int_form;
decimal_string_form floating_intdot_form;
decimal_string_form floating_intdotfrac_form;
fp_exception_type fp_division;
fp_precision_type fp_double;
fp_precision_type fp_extended;
fp_exception_type fp_inexact;
fp_class_type fp_infinity;
fp_exception_type fp_invalid;
fp_direction_type fp_nearest;
fp_direction_type fp_negative;
fp_class_type fp_normal;
fp_exception_type fp_overflow;
fp_direction_type fp_positive;
fp_precision_type fp_precision_3;
fp_class_type fp_quiet;
fp_class_type fp_signaling;
fp_precision_type fp_single;
fp_class_type fp_subnormal;
fp_direction_type fp_tozero;
fp_trap_enable_type fp_trap_division;
fp_trap_enable_type fp_trap_inexact;
fp_trap_enable_type fp_trap_invalid;
fp_trap_enable_type fp_trap_overflow;
fp_trap_enable_type fp_trap_underflow;
fp_exception_type fp_underflow;
fp_class_type fp_zero;
fsh_access fsa_NONE;
fsh_access fsa_R;
fsh_access fsa_RW;
fsh_access fsa_W;
fsh_mode fsm_DN;
fsh_mode fsm_DR;
fsh_mode fsm_DRW;
fsh_mode fsm_DW;
decimal_string_form inf_form;
decimal_string_form infinity_form;
decimal_string_form invalid_form;
$003F63A829E52477BDB4080710A1139D leaf;
version libm_ieee;
maptypes logmaptype;
maptypes matamaptype;
MACRO_PSR_0 nPC;
decimal_string_form nan_form;
decimal_string_form nanstring_form;
MACRO_nfs3nametoolong nfs3nametoolong;
nlm_stats nlm_blocked;
nlm_stats nlm_deadlck;
nlm_stats nlm_denied;
nlm_stats nlm_denied_grace_period;
nlm_stats nlm_denied_nolocks;
nlm_stats nlm_granted;
__ns_class ns_c_any;
__ns_class ns_c_chaos;
__ns_class ns_c_hs;
__ns_class ns_c_in;
__ns_class ns_c_max;
__ns_class ns_c_none;
__ns_flag ns_f_aa;
__ns_flag ns_f_ad;
__ns_flag ns_f_cd;
__ns_flag ns_f_max;
__ns_flag ns_f_opcode;
__ns_flag ns_f_qr;
__ns_flag ns_f_ra;
__ns_flag ns_f_rcode;
__ns_flag ns_f_rd;
__ns_flag ns_f_tc;
__ns_flag ns_f_z;
__ns_opcode ns_o_iquery;
__ns_opcode ns_o_max;
__ns_opcode ns_o_notify;
__ns_opcode ns_o_query;
__ns_opcode ns_o_status;
__ns_opcode ns_o_update;
__ns_rcode ns_r_formerr;
__ns_rcode ns_r_max;
__ns_rcode ns_r_noerror;
__ns_rcode ns_r_notauth;
__ns_rcode ns_r_notimpl;
__ns_rcode ns_r_notzone;
__ns_rcode ns_r_nxdomain;
__ns_rcode ns_r_nxrrset;
__ns_rcode ns_r_refused;
__ns_rcode ns_r_servfail;
__ns_rcode ns_r_yxdomain;
__ns_rcode ns_r_yxrrset;
__ns_sect ns_s_an;
__ns_sect ns_s_ar;
__ns_sect ns_s_max;
__ns_sect ns_s_ns;
__ns_sect ns_s_pr;
__ns_sect ns_s_qd;
__ns_sect ns_s_ud;
__ns_sect ns_s_zn;
__ns_type ns_t_a;
__ns_type ns_t_aaaa;
__ns_type ns_t_afsdb;
__ns_type ns_t_any;
__ns_type ns_t_atma;
__ns_type ns_t_axfr;
__ns_type ns_t_cname;
__ns_type ns_t_eid;
__ns_type ns_t_gpos;
__ns_type ns_t_hinfo;
__ns_type ns_t_isdn;
__ns_type ns_t_ixfr;
__ns_type ns_t_key;
__ns_type ns_t_loc;
__ns_type ns_t_maila;
__ns_type ns_t_mailb;
__ns_type ns_t_max;
__ns_type ns_t_mb;
__ns_type ns_t_md;
__ns_type ns_t_mf;
__ns_type ns_t_mg;
__ns_type ns_t_minfo;
__ns_type ns_t_mr;
__ns_type ns_t_mx;
__ns_type ns_t_naptr;
__ns_type ns_t_nimloc;
__ns_type ns_t_ns;
__ns_type ns_t_nsap;
__ns_type ns_t_nsap_ptr;
__ns_type ns_t_null;
__ns_type ns_t_nxt;
__ns_type ns_t_ptr;
__ns_type ns_t_px;
__ns_type ns_t_rp;
__ns_type ns_t_rt;
__ns_type ns_t_sig;
__ns_type ns_t_soa;
__ns_type ns_t_srv;
__ns_type ns_t_txt;
__ns_type ns_t_wks;
__ns_type ns_t_x25;
__ns_update_operation ns_uop_add;
__ns_update_operation ns_uop_delete;
__ns_update_operation ns_uop_max;
nsm_addr_res nsm_addr_fail;
nsm_addr_res nsm_addr_succ;
MACRO_oEFT oEFT_MAGIC;
$003F63A829E52477BDB4080710A1139D postorder;
$BD2A00A5EDFC2FF1400278A291F46E84 ppp802_1D;
$BD2A00A5EDFC2FF1400278A291F46E84 pppAPPLETALK_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppAPPLETALK_PROTO;
pppState pppAckRcvd;
pppState pppAckSent;
pppLinkMediaType pppAsync;
ppp_errors pppAuthFailed;
$BD2A00A5EDFC2FF1400278A291F46E84 pppAuthPAP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppBANYAN_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppBANYAN_VINES;
$BD2A00A5EDFC2FF1400278A291F46E84 pppBRIDGING_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppBRIDGING_PDU;
pppLinkQuality pppBad;
$BD2A00A5EDFC2FF1400278A291F46E84 pppCHAP;
pppLinkCRCSize pppCRC16;
pppLinkCRCSize pppCRC32;
pppState pppClosed;
pppState pppClosing;
ppp_errors pppConfigFailed;
$BD2A00A5EDFC2FF1400278A291F46E84 pppDECNET_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppDECNET_PROTO;
$BD2A00A5EDFC2FF1400278A291F46E84 pppDEVICE;
pppLinkQuality pppGood;
$BD2A00A5EDFC2FF1400278A291F46E84 pppIPX_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppIPX_PROTO;
$BD2A00A5EDFC2FF1400278A291F46E84 pppIP_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppIP_PROTO;
pppState pppInitial;
$BD2A00A5EDFC2FF1400278A291F46E84 pppLCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppLQM_REPORT;
$BD2A00A5EDFC2FF1400278A291F46E84 pppLUXCOM;
ppp_errors pppLocalAuthFailed;
ppp_errors pppLoopedBack;
ppp_errors pppNegotiateFailed;
pppSense pppNone;
$BD2A00A5EDFC2FF1400278A291F46E84 pppOSI_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppOSI_PROTO;
pppState pppOpened;
ppp_errors pppProtoClosed;
pppLinkVersions pppRFC1171;
pppLinkVersions pppRFC1331;
pppSense pppReceiveAndSend;
pppSense pppReceiveOnly;
ppp_errors pppRemoteAuthFailed;
pppState pppReqSent;
$BD2A00A5EDFC2FF1400278A291F46E84 pppSIGMA;
$BD2A00A5EDFC2FF1400278A291F46E84 pppSTREAM_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppSTREAM_PROTO;
pppSense pppSendOnly;
pppState pppStarting;
pppState pppStopped;
pppState pppStopping;
pppLinkMediaType pppSync;
$BD2A00A5EDFC2FF1400278A291F46E84 pppVJ_COMP_TCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppVJ_UNCOMP_TCP;
$A091DCDAEC8B8097B50B5275FBA122A0 pppVer1;
$A091DCDAEC8B8097B50B5275FBA122A0 pppVer2;
$BD2A00A5EDFC2FF1400278A291F46E84 pppXNS_NCP;
$BD2A00A5EDFC2FF1400278A291F46E84 pppXNS_PROTO;
$003F63A829E52477BDB4080710A1139D preorder;
bpp_unit::trans_type read_trans;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_done;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_error;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_goahead;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_modified;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_nextns;
$2FA655DF3B517FACB7949C2D644DAB43 rpc_gss_svc_default;
$2FA655DF3B517FACB7949C2D644DAB43 rpc_gss_svc_integrity;
$2FA655DF3B517FACB7949C2D644DAB43 rpc_gss_svc_none;
$2FA655DF3B517FACB7949C2D644DAB43 rpc_gss_svc_privacy;
MACRO_sIOC sIOC;
MACRO_st st_debug;
res stat_fail;
res stat_succ;
version strict_ansi;
MACRO_TCION tIOC;
MACRO_tdelta tdelta_t_sz;
maptypes udmaptype;
decimal_string_form whitespace_form;
bpp_unit::trans_type write_trans;
MACRO_xEOF xEOF;
MACRO_zIOC zIOC;
